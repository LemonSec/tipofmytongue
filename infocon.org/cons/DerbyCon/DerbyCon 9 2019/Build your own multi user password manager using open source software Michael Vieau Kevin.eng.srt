1
00:00:00,380 --> 00:00:06,270
thank you thank you very much for

2
00:00:02,879 --> 00:00:08,639
getting up so early I know I did my name

3
00:00:06,270 --> 00:00:10,860
is Michael this is Kevin we're here to

4
00:00:08,639 --> 00:00:12,480
talk today about building your own

5
00:00:10,860 --> 00:00:15,209
multi-factor or excuse me not

6
00:00:12,480 --> 00:00:16,830
multi-factor multi-user password

7
00:00:15,210 --> 00:00:22,470
management using open source software

8
00:00:16,830 --> 00:00:24,119
and why we decided to do this so a

9
00:00:22,470 --> 00:00:27,390
little bit of us we both work for Sikich

10
00:00:24,119 --> 00:00:30,210
it's a professional services firm what

11
00:00:27,390 --> 00:00:32,610
we do for Sikich is mainly penetration

12
00:00:30,210 --> 00:00:35,300
testing but we get involved in all the

13
00:00:32,610 --> 00:00:37,620
stuff to forensic investigations and

14
00:00:35,300 --> 00:00:39,599
risk assessments and all that kind of

15
00:00:37,620 --> 00:00:42,860
stuff and we're hiring if you're looking

16
00:00:39,600 --> 00:00:42,860
for a job and doing that kind of stuffs

17
00:00:43,309 --> 00:00:48,989
alright so the idea behind this is we

18
00:00:46,890 --> 00:00:52,320
have a team of penetration testers about

19
00:00:48,989 --> 00:00:54,059
seven of us now and we have this

20
00:00:52,320 --> 00:00:56,039
automated process where we send out

21
00:00:54,059 --> 00:00:58,769
laptops into the field for our clients

22
00:00:56,039 --> 00:01:00,329
the the process has gotten extremely

23
00:00:58,770 --> 00:01:03,359
automated over the years which I'm very

24
00:01:00,329 --> 00:01:04,890
proud of but the next big evolution was

25
00:01:03,359 --> 00:01:06,630
to figure out a way to capture the

26
00:01:04,890 --> 00:01:08,670
passwords for these systems because

27
00:01:06,630 --> 00:01:09,810
right now a human has to type them in

28
00:01:08,670 --> 00:01:12,390
and we have to put them into our

29
00:01:09,810 --> 00:01:14,820
password our key past database right and

30
00:01:12,390 --> 00:01:16,590
then we forget or somebody doesn't put

31
00:01:14,820 --> 00:01:18,779
it in or save it correctly or whatever

32
00:01:16,590 --> 00:01:20,100
it is right and then all of a sudden a

33
00:01:18,780 --> 00:01:22,380
consultant is sitting there going I

34
00:01:20,100 --> 00:01:24,570
can't get in to XYZ client right and

35
00:01:22,380 --> 00:01:27,210
then we have to figure out who made that

36
00:01:24,570 --> 00:01:28,619
box so with the build process getting

37
00:01:27,210 --> 00:01:30,750
more and more automated we thought well

38
00:01:28,619 --> 00:01:33,210
now's a good time to sort of create this

39
00:01:30,750 --> 00:01:35,130
automated way to store passwords has

40
00:01:33,210 --> 00:01:38,579
sort of been in my brain for a couple of

41
00:01:35,130 --> 00:01:43,590
years now so we thought well how can we

42
00:01:38,579 --> 00:01:46,649
do this in an in an automated way and I

43
00:01:43,590 --> 00:01:48,659
think they're really you know early our

44
00:01:46,649 --> 00:01:50,130
like and when we build this that's a

45
00:01:48,659 --> 00:01:53,780
cool topic let's do a talk on it'll be

46
00:01:50,130 --> 00:01:56,369
easy right yeah it was kind of like well

47
00:01:53,780 --> 00:01:57,659
you know keypads everyone uses keypads

48
00:01:56,369 --> 00:02:01,560
open source

49
00:01:57,659 --> 00:02:04,530
hasn't anyone ever created a way to

50
00:02:01,560 --> 00:02:06,329
store passwords in a in a database or

51
00:02:04,530 --> 00:02:08,220
flight file or something that can be

52
00:02:06,329 --> 00:02:09,869
secured and then used by lots of

53
00:02:08,220 --> 00:02:12,710
different people like this should be a

54
00:02:09,869 --> 00:02:14,120
product already right pre proud

55
00:02:12,710 --> 00:02:16,940
free product the commercial wonders

56
00:02:14,120 --> 00:02:20,720
there yes yes we're Kevin didn't mention

57
00:02:16,940 --> 00:02:22,400
we're also very cheap so pretty much all

58
00:02:20,720 --> 00:02:25,450
this entire process that we built this

59
00:02:22,400 --> 00:02:28,970
from is all open-source software

60
00:02:25,450 --> 00:02:31,040
so again the idea is how can we do this

61
00:02:28,970 --> 00:02:33,380
so that everybody can can access it so

62
00:02:31,040 --> 00:02:35,810
we went ahead and thought of creating

63
00:02:33,380 --> 00:02:42,430
key pairs PGP right public private key

64
00:02:35,810 --> 00:02:45,410
pairs we had a lot of policy discussions

65
00:02:42,430 --> 00:02:48,500
about how to how to do this in my brain

66
00:02:45,410 --> 00:02:51,170
I always thought PGP keys would be the

67
00:02:48,500 --> 00:02:52,760
best and then we would encrypt the

68
00:02:51,170 --> 00:02:54,260
passwords stored them in the database

69
00:02:52,760 --> 00:02:57,290
and then when they wanted to come out

70
00:02:54,260 --> 00:03:00,109
the user could use their keys to get

71
00:02:57,290 --> 00:03:03,170
them them out of the database right so

72
00:03:00,110 --> 00:03:05,030
my my original idea was to create a

73
00:03:03,170 --> 00:03:06,920
server-side if you want to think of a

74
00:03:05,030 --> 00:03:09,890
server as a person the server would have

75
00:03:06,920 --> 00:03:14,359
a public/private key pair right and then

76
00:03:09,890 --> 00:03:16,730
and then do it that way yeah so the key

77
00:03:14,360 --> 00:03:19,850
the key things again we thought let's

78
00:03:16,730 --> 00:03:22,160
use GPG because it's open source and and

79
00:03:19,850 --> 00:03:24,620
better than all that kind of stuff and

80
00:03:22,160 --> 00:03:27,799
the public private key pairs let us for

81
00:03:24,620 --> 00:03:29,180
example someone who's not someone

82
00:03:27,800 --> 00:03:30,920
doesn't need to read any passwords can

83
00:03:29,180 --> 00:03:32,360
still put a password in the database for

84
00:03:30,920 --> 00:03:34,820
example our build house that builds

85
00:03:32,360 --> 00:03:36,200
these servers can put a password in the

86
00:03:34,820 --> 00:03:38,540
database because it just uses the public

87
00:03:36,200 --> 00:03:41,540
beautiful to do that and we get some

88
00:03:38,540 --> 00:03:43,429
layer kind of MFA in that people are

89
00:03:41,540 --> 00:03:44,750
using half some protection on their own

90
00:03:43,430 --> 00:03:46,250
private keys when they go to pulse to

91
00:03:44,750 --> 00:03:48,200
file the database so if we said this

92
00:03:46,250 --> 00:03:50,000
just seems straightforward easy we'll

93
00:03:48,200 --> 00:03:51,500
just use GPG and script it up it'll be

94
00:03:50,000 --> 00:03:53,270
done awesome right

95
00:03:51,500 --> 00:03:58,450
yeah gave me like four hours to do it

96
00:03:53,270 --> 00:04:00,800
he's he's a nice guy so very quickly we

97
00:03:58,450 --> 00:04:02,630
started having our conversations about

98
00:04:00,800 --> 00:04:04,370
how do we do this

99
00:04:02,630 --> 00:04:08,269
a lot of the other build process is

100
00:04:04,370 --> 00:04:09,740
using MySQL in the backend so I thought

101
00:04:08,270 --> 00:04:12,670
well why don't we just expand that and

102
00:04:09,740 --> 00:04:16,100
keep using a database right pretty easy

103
00:04:12,670 --> 00:04:17,690
Kevin thought differently he wanted to

104
00:04:16,100 --> 00:04:19,460
use flat files yeah we'll go through a

105
00:04:17,690 --> 00:04:21,738
lot of these design disagreements but

106
00:04:19,459 --> 00:04:23,359
really what we found like lots of back

107
00:04:21,738 --> 00:04:25,590
of the napkin discussions lots of

108
00:04:23,360 --> 00:04:27,480
whiteboard discussions and every

109
00:04:25,590 --> 00:04:29,909
we think we made we would back up when

110
00:04:27,480 --> 00:04:31,230
we try and make another decision you

111
00:04:29,910 --> 00:04:32,820
know and as Michael said one of the

112
00:04:31,230 --> 00:04:36,900
first one was where are we gonna store

113
00:04:32,820 --> 00:04:39,090
the passwords I was pushing for kind of

114
00:04:36,900 --> 00:04:40,679
flat files partially because we were

115
00:04:39,090 --> 00:04:42,229
like let's build this tool make it open

116
00:04:40,680 --> 00:04:45,000
source bring it to derbycon

117
00:04:42,229 --> 00:04:46,560
and so ok well flat files no need for a

118
00:04:45,000 --> 00:04:48,750
dedicated server you can just store the

119
00:04:46,560 --> 00:04:50,220
stuff anywhere and let's just keep all

120
00:04:48,750 --> 00:04:51,540
the security off the server you know

121
00:04:50,220 --> 00:04:53,910
everything going to be encrypted there

122
00:04:51,540 --> 00:04:55,290
anyway just put it on file server put it

123
00:04:53,910 --> 00:04:56,240
on cloud storage who cares it's all

124
00:04:55,290 --> 00:04:59,310
encrypted

125
00:04:56,240 --> 00:05:01,560
Kevin's nuts so I went ahead and

126
00:04:59,310 --> 00:05:05,250
convinced him to use a database and put

127
00:05:01,560 --> 00:05:09,360
all the security on the server because I

128
00:05:05,250 --> 00:05:12,150
wanted to and the next question was

129
00:05:09,360 --> 00:05:13,410
where do we deloused acrimony I again

130
00:05:12,150 --> 00:05:14,520
was pushing for well it should all

131
00:05:13,410 --> 00:05:16,080
happen on the client like you never

132
00:05:14,520 --> 00:05:17,700
wanted to crypt on the server

133
00:05:16,080 --> 00:05:19,139
why have any security on the server when

134
00:05:17,700 --> 00:05:21,870
you just need to password on the client

135
00:05:19,139 --> 00:05:23,940
you know I want that server to be let's

136
00:05:21,870 --> 00:05:28,430
let's put that server on the Wi-Fi its

137
00:05:23,940 --> 00:05:30,990
Starbucks and who cares about it that

138
00:05:28,430 --> 00:05:33,389
quickly got complex we looked at the

139
00:05:30,990 --> 00:05:34,950
other day aspects like a key rotation

140
00:05:33,389 --> 00:05:37,770
where we have to change every password

141
00:05:34,950 --> 00:05:40,080
in the system but I still that was a

142
00:05:37,770 --> 00:05:44,010
good idea you're entitled to your

143
00:05:40,080 --> 00:05:46,680
opinion yes it's a great idea because

144
00:05:44,010 --> 00:05:48,090
client-side security is awesome so what

145
00:05:46,680 --> 00:05:49,770
we decided is to put it all on the

146
00:05:48,090 --> 00:05:52,260
server so that way we can control it

147
00:05:49,770 --> 00:05:54,900
right and have access around that

148
00:05:52,260 --> 00:05:58,530
particular box and if if you read the

149
00:05:54,900 --> 00:06:01,859
sort of blurb in the in the the brochure

150
00:05:58,530 --> 00:06:03,388
of this I'm not a cloud storage fan I do

151
00:06:01,860 --> 00:06:06,000
not like putting my passwords in the

152
00:06:03,389 --> 00:06:10,889
cloud I don't even like having my email

153
00:06:06,000 --> 00:06:12,690
in the cloud but that was cool so then

154
00:06:10,889 --> 00:06:15,060
we decided we had to start talking about

155
00:06:12,690 --> 00:06:17,130
how do we encrypt it so once I once I

156
00:06:15,060 --> 00:06:19,020
convinced Kevin that we needed to use a

157
00:06:17,130 --> 00:06:22,530
database we started thinking about how

158
00:06:19,020 --> 00:06:26,849
do we encrypt these particular passwords

159
00:06:22,530 --> 00:06:29,638
so yeah I was I was still a big fan of

160
00:06:26,849 --> 00:06:33,630
the why do we need a server key just use

161
00:06:29,639 --> 00:06:36,300
every users public key to encrypt every

162
00:06:33,630 --> 00:06:38,070
password you know if I talk to people

163
00:06:36,300 --> 00:06:39,270
who like about that like

164
00:06:38,070 --> 00:06:40,680
this is a password we just use

165
00:06:39,270 --> 00:06:42,260
everybody's public key to encrypt it

166
00:06:40,680 --> 00:06:46,710
everybody says that makes sense I

167
00:06:42,260 --> 00:06:49,260
understand what you're doing but that

168
00:06:46,710 --> 00:06:50,659
adds a lot of complexity in terms of

169
00:06:49,260 --> 00:06:53,159
okay when you need to rotate that

170
00:06:50,660 --> 00:06:58,260
password you've got to rien crypt it

171
00:06:53,160 --> 00:06:59,940
with everybody's public key and just

172
00:06:58,260 --> 00:07:03,030
thinking about students if you take one

173
00:06:59,940 --> 00:07:05,610
you know 16 character password and

174
00:07:03,030 --> 00:07:07,469
encrypt it with a dozen public keys

175
00:07:05,610 --> 00:07:08,760
you're actually storing a pretty large

176
00:07:07,470 --> 00:07:12,840
chunk of data for that one little

177
00:07:08,760 --> 00:07:17,880
password so it wasn't great but I still

178
00:07:12,840 --> 00:07:19,619
like the idea we have like seven people

179
00:07:17,880 --> 00:07:21,090
on our team so it's not too bad I mean

180
00:07:19,620 --> 00:07:22,950
that wouldn't be huge but it doesn't

181
00:07:21,090 --> 00:07:24,960
scale well right so if you have a team

182
00:07:22,950 --> 00:07:26,760
of a hundred two hundred people that's

183
00:07:24,960 --> 00:07:28,799
going to become really cumbersome really

184
00:07:26,760 --> 00:07:30,630
quickly so that was kind of the one of

185
00:07:28,800 --> 00:07:33,000
the design decisions it would work well

186
00:07:30,630 --> 00:07:36,810
for us but I sort of wanted to make it

187
00:07:33,000 --> 00:07:37,950
work well for everybody so then we came

188
00:07:36,810 --> 00:07:39,210
up with the idea of using a single

189
00:07:37,950 --> 00:07:40,620
password like I talked about in the

190
00:07:39,210 --> 00:07:43,739
beginning of having a server

191
00:07:40,620 --> 00:07:46,560
public/private key pair and in that

192
00:07:43,740 --> 00:07:49,200
situation you have a single single

193
00:07:46,560 --> 00:07:51,300
public key that is encrypting all the

194
00:07:49,200 --> 00:07:55,140
passwords in the database right and then

195
00:07:51,300 --> 00:07:58,830
we protect that private key the other

196
00:07:55,140 --> 00:08:01,500
idea was to use a single excuse me a

197
00:07:58,830 --> 00:08:02,909
unique public private key pair for each

198
00:08:01,500 --> 00:08:05,730
password that's stored in the database

199
00:08:02,910 --> 00:08:07,650
but again that was also had a lot of

200
00:08:05,730 --> 00:08:09,390
issues when we start talking about how

201
00:08:07,650 --> 00:08:11,489
do we rotate those keys as somebody

202
00:08:09,390 --> 00:08:13,950
leaves our environment no password

203
00:08:11,490 --> 00:08:15,120
changes whatever it is how do we go

204
00:08:13,950 --> 00:08:21,979
through and change all those passwords

205
00:08:15,120 --> 00:08:21,980
in a timely manner right oh she got yeah

206
00:08:23,210 --> 00:08:28,919
and all that tied into when are we gonna

207
00:08:25,800 --> 00:08:30,600
rotate encryption keys you know

208
00:08:28,920 --> 00:08:33,180
obviously if someone leaves leaves our

209
00:08:30,600 --> 00:08:34,979
team doesn't happen often but I'll

210
00:08:33,179 --> 00:08:38,699
rotate the keys in case they've taken a

211
00:08:34,979 --> 00:08:40,500
copy of it or can still get into it it

212
00:08:38,700 --> 00:08:42,360
doesn't happen often should we just have

213
00:08:40,500 --> 00:08:45,960
that be a manual process because we're

214
00:08:42,360 --> 00:08:47,760
using GPG and scripts around this so we

215
00:08:45,960 --> 00:08:53,240
could just do it manually what needs to

216
00:08:47,760 --> 00:08:55,280
be done seems like a bad idea

217
00:08:53,240 --> 00:08:57,320
we talked at length about the third

218
00:08:55,280 --> 00:08:59,959
option here the add each password lookup

219
00:08:57,320 --> 00:09:02,510
like wouldn't it be cool if after I

220
00:08:59,960 --> 00:09:05,500
decrypted this password in the database

221
00:09:02,510 --> 00:09:08,689
every time I'm gonna re encrypt it with

222
00:09:05,500 --> 00:09:12,830
a new key so that even if that other key

223
00:09:08,690 --> 00:09:14,060
was stolen when I decrypted it you

224
00:09:12,830 --> 00:09:15,230
wouldn't be able to pull that password

225
00:09:14,060 --> 00:09:19,609
out and get again or get other passwords

226
00:09:15,230 --> 00:09:22,910
from the database so very kind of secure

227
00:09:19,610 --> 00:09:25,250
option there but as you can expect the

228
00:09:22,910 --> 00:09:27,640
the complexity of okay every time I read

229
00:09:25,250 --> 00:09:30,290
a password I'm gonna go back in and

230
00:09:27,640 --> 00:09:32,000
Riaan crypt it and the database was like

231
00:09:30,290 --> 00:09:35,150
yeah maybe we don't want to go down that

232
00:09:32,000 --> 00:09:38,950
path a lot of our design decisions as

233
00:09:35,150 --> 00:09:41,510
this god is complicated as it did like

234
00:09:38,950 --> 00:09:43,490
we may decide decision is based on

235
00:09:41,510 --> 00:09:45,620
what's gonna work best for our team and

236
00:09:43,490 --> 00:09:47,450
gave up a lot of the what's gonna be the

237
00:09:45,620 --> 00:09:48,920
coolest tool for the community because

238
00:09:47,450 --> 00:09:52,250
really our first goal was we need this

239
00:09:48,920 --> 00:09:54,349
for our team yes and I think the last

240
00:09:52,250 --> 00:09:56,330
point that we talked about at length on

241
00:09:54,350 --> 00:09:57,500
this particular one is because we were

242
00:09:56,330 --> 00:10:00,440
talking about doing everything on the

243
00:09:57,500 --> 00:10:04,490
client side so the idea was if the

244
00:10:00,440 --> 00:10:07,700
client had that server's private key

245
00:10:04,490 --> 00:10:09,440
that could decrypt to that password we

246
00:10:07,700 --> 00:10:11,240
would rotate and change that out so if

247
00:10:09,440 --> 00:10:12,950
the client got compromised that servers

248
00:10:11,240 --> 00:10:15,410
private key you wouldn't be exposed

249
00:10:12,950 --> 00:10:17,480
right that was the idea behind this so

250
00:10:15,410 --> 00:10:18,650
that's why I went back to well why don't

251
00:10:17,480 --> 00:10:20,990
we just keep it all on the server

252
00:10:18,650 --> 00:10:23,959
because now the server is quote-unquote

253
00:10:20,990 --> 00:10:25,790
secure and we don't have to worry about

254
00:10:23,960 --> 00:10:32,230
transmitting those private keys across

255
00:10:25,790 --> 00:10:35,930
all right one of the few battles I won

256
00:10:32,230 --> 00:10:38,360
so we spent a lot of time on discussions

257
00:10:35,930 --> 00:10:40,219
and and we both went down different

258
00:10:38,360 --> 00:10:43,940
paths building our own proof of concepts

259
00:10:40,220 --> 00:10:45,500
that we're completely different but out

260
00:10:43,940 --> 00:10:47,420
of that we got a lot of these great

261
00:10:45,500 --> 00:10:50,120
takeaways of this is harder than it

262
00:10:47,420 --> 00:10:52,160
looks and there are a lot of different

263
00:10:50,120 --> 00:10:55,970
directions you could take and like I

264
00:10:52,160 --> 00:10:58,880
said we said we gotta just you know pour

265
00:10:55,970 --> 00:11:01,520
get off the pot so let's build what we

266
00:10:58,880 --> 00:11:04,770
need for our team and kind of share what

267
00:11:01,520 --> 00:11:06,029
we learned through that process you

268
00:11:04,770 --> 00:11:09,810
absolutely so that's kinda what we came

269
00:11:06,029 --> 00:11:11,910
down to is this doesn't really exist yet

270
00:11:09,810 --> 00:11:13,949
it is actually a lot harder than you

271
00:11:11,910 --> 00:11:17,160
would thought it would be so what we

272
00:11:13,950 --> 00:11:20,279
ended up doing is we created this

273
00:11:17,160 --> 00:11:22,860
product well product open-source tool we

274
00:11:20,279 --> 00:11:24,660
call it the password cube we were in a

275
00:11:22,860 --> 00:11:28,320
team meeting I was demonstrating this to

276
00:11:24,660 --> 00:11:30,930
our colleagues and I'm a fairly large

277
00:11:28,320 --> 00:11:34,020
Star Trek nerd so one of my my

278
00:11:30,930 --> 00:11:35,430
colleagues Ethan decided to tell me that

279
00:11:34,020 --> 00:11:37,439
we should we should make it like the

280
00:11:35,430 --> 00:11:39,899
board board because we're assimilating

281
00:11:37,440 --> 00:11:43,140
all the all the passwords so we decided

282
00:11:39,899 --> 00:11:46,529
to make it a cube but real simply it's

283
00:11:43,140 --> 00:11:48,240
used the the MySQL database all

284
00:11:46,529 --> 00:11:50,100
encryption decryption everything happens

285
00:11:48,240 --> 00:11:54,360
on the server so all the security is

286
00:11:50,100 --> 00:11:56,399
around the server itself we wrote this

287
00:11:54,360 --> 00:11:58,620
in bash because like Kevin said we sort

288
00:11:56,399 --> 00:11:59,940
of went on our own paths to do sort of a

289
00:11:58,620 --> 00:12:02,310
proof of concept

290
00:11:59,940 --> 00:12:04,589
I wrote mine and Perl and everybody

291
00:12:02,310 --> 00:12:07,319
laughed at me he drinks a lot

292
00:12:04,589 --> 00:12:11,130
I used a batch because batch is awesome

293
00:12:07,320 --> 00:12:18,450
I think it's all just can't handle the

294
00:12:11,130 --> 00:12:20,760
Perl I have taste so then to get into

295
00:12:18,450 --> 00:12:24,060
the system everything is used using SSH

296
00:12:20,760 --> 00:12:26,010
of course right so we use our SSH keys

297
00:12:24,060 --> 00:12:28,709
to get into the box our public private

298
00:12:26,010 --> 00:12:30,540
key pairs there which we've kind of all

299
00:12:28,709 --> 00:12:35,189
sort of agreed on as a community that's

300
00:12:30,540 --> 00:12:37,500
that's secure right the server itself

301
00:12:35,190 --> 00:12:42,089
see it's got its own public private key

302
00:12:37,500 --> 00:12:44,190
pair and we rotate the server keys as

303
00:12:42,089 --> 00:12:45,810
needed so generally when somebody leaves

304
00:12:44,190 --> 00:12:48,839
the organization which we haven't had to

305
00:12:45,810 --> 00:12:50,640
do yet and if you're interested in

306
00:12:48,839 --> 00:12:52,890
looking at it the link is on the screen

307
00:12:50,640 --> 00:12:54,569
right there it'll be up for a little

308
00:12:52,890 --> 00:13:01,500
while but it's you know it's on our

309
00:12:54,570 --> 00:13:04,440
github repo alright so kind of why why

310
00:13:01,500 --> 00:13:06,690
did we do what we did and Gary talked

311
00:13:04,440 --> 00:13:09,300
about this with the SSH portion so if

312
00:13:06,690 --> 00:13:11,910
you've got your public private keys for

313
00:13:09,300 --> 00:13:16,680
SSH then you have a passphrase

314
00:13:11,910 --> 00:13:17,170
on your private SSH key right someone

315
00:13:16,680 --> 00:13:19,149
would have to

316
00:13:17,170 --> 00:13:21,309
steal your Yorkie and then also your

317
00:13:19,149 --> 00:13:22,989
password to get into the server and

318
00:13:21,309 --> 00:13:24,399
hopefully we would figure that out

319
00:13:22,989 --> 00:13:26,679
sooner rather than later

320
00:13:24,399 --> 00:13:28,869
yeah so we really have two layers of

321
00:13:26,679 --> 00:13:31,029
security here you have to first SSH into

322
00:13:28,869 --> 00:13:33,309
the server before you can start to try

323
00:13:31,029 --> 00:13:35,799
and look up keys and then you have to

324
00:13:33,309 --> 00:13:39,759
actually authenticate against your GPG

325
00:13:35,799 --> 00:13:43,720
key to actually look up a password so it

326
00:13:39,759 --> 00:13:45,220
it seemed you know again much more

327
00:13:43,720 --> 00:13:50,049
secure than doing all that decryption on

328
00:13:45,220 --> 00:13:52,269
the client-side yeah so - to get in like

329
00:13:50,049 --> 00:13:56,949
Kevin said we have to use our SSH keys

330
00:13:52,269 --> 00:13:58,569
then it has GPG client key pairs excuse

331
00:13:56,949 --> 00:14:00,819
me public private key pairs on the

332
00:13:58,569 --> 00:14:04,599
actual box itself which never actually

333
00:14:00,819 --> 00:14:08,108
leave the box and again why - because I

334
00:14:04,600 --> 00:14:10,449
think it's a fantastic useful scripting

335
00:14:08,109 --> 00:14:12,910
language it this isn't really built for

336
00:14:10,449 --> 00:14:14,618
speed high you know high processing

337
00:14:12,910 --> 00:14:16,839
anything like that I don't really need C

338
00:14:14,619 --> 00:14:18,249
or you know anything crazy it's just

339
00:14:16,839 --> 00:14:19,720
basically a wrapper that goes around

340
00:14:18,249 --> 00:14:23,980
other tools that are sitting on your

341
00:14:19,720 --> 00:14:25,629
Linux box right so jpg because it's an

342
00:14:23,980 --> 00:14:28,119
industry standard everybody likes it

343
00:14:25,629 --> 00:14:29,739
yeah and the combination of bash and GPG

344
00:14:28,119 --> 00:14:31,059
was important for us it has some

345
00:14:29,739 --> 00:14:32,410
drawbacks Oh Michael talk about that

346
00:14:31,059 --> 00:14:34,949
like one of the key ones in the memory

347
00:14:32,410 --> 00:14:38,319
in a bit but it had some drawbacks in

348
00:14:34,949 --> 00:14:40,059
but we felt like ok if we're building

349
00:14:38,319 --> 00:14:42,279
some kind of security encryption

350
00:14:40,059 --> 00:14:44,019
solution we want it to be as transparent

351
00:14:42,279 --> 00:14:46,389
as possible for someone to look at that

352
00:14:44,019 --> 00:14:48,009
and say yeah you didn't do something

353
00:14:46,389 --> 00:14:50,110
stupid or roll your own encryption or

354
00:14:48,009 --> 00:14:52,239
something so it really is just a bunch

355
00:14:50,110 --> 00:14:53,949
of command lines and bash runs to get

356
00:14:52,239 --> 00:14:55,329
run against GPG and pretty

357
00:14:53,949 --> 00:14:57,699
straightforward to see what the tool is

358
00:14:55,329 --> 00:15:00,279
doing at every single step yeah I think

359
00:14:57,699 --> 00:15:01,660
that's that's really important I'm sure

360
00:15:00,279 --> 00:15:04,809
you've figured it out by now but we did

361
00:15:01,660 --> 00:15:05,289
not roll our own crypto we are just

362
00:15:04,809 --> 00:15:08,350
using

363
00:15:05,289 --> 00:15:11,879
GPG right so if there's a flaw and GPG

364
00:15:08,350 --> 00:15:15,220
don't blame us but when it comes to

365
00:15:11,879 --> 00:15:16,660
storing the information so we've got the

366
00:15:15,220 --> 00:15:19,509
age-old battle if you're familiar with

367
00:15:16,660 --> 00:15:21,399
RAM disks we have temp FS versus like

368
00:15:19,509 --> 00:15:24,039
Ram FS and some of the other things out

369
00:15:21,399 --> 00:15:28,509
there it actually better to step back so

370
00:15:24,039 --> 00:15:30,670
why even use this it turns out for a lot

371
00:15:28,509 --> 00:15:33,040
of stuff you can pipe data into GP

372
00:15:30,670 --> 00:15:37,329
pipe data out of GPG but there's certain

373
00:15:33,040 --> 00:15:39,550
parts of GPG that it requires reading a

374
00:15:37,330 --> 00:15:40,570
file off the disk to decrypt is it

375
00:15:39,550 --> 00:15:42,630
descriptive file

376
00:15:40,570 --> 00:15:45,250
specific those signature ticket the

377
00:15:42,630 --> 00:15:46,360
specifically unless somebody knows more

378
00:15:45,250 --> 00:15:51,940
than well a lot of people know more than

379
00:15:46,360 --> 00:15:53,860
me but GPG to decrypt the password it

380
00:15:51,940 --> 00:15:56,680
needed to use the private key of the

381
00:15:53,860 --> 00:15:58,630
server which needs to be on a keyring so

382
00:15:56,680 --> 00:16:00,640
you can't point it at a key like in

383
00:15:58,630 --> 00:16:01,900
memory or piped in or anything like that

384
00:16:00,640 --> 00:16:04,960
you have to actually point it at a

385
00:16:01,900 --> 00:16:06,550
keyring file hearing on the disk yes so

386
00:16:04,960 --> 00:16:08,350
that's why I ended up needing to create

387
00:16:06,550 --> 00:16:10,089
some kind of a ram disk because we

388
00:16:08,350 --> 00:16:12,040
wanted to write nothing sensitive to the

389
00:16:10,090 --> 00:16:13,750
disk as part of this that was one of the

390
00:16:12,040 --> 00:16:16,930
original design goals which didn't

391
00:16:13,750 --> 00:16:21,580
didn't work but so we had a lengthy

392
00:16:16,930 --> 00:16:25,569
discussion with a friend of mine about

393
00:16:21,580 --> 00:16:27,160
temp FS versus ram FS if anyone knows a

394
00:16:25,570 --> 00:16:30,370
lot about these or has ever looked into

395
00:16:27,160 --> 00:16:33,579
these so ram FS is great you can lock it

396
00:16:30,370 --> 00:16:35,020
into physical memory you can kind of

397
00:16:33,580 --> 00:16:36,700
dictate you know that it's gonna sit

398
00:16:35,020 --> 00:16:38,319
there and when it gets destroyed not all

399
00:16:36,700 --> 00:16:40,720
the good stuff and wipe it out which is

400
00:16:38,320 --> 00:16:44,860
fantastic but the first thing I found is

401
00:16:40,720 --> 00:16:47,440
Ram FS is only usable by root so in

402
00:16:44,860 --> 00:16:50,050
order to give all of my users access to

403
00:16:47,440 --> 00:16:52,630
the RAM FS I would need to actually sort

404
00:16:50,050 --> 00:16:55,150
of unsecure my system and give them all

405
00:16:52,630 --> 00:16:56,470
kinds of chmod and change mod not you

406
00:16:55,150 --> 00:16:57,970
know change ownership and all this other

407
00:16:56,470 --> 00:17:01,090
kind of stuff and they don't want to go

408
00:16:57,970 --> 00:17:03,910
that way when I use tempo FS

409
00:17:01,090 --> 00:17:05,350
although it is a little bit more loose

410
00:17:03,910 --> 00:17:09,210
in the fact that it can be either in

411
00:17:05,349 --> 00:17:11,560
physical memory or in swap the

412
00:17:09,210 --> 00:17:15,579
advantages I can dictate who has

413
00:17:11,560 --> 00:17:17,859
ownership or use of that particular that

414
00:17:15,579 --> 00:17:19,810
Ram disk when it's being created so I

415
00:17:17,859 --> 00:17:22,449
can kind of limit my exposure in that

416
00:17:19,810 --> 00:17:24,069
way right so I created if you can look

417
00:17:22,450 --> 00:17:26,800
at the code but basically what we did is

418
00:17:24,069 --> 00:17:28,210
we just created a user account excuse me

419
00:17:26,800 --> 00:17:30,010
a group that all the user accounts go

420
00:17:28,210 --> 00:17:32,470
into and say this group you know has

421
00:17:30,010 --> 00:17:35,110
ownership over this particular Ram FS so

422
00:17:32,470 --> 00:17:38,620
so is that stuff in the process we

423
00:17:35,110 --> 00:17:42,490
create a very small tempo fest drive

424
00:17:38,620 --> 00:17:44,290
this drive write the server's private

425
00:17:42,490 --> 00:17:46,450
key to it use it by

426
00:17:44,290 --> 00:17:49,090
peih-gee and then wipe it and get rid of

427
00:17:46,450 --> 00:17:50,830
that temp of us yeah so the anything

428
00:17:49,090 --> 00:17:53,560
that's actually stored on disk is always

429
00:17:50,830 --> 00:17:54,629
encrypting it only gets decrypted in the

430
00:17:53,560 --> 00:17:58,090
tempeh fester

431
00:17:54,630 --> 00:18:01,390
so I like pictures so I drew this

432
00:17:58,090 --> 00:18:03,330
picture basically is this is what we

433
00:18:01,390 --> 00:18:06,160
just talked about we've got the server

434
00:18:03,330 --> 00:18:07,750
public/private key pair we have a

435
00:18:06,160 --> 00:18:10,150
public/private key pair for each

436
00:18:07,750 --> 00:18:12,790
individual user on the system what we're

437
00:18:10,150 --> 00:18:15,580
doing is we're taking that server's

438
00:18:12,790 --> 00:18:18,490
private key and we're encrypting it with

439
00:18:15,580 --> 00:18:21,189
every users public key and then that

440
00:18:18,490 --> 00:18:23,050
particular key is then stored on the

441
00:18:21,190 --> 00:18:25,930
filesystem right so it's it's encrypted

442
00:18:23,050 --> 00:18:28,960
in that way it also then gets removed

443
00:18:25,930 --> 00:18:31,090
from the server

444
00:18:28,960 --> 00:18:35,140
so it deletes the key so it no longer

445
00:18:31,090 --> 00:18:37,030
exists unless it's encrypted right the

446
00:18:35,140 --> 00:18:39,460
public key gets x12 before it gets to

447
00:18:37,030 --> 00:18:41,500
leave it gets exported it's public so I

448
00:18:39,460 --> 00:18:43,450
can just sit there that's fine and then

449
00:18:41,500 --> 00:18:46,780
what we do is we put in the password

450
00:18:43,450 --> 00:18:48,700
that we want to encrypt we encrypt that

451
00:18:46,780 --> 00:18:51,520
particular password with the server's

452
00:18:48,700 --> 00:18:55,810
public key and then we store that into

453
00:18:51,520 --> 00:18:59,050
the database right the user comes along

454
00:18:55,810 --> 00:19:03,129
they log in to the box using SSH with

455
00:18:59,050 --> 00:19:06,850
their their passphrase for their SSH key

456
00:19:03,130 --> 00:19:08,710
they look up the user the client

457
00:19:06,850 --> 00:19:12,659
information in the database they use

458
00:19:08,710 --> 00:19:16,960
their private excuse their their private

459
00:19:12,660 --> 00:19:22,510
PGP key which can decrypt the private

460
00:19:16,960 --> 00:19:24,520
servers I like to get this messed up the

461
00:19:22,510 --> 00:19:27,220
private PGP key of the server which then

462
00:19:24,520 --> 00:19:31,690
can decrypt the password and then give

463
00:19:27,220 --> 00:19:34,230
you the raw output also there's there's

464
00:19:31,690 --> 00:19:36,820
a step that's not Illustrated here that

465
00:19:34,230 --> 00:19:40,060
inside in order to store this if you've

466
00:19:36,820 --> 00:19:42,939
ever looked at PGP data it's it's kind

467
00:19:40,060 --> 00:19:44,740
of like I don't Fitz actually binary but

468
00:19:42,940 --> 00:19:46,600
it's it's not pretty so there's actually

469
00:19:44,740 --> 00:19:48,670
an extra step in here that I'm basically

470
00:19:46,600 --> 00:19:49,899
for encoding it just so it's a nice text

471
00:19:48,670 --> 00:19:51,300
string so I can store it in a database

472
00:19:49,900 --> 00:19:53,310
in Italy and

473
00:19:51,300 --> 00:19:54,990
yeah so it's not you'll see that it's

474
00:19:53,310 --> 00:19:57,389
based 64 encoded that has nothing to do

475
00:19:54,990 --> 00:19:59,850
with security I get it it's just so that

476
00:19:57,390 --> 00:20:06,090
it's a nice simple textures texturing to

477
00:19:59,850 --> 00:20:07,919
work with demo video demo because I

478
00:20:06,090 --> 00:20:12,090
forgot to sacrifice him coat this

479
00:20:07,920 --> 00:20:14,270
morning for the demo gods so so what I'm

480
00:20:12,090 --> 00:20:17,010
doing here is I'm logging in as myself

481
00:20:14,270 --> 00:20:18,510
and view I am an administrator on this

482
00:20:17,010 --> 00:20:20,730
box so the first thing you'll notice

483
00:20:18,510 --> 00:20:24,120
that I get this special administrator

484
00:20:20,730 --> 00:20:25,710
console so so right there and I also

485
00:20:24,120 --> 00:20:29,100
have the ability to jump into the user

486
00:20:25,710 --> 00:20:31,500
side of it as well if you want what I'm

487
00:20:29,100 --> 00:20:33,990
going to do is look at my users I've got

488
00:20:31,500 --> 00:20:38,460
two people in the system right now Kevin

489
00:20:33,990 --> 00:20:42,840
and will let me go ahead and add a new

490
00:20:38,460 --> 00:20:46,230
user I call him John Smith I lack

491
00:20:42,840 --> 00:20:48,270
creativity in my life so we're gonna say

492
00:20:46,230 --> 00:20:50,130
John Smith is not an administrator and

493
00:20:48,270 --> 00:20:53,460
all this is really doing in the backend

494
00:20:50,130 --> 00:20:57,090
is just creating a units Linux level

495
00:20:53,460 --> 00:20:59,640
user puts this individual in certain

496
00:20:57,090 --> 00:21:01,889
groups make sure that everything is you

497
00:20:59,640 --> 00:21:03,360
know correct for them so I mean you can

498
00:21:01,890 --> 00:21:07,110
easily do this from the command line now

499
00:21:03,360 --> 00:21:07,500
I'm just super lazy so I drop in public

500
00:21:07,110 --> 00:21:08,850
key

501
00:21:07,500 --> 00:21:11,490
I use mine just for this demonstration

502
00:21:08,850 --> 00:21:15,389
I'm going to jump over to the other tab

503
00:21:11,490 --> 00:21:17,220
here there we go I'm the login user not

504
00:21:15,390 --> 00:21:21,120
an administrator right so this is a user

505
00:21:17,220 --> 00:21:23,730
I just created J Smith so J Smith is

506
00:21:21,120 --> 00:21:25,729
going to login and now this individual

507
00:21:23,730 --> 00:21:28,940
is just going to get the user menu so no

508
00:21:25,730 --> 00:21:31,560
administrator access they can look up

509
00:21:28,940 --> 00:21:33,540
look up passwords at passwords whatever

510
00:21:31,560 --> 00:21:36,899
the first step they need to do is

511
00:21:33,540 --> 00:21:39,090
generate their own GPG keys right I

512
00:21:36,900 --> 00:21:40,410
thought about this just this the other

513
00:21:39,090 --> 00:21:43,399
day I'm going to change this a little

514
00:21:40,410 --> 00:21:45,450
bit to force the individual to actually

515
00:21:43,400 --> 00:21:47,160
create their key is the first time they

516
00:21:45,450 --> 00:21:48,900
log in but this is an important message

517
00:21:47,160 --> 00:21:51,120
down at the bottom of the street if you

518
00:21:48,900 --> 00:21:53,160
can see it but this individual still

519
00:21:51,120 --> 00:21:56,340
does not have access to the passwords in

520
00:21:53,160 --> 00:21:59,310
the database until the administrator Ari

521
00:21:56,340 --> 00:22:01,199
encrypts the public key excuse me the

522
00:21:59,310 --> 00:22:03,010
private key with their public key right

523
00:22:01,200 --> 00:22:04,960
so the user has create

524
00:22:03,010 --> 00:22:06,370
that's fantastic but they still can't do

525
00:22:04,960 --> 00:22:08,770
anything yet so that's an important

526
00:22:06,370 --> 00:22:11,020
point every time we want to pose it

527
00:22:08,770 --> 00:22:13,480
every time we either add a user or

528
00:22:11,020 --> 00:22:16,660
remove a user we have to re-encrypt that

529
00:22:13,480 --> 00:22:19,810
server public key either by adding that

530
00:22:16,660 --> 00:22:22,450
user's PGP public key to encrypt it or

531
00:22:19,810 --> 00:22:24,280
by removing their their public key so

532
00:22:22,450 --> 00:22:27,250
they can't get to it anymore right and

533
00:22:24,280 --> 00:22:28,810
so the just look looking at this real

534
00:22:27,250 --> 00:22:31,210
quick we've got John Smith now added

535
00:22:28,810 --> 00:22:34,990
that's great so the administrator comes

536
00:22:31,210 --> 00:22:36,640
in and re encrypts the public key you'll

537
00:22:34,990 --> 00:22:39,130
notice here that it's asking me as an

538
00:22:36,640 --> 00:22:41,890
administrator to validate who has access

539
00:22:39,130 --> 00:22:44,410
you'll notice that it's M view and J

540
00:22:41,890 --> 00:22:47,380
Smith you might have noticed that there

541
00:22:44,410 --> 00:22:49,180
was no cave on or will on there because

542
00:22:47,380 --> 00:22:52,150
they have not yet logged into the system

543
00:22:49,180 --> 00:22:54,880
that I so slaved over for days trying to

544
00:22:52,150 --> 00:22:58,630
create for them so they don't have keys

545
00:22:54,880 --> 00:23:00,420
on the system yet thanks thanks guys so

546
00:22:58,630 --> 00:23:03,610
now this individual J Smith can log-in

547
00:23:00,420 --> 00:23:06,550
put in their creds and there's the

548
00:23:03,610 --> 00:23:08,189
password we kind of ran out of time I

549
00:23:06,550 --> 00:23:10,870
think we're pretty much done but

550
00:23:08,190 --> 00:23:12,780
otherwise if you're interested you want

551
00:23:10,870 --> 00:23:15,040
to talk more about it to be happy to

552
00:23:12,780 --> 00:23:18,190
source code is out there if you want to

553
00:23:15,040 --> 00:23:21,010
see the database the backend that would

554
00:23:18,190 --> 00:23:28,620
be great as well so email us if you have

555
00:23:21,010 --> 00:23:36,700
questions quick questions yeah yes oh no

556
00:23:28,620 --> 00:23:37,929
hit by bus that's fine by bus no so

557
00:23:36,700 --> 00:23:39,430
that's the beautiful part is they're

558
00:23:37,930 --> 00:23:40,960
actually encrypted with the servers keys

559
00:23:39,430 --> 00:23:43,350
so if Kevin gets hit by a bus as a

560
00:23:40,960 --> 00:23:46,890
consultant we would just take him out

561
00:23:43,350 --> 00:23:50,139
remove his public key Andry encrypt the

562
00:23:46,890 --> 00:23:51,370
server's private key and Kevin would

563
00:23:50,140 --> 00:23:53,320
just be gone and I would just go about

564
00:23:51,370 --> 00:23:55,360
my business so everybody in the system

565
00:23:53,320 --> 00:23:57,429
has access to all the passwords in this

566
00:23:55,360 --> 00:23:59,919
design one of the designs that I liked

567
00:23:57,430 --> 00:24:02,590
that used no server private key allows

568
00:23:59,920 --> 00:24:04,540
you to individualize who can see what

569
00:24:02,590 --> 00:24:07,120
passwords but we didn't go that way No

570
00:24:04,540 --> 00:24:08,680
well cuz we trust our team that the

571
00:24:07,120 --> 00:24:12,820
point is this is a team orientated thing

572
00:24:08,680 --> 00:24:14,870
right it's I would trust my team I'd see

573
00:24:12,820 --> 00:24:16,760
25 on the clock here

574
00:24:14,870 --> 00:24:19,360
time so make a view of the questions

575
00:24:16,760 --> 00:24:19,360
thank you very much

