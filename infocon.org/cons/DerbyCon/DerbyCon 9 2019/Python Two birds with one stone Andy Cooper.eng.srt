1
00:00:00,000 --> 00:00:04,799
oan which this is me I'm a hacker from

2
00:00:03,840 --> 00:00:07,350
Dallas Texas

3
00:00:04,799 --> 00:00:09,030
I kind of hate Python too it's wrecked

4
00:00:07,350 --> 00:00:10,260
entirely too many of my dev environments

5
00:00:09,030 --> 00:00:12,840
and I've had to rebuild things over

6
00:00:10,260 --> 00:00:14,849
again I'm just tired of it three time

7
00:00:12,840 --> 00:00:18,180
now hack your Derby first-place finisher

8
00:00:14,849 --> 00:00:20,730
I have entirely too many hobbies I love

9
00:00:18,180 --> 00:00:24,600
Python three I wear now make bowties and

10
00:00:20,730 --> 00:00:26,609
I love coffee seriously I love coffee I

11
00:00:24,600 --> 00:00:30,199
take a picture of every like cup of

12
00:00:26,609 --> 00:00:33,660
espresso that I make at home and this is

13
00:00:30,199 --> 00:00:38,340
you know a couple weeks maybe two or

14
00:00:33,660 --> 00:00:41,279
three Python two is being deprecated on

15
00:00:38,340 --> 00:00:44,579
January 1st 2020 which is going to be a

16
00:00:41,280 --> 00:00:49,379
fantastic day it's literally one of the

17
00:00:44,579 --> 00:00:51,170
greatest days of my life I think but in

18
00:00:49,379 --> 00:00:54,089
reality not a damn thing is gonna change

19
00:00:51,170 --> 00:00:56,520
when it comes down to it Python to all

20
00:00:54,090 --> 00:00:58,559
that codes still gonna run it's still

21
00:00:56,520 --> 00:01:00,120
gonna have new projects even partially

22
00:00:58,559 --> 00:01:01,890
because the last thing that's on here

23
00:01:00,120 --> 00:01:03,510
your Mac's still gonna ship with Python

24
00:01:01,890 --> 00:01:06,659
to seven on it by default and they're

25
00:01:03,510 --> 00:01:09,840
just not fixing that one of the other

26
00:01:06,659 --> 00:01:11,310
big issues with it is that kind of you

27
00:01:09,840 --> 00:01:12,810
you're not also really taught to use

28
00:01:11,310 --> 00:01:14,400
virtual environments which is another

29
00:01:12,810 --> 00:01:15,990
problem with that on its own because

30
00:01:14,400 --> 00:01:17,100
it's the best way to really make sure

31
00:01:15,990 --> 00:01:19,020
you're using the right version for

32
00:01:17,100 --> 00:01:21,720
things and not just using it across

33
00:01:19,020 --> 00:01:23,220
everything but like it also says Python

34
00:01:21,720 --> 00:01:28,289
3 code is still going to be prettier

35
00:01:23,220 --> 00:01:30,090
because it's freaking gorgeous but the

36
00:01:28,290 --> 00:01:30,930
the big thing is is that we can do

37
00:01:30,090 --> 00:01:32,820
better than that

38
00:01:30,930 --> 00:01:34,740
then just continuing to use that code

39
00:01:32,820 --> 00:01:36,419
that was there from before and that is

40
00:01:34,740 --> 00:01:38,880
is already something that's being

41
00:01:36,420 --> 00:01:41,070
written or even though is sitting on our

42
00:01:38,880 --> 00:01:43,560
system that we're trying to work with

43
00:01:41,070 --> 00:01:45,360
and it's like hackers we have a real

44
00:01:43,560 --> 00:01:47,070
problem because we come in especially

45
00:01:45,360 --> 00:01:49,590
for doing pen testing or any sort of

46
00:01:47,070 --> 00:01:52,648
reports on vulnerabilities and we jump

47
00:01:49,590 --> 00:01:54,720
in in a lot of cases we have to go hey

48
00:01:52,649 --> 00:01:56,460
look these are this this is this

49
00:01:54,720 --> 00:01:58,110
deprecated code that you are using right

50
00:01:56,460 --> 00:02:00,179
here or this deprecated software that

51
00:01:58,110 --> 00:02:01,590
you're using right here you really

52
00:02:00,180 --> 00:02:03,270
shouldn't do that because it's no longer

53
00:02:01,590 --> 00:02:04,829
receiving some sort of update is no

54
00:02:03,270 --> 00:02:06,810
longer actually getting helped anymore

55
00:02:04,829 --> 00:02:08,459
but by the way ignore the fact that we

56
00:02:06,810 --> 00:02:10,378
found it with this code here that was an

57
00:02:08,459 --> 00:02:12,210
exploit DB that was running Python 2

58
00:02:10,378 --> 00:02:15,090
which is going to be or is deprecated

59
00:02:12,210 --> 00:02:16,560
very soon so we we had this hi little

60
00:02:15,090 --> 00:02:19,230
hypocrisy that that's going to be

61
00:02:16,560 --> 00:02:21,650
happening here very quickly and we need

62
00:02:19,230 --> 00:02:25,320
to be able to do something about that

63
00:02:21,650 --> 00:02:26,940
inside of exploit DB as of last night or

64
00:02:25,320 --> 00:02:31,320
technically early this morning at some

65
00:02:26,940 --> 00:02:32,600
point there the total split here is it's

66
00:02:31,320 --> 00:02:34,650
about twenty one point three percent

67
00:02:32,600 --> 00:02:37,640
Python three and everything else is

68
00:02:34,650 --> 00:02:40,710
Python to this is determined by the

69
00:02:37,640 --> 00:02:42,510
Python two to three tool and what things

70
00:02:40,710 --> 00:02:44,160
it says it needs to change versus what

71
00:02:42,510 --> 00:02:46,049
things it doesn't as opposed to doing

72
00:02:44,160 --> 00:02:47,730
something which actually gets pretty

73
00:02:46,050 --> 00:02:52,380
close to this and that's just searching

74
00:02:47,730 --> 00:02:54,239
for print and then a space which is good

75
00:02:52,380 --> 00:02:58,079
enough to find most things actually it

76
00:02:54,240 --> 00:03:00,090
for Python too so how do we really get

77
00:02:58,080 --> 00:03:04,740
started to change all of this code over

78
00:03:00,090 --> 00:03:07,380
from two to Python three use the Python

79
00:03:04,740 --> 00:03:08,760
two to three tool but it's it doesn't do

80
00:03:07,380 --> 00:03:12,900
all of the work for us

81
00:03:08,760 --> 00:03:14,640
and it breaks that's that's really

82
00:03:12,900 --> 00:03:16,260
what's going on here is that as you can

83
00:03:14,640 --> 00:03:18,239
see there's some parse errors in here

84
00:03:16,260 --> 00:03:20,299
we're inside some of the code that we're

85
00:03:18,240 --> 00:03:22,530
we're gonna look at in a minute here

86
00:03:20,300 --> 00:03:24,300
you'll see where it's it hasn't been

87
00:03:22,530 --> 00:03:28,560
formatted to be an actual Python script

88
00:03:24,300 --> 00:03:30,360
inside of exploit DB and so we're gonna

89
00:03:28,560 --> 00:03:33,270
take a bit here to kind of look at some

90
00:03:30,360 --> 00:03:34,860
of the codes that that's happening and

91
00:03:33,270 --> 00:03:38,100
we're gonna walk through kind of what

92
00:03:34,860 --> 00:03:41,970
I've decided and how I'm doing things to

93
00:03:38,100 --> 00:03:43,950
help fix this so this is one of the the

94
00:03:41,970 --> 00:03:47,730
pieces of code that very obviously kind

95
00:03:43,950 --> 00:03:49,500
of breaks here and the reason why is if

96
00:03:47,730 --> 00:03:51,989
you look at the very top here you'll see

97
00:03:49,500 --> 00:03:54,900
that that's not valid commenting for

98
00:03:51,990 --> 00:03:57,120
Python that's C style and it's not going

99
00:03:54,900 --> 00:03:59,460
to work if you just decide to run this

100
00:03:57,120 --> 00:04:01,860
particular Python script which means

101
00:03:59,460 --> 00:04:03,420
that you're going to have to pull code

102
00:04:01,860 --> 00:04:05,910
out of it or pull it out and stick into

103
00:04:03,420 --> 00:04:08,250
your interpreter and work off of that

104
00:04:05,910 --> 00:04:11,820
instead and while sometimes that's

105
00:04:08,250 --> 00:04:13,260
helpful it also is a break in like your

106
00:04:11,820 --> 00:04:15,840
process you should just be able to be

107
00:04:13,260 --> 00:04:17,130
inside of exploit DB runs search Floyd

108
00:04:15,840 --> 00:04:20,070
find the thing that you're looking for

109
00:04:17,130 --> 00:04:21,750
and run that piece of code it should

110
00:04:20,070 --> 00:04:22,950
then you know give you kind of a help

111
00:04:21,750 --> 00:04:24,080
and give you some sort of information

112
00:04:22,950 --> 00:04:25,789
upon running it

113
00:04:24,080 --> 00:04:28,120
should never actually have to open this

114
00:04:25,789 --> 00:04:30,110
script that's not it's not great but

115
00:04:28,120 --> 00:04:32,030
some of the other things that's going on

116
00:04:30,110 --> 00:04:35,599
here it's like it's you know using URL

117
00:04:32,030 --> 00:04:38,568
Lib too which is not safe and secure and

118
00:04:35,599 --> 00:04:40,188
doesn't really pop up in Python 3 it's

119
00:04:38,569 --> 00:04:42,409
got a hard-coded IP address that's in

120
00:04:40,189 --> 00:04:44,000
there hard-coded password that you're

121
00:04:42,409 --> 00:04:46,129
you would be changing something to in

122
00:04:44,000 --> 00:04:50,539
this really long string that just is way

123
00:04:46,129 --> 00:04:52,520
past the borders of your text editor or

124
00:04:50,539 --> 00:04:55,520
your IDE whatever you're actually using

125
00:04:52,520 --> 00:05:01,099
and this definitely is not Pepe

126
00:04:55,520 --> 00:05:03,049
which makes me sad so with this there is

127
00:05:01,099 --> 00:05:04,789
a little bit of structure to the code

128
00:05:03,050 --> 00:05:08,900
though you can see that we've got like a

129
00:05:04,789 --> 00:05:10,818
server IP address here is some sort of

130
00:05:08,900 --> 00:05:13,400
declaration that's happening and it's

131
00:05:10,819 --> 00:05:14,870
putting a single value into it the same

132
00:05:13,400 --> 00:05:16,250
thing with username except it's really

133
00:05:14,870 --> 00:05:18,289
long and then same thing with the

134
00:05:16,250 --> 00:05:19,879
password as well then we can also kind

135
00:05:18,289 --> 00:05:21,710
of see where the codes being used and

136
00:05:19,879 --> 00:05:24,199
how it's actually being adjusted which

137
00:05:21,710 --> 00:05:26,719
means that we can kind of take all of

138
00:05:24,199 --> 00:05:29,210
that out and put it into its own class

139
00:05:26,719 --> 00:05:32,840
and build in something kind of pretty

140
00:05:29,210 --> 00:05:34,370
here where we've got an argument block

141
00:05:32,840 --> 00:05:36,109
that kind of says hey these are the

142
00:05:34,370 --> 00:05:37,849
arguments that we're interacting with we

143
00:05:36,110 --> 00:05:40,009
have an execute that's actually like the

144
00:05:37,849 --> 00:05:42,680
main and then we also have a help

145
00:05:40,009 --> 00:05:45,020
function that displays all of the nice

146
00:05:42,680 --> 00:05:46,580
lovely either ASCII text or any credit

147
00:05:45,020 --> 00:05:49,758
or anything like that that goes towards

148
00:05:46,580 --> 00:05:52,580
the actual previous thing that we were

149
00:05:49,759 --> 00:05:53,930
working off of so that way one we don't

150
00:05:52,580 --> 00:05:56,359
claim that we actually wrote the thing

151
00:05:53,930 --> 00:05:58,819
that we didn't write and two we get to

152
00:05:56,360 --> 00:06:00,440
still use it in a prettier manner and

153
00:05:58,819 --> 00:06:03,229
what you can actually do is take that

154
00:06:00,440 --> 00:06:05,300
kind of nicely formatted class and build

155
00:06:03,229 --> 00:06:06,889
a command-line tool to interact with all

156
00:06:05,300 --> 00:06:08,779
of them so if they're all formatted in

157
00:06:06,889 --> 00:06:10,909
that same way you could build something

158
00:06:08,779 --> 00:06:13,039
that automatically generates the art

159
00:06:10,909 --> 00:06:15,560
parse to actually take all of that code

160
00:06:13,039 --> 00:06:17,750
in and get to the point where you

161
00:06:15,560 --> 00:06:22,279
actually have something like this where

162
00:06:17,750 --> 00:06:23,509
you could just run that so like I said

163
00:06:22,279 --> 00:06:25,159
here the kind of thing that's going on

164
00:06:23,509 --> 00:06:27,529
is we're using some art parts some

165
00:06:25,159 --> 00:06:29,120
import Lib some well formatted classes

166
00:06:27,529 --> 00:06:30,949
like I showed you there a second ago

167
00:06:29,120 --> 00:06:32,779
and we're kind of abusing some of the

168
00:06:30,949 --> 00:06:36,649
Python imports and during doing some

169
00:06:32,779 --> 00:06:38,020
dirty dictionary class magic so this is

170
00:06:36,649 --> 00:06:41,449
the

171
00:06:38,020 --> 00:06:43,340
the tool that I ran a second ago the the

172
00:06:41,449 --> 00:06:44,960
actual command line thing that picked up

173
00:06:43,340 --> 00:06:48,590
that script pulled it out and actually

174
00:06:44,960 --> 00:06:51,020
and ran it so it's very short all it

175
00:06:48,590 --> 00:06:52,669
does is pull that class in read inside

176
00:06:51,020 --> 00:06:55,250
the actual arguments that it's dealing

177
00:06:52,669 --> 00:06:57,590
with and then start to process through

178
00:06:55,250 --> 00:06:59,840
it and it just runs the execute command

179
00:06:57,590 --> 00:07:03,349
down at the bottom and it's doing all of

180
00:06:59,840 --> 00:07:04,580
that just using the import library using

181
00:07:03,349 --> 00:07:06,919
some of the stuff that's inside of there

182
00:07:04,580 --> 00:07:09,919
and as we'll see here the dirty class

183
00:07:06,919 --> 00:07:11,448
magic the dictionary magic is I don't

184
00:07:09,919 --> 00:07:14,810
know if you can read that very bottom

185
00:07:11,449 --> 00:07:16,789
line of the exploit the class definition

186
00:07:14,810 --> 00:07:20,419
there or just above where it says

187
00:07:16,789 --> 00:07:22,068
exploit arguments the self dict update

188
00:07:20,419 --> 00:07:23,840
and then it's taking the art parts

189
00:07:22,069 --> 00:07:25,460
module and shoving that in there that

190
00:07:23,840 --> 00:07:29,119
actually lets you get to the point where

191
00:07:25,460 --> 00:07:31,609
you can do the things like the we have a

192
00:07:29,120 --> 00:07:33,409
self dot target in there so that way

193
00:07:31,610 --> 00:07:34,580
we've taken that art parsed value and

194
00:07:33,409 --> 00:07:35,960
just shove it straight in there because

195
00:07:34,580 --> 00:07:37,520
we know that's gonna be what it is

196
00:07:35,960 --> 00:07:39,409
anyway so now we have this new class

197
00:07:37,520 --> 00:07:41,180
value instead of having to reference it

198
00:07:39,409 --> 00:07:43,520
through our parse or reference through

199
00:07:41,180 --> 00:07:48,919
some of the other object we just have it

200
00:07:43,520 --> 00:07:50,419
straight into the class so reformatting

201
00:07:48,919 --> 00:07:52,880
these modules like this it's kind of a

202
00:07:50,419 --> 00:07:57,440
pain in the ass it's really tedious to

203
00:07:52,880 --> 00:07:58,940
sit down and go module by module fix all

204
00:07:57,440 --> 00:08:00,169
the errors that are in there pick them

205
00:07:58,940 --> 00:08:02,630
up put them where they're supposed to go

206
00:08:00,169 --> 00:08:03,560
and then make sure all the comments and

207
00:08:02,630 --> 00:08:04,539
everything you're doing what they're

208
00:08:03,560 --> 00:08:07,729
supposed to be doing

209
00:08:04,539 --> 00:08:09,620
getting it all there's is it sucks it

210
00:08:07,729 --> 00:08:11,000
really helps out though that's one of

211
00:08:09,620 --> 00:08:12,580
the things that's useful about it is it

212
00:08:11,000 --> 00:08:16,639
takes some of this code that we've let

213
00:08:12,580 --> 00:08:18,500
sit there for a decade almost in some

214
00:08:16,639 --> 00:08:22,969
situation are almost decades at this

215
00:08:18,500 --> 00:08:24,500
point and we're bringing it back up into

216
00:08:22,969 --> 00:08:25,759
the future so that you don't have to use

217
00:08:24,500 --> 00:08:27,469
a bunch of different virtual

218
00:08:25,759 --> 00:08:31,969
environments just to be able to execute

219
00:08:27,469 --> 00:08:34,338
a single thing from exploit DB which is

220
00:08:31,969 --> 00:08:37,909
it's a great resource why are we letting

221
00:08:34,339 --> 00:08:39,380
it decay like that and there is kind of

222
00:08:37,909 --> 00:08:43,279
a way to do this a little bit better I

223
00:08:39,380 --> 00:08:45,279
found I abstract syntax trees is anybody

224
00:08:43,279 --> 00:08:48,260
here familiar do we have anybody that

225
00:08:45,279 --> 00:08:50,089
awesome we've got a few people if you

226
00:08:48,260 --> 00:08:50,790
guys use the actual ast module inside of

227
00:08:50,089 --> 00:08:53,700
Python or you

228
00:08:50,790 --> 00:08:56,880
using something else okay well an

229
00:08:53,700 --> 00:08:59,070
abstract syntax tree is kind of a break

230
00:08:56,880 --> 00:09:00,960
down version of the the code that you're

231
00:08:59,070 --> 00:09:02,760
really looking at and it takes the

232
00:09:00,960 --> 00:09:04,320
structure of the code and it takes the

233
00:09:02,760 --> 00:09:05,880
elements of the code and puts it into a

234
00:09:04,320 --> 00:09:12,450
nice lovely object that you can interact

235
00:09:05,880 --> 00:09:14,189
with like it says here the the code you

236
00:09:12,450 --> 00:09:15,660
or somebody on Stack Exchange wrote it

237
00:09:14,190 --> 00:09:18,300
you should definitely know what's going

238
00:09:15,660 --> 00:09:20,040
on there the scanner it kind of scans

239
00:09:18,300 --> 00:09:22,189
through the entire file that you've got

240
00:09:20,040 --> 00:09:25,079
or whatever source block you give it and

241
00:09:22,190 --> 00:09:26,670
it separates it out into individual

242
00:09:25,080 --> 00:09:29,760
blocks most of the time this is based

243
00:09:26,670 --> 00:09:31,170
just on spaces in between things and it

244
00:09:29,760 --> 00:09:32,340
just says okay these are what you're

245
00:09:31,170 --> 00:09:34,349
looking at this is everything that's

246
00:09:32,340 --> 00:09:36,090
going on you have a tokenizer and a

247
00:09:34,350 --> 00:09:38,880
lexer that goes through everything and

248
00:09:36,090 --> 00:09:40,440
it pulls out all of those individual

249
00:09:38,880 --> 00:09:44,010
things and links them together so

250
00:09:40,440 --> 00:09:46,050
instead of seeing you know a double

251
00:09:44,010 --> 00:09:47,490
quote and then a few words or a word or

252
00:09:46,050 --> 00:09:48,930
word word and then another double quote

253
00:09:47,490 --> 00:09:50,490
it puts it all together and says hey

254
00:09:48,930 --> 00:09:52,560
this is a string this is what you're

255
00:09:50,490 --> 00:09:54,030
actually interacting with here and then

256
00:09:52,560 --> 00:09:55,800
the parser kind of takes all that

257
00:09:54,030 --> 00:09:58,709
information looks back at the original

258
00:09:55,800 --> 00:10:03,089
code and builds this the syntax tree or

259
00:09:58,710 --> 00:10:04,710
this parse tree and it you look at the

260
00:10:03,090 --> 00:10:07,590
actual ast module inside of Python

261
00:10:04,710 --> 00:10:09,930
you'll find two things one it's very

262
00:10:07,590 --> 00:10:11,940
very loud and what it does like it

263
00:10:09,930 --> 00:10:13,589
creates a lot of objects in there but

264
00:10:11,940 --> 00:10:17,760
that's that's the good thing because it

265
00:10:13,590 --> 00:10:20,540
actually helps you have a special unique

266
00:10:17,760 --> 00:10:24,240
way that you can work through all of the

267
00:10:20,540 --> 00:10:26,819
interactions that are happening and with

268
00:10:24,240 --> 00:10:28,440
that you've got a bunch of things you

269
00:10:26,820 --> 00:10:29,700
can see here it's like this body that's

270
00:10:28,440 --> 00:10:31,560
happening inside this module it's got

271
00:10:29,700 --> 00:10:33,360
this special out hey this is an import

272
00:10:31,560 --> 00:10:35,729
that we know is happening here and we

273
00:10:33,360 --> 00:10:39,600
know that this import calls this module

274
00:10:35,730 --> 00:10:41,550
pilot Arviat phyto basic and we also

275
00:10:39,600 --> 00:10:43,830
know the yeah it's pulling out the

276
00:10:41,550 --> 00:10:45,599
exploit from that inside of all of that

277
00:10:43,830 --> 00:10:48,150
it's it's breaking all that stuff down

278
00:10:45,600 --> 00:10:49,620
into little blocks and putting it so

279
00:10:48,150 --> 00:10:55,199
that you can actually interact with this

280
00:10:49,620 --> 00:10:57,660
code so what happens with the second

281
00:10:55,200 --> 00:10:59,250
thing on it ASCS are actually horribly

282
00:10:57,660 --> 00:11:01,860
documented inside the base Python

283
00:10:59,250 --> 00:11:03,570
documentation don't go to the actual

284
00:11:01,860 --> 00:11:04,470
Python Doc's go to this website at the

285
00:11:03,570 --> 00:11:06,870
bottom here

286
00:11:04,470 --> 00:11:09,090
Greentree steaks read the docs instead

287
00:11:06,870 --> 00:11:10,740
it will tell you everything you actually

288
00:11:09,090 --> 00:11:13,530
need to know about interacting with a

289
00:11:10,740 --> 00:11:15,090
sts and give you a pretty cool tool to

290
00:11:13,530 --> 00:11:17,130
kind of print it out like this one here

291
00:11:15,090 --> 00:11:19,530
which doesn't happen inside of the

292
00:11:17,130 --> 00:11:21,000
actual thing so you have to decode some

293
00:11:19,530 --> 00:11:22,650
things differently but if you want to

294
00:11:21,000 --> 00:11:24,570
actually interact with them you can

295
00:11:22,650 --> 00:11:27,660
build these different Transformers and

296
00:11:24,570 --> 00:11:30,450
viewers or visitors I guess it's

297
00:11:27,660 --> 00:11:32,880
technically the term but you can set up

298
00:11:30,450 --> 00:11:36,690
like for example one of the things that

299
00:11:32,880 --> 00:11:38,670
I did inside of this was look for the if

300
00:11:36,690 --> 00:11:40,320
name equals the main thing that you

301
00:11:38,670 --> 00:11:42,420
always see at the bottom of code so that

302
00:11:40,320 --> 00:11:46,260
people just run whatever function or run

303
00:11:42,420 --> 00:11:47,969
their actual main from their code this

304
00:11:46,260 --> 00:11:49,770
is the code to actually identify that

305
00:11:47,970 --> 00:11:51,330
and kind of replace it and pull that

306
00:11:49,770 --> 00:11:53,460
code out of it so that we can stick it

307
00:11:51,330 --> 00:11:56,880
back into a main later on or into our

308
00:11:53,460 --> 00:11:59,220
own functions later on sometimes this

309
00:11:56,880 --> 00:12:01,650
gets a little crazy because the way that

310
00:11:59,220 --> 00:12:04,530
the AST is interact they they're really

311
00:12:01,650 --> 00:12:05,880
harsh about all of the data that's

312
00:12:04,530 --> 00:12:07,560
inside of them so you kind of have to do

313
00:12:05,880 --> 00:12:09,750
a lot of type checking as you go through

314
00:12:07,560 --> 00:12:12,540
things there are other modules that do

315
00:12:09,750 --> 00:12:14,130
this a little bit better like the Red

316
00:12:12,540 --> 00:12:15,630
Baron module for example does this

317
00:12:14,130 --> 00:12:18,480
pretty better pretty much better than

318
00:12:15,630 --> 00:12:20,100
this but I I liked the default ast

319
00:12:18,480 --> 00:12:25,290
module so that's what I'm sticking with

320
00:12:20,100 --> 00:12:26,640
here we're gonna look at some of this

321
00:12:25,290 --> 00:12:28,890
code and so the transforms that's

322
00:12:26,640 --> 00:12:30,630
actually happening from some of the code

323
00:12:28,890 --> 00:12:32,580
that I wrote for this this specific

324
00:12:30,630 --> 00:12:35,760
situation because I got tired of doing

325
00:12:32,580 --> 00:12:37,650
all these transformations by hand we

326
00:12:35,760 --> 00:12:39,720
have like a huge commented code block at

327
00:12:37,650 --> 00:12:41,430
the top then we have a couple of

328
00:12:39,720 --> 00:12:44,100
variables that end up being created and

329
00:12:41,430 --> 00:12:48,120
then it's doing some things what we can

330
00:12:44,100 --> 00:12:50,640
do is use some abstract syntax trees an

331
00:12:48,120 --> 00:12:53,610
ast module to actually run through that

332
00:12:50,640 --> 00:12:56,069
code read it and create this

333
00:12:53,610 --> 00:12:58,020
automatically just generate this for

334
00:12:56,070 --> 00:13:00,450
every file that it can run through and

335
00:12:58,020 --> 00:13:01,970
this is the exact same kind of class

336
00:13:00,450 --> 00:13:04,620
setup that we were looking at before

337
00:13:01,970 --> 00:13:06,000
except the return for the local

338
00:13:04,620 --> 00:13:07,830
arguments is a little more spaced out

339
00:13:06,000 --> 00:13:11,400
because I ought Oh pepper Aidid it and

340
00:13:07,830 --> 00:13:13,020
it didn't like that but it still gets

341
00:13:11,400 --> 00:13:15,150
you all that information and the spots

342
00:13:13,020 --> 00:13:16,590
where it needs to go are execute Sivan

343
00:13:15,150 --> 00:13:16,889
just the exact same thing that was

344
00:13:16,590 --> 00:13:18,749
inside

345
00:13:16,889 --> 00:13:20,189
of the main just a second ago we just

346
00:13:18,749 --> 00:13:23,939
stripped it out and put it where we want

347
00:13:20,189 --> 00:13:25,769
it instead we also in the cases of where

348
00:13:23,939 --> 00:13:28,618
we had any of their variables from

349
00:13:25,769 --> 00:13:30,839
before we took the names from their

350
00:13:28,619 --> 00:13:32,609
variables tacked the word self in front

351
00:13:30,839 --> 00:13:33,059
of them and we operate off of it from

352
00:13:32,609 --> 00:13:37,470
there

353
00:13:33,059 --> 00:13:39,419
and then as the bottom the totally

354
00:13:37,470 --> 00:13:41,489
stone-cold code with no credit because I

355
00:13:39,419 --> 00:13:44,459
haven't quite got the commenting part

356
00:13:41,489 --> 00:13:46,889
done yet because that actually a STS

357
00:13:44,459 --> 00:13:48,358
don't deal with that part of the code

358
00:13:46,889 --> 00:13:50,220
you have to actually interact with that

359
00:13:48,359 --> 00:13:56,759
at the Lexington I just haven't gotten

360
00:13:50,220 --> 00:14:00,269
to that yet so what can we kind of do to

361
00:13:56,759 --> 00:14:02,309
write some prettier Python here we can

362
00:14:00,269 --> 00:14:03,869
use more classes in our code that's one

363
00:14:02,309 --> 00:14:07,549
of the things that I found from exploit

364
00:14:03,869 --> 00:14:10,709
dB in particular it it has a lot of

365
00:14:07,549 --> 00:14:15,269
really bad variable names they're all A

366
00:14:10,709 --> 00:14:18,768
or B more I I is good for an iterator

367
00:14:15,269 --> 00:14:21,449
end of list don't don't use it otherwise

368
00:14:18,769 --> 00:14:27,059
target is probably the best variable

369
00:14:21,449 --> 00:14:29,099
name that I think I found yeah so say

370
00:14:27,059 --> 00:14:31,439
what your variable names actually are if

371
00:14:29,100 --> 00:14:34,410
it's you know some sort of handle to a

372
00:14:31,439 --> 00:14:36,329
class make it exploit handle like that's

373
00:14:34,410 --> 00:14:38,009
a good way to know hey I'm interacting

374
00:14:36,329 --> 00:14:40,979
with an exploit I know that's what this

375
00:14:38,009 --> 00:14:42,749
variable is going to be especially since

376
00:14:40,980 --> 00:14:44,910
pythons really loose on its class and

377
00:14:42,749 --> 00:14:47,249
typing you can help build some of that

378
00:14:44,910 --> 00:14:48,719
in with your actual code so that you

379
00:14:47,249 --> 00:14:53,100
know what's happening as you're writing

380
00:14:48,720 --> 00:14:54,689
it use an IDE obviously I love PyCharm

381
00:14:53,100 --> 00:14:56,959
that's what I've been using for all of

382
00:14:54,689 --> 00:15:00,779
this stuff here and then also pep eight

383
00:14:56,959 --> 00:15:03,508
Pepe tis a great structured way to

384
00:15:00,779 --> 00:15:09,480
organize all of the losing all the

385
00:15:03,509 --> 00:15:11,309
lights there I need to move okay no yeah

386
00:15:09,480 --> 00:15:14,260
it's okay everybody can fall asleep and

387
00:15:11,309 --> 00:15:21,310
then we lose the lights that happens but

388
00:15:14,260 --> 00:15:24,069
now so yeah Pepe does a great job of

389
00:15:21,310 --> 00:15:26,760
giving you a way to organize your code

390
00:15:24,070 --> 00:15:29,230
and code to that I think it's fantastic

391
00:15:26,760 --> 00:15:34,710
yeah yeah we're gonna be okay the cheat

392
00:15:29,230 --> 00:15:36,940
is totally fired yeah uh rounded so

393
00:15:34,710 --> 00:15:41,860
we're gonna take a break from our slide

394
00:15:36,940 --> 00:15:50,080
deck here real quick but not everything

395
00:15:41,860 --> 00:15:53,350
else hold on let's see I'll get this

396
00:15:50,080 --> 00:16:05,920
stuff moved over in just a second it's

397
00:15:53,350 --> 00:16:07,900
just a gigantic PyCharm window so what's

398
00:16:05,920 --> 00:16:13,630
going on here and gets other one over

399
00:16:07,900 --> 00:16:18,400
here too is we're gonna do a little bit

400
00:16:13,630 --> 00:16:23,650
of combination QA and look at this thing

401
00:16:18,400 --> 00:16:26,500
actually work so we're gonna run this

402
00:16:23,650 --> 00:16:29,350
and it's just doing its thing right now

403
00:16:26,500 --> 00:16:31,240
that's that's all it's kind of doing and

404
00:16:29,350 --> 00:16:32,710
as you can see there it kind of just

405
00:16:31,240 --> 00:16:35,430
jumped up a bunch of modules that it

406
00:16:32,710 --> 00:16:37,870
decided to go ahead and go with and

407
00:16:35,430 --> 00:16:39,489
that's that's what it's it's really kind

408
00:16:37,870 --> 00:16:41,650
of working on here is it's it's just

409
00:16:39,490 --> 00:16:43,420
converting these modules over as it sees

410
00:16:41,650 --> 00:16:44,980
them inside of exploit DB it's searching

411
00:16:43,420 --> 00:16:46,839
through all the ones that are in there

412
00:16:44,980 --> 00:16:49,060
it's pulling out all of the modules that

413
00:16:46,840 --> 00:16:51,160
it can actually deal with that are from

414
00:16:49,060 --> 00:16:52,660
Python two to three that I had to do

415
00:16:51,160 --> 00:16:54,969
beforehand because that was actually

416
00:16:52,660 --> 00:16:56,290
taking about you know twelve hours to

417
00:16:54,970 --> 00:16:58,330
really get through all of it and it

418
00:16:56,290 --> 00:17:00,969
still wasn't finishing all of it because

419
00:16:58,330 --> 00:17:02,920
some of the at least if you run two to

420
00:17:00,970 --> 00:17:05,610
three at the whole repo all at once on a

421
00:17:02,920 --> 00:17:09,970
old-school laptop it doesn't like that

422
00:17:05,609 --> 00:17:11,169
so you do what you can but what we can

423
00:17:09,970 --> 00:17:12,360
do is kind of take a look at some of

424
00:17:11,170 --> 00:17:14,650
these some of them are gonna be blank

425
00:17:12,359 --> 00:17:17,169
some of them are gonna be a little bit

426
00:17:14,650 --> 00:17:19,630
more broken here but as we see it

427
00:17:17,170 --> 00:17:22,120
straight out generated this code in this

428
00:17:19,630 --> 00:17:24,070
case they actually were they had the

429
00:17:22,119 --> 00:17:26,439
string inside of their mains so it ends

430
00:17:24,069 --> 00:17:27,649
up still inside of here and so you get

431
00:17:26,440 --> 00:17:28,970
to keep some of the cool a skier

432
00:17:27,650 --> 00:17:30,830
which is one of my favorite things about

433
00:17:28,970 --> 00:17:34,010
that I want to keep the ASCII art

434
00:17:30,830 --> 00:17:35,120
because it's so badass and then

435
00:17:34,010 --> 00:17:36,379
eventually it will actually get to some

436
00:17:35,120 --> 00:17:40,909
code this is one of the worst ones

437
00:17:36,380 --> 00:17:42,710
because it's just a lot of that and then

438
00:17:40,910 --> 00:17:44,270
we here we go see they even like the

439
00:17:42,710 --> 00:17:46,700
ASCII art inside of their actual code

440
00:17:44,270 --> 00:17:49,040
but we it works through this whole thing

441
00:17:46,700 --> 00:17:52,370
and does what it's supposed to do off of

442
00:17:49,040 --> 00:18:03,050
that and let's see how many of these are

443
00:17:52,370 --> 00:18:06,590
we up to here anybody actually read that

444
00:18:03,050 --> 00:18:08,180
number because I can okay that's about

445
00:18:06,590 --> 00:18:11,149
where it's gonna actually crap out at

446
00:18:08,180 --> 00:18:15,110
this point because let's get back over

447
00:18:11,150 --> 00:18:18,680
to our slides here let it keep running

448
00:18:15,110 --> 00:18:20,479
but it's it's at the point where it's

449
00:18:18,680 --> 00:18:21,890
it's doing a lot of this conversion and

450
00:18:20,480 --> 00:18:25,970
it's still getting a lot of this done

451
00:18:21,890 --> 00:18:28,310
for us but it's also kind of breaking in

452
00:18:25,970 --> 00:18:30,290
cases because I don't have something set

453
00:18:28,310 --> 00:18:32,360
up for every single individual thing

454
00:18:30,290 --> 00:18:34,040
that it's actually looking for the

455
00:18:32,360 --> 00:18:35,090
biggest case in point for that is I was

456
00:18:34,040 --> 00:18:36,590
going through this and I'm like I'm

457
00:18:35,090 --> 00:18:38,419
gonna find these individual variables

458
00:18:36,590 --> 00:18:42,879
and I'm gonna work off of those and then

459
00:18:38,420 --> 00:18:46,850
I realized shortly afterwards that Oh

460
00:18:42,880 --> 00:18:49,220
ie I could I could steal that stuff from

461
00:18:46,850 --> 00:18:50,719
art parts that's a good idea and so I

462
00:18:49,220 --> 00:18:52,280
started doing that it took all their

463
00:18:50,720 --> 00:18:54,080
stuff from their art parse and convert

464
00:18:52,280 --> 00:18:55,430
it over back to my format and then stuck

465
00:18:54,080 --> 00:18:56,929
it in there and replaced all of their

466
00:18:55,430 --> 00:18:59,540
variables so it's not using like the

467
00:18:56,930 --> 00:19:00,040
whatever parser they set up dot thing

468
00:18:59,540 --> 00:19:06,290
anymore

469
00:19:00,040 --> 00:19:09,470
and then about a you know 26 or so hours

470
00:19:06,290 --> 00:19:11,450
ago I realized oh people still use the

471
00:19:09,470 --> 00:19:13,880
SIS art V thing and that's gonna

472
00:19:11,450 --> 00:19:15,860
literally break all of this and it is

473
00:19:13,880 --> 00:19:17,450
actually literally breaking my code

474
00:19:15,860 --> 00:19:20,090
that's meant to actually find the

475
00:19:17,450 --> 00:19:22,160
artists visa or the SRD stuff because

476
00:19:20,090 --> 00:19:24,649
it's just not this it's not done and

477
00:19:22,160 --> 00:19:26,000
fully debugged yet but once that happens

478
00:19:24,650 --> 00:19:27,980
I have a feeling that's gonna add a lot

479
00:19:26,000 --> 00:19:31,040
more of these modules that are actually

480
00:19:27,980 --> 00:19:34,040
going to be successful out of the I

481
00:19:31,040 --> 00:19:36,590
believe it's close to 2,900 modules that

482
00:19:34,040 --> 00:19:38,550
are in exploit DB that are in Python we

483
00:19:36,590 --> 00:19:39,990
get about half of

484
00:19:38,550 --> 00:19:43,050
that are actually parsing through all of

485
00:19:39,990 --> 00:19:44,730
this and as I work through it there's

486
00:19:43,050 --> 00:19:45,389
just gonna be more of these it end up

487
00:19:44,730 --> 00:19:47,250
getting done

488
00:19:45,390 --> 00:19:49,050
whenever I actually put in for this talk

489
00:19:47,250 --> 00:19:52,350
I promise that 50 of them are gonna get

490
00:19:49,050 --> 00:19:53,370
it done I think like 1,400 - diet I

491
00:19:52,350 --> 00:19:58,800
think it's close to about a 10 percent

492
00:19:53,370 --> 00:20:01,439
error rate is slightly over that but but

493
00:19:58,800 --> 00:20:04,399
my next steps on this are I'm going to

494
00:20:01,440 --> 00:20:07,050
kind of take a short break because I

495
00:20:04,400 --> 00:20:08,580
redid this entire code base starting on

496
00:20:07,050 --> 00:20:10,470
Tuesday because that's that's when I

497
00:20:08,580 --> 00:20:15,689
decided oh I can do this this way

498
00:20:10,470 --> 00:20:17,429
instead and I'm exhausted so fixing the

499
00:20:15,690 --> 00:20:20,460
RV issues is one of the things I'm going

500
00:20:17,429 --> 00:20:23,070
to do fixing the skate the import all

501
00:20:20,460 --> 00:20:25,770
kind of thing for all sorts of different

502
00:20:23,070 --> 00:20:28,020
modules that you see python modules not

503
00:20:25,770 --> 00:20:29,850
exploit eb modules that i think is one

504
00:20:28,020 --> 00:20:32,520
of the worst things that you can

505
00:20:29,850 --> 00:20:34,860
actually do in python is import all of a

506
00:20:32,520 --> 00:20:37,620
class like that especially down to your

507
00:20:34,860 --> 00:20:39,719
base level it's you don't know where

508
00:20:37,620 --> 00:20:40,919
anything is coming from it's really hard

509
00:20:39,720 --> 00:20:43,080
to root through and fix anything

510
00:20:40,920 --> 00:20:44,670
afterwards and stuff just kind of

511
00:20:43,080 --> 00:20:47,189
magically feels like it's actually in

512
00:20:44,670 --> 00:20:49,110
Python that's not in Python anymore and

513
00:20:47,190 --> 00:20:50,640
so if you try to change back to anything

514
00:20:49,110 --> 00:20:52,770
else or try to change your code at all

515
00:20:50,640 --> 00:20:55,590
it just destroys everything that's going

516
00:20:52,770 --> 00:20:57,300
on so please stop doing that and if

517
00:20:55,590 --> 00:20:59,040
you're somebody that's from a project

518
00:20:57,300 --> 00:21:00,690
likes KP please stop making your project

519
00:20:59,040 --> 00:21:03,030
require that or that the default tools

520
00:21:00,690 --> 00:21:06,120
is all you to do that it'll make

521
00:21:03,030 --> 00:21:07,590
everybody happy er obviously that's a

522
00:21:06,120 --> 00:21:08,850
large nitpick but I have a few others

523
00:21:07,590 --> 00:21:12,178
that I actually want to adjust through

524
00:21:08,850 --> 00:21:13,320
as well and obviously like it says the

525
00:21:12,179 --> 00:21:14,940
bottom work through some of the bugs to

526
00:21:13,320 --> 00:21:16,678
help fix some of that plus or minus 10%

527
00:21:14,940 --> 00:21:21,510
that's kind of breaking inside of the

528
00:21:16,679 --> 00:21:25,380
code so earlier I mentioned the class

529
00:21:21,510 --> 00:21:27,629
dictionaries you can have a lot of fun

530
00:21:25,380 --> 00:21:29,670
with class dictionaries you can straight

531
00:21:27,630 --> 00:21:31,950
add things so that your class all of a

532
00:21:29,670 --> 00:21:34,830
sudden has its own variable to it it has

533
00:21:31,950 --> 00:21:36,990
its own function to it it has a lot of

534
00:21:34,830 --> 00:21:40,919
different things to it you can even in a

535
00:21:36,990 --> 00:21:44,550
goofy way take your class and give it a

536
00:21:40,920 --> 00:21:46,770
new variable name so dot function or dot

537
00:21:44,550 --> 00:21:50,280
whatever you want to call it and have

538
00:21:46,770 --> 00:21:51,389
that value be a lambda inside of the

539
00:21:50,280 --> 00:21:52,799
dictionary

540
00:21:51,390 --> 00:21:55,110
so that you've actually just created

541
00:21:52,799 --> 00:21:58,379
like this kind of Yolo function inside

542
00:21:55,110 --> 00:22:00,240
of your your class it's not always

543
00:21:58,380 --> 00:22:06,690
useful but if you're doing something

544
00:22:00,240 --> 00:22:08,370
like building a web api off of a wisdom

545
00:22:06,690 --> 00:22:09,750
it's it's actually pretty decent for

546
00:22:08,370 --> 00:22:11,309
that because you just get to build like

547
00:22:09,750 --> 00:22:14,040
the one interaction especially restful

548
00:22:11,309 --> 00:22:16,830
interfaces which are I love them so much

549
00:22:14,040 --> 00:22:19,350
better than so but they they help get

550
00:22:16,830 --> 00:22:21,240
you through doing cool things like that

551
00:22:19,350 --> 00:22:22,530
there's a little tips and tricks and

552
00:22:21,240 --> 00:22:24,720
goofy things that happen with it though

553
00:22:22,530 --> 00:22:27,240
so don't cry whenever it ends up being

554
00:22:24,720 --> 00:22:28,620
the same thing for all of them so if

555
00:22:27,240 --> 00:22:29,760
anybody wants to actually help me out

556
00:22:28,620 --> 00:22:32,729
here

557
00:22:29,760 --> 00:22:36,110
this phyto repo is the one that's

558
00:22:32,730 --> 00:22:38,520
actually the end result that's where the

559
00:22:36,110 --> 00:22:40,559
successful successfully converted

560
00:22:38,520 --> 00:22:42,418
modules are going to go the one that's

561
00:22:40,559 --> 00:22:44,460
below that is the actual converter

562
00:22:42,419 --> 00:22:48,679
itself and it's the big thing that I've

563
00:22:44,460 --> 00:22:51,840
been working on to make this happen and

564
00:22:48,679 --> 00:22:53,549
it's it's the one where I need to see

565
00:22:51,840 --> 00:22:55,110
like bug reports if you go through and

566
00:22:53,549 --> 00:22:57,000
you look inside the phyto repo and

567
00:22:55,110 --> 00:22:58,379
you're like oh there's these 15

568
00:22:57,000 --> 00:23:00,650
different modules that I'm seeing that

569
00:22:58,380 --> 00:23:03,150
are all breaking in this exact same spot

570
00:23:00,650 --> 00:23:04,679
that's that's where I need to know about

571
00:23:03,150 --> 00:23:07,110
that so that I can actually jump in and

572
00:23:04,679 --> 00:23:08,429
and fix it or if you want to please send

573
00:23:07,110 --> 00:23:10,620
your own pull request to fix it that'd

574
00:23:08,429 --> 00:23:12,870
be fantastic too if you want to contact

575
00:23:10,620 --> 00:23:15,600
me integral at Twitter also at the

576
00:23:12,870 --> 00:23:17,840
Gmail's does anybody have any questions

577
00:23:15,600 --> 00:23:23,780
or comments or anything like that just

578
00:23:17,840 --> 00:23:26,340
about a time awesome

579
00:23:23,780 --> 00:23:34,590
I'll let me show you something then if

580
00:23:26,340 --> 00:23:36,840
we if we got a second I can show you

581
00:23:34,590 --> 00:23:41,209
this code that I'm Way more proud of

582
00:23:36,840 --> 00:23:44,289
than I should be let's see here

583
00:23:41,210 --> 00:23:44,289
[Music]

584
00:23:46,600 --> 00:23:50,629
so this is kind of an example of exactly

585
00:23:49,190 --> 00:23:54,470
what I was talking about which we can't

586
00:23:50,630 --> 00:23:57,590
see it all because yeah hold on try to

587
00:23:54,470 --> 00:24:06,500
help us out so the aspect ratio changes

588
00:23:57,590 --> 00:24:10,850
a lot going over there so kind of what

589
00:24:06,500 --> 00:24:12,470
we're looking for is the yeah so this

590
00:24:10,850 --> 00:24:13,939
thing right here where we're going in

591
00:24:12,470 --> 00:24:15,560
and we're jumping into the request and

592
00:24:13,940 --> 00:24:16,850
actually giving it a lambda that it

593
00:24:15,560 --> 00:24:19,940
actually interacts with instead of

594
00:24:16,850 --> 00:24:22,760
giving it functions this ends up taking

595
00:24:19,940 --> 00:24:24,740
the entire hash top loops API which is

596
00:24:22,760 --> 00:24:26,450
something like tin law tech files that

597
00:24:24,740 --> 00:24:27,830
they have sitting around and it reads

598
00:24:26,450 --> 00:24:30,290
through all those law tech files and

599
00:24:27,830 --> 00:24:32,870
builds an actual API for the whole class

600
00:24:30,290 --> 00:24:36,470
so that you can then hit it up and go

601
00:24:32,870 --> 00:24:39,830
hey users dot this other thing dot this

602
00:24:36,470 --> 00:24:41,690
other thing dot and get hash things and

603
00:24:39,830 --> 00:24:43,520
it'll actually pull that stuff out from

604
00:24:41,690 --> 00:24:45,080
there and it's all generated from their

605
00:24:43,520 --> 00:24:47,120
code as opposed to actually having to

606
00:24:45,080 --> 00:24:51,470
write to 800 lines of Python or so that

607
00:24:47,120 --> 00:24:53,179
evil mob had written before so that's my

608
00:24:51,470 --> 00:24:56,200
time thank you everybody I appreciate it

609
00:24:53,180 --> 00:24:56,200
especially showing up so early

