1
00:00:10,790 --> 00:00:20,698
okay I guess we can get started ten so I

2
00:00:19,529 --> 00:00:23,009
want to thank everyone for showing up

3
00:00:20,699 --> 00:00:24,779
today today's presentation Indian

4
00:00:23,010 --> 00:00:28,170
security examining inner chip

5
00:00:24,779 --> 00:00:29,698
communication so a little bit about me

6
00:00:28,170 --> 00:00:32,279
if you don't know me my name is Darryl

7
00:00:29,699 --> 00:00:35,100
Hyland I'm the research lead for IOT

8
00:00:32,279 --> 00:00:37,320
technology at rapid7 and when I use the

9
00:00:35,100 --> 00:00:39,120
term IOT it's just not consumer stuff

10
00:00:37,320 --> 00:00:42,300
we're talking about everything from

11
00:00:39,120 --> 00:00:44,370
industrial to enterprise to consumer to

12
00:00:42,300 --> 00:00:46,620
transportation to medical so it kind of

13
00:00:44,370 --> 00:00:50,629
covers all of those different areas so

14
00:00:46,620 --> 00:00:53,870
I've been an IT for 25 plus years and

15
00:00:50,629 --> 00:00:56,989
last 15 years specifically in security

16
00:00:53,870 --> 00:01:01,230
came over rapid Evans pentesting bouts

17
00:00:56,989 --> 00:01:03,780
six years ago as pentester principal

18
00:01:01,230 --> 00:01:04,798
consultant on the team and then along

19
00:01:03,780 --> 00:01:07,439
the road they offered me the opportunity

20
00:01:04,799 --> 00:01:10,229
to come over into research focusing on

21
00:01:07,439 --> 00:01:12,689
IOT technology and that was a lot of fun

22
00:01:10,229 --> 00:01:14,039
the funny part was is when they offer me

23
00:01:12,689 --> 00:01:17,669
the position I didn't even know what the

24
00:01:14,040 --> 00:01:18,060
hell I 80 was so I'm like hell yeah I'll

25
00:01:17,670 --> 00:01:20,880
take it

26
00:01:18,060 --> 00:01:22,830
what am I supposed to do so that was

27
00:01:20,880 --> 00:01:24,929
kind of fun journey over the last number

28
00:01:22,830 --> 00:01:27,030
of years I've been to all nine Derby

29
00:01:24,930 --> 00:01:29,610
cons anyone else here all nine Derby

30
00:01:27,030 --> 00:01:31,650
cons outstanding and I've had the

31
00:01:29,610 --> 00:01:33,659
privilege of speaking at this is my

32
00:01:31,650 --> 00:01:36,329
seventh time speaking here at Derby kind

33
00:01:33,659 --> 00:01:39,030
and it's been a blast sad that it's the

34
00:01:36,329 --> 00:01:43,589
last year but hopefully we're going out

35
00:01:39,030 --> 00:01:46,049
with a bang so in this particular

36
00:01:43,590 --> 00:01:50,220
research project as I showed on slide

37
00:01:46,049 --> 00:01:53,040
one lower left-hand corner part one this

38
00:01:50,220 --> 00:01:54,450
is an ongoing research project in this

39
00:01:53,040 --> 00:01:55,979
project and what we're going to talk

40
00:01:54,450 --> 00:01:58,170
about today I'm not going to talk about

41
00:01:55,979 --> 00:02:00,090
any specific vulnerabilities there's no

42
00:01:58,170 --> 00:02:02,310
published vulnerabilities right now so

43
00:02:00,090 --> 00:02:04,170
we're going to talk about process some

44
00:02:02,310 --> 00:02:06,810
of the things I've done what the endgame

45
00:02:04,170 --> 00:02:08,640
is what we expect to accomplish in the

46
00:02:06,810 --> 00:02:09,030
long haul and how we're going to move

47
00:02:08,639 --> 00:02:11,609
forward

48
00:02:09,030 --> 00:02:13,230
in the future so I expect this thing is

49
00:02:11,610 --> 00:02:14,760
gonna follow three parts which we'll

50
00:02:13,230 --> 00:02:16,500
kind of use in the closeout where we're

51
00:02:14,760 --> 00:02:18,780
gonna take it next and where we go after

52
00:02:16,500 --> 00:02:19,830
that probably more than three parts but

53
00:02:18,780 --> 00:02:23,340
we're gonna start with the first three

54
00:02:19,830 --> 00:02:26,520
parts so why what's the purpose of doing

55
00:02:23,340 --> 00:02:29,520
this type of research from an end-to-end

56
00:02:26,520 --> 00:02:32,819
security understanding I really want to

57
00:02:29,520 --> 00:02:34,830
know how the functionality works so we

58
00:02:32,819 --> 00:02:37,380
want to gather information about how the

59
00:02:34,830 --> 00:02:39,480
devices are working and functioning we

60
00:02:37,380 --> 00:02:41,790
want to understand in the end security

61
00:02:39,480 --> 00:02:44,850
because often were challenged with if

62
00:02:41,790 --> 00:02:47,549
I'm looking at an IOT technology and I

63
00:02:44,850 --> 00:02:50,070
know the cloud side of it is secure

64
00:02:47,550 --> 00:02:51,600
they're encrypting it properly and let's

65
00:02:50,070 --> 00:02:53,370
say they're communicating over Bluetooth

66
00:02:51,600 --> 00:02:55,319
SIG B's z-wave and they're doing it

67
00:02:53,370 --> 00:02:58,890
right and that's secure how do I know

68
00:02:55,319 --> 00:03:01,140
what the Indian security looks like well

69
00:02:58,890 --> 00:03:03,359
we dive into inner chip communication we

70
00:03:01,140 --> 00:03:05,069
start looking at what's taking place at

71
00:03:03,360 --> 00:03:07,260
that point because all that encryptions

72
00:03:05,069 --> 00:03:09,390
typically stripped away and now we can

73
00:03:07,260 --> 00:03:11,220
see that raw data transactions that are

74
00:03:09,390 --> 00:03:12,869
actually going through the system and

75
00:03:11,220 --> 00:03:16,739
really get an understanding of the

76
00:03:12,870 --> 00:03:19,950
ecosystems so why I want to identify new

77
00:03:16,739 --> 00:03:21,690
attack vectors what we can find out by

78
00:03:19,950 --> 00:03:24,179
looking at internship communication

79
00:03:21,690 --> 00:03:27,209
around Indian security and can I discern

80
00:03:24,180 --> 00:03:29,340
information that I can pull out and take

81
00:03:27,209 --> 00:03:32,250
it externally and carry attacks against

82
00:03:29,340 --> 00:03:33,390
the device vulnerability identification

83
00:03:32,250 --> 00:03:35,040
obviously we want to find

84
00:03:33,390 --> 00:03:37,320
vulnerabilities so we can make products

85
00:03:35,040 --> 00:03:39,209
better and more secure and then

86
00:03:37,320 --> 00:03:40,380
weaponizing the product which I'll talk

87
00:03:39,209 --> 00:03:43,350
about a little more during this

88
00:03:40,380 --> 00:03:45,060
presentation it's the idea of if I'm

89
00:03:43,350 --> 00:03:47,579
looking at bridging technology for

90
00:03:45,060 --> 00:03:51,209
unravel protocols which is the focus can

91
00:03:47,579 --> 00:03:53,579
I take that bridge device and do stuff

92
00:03:51,209 --> 00:03:57,060
to it I can turn it into a weapon where

93
00:03:53,579 --> 00:03:57,989
I can use to tack other end devices so

94
00:03:57,060 --> 00:04:01,920
that's one of the things we're working

95
00:03:57,989 --> 00:04:04,500
on so the target focus IOT technology

96
00:04:01,920 --> 00:04:07,798
obviously we're focusing on non-routable

97
00:04:04,500 --> 00:04:09,720
protocols an example you have Bluetooth

98
00:04:07,799 --> 00:04:12,600
Low Energy which is very common in IOT

99
00:04:09,720 --> 00:04:14,040
technology for it to be internet aware

100
00:04:12,600 --> 00:04:15,810
you have to have some kind of bridging

101
00:04:14,040 --> 00:04:17,608
device this is where we're look

102
00:04:15,810 --> 00:04:19,680
at the internship communication to

103
00:04:17,608 --> 00:04:20,909
gather that detail where all the

104
00:04:19,680 --> 00:04:22,710
encryptions stripped away and we're

105
00:04:20,910 --> 00:04:27,630
looking at the raw communications that's

106
00:04:22,710 --> 00:04:29,250
going to the end device to control it so

107
00:04:27,630 --> 00:04:31,020
when we're looking at this this is kind

108
00:04:29,250 --> 00:04:32,910
of the three typical models that I see

109
00:04:31,020 --> 00:04:35,669
the bridging technology laid out for

110
00:04:32,910 --> 00:04:37,350
chip functionality we have like in a

111
00:04:35,669 --> 00:04:40,380
particular presentation we're focused on

112
00:04:37,350 --> 00:04:43,500
Bluetooth is part one phase and we have

113
00:04:40,380 --> 00:04:47,580
the main CPU and then we have a Wi-Fi

114
00:04:43,500 --> 00:04:49,169
MCU or a Wi-Fi main Wi-Fi MCU as in this

115
00:04:47,580 --> 00:04:51,599
one right here so this is a typical

116
00:04:49,169 --> 00:04:54,450
three I've seen so far now I may come

117
00:04:51,600 --> 00:04:56,220
across other designs for circuit designs

118
00:04:54,450 --> 00:04:58,469
that will break this down and may maybe

119
00:04:56,220 --> 00:05:00,060
add other models to it but this is

120
00:04:58,470 --> 00:05:02,250
typically what I've seen so far and I've

121
00:05:00,060 --> 00:05:03,600
looked at three devices I have three

122
00:05:02,250 --> 00:05:05,160
more in the project that I'm going to

123
00:05:03,600 --> 00:05:07,169
look at so we can get a good

124
00:05:05,160 --> 00:05:13,110
understanding across multiple products

125
00:05:07,169 --> 00:05:15,000
of what we're gonna tip ik Lisi so

126
00:05:13,110 --> 00:05:17,190
getting started so the first start is

127
00:05:15,000 --> 00:05:19,380
okay we need to open up the device we

128
00:05:17,190 --> 00:05:22,590
need to identify where we can get access

129
00:05:19,380 --> 00:05:24,360
to that communication so the ways I

130
00:05:22,590 --> 00:05:26,460
typically do it is visual you know I can

131
00:05:24,360 --> 00:05:29,460
easily look at a device and trace runs I

132
00:05:26,460 --> 00:05:31,620
can use a multimeter to trace runs one

133
00:05:29,460 --> 00:05:34,140
of the other cool things is Damien did a

134
00:05:31,620 --> 00:05:36,030
presentation at hack in Paris where he

135
00:05:34,140 --> 00:05:39,000
talked about similar stuff where he did

136
00:05:36,030 --> 00:05:40,770
photo overlays so he took a photo of the

137
00:05:39,000 --> 00:05:43,169
front side road over the bottom side

138
00:05:40,770 --> 00:05:45,330
laid him over top of each other lined it

139
00:05:43,169 --> 00:05:48,780
all up and was able to track runs and

140
00:05:45,330 --> 00:05:51,990
vias through the board really handy did

141
00:05:48,780 --> 00:05:53,219
a good discussion around doing that so

142
00:05:51,990 --> 00:05:54,210
it's something to think about and then

143
00:05:53,220 --> 00:05:56,760
x-rays if you're dealing with

144
00:05:54,210 --> 00:05:58,919
multi-layer boards x-rays maybe a point

145
00:05:56,760 --> 00:06:00,479
that you can do to get a good

146
00:05:58,919 --> 00:06:04,830
understanding of how the circuits are

147
00:06:00,479 --> 00:06:07,740
laid out on the board so the first

148
00:06:04,830 --> 00:06:10,190
example device that we're talking about

149
00:06:07,740 --> 00:06:13,169
today happen to be a Hickory smart lock

150
00:06:10,190 --> 00:06:15,090
and right here we have the bridge device

151
00:06:13,169 --> 00:06:18,450
that's actually used to control this

152
00:06:15,090 --> 00:06:21,750
lock so and it happened to be this

153
00:06:18,450 --> 00:06:24,180
particular tile layout had a ble MCU it

154
00:06:21,750 --> 00:06:26,190
had a main C MCU and then had the

155
00:06:24,180 --> 00:06:29,000
ethernet circuitry coming in that fed

156
00:06:26,190 --> 00:06:31,460
the main MCU so it gives us

157
00:06:29,000 --> 00:06:33,740
main one main key point to internship

158
00:06:31,460 --> 00:06:35,150
communication is mainly this one so if

159
00:06:33,740 --> 00:06:36,500
you're looking at looking at this one

160
00:06:35,150 --> 00:06:39,109
it's a little more difficult because it

161
00:06:36,500 --> 00:06:40,790
comes in on two channels is Ethernet and

162
00:06:39,110 --> 00:06:42,050
these usually run in each channel of 50

163
00:06:40,790 --> 00:06:44,420
megahertz you've got to put the data

164
00:06:42,050 --> 00:06:46,400
back together so level complexity there

165
00:06:44,420 --> 00:06:48,170
you need to consider in cases like this

166
00:06:46,400 --> 00:06:51,380
but typically we can look at the

167
00:06:48,170 --> 00:06:53,920
communication between these two and when

168
00:06:51,380 --> 00:06:56,390
you're dealing with Bluetooth low-energy

169
00:06:53,920 --> 00:06:58,580
devices the communication to them is

170
00:06:56,390 --> 00:07:00,530
going to be York thus making this way

171
00:06:58,580 --> 00:07:03,349
much more simple as our first model to

172
00:07:00,530 --> 00:07:05,469
start looking at and you're able to tap

173
00:07:03,350 --> 00:07:08,690
into that and actually capture all of

174
00:07:05,470 --> 00:07:11,990
the UART communication between the chips

175
00:07:08,690 --> 00:07:14,810
and then start doing various analysis so

176
00:07:11,990 --> 00:07:16,640
here happens to be the board this

177
00:07:14,810 --> 00:07:19,610
particular case here's the main MCU

178
00:07:16,640 --> 00:07:22,370
here's the ethernet circuitry and here's

179
00:07:19,610 --> 00:07:23,660
the Bluetooth module so the first thing

180
00:07:22,370 --> 00:07:26,420
is you know you get data sheets you

181
00:07:23,660 --> 00:07:27,980
identify how this is all pinned down we

182
00:07:26,420 --> 00:07:30,530
try to figure out the runs where it goes

183
00:07:27,980 --> 00:07:32,120
over to here and it does tap into some

184
00:07:30,530 --> 00:07:33,530
GPIO s have been configured for

185
00:07:32,120 --> 00:07:37,040
Bluetooth Low Energy as part of that

186
00:07:33,530 --> 00:07:40,250
communication so in here's have actually

187
00:07:37,040 --> 00:07:43,460
me tapping into it so we have you know

188
00:07:40,250 --> 00:07:46,730
this is connections up for the Bluetooth

189
00:07:43,460 --> 00:07:48,320
you are Trant transmit and receive and

190
00:07:46,730 --> 00:07:50,770
the connections over here and the reason

191
00:07:48,320 --> 00:07:54,169
why I have two connections over here is

192
00:07:50,770 --> 00:07:56,299
the connections between these two do not

193
00:07:54,169 --> 00:07:58,219
have any kind of coupling between them

194
00:07:56,300 --> 00:08:00,080
they're straight connected over and the

195
00:07:58,220 --> 00:08:02,690
thing I found out so far on straight

196
00:08:00,080 --> 00:08:06,560
connected ones if you tap into this if I

197
00:08:02,690 --> 00:08:09,740
wanted to trap inject data back en it

198
00:08:06,560 --> 00:08:11,570
would not accept it even on UART but by

199
00:08:09,740 --> 00:08:13,370
cutting the runs which where the green

200
00:08:11,570 --> 00:08:15,590
marks are we were able to cut the runs

201
00:08:13,370 --> 00:08:17,840
and reroute all the communication

202
00:08:15,590 --> 00:08:22,250
through a separate device where we can

203
00:08:17,840 --> 00:08:24,049
tap in with FTD eyes or logic analyzers

204
00:08:22,250 --> 00:08:25,850
and things like that easily and it also

205
00:08:24,050 --> 00:08:30,140
gave us this ability and you'll see the

206
00:08:25,850 --> 00:08:31,730
breakout here so I built this small kind

207
00:08:30,140 --> 00:08:34,098
of breakout and it gave me the ability

208
00:08:31,730 --> 00:08:36,560
to tap in on the Bluetooth side and this

209
00:08:34,099 --> 00:08:37,910
side over here and ability to open and

210
00:08:36,559 --> 00:08:40,338
close the circuits with a quick little

211
00:08:37,909 --> 00:08:43,179
switch if I wanted to inject data into

212
00:08:40,339 --> 00:08:43,180
the data stream

213
00:08:43,870 --> 00:08:49,300
and here happens to be the rig with

214
00:08:46,430 --> 00:08:52,300
everything tapped in and I got a couple

215
00:08:49,300 --> 00:08:54,229
Chikara sucked up to communicate with

216
00:08:52,300 --> 00:08:55,699
eventually end up with four different

217
00:08:54,230 --> 00:08:57,260
chakras because I tapped into various

218
00:08:55,700 --> 00:08:59,300
other UART communication on the board

219
00:08:57,260 --> 00:09:00,860
together other pieces of data which will

220
00:08:59,300 --> 00:09:02,510
show some of that information gathered

221
00:09:00,860 --> 00:09:04,940
from that and obviously alleged logic

222
00:09:02,510 --> 00:09:06,140
analyzer always like a logic analyzers

223
00:09:04,940 --> 00:09:07,820
the first thing to happen and the

224
00:09:06,140 --> 00:09:10,370
circuits gives me a bility to quickly

225
00:09:07,820 --> 00:09:12,170
identify hey is it really UART you know

226
00:09:10,370 --> 00:09:14,300
what is the bald rate validate all that

227
00:09:12,170 --> 00:09:17,000
information so when I start setting up

228
00:09:14,300 --> 00:09:20,420
all of the serial devices to communicate

229
00:09:17,000 --> 00:09:22,760
and capture the data it becomes much

230
00:09:20,420 --> 00:09:25,160
easier and versus trying to do it the

231
00:09:22,760 --> 00:09:27,980
other way so as typically how I hook

232
00:09:25,160 --> 00:09:30,439
everything up so let's look at some of

233
00:09:27,980 --> 00:09:34,040
the data we capture and look at some of

234
00:09:30,440 --> 00:09:38,450
the concepts or thought process as I

235
00:09:34,040 --> 00:09:40,730
kind of work through this so here's the

236
00:09:38,450 --> 00:09:43,760
first communications that we captured

237
00:09:40,730 --> 00:09:45,710
and the command structure that came

238
00:09:43,760 --> 00:09:48,130
through up here and this is after we've

239
00:09:45,710 --> 00:09:50,300
kind of decode it and broke it all down

240
00:09:48,130 --> 00:09:51,830
now this opened up some interesting

241
00:09:50,300 --> 00:09:54,380
things because I'm dealing with a

242
00:09:51,830 --> 00:09:55,850
Bluetooth low-energy device I assumed

243
00:09:54,380 --> 00:09:57,950
the communication coming through this

244
00:09:55,850 --> 00:10:00,470
device would be Bluetooth Low Energy

245
00:09:57,950 --> 00:10:02,660
when I controlled the device locally

246
00:10:00,470 --> 00:10:05,000
with my mobile application it was

247
00:10:02,660 --> 00:10:07,670
Bluetooth but when I control when I

248
00:10:05,000 --> 00:10:09,920
start looking at this data I couldn't

249
00:10:07,670 --> 00:10:11,839
find a MAC address to identify the end

250
00:10:09,920 --> 00:10:15,979
Bluetooth device which you often will

251
00:10:11,840 --> 00:10:17,900
see in some form what I did see was this

252
00:10:15,980 --> 00:10:22,460
block of data right here which turned

253
00:10:17,900 --> 00:10:26,150
out to be ant protocol so anyone ever

254
00:10:22,460 --> 00:10:30,090
dealt with ant protocol the same thing I

255
00:10:26,150 --> 00:10:32,459
had it was like WTF what the hell's ant

256
00:10:30,090 --> 00:10:35,250
so I went out and there's this is a

257
00:10:32,460 --> 00:10:36,840
proprietary protocol but there's a lot

258
00:10:35,250 --> 00:10:38,670
of good information out there on it

259
00:10:36,840 --> 00:10:40,230
now I wasn't going to go in and spend

260
00:10:38,670 --> 00:10:40,949
all my time trying to figure out the amp

261
00:10:40,230 --> 00:10:42,660
protocol

262
00:10:40,950 --> 00:10:45,150
I was morally concerned with inter chip

263
00:10:42,660 --> 00:10:47,310
communication but I did find out a

264
00:10:45,150 --> 00:10:48,750
couple major things it allows multiple

265
00:10:47,310 --> 00:10:50,489
pairing as an example

266
00:10:48,750 --> 00:10:52,770
unlike Bluetooth Low Energy well only

267
00:10:50,490 --> 00:10:54,380
one device can pair multiple devices

268
00:10:52,770 --> 00:10:56,699
compared to an ant

269
00:10:54,380 --> 00:11:01,110
the other interesting thing is ant

270
00:10:56,700 --> 00:11:04,830
protocol is inherently used in devices

271
00:11:01,110 --> 00:11:06,630
like heart monitors and trous tracker

272
00:11:04,830 --> 00:11:09,420
devices and things like that sporting

273
00:11:06,630 --> 00:11:13,500
equipment tile IOT and I'm thinking

274
00:11:09,420 --> 00:11:17,910
again what WTF why the hell is this on a

275
00:11:13,500 --> 00:11:19,740
smart lock for a house but the actual

276
00:11:17,910 --> 00:11:22,589
Bluetooth Low Energy device they were

277
00:11:19,740 --> 00:11:24,210
used and was an NRF the wording chip and

278
00:11:22,590 --> 00:11:25,950
they had the both capability of

279
00:11:24,210 --> 00:11:28,500
Bluetooth Low Energy and ant built into

280
00:11:25,950 --> 00:11:31,290
all of them I just had never seen ant

281
00:11:28,500 --> 00:11:33,450
actually use it has the ability to pair

282
00:11:31,290 --> 00:11:36,270
multiple ways which is kind of very

283
00:11:33,450 --> 00:11:38,820
unique unlike Bluetooth Low Energy

284
00:11:36,270 --> 00:11:41,069
they got list 5 but it turns out to be 6

285
00:11:38,820 --> 00:11:43,620
so we have everything from inclusion

286
00:11:41,070 --> 00:11:44,970
exclusion settings white blacklist the

287
00:11:43,620 --> 00:11:48,060
difference between white blacklist and

288
00:11:44,970 --> 00:11:50,220
exclusion inclusion is some encryption

289
00:11:48,060 --> 00:11:53,339
capability functions associated with

290
00:11:50,220 --> 00:11:55,200
that proximity search within range

291
00:11:53,340 --> 00:11:57,120
identified devices within this range

292
00:11:55,200 --> 00:11:59,730
power levels you'll connect outside this

293
00:11:57,120 --> 00:12:02,520
we won't connect a wild card connect

294
00:11:59,730 --> 00:12:04,320
anything for the most part that goes

295
00:12:02,520 --> 00:12:06,000
both ways whether it's a transmitter or

296
00:12:04,320 --> 00:12:08,190
receiver or one could be wildcard one

297
00:12:06,000 --> 00:12:09,690
the AA or not it won't connect and less

298
00:12:08,190 --> 00:12:11,070
both are more wildcard or the one has

299
00:12:09,690 --> 00:12:13,260
the connection data in it for that

300
00:12:11,070 --> 00:12:15,290
particular device is this weird master

301
00:12:13,260 --> 00:12:17,670
slave pairing which is very similar to

302
00:12:15,290 --> 00:12:19,290
standard ble and the other one was a

303
00:12:17,670 --> 00:12:21,689
broadcast there was a broadcast traffic

304
00:12:19,290 --> 00:12:23,370
so it broadcast all of its information

305
00:12:21,690 --> 00:12:24,960
and it purely broadcast don't typically

306
00:12:23,370 --> 00:12:27,360
receive and you can capture the data and

307
00:12:24,960 --> 00:12:29,540
receive it all that way so that's all

308
00:12:27,360 --> 00:12:31,950
we're gonna cover oh man

309
00:12:29,540 --> 00:12:33,930
coming back over here now that we had

310
00:12:31,950 --> 00:12:36,900
ant protocol start looking at this whole

311
00:12:33,930 --> 00:12:39,060
thing ant does not use a typical MAC

312
00:12:36,900 --> 00:12:42,270
address it uses an address structure

313
00:12:39,060 --> 00:12:43,560
like this so instantly I was able to

314
00:12:42,270 --> 00:12:44,730
hey we're communicating with aunt

315
00:12:43,560 --> 00:12:47,010
protocol gives me a little more

316
00:12:44,730 --> 00:12:48,690
information about this decode we also

317
00:12:47,010 --> 00:12:53,189
come down and we have things like the

318
00:12:48,690 --> 00:12:56,220
command structure to close the lock zero

319
00:12:53,190 --> 00:12:59,190
one open lock fairly straightforward we

320
00:12:56,220 --> 00:13:01,620
come after that and we have the key have

321
00:12:59,190 --> 00:13:04,350
it identify how this Keys drift it's

322
00:13:01,620 --> 00:13:05,700
probably done off the clout and based on

323
00:13:04,350 --> 00:13:07,290
some information we're actually going to

324
00:13:05,700 --> 00:13:10,530
look at here I guess some running a

325
00:13:07,290 --> 00:13:12,980
little fast and I you just slow down and

326
00:13:10,530 --> 00:13:15,480
then the checksum which happened to be

327
00:13:12,980 --> 00:13:18,300
two's complement a bit to calm

328
00:13:15,480 --> 00:13:20,010
complement checksum for validating his

329
00:13:18,300 --> 00:13:22,170
data and we went through we tried

330
00:13:20,010 --> 00:13:25,020
fuzzing things in this data and it was

331
00:13:22,170 --> 00:13:27,360
interesting because this timing sequence

332
00:13:25,020 --> 00:13:30,630
you would think if I change the timing

333
00:13:27,360 --> 00:13:33,980
sequence on this an update to CRC it

334
00:13:30,630 --> 00:13:36,480
would work it did not any alterations to

335
00:13:33,980 --> 00:13:40,080
everything outside of this obviously you

336
00:13:36,480 --> 00:13:42,000
change the device identifier for and

337
00:13:40,080 --> 00:13:45,090
it's not going to work so I was never

338
00:13:42,000 --> 00:13:47,040
able to get this to actually to work by

339
00:13:45,090 --> 00:13:49,320
making any kind of modifications to some

340
00:13:47,040 --> 00:13:50,610
of the timing structure so it opens up

341
00:13:49,320 --> 00:13:52,770
some more things we're gonna circle back

342
00:13:50,610 --> 00:13:54,390
on this product and take another look

343
00:13:52,770 --> 00:13:56,520
because I've learned more as I would on

344
00:13:54,390 --> 00:13:58,710
to some other devices so it gives us a

345
00:13:56,520 --> 00:14:00,600
chance circle back but we quickly are

346
00:13:58,710 --> 00:14:02,580
able to identify you know this entire

347
00:14:00,600 --> 00:14:05,640
structure and all the pieces do some

348
00:14:02,580 --> 00:14:09,090
just quick basic analysis which tells us

349
00:14:05,640 --> 00:14:11,310
a lot now that we have the key you know

350
00:14:09,090 --> 00:14:13,890
we can work on how's that key drive can

351
00:14:11,310 --> 00:14:18,479
that key be replayed what's the impact

352
00:14:13,890 --> 00:14:20,490
of that type of stuff so I also was able

353
00:14:18,480 --> 00:14:22,860
to connect to the Wi-Fi side on this

354
00:14:20,490 --> 00:14:26,040
device or the Ethernet side and it was

355
00:14:22,860 --> 00:14:29,910
not encrypted and was used at mqt MQTT

356
00:14:26,040 --> 00:14:32,310
but the data within the mqtt packets was

357
00:14:29,910 --> 00:14:33,689
encrypted so we had this blob of data

358
00:14:32,310 --> 00:14:37,829
coming through that was basically

359
00:14:33,690 --> 00:14:40,290
encrypted or encoded in some fashion the

360
00:14:37,830 --> 00:14:42,870
nice thing is the main processor on this

361
00:14:40,290 --> 00:14:44,819
device had a UART console capability on

362
00:14:42,870 --> 00:14:46,920
it and if anyone knows about the

363
00:14:44,820 --> 00:14:49,680
hardware tapping into those is very

364
00:14:46,920 --> 00:14:53,610
useful for information all the packets

365
00:14:49,680 --> 00:14:54,989
coming over MQTT were actually decoded

366
00:14:53,610 --> 00:14:59,250
and dumped to the screen

367
00:14:54,990 --> 00:15:02,040
given us more blocks of data so in this

368
00:14:59,250 --> 00:15:04,950
case we had the key that we quickly

369
00:15:02,040 --> 00:15:06,329
identified here it's tagged as a key

370
00:15:04,950 --> 00:15:08,370
makes it real simple

371
00:15:06,330 --> 00:15:15,390
does this equate to the key we showed on

372
00:15:08,370 --> 00:15:19,140
the other side there we go

373
00:15:15,390 --> 00:15:22,620
so it was base 64 so we just run a

374
00:15:19,140 --> 00:15:25,050
command echo that base64 decode it hex

375
00:15:22,620 --> 00:15:27,750
dump it and we compare it to the key and

376
00:15:25,050 --> 00:15:29,819
it is a direct match so we know there's

377
00:15:27,750 --> 00:15:31,260
no alterations to the key so the keys

378
00:15:29,820 --> 00:15:33,240
coming from the cloud so we have that

379
00:15:31,260 --> 00:15:36,149
information so there's no breakdown in

380
00:15:33,240 --> 00:15:38,430
the end of skin insecurity at that point

381
00:15:36,149 --> 00:15:40,410
we end up with a node structure it's

382
00:15:38,430 --> 00:15:42,479
coming from the cloud it's ending up on

383
00:15:40,410 --> 00:15:44,189
the device going through the bridge we

384
00:15:42,480 --> 00:15:46,649
can identify all the core pieces of the

385
00:15:44,190 --> 00:15:49,170
communication we've identified that this

386
00:15:46,649 --> 00:15:51,089
is the key structure gives us a chance

387
00:15:49,170 --> 00:15:53,219
to go back and say hey you know how's

388
00:15:51,089 --> 00:15:56,279
this key drive can we identify further

389
00:15:53,220 --> 00:16:00,450
stuff out of other methods on the cloud

390
00:15:56,279 --> 00:16:02,160
to see how it works so this kind of

391
00:16:00,450 --> 00:16:06,540
quick cover on that but a quick

392
00:16:02,160 --> 00:16:08,130
observation of this it uses ant pairing

393
00:16:06,540 --> 00:16:10,290
which is kind of interesting because we

394
00:16:08,130 --> 00:16:13,230
have a higher level of security because

395
00:16:10,290 --> 00:16:15,689
it was using the inclusive exclusive

396
00:16:13,230 --> 00:16:18,930
functionality means if the device is not

397
00:16:15,690 --> 00:16:22,079
configured directly for that ant device

398
00:16:18,930 --> 00:16:24,270
can't communicate to it now the next

399
00:16:22,079 --> 00:16:26,939
example I'm going to be talking about

400
00:16:24,270 --> 00:16:29,100
we had a devices also similar encoded

401
00:16:26,940 --> 00:16:30,720
into a specific device and we found a

402
00:16:29,100 --> 00:16:32,880
way to encode it to go to multiple

403
00:16:30,720 --> 00:16:34,500
devices which it wasn't supposed to so

404
00:16:32,880 --> 00:16:37,770
again we're gonna circle back around on

405
00:16:34,500 --> 00:16:40,200
this one here and see and what we'll do

406
00:16:37,770 --> 00:16:42,270
is we'll capture in that case with this

407
00:16:40,200 --> 00:16:44,399
moving forward we will capture the

408
00:16:42,270 --> 00:16:47,699
complete set up inter chip communication

409
00:16:44,399 --> 00:16:49,829
how is a end device lock actually paired

410
00:16:47,700 --> 00:16:51,390
up to the device which is controlled

411
00:16:49,829 --> 00:16:53,040
from the cloud now that we can decode

412
00:16:51,390 --> 00:16:55,020
all the traffic and capture it between

413
00:16:53,040 --> 00:16:58,230
the chips we'll be able to gather that

414
00:16:55,020 --> 00:17:00,329
data and possibly modify it to reprogram

415
00:16:58,230 --> 00:17:02,490
the device to be able to see other ant

416
00:17:00,329 --> 00:17:05,129
devices give it a stability to do

417
00:17:02,490 --> 00:17:06,740
further testing or further fuzzing or

418
00:17:05,130 --> 00:17:09,050
injection attacks

419
00:17:06,740 --> 00:17:11,420
and again the purpose of that as we

420
00:17:09,050 --> 00:17:15,619
think about it is can these devices be

421
00:17:11,420 --> 00:17:17,300
weaponized and the cool thing about this

422
00:17:15,619 --> 00:17:19,639
which was interesting finding when we're

423
00:17:17,300 --> 00:17:23,959
talking about Indian security is the

424
00:17:19,640 --> 00:17:27,079
fact that that key never ever expires if

425
00:17:23,959 --> 00:17:29,679
I replay that exact packet four months

426
00:17:27,079 --> 00:17:34,040
later on the inner chip communication I

427
00:17:29,679 --> 00:17:36,860
control the lock which is an interesting

428
00:17:34,040 --> 00:17:40,309
concept on end-to-end security I would

429
00:17:36,860 --> 00:17:42,678
want to see typical keys change or

430
00:17:40,309 --> 00:17:44,600
expire in some fashion because based on

431
00:17:42,679 --> 00:17:46,550
this now anywhere in that food change

432
00:17:44,600 --> 00:17:48,439
from the cloud all the way through the

433
00:17:46,550 --> 00:17:50,540
device if anyone finds a method of

434
00:17:48,440 --> 00:17:52,640
capture net key it's always going to be

435
00:17:50,540 --> 00:17:59,620
valid and always have the ability to

436
00:17:52,640 --> 00:17:59,620
control that lock so example number two

437
00:18:01,210 --> 00:18:09,370
talking to you damn fast any questions

438
00:18:06,100 --> 00:18:09,370
okay cool

439
00:18:09,400 --> 00:18:21,020
hack all things and drink all the booze

440
00:18:13,450 --> 00:18:23,780
yes sir though the time stamp had no

441
00:18:21,020 --> 00:18:28,639
bearing on it so the time stamp well if

442
00:18:23,780 --> 00:18:31,460
we come back here the the actual time

443
00:18:28,640 --> 00:18:33,860
stamp which is the blue up here like a

444
00:18:31,460 --> 00:18:36,170
setup I altered it I was thinking the

445
00:18:33,860 --> 00:18:39,409
time stamp may have played a role in

446
00:18:36,170 --> 00:18:41,120
salting the keys generation somehow that

447
00:18:39,410 --> 00:18:44,210
was my train of thought since I've I

448
00:18:41,120 --> 00:18:45,530
alter it the key doesn't work and you

449
00:18:44,210 --> 00:18:47,150
would think of time stamps should have a

450
00:18:45,530 --> 00:18:50,240
little or no bearing because most

451
00:18:47,150 --> 00:18:52,010
testing I've done it rarely does when

452
00:18:50,240 --> 00:18:53,870
the key comes through so we're thinking

453
00:18:52,010 --> 00:18:55,910
that maybe some part of salt or part of

454
00:18:53,870 --> 00:18:58,010
the process of how that Keys generated

455
00:18:55,910 --> 00:19:01,280
and that's not coming from the local

456
00:18:58,010 --> 00:19:04,129
device it apparently is coming from the

457
00:19:01,280 --> 00:19:07,870
cloud so it's something else to consider

458
00:19:04,130 --> 00:19:07,870
so a great question on that there

459
00:19:10,099 --> 00:19:15,809
the yeah like I said the key changes

460
00:19:13,469 --> 00:19:17,580
every time a packet comes through so if

461
00:19:15,809 --> 00:19:19,710
I open the clock close the lock open law

462
00:19:17,580 --> 00:19:21,149
close the lock every time that'll be

463
00:19:19,710 --> 00:19:22,649
different key because it's also a

464
00:19:21,149 --> 00:19:25,349
different time stamp on every one of

465
00:19:22,649 --> 00:19:27,899
them but once the keys generated it can

466
00:19:25,349 --> 00:19:29,249
easily be replayed but remember we're

467
00:19:27,899 --> 00:19:31,289
replaying it in the circuit so we

468
00:19:29,249 --> 00:19:33,779
already control the device the thing is

469
00:19:31,289 --> 00:19:35,849
can that key have some impact external

470
00:19:33,779 --> 00:19:37,859
if you can capture those two pieces of

471
00:19:35,849 --> 00:19:41,099
data since the key never appears to

472
00:19:37,859 --> 00:19:45,019
expire becomes a potential risk though

473
00:19:41,099 --> 00:19:45,019
someone had a question back here yes sir

474
00:19:56,980 --> 00:20:03,260
this one here because it's it's it's

475
00:20:00,710 --> 00:20:05,660
backwards each one's backwards see swip

476
00:20:03,260 --> 00:20:12,410
switch the bit order switch the bit

477
00:20:05,660 --> 00:20:15,830
order and it's sorry Det yeah it that is

478
00:20:12,410 --> 00:20:17,690
the same so we got c2 to see this is to

479
00:20:15,830 --> 00:20:20,179
see see - so it's switching the pin

480
00:20:17,690 --> 00:20:24,830
order for each one of those four bike

481
00:20:20,180 --> 00:20:26,690
groups but it is the same okay so let's

482
00:20:24,830 --> 00:20:28,189
move on the next exam the next example

483
00:20:26,690 --> 00:20:29,540
I'm not gonna mention the vendors name

484
00:20:28,190 --> 00:20:32,330
like I said we're not releasing any

485
00:20:29,540 --> 00:20:34,730
vulnerabilities this is not meant to

486
00:20:32,330 --> 00:20:38,060
discourage any of the vendors this is

487
00:20:34,730 --> 00:20:40,940
just some research around concepts and

488
00:20:38,060 --> 00:20:43,929
how we can better understand in in

489
00:20:40,940 --> 00:20:47,150
security and make products better and

490
00:20:43,930 --> 00:20:49,550
create methods and methodologies and

491
00:20:47,150 --> 00:20:52,820
potentially tools to help us do all this

492
00:20:49,550 --> 00:20:54,680
more efficiently so in this one I did a

493
00:20:52,820 --> 00:20:56,750
lock also so I want it both locks on

494
00:20:54,680 --> 00:20:59,030
this so this this was all generated in

495
00:20:56,750 --> 00:21:00,920
the last five days of four days so this

496
00:20:59,030 --> 00:21:02,240
stuff was updated all the way up until

497
00:21:00,920 --> 00:21:04,190
like two days ago

498
00:21:02,240 --> 00:21:06,380
because we started finding some really

499
00:21:04,190 --> 00:21:08,540
interesting things we started diggin so

500
00:21:06,380 --> 00:21:10,010
this was kind of fascinating as we kind

501
00:21:08,540 --> 00:21:12,710
of work through this in this particular

502
00:21:10,010 --> 00:21:16,520
case it was Wi-Fi out here so we just

503
00:21:12,710 --> 00:21:18,740
had a Wi-Fi MCU and a BL a MCU this one

504
00:21:16,520 --> 00:21:21,560
I did some various funky things so

505
00:21:18,740 --> 00:21:24,320
here's the device and we can see here on

506
00:21:21,560 --> 00:21:28,070
the Wi-Fi module which is an express F

507
00:21:24,320 --> 00:21:31,250
which I've found to not really like it

508
00:21:28,070 --> 00:21:35,600
has its own own problems and then also

509
00:21:31,250 --> 00:21:37,820
the Bluetooth low-energy device so on

510
00:21:35,600 --> 00:21:40,580
the Bluetooth low-energy device we had

511
00:21:37,820 --> 00:21:44,120
coupling resistors in here two of them

512
00:21:40,580 --> 00:21:45,560
on the transmit and receive and I found

513
00:21:44,120 --> 00:21:47,300
out with these couplings I could

514
00:21:45,560 --> 00:21:50,210
actually inject into the data stream

515
00:21:47,300 --> 00:21:52,190
without cutting the runs which kind of

516
00:21:50,210 --> 00:21:55,310
my mind I'm not a electrical engineer or

517
00:21:52,190 --> 00:21:56,900
by any means so it started me thinking

518
00:21:55,310 --> 00:21:59,210
on you know how can we build tools in

519
00:21:56,900 --> 00:22:00,800
the future to be efficient across the

520
00:21:59,210 --> 00:22:04,040
board and possibly avoid cutting two

521
00:22:00,800 --> 00:22:05,990
runs in any case but in this case here I

522
00:22:04,040 --> 00:22:08,480
was wanting to tap into this device and

523
00:22:05,990 --> 00:22:09,170
I needed to tap in appropriately because

524
00:22:08,480 --> 00:22:13,490
I found

525
00:22:09,170 --> 00:22:15,200
that if I if I ended up loading on this

526
00:22:13,490 --> 00:22:17,540
side of the resistor on the on the

527
00:22:15,200 --> 00:22:20,420
receive transmitted or transmitted if I

528
00:22:17,540 --> 00:22:23,540
load it on the Trant a receive side of

529
00:22:20,420 --> 00:22:25,730
this from the transmit that it would

530
00:22:23,540 --> 00:22:28,610
cause all communication to not function

531
00:22:25,730 --> 00:22:30,410
or fail so now I started thinking okay I

532
00:22:28,610 --> 00:22:32,060
want to tap into this a lot of it's like

533
00:22:30,410 --> 00:22:34,280
figuring out how to tap in these devices

534
00:22:32,060 --> 00:22:36,860
do it right get data off of this one

535
00:22:34,280 --> 00:22:38,720
here had no runs on this side of the

536
00:22:36,860 --> 00:22:41,120
board they all went to the other side of

537
00:22:38,720 --> 00:22:43,010
the board and I was trying to find an

538
00:22:41,120 --> 00:22:44,179
effective way to tap into this thing so

539
00:22:43,010 --> 00:22:46,070
we jumped the other side of the board

540
00:22:44,180 --> 00:22:49,070
and we had the runs over here so we can

541
00:22:46,070 --> 00:22:50,450
easily cut the runs and tap in there if

542
00:22:49,070 --> 00:22:55,040
we wanted to route it through a control

543
00:22:50,450 --> 00:22:56,810
board but I wanted to do that resistor

544
00:22:55,040 --> 00:22:57,430
was in a place that was uncomfortable

545
00:22:56,810 --> 00:23:00,200
for me

546
00:22:57,430 --> 00:23:03,640
so what I did on this side of the board

547
00:23:00,200 --> 00:23:07,520
was I cut the run like I normally do and

548
00:23:03,640 --> 00:23:09,890
then I soldered it up and then I

549
00:23:07,520 --> 00:23:11,420
transferred the load resistor to that

550
00:23:09,890 --> 00:23:13,010
side of the board so I reconfigured the

551
00:23:11,420 --> 00:23:14,930
board layout so I could better easily

552
00:23:13,010 --> 00:23:17,660
tap into it without making weird

553
00:23:14,930 --> 00:23:19,360
alterations to the other side which

554
00:23:17,660 --> 00:23:21,500
worked pretty good to a certain point

555
00:23:19,360 --> 00:23:23,060
because of the way I had it hooked up

556
00:23:21,500 --> 00:23:26,000
apparently caused some kind of load

557
00:23:23,060 --> 00:23:28,909
issues I'm just guessing on the Express

558
00:23:26,000 --> 00:23:31,580
F and I freaking killed it after like

559
00:23:28,910 --> 00:23:34,690
three hours of pumping data through it

560
00:23:31,580 --> 00:23:34,689
and power cycling it

561
00:23:40,629 --> 00:23:44,859
it end up killing the Express F the

562
00:23:43,359 --> 00:23:47,139
amazing thing is I've done a couple

563
00:23:44,859 --> 00:23:49,658
engagements dealing with expressive

564
00:23:47,139 --> 00:23:50,978
devices on boards and every freaking one

565
00:23:49,659 --> 00:23:53,709
of them I've managed to kill the

566
00:23:50,979 --> 00:23:55,059
expressive module so in this case to get

567
00:23:53,709 --> 00:23:56,379
the board back up verse in a whole

568
00:23:55,059 --> 00:23:58,570
lockstep because you can't buy the

569
00:23:56,379 --> 00:24:00,218
bridge separately I actually went out

570
00:23:58,570 --> 00:24:02,198
and bought a whole freaking box of

571
00:24:00,219 --> 00:24:03,609
expressive modules because I already

572
00:24:02,199 --> 00:24:05,229
pulled the firmware off the device I'll

573
00:24:03,609 --> 00:24:06,448
burn it on the new module and put it on

574
00:24:05,229 --> 00:24:08,829
the device to keep it running

575
00:24:06,449 --> 00:24:12,879
theoretically let's see how that works

576
00:24:08,829 --> 00:24:14,349
so here's how I hooked everything up and

577
00:24:12,879 --> 00:24:16,269
creating these little work modules like

578
00:24:14,349 --> 00:24:18,158
this I actually color-coded this one to

579
00:24:16,269 --> 00:24:19,539
make it a little easier for me so I'm

580
00:24:18,159 --> 00:24:21,309
constantly trying to better the way

581
00:24:19,539 --> 00:24:23,349
we're going to do this and I'll talk a

582
00:24:21,309 --> 00:24:25,059
little bit about what our vision is down

583
00:24:23,349 --> 00:24:27,789
the road and how we're going to build

584
00:24:25,059 --> 00:24:30,789
some tool sets around this and make this

585
00:24:27,789 --> 00:24:33,749
modular and functional so that we can

586
00:24:30,789 --> 00:24:36,190
better improve the whole testing process

587
00:24:33,749 --> 00:24:39,849
so let's look at the communication on

588
00:24:36,190 --> 00:24:43,839
this device so here is the lock being

589
00:24:39,849 --> 00:24:45,249
open and closed so this is before we

590
00:24:43,839 --> 00:24:48,279
really know what the data here is the

591
00:24:45,249 --> 00:24:50,649
data hitting the ble pretty

592
00:24:48,279 --> 00:24:52,719
straightforward simple block it's nice

593
00:24:50,649 --> 00:24:55,748
because in these particular devices it's

594
00:24:52,719 --> 00:24:58,509
not overly chat I've looked at some

595
00:24:55,749 --> 00:25:00,729
devices that it's it's like looking at a

596
00:24:58,509 --> 00:25:04,299
Microsoft box just won't shut the hell

597
00:25:00,729 --> 00:25:06,789
up in trying to get data out of those as

598
00:25:04,299 --> 00:25:08,559
a whole new complex at each to it is

599
00:25:06,789 --> 00:25:11,529
like okay what really matters and what's

600
00:25:08,559 --> 00:25:13,479
just time sinks and all kinds

601
00:25:11,529 --> 00:25:15,009
of other crazy stuff that's why I didn't

602
00:25:13,479 --> 00:25:16,569
put that device in here because it would

603
00:25:15,009 --> 00:25:19,779
be screen after screen after screen of

604
00:25:16,569 --> 00:25:23,190
like pie charts but this was a good

605
00:25:19,779 --> 00:25:25,389
example so we send the data over okay

606
00:25:23,190 --> 00:25:27,219
first thing I look for is there a MAC

607
00:25:25,389 --> 00:25:29,738
address here to identify the data or the

608
00:25:27,219 --> 00:25:32,440
device the answer is no I don't

609
00:25:29,739 --> 00:25:34,749
obviously see the MAC address here's a

610
00:25:32,440 --> 00:25:37,509
response back it contains the MAC

611
00:25:34,749 --> 00:25:40,599
address get two responses back when the

612
00:25:37,509 --> 00:25:43,029
signal hits here it sends back that it

613
00:25:40,599 --> 00:25:44,529
received the command and then it

614
00:25:43,029 --> 00:25:47,859
responds back with the current device

615
00:25:44,529 --> 00:25:49,869
status to say yeah the dice did open or

616
00:25:47,859 --> 00:25:51,689
no it's in a fail state or air state or

617
00:25:49,869 --> 00:25:56,010
something like that

618
00:25:51,690 --> 00:25:58,530
when we start tearing into this we're

619
00:25:56,010 --> 00:26:02,340
able to identify some interesting things

620
00:25:58,530 --> 00:26:04,020
it turned out that the first eight bytes

621
00:26:02,340 --> 00:26:09,270
here passed the command structure

622
00:26:04,020 --> 00:26:11,490
because in this case it was 0 1 and 0 0

623
00:26:09,270 --> 00:26:13,740
or were the two commands for open and

624
00:26:11,490 --> 00:26:15,660
closed in this particular device we

625
00:26:13,740 --> 00:26:19,650
found out that this turns out to be the

626
00:26:15,660 --> 00:26:21,840
MAC address and it's encoded and the CRC

627
00:26:19,650 --> 00:26:23,910
and I'm not an expert on all the

628
00:26:21,840 --> 00:26:26,070
freaking different ways the CRC so I'm

629
00:26:23,910 --> 00:26:27,750
trying to figure the CRC out and it

630
00:26:26,070 --> 00:26:29,760
turned out is if I just add all the

631
00:26:27,750 --> 00:26:31,920
bytes up to here and then add 1 to it

632
00:26:29,760 --> 00:26:34,050
and take the loop lower two digits

633
00:26:31,920 --> 00:26:36,810
that's the CRC so it was a little

634
00:26:34,050 --> 00:26:39,830
weirder than I like ever seen probably

635
00:26:36,810 --> 00:26:45,000
one of the more simple ones easy math

636
00:26:39,830 --> 00:26:46,770
adding but again that's how the UART

637
00:26:45,000 --> 00:26:49,920
communication flows that we're looking

638
00:26:46,770 --> 00:26:52,610
at when we're looking at this data so

639
00:26:49,920 --> 00:26:57,960
how did we figure out the MAC address

640
00:26:52,610 --> 00:27:02,629
and we did this by fuzzy what we ended

641
00:26:57,960 --> 00:27:05,010
up doing was we started by incrementing

642
00:27:02,630 --> 00:27:06,840
every one of these so I incremented

643
00:27:05,010 --> 00:27:13,500
every one of these up by one byte all

644
00:27:06,840 --> 00:27:16,470
the way across and then change the CRC

645
00:27:13,500 --> 00:27:18,330
to be correct I turns out that if I

646
00:27:16,470 --> 00:27:21,210
incremented any of these first eight up

647
00:27:18,330 --> 00:27:23,580
by one I got no responses back if I

648
00:27:21,210 --> 00:27:26,820
intermittent the other bytes up by one I

649
00:27:23,580 --> 00:27:28,740
got a response back but it was just an

650
00:27:26,820 --> 00:27:30,960
error code so nothing really happened

651
00:27:28,740 --> 00:27:34,140
and I never changed the MAC address I'm

652
00:27:30,960 --> 00:27:36,810
like what the hell so I start increment

653
00:27:34,140 --> 00:27:39,180
up by two when I incremented up by two I

654
00:27:36,810 --> 00:27:41,429
was able to start changing these MAC

655
00:27:39,180 --> 00:27:43,920
address on the device so now we've

656
00:27:41,430 --> 00:27:46,140
managed to decode down where we identify

657
00:27:43,920 --> 00:27:48,570
the MAC address and here is a sample of

658
00:27:46,140 --> 00:27:50,070
changing those give you an idea we just

659
00:27:48,570 --> 00:27:51,360
changed the you know the first bite

660
00:27:50,070 --> 00:27:53,520
second bite third fourth fifth

661
00:27:51,360 --> 00:27:56,189
incremented up by two and we can see the

662
00:27:53,520 --> 00:27:57,690
various pattern patterns a little more

663
00:27:56,190 --> 00:28:00,080
difficult there if we just changed the

664
00:27:57,690 --> 00:28:03,140
first one the patterns visually obvious

665
00:28:00,080 --> 00:28:05,600
I had and what I did was like

666
00:28:03,140 --> 00:28:08,270
okay I'm busy let's let's utilize my

667
00:28:05,600 --> 00:28:11,240
co-workers at we we haven't got the

668
00:28:08,270 --> 00:28:12,500
decode complete but I threw it out there

669
00:28:11,240 --> 00:28:15,380
because there's only a few days ago and

670
00:28:12,500 --> 00:28:20,660
said hey guys who likes puzzles

671
00:28:15,380 --> 00:28:23,030
I suck at puzzles I'm good at visual

672
00:28:20,660 --> 00:28:26,300
identifying patterns and building off

673
00:28:23,030 --> 00:28:28,490
that and I assumed this is all some

674
00:28:26,300 --> 00:28:30,830
standard programmatic algorithm that's

675
00:28:28,490 --> 00:28:33,230
used to turn the six bytes into eight

676
00:28:30,830 --> 00:28:35,780
bytes and probably not overly complex

677
00:28:33,230 --> 00:28:37,580
but looking at the pattern it was

678
00:28:35,780 --> 00:28:40,940
quickly it seemed a little complex

679
00:28:37,580 --> 00:28:45,830
because if you changed the first four

680
00:28:40,940 --> 00:28:48,110
bytes of this it would only change the

681
00:28:45,830 --> 00:28:50,389
first digit of the MAC address down the

682
00:28:48,110 --> 00:28:53,719
road the second four bytes would change

683
00:28:50,390 --> 00:28:55,310
the second digit down the road but I got

684
00:28:53,720 --> 00:28:58,310
I got an email today from one of the

685
00:28:55,310 --> 00:29:00,320
guys he goes I got the pattern and he

686
00:28:58,310 --> 00:29:03,409
kind of wrote it all up on how what he

687
00:29:00,320 --> 00:29:05,750
saw there was a couple glitches in that

688
00:29:03,410 --> 00:29:07,160
that we need to go back and resolve but

689
00:29:05,750 --> 00:29:09,290
hopefully within the next week or two

690
00:29:07,160 --> 00:29:11,270
we'll have the entire pattern which will

691
00:29:09,290 --> 00:29:14,120
give us the ability to change the MAC

692
00:29:11,270 --> 00:29:16,780
address going through the device which

693
00:29:14,120 --> 00:29:20,330
is one of the key things we want to do

694
00:29:16,780 --> 00:29:24,860
so then since I had two of these devices

695
00:29:20,330 --> 00:29:27,679
I said well let's go ahead and test how

696
00:29:24,860 --> 00:29:30,290
we can actually send data through from

697
00:29:27,680 --> 00:29:32,030
both these devices so I took data

698
00:29:30,290 --> 00:29:34,520
captured from inner chip on one bridge

699
00:29:32,030 --> 00:29:38,120
tried to play it on the other bridge it

700
00:29:34,520 --> 00:29:40,129
gave me an error code back it was like

701
00:29:38,120 --> 00:29:42,739
an 81 or 85 s kind of err code on that

702
00:29:40,130 --> 00:29:44,480
for one return so I got an error code so

703
00:29:42,740 --> 00:29:47,900
it didn't recognize it so I'm like okay

704
00:29:44,480 --> 00:29:49,970
why so what I did was I blew everything

705
00:29:47,900 --> 00:29:52,160
down and I captured all inner chip

706
00:29:49,970 --> 00:29:54,380
communication through the configuration

707
00:29:52,160 --> 00:29:58,540
of enabling the bridge and signing a

708
00:29:54,380 --> 00:30:01,580
lock to it and this is what we got here

709
00:29:58,540 --> 00:30:04,070
so we did a remove barrage from the lock

710
00:30:01,580 --> 00:30:06,980
add bridge to the lock we captured all

711
00:30:04,070 --> 00:30:10,550
the data so no matter what lock you do

712
00:30:06,980 --> 00:30:13,850
what bridge you add it's pretty much all

713
00:30:10,550 --> 00:30:16,550
the same it's a standard code string

714
00:30:13,850 --> 00:30:18,139
which is interesting so then we can

715
00:30:16,550 --> 00:30:20,750
actually tell the device to ignore the

716
00:30:18,140 --> 00:30:23,030
lock but it turns out it didn't really

717
00:30:20,750 --> 00:30:25,730
ignore the lock what I ended up figuring

718
00:30:23,030 --> 00:30:27,500
out and if you look at these ones these

719
00:30:25,730 --> 00:30:29,720
are all the same the only one different

720
00:30:27,500 --> 00:30:31,730
is this part right here which is the

721
00:30:29,720 --> 00:30:34,370
standard key that's used to turn the

722
00:30:31,730 --> 00:30:37,730
lock on and off oh one other thing I

723
00:30:34,370 --> 00:30:39,290
forgot to mention key never changes so

724
00:30:37,730 --> 00:30:43,180
if you have a lock that key coming

725
00:30:39,290 --> 00:30:46,100
through there is always the same key

726
00:30:43,180 --> 00:30:49,490
interesting observation so what I did

727
00:30:46,100 --> 00:30:51,110
was I said okay let's go ahead and we'll

728
00:30:49,490 --> 00:30:52,760
send all these commands on intership

729
00:30:51,110 --> 00:30:54,469
communication follow with all these

730
00:30:52,760 --> 00:30:56,840
commands and then give it a different

731
00:30:54,470 --> 00:30:59,420
MAC address for the other device the

732
00:30:56,840 --> 00:31:01,250
other lock and when I did that I had the

733
00:30:59,420 --> 00:31:03,380
ability to control two locks from this

734
00:31:01,250 --> 00:31:07,280
device even though it was designed to

735
00:31:03,380 --> 00:31:09,520
only pair with one lock so now the whole

736
00:31:07,280 --> 00:31:12,560
idea potentially weaponized in a device

737
00:31:09,520 --> 00:31:14,870
comes available right here because once

738
00:31:12,560 --> 00:31:18,200
I identify the MAC address in a coding

739
00:31:14,870 --> 00:31:20,719
and hopefully the encryption or the key

740
00:31:18,200 --> 00:31:23,360
mechanism which is inherently getting

741
00:31:20,720 --> 00:31:26,270
shorter here we're only up to eight

742
00:31:23,360 --> 00:31:28,969
bytes it could potentially give us the

743
00:31:26,270 --> 00:31:31,220
ability to a potentially brute-force

744
00:31:28,970 --> 00:31:33,260
or attack a device we can identify

745
00:31:31,220 --> 00:31:36,410
somebody else's device and potentially

746
00:31:33,260 --> 00:31:40,129
attack it think have a sleep oh so so

747
00:31:36,410 --> 00:31:43,460
real quick on observations so it does BL

748
00:31:40,130 --> 00:31:47,390
a pairing just nice less of a headache

749
00:31:43,460 --> 00:31:49,280
no aunt okay BL a parry is fairly

750
00:31:47,390 --> 00:31:52,190
straightforward

751
00:31:49,280 --> 00:31:55,250
it has encoded communications which

752
00:31:52,190 --> 00:31:57,050
we're in a process of hashing out so I

753
00:31:55,250 --> 00:31:58,880
say within a week we'll know the

754
00:31:57,050 --> 00:32:00,500
encoding for the MAC address and now

755
00:31:58,880 --> 00:32:06,020
we'll have control of that part of the

756
00:32:00,500 --> 00:32:08,270
communication it uses the same key so

757
00:32:06,020 --> 00:32:11,750
every key comes through to turn that

758
00:32:08,270 --> 00:32:14,900
lock on or open or close that lock it's

759
00:32:11,750 --> 00:32:16,640
the same key never changes and you can

760
00:32:14,900 --> 00:32:19,190
replay it so it doesn't seem to timeout

761
00:32:16,640 --> 00:32:20,900
either at least within a week time frame

762
00:32:19,190 --> 00:32:23,420
now I'll come back six months down the

763
00:32:20,900 --> 00:32:25,850
road try it again see well how how long

764
00:32:23,420 --> 00:32:27,210
or how how long does it run so when it

765
00:32:25,850 --> 00:32:30,539
starts doing that you know I just

766
00:32:27,210 --> 00:32:32,520
thinking are we looking at true you know

767
00:32:30,539 --> 00:32:34,440
we're looking at a key but what does

768
00:32:32,520 --> 00:32:37,129
that key consisted of what level

769
00:32:34,440 --> 00:32:39,899
complexity goes into generating that key

770
00:32:37,130 --> 00:32:43,110
and as the key space gets smaller and

771
00:32:39,899 --> 00:32:44,610
the fact that they never expire starts

772
00:32:43,110 --> 00:32:46,649
telling me a lot of things about the

773
00:32:44,610 --> 00:32:49,559
whole key mechanisms that it may not be

774
00:32:46,649 --> 00:32:51,270
as advanced as we think still a lot to

775
00:32:49,559 --> 00:32:56,460
figure out and we're still working down

776
00:32:51,270 --> 00:32:57,559
that road okay so what I want to cover

777
00:32:56,460 --> 00:33:00,539
okay

778
00:32:57,559 --> 00:33:02,129
so one other thing I didn't get in this

779
00:33:00,539 --> 00:33:04,110
slide it was the last thing I did before

780
00:33:02,130 --> 00:33:07,710
I walked out of the building out of my

781
00:33:04,110 --> 00:33:09,570
house to head here after I was able to

782
00:33:07,710 --> 00:33:12,510
control the two locks I start looking at

783
00:33:09,570 --> 00:33:15,000
this key right here and I start altering

784
00:33:12,510 --> 00:33:17,669
these to see if I can still control the

785
00:33:15,000 --> 00:33:21,779
lock open it and close it can we shorten

786
00:33:17,669 --> 00:33:24,390
a key space turned out that on this bite

787
00:33:21,779 --> 00:33:26,429
right here I can increment that up or

788
00:33:24,390 --> 00:33:28,890
down so many bytes and the lock still

789
00:33:26,429 --> 00:33:31,020
controls that's not part of the key

790
00:33:28,890 --> 00:33:33,419
something else not sure what it is yet

791
00:33:31,020 --> 00:33:35,970
it's not part of the key that means the

792
00:33:33,419 --> 00:33:39,149
key space now apparently has dropped

793
00:33:35,970 --> 00:33:42,500
down to six bytes smaller and smaller we

794
00:33:39,149 --> 00:33:45,719
get at that level there can we do

795
00:33:42,500 --> 00:33:47,880
fuzzing attacks to brute force some kind

796
00:33:45,720 --> 00:33:50,340
of key well it really comes down to how

797
00:33:47,880 --> 00:33:52,110
far more we can narrow that key one of

798
00:33:50,340 --> 00:33:54,059
the other things we want to do is since

799
00:33:52,110 --> 00:33:56,459
these keys never change and I don't have

800
00:33:54,059 --> 00:33:57,510
like 300 of these locks to get a sample

801
00:33:56,460 --> 00:34:00,299
of all the different keys for the

802
00:33:57,510 --> 00:34:01,830
different locks I only have two it'll be

803
00:34:00,299 --> 00:34:03,450
a little harder unless somebody wants to

804
00:34:01,830 --> 00:34:05,399
buy me like a hundred of these devices

805
00:34:03,450 --> 00:34:06,620
and I figure you're not going to do that

806
00:34:05,399 --> 00:34:12,989
so

807
00:34:06,620 --> 00:34:20,118
so again observations any questions on

808
00:34:12,989 --> 00:34:20,118
that yes sir

809
00:34:22,100 --> 00:34:27,810
so I haven't put a lot of time in the

810
00:34:25,260 --> 00:34:30,360
reverse engineer firmware the idea is

811
00:34:27,810 --> 00:34:32,879
and may sound strange one I'm not the

812
00:34:30,360 --> 00:34:34,800
greatest reverser so it takes me like

813
00:34:32,879 --> 00:34:38,429
five times longer than any normal person

814
00:34:34,800 --> 00:34:42,360
that does reversing but I didn't want to

815
00:34:38,429 --> 00:34:44,429
confuse I wanted all the data start off

816
00:34:42,360 --> 00:34:46,200
with making it as much analysis as I can

817
00:34:44,429 --> 00:34:48,570
based on data that I can pull from the

818
00:34:46,199 --> 00:34:50,310
circuit board directly in communications

819
00:34:48,570 --> 00:34:51,960
cuz that's what the whole thing is about

820
00:34:50,310 --> 00:34:53,040
if because there's a number of times

821
00:34:51,960 --> 00:34:55,230
you're not going to easily get the

822
00:34:53,040 --> 00:34:56,699
firmware off these devices you know you

823
00:34:55,230 --> 00:34:58,920
know without some kind of you know power

824
00:34:56,699 --> 00:35:01,470
glitching attacks or things like that so

825
00:34:58,920 --> 00:35:03,360
that adds more level complexity both of

826
00:35:01,470 --> 00:35:05,520
these devices were nice enough that they

827
00:35:03,360 --> 00:35:07,260
never bought bothered to set they no

828
00:35:05,520 --> 00:35:09,870
rebec bits Jose would get the firmware

829
00:35:07,260 --> 00:35:11,880
so I had the firmware so I've taken some

830
00:35:09,870 --> 00:35:14,460
really basic level checks in in there

831
00:35:11,880 --> 00:35:16,260
and say okay am identifying anything

832
00:35:14,460 --> 00:35:18,390
that looks like a key structure that

833
00:35:16,260 --> 00:35:21,270
could be used for decoding but I haven't

834
00:35:18,390 --> 00:35:23,129
put it up into any kind of debug or

835
00:35:21,270 --> 00:35:24,570
anything like that - holy identify that

836
00:35:23,130 --> 00:35:25,890
that'll probably be one of the things

837
00:35:24,570 --> 00:35:28,500
down the road once you get to a certain

838
00:35:25,890 --> 00:35:30,839
point and go okay I'm stumped I can't

839
00:35:28,500 --> 00:35:33,000
pull any more out of my ass let's go

840
00:35:30,840 --> 00:35:34,620
ahead and look at a little deeper look

841
00:35:33,000 --> 00:35:37,800
at the firmware and see if that reveals

842
00:35:34,620 --> 00:35:40,529
any more answers to the keying mechanism

843
00:35:37,800 --> 00:35:41,340
or the decoding of the key mechanisms so

844
00:35:40,530 --> 00:35:49,500
good question

845
00:35:41,340 --> 00:35:51,780
any other questions okay testing

846
00:35:49,500 --> 00:35:53,990
processes kind of the you know why am I

847
00:35:51,780 --> 00:35:58,170
doing this again what am I looking for

848
00:35:53,990 --> 00:36:01,680
so I want to look at replay attacks can

849
00:35:58,170 --> 00:36:03,390
I do replay attacks within this can I

850
00:36:01,680 --> 00:36:04,799
map the communication I want to map the

851
00:36:03,390 --> 00:36:06,779
communication across the board because

852
00:36:04,800 --> 00:36:08,670
some devices you may have multiple

853
00:36:06,780 --> 00:36:11,340
communication paths through various

854
00:36:08,670 --> 00:36:13,380
control devices the control mechanisms

855
00:36:11,340 --> 00:36:14,520
still coming down the same as in you

856
00:36:13,380 --> 00:36:16,770
know it's still coming from the same

857
00:36:14,520 --> 00:36:18,090
cloud to control some devices hooked to

858
00:36:16,770 --> 00:36:20,190
it but you have some more advanced

859
00:36:18,090 --> 00:36:20,610
bridges that may have Bluetooth Low

860
00:36:20,190 --> 00:36:22,770
Energy

861
00:36:20,610 --> 00:36:25,350
ZigBee z-wave so start thinking about

862
00:36:22,770 --> 00:36:27,300
that you know how do we in the future

863
00:36:25,350 --> 00:36:28,980
look at inter chip communication as it

864
00:36:27,300 --> 00:36:30,840
relates to the data that's being forward

865
00:36:28,980 --> 00:36:32,910
to those because most likely it may not

866
00:36:30,840 --> 00:36:34,739
be UART it could easily be

867
00:36:32,910 --> 00:36:37,920
I've seen everything from SPI for

868
00:36:34,739 --> 00:36:40,049
certain devices to you know

869
00:36:37,920 --> 00:36:41,819
I to see and things like that so

870
00:36:40,049 --> 00:36:44,339
something to think about can we do that

871
00:36:41,819 --> 00:36:46,288
understand the functionality validating

872
00:36:44,339 --> 00:36:48,900
Indian security what is the data flow

873
00:36:46,289 --> 00:36:50,910
and is there obviously any flaws in the

874
00:36:48,900 --> 00:36:53,670
security the one thing I'm looking for

875
00:36:50,910 --> 00:36:55,379
and I expect I'll eventually see it but

876
00:36:53,670 --> 00:36:57,119
maybe not unlock devices where they're

877
00:36:55,380 --> 00:36:58,979
actually letting the key flow all the

878
00:36:57,119 --> 00:37:01,680
way through the lock but what about lock

879
00:36:58,979 --> 00:37:02,430
devices where a lot of the control is at

880
00:37:01,680 --> 00:37:04,470
the board level

881
00:37:02,430 --> 00:37:06,749
it's designed to always work with a

882
00:37:04,470 --> 00:37:09,209
bridge well necessarily work with Mata

883
00:37:06,749 --> 00:37:11,939
bridge does the bridge do some of the

884
00:37:09,210 --> 00:37:14,160
processing and at that point failed to

885
00:37:11,940 --> 00:37:15,509
actually pass the key through process it

886
00:37:14,160 --> 00:37:17,910
here and just tell the damn thing to

887
00:37:15,509 --> 00:37:20,309
turn on or off you know and break that

888
00:37:17,910 --> 00:37:24,058
entire security from end to end so I'm

889
00:37:20,309 --> 00:37:26,430
looking for stuff like that ejection

890
00:37:24,059 --> 00:37:28,739
attacks in fuzzy you know can we

891
00:37:26,430 --> 00:37:31,259
automate some of the fuzzy so most the

892
00:37:28,739 --> 00:37:33,119
fuzzing I did was manual it was done for

893
00:37:31,259 --> 00:37:34,259
very specific reason two bytes here two

894
00:37:33,119 --> 00:37:36,329
bytes here two bytes here look for

895
00:37:34,259 --> 00:37:37,950
patterns you know am I able to alter

896
00:37:36,329 --> 00:37:39,749
anything can I still control the lock

897
00:37:37,950 --> 00:37:41,848
even I've changed certain parts of the

898
00:37:39,749 --> 00:37:44,640
code those type of things which are very

899
00:37:41,849 --> 00:37:46,229
revealing also looking at it from both

900
00:37:44,640 --> 00:37:48,450
directions I'm looking at attacking the

901
00:37:46,229 --> 00:37:50,578
end device what happens if I can go back

902
00:37:48,450 --> 00:37:51,808
to the other way what if I can go back

903
00:37:50,579 --> 00:37:53,339
to the cloud because if I can identify

904
00:37:51,809 --> 00:37:54,989
the communication go back the cloud

905
00:37:53,339 --> 00:37:58,200
because it's telling the cloud the

906
00:37:54,989 --> 00:38:00,119
status of the device okay so can I

907
00:37:58,200 --> 00:38:02,578
easily replay that data back out there

908
00:38:00,119 --> 00:38:04,410
and control it as you've seen there's no

909
00:38:02,579 --> 00:38:06,989
key mechanism for validation of

910
00:38:04,410 --> 00:38:08,940
information going back so at that point

911
00:38:06,989 --> 00:38:11,369
there's a possibility that I can

912
00:38:08,940 --> 00:38:14,069
actually change and identify a different

913
00:38:11,369 --> 00:38:15,660
state of a device in the cloud that

914
00:38:14,069 --> 00:38:18,288
could impact the overall functionality

915
00:38:15,660 --> 00:38:19,920
or security device something to consider

916
00:38:18,289 --> 00:38:22,589
fault conditions

917
00:38:19,920 --> 00:38:24,989
you know resets can I force the device

918
00:38:22,589 --> 00:38:27,239
in the reset hey if I send a key that's

919
00:38:24,989 --> 00:38:29,339
all s what the hell happens you know

920
00:38:27,239 --> 00:38:32,369
these devices have weird ways sometimes

921
00:38:29,339 --> 00:38:34,769
these devices have have keys that are

922
00:38:32,369 --> 00:38:36,119
like fixed as in you know you can go up

923
00:38:34,769 --> 00:38:38,488
to the device and you can pin a number

924
00:38:36,119 --> 00:38:41,819
in how does that play on the device when

925
00:38:38,489 --> 00:38:44,160
it comes to key or in local mode how do

926
00:38:41,819 --> 00:38:45,690
they compare can we go ahead and

927
00:38:44,160 --> 00:38:46,500
actually create a reset on the device

928
00:38:45,690 --> 00:38:48,450
that'll cause

929
00:38:46,500 --> 00:38:50,820
device to fail into some state that it

930
00:38:48,450 --> 00:38:52,980
was intended to go into so let's go

931
00:38:50,820 --> 00:38:55,860
ahead and check that can I crash the

932
00:38:52,980 --> 00:39:00,120
device basically just freakin breaking

933
00:38:55,860 --> 00:39:02,520
it all together and past research past

934
00:39:00,120 --> 00:39:04,140
research or testing I've done I've been

935
00:39:02,520 --> 00:39:06,330
able to identify information on

936
00:39:04,140 --> 00:39:09,150
internship communication that I was

937
00:39:06,330 --> 00:39:11,490
actually able to use to interact with

938
00:39:09,150 --> 00:39:13,620
the cloud services that led me the

939
00:39:11,490 --> 00:39:15,720
ability to identify all of the bridge

940
00:39:13,620 --> 00:39:18,509
devices around the world for a company

941
00:39:15,720 --> 00:39:20,609
and ability to remotely reconfigure them

942
00:39:18,510 --> 00:39:23,220
to point to a device it didn't exist

943
00:39:20,610 --> 00:39:26,130
using data that I've gathered from this

944
00:39:23,220 --> 00:39:28,560
method here basically saying hey all

945
00:39:26,130 --> 00:39:31,020
these devices point to the MAC address

946
00:39:28,560 --> 00:39:33,090
zero zero zero zero zero zero basically

947
00:39:31,020 --> 00:39:35,880
breaking the control of every one of the

948
00:39:33,090 --> 00:39:38,100
devices on the earth so there's a lot of

949
00:39:35,880 --> 00:39:39,870
potential impact there around some of

950
00:39:38,100 --> 00:39:41,850
this stuff and then again data

951
00:39:39,870 --> 00:39:44,580
enumeration what this is the data mean

952
00:39:41,850 --> 00:39:46,860
what can we construe from the data how

953
00:39:44,580 --> 00:39:51,259
can we use that data so thinking around

954
00:39:46,860 --> 00:39:55,580
those processes weaponizing technology

955
00:39:51,260 --> 00:39:58,950
how can I take my bridge device and

956
00:39:55,580 --> 00:40:01,319
control your door lock is one of the

957
00:39:58,950 --> 00:40:04,169
goals could you do this with every

958
00:40:01,320 --> 00:40:05,640
potential device out there no a lot of

959
00:40:04,170 --> 00:40:09,450
them have good security good key

960
00:40:05,640 --> 00:40:12,540
mechanisms rotating keys unpredictable

961
00:40:09,450 --> 00:40:14,370
keys but as key space gets smaller and

962
00:40:12,540 --> 00:40:16,440
smaller and now that I have as an

963
00:40:14,370 --> 00:40:18,390
example in this device the ability to

964
00:40:16,440 --> 00:40:19,620
tell it to hook to any device even

965
00:40:18,390 --> 00:40:20,640
though it was not configured to

966
00:40:19,620 --> 00:40:22,740
initially do that

967
00:40:20,640 --> 00:40:24,600
it gives me the ability to inject into

968
00:40:22,740 --> 00:40:27,779
that device particularly if I can figure

969
00:40:24,600 --> 00:40:29,819
out what the key mechanism is and if

970
00:40:27,780 --> 00:40:32,280
that's successful or the key space gets

971
00:40:29,820 --> 00:40:33,810
small enough becomes brute forcible so

972
00:40:32,280 --> 00:40:35,970
then we can basically program the whole

973
00:40:33,810 --> 00:40:37,710
thing up take the bridge device hook

974
00:40:35,970 --> 00:40:40,200
into it use the building electronics

975
00:40:37,710 --> 00:40:43,590
designed by the company to target

976
00:40:40,200 --> 00:40:46,529
somebody and brute force control of the

977
00:40:43,590 --> 00:40:53,580
end based I o T technology

978
00:40:46,530 --> 00:40:55,920
that like totally cool to me a

979
00:40:53,580 --> 00:40:58,319
future what are our plans this is the

980
00:40:55,920 --> 00:41:01,200
big part like I said this is part one

981
00:40:58,320 --> 00:41:04,109
the next thing is I'm hoping by first

982
00:41:01,200 --> 00:41:08,240
quarter first quarter I want to release

983
00:41:04,109 --> 00:41:10,980
a white paper around these methodologies

984
00:41:08,240 --> 00:41:13,890
concepts something we can all get value

985
00:41:10,980 --> 00:41:16,859
from and of course I want to point out

986
00:41:13,890 --> 00:41:18,960
the reason why I did this as a phase one

987
00:41:16,859 --> 00:41:21,690
or part one I'm looking for feedback

988
00:41:18,960 --> 00:41:24,599
from the community thoughts around this

989
00:41:21,690 --> 00:41:26,760
process can you get value from it what

990
00:41:24,599 --> 00:41:29,430
would you like to see what's the endgame

991
00:41:26,760 --> 00:41:32,010
I don't want it just to be me

992
00:41:29,430 --> 00:41:34,560
I want feedback from the community to

993
00:41:32,010 --> 00:41:35,790
help me make this move forward because

994
00:41:34,560 --> 00:41:40,290
the ultimate goals we mentioned up

995
00:41:35,790 --> 00:41:42,930
there's tools wanna produce tools kind

996
00:41:40,290 --> 00:41:45,570
of the best way to describe it how would

997
00:41:42,930 --> 00:41:47,848
you like to have a proxy style

998
00:41:45,570 --> 00:41:52,830
capability on a you art communication

999
00:41:47,849 --> 00:41:55,530
channel stability to to basically

1000
00:41:52,830 --> 00:41:57,060
capture in the flow halt it let it go

1001
00:41:55,530 --> 00:41:59,760
forward or alter it let it go forward

1002
00:41:57,060 --> 00:42:02,520
also replay can I pull it over and do

1003
00:41:59,760 --> 00:42:04,710
replay alterations replay and the third

1004
00:42:02,520 --> 00:42:06,750
one is intruder can we take like an

1005
00:42:04,710 --> 00:42:10,050
intruder like function and now we can

1006
00:42:06,750 --> 00:42:13,859
set it up regex structure on it and go

1007
00:42:10,050 --> 00:42:15,330
hey start freaking fuzzing so that's

1008
00:42:13,859 --> 00:42:19,200
kind of where we're going to tools and

1009
00:42:15,330 --> 00:42:22,230
of course I threw Metasploit out here

1010
00:42:19,200 --> 00:42:24,689
Metasploit has a hardware bridge that

1011
00:42:22,230 --> 00:42:26,550
was developed by craig smith here about

1012
00:42:24,690 --> 00:42:29,250
a year and a half ago we haven't really

1013
00:42:26,550 --> 00:42:30,780
leveraged it in any cool scale so I'm

1014
00:42:29,250 --> 00:42:32,220
starting to think you know if we build

1015
00:42:30,780 --> 00:42:34,700
this device and what I'm thinking about

1016
00:42:32,220 --> 00:42:36,750
doing from from this whole concept and

1017
00:42:34,700 --> 00:42:40,169
just to point out the person is going to

1018
00:42:36,750 --> 00:42:42,030
help me do this is Matthew keno who is

1019
00:42:40,170 --> 00:42:43,680
on the Metasploit team at rapid7 has

1020
00:42:42,030 --> 00:42:46,109
volunteered to help me with the coding

1021
00:42:43,680 --> 00:42:47,940
process I could do the coding but it'd

1022
00:42:46,109 --> 00:42:50,790
take me like six months to do something

1023
00:42:47,940 --> 00:42:52,020
he could do in like two weeks and I've

1024
00:42:50,790 --> 00:42:54,089
done that a number of times in the past

1025
00:42:52,020 --> 00:42:56,190
and I started thinking I want to move

1026
00:42:54,089 --> 00:42:58,430
this project forward I don't want to

1027
00:42:56,190 --> 00:42:59,990
spend my nights writing shitty code

1028
00:42:58,430 --> 00:43:02,299
I'd rather have somebody that's really

1029
00:42:59,990 --> 00:43:04,669
good at it and Matthews promise to step

1030
00:43:02,299 --> 00:43:06,950
in and help me so the goal is the really

1031
00:43:04,670 --> 00:43:08,930
set code mid next year because we want

1032
00:43:06,950 --> 00:43:11,660
to get enough sample research done that

1033
00:43:08,930 --> 00:43:14,480
when we go to write the code that it

1034
00:43:11,660 --> 00:43:17,180
will work in every example possible or

1035
00:43:14,480 --> 00:43:19,400
at least most of them and of course back

1036
00:43:17,180 --> 00:43:21,828
to the Metasploit module ability to tie

1037
00:43:19,400 --> 00:43:24,470
whatever we create into the hardware

1038
00:43:21,829 --> 00:43:27,440
bridge my train of concept on this tool

1039
00:43:24,470 --> 00:43:29,808
is to be able to build it out like on a

1040
00:43:27,440 --> 00:43:31,460
BeagleBone and then we'll build custom

1041
00:43:29,809 --> 00:43:32,809
shields that go on the top for

1042
00:43:31,460 --> 00:43:34,309
interconnecting everything that one of

1043
00:43:32,809 --> 00:43:36,410
the devices possibly put in load

1044
00:43:34,309 --> 00:43:37,700
capacitors on there so that we can get

1045
00:43:36,410 --> 00:43:39,618
away from cutting the runs if that's

1046
00:43:37,700 --> 00:43:41,000
possible I still have to kind of work

1047
00:43:39,619 --> 00:43:42,529
through some of the stuff on that like I

1048
00:43:41,000 --> 00:43:44,000
said I'm not an electrical engineer but

1049
00:43:42,529 --> 00:43:45,859
I will get it should be simple should be

1050
00:43:44,000 --> 00:43:48,140
able to get it figured out and basically

1051
00:43:45,859 --> 00:43:49,430
we end up with a device with a shield on

1052
00:43:48,140 --> 00:43:51,288
it like some of those two other devices

1053
00:43:49,430 --> 00:43:53,480
where you can easily just hook all the

1054
00:43:51,289 --> 00:43:56,630
connections to it and now you have full

1055
00:43:53,480 --> 00:43:58,700
control to capture fuzz replay all of

1056
00:43:56,630 --> 00:44:00,200
these capabilities within the system of

1057
00:43:58,700 --> 00:44:01,578
course if we're gonna capture it's gonna

1058
00:44:00,200 --> 00:44:02,808
have to go through the device so it's

1059
00:44:01,579 --> 00:44:06,049
probably still gonna have to cut the

1060
00:44:02,809 --> 00:44:08,000
runs that's kind of where we see this

1061
00:44:06,049 --> 00:44:10,190
moving forward in future I hope

1062
00:44:08,000 --> 00:44:12,020
everyone's interesting that idea and

1063
00:44:10,190 --> 00:44:14,539
would find some value in it I know I a

1064
00:44:12,020 --> 00:44:15,920
couple my friends are very interested in

1065
00:44:14,539 --> 00:44:18,470
getting involved in it

1066
00:44:15,920 --> 00:44:20,750
and in the end when we released this

1067
00:44:18,470 --> 00:44:22,779
will kind of make it available obviously

1068
00:44:20,750 --> 00:44:26,029
we're gonna open-source the whole thing

1069
00:44:22,779 --> 00:44:28,279
not into keeping things quiet because I

1070
00:44:26,029 --> 00:44:30,380
want it to be used by other people so we

1071
00:44:28,279 --> 00:44:31,789
can actually make it better and also get

1072
00:44:30,380 --> 00:44:34,069
feedback on it so we can add more

1073
00:44:31,789 --> 00:44:36,609
functions and features I don't know if

1074
00:44:34,069 --> 00:44:39,109
there's another slide but going forward

1075
00:44:36,609 --> 00:44:40,788
this is all you our communication which

1076
00:44:39,109 --> 00:44:42,740
is typically what's used for Bluetooth

1077
00:44:40,789 --> 00:44:44,240
Low Energy we want to be able to

1078
00:44:42,740 --> 00:44:45,910
communicate and figure out all the

1079
00:44:44,240 --> 00:44:48,770
communications that's used for ZigBee

1080
00:44:45,910 --> 00:44:50,868
z-wave and all of the standard protocols

1081
00:44:48,770 --> 00:44:52,549
that were using we're seeing are the

1082
00:44:50,869 --> 00:44:54,230
standard chips and communications we're

1083
00:44:52,549 --> 00:44:56,809
seeing to be able to get internship

1084
00:44:54,230 --> 00:44:58,849
communications available on all of those

1085
00:44:56,809 --> 00:45:01,010
different protocols where it's possible

1086
00:44:58,849 --> 00:45:02,569
I mean there may some technical issues

1087
00:45:01,010 --> 00:45:04,789
we may run into but we'll work through

1088
00:45:02,569 --> 00:45:07,400
those when we get there so I expect this

1089
00:45:04,789 --> 00:45:09,829
project to spanned out several years as

1090
00:45:07,400 --> 00:45:10,580
we add more capability and more features

1091
00:45:09,829 --> 00:45:12,970
to

1092
00:45:10,580 --> 00:45:16,240
more internship communication methods

1093
00:45:12,970 --> 00:45:19,430
and so here's my contact information

1094
00:45:16,240 --> 00:45:21,890
don't hesitate to reach out to me follow

1095
00:45:19,430 --> 00:45:24,049
me on Twitter shoot me an email

1096
00:45:21,890 --> 00:45:28,009
I think I'm full of shoot me an

1097
00:45:24,050 --> 00:45:30,560
email if you think this is brilliant

1098
00:45:28,010 --> 00:45:33,460
best thing since sliced behead shoot me

1099
00:45:30,560 --> 00:45:36,460
an email the goal is to make this happen

1100
00:45:33,460 --> 00:45:39,200
any questions at this point

1101
00:45:36,460 --> 00:45:41,410
come on I got to have some questions yes

1102
00:45:39,200 --> 00:45:41,410
sir

1103
00:45:52,220 --> 00:45:55,879
I mean there's a lot of places you know

1104
00:45:54,380 --> 00:45:57,650
when you go into a board there's a lot

1105
00:45:55,880 --> 00:45:59,540
of complexities a lot of functionalities

1106
00:45:57,650 --> 00:46:01,849
a lot of features in there so in my

1107
00:45:59,540 --> 00:46:02,210
opinion there's always other places in

1108
00:46:01,849 --> 00:46:04,910
there

1109
00:46:02,210 --> 00:46:06,980
thank you one of the things I ran into a

1110
00:46:04,910 --> 00:46:08,540
while back and wasn't necessarily

1111
00:46:06,980 --> 00:46:10,460
directly with this but it was

1112
00:46:08,540 --> 00:46:11,810
interesting how a device was actually

1113
00:46:10,460 --> 00:46:13,700
being programmed by internship

1114
00:46:11,810 --> 00:46:17,960
communication we had two processors and

1115
00:46:13,700 --> 00:46:21,308
one of them having to be MRF 49 which is

1116
00:46:17,960 --> 00:46:24,349
a multi frequency 915

1117
00:46:21,309 --> 00:46:26,990
4:33 and whatever the 800 version of it

1118
00:46:24,349 --> 00:46:28,700
is and the company had put their

1119
00:46:26,990 --> 00:46:30,470
protocol out saying what they were using

1120
00:46:28,700 --> 00:46:32,779
and how it was configured which was

1121
00:46:30,470 --> 00:46:34,759
total because when I tried to

1122
00:46:32,780 --> 00:46:37,040
do an SDR to capture this data it's like

1123
00:46:34,760 --> 00:46:38,480
none of this is working why internship

1124
00:46:37,040 --> 00:46:41,480
communication which would happen to be

1125
00:46:38,480 --> 00:46:44,140
spi hold down the data sheets captured

1126
00:46:41,480 --> 00:46:46,730
all that data and there was there was

1127
00:46:44,140 --> 00:46:48,950
1032 byte packets into the device

1128
00:46:46,730 --> 00:46:51,260
compared that to the datasheet told us

1129
00:46:48,950 --> 00:46:53,210
exactly how the MRF 49 was configured

1130
00:46:51,260 --> 00:46:55,760
and run and then we were able to build

1131
00:46:53,210 --> 00:46:58,400
the SDR to match it more appropriately

1132
00:46:55,760 --> 00:47:00,799
to interact with it so there's always

1133
00:46:58,400 --> 00:47:02,809
other places this was kind of focused on

1134
00:47:00,799 --> 00:47:04,430
Indian security it's coming from here

1135
00:47:02,809 --> 00:47:05,809
and it's ending up on this device over

1136
00:47:04,430 --> 00:47:08,328
here and this is setting in the middle

1137
00:47:05,809 --> 00:47:10,250
so very much focus on the data flowing

1138
00:47:08,329 --> 00:47:12,319
through it so if we're dealing with any

1139
00:47:10,250 --> 00:47:15,530
other protocols or communication methods

1140
00:47:12,319 --> 00:47:17,509
that it flows through to something I

1141
00:47:15,530 --> 00:47:21,160
think this plays a big role in

1142
00:47:17,510 --> 00:47:21,160
understanding that end-to-end security

1143
00:47:24,820 --> 00:47:28,990
well yeah that's interesting but and

1144
00:47:27,700 --> 00:47:30,490
there's a lot of good papers written on

1145
00:47:28,990 --> 00:47:32,379
the subject out there but there's a

1146
00:47:30,490 --> 00:47:34,629
level complexity dealing with obviously

1147
00:47:32,380 --> 00:47:36,700
with RAM and the fact that it's parallel

1148
00:47:34,630 --> 00:47:38,050
communication and if you look at the

1149
00:47:36,700 --> 00:47:39,970
board they have all these like squiggly

1150
00:47:38,050 --> 00:47:41,830
lines leaving the RAM thing because

1151
00:47:39,970 --> 00:47:43,060
there's all very time dependent so

1152
00:47:41,830 --> 00:47:46,140
everything has to hit the chip at the

1153
00:47:43,060 --> 00:47:48,400
same time so to be able to tap into that

1154
00:47:46,140 --> 00:47:50,049
you can do it I've hooked up and I've

1155
00:47:48,400 --> 00:47:51,460
seen the data come through but it's all

1156
00:47:50,050 --> 00:47:53,020
in parallels and then you got to put it

1157
00:47:51,460 --> 00:47:54,970
all back together and then all the

1158
00:47:53,020 --> 00:47:56,020
proper timing sequence so you put it put

1159
00:47:54,970 --> 00:47:57,370
it back together but there's some great

1160
00:47:56,020 --> 00:47:59,590
papers out there and I've read a number

1161
00:47:57,370 --> 00:48:01,180
of them but yeah let's not take anything

1162
00:47:59,590 --> 00:48:02,620
off the board in long haul when we're

1163
00:48:01,180 --> 00:48:04,930
really trying to understand end in

1164
00:48:02,620 --> 00:48:06,940
security and of course with that there

1165
00:48:04,930 --> 00:48:08,950
I've had you know brain storms where hey

1166
00:48:06,940 --> 00:48:10,960
hey can I pull the RAM chip put a device

1167
00:48:08,950 --> 00:48:12,220
in there pick you back at off of it

1168
00:48:10,960 --> 00:48:15,760
and be able to capture all the RAM

1169
00:48:12,220 --> 00:48:17,200
communications you know as ideas so I'm

1170
00:48:15,760 --> 00:48:19,480
always looking at methods how I can use

1171
00:48:17,200 --> 00:48:21,879
this board to discern information to

1172
00:48:19,480 --> 00:48:24,010
really understand overall security of a

1173
00:48:21,880 --> 00:48:26,110
product so that's definitely not off the

1174
00:48:24,010 --> 00:48:28,660
board maybe for this project here

1175
00:48:26,110 --> 00:48:30,190
because of the complexity but definitely

1176
00:48:28,660 --> 00:48:31,299
not off the board is a project sometime

1177
00:48:30,190 --> 00:48:33,630
in the future which I'm always thinking

1178
00:48:31,300 --> 00:48:33,630
about

1179
00:48:44,980 --> 00:48:50,490
so we're looking for a good name for it

1180
00:48:46,960 --> 00:48:53,349
and I don't want to be some variation I

1181
00:48:50,490 --> 00:48:57,959
just used that as a good example because

1182
00:48:53,349 --> 00:48:57,960
people understand burp concept of herb

1183
00:49:12,360 --> 00:49:17,430
mostly I found out on you are if based

1184
00:49:15,780 --> 00:49:19,620
on how the device is designed but most

1185
00:49:17,430 --> 00:49:21,210
the time I don't because I can come back

1186
00:49:19,620 --> 00:49:23,279
just play the same damn packet like

1187
00:49:21,210 --> 00:49:26,850
three hours later

1188
00:49:23,280 --> 00:49:29,130
as you get into spi ITC very much more

1189
00:49:26,850 --> 00:49:30,569
time dependent which could be more

1190
00:49:29,130 --> 00:49:32,610
impactful than we'll have to consider

1191
00:49:30,570 --> 00:49:33,830
any other questions I thought there was

1192
00:49:32,610 --> 00:49:37,140
one back here yes sir

1193
00:49:33,830 --> 00:49:41,009
[Music]

1194
00:49:37,140 --> 00:49:42,870
okay Craig Smith wrote a if you know

1195
00:49:41,010 --> 00:49:46,350
Craig Smith he does transportation car

1196
00:49:42,870 --> 00:49:48,480
hacking stuff he wrote a module in

1197
00:49:46,350 --> 00:49:52,680
Metasploit the give ability connect to

1198
00:49:48,480 --> 00:49:56,010
hardware used to test other hardware and

1199
00:49:52,680 --> 00:49:58,020
more idea is if we create this device is

1200
00:49:56,010 --> 00:49:58,680
basically a piece of hardware using a

1201
00:49:58,020 --> 00:50:01,020
BeagleBone

1202
00:49:58,680 --> 00:50:03,870
can we actually pair it to that and

1203
00:50:01,020 --> 00:50:06,300
maybe automate some of the testing via

1204
00:50:03,870 --> 00:50:09,859
Metasploit modules that we can create

1205
00:50:06,300 --> 00:50:09,860
that's kind of the concept

1206
00:50:10,880 --> 00:50:13,820
yeah you would hook you would hook you

1207
00:50:12,590 --> 00:50:15,830
would take your machine you would hook

1208
00:50:13,820 --> 00:50:18,080
the beaglebone up to it it would set up

1209
00:50:15,830 --> 00:50:19,670
a channel between Metasploit in which it

1210
00:50:18,080 --> 00:50:21,850
would set up a sessions almost like a

1211
00:50:19,670 --> 00:50:26,270
normal session but then it could send

1212
00:50:21,850 --> 00:50:26,500
command structures through there yep yes

1213
00:50:26,270 --> 00:50:31,309
sir

1214
00:50:26,500 --> 00:50:31,309
[Music]

1215
00:50:34,830 --> 00:50:43,380
no it was they totally drop all there

1216
00:50:38,670 --> 00:50:46,040
was no SSL pending in that case and yeah

1217
00:50:43,380 --> 00:50:50,330
which is common and then they also had

1218
00:50:46,040 --> 00:50:50,330
failures and API security

1219
00:50:53,240 --> 00:50:57,649
yeah well basically basically what I did

1220
00:50:55,460 --> 00:51:00,740
was I was able to identify

1221
00:50:57,650 --> 00:51:02,630
vulnerabilities with an API with an API

1222
00:51:00,740 --> 00:51:04,850
is originally and then be able to take

1223
00:51:02,630 --> 00:51:07,730
the replay data that I was playing with

1224
00:51:04,850 --> 00:51:09,500
to alter that because the API is were

1225
00:51:07,730 --> 00:51:10,790
failing on security because they were

1226
00:51:09,500 --> 00:51:12,410
expecting machine and machine

1227
00:51:10,790 --> 00:51:14,710
communication so there was a level of

1228
00:51:12,410 --> 00:51:14,710
trust

