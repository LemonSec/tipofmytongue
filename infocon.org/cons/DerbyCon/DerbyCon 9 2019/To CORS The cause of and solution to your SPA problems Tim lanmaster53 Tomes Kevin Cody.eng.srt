1
00:00:00,000 --> 00:00:10,320
got me okay all right good afternoon

2
00:00:06,330 --> 00:00:13,410
everybody welcome to course the cause of

3
00:00:10,320 --> 00:00:15,420
and solution to all of your SBA problems

4
00:00:13,410 --> 00:00:16,949
now we did this picture obviously

5
00:00:15,420 --> 00:00:17,698
doesn't say SBA because I'm no good at

6
00:00:16,949 --> 00:00:19,320
Photoshop

7
00:00:17,699 --> 00:00:21,449
and Dave course it wasn't available to

8
00:00:19,320 --> 00:00:26,130
fix it for me because he's my like my

9
00:00:21,449 --> 00:00:27,359
token Photoshop guy but in reality SBA

10
00:00:26,130 --> 00:00:28,919
was just used because it was short but

11
00:00:27,359 --> 00:00:30,660
really it's kind of like the cause up a

12
00:00:28,920 --> 00:00:33,270
solution to your micro-services problem

13
00:00:30,660 --> 00:00:34,800
your xhr problem your SBI problems

14
00:00:33,270 --> 00:00:36,690
anybody that's done client-side

15
00:00:34,800 --> 00:00:38,640
development it's been at some point in

16
00:00:36,690 --> 00:00:40,440
time the bane of your existence okay and

17
00:00:38,640 --> 00:00:42,750
so a lot of plies to a whole lot of

18
00:00:40,440 --> 00:00:47,360
things a course really is the cause of

19
00:00:42,750 --> 00:00:50,190
and solution to those types of problems

20
00:00:47,360 --> 00:00:51,690
now as we move through the talk when we

21
00:00:50,190 --> 00:00:53,489
get to the end I'm gonna do a demo and

22
00:00:51,690 --> 00:00:54,899
this is probably the most complex demo

23
00:00:53,489 --> 00:00:56,519
anybody's ever tried to do on stage

24
00:00:54,899 --> 00:00:58,680
because we all know how demos tend to

25
00:00:56,520 --> 00:01:00,359
fail miserably well we're using three

26
00:00:58,680 --> 00:01:03,030
different cloud platforms and nothing

27
00:01:00,359 --> 00:01:04,860
works unless you participate okay so

28
00:01:03,030 --> 00:01:06,659
with all these different moving pieces

29
00:01:04,860 --> 00:01:08,369
all trying to work together over a hotel

30
00:01:06,659 --> 00:01:10,530
internet connection to sell to be super

31
00:01:08,369 --> 00:01:12,750
interesting to see it go down it's

32
00:01:10,530 --> 00:01:14,189
worked before and I do have a video as

33
00:01:12,750 --> 00:01:16,320
backup and I'd really like to see this

34
00:01:14,189 --> 00:01:17,939
happen live but regardless if you've got

35
00:01:16,320 --> 00:01:19,949
a computer or you got a phone and you

36
00:01:17,939 --> 00:01:21,059
want to participate then what I would

37
00:01:19,950 --> 00:01:22,590
ask you to do is go ahead and have it

38
00:01:21,060 --> 00:01:24,060
out and ready because towards the end of

39
00:01:22,590 --> 00:01:26,220
the talk I'm going to show you a link to

40
00:01:24,060 --> 00:01:28,829
go to and that'll be how you participate

41
00:01:26,220 --> 00:01:30,689
in that particular exercise just wanted

42
00:01:28,829 --> 00:01:32,610
to give you a heads up on that right now

43
00:01:30,689 --> 00:01:33,929
so some goals of objectives for the talk

44
00:01:32,610 --> 00:01:36,210
you are here right at the beginning of

45
00:01:33,930 --> 00:01:37,979
this little outline here Kevin and I

46
00:01:36,210 --> 00:01:39,179
will briefly introduce ourselves then

47
00:01:37,979 --> 00:01:41,280
Kevin will talk about some of the web

48
00:01:39,180 --> 00:01:44,820
application or web applications in 2009

49
00:01:41,280 --> 00:01:45,570
a state of them I'm gonna go in and talk

50
00:01:44,820 --> 00:01:47,460
a little about the same-origin policy

51
00:01:45,570 --> 00:01:49,079
which gives me the opportunity to

52
00:01:47,460 --> 00:01:51,329
introduce what it's called cross-origin

53
00:01:49,079 --> 00:01:53,339
resource sharing right the main event of

54
00:01:51,329 --> 00:01:54,929
this particular talk then Kevin will

55
00:01:53,340 --> 00:01:56,790
dive into some common security concerns

56
00:01:54,930 --> 00:01:58,680
with cores and then I'm gonna introduce

57
00:01:56,790 --> 00:02:00,689
to you the cores exploitation framework

58
00:01:58,680 --> 00:02:02,310
which is where you folks get involved

59
00:02:00,689 --> 00:02:04,710
and then we'll share some final thoughts

60
00:02:02,310 --> 00:02:05,759
and move on from that so if we use the

61
00:02:04,710 --> 00:02:08,098
doulton for those of you that don't know

62
00:02:05,759 --> 00:02:09,899
me my name is tim tomes i'm also known

63
00:02:08,098 --> 00:02:11,190
as line master 53 in some circles and

64
00:02:09,899 --> 00:02:13,230
there's a whole lot of bunch of stuff on

65
00:02:11,190 --> 00:02:13,620
the slide feel free to go ahead and read

66
00:02:13,230 --> 00:02:14,940
through it

67
00:02:13,620 --> 00:02:17,099
but the only thing up here that really

68
00:02:14,940 --> 00:02:19,650
matters is that I do it all for my Lord

69
00:02:17,099 --> 00:02:25,018
and Savior Jesus Christ okay I'm gonna

70
00:02:19,650 --> 00:02:27,239
head over Kevin yes oh I'm Kevin Cody at

71
00:02:25,019 --> 00:02:28,799
keV Cody on Twitter I'm from Pittsburgh

72
00:02:27,239 --> 00:02:30,750
hi

73
00:02:28,799 --> 00:02:32,940
my day job is that I get to hack on

74
00:02:30,750 --> 00:02:34,829
autonomous vehicles or around autonomous

75
00:02:32,940 --> 00:02:37,470
vehicles sometimes I'm a bit of a

76
00:02:34,829 --> 00:02:38,760
vulnerability StumbleUpon or if anyone

77
00:02:37,470 --> 00:02:40,890
has worked with me in the past they know

78
00:02:38,760 --> 00:02:43,019
I just like fall but first into stuff

79
00:02:40,890 --> 00:02:46,108
all the time I'm not a Tavis or Benigni

80
00:02:43,019 --> 00:02:49,049
type like I'm not gonna you know tear

81
00:02:46,109 --> 00:02:51,390
something apart and no down to the line

82
00:02:49,049 --> 00:02:53,040
of code exactly the the cause and and

83
00:02:51,390 --> 00:02:56,220
and understand the entire architecture

84
00:02:53,040 --> 00:02:59,730
all that stuff rather I just find stuff

85
00:02:56,220 --> 00:03:01,799
constantly you just fall flat ass first

86
00:02:59,730 --> 00:03:03,988
and stuff and I'm constantly having a

87
00:03:01,799 --> 00:03:06,030
lot of fun and it's a pretty cool to be

88
00:03:03,989 --> 00:03:07,560
in a career that just lets me hack away

89
00:03:06,030 --> 00:03:10,260
on stuff and find problems all the time

90
00:03:07,560 --> 00:03:12,079
I also do a loss Pittsburgh I am a

91
00:03:10,260 --> 00:03:15,328
husband dad hacker lock-picker

92
00:03:12,079 --> 00:03:20,040
fix stuff on YouTube fisherman and I

93
00:03:15,329 --> 00:03:22,500
have a little bit of a TD but so when we

94
00:03:20,040 --> 00:03:24,540
talk about the state of web apps in 2019

95
00:03:22,500 --> 00:03:26,790
things are pretty different from a

96
00:03:24,540 --> 00:03:29,578
decade ago or even 20 years ago if you

97
00:03:26,790 --> 00:03:32,940
were doing web 20 years ago today's apps

98
00:03:29,579 --> 00:03:35,790
are of course really rich in single page

99
00:03:32,940 --> 00:03:37,919
apps right javascript heavy client-side

100
00:03:35,790 --> 00:03:39,358
heavy sometimes we don't even have

101
00:03:37,919 --> 00:03:40,440
servers at all now I'm not talking about

102
00:03:39,359 --> 00:03:42,690
server lists

103
00:03:40,440 --> 00:03:45,269
I'm talking about actual thick client

104
00:03:42,690 --> 00:03:47,819
apps or browser apps they don't even

105
00:03:45,269 --> 00:03:50,099
communicate outside of your browser

106
00:03:47,819 --> 00:03:52,560
right they're just all local clients and

107
00:03:50,099 --> 00:03:55,668
that's all done using javascript it's

108
00:03:52,560 --> 00:03:58,889
pretty amazing also when we talk about

109
00:03:55,669 --> 00:04:01,040
web apps in 2019 we would be amiss if we

110
00:03:58,889 --> 00:04:03,510
didn't talk about web sockets or

111
00:04:01,040 --> 00:04:07,230
one-offs from web sockets like long

112
00:04:03,510 --> 00:04:09,418
polling comedy value so we have these

113
00:04:07,230 --> 00:04:10,980
emerging asynchronous communications

114
00:04:09,419 --> 00:04:13,319
right and that's how our rich

115
00:04:10,980 --> 00:04:16,760
applications are really evolving today

116
00:04:13,319 --> 00:04:19,199
and then the piece de resistance

117
00:04:16,760 --> 00:04:20,699
microservices right so micro services

118
00:04:19,199 --> 00:04:24,150
are the way that we are pulling apart

119
00:04:20,699 --> 00:04:26,159
our monolithic applications into little

120
00:04:24,150 --> 00:04:27,609
pieces that all have to orchestrate and

121
00:04:26,159 --> 00:04:30,789
work well to get

122
00:04:27,610 --> 00:04:34,150
these little pieces come from subdomains

123
00:04:30,789 --> 00:04:36,789
or super domains and then they

124
00:04:34,150 --> 00:04:38,469
communicate within those domains or

125
00:04:36,789 --> 00:04:40,060
maybe outside of those domains and when

126
00:04:38,469 --> 00:04:46,080
you need to communicate outside of those

127
00:04:40,060 --> 00:04:46,080
domains what do you need to use course

128
00:04:50,350 --> 00:05:01,449
[Music]

129
00:04:58,800 --> 00:05:03,460
if you've if you've written client-side

130
00:05:01,449 --> 00:05:05,439
code in the past ten years then you know

131
00:05:03,460 --> 00:05:07,000
exactly how Cassidy feels right here

132
00:05:05,439 --> 00:05:10,509
Cassie do however you pronounce her name

133
00:05:07,000 --> 00:05:12,490
a great follow on Twitter the developer

134
00:05:10,509 --> 00:05:14,289
just a really really amazing talent and

135
00:05:12,490 --> 00:05:16,569
also really funny but this is a very

136
00:05:14,289 --> 00:05:18,099
real conversation a very frequent

137
00:05:16,569 --> 00:05:20,650
conversation that Kevin and I have with

138
00:05:18,099 --> 00:05:22,688
developers all the time that are writing

139
00:05:20,650 --> 00:05:26,109
client-side code interesting thing about

140
00:05:22,689 --> 00:05:27,879
this is is while Korres is here upon the

141
00:05:26,110 --> 00:05:29,080
the video and core shows up in the

142
00:05:27,879 --> 00:05:31,449
errors within your browser's

143
00:05:29,080 --> 00:05:34,870
cross-origin resource sharing that's not

144
00:05:31,449 --> 00:05:36,430
actually the root of the problem that so

145
00:05:34,870 --> 00:05:37,419
many folks encounter when they're when

146
00:05:36,430 --> 00:05:39,219
they're dealing with these types of

147
00:05:37,419 --> 00:05:41,318
applications the real root of the

148
00:05:39,219 --> 00:05:43,149
problem is this thing called same origin

149
00:05:41,319 --> 00:05:44,469
policy and I would hope that most folks

150
00:05:43,149 --> 00:05:47,199
in here or anybody dealing with web

151
00:05:44,469 --> 00:05:48,789
stuff has actually an understanding of

152
00:05:47,199 --> 00:05:50,110
same origin policy ORS at least dealt

153
00:05:48,789 --> 00:05:52,659
with it at some point Tom because it is

154
00:05:50,110 --> 00:05:54,580
a key security component built within

155
00:05:52,659 --> 00:05:57,219
our browsers okay so what does it mean

156
00:05:54,580 --> 00:05:59,938
to be same-origin well it means that it

157
00:05:57,219 --> 00:06:03,430
two things come from the same protocol

158
00:05:59,939 --> 00:06:05,500
same host and the same port so if you

159
00:06:03,430 --> 00:06:07,479
look at these examples here the second

160
00:06:05,500 --> 00:06:09,669
one would be not from the same origin

161
00:06:07,479 --> 00:06:11,109
because it's different protocol the

162
00:06:09,669 --> 00:06:12,370
third bullet here is not from the same

163
00:06:11,110 --> 00:06:14,259
origin to the first because it's a

164
00:06:12,370 --> 00:06:16,029
different host right sub domain versus

165
00:06:14,259 --> 00:06:17,469
domain is a different scene as a

166
00:06:16,029 --> 00:06:19,839
different host and then the third one

167
00:06:17,469 --> 00:06:21,729
because of it being on an alternate port

168
00:06:19,839 --> 00:06:23,500
so anything coming from these two

169
00:06:21,729 --> 00:06:28,210
different places we considered to be not

170
00:06:23,500 --> 00:06:30,039
in the same origin and I'll talk the

171
00:06:28,210 --> 00:06:31,719
implications of that here in just a

172
00:06:30,039 --> 00:06:33,099
moment one of the interesting things

173
00:06:31,719 --> 00:06:34,659
about the topics that were going to talk

174
00:06:33,099 --> 00:06:35,860
about today same origin policy in

175
00:06:34,659 --> 00:06:37,569
courses these are things that are

176
00:06:35,860 --> 00:06:39,729
enforced by the browser now in the

177
00:06:37,569 --> 00:06:40,689
security community particularly the web

178
00:06:39,729 --> 00:06:42,188
security community

179
00:06:40,689 --> 00:06:44,619
we always talk about real security

180
00:06:42,189 --> 00:06:46,959
happens on the server well these are

181
00:06:44,619 --> 00:06:49,389
browser components these things have to

182
00:06:46,959 --> 00:06:51,159
be enforced on that side of things so it

183
00:06:49,389 --> 00:06:54,159
makes them kind of unique and it begins

184
00:06:51,159 --> 00:06:55,509
to um it will it will fry your mind

185
00:06:54,159 --> 00:06:57,248
trying to get your mind wrapped around

186
00:06:55,509 --> 00:06:59,079
how are we implementing security

187
00:06:57,249 --> 00:07:01,629
controls in a place where we actually

188
00:06:59,079 --> 00:07:03,610
don't even have the control because they

189
00:07:01,629 --> 00:07:06,309
belong to the attacker or the client or

190
00:07:03,610 --> 00:07:08,829
whoever but it is an absolutely enforced

191
00:07:06,309 --> 00:07:10,779
by the browser and same origin policy

192
00:07:08,829 --> 00:07:13,539
actually happens to be the reason why

193
00:07:10,779 --> 00:07:15,789
CSRF is even a thing and I'll show you

194
00:07:13,539 --> 00:07:17,919
here that here in just a moment so here

195
00:07:15,789 --> 00:07:19,360
same same origin policy applied so we'll

196
00:07:17,919 --> 00:07:21,878
talk we'll say that this application

197
00:07:19,360 --> 00:07:23,829
here in the middle is Landmaster 53 com

198
00:07:21,879 --> 00:07:26,019
okay my web site and we'll say that the

199
00:07:23,829 --> 00:07:27,999
third-party here is Twitter and

200
00:07:26,019 --> 00:07:30,219
basically what I want to do as the

201
00:07:27,999 --> 00:07:33,699
developer of Landmaster 53 com is I want

202
00:07:30,219 --> 00:07:35,469
to embed my Twitter feed into my website

203
00:07:33,699 --> 00:07:37,809
so that when you go there you see a live

204
00:07:35,469 --> 00:07:39,159
feed going on there now in the past we

205
00:07:37,809 --> 00:07:40,809
used to have to do this thing called

206
00:07:39,159 --> 00:07:43,179
actually we'll talk I'll get to that

207
00:07:40,809 --> 00:07:44,349
part here in just a moment okay so what

208
00:07:43,179 --> 00:07:47,258
happens as you make a request in

209
00:07:44,349 --> 00:07:49,808
Landmaster 53 com Landmaster 53 com

210
00:07:47,259 --> 00:07:51,849
passes back some HTML some style sheets

211
00:07:49,809 --> 00:07:53,979
but it passes back some JavaScript as

212
00:07:51,849 --> 00:07:56,169
well and what that JavaScript wants to

213
00:07:53,979 --> 00:07:57,938
do is it wants to make a request out to

214
00:07:56,169 --> 00:08:00,909
Twitter pull down all of my public

215
00:07:57,939 --> 00:08:02,709
tweets bring them back and embed them in

216
00:08:00,909 --> 00:08:05,110
the website and with same-origin policy

217
00:08:02,709 --> 00:08:07,119
says as you can say right here see right

218
00:08:05,110 --> 00:08:08,949
here is that it makes the request out

219
00:08:07,119 --> 00:08:11,499
and when the data comes back the browser

220
00:08:08,949 --> 00:08:14,319
says hey wait a second the origin of

221
00:08:11,499 --> 00:08:16,029
this javascript is Landmaster 53 com but

222
00:08:14,319 --> 00:08:19,449
you just try it you just made a request

223
00:08:16,029 --> 00:08:21,669
and this data came from twitter.com you

224
00:08:19,449 --> 00:08:23,349
are not allowed to process it and the

225
00:08:21,669 --> 00:08:25,628
browser is not allowed to embed that

226
00:08:23,349 --> 00:08:28,179
content within it's within the current

227
00:08:25,629 --> 00:08:29,529
page at langmaster 53 comm and I think

228
00:08:28,179 --> 00:08:31,719
some of you may be looking at me now

229
00:08:29,529 --> 00:08:34,240
going but wait a second we see this kind

230
00:08:31,719 --> 00:08:35,889
of stuff happen all the time this is not

231
00:08:34,240 --> 00:08:37,419
this is this is this is not something

232
00:08:35,889 --> 00:08:39,068
that that I mean if you've encountered

233
00:08:37,419 --> 00:08:41,078
the error you kind of know but if those

234
00:08:39,068 --> 00:08:42,818
users use the internet on a daily basis

235
00:08:41,078 --> 00:08:44,078
you see you see things being brought

236
00:08:42,818 --> 00:08:45,309
different technologies being brought

237
00:08:44,078 --> 00:08:47,949
together constantly

238
00:08:45,309 --> 00:08:51,670
okay and that's due to this thing called

239
00:08:47,949 --> 00:08:53,410
cross or resource sharing because that

240
00:08:51,670 --> 00:08:54,640
same origin policy right there that

241
00:08:53,410 --> 00:08:56,589
applies that's the

242
00:08:54,640 --> 00:08:58,870
fault state of all browsers you're not

243
00:08:56,590 --> 00:09:02,020
allowed to do the kind of thing that we

244
00:08:58,870 --> 00:09:05,080
all see happen all of the time and it's

245
00:09:02,020 --> 00:09:07,840
due to course course quite simply put is

246
00:09:05,080 --> 00:09:10,540
a server controlled mechanism to bypass

247
00:09:07,840 --> 00:09:13,750
same origin policy course is not a

248
00:09:10,540 --> 00:09:16,569
security control it's an anti security

249
00:09:13,750 --> 00:09:18,640
control it is used to disable the most

250
00:09:16,570 --> 00:09:20,980
important security control that we have

251
00:09:18,640 --> 00:09:22,449
on the browser which is same origin

252
00:09:20,980 --> 00:09:24,190
policy so let me just kind of throw that

253
00:09:22,450 --> 00:09:26,800
out there to start with because that's a

254
00:09:24,190 --> 00:09:29,200
huge misconception that we deal with ok

255
00:09:26,800 --> 00:09:30,729
um but what it does is it ultimately it

256
00:09:29,200 --> 00:09:32,380
removes this need for server-side

257
00:09:30,730 --> 00:09:33,700
mashups and I'll bump up a slide real

258
00:09:32,380 --> 00:09:36,189
quick just to show you this because in

259
00:09:33,700 --> 00:09:37,840
order to do what I just talked about on

260
00:09:36,190 --> 00:09:40,180
the same-origin policy side blend

261
00:09:37,840 --> 00:09:42,670
Twitter stuff with Landmaster 53 stuff

262
00:09:40,180 --> 00:09:44,770
what we used to have to do is is when

263
00:09:42,670 --> 00:09:46,839
you made a request over to Lana's 253

264
00:09:44,770 --> 00:09:49,360
comm me as the developer of that

265
00:09:46,840 --> 00:09:51,250
application on the server side where

266
00:09:49,360 --> 00:09:53,530
there is no browser so there is no

267
00:09:51,250 --> 00:09:55,630
same-origin policy right on the server

268
00:09:53,530 --> 00:09:57,550
side I could reach out to Twitter and I

269
00:09:55,630 --> 00:09:59,110
could pull that data down I could mash

270
00:09:57,550 --> 00:10:02,140
it together right there on the server

271
00:09:59,110 --> 00:10:03,880
and then serve up HTML that has all that

272
00:10:02,140 --> 00:10:06,790
stuff already put together and those

273
00:10:03,880 --> 00:10:08,860
were called server-side mashups but

274
00:10:06,790 --> 00:10:10,180
that's pretty resource intensive on the

275
00:10:08,860 --> 00:10:12,070
server right having to make all those

276
00:10:10,180 --> 00:10:14,020
additional requests and dynamically put

277
00:10:12,070 --> 00:10:15,820
all that data together it was just it

278
00:10:14,020 --> 00:10:17,170
was very resource intensive and we

279
00:10:15,820 --> 00:10:20,650
wanted to push it to the client

280
00:10:17,170 --> 00:10:22,839
rightfully so distribute that that that

281
00:10:20,650 --> 00:10:26,230
processing okay and that's exactly what

282
00:10:22,840 --> 00:10:28,300
Korres does so now when you make a

283
00:10:26,230 --> 00:10:30,190
request to Landmaster 53 common

284
00:10:28,300 --> 00:10:32,349
Landmaster 53 comm responds with that

285
00:10:30,190 --> 00:10:33,070
JavaScript that wants to pull stuff back

286
00:10:32,350 --> 00:10:35,410
from Twitter

287
00:10:33,070 --> 00:10:37,240
well now Twitter has an opportunity to

288
00:10:35,410 --> 00:10:39,329
actually tell the browser that's allowed

289
00:10:37,240 --> 00:10:41,920
to do that through this thing called

290
00:10:39,330 --> 00:10:44,500
cores so there's two different types of

291
00:10:41,920 --> 00:10:46,420
cross-origin requests there's a simple

292
00:10:44,500 --> 00:10:48,370
cross origin requests and we'll call a

293
00:10:46,420 --> 00:10:49,839
pre-flight to cross origin request it'll

294
00:10:48,370 --> 00:10:51,970
make more sense of pre flooded here in

295
00:10:49,840 --> 00:10:54,100
just a moment but basically and there

296
00:10:51,970 --> 00:10:55,600
are it's pretty technical you'd go into

297
00:10:54,100 --> 00:10:57,760
the RFC if you want to know really what

298
00:10:55,600 --> 00:10:59,920
constitutes the two but at a very basic

299
00:10:57,760 --> 00:11:02,230
level with what diff'ent would separate

300
00:10:59,920 --> 00:11:03,910
simple and preflighted is a simple

301
00:11:02,230 --> 00:11:06,850
request as something that's not state

302
00:11:03,910 --> 00:11:08,589
changing and doesn't require credentials

303
00:11:06,850 --> 00:11:10,060
so something like reaching up

304
00:11:08,590 --> 00:11:12,280
Twitter and pulling down a public

305
00:11:10,060 --> 00:11:13,750
Twitter feed I'm not creating a tweet it

306
00:11:12,280 --> 00:11:16,750
doesn't require our credentials

307
00:11:13,750 --> 00:11:18,190
it's a should be considered a safe cross

308
00:11:16,750 --> 00:11:20,080
origin request

309
00:11:18,190 --> 00:11:21,250
all right pre-flight is the exact

310
00:11:20,080 --> 00:11:23,650
opposite of that I'll get back to that

311
00:11:21,250 --> 00:11:25,720
in a minute okay so what if I had what

312
00:11:23,650 --> 00:11:27,780
if I do want to embed my tweets in

313
00:11:25,720 --> 00:11:30,400
Landmaster 53 comm you make a request

314
00:11:27,780 --> 00:11:32,290
javascript comes down javascript makes

315
00:11:30,400 --> 00:11:34,240
the request out to Twitter Twitter

316
00:11:32,290 --> 00:11:36,849
responds back with this thing called an

317
00:11:34,240 --> 00:11:38,830
access control allow origin header you

318
00:11:36,850 --> 00:11:41,320
see it right here and as long as that

319
00:11:38,830 --> 00:11:43,930
access control allow origin header has

320
00:11:41,320 --> 00:11:46,240
this has it has it as a certain value in

321
00:11:43,930 --> 00:11:47,349
it that permits my origin and he's going

322
00:11:46,240 --> 00:11:49,180
to talk about those values here in a

323
00:11:47,350 --> 00:11:51,070
moment has those values that permits my

324
00:11:49,180 --> 00:11:53,739
origin to load the data and the data

325
00:11:51,070 --> 00:11:55,750
that comes back with it will be loaded

326
00:11:53,740 --> 00:11:58,300
the browser will be allowed to access it

327
00:11:55,750 --> 00:12:00,880
and you'll see that content populate in

328
00:11:58,300 --> 00:12:04,060
the interface Twitter used cores to

329
00:12:00,880 --> 00:12:07,570
disable same origin policy in Landmaster

330
00:12:04,060 --> 00:12:09,369
53 com okay disabled it they do remove

331
00:12:07,570 --> 00:12:11,290
the security control so I'll make that

332
00:12:09,370 --> 00:12:13,870
clear so now let's say I want to take it

333
00:12:11,290 --> 00:12:15,969
a little bit further so rather than you

334
00:12:13,870 --> 00:12:17,470
go to lie master 53 com you read one of

335
00:12:15,970 --> 00:12:19,600
my epic articles because they're all

336
00:12:17,470 --> 00:12:20,110
amazing ok and you're like I got a tweet

337
00:12:19,600 --> 00:12:21,910
this

338
00:12:20,110 --> 00:12:23,290
well that master 53 coms gonna try to

339
00:12:21,910 --> 00:12:25,270
make that easy for you and at the bottom

340
00:12:23,290 --> 00:12:28,750
of the blog you see a little button that

341
00:12:25,270 --> 00:12:30,910
says tweet this ok well now when you

342
00:12:28,750 --> 00:12:33,010
click on that the browser says hey wait

343
00:12:30,910 --> 00:12:35,350
a second this particular user is trying

344
00:12:33,010 --> 00:12:38,140
to make a cross-origin request from

345
00:12:35,350 --> 00:12:41,230
Landmaster 53 over to twitter but now

346
00:12:38,140 --> 00:12:43,420
it's a post request it's state changing

347
00:12:41,230 --> 00:12:45,550
because it wants to create data and it

348
00:12:43,420 --> 00:12:48,280
wants to do it on behalf of a current

349
00:12:45,550 --> 00:12:50,709
user using their active session this is

350
00:12:48,280 --> 00:12:52,990
what we call a preflighted because what

351
00:12:50,710 --> 00:12:54,850
the browser does before them even makes

352
00:12:52,990 --> 00:12:56,800
that request it detects that you're

353
00:12:54,850 --> 00:12:59,230
trying to do something that state

354
00:12:56,800 --> 00:13:01,630
changing and requires authentication at

355
00:12:59,230 --> 00:13:03,160
that point in time the browser says wait

356
00:13:01,630 --> 00:13:05,260
a second I need to make sure you're

357
00:13:03,160 --> 00:13:07,930
allowed to do this first and so as you

358
00:13:05,260 --> 00:13:10,300
saw and simple where it actually sends

359
00:13:07,930 --> 00:13:12,010
the request with the data and everything

360
00:13:10,300 --> 00:13:14,410
comes back before the decisions made

361
00:13:12,010 --> 00:13:17,260
well in a preflighted cross-origin

362
00:13:14,410 --> 00:13:18,880
request it has to get permission but and

363
00:13:17,260 --> 00:13:21,430
make the decision before it actually

364
00:13:18,880 --> 00:13:22,329
ever sends the request and if any of you

365
00:13:21,430 --> 00:13:23,618
are like me and

366
00:13:22,329 --> 00:13:25,628
you surf the internet with the network

367
00:13:23,619 --> 00:13:27,489
tab open and your developer tools you've

368
00:13:25,629 --> 00:13:29,679
seen these little options requests just

369
00:13:27,489 --> 00:13:31,689
go crazy in there well what those

370
00:13:29,679 --> 00:13:33,549
options requests are those are these

371
00:13:31,689 --> 00:13:35,410
things called the pre-flight requests

372
00:13:33,549 --> 00:13:37,269
and so what's happening here is when

373
00:13:35,410 --> 00:13:39,189
Landmaster at 53 comm says hey Twitter I

374
00:13:37,269 --> 00:13:41,470
want to create this tweet based on this

375
00:13:39,189 --> 00:13:43,360
particular user's session Twitter says

376
00:13:41,470 --> 00:13:44,259
the browser says wait got to ask

377
00:13:43,360 --> 00:13:45,879
permission first

378
00:13:44,259 --> 00:13:48,040
browser reaches out the Twitter says

379
00:13:45,879 --> 00:13:50,649
this person wants to do this this origin

380
00:13:48,040 --> 00:13:52,719
Landmaster 53 com wants to do this kind

381
00:13:50,649 --> 00:13:56,079
of behavior Twitter has that opportunity

382
00:13:52,720 --> 00:13:59,350
at that point to say yes or no if it

383
00:13:56,079 --> 00:14:01,420
says yes then the actual post request

384
00:13:59,350 --> 00:14:04,179
goes across and comes back at Twitter

385
00:14:01,420 --> 00:14:06,998
says no then it doesn't and that's how

386
00:14:04,179 --> 00:14:08,649
cross-origin resource sharing works when

387
00:14:06,999 --> 00:14:10,679
we're talking about complex things that

388
00:14:08,649 --> 00:14:16,239
are state changing and require

389
00:14:10,679 --> 00:14:18,399
credentials okay so now the Tim has

390
00:14:16,239 --> 00:14:19,929
given you an overview of cores and how

391
00:14:18,399 --> 00:14:21,790
it works let's talk about some of the

392
00:14:19,929 --> 00:14:25,839
problems with course because it is a

393
00:14:21,790 --> 00:14:29,290
security disk control a anti security

394
00:14:25,839 --> 00:14:31,149
control so of course coming with that

395
00:14:29,290 --> 00:14:32,769
we're gonna have some concerns above and

396
00:14:31,149 --> 00:14:34,379
beyond when we're talking about maybe

397
00:14:32,769 --> 00:14:37,869
sometimes when same-origin policy

398
00:14:34,379 --> 00:14:39,639
shouldn't be disabled right so the

399
00:14:37,869 --> 00:14:43,149
problem statement we need to get around

400
00:14:39,639 --> 00:14:45,730
same origin policy so what are some core

401
00:14:43,149 --> 00:14:47,919
solutions to do that well you can

402
00:14:45,730 --> 00:14:48,639
include a wild-card origin which will go

403
00:14:47,919 --> 00:14:51,279
over here in a moment

404
00:14:48,639 --> 00:14:53,589
or you can arbitrary reflect an origin

405
00:14:51,279 --> 00:14:56,739
that's allowed to receive that well show

406
00:14:53,589 --> 00:15:00,129
that as well so if you see in the

407
00:14:56,739 --> 00:15:04,239
example here I'm a speaker I'm coming

408
00:15:00,129 --> 00:15:09,100
from hacker tracker and I want to do a

409
00:15:04,239 --> 00:15:11,970
post to check in to Derby con-com so you

410
00:15:09,100 --> 00:15:16,809
can see here post check in JSON data

411
00:15:11,970 --> 00:15:18,759
content type all that fun stuff so the

412
00:15:16,809 --> 00:15:20,589
browser says hey he's going off domain

413
00:15:18,759 --> 00:15:22,449
we need to do something first we need to

414
00:15:20,589 --> 00:15:25,779
make sure that Kevin is allowed to do

415
00:15:22,449 --> 00:15:31,089
this so the browser says hey pre-flight

416
00:15:25,779 --> 00:15:33,819
options can hacker tracker post data to

417
00:15:31,089 --> 00:15:36,170
Derby Khan and the browser responds with

418
00:15:33,819 --> 00:15:40,660
or the server excuse me

419
00:15:36,170 --> 00:15:43,399
ones with okay but what's missing there

420
00:15:40,660 --> 00:15:45,019
it's missing the access control allow

421
00:15:43,399 --> 00:15:48,500
origin headers and all the course

422
00:15:45,019 --> 00:15:50,570
headers really there's nothing there so

423
00:15:48,500 --> 00:15:54,980
nothing works right we get our cours

424
00:15:50,570 --> 00:15:56,899
error so this is again the same origin

425
00:15:54,980 --> 00:15:59,300
policy roadblock this is the default

426
00:15:56,899 --> 00:16:02,899
function if there isn't a shim or course

427
00:15:59,300 --> 00:16:05,479
to be able to do this we have broken

428
00:16:02,899 --> 00:16:07,339
apps if we have broken apps businesses

429
00:16:05,480 --> 00:16:10,730
they'll make money the functionality is

430
00:16:07,339 --> 00:16:14,029
kind of important and this exact problem

431
00:16:10,730 --> 00:16:19,579
statement the cores error bug this is

432
00:16:14,029 --> 00:16:20,570
why we have insecure configurations and

433
00:16:19,579 --> 00:16:23,359
those are what I'm going to talk about

434
00:16:20,570 --> 00:16:25,959
here moment so we go back and we make

435
00:16:23,360 --> 00:16:30,019
some changes to that request

436
00:16:25,959 --> 00:16:33,560
so options request goes out can hacker

437
00:16:30,019 --> 00:16:36,800
tracker talk to Derby con-com pre-flight

438
00:16:33,560 --> 00:16:39,949
request this time Derby con responds

439
00:16:36,800 --> 00:16:43,130
with access control allow origin

440
00:16:39,949 --> 00:16:47,050
asterisk so it's allowing any origin to

441
00:16:43,130 --> 00:16:50,390
talk to Derby con calm so it works right

442
00:16:47,050 --> 00:16:52,339
kind of you would expect that if I'm

443
00:16:50,390 --> 00:16:53,720
post if I'm checking in as a speaker

444
00:16:52,339 --> 00:16:55,910
there would be some type of

445
00:16:53,720 --> 00:17:00,079
authentication involved with that right

446
00:16:55,910 --> 00:17:03,469
so it works but we need to pass those

447
00:17:00,079 --> 00:17:06,980
some type of creds through so the

448
00:17:03,470 --> 00:17:08,929
developer makes some more changes so the

449
00:17:06,980 --> 00:17:12,260
server now says in that same pre-flight

450
00:17:08,929 --> 00:17:15,829
request access control allow origin any

451
00:17:12,260 --> 00:17:18,379
origin and we allow credentials to be

452
00:17:15,829 --> 00:17:28,250
passed over to that server so now what

453
00:17:18,380 --> 00:17:33,370
happens we get the same bug and the

454
00:17:28,250 --> 00:17:36,380
reason for that is the wild-card origin

455
00:17:33,370 --> 00:17:37,909
so the wildcard origin is kind of the

456
00:17:36,380 --> 00:17:39,140
new normal so the new normal state and

457
00:17:37,910 --> 00:17:41,240
I'll go over that here more in a moment

458
00:17:39,140 --> 00:17:43,730
it's considered safe because it doesn't

459
00:17:41,240 --> 00:17:45,919
allow authenticated requests to go

460
00:17:43,730 --> 00:17:48,020
through to any origin anywhere and this

461
00:17:45,919 --> 00:17:48,880
is actually a security control applied

462
00:17:48,020 --> 00:17:51,190
at the brow

463
00:17:48,880 --> 00:17:54,580
level the browsers look at that

464
00:17:51,190 --> 00:17:55,360
pre-flight response and say asterik or

465
00:17:54,580 --> 00:17:58,780
excuse me

466
00:17:55,360 --> 00:18:00,760
access control allow origin any and acts

467
00:17:58,780 --> 00:18:04,780
of control allow credentials equals true

468
00:18:00,760 --> 00:18:07,900
whoa that is way too dangerous we cannot

469
00:18:04,780 --> 00:18:09,399
allow this to happen because any origin

470
00:18:07,900 --> 00:18:13,120
is allowed to make authenticated

471
00:18:09,400 --> 00:18:14,970
requests on behalf of who knows some

472
00:18:13,120 --> 00:18:17,260
poor user who probably wasn't actually

473
00:18:14,970 --> 00:18:19,120
requesting this and it's gonna send

474
00:18:17,260 --> 00:18:22,240
along their credentials with that their

475
00:18:19,120 --> 00:18:25,870
cookies right so the developer makes

476
00:18:22,240 --> 00:18:28,390
some more changes here's your options

477
00:18:25,870 --> 00:18:31,570
hacker tracker wants to post derbycon

478
00:18:28,390 --> 00:18:34,299
and the server says access control allow

479
00:18:31,570 --> 00:18:36,189
origin hacker tracker dog info access

480
00:18:34,299 --> 00:18:42,240
control allow credentials equals true

481
00:18:36,190 --> 00:18:47,169
and it works we're happy we go home but

482
00:18:42,240 --> 00:18:49,510
someone points out that if you do some

483
00:18:47,169 --> 00:18:53,860
random origin comm and you want to post

484
00:18:49,510 --> 00:18:58,210
to Derby con Derby con also responds

485
00:18:53,860 --> 00:19:01,840
with some random origin com so this is

486
00:18:58,210 --> 00:19:03,640
arbitrary origin reflection and a side

487
00:19:01,840 --> 00:19:06,639
note here Tim and I figured out last

488
00:19:03,640 --> 00:19:09,490
night that we may have by mistake coin

489
00:19:06,640 --> 00:19:11,919
the term arbitrary origin reflection so

490
00:19:09,490 --> 00:19:14,320
james kettle and his burp log post he

491
00:19:11,919 --> 00:19:17,409
mentioned arbitrary origins in some

492
00:19:14,320 --> 00:19:19,000
manner and evan johnson mentioned this

493
00:19:17,409 --> 00:19:20,260
problem and in previous management we

494
00:19:19,000 --> 00:19:22,720
definitely didn't discover the problem

495
00:19:20,260 --> 00:19:25,510
by any means but when you google

496
00:19:22,720 --> 00:19:26,770
arbitrary origin reflection tim's commit

497
00:19:25,510 --> 00:19:27,970
to the tool that we're about to show you

498
00:19:26,770 --> 00:19:30,908
is the only thing that comes up on the

499
00:19:27,970 --> 00:19:33,490
internet so we may have accidentally

500
00:19:30,909 --> 00:19:35,289
coined this bug class but we didn't

501
00:19:33,490 --> 00:19:36,610
discover it i got to be the arbitrary

502
00:19:35,289 --> 00:19:40,419
original reflection was already out

503
00:19:36,610 --> 00:19:44,139
there so arbitrary original reflection

504
00:19:40,419 --> 00:19:45,760
it's super bad it reflects any origin

505
00:19:44,140 --> 00:19:48,669
you give it and it sends along your

506
00:19:45,760 --> 00:19:52,780
cookies with it it's pretty common

507
00:19:48,669 --> 00:19:54,429
like default in a lot of libraries these

508
00:19:52,780 --> 00:19:56,350
are just a few that Tim and I've worked

509
00:19:54,429 --> 00:19:58,720
with personally and have found that

510
00:19:56,350 --> 00:20:01,780
either used to be this way or it still

511
00:19:58,720 --> 00:20:02,770
is today Tim knows with flasks I know

512
00:20:01,780 --> 00:20:05,350
with goat cheese

513
00:20:02,770 --> 00:20:08,379
I've seen it in production it will just

514
00:20:05,350 --> 00:20:10,270
reflect any origin you give it and it

515
00:20:08,380 --> 00:20:12,760
will send along credentials

516
00:20:10,270 --> 00:20:14,050
so I mentioned heaven before he needs a

517
00:20:12,760 --> 00:20:16,920
lot of props he's actually also

518
00:20:14,050 --> 00:20:19,780
referenced in the burp sweet blog Evan

519
00:20:16,920 --> 00:20:21,490
wrote the original research that I've

520
00:20:19,780 --> 00:20:23,770
ever seen regarding misconfigured course

521
00:20:21,490 --> 00:20:25,630
his blog post is there he also scanned

522
00:20:23,770 --> 00:20:27,760
the Alexa top I think it's a hundred

523
00:20:25,630 --> 00:20:30,790
thousand it might be million and he

524
00:20:27,760 --> 00:20:32,440
looked for any sites in the Alexa X that

525
00:20:30,790 --> 00:20:34,389
did this by default and they're all

526
00:20:32,440 --> 00:20:36,940
included there at least a shot in time

527
00:20:34,390 --> 00:20:39,220
at that time all of them all of the

528
00:20:36,940 --> 00:20:41,770
vulnerable hosts are included there so

529
00:20:39,220 --> 00:20:44,050
go Evan he's awesome he actually also

530
00:20:41,770 --> 00:20:46,780
put a pull request in to fix goichi

531
00:20:44,050 --> 00:20:48,100
course and almost kind of got into a

532
00:20:46,780 --> 00:20:49,540
little bit of a spat with the person

533
00:20:48,100 --> 00:20:51,730
because they didn't want to fix it and

534
00:20:49,540 --> 00:20:56,379
he just and it ended the pull request

535
00:20:51,730 --> 00:20:58,570
with open sources of hoot and it's still

536
00:20:56,380 --> 00:21:00,610
vulnerable and I found it on a client

537
00:20:58,570 --> 00:21:02,560
assessment completely a part of Evans

538
00:21:00,610 --> 00:21:05,439
research so it's it's out there it's

539
00:21:02,560 --> 00:21:06,870
it's doing its thing so let me pose a

540
00:21:05,440 --> 00:21:11,590
question what's the nares between

541
00:21:06,870 --> 00:21:14,229
cross-site request forgery and cores are

542
00:21:11,590 --> 00:21:18,310
arbitrary reflected origin that sends

543
00:21:14,230 --> 00:21:21,510
cookies to a domain without the user

544
00:21:18,310 --> 00:21:24,820
really giving that permission to do so

545
00:21:21,510 --> 00:21:25,750
well the answer here is it's actually

546
00:21:24,820 --> 00:21:29,439
worse

547
00:21:25,750 --> 00:21:33,340
the attacker can see the response to

548
00:21:29,440 --> 00:21:34,660
that request so see Cerf is blind see

549
00:21:33,340 --> 00:21:35,980
Cerf which I just read a blog thing

550
00:21:34,660 --> 00:21:38,620
Scott helm put one out like today or

551
00:21:35,980 --> 00:21:39,660
maybe maybe a little bit ago see service

552
00:21:38,620 --> 00:21:42,310
dead

553
00:21:39,660 --> 00:21:44,640
same site cookies are now default see

554
00:21:42,310 --> 00:21:48,669
surface dead well this is not dead and

555
00:21:44,640 --> 00:21:51,600
the attacker can see the response from

556
00:21:48,670 --> 00:21:55,690
the server it's not blind

557
00:21:51,600 --> 00:21:57,370
so some mitigations for arbitrary

558
00:21:55,690 --> 00:22:00,820
reflected origin so you can whitelist

559
00:21:57,370 --> 00:22:03,689
origins but it's painful you can only

560
00:22:00,820 --> 00:22:06,010
you have to do some programmatic way of

561
00:22:03,690 --> 00:22:08,290
you know grab it on the fly then you

562
00:22:06,010 --> 00:22:10,990
can't make any mistakes and you can't do

563
00:22:08,290 --> 00:22:13,240
a regex it has a loose capture on it

564
00:22:10,990 --> 00:22:15,910
it's it's it's painful you could avoid

565
00:22:13,240 --> 00:22:16,810
cookie based authentication because this

566
00:22:15,910 --> 00:22:19,210
really only

567
00:22:16,810 --> 00:22:21,790
the whole arbitrary flex origin with the

568
00:22:19,210 --> 00:22:24,250
cookie thing that there are the UH the

569
00:22:21,790 --> 00:22:25,870
access code access control allow

570
00:22:24,250 --> 00:22:28,420
credentials equals true that only

571
00:22:25,870 --> 00:22:31,300
applies to cookies so you could just

572
00:22:28,420 --> 00:22:33,880
avoid cookie base authentication but if

573
00:22:31,300 --> 00:22:37,120
anyone in here has seen Randall Diggs

574
00:22:33,880 --> 00:22:39,790
talk from octa JWT suck I don't

575
00:22:37,120 --> 00:22:41,350
necessarily say to just abandon cookies

576
00:22:39,790 --> 00:22:45,149
because cookies have their place they

577
00:22:41,350 --> 00:22:47,169
they are really good so could do that

578
00:22:45,150 --> 00:22:48,730
where you could have moved a wild card

579
00:22:47,170 --> 00:22:51,790
origin right wild card solves this

580
00:22:48,730 --> 00:22:53,910
problem wild card isn't vulnerable the

581
00:22:51,790 --> 00:22:57,040
browser says hey we'll have card origin

582
00:22:53,910 --> 00:22:59,170
axes allow credentials equals true not

583
00:22:57,040 --> 00:23:01,270
we're not doing that so there are any

584
00:22:59,170 --> 00:23:04,810
issues it looks dangerous but it's

585
00:23:01,270 --> 00:23:09,520
actually safe but are there any edge

586
00:23:04,810 --> 00:23:12,550
cases to the wild card origin we can

587
00:23:09,520 --> 00:23:17,080
send unauthenticated requests from any

588
00:23:12,550 --> 00:23:20,590
user to a vulnerable service and access

589
00:23:17,080 --> 00:23:23,350
the results think about that for a

590
00:23:20,590 --> 00:23:27,060
moment I authenticate a request probably

591
00:23:23,350 --> 00:23:29,560
not too dangerous we can see the results

592
00:23:27,060 --> 00:23:31,629
so I was thinking about that one day and

593
00:23:29,560 --> 00:23:33,100
I work it just it just hit me I was

594
00:23:31,630 --> 00:23:37,510
looking at the whiteboard whiteboarding

595
00:23:33,100 --> 00:23:40,000
it out and I said wait what attack is

596
00:23:37,510 --> 00:23:43,990
good from an unauthenticated standpoint

597
00:23:40,000 --> 00:23:47,560
Oh online brute-force attacks right and

598
00:23:43,990 --> 00:23:49,960
I can get the resulting real quick so I

599
00:23:47,560 --> 00:23:52,929
worked up a small POC I thought I was

600
00:23:49,960 --> 00:23:54,600
crazy I called Tim Tim also thought I

601
00:23:52,930 --> 00:23:57,670
was crazy

602
00:23:54,600 --> 00:23:59,500
still thinks I'm crazy we go we play

603
00:23:57,670 --> 00:24:03,370
who's on first every time we talk about

604
00:23:59,500 --> 00:24:04,810
course and I'll let Tim talk about what

605
00:24:03,370 --> 00:24:09,729
he created from this one little

606
00:24:04,810 --> 00:24:12,970
conversation over a year ago yeah so

607
00:24:09,730 --> 00:24:14,500
before I step into this I realized when

608
00:24:12,970 --> 00:24:15,580
Kevin was talking something I forgot to

609
00:24:14,500 --> 00:24:17,740
mention and that was kind of like the

610
00:24:15,580 --> 00:24:20,590
whole reason why same origin policy even

611
00:24:17,740 --> 00:24:23,050
exists ok it reminded me was when you

612
00:24:20,590 --> 00:24:24,699
said that you can access the response on

613
00:24:23,050 --> 00:24:26,020
the client so let's think about same

614
00:24:24,700 --> 00:24:28,180
origin policy let's think about a

615
00:24:26,020 --> 00:24:29,650
cross-site scripting attack or even just

616
00:24:28,180 --> 00:24:30,140
malicious JavaScript that's sitting in

617
00:24:29,650 --> 00:24:32,450
Landmaster

618
00:24:30,140 --> 00:24:34,490
fifty-three calm at that that JavaScript

619
00:24:32,450 --> 00:24:36,800
wants to like reach across to your bank

620
00:24:34,490 --> 00:24:39,560
or something and pulled and pull back

621
00:24:36,800 --> 00:24:41,510
information it cannot access it same

622
00:24:39,560 --> 00:24:43,040
origin policy blocks it that prevents

623
00:24:41,510 --> 00:24:45,650
things like cross-site scripting attacks

624
00:24:43,040 --> 00:24:47,420
from stealing data from any website that

625
00:24:45,650 --> 00:24:49,730
you have a session with right it's a

626
00:24:47,420 --> 00:24:51,980
good thing it's supposed to be there um

627
00:24:49,730 --> 00:24:53,540
but the fact that it's that it's on the

628
00:24:51,980 --> 00:24:55,670
server I'm in fact that the same origin

629
00:24:53,540 --> 00:24:57,800
policy is applied on the browser and it

630
00:24:55,670 --> 00:24:59,750
blocks that retrieval and access of the

631
00:24:57,800 --> 00:25:01,760
information on the way back that's why

632
00:24:59,750 --> 00:25:03,650
CSRF is actually a class of attack

633
00:25:01,760 --> 00:25:05,840
because like he said it's blind it's

634
00:25:03,650 --> 00:25:08,360
that first half of the relationship

635
00:25:05,840 --> 00:25:10,730
before same origin policy does anything

636
00:25:08,360 --> 00:25:12,800
the attack still goes out we can change

637
00:25:10,730 --> 00:25:14,630
something using your session but we

638
00:25:12,800 --> 00:25:17,690
really can't access the response cuz

639
00:25:14,630 --> 00:25:19,910
same origin policy blocks it okay so

640
00:25:17,690 --> 00:25:22,580
CSRF really is born out of the fact that

641
00:25:19,910 --> 00:25:24,740
SOP prevents catastrophic cross-site

642
00:25:22,580 --> 00:25:27,710
scripting issues and so now when you

643
00:25:24,740 --> 00:25:29,180
think about cores disabling SOP CSRF is

644
00:25:27,710 --> 00:25:30,440
kind of like who freaking cares I don't

645
00:25:29,180 --> 00:25:31,820
even care if I can actually set

646
00:25:30,440 --> 00:25:33,590
something I'm stealing on your stuff

647
00:25:31,820 --> 00:25:35,570
right I'm just gonna send requests to

648
00:25:33,590 --> 00:25:37,580
anything you have an active session with

649
00:25:35,570 --> 00:25:39,110
and then I can access that response and

650
00:25:37,580 --> 00:25:41,689
just send it over to a server that I

651
00:25:39,110 --> 00:25:43,129
control and steal your data okay so I

652
00:25:41,690 --> 00:25:45,110
want to go back and make sure I made

653
00:25:43,130 --> 00:25:46,430
that really really clear so yeah Kevin

654
00:25:45,110 --> 00:25:47,929
reached out to me and he mentioned it to

655
00:25:46,430 --> 00:25:49,520
me and we went back and forth for a

656
00:25:47,930 --> 00:25:51,350
couple of days on this and then when I

657
00:25:49,520 --> 00:25:54,139
finally began to see like the light that

658
00:25:51,350 --> 00:25:56,179
he was trying to show me anybody that

659
00:25:54,140 --> 00:25:57,770
knows me knows that I absolutely love to

660
00:25:56,180 --> 00:25:59,630
write code and I'm forever looking for

661
00:25:57,770 --> 00:26:02,360
an excuse to do so and so I had a POC

662
00:25:59,630 --> 00:26:03,800
written in about like six hours like I

663
00:26:02,360 --> 00:26:05,510
want to do this and so I threw it

664
00:26:03,800 --> 00:26:07,310
together I want to keep my this is just

665
00:26:05,510 --> 00:26:09,230
a proof of concept I've got a lot of

666
00:26:07,310 --> 00:26:10,220
open source projects that I maintain and

667
00:26:09,230 --> 00:26:13,490
so I just want to make it clear that I

668
00:26:10,220 --> 00:26:15,680
have no intent to maintain this okay so

669
00:26:13,490 --> 00:26:17,270
like don't say if you want to send me

670
00:26:15,680 --> 00:26:19,100
emails that's fine but like I'm not

671
00:26:17,270 --> 00:26:20,810
gonna like support a bunch of issues on

672
00:26:19,100 --> 00:26:23,120
it and I'm not gonna like have a wiki

673
00:26:20,810 --> 00:26:25,520
and all that or update documentation you

674
00:26:23,120 --> 00:26:27,020
feel free to go ahead and use it um and

675
00:26:25,520 --> 00:26:28,100
also feel free to go ahead and fork it

676
00:26:27,020 --> 00:26:29,990
and do whatever you want with it I

677
00:26:28,100 --> 00:26:31,399
personally don't attend to maintain it

678
00:26:29,990 --> 00:26:32,570
did you have something to add the only

679
00:26:31,400 --> 00:26:34,520
difference here is we're telling you up

680
00:26:32,570 --> 00:26:36,080
front we're not gonna maintain it versus

681
00:26:34,520 --> 00:26:37,940
every other security told that comes out

682
00:26:36,080 --> 00:26:38,899
where you just like is this person ever

683
00:26:37,940 --> 00:26:40,010
gonna do anything with it

684
00:26:38,900 --> 00:26:43,850
right up front we're not gonna do

685
00:26:40,010 --> 00:26:45,620
anything more with it it's done no nope

686
00:26:43,850 --> 00:26:49,699
it's cuz it's really a bad thing like

687
00:26:45,620 --> 00:26:51,830
like unabashed white hat I got no I got

688
00:26:49,700 --> 00:26:53,450
no business in that community but it is

689
00:26:51,830 --> 00:26:55,100
there's no good route there's a real

690
00:26:53,450 --> 00:26:57,020
good reason to use a tool like this and

691
00:26:55,100 --> 00:26:58,370
so for that and in that regard I have no

692
00:26:57,020 --> 00:27:00,168
reason to maintain him okay

693
00:26:58,370 --> 00:27:02,270
so basically what it does is it exploits

694
00:27:00,169 --> 00:27:03,620
this like default wildcard because that

695
00:27:02,270 --> 00:27:05,330
one I can't remember if you mentioned it

696
00:27:03,620 --> 00:27:07,189
but there are a lot of frameworks that

697
00:27:05,330 --> 00:27:08,928
when you install the Corrs extension

698
00:27:07,190 --> 00:27:10,760
it's just arbitrary reflected origin by

699
00:27:08,929 --> 00:27:13,190
default which is the worst case samaris

700
00:27:10,760 --> 00:27:15,559
scenario those that have started to try

701
00:27:13,190 --> 00:27:16,970
to do the right thing now default to

702
00:27:15,559 --> 00:27:19,100
wildcard okay

703
00:27:16,970 --> 00:27:21,020
and so wildcard if we can if we can do

704
00:27:19,100 --> 00:27:22,879
arbitrary then this works even better if

705
00:27:21,020 --> 00:27:24,350
all we have is wildcard well then we're

706
00:27:22,880 --> 00:27:26,120
stuck with these unauthenticated ones

707
00:27:24,350 --> 00:27:28,340
and we still have some use cases that we

708
00:27:26,120 --> 00:27:30,949
can do but regardless it exploits these

709
00:27:28,340 --> 00:27:32,750
permissive course policies and every

710
00:27:30,950 --> 00:27:35,570
single every single implementation we've

711
00:27:32,750 --> 00:27:37,400
seen is vulnerable to this okay so it

712
00:27:35,570 --> 00:27:38,750
basically uses a distributed attack

713
00:27:37,400 --> 00:27:41,150
infrastructure and that's where you guys

714
00:27:38,750 --> 00:27:43,309
come in okay so we got three different

715
00:27:41,150 --> 00:27:45,710
pieces to this I've got a a target

716
00:27:43,309 --> 00:27:47,840
application juice shop which is a which

717
00:27:45,710 --> 00:27:50,570
is a client-side rendered application

718
00:27:47,840 --> 00:27:52,760
running on Heroku and then I've got a

719
00:27:50,570 --> 00:27:55,129
command control server that's gonna be

720
00:27:52,760 --> 00:27:57,530
running in Google Cloud and then I've

721
00:27:55,130 --> 00:27:58,850
got a digital ocean box that's that's

722
00:27:57,530 --> 00:28:00,678
essentially our third party that's

723
00:27:58,850 --> 00:28:02,240
hosting the malicious payload now I want

724
00:28:00,679 --> 00:28:04,190
you to think of that third party hosting

725
00:28:02,240 --> 00:28:06,049
the malicious payload as it being it

726
00:28:04,190 --> 00:28:08,210
could be tainted JavaScript it could be

727
00:28:06,049 --> 00:28:10,190
somebody's MySpace page with like HTML

728
00:28:08,210 --> 00:28:11,870
embedded in it it could be a cross-site

729
00:28:10,190 --> 00:28:13,640
scripting attack anywhere it could be

730
00:28:11,870 --> 00:28:15,260
Landmaster 53 comm and I just chose to

731
00:28:13,640 --> 00:28:18,080
like joke around with all of you and it

732
00:28:15,260 --> 00:28:19,429
could be anywhere javascript is is

733
00:28:18,080 --> 00:28:22,370
running so I just want you to kind of

734
00:28:19,429 --> 00:28:23,570
look at it that way okay so it can be

735
00:28:22,370 --> 00:28:25,070
deployed in a bunch of different ways

736
00:28:23,570 --> 00:28:26,750
and ultimately I think it's a beef a

737
00:28:25,070 --> 00:28:27,799
beef module just wait to happen for

738
00:28:26,750 --> 00:28:30,110
those of you that are familiar with the

739
00:28:27,799 --> 00:28:31,850
browser exploitation framework okay so

740
00:28:30,110 --> 00:28:33,530
this is the URL to that page I'm going

741
00:28:31,850 --> 00:28:37,570
to make sure everything is still up here

742
00:28:33,530 --> 00:28:42,158
and running okay that's still running my

743
00:28:37,570 --> 00:28:42,158
dashboard is awesome

744
00:28:43,570 --> 00:28:49,360
so still running okay so what I want you

745
00:28:46,750 --> 00:28:51,520
to do is is go ahead and if you've got a

746
00:28:49,360 --> 00:28:52,990
funk phones work for this too um if you

747
00:28:51,520 --> 00:28:55,389
got a phone you got a computer you want

748
00:28:52,990 --> 00:28:56,740
to participate go ahead and go to this

749
00:28:55,390 --> 00:28:58,060
particular link here and what you're

750
00:28:56,740 --> 00:29:00,040
going to what your system is going to do

751
00:28:58,060 --> 00:29:02,139
it's going to subscribe to a server sent

752
00:29:00,040 --> 00:29:03,760
events source and what I'm going to do

753
00:29:02,140 --> 00:29:05,830
is I'm going to begin pushing payloads

754
00:29:03,760 --> 00:29:08,379
down to all of your devices and your

755
00:29:05,830 --> 00:29:10,929
devices are going to begin to conduct a

756
00:29:08,380 --> 00:29:12,370
distributed authentication attack

757
00:29:10,930 --> 00:29:15,910
against the juice shop authentication

758
00:29:12,370 --> 00:29:17,979
page okay so hugely distributed attack

759
00:29:15,910 --> 00:29:21,580
against that all using the fact that

760
00:29:17,980 --> 00:29:24,580
juice shop has us has a cross origin or

761
00:29:21,580 --> 00:29:26,560
allow access control origin wild card

762
00:29:24,580 --> 00:29:28,540
okay so now everybody's in there right

763
00:29:26,560 --> 00:29:30,040
you should be subscribed and if you want

764
00:29:28,540 --> 00:29:31,210
to if you're using a browser go ahead

765
00:29:30,040 --> 00:29:33,250
and open up the developer tools and

766
00:29:31,210 --> 00:29:35,260
watch the network side of this I'll go

767
00:29:33,250 --> 00:29:37,540
ahead and get mine doing this as well so

768
00:29:35,260 --> 00:29:39,400
that we can actually see it happen wow

769
00:29:37,540 --> 00:29:44,350
you guys are hammering it right now I

770
00:29:39,400 --> 00:29:47,170
can't even get to it you warned me of

771
00:29:44,350 --> 00:29:49,510
this Kevin is anybody's not working it

772
00:29:47,170 --> 00:29:51,610
is it is so some people subscribe there

773
00:29:49,510 --> 00:29:53,470
we go okay so now I'm subscribed to it

774
00:29:51,610 --> 00:29:54,939
I'm gonna go up here and I'm going to

775
00:29:53,470 --> 00:29:56,440
run an attack so we're gonna run the

776
00:29:54,940 --> 00:29:58,620
juice shop attack will use the large

777
00:29:56,440 --> 00:30:01,120
credential list and I'm gonna run it oh

778
00:29:58,620 --> 00:30:03,370
my goodness that went you know here we

779
00:30:01,120 --> 00:30:07,149
go this should jump up to a couple

780
00:30:03,370 --> 00:30:17,530
thousand there we go that's the red dang

781
00:30:07,150 --> 00:30:19,210
you guys cracked it already 500 requests

782
00:30:17,530 --> 00:30:21,040
every few seconds now keep in mind here

783
00:30:19,210 --> 00:30:24,280
I have this throttle so that we can

784
00:30:21,040 --> 00:30:25,480
actually watch it okay so when I had

785
00:30:24,280 --> 00:30:27,670
this running at full speed it was

786
00:30:25,480 --> 00:30:29,560
happening so fast that we couldn't

787
00:30:27,670 --> 00:30:31,390
actually show you what it looked like

788
00:30:29,560 --> 00:30:32,409
but so I have every single request

789
00:30:31,390 --> 00:30:34,270
that's going to the command and control

790
00:30:32,410 --> 00:30:36,670
server throttled by a quarter of a

791
00:30:34,270 --> 00:30:39,129
second every one so you would actually

792
00:30:36,670 --> 00:30:40,600
be moving much much faster if it wasn't

793
00:30:39,130 --> 00:30:42,280
and you see my browser here just

794
00:30:40,600 --> 00:30:44,199
hammering away at the juice shop

795
00:30:42,280 --> 00:30:46,030
authentication page that Heroku server

796
00:30:44,200 --> 00:30:48,100
is probably also only running on a

797
00:30:46,030 --> 00:30:49,270
single thread which means that it was

798
00:30:48,100 --> 00:30:50,980
multi-threaded in a production

799
00:30:49,270 --> 00:30:53,230
environment like normal we would be

800
00:30:50,980 --> 00:30:54,580
completely obliterating this thing my

801
00:30:53,230 --> 00:30:56,020
our command control is actually running

802
00:30:54,580 --> 00:30:57,210
at ten threads so it's handling a little

803
00:30:56,020 --> 00:30:59,230
bit more

804
00:30:57,210 --> 00:31:02,230
but if you look at it look what's being

805
00:30:59,230 --> 00:31:04,990
transferred here it's about two 200

806
00:31:02,230 --> 00:31:06,249
kilobytes a request which is very small

807
00:31:04,990 --> 00:31:07,360
so the footprint of this kind of attack

808
00:31:06,249 --> 00:31:09,279
is obviously going to be it's gonna be

809
00:31:07,360 --> 00:31:10,860
dictated by the payload that we're

810
00:31:09,279 --> 00:31:13,360
running against the particular

811
00:31:10,860 --> 00:31:15,879
vulnerable resource but regardless is a

812
00:31:13,360 --> 00:31:18,879
small payload it's distributed it runs

813
00:31:15,879 --> 00:31:20,678
very very fast and as you can see we're

814
00:31:18,879 --> 00:31:22,418
already done we ran through those seven

815
00:31:20,679 --> 00:31:24,519
thousand keys really really quick and

816
00:31:22,419 --> 00:31:25,840
we've cracked three different sets Oh

817
00:31:24,519 --> 00:31:28,720
actually two different sets of

818
00:31:25,840 --> 00:31:30,939
credentials here okay so that's just a

819
00:31:28,720 --> 00:31:32,440
proof of concept like it's interesting

820
00:31:30,940 --> 00:31:33,970
because as we were reading through James

821
00:31:32,440 --> 00:31:36,789
kettle's article where he talks about

822
00:31:33,970 --> 00:31:38,740
some some Bitcoin I guess some Bitcoin

823
00:31:36,789 --> 00:31:41,080
sites that were vulnerable to arbitrary

824
00:31:38,740 --> 00:31:42,879
reflected origin and how he he got some

825
00:31:41,080 --> 00:31:45,460
bounties paid and that he literally

826
00:31:42,879 --> 00:31:46,449
mentions the fact that if there's not an

827
00:31:45,460 --> 00:31:48,730
authentic if there's not an

828
00:31:46,450 --> 00:31:51,429
authenticated context to it then really

829
00:31:48,730 --> 00:31:53,980
there's no dangerous implications to it

830
00:31:51,429 --> 00:31:55,539
when the reality is things like this

831
00:31:53,980 --> 00:31:57,580
these and this is you could call it an

832
00:31:55,539 --> 00:31:59,379
edge case but it's really common we find

833
00:31:57,580 --> 00:32:01,600
we find these types of authentication

834
00:31:59,379 --> 00:32:03,158
api's that are serving up wildcard

835
00:32:01,600 --> 00:32:06,399
origins all the time these are all

836
00:32:03,159 --> 00:32:14,559
vulnerable to distributed attacks just

837
00:32:06,399 --> 00:32:17,799
like this so a little bit more

838
00:32:14,559 --> 00:32:19,360
mitigation so we talked about reflect

839
00:32:17,799 --> 00:32:21,840
arbitrary reflected origin there's some

840
00:32:19,360 --> 00:32:24,340
mitigation there when it comes to

841
00:32:21,840 --> 00:32:26,709
wildcard origin you can use a

842
00:32:24,340 --> 00:32:29,820
synchronized token pattern so this is

843
00:32:26,710 --> 00:32:31,960
basically your anti C surf control

844
00:32:29,820 --> 00:32:33,970
I'll cost you on that because I don't

845
00:32:31,960 --> 00:32:37,659
know the last time I saw an anti C surf

846
00:32:33,970 --> 00:32:40,480
control on an unauthenticated page that

847
00:32:37,659 --> 00:32:43,059
was actually enforced so it's

848
00:32:40,480 --> 00:32:45,669
conceptually you could do it but it's

849
00:32:43,059 --> 00:32:52,418
not really done out there in the wild

850
00:32:45,669 --> 00:32:54,070
very often but there's also one missing

851
00:32:52,419 --> 00:32:56,919
here I think I mentioned it earlier

852
00:32:54,070 --> 00:32:58,960
excuse me it was not using a wild card

853
00:32:56,919 --> 00:33:01,360
origin not using arbitrary reflected

854
00:32:58,960 --> 00:33:03,460
origin but to hard code the origins that

855
00:33:01,360 --> 00:33:05,619
should be able to be speaking to your

856
00:33:03,460 --> 00:33:08,259
site right that has some implications

857
00:33:05,619 --> 00:33:09,879
it's definitely not easy to do there's a

858
00:33:08,259 --> 00:33:10,570
lot of hacks there's the whole regex

859
00:33:09,879 --> 00:33:13,209
thing where you can

860
00:33:10,570 --> 00:33:16,809
the closure and then you could have you

861
00:33:13,210 --> 00:33:19,630
know SEF derbycon dot our IP dot k code

862
00:33:16,809 --> 00:33:21,519
eco and if you miss that extra closure

863
00:33:19,630 --> 00:33:25,200
now you're just open yourself up for

864
00:33:21,519 --> 00:33:25,200
additional attacks and whatnot but

865
00:33:25,259 --> 00:33:31,590
exactly so just some final thoughts as

866
00:33:29,259 --> 00:33:34,269
we're wrapping up here bad

867
00:33:31,590 --> 00:33:37,720
recommendations are everywhere when it

868
00:33:34,269 --> 00:33:39,850
comes to to course specifically how many

869
00:33:37,720 --> 00:33:41,950
out here either have in your environment

870
00:33:39,850 --> 00:33:44,949
or have used with other people's

871
00:33:41,950 --> 00:33:48,059
environments swagger swagger okay good

872
00:33:44,950 --> 00:33:51,610
yeah it's it's pretty common you know a

873
00:33:48,059 --> 00:33:55,000
lot of self-documenting api frames like

874
00:33:51,610 --> 00:33:58,209
swagger are actually believed not the

875
00:33:55,000 --> 00:34:01,120
cause of this issue I've actually tested

876
00:33:58,210 --> 00:34:04,779
clients multiple times where I've seen

877
00:34:01,120 --> 00:34:08,770
cores only enabled the only reason cores

878
00:34:04,779 --> 00:34:11,199
is even on is to allow a ger to work

879
00:34:08,770 --> 00:34:13,750
because swagger is usually hosted on

880
00:34:11,199 --> 00:34:16,480
another port or a sub domain or in

881
00:34:13,750 --> 00:34:18,819
another host and literally these apps

882
00:34:16,480 --> 00:34:20,109
don't even want to use cores but they go

883
00:34:18,819 --> 00:34:21,159
out to swagger they're like yeah yeah

884
00:34:20,109 --> 00:34:23,859
we're gonna we're gonna do the swagger

885
00:34:21,159 --> 00:34:25,629
thing we're gonna do you know oh got

886
00:34:23,859 --> 00:34:26,889
turned cores on okay well let's just

887
00:34:25,629 --> 00:34:28,118
make sure it works so you know go

888
00:34:26,889 --> 00:34:30,040
through and all of a sudden you've

889
00:34:28,119 --> 00:34:33,159
opened yourself up to maybe reflected

890
00:34:30,040 --> 00:34:37,810
origin maybe wild card origin right it's

891
00:34:33,159 --> 00:34:40,569
crazy and on swagger sight they actually

892
00:34:37,810 --> 00:34:42,790
recommend this enable course org site

893
00:34:40,569 --> 00:34:43,719
which helps you I mean there's like 15

894
00:34:42,790 --> 00:34:45,339
different frameworks where it actually

895
00:34:43,719 --> 00:34:49,629
shows you this is how you enable cores

896
00:34:45,339 --> 00:34:53,230
on on XYZ and every single one of them

897
00:34:49,629 --> 00:34:55,409
either recommends wild card or arbitrary

898
00:34:53,230 --> 00:34:59,619
reflected origin every one of them so

899
00:34:55,409 --> 00:35:02,290
bad advice is everywhere and then again

900
00:34:59,619 --> 00:35:05,260
the the default state of said extensions

901
00:35:02,290 --> 00:35:08,349
or libraries are either wild card which

902
00:35:05,260 --> 00:35:10,920
is better than not but it's again not

903
00:35:08,349 --> 00:35:12,970
great what we showed you today or

904
00:35:10,920 --> 00:35:16,000
reflected origin which is really really

905
00:35:12,970 --> 00:35:19,750
really bad none of them that we've seen

906
00:35:16,000 --> 00:35:23,290
ship with default good configs there

907
00:35:19,750 --> 00:35:24,460
might be some Stack Overflow security

908
00:35:23,290 --> 00:35:26,050
posts out there they say hey

909
00:35:24,460 --> 00:35:27,940
you should probably do it this way and

910
00:35:26,050 --> 00:35:29,260
you can copy that and you know feed it

911
00:35:27,940 --> 00:35:30,970
into whatnot but none of them actually

912
00:35:29,260 --> 00:35:32,859
out of the box ship with anything other

913
00:35:30,970 --> 00:35:34,029
than wild card because again what are

914
00:35:32,859 --> 00:35:37,598
you trying to you're just trying to make

915
00:35:34,030 --> 00:35:39,310
cross-origin work right this bug

916
00:35:37,599 --> 00:35:42,099
Cassie deuce bug is popping up on your

917
00:35:39,310 --> 00:35:43,480
on your developer tools when that

918
00:35:42,099 --> 00:35:46,630
yellows thing that says we've blocked

919
00:35:43,480 --> 00:35:47,890
this cross-origin request because it's

920
00:35:46,630 --> 00:35:49,690
really dangerous so you're just trying

921
00:35:47,890 --> 00:35:50,560
to get that thing to work and sadly it

922
00:35:49,690 --> 00:35:54,970
might be because you're trying to get

923
00:35:50,560 --> 00:35:56,170
swagger working so yeah wild card

924
00:35:54,970 --> 00:35:57,399
origins without credentials can be

925
00:35:56,170 --> 00:36:00,640
dangerous we just showed you that today

926
00:35:57,400 --> 00:36:03,070
I hope that the demo was pretty cool and

927
00:36:00,640 --> 00:36:06,310
yeah course is just still widely

928
00:36:03,070 --> 00:36:11,020
misunderstood and and I'll leave Tim

929
00:36:06,310 --> 00:36:13,509
with less luck so drink this in for a

930
00:36:11,020 --> 00:36:15,700
second okay this is this is cores

931
00:36:13,510 --> 00:36:17,589
document this is Swagger's documentation

932
00:36:15,700 --> 00:36:19,930
page right here alright the first

933
00:36:17,589 --> 00:36:21,400
sentence says cores is a technique to

934
00:36:19,930 --> 00:36:25,299
prevent websites from doing bad things

935
00:36:21,400 --> 00:36:27,490
to your personal data folks cores is a

936
00:36:25,300 --> 00:36:31,300
technique to allow websites to do bad

937
00:36:27,490 --> 00:36:33,700
things to your data okay this is 100

938
00:36:31,300 --> 00:36:35,980
percent wrong like there's just no other

939
00:36:33,700 --> 00:36:37,839
way to put it and if you follow this

940
00:36:35,980 --> 00:36:39,640
thread right on down this is their

941
00:36:37,839 --> 00:36:41,080
they're the Swagger's implementation

942
00:36:39,640 --> 00:36:42,819
guidance that's live today you can go to

943
00:36:41,080 --> 00:36:44,770
this website right now it literally

944
00:36:42,820 --> 00:36:47,320
points you over to the enable the enable

945
00:36:44,770 --> 00:36:49,300
cours org which tells you how to do this

946
00:36:47,320 --> 00:36:51,460
the vulnerable way across any framework

947
00:36:49,300 --> 00:36:52,930
you could possibly imagine now do I

948
00:36:51,460 --> 00:36:54,790
think they want you to be broken on

949
00:36:52,930 --> 00:36:56,020
purpose no I think based on that

950
00:36:54,790 --> 00:36:58,210
sentence right there they just don't

951
00:36:56,020 --> 00:37:00,700
fully understand it they just don't

952
00:36:58,210 --> 00:37:01,810
really get what course is and so I hope

953
00:37:00,700 --> 00:37:03,430
today we've been able to kind of

954
00:37:01,810 --> 00:37:05,170
demystify that a little bit for some

955
00:37:03,430 --> 00:37:06,549
folks that are in the room at least make

956
00:37:05,170 --> 00:37:08,170
some awareness of this I mean if you're

957
00:37:06,550 --> 00:37:09,520
on the development side now you've got a

958
00:37:08,170 --> 00:37:10,930
better understanding of courses if

959
00:37:09,520 --> 00:37:12,580
you're on the security side you need to

960
00:37:10,930 --> 00:37:15,069
be looking for this when burp says

961
00:37:12,580 --> 00:37:17,380
there's a reflected origin pay attention

962
00:37:15,070 --> 00:37:18,970
it means something it means that that

963
00:37:17,380 --> 00:37:21,070
particular application is vulnerable to

964
00:37:18,970 --> 00:37:23,618
catastrophic cross-site scripting

965
00:37:21,070 --> 00:37:25,990
attacks from anywhere or at catastrophic

966
00:37:23,619 --> 00:37:28,000
attacks from anywhere in any on the

967
00:37:25,990 --> 00:37:29,950
Internet ok so as far as the goods go

968
00:37:28,000 --> 00:37:31,089
it's eventually going to be here I don't

969
00:37:29,950 --> 00:37:33,040
have it open right now and as a private

970
00:37:31,089 --> 00:37:35,320
repository but I will be pushing it out

971
00:37:33,040 --> 00:37:37,000
there so go ahead and and Mark that I

972
00:37:35,320 --> 00:37:37,990
will probably have to be the only link

973
00:37:37,000 --> 00:37:39,280
that you actually need

974
00:37:37,990 --> 00:37:41,560
because what I'm gonna do is I'm gonna

975
00:37:39,280 --> 00:37:43,180
export this to PDF and then throw it up

976
00:37:41,560 --> 00:37:45,100
in the repo as well so you'll be able to

977
00:37:43,180 --> 00:37:46,930
go there if you want to see the code the

978
00:37:45,100 --> 00:37:48,400
code is there and you'll be you you know

979
00:37:46,930 --> 00:37:49,450
all my credentials are hard-coded so

980
00:37:48,400 --> 00:37:51,100
you'll get to see all that kind of stuff

981
00:37:49,450 --> 00:37:53,200
my password that I keep in everything um

982
00:37:51,100 --> 00:37:55,029
so you'll have that and then you'll have

983
00:37:53,200 --> 00:37:57,009
the PDF there as well and then some

984
00:37:55,030 --> 00:37:59,740
other resources there's Kevin and my

985
00:37:57,010 --> 00:38:01,090
website but other than that how we doing

986
00:37:59,740 --> 00:38:01,750
on time it looks like we got about ten

987
00:38:01,090 --> 00:38:04,360
more minutes

988
00:38:01,750 --> 00:38:08,730
if anybody's got any questions go ahead

989
00:38:04,360 --> 00:38:08,730
and bring them forward anyway yes sir

990
00:38:27,440 --> 00:38:33,420
you you would be able to Eve yes I will

991
00:38:30,750 --> 00:38:36,420
so the question was isn't it isn't it on

992
00:38:33,420 --> 00:38:38,610
the server to to prevent an automated

993
00:38:36,420 --> 00:38:40,050
attack against this and I think you

994
00:38:38,610 --> 00:38:41,970
mentioned that the attack could still be

995
00:38:40,050 --> 00:38:44,070
could still be conducted without course

996
00:38:41,970 --> 00:38:45,750
without cores the only way to conduct

997
00:38:44,070 --> 00:38:47,400
that attack is from the actual app

998
00:38:45,750 --> 00:38:49,080
itself you wouldn't be able to do the

999
00:38:47,400 --> 00:38:51,420
dish you wouldn't be able to do it in

1000
00:38:49,080 --> 00:38:53,520
the distributed nature in which we did

1001
00:38:51,420 --> 00:38:56,930
it and so app you're absolutely right

1002
00:38:53,520 --> 00:38:56,930
and that the server should be

1003
00:38:57,320 --> 00:39:01,200
implementing some sort of anti

1004
00:38:59,280 --> 00:39:03,390
automation control there but if that

1005
00:39:01,200 --> 00:39:04,890
anti automation control is based on IP

1006
00:39:03,390 --> 00:39:07,049
address or based on some sort of

1007
00:39:04,890 --> 00:39:09,150
fingerprint or some sort of origin the

1008
00:39:07,050 --> 00:39:11,700
distributed nature within which we are

1009
00:39:09,150 --> 00:39:13,500
making that attack will confuse that it

1010
00:39:11,700 --> 00:39:15,299
will have to try to throttle all of

1011
00:39:13,500 --> 00:39:17,040
these different sources and as those

1012
00:39:15,300 --> 00:39:18,930
sources ramped up we just had probably a

1013
00:39:17,040 --> 00:39:20,940
couple of dozen in here but if I've got

1014
00:39:18,930 --> 00:39:22,950
a botnet of thousands a crawl or a tens

1015
00:39:20,940 --> 00:39:24,720
of thousands across the globe it's gonna

1016
00:39:22,950 --> 00:39:27,120
be something that gets very very tricky

1017
00:39:24,720 --> 00:39:29,250
for them very very quickly yeah I mean

1018
00:39:27,120 --> 00:39:30,630
and you could still conceivably conduct

1019
00:39:29,250 --> 00:39:32,280
that attack but it would be very slow

1020
00:39:30,630 --> 00:39:33,960
and very easy to block it's the

1021
00:39:32,280 --> 00:39:35,940
distributed nature allowed by that

1022
00:39:33,960 --> 00:39:38,880
permissive course policy that allows

1023
00:39:35,940 --> 00:39:44,010
this to be more dangerous than that any

1024
00:39:38,880 --> 00:39:45,390
other questions yes sir yeah so the

1025
00:39:44,010 --> 00:39:46,890
question was will I describe my

1026
00:39:45,390 --> 00:39:48,750
infrastructure again so basically what

1027
00:39:46,890 --> 00:39:50,759
we have right here is we've got a target

1028
00:39:48,750 --> 00:39:52,320
application which in if those of us in

1029
00:39:50,760 --> 00:39:54,240
here that are pen testers it would be

1030
00:39:52,320 --> 00:39:57,000
our target our scoped application which

1031
00:39:54,240 --> 00:39:58,919
is juice shop running up on Heroku okay

1032
00:39:57,000 --> 00:40:00,810
and then I've got my command to control

1033
00:39:58,920 --> 00:40:02,490
server and it's running on Google Cloud

1034
00:40:00,810 --> 00:40:03,870
I'm just using free tier like F one

1035
00:40:02,490 --> 00:40:06,359
micro box and I've just got this thing

1036
00:40:03,870 --> 00:40:08,190
up and running on it there and that's

1037
00:40:06,360 --> 00:40:11,310
written in Python flask with of UJS

1038
00:40:08,190 --> 00:40:13,200
front-end and then the just anywhere on

1039
00:40:11,310 --> 00:40:15,029
the internet application that is serving

1040
00:40:13,200 --> 00:40:16,470
up that particular payload right now

1041
00:40:15,030 --> 00:40:18,300
it's just a it's just a really simple

1042
00:40:16,470 --> 00:40:19,680
HTML file those of you that have pulled

1043
00:40:18,300 --> 00:40:21,810
it down you can continue to look at that

1044
00:40:19,680 --> 00:40:25,589
I'll take it offline later but it's just

1045
00:40:21,810 --> 00:40:27,990
a simple HTML file that subscribes to an

1046
00:40:25,590 --> 00:40:30,060
event source at the command and control

1047
00:40:27,990 --> 00:40:32,700
server that command and control server

1048
00:40:30,060 --> 00:40:34,770
pushes down JavaScript and then pushes

1049
00:40:32,700 --> 00:40:36,930
down payloads that basically tell all

1050
00:40:34,770 --> 00:40:39,060
the subscribers to go attack this

1051
00:40:36,930 --> 00:40:40,710
particular authentication page and even

1052
00:40:39,060 --> 00:40:42,839
though it's coming from

1053
00:40:40,710 --> 00:40:44,730
bukhan r.i.p because it's allowed to

1054
00:40:42,839 --> 00:40:46,920
make cross-origin requests based on

1055
00:40:44,730 --> 00:40:48,330
juice shops configuration that allows

1056
00:40:46,920 --> 00:40:50,070
the attack to take place from pretty

1057
00:40:48,330 --> 00:40:53,460
much anywhere on the globe anyone on the

1058
00:40:50,070 --> 00:40:56,180
internet and I don't think Tim to

1059
00:40:53,460 --> 00:40:58,349
mentioned you can also load credentials

1060
00:40:56,180 --> 00:40:59,700
asynchronously as well so he actually

1061
00:40:58,349 --> 00:41:01,050
showed what do you loaded the Koran

1062
00:40:59,700 --> 00:41:02,669
chose a large current credential list

1063
00:41:01,050 --> 00:41:05,910
you could just keep piping those in

1064
00:41:02,670 --> 00:41:07,320
piping those in changing those read his

1065
00:41:05,910 --> 00:41:09,060
queue on the back end so I'm using red

1066
00:41:07,320 --> 00:41:11,700
SQ for that on the back end is if you're

1067
00:41:09,060 --> 00:41:12,960
subscribed if it was funny because we

1068
00:41:11,700 --> 00:41:14,910
have we still have no idea what's

1069
00:41:12,960 --> 00:41:16,770
actually happening with this but when I

1070
00:41:14,910 --> 00:41:18,660
was pumping there was none of us we were

1071
00:41:16,770 --> 00:41:20,460
testing it about an hour ago neither of

1072
00:41:18,660 --> 00:41:20,910
us were thought we were subscribed to

1073
00:41:20,460 --> 00:41:22,710
anything

1074
00:41:20,910 --> 00:41:23,759
I started pumping creds into the Redis

1075
00:41:22,710 --> 00:41:26,099
server and all the sudden it just

1076
00:41:23,760 --> 00:41:27,839
started going down his phone was still

1077
00:41:26,099 --> 00:41:29,460
attacking it from last night on a

1078
00:41:27,839 --> 00:41:31,710
browser tab that he thought he closed

1079
00:41:29,460 --> 00:41:33,750
and it was in his pocket it was still it

1080
00:41:31,710 --> 00:41:35,220
was still subscribe just waiting so it's

1081
00:41:33,750 --> 00:41:37,050
one of those things where if you if you

1082
00:41:35,220 --> 00:41:38,490
subscribe to it on your phone you're

1083
00:41:37,050 --> 00:41:39,900
still subscribed to it right now you'll

1084
00:41:38,490 --> 00:41:42,930
need not you'll need to actually close

1085
00:41:39,900 --> 00:41:44,700
the tab for that to go away so it's it's

1086
00:41:42,930 --> 00:41:47,879
wickedly persistent in that regard as

1087
00:41:44,700 --> 00:41:50,220
well in case you didn't see it when you

1088
00:41:47,880 --> 00:41:51,980
pointed it out it was 800 requests and

1089
00:41:50,220 --> 00:41:54,990
he hadn't hit a megabyte of data

1090
00:41:51,980 --> 00:41:57,240
transferred from him and there's no way

1091
00:41:54,990 --> 00:41:59,009
if this was embedded in any type of big

1092
00:41:57,240 --> 00:42:00,660
site any type of ad network any type of

1093
00:41:59,010 --> 00:42:02,400
site that you weren't already kind of I

1094
00:42:00,660 --> 00:42:04,379
don't know what's going on here that you

1095
00:42:02,400 --> 00:42:06,869
would ever catch this unless you are

1096
00:42:04,380 --> 00:42:09,960
looking at a proxy or Splunk logs or

1097
00:42:06,869 --> 00:42:19,520
something like that answer your question

1098
00:42:09,960 --> 00:42:19,520
great yes I'm sorry I couldn't hear you

1099
00:42:21,109 --> 00:42:23,660
the

1100
00:42:22,370 --> 00:42:26,870
of the command-and-control server

1101
00:42:23,660 --> 00:42:29,839
basically to feed the attack information

1102
00:42:26,870 --> 00:42:32,540
down to the distributed client so so I

1103
00:42:29,840 --> 00:42:35,150
had to tell the brat I had to tell all

1104
00:42:32,540 --> 00:42:37,220
of your browsers which website to go

1105
00:42:35,150 --> 00:42:39,530
attack and how to actually send the

1106
00:42:37,220 --> 00:42:43,399
payload to it right so I could so that I

1107
00:42:39,530 --> 00:42:44,900
didn't really show it but I can real

1108
00:42:43,400 --> 00:42:45,800
quick we've got it still five more

1109
00:42:44,900 --> 00:42:47,930
minutes that we got five more minutes

1110
00:42:45,800 --> 00:42:50,690
yeah we got bonus here in the command

1111
00:42:47,930 --> 00:42:52,100
and control server you can add an attack

1112
00:42:50,690 --> 00:42:54,620
and so this is where you would come and

1113
00:42:52,100 --> 00:42:55,940
you would actually build the information

1114
00:42:54,620 --> 00:42:57,799
about the request that's going to be

1115
00:42:55,940 --> 00:42:59,360
made to that to the actual target

1116
00:42:57,800 --> 00:43:01,220
application so that's what it's a

1117
00:42:59,360 --> 00:43:04,220
basically just to tell all the different

1118
00:43:01,220 --> 00:43:05,779
bots what they need to do and receive

1119
00:43:04,220 --> 00:43:07,580
the responses obviously because this is

1120
00:43:05,780 --> 00:43:25,880
where the credentials populated down

1121
00:43:07,580 --> 00:43:27,650
here any other questions so I got a

1122
00:43:25,880 --> 00:43:29,860
couple in the back on the left hand side

1123
00:43:27,650 --> 00:43:29,860
first

1124
00:43:43,720 --> 00:43:47,899
well if it doesn't have any useful

1125
00:43:46,089 --> 00:43:49,880
functionality then there wouldn't be

1126
00:43:47,900 --> 00:43:52,309
anything we could do to it but Kevin do

1127
00:43:49,880 --> 00:43:53,420
you have something sorry I was just

1128
00:43:52,309 --> 00:43:56,119
telling him to repeat the question so

1129
00:43:53,420 --> 00:43:58,490
the question was if you have a brochure

1130
00:43:56,119 --> 00:44:00,920
where page unauthenticated page is just

1131
00:43:58,490 --> 00:44:02,779
an account just about us or you know

1132
00:44:00,920 --> 00:44:06,260
contact us or whatever doesn't have any

1133
00:44:02,780 --> 00:44:08,180
way of you know really you know invoking

1134
00:44:06,260 --> 00:44:09,950
anything bad but there's other pages

1135
00:44:08,180 --> 00:44:11,598
that are authenticated or that are a

1136
00:44:09,950 --> 00:44:14,419
login page from an unauthenticated

1137
00:44:11,599 --> 00:44:14,750
standpoint that could be used in a bad

1138
00:44:14,420 --> 00:44:16,910
way

1139
00:44:14,750 --> 00:44:18,020
can we pivot or do something from the

1140
00:44:16,910 --> 00:44:19,970
one page to the other page and the

1141
00:44:18,020 --> 00:44:22,970
answer is no you could still try to

1142
00:44:19,970 --> 00:44:24,890
launch a week like distributed denial of

1143
00:44:22,970 --> 00:44:27,919
service attack against that about us

1144
00:44:24,890 --> 00:44:30,140
which would probably be nil but unless

1145
00:44:27,920 --> 00:44:31,579
there was some other additional attack

1146
00:44:30,140 --> 00:44:33,650
vector that you could pivot through like

1147
00:44:31,579 --> 00:44:36,349
SS RF or something like that on that

1148
00:44:33,650 --> 00:44:39,559
specific page this is very important

1149
00:44:36,349 --> 00:44:43,849
every page returns access control allow

1150
00:44:39,559 --> 00:44:46,250
whatever headers back so every single

1151
00:44:43,849 --> 00:44:48,770
request goes out looks at that and then

1152
00:44:46,250 --> 00:44:51,020
you can then make a course request back

1153
00:44:48,770 --> 00:44:52,520
to it I think some other likely

1154
00:44:51,020 --> 00:44:54,859
candidates for this would be things like

1155
00:44:52,520 --> 00:44:56,180
user enumeration vulnerabilities things

1156
00:44:54,859 --> 00:44:57,950
that would exist from an unauthenticated

1157
00:44:56,180 --> 00:44:59,328
perspective you know like the about page

1158
00:44:57,950 --> 00:45:01,490
but the about page doesn't really have

1159
00:44:59,329 --> 00:45:02,990
any it's of static right so we're

1160
00:45:01,490 --> 00:45:04,490
looking for dynamic pages that are

1161
00:45:02,990 --> 00:45:08,720
unauthenticated would be ideal

1162
00:45:04,490 --> 00:45:17,598
candidates for stuff like this and one

1163
00:45:08,720 --> 00:45:19,730
one more in the back okay so his his

1164
00:45:17,599 --> 00:45:21,829
question was so swagger wants you to set

1165
00:45:19,730 --> 00:45:24,710
up things the bad way what's the right

1166
00:45:21,829 --> 00:45:26,599
way whitelisting um yeah yeah yeah I

1167
00:45:24,710 --> 00:45:29,210
think whitelisting is the is the proper

1168
00:45:26,599 --> 00:45:30,260
way to do this and in like Kevin said

1169
00:45:29,210 --> 00:45:33,859
one of the really interesting things

1170
00:45:30,260 --> 00:45:35,480
about this was that what was these

1171
00:45:33,859 --> 00:45:37,369
applications aren't even doing anything

1172
00:45:35,480 --> 00:45:39,049
crawls origin and the only reason that

1173
00:45:37,369 --> 00:45:42,170
they're putting across origin headers

1174
00:45:39,049 --> 00:45:44,029
there is to support swagger and so their

1175
00:45:42,170 --> 00:45:45,589
whitelist would be very small we're

1176
00:45:44,029 --> 00:45:49,640
talking a configuration file with maybe

1177
00:45:45,589 --> 00:45:51,259
one or two origins listed in there and

1178
00:45:49,640 --> 00:45:52,339
so most of the and then that's an

1179
00:45:51,260 --> 00:45:54,079
incredible thing about this these

1180
00:45:52,339 --> 00:45:55,609
extensions that you install like flask

1181
00:45:54,079 --> 00:45:57,619
ors for instance if you just

1182
00:45:55,609 --> 00:45:59,569
install flash cores which is what Stack

1183
00:45:57,619 --> 00:46:01,819
Overflow tells every Python developer to

1184
00:45:59,569 --> 00:46:04,670
do it's vulnerable or arbitrary

1185
00:46:01,819 --> 00:46:06,619
reflected origin right off the bat but

1186
00:46:04,670 --> 00:46:08,900
if you go in and just add a

1187
00:46:06,619 --> 00:46:10,880
configuration variable with a list of

1188
00:46:08,900 --> 00:46:12,890
origins it automatically applies the

1189
00:46:10,880 --> 00:46:15,559
whitelist so it's very easy to do it

1190
00:46:12,890 --> 00:46:17,089
right there's just so much bad guidance

1191
00:46:15,559 --> 00:46:19,759
out there telling folks how to do it

1192
00:46:17,089 --> 00:46:20,420
wrong but yes whitelisting is the right

1193
00:46:19,759 --> 00:46:24,999
answer

1194
00:46:20,420 --> 00:46:26,479
it is also unwieldy if you have a lot of

1195
00:46:24,999 --> 00:46:28,160
origin domains

1196
00:46:26,479 --> 00:46:30,439
it is unwieldy and that's just comes

1197
00:46:28,160 --> 00:46:34,190
down to the the spec RFC just wasn't

1198
00:46:30,440 --> 00:46:36,319
really made to support a large you know

1199
00:46:34,190 --> 00:46:37,849
kind of dynamically obviously if it's

1200
00:46:36,319 --> 00:46:39,890
dynamic then it opens you up for

1201
00:46:37,849 --> 00:46:41,239
arbitrary origin reflections so I'll

1202
00:46:39,890 --> 00:46:42,920
actually take these last two minutes to

1203
00:46:41,239 --> 00:46:44,299
make an interesting point about the spec

1204
00:46:42,920 --> 00:46:46,609
with regards to how it's actually been

1205
00:46:44,299 --> 00:46:48,259
implemented is the spec says to support

1206
00:46:46,609 --> 00:46:50,509
multiple origins what you're supposed to

1207
00:46:48,259 --> 00:46:52,880
do is respond with a comma delimited

1208
00:46:50,509 --> 00:46:55,519
list of origins within the actual header

1209
00:46:52,880 --> 00:46:57,890
response okay two problems with that

1210
00:46:55,519 --> 00:47:01,308
that could end up being a really really

1211
00:46:57,890 --> 00:47:03,739
big response header number two how many

1212
00:47:01,309 --> 00:47:05,449
of us actually want to disclose every

1213
00:47:03,739 --> 00:47:07,910
single person that's allowed to access

1214
00:47:05,449 --> 00:47:09,559
our API within a response header that

1215
00:47:07,910 --> 00:47:10,940
anyone can access right it doesn't make

1216
00:47:09,559 --> 00:47:13,969
any sense you said it was the new

1217
00:47:10,940 --> 00:47:15,019
robots.txt right so that header and so

1218
00:47:13,969 --> 00:47:16,670
the browser's actually don't even

1219
00:47:15,019 --> 00:47:18,410
support it if you try to if you try to

1220
00:47:16,670 --> 00:47:19,969
send that back the browser's won't even

1221
00:47:18,410 --> 00:47:22,390
obey it it doesn't even work so they

1222
00:47:19,969 --> 00:47:22,390
just flat

