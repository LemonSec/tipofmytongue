1
00:00:00,000 --> 00:00:04,350
operations on kubernetes a little about

2
00:00:03,240 --> 00:00:08,550
who we are

3
00:00:04,350 --> 00:00:10,469
yeah I'm Larry sudo and and I do a lot

4
00:00:08,550 --> 00:00:13,290
of cloud security testing and some

5
00:00:10,469 --> 00:00:16,198
Windows pen testing as well and this

6
00:00:13,290 --> 00:00:18,029
talk is kind of about how to take DevOps

7
00:00:16,199 --> 00:00:22,890
skills and and integrate it with your

8
00:00:18,029 --> 00:00:24,869
Red Team operations you know I am

9
00:00:22,890 --> 00:00:26,189
Jeff Holden I work at the largest

10
00:00:24,869 --> 00:00:28,429
college system in the United States

11
00:00:26,189 --> 00:00:30,900
assist so by day hacker by night

12
00:00:28,429 --> 00:00:37,290
currently living in an RV with three

13
00:00:30,900 --> 00:00:40,140
dogs one wife and one kid much fun so

14
00:00:37,290 --> 00:00:44,309
the goals of the of the project is

15
00:00:40,140 --> 00:00:46,800
basically to have the cube read working

16
00:00:44,309 --> 00:00:51,449
in all three of the major container

17
00:00:46,800 --> 00:00:54,419
systems are cloud providers AWS Google

18
00:00:51,449 --> 00:00:57,599
cloud engine and Azure we're starting

19
00:00:54,420 --> 00:01:01,039
with AWS is we have experience in so we

20
00:00:57,600 --> 00:01:03,930
have it working at this point in AWS

21
00:01:01,039 --> 00:01:06,360
want it to be automated you basically

22
00:01:03,930 --> 00:01:09,450
put all your configs into one config

23
00:01:06,360 --> 00:01:10,920
file run a script push it out and you'll

24
00:01:09,450 --> 00:01:14,100
have your CTO infrastructure up and

25
00:01:10,920 --> 00:01:16,409
running within about 20 minutes portable

26
00:01:14,100 --> 00:01:20,070
in scriptable so you can make any

27
00:01:16,409 --> 00:01:22,860
changes you want to and do it the same

28
00:01:20,070 --> 00:01:26,339
each time on even different cloud

29
00:01:22,860 --> 00:01:29,390
providers so if you've been in a coma

30
00:01:26,340 --> 00:01:32,700
for the last five years and just woke up

31
00:01:29,390 --> 00:01:34,439
what is the stalker thing similar to

32
00:01:32,700 --> 00:01:37,530
virtual machines but now it's sharing

33
00:01:34,439 --> 00:01:39,360
the kernel much more efficient less use

34
00:01:37,530 --> 00:01:41,579
of memory and disk and i/o and that

35
00:01:39,360 --> 00:01:45,720
stuff so it's you can fit more stuff on

36
00:01:41,579 --> 00:01:50,850
one machine there's an old example of

37
00:01:45,720 --> 00:01:53,130
whoops example of a docker file you you

38
00:01:50,850 --> 00:01:55,259
know pick the the docker image you want

39
00:01:53,130 --> 00:01:58,820
in this case it updates every time it

40
00:01:55,259 --> 00:02:01,829
runs installs engine X on this file

41
00:01:58,820 --> 00:02:03,479
alright so docker is great and all but

42
00:02:01,829 --> 00:02:06,630
what happens when you have hundreds of

43
00:02:03,479 --> 00:02:08,788
docker images you need a way to organize

44
00:02:06,630 --> 00:02:11,910
a organize it and get everything up and

45
00:02:08,788 --> 00:02:13,470
running in a organized fast fashion do

46
00:02:11,910 --> 00:02:15,240
deploys all that good stuff

47
00:02:13,470 --> 00:02:18,480
so that's where kubernetes comes into

48
00:02:15,240 --> 00:02:21,360
play so it's the orchestration engine

49
00:02:18,480 --> 00:02:24,959
you can deploy hundreds of different

50
00:02:21,360 --> 00:02:27,990
images at once do rolling deploys make

51
00:02:24,960 --> 00:02:30,630
changes all the good stuff that the

52
00:02:27,990 --> 00:02:34,860
DevOps people want need is built into

53
00:02:30,630 --> 00:02:37,049
kubernetes here's a little example of a

54
00:02:34,860 --> 00:02:40,020
Koopa a simple kubernetes file that

55
00:02:37,050 --> 00:02:43,200
deploys a team server that we're using

56
00:02:40,020 --> 00:02:45,390
the cobalt strike team server service

57
00:02:43,200 --> 00:02:49,280
for its re so you have different files

58
00:02:45,390 --> 00:02:52,549
for services deployment of images

59
00:02:49,280 --> 00:02:57,540
pushing out configs to the different

60
00:02:52,550 --> 00:03:00,000
docker images and that good stuff so

61
00:02:57,540 --> 00:03:01,739
yeah that's basically with the different

62
00:03:00,000 --> 00:03:04,770
kind of files that you'll see is

63
00:03:01,740 --> 00:03:07,440
deployments for for the docker images

64
00:03:04,770 --> 00:03:09,420
services you have to define those what

65
00:03:07,440 --> 00:03:11,579
what service will port you're exposing

66
00:03:09,420 --> 00:03:13,829
all that stuff helm charts are optional

67
00:03:11,580 --> 00:03:18,660
which we're making heavy use of that

68
00:03:13,830 --> 00:03:21,330
helps us push out services all right so

69
00:03:18,660 --> 00:03:24,420
what is the cop saying it's basically

70
00:03:21,330 --> 00:03:27,120
the heavy lifting on it works in AWS

71
00:03:24,420 --> 00:03:32,190
right now and into Google container

72
00:03:27,120 --> 00:03:35,420
engine you run it it sets up all the ec2

73
00:03:32,190 --> 00:03:38,640
instances for you assets of the VP sees

74
00:03:35,420 --> 00:03:43,140
load balancers creates your access list

75
00:03:38,640 --> 00:03:46,700
for you so otherwise you'd have to go

76
00:03:43,140 --> 00:03:49,230
through and set all those up manually

77
00:03:46,700 --> 00:03:51,480
here's an example of how easy it is to

78
00:03:49,230 --> 00:03:53,459
set up a high availability cluster and

79
00:03:51,480 --> 00:03:56,040
to availability zones in AWS you

80
00:03:53,459 --> 00:03:57,840
basically run one command and then just

81
00:03:56,040 --> 00:03:59,910
wait about 15 minutes and you have your

82
00:03:57,840 --> 00:04:05,340
cluster up and running all in one shot

83
00:03:59,910 --> 00:04:08,480
so once you have your cluster up and

84
00:04:05,340 --> 00:04:10,950
running you do need a way to access it

85
00:04:08,480 --> 00:04:12,530
we're going to be using external DNS we

86
00:04:10,950 --> 00:04:14,940
don't have this implemented quite yet

87
00:04:12,530 --> 00:04:17,730
but this is what we'll be doing it's

88
00:04:14,940 --> 00:04:22,250
basically just the pod you send it a

89
00:04:17,730 --> 00:04:26,610
yeah mol config file and it will

90
00:04:22,250 --> 00:04:27,760
automatically update route 53 to push to

91
00:04:26,610 --> 00:04:31,770
your

92
00:04:27,760 --> 00:04:31,770
load balancer automatically for you

93
00:04:32,430 --> 00:04:38,290
should also put point out that within an

94
00:04:35,080 --> 00:04:42,729
AWS the native commands you can register

95
00:04:38,290 --> 00:04:44,020
domains on the fly and set all the zones

96
00:04:42,730 --> 00:04:46,810
and everything up that you didn't need

97
00:04:44,020 --> 00:04:49,479
to do and will be supporting that in the

98
00:04:46,810 --> 00:04:52,270
future as well

99
00:04:49,480 --> 00:04:56,380
so SSL cert manager we're going to be

100
00:04:52,270 --> 00:04:59,530
using the built-in server manager

101
00:04:56,380 --> 00:05:01,900
function of docker you can use let's

102
00:04:59,530 --> 00:05:07,690
encrypt so you basically request a

103
00:05:01,900 --> 00:05:09,460
certificate puts it in etc D secrets so

104
00:05:07,690 --> 00:05:13,180
then you can just reference that in your

105
00:05:09,460 --> 00:05:22,120
docker files that your your deployment

106
00:05:13,180 --> 00:05:27,520
file sorry yeah and there's the link to

107
00:05:22,120 --> 00:05:31,050
that will make that available and so

108
00:05:27,520 --> 00:05:33,190
that was the easy part the overview

109
00:05:31,050 --> 00:05:36,970
since I'm the CISO I'm gonna hand it

110
00:05:33,190 --> 00:05:38,680
over now to the real engineer okay um so

111
00:05:36,970 --> 00:05:40,600
yeah so now I'm we're gonna get into the

112
00:05:38,680 --> 00:05:44,200
discussion of like so once you have your

113
00:05:40,600 --> 00:05:46,990
infrastructure up what do you do and how

114
00:05:44,200 --> 00:05:49,390
do I get my c2 up and running how do I

115
00:05:46,990 --> 00:05:53,470
get traffic into it and the background

116
00:05:49,390 --> 00:05:55,900
on that is basically if you if you done

117
00:05:53,470 --> 00:05:58,210
c2 infrastructure before a lot of people

118
00:05:55,900 --> 00:06:00,700
use you know you know for reader it's

119
00:05:58,210 --> 00:06:03,070
basically a redirector to a back of

120
00:06:00,700 --> 00:06:06,190
back-end and a lot of people use the

121
00:06:03,070 --> 00:06:09,730
Apache mod rewrite and then those with

122
00:06:06,190 --> 00:06:12,370
rules in mod rewrite to route stuff and

123
00:06:09,730 --> 00:06:17,020
to do filtering and rewriting and stuff

124
00:06:12,370 --> 00:06:18,130
like that so but if if you look at you

125
00:06:17,020 --> 00:06:21,099
know that was traditionally done with

126
00:06:18,130 --> 00:06:24,340
the V pcs but if you look at it now you

127
00:06:21,100 --> 00:06:26,470
the there's a lot of advanced proxy

128
00:06:24,340 --> 00:06:28,900
technical proxy technology available in

129
00:06:26,470 --> 00:06:32,650
cloud native environments and it's kind

130
00:06:28,900 --> 00:06:34,659
of what we're focusing on we've seen a

131
00:06:32,650 --> 00:06:36,609
lot of adoption of docker by Red Team

132
00:06:34,660 --> 00:06:38,800
red team's for Red Team infrastructure

133
00:06:36,610 --> 00:06:40,680
but not so much in container management

134
00:06:38,800 --> 00:06:43,450
and service mesh technology

135
00:06:40,680 --> 00:06:46,480
and then service mission technology has

136
00:06:43,450 --> 00:06:49,330
a lot of promise for sophisticated situ

137
00:06:46,480 --> 00:06:51,250
operations it was just the just the

138
00:06:49,330 --> 00:06:53,320
nimbleness of your ability to deploy

139
00:06:51,250 --> 00:06:57,760
redirect or change things on the fly

140
00:06:53,320 --> 00:07:00,460
redeploy stuff is just amazing yeah and

141
00:06:57,760 --> 00:07:03,130
then again with with kubernetes in the

142
00:07:00,460 --> 00:07:05,590
mix it's really easy to to like

143
00:07:03,130 --> 00:07:08,590
literally deploy redirect errs like at

144
00:07:05,590 --> 00:07:11,770
almost that will that's that's the

145
00:07:08,590 --> 00:07:13,869
background and then so we'll talk a

146
00:07:11,770 --> 00:07:15,250
little bit about what how to get your

147
00:07:13,870 --> 00:07:17,080
situ containerized

148
00:07:15,250 --> 00:07:20,950
this is kind of the simple part with

149
00:07:17,080 --> 00:07:24,159
docker what we're supporting initially

150
00:07:20,950 --> 00:07:26,289
is cobalt striking in Merlin and then

151
00:07:24,160 --> 00:07:31,930
you know we're gonna we're gonna do as

152
00:07:26,290 --> 00:07:34,270
many as possible in the coming months so

153
00:07:31,930 --> 00:07:36,970
this is just built building a docker

154
00:07:34,270 --> 00:07:41,740
image for cobalt strike from a docker

155
00:07:36,970 --> 00:07:46,420
file this is an actual docker file for

156
00:07:41,740 --> 00:07:48,790
cobalt strike so we actually in in the

157
00:07:46,420 --> 00:07:50,770
in the github there's gonna be a section

158
00:07:48,790 --> 00:07:53,080
for doctor files and for each see -

159
00:07:50,770 --> 00:07:55,359
there's gonna be it a docker file so you

160
00:07:53,080 --> 00:07:57,340
can build an image for it for coulis

161
00:07:55,360 --> 00:08:01,200
right you need a license so it's it's

162
00:07:57,340 --> 00:08:03,400
kind of like some of the images won't be

163
00:08:01,200 --> 00:08:04,960
available online because you'll have to

164
00:08:03,400 --> 00:08:16,780
build it yourself and stick it in this

165
00:08:04,960 --> 00:08:21,340
um you know right and then this is a

166
00:08:16,780 --> 00:08:25,690
sample docker docker file for Merlin and

167
00:08:21,340 --> 00:08:27,280
then so then um okay so that's a sad

168
00:08:25,690 --> 00:08:29,260
suit you got your docker image so where

169
00:08:27,280 --> 00:08:32,620
do you go next so you're gonna want to

170
00:08:29,260 --> 00:08:35,049
just have this concept so you're gonna

171
00:08:32,620 --> 00:08:37,210
have one as concept of a config map and

172
00:08:35,049 --> 00:08:39,760
and then also the concept of secrets if

173
00:08:37,210 --> 00:08:42,400
if you're doing passwords and

174
00:08:39,760 --> 00:08:44,410
certificates a lot of this stuff we're

175
00:08:42,400 --> 00:08:46,270
automating and in helm charts but I just

176
00:08:44,410 --> 00:08:49,270
want it for completeness discuss what a

177
00:08:46,270 --> 00:08:51,220
config map is and basically it's an it's

178
00:08:49,270 --> 00:08:53,920
it's kind of like a set of key value

179
00:08:51,220 --> 00:08:56,769
pairs in an object that

180
00:08:53,920 --> 00:09:02,639
um the container deployment can

181
00:08:56,769 --> 00:09:05,920
reference and then this is actually

182
00:09:02,639 --> 00:09:08,589
pulled from the helm chart we're making

183
00:09:05,920 --> 00:09:12,310
available for cobalt strike this is the

184
00:09:08,589 --> 00:09:15,399
actual deployment file deployment

185
00:09:12,310 --> 00:09:18,040
template in in the helm chart as this

186
00:09:15,399 --> 00:09:20,050
what this does is it this gives you

187
00:09:18,040 --> 00:09:22,449
everything you need to deploy your coal

188
00:09:20,050 --> 00:09:27,310
strike image into into a kubernetes

189
00:09:22,449 --> 00:09:28,990
environment and then this is then yeah

190
00:09:27,310 --> 00:09:32,109
this is just the rest of it that so that

191
00:09:28,990 --> 00:09:33,699
was the whole entire deployment template

192
00:09:32,110 --> 00:09:36,610
and then what the template does is

193
00:09:33,699 --> 00:09:40,240
there's a there's a values file by using

194
00:09:36,610 --> 00:09:44,019
a mo file that you populate with the the

195
00:09:40,240 --> 00:09:46,470
values that these variables in pick up

196
00:09:44,019 --> 00:09:49,870
and then then kubernetes handles all the

197
00:09:46,470 --> 00:09:53,139
the you know container creation

198
00:09:49,870 --> 00:09:54,339
deployment IP address and everything you

199
00:09:53,139 --> 00:09:57,060
know one thing is really cool is if

200
00:09:54,339 --> 00:10:01,779
people work with the team server

201
00:09:57,060 --> 00:10:02,920
traditionally you have to when you start

202
00:10:01,779 --> 00:10:05,680
it up you have to provide that I

203
00:10:02,920 --> 00:10:08,050
password IP address and then if you're

204
00:10:05,680 --> 00:10:10,060
using a valuable situ profiles you have

205
00:10:08,050 --> 00:10:12,069
to provide that with this that it's

206
00:10:10,060 --> 00:10:16,180
that's all automated you just put that

207
00:10:12,070 --> 00:10:18,339
into a file on the values that yellow

208
00:10:16,180 --> 00:10:20,260
file and then you with the helm command

209
00:10:18,339 --> 00:10:23,320
you can just deploy it at will anywhere

210
00:10:20,260 --> 00:10:27,189
you want basically as many copies as you

211
00:10:23,320 --> 00:10:30,760
want you can actually if you look in the

212
00:10:27,190 --> 00:10:32,860
previous slide you can actually create

213
00:10:30,760 --> 00:10:34,990
replicas so if you get a lot if you have

214
00:10:32,860 --> 00:10:37,690
a lot of implants running you can

215
00:10:34,990 --> 00:10:39,430
actually scale it so you could have

216
00:10:37,690 --> 00:10:46,480
multiple cobalt strike servers running

217
00:10:39,430 --> 00:10:48,160
simultaneously and then and then yeah so

218
00:10:46,480 --> 00:10:50,589
now this is a this is something that's

219
00:10:48,160 --> 00:10:52,810
that's I'm going to get into ingress

220
00:10:50,589 --> 00:10:54,970
controllers so this is actually a

221
00:10:52,810 --> 00:10:58,839
service stuff in it so so when you when

222
00:10:54,970 --> 00:11:03,699
you start up the team server the by

223
00:10:58,839 --> 00:11:06,160
default you have port 554 for just for

224
00:11:03,699 --> 00:11:06,729
connecting to and managing it creating

225
00:11:06,160 --> 00:11:09,449
the

226
00:11:06,730 --> 00:11:11,920
the beacons and all that stuff you

227
00:11:09,450 --> 00:11:14,740
probably want to make that private so

228
00:11:11,920 --> 00:11:15,849
what in because the UM for initial

229
00:11:14,740 --> 00:11:20,680
ingress control are going to talk about

230
00:11:15,850 --> 00:11:23,140
the doesn't support non HTTP HTTP ports

231
00:11:20,680 --> 00:11:27,579
you're gonna have to basically create an

232
00:11:23,140 --> 00:11:28,840
ingress controller load balancer and

233
00:11:27,580 --> 00:11:31,630
soon and guess which is a load balancer

234
00:11:28,840 --> 00:11:34,450
for managing the team server and this is

235
00:11:31,630 --> 00:11:37,900
just a sample of how you would create a

236
00:11:34,450 --> 00:11:41,380
service that spins up a AWS load

237
00:11:37,900 --> 00:11:44,140
balancer connections so you can connect

238
00:11:41,380 --> 00:11:48,460
to the team server and you know in a

239
00:11:44,140 --> 00:11:52,030
private in a private VPC yeah so that's

240
00:11:48,460 --> 00:11:53,800
that and then this is a this is the

241
00:11:52,030 --> 00:11:58,290
server's definition for the Kobalt

242
00:11:53,800 --> 00:12:02,579
listener this basically is the port 80

243
00:11:58,290 --> 00:12:07,780
that you that the beacon checks in to

244
00:12:02,580 --> 00:12:09,490
and then if you use certificates in like

245
00:12:07,780 --> 00:12:14,170
for this case in the case then the

246
00:12:09,490 --> 00:12:16,660
merlin c2 server you'll need

247
00:12:14,170 --> 00:12:20,589
certificates because it's it's it's TLS

248
00:12:16,660 --> 00:12:23,410
but pretty much by default so you want

249
00:12:20,590 --> 00:12:25,510
to create a certificate for it the nice

250
00:12:23,410 --> 00:12:27,910
thing about kubernetes is it'll mount

251
00:12:25,510 --> 00:12:29,920
this you just have to create these

252
00:12:27,910 --> 00:12:31,870
certificates as objects and then

253
00:12:29,920 --> 00:12:34,660
communities will mount this stuff into

254
00:12:31,870 --> 00:12:37,600
your container and then as we discussed

255
00:12:34,660 --> 00:12:40,350
earlier cert manager cannot can automate

256
00:12:37,600 --> 00:12:40,350
the actual

257
00:12:43,410 --> 00:12:47,279
acquisition and updates of these

258
00:12:45,329 --> 00:12:50,758
certificates and you can just create

259
00:12:47,279 --> 00:12:53,279
multiple certificate objects secret

260
00:12:50,759 --> 00:12:55,139
certificate objects and in the community

261
00:12:53,279 --> 00:12:57,300
in your kubernetes cluster and then all

262
00:12:55,139 --> 00:13:02,579
your different SI toos during the as you

263
00:12:57,300 --> 00:13:04,979
deploy them can just pick them up yeah

264
00:13:02,579 --> 00:13:09,109
and this is the amount of how how the

265
00:13:04,980 --> 00:13:09,110
certificates mounted into the container

266
00:13:10,459 --> 00:13:15,239
okay so now I'm going to get a little

267
00:13:13,649 --> 00:13:17,699
bit into ingress controllers this is

268
00:13:15,240 --> 00:13:22,350
basically how are you gonna get the the

269
00:13:17,699 --> 00:13:25,139
traffic into the c2 server or phishing

270
00:13:22,350 --> 00:13:27,889
server whatever whatever c2 and first is

271
00:13:25,139 --> 00:13:31,439
c2 or Red Team infrastructure you have

272
00:13:27,889 --> 00:13:35,339
ingress controllers basically are are

273
00:13:31,439 --> 00:13:37,199
the are the routers there like what used

274
00:13:35,339 --> 00:13:39,600
to be edge routers but they're like

275
00:13:37,199 --> 00:13:41,939
software soft it's also off configurable

276
00:13:39,600 --> 00:13:45,000
software now they're basically like

277
00:13:41,939 --> 00:13:49,050
reverse proxies and this is the engine

278
00:13:45,000 --> 00:13:52,920
x1 and this is just the way you install

279
00:13:49,050 --> 00:13:59,219
it and you want to install it as layer 4

280
00:13:52,920 --> 00:14:03,329
so you can you can use TCP so the load

281
00:13:59,220 --> 00:14:08,850
balance or it it it creates this can be

282
00:14:03,329 --> 00:14:10,979
used for layer for not just layer 7 okay

283
00:14:08,850 --> 00:14:13,079
so config Maps it engine it so nginx

284
00:14:10,980 --> 00:14:16,500
ingress control is very configurable and

285
00:14:13,079 --> 00:14:22,410
if you're gonna do rewriting and

286
00:14:16,500 --> 00:14:26,009
filtering in your in your c2 profiles or

287
00:14:22,410 --> 00:14:28,380
whatever c2 server you have and you're

288
00:14:26,009 --> 00:14:30,540
gonna you're gonna want as see if the

289
00:14:28,380 --> 00:14:32,939
beacon or the implant checks in you're

290
00:14:30,540 --> 00:14:36,630
going to want to read some something in

291
00:14:32,939 --> 00:14:38,519
the headers or that that's coming in and

292
00:14:36,630 --> 00:14:40,879
you wanna if it if it's not correct you

293
00:14:38,519 --> 00:14:43,559
want to redirect it or sinkhole it

294
00:14:40,879 --> 00:14:46,139
you're gonna want to be able to do that

295
00:14:43,559 --> 00:14:48,899
and then with the nginx English

296
00:14:46,139 --> 00:14:54,600
controller you're gonna have to do some

297
00:14:48,899 --> 00:14:57,779
annotations and all so if you're using C

298
00:14:54,600 --> 00:15:05,970
Tuesday or h2 to base your Lobby

299
00:14:57,779 --> 00:15:09,509
to add add that as well and then this is

300
00:15:05,970 --> 00:15:13,620
the actual service definition for an

301
00:15:09,509 --> 00:15:15,059
ingress so the ingress is this is how

302
00:15:13,620 --> 00:15:19,499
the ingress control is actually

303
00:15:15,059 --> 00:15:22,620
configured and this is basically saying

304
00:15:19,499 --> 00:15:25,819
that you're going to allow in the

305
00:15:22,620 --> 00:15:28,920
traffic through the load balancer and

306
00:15:25,819 --> 00:15:31,740
through the nginx ingress and then you

307
00:15:28,920 --> 00:15:34,649
put in the annotations and any anything

308
00:15:31,740 --> 00:15:36,540
that's any type of custom logic that you

309
00:15:34,649 --> 00:15:40,399
want that and everything is everything

310
00:15:36,540 --> 00:15:43,019
that its traditional nginx server

311
00:15:40,399 --> 00:15:45,240
reverse proxy supports you have access

312
00:15:43,019 --> 00:15:47,129
through through these these annotations

313
00:15:45,240 --> 00:15:49,199
and this basically what this does is

314
00:15:47,129 --> 00:15:54,149
this is saying if something connects

315
00:15:49,199 --> 00:15:56,609
that to this service that we set up as

316
00:15:54,149 --> 00:16:00,660
cobalt listener which is basically the

317
00:15:56,610 --> 00:16:03,779
the cuomo strike team server just if

318
00:16:00,660 --> 00:16:06,360
something hits URL slash this is what

319
00:16:03,779 --> 00:16:09,319
one without a now you will see two

320
00:16:06,360 --> 00:16:15,480
profile just route it directly to the

321
00:16:09,319 --> 00:16:16,589
cobalt the team server and then now

322
00:16:15,480 --> 00:16:21,059
we're going to go into a little bit of

323
00:16:16,589 --> 00:16:23,550
the details of redirection i'll focus on

324
00:16:21,059 --> 00:16:27,379
nginx ingress first because that's

325
00:16:23,550 --> 00:16:31,319
really popular in in in kubernetes and

326
00:16:27,379 --> 00:16:33,839
and then the the one we like best is is

327
00:16:31,319 --> 00:16:35,309
is ISTE oh we've had a lot of success

328
00:16:33,839 --> 00:16:38,660
with that so i'll spend quite a bit of

329
00:16:35,309 --> 00:16:42,959
time on that so this is basically

330
00:16:38,660 --> 00:16:46,350
running engine X as a redirector so you

331
00:16:42,959 --> 00:16:48,660
have your implants you have your load

332
00:16:46,350 --> 00:16:50,790
balancer you have the nginx

333
00:16:48,660 --> 00:16:53,219
english controller which when you when

334
00:16:50,790 --> 00:16:55,559
you install it automatically creates the

335
00:16:53,220 --> 00:16:58,259
load balancer and then the ingress

336
00:16:55,559 --> 00:17:02,009
resource is where you can figure the the

337
00:16:58,259 --> 00:17:03,809
routing and the filtering and the and

338
00:17:02,009 --> 00:17:06,270
yeah whatever redirection you're doing

339
00:17:03,809 --> 00:17:08,339
and then and then this that's your

340
00:17:06,270 --> 00:17:09,319
back-end stuff your c2 server team

341
00:17:08,339 --> 00:17:10,909
server

342
00:17:09,319 --> 00:17:13,730
and then you know if you have like a

343
00:17:10,910 --> 00:17:17,150
payload dropper or phishing server you

344
00:17:13,730 --> 00:17:21,920
can actually route route to that as

345
00:17:17,150 --> 00:17:26,810
needed yeah and these are the

346
00:17:21,920 --> 00:17:29,230
annotations for for in the ingress in

347
00:17:26,810 --> 00:17:32,360
the ingress object that an ingress um

348
00:17:29,230 --> 00:17:34,400
definition or manifest as you as you

349
00:17:32,360 --> 00:17:36,709
call it and you could you have to

350
00:17:34,400 --> 00:17:39,830
reference this and then I'm sure some

351
00:17:36,710 --> 00:17:43,330
examples but but just to point out that

352
00:17:39,830 --> 00:17:45,649
the annotations to do rewrites and

353
00:17:43,330 --> 00:17:48,110
annotations to do what's called

354
00:17:45,650 --> 00:17:53,080
configuration snippets which is actually

355
00:17:48,110 --> 00:17:58,699
how how you specify stuff you know

356
00:17:53,080 --> 00:18:05,480
rewrite and well very specifics nginx

357
00:17:58,700 --> 00:18:09,470
directives so if you if you have some

358
00:18:05,480 --> 00:18:11,630
experience with mod rewrite you could

359
00:18:09,470 --> 00:18:15,200
actually and there's a lot of examples

360
00:18:11,630 --> 00:18:19,040
on the out there on using mod rewrite to

361
00:18:15,200 --> 00:18:21,500
create filtering and redirection you can

362
00:18:19,040 --> 00:18:26,530
actually convert it to nginx rewrite and

363
00:18:21,500 --> 00:18:29,710
then drop that in into your ingress

364
00:18:26,530 --> 00:18:36,680
manifest and then you can basically

365
00:18:29,710 --> 00:18:38,330
reuse stuff so then if you if you want

366
00:18:36,680 --> 00:18:41,180
to do sink holing and stuff you'll have

367
00:18:38,330 --> 00:18:42,889
to create a back-end and that's that's a

368
00:18:41,180 --> 00:18:46,310
back-end so basically that's something

369
00:18:42,890 --> 00:18:48,500
outside of the cluster and so if you see

370
00:18:46,310 --> 00:18:51,620
if something doesn't match on the

371
00:18:48,500 --> 00:18:53,570
ingress inbound on in your filtering

372
00:18:51,620 --> 00:18:57,219
rule then you can send it to what's

373
00:18:53,570 --> 00:18:59,240
called the back an external name and

374
00:18:57,220 --> 00:19:03,350
this would be like something like Google

375
00:18:59,240 --> 00:19:06,890
com yeah then this would be the fine

376
00:19:03,350 --> 00:19:09,620
this would be the final definition this

377
00:19:06,890 --> 00:19:14,450
is an ingress definition which does a a

378
00:19:09,620 --> 00:19:17,360
match on that that this the regular

379
00:19:14,450 --> 00:19:20,900
expression on the user agent so that's

380
00:19:17,360 --> 00:19:22,580
like you parse out that what's important

381
00:19:20,900 --> 00:19:26,900
to you in the user agent and

382
00:19:22,580 --> 00:19:29,210
and if that if that doesn't happen then

383
00:19:26,900 --> 00:19:32,870
then you basically redirect them to

384
00:19:29,210 --> 00:19:38,390
google.com 404 so this is this is just a

385
00:19:32,870 --> 00:19:41,659
very basic rewrite redirection filtering

386
00:19:38,390 --> 00:19:47,660
rule that you can customize for you know

387
00:19:41,660 --> 00:19:50,210
your your situ environment and then this

388
00:19:47,660 --> 00:19:58,880
is just the rest this is just the rest

389
00:19:50,210 --> 00:20:04,250
of it yeah this is just another example

390
00:19:58,880 --> 00:20:08,150
of a rewrite rule this just check this

391
00:20:04,250 --> 00:20:10,520
is a server snippet as opposed to

392
00:20:08,150 --> 00:20:14,300
configuration snip and this just checks

393
00:20:10,520 --> 00:20:17,180
to again the user agent and then if it

394
00:20:14,300 --> 00:20:19,639
that's not in the user agent field then

395
00:20:17,180 --> 00:20:26,120
it just read returns it to a different

396
00:20:19,640 --> 00:20:29,360
URL and then if you're using TLS in your

397
00:20:26,120 --> 00:20:34,189
situ you'll want to do SSL pass-through

398
00:20:29,360 --> 00:20:38,240
so basically if the c2 server is TLS

399
00:20:34,190 --> 00:20:41,900
configured for TLS you're gonna need to

400
00:20:38,240 --> 00:20:45,230
let the the TLS traffic go hit it on the

401
00:20:41,900 --> 00:20:47,150
back end and and then this is just the

402
00:20:45,230 --> 00:20:52,340
way you set up the ingress controller to

403
00:20:47,150 --> 00:20:55,130
do that and then it will have this stuff

404
00:20:52,340 --> 00:20:58,699
a lot of most of automated though in the

405
00:20:55,130 --> 00:21:02,930
project this is for the details for

406
00:20:58,700 --> 00:21:05,960
completeness and then once you get it

407
00:21:02,930 --> 00:21:08,180
all configured you have your ingress

408
00:21:05,960 --> 00:21:11,780
rule you have all your rewriting

409
00:21:08,180 --> 00:21:16,370
filtering a redirecting setup then you

410
00:21:11,780 --> 00:21:20,060
can use this kubernetes command to in

411
00:21:16,370 --> 00:21:22,100
that it's actually the pod so you'll see

412
00:21:20,060 --> 00:21:25,490
you you'll have your Inga's controller

413
00:21:22,100 --> 00:21:29,570
running as a pod and then you basically

414
00:21:25,490 --> 00:21:31,910
can check its nginx Kankan comp to make

415
00:21:29,570 --> 00:21:34,629
sure that you all your all your rules

416
00:21:31,910 --> 00:21:34,630
are correct

417
00:21:34,659 --> 00:21:43,690
okay so now now I'm gonna talk about a

418
00:21:38,720 --> 00:21:48,470
service mesh a service mesh is actually

419
00:21:43,690 --> 00:21:52,820
under under the it's basically a a proxy

420
00:21:48,470 --> 00:21:55,279
that sits on on each each container

421
00:21:52,820 --> 00:21:58,070
cluster or pod as they call it in

422
00:21:55,279 --> 00:22:01,549
kubernetes and it's fully fully it's

423
00:21:58,070 --> 00:22:03,320
fully controllable by llamó policy so

424
00:22:01,549 --> 00:22:05,240
you couldn't you couldn't actually have

425
00:22:03,320 --> 00:22:06,889
it on the edge as an ingress controller

426
00:22:05,240 --> 00:22:09,140
or you can have it on every single pot

427
00:22:06,890 --> 00:22:12,429
in your in your cluster and do very

428
00:22:09,140 --> 00:22:15,710
sophisticated traffic management traffic

429
00:22:12,429 --> 00:22:19,010
analysis redirection and all that stuff

430
00:22:15,710 --> 00:22:21,980
so so initially we we were working with

431
00:22:19,010 --> 00:22:25,149
nginx ingress but then when we realized

432
00:22:21,980 --> 00:22:28,309
that you know service mesh is probably

433
00:22:25,149 --> 00:22:30,049
has a lot more functionality and it was

434
00:22:28,309 --> 00:22:33,049
actually a lot it's a lot easier to set

435
00:22:30,049 --> 00:22:36,080
up initially it's a conceptually a

436
00:22:33,049 --> 00:22:38,899
little different but once the just the

437
00:22:36,080 --> 00:22:42,500
the this geo projects the ability to do

438
00:22:38,899 --> 00:22:44,479
very sophisticated traffic management

439
00:22:42,500 --> 00:22:49,070
it's very impressive and it's really

440
00:22:44,480 --> 00:22:50,690
useful for c2 infrastructure and then

441
00:22:49,070 --> 00:22:56,389
yeah the basically way it works is

442
00:22:50,690 --> 00:22:59,419
you've got the Envoy proxy sitting on a

443
00:22:56,390 --> 00:23:01,940
node that that is actually an ingress

444
00:22:59,419 --> 00:23:04,909
node it allocates a load balancer and

445
00:23:01,940 --> 00:23:07,789
then you configure that and and you

446
00:23:04,909 --> 00:23:09,380
configure the routing the filtering the

447
00:23:07,789 --> 00:23:13,669
redirection all that stuff on there and

448
00:23:09,380 --> 00:23:15,020
then you have your your c2 services

449
00:23:13,669 --> 00:23:18,760
deployed in the back and then you route

450
00:23:15,020 --> 00:23:18,760
to them based on the ingress traffic

451
00:23:19,750 --> 00:23:27,230
yeah the Envoy proxy is basically the

452
00:23:24,649 --> 00:23:31,428
core of this I don't know if people are

453
00:23:27,230 --> 00:23:33,080
familiar with envoy yeah envoy it comes

454
00:23:31,429 --> 00:23:36,409
out it comes out of lyft it's probably

455
00:23:33,080 --> 00:23:39,470
the most advanced edge edge proxy

456
00:23:36,409 --> 00:23:41,929
available and you can use it by itself

457
00:23:39,470 --> 00:23:44,000
but this what this CEO project did is

458
00:23:41,929 --> 00:23:46,009
they created a whole

459
00:23:44,000 --> 00:23:48,470
sort of management infrastructure around

460
00:23:46,009 --> 00:23:50,629
it you can now you know deploy as many

461
00:23:48,470 --> 00:23:53,840
of these envoy proxies as you want and

462
00:23:50,629 --> 00:23:56,178
just in this control the policy from a

463
00:23:53,840 --> 00:24:00,850
central location using using the the

464
00:23:56,179 --> 00:24:03,950
Amal and yeah and in and it's fully full

465
00:24:00,850 --> 00:24:07,658
another nice thing is the kubernetes

466
00:24:03,950 --> 00:24:09,889
kubernetes ingress is kind of focused on

467
00:24:07,659 --> 00:24:14,210
ingress definitions are kind of focused

468
00:24:09,889 --> 00:24:19,490
on HTTP HTTP with SEO and on boy you

469
00:24:14,210 --> 00:24:23,840
have full TCP HTTP layer seven layer

470
00:24:19,490 --> 00:24:26,840
four you can actually if you have a c2

471
00:24:23,840 --> 00:24:29,090
and you want to do DNS no problem yeah

472
00:24:26,840 --> 00:24:31,908
you can actually you can actually do DNS

473
00:24:29,090 --> 00:24:35,090
you can actually yeah do HTTP eighty

474
00:24:31,909 --> 00:24:40,009
whatever you want simultaneously in in

475
00:24:35,090 --> 00:24:43,668
one configuration so this is it this is

476
00:24:40,009 --> 00:24:46,549
installing Sto this is actually um we've

477
00:24:43,669 --> 00:24:48,710
automated all this but I just just is

478
00:24:46,549 --> 00:24:53,779
just to show you what it what it

479
00:24:48,710 --> 00:24:56,649
involves and then once you install this

480
00:24:53,779 --> 00:25:00,529
do this is what this is what the UM

481
00:24:56,649 --> 00:25:03,610
ingress controller looks like this is

482
00:25:00,529 --> 00:25:07,580
the ingress controller that's the load

483
00:25:03,610 --> 00:25:10,490
balancer that's attached to it and then

484
00:25:07,580 --> 00:25:12,620
then you can actually specify what ports

485
00:25:10,490 --> 00:25:15,740
you want the ingress controller to have

486
00:25:12,620 --> 00:25:17,870
available and these are just some

487
00:25:15,740 --> 00:25:21,919
default ports that are there but it's

488
00:25:17,870 --> 00:25:24,549
all configurable and you can have

489
00:25:21,919 --> 00:25:27,710
multiple ingress so so let's say it

490
00:25:24,549 --> 00:25:30,918
translate that to your e-reader actors

491
00:25:27,710 --> 00:25:35,690
so with with this you can you can just

492
00:25:30,919 --> 00:25:38,120
basically script out all your redirect

493
00:25:35,690 --> 00:25:39,710
errs how many you want you can have as

494
00:25:38,120 --> 00:25:44,029
many as you want as long as long as the

495
00:25:39,710 --> 00:25:45,710
cloud provider and you can has has been

496
00:25:44,029 --> 00:25:47,389
you or you have the resources you can

497
00:25:45,710 --> 00:25:50,870
spin up as many of these redirect errs

498
00:25:47,389 --> 00:25:53,299
as you want and if they get you know

499
00:25:50,870 --> 00:25:56,299
blocked you can just spin up another one

500
00:25:53,299 --> 00:25:58,840
and it's just just from a very simple

501
00:25:56,299 --> 00:26:02,480
yeah Mille configuration

502
00:25:58,840 --> 00:26:06,199
and then so when you when you do

503
00:26:02,480 --> 00:26:09,760
configure a read redirector there's a

504
00:26:06,200 --> 00:26:12,650
file is that a eminence in this geo

505
00:26:09,760 --> 00:26:15,289
distribution and then you can in there

506
00:26:12,650 --> 00:26:19,220
you can go in and you can set the knee

507
00:26:15,289 --> 00:26:21,350
then you just basically cut and paste

508
00:26:19,220 --> 00:26:23,330
this thing in mode and just as long as

509
00:26:21,350 --> 00:26:26,750
you give it a new if the ingress gateway

510
00:26:23,330 --> 00:26:28,309
a new name so this is it's doing your

511
00:26:26,750 --> 00:26:29,480
scripts away that's the default ingress

512
00:26:28,309 --> 00:26:32,629
gateway as long as you give it a new

513
00:26:29,480 --> 00:26:37,010
name a multiple of these ingress

514
00:26:32,630 --> 00:26:39,230
gateways and you can have them listening

515
00:26:37,010 --> 00:26:40,850
on different ports and each ingress

516
00:26:39,230 --> 00:26:43,039
gateway will have its own load balancer

517
00:26:40,850 --> 00:26:45,889
so will have its own unique IP address

518
00:26:43,039 --> 00:26:47,419
so if you need multiple redirect errs

519
00:26:45,890 --> 00:26:50,270
and different with different different

520
00:26:47,419 --> 00:26:54,340
IPS if things get burned then you can

521
00:26:50,270 --> 00:26:57,620
you can kind of set it up that way and

522
00:26:54,340 --> 00:27:00,649
then you can also deploy your deploy

523
00:26:57,620 --> 00:27:02,870
your own in ingress gateway that way

524
00:27:00,650 --> 00:27:05,270
that was the values that yeah mo that

525
00:27:02,870 --> 00:27:08,479
drives this configuration from a helmet

526
00:27:05,270 --> 00:27:12,408
art but you could you can actually

527
00:27:08,480 --> 00:27:15,890
deploy your own as well but like a lot

528
00:27:12,409 --> 00:27:17,809
of this stuff is we're handling we're

529
00:27:15,890 --> 00:27:21,530
automating so you so will be you'll be

530
00:27:17,809 --> 00:27:23,990
able to just from the cube read command

531
00:27:21,530 --> 00:27:25,760
line just deploy an ingress gateway just

532
00:27:23,990 --> 00:27:27,950
tell what you know what what his

533
00:27:25,760 --> 00:27:34,190
properties are and it'll create a new

534
00:27:27,950 --> 00:27:36,860
one for you and deploy it and then so so

535
00:27:34,190 --> 00:27:39,350
now you have your ingress gateway

536
00:27:36,860 --> 00:27:41,658
launched or multiple ingress gateways

537
00:27:39,350 --> 00:27:45,189
launched now you want to configure it

538
00:27:41,659 --> 00:27:48,950
and this is basically how you configure

539
00:27:45,190 --> 00:27:52,370
configure it you create what's called a

540
00:27:48,950 --> 00:27:55,850
gateway which actually exposes the ports

541
00:27:52,370 --> 00:27:57,439
on the ingress controller load balancer

542
00:27:55,850 --> 00:27:58,699
that you're going to bring into the

543
00:27:57,440 --> 00:28:02,750
cluster that you're going to attach to

544
00:27:58,700 --> 00:28:04,880
your c2 environment and then you create

545
00:28:02,750 --> 00:28:06,559
what's called a virtual service which

546
00:28:04,880 --> 00:28:09,080
actually is

547
00:28:06,559 --> 00:28:11,360
is the mediator between the Gateway and

548
00:28:09,080 --> 00:28:14,178
your pop in the pod the actual actual

549
00:28:11,360 --> 00:28:17,629
running container and then with with

550
00:28:14,179 --> 00:28:24,460
that you you connect the traffic to your

551
00:28:17,629 --> 00:28:29,299
situ and then so this is a gateway

552
00:28:24,460 --> 00:28:31,100
configuration this actually takes the

553
00:28:29,299 --> 00:28:34,399
traffic from the ingress controller load

554
00:28:31,100 --> 00:28:38,408
balancer and exposes it to the cluster

555
00:28:34,399 --> 00:28:40,248
and basically exposes it to sto

556
00:28:38,409 --> 00:28:42,619
management of on boy

557
00:28:40,249 --> 00:28:45,320
so then through through and this is

558
00:28:42,619 --> 00:28:48,559
basically the entry point to the mesh

559
00:28:45,320 --> 00:28:50,809
and so in this in this case this is an

560
00:28:48,559 --> 00:28:54,379
example of what then the entry point to

561
00:28:50,809 --> 00:28:57,080
a mesh that's kind of focused on COBOL

562
00:28:54,379 --> 00:28:58,759
strikes team server looks like so we're

563
00:28:57,080 --> 00:29:03,830
bringing in port 80 we're bringing in

564
00:28:58,759 --> 00:29:09,499
five 150 to do the administration and

565
00:29:03,830 --> 00:29:12,439
then we're 443 if as pass-through if we

566
00:29:09,499 --> 00:29:15,230
were doing SSL on this on this team

567
00:29:12,440 --> 00:29:16,730
server for the beacons the nice thing

568
00:29:15,230 --> 00:29:18,080
about is it's much easier to configure

569
00:29:16,730 --> 00:29:22,340
it than the nginx

570
00:29:18,080 --> 00:29:24,350
ingress and so I think it's it's a

571
00:29:22,340 --> 00:29:27,289
better way to go but we're gonna support

572
00:29:24,350 --> 00:29:32,209
nginx ingress and and and this your

573
00:29:27,289 --> 00:29:33,950
service mesh in this project and then

574
00:29:32,210 --> 00:29:36,830
the virtual service as I mentioned

575
00:29:33,950 --> 00:29:39,860
before it defines the traffic routing

576
00:29:36,830 --> 00:29:41,749
rules to apply when was the one that

577
00:29:39,860 --> 00:29:43,969
when the when the implant or beacon

578
00:29:41,749 --> 00:29:47,749
comes in it's going to it's gonna hit a

579
00:29:43,970 --> 00:29:50,659
hit a hostname and then so the virtual

580
00:29:47,749 --> 00:29:53,480
service will get notification of that

581
00:29:50,659 --> 00:29:56,119
and then and then that that specifies

582
00:29:53,480 --> 00:29:59,869
the routing rules to access the actual

583
00:29:56,119 --> 00:30:03,999
running container and then here you can

584
00:29:59,869 --> 00:30:07,100
do the like what we talked about in

585
00:30:03,999 --> 00:30:10,700
nginx ingress here you set up your your

586
00:30:07,100 --> 00:30:14,719
matching rules to do you know rewriting

587
00:30:10,700 --> 00:30:16,070
filtering and etc and it's another nice

588
00:30:14,720 --> 00:30:19,190
thing about

589
00:30:16,070 --> 00:30:24,590
about this do is its support fully

590
00:30:19,190 --> 00:30:27,410
supports HTTP TCP HTTP to UDP I mean

591
00:30:24,590 --> 00:30:32,750
whatever your c2 is you can actually

592
00:30:27,410 --> 00:30:36,890
specify routing rules for it and then

593
00:30:32,750 --> 00:30:39,790
you can also attach to each each ingress

594
00:30:36,890 --> 00:30:42,020
controller you can attach multiple

595
00:30:39,790 --> 00:30:43,280
domain like you can register a whole

596
00:30:42,020 --> 00:30:45,860
bunch of domains on one ingress

597
00:30:43,280 --> 00:30:49,280
controller and depending on which host

598
00:30:45,860 --> 00:30:53,889
of beacon or implants checking into you

599
00:30:49,280 --> 00:30:53,889
can route it to a very specific back-end

600
00:30:54,970 --> 00:31:02,920
yeah and then this is this is a virtual

601
00:30:57,410 --> 00:31:05,600
service for a team a team server which

602
00:31:02,920 --> 00:31:08,780
uses the a team server gateway which

603
00:31:05,600 --> 00:31:12,139
which we saw before which which exposes

604
00:31:08,780 --> 00:31:14,240
those three ports and then this this

605
00:31:12,140 --> 00:31:16,400
matches on port 80

606
00:31:14,240 --> 00:31:23,180
it'll if it matches on port 80 it'll

607
00:31:16,400 --> 00:31:25,190
just send it to the team server also if

608
00:31:23,180 --> 00:31:28,130
it if you have a malleable c2 profile

609
00:31:25,190 --> 00:31:31,280
enabled you can you could this isn't

610
00:31:28,130 --> 00:31:32,780
this for example in the in the what

611
00:31:31,280 --> 00:31:36,620
we're releasing and we just have a

612
00:31:32,780 --> 00:31:40,879
sample of a very simple map of c2

613
00:31:36,620 --> 00:31:42,770
profile and this is just matching on

614
00:31:40,880 --> 00:31:45,680
that user agent in that manual c2

615
00:31:42,770 --> 00:31:47,920
profile and if and if so so basically

616
00:31:45,680 --> 00:31:50,930
the way it works is this is a and rule

617
00:31:47,920 --> 00:31:53,950
so if it matches on the user agent and

618
00:31:50,930 --> 00:31:56,630
it matches on a prefix a URI prefix oh

619
00:31:53,950 --> 00:31:58,310
if you'll if you have worked with my BC

620
00:31:56,630 --> 00:32:01,400
tours you know you know as you can set

621
00:31:58,310 --> 00:32:04,220
your I prefixes for where the word the

622
00:32:01,400 --> 00:32:07,160
beacon connects to to send send data and

623
00:32:04,220 --> 00:32:10,130
so if you match on that then it'll send

624
00:32:07,160 --> 00:32:12,740
us the team server if you don't it'll

625
00:32:10,130 --> 00:32:15,590
it'll send you to Google calm so you can

626
00:32:12,740 --> 00:32:18,230
do all the whole you can all work out

627
00:32:15,590 --> 00:32:20,240
all the all the filtering and

628
00:32:18,230 --> 00:32:24,260
redirection with there's a whole there's

629
00:32:20,240 --> 00:32:25,670
a whole language if you missed it you

630
00:32:24,260 --> 00:32:27,650
can go to the sto site there's all

631
00:32:25,670 --> 00:32:29,210
there's a whole bunch of functionality

632
00:32:27,650 --> 00:32:29,910
you can use in these matching rules you

633
00:32:29,210 --> 00:32:33,210
can get very sick

634
00:32:29,910 --> 00:32:36,000
educated and it's in it's in it's very

635
00:32:33,210 --> 00:32:38,370
simple planing the she Amal much easier

636
00:32:36,000 --> 00:32:40,530
than you know you're messing around with

637
00:32:38,370 --> 00:32:42,350
all those annotations and nginx ingress

638
00:32:40,530 --> 00:32:45,899
so we found it to be a lot easier and

639
00:32:42,350 --> 00:32:48,800
also TLS if it's a TLS connection coming

640
00:32:45,900 --> 00:32:52,520
in they you know then you just basically

641
00:32:48,800 --> 00:32:55,800
check to see this TLS and then send it

642
00:32:52,520 --> 00:32:58,500
if it's TLS and it's hitting that host

643
00:32:55,800 --> 00:33:02,399
then send it to the team server service

644
00:32:58,500 --> 00:33:05,070
if not then send it to Google comm so

645
00:33:02,400 --> 00:33:07,830
you can do all that stuff yeah this is a

646
00:33:05,070 --> 00:33:10,260
string matching so all the matching

647
00:33:07,830 --> 00:33:12,870
rules you can do an exact match string

648
00:33:10,260 --> 00:33:16,110
match a prefix based string match or you

649
00:33:12,870 --> 00:33:18,360
can do yet ECMAScript cell right reg X's

650
00:33:16,110 --> 00:33:21,719
so you can do full reg X match on

651
00:33:18,360 --> 00:33:29,459
anything in the HTTP requests of the

652
00:33:21,720 --> 00:33:34,620
beacon so just some tips on its yo

653
00:33:29,460 --> 00:33:36,860
ingress gateway we have a selectors used

654
00:33:34,620 --> 00:33:40,679
by SEO to select the ingress gateway so

655
00:33:36,860 --> 00:33:47,850
so basically when you when you when you

656
00:33:40,680 --> 00:33:50,070
create a virtual service to do the

657
00:33:47,850 --> 00:33:52,770
routing rules you'll you'll want to

658
00:33:50,070 --> 00:33:55,320
basically select which ingress gateway

659
00:33:52,770 --> 00:33:57,960
you're going to receive the traffic from

660
00:33:55,320 --> 00:33:59,220
and basically which is the gateway is

661
00:33:57,960 --> 00:34:04,290
really your basically your like your

662
00:33:59,220 --> 00:34:06,660
redirector for that particular virtual

663
00:34:04,290 --> 00:34:09,840
service which which is your routing

664
00:34:06,660 --> 00:34:14,929
rules for whatever containers that your

665
00:34:09,840 --> 00:34:17,520
you're using for for you know the c2 and

666
00:34:14,929 --> 00:34:21,540
yeah so that's it and then then there's

667
00:34:17,520 --> 00:34:27,179
something with port naming and when you

668
00:34:21,540 --> 00:34:30,239
when you when you create ports to bring

669
00:34:27,179 --> 00:34:34,080
in in the in the gateway config you have

670
00:34:30,239 --> 00:34:37,229
to give it a name and and the name has

671
00:34:34,080 --> 00:34:41,230
to be prefixed with the type of protocol

672
00:34:37,230 --> 00:34:42,639
that that particular port is running so

673
00:34:41,230 --> 00:34:44,639
these are just and then you just made

674
00:34:42,639 --> 00:34:47,169
that suffix doesn't really matter so

675
00:34:44,639 --> 00:34:52,210
that's just some something to think

676
00:34:47,168 --> 00:34:54,489
about and then so so when we took what

677
00:34:52,210 --> 00:34:57,640
we saw in the the previous configs we

678
00:34:54,489 --> 00:35:02,229
were saying that if it if if there's if

679
00:34:57,640 --> 00:35:06,520
there's no match to certain prefixes or

680
00:35:02,230 --> 00:35:09,520
certain user agent properties or values

681
00:35:06,520 --> 00:35:12,490
then send it outside the mesh send it

682
00:35:09,520 --> 00:35:16,170
somewhere outside but maybe back to the

683
00:35:12,490 --> 00:35:21,939
target out to some other external site

684
00:35:16,170 --> 00:35:24,220
by default is do let's envoy pass

685
00:35:21,940 --> 00:35:25,900
through so you don't you don't have to

686
00:35:24,220 --> 00:35:30,819
really do anything you can just specify

687
00:35:25,900 --> 00:35:32,770
those those those destinations to

688
00:35:30,820 --> 00:35:35,290
wherever you want based on your matching

689
00:35:32,770 --> 00:35:39,640
rule yeah it's on by default but you can

690
00:35:35,290 --> 00:35:43,690
you can test it on here and with this

691
00:35:39,640 --> 00:35:46,359
command get config map its do - and SEO

692
00:35:43,690 --> 00:35:48,940
system and that'll that'll it'll allow

693
00:35:46,359 --> 00:35:51,279
any is there then then it's allowed then

694
00:35:48,940 --> 00:35:56,079
the interesting thing is and this is

695
00:35:51,280 --> 00:35:57,819
maybe not for for red teaming but the

696
00:35:56,079 --> 00:36:01,119
service special allows you to control

697
00:35:57,819 --> 00:36:04,960
access out of the cluster so you can

698
00:36:01,119 --> 00:36:08,410
actually set set set this to you know

699
00:36:04,960 --> 00:36:11,290
just turn this off and then no traffic's

700
00:36:08,410 --> 00:36:14,259
allowed out of the server special unless

701
00:36:11,290 --> 00:36:16,569
you specify egress points and you can

702
00:36:14,260 --> 00:36:18,280
have a single egress point you can it's

703
00:36:16,569 --> 00:36:23,349
called the service entry and you can

704
00:36:18,280 --> 00:36:25,930
specify these these places that that the

705
00:36:23,349 --> 00:36:34,180
the services in the mesh are allowed to

706
00:36:25,930 --> 00:36:36,819
talk to okay so yeah some notes on

707
00:36:34,180 --> 00:36:38,618
ingress capabilities a mesh can have any

708
00:36:36,819 --> 00:36:40,329
number of gateways and multiple

709
00:36:38,619 --> 00:36:45,369
different implementations of the gateway

710
00:36:40,329 --> 00:36:47,230
can coexist yeah so the router routing

711
00:36:45,369 --> 00:36:52,030
API expresses the routing needs of eight

712
00:36:47,230 --> 00:36:54,580
of ISTE oh and it's yeah kubernetes

713
00:36:52,030 --> 00:36:59,740
ingress is kind of

714
00:36:54,580 --> 00:37:01,330
focused on on HTTP and then yeah so

715
00:36:59,740 --> 00:37:02,680
that's why that's why this you know sort

716
00:37:01,330 --> 00:37:05,950
of fish is better because that you have

717
00:37:02,680 --> 00:37:09,009
the full gamut of of TCP and if in your

718
00:37:05,950 --> 00:37:12,910
c2 infrastructure if you if you're using

719
00:37:09,010 --> 00:37:17,710
like fishing servers you're using DNS

720
00:37:12,910 --> 00:37:21,879
and stuff yeah it's good let's see what

721
00:37:17,710 --> 00:37:24,430
else here okay all right yeah actually

722
00:37:21,880 --> 00:37:28,150
we have a little demo to show so just

723
00:37:24,430 --> 00:37:34,600
gonna gonna do the demo all right so

724
00:37:28,150 --> 00:37:38,190
here do a video because I don't trust

725
00:37:34,600 --> 00:37:38,190
the demo gods and plus it takes too long

726
00:37:39,690 --> 00:37:46,540
bigger alright so here is the script as

727
00:37:44,500 --> 00:37:49,420
it is in its present-day starting it up

728
00:37:46,540 --> 00:37:52,570
now I'm giving it a name for this for

729
00:37:49,420 --> 00:37:54,450
the cluster called the legit situ now

730
00:37:52,570 --> 00:37:57,730
we're just going to deploy the cluster

731
00:37:54,450 --> 00:38:00,879
this is running cops to deploy

732
00:37:57,730 --> 00:38:03,160
everything this in particular is just

733
00:38:00,880 --> 00:38:07,600
not it's not an hea cluster it's got one

734
00:38:03,160 --> 00:38:10,660
master and two nodes and here it's going

735
00:38:07,600 --> 00:38:15,630
through all the AWS things that it's

736
00:38:10,660 --> 00:38:17,470
setting up so it's running all this

737
00:38:15,630 --> 00:38:21,010
fast-forward through this a little bit

738
00:38:17,470 --> 00:38:22,899
here cuz no one cares then it waits for

739
00:38:21,010 --> 00:38:24,370
the nat gateway coming up is the thing

740
00:38:22,900 --> 00:38:31,390
that takes the longest up to five

741
00:38:24,370 --> 00:38:33,450
minutes and then what happens up then i

742
00:38:31,390 --> 00:38:35,920
pause the video you have to wait about

743
00:38:33,450 --> 00:38:37,750
10 or 15 minutes i'm gonna have this all

744
00:38:35,920 --> 00:38:41,140
scripted where it will automatically

745
00:38:37,750 --> 00:38:44,860
check the status of the cluster and once

746
00:38:41,140 --> 00:38:46,990
it's up then we will go ahead and do the

747
00:38:44,860 --> 00:38:49,570
deploy so here's me checking that the

748
00:38:46,990 --> 00:38:52,540
cluster is up as you can see it's ready

749
00:38:49,570 --> 00:38:58,240
to go then the next step we're going to

750
00:38:52,540 --> 00:39:03,910
do is actually run in deploy sto and the

751
00:38:58,240 --> 00:39:05,149
cobalt strike server or pod so it's

752
00:39:03,910 --> 00:39:08,239
installing tiller

753
00:39:05,150 --> 00:39:08,239
[Music]

754
00:39:11,520 --> 00:39:17,800
the Helmand right now it's super hacky I

755
00:39:14,920 --> 00:39:19,600
need to this code will be probably

756
00:39:17,800 --> 00:39:22,000
released on Monday at the earliest

757
00:39:19,600 --> 00:39:24,100
because I need to go in and actually fix

758
00:39:22,000 --> 00:39:27,880
it and make it pretty and right now I

759
00:39:24,100 --> 00:39:30,040
have really bad sleeps in between the

760
00:39:27,880 --> 00:39:32,350
commands so that everything is coming up

761
00:39:30,040 --> 00:39:34,150
instead of checking the status and then

762
00:39:32,350 --> 00:39:48,460
running the next command so but it works

763
00:39:34,150 --> 00:39:56,400
right now getting sto all set up before

764
00:39:48,460 --> 00:40:04,680
here a little bit just a few creates the

765
00:39:56,400 --> 00:40:09,820
namespace first EO created the secret

766
00:40:04,680 --> 00:40:14,830
for deploying to the from the private

767
00:40:09,820 --> 00:40:17,100
docker image and now deployed the team

768
00:40:14,830 --> 00:40:17,100
server

769
00:40:22,560 --> 00:40:27,540
and then there's two more steps where it

770
00:40:24,960 --> 00:40:32,490
creates the routing for the ingress

771
00:40:27,540 --> 00:40:42,000
controller and then I switch over and

772
00:40:32,490 --> 00:40:46,009
run a command get the pods to grab that

773
00:40:42,000 --> 00:40:50,610
team server ID tag right there this was

774
00:40:46,010 --> 00:40:53,490
two main history there's actually two

775
00:40:50,610 --> 00:40:56,430
containers running on this team server

776
00:40:53,490 --> 00:40:59,339
pod so the reason that is is because it

777
00:40:56,430 --> 00:41:01,919
envoy proxies in there as well and in

778
00:40:59,340 --> 00:41:04,860
stew I'd injected an envoy proxy into

779
00:41:01,920 --> 00:41:07,320
the team server pod so now you can see

780
00:41:04,860 --> 00:41:13,520
you've got a fully deployed team server

781
00:41:07,320 --> 00:41:13,520
here with with a malleable c2 profile

782
00:41:29,150 --> 00:41:39,480
okay so got that covered and then just a

783
00:41:33,960 --> 00:41:43,230
few more things to discuss so as you

784
00:41:39,480 --> 00:41:45,330
pursue automation there's there's some C

785
00:41:43,230 --> 00:41:47,400
ICD you might want to put a C ICD

786
00:41:45,330 --> 00:41:53,069
pipeline as you build you know you're

787
00:41:47,400 --> 00:41:54,150
different c2 deployments images there's

788
00:41:53,070 --> 00:41:57,060
this thing called drone

789
00:41:54,150 --> 00:42:01,950
it's basically lets you build containers

790
00:41:57,060 --> 00:42:04,830
and lets you deploy stuff into into

791
00:42:01,950 --> 00:42:06,649
kubernetes you can pretty much automate

792
00:42:04,830 --> 00:42:09,660
you see if you have certain

793
00:42:06,650 --> 00:42:12,470
configurations of of C - you want to put

794
00:42:09,660 --> 00:42:15,779
just deploy out really quickly you can

795
00:42:12,470 --> 00:42:19,980
you can use you can use drone you can

796
00:42:15,780 --> 00:42:22,830
put in our cube read script and then all

797
00:42:19,980 --> 00:42:25,080
your containers all your deployments and

798
00:42:22,830 --> 00:42:29,360
then you can just kick them off as you

799
00:42:25,080 --> 00:42:32,910
as you need them and it's just very

800
00:42:29,360 --> 00:42:35,250
popular in DevOps and could really do a

801
00:42:32,910 --> 00:42:37,440
lot of automation and also you can stick

802
00:42:35,250 --> 00:42:39,870
everything in a get so you can put all

803
00:42:37,440 --> 00:42:41,730
your all your stuff and get and then

804
00:42:39,870 --> 00:42:46,770
have drone pick it up from get and then

805
00:42:41,730 --> 00:42:50,630
deploy it into the cluster and then this

806
00:42:46,770 --> 00:42:57,150
is kind of a bill pipeline in drone so

807
00:42:50,630 --> 00:43:03,060
this actually builds a docker image runs

808
00:42:57,150 --> 00:43:06,780
a helmet art yeah deploys everything now

809
00:43:03,060 --> 00:43:08,970
also covered this briefly here you could

810
00:43:06,780 --> 00:43:09,870
actually monitor your situ and Coover

811
00:43:08,970 --> 00:43:13,200
Nesbit's with something called

812
00:43:09,870 --> 00:43:17,839
prometheus prometheus is basically a

813
00:43:13,200 --> 00:43:21,990
time a time series based system so it

814
00:43:17,840 --> 00:43:23,610
focuses on events time-based events

815
00:43:21,990 --> 00:43:27,779
we're actually working on a

816
00:43:23,610 --> 00:43:29,880
configuration for the team server so

817
00:43:27,780 --> 00:43:31,710
we're gonna part we're gonna this is for

818
00:43:29,880 --> 00:43:32,580
so you can see the implants checking in

819
00:43:31,710 --> 00:43:35,970
and you so you can do the real-time

820
00:43:32,580 --> 00:43:37,380
implant monitoring too so if things you

821
00:43:35,970 --> 00:43:38,950
know if the implants is not checking

822
00:43:37,380 --> 00:43:41,859
anymore you can

823
00:43:38,950 --> 00:43:43,538
if people found your that your your

824
00:43:41,859 --> 00:43:48,400
particular redirector you can quickly

825
00:43:43,539 --> 00:43:54,059
just spin up a new one so this this will

826
00:43:48,400 --> 00:43:59,380
basically writing a rock exporter for

827
00:43:54,059 --> 00:44:01,450
for the seat for the team server now if

828
00:43:59,380 --> 00:44:06,369
you have your own situ that you're

829
00:44:01,450 --> 00:44:08,890
writing or or there's an another situ

830
00:44:06,369 --> 00:44:11,980
author they can actually instrument

831
00:44:08,890 --> 00:44:13,690
their code with Prometheus such that

832
00:44:11,980 --> 00:44:17,260
it's automatically supported so any

833
00:44:13,690 --> 00:44:21,819
events they generate inside the inside

834
00:44:17,260 --> 00:44:24,220
the their situ server that Prometheus

835
00:44:21,819 --> 00:44:25,869
can just pick it up and put it put it in

836
00:44:24,220 --> 00:44:28,169
a graph on a dashboard or something like

837
00:44:25,869 --> 00:44:31,809
that so you have a very nice at ollahm

838
00:44:28,170 --> 00:44:35,950
telemetry of your environment and then

839
00:44:31,809 --> 00:44:37,779
gmx is for java it's something we're

840
00:44:35,950 --> 00:44:40,299
trying to see is does does cobalt strike

841
00:44:37,779 --> 00:44:44,710
support JMX we don't know but if it does

842
00:44:40,299 --> 00:44:46,359
it makes it a lot easier yeah so there's

843
00:44:44,710 --> 00:44:48,519
there's a couple ways if you're a like

844
00:44:46,359 --> 00:44:51,660
is if the if that particular situ server

845
00:44:48,519 --> 00:44:55,450
doesn't support prometheus you can use

846
00:44:51,660 --> 00:44:57,490
google em tail which is basically a way

847
00:44:55,450 --> 00:45:02,368
to extract time-series data from a log

848
00:44:57,490 --> 00:45:06,700
and then you can also use grok exporter

849
00:45:02,369 --> 00:45:09,390
another way it elects to pull pull this

850
00:45:06,700 --> 00:45:11,828
time series data into Prometheus and

851
00:45:09,390 --> 00:45:13,589
then it's a I said so we're gonna make

852
00:45:11,829 --> 00:45:16,450
something available in rock exporter to

853
00:45:13,589 --> 00:45:21,339
so you can so you can monitor your team

854
00:45:16,450 --> 00:45:23,589
your beacon check-ins and then you can

855
00:45:21,339 --> 00:45:25,538
this is a this is a dashboard from a

856
00:45:23,589 --> 00:45:26,529
company called cystic but this is the

857
00:45:25,539 --> 00:45:28,869
kind of stuff you can do you can have

858
00:45:26,529 --> 00:45:30,940
one you can watch all your your beacons

859
00:45:28,869 --> 00:45:33,210
and implants and where they're checking

860
00:45:30,940 --> 00:45:35,799
in from how often they checked in

861
00:45:33,210 --> 00:45:40,869
performance and everything so I think

862
00:45:35,799 --> 00:45:43,349
it'll be pretty nice down the road and

863
00:45:40,869 --> 00:45:46,509
then that's that's pretty much it

864
00:45:43,349 --> 00:45:50,099
these are these are some references I

865
00:45:46,509 --> 00:45:50,099
think of worthwhile taking a look at

866
00:45:51,109 --> 00:45:59,328
and this is basically this should be up

867
00:45:57,079 --> 00:46:03,650
over sometime over the weekend or Monday

868
00:45:59,329 --> 00:46:06,380
on Monday and this is gonna have the

869
00:46:03,650 --> 00:46:10,480
basic cube read script it's going to

870
00:46:06,380 --> 00:46:13,279
have the full cobalt strike deployment

871
00:46:10,480 --> 00:46:18,829
the helm helm chart for cobalt strike

872
00:46:13,279 --> 00:46:21,710
and maybe more the Merlin chart as well

873
00:46:18,829 --> 00:46:23,690
if I can get it done but that's coming

874
00:46:21,710 --> 00:46:26,380
it's almost done and then over the next

875
00:46:23,690 --> 00:46:32,440
few weeks we'll try to do some more c2

876
00:46:26,380 --> 00:46:32,440
and yeah that's that's basically it

877
00:46:52,869 --> 00:46:57,769
sorry yeah the question was this the

878
00:46:55,579 --> 00:46:58,970
delete function and the cube read tear

879
00:46:57,769 --> 00:47:00,558
down all the infrastructure and the

880
00:46:58,970 --> 00:47:05,359
answer is yes it does take down the

881
00:47:00,559 --> 00:47:13,549
whole infrastructure in AWS alright

882
00:47:05,359 --> 00:47:14,808
thanks you one more question I mean

883
00:47:13,549 --> 00:47:17,200
right now we're just we've just been

884
00:47:14,809 --> 00:47:17,200
testing

