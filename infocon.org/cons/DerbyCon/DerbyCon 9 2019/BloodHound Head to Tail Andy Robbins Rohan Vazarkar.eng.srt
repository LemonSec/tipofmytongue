1
00:00:00,000 --> 00:00:03,030
[Music]

2
00:00:29,230 --> 00:00:32,530
all right guys

3
00:00:32,560 --> 00:00:36,350
it's a three o'clock so we're gonna

4
00:00:34,940 --> 00:00:40,489
we're gonna get started with our talk

5
00:00:36,350 --> 00:00:41,989
over here before we before we actually

6
00:00:40,489 --> 00:00:43,339
start the talk I just want to give it a

7
00:00:41,989 --> 00:00:44,570
really quick shout out to everybody

8
00:00:43,340 --> 00:00:46,340
who's wearing a bloodhound shirt I've

9
00:00:44,570 --> 00:00:47,690
never seen so many bloodhound shirt to

10
00:00:46,340 --> 00:00:49,790
the silicon force before and it makes me

11
00:00:47,690 --> 00:00:52,250
really really happy so you guys all Rock

12
00:00:49,790 --> 00:01:00,290
if you're not wearing one you should get

13
00:00:52,250 --> 00:01:02,000
one soon so well well well alright so

14
00:01:00,290 --> 00:01:04,908
our presentation is called a bloodhound

15
00:01:02,000 --> 00:01:06,110
head to tail and I gotta say I'm I'm

16
00:01:04,909 --> 00:01:09,740
very very happy that I'm getting to

17
00:01:06,110 --> 00:01:10,850
speak at this Derby con it's it's a

18
00:01:09,740 --> 00:01:14,300
little bit of a moment for me because

19
00:01:10,850 --> 00:01:15,679
you know it's last one so but uh yeah

20
00:01:14,300 --> 00:01:18,050
let's let's let's just get started with

21
00:01:15,680 --> 00:01:19,520
this just keep talking

22
00:01:18,050 --> 00:01:21,020
alright so this is this is what we're

23
00:01:19,520 --> 00:01:21,860
gonna cover today the first thing we're

24
00:01:21,020 --> 00:01:24,350
gonna do is we're gonna do a little

25
00:01:21,860 --> 00:01:25,549
review sharp pound sure pounds been out

26
00:01:24,350 --> 00:01:27,130
for quite a while in fact it was

27
00:01:25,549 --> 00:01:30,110
released at Derby con two years ago and

28
00:01:27,130 --> 00:01:31,520
a lot of there's a lot of misconceptions

29
00:01:30,110 --> 00:01:33,140
about what it does how it works that

30
00:01:31,520 --> 00:01:35,060
kind of thing so we just want to cover

31
00:01:33,140 --> 00:01:36,500
some of that and like clear up some

32
00:01:35,060 --> 00:01:38,270
things that people might not know about

33
00:01:36,500 --> 00:01:39,680
and then we're actually gonna walk

34
00:01:38,270 --> 00:01:41,210
through the tak path that's gonna cover

35
00:01:39,680 --> 00:01:43,640
a lot of the new stuff we've added

36
00:01:41,210 --> 00:01:45,860
recently to give people an idea of like

37
00:01:43,640 --> 00:01:47,810
how this this would look in a real

38
00:01:45,860 --> 00:01:49,400
environment with some of the new cutting

39
00:01:47,810 --> 00:01:50,690
edge like hotness that people have

40
00:01:49,400 --> 00:01:55,430
released and we've integrated in the

41
00:01:50,690 --> 00:01:57,590
bloodhound project so this is us i'm

42
00:01:55,430 --> 00:02:01,010
rohan deserter i go by at captain jesus

43
00:01:57,590 --> 00:02:02,360
on twitter i'm andy i go by waldo on

44
00:02:01,010 --> 00:02:03,860
twitter there are more chairs of the

45
00:02:02,360 --> 00:02:08,179
front if you're standing in the back i

46
00:02:03,860 --> 00:02:12,769
need a seat yeah that's that's enough

47
00:02:08,179 --> 00:02:15,290
about intros alright so sharp pound how

48
00:02:12,769 --> 00:02:19,340
does it work poorly

49
00:02:15,290 --> 00:02:21,530
most of the time but so yeah it's

50
00:02:19,340 --> 00:02:24,050
getting better as time goes but like

51
00:02:21,530 --> 00:02:26,709
like a fine wine so the most basic level

52
00:02:24,050 --> 00:02:29,209
this is our workflow with a sharp pound

53
00:02:26,709 --> 00:02:31,310
you you get a sharp pound a list of

54
00:02:29,209 --> 00:02:34,190
options that you want to numerate and we

55
00:02:31,310 --> 00:02:35,990
basically turn those into tasks we query

56
00:02:34,190 --> 00:02:38,120
LDAP at the domain controller level and

57
00:02:35,990 --> 00:02:40,489
we ask for the set of data that we need

58
00:02:38,120 --> 00:02:43,129
to accomplish that task and we do this

59
00:02:40,489 --> 00:02:45,170
by taking each individual task and

60
00:02:43,129 --> 00:02:46,970
mapping it to an LDAP filter and then we

61
00:02:45,170 --> 00:02:49,099
join all those LDAP filters into the

62
00:02:46,970 --> 00:02:50,569
Franken filter and it looks really

63
00:02:49,099 --> 00:02:52,760
really disgusting if you ever look at it

64
00:02:50,569 --> 00:02:54,768
but it works so I'm not gonna change it

65
00:02:52,760 --> 00:02:57,409
because you don't you know mess with

66
00:02:54,769 --> 00:02:58,970
what works we take all the data that

67
00:02:57,409 --> 00:03:00,679
gets returned from LDAP and we feed it

68
00:02:58,970 --> 00:03:02,720
into a giant pipeline and the pipeline

69
00:03:00,680 --> 00:03:04,909
basically just looks at the type of data

70
00:03:02,720 --> 00:03:07,280
that comes back and does actions based

71
00:03:04,909 --> 00:03:09,500
on what it is so for each object we'll

72
00:03:07,280 --> 00:03:11,599
run a specific set of API calls or data

73
00:03:09,500 --> 00:03:12,950
processing to make sure that we get all

74
00:03:11,599 --> 00:03:18,349
the information we can out of each

75
00:03:12,950 --> 00:03:19,578
different type of object so there's a

76
00:03:18,349 --> 00:03:21,260
lot of different collection methods and

77
00:03:19,579 --> 00:03:22,970
bloodhound I'm actually going to cover a

78
00:03:21,260 --> 00:03:26,510
few that we think are really interesting

79
00:03:22,970 --> 00:03:28,129
that maybe people don't know about you

80
00:03:26,510 --> 00:03:30,769
invoke a different collection method

81
00:03:28,129 --> 00:03:33,290
using the collection method or taxi flag

82
00:03:30,769 --> 00:03:35,150
when you run char pound exe it allows

83
00:03:33,290 --> 00:03:37,010
you to specify what is collected and it

84
00:03:35,150 --> 00:03:40,099
has a lot more granularity than people

85
00:03:37,010 --> 00:03:42,048
really think it does because most people

86
00:03:40,099 --> 00:03:44,090
tend to run it either with the all flag

87
00:03:42,049 --> 00:03:46,099
or the default flag which is fine

88
00:03:44,090 --> 00:03:47,630
because that's why those flies were

89
00:03:46,099 --> 00:03:49,790
introduced but we want to kind of like

90
00:03:47,630 --> 00:03:51,680
dig in a little bit and talk about these

91
00:03:49,790 --> 00:03:53,569
like three main ones that people run and

92
00:03:51,680 --> 00:03:58,790
why they're useful and those three are

93
00:03:53,569 --> 00:04:01,369
all default and DC only all right so

94
00:03:58,790 --> 00:04:03,230
default collection this is actually

95
00:04:01,370 --> 00:04:05,540
probably where people start they just

96
00:04:03,230 --> 00:04:06,918
run sharp on dot exe and it goes to work

97
00:04:05,540 --> 00:04:10,069
and it collects a whole bunch of stuff

98
00:04:06,919 --> 00:04:12,319
and gives you some cool JSON files this

99
00:04:10,069 --> 00:04:14,030
was what we originally started with when

100
00:04:12,319 --> 00:04:17,060
we released our pound and really the

101
00:04:14,030 --> 00:04:19,940
Bloodhound project this is kind of what

102
00:04:17,060 --> 00:04:21,440
hound 1.0 it's pretty outdated at this

103
00:04:19,940 --> 00:04:23,690
point since we've added so much stuff

104
00:04:21,440 --> 00:04:26,289
since then but really all it collects is

105
00:04:23,690 --> 00:04:29,389
a group membership local groups on hosts

106
00:04:26,289 --> 00:04:30,949
session information and trusts now if

107
00:04:29,389 --> 00:04:32,990
you're familiar with what the schema

108
00:04:30,949 --> 00:04:35,660
looks like today that's missing like

109
00:04:32,990 --> 00:04:38,690
probably 10 different edge types that

110
00:04:35,660 --> 00:04:40,550
have been added between ACLs and some

111
00:04:38,690 --> 00:04:43,729
cool special execution rights and stuff

112
00:04:40,550 --> 00:04:46,159
like that and when you run the default

113
00:04:43,729 --> 00:04:48,650
collection method we touch the domain

114
00:04:46,159 --> 00:04:50,930
controllers for LDAP and we touch every

115
00:04:48,650 --> 00:04:51,888
computer on the domain for local group

116
00:04:50,930 --> 00:04:54,409
information and

117
00:04:51,889 --> 00:04:55,789
session collection now that's that's a

118
00:04:54,409 --> 00:04:57,199
lot but I'm gonna make the argument that

119
00:04:55,789 --> 00:04:58,669
if you're gonna run default collection

120
00:04:57,199 --> 00:05:04,669
and there's no reason you shouldn't run

121
00:04:58,669 --> 00:05:06,770
all collection so sharp and Dax taxi all

122
00:05:04,669 --> 00:05:08,840
is the way a lot of people end up

123
00:05:06,770 --> 00:05:11,060
running short bound after they've kind

124
00:05:08,840 --> 00:05:13,029
of Dig Dug into a little bit and this

125
00:05:11,060 --> 00:05:15,499
covers almost every single collection

126
00:05:13,029 --> 00:05:17,150
option that we have the only one that's

127
00:05:15,499 --> 00:05:19,159
excluded by default is the logged on

128
00:05:17,150 --> 00:05:21,710
collection method we exclude that

129
00:05:19,159 --> 00:05:23,688
because you need privilege to run that

130
00:05:21,710 --> 00:05:24,739
and frequently we're running this as

131
00:05:23,689 --> 00:05:26,300
like red teamers and we don't have

132
00:05:24,740 --> 00:05:28,520
privilege but we don't want those extra

133
00:05:26,300 --> 00:05:30,289
API calls and the logs that it generates

134
00:05:28,520 --> 00:05:32,779
to happen so we make people kind of

135
00:05:30,289 --> 00:05:35,060
specify that themselves just as like a

136
00:05:32,779 --> 00:05:36,770
kind of idiot check I guess we want to

137
00:05:35,060 --> 00:05:38,840
make sure that you're doing that only if

138
00:05:36,770 --> 00:05:40,818
you really need to do it we also don't

139
00:05:38,840 --> 00:05:42,229
do GPO local group because actually

140
00:05:40,819 --> 00:05:44,779
collecting for computers is always going

141
00:05:42,229 --> 00:05:46,250
to be more accurate if you want to add

142
00:05:44,779 --> 00:05:48,529
logged on collection it's as easy as

143
00:05:46,250 --> 00:05:51,080
just putting a comma and logged on after

144
00:05:48,529 --> 00:05:52,969
your collection method flag when we run

145
00:05:51,080 --> 00:05:54,409
it defensively this is exactly how we do

146
00:05:52,969 --> 00:05:56,110
it this is our first run every single

147
00:05:54,409 --> 00:05:58,819
time when we're using an Abbott account

148
00:05:56,110 --> 00:06:02,479
and if you look at what it touches it's

149
00:05:58,819 --> 00:06:04,460
the exact same thing as the default

150
00:06:02,479 --> 00:06:06,258
collection method the only thing that

151
00:06:04,460 --> 00:06:08,599
changes is we get more data back we

152
00:06:06,259 --> 00:06:10,789
request more properties from LDAP but

153
00:06:08,599 --> 00:06:13,188
the touches to the computer are exactly

154
00:06:10,789 --> 00:06:14,210
the same as they were previously so my

155
00:06:13,189 --> 00:06:15,409
argument is if you're going to run

156
00:06:14,210 --> 00:06:17,448
default collection and you might as well

157
00:06:15,409 --> 00:06:19,460
just run all collection because they're

158
00:06:17,449 --> 00:06:21,409
both really really loud and the amount

159
00:06:19,460 --> 00:06:22,909
of loudness that's that all adds does

160
00:06:21,409 --> 00:06:26,020
not compensate for how much data you're

161
00:06:22,909 --> 00:06:27,520
missing so use that one

162
00:06:26,020 --> 00:06:29,409
all right and then the third one I want

163
00:06:27,520 --> 00:06:32,130
to talk about is DC only this is

164
00:06:29,410 --> 00:06:35,230
something to be added not that long ago

165
00:06:32,130 --> 00:06:36,670
but this was kind of our answer to like

166
00:06:35,230 --> 00:06:38,200
how can you make bloodhound a little bit

167
00:06:36,670 --> 00:06:40,180
more stealthy without going touching

168
00:06:38,200 --> 00:06:42,219
along computers was still getting a lot

169
00:06:40,180 --> 00:06:44,290
of interesting data we started doing

170
00:06:42,220 --> 00:06:46,180
some sessions where we found that even

171
00:06:44,290 --> 00:06:48,550
just collecting data from LDAP

172
00:06:46,180 --> 00:06:49,990
exclusively we could find watts and lots

173
00:06:48,550 --> 00:06:51,940
of interesting attack pads without ever

174
00:06:49,990 --> 00:06:53,950
having to touch any other computers so

175
00:06:51,940 --> 00:06:56,560
the DC only collection method does

176
00:06:53,950 --> 00:06:59,110
exactly that it excludes all session

177
00:06:56,560 --> 00:07:00,850
collection all direct local group

178
00:06:59,110 --> 00:07:05,110
collection and it only pulls data out of

179
00:07:00,850 --> 00:07:08,140
LDAP and from files on GPO drives this

180
00:07:05,110 --> 00:07:09,820
is really like quiet as far as what it's

181
00:07:08,140 --> 00:07:11,700
touching on the network you get one big

182
00:07:09,820 --> 00:07:15,430
LDAP pull but other than that like

183
00:07:11,700 --> 00:07:16,950
that's pretty much the gist of it so all

184
00:07:15,430 --> 00:07:19,450
it touches is a domain controller and

185
00:07:16,950 --> 00:07:21,070
wherever the GPO files are stored which

186
00:07:19,450 --> 00:07:23,530
in most environments is also the domain

187
00:07:21,070 --> 00:07:25,240
controller so running DC only is a good

188
00:07:23,530 --> 00:07:26,859
way to get a really big chunk of data

189
00:07:25,240 --> 00:07:28,270
and start like really analyzing a

190
00:07:26,860 --> 00:07:29,860
network without actually going out and

191
00:07:28,270 --> 00:07:32,740
like creating a lot of noise by touching

192
00:07:29,860 --> 00:07:34,600
every single computer generally the only

193
00:07:32,740 --> 00:07:36,610
way this would ever get caught is some

194
00:07:34,600 --> 00:07:39,160
net flow monitoring to see large LDAP

195
00:07:36,610 --> 00:07:42,070
pools or if someone has specific event

196
00:07:39,160 --> 00:07:43,510
rules in place for detecting char pound

197
00:07:42,070 --> 00:07:45,610
which in that case is going to get

198
00:07:43,510 --> 00:07:47,730
caught no matter what you do so I want

199
00:07:45,610 --> 00:07:50,620
to worry about that too much

200
00:07:47,730 --> 00:07:53,350
all right so sharp out has a stealth

201
00:07:50,620 --> 00:07:54,670
flag and it's a little bit confusing

202
00:07:53,350 --> 00:07:56,950
because when we first released

203
00:07:54,670 --> 00:07:58,900
bloodhound stealth was its own

204
00:07:56,950 --> 00:08:01,360
collection method and when we released

205
00:07:58,900 --> 00:08:03,310
2.0 we decided that stealth should be a

206
00:08:01,360 --> 00:08:04,870
modifier for collection methods so you

207
00:08:03,310 --> 00:08:06,850
can specify whatever collection methods

208
00:08:04,870 --> 00:08:09,220
you won and if you add the stealth flag

209
00:08:06,850 --> 00:08:12,670
on top of that it will modify how those

210
00:08:09,220 --> 00:08:14,200
collection methods work so the really

211
00:08:12,670 --> 00:08:15,910
big chink things the changes are how

212
00:08:14,200 --> 00:08:17,770
sessions are collected and how local

213
00:08:15,910 --> 00:08:20,230
groups are collected but when you do

214
00:08:17,770 --> 00:08:21,729
stealth sessions will be limited to file

215
00:08:20,230 --> 00:08:26,470
servers which we determined by using

216
00:08:21,730 --> 00:08:27,520
LDAP and domain controllers on an

217
00:08:26,470 --> 00:08:30,670
average environment you're probably

218
00:08:27,520 --> 00:08:32,770
looking at like 15 or 20 computers being

219
00:08:30,670 --> 00:08:35,080
touched been use the stealth flag as far

220
00:08:32,770 --> 00:08:36,939
as a session collection but in our

221
00:08:35,080 --> 00:08:39,460
experience those 15 to 20 computers

222
00:08:36,940 --> 00:08:40,900
account for somewhere around 60

223
00:08:39,460 --> 00:08:43,180
of the sessions you're gonna see on an

224
00:08:40,900 --> 00:08:46,390
environment in the first place so 60%

225
00:08:43,179 --> 00:08:48,069
isn't great it's it's a fail but you

226
00:08:46,390 --> 00:08:49,630
know 60% will still get you a really

227
00:08:48,070 --> 00:08:54,280
good start in without creating a lot of

228
00:08:49,630 --> 00:08:55,390
excess noise we actually have some

229
00:08:54,280 --> 00:08:57,640
really cool lesser-known

230
00:08:55,390 --> 00:08:59,949
options that you you only literally find

231
00:08:57,640 --> 00:09:01,949
if you dig into the the source or you go

232
00:08:59,950 --> 00:09:05,380
through the help file which no one does

233
00:09:01,950 --> 00:09:07,090
and we've added these over time for

234
00:09:05,380 --> 00:09:09,550
different purposes one of them is the

235
00:09:07,090 --> 00:09:11,700
exclude DC flag we added this actually

236
00:09:09,550 --> 00:09:13,479
entirely as a bypass for ata

237
00:09:11,700 --> 00:09:15,850
the way we had a little back-and-forth

238
00:09:13,480 --> 00:09:17,410
game with the ATA for a while and a tea

239
00:09:15,850 --> 00:09:19,270
was like yeah we got char pound down I

240
00:09:17,410 --> 00:09:21,370
was like well you guys only run on

241
00:09:19,270 --> 00:09:23,079
domain controllers now so we just don't

242
00:09:21,370 --> 00:09:25,300
touch a domain controller like you can't

243
00:09:23,080 --> 00:09:27,390
see us anymore and as over the last time

244
00:09:25,300 --> 00:09:30,130
we tested this this actually still works

245
00:09:27,390 --> 00:09:31,870
because the newer players of ata just

246
00:09:30,130 --> 00:09:34,090
use a domain controller tap to do all

247
00:09:31,870 --> 00:09:36,250
their detection the LDAP filter

248
00:09:34,090 --> 00:09:37,630
parameter this actually will take

249
00:09:36,250 --> 00:09:39,370
whatever LDAP Pilger you give it and

250
00:09:37,630 --> 00:09:42,490
just tack it onto the end of the giant

251
00:09:39,370 --> 00:09:44,050
franken filter we built earlier so if

252
00:09:42,490 --> 00:09:45,730
you want to help create Franklin it's

253
00:09:44,050 --> 00:09:48,099
Frankenstein's monster you are perfectly

254
00:09:45,730 --> 00:09:49,750
free to do so but this is a really good

255
00:09:48,100 --> 00:09:52,710
way to filter down your query to like

256
00:09:49,750 --> 00:09:55,000
specific OU's or like specific

257
00:09:52,710 --> 00:09:57,400
descriptions or whatever you may want to

258
00:09:55,000 --> 00:09:59,470
do LDAP is really flexible so you're

259
00:09:57,400 --> 00:10:02,199
free to change that however you want the

260
00:09:59,470 --> 00:10:04,930
ping timeout flag this by default is set

261
00:10:02,200 --> 00:10:06,220
to 200 milliseconds and ping is kind of

262
00:10:04,930 --> 00:10:09,010
a misleading word because it's really a

263
00:10:06,220 --> 00:10:10,450
port scan we check at port 4 4 5 is open

264
00:10:09,010 --> 00:10:11,020
before we do any API calls in the

265
00:10:10,450 --> 00:10:13,450
computer

266
00:10:11,020 --> 00:10:15,040
the reason being if you do an API call

267
00:10:13,450 --> 00:10:17,050
against computer that's dead it takes

268
00:10:15,040 --> 00:10:19,660
like literally 15 to 20 seconds to come

269
00:10:17,050 --> 00:10:21,339
back and tell you it's dead so we save a

270
00:10:19,660 --> 00:10:22,630
lot of time by doing this but if you're

271
00:10:21,340 --> 00:10:24,430
running this on like a big global

272
00:10:22,630 --> 00:10:25,960
organization you're gonna wanna up that

273
00:10:24,430 --> 00:10:27,849
setting because when you're traveling

274
00:10:25,960 --> 00:10:31,060
over like long links and stuff like that

275
00:10:27,850 --> 00:10:32,650
200 milliseconds might not cut it the

276
00:10:31,060 --> 00:10:34,869
last few options here are like really

277
00:10:32,650 --> 00:10:37,270
OPSEC throttle and jitter that those are

278
00:10:34,870 --> 00:10:39,430
pretty self-explanatory we do have a

279
00:10:37,270 --> 00:10:41,770
cache file with char pound which speeds

280
00:10:39,430 --> 00:10:43,030
up future runs if you don't need it if

281
00:10:41,770 --> 00:10:44,470
you're not doing multiple runs in the

282
00:10:43,030 --> 00:10:46,800
same computer just use no save cash

283
00:10:44,470 --> 00:10:50,070
there's one less file dropped to disk so

284
00:10:46,800 --> 00:10:52,359
and random file names you know because

285
00:10:50,070 --> 00:10:53,260
some EDR solutions thinks it's a good

286
00:10:52,360 --> 00:10:55,420
idea to signature on

287
00:10:53,260 --> 00:10:59,620
file names drop so we just nip that in

288
00:10:55,420 --> 00:11:00,910
the bud all right this is a list of like

289
00:10:59,620 --> 00:11:03,310
all the collection methods that are

290
00:11:00,910 --> 00:11:05,110
available the first row our hybrid ones

291
00:11:03,310 --> 00:11:07,209
which include multiple and then the

292
00:11:05,110 --> 00:11:08,320
other ones are the individual ones we're

293
00:11:07,210 --> 00:11:09,550
not gonna cover most of this this is

294
00:11:08,320 --> 00:11:10,990
reference slide you guys can look at

295
00:11:09,550 --> 00:11:15,280
this later we'll publish the slide deck

296
00:11:10,990 --> 00:11:16,780
when we're done all right so we have an

297
00:11:15,280 --> 00:11:21,630
example attack pack that we want to show

298
00:11:16,780 --> 00:11:23,650
you guys I'm gonna pass this up Danny so

299
00:11:21,630 --> 00:11:25,060
like Rohan said one of the things we

300
00:11:23,650 --> 00:11:26,590
want to do in this talk is show off some

301
00:11:25,060 --> 00:11:29,050
of the cool new attacks that we've added

302
00:11:26,590 --> 00:11:32,170
to bloodhound recently which these are

303
00:11:29,050 --> 00:11:36,010
all based on work by other people but

304
00:11:32,170 --> 00:11:38,290
they are attacks that met the bar for us

305
00:11:36,010 --> 00:11:41,890
for inclusion into the project which

306
00:11:38,290 --> 00:11:43,030
means the data that you can are the data

307
00:11:41,890 --> 00:11:44,830
you have access to is a domain

308
00:11:43,030 --> 00:11:48,310
authenticated user you can enumerate

309
00:11:44,830 --> 00:11:51,060
these attack paths they are things that

310
00:11:48,310 --> 00:11:53,589
are not exploits they are just built-in

311
00:11:51,060 --> 00:11:55,839
configurations or miss configurations in

312
00:11:53,590 --> 00:11:57,580
Windows or Active Directory so it's very

313
00:11:55,840 --> 00:11:59,890
unlikely that Microsoft is ever going to

314
00:11:57,580 --> 00:12:03,700
change the behavior of those

315
00:11:59,890 --> 00:12:06,610
configurations and they are extremely

316
00:12:03,700 --> 00:12:10,000
reliable because they have been so to

317
00:12:06,610 --> 00:12:12,700
say weaponized by folks as well so we're

318
00:12:10,000 --> 00:12:15,580
gonna look at all of that based on this

319
00:12:12,700 --> 00:12:16,990
attack path right here so this attack

320
00:12:15,580 --> 00:12:20,470
path not sure how big that is on the

321
00:12:16,990 --> 00:12:22,690
screen but it starts off at the J frank

322
00:12:20,470 --> 00:12:26,170
user which is Jason Frank thank you very

323
00:12:22,690 --> 00:12:28,510
much Jason and we are targeting on the

324
00:12:26,170 --> 00:12:31,599
very far right a computer called

325
00:12:28,510 --> 00:12:34,030
MS equals zero zero one and let's say

326
00:12:31,600 --> 00:12:35,860
for examples sake that on our Red Team

327
00:12:34,030 --> 00:12:37,480
objective getting access to the data

328
00:12:35,860 --> 00:12:39,730
that this MS sequel instance contains

329
00:12:37,480 --> 00:12:43,750
was our objectives we're not getting da

330
00:12:39,730 --> 00:12:46,990
we're getting data access so this attack

331
00:12:43,750 --> 00:12:50,260
path starts off with Jason who belongs

332
00:12:46,990 --> 00:12:52,720
to two different groups and through that

333
00:12:50,260 --> 00:12:54,790
group membership Jason has the right

334
00:12:52,720 --> 00:12:57,880
owner privilege against this user called

335
00:12:54,790 --> 00:12:59,620
pop accounting Bob accounting has an

336
00:12:57,880 --> 00:13:03,770
edge connecting him to the accounting

337
00:12:59,620 --> 00:13:05,380
0:01 computer called allowed

338
00:13:03,770 --> 00:13:07,760
which we will explain what that means

339
00:13:05,380 --> 00:13:10,760
then that computer has a user logged on

340
00:13:07,760 --> 00:13:12,890
to it named sequel 2014 so that's our

341
00:13:10,760 --> 00:13:14,390
you know favorite example of running

342
00:13:12,890 --> 00:13:16,550
amendment cats and getting credentials

343
00:13:14,390 --> 00:13:19,000
or injecting into a process with a

344
00:13:16,550 --> 00:13:21,910
primary token for that user etc and

345
00:13:19,000 --> 00:13:25,730
finally that user sequel 2014 is a

346
00:13:21,910 --> 00:13:30,920
sequel admin on this computer called MS

347
00:13:25,730 --> 00:13:34,880
equal 0 0 1 so across all of the

348
00:13:30,920 --> 00:13:37,160
possible edges and configuration abuses

349
00:13:34,880 --> 00:13:40,670
that bloodhound tracks we're gonna focus

350
00:13:37,160 --> 00:13:42,560
just on these right here which I guess

351
00:13:40,670 --> 00:13:45,110
the point of that is to say that there

352
00:13:42,560 --> 00:13:46,310
is a whole world of possible abuses that

353
00:13:45,110 --> 00:13:48,560
bloodhound tracks in case you're not

354
00:13:46,310 --> 00:13:50,660
familiar with the tool and we have

355
00:13:48,560 --> 00:13:54,790
documentation for each of these in the

356
00:13:50,660 --> 00:13:54,790
tool and in blog post

357
00:13:55,270 --> 00:14:00,490
talk about Kerberos so in this example

358
00:13:58,870 --> 00:14:02,950
attack path let's say that we have a

359
00:14:00,490 --> 00:14:05,589
shell on a system and we run bloodhound

360
00:14:02,950 --> 00:14:08,080
and we say show me a path from my user

361
00:14:05,589 --> 00:14:10,240
to the sequel box or a domain admin or

362
00:14:08,080 --> 00:14:12,190
whatever and we get that really annoying

363
00:14:10,240 --> 00:14:17,440
pop-up at the top that says no data

364
00:14:12,190 --> 00:14:19,240
returned I hate that so are we done like

365
00:14:17,440 --> 00:14:21,190
is that it like is at the end of the

366
00:14:19,240 --> 00:14:23,140
assessment of course not so there are

367
00:14:21,190 --> 00:14:25,060
other ways that you can start your

368
00:14:23,140 --> 00:14:27,880
attack that don't necessarily require

369
00:14:25,060 --> 00:14:29,380
your initial access user to have any

370
00:14:27,880 --> 00:14:30,370
sort of special privileges that are

371
00:14:29,380 --> 00:14:33,480
tracked by bloodhound

372
00:14:30,370 --> 00:14:36,040
think about Kerberos as an example

373
00:14:33,480 --> 00:14:40,029
Kerberos is based on original research

374
00:14:36,040 --> 00:14:43,270
by Tim Medine is Tim in the room don't

375
00:14:40,029 --> 00:14:45,279
think so if you see him give a handshake

376
00:14:43,270 --> 00:14:47,410
Kerberos basically revolutionized red

377
00:14:45,279 --> 00:14:50,529
teaming for us changed a lot of how we

378
00:14:47,410 --> 00:14:53,290
do our very initial reconnaissance

379
00:14:50,529 --> 00:14:55,810
efforts and initial lateral movement

380
00:14:53,290 --> 00:14:58,390
efforts and it's again an extremely

381
00:14:55,810 --> 00:15:00,250
reliable attack so we included in the

382
00:14:58,390 --> 00:15:01,390
bloodhound project the long the short of

383
00:15:00,250 --> 00:15:03,700
Kerberos thing if you are not familiar

384
00:15:01,390 --> 00:15:07,569
is that Kerberos thing allows you to do

385
00:15:03,700 --> 00:15:10,930
offline password cracking by any domain

386
00:15:07,570 --> 00:15:14,560
authenticated principal against any user

387
00:15:10,930 --> 00:15:18,880
that has a non-null service principal

388
00:15:14,560 --> 00:15:20,800
name LDAP attribute okay there are some

389
00:15:18,880 --> 00:15:23,189
caveats to that which if you look at

390
00:15:20,800 --> 00:15:25,810
will Schroeder's talk from earlier today

391
00:15:23,190 --> 00:15:27,670
you'll see what those caveats can be and

392
00:15:25,810 --> 00:15:30,459
will update this deck with the link to

393
00:15:27,670 --> 00:15:32,140
his talk when that's done so Kerberos is

394
00:15:30,459 --> 00:15:34,479
great love it

395
00:15:32,140 --> 00:15:37,300
swear by it it's incredibly dangerous

396
00:15:34,480 --> 00:15:39,160
from the defender side and it can be

397
00:15:37,300 --> 00:15:41,529
very difficult to figure out what your

398
00:15:39,160 --> 00:15:43,360
so to say hit list of remediation is for

399
00:15:41,529 --> 00:15:46,510
that if you don't have access to this

400
00:15:43,360 --> 00:15:48,760
data but there's one very very big

401
00:15:46,510 --> 00:15:52,200
problem with Kerberos and I will let you

402
00:15:48,760 --> 00:15:52,200
sit in suspense as I drink some water

403
00:15:57,410 --> 00:16:03,180
so the problem with Kerberos is that we

404
00:16:00,930 --> 00:16:08,339
have finite password cracking resources

405
00:16:03,180 --> 00:16:11,250
and sometimes you have a wealth of users

406
00:16:08,339 --> 00:16:13,920
that you can choose from two Kerberos

407
00:16:11,250 --> 00:16:16,980
and you may know what privilege they

408
00:16:13,920 --> 00:16:18,569
have or you may not if you don't then

409
00:16:16,980 --> 00:16:21,440
you can guess what kind of privilege

410
00:16:18,570 --> 00:16:24,060
they have based on group membership

411
00:16:21,440 --> 00:16:26,579
based on what systems they use

412
00:16:24,060 --> 00:16:27,989
frequently or based on maybe the

413
00:16:26,579 --> 00:16:30,180
description in the user object or

414
00:16:27,990 --> 00:16:31,620
something like that and so what does

415
00:16:30,180 --> 00:16:34,589
that translate into that that means that

416
00:16:31,620 --> 00:16:37,589
we're wasting effort on low privileged

417
00:16:34,589 --> 00:16:39,450
accounts by doing parallel offline

418
00:16:37,589 --> 00:16:42,209
password cracking efforts across many

419
00:16:39,450 --> 00:16:44,100
different users that also means that

420
00:16:42,209 --> 00:16:45,810
there's limited key space you can

421
00:16:44,100 --> 00:16:48,120
explore per hash that you're trying to

422
00:16:45,810 --> 00:16:50,099
crack so what if what if you're doing

423
00:16:48,120 --> 00:16:52,500
key space of one through six characters

424
00:16:50,100 --> 00:16:54,300
that are printable but the domain admin

425
00:16:52,500 --> 00:16:55,560
password was seven characters long and

426
00:16:54,300 --> 00:16:57,089
you didn't get there because you were

427
00:16:55,560 --> 00:17:01,219
focusing on all these other accounts

428
00:16:57,089 --> 00:17:04,350
that don't matter and this affects you

429
00:17:01,220 --> 00:17:06,660
whether you have two Kerberos table

430
00:17:04,349 --> 00:17:09,149
users if you have 200 Kerberos table

431
00:17:06,660 --> 00:17:15,510
users or if you have 20,000 Kerberos

432
00:17:09,150 --> 00:17:18,319
table users which we have seen good lord

433
00:17:15,510 --> 00:17:20,640
so bloodhound lets us intelligently

434
00:17:18,319 --> 00:17:23,129
prioritize that password cracking effort

435
00:17:20,640 --> 00:17:25,980
which I'm going to show you exactly how

436
00:17:23,130 --> 00:17:27,209
we can do that so first of all if we

437
00:17:25,980 --> 00:17:30,320
look in the bloodhound GUI there are

438
00:17:27,209 --> 00:17:32,790
some pre-built queries that can help us

439
00:17:30,320 --> 00:17:34,230
figure out what users are worth going

440
00:17:32,790 --> 00:17:36,178
after and which ones are not from a

441
00:17:34,230 --> 00:17:38,970
Kerberos perspective and one of the

442
00:17:36,179 --> 00:17:40,710
really easy wins is come over here at

443
00:17:38,970 --> 00:17:41,700
the pre-built queries this is of course

444
00:17:40,710 --> 00:17:43,230
after you've done your data collection

445
00:17:41,700 --> 00:17:46,740
with char pound and import the data in

446
00:17:43,230 --> 00:17:49,800
the database and if we look at shortest

447
00:17:46,740 --> 00:17:52,110
paths to domain admins from Kerberos

448
00:17:49,800 --> 00:17:53,970
table users if you click on that it will

449
00:17:52,110 --> 00:17:57,300
tell you what domain do you want to

450
00:17:53,970 --> 00:17:58,559
select so we select contoso and that

451
00:17:57,300 --> 00:18:01,440
will run a query on the backend database

452
00:17:58,559 --> 00:18:04,830
and say any user that is Kerberos table

453
00:18:01,440 --> 00:18:06,750
or in other words has an SP n is there

454
00:18:04,830 --> 00:18:09,059
an attack path from all those users or

455
00:18:06,750 --> 00:18:11,110
any of those users to domain admin and

456
00:18:09,059 --> 00:18:12,910
of course we can see that there are

457
00:18:11,110 --> 00:18:14,560
and if we click on one of these let's

458
00:18:12,910 --> 00:18:16,540
let's pick on Jason let's that's my

459
00:18:14,560 --> 00:18:19,169
favorite thing to do recently just pick

460
00:18:16,540 --> 00:18:20,980
on Jason Frank so we look at Jason

461
00:18:19,170 --> 00:18:22,540
there's a whole bunch of information

462
00:18:20,980 --> 00:18:24,700
that we get from ad about this user

463
00:18:22,540 --> 00:18:28,540
including the last time that Jason

464
00:18:24,700 --> 00:18:31,450
changes password which was um what year

465
00:18:28,540 --> 00:18:36,940
is it 2019 16 years ago I don't know

466
00:18:31,450 --> 00:18:38,590
Jason's even that old and of course

467
00:18:36,940 --> 00:18:42,250
Jason has a path to domain admin and

468
00:18:38,590 --> 00:18:45,070
because his password is so old that at

469
00:18:42,250 --> 00:18:47,230
least tells me that you know based on

470
00:18:45,070 --> 00:18:49,360
password best practices from way back in

471
00:18:47,230 --> 00:18:51,910
the day and even some that's currently

472
00:18:49,360 --> 00:18:54,040
exists it's pretty likely that jason has

473
00:18:51,910 --> 00:18:58,180
a pretty bad password I also look at him

474
00:18:54,040 --> 00:19:02,409
like you can tell he's management yeah

475
00:18:58,180 --> 00:19:07,440
this pastor is probably one please don't

476
00:19:02,410 --> 00:19:09,730
hack us so something else we can do is

477
00:19:07,440 --> 00:19:11,470
yeah let's say you buy into that theory

478
00:19:09,730 --> 00:19:12,820
that the older the password is the more

479
00:19:11,470 --> 00:19:14,860
likely it is that you'll be able to

480
00:19:12,820 --> 00:19:19,090
crack that password what we can also do

481
00:19:14,860 --> 00:19:21,159
is look at shortest paths from Kerberos

482
00:19:19,090 --> 00:19:24,850
table users and again select our domain

483
00:19:21,160 --> 00:19:28,770
this will populate a list that is all

484
00:19:24,850 --> 00:19:31,840
Kerberos table users sorted in

485
00:19:28,770 --> 00:19:33,400
descending order where the further back

486
00:19:31,840 --> 00:19:35,889
their password is the higher up in the

487
00:19:33,400 --> 00:19:37,690
list they will be so in fact we have

488
00:19:35,890 --> 00:19:40,780
this this user right here that their

489
00:19:37,690 --> 00:19:43,600
password changed in 2002 and if we click

490
00:19:40,780 --> 00:19:45,430
on this user bloodhound we'll say from

491
00:19:43,600 --> 00:19:46,600
that user how far can you go into the

492
00:19:45,430 --> 00:19:50,770
network and of course from this user

493
00:19:46,600 --> 00:19:52,300
we've got tons and tons of options but

494
00:19:50,770 --> 00:19:53,920
let's say for example that one of those

495
00:19:52,300 --> 00:19:56,110
caveats applied to that user that we'll

496
00:19:53,920 --> 00:20:00,430
talked about in his in his talk earlier

497
00:19:56,110 --> 00:20:03,370
today or say that you know that that

498
00:20:00,430 --> 00:20:07,720
account is very heavily monitored or you

499
00:20:03,370 --> 00:20:09,310
know that if you use that account and

500
00:20:07,720 --> 00:20:10,510
there's a logon for that user on some

501
00:20:09,310 --> 00:20:14,320
other system that that's going to

502
00:20:10,510 --> 00:20:16,360
trigger an alert so the interface is a

503
00:20:14,320 --> 00:20:20,080
little bit limited right now as far as

504
00:20:16,360 --> 00:20:22,919
this kind of analysis so what we are

505
00:20:20,080 --> 00:20:22,919
going to do

506
00:20:22,930 --> 00:20:31,150
is roll our sleeves up and my message to

507
00:20:26,200 --> 00:20:34,150
you is don't be afraid to do that so on

508
00:20:31,150 --> 00:20:36,700
the Left we have the Jason Frank active

509
00:20:34,150 --> 00:20:38,680
directory object and you can see that he

510
00:20:36,700 --> 00:20:41,620
has a attribute set where it says

511
00:20:38,680 --> 00:20:42,820
service principal name foo slash bar it

512
00:20:41,620 --> 00:20:45,129
doesn't matter what this is as long as

513
00:20:42,820 --> 00:20:48,220
it follows that format it will be so to

514
00:20:45,130 --> 00:20:51,790
say valid when char pound finds a user

515
00:20:48,220 --> 00:20:55,690
that has a service principal name set it

516
00:20:51,790 --> 00:20:59,500
internally has this boolean value on the

517
00:20:55,690 --> 00:21:02,710
node in the neo4j database and the the

518
00:20:59,500 --> 00:21:04,780
name of that property is has SP n and in

519
00:21:02,710 --> 00:21:06,850
this instance that is true by default

520
00:21:04,780 --> 00:21:07,360
every user we add has this attribute set

521
00:21:06,850 --> 00:21:09,760
is false

522
00:21:07,360 --> 00:21:14,409
until we find users that have SP ends

523
00:21:09,760 --> 00:21:16,000
what we also do is put a list value on

524
00:21:14,410 --> 00:21:17,770
the service principal name attribute to

525
00:21:16,000 --> 00:21:19,450
list out what all those SP ends are as

526
00:21:17,770 --> 00:21:24,210
well because there's all kinds of great

527
00:21:19,450 --> 00:21:26,650
intelligence you can glean from that so

528
00:21:24,210 --> 00:21:28,570
what if we want to get a count for how

529
00:21:26,650 --> 00:21:30,010
many kerberos simple users we have we

530
00:21:28,570 --> 00:21:32,139
can do that with a little bit of cypher

531
00:21:30,010 --> 00:21:35,379
and I'm gonna show you exactly how this

532
00:21:32,140 --> 00:21:38,380
works so this is the neo4j web console

533
00:21:35,380 --> 00:21:44,920
by a show of hands who has looked at

534
00:21:38,380 --> 00:21:50,980
this great who likes cypher put my hand

535
00:21:44,920 --> 00:21:52,330
up as high as I can so let's just copy

536
00:21:50,980 --> 00:21:55,600
and paste this and what we're doing is

537
00:21:52,330 --> 00:21:58,270
we're saying I want to match any user

538
00:21:55,600 --> 00:22:02,860
labelled node and I'm gonna apply that

539
00:21:58,270 --> 00:22:05,530
to the variable called you and I'm gonna

540
00:22:02,860 --> 00:22:07,810
constrain that to users where the has SP

541
00:22:05,530 --> 00:22:10,180
and attribute is true then I'll return a

542
00:22:07,810 --> 00:22:13,090
count of how many users came back and I

543
00:22:10,180 --> 00:22:15,580
have 65 if I have a week of password

544
00:22:13,090 --> 00:22:18,100
cracking power and I have 65 herb five

545
00:22:15,580 --> 00:22:23,860
TGS tickets to crack I'm doing something

546
00:22:18,100 --> 00:22:27,219
wrong what else can we do we can limit

547
00:22:23,860 --> 00:22:29,379
our search result to just the Kerberos

548
00:22:27,220 --> 00:22:32,650
table users that have a path to da

549
00:22:29,380 --> 00:22:33,820
or path to enterprise admin or a path to

550
00:22:32,650 --> 00:22:36,250
a domain controller or a path to

551
00:22:33,820 --> 00:22:36,850
whatever you want and so the way we do

552
00:22:36,250 --> 00:22:40,410
that is it

553
00:22:36,850 --> 00:22:43,419
we match any user that has an espy n

554
00:22:40,410 --> 00:22:45,220
then we matched the domain admins group

555
00:22:43,420 --> 00:22:48,580
in the contoso domain and apply that to

556
00:22:45,220 --> 00:22:52,000
the variable lowercase G then we have a

557
00:22:48,580 --> 00:22:54,939
pattern where the variable is going to

558
00:22:52,000 --> 00:22:59,680
be P and the pattern statement is

559
00:22:54,940 --> 00:23:02,440
shortest path from u variable to G and

560
00:22:59,680 --> 00:23:04,960
this will start from every single user

561
00:23:02,440 --> 00:23:06,280
that matches that variable and find a

562
00:23:04,960 --> 00:23:09,070
path from each of those two domain

563
00:23:06,280 --> 00:23:11,830
admins then we'll return the name of the

564
00:23:09,070 --> 00:23:14,110
user and the length of the attack path

565
00:23:11,830 --> 00:23:16,000
so we can see who's the closest to

566
00:23:14,110 --> 00:23:19,469
domain admin and we'll sort that in

567
00:23:16,000 --> 00:23:19,470
ascending order so let's do that

568
00:23:27,750 --> 00:23:32,010
okay so what we get back is a nice

569
00:23:30,150 --> 00:23:34,049
little list so at the very top we have

570
00:23:32,010 --> 00:23:36,809
this user called s Starbuck and it's

571
00:23:34,049 --> 00:23:39,120
length of its attack path so to say to

572
00:23:36,809 --> 00:23:41,309
domain admin is one that means there is

573
00:23:39,120 --> 00:23:43,530
one relationship separating that user

574
00:23:41,309 --> 00:23:44,879
from the domain admins group and that

575
00:23:43,530 --> 00:23:46,289
could be it's a member of the domain

576
00:23:44,880 --> 00:23:48,630
admins group it has controlled the

577
00:23:46,289 --> 00:23:50,520
domain admins group or whatever more

578
00:23:48,630 --> 00:23:51,900
than likely it is a domain admin and as

579
00:23:50,520 --> 00:23:54,389
you scroll down you can see that the

580
00:23:51,900 --> 00:23:55,380
attack paths get longer which means

581
00:23:54,390 --> 00:23:57,179
they're going to be more complicated

582
00:23:55,380 --> 00:23:59,220
which means that it's going to give

583
00:23:57,179 --> 00:24:03,260
defenders more opportunity to detect

584
00:23:59,220 --> 00:24:03,260
each of your attack path steps as well

585
00:24:03,440 --> 00:24:07,650
so what if we don't have any Kerberos

586
00:24:06,150 --> 00:24:10,230
double users that have a path the domain

587
00:24:07,650 --> 00:24:12,179
admin well we still have plenty of

588
00:24:10,230 --> 00:24:14,190
really juicy data in the bloodhound

589
00:24:12,179 --> 00:24:16,110
database to help us out so instead of

590
00:24:14,190 --> 00:24:18,360
finding just Kerberos table users that

591
00:24:16,110 --> 00:24:20,850
have a path to domain admin what if we

592
00:24:18,360 --> 00:24:23,520
look for the most privileged Kerberos

593
00:24:20,850 --> 00:24:26,428
table users based on how many computers

594
00:24:23,520 --> 00:24:28,110
they have local admin rights on you can

595
00:24:26,429 --> 00:24:30,659
do some slight modification to this to

596
00:24:28,110 --> 00:24:31,639
have it be control of a tea user objects

597
00:24:30,659 --> 00:24:34,280
instead

598
00:24:31,640 --> 00:24:36,240
so let's look what this looks like I

599
00:24:34,280 --> 00:24:37,678
don't explain this one too and death

600
00:24:36,240 --> 00:24:41,880
because I'd be up here for about 30

601
00:24:37,679 --> 00:24:44,220
minutes explaining it if you want

602
00:24:41,880 --> 00:24:45,720
somebody to explain it to you

603
00:24:44,220 --> 00:24:47,730
Matthew Silla is right here in the front

604
00:24:45,720 --> 00:24:50,580
row Scooby and he'll be happy to explain

605
00:24:47,730 --> 00:24:53,309
to you what it means so we run that we

606
00:24:50,580 --> 00:24:54,780
run that query and sure enough this s

607
00:24:53,309 --> 00:24:57,210
Starbuck user comes back at the top and

608
00:24:54,780 --> 00:25:00,510
the count of computers that this user

609
00:24:57,210 --> 00:25:01,890
has Evan writes on is 511 which is the

610
00:25:00,510 --> 00:25:03,809
number of computers that we have in this

611
00:25:01,890 --> 00:25:06,659
database and then scrolling down the

612
00:25:03,809 --> 00:25:08,220
list you can see that the number of

613
00:25:06,659 --> 00:25:09,950
computers that each user has Edmund Rice

614
00:25:08,220 --> 00:25:11,970
gets fewer and fewer and fewer and fewer

615
00:25:09,950 --> 00:25:13,380
until you get the very bottom where as J

616
00:25:11,970 --> 00:25:18,419
Frank right where he belongs right at

617
00:25:13,380 --> 00:25:19,169
the bottom of the list so from all of

618
00:25:18,419 --> 00:25:22,350
this right here

619
00:25:19,169 --> 00:25:24,830
like if I'm on a red team and I want to

620
00:25:22,350 --> 00:25:26,459
have really good success with Kerberos

621
00:25:24,830 --> 00:25:29,639
there's a whole bunch of different

622
00:25:26,460 --> 00:25:32,730
angles that you can look at to kind of

623
00:25:29,640 --> 00:25:35,340
heighten your chances of success and

624
00:25:32,730 --> 00:25:39,390
also maximizing the value that you get

625
00:25:35,340 --> 00:25:41,459
out of your password cracking capability

626
00:25:39,390 --> 00:25:42,840
a lot of times on

627
00:25:41,460 --> 00:25:46,559
Red Team assessment that may just be the

628
00:25:42,840 --> 00:25:48,570
GPU in your laptop or it may be like a

629
00:25:46,559 --> 00:25:49,799
20 GPU system that your employer has

630
00:25:48,570 --> 00:25:52,610
purchased and put into a rack somewhere

631
00:25:49,799 --> 00:25:57,330
or maybe more if you're really lucky

632
00:25:52,610 --> 00:25:59,399
either way as as we get to a key space

633
00:25:57,330 --> 00:26:02,189
that can that covers more character a

634
00:25:59,399 --> 00:26:04,260
length of a password we of course see

635
00:26:02,190 --> 00:26:05,850
complexity that rises tangentially so

636
00:26:04,260 --> 00:26:08,340
making the most of your password

637
00:26:05,850 --> 00:26:11,809
cracking effort matters regardless of

638
00:26:08,340 --> 00:26:11,809
what your situation is

639
00:26:14,680 --> 00:26:18,310
so we're gonna hand wave this a little

640
00:26:16,720 --> 00:26:20,890
bit and we're gonna say that we Kerberos

641
00:26:18,310 --> 00:26:22,570
did Jason Frank and we got his password

642
00:26:20,890 --> 00:26:23,500
there have been lots of presentations

643
00:26:22,570 --> 00:26:25,360
that tell you how to do this

644
00:26:23,500 --> 00:26:27,370
operationally there's a lot of good

645
00:26:25,360 --> 00:26:29,490
writing that will tell you how to do

646
00:26:27,370 --> 00:26:31,929
this from several different resources

647
00:26:29,490 --> 00:26:34,150
Rob fuller Sean Metcalf will Schroeder

648
00:26:31,930 --> 00:26:35,590
and the Black Hills InfoSec guys have

649
00:26:34,150 --> 00:26:37,270
lots of really good documentation about

650
00:26:35,590 --> 00:26:39,220
that it's a little bit outside the scope

651
00:26:37,270 --> 00:26:41,320
of what we're talking about so if you

652
00:26:39,220 --> 00:26:42,820
don't know how to do this actual attack

653
00:26:41,320 --> 00:26:44,679
go to one of these links or go to all of

654
00:26:42,820 --> 00:26:46,590
them and and see for yourself how to do

655
00:26:44,680 --> 00:26:48,460
it

656
00:26:46,590 --> 00:26:49,899
so now we're gonna go to the next step

657
00:26:48,460 --> 00:26:51,520
in the attack path we're gonna say okay

658
00:26:49,900 --> 00:26:53,890
we know Jason Frank's password now so

659
00:26:51,520 --> 00:26:55,840
next we're gonna be used that right

660
00:26:53,890 --> 00:26:57,580
owner privilege that he has over the Bob

661
00:26:55,840 --> 00:27:01,720
accounting user and Rohan's gonna show

662
00:26:57,580 --> 00:27:02,620
you how to do that alright so we're

663
00:27:01,720 --> 00:27:03,970
actually covering this edge in

664
00:27:02,620 --> 00:27:07,629
particular because it's kind of a cool

665
00:27:03,970 --> 00:27:09,340
one a little known fact about Active

666
00:27:07,630 --> 00:27:11,230
Directory objects is that every single

667
00:27:09,340 --> 00:27:13,750
object in Active Directory has an owner

668
00:27:11,230 --> 00:27:15,610
that's associated with it most of the

669
00:27:13,750 --> 00:27:19,360
time that ends up being a domain admins

670
00:27:15,610 --> 00:27:21,580
group but the interesting part here is

671
00:27:19,360 --> 00:27:23,409
that the owner of an object has the

672
00:27:21,580 --> 00:27:25,689
ability to modify the access control

673
00:27:23,410 --> 00:27:27,970
list of an object regardless of any

674
00:27:25,690 --> 00:27:29,620
other aces that are on there even if

675
00:27:27,970 --> 00:27:31,600
there is an ace in the ACL that

676
00:27:29,620 --> 00:27:34,149
specifically denies you from changing

677
00:27:31,600 --> 00:27:36,129
the ACL because you were the owner you

678
00:27:34,150 --> 00:27:37,990
can you can just bypass that all

679
00:27:36,130 --> 00:27:40,030
together so if you have the ability to

680
00:27:37,990 --> 00:27:41,590
write the owner of an object you can

681
00:27:40,030 --> 00:27:42,910
right change that owner to whatever you

682
00:27:41,590 --> 00:27:45,070
want at which point you have full

683
00:27:42,910 --> 00:27:47,680
control of the object so that's that's

684
00:27:45,070 --> 00:27:50,470
exactly what we're gonna do here because

685
00:27:47,680 --> 00:27:51,970
we are a member of the IT zero zero zero

686
00:27:50,470 --> 00:27:54,760
three five group I don't know why

687
00:27:51,970 --> 00:27:56,500
Jason's an IT group but you know these

688
00:27:54,760 --> 00:27:59,740
things happen people mess up their ad

689
00:27:56,500 --> 00:28:02,080
all the time we have the ability to

690
00:27:59,740 --> 00:28:04,960
write owner on the Bob not accounting

691
00:28:02,080 --> 00:28:07,000
user so our attack pad that we're gonna

692
00:28:04,960 --> 00:28:08,830
execute here is first we're gonna use

693
00:28:07,000 --> 00:28:10,900
our right owner privilege to change the

694
00:28:08,830 --> 00:28:13,629
owner of bob dot accounting to jason

695
00:28:10,900 --> 00:28:16,540
frank and then from there we are going

696
00:28:13,630 --> 00:28:18,820
to grant the grant jason frank the

697
00:28:16,540 --> 00:28:20,470
ability the user we already control the

698
00:28:18,820 --> 00:28:21,760
ability to completely change bob to

699
00:28:20,470 --> 00:28:23,680
accountings password without knowing

700
00:28:21,760 --> 00:28:26,170
their current one this is a right you

701
00:28:23,680 --> 00:28:27,700
often see helpdesk groups have if you've

702
00:28:26,170 --> 00:28:27,970
never audited your helpdesk group rights

703
00:28:27,700 --> 00:28:29,470
and

704
00:28:27,970 --> 00:28:31,780
who has control over them you should do

705
00:28:29,470 --> 00:28:33,520
that because when you can reset the user

706
00:28:31,780 --> 00:28:35,440
any password in the dome and you're

707
00:28:33,520 --> 00:28:37,810
basically you're basically da at that

708
00:28:35,440 --> 00:28:39,820
point then we're gonna change Jason

709
00:28:37,810 --> 00:28:43,090
Frank's password without knowing his

710
00:28:39,820 --> 00:28:44,500
current one oh yeah sorry Bob County

711
00:28:43,090 --> 00:28:46,959
we're gonna change Bob County's password

712
00:28:44,500 --> 00:28:48,310
without knowing it currently and Bob

713
00:28:46,960 --> 00:28:49,810
counting is gonna go complain to help

714
00:28:48,310 --> 00:28:51,490
desk that he locked out his account by

715
00:28:49,810 --> 00:28:53,200
accident but in the meantime we're gonna

716
00:28:51,490 --> 00:28:59,620
utilize his rights to do what we need to

717
00:28:53,200 --> 00:29:01,360
do all right so we got a little video

718
00:28:59,620 --> 00:29:02,649
here of how this uh how this looks like

719
00:29:01,360 --> 00:29:04,179
and we're gonna be using a Power View

720
00:29:02,650 --> 00:29:05,770
for this if you're not familiar with

721
00:29:04,180 --> 00:29:06,930
Power View you should you should

722
00:29:05,770 --> 00:29:09,550
definitely be familiar with Power View

723
00:29:06,930 --> 00:29:12,040
and the first thing we're gonna do is

724
00:29:09,550 --> 00:29:14,500
use a set domain object owner command

725
00:29:12,040 --> 00:29:16,330
lit and all this does is it changes the

726
00:29:14,500 --> 00:29:18,730
the owner of an object to whatever we

727
00:29:16,330 --> 00:29:20,800
specify so we're gonna say the owner of

728
00:29:18,730 --> 00:29:22,960
Bob dat accounting is now J Frank who we

729
00:29:20,800 --> 00:29:25,780
control then we're gonna use add domain

730
00:29:22,960 --> 00:29:28,060
object ACL and get the right reset

731
00:29:25,780 --> 00:29:30,790
password which translates to force reset

732
00:29:28,060 --> 00:29:32,500
password in the bloodhound schema after

733
00:29:30,790 --> 00:29:35,460
that we are going to create a string

734
00:29:32,500 --> 00:29:37,570
with the password Derby con 2019 bank

735
00:29:35,460 --> 00:29:40,510
very very sick here no one will ever

736
00:29:37,570 --> 00:29:43,000
crack it and then we're going to again

737
00:29:40,510 --> 00:29:45,370
use Power View to directly set the

738
00:29:43,000 --> 00:29:47,590
password of the Bob duck County user to

739
00:29:45,370 --> 00:29:50,169
this new one so this point we now know

740
00:29:47,590 --> 00:29:52,649
Bob accountings password so we are Bob

741
00:29:50,170 --> 00:29:52,650
data counting

742
00:29:58,490 --> 00:30:01,769
all right and look at that just like

743
00:30:00,539 --> 00:30:03,899
that we're on the next step or attack

744
00:30:01,769 --> 00:30:06,929
that that was that was nice nice nice

745
00:30:03,899 --> 00:30:08,760
quick one right there so the next one is

746
00:30:06,929 --> 00:30:11,399
actually gonna be some really fun new

747
00:30:08,760 --> 00:30:13,080
stuff that came out not too long ago and

748
00:30:11,399 --> 00:30:15,870
I'm gonna go ahead and pass us right

749
00:30:13,080 --> 00:30:18,299
back to Andy yeah so we are hand waving

750
00:30:15,870 --> 00:30:21,299
some stuff but if you if you're not sure

751
00:30:18,299 --> 00:30:22,559
how to create a token for yourself or

752
00:30:21,299 --> 00:30:25,830
create a process for yourself or

753
00:30:22,559 --> 00:30:27,750
otherwise get into a user context as a

754
00:30:25,830 --> 00:30:30,090
user that you're not currently running

755
00:30:27,750 --> 00:30:31,080
as interactively come talk to us and ask

756
00:30:30,090 --> 00:30:32,580
us we're gonna be at the Spector house

757
00:30:31,080 --> 00:30:34,320
booth after this and what happy to happy

758
00:30:32,580 --> 00:30:37,289
to tell you about that but for the sake

759
00:30:34,320 --> 00:30:40,549
of brevity we'll just say that we are

760
00:30:37,289 --> 00:30:43,639
now impersonating Bob data counting so

761
00:30:40,549 --> 00:30:46,679
allowed to act this is shorthand for

762
00:30:43,639 --> 00:30:51,449
allowed to act on behalf of other

763
00:30:46,679 --> 00:30:53,100
identity clear as mud right so this is

764
00:30:51,450 --> 00:30:54,360
based on original abuse research by

765
00:30:53,100 --> 00:30:55,529
Alicia Muir

766
00:30:54,360 --> 00:30:58,860
there's his Twitter handle right there

767
00:30:55,529 --> 00:31:01,620
and then this research that Eva put out

768
00:30:58,860 --> 00:31:05,610
was made practically abusable by will

769
00:31:01,620 --> 00:31:08,070
Schroeder using Rubeus so this comes

770
00:31:05,610 --> 00:31:10,350
from an attribute on the LDAP object and

771
00:31:08,070 --> 00:31:12,299
the name of that attribute is MSDS

772
00:31:10,350 --> 00:31:16,309
allowed to act on behalf of other

773
00:31:12,299 --> 00:31:18,510
identity everybody got it all right

774
00:31:16,309 --> 00:31:20,639
there's some resource links at the

775
00:31:18,510 --> 00:31:24,539
bottom as well and the deck is obviously

776
00:31:20,639 --> 00:31:25,860
going to be available after the talk so

777
00:31:24,539 --> 00:31:28,679
here's the piece of the attack path so

778
00:31:25,860 --> 00:31:30,479
Bob accounting is allowed to act to

779
00:31:28,679 --> 00:31:33,179
accounting 0 0 1 what does that mean in

780
00:31:30,480 --> 00:31:34,830
English so the user Bob accounting is

781
00:31:33,179 --> 00:31:36,990
allowed to act on behalf of other

782
00:31:34,830 --> 00:31:40,230
identities to the computer accounting 0

783
00:31:36,990 --> 00:31:42,110
0 1 in other words the user Bob

784
00:31:40,230 --> 00:31:45,330
accounting is allowed to impersonate

785
00:31:42,110 --> 00:31:50,760
other identities to the computer

786
00:31:45,330 --> 00:31:54,090
accounting 0 0 1 or put a third way this

787
00:31:50,760 --> 00:31:56,789
computer trusts Bob to impersonate

788
00:31:54,090 --> 00:31:59,399
anybody else against any service that

789
00:31:56,789 --> 00:32:04,110
that system hosts including

790
00:31:59,399 --> 00:32:07,500
I don't know SMB RPC etc bottom line is

791
00:32:04,110 --> 00:32:09,840
it's Kerberos delegation and this

792
00:32:07,500 --> 00:32:11,250
specific flavor of Kerberos delegation

793
00:32:09,840 --> 00:32:14,549
is called resource-based constrained

794
00:32:11,250 --> 00:32:16,830
delegation so our plan of attack with

795
00:32:14,549 --> 00:32:18,629
this edge is we want to determine first

796
00:32:16,830 --> 00:32:20,789
of all who is it that we want to

797
00:32:18,630 --> 00:32:23,880
impersonate now keep in mind we can only

798
00:32:20,789 --> 00:32:25,890
impersonate to that computer itself so

799
00:32:23,880 --> 00:32:28,049
we want to pick somebody who has a band

800
00:32:25,890 --> 00:32:31,080
rights on that system so we can abuse

801
00:32:28,049 --> 00:32:32,850
that some caveats with that this account

802
00:32:31,080 --> 00:32:34,918
cannot be marked as sensitive and cannot

803
00:32:32,850 --> 00:32:37,230
be delegated it cannot belong to the

804
00:32:34,919 --> 00:32:38,909
protected users group and the account

805
00:32:37,230 --> 00:32:40,529
needs to be privileged on the target I

806
00:32:38,909 --> 00:32:42,419
can tell you from personal experience

807
00:32:40,529 --> 00:32:44,940
that these first two are almost never a

808
00:32:42,419 --> 00:32:46,980
problem because these configurations are

809
00:32:44,940 --> 00:32:50,070
not very well understood by most ad

810
00:32:46,980 --> 00:32:51,270
admins and are experienced so just be

811
00:32:50,070 --> 00:32:53,428
aware of that when you actually do

812
00:32:51,270 --> 00:32:55,289
execute this attack okay so that's step

813
00:32:53,429 --> 00:32:59,789
one pick out who we're gonna impersonate

814
00:32:55,289 --> 00:33:01,830
step to impersonate that user easy step

815
00:32:59,789 --> 00:33:07,679
three execute privileged commands on

816
00:33:01,830 --> 00:33:10,529
that target computer all right so if

817
00:33:07,679 --> 00:33:13,169
we're going to pick a user that we want

818
00:33:10,529 --> 00:33:15,450
to impersonate we can use the bloodhound

819
00:33:13,169 --> 00:33:16,679
interface to do that and so the top left

820
00:33:15,450 --> 00:33:19,980
will search for that computer accounting

821
00:33:16,679 --> 00:33:22,049
0:01 click on it then in the local

822
00:33:19,980 --> 00:33:25,860
admins drop-down we can see that there's

823
00:33:22,049 --> 00:33:28,320
20 group delegated admins on that system

824
00:33:25,860 --> 00:33:31,260
the domain admins is added local admins

825
00:33:28,320 --> 00:33:32,700
and also this group called IT 49 here

826
00:33:31,260 --> 00:33:34,860
all the users that belong to that group

827
00:33:32,700 --> 00:33:37,529
including the very bottom this guy named

828
00:33:34,860 --> 00:33:40,559
david mcguire is that what that says ok

829
00:33:37,529 --> 00:33:42,450
yeah something McGuire all right so

830
00:33:40,559 --> 00:33:43,918
let's say that we go through we find out

831
00:33:42,450 --> 00:33:46,679
that ok yes David does not belong to the

832
00:33:43,919 --> 00:33:48,090
protected users group he his account is

833
00:33:46,679 --> 00:33:51,480
not marked as sensitive and cannot be

834
00:33:48,090 --> 00:33:52,649
delegated and we kind of honestly don't

835
00:33:51,480 --> 00:33:53,850
really think he's that important so

836
00:33:52,649 --> 00:33:56,158
people are probably not monitoring

837
00:33:53,850 --> 00:33:59,330
actions with his account if you don't

838
00:33:56,159 --> 00:33:59,330
know David McGuire's our CEO

839
00:34:00,540 --> 00:34:07,060
so the actual attack okay so we're going

840
00:34:04,690 --> 00:34:09,820
to use Rubeus for this put up by will

841
00:34:07,060 --> 00:34:12,489
Schroeder and we're so Who am I

842
00:34:09,820 --> 00:34:15,790
we're Bob accounting hostname we're on

843
00:34:12,489 --> 00:34:17,859
desktop zero zero one so let's try to do

844
00:34:15,790 --> 00:34:19,659
out the see dollar share on accounting

845
00:34:17,860 --> 00:34:21,970
zero zero one which by default you must

846
00:34:19,659 --> 00:34:25,419
be an admin to do and of course we get

847
00:34:21,969 --> 00:34:27,790
access denied so first thing we do as

848
00:34:25,418 --> 00:34:31,359
part of this step is calculate the NT

849
00:34:27,790 --> 00:34:33,759
hash for the password of Bob accounting

850
00:34:31,360 --> 00:34:36,330
and Rubeus does that very very easily

851
00:34:33,760 --> 00:34:38,620
for us so here's the NT hash or the rc4

852
00:34:36,330 --> 00:34:40,509
we'll copy that and put that into our

853
00:34:38,620 --> 00:34:43,779
next command which is going to do the

854
00:34:40,510 --> 00:34:45,730
actual S for you process to get a TGT

855
00:34:43,780 --> 00:34:48,790
that will be valid against that system

856
00:34:45,730 --> 00:34:50,770
and then the very um we're doing slash

857
00:34:48,790 --> 00:34:53,080
PTT or pass the ticket so we're loading

858
00:34:50,770 --> 00:34:54,550
that ticket directly into memory we of

859
00:34:53,080 --> 00:34:57,730
course could take that ticket somewhere

860
00:34:54,550 --> 00:34:59,350
else and use it somewhere else so we

861
00:34:57,730 --> 00:35:03,100
finish that we see ticket is

862
00:34:59,350 --> 00:35:04,480
successfully imported and we'll try to

863
00:35:03,100 --> 00:35:06,819
derp the see dollar share again on

864
00:35:04,480 --> 00:35:10,210
accounting 0 0 1 and of course we see

865
00:35:06,820 --> 00:35:11,230
that we can so now we are impersonating

866
00:35:10,210 --> 00:35:14,080
David McGuire

867
00:35:11,230 --> 00:35:16,870
to that system over SMB and because

868
00:35:14,080 --> 00:35:19,200
David is an admin now we can laterally

869
00:35:16,870 --> 00:35:26,440
move over to that system using PS exec

870
00:35:19,200 --> 00:35:29,770
WMI decom what I miss PowerShell

871
00:35:26,440 --> 00:35:32,020
remoting WS man whatever you want

872
00:35:29,770 --> 00:35:33,340
there's a thousand ways to skin that cat

873
00:35:32,020 --> 00:35:35,490
and there are more coming out all the

874
00:35:33,340 --> 00:35:35,490
time

875
00:35:40,080 --> 00:35:44,650
alright that brings us to the last step

876
00:35:41,950 --> 00:35:46,180
in this attack path which is the sequel

877
00:35:44,650 --> 00:35:49,810
admin edge and Rohan's gonna talk about

878
00:35:46,180 --> 00:35:52,210
that alright so the sequel Abin edge is

879
00:35:49,810 --> 00:35:54,130
one of the like newest edges we've added

880
00:35:52,210 --> 00:35:56,020
actually it is newest ed we've added to

881
00:35:54,130 --> 00:35:57,820
the bloodhound schema and this was a

882
00:35:56,020 --> 00:35:59,530
this is a pretty recent thing that we

883
00:35:57,820 --> 00:36:02,140
came up with after sitting down with a

884
00:35:59,530 --> 00:36:03,550
couple of the net spy guys and he was

885
00:36:02,140 --> 00:36:05,950
like yeah you know you can just do this

886
00:36:03,550 --> 00:36:07,300
right and we were like no we didn't like

887
00:36:05,950 --> 00:36:08,890
why would we know that and he's like

888
00:36:07,300 --> 00:36:14,560
yeah so you should add that so we did

889
00:36:08,890 --> 00:36:16,750
all right so what creates this edge when

890
00:36:14,560 --> 00:36:19,119
you run the SPN targets collection

891
00:36:16,750 --> 00:36:20,710
method which is again very new it's

892
00:36:19,119 --> 00:36:21,850
included in all by default so if you're

893
00:36:20,710 --> 00:36:22,570
running all collection you're gonna get

894
00:36:21,850 --> 00:36:24,250
this anyway

895
00:36:22,570 --> 00:36:26,710
but if you just want to do this you can

896
00:36:24,250 --> 00:36:28,720
run SPN target's char pound when it

897
00:36:26,710 --> 00:36:30,220
encounters user objects with a service

898
00:36:28,720 --> 00:36:32,169
principle name we'll look at those

899
00:36:30,220 --> 00:36:34,149
service principles and see what they are

900
00:36:32,170 --> 00:36:35,619
and it will if it's science find

901
00:36:34,150 --> 00:36:37,990
something that looks like MS sequel

902
00:36:35,619 --> 00:36:39,460
slash something it'll it'll kind of save

903
00:36:37,990 --> 00:36:41,770
that off and say this is something we

904
00:36:39,460 --> 00:36:43,420
need to take a look at once it once it

905
00:36:41,770 --> 00:36:45,700
takes that it kind of parses it out into

906
00:36:43,420 --> 00:36:47,350
a hostname and we check on that host

907
00:36:45,700 --> 00:36:50,529
whether the sequel port that is in the

908
00:36:47,350 --> 00:36:52,390
in the SPN is available and if it is we

909
00:36:50,530 --> 00:36:55,330
say all right it's a very high percent

910
00:36:52,390 --> 00:36:57,279
chance that there is an there is a MS

911
00:36:55,330 --> 00:36:58,359
sequel server here and there's a good

912
00:36:57,280 --> 00:36:59,550
chance that we're gonna be able to do

913
00:36:58,359 --> 00:37:02,500
something with it

914
00:36:59,550 --> 00:37:05,560
big shout outs to Scott Sutherland Carla

915
00:37:02,500 --> 00:37:07,090
Paulsen and Eric Gruber and all the nuts

916
00:37:05,560 --> 00:37:10,029
bye guys who worked on powerup sequel

917
00:37:07,090 --> 00:37:13,110
cuz yeah cuz they they killed it and

918
00:37:10,030 --> 00:37:16,309
this is awesome okay all right

919
00:37:13,110 --> 00:37:16,309
[Applause]

920
00:37:17,579 --> 00:37:23,980
all right so what is this what does this

921
00:37:19,960 --> 00:37:26,170
functionally mean when when you set up

922
00:37:23,980 --> 00:37:27,550
ms sequel there's there's multiple

923
00:37:26,170 --> 00:37:29,520
different ways to do it and one of them

924
00:37:27,550 --> 00:37:32,319
is to configure it using a user account

925
00:37:29,520 --> 00:37:34,540
now obviously if you can figure using a

926
00:37:32,319 --> 00:37:36,069
user account you don't want to have to

927
00:37:34,540 --> 00:37:38,859
log in every single time to start that

928
00:37:36,069 --> 00:37:41,529
sequence so Active Directory is happy to

929
00:37:38,859 --> 00:37:43,869
facilitate that for you by using a

930
00:37:41,530 --> 00:37:46,150
service principle name when you set up

931
00:37:43,869 --> 00:37:48,760
ms sequel as a user account that user

932
00:37:46,150 --> 00:37:52,000
account is given a service principle

933
00:37:48,760 --> 00:37:54,310
name and ad so that the Kerberos ticket

934
00:37:52,000 --> 00:37:57,390
can be grabbed by the service itself and

935
00:37:54,310 --> 00:38:01,299
used to start up sequel

936
00:37:57,390 --> 00:38:03,279
now this isn't 100% but it's pretty

937
00:38:01,300 --> 00:38:06,640
close in our experience the user that

938
00:38:03,280 --> 00:38:09,430
was used to start the service is almost

939
00:38:06,640 --> 00:38:11,890
always a sysadmin on the sequel instance

940
00:38:09,430 --> 00:38:13,509
that was used because if you're setting

941
00:38:11,890 --> 00:38:15,368
up as a user you're probably just like

942
00:38:13,510 --> 00:38:17,770
setting something up quickly or you know

943
00:38:15,369 --> 00:38:23,380
you are the admin for that box so a lot

944
00:38:17,770 --> 00:38:26,230
of times that just gets added in if you

945
00:38:23,380 --> 00:38:27,670
have MS sequel sis admin rights on am a

946
00:38:26,230 --> 00:38:29,349
sequel instance there are tons and tons

947
00:38:27,670 --> 00:38:32,020
of tons of different things you can do

948
00:38:29,349 --> 00:38:33,640
exploiting MS sequel is not new people

949
00:38:32,020 --> 00:38:37,210
have been exploiting MS sequel probably

950
00:38:33,640 --> 00:38:39,848
since the dawn of time and you can

951
00:38:37,210 --> 00:38:42,369
leverage that sysadmin access to run

952
00:38:39,849 --> 00:38:46,720
commands on the host very often is a

953
00:38:42,369 --> 00:38:49,000
very privileged context so we're gonna

954
00:38:46,720 --> 00:38:51,520
use a good old XP command shell the

955
00:38:49,000 --> 00:38:53,710
oldest trick in the book and there

956
00:38:51,520 --> 00:38:56,200
there's tons of MS sequel research again

957
00:38:53,710 --> 00:38:58,119
and powerup sequel and there's like

958
00:38:56,200 --> 00:39:01,089
probably like 50 different ways you can

959
00:38:58,119 --> 00:39:02,680
execute code using that tool loan so if

960
00:39:01,089 --> 00:39:03,759
you if you want more info there's a link

961
00:39:02,680 --> 00:39:05,319
to power up sequel on the bottom

962
00:39:03,760 --> 00:39:07,960
definitely cool

963
00:39:05,319 --> 00:39:09,400
cool stuff so yeah XP command shell is

964
00:39:07,960 --> 00:39:11,079
almost obvious and there's there are

965
00:39:09,400 --> 00:39:13,950
several different scripting subsystems

966
00:39:11,079 --> 00:39:18,280
and em a sequel that can be enabled so

967
00:39:13,950 --> 00:39:21,549
Python are probably some other one that

968
00:39:18,280 --> 00:39:23,260
I'm not thinking of yeah you can also

969
00:39:21,550 --> 00:39:25,390
view stored procedures with them a

970
00:39:23,260 --> 00:39:27,670
sequel so you can actually evade command

971
00:39:25,390 --> 00:39:29,470
line logging this way by remotely

972
00:39:27,670 --> 00:39:30,470
loading your assembly using MS equal

973
00:39:29,470 --> 00:39:35,569
statement

974
00:39:30,470 --> 00:39:37,759
which is magic so anyway our plan of

975
00:39:35,570 --> 00:39:39,590
attack with sequel admin so step one we

976
00:39:37,760 --> 00:39:42,710
need to confirm that the MS sequel

977
00:39:39,590 --> 00:39:44,120
instance is actually accessible then we

978
00:39:42,710 --> 00:39:46,700
want to confirm that our user actually

979
00:39:44,120 --> 00:39:48,410
is assist admin and has the privileges

980
00:39:46,700 --> 00:39:50,960
that bloodhound is telling us that it

981
00:39:48,410 --> 00:39:52,490
has and finally we will execute code on

982
00:39:50,960 --> 00:39:55,210
that target system or buddies powerup

983
00:39:52,490 --> 00:39:55,209
sequel for all of this

984
00:40:03,690 --> 00:40:10,380
okay so here we are running as the

985
00:40:07,890 --> 00:40:12,509
sequel 2014 user which we got access to

986
00:40:10,380 --> 00:40:15,720
because Dave McGuire was an admin on

987
00:40:12,510 --> 00:40:18,510
that system we're gonna load up power up

988
00:40:15,720 --> 00:40:19,799
sequel and we want to make sure the Emma

989
00:40:18,510 --> 00:40:21,329
sequel instance is actually accessible

990
00:40:19,800 --> 00:40:23,130
so we're gonna use this powerup Siebel

991
00:40:21,329 --> 00:40:26,250
command like called get sequel instance

992
00:40:23,130 --> 00:40:30,359
scan UDP which will do a UDP scan

993
00:40:26,250 --> 00:40:33,180
against the system that you specify on

994
00:40:30,359 --> 00:40:36,240
port 14 33 by default and I think it

995
00:40:33,180 --> 00:40:37,919
will dynamically like look at other

996
00:40:36,240 --> 00:40:40,140
ports as well perhaps I don't know Scott

997
00:40:37,920 --> 00:40:41,119
Scott and correct me if I'm wrong but we

998
00:40:40,140 --> 00:40:43,440
can see there's actually two different

999
00:40:41,119 --> 00:40:45,960
instances of Emma sequel running on this

1000
00:40:43,440 --> 00:40:47,640
system currently we don't import that

1001
00:40:45,960 --> 00:40:49,250
data into blood hounds so this is why

1002
00:40:47,640 --> 00:40:50,970
this is very important if you are

1003
00:40:49,250 --> 00:40:53,220
executing this attack path using

1004
00:40:50,970 --> 00:40:56,520
bloodhound data so we have MS sequel

1005
00:40:53,220 --> 00:40:58,109
server and Emma sequel server 2 so we

1006
00:40:56,520 --> 00:41:01,650
need to figure out are we assist 7 on

1007
00:40:58,109 --> 00:41:04,560
one or both of those so we'll do get

1008
00:41:01,650 --> 00:41:09,119
sequel sysadmin check against the

1009
00:41:04,560 --> 00:41:12,450
instance hosted on win 2016 - sequel

1010
00:41:09,119 --> 00:41:15,000
2014 backslash MS sequel server there's

1011
00:41:12,450 --> 00:41:15,950
no output which means that no we are not

1012
00:41:15,000 --> 00:41:19,020
a sysadmin

1013
00:41:15,950 --> 00:41:24,328
so let's try Emma sequel server to that

1014
00:41:19,020 --> 00:41:26,310
named instance and now we see yes

1015
00:41:24,329 --> 00:41:28,200
so in this object that comes back one of

1016
00:41:26,310 --> 00:41:31,230
the parameter one of the attributes is

1017
00:41:28,200 --> 00:41:34,379
sysadmin and the value of that is yes so

1018
00:41:31,230 --> 00:41:35,910
we are SS Evan so now let's verify that

1019
00:41:34,380 --> 00:41:38,369
we can actually execute commands on the

1020
00:41:35,910 --> 00:41:41,910
system and for this we'll use invoke

1021
00:41:38,369 --> 00:41:43,890
sequel CMD against that instance and

1022
00:41:41,910 --> 00:41:46,140
we're just going to use the Who am I

1023
00:41:43,890 --> 00:41:48,089
command and the command results we see

1024
00:41:46,140 --> 00:41:51,328
that we are in fact running as canto so

1025
00:41:48,089 --> 00:41:53,250
back whacks routine okay that's great

1026
00:41:51,329 --> 00:41:55,200
but I'm more interested in getting

1027
00:41:53,250 --> 00:41:58,079
access on a system where I'm also a

1028
00:41:55,200 --> 00:41:59,609
local admin so let's say for example we

1029
00:41:58,079 --> 00:42:01,380
don't have that data in our bloodhound

1030
00:41:59,609 --> 00:42:03,960
database you can you can confirm local

1031
00:42:01,380 --> 00:42:06,420
admin access right here without without

1032
00:42:03,960 --> 00:42:09,150
having to leave this window so one quick

1033
00:42:06,420 --> 00:42:12,630
way to do that is the net session

1034
00:42:09,150 --> 00:42:15,800
command in Windows by default you must

1035
00:42:12,630 --> 00:42:17,570
be a local admin to access that data

1036
00:42:15,800 --> 00:42:20,930
locally

1037
00:42:17,570 --> 00:42:23,090
not remotely for some reason but on this

1038
00:42:20,930 --> 00:42:24,440
system running a sequel 2014 we do net

1039
00:42:23,090 --> 00:42:26,530
session and we see accesses tonight

1040
00:42:24,440 --> 00:42:28,760
that's because we're not a local admin

1041
00:42:26,530 --> 00:42:31,310
so with our power up sequel command will

1042
00:42:28,760 --> 00:42:34,970
just change who am i to net space

1043
00:42:31,310 --> 00:42:36,860
session and we'll see there are no

1044
00:42:34,970 --> 00:42:38,839
entries in the list so if you ever used

1045
00:42:36,860 --> 00:42:40,280
the app binary back in the day this is

1046
00:42:38,840 --> 00:42:42,590
very similar to that so when you see

1047
00:42:40,280 --> 00:42:45,680
there are no entries in the list or if

1048
00:42:42,590 --> 00:42:47,990
you actually get file sessions as output

1049
00:42:45,680 --> 00:42:49,819
here then you know that you are a local

1050
00:42:47,990 --> 00:42:52,580
admin on that system as well or at least

1051
00:42:49,820 --> 00:42:54,770
99.9 percent chance you are at that

1052
00:42:52,580 --> 00:42:56,090
point now you're ready to laterally move

1053
00:42:54,770 --> 00:42:58,009
to that system using this privileged

1054
00:42:56,090 --> 00:42:59,300
command execution there's a thousand

1055
00:42:58,010 --> 00:43:00,890
ways to do that you could do a

1056
00:42:59,300 --> 00:43:04,010
PowerShell download cradle you could do

1057
00:43:00,890 --> 00:43:06,560
bits admin you could do credential

1058
00:43:04,010 --> 00:43:09,560
relaying from that system to you there's

1059
00:43:06,560 --> 00:43:10,850
tons of ways you can abuse this and if

1060
00:43:09,560 --> 00:43:12,140
you look at the power of sequel wiki

1061
00:43:10,850 --> 00:43:15,580
you'll see lots of different examples

1062
00:43:12,140 --> 00:43:15,580
for what you can do with this step

1063
00:43:21,119 --> 00:43:28,510
all right so in in a nice 15 minute

1064
00:43:26,200 --> 00:43:31,509
presentation we've we just went from

1065
00:43:28,510 --> 00:43:34,089
starting as a useless user like J Frank

1066
00:43:31,510 --> 00:43:36,790
and moving all the way over to the

1067
00:43:34,089 --> 00:43:40,060
treasure trove information that is on M

1068
00:43:36,790 --> 00:43:42,970
s sequel 0:01 which I'm sure is like PII

1069
00:43:40,060 --> 00:43:44,529
or something and in this entire process

1070
00:43:42,970 --> 00:43:46,689
we actually never touched a domain admin

1071
00:43:44,530 --> 00:43:50,080
we just used different users that were

1072
00:43:46,690 --> 00:43:51,640
privileged in some way so you know just

1073
00:43:50,080 --> 00:43:53,049
just one thing we always like to say is

1074
00:43:51,640 --> 00:43:55,810
domain admin isn't everything sometimes

1075
00:43:53,050 --> 00:43:57,099
you just don't need it but yeah at this

1076
00:43:55,810 --> 00:43:58,869
point we've executed attack pad that

1077
00:43:57,099 --> 00:44:03,490
includes all the newest hotness that we

1078
00:43:58,869 --> 00:44:04,960
have and we won and we're happy and the

1079
00:44:03,490 --> 00:44:06,069
sysadmin czar hopefully happy because

1080
00:44:04,960 --> 00:44:09,970
otherwise we're not getting hired back

1081
00:44:06,070 --> 00:44:11,770
again but an that like this this this is

1082
00:44:09,970 --> 00:44:14,439
fun like we had a good time executing

1083
00:44:11,770 --> 00:44:16,180
this and the the client is like wow

1084
00:44:14,440 --> 00:44:21,400
that's so cool who did that research

1085
00:44:16,180 --> 00:44:24,368
we're like it was all me alright so I

1086
00:44:21,400 --> 00:44:29,910
think we have time for maybe two or

1087
00:44:24,369 --> 00:44:29,910
three questions right over here

1088
00:44:38,840 --> 00:44:45,120
okay so by default when we do session

1089
00:44:41,400 --> 00:44:46,500
collection ha this question was when you

1090
00:44:45,120 --> 00:44:47,640
use the logged on collection method in

1091
00:44:46,500 --> 00:44:50,670
char pound what does it give you that

1092
00:44:47,640 --> 00:44:52,650
you don't get normally the normal API

1093
00:44:50,670 --> 00:44:54,540
call we use is on net session enum and

1094
00:44:52,650 --> 00:44:56,850
what we're asking a computer is who has

1095
00:44:54,540 --> 00:44:59,009
network sessions to you when that data

1096
00:44:56,850 --> 00:45:01,020
comes back it comes back with an IP

1097
00:44:59,010 --> 00:45:05,160
address or a hostname and a username

1098
00:45:01,020 --> 00:45:07,020
without the domain which forces us to do

1099
00:45:05,160 --> 00:45:10,080
some guesswork and kind of figure out

1100
00:45:07,020 --> 00:45:11,250
like I think it's this user so the the

1101
00:45:10,080 --> 00:45:13,290
has session that does always have a

1102
00:45:11,250 --> 00:45:15,120
degree of like ambiguity whereas with

1103
00:45:13,290 --> 00:45:17,340
logged on we're actually asking computer

1104
00:45:15,120 --> 00:45:19,319
who is logged on to you from the

1105
00:45:17,340 --> 00:45:20,850
registry and it actually will give us

1106
00:45:19,320 --> 00:45:22,860
all that information back because we're

1107
00:45:20,850 --> 00:45:24,390
privileged and all the information is in

1108
00:45:22,860 --> 00:45:26,160
the format we need it has all the data

1109
00:45:24,390 --> 00:45:28,290
so there's no guesswork involved so it's

1110
00:45:26,160 --> 00:45:30,420
much more accurate and because we're

1111
00:45:28,290 --> 00:45:32,040
getting the direct logged on users we're

1112
00:45:30,420 --> 00:45:34,170
not relying on network sessions or

1113
00:45:32,040 --> 00:45:40,860
anything like that so it's it's much

1114
00:45:34,170 --> 00:45:42,510
better and much more accurate yes it's

1115
00:45:40,860 --> 00:45:44,670
getting a little bit loud in here we'll

1116
00:45:42,510 --> 00:45:45,780
do one more question and then Rohan and

1117
00:45:44,670 --> 00:45:48,960
I are gonna go to the spectra ops booth

1118
00:45:45,780 --> 00:45:50,550
if you have other questions however we

1119
00:45:48,960 --> 00:45:51,690
have bloodhound stickers up here after

1120
00:45:50,550 --> 00:45:57,120
we answer this gentleman's question

1121
00:45:51,690 --> 00:45:58,890
right here in the green shirt this

1122
00:45:57,120 --> 00:46:00,690
question was are all the new features in

1123
00:45:58,890 --> 00:46:03,240
the powershell version of the data

1124
00:46:00,690 --> 00:46:05,940
collector so the powershell data

1125
00:46:03,240 --> 00:46:08,939
collector is the c-sharp data collector

1126
00:46:05,940 --> 00:46:11,850
so the the c-sharp data collector we

1127
00:46:08,940 --> 00:46:14,310
turn it into a base64 binary blob and

1128
00:46:11,850 --> 00:46:19,069
then load that up with PowerShell so it

1129
00:46:14,310 --> 00:46:19,070
is the exact same thing yeah

