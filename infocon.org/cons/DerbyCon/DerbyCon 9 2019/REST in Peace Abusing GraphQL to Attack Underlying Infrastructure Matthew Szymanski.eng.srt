1
00:00:00,000 --> 00:00:05,179
talk louder is that better all right

2
00:00:02,460 --> 00:00:05,179
I'll just yell at you guys

3
00:00:05,890 --> 00:00:12,350
all right well my name is Matt Szymanski

4
00:00:09,530 --> 00:00:13,790
I run an offensive security team for a

5
00:00:12,350 --> 00:00:17,030
company called red ventures out of North

6
00:00:13,790 --> 00:00:20,538
Carolina not a lot of people know who I

7
00:00:17,030 --> 00:00:24,890
am or who red ventures is those are both

8
00:00:20,539 --> 00:00:26,210
true some of my contact information my

9
00:00:24,890 --> 00:00:30,349
twitter is pretty empty I don't really

10
00:00:26,210 --> 00:00:31,759
defeat that much but I like Scott having

11
00:00:30,349 --> 00:00:32,720
a lot so if there's any skydivers in

12
00:00:31,759 --> 00:00:43,550
here than when a chat later

13
00:00:32,720 --> 00:00:44,719
hit me up nothing I said today we're

14
00:00:43,550 --> 00:00:46,339
going to talk about I'll graph you all

15
00:00:44,719 --> 00:00:48,739
is anyone know what graph you always

16
00:00:46,340 --> 00:00:52,090
have experience Greville okay awesome

17
00:00:48,739 --> 00:00:55,550
is anybody ever pen tested the graph qon

18
00:00:52,090 --> 00:00:58,219
all right so you know that it could be

19
00:00:55,550 --> 00:01:00,589
kind of a pain to go through all right

20
00:00:58,219 --> 00:01:02,560
so hopefully today we learned some

21
00:01:00,590 --> 00:01:04,989
techniques

22
00:01:02,560 --> 00:01:06,940
[Music]

23
00:01:04,989 --> 00:01:10,330
first we talk about all kind of what

24
00:01:06,940 --> 00:01:11,920
graph you all ul is you don't know give

25
00:01:10,330 --> 00:01:14,260
you kind of just enough information you

26
00:01:11,920 --> 00:01:15,250
need to know to understand it and then

27
00:01:14,260 --> 00:01:18,130
we're going to kind of learn enough

28
00:01:15,250 --> 00:01:19,330
about it to be dangerous in that way

29
00:01:18,130 --> 00:01:20,860
we're gonna check out some

30
00:01:19,330 --> 00:01:23,890
vulnerabilities that have actually been

31
00:01:20,860 --> 00:01:26,080
found in the wild talk about how to

32
00:01:23,890 --> 00:01:30,940
abuse graph QL built-in functionality

33
00:01:26,080 --> 00:01:33,570
some attack techniques short little

34
00:01:30,940 --> 00:01:39,460
tidbit on how to protect graph QL and

35
00:01:33,570 --> 00:01:42,389
then we're going to check out demo so

36
00:01:39,460 --> 00:01:46,270
what is graph you will

37
00:01:42,390 --> 00:01:49,240
Rikuo is essentially created by Facebook

38
00:01:46,270 --> 00:01:52,270
for internal use in 2012 it was released

39
00:01:49,240 --> 00:01:53,740
publicly open-source in 2015 it's

40
00:01:52,270 --> 00:01:57,130
essentially a query language for your

41
00:01:53,740 --> 00:01:59,289
API and a server-side runtime for

42
00:01:57,130 --> 00:02:00,940
executing those queries against a type

43
00:01:59,290 --> 00:02:03,009
system that you can define hero date

44
00:02:00,940 --> 00:02:05,320
your M data which gives you a whole

45
00:02:03,009 --> 00:02:07,930
bunch of flexibility how you want to

46
00:02:05,320 --> 00:02:09,280
design your schema designed to solve a

47
00:02:07,930 --> 00:02:12,970
lot of problems that come with REST API

48
00:02:09,280 --> 00:02:15,610
is mainly having to make shit tons of we

49
00:02:12,970 --> 00:02:16,840
reefs to get an update to populate your

50
00:02:15,610 --> 00:02:20,170
app and F okay

51
00:02:16,840 --> 00:02:22,330
so gravity well these densities all of

52
00:02:20,170 --> 00:02:25,030
those rough end points down into a

53
00:02:22,330 --> 00:02:27,610
single graph QL endpoint and

54
00:02:25,030 --> 00:02:30,040
subsequently instead of making you know

55
00:02:27,610 --> 00:02:32,470
50 requests you can make one single

56
00:02:30,040 --> 00:02:34,480
request for a large amount of complex

57
00:02:32,470 --> 00:02:39,400
data and get it back in a single

58
00:02:34,480 --> 00:02:41,230
response most you can get you implement

59
00:02:39,400 --> 00:02:43,269
this your existing code base which a lot

60
00:02:41,230 --> 00:02:46,420
of companies trying to do it's gonna

61
00:02:43,269 --> 00:02:48,400
take a lot of refactoring which with

62
00:02:46,420 --> 00:02:50,078
that cons you know you're introducing an

63
00:02:48,400 --> 00:02:51,340
additional problems people don't

64
00:02:50,079 --> 00:02:53,920
necessarily understand how to properly

65
00:02:51,340 --> 00:02:55,180
do it the business side is pushing on

66
00:02:53,920 --> 00:02:55,988
that McCrea if you get it on faster

67
00:02:55,180 --> 00:02:58,930
faster faster

68
00:02:55,989 --> 00:03:01,030
the engineers learn just enough you get

69
00:02:58,930 --> 00:03:06,459
it or and they don't fully understand

70
00:03:01,030 --> 00:03:08,049
the security implications like I said

71
00:03:06,459 --> 00:03:10,870
with that increased complexity comes

72
00:03:08,049 --> 00:03:13,060
decreased mover error graph you all kind

73
00:03:10,870 --> 00:03:14,950
of has another piece to an already

74
00:03:13,060 --> 00:03:16,480
complex puzzle as they use web

75
00:03:14,950 --> 00:03:20,980
applications out there getting more and

76
00:03:16,480 --> 00:03:22,869
more complex needs they'll attack all

77
00:03:20,980 --> 00:03:24,548
the underlying code base beneath it we

78
00:03:22,870 --> 00:03:27,280
just need to know the new path to get

79
00:03:24,549 --> 00:03:28,720
there so we're gonna also leverage all

80
00:03:27,280 --> 00:03:31,450
that adding complexity to look for

81
00:03:28,720 --> 00:03:36,310
irritation errors along the way

82
00:03:31,450 --> 00:03:41,200
pretty much so here's some super

83
00:03:36,310 --> 00:03:44,440
annoying slide but all the big names

84
00:03:41,200 --> 00:03:46,899
just the people from rap qls homepage

85
00:03:44,440 --> 00:03:48,880
that I you know did a crawl request

86
00:03:46,900 --> 00:03:51,370
graph all of these images from here

87
00:03:48,880 --> 00:03:54,069
itself with a big annoying jiff for you

88
00:03:51,370 --> 00:03:57,690
to see that tons of people are using

89
00:03:54,069 --> 00:04:00,609
this technology it's all over the place

90
00:03:57,690 --> 00:04:03,940
that's this you know the popularity

91
00:04:00,610 --> 00:04:07,030
grows it increases the chances of a

92
00:04:03,940 --> 00:04:08,620
compromise and testers don't always

93
00:04:07,030 --> 00:04:13,110
understand how to properly test this

94
00:04:08,620 --> 00:04:19,940
technology so they miss things

95
00:04:13,110 --> 00:04:23,000
[Music]

96
00:04:19,940 --> 00:04:25,190
but we all have problems very well while

97
00:04:23,000 --> 00:04:27,920
the developers are out there poring over

98
00:04:25,190 --> 00:04:29,440
all of this documentation trying to

99
00:04:27,920 --> 00:04:31,480
understand how to properly use all this

100
00:04:29,440 --> 00:04:34,040
attackers we have to do the same thing

101
00:04:31,480 --> 00:04:35,810
there was just you know hundreds of

102
00:04:34,040 --> 00:04:38,420
pages of documentation to really

103
00:04:35,810 --> 00:04:39,890
understand the technology inch really

104
00:04:38,420 --> 00:04:48,050
test the technology unless you

105
00:04:39,890 --> 00:04:51,560
understand how it works so it's also

106
00:04:48,050 --> 00:04:53,360
based on the concept of a schema if

107
00:04:51,560 --> 00:04:56,030
you've ever worked with a soap API in

108
00:04:53,360 --> 00:04:58,280
the past little pile I kind of have the

109
00:04:56,030 --> 00:05:00,919
same type of thing for a graph you go

110
00:04:58,280 --> 00:05:03,219
and but these schemas can be more

111
00:05:00,920 --> 00:05:06,320
consistent we'll talk about that later

112
00:05:03,220 --> 00:05:08,930
reverse engineering these schemas can be

113
00:05:06,320 --> 00:05:10,550
extremely time-consuming and there's not

114
00:05:08,930 --> 00:05:15,920
really a lot of graphical specific

115
00:05:10,550 --> 00:05:18,110
contact so it's a lot of work no one

116
00:05:15,920 --> 00:05:21,320
really likes being aware that attackers

117
00:05:18,110 --> 00:05:24,260
lazy be like motivation you know push

118
00:05:21,320 --> 00:05:26,240
bodies get information back you know the

119
00:05:24,260 --> 00:05:28,390
fun part is parking through that figure

120
00:05:26,240 --> 00:05:31,750
you know what went wrong

121
00:05:28,390 --> 00:05:34,039
[Music]

122
00:05:31,750 --> 00:05:35,360
ability to live this all the web

123
00:05:34,039 --> 00:05:39,169
applications out there you know it's the

124
00:05:35,360 --> 00:05:42,110
same at Worcester pop pen sitting behind

125
00:05:39,169 --> 00:05:44,180
the graph you go so we just have to

126
00:05:42,110 --> 00:05:46,450
figure out a new attack methodology for

127
00:05:44,180 --> 00:05:50,860
the new landscape how to get

128
00:05:46,450 --> 00:05:50,860
[Music]

129
00:06:00,900 --> 00:06:07,020
I'll show you just the basis of which

130
00:06:02,870 --> 00:06:09,090
right so Stevens are basing collections

131
00:06:07,020 --> 00:06:12,000
of objects and type definition along

132
00:06:09,090 --> 00:06:15,810
with you other things fucko each field

133
00:06:12,000 --> 00:06:17,700
in your schema maps to resolve or

134
00:06:15,810 --> 00:06:25,460
function and that the caller function is

135
00:06:17,700 --> 00:06:29,070
what which is usually JavaScript or PHP

136
00:06:25,460 --> 00:06:31,650
often comes out here oh this is where

137
00:06:29,070 --> 00:06:35,099
you know all your application logic so

138
00:06:31,650 --> 00:06:36,630
it just kind of like rolls them so this

139
00:06:35,100 --> 00:06:38,400
is where our attacks are normally going

140
00:06:36,630 --> 00:06:40,500
to take place we should have to figure

141
00:06:38,400 --> 00:06:43,049
out how to get our payloads through the

142
00:06:40,500 --> 00:06:48,060
graph below layer and into the

143
00:06:43,050 --> 00:06:49,380
underlying code so let's dig it a little

144
00:06:48,060 --> 00:06:50,940
closer talk to you a little

145
00:06:49,380 --> 00:06:53,909
understanding how this all works

146
00:06:50,940 --> 00:06:56,820
this is a typical query you happy well

147
00:06:53,910 --> 00:07:03,900
endpoint is's contrived and extremely

148
00:06:56,820 --> 00:07:06,120
simple let's say we wanted to make a

149
00:07:03,900 --> 00:07:08,760
post request to my Austin API Don column

150
00:07:06,120 --> 00:07:10,350
slash gravity well our payload is

151
00:07:08,760 --> 00:07:13,800
basically going to be we're asking for a

152
00:07:10,350 --> 00:07:16,680
hero object and the name field or that

153
00:07:13,800 --> 00:07:20,210
object in response we get the same shape

154
00:07:16,680 --> 00:07:22,530
response as request that we send it so

155
00:07:20,210 --> 00:07:25,830
in this case you know we asked me to

156
00:07:22,530 --> 00:07:29,789
hear his name we get r2d2 right

157
00:07:25,830 --> 00:07:32,099
there's each field head of a scalar type

158
00:07:29,790 --> 00:07:35,370
and graphical hunk of you built-ins he

159
00:07:32,100 --> 00:07:36,540
retires hi in this case the string if

160
00:07:35,370 --> 00:07:38,670
you're familiar with object-oriented

161
00:07:36,540 --> 00:07:41,060
language is the same type of concept as

162
00:07:38,670 --> 00:07:44,610
having an object with parameters on it

163
00:07:41,060 --> 00:07:46,830
in that same thing just like you could

164
00:07:44,610 --> 00:07:48,450
have an object as a parameter on another

165
00:07:46,830 --> 00:07:53,750
object you can do the same thing reven

166
00:07:48,450 --> 00:07:56,760
well and nest them down so this object

167
00:07:53,750 --> 00:07:59,850
we referred that or that we got for the

168
00:07:56,760 --> 00:08:02,630
hero name and all of the heroes friends

169
00:07:59,850 --> 00:08:02,630
and all their names

170
00:08:02,710 --> 00:08:09,729
we know what expected response based so

171
00:08:08,289 --> 00:08:11,440
in this case you know we get that here

172
00:08:09,729 --> 00:08:13,479
is the back I'll call it the same shape

173
00:08:11,440 --> 00:08:14,230
we get a list of all of his friends and

174
00:08:13,479 --> 00:08:17,270
their names

175
00:08:14,230 --> 00:08:20,440
[Music]

176
00:08:17,270 --> 00:08:23,349
these are also all types trading get

177
00:08:20,440 --> 00:08:26,719
later

178
00:08:23,349 --> 00:08:28,580
so those queries in the back end like

179
00:08:26,720 --> 00:08:32,810
honey build the schema out of these

180
00:08:28,580 --> 00:08:35,870
developers create this mapping basically

181
00:08:32,809 --> 00:08:39,819
you have pipes and this case is an

182
00:08:35,870 --> 00:08:43,490
object type of hero with a scalar type

183
00:08:39,820 --> 00:08:45,050
field of name return the string the

184
00:08:43,490 --> 00:08:47,149
exclamation point means it is not

185
00:08:45,050 --> 00:08:50,300
inaudible the brackets around friends

186
00:08:47,149 --> 00:08:53,990
means to expect like a list or an array

187
00:08:50,300 --> 00:08:56,839
in response so by looking at the schema

188
00:08:53,990 --> 00:08:58,700
we didn't arrive exactly what's expected

189
00:08:56,839 --> 00:09:01,690
of us incentives requests to get a

190
00:08:58,700 --> 00:09:01,690
proper response out

191
00:09:02,430 --> 00:09:12,769
[Music]

192
00:09:09,249 --> 00:09:15,379
you said well comes with a built-in set

193
00:09:12,769 --> 00:09:19,369
of CI but you can also make your own

194
00:09:15,379 --> 00:09:21,290
custom scalar times and had to find in

195
00:09:19,369 --> 00:09:23,569
the documentation itself you're going to

196
00:09:21,290 --> 00:09:25,279
implement your own scalar type is up to

197
00:09:23,569 --> 00:09:29,179
the developers to implement the proper

198
00:09:25,279 --> 00:09:30,769
validation or that spirit so this is

199
00:09:29,179 --> 00:09:32,689
definitely some place we should look

200
00:09:30,769 --> 00:09:35,209
into is you notice in some ways when

201
00:09:32,689 --> 00:09:37,069
somebody's going to make the stake I put

202
00:09:35,209 --> 00:09:39,518
you do not set up the validation

203
00:09:37,069 --> 00:09:39,519
correctly

204
00:09:39,560 --> 00:09:42,680
[Music]

205
00:09:43,340 --> 00:09:50,210
so objects take arguments of course we

206
00:09:47,690 --> 00:09:51,620
can pass an argument into an object and

207
00:09:50,210 --> 00:09:53,720
you know this in this case we're going

208
00:09:51,620 --> 00:09:56,180
to ask a human with the idea of 1000

209
00:09:53,720 --> 00:09:59,060
Sigma plates we start to do insecure

210
00:09:56,180 --> 00:10:02,000
direct object reference attacks against

211
00:09:59,060 --> 00:10:04,969
it as a response back you get the same

212
00:10:02,000 --> 00:10:06,320
shape as the request and we get the

213
00:10:04,970 --> 00:10:08,420
information and we're looking for for

214
00:10:06,320 --> 00:10:10,010
that particular user so you know that

215
00:10:08,420 --> 00:10:13,310
all these same kind of concepts that

216
00:10:10,010 --> 00:10:15,110
were in REST API user IDs all this stuff

217
00:10:13,310 --> 00:10:19,930
all the same type of stuff which is all

218
00:10:15,110 --> 00:10:23,180
nice structured JSON and yet you know

219
00:10:19,930 --> 00:10:25,640
dozens of REST API endpoints down to

220
00:10:23,180 --> 00:10:31,489
this single single one so that really

221
00:10:25,640 --> 00:10:32,569
increases decreases late so we don't

222
00:10:31,490 --> 00:10:35,750
know wait for all these a dark smoke

223
00:10:32,570 --> 00:10:39,520
return we would all want rescued of a

224
00:10:35,750 --> 00:10:39,520
speeding up the process in the backend

225
00:10:40,370 --> 00:10:47,120
that's great for developers the concept

226
00:10:44,509 --> 00:10:51,920
of mutations is basically how you would

227
00:10:47,120 --> 00:10:56,269
update data so I'm going to send a

228
00:10:51,920 --> 00:10:58,790
mutation I'm going to the example of

229
00:10:56,269 --> 00:11:01,670
mutation here I'm gonna add a category

230
00:10:58,790 --> 00:11:03,889
you know all of this data in here with

231
00:11:01,670 --> 00:11:07,219
these attributes and then the bottom

232
00:11:03,889 --> 00:11:10,069
section is where I'm asking say after

233
00:11:07,220 --> 00:11:11,930
this we execute correctly this mutation

234
00:11:10,069 --> 00:11:16,209
of execute I want you to send this

235
00:11:11,930 --> 00:11:18,739
information back about the mutation so

236
00:11:16,209 --> 00:11:21,619
typical rest api fashion it you have to

237
00:11:18,740 --> 00:11:24,439
you know send the update request how the

238
00:11:21,620 --> 00:11:25,999
request after its name now new data this

239
00:11:24,439 --> 00:11:29,420
is another little problem that gravity

240
00:11:25,999 --> 00:11:30,860
will solves versus rest api's lot lots

241
00:11:29,420 --> 00:11:31,890
of convenience here from a developer's

242
00:11:30,860 --> 00:11:35,230
perspective

243
00:11:31,890 --> 00:11:35,230
[Music]

244
00:11:35,940 --> 00:11:42,690
but all the status on trust right and so

245
00:11:39,360 --> 00:11:46,900
it's really up to the developers

246
00:11:42,690 --> 00:11:50,970
properly validated saticons you which

247
00:11:46,900 --> 00:11:53,770
just like wall no veil

248
00:11:50,970 --> 00:11:58,260
so how do we know but all functionality

249
00:11:53,770 --> 00:12:02,170
exists in a big round you well yeah well

250
00:11:58,260 --> 00:12:03,910
like I said it just actually varies or

251
00:12:02,170 --> 00:12:06,939
how we get a hold of the gravity well

252
00:12:03,910 --> 00:12:08,350
schema so we can send it a giant

253
00:12:06,940 --> 00:12:09,760
introspection query that basically

254
00:12:08,350 --> 00:12:12,520
thousand welcomes you to send me your

255
00:12:09,760 --> 00:12:13,959
entire Zima back or you can send it to

256
00:12:12,520 --> 00:12:15,310
the tiny little introspection queried

257
00:12:13,959 --> 00:12:18,910
and just get a little subset of his

258
00:12:15,310 --> 00:12:21,310
email and looking for to give you an

259
00:12:18,910 --> 00:12:24,370
idea of the size of the responses that

260
00:12:21,310 --> 00:12:26,589
you're gonna get back Spotify 3,500 line

261
00:12:24,370 --> 00:12:28,480
all the way up to github use

262
00:12:26,589 --> 00:12:30,670
introspection responds in eighty four

263
00:12:28,480 --> 00:12:32,440
thousand nine long it's actually eighty

264
00:12:30,670 --> 00:12:35,020
four thousand seven the last time I

265
00:12:32,440 --> 00:12:37,270
checked so yeah I don't know about you

266
00:12:35,020 --> 00:12:39,220
guys but I'm not trying to sit for three

267
00:12:37,270 --> 00:12:41,680
eighty s to have eighty four thousand

268
00:12:39,220 --> 00:12:46,149
lines of response body they trying about

269
00:12:41,680 --> 00:12:48,390
me more deeply nested queries it's the

270
00:12:46,149 --> 00:12:52,540
wallet text for sure

271
00:12:48,390 --> 00:12:56,350
salute at I'm graphical also has the

272
00:12:52,540 --> 00:12:59,020
concept of not over fetching right so

273
00:12:56,350 --> 00:13:01,839
typically for the database call you can

274
00:12:59,020 --> 00:13:04,540
do a select star from whatever graph you

275
00:13:01,839 --> 00:13:07,209
all does not let you do that you can't

276
00:13:04,540 --> 00:13:08,890
just tell it a give me all the fields

277
00:13:07,209 --> 00:13:10,839
for this particular object and it gives

278
00:13:08,890 --> 00:13:13,900
them automatically you have to note with

279
00:13:10,839 --> 00:13:16,839
the field are that our map or that

280
00:13:13,900 --> 00:13:19,990
keeper object and explicitly ask for

281
00:13:16,839 --> 00:13:21,520
those fields to be returned to you which

282
00:13:19,990 --> 00:13:23,560
isn't really an issue if you have

283
00:13:21,520 --> 00:13:27,430
introspection we're you just been able

284
00:13:23,560 --> 00:13:30,760
we don't is basically invisible I think

285
00:13:27,430 --> 00:13:33,069
we we have no way to know which fields

286
00:13:30,760 --> 00:13:34,089
are available for with options so you

287
00:13:33,070 --> 00:13:36,270
had a got to be something about that

288
00:13:34,089 --> 00:13:36,270
also

289
00:13:36,890 --> 00:13:43,069
so typically with a graphical notation

290
00:13:41,390 --> 00:13:47,360
and there's some sort of console

291
00:13:43,070 --> 00:13:50,720
available or Heidi developers use open

292
00:13:47,360 --> 00:13:53,540
there any eyes you some testing write

293
00:13:50,720 --> 00:13:57,440
code all that good stuff the usual ones

294
00:13:53,540 --> 00:13:59,930
are called graphic playground all Thai

295
00:13:57,440 --> 00:14:03,890
air they usually run a standalone

296
00:13:59,930 --> 00:14:06,650
electron apps or browser plugins and

297
00:14:03,890 --> 00:14:08,900
some even in bed right over of your

298
00:14:06,650 --> 00:14:10,220
browser makes it really really

299
00:14:08,900 --> 00:14:13,730
convenient we can use these things to

300
00:14:10,220 --> 00:14:15,800
weary these eight guys gets more insight

301
00:14:13,730 --> 00:14:17,330
what's going on in there

302
00:14:15,800 --> 00:14:19,880
they have a really feature-rich

303
00:14:17,330 --> 00:14:22,070
environment and they basically leverage

304
00:14:19,880 --> 00:14:24,080
the introspection peer response thinking

305
00:14:22,070 --> 00:14:26,660
was a parsing on it and dynamically

306
00:14:24,080 --> 00:14:27,490
build all the documentation rewired or

307
00:14:26,660 --> 00:14:31,390
Denny

308
00:14:27,490 --> 00:14:35,030
so we trying to publicly share your API

309
00:14:31,390 --> 00:14:38,060
having this available Athenian if you're

310
00:14:35,030 --> 00:14:40,610
trying to attack that API it's also

311
00:14:38,060 --> 00:14:42,439
really doesn't now I get it like it's I

312
00:14:40,610 --> 00:14:44,510
start off like searching through

313
00:14:42,440 --> 00:14:46,010
filtering down we find out what's

314
00:14:44,510 --> 00:14:50,770
available in here when she first thing

315
00:14:46,010 --> 00:14:50,770
for me to try an attack

316
00:14:51,540 --> 00:15:06,240
I would say 20% of the time from my

317
00:14:55,280 --> 00:15:07,020
experience these are the generosity is

318
00:15:06,240 --> 00:15:12,150
really great

319
00:15:07,020 --> 00:15:15,270
Lulu giving away there's some graphical

320
00:15:12,150 --> 00:15:17,670
applications have the concept of debug

321
00:15:15,270 --> 00:15:19,860
mode so you just hatched this pretty

322
00:15:17,670 --> 00:15:22,469
little green query parameter on the end

323
00:15:19,860 --> 00:15:25,530
of your request and you know it enables

324
00:15:22,470 --> 00:15:29,010
verbose logging or you up to full stack

325
00:15:25,530 --> 00:15:31,380
traces being sent back it's free

326
00:15:29,010 --> 00:15:34,050
oftentimes they forget to change this

327
00:15:31,380 --> 00:15:37,710
flag when moving in production it just

328
00:15:34,050 --> 00:15:39,089
kind of sneaks by so you know this is a

329
00:15:37,710 --> 00:15:42,510
really great thing always been with

330
00:15:39,090 --> 00:15:44,070
hatch one weirdies since them GARP user

331
00:15:42,510 --> 00:15:46,439
input in there see if you can get a

332
00:15:44,070 --> 00:15:48,410
little stack trace back might eat some

333
00:15:46,440 --> 00:15:53,570
green cream so

334
00:15:48,410 --> 00:15:53,569
[Music]

335
00:15:55,960 --> 00:16:00,790
was it quickly because it basically is

336
00:15:57,790 --> 00:16:02,010
rocky well had no built-in security

337
00:16:00,790 --> 00:16:05,010
authorization authentication

338
00:16:02,010 --> 00:16:05,010
functionality

339
00:16:05,320 --> 00:16:09,880
so are scalars less easy to be out of

340
00:16:07,720 --> 00:16:11,949
the box one know if you go validation

341
00:16:09,880 --> 00:16:14,320
for any of them you know this is a

342
00:16:11,949 --> 00:16:16,449
snippet straight from their Docs and you

343
00:16:14,320 --> 00:16:19,690
know they're basically like bigger guy

344
00:16:16,449 --> 00:16:23,439
so you got figure I'm going to do all of

345
00:16:19,690 --> 00:16:25,350
this just like you know we run into

346
00:16:23,440 --> 00:16:27,550
these probable time with rust api's

347
00:16:25,350 --> 00:16:29,709
where you know they're not doing field

348
00:16:27,550 --> 00:16:31,449
level authorization and authentication

349
00:16:29,709 --> 00:16:33,489
and that's the view is that it's the

350
00:16:31,449 --> 00:16:35,290
same type of stuff that you see here and

351
00:16:33,490 --> 00:16:37,060
this is just a more complex system so

352
00:16:35,290 --> 00:16:41,230
the chances of them missing movies of

353
00:16:37,060 --> 00:16:42,518
this are much higher and this is one of

354
00:16:41,230 --> 00:16:45,389
these examples of how we can take

355
00:16:42,519 --> 00:16:48,490
advantage of the implementation errors

356
00:16:45,389 --> 00:16:52,149
so let's take a look at some graph QL

357
00:16:48,490 --> 00:16:54,459
bloopers in the Y right so I went to

358
00:16:52,149 --> 00:16:55,509
hacker wine inserts graphically well as

359
00:16:54,459 --> 00:16:59,680
we'll just see what's out there

360
00:16:55,509 --> 00:17:01,720
as far as steaks keeper making the

361
00:16:59,680 --> 00:17:06,879
attackers packing them what kind of

362
00:17:01,720 --> 00:17:09,740
money can be made so this first one

363
00:17:06,880 --> 00:17:12,799
pretty pretty sinister

364
00:17:09,740 --> 00:17:12,799
[Music]

365
00:17:12,910 --> 00:17:19,939
so apparently Shopify has hey these cake

366
00:17:18,650 --> 00:17:21,740
we've hooked up for these fancy

367
00:17:19,939 --> 00:17:24,079
monitoring systems I give them you know

368
00:17:21,740 --> 00:17:29,480
like all this information about all

369
00:17:24,079 --> 00:17:32,629
those beers left me want right so this

370
00:17:29,480 --> 00:17:35,030
guy just buzz all of the subdomains or

371
00:17:32,630 --> 00:17:36,920
shuffle a cloud and alcohol beer by

372
00:17:35,030 --> 00:17:39,830
where I wonder if this has gone was the

373
00:17:36,920 --> 00:17:41,690
lumière right so starts any queries and

374
00:17:39,830 --> 00:17:44,600
got back a list of all the Shopify

375
00:17:41,690 --> 00:17:47,179
office locations and he derived that

376
00:17:44,600 --> 00:17:49,939
information that you can query about the

377
00:17:47,179 --> 00:17:53,330
beer consumption this was just during a

378
00:17:49,940 --> 00:17:55,850
hackathon I guess there are kind of

379
00:17:53,330 --> 00:17:57,169
social engineering attack vectors but we

380
00:17:55,850 --> 00:17:59,120
know what kind of beer you love for this

381
00:17:57,170 --> 00:18:01,429
then you launch a free kegs of beer and

382
00:17:59,120 --> 00:18:02,928
you know you're gonna give us a head

383
00:18:01,429 --> 00:18:06,920
start on this hackathon gave you a

384
00:18:02,929 --> 00:18:08,300
little bit it was all in jest but they

385
00:18:06,920 --> 00:18:10,130
ended up getting paid out eight hundred

386
00:18:08,300 --> 00:18:12,230
two dollars and twenty cents which is

387
00:18:10,130 --> 00:18:15,440
the price of three kegs of white beer

388
00:18:12,230 --> 00:18:19,790
reads one of the hackers not a bad

389
00:18:15,440 --> 00:18:22,080
payout I'll take three things I need

390
00:18:19,790 --> 00:18:25,170
this one gets a little more serious this

391
00:18:22,080 --> 00:18:30,899
was within hacker ones grab UL API

392
00:18:25,170 --> 00:18:37,320
itself so actually most of the wand in

393
00:18:30,900 --> 00:18:40,350
hacker one are crap so you know the team

394
00:18:37,320 --> 00:18:43,830
object that you can query in the gravity

395
00:18:40,350 --> 00:18:45,000
well API there so this guy's does we

396
00:18:43,830 --> 00:18:47,610
reading it

397
00:18:45,000 --> 00:18:50,430
and he figures out that there's a huge

398
00:18:47,610 --> 00:18:53,639
authorization bypass a logic coming on

399
00:18:50,430 --> 00:18:56,580
they're capable to return some really

400
00:18:53,640 --> 00:18:59,430
confidential data from the team object

401
00:18:56,580 --> 00:19:01,260
and basically derive how many companies

402
00:18:59,430 --> 00:19:07,050
had hacker one are actually running

403
00:19:01,260 --> 00:19:12,680
private programs 2,500 bucks not that

404
00:19:07,050 --> 00:19:17,580
take that get a little more serious now

405
00:19:12,680 --> 00:19:18,780
you know we all like it's no different

406
00:19:17,580 --> 00:19:21,270
when you're trying to continue

407
00:19:18,780 --> 00:19:22,649
implementation something this is this is

408
00:19:21,270 --> 00:19:25,740
a pretty interesting one but I think it

409
00:19:22,650 --> 00:19:27,690
really highlights a typical problem in

410
00:19:25,740 --> 00:19:31,140
software development is you're upgrading

411
00:19:27,690 --> 00:19:34,110
to a new version of the library just a

412
00:19:31,140 --> 00:19:37,140
new rotation people don't always

413
00:19:34,110 --> 00:19:39,419
understand the age of PCs have a warm

414
00:19:37,140 --> 00:19:41,010
going through all the changelog figure

415
00:19:39,420 --> 00:19:45,060
out this silly but just changed they

416
00:19:41,010 --> 00:19:46,560
upgrade and see what race you know fix

417
00:19:45,060 --> 00:19:49,649
the things that break is now we're good

418
00:19:46,560 --> 00:19:51,419
right so in this particular case they

419
00:19:49,650 --> 00:19:55,520
were upgrading to a crappy well Ruby

420
00:19:51,420 --> 00:19:58,260
class based API well just nuke it API

421
00:19:55,520 --> 00:20:01,260
mighty fall padded a Netherlands filled

422
00:19:58,260 --> 00:20:05,190
into their schema but there was already

423
00:20:01,260 --> 00:20:07,360
it was just tested under another view of

424
00:20:05,190 --> 00:20:09,790
calm edges

425
00:20:07,360 --> 00:20:16,550
and would just kind of assume that a

426
00:20:09,790 --> 00:20:18,800
shortcut this father tested what turns

427
00:20:16,550 --> 00:20:20,870
out the new notes view and completely

428
00:20:18,800 --> 00:20:25,480
bypassed all authorization and

429
00:20:20,870 --> 00:20:28,790
authentication logic and allow them to

430
00:20:25,480 --> 00:20:31,790
get a lot of user and metadata programs

431
00:20:28,790 --> 00:20:35,120
at hangar 1 we even talked serious that

432
00:20:31,790 --> 00:20:38,800
it is by this piece will be in money you

433
00:20:35,120 --> 00:20:44,149
made 20 grand from it pretty awesome

434
00:20:38,800 --> 00:20:47,870
this one don't know 100% I think this

435
00:20:44,150 --> 00:20:49,220
guy works or hacker 1 itself so there

436
00:20:47,870 --> 00:20:52,340
were no payoff it's close but it's

437
00:20:49,220 --> 00:20:55,730
freaking serious so one of the kind of

438
00:20:52,340 --> 00:20:58,909
highlighted here may interest you they

439
00:20:55,730 --> 00:21:01,790
introduced a new feature for embedded

440
00:20:58,910 --> 00:21:04,640
form submissions and instead of taking

441
00:21:01,790 --> 00:21:06,320
the typical route and using a field

442
00:21:04,640 --> 00:21:08,030
input like they normally would

443
00:21:06,320 --> 00:21:09,500
you know using fields they decided that

444
00:21:08,030 --> 00:21:11,450
we're going to get a super buffer and

445
00:21:09,500 --> 00:21:14,990
we're gonna use a graphic well parameter

446
00:21:11,450 --> 00:21:16,220
instead well they already had a bunch of

447
00:21:14,990 --> 00:21:18,650
functionality in place that

448
00:21:16,220 --> 00:21:21,490
automatically did validation sensation

449
00:21:18,650 --> 00:21:24,020
on all the user including data forms

450
00:21:21,490 --> 00:21:28,520
they did not have that same logic for

451
00:21:24,020 --> 00:21:33,139
gravity well parameters so he'll labarda

452
00:21:28,520 --> 00:21:36,080
to check this it went out live this guy

453
00:21:33,140 --> 00:21:38,090
realized that he could just do a sequel

454
00:21:36,080 --> 00:21:39,800
injection attacks validation and

455
00:21:38,090 --> 00:21:41,330
happening and not only was he able to

456
00:21:39,800 --> 00:21:43,760
access the public schema

457
00:21:41,330 --> 00:21:46,699
he was also accident able to data from

458
00:21:43,760 --> 00:21:48,710
their secure schema and how much but

459
00:21:46,700 --> 00:21:50,060
they keep in each one but the one called

460
00:21:48,710 --> 00:21:53,210
to hear sounds a little more dangerous

461
00:21:50,060 --> 00:21:56,030
to me sure they didn't want that k2

462
00:21:53,210 --> 00:21:58,340
disclosed on the I will had on a little

463
00:21:56,030 --> 00:21:59,990
side note nor after investigation the

464
00:21:58,340 --> 00:22:02,689
environment that no data was actually

465
00:21:59,990 --> 00:22:04,290
abuser exfiltrated from this report was

466
00:22:02,690 --> 00:22:06,150
found was

467
00:22:04,290 --> 00:22:07,440
this is just an example the stuff that

468
00:22:06,150 --> 00:22:10,320
you're gonna find out there in a while

469
00:22:07,440 --> 00:22:11,670
due to the complexity impatient errors

470
00:22:10,320 --> 00:22:21,830
of ground zero

471
00:22:11,670 --> 00:22:23,940
[Music]

472
00:22:21,830 --> 00:22:26,010
long

473
00:22:23,940 --> 00:22:32,370
sorry pop using craft you a little bit

474
00:22:26,010 --> 00:22:33,340
how maybe like happy that guy is you

475
00:22:32,370 --> 00:22:37,419
know

476
00:22:33,340 --> 00:22:37,419
[Music]

477
00:22:38,149 --> 00:22:42,799
so the first thing we have to do is

478
00:22:40,009 --> 00:22:44,209
locate all the and buy all the

479
00:22:42,799 --> 00:22:48,408
implements that mean the one endpoint

480
00:22:44,209 --> 00:22:50,989
that they're using which can be a larger

481
00:22:48,409 --> 00:22:53,359
task that you would initially think of

482
00:22:50,989 --> 00:22:55,609
course they can be customized to be

483
00:22:53,359 --> 00:22:57,198
named to anything but here's that out

484
00:22:55,609 --> 00:23:00,198
list and find like the typical names

485
00:22:57,199 --> 00:23:02,959
that you'll find out there from the

486
00:23:00,199 --> 00:23:05,599
available evil crack graph QL patient

487
00:23:02,959 --> 00:23:07,189
packages they oftentimes we version

488
00:23:05,599 --> 00:23:10,928
numbers for them you never know at first

489
00:23:07,189 --> 00:23:13,789
you need la patrie myself deputies

490
00:23:10,929 --> 00:23:15,979
you can see the you know example for get

491
00:23:13,789 --> 00:23:18,079
pups in the bottom here is you as

492
00:23:15,979 --> 00:23:21,379
developer subdomain first board its

493
00:23:18,079 --> 00:23:23,329
water so you can take a while if you

494
00:23:21,379 --> 00:23:27,948
don't have a good lead on where this

495
00:23:23,329 --> 00:23:30,168
might be kind of enumerated you know you

496
00:23:27,949 --> 00:23:32,029
you know stop Listeria to kind of go

497
00:23:30,169 --> 00:23:33,420
through and find we're all consuming

498
00:23:32,029 --> 00:23:35,820
water

499
00:23:33,420 --> 00:23:42,360
yep you buzzline you runnin you're done

500
00:23:35,820 --> 00:23:45,480
mmm regardless you're either gonna end

501
00:23:42,360 --> 00:23:47,490
up funding the console if you find the

502
00:23:45,480 --> 00:23:50,100
console death great just you know

503
00:23:47,490 --> 00:23:52,650
inspector and grab some of the requests

504
00:23:50,100 --> 00:23:54,120
the console location is going to be the

505
00:23:52,650 --> 00:23:57,780
same location that is actually making

506
00:23:54,120 --> 00:24:00,600
requests dude you just grabbed two from

507
00:23:57,780 --> 00:24:01,830
the network tab grab the X we'll graph

508
00:24:00,600 --> 00:24:05,219
you go ahead and put in there and you

509
00:24:01,830 --> 00:24:06,990
know start hacking it's not also don't

510
00:24:05,220 --> 00:24:10,690
forget to check a bug mode when you're

511
00:24:06,990 --> 00:24:16,239
doing all this is you get some

512
00:24:10,690 --> 00:24:19,590
extra goodies the introspection request

513
00:24:16,239 --> 00:24:21,669
through evil here once we do find that

514
00:24:19,590 --> 00:24:24,869
we basically need to send an

515
00:24:21,669 --> 00:24:28,539
introspection query to it and trying to

516
00:24:24,869 --> 00:24:30,879
the schema is enabled then we need to

517
00:24:28,539 --> 00:24:33,940
determine all possible Furies mutations

518
00:24:30,879 --> 00:24:35,949
and some implementation there's a thing

519
00:24:33,940 --> 00:24:38,229
called subscriptions but I won't get a

520
00:24:35,950 --> 00:24:41,349
GQ lunch is basically like a WebSocket

521
00:24:38,229 --> 00:24:43,690
you send a query over the web connection

522
00:24:41,349 --> 00:24:50,649
anytime and that query innovator in the

523
00:24:43,690 --> 00:24:53,649
back end is where were concerned with

524
00:24:50,649 --> 00:24:56,949
how they're accepting our user data so

525
00:24:53,649 --> 00:24:59,498
you know we got a test we got to build

526
00:24:56,950 --> 00:25:02,470
all of these right so how many queries

527
00:24:59,499 --> 00:25:07,059
are available in an eighty four thousand

528
00:25:02,470 --> 00:25:10,539
lines all right like hot buns oh so you

529
00:25:07,059 --> 00:25:12,729
have to go through this vemma figure out

530
00:25:10,539 --> 00:25:14,619
how to read the schema March through it

531
00:25:12,729 --> 00:25:16,720
immediately build all of these queries

532
00:25:14,619 --> 00:25:19,749
I'm so sending these queries this evil

533
00:25:16,720 --> 00:25:22,710
hunters want to keep it back so that was

534
00:25:19,749 --> 00:25:25,179
just we really relate this is

535
00:25:22,710 --> 00:25:29,799
extraordinarily time-consuming process

536
00:25:25,179 --> 00:25:31,379
I hated it so I tried to do something

537
00:25:29,799 --> 00:25:33,759
about it

538
00:25:31,379 --> 00:25:36,399
good people on the lookout for error

539
00:25:33,759 --> 00:25:41,769
responses stack traces all that good

540
00:25:36,399 --> 00:25:45,248
juicy debugging data again wants it can

541
00:25:41,769 --> 00:25:50,590
be very large so here's here's just a

542
00:25:45,249 --> 00:25:54,879
little example here of and so this is

543
00:25:50,590 --> 00:25:57,549
this is a Altair I'm giving you guys to

544
00:25:54,879 --> 00:26:01,649
play assassin's creed they was a

545
00:25:57,549 --> 00:26:05,049
reference in a lot of engineering hood -

546
00:26:01,649 --> 00:26:08,498
especially query rock to you to hurt

547
00:26:05,049 --> 00:26:09,070
here the team you know there's my rum

548
00:26:08,499 --> 00:26:12,519
request

549
00:26:09,070 --> 00:26:15,249
done you're the wrong response this

550
00:26:12,519 --> 00:26:17,649
particular response is three thousand

551
00:26:15,249 --> 00:26:18,789
two hundred seventy nine lines long so

552
00:26:17,649 --> 00:26:25,320
let's see what we can actually get

553
00:26:18,789 --> 00:26:25,320
information wise 33,000

554
00:26:25,540 --> 00:26:32,960
[Music]

555
00:26:33,279 --> 00:26:39,919
so that I found autographed well Voyager

556
00:26:37,570 --> 00:26:41,928
basically take each or especially

557
00:26:39,919 --> 00:26:43,940
responds and you copy and paste it into

558
00:26:41,929 --> 00:26:47,000
this and it builds kind of an

559
00:26:43,940 --> 00:26:49,190
interactive BRT diet group of hawk down

560
00:26:47,000 --> 00:26:50,990
furthers our view of all the connections

561
00:26:49,190 --> 00:26:53,149
between objects and their dependency

562
00:26:50,990 --> 00:26:59,090
almond essence though I let you click

563
00:26:53,149 --> 00:27:02,449
highlight low through it really valuable

564
00:26:59,090 --> 00:27:04,340
you're trying to write queries Morgan

565
00:27:02,450 --> 00:27:06,529
you just reading JSON it and very

566
00:27:04,340 --> 00:27:08,870
intuitive so this gives you like a

567
00:27:06,529 --> 00:27:11,120
really easy way you do this is the

568
00:27:08,870 --> 00:27:14,268
dependency of this and this kind of

569
00:27:11,120 --> 00:27:16,760
scalar that it is expected or inspect

570
00:27:14,269 --> 00:27:19,460
another object respond just wanted to

571
00:27:16,760 --> 00:27:21,649
throw that out there you got a pretty

572
00:27:19,460 --> 00:27:24,679
interesting fluent leverage if you're

573
00:27:21,649 --> 00:27:27,469
trying to get a better like little wrong

574
00:27:24,679 --> 00:27:32,179
listing wrath with this scheme it looks

575
00:27:27,470 --> 00:27:33,889
like outside of the JSON law so I'm

576
00:27:32,179 --> 00:27:36,850
seeing a little closer look at what it

577
00:27:33,889 --> 00:27:39,139
actually did the introspection responses

578
00:27:36,850 --> 00:27:42,010
here where it's saying that we have a

579
00:27:39,139 --> 00:27:45,500
query that we can make overall this is

580
00:27:42,010 --> 00:27:47,600
this is or a fictional an example graph

581
00:27:45,500 --> 00:27:52,039
um point that's out there called snow

582
00:27:47,600 --> 00:27:54,230
tooth on set up just for fun to let you

583
00:27:52,039 --> 00:27:57,950
run queries on a fictional ski George

584
00:27:54,230 --> 00:28:00,980
right so in this case we can call and

585
00:27:57,950 --> 00:28:04,240
say I want to get this all lips and I

586
00:28:00,980 --> 00:28:08,039
wonder the status of all of these lives

587
00:28:04,240 --> 00:28:11,139
[Music]

588
00:28:08,039 --> 00:28:11,980
so you know sending all that said here's

589
00:28:11,139 --> 00:28:14,859
the second one

590
00:28:11,980 --> 00:28:17,980
this one we can we rehearse specific

591
00:28:14,859 --> 00:28:19,899
lifts by passing in an ID and we can get

592
00:28:17,980 --> 00:28:21,820
the name and a whole bunch more

593
00:28:19,899 --> 00:28:23,229
information in response she wanted to

594
00:28:21,820 --> 00:28:26,019
give you guys and he had like would the

595
00:28:23,230 --> 00:28:31,720
action interest actually response looks

596
00:28:26,019 --> 00:28:34,179
like and go through without manually

597
00:28:31,720 --> 00:28:34,720
filled out all the time it's not real

598
00:28:34,179 --> 00:28:35,950
easy

599
00:28:34,720 --> 00:28:38,230
[Music]

600
00:28:35,950 --> 00:28:41,410
so here's what an actual query you here

601
00:28:38,230 --> 00:28:42,820
both look like so you know I take that

602
00:28:41,410 --> 00:28:44,560
introspection response and that builds

603
00:28:42,820 --> 00:28:47,080
our main series where the first one

604
00:28:44,560 --> 00:28:49,060
you'll notice though is nicely Jason

605
00:28:47,080 --> 00:28:51,970
nice JSON structure there I'm asking

606
00:28:49,060 --> 00:28:53,740
saying give me all this and then give me

607
00:28:51,970 --> 00:28:56,560
back the name and as bad as for all of

608
00:28:53,740 --> 00:28:59,080
them it hands me back of worse in the

609
00:28:56,560 --> 00:29:01,149
same shape as my request all of the

610
00:28:59,080 --> 00:29:06,550
lives whether names dad as pretty

611
00:29:01,150 --> 00:29:08,020
straightforward stuff here's here the

612
00:29:06,550 --> 00:29:11,110
other one where I'm actually passing

613
00:29:08,020 --> 00:29:12,970
user ID in and say give me the lift with

614
00:29:11,110 --> 00:29:15,100
the IDP and agreement status of it and

615
00:29:12,970 --> 00:29:17,380
then all the trails did that lift and

616
00:29:15,100 --> 00:29:19,300
take me to and along with the name and

617
00:29:17,380 --> 00:29:21,070
status of each of those so you know

618
00:29:19,300 --> 00:29:22,330
pretty straightforward that's kind of

619
00:29:21,070 --> 00:29:24,820
what I get I'm going to show you guys

620
00:29:22,330 --> 00:29:27,580
some examples of the process of taking

621
00:29:24,820 --> 00:29:30,870
the response building queries getting

622
00:29:27,580 --> 00:29:30,870
responses back from those queries

623
00:29:31,140 --> 00:29:37,960
mutations it's not often that you're

624
00:29:35,470 --> 00:29:39,820
going to get the chance to run mutations

625
00:29:37,960 --> 00:29:42,250
on a graph G one point out some kind of

626
00:29:39,820 --> 00:29:45,610
authentication in place it turns out

627
00:29:42,250 --> 00:29:48,520
that people just don't like letting any

628
00:29:45,610 --> 00:29:51,879
old person write arbitrary data to their

629
00:29:48,520 --> 00:29:55,470
databases I don't see why it's not very

630
00:29:51,880 --> 00:29:57,880
friendly but how much we knew about that

631
00:29:55,470 --> 00:30:00,700
so what you're basically doing here is

632
00:29:57,880 --> 00:30:02,590
you're defining the structure of your

633
00:30:00,700 --> 00:30:05,110
mutation then you're calling a function

634
00:30:02,590 --> 00:30:08,770
you know great review that's gonna get

635
00:30:05,110 --> 00:30:12,790
mapped now solver at the end then you're

636
00:30:08,770 --> 00:30:16,000
gonna pass a separate JSON structured

637
00:30:12,790 --> 00:30:18,670
data that is going to hydrate all the

638
00:30:16,000 --> 00:30:22,750
variables and you get the response back

639
00:30:18,670 --> 00:30:25,810
that much the same shape the second part

640
00:30:22,750 --> 00:30:27,250
under here so you create reviews then

641
00:30:25,810 --> 00:30:29,500
you see starting commentaries you're

642
00:30:27,250 --> 00:30:31,120
saying you know after this query or

643
00:30:29,500 --> 00:30:33,400
after this mutation is consistent

644
00:30:31,120 --> 00:30:35,379
successfully executed is the information

645
00:30:33,400 --> 00:30:38,320
I want you to give me back after it so

646
00:30:35,380 --> 00:30:41,060
again all of this stuff in one request

647
00:30:38,320 --> 00:30:43,740
super convenient

648
00:30:41,060 --> 00:30:45,600
so what do we do have introspection is

649
00:30:43,740 --> 00:30:48,320
disabled all right we don't have access

650
00:30:45,600 --> 00:30:52,320
to their entire schema

651
00:30:48,320 --> 00:30:52,320
[Music]

652
00:30:54,440 --> 00:30:58,760
but there are a few think so first

653
00:30:56,930 --> 00:31:03,860
something that's worked well for me is

654
00:30:58,760 --> 00:31:06,080
to just check gauging staging for that

655
00:31:03,860 --> 00:31:09,250
same one is often times that are over to

656
00:31:06,080 --> 00:31:11,899
the public also they have a bug and

657
00:31:09,250 --> 00:31:13,670
introspection enable because they think

658
00:31:11,900 --> 00:31:17,660
no one's ever gonna know those behind

659
00:31:13,670 --> 00:31:19,190
our staging domain and superhit know you

660
00:31:17,660 --> 00:31:21,200
know know who could possibly know that

661
00:31:19,190 --> 00:31:22,520
exists so then we just take that

662
00:31:21,200 --> 00:31:27,320
introspection request from that one and

663
00:31:22,520 --> 00:31:29,240
apply you know we do the usual her proxy

664
00:31:27,320 --> 00:31:31,010
stuff we start clicking on everything on

665
00:31:29,240 --> 00:31:37,820
the homepage capturing all the requests

666
00:31:31,010 --> 00:31:39,500
are kind of least see what what queries

667
00:31:37,820 --> 00:31:40,730
of the front-end is using that when you

668
00:31:39,500 --> 00:31:44,350
give us a little bit of insight into

669
00:31:40,730 --> 00:31:44,350
what their schema might look like

670
00:31:44,770 --> 00:31:50,000
I'll selected to do a thing that I like

671
00:31:47,300 --> 00:31:51,409
to field stuffing I mean feel free to

672
00:31:50,000 --> 00:31:53,480
leave a better name for it what I'm

673
00:31:51,410 --> 00:31:56,090
basically trying to do is brute force

674
00:31:53,480 --> 00:31:59,510
the schema so I get some of the objects

675
00:31:56,090 --> 00:32:03,760
that I've collected or putting on a

676
00:31:59,510 --> 00:32:07,640
front end and I just start adding random

677
00:32:03,760 --> 00:32:10,430
it seems you get back is when you see

678
00:32:07,640 --> 00:32:12,290
here is that actually or Mike after day

679
00:32:10,430 --> 00:32:16,010
requesting read user object in there

680
00:32:12,290 --> 00:32:17,990
with link a status on this stuff and I

681
00:32:16,010 --> 00:32:22,820
added on to tour password in there and

682
00:32:17,990 --> 00:32:24,820
got the half password right like did

683
00:32:22,820 --> 00:32:28,340
they figure winter ski mode

684
00:32:24,820 --> 00:32:29,960
introspection schemas weird involved so

685
00:32:28,340 --> 00:32:34,699
there's no way for them to know does

686
00:32:29,960 --> 00:32:37,330
they even have asked so just yes you

687
00:32:34,700 --> 00:32:40,010
know start feeding in a heartless

688
00:32:37,330 --> 00:32:42,110
randomly sending request an intruder to

689
00:32:40,010 --> 00:32:44,330
try and figure out which ones coming

690
00:32:42,110 --> 00:32:46,459
back is to hundreds

691
00:32:44,330 --> 00:32:47,870
there's also another really brilliant

692
00:32:46,460 --> 00:32:52,430
feature refu all that makes me really

693
00:32:47,870 --> 00:32:54,379
happy and that is suggestions right so

694
00:32:52,430 --> 00:32:55,830
you know we should all be open to new

695
00:32:54,380 --> 00:32:58,530
ideas

696
00:32:55,830 --> 00:33:00,810
crap you all do different so in this

697
00:32:58,530 --> 00:33:03,330
case I'm trying to send it a mutation

698
00:33:00,810 --> 00:33:06,000
were to create it user but you know I

699
00:33:03,330 --> 00:33:08,760
left the EE out of user which is kind of

700
00:33:06,000 --> 00:33:10,110
a typical thing to do and graph to go

701
00:33:08,760 --> 00:33:13,230
with my stuff to say like hold on a

702
00:33:10,110 --> 00:33:14,520
second we can't actually do that query

703
00:33:13,230 --> 00:33:16,680
but that's pretty close to something

704
00:33:14,520 --> 00:33:18,150
that we can do did you mean that you

705
00:33:16,680 --> 00:33:20,190
want to create a user or create a

706
00:33:18,150 --> 00:33:22,230
profile or created avatar or create a

707
00:33:20,190 --> 00:33:26,430
session and you know of course something

708
00:33:22,230 --> 00:33:32,670
like yeah that's exactly I just type oh

709
00:33:26,430 --> 00:33:35,220
my bad that that's pretty handy feature

710
00:33:32,670 --> 00:33:38,040
did they put in there so now let's take

711
00:33:35,220 --> 00:33:40,539
what some tactic beats

712
00:33:38,040 --> 00:33:43,449
[Music]

713
00:33:40,539 --> 00:33:45,759
and that's that object is right so we

714
00:33:43,449 --> 00:33:48,190
saw earlier how you can nest your

715
00:33:45,759 --> 00:33:50,259
objects you know underneath your root

716
00:33:48,190 --> 00:33:52,239
object and these can't be deeply deeply

717
00:33:50,259 --> 00:33:56,320
nested and you know five six seven level

718
00:33:52,239 --> 00:33:59,139
deep on really complex it's Emma's so

719
00:33:56,320 --> 00:34:00,639
basically you know we're just gonna take

720
00:33:59,139 --> 00:34:02,978
this user object here we're going to

721
00:34:00,639 --> 00:34:05,948
pull up a friend that we're gonna make a

722
00:34:02,979 --> 00:34:10,599
request for the friends bonnet down and

723
00:34:05,949 --> 00:34:12,460
I hat disc return copy exact field in

724
00:34:10,599 --> 00:34:17,559
this case I've had a return every friend

725
00:34:12,460 --> 00:34:19,779
in the day that effect it seems to be

726
00:34:17,559 --> 00:34:23,789
that more deeply nested the field is

727
00:34:19,779 --> 00:34:25,839
without higher likelihood that this is

728
00:34:23,789 --> 00:34:27,609
this is all you know this their

729
00:34:25,839 --> 00:34:30,969
automated authorization running in is

730
00:34:27,609 --> 00:34:32,739
over they're not checking there is no

731
00:34:30,969 --> 00:34:34,959
authorization project around guilt

732
00:34:32,739 --> 00:34:37,868
itself there's only authorization logic

733
00:34:34,960 --> 00:34:40,089
if Fields is nested within a user so you

734
00:34:37,869 --> 00:34:42,539
can pretty much query any of the nested

735
00:34:40,089 --> 00:34:42,538
as

736
00:34:45,418 --> 00:34:51,750
so we can also send malicious queries to

737
00:34:48,449 --> 00:34:54,899
try and do some nasties let me take a

738
00:34:51,750 --> 00:34:57,240
look at this these type here we have a

739
00:34:54,899 --> 00:34:58,769
thread and a message and then you know

740
00:34:57,240 --> 00:35:01,140
the thread month message message was a

741
00:34:58,769 --> 00:35:03,689
thread sort to a reference let happen

742
00:35:01,140 --> 00:35:05,970
here on this research was done by Max

743
00:35:03,690 --> 00:35:06,779
Weber when getting a new I didn't figure

744
00:35:05,970 --> 00:35:09,808
this out myself

745
00:35:06,779 --> 00:35:10,609
I read a blog post about this it

746
00:35:09,809 --> 00:35:14,069
actually works

747
00:35:10,609 --> 00:35:15,299
so basically you know with almost

748
00:35:14,069 --> 00:35:17,279
certain weapons wouldn't we send in a

749
00:35:15,299 --> 00:35:21,660
queer that looks like this in just

750
00:35:17,279 --> 00:35:23,279
10,000 deep messages asking for threads

751
00:35:21,660 --> 00:35:27,420
for messages for threads for messages

752
00:35:23,279 --> 00:35:29,430
from threads hopefully like an AWS auto

753
00:35:27,420 --> 00:35:31,230
scaling group and they're gonna get like

754
00:35:29,430 --> 00:35:32,848
a 50,000 dollar bill at the end of the

755
00:35:31,230 --> 00:35:36,210
year the racino is going to shut their

756
00:35:32,849 --> 00:35:37,950
servers now completely there are some

757
00:35:36,210 --> 00:35:39,539
mitigations to this that I'm talking

758
00:35:37,950 --> 00:35:42,509
about a fucking bottle over later and

759
00:35:39,539 --> 00:35:49,260
just touch on but with this is the real

760
00:35:42,510 --> 00:35:52,200
problem right so there's hit the schema

761
00:35:49,260 --> 00:35:53,579
if they're making an update they can

762
00:35:52,200 --> 00:35:55,439
they're playing the ages and you feel

763
00:35:53,579 --> 00:35:58,440
the replacement in this previous field

764
00:35:55,440 --> 00:36:01,950
it will mark that previous field as is

765
00:35:58,440 --> 00:36:04,019
deprecated true so that's basically used

766
00:36:01,950 --> 00:36:06,180
for the dynamic documentation building

767
00:36:04,019 --> 00:36:08,129
we go through you find these fields and

768
00:36:06,180 --> 00:36:10,950
be like I'm sorry this feels deprecated

769
00:36:08,130 --> 00:36:15,000
you can actually use it and sometimes

770
00:36:10,950 --> 00:36:16,828
you still can it's all about the way the

771
00:36:15,000 --> 00:36:18,539
resolver a directive logic is set up on

772
00:36:16,829 --> 00:36:21,779
the back end and they didn't implement

773
00:36:18,539 --> 00:36:23,220
that properly go ahead and make the

774
00:36:21,779 --> 00:36:24,829
request anyway man you never know what

775
00:36:23,220 --> 00:36:29,430
you're gonna get back with this stuff

776
00:36:24,829 --> 00:36:31,470
you're relying on the time available or

777
00:36:29,430 --> 00:36:35,160
developers to get this done in that time

778
00:36:31,470 --> 00:36:37,770
at the sign by the business side so

779
00:36:35,160 --> 00:36:42,299
that much raises the likelihood that

780
00:36:37,770 --> 00:36:44,580
there's like I definitely queried for

781
00:36:42,300 --> 00:36:52,980
deprecated views and God information

782
00:36:44,580 --> 00:36:55,460
about some time sensitive so if you do

783
00:36:52,980 --> 00:36:57,230
have authentication or mutations are

784
00:36:55,460 --> 00:36:59,820
available

785
00:36:57,230 --> 00:37:02,250
definitely definitely try and set a

786
00:36:59,820 --> 00:37:04,320
mutation to create yourself some kind of

787
00:37:02,250 --> 00:37:06,240
access in the database this is a

788
00:37:04,320 --> 00:37:11,310
contrived example of something that I've

789
00:37:06,240 --> 00:37:14,430
actually had work creating user the

790
00:37:11,310 --> 00:37:18,900
system would have their authorization

791
00:37:14,430 --> 00:37:21,750
logic around the three mutations wasn't

792
00:37:18,900 --> 00:37:24,200
set up correctly and I just log into

793
00:37:21,750 --> 00:37:26,329
that beautiful

794
00:37:24,200 --> 00:37:30,230
so if we set this request them you get

795
00:37:26,329 --> 00:37:31,309
these ID hide 11 you feel back then you

796
00:37:30,230 --> 00:37:34,190
know you know there's something juicy

797
00:37:31,309 --> 00:37:36,760
going on back there I mean you test

798
00:37:34,190 --> 00:37:40,510
[Music]

799
00:37:36,760 --> 00:37:42,520
so my sequel injection right obviously

800
00:37:40,510 --> 00:37:47,260
we're just going to you know it across

801
00:37:42,520 --> 00:37:49,600
the projection marker in their pack this

802
00:37:47,260 --> 00:37:53,610
through sequel map mapped out how to

803
00:37:49,600 --> 00:37:56,020
read and injected a to the correct spots

804
00:37:53,610 --> 00:37:58,000
sits grab people users resolvers

805
00:37:56,020 --> 00:37:59,770
facilitate yep execution of this

806
00:37:58,000 --> 00:38:01,330
application Hodgman the hood humbly

807
00:37:59,770 --> 00:38:06,850
developers and implement the proper

808
00:38:01,330 --> 00:38:10,810
validation sanitization functionality so

809
00:38:06,850 --> 00:38:13,630
it's been a stable image that's pretty

810
00:38:10,810 --> 00:38:17,500
straightforward a throw of acting for

811
00:38:13,630 --> 00:38:20,410
asked to the scene there we know that

812
00:38:17,500 --> 00:38:22,240
this is expecting to receive an IDE due

813
00:38:20,410 --> 00:38:23,799
to this Gmail so if I read this mean we

814
00:38:22,240 --> 00:38:27,270
know exactly how to build a query and

815
00:38:23,800 --> 00:38:29,830
now we know exactly where we enlarged to

816
00:38:27,270 --> 00:38:34,600
form our tried and true sequel injection

817
00:38:29,830 --> 00:38:36,180
attacks from this is a research by a guy

818
00:38:34,600 --> 00:38:40,900
named Pete Rory

819
00:38:36,180 --> 00:38:44,529
he did a great research about no sequel

820
00:38:40,900 --> 00:38:47,560
injection attacks against gravity well

821
00:38:44,530 --> 00:38:50,680
so since Graham pol allows you to use

822
00:38:47,560 --> 00:38:52,990
custom scalars you can also just accept

823
00:38:50,680 --> 00:38:56,020
JSON objects as long as you build out

824
00:38:52,990 --> 00:38:57,819
the loop scalar validation logic in the

825
00:38:56,020 --> 00:38:59,980
back set it all up with resolver

826
00:38:57,820 --> 00:39:03,940
function no problem right so then it

827
00:38:59,980 --> 00:39:06,520
just comes down to how are the

828
00:39:03,940 --> 00:39:08,410
developers create these custom JSON

829
00:39:06,520 --> 00:39:10,360
monitoring so taking a look at that

830
00:39:08,410 --> 00:39:11,379
resolver function one to the query

831
00:39:10,360 --> 00:39:13,930
longer function here

832
00:39:11,380 --> 00:39:17,710
you can see that our user data paths

833
00:39:13,930 --> 00:39:19,230
treated on function without going

834
00:39:17,710 --> 00:39:22,600
through any kind of validation

835
00:39:19,230 --> 00:39:25,090
sanitization logic because this is super

836
00:39:22,600 --> 00:39:28,779
convenient right so let's say they have

837
00:39:25,090 --> 00:39:30,010
a you know user fine so the front end of

838
00:39:28,780 --> 00:39:31,960
this you're going to search for a user

839
00:39:30,010 --> 00:39:34,330
and they want to give you nice fancy

840
00:39:31,960 --> 00:39:35,800
filtering functionality so they're going

841
00:39:34,330 --> 00:39:37,090
to hold all of the different reg X

842
00:39:35,800 --> 00:39:38,530
they're gonna search against these field

843
00:39:37,090 --> 00:39:41,380
on in the front end and just pass them

844
00:39:38,530 --> 00:39:42,900
along with rebus to the back end we can

845
00:39:41,380 --> 00:39:45,710
capture that

846
00:39:42,900 --> 00:39:48,059
sendou you know senator query like this

847
00:39:45,710 --> 00:39:49,559
where we're basically just gonna tell

848
00:39:48,059 --> 00:39:53,160
you know what you should just give us

849
00:39:49,559 --> 00:39:55,619
all the email addresses for everybody to

850
00:39:53,160 --> 00:39:58,170
your database and since you're going to

851
00:39:55,619 --> 00:39:59,789
let us overwrite your field logic to is

852
00:39:58,170 --> 00:40:04,859
that it just because the email goes back

853
00:39:59,789 --> 00:40:05,819
give us all the information back never

854
00:40:04,859 --> 00:40:08,100
know what you're gonna find out there

855
00:40:05,819 --> 00:40:11,570
guys it's the lot of us

856
00:40:08,100 --> 00:40:15,980
[Music]

857
00:40:11,570 --> 00:40:18,500
so just kind of go real quick with your

858
00:40:15,980 --> 00:40:20,030
kind of workflow well your wooden crap

859
00:40:18,500 --> 00:40:22,280
when you're doing a pen test because no

860
00:40:20,030 --> 00:40:25,280
graphical and when I first meet you you

861
00:40:22,280 --> 00:40:27,080
worried all your endpoints test to see

862
00:40:25,280 --> 00:40:28,850
if introspection queries are available

863
00:40:27,080 --> 00:40:31,730
if they are available then yeah we're

864
00:40:28,850 --> 00:40:34,009
all happy we can retrieve the schema we

865
00:40:31,730 --> 00:40:37,400
can spend are we gonna have parsing

866
00:40:34,010 --> 00:40:39,110
through 80,000 lines and building

867
00:40:37,400 --> 00:40:41,210
queries and you tations for all of these

868
00:40:39,110 --> 00:40:43,220
things we can add our comfort injection

869
00:40:41,210 --> 00:40:45,500
markers you can send all of these

870
00:40:43,220 --> 00:40:47,959
requests proxies those your herb suite

871
00:40:45,500 --> 00:40:50,540
and maybe profit if we don't die of

872
00:40:47,960 --> 00:40:52,130
boredom first if introspection is not

873
00:40:50,540 --> 00:40:55,100
turned on you know we've got a capture

874
00:40:52,130 --> 00:40:57,080
request in the traditional sense parts

875
00:40:55,100 --> 00:40:58,880
of both queries using come time I like

876
00:40:57,080 --> 00:41:01,810
field stuff meeting object stuff and see

877
00:40:58,880 --> 00:41:05,480
what else we can you can force it to do

878
00:41:01,810 --> 00:41:12,920
then you know address markers same thing

879
00:41:05,480 --> 00:41:17,200
all the way from basically follow for a

880
00:41:12,920 --> 00:41:17,200
second of all protecting Graham ul

881
00:41:17,310 --> 00:41:23,470
just don't especially queries less map I

882
00:41:21,280 --> 00:41:25,740
see all the time and I talk to the

883
00:41:23,470 --> 00:41:29,350
developers and they're like oh but

884
00:41:25,740 --> 00:41:30,850
convenient and I'm like awesome let me

885
00:41:29,350 --> 00:41:33,069
show you what I can do with this and

886
00:41:30,850 --> 00:41:36,819
then after I show them they're like we

887
00:41:33,070 --> 00:41:39,520
should turn this off so oh yeah

888
00:41:36,820 --> 00:41:41,470
definitely enable it or only enable that

889
00:41:39,520 --> 00:41:44,890
you absolutely have to like github

890
00:41:41,470 --> 00:41:46,629
there's an enabled that you have to

891
00:41:44,890 --> 00:41:48,520
share all of the information in the

892
00:41:46,630 --> 00:41:50,440
database name the database that is

893
00:41:48,520 --> 00:41:53,410
booked to doesn't have private

894
00:41:50,440 --> 00:41:55,690
information publicly available data

895
00:41:53,410 --> 00:41:57,850
schema that's okay you know the whole

896
00:41:55,690 --> 00:41:58,960
thing was designed to that oftentimes

897
00:41:57,850 --> 00:42:03,640
does up case

898
00:41:58,960 --> 00:42:05,710
so work with your developers and that's

899
00:42:03,640 --> 00:42:07,240
kind of your job here to make sure you

900
00:42:05,710 --> 00:42:09,820
know doing these tasks let them know

901
00:42:07,240 --> 00:42:12,009
that although it's like recommended

902
00:42:09,820 --> 00:42:14,460
documentation and this appalling design

903
00:42:12,010 --> 00:42:17,380
it also allows you as an attacker to

904
00:42:14,460 --> 00:42:21,100
really clean a ton of information and

905
00:42:17,380 --> 00:42:22,560
attack vectors from your back-end I mean

906
00:42:21,100 --> 00:42:27,040
I feel like I shouldn't have to say this

907
00:42:22,560 --> 00:42:28,869
I'll trust you there's my data 2019

908
00:42:27,040 --> 00:42:33,060
still have the talk you could always

909
00:42:28,869 --> 00:42:33,060
validate validated sanitizer inputs

910
00:42:33,440 --> 00:42:40,560
well tested solutions exist enabling

911
00:42:36,840 --> 00:42:43,140
authorization and authentication use

912
00:42:40,560 --> 00:42:44,720
them don't let them roll around used it

913
00:42:43,140 --> 00:42:49,799
like trying to do stuff that's out there

914
00:42:44,720 --> 00:42:53,009
it's not that hard to implement it'll do

915
00:42:49,800 --> 00:42:55,700
you feel double authorization checks all

916
00:42:53,010 --> 00:42:58,530
that good stuff make sure that you're

917
00:42:55,700 --> 00:43:01,350
testing any new objects and fuels of

918
00:42:58,530 --> 00:43:03,450
mutations for authorization lime has an

919
00:43:01,350 --> 00:43:07,080
inkling that whenever you push out any

920
00:43:03,450 --> 00:43:08,990
release and really understand how your

921
00:43:07,080 --> 00:43:11,220
graphing well star implementation works

922
00:43:08,990 --> 00:43:14,100
that's unless on you guys on the

923
00:43:11,220 --> 00:43:15,270
development side but pass the

924
00:43:14,100 --> 00:43:17,100
information along than they need to

925
00:43:15,270 --> 00:43:20,430
notice that it's worth spending the time

926
00:43:17,100 --> 00:43:24,270
to really research it's this you know

927
00:43:20,430 --> 00:43:25,710
the $20,000 bounty paid out typically

928
00:43:24,270 --> 00:43:28,350
for these reasons you know they didn't

929
00:43:25,710 --> 00:43:30,240
test the new notes field they don't

930
00:43:28,350 --> 00:43:32,450
really understand how the new mutation

931
00:43:30,240 --> 00:43:34,620
works and they made assumptions and

932
00:43:32,450 --> 00:43:36,120
they're lucky that is not caught by

933
00:43:34,620 --> 00:43:38,279
somebody doing a bug bounty

934
00:43:36,120 --> 00:43:43,740
otherwise it could have been you know

935
00:43:38,280 --> 00:43:45,630
the exact sweet sauce there's a thing

936
00:43:43,740 --> 00:43:46,890
called query cost analysis and there's

937
00:43:45,630 --> 00:43:51,630
some bloggers out there that do this

938
00:43:46,890 --> 00:43:52,920
that basically they go through they get

939
00:43:51,630 --> 00:43:55,560
your query and they kind of do some

940
00:43:52,920 --> 00:43:58,500
analysis on it and and come up with kind

941
00:43:55,560 --> 00:44:01,560
of complexity score and if that

942
00:43:58,500 --> 00:44:06,210
complexity score is more than a certain

943
00:44:01,560 --> 00:44:07,980
threshold that it would write so how

944
00:44:06,210 --> 00:44:09,690
about people know about this they don't

945
00:44:07,980 --> 00:44:15,680
actually think you know they don't think

946
00:44:09,690 --> 00:44:15,680
what you use so but these libraries

947
00:44:15,980 --> 00:44:23,450
and I'll say huge AWS boat in today do

948
00:44:20,660 --> 00:44:26,480
security focus code reviews and train up

949
00:44:23,450 --> 00:44:29,598
your developers with your coding skills

950
00:44:26,480 --> 00:44:29,599
[Music]

951
00:44:31,920 --> 00:44:41,970
so there are some existing attacks from

952
00:44:33,930 --> 00:44:43,680
that available hallows Boyd Zach created

953
00:44:41,970 --> 00:44:47,308
a tool called a gravity well security

954
00:44:43,680 --> 00:44:49,609
toolkit which he basically passes it'll

955
00:44:47,309 --> 00:44:53,309
build a whole bunch of queries for you

956
00:44:49,609 --> 00:44:58,200
and in place of the data it'll put out

957
00:44:53,309 --> 00:45:00,299
of the type go and kind of put some you

958
00:44:58,200 --> 00:45:02,939
know fill that endless data that you

959
00:45:00,299 --> 00:45:05,190
want and start making some some requests

960
00:45:02,940 --> 00:45:07,410
against there I talked to you didn't say

961
00:45:05,190 --> 00:45:08,970
these releasing a verb extension is also

962
00:45:07,410 --> 00:45:11,328
which is pretty cool looking for charm

963
00:45:08,970 --> 00:45:18,808
that out thanks Paulo

964
00:45:11,329 --> 00:45:21,080
so I created it all shake it's gonna on

965
00:45:18,809 --> 00:45:26,470
this video free here

966
00:45:21,080 --> 00:45:26,470
she got seated so with shapeshifter

967
00:45:28,960 --> 00:45:34,720
packs it pass it approximately

968
00:45:36,310 --> 00:45:43,190
[Music]

969
00:45:40,660 --> 00:45:45,410
so you can see you kind of start to

970
00:45:43,190 --> 00:45:48,200
Rhonda what is doing here it is it's

971
00:45:45,410 --> 00:45:50,660
making a matrix a whole bunch of

972
00:45:48,200 --> 00:45:53,299
different version numbers and a whole

973
00:45:50,660 --> 00:45:54,859
bunch of different common graph qim

974
00:45:53,300 --> 00:45:57,290
points through the complications that

975
00:45:54,860 --> 00:45:59,540
are out there and it's kind of searching

976
00:45:57,290 --> 00:46:02,000
through just trying to do the

977
00:45:59,540 --> 00:46:04,170
enumeration for you you find where that

978
00:46:02,000 --> 00:46:08,889
actual graph you Latin point is

979
00:46:04,170 --> 00:46:08,889
[Music]

980
00:46:09,070 --> 00:46:15,920
it's a large matrix through there and of

981
00:46:12,619 --> 00:46:17,720
course this is you know it's all at your

982
00:46:15,920 --> 00:46:21,320
own fields that you want to check for

983
00:46:17,720 --> 00:46:24,140
that matrix that it's gonna write out a

984
00:46:21,320 --> 00:46:27,680
whole bunch of queries after it so once

985
00:46:24,140 --> 00:46:29,960
it finds it grab get the inspection run

986
00:46:27,680 --> 00:46:32,210
distress inspection introspection query

987
00:46:29,960 --> 00:46:34,730
gets a response back parses that builds

988
00:46:32,210 --> 00:46:36,920
a shit-ton of queries and it actually

989
00:46:34,730 --> 00:46:39,349
will look at the scale or tight and

990
00:46:36,920 --> 00:46:41,540
inject an actual real value for you into

991
00:46:39,349 --> 00:46:43,520
that and then it's going to start

992
00:46:41,540 --> 00:46:45,740
sending all the deed requests you can

993
00:46:43,520 --> 00:46:48,290
kind of see them on the left at burb I'm

994
00:46:45,740 --> 00:46:50,419
scrolling down there hump them going

995
00:46:48,290 --> 00:46:52,640
through if a query fails

996
00:46:50,420 --> 00:46:54,770
I'm parsing that query response I'm

997
00:46:52,640 --> 00:46:56,210
looking for a suggested field and then

998
00:46:54,770 --> 00:46:58,640
I'm going to rewrite the query on the

999
00:46:56,210 --> 00:47:02,650
fly with that suggested field to try and

1000
00:46:58,640 --> 00:47:02,650
get a 200 response word right

1001
00:47:02,950 --> 00:47:06,689
you know take a minute

1002
00:47:07,030 --> 00:47:10,990
and I'm golden up over there

1003
00:47:11,750 --> 00:47:16,059
[Music]

1004
00:47:16,870 --> 00:47:23,990
once you get at the end is basically a

1005
00:47:20,470 --> 00:47:25,580
whole bunch of successful queries that

1006
00:47:23,990 --> 00:47:27,529
can actually be made in verb sweet so

1007
00:47:25,580 --> 00:47:29,540
you can just go in there and filter

1008
00:47:27,530 --> 00:47:31,370
watching hundred responses and then

1009
00:47:29,540 --> 00:47:37,640
start grabbing those setting them to

1010
00:47:31,370 --> 00:47:52,240
intruder I'm gonna apply shouldn't the

1011
00:47:37,640 --> 00:47:54,589
other guy with ten yeah it's all Python

1012
00:47:52,240 --> 00:47:57,310
gonna be refactoring the entire thing

1013
00:47:54,590 --> 00:47:59,840
right now it works it's not pretty but

1014
00:47:57,310 --> 00:48:01,100
you know give it a few weeks how we add

1015
00:47:59,840 --> 00:48:03,710
this new features to it

1016
00:48:01,100 --> 00:48:10,490
really pull them out a bit more so that

1017
00:48:03,710 --> 00:48:12,590
that's kind of another feature when

1018
00:48:10,490 --> 00:48:14,569
Oakland is once it bottled is team

1019
00:48:12,590 --> 00:48:15,890
hundred are like on the roadmap here

1020
00:48:14,570 --> 00:48:19,400
once it finds these two hundred

1021
00:48:15,890 --> 00:48:20,870
responses it's going to rewrite all the

1022
00:48:19,400 --> 00:48:22,430
queries and automatically fluid

1023
00:48:20,870 --> 00:48:25,069
sequel Matt Huffman text partners in

1024
00:48:22,430 --> 00:48:27,169
there so you can just pass all these on

1025
00:48:25,070 --> 00:48:29,450
the sequel map and like go drink some

1026
00:48:27,170 --> 00:48:30,800
coffee gets on the knee come back an

1027
00:48:29,450 --> 00:48:32,990
hour and a half later and it'll have

1028
00:48:30,800 --> 00:48:36,340
tested all of your endpoint receivable

1029
00:48:32,990 --> 00:48:36,339
injection all that good stuff

1030
00:48:36,520 --> 00:48:42,579
[Music]

1031
00:48:47,950 --> 00:48:53,509
- ecology to set up a cloud

1032
00:48:50,630 --> 00:48:55,640
infrastructure to do domain fronting so

1033
00:48:53,510 --> 00:48:58,700
now I proxy my shapeshifter through that

1034
00:48:55,640 --> 00:49:01,100
and each request is sent by a different

1035
00:48:58,700 --> 00:49:02,390
pilot CDN so it's really hard for them

1036
00:49:01,100 --> 00:49:04,580
to notice a pattern in your incoming

1037
00:49:02,390 --> 00:49:06,470
requests and kind of start to block

1038
00:49:04,580 --> 00:49:08,120
usage you are making a lot of requests

1039
00:49:06,470 --> 00:49:10,160
it'll just look like it's coming from my

1040
00:49:08,120 --> 00:49:12,319
guru quality and you know all this good

1041
00:49:10,160 --> 00:49:15,680
and different stuff randomizes it on its

1042
00:49:12,320 --> 00:49:17,810
own so they got these two tools paired

1043
00:49:15,680 --> 00:49:19,910
together I think are really powerful and

1044
00:49:17,810 --> 00:49:23,120
really give you a huge head start on

1045
00:49:19,910 --> 00:49:24,500
that roadmap and workflow from happy to

1046
00:49:23,120 --> 00:49:28,009
like immediately parsed through all this

1047
00:49:24,500 --> 00:49:29,510
stuff so it should give you a leg up and

1048
00:49:28,010 --> 00:49:33,830
really reduce the time it's gonna take

1049
00:49:29,510 --> 00:49:34,880
you to effectively I mean if you if

1050
00:49:33,830 --> 00:49:37,730
you're not really writing all these

1051
00:49:34,880 --> 00:49:39,410
responses you're not really testing its

1052
00:49:37,730 --> 00:49:41,810
capabilities that you should and there

1053
00:49:39,410 --> 00:49:42,290
could be stuff left over in there that

1054
00:49:41,810 --> 00:49:44,900
you missed

1055
00:49:42,290 --> 00:49:46,520
do you - it's your time alright like no

1056
00:49:44,900 --> 00:49:49,160
one has time to I can park through and

1057
00:49:46,520 --> 00:49:51,890
do all of this stuff so I hope this tool

1058
00:49:49,160 --> 00:49:54,379
gives you guys a leg up on your next if

1059
00:49:51,890 --> 00:49:56,660
you wanna do a graph UO endpoint that's

1060
00:49:54,380 --> 00:49:59,020
that's kind of all I have you have any

1061
00:49:56,660 --> 00:49:59,020
questions

1062
00:50:00,610 --> 00:50:14,409
okay yes

1063
00:50:06,720 --> 00:50:14,408
[Music]

1064
00:50:18,080 --> 00:50:22,299
[Music]

1065
00:50:19,230 --> 00:50:25,120
built-in to glue the graph ul spec at

1066
00:50:22,300 --> 00:50:27,370
all so if they decide to implement some

1067
00:50:25,120 --> 00:50:29,830
kind of rate limiting then there will be

1068
00:50:27,370 --> 00:50:32,740
rate limiting but that you can use my

1069
00:50:29,830 --> 00:50:36,910
closet is a high speed to domain front

1070
00:50:32,740 --> 00:50:38,350
and now it doesn't know where the

1071
00:50:36,910 --> 00:50:42,160
queries are necessarily coming from so

1072
00:50:38,350 --> 00:50:44,440
you're going to bypass that unless this

1073
00:50:42,160 --> 00:50:45,660
is an auth token involved in with

1074
00:50:44,440 --> 00:50:55,780
English case

1075
00:50:45,660 --> 00:50:55,779
[Music]

