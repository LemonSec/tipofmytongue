1
00:00:07,069 --> 00:00:12,750
all right well welcome to my talk I'm

2
00:00:10,469 --> 00:00:14,639
Brett Hawkins and this is a talk about a

3
00:00:12,750 --> 00:00:18,359
windows persistence tool kit that I

4
00:00:14,639 --> 00:00:20,039
built called char persist so kind of an

5
00:00:18,359 --> 00:00:21,539
outline of how it today is gonna go I'm

6
00:00:20,039 --> 00:00:23,189
gonna go pretty quickly through the

7
00:00:21,539 --> 00:00:24,660
slides because I have a lot of content I

8
00:00:23,189 --> 00:00:25,769
need to get through and I want to make

9
00:00:24,660 --> 00:00:28,289
sure there's enough time to go through

10
00:00:25,769 --> 00:00:29,939
the demos but first someone I gotta go

11
00:00:28,289 --> 00:00:33,180
over an overview of Windows persistence

12
00:00:29,939 --> 00:00:34,290
I give an overview about char persist go

13
00:00:33,180 --> 00:00:35,790
through the different techniques that

14
00:00:34,290 --> 00:00:39,269
char persist has and then I'm gonna go

15
00:00:35,790 --> 00:00:41,219
through the demo about me I'm a Red Team

16
00:00:39,270 --> 00:00:43,379
consultant at mandiant I've been in

17
00:00:41,219 --> 00:00:45,719
InfoSec for about eight years now did

18
00:00:43,379 --> 00:00:48,420
some post-grad work at sans undergrad

19
00:00:45,719 --> 00:00:51,780
work at University Akron in Ohio I got

20
00:00:48,420 --> 00:00:53,219
some certs I'm from Ohio if you're from

21
00:00:51,780 --> 00:00:55,410
Ohio you'll know why I spelled it like

22
00:00:53,219 --> 00:00:58,379
that and also I like playing sports and

23
00:00:55,410 --> 00:01:00,750
video games in my free time let's first

24
00:00:58,379 --> 00:01:02,789
off why did I create this tool kit I

25
00:01:00,750 --> 00:01:04,470
wanted to automate the addition and

26
00:01:02,789 --> 00:01:06,330
removal of multiple persistence

27
00:01:04,470 --> 00:01:08,189
techniques specifically with reflective

28
00:01:06,330 --> 00:01:11,460
c-sharp you know without having to rely

29
00:01:08,189 --> 00:01:13,289
on PowerShell or using you know built-in

30
00:01:11,460 --> 00:01:16,439
system commands like reg and scat a scan

31
00:01:13,290 --> 00:01:17,610
SC I definitely as a red teamer try to

32
00:01:16,439 --> 00:01:20,100
stay away from PowerShell as much as

33
00:01:17,610 --> 00:01:21,420
possible and also I wanted to bring

34
00:01:20,100 --> 00:01:23,220
awareness to the various techniques

35
00:01:21,420 --> 00:01:26,820
they're available on Windows and nothing

36
00:01:23,220 --> 00:01:28,920
like this existed publicly until now how

37
00:01:26,820 --> 00:01:30,029
do I get the idea for the tool kit just

38
00:01:28,920 --> 00:01:32,579
my experience from doing Red Team

39
00:01:30,030 --> 00:01:34,380
operations I get to work with a lot of

40
00:01:32,579 --> 00:01:36,449
really smart people who are much smarter

41
00:01:34,380 --> 00:01:39,119
than me and I get a lot of ideas from

42
00:01:36,450 --> 00:01:40,350
them and then also I had a bunch of kind

43
00:01:39,119 --> 00:01:41,729
of standalone persistence tools that I

44
00:01:40,350 --> 00:01:45,390
would use and I wanted to combine

45
00:01:41,729 --> 00:01:47,880
everything up into one tool kit who's

46
00:01:45,390 --> 00:01:49,710
going to touch on Windows persistence so

47
00:01:47,880 --> 00:01:51,360
this is a far eyes attack life cycle

48
00:01:49,710 --> 00:01:54,449
diagram and specifically we're gonna

49
00:01:51,360 --> 00:01:55,799
focus on maintain presence so as red

50
00:01:54,450 --> 00:01:57,479
teamers right we spent a lot of time

51
00:01:55,799 --> 00:01:59,759
getting into an organization right you

52
00:01:57,479 --> 00:02:01,950
do all your Oh since your social

53
00:01:59,759 --> 00:02:03,299
engineering campaigns if you're if

54
00:02:01,950 --> 00:02:05,700
you're doing social engineering form our

55
00:02:03,299 --> 00:02:07,530
execution you you have a lot of R&D goes

56
00:02:05,700 --> 00:02:08,878
in the payload execution now because all

57
00:02:07,530 --> 00:02:10,860
the modern security controls right

58
00:02:08,878 --> 00:02:13,560
the last thing you want is to lose that

59
00:02:10,860 --> 00:02:15,960
access it sucks it sucks so bad

60
00:02:13,560 --> 00:02:17,760
so you want to make sure right when you

61
00:02:15,960 --> 00:02:19,050
get that initial access you have some

62
00:02:17,760 --> 00:02:21,299
type of persistence there so you can

63
00:02:19,050 --> 00:02:24,360
maintain presence so that was my focus

64
00:02:21,300 --> 00:02:26,100
with this project so what does

65
00:02:24,360 --> 00:02:27,660
persistence right it's it's any access

66
00:02:26,100 --> 00:02:29,190
action or configuration change to a

67
00:02:27,660 --> 00:02:30,990
system that's gonna give an adversary a

68
00:02:29,190 --> 00:02:32,459
persistent presence on that system and

69
00:02:30,990 --> 00:02:34,410
this is needed if you want to maintain

70
00:02:32,459 --> 00:02:35,610
presence on that system for any period

71
00:02:34,410 --> 00:02:39,630
of time whether you need to maintain a

72
00:02:35,610 --> 00:02:42,090
presence for days weeks months years you

73
00:02:39,630 --> 00:02:43,590
know whatever and there's two key

74
00:02:42,090 --> 00:02:45,959
components when it comes to persistence

75
00:02:43,590 --> 00:02:47,640
there's the persistence implant and then

76
00:02:45,959 --> 00:02:49,320
the persistence trigger right so the

77
00:02:47,640 --> 00:02:53,309
persistence implant is going to be your

78
00:02:49,320 --> 00:02:54,690
payload right HTA exe dll whatever then

79
00:02:53,310 --> 00:02:56,010
the trigger that's gonna what

80
00:02:54,690 --> 00:02:57,870
you know actually causes that payload to

81
00:02:56,010 --> 00:02:59,940
xq you know schedule tasks and windows

82
00:02:57,870 --> 00:03:01,560
service or two basic examples right but

83
00:02:59,940 --> 00:03:03,510
you know without that trigger you know

84
00:03:01,560 --> 00:03:05,310
that payload can't execute so the goal

85
00:03:03,510 --> 00:03:09,690
of sharp assist was to help with the

86
00:03:05,310 --> 00:03:10,890
persistence trigger some well known you

87
00:03:09,690 --> 00:03:12,150
know public persistence techniques that

88
00:03:10,890 --> 00:03:15,208
are included in char persist right

89
00:03:12,150 --> 00:03:17,549
windows services scheduled tasks startup

90
00:03:15,209 --> 00:03:20,220
folder the Windows registry there's some

91
00:03:17,549 --> 00:03:21,000
others the mitre attack framework link

92
00:03:20,220 --> 00:03:24,420
right there you know I definitely

93
00:03:21,000 --> 00:03:26,820
recommend you check it out some not as

94
00:03:24,420 --> 00:03:29,250
well-known public forces techniques so

95
00:03:26,820 --> 00:03:30,720
scheduled tasks backdoor so basically

96
00:03:29,250 --> 00:03:33,989
you can backdoor an existing scheduled

97
00:03:30,720 --> 00:03:36,600
tasks to execute an additional action

98
00:03:33,989 --> 00:03:39,060
another one is key pass persistence so

99
00:03:36,600 --> 00:03:40,680
you can basically use a user opening

100
00:03:39,060 --> 00:03:42,540
their key pass database as a persistence

101
00:03:40,680 --> 00:03:44,670
trigger and the other one is tortoise

102
00:03:42,540 --> 00:03:46,980
SVN persistence so it's towards thespian

103
00:03:44,670 --> 00:03:48,809
is a common Windows client used for

104
00:03:46,980 --> 00:03:51,298
interacting with SVN repos so with that

105
00:03:48,810 --> 00:03:52,769
one the persistent triggers basically

106
00:03:51,299 --> 00:03:55,560
any time that they try to interact with

107
00:03:52,769 --> 00:03:58,110
the SVN repo with that client you can

108
00:03:55,560 --> 00:03:59,280
have that trigger your payload so these

109
00:03:58,110 --> 00:04:01,440
three are all included in the initial

110
00:03:59,280 --> 00:04:03,470
reads the release of char persist but

111
00:04:01,440 --> 00:04:05,609
these ones are not as well known

112
00:04:03,470 --> 00:04:07,890
so just went through win its persistence

113
00:04:05,610 --> 00:04:10,140
very high-level now let's get get into

114
00:04:07,890 --> 00:04:11,250
char persist so char persist is a

115
00:04:10,140 --> 00:04:13,380
command line tool it's written in

116
00:04:11,250 --> 00:04:15,540
c-sharp it's compatible with COBOL

117
00:04:13,380 --> 00:04:17,159
strikes execute assembly or any other

118
00:04:15,540 --> 00:04:19,320
framework that supports reflective

119
00:04:17,160 --> 00:04:20,970
c-sharp execution it gives you an easy

120
00:04:19,320 --> 00:04:23,219
way to use multiple persistence

121
00:04:20,970 --> 00:04:25,620
techniques on Windows host I designed a

122
00:04:23,220 --> 00:04:27,430
very modular so that new persistence

123
00:04:25,620 --> 00:04:29,229
techniques can be added in the future

124
00:04:27,430 --> 00:04:30,669
I want to add as much as much as I can

125
00:04:29,229 --> 00:04:33,159
to it and as much as the community can

126
00:04:30,669 --> 00:04:35,830
to it I also implemented some additional

127
00:04:33,159 --> 00:04:38,319
tradecraft and the techniques so things

128
00:04:35,830 --> 00:04:40,859
like file time stomping and running

129
00:04:38,319 --> 00:04:43,560
persistence implants minimizer hidden

130
00:04:40,860 --> 00:04:46,300
the we just released a tool this week

131
00:04:43,560 --> 00:04:48,849
the the github link is right there also

132
00:04:46,300 --> 00:04:50,650
we have a blog post on it I'm gonna be

133
00:04:48,849 --> 00:04:51,759
disturbing the slides afterwards too so

134
00:04:50,650 --> 00:04:53,229
if you don't get a chance to take a

135
00:04:51,759 --> 00:04:54,610
picture of something or write something

136
00:04:53,229 --> 00:04:58,120
down I'll be distributing them

137
00:04:54,610 --> 00:05:00,639
afterwards so that the various switches

138
00:04:58,120 --> 00:05:02,620
are available again the github is gonna

139
00:05:00,639 --> 00:05:04,180
as full documentation examples

140
00:05:02,620 --> 00:05:06,129
everything everything you're going to

141
00:05:04,180 --> 00:05:07,569
need to use the tool but some different

142
00:05:06,129 --> 00:05:09,550
switches that are available so you can

143
00:05:07,569 --> 00:05:12,550
specify your persistence technique you

144
00:05:09,550 --> 00:05:14,710
want to use command to execute arguments

145
00:05:12,550 --> 00:05:17,110
to the command 5 you want to create or

146
00:05:14,710 --> 00:05:20,349
modify registry key to create or modify

147
00:05:17,110 --> 00:05:23,409
registry value scheduled tasks name or

148
00:05:20,349 --> 00:05:24,699
service name also specify the method you

149
00:05:23,409 --> 00:05:27,610
want to use which I'll get into those in

150
00:05:24,699 --> 00:05:28,870
a second any optional add-ons that you

151
00:05:27,610 --> 00:05:32,080
want to use for the technique and

152
00:05:28,870 --> 00:05:33,190
obviously a help page so I mentioned the

153
00:05:32,080 --> 00:05:36,068
methods so there's four different

154
00:05:33,190 --> 00:05:37,569
methods right there's ad which is simply

155
00:05:36,069 --> 00:05:39,789
going to add that remove or at that

156
00:05:37,569 --> 00:05:42,219
persistence technique remove will remove

157
00:05:39,789 --> 00:05:44,169
that persisters technique check what

158
00:05:42,219 --> 00:05:46,330
this will do it will perform a dry run

159
00:05:44,169 --> 00:05:47,889
without actually adding that persistence

160
00:05:46,330 --> 00:05:49,270
so for example what's gonna check to

161
00:05:47,889 --> 00:05:51,190
make sure you have the right permissions

162
00:05:49,270 --> 00:05:52,690
make sure you had the right switches you

163
00:05:51,190 --> 00:05:54,430
know stuff like that without actually

164
00:05:52,690 --> 00:05:56,379
adding it so I highly recommend you know

165
00:05:54,430 --> 00:05:58,629
running check before you actually do the

166
00:05:56,379 --> 00:05:59,650
ad the same checks are actually in you

167
00:05:58,629 --> 00:06:01,539
know all you know when it's trying to

168
00:05:59,650 --> 00:06:02,770
add or remove the persistence but it's

169
00:06:01,539 --> 00:06:04,840
just kind of best practice I think to

170
00:06:02,770 --> 00:06:06,609
kind of perform a dry run and then

171
00:06:04,840 --> 00:06:07,869
there's a list method which you can list

172
00:06:06,610 --> 00:06:09,849
current entries for a persistence

173
00:06:07,870 --> 00:06:12,759
technique so for example if you want to

174
00:06:09,849 --> 00:06:14,710
list current entries in like the HKC you

175
00:06:12,759 --> 00:06:17,949
run key you can do that with a list

176
00:06:14,710 --> 00:06:20,138
method and then the optional add-ons

177
00:06:17,949 --> 00:06:22,629
they apply to just a few techniques so

178
00:06:20,139 --> 00:06:25,210
and you're gonna see the the first one

179
00:06:22,629 --> 00:06:26,319
here in the demo so there's env that's

180
00:06:25,210 --> 00:06:28,090
for environment variable office

181
00:06:26,319 --> 00:06:30,069
occasionally distri persistence so

182
00:06:28,090 --> 00:06:31,929
basically what that does is rather than

183
00:06:30,069 --> 00:06:33,250
having your commands and arguments you

184
00:06:31,930 --> 00:06:34,150
know stored in the registry value it's

185
00:06:33,250 --> 00:06:36,849
actually gonna be an environment

186
00:06:34,150 --> 00:06:38,440
variable and then the other three here

187
00:06:36,849 --> 00:06:40,539
hourly daily and logon that's for

188
00:06:38,440 --> 00:06:44,170
specifying your frequency for this guy

189
00:06:40,540 --> 00:06:45,820
task persistence so just went over an

190
00:06:44,170 --> 00:06:47,980
overview of the of Shar persists now

191
00:06:45,820 --> 00:06:49,810
we're gonna get into the techniques so

192
00:06:47,980 --> 00:06:51,910
on the initial release it's coming with

193
00:06:49,810 --> 00:06:53,350
seven techniques again the plan is to

194
00:06:51,910 --> 00:06:55,240
add more in the future both myself and

195
00:06:53,350 --> 00:06:57,910
the community so if you have any really

196
00:06:55,240 --> 00:06:59,050
cool techniques please feel free I'd

197
00:06:57,910 --> 00:07:00,730
love to talk to you

198
00:06:59,050 --> 00:07:03,130
so it's initially releasing with keepass

199
00:07:00,730 --> 00:07:06,040
Windows registry scheduled tasks

200
00:07:03,130 --> 00:07:08,530
backdoor new scheduled tasks the startup

201
00:07:06,040 --> 00:07:11,590
folder tourist SVN and new windows

202
00:07:08,530 --> 00:07:14,200
service and you specify the technique

203
00:07:11,590 --> 00:07:16,179
you want to use with you know you know

204
00:07:14,200 --> 00:07:18,130
there's stuff in bold again it's all on

205
00:07:16,180 --> 00:07:21,310
the github right so you know key pass

206
00:07:18,130 --> 00:07:25,570
reg good tasks backdoor startup forward

207
00:07:21,310 --> 00:07:27,010
Taurus SVN service and scat ask and have

208
00:07:25,570 --> 00:07:28,690
all the techniques that are available in

209
00:07:27,010 --> 00:07:30,700
the initial release only two of them

210
00:07:28,690 --> 00:07:32,230
actually require admin privileges so the

211
00:07:30,700 --> 00:07:34,270
scheduled tasks backdoor and the new

212
00:07:32,230 --> 00:07:36,010
Windows service both require admin

213
00:07:34,270 --> 00:07:38,229
privileges the other techniques do not

214
00:07:36,010 --> 00:07:39,610
require admin privileges although like

215
00:07:38,230 --> 00:07:40,990
for example the Windows registry there's

216
00:07:39,610 --> 00:07:43,240
a few keys if you want to use you need

217
00:07:40,990 --> 00:07:44,290
admin privileges but to just use the

218
00:07:43,240 --> 00:07:47,680
technique you don't need admin

219
00:07:44,290 --> 00:07:50,110
privileges for that so the first

220
00:07:47,680 --> 00:07:52,030
technique key pass so it's again it's

221
00:07:50,110 --> 00:07:53,440
going to use the fact that the user is

222
00:07:52,030 --> 00:07:55,179
opening that key past database as a

223
00:07:53,440 --> 00:07:57,160
persistence trigger and the way it does

224
00:07:55,180 --> 00:07:59,140
it is actually back doors that users key

225
00:07:57,160 --> 00:08:01,450
pass configuration file with a malicious

226
00:07:59,140 --> 00:08:03,909
key past triggers so there's a trigger

227
00:08:01,450 --> 00:08:06,219
system basically in key paths that can

228
00:08:03,910 --> 00:08:09,580
be used as a nice feature for our spread

229
00:08:06,220 --> 00:08:10,840
teamers some tradecraft it maintains the

230
00:08:09,580 --> 00:08:12,609
timestamp of the original key past

231
00:08:10,840 --> 00:08:14,469
configuration file and it's also going

232
00:08:12,610 --> 00:08:16,480
to run your payload implant hidden so

233
00:08:14,470 --> 00:08:17,680
the users not gonna see it and there's

234
00:08:16,480 --> 00:08:20,920
some really great references there

235
00:08:17,680 --> 00:08:25,380
particularly the at 2:06 article there

236
00:08:20,920 --> 00:08:27,550
has a great blog post on this technique

237
00:08:25,380 --> 00:08:28,900
and i have the example commands for each

238
00:08:27,550 --> 00:08:30,130
of these but i'm not gonna draw any

239
00:08:28,900 --> 00:08:31,780
these in detail because again the github

240
00:08:30,130 --> 00:08:33,549
has everything that you're gonna need

241
00:08:31,780 --> 00:08:35,919
just kind of this one right you're

242
00:08:33,549 --> 00:08:37,120
specifying the key past config and what

243
00:08:35,919 --> 00:08:39,159
commands you want to execute whenever

244
00:08:37,120 --> 00:08:41,740
that key past database is opened but

245
00:08:39,159 --> 00:08:43,959
again all that's on the github next one

246
00:08:41,740 --> 00:08:45,220
Windows registry pretty simple use the

247
00:08:43,960 --> 00:08:47,080
Windows registry as a persistence

248
00:08:45,220 --> 00:08:49,390
trigger by adding a specified key and

249
00:08:47,080 --> 00:08:50,620
value again with tradecraft it's got the

250
00:08:49,390 --> 00:08:51,550
environment variable obfuscation that

251
00:08:50,620 --> 00:08:53,240
you're gonna you're gonna see in the

252
00:08:51,550 --> 00:08:55,649
demo

253
00:08:53,240 --> 00:08:56,759
it's a different registry keys just for

254
00:08:55,649 --> 00:08:58,079
the initial release I know there's a

255
00:08:56,759 --> 00:08:59,940
tons of registry keys you can use for

256
00:08:58,079 --> 00:09:02,310
persistence this is just for the initial

257
00:08:59,940 --> 00:09:04,220
release so there's eight four of them

258
00:09:02,310 --> 00:09:07,739
require admin privileges for them do not

259
00:09:04,220 --> 00:09:09,990
another thing to know is that some of

260
00:09:07,740 --> 00:09:11,550
them right are you actually spending the

261
00:09:09,990 --> 00:09:13,709
user specifies the registry values some

262
00:09:11,550 --> 00:09:15,420
of them do not so for example the

263
00:09:13,709 --> 00:09:17,300
registry keys with predefined values for

264
00:09:15,420 --> 00:09:20,430
persistence for example the logon script

265
00:09:17,300 --> 00:09:23,699
the user in it NPR logon script registry

266
00:09:20,430 --> 00:09:25,800
value if that value is present in HK Cu

267
00:09:23,699 --> 00:09:27,599
environment whatever is present in that

268
00:09:25,800 --> 00:09:29,729
registry value will run whenever the

269
00:09:27,600 --> 00:09:30,930
user logs on after a reboot so that's

270
00:09:29,730 --> 00:09:32,939
kind of difference between the

271
00:09:30,930 --> 00:09:35,099
predefined registry values and the ones

272
00:09:32,939 --> 00:09:36,420
that are not currently the the

273
00:09:35,100 --> 00:09:38,819
environment office Gatien is only

274
00:09:36,420 --> 00:09:40,378
supported for the user supplied registry

275
00:09:38,819 --> 00:09:41,939
keys but I plan to add that

276
00:09:40,379 --> 00:09:45,750
functionality to the predefined ones in

277
00:09:41,939 --> 00:09:46,980
the future one thing I wanted to note

278
00:09:45,750 --> 00:09:48,959
with the exam just the example came in

279
00:09:46,980 --> 00:09:50,970
for this when you're adding persistence

280
00:09:48,959 --> 00:09:53,430
so like the first example there is just

281
00:09:50,970 --> 00:09:55,019
a regular you're adding persistence it's

282
00:09:53,430 --> 00:09:58,229
like the HK so you run key with some

283
00:09:55,019 --> 00:09:59,610
value you specify the second one it's

284
00:09:58,230 --> 00:10:01,110
the same thing only you're adding that

285
00:09:59,610 --> 00:10:03,509
environment variable obfuscation with

286
00:10:01,110 --> 00:10:04,980
the - Oh env and then the third one

287
00:10:03,509 --> 00:10:06,930
would be an example of a predefined

288
00:10:04,980 --> 00:10:08,670
registry key as you can see you don't

289
00:10:06,930 --> 00:10:12,899
specify a value for that when it does it

290
00:10:08,670 --> 00:10:15,089
automatically for you next technique

291
00:10:12,899 --> 00:10:16,769
scheduler task backdoor so that's going

292
00:10:15,089 --> 00:10:18,480
to backdoor a scheduled tasks by adding

293
00:10:16,769 --> 00:10:20,639
an additional action to it and that

294
00:10:18,480 --> 00:10:22,350
additional action will run after the

295
00:10:20,639 --> 00:10:23,730
first one is completed so the only thing

296
00:10:22,350 --> 00:10:25,439
you're doing is you're modifying a

297
00:10:23,730 --> 00:10:27,029
existing scheduled task you're not

298
00:10:25,439 --> 00:10:30,540
creating a new one you're just adding

299
00:10:27,029 --> 00:10:32,100
another action after it now something to

300
00:10:30,540 --> 00:10:33,779
note with this it's same for the

301
00:10:32,100 --> 00:10:35,939
scheduled tasks for assistance like the

302
00:10:33,779 --> 00:10:37,740
list method you can list all scheduled

303
00:10:35,939 --> 00:10:40,110
tasks you can list scheduled tasks by

304
00:10:37,740 --> 00:10:41,819
name or you can list get their tasks by

305
00:10:40,110 --> 00:10:43,290
frequency if you just wanted to see all

306
00:10:41,819 --> 00:10:45,509
scheduled tasks that run at logon on the

307
00:10:43,290 --> 00:10:47,309
blog post you probably saw an example of

308
00:10:45,509 --> 00:10:48,899
this basically I was listing all

309
00:10:47,309 --> 00:10:52,410
scheduled tasks to run it log on and

310
00:10:48,899 --> 00:10:54,509
then I back doored one of those next one

311
00:10:52,410 --> 00:10:55,980
new scheduled tasks so it's going to

312
00:10:54,509 --> 00:10:58,050
create a new scheduled tasks under the

313
00:10:55,980 --> 00:10:59,430
current users context except for if you

314
00:10:58,050 --> 00:11:00,809
want to specify one to write logon

315
00:10:59,430 --> 00:11:03,120
that's gonna require admin privileges

316
00:11:00,809 --> 00:11:04,050
you can specify their frequency with the

317
00:11:03,120 --> 00:11:05,880
- OH

318
00:11:04,050 --> 00:11:06,719
if you don't specify frequency then it's

319
00:11:05,880 --> 00:11:09,000
going to be created with a daily

320
00:11:06,720 --> 00:11:11,520
frequency and that scheduled task will

321
00:11:09,000 --> 00:11:13,380
be scheduled to run between at a random

322
00:11:11,520 --> 00:11:15,540
time between 10:00 a.m. and 12:00 p.m.

323
00:11:13,380 --> 00:11:16,560
local time why because most people are

324
00:11:15,540 --> 00:11:21,510
using their machines between 10:00 a.m.

325
00:11:16,560 --> 00:11:23,189
and 12:00 p.m. local time and again the

326
00:11:21,510 --> 00:11:26,340
the usage is going to be the same as the

327
00:11:23,190 --> 00:11:27,870
scheduled tasks back door window start

328
00:11:26,340 --> 00:11:29,220
folder so what this is gonna do it's

329
00:11:27,870 --> 00:11:30,540
going to create a link file it's gonna

330
00:11:29,220 --> 00:11:32,730
place it in the current user startup

331
00:11:30,540 --> 00:11:34,469
folder some tradecraft at this one it's

332
00:11:32,730 --> 00:11:36,020
gonna time stop the link file between 60

333
00:11:34,470 --> 00:11:39,060
and 90 days before the actual creation

334
00:11:36,020 --> 00:11:41,160
why am i doing that basically if the

335
00:11:39,060 --> 00:11:43,589
blue team has any sort of you know

336
00:11:41,160 --> 00:11:45,209
scripts running on host to see recently

337
00:11:43,590 --> 00:11:47,190
added or modified files like within the

338
00:11:45,210 --> 00:11:48,510
last 30 days or something this will make

339
00:11:47,190 --> 00:11:50,130
sure that it's not caught in that and

340
00:11:48,510 --> 00:11:51,569
also it's going to run the linked file

341
00:11:50,130 --> 00:11:55,980
minimize as well so the user will not

342
00:11:51,570 --> 00:11:57,360
see it again you know pretty basic

343
00:11:55,980 --> 00:11:58,590
examples they're not gonna not going to

344
00:11:57,360 --> 00:12:02,790
go through them since they're all on the

345
00:11:58,590 --> 00:12:05,220
github there towards SVN okay so this

346
00:12:02,790 --> 00:12:07,380
uses a hook script feature in torez SVN

347
00:12:05,220 --> 00:12:09,390
as a persistence trigger so basically

348
00:12:07,380 --> 00:12:11,939
every time a user tries to connect to a

349
00:12:09,390 --> 00:12:14,220
subversion repo with that client that

350
00:12:11,940 --> 00:12:16,350
persistence trigger will activate this

351
00:12:14,220 --> 00:12:19,290
could be if they're tuning an SVN update

352
00:12:16,350 --> 00:12:21,990
commit check out just looking at a

353
00:12:19,290 --> 00:12:25,469
commit log whatever so basically there's

354
00:12:21,990 --> 00:12:27,540
a registry value that the hook script

355
00:12:25,470 --> 00:12:29,970
feature uses that you can specify system

356
00:12:27,540 --> 00:12:34,709
commands in there and it will run the

357
00:12:29,970 --> 00:12:36,330
payload implant hidden as well and this

358
00:12:34,710 --> 00:12:37,710
is a very straightforward the list the

359
00:12:36,330 --> 00:12:39,450
list method is not supported with this

360
00:12:37,710 --> 00:12:41,210
one right now but again I plan on adding

361
00:12:39,450 --> 00:12:44,430
it

362
00:12:41,210 --> 00:12:46,050
the last persistence technique is going

363
00:12:44,430 --> 00:12:47,790
to be new window service again very

364
00:12:46,050 --> 00:12:50,130
common one pretty simple

365
00:12:47,790 --> 00:12:52,380
registers a new window service and it's

366
00:12:50,130 --> 00:12:53,520
gonna be set to automatically start upon

367
00:12:52,380 --> 00:12:56,010
boot and it's gonna be running and

368
00:12:53,520 --> 00:12:57,420
running as a system and with this

369
00:12:56,010 --> 00:12:59,430
technique kind of similar to the

370
00:12:57,420 --> 00:13:00,959
scheduled tasks and stuff you can list

371
00:12:59,430 --> 00:13:05,130
all windows services or you can list

372
00:13:00,960 --> 00:13:07,290
just a specific one alright time for the

373
00:13:05,130 --> 00:13:09,430
demo

374
00:13:07,290 --> 00:13:14,969
is there a particular technique anybody

375
00:13:09,430 --> 00:13:22,780
wants to see first good one

376
00:13:14,970 --> 00:13:23,800
back door okay you got it okay so let's

377
00:13:22,780 --> 00:13:24,880
go to task back door all right we had

378
00:13:23,800 --> 00:13:27,640
this privilege beacon right here on a

379
00:13:24,880 --> 00:13:29,740
double doors machine so what we're gonna

380
00:13:27,640 --> 00:13:31,660
do here is we're going we're going to

381
00:13:29,740 --> 00:13:38,740
list we're gonna list scheduled tasks

382
00:13:31,660 --> 00:13:40,000
that run a log on all right so we're

383
00:13:38,740 --> 00:13:43,080
gonna see we're just gonna choose just a

384
00:13:40,000 --> 00:13:46,090
random scheduled task the back door

385
00:13:43,080 --> 00:13:47,710
this service restart task log on you can

386
00:13:46,090 --> 00:13:49,210
see here it's got this initial action

387
00:13:47,710 --> 00:13:51,430
right here right so that's that's what

388
00:13:49,210 --> 00:13:52,360
it's it's scheduled to run right so now

389
00:13:51,430 --> 00:13:54,250
what we're gonna do is we're going to

390
00:13:52,360 --> 00:14:03,540
back to with a scheduled task to run our

391
00:13:54,250 --> 00:14:06,580
msbuild payload add that in there you

392
00:14:03,540 --> 00:14:08,319
see here it's alright it's got a task

393
00:14:06,580 --> 00:14:10,450
backdoor never know list that scheduled

394
00:14:08,320 --> 00:14:17,110
task out and you're gonna see the

395
00:14:10,450 --> 00:14:24,600
additional action that was added run

396
00:14:17,110 --> 00:14:26,770
that all right so you can see here right

397
00:14:24,600 --> 00:14:28,540
there's the additional scheduled tasks

398
00:14:26,770 --> 00:14:30,040
action the only thing we did was we just

399
00:14:28,540 --> 00:14:31,150
added an action to it everything else

400
00:14:30,040 --> 00:14:34,660
stayed the same with that scheduled

401
00:14:31,150 --> 00:14:36,160
tasks so defenders make sure that you

402
00:14:34,660 --> 00:14:39,939
are looking at more than just the the

403
00:14:36,160 --> 00:14:45,459
first action so then remove it very

404
00:14:39,940 --> 00:14:49,839
straight sorry so yeah so what it uses

405
00:14:45,460 --> 00:14:53,820
uses a dotnet library that is a wrapper

406
00:14:49,839 --> 00:14:53,820
for the schedule service comm object

407
00:14:55,980 --> 00:15:00,190
since here we removed the backdoor and

408
00:14:58,540 --> 00:15:03,240
then we're gonna do lists and you can

409
00:15:00,190 --> 00:15:12,280
see they're the original actions back

410
00:15:03,240 --> 00:15:13,420
all right let's go to key pass next so

411
00:15:12,280 --> 00:15:15,339
you can see here we have an unprivileged

412
00:15:13,420 --> 00:15:19,180
beacon right here again this does not

413
00:15:15,339 --> 00:15:20,860
require probes access I'm gonna open key

414
00:15:19,180 --> 00:15:23,530
pass database here with all my super

415
00:15:20,860 --> 00:15:26,230
secret passwords see your function just

416
00:15:23,530 --> 00:15:28,990
like normal so now what we're gonna do

417
00:15:26,230 --> 00:15:31,150
is we are going to backdoor this key

418
00:15:28,990 --> 00:15:32,380
pass configuration file first thing

419
00:15:31,150 --> 00:15:33,579
we're gonna do is we're going to use I

420
00:15:32,380 --> 00:15:35,560
mentioned the check command so it's

421
00:15:33,580 --> 00:15:38,140
gonna go through various checks to make

422
00:15:35,560 --> 00:15:39,160
sure that's we have the correct

423
00:15:38,140 --> 00:15:40,870
arguments we have the correct

424
00:15:39,160 --> 00:15:43,150
permissions make sure it is a key pass

425
00:15:40,870 --> 00:15:44,680
file in this instance making sure the

426
00:15:43,150 --> 00:15:46,569
key pass process isn't running because

427
00:15:44,680 --> 00:15:47,829
if the key pass process is running that

428
00:15:46,570 --> 00:15:49,630
config file is being used as I can't

429
00:15:47,830 --> 00:15:51,670
modify it so you can see here all the

430
00:15:49,630 --> 00:15:53,320
checks pass so we're gonna go ahead and

431
00:15:51,670 --> 00:15:58,300
add this persistence persistence

432
00:15:53,320 --> 00:16:01,000
technique and again what's going to

433
00:15:58,300 --> 00:16:02,979
happen is once we open the key pass

434
00:16:01,000 --> 00:16:04,540
database now it's going to execute our

435
00:16:02,980 --> 00:16:07,990
payload and we'll get a beacon and it's

436
00:16:04,540 --> 00:16:09,189
going to execute it all hidden so it's

437
00:16:07,990 --> 00:16:11,230
going so what it's going to do is it's

438
00:16:09,190 --> 00:16:14,770
going to create a backup of the original

439
00:16:11,230 --> 00:16:16,480
file and then it's going to modify the

440
00:16:14,770 --> 00:16:19,030
existing file so you can see here we

441
00:16:16,480 --> 00:16:20,380
have the capacity debase backdoored

442
00:16:19,030 --> 00:16:21,670
I just opened it everything is normal

443
00:16:20,380 --> 00:16:23,740
right nothing's popping up on the screen

444
00:16:21,670 --> 00:16:25,030
however our payload is executing the

445
00:16:23,740 --> 00:16:33,600
background and then you're gonna see our

446
00:16:25,030 --> 00:16:33,600
beacon come in there it is

447
00:16:34,770 --> 00:16:40,150
so then removing it very straightforward

448
00:16:38,709 --> 00:16:47,589
you're gonna specify the key pass

449
00:16:40,150 --> 00:16:51,490
configuration file remove method you're

450
00:16:47,589 --> 00:16:52,900
gonna remove it and what that will do

451
00:16:51,490 --> 00:16:54,880
that's going to take that back file

452
00:16:52,900 --> 00:16:58,260
restore it and then remove the the

453
00:16:54,880 --> 00:16:58,260
backdoor key pass configuration file

454
00:16:58,380 --> 00:17:04,000
let's go towards SVM all right so for

455
00:17:02,140 --> 00:17:06,429
this one I didn't have an actual SV and

456
00:17:04,000 --> 00:17:07,510
repo setup but it doesn't matter you

457
00:17:06,429 --> 00:17:08,679
know the fact that the clients trying to

458
00:17:07,510 --> 00:17:10,810
make the connection is what the trigger

459
00:17:08,679 --> 00:17:15,130
is so here we have an unprivileged

460
00:17:10,810 --> 00:17:16,810
beacon on H Potter's machine yes I like

461
00:17:15,130 --> 00:17:18,910
Harry Potter's you can tell from the the

462
00:17:16,810 --> 00:17:22,720
user name references so you can see here

463
00:17:18,910 --> 00:17:24,189
we're trying to do a SV on check out you

464
00:17:22,720 --> 00:17:25,150
know and again I don't have one set up

465
00:17:24,189 --> 00:17:25,480
but it's still trying to make that

466
00:17:25,150 --> 00:17:26,559
connects

467
00:17:25,480 --> 00:17:28,480
so it's functioning as normal right now

468
00:17:26,559 --> 00:17:31,149
right so now we're gonna have this

469
00:17:28,480 --> 00:17:32,620
tortoise SVN persistence and again we're

470
00:17:31,150 --> 00:17:37,480
gonna have an x QR msbuild payload and

471
00:17:32,620 --> 00:17:41,379
it's gonna be all hidden that

472
00:17:37,480 --> 00:17:43,440
persistence you see it's done now when

473
00:17:41,380 --> 00:17:45,490
we go back to use the Taurus SVN client

474
00:17:43,440 --> 00:17:46,750
you know just to check out again this

475
00:17:45,490 --> 00:17:48,549
could be anything it could be you're

476
00:17:46,750 --> 00:17:50,320
trying to do an SVN update commit

477
00:17:48,549 --> 00:17:51,549
doesn't matter any sort of action with

478
00:17:50,320 --> 00:17:53,409
that client to communicate with

479
00:17:51,549 --> 00:17:54,970
something is that's what the trigger is

480
00:17:53,410 --> 00:17:56,380
so right now we're trying to do a check

481
00:17:54,970 --> 00:17:59,740
out our payloads running in the

482
00:17:56,380 --> 00:18:03,940
background and then we're gonna see our

483
00:17:59,740 --> 00:18:05,320
beacon come in thinking what this is

484
00:18:03,940 --> 00:18:06,549
doing in the background here's our

485
00:18:05,320 --> 00:18:08,350
beacon with this doing a background is

486
00:18:06,549 --> 00:18:11,020
it's it's adding that to that hooks

487
00:18:08,350 --> 00:18:13,350
value registry key if you look in the

488
00:18:11,020 --> 00:18:15,820
code and actually on the the wiki page

489
00:18:13,350 --> 00:18:17,500
for this technique you'll see the exact

490
00:18:15,820 --> 00:18:22,840
I list out the exact registry key and

491
00:18:17,500 --> 00:18:24,580
value that it uses then to remove it

492
00:18:22,840 --> 00:18:26,470
very straightforward specify the

493
00:18:24,580 --> 00:18:37,090
technique of course SVN remove it and

494
00:18:26,470 --> 00:18:40,929
it's gone it's just gonna remove the

495
00:18:37,090 --> 00:18:42,010
trigger yes so the question was whenever

496
00:18:40,929 --> 00:18:44,530
you do the removed is removed the

497
00:18:42,010 --> 00:18:47,730
trigger and the payload and the answer

498
00:18:44,530 --> 00:18:47,730
that is just remove the trigger itself

499
00:18:48,600 --> 00:18:52,120
so we'll go over the registry here I

500
00:18:50,980 --> 00:18:54,340
talked about the environment variable

501
00:18:52,120 --> 00:18:59,020
trick so I do want to show that now so

502
00:18:54,340 --> 00:19:00,309
here we have an unprivileged beacon all

503
00:18:59,020 --> 00:19:04,270
right so we're gonna list out the HK so

504
00:19:00,309 --> 00:19:06,010
you run key right now you can see we're

505
00:19:04,270 --> 00:19:08,889
a list this out there's nothing in there

506
00:19:06,010 --> 00:19:12,700
right now so now what we're going to do

507
00:19:08,890 --> 00:19:14,740
is we're going to create a persistent

508
00:19:12,700 --> 00:19:15,700
sentry in the HKC run key but we're

509
00:19:14,740 --> 00:19:17,980
going to use the environment variable

510
00:19:15,700 --> 00:19:20,220
obfuscation as you can see here we're

511
00:19:17,980 --> 00:19:23,590
creating a value called Derby con and

512
00:19:20,220 --> 00:19:26,410
having it store the rms build command

513
00:19:23,590 --> 00:19:28,870
execution and we specify the - oh of the

514
00:19:26,410 --> 00:19:31,240
env so now when we list out this

515
00:19:28,870 --> 00:19:32,590
registry value our command and our

516
00:19:31,240 --> 00:19:33,580
argument specified is not going to be

517
00:19:32,590 --> 00:19:35,139
present

518
00:19:33,580 --> 00:19:37,899
what's gonna be present is the

519
00:19:35,140 --> 00:19:40,120
environment variable right and then the

520
00:19:37,900 --> 00:19:42,460
actual command and argument for example

521
00:19:40,120 --> 00:19:44,860
for something in HK see you it's stored

522
00:19:42,460 --> 00:19:46,930
in HK see you environment so therefore

523
00:19:44,860 --> 00:19:49,090
your commander argument is not actually

524
00:19:46,930 --> 00:19:54,130
to be present in there to kind of hide

525
00:19:49,090 --> 00:19:55,540
it a little bit so then to remove it

526
00:19:54,130 --> 00:19:56,410
again when you're if you add something

527
00:19:55,540 --> 00:19:58,480
with the environment of arrow

528
00:19:56,410 --> 00:20:01,270
obfuscation make sure when you're

529
00:19:58,480 --> 00:20:03,520
removing it you also specify the env

530
00:20:01,270 --> 00:20:06,160
because that is also going to remove

531
00:20:03,520 --> 00:20:08,590
that environment variable you can see

532
00:20:06,160 --> 00:20:12,190
here we're gonna do remove and specify

533
00:20:08,590 --> 00:20:13,240
the option of env and it's removed you

534
00:20:12,190 --> 00:20:23,140
see here we're going to list it

535
00:20:13,240 --> 00:20:25,660
and it will no longer be present here

536
00:20:23,140 --> 00:20:28,150
what time you guys I see for us see

537
00:20:25,660 --> 00:20:32,680
scheduled tasks Windows service start a

538
00:20:28,150 --> 00:20:38,620
folder a preference no preference I will

539
00:20:32,680 --> 00:20:41,440
do the scheduled tasks we have a

540
00:20:38,620 --> 00:20:43,149
question earlier he's asking is it using

541
00:20:41,440 --> 00:20:46,480
the win API for the scheduled tasks it

542
00:20:43,150 --> 00:20:48,190
is using a dotnet library that I

543
00:20:46,480 --> 00:20:50,650
referenced on the the github page that

544
00:20:48,190 --> 00:20:54,280
is a wrapper for the scheduled tasks

545
00:20:50,650 --> 00:20:56,110
calm object seen here we're going to

546
00:20:54,280 --> 00:20:58,030
create scheduled task called derbycon we

547
00:20:56,110 --> 00:20:59,979
have non-privileged beacon a soda Shasta

548
00:20:58,030 --> 00:21:01,389
not exist so we're gonna create a

549
00:20:59,980 --> 00:21:02,700
scheduled task called derbycon that's

550
00:21:01,390 --> 00:21:06,190
going to execute our msbuild payload

551
00:21:02,700 --> 00:21:08,800
we're specifying the frequency of daily

552
00:21:06,190 --> 00:21:10,270
again you don't need to because if you

553
00:21:08,800 --> 00:21:12,220
don't specify frequency is just gonna do

554
00:21:10,270 --> 00:21:14,610
it automatically if it daily see here we

555
00:21:12,220 --> 00:21:16,690
created the scheduled task

556
00:21:14,610 --> 00:21:20,860
there's no scheduled tasks so you can

557
00:21:16,690 --> 00:21:22,330
see it's set to run 10:57 a.m. and yeah

558
00:21:20,860 --> 00:21:23,649
that's all there is to right there I'm

559
00:21:22,330 --> 00:21:25,870
removing it's very straightforward

560
00:21:23,650 --> 00:21:32,290
you can specify scheduled tasks name

561
00:21:25,870 --> 00:21:34,239
remove and it's gone I have time for one

562
00:21:32,290 --> 00:21:38,110
more technique to go over the startup

563
00:21:34,240 --> 00:21:41,620
folder so again we have an approach

564
00:21:38,110 --> 00:21:42,610
beacon you're gonna specify first we're

565
00:21:41,620 --> 00:21:43,969
a list to see if there's anything in the

566
00:21:42,610 --> 00:21:45,769
startup folder

567
00:21:43,970 --> 00:21:49,250
I don't think I had anything on start

568
00:21:45,769 --> 00:21:50,179
folder for this one initially yep so

569
00:21:49,250 --> 00:21:56,659
there's nothing to start for too right

570
00:21:50,179 --> 00:21:58,490
now all right so now we're gonna add a

571
00:21:56,659 --> 00:22:00,169
link file called derbycon it's gonna go

572
00:21:58,490 --> 00:22:03,409
in the startup folder and we're gonna we

573
00:22:00,169 --> 00:22:04,789
want to execute our MS Bill payload just

574
00:22:03,409 --> 00:22:06,200
here it's give you the shot 256 hash

575
00:22:04,789 --> 00:22:17,990
gives you the full path to where it was

576
00:22:06,200 --> 00:22:20,360
created when you can list that out all

577
00:22:17,990 --> 00:22:33,259
right you see it right there it is we're

578
00:22:20,360 --> 00:22:42,529
gonna remove it maybe remove and that's

579
00:22:33,259 --> 00:22:44,299
all there is to it skin looks like a ran

580
00:22:42,529 --> 00:22:46,940
out of time if you have any questions

581
00:22:44,299 --> 00:22:48,649
feel free to hit me up on Twitter come

582
00:22:46,940 --> 00:22:51,049
talk to me afterwards out there I'd be

583
00:22:48,649 --> 00:22:52,610
happy to talk with you about it lastly

584
00:22:51,049 --> 00:22:54,110
just want to say thank you for coming my

585
00:22:52,610 --> 00:22:55,789
talk and also thank you to the entire

586
00:22:54,110 --> 00:22:58,779
derbycon staff and put on a great

587
00:22:55,789 --> 00:22:58,779
conference thank you

