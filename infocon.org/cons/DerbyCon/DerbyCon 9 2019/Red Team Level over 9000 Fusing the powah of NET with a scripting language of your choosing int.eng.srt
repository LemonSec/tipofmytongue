1
00:00:00,260 --> 00:00:06,240
okay that's not the only one okay so I'm

2
00:00:04,680 --> 00:00:08,039
gonna be talking I'm doing I'm talking

3
00:00:06,240 --> 00:00:11,040
about a lot of stuff real fast so

4
00:00:08,039 --> 00:00:13,829
everyone just bear with me mainly I'm

5
00:00:11,040 --> 00:00:15,360
gonna be talking about how to embed your

6
00:00:13,830 --> 00:00:16,800
own scripting language well maybe not

7
00:00:15,360 --> 00:00:18,869
your own if you do decide to build your

8
00:00:16,800 --> 00:00:20,640
own you could embed it but other third

9
00:00:18,869 --> 00:00:22,050
party and officially Microsoft supported

10
00:00:20,640 --> 00:00:24,180
scripting languages into c-sharp

11
00:00:22,050 --> 00:00:26,820
payloads in order to sort of shift back

12
00:00:24,180 --> 00:00:28,980
the paradigm back to like PowerShell

13
00:00:26,820 --> 00:00:30,779
style like attacks right because with

14
00:00:28,980 --> 00:00:31,800
the whole migration with to c-sharp the

15
00:00:30,779 --> 00:00:33,630
red team community if you're not

16
00:00:31,800 --> 00:00:36,170
familiar has been sort of migrating its

17
00:00:33,630 --> 00:00:39,840
tooling over to c-sharp for the last

18
00:00:36,170 --> 00:00:42,120
three two years or so but fairly recent

19
00:00:39,840 --> 00:00:44,070
and that there's a good well that's

20
00:00:42,120 --> 00:00:47,038
great and there are reasons for doing

21
00:00:44,070 --> 00:00:49,140
that which I'll be explaining too like

22
00:00:47,039 --> 00:00:50,879
it would be great if I didn't have to

23
00:00:49,140 --> 00:00:53,460
compile stuff all the time like

24
00:00:50,879 --> 00:00:54,660
server-side client-side like that now

25
00:00:53,460 --> 00:00:56,280
that's the beauty of using a dynamic

26
00:00:54,660 --> 00:00:57,538
language in a scripting language is that

27
00:00:56,280 --> 00:00:59,550
you don't have to compile stuff at all

28
00:00:57,539 --> 00:01:01,350
you just throw it at the end point and

29
00:00:59,550 --> 00:01:02,910
you're good to go so this is like my

30
00:01:01,350 --> 00:01:05,790
approach of sort of solving that

31
00:01:02,910 --> 00:01:09,689
operational problem because compiling

32
00:01:05,790 --> 00:01:12,299
stuff I personally hate it it especially

33
00:01:09,689 --> 00:01:13,830
on time limited engagements like it's it

34
00:01:12,299 --> 00:01:15,210
takes a lot of time especially if you

35
00:01:13,830 --> 00:01:17,490
haven't set up your like continuous

36
00:01:15,210 --> 00:01:19,649
integration pipelines and stuff so so

37
00:01:17,490 --> 00:01:21,210
this is my approach on that this is the

38
00:01:19,650 --> 00:01:22,680
obligatory Who am I slide my name is

39
00:01:21,210 --> 00:01:25,500
marchello I go by by bleeder on the

40
00:01:22,680 --> 00:01:27,479
tweet feed Twitter's I work for Black

41
00:01:25,500 --> 00:01:29,250
Hills InfoSec I've written a bunch of

42
00:01:27,479 --> 00:01:31,020
stuff over the course of the years which

43
00:01:29,250 --> 00:01:34,740
you can find that github link if if

44
00:01:31,020 --> 00:01:36,509
you're interested I mainly do just open

45
00:01:34,740 --> 00:01:39,899
source dev and red teaming at Black

46
00:01:36,509 --> 00:01:41,220
Hills so this is the agenda we're going

47
00:01:39,900 --> 00:01:42,710
to be going over today are we're gonna

48
00:01:41,220 --> 00:01:45,600
be covering some of the key motivations

49
00:01:42,710 --> 00:01:47,970
I'm gonna be talking about some some

50
00:01:45,600 --> 00:01:49,740
basic net framework concepts just to get

51
00:01:47,970 --> 00:01:50,640
everyone on the same page because in

52
00:01:49,740 --> 00:01:52,140
order to understand what I might be

53
00:01:50,640 --> 00:01:54,240
talking about and if you're not for me

54
00:01:52,140 --> 00:01:56,009
if you're not net developer you're gonna

55
00:01:54,240 --> 00:01:58,048
need to understand at least some basic

56
00:01:56,009 --> 00:02:01,020
concepts there were many covering like

57
00:01:58,049 --> 00:02:03,810
how to embed these scripting engines and

58
00:02:01,020 --> 00:02:06,840
some pros and cons to wit to each

59
00:02:03,810 --> 00:02:09,539
language that I've tried so far and then

60
00:02:06,840 --> 00:02:11,660
I'm gonna be hopefully demoing everyone

61
00:02:09,538 --> 00:02:14,040
start praying to the demo gods right now

62
00:02:11,660 --> 00:02:15,150
some pale abhi why payload

63
00:02:14,040 --> 00:02:16,500
examples we should bring your own

64
00:02:15,150 --> 00:02:19,790
interpreter payloads which is what I've

65
00:02:16,500 --> 00:02:24,599
started calling this class of payloads

66
00:02:19,790 --> 00:02:26,040
and after that we're going to be demoing

67
00:02:24,599 --> 00:02:28,950
silent Trinity I'm gonna be demoing

68
00:02:26,040 --> 00:02:31,319
sound Trinity and that's sort of my c2

69
00:02:28,950 --> 00:02:33,000
framework which I've been building for

70
00:02:31,319 --> 00:02:35,129
the last year so now that sort of tries

71
00:02:33,000 --> 00:02:36,390
to wrap it and like put a little nice

72
00:02:35,129 --> 00:02:39,060
little ribbon on like some of these

73
00:02:36,390 --> 00:02:41,429
concepts that I've I've been researching

74
00:02:39,060 --> 00:02:43,590
for the past year or so and then we're

75
00:02:41,430 --> 00:02:45,329
gonna be covering detection which is

76
00:02:43,590 --> 00:02:46,799
hard but it's getting better and better

77
00:02:45,329 --> 00:02:50,370
so that's a good that's a good thing and

78
00:02:46,799 --> 00:02:52,829
then questions and answers so like I

79
00:02:50,370 --> 00:02:54,989
said when I first opened up like the key

80
00:02:52,829 --> 00:02:56,849
motivation behind this really was just

81
00:02:54,989 --> 00:02:58,859
to like shift the paradigm back to

82
00:02:56,849 --> 00:03:00,209
PowerShell saddle-like attacks and at

83
00:02:58,859 --> 00:03:02,010
the time I really didn't know anything

84
00:03:00,209 --> 00:03:03,209
about dotnet I didn't know anything

85
00:03:02,010 --> 00:03:06,120
about c-sharp I didn't even know no

86
00:03:03,209 --> 00:03:08,909
coded c-sharp I just knew it existed it

87
00:03:06,120 --> 00:03:10,590
was a thing I did do some PowerShell

88
00:03:08,909 --> 00:03:14,608
stuff though so I you know I was coming

89
00:03:10,590 --> 00:03:16,590
from a fairly good spot and the main

90
00:03:14,609 --> 00:03:19,169
issue again like the main issue I had

91
00:03:16,590 --> 00:03:20,669
with all the c-sharp tooling was that it

92
00:03:19,169 --> 00:03:23,310
would it's compiled language it's not as

93
00:03:20,669 --> 00:03:26,099
flexible it really it really does take a

94
00:03:23,310 --> 00:03:27,930
lot more time to do stuff on a red team

95
00:03:26,099 --> 00:03:30,090
engagement and I really like scripting

96
00:03:27,930 --> 00:03:32,519
languages I also like developing weird

97
00:03:30,090 --> 00:03:33,780
stuff so when a concept comes out like

98
00:03:32,519 --> 00:03:35,250
when a new red teaming technique is

99
00:03:33,780 --> 00:03:37,260
discovered I like to take it and sort of

100
00:03:35,250 --> 00:03:40,049
like get weird with it and see what else

101
00:03:37,260 --> 00:03:41,489
you can do and again yeah it's just the

102
00:03:40,049 --> 00:03:43,319
shift the paradigm back to PowerShell

103
00:03:41,489 --> 00:03:44,729
like a stacks with all the attacks with

104
00:03:43,319 --> 00:03:48,358
all the flexibility that scripting

105
00:03:44,729 --> 00:03:49,680
languages give you so and this is where

106
00:03:48,359 --> 00:03:53,129
we're gonna have to start covering some

107
00:03:49,680 --> 00:03:54,510
basic net concepts because in order to

108
00:03:53,129 --> 00:03:56,129
understand why this is even possible in

109
00:03:54,510 --> 00:03:58,260
the first place you need to understand

110
00:03:56,129 --> 00:04:00,090
some basic concepts I won't get to in

111
00:03:58,260 --> 00:04:01,530
the weeds with this because I know it

112
00:04:00,090 --> 00:04:03,359
can get a little boring especially if

113
00:04:01,530 --> 00:04:05,280
you're not interested at all like dotnet

114
00:04:03,359 --> 00:04:07,379
development and all that stuff so but

115
00:04:05,280 --> 00:04:08,909
there like the dotnet assembly this is a

116
00:04:07,379 --> 00:04:09,840
fundamental thing that you need to know

117
00:04:08,909 --> 00:04:11,340
in order to understand what I'm going to

118
00:04:09,840 --> 00:04:13,530
be talking about Dinan assembly is just

119
00:04:11,340 --> 00:04:15,750
a single unit of execution that a lot

120
00:04:13,530 --> 00:04:19,168
that can be interpreted and executed in

121
00:04:15,750 --> 00:04:20,820
any dotnet language okay so what has a

122
00:04:19,168 --> 00:04:23,340
very interesting implications by the way

123
00:04:20,820 --> 00:04:25,229
but all you really need to know is that

124
00:04:23,340 --> 00:04:26,679
it can be interpreted and executed in

125
00:04:25,229 --> 00:04:28,930
any net language

126
00:04:26,680 --> 00:04:31,150
okay and if you're not familiar with

127
00:04:28,930 --> 00:04:33,639
c-sharp development or any dotnet

128
00:04:31,150 --> 00:04:35,320
development whatsoever that's another

129
00:04:33,639 --> 00:04:37,870
important thing by the way a lot of

130
00:04:35,320 --> 00:04:39,310
people associate C sharp with dotnet

131
00:04:37,870 --> 00:04:40,990
like when we need mean they here that

132
00:04:39,310 --> 00:04:43,360
night they automatically think c-sharp

133
00:04:40,990 --> 00:04:44,860
that's definitely not the case got net

134
00:04:43,360 --> 00:04:47,800
framework is literally just a set of

135
00:04:44,860 --> 00:04:49,419
tools that Microsoft gives you in order

136
00:04:47,800 --> 00:04:51,160
to build your own programming language

137
00:04:49,419 --> 00:04:52,210
so it's like tools and infrastructure

138
00:04:51,160 --> 00:04:53,560
that you can use to build your own

139
00:04:52,210 --> 00:04:56,080
programming language it's not

140
00:04:53,560 --> 00:04:58,750
necessarily tied to c-sharp it's just a

141
00:04:56,080 --> 00:05:00,758
it's basically just a literal firm

142
00:04:58,750 --> 00:05:03,340
framework that you can use and it makes

143
00:05:00,759 --> 00:05:04,930
things a lot easier to build a

144
00:05:03,340 --> 00:05:06,729
programming language I don't know if

145
00:05:04,930 --> 00:05:08,080
like if you are really interested in

146
00:05:06,729 --> 00:05:09,609
that net development the more you start

147
00:05:08,080 --> 00:05:11,139
researching this stuff the more you

148
00:05:09,610 --> 00:05:12,940
start realizing this is like sort of a

149
00:05:11,139 --> 00:05:15,220
marvel of engineering like the dotnet

150
00:05:12,940 --> 00:05:17,710
framework is amazing I'm not gonna lie

151
00:05:15,220 --> 00:05:20,199
and say if you're coming from like

152
00:05:17,710 --> 00:05:22,359
unmanaged languages like C++ so in that

153
00:05:20,199 --> 00:05:24,789
net we use managed and unmanaged to

154
00:05:22,360 --> 00:05:27,550
define managed met languages or anything

155
00:05:24,789 --> 00:05:31,240
that that in that that basically is tied

156
00:05:27,550 --> 00:05:32,949
to net and the CLR if you're coming from

157
00:05:31,240 --> 00:05:34,570
like C or C++ development it's also

158
00:05:32,949 --> 00:05:37,300
important for you to know that a dotnet

159
00:05:34,570 --> 00:05:39,250
assembly is what you get from just

160
00:05:37,300 --> 00:05:41,860
compiling any dotnet language in this

161
00:05:39,250 --> 00:05:43,720
case C sharp to an executable okay so

162
00:05:41,860 --> 00:05:45,669
you take your C sharp code you compile

163
00:05:43,720 --> 00:05:47,710
it with visual studio or msbuild or

164
00:05:45,669 --> 00:05:51,340
whatever and you get a dotnet assembly

165
00:05:47,710 --> 00:05:52,719
right but what's probably a little bit

166
00:05:51,340 --> 00:05:55,090
different from what you'd expect is that

167
00:05:52,720 --> 00:05:57,639
if you compile that same code to a DLL

168
00:05:55,090 --> 00:06:00,190
that's also a dotnet assembly and this

169
00:05:57,639 --> 00:06:01,090
is where things start getting a little

170
00:06:00,190 --> 00:06:03,669
bit different from what you'd expect

171
00:06:01,090 --> 00:06:07,388
from like a compiled from a unmanaged

172
00:06:03,669 --> 00:06:09,099
language and another also important

173
00:06:07,389 --> 00:06:11,020
thing to know is I'm gonna keep saying

174
00:06:09,099 --> 00:06:12,820
that and also I apologize if I keep

175
00:06:11,020 --> 00:06:14,639
saying net and framework all the time

176
00:06:12,820 --> 00:06:16,870
but in the talk like this it's kind of

177
00:06:14,639 --> 00:06:19,840
its kind of almost impossible to avoid

178
00:06:16,870 --> 00:06:21,729
saying that but it so Anna thought net

179
00:06:19,840 --> 00:06:25,299
assembly is not in the same format as a

180
00:06:21,729 --> 00:06:27,729
native executable in DLL okay so just

181
00:06:25,300 --> 00:06:29,500
because it has a execute that XE or DLL

182
00:06:27,729 --> 00:06:31,000
at the end of it as an extension it's a

183
00:06:29,500 --> 00:06:32,740
it's a completely different format I

184
00:06:31,000 --> 00:06:33,849
could do a like it could be a whole

185
00:06:32,740 --> 00:06:35,469
nother talk talking about like the

186
00:06:33,849 --> 00:06:36,810
format of dotnet assembly because that

187
00:06:35,469 --> 00:06:38,909
in itself is a

188
00:06:36,810 --> 00:06:40,620
hell of a rabbit hole to go on there but

189
00:06:38,910 --> 00:06:45,840
this is a very important distinction

190
00:06:40,620 --> 00:06:47,430
know about so there are a lot of dot net

191
00:06:45,840 --> 00:06:49,440
languages okay because like I said

192
00:06:47,430 --> 00:06:51,060
dotnet is just a set of infrastructure

193
00:06:49,440 --> 00:06:53,040
and tools that Microsoft gives you in

194
00:06:51,060 --> 00:06:56,100
order to build your own okay so there

195
00:06:53,040 --> 00:06:57,840
are a bunch of natively supported dotnet

196
00:06:56,100 --> 00:07:00,840
languages and there are also a bunch of

197
00:06:57,840 --> 00:07:02,429
third-party dotnet languages okay so on

198
00:07:00,840 --> 00:07:04,560
the screen here I got a C sharp

199
00:07:02,430 --> 00:07:06,960
powershell powershell if you didn't know

200
00:07:04,560 --> 00:07:08,130
is a dotnet language F sharp these are

201
00:07:06,960 --> 00:07:10,620
sort of and there's a bunch of others

202
00:07:08,130 --> 00:07:12,780
too like vb.net and mixed-mode

203
00:07:10,620 --> 00:07:15,660
assemblies which is that is just a

204
00:07:12,780 --> 00:07:17,669
nightmare but basically these are like

205
00:07:15,660 --> 00:07:19,350
the main three dotnet languages that

206
00:07:17,669 --> 00:07:21,719
Microsoft officially supports but

207
00:07:19,350 --> 00:07:23,010
because it's a set of tools and

208
00:07:21,720 --> 00:07:25,380
infrastructure that you can use to build

209
00:07:23,010 --> 00:07:27,930
your own languages there are a bunch of

210
00:07:25,380 --> 00:07:30,120
third party net languages as well like

211
00:07:27,930 --> 00:07:32,130
ironpython for example so ironpython is

212
00:07:30,120 --> 00:07:34,470
nothing more than a python

213
00:07:32,130 --> 00:07:37,260
implementation on top of the dotnet

214
00:07:34,470 --> 00:07:39,090
framework okay so see Python the normal

215
00:07:37,260 --> 00:07:41,460
Python write is built on C Python which

216
00:07:39,090 --> 00:07:43,799
is built on C ironpython is built on

217
00:07:41,460 --> 00:07:45,270
the.net framework okay so it's a

218
00:07:43,800 --> 00:07:47,580
completely different come two completely

219
00:07:45,270 --> 00:07:51,840
different beasts there's also boo lang

220
00:07:47,580 --> 00:07:56,550
so how many of you line before you guys

221
00:07:51,840 --> 00:07:58,440
don't count boule so there's boo lang

222
00:07:56,550 --> 00:08:00,990
which is also another dotnet language

223
00:07:58,440 --> 00:08:02,340
and I'm gonna be ranting and raving a

224
00:08:00,990 --> 00:08:07,289
lot about boolean because it's amazing

225
00:08:02,340 --> 00:08:09,630
and then iron Ruby if you want to build

226
00:08:07,289 --> 00:08:11,460
your post exploitation scripts in Ruby

227
00:08:09,630 --> 00:08:13,229
for some reason to interact with dotnet

228
00:08:11,460 --> 00:08:14,849
you can totally do it with iron Ruby I

229
00:08:13,229 --> 00:08:16,280
there's a bunch of others I actually

230
00:08:14,850 --> 00:08:19,740
have a list at the end of the slide deck

231
00:08:16,280 --> 00:08:21,809
about of all of the third-party that net

232
00:08:19,740 --> 00:08:23,669
languages that I've found so far and I

233
00:08:21,810 --> 00:08:26,580
keep finding now one like every other

234
00:08:23,669 --> 00:08:27,750
day now it's kind of ridiculous but yeah

235
00:08:26,580 --> 00:08:29,400
I think they're they're a bunch of third

236
00:08:27,750 --> 00:08:33,029
party and officially supported

237
00:08:29,400 --> 00:08:34,770
microsoft.net languages and and this is

238
00:08:33,029 --> 00:08:36,419
where we sort of like start tying all

239
00:08:34,770 --> 00:08:37,588
this stuff together right so remember

240
00:08:36,419 --> 00:08:39,150
when I said before the dot meant

241
00:08:37,589 --> 00:08:41,070
assembly single unit of execution that

242
00:08:39,150 --> 00:08:42,838
any dotnet framework and any.net

243
00:08:41,070 --> 00:08:45,180
language can interpret and execute what

244
00:08:42,839 --> 00:08:47,220
that also means is that these languages

245
00:08:45,180 --> 00:08:49,339
so because of that these languages are

246
00:08:47,220 --> 00:08:51,470
all interoperable with each other

247
00:08:49,340 --> 00:08:53,390
okay so what this means is that the

248
00:08:51,470 --> 00:08:56,300
dotnet framework is basically the

249
00:08:53,390 --> 00:08:57,770
underlying thing that ties all of these

250
00:08:56,300 --> 00:08:59,030
languages together so if you can do it

251
00:08:57,770 --> 00:09:00,319
in ironpython you could do it in

252
00:08:59,030 --> 00:09:02,060
PowerShell if you can do it in

253
00:09:00,320 --> 00:09:03,860
PowerShell you can do it in ironruby so

254
00:09:02,060 --> 00:09:06,739
on and so forth and they all have native

255
00:09:03,860 --> 00:09:08,600
access 2000n api's so the reason why

256
00:09:06,740 --> 00:09:10,280
PowerShell like for attackers and

257
00:09:08,600 --> 00:09:12,260
defenders and sis admins is so great

258
00:09:10,280 --> 00:09:13,100
because that net framework tightly

259
00:09:12,260 --> 00:09:15,770
integrated with the Windows operating

260
00:09:13,100 --> 00:09:17,450
system from from an offensive

261
00:09:15,770 --> 00:09:20,480
perspective you can do the same thing in

262
00:09:17,450 --> 00:09:23,450
PowerShell in ironpython

263
00:09:20,480 --> 00:09:25,670
or boolite or ironruby so this is like

264
00:09:23,450 --> 00:09:27,260
this is why I think this is a very

265
00:09:25,670 --> 00:09:29,390
interesting topic personally just

266
00:09:27,260 --> 00:09:31,610
because like you can do everything that

267
00:09:29,390 --> 00:09:33,830
you can do a c-sharp for example only in

268
00:09:31,610 --> 00:09:34,850
a scripting language without having all

269
00:09:33,830 --> 00:09:36,260
of the overhead of setting up a

270
00:09:34,850 --> 00:09:38,030
development environment and that kind of

271
00:09:36,260 --> 00:09:40,750
thing so this is this is the this is

272
00:09:38,030 --> 00:09:42,829
really is the meat of the talk okay and

273
00:09:40,750 --> 00:09:44,530
again right from a tradecraft and

274
00:09:42,830 --> 00:09:47,720
operational perspective the reason why

275
00:09:44,530 --> 00:09:50,900
c-sharp was chosen as like the jumping

276
00:09:47,720 --> 00:09:52,490
ground for like for for basically taking

277
00:09:50,900 --> 00:09:55,120
all the offensive PowerShell stuff and

278
00:09:52,490 --> 00:09:57,770
moving it over the c-sharp was because

279
00:09:55,120 --> 00:09:59,330
pi from if you're a PowerShell developer

280
00:09:57,770 --> 00:10:02,449
you'll find yourself somewhat at home in

281
00:09:59,330 --> 00:10:04,610
c-sharp and also because of the

282
00:10:02,450 --> 00:10:06,740
reflective capabilities of C sharp and

283
00:10:04,610 --> 00:10:07,880
any dotnet language really and all of

284
00:10:06,740 --> 00:10:10,310
the tradecraft

285
00:10:07,880 --> 00:10:11,840
really all the tradecraft so far really

286
00:10:10,310 --> 00:10:14,900
comes down to this single little

287
00:10:11,840 --> 00:10:17,270
function that we use on basically any

288
00:10:14,900 --> 00:10:18,949
red teaming engagement and all the tools

289
00:10:17,270 --> 00:10:21,050
that we use assembly that load assembly

290
00:10:18,950 --> 00:10:23,570
that load is magical because this thing

291
00:10:21,050 --> 00:10:26,599
you throw at a byte array of a dotnet

292
00:10:23,570 --> 00:10:28,220
assembly right and it'll just completely

293
00:10:26,600 --> 00:10:29,750
just take it and say yeah that's that's

294
00:10:28,220 --> 00:10:31,430
great I'll load it into memory and now

295
00:10:29,750 --> 00:10:35,300
you all of a sudden you have access to

296
00:10:31,430 --> 00:10:37,040
all of the code that you wrote in your

297
00:10:35,300 --> 00:10:38,390
net assembly and remember what I said

298
00:10:37,040 --> 00:10:40,430
before right how do you get dotnet

299
00:10:38,390 --> 00:10:44,540
assembly you just compile your c-sharp

300
00:10:40,430 --> 00:10:48,439
code into a dll and executable okay so

301
00:10:44,540 --> 00:10:50,810
what that means is go deeper that's what

302
00:10:48,440 --> 00:10:54,440
it means no nevermind so what that means

303
00:10:50,810 --> 00:10:56,479
is that we can basically take any dotnet

304
00:10:54,440 --> 00:10:58,700
assembly throw it at assembly that load

305
00:10:56,480 --> 00:11:01,370
and I'm just load it for us and what

306
00:10:58,700 --> 00:11:03,620
that means is basically we have a native

307
00:11:01,370 --> 00:11:05,870
with reflective DLL and X

308
00:11:03,620 --> 00:11:07,880
suitable capabilities reflective

309
00:11:05,870 --> 00:11:10,970
injection near dll and executable

310
00:11:07,880 --> 00:11:13,279
capabilities in a language by default so

311
00:11:10,970 --> 00:11:15,110
that's kind of crazy and that's why C

312
00:11:13,279 --> 00:11:18,140
sharp and net languages from an

313
00:11:15,110 --> 00:11:19,570
operational perspective or are so sought

314
00:11:18,140 --> 00:11:22,069
after I guess for lack of a better term

315
00:11:19,570 --> 00:11:23,510
because of this built-in functionality

316
00:11:22,070 --> 00:11:25,160
that allows you to basically just do

317
00:11:23,510 --> 00:11:27,439
reflective DLL injection and reflective

318
00:11:25,160 --> 00:11:31,730
P injection into the language okay

319
00:11:27,440 --> 00:11:33,860
and again like another reason why we

320
00:11:31,730 --> 00:11:36,760
transitioned from powershell c-sharp is

321
00:11:33,860 --> 00:11:38,839
because as of very recently all of the

322
00:11:36,760 --> 00:11:40,880
powershell defenses were built into the

323
00:11:38,839 --> 00:11:43,430
runtime to powershell runtime itself

324
00:11:40,880 --> 00:11:45,589
right there weren't built into the

325
00:11:43,430 --> 00:11:47,900
underlying net framework so what that

326
00:11:45,589 --> 00:11:50,210
means is that all you have to do to get

327
00:11:47,900 --> 00:11:51,410
around all of the issues with AM Z and

328
00:11:50,210 --> 00:11:53,420
Script blog logging transcription

329
00:11:51,410 --> 00:11:55,130
logging and module level lying and all

330
00:11:53,420 --> 00:11:56,750
that stuff all you really need to do is

331
00:11:55,130 --> 00:11:58,939
just jump to another dotnet language

332
00:11:56,750 --> 00:12:01,310
right because once you jump to another

333
00:11:58,940 --> 00:12:03,560
that--let language you won't have any of

334
00:12:01,310 --> 00:12:05,119
those protections built in now Microsoft

335
00:12:03,560 --> 00:12:07,219
actually has released dotnet

336
00:12:05,120 --> 00:12:09,440
four-point-eight recently dotnet 4.8 has

337
00:12:07,220 --> 00:12:11,839
built in MZ support okay

338
00:12:09,440 --> 00:12:12,860
so what that means is that some of the

339
00:12:11,839 --> 00:12:14,660
c-sharp tradecraft

340
00:12:12,860 --> 00:12:16,160
that we've been using so far is probably

341
00:12:14,660 --> 00:12:16,490
not gonna be as effective as it was

342
00:12:16,160 --> 00:12:20,510
before

343
00:12:16,490 --> 00:12:23,120
however I have found that the actual

344
00:12:20,510 --> 00:12:25,550
update to get dotnet 4.8 won't actually

345
00:12:23,120 --> 00:12:26,690
but it'll basically dot every point you

346
00:12:25,550 --> 00:12:29,779
only get that in for pointing if you

347
00:12:26,690 --> 00:12:31,940
download a new image from Microsoft comm

348
00:12:29,779 --> 00:12:33,650
as of right now I've found that it's

349
00:12:31,940 --> 00:12:37,310
really hard to actually get that update

350
00:12:33,650 --> 00:12:39,410
on previous with Windows 10 builds but I

351
00:12:37,310 --> 00:12:40,880
might be wrong and in fact someone

352
00:12:39,410 --> 00:12:46,939
please correct me on this but I just

353
00:12:40,880 --> 00:12:50,000
from my experience so basically we can

354
00:12:46,940 --> 00:12:51,650
bypass all of the PowerShell protections

355
00:12:50,000 --> 00:12:55,130
all of that stuff just by jumping to

356
00:12:51,650 --> 00:12:56,480
another net language okay and so far we

357
00:12:55,130 --> 00:12:59,089
the red teaming community has jumped to

358
00:12:56,480 --> 00:13:00,650
c-sharp but the meat of this talk is

359
00:12:59,089 --> 00:13:03,320
what what happens if we jump to

360
00:13:00,650 --> 00:13:05,810
ironpython gulang ironruby

361
00:13:03,320 --> 00:13:07,640
right so we can take all we can

362
00:13:05,810 --> 00:13:09,020
basically do everything that we can do

363
00:13:07,640 --> 00:13:10,760
in c-sharp only in a scripting language

364
00:13:09,020 --> 00:13:13,610
and not have to compile stuff all the

365
00:13:10,760 --> 00:13:15,829
time and this is what leads led me down

366
00:13:13,610 --> 00:13:17,020
this entire rabbit hole of trying to

367
00:13:15,829 --> 00:13:19,120
embed different interpret

368
00:13:17,020 --> 00:13:21,610
in different engines in to.net languages

369
00:13:19,120 --> 00:13:22,960
okay and yeah this is this is gonna be

370
00:13:21,610 --> 00:13:23,950
weird it's gonna be really weird so

371
00:13:22,960 --> 00:13:28,150
we're gonna we're gonna make some weird

372
00:13:23,950 --> 00:13:31,300
 right now so believe it or not

373
00:13:28,150 --> 00:13:32,800
you've been doing a form of what I'm

374
00:13:31,300 --> 00:13:34,870
going to be talking about whether

375
00:13:32,800 --> 00:13:39,400
probably whether you knew it or not and

376
00:13:34,870 --> 00:13:41,200
tools like NP s power line or in pone

377
00:13:39,400 --> 00:13:45,449
shell-like all of these tools basically

378
00:13:41,200 --> 00:13:49,390
took the PowerShell runtime right and

379
00:13:45,450 --> 00:13:50,650
embedded it in c-sharp so as a red

380
00:13:49,390 --> 00:13:52,780
teamer a pen test so you've probably

381
00:13:50,650 --> 00:13:55,240
done this more than once already without

382
00:13:52,780 --> 00:13:56,380
even knowing so the only thing so it's

383
00:13:55,240 --> 00:13:57,460
not what I'm talking about it really

384
00:13:56,380 --> 00:13:59,410
isn't a novel concept

385
00:13:57,460 --> 00:14:00,640
the only thing somewhat new what about

386
00:13:59,410 --> 00:14:01,959
what I'm talking about is that well

387
00:14:00,640 --> 00:14:03,730
instead of PowerShell what happens if

388
00:14:01,960 --> 00:14:06,100
you just embed ironpython in it right

389
00:14:03,730 --> 00:14:10,120
that's what I'm talking about and from

390
00:14:06,100 --> 00:14:12,820
an OPSEC perspective this also has the

391
00:14:10,120 --> 00:14:14,200
downside of especially like you can take

392
00:14:12,820 --> 00:14:16,090
c-sharp code and also embedded in

393
00:14:14,200 --> 00:14:17,980
PowerShell by the way just so like you

394
00:14:16,090 --> 00:14:21,190
can do the reverse as well and if you do

395
00:14:17,980 --> 00:14:23,470
do that though if you don't mess around

396
00:14:21,190 --> 00:14:25,120
with like omit api's and all that stuff

397
00:14:23,470 --> 00:14:27,460
which is basically just writing code

398
00:14:25,120 --> 00:14:30,790
without actually writing code it's it's

399
00:14:27,460 --> 00:14:32,380
a really weird feature net it'll

400
00:14:30,790 --> 00:14:34,329
basically drop stuff to this so if you

401
00:14:32,380 --> 00:14:36,220
embed C sharp and PowerShell and call

402
00:14:34,330 --> 00:14:38,670
add type it'll automatically compile

403
00:14:36,220 --> 00:14:41,680
that on the fly but there's an object

404
00:14:38,670 --> 00:14:43,750
that I guess pawn which basically drops

405
00:14:41,680 --> 00:14:45,310
that file to this so that that's sort of

406
00:14:43,750 --> 00:14:47,230
a thing that you should keep in mind as

407
00:14:45,310 --> 00:14:50,650
well if you do decide to embed C sharp

408
00:14:47,230 --> 00:14:53,410
and PowerShell so there are some common

409
00:14:50,650 --> 00:14:56,199
problems slash patterns that you'll run

410
00:14:53,410 --> 00:14:58,390
into when embedding this stuff the main

411
00:14:56,200 --> 00:14:59,800
issue is that obviously it's a

412
00:14:58,390 --> 00:15:02,560
third-party language so the deal of

413
00:14:59,800 --> 00:15:04,990
the.net assemblies required to actually

414
00:15:02,560 --> 00:15:07,119
get the compiler or interpreter whatever

415
00:15:04,990 --> 00:15:10,090
the the programming language calls it

416
00:15:07,120 --> 00:15:11,410
running those dll's are not built into

417
00:15:10,090 --> 00:15:14,950
Windows obviously right so that's that's

418
00:15:11,410 --> 00:15:18,699
a problem we're gonna need to solve and

419
00:15:14,950 --> 00:15:21,220
also your are going to need to actually

420
00:15:18,700 --> 00:15:22,930
resolve those at runtime so like when

421
00:15:21,220 --> 00:15:25,120
you start up your PowerShell script that

422
00:15:22,930 --> 00:15:27,339
embeds the bulan compiler you're going

423
00:15:25,120 --> 00:15:29,200
to somehow need to resolve those deals

424
00:15:27,340 --> 00:15:30,880
that run time to tell PowerShell hey you

425
00:15:29,200 --> 00:15:32,560
know these deals that you need or

426
00:15:30,880 --> 00:15:35,110
here right and there are ways of doing

427
00:15:32,560 --> 00:15:36,459
that I'm not going to go real deep into

428
00:15:35,110 --> 00:15:37,750
this because again like I don't want to

429
00:15:36,460 --> 00:15:40,960
bore you with just like dotnet

430
00:15:37,750 --> 00:15:42,970
development but the main way of doing it

431
00:15:40,960 --> 00:15:44,590
is calling a SEM if you're in PowerShell

432
00:15:42,970 --> 00:15:47,170
it's just calling assembly that load in

433
00:15:44,590 --> 00:15:48,940
PowerShell and again that's because

434
00:15:47,170 --> 00:15:51,310
PowerShell can interact with the.net

435
00:15:48,940 --> 00:15:53,230
framework can do the same thing as G

436
00:15:51,310 --> 00:15:55,390
sharp does and vice versa

437
00:15:53,230 --> 00:15:57,280
if you're in C sharp you're gonna want

438
00:15:55,390 --> 00:16:00,430
to hook the app domain assembly resolve

439
00:15:57,280 --> 00:16:02,740
event because the main reason for doing

440
00:16:00,430 --> 00:16:06,819
this this event basically allows C sharp

441
00:16:02,740 --> 00:16:09,100
to know where to go get these assemblies

442
00:16:06,820 --> 00:16:11,440
essentially so you can put any logic of

443
00:16:09,100 --> 00:16:13,120
yours in that event and now all of a

444
00:16:11,440 --> 00:16:15,460
sudden when you execute your C sharp

445
00:16:13,120 --> 00:16:17,950
payload and C sharp tries to resolve

446
00:16:15,460 --> 00:16:19,690
those assemblies it'll just execute your

447
00:16:17,950 --> 00:16:21,730
logic so you can say hey if you don't

448
00:16:19,690 --> 00:16:23,740
find these deals on this or in your

449
00:16:21,730 --> 00:16:25,420
current directory go download from the

450
00:16:23,740 --> 00:16:27,490
internet for my server for example right

451
00:16:25,420 --> 00:16:31,990
so that that's a it's a really very very

452
00:16:27,490 --> 00:16:33,310
powerful feature so the first thing that

453
00:16:31,990 --> 00:16:35,290
we're gonna look at and the first one

454
00:16:33,310 --> 00:16:38,319
that I took a look at is ironpython

455
00:16:35,290 --> 00:16:41,110
and this is what started this whole this

456
00:16:38,320 --> 00:16:42,640
whole rabbit hole so ironpython to you

457
00:16:41,110 --> 00:16:45,070
again it's a python implementation tom

458
00:16:42,640 --> 00:16:45,699
a.net framework the only problem with

459
00:16:45,070 --> 00:16:48,460
ironpython

460
00:16:45,700 --> 00:16:50,440
is it doesn't really it's sort of it

461
00:16:48,460 --> 00:16:52,330
supports p invoke soap invoke it

462
00:16:50,440 --> 00:16:56,230
basically is what allows you to

463
00:16:52,330 --> 00:16:57,340
interrupt with native windows api calls

464
00:16:56,230 --> 00:16:59,200
so and from an attackers perspective

465
00:16:57,340 --> 00:17:01,630
this is awesome because it allows us to

466
00:16:59,200 --> 00:17:04,000
inject shell code allows us to do all of

467
00:17:01,630 --> 00:17:05,530
this stuff that we do on almost every

468
00:17:04,000 --> 00:17:06,730
engagement right and inject me me cats

469
00:17:05,530 --> 00:17:08,859
and memory all that kind of stuff right

470
00:17:06,730 --> 00:17:11,890
so the the problem with I'm Python

471
00:17:08,859 --> 00:17:14,560
though is that it does support Teen

472
00:17:11,890 --> 00:17:17,319
Vogue but when you try to do P invoke in

473
00:17:14,560 --> 00:17:20,260
a embedded ironpython engine in memory

474
00:17:17,319 --> 00:17:22,119
that module breaks so if you're running

475
00:17:20,260 --> 00:17:23,920
arm Python in memory and try to do P

476
00:17:22,119 --> 00:17:26,379
invoke just everything it just throws up

477
00:17:23,920 --> 00:17:28,240
on you like it it just decides not to

478
00:17:26,380 --> 00:17:31,390
work anymore and so that was a big issue

479
00:17:28,240 --> 00:17:34,510
and I'm sort of a Python guy and I was

480
00:17:31,390 --> 00:17:36,490
really sad when I when I first ran into

481
00:17:34,510 --> 00:17:38,770
this problem I actually found like three

482
00:17:36,490 --> 00:17:40,210
or four bugs and ironpython as in like

483
00:17:38,770 --> 00:17:43,210
like bugs not like security

484
00:17:40,210 --> 00:17:44,090
vulnerabilities just by developing this

485
00:17:43,210 --> 00:17:46,460
kind of stuff so

486
00:17:44,090 --> 00:17:49,040
yeah it aren't Python is definitely like

487
00:17:46,460 --> 00:17:52,310
it's not as streamlined as as you'd

488
00:17:49,040 --> 00:17:54,020
expect so all of these code samples are

489
00:17:52,310 --> 00:17:56,240
hosted that I'm about to show you are

490
00:17:54,020 --> 00:17:57,560
hosted on that git repo so if you want

491
00:17:56,240 --> 00:18:01,940
to follow along or look at it later

492
00:17:57,560 --> 00:18:02,870
definitely go ahead so the main the the

493
00:18:01,940 --> 00:18:05,690
one that I'm going to be showing you is

494
00:18:02,870 --> 00:18:08,659
invoke ironpython that PS one so this is

495
00:18:05,690 --> 00:18:11,060
embedding the arm Python compiler within

496
00:18:08,660 --> 00:18:13,730
PowerShell and executing Python through

497
00:18:11,060 --> 00:18:15,679
that okay on that rep although there's

498
00:18:13,730 --> 00:18:18,830
also a sharp snake which I thought was

499
00:18:15,680 --> 00:18:22,160
cute that basically embeds the arm

500
00:18:18,830 --> 00:18:24,409
Python compiler within a c-sharp binary

501
00:18:22,160 --> 00:18:26,600
okay and ironpython requires for dotnet

502
00:18:24,410 --> 00:18:29,080
assemblies to run two of which are from

503
00:18:26,600 --> 00:18:31,219
Microsoft they're not sign unfortunately

504
00:18:29,080 --> 00:18:33,649
MS Microsoft rip ting in Microsoft

505
00:18:31,220 --> 00:18:36,020
dynamic these two are used by ironpython

506
00:18:33,650 --> 00:18:37,790
to access the DLR which is basically a

507
00:18:36,020 --> 00:18:40,700
feature and dotnet that allows you to

508
00:18:37,790 --> 00:18:42,320
actually build scripting languages and

509
00:18:40,700 --> 00:18:43,760
then our Python and arm Python modules

510
00:18:42,320 --> 00:18:46,970
give you access to yarn Python runtime

511
00:18:43,760 --> 00:18:48,500
and modules respectively right so let's

512
00:18:46,970 --> 00:18:53,300
start praying to the gamma demo gods

513
00:18:48,500 --> 00:18:54,860
here I have my VM there really isn't a

514
00:18:53,300 --> 00:19:00,020
lot that could go wrong but now I

515
00:18:54,860 --> 00:19:01,250
probably jinxed it so I have my iron

516
00:19:00,020 --> 00:19:02,629
Python script here so this is a

517
00:19:01,250 --> 00:19:05,960
PowerShell script right can you see that

518
00:19:02,630 --> 00:19:09,320
is it fun too small too big okay sweet I

519
00:19:05,960 --> 00:19:11,480
have a PowerShell script here and what

520
00:19:09,320 --> 00:19:13,399
we're doing is we're importing just the

521
00:19:11,480 --> 00:19:14,450
print function but we're also take a

522
00:19:13,400 --> 00:19:16,670
look at this we're also importing

523
00:19:14,450 --> 00:19:19,220
systems Annette so we have access to the

524
00:19:16,670 --> 00:19:22,430
CLR write to all of the windows API when

525
00:19:19,220 --> 00:19:24,140
ap is in Python itself this is just a

526
00:19:22,430 --> 00:19:26,090
really really simple example just to

527
00:19:24,140 --> 00:19:29,540
give you and just to make you understand

528
00:19:26,090 --> 00:19:33,020
but and then we're printing hello from

529
00:19:29,540 --> 00:19:33,980
ironpython these are the four DLLs that

530
00:19:33,020 --> 00:19:35,450
I was talking about these are the four

531
00:19:33,980 --> 00:19:37,820
net assemblies that allow you to

532
00:19:35,450 --> 00:19:40,550
actually spin up the arm Python compiler

533
00:19:37,820 --> 00:19:43,310
add these this is the function that

534
00:19:40,550 --> 00:19:45,200
loads those assemblies right and that

535
00:19:43,310 --> 00:19:46,730
there's just some cruft there that just

536
00:19:45,200 --> 00:19:48,650
makes everything a little bit nicer and

537
00:19:46,730 --> 00:19:49,940
then this is where the magic happens so

538
00:19:48,650 --> 00:19:51,620
recall it we're once we load those

539
00:19:49,940 --> 00:19:54,050
assemblies and we now have access to

540
00:19:51,620 --> 00:19:55,879
ironpython hosting that Python create

541
00:19:54,050 --> 00:19:56,440
engine so this is what actually spins up

542
00:19:55,880 --> 00:19:59,920
the Python

543
00:19:56,440 --> 00:20:01,480
and then we can set variables in the

544
00:19:59,920 --> 00:20:03,580
engine itself so we can actually set

545
00:20:01,480 --> 00:20:06,370
like global variables directly inside

546
00:20:03,580 --> 00:20:07,870
the ironpython engine and then after

547
00:20:06,370 --> 00:20:10,899
that we're just executing the embedded

548
00:20:07,870 --> 00:20:15,489
script okay so if we if I do load this

549
00:20:10,900 --> 00:20:17,350
up and there you go

550
00:20:15,490 --> 00:20:20,170
beginning of the file see I chased it I

551
00:20:17,350 --> 00:20:22,780
knew it let's try that let's try to go

552
00:20:20,170 --> 00:20:28,260
with this actually here on the flight

553
00:20:22,780 --> 00:20:33,310
coding let's see if I do this import

554
00:20:28,260 --> 00:20:43,090
system and then what we're gonna do here

555
00:20:33,310 --> 00:20:46,240
is we're just gonna do fine I look for

556
00:20:43,090 --> 00:20:50,490
my Python and this is not kind of done

557
00:20:46,240 --> 00:20:50,490
it there you go

558
00:20:50,610 --> 00:20:56,500
all right maybe not console is not

559
00:20:53,920 --> 00:20:58,600
defined well that's great okay well yeah

560
00:20:56,500 --> 00:21:03,640
see I junk stit the next one will work

561
00:20:58,600 --> 00:21:05,350
though I tried it but yeah so it so this

562
00:21:03,640 --> 00:21:07,930
is so this is this is very interesting

563
00:21:05,350 --> 00:21:09,879
if if but the one on the github rep will

564
00:21:07,930 --> 00:21:10,840
work so trust me on that one but this is

565
00:21:09,880 --> 00:21:14,650
very interesting for a number of reasons

566
00:21:10,840 --> 00:21:18,310
one is that there if you do embed these

567
00:21:14,650 --> 00:21:20,440
languages in PowerShell what happens is

568
00:21:18,310 --> 00:21:22,540
that the the powershell protections

569
00:21:20,440 --> 00:21:26,410
really like all the MZ stuff really

570
00:21:22,540 --> 00:21:29,409
doesn't have any insight into the actual

571
00:21:26,410 --> 00:21:31,990
Python code that you're executing okay

572
00:21:29,410 --> 00:21:34,090
and that's because once you embed the

573
00:21:31,990 --> 00:21:37,990
engine and actually throw source code at

574
00:21:34,090 --> 00:21:39,520
it like the MZ and all this script block

575
00:21:37,990 --> 00:21:41,380
log and transcription logging doesn't

576
00:21:39,520 --> 00:21:43,000
have any insight into the iearnt Python

577
00:21:41,380 --> 00:21:44,950
code because it's just it's just a layer

578
00:21:43,000 --> 00:21:46,780
deeper right it's like making that

579
00:21:44,950 --> 00:21:47,350
transition automatically to another net

580
00:21:46,780 --> 00:21:49,570
language

581
00:21:47,350 --> 00:21:52,889
so all of those protections go away and

582
00:21:49,570 --> 00:21:52,889
I think we have a question over there

583
00:21:56,670 --> 00:21:59,820
yeah

584
00:21:58,230 --> 00:22:11,640
would probably work yes you could try

585
00:21:59,820 --> 00:22:13,790
that you're not wrong system hey hey fix

586
00:22:11,640 --> 00:22:13,790
it

587
00:22:16,880 --> 00:22:25,620
thank you random citizen thank you

588
00:22:23,610 --> 00:22:28,799
appreciate it thank you it's it's hard

589
00:22:25,620 --> 00:22:30,840
to code and present at the same time so

590
00:22:28,799 --> 00:22:34,230
there you go so that works and we got

591
00:22:30,840 --> 00:22:38,668
our little that I just closed fantastic

592
00:22:34,230 --> 00:22:41,309
but you saw it get executed and we had

593
00:22:38,669 --> 00:22:42,929
executed and we and we got we got we got

594
00:22:41,309 --> 00:22:45,330
it was fine it was all good okay so

595
00:22:42,929 --> 00:22:47,309
that's ironpython like I said it's not

596
00:22:45,330 --> 00:22:50,189
from a this is the one that I initially

597
00:22:47,309 --> 00:22:51,720
started with and it's not that from a

598
00:22:50,190 --> 00:22:53,610
trade crafts perspective it's great but

599
00:22:51,720 --> 00:22:55,470
it because of the P invoke issue that I

600
00:22:53,610 --> 00:22:59,219
talked about it's not that great for

601
00:22:55,470 --> 00:23:00,870
operational trade craft so boo lang and

602
00:22:59,220 --> 00:23:03,120
this is where stuff gets interesting

603
00:23:00,870 --> 00:23:04,739
okay so boo Lang if you haven't checked

604
00:23:03,120 --> 00:23:06,928
it out you should because it's at the

605
00:23:04,740 --> 00:23:08,940
wiki by the way is amazing originally it

606
00:23:06,929 --> 00:23:10,860
was built I just found this out at Def

607
00:23:08,940 --> 00:23:12,059
Con actually someone actually came up

608
00:23:10,860 --> 00:23:14,189
and actually told me the reason why

609
00:23:12,059 --> 00:23:15,840
bulan was created and that's because it

610
00:23:14,190 --> 00:23:18,150
was built for the unity engine so before

611
00:23:15,840 --> 00:23:19,649
the Unity game engine originally was

612
00:23:18,150 --> 00:23:21,660
built for that so that you can script

613
00:23:19,650 --> 00:23:23,280
within the Unity game engine I had no

614
00:23:21,660 --> 00:23:26,820
clue I just used it for malware all this

615
00:23:23,280 --> 00:23:28,980
time but that that's apparently the

616
00:23:26,820 --> 00:23:30,360
original purpose of it and it's sort of

617
00:23:28,980 --> 00:23:31,860
like a lovechild between Python and C

618
00:23:30,360 --> 00:23:34,799
sharp so if you're if you if you're

619
00:23:31,860 --> 00:23:36,299
familiar with Python it way you'll be at

620
00:23:34,799 --> 00:23:37,379
home and if you see sharp you'll be at

621
00:23:36,299 --> 00:23:39,570
home because it's got some of the

622
00:23:37,380 --> 00:23:42,270
constructs with both languages it's

623
00:23:39,570 --> 00:23:44,189
heavily inspired by Python and the great

624
00:23:42,270 --> 00:23:46,500
thing about fooling though is that you

625
00:23:44,190 --> 00:23:49,950
can call native functions so you can do

626
00:23:46,500 --> 00:23:52,530
P invoke so in this 16 line script here

627
00:23:49,950 --> 00:23:57,090
this is just calling the mini dump right

628
00:23:52,530 --> 00:24:00,000
dump API right and just dumping L SAS to

629
00:23:57,090 --> 00:24:00,870
disk in 16 lines of bulan code which i

630
00:24:00,000 --> 00:24:03,630
think is awesome

631
00:24:00,870 --> 00:24:05,520
and because these languages come with

632
00:24:03,630 --> 00:24:07,590
their built-in compilers say you didn't

633
00:24:05,520 --> 00:24:09,418
even want to embed all this stuff do any

634
00:24:07,590 --> 00:24:10,889
of that it just like much Ellis is too

635
00:24:09,419 --> 00:24:12,150
hard screw it

636
00:24:10,890 --> 00:24:14,250
what you can do is you can

637
00:24:12,150 --> 00:24:16,170
download the language these languages

638
00:24:14,250 --> 00:24:17,490
usually come with their own compilers so

639
00:24:16,170 --> 00:24:18,960
what this means is that you can take the

640
00:24:17,490 --> 00:24:21,150
16 line script right here

641
00:24:18,960 --> 00:24:23,130
compile it hack and you'll get an

642
00:24:21,150 --> 00:24:24,990
executable that will work on just any

643
00:24:23,130 --> 00:24:26,820
Windows environment so I think I think

644
00:24:24,990 --> 00:24:29,340
that's really cool just because it it it

645
00:24:26,820 --> 00:24:30,300
doesn't it gets it gets around the whole

646
00:24:29,340 --> 00:24:31,110
issue of setting up a development

647
00:24:30,300 --> 00:24:33,149
environment

648
00:24:31,110 --> 00:24:35,070
no Visual Studio and enough to futz

649
00:24:33,150 --> 00:24:36,840
about with the you know the UI if you're

650
00:24:35,070 --> 00:24:39,659
not familiar with it it's just sublime

651
00:24:36,840 --> 00:24:41,310
text compiler done that's it and now you

652
00:24:39,660 --> 00:24:43,320
can just run it wherever you want

653
00:24:41,310 --> 00:24:46,260
that's the this is the main advantage of

654
00:24:43,320 --> 00:24:48,720
doing it this way I think right so again

655
00:24:46,260 --> 00:24:51,800
like these these code this code which

656
00:24:48,720 --> 00:24:55,230
will work just time oh boy

657
00:24:51,800 --> 00:24:56,730
offensive DLR toasted there there's rum

658
00:24:55,230 --> 00:24:58,200
booth at CES which is embedding boolong

659
00:24:56,730 --> 00:25:01,470
and c-sharp and then this invoked

660
00:24:58,200 --> 00:25:02,730
jump-scare which embeds bulan within

661
00:25:01,470 --> 00:25:05,490
powershell which is what i'm going to be

662
00:25:02,730 --> 00:25:07,230
showing you here it requires three

663
00:25:05,490 --> 00:25:10,800
dotnet assemblies to run which is even

664
00:25:07,230 --> 00:25:13,410
better than our Python right and also it

665
00:25:10,800 --> 00:25:16,590
compiles straight to memory so as

666
00:25:13,410 --> 00:25:19,500
opposed to like embedding C sharp and

667
00:25:16,590 --> 00:25:21,149
PowerShell where there there are gonna

668
00:25:19,500 --> 00:25:24,300
be artifacts left to disk if you do

669
00:25:21,150 --> 00:25:26,430
decide to compile it gulang the compiled

670
00:25:24,300 --> 00:25:29,430
to memory flag actually compiles to

671
00:25:26,430 --> 00:25:31,800
memory like there is no artifact left on

672
00:25:29,430 --> 00:25:35,280
this which is great so i'm going to be

673
00:25:31,800 --> 00:25:38,490
demoing this to you so this is invoke

674
00:25:35,280 --> 00:25:42,629
jump-scare i have to change it to invoke

675
00:25:38,490 --> 00:25:45,210
blank because MZ so and once you change

676
00:25:42,630 --> 00:25:47,640
to invoke boo lang you're good to go but

677
00:25:45,210 --> 00:25:51,900
this is a proof of concept that will

678
00:25:47,640 --> 00:25:55,140
execute shell code using a embedded boo

679
00:25:51,900 --> 00:25:57,060
lang script and compiler okay so this is

680
00:25:55,140 --> 00:25:59,130
just over here so this is the shell code

681
00:25:57,060 --> 00:26:00,690
you can actually put this in and boot

682
00:25:59,130 --> 00:26:02,070
the blank source itself instead of in

683
00:26:00,690 --> 00:26:04,020
PowerShell which is probably stealthier

684
00:26:02,070 --> 00:26:06,659
but just for demonstration purposes I

685
00:26:04,020 --> 00:26:08,700
put it there the real magic happens here

686
00:26:06,660 --> 00:26:10,080
where you're starting up the bulan

687
00:26:08,700 --> 00:26:12,390
compiler you're throwing it

688
00:26:10,080 --> 00:26:15,629
the blank source code and then you're

689
00:26:12,390 --> 00:26:17,850
executing the main function in boo lang

690
00:26:15,630 --> 00:26:21,300
if I if we take a look at the actual

691
00:26:17,850 --> 00:26:23,189
bulan code here which do you know what

692
00:26:21,300 --> 00:26:26,370
I'm going to pull this up and

693
00:26:23,190 --> 00:26:28,770
visual code because like this I can

694
00:26:26,370 --> 00:26:37,770
actually zoom in for you that's great

695
00:26:28,770 --> 00:26:41,370
it's always good to do recon here you go

696
00:26:37,770 --> 00:26:44,450
Shoko okay one second I have to press

697
00:26:41,370 --> 00:26:44,449
multiple keys at the put the mic down

698
00:26:45,800 --> 00:26:52,889
sweet so is that is that good alright so

699
00:26:50,910 --> 00:26:54,180
this is the boo Lang that executes

700
00:26:52,890 --> 00:26:55,110
shellcode okay and I put it over a

701
00:26:54,180 --> 00:26:57,600
couple of shell code injection

702
00:26:55,110 --> 00:26:59,010
techniques so these are all DLL imports

703
00:26:57,600 --> 00:27:02,040
so as you can see like it supports P

704
00:26:59,010 --> 00:27:04,170
invoke which is great these are the the

705
00:27:02,040 --> 00:27:06,960
actual logic to actually execute this is

706
00:27:04,170 --> 00:27:10,110
the Q a PC method of injecting shellcode

707
00:27:06,960 --> 00:27:11,880
this is just using weight for single

708
00:27:10,110 --> 00:27:13,260
object and this is just inject terminal

709
00:27:11,880 --> 00:27:15,930
which is the standard create remote

710
00:27:13,260 --> 00:27:21,570
thread a shellcode injection technique

711
00:27:15,930 --> 00:27:24,330
okay so I sort of in the repo I sort of

712
00:27:21,570 --> 00:27:25,560
I took the blank source code and put it

713
00:27:24,330 --> 00:27:28,080
in its own file but you can actually put

714
00:27:25,560 --> 00:27:32,100
it in the PowerShell script and just

715
00:27:28,080 --> 00:27:44,520
like executed on the fly so if we do

716
00:27:32,100 --> 00:27:53,399
this which no wrong one okay so now I'll

717
00:27:44,520 --> 00:27:57,290
put the mic down there we go we got a

718
00:27:53,400 --> 00:27:57,290
calc so

719
00:28:01,110 --> 00:28:06,899
so that's really cool for a number of

720
00:28:03,780 --> 00:28:08,370
reasons but again like the best part

721
00:28:06,900 --> 00:28:10,230
about this is that there are actually no

722
00:28:08,370 --> 00:28:12,659
artifacts to disk when you do this right

723
00:28:10,230 --> 00:28:14,580
and again like you can take the bat

724
00:28:12,660 --> 00:28:15,870
shell code blue lang script and compile

725
00:28:14,580 --> 00:28:17,669
it if you don't want to embed it you can

726
00:28:15,870 --> 00:28:19,709
just compile it to its own executable

727
00:28:17,670 --> 00:28:21,390
and just run it if you want like it

728
00:28:19,710 --> 00:28:22,860
works wherever you want and again

729
00:28:21,390 --> 00:28:24,270
because like these languages are on

730
00:28:22,860 --> 00:28:27,000
tropical you can just keep embedding

731
00:28:24,270 --> 00:28:28,470
these languages within each other too so

732
00:28:27,000 --> 00:28:30,360
like if you want you want to get crazy

733
00:28:28,470 --> 00:28:32,280
for say like you're drunk at 6 a.m. and

734
00:28:30,360 --> 00:28:33,899
decide to yeah I'm just gonna embed like

735
00:28:32,280 --> 00:28:35,850
the most do all the compilers let's see

736
00:28:33,900 --> 00:28:37,800
what happens you can commit I've

737
00:28:35,850 --> 00:28:40,139
actually done this you can embed

738
00:28:37,800 --> 00:28:43,320
ironpython within boo lang within

739
00:28:40,140 --> 00:28:45,780
powershell within c-sharp and just keep

740
00:28:43,320 --> 00:28:47,429
on going like it's just a it just works

741
00:28:45,780 --> 00:28:49,580
like it's amazing i just find this

742
00:28:47,430 --> 00:28:51,870
really really fun

743
00:28:49,580 --> 00:28:54,000
so clear script this is a recent

744
00:28:51,870 --> 00:28:58,070
discovery in mine so clear script is a

745
00:28:54,000 --> 00:29:01,260
my official Microsoft project that uh is

746
00:28:58,070 --> 00:29:05,370
basically designed to give scripting

747
00:29:01,260 --> 00:29:08,010
capabilities to your c-sharp executables

748
00:29:05,370 --> 00:29:10,379
okay and it has its own G script

749
00:29:08,010 --> 00:29:13,290
implementation from what I understand so

750
00:29:10,380 --> 00:29:16,530
this is where I actually sort of need

751
00:29:13,290 --> 00:29:19,020
your help because I'm not like I can't

752
00:29:16,530 --> 00:29:20,639
find the comm calls necessary to

753
00:29:19,020 --> 00:29:23,940
actually initialize the windows script

754
00:29:20,640 --> 00:29:27,180
host environment and all that stuff so

755
00:29:23,940 --> 00:29:29,220
I'm a it uses own jscript implementation

756
00:29:27,180 --> 00:29:31,080
I just can't verify that because the way

757
00:29:29,220 --> 00:29:32,610
it's written is really awkward and I

758
00:29:31,080 --> 00:29:33,899
can't seem to find like all of those

759
00:29:32,610 --> 00:29:37,050
comm calls necessary for it to do that

760
00:29:33,900 --> 00:29:39,420
but from my research it does seem like

761
00:29:37,050 --> 00:29:42,030
it doesn't go through the windows script

762
00:29:39,420 --> 00:29:44,130
host environment you can also embed veep

763
00:29:42,030 --> 00:29:46,830
you can also use VB script of clear

764
00:29:44,130 --> 00:29:49,950
script okay that's not confusing at all

765
00:29:46,830 --> 00:29:51,480
but and also as of clear v it also

766
00:29:49,950 --> 00:29:54,210
supports the open source JavaScript

767
00:29:51,480 --> 00:29:56,520
engine v8 high performance which is also

768
00:29:54,210 --> 00:29:58,020
really cool but just know if you do

769
00:29:56,520 --> 00:30:00,360
decide to use that for some reason you

770
00:29:58,020 --> 00:30:03,030
actually do need like additional dll's

771
00:30:00,360 --> 00:30:05,030
which is kind of a pain but what's

772
00:30:03,030 --> 00:30:08,280
really interesting though because since

773
00:30:05,030 --> 00:30:10,770
you can use J script what this means is

774
00:30:08,280 --> 00:30:12,180
that you can use all of those fun

775
00:30:10,770 --> 00:30:14,460
functions that jscript gives you like

776
00:30:12,180 --> 00:30:16,499
ActiveX objects like

777
00:30:14,460 --> 00:30:18,419
get object lie all of those stuff that

778
00:30:16,499 --> 00:30:20,490
allows you to like download SCT files

779
00:30:18,419 --> 00:30:21,690
from the internet and all I like sub T's

780
00:30:20,490 --> 00:30:24,299
work if you're familiar with it like the

781
00:30:21,690 --> 00:30:25,919
SCT files and the and any basically

782
00:30:24,299 --> 00:30:27,990
anything that jscript that he put out

783
00:30:25,919 --> 00:30:29,580
you can use it within clear script so

784
00:30:27,990 --> 00:30:31,409
this is an example of a betting clear

785
00:30:29,580 --> 00:30:35,009
script within c-sharp and PowerShell and

786
00:30:31,409 --> 00:30:36,419
we're calling the ActiveX object W

787
00:30:35,009 --> 00:30:38,580
script a shell and we're just executing

788
00:30:36,419 --> 00:30:40,320
calc right so what I'm going to be

789
00:30:38,580 --> 00:30:42,658
demonstrating here is invoke clear

790
00:30:40,320 --> 00:30:44,369
script ps1 and I'm using PowerShell

791
00:30:42,659 --> 00:30:46,409
because it's just easier than compiling

792
00:30:44,369 --> 00:30:47,699
stuff like that live which is probably

793
00:30:46,409 --> 00:30:50,220
not a good idea

794
00:30:47,700 --> 00:30:51,990
but you can use VB script if you want

795
00:30:50,220 --> 00:30:52,679
and British embeds queer script within

796
00:30:51,990 --> 00:30:54,690
PowerShell

797
00:30:52,679 --> 00:30:58,440
right and then we're calling get object

798
00:30:54,690 --> 00:30:59,669
on a SCT file hosted on my laptop so

799
00:30:58,440 --> 00:31:02,129
we're gonna be basically like

800
00:30:59,669 --> 00:31:05,730
downloading SC fee to file and executing

801
00:31:02,129 --> 00:31:08,998
it through PowerShell within clear

802
00:31:05,730 --> 00:31:10,889
script yes and again if you want the

803
00:31:08,999 --> 00:31:13,769
high-performance v8 JavaScript engine

804
00:31:10,889 --> 00:31:14,668
for some reason you're gonna need three

805
00:31:13,769 --> 00:31:18,769
or four more dll's

806
00:31:14,669 --> 00:31:21,840
but yeah let's take a look at that so

807
00:31:18,769 --> 00:31:24,090
get that out of the way invoke clear

808
00:31:21,840 --> 00:31:25,470
script so there you go so we this is

809
00:31:24,090 --> 00:31:28,499
again like this is awesome because

810
00:31:25,470 --> 00:31:29,700
exclusive only needs one assembly so

811
00:31:28,499 --> 00:31:32,129
that's even better so we're just

812
00:31:29,700 --> 00:31:33,720
embedding the assembly within powershell

813
00:31:32,129 --> 00:31:35,279
we're calling assembly that load on it

814
00:31:33,720 --> 00:31:37,379
we're then initializing the jscript

815
00:31:35,279 --> 00:31:39,240
engine microsoft clear script windows

816
00:31:37,379 --> 00:31:40,649
jscript engine so this is tells cliche i

817
00:31:39,240 --> 00:31:43,200
want to code in a script but you can

818
00:31:40,649 --> 00:31:46,889
also do stuff in VB script as well if

819
00:31:43,200 --> 00:31:48,629
you want so and ok so this is the best

820
00:31:46,889 --> 00:31:50,939
part about this whole thing we think

821
00:31:48,629 --> 00:31:54,990
because of how clear script works you

822
00:31:50,940 --> 00:31:57,779
can expose the dotnet CLR to clear

823
00:31:54,990 --> 00:32:00,330
scripts jscript implementation that's

824
00:31:57,779 --> 00:32:02,789
yeah III know it sounds awful but that's

825
00:32:00,330 --> 00:32:05,009
that's that's that is how I think the

826
00:32:02,789 --> 00:32:09,899
best way of describing it but so what

827
00:32:05,009 --> 00:32:11,909
you can do is basically just import net

828
00:32:09,899 --> 00:32:13,439
API so here we're importing system

829
00:32:11,909 --> 00:32:15,210
system core system reflection system

830
00:32:13,440 --> 00:32:17,360
runtime Interop services within je

831
00:32:15,210 --> 00:32:19,379
script itself which is kind of crazy and

832
00:32:17,360 --> 00:32:21,600
whoa that was weird

833
00:32:19,379 --> 00:32:23,730
ok don't do that again oh no it's doing

834
00:32:21,600 --> 00:32:27,059
it again ok don't do it again

835
00:32:23,730 --> 00:32:28,110
so so now we can call get object and

836
00:32:27,059 --> 00:32:31,700
also

837
00:32:28,110 --> 00:32:33,750
access to the CLR all in one place and

838
00:32:31,700 --> 00:32:38,190
so now what I'm going to do is I'm going

839
00:32:33,750 --> 00:32:41,250
to go back to here real quick and this

840
00:32:38,190 --> 00:32:45,620
is just starting up a Python HTTP server

841
00:32:41,250 --> 00:32:45,620
so it's not really anything that's like

842
00:33:05,299 --> 00:33:09,120
alright so we got our HTTP server up and

843
00:33:07,740 --> 00:33:10,559
running now so now we're going to

844
00:33:09,120 --> 00:33:14,659
execute this it's going to download the

845
00:33:10,559 --> 00:33:14,660
SCT file and execute calc hopefully

846
00:33:28,970 --> 00:33:32,120
there you go

847
00:33:35,340 --> 00:33:41,949
and again like notice that we're able to

848
00:33:38,470 --> 00:33:44,230
call en api's through - through jscript

849
00:33:41,950 --> 00:33:45,970
as well because I printed I basically

850
00:33:44,230 --> 00:33:53,500
called consul that right line through

851
00:33:45,970 --> 00:33:57,220
clear script itself sighs there you go

852
00:33:53,500 --> 00:33:58,630
okay so those are the three most

853
00:33:57,220 --> 00:34:00,370
interesting ones that I've played around

854
00:33:58,630 --> 00:34:02,440
with so far this on the other hand

855
00:34:00,370 --> 00:34:03,939
though is a list of basically all of the

856
00:34:02,440 --> 00:34:05,230
other interesting ones that I definitely

857
00:34:03,940 --> 00:34:07,870
would love to take a look at if I read

858
00:34:05,230 --> 00:34:09,750
the time there are Lua implementations

859
00:34:07,870 --> 00:34:11,469
of that net for some whatever reason

860
00:34:09,750 --> 00:34:13,590
there's a bunch of JavaScript

861
00:34:11,469 --> 00:34:15,908
implementation which is interesting I

862
00:34:13,590 --> 00:34:17,470
saying this I've yet to find the time to

863
00:34:15,909 --> 00:34:19,119
do it but I would be interesting to see

864
00:34:17,469 --> 00:34:22,480
a few embedded JavaScript within c-sharp

865
00:34:19,119 --> 00:34:24,340
and through it a beef hook that would be

866
00:34:22,480 --> 00:34:27,159
interesting I I think it would break

867
00:34:24,340 --> 00:34:28,599
because it's not a browser but the idea

868
00:34:27,159 --> 00:34:30,300
of beefing endpoints is kind of

869
00:34:28,599 --> 00:34:33,040
hilarious and I kind of want to try it

870
00:34:30,300 --> 00:34:35,500
the most by far though with a web

871
00:34:33,040 --> 00:34:38,379
assembly one now this is crazy

872
00:34:35,500 --> 00:34:40,089
so web assembly the web assembly dotnet

873
00:34:38,379 --> 00:34:42,520
implementation allows you to execute and

874
00:34:40,089 --> 00:34:45,549
create web assemblies within memory

875
00:34:42,520 --> 00:34:47,830
within net think about that for a second

876
00:34:45,550 --> 00:34:48,639
now that's just crazy so there's

877
00:34:47,830 --> 00:34:49,899
probably some really interesting

878
00:34:48,639 --> 00:34:51,669
shenanigans you can pull with this

879
00:34:49,899 --> 00:34:53,049
especially for like trade craft and

880
00:34:51,668 --> 00:34:54,609
stuff you can probably like host web

881
00:34:53,050 --> 00:34:57,280
assemblies that actually are web pages

882
00:34:54,609 --> 00:35:00,040
which also contain payloads and then

883
00:34:57,280 --> 00:35:01,570
just grab it from a website and execute

884
00:35:00,040 --> 00:35:02,800
it there there's probably a bunch of

885
00:35:01,570 --> 00:35:05,290
opportunities here for some shenanigans

886
00:35:02,800 --> 00:35:07,570
so I mean I have to definitely take a

887
00:35:05,290 --> 00:35:09,009
look at it when I have the time but yeah

888
00:35:07,570 --> 00:35:10,720
but this is these are probably the most

889
00:35:09,010 --> 00:35:12,310
interesting ones that I found so far but

890
00:35:10,720 --> 00:35:13,959
there's arm Python to iearn Python 3 is

891
00:35:12,310 --> 00:35:16,450
in the works I doubt it'll be ready by

892
00:35:13,960 --> 00:35:17,830
the eol next year of Python 2 but you

893
00:35:16,450 --> 00:35:21,250
know there's always possibility those

894
00:35:17,830 --> 00:35:23,560
but by far from like pure operational

895
00:35:21,250 --> 00:35:25,900
tradecraft perspective and utility and

896
00:35:23,560 --> 00:35:27,970
and all that stuff boo lang reigns

897
00:35:25,900 --> 00:35:30,070
supreme as it is right now boo lang is

898
00:35:27,970 --> 00:35:32,200
by far the best one that I found so

899
00:35:30,070 --> 00:35:34,420
foreign I was developed by one guy and

900
00:35:32,200 --> 00:35:35,830
it's not getting any love so you should

901
00:35:34,420 --> 00:35:38,609
all create malware with it to show some

902
00:35:35,830 --> 00:35:38,609
love to the developer

903
00:35:38,940 --> 00:35:44,500
so like I said before like you can take

904
00:35:41,620 --> 00:35:45,609
because these compilers because these

905
00:35:44,500 --> 00:35:47,110
languages come with their built-in

906
00:35:45,610 --> 00:35:49,120
compilers because again like the dotnet

907
00:35:47,110 --> 00:35:50,710
framework isn't a language it's a set of

908
00:35:49,120 --> 00:35:52,839
tools and infrastructure that allows you

909
00:35:50,710 --> 00:35:54,430
to build your own language and it also

910
00:35:52,840 --> 00:35:56,890
allows you to build your own compilers

911
00:35:54,430 --> 00:36:00,490
really really easily like I mean like

912
00:35:56,890 --> 00:36:02,799
not not from scratch which is great so

913
00:36:00,490 --> 00:36:04,180
you can basically take all of these code

914
00:36:02,800 --> 00:36:06,220
snippets that I have on that rep oh that

915
00:36:04,180 --> 00:36:08,350
I showed you offensive dlr elbow and you

916
00:36:06,220 --> 00:36:09,640
can compile them if they're bullying

917
00:36:08,350 --> 00:36:12,009
script you can compile with the bulan

918
00:36:09,640 --> 00:36:14,170
compiler and then you build you can just

919
00:36:12,010 --> 00:36:16,150
drop them on systems and it'll just work

920
00:36:14,170 --> 00:36:18,190
the great thing about compiling it is

921
00:36:16,150 --> 00:36:21,490
because from what I understand because

922
00:36:18,190 --> 00:36:23,770
bulan compiles the source code to ms IL

923
00:36:21,490 --> 00:36:27,279
directly it'll even work on older

924
00:36:23,770 --> 00:36:29,710
versions of.net so it'll work on net 2.0

925
00:36:27,280 --> 00:36:31,810
so you can take these compiling scripts

926
00:36:29,710 --> 00:36:33,820
and put it on a Windows 7 machine or old

927
00:36:31,810 --> 00:36:35,680
versions of anything with dotnet and

928
00:36:33,820 --> 00:36:37,900
it'll just work it's fantastic

929
00:36:35,680 --> 00:36:39,279
and this is yeah this is definitely the

930
00:36:37,900 --> 00:36:40,000
easiest way of weaponizing anything like

931
00:36:39,280 --> 00:36:41,620
if you don't want to deal with the

932
00:36:40,000 --> 00:36:43,350
embedding this is probably the easiest

933
00:36:41,620 --> 00:36:45,759
way to weaponize anything right so

934
00:36:43,350 --> 00:36:47,980
because of the flexibility that this

935
00:36:45,760 --> 00:36:49,720
provides you right I thought well let's

936
00:36:47,980 --> 00:36:52,270
write a C 2 tool which was a bad idea

937
00:36:49,720 --> 00:36:54,160
because writing C 2 tools takes a lot of

938
00:36:52,270 --> 00:37:00,220
time and in his heart but I did it

939
00:36:54,160 --> 00:37:02,710
anyway because I hate myself so silent

940
00:37:00,220 --> 00:37:04,569
Trinity is you can get it at that link

941
00:37:02,710 --> 00:37:05,950
there is basically a C tool that I

942
00:37:04,570 --> 00:37:07,150
developed and it's got a bunch of

943
00:37:05,950 --> 00:37:09,100
updates recently now I'm actually gonna

944
00:37:07,150 --> 00:37:11,140
make demoing to you the latest update

945
00:37:09,100 --> 00:37:13,900
which I have yet to release I'm gonna be

946
00:37:11,140 --> 00:37:15,790
releasing it after this talk essentially

947
00:37:13,900 --> 00:37:17,260
it allows you to take advantage of this

948
00:37:15,790 --> 00:37:20,050
so orig the original version used

949
00:37:17,260 --> 00:37:22,510
ironpython as the main embedded language

950
00:37:20,050 --> 00:37:23,920
to do all of its stuff right I recently

951
00:37:22,510 --> 00:37:25,600
switched it over to blame because boo

952
00:37:23,920 --> 00:37:26,890
lang is by far like that it's a hundred

953
00:37:25,600 --> 00:37:29,680
percent better than ironpython on every

954
00:37:26,890 --> 00:37:32,259
way shape or form okay so I'm gonna be

955
00:37:29,680 --> 00:37:34,000
demoing sine attorney to

956
00:37:32,260 --> 00:37:36,819
one thing I want to point out real quick

957
00:37:34,000 --> 00:37:39,130
is like again the whole point of this is

958
00:37:36,819 --> 00:37:41,440
like shifting back to paradigm to

959
00:37:39,130 --> 00:37:45,400
PowerShell style go away

960
00:37:41,440 --> 00:37:47,700
PowerShell style like attacks so if you

961
00:37:45,400 --> 00:37:50,470
take a look at the sound Trinity modules

962
00:37:47,700 --> 00:37:53,410
you will see like this is the Mimi Katz

963
00:37:50,470 --> 00:37:56,859
module inside a journey you'll see that

964
00:37:53,410 --> 00:37:59,710
it is source code right which is amazing

965
00:37:56,859 --> 00:38:02,348
so what that means is that now you can

966
00:37:59,710 --> 00:38:04,420
without compiling anything server-side

967
00:38:02,349 --> 00:38:05,740
because all the compilation and

968
00:38:04,420 --> 00:38:07,960
interpretation happens on the end point

969
00:38:05,740 --> 00:38:10,390
you can edit these real time like on

970
00:38:07,960 --> 00:38:12,339
your server and then every time you run

971
00:38:10,390 --> 00:38:13,690
the module again those edits will just

972
00:38:12,339 --> 00:38:14,920
it because its source code right they'll

973
00:38:13,690 --> 00:38:16,270
just get thrown down to the end point

974
00:38:14,920 --> 00:38:20,020
and compiled on the end point

975
00:38:16,270 --> 00:38:22,420
automatically so and this is the Mimi

976
00:38:20,020 --> 00:38:24,790
Katz module it's it's shorter because

977
00:38:22,420 --> 00:38:27,520
I'm doing somewhere I haven't found the

978
00:38:24,790 --> 00:38:29,140
time to rewrite the Mimi Katz PE loader

979
00:38:27,520 --> 00:38:31,000
and gulang so what I'm doing is I'm

980
00:38:29,140 --> 00:38:33,609
cheating a bit and I'm basically I

981
00:38:31,000 --> 00:38:36,250
stripped down sharps Lloyd took its P

982
00:38:33,609 --> 00:38:38,619
loading functionality compiled that to a

983
00:38:36,250 --> 00:38:40,960
she sharp assembly embedded that within

984
00:38:38,619 --> 00:38:42,730
the bullying source code and executed

985
00:38:40,960 --> 00:38:44,770
that through the c-sharp assembly which

986
00:38:42,730 --> 00:38:48,069
be its it but it but it works so hey

987
00:38:44,770 --> 00:38:50,250
whatever so but but I think there's a

988
00:38:48,069 --> 00:38:53,230
friend of mine who's actually writing a

989
00:38:50,250 --> 00:38:54,609
bool import of that so that because

990
00:38:53,230 --> 00:38:56,470
since especially with dotnet for

991
00:38:54,609 --> 00:38:58,119
pointing since sharps Lloyd is not gonna

992
00:38:56,470 --> 00:39:00,730
be detected every time because it's got

993
00:38:58,119 --> 00:39:03,550
a MZ once we port that over to boo lang

994
00:39:00,730 --> 00:39:05,260
this technically should just just go

995
00:39:03,550 --> 00:39:07,089
through am Z and all that stuff because

996
00:39:05,260 --> 00:39:08,890
again it's going a level deeper it

997
00:39:07,089 --> 00:39:10,990
really isn't any insight into this and

998
00:39:08,890 --> 00:39:12,670
so it's again like shifting sort of

999
00:39:10,990 --> 00:39:16,089
trying to shift back the paradigm to

1000
00:39:12,670 --> 00:39:18,640
PowerShell style like attacks okay so if

1001
00:39:16,089 --> 00:39:22,960
you never used San Trinity before the

1002
00:39:18,640 --> 00:39:25,270
new update that did old new update so

1003
00:39:22,960 --> 00:39:26,470
but did old a new update I basically

1004
00:39:25,270 --> 00:39:27,700
changed the whole thing to a team

1005
00:39:26,470 --> 00:39:29,078
service just like a client-server

1006
00:39:27,700 --> 00:39:31,118
functionality similar to Cobalt strike

1007
00:39:29,079 --> 00:39:33,339
so there's a team server restart that up

1008
00:39:31,119 --> 00:39:35,890
well not that's the client hold on I saw

1009
00:39:33,339 --> 00:39:38,200
the actual team server up this is gonna

1010
00:39:35,890 --> 00:39:40,000
look awful because the font is large but

1011
00:39:38,200 --> 00:39:42,790
I promise you when you once you scale it

1012
00:39:40,000 --> 00:39:44,200
down it actually looks pretty and once

1013
00:39:42,790 --> 00:39:45,640
you start the team server up we're good

1014
00:39:44,200 --> 00:39:47,019
always check this

1015
00:39:45,640 --> 00:39:48,368
difficut fingerprint for God's sake

1016
00:39:47,019 --> 00:39:50,229
because otherwise you know something

1017
00:39:48,369 --> 00:39:52,990
could be men in the middle linked to you

1018
00:39:50,230 --> 00:39:55,390
but once you do that you can connect to

1019
00:39:52,990 --> 00:39:57,279
it with website so the whole thing it

1020
00:39:55,390 --> 00:39:58,390
uses WebSockets so what that means is

1021
00:39:57,279 --> 00:40:00,539
that this real-time communication

1022
00:39:58,390 --> 00:40:03,069
between the team server and the client

1023
00:40:00,539 --> 00:40:05,289
the team server it supports multiple

1024
00:40:03,069 --> 00:40:06,819
users so it's multiplayer and the client

1025
00:40:05,289 --> 00:40:08,589
supports multiple servers so it's

1026
00:40:06,819 --> 00:40:10,180
multiplayer multi server you can manage

1027
00:40:08,589 --> 00:40:13,299
multiple servers and multiple clients

1028
00:40:10,180 --> 00:40:15,848
from a single instance so once you

1029
00:40:13,299 --> 00:40:17,680
connect to it you I pass it an RC file

1030
00:40:15,849 --> 00:40:20,680
so if you're familiar with Metasploit

1031
00:40:17,680 --> 00:40:22,149
resource files basically it'll just just

1032
00:40:20,680 --> 00:40:25,649
run every command that you have one

1033
00:40:22,150 --> 00:40:28,690
byline in there so I passed it that I

1034
00:40:25,650 --> 00:40:30,609
told it to start up the HTTP server the

1035
00:40:28,690 --> 00:40:32,559
HP listener rather set the buying night

1036
00:40:30,609 --> 00:40:34,029
P and the port this is gonna be really

1037
00:40:32,559 --> 00:40:35,470
awkward because now I have to do this

1038
00:40:34,029 --> 00:40:37,240
because I actually want to explain stuff

1039
00:40:35,470 --> 00:40:39,939
to you but okay I'll figure it out I

1040
00:40:37,240 --> 00:40:41,709
guess so it's got some fancy

1041
00:40:39,940 --> 00:40:43,119
autocomplete stuff which is really cool

1042
00:40:41,710 --> 00:40:45,700
I think this is probably like the

1043
00:40:43,119 --> 00:40:47,109
coolest thing about this is that it's

1044
00:40:45,700 --> 00:40:49,328
got some fancy autocomplete stuff here

1045
00:40:47,109 --> 00:40:51,339
so it'll tell you like all the available

1046
00:40:49,329 --> 00:40:52,839
commands it's also got a help menu which

1047
00:40:51,339 --> 00:40:55,538
is good so it'll tell you all the

1048
00:40:52,839 --> 00:40:58,380
available commands the documentation

1049
00:40:55,539 --> 00:41:01,390
currently is lacking get up so

1050
00:40:58,380 --> 00:41:05,079
navigating the list navigating the

1051
00:41:01,390 --> 00:41:08,379
client probably help and every command

1052
00:41:05,079 --> 00:41:11,829
actually supports a dash H option so it

1053
00:41:08,380 --> 00:41:16,630
like it's sort of I hate to use this but

1054
00:41:11,829 --> 00:41:19,599
it's self documenting but lists that H

1055
00:41:16,630 --> 00:41:22,599
it'll give you all the options that the

1056
00:41:19,599 --> 00:41:23,769
command supports and so you it's pretty

1057
00:41:22,599 --> 00:41:25,150
easy if you ever use the Empire

1058
00:41:23,769 --> 00:41:28,660
Metasploit you'll find yourself at home

1059
00:41:25,150 --> 00:41:31,089
okay so there's the concept of stagers

1060
00:41:28,660 --> 00:41:32,440
so stagers are nothing more so we have a

1061
00:41:31,089 --> 00:41:34,599
listener running or having actually need

1062
00:41:32,440 --> 00:41:39,309
to execute something stages are nothing

1063
00:41:34,599 --> 00:41:40,660
more than some dotnet scripting language

1064
00:41:39,309 --> 00:41:42,069
embedded in another data scripting

1065
00:41:40,660 --> 00:41:44,859
language that's essentially what it is

1066
00:41:42,069 --> 00:41:46,450
so the one that I so using the

1067
00:41:44,859 --> 00:41:49,630
PowerShell stager sort of defeats the

1068
00:41:46,450 --> 00:41:51,640
purpose of this tool but it's there for

1069
00:41:49,630 --> 00:41:52,990
convenience sake and also like I've

1070
00:41:51,640 --> 00:41:54,670
gotten a lot of angry emails saying

1071
00:41:52,990 --> 00:41:56,709
please for the love of guy you get a

1072
00:41:54,670 --> 00:41:58,029
PowerShell stager so I decided to add it

1073
00:41:56,710 --> 00:41:59,109
in but again like it sort of defeats the

1074
00:41:58,029 --> 00:41:59,530
purpose of getting this one in the first

1075
00:41:59,109 --> 00:42:00,759
place

1076
00:41:59,530 --> 00:42:02,260
I guess for convenience sake it does

1077
00:42:00,760 --> 00:42:04,840
make sense right and I'm gonna be using

1078
00:42:02,260 --> 00:42:06,790
this during this demo but there's also

1079
00:42:04,840 --> 00:42:09,580
at msbuild oh I'll be showing you this -

1080
00:42:06,790 --> 00:42:12,090
there's the MS build.xml stager so again

1081
00:42:09,580 --> 00:42:14,860
sub T's work which basically embeds a

1082
00:42:12,090 --> 00:42:17,470
c-sharp script within an XML document

1083
00:42:14,860 --> 00:42:20,140
and it's it was sort of is still

1084
00:42:17,470 --> 00:42:21,879
whitelisting bypass and there's a bunch

1085
00:42:20,140 --> 00:42:23,680
of others coming too i don't think i'll

1086
00:42:21,880 --> 00:42:24,850
but release all of them but there's

1087
00:42:23,680 --> 00:42:26,440
definitely a bunch of others coming

1088
00:42:24,850 --> 00:42:27,580
there's also just a c-sharp source file

1089
00:42:26,440 --> 00:42:29,880
so if you want to just compile it with

1090
00:42:27,580 --> 00:42:32,350
CSC that exit you can do that as well so

1091
00:42:29,880 --> 00:42:34,720
Jenna ring is things pretty easy all you

1092
00:42:32,350 --> 00:42:36,910
have to do is use PowerShell yeah this

1093
00:42:34,720 --> 00:42:39,939
so the stay just one is the one that I'm

1094
00:42:36,910 --> 00:42:42,940
not gonna release just because I still

1095
00:42:39,940 --> 00:42:45,100
haven't figured out all the kinks in it

1096
00:42:42,940 --> 00:42:47,380
but also because I kind of want to use

1097
00:42:45,100 --> 00:42:49,360
it before actually burn that burn it

1098
00:42:47,380 --> 00:42:50,830
I still haven't actually had the time to

1099
00:42:49,360 --> 00:42:53,200
actually use this on an engagement yet

1100
00:42:50,830 --> 00:42:54,370
at least the stage less power show stage

1101
00:42:53,200 --> 00:42:58,779
or so I kind of want to use it before

1102
00:42:54,370 --> 00:43:00,819
I'd burn it completely but once you you

1103
00:42:58,780 --> 00:43:03,130
select the PowerShell stager eat the

1104
00:43:00,820 --> 00:43:05,650
Avery stator has a bunch of options to

1105
00:43:03,130 --> 00:43:07,390
it but then once you select the power

1106
00:43:05,650 --> 00:43:08,740
just so you just hit generate and then

1107
00:43:07,390 --> 00:43:10,000
give it the name of the listener and

1108
00:43:08,740 --> 00:43:13,569
it'll automatically do everything for

1109
00:43:10,000 --> 00:43:15,370
you so generate HDB I mean now a stage

1110
00:43:13,570 --> 00:43:18,610
or the server streams it down to the

1111
00:43:15,370 --> 00:43:22,680
client and client saves it to disk so I

1112
00:43:18,610 --> 00:43:24,850
already transferred that to my VM here

1113
00:43:22,680 --> 00:43:25,210
which if I can pull up that would be

1114
00:43:24,850 --> 00:43:31,720
great

1115
00:43:25,210 --> 00:43:33,460
there you go so let's pull this up I'm

1116
00:43:31,720 --> 00:43:36,629
gonna be running this as admin just

1117
00:43:33,460 --> 00:43:36,630
because I want to show you the Mimi Katz

1118
00:44:15,810 --> 00:44:22,390
so what I'm doing here is I'm going to

1119
00:44:19,240 --> 00:44:23,830
be executing two stages the msbuild one

1120
00:44:22,390 --> 00:44:28,089
and the powershell one okay and I'm

1121
00:44:23,830 --> 00:44:29,410
going to use the the admin on both but

1122
00:44:28,089 --> 00:44:32,770
I'm gonna be executing the msbuild one

1123
00:44:29,410 --> 00:44:34,868
from the command prompt because defender

1124
00:44:32,770 --> 00:44:36,550
just flags on anything that touches MZ

1125
00:44:34,869 --> 00:44:39,040
from pallet if that touches else ass

1126
00:44:36,550 --> 00:44:40,720
from PowerShell now like I've liked it

1127
00:44:39,040 --> 00:44:42,310
like the procedure works and everything

1128
00:44:40,720 --> 00:44:44,319
but the behavior of it like it seems

1129
00:44:42,310 --> 00:44:46,029
like anything that touches am's else ass

1130
00:44:44,320 --> 00:44:47,050
from PowerShell it just Flags it that's

1131
00:44:46,030 --> 00:44:48,820
like it doesn't doesn't matter what the

1132
00:44:47,050 --> 00:44:51,640
hell it is I think it's mostly you know

1133
00:44:48,820 --> 00:44:53,830
it's our fault but I think that's that's

1134
00:44:51,640 --> 00:44:57,970
that that that's basically what I found

1135
00:44:53,830 --> 00:45:02,160
during this so I'm executing yes the XML

1136
00:44:57,970 --> 00:45:07,480
stager and from here I'm gonna execute

1137
00:45:02,160 --> 00:45:08,529
the PowerShell stager if I can type I

1138
00:45:07,480 --> 00:45:11,140
should learn how to type one of these

1139
00:45:08,530 --> 00:45:11,500
days considering my job yes one there

1140
00:45:11,140 --> 00:45:18,569
you go

1141
00:45:11,500 --> 00:45:22,030
okay so yeah there you go okay so you so

1142
00:45:18,570 --> 00:45:24,690
it did a lot of things on the hood here

1143
00:45:22,030 --> 00:45:29,200
so this is a PowerShell

1144
00:45:24,690 --> 00:45:31,869
stager that embeds the boo lang

1145
00:45:29,200 --> 00:45:33,700
interpreter right through a c-sharp

1146
00:45:31,869 --> 00:45:35,320
assembly okay so it's basically

1147
00:45:33,700 --> 00:45:36,700
embedding the boo lang interpreter in

1148
00:45:35,320 --> 00:45:38,320
the c-sharp assembly and the c-sharp

1149
00:45:36,700 --> 00:45:42,310
assemblies in PowerShell and it's

1150
00:45:38,320 --> 00:45:46,030
loading it that way okay so you give it

1151
00:45:42,310 --> 00:45:48,599
a bunch it you give it a URL and it'll

1152
00:45:46,030 --> 00:45:52,119
download all the DLL necessary and stuff

1153
00:45:48,599 --> 00:45:53,740
and it'll now you have an agent okay so

1154
00:45:52,119 --> 00:45:55,030
what I'm gonna do here is I'm just gonna

1155
00:45:53,740 --> 00:45:56,618
show you because it's because I have

1156
00:45:55,030 --> 00:45:58,630
five minutes left apparently I'm gonna

1157
00:45:56,619 --> 00:45:59,980
show you the newest feature of silent

1158
00:45:58,630 --> 00:46:01,570
Trinity it's got uploads and downloads

1159
00:45:59,980 --> 00:46:04,330
right okay you think that's that's

1160
00:46:01,570 --> 00:46:06,099
that's whatever but it allows you to do

1161
00:46:04,330 --> 00:46:07,630
really cool stuff now so what I'm gonna

1162
00:46:06,099 --> 00:46:10,270
show you is a module that uses mini dump

1163
00:46:07,630 --> 00:46:13,960
right dump okay to data dump else has to

1164
00:46:10,270 --> 00:46:16,810
disk compress it upload the dump to the

1165
00:46:13,960 --> 00:46:19,420
server and parse the dump server side

1166
00:46:16,810 --> 00:46:20,740
for creds using a tool called pipe I cap

1167
00:46:19,420 --> 00:46:22,690
if you aren't familiar pi cats it's

1168
00:46:20,740 --> 00:46:24,359
basically a Python implementation of

1169
00:46:22,690 --> 00:46:27,190
Mimi cats that allows you to dump

1170
00:46:24,359 --> 00:46:31,230
basically creds from a else a stump

1171
00:46:27,190 --> 00:46:31,230
server-side okay so let's try this out

1172
00:46:45,030 --> 00:46:51,160
okay so this is the I just selected the

1173
00:46:48,160 --> 00:46:54,490
module navigated all fine and dandy so

1174
00:46:51,160 --> 00:47:01,390
now we're gonna execute it cross our

1175
00:46:54,490 --> 00:47:10,479
fingers is it doing its thing seen this

1176
00:47:01,390 --> 00:47:13,839
thing I think there you go okay so it

1177
00:47:10,480 --> 00:47:16,180
dumped it it's uploading it really

1178
00:47:13,839 --> 00:47:17,319
slowly but again a new feature of sound

1179
00:47:16,180 --> 00:47:18,520
trees you can customize the sleep

1180
00:47:17,319 --> 00:47:20,230
interval so all we have to do and make

1181
00:47:18,520 --> 00:47:22,180
it faster is just tell it to go

1182
00:47:20,230 --> 00:47:35,290
interactive similar to : strike I'm

1183
00:47:22,180 --> 00:47:37,089
gonna do that now okay so and it's a

1184
00:47:35,290 --> 00:47:40,210
it's a sink too

1185
00:47:37,089 --> 00:47:45,490
so now yeah there you go so that's a lot

1186
00:47:40,210 --> 00:47:48,900
it's a lot faster yeah there you go so

1187
00:47:45,490 --> 00:47:54,098
they get and that was fast right and now

1188
00:47:48,900 --> 00:47:55,480
and they're the Kretz so it's basically

1189
00:47:54,099 --> 00:47:57,339
safety safety cats

1190
00:47:55,480 --> 00:47:58,540
it's not even executing Mimi cats just

1191
00:47:57,339 --> 00:48:01,690
dumping it up loading with server-side

1192
00:47:58,540 --> 00:48:04,890
and and executing and parsing it for

1193
00:48:01,690 --> 00:48:04,890
Kretz server-side

1194
00:48:10,600 --> 00:48:15,110
okay and there's a lot more stuff like

1195
00:48:12,800 --> 00:48:18,110
the Dennis new update it's gonna make it

1196
00:48:15,110 --> 00:48:19,670
actually functional so hopefully you'll

1197
00:48:18,110 --> 00:48:22,310
be able to actually start using it on

1198
00:48:19,670 --> 00:48:24,890
engagements really quickly detection

1199
00:48:22,310 --> 00:48:28,549
that net for opinion hams integration so

1200
00:48:24,890 --> 00:48:31,339
it's so because of the way this works

1201
00:48:28,550 --> 00:48:33,110
MZ really doesn't have a lot to go on

1202
00:48:31,340 --> 00:48:35,060
here because you're embedding a bullying

1203
00:48:33,110 --> 00:48:36,410
for the example like the PowerShell one

1204
00:48:35,060 --> 00:48:38,000
specifically like you're embedding the

1205
00:48:36,410 --> 00:48:39,980
bulan compiler within PowerShell

1206
00:48:38,000 --> 00:48:41,990
every time you compile that's blank

1207
00:48:39,980 --> 00:48:44,750
source code it'll generate like there's

1208
00:48:41,990 --> 00:48:48,109
nothing it'll just interpret it so there

1209
00:48:44,750 --> 00:48:49,790
really isn't a lot that MZ does with

1210
00:48:48,110 --> 00:48:51,470
pooling source code in my opinion so the

1211
00:48:49,790 --> 00:48:54,110
only thing that I've seen so far is like

1212
00:48:51,470 --> 00:48:55,850
actually signature on like instantiate

1213
00:48:54,110 --> 00:48:59,210
like the the name of function name again

1214
00:48:55,850 --> 00:49:01,100
but like there really isn't a lot to

1215
00:48:59,210 --> 00:49:04,130
trigger on if you just embed the source

1216
00:49:01,100 --> 00:49:05,299
code within powershell itself okay this

1217
00:49:04,130 --> 00:49:06,350
there's a lot of stuff that's been

1218
00:49:05,300 --> 00:49:08,270
coming out and this is getting better

1219
00:49:06,350 --> 00:49:09,410
again like the dotnet 428 having MC

1220
00:49:08,270 --> 00:49:11,810
integration makes this a whole lot

1221
00:49:09,410 --> 00:49:13,580
better already but there's a lot of etw

1222
00:49:11,810 --> 00:49:15,320
stuff which is the technology that

1223
00:49:13,580 --> 00:49:17,509
Microsoft has to basically detect a lot

1224
00:49:15,320 --> 00:49:19,520
of this the and these are all the links

1225
00:49:17,510 --> 00:49:21,260
to if you want the crab ztw is the

1226
00:49:19,520 --> 00:49:23,330
official wrapper around that but it's

1227
00:49:21,260 --> 00:49:25,970
C++ and it's sort of like build your own

1228
00:49:23,330 --> 00:49:27,890
tools so to speak so it's not exactly

1229
00:49:25,970 --> 00:49:29,450
like the best thing to do silky VW

1230
00:49:27,890 --> 00:49:32,390
although is awesome check out that

1231
00:49:29,450 --> 00:49:34,069
project it's pretty cool it's an open

1232
00:49:32,390 --> 00:49:36,560
source project so if you're trying to

1233
00:49:34,070 --> 00:49:38,330
detect this at scale might not be as

1234
00:49:36,560 --> 00:49:39,529
effective as you want but it's something

1235
00:49:38,330 --> 00:49:41,180
that you can definitely put on like

1236
00:49:39,530 --> 00:49:42,860
target at endpoints like high value

1237
00:49:41,180 --> 00:49:45,440
endpoints or something if this is really

1238
00:49:42,860 --> 00:49:47,420
a concern there's also a couple of blogs

1239
00:49:45,440 --> 00:49:49,940
out by counter SEP which i think is NWR

1240
00:49:47,420 --> 00:49:51,770
company which basically though goes over

1241
00:49:49,940 --> 00:49:53,510
like hunting for sanity all that stuff

1242
00:49:51,770 --> 00:49:55,640
and luke Jenning did an awesome talk

1243
00:49:53,510 --> 00:49:57,590
about blue hat about this so there's

1244
00:49:55,640 --> 00:49:59,089
that too and thanks for Ryan to table at

1245
00:49:57,590 --> 00:50:00,650
Specter ops actually putting a lot of

1246
00:49:59,090 --> 00:50:03,680
these together and I just added a couple

1247
00:50:00,650 --> 00:50:05,540
on to that but yeah thanks for that so

1248
00:50:03,680 --> 00:50:06,470
the best way of detecting is so in my

1249
00:50:05,540 --> 00:50:09,650
opinion okay

1250
00:50:06,470 --> 00:50:11,350
is that so if by inspecting the assam

1251
00:50:09,650 --> 00:50:13,970
the assembly is loaded in the app domain

1252
00:50:11,350 --> 00:50:15,620
you can see which ones have been loaded

1253
00:50:13,970 --> 00:50:16,939
reflectively and which ones are if have

1254
00:50:15,620 --> 00:50:20,380
a file backing on this

1255
00:50:16,940 --> 00:50:23,329
okay so I have yet to stumble across a

1256
00:50:20,380 --> 00:50:25,970
legitimate application that loads stuff

1257
00:50:23,329 --> 00:50:27,500
from memory I don't mean I don't know if

1258
00:50:25,970 --> 00:50:30,410
it's just me or my not looking hard

1259
00:50:27,500 --> 00:50:32,540
enough so like really if you see

1260
00:50:30,410 --> 00:50:35,060
anything loaded from memory that doesn't

1261
00:50:32,540 --> 00:50:37,520
have an assembly backing on disk that is

1262
00:50:35,060 --> 00:50:39,290
by far like the best way I think right

1263
00:50:37,520 --> 00:50:41,000
now is detecting it and again like in

1264
00:50:39,290 --> 00:50:42,980
this particular case you see like the

1265
00:50:41,000 --> 00:50:45,230
silent Trinity thing has been loaded so

1266
00:50:42,980 --> 00:50:47,900
you know that's that's a giveaway and

1267
00:50:45,230 --> 00:50:49,819
also ironpython bula and basically any

1268
00:50:47,900 --> 00:50:51,589
dotnet scripting language now is IOC

1269
00:50:49,819 --> 00:50:53,810
like I would definitely like if you see

1270
00:50:51,589 --> 00:50:56,299
anything loaded that's like ironpython

1271
00:50:53,810 --> 00:51:01,009
and boo lang that's probably very

1272
00:50:56,300 --> 00:51:03,500
suspicious I already did all this so you

1273
00:51:01,010 --> 00:51:05,300
don't have to worry about that but the

1274
00:51:03,500 --> 00:51:06,770
long-term goal would be the use like

1275
00:51:05,300 --> 00:51:09,349
integrate crack map exec with insanity

1276
00:51:06,770 --> 00:51:10,790
to so you have like a tool that does

1277
00:51:09,349 --> 00:51:13,119
like your internal stuff and everything

1278
00:51:10,790 --> 00:51:21,319
else see to stuff so that'd be good

1279
00:51:13,119 --> 00:51:24,800
questions yes it would defeat the

1280
00:51:21,319 --> 00:51:26,240
PowerShell stager probably yes it would

1281
00:51:24,800 --> 00:51:29,060
defeat it the PowerShell stage but again

1282
00:51:26,240 --> 00:51:30,890
like it's it's it's dotnet right so

1283
00:51:29,060 --> 00:51:32,930
PowerShell is the only isn't the only

1284
00:51:30,890 --> 00:51:34,879
thing that ingests or and can execute an

1285
00:51:32,930 --> 00:51:36,770
assembly so you can embed it you can use

1286
00:51:34,880 --> 00:51:39,050
like dotnet to J's for example embed it

1287
00:51:36,770 --> 00:51:41,750
in an excel file executed via whim ik

1288
00:51:39,050 --> 00:51:43,520
like that another sub T bypass you can

1289
00:51:41,750 --> 00:51:45,290
you can just your heart your wolves

1290
00:51:43,520 --> 00:51:46,819
you're always through at this point so

1291
00:51:45,290 --> 00:51:49,460
the one I usually use is the MS build

1292
00:51:46,819 --> 00:51:50,599
one because that still works a lot but I

1293
00:51:49,460 --> 00:51:52,130
have a couple others too that I'm

1294
00:51:50,599 --> 00:51:54,710
working on that are not quite ready yet

1295
00:51:52,130 --> 00:51:56,020
but but but if you're trying to defeat

1296
00:51:54,710 --> 00:51:58,480
like only the PowerShell stager

1297
00:51:56,020 --> 00:52:04,400
constrained language mode would help yes

1298
00:51:58,480 --> 00:52:08,170
welcome any more going once going twice

1299
00:52:04,400 --> 00:52:12,159
sold okay thank you

1300
00:52:08,170 --> 00:52:12,159
[Applause]

