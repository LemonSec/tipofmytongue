1
00:00:00,000 --> 00:00:09,150
Oh coming can you hear me great

2
00:00:03,389 --> 00:00:14,758
so um servos hacking 101 about two years

3
00:00:09,150 --> 00:00:18,020
ago I got a phone call from our CEO all

4
00:00:14,759 --> 00:00:18,020
right how about now

5
00:00:19,820 --> 00:00:28,349
one is that okay I can get closer okay

6
00:00:25,980 --> 00:00:30,240
so about two years ago I got a phone

7
00:00:28,349 --> 00:00:33,210
call from our CEO

8
00:00:30,240 --> 00:00:35,910
I told me hey we're we're building

9
00:00:33,210 --> 00:00:39,989
something for a server less and we want

10
00:00:35,910 --> 00:00:43,260
you to come and help us make it secure

11
00:00:39,989 --> 00:00:46,169
and defense help us defend our customers

12
00:00:43,260 --> 00:00:50,190
of course I said let me think about it

13
00:00:46,170 --> 00:00:54,629
then the minute I hang up went to Google

14
00:00:50,190 --> 00:00:57,030
and said what is server less and there

15
00:00:54,629 --> 00:00:59,430
wasn't too much information out there

16
00:00:57,030 --> 00:01:01,829
two years ago there was some basically

17
00:00:59,430 --> 00:01:05,159
mostly around lambda functions and other

18
00:01:01,829 --> 00:01:07,950
cloud functions so then I went and said

19
00:01:05,159 --> 00:01:10,830
server less I wrote server less security

20
00:01:07,950 --> 00:01:15,240
and there was none really

21
00:01:10,830 --> 00:01:18,240
nothing so I did some research and I

22
00:01:15,240 --> 00:01:21,689
found it that it's interesting because

23
00:01:18,240 --> 00:01:24,330
it's a little bit different it's similar

24
00:01:21,689 --> 00:01:27,240
to what we might we might be familiar

25
00:01:24,330 --> 00:01:29,340
with web applications and cloud but it

26
00:01:27,240 --> 00:01:33,750
has some other angle to it

27
00:01:29,340 --> 00:01:35,100
and in this talk I'm gonna show what is

28
00:01:33,750 --> 00:01:40,020
the difference and how we should

29
00:01:35,100 --> 00:01:42,360
approach serverless applications okay so

30
00:01:40,020 --> 00:01:45,149
I'm working at a company called proteger

31
00:01:42,360 --> 00:01:48,600
labs we have a service security solution

32
00:01:45,149 --> 00:01:51,509
if that interests you come find me after

33
00:01:48,600 --> 00:01:54,839
the talk if you want to find me on

34
00:01:51,509 --> 00:01:57,299
either of this make sure that if you

35
00:01:54,840 --> 00:02:02,490
like the talk to follow me on Twitter

36
00:01:57,299 --> 00:02:05,310
all right the agenda will start with

37
00:02:02,490 --> 00:02:08,549
some basic information about what

38
00:02:05,310 --> 00:02:13,200
services several a security how it works

39
00:02:08,550 --> 00:02:14,550
so we'll have some base ground to work

40
00:02:13,200 --> 00:02:17,609
with

41
00:02:14,550 --> 00:02:20,960
that will see some demos about how we

42
00:02:17,610 --> 00:02:24,180
can hack into serverless applications or

43
00:02:20,960 --> 00:02:27,470
have some fun exploited get some

44
00:02:24,180 --> 00:02:30,240
information out of the cloud account

45
00:02:27,470 --> 00:02:33,510
gonna mention some related work I've

46
00:02:30,240 --> 00:02:36,660
been working for on and then if we have

47
00:02:33,510 --> 00:02:39,239
some time for questions although my

48
00:02:36,660 --> 00:02:45,390
hearing isn't that well so if you have

49
00:02:39,240 --> 00:02:48,480
questions please shout them okay so just

50
00:02:45,390 --> 00:02:50,579
a disclaimer before we start in this

51
00:02:48,480 --> 00:02:51,619
presentation I'm not going to tell you

52
00:02:50,580 --> 00:02:53,310
or show you

53
00:02:51,620 --> 00:02:55,170
vulnerabilities inside the

54
00:02:53,310 --> 00:02:58,739
infrastructure actually server less

55
00:02:55,170 --> 00:03:02,850
would probably make your application the

56
00:02:58,739 --> 00:03:05,400
most secure that possible up to date of

57
00:03:02,850 --> 00:03:11,459
course you'll have to work around with

58
00:03:05,400 --> 00:03:14,370
some constraints and configurations but

59
00:03:11,459 --> 00:03:19,049
it could really work well as in term of

60
00:03:14,370 --> 00:03:22,799
security most of the examples will be on

61
00:03:19,049 --> 00:03:26,489
AWS because it's the most common one but

62
00:03:22,799 --> 00:03:28,560
most of them also apply to other service

63
00:03:26,489 --> 00:03:31,730
provider that way or another if you're

64
00:03:28,560 --> 00:03:36,510
interested come talk to me after the

65
00:03:31,730 --> 00:03:39,390
after this talk beg for forgiveness you

66
00:03:36,510 --> 00:03:41,790
might see some other con logos here and

67
00:03:39,390 --> 00:03:45,869
there on the videos because I was

68
00:03:41,790 --> 00:03:48,410
prepping them for multiple ones so let's

69
00:03:45,870 --> 00:03:51,000
start with some basic ground what is

70
00:03:48,410 --> 00:03:54,780
service why people are moving to server

71
00:03:51,000 --> 00:03:58,739
less so we started in the late 80s or

72
00:03:54,780 --> 00:04:00,230
90s on-prem where everything was where

73
00:03:58,739 --> 00:04:04,440
the company that developed the

74
00:04:00,230 --> 00:04:08,540
application was building was having to

75
00:04:04,440 --> 00:04:12,019
deal with all the the resources and

76
00:04:08,540 --> 00:04:15,298
configurations skipping ahead

77
00:04:12,019 --> 00:04:18,120
we have containers everyone knows about

78
00:04:15,299 --> 00:04:19,500
containers nowadays but we still have to

79
00:04:18,120 --> 00:04:22,200
deal with some setups

80
00:04:19,500 --> 00:04:24,390
patching the environments making sure we

81
00:04:22,200 --> 00:04:26,219
don't have open ports open services we

82
00:04:24,390 --> 00:04:27,870
don't actually know what in there if we

83
00:04:26,220 --> 00:04:30,330
downloaded

84
00:04:27,870 --> 00:04:33,300
container might be some things that we

85
00:04:30,330 --> 00:04:35,430
need to configure of course the scale

86
00:04:33,300 --> 00:04:37,889
and of course we have to take care about

87
00:04:35,430 --> 00:04:41,639
applications so when we move to the

88
00:04:37,889 --> 00:04:43,919
cloud we don't have to deal with any of

89
00:04:41,639 --> 00:04:46,320
that it's all given by the service

90
00:04:43,919 --> 00:04:49,229
provider all we have to do is write up

91
00:04:46,320 --> 00:04:52,050
some code which is the logic of the

92
00:04:49,230 --> 00:04:53,910
application and make some small

93
00:04:52,050 --> 00:04:55,560
configurations about mostly about

94
00:04:53,910 --> 00:04:58,260
permissions and environment variables

95
00:04:55,560 --> 00:05:00,570
and packages but that's it everything

96
00:04:58,260 --> 00:05:02,310
else is taken care of so that means you

97
00:05:00,570 --> 00:05:04,099
don't have to patch you don't have to

98
00:05:02,310 --> 00:05:11,640
scale you don't have to do anything else

99
00:05:04,100 --> 00:05:16,320
okay right so is service really a thing

100
00:05:11,640 --> 00:05:17,880
how many of you heard about service ok

101
00:05:16,320 --> 00:05:20,430
that's about right how many of you

102
00:05:17,880 --> 00:05:23,880
actually dealt with lambda functions or

103
00:05:20,430 --> 00:05:27,950
cloud functions ok cool

104
00:05:23,880 --> 00:05:31,430
so what we see from our customers and

105
00:05:27,950 --> 00:05:33,900
what we see around is that many

106
00:05:31,430 --> 00:05:38,690
companies and very big companies and

107
00:05:33,900 --> 00:05:41,640
also startups are starting at least

108
00:05:38,690 --> 00:05:44,910
experimenting with server less and we

109
00:05:41,640 --> 00:05:46,770
believe this is the future of especially

110
00:05:44,910 --> 00:05:48,260
of cloud computing so this is why we

111
00:05:46,770 --> 00:05:53,659
were there

112
00:05:48,260 --> 00:05:58,169
ok so his server less security a thing

113
00:05:53,660 --> 00:06:03,780
it wasn't until recently on the last

114
00:05:58,169 --> 00:06:06,450
three invent AWS showed this this

115
00:06:03,780 --> 00:06:09,239
presentation where they mentioned that

116
00:06:06,450 --> 00:06:12,599
service was the most hot topic over the

117
00:06:09,240 --> 00:06:18,410
whole event and right after that was

118
00:06:12,600 --> 00:06:22,289
security so of course from a nature as a

119
00:06:18,410 --> 00:06:26,160
security person I don't trust them so I

120
00:06:22,289 --> 00:06:28,590
went ahead and I went on Google trend

121
00:06:26,160 --> 00:06:31,410
and I checked so let's start with

122
00:06:28,590 --> 00:06:34,140
serverless computing I'm just setting

123
00:06:31,410 --> 00:06:38,010
some configurations let's see the world

124
00:06:34,140 --> 00:06:40,360
wide and the past five years and you can

125
00:06:38,010 --> 00:06:42,729
see that there is a constant rise

126
00:06:40,360 --> 00:06:45,310
in dealing with surveillance and we

127
00:06:42,729 --> 00:06:48,400
believe it's going to grow and grow so

128
00:06:45,310 --> 00:06:50,050
then I said of course the first thing

129
00:06:48,400 --> 00:06:51,580
that you do when you develop survey less

130
00:06:50,050 --> 00:06:53,259
is going to check about serverless

131
00:06:51,580 --> 00:06:56,530
security because you don't want people

132
00:06:53,259 --> 00:07:01,629
to hack your service applications and of

133
00:06:56,530 --> 00:07:08,590
course this is the result constantly

134
00:07:01,629 --> 00:07:12,189
from zero to one in three years and I'm

135
00:07:08,590 --> 00:07:14,590
pretty sure the one is me so I don't

136
00:07:12,189 --> 00:07:17,080
know if you're dealing with server less

137
00:07:14,590 --> 00:07:19,060
because you raised your hand at least if

138
00:07:17,080 --> 00:07:20,859
you're not in the attacking side make

139
00:07:19,060 --> 00:07:22,750
sure you're you know there is a

140
00:07:20,860 --> 00:07:25,509
difference and you have to do something

141
00:07:22,750 --> 00:07:29,289
different and it not gonna work for you

142
00:07:25,509 --> 00:07:33,699
to keep your currently security controls

143
00:07:29,289 --> 00:07:49,750
I mean at least not all of them so let's

144
00:07:33,699 --> 00:07:53,199
see how and why okay so what do I mean

145
00:07:49,750 --> 00:07:58,150
server less applications where do your

146
00:07:53,199 --> 00:08:00,940
application leave so when you want to

147
00:07:58,150 --> 00:08:03,698
have your code running because there are

148
00:08:00,940 --> 00:08:06,729
no servers well there are servers of

149
00:08:03,699 --> 00:08:08,560
course it's just not not yours you have

150
00:08:06,729 --> 00:08:12,669
to write your code somewhere in has to

151
00:08:08,560 --> 00:08:14,860
run somewhere so the provider gives you

152
00:08:12,669 --> 00:08:18,068
a single purpose container that will

153
00:08:14,860 --> 00:08:21,069
take your code just for the execution

154
00:08:18,069 --> 00:08:23,409
time we'll run it and when it's done

155
00:08:21,069 --> 00:08:26,080
it's supposed to go away so it doesn't

156
00:08:23,409 --> 00:08:30,339
leave anymore so we have this container

157
00:08:26,080 --> 00:08:35,588
and we have some some of the providers

158
00:08:30,339 --> 00:08:38,169
inside so iws Google IBM SAP all the big

159
00:08:35,589 --> 00:08:42,539
ones so this is another reason why we

160
00:08:38,169 --> 00:08:45,279
know it's a thing everyone goes there so

161
00:08:42,539 --> 00:08:48,939
what are these containers first of all

162
00:08:45,279 --> 00:08:51,880
they're read-only except from

163
00:08:48,940 --> 00:08:54,100
slash temp sorry except from the slash

164
00:08:51,880 --> 00:08:56,170
temp like

165
00:08:54,100 --> 00:08:58,089
folder which is where you're going to

166
00:08:56,170 --> 00:09:01,930
write your data into so everything else

167
00:08:58,089 --> 00:09:04,690
if you read only during the the

168
00:09:01,930 --> 00:09:05,649
containers and within the containers

169
00:09:04,690 --> 00:09:10,420
your code

170
00:09:05,649 --> 00:09:13,480
they are spin up on events triggered by

171
00:09:10,420 --> 00:09:16,750
events so it's not necessarily calling

172
00:09:13,480 --> 00:09:19,569
them directly I mean you can use API

173
00:09:16,750 --> 00:09:22,389
gateway and rest api is to trigger your

174
00:09:19,569 --> 00:09:26,620
functions but that's not the only case

175
00:09:22,389 --> 00:09:29,110
it might be 70% of the current cases at

176
00:09:26,620 --> 00:09:31,480
least pretty much what we saw but it's

177
00:09:29,110 --> 00:09:33,880
not the only case you have emails that

178
00:09:31,480 --> 00:09:36,339
triggers functions directly you have

179
00:09:33,880 --> 00:09:40,990
logs the triggers function you have

180
00:09:36,339 --> 00:09:43,569
files you have IOT like I like MQTT

181
00:09:40,990 --> 00:09:45,910
protocol you have sorry for the typo you

182
00:09:43,569 --> 00:09:48,279
have authentication services that will

183
00:09:45,910 --> 00:09:51,790
automatically trigger functions in code

184
00:09:48,279 --> 00:09:54,670
in your background and there are some

185
00:09:51,790 --> 00:09:57,849
many other events that could trigger

186
00:09:54,670 --> 00:10:00,719
your function your code so in the

187
00:09:57,850 --> 00:10:03,639
development perspective this is crazy

188
00:10:00,720 --> 00:10:05,800
interesting because you don't have to

189
00:10:03,639 --> 00:10:08,730
actually wait for a request coming in

190
00:10:05,800 --> 00:10:12,399
you can trigger your code to run on

191
00:10:08,730 --> 00:10:15,250
various of other changes of a database

192
00:10:12,399 --> 00:10:17,649
so your database will change and you

193
00:10:15,250 --> 00:10:20,230
want to trigger a code that will process

194
00:10:17,649 --> 00:10:22,720
that so that is very nice in the

195
00:10:20,230 --> 00:10:24,730
development perspective but it also has

196
00:10:22,720 --> 00:10:28,180
of course its security perspectives

197
00:10:24,730 --> 00:10:32,439
which we will talk talk about so I said

198
00:10:28,180 --> 00:10:34,680
the environment is read-only the older

199
00:10:32,439 --> 00:10:37,810
data that you actually want to write

200
00:10:34,680 --> 00:10:41,920
which is not permanent your right into

201
00:10:37,810 --> 00:10:45,279
the slash temp and when the code finish

202
00:10:41,920 --> 00:10:48,370
the container dies and within all this

203
00:10:45,279 --> 00:10:52,779
data so it's a temporary data of course

204
00:10:48,370 --> 00:10:55,660
this is not entirely true because to

205
00:10:52,779 --> 00:10:58,029
keep on performance what's happening is

206
00:10:55,660 --> 00:11:01,120
that the providers will keep your

207
00:10:58,029 --> 00:11:04,569
containers as long as requests are

208
00:11:01,120 --> 00:11:06,309
coming you're not going to know on which

209
00:11:04,569 --> 00:11:07,810
container you're going to land but

210
00:11:06,309 --> 00:11:10,600
they're probably going to

211
00:11:07,810 --> 00:11:13,359
be some data inside if this is a

212
00:11:10,600 --> 00:11:16,000
container if this code writes into slash

213
00:11:13,360 --> 00:11:19,120
tamp and it is triggered pretty often

214
00:11:16,000 --> 00:11:21,250
that if you're getting access to this to

215
00:11:19,120 --> 00:11:23,350
this container you might have to you

216
00:11:21,250 --> 00:11:26,260
might find some information inside slash

217
00:11:23,350 --> 00:11:30,520
data a slash temp so this is something

218
00:11:26,260 --> 00:11:33,790
that you want to take into account okay

219
00:11:30,520 --> 00:11:37,350
the source code also reside in a

220
00:11:33,790 --> 00:11:41,079
container so what happens is that when

221
00:11:37,350 --> 00:11:44,230
your first trigger comes up and triggers

222
00:11:41,080 --> 00:11:47,290
your code what's happening is that the

223
00:11:44,230 --> 00:11:50,050
container spins up and winds within the

224
00:11:47,290 --> 00:11:52,510
container the code is mounted from

225
00:11:50,050 --> 00:11:56,040
taking from other cloud resources and

226
00:11:52,510 --> 00:11:58,240
then your code will run on this

227
00:11:56,040 --> 00:12:02,349
environment it's all Linux environments

228
00:11:58,240 --> 00:12:07,330
or if it's as your as your it's it's IAS

229
00:12:02,350 --> 00:12:09,730
or different containers so this is where

230
00:12:07,330 --> 00:12:11,290
the source code leaves and again if you

231
00:12:09,730 --> 00:12:18,030
have access to the container and we'll

232
00:12:11,290 --> 00:12:23,880
see you want to get there also another

233
00:12:18,030 --> 00:12:27,970
link to that same directory is proc one

234
00:12:23,880 --> 00:12:30,850
and you can also get there the source

235
00:12:27,970 --> 00:12:32,560
code from that directory another

236
00:12:30,850 --> 00:12:35,200
interesting thing is that your

237
00:12:32,560 --> 00:12:37,979
environment variables also leave there

238
00:12:35,200 --> 00:12:40,150
and you can get them by either of those

239
00:12:37,980 --> 00:12:42,310
why is the environment variables

240
00:12:40,150 --> 00:12:45,520
interesting so a part of the fact that

241
00:12:42,310 --> 00:12:49,030
you might want people or companies might

242
00:12:45,520 --> 00:12:50,650
write their own keys into these

243
00:12:49,030 --> 00:12:54,610
environment variables for different

244
00:12:50,650 --> 00:12:56,140
resources there are built-in keys inside

245
00:12:54,610 --> 00:12:59,080
these environment variables especially

246
00:12:56,140 --> 00:13:02,110
if you're using AWS your Landa function

247
00:12:59,080 --> 00:13:06,010
keys will be there and why do I care

248
00:13:02,110 --> 00:13:08,400
because these keys have the permissions

249
00:13:06,010 --> 00:13:11,260
in the account in the cloud account of

250
00:13:08,400 --> 00:13:15,370
the function so if I manage to get them

251
00:13:11,260 --> 00:13:18,580
out i from my home or my computer or

252
00:13:15,370 --> 00:13:21,080
wherever I am can do the same thing as

253
00:13:18,580 --> 00:13:23,270
the function in the account

254
00:13:21,080 --> 00:13:27,590
and more of course depends on the

255
00:13:23,270 --> 00:13:31,310
permissions and we'll get into that okay

256
00:13:27,590 --> 00:13:34,490
so I said it's ephemeral it's also

257
00:13:31,310 --> 00:13:37,189
stateless when a code runs it doesn't

258
00:13:34,490 --> 00:13:39,710
know automatically there is no session

259
00:13:37,190 --> 00:13:43,100
usually so it doesn't really know what

260
00:13:39,710 --> 00:13:45,950
was before what's happening after these

261
00:13:43,100 --> 00:13:48,880
are all different micro services or even

262
00:13:45,950 --> 00:13:51,800
nano services depends that runs

263
00:13:48,880 --> 00:13:54,830
individually into a big picture of the

264
00:13:51,800 --> 00:13:59,000
application and as a developer you have

265
00:13:54,830 --> 00:14:03,890
to somehow connect all the dots but also

266
00:13:59,000 --> 00:14:07,010
make sure you can make them secure so

267
00:14:03,890 --> 00:14:12,100
you have to take care of the for example

268
00:14:07,010 --> 00:14:14,660
your access control on each of your

269
00:14:12,100 --> 00:14:16,640
functions or each of your resources

270
00:14:14,660 --> 00:14:19,209
there are ways to do that authentication

271
00:14:16,640 --> 00:14:22,010
you have to make sure each of your

272
00:14:19,210 --> 00:14:23,930
functions is taking care of

273
00:14:22,010 --> 00:14:27,470
authentication but it's not that easy

274
00:14:23,930 --> 00:14:30,140
because if you're not coming from a from

275
00:14:27,470 --> 00:14:33,770
a REST API and you might not have the

276
00:14:30,140 --> 00:14:35,689
authorization header if it's an it's

277
00:14:33,770 --> 00:14:37,910
it's a lambda or a code that runs

278
00:14:35,690 --> 00:14:40,460
because an email was sent

279
00:14:37,910 --> 00:14:42,709
how do you make sure the user is

280
00:14:40,460 --> 00:14:45,440
authenticated or within the organization

281
00:14:42,710 --> 00:14:47,420
because emails can be spoofed of course

282
00:14:45,440 --> 00:14:55,070
so we'll see a demo about that as well

283
00:14:47,420 --> 00:14:58,969
okay so this is example an example this

284
00:14:55,070 --> 00:15:04,450
is manipulation that has an internal

285
00:14:58,970 --> 00:15:08,780
service environment were developers

286
00:15:04,450 --> 00:15:11,660
commit codes into a repository and in

287
00:15:08,780 --> 00:15:13,069
order for the manager to or the whoever

288
00:15:11,660 --> 00:15:15,680
the leader team leader of the

289
00:15:13,070 --> 00:15:18,980
development to review the code there is

290
00:15:15,680 --> 00:15:23,380
a triggered email that is sent directly

291
00:15:18,980 --> 00:15:29,450
to the manager saying hey new code was

292
00:15:23,380 --> 00:15:32,750
there is a new PR go and check the code

293
00:15:29,450 --> 00:15:34,790
to approve it but if if the email if the

294
00:15:32,750 --> 00:15:37,940
attacker has some

295
00:15:34,790 --> 00:15:40,370
internal knowledge and it once he wants

296
00:15:37,940 --> 00:15:43,610
to send oh he knows the email that

297
00:15:40,370 --> 00:15:46,280
supposed to be sent to the environment

298
00:15:43,610 --> 00:15:48,170
to the access to the manager he can send

299
00:15:46,280 --> 00:15:51,850
it directly it spoofed email of course

300
00:15:48,170 --> 00:15:55,250
this will trigger code and then a

301
00:15:51,850 --> 00:15:56,900
function will rise will take actions

302
00:15:55,250 --> 00:16:01,910
according to your email I don't know

303
00:15:56,900 --> 00:16:04,840
it's just a scenario that is triggered

304
00:16:01,910 --> 00:16:11,329
by email so how do you take care of that

305
00:16:04,840 --> 00:16:14,720
another very important aspect in service

306
00:16:11,330 --> 00:16:17,980
applications is the I M roles the access

307
00:16:14,720 --> 00:16:21,170
control so as I said each function

308
00:16:17,980 --> 00:16:23,510
within the account within the cloud

309
00:16:21,170 --> 00:16:26,630
account has a different permission

310
00:16:23,510 --> 00:16:29,270
within the account and you as a

311
00:16:26,630 --> 00:16:31,490
developer have to make sure your

312
00:16:29,270 --> 00:16:36,530
function has the right permissions in

313
00:16:31,490 --> 00:16:40,910
the account guess what they don't we

314
00:16:36,530 --> 00:16:43,760
found that more than 95% of the function

315
00:16:40,910 --> 00:16:47,270
has some level of other permissions

316
00:16:43,760 --> 00:16:49,510
because it's hard there are ok this is

317
00:16:47,270 --> 00:16:51,920
easy for one function but if you have

318
00:16:49,510 --> 00:16:54,110
hundreds of functions and they

319
00:16:51,920 --> 00:16:56,449
constantly changing how do you do that

320
00:16:54,110 --> 00:16:59,510
how do you choose if we're talking about

321
00:16:56,450 --> 00:17:02,450
AWS they have more than 5,000 different

322
00:16:59,510 --> 00:17:04,730
permissions so think about the developer

323
00:17:02,450 --> 00:17:07,790
he knows how to write code of course his

324
00:17:04,730 --> 00:17:11,030
function goes works now you tell him hey

325
00:17:07,790 --> 00:17:13,250
make this function secure so he goes

326
00:17:11,030 --> 00:17:16,520
into the documentation and gets lost

327
00:17:13,250 --> 00:17:19,220
because there are so many of them so he

328
00:17:16,520 --> 00:17:22,010
probably go into the Stack Overflow or

329
00:17:19,220 --> 00:17:25,310
something like that and we'll find the

330
00:17:22,010 --> 00:17:29,410
right permissions and I'm gonna tell you

331
00:17:25,310 --> 00:17:29,409
he's gone sorry he's gonna have some

332
00:17:30,100 --> 00:17:35,949
apologize

333
00:17:32,480 --> 00:17:41,029
he's gonna have some wild cards inside

334
00:17:35,950 --> 00:17:44,179
which means that if you get these keys

335
00:17:41,029 --> 00:17:46,820
as an attacker you want you can do some

336
00:17:44,179 --> 00:17:50,450
damage in the account so this is how in

337
00:17:46,820 --> 00:17:52,789
AWS you define permissions this is

338
00:17:50,450 --> 00:17:57,500
example of permissions to buckets

339
00:17:52,789 --> 00:17:58,070
bucketz a3 cloud storage this is very

340
00:17:57,500 --> 00:18:02,299
common

341
00:17:58,070 --> 00:18:05,539
there were many there was in the news

342
00:18:02,299 --> 00:18:08,980
lately many attacks or many breaches

343
00:18:05,539 --> 00:18:12,590
that occurs due to that specific

344
00:18:08,980 --> 00:18:15,169
permission so f3 we have two things here

345
00:18:12,590 --> 00:18:17,178
we have the action and the resource so

346
00:18:15,169 --> 00:18:20,299
as you can see in this example the

347
00:18:17,179 --> 00:18:23,480
action is set to a3 wild card which

348
00:18:20,299 --> 00:18:26,059
means that the permission of this

349
00:18:23,480 --> 00:18:29,210
specific function can do anything any

350
00:18:26,059 --> 00:18:32,090
action that is related to three buckets

351
00:18:29,210 --> 00:18:34,519
that means creating buckets deleting

352
00:18:32,090 --> 00:18:39,980
buckets changing permissions to buckets

353
00:18:34,519 --> 00:18:43,730
so making internal buckets public for

354
00:18:39,980 --> 00:18:45,769
example which happened recently adding

355
00:18:43,730 --> 00:18:48,110
resources reading resources whatever you

356
00:18:45,769 --> 00:18:50,809
want and the second part which is the

357
00:18:48,110 --> 00:18:54,080
resource tells you that the specific

358
00:18:50,809 --> 00:18:57,769
function can do not only any action but

359
00:18:54,080 --> 00:19:00,620
on every bucket in the account so that

360
00:18:57,769 --> 00:19:04,370
means that if you get that access you

361
00:19:00,620 --> 00:19:06,678
can not only poke into a bucket relates

362
00:19:04,370 --> 00:19:09,350
to this specific application but you can

363
00:19:06,679 --> 00:19:12,320
do whatever you want to any cloud

364
00:19:09,350 --> 00:19:14,840
storage within the organization you can

365
00:19:12,320 --> 00:19:16,309
do a lot of damage there you can find

366
00:19:14,840 --> 00:19:20,330
all of it a lot of interesting

367
00:19:16,309 --> 00:19:22,610
information there there is actually a

368
00:19:20,330 --> 00:19:25,250
website I think it's called

369
00:19:22,610 --> 00:19:28,100
grey warfare it's like the showdown of

370
00:19:25,250 --> 00:19:31,070
the a of the buckets so if you go there

371
00:19:28,100 --> 00:19:33,769
I do not add the links or about that if

372
00:19:31,070 --> 00:19:36,700
you go there they have lists of I don't

373
00:19:33,769 --> 00:19:39,679
know I think it's millions now of

374
00:19:36,700 --> 00:19:42,289
resources and back heads that are public

375
00:19:39,679 --> 00:19:44,389
so you can see a lot of sensitive

376
00:19:42,289 --> 00:19:45,890
information over there okay so your

377
00:19:44,389 --> 00:19:47,600
developer did that but you know

378
00:19:45,890 --> 00:19:48,950
something about security so you tell him

379
00:19:47,600 --> 00:19:51,020
that's not good enough

380
00:19:48,950 --> 00:19:53,660
go and find me some better permissions

381
00:19:51,020 --> 00:19:56,750
so he goes and finds that you can limit

382
00:19:53,660 --> 00:19:59,630
the permission to a specific bucket so

383
00:19:56,750 --> 00:20:02,570
in this case the function now can only

384
00:19:59,630 --> 00:20:05,500
do oh you can do whatever it wants but

385
00:20:02,570 --> 00:20:08,450
only to a specific bucket which is nice

386
00:20:05,500 --> 00:20:10,220
but if you really want to go into

387
00:20:08,450 --> 00:20:12,230
security you're going to do something

388
00:20:10,220 --> 00:20:15,080
like that if your function only reads

389
00:20:12,230 --> 00:20:17,630
data from the specific bucket you can

390
00:20:15,080 --> 00:20:20,300
give it a specific permission that tells

391
00:20:17,630 --> 00:20:23,660
tells the function you are not you are

392
00:20:20,300 --> 00:20:26,870
only allowed to get an object one

393
00:20:23,660 --> 00:20:30,170
specific object or any other object but

394
00:20:26,870 --> 00:20:32,149
only get one object at a time from this

395
00:20:30,170 --> 00:20:35,300
specific bucket so this is a huge

396
00:20:32,150 --> 00:20:38,330
advantage if you think about it in the

397
00:20:35,300 --> 00:20:41,210
app SEC perspective this is crazy this

398
00:20:38,330 --> 00:20:42,860
is so nice you can really limit your

399
00:20:41,210 --> 00:20:47,090
permission and attack surface within

400
00:20:42,860 --> 00:20:49,790
your cloud account but this is not

401
00:20:47,090 --> 00:20:52,790
really happening too often and you can

402
00:20:49,790 --> 00:20:55,879
find a lot of functions that are over

403
00:20:52,790 --> 00:20:58,159
permissive this is because for one

404
00:20:55,880 --> 00:21:02,750
function it might be easy but for a lot

405
00:20:58,160 --> 00:21:05,450
of them it's gonna be hard okay so we

406
00:21:02,750 --> 00:21:09,170
know where applications there are one

407
00:21:05,450 --> 00:21:11,180
way usually an HTTP could be a tcp or

408
00:21:09,170 --> 00:21:16,010
any other protocol but there is usually

409
00:21:11,180 --> 00:21:19,070
one way in where the attack goes to try

410
00:21:16,010 --> 00:21:20,870
your application to exploit your

411
00:21:19,070 --> 00:21:23,960
application and you're probably gonna

412
00:21:20,870 --> 00:21:28,070
put all your security controls and all

413
00:21:23,960 --> 00:21:30,560
your guards on that entrance but when

414
00:21:28,070 --> 00:21:32,620
you talk about server less it's not the

415
00:21:30,560 --> 00:21:36,080
same they can come from a REST API

416
00:21:32,620 --> 00:21:39,860
gateway but they can also trigger code

417
00:21:36,080 --> 00:21:43,100
from files from analytics from emails

418
00:21:39,860 --> 00:21:48,020
from logs how do you defend against that

419
00:21:43,100 --> 00:21:50,840
so we'll see what you can actually do so

420
00:21:48,020 --> 00:21:53,150
I said rest api is okay we know them but

421
00:21:50,840 --> 00:21:55,189
we can also use three party applications

422
00:21:53,150 --> 00:21:57,440
and we'll see that in a second Cloud

423
00:21:55,190 --> 00:21:59,179
Storage can trigger authentication

424
00:21:57,440 --> 00:22:01,659
service logs

425
00:21:59,179 --> 00:22:05,389
can trigger code IOT emails

426
00:22:01,659 --> 00:22:13,039
notifications and of course code changes

427
00:22:05,389 --> 00:22:15,879
like commits etc okay so now yeah now

428
00:22:13,039 --> 00:22:20,089
we're gonna see some demos of some

429
00:22:15,879 --> 00:22:22,820
examples that you can see why this is

430
00:22:20,089 --> 00:22:26,479
different and what you have to do in

431
00:22:22,820 --> 00:22:29,029
order to exploit service applications so

432
00:22:26,479 --> 00:22:32,359
this first environment we have a slack

433
00:22:29,029 --> 00:22:35,839
channel that an application the

434
00:22:32,359 --> 00:22:39,259
organization wrote chat bot that

435
00:22:35,839 --> 00:22:42,080
interacts with the user so you can be a

436
00:22:39,259 --> 00:22:45,950
sale a support chat bot set user rights

437
00:22:42,080 --> 00:22:48,139
some messages and about chat bot

438
00:22:45,950 --> 00:22:51,710
responds according to the messages these

439
00:22:48,139 --> 00:22:55,908
messages goes to a slack the slack API

440
00:22:51,710 --> 00:22:59,419
of course then it goes to the API

441
00:22:55,909 --> 00:23:02,269
gateway and triggers a function the

442
00:22:59,419 --> 00:23:04,969
function takes the messages writes them

443
00:23:02,269 --> 00:23:07,399
into a dynamo DB table which is a no

444
00:23:04,969 --> 00:23:10,820
sequel database and responds back

445
00:23:07,399 --> 00:23:13,149
according to what you wrote so let's see

446
00:23:10,820 --> 00:23:13,149
a demo

447
00:23:21,650 --> 00:23:30,020
okay so a lot of screens here but you

448
00:23:26,930 --> 00:23:32,780
can see on the top left the chat the

449
00:23:30,020 --> 00:23:33,830
slack chat and the bot that responds to

450
00:23:32,780 --> 00:23:37,070
the user

451
00:23:33,830 --> 00:23:38,720
so first I'm interacting with it but now

452
00:23:37,070 --> 00:23:40,850
I want to know and check if it's

453
00:23:38,720 --> 00:23:43,760
vulnerable let's say I already know that

454
00:23:40,850 --> 00:23:46,189
it uses some vulnerable dependencies so

455
00:23:43,760 --> 00:23:48,250
I found in the internet this exploit

456
00:23:46,190 --> 00:23:52,370
which relates to a specific

457
00:23:48,250 --> 00:23:54,559
vulnerability inside this application

458
00:23:52,370 --> 00:23:57,409
again the attacks will probably be the

459
00:23:54,559 --> 00:23:59,570
same as on web application but there are

460
00:23:57,410 --> 00:24:01,820
two main differences the first one is

461
00:23:59,570 --> 00:24:03,800
that you can trigger them differently

462
00:24:01,820 --> 00:24:05,689
and the second one is the information

463
00:24:03,800 --> 00:24:08,059
that you want to get out and how you

464
00:24:05,690 --> 00:24:10,070
exploit because if you're gonna do a pen

465
00:24:08,059 --> 00:24:11,990
test for example and you're going to

466
00:24:10,070 --> 00:24:12,649
come with a report hey I hacked your

467
00:24:11,990 --> 00:24:16,550
container

468
00:24:12,650 --> 00:24:18,320
here's your Etsy password file no one

469
00:24:16,550 --> 00:24:20,659
cares about that in service it's a

470
00:24:18,320 --> 00:24:22,460
template that resides in to the parent

471
00:24:20,660 --> 00:24:24,440
in the container and no one cares about

472
00:24:22,460 --> 00:24:26,780
that so what you can do about it

473
00:24:24,440 --> 00:24:30,020
is something else so you want I told you

474
00:24:26,780 --> 00:24:31,700
were sensitive information is in source

475
00:24:30,020 --> 00:24:35,620
code you can find environment variables

476
00:24:31,700 --> 00:24:37,940
and how then you can go and further

477
00:24:35,620 --> 00:24:40,280
exploit the application so here I have

478
00:24:37,940 --> 00:24:43,300
some an exploit that I found in the

479
00:24:40,280 --> 00:24:45,920
Internet and I just want the first

480
00:24:43,300 --> 00:24:48,620
example I'm doing a child process exec

481
00:24:45,920 --> 00:24:51,650
and I want to see if I can get

482
00:24:48,620 --> 00:24:53,899
information out of the container so I

483
00:24:51,650 --> 00:24:57,320
send this request through the black

484
00:24:53,900 --> 00:25:00,050
slack and I can you can see the bottom

485
00:24:57,320 --> 00:25:02,750
left that I got it into my HTTP tunnel

486
00:25:00,050 --> 00:25:05,540
so this is just the first one now I want

487
00:25:02,750 --> 00:25:08,120
to extract some sensitive information so

488
00:25:05,540 --> 00:25:09,590
I'm adding an LS to see what's in the

489
00:25:08,120 --> 00:25:12,559
environment and you can see that there

490
00:25:09,590 --> 00:25:17,360
is a file called in there's a yes so

491
00:25:12,559 --> 00:25:20,420
that's interesting now I want to get the

492
00:25:17,360 --> 00:25:23,178
source code maybe so think about it is

493
00:25:20,420 --> 00:25:27,290
like you got the backend source code so

494
00:25:23,179 --> 00:25:29,830
I'm doing cats index J s I'm going to

495
00:25:27,290 --> 00:25:33,200
wrap it in base64 so I can send it over

496
00:25:29,830 --> 00:25:35,300
HTTP and then I'm going to take the

497
00:25:33,200 --> 00:25:40,100
source code into my own computer

498
00:25:35,300 --> 00:25:45,320
and further go over it and see how I can

499
00:25:40,100 --> 00:25:49,030
further exploit it so let's see so it's

500
00:25:45,320 --> 00:25:49,030
just basic c4 at the moment

501
00:25:52,480 --> 00:25:59,860
okay so echo decode and I get the source

502
00:25:57,280 --> 00:26:03,100
code the source code that runs in the

503
00:25:59,860 --> 00:26:05,379
backend so I go over the code and I see

504
00:26:03,100 --> 00:26:08,469
that information that helps the function

505
00:26:05,380 --> 00:26:11,760
interact with the slack and I can see

506
00:26:08,470 --> 00:26:15,850
that the function has a dynamo DB a

507
00:26:11,760 --> 00:26:18,340
dynamo DB code their line SDK AWS SDK

508
00:26:15,850 --> 00:26:20,620
that does if you look one line after

509
00:26:18,340 --> 00:26:23,590
that dynamo DB dot put item that means

510
00:26:20,620 --> 00:26:26,320
that the function writes into a dynamo

511
00:26:23,590 --> 00:26:28,750
DB database but I don't want to write

512
00:26:26,320 --> 00:26:30,790
into the database although I can I want

513
00:26:28,750 --> 00:26:33,340
to try and do some other and see what I

514
00:26:30,790 --> 00:26:35,350
what else I can do there so what I'm

515
00:26:33,340 --> 00:26:37,000
gonna do here is I'm gonna write a code

516
00:26:35,350 --> 00:26:39,790
because I found that there is code

517
00:26:37,000 --> 00:26:43,090
injection here and I'm going to use the

518
00:26:39,790 --> 00:26:45,700
AWS SDK in this case to run different

519
00:26:43,090 --> 00:26:48,520
code that will give me access to

520
00:26:45,700 --> 00:26:51,670
different resources within the cloud so

521
00:26:48,520 --> 00:26:55,570
if you can see here I'm doing require

522
00:26:51,670 --> 00:26:58,150
AWS SDK and HTTP because I want it and

523
00:26:55,570 --> 00:27:01,600
then I'm going to do a dynamo DB dot

524
00:26:58,150 --> 00:27:03,820
scan now the difference between scan and

525
00:27:01,600 --> 00:27:06,639
put item is that one writes into the

526
00:27:03,820 --> 00:27:08,980
database and the other one gives me the

527
00:27:06,640 --> 00:27:10,780
whole database it scares the database

528
00:27:08,980 --> 00:27:14,230
for the data so I'm going to send that

529
00:27:10,780 --> 00:27:17,080
but now I don't need a channel I don't

530
00:27:14,230 --> 00:27:19,810
need the tunnel there the end work

531
00:27:17,080 --> 00:27:22,419
tunnel because the function itself

532
00:27:19,810 --> 00:27:24,310
interacts with slacks so I can send

533
00:27:22,420 --> 00:27:26,380
myself the information through the

534
00:27:24,310 --> 00:27:28,629
select channel right and I don't need to

535
00:27:26,380 --> 00:27:31,240
know even the the information because I

536
00:27:28,630 --> 00:27:34,150
can just use the same code so as you can

537
00:27:31,240 --> 00:27:38,650
see I wrote I sent this slack message

538
00:27:34,150 --> 00:27:41,620
and I got all the data base inside the

539
00:27:38,650 --> 00:27:43,690
slack channel and I also just for the

540
00:27:41,620 --> 00:27:50,139
fun of it change the icon of the slack

541
00:27:43,690 --> 00:27:54,090
bot so as you can see this is it might

542
00:27:50,140 --> 00:27:57,340
be the most similar way to attacking

543
00:27:54,090 --> 00:27:59,770
regular applications although in this

544
00:27:57,340 --> 00:28:01,750
case you have to you want to know what

545
00:27:59,770 --> 00:28:06,429
to take out of it which is source code

546
00:28:01,750 --> 00:28:09,490
and try things like using AWS as

547
00:28:06,429 --> 00:28:11,409
case or other cloud providers SDKs

548
00:28:09,490 --> 00:28:20,919
in order to exploit the application

549
00:28:11,409 --> 00:28:23,590
further okay moving on right moving on

550
00:28:20,919 --> 00:28:26,379
we have another attack this time in the

551
00:28:23,590 --> 00:28:29,289
environment setup we're gonna see a user

552
00:28:26,379 --> 00:28:32,498
or an application that triggers code

553
00:28:29,289 --> 00:28:35,889
based on files that are uploaded into a

554
00:28:32,499 --> 00:28:40,600
bucket so the user send a request into

555
00:28:35,889 --> 00:28:43,809
the api gateway receives a signed URL so

556
00:28:40,600 --> 00:28:46,269
the user can then directly upload a file

557
00:28:43,809 --> 00:28:50,710
into the f3 bucket this is a secure way

558
00:28:46,269 --> 00:28:53,820
to do direct uploads because okay the

559
00:28:50,710 --> 00:28:57,039
bucket isn't secure it is not public and

560
00:28:53,820 --> 00:28:59,619
you get a signed URL which is valid for

561
00:28:57,039 --> 00:29:03,549
five minutes and only for the specific

562
00:28:59,619 --> 00:29:07,059
item that you are going to upload so

563
00:29:03,549 --> 00:29:08,980
that is very secure but it depends what

564
00:29:07,059 --> 00:29:11,740
happened after wise so we're getting

565
00:29:08,980 --> 00:29:14,350
secure signed URL and now we don't need

566
00:29:11,740 --> 00:29:17,470
the API gateway anymore we can directly

567
00:29:14,350 --> 00:29:21,070
upload of course the file into the s3

568
00:29:17,470 --> 00:29:24,190
bucket which is okay but when I upload

569
00:29:21,070 --> 00:29:26,080
the file into the bucket what happens

570
00:29:24,190 --> 00:29:28,360
behind the scenes is that it triggers

571
00:29:26,080 --> 00:29:29,918
another code could be the same function

572
00:29:28,360 --> 00:29:32,498
could be another function but it

573
00:29:29,919 --> 00:29:36,309
triggers the code the code the function

574
00:29:32,499 --> 00:29:40,360
then goes pull out this file that i just

575
00:29:36,309 --> 00:29:44,710
uploaded it upload uploaded and then it

576
00:29:40,360 --> 00:29:49,508
processes it so if this function is

577
00:29:44,710 --> 00:29:52,299
insecure or has some poor code then I

578
00:29:49,509 --> 00:29:54,869
can take exploit of that so again let's

579
00:29:52,299 --> 00:29:54,869
see a demo

580
00:29:58,679 --> 00:30:04,779
okay so I have an application here I'll

581
00:30:01,899 --> 00:30:07,479
discuss that application later so you

582
00:30:04,779 --> 00:30:09,100
can also have fun with it

583
00:30:07,480 --> 00:30:11,169
it's a devious say application they're

584
00:30:09,100 --> 00:30:13,360
vulnerable service application and you

585
00:30:11,169 --> 00:30:15,639
can see that in the feedback section I

586
00:30:13,360 --> 00:30:19,860
can write up some feedbacks into the

587
00:30:15,639 --> 00:30:23,740
application but there also there is also

588
00:30:19,860 --> 00:30:27,100
and it allows me to upload file to

589
00:30:23,740 --> 00:30:31,990
attach file into that feedback so I will

590
00:30:27,100 --> 00:30:35,320
upload a specific file and I will see in

591
00:30:31,990 --> 00:30:39,549
the request that I got the signed URL in

592
00:30:35,320 --> 00:30:46,330
the response for this specific file I'll

593
00:30:39,549 --> 00:30:48,730
go ahead and send that okay so now that

594
00:30:46,330 --> 00:30:51,759
I learned that I can do that I'm going

595
00:30:48,730 --> 00:30:54,639
to use a different file this time the

596
00:30:51,759 --> 00:30:57,039
file will have a curl inside the file

597
00:30:54,639 --> 00:31:00,490
name because the function is vulnerable

598
00:30:57,039 --> 00:31:03,730
to command injection which we all know

599
00:31:00,490 --> 00:31:05,740
so it's a Linux environment so what I'm

600
00:31:03,730 --> 00:31:07,149
going to do now if you can see I'm going

601
00:31:05,740 --> 00:31:10,899
to try and steal the environment

602
00:31:07,149 --> 00:31:13,809
variables which will then allow me to

603
00:31:10,899 --> 00:31:18,209
further exploit the account from within

604
00:31:13,809 --> 00:31:18,210
my computer so I upload a file

605
00:31:22,880 --> 00:31:25,810
okay

606
00:31:28,610 --> 00:31:36,139
and then on the right side you can see

607
00:31:31,309 --> 00:31:39,610
that I got some requests coming in I got

608
00:31:36,140 --> 00:31:42,470
the base64 again I'm gonna decode that

609
00:31:39,610 --> 00:31:45,529
base64 this time I'm not gonna see code

610
00:31:42,470 --> 00:31:47,899
but instead I'm going to see the

611
00:31:45,529 --> 00:31:51,590
environment variables so as I said I

612
00:31:47,899 --> 00:31:53,689
created now I can create my own AWS

613
00:31:51,590 --> 00:31:55,370
account with this or not account a

614
00:31:53,690 --> 00:31:59,269
double your session with these keys and

615
00:31:55,370 --> 00:32:01,580
you can see i just opened the AWS slash

616
00:31:59,269 --> 00:32:06,200
credentials file where i can put all my

617
00:32:01,580 --> 00:32:08,809
AWS credentials I created a new section

618
00:32:06,200 --> 00:32:12,320
and I put in these environment variables

619
00:32:08,809 --> 00:32:15,080
they are temporary at least the session

620
00:32:12,320 --> 00:32:18,769
token is temporary but they live for a

621
00:32:15,080 --> 00:32:21,799
while few minutes which can you can do

622
00:32:18,769 --> 00:32:25,059
enough damage in a few minutes and of

623
00:32:21,799 --> 00:32:30,500
course you can continue to get new keys

624
00:32:25,059 --> 00:32:32,600
with time if they if they expire so now

625
00:32:30,500 --> 00:32:34,760
I used it and you can see I'm from my

626
00:32:32,600 --> 00:32:37,399
own computer now I'm not attacking the

627
00:32:34,760 --> 00:32:40,850
function anymore from my own computer I

628
00:32:37,399 --> 00:32:43,010
can write AWS in this case AWS CLI

629
00:32:40,850 --> 00:32:47,330
commands and I can get information

630
00:32:43,010 --> 00:32:49,730
outside of the cloud account into my own

631
00:32:47,330 --> 00:32:53,480
computer and if they look at the logs

632
00:32:49,730 --> 00:32:55,760
they will see the function that is doing

633
00:32:53,480 --> 00:32:58,179
that so it's not gonna say hey there is

634
00:32:55,760 --> 00:33:01,250
another user using your credentials

635
00:32:58,179 --> 00:33:03,169
they're gonna see the function doing

636
00:33:01,250 --> 00:33:05,380
some weird stuff maybe but the function

637
00:33:03,169 --> 00:33:08,419
is doing that and you can see that I ran

638
00:33:05,380 --> 00:33:10,760
AWS s3 LS which give me the list of

639
00:33:08,419 --> 00:33:14,440
their three buckets inside the account

640
00:33:10,760 --> 00:33:18,710
I'm interested in one so I'm going to do

641
00:33:14,440 --> 00:33:22,789
LS into a specific bucket with my

642
00:33:18,710 --> 00:33:26,049
profile and I get a library folder I'm

643
00:33:22,789 --> 00:33:26,049
gonna get inside a folder

644
00:33:27,800 --> 00:33:35,360
and then check and see that there are

645
00:33:31,370 --> 00:33:38,090
two files there these are receipts so I

646
00:33:35,360 --> 00:33:46,310
will try to get the specific receipt out

647
00:33:38,090 --> 00:33:49,970
of this environment and then I was able

648
00:33:46,310 --> 00:33:54,620
to get that sending is storing it on my

649
00:33:49,970 --> 00:33:56,360
computer and then of course if I want to

650
00:33:54,620 --> 00:33:57,320
do damage then I can change those

651
00:33:56,360 --> 00:33:59,929
receipts

652
00:33:57,320 --> 00:34:02,090
maybe then upload different receipts

653
00:33:59,930 --> 00:34:05,870
with my name and then call the support

654
00:34:02,090 --> 00:34:08,299
and say hey I put up an order it did not

655
00:34:05,870 --> 00:34:10,839
get I did not get it they will go and

656
00:34:08,300 --> 00:34:13,820
check and will see the receipts and then

657
00:34:10,840 --> 00:34:17,929
or you can send them to send it to them

658
00:34:13,820 --> 00:34:22,130
and then you you you might get your your

659
00:34:17,929 --> 00:34:27,040
fake ID purchase and you can see that I

660
00:34:22,130 --> 00:34:27,040
upload a new receipt into the account

661
00:34:29,870 --> 00:34:39,440
okay s3 an API gateway are still pretty

662
00:34:34,130 --> 00:34:42,050
standard they're not may might not be

663
00:34:39,440 --> 00:34:43,670
the most common in web applications but

664
00:34:42,050 --> 00:34:48,560
they're pretty standard so now we have

665
00:34:43,670 --> 00:34:53,750
another scenario where emails that are

666
00:34:48,560 --> 00:34:57,710
sent trigger a code so this is an

667
00:34:53,750 --> 00:35:01,610
example of C call for papers where you

668
00:34:57,710 --> 00:35:03,560
send an email with your proposal there

669
00:35:01,610 --> 00:35:06,460
is a lambda function or a code behind

670
00:35:03,560 --> 00:35:11,330
the scene that parse your your

671
00:35:06,460 --> 00:35:21,500
attachment and responds back so let's

672
00:35:11,330 --> 00:35:26,180
see how that works okay so I'm setting

673
00:35:21,500 --> 00:35:34,400
up I'm sending an email that I attach

674
00:35:26,180 --> 00:35:37,390
with my product proposal and then I

675
00:35:34,400 --> 00:35:42,770
attach a normal in a certain submission

676
00:35:37,390 --> 00:35:45,410
and I get a response back saying thank

677
00:35:42,770 --> 00:35:47,210
you all right that they this is a

678
00:35:45,410 --> 00:35:51,920
confirmation email thank you for your

679
00:35:47,210 --> 00:35:53,660
submission okay so once I did that now I

680
00:35:51,920 --> 00:35:55,400
want to do another one

681
00:35:53,660 --> 00:35:57,770
only this time I will send an evil

682
00:35:55,400 --> 00:36:00,320
submission so this is just malware okay

683
00:35:57,770 --> 00:36:08,120
I'm trying my best here so I'm sending a

684
00:36:00,320 --> 00:36:10,670
malware here but I get a response saying

685
00:36:08,120 --> 00:36:12,830
that they identified this malware and

686
00:36:10,670 --> 00:36:16,970
with a link to a verse total that

687
00:36:12,830 --> 00:36:20,240
specify that they caught me okay so

688
00:36:16,970 --> 00:36:25,060
that's not going to work but I prepared

689
00:36:20,240 --> 00:36:28,669
a treat for you so I created an exploit

690
00:36:25,060 --> 00:36:34,759
that if you can see here what it does is

691
00:36:28,670 --> 00:36:37,580
doing some AWS code to send an email in

692
00:36:34,760 --> 00:36:43,900
the name of the organization or the

693
00:36:37,580 --> 00:36:47,098
event and also I want to hijack this

694
00:36:43,900 --> 00:36:50,619
big bucket that holds all these

695
00:36:47,099 --> 00:36:53,950
submissions so then I upload this I wrap

696
00:36:50,619 --> 00:36:56,349
it I upload it to my own host doesn't

697
00:36:53,950 --> 00:36:58,660
matter where I used s3 but it doesn't

698
00:36:56,349 --> 00:37:02,980
matter you can upload it to any host and

699
00:36:58,660 --> 00:37:07,299
then I have a file named attachment that

700
00:37:02,980 --> 00:37:09,990
has will cause the lambda function to go

701
00:37:07,299 --> 00:37:17,170
and fetch this code from my remote host

702
00:37:09,990 --> 00:37:20,169
bring it down and run this code so this

703
00:37:17,170 --> 00:37:23,920
is the payload you can see this I'm

704
00:37:20,170 --> 00:37:27,670
going to try and hack this bucket here

705
00:37:23,920 --> 00:37:29,500
which is denied at the moment because

706
00:37:27,670 --> 00:37:31,359
it's it's at with the right permissions

707
00:37:29,500 --> 00:37:35,579
the bucket itself is set with the right

708
00:37:31,359 --> 00:37:36,720
permissions but the function name so oh

709
00:37:35,579 --> 00:37:39,039
sorry

710
00:37:36,720 --> 00:37:50,020
so now I'm going to upload this

711
00:37:39,039 --> 00:37:51,910
malicious file I send some notification

712
00:37:50,020 --> 00:37:54,160
along the along the way so I can see

713
00:37:51,910 --> 00:37:56,078
that things are happening and you can

714
00:37:54,160 --> 00:37:57,940
see the efficient email sent and the

715
00:37:56,079 --> 00:38:00,490
bucket was hijacked well don't believe

716
00:37:57,940 --> 00:38:03,789
me but I got a message that said the

717
00:38:00,490 --> 00:38:06,759
minute hey thank you for your submission

718
00:38:03,789 --> 00:38:09,309
you are accepted you can do that of

719
00:38:06,760 --> 00:38:12,279
course whenever I want and of course to

720
00:38:09,309 --> 00:38:16,240
get your honor rmph money click on this

721
00:38:12,279 --> 00:38:19,150
phishing site and the recipient that I

722
00:38:16,240 --> 00:38:20,950
sent set it to my own account so I can

723
00:38:19,150 --> 00:38:23,650
get it but I can set it to different

724
00:38:20,950 --> 00:38:25,450
people so if I know that someone was

725
00:38:23,650 --> 00:38:27,609
accepted I don't know he published it

726
00:38:25,450 --> 00:38:30,240
really early I can go and send him an

727
00:38:27,609 --> 00:38:33,490
email with a phishing website and then

728
00:38:30,240 --> 00:38:36,970
this is the first the the nicer apart

729
00:38:33,490 --> 00:38:39,640
where I modified the permissions to this

730
00:38:36,970 --> 00:38:42,250
bucket so now this bucket is public and

731
00:38:39,640 --> 00:38:44,730
it had some sensitive information but

732
00:38:42,250 --> 00:38:47,920
now anyone can get that that information

733
00:38:44,730 --> 00:38:50,950
because I just changed the the

734
00:38:47,920 --> 00:38:53,109
permissions of this bucket the reason

735
00:38:50,950 --> 00:38:55,240
that I was able to do that of course is

736
00:38:53,109 --> 00:38:57,700
because the function that processed the

737
00:38:55,240 --> 00:39:00,220
function the the submission

738
00:38:57,700 --> 00:39:03,399
did not have the get objects permission

739
00:39:00,220 --> 00:39:07,890
but it had a wild card allowing it to do

740
00:39:03,400 --> 00:39:14,830
whatever they want whatever it want okay

741
00:39:07,890 --> 00:39:16,900
so we see that we can we can exploit

742
00:39:14,830 --> 00:39:20,590
applications through emails which is not

743
00:39:16,900 --> 00:39:23,230
so conventional in the regular web

744
00:39:20,590 --> 00:39:25,690
applications that we know so now we're

745
00:39:23,230 --> 00:39:28,480
gonna see a live demo hopefully it will

746
00:39:25,690 --> 00:39:31,980
work and we'll finish with that so I

747
00:39:28,480 --> 00:39:37,570
have Alexa here

748
00:39:31,980 --> 00:39:41,820
let's hope it's gonna work Alexa I'm not

749
00:39:37,570 --> 00:39:44,680
sure starting me demo

750
00:39:41,820 --> 00:39:54,910
welcome to Alexa the hacking assistant

751
00:39:44,680 --> 00:39:57,819
demo please identify by let me just a

752
00:39:54,910 --> 00:40:03,279
pleasure to assist you okay so I have

753
00:39:57,820 --> 00:40:09,210
the mysql here connected it's live if

754
00:40:03,280 --> 00:40:09,210
it's not disconnected it probably is

755
00:40:12,730 --> 00:40:24,890
okay okay so I have this MySQL database

756
00:40:21,740 --> 00:40:26,930
I forgot to mention that and there is an

757
00:40:24,890 --> 00:40:29,240
application that what it does it gets

758
00:40:26,930 --> 00:40:31,220
some information through Alexa and gives

759
00:40:29,240 --> 00:40:34,399
you back information from the database

760
00:40:31,220 --> 00:40:36,950
so that could be of course I said it in

761
00:40:34,400 --> 00:40:39,830
the demo to something more juicy but it

762
00:40:36,950 --> 00:40:42,500
can be anything it can be a service that

763
00:40:39,830 --> 00:40:45,590
you want to check the weather it can be

764
00:40:42,500 --> 00:40:48,290
a service I don't know a Netflix service

765
00:40:45,590 --> 00:40:51,470
or whose service that tells you what

766
00:40:48,290 --> 00:40:55,310
episodes are available to a specific

767
00:40:51,470 --> 00:40:57,379
your own TV show not your own your

768
00:40:55,310 --> 00:41:01,640
favorite TV show so it can be whatever

769
00:40:57,380 --> 00:41:06,170
if it deals with my sequel in that case

770
00:41:01,640 --> 00:41:08,690
it might we might be able to hack it so

771
00:41:06,170 --> 00:41:13,130
there is a limitation here because Alexa

772
00:41:08,690 --> 00:41:16,640
will translate your voice into text but

773
00:41:13,130 --> 00:41:18,590
it will not translate special characters

774
00:41:16,640 --> 00:41:20,900
because there are special characters and

775
00:41:18,590 --> 00:41:22,700
it doesn't know to send them as special

776
00:41:20,900 --> 00:41:25,790
characters in order to translate them so

777
00:41:22,700 --> 00:41:28,399
there is a big limitation here so I did

778
00:41:25,790 --> 00:41:31,400
until until now the demos that we saw

779
00:41:28,400 --> 00:41:34,220
was something things that we saw in real

780
00:41:31,400 --> 00:41:38,420
application this is more an experiment

781
00:41:34,220 --> 00:41:41,419
but there are ways to do SQL injection

782
00:41:38,420 --> 00:41:43,810
without special characters and we'll see

783
00:41:41,420 --> 00:41:48,770
that in a second so let's try that again

784
00:41:43,810 --> 00:41:56,330
Alexa start hack me demo welcome to

785
00:41:48,770 --> 00:42:03,520
Alexa the hacking assistant demo please

786
00:41:56,330 --> 00:42:03,520
identify yourself what is your secret ID

787
00:42:06,490 --> 00:42:18,560
the balance for account ID 2018 is

788
00:42:11,230 --> 00:42:21,170
$15,000 you'll have to excuse me for

789
00:42:18,560 --> 00:42:26,620
this demo I didn't want to deal with

790
00:42:21,170 --> 00:42:26,620
larger numbers what is my balance

791
00:42:27,100 --> 00:42:42,620
Alexa what is my balance please identify

792
00:42:32,510 --> 00:42:45,230
yourself what is your secret ID sorry I

793
00:42:42,620 --> 00:42:52,850
can't understand the command please say

794
00:42:45,230 --> 00:42:58,280
again please identify yourself what is

795
00:42:52,850 --> 00:43:03,230
your secret ID 1 2 3 4 sorry you were

796
00:42:58,280 --> 00:43:07,850
unauthorized what is my balance please

797
00:43:03,230 --> 00:43:14,330
identify yourself what is your secret ID

798
00:43:07,850 --> 00:43:34,310
1 2 3 4 or true the balance for account

799
00:43:14,330 --> 00:43:37,790
ID 1234 or true is 1,250,000 $419 okay

800
00:43:34,310 --> 00:43:40,520
so there are ways to do some SQL

801
00:43:37,790 --> 00:43:43,250
injections injection without special

802
00:43:40,520 --> 00:43:48,190
characters if you're using int integers

803
00:43:43,250 --> 00:43:50,660
you can deviate from the original I

804
00:43:48,190 --> 00:43:53,030
integer and continue with another

805
00:43:50,660 --> 00:43:55,970
command so I was able to bypass that

806
00:43:53,030 --> 00:43:57,890
with an or true or of course something

807
00:43:55,970 --> 00:44:01,819
more like I don't know I could do even

808
00:43:57,890 --> 00:44:05,930
one two three like 1 2 3 it still

809
00:44:01,820 --> 00:44:10,850
returns true so why is it different than

810
00:44:05,930 --> 00:44:13,430
in regular application because if you go

811
00:44:10,850 --> 00:44:15,440
into Alexa development let Alexa skills

812
00:44:13,430 --> 00:44:19,660
you'll see that there are two ways to do

813
00:44:15,440 --> 00:44:19,660
that either using function

814
00:44:32,310 --> 00:44:37,560
lambda functions that are triggered

815
00:44:34,260 --> 00:44:40,200
through your voice or you give it if you

816
00:44:37,560 --> 00:44:43,650
have a server a real server god forbid

817
00:44:40,200 --> 00:44:46,350
that you can give it an API a REST API

818
00:44:43,650 --> 00:44:48,870
that it can communicate with but the

819
00:44:46,350 --> 00:44:52,259
most common one will be using the AWS

820
00:44:48,870 --> 00:44:55,560
SDK for for the lambda function that

821
00:44:52,260 --> 00:44:58,260
will be triggered from the Alexa so this

822
00:44:55,560 --> 00:45:00,270
is something that you want you probably

823
00:44:58,260 --> 00:45:03,960
won't be seeing with regular

824
00:45:00,270 --> 00:45:07,740
applications so and this is unexpected

825
00:45:03,960 --> 00:45:11,340
if you are a normal application you live

826
00:45:07,740 --> 00:45:13,859
in the abstract world for 4 years 10

827
00:45:11,340 --> 00:45:15,960
years 20 years you don't think that

828
00:45:13,860 --> 00:45:18,570
maybe someone can trigger your code

829
00:45:15,960 --> 00:45:21,300
through voice this is not something that

830
00:45:18,570 --> 00:45:23,010
you would expect so you need some other

831
00:45:21,300 --> 00:45:28,860
perspective when dealing into

832
00:45:23,010 --> 00:45:31,650
insecurities ok I saw I showed some

833
00:45:28,860 --> 00:45:34,350
examples there are many other things

834
00:45:31,650 --> 00:45:36,390
that you can do that would not probably

835
00:45:34,350 --> 00:45:40,220
not gonna work on regular applications

836
00:45:36,390 --> 00:45:44,339
for example if you deal with analytics

837
00:45:40,220 --> 00:45:46,980
AWS gives you kinases which gets a lot

838
00:45:44,340 --> 00:45:49,380
of information do some analytics and

839
00:45:46,980 --> 00:45:52,410
gives you out the output it has asked

840
00:45:49,380 --> 00:45:54,630
you it has SQL so when you want to get

841
00:45:52,410 --> 00:45:58,440
your information you actually write a

842
00:45:54,630 --> 00:46:02,070
dot SQL file which the Kinesis will use

843
00:45:58,440 --> 00:46:04,110
so if you have a dot SQL file you

844
00:46:02,070 --> 00:46:07,440
probably were not probably but you might

845
00:46:04,110 --> 00:46:11,370
have SQL injection so if you can send

846
00:46:07,440 --> 00:46:13,740
some weird commands into the application

847
00:46:11,370 --> 00:46:15,839
even through doesn't have to be directly

848
00:46:13,740 --> 00:46:18,149
to the application but anyone anything

849
00:46:15,840 --> 00:46:21,120
that will trigger logs you might

850
00:46:18,150 --> 00:46:23,600
actually be able to run back-end code

851
00:46:21,120 --> 00:46:26,160
from different locations in the account

852
00:46:23,600 --> 00:46:29,190
of course to know that it's pretty

853
00:46:26,160 --> 00:46:31,609
difficult and you might need to have

854
00:46:29,190 --> 00:46:35,430
either have some prior knowledge

855
00:46:31,610 --> 00:46:37,530
knowledge or you are inside or you found

856
00:46:35,430 --> 00:46:40,500
a vulnerability and you are trying some

857
00:46:37,530 --> 00:46:44,220
lateral movement there another example

858
00:46:40,500 --> 00:46:45,540
could be codes so if you have an open

859
00:46:44,220 --> 00:46:47,730
source code that

860
00:46:45,540 --> 00:46:50,400
has some lambda functions behind it that

861
00:46:47,730 --> 00:46:53,640
is triggered whenever someone commits a

862
00:46:50,400 --> 00:46:56,040
code you might be able to hack it with

863
00:46:53,640 --> 00:46:57,810
some metadata or even lines in the code

864
00:46:56,040 --> 00:47:00,830
depends of course what the function is

865
00:46:57,810 --> 00:47:03,870
doing again this is not so common on

866
00:47:00,830 --> 00:47:05,850
regular application how about cross-site

867
00:47:03,870 --> 00:47:08,009
scripting we all know that from web

868
00:47:05,850 --> 00:47:12,120
applications does it exist

869
00:47:08,010 --> 00:47:16,260
yeah it might be less common if you're

870
00:47:12,120 --> 00:47:19,950
using more advanced JavaScript you know

871
00:47:16,260 --> 00:47:22,680
frameworks like react or jQuery because

872
00:47:19,950 --> 00:47:26,189
they help you some in some ways but you

873
00:47:22,680 --> 00:47:29,029
can actually get SQL XSS through MQTT

874
00:47:26,190 --> 00:47:31,490
which in this case will push you the

875
00:47:29,030 --> 00:47:35,220
exercise to your environment

876
00:47:31,490 --> 00:47:37,589
but again the payloads will be the same

877
00:47:35,220 --> 00:47:40,620
payloads the only thing that changes is

878
00:47:37,590 --> 00:47:43,230
what you want to get out of it and how

879
00:47:40,620 --> 00:47:47,460
you interact with the with the system

880
00:47:43,230 --> 00:47:48,900
you can trigger XSS through SCS emails

881
00:47:47,460 --> 00:47:52,530
or notifications

882
00:47:48,900 --> 00:47:55,730
how about xxc I don't know if you read

883
00:47:52,530 --> 00:48:02,040
the news it really exists in serverless

884
00:47:55,730 --> 00:48:05,670
so again XS e XX e the the payloads

885
00:48:02,040 --> 00:48:08,610
sorry the payloads itself would be the

886
00:48:05,670 --> 00:48:10,650
same it's still X se but you don't want

887
00:48:08,610 --> 00:48:13,560
to get that C password file because it

888
00:48:10,650 --> 00:48:17,550
not doesn't interest anyone you want to

889
00:48:13,560 --> 00:48:21,060
get the of our task handler Python or

890
00:48:17,550 --> 00:48:25,080
index J s so this is the only thing of

891
00:48:21,060 --> 00:48:27,000
course there it also depends on the XML

892
00:48:25,080 --> 00:48:29,310
processor there and if they use

893
00:48:27,000 --> 00:48:31,710
vulnerable libraries or vulnerable

894
00:48:29,310 --> 00:48:33,570
versions of libraries then you're still

895
00:48:31,710 --> 00:48:39,540
gonna be able to extract some data

896
00:48:33,570 --> 00:48:41,780
through x XE on lambda function you can

897
00:48:39,540 --> 00:48:44,460
get the handler

898
00:48:41,780 --> 00:48:46,830
lowered sorry the source code out of the

899
00:48:44,460 --> 00:48:49,710
environment it will be pretty hard to

900
00:48:46,830 --> 00:48:52,860
get the environment variable because

901
00:48:49,710 --> 00:48:56,610
there is some null bytes when you're

902
00:48:52,860 --> 00:48:59,320
gonna get that and it's gonna trigger an

903
00:48:56,610 --> 00:49:03,910
error or throw an error through the

904
00:48:59,320 --> 00:49:05,560
parser okay some related content it

905
00:49:03,910 --> 00:49:08,740
might help you to get to dig more into

906
00:49:05,560 --> 00:49:11,770
that so I started the server stopped

907
00:49:08,740 --> 00:49:14,589
always server less top ten project the

908
00:49:11,770 --> 00:49:17,320
current there is a final report ready

909
00:49:14,590 --> 00:49:22,540
which the current state takes the

910
00:49:17,320 --> 00:49:25,510
regular OS top ten and go one by one and

911
00:49:22,540 --> 00:49:27,910
discuss how's that relevant to server

912
00:49:25,510 --> 00:49:29,410
list and what the attack vectors are

913
00:49:27,910 --> 00:49:32,529
what the pillows and what the

914
00:49:29,410 --> 00:49:34,560
mitigations are which are different we

915
00:49:32,530 --> 00:49:39,670
are kind of course working on getting

916
00:49:34,560 --> 00:49:41,650
tailor tailored service top ten for the

917
00:49:39,670 --> 00:49:45,370
service environment there is an open

918
00:49:41,650 --> 00:49:47,770
data college you can we would love if

919
00:49:45,370 --> 00:49:49,660
you can contribute another project is

920
00:49:47,770 --> 00:49:51,610
the ulnar ball several application it's

921
00:49:49,660 --> 00:49:55,839
an application open source application

922
00:49:51,610 --> 00:49:59,170
that I wrote that has dozens of

923
00:49:55,840 --> 00:50:02,100
resources that you can exploit and you

924
00:49:59,170 --> 00:50:06,220
can install that either from Geetha or

925
00:50:02,100 --> 00:50:08,830
from the AWS repository with three

926
00:50:06,220 --> 00:50:11,049
clicks and you have it don't install it

927
00:50:08,830 --> 00:50:13,930
in production please I warned you live

928
00:50:11,050 --> 00:50:17,350
it's going live it's recorded don't

929
00:50:13,930 --> 00:50:20,109
install that in production I warned you

930
00:50:17,350 --> 00:50:23,470
it's not gonna fall under me when your

931
00:50:20,110 --> 00:50:26,880
company fires you other talks if you're

932
00:50:23,470 --> 00:50:30,129
hanging in DC or in sector Toronto

933
00:50:26,880 --> 00:50:32,200
you're welcome to see some other talks

934
00:50:30,130 --> 00:50:33,320
thank you very much for coming I really

935
00:50:32,200 --> 00:50:39,859
appreciate it

936
00:50:33,320 --> 00:50:39,860
[Applause]

