1
00:00:00,230 --> 00:00:10,139
morning it's Sunday at 10 a.m. yeah

2
00:00:08,420 --> 00:00:11,940
actually I thought there would be like

3
00:00:10,139 --> 00:00:13,500
six people out here like people I know

4
00:00:11,940 --> 00:00:17,580
personally and really hardcore UNIX

5
00:00:13,500 --> 00:00:19,350
nerds so I appreciate you all coming I'm

6
00:00:17,580 --> 00:00:21,509
Stuart McMurray I'm a red teamer at iron

7
00:00:19,350 --> 00:00:23,100
net also I'm another one of those

8
00:00:21,510 --> 00:00:25,380
hardcore UNIX nerds up at 10 a.m. for a

9
00:00:23,100 --> 00:00:29,730
UNIX talk my wife said I had to come to

10
00:00:25,380 --> 00:00:31,948
this one so there's Twitter one thing I

11
00:00:29,730 --> 00:00:33,300
didn't do was put a lot of friendly

12
00:00:31,949 --> 00:00:34,860
background information a lot of the

13
00:00:33,300 --> 00:00:37,319
technical concepts in the slides because

14
00:00:34,860 --> 00:00:39,870
I got like 20 minutes to talk and I

15
00:00:37,320 --> 00:00:42,870
wrote a half hour 40 minute presentation

16
00:00:39,870 --> 00:00:44,399
it turns out so please feel free to hit

17
00:00:42,870 --> 00:00:46,829
me up on Twitter and ask any questions

18
00:00:44,399 --> 00:00:50,250
you might have afterwards of like long

19
00:00:46,829 --> 00:00:51,989
technical nature a lot of the code is on

20
00:00:50,250 --> 00:00:53,280
github it's not all of it's on github so

21
00:00:51,989 --> 00:00:54,599
there's that and we'll be talking about

22
00:00:53,280 --> 00:00:58,350
Red Hat will be out systemd I'm

23
00:00:54,600 --> 00:00:59,789
affiliated with neither of those so my

24
00:00:58,350 --> 00:01:01,800
apologies to them as we go through the

25
00:00:59,789 --> 00:01:04,470
talk talking about system D in the

26
00:01:01,800 --> 00:01:05,908
obligatory this you this talk is does

27
00:01:04,470 --> 00:01:07,320
not reflect the views of my employer and

28
00:01:05,909 --> 00:01:09,600
you pass present for future employers

29
00:01:07,320 --> 00:01:11,070
also please don't do illegal things and

30
00:01:09,600 --> 00:01:13,070
when somebody does catch you please

31
00:01:11,070 --> 00:01:15,809
don't tell him I taught you how to do it

32
00:01:13,070 --> 00:01:17,789
so a bit of a background to how this

33
00:01:15,810 --> 00:01:21,659
talk came about I was I was red cell for

34
00:01:17,790 --> 00:01:22,860
a local issue University CCD ctmc CDC is

35
00:01:21,659 --> 00:01:24,630
the collegiate cyber defense competition

36
00:01:22,860 --> 00:01:27,000
it's a bunch of college kids defending a

37
00:01:24,630 --> 00:01:29,030
network and a bunch of local

38
00:01:27,000 --> 00:01:32,280
professionals on defending the network

39
00:01:29,030 --> 00:01:33,810
and the it was a school for that kind of

40
00:01:32,280 --> 00:01:36,240
the older returning to school crowd and

41
00:01:33,810 --> 00:01:37,439
they they realized that if you want to

42
00:01:36,240 --> 00:01:38,970
catch malware the easiest way is just to

43
00:01:37,439 --> 00:01:40,048
watch network traffic and they didn't

44
00:01:38,970 --> 00:01:43,110
that really good way to do that except

45
00:01:40,049 --> 00:01:46,259
netstat so they did and it's particular

46
00:01:43,110 --> 00:01:47,850
I had I had one person running net step

47
00:01:46,259 --> 00:01:50,490
peanut in the loop like I was watching

48
00:01:47,850 --> 00:01:51,899
command and just up arrow enter so it I

49
00:01:50,490 --> 00:01:52,949
found out that I couldn't use TCP and I

50
00:01:51,899 --> 00:01:55,590
couldn't use UDP and I couldn't use the

51
00:01:52,950 --> 00:01:57,240
raw socket so um if anybody's interested

52
00:01:55,590 --> 00:01:59,399
there's a collection of malware I wrote

53
00:01:57,240 --> 00:02:02,280
over like four days for these practices

54
00:01:59,399 --> 00:02:04,439
but I had to use something that wasn't

55
00:02:02,280 --> 00:02:06,990
visible in net stat and I came up with

56
00:02:04,439 --> 00:02:08,190
two options DNS which is technically but

57
00:02:06,990 --> 00:02:10,619
it goes away really quick so nobody'll

58
00:02:08,190 --> 00:02:12,810
actually see it and using the PCAT which

59
00:02:10,619 --> 00:02:13,300
on Linux is a packet socket I mean that

60
00:02:12,810 --> 00:02:15,430
was

61
00:02:13,300 --> 00:02:18,990
visible in netstat it is an SS it's a

62
00:02:15,430 --> 00:02:21,280
zero flag there is a DNS tool I wrote

63
00:02:18,990 --> 00:02:24,220
like to look at that and it works pretty

64
00:02:21,280 --> 00:02:25,750
good for CCDC at least so what's this

65
00:02:24,220 --> 00:02:28,150
thing called pcap knock what it does is

66
00:02:25,750 --> 00:02:29,770
just sits watches the wire watches a

67
00:02:28,150 --> 00:02:30,640
traffic through in your face and looks

68
00:02:29,770 --> 00:02:38,320
for pattern or to look for either

69
00:02:30,640 --> 00:02:39,309
command and command hi folks I'm gig

70
00:02:38,320 --> 00:02:41,170
here unfortunately

71
00:02:39,310 --> 00:02:43,660
audio drops out because very technical

72
00:02:41,170 --> 00:02:45,940
glitch but it was oom is about three

73
00:02:43,660 --> 00:02:48,299
minutes 19 seconds in sorry for the

74
00:02:45,940 --> 00:02:48,300
problems

75
00:02:52,830 --> 00:02:54,890
you

76
00:03:20,209 --> 00:03:25,519
there's a cyst control you might have to

77
00:03:21,799 --> 00:03:28,370
turn off SELinux is the bane of

78
00:03:25,519 --> 00:03:30,799
injections existence so you might have

79
00:03:28,370 --> 00:03:32,959
to turn that off or set it to permissive

80
00:03:30,799 --> 00:03:34,340
so that if something does happen while

81
00:03:32,959 --> 00:03:36,590
you're on an OP the clients can at least

82
00:03:34,340 --> 00:03:38,720
say hey we saw it turn it on again when

83
00:03:36,590 --> 00:03:39,920
you're done maybe so then once you're

84
00:03:38,720 --> 00:03:41,299
injected you have to find a process that

85
00:03:39,920 --> 00:03:42,439
can do whatever you want to do so in my

86
00:03:41,299 --> 00:03:44,000
case it was pcap

87
00:03:42,439 --> 00:03:45,470
but if there's anything that's

88
00:03:44,000 --> 00:03:46,640
restricting file system access or

89
00:03:45,470 --> 00:03:48,200
network access or what-have-you

90
00:03:46,640 --> 00:03:49,369
your victim process does actually have

91
00:03:48,200 --> 00:03:50,659
to have the ability to do what you're

92
00:03:49,370 --> 00:03:52,790
doing because you're just adding code to

93
00:03:50,659 --> 00:03:55,220
a process at that point it's a good

94
00:03:52,790 --> 00:03:56,780
thing if the process is well coded and

95
00:03:55,220 --> 00:03:58,879
stable and long-running and isn't gonna

96
00:03:56,780 --> 00:04:00,260
you know hoops it and if you do boobs

97
00:03:58,879 --> 00:04:02,599
the process it's good that it fit dies

98
00:04:00,260 --> 00:04:04,040
you know it's not really that bad try

99
00:04:02,599 --> 00:04:05,720
not to do that of course so good

100
00:04:04,040 --> 00:04:07,129
candidates for injection this is log D

101
00:04:05,720 --> 00:04:08,840
this is log D does network stuff

102
00:04:07,129 --> 00:04:12,319
especially with UDP which is maybe less

103
00:04:08,840 --> 00:04:13,879
scrutinized and it's up most of the time

104
00:04:12,319 --> 00:04:15,138
grandi hardly makes a lot of child

105
00:04:13,879 --> 00:04:17,089
processes so if you're gonna do a lot of

106
00:04:15,139 --> 00:04:19,039
fork and exec or the equivalent it's a

107
00:04:17,089 --> 00:04:21,198
good good candidate there ntpd does

108
00:04:19,039 --> 00:04:24,380
stuff on the network nobody really

109
00:04:21,199 --> 00:04:25,820
notices if it dies Journal D is another

110
00:04:24,380 --> 00:04:27,020
one it's you know fairly new party

111
00:04:25,820 --> 00:04:28,969
system D nobody's quite sure how it

112
00:04:27,020 --> 00:04:31,190
works and it looks a little funny if you

113
00:04:28,970 --> 00:04:32,449
use too old-school UNIX demons so it's

114
00:04:31,190 --> 00:04:33,289
not AB and it's always there and it

115
00:04:32,449 --> 00:04:35,599
turns out to be really great for

116
00:04:33,289 --> 00:04:38,710
injection possibly the worst candidate

117
00:04:35,599 --> 00:04:41,300
given the above criteria this system D

118
00:04:38,710 --> 00:04:44,388
does have permissions to do some things

119
00:04:41,300 --> 00:04:46,610
the rest is maybe a discussion for

120
00:04:44,389 --> 00:04:50,180
another day so the easy answer to

121
00:04:46,610 --> 00:04:52,190
injection is just let's get gdb to ask

122
00:04:50,180 --> 00:04:53,539
something to adapt for us gdb will

123
00:04:52,190 --> 00:04:56,539
attach to process you say here's a

124
00:04:53,539 --> 00:04:58,280
library please DL open it and process

125
00:04:56,539 --> 00:04:59,599
like yeah sure gdb will set all your

126
00:04:58,280 --> 00:05:00,859
registers back you'll set your stack

127
00:04:59,599 --> 00:05:03,080
pointer back and you'd have to worry

128
00:05:00,860 --> 00:05:04,370
about it and writing the library itself

129
00:05:03,080 --> 00:05:06,770
is pretty simple so you take your normal

130
00:05:04,370 --> 00:05:10,789
function your main function you change

131
00:05:06,770 --> 00:05:12,680
from int main to a constructor and you

132
00:05:10,789 --> 00:05:14,690
don't you don't really get returned

133
00:05:12,680 --> 00:05:16,699
values like you do with me there's no no

134
00:05:14,690 --> 00:05:18,320
calling back to the shell to see hey

135
00:05:16,699 --> 00:05:19,610
what what did this return all so you

136
00:05:18,320 --> 00:05:21,139
don't get art fees so that's you know

137
00:05:19,610 --> 00:05:22,940
kind of a thought and then it's

138
00:05:21,139 --> 00:05:25,310
generally a good idea to spawn a thread

139
00:05:22,940 --> 00:05:27,050
after you've injected you don't really

140
00:05:25,310 --> 00:05:29,270
want to block mean unless you do but

141
00:05:27,050 --> 00:05:31,130
probably not compiling in a library is

142
00:05:29,270 --> 00:05:32,750
pretty much the same as compiling any

143
00:05:31,130 --> 00:05:34,340
other binary but

144
00:05:32,750 --> 00:05:36,080
position imminent code and Sheridan s

145
00:05:34,340 --> 00:05:37,609
what you need to do there and give it

146
00:05:36,080 --> 00:05:39,200
some friendly name that won't look

147
00:05:37,610 --> 00:05:40,220
strange if somebody dumps the memory

148
00:05:39,200 --> 00:05:42,409
maps we'll see that later

149
00:05:40,220 --> 00:05:44,390
and then just ask hey that's cool how do

150
00:05:42,410 --> 00:05:48,530
I get rid of this don't get rid of this

151
00:05:44,390 --> 00:05:50,510
this is a gdb command says hey please

152
00:05:48,530 --> 00:05:52,700
call Lipsey's deal open to eject it it's

153
00:05:50,510 --> 00:05:53,900
easier to call deal open Lipsy deal open

154
00:05:52,700 --> 00:05:57,380
mode than lib see because you have to

155
00:05:53,900 --> 00:05:59,710
worry about the dl being linked in one

156
00:05:57,380 --> 00:06:02,540
more thing that is cannot be over

157
00:05:59,710 --> 00:06:04,219
overstated is to test well debugging and

158
00:06:02,540 --> 00:06:09,500
target is not not really what you want

159
00:06:04,220 --> 00:06:11,450
to do and this this goes wrong a lot so

160
00:06:09,500 --> 00:06:15,080
quick demo of what this looks like I

161
00:06:11,450 --> 00:06:16,400
will just inject a simple hello world so

162
00:06:15,080 --> 00:06:20,270
compile a binary real quick

163
00:06:16,400 --> 00:06:21,469
notice the misses sort of yeah might

164
00:06:20,270 --> 00:06:23,270
need to link in threads it's okay you

165
00:06:21,470 --> 00:06:27,860
can link things into a library to link

166
00:06:23,270 --> 00:06:28,789
into a process put it on target also put

167
00:06:27,860 --> 00:06:30,440
gb on target

168
00:06:28,790 --> 00:06:32,300
there's no good way to know if the GEB

169
00:06:30,440 --> 00:06:33,830
on target is but there is one or if

170
00:06:32,300 --> 00:06:37,820
it'll be the right one or just check

171
00:06:33,830 --> 00:06:39,349
your yeah god blocks it's worth noting

172
00:06:37,820 --> 00:06:40,669
at this point two things number one

173
00:06:39,350 --> 00:06:41,750
we're sort of throwing OPSEC out the

174
00:06:40,669 --> 00:06:42,950
window with all this so hopefully you

175
00:06:41,750 --> 00:06:44,660
have better ways to do most of what I'm

176
00:06:42,950 --> 00:06:45,740
doing and number two on the latest

177
00:06:44,660 --> 00:06:48,530
version sent off so you get a nice

178
00:06:45,740 --> 00:06:51,620
little web console to do your bidding so

179
00:06:48,530 --> 00:06:54,400
you don't don't need to SSH in found

180
00:06:51,620 --> 00:06:56,600
that out about Wednesday I think so

181
00:06:54,400 --> 00:06:58,340
we'll need to do most of this is rude is

182
00:06:56,600 --> 00:07:01,970
that the question for jumps in the back

183
00:06:58,340 --> 00:07:04,549
is that visible or you need it bigger we

184
00:07:01,970 --> 00:07:05,870
got a bit visible alright so we'll write

185
00:07:04,550 --> 00:07:07,669
our output to hello

186
00:07:05,870 --> 00:07:09,140
injecting into a process you get the

187
00:07:07,669 --> 00:07:10,969
processes standard out whatever that is

188
00:07:09,140 --> 00:07:12,770
that you probably don't want to gum up

189
00:07:10,970 --> 00:07:14,540
because somebody's draw it using it or

190
00:07:12,770 --> 00:07:16,130
its dev know so it's not helpful

191
00:07:14,540 --> 00:07:17,300
so we'll just go right to a file names

192
00:07:16,130 --> 00:07:22,520
low will tail it in the background so we

193
00:07:17,300 --> 00:07:24,950
can see what's going on and here's

194
00:07:22,520 --> 00:07:25,909
here's the injected command again gents

195
00:07:24,950 --> 00:07:29,750
in the back is that too low on the

196
00:07:25,910 --> 00:07:34,070
screen very good dude there's like three

197
00:07:29,750 --> 00:07:36,260
even wait it's awesome so here's our gdb

198
00:07:34,070 --> 00:07:37,940
we put up there notice we're in temp

199
00:07:36,260 --> 00:07:39,830
batch is a handy thing so that it'll

200
00:07:37,940 --> 00:07:41,360
just run the commands and exit tell it

201
00:07:39,830 --> 00:07:42,419
to put it in Pit one which is system D

202
00:07:41,360 --> 00:07:44,520
or in it

203
00:07:42,419 --> 00:07:46,650
and this is that that same command just

204
00:07:44,520 --> 00:07:48,750
tell it to eval the command and printer

205
00:07:46,650 --> 00:07:50,508
output and buy evaluate it has just nice

206
00:07:48,750 --> 00:07:52,650
side effect of running our malware

207
00:07:50,509 --> 00:07:54,210
there we go it's that's normal system D

208
00:07:52,650 --> 00:07:56,969
output before we look at the bits in the

209
00:07:54,210 --> 00:07:58,318
bottom that's what the Lipsy do open

210
00:07:56,970 --> 00:08:00,449
mode gave us back it's a void pointer

211
00:07:58,319 --> 00:08:02,009
and like most things in Lipsy that

212
00:08:00,449 --> 00:08:03,740
returned a void pointer if it's no it's

213
00:08:02,009 --> 00:08:05,940
a problem this is not know obviously

214
00:08:03,740 --> 00:08:07,380
also we see that we have a new thread

215
00:08:05,940 --> 00:08:10,440
and my Malheur just it'll print out a

216
00:08:07,380 --> 00:08:11,759
whole world message to of that file but

217
00:08:10,440 --> 00:08:13,289
notice the thread started before we got

218
00:08:11,759 --> 00:08:15,000
the return value this is a bit of a race

219
00:08:13,289 --> 00:08:18,449
condition they're also system D sake

220
00:08:15,000 --> 00:08:21,180
faults I have not yet figured out why or

221
00:08:18,449 --> 00:08:22,979
where and the the output is not very

222
00:08:21,180 --> 00:08:24,830
helpful but the system deal still work

223
00:08:22,979 --> 00:08:28,800
still be able to use the Box reboot it

224
00:08:24,830 --> 00:08:30,690
spottin processes so uh that'll log by

225
00:08:28,800 --> 00:08:34,799
the way as will the SELinux permissive

226
00:08:30,690 --> 00:08:40,620
thing and everything you do there we're

227
00:08:34,799 --> 00:08:43,588
nice guys so just because so you remove

228
00:08:40,620 --> 00:08:44,910
the shared object file and then we'll

229
00:08:43,589 --> 00:08:47,550
dump the memory map so for the blue guys

230
00:08:44,910 --> 00:08:49,800
this is a way you can tell I post post

231
00:08:47,550 --> 00:08:51,839
exploitation post implantation you kind

232
00:08:49,800 --> 00:08:53,010
of hosed at this point actually but at

233
00:08:51,839 --> 00:08:55,620
least you can you have a nice way of

234
00:08:53,010 --> 00:08:58,020
telling that your hosts especially if

235
00:08:55,620 --> 00:08:59,310
you see deleted here so also you really

236
00:08:58,020 --> 00:09:02,130
shouldn't have shared objects loaded out

237
00:08:59,310 --> 00:09:03,750
attempt and there's no real requirement

238
00:09:02,130 --> 00:09:07,439
that designed in data so I'm a Canada

239
00:09:03,750 --> 00:09:09,329
Zod about whatever I want there we go so

240
00:09:07,440 --> 00:09:11,339
that that's what that looked like the

241
00:09:09,329 --> 00:09:12,479
hello happened of course it like gummed

242
00:09:11,339 --> 00:09:14,190
up the terminal because we're tailing

243
00:09:12,480 --> 00:09:15,180
some in the background but we do we did

244
00:09:14,190 --> 00:09:17,100
have our challenge action so that's

245
00:09:15,180 --> 00:09:18,930
challenge action in nutshell or excuse

246
00:09:17,100 --> 00:09:20,670
me process injection in a nutshell now

247
00:09:18,930 --> 00:09:24,989
now we have to do this with system D

248
00:09:20,670 --> 00:09:28,829
which gets a little little weird just is

249
00:09:24,990 --> 00:09:31,170
not not quite as easy as it looks it

250
00:09:28,829 --> 00:09:33,300
sometimes starts processes and when it

251
00:09:31,170 --> 00:09:35,339
Forks processes before it execs but when

252
00:09:33,300 --> 00:09:37,439
it works gets a copy of your library so

253
00:09:35,339 --> 00:09:38,730
if if you just in to lose a race

254
00:09:37,440 --> 00:09:40,079
condition you're doing something like

255
00:09:38,730 --> 00:09:41,610
pcap knock does where you sent in a

256
00:09:40,079 --> 00:09:44,430
packet and calls you back you may well

257
00:09:41,610 --> 00:09:46,740
get a couple of callbacks or like 20

258
00:09:44,430 --> 00:09:48,329
which happens to a simple solution there

259
00:09:46,740 --> 00:09:50,490
is just test if you're running in system

260
00:09:48,329 --> 00:09:51,620
Dean because pit will always be one if

261
00:09:50,490 --> 00:09:53,150
you are doing inject

262
00:09:51,620 --> 00:09:55,670
another process you'll have to probably

263
00:09:53,150 --> 00:09:59,150
find the pig and compile it into your

264
00:09:55,670 --> 00:10:00,740
into your malware sometimes you do

265
00:09:59,150 --> 00:10:03,589
actually get debugging like you do get

266
00:10:00,740 --> 00:10:05,690
standard error or something and I want

267
00:10:03,589 --> 00:10:06,950
to say one of the system DS months ago I

268
00:10:05,690 --> 00:10:10,270
was injecting two like wrote it to them

269
00:10:06,950 --> 00:10:12,800
the log files like journal de blogs

270
00:10:10,270 --> 00:10:15,199
tuple solution there and you have like

271
00:10:12,800 --> 00:10:17,900
airborne things you can use to exit a

272
00:10:15,200 --> 00:10:20,270
program I wrote a debug just wrap it in

273
00:10:17,900 --> 00:10:21,230
if deaths don't compile with debugging

274
00:10:20,270 --> 00:10:23,240
information when you're activating and

275
00:10:21,230 --> 00:10:25,070
targeting you're good another thing I

276
00:10:23,240 --> 00:10:26,690
found is that I just exported all the

277
00:10:25,070 --> 00:10:28,400
symbols in my library which is normal

278
00:10:26,690 --> 00:10:30,350
writing a library you want most of that

279
00:10:28,400 --> 00:10:33,050
to be used and I was not particularly

280
00:10:30,350 --> 00:10:34,640
careful how I did it and started seeing

281
00:10:33,050 --> 00:10:36,500
some strange things so it's like hey

282
00:10:34,640 --> 00:10:38,960
just just in case let's let's hide all

283
00:10:36,500 --> 00:10:40,940
our symbols so add that to your GCC line

284
00:10:38,960 --> 00:10:43,610
I'll tell the link or not to export

285
00:10:40,940 --> 00:10:46,100
those symbols and last thing peak app

286
00:10:43,610 --> 00:10:49,970
specific is if you listen on the any

287
00:10:46,100 --> 00:10:51,200
interface listen on the any interface

288
00:10:49,970 --> 00:10:53,750
which exists on Linux and I think

289
00:10:51,200 --> 00:10:55,430
FreeBSD um it works pretty well except

290
00:10:53,750 --> 00:10:56,779
you also get loopback and things there

291
00:10:55,430 --> 00:10:58,729
may be a lot of traffic I move back if

292
00:10:56,779 --> 00:11:01,189
they're doing things with pocket or

293
00:10:58,730 --> 00:11:02,330
what-have-you and then some non Linux

294
00:11:01,190 --> 00:11:04,070
box is not that you can inject in the

295
00:11:02,330 --> 00:11:05,450
system do not on Linux but some nonlin

296
00:11:04,070 --> 00:11:07,670
expects is don't have the in e V any

297
00:11:05,450 --> 00:11:08,870
sudo interface solution there you speak

298
00:11:07,670 --> 00:11:10,370
up find all devs to find all the devs

299
00:11:08,870 --> 00:11:12,740
and just respond a whole bunch of more

300
00:11:10,370 --> 00:11:13,850
threads alright so we have we have

301
00:11:12,740 --> 00:11:15,529
malware that's running

302
00:11:13,850 --> 00:11:16,700
we have malware that works in system D

303
00:11:15,529 --> 00:11:19,400
and we can inject it while the systems

304
00:11:16,700 --> 00:11:21,830
live and if we get lucky it just smell

305
00:11:19,400 --> 00:11:23,870
even reboot and become live again so

306
00:11:21,830 --> 00:11:26,360
let's let's get this working now after a

307
00:11:23,870 --> 00:11:28,520
reboot better persistence and that's at

308
00:11:26,360 --> 00:11:29,900
CCD seal and what we'd see is country

309
00:11:28,520 --> 00:11:31,310
kids would do things like you know

310
00:11:29,900 --> 00:11:32,750
reboot a box every few minutes you're

311
00:11:31,310 --> 00:11:36,979
like hmm I think the red team's on this

312
00:11:32,750 --> 00:11:38,810
box reboot so it works it's not very

313
00:11:36,980 --> 00:11:40,430
realistic I'm not sure how many people

314
00:11:38,810 --> 00:11:43,000
like reboot all of their DNS

315
00:11:40,430 --> 00:11:45,709
infrastructure every five minutes but

316
00:11:43,000 --> 00:11:47,810
I'm gonna keep malware off so there's

317
00:11:45,709 --> 00:11:50,779
that some malware to may be persistent

318
00:11:47,810 --> 00:11:53,959
malware so Linux gives us a nice

319
00:11:50,779 --> 00:11:56,390
injector by default LDS so preload is is

320
00:11:53,959 --> 00:11:58,010
there to preload a library so in a when

321
00:11:56,390 --> 00:12:00,079
the linker Maps the library or a binary

322
00:11:58,010 --> 00:12:01,160
in a memory you know orders libraries in

323
00:12:00,079 --> 00:12:02,689
the order of where you should start

324
00:12:01,160 --> 00:12:04,230
looking for symbols we can say hey put

325
00:12:02,690 --> 00:12:06,760
ours at the top

326
00:12:04,230 --> 00:12:08,200
this is not a new trick by any means you

327
00:12:06,760 --> 00:12:09,490
usually use it to hook functions like

328
00:12:08,200 --> 00:12:11,890
you'll hook the except function and say

329
00:12:09,490 --> 00:12:13,420
if we get a TCP connection from this

330
00:12:11,890 --> 00:12:15,520
specific source port don't do whatever

331
00:12:13,420 --> 00:12:17,229
we normally do give us a shell so we'll

332
00:12:15,520 --> 00:12:19,180
just use it in more or less the same way

333
00:12:17,230 --> 00:12:21,040
except we have that constructor thing

334
00:12:19,180 --> 00:12:24,219
going on so our function will run thank

335
00:12:21,040 --> 00:12:27,130
you before main ten minutes left

336
00:12:24,220 --> 00:12:29,230
all right so this works nicely and Linux

337
00:12:27,130 --> 00:12:31,090
works in freebsd does not work on open

338
00:12:29,230 --> 00:12:32,410
BSD you can do it on Solaris using the

339
00:12:31,090 --> 00:12:34,270
LD preload environment variable which

340
00:12:32,410 --> 00:12:36,339
works just about everywhere anyways you

341
00:12:34,270 --> 00:12:38,710
can use it also to start a program with

342
00:12:36,340 --> 00:12:40,600
a library preloaded a simple solution

343
00:12:38,710 --> 00:12:41,740
drop your library to just put it in a

344
00:12:40,600 --> 00:12:44,520
file put the name of the file

345
00:12:41,740 --> 00:12:46,780
it'll inject so a few problems that we

346
00:12:44,520 --> 00:12:49,810
ran into SELinux really doesn't like

347
00:12:46,780 --> 00:12:51,339
threads so system D starts sets the

348
00:12:49,810 --> 00:12:55,420
SELinux context goes about its merry way

349
00:12:51,340 --> 00:12:58,030
if you do system D starts your malware

350
00:12:55,420 --> 00:13:00,250
starts spawns a bunch of threads Dennis

351
00:12:58,030 --> 00:13:02,410
selinux context is trying to be set well

352
00:13:00,250 --> 00:13:05,460
I see Linux we like no system do you

353
00:13:02,410 --> 00:13:07,810
like function fail I give up so

354
00:13:05,460 --> 00:13:10,810
something like this doesn't doesn't

355
00:13:07,810 --> 00:13:12,520
quite work as well as you'd hope so idea

356
00:13:10,810 --> 00:13:13,989
well let's just wait before we start a

357
00:13:12,520 --> 00:13:16,210
thread it's kind of crude well just like

358
00:13:13,990 --> 00:13:17,350
you know inject one system DS been going

359
00:13:16,210 --> 00:13:18,910
a couple minutes then we'll start a

360
00:13:17,350 --> 00:13:20,980
threads hopefully set the context by

361
00:13:18,910 --> 00:13:25,390
then it's not not foolproof way to go

362
00:13:20,980 --> 00:13:27,790
but it'll work so a couple ideas we'll

363
00:13:25,390 --> 00:13:29,410
just wait to put this in like the top of

364
00:13:27,790 --> 00:13:31,900
the the function the constructor

365
00:13:29,410 --> 00:13:33,640
function which would have worked if it

366
00:13:31,900 --> 00:13:37,329
didn't block me actually you didn't

367
00:13:33,640 --> 00:13:39,310
start main keeping from starting so next

368
00:13:37,330 --> 00:13:41,020
idea I had a great idea I would just

369
00:13:39,310 --> 00:13:43,209
hook every signal handler some joint

370
00:13:41,020 --> 00:13:44,650
system D will get a signal and my code

371
00:13:43,210 --> 00:13:46,450
will start I'll make sure it doesn't you

372
00:13:44,650 --> 00:13:47,620
know start eventually make sure that

373
00:13:46,450 --> 00:13:49,510
couple minutes is passed

374
00:13:47,620 --> 00:13:52,840
turns out system D actually uses the

375
00:13:49,510 --> 00:13:54,970
signal handlers so that was maybe not

376
00:13:52,840 --> 00:13:56,170
the best idea and then I like to think

377
00:13:54,970 --> 00:13:57,250
that somebody in system D thought about

378
00:13:56,170 --> 00:13:59,560
this ahead of time and they wrote this

379
00:13:57,250 --> 00:14:02,260
function manager set up signals to reset

380
00:13:59,560 --> 00:14:03,849
all the signal handlers another idea

381
00:14:02,260 --> 00:14:05,200
we'd hook the clock get time function

382
00:14:03,850 --> 00:14:09,100
and this is more of the old-school DL

383
00:14:05,200 --> 00:14:11,140
sim Hoka function method I did and I had

384
00:14:09,100 --> 00:14:12,550
this function start after delay which

385
00:14:11,140 --> 00:14:15,160
would start after delay make sure we're

386
00:14:12,550 --> 00:14:16,250
in paid one return the real return the

387
00:14:15,160 --> 00:14:17,839
real clock get time

388
00:14:16,250 --> 00:14:21,420
[Applause]

389
00:14:17,840 --> 00:14:22,740
that happened so quick thing I learned

390
00:14:21,420 --> 00:14:23,939
there is to export only the symbols I

391
00:14:22,740 --> 00:14:25,080
need I couldn't export none of them

392
00:14:23,940 --> 00:14:26,900
because I did actually need the

393
00:14:25,080 --> 00:14:29,010
constructor function in clock get time

394
00:14:26,900 --> 00:14:30,150
in it is what it's called before main

395
00:14:29,010 --> 00:14:31,710
what the constructor function actually

396
00:14:30,150 --> 00:14:34,770
starts and you just read a version

397
00:14:31,710 --> 00:14:36,210
scripts put it but if anybody knows how

398
00:14:34,770 --> 00:14:37,530
to get rid of this can somebody like hit

399
00:14:36,210 --> 00:14:41,100
me up on Twitter it'll be awesome

400
00:14:37,530 --> 00:14:44,100
I'd like for an hour last night the

401
00:14:41,100 --> 00:14:47,550
little black bar down here yeah it's a

402
00:14:44,100 --> 00:14:50,430
Google slides thing and so I you know

403
00:14:47,550 --> 00:14:52,290
while I was hooking that this happened

404
00:14:50,430 --> 00:14:54,750
at 10:00 in the morning after all night

405
00:14:52,290 --> 00:14:57,120
of fiddling with this and I could either

406
00:14:54,750 --> 00:14:58,890
systemd injection or I could SSH I was

407
00:14:57,120 --> 00:15:00,600
like I got this working system DS up the

408
00:14:58,890 --> 00:15:01,770
box reboots I get my callbacks and I was

409
00:15:00,600 --> 00:15:04,320
like yeah what this looks like and I

410
00:15:01,770 --> 00:15:06,210
tried to SSH in and SH being an open BSD

411
00:15:04,320 --> 00:15:07,980
things as a lil Proof Set deal where it

412
00:15:06,210 --> 00:15:11,190
spawns a child process it can do nothing

413
00:15:07,980 --> 00:15:12,810
but do math and you can't deal send

414
00:15:11,190 --> 00:15:14,880
either so it crashes and then system or

415
00:15:12,810 --> 00:15:18,150
the nessus HD doesn't actually actually

416
00:15:14,880 --> 00:15:20,010
chew in next idea I would just implement

417
00:15:18,150 --> 00:15:21,930
a function that I could hook but not

418
00:15:20,010 --> 00:15:23,370
have to do anything real with it so

419
00:15:21,930 --> 00:15:25,439
member sure which just searches for a

420
00:15:23,370 --> 00:15:27,240
bite in a large amount of bytes I hope

421
00:15:25,440 --> 00:15:28,500
that I just opened the distant ich

422
00:15:27,240 --> 00:15:30,270
source and I was like hey what's a

423
00:15:28,500 --> 00:15:31,440
function that will be called a lot it

424
00:15:30,270 --> 00:15:36,030
really helps this function is actually

425
00:15:31,440 --> 00:15:37,800
called which it wasn't so oops so the

426
00:15:36,030 --> 00:15:39,060
same idea like if we're in if we're in

427
00:15:37,800 --> 00:15:40,589
system D after some delay will start

428
00:15:39,060 --> 00:15:42,420
otherwise we'll just copy paste code

429
00:15:40,590 --> 00:15:44,490
OpenBSD a code for a lot of this is

430
00:15:42,420 --> 00:15:47,579
really simple and clean and from some

431
00:15:44,490 --> 00:15:49,470
permissively licensed so I came up with

432
00:15:47,580 --> 00:15:51,420
almost the same thing story line instead

433
00:15:49,470 --> 00:15:52,800
string length and this is almost exactly

434
00:15:51,420 --> 00:15:56,640
what the function looks like in the code

435
00:15:52,800 --> 00:15:57,870
squished vertically but same idea it

436
00:15:56,640 --> 00:15:59,580
will start after delay and then this is

437
00:15:57,870 --> 00:16:01,320
all that sterling is so it's you know

438
00:15:59,580 --> 00:16:03,450
whether it's my code or Linux is code

439
00:16:01,320 --> 00:16:05,760
it's it's gonna be the same and have the

440
00:16:03,450 --> 00:16:06,960
same effect so that start at the late

441
00:16:05,760 --> 00:16:08,730
thing we've been seeing in yellow the

442
00:16:06,960 --> 00:16:10,080
whole time what it does is it takes proc

443
00:16:08,730 --> 00:16:13,620
up time which is little file that has

444
00:16:10,080 --> 00:16:15,600
the uptime of your box in seconds and I

445
00:16:13,620 --> 00:16:16,590
think the idle time and the first time

446
00:16:15,600 --> 00:16:18,260
the function is called it takes this

447
00:16:16,590 --> 00:16:20,610
number and like this is what I started

448
00:16:18,260 --> 00:16:22,290
and every time it's called again so time

449
00:16:20,610 --> 00:16:23,520
system D call sterlin

450
00:16:22,290 --> 00:16:25,980
it checks to see if two minutes is

451
00:16:23,520 --> 00:16:28,260
passed which is cool and at first I was

452
00:16:25,980 --> 00:16:30,090
just like hey when this is 120 let's go

453
00:16:28,260 --> 00:16:31,740
and by the way don't use sterlin to do

454
00:16:30,090 --> 00:16:33,060
that if you're hooking sterling because

455
00:16:31,740 --> 00:16:37,350
then you have sterling calling sterling

456
00:16:33,060 --> 00:16:41,069
and it doesn't work yeah basically

457
00:16:37,350 --> 00:16:42,270
so guard all the above with the mutex it

458
00:16:41,070 --> 00:16:45,330
turns out system D does make threads

459
00:16:42,270 --> 00:16:47,610
that cost hurlan so race conditions are

460
00:16:45,330 --> 00:16:49,260
everywhere you texas solve them then

461
00:16:47,610 --> 00:16:51,570
there was this one minor issue that i

462
00:16:49,260 --> 00:16:52,620
had and i did not have this several

463
00:16:51,570 --> 00:16:54,570
months ago when I was putting this

464
00:16:52,620 --> 00:16:56,220
together and I did have this several

465
00:16:54,570 --> 00:16:58,200
days ago when I was making the demos

466
00:16:56,220 --> 00:16:58,500
with the latest version CentOS and that

467
00:16:58,200 --> 00:16:59,970
is

468
00:16:58,500 --> 00:17:03,090
selinux now doesn't like peek at much

469
00:16:59,970 --> 00:17:05,130
and you can't you can't just cheat and

470
00:17:03,090 --> 00:17:08,220
open these is the file it says FS and

471
00:17:05,130 --> 00:17:11,070
write a zero to it because you get an

472
00:17:08,220 --> 00:17:13,050
exception or access error so the answer

473
00:17:11,069 --> 00:17:15,839
is just call send enforce and ask it to

474
00:17:13,050 --> 00:17:17,609
open it and that's totally cool to up

475
00:17:15,839 --> 00:17:26,399
system Dean good job SELinux you tried

476
00:17:17,609 --> 00:17:28,079
so those four functions there are not

477
00:17:26,400 --> 00:17:29,550
Linux library functions I think a couple

478
00:17:28,079 --> 00:17:30,780
them have been implemented they can get

479
00:17:29,550 --> 00:17:33,030
you around this sort of stuff they can

480
00:17:30,780 --> 00:17:35,160
say hey let's not actually even though

481
00:17:33,030 --> 00:17:38,220
su Linux says maybe what's actually

482
00:17:35,160 --> 00:17:45,750
about them so working and this is what

483
00:17:38,220 --> 00:17:52,200
it looks like it's a different way to

484
00:17:45,750 --> 00:17:54,300
put a file on target it works so we're

485
00:17:52,200 --> 00:17:55,830
on the victim box I think I assume gdb

486
00:17:54,300 --> 00:17:57,659
on here anyways we'll need to be rude

487
00:17:55,830 --> 00:17:59,580
you need to set the execute bit in

488
00:17:57,660 --> 00:18:01,140
libraries for them to be loadable into a

489
00:17:59,580 --> 00:18:04,320
process if they read only and not

490
00:18:01,140 --> 00:18:07,140
execute or read in not execute it won't

491
00:18:04,320 --> 00:18:09,419
injection won't actually work so put

492
00:18:07,140 --> 00:18:10,680
ourselves in LDS of preload and respond

493
00:18:09,420 --> 00:18:12,510
asleep just to make sure that we have

494
00:18:10,680 --> 00:18:13,710
injected because without the ASO preload

495
00:18:12,510 --> 00:18:17,280
anything that starts will have the

496
00:18:13,710 --> 00:18:20,190
binary or the library preloaded yep so

497
00:18:17,280 --> 00:18:25,200
we do actually have wood pcap in there

498
00:18:20,190 --> 00:18:26,700
lip peanut knock in sleep cool um don't

499
00:18:25,200 --> 00:18:27,930
do that like just because you've been

500
00:18:26,700 --> 00:18:32,520
planted a box wait for it to happen

501
00:18:27,930 --> 00:18:33,810
rebooting much like a cooking show we're

502
00:18:32,520 --> 00:18:35,310
not going to wait five minutes this is a

503
00:18:33,810 --> 00:18:36,830
cooking show of 5 minutes ok we put it

504
00:18:35,310 --> 00:18:41,540
in the oven ding we're done so

505
00:18:36,830 --> 00:18:43,909
five minutes is past will the background

506
00:18:41,540 --> 00:18:46,220
a wait and they send our message to give

507
00:18:43,910 --> 00:18:48,400
a call back because I don't have taps to

508
00:18:46,220 --> 00:18:51,080
play with to the downside of s Kenema

509
00:18:48,400 --> 00:18:53,120
wait for a callback and there we go

510
00:18:51,080 --> 00:18:54,830
another cooking show 10 seconds is

511
00:18:53,120 --> 00:18:58,070
passed and we got a connection from the

512
00:18:54,830 --> 00:19:00,470
victim box first thing we'll do we'll

513
00:18:58,070 --> 00:19:05,810
just we'll see if we loaded into system

514
00:19:00,470 --> 00:19:08,570
D loaded new system D just fine see what

515
00:19:05,810 --> 00:19:14,770
else we load it into we load it into

516
00:19:08,570 --> 00:19:16,790
everything else just fine a couple

517
00:19:14,770 --> 00:19:18,500
little debugging tricks to came across

518
00:19:16,790 --> 00:19:20,240
that were very helpful starting a

519
00:19:18,500 --> 00:19:22,400
background process like free free sleep

520
00:19:20,240 --> 00:19:23,900
one will just print texted Emma or loop

521
00:19:22,400 --> 00:19:26,330
every second gives you a nice little

522
00:19:23,900 --> 00:19:29,990
something to inject into in free loads

523
00:19:26,330 --> 00:19:31,280
Lib DL which wraps Lipsey's dl open so

524
00:19:29,990 --> 00:19:32,780
you get the nice friendly deal open

525
00:19:31,280 --> 00:19:35,180
which means then when things go sideways

526
00:19:32,780 --> 00:19:36,680
you can call DL error and get the what

527
00:19:35,180 --> 00:19:39,470
happens usually it's a you know file

528
00:19:36,680 --> 00:19:41,030
doesn't exist sort of deal another thing

529
00:19:39,470 --> 00:19:42,350
that is hard to figure out it's wait

530
00:19:41,030 --> 00:19:45,440
libraries actually doing you can hook up

531
00:19:42,350 --> 00:19:46,760
a debugger to system D but it's not the

532
00:19:45,440 --> 00:19:48,260
easiest thing to do not the safest thing

533
00:19:46,760 --> 00:19:50,420
to do easy answer is just reopen

534
00:19:48,260 --> 00:19:51,650
standard error but standard error and a

535
00:19:50,420 --> 00:19:53,150
file in just tail in the background when

536
00:19:51,650 --> 00:19:57,440
things happen even like hey I got here

537
00:19:53,150 --> 00:19:58,880
you know it works so TLDR right your

538
00:19:57,440 --> 00:20:02,720
malware as a library take it from main

539
00:19:58,880 --> 00:20:03,980
to a constructor test it quite a lot to

540
00:20:02,720 --> 00:20:05,300
get around selinux either wait before

541
00:20:03,980 --> 00:20:07,100
execution starts for doing a boot

542
00:20:05,300 --> 00:20:09,050
setting for zero something to the degree

543
00:20:07,100 --> 00:20:11,649
you have to put it back and then just

544
00:20:09,050 --> 00:20:22,070
inject it or use LD on so promoting

545
00:20:11,650 --> 00:20:23,750
quittance yes if if you don't protect

546
00:20:22,070 --> 00:20:25,879
for us oh sorry

547
00:20:23,750 --> 00:20:27,980
so the question was I load it into a lot

548
00:20:25,880 --> 00:20:30,170
of processes how do I not get a lot of

549
00:20:27,980 --> 00:20:31,520
callbacks and the answer is after about

550
00:20:30,170 --> 00:20:33,250
my hundreds callback I learned to check

551
00:20:31,520 --> 00:20:38,800
for pit one at the top of my library so

552
00:20:33,250 --> 00:20:38,800
that that's how any other questions

553
00:20:39,490 --> 00:20:44,910
those not a question

554
00:20:41,880 --> 00:20:47,130
right in anticipation of a question I

555
00:20:44,910 --> 00:20:49,710
have two lists for the defenders - how

556
00:20:47,130 --> 00:20:51,000
to defend against it number one you

557
00:20:49,710 --> 00:20:52,980
could rework the kernel to not allow all

558
00:20:51,000 --> 00:20:54,360
these things you could not let bad guys

559
00:20:52,980 --> 00:20:57,059
get ruined that really is the only way

560
00:20:54,360 --> 00:20:59,510
once you get root if you have any super

561
00:20:57,059 --> 00:21:03,240
critical things you can use open vsts

562
00:20:59,510 --> 00:21:05,280
sort of security issues to prevent a lot

563
00:21:03,240 --> 00:21:06,809
of this if you have the luxury of saying

564
00:21:05,280 --> 00:21:09,120
hey we need a bsd box and we're gonna

565
00:21:06,809 --> 00:21:10,770
read all it rewrite all our code but it

566
00:21:09,120 --> 00:21:13,620
is a pretty good way to do it if you

567
00:21:10,770 --> 00:21:16,918
have that luxury detecting it the logs

568
00:21:13,620 --> 00:21:19,949
are noisy which would also make it a lot

569
00:21:16,919 --> 00:21:21,270
harder to find and that noise watching

570
00:21:19,950 --> 00:21:22,320
the network because the malware is gonna

571
00:21:21,270 --> 00:21:25,200
have to have network comms anyway so

572
00:21:22,320 --> 00:21:27,510
make you minute warning and then we saw

573
00:21:25,200 --> 00:21:29,280
check for map memory segments anyways

574
00:21:27,510 --> 00:21:31,908
thank you all for coming appreciate it

575
00:21:29,280 --> 00:21:31,908
this early in the morning

576
00:21:34,830 --> 00:21:38,649
[Applause]

