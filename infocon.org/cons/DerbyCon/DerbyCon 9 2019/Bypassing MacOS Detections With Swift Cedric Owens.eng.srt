1
00:00:00,030 --> 00:00:06,029
all right good afternoon thank you all

2
00:00:03,300 --> 00:00:07,919
for coming out my name is Cedric Owens

3
00:00:06,029 --> 00:00:10,200
and I'll be talking about some ways

4
00:00:07,919 --> 00:00:14,820
around some common Mac OS detections

5
00:00:10,200 --> 00:00:16,169
using the Swift programming language so

6
00:00:14,820 --> 00:00:18,510
some background information on myself

7
00:00:16,170 --> 00:00:21,779
I'm currently on the red team at box

8
00:00:18,510 --> 00:00:24,090
based out of Austin Texas prior to doing

9
00:00:21,779 --> 00:00:26,939
red team I come from a large largely a

10
00:00:24,090 --> 00:00:28,980
blue team background doing Incident

11
00:00:26,939 --> 00:00:31,710
Response threat hunting threat detection

12
00:00:28,980 --> 00:00:33,090
and so that's still part of me that's

13
00:00:31,710 --> 00:00:34,320
really near and dear to my heart I

14
00:00:33,090 --> 00:00:37,380
really like working with blue teens

15
00:00:34,320 --> 00:00:40,190
helping validate detections helping blue

16
00:00:37,380 --> 00:00:42,750
teens understand the attackers mentality

17
00:00:40,190 --> 00:00:44,519
for different approaches and just

18
00:00:42,750 --> 00:00:46,260
integrating with blue team in general I

19
00:00:44,520 --> 00:00:48,690
really enjoyed it

20
00:00:46,260 --> 00:00:50,399
also I know red team is very broad and

21
00:00:48,690 --> 00:00:52,949
encompasses many different things but

22
00:00:50,399 --> 00:00:54,960
for me personally post exploitation is

23
00:00:52,949 --> 00:00:57,899
an area of interest of mine like I

24
00:00:54,960 --> 00:01:00,270
enjoyed a cat-and-mouse game of evading

25
00:00:57,899 --> 00:01:03,270
and or trying to evade the latest

26
00:01:00,270 --> 00:01:05,549
Prevention's and defenses also I was an

27
00:01:03,270 --> 00:01:07,320
early eighties baby so I do enjoy things

28
00:01:05,549 --> 00:01:09,630
that remind me of the 80s so you'll see

29
00:01:07,320 --> 00:01:12,270
some memes throughout my presentation

30
00:01:09,630 --> 00:01:13,710
reflecting that and Twitter handle at

31
00:01:12,270 --> 00:01:17,130
said islands where I'll occasionally

32
00:01:13,710 --> 00:01:19,199
post some things there so what I plan to

33
00:01:17,130 --> 00:01:20,189
talk about is a plan to start off

34
00:01:19,200 --> 00:01:22,560
talking about the State of the Union

35
00:01:20,189 --> 00:01:24,380
through my eyes for Mac OS from an

36
00:01:22,560 --> 00:01:27,630
offensive and defensive perspective

37
00:01:24,380 --> 00:01:29,520
common post exploitation methods that

38
00:01:27,630 --> 00:01:32,130
we've seen for Mac OS up to this point

39
00:01:29,520 --> 00:01:35,699
and the associated detection artifacts

40
00:01:32,130 --> 00:01:37,470
and then why migrate to Mac OS internals

41
00:01:35,700 --> 00:01:39,960
for post exploitation like what what

42
00:01:37,470 --> 00:01:42,420
what benefit will we get from that how

43
00:01:39,960 --> 00:01:44,490
can we do it and then last talk about

44
00:01:42,420 --> 00:01:49,140
some examples of doing just that using

45
00:01:44,490 --> 00:01:50,880
the Swift programming language so State

46
00:01:49,140 --> 00:01:53,670
of the Union I'll say again through my

47
00:01:50,880 --> 00:01:55,860
eyes the latest desktop operating system

48
00:01:53,670 --> 00:02:00,240
market share numbers I've seen windows

49
00:01:55,860 --> 00:02:02,789
was around 77% and Mac was around 14% so

50
00:02:00,240 --> 00:02:05,189
still a huge gap where Windows is

51
00:02:02,790 --> 00:02:06,960
leading away which is why most of the

52
00:02:05,189 --> 00:02:09,628
tactics that we read about and see our

53
00:02:06,960 --> 00:02:11,519
windows focus however if you're looking

54
00:02:09,628 --> 00:02:13,380
at fortune 500 companies a lot of

55
00:02:11,520 --> 00:02:15,690
household names at our windows

56
00:02:13,380 --> 00:02:18,060
it probably will be window shops one

57
00:02:15,690 --> 00:02:20,640
thing that I am noticing is that VIP

58
00:02:18,060 --> 00:02:23,730
users such as executives or admins with

59
00:02:20,640 --> 00:02:27,959
a lot of rights are being segmented over

60
00:02:23,730 --> 00:02:30,090
and more and more often over onto max so

61
00:02:27,960 --> 00:02:32,100
you look at that and you look over and

62
00:02:30,090 --> 00:02:33,960
look at tech companies in the Bay Area

63
00:02:32,100 --> 00:02:36,269
and it's almost a complete opposite

64
00:02:33,960 --> 00:02:39,180
where the vast majority of endpoints are

65
00:02:36,270 --> 00:02:41,160
Mac OS with very little windows so I

66
00:02:39,180 --> 00:02:43,740
think from an offensive and defensive

67
00:02:41,160 --> 00:02:47,940
perspective it's hugely beneficial to be

68
00:02:43,740 --> 00:02:49,740
familiar with Mac OS just because even

69
00:02:47,940 --> 00:02:51,090
in a window shop is going to be likely

70
00:02:49,740 --> 00:02:53,400
at some point you're going to have to

71
00:02:51,090 --> 00:02:56,550
either target a Mac OS device or

72
00:02:53,400 --> 00:02:59,310
investigated dig into it so I think I

73
00:02:56,550 --> 00:03:00,840
think that will be useful in terms of in

74
00:02:59,310 --> 00:03:03,000
point detection and response products

75
00:03:00,840 --> 00:03:04,800
those have definitely come a long way

76
00:03:03,000 --> 00:03:07,040
the first time I remember getting

77
00:03:04,800 --> 00:03:10,500
exposed to EDR from Mac it was really

78
00:03:07,040 --> 00:03:12,660
basically a flat file logging system the

79
00:03:10,500 --> 00:03:14,580
logs were barely normalized there wasn't

80
00:03:12,660 --> 00:03:16,650
much intelligence out of the box that

81
00:03:14,580 --> 00:03:18,270
would be useful to a blue team and so

82
00:03:16,650 --> 00:03:19,290
you fast forward a few years now a need

83
00:03:18,270 --> 00:03:21,750
er has gotten better

84
00:03:19,290 --> 00:03:23,459
the logs provide analysts with most of

85
00:03:21,750 --> 00:03:26,010
the stuff that are needed and most ADR

86
00:03:23,460 --> 00:03:28,590
products and there's even some decent

87
00:03:26,010 --> 00:03:31,380
out-of-the-box detection in terms of

88
00:03:28,590 --> 00:03:33,780
post exploitation what I've seen mostly

89
00:03:31,380 --> 00:03:35,970
up to this point have been scripting

90
00:03:33,780 --> 00:03:38,040
base post exploitation where the post

91
00:03:35,970 --> 00:03:39,660
exploitation tool itself lives on the

92
00:03:38,040 --> 00:03:42,120
command line and when I say that

93
00:03:39,660 --> 00:03:44,609
basically using a scripting language

94
00:03:42,120 --> 00:03:47,820
such as Python as an example to access

95
00:03:44,610 --> 00:03:51,930
shell commands that the tool uses for

96
00:03:47,820 --> 00:03:53,880
post exploitation so very generally

97
00:03:51,930 --> 00:03:55,650
speaking generically here when it comes

98
00:03:53,880 --> 00:03:58,560
to detection most detections have

99
00:03:55,650 --> 00:04:01,410
existed in this blue box here focus on

100
00:03:58,560 --> 00:04:03,000
command line and processes being being

101
00:04:01,410 --> 00:04:05,310
spawned and the reason being is because

102
00:04:03,000 --> 00:04:06,990
most of the poses exploitation tools up

103
00:04:05,310 --> 00:04:09,660
to this point have also lived in that

104
00:04:06,990 --> 00:04:11,520
blue box again being living on the

105
00:04:09,660 --> 00:04:13,590
command line through some type of

106
00:04:11,520 --> 00:04:15,270
scripting language on a host so you've

107
00:04:13,590 --> 00:04:17,280
got two command line where processes are

108
00:04:15,270 --> 00:04:18,720
spawned would you do various things and

109
00:04:17,279 --> 00:04:20,399
at the end of the day the process is

110
00:04:18,720 --> 00:04:22,980
really just a front-end for a back-end

111
00:04:20,399 --> 00:04:24,239
API call and so

112
00:04:22,980 --> 00:04:26,130
kind of what's happening in the windows

113
00:04:24,240 --> 00:04:27,900
side of the world it's kind of what I've

114
00:04:26,130 --> 00:04:29,940
been pushing myself to do is like get

115
00:04:27,900 --> 00:04:31,620
off the command line completely limit

116
00:04:29,940 --> 00:04:34,560
the number of processes I create and

117
00:04:31,620 --> 00:04:39,150
bring my own code to invoke API calls

118
00:04:34,560 --> 00:04:40,920
directly so I'm not completely bashing

119
00:04:39,150 --> 00:04:42,960
scripting languages at all like Python

120
00:04:40,920 --> 00:04:45,120
is my favorite by far and I even wrote

121
00:04:42,960 --> 00:04:47,460
my own post exploitation tool for Mac OS

122
00:04:45,120 --> 00:04:49,320
and Python but I wrote it from a bit I

123
00:04:47,460 --> 00:04:51,659
guess a bit of a different reason and

124
00:04:49,320 --> 00:04:53,849
it's called Mac shell and I wrote it for

125
00:04:51,660 --> 00:04:55,200
one I wanted to go myself I wanted to

126
00:04:53,850 --> 00:04:56,820
get underneath the hood of post

127
00:04:55,200 --> 00:04:59,340
exploitation so I can understand what

128
00:04:56,820 --> 00:05:01,290
are the unique challenges with writing

129
00:04:59,340 --> 00:05:02,880
your own what considerations do you need

130
00:05:01,290 --> 00:05:05,150
to keep in mind when building your own

131
00:05:02,880 --> 00:05:07,530
but I also wrote it for blue team's

132
00:05:05,150 --> 00:05:09,719
where it's very simple it's just a

133
00:05:07,530 --> 00:05:12,299
client and server script so blue teams

134
00:05:09,720 --> 00:05:14,130
can easily follow along the logic for

135
00:05:12,300 --> 00:05:15,780
how post exploitation works how to

136
00:05:14,130 --> 00:05:18,330
communication between client server

137
00:05:15,780 --> 00:05:20,489
happens how an operator controls and

138
00:05:18,330 --> 00:05:22,229
endpoint things of that nature and so as

139
00:05:20,490 --> 00:05:24,270
I wrote it a couple days stood out to me

140
00:05:22,230 --> 00:05:26,910
I kind of assumed that it would be in

141
00:05:24,270 --> 00:05:29,010
2018-2019 around when I was writing it

142
00:05:26,910 --> 00:05:31,830
that a lot of these the approaches used

143
00:05:29,010 --> 00:05:33,510
by this would be detected by most edr

144
00:05:31,830 --> 00:05:36,300
products but I was pretty surprised to

145
00:05:33,510 --> 00:05:39,240
find that was not the case a lot of the

146
00:05:36,300 --> 00:05:40,620
post exploitation using Python running

147
00:05:39,240 --> 00:05:42,540
running command line utilities were

148
00:05:40,620 --> 00:05:45,200
still not detected so I put my blue team

149
00:05:42,540 --> 00:05:47,310
hat on work with blue team started

150
00:05:45,200 --> 00:05:48,900
analyzing it and started to find a lot

151
00:05:47,310 --> 00:05:51,630
of common patterns that blue teams could

152
00:05:48,900 --> 00:05:53,429
easily key in on so some of those

153
00:05:51,630 --> 00:05:54,240
patterns include parent-child

154
00:05:53,430 --> 00:05:56,520
relationships

155
00:05:54,240 --> 00:05:59,130
so speaking of Python in this example

156
00:05:56,520 --> 00:06:02,310
for post exploitation OS libraries like

157
00:05:59,130 --> 00:06:05,430
system P open commands for Python to

158
00:06:02,310 --> 00:06:07,590
process for Python 3 they all operate at

159
00:06:05,430 --> 00:06:09,750
a similar and similar way when you look

160
00:06:07,590 --> 00:06:12,210
at parent-child relationships where by

161
00:06:09,750 --> 00:06:14,010
default you have Python spawning a shell

162
00:06:12,210 --> 00:06:15,630
environment which in this case by

163
00:06:14,010 --> 00:06:18,539
default has been SH you could totally

164
00:06:15,630 --> 00:06:20,100
change that but Python spawning shell

165
00:06:18,540 --> 00:06:20,580
environment which then executes the

166
00:06:20,100 --> 00:06:22,350
command

167
00:06:20,580 --> 00:06:24,510
another thing that blue teens could

168
00:06:22,350 --> 00:06:26,820
easily key in on that that I that I saw

169
00:06:24,510 --> 00:06:28,760
as I was analyzing my own tool was the

170
00:06:26,820 --> 00:06:32,010
count of network connections from Python

171
00:06:28,760 --> 00:06:33,300
since in this case Python is running and

172
00:06:32,010 --> 00:06:34,430
makes that initial connection to the

173
00:06:33,300 --> 00:06:36,320
server on

174
00:06:34,430 --> 00:06:38,030
outside the Hosier controlling python is

175
00:06:36,320 --> 00:06:40,550
just really sitting there waiting for

176
00:06:38,030 --> 00:06:42,020
the next command from the server so you

177
00:06:40,550 --> 00:06:44,780
could build some analytics around that

178
00:06:42,020 --> 00:06:47,570
and see how pythons beaconing out also

179
00:06:44,780 --> 00:06:49,159
command line strings again since tools

180
00:06:47,570 --> 00:06:50,810
up to this point have lived on a command

181
00:06:49,160 --> 00:06:53,240
line these are things blue teams can

182
00:06:50,810 --> 00:06:56,420
easily key in on so screen capture dash

183
00:06:53,240 --> 00:06:58,040
X that's the native way through through

184
00:06:56,420 --> 00:07:00,440
the terminal Mac OS to get a screenshot

185
00:06:58,040 --> 00:07:02,990
dash X tells it to do it quietly without

186
00:07:00,440 --> 00:07:05,030
making that camera click sound or OS a

187
00:07:02,990 --> 00:07:06,860
script and OS a script is really an

188
00:07:05,030 --> 00:07:10,219
engine that allows you to run Apple

189
00:07:06,860 --> 00:07:12,650
script on Mac OS which allows for easy

190
00:07:10,220 --> 00:07:15,560
automation of simple and complex tasks

191
00:07:12,650 --> 00:07:17,390
so like OS a script with the word pop-up

192
00:07:15,560 --> 00:07:19,880
may indicate that there's a user who's

193
00:07:17,390 --> 00:07:22,099
getting prompted to enter credentials or

194
00:07:19,880 --> 00:07:24,020
click a button or do something os a

195
00:07:22,100 --> 00:07:26,210
script and clipboard that may indicate

196
00:07:24,020 --> 00:07:28,640
that the users clipboard contents are

197
00:07:26,210 --> 00:07:31,039
being accessed so those are some common

198
00:07:28,640 --> 00:07:32,960
things and examples of traces that blue

199
00:07:31,040 --> 00:07:34,520
teams could easily key in on when you're

200
00:07:32,960 --> 00:07:34,900
post exploitation lives on the command

201
00:07:34,520 --> 00:07:37,760
line

202
00:07:34,900 --> 00:07:39,679
and so here's an example from my tool

203
00:07:37,760 --> 00:07:41,870
Mac shell one of the command operator

204
00:07:39,680 --> 00:07:44,300
commands I had was check security so an

205
00:07:41,870 --> 00:07:46,010
operator enters check security that

206
00:07:44,300 --> 00:07:47,420
commands get sent over to the client

207
00:07:46,010 --> 00:07:49,370
that you're controlling and what happens

208
00:07:47,420 --> 00:07:51,260
on the client side is it evaluates that

209
00:07:49,370 --> 00:07:53,650
command and converts it to a PS command

210
00:07:51,260 --> 00:07:57,500
where it starts grepping for things like

211
00:07:53,650 --> 00:07:59,090
EDR products or antivirus and then sends

212
00:07:57,500 --> 00:08:01,640
the results back so the operator knows

213
00:07:59,090 --> 00:08:04,159
what a V or EDR products and running

214
00:08:01,640 --> 00:08:06,140
from an EDI perspective this fits nicely

215
00:08:04,160 --> 00:08:09,350
into what was shown on a previous slide

216
00:08:06,140 --> 00:08:12,050
where you have Python responding Venice

217
00:08:09,350 --> 00:08:14,720
H which in this case spawns PS to run

218
00:08:12,050 --> 00:08:16,220
this command and so if you step back

219
00:08:14,720 --> 00:08:17,810
over time and look at a post

220
00:08:16,220 --> 00:08:19,070
exploitation running you can you

221
00:08:17,810 --> 00:08:21,080
continue to see the same thing over and

222
00:08:19,070 --> 00:08:22,940
over as Python waits for commands from

223
00:08:21,080 --> 00:08:24,740
the server each time it gets a command

224
00:08:22,940 --> 00:08:27,110
from the server a new bin SH instant

225
00:08:24,740 --> 00:08:29,480
instance is spawned at which which

226
00:08:27,110 --> 00:08:31,250
allows the system to in turn operate or

227
00:08:29,480 --> 00:08:33,140
execute whatever shell command that the

228
00:08:31,250 --> 00:08:35,390
operator is trying to run so this is

229
00:08:33,140 --> 00:08:37,100
typically how over time it looks when

230
00:08:35,390 --> 00:08:41,659
your post exploitation lives on the

231
00:08:37,100 --> 00:08:43,340
command line so some pros for scripting

232
00:08:41,659 --> 00:08:45,260
based post exploitation living on the

233
00:08:43,340 --> 00:08:45,640
command line it's has been convenient up

234
00:08:45,260 --> 00:08:48,220
to the

235
00:08:45,640 --> 00:08:49,900
point scripting languages have been on

236
00:08:48,220 --> 00:08:51,550
mac OS natively so it's not like you

237
00:08:49,900 --> 00:08:53,140
have to install anything there's less

238
00:08:51,550 --> 00:08:54,459
headaches like you don't have to worry

239
00:08:53,140 --> 00:08:56,340
about gatekeeper you have to worry about

240
00:08:54,460 --> 00:08:59,740
digital signatures notarization

241
00:08:56,340 --> 00:09:01,800
sandboxing things that you know will

242
00:08:59,740 --> 00:09:04,750
cause an attacker more time and planning

243
00:09:01,800 --> 00:09:06,370
and it may still go undetected in most

244
00:09:04,750 --> 00:09:08,440
environment and a lot of environments

245
00:09:06,370 --> 00:09:13,300
today that may just not be focusing on

246
00:09:08,440 --> 00:09:14,830
mac OS the cons however there are teams

247
00:09:13,300 --> 00:09:18,400
that are used blue teams that are used

248
00:09:14,830 --> 00:09:19,810
to defending mac OS enterprises at that

249
00:09:18,400 --> 00:09:21,880
level and they're familiar with these

250
00:09:19,810 --> 00:09:23,229
tactics and if they see something

251
00:09:21,880 --> 00:09:25,120
running on a command line and they have

252
00:09:23,230 --> 00:09:27,220
alerting for it will burn down a red

253
00:09:25,120 --> 00:09:30,790
team operation really quick and early in

254
00:09:27,220 --> 00:09:33,070
the process and it also provides very

255
00:09:30,790 --> 00:09:34,750
limited options for mac OS like there's

256
00:09:33,070 --> 00:09:36,970
lots of other things you can do for post

257
00:09:34,750 --> 00:09:39,880
exploitation on mac OS beyond just the

258
00:09:36,970 --> 00:09:43,030
command-line and so this was something

259
00:09:39,880 --> 00:09:45,460
that also really stood out to me looking

260
00:09:43,030 --> 00:09:47,050
at developer notes and how like I said

261
00:09:45,460 --> 00:09:48,670
up to this point we've been able we

262
00:09:47,050 --> 00:09:50,020
being offensive engineers have been able

263
00:09:48,670 --> 00:09:52,540
to take advantage of the fact that

264
00:09:50,020 --> 00:09:55,449
scripting languages have been on Mac OS

265
00:09:52,540 --> 00:09:58,780
but going forward the plans are to

266
00:09:55,450 --> 00:10:00,070
remove those going forward so we no

267
00:09:58,780 --> 00:10:02,800
longer be able to make that assumption

268
00:10:00,070 --> 00:10:04,360
if we're doing a red team operation and

269
00:10:02,800 --> 00:10:05,680
planning or targeting Mac that we can

270
00:10:04,360 --> 00:10:07,750
use Python because it's going to be

271
00:10:05,680 --> 00:10:09,609
there yeah user can install it

272
00:10:07,750 --> 00:10:11,500
themselves but it's just not a guarantee

273
00:10:09,610 --> 00:10:14,790
that that the target user base will have

274
00:10:11,500 --> 00:10:17,110
it on so for me this was a reminder that

275
00:10:14,790 --> 00:10:21,219
it's time to start pivoting and trying

276
00:10:17,110 --> 00:10:23,440
some different techniques and so that's

277
00:10:21,220 --> 00:10:25,060
what brought me to the next aspect of

278
00:10:23,440 --> 00:10:26,650
thinking what's gone on in the windows

279
00:10:25,060 --> 00:10:28,569
world where you think about batch

280
00:10:26,650 --> 00:10:29,170
commands that eventually evolve to

281
00:10:28,570 --> 00:10:31,980
powershell

282
00:10:29,170 --> 00:10:34,180
which eventually evolved to c-sharp and

283
00:10:31,980 --> 00:10:35,830
over time just getting away from the

284
00:10:34,180 --> 00:10:38,199
command line is starting to invoke api

285
00:10:35,830 --> 00:10:41,880
calls like can we do the same thing for

286
00:10:38,200 --> 00:10:43,780
mac OS which will basically allow us to

287
00:10:41,880 --> 00:10:47,860
challenge the way we've been doing

288
00:10:43,780 --> 00:10:50,020
detection so far so what I did is

289
00:10:47,860 --> 00:10:53,290
challenge myself I showed you guys the

290
00:10:50,020 --> 00:10:55,180
slide earlier for Mac shell which is the

291
00:10:53,290 --> 00:10:57,010
client piece that's running the host

292
00:10:55,180 --> 00:10:58,620
your controlling is in Python so I'll

293
00:10:57,010 --> 00:11:01,680
challenge myself as a side project

294
00:10:58,620 --> 00:11:04,280
to rewrite that over into swift so that

295
00:11:01,680 --> 00:11:06,390
I can then take as many command line

296
00:11:04,280 --> 00:11:08,790
command line based post exploitation

297
00:11:06,390 --> 00:11:11,850
tasks and convert them from the command

298
00:11:08,790 --> 00:11:14,819
line over to API calls so I pick Swift

299
00:11:11,850 --> 00:11:16,800
as the language Objective C would have

300
00:11:14,820 --> 00:11:18,360
been the other option Objective C has

301
00:11:16,800 --> 00:11:20,069
been around for a while the Swift is

302
00:11:18,360 --> 00:11:24,000
pretty new but I personally like the way

303
00:11:20,070 --> 00:11:26,160
Swift is laid out so I pick Swift and it

304
00:11:24,000 --> 00:11:28,200
gives the same access that Objective C

305
00:11:26,160 --> 00:11:29,640
provides in terms of a lot of the API

306
00:11:28,200 --> 00:11:32,850
calls that I would need for post

307
00:11:29,640 --> 00:11:36,060
exploitation like such as the cocoa API

308
00:11:32,850 --> 00:11:37,800
which you could new things like anything

309
00:11:36,060 --> 00:11:41,099
from screenshots to navigating the file

310
00:11:37,800 --> 00:11:43,380
system an OS a kit which you can use to

311
00:11:41,100 --> 00:11:46,440
programmatically run JavaScript for

312
00:11:43,380 --> 00:11:48,630
automation on your Mac OS endpoints but

313
00:11:46,440 --> 00:11:50,850
long story short I pick Swift and

314
00:11:48,630 --> 00:11:52,800
started down that road and it gave me

315
00:11:50,850 --> 00:11:56,190
that that ability to meet that goal of

316
00:11:52,800 --> 00:11:57,890
moving off the command line so quick

317
00:11:56,190 --> 00:12:00,120
steps that I took when studying up

318
00:11:57,890 --> 00:12:01,860
getting started down this road is I

319
00:12:00,120 --> 00:12:04,290
download Xcode from the App Store for

320
00:12:01,860 --> 00:12:05,640
Mac OS it installed the corresponding

321
00:12:04,290 --> 00:12:08,670
version of Swift based on whatever

322
00:12:05,640 --> 00:12:10,290
version of Xcode you download I use

323
00:12:08,670 --> 00:12:12,650
playgrounds initially just to get

324
00:12:10,290 --> 00:12:15,599
familiar with an idea or concept or

325
00:12:12,650 --> 00:12:18,000
syntax once I got comfortable I didn't

326
00:12:15,600 --> 00:12:21,150
migrated over to projects like a package

327
00:12:18,000 --> 00:12:23,010
or a maka binary built the code and then

328
00:12:21,150 --> 00:12:26,130
compiled it and executed it so I have my

329
00:12:23,010 --> 00:12:28,170
binary so once you're inside of Xcode

330
00:12:26,130 --> 00:12:29,880
this is kind of what it looks like when

331
00:12:28,170 --> 00:12:31,319
you start a new project so as you can

332
00:12:29,880 --> 00:12:33,689
see here there's tons of different

333
00:12:31,320 --> 00:12:36,390
options of what you can build Bruce

334
00:12:33,690 --> 00:12:38,520
Swift or objective-c for this talk I'm

335
00:12:36,390 --> 00:12:40,439
focusing on the areas of command-line

336
00:12:38,520 --> 00:12:42,750
tool option at the top which I've used

337
00:12:40,440 --> 00:12:45,120
to build standalone Mac o binaries or

338
00:12:42,750 --> 00:12:47,670
the cocoa app which I've used to build

339
00:12:45,120 --> 00:12:49,890
app packages for Red Team use as well

340
00:12:47,670 --> 00:12:52,319
but there's tons of other options and

341
00:12:49,890 --> 00:12:55,860
they all allow access where you can use

342
00:12:52,320 --> 00:12:57,780
the same powerful API calls so I

343
00:12:55,860 --> 00:13:00,420
mentioned earlier that I challenged

344
00:12:57,780 --> 00:13:02,160
myself to convert the Python client over

345
00:13:00,420 --> 00:13:04,110
into Swift and get off the command line

346
00:13:02,160 --> 00:13:07,079
so next I'll just show you guys some

347
00:13:04,110 --> 00:13:08,520
examples of what the command line

348
00:13:07,080 --> 00:13:12,060
argument was and what the code

349
00:13:08,520 --> 00:13:15,150
equivalent is when you invoke the API so

350
00:13:12,060 --> 00:13:18,719
first example my tool max you ran the

351
00:13:15,150 --> 00:13:21,150
screen capture command and spit out a

352
00:13:18,720 --> 00:13:23,510
JPEG of the screenshot so what that

353
00:13:21,150 --> 00:13:27,060
looks like from cold perspective is

354
00:13:23,510 --> 00:13:29,160
using the cocoa API I also imported a

355
00:13:27,060 --> 00:13:30,540
third-party package called socket so

356
00:13:29,160 --> 00:13:33,420
that I could make a socket connection

357
00:13:30,540 --> 00:13:35,250
and send the screenshot but essentially

358
00:13:33,420 --> 00:13:37,530
what's happening in a code here is your

359
00:13:35,250 --> 00:13:39,480
enumerate in your active displays you're

360
00:13:37,530 --> 00:13:41,550
getting image content for each and

361
00:13:39,480 --> 00:13:42,630
you're storing that in a variable so

362
00:13:41,550 --> 00:13:44,839
that then you can like write the

363
00:13:42,630 --> 00:13:46,740
screenshot to a file send it to a server

364
00:13:44,840 --> 00:13:50,160
kind of whatever you want to do with

365
00:13:46,740 --> 00:13:53,940
that at that point a second example

366
00:13:50,160 --> 00:13:56,699
faking I guess prompting users with fake

367
00:13:53,940 --> 00:13:58,980
authentication prompts using OS a script

368
00:13:56,700 --> 00:14:01,140
you feed it on the command line you feed

369
00:13:58,980 --> 00:14:03,150
it these Apple script parameters to say

370
00:14:01,140 --> 00:14:06,750
hey set this dialogue with this message

371
00:14:03,150 --> 00:14:10,590
have a text box so forth and so on so

372
00:14:06,750 --> 00:14:13,740
what it looks like in code is again with

373
00:14:10,590 --> 00:14:15,900
the cocoa API is you can build an

374
00:14:13,740 --> 00:14:17,880
innocent object from the Innes alert

375
00:14:15,900 --> 00:14:20,310
class and then you can manually build

376
00:14:17,880 --> 00:14:21,810
the items for that alert that you want

377
00:14:20,310 --> 00:14:24,270
the user to see so you can build your

378
00:14:21,810 --> 00:14:26,430
window title your text you can add

379
00:14:24,270 --> 00:14:29,189
buttons this way you can add a text box

380
00:14:26,430 --> 00:14:31,680
and then what happens is you capture the

381
00:14:29,190 --> 00:14:33,390
users interaction with that alert so you

382
00:14:31,680 --> 00:14:35,459
capture what text enter in a box you

383
00:14:33,390 --> 00:14:37,020
capture what buttons they enter things

384
00:14:35,460 --> 00:14:39,900
of that nature so this is a way to do

385
00:14:37,020 --> 00:14:42,180
that same task that's on the command

386
00:14:39,900 --> 00:14:44,069
line before programmatically now which

387
00:14:42,180 --> 00:14:48,329
makes it makes detection a little bit

388
00:14:44,070 --> 00:14:51,330
harder another example is you can invoke

389
00:14:48,330 --> 00:14:53,880
the NS Apple script class and just feed

390
00:14:51,330 --> 00:14:56,610
the Apple script command to that class

391
00:14:53,880 --> 00:14:58,260
so that's so in this example you're

392
00:14:56,610 --> 00:15:00,300
actually still using the Apple script

393
00:14:58,260 --> 00:15:02,610
engine the previous one I just showed

394
00:15:00,300 --> 00:15:04,319
you was just building the alert manually

395
00:15:02,610 --> 00:15:06,120
here you can still leverage the Apple

396
00:15:04,320 --> 00:15:08,550
script engine without using the OS a

397
00:15:06,120 --> 00:15:11,339
script binary on a host and this is what

398
00:15:08,550 --> 00:15:15,120
that code will look like here

399
00:15:11,339 --> 00:15:17,399
another example am i my Mac Mac shell

400
00:15:15,120 --> 00:15:19,889
Python tool to navigate the file system

401
00:15:17,399 --> 00:15:21,720
it did things like CDLs PWD you know to

402
00:15:19,889 --> 00:15:24,089
get around on the host i'm an

403
00:15:21,720 --> 00:15:27,089
alternative would be using the coco api

404
00:15:24,089 --> 00:15:28,769
you can leverage the file manager class

405
00:15:27,089 --> 00:15:30,689
which will allow you to do things like

406
00:15:28,769 --> 00:15:33,629
get your current directory path get

407
00:15:30,689 --> 00:15:35,399
contents of your directory change the

408
00:15:33,629 --> 00:15:37,319
directory path and what's neat with this

409
00:15:35,399 --> 00:15:39,269
class also is if you're looping through

410
00:15:37,319 --> 00:15:40,290
items in a directory you can check a

411
00:15:39,269 --> 00:15:42,540
property called

412
00:15:40,290 --> 00:15:44,819
has directory path and it has directory

413
00:15:42,540 --> 00:15:46,469
path evaluates to true that lets you

414
00:15:44,819 --> 00:15:48,269
know the item you're checking is a sub

415
00:15:46,470 --> 00:15:50,519
directory and everything else is a file

416
00:15:48,269 --> 00:15:53,370
so this is a neat way programmatically

417
00:15:50,519 --> 00:15:58,139
to kind of navigate the filesystem and

418
00:15:53,370 --> 00:16:00,449
enumerate files and directories next

419
00:15:58,139 --> 00:16:02,430
example on a command line OS a script -

420
00:16:00,449 --> 00:16:05,719
e return clipboard gets clipboard

421
00:16:02,430 --> 00:16:07,949
contents and from a code perspective

422
00:16:05,720 --> 00:16:09,990
what you're essentially doing here is

423
00:16:07,949 --> 00:16:11,910
working with the NS pasteboard class and

424
00:16:09,990 --> 00:16:12,389
from a clipboard perspective on the

425
00:16:11,910 --> 00:16:14,249
backend

426
00:16:12,389 --> 00:16:16,019
it's basically considered a paste board

427
00:16:14,249 --> 00:16:17,850
so you're just getting the string

428
00:16:16,019 --> 00:16:19,620
contents of your paste board storing it

429
00:16:17,850 --> 00:16:24,779
as a variable where you can send it to

430
00:16:19,620 --> 00:16:26,309
another host so those are examples of

431
00:16:24,779 --> 00:16:28,740
getting off the command line and using

432
00:16:26,309 --> 00:16:30,719
code and next what I'll do is just kind

433
00:16:28,740 --> 00:16:34,920
of walk through some examples of how you

434
00:16:30,720 --> 00:16:38,370
can build red team focused apps or apps

435
00:16:34,920 --> 00:16:40,860
for Red Team purposes again using code

436
00:16:38,370 --> 00:16:44,699
and not not having to rely on a command

437
00:16:40,860 --> 00:16:46,920
line so if you're inside of Xcode and

438
00:16:44,699 --> 00:16:48,990
you want to build your own app you slap

439
00:16:46,920 --> 00:16:51,930
you select the cocoa app and you're

440
00:16:48,990 --> 00:16:53,879
brought here and I'll kind of walk

441
00:16:51,930 --> 00:16:55,888
through some items on the left so you're

442
00:16:53,879 --> 00:16:57,689
here's your main storyboard this is

443
00:16:55,889 --> 00:17:00,929
where you design a window that when your

444
00:16:57,689 --> 00:17:03,329
app is executed that the user sees and

445
00:17:00,929 --> 00:17:05,760
interacts with so that's what the main

446
00:17:03,329 --> 00:17:07,470
storyboard is you have on the Left app

447
00:17:05,760 --> 00:17:09,199
delegate dot Swift that's where you can

448
00:17:07,470 --> 00:17:11,760
put code around terminating your app

449
00:17:09,199 --> 00:17:14,010
you've got view controller that's Swift

450
00:17:11,760 --> 00:17:16,260
that's where you can put code behind

451
00:17:14,010 --> 00:17:18,089
your window elements so if you want to

452
00:17:16,260 --> 00:17:20,220
user click a button and something to

453
00:17:18,089 --> 00:17:22,109
happen you put that code in view

454
00:17:20,220 --> 00:17:23,000
controller that's Swift and then assets

455
00:17:22,109 --> 00:17:25,939
dot X see

456
00:17:23,000 --> 00:17:28,790
I've used that to add images to your

457
00:17:25,940 --> 00:17:31,670
window or set an icon for your app

458
00:17:28,790 --> 00:17:33,800
package things of that nature so and

459
00:17:31,670 --> 00:17:35,630
then here you just continue to design it

460
00:17:33,800 --> 00:17:37,850
till you get it to the point where it's

461
00:17:35,630 --> 00:17:39,680
ready for a Red Team use and it entices

462
00:17:37,850 --> 00:17:42,469
a user to do something so let's say

463
00:17:39,680 --> 00:17:44,590
you've got that set up your next step

464
00:17:42,470 --> 00:17:47,450
would you do is you'd have to go through

465
00:17:44,590 --> 00:17:49,610
sandboxing to specify what accesses your

466
00:17:47,450 --> 00:17:51,020
app needs now you could completely turn

467
00:17:49,610 --> 00:17:53,510
off sandboxing but I would recommend

468
00:17:51,020 --> 00:17:55,850
keeping it on and just specifying what

469
00:17:53,510 --> 00:17:57,950
accesses your app needs and the reason

470
00:17:55,850 --> 00:17:59,780
being is and we'll talk a few more

471
00:17:57,950 --> 00:18:02,270
slides down the road about this but if

472
00:17:59,780 --> 00:18:04,250
you turn off sandboxing it could affect

473
00:18:02,270 --> 00:18:07,490
your ability to get the app notarized

474
00:18:04,250 --> 00:18:09,560
which you may have to do depending on

475
00:18:07,490 --> 00:18:11,780
the target OS that you're building for

476
00:18:09,560 --> 00:18:14,090
and things of that nature so I recommend

477
00:18:11,780 --> 00:18:17,660
keeping it on and here's an example of

478
00:18:14,090 --> 00:18:20,600
setting your sandbox for a Red Team app

479
00:18:17,660 --> 00:18:22,760
in this case you see we have the sandbox

480
00:18:20,600 --> 00:18:24,800
set because in this case we have the app

481
00:18:22,760 --> 00:18:26,900
that's connecting to a situ server so we

482
00:18:24,800 --> 00:18:28,159
want outbound connections enabled you

483
00:18:26,900 --> 00:18:30,950
want the app to be able to access the

484
00:18:28,160 --> 00:18:33,320
camera context calendar and then files

485
00:18:30,950 --> 00:18:34,970
on the system so that's pretty easy you

486
00:18:33,320 --> 00:18:36,830
just click capabilities at the top and

487
00:18:34,970 --> 00:18:38,810
you check these items and what happens

488
00:18:36,830 --> 00:18:39,409
is each item that you check in the

489
00:18:38,810 --> 00:18:41,450
sandbox

490
00:18:39,410 --> 00:18:43,310
it creates an entitlements file that's

491
00:18:41,450 --> 00:18:46,310
part of your app package so when your

492
00:18:43,310 --> 00:18:48,290
app is executed on a host the operating

493
00:18:46,310 --> 00:18:50,270
system reads from the entitlements file

494
00:18:48,290 --> 00:18:51,980
to make a determination of what your app

495
00:18:50,270 --> 00:18:56,180
is allowed to do so that's kind of how

496
00:18:51,980 --> 00:18:58,310
it works so now so you've got your

497
00:18:56,180 --> 00:19:00,740
sandboxing set up for your app now you

498
00:18:58,310 --> 00:19:02,870
want to start adding code behind the

499
00:19:00,740 --> 00:19:05,080
elements on your window so like when a

500
00:19:02,870 --> 00:19:07,580
user clicks a button something happens

501
00:19:05,080 --> 00:19:09,860
here what you would do is you go back to

502
00:19:07,580 --> 00:19:12,470
main that's your main story board and

503
00:19:09,860 --> 00:19:14,209
you option click so you hold down an

504
00:19:12,470 --> 00:19:16,220
option button and click view controller

505
00:19:14,210 --> 00:19:18,440
dot Swift and that will bring up the

506
00:19:16,220 --> 00:19:19,970
window that dark window on the right is

507
00:19:18,440 --> 00:19:21,920
the view controller that Swift code so

508
00:19:19,970 --> 00:19:25,550
you've got your code next to your design

509
00:19:21,920 --> 00:19:27,740
window and the reason I believe Xcode

510
00:19:25,550 --> 00:19:29,510
has it set up that way is so that you

511
00:19:27,740 --> 00:19:31,790
can easily drag and drop elements from

512
00:19:29,510 --> 00:19:34,129
your window over into your code so the

513
00:19:31,790 --> 00:19:36,440
Xcode knows now that this variable is

514
00:19:34,130 --> 00:19:38,990
linked to this particular item

515
00:19:36,440 --> 00:19:41,960
so in this example in a screenshot like

516
00:19:38,990 --> 00:19:44,840
dragging a holding ctrl and dragging and

517
00:19:41,960 --> 00:19:48,800
dropping in a text box it created a link

518
00:19:44,840 --> 00:19:51,199
in the code and iboutlet variable and IB

519
00:19:48,800 --> 00:19:54,800
is just an interface binding so that's

520
00:19:51,200 --> 00:19:57,170
kind of how that works there and here's

521
00:19:54,800 --> 00:20:00,860
an example of code here if you want to

522
00:19:57,170 --> 00:20:02,930
put code behind your app window on like

523
00:20:00,860 --> 00:20:04,340
to have it actually capture credentials

524
00:20:02,930 --> 00:20:06,350
here's an example of what that code

525
00:20:04,340 --> 00:20:08,840
would look like once the button is

526
00:20:06,350 --> 00:20:11,929
clicked the string values of those two

527
00:20:08,840 --> 00:20:14,899
text boxes are grabbed you can I used

528
00:20:11,930 --> 00:20:18,620
Alamo fire a third party package to

529
00:20:14,900 --> 00:20:20,870
allow easy URL requests so you just grab

530
00:20:18,620 --> 00:20:22,790
the contents of that of your text boxes

531
00:20:20,870 --> 00:20:25,760
that you're targeting make the URL

532
00:20:22,790 --> 00:20:27,470
request set it as HTTP POST and then

533
00:20:25,760 --> 00:20:29,390
when you do tab you set up a task and

534
00:20:27,470 --> 00:20:31,340
then when you when at the bottom where

535
00:20:29,390 --> 00:20:34,010
it says tasks that resume that actually

536
00:20:31,340 --> 00:20:36,679
executes the task give it a second to

537
00:20:34,010 --> 00:20:39,350
sleep to make sure it completes the task

538
00:20:36,680 --> 00:20:40,520
and then you can exit out but something

539
00:20:39,350 --> 00:20:42,679
to keep in mind depending on how you

540
00:20:40,520 --> 00:20:44,780
distribute the app for your Red Team if

541
00:20:42,680 --> 00:20:46,160
you're gonna like plan to have it hosted

542
00:20:44,780 --> 00:20:48,830
where users download it through their

543
00:20:46,160 --> 00:20:51,320
browser or email it out some as an

544
00:20:48,830 --> 00:20:54,020
attachment you'll have to get your app

545
00:20:51,320 --> 00:20:56,540
signed and likely notarized for future

546
00:20:54,020 --> 00:20:58,010
versions of Mac OS as well because of

547
00:20:56,540 --> 00:20:59,720
gatekeeper and what gatekeeper checks

548
00:20:58,010 --> 00:21:01,610
for so you have to set up your own

549
00:20:59,720 --> 00:21:04,880
developer account

550
00:21:01,610 --> 00:21:06,020
I recommend a burner account that way in

551
00:21:04,880 --> 00:21:07,790
case it gets kicked out to the developer

552
00:21:06,020 --> 00:21:10,070
program you can move on to the next one

553
00:21:07,790 --> 00:21:12,200
and you can go to developer to Apple

554
00:21:10,070 --> 00:21:15,230
comp a your 100 bucks in and get that

555
00:21:12,200 --> 00:21:17,510
set up and here's another example of

556
00:21:15,230 --> 00:21:19,550
what you could do in your app code I'm

557
00:21:17,510 --> 00:21:21,200
not sure if any of you guys or how many

558
00:21:19,550 --> 00:21:24,470
of you are familiar with app fill by

559
00:21:21,200 --> 00:21:28,120
Cody Thomas yeah pretty cool it's a

560
00:21:24,470 --> 00:21:30,650
really cool cross-platform c-2

561
00:21:28,120 --> 00:21:33,560
infrastructure for framework if you will

562
00:21:30,650 --> 00:21:35,780
format which includes Mac OS and so I'm

563
00:21:33,560 --> 00:21:38,030
really cool project so if you wanted to

564
00:21:35,780 --> 00:21:40,070
have your app like initiate a connection

565
00:21:38,030 --> 00:21:41,840
to an app file server you could add this

566
00:21:40,070 --> 00:21:42,980
code here and what's kind of step

567
00:21:41,840 --> 00:21:44,750
through briefly what's happening is

568
00:21:42,980 --> 00:21:48,010
you're creating an asynchronous thread

569
00:21:44,750 --> 00:21:50,050
which is feeding in this

570
00:21:48,010 --> 00:21:52,540
code here where the script variable is

571
00:21:50,050 --> 00:21:54,639
that is the JavaScript for automation

572
00:21:52,540 --> 00:21:56,470
command that you're feeding into OS a

573
00:21:54,640 --> 00:21:58,480
script but you're feeding it into the

574
00:21:56,470 --> 00:22:00,730
class rather than a binary on the host

575
00:21:58,480 --> 00:22:03,550
so it makes it a little harder to detect

576
00:22:00,730 --> 00:22:05,470
so you execute that give it a second and

577
00:22:03,550 --> 00:22:07,270
then the set activation policy of

578
00:22:05,470 --> 00:22:09,670
accessory will hide your app from the

579
00:22:07,270 --> 00:22:11,200
dock at the bottom and then you can the

580
00:22:09,670 --> 00:22:13,450
last line will actually hide your app

581
00:22:11,200 --> 00:22:16,210
itself so the app is in the background

582
00:22:13,450 --> 00:22:17,740
connecting to Apfel though to the user

583
00:22:16,210 --> 00:22:20,500
it looks like nothing's running I could

584
00:22:17,740 --> 00:22:22,870
disappear and it is gone one thing to

585
00:22:20,500 --> 00:22:25,000
keep in mind app transport security from

586
00:22:22,870 --> 00:22:27,040
ever Apple will check connections from

587
00:22:25,000 --> 00:22:28,870
your app out to a server so what I've

588
00:22:27,040 --> 00:22:31,210
learned is not to use like self-signed

589
00:22:28,870 --> 00:22:32,830
cert scuzz ATS will block those but if

590
00:22:31,210 --> 00:22:34,450
you have a valid circuit or even a let's

591
00:22:32,830 --> 00:22:37,600
encrypt cert is fine as well

592
00:22:34,450 --> 00:22:39,250
where ATS will allow that outbound

593
00:22:37,600 --> 00:22:41,860
connection one other thing about

594
00:22:39,250 --> 00:22:44,200
notarization I did some testing or had

595
00:22:41,860 --> 00:22:46,360
an app where that had credential

596
00:22:44,200 --> 00:22:49,120
stealing like the previous slide and had

597
00:22:46,360 --> 00:22:53,620
Apfel code like what's here on this

598
00:22:49,120 --> 00:22:55,360
slide and sent it to sip it up to Apple

599
00:22:53,620 --> 00:22:57,790
to be notarized and what I found was

600
00:22:55,360 --> 00:23:00,629
that Apple successfully notarized it and

601
00:22:57,790 --> 00:23:03,100
sent it back and then about a week later

602
00:23:00,630 --> 00:23:04,830
like they did some back-end processing

603
00:23:03,100 --> 00:23:07,330
and then they you know I kicked the

604
00:23:04,830 --> 00:23:08,830
revoke to search for that app and kick

605
00:23:07,330 --> 00:23:11,350
the account I use out of the Developer

606
00:23:08,830 --> 00:23:14,139
Program so technically I had a week to

607
00:23:11,350 --> 00:23:15,879
use it which doesn't sound like a long

608
00:23:14,140 --> 00:23:18,730
time but if you get someone to execute

609
00:23:15,880 --> 00:23:19,840
your code and it's already running even

610
00:23:18,730 --> 00:23:21,190
it doesn't really matter if they've

611
00:23:19,840 --> 00:23:22,959
revoke the cert because I already have

612
00:23:21,190 --> 00:23:24,900
my shell you know I have access to the

613
00:23:22,960 --> 00:23:27,070
hosts so just something to keep in mind

614
00:23:24,900 --> 00:23:28,960
running short on time so I want to quick

615
00:23:27,070 --> 00:23:32,590
very quickly step through these examples

616
00:23:28,960 --> 00:23:34,570
of detection for both old kind of what I

617
00:23:32,590 --> 00:23:37,629
would call to the command line based

618
00:23:34,570 --> 00:23:40,450
post exploitation as well as the code

619
00:23:37,630 --> 00:23:41,140
base which is looking at OSA script

620
00:23:40,450 --> 00:23:43,480
execution

621
00:23:41,140 --> 00:23:45,610
what spawning shell environments on your

622
00:23:43,480 --> 00:23:48,010
host and at the end of the day just

623
00:23:45,610 --> 00:23:50,020
having a good network visibility being

624
00:23:48,010 --> 00:23:52,000
able to detect beaconing type activity

625
00:23:50,020 --> 00:23:53,830
seeing anomalies around apps are you

626
00:23:52,000 --> 00:23:56,380
dropping other files or apps beaconing

627
00:23:53,830 --> 00:23:57,879
out things of that nature one other

628
00:23:56,380 --> 00:24:00,100
thing I mentioned I recommend for blue

629
00:23:57,880 --> 00:24:02,230
teens is to stay up with

630
00:24:00,100 --> 00:24:03,580
which perches Patrick mortals company

631
00:24:02,230 --> 00:24:05,740
which is and he's been on the forefront

632
00:24:03,580 --> 00:24:07,389
of bleeding edge research for a while I

633
00:24:05,740 --> 00:24:10,360
think some cool things will come out of

634
00:24:07,390 --> 00:24:15,340
this dis joining between these two four

635
00:24:10,360 --> 00:24:18,010
blue teams last just a mom here's a link

636
00:24:15,340 --> 00:24:20,560
to the swift version of my Python code

637
00:24:18,010 --> 00:24:22,690
oh my github and I have a blog post as

638
00:24:20,560 --> 00:24:24,159
well that goes into more detail for

639
00:24:22,690 --> 00:24:26,590
things that I mentioned here in the talk

640
00:24:24,160 --> 00:24:30,610
and definitely check out a fella by Cody

641
00:24:26,590 --> 00:24:32,530
Thomas so again out of time but thank

642
00:24:30,610 --> 00:24:33,610
you guys for listening in and feel free

643
00:24:32,530 --> 00:24:35,970
to come grab me if you have any

644
00:24:33,610 --> 00:24:35,969
questions

