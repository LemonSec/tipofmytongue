1
00:00:00,000 --> 00:00:09,540
ok the doors are closed so i think i'm
gonna start my name is Brandon Young and

2
00:00:09,540 --> 00:00:13,258
I'm going by the name of my talk is
reversing all the malware and wisest why

3
00:00:13,259 --> 00:00:15,809
you should stop it

4
00:00:15,809 --> 00:00:19,740
so first no I'm not truly you guys not
telling you to stop reverse-engineering

5
00:00:19,740 --> 00:00:23,909
it's not what I want you to do i'm a
reverse engineer i do it everyday i love

6
00:00:23,910 --> 00:00:28,470
it i encourage everybody to pick it up
at least try some our analysis look at

7
00:00:28,470 --> 00:00:32,399
some code you might be able to figure
some pretty cool things out so if not

8
00:00:32,399 --> 00:00:34,920
telling you stuff reverse-engineering
what I mean

9
00:00:34,920 --> 00:00:38,070
well throughout my career one of the
things that I've noticed

10
00:00:38,070 --> 00:00:41,790
well first I been a lot of really good
teams and teams have done a lot of

11
00:00:41,790 --> 00:00:45,149
threat Intel and reverse engineering
malware analysis spent a common theme

12
00:00:45,149 --> 00:00:48,660
and I've been a lot of thread and tell
myself but one of the things I've

13
00:00:48,660 --> 00:00:52,379
noticed whenever a signature hits and we
get a new sample whether it's plug X

14
00:00:52,379 --> 00:00:56,968
handset or could be Zeus whatever the
same people are analyzing this malware

15
00:00:56,969 --> 00:01:01,350
repeatedly and we're looking at the same
samples every day you might have some

16
00:01:01,350 --> 00:01:05,400
guy who's looking at plug X or ladies
looking at hand store netzer one job and

17
00:01:05,400 --> 00:01:10,170
I want to reverse engineer these samples
constantly it's a little redundant and

18
00:01:10,170 --> 00:01:14,010
it's repetitive and it's a waste of time
so that's what I that's basically the

19
00:01:14,010 --> 00:01:18,360
talks about an idea world of a signature
hits you should have some type of

20
00:01:18,360 --> 00:01:24,930
automated technique to take that file a
piece of our and send it through some

21
00:01:24,930 --> 00:01:28,500
kind of automated system and determine
what the IOC's with the areas of

22
00:01:28,500 --> 00:01:31,920
interest from that sample art for you
and have those push back to you

23
00:01:31,920 --> 00:01:36,360
immediately without happened actually
reverse engineer every single sample the

24
00:01:36,360 --> 00:01:39,630
goal is really to eliminate redundancy
we shouldn't be looking at all these

25
00:01:39,630 --> 00:01:45,089
things every time they pop up and you
are in virustotal with a new hit so

26
00:01:45,090 --> 00:01:49,110
really we don't help ourselves help
ourselves so the more you can automate

27
00:01:49,110 --> 00:01:52,679
the less work you have to do in the more
time you have to analyze really cool

28
00:01:52,680 --> 00:01:54,880
shape

29
00:01:54,880 --> 00:01:59,289
so who am i I'm our reverse engineer of
the threat Intel in our re for about 10

30
00:01:59,289 --> 00:02:03,460
years now i spent a lot of time in the
government past couple years have been

31
00:02:03,460 --> 00:02:09,609
private sector a lot of fun currently
with palo alto networks networks and who

32
00:02:09,610 --> 00:02:13,330
is this talk for pretty much anybody
deals with malware you don't have to be

33
00:02:13,330 --> 00:02:18,160
a reverse engineer thread endless ir
sock analysts anybody really who's

34
00:02:18,160 --> 00:02:20,049
interested in our looks this stuff

35
00:02:20,050 --> 00:02:24,940
this could pertain to you you don't have
to be reverse engineered to use

36
00:02:24,940 --> 00:02:28,239
automated malware analysis techniques
you don't have to be reverse engineered

37
00:02:28,239 --> 00:02:31,900
to to doom our analysis and look at
things you don't always have to get down

38
00:02:31,900 --> 00:02:37,900
to the lowest level of things you should
if you are a member of a sock Timor and

39
00:02:37,900 --> 00:02:41,200
I our team our thread analyst and you
you don't have time to do the reverse

40
00:02:41,200 --> 00:02:45,250
engineering this malware you need to
have your reverse engineers automate

41
00:02:45,250 --> 00:02:49,090
things for you so you can get the
information you need without having to

42
00:02:49,090 --> 00:02:53,680
go back to them every single time you
get another plug example if the sample

43
00:02:53,680 --> 00:02:56,950
is reverse one time please don't
continue to reverse it

44
00:02:56,950 --> 00:03:01,480
it's redundant there's code reuse for a
reason a lot of malware authors will

45
00:03:01,480 --> 00:03:04,929
either reuse the code today right we're
going to use builders we see that all

46
00:03:04,930 --> 00:03:09,280
the time so general overview

47
00:03:10,480 --> 00:03:14,709
like I said stop reversing everything in
sight we really don't need to do it I'm

48
00:03:14,709 --> 00:03:18,880
gonna go over the re current and past
re-landscape a little bit of what we

49
00:03:18,880 --> 00:03:22,510
used to do what we're starting to do and
why we're doing that a couple of

50
00:03:22,510 --> 00:03:25,870
automation techniques that I like to use
i'll do some demos and give you a couple

51
00:03:25,870 --> 00:03:34,690
of ideas maybe you can use and general
conclusion so to start i want to show

52
00:03:34,690 --> 00:03:38,950
basically on the internet we can find
reports on almost any kind of our

53
00:03:38,950 --> 00:03:43,060
looking for a couple of friends of mine
have a repository and get up called apt

54
00:03:43,060 --> 00:03:47,170
notes and as you can see i don't know
how big that is but there's over 30 and

55
00:03:47,170 --> 00:03:51,608
50 different reports just in this
repository is our apt reports very

56
00:03:51,609 --> 00:03:56,170
detailed technical analysis of apt
malware and its really a time-saving

57
00:03:56,170 --> 00:03:58,780
effort to read some of these because one
of the things you can do is create

58
00:03:58,780 --> 00:04:02,079
signatures you can read about new
techniques or techniques that have been

59
00:04:02,079 --> 00:04:05,470
used in the past and these are things
that you don't have to try to figure out

60
00:04:05,470 --> 00:04:06,109
on your own

61
00:04:06,110 --> 00:04:09,650
if somebody else is already written
report on it you don't have to at least

62
00:04:09,650 --> 00:04:13,880
you shouldn't be doing it they're
valuable resource and they can really

63
00:04:13,880 --> 00:04:21,079
definitely they can help save in writing
signatures so I want to give a general

64
00:04:21,079 --> 00:04:25,220
overview of my approach to malware
reverse-engineering essentially what i

65
00:04:25,220 --> 00:04:28,940
like to do is I would i call surface
analysis whenever I get a file i want to

66
00:04:28,940 --> 00:04:31,790
look at the strings of it essentially
because I can figure out what this

67
00:04:31,790 --> 00:04:34,310
malware is before actually have to dig
into it

68
00:04:34,310 --> 00:04:37,970
that's great and a lot of things like
Zeus or plug acts or other things like

69
00:04:37,970 --> 00:04:41,540
that have certain strings that are going
to be popping up every time you look at

70
00:04:41,540 --> 00:04:47,210
you don't have to be obfuscated
everything to see it i love you should

71
00:04:47,210 --> 00:04:51,049
always be looking at the hashes google
the hash if you google a hash and you

72
00:04:51,050 --> 00:04:56,120
find something virustotal on total hash
or malware and it comes up and says 40

73
00:04:56,120 --> 00:04:59,810
vendors think it's this it's probably
that I mean 40 vendors didn't screw up

74
00:04:59,810 --> 00:05:05,510
and if they did maybe I don't even know
that's usually virustotal results or

75
00:05:05,510 --> 00:05:08,570
multi scanners are pretty accurate at
least with some of the common things

76
00:05:08,570 --> 00:05:16,880
Zeus zbot it's right can I run the
malware in my sandbox i use the sandbox

77
00:05:16,880 --> 00:05:23,360
and the sandbox i use is pretty hardened
so usually things are going to execute

78
00:05:23,360 --> 00:05:27,410
it is in boxes all the time essentially
because if i can get good results from

79
00:05:27,410 --> 00:05:30,470
it and something tell me it's an hour
and it can show me a list of the API

80
00:05:30,470 --> 00:05:33,770
calls then I don't have to go and
actually execute this or you'll get

81
00:05:33,770 --> 00:05:38,570
myself and it saves a lot of time to can
automate the analysis well if I've

82
00:05:38,570 --> 00:05:42,800
already seen this malware if it's plug X
I've got so many scripts and education

83
00:05:42,800 --> 00:05:45,590
tools that I could use reply exit I
never going to analyze another type of

84
00:05:45,590 --> 00:05:46,369
myself

85
00:05:46,370 --> 00:05:50,330
it's . completely pointless but that's
not the case and actually up to

86
00:05:50,330 --> 00:05:55,669
reverse-engineer then i'm going to start
the process if I really need to dig down

87
00:05:55,669 --> 00:05:58,490
deep into it then it's probably
something interesting and actually worth

88
00:05:58,490 --> 00:06:01,689
looking at

89
00:06:01,689 --> 00:06:06,159
so for the past five years companies
have been very scared of apt they should

90
00:06:06,159 --> 00:06:11,860
be I guess we hear a lot of sayings like
if you don't if it's not if you get

91
00:06:11,860 --> 00:06:15,999
breach but it's when you get reached and
apt are already in your network things

92
00:06:15,999 --> 00:06:19,059
like that we're all the time and it kind
of scares people

93
00:06:19,059 --> 00:06:22,089
I considered a scare tactic a lot of
times it's a really good selling point

94
00:06:22,089 --> 00:06:23,259
to sell products

95
00:06:23,259 --> 00:06:26,949
hey we know you're in fact that you need
to let us come in with your stuff it's

96
00:06:26,949 --> 00:06:32,979
not wrong you probably are but you
probably got four probably be willing to

97
00:06:32,979 --> 00:06:37,058
guess a high percentage of our network
is an apt it's probably add where it's

98
00:06:37,059 --> 00:06:40,449
some kind of great where that somebody
is going to get again if they double

99
00:06:40,449 --> 00:06:43,419
click on whatever you look at porn or
whatever they're doing that they

100
00:06:43,419 --> 00:06:48,039
shouldn't be doing on your network and
that's kind of the way things have been

101
00:06:48,039 --> 00:06:53,079
for the past five years and it even
longer actually a lot of times since i'm

102
00:06:53,079 --> 00:06:56,259
from the government i don't really get
to see what happened in the early two

103
00:06:56,259 --> 00:06:59,199
thousands in the late nineties what's
the time the things i looked at were

104
00:06:59,199 --> 00:07:08,409
concealed and undercover but so today
the future were not as scared as apt and

105
00:07:08,409 --> 00:07:11,619
I think one of the reasons for that is
we've got things like ransomware and we

106
00:07:11,619 --> 00:07:15,189
start by saying ransomware is a complete
bitch you haven't dealt with it and you

107
00:07:15,189 --> 00:07:20,529
have to your you're probably frustrated
the code isn't sophisticated it's

108
00:07:20,529 --> 00:07:23,829
usually not that hard to figure out what
ransom was going to do and most

109
00:07:23,829 --> 00:07:28,479
ransomware families to very similar
things the problem is they're people

110
00:07:28,479 --> 00:07:31,389
people are writing this stuff we're
getting better at it and the better they

111
00:07:31,389 --> 00:07:36,879
get at it the more screwed we are one of
the biggest problems with ransomware as

112
00:07:36,879 --> 00:07:39,729
we've got people that are making backups
of their stuff and they've got network

113
00:07:39,729 --> 00:07:42,969
shares connected and what happens if you
hit by ransomware you've got a network

114
00:07:42,969 --> 00:07:45,039
share well everybody screwed

115
00:07:45,039 --> 00:07:48,849
especially if you're a developer you've
got shared code and you go down the

116
00:07:48,849 --> 00:07:50,469
rabbit hole you're a lot of trouble

117
00:07:50,469 --> 00:07:54,248
so what about apt now apt still here

118
00:07:54,249 --> 00:07:57,459
it's cyber espionage there's always
going to be espionage in the world

119
00:07:57,459 --> 00:08:01,149
that's way government works that's what
humans work we must buy each other but

120
00:08:01,149 --> 00:08:02,860
figure out everything else is doing

121
00:08:02,860 --> 00:08:08,289
it's not going to change certain things
have changed though a lot of new TPS and

122
00:08:08,289 --> 00:08:12,248
there are a lot more custom second and
third state third stage payload

123
00:08:12,249 --> 00:08:16,809
we don't see as many custom droppers our
first stages anymore just because i

124
00:08:16,809 --> 00:08:21,699
think that the the enemy the whoever
that might be he's got smarter and they

125
00:08:21,699 --> 00:08:25,689
realize why would be something custom on
machine it's probably going to be a

126
00:08:25,689 --> 00:08:28,509
sandbox or whatever half the time anyway

127
00:08:28,509 --> 00:08:32,800
one of the things we do see is you got a
lot of apt members moving around and

128
00:08:32,799 --> 00:08:36,399
what I mean by that is they're just like
us no matter who you talking about i

129
00:08:36,399 --> 00:08:39,549
don't care what country they're from who
they are it's an adversary they probably

130
00:08:39,549 --> 00:08:40,628
switch jobs

131
00:08:40,629 --> 00:08:43,750
I mean how many of you probably switch
jobs in the last five years

132
00:08:43,750 --> 00:08:47,290
it happens all the time so they do the
same thing if you've got somebody from

133
00:08:47,290 --> 00:08:51,939
apt 1 $POSTALCODE apt to apt 3 all
switching jobs they probably gonna work

134
00:08:51,939 --> 00:08:55,240
with each other someday you're gonna
have a mixture of TPS you're not going

135
00:08:55,240 --> 00:09:00,939
to the hell it is I mean and then you're
going to name label at apt 41 42 43 and

136
00:09:00,939 --> 00:09:04,480
it's probably just the same old people
you've been tracking for 10 years and

137
00:09:04,480 --> 00:09:05,740
you know it

138
00:09:05,740 --> 00:09:12,250
so what what's actually changed in our
landscape

139
00:09:12,250 --> 00:09:15,459
I think we've got a couple of big really
good things that happen

140
00:09:15,459 --> 00:09:20,018
we've got mailing list some of them like
CWR exchange a lot of you probably on

141
00:09:20,019 --> 00:09:23,949
him a lot of meetups conferences just
like this I mean everyone's great way to

142
00:09:23,949 --> 00:09:29,740
network and meet people to share
information there's a smaller

143
00:09:29,740 --> 00:09:33,040
collaboration efforts and there's
something actually called the cyber

144
00:09:33,040 --> 00:09:35,469
threat Alliance if you're not familiar
with it you should google it

145
00:09:35,470 --> 00:09:41,379
join it get your company to join it a
lot of enterprises a lot of enterprises

146
00:09:41,379 --> 00:09:44,019
are realizing that it's not so much
who's in your network anymore it's

147
00:09:44,019 --> 00:09:47,439
someone is in your network and get them
out or prevented from getting in

148
00:09:48,009 --> 00:09:51,970
it's not always about we've got an apt 3
actor we need to call the FBI are called

149
00:09:51,970 --> 00:09:55,569
whoever committed and take a look at all
our logs know we've got something our

150
00:09:55,569 --> 00:09:58,300
network get the hell out make sure it
doesn't come back in and it doesn't

151
00:09:58,300 --> 00:10:01,029
matter if it's apt ransom or what it is
and I think a lot more people are

152
00:10:01,029 --> 00:10:05,259
getting smarter about that and a lot
more systems and people who are actually

153
00:10:05,259 --> 00:10:09,370
making decisions realize that it's more
important to keep everything out to keep

154
00:10:09,370 --> 00:10:12,550
our data safe that is figure out who was
actually in the first place

155
00:10:12,550 --> 00:10:16,660
don't give me rub pardon me don't get me
wrong it's important to figure out if

156
00:10:16,660 --> 00:10:20,589
you're being targeted because being
targeted a whole nother story and if you

157
00:10:20,589 --> 00:10:23,520
are targeted you want to do that was

158
00:10:23,520 --> 00:10:29,460
another big change certain things
actually work in the community we're

159
00:10:29,460 --> 00:10:32,280
learning what works and what doesn't
work there's a lot of products out there

160
00:10:32,280 --> 00:10:34,530
that smoke and mirrors

161
00:10:34,530 --> 00:10:41,310
it happens everywhere i mean that's
that's part of the game so what I really

162
00:10:41,310 --> 00:10:45,300
want to talk about is automating I like
to automate a lot of them our analysis i

163
00:10:45,300 --> 00:10:49,290
do if it's something that I've done
before a couple of caveats not every man

164
00:10:49,290 --> 00:10:53,520
our sample can be automated a lot of
things are going to look at you say oh I

165
00:10:53,520 --> 00:10:57,240
really should write a script for this
your mind well there is the custom

166
00:10:57,240 --> 00:10:59,790
payload probably never gonna see it
again it actually has a couple of things

167
00:10:59,790 --> 00:11:03,449
in it that i know i'm not gonna be able
to script out for whatever reason and

168
00:11:03,450 --> 00:11:08,010
that happens you gotta remember that
people get paid a lot of money to create

169
00:11:08,010 --> 00:11:12,000
malware and create code that you can
analyze or that it's going to be

170
00:11:12,000 --> 00:11:15,090
difficult to reverse engineer but then
you got people like my boss here who

171
00:11:15,090 --> 00:11:18,900
actually does stuff like that for fun
and then puts it out and get help people

172
00:11:18,900 --> 00:11:20,850
get either way

173
00:11:20,850 --> 00:11:26,250
yeah so if you're going to repeatedly do
something you should try to write a

174
00:11:26,250 --> 00:11:28,770
script for if you're going to do this if
you have a piece of matter that you've

175
00:11:28,770 --> 00:11:33,300
looked at numerous times and you want to
take notes on it it's always good to

176
00:11:33,300 --> 00:11:36,569
make sure that you know certain things
are going to happen with a certain our

177
00:11:36,570 --> 00:11:40,320
family but whenever you automate
something make sure that you verify the

178
00:11:40,320 --> 00:11:45,030
results i've also worked places where
people like to automate things and never

179
00:11:45,030 --> 00:11:49,260
check what actually gets pushed into the
sim and you start getting urls and

180
00:11:49,260 --> 00:11:51,780
domains pushed in there that are going
to be a block list and all of a sudden

181
00:11:51,780 --> 00:11:55,980
you get a call because time . windows
com won't resolve somebody blocked it

182
00:11:55,980 --> 00:11:57,630
happens all the time

183
00:11:57,630 --> 00:12:01,980
also you should use other people's tools
somebody's going to create something to

184
00:12:01,980 --> 00:12:07,110
help you help other people make sure
utilizing those those resources and if

185
00:12:07,110 --> 00:12:10,380
you right tools make sure you share if
you can either some people to work in

186
00:12:10,380 --> 00:12:13,350
closed spaces that if they write
something that has to stay there that's

187
00:12:13,350 --> 00:12:15,960
totally understandable

188
00:12:15,960 --> 00:12:23,130
so how do i do it i like to sandboxes
like I said it's always a first resort

189
00:12:23,130 --> 00:12:27,000
for maybe they're not cheating as much
as anyone might think oh I don't get to

190
00:12:27,000 --> 00:12:29,850
reverse engineer the malware not
throwing it in ida doesn't matter you

191
00:12:29,850 --> 00:12:32,880
don't have to do that you have to figure
out what it's doing and how to fix

192
00:12:32,880 --> 00:12:38,790
whatever the problem is that somebody
can be with public resources like I said

193
00:12:38,790 --> 00:12:42,390
there's a lot of really good ones out
there you should always try to utilize

194
00:12:42,390 --> 00:12:52,170
them scripting i would probably say most
malware analysts out there stock analyst

195
00:12:52,170 --> 00:12:55,650
I our folks we've done a lot of
scripting some people haven't you might

196
00:12:55,650 --> 00:12:58,800
not have needed to but you probably
should get into it

197
00:12:58,800 --> 00:13:03,870
DVI dynamic binary instrumentation
sounds a little scary and a lot of

198
00:13:03,870 --> 00:13:06,750
people think it's black magic but it
really isn't and I'm actually get into

199
00:13:06,750 --> 00:13:10,890
it a little bit and show a demonstration
on how you can use it how anybody can

200
00:13:10,890 --> 00:13:15,930
use it and some automating the debugging
tasks i have been bugging scripts to do

201
00:13:15,930 --> 00:13:20,310
a lot of things for me because I spent a
lot of time into debugger enjoy it but i

202
00:13:20,310 --> 00:13:25,140
also don't enjoy setting a break . every
time I need to stop on virtual Alec I

203
00:13:25,140 --> 00:13:28,199
like to have shit like that done for me
and you should too

204
00:13:28,200 --> 00:13:38,160
so again with the same boxes me in my
job so what I do on a daily basis is I

205
00:13:38,160 --> 00:13:41,699
actually look at code that will not
execute in sandbox and what I like to do

206
00:13:41,700 --> 00:13:44,280
is figure out why it wouldn't do that

207
00:13:44,280 --> 00:13:48,300
there's a lot of anti analysis tricks a
lot of anti sandbox tricks and things

208
00:13:48,300 --> 00:13:52,620
like that that people build into our
nowadays that are trying to specifically

209
00:13:52,620 --> 00:13:57,240
get around specific map our sandboxes
whether it's koo koo virustotal

210
00:13:57,240 --> 00:14:00,840
behavioral analysis or malware whatever
it might be

211
00:14:04,110 --> 00:14:08,250
sandbox hardening is probably one of the
most important things you can do if

212
00:14:08,250 --> 00:14:11,220
you're using a sandbox you need to make
sure that you're looking for things that

213
00:14:11,220 --> 00:14:15,990
can make your sandbox look more
realistic and make it look more like and

214
00:14:15,990 --> 00:14:19,890
more like a real system more like
something that you would see in an

215
00:14:19,890 --> 00:14:23,250
enterprise or like someone who might
actually be interested in your network

216
00:14:23,250 --> 00:14:28,320
on your enterprise what they would be
looking for but how do you do it when

217
00:14:28,320 --> 00:14:32,100
you're trying to figure out exactly why
something won't execute a sandbox

218
00:14:32,100 --> 00:14:35,790
there's couple of key things you need to
look for what code actually executed

219
00:14:35,790 --> 00:14:37,380
while i was in the sandbox

220
00:14:37,380 --> 00:14:40,590
how do you do that well over the API
calls that were made so you can look

221
00:14:40,590 --> 00:14:45,150
whatever API call was made and whether
that's a coup report that you're looking

222
00:14:45,150 --> 00:14:47,850
at or whether you have some other kind
of sandbox that you're going through

223
00:14:47,850 --> 00:14:51,360
figure out what was actually called and
look at the sample and figure out where

224
00:14:51,360 --> 00:14:55,530
in that sample those calls were you can
pretty easily match those up and trace

225
00:14:55,530 --> 00:15:00,270
back when you were looking at where the
code stop executing again look at your

226
00:15:00,270 --> 00:15:03,900
logs figure out exactly where the code
stopped what was the last thing you got

227
00:15:03,900 --> 00:15:08,220
executed and you should be able to go
through and kinda match that up again

228
00:15:08,220 --> 00:15:14,340
with the with an hour and also are there
any basic blocks it didn't execute that

229
00:15:14,340 --> 00:15:16,830
I actually want to see executed and if
that's the case you need to figure out

230
00:15:16,830 --> 00:15:20,610
how to get there we need to figure out
how to make your sandbox get there and

231
00:15:20,610 --> 00:15:23,310
if you think you figured it out you need
to patch the malware or write a

232
00:15:23,310 --> 00:15:30,239
proof-of-concept to test it and make
sure that works so again sandboxes most

233
00:15:30,240 --> 00:15:35,370
of my free versions most of the ones
that that are out there you can either

234
00:15:35,370 --> 00:15:38,430
get a demo from a company or you can you
find something I get out there a lot of

235
00:15:38,430 --> 00:15:42,180
different ones most people use cuckoo
cuckoo is probably the easiest to

236
00:15:42,180 --> 00:15:45,989
install set up locally and there are a
lot of hardened version coo out there

237
00:15:45,990 --> 00:15:51,000
you can actually do a google search I've
got a couple of pictures up here on the

238
00:15:51,000 --> 00:15:55,860
slide that show the top 6 results if i
search for harden sandbox are different

239
00:15:55,860 --> 00:15:58,800
ways to harden your cool box and I've
actually gone through a couple of these

240
00:15:58,800 --> 00:16:01,740
sites and most of them are all different
techniques and that's pretty interesting

241
00:16:01,740 --> 00:16:05,640
because all these people have different
techniques you probably could implement

242
00:16:05,640 --> 00:16:08,850
those into your sandbox and have a
pretty badass free sandbox

243
00:16:08,850 --> 00:16:16,410
so again like I said public API the of
these sandboxes it's pretty convenient

244
00:16:16,410 --> 00:16:20,819
because you can actually write a script
to query the sandboxes or to query these

245
00:16:20,819 --> 00:16:24,719
systems whenever you actually want to
submit samples and pull back to results

246
00:16:24,720 --> 00:16:27,750
so one example of this

247
00:16:27,750 --> 00:16:33,660
I've actually taken about i think it was
about 35 samples match some core plug

248
00:16:33,660 --> 00:16:36,899
signatures that I had if you don't know
cord plug it's basically plug X

249
00:16:36,899 --> 00:16:41,310
hopefully you can see this not apologize
and all I need to submit them to

250
00:16:41,310 --> 00:16:47,130
virustotal through the API with a script
and I pull back some results and using

251
00:16:47,130 --> 00:16:50,759
viruses API was able to figure out
pretty quickly which ones here that I

252
00:16:50,759 --> 00:16:54,360
would actually want to analyze if you
couldn't guess that the ones i'm going

253
00:16:54,360 --> 00:16:57,149
to analyze with the ones that don't have
a signature because anything is plug X

254
00:16:57,149 --> 00:17:01,350
like I said never going to analyze that
again i already know that that's it we

255
00:17:01,350 --> 00:17:05,099
should be able to figure out in some
kind of automated fashion with the IOC's

256
00:17:05,099 --> 00:17:08,760
from those are so this is one of the
example how you can take a larger

257
00:17:08,760 --> 00:17:14,250
deposit or e you can submit it through
the public API or any kind of or close

258
00:17:14,250 --> 00:17:18,419
API whatever you're using and pull back
some results that will give you some

259
00:17:18,419 --> 00:17:20,730
pretty good ideas of what you're looking
at

260
00:17:20,730 --> 00:17:27,030
so like I said earlier public resources
we should definitely use these so what

261
00:17:27,030 --> 00:17:31,799
happens if I'm our author's writing a
piece of our and they explicitly use an

262
00:17:31,799 --> 00:17:33,929
array of bytes to make their strings

263
00:17:33,929 --> 00:17:38,280
well basically like this so one of the
things you're going to see you're going

264
00:17:38,280 --> 00:17:43,049
to see the strings being built on a
stack of the series of move instructions

265
00:17:43,049 --> 00:17:46,500
to complete pain in the ass you hear an
idea you're going to click em on every

266
00:17:46,500 --> 00:17:49,380
one of these bites to change it over to
ask the character and try to read

267
00:17:49,380 --> 00:17:54,330
through and figure out exactly what this
is going to be so when I said public

268
00:17:54,330 --> 00:17:57,990
resources one of the ones I used for
this and moans most people use is a

269
00:17:57,990 --> 00:18:02,970
flare tool it's a public python tool
that's available it's called stack

270
00:18:02,970 --> 00:18:06,270
strings and will actually do is scan
through your IDP it will skim through

271
00:18:06,270 --> 00:18:10,889
the the current executable or whatever
binary you're looking at and look for

272
00:18:10,890 --> 00:18:16,919
these stacks strings being built and it
will create a little basically a comment

273
00:18:16,919 --> 00:18:21,510
in idle for you and your IDE of exactly
what API collar or

274
00:18:21,510 --> 00:18:24,330
word was being built but sometimes it
might not be a guy called sometimes it

275
00:18:24,330 --> 00:18:28,020
could be anything and it's just an
example of how using a public tool can

276
00:18:28,020 --> 00:18:32,010
help you save you time in the long
around and I I probably use this every

277
00:18:32,010 --> 00:18:32,910
time I see it

278
00:18:32,910 --> 00:18:36,120
sac strings being built because one of
the things are going to notice if an

279
00:18:36,120 --> 00:18:40,379
author actually uses once it's probably
gonna be under few hundred times that

280
00:18:40,380 --> 00:18:41,520
sucks

281
00:18:41,520 --> 00:18:48,090
thanks 14 by the way but that's too easy
Sam boxes and public tools it's easy i

282
00:18:48,090 --> 00:18:51,209
don't have a reverse engineer i'm going
to look at low level code on it

283
00:18:51,210 --> 00:18:54,150
code all day I don't need to use other
people's stuff I don't need to use

284
00:18:54,150 --> 00:18:56,190
sandboxes that's bullshit

285
00:18:56,190 --> 00:18:59,520
if it works it's not stupid it's
something that you need to take

286
00:18:59,520 --> 00:19:03,360
advantage of you need to implement it
into your tools in your processes make

287
00:19:03,360 --> 00:19:05,280
sure that you're speeding things up

288
00:19:05,280 --> 00:19:09,060
that's work and making sure that you can
get the job done as quickly as possible

289
00:19:09,060 --> 00:19:12,780
so you can move on to the next job but
you also want to make sure you're

290
00:19:12,780 --> 00:19:15,780
obviously doing it in the correct way

291
00:19:16,410 --> 00:19:20,970
so if it works you're done don't
reinvent the wheel and when I was a kid

292
00:19:20,970 --> 00:19:27,090
we had pulls like I grew up in the
country scripting for re-experience

293
00:19:27,090 --> 00:19:30,720
stories probably think well everybody
should script right nobody knows how to

294
00:19:30,720 --> 00:19:32,490
script that's not the case

295
00:19:32,490 --> 00:19:35,820
a lot of people to work in forensics or
incident response or threaten tell folks

296
00:19:35,820 --> 00:19:40,350
sometimes even some younger malware
analysis might not do a lot of scripting

297
00:19:40,350 --> 00:19:41,639
and that's fine

298
00:19:41,640 --> 00:19:44,790
the thing with scripting is anybody can
do it and everybody should at least try

299
00:19:45,420 --> 00:19:49,800
it's going to help you in the long run
if you don't know how script google it

300
00:19:49,800 --> 00:19:54,120
google is awesome because Google can
give you results from stackoverflow

301
00:19:54,120 --> 00:19:58,229
stack overflows pretty much how I
learned a script and I know a lot of

302
00:19:58,230 --> 00:20:01,590
people have done the same thing you
don't need a computer science degree

303
00:20:01,590 --> 00:20:05,580
script and they can help you save time
and everything not just reverse

304
00:20:05,580 --> 00:20:12,840
engineering so what should I write a
script for the obvious things you've got

305
00:20:12,840 --> 00:20:17,070
string the obvious keishon file parsing
IT rebuilding I mean it's kind of stuff

306
00:20:17,070 --> 00:20:18,750
i mean everybody does this

307
00:20:18,750 --> 00:20:22,590
it's it's almost a necessity but
something out so obvious things are file

308
00:20:22,590 --> 00:20:25,949
patching and bulk data analysis and the
application

309
00:20:27,090 --> 00:20:32,010
so I've got a demo that's gonna explain
what's going to show a little bit of the

310
00:20:32,010 --> 00:20:37,110
bulk data analysis and the demo that i'm
going to them show you is actually from

311
00:20:37,110 --> 00:20:41,669
a campaign from 2016 than anything folks
that are working thread into our

312
00:20:41,670 --> 00:20:45,840
analysis might actually remember this
one a group unit 42 actually write a

313
00:20:45,840 --> 00:20:51,600
blog on it it was a net travel an hour
that was targeting a few different

314
00:20:51,600 --> 00:20:55,500
people i'm not going to get into that
and essentially what it would do is it

315
00:20:55,500 --> 00:21:00,330
would write a malicious so i would write
an obfuscated configuration file to disk

316
00:21:00,330 --> 00:21:04,350
it was supposed to believe it but it
never actually did and in this config

317
00:21:04,350 --> 00:21:10,949
file one of the things that you'd see it
our different fields you 0p k 00 p and a

318
00:21:10,950 --> 00:21:16,380
few others and one of the fields was
actually an obvious get c2 so we've got

319
00:21:16,380 --> 00:21:21,000
to see to that we know that's being
written to disk and the c2 is actually

320
00:21:21,000 --> 00:21:24,060
gonna be called out to so one of the
things that at the time when i was

321
00:21:24,060 --> 00:21:27,540
working thread analyst would ask me is
how can i get this seat without having

322
00:21:27,540 --> 00:21:30,810
to give you every single one of these
files that i'm looking at because we

323
00:21:30,810 --> 00:21:33,690
actually find a lot of new ones and we
can paint the ass

324
00:21:33,690 --> 00:21:37,920
the particular variant would drop these
files that would sometimes with

325
00:21:37,920 --> 00:21:44,520
attachment in an hour or in now email
messages and you would seem as a self

326
00:21:44,520 --> 00:21:49,530
extracting RAR basically would have a
config file you'd have dll and a

327
00:21:49,530 --> 00:21:53,070
legitimate executable so that sounds
familiar to anybody that's like a side

328
00:21:53,070 --> 00:21:59,580
loading now where we see that all the
time so as you can see one of the first

329
00:21:59,580 --> 00:22:03,870
things i wanted to do is figure out
where that obvious cated c2 was located

330
00:22:03,870 --> 00:22:12,540
and in this image right here you can see
the it's epic SI RFS lapi dll this was

331
00:22:12,540 --> 00:22:16,740
the dll that was actually drop the
distal it was being side loaded into

332
00:22:16,740 --> 00:22:21,390
legitimate executable and down at the
bottom there's the config . that was the

333
00:22:21,390 --> 00:22:25,290
files ready disc so i know that the
information I'm looking for in the

334
00:22:25,290 --> 00:22:31,500
config . that was the user 0 p and you
can see the bites after at 727 f80 etc

335
00:22:31,500 --> 00:22:36,600
those are actually the bites of the
oxygenated URL and I did a couple of

336
00:22:36,600 --> 00:22:39,629
searches just for the hell of it in the
dl at

337
00:22:39,630 --> 00:22:44,220
on the exact same string it's actually
located there it it's pretty easy to

338
00:22:44,220 --> 00:22:48,720
spot actually show you when i bring the
demo up so I knew immediately that every

339
00:22:48,720 --> 00:22:51,900
time that I saw this I wanted to check
the dll and see if i could find this

340
00:22:51,900 --> 00:22:57,990
string just so happen that I could just
real quickly i had i was looking for a

341
00:22:57,990 --> 00:23:02,370
bunch of the sample some really crappy
our rule but it worked and the point out

342
00:23:02,370 --> 00:23:10,169
the string to essentially is just the
encoded HTTP colon backslash w . because

343
00:23:10,170 --> 00:23:13,620
that is the beginning of the URL that
they used every single time so if you

344
00:23:13,620 --> 00:23:18,209
wrote yard will look for that you'd find
every one of these samples the dll

345
00:23:18,210 --> 00:23:26,940
shanghai dll is just the internal name
these actors used for the dl k the demo

346
00:23:26,940 --> 00:23:35,520
me to end this real quick and okay
hopefully you can all see this

347
00:23:35,520 --> 00:23:46,020
resolutions awful so I've got two
folders up here

348
00:23:48,660 --> 00:23:55,260
yeah so in the top is basically a the
contents of one of the self extracting

349
00:23:55,260 --> 00:23:59,250
roars and the bottom of the same thing
and they both have they can figure out

350
00:23:59,250 --> 00:24:04,050
that file that was written to disk and
what I want to show first is that in the

351
00:24:04,050 --> 00:24:08,580
dl like i said if i bring up an
ex-senator yes i use explorer i love it

352
00:24:08,580 --> 00:24:13,470
works really well you can actually see
in the bottom of the dll that is the

353
00:24:13,470 --> 00:24:17,220
beginning of the obfuscates d2 and it's
in every single level so you don't have

354
00:24:17,220 --> 00:24:20,910
to find all these files and other
components all you have to find a dll

355
00:24:20,910 --> 00:24:24,270
make it really easy to do this

356
00:24:24,780 --> 00:24:30,210
the temp . that is what was supposed to
be ready disc to actually delete the

357
00:24:30,210 --> 00:24:35,310
configuration file and this one actually
didn't drop on so they can figure out

358
00:24:35,310 --> 00:24:36,629
that file

359
00:24:36,630 --> 00:24:41,550
like I mentioned before it actually has
the user 0p field which is the same

360
00:24:41,550 --> 00:24:48,360
coatsy two and one of the other things i
wanted to show is the blog that was

361
00:24:48,360 --> 00:24:52,080
actually written and I don't really care
about the contents means it's really

362
00:24:52,080 --> 00:24:54,179
good and I learned that everybody read
it

363
00:24:54,180 --> 00:24:59,730
deonda but the thing is that somebody
writes a good blog they're gonna leave

364
00:24:59,730 --> 00:25:03,810
you some good information right here at
the bottom of the blog we've got the

365
00:25:03,810 --> 00:25:08,399
decoding algorithm the decryption
algorithm for the c2 so you don't even

366
00:25:08,400 --> 00:25:11,250
have to look at the code you can find
somebody else is working if you're

367
00:25:11,250 --> 00:25:14,610
trying to track these guys yourself you
can do it you can actually pull this

368
00:25:14,610 --> 00:25:19,860
algorithm you can write a tool it's
really easy the script that I wrote is

369
00:25:19,860 --> 00:25:23,820
not very big actually

370
00:25:24,420 --> 00:25:28,050
or is it oh here we go

371
00:25:28,920 --> 00:25:32,370
so this is the folder containing all the
files that actually had that I was

372
00:25:32,370 --> 00:25:39,149
working when i actually did this when I
was working threat Intel and my previous

373
00:25:39,150 --> 00:25:42,390
job and actually had to reverse the
samples these are the ones that were

374
00:25:42,390 --> 00:25:47,550
actually given to me that were found in
customer networks and these five are

375
00:25:47,550 --> 00:25:51,659
these these five or ones that actually
found on virustotal retro hot so it

376
00:25:51,660 --> 00:25:55,110
means in the last three months these
files recently uploaded a virus total

377
00:25:55,110 --> 00:25:59,669
not saying the new because they're not
but it's still kind of interesting that

378
00:25:59,670 --> 00:26:08,310
I got some results so my script if i run
it all i'm doing is searching through

379
00:26:08,310 --> 00:26:14,070
every one of the DLLs looking for that
encoded string and i'm going to print

380
00:26:14,070 --> 00:26:18,960
out the hash and i want to point out
that decoded URL some of these URLs

381
00:26:18,960 --> 00:26:23,280
might look familiar but what I really
want to show you is the fact that it's

382
00:26:23,280 --> 00:26:29,460
not difficult to do this simply
implemented that subtraction algorithm

383
00:26:29,460 --> 00:26:31,900
that was put into that blog

384
00:26:31,900 --> 00:26:36,970
I did I have a function here called find
that essentially searches through the

385
00:26:36,970 --> 00:26:40,630
group of files that i had it was going
to look for anything that had the

386
00:26:40,630 --> 00:26:45,520
beginning and the end of the encoded
algorithm for the encoded c2 i did a

387
00:26:45,520 --> 00:26:49,750
hashing of it and I printed them out
very simple but the thing is i can take

388
00:26:49,750 --> 00:26:52,690
this and I can give it to an analyst or
thread a thread analyze the stock

389
00:26:52,690 --> 00:26:56,170
analyst somebody who may not want to go
through reverse engineer the samples and

390
00:26:56,170 --> 00:27:00,070
they can look at it whenever they want
they can you take yarra hits any kind of

391
00:27:00,070 --> 00:27:04,210
signature hits they can run through here
pull the c2 and add this to whatever

392
00:27:04,210 --> 00:27:22,840
list or documentation that they might
need so it's that work ok cool said

393
00:27:22,840 --> 00:27:29,709
dynamic binary instrumentation so it is
a difficult subject I'm going to briefly

394
00:27:29,710 --> 00:27:35,830
discuss dynamic binary instrumentation
to get technical its application level

395
00:27:35,830 --> 00:27:39,939
modification of code in memory of
runtime that's a lot

396
00:27:39,940 --> 00:27:43,480
essentially what happens is you inject
instrument eight instrumentation code

397
00:27:43,480 --> 00:27:48,010
into a binary during execution again
that could be it could be a lot to soak

398
00:27:48,010 --> 00:27:48,490
in

399
00:27:48,490 --> 00:27:53,380
but really what you're doing is you're
watching every single thing that happens

400
00:27:53,380 --> 00:27:58,810
when that binary execute and you're able
to modify the execution because you have

401
00:27:58,810 --> 00:28:03,940
instruction level access so every
instruction is being executed you get

402
00:28:03,940 --> 00:28:08,200
the sea and you get the monitor and you
can set up any kind of callback

403
00:28:08,200 --> 00:28:11,620
functions or anything that you would
like before those instructions actually

404
00:28:11,620 --> 00:28:16,419
get executed so i use pin or a lot of
other good tools but i use pin because i

405
00:28:16,420 --> 00:28:20,920
can write a dll and c++ and it's to me
that's easier because i understand it

406
00:28:20,920 --> 00:28:23,140
not a good coder at all

407
00:28:23,140 --> 00:28:26,380
would you consider myself a coder but I
can do it there are many examples

408
00:28:26,380 --> 00:28:31,330
included in pin and that's mostly how
people get started because with the

409
00:28:31,330 --> 00:28:35,260
example code that you get a lot a lot of
times you'll be able to modify a couple

410
00:28:35,260 --> 00:28:40,180
of lines of code here and there and very
easily create a new pin tool that can be

411
00:28:40,180 --> 00:28:41,360
useful for you

412
00:28:41,360 --> 00:28:46,639
i highly recommend start starting to use
this by modifying some of the example

413
00:28:46,640 --> 00:28:52,070
code is one of the reasons i like pin
like I said lots of examples that works

414
00:28:52,070 --> 00:28:57,590
for me and it's been very efficient
especially with running a lot of

415
00:28:57,590 --> 00:29:02,928
executables so I'm gonna go through a
simple example of some of the things

416
00:29:02,929 --> 00:29:05,059
that I do with pen

417
00:29:05,059 --> 00:29:11,210
this one's very basic and all it's going
to do is hook a couple of API calls are

418
00:29:11,210 --> 00:29:14,210
actually one API call

419
00:29:21,200 --> 00:29:26,120
so while this loads up a little bit of
background in this particular demo i

420
00:29:26,120 --> 00:29:32,570
wrote two small applications foam our
you get column the only reason I did

421
00:29:32,570 --> 00:29:36,620
that is because i wanted something very
simple and very compact that I could use

422
00:29:36,620 --> 00:29:41,959
the PSC this particular API call and
this method that i'm actually going to

423
00:29:41,960 --> 00:29:46,880
show the reason that I came up with this
is because it's the same one being used

424
00:29:46,880 --> 00:29:49,820
in some handsome profiles so if you're
familiar with hamster

425
00:29:49,820 --> 00:29:54,439
it's a our family that is doing pretty
much the exact same thing but i didn't

426
00:29:54,440 --> 00:30:01,850
have enough of the files to have a
decent demo anyway so essentially what i

427
00:30:01,850 --> 00:30:04,580
did was write a pin tool that's going to
go through all these malware samples

428
00:30:04,580 --> 00:30:08,809
that i have here and it's going to hook
the API call or it's going to monitor

429
00:30:08,809 --> 00:30:13,340
the arguments i should say it's gonna
figure out when the API that i'm looking

430
00:30:13,340 --> 00:30:16,250
for is actually getting called and it's
going to pull the arguments back tell me

431
00:30:16,250 --> 00:30:20,419
what they were and in this case it's
going to be internet openurl a if you're

432
00:30:20,419 --> 00:30:23,929
familiar with that all the first
argument to get sent to it is a long

433
00:30:23,929 --> 00:30:29,450
pointer to a zero terminated string that
is the URL and that's what i want i

434
00:30:29,450 --> 00:30:32,120
really want that URL

435
00:30:32,120 --> 00:30:38,899
so for I click enter on this one of the
things that I've done is every time that

436
00:30:38,900 --> 00:30:44,060
one sample cuted it's going to write a
file to disk it's going to save that c2

437
00:30:44,060 --> 00:30:47,510
and it does that for every single one of
these at the end clean i have a cleaning

438
00:30:47,510 --> 00:30:50,629
it up but the reason I haven't saving
these two discs so you can see how long

439
00:30:50,630 --> 00:30:54,110
it actually takes to execute each file
so instead of having to do dynamic

440
00:30:54,110 --> 00:31:00,379
analysis and box or run each file and
then take another snap shop snapshot in

441
00:31:00,380 --> 00:31:04,340
your vm you can do something like this
and you can literally go through these

442
00:31:04,340 --> 00:31:11,240
matter seconds so you can see we're
going to wait a second here and let all

443
00:31:11,240 --> 00:31:14,930
these execute and we'll know when
they've executed because police text

444
00:31:14,930 --> 00:31:18,440
files are going to be created and then
they will get deleted and like I said

445
00:31:18,440 --> 00:31:22,430
you can see as their created that's how
quickly that I'm actually executing each

446
00:31:22,430 --> 00:31:37,760
of these samples and hopefully pulling
back some data see this we have notice a

447
00:31:37,760 --> 00:31:41,120
very basic vm i don't really have much
going on it

448
00:31:41,120 --> 00:31:47,159
this is

449
00:31:47,160 --> 00:31:51,420
to actually answer these are some files
that i made that act similar yeah these

450
00:31:51,420 --> 00:31:54,780
are just test files

451
00:31:54,780 --> 00:31:58,740
yes some of it yeah there are some
startup things that will go on in the

452
00:31:58,740 --> 00:32:03,630
answer to deal else that you actually
need to do some patching for so it was

453
00:32:03,630 --> 00:32:10,980
easier to write a couple of quick demo
samples that is true

454
00:32:11,520 --> 00:32:16,530
that's ok so this is the results let's
hope i get something here

455
00:32:17,160 --> 00:32:21,540
ok so again these are fake URLs these
are just things that i wrote into the

456
00:32:21,540 --> 00:32:28,230
samples as you can see I've got a sample
0 simple 12 etc in the hashes so i was

457
00:32:28,230 --> 00:32:33,750
able to pull the API arguments which are
good that was actually looking for but

458
00:32:33,750 --> 00:32:39,840
what's more important is how i did that
and essentially I'll get into the pin

459
00:32:39,840 --> 00:32:44,879
code here in a second but all I wrote
was a simple script with python

460
00:32:44,880 --> 00:32:48,240
subprocess that's going to execute pin
for me every single time when it

461
00:32:48,240 --> 00:32:52,470
iterates through a list of files or
folder and you can do that with any

462
00:32:52,470 --> 00:32:57,360
executable doesn't have to be pinned it
can be any basically anything you want

463
00:32:57,360 --> 00:33:19,409
to run off I'll so what did i do with
pin to start at two unique unique groups

464
00:33:19,410 --> 00:33:23,220
in our like I said just faking our but
in a sense this could be used on

465
00:33:23,220 --> 00:33:27,900
anything they both you use Internet
openurl four comes and that's what I was

466
00:33:27,900 --> 00:33:32,970
trying to pull arguments from and the
pen tool itself like almost all pin

467
00:33:32,970 --> 00:33:36,750
tools you'll create a callback function
and what that means it's going to find

468
00:33:36,750 --> 00:33:40,920
all the call waltz it's going to first
it's going to look for the calls for

469
00:33:40,920 --> 00:33:44,610
this or any instruction that you're
actually writing the callback function

470
00:33:44,610 --> 00:33:49,530
for so for me I had to find all the
calls to this API and I wanted to return

471
00:33:49,530 --> 00:33:53,879
the arguments and once i parse the
argument the argument that i was looking

472
00:33:53,880 --> 00:33:56,150
for is actually the URL which was the
first ones that

473
00:33:56,150 --> 00:33:59,900
it's pretty easy and this is a very
basic tool but it serves a purpose its

474
00:33:59,900 --> 00:34:04,130
purpose because i'm able to get IOC's
from different our samples and I don't

475
00:34:04,130 --> 00:34:07,520
actually have to execute them all or if
i wanted to i could actually push them

476
00:34:07,520 --> 00:34:14,360
to some kind of automated system and let
them execute this themselves so the pin

477
00:34:14,360 --> 00:34:19,580
code this is what some of the most
important functions in a pin to look

478
00:34:19,580 --> 00:34:23,509
like there's a lot of included code and
a pen tool but most of it you're not

479
00:34:23,510 --> 00:34:27,890
going to modify i basically added two
things the first thing was a top

480
00:34:27,889 --> 00:34:31,520
function the top function basically it's
just going to find all the calls to the

481
00:34:31,520 --> 00:34:35,870
internet openurl a you can see that an
energy that you see the basically says

482
00:34:35,870 --> 00:34:38,659
funkar again it goes all the way down
from zero to five

483
00:34:38,659 --> 00:34:43,250
that's the five of the six arguments
that internet openurl is actually a take

484
00:34:43,250 --> 00:34:49,190
and the 1i end up being interested in is
the first 10 and you actually have to

485
00:34:49,190 --> 00:34:54,139
choose whether or not you want to pull
information before the call execute or

486
00:34:54,139 --> 00:34:57,920
after execute this is very simple view
because you can either modify the before

487
00:34:57,920 --> 00:35:02,390
after function that gets called so I
wanted to before so you can see in the

488
00:35:02,390 --> 00:35:06,290
the bottom bit of code there you can
actually see what's going to happen if

489
00:35:06,290 --> 00:35:09,440
that before function gets called what
it's going to do is going to put types

490
00:35:09,440 --> 00:35:12,980
of the different arguments that were
pushed and that you can see the

491
00:35:12,980 --> 00:35:19,130
different i can't really see a minor you
can see that the lp I think it's SE URL

492
00:35:19,130 --> 00:35:25,760
is the first function or second function
first one is actually the handle to the

493
00:35:25,760 --> 00:35:29,630
internet handle so the second function
is actually what I was interested in and

494
00:35:29,630 --> 00:35:34,820
that's what I had fullback trace file
again at the bottom is basically just

495
00:35:34,820 --> 00:35:40,730
going to modify the output file that
gets created and so as you can see I

496
00:35:40,730 --> 00:35:46,070
a.created actually modified to very
simple functions and it's really not

497
00:35:46,070 --> 00:35:50,240
difficult to do pin is in black magic
it's not something that only certain

498
00:35:50,240 --> 00:35:53,689
vulnerability researchers or advanced
reverse-engineer gonna be able to do

499
00:35:53,690 --> 00:35:57,620
anybody can do this kind of stuff and
there's a lot of open source pin tools

500
00:35:57,620 --> 00:36:00,620
out there a lot of things people create
and share publicly

501
00:36:01,740 --> 00:36:05,640
what if i actually have to reverse
engineer something there's ad hoc

502
00:36:05,640 --> 00:36:09,930
automation a lot of times people write
some string d obfuscation scripts you've

503
00:36:09,930 --> 00:36:14,460
got a Python highly recommend using that
or use binary ninja now you can use

504
00:36:14,460 --> 00:36:20,040
Python right in there to be obfuscated
things you should always look for

505
00:36:20,040 --> 00:36:23,610
compressed code or encrypted code inside
of a binary and if you can somehow

506
00:36:23,610 --> 00:36:28,260
decompress or decrypt that before
actually running them our analyzing it

507
00:36:28,260 --> 00:36:31,290
you get to pick up a lot of time there's
a lot of times that I look through code

508
00:36:31,290 --> 00:36:35,460
and i'll see something that's good maybe
Izzy lived compression and once I

509
00:36:35,460 --> 00:36:39,450
decompression that data it's actually be
shellcode that is pretty much the entire

510
00:36:39,450 --> 00:36:43,259
payload so instead of analyzing the
wrapper around that if you can

511
00:36:43,260 --> 00:36:46,110
decompress them code and figure out
what's actually going to happen in the

512
00:36:46,110 --> 00:36:49,110
end you can save yourself a lot of time
and a lot of hassle

513
00:36:50,850 --> 00:36:54,868
another thing I like to do is create a
lot of debugger scripts that's it's very

514
00:36:54,869 --> 00:36:58,740
useful and I'm always in a debugger so
if i can speed up my debugging process

515
00:36:58,740 --> 00:37:04,859
it saves me a lot of time i'm going to
talk a little bit more about this so

516
00:37:04,860 --> 00:37:09,480
with debugging trips that very helpful
dealing with malware especially if

517
00:37:09,480 --> 00:37:12,930
you're looking at the same hour over and
over because you can speed up a lot of

518
00:37:12,930 --> 00:37:18,210
things like I said there are a lot of
different bugs you can use i prefer wind

519
00:37:18,210 --> 00:37:23,970
about windbag however you want to say it
you can use winamp debugger pike ad and

520
00:37:23,970 --> 00:37:29,759
I python all the immunity they both have
their own python implementations there's

521
00:37:29,760 --> 00:37:33,480
a lot of different ways you can speed up
debugging with scripts if you're still

522
00:37:33,480 --> 00:37:38,550
doing a bu kernel32 virtual Alec every
time you're in windbag you're really

523
00:37:38,550 --> 00:37:39,510
slow yourself down

524
00:37:39,510 --> 00:37:45,840
I wouldn't do that then always check
msdn because there's a lot different

525
00:37:45,840 --> 00:37:50,520
there's a lot of differences between a
colonel base and kernel32 when you're

526
00:37:50,520 --> 00:37:53,609
setting a break . there's certain ones
that are actually gonna work and work

527
00:37:53,609 --> 00:37:57,450
and you do that enough you're going to
realize it plus things are spelled a lot

528
00:37:57,450 --> 00:37:58,040
of her

529
00:37:58,040 --> 00:38:03,500
there's a again a big difference from
the library and a little library w and

530
00:38:03,500 --> 00:38:19,250
you need to know those so a quick demo
of C so this might take one second we

531
00:38:19,250 --> 00:39:04,310
need to refer to vm apologize about the
resolution not what I have planned for

532
00:39:04,310 --> 00:39:13,490
so basically what i want to show is
something related to a blog post that

533
00:39:13,490 --> 00:39:17,720
some of our folks again 42 actually just
put out there was an hour sample they

534
00:39:17,720 --> 00:39:21,259
were looking at don't remember the
family i thought my head they had

535
00:39:21,260 --> 00:39:25,610
somebody else that had exports to it but
the experts did many names and if you

536
00:39:25,610 --> 00:39:31,130
look at the recent Ida update you'll
notice that from idol69 2695 actually

537
00:39:31,130 --> 00:39:37,280
fix it fix that bug so the tower itself
didn't have names for the exports but

538
00:39:37,280 --> 00:39:40,520
it's not exports in people are
interested in those exports when we're

539
00:39:40,520 --> 00:39:41,360
analyzing it

540
00:39:41,360 --> 00:39:45,140
we could see that certain exports are
being called by ordinal number instead

541
00:39:45,140 --> 00:39:48,770
of name which can be confusing if you're
looking at the code and Ida you're not

542
00:39:48,770 --> 00:39:54,230
actually going to see export names so
for an example this is the particular

543
00:39:54,230 --> 00:39:58,460
file that didn't have any export names
and you can see looking at the the

544
00:39:58,460 --> 00:40:04,250
exports looks completely blank so this
is idol69 i do not have 695 installer i

545
00:40:04,250 --> 00:40:05,960
will show you what it looks like now

546
00:40:05,960 --> 00:40:11,000
so I use win back a lot in windbag you
can do some simple things like show

547
00:40:11,000 --> 00:40:16,640
exports on a dll and it's going to show
you the exports of that file so this is

548
00:40:16,640 --> 00:40:23,118
an example over here the malware . dll
that i've loaded in here has three

549
00:40:23,119 --> 00:40:26,540
different exports to it you can see the
service main debug create and about

550
00:40:26,540 --> 00:40:30,410
connect and you can either check these
with the show exports building bank

551
00:40:30,410 --> 00:40:39,770
manner you can do and examine of the DL
with a ! star so if I load the same file

552
00:40:39,770 --> 00:40:47,210
that was blog about into windbag which
is the QP b q XR underscore dat which

553
00:40:47,210 --> 00:40:50,510
you can see right here first thing you
should notice it says no symbols and i

554
00:40:50,510 --> 00:40:55,099
reloaded this twice so I still get any
symbols doesn't have any exports it's

555
00:40:55,099 --> 00:41:01,640
going to show me and i can test that oh
give it a name

556
00:41:07,280 --> 00:41:13,820
ok i do show exports I get nothing what
if I examine this dll let's look for the

557
00:41:13,820 --> 00:41:21,589
exports again I get nothing which kind
of stinks because i know from some

558
00:41:21,589 --> 00:41:26,480
analysis that is actually exporting dll
so what if i want to find some export

559
00:41:26,480 --> 00:41:29,630
functions for this we should all know
how to do this because we're the experts

560
00:41:29,630 --> 00:41:34,070
located it located in a file header so
real easy way and when bag to get this

561
00:41:34,070 --> 00:41:41,300
information as we can do a dump header
on the offset the base address of this

562
00:41:41,300 --> 00:41:45,080
deal out which you can see the base up
here in the load modules so I'm just

563
00:41:45,080 --> 00:41:48,150
going to do

564
00:41:48,150 --> 00:41:54,990
and attack after shorten up a little bit
so we see here is we see an array of

565
00:41:54,990 --> 00:41:59,578
image data directory structures and the
one we're interested in is going to be

566
00:41:59,579 --> 00:42:03,420
the export directory and the expert
directory it shows it's actually at

567
00:42:03,420 --> 00:42:07,619
4,000 so if I want to get these exports
I need to keep going and i'm going to

568
00:42:07,619 --> 00:42:18,779
take a look at what's it four thousand
so dump the contents of this space and

569
00:42:18,779 --> 00:42:23,430
this is my export directory so if anyone
remembers when an export directory looks

570
00:42:23,430 --> 00:42:27,930
like from analysis this is what we've
got but we don't remember what that

571
00:42:27,930 --> 00:42:46,288
looks like so i will show you come on
this is the image export directory you

572
00:42:46,289 --> 00:42:50,880
can see on the right-hand side i
actually have a picture of the one that

573
00:42:50,880 --> 00:42:55,470
we decide went back to the sample in
pink i have the d words and in orange i

574
00:42:55,470 --> 00:43:01,589
have the words actually highlighted so
you can see them a little bit better and

575
00:43:01,589 --> 00:43:05,819
in green i have the three that meant
this three addresses the three offsets

576
00:43:05,819 --> 00:43:08,640
I'm actually interested in you can see
it's the address of the functions

577
00:43:08,640 --> 00:43:12,720
address of names and addresses the
ordinals what we want to see addressed

578
00:43:12,720 --> 00:43:16,470
functions because we already know their
names and one of the other things I'm

579
00:43:16,470 --> 00:43:22,649
interested in is the fact that says
we've got number of functions and that's

580
00:43:22,650 --> 00:43:26,069
actually a D word that if you look at it
here highlighted in pink

581
00:43:26,069 --> 00:43:31,349
it's one spot over from the first green
block it says there's five so it says

582
00:43:31,349 --> 00:43:36,779
there's five functions available in five
names which is really not true because

583
00:43:36,779 --> 00:43:40,650
we don't see them but they're there but
anyway

584
00:43:41,280 --> 00:43:48,570
let's go back to the demo and we can see
this is the exact same export directory

585
00:43:48,570 --> 00:43:52,920
and what we were interested in was the
opposite of the functions so the offset

586
00:43:52,920 --> 00:43:57,420
of functions like it's 4028 so if i just
take a look at the 4028 see what we have

587
00:43:57,420 --> 00:44:02,400
here this should be a list of the five
exported functions from this dll

588
00:44:02,400 --> 00:44:05,400
hopefully but how do we know we can she

589
00:44:06,330 --> 00:44:08,940
there's a lot of tools out there that
actually this right one of the ones that

590
00:44:08,940 --> 00:44:18,060
I use cff explore and we'll see if that
explore we can actually bring up and see

591
00:44:18,060 --> 00:44:26,190
the addresses that is showing here this
little bit more visible shows that the

592
00:44:26,190 --> 00:44:32,370
first is 2501 seconds 25 75 and 1b 13
etc and it looks like those are the same

593
00:44:32,370 --> 00:44:35,400
ones that I've got in this export
directory which shows me that those are

594
00:44:35,400 --> 00:44:40,710
the exports from previous analysis i
know that 2575 or the ordinal to is the

595
00:44:40,710 --> 00:44:45,540
one that was being executed so just out
of curiosity before I did anything else

596
00:44:45,540 --> 00:44:51,810
i would make sure there's actual code
there to make sure that this is proper

597
00:44:51,810 --> 00:44:57,660
or probably the entry point the point of
execution so if i disassembled I see a

598
00:44:57,660 --> 00:45:00,180
proper prologue and I see that it
probably looks like a function that's

599
00:45:00,180 --> 00:45:04,859
actually being executed if you're not
familiar with this is what a function

600
00:45:04,860 --> 00:45:09,720
looks like an x86 assembly release the
prologue in the beginning of the

601
00:45:09,720 --> 00:45:13,169
function so that was kind of in the ass

602
00:45:13,170 --> 00:45:17,670
so what happens if you don't want to go
through all that you scripted out like I

603
00:45:17,670 --> 00:45:20,820
mean that was talking about scripting
the whole talk so one of the things that

604
00:45:20,820 --> 00:45:28,230
I like to use is PI KD and it's really
easy to load up you can do a load by KD

605
00:45:28,230 --> 00:45:33,930
pin you just got to make sure you have
it in your extensions directory and the

606
00:45:33,930 --> 00:45:37,049
script that I wrote for this is
basically going to find the information

607
00:45:37,050 --> 00:45:40,050
that i just showed you how to get but
only it's going to do itself

608
00:45:42,090 --> 00:45:56,550
oh i forgot i have to provide an
argument so i was able to write the

609
00:45:56,550 --> 00:45:59,940
script to give us the entry point so if
you want to break on the actual entry of

610
00:45:59,940 --> 00:46:05,730
the bailout which would be dll at entry
or if you want to you can actually go

611
00:46:05,730 --> 00:46:10,020
down and see all the different export
addresses and the one that was

612
00:46:10,020 --> 00:46:14,220
interested in before like I showed you
is 2575 which is the second ordinal so

613
00:46:14,220 --> 00:46:16,620
or the the second function

614
00:46:16,620 --> 00:46:20,880
I've also got the lp addresses up here
just so you can have those if you ever

615
00:46:20,880 --> 00:46:21,600
need them

616
00:46:21,600 --> 00:46:28,650
this is a very very easy script right
and it's something that I'm gonna be

617
00:46:28,650 --> 00:46:33,780
able to reuse every time I look at a
piece of code that's a dll and to give

618
00:46:33,780 --> 00:46:40,530
an example or just actually to show you
what it looks like I've got two examples

619
00:46:40,530 --> 00:46:46,350
up here and one is a really crappy piece
of code which is over here this is the

620
00:46:46,350 --> 00:46:52,830
first 1i wrote basically we go and
basically this is a linear program with

621
00:46:52,830 --> 00:46:56,759
zero functions no modularity it's really
going to be difficult for someone else

622
00:46:56,760 --> 00:47:00,390
to utilize this and over here on the
Left it's more of a modular design where

623
00:47:00,390 --> 00:47:04,049
I have functions that I can reuse and
put into other code if I needed to

624
00:47:04,050 --> 00:47:07,020
and I just basically wanted to show that
if you're going to write a script for

625
00:47:07,020 --> 00:47:10,200
something to share it make sure you make
it something that people can understand

626
00:47:10,200 --> 00:47:15,689
read and reuse because no one's going to
take the one over on the right and have

627
00:47:15,690 --> 00:47:21,000
a clue where they can borrow this or
reuse it any at any point but over here

628
00:47:21,000 --> 00:47:24,540
on the Left if you need to parse a hurry
you're gonna be able to see what pieces

629
00:47:24,540 --> 00:47:27,900
that have your getting back and how to
modify things with it when when you

630
00:47:27,900 --> 00:47:31,980
actually do return values so those are
pretty important you don't want to be

631
00:47:31,980 --> 00:47:34,980
releasing co2 public that's gonna look
like garbage

632
00:47:37,920 --> 00:47:50,339
so again what i do i walked the export
table in one bag which was it's not too

633
00:47:50,339 --> 00:47:53,520
difficult maybe five or six different
commands but even before you get there

634
00:47:53,520 --> 00:47:58,500
you gotta find the entry point you can
either walk PAB or if you want to you

635
00:47:58,500 --> 00:48:03,299
can just do a load module at the base
dress that way but either way you need

636
00:48:03,299 --> 00:48:06,809
to be able to do at least five or six
functions i require six different

637
00:48:06,809 --> 00:48:09,480
commands to be able to get that
information and whatever you have to do

638
00:48:09,480 --> 00:48:12,660
that many commands to get something
that's common throughout multiple files

639
00:48:12,660 --> 00:48:16,470
it should be automated and should be
something that you do one time and just

640
00:48:16,470 --> 00:48:20,970
load up a script or a lot of some kind
of tool so why do I automated like I

641
00:48:20,970 --> 00:48:25,500
said I wanted to be wanted to be quick i
wanted to be able to to reuse this and

642
00:48:25,500 --> 00:48:31,319
not have to worry about it in the future
so automated reverse engineering it

643
00:48:31,319 --> 00:48:32,579
doesn't have to be fancy

644
00:48:32,579 --> 00:48:37,500
it's something that anybody can do and
just because it looks easy and it seems

645
00:48:37,500 --> 00:48:41,430
simple doesn't mean that it's a bad idea
you can or that it's not useful

646
00:48:41,430 --> 00:48:47,759
everything you automate should always be
something that's repeatable so if you're

647
00:48:47,760 --> 00:48:50,640
doing a task and you're only ever going
to see a one-time or somebody writes

648
00:48:50,640 --> 00:48:54,058
piece of malware that's gonna community
comes in your system and you look at and

649
00:48:54,059 --> 00:48:57,900
it's dealing with particular shared
drives that you have on your enterprise

650
00:48:57,900 --> 00:49:02,040
i wouldn't try to automate that I would
probably die down a little bit deeper if

651
00:49:02,040 --> 00:49:05,160
you're looking a piece of malware that's
specifically targeted for you again I

652
00:49:05,160 --> 00:49:10,200
probably not a make sure if you can hit
by it again you've got the problems the

653
00:49:10,200 --> 00:49:14,848
data should be transferable and what I
mean by that is that should be modular

654
00:49:14,849 --> 00:49:17,339
if its code if not it should be
something that you can give somebody

655
00:49:17,339 --> 00:49:21,210
confidently and say hey you can use this
i can use this or if I've got a threat

656
00:49:21,210 --> 00:49:24,299
anilyst is interested in it he shouldn't
have to try to read five or ten

657
00:49:24,299 --> 00:49:27,299
different documents to figure out how to
use it and they shouldn't have to reread

658
00:49:27,299 --> 00:49:30,960
my code should be pretty easy for them
to understand figure out how to use it

659
00:49:30,960 --> 00:49:35,579
should be able to get the information
they need by using that tool it should

660
00:49:35,579 --> 00:49:39,299
be shareable i highly encourage
everybody to share things if you can I

661
00:49:39,299 --> 00:49:43,559
know an idea world of great but a lot of
people work for cleared folks and

662
00:49:43,559 --> 00:49:47,000
different agencies and that doesn't
always happen

663
00:49:47,000 --> 00:49:51,980
so why isn't for automating reverse
engineering tasks easier

664
00:49:52,550 --> 00:49:55,580
well you've actually got to know stuff
some of the things you need to know this

665
00:49:55,580 --> 00:49:58,790
is very basic if your reverse engineer
you think I why everybody should know

666
00:49:58,790 --> 00:50:02,720
how to do this but like i said earlier
not everybody was looking at our ending

667
00:50:02,720 --> 00:50:08,390
our analysis is a reverse engineer so
you need to be able to do understand

668
00:50:08,390 --> 00:50:13,670
basic file headers peintres bitwise
operations some basic crypto I mean it's

669
00:50:13,670 --> 00:50:19,550
very easy to determine when you've got a
rc4 algorithm and you've got some kind

670
00:50:19,550 --> 00:50:25,670
of xbox creation being done for an RC
for you can read up on that but in

671
00:50:25,670 --> 00:50:28,220
general basic grip the routines like
that are things that you should be able

672
00:50:28,220 --> 00:50:31,189
identifying code and you should be able
to implement those it really implement

673
00:50:31,190 --> 00:50:35,240
though you should know different
nomenclature types and the types of data

674
00:50:35,240 --> 00:50:38,359
if you're writing in Python you didn't
know what an ordinal is if you're going

675
00:50:38,360 --> 00:50:42,200
to have you need to know how to type
pass things into a character in a hex

676
00:50:42,200 --> 00:50:47,210
and understand how these work behind the
scenes you need to know an actual

677
00:50:47,210 --> 00:50:50,600
scripting language you can't just say
that automate things and then start

678
00:50:50,600 --> 00:50:53,480
writing in Perl Python because there's
no such thing you need to pick something

679
00:50:53,480 --> 00:50:55,130
and learn how to use it

680
00:50:55,130 --> 00:50:58,340
calling conventions are always something
that you need to know if you're

681
00:50:58,340 --> 00:51:01,970
manipulating data that's coming from the
stack or you're pushing specific data

682
00:51:01,970 --> 00:51:08,390
onto something or to a to a stack or
doing anything like that you need to

683
00:51:08,390 --> 00:51:11,990
know how it's working and if you're
going to use DVI especially you want to

684
00:51:11,990 --> 00:51:16,700
know where the arguments are coming from
and how they're being manipulated couple

685
00:51:16,700 --> 00:51:19,460
of words of wisdom i always tell people
at the sandbox can do it you shouldn't

686
00:51:19,460 --> 00:51:20,270
have to

687
00:51:20,270 --> 00:51:24,500
please don't reinvent the wheel and if
it's repeatable don't repeat it to a

688
00:51:24,500 --> 00:51:28,250
one-time that's something else repeat
for you are there any questions

689
00:51:29,060 --> 00:51:36,470
yes that's what

690
00:51:42,230 --> 00:51:49,970
I would not admit that because of three
compiling itself so more like a

691
00:51:49,970 --> 00:51:56,930
polymorphic memory rica competition so
something like that you're most likely

692
00:51:56,930 --> 00:51:59,330
not going to be able to use of three
compiling itself and Mary probably has

693
00:51:59,330 --> 00:52:02,029
an algorithm is going to change things
up unless you're going to figure out

694
00:52:02,030 --> 00:52:03,650
what that is

695
00:52:03,650 --> 00:52:06,859
you're probably not going to be able to
create a script or any kind of tool is

696
00:52:06,859 --> 00:52:10,790
going to do it for you and your most
likely kind of screwed at something like

697
00:52:10,790 --> 00:52:13,609
that's almost like a DGA once it gets
created you need to find the algorithm

698
00:52:13,609 --> 00:52:16,940
figure out how how it's going to work at
a different level

699
00:52:16,940 --> 00:52:24,380
yes i am going to clean up a little bit
and I'm gonna put it on my github that i

700
00:52:24,380 --> 00:52:25,910
think i just created the other day

701
00:52:25,910 --> 00:52:42,830
I've never really used it so it will be
up there a lot of our land there will

702
00:52:42,830 --> 00:52:47,509
check the timing attacks are due time
each EX to look to see if something is

703
00:52:47,510 --> 00:52:50,150
being executed and that happens in
sandboxes and all the time all the time

704
00:52:50,150 --> 00:52:53,869
which is one of the things i said at the
beginning it's actually pretty cool to

705
00:52:53,869 --> 00:52:57,200
look at them our figure out when it's
doing that in stopping you from doing

706
00:52:57,200 --> 00:53:00,830
that and if you can do that then I mean
your whole new level that . you can

707
00:53:00,830 --> 00:53:03,859
manipulate the malware I mean the
malware authors already done grading

708
00:53:03,859 --> 00:53:07,040
this stuff now it's your turn to kind of
rewrite it and tweak it a little bit

709
00:53:07,040 --> 00:53:11,029
make it do you want to do so you can if
you want you can go to patch that out so

710
00:53:11,030 --> 00:53:13,910
it doesn't happen again throwing some no
option whatever and then actually run

711
00:53:13,910 --> 00:53:16,910
through the DVI and you're gonna go

712
00:53:16,910 --> 00:53:25,399
yeah have not should sounds fun

713
00:53:25,400 --> 00:53:41,150
yes like setting up in esxi server
doctor or something like that

714
00:53:41,720 --> 00:53:44,959
yeah I think it's awesome I I most of
the places i've been in the past we've

715
00:53:44,960 --> 00:53:49,730
tried to do that and I it works really
well especially if you set up i haven't

716
00:53:49,730 --> 00:53:50,670
used rocker

717
00:53:50,670 --> 00:53:56,100
I just new to it but we use esxi and you
can actually set up multiple VMS in each

718
00:53:56,100 --> 00:53:58,740
p.m. would work for different our family
and you could have different scripts

719
00:53:58,740 --> 00:54:03,299
setup in each p.m. so then you could
automatically push different samples

720
00:54:03,300 --> 00:54:09,420
based on signature hits into those bm's
via the esxi API it worked really well

721
00:54:09,420 --> 00:54:21,720
possibly I i haven't messed up those at
all but i'm sure that's possible

722
00:54:23,580 --> 00:54:27,540
nothing else thank you very much

