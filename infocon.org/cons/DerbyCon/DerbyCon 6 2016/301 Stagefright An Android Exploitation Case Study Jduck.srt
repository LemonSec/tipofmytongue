1
00:00:00,000 --> 00:00:08,370
again feedback we need a monitor for the
speaker's really can see what the hell's

2
00:00:08,370 --> 00:00:15,719
going on anyway so I'm j-roc also known
as Joshua Drake that it's not in the

3
00:00:15,719 --> 00:00:18,719
schedule necessarily but not a secret

4
00:00:19,380 --> 00:00:22,919
you guys here for the stage fright talk
it's pretty interesting one

5
00:00:24,420 --> 00:00:28,170
let's just jump right in so here's a
quick agenda will talk about these

6
00:00:28,170 --> 00:00:34,739
things again it's me i I've been doing
exploit there for a long time BR for a

7
00:00:34,739 --> 00:00:40,828
long time it was a hobby for me before
it was an actual job so you know we do

8
00:00:40,829 --> 00:00:45,210
after was a hobby I've started working
and I defense and then just left there

9
00:00:45,210 --> 00:00:50,190
for rapid seven for a year-and-a-half
had a great time there and then went to

10
00:00:50,190 --> 00:00:54,269
occupy labs which now became operative
and since that since then I left and

11
00:00:54,270 --> 00:01:00,570
went to him . so now I'm the VP platform
research exploitation there that means i

12
00:01:00,570 --> 00:01:06,450
am in charge of understanding the mobile
ecosystem you know security features of

13
00:01:06,450 --> 00:01:09,240
the platforms and how they might be
vulnerable

14
00:01:09,240 --> 00:01:12,899
how to make those better and stuff like
that so also found her droid set group

15
00:01:12,900 --> 00:01:16,680
which is actually at this point has
several google people in the channel

16
00:01:16,680 --> 00:01:24,210
which is pretty cool actually i saw the
i'm working things like together a lucky

17
00:01:24,210 --> 00:01:29,309
in the channel and I was like okay
that's really cool also agree that lead

18
00:01:29,310 --> 00:01:31,979
author and hackers had book if you
haven't read that it's really outdated

19
00:01:31,979 --> 00:01:33,780
also screw it

20
00:01:33,780 --> 00:01:40,020
something still makes sense but so the
motivations for the for this talk we're

21
00:01:40,020 --> 00:01:44,070
really to explore the difficulty of of
exploiting vulnerabilities on Android as

22
00:01:44,070 --> 00:01:50,369
in particular is using stage right or
abilities as a as a example I did to

23
00:01:50,369 --> 00:01:55,680
talk here last year that was about state
right or abilities that is more about

24
00:01:55,680 --> 00:02:01,799
the specific vulnerabilities this one is
more about exploitation of those i

25
00:02:01,799 --> 00:02:05,520
really wanted to get more I want to get
more people involved in research in

26
00:02:05,520 --> 00:02:09,508
general I didn't talk at DEFCON with
Steve Christie who was the pioneer of

27
00:02:09,508 --> 00:02:10,079
see

28
00:02:10,080 --> 00:02:13,980
these if you've ever heard of those and
also did a lot of work on CW in a lot of

29
00:02:13,980 --> 00:02:17,970
other minor standards but you know we
did this vulnerability is one talk to

30
00:02:17,970 --> 00:02:22,350
try to get some of the more new people
in the industry interested in and

31
00:02:22,350 --> 00:02:32,609
familiar with the key concepts of
vulnerability research so a course like

32
00:02:32,610 --> 00:02:38,100
i said i didn't talk last year was kind
of a big deal last year made a lot of a

33
00:02:38,100 --> 00:02:42,450
lot of things happen inside Google and
we'll talk a little bit about some of

34
00:02:42,450 --> 00:02:47,609
those as well so acknowledgments always
like to do this all these people help me

35
00:02:47,610 --> 00:02:52,500
with various stains obviously the Recon
gave me the opportunity two percent here

36
00:02:52,500 --> 00:02:57,150
today and I'd like to just give
everybody a hand if you if you guys

37
00:02:57,150 --> 00:03:02,640
don't mind like this i really think you
know collaboration and working together

38
00:03:02,640 --> 00:03:08,190
is is how a lot of really amazing things
are going to happen it's sometimes like

39
00:03:08,190 --> 00:03:11,490
a credit doesn't get given where it
needs to and I think it's important to

40
00:03:11,490 --> 00:03:15,600
do this so I do this every time it's
like I keep trying to remove slides from

41
00:03:15,600 --> 00:03:17,370
the slide deck but did that one

42
00:03:17,370 --> 00:03:21,120
I just don't believe me so what is stage
fright I if you haven't heard of it it's

43
00:03:21,120 --> 00:03:26,250
a multimedia library inside android it's
primarily written in c++ i think pretty

44
00:03:26,250 --> 00:03:32,340
much all of its two plus actually
handles all the video and audio files

45
00:03:32,340 --> 00:03:36,630
for playback and also for metadata
extraction so things like the dimensions

46
00:03:36,630 --> 00:03:41,640
of the video or perhaps the duration or
I don't know anything you can think

47
00:03:41,640 --> 00:03:46,350
about it's not the actual video frames
and that stuff's presented in the

48
00:03:46,350 --> 00:03:50,040
gallery or its accessible through
android framework through various api's

49
00:03:50,040 --> 00:03:54,570
and now at this point it's also under
name of vulnerability and check out the

50
00:03:54,570 --> 00:03:57,870
wikipedia page which I had nothing to do
with but it's actually pretty good

51
00:03:59,040 --> 00:04:02,510
they did better describing it in our
marketing people did so that's good

52
00:04:02,510 --> 00:04:10,370
yes and so when we publish this last
year unit at that point you can actually

53
00:04:10,370 --> 00:04:15,590
through it and ms compromise the device
and get access to this process called

54
00:04:15,590 --> 00:04:20,298
media server media server then had
access to the microphone and the camera

55
00:04:20,298 --> 00:04:23,419
and basically everything that you would
think about a phone that does media

56
00:04:23,419 --> 00:04:26,719
stuff so that was pretty nasty

57
00:04:26,720 --> 00:04:30,320
they fix a lot of that let's talk a
little bit about this vulnerability that

58
00:04:30,320 --> 00:04:35,479
was exploited it's kind of embarrassing
because it was a vulnerability that was

59
00:04:35,479 --> 00:04:37,310
found in a line of code

60
00:04:37,310 --> 00:04:45,260
I patched with the CBE 2015 324 i miss
something and so that's that's why again

61
00:04:45,260 --> 00:04:49,250
it's important to have collaboration
it's important to have code review i

62
00:04:49,250 --> 00:04:52,520
didn't realize that I had made a mistake
here but you can see the mistake if you

63
00:04:52,520 --> 00:04:56,359
look really closely the problem is that
this chunk size value is actually a

64
00:04:56,360 --> 00:05:03,500
64-bit number and so sighs max is 32-bit
number any obviously 64-bit number can

65
00:05:03,500 --> 00:05:07,400
sometimes be larger than a 32-bit number
so yeah

66
00:05:07,400 --> 00:05:11,690
Oh two people reported this but at the
same time it was kind of embarrassing

67
00:05:12,500 --> 00:05:20,180
yeah I'm ashamed but I'm human as well
so so I why did I pick this one too

68
00:05:20,180 --> 00:05:23,690
right to exploit force for this for this
talk

69
00:05:23,690 --> 00:05:29,570
the idea is that this one got past one
month later so you get you no one wants

70
00:05:29,570 --> 00:05:34,310
more vulnerable firmwares I and in some
cases some devices that are out there

71
00:05:34,310 --> 00:05:38,599
may have got patches for the initial
batch of vulnerabilities that were

72
00:05:38,599 --> 00:05:42,080
highly publicized but might have missed
this one because it kind of went the the

73
00:05:42,080 --> 00:05:48,770
month after it also like i had written
an exploit 4324 that that's what I

74
00:05:48,770 --> 00:05:54,049
demoed last year here and this change is
basically all it took to make that

75
00:05:54,050 --> 00:05:55,340
exploit the

76
00:05:55,340 --> 00:06:00,260
exploit for this ball is basically just
add this one here pretty much and make

77
00:06:00,260 --> 00:06:05,330
sure it's a quadrant instead of the
state of the d-word so the root cause of

78
00:06:05,330 --> 00:06:13,550
this one is a you know that it's
basically the same same situation as 324

79
00:06:13,550 --> 00:06:19,190
you end up with this thing online 1896
we're adding a size with this Chuck

80
00:06:19,190 --> 00:06:25,310
sighs again Chuck sighs being 64 bits
and the UH the new operator I believe

81
00:06:25,310 --> 00:06:31,100
only takes a 32-bit integer as its value
so anything that's bigger than 32 bits

82
00:06:31,100 --> 00:06:34,820
inside of those brackets on 1896 is
going to cause an undersized allocation

83
00:06:34,820 --> 00:06:41,270
this is an accumulator tag so if there
are multiple TX 3g tax each time one has

84
00:06:41,270 --> 00:06:45,380
encountered it looks to see what it
already has seen from a txt tag and just

85
00:06:45,380 --> 00:06:49,460
adds to the end of it so you really
can't trigger anything bad by just one

86
00:06:49,460 --> 00:06:54,409
txt g but tagging your file but if you
have to then even if the first one is

87
00:06:54,410 --> 00:06:59,690
only one bite you can still cause an
integer overflow so the consequence of

88
00:06:59,690 --> 00:07:04,070
this is you know just following this
allocation they have a mem copy with the

89
00:07:04,070 --> 00:07:07,370
amount of the new data they just tacking
on the end so it you know if you had

90
00:07:07,370 --> 00:07:10,880
before an allocation was only one bite
and now you have an application that 0

91
00:07:10,880 --> 00:07:16,370
bytes it's going to add whatever you say
here onto the end it's a totally going

92
00:07:16,370 --> 00:07:22,400
to make problem and it you see a light
snack 1905 that's where they're reading

93
00:07:22,400 --> 00:07:26,810
the data from the file the idea being
that you can control how much data is

94
00:07:26,810 --> 00:07:31,880
actually read into this undersized
allocation because of because you can

95
00:07:31,880 --> 00:07:36,889
truncate the file at any point so it if
you have only 32 more bytes then it's

96
00:07:36,889 --> 00:07:41,630
going to write the one bite and the 32
bytes and 20 by buffer which is really

97
00:07:41,630 --> 00:07:50,030
bad writing anything in 20 right but
first don't do that so we basically

98
00:07:50,030 --> 00:07:53,150
control everything and you can see her
from the exploit where we're setting

99
00:07:53,150 --> 00:07:56,549
some values including the

100
00:07:56,550 --> 00:08:01,440
different allocation sizes and making
things happen the way we want them to so

101
00:08:01,440 --> 00:08:05,340
its Android secure yet it's really
interesting when you when you look at

102
00:08:05,340 --> 00:08:08,400
this is kind of a high-level like look
back at what I've learned through the

103
00:08:08,400 --> 00:08:13,950
process when I look at any operating
system the things that are important to

104
00:08:13,950 --> 00:08:20,310
me are the heap implementation it's very
important and you know back in the day a

105
00:08:20,310 --> 00:08:25,020
permutation was how you could create
even generic exploits against whatever

106
00:08:25,020 --> 00:08:30,990
you there were the right right we're
right where unlink serious scenarios in

107
00:08:30,990 --> 00:08:36,720
the older people implementations also a
SLR quality is very important and it was

108
00:08:36,720 --> 00:08:43,530
previously pretty bad and we'll talk a
little bit more about that so I i I'm

109
00:08:43,530 --> 00:08:49,800
not gonna be like i'm not i'm a
realistic guys and I don't believe that

110
00:08:49,800 --> 00:08:52,140
you can eliminate all the
vulnerabilities in a codebase I think

111
00:08:52,140 --> 00:08:57,240
you can do your best and if you just
assume that you can't which you know I

112
00:08:57,240 --> 00:09:00,330
think it's kind of also a defeatist
attitude is maybe you can if you try

113
00:09:00,330 --> 00:09:11,190
hard no but uh yeah but a hardening can
make things at least harder to exploit

114
00:09:11,190 --> 00:09:16,920
so those other medications are also
important but these are the kind of the

115
00:09:16,920 --> 00:09:24,000
two big ones for me I think android in
lollipop 5jx they added a new he

116
00:09:24,000 --> 00:09:30,690
permutation called a mark this is not a
necessarily new implementation for the

117
00:09:30,690 --> 00:09:36,030
world it's just a new one for android
and inhale in and a switch to it some

118
00:09:36,030 --> 00:09:41,250
more in marshmallow and a new get it
remains the default allocator and I

119
00:09:41,250 --> 00:09:46,050
think in New get the ideas that the old
alligator is actually going to be

120
00:09:46,050 --> 00:09:52,859
removed in favor of this new jack to
email so Jay Malik I think it's stable

121
00:09:52,860 --> 00:09:56,640
remember the guys name is jason nevins
jump from something like that

122
00:09:57,240 --> 00:10:02,250
so jay is from his name and this
alligator existed for some time it was

123
00:10:02,250 --> 00:10:05,279
used in firefox there's good
presentations about it i think i have a

124
00:10:05,279 --> 00:10:10,589
link somewhere in the slides the problem
it is that it's weaker in that they have

125
00:10:10,589 --> 00:10:19,380
less entropy and he addresses things are
allocated in blocks and they just can we

126
00:10:19,380 --> 00:10:22,380
like to turn the volume down a little
bit so we don't get some treatment

127
00:10:23,520 --> 00:10:26,520
test your feedback

128
00:10:28,290 --> 00:10:31,290
ok so that's much better

129
00:10:33,510 --> 00:10:36,630
so it means it's easier to guess where
data is in memory and if you have huge

130
00:10:36,630 --> 00:10:41,250
allocations they're very very
predictable the they also got rid of

131
00:10:41,250 --> 00:10:44,640
inline metadata so if anybody has ever
done has anybody ever done like he

132
00:10:44,640 --> 00:10:48,689
corruptions with deal Malik or or nearly
older kind of alligators

133
00:10:48,690 --> 00:10:52,980
yeah Alice asked Dave my google hottie

134
00:10:54,779 --> 00:10:58,920
sorry guys I'm a little nervous
sectional that Fiasco with browser

135
00:10:58,920 --> 00:11:01,560
window

136
00:11:01,560 --> 00:11:07,770
alright so they got rid of this inline
metadata in the thing is that the inline

137
00:11:07,770 --> 00:11:13,500
metadata actually makes exploitation
more difficult so way back in the day

138
00:11:13,500 --> 00:11:18,630
they had unlike technique that was very
easy to exploit but after that whole

139
00:11:18,630 --> 00:11:23,279
scenario finally eventually played out
to all right we're gonna make me drink

140
00:11:23,279 --> 00:11:25,630
Cristal

141
00:11:25,630 --> 00:11:37,150
causing thats its iced high iso shit i'm
gonna try not to vomit right now so I'm

142
00:11:37,150 --> 00:11:44,650
gonna keep that for a little by little
bit later so I that means like it after

143
00:11:44,650 --> 00:11:47,380
they had to something technique
mitigated they basically started

144
00:11:47,380 --> 00:11:50,230
checking the pointers and they wouldn't
write to them if they didn't match each

145
00:11:50,230 --> 00:11:54,790
other so that means then it if you have
a corrupted end things with crash

146
00:11:54,790 --> 00:12:02,079
instead of instead of actually corrupt
memory in a very nice way so I switching

147
00:12:02,080 --> 00:12:05,710
to this new allocator they got rid of
that so that means that there's nothing

148
00:12:05,710 --> 00:12:09,550
in between when you overflow from one
block into another block there's nothing

149
00:12:09,550 --> 00:12:13,750
that can detect it at all and it's just
it's just application-specific how you

150
00:12:13,750 --> 00:12:17,410
would exploit it and in a c++ program
that usually means you just hit me table

151
00:12:17,410 --> 00:12:23,800
we'll get into that a little bit more so
I unfortunately that's the situation and

152
00:12:23,800 --> 00:12:28,839
today and I i actually run my device
with a different elevator so good luck

153
00:12:28,840 --> 00:12:36,160
decadence want my phone and don't like
gmail so here's a little mitigation

154
00:12:36,160 --> 00:12:41,650
summary these different things selinux
is a is is present since 44 and

155
00:12:41,650 --> 00:12:46,689
enforcing in all modes since five that
oh but you know it really comes into

156
00:12:46,690 --> 00:12:49,660
play once you get arbitrary code
execution it's not really any

157
00:12:49,660 --> 00:12:55,719
consequence to you if you're exercising
code that has more abilities in it stack

158
00:12:55,720 --> 00:12:59,530
cookies are completely unrelated to heat
. abilities so that doesn't that doesn't

159
00:12:59,530 --> 00:13:00,310
apply

160
00:13:00,310 --> 00:13:04,510
45 source also only works when the
compiler knows exactly how big buffers

161
00:13:04,510 --> 00:13:07,840
are which you can imagine if its dynamic
site application that never knows that

162
00:13:07,840 --> 00:13:14,620
so it doesn't come into play SLR is only
president really on android 4.1 or later

163
00:13:14,620 --> 00:13:21,130
and it's actually pretty weak up until
new gets new get improved quite a bit

164
00:13:21,130 --> 00:13:27,520
but we'll talk about that again some
more so an axis we know it's well-known

165
00:13:27,520 --> 00:13:30,460
once once you get round aslr than X is
not really

166
00:13:30,460 --> 00:13:35,020
a concern you just use returning
programming and then there's this new

167
00:13:35,020 --> 00:13:41,380
mitigation in GCC 5 . x where they're
actually checking the parameters to knew

168
00:13:41,380 --> 00:13:44,590
that didn't come into play here because
the integer overflow actually happens

169
00:13:44,590 --> 00:13:49,390
before even calls the new operator so
that didn't come to player for this

170
00:13:49,390 --> 00:13:55,840
little so SLR as three exploits that i
developed i think actually it's more

171
00:13:55,840 --> 00:14:01,600
like five but there's a couple that are
not so they're just kind of variations

172
00:14:01,600 --> 00:14:02,710
on the others

173
00:14:02,710 --> 00:14:08,800
the first one was 1538 on Android 404 so
that I did that because i thought hey

174
00:14:08,800 --> 00:14:13,660
you know this will be easy to exploit
because there's no SLR here I end up

175
00:14:13,660 --> 00:14:20,800
being actually much harder than the to
exploit 0 for android 5.1 and so it

176
00:14:20,800 --> 00:14:25,540
would I talked a little bit about this
this third number three exploit that is

177
00:14:25,540 --> 00:14:30,550
w this year I don't know if we release
like that but they may be on my personal

178
00:14:30,550 --> 00:14:34,449
website if you're interested in those
it's a different exploit than this mess

179
00:14:34,450 --> 00:14:41,140
. module but it's within the next like
right but not yet so so metaphor

180
00:14:41,140 --> 00:14:42,040
happened of it

181
00:14:42,040 --> 00:14:47,680
anybody heard of this metaphor thing is
couple of Israeli guys the the they were

182
00:14:47,680 --> 00:14:50,859
playing around with this this
vulnerability and in the browser and

183
00:14:50,860 --> 00:14:55,480
they discovered that they could use some
JavaScript to read the duration field of

184
00:14:55,480 --> 00:15:03,850
a video tag html5 element and they use
that to basically corrupt some stuff and

185
00:15:03,850 --> 00:15:11,860
then use that as an arbitrary read for
certain values and that's cool except

186
00:15:11,860 --> 00:15:15,850
well let's get a little more ghassan so
and that works through using these

187
00:15:15,850 --> 00:15:22,330
metadata items in inside of a the mp4
code they use this class called the

188
00:15:22,330 --> 00:15:30,070
metadata class it's a special kind of
vector that is sorted so anytime you add

189
00:15:30,070 --> 00:15:34,120
something to it it's always going to be
in alphabetical order and so what they

190
00:15:34,120 --> 00:15:38,980
did in in their technique was stay over
or a high tag which is kinda usually the

191
00:15:38,980 --> 00:15:40,870
first one with the duration tag

192
00:15:40,870 --> 00:15:46,300
and they wrote a pointer in the last bit
and and so the because this value is a

193
00:15:46,300 --> 00:15:50,829
controlled by the attacker II they can
read whatever they want

194
00:15:50,830 --> 00:15:56,320
so that's pretty cool the problem is
that it's a you know obviously the

195
00:15:56,320 --> 00:16:00,100
metaphor exploit was eventually released
after the paper in the paper they said

196
00:16:00,100 --> 00:16:03,580
they supported one should devices and
firmware and their exploit came out and

197
00:16:03,580 --> 00:16:08,320
supported one device and one former and
that was kind of disappointing but

198
00:16:08,320 --> 00:16:11,770
really that's the thing that really
sucks when you read the paper is to

199
00:16:11,770 --> 00:16:15,160
delete method as some really crappy
crappy limitations

200
00:16:15,160 --> 00:16:20,949
yeah you could only leave values using a
double which I don't know if anybody has

201
00:16:20,950 --> 00:16:23,680
ever used doubles and exploits before
but double-precision floating-point

202
00:16:23,680 --> 00:16:30,400
numbers they pretty much piss you off
whenever you have to use something I

203
00:16:30,400 --> 00:16:38,829
think something about man man yeah it's
not a number but is it that is not so

204
00:16:38,830 --> 00:16:44,589
there's that problem and then at the end
of it they do some math are too so that

205
00:16:44,589 --> 00:16:49,630
means you can only leave values 64-bit
values from memory that have their high

206
00:16:49,630 --> 00:16:56,050
bits set to less than this 512 5 11 ish
number and then also there's some

207
00:16:56,050 --> 00:16:59,800
precision lost because of rounding and
such so you don't get the little bits at

208
00:16:59,800 --> 00:17:04,240
all so you get none of the little bits
and you get nothing that has the high

209
00:17:04,240 --> 00:17:09,579
work Heidi work of a greater than this
it you could imagine that kind of rules

210
00:17:09,579 --> 00:17:15,339
out v tables and a lot of other things
have big numbers there were you know

211
00:17:15,339 --> 00:17:19,149
even though the process is 32 bits and
you usually you're not going to get Abby

212
00:17:19,150 --> 00:17:23,439
table that has the following thing be
something small and we'll talk some more

213
00:17:23,439 --> 00:17:29,679
about that also their exploit required
like tons and tons of requests i finally

214
00:17:29,679 --> 00:17:34,150
got after running Iran put browser to it
and it's just like loading loading

215
00:17:34,150 --> 00:17:37,600
loading loading loading loading and
we'll meet server crashed out great

216
00:17:37,600 --> 00:17:41,230
loading loading loading enemy sir
crashing okay well that's not going to

217
00:17:41,230 --> 00:17:41,920
work

218
00:17:41,920 --> 00:17:46,059
that's my other exploit that was really
dumb and just use a nasty big heap spray

219
00:17:46,059 --> 00:17:47,460
work much better than that

220
00:17:47,460 --> 00:17:52,529
think so i was like let's let's not
let's not use that to think I don't

221
00:17:52,529 --> 00:17:57,149
think we have to do something else so I
was like what about the height and width

222
00:17:57,149 --> 00:18:01,949
they mentioned the video highlighting
the video within their paper but i can

223
00:18:01,950 --> 00:18:05,970
remember specifically what they said in
there but they they didn't end up using

224
00:18:05,970 --> 00:18:11,580
that for whatever reason and it turns
out that these metadata items can

225
00:18:11,580 --> 00:18:16,020
actually be controlled in a great way
and still be read there are some

226
00:18:16,020 --> 00:18:22,260
limitations to this technique but it's
it's not it's not something that you

227
00:18:22,260 --> 00:18:25,379
can't work around so that basically
there's some checking to make sure that

228
00:18:25,380 --> 00:18:29,700
certain values are not gigantic or
whatever in and then you can avoid that

229
00:18:29,700 --> 00:18:33,330
it's ok it's a lot better than the
double-precision floating-point numbers

230
00:18:33,330 --> 00:18:39,990
and so what we come up with was a new
technique here to you know we can change

231
00:18:39,990 --> 00:18:45,090
the size of a metadata I don't by
overriding only partially we can change

232
00:18:45,090 --> 00:18:48,149
the the type of it and call the type
confusion

233
00:18:48,149 --> 00:18:52,408
the only thing that's really tricky is
dealing with how the array has to be in

234
00:18:52,409 --> 00:18:53,039
order

235
00:18:53,039 --> 00:18:56,580
the vector has to be in order so it's
kind of like that you can see here in

236
00:18:56,580 --> 00:19:01,110
the bottom my my answer was just put
some ABC's up in the front

237
00:19:01,110 --> 00:19:04,020
even though they're not even user
support it doesn't matter as long as

238
00:19:04,020 --> 00:19:08,158
things are still in order and so

239
00:19:09,059 --> 00:19:12,570
oh yeah

240
00:19:12,570 --> 00:19:19,470
so in this case we changed the mine c
string to a high tag you can see there

241
00:19:19,470 --> 00:19:23,159
used to be a high tag but we got rid of
that high tag because we don't like that

242
00:19:23,159 --> 00:19:26,399
one that one says you know without 24
something that's not fun

243
00:19:26,399 --> 00:19:34,139
so we change that to a 32-bit integer
that has well it overrode the mine

244
00:19:34,140 --> 00:19:38,610
string so we didn't overwrite the piner
just means now the height value that we

245
00:19:38,610 --> 00:19:42,539
return when we read it from the html5
tag actually is the point value itself

246
00:19:42,539 --> 00:19:45,539
which you can imagine this not to

247
00:19:46,080 --> 00:19:47,510
it's not like

248
00:19:47,510 --> 00:19:52,850
a very same value but you get the whole
value so that's the important thing and

249
00:19:52,850 --> 00:19:58,040
it's very precise and we can combine
that with with other stuff like this

250
00:19:58,040 --> 00:20:03,620
HBC tag is actually an allocation that
you control the size of that's filled

251
00:20:03,620 --> 00:20:08,330
with entirely your control data so you
can allocate those and like the pointers

252
00:20:08,330 --> 00:20:12,110
of them so another interesting property
that i realized so first i'm writing

253
00:20:12,110 --> 00:20:15,860
this exploit and I'm like hey this isn't
going to work right like I'm gonna make

254
00:20:15,860 --> 00:20:19,699
this on the process a single file and
it's going to do all this stuff and then

255
00:20:19,700 --> 00:20:22,940
it will leave . and . it's gonna be
stale so I'm gonna end up with this

256
00:20:22,940 --> 00:20:28,640
crappy buffer that's you know maybe not
having what i wanted to have in it when

257
00:20:28,640 --> 00:20:32,720
I break it to address so i thought well
that won't be very reliable that's going

258
00:20:32,720 --> 00:20:37,400
to suck so I was like I just I just try
it anyway and see how reliable it is and

259
00:20:37,400 --> 00:20:39,260
then I figure out like oh hey

260
00:20:39,260 --> 00:20:44,180
actually when the browser talks to media
server they never disconnect from media

261
00:20:44,180 --> 00:20:47,150
server they just connect whenever they
need to initially and they stay

262
00:20:47,150 --> 00:20:51,620
connected and they do multiple requests
to me a server until they either media

263
00:20:51,620 --> 00:20:57,080
server crashes or until you close the
browser and so what that means is that

264
00:20:57,080 --> 00:21:02,149
no allocations are getting free so
everything stays there you get the

265
00:21:02,150 --> 00:21:06,140
pointers they're all completely valid
and also it's really bad for leaking

266
00:21:06,140 --> 00:21:10,490
memory so if you just wanna have a
JavaScript pages loads big file or and

267
00:21:10,490 --> 00:21:13,760
over again and eventually run me to meet
server memory or maybe even the whole

268
00:21:13,760 --> 00:21:20,030
device so so we know we can make a point
we know it'll be alive

269
00:21:20,030 --> 00:21:24,080
that's really that's really powerful
permanent so the question is how do we

270
00:21:24,080 --> 00:21:28,280
get a code . because if we're going to
do dynamic rock we need to know where

271
00:21:28,280 --> 00:21:32,270
some module is we need to know what that
module is so we can create a rope chain

272
00:21:33,560 --> 00:21:38,419
normal thing you do is like vtable but
as I mentioned before the reed primitive

273
00:21:38,420 --> 00:21:41,810
that you we had with the original
metaphor exploit doesn't really allow

274
00:21:41,810 --> 00:21:48,679
you to read the typical stuff so a
vector it is kinda i don't know if i

275
00:21:48,680 --> 00:21:50,780
have a gap year ago

276
00:21:50,780 --> 00:21:53,780
cool Mitch Berger signs

277
00:21:54,690 --> 00:21:59,640
so they've been useful met I've been
useful here but they're not going to

278
00:21:59,640 --> 00:22:03,330
help in this specific case because
metadata items never really pointed a

279
00:22:03,330 --> 00:22:10,679
coat there just as a very simple data
structure as you saw with 40 words and

280
00:22:10,680 --> 00:22:13,920
and that's really it you're never going
to see anything in there and the

281
00:22:13,920 --> 00:22:18,510
pointers that . off to whatever the data
items for those metadata items are they

282
00:22:18,510 --> 00:22:22,560
just point to just raw data and usually
control those so there's not gonna be

283
00:22:22,560 --> 00:22:28,500
any coke wearable so we can use these
directly but after a while I was looking

284
00:22:28,500 --> 00:22:32,340
around and I'm like hey these they have
all these different specializations of a

285
00:22:32,340 --> 00:22:37,560
vector and pull or vector implementation
and obviously it has virtual methods so

286
00:22:37,560 --> 00:22:42,270
that's great we want virtual something
with virtual methods so we have a table

287
00:22:42,270 --> 00:22:48,000
. there but the the first two fields are
the the table pointer and and then they

288
00:22:48,000 --> 00:22:54,990
have the same storage field and so am
storage is really like it is those items

289
00:22:54,990 --> 00:22:59,760
of you know 40 words there one after
another memory contiguous block of of

290
00:22:59,760 --> 00:23:04,230
the actual vector storage and so the
thing is whenever a vector is allocated

291
00:23:04,230 --> 00:23:10,800
and it's usually initialized with some
initial value like maybe just 20 in

292
00:23:10,800 --> 00:23:15,990
there or were they were they will
pre-allocate a certain amount saying

293
00:23:15,990 --> 00:23:19,620
like we expect we have at least 16 of
these or whatever and so that means we

294
00:23:19,620 --> 00:23:24,149
can't use the metaphor League technique
because we're always going to have the

295
00:23:24,150 --> 00:23:27,120
table . followed by a pointer to some
heat memory

296
00:23:27,120 --> 00:23:31,199
those are both numbers that usually are
starting with high boots that are you

297
00:23:31,200 --> 00:23:37,050
know very high like your f or whatever
and so the delete just won't work for

298
00:23:37,050 --> 00:23:42,750
them so I was like well the hell am I
going to do i need to leak free table so

299
00:23:42,750 --> 00:23:49,230
I keep looking and what I find this one
object that's a vector that's inside of

300
00:23:49,230 --> 00:23:55,320
sample iterator it's kind of like smack
in the middle of the object and it turns

301
00:23:55,320 --> 00:23:59,220
out they did not initialize this so they
initialize the domain object but they

302
00:23:59,220 --> 00:24:02,760
never reallocate the size of the array
that's actually never even used unless

303
00:24:02,760 --> 00:24:05,799
you have some other specific tags inside
the people

304
00:24:05,799 --> 00:24:10,480
file so that means that I'm storage is
no so I'm storages to follows know

305
00:24:10,480 --> 00:24:14,919
without being initialized that means now
I can leave the table . so that's a big

306
00:24:14,919 --> 00:24:19,869
win right we have everything we need we
can leak code . we can keep address we

307
00:24:19,869 --> 00:24:24,340
put stuff in memory that we can find out
where it is it stays there forever as

308
00:24:24,340 --> 00:24:30,340
long as the browser's alive so that's
all wonderful so then I i put it all

309
00:24:30,340 --> 00:24:36,730
together and what and built it you know
two-stage leak with the creates a rope

310
00:24:36,730 --> 00:24:40,389
chain from live stage fright itself
because that's where the sample error

311
00:24:40,389 --> 00:24:50,559
object list is implemented so SLR still
poses a small problem because in the rap

312
00:24:50,559 --> 00:24:55,570
chain we are going to kind of and
protect the the region of memory where

313
00:24:55,570 --> 00:24:59,859
are arbitrary code will be just as kind
of a robe stager we want to make it

314
00:24:59,859 --> 00:25:05,080
executable it's only read write it when
we get there and so we didn't know where

315
00:25:05,080 --> 00:25:17,139
that is so SLR still poses a small
problem but we also slide doesn't make

316
00:25:17,139 --> 00:25:18,158
sense to me right now

317
00:25:18,159 --> 00:25:25,749
yeah I

318
00:25:26,260 --> 00:25:31,210
I mean youyou so yes you can this one
actually used a large sheet spray it was

319
00:25:31,210 --> 00:25:36,520
about 16 minutes or something like that
and that ended up being super super

320
00:25:36,520 --> 00:25:42,190
predictable like you pretty much can get
in first drive but media server restarts

321
00:25:42,190 --> 00:25:46,540
anyway so even if you're wrong you just
try it and that's really cool it in the

322
00:25:46,540 --> 00:25:50,530
JavaScript you can actually with some
timing tricks notice any server crashes

323
00:25:50,530 --> 00:25:54,340
and then reset your process and do it
all over again which is pretty cool

324
00:25:55,480 --> 00:26:00,400
okay so uh the resulting exploit is
pretty fast and reliable

325
00:26:01,150 --> 00:26:04,840
I'm i really like happy with it i think
it could be better but we'll talk about

326
00:26:04,840 --> 00:26:05,740
that

327
00:26:05,740 --> 00:26:09,940
so the key explore details it's this has
been implemented in a display module I

328
00:26:09,940 --> 00:26:15,460
think that mess . is a great platform
for everyone to work together and also

329
00:26:15,460 --> 00:26:20,710
to enable administrators and other
people to test those those people may

330
00:26:20,710 --> 00:26:25,060
not always be good at writing exploits
or even running exploits but that's what

331
00:26:25,060 --> 00:26:29,020
makes it pretty easy for most people
especially like fancy ones they're just

332
00:26:29,020 --> 00:26:35,860
point click so that this module supports
29 targets it includes all nexus devices

333
00:26:35,860 --> 00:26:41,649
that were vulnerable that run 5 . x
meaning the ones that use gmail and it

334
00:26:41,650 --> 00:26:46,060
automatically selects a target based on
user agent which is you can see in red

335
00:26:46,060 --> 00:26:49,840
here that the devices are very
forthcoming about what version of

336
00:26:49,840 --> 00:26:55,090
Android they're running very
specifically yeah there's only three

337
00:26:55,090 --> 00:27:00,310
webrequest needed so you know a side
note about android device device

338
00:27:00,310 --> 00:27:04,480
diversity you know that some of the
android security guys of have been

339
00:27:04,480 --> 00:27:07,930
quoted as saying you know the device
diversity really helped some security

340
00:27:07,930 --> 00:27:12,130
helps you know prevent light scale
attacks and while there's some truth to

341
00:27:12,130 --> 00:27:18,730
that it i think the scaling and I've
done some work with scaling in this case

342
00:27:18,730 --> 00:27:26,770
the exploit debit it's not a serious
problem right so i have an SSD with 500

343
00:27:26,770 --> 00:27:30,220
gigs of uncompressed firmwares and I
just scan through and extract all I need

344
00:27:30,220 --> 00:27:34,330
and then it generates this module
actually so it's it's not like something

345
00:27:34,330 --> 00:27:35,179
you can't work

346
00:27:35,180 --> 00:27:41,600
another great side note this is it was
heard of the commander and compatibility

347
00:27:41,600 --> 00:27:47,870
definitions document i know i know i
know dave is you must have works there

348
00:27:47,870 --> 00:27:53,090
so so this is an excerpt from network
says hey you actually have to give

349
00:27:53,090 --> 00:27:55,250
everybody your full for more information

350
00:27:55,250 --> 00:27:59,420
that's great thank you guys might want
to remove those two lines their bull

351
00:27:59,420 --> 00:28:07,070
telling something like put a little
askew middle finger in harrison so or if

352
00:28:07,070 --> 00:28:11,330
you're if you're really parent you guys
might want to change your user agents so

353
00:28:11,330 --> 00:28:14,960
i'm actually not prepared to do a live
them because i hate the way that the

354
00:28:14,960 --> 00:28:23,480
screen and setup but i know i have a
windows somewhere that has stuff do we

355
00:28:23,480 --> 00:28:29,720
really want to try to figure out where
the window is now what we can do a live

356
00:28:29,720 --> 00:28:36,170
demo hey look I found this window it's
amazing it's on my screen that might not

357
00:28:36,170 --> 00:28:41,150
work i mean i'm pretty sure it will work
this exploit works way better than last

358
00:28:41,150 --> 00:28:45,860
year I was really disappointed last year
when i tried to to give the demo as the

359
00:28:45,860 --> 00:28:50,209
demo didn't work i hate public life
generals don't work

360
00:28:54,710 --> 00:29:02,990
uh-huh alright so the question is how am
I going to put this on the screen for

361
00:29:02,990 --> 00:29:12,800
you to see you and now and still be able
to type see ya

362
00:29:13,330 --> 00:29:16,389
find a window where oh god here we go

363
00:29:18,220 --> 00:29:23,620
maybe it's on your screen

364
00:29:23,620 --> 00:29:33,429
yeah it's on your screen alright escape
right here

365
00:29:34,420 --> 00:29:49,390
maybe we should have done that from the
beginning

366
00:29:50,080 --> 00:29:53,080
can you guys see that

367
00:29:54,100 --> 00:30:02,469
can you read it in the back bigger
enhance about that is a big enough need

368
00:30:02,470 --> 00:30:10,630
some new glasses so it so this uses the
nu-metal payload i love it it's great

369
00:30:10,630 --> 00:30:16,600
and it's so thankful to the to Adam and
Brent for putting into work for that by

370
00:30:16,600 --> 00:30:20,469
the way Adam and Brian have a very
different approach to miss Boyd dev they

371
00:30:20,470 --> 00:30:23,740
actually are like hey look somebody
already wrote a library to do all this

372
00:30:23,740 --> 00:30:26,740
shit for us let's use it like wow that's
pretty smart

373
00:30:27,340 --> 00:30:30,459
you mean we don't have to write
everything in Peru be all over again

374
00:30:31,150 --> 00:30:36,130
it's great so the modules up and running
i need to go to this window we don't

375
00:30:36,130 --> 00:30:38,080
want to have that device anymore

376
00:30:38,080 --> 00:30:43,929
let's go to this device so i'm going to
run a command that's just going to turn

377
00:30:43,930 --> 00:30:50,260
the screen on interior that's what it
does at least and then we'll run this

378
00:30:50,260 --> 00:30:54,370
shell script for this python script just
drench this command and tells the

379
00:30:54,370 --> 00:30:57,639
browser to open to this URL and it
doesn't work of course figures

380
00:30:58,960 --> 00:31:07,630
let's do service enable Wi-Fi that's
probably the problem why didn't it work

381
00:31:07,630 --> 00:31:15,490
i did wrong so let's try again

382
00:31:15,490 --> 00:31:18,490
your browser is probably open with some
really ugly error message on my desk at

383
00:31:18,490 --> 00:31:19,210
home right now

384
00:31:19,210 --> 00:31:22,600
hey working eh oh you fucker

385
00:31:22,600 --> 00:31:30,070
seriously so much for to web request I
think there's something about demo gods

386
00:31:30,070 --> 00:31:32,379
and recounted this isn't going

387
00:31:32,380 --> 00:31:43,750
oh no what the hell now state robbed a
novel ok what these are not my commands

388
00:31:43,750 --> 00:31:54,460
what do these commands how I had some
commands that I used earlier to like us

389
00:31:54,460 --> 00:32:02,560
and now we're gone now I'm not packing
food like packing food was it when did I

390
00:32:02,560 --> 00:32:11,169
run that command like 10 years ago I
just do it over again you know so gps

391
00:32:11,170 --> 00:32:18,820
day tre no here

392
00:32:19,750 --> 00:32:27,610
yeah I had this all set up and I somehow
screwed up as an awesome so you know

393
00:32:27,610 --> 00:32:30,459
that exploit was about to work and then
it couldn't metasploit couldn't find a

394
00:32:30,460 --> 00:32:33,460
rope chain it was going to give to the
yep that's bad

395
00:32:36,310 --> 00:32:36,678
let's see

396
00:32:36,679 --> 00:32:41,360
it works again always look to request
and then the last request the last

397
00:32:41,360 --> 00:32:44,539
request happened twice because once
comes from the browser once comes from

398
00:32:44,539 --> 00:32:45,769
the media server

399
00:32:45,769 --> 00:32:53,029
hey that now we are media server

400
00:32:53,029 --> 00:32:57,710
yeah we can't really do a lot we can we
can look at stuff but only one that we

401
00:32:57,710 --> 00:33:03,619
can't let go and / data or in look so
another part of what i've done is i put

402
00:33:03,619 --> 00:33:07,070
couple of Colonel exploits into metal
just kind of like compiled a min

403
00:33:07,700 --> 00:33:11,029
yeah and this one it just runs a bolt
and if one fails that runs the other one

404
00:33:11,029 --> 00:33:15,889
but this one always works so and is run
get your ID and i think i think actually

405
00:33:15,889 --> 00:33:20,418
i would run the shell command like is
everybody loves a real shell but uh the

406
00:33:20,419 --> 00:33:23,450
shell commands kind of funky so we have
to do it a little bit differently when

407
00:33:23,450 --> 00:33:30,710
to use this execute you know what screw
you all his of something weird it's like

408
00:33:30,710 --> 00:33:36,679
using old history of money but anyway uh
I think if we do execute also list the

409
00:33:36,679 --> 00:33:40,730
shells is not standard on on Android the
path to it so we have to do it like this

410
00:33:40,730 --> 00:33:44,539
and what is it like channelized i/o and
interact with it

411
00:33:45,049 --> 00:33:54,889
yeah so yeah so no the paths creates an
export system being a college student

412
00:33:54,889 --> 00:34:01,729
pass then we can type ID yeah so that's
a good demo and thanks again to the best

413
00:34:01,730 --> 00:34:02,840
way guys

414
00:34:02,840 --> 00:34:08,089
Adam and Brent for like making all this
stuff work really well being pretty

415
00:34:08,089 --> 00:34:13,730
being a receptive to my bug reports and
in requests and complaints and not

416
00:34:13,730 --> 00:34:19,250
making me write code myself so you can
see selinux has been disabled we can

417
00:34:19,250 --> 00:34:23,030
pretty much do whatever one at this
point with this device we could RM it

418
00:34:23,030 --> 00:34:28,579
but that's not very nice so i will keep
the exploit running and it will go back

419
00:34:28,579 --> 00:34:30,349
to slides we can find them

420
00:34:30,349 --> 00:34:41,599
so what about that one window where it's
a mirroring ok so let's not let's not

421
00:34:41,599 --> 00:34:43,590
marry displays anymore

422
00:34:43,590 --> 00:34:47,700
hey the things up all damn it would go
let them

423
00:34:49,889 --> 00:34:55,739
ok now but where is the thing that you
guys want to see you here is my cursor

424
00:34:55,739 --> 00:34:58,770
over there so I'm gonna hit some buttons

425
00:34:58,770 --> 00:35:02,190
hey I'm getting good at this

426
00:35:02,190 --> 00:35:06,330
alright so that was a live demo we're
gonna have to go quick because we're on

427
00:35:06,330 --> 00:35:11,520
time so you know that's next devices
that's great but what about samsung

428
00:35:11,520 --> 00:35:15,300
samsung is like everybody's android
right like nobody uses anything samsung

429
00:35:15,300 --> 00:35:23,580
is that right only if you have a note 7
we just have to charge it don't drown

430
00:35:23,580 --> 00:35:29,819
plane so I so I was like well hey we
need to make it work on samsung device

431
00:35:29,820 --> 00:35:34,200
it can even be done it was mentioned in
India metaphor paper that they thought

432
00:35:34,200 --> 00:35:35,370
it could be done

433
00:35:35,370 --> 00:35:38,700
I when I talk to the guys who wrote that
paper they were like yeah well we never

434
00:35:38,700 --> 00:35:41,730
really got to work we've got some things
happening but it wasn't really what we

435
00:35:41,730 --> 00:35:42,630
wanted

436
00:35:42,630 --> 00:35:46,440
ok that's interesting and cool but
that's not what i want i want to work so

437
00:35:46,440 --> 00:35:52,650
i got this crappy samsung galaxy s5
verizon version off of ebay it turns out

438
00:35:52,650 --> 00:35:56,820
nobody wants these surprising devices i
think because they lock together or

439
00:35:56,820 --> 00:36:01,770
something should be like that so they're
very easy to get and reporting it was

440
00:36:01,770 --> 00:36:05,310
not easy required a lot of reverse
engineering because at any Android

441
00:36:05,310 --> 00:36:10,380
ecosystem new homes modify android
heavily you know did with the nexus

442
00:36:10,380 --> 00:36:14,460
devices i could compile symbols and like
do like source-level debugging and also

443
00:36:14,460 --> 00:36:19,170
the great stuff but that's totally not
possible with Samsung device also

444
00:36:19,170 --> 00:36:22,590
debugging as hard as no symbols in any
of the binaries and that makes to be

445
00:36:22,590 --> 00:36:26,430
pretty shitty it doesn't know whether
code is done motor are mode because

446
00:36:26,430 --> 00:36:29,640
symbols are missing and so it puts the
wrong kind of break points in places and

447
00:36:29,640 --> 00:36:34,980
crashing all over the place it's awful
end up using android android server from

448
00:36:34,980 --> 00:36:39,360
my pro which is not also which is also
not super awesome because it's like this

449
00:36:39,360 --> 00:36:43,830
heavy gooey and it's doing remote
through his own protocol but it does

450
00:36:43,830 --> 00:36:48,240
work so I managed to get there it's so
the first thing i did of course was

451
00:36:48,240 --> 00:36:50,410
trying to get the module to like
pressure

452
00:36:50,410 --> 00:36:55,089
just that's funding put some put some
breakpoint in the lipsticks write code

453
00:36:55,089 --> 00:36:57,339
where I wanted to get and I found out
hey I didn't even get there

454
00:36:57,339 --> 00:37:00,400
that's not good that cannot be good at
all

455
00:37:00,400 --> 00:37:05,230
so it turns out that Samsung actually
has two separate metadata processing

456
00:37:05,230 --> 00:37:09,910
libraries and they use different one
depending on my type or the way that the

457
00:37:09,910 --> 00:37:15,430
the metadata of the media is loaded into
the browser and so I actually require

458
00:37:15,430 --> 00:37:21,368
changing some of the code around using
this is filereader object with read a

459
00:37:21,369 --> 00:37:26,680
treatise data URL instead of using the
URL that create object URL javascript to

460
00:37:26,680 --> 00:37:32,230
actually get the media content itself
and that if we went the other way it

461
00:37:32,230 --> 00:37:34,900
would go through this crappy code path
which would use this other proprietary

462
00:37:34,900 --> 00:37:37,809
library which by the way is very
interesting i just never looked into it

463
00:37:37,809 --> 00:37:43,390
it's more interesting to me that they
have to they're going to replace it was

464
00:37:43,390 --> 00:37:46,150
replaced

465
00:37:46,150 --> 00:37:49,510
yeah so what else

466
00:37:49,510 --> 00:37:54,490
samsung also modified upstate right
clothes stores modifications live stage

467
00:37:54,490 --> 00:37:57,520
right one particular change was very
interesting

468
00:37:57,520 --> 00:38:03,099
usually in the metadata for processing
and epic for extractor it goes through

469
00:38:03,099 --> 00:38:06,760
in anytime and sees any error like for
example when we try to read that big

470
00:38:06,760 --> 00:38:10,539
blob of data to end of the file in it
and it fails to read the amount we've

471
00:38:10,539 --> 00:38:15,220
told it to read it only reads a little
bit and then fails with an error that

472
00:38:15,220 --> 00:38:18,788
will cascade all the way back to the
very beginning of the processing of the

473
00:38:18,789 --> 00:38:24,069
impact for code and you know it always
error all the way out and so in one of

474
00:38:24,069 --> 00:38:28,779
the things that Samsung change was in
this track to Adam when they're

475
00:38:28,779 --> 00:38:32,770
processing it they they were like well
hey if there's an error while processing

476
00:38:32,770 --> 00:38:38,020
a track its okay its return okay so that
means you can have tracks to contain

477
00:38:38,020 --> 00:38:41,829
tracks and a whole bunch of tracks and
every single track will then trigger the

478
00:38:41,829 --> 00:38:42,940
vulnerability over and over

479
00:38:42,940 --> 00:38:48,069
unfortunately because the way we control
the data that's written you end up

480
00:38:48,069 --> 00:38:51,009
getting like all the rest of the file
and each one of those overflows and

481
00:38:51,010 --> 00:38:54,099
that's not fun put still it's still
interesting

482
00:38:57,099 --> 00:39:00,520
yeah so I didn't ever using that but I
still thought was interesting so other

483
00:39:00,520 --> 00:39:04,480
other stuff with just minor adjustments
I needed to like you know some of the

484
00:39:04,480 --> 00:39:07,960
objects eyes were changed because they
added another member variable or

485
00:39:07,960 --> 00:39:11,740
something like that they added a bunch
of different metadata items that they

486
00:39:11,740 --> 00:39:18,220
just initialized from nothing in the
hard-coded in the code and so that that

487
00:39:18,220 --> 00:39:22,029
made the vector over right technique a
little bit more complicated if you look

488
00:39:22,030 --> 00:39:26,589
at the Metasploit module you'll see like
some various obvious like you know hey

489
00:39:26,589 --> 00:39:30,460
if it's samsung and do things a little
bit differently so in the end i managed

490
00:39:30,460 --> 00:39:34,450
to work get to work i had a separate
branch in my dev tree and I like

491
00:39:34,450 --> 00:39:37,750
merchant together and it will now it
works on both so let's see if we can

492
00:39:37,750 --> 00:39:47,440
make samsung device kale all not over
there again is it i'm bringing this over

493
00:39:47,440 --> 00:39:48,760
here this is mine

494
00:39:48,760 --> 00:39:58,869
I mr. how did I missile you settle some
of us amazon i look at that i get to see

495
00:39:58,869 --> 00:39:59,650
it now

496
00:39:59,650 --> 00:40:04,630
no it's okay work all right it worked so
oh look I got another meterpreter

497
00:40:04,630 --> 00:40:06,930
session that's creek

498
00:40:06,930 --> 00:40:13,319
thanks that's the JavaScript detecting a
media server crashed and just like

499
00:40:13,319 --> 00:40:19,410
running it again very nice persistence
built into the exploit so that we're

500
00:40:19,410 --> 00:40:24,000
gonna switch here to this sm g9v and the
last time I try to do this demo it also

501
00:40:24,000 --> 00:40:28,109
failed but it wasn't it was because i
was getting a prompt on the screen that

502
00:40:28,109 --> 00:40:31,650
said like this is the first time you ran
chrome are you sure you want to like my

503
00:40:31,650 --> 00:40:37,349
old man i think i fix that now so it
can't we're going to go onto the oh no

504
00:40:37,349 --> 00:40:40,349
that's not good

505
00:40:41,369 --> 00:40:45,960
oh come on now now let's removed

506
00:40:48,000 --> 00:40:53,010
okay well I guess we're not going to do
them ones on the Samsung device because

507
00:40:53,010 --> 00:40:57,540
it's not plugged into my computer at
home I know it's plugged in it just must

508
00:40:57,540 --> 00:41:03,990
have flipped out and sometimes those
guys to take out maybe I can call my mom

509
00:41:03,990 --> 00:41:10,259
and ask her like tickle it to hate moms
can you go like push that phone around

510
00:41:10,260 --> 00:41:12,299
like unplug it plug it back in

511
00:41:12,299 --> 00:41:15,990
now we'll do it later so I'm sorry I
can't give you the demo on that but

512
00:41:15,990 --> 00:41:20,729
trust me it looks exactly the Freak
insane the differences that says SMG I

513
00:41:20,730 --> 00:41:24,569
heard be instead of whatever you know
Nexus device that's really that's really

514
00:41:24,569 --> 00:41:34,200
the only difference so let's see what we
got so future work conclusions let's

515
00:41:34,200 --> 00:41:35,640
wrap up let's get outta here

516
00:41:35,640 --> 00:41:43,049
so exploit to do I've actually started
this first 1i mother mother but I do

517
00:41:43,049 --> 00:41:47,700
care you guys will need to see some
slides or and let me maybe don't you

518
00:41:47,700 --> 00:41:53,700
there we'll all right thank you think
that that was great you don't even call

519
00:41:53,700 --> 00:41:55,890
me a second

520
00:41:55,890 --> 00:42:02,730
we need more beer in you so I deal Malik
devices that's first time I to do i'm

521
00:42:02,730 --> 00:42:08,460
actually started this already i set up a
dev environment it looks promising i had

522
00:42:08,460 --> 00:42:13,589
a file at one point that i tested on
Android 4424 device and it was already

523
00:42:13,589 --> 00:42:14,470
crashing with

524
00:42:14,470 --> 00:42:19,959
bc control so that's really really
promising so you know the thing with

525
00:42:19,960 --> 00:42:25,390
android 4.4 of 44 or 4x4 that for ya

526
00:42:26,230 --> 00:42:33,520
which is a kit kat they that actually is
still like nearly I think forty percent

527
00:42:33,520 --> 00:42:38,320
of the android device distribution if
you trust Google members and it's still

528
00:42:38,320 --> 00:42:43,810
used on a lot of like if you go to
walgreens or something and you go buy a

529
00:42:43,810 --> 00:42:48,730
prepaid phone there's a high likelihood
that has kitkat on it so that's really a

530
00:42:48,730 --> 00:42:52,599
high-priority thing I think for for the
next for future work on this exploit

531
00:42:52,599 --> 00:42:57,880
also supporting additional devices i
have a like high-low samsung phones on

532
00:42:57,880 --> 00:43:01,420
my desk that I bought and I just need to
like slug each one in and run the thing

533
00:43:01,420 --> 00:43:08,740
and get the offsets it's not really a
hard work is it's just tedious work so i

534
00:43:08,740 --> 00:43:12,129
also have theorized that it's possible
to get rid of the heap spring there was

535
00:43:12,130 --> 00:43:16,750
a project zero exploit that came out
like last week or so and that one works

536
00:43:16,750 --> 00:43:20,200
even faster than I explained so I'm like
oh coolie and he doesn't use the spray

537
00:43:20,200 --> 00:43:23,618
and I'm like wow that's great so i know
i'm pretty sure it's possible to do it

538
00:43:23,619 --> 00:43:27,790
was not exactly sure how to do at this
point and as he mentioned it's really

539
00:43:27,790 --> 00:43:30,609
interesting because he publishes blog
post and he says all these things and

540
00:43:30,609 --> 00:43:34,000
I'm like hey i just did a talk on that
like last week

541
00:43:34,000 --> 00:43:37,930
that's great not the bug but all the
techniques so it's pretty neat that he

542
00:43:37,930 --> 00:43:42,310
came up with all the same things in
total isolation but i think i'm pretty

543
00:43:42,310 --> 00:43:46,570
sure that you could put all this exploit
into just one javascript file you don't

544
00:43:46,570 --> 00:43:51,220
need medicine boy other than to catch
your show for warriors you could you

545
00:43:51,220 --> 00:43:52,720
know you could do something else

546
00:43:52,720 --> 00:43:57,009
whatever you want but uh i think i'm
pretty sure that you could do it all the

547
00:43:57,010 --> 00:44:03,700
JavaScript you don't actually need to
make I don't think you even need to make

548
00:44:03,700 --> 00:44:07,629
requests to a web server i think you can
put the media directly in the JavaScript

549
00:44:07,630 --> 00:44:11,650
yeah i mean you can manipulate it you
can do some more double soda .

550
00:44:11,650 --> 00:44:14,320
prestigious w really want to hate your
life but

551
00:44:14,320 --> 00:44:18,700
don't do that i recommend a rainbow
first those are nice

552
00:44:18,700 --> 00:44:24,339
so uh other to do like I really take
that system server is a big week . and

553
00:44:24,340 --> 00:44:26,740
android right now it's been that way for
a long time

554
00:44:26,740 --> 00:44:31,149
unfortunately has not been a ton of
people really picking out a part i wish

555
00:44:31,150 --> 00:44:36,310
somebody would really just take that on
and go go nuts with it in the big thing

556
00:44:36,310 --> 00:44:40,420
there is that shared address space with
all the acts on the system so any app

557
00:44:40,420 --> 00:44:45,310
that you install I had it knows exactly
where some various pointers are a given

558
00:44:45,310 --> 00:44:49,990
system server so that's a really weak
situation and and also system server

559
00:44:49,990 --> 00:44:55,569
runs with the highest privileges you can
have that are not route basically if you

560
00:44:55,570 --> 00:44:59,170
ever going to read through a whole bunch
of different of Android code have lots

561
00:44:59,170 --> 00:45:03,610
of things where it's like if user ID
equals 1000 then don't do any

562
00:45:03,610 --> 00:45:06,520
authentication don't do any checking let
them do whatever they want

563
00:45:06,520 --> 00:45:13,240
wow so yeah somebody look at another to
do is to mitigate this risk based

564
00:45:13,240 --> 00:45:16,540
technique that was used in the first
exploit that i wrote first for the older

565
00:45:16,540 --> 00:45:21,640
states right all on the older device and
i'm pretty sure that it's possible to to

566
00:45:21,640 --> 00:45:26,170
mitigate the that technique using some
kind of encoded water or something but

567
00:45:26,170 --> 00:45:29,620
it it's a some ugly c++ code so it
hasn't been done yet

568
00:45:30,190 --> 00:45:33,670
so in conclusion I think exploiting the
browser on android is pretty awesome

569
00:45:33,670 --> 00:45:37,090
exploiting media server through the
browser is pretty awesome you can do in

570
00:45:37,090 --> 00:45:40,600
flakes you have all these lifetime
issues are automatically solve for you

571
00:45:40,600 --> 00:45:43,870
by the way the chrome does
communications with the brother oh by

572
00:45:43,870 --> 00:45:47,020
the way I heard that chrome no longer
talks to media server on android which

573
00:45:47,020 --> 00:45:50,590
is going to put it feels like we're just
gonna do it ourselves

574
00:45:50,590 --> 00:45:58,240
fuck the android guys so in conclusion
obviously in police are workable they

575
00:45:58,240 --> 00:46:02,620
work really well you can when you do
browser stuff you can hide in HTTPS so

576
00:46:02,620 --> 00:46:05,470
that gets around you want me to get the
hell out

577
00:46:05,470 --> 00:46:09,399
get the fuck out that's interesting i
got four and a half minutes right

578
00:46:09,400 --> 00:46:15,109
one okay one alright uh skip the
slaughter them work

579
00:46:15,109 --> 00:46:19,130
fragmentation is adorned but next less
so for exploit Deb it's a lot worse or

580
00:46:19,130 --> 00:46:22,339
the thorn for those guys who are trying
to make apps that render properly on

581
00:46:22,339 --> 00:46:26,480
everyone's devices with different screen
sizes and stuff for your exploits each

582
00:46:26,480 --> 00:46:30,109
offsets you write a small little script
that runs on all the firmwares and you

583
00:46:30,109 --> 00:46:34,220
have all the office it's great you just
write one piece of code run it

584
00:46:34,220 --> 00:46:38,029
excellent the hard part is you need to
gather all the firmwares need to

585
00:46:38,029 --> 00:46:40,249
uncompress them and have like a lot of
files

586
00:46:40,249 --> 00:46:46,038
ok whatever we have hard drives right
lots of big ones so patch stuff faster

587
00:46:46,039 --> 00:46:49,549
they stay for helping with that and all
the other guys

588
00:46:50,119 --> 00:46:53,299
android and raises the bar something I
didn't mention is is they actually took

589
00:46:53,299 --> 00:46:58,279
media server and split into multiple
components so now they have this way

590
00:46:58,279 --> 00:47:02,029
that this code will be handled within a
thing called media extractor and media

591
00:47:02,029 --> 00:47:05,359
extractor actually has very little
privileges e it still has internet

592
00:47:05,359 --> 00:47:08,900
privileges so you can still can't
connect back but it no longer has

593
00:47:08,900 --> 00:47:13,249
privileges to make memory read write
next cubicle at all so that makes things

594
00:47:13,249 --> 00:47:15,709
really hard

595
00:47:15,710 --> 00:47:19,099
soj Malik and conclusion is very bad
don't use it please

596
00:47:19,640 --> 00:47:23,118
I cannot believe that they have not
figured out a way to make this a little

597
00:47:23,119 --> 00:47:28,579
bit harder to exploit i like to give the
example like if there were a slider and

598
00:47:28,579 --> 00:47:32,329
on one side you had performance and the
other side you had security JDM

599
00:47:32,329 --> 00:47:37,339
allocates all the way to performance so
they're like fuck security in fact like

600
00:47:37,339 --> 00:47:42,380
the order of allocations and when you
free and reallocate stuff is like 100

601
00:47:42,380 --> 00:47:45,499
percent deterministic there's just
terrible

602
00:47:46,069 --> 00:47:50,450
so that way it is hereby released it was
released in the previous talk

603
00:47:50,960 --> 00:47:56,269
well well James and everybody was doing
their account all it is on its in a poll

604
00:47:56,269 --> 00:48:01,729
request i tweeted about it so it should
hopefully be entry whenever somebody

605
00:48:01,730 --> 00:48:04,730
like reviews it and thinks it's good
enough to commit

606
00:48:06,440 --> 00:48:11,539
yeah so I hope that people will get
involved in this exploit I try to put it

607
00:48:11,539 --> 00:48:14,480
to new devices i think it's a great
opportunity to learn about android

608
00:48:14,480 --> 00:48:17,900
exploitation a lot of the hard works
been done for you

609
00:48:17,900 --> 00:48:21,010
I think that this exploit could easily
be adapted with

610
00:48:21,010 --> 00:48:23,590
the newer vulnerability that was
released last week to make an even newer

611
00:48:23,590 --> 00:48:29,440
mess . module for a new vulnerability
just this vulnerability rolled down so I

612
00:48:29,440 --> 00:48:32,440
yeah I think there's a lot of
opportunity for people to get involved

613
00:48:32,440 --> 00:48:36,100
in and learn some stuff so thanks for
your time everybody i guess we ran out

614
00:48:36,100 --> 00:48:39,940
of time for questions that come up here
and jump on me and give me a hug or I

615
00:48:39,940 --> 00:48:42,370
got this

616
00:48:42,370 --> 00:48:47,170
thank you

617
00:48:47,170 --> 00:48:48,640
so you can reach out

