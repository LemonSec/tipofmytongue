1
00:00:00,000 --> 00:00:13,860
12 years old so this talk i have lined
up today is going to i partly be about

2
00:00:13,860 --> 00:00:18,150
the research I conducted for six months
on the RTF spec and some things I want

3
00:00:18,150 --> 00:00:25,229
about it that would be really useful for
both Blue Team and Red Team like my

4
00:00:25,230 --> 00:00:30,179
favorite slide the slider I talk about
myself I not currently i serve as an

5
00:00:30,179 --> 00:00:34,589
engineer on xvideos ati team so we do a
bunch of exploit development and malware

6
00:00:34,590 --> 00:00:41,280
analysis probably su graduate so I know
I got some friends here today support me

7
00:00:41,280 --> 00:00:47,789
appreciate all for showing up and I
definitely love CTFs Heydrich have some

8
00:00:47,789 --> 00:00:56,370
so I mentioned there's gonna kind of be
two elements to this right

9
00:00:56,370 --> 00:01:00,660
Blue Team and Red Team so for all my
blue team friends here's the key points

10
00:01:00,660 --> 00:01:03,599
that I think that you're going to get
from this and that's going to be kind

11
00:01:03,600 --> 00:01:08,159
understanding how to analyze malicious
documents the capabilities of red flags

12
00:01:08,159 --> 00:01:12,930
look for so those of you that are may be
responsible for writing signatures

13
00:01:12,930 --> 00:01:20,159
hardening desktops right i think you'll
you'll get a lot from this now if you're

14
00:01:20,159 --> 00:01:24,900
on my favorite team the red team key
points here going to be obvious creation

15
00:01:24,900 --> 00:01:29,909
techniques so I've heard uh some testing
friends complained about hey you know

16
00:01:29,909 --> 00:01:33,869
what we're supposed to do now that
macros are all locked down pretty well

17
00:01:33,869 --> 00:01:37,470
like what other options do we have and I
think will quickly find out that the RTF

18
00:01:37,470 --> 00:01:41,789
spec provide some options for you to
still be effective in your engagements

19
00:01:41,790 --> 00:01:46,710
for those in vulnerability research will
go ahead and actually revisit the work

20
00:01:46,710 --> 00:01:51,658
that I've done and I just you know
laughs together at how Microsoft

21
00:01:51,659 --> 00:01:57,030
literally Hindu the blueprint to finding
vulnerabilities i will finish up with

22
00:01:57,030 --> 00:02:01,590
some exploitation techniques and ideal
that there was a title change talks

23
00:02:01,590 --> 00:02:04,560
about exfiltration i'm going to talk
more about like the possibilities you

24
00:02:04,560 --> 00:02:07,560
know when you're coming up with a talk
titled it's like everything needs to

25
00:02:07,560 --> 00:02:13,170
kind of flow and I'm so de case for
exploration yeah it's possible but how

26
00:02:13,170 --> 00:02:19,649
school is it well it's not for you to
decide so that said i will talk about

27
00:02:19,650 --> 00:02:23,670
some of the features that RTF supports
it's pretty interesting so you can like

28
00:02:23,670 --> 00:02:28,559
to find your own custom variables it
supports a holy object linking and

29
00:02:28,560 --> 00:02:34,260
embedding I you actually have the
ability to even query databases so when

30
00:02:34,260 --> 00:02:39,569
I saw the mail merge functionality so
maybe old male administrators are

31
00:02:39,569 --> 00:02:42,869
probably more familiar with this I was
like that's crazy i didn't know that I

32
00:02:42,870 --> 00:02:48,600
could actually perform a query to reach
out to either a flat file or database

33
00:02:48,600 --> 00:02:51,450
and pull information back and record it

34
00:02:51,450 --> 00:02:55,048
I you know the rest of this stuff over
here is kind of you know what you would

35
00:02:55,049 --> 00:03:01,739
expect of some type of feature rich
markup language for those of you that

36
00:03:01,739 --> 00:03:04,560
are you know maybe not

37
00:03:04,560 --> 00:03:08,880
red or blue team but it kind of affects
us all like why should we all care we

38
00:03:08,880 --> 00:03:13,019
see this a lot fishing campaign so
previously i worked at a couple banks

39
00:03:13,019 --> 00:03:18,030
and I mean fishing is just the the way
the bad guys when right it's the path of

40
00:03:18,030 --> 00:03:21,540
least resistance and I think it always
will be for quite some time to come

41
00:03:23,040 --> 00:03:28,078
its roots are pretty old so RTF as
aspect goes back to nineteen

42
00:03:28,079 --> 00:03:34,709
eighty-seven so like a year after I was
born and it's it's one of those like

43
00:03:34,709 --> 00:03:38,519
James I don't think too many people
focus on anymore because we already have

44
00:03:38,519 --> 00:03:42,150
microsoft he has a new standard for you
which they like to you save and use

45
00:03:42,150 --> 00:03:47,370
documents and as we'll see later has a
has a pretty wide attack surface so to

46
00:03:47,370 --> 00:03:53,280
give you an idea sorry to give you an
idea of what an RTF document looks like

47
00:03:53,280 --> 00:03:56,970
it's pretty easy to understand so for
contrast here i thought i would take

48
00:03:56,970 --> 00:04:01,560
something I i think most of us might be
familiar with HTML and and show you that

49
00:04:01,560 --> 00:04:07,140
this is what you know a hello world in
bold would look like while also

50
00:04:07,140 --> 00:04:11,910
including a picture of a cat and then if
we wanted to translate that into how we

51
00:04:11,910 --> 00:04:17,039
look for the RTF spec it would look as
we see at the bottom so key things to

52
00:04:17,039 --> 00:04:20,099
kind of take note of the

53
00:04:20,920 --> 00:04:28,120
uh magic file header so backslash RTF
and then a version number we have a

54
00:04:28,120 --> 00:04:33,100
backslash beaded just say hey we're
going to sorry hung tran like dodge out

55
00:04:33,100 --> 00:04:39,940
of your way back / b2 say we'd like to
bowl this text hello world and finally

56
00:04:39,940 --> 00:04:50,050
have a picture object so to jump right
into the evasions I i started with

57
00:04:50,050 --> 00:04:53,860
innovations because for our product we
actually have to take some type of

58
00:04:53,860 --> 00:04:58,300
exploit we have to show our customers
like how many different ways can we make

59
00:04:58,300 --> 00:05:04,750
this look different yet still achieve
the the the same result so i did a study

60
00:05:04,750 --> 00:05:09,700
I went and grabbed all the RTF document
that could from the beginning a year

61
00:05:09,700 --> 00:05:15,400
it's about the end of june and the
evasion test was file extension

62
00:05:15,400 --> 00:05:22,239
tampering so i'm sure many of you have
seen this a lot where I it's it's really

63
00:05:22,240 --> 00:05:28,870
an RTF document but the extension says .
dog what you can actually do is are

64
00:05:28,870 --> 00:05:33,820
starting to talk about the study first
is most of the extensions that were RTF

65
00:05:33,820 --> 00:05:38,770
documents were actually all . doc and
I'm thinking that maybe people are more

66
00:05:38,770 --> 00:05:42,549
familiar with it you know easy to
associate with maybe some people don't

67
00:05:42,550 --> 00:05:47,230
know what an RTF extension is about a
hundred of them were actually just RTF

68
00:05:47,230 --> 00:05:52,540
extensions less than 10 or docx which
that's not gonna work and there are 300

69
00:05:52,540 --> 00:05:55,540
other random extensions that really
didn't seem to do anything because

70
00:05:55,540 --> 00:06:00,550
windows by default when you install
won't actually associate these other

71
00:06:00,550 --> 00:06:05,860
file extensions with microsoft word so I
decided to go ahead and look at what are

72
00:06:05,860 --> 00:06:09,130
all the different ways that we could
possibly just tamper with that one piece

73
00:06:09,130 --> 00:06:13,870
to possibly gain some new ground so
there could be like get your mail

74
00:06:13,870 --> 00:06:14,980
gateway border

75
00:06:14,980 --> 00:06:18,610
hey we're going to maybe drop certain
types of file extension so you can

76
00:06:18,610 --> 00:06:27,730
literally go ahead and rename an RTF
document to doc . wbk for workbook and

77
00:06:27,730 --> 00:06:32,200
not ways and it's still going to go
ahead and run your RTF failing

78
00:06:32,200 --> 00:06:39,340
the next thing I looked at is Magic file
tampering so at the beginning we saw it

79
00:06:39,340 --> 00:06:44,530
was backslash RTF well we rely on you
know these magic file headers or magic

80
00:06:44,530 --> 00:06:50,320
numbers if you will to help understand
what type of file is going to be so it's

81
00:06:50,320 --> 00:06:54,610
funny because we'll see this later that
the specification says that needs to say

82
00:06:54,610 --> 00:06:59,920
backslash RTF followed by a version
number however in Microsoft Word it

83
00:06:59,920 --> 00:07:05,530
actually only requires backsplash RT so
this far is I you know what can be

84
00:07:05,530 --> 00:07:09,580
gained from this for the blue team here
let's let's already look at now changing

85
00:07:09,580 --> 00:07:15,550
what our magic file print or a magic
follow header looks like another thing

86
00:07:15,550 --> 00:07:21,280
that I looked at is like using mixed
case and not really gonna try to beat

87
00:07:21,280 --> 00:07:24,849
that I want to death because i think
these days a lot of our detection

88
00:07:24,850 --> 00:07:27,610
technologies are really good at looking
at whether or not you decided to

89
00:07:27,610 --> 00:07:33,040
uppercase or lowercase something where I
i was able to get some big wins as far

90
00:07:33,040 --> 00:07:39,190
as bypassing things is in regards to
evasions are sorry coatings for those of

91
00:07:39,190 --> 00:07:43,600
you familiar with URL encoding you're
used to using like % 41 to represent an

92
00:07:43,600 --> 00:07:50,080
a or if it's wrl encoding percent 2541
well the RTS back also supports unicode

93
00:07:50,080 --> 00:07:57,250
index encoding and you can automatically
see it by one is unicode backslash you

94
00:07:57,250 --> 00:08:01,810
followed by four digits and protects
backslash the apostrophe and two digits

95
00:08:01,810 --> 00:08:05,860
to give you an idea of what that looks
like in the wild

96
00:08:05,860 --> 00:08:12,370
we have just a while okay I already know
you guys can't see that sorry that

97
00:08:12,370 --> 00:08:15,340
looked a lot bigger

98
00:08:15,340 --> 00:08:25,780
that's not the cell that's what she said
moment by the way haha so effectively

99
00:08:25,780 --> 00:08:31,210
what had happened was a researcher had
wrote about a new malicious RTF document

100
00:08:31,210 --> 00:08:38,439
and they had used for their magic follow
header backslash party VPN and it was

101
00:08:38,440 --> 00:08:42,070
crazy was like Mandeep in what does this
mean like why does this work

102
00:08:42,690 --> 00:08:46,110
and eventually you start taking bites a
way to understand what's the minimum

103
00:08:46,110 --> 00:08:49,590
required so that's that's why we were
able to define what's that new minimum

104
00:08:49,590 --> 00:08:58,080
requirement some other things and I know
what I'm talking to these now but i'll

105
00:08:58,080 --> 00:09:00,150
be i'll be demonstrating some of these
later

106
00:09:00,150 --> 00:09:06,510
I've been substitution so by default
when you look at all use like package or

107
00:09:06,510 --> 00:09:10,439
objects for example because we see those
pretty common in the field you'll see

108
00:09:10,440 --> 00:09:16,800
that a binary may be shown as a as a hex
stream but you can use been substitution

109
00:09:16,800 --> 00:09:22,079
to define I want to represent these next
characters as ascii characters that

110
00:09:22,080 --> 00:09:25,920
would represent their binary
representation as opposed to as you see

111
00:09:25,920 --> 00:09:34,140
at mystery wireless keeps light enough
home and the other the other really

112
00:09:34,140 --> 00:09:38,010
effective probably one of the most
effective asians that seem to work very

113
00:09:38,010 --> 00:09:46,770
well as just using white space to chunk
up your wishes RTF document so i think i

114
00:09:46,770 --> 00:09:50,880
got a couple more here and then we'll
get back to look at more examples so

115
00:09:50,880 --> 00:09:56,370
this one I kid you not is probably my
favorite because it takes advantage of

116
00:09:56,370 --> 00:10:03,540
micro are the RTF speck in the manner of
which other people can introduce new

117
00:10:03,540 --> 00:10:07,290
words so we saw there was a picture
object right we know it makes a picture

118
00:10:07,290 --> 00:10:11,910
if you were to develop an RTF reader and
said I want this controller you know

119
00:10:11,910 --> 00:10:16,620
this i were to mean to do something else
we can take advantage of this by

120
00:10:16,620 --> 00:10:23,250
defining our own so here we define a
simple hello control word in essentially

121
00:10:23,250 --> 00:10:27,150
when microsoft office goes to read it
it's going to look at this table and say

122
00:10:27,150 --> 00:10:32,850
hey do we have this tag we don't so skip
it but we can use this to literally just

123
00:10:32,850 --> 00:10:36,780
keep inserting this in different places
in our document to help obvious Kate it

124
00:10:36,780 --> 00:10:39,900
so when you go to maybe

125
00:10:39,900 --> 00:10:45,270
test your payload against whatever AV
you know use this technique to kind of

126
00:10:45,270 --> 00:10:48,660
help break up whatever your payload is
and it's still going to run just fine

127
00:10:49,270 --> 00:10:59,170
hey this looks a lot better for some
reason so here's just a couple more an

128
00:10:59,170 --> 00:11:05,170
example of the the been one here what's
really unique about how the how the

129
00:11:05,170 --> 00:11:10,599
attacker use this one is that been
followed by number specifies here's how

130
00:11:10,600 --> 00:11:15,970
many bytes afterwards I need you to go
ahead and treat these as ascii

131
00:11:15,970 --> 00:11:20,410
characters but here they specify zeros
they specify a lot of them and basically

132
00:11:20,410 --> 00:11:27,339
what you're allowed to do is have a
certain number afterwards and

133
00:11:27,340 --> 00:11:31,720
effectively it's like a knoll and then I
mentioned whitespace obfuscation is also

134
00:11:31,720 --> 00:11:36,340
really powerful here is another payload
wear what they did is after they

135
00:11:36,340 --> 00:11:40,600
embedded whatever their payload was it
just started hitting enter after every

136
00:11:40,600 --> 00:11:45,940
single character the consequence is well
you kind of blow your file a little bit

137
00:11:45,940 --> 00:11:50,920
it's a lot larger but the effective
pieces well now it's flying by multiple

138
00:11:50,920 --> 00:12:00,760
detection controls on to its destination
so you talked about some evasion stuff

139
00:12:00,760 --> 00:12:15,520
there and I'm going to flip over to vm
just to kind of give you an example

140
00:12:15,520 --> 00:12:18,520
where did

141
00:12:19,110 --> 00:12:30,120
ok so two things here just to kind of
demonstrate the effectiveness of asians

142
00:12:30,120 --> 00:12:39,870
going to go ahead and take a popular
tool called RTF scan not sure of those

143
00:12:39,870 --> 00:12:53,670
you they're familiar with this tool but
basically we can go ahead and scan you

144
00:12:53,670 --> 00:12:58,800
know malicious RTF document now this one
its power shell so I mean it's really

145
00:12:58,800 --> 00:13:03,540
going to have a low high index rating as
where are especially pen testers are

146
00:13:03,540 --> 00:13:08,279
aware powershell is basically keying in
most environments so what I decided to

147
00:13:08,279 --> 00:13:12,000
do is alright well how could we often
escape this in a manner that would

148
00:13:12,000 --> 00:13:22,350
simply bypass even this tool so already
done it will take a quick peek at it so

149
00:13:22,350 --> 00:13:26,459
I went ahead and just scanned a
different file we're going to take a

150
00:13:26,459 --> 00:13:30,839
look at that but we see that analysis is
finished there's no malicious traces now

151
00:13:30,839 --> 00:13:37,320
and how are we able to easily defeat
defeat this Y as i said earlier it's a

152
00:13:37,320 --> 00:13:49,079
it's really all about using fictitious
control words so what I've done helps i

153
00:13:49,079 --> 00:13:50,130
know that's not helping

154
00:13:50,130 --> 00:13:55,800
I just really want to use my laptop and
I turned my back what I've done here is

155
00:13:55,800 --> 00:14:01,199
we have the object data tag and that
basically says here comes what's

156
00:14:01,199 --> 00:14:06,359
expected to be treated as binary so
every to every two characters here and I

157
00:14:06,360 --> 00:14:09,779
just started inserting my own made-up
control word called me out and I just

158
00:14:09,779 --> 00:14:14,820
started just placing it in random places
right you know me i'll scan again again

159
00:14:14,820 --> 00:14:19,949
we've broken up how I these scanning
tools work and now we're effectively

160
00:14:19,949 --> 00:14:21,170
bypassing that

161
00:14:21,170 --> 00:14:24,319
now to an analyst they can see the
source

162
00:14:24,320 --> 00:14:28,220
I I think they look at this and
understand that all right well I do know

163
00:14:28,220 --> 00:14:33,200
that i have some type of embedded data
here and you know they would still know

164
00:14:33,200 --> 00:14:35,420
extract this and move forward

165
00:14:35,420 --> 00:14:39,469
i'll be releasing some new research that
actually go through comparing it against

166
00:14:39,470 --> 00:14:44,029
all the other tools out there now such
as dr stephens just released a new tool

167
00:14:44,029 --> 00:14:52,370
called a RTF dump there's there's like
three with three other one out there

168
00:14:52,370 --> 00:15:01,730
that I are pretty nice and it would just
be a cool to try to understand how like

169
00:15:01,730 --> 00:15:07,910
how effective business in the long run
so to demonstrate some more i took a

170
00:15:07,910 --> 00:15:10,819
known malicious file and I was like
alright i'll just send it to an obvious

171
00:15:10,820 --> 00:15:16,459
skater tool just to see what can I get
out so this is a simple sample that I

172
00:15:16,459 --> 00:15:22,010
pulled and we can see there's you know
32 detection and I was like if I just do

173
00:15:22,010 --> 00:15:27,589
some simple things like what do you
think we can reduce that number two and

174
00:15:27,589 --> 00:15:32,930
mind you the way my tool works is it's
pretty random and we're just down to you

175
00:15:32,930 --> 00:15:38,660
know 21st role i actually have done
exercises like this and you can get 20

176
00:15:38,660 --> 00:15:43,339
trust me you can it's just you gotta
understand where is it based on the AV

177
00:15:43,339 --> 00:15:47,510
that you're looking to bypass like where
do you need to properly insert some of

178
00:15:47,510 --> 00:15:54,350
these things so go back to the slides
now

179
00:15:58,089 --> 00:16:05,860
alright so vulnerability discovery

180
00:16:05,860 --> 00:16:11,259
I don't know if anyone here was in
nigeria mods advanced exploitation

181
00:16:11,259 --> 00:16:15,459
course but he gets this question a lot
and as a security researcher what can I

182
00:16:15,459 --> 00:16:20,050
go after to try to find bugs and he says
find something as old as you can that's

183
00:16:20,050 --> 00:16:25,389
written in c well that kinda really fits
the description here right 1987 that's

184
00:16:25,389 --> 00:16:30,970
quite a while ago and i believe it was
$MONTH 2008 they released like their

185
00:16:30,970 --> 00:16:37,540
last update on the RTF spec so let's
look at how do we use this to help us

186
00:16:37,540 --> 00:16:41,620
security researchers understand what do
you want 25 and the key to this is just

187
00:16:41,620 --> 00:16:45,790
search for the word must use it so much
like you must do this you must do that

188
00:16:45,790 --> 00:16:50,290
if you want to format this and must look
like this and that and I just kind of

189
00:16:50,290 --> 00:16:57,339
reading through some of these I the list
ID 1 so there's been there have been

190
00:16:57,339 --> 00:17:02,050
plenty plenty of bugs found that abuse
list IDs and if we look it says that

191
00:17:02,050 --> 00:17:06,459
nice list must have unique list ID that
should be randomly generated and as a

192
00:17:06,459 --> 00:17:10,870
long integer and the list ID cannot be
negative 1 and negative 5

193
00:17:10,869 --> 00:17:15,489
so as security guys we're going to try
to do negative 1 negative 5 right so I

194
00:17:15,490 --> 00:17:23,500
not gonna beat this down all day but
please take a look at the speck it's a

195
00:17:23,500 --> 00:17:28,630
it's pretty fun to read and it's it's
really simple it's like HTML so for

196
00:17:28,630 --> 00:17:31,750
those of you may be looking at trying to
discover vulnerabilities it's really

197
00:17:31,750 --> 00:17:33,580
easy to get up and running

198
00:17:33,580 --> 00:17:36,639
I'm in creating your own data models and
what we'll talk a little bit more about

199
00:17:36,640 --> 00:17:38,000
that here soon

200
00:17:38,000 --> 00:17:43,100
so my tool of choice for my fuzzing was
to leverage the community edition of

201
00:17:43,100 --> 00:17:48,199
peach and there's basically kind of two
approaches to this you can take a

202
00:17:48,200 --> 00:17:53,240
mutation based for those of you that may
use something like when AFL where you

203
00:17:53,240 --> 00:17:57,620
can just hand it your your test case and
say hey you take this one at a time

204
00:17:57,620 --> 00:18:02,780
until hopefully we get a crash then
there's generation based this is where

205
00:18:02,780 --> 00:18:06,770
the spec was very handy because you take
a look at how something is supposed to

206
00:18:06,770 --> 00:18:17,210
be constructed then you adequately model
that so to demonstrate this I actually

207
00:18:17,210 --> 00:18:22,430
built a very thorough data model and I
literally ran over 2 million iterations

208
00:18:22,430 --> 00:18:27,230
and it was really slow because I would
restart microsoft office every time and

209
00:18:27,230 --> 00:18:32,510
if you can imagine your distributor
marks 6pm like you know really low

210
00:18:32,510 --> 00:18:37,820
resources it it wasn't as fast as I
wanted to be but I got over 500 crashes

211
00:18:37,820 --> 00:18:43,129
six of those unique and hopefully a
pendant from CBE so all i make it a

212
00:18:43,130 --> 00:18:46,130
short demo

213
00:18:54,279 --> 00:19:05,469
so this is the Josh this is horrible so
what this is sorry the scale but

214
00:19:05,469 --> 00:19:13,899
basically what we do is ok so i have a
data model called RTF all the things i

215
00:19:13,899 --> 00:19:19,330
found every single tag i could and said
let's a take these and allow peach to

216
00:19:19,330 --> 00:19:23,949
create them and you take them according
to whatever strategy we want so you

217
00:19:23,950 --> 00:19:30,249
properly define your header you had a
tag and you begin mutating should still

218
00:19:30,249 --> 00:19:48,429
have a whoa can't see over there

219
00:19:49,299 --> 00:19:53,289
so this is just an example of what would
be generated and it will try to add more

220
00:19:53,289 --> 00:19:58,839
tags less tags to achieve you know some
type of some type of crash inside the

221
00:19:58,839 --> 00:20:13,450
software itself this you Craig with but
microsoft office so I mean I could I

222
00:20:13,450 --> 00:20:14,679
could let me

223
00:20:14,679 --> 00:20:19,029
well I don't have to it's kind of like a
it's awesome it's kinda like fishing I

224
00:20:19,029 --> 00:20:22,029
don't know if anyone here likes fishing
i love to go fishing

225
00:20:23,440 --> 00:20:27,940
oh yeah I like you know fishing and the
security sense in the real sense of the

226
00:20:27,940 --> 00:20:28,719
word

227
00:20:28,719 --> 00:20:32,049
it's kind of like set and forget it so
once you build this you literally just

228
00:20:32,049 --> 00:20:34,809
you know you cast your line and you know
every morning check the way we got a

229
00:20:34,809 --> 00:20:36,639
fish here we got a fish here

230
00:20:36,639 --> 00:20:39,639
yeah yes no I so

231
00:20:40,419 --> 00:20:54,549
oh I was running this is open

232
00:21:01,629 --> 00:21:08,139
there we go so this this is what the
process looks like right so it's going

233
00:21:08,139 --> 00:21:12,609
to create a new test case open it up in
word you may not see word fully open

234
00:21:12,609 --> 00:21:13,960
every time

235
00:21:13,960 --> 00:21:19,479
wow so look we already do we just got
something that's not by design

236
00:21:19,989 --> 00:21:23,769
I'm telling you it's not but this is
typically what it looks like when you

237
00:21:23,769 --> 00:21:27,999
get a crash so wow I may have a new
submission on our hands that's that's

238
00:21:27,999 --> 00:21:31,899
actually cool if that turns out to be
the case promise you it's not stage i'm

239
00:21:31,899 --> 00:21:34,449
actually gonna let this run because i
really want to see that will come back

240
00:21:34,450 --> 00:21:38,379
to it later me to check on it but this
is what the process is like where you go

241
00:21:38,379 --> 00:21:41,949
ahead and close reproduce i'm getting
distracted

242
00:21:41,950 --> 00:21:48,279
please reproduce when I say reproduce
like is it locked right I was it just a

243
00:21:48,279 --> 00:21:52,149
coincidence that it happened to crash
once so we want to try to reproduce your

244
00:21:52,149 --> 00:21:55,719
bugs that way they're easy to analyze
understand

245
00:21:55,720 --> 00:22:04,899
are these exploitable or not oh this is
a real painful position of being home so

246
00:22:04,899 --> 00:22:13,449
kind of moving on route 20 minutes to
fly here some food for thought I spent

247
00:22:13,450 --> 00:22:18,279
six months fuzzing microsoft office 2016
and I did it just on the Windows

248
00:22:18,279 --> 00:22:23,079
platform but if the Creator has its
flaws too how about the imitators right

249
00:22:23,079 --> 00:22:27,489
so think about other applications or
work with RTF documents what could we

250
00:22:27,489 --> 00:22:32,259
possibly find there and I'm convinced on
some things I've tried the android is

251
00:22:32,259 --> 00:22:36,879
going to be the next platform i decide
to test against because I'm already seen

252
00:22:36,879 --> 00:22:38,649
some pretty interesting results

253
00:22:38,649 --> 00:22:40,070
um

254
00:22:40,070 --> 00:22:44,780
you know but also think about maybe
cloud-based services that may take this

255
00:22:44,780 --> 00:22:56,300
in so I mentioned that I the package or
dll is pretty much one of the better

256
00:22:56,300 --> 00:23:01,460
options for getting around issues with
macros and how it works by default is

257
00:23:01,460 --> 00:23:06,560
you simply open up your document going
to insert select object and then pick

258
00:23:06,560 --> 00:23:10,879
whatever it is you want to try to get
the user to click on you're going to run

259
00:23:10,880 --> 00:23:15,710
into some issues and that is that
packager checks for certain extensions

260
00:23:15,710 --> 00:23:22,430
it didn't used to be as great as it is
now I'd say four years ago you could

261
00:23:22,430 --> 00:23:29,030
even do jar I a couple of other
extensions and it wouldn't even tell you

262
00:23:29,030 --> 00:23:30,740
anything we just start running it

263
00:23:30,740 --> 00:23:37,700
so here's how that process looks the
package ordeal will actually call the

264
00:23:37,700 --> 00:23:43,250
shell wapi to run a series of checks and
those checks are to first get the path

265
00:23:43,250 --> 00:23:45,890
extension because it doesn't care what
you name it just want to know based on

266
00:23:45,890 --> 00:23:48,170
this extension I should

267
00:23:48,170 --> 00:23:51,620
is this a risk and there are a lot of
hard code checks that it goes through

268
00:23:51,620 --> 00:23:56,959
but as I went through these and as you
can see here this is from Ida I hear a

269
00:23:56,960 --> 00:24:01,460
hard-coded list of things that checks
for I didn't see certain things like

270
00:24:01,460 --> 00:24:08,450
powershell and like Python like other
kind of scripting languages so digging

271
00:24:08,450 --> 00:24:12,170
further into it then it will actually go
and query like based on that file

272
00:24:12,170 --> 00:24:15,890
extension look at the registry is
looking for a special flag to see you

273
00:24:15,890 --> 00:24:19,910
know is it safe always say always
dangerous that there's a couple of them

274
00:24:19,910 --> 00:24:23,750
and if it doesn't find anything by
default it will still give the user one

275
00:24:23,750 --> 00:24:24,980
courtesy warning

276
00:24:24,980 --> 00:24:29,180
unfortunately there's no real way to
bypass that either via the obvious

277
00:24:29,180 --> 00:24:31,630
caption stuff that we saw earlier

278
00:24:31,630 --> 00:24:36,280
thankfully though there's a way around
that and you can forge images and its

279
00:24:36,280 --> 00:24:37,450
really simple

280
00:24:37,450 --> 00:24:43,750
go ahead i take any image you want save
it in word and then save it as an RTF

281
00:24:43,750 --> 00:24:47,590
doc you just open it in your text editor
choice

282
00:24:47,590 --> 00:24:52,000
copy that picture object and replace it
with whatever you get when you embed

283
00:24:52,000 --> 00:24:56,260
anything else then when the user goes to
open it they will effectively see

284
00:24:56,260 --> 00:25:03,070
something else I I don't think that's a
while looking at the time if others want

285
00:25:03,070 --> 00:25:07,960
to see that i'll gladly demo that you
know we can meet up outside so moving on

286
00:25:07,960 --> 00:25:13,240
to the exploitation side of the fence
outside of the package or object and

287
00:25:13,240 --> 00:25:17,680
also using I maybe hyperlinks to invoke
the MS word protocol maybe retrieve

288
00:25:17,680 --> 00:25:22,030
something from the web you really only
have the automatic stuff so I maybe

289
00:25:22,030 --> 00:25:26,200
whatever is in metasploit you know these
are two popular cds insecure library

290
00:25:26,200 --> 00:25:30,670
loading so those type of vulnerability
still pop up from time to time however

291
00:25:30,670 --> 00:25:35,110
looking at you know firewalls these days
and how the egress stuffs can lock down

292
00:25:35,110 --> 00:25:39,520
i'm not sure how viable that will be and
actually have a funny story that's

293
00:25:39,520 --> 00:25:43,330
probably enough to be for afterwards but
i'll mention and failures because I did

294
00:25:43,330 --> 00:25:47,679
fail a lot how a way to actually get
around that it's more like a

295
00:25:47,680 --> 00:25:50,770
self-contained way to proc this type of
vulnerabilities

296
00:25:53,170 --> 00:25:59,620
this is a this is the best tree i could
produce based on today

297
00:25:59,620 --> 00:26:06,100
what type of CES I can the RTS back take
advantage of and I only included those

298
00:26:06,100 --> 00:26:11,260
that directly affect office and it's
care library loading vulnerabilities I

299
00:26:11,260 --> 00:26:16,300
didn't include something that I that I
should have because it's been used in

300
00:26:16,300 --> 00:26:21,430
popular nation-state malware and that's
embedded font type so i have a another

301
00:26:21,430 --> 00:26:24,269
demo here for you

302
00:26:24,269 --> 00:26:27,659
no can't i'm hungover

303
00:26:28,169 --> 00:26:34,440
it's okay be quick here so this this
might go kinda quick

304
00:26:35,129 --> 00:26:41,939
I when you embed something you have the
I know there's not enough memory

305
00:26:42,899 --> 00:26:49,109
here's what I meant by we can actually
take a picture and overlay here and make

306
00:26:49,109 --> 00:26:52,978
it look like whatever we want so I
noticed that there's a way to get around

307
00:26:52,979 --> 00:26:56,969
that first check that courtesy check and
that's if you have a kernel level

308
00:26:56,969 --> 00:27:02,129
vulnerability so I took a Jerusalem
Polly proof of concept that he put out

309
00:27:02,129 --> 00:27:07,559
on the internet and literally just by
double-clicking this bone so if you have

310
00:27:07,559 --> 00:27:11,099
like you know Colonel level payload
whatever instant execution they don't

311
00:27:11,099 --> 00:27:12,599
get a pop-up or anything

312
00:27:12,599 --> 00:27:15,239
now I'm not advanced enough to write
something like that I would have gladly

313
00:27:15,239 --> 00:27:19,259
download it for you but it just it's
important for us to understand like what

314
00:27:19,259 --> 00:27:20,369
are the possibilities

315
00:27:20,369 --> 00:27:25,708
how could a potential security control
feylis so that vm is going to heaven

316
00:27:26,219 --> 00:27:34,349
um I no bomb i'm just about to wrap up
here

317
00:27:35,519 --> 00:27:44,429
yeah I have a lot so for countermeasures
here blue team for those of you that

318
00:27:44,429 --> 00:27:47,579
right yardsticks don't don't look it

319
00:27:47,579 --> 00:27:52,529
you know backslash RTF just look for
backslash RT preceded by an open curly

320
00:27:52,529 --> 00:27:58,109
brace of course IP SIDS rules i really
don't have anything for you it's kind of

321
00:27:58,109 --> 00:28:00,928
a joke haha

322
00:28:00,929 --> 00:28:04,979
for those of you that are in charge of
maybe it administrating systems look at

323
00:28:04,979 --> 00:28:12,299
actually switching the kill bit on the
packager a clsid so that way if you do

324
00:28:12,299 --> 00:28:14,429
deliver it and they try to run it

325
00:28:14,429 --> 00:28:21,690
it's immediately denied you can also
change how you associate dot RTF doc so

326
00:28:21,690 --> 00:28:26,639
if you are going to start default
programs you can actually see like hey

327
00:28:26,639 --> 00:28:30,059
whats how're things associated if I
click on this extension which opens up

328
00:28:30,059 --> 00:28:34,529
for fun go ahead and just change it to
just wordpad in wordpad seems pretty

329
00:28:34,529 --> 00:28:37,920
simple or even notepad if they really
needed that bad of

330
00:28:37,920 --> 00:28:42,870
course that's all about you know what
all what all you really need right for

331
00:28:42,870 --> 00:28:46,290
some people it's pretty practical to do
that right so come from the banking

332
00:28:46,290 --> 00:28:51,000
industry like you could pretty much get
away with that but maybe in other areas

333
00:28:51,000 --> 00:28:56,190
you can so i mentioned failures and I'll
talk about those really quick because as

334
00:28:56,190 --> 00:28:59,100
another researcher taught me it's always
important to acknowledge your failures

335
00:28:59,100 --> 00:29:04,860
and we will close and talked about
triggering insecure library loading

336
00:29:04,860 --> 00:29:11,370
automagically and here's an interesting
caveat so you can i make something

337
00:29:11,370 --> 00:29:16,439
persist on your target host in their
temp directory if you first embed your

338
00:29:16,440 --> 00:29:21,420
object then play some type of pocket to
go ahead and crash word what happens is

339
00:29:21,420 --> 00:29:24,780
the package deal doesn't have the
opportunity to kind of clean it up and

340
00:29:24,780 --> 00:29:29,730
remove that from the target environment
so by embedding the dll that would

341
00:29:29,730 --> 00:29:37,200
trigger that and I a crash it will go
ahead or sorry the dll and then you'll

342
00:29:37,200 --> 00:29:40,620
need another RTF document that you want
your victim to click on the crash so

343
00:29:40,620 --> 00:29:42,120
first time it happens

344
00:29:42,120 --> 00:29:45,479
nothing's going to happen you're betting
on that second time for it to happen for

345
00:29:45,480 --> 00:29:50,430
it to pop I another failure that I'm you
know personally feel that is porting

346
00:29:50,430 --> 00:29:56,430
embedded fonts vulnerabilities i showed
you the guru thing as a embedded object

347
00:29:56,430 --> 00:30:00,630
you can actually convert you know these
font types into actual embedded fonts

348
00:30:00,630 --> 00:30:05,730
I'm hoping that I pretty soon here i'll
be able to get the programming right to

349
00:30:05,730 --> 00:30:09,270
get that done so that by default now
when they open the document there's no

350
00:30:09,270 --> 00:30:13,920
user interaction is just click and go
and then the last thing I tried is using

351
00:30:13,920 --> 00:30:19,620
by order marks to kind of throw off any
type of detection system that's banking

352
00:30:19,620 --> 00:30:26,010
on seeing a backslash RTF first and that
was unsuccessful because office doesn't

353
00:30:26,010 --> 00:30:32,250
care about that so no that's a no that's
that's it we really don't have any time

354
00:30:32,250 --> 00:30:32,490
here

