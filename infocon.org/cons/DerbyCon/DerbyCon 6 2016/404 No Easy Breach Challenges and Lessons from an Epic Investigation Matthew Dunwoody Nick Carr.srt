1
00:01:25,180 --> 00:01:43,000
all right by my watch were close enough

2
00:01:43,000 --> 00:01:47,830
let's get this going I'm not only this
is nick car where I our consultants with

3
00:01:47,830 --> 00:01:51,340
mandiant we had a particularly
challenging kind of interesting

4
00:01:51,340 --> 00:01:54,670
engagement that we worked we decided to
put this talk together in order to

5
00:01:54,670 --> 00:01:58,899
address some of those challenges the
ways that we respond to them and some of

6
00:01:58,899 --> 00:02:02,740
the lessons that we learned along the
way so first a little bit of background

7
00:02:02,740 --> 00:02:06,369
that started the way a lot of these
incidents do with a phishing email you

8
00:02:06,369 --> 00:02:09,639
can see there it's not even a
particularly targeted email but it was

9
00:02:09,639 --> 00:02:12,730
good enough that somebody clicked on it
i think a few people clicked on it

10
00:02:12,730 --> 00:02:16,780
declined a attempted to investigate and
remediate they failed the remediation

11
00:02:16,780 --> 00:02:23,260
and the attackers which were the Russian
group apt 29 they didn't like that they

12
00:02:23,260 --> 00:02:25,090
did not like that one bit

13
00:02:25,090 --> 00:02:29,200
and so this is one of our favorite
attack groups we've worked quite a

14
00:02:29,200 --> 00:02:33,940
number of incidents with them in
particular recently and they're they're

15
00:02:33,940 --> 00:02:36,970
definitely one of the most interesting i
think our intel says that they are a

16
00:02:36,970 --> 00:02:40,870
proficient and professional attack group
or something along those lines I was

17
00:02:40,870 --> 00:02:46,989
like that is kind of delightfully
understated so we came in just to help

18
00:02:46,989 --> 00:02:50,230
our client results of these issues

19
00:02:50,230 --> 00:02:54,160
meanwhile the attackers continuing to
complete their objectives which were to

20
00:02:54,160 --> 00:02:58,720
steal the email of targeted VIPs and to
monitor the security team in order to

21
00:02:58,720 --> 00:03:02,830
keep track of our response and detection
efforts so at the end of the

22
00:03:02,830 --> 00:03:07,540
investigation we had a four-person
mandiant team on-site at the end of this

23
00:03:07,540 --> 00:03:11,230
we had over a thousand compromised
systems we had over a thousand unique

24
00:03:11,230 --> 00:03:16,030
malware samples by hash never use the
same hash we had over a thousand unique

25
00:03:16,030 --> 00:03:23,380
see two domains and IPS almost never
reused c2 across our samples we

26
00:03:23,380 --> 00:03:27,220
identified over 50,000 email
communications stolen that's probably

27
00:03:27,220 --> 00:03:29,500
only a small fraction of what they
actually took

28
00:03:29,500 --> 00:03:34,030
and including all the scripts and tools
we identified I i took a look at our our

29
00:03:34,030 --> 00:03:37,720
sandbox we can aggregate all the stuff
we had over 7,000 unique attacker files

30
00:03:37,720 --> 00:03:41,560
so how they pull this off well the fast
pace of the intrusion

31
00:03:42,190 --> 00:03:46,150
they were very stealthy they had rapidly
changing tactics and they employed

32
00:03:46,150 --> 00:03:49,420
abandoned advanced attack techniques and
so these are the four points we're gonna

33
00:03:49,420 --> 00:03:50,708
kind of hit on here

34
00:03:50,709 --> 00:03:54,100
the first one being the fast pace of the
attacker activity so after that first

35
00:03:54,100 --> 00:03:57,280
failed remediation attempt to the
attacker started deploying their main

36
00:03:57,280 --> 00:04:02,500
backdoor to at least ten systems per day
and especially when provoked

37
00:04:02,500 --> 00:04:06,160
they also access hundreds of systems for
recon credential theft and continue to

38
00:04:06,160 --> 00:04:11,079
deploy other stealthier backdoor
families along with that main those men

39
00:04:11,080 --> 00:04:15,280
back doors they remove tools and
forensic artifacts as they went and they

40
00:04:15,280 --> 00:04:18,910
continue to steal date every week no
matter what the client did to try to

41
00:04:18,910 --> 00:04:25,270
slow them down their data theft efforts
were never even hindered so in order to

42
00:04:25,270 --> 00:04:28,539
respond to this we really have to change
the way that we looked at these systems

43
00:04:28,540 --> 00:04:32,169
so in order to get through these 10 to
20 systems per day that we're coming in

44
00:04:32,169 --> 00:04:35,620
and getting compromised we couldn't do
the the kind of in-depth analysis that

45
00:04:35,620 --> 00:04:38,650
we were typically want to do on these
sources compromised system so we went to

46
00:04:38,650 --> 00:04:43,210
a more abbreviated triage method
leveraging the unknown attacker ttp so

47
00:04:43,210 --> 00:04:46,120
on the system's where they were just
accessing dropping back doors which was

48
00:04:46,120 --> 00:04:49,180
the most common thing that they would do
we weren't going to the depth of

49
00:04:49,180 --> 00:04:53,140
analysis that we might otherwise and we
also developed some indicators to assist

50
00:04:53,140 --> 00:04:57,039
with a triage so by the time we actually
got to looking at a system our sweeps

51
00:04:57,040 --> 00:04:58,150
would have shown us

52
00:04:58,150 --> 00:05:01,000
ninety percent of what happened on that
box and it's just a matter of closing

53
00:05:01,000 --> 00:05:04,330
out the remaining ten percent making
sure that there's nothing on there that

54
00:05:04,330 --> 00:05:07,359
we haven't seen before nothing unique so
there were a couple of things we could

55
00:05:07,360 --> 00:05:11,380
write great indicators for which like
lateral movement which I'll kind of get

56
00:05:11,380 --> 00:05:14,740
into that later as to why that was a
challenge some of their pivoting

57
00:05:14,740 --> 00:05:18,970
anything anything new new tools new back
doors and signs of data set we obviously

58
00:05:18,970 --> 00:05:22,900
have to document all of that along with
that we also the streamliner

59
00:05:22,900 --> 00:05:26,049
documentation we couldn't write live
response reports the way that we

60
00:05:26,050 --> 00:05:29,290
typically would we couldn't even really
make time lines which is too much data

61
00:05:29,290 --> 00:05:33,310
so we basically compressed it down into
these single blocks we kept in our

62
00:05:33,310 --> 00:05:36,880
engagement tracking spreadsheet contains
things like them our an attacker tools

63
00:05:36,880 --> 00:05:41,289
on the system persistence mechanism that
was in use . of attacker activity in any

64
00:05:41,289 --> 00:05:42,200
significant times

65
00:05:42,200 --> 00:05:46,700
stamps the source of the activity and we
also documented any new findings in a

66
00:05:46,700 --> 00:05:50,420
little bit more freeform as far as new
tools techniques and procedures any

67
00:05:50,420 --> 00:05:55,610
signs of data theft so the lesson
learned from this is just too to be one

68
00:05:55,610 --> 00:05:58,640
to change normal practices and
disregarded picture methodologies when

69
00:05:58,640 --> 00:06:03,560
they're not working you have to be
willing to be flexible to respond and do

70
00:06:03,560 --> 00:06:06,230
what you have to do to be successful at
the end of the day that's that's what

71
00:06:06,230 --> 00:06:10,190
really matters though it is obviously
important also document if you go i make

72
00:06:10,190 --> 00:06:12,380
the most of outside help so this is
something we talked a little bit more

73
00:06:12,380 --> 00:06:16,370
about in the past but didn't include as
much this time but we really reached out

74
00:06:16,370 --> 00:06:19,190
to the client in ways that we typically
wouldn't because you're not always going

75
00:06:19,190 --> 00:06:22,160
to have all the resources you want so if
that's the case you need to be willing

76
00:06:22,160 --> 00:06:25,490
to reach out to the others in your
organization that you might not

77
00:06:25,490 --> 00:06:29,060
typically work with but there are always
other people that cannot that can help

78
00:06:29,060 --> 00:06:33,170
out when you need them with that I'll
hand it off to Nick thanks

79
00:06:33,710 --> 00:06:37,880
alright so the second challenge was just
how stealthy the attacker was so there's

80
00:06:37,880 --> 00:06:42,560
a number of things to to kind of counter
our forensic effort on the end . on the

81
00:06:42,560 --> 00:06:47,570
network so then . they would use a
secure deletion this pack up and move

82
00:06:47,570 --> 00:06:51,409
technique so every three to four days
weather that we've found them or not

83
00:06:51,410 --> 00:06:55,880
they would escalate all their files and
move on to new systems so it constantly

84
00:06:55,880 --> 00:06:59,090
are constantly catching up with them
even if you hadn't done anything in

85
00:06:59,090 --> 00:07:03,650
those systems and they follow this week
all the ninety percent doctrine out of

86
00:07:03,650 --> 00:07:08,690
those 10 systems that had their foothold
with their primary backdoor nine of them

87
00:07:08,690 --> 00:07:13,460
were very similar all the different see
two but similar persistence mechanism

88
00:07:13,460 --> 00:07:16,580
similar details then they introduced one
that was a little bit different

89
00:07:16,580 --> 00:07:19,760
really great idea for any of the red
teamers out there to follow something

90
00:07:19,760 --> 00:07:25,010
similar that way if nine systems are
action you know there's it's obvious

91
00:07:25,010 --> 00:07:27,860
that they didn't find that that tenth
way it's a new way to introduce features

92
00:07:27,860 --> 00:07:33,530
well on the network side i'm a heavier
on the network

93
00:07:33,530 --> 00:07:37,909
analysts analysis side they use a
compromise legitimate infrastructure for

94
00:07:37,910 --> 00:07:42,050
everything so to recap that
thousand-plus domains and IPS all of

95
00:07:42,050 --> 00:07:45,710
which was compromised third-party
infrastructure that they used for the

96
00:07:45,710 --> 00:07:52,370
attack so every new system is infected
has on c2 and they use social media as

97
00:07:52,370 --> 00:07:55,849
well so they they alter their
communication

98
00:07:55,849 --> 00:07:59,839
scheme throughout and they embraced SL
so much things to make it very stealthy

99
00:07:59,839 --> 00:08:04,189
the odds are also stacked against us for
a couple reasons we were unable to use

100
00:08:04,189 --> 00:08:08,119
some of our technology so some of our
signatures and stuff we had going in and

101
00:08:08,119 --> 00:08:12,349
the existing devices were in
consistently deployed and had some

102
00:08:12,349 --> 00:08:18,139
spotty coverage and the last thing here
is the rolling remediation that's nice

103
00:08:18,770 --> 00:08:24,318
phrasing for like whack-a-mole we don't
typically recommend that approach

104
00:08:24,319 --> 00:08:28,069
especially the scale but you don't show
our hands to the attacker the attacker

105
00:08:28,069 --> 00:08:31,550
knew exactly what was working at what
wasn't so that was one of the things

106
00:08:31,550 --> 00:08:33,318
that had to be changed

107
00:08:33,318 --> 00:08:37,458
here's a bonus slide a little bit more
on the OPSEC just because it's so cool

108
00:08:37,458 --> 00:08:42,500
they use their mass activity to obscure
maybe the real target

109
00:08:42,500 --> 00:08:46,190
this has been more evident in some of
the recent campaigns where they will use

110
00:08:46,190 --> 00:08:50,300
a brand new method to fish a bunch of
select people across a bunch of

111
00:08:50,300 --> 00:08:54,079
organizations but it's almost
prioritized so you might not be high on

112
00:08:54,079 --> 00:08:57,649
the priority list even if you got the
fish they'll get to you if if they get

113
00:08:57,649 --> 00:08:58,670
to you

114
00:08:58,670 --> 00:09:02,839
this is interesting because actually
matt and i are our opinion is almost

115
00:09:02,839 --> 00:09:04,790
want the first system to be caught

116
00:09:04,790 --> 00:09:08,899
super creative way of fishing and I
think people share that share the Intel

117
00:09:08,899 --> 00:09:12,980
and you know every organization feels
like they've dealt with them and a lot

118
00:09:12,980 --> 00:09:16,490
of organizations we responded to they
received this they've gotten thread in

119
00:09:16,490 --> 00:09:20,449
talent and have pulled the system
offline and feel like hey we understood

120
00:09:20,449 --> 00:09:20,839
it

121
00:09:20,839 --> 00:09:24,500
what apt 29 was actually doing was as
soon as they got on the switch out the

122
00:09:24,500 --> 00:09:28,579
back door they get d persistence with a
couple of methods that's going to talk

123
00:09:28,579 --> 00:09:32,120
about and again I almost want that first
system with all the investigative leads

124
00:09:32,120 --> 00:09:35,180
everything that they wanted to look like
it was only one system

125
00:09:35,180 --> 00:09:39,649
ok they also conducted their data theft
exclusively using legitimate US based

126
00:09:39,649 --> 00:09:40,519
services

127
00:09:40,519 --> 00:09:45,230
this complicates it for law enforcement
and other things to to follow up on it

128
00:09:45,230 --> 00:09:49,310
but these Gmail Google Drive they loved
using the api's and would actually

129
00:09:49,310 --> 00:09:54,349
download DLLs to to communicate directly
out to to Google's API they also use

130
00:09:54,350 --> 00:09:57,170
onedrive here's a little screenshot I
don't that link actually doesn't work

131
00:09:57,170 --> 00:10:01,610
anymore for how to do it with microsoft
it can really see it um for windows 7

132
00:10:01,610 --> 00:10:07,399
you can do it in windows 10 but it's a
mounting onedrive as a network share so

133
00:10:07,399 --> 00:10:08,750
the attacker love doing this

134
00:10:08,750 --> 00:10:13,850
and just what moving data out that way
so the last little bonus piece here is

135
00:10:13,850 --> 00:10:19,370
just how much they monitored us the very
first system i did an analysis on was

136
00:10:19,370 --> 00:10:24,920
the attacker taking my information for
coming over on site so they were

137
00:10:24,920 --> 00:10:28,640
definitely targeting our team is very
interesting them in the target

138
00:10:28,640 --> 00:10:32,030
throughout the the compromise they
wanted to know if we were onto that how

139
00:10:32,030 --> 00:10:36,560
was we were finding them and how much
time they had left until we attempted to

140
00:10:36,560 --> 00:10:41,180
remove them again and it was kind of a
game of optic on both sides right when

141
00:10:41,180 --> 00:10:43,910
it came to that last part then want to
know when the client would try to

142
00:10:43,910 --> 00:10:49,880
remediate we tried to do things like put
calendar invites for a party someone was

143
00:10:49,880 --> 00:10:53,390
doing or someone's taking vacation this
weekend been thinking a lot of that out

144
00:10:53,390 --> 00:10:58,220
because they're monitoring all the
communications and not feeling great

145
00:10:58,220 --> 00:11:02,450
even about somewhere out of band stuff
it didn't work but we tried

146
00:11:02,450 --> 00:11:09,260
okay so um what we really made the most
on the end . so talking about the end .

147
00:11:09,260 --> 00:11:15,500
auntie forensics made the most out of
these trace artifacts so they used the

148
00:11:15,500 --> 00:11:17,390
system Eternals escalate to a lot

149
00:11:17,390 --> 00:11:22,490
ok so the file content the filenames
those are gone well not so fast you can

150
00:11:22,490 --> 00:11:26,720
find evidence of the use of escalate so
some of this kind of metadata around it

151
00:11:26,720 --> 00:11:30,440
so you're going to get the you know
world alphabetical zat overriding that

152
00:11:30,440 --> 00:11:35,870
the filename and stuff like that but you
eat so that's something in search for a

153
00:11:35,870 --> 00:11:40,250
while that the entry modified timestamp
for those files record typically

154
00:11:40,250 --> 00:11:41,990
indicates when the escalade occurred

155
00:11:41,990 --> 00:11:45,830
ok so now you can look for at scale when
s/he is occurring and also is helpful

156
00:11:45,830 --> 00:11:48,680
something we've used abandoned for a
while that anytime you use assist

157
00:11:48,680 --> 00:11:53,089
internals tool you have to get a
registry created a registry key created

158
00:11:53,089 --> 00:11:57,110
for accepting the end-user license
agreement so now tool by tool you can

159
00:11:57,110 --> 00:12:01,970
look for it so we looked for new uses of
esli so we started target that way and

160
00:12:01,970 --> 00:12:06,680
then when you get onto that system
assuming had pre fetch some of their

161
00:12:06,680 --> 00:12:11,359
operations like so the prefetch access
files for are you can actually see a

162
00:12:11,360 --> 00:12:14,000
list of what the files were called at
that time so there's some really

163
00:12:14,000 --> 00:12:19,520
creative ways to piece it together apt
29 then deleted all the prefetch files

164
00:12:19,520 --> 00:12:20,920
once they figure that out

165
00:12:20,920 --> 00:12:25,209
and fun fact some of the cases were
responding to right now it's all built

166
00:12:25,209 --> 00:12:29,290
into the back door so none of those esli
artifacts for the matter their

167
00:12:29,290 --> 00:12:31,810
circulation is in the back door

168
00:12:31,810 --> 00:12:36,399
we do have a real-time trigger based way
of finding them that is actually firing

169
00:12:36,399 --> 00:12:39,880
anytime there's a file rewrite on the
system and we write triggers for that

170
00:12:39,880 --> 00:12:43,149
but we didn't have that at this time

171
00:12:43,149 --> 00:12:47,500
ok next thing we did is we made the best
of what we had

172
00:12:47,500 --> 00:12:50,680
remember i said we couldn't use some of
our techniques or had this kind of

173
00:12:50,680 --> 00:12:54,489
spotty coverage all that we learned and
leverage those client tools little bit

174
00:12:54,490 --> 00:12:57,940
different than what we normally do but
we embrace the different technology

175
00:12:57,940 --> 00:13:01,660
across different business units it
actually presented an opportunity to

176
00:13:01,660 --> 00:13:05,410
detect you know the attacker probably
didn't know what was between these

177
00:13:05,410 --> 00:13:08,050
different business units we actually
didn't either we would kind of just

178
00:13:08,050 --> 00:13:13,300
blindly search we got it all centrally
into a sim and were able to search but

179
00:13:13,300 --> 00:13:16,120
it was more likely that we actually
might have something that triggers on a

180
00:13:16,120 --> 00:13:21,160
piece of the activity so then you know
we searched anytime there's a new system

181
00:13:21,160 --> 00:13:25,329
we searched everything that happened for
that system around up the timeframe of

182
00:13:25,329 --> 00:13:30,130
activity in the sim regardless was there
and we searched between infected hosts

183
00:13:30,130 --> 00:13:33,610
to see if there's communication that's
key here in a second which is automated

184
00:13:33,610 --> 00:13:35,589
that where possible we had something
that worked

185
00:13:35,589 --> 00:13:38,949
automated build a dashboard make it easy
okay want to get these two quick

186
00:13:38,949 --> 00:13:43,959
examples and some context we actually
haven't given before on these its kind

187
00:13:43,959 --> 00:13:45,099
of two examples

188
00:13:45,100 --> 00:13:50,890
the first one was from an appliance that
I think like an IBM ISS appliance that

189
00:13:50,890 --> 00:13:57,430
was not certainly not next-gen but it's
a really nice job it wasn't tune it was

190
00:13:57,430 --> 00:14:01,000
very noisy but we were able to filter
out and find really cool things in there

191
00:14:01,000 --> 00:14:06,819
so while we couldn't pull traffic we can
pull pcap from there you can reconstruct

192
00:14:06,819 --> 00:14:10,630
like the first packet so that's not
great but the the alerts on it were

193
00:14:10,630 --> 00:14:14,649
awesome so it actually had an alert for
the SMB transfer of upx packed

194
00:14:14,649 --> 00:14:19,600
executables alright anyone who who looks
at some of this traffic that's going to

195
00:14:19,600 --> 00:14:23,470
be super noisy there's tons of stuff
that uses upx and push around all over

196
00:14:23,470 --> 00:14:29,319
the network so printer software for
instances is constantly pushed around by

197
00:14:29,319 --> 00:14:32,420
admins but then we were able to extract
the fields that we wanted

198
00:14:32,420 --> 00:14:36,349
again in this case we use the splunk you
know isolating out the filenames that

199
00:14:36,350 --> 00:14:40,310
went to start to build things and what
you see or you don't see unless you're

200
00:14:40,310 --> 00:14:45,138
like the first row is that a little
excerpt for you where there's these

201
00:14:45,139 --> 00:14:50,329
files are written over SMB and their upx
packed so the first is actually a

202
00:14:50,329 --> 00:14:57,829
printer printer software and then SMB
rights to the adobe arm directory and

203
00:14:57,829 --> 00:15:02,420
microsoft office directory so those
turned out being see daddy i'm also we

204
00:15:02,420 --> 00:15:08,870
build up this visibility now this this
next one is is kind of crazy so as we're

205
00:15:08,870 --> 00:15:12,500
trying to prioritize and triage systems
we had to make judgment calls for how

206
00:15:12,500 --> 00:15:15,230
much time you spend everywhere there's a
couple of these systems we kept getting

207
00:15:15,230 --> 00:15:20,630
to that always saw it was a scheduled
task brand and that a batch script is

208
00:15:20,630 --> 00:15:25,339
executed that was it we took kind of a
bunch of different analysis techniques

209
00:15:25,339 --> 00:15:27,889
to try to look through it and
reconstruct different timelines just

210
00:15:27,889 --> 00:15:30,860
couldn't get anything there we
prioritize those lower but we we saw a

211
00:15:30,860 --> 00:15:36,139
couple of those being done that the made
us nervous once we expanded our network

212
00:15:36,139 --> 00:15:42,110
visibility and we're doing that thing
where research between two to host 44

213
00:15:42,110 --> 00:15:45,890
just everything we started to see a lot
of these MSRP see suspicious encryption

214
00:15:45,890 --> 00:15:46,610
events

215
00:15:46,610 --> 00:15:50,570
those were occurring a lot again another
kind of untuned appliance but turns out

216
00:15:50,570 --> 00:15:55,430
that's the there's one uid specifically
that's associated with the the

217
00:15:55,430 --> 00:16:00,140
command-line task scheduler that is used
in windows 7 and up you know it's a the

218
00:16:00,140 --> 00:16:04,279
contents are encrypted on the wire but
we at least now we're able to identify

219
00:16:04,279 --> 00:16:08,300
when someone with scheduling tasks
remotely across these appliances that

220
00:16:08,300 --> 00:16:10,880
was cool visibility in the network side

221
00:16:10,880 --> 00:16:14,420
well when we started to look for that we
saw corresponding with one other event

222
00:16:14,420 --> 00:16:19,160
for those systems that was SMB rights to
system32 so what was actually going on

223
00:16:19,160 --> 00:16:23,420
was that was the attacker was pushing
their file overriding legitimate windows

224
00:16:23,420 --> 00:16:29,000
binaries which is pretty crazy and then
using that batch script to double-time

225
00:16:29,000 --> 00:16:34,339
stop so we were able to find it on the
$DAY with host forensics and that's

226
00:16:34,339 --> 00:16:39,260
actually how we found a hammer toss if
people saw that kind of a cool video

227
00:16:39,260 --> 00:16:42,339
that's been put out we would have really
mention that before but

228
00:16:42,339 --> 00:16:47,769
the really cool lesson press was that
these a network time Network time kind

229
00:16:47,769 --> 00:16:51,249
of his preserves the original time when
the the host based I'm stuff is a

230
00:16:51,249 --> 00:16:52,660
stopped

231
00:16:52,660 --> 00:16:58,839
ok so make the best what we had then we
also made some shiny new stuff deployed

232
00:16:58,839 --> 00:17:03,790
open-source tech where possible to fill
out the the gaps and found ways to apply

233
00:17:03,790 --> 00:17:09,158
our methodology to this we have kind of
this incident tracking process we follow

234
00:17:09,159 --> 00:17:13,600
me through all that into the into splunk
and enriched it they're one of my

235
00:17:13,599 --> 00:17:17,500
favorite things was the use of
sparklines because with so much

236
00:17:17,500 --> 00:17:20,500
information going on during a breach
this allowed us to not only see the time

237
00:17:20,500 --> 00:17:25,419
but volume of activity i let me show you
what was actually going on here so this

238
00:17:25,419 --> 00:17:27,250
was yet another way to find them

239
00:17:27,250 --> 00:17:34,360
this was a network signature we wrote
for python initiated SSL connections so

240
00:17:34,360 --> 00:17:37,689
we filter for outbound python initiated
ssl connection we filter for a couple

241
00:17:37,690 --> 00:17:43,029
more things we have this so you host one
through ten their compromise with see

242
00:17:43,029 --> 00:17:48,640
daddy python-based back door and it
begins out so 12345 ok you see those

243
00:17:48,640 --> 00:17:54,039
initial blips that's actually initial
beacon from a host perspective if we're

244
00:17:54,039 --> 00:17:56,590
running sweeps and scans and see
something the most interesting systems

245
00:17:56,590 --> 00:18:00,428
probably host 10 is the most recently
compromised system that's going to go

246
00:18:00,429 --> 00:18:01,000
look

247
00:18:01,000 --> 00:18:05,080
well they compromised 10 they went back
somewhere in the middle and they started

248
00:18:05,080 --> 00:18:08,918
to go to work and that's where you see
the traffic there that's actually every

249
00:18:08,919 --> 00:18:12,850
time they were interacting with it it
fired the very granular signature we

250
00:18:12,850 --> 00:18:16,750
wrote so that's where they were doing
some of the data that using some of the

251
00:18:16,750 --> 00:18:20,679
other utilities then we just started
prioritizing host analysis based on this

252
00:18:20,679 --> 00:18:25,090
we were able to recover these tools that
they were otherwise escalating and we

253
00:18:25,090 --> 00:18:27,699
just kind of smashed and grab everything

254
00:18:27,700 --> 00:18:31,779
the lesson here is to improve visibility
don't stop looking

255
00:18:31,779 --> 00:18:34,899
you want to minimize those blind spots
based on what the attackers doing give

256
00:18:34,899 --> 00:18:37,510
people access to tools they wouldn't
normally have here we gave network

257
00:18:37,510 --> 00:18:41,950
analysts access to the hosts i'd post
analyst access to the network side is

258
00:18:41,950 --> 00:18:47,080
key and then lastly I said about the
network time was really cool combat I

259
00:18:47,080 --> 00:18:51,639
are fatigued this was super tiresome as
interesting as in the presentation eight

260
00:18:51,640 --> 00:18:54,510
months worth of it is grueling when you

261
00:18:54,510 --> 00:18:59,940
so if you lose track of them you're in
trouble so automate where you can try to

262
00:18:59,940 --> 00:19:03,450
try to keep people from doing boring
stuff and once the attackers found

263
00:19:03,450 --> 00:19:10,110
you're going to fight to maintain line
of sight so that brings us to the third

264
00:19:10,110 --> 00:19:14,879
challenge their rapidly evolving tactics
so they actually seven distinct

265
00:19:14,880 --> 00:19:21,060
backdoors hear some of those I don't
think have names or our public one of

266
00:19:21,060 --> 00:19:24,300
them see daddy was the one they're using
a lot so I hit on a couple times the

267
00:19:24,300 --> 00:19:29,280
presentation it went through three major
version revisions showing a second but

268
00:19:29,280 --> 00:19:34,050
these seven persistence mechanisms
registered run keys linked file

269
00:19:34,050 --> 00:19:40,230
persistence a persistent services w my
mascara talk about that name scheduled

270
00:19:40,230 --> 00:19:44,220
tasks they hijacked existing name
scheduled tasks to which was pretty cool

271
00:19:44,220 --> 00:19:47,670
and they over-rotate legitimate files
like i said so

272
00:19:48,360 --> 00:19:52,740
overriding a number of files that will
launch a number of different ways on a

273
00:19:52,740 --> 00:19:55,920
system is really kind of the ultimate
persistence the ultimate way to blended

274
00:19:55,920 --> 00:20:01,950
ok so in a cycle those techniques random
up kind of regularly i realized that we

275
00:20:01,950 --> 00:20:05,730
say seven back doors seven persistence
mechanisms everything was interchanged

276
00:20:05,730 --> 00:20:10,740
and also they didn't really use a lot of
this metadata that people commonly track

277
00:20:10,740 --> 00:20:15,030
and share is threat Intel i see a lot
about apt 29 threat Intel and there's

278
00:20:15,030 --> 00:20:19,980
some good stuff there that's a tactic
based but in this case at least you know

279
00:20:19,980 --> 00:20:23,910
they weren't they don't really use file
names as we said before really anything

280
00:20:23,910 --> 00:20:24,900
else about it

281
00:20:24,900 --> 00:20:28,620
everything was different in the c2 is
unique to each ok they also didn't need

282
00:20:28,620 --> 00:20:32,790
to reuse compromised accounts one of
things we do is we track compromised

283
00:20:32,790 --> 00:20:37,470
account usage for reasons Matt will
describe that didn't matter at all so

284
00:20:37,470 --> 00:20:43,530
that's what we were facing so what we
did in response was to maintain eye

285
00:20:43,530 --> 00:20:47,490
contact with the attacker so I said
there's three versions of see daddy

286
00:20:47,490 --> 00:20:49,800
again i really apologize for those in
the back I don't know how else to

287
00:20:49,800 --> 00:20:51,060
present it

288
00:20:51,060 --> 00:20:55,050
I'm all credit to apt 29-year this is
only looking at the cookie filled not

289
00:20:55,050 --> 00:20:58,530
even looking at the data that's share
back and forth but just want to show you

290
00:20:58,530 --> 00:21:04,800
how much it would change to evade being
found at first version 1 this is PHP cid

291
00:21:04,800 --> 00:21:07,230
and it's just so cookie value

292
00:21:07,230 --> 00:21:13,559
at the center was Jason based c2 then it
used a s encryption NZ live and

293
00:21:13,559 --> 00:21:15,899
basically for ok

294
00:21:15,900 --> 00:21:20,370
the frustrating we could see it we knew
always thought we wrote signatures for

295
00:21:20,370 --> 00:21:23,760
it and we were able to decode it to
decode it you have to actually recover

296
00:21:23,760 --> 00:21:27,750
the private key that they esky of each
system but you can retroactively we go

297
00:21:27,750 --> 00:21:29,610
back and understand what's happening

298
00:21:29,610 --> 00:21:34,379
sweet ok that changed I version 2 they
they did a couple things you know they

299
00:21:34,380 --> 00:21:36,630
dynamically generate the cookie name no
big deal

300
00:21:36,630 --> 00:21:41,340
custom base64 library no big deal here's
the crazy one they injected the use of

301
00:21:41,340 --> 00:21:47,850
an RC for cipher as well we never saw
them share the key so I what we had to

302
00:21:47,850 --> 00:21:52,709
do was brute force it and we believe our
opinions that on their side that's just

303
00:21:52,710 --> 00:21:56,610
how they built the back door to do it
that they were they had the computing

304
00:21:56,610 --> 00:22:03,270
power to brute force on there as well so
I'm yet so it wasn't just wasn't super

305
00:22:03,270 --> 00:22:06,120
monkey there's little tricks like
because it's jason at the bottom you

306
00:22:06,120 --> 00:22:09,780
only it's a block cipher you only need
to decode to get the brackets for the

307
00:22:09,780 --> 00:22:16,889
JSON like there's shortcuts and we try
to do so that was pretty cool but we

308
00:22:16,890 --> 00:22:21,390
lost the ability to decode it needless
to say at ten or more systems per day

309
00:22:21,390 --> 00:22:27,750
not valuable to try to do that kind of
crypto revision3 we lost the ability to

310
00:22:27,750 --> 00:22:28,890
stick it

311
00:22:28,890 --> 00:22:32,700
this was still frustrates me to this day
trying to write the signatures for it so

312
00:22:32,700 --> 00:22:36,750
all they did was add a random split in
it but by randomly splitting up this

313
00:22:36,750 --> 00:22:41,100
stuff just based on all other features
it really introduced so much other noise

314
00:22:41,100 --> 00:22:46,770
so putting r and functions in your c2 is
is frustrating when yet you're doing all

315
00:22:46,770 --> 00:22:47,309
these other things

316
00:22:47,309 --> 00:22:51,330
okay um but we can at least we knew it
we saw it

317
00:22:51,330 --> 00:22:56,159
well that one way the last pieces they
they wrapped it in SL so we couldn't see

318
00:22:56,160 --> 00:22:58,049
it at first

319
00:22:58,049 --> 00:23:02,879
ok sorry this is very intuitive but with
bro that we used when we deployed

320
00:23:02,880 --> 00:23:05,790
open-source software you get a lot of
this cool metadata so the point is don't

321
00:23:05,790 --> 00:23:06,750
give up on this

322
00:23:06,750 --> 00:23:12,419
yes it's an ssl but the SL has a lot of
metadata here so the x.509 search of

323
00:23:12,419 --> 00:23:16,919
stuff like you know the cipher that's
used and some of the if the attack would

324
00:23:16,919 --> 00:23:20,070
slip up and leave some default
configuration settings you can start to

325
00:23:20,070 --> 00:23:20,879
see that so

326
00:23:20,880 --> 00:23:24,060
you know the first and the third one
where the attacker the others weren't

327
00:23:24,060 --> 00:23:27,570
just have to get over the system as long
as we get on the end . side will be okay

328
00:23:27,570 --> 00:23:33,480
um so I i do want to also add that then
they started kind of ailing and

329
00:23:33,480 --> 00:23:37,260
unveiling things with SL so if you want
to make a change to the back door

330
00:23:37,260 --> 00:23:41,460
you know start using a lot of SL make
modifications and stop using a cell so

331
00:23:41,460 --> 00:23:48,660
pretty creative we can get on this but
we prioritize the unknown we spent time

332
00:23:48,660 --> 00:23:52,650
analyzing those systems where we knew
the attacker accessed it but we didn't

333
00:23:52,650 --> 00:23:55,950
know what they did once we finish the
one on the the batch script that was

334
00:23:55,950 --> 00:23:59,550
hammer toss there's a couple like that
really sneaky stealthy things that are

335
00:23:59,550 --> 00:24:04,740
being done so to limit what we were
looking at how do you do that that's

336
00:24:04,740 --> 00:24:08,610
where that data comes back into play
where it's not useful as an indicator

337
00:24:08,610 --> 00:24:14,310
but it's useful to help prioritize
systems so any kind of common forensic

338
00:24:14,310 --> 00:24:18,780
artifact we tie together although it
wasn't reusable we had file size for

339
00:24:18,780 --> 00:24:23,129
every you know now where all the traits
would break out and had a spreadsheet

340
00:24:23,130 --> 00:24:28,530
just to keep track of it right but then
we were able to get a couple wins

341
00:24:29,160 --> 00:24:32,970
there's a pseudo-random file that's
dropped its associated with the c2 so if

342
00:24:32,970 --> 00:24:36,930
you recover that another system you know
the c2 you don't have to do reverse

343
00:24:36,930 --> 00:24:42,390
engineering on the sample his tricks and
one of the crazier ones was because they

344
00:24:42,390 --> 00:24:48,150
were compromising legitimate websites to
systems had a blood donor websites two

345
00:24:48,150 --> 00:24:53,430
different blood donor websites that were
compromised and used to see two so I i

346
00:24:53,430 --> 00:24:56,490
think we loosen up we said okay let's
look at all network traffic to anything

347
00:24:56,490 --> 00:25:01,140
with blood in the domain ridiculous
found two new systems that way they were

348
00:25:01,140 --> 00:25:05,280
both using different blood donor based
websites so give me an idea of how much

349
00:25:05,280 --> 00:25:08,280
we're kind of just fighting to keep up
okay

350
00:25:09,600 --> 00:25:14,100
the very last thing i want to talk about
is I think yep continuing to improve our

351
00:25:14,100 --> 00:25:17,790
indicators so we created indicators for
every stage of the life cycle at the end

352
00:25:17,790 --> 00:25:22,050
we had indicators for all seven
persistence mechanisms these methodology

353
00:25:22,050 --> 00:25:26,490
based indicators are kind of quarter
what we do behavioral type indicators so

354
00:25:26,490 --> 00:25:31,260
you find the system without known
malware are flare teams awesome the

355
00:25:31,260 --> 00:25:33,929
reverse engineers so they do

356
00:25:33,929 --> 00:25:37,559
dive on all the major revisions we
basically just triage and keep looking

357
00:25:37,559 --> 00:25:41,759
we maintain a list of high confidence
indicators to focus on where we need to

358
00:25:41,759 --> 00:25:47,159
be so like we've had seven ways of
finding see daddy and we kept that on a

359
00:25:47,159 --> 00:25:47,639
list

360
00:25:47,639 --> 00:25:53,908
not on a computer that's important
because after one weekend we came back

361
00:25:53,909 --> 00:25:57,360
with one way of finding them so they
changed enough things to evade six of

362
00:25:57,360 --> 00:26:00,779
the $YEAR like literally the different
indicators structure that we had

363
00:26:00,779 --> 00:26:05,070
searched for them for the other day was
working was these flexible and resilient

364
00:26:05,070 --> 00:26:10,019
indicators providing high fidelity
matching even that was resilient to

365
00:26:10,019 --> 00:26:12,990
anything they be able to change under
the hood as long as it's still a

366
00:26:12,990 --> 00:26:16,559
python-based backdoor your rapping with
stuff unless you wanna make a new back

367
00:26:16,559 --> 00:26:20,970
to our right there's going to be things
that stand out size ranges section name

368
00:26:20,970 --> 00:26:24,899
is compiled times stuff like that things
that you can change but they're a little

369
00:26:24,899 --> 00:26:26,610
bit harder to do so

370
00:26:26,610 --> 00:26:30,689
ok there see let's see daddy everyone
knows that right that's a picture of it

371
00:26:30,690 --> 00:26:35,700
i know so this is a representation of
how layered their malware what was and

372
00:26:35,700 --> 00:26:39,509
then what we did at each step so that
the bottom we have obvious cated python

373
00:26:39,509 --> 00:26:44,009
wrapped with it you know your pie
installer app ID exe to compile it on

374
00:26:44,009 --> 00:26:49,049
Windows then little bit hard to see
sorry just upx packed and pushed over

375
00:26:49,049 --> 00:26:54,269
SMB hit on some of that before but ok
going on the the middle we automated d

376
00:26:54,269 --> 00:26:58,649
code we wrote some decoders for these
configs so that we were just to speed

377
00:26:58,649 --> 00:27:01,559
things up then you look to repurpose
that ok now we can look for these

378
00:27:01,559 --> 00:27:05,908
configs look like with these search
terms in process memory enterprise by

379
00:27:05,909 --> 00:27:11,639
that was cool we we focused a lot on
these indicators for the packaging and

380
00:27:11,639 --> 00:27:15,570
delivery of the malware so turns out
when you run with pine startup IHC with

381
00:27:15,570 --> 00:27:17,999
default settings are getting one of to
compile times

382
00:27:17,999 --> 00:27:22,440
okay great if you run if you upx packet
with default settings or get section

383
00:27:22,440 --> 00:27:27,600
names of UPS 0u px1 ok these are things
that we build up and we worked on on the

384
00:27:27,600 --> 00:27:32,879
fire on the filesystem side Nicki was
changing those in adapting them to look

385
00:27:32,879 --> 00:27:35,998
anywhere else because they were cleaning
up so much so looking and process

386
00:27:35,999 --> 00:27:42,629
handles prefetch event logs anything
like that the real lesson here for the

387
00:27:42,629 --> 00:27:46,799
rapidly evolving tactics is just too
rapidly evolved you know yourself find

388
00:27:46,799 --> 00:27:47,158
it

389
00:27:47,159 --> 00:27:51,600
refine it refined it the toughest thing
I think for us was the first one here to

390
00:27:51,600 --> 00:27:56,309
enhance your best indicators even when
they're working so the tendency is to

391
00:27:56,309 --> 00:27:59,190
say yes that was awesome like soon as
you have something awesome that's where

392
00:27:59,190 --> 00:28:02,220
you need to go back and think well what
else could we have in case something

393
00:28:02,220 --> 00:28:07,259
changed and keep working and track they
can change for you lose it don't let

394
00:28:07,259 --> 00:28:10,320
that technical data fall between the
cracks there is some other utility for

395
00:28:10,320 --> 00:28:14,519
using it certainly when it comes time to
writing that lovely report about what

396
00:28:14,519 --> 00:28:15,240
happened

397
00:28:15,240 --> 00:28:20,820
so back to Matt to talk about the real
cool stuff that's the last we're going

398
00:28:20,820 --> 00:28:24,539
to talk about is some of the advanced
techniques that they were using this is

399
00:28:24,539 --> 00:28:27,629
stuff that we were aware of had done
research on but at the time this stuff

400
00:28:27,629 --> 00:28:32,998
wasn't as a as common as fashionable as
it is now a lot of steps kind of taken

401
00:28:32,999 --> 00:28:36,749
off and the first of these is windows
management instrumentation i'm sure

402
00:28:36,749 --> 00:28:40,649
everyone is familiar with w my now you
know this is an administrative framework

403
00:28:40,649 --> 00:28:43,678
that's been built into windows since the
nineties a lot of flexibility a lot of

404
00:28:43,679 --> 00:28:48,840
power really has become fashionable in
the last died last couple years so the

405
00:28:48,840 --> 00:28:54,090
attackers used w my pretty extensively
used to to persist back doors which this

406
00:28:54,090 --> 00:28:56,519
was actually the first time we've ever
encountered that in the wild

407
00:28:56,519 --> 00:29:00,269
we've done some really some papers on it
was cool to actually see it embedded

408
00:29:00,269 --> 00:29:03,690
backdoor files and powershell scripts
right in the w my repository so this is

409
00:29:03,690 --> 00:29:07,529
a file that sits on disk contains all of
that w my administrative data there's

410
00:29:07,529 --> 00:29:11,039
all kinds of cool stuff in there so we
can look at that file to ir look at it

411
00:29:11,039 --> 00:29:15,570
but then by putting all their data in
there to get created essentially like a

412
00:29:15,570 --> 00:29:18,899
file a solution if you didn't know to
look in that file you're not going to

413
00:29:18,899 --> 00:29:19,678
find it

414
00:29:19,679 --> 00:29:23,759
they use w my to steal credentials for
remote systems and to kick off processes

415
00:29:23,759 --> 00:29:27,509
are remote system so they didn't have to
use PS exactly scheduled tasks or any of

416
00:29:27,509 --> 00:29:30,840
those things that people look for their
able to do it very discreetly just right

417
00:29:30,840 --> 00:29:35,129
over w my and they may even configured
it to extract and execute backdoors

418
00:29:35,129 --> 00:29:39,928
months in the future in order to try to
evade our remediation efforts they also

419
00:29:39,929 --> 00:29:43,139
leverage powershell i would hope
everyone here knows the powershell is by

420
00:29:43,139 --> 00:29:47,939
this . this is kind of PowerShell
conference so I'm not gonna get too much

421
00:29:47,940 --> 00:29:50,310
into that but they used for stealthy
back doors

422
00:29:50,310 --> 00:29:54,300
really for every six is staged the
attack lifecycle they the attackers

423
00:29:54,300 --> 00:29:57,899
really love powershell for all of their
post exploitation so i guess that

424
00:29:57,900 --> 00:29:59,760
Jefferson over would be pleased

425
00:29:59,760 --> 00:30:04,140
these desktops i kin folk many cats
which at least at the time where were

426
00:30:04,140 --> 00:30:09,990
debating a detection very effectively I
had excellent wmi integration so this is

427
00:30:09,990 --> 00:30:13,890
really what they were using to pack all
of those w my attacks and kerberos

428
00:30:13,890 --> 00:30:17,820
kerberos obviously the authentication
protocol used in all modern windows

429
00:30:17,820 --> 00:30:21,840
domains they used a lot of Kerberos
ticket attacks which really made things

430
00:30:21,840 --> 00:30:26,189
a lot more difficult on us and then
we'll begin to that in a minute so the

431
00:30:26,190 --> 00:30:29,700
first we're going to talk about his w my
usage so the first thing we had to deal

432
00:30:29,700 --> 00:30:33,570
with was persistence is the first thing
we really saw them using it for just

433
00:30:33,570 --> 00:30:35,070
started out basically with us

434
00:30:35,070 --> 00:30:38,939
identifying activity by other means and
then getting onto the boxing trying to

435
00:30:38,940 --> 00:30:42,600
figure out okay where's the persistence
and essentially pulling up the objects

436
00:30:42,600 --> 00:30:46,020
that data file which is the main route
data repository from that summary bow

437
00:30:46,020 --> 00:30:50,250
and then just looking through it looking
for evidence of the persistence

438
00:30:50,250 --> 00:30:57,630
contained within this you know that 5200
makefile not not easy not scaling very

439
00:30:57,630 --> 00:31:00,750
well we eventually got to a point where
running a script across the environment

440
00:31:00,750 --> 00:31:03,450
to look for this but that's also not
great it's authenticating all over the

441
00:31:03,450 --> 00:31:07,410
place is pulling data back slowly kind
of kludgy thankfully some of our

442
00:31:07,410 --> 00:31:10,770
colleagues developed a custom audit for
our toolset that allowed us to look for

443
00:31:10,770 --> 00:31:14,310
this at scale and that was was a huge
benefit for us because all of a sudden

444
00:31:14,310 --> 00:31:18,419
we're actually finding this really
effectively and since w my persistence

445
00:31:18,420 --> 00:31:21,450
is very rarely used for anything
legitimate I've only seen like two

446
00:31:21,450 --> 00:31:27,930
legitimate w my persistence incidents in
in my entire career so pretty pretty

447
00:31:27,930 --> 00:31:31,590
good way to find attacker activity we
also identified evidence of attacker

448
00:31:31,590 --> 00:31:36,570
code in the w my repo so we're using a
really cool script and I probably have

449
00:31:36,570 --> 00:31:39,120
broken this out here because it is
actually pretty fun they had a

450
00:31:39,120 --> 00:31:42,780
powershell script that would connect to
a remote system / WI they would write

451
00:31:42,780 --> 00:31:47,310
the they would create a w my class which
is basically just what you think it is

452
00:31:47,310 --> 00:31:51,360
and two properties for that class which
are just like text fields into the first

453
00:31:51,360 --> 00:31:55,169
one they would write the contents of the
invoke me cat script then they would

454
00:31:55,170 --> 00:32:00,120
send over a command to run powershell
and to execute the contents of that

455
00:32:00,120 --> 00:32:03,909
property in power show which would then
run invoking

456
00:32:03,910 --> 00:32:06,910
meerkats and then they would write the
output from that into the other property

457
00:32:06,910 --> 00:32:11,560
also stored in the w my repository and
then it would read this from the remote

458
00:32:11,560 --> 00:32:15,429
system and then they would delete the
class which at least in theory should

459
00:32:15,430 --> 00:32:19,150
just wipe all of this way but what's
great is the w my repo kind of has like

460
00:32:19,150 --> 00:32:22,840
a slack space it doesn't like resize the
file all the times when you delete

461
00:32:22,840 --> 00:32:25,659
things that kind of sit there for a bit
until they get overwritten so we're able

462
00:32:25,660 --> 00:32:29,980
to find systems where they done this
pull out some indicators from it and

463
00:32:29,980 --> 00:32:33,430
then look at the contents of these
objects . data files at scale across the

464
00:32:33,430 --> 00:32:37,210
enterprise and fine systems that they'd
access this way and that they did some

465
00:32:37,210 --> 00:32:41,620
other things with embedding things w
might as well which we also you know how

466
00:32:41,620 --> 00:32:46,479
to kind of address there but really just
being able to look at this scale was it

467
00:32:46,480 --> 00:32:51,160
was a big benefit we also have to parse
out in bed scripts and malware so we

468
00:32:51,160 --> 00:32:55,090
found instances where they would create
these properties and start writing you

469
00:32:55,090 --> 00:32:58,449
know three-and-a-half megabyte
executable files into the base 64

470
00:32:58,450 --> 00:33:02,380
encoded or scripts or whatever we have
to find ways to pull this out and this

471
00:33:02,380 --> 00:33:07,300
is kind of non-trivial is a very large
file and over a certain size it will

472
00:33:07,300 --> 00:33:11,110
automatically chop this file up into
pieces and write it different offsets

473
00:33:11,110 --> 00:33:15,429
throughout the file and if you don't
have a parser for this which didn't

474
00:33:15,430 --> 00:33:19,690
exist at the time it's very difficult to
pull these pieces back together get them

475
00:33:19,690 --> 00:33:22,270
into the right order and get them to
work properly especially when they

476
00:33:22,270 --> 00:33:25,180
started using a lot of encryption so
that if he didn't get all the pieces are

477
00:33:25,180 --> 00:33:29,980
didn't have them associated right you're
pretty much a lot so we were able to do

478
00:33:29,980 --> 00:33:31,450
that we kind of just work at it

479
00:33:31,450 --> 00:33:35,560
thankfully a willy Matt and Claudio did
some great work

480
00:33:35,560 --> 00:33:40,000
reverse-engineering this repository and
made parcels for Willie's in particular

481
00:33:40,000 --> 00:33:43,690
is awesome it's python-based and it will
fully parts out this repository so you

482
00:33:43,690 --> 00:33:48,880
can get to every every class every every
property every piece of data that's in

483
00:33:48,880 --> 00:33:51,640
there you can just parts right out
there's even a little gooey for it's

484
00:33:51,640 --> 00:33:52,840
fantastic

485
00:33:52,840 --> 00:33:55,179
it would have saved us a ton of time
unfortunately they didn't release until

486
00:33:55,180 --> 00:34:00,430
we were done so well this is an example
of the kind of strings were looking for

487
00:34:00,430 --> 00:34:03,790
especially at the beginning you can see
I'm at the top there's an event filter

488
00:34:03,790 --> 00:34:07,240
essentially this determines when is
something going to happen and this is a

489
00:34:07,240 --> 00:34:13,270
pretty classic like at startup kind of
consumer I excuse me

490
00:34:13,270 --> 00:34:14,330
filter

491
00:34:14,330 --> 00:34:17,420
advanced the bottom you see the
command-line consumer this is basically

492
00:34:17,420 --> 00:34:21,050
what's going to happen so in this case
it's going to run that log on you i dot

493
00:34:21,050 --> 00:34:24,380
exe which is just to see daddy backdoor
sitting on disk isn't the most

494
00:34:24,380 --> 00:34:27,950
complicated thing and then in the middle
you see there's a filter to consumer

495
00:34:27,949 --> 00:34:33,949
buying which basically pairs these two
things texting world will talk about his

496
00:34:33,949 --> 00:34:37,370
power shell so the attacker use
powershell for basically everything I

497
00:34:37,370 --> 00:34:41,569
was there their favorite way to operate
when we got there pretty much everything

498
00:34:41,570 --> 00:34:43,370
in powershell too . on it

499
00:34:43,370 --> 00:34:46,880
partial to . no logs just enough to let
you know that something happened in

500
00:34:46,880 --> 00:34:52,190
powershell and basically nothing else
provides no real context we were able to

501
00:34:52,190 --> 00:34:55,520
upgrade the environment to powershell
three and enable module logging logging

502
00:34:55,520 --> 00:34:59,480
is a whole lot better now with
powershell versions 45 but even three

503
00:34:59,480 --> 00:35:02,720
provided a ton of really valuable
information to capture the input and

504
00:35:02,720 --> 00:35:08,359
output variable initialization entire
functions of PS scripts attacker command

505
00:35:08,360 --> 00:35:13,610
script output all kinds of stuff we're
able to identify basically every stage

506
00:35:13,610 --> 00:35:18,020
of their attack life cycle using this so
we could see and we wrote indicators

507
00:35:18,020 --> 00:35:23,420
that we were able to look at scale for
any time that they moved laterally their

508
00:35:23,420 --> 00:35:28,760
unique backdoors credential theft data
theft recon persistence creation

509
00:35:28,760 --> 00:35:32,060
I mean they were doing things like for
most of the data that they would use a

510
00:35:32,060 --> 00:35:36,470
powershell script paired with the
legitimate exchange dll to pull data

511
00:35:36,470 --> 00:35:40,370
from the exchange server from just any
arbitrary host so they would run this

512
00:35:40,370 --> 00:35:44,779
specifying account specified they want
you know the inbox sent items deleted

513
00:35:44,780 --> 00:35:48,020
items and then just pull all of that
stuff down to the system but this

514
00:35:48,020 --> 00:35:51,230
resulted in them writing out all of
these individual files for every email

515
00:35:51,230 --> 00:35:54,560
and so we would see the names of all of
these emails even after they were

516
00:35:54,560 --> 00:35:57,230
deleted they were just recorded right
there in the logs we threw together a

517
00:35:57,230 --> 00:36:01,040
quick parser and then we now have a list
of stolen emails we can handle the

518
00:36:01,040 --> 00:36:05,060
client like here you go this is what
they took so I mean that that level of

519
00:36:05,060 --> 00:36:11,330
visibility into their activity was just
fantastic and also being able to look

520
00:36:11,330 --> 00:36:14,420
for this at scale really turn their
usage of PowerShell from a threat to a

521
00:36:14,420 --> 00:36:18,530
benefit that they went from having an
extremely powerful tool set that you

522
00:36:18,530 --> 00:36:22,280
know gives them really nice arbitrary
code execution without having an

523
00:36:22,280 --> 00:36:25,730
executable on the system to basically we
have a transcript of everything they're

524
00:36:25,730 --> 00:36:26,020
doing

525
00:36:26,020 --> 00:36:32,470
we now have we do have a blog post up
that kind of define some of that log in

526
00:36:32,470 --> 00:36:35,410
and some of that details as well so i
would encourage you to take a look at

527
00:36:35,410 --> 00:36:38,290
that and if you don't have powers are
logging i would definitely encourage you

528
00:36:38,290 --> 00:36:43,090
to consider getting that enable this is
an example of what a module log entry

529
00:36:43,090 --> 00:36:46,750
looks like so you can see there's the
command path which will show actually

530
00:36:46,750 --> 00:36:51,340
which script ran which here at sea
windows tamp dying 3 . ps1 and then down

531
00:36:51,340 --> 00:36:54,160
below you see the actual output that
this was trying to write out to the

532
00:36:54,160 --> 00:36:59,740
console which would have been the actual
output from many cats if you're familiar

533
00:36:59,740 --> 00:37:03,399
with it all at all you allow you
recognize it and this particular

534
00:37:03,400 --> 00:37:08,230
instance they're using a kerberos past
the ticket attack with file one . karb

535
00:37:08,230 --> 00:37:14,200
this is them authenticating to remote
system using a Kerberos ticket attack so

536
00:37:14,200 --> 00:37:17,799
devastating attacks particularly
annoying because they do a few things

537
00:37:17,800 --> 00:37:23,590
that really kind of throw a wrench in a
traditional ir process first is that

538
00:37:23,590 --> 00:37:27,280
when you generate these tickets you
actually submitting a forge ticket once

539
00:37:27,280 --> 00:37:33,550
you get the kar bt password hash you can
actually sign these tickets yourself and

540
00:37:33,550 --> 00:37:36,550
so you don't you basically define
whatever you want these tickets and then

541
00:37:36,550 --> 00:37:40,600
sign it and the remote system will
accept it is valid so you can just go

542
00:37:40,600 --> 00:37:43,720
around authenticating two systems as
Batman if you want with full

543
00:37:43,720 --> 00:37:46,810
administrative privileges and there's
literally nothing that's going to stop

544
00:37:46,810 --> 00:37:47,440
you

545
00:37:47,440 --> 00:37:50,710
instead of doing that with a the
attacker didn't this instances they

546
00:37:50,710 --> 00:37:53,890
enumerated everything in active
directory which is light and the first

547
00:37:53,890 --> 00:37:57,310
thing they do they come in the numerator
your entire ad and they just steal it

548
00:37:57,310 --> 00:38:01,120
and so they would randomly they would
either randomly selecting the counter

549
00:38:01,120 --> 00:38:04,000
they would select account that's
associated with the machine that they

550
00:38:04,000 --> 00:38:08,050
were logging onto and use that account
but they would give an unprivileged

551
00:38:08,050 --> 00:38:12,220
account full domain admin privileges so
they're logging on using what looks like

552
00:38:12,220 --> 00:38:15,939
a legitimate account but now all of a
sudden has domain admin and in some

553
00:38:15,940 --> 00:38:19,540
environments this might not be so bad if
you have a finite number of admins that

554
00:38:19,540 --> 00:38:23,740
could work but this environment was so
large and there were so many admins to

555
00:38:23,740 --> 00:38:28,359
kind couldn't even give us a list of who
was actually a legitimate admin so it's

556
00:38:28,360 --> 00:38:33,820
always kind of you know guess and check
so we started out basically looking for

557
00:38:33,820 --> 00:38:36,910
other evidence of attackers accessing
these systems and then kind of

558
00:38:36,910 --> 00:38:38,920
backtracking and finding

559
00:38:38,920 --> 00:38:42,280
evidence of these kerberos logs and
figuring out where they came from

560
00:38:42,280 --> 00:38:45,609
oh the other thing I failed to mention
is that when you do this when you do a

561
00:38:45,609 --> 00:38:48,759
meanie cats past the ticket attack in
order to authenticate to remote system

562
00:38:48,760 --> 00:38:53,740
it doesn't generate an explicit login
event so when we do I are typically if

563
00:38:53,740 --> 00:38:57,069
we see an attacker access remote system
we get these explicit login events we

564
00:38:57,069 --> 00:38:59,740
can see what account they used with
system access and we can just kind of

565
00:38:59,740 --> 00:39:04,779
follow this trail down the line with
this there that event is never generated

566
00:39:04,780 --> 00:39:07,359
so you can tell when you see that in the
logs that they are authenticated

567
00:39:07,359 --> 00:39:11,890
somewhere but there's no real way to
tell where unless you have like very my

568
00:39:11,890 --> 00:39:15,339
new level net flow or some other kind of
indicator which we didn't have available

569
00:39:15,339 --> 00:39:19,210
to us so we could backtrack we could
find systems were compromised figure out

570
00:39:19,210 --> 00:39:21,970
where they came from kind of walk back
up that compromised change but you

571
00:39:21,970 --> 00:39:27,578
couldn't walk it out the way most most I
our teams would do so yeah we really

572
00:39:27,579 --> 00:39:31,210
have to just keep looking at the end .
get that visibility at scale find

573
00:39:31,210 --> 00:39:31,809
evidence

574
00:39:31,809 --> 00:39:36,280
look at those track it back eventually
we develop some indicators based on

575
00:39:36,280 --> 00:39:41,680
research Sean McAfee at 80 security dorg
if you don't if you do I are or

576
00:39:41,680 --> 00:39:44,680
forensics and you don't frequent that
site you should change that infrequent

577
00:39:44,680 --> 00:39:49,419
that site but he does some fantastic
work there he developed that research

578
00:39:49,420 --> 00:39:52,599
lately investigation but it was
extremely high fidelity and I'm forever

579
00:39:52,599 --> 00:39:55,720
grateful that he did that because I did
not have the time to do that in the

580
00:39:55,720 --> 00:39:59,529
middle of this investigation so that
worked out really well here's some of

581
00:39:59,530 --> 00:40:03,339
the kinds of indicators we were looking
for at the time so in windows 7 system

582
00:40:03,339 --> 00:40:08,799
you won't see the fqdn of the domain in
a 4624 event so I mean this is kind of

583
00:40:08,799 --> 00:40:13,750
trace stuff right like the empty account
domain in the 4672 and and 4634 events

584
00:40:13,750 --> 00:40:18,220
really trace items but really valuable
as indicators unfortunately all of these

585
00:40:18,220 --> 00:40:22,299
things that since been patched so none
of this works anymore i guess this is

586
00:40:22,299 --> 00:40:27,640
you know what happens when when people
do good work in and disclose indicators

587
00:40:27,640 --> 00:40:32,589
everything gets patched so there are no
good end . indicators for Kerberos

588
00:40:32,589 --> 00:40:36,069
ticket attacks that are currently
disclosed so look

589
00:40:38,160 --> 00:40:43,230
so but slide even more w my powershell
so this was a particularly interesting

590
00:40:43,230 --> 00:40:45,780
one that kind of pulled all three of
these things together so that the

591
00:40:45,780 --> 00:40:51,000
attacker authenticated to this system
using a Kerberos ticket attack they went

592
00:40:51,000 --> 00:40:55,140
in and used a powershell system on the
source system that they logged on from

593
00:40:55,140 --> 00:41:01,140
random script and it created this w my
persistence this one's a little

594
00:41:01,140 --> 00:41:04,259
different from the one we saw before
it's set to only to run on the first

595
00:41:04,260 --> 00:41:12,720
second fourth fifth and six days of the
week at 1223 at this thing will run this

596
00:41:12,720 --> 00:41:19,770
included command block and so when we
dug into this we found that the there

597
00:41:19,770 --> 00:41:23,130
was a bunch of a like crypto contained
in this block with the the really

598
00:41:23,130 --> 00:41:28,260
relevant part was this which essentially
is going through and its defining a w my

599
00:41:28,260 --> 00:41:33,930
class and property and it's grabbing
that value its decrypting it using a yes

600
00:41:33,930 --> 00:41:38,788
and another function i didn't include
and then is executing it so now when we

601
00:41:38,789 --> 00:41:45,720
go back and look and pull out that rack
task hive upload task property grab the

602
00:41:45,720 --> 00:41:49,169
value of that which as I mentioned
earlier took quite a while and was

603
00:41:49,170 --> 00:41:53,250
actually pretty difficult to get that
data out of the repo we found that was a

604
00:41:53,250 --> 00:41:57,990
backdoor sitting there that actually
used a domain generation algorithm and

605
00:41:57,990 --> 00:42:02,578
would reach out and pull down an
additional file from its ce2 and run

606
00:42:02,579 --> 00:42:07,589
that in memory so really sneaky backdoor
I've seen this reference recently and

607
00:42:07,589 --> 00:42:12,029
something about the DNC but so they're
obviously you know they've been using it

608
00:42:12,029 --> 00:42:15,089
they they use this a lot this is one of
their their favorite kind of sneaky

609
00:42:15,089 --> 00:42:18,119
persistent backdoors I don't know how
much they'll be using it now that's kind

610
00:42:18,119 --> 00:42:22,380
of you know that this possum kind of
blown up on that one also interesting is

611
00:42:22,380 --> 00:42:26,220
the different number of these back doors
that we saw the attacker actually test

612
00:42:26,220 --> 00:42:29,848
before deploying so that was one of the
really interesting things to know that a

613
00:42:29,849 --> 00:42:32,460
lot of the things they were doing here
where things that they were coming up

614
00:42:32,460 --> 00:42:35,819
just to mess with us as opposed to
things that they already had kind of

615
00:42:35,819 --> 00:42:38,940
hanging out there are some because we
teach early versions of stuff that they

616
00:42:38,940 --> 00:42:42,690
just kind of like drop and run so we saw
like a powershell script just sitting on

617
00:42:42,690 --> 00:42:45,599
disk they kind of dropped and run just
to get I just kind of see if it would

618
00:42:45,599 --> 00:42:48,720
work in a live environment and then they
kind of tweaked in refined and then they

619
00:42:48,720 --> 00:42:50,089
started deploying it

620
00:42:50,090 --> 00:42:53,360
actually in the w my repository and we
saw that with a few of the different

621
00:42:53,360 --> 00:42:56,690
tools here that they're actually going
through that testing cycle on our

622
00:42:56,690 --> 00:43:02,420
network while we were trying to respond
to it so the lesson from this is to use

623
00:43:02,420 --> 00:43:03,770
attacker strikes against them

624
00:43:03,770 --> 00:43:07,790
these really kind of advanced stealthy
crazy attacks can make for really good

625
00:43:07,790 --> 00:43:11,029
indicators because there's not a lot of
activity on your environment is going to

626
00:43:11,030 --> 00:43:14,930
look like this so if you can find it at
scale and get that visibility you can

627
00:43:14,930 --> 00:43:20,899
really take advantage of this to just go
about that incident to get a really good

628
00:43:20,900 --> 00:43:25,580
perspective on what the attackers doing
and that's where this in just because i

629
00:43:25,580 --> 00:43:26,330
think it's cool

630
00:43:26,330 --> 00:43:30,319
it doesn't really fit in anywhere but
the attackers three hours before we were

631
00:43:30,320 --> 00:43:33,170
supposed to go into remediation so we're
talking about how we tried to trick them

632
00:43:33,170 --> 00:43:36,140
and obviously didn't work because they
drop this thing in on three or four

633
00:43:36,140 --> 00:43:40,759
systems like literally three hours
before the internet got cut off so it

634
00:43:40,760 --> 00:43:44,150
was a backdoor that utilize tor hidden
services so this is the same sort of

635
00:43:44,150 --> 00:43:47,810
thing you see on the Silk Road or
something like that but instead of

636
00:43:47,810 --> 00:43:51,620
redirecting and basically this results
in portree direction right so traffic

637
00:43:51,620 --> 00:43:55,790
comes in from tour it hit certain ports
those ports get redirected to you

638
00:43:55,790 --> 00:44:00,259
typically like the you know 80 443 like
all your website reports but instead of

639
00:44:00,260 --> 00:44:05,150
doing that what they did was redirected
it to remote desktop netbios and SMB all

640
00:44:05,150 --> 00:44:09,920
of your remote access ports they also
updated the registry to enable rdp and

641
00:44:09,920 --> 00:44:14,600
they did the stickies you know exploit
its really an exploit so that they could

642
00:44:14,600 --> 00:44:19,100
get authenticated privilege console
access when they r DP and the rdp in

643
00:44:19,100 --> 00:44:23,990
they they get to that front page which
shouldn't even be an option anymore but

644
00:44:23,990 --> 00:44:28,310
you know backwards compatibility is
apparently paramount and they just you

645
00:44:28,310 --> 00:44:32,990
know hit the button and and up pops
they're on there at system-level prompt

646
00:44:32,990 --> 00:44:35,720
and then they can go in and create new
accounts do whatever they need to do to

647
00:44:35,720 --> 00:44:40,819
get back in after we do a password reset
so what is meakin and why are they using

648
00:44:40,820 --> 00:44:45,440
this week plug-in what is this for well
if you're going to run tore off of an

649
00:44:45,440 --> 00:44:49,970
end . that's going to be pretty noisy is
very distinct traffic and very easy to

650
00:44:49,970 --> 00:44:55,339
sig so the Tor project released this
plugin called meek which is pretty cool

651
00:44:55,340 --> 00:44:59,900
the way it works so this is actually the
config from that tor server so you can

652
00:44:59,900 --> 00:45:01,480
see that they hid it under

653
00:45:01,480 --> 00:45:07,090
program files x86 google / data so they
renamed everything to look like google

654
00:45:07,090 --> 00:45:10,420
update you know kind of things just
trying to be discreet

655
00:45:10,420 --> 00:45:16,450
you can see here that the bottom the
hidden service ports redirecting there

656
00:45:16,450 --> 00:45:21,819
was also a secondary configuration had
the actual host the hidden tor hidden

657
00:45:21,820 --> 00:45:26,950
service host name and password and all
that information as well so meek goes

658
00:45:26,950 --> 00:45:31,240
through after resting up so you see here
in the middle client transport plug-in

659
00:45:31,240 --> 00:45:38,319
meek right so URL me reflect on appspot
com front is google com essentially what

660
00:45:38,320 --> 00:45:44,320
this does is on the end . the data will
come through from the server it will go

661
00:45:44,320 --> 00:45:49,180
through the meat plug-in to meet plug-in
will take it wrap it in SL that looks

662
00:45:49,180 --> 00:45:53,950
like it's destined for google.com it
will send that connection out establish

663
00:45:53,950 --> 00:45:58,810
a connection with you know google com
server using the legit google.com SL

664
00:45:58,810 --> 00:46:05,140
going to a legit google com IP this
exploits a kind of a trick of the way

665
00:46:05,140 --> 00:46:08,560
that allows these clouds work like
Google's cloud cloudflare couple other

666
00:46:08,560 --> 00:46:12,670
providers we're essentially if you send
something to one of their servers if it

667
00:46:12,670 --> 00:46:15,700
ends up at the wrong server the server
will automatically redirected anywhere

668
00:46:15,700 --> 00:46:19,118
else in exile out so what it's doing
here is it gets to to google.com

669
00:46:19,119 --> 00:46:25,060
google.com strips off the SL and notices
that the HTTP header actually says meet

670
00:46:25,060 --> 00:46:29,650
reflected on appspot com because google
bought appspot it's in the Google cloud

671
00:46:29,650 --> 00:46:35,410
now so that traffic gets redirected to
make reflected on ask.com meet reflector

672
00:46:35,410 --> 00:46:39,339
then takes that traffic reassembles it
into tour traffic out of those HTTP

673
00:46:39,340 --> 00:46:43,300
packets and dumps it out onto the Tor
network and then the Tor network you

674
00:46:43,300 --> 00:46:47,950
know it goes over to apt 29 sitting
there on the other end . so then from a

675
00:46:47,950 --> 00:46:52,060
network perspective what you see is a
connection from a desktop to google.com

676
00:46:52,060 --> 00:46:58,119
using google com SL at google.com IP how
cool is that

677
00:46:59,589 --> 00:47:07,690
yeah I said also that brings up a good
point we've never actually discussed

678
00:47:07,690 --> 00:47:11,319
this anywhere so you are the first
people ever to see this outside of our

679
00:47:11,319 --> 00:47:16,420
company so cool so if you learn nothing
else today

680
00:47:16,960 --> 00:47:20,890
you really have to meet or exceed your
attackers pace their visibility the

681
00:47:20,890 --> 00:47:24,279
development cycle their advanced
techniques and ultimately after meet or

682
00:47:24,279 --> 00:47:27,609
exceed their intensity you have to be
willing to commit and really put the

683
00:47:27,609 --> 00:47:32,229
work in to to overcome them with which
with a an attacker like this it has the

684
00:47:32,229 --> 00:47:39,519
resources that they have that can take a
lot of effort and with that we will take

685
00:47:39,519 --> 00:47:54,549
any questions a couple minutes calendar
time was 68 months I mean we were there

686
00:47:54,549 --> 00:47:58,359
for eight months in total but some of
that was posted mediation monitor a lot

687
00:47:58,359 --> 00:48:01,450
of that time frame was driven by
basically how much time they needed to

688
00:48:01,450 --> 00:48:05,019
prepare the remediation step so we gave
them a pretty extensive list of things

689
00:48:05,019 --> 00:48:09,339
they needed to do to try to end this and
it took him quite a while to be able to

690
00:48:09,339 --> 00:48:15,609
prep all of that I don't think we ever
disclosed contract dollar amounts for

691
00:48:15,609 --> 00:48:32,019
for people not to bad given reference so
i mean we have an entire Intel group

692
00:48:32,019 --> 00:48:35,109
which is made up of all kinds of people
have done fun things interesting places

693
00:48:35,109 --> 00:48:39,670
so they're the ones that actually do the
official attribution so basically we had

694
00:48:39,670 --> 00:48:45,460
seen a lot of their tools at their TTP's
before we had you know good conformation

695
00:48:45,460 --> 00:48:51,940
based on the particular fishing campaign
like a b-29 doesn't try that hard not to

696
00:48:51,940 --> 00:48:54,969
be attributed they really don't they
don't seem to really care because I

697
00:48:54,969 --> 00:48:58,809
think they realize we're not going to
really do anything about it so yeah I

698
00:48:58,809 --> 00:49:03,009
mean that the attribution on this was
who's apparently very straightforward

699
00:49:03,009 --> 00:49:08,890
and yet there was not really a lot of
other activity from other groups were

700
00:49:08,890 --> 00:49:13,118
kind of pretty familiar with them so we
we recognize immediately what it was

701
00:49:13,119 --> 00:49:15,759
then there was a lot of other activity
which was surprising here given the

702
00:49:15,759 --> 00:49:19,779
length of it we normally run into
historical evidence or other things

703
00:49:19,779 --> 00:49:25,269
going on but it was all the same group
plus when you see what data they're

704
00:49:25,269 --> 00:49:30,819
targeting we have that visibility that
makes it a lot more high confidence but

705
00:49:30,819 --> 00:49:44,410
we tried to i like it i think i talked
about some of ours were trying to imply

706
00:49:44,410 --> 00:49:50,828
anything on the file system to anywhere
else we could to capture it was running

707
00:49:50,829 --> 00:49:53,650
so actually some of the times before
they were doing one of the things they

708
00:49:53,650 --> 00:49:56,559
do is they actually delete their
backdoor from disappearing like they

709
00:49:56,559 --> 00:50:00,339
don't care to persist that screws up a
lot of the ways we're finding it so they

710
00:50:00,339 --> 00:50:05,109
need to find it in memory so we we had
we just applied our regular techniques

711
00:50:05,109 --> 00:50:10,569
we did collect memory Thompson did some
volatility stuff with it i'm not good

712
00:50:10,569 --> 00:50:15,249
enough at it and it didn't scale but
it's definitely another option to pursue

713
00:50:15,249 --> 00:50:16,209
these guys that way

714
00:50:16,210 --> 00:50:39,039
general it so they were legit web
servers and as i understand it they were

715
00:50:39,039 --> 00:50:42,400
going around hitting the same exploit
essentially on all of them so they were

716
00:50:42,400 --> 00:50:46,269
just scanning the internet finding a
vulnerable site hitting it owning it and

717
00:50:46,269 --> 00:50:48,910
then using a c2 and then they just burn
it

718
00:50:48,910 --> 00:50:51,910
they never use it again

719
00:50:56,440 --> 00:51:01,989
yeah and then it was sl4 the compromised
websites too so you couldn't even really

720
00:51:01,989 --> 00:51:04,509
look for what was going on in the
traffic

721
00:51:04,509 --> 00:51:09,009
yeah it does not like a magic solution
that unfortunately

722
00:51:11,520 --> 00:51:18,240
not really important we responded on the
infrastructure side a couple times and

723
00:51:18,240 --> 00:51:23,520
it's not a lot out there there is they
adapt as much on that side when they set

724
00:51:23,520 --> 00:51:37,259
it up as well say the successful part
what why were part of why we were

725
00:51:37,260 --> 00:51:38,100
successful

726
00:51:38,100 --> 00:51:42,000
yeah so I essentially they didn't work
because there were just too many systems

727
00:51:42,000 --> 00:51:45,030
into many different ways for them to
persist so they were constantly coming

728
00:51:45,030 --> 00:51:48,150
out with new back doors and they were
basically tricking the client

729
00:51:48,150 --> 00:51:51,990
organization with that so they would
miss back doors they would miss

730
00:51:51,990 --> 00:51:55,529
different crazy persistence mechanisms
and they just wouldn't be able to do it

731
00:51:55,530 --> 00:51:58,440
not to mention it's hard to catch up
when there's so many compromised systems

732
00:51:58,440 --> 00:52:01,410
all the time and you have to know your
full scope and if you're really going to

733
00:52:01,410 --> 00:52:04,950
be able to remediate one of the things
we did that was successful was we got

734
00:52:04,950 --> 00:52:08,819
them to stop pulling systems offline
that had to sneak your back doors so

735
00:52:08,820 --> 00:52:11,880
they kept pulling the main back door but
at least with the stealthier stuff they

736
00:52:11,880 --> 00:52:16,110
stopped and we think that contributed to
success because it made the the attack

737
00:52:16,110 --> 00:52:19,620
released kind of complacent that they
had three or four different sneaky back

738
00:52:19,620 --> 00:52:22,620
doors in place that we could have found
all of them

739
00:52:23,910 --> 00:52:27,210
yeah so we cut the internet pull
everything off at once to our mediation

740
00:52:27,210 --> 00:52:34,230
with steps password changes and then
pull it back up and monitor three days

741
00:52:34,230 --> 00:52:41,340
and it's a very very large environment
and the client had a lot of remediation

742
00:52:41,340 --> 00:52:43,260
steps in order to try to respond to this

743
00:52:43,260 --> 00:52:46,980
so that's why I took that long we try to
keep it as short as possible and we're

744
00:52:46,980 --> 00:52:49,140
at a time but will be will be around

