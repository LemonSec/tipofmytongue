1
00:00:00,000 --> 00:00:03,419
I think we're getting started

2
00:00:03,419 --> 00:00:08,189
alright everybody my name is Adam this
is graded this our talk

3
00:00:08,189 --> 00:00:13,920
finding a weak link attack videos audio
drivers so today we're going to talk

4
00:00:13,920 --> 00:00:16,948
about some of the reasons that
motivation is what we came up with this

5
00:00:16,949 --> 00:00:22,650
research and also a methodology that was
merged as a result we're also going to

6
00:00:22,650 --> 00:00:25,799
talk about some of buzzing tools and
techniques that we use during this

7
00:00:25,800 --> 00:00:30,840
process as well as a new messaging to
reverse engineering tool created to help

8
00:00:30,840 --> 00:00:32,278
aid in the process

9
00:00:32,279 --> 00:00:36,390
finally we're going to talk about some
of the bugs that we found its own car

10
00:00:36,390 --> 00:00:42,059
drivers and single up sometime like
questions first

11
00:00:42,629 --> 00:00:48,269
a little about us upgrading and I our
security consultant at NC seeker for

12
00:00:48,270 --> 00:00:51,870
people that don't know I see group
offers out penetration testing services

13
00:00:51,870 --> 00:00:54,480
and other security-related its services

14
00:00:54,480 --> 00:01:01,440
basically they have to break stuff cool
we're mostly interested us and kind of

15
00:01:01,440 --> 00:01:06,570
like a native application security and
reverse engineering fun talk about us is

16
00:01:06,570 --> 00:01:13,320
that we both attended and graduated from
university warrior now before we got

17
00:01:13,320 --> 00:01:17,220
started this research we kind of noticed
that most of the information that will

18
00:01:17,220 --> 00:01:21,960
sort it out for having going after
windows Carl Hobbs was targeted towards

19
00:01:21,960 --> 00:01:27,419
two specific audiences either kernel
driver developers have been doing it for

20
00:01:27,420 --> 00:01:31,290
like several years or kinda like your
first hello world program you just

21
00:01:31,290 --> 00:01:36,150
adjust her to us didn't really seem like
the best audience choice for these kind

22
00:01:36,150 --> 00:01:39,450
of the tags and we wanted this is kind
of our motivation to create our own

23
00:01:39,450 --> 00:01:44,070
technology so we decided we want to make
a methodology that somebody that had

24
00:01:44,070 --> 00:01:47,250
some native application security
experience but maybe not necessarily

25
00:01:47,250 --> 00:01:53,310
have got down like Carl and could use to
find someone knows Carl bonds and so we

26
00:01:53,310 --> 00:01:57,060
did some brainstorming and we came up
with three specific goals that we want

27
00:01:57,060 --> 00:02:02,399
to satisfy the first one was obviously
to kind of create this methodology that

28
00:02:02,399 --> 00:02:07,920
focus on making it easy do you recruit
small and sort of someone efficient

29
00:02:07,920 --> 00:02:11,760
and in order to realize that you that
we're probably gonna have to either

30
00:02:11,760 --> 00:02:18,030
create some new tools or modify some
existing ones and then finally of course

31
00:02:18,030 --> 00:02:23,220
no methodology matters and we don't have
bugs and so that case we want to make

32
00:02:23,220 --> 00:02:27,060
sure that we are specifically going to
find bugs and fully passed those type of

33
00:02:27,060 --> 00:02:32,730
situations so where do you even begin
starting trying to create like that kind

34
00:02:32,730 --> 00:02:34,140
of technology

35
00:02:34,140 --> 00:02:37,619
well I know how we did it and we
basically began by asking is also very

36
00:02:37,620 --> 00:02:43,410
simple questions such as where it's most
likely going to be found and since we're

37
00:02:43,410 --> 00:02:46,620
kind of you know naturally looking at
windows kernel driver you might think

38
00:02:46,620 --> 00:02:51,720
well what about my just help drivers and
this is not necessarily the worst thing

39
00:02:51,720 --> 00:02:52,830
to think about me

40
00:02:52,830 --> 00:02:55,830
they are going to be present prevalent
any windows installation

41
00:02:56,430 --> 00:03:01,319
additionally they have issues in the
past that means said

42
00:03:02,580 --> 00:03:06,959
microsoft has done you know some very
recent things to improve the driver

43
00:03:06,959 --> 00:03:11,489
security model and you know based on
this thing you can still find bugs in

44
00:03:11,489 --> 00:03:15,299
Microsoft driver there you know rigorous
security development lifecycle

45
00:03:15,299 --> 00:03:21,120
definitely makes it less of a target on
the other hand OEM ones they don't

46
00:03:21,120 --> 00:03:24,900
necessarily have that same level of
security and send it to them and so we

47
00:03:24,900 --> 00:03:30,450
chose that your targets so sort of the
natural second question that follows

48
00:03:30,450 --> 00:03:35,578
from that it's okay well how are you
finding bugs and kind of keeping along

49
00:03:35,579 --> 00:03:41,010
with the methodology of efficient easy
to do a reversible process we decided to

50
00:03:41,010 --> 00:03:46,769
go with minimal effort a game buzzing
and then sort of a final question we

51
00:03:46,769 --> 00:03:50,579
asked was ok well other people have
stuff that they've got in this area like

52
00:03:50,579 --> 00:03:54,900
methodology so awesome for how can we
improve upon any of those existing

53
00:03:54,900 --> 00:04:00,299
processes and we decided that you know
we really wanted to create a tool so how

54
00:04:00,299 --> 00:04:03,720
awesome ate some things worse
engineering process and we are hoping

55
00:04:03,720 --> 00:04:10,109
that this will help satisfy that
question so we have our setting a goal

56
00:04:10,109 --> 00:04:12,700
we wanted to create or modify some
system tools

57
00:04:12,700 --> 00:04:16,630
and since we knew that we were going to
be doing buzzing garbled hunting method

58
00:04:16,630 --> 00:04:21,608
we're like okay we have two choices you
can either create new ones car driver

59
00:04:21,608 --> 00:04:26,710
buzzer not happening or we can modify an
existing one and so we obviously decided

60
00:04:26,710 --> 00:04:31,180
to go with modify existing one and we
focus our time on extending its

61
00:04:31,180 --> 00:04:36,610
functionality but extra features and bug
fixes and then the second idea wasn't

62
00:04:36,610 --> 00:04:41,110
course we wanted to create this tool and
so we decided we're going to create a

63
00:04:41,110 --> 00:04:46,780
tool to help of our meeting the reverse
engineering process using ipython and

64
00:04:46,780 --> 00:04:50,169
then finally obviously the most
important role as we want to find bugs

65
00:04:50,169 --> 00:04:55,960
and fully 10-1 fully pass windows 10
installations 325 those clubs the

66
00:04:55,960 --> 00:04:59,080
methodology was sort of worthless lucky
guys did all this research will check it

67
00:04:59,080 --> 00:05:01,960
out anybody it should totally try this

68
00:05:01,960 --> 00:05:06,700
no one's going to go that up luckily
digital through and we did follow sort

69
00:05:06,700 --> 00:05:11,469
of psychology and we were able to locate
clubs and so I think so far it's a great

70
00:05:11,470 --> 00:05:12,250
success

71
00:05:12,250 --> 00:05:18,700
now you kind of talked about sort of
motivation why we did this research and

72
00:05:18,700 --> 00:05:23,530
you know our outline of our methodology
and we know we're gonna tap target

73
00:05:23,530 --> 00:05:28,599
drivers and nobody's buzzing but first
we have to actually have drivers

74
00:05:28,600 --> 00:05:33,700
possible for the hell are well luckily
windows can help us out of that tax

75
00:05:33,700 --> 00:05:39,039
built into windows is a tool called my
record and basically what driver for you

76
00:05:39,039 --> 00:05:45,010
guys is able to output the drivers
loaded this is so here's the recording

77
00:05:45,010 --> 00:05:50,560
doing this that particularly the /si
flag is important here because that

78
00:05:50,560 --> 00:05:55,360
tells driver according to output to sign
the driver and so in this case we have

79
00:05:55,360 --> 00:06:01,930
so we're looking for and another tool
that we used as part of this process was

80
00:06:01,930 --> 00:06:07,539
one option now when I just an actual
tool that's built into Windows but it's

81
00:06:07,539 --> 00:06:12,669
a free publicly available either a
standalone product or as part of this

82
00:06:12,669 --> 00:06:17,289
internal sweet written by Mark crescent
ridge and you know when it's time

83
00:06:17,289 --> 00:06:21,789
stuff going to all the functionality
mostly people like Windows Windows

84
00:06:21,789 --> 00:06:26,770
objects in the system but what we need
to focus on was his ability to tell us

85
00:06:26,770 --> 00:06:29,830
the only drivers device drivers
involvement

86
00:06:30,339 --> 00:06:35,289
now what we wanted we wanted that small
pink so that you can pass it to our word

87
00:06:35,289 --> 00:06:41,770
windows kernel driver wasn't as a way of
using it to communicate with that plus

88
00:06:41,770 --> 00:06:45,818
the process and so little bit to talk
about that buzzing process kind of

89
00:06:45,819 --> 00:06:49,270
device drivers in general and the
communication process on the tangled

90
00:06:49,270 --> 00:06:53,139
screening exam

91
00:06:53,770 --> 00:06:57,758
yeah so we're going to burn out front
talking about drivers and how we talked

92
00:06:57,759 --> 00:07:02,020
about it a whole packet stop so drivers
are basic just a way for users to talk

93
00:07:02,020 --> 00:07:05,289
two devices / the chronicle the
interface with whatever are sitting off

94
00:07:05,289 --> 00:07:10,839
what you thought of these musical and
via the device is controlled all take

95
00:07:10,839 --> 00:07:14,110
advantage of this fall what you're going
to eat is the support links i was

96
00:07:14,110 --> 00:07:19,839
talking about as well as holder alko
alko is just a 32-bit number which

97
00:07:19,839 --> 00:07:24,370
indicates to the driver which routine
want to you want to target once you have

98
00:07:24,370 --> 00:07:29,289
this code and just about a week just
past the hole whatever they want to

99
00:07:29,289 --> 00:07:37,120
drive will take it do its thing and then
you step back and over so now we know a

100
00:07:37,120 --> 00:07:41,469
little bit about we talked to drivers
let's figure out my taken out so first

101
00:07:41,469 --> 00:07:44,919
we're going to do is get those optical
so we can talk about the various

102
00:07:44,919 --> 00:07:50,019
routines you know then we are going to
use those drivers hopefully we'll get

103
00:07:50,019 --> 00:07:54,129
some crashes on and then we can three
other crashes became one of the drivers

104
00:07:54,129 --> 00:07:58,149
good will transmit exploits

105
00:08:00,159 --> 00:08:06,129
so y tu brute force occupants it turns
out they're pretty very documented so

106
00:08:06,129 --> 00:08:11,110
it's pretty much always on you to figure
out because our person to you then out

107
00:08:11,110 --> 00:08:12,510
of the driver

108
00:08:12,510 --> 00:08:16,260
but this can be time-consuming and
represented a number of different ways

109
00:08:16,260 --> 00:08:20,550
so we usually end up doing is actually
just cashed every possible application

110
00:08:20,550 --> 00:08:24,930
and we can kind of been further on how
to drive a response to that we're going

111
00:08:24,930 --> 00:08:30,240
to proud of our response to Mallik
whether or not a valid code and so

112
00:08:30,240 --> 00:08:34,950
rather than water on the coarser be
decided to go the F which is an

113
00:08:34,950 --> 00:08:36,900
open-source testing tools

114
00:08:36,900 --> 00:08:41,370
that's all I sex partners get up it was
written by some coworkers

115
00:08:41,940 --> 00:08:46,470
so we're gonna be pretty easy to work
with you always asking hey what does it

116
00:08:46,470 --> 00:08:51,810
look like this and here's a quick
picture of what happens like action to

117
00:08:51,810 --> 00:08:55,800
get here and it's just that goes through
it starts getting every possible code

118
00:08:55,800 --> 00:09:01,050
and I want to get a few days it's like
hey what about this fits all without and

119
00:09:01,050 --> 00:09:04,229
backgrounds also running this
information to a file so crazy prices

120
00:09:04,230 --> 00:09:11,610
along the way is all your information
sometimes crashes we do and so now that

121
00:09:11,610 --> 00:09:17,130
we have some optimizations fuzzy so this
number of private letters already out

122
00:09:17,130 --> 00:09:22,020
there you know is why I attacked by
microsoft one example but since you have

123
00:09:22,020 --> 00:09:27,660
also has a built-in we decided to stick
with it and it turns out that the other

124
00:09:27,660 --> 00:09:31,290
is a pretty good buzzer that's alright i
will be printed and it's quick

125
00:09:31,290 --> 00:09:36,150
so actually shake our race conditions
for you as a different kind of cool

126
00:09:36,150 --> 00:09:40,890
input processing elements wearing a lot
you know slide you were going to spill

127
00:09:40,890 --> 00:09:42,810
all ready for you

128
00:09:42,810 --> 00:09:48,719
one nice feature as is you can actually
pick up too high and is our buzzer so if

129
00:09:48,720 --> 00:09:52,350
you want to take like peach and my
speech paper like a spark generational

130
00:09:52,350 --> 00:09:57,480
laser light is actually take that and
put in di take advantage of the rest of

131
00:09:57,480 --> 00:10:00,480
the ideas features so is extensible my
way

132
00:10:02,280 --> 00:10:06,810
here's a quick shot with the IDF looks
like an action you can see that here the

133
00:10:06,810 --> 00:10:12,239
bottom right you'll see it starts to
advise on status about the requests for

134
00:10:12,240 --> 00:10:12,920
your

135
00:10:12,920 --> 00:10:17,990
although hopefully you'll never actually
see the screen crash long before you get

136
00:10:17,990 --> 00:10:27,230
about 80 seat and was pretty good woman
and it's alright already have it on

137
00:10:27,230 --> 00:10:31,880
purpose along the way one thing you did
was make it smarter forcing so sometimes

138
00:10:31,880 --> 00:10:35,930
you run into the case we run into you
know hundreds of locals so those are

139
00:10:35,930 --> 00:10:40,699
usually not more than 20 or 30 and so
we're like it's going to turn out of

140
00:10:40,699 --> 00:10:41,449
focus

141
00:10:41,449 --> 00:10:45,139
so we just kind of implemented some
functionality to you know we asked how

142
00:10:45,139 --> 00:10:49,399
to drive response to turns out you can
respond however the water like set do so

143
00:10:49,399 --> 00:10:55,970
kind of President we also have committed
some kind of experimental functionality

144
00:10:55,970 --> 00:11:01,639
we looking at how the lovers vacay in
their kind of looks like a problem and

145
00:11:01,639 --> 00:11:07,160
we also look to see if maybe the driver
outside of the buffer I would usually be

146
00:11:07,160 --> 00:11:13,910
indicated there's something going on the
driver we also added functionality like

147
00:11:13,910 --> 00:11:18,709
shut the size of our input number into
the first keyword upper which might

148
00:11:18,709 --> 00:11:22,670
sound kind of arbitrary but it actually
turns out a lot of travel routines

149
00:11:22,670 --> 00:11:27,949
expect that and in fact one of the
things that later does we also just kind

150
00:11:27,949 --> 00:11:34,670
of along the way you know it clean up
with the standard out and stuff like

151
00:11:34,670 --> 00:11:35,420
that

152
00:11:35,420 --> 00:11:41,180
now we have a closer one thing to keep
in mind your brother drivers is that

153
00:11:41,180 --> 00:11:43,430
works differently the rest of your life

154
00:11:43,430 --> 00:11:46,670
so instead of your building with
something like a bell

155
00:11:46,670 --> 00:11:49,910
I you know you can get tens of thousands
of pressure and restart the program is

156
00:11:49,910 --> 00:11:54,740
over time it just always be however
proposing something in the driver or in

157
00:11:54,740 --> 00:11:56,420
the tunnel garage

158
00:11:56,420 --> 00:11:58,089
check your basic you

159
00:11:58,089 --> 00:12:03,490
system so it's you know all this through
but crashes likewise you can also get

160
00:12:03,490 --> 00:12:08,709
you know christ almighty to requests
that you sent hours apart because the

161
00:12:08,709 --> 00:12:13,660
tractors maintain state this whole time
it's not be starting a freshly with like

162
00:12:13,660 --> 00:12:20,439
another name since we're targeting
members expect the harbor be there are

163
00:12:20,439 --> 00:12:24,998
drivers that are signed by the
manufacturer order any pressure to

164
00:12:24,999 --> 00:12:29,920
interact across the harbor so you can
very easily fill the stuff into the West

165
00:12:29,920 --> 00:12:34,479
soon replaced with drivers with you like
the Emperor drivers are great and so you

166
00:12:34,480 --> 00:12:39,249
end up with is something like this we
have a laptop sitting around their kind

167
00:12:39,249 --> 00:12:48,790
of freaking out there are probably other
power screwdriver and one last thing

168
00:12:48,790 --> 00:12:54,040
about anything you want to show you the
driver driver verifiers building windows

169
00:12:54,040 --> 00:12:59,199
tool that will force a crash text the
text misbehavior with the driver and it

170
00:12:59,199 --> 00:13:03,189
does this through a few different ways i
was thinking about is it puts all the

171
00:13:03,189 --> 00:13:08,050
applications into a special application
pool and then check to see if ever gets

172
00:13:08,050 --> 00:13:12,729
reference that it's greed or there's no
doubt about the right that I'm only

173
00:13:12,730 --> 00:13:15,939
access violation and hopeless crash
which is great

174
00:13:15,939 --> 00:13:21,309
a lot of times those conditions can be
explained with a little bit of TLC also

175
00:13:21,309 --> 00:13:26,079
have to check to make sure that it's not
reading and writing user land and which

176
00:13:26,079 --> 00:13:34,239
box like that sweet old man so you like
put the driver in a little power or you

177
00:13:34,240 --> 00:13:38,529
put in the low memory or you can I just
happened i'm ability to function postal

178
00:13:38,529 --> 00:13:42,879
so the drive so this is a really really
good way to test the paths that you

179
00:13:42,879 --> 00:13:47,319
might not only did it for something and
that those are usually conditions that

180
00:13:47,319 --> 00:13:53,439
you can recreate though and with anyone
will get something like this was going

181
00:13:53,439 --> 00:13:57,879
without a redesigned it i made it like a
status

182
00:13:59,180 --> 00:14:02,060
kind of wonderful positive baby whenever
going to be a sign of that some other

183
00:14:02,060 --> 00:14:16,369
ideas along the way I like what you're
going to get cracked screen once you get

184
00:14:16,370 --> 00:14:19,760
some brushes and figure out the ground
ball up

185
00:14:19,760 --> 00:14:27,140
why is this man side of the state are
all questions that man interest and so

186
00:14:27,140 --> 00:14:31,069
what you want to do is throw that ass
down to each other and it's gonna be a

187
00:14:31,070 --> 00:14:34,400
chance to your first guest of split
ability you know try to see what I'll

188
00:14:34,400 --> 00:14:40,010
code was responsible to crash your input
supply i crash happened to the driver

189
00:14:40,010 --> 00:14:45,920
and so for our kind of high-level view
of exploitability address on the plugin

190
00:14:45,920 --> 00:14:50,540
called banks football give you like rap
outline like for instance always say

191
00:14:50,540 --> 00:14:54,890
write my relations that's what we'll put
it is a rough and you don't just want to

192
00:14:54,890 --> 00:15:01,730
take a sense were split up so you want
to do is running Annalise Annalise great

193
00:15:01,730 --> 00:15:04,760
i'll tell you all sorts of stuff about
the condition of the crash

194
00:15:04,760 --> 00:15:09,140
so you see a call stacks you to see
everything going along the way you can

195
00:15:09,140 --> 00:15:12,230
see what the crash instruction would
like and will tell you with access

196
00:15:12,230 --> 00:15:16,370
violation was so the right violation
that's usually pretty good time

197
00:15:16,370 --> 00:15:20,000
relations to get to as we'll talk about
a little bit later

198
00:15:20,870 --> 00:15:25,040
there's also a chance we can determine
how much control you have to crash if

199
00:15:25,040 --> 00:15:28,969
you're above directly over clothes and
stack the driver you're probably pretty

200
00:15:28,970 --> 00:15:33,200
good shape but maybe the crash happened
some underrated part of the system that

201
00:15:33,200 --> 00:15:39,440
you have no idea is impacted and so this
is a sample like a clip from the animal

202
00:15:39,440 --> 00:15:44,990
is outlined you can see here is the
offset of where the driver crashed on 81

203
00:15:44,990 --> 00:15:51,529
and so we can do with that will pop
image pop the driver in ida and every

204
00:15:51,529 --> 00:15:55,939
basic back to zero and then you can
actually go to offset 183 of the driver

205
00:15:55,940 --> 00:16:01,730
and fiery idea and see exactly what i
was just super handy your Stackhouse's

206
00:16:01,730 --> 00:16:05,839
baby responsibility was to sometimes
drivers before you commence so we're

207
00:16:05,839 --> 00:16:10,100
just trying to track it now based on
what the expression was to help you out

208
00:16:10,100 --> 00:16:17,690
another important to look at when you're
looking crashes that our earth is the i

209
00:16:17,690 --> 00:16:21,500
request packet which basically bubbles
up all the stuff you want to send to the

210
00:16:21,500 --> 00:16:26,450
driver and then shut it tastes . that
you want them to drive bottle up and

211
00:16:26,450 --> 00:16:31,190
passed on to it and so you can look at
here and find out your input buffer was

212
00:16:31,190 --> 00:16:35,029
the other side so you can see your
random data that is generated caused the

213
00:16:35,029 --> 00:16:42,170
crash was this is also a chance to find
out of the bed was so in case you're

214
00:16:42,170 --> 00:16:47,689
buzzing like 20 different that once you
don't necessarily not necessarily know

215
00:16:47,690 --> 00:16:49,920
drive crash

216
00:16:49,920 --> 00:16:58,349
that's definitely try something else
appears all right we discover parallel

217
00:16:58,350 --> 00:17:02,430
to stop relatively quickly closed happy
to see we're out here first thing we do

218
00:17:02,430 --> 00:17:07,349
it right we located the drivers can we
bring course all albums out of them

219
00:17:07,349 --> 00:17:08,698
didn't we

220
00:17:08,699 --> 00:17:13,919
most drivers got some crashes and then
we should take a look at the prices are

221
00:17:13,919 --> 00:17:17,189
not when you g part of what's going on

222
00:17:17,189 --> 00:17:20,250
got some growing information of the
brushes and now we're going to move to

223
00:17:20,250 --> 00:17:23,579
static analysis space we're going to
take this driver and you know I sort of

224
00:17:23,579 --> 00:17:30,059
want to try to dig in our community is
it turns out so this process to be

225
00:17:30,059 --> 00:17:34,770
automated because drivers have a long
time I want to share trees be a little

226
00:17:34,770 --> 00:17:42,990
bit more about that thanks so is very
was saying in a drivers to use team

227
00:17:42,990 --> 00:17:48,390
Cheryl a lot of different structures in
common and sort of water to create tools

228
00:17:48,390 --> 00:17:53,280
for help automate a lot of this reversal
process because we noticed while we're

229
00:17:53,280 --> 00:17:56,460
doing our research we ended up reversing
several different drivers we kept

230
00:17:56,460 --> 00:18:03,540
running into the same structure like 17
verse this old and you know the first

231
00:18:03,540 --> 00:18:06,540
thought it would be cool if this was
just automatically done for me and I

232
00:18:06,540 --> 00:18:10,620
guess move on to our hopefully the plug
is and that was sort of that the basic

233
00:18:10,620 --> 00:18:15,389
motivation for creating a tool so that
our first kind of design idea for tools

234
00:18:15,390 --> 00:18:19,290
I alright let's make a tool that can
automatically just take all these

235
00:18:19,290 --> 00:18:24,120
College drops you know is that we don't
have to be like cool

236
00:18:24,630 --> 00:18:29,490
no one like me to stop there or any
other ideas we can throw along with that

237
00:18:29,490 --> 00:18:35,669
to improve it to make it better and so
we have another idea was well we're

238
00:18:35,669 --> 00:18:40,530
going to be nice to have the driver
throw you tell you sort of the areas

239
00:18:40,530 --> 00:18:43,649
that you might find interesting as
someone is looking for security bugs

240
00:18:43,650 --> 00:18:48,690
things like hey we're all these insecure
see functions are being called or for

241
00:18:48,690 --> 00:18:54,120
these commonly misused nab is used by
having that information to sort of

242
00:18:54,120 --> 00:18:57,360
thought was even if you aren't like
causing the driver will just reversing

243
00:18:57,360 --> 00:18:57,939
it

244
00:18:57,940 --> 00:19:03,009
you immediately know sort of like that
shot here is kind of look at panda had

245
00:19:03,009 --> 00:19:07,960
hoped his heart of the state my diet and
I sort of thought process and then

246
00:19:07,960 --> 00:19:11,110
another way to think about it was a
little so you do have a crash you know

247
00:19:11,110 --> 00:19:14,918
exactly what happened to the driver and
those so happen to coincide with this

248
00:19:14,919 --> 00:19:21,190
power these kind of not the greatest
areas located is possible that like you

249
00:19:21,190 --> 00:19:24,909
know those particular functions are
responsible for the crash or maybe

250
00:19:24,909 --> 00:19:28,509
you'll be able to use them to actually
you know exploit the particular

251
00:19:28,509 --> 00:19:33,789
condition without sort of reasoning on
that the other design ideas now that we

252
00:19:33,789 --> 00:19:38,500
have a couple of ok we're going to build
this tool sometimes you know blackboard

253
00:19:38,500 --> 00:19:42,220
frame of some sort and we don't want to
make any framework because we knew we

254
00:19:42,220 --> 00:19:48,070
would keep it updated we're honest
people but we did decide to use an

255
00:19:48,070 --> 00:19:51,639
existing framework and since we are
using I doubt we decided to go that

256
00:19:51,639 --> 00:19:56,139
route will go python now of course
there's several different items we could

257
00:19:56,139 --> 00:20:05,590
use like I to see or our buddy jose eber
I PHP framework anybody you should look

258
00:20:05,590 --> 00:20:12,009
for this where the we just I just going
to stick with quite easy for our goals

259
00:20:12,009 --> 00:20:17,559
and sort of like some other design ideas
that we had were you know there's a lot

260
00:20:17,559 --> 00:20:20,980
of community work i think in this
particular area when it comes to

261
00:20:20,980 --> 00:20:25,389
building tools to help with these types
of processes and we want sort of rewrite

262
00:20:25,389 --> 00:20:28,779
the wheel if there's already some
functionality that exist out there

263
00:20:28,779 --> 00:20:32,860
dresses like coding opticals a quiet and
we didn't want to slider rewrite that

264
00:20:32,860 --> 00:20:37,149
function sentence so many moments source
implementations are just wasting cycles

265
00:20:37,149 --> 00:20:42,309
doing it might as well share our
community and then like our final and

266
00:20:42,309 --> 00:20:46,809
most important as I will probably was to
be easy to use you know you have to take

267
00:20:46,809 --> 00:20:52,720
a 30 day training works or you know read
this unit size manual structure to try

268
00:20:52,720 --> 00:20:56,139
to figure out and you sort of totally
defeated the purpose of the tool which

269
00:20:56,139 --> 00:20:56,820
was 24

270
00:20:56,820 --> 00:21:01,470
efficiency and your time use not you're
not trying to block people from using it

271
00:21:01,470 --> 00:21:06,690
because they don't have like Steve
abilities and so those design goals in

272
00:21:06,690 --> 00:21:10,590
mind we decided to go ahead with calling
for everybody

273
00:21:10,590 --> 00:21:16,709
python and sort of the first feature we
decided to implement was the ability to

274
00:21:16,710 --> 00:21:21,899
identify the title windows drivers now
you may not know there's several

275
00:21:21,899 --> 00:21:26,459
different types of windows drivers
function filter for us

276
00:21:26,970 --> 00:21:32,009
Paula system people probably talking
there's several different types and

277
00:21:32,009 --> 00:21:36,419
additionally there also built on
different driver frameworks there's a

278
00:21:36,419 --> 00:21:43,470
windows driver framework or WM and then
there's also windows windows driver

279
00:21:43,470 --> 00:21:44,429
model sorry

280
00:21:44,429 --> 00:21:48,149
and then there's windows driver free
makeover WTF which is the more modern

281
00:21:48,149 --> 00:21:53,850
and it's really just a wrapper around WM
and our thought was like a you can

282
00:21:53,850 --> 00:21:56,969
automatically identify the type of
windows records you may have additional

283
00:21:56,970 --> 00:22:01,259
context sort of like what this driver is
doing in the system whether or not

284
00:22:01,259 --> 00:22:05,909
you're interested but not because of
Howard place is small and so we notice

285
00:22:05,909 --> 00:22:09,960
that there was some heuristics that you
can do to sort of identify that and so

286
00:22:09,960 --> 00:22:17,309
in this example there's a function of
WTF is your body being used and it just

287
00:22:17,309 --> 00:22:24,750
so happens that in WTF drivers are the
only ones that nothing else reports and

288
00:22:24,750 --> 00:22:29,159
uses and so this single piece of
information tells us automatically this

289
00:22:29,159 --> 00:22:34,590
is a WTF and so we just sort of head
over that same functionality into our

290
00:22:34,590 --> 00:22:40,620
tool and so we can automatically do that
same analysis the next idea that we

291
00:22:40,620 --> 00:22:44,070
wanted to sort of implementing to the
tool with the ability to automatically

292
00:22:44,070 --> 00:22:47,270
locate and identify ante

293
00:22:47,270 --> 00:22:53,750
dispatch device control is commonly
referred to as the optimal now is

294
00:22:53,750 --> 00:22:57,200
greater was talking earlier sort of how
drivers communicate by passing my

295
00:22:57,200 --> 00:23:01,010
uncle's down to the driver and
eventually passes it reaches the driver

296
00:23:01,010 --> 00:23:06,470
and then it's panel calls a specific
function so the thing that handles the

297
00:23:06,470 --> 00:23:08,240
island come in

298
00:23:08,240 --> 00:23:12,470
that's the idea and you can kind of
think about as I this example so you

299
00:23:12,470 --> 00:23:18,830
have a power driver and it has two
specific functionalities 1i oco-2 turn

300
00:23:18,830 --> 00:23:24,770
on the monitor another iphone to turn
off when the opcode hits the manager

301
00:23:24,770 --> 00:23:28,310
gets passed down the drivers that
eventually your eyes your driver the

302
00:23:28,310 --> 00:23:32,600
outlying areas the one that does all the
comparisons like hey is this code for

303
00:23:32,600 --> 00:23:36,740
term monitoring function off over here
just going to turn off monitor function

304
00:23:36,740 --> 00:23:41,810
over here until eventually routes it to
the correct area in the driver so you

305
00:23:41,810 --> 00:23:47,750
can sort of see how this would be
interested why you want to know one if

306
00:23:47,750 --> 00:23:51,410
you didn't have a way of brute forcing
those idols then you'd be able to

307
00:23:51,410 --> 00:23:54,950
rehearse them out of this particular
function and as I said bring it was

308
00:23:54,950 --> 00:23:58,430
talking about before that might not be
true but they may do some weird

309
00:23:58,430 --> 00:24:02,570
representation of the article some kind
of math exam to take before you figure

310
00:24:02,570 --> 00:24:06,889
it out or going to be like some crazy
jump table but the fact is if you wanted

311
00:24:06,890 --> 00:24:11,150
to you could reverse about another
thought is if you sort of use the

312
00:24:11,150 --> 00:24:15,770
methodology and you went through and you
gotta crash and you which I will cause

313
00:24:15,770 --> 00:24:20,000
the crash now you have sort of like the
starting entry point for the aisle comes

314
00:24:20,000 --> 00:24:25,040
in and when the crash so you can kind of
narrow your focus down to the area of

315
00:24:25,040 --> 00:24:28,790
the driver that this sort of crashes
related to assume that's like

316
00:24:28,790 --> 00:24:32,780
concurrency total built in the driver
and if not it'll be a total shitshow

317
00:24:32,780 --> 00:24:38,030
about that later we'll talk about the
extra but yeah that's the kind of like

318
00:24:38,030 --> 00:24:41,750
the reason we're thinking about this is
important thing to know about and so

319
00:24:41,750 --> 00:24:48,080
here's sort of just the demo and this is
like a subroutine not that important but

320
00:24:48,080 --> 00:24:52,760
the holiday region is a unidentified I
up

321
00:24:53,330 --> 00:24:59,090
so we're on to everybody and it just
identifies as simple as that it's not

322
00:24:59,090 --> 00:25:02,090
really much to that particular thing to
take tells you where it's at

323
00:25:02,090 --> 00:25:07,730
you can go right to analyzing the sword
next feature was we wanted to implement

324
00:25:07,730 --> 00:25:12,080
it's like now that we have that once
broken anymore most important kind of

325
00:25:12,080 --> 00:25:16,699
thing we wanted to get all the rest of
that were kind of distinct two different

326
00:25:16,700 --> 00:25:21,860
driver models for instance in the WAAF
drivers most there's a lot of these

327
00:25:21,860 --> 00:25:28,040
trucks are comedy part of kapil handler
things like device often iOS application

328
00:25:28,040 --> 00:25:33,200
her and then WTF drivers there's just
like a federal functions that can

329
00:25:33,200 --> 00:25:39,260
automatically identified just based off
campus yesterday and so here's just

330
00:25:39,260 --> 00:25:41,660
another demo sort of that functionality

331
00:25:41,660 --> 00:25:45,020
this is another like an important
function and actually turns out this is

332
00:25:45,020 --> 00:25:50,900
the alcohol handler from the previous
slide step into it so it's not like we

333
00:25:50,900 --> 00:25:56,660
run to everybody it kind of goes wrong
does its analysis and some sort and then

334
00:25:56,660 --> 00:25:59,900
comes out and it's now identify hey is
this

335
00:25:59,900 --> 00:26:05,630
also there's her information and advice
object smiles that stuff

336
00:26:05,630 --> 00:26:11,300
cool and that this one this is a WTF
forever and if you remember from before

337
00:26:11,300 --> 00:26:17,899
the reason you tell that it's called WTF
certified and additionally that's pretty

338
00:26:17,900 --> 00:26:19,040
much all we talk about it

339
00:26:19,040 --> 00:26:22,460
I mean it's kind of not much going on
this coaching we really have a lot of

340
00:26:22,460 --> 00:26:27,320
context it's a really tiny little bit
and then x2 highlighted lot like well

341
00:26:27,320 --> 00:26:32,899
those are probably functions but what
are they and maybe if you want to curl

342
00:26:32,900 --> 00:26:35,540
development for a long time you can just
look at this

343
00:26:35,540 --> 00:26:40,820
no it is I know I can't so unless you
want to do all the analysis around this

344
00:26:40,820 --> 00:26:44,480
thing to try to figure out those off you
know probably going to be at the six

345
00:26:44,480 --> 00:26:46,370
spot context

346
00:26:46,370 --> 00:26:47,189
yep

347
00:26:47,190 --> 00:26:58,380
so yes I programs a lot of built-in
structure already and so what you can do

348
00:26:58,380 --> 00:27:02,760
is you can utilize the latest
undocumented feature that's like all i

349
00:27:02,760 --> 00:27:06,930
to VIII always something like that don't
like to look at the sea source to find

350
00:27:06,930 --> 00:27:11,640
it but basically you can use that to
actually use those hook it but you still

351
00:27:11,640 --> 00:27:16,920
have to like identify locate where these
are all set to like device object . or

352
00:27:16,920 --> 00:27:24,660
whatever it is that you're passing it so
yeah there's not really much context

353
00:27:24,660 --> 00:27:30,360
about what's going on this lovely turns
out those two specific functions are WTF

354
00:27:30,360 --> 00:27:36,149
functions and so after driver they
automatically get identified and select

355
00:27:36,150 --> 00:27:42,360
now before we really had no contest
problems going on to google or msdn

356
00:27:42,360 --> 00:27:46,439
these functions find out what they mean
and those are usually girls you know

357
00:27:46,440 --> 00:27:49,650
sticking points when you're reversing
the man I don't know what this function

358
00:27:49,650 --> 00:27:54,120
corners are what is going on but now so
hopefully we can continue all of our

359
00:27:54,120 --> 00:28:00,330
analysis sort of the next thing whatever
that was the ability to decode apples

360
00:28:00,330 --> 00:28:06,060
now this isn't unique tons of tools do
this in fact that buzzer we used the IDF

361
00:28:06,060 --> 00:28:10,470
heart has melted but we thought it was a
useful feature we want to include it

362
00:28:10,470 --> 00:28:15,570
anyways and you may be asking okay like
what was the up what is decoding aqua

363
00:28:15,570 --> 00:28:21,629
well it turns out that fossils are
deterministic so you can have this

364
00:28:21,630 --> 00:28:26,250
format were part of the day is
represented in this manner so there's

365
00:28:26,250 --> 00:28:30,330
like the device type the require access
the function code and the transfer type

366
00:28:30,330 --> 00:28:35,159
sort of for the purpose of like what
we're focusing long we're really going

367
00:28:35,160 --> 00:28:40,140
to pay attention to the transfer time
bowling and so the transfer type does is

368
00:28:40,140 --> 00:28:45,720
it's how the data from the alcohol gets
transferred to the device driver and

369
00:28:45,720 --> 00:28:50,460
there's four main modes there's a method
buffer and not the buffer is where the

370
00:28:50,460 --> 00:28:53,490
data is transferred to eat a colonel and
buffer

371
00:28:54,020 --> 00:28:59,270
and then there's the direct and indirect
method out which is used as memory

372
00:28:59,270 --> 00:29:03,920
descriptor less or anybody else and then
there's about that either which spoiler

373
00:29:03,920 --> 00:29:08,210
alert doesn't either of those can
actually just copies and reads and

374
00:29:08,210 --> 00:29:11,960
writes directly to use your landline
which I don't know how much you guys

375
00:29:11,960 --> 00:29:16,130
know about stuff like that should get
some weird tingly to you not the

376
00:29:16,130 --> 00:29:20,810
greatest idea of doing such a thing and
that's one reason why we want to include

377
00:29:20,810 --> 00:29:24,889
you know if you're you gotta crash sort
of followed this methodology through the

378
00:29:24,890 --> 00:29:30,410
NIDA you know the optical you decoded
you find hey this method either you're

379
00:29:30,410 --> 00:29:34,400
immediately going to be game face
because you can I gotta exploit that we

380
00:29:34,400 --> 00:29:39,680
and that's the sort of that pops up and
so the automatic just an example of

381
00:29:39,680 --> 00:29:46,130
being coated is yeah and then the last
thing you want to do is kind of like

382
00:29:46,130 --> 00:29:50,630
that interesting areas of the driver
function and which is super subjective

383
00:29:50,630 --> 00:29:55,850
but we got focused on a security
functions and calling this use windows

384
00:29:55,850 --> 00:30:01,520
api calls and so you can kind of see it
looking through its subscribers pretty

385
00:30:01,520 --> 00:30:06,139
boring really have much going on but
just black some API calls now I want to

386
00:30:06,140 --> 00:30:09,650
be clear that the fact that they're
using these one API calls doesn't mean

387
00:30:09,650 --> 00:30:14,360
that the book is like commonly used
normal winning 10 holes it's because

388
00:30:14,360 --> 00:30:18,439
developers can sometimes use these that
we want to fly because it can be

389
00:30:18,440 --> 00:30:19,310
interesting

390
00:30:19,310 --> 00:30:23,899
specifically like if you find a way to
control some way with these windows api

391
00:30:23,900 --> 00:30:27,320
calls you can come very interesting
things like object referencing

392
00:30:27,320 --> 00:30:33,169
dereferencing these can lead to record
exports and so those are sort of the

393
00:30:33,170 --> 00:30:38,780
features that we came up with on this
initial idea and used it kind of like

394
00:30:38,780 --> 00:30:42,230
continue to are inserted
reverse-engineer the drivers and we keep

395
00:30:42,230 --> 00:30:45,800
up with some bucks and i'm going to go
ahead and turn it over to break let's

396
00:30:45,800 --> 00:30:50,389
talk about those books so yeah

397
00:30:53,049 --> 00:31:00,789
started out so we did find a couple of
unique abilities and 100 driver they

398
00:31:00,789 --> 00:31:04,658
showing an advisory for it and we're
going to little more detail on that but

399
00:31:04,659 --> 00:31:11,379
was a race condition about it up and i
use a precondition and another one is

400
00:31:11,379 --> 00:31:17,469
sanitizing input ended up giving us a
arbitrary memory read and we have some

401
00:31:17,470 --> 00:31:21,369
other crashes and things that we think
will put your ability to run out and

402
00:31:21,369 --> 00:31:26,559
just kind of like bugs have had a chance
to follow Bon hopefully future we want

403
00:31:26,559 --> 00:31:33,279
for saying those we're going to further
your shoutout to lenovo they were super

404
00:31:33,279 --> 00:31:37,419
great to work with during the disclosure
process the back first thing to note

405
00:31:37,419 --> 00:31:42,759
that we don't have they had sent us like
a pass to test out and I think like a

406
00:31:42,759 --> 00:31:48,639
month and a half later they have to
watch out and advisory posted that was

407
00:31:48,639 --> 00:31:59,949
pretty nice so kudos to them to a tad
report again now match we can give you a

408
00:31:59,950 --> 00:32:11,379
tale to box so the first issue of the
space station bug you see here it was

409
00:32:11,379 --> 00:32:15,998
never getting reference after was free
in the special cool so the special whole

410
00:32:15,999 --> 00:32:22,659
recalls sure sign that our friend driver
verifier office and so one thing to keep

411
00:32:22,659 --> 00:32:27,519
in mind with drivers is that they're a
secretive nature however user everything

412
00:32:27,519 --> 00:32:32,200
processed on at once which is not
necessarily a problem as long as there's

413
00:32:32,200 --> 00:32:35,919
no straight memory which also probably
problems longer than this concurrence

414
00:32:35,919 --> 00:32:41,019
controls but case of this driver had an
object or a cubicle object that is

415
00:32:41,019 --> 00:32:44,200
shared between all colors and a zero
currency controls around

416
00:32:44,200 --> 00:32:48,820
so what happened is you could be
removing stuff in this queue . other

417
00:32:48,820 --> 00:32:52,629
columns using that same object and so
your groove it and then i'll use it

418
00:32:52,630 --> 00:32:59,260
after it's free so what we do this well
it looks to us like it's exploitable or

419
00:32:59,260 --> 00:33:03,700
code execution but we can't say I wasn't
sure because we're at a time for trying

420
00:33:03,700 --> 00:33:09,190
to get working for our quick and very
little knowledge just want something

421
00:33:09,190 --> 00:33:13,419
like this where it's just a few friends
adding moving objects at the same time

422
00:33:13,419 --> 00:33:18,730
miss electric costs your screening about
as fast as it takes the computer to load

423
00:33:18,730 --> 00:33:26,440
some of us plug is the memory and we did
spend a little more time driving on this

424
00:33:26,440 --> 00:33:33,309
so we'll go ahead and go through this
looks like the driver itself so this is

425
00:33:33,309 --> 00:33:37,870
the glamour you're talking about
pregnancy earlier and you can see the

426
00:33:37,870 --> 00:33:44,018
press carbonate and so this is where the
this is where your data is comes into

427
00:33:44,019 --> 00:33:48,279
the driver using a bycicle control of
this is the handler that picks it up and

428
00:33:48,279 --> 00:33:52,510
the important thing to keep in mind here
that the herbs going to have the system

429
00:33:52,510 --> 00:33:56,679
of her that contains all are potentially
malicious data as well as the alphabet

430
00:33:56,679 --> 00:34:01,809
is going to tell which routines in our
gratitude and so this is what I have a

431
00:34:01,809 --> 00:34:06,220
lot of awful handler looks like a
high-level I need to have someone out

432
00:34:06,220 --> 00:34:11,619
here kind of cascading effect of the top
left where it's kinda what it's doing

433
00:34:11,619 --> 00:34:17,560
that it's a is already got to check this
want to go to this routine now so on so

434
00:34:17,560 --> 00:34:21,969
forth until I get something like this
where it says hey this is that better

435
00:34:21,969 --> 00:34:25,959
looking for and wraps up and takes all
your stuff and passes into the

436
00:34:25,960 --> 00:34:27,500
appropriate routine

437
00:34:27,500 --> 00:34:33,409
automatic this was probably pretty hard
to read by basically all that's going on

438
00:34:33,409 --> 00:34:38,870
here is the drivers checking to see if
our output upper is big enough to hold

439
00:34:38,870 --> 00:34:42,739
the data by on sending back the
important thing to keep in mind here is

440
00:34:42,739 --> 00:34:46,699
one make sure that we pass all these
checks so that way we get to this part

441
00:34:46,699 --> 00:34:51,500
which is the more so this is the
function where the vulnerability wise

442
00:34:51,500 --> 00:34:57,770
and so what happens here the star is you
get this house function hall and what

443
00:34:57,770 --> 00:35:01,670
that will do is will return a physical
address to us every time we call every

444
00:35:01,670 --> 00:35:06,530
time you read this return the hex number
ten thousand so then what happens is it

445
00:35:06,530 --> 00:35:11,960
takes this number and it has it to a
number that's in our control and it

446
00:35:11,960 --> 00:35:21,140
takes the son of an addition and passes
into this map is based on here at the

447
00:35:21,140 --> 00:35:24,350
end because of the properties and white
house manager half right you can

448
00:35:24,350 --> 00:35:28,370
actually now fully control that first
call by like overflowing a number with

449
00:35:28,370 --> 00:35:32,299
our division and so we not full control
over the first called in that my own

450
00:35:32,300 --> 00:35:38,000
space and you might be wondering what's
the matter of space here so in that is

451
00:35:38,000 --> 00:35:44,120
base that takes in a physical memory
address and maps it to virtual and gives

452
00:35:44,120 --> 00:35:49,700
us back of winter and in the case of
this driver does is it takes in this

453
00:35:49,700 --> 00:35:54,529
address that we give it our fully
control and massive artillery it reads

454
00:35:54,530 --> 00:36:00,290
eight bytes and sends evacuate user and
so we need to do is just call this over

455
00:36:00,290 --> 00:36:05,029
and over again incrementing are
represented by the time I tell you have

456
00:36:05,030 --> 00:36:09,020
actually read or gigabytes of physical
memory report provides a visual memory

457
00:36:09,020 --> 00:36:14,720
and that's exactly what we ended up
doing so you see here a little different

458
00:36:14,720 --> 00:36:19,399
mindset it's just a for loop and we just
make this call over and over again and

459
00:36:19,400 --> 00:36:23,330
tell and we check to make sure that it's
almost heroes because it turns out a lot

460
00:36:23,330 --> 00:36:29,060
of physical memory is artificial eyes
but write all this stuff up and so get

461
00:36:29,060 --> 00:36:31,259
off your first 4 gigabytes of

462
00:36:31,260 --> 00:36:36,240
physical memory where we going to do
about so there's a few things you can do

463
00:36:36,240 --> 00:36:42,330
with the giant swap of you can use it to
buy hospital is a lot i find very

464
00:36:42,330 --> 00:36:47,100
special structures can also use it to
read secrets that your process you'll

465
00:36:47,100 --> 00:36:51,480
read no passwords that are passionate
other processes encryption keys . laying

466
00:36:51,480 --> 00:36:57,300
around or you know for instance your
water keys hanging on or you're going to

467
00:36:57,300 --> 00:37:02,130
do which revealed level
denial-of-service and so deceitful we

468
00:37:02,130 --> 00:37:08,520
decided to do right box you covered with
water keys out of the stuff i'll talk a

469
00:37:08,520 --> 00:37:16,800
little more about that all right without
it so just a real brief overview of what

470
00:37:16,800 --> 00:37:20,400
the lockers for people that may not know
the locker is full disk encryption

471
00:37:20,400 --> 00:37:27,240
option for windows basically uses a
family of aes encryption algorithms did

472
00:37:27,240 --> 00:37:32,549
sort of security data for several keys
involved but we're really going to only

473
00:37:32,550 --> 00:37:36,090
focus on full volume encryption key
because that's what we needed to

474
00:37:36,090 --> 00:37:42,270
actually decrypt the drive for our
example and then how it works is when

475
00:37:42,270 --> 00:37:47,910
you want to be really undo the middle
blockers like using it as it's still

476
00:37:47,910 --> 00:37:53,040
enabled actually only cribs the portions
of the drive that are use other parts of

477
00:37:53,040 --> 00:37:57,660
the drivers still in print and so this
tells us immediately that those those

478
00:37:57,660 --> 00:38:01,799
keys for curriculum printing gonna have
to be somewhat access to equipment is

479
00:38:01,800 --> 00:38:06,000
going to be doing it all the time so we
knew that was going to have to be in

480
00:38:06,000 --> 00:38:11,010
memory and thus we have a memory
disclosure bug not a good combination

481
00:38:11,010 --> 00:38:15,000
and so were like alright cool so let's
just go ahead and grab those bill our

482
00:38:15,000 --> 00:38:20,370
keys i'm sure that they're easily able
to be located but stopped so they could

483
00:38:20,370 --> 00:38:23,370
be a longer piece i say that the sign up

484
00:38:24,100 --> 00:38:28,390
memories just like random by looks like
anything else she will come out of

485
00:38:28,390 --> 00:38:33,700
encrypted function as a bunch of text
numbers so where are we going to do

486
00:38:33,700 --> 00:38:38,020
well luckily we didn't have somebody
else has already done all this work for

487
00:38:38,020 --> 00:38:42,430
us which is super awesome and we just
kind of followed along with the

488
00:38:42,430 --> 00:38:46,210
heuristics are like what they came up
with and this is sort of what it was

489
00:38:46,210 --> 00:38:51,820
sort of a lot of technical information
about how these years that's going

490
00:38:51,820 --> 00:38:56,980
together we want to make sure that would
work on our system so are still wasn't

491
00:38:56,980 --> 00:39:04,870
fully patched 110 installation working
s120 cycle and see you and the main

492
00:39:04,870 --> 00:39:08,710
thing that's kind of like narrow down
where the locker keys would be in memory

493
00:39:08,710 --> 00:39:14,470
are ours to specific things that really
hard down first is the pool tag so

494
00:39:14,470 --> 00:39:18,700
people that are familiar with full tanks
are unlike driver developers are

495
00:39:18,700 --> 00:39:23,169
creating the drivers any time to do the
memory allocations they have the option

496
00:39:23,170 --> 00:39:28,690
of adding a protective qualification and
what this is is a unique string of some

497
00:39:28,690 --> 00:39:33,040
sort that they can use to essentially
help them to debug it later on because

498
00:39:33,040 --> 00:39:36,730
you can you get crashed up now you have
all this like pools and then I'm not

499
00:39:36,730 --> 00:39:41,380
hard to find the cool thing is that you
need to add again search worksite i am

500
00:39:41,380 --> 00:39:45,280
super dumb trip is only one of those tax
and then you can come up which is always

501
00:39:45,280 --> 00:39:52,300
those pull tags and so that for this
particular driver was the cng for the

502
00:39:52,300 --> 00:39:58,000
bill our keys now the cg b is actually
associated with all of Microsoft

503
00:39:58,000 --> 00:40:01,690
Kryptonian calls so long all the new
ones which is like cryptography

504
00:40:01,690 --> 00:40:06,940
next-generation understands walk and so
that's not really like the narrow down

505
00:40:06,940 --> 00:40:11,020
right because you like a ton of crypto
API calls for a thousand pools tablet

506
00:40:11,020 --> 00:40:16,030
thing so it's like I don't know but the
second piece pool size is literally

507
00:40:16,030 --> 00:40:20,740
narrows it down so it turns out for
release our test and it wants to like

508
00:40:20,740 --> 00:40:26,470
many other systems that the locker keys
are always allocated into pools 672

509
00:40:26,470 --> 00:40:32,859
bites so these two pieces of information
really narrow down the scope of how find

510
00:40:32,860 --> 00:40:34,510
the actual bit lucky

511
00:40:34,510 --> 00:40:39,070
it's not perfect because those two alone
don't really get it and what we ended up

512
00:40:39,070 --> 00:40:43,000
doing the community of finding all the
risks that were added along to this that

513
00:40:43,000 --> 00:40:48,340
weren't really a show personal looking
for information about this off and this

514
00:40:48,340 --> 00:40:55,240
is kind of like what we came up with so
in the great house at this is that cng

515
00:40:55,240 --> 00:41:06,879
go hear me and then here we have the 675
pool size and then we notice was if the

516
00:41:06,880 --> 00:41:11,230
pool allocation was going to contain the
property it's going to be anyone looks

517
00:41:11,230 --> 00:41:19,240
sort of more between 0x40 0 90 bikes
from this out so it's not between like

518
00:41:19,240 --> 00:41:22,390
that many number of bytes that you're
not going to see in that pool just

519
00:41:22,390 --> 00:41:23,350
doesn't exist

520
00:41:23,350 --> 00:41:32,140
I don't know like when it is you will
see II cool that the actual key size

521
00:41:32,140 --> 00:41:36,310
which is going to be either a hard 28
bit or 256 bit depending on what you

522
00:41:36,310 --> 00:41:41,080
chose for your encryption algorithm and
then after that we'll always have three

523
00:41:41,080 --> 00:41:46,390
no lights and that's sort of like that
another indicator followed by a full

524
00:41:46,390 --> 00:41:51,790
volume encryption key and then it will
be for analytes followed by a duplicate

525
00:41:51,790 --> 00:41:55,509
of the full speed like why are they
doing this so many times I can't tell

526
00:41:55,510 --> 00:42:01,570
you that is how it comes out those
particular set of heuristics were always

527
00:42:01,570 --> 00:42:06,430
grabbing every single time you use that
you always are key which is awesome and

528
00:42:06,430 --> 00:42:07,390
terrifying

529
00:42:07,390 --> 00:42:11,470
so what can you do with a full of
encryption key that's extracted from

530
00:42:11,470 --> 00:42:15,850
memory right it's not like blocker gives
you the option hey go ahead and decrypt

531
00:42:15,850 --> 00:42:22,270
this with weird key not going to scour
options so we lovely again we had some

532
00:42:22,270 --> 00:42:26,290
work done by other people that created
the open source library to Mountain

533
00:42:26,290 --> 00:42:28,710
lager eyes and let live

534
00:42:28,710 --> 00:42:34,440
so that's exactly what we did so manages
to double slide

535
00:42:34,440 --> 00:42:39,720
hey this is actually a good locker if
you drive is 120 just like we're talking

536
00:42:39,720 --> 00:42:44,520
about again this is just more of the
same yes this is encrypted and you can

537
00:42:44,520 --> 00:42:48,089
still have full volume encryption header
off and try some encrypted cartridge

538
00:42:48,089 --> 00:42:53,490
another important slide right the actual
encryption process now if you have like

539
00:42:53,490 --> 00:42:58,500
super eagle vision here you can see your
knives in the same probably got to take

540
00:42:58,500 --> 00:43:05,250
my work is the same and use that to
mount the drive it to the Crips and then

541
00:43:05,250 --> 00:43:10,080
we're like okay what can we do like
fruit we decrypted this thing like you

542
00:43:10,080 --> 00:43:15,509
know what we obviously no intention on
the drive home the well-known so we do

543
00:43:15,510 --> 00:43:19,619
have some secret information there so we
decided are able to search for that so

544
00:43:19,619 --> 00:43:25,950
it turns out we knew the identity
satoshi nakamoto so spoiler everybody

545
00:43:25,950 --> 00:43:33,330
sochi Nakamoto is Robbie target i'm
going to hold up the side we came up

546
00:43:33,330 --> 00:43:37,410
with just some more romantic date I want
to show the name of our computer with

547
00:43:37,410 --> 00:43:39,118
sub-zero we just cancel

548
00:43:39,119 --> 00:43:45,780
yeah it was decrypted we did it to jump
us about what we really were really

549
00:43:45,780 --> 00:43:48,720
looking forward to this after like
coming up and you know say hey this does

550
00:43:48,720 --> 00:43:53,640
work was we wanted like the other people
were just doing this kind of work and so

551
00:43:53,640 --> 00:43:56,759
if this is something you find
interesting and you would like to keep

552
00:43:56,760 --> 00:44:00,000
you know kind of do it on the ground and
try it out then this is sort of freaked

553
00:44:00,000 --> 00:44:00,570
out

554
00:44:00,570 --> 00:44:05,550
tldr decision how you can do this so you
have no first you will find your drivers

555
00:44:05,550 --> 00:44:07,770
locate whichever ones they're ready

556
00:44:07,770 --> 00:44:12,300
microsoft oh yeah whatever your target
needs tools I Drive record with optional

557
00:44:12,300 --> 00:44:13,140
help you out here

558
00:44:13,140 --> 00:44:17,790
next you're going to either have to
force the apples or person out of the

559
00:44:17,790 --> 00:44:22,290
driver once you have those options you
can start one of the drivers to get some

560
00:44:22,290 --> 00:44:26,970
crashes once you got some crashes go
ahead and triage them take as much

561
00:44:26,970 --> 00:44:27,640
information

562
00:44:27,640 --> 00:44:32,740
can't crashing you know what input or
happened in the driver was the optical

563
00:44:32,740 --> 00:44:33,399
code

564
00:44:33,400 --> 00:44:38,410
what kind of violation was it and then
see if it's exploitable and if it is a

565
00:44:38,410 --> 00:44:45,700
box so basically that's the majority of
our talk for this we have some future

566
00:44:45,700 --> 00:44:50,020
work we'd like to Allah we want to you
know obviously got some balls better

567
00:44:50,020 --> 00:44:53,650
chance to triage couple of them are
pretty cool and that will turn out

568
00:44:53,650 --> 00:44:57,460
something interesting but haven't
actually got that point yet we would

569
00:44:57,460 --> 00:45:01,840
like to do some sort of automation in
the one UPG seem kind of the same idea

570
00:45:01,840 --> 00:45:05,980
to help automate Christ triage analysis
portion make things easier and faster

571
00:45:06,730 --> 00:45:10,810
anytime you can improve efficiency is
better and then sort of the rest of the

572
00:45:10,810 --> 00:45:14,920
things like yeah you like more drivers
body features and you know driver in the

573
00:45:14,920 --> 00:45:19,990
hip pastry special yeah sure okay
someday thanks for listening everybody

574
00:45:19,990 --> 00:45:21,609
to do really appreciate it

575
00:45:21,610 --> 00:45:25,420
special thanks to be gone and everybody
else always looks for helping research

576
00:45:25,420 --> 00:45:32,980
as far as the tools go both dids fixes
how we sort of a pull request for and

577
00:45:32,980 --> 00:45:49,330
everybody will be roast beast so the
drivers who found the bugs and they make

578
00:45:49,330 --> 00:45:54,279
it through the political process with
equal certified or where they not so the

579
00:45:54,280 --> 00:45:57,970
lenovo Drivers when they were signed as
far as i know that they had gone through

580
00:45:57,970 --> 00:45:58,810
that process

581
00:45:58,810 --> 00:46:09,190
yes your drivers that I I know we
haven't tried that yourself

582
00:46:09,190 --> 00:46:10,340
Jamie

583
00:46:10,340 --> 00:46:18,920
not there so I could come on that cool
30

