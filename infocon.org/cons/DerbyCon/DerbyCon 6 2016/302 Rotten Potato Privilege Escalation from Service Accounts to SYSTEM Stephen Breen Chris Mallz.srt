1
00:00:00,000 --> 00:00:06,240
all right now you guys talk thanks
alright hi guys and welcome a lot bigger

2
00:00:06,240 --> 00:00:09,660
crowd than we expected so you know
hopefully everyone enjoys the talk

3
00:00:09,660 --> 00:00:13,440
we're going to talk about rotten potato
today which is kind of a spin-off of

4
00:00:13,440 --> 00:00:18,000
some research we had done before called
potato it was a privilege escalation

5
00:00:18,000 --> 00:00:22,350
exploit in windows just by a show of
hands is anyone did anyone see that talk

6
00:00:22,350 --> 00:00:26,460
with a familiar with the exploit ok cool
so this a lot of this will probably

7
00:00:26,460 --> 00:00:29,910
sound familiar we're going to review
some of the old stuff and talk about

8
00:00:29,910 --> 00:00:33,149
where we went with it

9
00:00:33,149 --> 00:00:37,440
yeah so this is a little different and
you can read the slide for this

10
00:00:37,440 --> 00:00:40,980
privilege escalation from windows
service accounts up two NT authority

11
00:00:40,980 --> 00:00:49,440
system so Who am I steve breen known as
bring machine on the internet I came

12
00:00:49,440 --> 00:00:53,489
from a computer science math and sort of
development background it some boring

13
00:00:53,489 --> 00:00:57,300
enterprise web app development for a
while and kind of get sick of it and

14
00:00:57,300 --> 00:01:03,180
went into pentesting red teaming
security kind of thing i'm part of the

15
00:01:03,180 --> 00:01:07,860
NTT security offensive security team
also known as foxglove security most

16
00:01:07,860 --> 00:01:10,920
people know us by just a few things
released a bunch of those java and

17
00:01:10,920 --> 00:01:16,229
sterilized exploits that made some
people uncomfortable and the potato

18
00:01:16,229 --> 00:01:21,179
exploit i'm also free diving instructor
and Canadian so for all you guys wearing

19
00:01:21,180 --> 00:01:24,540
the blame canada shirts better watch out

20
00:01:24,540 --> 00:01:31,440
I'm Chris better known as a Balian I
went to school I did computer science

21
00:01:31,440 --> 00:01:37,679
and i also got my ocp used to be a
farmer while ago and this is actually

22
00:01:37,680 --> 00:01:43,890
what i do now so I deliver pizzas
actually but yeah so on

23
00:01:44,490 --> 00:01:48,869
yeah seriously seriously

24
00:01:49,670 --> 00:01:52,820
anyways so this talk

25
00:01:53,420 --> 00:01:57,259
yeah so we're gonna we're going to get
into this and talk a little bit about

26
00:01:57,259 --> 00:02:00,799
ntlm relay attacks for people who aren't
familiar with them just to give you some

27
00:02:00,799 --> 00:02:05,119
background info because we use them a
lot throughout the talk I we get into a

28
00:02:05,119 --> 00:02:08,989
lot of detail actually but then we'll
talk about the potato exploit the

29
00:02:08,989 --> 00:02:13,370
original exploit that we had really such
a move on earlier this year we'll talk

30
00:02:13,370 --> 00:02:17,450
about Microsoft's response to that
exploit it was a bit of a you know a

31
00:02:17,450 --> 00:02:21,859
long time coming and then we'll talk
about rotten potato which is today's

32
00:02:21,860 --> 00:02:26,390
exploit and the the code for that should
be available about an hour after this

33
00:02:26,390 --> 00:02:30,920
talk and we'll get into some future
possibilities where you know if you guys

34
00:02:30,920 --> 00:02:34,069
are interested in researching these kind
of things a little more there's

35
00:02:34,069 --> 00:02:39,290
definitely some unknowns out there and
some cool cool future work to get into

36
00:02:39,290 --> 00:02:45,109
before we get started you know this the
these exploits there they're not new the

37
00:02:45,110 --> 00:02:50,569
kind of new to you and new to us as pen
testers you know James porsche thought I

38
00:02:50,569 --> 00:02:54,350
did a black hat talk i think it was last
year maybe even the year before called

39
00:02:54,350 --> 00:02:57,858
social engineering the windows kernel he
talked about everything we're going to

40
00:02:57,859 --> 00:03:03,109
talk about today and just no one wrote
like a useful POC for pen testers to use

41
00:03:03,109 --> 00:03:06,320
so you know none of us really knew about
it

42
00:03:06,320 --> 00:03:11,690
he also posted some stuff on project
zero in it literally like this stuff was

43
00:03:11,690 --> 00:03:15,350
outlined like step-by-step and anyone
could just go do this but you know I'm a

44
00:03:15,350 --> 00:03:19,850
pen tester and I i feel like i'm pretty
good at it and we know a lot of really

45
00:03:19,850 --> 00:03:23,450
good pan testers and you know this just
like blew everyone's minds like no one

46
00:03:23,450 --> 00:03:26,298
knew how to do this stuff even though it
was totally out there and public for a

47
00:03:26,299 --> 00:03:34,340
long time so jumping right into the the
background information of ntlm relay

48
00:03:34,340 --> 00:03:39,019
attacks for those that are familiar so
ntlm authentication is how windows does

49
00:03:39,019 --> 00:03:42,739
this is how Windows doesn't dedication
over the network or one of the ways that

50
00:03:42,739 --> 00:03:48,109
doesn't indication over the network so
in this situation an attacker is you

51
00:03:48,109 --> 00:03:52,850
know somehow tricked a user in trying to
authenticate to the attacker server and

52
00:03:52,850 --> 00:03:56,120
this can happen by just sending the
malicious link getting of your webpage

53
00:03:56,120 --> 00:03:59,550
you control doing some sort of network
man in the middle attack

54
00:03:59,550 --> 00:04:03,450
there's hundreds of ways for this to
happen and they're not very far-fetched

55
00:04:03,450 --> 00:04:09,239
pen testers do it all the time so you
get someone to request a log onto your

56
00:04:09,240 --> 00:04:13,020
delicious server and then you forward
that log on request off to another

57
00:04:13,020 --> 00:04:18,720
server somewhere in the company or
internet-facing whatever the way ntlm

58
00:04:18,720 --> 00:04:22,770
works is it will then return a challenge
the challenge is just a number

59
00:04:22,770 --> 00:04:28,140
it's just like a long number the
attacker receives that challenge from

60
00:04:28,140 --> 00:04:32,219
the server that he's trying to log into
and relays it back to the victim client

61
00:04:32,220 --> 00:04:36,810
now this is where kind of the magic
happens the victim client does some

62
00:04:36,810 --> 00:04:42,150
crypto magic on the challenge and send
that back and back to the attacker and

63
00:04:42,150 --> 00:04:46,859
then the attacker forwards that the
server is trying to log into that that

64
00:04:46,860 --> 00:04:52,050
you know that crypto magic that he does
on the on the challenge is what actually

65
00:04:52,050 --> 00:04:58,680
logs you in so using this method you
know you can login as whoever your

66
00:04:58,680 --> 00:05:03,210
victim user was on that the other end to
a whole bunch of services like SMB HTTP

67
00:05:03,210 --> 00:05:08,280
we'll talk a little more about that some
people think this was patched because

68
00:05:08,280 --> 00:05:12,119
Microsoft did release a patch for
something related to this in 2008 what

69
00:05:12,120 --> 00:05:16,590
they released a patch for was on so you
can imagine this situation where the

70
00:05:16,590 --> 00:05:22,320
client computer is actually the same
computer as the server and the service

71
00:05:22,320 --> 00:05:28,530
on both hands SMB so if someone tried to
log into my attacker server using on the

72
00:05:28,530 --> 00:05:33,929
SMB protocol using ntlm then I tried to
relay that authentication back to the

73
00:05:33,930 --> 00:05:38,130
SMB her back to that same computer that
tried to login to me to the SMB protocol

74
00:05:38,130 --> 00:05:43,320
that's all they patch same protocol same
host which is a it's a pretty it's a

75
00:05:43,320 --> 00:05:45,840
pretty narrow case of this attack

76
00:05:45,840 --> 00:05:51,270
yeah so there's still plenty of room to
exploit this and we're going to talk

77
00:05:51,270 --> 00:05:56,099
about some of that yet just so we're
clear what the patch actually did was is

78
00:05:56,100 --> 00:06:00,180
basically you relate back to the host
computer so if I like centurylink and

79
00:06:00,180 --> 00:06:03,270
then you click on it and then I just
really the hash back to you and then

80
00:06:03,270 --> 00:06:05,120
login that's basically all patched

81
00:06:05,120 --> 00:06:10,970
show so just continuing to talk about
this very briefly this is all this isn't

82
00:06:10,970 --> 00:06:15,830
new again it's from 2001 sadistic cult
of the dead cow it was that patch we

83
00:06:15,830 --> 00:06:19,010
just talked about was really seven years
after the original exploit and it was

84
00:06:19,010 --> 00:06:20,330
you know it's pretty bad

85
00:06:20,330 --> 00:06:25,099
some of the things you can still do with
ntlm relays you can relay from HTTP from

86
00:06:25,100 --> 00:06:29,960
the HTTP server back to the same host on
SMB that's kind of what potato did it on

87
00:06:29,960 --> 00:06:36,349
localhost you can also do HTTP on one
computer to http on another one so you

88
00:06:36,350 --> 00:06:39,889
can that actually opens up the
possibility for things like relaying to

89
00:06:39,889 --> 00:06:44,330
outlook web access which lack attacted
sense post-release a cool new tool

90
00:06:44,330 --> 00:06:48,620
called ruler recently it doesn't do this
now would be an awesome thing of someone

91
00:06:48,620 --> 00:06:51,590
implemented this but i'm in theory I
think you might be able to do that with

92
00:06:51,590 --> 00:06:57,020
ruler and then potato which is what we
release it does

93
00:06:57,020 --> 00:07:04,430
HTTP to SMB relay on 127 001 so just
briefly again reviewing the the whole

94
00:07:04,430 --> 00:07:07,729
attack potato start to finish just so
everyone on the same page and that's

95
00:07:07,729 --> 00:07:09,349
what we're talking about

96
00:07:09,349 --> 00:07:14,419
so the first thing that happens is we
click on the windows update button and

97
00:07:14,419 --> 00:07:17,930
we try that we try to tell the computer
to fetch updates for itself

98
00:07:19,010 --> 00:07:23,840
windows update runs NT authority system
so very high privilege account the first

99
00:07:23,840 --> 00:07:27,710
thing that it would do is it would reach
out to the entire load well it would do

100
00:07:27,710 --> 00:07:30,830
a dns lookup and if that failed and
reach out to the entire local network

101
00:07:30,830 --> 00:07:35,840
and say hey does anyone know the IP for
the w pat server the potato export would

102
00:07:35,840 --> 00:07:38,840
be like oh yeah aww pads right here 127
001

103
00:07:39,560 --> 00:07:44,660
then the system with any authority
system would reach out say okay I need

104
00:07:44,660 --> 00:07:50,480
that I need the proxy config options at
w pat /w pad . that we're like okay here

105
00:07:50,480 --> 00:07:55,430
you go at proxy in this w pat . that we
serve up says proxy all your traffic

106
00:07:55,430 --> 00:08:01,010
through localhost so then windows tries
to reach out to us because it's trying

107
00:08:01,010 --> 00:08:04,940
to proxy its traffic to us and get
windows updates so it goes you know

108
00:08:04,940 --> 00:08:08,960
windows update com whatever and they're
like oh you're going to need to

109
00:08:08,960 --> 00:08:14,690
authenticate before you can do that and
then it tries the authentication and we

110
00:08:14,690 --> 00:08:18,530
really that identification to the local
SMB listener and get privilege

111
00:08:18,530 --> 00:08:23,989
escalation and now we're running his
anti-authority system so that was the

112
00:08:23,990 --> 00:08:33,080
idea of potato and that's what he does
or used to do anything to really ok then

113
00:08:33,080 --> 00:08:37,430
the new version never were actually we
didn't release but the one we had come

114
00:08:37,429 --> 00:08:41,510
out with actually skips all that stuff I
had actually made a Python version i

115
00:08:41,510 --> 00:08:45,230
think it might be able to get up
someplace but it we actually skipped out

116
00:08:45,230 --> 00:08:50,300
all of the the double pad and everything
else and what we actually used was d

117
00:08:50,300 --> 00:08:55,010
come in one of change portions original
talk he released a decom called triggers

118
00:08:55,010 --> 00:08:59,180
and that's what I actually implemented
in potato arm and it was actually one

119
00:08:59,180 --> 00:09:03,739
hundred percent stable totally worked on
every version until just recently

120
00:09:03,740 --> 00:09:06,710
actually but that's basically what it
was

121
00:09:06,710 --> 00:09:10,910
yeah so this the this talk actually was
originally when we submitted it it was

122
00:09:10,910 --> 00:09:13,880
supposed to be this new cool version of
potato that worked on every windows

123
00:09:13,880 --> 00:09:17,839
version and had no delay and it wasn't
complicated you just run the binary

124
00:09:17,839 --> 00:09:22,910
including privilege escalation and then
after the talk was accepted they release

125
00:09:22,910 --> 00:09:26,959
this patch at some point so we had to
kinda go find new things and we do and

126
00:09:26,959 --> 00:09:31,430
hope everyone wasn't mad best for it not
being the same but there's still some

127
00:09:31,430 --> 00:09:36,020
cool tricks in here and the reason we
talked about this is because what we're

128
00:09:36,020 --> 00:09:38,959
going to talk about today actually uses
some of the stuff from the new version

129
00:09:38,959 --> 00:09:42,500
that we were going to release that never
got released so that it's all this decom

130
00:09:42,500 --> 00:09:48,890
stuff that you'll be intimately familiar
with very soon and again if any of this

131
00:09:48,890 --> 00:09:51,370
sounds familiar to anyone

132
00:09:51,370 --> 00:09:56,200
like literally just straight from James
fortunes projects release he did all

133
00:09:56,200 --> 00:10:02,020
this stuff and this issue that was from
april $YEAR 9 2015 so it's a it's all

134
00:10:02,020 --> 00:10:07,689
out there so Microsoft response

135
00:10:08,350 --> 00:10:12,550
it was kind of interesting because you
know to that original project zero

136
00:10:12,550 --> 00:10:17,199
release that they did they originally
told him you know we're not going to fix

137
00:10:17,200 --> 00:10:21,430
this has been mitigated by extended
protection for authentication which is a

138
00:10:21,430 --> 00:10:26,290
non-default thing that you can enable
and SMB signing those both would've

139
00:10:26,290 --> 00:10:31,000
broken potato if you turn them on what
we find a lot of enterprises those

140
00:10:31,000 --> 00:10:37,270
things are not turned on for various
reasons and so you know they told they

141
00:10:37,270 --> 00:10:40,569
told James and you can go read it on the
online and they said you know we're not

142
00:10:40,570 --> 00:10:43,180
going to fix this is medicated by these
options

143
00:10:43,180 --> 00:10:46,300
ok so we go to move on and we say well
they already know about all this so

144
00:10:46,300 --> 00:10:50,740
we're just going to release plc and
about six months later they change their

145
00:10:50,740 --> 00:10:53,860
minds and fix it with a real patch

146
00:10:53,860 --> 00:10:58,450
I'm so potato no longer works for those
of you who don't know we still get

147
00:10:58,450 --> 00:11:03,310
questions sometimes on Twitter and get
up and all these things and it actually

148
00:11:03,310 --> 00:11:08,079
the current version that's out online
right now does not work on a fully

149
00:11:08,080 --> 00:11:13,300
patched version of windows and how
exactly what this patch guys were going

150
00:11:13,300 --> 00:11:16,390
to speculate on a little bit we didn't
have time to fully reverse-engineer it

151
00:11:16,390 --> 00:11:19,390
and find out exactly what it does but we
have some pretty good ideas we did do

152
00:11:19,390 --> 00:11:23,770
some initial testing and we'll let you
know what our ideas there

153
00:11:31,779 --> 00:11:36,640
yeah so like we said so what we were
doing before we're taking local ntlm

154
00:11:36,640 --> 00:11:39,910
authentication from the NT authority
system account it was trying to attend

155
00:11:39,910 --> 00:11:44,020
akay to our local host and we're trying
to reflect that back to the local SMB

156
00:11:44,020 --> 00:11:49,449
listener to get command execution that's
broken so what else can we do so again

157
00:11:49,450 --> 00:11:53,830
we refer back to this issue reported by
James this is all in there and he says

158
00:11:53,830 --> 00:11:58,120
you can ntlm relay to the local SMB
service that's what we did and they

159
00:11:58,120 --> 00:12:05,560
patch it he said you can reflect the
ntlm authentication back to a local are

160
00:12:05,560 --> 00:12:10,329
PCM . and release the POC that did some
cool things with symlinks and ended up

161
00:12:10,329 --> 00:12:14,319
dropping an arbitrary file in an
arbitrary location as system super cool

162
00:12:14,320 --> 00:12:21,579
but they patch it and finally and this
is you know it's in that issue it's a

163
00:12:21,579 --> 00:12:25,150
just sitting there and I right it's it
is the second bullet point in that issue

164
00:12:25,150 --> 00:12:29,949
with linked are we showing on the screen
you can get an impersonation token

165
00:12:29,950 --> 00:12:34,450
through local negotiation and that's
what that's all this talk is about

166
00:12:34,450 --> 00:12:37,360
that's all we're going to do with rotten
potato we're going to take that ntlm

167
00:12:37,360 --> 00:12:42,280
authentication negation negotiate it
locally and getting a getting token on

168
00:12:42,280 --> 00:12:47,170
the machines NT authority system and we
impersonate that token and we become t30

169
00:12:47,170 --> 00:12:53,860
system as long as we can have permission
to impersonate the token so crispy want

170
00:12:53,860 --> 00:12:57,700
to jump in this world will get into how
this stuff is all implemented how it

171
00:12:57,700 --> 00:13:02,440
looks ok so basically what happens first
is we make a co get instance for my

172
00:13:02,440 --> 00:13:07,959
storage call and we have to do that
first basically set up the RPC you

173
00:13:07,959 --> 00:13:12,219
trigger and this is basically what it
looks like we took it I took it straight

174
00:13:12,220 --> 00:13:21,160
from his actual original release and put
it in there so after oh so basically

175
00:13:21,160 --> 00:13:29,680
what this does is it basically just wewe
kind of trick RPC into authenticating to

176
00:13:29,680 --> 00:13:32,949
our proxy so this is sort of how it
works

177
00:13:32,950 --> 00:13:38,950
so when RBC starts up basically makes a
few calls and we can actually set the

178
00:13:38,950 --> 00:13:44,140
proxy that we want on it so it sets up
these calls here just basically just you

179
00:13:44,140 --> 00:13:53,020
know setting up the the thing for a
intimate on occasion so it's all this up

180
00:13:53,020 --> 00:13:57,220
and this is basically what it looks like
in wireshark it our pcs really kind of

181
00:13:57,220 --> 00:14:00,670
complicated and I don't want to take too
much in the protocol so

182
00:14:00,670 --> 00:14:04,930
I kind of chose easy route but that's
basically what it does to set up

183
00:14:04,930 --> 00:14:09,489
everything so once you get that all out
of the way then you can actually have it

184
00:14:09,490 --> 00:14:10,660
authenticated to you

185
00:14:10,660 --> 00:14:15,730
so once it was all starts the
authentication what we do is it still

186
00:14:15,730 --> 00:14:21,730
forwarded to our proxy and we actually
listen on port 666 and the first comes

187
00:14:21,730 --> 00:14:25,150
across the wire and what we did them in
the original one real quick when he was

188
00:14:25,150 --> 00:14:28,959
we actually just forward to testing me
but for here what we do is we make a

189
00:14:28,960 --> 00:14:34,570
call to accept security context and we
just take that hash and we put into

190
00:14:34,570 --> 00:14:39,190
except security context and the same
time we also relay that back to RPC

191
00:14:39,190 --> 00:14:44,950
itself on port 135 when you do that it
will actually generate a the second hash

192
00:14:44,950 --> 00:14:50,860
the ntlm challenge and it sent back to
us and what we do is what we call except

193
00:14:50,860 --> 00:14:56,170
security context we actually it'll give
us a second hash the same mental

194
00:14:56,170 --> 00:15:02,680
challenge and we actually replace that
inside the RBC packet structure so we

195
00:15:02,680 --> 00:15:07,599
don't have to forge our own RBC back at
all whatsoever we send that back and

196
00:15:07,600 --> 00:15:11,350
then we get the hash three and when we
get the has three we send it right back

197
00:15:11,350 --> 00:15:14,440
into except security context and that's
basically yet so that's kind of a

198
00:15:14,440 --> 00:15:18,190
high-level overview of of what happens
but we'll go into a little bit more

199
00:15:18,190 --> 00:15:22,780
detail here so this is how it looks on
the wire in wireshark computer sipping

200
00:15:22,780 --> 00:15:27,189
localhost and you can actually see on
the port numbers where it goes to 666

201
00:15:27,190 --> 00:15:31,780
and then we just poured it right onto
135 you can see it's the same packet

202
00:15:31,780 --> 00:15:36,970
that you can see a packet comes into
6666 that's the ntlm type1 negotiate

203
00:15:36,970 --> 00:15:40,690
packet so-and-so the system service
wants to try to negotiate and tell em

204
00:15:40,690 --> 00:15:44,740
with us and we're like okay we forward
that over to 135 and the only reason

205
00:15:44,740 --> 00:15:49,750
we're doing that it's just so we can get
the packet back to use as a template to

206
00:15:49,750 --> 00:15:53,710
reply to our pc that that's the whole
reason we're doing this because we

207
00:15:53,710 --> 00:15:57,700
didn't want to figure out how to write
these RPC packets from scratch so we

208
00:15:57,700 --> 00:16:00,970
just use window we just have windows
generate them for us and use them as

209
00:16:00,970 --> 00:16:05,440
templates and just replace blobs of
bytes inside them the ntlm blobs we

210
00:16:05,440 --> 00:16:06,499
replace those

211
00:16:06,499 --> 00:16:09,859
we go so really we're just that's all
we're doing and you can see it in

212
00:16:09,859 --> 00:16:13,819
wireshark you can see like how were
whenever we get a packet before it off

213
00:16:13,819 --> 00:16:16,968
we get another one back we might replace
a few things in it and then we forward

214
00:16:16,969 --> 00:16:20,719
that on to the guy who's trying to
attend estate with us

215
00:16:20,719 --> 00:16:25,009
just a quick thing to note is that the
blobs are actually if you enable signing

216
00:16:25,009 --> 00:16:27,829
anything like that the packet structure
itself isn't signed at all whatsoever so

217
00:16:27,829 --> 00:16:30,079
you can just replace its really simple

218
00:16:30,079 --> 00:16:33,709
so this is what it looks like when you
tricky come into authenticating to our

219
00:16:33,709 --> 00:16:41,029
our proxy which we have been listening
on port 666 right will actually send the

220
00:16:41,029 --> 00:16:47,119
first channel is I'm negotiate packet
and this is what it looks like now a

221
00:16:47,119 --> 00:16:52,009
local call which you guys probably
haven't heard of maybe you have I had

222
00:16:52,009 --> 00:16:54,199
and I looked everywhere

223
00:16:54,199 --> 00:16:58,488
what determines a local call is actually
this workstation name and the domain

224
00:16:58,489 --> 00:17:01,759
name and that's the only thing and you
don't have to do this locally either

225
00:17:01,759 --> 00:17:06,949
which I felt kind of funny you can do it
remotely true so we take that and that's

226
00:17:06,949 --> 00:17:09,319
basically the only thing that determines
a little thought and we read it right

227
00:17:09,319 --> 00:17:13,699
back into well first start first we have
to call a wire connections handle and

228
00:17:13,699 --> 00:17:17,179
that's just the way that these calls
work you have to do this you know it's

229
00:17:17,179 --> 00:17:21,350
on the msdn on this is what the car
looks like it's looks complex and

230
00:17:21,349 --> 00:17:24,319
everything but we use it really
simplified sort of Persian potato that

231
00:17:24,319 --> 00:17:28,549
makes everything really easy after you
call acquire grams handle you have to

232
00:17:28,549 --> 00:17:34,158
use that handle that you get to put it
into except security context and so you

233
00:17:34,159 --> 00:17:39,590
put that handle in there and you put the
NLM first packet which i call hash one

234
00:17:39,590 --> 00:17:44,209
right into the except security context
call ya you get so where it says decom

235
00:17:44,210 --> 00:17:49,070
over there that's that's the that that's
decom talking to your listener your

236
00:17:49,070 --> 00:17:54,259
proxy on port 6667 you some packet and
inside that packet there's an ntlm blob

237
00:17:54,259 --> 00:18:00,289
you rip that out and you just throw it
into the the windows api call to accept

238
00:18:00,289 --> 00:18:02,119
security context that's all that's all
you do

239
00:18:02,119 --> 00:18:07,849
yeah it's pretty simple honestly this is
what the car looks like it's it looks

240
00:18:07,849 --> 00:18:13,399
kind of complex but it's not really
honestly so once you get that you

241
00:18:13,399 --> 00:18:21,198
actually get out the second hash the
entire challenge and we take that and we

242
00:18:21,199 --> 00:18:26,389
had already had the RBC had already
responded to our proxy and so we just

243
00:18:26,389 --> 00:18:30,769
taken rip out that challenge and we
replace it with our own now for local

244
00:18:30,769 --> 00:18:34,879
call it is a little bit different and
you have this little reserved section

245
00:18:34,879 --> 00:18:38,629
here and this little reserved section
kind of threw me off because I was like

246
00:18:38,629 --> 00:18:39,918
what what is that

247
00:18:39,919 --> 00:18:45,409
and so I finally figured it out and what
it is is actually this security handle

248
00:18:45,409 --> 00:18:51,289
itself is transmitting it right through
the packet and this is what the actual

249
00:18:51,289 --> 00:18:56,299
it's the DW part of the security handle
and it's just basically a place in

250
00:18:56,299 --> 00:19:00,259
memory so yeah it's it's it's weird
because it goes over the network and it

251
00:19:00,259 --> 00:19:03,709
gets past the loopback adapter but it's
actually a reference to something in

252
00:19:03,709 --> 00:19:08,119
memory on that machine so it's a it it
can planetary off a little bit but

253
00:19:08,119 --> 00:19:09,049
that's all it is

254
00:19:09,049 --> 00:19:15,408
so we said that have the mental
challenge back into the decomp service

255
00:19:15,409 --> 00:19:19,759
and then that will basically respond
with you know the third hashed and say

256
00:19:19,759 --> 00:19:24,769
I'm authenticate and we take that and
it's actually quite a bit different

257
00:19:24,769 --> 00:19:30,589
because everything in it is not it's all
zeros and I mean there's there's nothing

258
00:19:30,589 --> 00:19:36,469
there basically and this is how local
call works on every single windows

259
00:19:36,469 --> 00:19:37,789
version that I've ever seen

260
00:19:37,789 --> 00:19:43,729
so then we just take that and we put it
right back in to accept security context

261
00:19:43,729 --> 00:19:45,769
and that's I mean that's basically it

262
00:19:45,769 --> 00:19:50,599
it's it's quite simple everything on the
Left easy that's that's the t30 system

263
00:19:50,599 --> 00:19:53,779
you know like super users of high
privilege count on the windows box

264
00:19:53,779 --> 00:19:57,289
trying to authenticate to us were just
relaying all those attending all the

265
00:19:57,289 --> 00:20:01,369
authentication information to windows
api calls of our credentials handle then

266
00:20:01,369 --> 00:20:05,448
accept security context couple times and
that's how you that's how you locally

267
00:20:05,449 --> 00:20:12,379
negotiate the ntlm handshake and we
obviously we have to call security

268
00:20:12,379 --> 00:20:13,469
context again that

269
00:20:13,470 --> 00:20:19,380
st. Paul so after that I mean it's
pretty simple it's actually really quite

270
00:20:19,380 --> 00:20:23,070
simple all you do is we just call and
personal security context with the

271
00:20:23,070 --> 00:20:27,750
security handle that we had from except
security context and that's I mean

272
00:20:27,750 --> 00:20:28,590
that's basically it

273
00:20:28,590 --> 00:20:32,039
yeah now you can actually take that and
you can actually pull out a token from

274
00:20:32,039 --> 00:20:36,000
it it's quite simple to do that but
there's just really no reason to do that

275
00:20:36,000 --> 00:20:40,409
when we can just a personal security
context itself and you can actually

276
00:20:40,409 --> 00:20:46,260
personally to security context as a
normal user as well but unfortunately

277
00:20:46,260 --> 00:20:50,850
when you do that it drops to identify
token and there's on multiple levels for

278
00:20:50,850 --> 00:20:54,570
the token and everything if you want to
find out more about that obviously watch

279
00:20:54,570 --> 00:20:58,770
for shock he does a whole talk on that
what yeah what-what four-shot did was he

280
00:20:58,770 --> 00:21:02,970
said he was looking for exploits and
windows drivers and like Windows itself

281
00:21:02,970 --> 00:21:07,080
and he was looking at okay like if i
have an identified token are there any

282
00:21:07,080 --> 00:21:13,470
things that you know that i can use this
for that forget to check if the the that

283
00:21:13,470 --> 00:21:16,740
the security level tokens identified
because there's different levels to

284
00:21:16,740 --> 00:21:19,409
these tokens if you haven't identified
token you can say hey I'm a tent

285
00:21:19,409 --> 00:21:23,549
authority system and things will believe
you but they won't let you do like

286
00:21:23,549 --> 00:21:26,639
security with anything that would
require anti-authority system privilege

287
00:21:26,640 --> 00:21:30,780
will just say okay like they they let
you say that but it doesn't matter but

288
00:21:30,780 --> 00:21:34,649
some places he found that some places
weren't actually verifying that so those

289
00:21:34,650 --> 00:21:39,240
were like in themselves completely
different exploits and the interesting

290
00:21:39,240 --> 00:21:42,990
thing to note here is this is totally
intended windows behavior this isn't

291
00:21:42,990 --> 00:21:46,590
like an exploit or some you know crazy
thing this is how Windows is supposed to

292
00:21:46,590 --> 00:21:47,250
work

293
00:21:47,250 --> 00:21:53,250
if your account has impersonate
privilege and you have a token for a

294
00:21:53,250 --> 00:21:57,510
user you're supposed to be able to
impersonate that even if that token is a

295
00:21:57,510 --> 00:22:00,809
higher privileged account in yours
because for example if you're running an

296
00:22:00,809 --> 00:22:05,789
is application that you know Luke user
logs into it with ntlm and the user

297
00:22:05,789 --> 00:22:09,570
happens to be a really high privileged
user your application may need to use

298
00:22:09,570 --> 00:22:12,840
that get that user privileges
temporarily to do something on the

299
00:22:12,840 --> 00:22:16,199
domain that's that's just how it works
so you can't you can't really change

300
00:22:16,200 --> 00:22:16,890
that

301
00:22:16,890 --> 00:22:20,549
that's how it's supposed to work
unfortunately you know it if we're able

302
00:22:20,549 --> 00:22:23,789
to get a token for something high
privilege like system and we can

303
00:22:23,789 --> 00:22:26,250
impersonate it and where this comes up
and

304
00:22:26,250 --> 00:22:30,300
testing scenarios you know Jar all of
you are familiar with this it's you know

305
00:22:30,300 --> 00:22:35,220
you pocket you pop in my ask box he pops
a sequel server you somehow get dropped

306
00:22:35,220 --> 00:22:39,810
into into like Network Service somehow
happens all the time it happened two

307
00:22:39,810 --> 00:22:46,500
weeks ago to our buddy oj and he you can
you can end up stuck there if you don't

308
00:22:46,500 --> 00:22:51,390
have some way to elevate your privileges
but those accounts all have impersonate

309
00:22:51,390 --> 00:22:54,750
they all have the impersonate privilege
you can run this exploit from and if you

310
00:22:54,750 --> 00:23:00,990
have any of those accounts so yeah
unfortunately you do have to have asked

311
00:23:00,990 --> 00:23:04,290
impersonate but like you said I mean
it's just about all service accounts

312
00:23:04,290 --> 00:23:09,270
pretty much have it and and this is once
more it's this is the intended behavior

313
00:23:09,270 --> 00:23:10,710
this is how Windows works

314
00:23:10,710 --> 00:23:15,060
I mean if its first say you know
Microsoft Word to remove rrd can trigger

315
00:23:15,060 --> 00:23:18,540
or any trigger that we have we actually
have quite a few on our potato things up

316
00:23:18,540 --> 00:23:22,980
to four different triggers if they were
to remove any one of those this will

317
00:23:22,980 --> 00:23:26,970
still work for years and years and years
to come i believe so when you win Chris

318
00:23:26,970 --> 00:23:30,900
as a trigger is talking about like the
decon thing we call that a trigger it's

319
00:23:30,900 --> 00:23:35,760
like something that had that causes it
to enter causes some system service to

320
00:23:35,760 --> 00:23:40,410
ntlm authenticate to us there are other
ways to do that don't involve using

321
00:23:40,410 --> 00:23:46,290
decom and in the original potato we use
w pat but there are also three or four

322
00:23:46,290 --> 00:23:50,550
other ways that are not as too hard to
figure out and you know there i think a

323
00:23:50,550 --> 00:23:57,480
few of the Republic it's not it's not
that so little time yes

324
00:23:57,480 --> 00:24:03,270
alright so we were going to do live
demos but I think we're just going to do

325
00:24:03,270 --> 00:24:06,450
the videos right now just for safety
sick

326
00:24:07,110 --> 00:24:14,969
okay I'm gonna go back just for the
record I told him to the live demo so

327
00:24:14,970 --> 00:24:17,970
yeah just didn't want to deal with my vm
sunset

328
00:24:18,960 --> 00:24:22,950
yeah is that too hard to see

329
00:24:24,029 --> 00:24:33,390
ok no better way

330
00:24:35,490 --> 00:24:49,380
can you read the text okay i don't think
i can zoom in on this because the video

331
00:24:49,380 --> 00:24:57,840
yeah sure i'm gonna try it and I didn't
do anything

332
00:24:58,409 --> 00:25:04,470
ok so what we have set up here for those
who can kind of see the blurred lines

333
00:25:04,470 --> 00:25:09,210
all it is a medicine boy meterpreter
listener listening for shell back and i

334
00:25:09,210 --> 00:25:10,860
use the web delivery

335
00:25:10,860 --> 00:25:18,719
yeah web delivery payload so over here I
have an ASP shell on is box and I just

336
00:25:18,720 --> 00:25:22,049
pasted in that powershell spring for
weaponry so I'm going to get a

337
00:25:22,049 --> 00:25:28,379
meterpreter shell as the is service
account and that's on the way coming

338
00:25:28,380 --> 00:25:31,380
through

339
00:25:34,770 --> 00:25:41,250
yeah okay so now we're interacting with
the deposit per sec we're interacting

340
00:25:41,250 --> 00:25:47,130
with the shell if you can't read that
it's a server username is a pool /

341
00:25:47,130 --> 00:25:50,130
default a pool you can ask the guys in
the front below if you don't believe me

342
00:25:51,779 --> 00:25:56,760
so we're gonna do get proves and we see
the list of privileges that account has

343
00:25:56,760 --> 00:26:00,149
so it has se assign primary token
privilege and we've been talking a lot

344
00:26:00,149 --> 00:26:06,870
about the the SE impersonate privilege
i'm pretty sure that privilege includes

345
00:26:06,870 --> 00:26:10,199
SE impersonate so that you won't you
won't always CSE impersonalist

346
00:26:10,200 --> 00:26:15,720
explicitly that the ones that we did
testing on here on both is and sequel

347
00:26:15,720 --> 00:26:18,120
server have this other one instead but
it still works

348
00:26:18,120 --> 00:26:25,320
so now we're going to upload a binary to
the box and it would be awesome if this

349
00:26:25,320 --> 00:26:29,169
was an interpreter post module we're
working on that with OJ but it's

350
00:26:29,170 --> 00:26:32,410
not there yet

351
00:26:32,410 --> 00:26:36,670
I'm just dropping in c colon slash users
public

352
00:26:45,580 --> 00:26:54,939
oh so it's okay so next hopefully you
guys are familiar with the incognito

353
00:26:54,940 --> 00:27:01,990
module and in in interpreter it lets you
impersonate tokens on the system so the

354
00:27:01,990 --> 00:27:06,040
executable is going to locally negotiate
the ntlm authentication and create a

355
00:27:06,040 --> 00:27:09,430
token but we need a way to impersonate
in our binary we obviously could have

356
00:27:09,430 --> 00:27:13,450
like how to do something like spin up a
new meterpreter shell with the new

357
00:27:13,450 --> 00:27:18,280
privileges but instead we're just going
to use incognito to grab that token that

358
00:27:18,280 --> 00:27:23,230
is now has been negotiated so before we
run the exploit we use incognito and

359
00:27:23,230 --> 00:27:26,830
just to prove that we're not cheating we
do list tokens dash you so this is gonna

360
00:27:26,830 --> 00:27:30,820
list the tokens that are currently on
the box that we are able to impersonate

361
00:27:30,820 --> 00:27:35,020
if you look at the tokens in that list
we have is a pool default that pool

362
00:27:35,020 --> 00:27:40,900
which is not gonna get us anywhere and
any authority / I user so there's no NT

363
00:27:40,900 --> 00:27:55,480
authority system talk in there right now
so here were we're running the binary

364
00:27:55,480 --> 00:27:59,170
and all you have to do is run it no
flags know crazy parameters like the

365
00:27:59,170 --> 00:28:03,760
original potato and now you can see that
I listed the tokens available on the

366
00:28:03,760 --> 00:28:08,230
system again and now there's an empty
authority system token available for

367
00:28:08,230 --> 00:28:09,220
impersonation

368
00:28:09,220 --> 00:28:12,220
so we're going to impersonate that token

369
00:28:17,500 --> 00:28:22,480
and it looks like it worked but we do
get uid and now we have anti-authority

370
00:28:22,480 --> 00:28:25,480
system privilege

371
00:28:29,600 --> 00:28:35,750
thank you the it's important you might
have noticed that I kind of like was

372
00:28:35,750 --> 00:28:38,780
typing furiously they're trying to do it
quickly

373
00:28:38,780 --> 00:28:41,960
it's because in the current
implementation the token can expire if

374
00:28:41,960 --> 00:28:44,419
you don't move fast enough huh

375
00:28:44,419 --> 00:28:47,780
so just keep that in mind because it
doesn't work for you it doesn't always

376
00:28:47,780 --> 00:28:51,139
mean it should work on every version of
windows and if it doesn't then it's a

377
00:28:51,140 --> 00:28:54,830
bug in our code or something like that
there's no problem with the technique

378
00:28:54,830 --> 00:28:56,659
itself

379
00:28:56,660 --> 00:29:02,390
I i'll let you take the next one because
sure once let me know so we're just

380
00:29:02,390 --> 00:29:07,909
going to show the same thing but with
sequel server this time so this is just

381
00:29:07,909 --> 00:29:17,480
sequel server will speak just sequel
server and just use XP command shell to

382
00:29:17,480 --> 00:29:21,020
Papa shell and it's basically the exact
same thing really

383
00:29:21,020 --> 00:29:26,360
we did just before one of the things is
a real quick you should probably uh

384
00:29:26,360 --> 00:29:30,500
before you do anything else you can
actually see the game pros here and we

385
00:29:30,500 --> 00:29:36,470
don't you doesn't actually lists asking
impersonate but it's there and I believe

386
00:29:36,470 --> 00:29:39,740
any time you have assigned primary token
privileged that you actually have the

387
00:29:39,740 --> 00:29:43,280
same person too so even if it's not
listed there

388
00:29:43,280 --> 00:29:50,570
it's obviously going to work and then we
uploaded I yeah we we upload the binary

389
00:29:50,570 --> 00:29:55,820
to it now you could probably drop into
memory which is fine and there is one

390
00:29:55,820 --> 00:29:59,658
other thing to note real quickly is that
you should actually load incognito first

391
00:29:59,659 --> 00:30:06,620
just you know in case it doesn't work or
something so he was loading incognito

392
00:30:06,620 --> 00:30:12,260
listen the tokens just to to see what's
there and obviously there's nothing so

393
00:30:12,260 --> 00:30:25,370
we run the binary here and type of house
so we just executed binary uploaded and

394
00:30:25,370 --> 00:30:27,500
it's gonna actually you know do
everything that we talked about before

395
00:30:27,500 --> 00:30:31,010
get the token and then just hold it
right there and we list it and then

396
00:30:31,010 --> 00:30:35,210
impersonate it just the same thing as
before and then of course we're going to

397
00:30:35,210 --> 00:30:40,100
become in 230 system and he one more
time just so that everybody's clear here

398
00:30:42,440 --> 00:30:45,080
this is actually gonna work for for some
time to come this is the antenna

399
00:30:45,080 --> 00:30:48,860
behavior and i'm not sure why I look and
I've never seen anything about this

400
00:30:48,860 --> 00:30:53,750
before online and I was kind of
astonished on that I mean this is how

401
00:30:53,750 --> 00:30:54,710
it's supposed to work

402
00:30:54,710 --> 00:31:00,950
so if you pop is server or you know in
SQL Server it's designed to have these

403
00:31:00,950 --> 00:31:05,600
privileges so you designed to be able to
do this so this this will be around for

404
00:31:05,600 --> 00:31:11,360
quite awhile so anyways our future work
is obviously a lot of reversing of the

405
00:31:11,360 --> 00:31:15,799
original patch we do quite as some some
ideas on it there's some signing

406
00:31:15,799 --> 00:31:19,970
involved which we believe that they made
mandatory I believe that they made

407
00:31:19,970 --> 00:31:25,129
mandatory but you know they've actually
funny enough released two more patches

408
00:31:25,129 --> 00:31:29,449
since then to actually patch the patch
that they did because people were

409
00:31:29,450 --> 00:31:33,620
getting blue screens and such so there's
obviously a lot of reversing work to do

410
00:31:33,620 --> 00:31:38,299
and i'm not the best reverser at in the
world at all any of you guys are windows

411
00:31:38,299 --> 00:31:43,279
that means there was there was a problem
with blue screens when you are using SMB

412
00:31:43,279 --> 00:31:45,950
after after that originally that
original patch and there's a problem you

413
00:31:45,950 --> 00:31:51,889
couldn't edit gpo's under some really
common circumstances so that's why the

414
00:31:51,889 --> 00:31:55,939
in Microsoft just just released a new
patch like a couple weeks ago and

415
00:31:55,940 --> 00:31:57,769
actually released to business

416
00:31:57,769 --> 00:32:01,669
oh yeah so there's still patches coming
out for this type of stuff but it that

417
00:32:01,669 --> 00:32:04,610
that so what we're talking about here is
this is the stuff that fix the old

418
00:32:04,610 --> 00:32:07,490
version of potatoes so we're still not
completely convinced that that's

419
00:32:07,490 --> 00:32:13,429
hopelessly broken it's just broken for
now yeah and then obviously we can look

420
00:32:13,429 --> 00:32:16,370
at other things to use the
anti-authority system against there's

421
00:32:16,370 --> 00:32:20,149
probably quite a few other things that
we just haven't even really bothered to

422
00:32:20,149 --> 00:32:24,559
look up more ways to get the tokens more
triggers there's plenty of those

423
00:32:24,559 --> 00:32:29,570
I don't see any of them really going
away anytime soon but you know this

424
00:32:29,570 --> 00:32:32,418
might get past and if it is good patch
if there's any Microsoft people in here

425
00:32:32,419 --> 00:32:38,210
you could give us credit for their be
great but anyways up so you know

426
00:32:38,210 --> 00:32:42,320
obviously implement implemented as an
msf module Metasploit module which

427
00:32:42,320 --> 00:32:47,029
should be too hard and then going to
talk about connection cut some of the

428
00:32:47,029 --> 00:32:50,330
stuff we saw here like SMB connection
hijacking was kind of a cool thing that

429
00:32:50,330 --> 00:32:56,629
we saw where if you have to if you if
you open up an SMB session to get a file

430
00:32:56,629 --> 00:33:00,168
or something and then you open up
another one with the same account on the

431
00:33:00,169 --> 00:33:04,129
same computer sometimes it won't it
won't try to reinvent Kate just use the

432
00:33:04,129 --> 00:33:07,039
same SMB connection there might be some
ways to abuse that we haven't really

433
00:33:07,039 --> 00:33:11,210
thought it through all the way yet but
they're you know it's it's a something

434
00:33:11,210 --> 00:33:13,700
something for the future

435
00:33:13,700 --> 00:33:17,929
now those are some of the more
interesting things you could do other

436
00:33:17,929 --> 00:33:21,740
things would be just trying to you know
escalate to the point where you going

437
00:33:21,740 --> 00:33:24,950
from a normal user to a service account
like on the machine so if you can do

438
00:33:24,950 --> 00:33:29,269
something to become is equal if you're
on that machine or even maybe if you're

439
00:33:29,269 --> 00:33:31,129
on a workstation there's things you can
do

440
00:33:31,129 --> 00:33:39,408
yeah so that is pretty much it for the
presentation we do have some extra time

441
00:33:39,409 --> 00:33:43,700
so if anyone has questions feel free the
code is going to be available probably

442
00:33:43,700 --> 00:33:48,320
within the next hour or two at this link
here you know we're putting it on the

443
00:33:48,320 --> 00:33:52,309
Fox love sec get of account but Chris
wrote pretty much all the code for the

444
00:33:52,309 --> 00:33:54,918
new version feel free to hit me up on
Twitter and ask me any questions you

445
00:33:54,919 --> 00:34:00,230
want i'm more than happy to to go over
anything and you obviously had a

446
00:34:00,230 --> 00:34:03,230
question there

447
00:34:13,840 --> 00:34:20,380
i I don't know I haven't I haven't
looked into that I would be kind of

448
00:34:20,380 --> 00:34:23,830
surprised if you would though because
that's you know like if if you have an

449
00:34:23,830 --> 00:34:27,940
is box or a sequel server it's probably
doing impersonation of user tokens all

450
00:34:27,940 --> 00:34:32,350
the time or it could be it would be
pretty normal for that to happen so this

451
00:34:32,350 --> 00:34:36,250
would just be kind of another another
token impersonation that we do I don't

452
00:34:36,250 --> 00:34:38,830
know how that would show up that would
be something we're testing I really

453
00:34:38,830 --> 00:34:41,830
don't know

454
00:34:51,350 --> 00:34:52,130
this

