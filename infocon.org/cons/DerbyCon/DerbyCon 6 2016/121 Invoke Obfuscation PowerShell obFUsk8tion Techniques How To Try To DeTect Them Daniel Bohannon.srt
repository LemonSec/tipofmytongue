1
00:00:00,000 --> 00:00:13,799
alright everyone good appreciate it . so
this is track 1 invoke confiscation our

2
00:00:13,799 --> 00:00:18,000
show obfuscation techniques and how to
try to detect them a little bit about me

3
00:00:18,000 --> 00:00:21,330
this is actually what I normally look
like my razor died last month and I

4
00:00:21,330 --> 00:00:26,310
figured out just get a jumpstart no
shave november as a fruit of pretty

5
00:00:26,310 --> 00:00:29,310
brutal competition my office I feel like
I'm doing right there

6
00:00:30,539 --> 00:00:39,059
I say it again Daniel H Bohannon and so
yeah I'm and I are consulting with

7
00:00:39,059 --> 00:00:43,620
mandya in there for a little over a year
prior to that spent five years in IT

8
00:00:43,620 --> 00:00:48,959
operations and security for national
restaurant franchise and i am a blue

9
00:00:48,960 --> 00:00:54,570
team ER this a lot of people say this is
a red team tool semantics you know but

10
00:00:54,570 --> 00:00:58,050
we'll get to that in just a bit i'm
going to be talking extremely fast

11
00:00:58,050 --> 00:01:01,890
because there is a lot of content i feel
it's necessary to make the full scope of

12
00:01:01,890 --> 00:01:06,540
the tool makes sense and all the aspects
of it and why put so much into it so

13
00:01:06,540 --> 00:01:08,850
there's not gonna be a lot of means
there's a couple of the into something

14
00:01:08,850 --> 00:01:11,880
to look forward to but hang on tight and
we'll get through this and i'll post the

15
00:01:11,880 --> 00:01:17,908
slides afterwards and we'll be good to
go so quick outline motivation my have I

16
00:01:17,909 --> 00:01:21,600
spent the past year obsessing over
powershell and over occupation

17
00:01:21,600 --> 00:01:26,100
techniques and semantics with powershell
and why should we care

18
00:01:26,100 --> 00:01:28,080
this is there because i don't think we
need to say why we should care about

19
00:01:28,080 --> 00:01:32,369
powershell it's absolutely incredible
preparing your environment for

20
00:01:32,369 --> 00:01:36,150
investigating power so much easier said
than done i'll just briefly touched on

21
00:01:36,150 --> 00:01:40,259
that and then we're gonna look at an
example of a few skating the most common

22
00:01:40,259 --> 00:01:43,920
syntax CC for remote download cradle
just to show syntactically how you start

23
00:01:43,920 --> 00:01:47,670
obfuscating different tokens of a
PowerShell command will look at more

24
00:01:47,670 --> 00:01:51,479
methods for remote download after that
we'll look at some more obvious station

25
00:01:51,479 --> 00:01:54,509
techniques and how can try to detect the
second layer of education involves a

26
00:01:54,509 --> 00:01:57,719
third layer which will then take a dive
into a couple encoding decoding

27
00:01:57,719 --> 00:02:01,289
techniques and our common something I've
never seen before personally in the wild

28
00:02:01,290 --> 00:02:02,000
and

29
00:02:02,000 --> 00:02:04,760
look at what i like to call launch
techniques and hopefully you'll find so

30
00:02:04,760 --> 00:02:06,890
interesting and the demo will be worth
it

31
00:02:06,890 --> 00:02:12,020
so motivation again this is their become
powershell is being used all over the

32
00:02:12,020 --> 00:02:15,350
place it its it's hard to think of an
investigation we don't see powershell

33
00:02:15,350 --> 00:02:18,769
being used at some point in the life
cycle being used by script kiddies

34
00:02:18,770 --> 00:02:23,180
attackers pen testers alike its its
launch from all different places

35
00:02:23,180 --> 00:02:26,330
sometimes you'll see a store in registry
kicked off the service file macro

36
00:02:26,330 --> 00:02:30,200
remotely at the end of the day we used
offenders could think well we can just

37
00:02:30,200 --> 00:02:32,839
make sure looking for you know evil
strings are potentially malicious

38
00:02:32,840 --> 00:02:38,720
strings in PowerShell command line
arguments right we'll get there so

39
00:02:38,720 --> 00:02:43,370
current state of detection these two
examples here in coded command and this

40
00:02:43,370 --> 00:02:46,700
the remote download cradle is typically
what we see in a lot of investigations

41
00:02:46,700 --> 00:02:49,970
however for each of these this is not
the only way to write this exact

42
00:02:49,970 --> 00:02:53,840
function and the powerful language is
just so fantastically rich there are so

43
00:02:53,840 --> 00:03:06,110
many ways that you can accomplish the
same task with different syntax I'm not

44
00:03:06,110 --> 00:03:09,080
sure

45
00:03:09,080 --> 00:03:14,360
so we're basically just these two
examples encoding as well as the remote

46
00:03:14,360 --> 00:03:17,239
down with cradle and started thinking
okay I'm not a red team or but what are

47
00:03:17,239 --> 00:03:19,400
all the different ways you can
accomplish this task two different

48
00:03:19,400 --> 00:03:23,780
syntax so for example 5 triggers looking
for these particular syntax these

49
00:03:23,780 --> 00:03:27,709
strings then what are other ways that I
could use as a as a red team or to

50
00:03:27,709 --> 00:03:33,769
accomplish this task but would get by my
current detection so kind of played with

51
00:03:33,769 --> 00:03:36,860
myself I went back and forth between red
and blue team to kind of build out this

52
00:03:36,860 --> 00:03:42,230
repertoire of syntax as well as
detection to take that into account and

53
00:03:42,230 --> 00:03:45,619
as I begin to discover new techniques i
would add that into our investigations

54
00:03:45,620 --> 00:03:49,820
and actually start to find a handful of
these being used by attackers

55
00:03:49,820 --> 00:03:53,150
however a lot of them have not seen it
yet but I'm absolutely convinced they're

56
00:03:53,150 --> 00:03:58,280
out there likely being used so my goal
for the blue team awareness knowledge is

57
00:03:58,280 --> 00:04:01,340
key we have to know what's being used
out there and beyond that was possible

58
00:04:01,340 --> 00:04:05,930
so that we can go ahead and be looking
for that before we actually these

59
00:04:05,930 --> 00:04:08,209
hackers using it the red team

60
00:04:08,209 --> 00:04:08,480
I mean

61
00:04:08,480 --> 00:04:12,018
hopefully this will assist you in
evading detection so you can test the

62
00:04:12,019 --> 00:04:16,399
blue team at the end of the day the just
like Carlos Perez talk about the

63
00:04:16,399 --> 00:04:20,089
symbiotic relationship between Red Team
Blue team hopefully this will help both

64
00:04:20,089 --> 00:04:24,888
the red team and losing test themselves
to make an organization better and at

65
00:04:24,889 --> 00:04:28,430
the end of this will be the public
release of info confiscation to make the

66
00:04:28,430 --> 00:04:31,970
employment of these techniques simple
I'm so that everyone can go home and

67
00:04:31,970 --> 00:04:35,240
actually test these techniques against
themselves she did we actually detect

68
00:04:35,240 --> 00:04:38,720
this because at the end of the day
attackers already obfuscating we have to

69
00:04:38,720 --> 00:04:41,600
prepare ourselves for it

70
00:04:41,600 --> 00:04:44,690
so this is hilarious because I include
one slide on preparing your environment

71
00:04:44,690 --> 00:04:47,870
which is probably the hardest thing this
whole talk but that's another talk

72
00:04:47,870 --> 00:04:52,520
people already covered this very well
logs we have to be looking at powers we

73
00:04:52,520 --> 00:04:54,948
have to be looking at command line
arguments for more than just power show

74
00:04:54,949 --> 00:04:59,120
we'll get to that at the end of the day
whether it's we're 4688 with command

75
00:04:59,120 --> 00:05:03,470
line argument logs enabled or system on
eid one week and getting those if you

76
00:05:03,470 --> 00:05:07,160
have other agent second real time
process monitoring the necessary as well

77
00:05:07,160 --> 00:05:11,780
or even something like uproot IDs
open-source absolutely great and then

78
00:05:11,780 --> 00:05:15,830
powershell module script block and
transcription logging if you if you

79
00:05:15,830 --> 00:05:18,979
haven't read this blog post my colleague
Matt dunwoody it's an excellent overview

80
00:05:18,979 --> 00:05:23,210
of each of these and come before and
after what value actually gives you and

81
00:05:23,210 --> 00:05:27,440
I i really do hope that this talk that
you'll see how just tremendously

82
00:05:27,440 --> 00:05:30,800
beneficial having these logs are to
unwrap almost every single layer of

83
00:05:30,800 --> 00:05:36,050
obfuscation that will look at so let's
go through an example this is the most

84
00:05:36,050 --> 00:05:41,210
standard remote download cradle syntax
that we see it's generated by a lot of

85
00:05:41,210 --> 00:05:45,469
you know the big-name tools out there
bail powerschool dentist appointment so

86
00:05:45,470 --> 00:05:48,320
let's go through a little example we
have your attacker command on the top

87
00:05:48,320 --> 00:05:52,969
defenders happen we built kind of
signature to trigger on this activity we

88
00:05:52,970 --> 00:05:56,750
could say okay if we see invoke
expression and new object system not

89
00:05:56,750 --> 00:06:01,370
network quiet and download string HTTP
this this would catch this command right

90
00:06:01,370 --> 00:06:03,500
I'll get there

91
00:06:03,500 --> 00:06:06,500
alright so let's start breaking
assumptions

92
00:06:07,370 --> 00:06:10,699
first of all system . is not necessary
is automatically prepended if you look

93
00:06:10,699 --> 00:06:13,699
at module logs when you run this with
the network quiet will automatically do

94
00:06:13,699 --> 00:06:17,780
a perimeter bonding assistant my client
not necessary so the defender I'm not

95
00:06:17,780 --> 00:06:21,950
gonna lie on the stand not being there
gonna go ahead and pull it out next URLs

96
00:06:21,950 --> 00:06:26,810
a string we can concatenate the string
on the fly or set as variables with a

97
00:06:26,810 --> 00:06:29,630
single quotes double quotes doesn't
matter we can add white space

98
00:06:29,630 --> 00:06:32,960
let's go and get that out of there
download string why could this be

99
00:06:32,960 --> 00:06:38,750
problematic net web client is a.net
class and download string is a member of

100
00:06:38,750 --> 00:06:42,590
that class but there are a lot of other
members a lot of commodity matter we see

101
00:06:42,590 --> 00:06:45,890
using download file which brings about
the disk but people typically use nylon

102
00:06:45,890 --> 00:06:49,250
strings that keeps it in memory download
data also does the same things as a byte

103
00:06:49,250 --> 00:06:52,580
array as a byte strings you have to
basically convert out of that but we

104
00:06:52,580 --> 00:06:56,510
have actually seen attackers using this
once or twice so why don't we just say .

105
00:06:56,510 --> 00:07:01,880
download as our indicator here so we can
rely on there being a princess here

106
00:07:01,880 --> 00:07:05,180
because you can actually set new object
in our client as a variable into we will

107
00:07:05,180 --> 00:07:08,479
see some tools do this and call the
variable WC social move that parentheses

108
00:07:08,479 --> 00:07:12,560
off of there . download how could the DA
be problematic

109
00:07:12,560 --> 00:07:18,440
well because i'm OCD and very stubborn
and being away the keyboard I'm trying

110
00:07:18,440 --> 00:07:22,010
to figure out there has to be weird ways
i can mess with this command actually

111
00:07:22,010 --> 00:07:24,979
realized that with the member argument
you can actually throw single quotes

112
00:07:24,979 --> 00:07:28,609
around it so now but that is not
reliable download now becomes a little

113
00:07:28,610 --> 00:07:32,180
bit less than appealing string to add in
there but then I realized you could also

114
00:07:32,180 --> 00:07:36,590
double quotes and the next line when you
look carefully at download string and I

115
00:07:36,590 --> 00:07:42,109
promise you this works but watch a tick
mark why does this work

116
00:07:42,110 --> 00:07:45,409
what does it take mark well it's the
escape character for powershell you can

117
00:07:45,409 --> 00:07:48,830
see there's a character's here is 0 and
then some location of letters and bit

118
00:07:48,830 --> 00:07:53,300
tip will see the tick mark use for us
for taking four new line however you can

119
00:07:53,300 --> 00:07:56,330
add tick marks behind any letter that's
not one of those characters in your good

120
00:07:56,330 --> 00:08:00,770
so I got to think was pretty cool so now
we're just left with an in a tiara in

121
00:08:00,770 --> 00:08:06,020
what if I uppercase those yeah we're
good take Mark's every letter so now

122
00:08:06,020 --> 00:08:10,370
this is a this is actually what it looks
like the first picture of there's what

123
00:08:10,370 --> 00:08:13,639
looks like in the command line arguments
the next picture is actually looks like

124
00:08:13,639 --> 00:08:17,360
in script block logging so this actually
persists all the way through the deepest

125
00:08:17,360 --> 00:08:19,260
level script block blogging

126
00:08:19,260 --> 00:08:26,039
as well as the concatenated string the
white space so we can regex all the

127
00:08:26,040 --> 00:08:30,000
things or maybe for now just scratches
an indicator and see if we're okay with

128
00:08:30,000 --> 00:08:33,479
what's left and actually if you decide
to write all the things we talked about

129
00:08:33,479 --> 00:08:36,600
demonstrating validated there's also an
open three which also brings a low-down

130
00:08:36,600 --> 00:08:41,640
the memory something else to keep in
mind from the detection perspective in

131
00:08:41,640 --> 00:08:45,120
addition let's say you don't want to see
tix you want to remember argument as a

132
00:08:45,120 --> 00:08:49,140
string you can encapsulate within cities
in canada in canada in liner as a

133
00:08:49,140 --> 00:08:53,250
variable and you can add on vote member
operator on the end of that announced a

134
00:08:53,250 --> 00:08:59,280
string so are we okay to remove that as
a solid indicator everyone tracking

135
00:08:59,280 --> 00:09:03,510
right at that web client this was
trivial we can throw quotes around and

136
00:09:03,510 --> 00:09:07,020
takes just like we did before we can
start parentheses around Canada in line

137
00:09:07,020 --> 00:09:11,520
or parentheses are not going to set as
Chuck variables in whatever we want

138
00:09:11,520 --> 00:09:17,760
execute perfectly fine for this example
is their tix new object so again I

139
00:09:17,760 --> 00:09:20,970
mentioned earlier powershares language
is extremely robust and it's absolutely

140
00:09:20,970 --> 00:09:24,390
incredible when you're writing code as a
defender when you're trying to nail down

141
00:09:24,390 --> 00:09:29,699
code it is like nailing jello to a tree
it is absolutely terrible but it makes

142
00:09:29,700 --> 00:09:30,690
it fun and exciting

143
00:09:30,690 --> 00:09:33,900
however when i look at this little cable
new object doesn't have any aliases like

144
00:09:33,900 --> 00:09:39,270
this should be pretty easy right wrong
so powershell has so many command

145
00:09:39,270 --> 00:09:42,360
sometimes you forget which one you're
looking for so get command is there for

146
00:09:42,360 --> 00:09:46,170
you so i can say i don't have a command
starts with new dash PE something so we

147
00:09:46,170 --> 00:09:49,920
just had a wild card at the end and
there's all the commands well it's not

148
00:09:49,920 --> 00:09:54,300
returning texts returning powerful
objects so if we can specify the full

149
00:09:54,300 --> 00:09:59,160
command and return it's actually an
object that we can invoke we can invoke

150
00:09:59,160 --> 00:10:03,329
without expression or we can invoke it
with the ampersand or . invoke operator

151
00:10:03,330 --> 00:10:10,110
now here's where it gets fun wild cards
that returns a single new object that

152
00:10:10,110 --> 00:10:11,280
returns a single one

153
00:10:11,280 --> 00:10:14,280
this this this this this

154
00:10:21,270 --> 00:10:27,180
so this is new object now again this is
what it looks like on the command line

155
00:10:27,180 --> 00:10:31,469
module logs catch this it does catch the
perimeter binding but again the evidence

156
00:10:31,470 --> 00:10:36,420
is all there but it's in different
places and get command has an alias of

157
00:10:36,420 --> 00:10:42,719
GM and in addition command now why his
command work forget command in power

158
00:10:42,720 --> 00:10:45,960
show when you type a command little
automatically prepend get dash to see

159
00:10:45,960 --> 00:10:48,030
the Commandant exist

160
00:10:48,030 --> 00:10:52,560
awesome right I will tell you as a
defender if you start keeping on command

161
00:10:52,560 --> 00:10:56,369
being there taken to a counter is a dash
command argument I've learned from

162
00:10:56,370 --> 00:10:57,600
experience

163
00:10:57,600 --> 00:11:02,970
so yeah prepending to get awesome so
flexible at the very end we can also

164
00:11:02,970 --> 00:11:06,570
instead of using splats the rest instead
of using asterisk we can set in variable

165
00:11:06,570 --> 00:11:12,090
as a string throw it in there good to go
so much fun right so much flexibility in

166
00:11:12,090 --> 00:11:15,780
addition our show 10 syntax how should
one that has some gyms you just have to

167
00:11:15,780 --> 00:11:17,699
go and dig the posh code to find it

168
00:11:17,700 --> 00:11:21,390
execution context i invoke command git
command command that will let you do the

169
00:11:21,390 --> 00:11:25,350
same thing if you want to use wildcards
you get command command lists or you can

170
00:11:25,350 --> 00:11:28,230
do a combination of the command command
name or your Commandments there get

171
00:11:28,230 --> 00:11:31,650
command command name so add just add
those to the list

172
00:11:32,730 --> 00:11:39,660
alright let's just use this one for the
sake of simplicity right so now you can

173
00:11:39,660 --> 00:11:42,420
do the same thing with the alias gallery
alias although you're not dealing with a

174
00:11:42,420 --> 00:11:45,209
full command name you just deal with
alias name so something else to keep in

175
00:11:45,210 --> 00:11:45,960
mind

176
00:11:45,960 --> 00:11:50,010
in addition we could just own tix in
there get command is a commandment so

177
00:11:50,010 --> 00:11:52,000
what is their tix in that one

178
00:11:52,000 --> 00:11:57,340
in addition you can do sweating so now
you can treat the Commandant name as a

179
00:11:57,340 --> 00:12:02,230
string and canada in line so we want to
reject all the things are just give up

180
00:12:02,230 --> 00:12:02,980
on this one

181
00:12:02,980 --> 00:12:09,160
we'll see so we're left with them we
left with that which is actually a

182
00:12:09,160 --> 00:12:12,069
really good indicator in and of itself

183
00:12:12,070 --> 00:12:15,250
I exr invoke command delicious mess with
it

184
00:12:15,250 --> 00:12:19,660
what's problematic with this again we
have the alias of IX order doesn't

185
00:12:19,660 --> 00:12:24,550
matter you can have is the beginning or
piping the contents into IX you can 36

186
00:12:24,550 --> 00:12:27,640
and just like any other commandment you
can do squatting just like any other

187
00:12:27,640 --> 00:12:31,150
commandment then you have this thing
called invoke command now typically you

188
00:12:31,150 --> 00:12:35,890
see invoked man used to run a process on
a remote system however if you don't

189
00:12:35,890 --> 00:12:39,370
hire my system it runs on your system so
what's the difference invoke expression

190
00:12:39,370 --> 00:12:43,480
and folks and expression we look at it
like a string right info command will

191
00:12:43,480 --> 00:12:48,160
execute a script block and it is also
quite robust you have invoked command

192
00:12:48,160 --> 00:12:52,810
ICM you have . invoke parentheses and
you also have the . & ampersand invoke

193
00:12:52,810 --> 00:12:59,050
operators so let's add this to our list
of expression our show ones coming back

194
00:12:59,050 --> 00:13:03,069
with another hit execution contact
invoke script will handle an expression

195
00:13:03,070 --> 00:13:06,790
or script lot so make sure you add that
one to the list so let's add intakes

196
00:13:06,790 --> 00:13:11,199
there now Howard power if you are
dealing with an ampersand or a . how are

197
00:13:11,200 --> 00:13:14,140
you going to make that an indicator well
for dealing with script box we can

198
00:13:14,140 --> 00:13:19,660
assume there's always going to be curly
braces or script block right and no no

199
00:13:19,660 --> 00:13:22,660
one wants to make that assumption I
alright catching on

200
00:13:23,290 --> 00:13:26,589
because we can convert expressions to
script blocks we can do that with the

201
00:13:26,589 --> 00:13:31,120
dotnet script what create we can do it
with our shell one . o back to the

202
00:13:31,120 --> 00:13:35,800
rescue invoke command . new script block
and for each of these you can offer you

203
00:13:35,800 --> 00:13:39,819
skate them and at the end of the day the
entire command that we work to office

204
00:13:39,819 --> 00:13:43,870
get up to this point is now a string so
now we can step back one more layer and

205
00:13:43,870 --> 00:13:46,690
say now we can offer you skate all the
commandments that we did we can pull

206
00:13:46,690 --> 00:13:50,199
that out straight as a string and
obfuscate a string level that's later

207
00:13:50,199 --> 00:13:51,639
too

208
00:13:51,639 --> 00:13:54,759
same thing with dotnet functions used to
think these were a bit more mutable

209
00:13:54,759 --> 00:13:59,110
though a lot of fun there i'll leave
that to go back to the slides and check

210
00:13:59,110 --> 00:14:06,009
that out so the 10 syntax so fun good

211
00:14:07,000 --> 00:14:13,329
this is where I proposed the ship to
looking for not only known bad but

212
00:14:13,329 --> 00:14:17,079
indicators of obfuscation for example
how often would you expect to see that

213
00:14:17,079 --> 00:14:24,069
may take marks in command not air Conrad
yesterday at the deep blue sea el I had

214
00:14:24,069 --> 00:14:26,589
an excellent approach i actually i
tweeted out a screenshot of one

215
00:14:26,589 --> 00:14:30,880
obviously it commands last week I'm
gonna happen to have like 25 plus signs

216
00:14:30,880 --> 00:14:34,120
and what he did is he did it before and
after analysis he took the command and

217
00:14:34,120 --> 00:14:36,970
then remove the plus signs and look at
there's a different difference in link

218
00:14:36,970 --> 00:14:41,019
to see that it decreased by at least 25
so you have 25 pluses that was an

219
00:14:41,019 --> 00:14:44,470
absolutely brilliant approach so you can
start to do that kind of analysis on

220
00:14:44,470 --> 00:14:47,260
certain characters that you typically
would expect to see there is a regex

221
00:14:47,260 --> 00:14:51,130
could you know kind of stuck with this
you're trying to look for 25 instances

222
00:14:51,130 --> 00:14:56,019
of that character so that was obviously
getting the the tokens the actual

223
00:14:56,019 --> 00:14:59,019
elements of the language itself and that
was just for one example of remote

224
00:14:59,019 --> 00:15:02,019
download let's go back and look at the
language see what other ways can we

225
00:15:02,019 --> 00:15:05,800
actually do remote download well we just
talked about that way . if you have

226
00:15:05,800 --> 00:15:09,250
powershell three or later you have
invoked webrequest you also have invoked

227
00:15:09,250 --> 00:15:13,810
rest method with that net you have these
for and against system . redundant so

228
00:15:13,810 --> 00:15:16,660
let's go and pull that out there you go
here's an example of doing that

229
00:15:16,660 --> 00:15:19,630
basically use the dinette method you
have to get the response training get

230
00:15:19,630 --> 00:15:25,449
the response close it and then invoke it
so let's say that I as a defender you're

231
00:15:25,449 --> 00:15:28,060
monitoring anytime powershell makes a
network connection

232
00:15:28,060 --> 00:15:31,060
well can you have powershell rely on
something else to go to its dirty work

233
00:15:31,060 --> 00:15:32,180
for it and then come

234
00:15:32,180 --> 00:15:37,010
I can get the contents what about
notepad we open Notepad go to open

235
00:15:37,010 --> 00:15:40,760
instead of a file type in the URL what
happens no pattern trees are contents

236
00:15:40,760 --> 00:15:44,210
for us so how can we have power cell
interact with another application

237
00:15:44,210 --> 00:15:49,700
Cindy's so this example powershell
creates a common object wscript.shell

238
00:15:49,700 --> 00:15:54,560
launches notepad says your mind now my
active screen let me send a control open

239
00:15:54,560 --> 00:15:57,979
let me then send the keys to type in the
URL only way to second for the payload

240
00:15:57,980 --> 00:16:01,010
to come down let me send a controller to
select all ctrl-c to copy all the rest

241
00:16:01,010 --> 00:16:04,670
of the clan is ripping out the clipboard
and executing it how she'll never made a

242
00:16:04,670 --> 00:16:16,099
network connection and and at the end of
the day as a red team or whenever

243
00:16:16,100 --> 00:16:19,970
powershell make something easier for you
it's usually get better visibility so

244
00:16:19,970 --> 00:16:23,750
for most things that powershell makes
easy . net is really what's happening

245
00:16:23,750 --> 00:16:26,330
under the hood so for every step of what
we just did

246
00:16:26,330 --> 00:16:30,260
there's the dotnet version of doing it
if you add a void in front of it it is

247
00:16:30,260 --> 00:16:36,470
nearly silent in the logs so anything
with an open file cool you can do this

248
00:16:36,470 --> 00:16:41,839
with i have the ps4 notepad or wordpad
one would excel PowerShell ISE not as

249
00:16:41,839 --> 00:16:45,770
clean as you may expect is fine because
you can just pull the payload down the

250
00:16:45,770 --> 00:16:47,569
center at five and it runs

251
00:16:47,570 --> 00:16:51,500
however as defenders this actually does
hit disk and temporary internet files so

252
00:16:51,500 --> 00:16:55,070
if you ever see . PS ones or again
whatever the file name is some of these

253
00:16:55,070 --> 00:16:58,070
actually maintain the filename others
create a random name excel crazy random

254
00:16:58,070 --> 00:17:01,490
name but it will pull down at least 12
files that you remain on disk so

255
00:17:01,490 --> 00:17:05,000
something to look for from yaar IOC
perspective you may find powershell

256
00:17:05,000 --> 00:17:09,619
script there so Cindy's it's kind of fun
really sloppy I mean users will probably

257
00:17:09,619 --> 00:17:13,069
notice no path starts flying up and
downloading any cats right so there has

258
00:17:13,069 --> 00:17:15,678
to be a cleaner way there is a
powershell common object instead of

259
00:17:15,679 --> 00:17:18,650
starting to spawn additional
applications to the user can actually do

260
00:17:18,650 --> 00:17:21,949
things like use internet explorer
telling and explore hey you go fetch

261
00:17:21,949 --> 00:17:24,890
this payload i'm going to wait until
you're done and I'm going to carry out

262
00:17:24,890 --> 00:17:28,400
whatever piece of HTML I want that is my
payload and then execute it

263
00:17:28,400 --> 00:17:32,120
what's nice about this is that it's
cleaner nothing hits disc it bleeds in

264
00:17:32,120 --> 00:17:34,610
it blends in with the regular user
activity because I is making the

265
00:17:34,610 --> 00:17:38,300
connection and it uses the user-agent
the default user agent for that system

266
00:17:38,300 --> 00:17:42,200
so more occupation techniques

267
00:17:42,700 --> 00:17:45,940
so remember we looked at the powershell
10 syntax we took the entire command

268
00:17:45,940 --> 00:17:48,670
truth as a string and then did string
concatenation things like that right

269
00:17:48,670 --> 00:17:52,810
well what other string concatenation
techniques we do well we can reverse the

270
00:17:52,810 --> 00:17:56,230
string we can do that by traversing in
Reverse or casting it to a char array

271
00:17:56,230 --> 00:17:59,740
and then basically keep calling the
reverse function or using the.net

272
00:17:59,740 --> 00:18:02,860
projects right to left so that way it
will actually hitting the command line

273
00:18:02,860 --> 00:18:07,270
is the entire command in Reverse we can
split the string basically insert

274
00:18:07,270 --> 00:18:09,639
garbage the limiters and then split on
that the limiter pieces back together

275
00:18:09,640 --> 00:18:10,660
and invoke it

276
00:18:10,660 --> 00:18:13,810
similarly we can put in garbage
kilometers and you split with powershell

277
00:18:13,810 --> 00:18:18,310
split . nets are the the powershell
replace or dotnet replace and keep in

278
00:18:18,310 --> 00:18:24,790
mind there's a/c replace and a replace
keep that and actually the the the f

279
00:18:24,790 --> 00:18:29,379
format operator is absolutely amazing
for a lot of really fascinating things

280
00:18:29,380 --> 00:18:34,510
are out of touch on that we get to the
the demo we can also just concatenate

281
00:18:34,510 --> 00:18:38,680
strings through any of the joint
functions with power shower . net cat or

282
00:18:38,680 --> 00:18:41,680
even the plus operator or just throw
quotes around it and no place at all

283
00:18:42,400 --> 00:18:45,940
so how in the world can detect some of
these string level and techniques again

284
00:18:45,940 --> 00:18:49,210
keep them on this is what would appear
on the command line if you have script

285
00:18:49,210 --> 00:18:52,720
block long enable you'll see you'll see
the layer to kind of obfuscation the

286
00:18:52,720 --> 00:18:56,170
string but it will automatically then
the next log show you all this crap

287
00:18:56,170 --> 00:18:59,860
remove so we'll get down to that base
that base layer which will still have

288
00:18:59,860 --> 00:19:02,949
the tick marks in that base layer
obfuscation but no matter how many times

289
00:19:02,950 --> 00:19:06,790
you wrap it with string and encoding or
encrypting anything like that script

290
00:19:06,790 --> 00:19:10,389
bottom peels back the onion every step
of the way and for it was finally

291
00:19:10,390 --> 00:19:14,080
executed module logging has the true
parameter bindings so again those two

292
00:19:14,080 --> 00:19:16,929
together make most of the techniques and
topping talking about i'm not gonna say

293
00:19:16,930 --> 00:19:20,590
makes it easy but it unravels a lot of
the noise if it so if you're only

294
00:19:20,590 --> 00:19:25,689
relying on command line it's gonna be a
really really difficult thing so we can

295
00:19:25,690 --> 00:19:28,720
look for the presence of some of these
reverse split replacing cat form an

296
00:19:28,720 --> 00:19:29,500
operator

297
00:19:29,500 --> 00:19:32,350
however denies uncommon as you may think
this really comes down to you and your

298
00:19:32,350 --> 00:19:35,620
environment and how great it is how much
asked you have to look through all this

299
00:19:35,620 --> 00:19:39,820
stuff and weed out the noise for us
since the since the detection mechanisms

300
00:19:39,820 --> 00:19:42,939
that we put into place has to scale to
all of our clients it becomes a bit

301
00:19:42,940 --> 00:19:46,570
trickier for us but again you can start
to look for these operators you can

302
00:19:46,570 --> 00:19:49,540
offer high council certain characters
like how many how many dollar signs

303
00:19:49,540 --> 00:19:53,139
reduce back to see if using variables a
topical command or how many times you

304
00:19:53,140 --> 00:19:55,490
see how many semicolons and you see if
you're doing a lot of command

305
00:19:55,490 --> 00:19:59,510
row on a single command line and more
plus circumventing strings will keep in

306
00:19:59,510 --> 00:20:01,490
mind there's always a way to do it
differently

307
00:20:01,490 --> 00:20:04,010
you can actually set variable and
variables to get around that and if you

308
00:20:04,010 --> 00:20:07,100
actually tokenize it won't even detect a
variable because it's basically looking

309
00:20:07,100 --> 00:20:10,730
at a commandment and an argument going
into it not the variable itself the same

310
00:20:10,730 --> 00:20:13,730
way you can execute multiple commands
without semicolons and cabinet without

311
00:20:13,730 --> 00:20:16,790
pluses and if there's ever any character
you can't figure out how to do a

312
00:20:16,790 --> 00:20:21,020
different way just coated with asking in
the final command that string char 15 on

313
00:20:21,020 --> 00:20:24,020
is your semicolon you're good to go

314
00:20:24,710 --> 00:20:30,050
in addition type this is the one piece
that I actually removed from my tools so

315
00:20:30,050 --> 00:20:33,379
invoke obfuscation is compatible
powershell too and later there's a

316
00:20:33,380 --> 00:20:37,760
slight difference in how you can offer
you skate type tokens as you see here

317
00:20:37,760 --> 00:20:41,000
and powershell to you can put tix it but
you can introduce white space inside

318
00:20:41,000 --> 00:20:44,240
square brackets or after the end of the
colon colon and three and later you can

319
00:20:44,240 --> 00:20:48,679
and you can actually start to inject you
start to basically put in line

320
00:20:48,679 --> 00:20:52,429
powershell comments now you can rely on
a red Xs convert followed by infinite

321
00:20:52,429 --> 00:20:55,309
white space for x square brackets you
can literally have any character under

322
00:20:55,309 --> 00:20:58,129
the Sun there but stepping back and
looking at it from indicators of

323
00:20:58,130 --> 00:21:01,850
obfuscation how often would you expect
to see an inline comment in the

324
00:21:01,850 --> 00:21:08,209
PowerShell command line something look
for so encoding decoding what happens

325
00:21:08,210 --> 00:21:10,850
actually using the office a powerful
activity well for the most part there is

326
00:21:10,850 --> 00:21:15,199
using include commands power struggle to
and also specify an ie external

327
00:21:15,200 --> 00:21:20,210
expression is automatically applied so
we see this in a lot of places as well

328
00:21:20,210 --> 00:21:23,300
as these flags to play a lot of the
tools i will generate payloads with the

329
00:21:23,300 --> 00:21:27,980
shortest possible flag to save space if
you don't have any indicators based on

330
00:21:27,980 --> 00:21:30,590
the ordering and spacing of these flags
are missing out on some low-hanging

331
00:21:30,590 --> 00:21:36,500
fruit so basically what we see . w
window for windows style EP and

332
00:21:36,500 --> 00:21:38,510
isolation policy bypass etc

333
00:21:38,510 --> 00:21:40,940
in addition a lot of these don't
necessarily have to be present we have

334
00:21:40,940 --> 00:21:43,490
seen a lot of quantity now we're
basically going in changing certain

335
00:21:43,490 --> 00:21:46,670
registry keys before that have to
specify certain arguments on the command

336
00:21:46,670 --> 00:21:50,510
line so let's look at encoded command
typically there's always see in code

337
00:21:50,510 --> 00:21:56,960
command coded ence so if we had this is
a trigger would be good we catch every

338
00:21:56,960 --> 00:22:00,860
instance of encoded command i'm not even
talking about net just literally

339
00:22:00,860 --> 00:22:03,860
powershell encoded command

340
00:22:04,390 --> 00:22:07,300
so this is what powershell gives us that
gives up they give us the four encoded

341
00:22:07,300 --> 00:22:13,360
command and they give us a sec and they
also give us encoded command command

342
00:22:13,360 --> 00:22:19,300
calm calm co every single one of these
works because it automatically auto

343
00:22:19,300 --> 00:22:23,980
append asker's to find are you returning
a single flag so whenever you're good

344
00:22:23,980 --> 00:22:27,190
writing a script in parameter binding
you can specify just enough of the flag

345
00:22:27,190 --> 00:22:28,510
to get you to where you need to go

346
00:22:28,510 --> 00:22:33,010
that's why you have not not even all
that are short for no profile so now we

347
00:22:33,010 --> 00:22:36,580
want to say non-interactive wouldn't do
anything from 90 all the way up to

348
00:22:36,580 --> 00:22:40,840
non-interactive and it works my school
my tool take that into account and

349
00:22:40,840 --> 00:22:44,320
automatically whichever flies you choose
will randomize the order randomized

350
00:22:44,320 --> 00:22:47,290
spacing between as well as randomized
which substring of the shortest as long

351
00:22:47,290 --> 00:22:53,230
as you have and the reason I do this is
not just to be just not just to be mean

352
00:22:53,230 --> 00:22:56,410
but it's because it's possible and
attackers are likely already doing it

353
00:22:56,410 --> 00:22:59,320
and we need to make sure we're not
making bad assumptions is looking at .

354
00:22:59,320 --> 00:23:04,360
kinda like we're gonna miss really bad
stuff . net also has basically four

355
00:23:04,360 --> 00:23:07,600
methods you'll see medical uses a lot
sometimes you'll see that this . net

356
00:23:07,600 --> 00:23:11,530
basically for decoding method paired
with gzip technology also see attackers

357
00:23:11,530 --> 00:23:15,010
actually using AES encryption library so
it looks in different ways to encode

358
00:23:15,010 --> 00:23:21,340
what about ascii what about octal hex
binary the bitwise XOR and we're

359
00:23:21,340 --> 00:23:25,360
starting to see bitwise XOR bit but some
of the others again if you don't have

360
00:23:25,360 --> 00:23:29,709
their there are some really nice
indicators you can build off of base64

361
00:23:29,710 --> 00:23:35,410
even on tools that i will mention any
names but even on tools that even

362
00:23:35,410 --> 00:23:38,560
randomize the case there are components
of that tool that are predictable enough

363
00:23:38,560 --> 00:23:41,950
with the characters i don't have upper
and lower case that you can actually

364
00:23:41,950 --> 00:23:44,920
build indicated based off of that is
keep in mind with basics before you have

365
00:23:44,920 --> 00:23:49,570
to have three signatures for anyone .
xtreme because of how a 64 works at the

366
00:23:49,570 --> 00:23:51,850
end of the day if you have that your
signature is not going to work if it's

367
00:23:51,850 --> 00:23:56,050
it with a ski or these other encoding so
we can become complacent and when you

368
00:23:56,050 --> 00:23:59,139
look at the joint and the bitwise XOR
you don't even need white space before

369
00:23:59,140 --> 00:24:02,290
and after that so again don't allow
their being white space it'll have to be

370
00:24:02,290 --> 00:24:04,659
there joining can actually get the
beginning of a command not the end

371
00:24:04,660 --> 00:24:07,810
things to keep in mind

372
00:24:07,810 --> 00:24:11,169
so how about something different for
power show house powershell passwords

373
00:24:11,170 --> 00:24:13,299
well they're secure string right

374
00:24:13,299 --> 00:24:18,789
so with securing does anyone recognize
this this flag rideau centre password

375
00:24:19,299 --> 00:24:26,769
no no sorry way as security during the
last thing so this is reading and

376
00:24:26,769 --> 00:24:30,309
interactively the password and they were
converting it to a secure string now we

377
00:24:30,309 --> 00:24:33,580
have a security object now what if we
convert from a secure string it is this

378
00:24:33,580 --> 00:24:37,239
plain text deal and that 01 base of the
highlighted portion this will always be

379
00:24:37,239 --> 00:24:40,840
the case when you are using secure shit
without departing the key because what

380
00:24:40,840 --> 00:24:43,749
is the key the key is the user in the
current system to make it very difficult

381
00:24:43,749 --> 00:24:48,190
to be able to take that text and run it
are basically decrypt it and pull the

382
00:24:48,190 --> 00:24:50,200
password on another system there are
ways of doing it

383
00:24:50,200 --> 00:24:55,389
that's not for this talk so what if we
actually specify the key then we can

384
00:24:55,389 --> 00:24:57,939
have we can generate something on our
attacker system and executed on the

385
00:24:57,940 --> 00:25:03,100
target system so the key can be 16 24 32
bit and there's a lot of different ways

386
00:25:03,100 --> 00:25:07,029
that you can express that key again run
my tool enough times you'll see all the

387
00:25:07,029 --> 00:25:10,809
different ways that you can generate
random keys which the tool handles so

388
00:25:10,809 --> 00:25:11,499
when you do that

389
00:25:11,499 --> 00:25:17,289
what's the size restriction 65,000
characters order becon we talk about our

390
00:25:17,289 --> 00:25:18,249
passwords

391
00:25:18,249 --> 00:25:21,669
I've never felt 65,000 characters get
about my password

392
00:25:21,669 --> 00:25:26,889
why is it so large what if we put an
entire script inside of a password

393
00:25:26,889 --> 00:25:36,668
object that's what I did so now this is
the command ixi WR URL content and i

394
00:25:36,669 --> 00:25:41,230
just chose the random p 1 to 16 and as
you'll see whenever you specify a

395
00:25:41,230 --> 00:25:46,450
security object with the key then it
will start with 76 492 d that high

396
00:25:46,450 --> 00:25:51,220
portion it's fun to create networks
signatures looking for these things why

397
00:25:51,220 --> 00:25:53,919
across the wire because you'll find a
lot of things passing secure string

398
00:25:53,919 --> 00:25:58,690
objects around with turkeys trailing
right behind them so on the target

399
00:25:58,690 --> 00:26:03,070
system you then send that you basically
said that big blob of data and then this

400
00:26:03,070 --> 00:26:06,519
is one of the ways that you can
basically unravel and rip out of context

401
00:26:06,519 --> 00:26:10,359
the plaintext password which is our
command our script what have you and

402
00:26:10,359 --> 00:26:12,970
there's actually two different ways and
Donna that I found to do this as well as

403
00:26:12,970 --> 00:26:15,340
an hour she'll creating a password
object and we're ripping out the

404
00:26:15,340 --> 00:26:18,340
credential all three are built into the
tool randomly choose one

405
00:26:18,879 --> 00:26:20,969
there you go

406
00:26:20,970 --> 00:26:25,799
however if you are unsecured string a
65,000 character object you will spike

407
00:26:25,799 --> 00:26:29,460
cpu and it will take a good 20 or 30
seconds so if you have a large payload

408
00:26:29,460 --> 00:26:32,700
what you can do is basically take it
junk into a lot of small random size

409
00:26:32,700 --> 00:26:35,970
pieces delimited throat upstate
somewhere and then on the target we

410
00:26:35,970 --> 00:26:40,230
basically in the remotely reach out pull
down that split on the limiters and for

411
00:26:40,230 --> 00:26:43,590
each piece on secure string and fill out
your commands all the way done and then

412
00:26:43,590 --> 00:26:48,510
invoke it and you're good and it takes
12 seconds so after i finished his pee

413
00:26:48,510 --> 00:26:52,080
Oh see I was pretty happy about it and
then i was searching for something else

414
00:26:52,080 --> 00:26:54,600
on technet i found this article from
$MONTH 2010 that someone said is there

415
00:26:54,600 --> 00:26:58,289
any office cater for powershell and
someone replied and said I guess you

416
00:26:58,289 --> 00:27:03,330
could use secure string to store script
and then put out content as i know not

417
00:27:03,330 --> 00:27:04,408
original dang it

418
00:27:04,409 --> 00:27:09,720
so so upset yeah what is really original
in this field right but anyways I kind

419
00:27:09,720 --> 00:27:12,030
of feel like maybe it was original so
when talking about the awesomest hey

420
00:27:12,030 --> 00:27:16,860
like i like i mean something is a cool
concept of like this guy deserves the

421
00:27:16,860 --> 00:27:22,080
credit for you know and he said bro 0
upvotes you're good man so

422
00:27:23,570 --> 00:27:28,610
but in all seriousness the guy who wrote
that is just call who is a rockstar on

423
00:27:28,610 --> 00:27:35,449
technet so kudos to him but yeah so
nothing is truly new so lastly launch

424
00:27:35,450 --> 00:27:38,750
techniques we looked at office getting
PowerShell command syntax will you look

425
00:27:38,750 --> 00:27:41,150
at the richness of the language to
accomplish the same task with different

426
00:27:41,150 --> 00:27:44,660
command objects we've said okay want to
do that we can step back into the whole

427
00:27:44,660 --> 00:27:47,480
thing is a string and do that kind of
education we can also wrap as many

428
00:27:47,480 --> 00:27:51,020
layers as you want encoding or cooking
techniques so now how can we offer you

429
00:27:51,020 --> 00:27:57,170
skate or obscure with launching it so
you're confident in your regex you can

430
00:27:57,170 --> 00:27:59,870
catch all this stuff right we're
applying this regex to the command line

431
00:27:59,870 --> 00:28:06,620
argument for every time powershell runs
are we good no for two reasons 1 i'm

432
00:28:06,620 --> 00:28:09,979
just going to briefly touch on unmanaged
powershell bent and other folks have

433
00:28:09,980 --> 00:28:12,800
done a much better job explaining this
there's other resources to look at the

434
00:28:12,800 --> 00:28:18,169
end of the day PowerShell ISE not
running but a binary calling system

435
00:28:18,170 --> 00:28:24,350
management automation . dll keep in mind
that all this is log in powershell

436
00:28:24,350 --> 00:28:27,860
script lock module logging unless you
have version 2 still installed version

437
00:28:27,860 --> 00:28:31,070
to specified in which case it will not
be log good reason don't install two

438
00:28:31,070 --> 00:28:35,929
once you have five but we're going to
talk about is convoluted launch mess

439
00:28:35,930 --> 00:28:38,840
techniques for power shell txt so we're
not doing animated stuff we're only

440
00:28:38,840 --> 00:28:43,159
looking at the executable so powershell
help again gives us a nice gold mine

441
00:28:43,160 --> 00:28:47,180
dash command nice highlighted portion
there says it's a command is dash then

442
00:28:47,180 --> 00:28:51,590
it will receive the commander standard
input does that mean this is typically

443
00:28:51,590 --> 00:28:54,290
how we used to launch PowerShell
commands right command C power shop man

444
00:28:54,290 --> 00:28:58,639
what if we do command an echo the
command and pipe it into powershell dash

445
00:28:58,640 --> 00:29:06,020
it runs we can also specify the input
variable which is the standard input and

446
00:29:06,020 --> 00:29:09,770
specified IX and that runs now what does
this look like the command line

447
00:29:09,770 --> 00:29:13,400
arguments powershell dash powershell IEX
input

448
00:29:14,090 --> 00:29:19,970
where's the command parent process
system on will pose together for you in

449
00:29:19,970 --> 00:29:25,790
a single log as well 4688 the later
versions but have you ever looked for

450
00:29:25,790 --> 00:29:30,860
powershell arguments in command or in
any process other than powershell maybe

451
00:29:30,860 --> 00:29:34,939
something to start doing or at least be
having with the contact or the syntax

452
00:29:34,940 --> 00:29:36,350
that basically powershell invoking from

453
00:29:36,350 --> 00:29:39,799
and then put another thing you can do is
say okay well why don't we look at

454
00:29:39,799 --> 00:29:42,950
command look for pipes and carrots and
peas escape things also a good approach

455
00:29:42,950 --> 00:29:48,200
but you can't even rely on anything in
there being any strings in there being

456
00:29:48,200 --> 00:29:51,320
pieced together so for example you can't
just always allow that being piped

457
00:29:51,320 --> 00:29:55,399
powershell because you can actually talk
about our show and inside of the

458
00:29:55,400 --> 00:30:01,940
previous command and spawned three in a
row and there you go you can also set in

459
00:30:01,940 --> 00:30:05,630
an environment variable the command and
then have our cells gonna die x and this

460
00:30:05,630 --> 00:30:08,120
is actually already out there in the
wild with commodity malware cups or does

461
00:30:08,120 --> 00:30:12,260
this man has obviously a JavaScript
kicked off on the registry from shta

462
00:30:12,260 --> 00:30:15,799
javascript run sets the powershot man
into a process of environment variable

463
00:30:15,799 --> 00:30:18,350
the spawns powershell to execute the
contents out the environment variable

464
00:30:18,350 --> 00:30:23,570
and all you see is powershell IEX random
environment variable name and there's

465
00:30:23,570 --> 00:30:26,990
more than one way of course to retrieve
the value of an environment variable

466
00:30:26,990 --> 00:30:32,299
here's the here's the ways that i found
so far i'll leave that in there for

467
00:30:32,299 --> 00:30:36,559
later reading you can also use clip you
can basically have command echo the

468
00:30:36,559 --> 00:30:41,000
powershot man to clip and then spotted
powerful process to rip whatever in the

469
00:30:41,000 --> 00:30:46,039
clipboard out and executed and this
actually smiles clip that XD a separate

470
00:30:46,039 --> 00:30:48,710
process so i don't know if you're
looking for click the exe running but

471
00:30:48,710 --> 00:30:54,980
maybe interesting so the parent process
tells the story right so so we're good

472
00:30:54,980 --> 00:30:58,400
we have our are indicators will apply it
whenever powershell txt runs in whatever

473
00:30:58,400 --> 00:31:04,610
its parent runs no it's not right so
this is a good example just looked at

474
00:31:04,610 --> 00:31:07,879
going into standard input to the parent
process has a command what if we

475
00:31:07,880 --> 00:31:13,640
introduced a third process in the mix
and had command man powershell so the

476
00:31:13,640 --> 00:31:17,179
first command we set it second command
with an echo in the powershell does this

477
00:31:17,179 --> 00:31:18,140
work

478
00:31:18,140 --> 00:31:21,080
what execute but it's still in the
parent process and this really

479
00:31:21,080 --> 00:31:23,899
frustrated me at first it's like well it
shouldn't be because it should should be

480
00:31:23,900 --> 00:31:28,309
further back in their eyes I need to
escape that pipe so that is escape for

481
00:31:28,309 --> 00:31:30,950
the first command but not for the second
so that way it breaks out of the second

482
00:31:30,950 --> 00:31:34,880
one applies only the second one to
powershell and when you do that it works

483
00:31:37,120 --> 00:31:43,330
yeah

484
00:31:43,330 --> 00:31:46,840
and you know it's funny when you
actually start building a tool to apply

485
00:31:46,840 --> 00:31:49,540
what you've been researching you learn a
lot more about it that you didn't

486
00:31:49,540 --> 00:31:53,830
realize he actually in the tool you can
actually have the parent process only be

487
00:31:53,830 --> 00:32:00,159
command /c and then a comment or not a a
variable name and white space actually

488
00:32:00,160 --> 00:32:05,800
isn't even necessary between /a c and
command echo so don't even rely on that

489
00:32:06,910 --> 00:32:10,360
so here's just a little graph showing
the the structure of that previous

490
00:32:10,360 --> 00:32:14,800
command so why don't we just settle this
recursively if we ever see powershell

491
00:32:14,800 --> 00:32:17,800
spotting something weird like xq
standard import environment variable or

492
00:32:17,800 --> 00:32:21,550
something like that when we walk all the
way up the tree look for the command not

493
00:32:21,550 --> 00:32:24,610
quite there are ways where you can
basically have two completely unrelated

494
00:32:24,610 --> 00:32:28,060
commands passing information back to
each other so let's say you start with

495
00:32:28,060 --> 00:32:32,169
command right it sets your PowerShell
command and spawned another command and

496
00:32:32,170 --> 00:32:35,500
even with a clipboard example it will
basically right in the clip here and

497
00:32:35,500 --> 00:32:37,990
this will spawn another command
powershell to say wherever the clipboard

498
00:32:37,990 --> 00:32:41,200
isn't the contents and executed so now
if you see Power show executing

499
00:32:41,200 --> 00:32:44,800
clipboard and recursively call the way
up you'll never find actual command you

500
00:32:44,800 --> 00:32:47,500
can do the same thing with Wi we
actually have seen an attacker do this

501
00:32:47,500 --> 00:32:51,040
before where they basically have one
commander basically set the PowerShell

502
00:32:51,040 --> 00:32:54,340
command into the ethers of the computer
and then a completely separate process

503
00:32:54,340 --> 00:32:58,149
to use w my to query on the process
information split the limited decoded

504
00:32:58,150 --> 00:33:01,600
and executed so beware pipes

505
00:33:03,280 --> 00:33:06,280
I told you there's a couple means at the
end right there we go

506
00:33:07,060 --> 00:33:10,060
beware flappy bird obviously that that's
a given

507
00:33:10,060 --> 00:33:13,330
you guys ready for demo all right

508
00:33:13,900 --> 00:33:16,900
disclaimer please do not use this tool
for evil

509
00:33:18,970 --> 00:33:29,409
alright so the code is live on github as
of about an hour before this talk and so

510
00:33:29,409 --> 00:33:35,020
import modules what you do to get up and
then invoke obfuscation I like a ski are

511
00:33:35,020 --> 00:33:39,700
animated in particular this is showing
an obvious get command breaking down to

512
00:33:39,700 --> 00:33:46,390
the actual payload you can see we have a
help menu here and so we're going to do

513
00:33:46,390 --> 00:33:50,200
is walk to this tutorial options in
yellow basically take you to something

514
00:33:50,200 --> 00:33:54,580
else and options and green off you skate
so tutorial first we need to load the

515
00:33:54,580 --> 00:33:57,850
script so you can basically set script
block or you can set script path the

516
00:33:57,850 --> 00:34:02,260
path can be a local file or URL those
work that's going to set our payload

517
00:34:02,260 --> 00:34:08,679
alright we successfully set it so now
let's let's look at the other options we

518
00:34:08,679 --> 00:34:13,270
have again yellow options will take us
to the navigation green actually apply

519
00:34:13,270 --> 00:34:19,449
education and there are optional their
token string encoding and launcher we

520
00:34:19,449 --> 00:34:23,560
have back CD . for navigating back on
the menu also homemade to take the

521
00:34:23,560 --> 00:34:27,520
beginning so for quick example let's go
into the encoding menu and then apply

522
00:34:27,520 --> 00:34:32,409
the option number five which will apply
secure string office location so we'll

523
00:34:32,409 --> 00:34:37,599
type encoding their options again green
actually apply something to the command

524
00:34:37,599 --> 00:34:41,859
so type 5 there isn't secure string
again randomly chose a way to convert it

525
00:34:41,859 --> 00:34:48,190
from secure string randomly chose a key
a key syntax and out put it there so we

526
00:34:48,190 --> 00:34:51,040
can run tests or exact to run it locally
on our system

527
00:34:51,040 --> 00:34:53,800
you probably don't always want to do
this but just to for example to see

528
00:34:53,800 --> 00:34:57,220
other still works show will show you
information about the command where it

529
00:34:57,220 --> 00:35:01,930
is now the obfuscation copier clip copy
to the clipboard out copy it to the disc

530
00:35:01,930 --> 00:35:06,399
reset will remove the obfuscation then
help for any other needs to show command

531
00:35:06,400 --> 00:35:10,660
so we have a script block will show you
every X every obfuscation technically by

532
00:35:10,660 --> 00:35:13,029
the obvious get command as well as the
link because you want to keep the

533
00:35:13,030 --> 00:35:18,849
Lincoln mind depending on how you can
launch it so it works so let us reset

534
00:35:18,849 --> 00:35:22,599
this and do a little more interesting
example which is the remote download

535
00:35:22,599 --> 00:35:25,810
cradle and you'll notice in this example
I'm using a file on disk that's because

536
00:35:25,810 --> 00:35:28,860
I trust the people in this room so
little don't even want my demo reel

537
00:35:28,860 --> 00:35:32,640
hang out to the internet but it's using
download string so it works on local or

538
00:35:32,640 --> 00:35:36,779
URL so there's our syntax let's go
through token and look at what opens

539
00:35:36,780 --> 00:35:39,420
this can actually have we've already
kind of looked at this in the slides but

540
00:35:39,420 --> 00:35:43,530
this is how the tool handles it so
string the URL is a string so we can

541
00:35:43,530 --> 00:35:47,430
concatenate it in line we can always set
as a variable but for the tool say close

542
00:35:47,430 --> 00:35:54,210
to do the string concatenation so hit
one now our URLs concatenated let's go

543
00:35:54,210 --> 00:35:58,140
back and look at the next one command in
this case we have two commands we have

544
00:35:58,140 --> 00:36:02,009
invoked expression and we have new
object so when we go into the command

545
00:36:02,010 --> 00:36:05,190
menu will see that we have tix or
splatting as an officer stationed

546
00:36:05,190 --> 00:36:10,530
technique which one choosing which one
will go with you

547
00:36:10,530 --> 00:36:14,220
all right i'm gonna ask the crowd but
it's you know it's pre-recorded so so

548
00:36:14,220 --> 00:36:19,020
now invoke expression in new object both
are splatted and they randomly chose to

549
00:36:19,020 --> 00:36:24,509
use the . as opposed to the ampersand so
net web client is an argument so let's

550
00:36:24,510 --> 00:36:28,170
jump into the argument menu for
argument's we have random k sticks

551
00:36:28,170 --> 00:36:37,320
concatenate will go with ticks that way
. picked up download string is a member

552
00:36:37,320 --> 00:36:44,910
so we'll go into the number menu here we
have random k sticks catenation will go

553
00:36:44,910 --> 00:36:47,640
from catenation now if you notice with
this when you can catenate remember you

554
00:36:47,640 --> 00:36:50,790
have to a doc member so sometimes
certain obfuscation techniques will

555
00:36:50,790 --> 00:36:54,000
introduce one you have it covered before
it's always nice to go back and run at

556
00:36:54,000 --> 00:36:58,170
one or two times to catch that so we'll
go back into the number of obfuscation

557
00:36:58,170 --> 00:37:02,280
and rerun it to make sure we get that
invoke so don't let anything untouched

558
00:37:02,280 --> 00:37:06,900
so that the ticket office location now
invoke is obvious cated that's

559
00:37:06,900 --> 00:37:14,460
everything in the command from a token
level this is using the.net language

560
00:37:14,460 --> 00:37:18,120
partial basically tokenize the command
figure out which pieces which so paste

561
00:37:18,120 --> 00:37:25,319
into a powerful prophet as you can see
it works now event log so let's look at

562
00:37:25,320 --> 00:37:30,240
this in powershell we look at the so
that's a bit fuzzy but when you look at

563
00:37:30,240 --> 00:37:35,669
the script walking the finally obviously
command contains exactly what we saw in

564
00:37:35,670 --> 00:37:39,360
the tool the payload that invoked was
not obvious created so it is there in

565
00:37:39,360 --> 00:37:40,680
plain text there's nothing from

566
00:37:40,680 --> 00:37:45,000
from obviously getting both to calling
command and the payload itself so sort

567
00:37:45,000 --> 00:37:49,440
of the occupation and at the end of the
day it's taking a lot of time to do all

568
00:37:49,440 --> 00:37:53,339
this one we just use the hall and hit
one will go and randomize the order of

569
00:37:53,339 --> 00:37:56,308
which makes it hits first does it all
for you and you can run as many times as

570
00:37:56,309 --> 00:37:59,309
you want

571
00:38:01,109 --> 00:38:08,098
so let's go back to home so the second
thing we look at is string layer so we

572
00:38:08,099 --> 00:38:10,619
basically take whatever command we
currently have office created an

573
00:38:10,619 --> 00:38:15,270
obfuscated it and we can reverse it and
it again it will choose one of those

574
00:38:15,270 --> 00:38:18,450
random reversed functions that you saw
in the slides and the whole command is

575
00:38:18,450 --> 00:38:21,450
in Reverse still works good

576
00:38:21,990 --> 00:38:26,640
so next let's remove that let's look at
the concatenate function we go again

577
00:38:26,640 --> 00:38:30,779
randomly choose candy operations to
remove that look at reorder this is

578
00:38:30,780 --> 00:38:34,319
using the F format operator and
basically chops up the command limits

579
00:38:34,319 --> 00:38:37,589
and reorder that using an operator and
again you can apply all these in a row

580
00:38:37,589 --> 00:38:41,849
and stack them on top of each other and
it gets messy but it still works

581
00:38:44,430 --> 00:38:49,919
having fun good alright encoding so it's
looking at this more obscure encoding

582
00:38:49,920 --> 00:38:54,569
techniques i didn't include base64 or
straight-up aes because people already

583
00:38:54,569 --> 00:38:58,410
kind of using that I want to include
some more fun stuff so ascii x-acto

584
00:38:58,410 --> 00:39:03,210
binary secure string each works there's
opticals tested

585
00:39:03,210 --> 00:39:09,119
yeah we're good binary works secure
string suggestion grows rather rapidly

586
00:39:09,119 --> 00:39:14,130
so use that one sparingly and if you pop
the 8190 limit will give you a warning

587
00:39:14,130 --> 00:39:17,130
by a map may want to start over you're
trying to put this in the command prompt

588
00:39:17,130 --> 00:39:21,630
so launcher the last thing that we
covered basically how are you gonna

589
00:39:21,630 --> 00:39:22,799
launch this sucker

590
00:39:22,799 --> 00:39:28,079
so we have a standard PS and command we
have environment variable standard input

591
00:39:28,079 --> 00:39:31,020
and we have our + $OPERAND + $OPERAND
and standard input plus plus

592
00:39:31,020 --> 00:39:34,470
so far we basically the command prompt
that sets the PowerShell command then

593
00:39:34,470 --> 00:39:37,410
sponsor a child powerful process to
invoke the contents of that process

594
00:39:37,410 --> 00:39:41,009
level environment variable and again it
uses a lot of different techniques every

595
00:39:41,010 --> 00:39:43,980
technique that i found so far be able to
extract value of an environment variable

596
00:39:43,980 --> 00:39:47,540
it randomizes between all those choose
and applause each time you run it

597
00:39:47,540 --> 00:39:50,690
being choose whatever flags you want to
do here and it will basically take each

598
00:39:50,690 --> 00:39:53,930
flag again randomly choose the substrate
of the flag that works randomize the

599
00:39:53,930 --> 00:39:58,430
order to randomize the white space
between it and there's your command once

600
00:39:58,430 --> 00:40:00,950
you apply a launcher if you try to run
tests are basically said hey you can't

601
00:40:00,950 --> 00:40:03,890
do this in powershell see body wrapped
in something else and I can't do anymore

602
00:40:03,890 --> 00:40:07,279
occupation because it's no longer just a
PowerShell command but I've tried to

603
00:40:07,280 --> 00:40:09,950
make the interface as user friendly as
possible so you'll get little prospect I

604
00:40:09,950 --> 00:40:11,600
hate you can't do what you're trying to
do

605
00:40:11,600 --> 00:40:16,520
reset obfuscation if you want to and so
you can basically see see the command

606
00:40:16,520 --> 00:40:19,550
there and again the payload basically
part of the community invoking the

607
00:40:19,550 --> 00:40:22,010
environment variable the whole bottom
two lines is office created

608
00:40:22,010 --> 00:40:27,110
automatically for you so it's copied to
clipboard and throw into command esc

609
00:40:27,110 --> 00:40:30,230
doesn't work

610
00:40:30,800 --> 00:40:37,130
yeah that's cool there we go now let's
look at system on again we've already

611
00:40:37,130 --> 00:40:40,070
kind of looked at this and slides were
just showing you that works the

612
00:40:40,070 --> 00:40:43,790
PowerShell command is basically
powershell father and execution flags

613
00:40:43,790 --> 00:40:47,570
followed by the syntax to invoke the
environment variable and in the parent

614
00:40:47,570 --> 00:41:01,460
process is the one actually contains the
PowerShell command so let's go back and

615
00:41:01,460 --> 00:41:05,060
let us apply one of the plus + so
basically + + saying instead of pushing

616
00:41:05,060 --> 00:41:08,779
the command the parent process i want to
push it to the game there's absolutely

617
00:41:08,780 --> 00:41:13,130
nothing stopping you from pushing it
further just escaping becomes an

618
00:41:13,130 --> 00:41:15,860
absolute nightmare when you start to
stack that many layers on top of one

619
00:41:15,860 --> 00:41:18,650
another i figure 2 is enough to prove
the point the show it's possible to

620
00:41:18,650 --> 00:41:22,820
break habits of assuming it will be in
powershell or the parent process so this

621
00:41:22,820 --> 00:41:27,620
case will choose standard in + + again
choose their flags we want and it will

622
00:41:27,620 --> 00:41:32,990
generate our payload go and grab that so
again it's us

623
00:41:34,040 --> 00:41:40,910
yep we're going to clipboard 30m we're
good THX this model more time and again

624
00:41:40,910 --> 00:41:45,830
with respect to see the powershell well
with its randomized flags and then the

625
00:41:45,830 --> 00:41:49,310
ending with just a single dash which is
the standard input it chose to use for

626
00:41:49,310 --> 00:41:52,700
this iteration began training with
choosing between all the ones and the

627
00:41:52,700 --> 00:41:55,790
parent process is literally command /c
and

628
00:41:55,790 --> 00:41:59,210
variable name it's not even if you're
using the bar plus plus it's not even

629
00:41:59,210 --> 00:42:02,870
the same environment variable that our
shells calling it's in a variable that

630
00:42:02,870 --> 00:42:04,970
then calls the PowerShell command
reference to another environment

631
00:42:04,970 --> 00:42:08,689
variable it's kind of like Inception so
let's go to the grandparent process

632
00:42:08,690 --> 00:42:17,180
that's where the command is actually
stored and we're based going to a

633
00:42:17,180 --> 00:42:22,910
rapid-fire token all 11 let's do it
again let's keep y'all let's go back

634
00:42:22,910 --> 00:42:25,609
let's throw in since you don't open
let's go back a string what we're going

635
00:42:25,610 --> 00:42:29,660
to do we're going to do a reverse good
let's go back let's go to encoding us to

636
00:42:29,660 --> 00:42:33,649
hex hex encoded good test it still works
let's go to launcher what we want to do

637
00:42:33,650 --> 00:42:38,150
standard in + + launcher applied let's
go ahead and get flags there we go

638
00:42:38,150 --> 00:42:41,150
copy to clipboard throw in the command
does it work

639
00:42:41,930 --> 00:42:48,560
yes yes

640
00:42:54,340 --> 00:42:58,000
so again the tool even says please
obfuscate responsibly

641
00:43:01,000 --> 00:43:04,390
so in all seriousness what does this
mean for the blue team

642
00:43:04,390 --> 00:43:10,270
well as I kept finding more these
techniques it was exhilarating honestly

643
00:43:10,270 --> 00:43:13,870
kind of frustrating and i really like
what Jefferson over said in the keynote

644
00:43:13,870 --> 00:43:17,500
basically the difference between real
security and hope fueled by immigrants

645
00:43:17,500 --> 00:43:21,910
again i'm a blue team Murr my hope is
that this presentation this tool will

646
00:43:21,910 --> 00:43:26,109
shatter hope that current detection is
sufficient and we'll get rid of us

647
00:43:26,110 --> 00:43:29,920
relying on an ignorance of what is
syntactically and obfuscation was

648
00:43:29,920 --> 00:43:34,900
possible with powershell this is
honestly what I feel like a lot of times

649
00:43:34,900 --> 00:43:39,790
when I see this stuff and perhaps some
of you feel this way as well but at the

650
00:43:39,790 --> 00:43:44,110
end of the day attackers are already
office stating they we have not seen

651
00:43:44,110 --> 00:43:47,200
them off escaped to this extent but it
is possible and I'm absolutely positive

652
00:43:47,200 --> 00:43:52,270
that they are well positive the stronger
I feel pretty confident that they're

653
00:43:52,270 --> 00:43:54,940
people who are much smarter than me that
figure this out I've been using it for

654
00:43:54,940 --> 00:43:59,020
quite a while and we put it to you that
way a purely command-line argument

655
00:43:59,020 --> 00:44:02,890
approach will be absolutely difficult if
that is truly all you have to work with

656
00:44:02,890 --> 00:44:07,540
then that is a shame but there are
things that you can do to counter that

657
00:44:07,540 --> 00:44:10,570
again shifting from looking just for
known bad to also looking for indicators

658
00:44:10,570 --> 00:44:13,840
of obfuscation and being aware of these
launching techniques to know where you

659
00:44:13,840 --> 00:44:16,570
been looking for powershell in the first
place

660
00:44:16,570 --> 00:44:20,410
so what if we're not dealing with
obfuscation in Python RBA like with the

661
00:44:20,410 --> 00:44:23,740
logs be better there right

662
00:44:23,740 --> 00:44:27,370
so again people like a bad enough power
shell look at these incredible logs that

663
00:44:27,370 --> 00:44:32,950
we have absolutely amazing i also hope
that if in your organization you've been

664
00:44:32,950 --> 00:44:36,040
pushing to get powershell five and the
incredible login it comes with if

665
00:44:36,040 --> 00:44:40,360
there's been pushed back made this tool
help empower your cause to say this is

666
00:44:40,360 --> 00:44:44,260
why we need this logging that would make
me immensely happy if that actually

667
00:44:44,260 --> 00:44:47,890
happens and you do get that then please
tweet me i would love to hear that that

668
00:44:47,890 --> 00:44:49,839
would make me feel very happy

669
00:44:49,840 --> 00:44:53,290
powershell script block logging
simplifies every layer of the wrap off

670
00:44:53,290 --> 00:44:56,140
the station until you get down to the
base layer so if you are looking for

671
00:44:56,140 --> 00:45:00,040
these indicators directly and script
block logging you can disregard all the

672
00:45:00,040 --> 00:45:02,190
string level encoding and

673
00:45:02,190 --> 00:45:05,310
launching techniques even manage power
shell forget all that you're getting

674
00:45:05,310 --> 00:45:09,600
there the raw the last thing is being
run you have to still take into account

675
00:45:09,600 --> 00:45:13,770
take Mark's string concatenation
basically the lowest level that you have

676
00:45:13,770 --> 00:45:16,980
that you're not invoking you still have
to take that into account so keep that

677
00:45:16,980 --> 00:45:22,800
in mind and lastly break all assumptions
of what you know again if are you

678
00:45:22,800 --> 00:45:26,130
absolutely positive there has to be a
white space before this is not i would

679
00:45:26,130 --> 00:45:31,350
include it as an indicator know your
options again powershell is just my

680
00:45:31,350 --> 00:45:35,250
favorite language i'm absolutely
obsessed with powershell in the richness

681
00:45:35,250 --> 00:45:39,900
and complexity of it or not it isn't
complexity of itself but we try to start

682
00:45:39,900 --> 00:45:42,540
nailing it down it becomes a complex
animal but it's absolutely exhilarating

683
00:45:42,540 --> 00:45:47,490
know what options exist so you can know
how to defend against them and finally I

684
00:45:47,490 --> 00:45:50,910
can't stress enough hunting for
indicators of obfuscation at the end of

685
00:45:50,910 --> 00:45:53,549
the day when you start to generate all
these pills yourself you'll start to see

686
00:45:53,550 --> 00:45:56,910
there are things in there that are
really weird that shouldn't really exist

687
00:45:56,910 --> 00:46:01,319
there to the extent that they do so
that's my my word of encouragement

688
00:46:01,890 --> 00:46:05,640
I'm credit where credit is due just a
lot of great people get to work with on

689
00:46:05,640 --> 00:46:08,850
a daily basis and some previous
colleagues as well and help me just

690
00:46:08,850 --> 00:46:12,839
encouraging me to pursue this research
again this has been my life for the past

691
00:46:12,840 --> 00:46:17,430
year hundreds of hours of research over
300 hours of tool time personal time in

692
00:46:17,430 --> 00:46:22,710
the past two months for this and finally
and definitely not least is my wife page

693
00:46:22,710 --> 00:46:26,490
for putting up with all this time I've
done this and encouraging all throughout

694
00:46:26,490 --> 00:46:30,720
the way and honestly humoring me by
listening to me talk about how amazing

695
00:46:30,720 --> 00:46:33,720
power shell is so thank you very much

696
00:46:44,310 --> 00:46:47,310
any questions

697
00:46:47,820 --> 00:47:04,710
yes i would say use both and test this
and see for yourself

698
00:47:05,490 --> 00:47:10,080
there are there are ways to call stuff
not to appear in transcription logging

699
00:47:10,080 --> 00:47:13,350
it all depends on what kind of payload
you're trying to launch so any one piece

700
00:47:13,350 --> 00:47:17,040
of evidence i would not rely entirely on
but together it really does paint a

701
00:47:17,040 --> 00:47:20,040
picture for you

702
00:47:22,680 --> 00:47:25,680
yep

703
00:47:31,110 --> 00:47:36,510
yeah so the question is what we like to
see Microsoft change with logging in

704
00:47:36,510 --> 00:47:38,820
behavior they kind of already done it

705
00:47:38,820 --> 00:47:42,300
I mean the logging is there it's just a
matter of not many people have it or

706
00:47:42,300 --> 00:47:46,890
using it and it can be a little tricky
to figure out with so much data being

707
00:47:46,890 --> 00:47:49,529
there and depending on how you're
ingesting logs but at the end of the day

708
00:47:49,530 --> 00:47:53,280
I mean Microsoft really has handed us a
gift on a golden platter to have this

709
00:47:53,280 --> 00:47:57,840
kind of logging with scripting languages
and in any thoughts and suggestions and

710
00:47:57,840 --> 00:48:01,920
questions that I've had about any of
these techniques and ideas they've been

711
00:48:01,920 --> 00:48:06,900
more than supportive and listen to and
entertainers ideas so if you have ideas

712
00:48:06,900 --> 00:48:09,330
or recommendations also reach out to
them they're a great bunch of folks

713
00:48:09,330 --> 00:48:13,529
absolutely any other questions

714
00:48:17,590 --> 00:48:19,360
alright thank you very much

