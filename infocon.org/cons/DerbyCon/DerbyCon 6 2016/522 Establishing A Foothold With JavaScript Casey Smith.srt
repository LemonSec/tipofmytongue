1
00:00:00,000 --> 00:00:03,000
started are you ready yep

2
00:00:03,659 --> 00:00:06,659
ok welcome thanks for coming out

3
00:00:10,139 --> 00:00:13,920
this is session is establishing a
foothold with javascript so my name is

4
00:00:13,920 --> 00:00:17,880
Casey Smith you can connect with me on
twitter at sub T recently joined various

5
00:00:17,880 --> 00:00:21,359
group adapter threat division as a
researcher excited about that

6
00:00:21,359 --> 00:00:25,080
prior to that I worked for a financial
institution where i worked with both Red

7
00:00:25,080 --> 00:00:29,130
Team Blue team which actually drove a
lot of the research that we're looking

8
00:00:29,130 --> 00:00:33,839
at here today so this is fun stuff i'm
hopefully if you have questions we may

9
00:00:33,840 --> 00:00:36,600
have to hold them till the end but a
little beyond the hallway afterwards we

10
00:00:36,600 --> 00:00:38,820
have questions about how this stuff
works

11
00:00:38,820 --> 00:00:41,640
we're going to talk about today we're
gonna be talking about com scriptlets

12
00:00:41,640 --> 00:00:44,879
otherwise known as SCT files just a
quick show of hands how many views these

13
00:00:44,879 --> 00:00:48,690
or heard of these before take quite a
few of you some of you haven't I think

14
00:00:48,690 --> 00:00:52,920
this'll be interesting to you will also
talk about JavaScript rats so just a

15
00:00:52,920 --> 00:00:55,829
very quick proof of concept that i put
together to demonstrate in our

16
00:00:55,829 --> 00:01:00,570
environment how someone could you know
use JavaScript for command control we've

17
00:01:00,570 --> 00:01:03,329
actually got some examples of that being
used in the wild and we've seen an

18
00:01:03,329 --> 00:01:06,630
uptick in JavaScript for ransomware
another technique so we'll also talk

19
00:01:06,630 --> 00:01:10,860
about some defensive tactics that you
can use to detect and deny this activity

20
00:01:10,860 --> 00:01:15,390
in your environment so first of all why
we've been talking about JavaScript

21
00:01:15,390 --> 00:01:19,080
primarily because I was curious and when
we talk about living off the land I just

22
00:01:19,080 --> 00:01:22,470
wanted to see why not you know why would
why couldn't we use JavaScript or what

23
00:01:22,470 --> 00:01:27,240
could we use JavaScript for and i
stumbled onto this tool red Jesse r32

24
00:01:27,240 --> 00:01:33,298
and this JavaScript scriptlets really
just out of curiosity primarily one of

25
00:01:33,299 --> 00:01:37,259
the questions that may come up is like
why jscript vs vbscript so we're talking

26
00:01:37,259 --> 00:01:41,759
about jobs here really talk about
jscript in the windows script host a lot

27
00:01:41,759 --> 00:01:44,759
of what you can do in vbscript you can
also do in jscript there's some

28
00:01:44,759 --> 00:01:49,229
interesting ways to invoke a script that
I think will be you know useful that you

29
00:01:49,229 --> 00:01:53,009
can't do with vbscript so but realize
there's a lot of overlap with the two

30
00:01:53,009 --> 00:01:59,219
languages so you can actually execute
rundll32 registry r32 MSHDA these are a

31
00:01:59,219 --> 00:02:02,369
couple of executables you can use to
actually invoke directly javascript from

32
00:02:02,369 --> 00:02:07,200
the command line just a quick uh you
know if your defender one of the things

33
00:02:07,200 --> 00:02:10,378
that's going to come up quite a bit of
command-line auditing so we'll talk

34
00:02:10,378 --> 00:02:12,920
about how you can use some different
tools look for these events

35
00:02:12,920 --> 00:02:17,420
in your environment so when we talk
about filus there's a lot of different

36
00:02:17,420 --> 00:02:21,589
interpretations for filus in this talk
we're really primarily focused on a

37
00:02:21,590 --> 00:02:25,700
registry persistence so what we've got
is the ability to store a command or a

38
00:02:25,700 --> 00:02:28,310
subset of commands inside the registry

39
00:02:28,310 --> 00:02:31,550
there's also file us with w my is
another example we're not going to talk

40
00:02:31,550 --> 00:02:35,510
about that in this class has been some
great research matt grevers done on w-

41
00:02:35,510 --> 00:02:39,649
exposing something and jared as well so
we're not going to touch on that but up

42
00:02:39,650 --> 00:02:42,980
primarily focus on the persistence as it
relates to the registry persistence oh

43
00:02:42,980 --> 00:02:49,790
ok calm scriptlets so this was something
that i found back in about April and

44
00:02:49,790 --> 00:02:55,250
what this is is common objects that are
backed by JavaScript files or XML files

45
00:02:55,250 --> 00:02:59,600
and so what you have is an SCT extension
that's by the default that's associated

46
00:02:59,600 --> 00:03:02,900
with notepad so if somebody were to
double click an SCT followed launch

47
00:03:02,900 --> 00:03:03,769
notepad

48
00:03:03,769 --> 00:03:07,160
however there are some different ways
you can invoke that we're going to take

49
00:03:07,160 --> 00:03:10,010
a look at the extension doesn't actually
matter

50
00:03:10,010 --> 00:03:13,579
so what really matters is the content of
the file so for defenders this gets very

51
00:03:13,580 --> 00:03:18,200
difficult because you could put a PNG or
jpg extension on the file it would still

52
00:03:18,200 --> 00:03:22,399
actually execute across the URL in your
environment so one of the questions that

53
00:03:22,400 --> 00:03:27,230
I had when I saw that this was how do we
actually trigger execution on an SCT

54
00:03:27,230 --> 00:03:31,820
file that's we're going to talk about i
just added this slide here for reference

55
00:03:31,820 --> 00:03:36,530
so this is about nine different elements
that go into an SCT file so you can

56
00:03:36,530 --> 00:03:41,239
create the comm Script object the ones
that were primarily interested in there

57
00:03:41,239 --> 00:03:44,480
are the script block and the
registration block there's there's other

58
00:03:44,480 --> 00:03:47,060
things that you can do here and I
believe it for you to explore but for

59
00:03:47,060 --> 00:03:52,730
now we can talk about those two areas so
i published an example of a bare-bones

60
00:03:52,730 --> 00:03:56,179
scriptlet back in April I wanted to take
you through what's interesting about

61
00:03:56,180 --> 00:04:00,920
this calm scriptlet so there's about 15
lines of code here to get this to

62
00:04:00,920 --> 00:04:06,170
execute your jscript online ate there
that could also be vbscript in this

63
00:04:06,170 --> 00:04:07,250
particular example

64
00:04:07,250 --> 00:04:11,420
however if you notice there's a
registration block on line 3 what i

65
00:04:11,420 --> 00:04:15,530
found is you can actually put code
inside the registration block they will

66
00:04:15,530 --> 00:04:19,370
execute when you call for register or
unregister so you can actually execute

67
00:04:19,370 --> 00:04:22,909
this without the conscript being
registered on the host which leaves no

68
00:04:22,909 --> 00:04:26,270
footprint in the registry which is very
interesting so

69
00:04:26,270 --> 00:04:30,500
all we have to do is inside this
registration tag inside of the script

70
00:04:30,500 --> 00:04:34,430
block on line 11 there put whatever code
you want to execute and that will be

71
00:04:34,430 --> 00:04:37,430
called when we call Reggie SVR 32

72
00:04:38,360 --> 00:04:41,270
so what does it look like from the
command line so again from command line

73
00:04:41,270 --> 00:04:46,008
audience perspective you would call
registry r32 /s suppresses the warning

74
00:04:46,009 --> 00:04:50,300
prompts so there's an error that pops in
your script / you means we're going to

75
00:04:50,300 --> 00:04:53,780
call the uninstall portion of our
function which are under you know under

76
00:04:53,780 --> 00:04:58,068
unregistered essentially this particular
scriptlet even though it wasn't even

77
00:04:58,069 --> 00:05:03,740
registered before / I was basically this
is going to be the location of the comm

78
00:05:03,740 --> 00:05:07,580
scriptlets so this can be a local file
or computer you are L when I found this

79
00:05:07,580 --> 00:05:11,719
in the registry I first originally was
just messing with local ICT files and I

80
00:05:11,720 --> 00:05:15,590
saw that in the registry it was like
file colon slash slash i wanted to just

81
00:05:15,590 --> 00:05:17,479
replace that with the URL

82
00:05:17,479 --> 00:05:22,969
sure enough that works so this is
important you can run this over https it

83
00:05:22,969 --> 00:05:28,490
runs behind a proxy is very very useful
to get code executes from inside of an

84
00:05:28,490 --> 00:05:34,130
organization and then you pass asp ser
obj dot DL to the command this is what

85
00:05:34,130 --> 00:05:37,550
actually runs the script 'let so that's
essentially the script that run time

86
00:05:37,550 --> 00:05:39,860
will talk about that in a moment

87
00:05:39,860 --> 00:05:45,469
the thing that's important about that is
that command runs it doesn't actually

88
00:05:45,469 --> 00:05:49,909
register the common scriptlet it doesn't
leave in an artifact in the registry at

89
00:05:49,909 --> 00:05:52,729
all because we didn't actually
registered the script what we call the

90
00:05:52,729 --> 00:05:54,229
unregister function

91
00:05:54,229 --> 00:05:57,859
there's not a patch for that that's the
behavior of the script so we'll talk

92
00:05:57,860 --> 00:06:00,860
about some defensive techniques against
uh you know command-line auditing is a

93
00:06:00,860 --> 00:06:04,669
great one to detect this other
techniques we've looked at with w my

94
00:06:04,669 --> 00:06:10,520
since we've some of those can detect
some of those activities so okay a

95
00:06:10,520 --> 00:06:16,430
barebone scriptlet so what this is would
be the ability to execute or persistence

96
00:06:16,430 --> 00:06:20,240
crippling on a machine or host a more
robust scriptlet so inside of this

97
00:06:20,240 --> 00:06:25,639
example we're going to look at i created
a basic script like all the Bandit and

98
00:06:25,639 --> 00:06:31,219
we're gonna basically expose a method
called exact and so inside of here we

99
00:06:31,219 --> 00:06:36,229
expose the public method that will be
able to call that function here and it's

100
00:06:36,229 --> 00:06:39,229
defined for the downside of the script
tag so

101
00:06:39,950 --> 00:06:44,599
missing you I cannot blocking the screen
my we're gonna get all right okay so

102
00:06:44,600 --> 00:06:51,230
what's happening there if you create
these richer scriptlets they're going to

103
00:06:51,230 --> 00:06:55,400
be invoked by the comm scriptlet runtime
it's sort of like a virtual machine

104
00:06:55,400 --> 00:06:59,390
essentially for scripted components this
is what actually does execute the script

105
00:06:59,390 --> 00:07:02,659
and this is what would load into
applications when you notice that a

106
00:07:02,660 --> 00:07:05,720
conscript will actually execute so if
you call a script from say a dotnet

107
00:07:05,720 --> 00:07:10,730
application or even powershell this is
the backing behind that comment scripted

108
00:07:10,730 --> 00:07:16,940
objects so if we were to create the
script 'let and register we could invoke

109
00:07:16,940 --> 00:07:20,090
it in power show for example so you can
see here I've got a script that I create

110
00:07:20,090 --> 00:07:24,260
a new object object we give it the name
bandit and we can pass the exact

111
00:07:24,260 --> 00:07:27,890
function and this would call into and
run the JavaScript that's backing that

112
00:07:27,890 --> 00:07:29,840
common objects that make sense

113
00:07:29,840 --> 00:07:35,750
ok if you wanted to evoke this to.net
for example if you wanted to have access

114
00:07:35,750 --> 00:07:40,910
to a JavaScript file it you have a.net
small footprint your call out this is

115
00:07:40,910 --> 00:07:44,480
using reflection i'll just leave this in
here for example again we just called to

116
00:07:44,480 --> 00:07:47,510
the name of the script bullet and then
call the method we wanted to invoke

117
00:07:47,510 --> 00:07:53,719
right this one here is really
interesting because the script URL as i

118
00:07:53,720 --> 00:07:58,370
mentioned this already but this can be a
local file or it can be remote file and

119
00:07:58,370 --> 00:08:02,000
again this is this is when you do
actually register the comm school but

120
00:08:02,000 --> 00:08:05,120
this is the artifact that you would see
so generally speaking you would not want

121
00:08:05,120 --> 00:08:10,460
to find a registry sweep in scriptlet
URL an actual URL there's no reason

122
00:08:10,460 --> 00:08:14,270
really to be running remote scriptlets
that I've seen if you have if you have a

123
00:08:14,270 --> 00:08:17,719
use case of that please let me know I
haven't seen you use case for that yet

124
00:08:17,720 --> 00:08:21,560
so this is the artifact you would find
if you're looking for these inside the

125
00:08:21,560 --> 00:08:24,340
registry

126
00:08:24,340 --> 00:08:28,479
now this was interesting that we've
actually seen malware use this type of

127
00:08:28,480 --> 00:08:33,640
call to invoke some JavaScript there's a
little bit of a twist on here because

128
00:08:33,640 --> 00:08:37,449
i'm going to be calling a script in this
situation so the thing to point out on

129
00:08:37,450 --> 00:08:42,279
this slide is we call rundll32 we're
basically opening in Ahtna application

130
00:08:42,279 --> 00:08:47,020
however notice the URL that were using
here we're using script colon HTTPS and

131
00:08:47,020 --> 00:08:51,160
then the path to wherever your script is
hosted that's what's going to trigger

132
00:08:51,160 --> 00:08:55,300
the execution of the conscript 'let and
then we simply call the method that we

133
00:08:55,300 --> 00:08:59,439
defined in the script 'let and then we
close the HTM file so no message of

134
00:08:59,440 --> 00:09:04,240
warning would pop on the user's machine
in that situation so that's that's a

135
00:09:04,240 --> 00:09:10,600
distinction there as far as setting up
the call with rundll32 you can also

136
00:09:10,600 --> 00:09:16,029
invoke this via MSHDA so you can pass
the JavaScript URL scheme essentially

137
00:09:16,029 --> 00:09:20,710
and then invoke this via get object and
get object works very much like red

138
00:09:20,710 --> 00:09:25,450
Jesse r32 so its proxy where runs over
ssl follows redirect it's a great

139
00:09:25,450 --> 00:09:29,800
function but again we call the method
were using the JavaScript schemes to

140
00:09:29,800 --> 00:09:34,000
directly from the command line if you
see MSHDA called rundll32 those would be

141
00:09:34,000 --> 00:09:37,540
indicators that somebody may be
executing a scripting environment our

142
00:09:37,540 --> 00:09:42,730
adversaries using this they are i don't
know if i hear we going to show you the

143
00:09:42,730 --> 00:09:44,110
slide so this is an example

144
00:09:44,110 --> 00:09:48,580
Greg foss did a presentation on this we
used to call this CBR carbon black art

145
00:09:48,580 --> 00:09:52,720
especially so what you're looking at
here is a process tree so MSHDA

146
00:09:52,720 --> 00:09:57,459
executing powershell executing
registering their our registry r32 and

147
00:09:57,459 --> 00:10:01,329
then iterating through multiple loops
with registry r32 so this is the kind of

148
00:10:01,330 --> 00:10:05,800
indicators you would see for those of
you who are working with tools that do

149
00:10:05,800 --> 00:10:11,829
command line auditing system on me a
great example that ok so i wanted to see

150
00:10:11,830 --> 00:10:15,339
how far I could push conscript that's
what can you actually do with javascript

151
00:10:15,339 --> 00:10:19,779
so I created a scenario where i could
have a script that had a dll embedded

152
00:10:19,779 --> 00:10:24,430
inside of it that would download the dll
decode the dll and then execute on disk

153
00:10:24,430 --> 00:10:28,750
so there's a deal that's on my github
page it has all five different

154
00:10:28,750 --> 00:10:32,650
variations of whitelisting that are
available so it's got like install util

155
00:10:32,650 --> 00:10:37,110
registry r32 rundll32 base

156
00:10:37,110 --> 00:10:40,200
one of the things that you can do here
is you can actually in code the file

157
00:10:40,200 --> 00:10:44,610
with certain util so this is actually
something I think that grave and found

158
00:10:44,610 --> 00:10:48,329
sort of independently but very similar
time frame was that you could take a

159
00:10:48,329 --> 00:10:53,550
certain still run this code it doesn't
have to be a certificate actually it can

160
00:10:53,550 --> 00:10:57,120
actually just encode any file so you
take so you to stage this you run

161
00:10:57,120 --> 00:11:02,640
certain until encodes the dll base64
into the script you could add an

162
00:11:02,640 --> 00:11:05,279
encryption routine here if you wanted
then anything that would be watching

163
00:11:05,279 --> 00:11:10,470
over the wire for that dll would likely
miss that because it didn't see that in

164
00:11:10,470 --> 00:11:15,690
the payload and then to call that or
invoke it you had simply run registrar

165
00:11:15,690 --> 00:11:23,519
32 / less you /i the path and then the
stre gdl this is what you would see

166
00:11:23,519 --> 00:11:26,970
inside of the file inside of a
proof-of-concept again the reason I

167
00:11:26,970 --> 00:11:31,950
wrote this was for blue team's the test
so we wanted to go out and and test and

168
00:11:31,950 --> 00:11:34,980
see this would execute in your
environment that's exactly why this deal

169
00:11:34,980 --> 00:11:46,920
exists so let's look at a demo of that
it's pretty basic demo here we're

170
00:11:46,920 --> 00:11:53,610
basically going to run invoke registry
r32 on the command line and then we're

171
00:11:53,610 --> 00:11:57,420
going to see that will drop to files to
disc 1 being the text file that's in the

172
00:11:57,420 --> 00:12:01,920
script 'let the second one then being
the unpacked dll and then would execute

173
00:12:01,920 --> 00:12:08,490
cap just very simple prototype you could
hide the prompt there so that doesn't

174
00:12:08,490 --> 00:12:13,260
pop up but takes a little while for it
to decode and then in the end there you

175
00:12:13,260 --> 00:12:17,970
can see on disk we left the two files
the all the things as the base 64

176
00:12:17,970 --> 00:12:24,779
encoded file certain till $TIME decodes
that to x64 dll and then execute calc so

177
00:12:24,779 --> 00:12:28,709
there's quite a bit you can do it
conscripts besides just being limited to

178
00:12:28,709 --> 00:12:30,569
the JavaScript capabilities

179
00:12:30,570 --> 00:12:33,130
alright

180
00:12:33,130 --> 00:12:39,220
I mentioned this function briefly
already the get object this works in

181
00:12:39,220 --> 00:12:43,870
office macros as well as in HD a files
or on the command line you can also use

182
00:12:43,870 --> 00:12:50,260
a you know the JavaScript or jscript
invoke w my command so you could call

183
00:12:50,260 --> 00:12:54,520
the win32 process create here is just an
example of using get object to do that

184
00:12:54,520 --> 00:13:01,480
using the appropriate scheme to call
into the w my component so in summary

185
00:13:01,480 --> 00:13:06,070
we've got registry r32 and get object
those two commands couple together gonna

186
00:13:06,070 --> 00:13:09,310
run these conscript this for us and I
mentioned this already but there is

187
00:13:09,310 --> 00:13:14,109
support glsl they can run through a
proxy they can follow redirects

188
00:13:14,110 --> 00:13:17,950
basically as I started looking at this
is built for c2 i started looking at

189
00:13:17,950 --> 00:13:21,400
more and say well how could I didn't
take this and use this for command and

190
00:13:21,400 --> 00:13:26,199
control and that led me to write a very
very rudimentary javascript rats which

191
00:13:26,200 --> 00:13:27,760
we'll talk about in a minute

192
00:13:27,760 --> 00:13:33,010
one important note here is you can even
get the script files execute if the

193
00:13:33,010 --> 00:13:36,130
windows script host has been disabled so
what you see on the screen here is

194
00:13:36,130 --> 00:13:40,990
actually i double-clicked on a bjs file
to just trigger the the fact that

195
00:13:40,990 --> 00:13:44,980
they're there is a script hosted it
blocking is enabled it's a registry

196
00:13:44,980 --> 00:13:47,950
entry you can make that I've got
reference here on the slide so that's

197
00:13:47,950 --> 00:13:51,340
the pop up showing hey you can't run
just an arbitrary script but then in the

198
00:13:51,340 --> 00:13:55,030
background you can see I can run s red
yes we are thirty-two and still run the

199
00:13:55,030 --> 00:13:57,910
script even though script hosting has
been denied so that so it doesn't

200
00:13:57,910 --> 00:14:02,350
actually pop the bottom box on them
register on 32 command

201
00:14:02,350 --> 00:14:07,480
ok we talked about this being back my
registry only so again the only you

202
00:14:07,480 --> 00:14:10,000
could actually give you have access to
the machine you created just the

203
00:14:10,000 --> 00:14:14,920
necessary registry keys . to that URL
then however you choose to persist that

204
00:14:14,920 --> 00:14:20,560
execution command you'd be able to call
and run that script 'let metasploit now

205
00:14:20,560 --> 00:14:25,660
has a module that will host an SCT file
for you so shout-out to trenton he did

206
00:14:25,660 --> 00:14:29,170
the work on this to get this module i'll
put into medicine . so this is great to

207
00:14:29,170 --> 00:14:32,650
see it might use this yet but just
curiously show hands nice

208
00:14:32,650 --> 00:14:36,130
okay i have so something to be aware of
that's available

209
00:14:36,130 --> 00:14:39,130
ok so ajs rap

210
00:14:41,480 --> 00:14:44,930
a crappy powershell server if you look
at the code it's on github i released

211
00:14:44,930 --> 00:14:49,819
its actually released now I've made the
Republic's this morning so it was really

212
00:14:49,820 --> 00:14:53,540
proof of concept and and I want you guys
to give me feedback it's something that

213
00:14:53,540 --> 00:14:57,050
I think it's helpful on assessment to
maybe run and see if it's detected

214
00:14:57,050 --> 00:15:00,529
that's really the point of this is
really not full-blown c2 yeah it's

215
00:15:00,529 --> 00:15:05,630
really just like at target practice
almost ok so inside of the script bullet

216
00:15:05,630 --> 00:15:11,000
we simply call get object back to a
variable that's in the powershell script

217
00:15:11,000 --> 00:15:14,779
hosted and we just call task that SCT
again that's configurable you could name

218
00:15:14,779 --> 00:15:16,579
that file whatever you wanted

219
00:15:16,579 --> 00:15:23,689
when that loops through on the end .
what we then do is we run the command or

220
00:15:23,690 --> 00:15:26,360
the you know here we're just going to
run three different commands are going

221
00:15:26,360 --> 00:15:30,440
to run command a hostname ipconfig Who
am I so we want to just get that

222
00:15:30,440 --> 00:15:35,959
information off of the box in order to
then eliminate some of the complex proxy

223
00:15:35,959 --> 00:15:40,069
checking and variables that would have
had to do i decided to continue to use

224
00:15:40,070 --> 00:15:45,199
get object to send request a
non-existent URL and then that that's

225
00:15:45,199 --> 00:15:47,569
essentially like posting the data back
to the server

226
00:15:47,569 --> 00:15:53,449
ok so what this is doing online 12 is
simply calling back with the results of

227
00:15:53,449 --> 00:15:58,069
the base64 encoded output of those three
commands it can split those into

228
00:15:58,069 --> 00:16:02,660
multiple blocks and then reassemble them
on the server then output for c2 so

229
00:16:02,660 --> 00:16:14,540
let's look at a sample demo that real
quick so i use fiddler quite a bit if

230
00:16:14,540 --> 00:16:18,589
you haven't used feathers a great tool
to do web debugging SSL decryption but

231
00:16:18,589 --> 00:16:24,470
essentially I use the filler to be by
simulated proxy so here I've got the jas

232
00:16:24,470 --> 00:16:34,040
rat listening on port 80 and then we're
going to invoke registry r32 call into

233
00:16:34,040 --> 00:16:40,010
it pops cow writes back the data back to
the server you can see as far as the

234
00:16:40,010 --> 00:16:44,810
method that's used you can see we're
using a get request instead of trying to

235
00:16:44,810 --> 00:16:48,500
post it back you could you could extend
this if you wanted to in your

236
00:16:48,500 --> 00:16:51,769
environment so questions on that makes
sense so just a really quick basic

237
00:16:51,769 --> 00:16:54,420
proof-of-concept on being able to run
that

238
00:16:54,420 --> 00:17:08,879
alright okay so something else that came
up as i was working with scripts was how

239
00:17:08,880 --> 00:17:13,500
could you run shellcode or what are some
capabilities that jscript has to be able

240
00:17:13,500 --> 00:17:18,869
to execute shellcode there's this
amazing com dl essentially called

241
00:17:18,869 --> 00:17:22,589
dynamic rapper access both in English
and Russian so run this in test

242
00:17:22,589 --> 00:17:28,260
environments only I haven't debugged or
reverse engineer this completely so but

243
00:17:28,260 --> 00:17:32,340
what this allows you to do is to make
win32 api calls directly from say

244
00:17:32,340 --> 00:17:37,350
vbscript or jscript so you do have to
install that it does persist on disk but

245
00:17:37,350 --> 00:17:42,330
it gives your scripting capabilities uh
quite into a step up so we have actually

246
00:17:42,330 --> 00:17:47,070
seen at least one analyst report this is
seeing this being used in the wild so be

247
00:17:47,070 --> 00:17:50,820
aware of the DLLs on the github page you
can also see you can download it from

248
00:17:50,820 --> 00:17:55,470
that URL as well this one is x86 only
there's a newer version out that does

249
00:17:55,470 --> 00:18:02,549
x64 and x86 as well what it would look
like that in your jscript if you install

250
00:18:02,549 --> 00:18:07,980
this dll would be simply create the
activex object dynamic rapper axe here

251
00:18:07,980 --> 00:18:13,650
and then I map your function so here I'm
just showing you can map virtual out for

252
00:18:13,650 --> 00:18:18,510
example and then you can map your
shellcode into memory and then make a

253
00:18:18,510 --> 00:18:22,650
call very very basic just just sort of
working the details out i posted the

254
00:18:22,650 --> 00:18:25,950
proof-of-concept on my github page you
can work through how to map those

255
00:18:25,950 --> 00:18:31,980
function calls so one of the questions
that may come up with what some of the

256
00:18:31,980 --> 00:18:34,980
defenses against conscripts how do we
detect this in our environment

257
00:18:35,640 --> 00:18:40,679
what are some other mechanisms that we
can use one of the defense's that came

258
00:18:40,679 --> 00:18:45,419
out was actually published shortly after
the research on registry r32 and this is

259
00:18:45,419 --> 00:18:51,360
on the github repo as far as using
images in by using images quick show of

260
00:18:51,360 --> 00:18:56,250
hands okay so several you're using him
it's so what this is it actually is on

261
00:18:56,250 --> 00:19:01,350
the attack surface reduction component
and so it prevents registry r32 from

262
00:19:01,350 --> 00:19:06,629
loading ser obg el ser run dll so that's
one of the mitigations that you can

263
00:19:06,630 --> 00:19:07,650
deploy

264
00:19:07,650 --> 00:19:15,240
to prevent that type of attack another
defense that's coming out with windows 7

265
00:19:15,240 --> 00:19:19,860
enterprise I think it's also an
education i heard today is that you can

266
00:19:19,860 --> 00:19:24,120
block on approved scripts and so the
script host is Microsoft we use the term

267
00:19:24,120 --> 00:19:29,370
enlightened or aware or essentially it's
checking to make sure that that script

268
00:19:29,370 --> 00:19:33,540
is signed or is approved in your
environment so here you can see when you

269
00:19:33,540 --> 00:19:38,490
block or your execute Jas and by default
device guard is going to prevent that so

270
00:19:38,490 --> 00:19:42,960
I'm despite a lot of the research that i
published you made I do actually believe

271
00:19:42,960 --> 00:19:47,670
whitelisting is very valid defense there
are of course bypasses but it's one has

272
00:19:47,670 --> 00:19:51,540
been one of the most effective things
that we did as an organization to stop a

273
00:19:51,540 --> 00:19:56,430
number of different types of attacks so
device guards very strong i encourage

274
00:19:56,430 --> 00:20:01,470
you to take a look at it start looking
at that inside of your environment so I

275
00:20:01,470 --> 00:20:07,920
think we're doing okay on time here and
see ya

276
00:20:07,920 --> 00:20:11,730
I think we're doing good that's that's
what i've got so hopefully this is

277
00:20:11,730 --> 00:20:15,450
helpful i want to give you guys a chance
if you have questions again out on the

278
00:20:15,450 --> 00:20:19,020
github repo all the sample code that i
showed as well as connect with me on

279
00:20:19,020 --> 00:20:22,440
twitter feed back on the preso or talk
or anything afterwards so I thank you

280
00:20:22,440 --> 00:20:25,860
for your time any questions before
couple of question here in fro guess

281
00:20:25,860 --> 00:20:32,310
what legitimate uses of SDGs like well
that one's have using the city and

282
00:20:32,310 --> 00:20:37,020
seeing the URL based one now I haven't
seen anybody using conscripts actually

283
00:20:37,020 --> 00:20:40,410
haven't seen i have disagreed with the
question was just for the question was

284
00:20:40,410 --> 00:20:44,850
what legitimate use have you seen MCTS I
haven't seen anybody it's a relatively

285
00:20:44,850 --> 00:20:47,939
it's an old technology has been around
for quite some time and I haven't seen

286
00:20:47,940 --> 00:20:51,900
you haven't talked to anybody yet that
says oh we can't block that because we

287
00:20:51,900 --> 00:20:56,940
use SVG files haven't come across that
yet so good good question question here

288
00:20:57,670 --> 00:21:00,970
carbon black was a connect on the
register

289
00:21:00,970 --> 00:21:06,340
ok ok something you can use if you're if
you're if you're checking for network

290
00:21:06,340 --> 00:21:10,149
connections look for a registrar 32
making that con so good

291
00:21:10,960 --> 00:21:20,740
other questions coming yes ? you didn't
matter what challenges that German sure

292
00:21:20,740 --> 00:21:25,210
so the question was i mentioned that
there the file extension does not

293
00:21:25,210 --> 00:21:30,520
actually matter and so what actually
matters is just that it conforms to the

294
00:21:30,520 --> 00:21:35,050
xml for the script file and so that's
defined back in one of the earlier

295
00:21:35,050 --> 00:21:38,139
slides had the reference with the the
eight or nine elements in there as long

296
00:21:38,140 --> 00:21:45,190
as its wealth well-defined xml it can be
any file extension as far as calling it

297
00:21:45,190 --> 00:21:49,660
from URL so you might you might put a
jas extension or JPEG so that look over

298
00:21:49,660 --> 00:21:53,050
the wire it might look like it so much
just looking at your l monitoring it

299
00:21:53,050 --> 00:21:56,440
looks like just they just downloaded of
the photo but he actually crack that

300
00:21:56,440 --> 00:22:00,280
open and look at the content you'd see
that is still that well-formed XML does

301
00:22:00,280 --> 00:22:01,360
that answer the question

302
00:22:01,360 --> 00:22:07,719
okay great the question was was the
month with the mimetype matter and i

303
00:22:07,720 --> 00:22:11,080
have an experiment with it so much for i
don't i don't think that it would but I

304
00:22:11,080 --> 00:22:13,750
haven't I have an honesty test it so I
don't know good question

305
00:22:13,750 --> 00:22:23,830
yes so the question was is it possible
to use named pipes instead of URLs i

306
00:22:23,830 --> 00:22:29,230
don't know i have an experiment that
either so that besides I'm if you are

307
00:22:29,230 --> 00:22:33,310
windows shares again I i did I haven't
actually haven't put in a UNC path I

308
00:22:33,310 --> 00:22:37,090
don't see why it wouldn't work but i
haven't tested good question

309
00:22:37,090 --> 00:22:46,220
yep certainly a mapped drive would work
I yeah the fuck

310
00:22:46,220 --> 00:22:50,090
the question was what privileges do ms
HD and registrar 32 run under default

311
00:22:50,090 --> 00:22:52,699
they run as the normal user account

312
00:22:52,700 --> 00:22:56,000
yeah so there's no privilege escalation
and these examples here it's just that

313
00:22:56,000 --> 00:22:59,299
whatever access the user that execute
the command will get you get that access

314
00:22:59,299 --> 00:23:03,740
is question I imagine all the
command-line interfaces and so it like

315
00:23:03,740 --> 00:23:09,950
bridges you're like MSHDA have you done
much experimentation using the

316
00:23:09,950 --> 00:23:14,120
actionscript event receiver permanently
my phone subscriptions i have not the

317
00:23:14,120 --> 00:23:18,830
question was if I have I done much with
activex w my subscriptions i have not

318
00:23:18,830 --> 00:23:20,120
yet

319
00:23:20,120 --> 00:23:23,178
good question any other questions

320
00:23:25,549 --> 00:23:28,309
okay thanks for your time appreciate if
you have other questions were talking

321
00:23:28,309 --> 00:23:36,260
all thank you

