1
00:00:00,000 --> 00:00:09,480
welcome to more sleep rest develop my
name is true branch social security

2
00:00:09,480 --> 00:00:14,790
analyst aise hote OBS and what's going
on here in here as well as a massive

3
00:00:14,790 --> 00:00:20,640
security i love to learn Omnitech and
also breaking it and I love to play

4
00:00:20,640 --> 00:00:31,109
sports re-edited lose a little bit about
ISE we are based in Baltimore deliver a

5
00:00:31,109 --> 00:00:39,059
high-end custom assessment results we
also discuss the new web technologies

6
00:00:39,059 --> 00:00:41,550
and I'm trying to become quality right

7
00:00:41,550 --> 00:00:49,440
freshly gaps so this gave me the
motivation to put together this top so

8
00:00:49,440 --> 00:00:55,468
give you guys a little bit of background
about rests comparison between rest and

9
00:00:55,469 --> 00:01:02,280
so well let's go over some rest concepts
that all over comments curious states

10
00:01:02,280 --> 00:01:13,080
that developers to make my apologies use
your contestant and also artificial so

11
00:01:13,080 --> 00:01:18,000
press residential representational
transfer state for state transfer chart

12
00:01:18,000 --> 00:01:24,360
it is stainless client-server casual
communication protocol there are

13
00:01:24,360 --> 00:01:31,650
similarities between resting be because
. building find friends also mean

14
00:01:31,650 --> 00:01:43,890
contributor of each breast also uses for
all crud operations create read update

15
00:01:43,890 --> 00:01:53,670
and delete so rest were still there
isn't a specification that finds rest

16
00:01:53,670 --> 00:01:59,700
like numerals easier to create
documentation for reference guide cable

17
00:02:00,550 --> 00:02:09,430
as well as the RESTful API also make use
of all HTTP methods some other hand uses

18
00:02:09,430 --> 00:02:17,200
still protocols which change data is
bound by so specification so say break

19
00:02:17,200 --> 00:02:25,600
one requirement your API is in something
always uses the ACP post method for all

20
00:02:25,600 --> 00:02:34,420
let's get a look at a couple simple
question left have a restful but as you

21
00:02:34,420 --> 00:02:42,609
see here i am submitting individuals to
an end . moving the whole method which

22
00:02:42,610 --> 00:02:45,520
is the rest request which is you know
pretty standard

23
00:02:45,520 --> 00:02:54,430
alright so quest and simple method also
request particles method but within the

24
00:02:54,430 --> 00:03:00,310
body and actually contain the operation
so in this example i am reading a post

25
00:03:00,310 --> 00:03:06,850
request so stressed but I'm actually
getting they are stock price of IBM so

26
00:03:06,850 --> 00:03:15,760
from the body of a simple present it
will contain the operation so let's meet

27
00:03:15,760 --> 00:03:16,329
you

28
00:03:16,330 --> 00:03:22,450
HTTP methods you have get host which are
pretty popular delete which is useful

29
00:03:22,450 --> 00:03:28,839
resource patch which is used to modify
the resource but not replace input which

30
00:03:28,840 --> 00:03:36,010
is used to replace resources the updated
version or to create resources we have

31
00:03:36,010 --> 00:03:43,750
other methods such as up options head
injuries there anymore just said you

32
00:03:43,750 --> 00:03:45,160
missed you

33
00:03:45,160 --> 00:03:54,910
that's good i wanted those in here we're
testing . guys will come across that

34
00:03:54,910 --> 00:03:59,380
assumes we're going to bed which give
you more information about whatever

35
00:03:59,380 --> 00:04:01,170
you're testing

36
00:04:01,170 --> 00:04:06,839
all you should be pretty familiar have a
multi-level on your level popular level

37
00:04:06,840 --> 00:04:16,858
also has on her level 1 300 level i
could go to be so what's the data format

38
00:04:16,858 --> 00:04:24,840
of a rest we got there isn't one arrest
wait I can deliver xmo plain text or

39
00:04:24,840 --> 00:04:27,270
JSON whatever you want

40
00:04:27,270 --> 00:04:32,669
so the next question is how does the
finer server know the format help needed

41
00:04:32,669 --> 00:04:40,950
and that is the header content type the
client server sends this header values

42
00:04:40,950 --> 00:04:46,710
weather is next class X amount or
application / space on telling the

43
00:04:46,710 --> 00:04:56,159
server client formats ati could return
most full data types such as xml json

44
00:04:56,160 --> 00:05:07,410
text as well so contribution question
here is how does the server know what

45
00:05:07,410 --> 00:05:13,830
the data format to be clients in the
server and step header which contains

46
00:05:13,830 --> 00:05:21,000
the 484 minute then server either sends
the data and not perform at or air say

47
00:05:21,000 --> 00:05:29,880
hey I don't support this format try
again so what's the touch on resource

48
00:05:29,880 --> 00:05:30,570
your eyes

49
00:05:30,570 --> 00:05:38,190
there are two types of static and also a
restful so here i am using a blog

50
00:05:38,190 --> 00:05:39,000
service

51
00:05:39,000 --> 00:05:46,320
example.com blackball name is the blog
resource blog has a static web page you

52
00:05:46,320 --> 00:05:49,320
go to URL the webpage will be delivered

53
00:05:49,830 --> 00:05:57,060
now press wri is a bit different have
the same resource have to save up for of

54
00:05:57,060 --> 00:06:03,750
example.com / blogs which contains all
the blocks that are hosted by service

55
00:06:03,750 --> 00:06:07,080
and then to access the lobby will use
the block ID

56
00:06:08,030 --> 00:06:15,440
which is not generated whenever
resources to treat now better to use the

57
00:06:15,440 --> 00:06:20,780
second example because the uri stay the
same web apps change is also independent

58
00:06:20,780 --> 00:06:26,750
of the primary those best practices use
the second example went on building out

59
00:06:26,750 --> 00:06:37,220
the resolution yet so research
relationships it's better to group

60
00:06:37,220 --> 00:06:42,710
resources that belong to another
resource in a subfolder so it is clear

61
00:06:42,710 --> 00:06:53,299
that say a comment log this comment
belongs to a particular plot so here we

62
00:06:53,300 --> 00:07:00,230
have example.com left comments / comedy
this method put comments in his own

63
00:07:00,230 --> 00:07:05,750
folder and you access a comment by his
comment is common idea sorry

64
00:07:05,750 --> 00:07:11,840
this trees full blog comments as
separate and this relationship between

65
00:07:11,840 --> 00:07:20,000
the blog comments now instead these
comments should be on stored as

66
00:07:20,000 --> 00:07:27,170
black-on-black blogs blog ID and then
within that directory comments voted

67
00:07:27,170 --> 00:07:32,690
should contain the comments for that
particular plot as you see here the

68
00:07:32,690 --> 00:07:39,440
second sample grow now this method keeps
the relationship between a blog comments

69
00:07:39,440 --> 00:07:42,560
keeps it more organized simplicity

70
00:07:47,030 --> 00:07:55,729
so let's go over concept all stops as i
call it not too sure how to pronounce

71
00:07:55,730 --> 00:08:04,070
that it is more detail stands for Hyper
media has an engine of application see

72
00:08:04,070 --> 00:08:11,990
this is a concept where server sends the
clients URL client doesn't have to deal

73
00:08:11,990 --> 00:08:14,120
with your of instruction

74
00:08:14,120 --> 00:08:17,120
let's see what this looks like

75
00:08:19,460 --> 00:08:25,969
so here we have a sample response from
the server containing the URL to the

76
00:08:25,970 --> 00:08:31,310
blog comments as well as offers program
we also have other information such as

77
00:08:31,310 --> 00:08:44,750
black IV authors handle her name as well
as the that was created so you might be

78
00:08:44,750 --> 00:08:50,750
asking yourself how do I know my epi is
restful fully restful almost restful or

79
00:08:50,750 --> 00:08:58,339
not it off to determine this we use the
richest in maturity model take a look at

80
00:08:58,339 --> 00:08:59,330
this

81
00:08:59,330 --> 00:09:05,600
so there are three months three levels
level 0 saying hey you risk your guys

82
00:09:05,600 --> 00:09:13,910
and wrestle at all pretty much so let's
go through the other levels level one is

83
00:09:13,910 --> 00:09:19,670
the use of resources so you would access
resources by its ID that having a static

84
00:09:19,670 --> 00:09:25,579
web page but the replaceable also
contains the operation to be performed

85
00:09:25,580 --> 00:09:32,630
so they you make a request to get a
block you still use the post method but

86
00:09:32,630 --> 00:09:40,370
within the request was a block-level to
comes in when you start to use HTTP

87
00:09:40,370 --> 00:09:49,370
methods post clubbed post did foot patch
as well as those your recipe i will be a

88
00:09:49,370 --> 00:09:57,020
level-three if you implement a tox type
of controls now either this guidelines

89
00:09:57,020 --> 00:10:02,689
there are no strict rules to really
define by a restful api just guidelines

90
00:10:02,690 --> 00:10:04,970
you might give you a general idea

91
00:10:04,970 --> 00:10:09,589
so a couple useful tools

92
00:10:10,270 --> 00:10:16,360
postman postman is the chrome plugin
that developers use mean I guess

93
00:10:16,360 --> 00:10:22,360
security uh successors could use as well
this is easier for developers to test

94
00:10:22,360 --> 00:10:30,460
area yes the great UI distributed earth
as me and I was a great tool to assess a

95
00:10:30,460 --> 00:10:39,970
story there is a screenshot shows man
like i said the GUI is very nice

96
00:10:41,140 --> 00:10:44,260
it allows developers to send all
different types of requests it also

97
00:10:44,260 --> 00:10:50,590
keeps a history so you can go back and
revisit and change parameters you like

98
00:10:50,590 --> 00:11:00,370
10 different now takes us two points at
the speed of her purpose a web

99
00:11:00,370 --> 00:11:06,130
application test platform is comprised
of several tools for this papel bees and

100
00:11:06,130 --> 00:11:13,090
repeater but I also has functionality
for you to buzz dates as well as

101
00:11:13,090 --> 00:11:28,900
intercept and modify request from
serving so a couple security concerns we

102
00:11:28,900 --> 00:11:30,280
had when we test trouble

103
00:11:30,280 --> 00:11:39,370
yes developers want to protect against
unauthorized or an authenticated

104
00:11:39,370 --> 00:11:44,920
modification of protected assets they
also want to protect against

105
00:11:44,920 --> 00:11:51,640
authenticated on the right access to
protect that says as well as then again

106
00:11:51,640 --> 00:11:58,990
we played that Christoph i created a
sample API supply

107
00:11:58,990 --> 00:12:06,730
yeah I used clothes even leave in
disgrace pretty much Talos package all

108
00:12:06,730 --> 00:12:13,540
the dependencies for the project my you
sprint which is restful web service API

109
00:12:13,540 --> 00:12:16,540
to secure my points and tomcat

110
00:12:17,059 --> 00:12:23,749
so how do we go about protecting the
rest of week guys

111
00:12:23,749 --> 00:12:32,809
first you can start by protecting basic
amendments is it so not every month is

112
00:12:32,809 --> 00:12:42,709
for every resource should Wycliffe Bible
methods and we should not allow it's the

113
00:12:42,709 --> 00:12:47,449
delete method for critical files like
users should be able to delete

114
00:12:47,449 --> 00:12:57,289
particular pop so what does this look
like in spring me to annotate points

115
00:12:57,289 --> 00:13:04,609
with a lot of momentum here i append the
method parameter here saying OK cable

116
00:13:04,609 --> 00:13:13,609
quest I'm sending two blogs and my son
will return all blocks and that's what

117
00:13:13,609 --> 00:13:18,589
it looks like in jersey jersey division
of jax-rs which is a java api for

118
00:13:18,589 --> 00:13:32,149
restful webservices same thing here just
annotated this point with get around so

119
00:13:32,149 --> 00:13:38,749
let's touch on one JSON web token I come
across this more recently we were using

120
00:13:38,749 --> 00:13:45,559
JSON web tokens instead of cookies taste
what's open for you to identify the

121
00:13:45,559 --> 00:13:49,968
sender stateless so it contains all the
information needed to authenticate the

122
00:13:49,969 --> 00:13:59,629
user as well as verified that smoking is
actually valid JSON format its base 64

123
00:13:59,629 --> 00:14:05,959
encoded sense it's not a cookie you can
secure a JSON web token with the usual

124
00:14:05,959 --> 00:14:12,709
security flags just here in HTTP only
this actual talking his sand and the

125
00:14:12,709 --> 00:14:19,579
authorization header is usually used for
authentication and setup authorization

126
00:14:19,579 --> 00:14:22,640
even though its scent and our position
had a party could use it

127
00:14:22,640 --> 00:14:32,569
authorization so we use it walks in the
server check the credentials

128
00:14:33,170 --> 00:14:40,219
everything's good created JSON web token
our job then for each request the client

129
00:14:40,220 --> 00:14:45,080
will send this JSON web token with
requests to authenticate yourself and to

130
00:14:45,080 --> 00:14:54,920
verify so what so it is made up of three
parts the header payload the signature

131
00:14:54,920 --> 00:15:00,020
the header contains daughter used to
create a signature as well as the token

132
00:15:00,020 --> 00:15:05,210
type the payload contains a plain
statement about the entity easily the

133
00:15:05,210 --> 00:15:11,630
username as well as maybe about the
token such as expiration date issuer its

134
00:15:11,630 --> 00:15:20,330
own support so here is a sample job here
we have the header the algorithm used

135
00:15:20,330 --> 00:15:27,050
here is H max shop 23 says type of
tokens that JSON web token the payload

136
00:15:27,050 --> 00:15:33,319
contains the issuer which is he branched
me subject which is using an expiration

137
00:15:33,320 --> 00:15:34,220
date

138
00:15:34,220 --> 00:15:40,400
now the signature is computed by taking
in basic for the header . the basis for

139
00:15:40,400 --> 00:15:48,890
each max shot better wherever you want
to use hashing algorithm to previous

140
00:15:48,890 --> 00:15:56,240
signal the format hood JSON web token is
header that pillow passenger is an

141
00:15:56,240 --> 00:15:58,850
example of one is the shorter version

142
00:15:58,850 --> 00:16:07,880
he's very much longer so JSON web token
should not contain sensitive information

143
00:16:07,880 --> 00:16:13,280
because they're not corrected they're
just a 64 encoding you could although

144
00:16:13,280 --> 00:16:21,650
scripture see someone using JSON web
pressure the secret used to create a

145
00:16:21,650 --> 00:16:26,430
signature should be secure server side
because you don't want you here

146
00:16:26,430 --> 00:16:37,349
you know for your own sake so securing
it . with JSON web tokens should verify

147
00:16:37,350 --> 00:16:44,160
the signatures set a short expiration
date always communicate over secure

148
00:16:44,160 --> 00:16:52,290
communication channel and secure signing
Secret Service I'd also 29 sensitive

149
00:16:52,290 --> 00:17:01,770
information you have to scripture to get
so let's send a request to rm1 blocks

150
00:17:01,770 --> 00:17:07,379
which returns all the blogs and notice i
have not included the JSON web token is

151
00:17:07,380 --> 00:17:13,620
request and let's see what is returned
we would be received all blocks Reserve

152
00:17:13,619 --> 00:17:19,649
which should happen and the user is in
authenticated or authorized to use any

153
00:17:19,650 --> 00:17:31,050
blogs about a valid JSON web token so
let's go to the koo sow 4.4 for the

154
00:17:31,050 --> 00:17:36,990
request is received by the end . we
should create some type of filter or

155
00:17:36,990 --> 00:17:42,900
interceptor that intercepts all of us
and then verifies the JSON web token is

156
00:17:42,900 --> 00:17:49,140
bringing the created or i created a
filter which intercepts the WebSocket

157
00:17:49,140 --> 00:17:58,110
extract the user information and
invalidates the never checks out the

158
00:17:58,110 --> 00:18:02,969
request will be sent to them . global
response will be delivered to the user

159
00:18:03,570 --> 00:18:12,600
let's take a look at the valid method so
after the information extracted from the

160
00:18:12,600 --> 00:18:20,100
token the user just checked also the
expiration of symptoms checked as well

161
00:18:20,100 --> 00:18:28,050
as if the user has some change your
password before was created will often

162
00:18:28,050 --> 00:18:30,340
make their saying hey you have to

163
00:18:30,340 --> 00:18:34,360
we authenticate yourself that you change
your password after this took mr. even

164
00:18:34,360 --> 00:18:42,879
less the same request without a JSON web
token that we have implemented our

165
00:18:42,880 --> 00:18:47,590
filter and we received before one task
and you're on all the box which is great

166
00:18:48,340 --> 00:18:54,010
exactly want to happen because you don't
have a json request so once you sit back

167
00:18:54,010 --> 00:19:05,110
there and not the blocks now let's in a
request with a forage JSON web token and

168
00:19:05,110 --> 00:19:11,110
see what happens in a request to the
server returned to 41 on the rice

169
00:19:11,110 --> 00:19:15,879
responds just like you want to happen
because Jason so it is invalid

170
00:19:18,130 --> 00:19:31,210
so we also want to protect sensitive
resources and how do we do that

171
00:19:31,210 --> 00:19:36,309
implement access controls their pro bass
or user-level base or combination of

172
00:19:36,309 --> 00:19:37,750
both

173
00:19:37,750 --> 00:19:47,890
so your incessant kind of come across
applications where they are housed in a

174
00:19:47,890 --> 00:19:52,809
multi-tenant environment so in this
environment you don't want to have

175
00:19:52,809 --> 00:20:01,960
clients accessing other clients this
shouldn't happen at all so we need to

176
00:20:01,960 --> 00:20:11,080
you met a permission level of some sort
so pretty much to offer plus and i

177
00:20:11,080 --> 00:20:17,080
receive a valid JSON to again use their
password as user password

178
00:20:17,080 --> 00:20:24,549
this is a user-level account that have
stored in my yeah let's get the blogs

179
00:20:24,549 --> 00:20:31,750
blog every blogs the brand created one
added created one user created the other

180
00:20:31,750 --> 00:20:33,700
one

181
00:20:33,700 --> 00:20:40,990
let's see if we can delete block so then
other we request

182
00:20:40,990 --> 00:20:46,059
I want you to leave that is block around
user-level account so i should be to

183
00:20:46,059 --> 00:20:47,559
delete someone else

184
00:20:47,559 --> 00:20:53,800
hello and i received 200 that's ok which
shouldn't happen because i am not the

185
00:20:53,800 --> 00:21:03,190
altar of that lock let's see what the
code looks like to hear you have a 10.7

186
00:21:03,190 --> 00:21:10,630
into the only method so what this point
does it extracts the ID fetches a blog

187
00:21:10,630 --> 00:21:15,160
and then remove the block here we have
no access controls implement which never

188
00:21:15,160 --> 00:21:23,800
happened with the coach should look like
this take the trillion extract the user

189
00:21:23,800 --> 00:21:24,580
information

190
00:21:24,580 --> 00:21:33,280
username as well as the roles of that
user then I don't have to check here i'm

191
00:21:33,280 --> 00:21:38,260
getting a blog author and i'm comparing
to the username that checks out the blog

192
00:21:38,260 --> 00:21:44,950
is deleted that doesn't check out the
second check check repaired by the

193
00:21:44,950 --> 00:21:51,460
permissions of that user is check to see
if it has a role of Adam I haven't been

194
00:21:51,460 --> 00:21:55,540
this because admin should be able to do
apply even though I was created by

195
00:21:55,540 --> 00:22:02,350
something else somebody else if both
these checks go check out the air

196
00:22:02,350 --> 00:22:10,030
returns and you're not authorized to
perform this action so now that we have

197
00:22:10,030 --> 00:22:15,550
our access controls implemented and once
again the same request request to the

198
00:22:15,550 --> 00:22:23,770
blog's last two . and we return with uh
you're not authorized to perform this

199
00:22:23,770 --> 00:22:26,770
action that

200
00:22:29,630 --> 00:22:38,450
so input validation the service should
always validate and coming dated said

201
00:22:38,450 --> 00:22:43,880
always check the content-type to make
sure that the factory site is supported

202
00:22:43,880 --> 00:22:50,300
by this import the server should never
assume the content-type and the constant

203
00:22:50,300 --> 00:22:55,760
should always be checked and it's like
to be based on the data in that request

204
00:22:55,760 --> 00:22:57,860
it off talking vice versa

205
00:22:57,860 --> 00:23:01,340
it's not a former level status code
should return

206
00:23:03,170 --> 00:23:09,830
let's see how to spring you can just add
the students equals whatever data type

207
00:23:09,830 --> 00:23:17,240
you want within actually . now spraying
automatically handles errors so okay

208
00:23:17,240 --> 00:23:24,800
receive requests any texts last xml the
sprinkle actually handle the error and

209
00:23:24,800 --> 00:23:39,440
error message back to the time and it's
a little bit look like in jersey plus

210
00:23:39,440 --> 00:23:44,870
central west to the server containing
the constant light to flies that smell

211
00:23:45,980 --> 00:23:54,080
I'm return with the 415 status code and
hey unsupported media type i can read

212
00:23:54,080 --> 00:24:04,100
this type of data back let's try to send
the same request but in this case you

213
00:24:04,100 --> 00:24:08,780
change the content type to a police
chase on which is provided . and see

214
00:24:08,780 --> 00:24:14,510
what happens and return with a format
that will plus saying that hey the data

215
00:24:14,510 --> 00:24:17,180
format is it right you know

216
00:24:17,180 --> 00:24:21,830
board early race don't find it so get
the data format is wrong

217
00:24:22,669 --> 00:24:33,409
so output encoding security under should
always be same of all requests elbow up

218
00:24:33,409 --> 00:24:35,059
in all responses sorry

219
00:24:35,059 --> 00:24:39,049
content types should always maintain the
correct content types of servers sending

220
00:24:39,049 --> 00:24:47,418
json content-type header should include
the application / t stop also X content

221
00:24:47,419 --> 00:24:51,470
type options no snitch should also be
set so that the browser won't try to

222
00:24:51,470 --> 00:25:00,619
detect different content type of it in
the one that is why i put that rubber

223
00:25:00,619 --> 00:25:04,580
talk pretty fast my blog

224
00:25:04,580 --> 00:25:11,779
di will be available on github basically
uh partially based it off of already

225
00:25:11,779 --> 00:25:16,580
working demo spring also presentation
will be available on our company's

226
00:25:16,580 --> 00:25:36,830
website and if you have any questions
ask now or send money no I also have a

227
00:25:36,830 --> 00:25:42,918
couple drinks for tonight so if you come
to the jury room and talk about

228
00:25:42,919 --> 00:25:44,210
wrestling and

229
00:25:44,210 --> 00:25:47,210
give you a drink p

230
00:25:48,340 --> 00:26:14,289
I

231
00:26:31,900 --> 00:26:38,560
yeah

232
00:26:39,110 --> 00:26:42,110
all that is left up

233
00:26:43,490 --> 00:26:46,490
sorry about that

234
00:26:48,710 --> 00:26:51,710
very soon

235
00:26:53,970 --> 00:27:07,740
ok

236
00:27:24,960 --> 00:27:32,460
yeah

