1
00:00:00,000 --> 00:00:04,740
on that was actually better than i
expected awesome you guys are kind of

2
00:00:04,740 --> 00:00:05,520
way

3
00:00:05,520 --> 00:00:11,040
python3 it's time if you don't want to
listen to this

4
00:00:11,040 --> 00:00:17,310
then i'd be surprised why you're in the
room i'm charles Yost this talk is being

5
00:00:17,310 --> 00:00:24,630
given that Derby con I think the dates
right so we'll move on this is just a

6
00:00:24,630 --> 00:00:31,410
summary recapping what you probably
already read uh basically we're going to

7
00:00:31,410 --> 00:00:37,200
talk about Python 3 and why it's time to
move or at least get started moving to

8
00:00:37,200 --> 00:00:42,329
python 3 we're going to cover some of
the details some of the reasons why it's

9
00:00:42,329 --> 00:00:47,670
a good idea to move what you get by
moving the Python 3 pitfalls that you

10
00:00:47,670 --> 00:00:53,129
might encounter and just some general
tactics for how to handle a transition

11
00:00:53,129 --> 00:00:57,089
you might be going through or setting up
a new project you want to use Python 3

12
00:00:57,090 --> 00:01:01,500
with as i said at the top

13
00:01:01,500 --> 00:01:05,729
I'm Charles Yost I've got a very
background you probably already read

14
00:01:05,729 --> 00:01:11,130
this if you want to as well so we're
just going to skip over it but if you

15
00:01:11,130 --> 00:01:15,420
need to get in contact with me have any
questions after the talk you can contact

16
00:01:15,420 --> 00:01:22,200
me via twitter i also have my github and
YouTube handle up there because I try

17
00:01:22,200 --> 00:01:26,700
and keep track of the videos they are
recorded and put them up on youtube and

18
00:01:26,700 --> 00:01:33,630
actually all these slides are text and
so you ever need them for reference you

19
00:01:33,630 --> 00:01:43,560
can find those on github so why now why
is it time now to move to python 3

20
00:01:43,560 --> 00:01:50,640
what's special is there something that's
changed some sudden effect that's

21
00:01:50,640 --> 00:01:51,600
happened

22
00:01:51,600 --> 00:01:58,229
no spend time to move for quite a while
but now is the best time

23
00:02:00,299 --> 00:02:03,689
let's go through a bit of history how
did we get here right

24
00:02:03,689 --> 00:02:06,898
why am I even talking about moving to
python 3

25
00:02:06,899 --> 00:02:12,690
it's just a new version right well we
can start all the way back in December

26
00:02:12,690 --> 00:02:13,650
of 1980

27
00:02:13,650 --> 00:02:19,379
nine when Python was just a glimmer in
gritos I and implementation started of

28
00:02:19,379 --> 00:02:21,239
it

29
00:02:21,239 --> 00:02:29,340
one . o came out january $MONTH 1994 and
$YEAR in october of $YEAR 2002 . o came

30
00:02:29,340 --> 00:02:33,689
out this was a very important milestone
and one of the things that brought along

31
00:02:33,689 --> 00:02:38,400
with it was support for unicode now if
you're not familiar with how computers

32
00:02:38,400 --> 00:02:44,189
actually look at text it's stored as
bites on the disc and if you want

33
00:02:44,189 --> 00:02:48,480
different characters for other languages
you have to come up with a way of

34
00:02:48,480 --> 00:02:54,030
storing that invites and that's unicode
we have the capability to encode way

35
00:02:54,030 --> 00:02:59,159
more characters than we will probably
ever use but python up until this point

36
00:02:59,159 --> 00:03:07,590
didn't have the capability to access it
finally now we do three . l came out

37
00:03:07,590 --> 00:03:14,939
December of 2008 I think about that date
a little bit we're in 2016 now so eight

38
00:03:14,939 --> 00:03:20,940
years roughly ago 3 . o came out and I'm
telling you right now it's time to move

39
00:03:20,940 --> 00:03:27,900
big thing with this was strings as bites
you might have heard of the unicode

40
00:03:27,900 --> 00:03:33,150
issues because of three . oh and the
fact that now something was going wrong

41
00:03:33,150 --> 00:03:38,849
and anything from a Python to code base
was having problems and something to do

42
00:03:38,849 --> 00:03:41,459
with strings and we're just going to
leave it alone

43
00:03:41,459 --> 00:03:44,790
27 is fine right it'll just stay there

44
00:03:44,790 --> 00:03:52,888
well if we look at python3 . oh it
really wasn't just an update right it

45
00:03:52,889 --> 00:03:58,319
wasn't just a new version it was an
evolution of Python it was moving

46
00:03:58,319 --> 00:04:03,510
forward with something that we know had
wanted to do for quite a while shedding

47
00:04:03,510 --> 00:04:07,769
some of the old changes getting rid of
some of the old cropped and things that

48
00:04:07,769 --> 00:04:13,769
accumulated not turned out quite right
things like the unicode support unicode

49
00:04:13,769 --> 00:04:21,269
support was there and available in
Python 25 it wasn't quite as nice as it

50
00:04:21,269 --> 00:04:24,020
could be

51
00:04:24,020 --> 00:04:28,789
so what happened three todo came out
solves all our problems shiny new thing

52
00:04:28,789 --> 00:04:30,830
we wanted right

53
00:04:30,830 --> 00:04:37,099
no not quite with this big of an
overhaul there had to be some collateral

54
00:04:37,099 --> 00:04:42,770
damage in this case for performance
particularly IL and that slowed a lot of

55
00:04:42,770 --> 00:04:47,840
people down from adopting it also
chicken and an egg right we've got

56
00:04:47,840 --> 00:04:53,869
python3 . oh but none of our wonderful
packages support python3 Otto at this

57
00:04:53,870 --> 00:04:58,940
point was first released there were a
couple that had decided to give it a try

58
00:04:58,940 --> 00:05:05,270
the pi3k project and see where we could
go with it but you know by and large the

59
00:05:05,270 --> 00:05:07,669
things that people were using day in and
day out

60
00:05:07,669 --> 00:05:11,630
they just weren't there so Python 3 . o
kind of fell flat

61
00:05:12,860 --> 00:05:16,759
python3 . one right quickly on the heels

62
00:05:16,759 --> 00:05:24,139
jun $DAY of $MONTH 2009 better but still
had issues still have a lot of issues in

63
00:05:24,139 --> 00:05:28,130
fact some of the issues were even
dealing with the encoding unicode

64
00:05:28,130 --> 00:05:35,150
support that was a big divil part of
this and so 3 . one came out very

65
00:05:35,150 --> 00:05:40,099
quickly people continue to just kind of
ignore it and stay where they were

66
00:05:40,099 --> 00:05:49,250
Python 3 . 2 ok another minor one
februari 2011 little bit more time here

67
00:05:49,250 --> 00:05:55,759
much better a lot of the problems with
IO performance was fixed by going to

68
00:05:55,759 --> 00:06:01,009
some lower-level see api's instead of
using Python exclusively for the i/o a

69
00:06:01,009 --> 00:06:04,190
lot of the issues with unicode were
tracked down and fixed because of

70
00:06:04,190 --> 00:06:12,199
advancements that have been made and how
errors were handled and all-in-all it

71
00:06:12,199 --> 00:06:17,330
actually ended up being a pretty good
choice right it was a good starting

72
00:06:17,330 --> 00:06:23,810
point now we finally have a version that
we can build on it brought along wsgi if

73
00:06:23,810 --> 00:06:27,590
you don't know what that is it's for web
applications if you ever heard of django

74
00:06:27,590 --> 00:06:33,830
or class wsgi was pivotal for making
sure that Python 3 was going to be

75
00:06:33,830 --> 00:06:37,789
accessible for web application
development and 3 . 2

76
00:06:37,790 --> 00:06:44,060
is when it came out many packages not
all of them i wouldn't even say majority

77
00:06:44,060 --> 00:06:48,980
but many packages chose three . two for
the version to begin supporting the

78
00:06:48,980 --> 00:06:59,690
Python 3 line if you will three . x
release line up for their kind of

79
00:06:59,690 --> 00:07:04,460
splitting . right three . 03 . one there
just for too many issues they didn't

80
00:07:04,460 --> 00:07:08,599
want to go back and support those so 3 .
2 was a very common choice and you'll

81
00:07:08,600 --> 00:07:14,090
still see that in a lot of packages that
they require at least 3 . 2 or greater

82
00:07:14,090 --> 00:07:22,729
for python 3 support so we've got
another version python3 . 3 in September

83
00:07:22,730 --> 00:07:25,730
2012 talk about this a little bit

84
00:07:26,450 --> 00:07:32,539
the first release without a
corresponding to . x release on the to

85
00:07:32,540 --> 00:07:38,360
python to line so let's rewind a little
bit i've been talking all about Python 3

86
00:07:38,360 --> 00:07:44,690
but while we've been going through
python3 . oh and 3 . 1 and 3 . 2 we had

87
00:07:44,690 --> 00:07:53,450
chewed up four five six seven right
alongside and so 3 . 3 didn't have a

88
00:07:53,450 --> 00:07:59,090
Python 2.8 still doesn't have a Python
too . in fact there won't be ever a

89
00:07:59,090 --> 00:08:07,190
Python too . 8 many packages finally
started to jump on board at this point

90
00:08:07,190 --> 00:08:11,090
as well there were some advancements and
improvements that came along with 3.3

91
00:08:11,090 --> 00:08:16,969
something called virtualenv that will
talk about a bit later that might have a

92
00:08:16,970 --> 00:08:22,340
an odd name for what it actually does
and there was more and more support

93
00:08:22,340 --> 00:08:27,919
being garnered not to mention that a
line had been drawn in the sand the two

94
00:08:27,920 --> 00:08:29,930
branch was dead

95
00:08:29,930 --> 00:08:37,400
this is in September 2012 when this
happens once again we're in 2016 for

96
00:08:37,400 --> 00:08:44,990
years so let's continue to go forward
and see where we get so today python.org

97
00:08:44,990 --> 00:08:51,440
maintains a specific wiki page titled
should i use Python 2 or Python 3

98
00:08:51,440 --> 00:08:57,080
for my development activity seems like a
good reference you know we should be

99
00:08:57,080 --> 00:09:02,870
looking to them to guidance and and
figure out what we want to do direct

100
00:09:02,870 --> 00:09:09,890
quote short version Python 2 x's legacy
python3 . x is the present and future of

101
00:09:09,890 --> 00:09:15,650
the language they have sent many signals
this is just one of them that pipe onto

102
00:09:15,650 --> 00:09:17,660
is dead

103
00:09:17,660 --> 00:09:23,839
it's going to be end-of-life soon it's
no longer getting the feature

104
00:09:23,840 --> 00:09:29,330
enhancements and the push forward the
Python 3 is it's dead and we need to

105
00:09:29,330 --> 00:09:37,910
find a way to move forward off of it in
fact support for python 2.7 ends in a

106
00:09:37,910 --> 00:09:41,719
little over three years and just for fun

107
00:09:42,410 --> 00:09:45,410
that's the actual countdown

108
00:09:46,820 --> 00:09:52,820
so that's the amount of time we've got
left after that support goes away now i

109
00:09:52,820 --> 00:09:58,010
can understand they're going to be
projects and tools and scripts that you

110
00:09:58,010 --> 00:10:03,439
have that you really don't want to move
away from what works a lot of times that

111
00:10:03,440 --> 00:10:07,850
python 2.7 is what's installed on the
system when you first get it that's

112
00:10:07,850 --> 00:10:14,360
changing slowly but it's really not
about all of that stop

113
00:10:14,360 --> 00:10:18,920
it's more about business-critical
applications the things that will no

114
00:10:18,920 --> 00:10:24,199
longer have any kind of security patches
for after three years

115
00:10:24,200 --> 00:10:28,580
I'm little over obviously but this is
what we're staring down the barrel of

116
00:10:28,580 --> 00:10:33,950
we've got a large amount of advance
notice we've known for 10 years that

117
00:10:33,950 --> 00:10:39,950
python 2.7 was going to be the last
iteration of the pipe onto branch and

118
00:10:39,950 --> 00:10:45,890
that it was going to go away and I think
three years is enough time to make a

119
00:10:45,890 --> 00:10:50,750
change I think that we can move forward
and do something better and not end up

120
00:10:50,750 --> 00:10:53,610
with another PHP

121
00:10:53,610 --> 00:10:59,220
so how does it look

122
00:11:00,390 --> 00:11:05,850
we have the idea that we want to move
forward but nothing is created a vacuum

123
00:11:05,850 --> 00:11:09,540
especially the pipe on right one of the
amazing things about python is the

124
00:11:09,540 --> 00:11:13,620
cheese shop and all the things that you
can get there all the wonder that you

125
00:11:13,620 --> 00:11:18,329
can find well a couple of enterprising
individuals have started maintaining

126
00:11:18,329 --> 00:11:21,329
lists of how close we are to being ready

127
00:11:21,990 --> 00:11:29,070
ninety-four percent of the top 360
packages have been ported to python 3

128
00:11:29,070 --> 00:11:35,370
there are some holdouts most of those
have alternatives now but most likely

129
00:11:35,370 --> 00:11:40,079
the packages that you're using either
day-to-day or periodically in scripts

130
00:11:40,079 --> 00:11:42,420
and data processing you need to do

131
00:11:42,420 --> 00:11:48,660
they've already been boarded numpy syfy
already there are excellent ways to get

132
00:11:48,660 --> 00:11:53,640
ahold of those but we want to stick with
one list let's take a look at another

133
00:11:53,640 --> 00:11:55,769
one not to mention it's got a fun name

134
00:11:55,769 --> 00:12:05,339
python3 wall of superpowers 93% of the
top 200 packages have been ported this

135
00:12:05,339 --> 00:12:07,890
is really important right

136
00:12:07,890 --> 00:12:13,829
this is why now is the time you got the
support of the community packages have

137
00:12:13,829 --> 00:12:19,319
moved forward have been ported or
replaced with better alternatives and

138
00:12:19,320 --> 00:12:25,199
there's a lot of benefits to be gotten
you know the Python 3 isn't just a new

139
00:12:25,199 --> 00:12:29,969
number it's not just incrementing by one
there's a lot of changes that went into

140
00:12:29,970 --> 00:12:35,459
this to differentiate it from python too
so let's look at some of those they

141
00:12:35,459 --> 00:12:39,119
might even be able to be turned into you
know benefits that you can pitch to

142
00:12:39,120 --> 00:12:42,750
management if you do need to move a
project forward they have to get

143
00:12:42,750 --> 00:12:48,870
clearance on one and security is a very
underlying one of those but there are

144
00:12:48,870 --> 00:12:53,579
also benefits to be had just from
working in the language also this is a

145
00:12:53,579 --> 00:12:59,069
list of very good reasons why any
personal projects or personal scripts

146
00:12:59,070 --> 00:13:05,490
that you've got are at a really good
point to start using in Python 3 either

147
00:13:05,490 --> 00:13:10,920
porting them rewriting them for new ones
just start out with python 3 and that

148
00:13:10,920 --> 00:13:15,300
way you won't have to come up with a
solution in three years six months and

149
00:13:15,300 --> 00:13:21,270
change first off we talked about this
little bit already better unicode

150
00:13:21,270 --> 00:13:26,490
support this is how computers store
characters when I'm typing on my

151
00:13:26,490 --> 00:13:30,959
keyboard the computer doesn't understand
that that's letter A or B right it's

152
00:13:30,959 --> 00:13:34,709
storing is ones and zeros blazing passed
on the disk

153
00:13:34,709 --> 00:13:39,390
well the world is becoming more and more
unicode based we've got

154
00:13:39,390 --> 00:13:46,350
internationalisation from businesses and
all kinds of a data being open sourced

155
00:13:46,350 --> 00:13:52,440
and exchanged from various resources for
research institutes and go places of

156
00:13:52,440 --> 00:13:58,380
learning and it's only going to get more
so we're only going to be handling more

157
00:13:58,380 --> 00:14:05,370
unicode rather than less we're not going
to go back to the dark ages and use no

158
00:14:05,370 --> 00:14:11,459
utf-8 or ascii haven't prevent you're
going to need to support it so why not

159
00:14:11,459 --> 00:14:16,709
just pick up the benefit that Python 3
has a built-in it's not just tacked on

160
00:14:16,709 --> 00:14:22,050
the side either this is down in the core
of the language and as far as security

161
00:14:22,050 --> 00:14:26,459
benefits you can have less dangerous
string handling if you know anything

162
00:14:26,459 --> 00:14:32,099
about sanitizing inputs I this is a
perfect example of setting yourself up

163
00:14:32,100 --> 00:14:37,199
for success with that also because most
likely you're not going to write

164
00:14:37,199 --> 00:14:42,000
anything that's going to exist in a
vacuum reading files any files that

165
00:14:42,000 --> 00:14:47,069
you're ingesting or streams of data even
it's not really restricted to piles

166
00:14:47,069 --> 00:14:51,209
those are a lot more straightforward and
easier to understand am i dealing with

167
00:14:51,209 --> 00:14:55,649
texts that i know the encoding for am i
dealing with bites

168
00:14:55,649 --> 00:14:59,430
maybe it's a packet capture right and
you want the bites from it

169
00:14:59,430 --> 00:15:03,390
maybe it's a text file that you know
somebody left on their desktop

170
00:15:03,390 --> 00:15:07,319
containing their passwords and you just
want to read that either way reading

171
00:15:07,319 --> 00:15:10,800
files is a lot more straightforward and
it's something that's a lot more

172
00:15:10,800 --> 00:15:15,930
intuitive before you just kind of get a
weird stream of bytes you know I open

173
00:15:15,930 --> 00:15:20,189
visits as text and utf-8 but actually
it's got you

174
00:15:20,190 --> 00:15:25,530
code what is going on why does my screen
look all glitch now we don't have to

175
00:15:25,530 --> 00:15:32,069
worry about that integers right playing
with numbers next thing up the scale

176
00:15:32,070 --> 00:15:36,060
from dealing with text and ingesting
that messing around is dealing with

177
00:15:36,060 --> 00:15:41,729
numbers so right off the top there's no
longer to separate number types if you

178
00:15:41,730 --> 00:15:47,550
use Python to a lot and you've got used
to insert and longs long is long gone

179
00:15:47,550 --> 00:15:53,939
now we just got intense and it's much
more of a pythonic situation you don't

180
00:15:53,940 --> 00:15:58,650
have to worry about the size right
before it was an into it was a small and

181
00:15:58,650 --> 00:16:03,540
Sookie overflowed all kinds of bad stuff
could happen which really was odd python

182
00:16:03,540 --> 00:16:08,280
now we don't have to worry about that
it's all just rolled into one type also

183
00:16:08,280 --> 00:16:11,280
division works like it did when you
learned in second grade

184
00:16:11,940 --> 00:16:16,650
anybody know what I'm talking about
Python to just kind of rounds off the

185
00:16:16,650 --> 00:16:21,180
end for fun I can't tell you how many
times that's introduced above that I

186
00:16:21,180 --> 00:16:26,310
have no idea what's going on and it's
just that simple division was really

187
00:16:26,310 --> 00:16:30,780
weird i don't understand the Providence
of why it worked like that now it works

188
00:16:30,780 --> 00:16:35,130
the way that you would expect it to you
got a remainder you just go forward

189
00:16:35,130 --> 00:16:39,120
I mean they did keep the truncating
division they put it under a different

190
00:16:39,120 --> 00:16:43,650
operator double slash instead of a
single but that's in my mind a better

191
00:16:43,650 --> 00:16:44,910
way to go about it

192
00:16:44,910 --> 00:16:56,339
question yes and you don't have to do
one . 0 / 3 . oh right yes if you want

193
00:16:56,340 --> 00:17:00,870
that previous behavior you can maintain
it there are times where it's useful and

194
00:17:00,870 --> 00:17:03,839
that like i said is a double slash
instead of a single slash for division

195
00:17:03,839 --> 00:17:09,510
double slash and around it off but I
mean even that makes a lot of sense for

196
00:17:09,510 --> 00:17:14,760
pipe on as language that having that
separate operator that can be picked out

197
00:17:14,760 --> 00:17:19,379
really easily oh this is going to behave
differently than I expect so I really

198
00:17:19,380 --> 00:17:22,980
think that was an awesome choice and it
was something that they had to break

199
00:17:22,980 --> 00:17:28,470
backwards compatibility for right this
is why it's so hard to take python to

200
00:17:28,470 --> 00:17:33,030
code and ported python3 is because
little things like that had been built

201
00:17:33,030 --> 00:17:33,750
up

202
00:17:33,750 --> 00:17:39,000
and they were going to just change the
operator silently would completely mess

203
00:17:39,000 --> 00:17:43,530
with anything anybody had ever written
for scientific or mathematical purposes

204
00:17:43,530 --> 00:17:52,110
so we'll continue forward comparison
simplification fancy words all this

205
00:17:52,110 --> 00:17:57,389
really means is that instead of getting
odd behavior when you say compared a

206
00:17:57,390 --> 00:18:03,360
string to a number now what just airs
out you get an air and you can handle

207
00:18:03,360 --> 00:18:09,629
that however you want but this is
another example of a thing that they had

208
00:18:09,630 --> 00:18:14,220
to kind of let go of and create a
breaking change in on backwards

209
00:18:14,220 --> 00:18:19,770
compatible version in order to fix never
really made sense i mean we've got

210
00:18:19,770 --> 00:18:24,270
javascript if we want to go comparing
numbers two strings and truthful see

211
00:18:24,270 --> 00:18:25,260
stop

212
00:18:25,260 --> 00:18:30,240
why do we have to deal with that in
Python well python3 we don't and it's

213
00:18:30,240 --> 00:18:35,310
very specific and very clear about where
the issue is when you have an issue you

214
00:18:35,310 --> 00:18:39,510
don't have to go chasing it down and
figure out what comparison messed up

215
00:18:39,510 --> 00:18:45,690
this does have a side effect that a
sortable list requires all the same type

216
00:18:45,690 --> 00:18:51,330
of objects to be in it if you want it
sorted which isn't that hard to cater to

217
00:18:51,330 --> 00:18:56,429
honestly can't think of a time that I've
had a list with multiple types in it

218
00:18:56,430 --> 00:19:00,060
that I wanted sorted so that's
interesting but it is something to

219
00:19:00,060 --> 00:19:00,960
consider

220
00:19:00,960 --> 00:19:05,010
and this is just another example like a
side of breaking backwards compatibility

221
00:19:05,010 --> 00:19:10,800
they had to shed those changes and move
forward and the reason why python3 has

222
00:19:10,800 --> 00:19:17,639
so many great benefits and why it's so
much work to port exception handling i

223
00:19:17,640 --> 00:19:20,820
was just talking about errors from
comparisons exception handling has

224
00:19:20,820 --> 00:19:25,679
gotten a lot better and you can read the
text of what's there but the long and

225
00:19:25,680 --> 00:19:30,510
short of it is that it's a lot clearer
and easier to read basically now when

226
00:19:30,510 --> 00:19:31,800
you've got an exception

227
00:19:31,800 --> 00:19:34,980
it's got a clear inheritance as far as
where it came from

228
00:19:35,550 --> 00:19:40,169
it's got a clear way of handling it you
don't have that weird comma grammar that

229
00:19:40,170 --> 00:19:45,570
you had in Python 2 which always made me
think that somehow it was dealing with a

230
00:19:45,570 --> 00:19:46,939
couple and it

231
00:19:46,940 --> 00:19:52,190
isn't just a lot clearer and more
straightforward not to mention that it

232
00:19:52,190 --> 00:19:56,150
has the added benefit one of the things
they were able to implement once again a

233
00:19:56,150 --> 00:20:01,820
breaking change is the fact that your
variable that stores or your tag that

234
00:20:01,820 --> 00:20:08,780
points to your exception is actually
sculpt to accept all plots to the catch

235
00:20:08,780 --> 00:20:12,530
in there and that means that you're not
going to leave that out and have issues

236
00:20:12,530 --> 00:20:15,530
if you have nested exceptions or
anything like that

237
00:20:16,940 --> 00:20:25,790
virtualenv is built-in does anybody have
experience with virtualenv how much did

238
00:20:25,790 --> 00:20:34,460
you hate in Python to bet that's my
sentiments I wanted to use it was

239
00:20:34,460 --> 00:20:39,140
awesome will actually go into how to use
it when its benefits are a little bit

240
00:20:39,140 --> 00:20:46,010
later but if you try to before and were
frustrated by it in Python 3 give it

241
00:20:46,010 --> 00:20:49,940
another chance they've done things right
and i'll give you a quick rundown if

242
00:20:49,940 --> 00:20:54,080
you've never used it before on how to
actually go about using it but its

243
00:20:54,080 --> 00:20:58,610
built-in you don't have to install it
you don't have to do some kind of weird

244
00:20:58,610 --> 00:21:03,530
chain for it it's just they're fully
supported and works better than ever

245
00:21:03,530 --> 00:21:10,310
there are tons more features obviously
right at this moment actually a couple

246
00:21:10,310 --> 00:21:17,120
of days ago I believe the first beta
43.6 came out and so there are tons of

247
00:21:17,120 --> 00:21:22,909
changes async await I'm sure that if you
guys follow it all you've seen all the

248
00:21:22,910 --> 00:21:28,010
amazing features that you're missing out
on by not using Python 3 but we're not

249
00:21:28,010 --> 00:21:29,960
going to grind over them right now

250
00:21:29,960 --> 00:21:35,450
the point is that there is a ton of
benefit to going to it both programming

251
00:21:35,450 --> 00:21:41,420
lies security-wise just maintaining old
code right it works why would I change

252
00:21:41,420 --> 00:21:42,140
it

253
00:21:42,140 --> 00:21:46,430
well it works right now but you
understand how it works and are you

254
00:21:46,430 --> 00:21:51,680
willing to do security patches yourself
for it looks like something that's a

255
00:21:51,680 --> 00:21:58,010
little bit bigger job than I want so
let's go on to the next part what to

256
00:21:58,010 --> 00:21:59,559
watch out for

257
00:21:59,559 --> 00:22:03,399
say you are going to start putting these
pieces of code you might have with this

258
00:22:03,399 --> 00:22:04,449
project

259
00:22:04,450 --> 00:22:08,499
what are some of the top things that are
really kind of gonna bite you if you go

260
00:22:08,499 --> 00:22:10,690
down that road

261
00:22:10,690 --> 00:22:14,980
first off and i'm sure you've all seen
this if you've done any searching for it

262
00:22:14,980 --> 00:22:20,889
all the print statement is a function
now have to use the parentheses python

263
00:22:20,889 --> 00:22:25,539
being python it's really lacks about you
putting space in between the actual

264
00:22:25,539 --> 00:22:28,690
function name and the parentheses but
you have to use the parentheses

265
00:22:29,679 --> 00:22:34,600
I personally really appreciate this
change because I always ended up

266
00:22:34,600 --> 00:22:38,080
introducing odd spaces into my print
statements i don't know if you guys

267
00:22:38,080 --> 00:22:43,389
experienced that at all but in Python to
i do a print I try and put together a

268
00:22:43,389 --> 00:22:47,590
list of variables a couple of strings
and dispersed with it and I'd get

269
00:22:47,590 --> 00:22:51,399
something out that I didn't recognize
now we have two types of string

270
00:22:51,399 --> 00:22:54,729
formatting we have a print statement
that the functions you're just passing

271
00:22:54,730 --> 00:22:56,110
it one thing

272
00:22:56,110 --> 00:22:59,918
things are a lot better than they were
but it is something to watch out for and

273
00:22:59,919 --> 00:23:03,070
it's probably one of the first places
you're going to start if you start

274
00:23:03,070 --> 00:23:09,070
boarding your code is just to switch any
print statements also side note that i

275
00:23:09,070 --> 00:23:12,850
didn't mention on this um the print
statement now has the capability to

276
00:23:12,850 --> 00:23:20,559
print to any essentially any buffer and
so if you want to print to a file you

277
00:23:20,559 --> 00:23:23,200
can do that it's kind of neat

278
00:23:23,200 --> 00:23:28,149
maybe we'll take a look at that later if
i have time next thing on the list

279
00:23:28,149 --> 00:23:40,029
dictionaries that's disconcerting was
coordinated dictionaries dictionary keys

280
00:23:40,029 --> 00:23:47,289
items values are views this is another
gotcha and one of the reasons why it's

281
00:23:47,289 --> 00:23:51,490
so high up on the list is because it's
really easy to get caught out on this

282
00:23:51,490 --> 00:23:51,970
one

283
00:23:51,970 --> 00:23:57,279
views what does that mean well instead
of a list of items se1 the list of keys

284
00:23:57,279 --> 00:24:02,740
right you're not going to get a list of
keys you're going to get a view of the

285
00:24:02,740 --> 00:24:07,779
keys and that view is not going to be
able to be changed because you're just

286
00:24:07,779 --> 00:24:12,260
looking at it right you don't actually
have the list them so if you sort that

287
00:24:12,260 --> 00:24:23,090
you it's just going to sort the view not
the actual dictionary map and filter

288
00:24:23,090 --> 00:24:27,860
return Peter ators we haven't talked
about it Raiders at all yet those are

289
00:24:27,860 --> 00:24:32,870
another awesome thing about Python 3 how
it works with those but it's something

290
00:24:32,870 --> 00:24:39,169
to keep in mind the integrators are a
lot lighter weights on memory but

291
00:24:39,170 --> 00:24:44,450
unfortunately they have the drawback
that you won't get items directly from

292
00:24:44,450 --> 00:24:50,750
them the easiest kind of hack for this
is to just wrap it in a list so list

293
00:24:50,750 --> 00:24:52,700
open friends map

294
00:24:52,700 --> 00:24:56,000
whatever you're doing map and then
closed both sets of friends will give

295
00:24:56,000 --> 00:25:00,560
you a list of the values right off the
bat as you move forward in Python 3

296
00:25:00,560 --> 00:25:07,970
you'll probably find yourself dealing
with map and filter and generators a lot

297
00:25:07,970 --> 00:25:12,560
more and that means that your program
will be more efficient consume less

298
00:25:12,560 --> 00:25:17,179
memory and you won't have to do that
kind of half but if you're just pouring

299
00:25:17,180 --> 00:25:21,380
code directly a lot of times that's what
gets suggested and it is one way to

300
00:25:21,380 --> 00:25:31,700
handle it also range now behaves like
xrange and X range is gone just another

301
00:25:31,700 --> 00:25:36,050
thing to keep in mind as you go through
and and work through the code you'll

302
00:25:36,050 --> 00:25:41,120
find this it's pretty much a straight
swap there's a couple of extras now that

303
00:25:41,120 --> 00:25:48,020
range does um but it's a pretty easy
thing to to get caught out by why am I

304
00:25:48,020 --> 00:25:49,580
having trouble running this

305
00:25:49,580 --> 00:25:56,510
oh it's crashing because X range is gone
the long pipe is gone just use inside

306
00:25:56,510 --> 00:25:59,300
mentioned that before and it really is
that simple

307
00:25:59,300 --> 00:26:04,040
anywhere that you're dealing with the
long type just use int and you won't

308
00:26:04,040 --> 00:26:09,800
have any issues text versus data this is
another way to talk about the whole

309
00:26:09,800 --> 00:26:14,629
unicode thing right we've got text we've
got data another way to say it is we've

310
00:26:14,630 --> 00:26:15,980
got strings

311
00:26:15,980 --> 00:26:21,290
we've got bites and we've got vital
raised and really this is a good thing

312
00:26:21,290 --> 00:26:25,520
it's very painful to deal with a Python
2

313
00:26:25,520 --> 00:26:30,080
code base that you're trying to get 23
and stuffs just not lining up because

314
00:26:30,080 --> 00:26:37,189
you thought it was a string but now it's
going and encoding air in the end this

315
00:26:37,190 --> 00:26:41,720
can be a really good exercise to just
kind of clean out some of the issues

316
00:26:41,720 --> 00:26:45,170
that you might not have noticed in your
system you're going to have to deal with

317
00:26:45,170 --> 00:26:47,600
it two places only two places

318
00:26:47,600 --> 00:26:52,490
the first one is if you take in any
input like a file or somebody typing on

319
00:26:52,490 --> 00:26:57,440
the keyboard once you figure out what
encoding you want that in and go forward

320
00:26:57,440 --> 00:27:01,520
from there the second place that you'll
hit it is when you're saving data out

321
00:27:01,520 --> 00:27:06,530
right so if you're saving something out
to a database or to a flat file csb

322
00:27:06,530 --> 00:27:09,860
that's another place where you have to
account for it but that's pretty much at

323
00:27:09,860 --> 00:27:14,149
the edges and that's where it should be
right you want to be careful about

324
00:27:14,150 --> 00:27:19,340
what's being coated how with the edges
your program internally it's actually a

325
00:27:19,340 --> 00:27:25,010
lot nicer a lot easier so you don't have
to worry about weird situations where

326
00:27:25,010 --> 00:27:29,780
you have you know strange bite await
brought byte array he's or strings

327
00:27:29,780 --> 00:27:35,330
hanging out there and of course there's
many many more of those two right there

328
00:27:35,330 --> 00:27:39,110
is a lot of changes there's a lot of
differences and so it's something that

329
00:27:39,110 --> 00:27:46,100
you're going to have to address when
you're doing this there's good news is a

330
00:27:46,100 --> 00:27:53,300
tool called 223 and basically if you run
it over codebase it will tell you all

331
00:27:53,300 --> 00:27:58,399
the places that you need to change
something and a lot of the things that

332
00:27:58,400 --> 00:28:02,390
will come up will be like those print
statements or putting in encode and

333
00:28:02,390 --> 00:28:07,490
decode for Strings it's really
straightforward to run its output is

334
00:28:07,490 --> 00:28:12,680
very easy two pars and if you want to
make this a long-term campaign if you

335
00:28:12,680 --> 00:28:17,450
have a big project that needs changed to
23 is definitely the way to go

336
00:28:17,450 --> 00:28:23,870
very easy to automate so let's take it
slow right maybe maybe we don't need to

337
00:28:23,870 --> 00:28:29,300
do this thing all at once maybe we don't
need to just port whatever crazy project

338
00:28:29,300 --> 00:28:34,040
I maybe we want to take some baby steps
go a little bit slower

339
00:28:34,040 --> 00:28:38,129
well the good news is that there are
ways to go from

340
00:28:38,130 --> 00:28:44,880
python 22 python3 without direct cut
right it's been years at this point

341
00:28:44,880 --> 00:28:48,840
people have built up a lot of tools a
lot of ways of coping with this

342
00:28:49,680 --> 00:28:53,910
the first one is just the Python future
module you can find documentation about

343
00:28:53,910 --> 00:28:58,020
that on pythons website and it provides
a bridge for some of these things select

344
00:28:58,020 --> 00:29:02,100
the print statement you can say okay
well it's just a goal for this week I'm

345
00:29:02,100 --> 00:29:05,639
going to eliminate all print statements
i'm going to make them print functions

346
00:29:05,640 --> 00:29:07,740
easiest way to do that

347
00:29:07,740 --> 00:29:14,790
import the future module import the
print statement part of it and basically

348
00:29:14,790 --> 00:29:19,620
you can then swap those out your code
it'll still run on pipe onto just fine

349
00:29:19,620 --> 00:29:26,010
but syntactically it will be ready for
python 3 in that way there's even more

350
00:29:26,010 --> 00:29:27,000
help

351
00:29:27,000 --> 00:29:32,190
python dash futures.org actually gives
you a future and past module and a

352
00:29:32,190 --> 00:29:37,140
couple others as well and this allows
you to continue down that road much more

353
00:29:37,140 --> 00:29:42,120
thoroughly than just the future module
that allows you to swap out all the

354
00:29:42,120 --> 00:29:47,340
things you can think of going from pipe
onto to python 3 therefore preparing

355
00:29:47,340 --> 00:29:51,870
your codebase preparing you for when you
might actually run it under pipe on

356
00:29:51,870 --> 00:29:56,969
three doesn't have to happen overnight
work at it little by little get it right

357
00:29:56,970 --> 00:30:03,900
and then make the transition another one
of these is six which is Python 3 4 223

358
00:30:03,900 --> 00:30:09,090
compatibility hacks and fixes and
patches all kinds of little things in

359
00:30:09,090 --> 00:30:09,659
there

360
00:30:09,660 --> 00:30:15,240
um these are all excellent ways to move
forward with this and it might seem like

361
00:30:15,240 --> 00:30:20,100
a monumental task especially if you have
a large code base run something against

362
00:30:20,100 --> 00:30:24,959
it like two to three and find out that
you've got thousands of things to change

363
00:30:24,960 --> 00:30:30,540
the good news is that you can do those
changes little by little and just make

364
00:30:30,540 --> 00:30:36,330
an impact over time you've got three
years right theory another thing about 2

365
00:30:36,330 --> 00:30:40,980
to 3 as a side note it can fix some
stuff itself that's a decision that

366
00:30:40,980 --> 00:30:45,000
you'll have to make whether you trust it
or not but it is a possibility and it

367
00:30:45,000 --> 00:30:48,060
can make things a little bit easier

368
00:30:48,060 --> 00:30:51,419
ok virtualenv i mentioned this

369
00:30:51,420 --> 00:30:54,690
and i know this is all fairly dry
material but this is actually pretty

370
00:30:54,690 --> 00:30:58,200
exciting for me I don't want to be
exciting for you guys

371
00:30:58,200 --> 00:31:02,610
virtualenv right virtual environment
well first thing you think of is

372
00:31:02,610 --> 00:31:08,790
virtualization virtualbox or vmware wait
a minute were talking pipe on here you

373
00:31:08,790 --> 00:31:10,889
don't need a whole machine right

374
00:31:10,890 --> 00:31:15,630
python the way it works essentially it's
got pipe on deck C and a whole bunch of

375
00:31:15,630 --> 00:31:21,660
library things packages and modules so
what do you need to create virtual

376
00:31:21,660 --> 00:31:27,480
environments court well essentially you
just need a copy of those things and

377
00:31:27,480 --> 00:31:32,730
make sure that when you run python is
pointed at that copy instead of your

378
00:31:32,730 --> 00:31:37,380
whole environment while come to think of
it if you're trying to go from two to

379
00:31:37,380 --> 00:31:41,940
three and you need a Python to
environment python3 environment

380
00:31:41,940 --> 00:31:47,250
side-by-side this might not be a bad way
to do it especially now that we've got

381
00:31:47,250 --> 00:31:52,140
the better version that's in Python 3
comes built in and just works a lot

382
00:31:52,140 --> 00:32:00,690
smoother included as a 3.3 i mentioned
that the ven be module provides support

383
00:32:00,690 --> 00:32:04,680
for creating lightweight virtual
environments with their own site

384
00:32:04,680 --> 00:32:08,910
directories which is just a fancy way of
saying it copies all the stuff you

385
00:32:08,910 --> 00:32:12,240
actually need so that you don't
overwrite the ones that are on your

386
00:32:12,240 --> 00:32:17,400
computer in order to create one of these
it's pretty straightforward

387
00:32:18,210 --> 00:32:23,070
most of these commands if you have your
environment setup correctly you don't

388
00:32:23,070 --> 00:32:29,250
need to call python dash M but there are
instances and I've noticed a lot of this

389
00:32:29,250 --> 00:32:33,120
in Windows where I just don't want to
mess with the path environment variable

390
00:32:33,120 --> 00:32:37,290
that much where it's easier to just call
it like this and you can do this with

391
00:32:37,290 --> 00:32:45,420
any python module so pipe on dash M
virtualenv and then a directory named so

392
00:32:45,420 --> 00:32:52,650
I don't know candy shop three and
that'll be your ports of candy shop 23

393
00:32:52,650 --> 00:32:55,650
god

394
00:32:58,659 --> 00:33:07,840
there's no distinct advantage other than
you can be a little bit lazier on it

395
00:33:07,840 --> 00:33:11,978
resolves it slightly different obviously
if you use the path environment variable

396
00:33:11,979 --> 00:33:17,289
method instead of running the module
like this then you're dictating its

397
00:33:17,289 --> 00:33:22,419
resolution right you're saying look for
the virtualenv script at this location

398
00:33:22,419 --> 00:33:27,369
and if you know where that's at and know
what you're doing with it there's no

399
00:33:27,369 --> 00:33:31,209
problem with that there's no advantage
to doing it this way for that but this

400
00:33:31,210 --> 00:33:35,590
is one way that Python can just resolve
itself so you don't have to worry about

401
00:33:35,590 --> 00:33:41,619
adding that in so once we came up with a
directory named and we create the

402
00:33:41,619 --> 00:33:47,139
virtual environment we need to enter it
right in this case I just kept directory

403
00:33:47,139 --> 00:33:50,529
underscore name is the name but for
windows

404
00:33:50,529 --> 00:33:54,789
it's a little bit different than it is
for the other os's on Windows want to do

405
00:33:54,789 --> 00:33:59,649
director named scripts activate on
everything else

406
00:33:59,649 --> 00:34:04,238
director named Finn activate tiny
difference something you probably won't

407
00:34:04,239 --> 00:34:07,629
notice but something to keep in mind if
you can't figure out why it's not

408
00:34:07,629 --> 00:34:13,089
working on windows versus others that
does remind me of a tangent that will go

409
00:34:13,089 --> 00:34:14,199
on real quick

410
00:34:14,199 --> 00:34:22,418
python3 in Windows particularly 3.5 and
coming 3.6 has gotten a lot better than

411
00:34:22,418 --> 00:34:26,348
you remember it as well you've ever
struggled with it you don't understand

412
00:34:26,349 --> 00:34:31,359
why you're fighting with it having so
many issues its commence move out quite

413
00:34:31,359 --> 00:34:34,389
a bit so that's another thing that you
might give a second try

414
00:34:34,389 --> 00:34:39,429
3.5 and 3.6 the installer works a lot
better you don't end up with some of the

415
00:34:39,429 --> 00:34:44,799
oddities that were introduced by it it's
just gotten a lot better a lot easier

416
00:34:44,799 --> 00:34:50,259
and I mean with all the the other
trouble that you have going on easier is

417
00:34:50,260 --> 00:34:57,039
better so after we've entered the
virtual environment we're probably going

418
00:34:57,039 --> 00:35:02,319
to have to keep track of dependencies
right and so you might be aware of hip

419
00:35:02,319 --> 00:35:09,850
and requirements . text hip is just the
package installer apt or yum or

420
00:35:09,850 --> 00:35:15,310
pack or any of those pip is Python
version of it and requirements . text is

421
00:35:15,310 --> 00:35:18,370
where you can store that list right

422
00:35:18,370 --> 00:35:22,420
the reason that I bring these up in
conjunction with virtualenv is the fact

423
00:35:22,420 --> 00:35:26,950
that hip and requirements . text can
then allow you to restate and up

424
00:35:26,950 --> 00:35:31,210
environment copies of the environment
exact same way every time

425
00:35:31,930 --> 00:35:35,470
and so as you go through this porting
you don't have to maintain the same one

426
00:35:35,470 --> 00:35:41,470
copy of between systems you can actually
stand in one of these up in fact in

427
00:35:41,470 --> 00:35:45,490
order to save your list if you've got a
pre-existing environment maybe you're

428
00:35:45,490 --> 00:35:49,569
starting from you know something in
production was already deployed if you

429
00:35:49,570 --> 00:35:55,330
run the command pip fries which can be
done as Python tack and pip fries or

430
00:35:55,330 --> 00:36:00,880
just straight forward like this and pipe
that out to require well i append that

431
00:36:00,880 --> 00:36:06,730
we write it redirected to requirements .
text you'll end up with a list and all

432
00:36:06,730 --> 00:36:10,840
the version numbers associated with it
in the requirements that text file and

433
00:36:10,840 --> 00:36:15,250
that means the next time that you need
to stand up another environment you can

434
00:36:15,250 --> 00:36:21,250
pass in via the attack our dash our
arguments that requirements . text and

435
00:36:21,250 --> 00:36:23,050
it will install everything for you

436
00:36:23,050 --> 00:36:26,830
so this is awesome if you're trying to
replicate something from production back

437
00:36:26,830 --> 00:36:31,330
to a development box or if you just need
multiple copies on your development box

438
00:36:31,330 --> 00:36:35,590
this is how you can keep track of it and
we stand up those environments very

439
00:36:35,590 --> 00:36:36,370
quickly

440
00:36:36,370 --> 00:36:44,500
also when you get done you're going to
deactivate now if you've got a bunch of

441
00:36:44,500 --> 00:36:48,610
shows you can just close the shell it'll
automatically deactivate again this is

442
00:36:48,610 --> 00:36:54,550
really just a set of folders right the
libraries and the executable copy into

443
00:36:54,550 --> 00:37:01,150
that set of folders that's all and so
going in and out of it is actually just

444
00:37:01,150 --> 00:37:06,640
rewriting your environment variables to
say hey when you type on deck C . this

445
00:37:06,640 --> 00:37:10,180
one instead of the one on your system
and this is how you can maintain

446
00:37:10,180 --> 00:37:14,620
multiple versions of Python right you
can actually set up a virtual

447
00:37:14,620 --> 00:37:22,450
environment that says okay well this
pipe on Maxie is 2.7 . n and this 13 and

448
00:37:22,450 --> 00:37:23,269
keep that set

449
00:37:23,269 --> 00:37:27,738
switch between them don't have to worry
about odd dependencies on your system

450
00:37:27,739 --> 00:37:31,909
because the dependencies will be
installed pit will put them into that

451
00:37:31,909 --> 00:37:37,099
virtual environments it is in to keep it
isolated so it's just a really good way

452
00:37:37,099 --> 00:37:42,709
of dealing with trying to port an
application like this or any other bits

453
00:37:42,709 --> 00:37:46,308
of code that you've got actually do this
a lot even for little scripts that I

454
00:37:46,309 --> 00:37:50,509
have that don't really have that many
dependencies but i just want a stable

455
00:37:50,509 --> 00:37:55,489
environment so that if i go and update
python on my machine it doesn't suddenly

456
00:37:55,489 --> 00:38:00,079
break the environment that script was
used to running in the last thing you

457
00:38:00,079 --> 00:38:03,109
need on a Friday right

458
00:38:03,109 --> 00:38:09,199
one final note about all this porting
stop right if you go through with this

459
00:38:09,199 --> 00:38:12,380
you're dealing with a lot of tools
you're going to be dealing with a lot of

460
00:38:12,380 --> 00:38:19,009
changes its adding another couple of
tools to the stack but pilot and

461
00:38:19,009 --> 00:38:24,649
whatever test framework you like if you
are a developer or no developer they

462
00:38:24,649 --> 00:38:30,049
probably got a favorite test framework
for python I violence is just a linter

463
00:38:30,049 --> 00:38:33,919
dealt with those at all before that can
be very useful as well especially

464
00:38:33,919 --> 00:38:37,638
dealing with some of the syntax
differences right it's quicker to see

465
00:38:37,639 --> 00:38:42,499
that from a pilot report then it is
necessarily to move through and just

466
00:38:42,499 --> 00:38:50,419
change everything with 23 constantly so
wrapping up a bit early unfortunately

467
00:38:50,419 --> 00:38:53,269
but that just means i have more time for
questions

468
00:38:53,269 --> 00:38:58,098
I wish everybody good luck with this
because this is a long arduous fight but

469
00:38:58,099 --> 00:39:00,949
we're going to keep going forward
because we only got three years left and

470
00:39:00,949 --> 00:39:01,849
that will kind of suck

471
00:39:01,849 --> 00:39:08,839
we don't do it right anybody have any
questions okay thanks for your time

