1
00:00:00,000 --> 00:00:13,769
pretty alright this is made for like a
five foot eight person which I'm not so

2
00:00:13,769 --> 00:00:16,890
i'm gonna assume that you guys are in
the you may need to be here since it's

3
00:00:16,890 --> 00:00:20,520
early in the everyone's probably dealing
with the after effects of last night

4
00:00:20,520 --> 00:00:24,720
right so our this is the talk on credit
card fraud tokenization and so the cool

5
00:00:24,720 --> 00:00:29,609
hacks and steaks and fun things we do
with it but first since I've actually

6
00:00:29,609 --> 00:00:32,279
never been live streaming on the
internet before my poor wife and kids

7
00:00:32,279 --> 00:00:36,120
are actually stuck in a hotel room going
to say hi to them real quick and then

8
00:00:36,120 --> 00:00:39,239
you can go back to Saturday morning
cartoons now it'll be boring for you

9
00:00:39,239 --> 00:00:40,290
right

10
00:00:40,290 --> 00:00:49,469
so anyway so uh my name's Tim unlike
hacker Jack Sparrow i am actually less

11
00:00:49,469 --> 00:00:52,829
famous than him so you probably have
heard of him and not me that's fine

12
00:00:52,829 --> 00:00:58,739
I've got 15 years experience in IT doing
defender builder breaker rolls currently

13
00:00:58,739 --> 00:01:03,180
the director of the red team at walmart
labs which is fortunate one you know the

14
00:01:03,180 --> 00:01:07,380
largest company in the world we have
obviously really cool big Network mind's

15
00:01:07,380 --> 00:01:12,360
eye peas and 20 countries where the
second largest e-commerce united states

16
00:01:12,360 --> 00:01:15,150
we've got millions of customers in our
stores and are in our web properties

17
00:01:15,150 --> 00:01:19,409
every single week which is very very fun
thing makes this kind of work security

18
00:01:19,409 --> 00:01:23,189
work much more enjoyable and invaluable
right if you're in credentials alphabet

19
00:01:23,189 --> 00:01:27,419
soup cds you wanna see my credit score
linkedin probably has it connected be

20
00:01:27,420 --> 00:01:33,750
there and let's get a couple disclaimers
out-of-the-way real fast so number one

21
00:01:33,750 --> 00:01:38,220
of the things we have to 97 slides 45
minutes so this is going to be like a

22
00:01:38,220 --> 00:01:42,630
saturday morning ADHD cartoon creo que
un keep you awake promise i love the

23
00:01:42,630 --> 00:01:47,100
scene probably Wonka accident any clause
that among friends so first disclaimer

24
00:01:47,100 --> 00:01:49,860
this presentation is my work right

25
00:01:49,860 --> 00:01:54,960
it's not my opinion and it's my opinion
on my employers been anyway all the

26
00:01:54,960 --> 00:01:59,908
examples that you see today are going to
be from actual real ecommerce

27
00:01:59,909 --> 00:02:03,840
applications from a variety of places
they're all sanitized and we'll tell you

28
00:02:03,840 --> 00:02:04,860
where they're from

29
00:02:04,860 --> 00:02:08,788
I shall be fixed now anyway all the ones
that I had anything to do with I've

30
00:02:08,788 --> 00:02:12,450
never been a pci qsa so if you came here
to figure out how to get certified

31
00:02:13,069 --> 00:02:17,689
he came the wrong spot I can't help you
with that so taking advice at your own

32
00:02:17,689 --> 00:02:18,379
risk

33
00:02:18,379 --> 00:02:22,879
don't run with scissors and let's call
that horse dead ok so today we're gonna

34
00:02:22,879 --> 00:02:25,670
be talking about a lot of stuff all
these different to actually see there's

35
00:02:25,670 --> 00:02:28,939
six different kinds of issues were
dealing with but first we're gonna start

36
00:02:28,939 --> 00:02:31,489
with some background info so that we're
all on the same page with terminology

37
00:02:31,489 --> 00:02:35,810
right so let's real quick just so I can
kind of tailor this a little bit you

38
00:02:35,810 --> 00:02:39,560
guys how many views are defenders your
corporate event rolls some sort

39
00:02:39,560 --> 00:02:44,030
okay good how many of you guys are
builders to build systems your software

40
00:02:44,030 --> 00:02:48,560
developers ok how many of you guys are
breakers pen testers red team

41
00:02:49,099 --> 00:02:51,948
ok that's good mix every other
presentation I've done it's been very

42
00:02:51,949 --> 00:02:55,699
much bias the first groups it's good to
see you nice even distribution there so

43
00:02:55,699 --> 00:02:59,569
how many guys use credit card
tokenization at work okay and then how

44
00:02:59,569 --> 00:03:02,510
many of you aren't even sure if you do
or not he'd maybe take credit cards and

45
00:03:02,510 --> 00:03:03,439
who knows right

46
00:03:03,439 --> 00:03:06,948
ok usually that category is actually the
biggest most number of hands it goes up

47
00:03:06,949 --> 00:03:12,799
and I don't know right so so some
background info so there's these two

48
00:03:12,799 --> 00:03:16,609
concepts are ready with a lot truncation
tokenization so let's define truncation

49
00:03:16,609 --> 00:03:20,359
first right so we have a credit card
numbers got 16 digits and basically

50
00:03:20,359 --> 00:03:23,780
truncation is taking the six digits
middle kind of blacking them out right

51
00:03:23,780 --> 00:03:28,939
and that's okay and what's interesting
about this if you dig into it the credit

52
00:03:28,939 --> 00:03:32,750
card numbers actually it's a formula
right there are an issue or a bank ID

53
00:03:32,750 --> 00:03:35,959
and account number and a check digit in
there so the first time I heard about

54
00:03:35,959 --> 00:03:39,859
truncation the first thing that came to
my head is you know how exactly how hard

55
00:03:39,859 --> 00:03:43,939
is it to get the missing digits and I'm
sorry if you want to grab a screenshot

56
00:03:43,939 --> 00:03:47,328
or picture of my slides my slides can go
so fast you're gonna get the next one

57
00:03:47,329 --> 00:03:53,810
probably my time your phone flashes i'll
post all these slides were done so you

58
00:03:53,810 --> 00:03:58,759
know how is it gets the missing digits
right so it's you know there's potential

59
00:03:58,759 --> 00:04:02,779
choices six characters right to the six
powers million right so its worst case

60
00:04:02,780 --> 00:04:09,139
million guesses right so on the average
case we know that's 500,000 right but it

61
00:04:09,139 --> 00:04:11,780
was really cool thing called the Luhn
algorithm the mod 10 real familiar with

62
00:04:11,780 --> 00:04:14,539
the credit cards have to comply with it
which basically means that last digits a

63
00:04:14,539 --> 00:04:18,108
check digit like we talked about right
so that check digit actually makes it 10

64
00:04:18,108 --> 00:04:23,419
to 15 our 400,000 guesses Norris case or
50,000 average but still a lot but it's

65
00:04:23,419 --> 00:04:27,020
very easy to reinforce Python code you
can get five seven ten seconds ago

66
00:04:27,020 --> 00:04:31,400
code execution time you can generate all
those in the middle and yet it's really

67
00:04:31,400 --> 00:04:34,818
funny to me because pci allows truncated
storage credit card numbers and we

68
00:04:34,819 --> 00:04:38,150
always like okay scratch my head why but
they've got this nice little warning in

69
00:04:38,150 --> 00:04:41,628
section 3 . for if you're into that go
check it out this is not a pci

70
00:04:41,629 --> 00:04:45,319
certification talks this is close to
compliancy type stuff i will say today

71
00:04:45,319 --> 00:04:50,090
so I work for later he ran into that
kind of thing so first off what is total

72
00:04:50,090 --> 00:04:53,539
station we know what truncation is
organization is really the simple

73
00:04:53,539 --> 00:04:56,479
concept that I'm gonna take actual
credit card number that's valuable and

74
00:04:56,479 --> 00:04:59,270
replace it with something that's not
valuable write a nonsensical

75
00:04:59,270 --> 00:05:08,539
organization are not nonsense of token
so we have hi folks I'm hip

76
00:05:08,539 --> 00:05:14,150
unfortunately no video problem so come
back about the eight-minute 67 mark you

77
00:05:14,150 --> 00:05:18,739
want to listen to audio in the meantime
here's we have so-called the video so

78
00:05:18,740 --> 00:05:21,740
putting convenience

79
00:08:06,480 --> 00:08:10,770
developer and in that scenario that
person would have access to your

80
00:08:10,770 --> 00:08:14,549
comments commerce apps database and then
all the data that's in it like the

81
00:08:14,550 --> 00:08:18,990
customer billing info the truncated
credit cards the tokens and then they'd

82
00:08:18,990 --> 00:08:21,900
have some knowledge of how the actual
tokenization architecture works as well

83
00:08:21,900 --> 00:08:28,859
so we're talking URLs web service API
eyes I access to the request log

84
00:08:28,860 --> 00:08:32,760
potentially and so that's why i defined
as this partial access to credit card

85
00:08:32,760 --> 00:08:35,520
but it turns out you know there's more
to it than that by the way I've never

86
00:08:35,520 --> 00:08:39,419
seen the movie shopaholic but i think
this 30-second thing that you see on the

87
00:08:39,419 --> 00:08:42,329
trailer that gives away probably the
entire movie is hilarious

88
00:08:42,330 --> 00:08:45,600
so we're going to refer to several times
to pull the credit card a block of ice

89
00:08:45,600 --> 00:08:51,150
right so anyway so thanks to doing red
teaming the last my current role is

90
00:08:51,150 --> 00:08:54,510
actually changed my mindset i realized i
had some bias on this right so it turns

91
00:08:54,510 --> 00:08:58,620
out that an attacker during a brief
scenario may very well have this partial

92
00:08:58,620 --> 00:09:02,310
access right whereas I couches before is
a malicious insider that decides he

93
00:09:02,310 --> 00:09:05,969
wants the game the system internally to
do harm this could very well be somebody

94
00:09:05,970 --> 00:09:09,240
that's doing something like this just
especially when we have a pci focus

95
00:09:09,240 --> 00:09:12,180
because we're all over time and
attention our money right in that nice

96
00:09:12,180 --> 00:09:15,989
little red square and then we're in the
world of the red team's into the breach

97
00:09:15,990 --> 00:09:18,210
actual adversaries like to go

98
00:09:18,210 --> 00:09:21,480
they like to go that blue square right
so the credit cards are read that

99
00:09:21,480 --> 00:09:24,510
partial access that we're talking about
is in this blue area where your controls

100
00:09:24,510 --> 00:09:28,110
aren't as strong right where you're
probably not looking as well as closely

101
00:09:28,110 --> 00:09:31,950
right so this really well could be
malicious insiders but is it's just as

102
00:09:31,950 --> 00:09:35,700
likely that it could be malicious or
choosing an actual adversary like in the

103
00:09:35,700 --> 00:09:37,110
final stages of reach

104
00:09:37,110 --> 00:09:40,560
alright so let's talk about the
best-case scenario right

105
00:09:40,560 --> 00:09:44,640
best-case scenario in this partial
access is the attacker has to numerate

106
00:09:44,640 --> 00:09:47,610
credit cards on that same level of
truncation right which we just talked

107
00:09:47,610 --> 00:09:51,240
about a minute ago that was 50,000
guesses on average right

108
00:09:51,240 --> 00:09:57,030
per card so that's a whole lot of this
right lot of hammering lot of fruit lot

109
00:09:57,030 --> 00:10:01,680
of noise it's it's not great an ideal
for an attacker especially considering

110
00:10:01,680 --> 00:10:05,339
that we talk about online validation
right so in the best case scenario if

111
00:10:05,340 --> 00:10:08,040
i'm going to generate a token i'm
actually gonna have to run a transaction

112
00:10:08,040 --> 00:10:11,579
and this is really common with web apps
right now and if you do it right for me

113
00:10:11,580 --> 00:10:14,070
to give you a credit card i'm gonna
probably have to go in to end all the

114
00:10:14,070 --> 00:10:17,940
way to a bank and back and so that when
that happens those live transactions

115
00:10:17,940 --> 00:10:18,930
against that credit card off

116
00:10:18,930 --> 00:10:22,500
service we now have a fraud detection
and we have throttling and we have all

117
00:10:22,500 --> 00:10:25,920
these things that come in there and and
basically saved the day right so at that

118
00:10:25,920 --> 00:10:32,579
point we're caught right so oh so let's
talk about the worst case and the

119
00:10:32,580 --> 00:10:35,339
worst-case scenario and the section
probably get true in both cases that the

120
00:10:35,339 --> 00:10:38,190
tokenization URLs internet-facing and
the reason why it's important to denote

121
00:10:38,190 --> 00:10:42,000
this it has to be internet-facing right
because we're talking about this

122
00:10:42,000 --> 00:10:45,180
scenario right the customer down here in
the bottom has to be able to talk up

123
00:10:45,180 --> 00:10:48,420
there to the payment server in that red
square because if they give the credit

124
00:10:48,420 --> 00:10:52,529
card to the blue square that means the
blue square right suddenly has pci

125
00:10:52,529 --> 00:10:55,860
cooties right because they touch that
credit card so again this theme we're

126
00:10:55,860 --> 00:10:59,130
going to see these dumb cooties from
Milton Bradley or whoever it was that

127
00:10:59,130 --> 00:11:03,660
dozen times a day so don't throw
tomatoes yet so anyway so the converse

128
00:11:03,660 --> 00:11:06,149
app in this worst-case scenario is going
to perform authentication authorization

129
00:11:06,149 --> 00:11:10,560
we know that we figured all that out top
10 lost got it right with the payment

130
00:11:10,560 --> 00:11:13,439
service actually doesn't in our
worst-case scenario and believe it or

131
00:11:13,440 --> 00:11:18,899
not this is typical let me explain you
know ask yourself why why would I mean

132
00:11:18,899 --> 00:11:22,260
you know we have authentication on our
app you have to login you create a

133
00:11:22,260 --> 00:11:24,870
shopping cart you have an account we do
all that stuff we evaluate your email

134
00:11:24,870 --> 00:11:29,160
address is real but it goes back to this
whole logical separation right so the

135
00:11:29,160 --> 00:11:33,600
payment service logically separating the
different pci DMZ right so here again we

136
00:11:33,600 --> 00:11:34,440
got this user

137
00:11:34,440 --> 00:11:38,610
he's got stored example.com he's at
payment example.com their separate right

138
00:11:38,610 --> 00:11:42,630
there probably in different TMZ's
there's no sharing of session state data

139
00:11:42,630 --> 00:11:46,620
because it you know again go back to the
pc activities thing so we have different

140
00:11:46,620 --> 00:11:50,130
dns domains you notice and so what
happens with different dns domains

141
00:11:50,130 --> 00:11:52,890
well you have to go out of your way to
make sure cookies go over there right

142
00:11:52,890 --> 00:11:56,430
because cookies will probably be set
specifically the hostname if you set to

143
00:11:56,430 --> 00:12:00,779
the parent rights just example.com in
this scenario then you're gonna start

144
00:12:00,779 --> 00:12:03,900
changing exchange data but you can't
actually validate the session because if

145
00:12:03,900 --> 00:12:07,800
you do you got pci cooties again right
so just this notion that you have to

146
00:12:07,800 --> 00:12:10,890
have this logical separation we've got
these three parties and they can only

147
00:12:10,890 --> 00:12:13,140
talk with certain really well defined
rules

148
00:12:13,140 --> 00:12:17,910
another really common thing is that for
an especially important for worst-case

149
00:12:17,910 --> 00:12:20,819
scenario is that there's no request
rolling or very very little request

150
00:12:20,820 --> 00:12:24,329
throttling on the payment service and
we're not this is actually typical as

151
00:12:24,329 --> 00:12:27,089
well because when we spend these
services up we don't teach these

152
00:12:27,089 --> 00:12:31,110
developers think this way and its really
really hard to identify abusers right

153
00:12:31,110 --> 00:12:31,490
will

154
00:12:31,490 --> 00:12:34,880
about that a little bit so kind of think
of this is like this design flaw

155
00:12:34,880 --> 00:12:41,540
zero-day right so let's get you an
example this is based on a real out live

156
00:12:41,540 --> 00:12:47,510
web application that existed at one time
so step one got a customer checking out

157
00:12:47,510 --> 00:12:51,589
they got a shopping cart throne store .
example.com then it comes time to

158
00:12:51,589 --> 00:12:55,190
actually place that that payment request
they're gonna send a payment request on

159
00:12:55,190 --> 00:12:59,149
over to payment example.com right and
when this happens there's a couple ways

160
00:12:59,149 --> 00:13:02,510
typically typically goes down you
probably have experienced both of you

161
00:13:02,510 --> 00:13:05,779
in fact whether you're paying attention
or not i'm sure you probably check out

162
00:13:05,779 --> 00:13:08,959
somewhere that does one or both of these
two scenarios you either get a brand new

163
00:13:08,959 --> 00:13:12,469
user interface that's hosted on a
third-party domain or a different domain

164
00:13:12,470 --> 00:13:15,950
you get redirected your browser over
here now make a payment and you see this

165
00:13:15,950 --> 00:13:20,029
a lot on low scale smaller mom-and-pop
online retailers because they don't want

166
00:13:20,029 --> 00:13:23,810
to host that that content and on the
big-scale sites that were brand and

167
00:13:23,810 --> 00:13:27,229
maintaining the same look at feels
important you'll have some JavaScript

168
00:13:27,230 --> 00:13:30,470
magic that happens in the browser that
grabs that token and since it on over

169
00:13:30,470 --> 00:13:33,680
and so you get a web request to look
something like this right we're gonna

170
00:13:33,680 --> 00:13:38,180
post out to the generate credit card
open API you have host there is the

171
00:13:38,180 --> 00:13:40,729
payment example.com so you see it's
going to payment service not going to

172
00:13:40,730 --> 00:13:44,240
the appserver other some session cookies
that were there we sniff them out for

173
00:13:44,240 --> 00:13:46,370
example there's a credit card number and
expiration date

174
00:13:46,370 --> 00:13:50,570
great so it's what we do as attackers
the very first thing we do when we see

175
00:13:50,570 --> 00:13:54,200
something like this is let's in that
same request again this time let's strip

176
00:13:54,200 --> 00:13:57,770
out the cookies and if there's any
authentication off headers or any other

177
00:13:57,770 --> 00:14:01,370
material any other unnecessary headers
let's pair that down to the bare minimum

178
00:14:01,370 --> 00:14:03,079
and let's just see what happens

179
00:14:03,079 --> 00:14:07,670
and believe it or not what actually
happens is more often than not easy to

180
00:14:07,670 --> 00:14:11,120
server will just give you 200 ok here's
your here's your token write your JSON

181
00:14:11,120 --> 00:14:15,770
payload payload their token there's no
access denied response some of the first

182
00:14:15,770 --> 00:14:17,270
time going through that going

183
00:14:17,270 --> 00:14:20,839
that's stupid right why did that happen
so even though there's no cookies in

184
00:14:20,839 --> 00:14:24,649
there the service i basically i get a
pan when I say pan that's pci speak for

185
00:14:24,649 --> 00:14:28,880
primary account number i gave you a
16-digit number and i get a tip talking

186
00:14:28,880 --> 00:14:29,300
back

187
00:14:29,300 --> 00:14:33,529
no cookies required so let's talk about
why so back to this whole different

188
00:14:33,529 --> 00:14:36,200
servers different main thing right so
we've got these two places there's no

189
00:14:36,200 --> 00:14:40,010
sharing of data because again pc cooties
again theme theme we're gonna get this

190
00:14:40,010 --> 00:14:40,550
in your head

191
00:14:40,550 --> 00:14:44,149
you're gonna like have this in paint you
know in great in your in your vision

192
00:14:44,149 --> 00:14:48,380
before we're not so attackers with this
partial access so here's the scenario

193
00:14:48,380 --> 00:14:51,500
how we can actually beat this right what
we're gonna do is we're going to compute

194
00:14:51,500 --> 00:14:57,050
all the possible pans and then what
we're going to do based on the truncated

195
00:14:57,050 --> 00:15:00,649
credit card numbers that we found
someplace right so where the insider or

196
00:15:00,649 --> 00:15:03,230
where the guy in the breach the final
stages of research we've got access to

197
00:15:03,230 --> 00:15:06,769
these truncated primary account numbers
right so we're going to compute all of

198
00:15:06,769 --> 00:15:11,149
them and then you know that's obviously
going about 50,000 the average case

199
00:15:11,149 --> 00:15:14,450
right so once we iterate through each
one of them were basically just going to

200
00:15:14,450 --> 00:15:20,000
submit each one anonymously because even
if we didn't you know even if it

201
00:15:20,000 --> 00:15:22,670
requires cookies or whatever we just
ripples apple just hammer that

202
00:15:22,670 --> 00:15:26,930
tokenization API you get bonus points by
the way if at this stage you decide

203
00:15:26,930 --> 00:15:29,750
you're going to just randomize this
we're gonna take this load and split

204
00:15:29,750 --> 00:15:33,410
among about net or just a bunch a bunch
of cloud hosting whatever you just find

205
00:15:33,410 --> 00:15:36,680
some way to distribute that low for
threading and for obvious station

206
00:15:36,680 --> 00:15:39,500
purposes right for what you're trying to
do and then basically gonna do is you're

207
00:15:39,500 --> 00:15:42,140
gonna just sit here in your little
responses back and when you get a

208
00:15:42,140 --> 00:15:45,949
response back that matches that token
that one with that truncated pan the

209
00:15:45,950 --> 00:15:49,610
truncated credit card number that was in
that commerce app then you went right so

210
00:15:49,610 --> 00:15:56,180
we we finally have this who got the
credit card out so throttling the

211
00:15:56,180 --> 00:16:00,229
payment server is difficult let's talk
about why before we hammer this rightly

212
00:16:00,230 --> 00:16:04,700
just know any cookies here and even
there were attacking throw away so we

213
00:16:04,700 --> 00:16:08,480
could try blocking my IP address but
1999 called and said what about natick

214
00:16:08,480 --> 00:16:11,149
customers right that's this really bad
idea

215
00:16:11,149 --> 00:16:14,810
and what if your adversary smart just as
I'm just gonna hide through a bunch of

216
00:16:14,810 --> 00:16:19,099
ip's right it's really hard to do it and
just think like this is the scenario of

217
00:16:19,100 --> 00:16:22,190
Bitcoin mining right we're going to just
distribute this load out and let them

218
00:16:22,190 --> 00:16:25,940
all just kind of make requests randomly
and just we just need to slow cook the

219
00:16:25,940 --> 00:16:29,329
payment server and we can get past this
scenario so how do we solve this

220
00:16:29,329 --> 00:16:33,560
so what we really need to do is we talk
about authentication handoffs across the

221
00:16:33,560 --> 00:16:39,079
main down boundaries or as we said back
in $MONTH 2004 2003 federated

222
00:16:39,079 --> 00:16:42,380
authentication right this is not really
a new idea but for some reason we don't

223
00:16:42,380 --> 00:16:47,630
see this no one thinks to apply this to
payment systems right so so here's kind

224
00:16:47,630 --> 00:16:50,329
of looking at same kind of example
before but let's just suppose this time

225
00:16:50,329 --> 00:16:52,229
we have a little off token that went
with it

226
00:16:52,230 --> 00:16:57,120
and keep in mind off tokens be generated
by the Commerce app server and also

227
00:16:57,120 --> 00:17:00,690
don't implement in JavaScript why
because obviously attackers can just

228
00:17:00,690 --> 00:17:04,110
unravel that logic whatever it is that
generates that token and they're back

229
00:17:04,109 --> 00:17:08,639
we're back to the same scenario so my
eyes will not do that for some reason we

230
00:17:08,640 --> 00:17:11,730
still have to tell developers don't do
in javascript so no for everyone don't

231
00:17:11,730 --> 00:17:15,660
do in javascript right so and this is
similar to in the early days of

232
00:17:15,660 --> 00:17:19,770
tokenization you see some of the
Commerce the commercial payment gateways

233
00:17:19,770 --> 00:17:23,490
would actually do things like this where
they would do what they do sine H max

234
00:17:23,490 --> 00:17:27,450
right and they would sign the data
elements right so that's that's the

235
00:17:27,450 --> 00:17:30,390
solution that's really really not hard
solution and really not a really hard

236
00:17:30,390 --> 00:17:32,730
problem of the other day but for some
reason still kind of a problem problem

237
00:17:32,730 --> 00:17:37,470
so let's look at the second set of
attacks and these are side channels

238
00:17:37,470 --> 00:17:40,380
right side channels are some of my
favorite variety of attacks because

239
00:17:40,380 --> 00:17:43,560
they're pretty clever right if you're
not familiar sight with side channels

240
00:17:43,560 --> 00:17:47,580
are it's basically an unattended channel
information flow so our goal with the

241
00:17:47,580 --> 00:17:52,439
site and a channel attack is defined
basically a one or a zero in the noise

242
00:17:52,440 --> 00:17:57,390
right so for those of you with a copy or
an ee background we're talking about

243
00:17:57,390 --> 00:18:01,350
Shannon's law and for those either don't
know who shannon is if you're really

244
00:18:01,350 --> 00:18:03,810
bored and need some extra credit
homework or whatever there you go could

245
00:18:03,810 --> 00:18:07,830
take that up with Peters guidance an
article so we're talking about that

246
00:18:07,830 --> 00:18:11,669
right so first step we're going to some
timing attacks awesome hammer time but

247
00:18:11,670 --> 00:18:14,790
you know this again i know that this is
the 9am slot and I need to wake you guys

248
00:18:14,790 --> 00:18:15,659
up

249
00:18:15,660 --> 00:18:20,880
so timing attacks turn out to be very
very difficult to prevent right so

250
00:18:20,880 --> 00:18:25,500
because we will teach developers to
think about them so for the the

251
00:18:25,500 --> 00:18:28,500
inspiration for this particular attack
we want to draw back on this last

252
00:18:28,500 --> 00:18:33,270
example right where we have partial
access to truncate pans and we also want

253
00:18:33,270 --> 00:18:36,090
think about maybe in this scenario where
we have like an account takeover an

254
00:18:36,090 --> 00:18:39,720
attacker can view and online customers
account and kind of you there save

255
00:18:39,720 --> 00:18:43,170
credit cards right and so the trick
we're going to do here is we're

256
00:18:43,170 --> 00:18:48,090
basically going to create a batch of
primary account numbers we're just gonna

257
00:18:48,090 --> 00:18:52,290
generate random ones right we're gonna
submit them all to the server and then

258
00:18:52,290 --> 00:18:57,240
we're going to record you put stopwatch
on it meter it how long it take either

259
00:18:57,240 --> 00:18:59,910
gonna take that same exact match and
we're gonna throw it straight back

260
00:18:59,910 --> 00:19:03,450
through a second time and measure it a
second time and then what happens we've

261
00:19:03,450 --> 00:19:04,169
got some kind of

262
00:19:04,169 --> 00:19:07,590
a predictable Delta in response times so
it looks something like this you got

263
00:19:07,590 --> 00:19:10,889
this nice table here is probably hard to
see but basically we had a bunch of

264
00:19:10,889 --> 00:19:13,590
credit card numbers that we throw
through there we have response times all

265
00:19:13,590 --> 00:19:16,168
the way through yet miss miss miss miss
miss because they're all hanging around

266
00:19:16,169 --> 00:19:19,710
280 milliseconds or so and then
eventually we get one that's down around

267
00:19:19,710 --> 00:19:23,970
a hundred and twenty milliseconds or
whatever and that's like you know II 12c

268
00:19:23,970 --> 00:19:26,879
for whatever okay you sunk my battleship
right this is basically what we're doing

269
00:19:26,879 --> 00:19:31,168
is we're playing battleship with the
tokenization server so in that

270
00:19:31,169 --> 00:19:35,460
particular scenario up a previously
tokenize pan so in other words a credit

271
00:19:35,460 --> 00:19:37,409
card that the payment server seen before

272
00:19:37,409 --> 00:19:41,429
took about half as long and this is
Barry's it's based on the actual

273
00:19:41,429 --> 00:19:45,179
implementation I've seen scenarios with
the reverse right where is open has been

274
00:19:45,179 --> 00:19:48,149
a critic has been seen by the
organization server actually takes

275
00:19:48,149 --> 00:19:48,959
longer

276
00:19:48,960 --> 00:19:52,679
so the point is we need to find that
Delta we need to find that signal

277
00:19:52,679 --> 00:19:55,919
doesn't matter which direction so in
this particular example I have some

278
00:19:55,919 --> 00:20:01,080
mocked-up little pseudocode here take a
look at that for a second does anyone

279
00:20:01,080 --> 00:20:02,699
see the flaw

280
00:20:02,700 --> 00:20:07,350
did you catch it as I don't throw
through code at you really fast like 915

281
00:20:07,350 --> 00:20:07,799
more

282
00:20:07,799 --> 00:20:13,289
yeah whatever so new to New tokens
actually at the base twice let's go back

283
00:20:13,289 --> 00:20:17,460
to look that one more time right so this
particular case we doing a shot to be 26

284
00:20:17,460 --> 00:20:20,730
/ pay no attention to factors assume
that little pseudocode is actually

285
00:20:20,730 --> 00:20:23,820
solving that hash right we're doing
something to generate some kind of token

286
00:20:23,820 --> 00:20:27,239
and basically we're going to say hey
database have you seen this token before

287
00:20:27,239 --> 00:20:31,200
and the results are our yeah I've got
one I got a hit

288
00:20:31,200 --> 00:20:33,929
basic I'm just gonna return that so I
hit the database once if I've seen it

289
00:20:33,929 --> 00:20:37,830
before and I'm out if its a 1 i've never
seen before i'm going to generate that

290
00:20:37,830 --> 00:20:41,189
token and I'm gonna go insert in the
credit card table right so what happened

291
00:20:41,190 --> 00:20:45,690
I had the database second time right so
those two sets of io IO is much much

292
00:20:45,690 --> 00:20:51,149
slower than computations in memory right
so in that particular case if we got a

293
00:20:51,149 --> 00:20:53,488
response time roughly about her
milliseconds when you got the actual

294
00:20:53,489 --> 00:20:56,639
credit card so just something to keep in
mind

295
00:20:56,639 --> 00:21:00,899
by the way the solution of this does
anyone have an idea how the best way to

296
00:21:00,899 --> 00:21:01,768
solve this

297
00:21:01,769 --> 00:21:04,190
this is really hard

298
00:21:04,190 --> 00:21:10,159
yeah that's one thing i like to say
people i'll just say developers get the

299
00:21:10,159 --> 00:21:12,769
database second time somebody's are not
a fan of that right because there's

300
00:21:12,769 --> 00:21:13,730
locks

301
00:21:13,730 --> 00:21:16,519
I don't know of a better way to do it so
some some people like to go insert

302
00:21:16,519 --> 00:21:17,659
random sleeps

303
00:21:17,659 --> 00:21:24,830
yeah yeah exactly so you could do you
can insert a random sleep in here and I

304
00:21:24,830 --> 00:21:27,350
my previous iteration my slide deck
actually had this covered for some

305
00:21:27,350 --> 00:21:31,250
reason i omitted this part some free
weekend here but so basically the the

306
00:21:31,250 --> 00:21:33,919
the what you can do is you can sleep a
random amount of time the problem with

307
00:21:33,919 --> 00:21:37,009
that is if you have piqued business
times a year let's say you're really

308
00:21:37,009 --> 00:21:42,470
busy during christmas holiday and maybe
your average response times increase by

309
00:21:42,470 --> 00:21:46,190
a hundred 200 300 milliseconds just
because load this in your environment if

310
00:21:46,190 --> 00:21:49,580
you slept for a hard-coded fifty or a
hundred 50 milliseconds or whatever that

311
00:21:49,580 --> 00:21:50,360
is

312
00:21:50,360 --> 00:21:53,209
then you're still going to have that
tell right so that's why i'm a big fan

313
00:21:53,210 --> 00:21:56,269
going in the database second time but
you need to make sure that your dbas

314
00:21:56,269 --> 00:21:58,940
don't have some really cool caching
stuff going on there where it says a

315
00:21:58,940 --> 00:22:02,659
query like right before his results set
and give you a real fast response

316
00:22:02,659 --> 00:22:05,750
because otherwise you're all the same
problem it's hard right it's a really

317
00:22:05,750 --> 00:22:07,009
hard problem solved

318
00:22:07,009 --> 00:22:11,659
so second side channel we're talking
about this i like to call these my

319
00:22:11,659 --> 00:22:15,379
profile attacks right so this is the
idea that attacker basically gets a

320
00:22:15,379 --> 00:22:19,850
customer session cookies or credentials
we commonly refer to this is account

321
00:22:19,850 --> 00:22:24,500
takeover scenarios right so the yahoo
data dump it just happened or yahoo

322
00:22:24,500 --> 00:22:27,230
briefly just happen we'll probably a
data dump from that will be credited out

323
00:22:27,230 --> 00:22:30,259
there people will try to see those creds
we use that's a real common way to

324
00:22:30,259 --> 00:22:33,529
account takeovers writes another talk
entirely but if that happens an attacker

325
00:22:33,529 --> 00:22:36,379
gets in there basically what the
attacker wants to do is go to my profile

326
00:22:36,379 --> 00:22:40,340
page and say what truncated credit card
numbers what truncated pans are there in

327
00:22:40,340 --> 00:22:44,840
the same credit card page or the list
right and so at this point when we bring

328
00:22:44,840 --> 00:22:48,830
this up my experience with developers
has been but but our commerce app

329
00:22:48,830 --> 00:22:53,418
doesn't even have credit card data we
just have tokens right so the Apple

330
00:22:53,419 --> 00:22:57,710
isn't that nice little blue square and
the credit cards live in red which I say

331
00:22:57,710 --> 00:23:03,860
okay but this is actually a real problem
is still affects a lot of apps today I

332
00:23:03,860 --> 00:23:06,080
won't name any but there are apps that
you can actually go out that you

333
00:23:06,080 --> 00:23:08,990
probably shop that you probably have
profiles built on right now that you can

334
00:23:08,990 --> 00:23:12,980
actually go do this too so the idea is
basically hate same idea i'm going to go

335
00:23:12,980 --> 00:23:17,580
submit a possible pan I've got that
truncated number right i'm gonna guess

336
00:23:17,580 --> 00:23:22,110
what the rest of the digits are going to
submit make sure you use the same

337
00:23:22,110 --> 00:23:24,300
building at information that's on the
profile because this is a lot of times

338
00:23:24,300 --> 00:23:27,840
how they tie in the uniqueness right if
you put in some different street address

339
00:23:27,840 --> 00:23:30,480
right it's probably not view that as a
different payment method but if you

340
00:23:30,480 --> 00:23:34,380
submit and basically try to get a
collision here right so and then we're

341
00:23:34,380 --> 00:23:37,410
done after we submit we want to see
basically count how many safe payment

342
00:23:37,410 --> 00:23:39,150
profiles are there now right

343
00:23:39,150 --> 00:23:42,870
so if the count of safe about payment
methods on the profile one up I want

344
00:23:42,870 --> 00:23:45,899
that means we missed right back to the
hole 12

345
00:23:45,900 --> 00:23:49,500
miss you didn't even sink my battleship
concept right so if you're automating

346
00:23:49,500 --> 00:23:52,860
this bonus points for going in there
deleting that previous one so there's

347
00:23:52,860 --> 00:23:56,879
three you know you take over an account
and you submit a pan that pop matches

348
00:23:56,880 --> 00:24:00,960
one of them and it turns out and I got
four make sure your script is smart to

349
00:24:00,960 --> 00:24:03,390
go back there to eat that fourth one you
just submitted and just keep going

350
00:24:03,390 --> 00:24:06,330
through this thing until eventually you
submit a request and you have three

351
00:24:06,330 --> 00:24:10,139
before and you three after right so if
the count is the same we're back to this

352
00:24:10,140 --> 00:24:15,090
sunk my battleship and again all were
doing here is we're forcing the service

353
00:24:15,090 --> 00:24:20,340
provider boolean logic response right so
another note on this writes a lot of

354
00:24:20,340 --> 00:24:23,850
places that give you the car type will
give you an actual truncated card number

355
00:24:23,850 --> 00:24:26,760
in the sense of that they just block out
the middle sticks lot of times we'll

356
00:24:26,760 --> 00:24:30,240
give you the last four digits the
expiration month and year and doesn't

357
00:24:30,240 --> 00:24:34,350
give you the card types of the state's
visa ok just means it's more than 50,000

358
00:24:34,350 --> 00:24:38,250
guesses right because I you know
obviously don't have always those just

359
00:24:38,250 --> 00:24:41,610
beginning but with I know it's a visa
and I know the United States I already

360
00:24:41,610 --> 00:24:45,300
know a good deal of information about
those first four to six digits right so

361
00:24:45,300 --> 00:24:48,180
I can kind of figure that out based on
rules that the industry follows the

362
00:24:48,180 --> 00:24:52,500
banking industry falls right so it's
still possible and so actually this is

363
00:24:52,500 --> 00:24:56,490
where we need jim carrey gone you're
telling me there's a chance right so how

364
00:24:56,490 --> 00:25:01,200
do we solve this right basically a
solution that we always recommend is

365
00:25:01,200 --> 00:25:04,740
always add a new payment method right it
doesn't matter that the billing address

366
00:25:04,740 --> 00:25:08,130
matches or even that the primary
calendar actual credit card number

367
00:25:08,130 --> 00:25:12,990
matches some previous thing in here just
go ahead and add another one right and

368
00:25:12,990 --> 00:25:16,500
this often has this logic usually lives
on the tokenization server right because

369
00:25:16,500 --> 00:25:20,490
think again going back to the whole pci
cooties thing the app servers not going

370
00:25:20,490 --> 00:25:23,340
to actually see that credit card numbers
so we're seeing this off over there so

371
00:25:23,340 --> 00:25:25,889
the people handle the actual payment
they're the ones that needed to actually

372
00:25:25,890 --> 00:25:27,290
generate this right

373
00:25:27,290 --> 00:25:31,040
and you're going to have this uphill
battle with them tell tell them

374
00:25:31,670 --> 00:25:35,510
can I talk and say it's okay we don't
have to be efficient with our token

375
00:25:35,510 --> 00:25:36,620
records right

376
00:25:36,620 --> 00:25:40,669
it's ok to add yet another blind to the
database right because when we added a

377
00:25:40,670 --> 00:25:44,540
row that just means we're not getting
rid of our are not developed divulging

378
00:25:44,540 --> 00:25:52,250
our customers credit cards right so next
I channel helpful headers if you have a

379
00:25:52,250 --> 00:25:57,020
restful service geek in your
organization you'll relate to this is

380
00:25:57,020 --> 00:26:00,980
anyone have a restful service geek he
has no one to have any that were willing

381
00:26:00,980 --> 00:26:05,960
to admit that they are one you'll see ok
so restful service keeps leather status

382
00:26:05,960 --> 00:26:08,960
codes those people that will argue with
you about

383
00:26:09,470 --> 00:26:12,110
well that's not technically restful
because you don't always you always

384
00:26:12,110 --> 00:26:16,070
return 200 ok well that's not really
restful because you do some weird little

385
00:26:16,070 --> 00:26:19,250
nuance thing it doesn't matter that you
got JSON and that you're using HTTP

386
00:26:19,250 --> 00:26:22,370
verbs but maybe you're not using all of
the verbs stuff like that Israelis these

387
00:26:22,370 --> 00:26:24,260
guys and talk about right

388
00:26:24,260 --> 00:26:27,740
they love their status codes they love
things like this and obviously there's

389
00:26:27,740 --> 00:26:31,670
this is not an exhaustive list their way
more status codes than I ever normally

390
00:26:31,670 --> 00:26:35,270
ever see that you guys probably ever
seen but the ones are up here

391
00:26:35,270 --> 00:26:40,340
interesting right so what if you have an
API to generate a credit card token and

392
00:26:40,340 --> 00:26:42,500
you get a request back that looks like
this

393
00:26:42,500 --> 00:26:50,210
201 created instead of 200 ok right you
submit a different pan request you know

394
00:26:50,210 --> 00:26:54,710
two different quest one comes back to a
1-1 comes back 200 basically the status

395
00:26:54,710 --> 00:26:57,530
code is indicated whether or not the
payments were seen at that credit card

396
00:26:57,530 --> 00:27:04,820
before not right so as an attacker we
like that so to all 21 created that

397
00:27:04,820 --> 00:27:07,669
means hey the database server or the
payment service never seen is forced on

398
00:27:07,670 --> 00:27:11,810
the database it's a brand new token
right brand new credit card tuner ok

399
00:27:11,810 --> 00:27:18,590
means I've found it right so we get the
bingo out of home alone 2 so anyway so

400
00:27:18,590 --> 00:27:22,250
let's bring on to the next tokenization
attack this is totally different from

401
00:27:22,250 --> 00:27:28,310
the side channels it's replaying tokens
so is if you guys remember so like one

402
00:27:28,310 --> 00:27:32,330
of the important things here with
organization is that we have a token

403
00:27:32,330 --> 00:27:35,540
that is a circuit card for a very
specific credit card right

404
00:27:35,540 --> 00:27:38,899
I can't have a token that's good for
your card and my card and someone else's

405
00:27:38,900 --> 00:27:39,970
card that obviously what

406
00:27:39,970 --> 00:27:43,750
and it also has to be good without a
specific merchant you can't go to

407
00:27:43,750 --> 00:27:48,340
merchant one with my token from merchant
to and place the transaction that's

408
00:27:48,340 --> 00:27:51,550
kinda whole idea payment gateways the
ones that pioneered this so that's that

409
00:27:51,550 --> 00:27:54,639
was their idea right so like it's a
credit card that basically if you get

410
00:27:54,640 --> 00:27:57,730
breached all the other customer
transactions are safe that was the whole

411
00:27:57,730 --> 00:28:02,710
notion right so let's talk about a
different trick so we have an account

412
00:28:02,710 --> 00:28:07,690
takeover scenario again where we've got
access to that person's profile right we

413
00:28:07,690 --> 00:28:12,940
observed the token in the profile and
then we want to actually apply the token

414
00:28:12,940 --> 00:28:17,020
to a different customer account within
that merchant right so this obviously

415
00:28:17,020 --> 00:28:20,650
should always fail but for some reason
sometimes it doesn't

416
00:28:20,650 --> 00:28:25,900
ok so basically what we're doing there
is we're stealing a token inside the

417
00:28:25,900 --> 00:28:28,930
same merchants so inside the tokenize
merchant I'm taking it from customer a

418
00:28:28,930 --> 00:28:33,490
applying it to customer be there needs
to be this notion of our this property

419
00:28:33,490 --> 00:28:37,060
of uniqueness and ownership of that
token okay that's great

420
00:28:37,630 --> 00:28:41,200
most people figure this out and get that
right but this next part is a little

421
00:28:41,200 --> 00:28:47,350
hazy right so second trick same customer
but a different app context within the

422
00:28:47,350 --> 00:28:52,120
same merchant okay so take over the
account on the web we take that token

423
00:28:52,120 --> 00:28:55,780
from the web and we apply it to say a
mobile app or reply to another merchant

424
00:28:55,780 --> 00:29:00,460
app so maybe you're really really big
online retailer and you've got 4 5 10 20

425
00:29:00,460 --> 00:29:05,770
hundred online presence properties right
and you have one because again we like

426
00:29:05,770 --> 00:29:09,220
to be efficient right so we have one
tokenization payment server that

427
00:29:09,220 --> 00:29:15,340
supports all of those so if I steal a
token from app one can i go over here to

428
00:29:15,340 --> 00:29:19,570
app to and apply it and just put john
doe's where my victim's name and billing

429
00:29:19,570 --> 00:29:22,330
address in their place transaction
that's obviously a fail that's a problem

430
00:29:22,330 --> 00:29:23,560
right

431
00:29:23,560 --> 00:29:27,040
so same thing with if your
brick-and-mortar transactions and

432
00:29:27,040 --> 00:29:31,360
linking mobile apps to 1500 retail at
converting those spaces these are

433
00:29:31,360 --> 00:29:34,600
actually you know obviously this is a
hot topic these days right

434
00:29:34,600 --> 00:29:38,230
so if you can take a token from the
online presence and apply it to the

435
00:29:38,230 --> 00:29:42,040
mobile app and then go into a store and
buy something you're stealing from that

436
00:29:42,040 --> 00:29:43,930
customer right that's obviously a big
problem

437
00:29:43,930 --> 00:29:48,010
so not only token so unique to a
customer but they need to be you need to

438
00:29:48,010 --> 00:29:52,810
a context so don't reuse a cut it open
again it's okay to grow the database

439
00:29:52,810 --> 00:29:56,470
this is a good thing this is what tokens
are for so tell your DBA so developers

440
00:29:56,470 --> 00:30:02,320
is ok we can have a little blow because
that blows our safety net right so at

441
00:30:02,320 --> 00:30:05,080
the end of the day we know that
obviously solutions we talkin

442
00:30:05,080 --> 00:30:08,919
mirchifun.com shouldn't work emergen
2.com we know that because obviously

443
00:30:08,920 --> 00:30:12,310
payment processors are going to reuse
the tokens among merchants at the same

444
00:30:12,310 --> 00:30:17,560
time tokens from app one . merchant com
should not work on app too . merchant

445
00:30:17,560 --> 00:30:22,000
calm right so and this goes back to what
I said the beginning of this talk so if

446
00:30:22,000 --> 00:30:26,110
you are a large-scale retailer and
you're doing something like this you

447
00:30:26,110 --> 00:30:30,100
basically are a payment processor you're
just doing your DIY self-hosted payment

448
00:30:30,100 --> 00:30:33,159
processor so payment processor wouldn't
do this for their their merchant

449
00:30:33,160 --> 00:30:37,810
customers so you shouldn't do it for
your internal web ecommerce property

450
00:30:37,810 --> 00:30:44,500
customers right so attacker for i like
to call use careless tokenization bugs

451
00:30:44,500 --> 00:30:50,800
so I've been on engagements for where I
the browser which in my case house a

452
00:30:50,800 --> 00:30:54,970
simulated customers suddenly sent the
actual pan to the commerce server you

453
00:30:54,970 --> 00:30:55,330
know

454
00:30:55,330 --> 00:30:58,750
ok that's back to that could be saying
why in the world that I just seen burp

455
00:30:58,750 --> 00:31:01,690
or wherever I whatever tools using why
you see the credit card number just

456
00:31:01,690 --> 00:31:06,130
going to the to the to the wrong spot
right so how can that happen so let's

457
00:31:06,130 --> 00:31:10,360
talk about a couple things one common
thing that we see a lot is JavaScript

458
00:31:10,360 --> 00:31:11,050
box

459
00:31:11,050 --> 00:31:15,700
another way is misunderstood widgets in
the big pile of code right we got all

460
00:31:15,700 --> 00:31:18,790
these libraries are wrapping all this
stuff together and we understand how all

461
00:31:18,790 --> 00:31:22,960
the pieces work together so what ends up
happening is these logic edge cases kind

462
00:31:22,960 --> 00:31:26,200
of tend to emerge and maybe the edge
cases are testing and QA because they're

463
00:31:26,200 --> 00:31:30,580
kinda weird you know and if you're you
know a good pentester really likes fault

464
00:31:30,580 --> 00:31:34,689
guessing with these edge cases are and
and like trying to fuzz and just see

465
00:31:34,690 --> 00:31:39,160
them and so we tend to find them i'm
gonna pick on asp.net webforms because

466
00:31:39,160 --> 00:31:41,560
I've written more than my share of that
code and that mean that language

467
00:31:41,560 --> 00:31:47,740
platform you guys r dot aspx pages in
your environment one things that I

468
00:31:47,740 --> 00:31:51,160
asp.net web forms are notorious for is
that they had this you know they're

469
00:31:51,160 --> 00:31:54,070
built before the whole web two point
thing and they try to make things a jack

470
00:31:54,070 --> 00:31:58,270
c and did these partial page updates to
try to like make it fresh and not do

471
00:31:58,270 --> 00:32:01,270
full page loads on every every
transaction one of the really cool

472
00:32:01,270 --> 00:32:04,110
properties about that is it sends
everything in the form

473
00:32:04,110 --> 00:32:09,899
so I think why is that bad because here
let's look at an example so i was

474
00:32:09,900 --> 00:32:14,520
looking at a particular ecommerce app
and e-commerce have had a address

475
00:32:14,520 --> 00:32:19,320
verification control in asp.net guys
remember the term controls your ever

476
00:32:19,320 --> 00:32:20,520
spent time there

477
00:32:20,520 --> 00:32:24,240
there's basically control validator that
said hey is this a legitimate address

478
00:32:24,240 --> 00:32:27,570
let's go out and check with a post
office or whatever to see this is legit

479
00:32:27,570 --> 00:32:33,000
address on the building page wallet
credit card number was in the text field

480
00:32:33,000 --> 00:32:36,600
for the credit cards right so what ends
up happening is when that validator

481
00:32:36,600 --> 00:32:37,350
fires

482
00:32:37,350 --> 00:32:40,889
yeah the server the logic on the server
side isn't touching that data because

483
00:32:40,890 --> 00:32:44,010
it's not looking for it because I just
didn't code it doesn't mean that it

484
00:32:44,010 --> 00:32:47,669
actually isn't going to the server right
and so in this particular case card

485
00:32:47,669 --> 00:32:50,790
number and security code number actually
went on over there was like oops

486
00:32:51,360 --> 00:32:55,678
right thats that's a big problem right
so it goes back to turning this nice

487
00:32:55,679 --> 00:33:00,030
little thing into this again right so
we've got pci cooties all over again

488
00:33:00,030 --> 00:33:06,928
so if you know any uh . developers that
like NBC you'll feel the love this joker

489
00:33:06,929 --> 00:33:09,570
maybe one we've got some of the room
that I've seen this t-shirt floating

490
00:33:09,570 --> 00:33:13,139
around so friends don't let friends do
post back in other words don't use these

491
00:33:13,140 --> 00:33:16,290
things that do these weird stuff that
you don't have to really understand all

492
00:33:16,290 --> 00:33:21,418
the layers so that's one example another
example that we came across was an app

493
00:33:21,419 --> 00:33:25,650
that was listening to a donkey press
event in JavaScript the intent behind

494
00:33:25,650 --> 00:33:28,559
this and I'm still scratching my head of
the day really with your why he tried to

495
00:33:28,559 --> 00:33:31,678
do it this way but they were basically
trying to determine the key that card

496
00:33:31,679 --> 00:33:35,940
type of credit card time as you typed
right you've probably seen I'm this is a

497
00:33:35,940 --> 00:33:40,470
thing that I'm kind of picky kind of
almost a big it over now if I see a

498
00:33:40,470 --> 00:33:44,490
transaction page on an e-commerce app
and it requires me to get that will drop

499
00:33:44,490 --> 00:33:47,970
down and select these mastercards like
dude guys are giving your card number

500
00:33:47,970 --> 00:33:50,490
you're smart enough to figure that out
on the backend yeah I should never have

501
00:33:50,490 --> 00:33:53,250
to do that but these these guys are like
you're right you shouldn't have to

502
00:33:53,250 --> 00:33:56,100
figure that out so we'll write some
JavaScript code that goes and figures it

503
00:33:56,100 --> 00:33:58,020
out for you as you type the number

504
00:33:58,020 --> 00:34:01,770
ok there's a problem with that

505
00:34:01,770 --> 00:34:05,639
here's the transactions look like so
there's post over this let's say that's

506
00:34:05,640 --> 00:34:08,760
the credit card type API some JSON here
we go

507
00:34:08,760 --> 00:34:15,780
some number but the problem is the logic
that stopped it wasn't firing for some

508
00:34:15,780 --> 00:34:17,210
dumb reason like there was a bug

509
00:34:17,210 --> 00:34:21,440
you know again do not roll your own
organization is really really hard right

510
00:34:21,440 --> 00:34:29,810
so we got 441 41411 and just kept going
and eventually I had it all

511
00:34:29,810 --> 00:34:32,570
it was to set the whole thing on every
time i typed in the next number that

512
00:34:32,570 --> 00:34:37,040
credit card number it just would fire
another json post over this API and get

513
00:34:37,040 --> 00:34:39,770
back i don't know what the car type is
yet another car loan now get up digital

514
00:34:39,770 --> 00:34:40,429
visa

515
00:34:40,429 --> 00:34:43,730
hey it's a visa it's still a visa hey I
got the whole number thank you very much

516
00:34:43,730 --> 00:34:46,790
the visa I'm now shopping over here
without visa right that's the whole life

517
00:34:46,790 --> 00:34:55,609
you know like pci cuties right so
another example I see this a lot because

518
00:34:55,609 --> 00:34:58,310
you know that we're doing some this is a
bunch of trickery right with javascript

519
00:34:58,310 --> 00:35:04,520
so so the app server presents that that
checkout form it's got the name and

520
00:35:04,520 --> 00:35:07,490
address and the field and therefore the
credit card number and all that stuff

521
00:35:07,490 --> 00:35:11,330
right there and it's just kind of
generic form tab with no action to find

522
00:35:11,330 --> 00:35:12,049
on it

523
00:35:12,050 --> 00:35:17,630
anybody know what happens when there
when you have a form tag no action they

524
00:35:17,630 --> 00:35:21,290
post back to the same page unless you
tell it to do something else is going to

525
00:35:21,290 --> 00:35:22,490
go back to the app server

526
00:35:22,490 --> 00:35:25,790
well the whole idea was this neat little
JavaScript library that I pulled in from

527
00:35:25,790 --> 00:35:29,029
my tokenization provider because again
like this is the whole life notion of

528
00:35:29,030 --> 00:35:31,460
separation of duties I've got the
developers building the e-commerce

529
00:35:31,460 --> 00:35:34,160
application developer building the
payment server the developers over here

530
00:35:34,160 --> 00:35:36,440
by the payment service said here's a
nice little JavaScript library you can

531
00:35:36,440 --> 00:35:37,339
bring into your app

532
00:35:37,339 --> 00:35:40,339
well for one reason or another that
javascript file to load or execute it

533
00:35:40,339 --> 00:35:42,859
could've been because cash to contain
the server was down

534
00:35:42,859 --> 00:35:46,730
something weird happened just so
happened that while i was testing it if

535
00:35:46,730 --> 00:35:48,530
they held a nice

536
00:35:48,530 --> 00:35:51,950
oh that's really weird not only did I
not fail to check out right because it's

537
00:35:51,950 --> 00:35:54,680
going back to the the server that's not
expecting that to be the next step in

538
00:35:54,680 --> 00:36:00,259
the workflow and syd hoopes air but that
pan went across the wire over there to

539
00:36:00,260 --> 00:36:04,369
the common servants to the payment sir
we got another hoops right and more pci

540
00:36:04,369 --> 00:36:13,310
cuties so attacker five offensive DevOps
we all love DevOps so if you have

541
00:36:13,310 --> 00:36:17,839
figured out by now javaScript lot of
JavaScript to do this to pull this off

542
00:36:17,839 --> 00:36:23,240
right organization pretty much relies on
it and at some point if you haven't

543
00:36:23,240 --> 00:36:26,629
already had this thought we'd ask
yourself seriously

544
00:36:26,630 --> 00:36:30,799
we're relying on JavaScript BR traffic
cop to make sure that we keep our nice

545
00:36:30,799 --> 00:36:34,099
little three segments together because
we know there's all these problems right

546
00:36:34,099 --> 00:36:36,980
so JavaScript's really going to be the
thing that keeps us from going sideways

547
00:36:36,980 --> 00:36:40,220
we got one big red zone one big piece
activities

548
00:36:40,220 --> 00:36:44,118
well fine little additional fact about
JavaScript that I'm sure everyone's for

549
00:36:44,119 --> 00:36:44,809
knows

550
00:36:44,809 --> 00:36:48,019
javascript is not require a build and
deploy on the the build server in order

551
00:36:48,019 --> 00:36:51,680
for the code to be modified out in
production right we want to compile it

552
00:36:52,369 --> 00:36:56,000
so what if you have a DevOps admin that
is the JavaScript files on the web

553
00:36:56,000 --> 00:37:00,950
server or what if you're in the final
stages of a breech right and that

554
00:37:00,950 --> 00:37:04,250
adversaries on your your web front end
because again that's in that nice blue

555
00:37:04,250 --> 00:37:06,650
space where we don't really spend the
money and time and everything in it is

556
00:37:06,650 --> 00:37:11,329
organized it sits low risk right and
that develops admin just edit the pages

557
00:37:11,329 --> 00:37:15,950
you guys have anyone have integrity
checking on your JavaScript wild files

558
00:37:15,950 --> 00:37:21,950
and we're gonna raise your hand because
i I've never seen it ever right one

559
00:37:21,950 --> 00:37:25,700
reason why we don't ever see this is
people that have apps like this do

560
00:37:25,700 --> 00:37:30,439
continuous integration which means we
push code like 300 times a day right so

561
00:37:30,440 --> 00:37:33,049
how in the world could we possibly do
and Terry check because it changes too

562
00:37:33,049 --> 00:37:33,740
awful

563
00:37:33,740 --> 00:37:38,839
so let's just say we modify that code
and the JavaScript now sends a copy of

564
00:37:38,839 --> 00:37:42,740
that pan to our evil attacker com
website right so and then four good

565
00:37:42,740 --> 00:37:46,129
posterity we just sent you know we did
one ajax request and then we we sent you

566
00:37:46,130 --> 00:37:48,500
right back to where you're supposed to
go because you know we're going to make

567
00:37:48,500 --> 00:37:51,799
sure that no one notices and customers
still checks out we just need to copy

568
00:37:51,799 --> 00:37:55,309
that thank you very much okay great so
we have no continuation bills required

569
00:37:55,309 --> 00:37:59,869
what's gonna happen so it's gonna get
through it doesn't work right so what

570
00:37:59,869 --> 00:38:03,859
about intentional javascript effects
this is similar concept but what if you

571
00:38:03,859 --> 00:38:08,690
have a DevOps admin who decides what
data he no longer is low the company and

572
00:38:08,690 --> 00:38:12,500
decides to addition you know
intentionally leaked credit cards back

573
00:38:12,500 --> 00:38:18,140
to his server right now if you have PCI
cooties again right because you've sent

574
00:38:18,140 --> 00:38:21,379
the cards back there but what login you
have a place on your web servers are you

575
00:38:21,380 --> 00:38:24,170
logging for requests you know chances
are you're not gonna log is gonna come

576
00:38:24,170 --> 00:38:27,140
as a post request the body's not gonna
be there and that's really the credit

577
00:38:27,140 --> 00:38:29,808
cards going to be but yet at the same
time it's there so leads us to the next

578
00:38:29,809 --> 00:38:32,809
attack right which is RAM scraping web
servers

579
00:38:35,279 --> 00:38:38,459
landscaping is not just report of sale
systems anymore with the target attack

580
00:38:38,459 --> 00:38:42,598
we all knew that target got hit by
transcribing POS it's a tired subject we

581
00:38:42,599 --> 00:38:46,769
all know about that it's interesting one
of the things that's really interesting

582
00:38:46,769 --> 00:38:51,868
is that a lot of people don't understand
this if your web server accepts primary

583
00:38:51,869 --> 00:38:56,849
account numbers or if your web server d
Crips encrypted primary call numbers

584
00:38:56,849 --> 00:39:01,919
then that means what the primary account
numbers are in memory right and their

585
00:39:01,919 --> 00:39:06,479
memory and your web server right and the
thing that people really get hung up on

586
00:39:06,479 --> 00:39:10,468
you you probably think it's there for
like microseconds chances are it's

587
00:39:10,469 --> 00:39:12,059
therefore minutes or hours

588
00:39:12,059 --> 00:39:16,979
okay especially for using language like
Java or.net that do garbage collection

589
00:39:16,979 --> 00:39:20,788
or any of these modern fourth-generation
languages that do all this fancy stuff

590
00:39:20,789 --> 00:39:24,299
from at managing memory it's probably
sitting in there for a very very very

591
00:39:24,299 --> 00:39:27,599
long time especially if you've got like
say a hundred nodes in your web server

592
00:39:27,599 --> 00:39:30,749
farm and you're doing all this stuff
because you can divide the load up well

593
00:39:30,749 --> 00:39:33,718
that servers got less load on its get
less of a reason to reset the memory and

594
00:39:33,719 --> 00:39:36,569
overwrite memory and garbage collect
it's probably therefore really really

595
00:39:36,569 --> 00:39:38,909
long time so moral story

596
00:39:38,909 --> 00:39:43,890
beware the DevOps and it says on black
friday or cyber monday i need to profile

597
00:39:43,890 --> 00:39:48,058
the service right in RFC and then go
start dumping memory profile the service

598
00:39:48,059 --> 00:39:52,380
on over this web application right so
again this could be the final stages of

599
00:39:52,380 --> 00:39:53,369
reach

600
00:39:53,369 --> 00:39:56,009
modifying javascript and then just
scraping ran for the credit cards

601
00:39:56,009 --> 00:39:59,159
because maybe the applications not doing
anything with them maybe just go into

602
00:39:59,159 --> 00:40:02,159
memory and I just ignores them but
they're there and they can be pulled out

603
00:40:02,669 --> 00:40:09,269
so talk about a lot to recap so we
define truncation and organization and

604
00:40:09,269 --> 00:40:12,328
we talked about these tokenization taxes
partial access stuff we talked about the

605
00:40:12,329 --> 00:40:17,159
side channels the replays including
things like don't we use tokens and more

606
00:40:17,159 --> 00:40:19,439
than one app inside your same company
right

607
00:40:19,439 --> 00:40:23,969
we also talk a little bit about
offensive DevOps and ram scraping so we

608
00:40:23,969 --> 00:40:26,549
can all relax right because we're talkin
eyes were safe

609
00:40:26,549 --> 00:40:34,259
does anybody have any any questions by
the way we we flew through 277 slides

610
00:40:34,259 --> 00:40:37,259
and 37 minutes ago in my timer right

611
00:40:37,790 --> 00:40:53,090
you all still awake so okay so the
question is why is translation get rid

612
00:40:53,090 --> 00:41:04,760
of pci cuties and it's funny pull back
the picture scrolling scrolling

613
00:41:04,760 --> 00:41:11,360
scrolling ok so this is what this is
where you were everything is in the same

614
00:41:11,360 --> 00:41:14,960
scope right so that this block of
servers in the top right corner that box

615
00:41:14,960 --> 00:41:20,150
those are all of your web apps right
know those laptops the middle that your

616
00:41:20,150 --> 00:41:23,780
corporate office like big flat network
which everybody was way back

617
00:41:25,040 --> 00:41:33,230
yeah segmentation this is the notion of
segmentation right so you might want to

618
00:41:33,230 --> 00:41:37,490
segment off where I have cardholder data
and and things that are the touch

619
00:41:37,490 --> 00:41:41,750
cardholder data in plain tex or have
escrowed access to cardholder data in

620
00:41:41,750 --> 00:41:44,810
other words it's encrypted maybe on the
server but the keys over here the

621
00:41:44,810 --> 00:41:48,440
service got the key those components are
all in pci scope and everything that

622
00:41:48,440 --> 00:41:52,520
touches them as in pci scopes everything
later to write and everything that's not

623
00:41:52,520 --> 00:41:56,750
firewalled off and everything that your
PCI qsa with his black magic voodoo says

624
00:41:56,750 --> 00:42:00,830
is additionally in scope because that's
what they tend to do all that that's the

625
00:42:00,830 --> 00:42:03,680
whole idea so what we're talking about
here is we say hey you know what I've

626
00:42:03,680 --> 00:42:08,240
got this big expensive thing so way back
a long time ago I used to work it was we

627
00:42:08,240 --> 00:42:11,870
have credit-card transactions on the
mainframe mainframes are expensive

628
00:42:11,870 --> 00:42:15,710
they're paying their old no one wants to
really work on them today right so we're

629
00:42:15,710 --> 00:42:18,290
going to take all that card data out of
there because we don't want to secure

630
00:42:18,290 --> 00:42:20,540
this million-dollar mainframe
environment we want to secure this

631
00:42:20,540 --> 00:42:23,779
hundred-thousand-dollar environment over
here instead

632
00:42:23,780 --> 00:42:26,990
right that's easier so we can get just
contain it and put the tokens over the

633
00:42:26,990 --> 00:42:28,819
mainframe in the mainframe we don't care
anymore

634
00:42:28,820 --> 00:42:32,120
pci goes away that's the whole idea
behind it makes sense

635
00:42:35,900 --> 00:42:40,819
it's not really it's not a requirement
no it's just a good way to scale it down

636
00:42:40,819 --> 00:42:45,470
nicely not to put your entire
organization interscope cool

637
00:42:45,470 --> 00:42:48,470
any other questions

638
00:42:49,700 --> 00:42:52,098
awesome alright thanks so much guys

