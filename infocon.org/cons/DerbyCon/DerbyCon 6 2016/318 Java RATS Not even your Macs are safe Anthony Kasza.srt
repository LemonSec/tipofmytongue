1
00:00:00,000 --> 00:00:05,190
can you hear me in the back yeah thnkx
gonna get started because we're running

2
00:00:05,190 --> 00:00:08,790
a little bit behind and I've got a
gazillion slides I need to get through

3
00:00:08,790 --> 00:00:14,579
so if you're here for this talk too bad
it's not the one I'm going to give sorry

4
00:00:14,580 --> 00:00:19,020
i renamed it smashing the jars because I
needed to come up with a way better

5
00:00:19,020 --> 00:00:23,430
theme my slides our way boring and this
way I can incorporate legend of zelda

6
00:00:23,430 --> 00:00:26,609
means so who's played legend of zelda
here

7
00:00:26,609 --> 00:00:33,030
awesome cool so you're all going to
enjoy this there's something that's like

8
00:00:33,030 --> 00:00:36,630
a lot of people think the main point of
the game is to like save the princess

9
00:00:36,630 --> 00:00:40,110
and destroy evil but it's not it's
actually to go around and like smash

10
00:00:40,110 --> 00:00:45,480
jars and by smashing jars you get
healthier and richer so at the end of

11
00:00:45,480 --> 00:00:50,519
this talk you'll also see how you can be
healthier immature by smashing jars but

12
00:00:50,520 --> 00:00:54,180
first I'm gonna talk about me because
that's why you're all here

13
00:00:54,180 --> 00:00:57,960
yeah that that's what I look like with
about a pound and a half less hair on my

14
00:00:57,960 --> 00:00:58,890
scope

15
00:00:58,890 --> 00:01:03,840
I i did some security stuff for a while
I still do security stuff count all over

16
00:01:03,840 --> 00:01:08,430
the place right now I'm it palo alto
networks doing that research recently I

17
00:01:08,430 --> 00:01:15,570
Roseanne challenges for a few CTFs so
that's gonna about me about this talk

18
00:01:15,570 --> 00:01:21,570
I'm going to give a brief introduction
to java GM's and jar you're probably all

19
00:01:21,570 --> 00:01:25,199
really familiar with javis I'm not gonna
belittle it to death at all i'm gonna go

20
00:01:25,200 --> 00:01:28,829
really quick like i said earlier that
i'm going to talk about current job

21
00:01:28,829 --> 00:01:33,570
threats i'm not gonna cover like malware
that's focused on de las or exploits

22
00:01:33,570 --> 00:01:35,820
within the jvm yet

23
00:01:35,820 --> 00:01:42,029
oh shit I gotta jiggle jiggle jiggle

24
00:01:47,270 --> 00:02:09,679
OIC so yes often on not the other way is
all smart asses i love it

25
00:02:16,819 --> 00:02:24,200
cool sorry that one yeah the beautiful
face

26
00:02:24,200 --> 00:02:29,540
alright enough fooling around that so
then i'll talk about like I said java

27
00:02:29,540 --> 00:02:32,959
and then current current threats that
are built on top of java so mostly java

28
00:02:32,959 --> 00:02:38,930
rats i'll give some analysis analysis
and detection like overviews what tools

29
00:02:38,930 --> 00:02:42,829
i like to use how I do what I do and
then I'll hopefully have time for a demo

30
00:02:42,829 --> 00:02:45,530
if i go fast enough

31
00:02:45,530 --> 00:02:52,639
ok so job basics java is a programming
language probably all know this is

32
00:02:52,639 --> 00:02:57,680
object-oriented a lot of schools you
teach like computer programming there's

33
00:02:57,680 --> 00:03:01,819
it's been around for a while there's a
lot of libraries a lot of users it's

34
00:03:01,819 --> 00:03:07,940
everywhere three things you need to know
about java the jvm the jdk and jari IDK

35
00:03:07,940 --> 00:03:13,940
my cover too much because it's like more
for developing in Java but the jvm is

36
00:03:13,940 --> 00:03:18,260
the piece of java that you need to
execute code along with jari which is

37
00:03:18,260 --> 00:03:21,260
like some runtime environment libraries
and stuff like that

38
00:03:22,220 --> 00:03:26,810
something to note is the jvm the
software that you installed XP java is

39
00:03:26,810 --> 00:03:29,959
specific for the platform that you're
running it on so you need a special

40
00:03:29,959 --> 00:03:34,790
version of the jvm to execute on your
mac and a special version of GBM 2xe

41
00:03:34,790 --> 00:03:38,900
java on your Windows machine and the
cool thing about that is that because

42
00:03:38,900 --> 00:03:44,329
you have these jvms is operating system
dependent so that the compiled by code

43
00:03:44,329 --> 00:03:49,790
doesn't have to be so any jvm will
execute whatever job you right so you

44
00:03:49,790 --> 00:03:52,790
can write your mouth where once they can
run anywhere James install

45
00:03:54,420 --> 00:03:59,069
I was compiled by code so it's not
assembly which is nice because assembly

46
00:03:59,069 --> 00:04:02,940
is hard and it makes me think too much
so it's similar to python where you can

47
00:04:02,940 --> 00:04:06,150
sort of reverse the bytecode back into
source code and actually go and read it

48
00:04:06,150 --> 00:04:13,770
which makes it really really nice for
reverse engineering job my where this is

49
00:04:13,770 --> 00:04:19,079
also said this is the reverse
engineering spectrum of tribulations or

50
00:04:19,079 --> 00:04:23,790
how hard or pain-in-the-ass something is
depending on what is written and so on

51
00:04:23,790 --> 00:04:27,870
the left you see like pure source code
if you have source code it's really easy

52
00:04:27,870 --> 00:04:32,520
to sell pretty easy to reverse-engineer
depending on how well it's written and

53
00:04:32,520 --> 00:04:36,539
on the right like in my mind the most
difficult thing to reverse engineer is a

54
00:04:36,540 --> 00:04:41,460
is a service on remote system that you
have absolutely no visibility into and

55
00:04:41,460 --> 00:04:46,409
you can just like telnet to that's it
right so Java sort of towards the left a

56
00:04:46,410 --> 00:04:50,729
little bit about as easy as dotnet it's
not quite as hard as something like c++

57
00:04:50,729 --> 00:04:59,940
or Delphie so yeah alright so jar file
formats Java byte code is compiled into

58
00:04:59,940 --> 00:05:03,539
something called class files class files
are then stuffed into jars which are

59
00:05:03,539 --> 00:05:09,240
basically zips with special special
purpose contents and those contents are

60
00:05:09,240 --> 00:05:12,360
called resources so you can put pretty
much anything in a jar

61
00:05:12,360 --> 00:05:17,460
it's it's a file it's it's a zip file
but you need special things in there for

62
00:05:17,460 --> 00:05:22,919
it to be a jar because it can't execute
any zip as java right now one of those

63
00:05:22,919 --> 00:05:27,240
things like I said class files like to
talk about comes to pools you're

64
00:05:27,240 --> 00:05:31,380
interested come find me we'll talk about
those later manifest files are pretty

65
00:05:31,380 --> 00:05:34,169
important so I'll get into those in the
demo a little bit

66
00:05:34,169 --> 00:05:40,020
these are plain text files that contain
key value pairs can like HTTP headers if

67
00:05:40,020 --> 00:05:43,349
you're familiar with those and one of
the really important ones that you'll

68
00:05:43,350 --> 00:05:47,250
see is called main class which is
basically the entry point for the jar so

69
00:05:47,250 --> 00:05:51,330
if you run the jar from the command line
you don't have to tell Java what to

70
00:05:51,330 --> 00:05:55,080
execute first it'll just go look in the
manifest and execute that that my first

71
00:05:56,770 --> 00:06:01,330
am I going too fast feel like I'm
talking really fast okay good

72
00:06:01,960 --> 00:06:08,560
you guys all know this stuff perfect so
let's talk about java threats some

73
00:06:08,560 --> 00:06:12,400
basics about java threats there's a
whole host of them some of them are more

74
00:06:12,400 --> 00:06:15,969
mature than others just like every other
rat things like blue banana sort of

75
00:06:15,970 --> 00:06:19,629
proof of concept to all things like Jake
socket and Jeff roster like really

76
00:06:19,629 --> 00:06:25,690
mature and really done well well
developed a lot of java malware comes as

77
00:06:25,690 --> 00:06:29,830
a kit so you've got this nice like
builder that you plug in some

78
00:06:29,830 --> 00:06:33,190
configuration options you hit make me
and malware and it spits you out of

79
00:06:33,190 --> 00:06:37,210
Charlie go in fact people with and those
builders will often include something i

80
00:06:37,210 --> 00:06:41,440
call step jars which are basically like
blank template jars that whenever you

81
00:06:41,440 --> 00:06:44,740
put in your configuration options that
builder will go and rewrite a little bit

82
00:06:44,740 --> 00:06:46,630
of the stub jar and then spit it out

83
00:06:46,630 --> 00:06:50,979
so if you write six based on those stump
charges you can actually defeat a lot of

84
00:06:50,979 --> 00:06:56,590
kids a lot of different families will
reuse common libraries so i'll talk

85
00:06:56,590 --> 00:07:01,479
about that a little bit later but one
example is why would you write a webcam

86
00:07:01,479 --> 00:07:05,860
like utility or library in java if one
already exists if you're trying to write

87
00:07:05,860 --> 00:07:09,669
a rap that you can use to spy on people
just use whatever is out there i was

88
00:07:09,669 --> 00:07:14,049
gonna recheck rich ecosystem like i said
and a lot of things that you want to do

89
00:07:14,050 --> 00:07:28,180
are already written for you ski so the
last thing about this slide there's a

90
00:07:28,180 --> 00:07:35,770
lot of av detection Zhan on VT with the
java rats and the kind of generic so in

91
00:07:35,770 --> 00:07:39,340
my opinion there's something called J
rat which is a family of rat also called

92
00:07:39,340 --> 00:07:43,929
Jack spot and it it's often really
confusing if you if you look at a Jenner

93
00:07:43,930 --> 00:07:49,240
a simple on VT what the detentions are
because like Jay could often stand for

94
00:07:49,240 --> 00:07:53,860
java lot of events will just call any
any java rat as Jay rat because it's

95
00:07:53,860 --> 00:07:59,560
sort of a generic name so if you CJ rat
on VT it could be generic it could be a

96
00:07:59,560 --> 00:08:05,620
specific family it's fantastic kinda
decipher there's another sort of

97
00:08:05,620 --> 00:08:08,860
overloaded term called add wind witch

98
00:08:08,860 --> 00:08:14,050
could represent a whole host of
different variants within the headwind

99
00:08:14,050 --> 00:08:18,939
family a lot of 80 vendors will just
call any of those errands at wind which

100
00:08:18,939 --> 00:08:26,560
in reality they're not like well I'll
get into it anyways there's a handful of

101
00:08:26,560 --> 00:08:28,539
other java threats that I thought were
worth mentioning

102
00:08:28,539 --> 00:08:31,870
I'm not gonna dig too deeply into them
one of which is banned load it's a

103
00:08:31,870 --> 00:08:38,979
Brazilian banking loader that loads
making trillions another one called a

104
00:08:38,979 --> 00:08:43,450
just job around somewhere which I found
on github it was developed by I believe

105
00:08:43,450 --> 00:08:48,220
to highschool Korean students not
distributed in the wild it's wasn't

106
00:08:48,220 --> 00:08:53,200
fully written it's just sort of a
proof-of-concept JB I'm not gonna talk

107
00:08:53,200 --> 00:09:00,640
about sorry but I don't have time its
it's a such a ban cho and then Java fog

108
00:09:00,640 --> 00:09:08,050
which is a variant of a nice blog back
door so if you're familiar with the ice

109
00:09:08,050 --> 00:09:15,699
following apt group they targeted mainly
like military contractors government

110
00:09:15,699 --> 00:09:23,349
sort of type targets in east asia and
conspiracy actually found a variant of

111
00:09:23,350 --> 00:09:30,250
their malware in a jar that would call
out to guess I don't that would call out

112
00:09:30,250 --> 00:09:34,240
to the domain that was actor controlled
so they knew it sort of belong to this

113
00:09:34,240 --> 00:09:39,490
group and it was written in Java which
it into me it was the first thing that I

114
00:09:39,490 --> 00:09:42,850
saw that was like targeted written in
java so I thought is worth mentioning

115
00:09:44,199 --> 00:09:48,279
I'm not sure why they wrote in Java
because if you look here's a screenshot

116
00:09:48,279 --> 00:09:52,360
of the source if you can actually read
that down below you can see the iceberg

117
00:09:52,360 --> 00:09:55,750
domain and then up above they're
actually showing out to windows so like

118
00:09:55,750 --> 00:09:59,199
why right cross-platform malware and
then use the windows shell

119
00:09:59,199 --> 00:10:04,359
I don't know but they're supposedly apt
so they have to know what they're doing

120
00:10:04,360 --> 00:10:06,870
right now

121
00:10:06,870 --> 00:10:13,529
some recurring characters are commonly
use things that you'll see across java

122
00:10:13,529 --> 00:10:17,820
threats this java.util is preps thing is
used all the time as the persistence

123
00:10:17,820 --> 00:10:21,540
mechanism so if you ever want to store
something or persist some piece of data

124
00:10:21,540 --> 00:10:26,730
in your java malware use this library
and windows that uses the registry and

125
00:10:26,730 --> 00:10:32,850
OSX actually will drop a little file
into the library preferences folder and

126
00:10:32,850 --> 00:10:35,850
users home directory

127
00:10:37,140 --> 00:10:43,110
there's a whole list of other commonly
misused or used libraries and like I

128
00:10:43,110 --> 00:10:47,220
said a lot of malware will shell out and
use this like runtime exact thing which

129
00:10:47,220 --> 00:10:52,890
just takes the the system shown the next
command again don't know why but

130
00:10:52,890 --> 00:11:00,150
whatever so types of attackers that are
using java malware of course you've got

131
00:11:00,150 --> 00:11:05,670
the skinnies people sending mass spam
campaigns hoping to just get the most

132
00:11:05,670 --> 00:11:09,660
number of compromise as possible so they
can say look at my cool botnet look what

133
00:11:09,660 --> 00:11:11,370
I can do

134
00:11:11,370 --> 00:11:16,830
candas scripts or whatever you've also
got financially motivated actors which I

135
00:11:16,830 --> 00:11:22,050
would say or are like half a step more
technically competent than these cities

136
00:11:22,050 --> 00:11:29,339
you have examples of that like people
using band glow to target and users of

137
00:11:29,339 --> 00:11:36,630
banking software as well as practice
burski wrote on a handful of compromises

138
00:11:36,630 --> 00:11:40,529
that they they did during assessments in
singapore for banks where they found a

139
00:11:40,529 --> 00:11:43,890
twin actually inside of banks so you
sort of see like front-end and back-end

140
00:11:43,890 --> 00:11:50,670
being targeted and then the last group I
don't call them apts but they're like

141
00:11:50,670 --> 00:11:54,689
surgical actors right they're not just
going after mass numbers they're going

142
00:11:54,690 --> 00:11:59,790
after something specific and and a
handful of examples 1 which I mentioned

143
00:11:59,790 --> 00:12:04,500
ice fog also something called pak-rat
which was a group reported on bison lab

144
00:12:04,500 --> 00:12:10,770
in 2015 used two different kinds of java
trojans and they were targeting

145
00:12:10,770 --> 00:12:13,770
political dissidents that journalists

146
00:12:14,410 --> 00:12:20,170
those types of people in Latin America
and then also the annual campaign which

147
00:12:20,170 --> 00:12:21,310
came out

148
00:12:21,310 --> 00:12:26,920
eff reported i think at black hat
sometime this year about Kazakhstan

149
00:12:26,920 --> 00:12:33,250
government targeting similar types of
people in Kazakhstan and these jeer at

150
00:12:33,250 --> 00:12:36,430
which isn't the generic term but the
actual family

151
00:12:36,939 --> 00:12:41,980
ok so audience participation who can
name something that comes in a jar

152
00:12:41,980 --> 00:12:47,560
cookies rupees cookies mayonnaise

153
00:12:48,069 --> 00:12:54,699
that's a good one yeah anything else
sorry moonshine I would have also

154
00:12:54,699 --> 00:13:04,209
accepted hearts rupees bombs other items
or malware so these are all the families

155
00:13:04,209 --> 00:13:14,079
that I could find and it's not a ton but
let's talk about him on the Left I have

156
00:13:14,079 --> 00:13:21,130
a approximate soft dates of when they
first emerged and I base that on the

157
00:13:21,130 --> 00:13:25,480
first VT submission i could find or the
first forum post i could find selling a

158
00:13:25,480 --> 00:13:31,839
rat or the first like committing github
the first blog post detailing the family

159
00:13:31,839 --> 00:13:40,149
itself there's a bunch of them here is I
do some boxes around families so this

160
00:13:40,149 --> 00:13:44,560
fruit is through J Bifrost sort of their
it's all written by one guy i'll talk

161
00:13:44,560 --> 00:13:47,079
about it a little bit later

162
00:13:47,079 --> 00:13:52,060
Jace x and os cholesterol also related i
believe a celestial it hasn't been

163
00:13:52,060 --> 00:13:55,989
talked about the Celestials basically
Jace by with a few extra features if you

164
00:13:55,990 --> 00:14:00,250
look at like that the library is used
for the config file format or the

165
00:14:00,250 --> 00:14:07,870
builders themselves or the the domains
that are selling these their registry

166
00:14:07,870 --> 00:14:12,490
information is just all overlap so i'm
guessing very confidently that these are

167
00:14:12,490 --> 00:14:15,850
related and then there's also two
versions of Q rat talk about those

168
00:14:17,340 --> 00:14:22,080
here's a slide with another box but this
box goes the other way instead of long

169
00:14:22,080 --> 00:14:27,450
ways this is hot box instead of
hamburger right because he has

170
00:14:27,450 --> 00:14:32,580
understand and it's like it circles the
the families that came out in the past

171
00:14:32,580 --> 00:14:36,450
year and a half which is about a third
of the families i could find and I think

172
00:14:36,450 --> 00:14:40,890
this is kind of telling like yeah java
my wares not used very often but over

173
00:14:40,890 --> 00:14:46,860
the past year it's like sort of i
wouldn't say exploded but there's a lot

174
00:14:46,860 --> 00:14:51,000
more stuff coming out it's doing this so
i think that's a trend

175
00:14:51,000 --> 00:14:57,960
okay are there any questions wear it
like a third of the talk I don't know

176
00:14:57,960 --> 00:14:59,370
what time is it

177
00:14:59,370 --> 00:15:08,820
she's ok questions keep the train wreck
gallon so for this um this is sort of

178
00:15:08,820 --> 00:15:16,380
the driest section someone go really
fast and hopefully just skip a lot of

179
00:15:16,380 --> 00:15:21,270
this to get to the demo because that's
the exciting part so frutos was

180
00:15:21,270 --> 00:15:24,270
originally a proof-of-concept came out
in $MONTH 2012

181
00:15:24,960 --> 00:15:33,270
it's one of its not the oldest ads locks
the oldest but it's like it's more the

182
00:15:33,270 --> 00:15:39,900
grand daddy's right it became popular
around 2012 july plaintext configuration

183
00:15:39,900 --> 00:15:45,480
file i use a lock file similar to add
sock I wouldn't be surprised if whoever

184
00:15:45,480 --> 00:15:50,040
wrote Brutus was looking at the exact
source code to mimic what they were

185
00:15:50,040 --> 00:15:57,060
doing was a screenshot of that the lock
file from the source again used this

186
00:15:57,060 --> 00:16:04,319
runtime exact thing so not very smart
only run on windows after that the dude

187
00:16:04,320 --> 00:16:07,350
that wrote it actually came out with
another version he called ad which is a

188
00:16:07,350 --> 00:16:12,240
little bit better came out 2013 just
sort of a rebrand it supported android

189
00:16:12,240 --> 00:16:18,240
started using some obfuscation here's a
screenshot from the manifest file you

190
00:16:18,240 --> 00:16:21,880
can see the created by headers and
there's some goofy stuff in there

191
00:16:21,880 --> 00:16:25,930
it also use really long have you skated
class file names

192
00:16:28,000 --> 00:16:32,800
yep after that can came something called
on recon marine recon not sure how to

193
00:16:32,800 --> 00:16:37,750
pronounce it basically another version
of the same rat with a few extra

194
00:16:37,750 --> 00:16:43,660
features added is a screenshot of the
server class 40 an implant that I found

195
00:16:43,660 --> 00:16:49,510
after that got rebranded again because
this guy really likes rebranding things

196
00:16:49,510 --> 00:16:55,510
some additional features including a
sandbox detection 19 analysis and

197
00:16:55,510 --> 00:16:58,990
autobiography station baked in and
something that I thought was kind of

198
00:16:58,990 --> 00:16:59,500
cool

199
00:16:59,500 --> 00:17:02,500
you probably can't see this so just
close your eyes from it and i'll just

200
00:17:02,500 --> 00:17:09,550
talk about it now there's a lot of
implants that alien spy implants that

201
00:17:09,550 --> 00:17:14,379
are using class file names that are
really really long so here I am just

202
00:17:14,380 --> 00:17:17,709
piping one of the class file names to
work out doing a character count on it

203
00:17:17,709 --> 00:17:23,620
and if you can see in the first row
there's 298 characters in the class file

204
00:17:23,619 --> 00:17:31,389
names which if you try to unzip a file
or a jar with a file name that has 298

205
00:17:31,390 --> 00:17:34,870
characters in it a lot of operating
systems will just kind of put the pants

206
00:17:34,870 --> 00:17:39,489
because there's a maxima 256 characters
and it's like well I don't know what to

207
00:17:39,490 --> 00:17:46,930
do with this great job so kind of an
interesting application technique is

208
00:17:46,930 --> 00:17:51,400
just a screenshot of an alias by
implanting allegory you can see the

209
00:17:51,400 --> 00:17:57,910
auditory ex-demo string in there and
hopefully in the demo time she had a BF

210
00:17:57,910 --> 00:18:02,140
escape that here's a screenshot from
this cool product that we sell a palo

211
00:18:02,140 --> 00:18:06,070
alto that i'm not going to talk about
too much because it's not commercial but

212
00:18:06,070 --> 00:18:10,870
you can see some of the commands that
aliens by implants will run so i'll just

213
00:18:10,870 --> 00:18:16,570
like execute a bunch of tasks commands
with common analysis tools like process

214
00:18:16,570 --> 00:18:20,139
explorer process hacker so if you're
tearing apart one of these samples and

215
00:18:20,140 --> 00:18:24,340
you're actually debugging it like just
be aware that all your tools will die

216
00:18:26,060 --> 00:18:31,100
after that the dude came out with
another rebrand called a socket and sort

217
00:18:31,100 --> 00:18:35,060
of switch things up because you get you
got really tired of being taken down and

218
00:18:35,060 --> 00:18:39,860
sort of his his domains his software
being cracked so he switched to a

219
00:18:39,860 --> 00:18:42,830
software-as-a-service model where you
bought software from him and then

220
00:18:42,830 --> 00:18:47,030
everything would go through his like
central domain which made it really easy

221
00:18:47,030 --> 00:18:52,970
to take down the whole like everything
using a socket again kinda dumb but his

222
00:18:52,970 --> 00:18:55,850
first he estimated and I don't know how
they came up with this that he made a

223
00:18:55,850 --> 00:19:04,310
boatload of money and soul to about lot
of people so good for him and just like

224
00:19:04,310 --> 00:19:10,280
it's supported OS X and here's a
screenshot of me running a plan on OSX

225
00:19:10,280 --> 00:19:16,250
and the JSON can . moving itself to him
directly in the user's home folder using

226
00:19:16,250 --> 00:19:22,400
some weird random created name and then
here's a screenshot of us of a socket

227
00:19:22,400 --> 00:19:29,990
adding itself to a launch agent launch
launch agent using a plist entry on OSX

228
00:19:29,990 --> 00:19:35,450
probably shouldn't be saying this but
after that he branded his right again

229
00:19:35,450 --> 00:19:41,270
into something called you by frost which
came out earlier this year is talking

230
00:19:41,270 --> 00:19:45,110
about i believe by for a minute and
something interesting that it did was it

231
00:19:45,110 --> 00:19:49,370
you serialize decryption keys in the
implant and it's the only family or

232
00:19:49,370 --> 00:19:54,320
variant that I've seen do this so if you
just look four jars that are kind of

233
00:19:54,320 --> 00:19:59,810
suspicious and they have see realized
keys and them it's it's probably this

234
00:19:59,810 --> 00:20:08,060
here's a screenshot that I stole from 14
it thanks guys of the day Bifrost

235
00:20:08,060 --> 00:20:13,460
interface as well as a socket interface
and you can tell like this guy just

236
00:20:13,460 --> 00:20:15,080
likes changing names a lot

237
00:20:15,080 --> 00:20:18,409
they're like the same thing and if you
look at him against by it's like the

238
00:20:18,410 --> 00:20:25,880
exact same so add zach is actually the
oldest one I could find it came out in

239
00:20:25,880 --> 00:20:29,300
$MONTH 2010 ish she's like

240
00:20:29,920 --> 00:20:40,270
I was like six there's a free or paid
and then like an ultra paid version i'm

241
00:20:40,270 --> 00:20:43,060
not sure what the difference between any
of them are but this pak-rat group that

242
00:20:43,060 --> 00:20:49,030
i talked about reported on my system lab
they actually use dad's sock to target

243
00:20:49,030 --> 00:20:51,460
quite a few people it's still around

244
00:20:51,460 --> 00:20:55,210
last time I checked and last time I
checked was a few months ago so you

245
00:20:55,210 --> 00:20:58,570
might want to check again but sold by
some guy who's claiming to be from

246
00:20:58,570 --> 00:21:02,379
Bolivia and he's got a Twitter profile
so tweet and see if you can get a nice

247
00:21:03,100 --> 00:21:07,149
see if you can bargain with him like
haggle account how much can i buy this

248
00:21:07,150 --> 00:21:10,210
rav4 just wanna see what he says

249
00:21:10,210 --> 00:21:17,590
like I said similarities to purchase
yeah keep the free version doesn't run

250
00:21:17,590 --> 00:21:22,899
on windows but it does include a
plaintext configuration file that you

251
00:21:22,900 --> 00:21:27,160
can just open up the jar pull out and
read so you can see exactly like what

252
00:21:27,160 --> 00:21:32,500
the c2 is what the password they're
using is that step and it uses a la

253
00:21:32,500 --> 00:21:37,030
college securities here's a screenshot
of the dudes website where he's selling

254
00:21:37,030 --> 00:21:43,960
his stuff so you can go there and look
at it the next family is called blue

255
00:21:43,960 --> 00:21:44,980
banana

256
00:21:44,980 --> 00:21:47,950
it's kind of boring i'm not gonna talk
about it too much it uses a password

257
00:21:47,950 --> 00:21:51,190
when you when it does likessee to
communications you can configure but you

258
00:21:51,190 --> 00:21:55,090
can rip out the config and look at the
password really easily if you check out

259
00:21:55,090 --> 00:22:00,939
the about from the Builder that has
greets to like hack forums so kind of

260
00:22:00,940 --> 00:22:05,620
skinny rat not really used too much but
it's still floating around BTW a lot so

261
00:22:05,620 --> 00:22:08,620
worth mentioning

262
00:22:09,980 --> 00:22:19,549
another one called crimson similar free
old not super interesting something that

263
00:22:19,549 --> 00:22:23,720
did that was unique was it dropped
settings files into a single light

264
00:22:23,720 --> 00:22:29,960
database to disk until version 2 . 1 and
here you can see me running a sec it on

265
00:22:29,960 --> 00:22:36,620
OSX dropping its p settings . db2
database something cool about this rat

266
00:22:36,620 --> 00:22:40,549
is when you run it has a debug
configuration configuration information

267
00:22:40,549 --> 00:22:46,429
spit out by default so here's a
screenshot you can't see me running on

268
00:22:46,429 --> 00:22:53,870
windows and on OSX the next thing is
called jkjk mount 2013 again I can't

269
00:22:53,870 --> 00:22:57,350
talk about too much it does you
something kinda cool it and it's

270
00:22:57,350 --> 00:23:03,740
implants uses wmi to look for AV
software installed and then I believe it

271
00:23:03,740 --> 00:23:12,620
goes and tries to kill it but it's also
windows specific so pretty lame curette

272
00:23:12,620 --> 00:23:19,459
the next family which the first version
emerged came out in 2015 and I was whose

273
00:23:19,460 --> 00:23:23,870
report on I remember who reported on it
but it was a good report ever was

274
00:23:23,870 --> 00:23:29,030
good job guys and it has this complex
like three-stage loading sequence where

275
00:23:29,030 --> 00:23:32,510
it's got one jar that will like one pack
and load another jar that will impact

276
00:23:32,510 --> 00:23:39,530
load another char it only run on windows
so somewhat lame given some props

277
00:23:39,530 --> 00:23:42,740
because of the cool like three-stage
loading thing but they came out with the

278
00:23:42,740 --> 00:23:47,390
second version that was actually used to
target us these applicants in

279
00:23:47,390 --> 00:23:53,090
Switzerland over scape and it runs on
macs to the difference between version

280
00:23:53,090 --> 00:23:57,409
one version 2 besides running on OS X so
here's a screenshot version1 not running

281
00:23:57,410 --> 00:24:03,260
OSX then here's a screenshot of version
to running on OS X that the main

282
00:24:03,260 --> 00:24:06,890
difference is that the second version
will actually go out to this court lacks

283
00:24:06,890 --> 00:24:11,840
dot-com that I forget what it is and
download all the jars that it needs to

284
00:24:11,840 --> 00:24:16,040
run like all of its runtime libraries so
if you see something beginning to that

285
00:24:16,040 --> 00:24:18,950
domain you definitely have like a
compromise on your network

286
00:24:18,950 --> 00:24:26,420
another family here at that has that
name that often is used for generic

287
00:24:26,420 --> 00:24:31,040
protections most of this rat is open
source on github and you can go download

288
00:24:31,040 --> 00:24:34,970
it and security tools and it's
uninstaller and everything like that

289
00:24:35,930 --> 00:24:40,160
similarly other all the other rats

290
00:24:40,160 --> 00:24:43,670
it's a it's decently written it's kind
of old

291
00:24:44,270 --> 00:24:48,710
it does have cross-platform support
which is kinda cool just like every

292
00:24:48,710 --> 00:24:52,790
other guy that runs on OS X it's written
in java it uses pls entries for

293
00:24:52,790 --> 00:24:53,870
persistence

294
00:24:53,870 --> 00:25:00,139
so you're probably really sick of seeing
plist screenshots but the next family is

295
00:25:00,140 --> 00:25:04,220
called defect and the only thing really
worth mentioning about defect is the

296
00:25:04,220 --> 00:25:08,420
fact that it has two different c2
communication mechanisms one of which

297
00:25:08,420 --> 00:25:12,770
was HTTP and our IRC sorry get ahead of
myself

298
00:25:13,700 --> 00:25:21,320
so here's a screenshot of it doing some
c2 over IRC on on windows XP and here's

299
00:25:21,320 --> 00:25:27,230
a screenshot of it using HTTP post
method on OSX and in both cases it's

300
00:25:27,230 --> 00:25:33,290
kind of easy to spot and easy to set off
of because it it's not a very good

301
00:25:33,290 --> 00:25:36,290
protocol but yeah whatever

302
00:25:38,120 --> 00:25:47,179
this is a screenshot of defect again
using a plist entry on OSX ya next

303
00:25:47,180 --> 00:25:50,780
family is called me rat and ami rat is
probably one of my favorites so i'll

304
00:25:50,780 --> 00:25:55,160
talk about that in a little bit came out
around $MONTH 2015 so that you can buy

305
00:25:55,160 --> 00:26:02,300
and the reason I think it's really cool
is it has multi cross-platform support

306
00:26:02,300 --> 00:26:08,570
for both its controller and it's
implants and it also supports android so

307
00:26:08,570 --> 00:26:14,360
you can control i'm here at implants
running on android phones from your

308
00:26:14,360 --> 00:26:19,340
android phone and you can also spread
your implants via SMS which I thought

309
00:26:19,340 --> 00:26:23,750
was kind of kind of novel and kind of
course so like I can send all my friends

310
00:26:23,750 --> 00:26:27,830
have androids text from iphone
compromise their phones and control them

311
00:26:27,830 --> 00:26:28,590
also from Mike

312
00:26:28,590 --> 00:26:33,720
something not so cool about this rod rat
is that it was really easy to

313
00:26:33,720 --> 00:26:36,840
reverse-engineer doesn't use any
obfuscation and it has hard-coded

314
00:26:36,840 --> 00:26:38,730
configuration files in it

315
00:26:38,730 --> 00:26:45,390
hardcoded configuration options in its
implant so like here's an example of an

316
00:26:45,390 --> 00:26:53,370
army brat implant with a hard coded IP
address and the c2 protocol that uses is

317
00:26:53,370 --> 00:27:01,110
actually just passing around java
serialized objects so it's kind of weird

318
00:27:01,110 --> 00:27:05,639
I've never seen that before so if you
see the java serialize objects being

319
00:27:05,640 --> 00:27:08,549
passed around on your network in the
clear it might be this could just be

320
00:27:08,549 --> 00:27:16,408
another job application space x and os
celestial let's see what's interesting

321
00:27:16,409 --> 00:27:24,690
about this case both have similar
features they both overlap beacons with

322
00:27:24,690 --> 00:27:31,110
the those two domains a lot of this
stuff is like you see enough of these

323
00:27:31,110 --> 00:27:34,830
rats and you're just like oh they're all
kinda they kind of taste the same like

324
00:27:34,830 --> 00:27:39,990
they all they all walk and quack like a
duck like okay this is going to take

325
00:27:39,990 --> 00:27:47,340
tastes like a duck to so here's a
screenshot of the chase by website you

326
00:27:47,340 --> 00:27:56,220
can buy that the rat from and again uses
p lists for persistence on OSX the next

327
00:27:56,220 --> 00:28:00,480
family is something called ready which
was fully open source on github up until

328
00:28:00,480 --> 00:28:04,230
about a month ago until the guy took it
down because he noticed that people were

329
00:28:04,230 --> 00:28:09,029
actually talking about it well it is
pretty simple explore mechanism to

330
00:28:09,029 --> 00:28:13,679
encrypt its configuration file easy to
undo we saw this being actively

331
00:28:13,679 --> 00:28:20,039
distributed pretty much through April
and May to a bunch of our our customers

332
00:28:20,039 --> 00:28:23,520
and then like I said it disappeared from
get up a few months ago it's probably

333
00:28:23,520 --> 00:28:26,250
still out there he's probably still
selling it but he's not doing it in

334
00:28:26,250 --> 00:28:33,090
public anymore i did manage to get a
screenshot of his linux support and his

335
00:28:33,090 --> 00:28:34,870
implant which

336
00:28:34,870 --> 00:28:43,270
is a bunch of comments nothing in it but
his window support was really good and

337
00:28:43,270 --> 00:28:47,379
here's some special data like i said
from april of this rat actually being

338
00:28:47,380 --> 00:28:52,690
distributed the emails so you can see
some email subject lines and file names

339
00:28:52,690 --> 00:29:02,740
that people were using to distribute the
rap i went over those pretty quick there

340
00:29:02,740 --> 00:29:07,420
any questions on individual families
trying to rush so I can get to that fun

341
00:29:07,420 --> 00:29:08,620
stuff

342
00:29:08,620 --> 00:29:18,280
what's up nobody should it would get way
more attention to my talk if it did his

343
00:29:18,280 --> 00:29:29,980
question is does jakies JK Jews Nicolas
Cage memes should write it down so some

344
00:29:29,980 --> 00:29:33,970
common behaviors that we saw amongst all
these families that I talked about a lot

345
00:29:33,970 --> 00:29:42,580
of unused office station or critters or
packers to like try to hide themselves a

346
00:29:42,580 --> 00:29:47,110
lot of them will use anti a vm or anti
analysis techniques like trying to see

347
00:29:47,110 --> 00:29:51,399
what Navy's installed or killing
analysis tools while they're executing

348
00:29:51,400 --> 00:29:57,190
and a lot of ease at least from what
I've seen I don't work at every ad

349
00:29:57,190 --> 00:30:04,000
company so I don't have a great now
perspective into this but Davies can

350
00:30:04,000 --> 00:30:07,660
definitely determine if these jars are
good or not good or bad but they have a

351
00:30:07,660 --> 00:30:12,670
hard time determining like what family
they are telling you like what what kind

352
00:30:12,670 --> 00:30:18,760
of that it is and similar to every rat
ever written these java rats use like

353
00:30:18,760 --> 00:30:21,940
three steps while they're executing the
first one is to typically hide

354
00:30:21,940 --> 00:30:25,540
themselves and move themselves into
randomly name directory or

355
00:30:28,110 --> 00:30:31,110
a hidden directory or something like
that and then the next step is to

356
00:30:31,110 --> 00:30:35,580
persist so in windows we see a lot of
these are asking themselves to start of

357
00:30:35,580 --> 00:30:43,559
folders or places in the registry like i
mentioned on OSX basically every job at

358
00:30:43,559 --> 00:30:47,010
is using plist files there's a great
tool called knock knock

359
00:30:47,010 --> 00:30:50,879
you can run on your Mac to go and look
at all of the places where police files

360
00:30:50,880 --> 00:30:56,820
are and see if you have anything
suspicious that runs at startup and then

361
00:30:56,820 --> 00:31:00,960
lastly the rats will begin and as we saw
those beacons variable vary between

362
00:31:00,960 --> 00:31:06,179
families but there really isn't a point
to a rat if you can't communicate with

363
00:31:06,179 --> 00:31:15,540
your controller sao paulo tori & z km
are probably the two most used often

364
00:31:15,540 --> 00:31:22,590
skaters that these families are using
ala tori is by far the most popular and

365
00:31:22,590 --> 00:31:25,918
it's a big pain in the butt the first
time for the first few times you look at

366
00:31:25,919 --> 00:31:29,640
it but once you get it down it's pretty
easy to be like oh that's what it's

367
00:31:29,640 --> 00:31:32,790
doing it's like deification let's just
rip this out and do this other thing

368
00:31:32,790 --> 00:31:33,450
with it

369
00:31:33,450 --> 00:31:38,730
there's also some automated tools that
help all talk about those during the

370
00:31:38,730 --> 00:31:44,220
demo there's a handful of other sort of
commodity packers like this jar

371
00:31:44,220 --> 00:31:47,940
protecting a puzzle that people are
selling that I don't know why they're

372
00:31:47,940 --> 00:31:57,870
selling because it's basically just like
xor but hey if you can make 22 tools

373
00:31:57,870 --> 00:32:01,860
that I really like to use that are worth
mentioning one is called JW scan it's a

374
00:32:01,860 --> 00:32:06,659
think it only runs on windows and what
it does is it will scan PE files forge

375
00:32:06,660 --> 00:32:12,030
our signatures so it'll look if there's
something in the in the exe that will

376
00:32:12,030 --> 00:32:16,139
eventually call java dot exe there's
probably an embedded jar in that PE

377
00:32:16,140 --> 00:32:21,390
right so the peas probably to drop a jar
and then execute it and there's

378
00:32:21,390 --> 00:32:26,040
something else called cardiff which is a
nice little python package it's part of

379
00:32:26,040 --> 00:32:32,340
a part of java you tools or Java tools
or something like that so many of the

380
00:32:32,340 --> 00:32:36,418
library and what it will do is it will
go through two different jars and tell

381
00:32:36,419 --> 00:32:39,570
you the diff between all the resources
within those jars so it's pretty helpful

382
00:32:40,280 --> 00:32:44,570
if you're if you've got one jar that you
know exactly what it is and another jar

383
00:32:44,570 --> 00:32:52,429
we have no clue what it is you can run
sort of dips against qatar's so deep DRP

384
00:32:52,430 --> 00:32:56,840
skating Jarvis once you've found your
jar whether it's a PE or leave discharge

385
00:32:56,840 --> 00:33:02,360
and you can see there's some type of
obfuscation going on there a lot

386
00:33:02,360 --> 00:33:05,870
well i would say all of these all the
implants that I've seen that use

387
00:33:05,870 --> 00:33:11,750
obfuscation have the DRP station logic
within them so if you hunt around long

388
00:33:11,750 --> 00:33:17,510
enough you can find find it sort of wrap
your brain around what's going on and

389
00:33:17,510 --> 00:33:21,200
then we implement the obfuscation python
so that you can do you see chart

390
00:33:21,200 --> 00:33:27,740
yourself and there's also something
called conditional break points that you

391
00:33:27,740 --> 00:33:33,260
can set an eclipse which is a ide for
java and actually debug jars which will

392
00:33:33,260 --> 00:33:39,020
do the demo this is the tool that i was
talking about this up on github if you

393
00:33:39,020 --> 00:33:44,750
look at jar implants this is definitely
something that you should need to use it

394
00:33:44,750 --> 00:33:49,940
handles a lot of the obfuscation
automatically you just like run this

395
00:33:49,940 --> 00:33:55,310
with your jar feed it a couple extra
parameters and it'll try to dfu skate as

396
00:33:55,310 --> 00:33:56,990
much as it possibly can for you

397
00:33:56,990 --> 00:34:14,179
cool looks like a long time so someone
else this is pimps for OSX like I said

398
00:34:14,179 --> 00:34:18,590
he lists are pretty much all you need to
know but there are a handful of other

399
00:34:18,590 --> 00:34:23,720
ways to persist on OS X is a great talk
that was given at this black head or a

400
00:34:23,719 --> 00:34:27,799
couple black hats ago that basically
details all of the ways to persist on

401
00:34:27,800 --> 00:34:33,620
OSX and I've got these numbers next two
words in my slides I've got like two

402
00:34:33,620 --> 00:34:37,549
long slides at the end of this with a
bunch of references so I talk too fast

403
00:34:37,550 --> 00:34:41,240
or you don't understand my zelda means
go back and read the slides and

404
00:34:41,780 --> 00:34:48,500
no references likes other tools on us XD
trace especially with JDM hot spots

405
00:34:48,500 --> 00:34:51,110
because a lot of times dtrace will be
way too verbose if you're running

406
00:34:51,110 --> 00:34:55,730
something in Java it will spit out
basically everything the GM is doing

407
00:34:55,730 --> 00:35:00,230
with JPM hot spots you can ask for
specific things that the jvm is doing is

408
00:35:00,230 --> 00:35:00,680
kind of cool

409
00:35:00,680 --> 00:35:05,330
like I said knock knock on Windows you
know you

410
00:35:05,330 --> 00:35:10,880
typical things you use proc mon-wed shot
process explorer that kind of stuff and

411
00:35:10,880 --> 00:35:16,010
again similar to other rats registry
keys in case of stockholders guys are

412
00:35:16,010 --> 00:35:23,270
probably familiar with that there's
there's one tool that is really useful

413
00:35:23,270 --> 00:35:27,560
to some people it's not to me but it's
pretty cool and it might be useful to

414
00:35:27,560 --> 00:35:30,680
you so I'll talk about it it's called
bytecode visualizer and it's a plug-in

415
00:35:30,680 --> 00:35:37,460
for eclipse will actually give you an
idea like graph view of java opcodes for

416
00:35:37,460 --> 00:35:44,090
a jar that you're not bugging i'm not an
expert in Java opcodes i can't i can't

417
00:35:44,090 --> 00:35:47,360
like read them and tell you what's going
on so this isn't super useful for me but

418
00:35:47,360 --> 00:35:52,940
if you are might be useful for you
number one tool that if I'm gonna look

419
00:35:52,940 --> 00:35:58,580
at java malware has to be is existing
Java bytecode your it's written by a guy

420
00:35:58,580 --> 00:36:05,509
that actually just wanted to cheat at
Java video games just kind of cool

421
00:36:05,510 --> 00:36:10,280
it takes like three or four different
class quality compilers and wrap them in

422
00:36:10,280 --> 00:36:13,670
a nice gooey so that you can sort of
switch between different ones because a

423
00:36:13,670 --> 00:36:17,690
lot of times a jar will decompile with
one decompiler but it won't work with

424
00:36:17,690 --> 00:36:21,740
another decompiler and it's kind of a
pain to set up a bunch of different

425
00:36:21,740 --> 00:36:29,060
tools on one system so this is like a
nice all in one little package something

426
00:36:29,060 --> 00:36:31,790
else that you should be aware of called
rat decoders I'm not gonna get into it

427
00:36:31,790 --> 00:36:34,520
too much it's up on github go check it
out

428
00:36:34,520 --> 00:36:39,170
it basically is a handful of scripts i
think it's like a official framework now

429
00:36:39,170 --> 00:36:42,530
it's a little more modular that will
repel config information from different

430
00:36:42,530 --> 00:36:47,390
that's not just java ones so it works
with most of the java apps that i talked

431
00:36:47,390 --> 00:36:49,210
about today

432
00:36:49,210 --> 00:36:54,820
some things to be aware of if you're
going to hunt or do any kind of analysis

433
00:36:54,820 --> 00:37:02,140
on these things are rules based on
resource file names within jars for

434
00:37:02,140 --> 00:37:09,279
finding new implants is it works really
well except when those jars are often

435
00:37:09,280 --> 00:37:12,460
skated so if you can get to the point
where you devalue get the jar you can

436
00:37:12,460 --> 00:37:15,610
run your rules on it and like figure out
what it is right away

437
00:37:16,780 --> 00:37:21,250
another thing called George or loader
the you should be aware of if you're

438
00:37:21,250 --> 00:37:26,080
gonna do this analysis is Jar Jar loader
is something that will replace the main

439
00:37:26,080 --> 00:37:29,799
entry point in your manifest with
another jar and I can be a jar on

440
00:37:29,800 --> 00:37:33,940
discourage are remotely somewhere that
can be downloaded so if you're not aware

441
00:37:33,940 --> 00:37:38,020
that can happen it can be really
confusing it was for me when i first

442
00:37:38,020 --> 00:37:42,160
encountered it and the last pit bull
that you should be aware of is that

443
00:37:42,160 --> 00:37:47,200
manifest files are not required for jars
to execute so when you want a jar from

444
00:37:47,200 --> 00:37:50,140
the command line you can tell it the
entry point and it will just ignore

445
00:37:50,140 --> 00:37:53,680
whatever is in the manifest or if
there's a manifest in there it'll just

446
00:37:53,680 --> 00:38:01,779
run that so again something to be aware
some key takeaway items get it

447
00:38:01,780 --> 00:38:11,500
meet Jack yeah yeah with the java rats
that the first I coming out around 2010

448
00:38:11,500 --> 00:38:17,110
they're not really popular but like that
slide showed in the last year and a half

449
00:38:17,110 --> 00:38:22,870
we've had a pretty big increase in
different families and variance they're

450
00:38:22,870 --> 00:38:29,200
used by a whole like spectrum of actors
from very surgical to don't really have

451
00:38:29,200 --> 00:38:33,970
any clue what's going on and if you look
at the tools and techniques that I

452
00:38:33,970 --> 00:38:37,629
mentioned in these slides and the
references at the end of the slides it

453
00:38:37,630 --> 00:38:43,300
you look at this I promise and if you do
this kind of stuff or you're interested

454
00:38:43,300 --> 00:38:47,590
in it reach out to me or come talk to me
i'm more than willing to trade your

455
00:38:47,590 --> 00:38:52,180
roles configuration extraction scripts
tips

456
00:38:52,180 --> 00:38:53,118
whatever

457
00:38:53,119 --> 00:38:58,009
so thanks very kind thanks everyone for
getting up this morning and coming to my

458
00:38:58,009 --> 00:39:03,349
talk thanks all these cool people for
being really awesome i'll take questions

459
00:39:03,349 --> 00:39:06,799
but I think I have time for a demo so
let's do that first

460
00:39:10,190 --> 00:39:17,509
this is gonna be interesting because i
can't see who knows the shortcut for

461
00:39:17,509 --> 00:39:40,309
like changing your display stuff anyone
display your displays you guys see what

462
00:39:40,309 --> 00:39:56,569
I'm doing right now there's the X button
a Spartan enter the files are in the

463
00:39:56,569 --> 00:40:00,319
computer away

464
00:40:01,069 --> 00:40:15,619
alright forget things really small so
what I'm gonna do is I'm going to take a

465
00:40:15,619 --> 00:40:21,920
think that JSOC implant this fall right
here this is malware and we're going to

466
00:40:21,920 --> 00:40:32,690
look at it and if I can figure out
things here is so the first thing I'd

467
00:40:32,690 --> 00:40:38,029
like to do when i'm looking at your
implants is open up this bytecode your

468
00:40:38,029 --> 00:40:41,029
thing and you can pilot and try and look
at the source

469
00:40:42,280 --> 00:40:46,630
and by Cody was really awesome can just
open it up and the first thing I look at

470
00:40:46,630 --> 00:40:51,730
is the manifest what gets executed first
which is this main class file so let's

471
00:40:51,730 --> 00:40:54,730
go look at that

472
00:40:55,510 --> 00:41:13,330
oh it's ugly right so let's try maybe a
different decompiler oh god okay so you

473
00:41:13,330 --> 00:41:18,430
can play around with this stuff and you
can see like it's just it's it's

474
00:41:18,430 --> 00:41:21,460
terrible what are these things

475
00:41:21,460 --> 00:41:27,910
who knows but I kind of cheated and this
is a bit can so I know it's packed

476
00:41:28,420 --> 00:41:36,910
no i don't who needs updates so what I'm
gonna do is I'm gonna unpack it using

477
00:41:36,910 --> 00:41:38,470
conditional breakpoints in java

478
00:41:38,470 --> 00:41:41,589
so the first thing that you have to do
is create a new java project

479
00:41:41,590 --> 00:42:00,010
mmm doing something rename it and you
have to include an external jar which is

480
00:42:00,010 --> 00:42:08,560
the implant we can see that it's still
the same jar you know about my sleeve

481
00:42:08,560 --> 00:42:15,820
open up the manifest file let's look at
that same entry . what you can do is go

482
00:42:15,820 --> 00:42:23,470
into java runtime and set a breakpoint
on a specific method that gets called by

483
00:42:23,470 --> 00:42:27,609
this malware to unpack itself which is
used by a lot of malware it's packed at

484
00:42:27,610 --> 00:42:31,450
least jump out of the tack and it's
called this

485
00:42:32,849 --> 00:42:45,299
and what this does is it's a it's a
method where it's a class that basically

486
00:42:45,299 --> 00:42:51,779
takes section in memory and then turns
it into like a jar so if you think about

487
00:42:51,779 --> 00:42:55,440
when a jar is unpacking itself it's
going to do some in some math or some

488
00:42:55,440 --> 00:42:59,489
manipulation on some data eventually
have a full jar in memory and then

489
00:42:59,489 --> 00:43:03,359
execute from that memory so what we're
gonna do is take when it gets to that

490
00:43:03,359 --> 00:43:11,038
point take that memory just not going to
disk as a jar and I should have a break

491
00:43:11,039 --> 00:43:24,839
. set somewhere already is a cheated
who's used eclipse before anyone it's

492
00:43:24,839 --> 00:43:28,769
kind of buggy like it's it's nice but
there's there's some weird things i

493
00:43:28,769 --> 00:43:34,979
found it like I have this breakpoint set
i know it's set for some reason it won't

494
00:43:34,979 --> 00:43:37,979
show unless I like restarting clips

495
00:43:42,029 --> 00:43:45,029
let's see if we can find it

496
00:44:00,390 --> 00:44:17,009
order

497
00:44:20,720 --> 00:44:38,930
yeah okay so you can see the breakpoints
outset for some reason it wasn't before

498
00:44:38,930 --> 00:44:43,279
and here's the code that it uses
basically once it reaches this condition

499
00:44:43,280 --> 00:44:46,640
it will stop and execute this code and
all its doing is getting the arguments

500
00:44:46,640 --> 00:44:51,529
for a jar inputstream the call for your
input stream identifying the size of was

501
00:44:51,530 --> 00:44:56,330
getting passed to it and then just
writing it to disk my desktop for me so

502
00:44:56,330 --> 00:45:21,590
let's debug this I'm gonna have to sorry
we think so there's two types of jobs

503
00:45:21,590 --> 00:45:25,850
like jars was an appellate was an
application and apple gets run in a

504
00:45:25,850 --> 00:45:31,279
browser and applications like standalone
so we're gonna include those tell the

505
00:45:31,280 --> 00:45:35,210
main entry point that i want to execute
and then hit the book and it should be

506
00:45:35,210 --> 00:45:40,130
nice yeah cool nice pop a little drawing
of the debugger and I don't really care

507
00:45:40,130 --> 00:45:44,000
about it from here on out because it's
written this cool unpacked our for me

508
00:45:44,000 --> 00:45:55,520
so we're gonna open that up in our
decompiler and look at it so you can see

509
00:45:55,520 --> 00:45:59,090
everything's been sort of renamed it
looks a little bit nicer we open the

510
00:45:59,090 --> 00:46:03,950
manifest it's got a new entry point we
can go there and check it out and

511
00:46:03,950 --> 00:46:05,210
hopefully just read it

512
00:46:05,210 --> 00:46:11,540
Oh try different compiler cool

513
00:46:13,280 --> 00:46:17,990
so if you look at these things long
enough you can notice that like these

514
00:46:17,990 --> 00:46:24,680
are still really where class and method
names and these strings are not strength

515
00:46:24,680 --> 00:46:32,480
so this is actually allegory it's a
pretty common obfuscator used and it's

516
00:46:32,480 --> 00:46:35,420
still sort of the pant the ass i'm not
sure where the deactivation code is

517
00:46:35,420 --> 00:46:42,020
located but like you can't read anything
that's going on so lame

518
00:46:42,020 --> 00:46:45,770
we're gonna use this tool called that
jar decompiler thing I was talking about

519
00:46:45,770 --> 00:46:51,410
and what it does is going to read in
that jar that we unpacked from memory

520
00:46:51,410 --> 00:46:59,720
right to a new new jar on disk using an
alt or allegory transformer to decrypt

521
00:46:59,720 --> 00:47:04,250
the strings and you have defeated the
version of the java runtime that you

522
00:47:04,250 --> 00:47:07,910
want so we're just going on that it's
going to spit out a bunch of things to

523
00:47:07,910 --> 00:47:10,670
screen that I really care about and then
tell me that didn't work but it's a lie

524
00:47:10,670 --> 00:47:19,700
and it really did work and we're gonna
go look at that unpacked on obfuscate

525
00:47:19,700 --> 00:47:39,259
jar so new jar to get this set and again
we have the same entry point but this

526
00:47:39,260 --> 00:47:47,090
time we should be able to read the
strings and yet you can't so you can see

527
00:47:47,090 --> 00:47:54,080
this is avi skated tell exactly what
commands will be Ron things like that

528
00:47:54,080 --> 00:47:59,210
and i believe these has a cool user
agent that we could then go write a

529
00:47:59,210 --> 00:48:02,180
signature offer

530
00:48:02,180 --> 00:48:06,859
yeah so you can see here like all the c2
like HTTP headers in the clear

531
00:48:06,860 --> 00:48:11,030
so at this point you've gotten all the
way to the left on the trials of

532
00:48:11,030 --> 00:48:14,630
tribulation where you just have source
code and its really really easy to

533
00:48:14,630 --> 00:48:19,700
reverse-engineer so now with that are
there any questions

534
00:48:21,090 --> 00:48:25,110
sorry we're good

535
00:48:27,960 --> 00:48:35,220
so the question was how he can how can
he contact me i'm on twitter i can give

536
00:48:35,220 --> 00:48:38,700
you a business card you can email me I
would talk after this I'll be here for

537
00:48:38,700 --> 00:48:41,700
most of the afternoon

538
00:48:41,700 --> 00:49:00,000
yes I haven't found any so if you only
execute sign jars that's probably a

539
00:49:00,000 --> 00:49:01,530
pretty good strategy

540
00:49:01,530 --> 00:49:21,930
yeah so i haven't seen anything like
that now it could be misused very easily

541
00:49:21,930 --> 00:49:25,890
right where you just have jars just spit
out all over the place just like kind of

542
00:49:25,890 --> 00:49:32,490
spray the disc with jars lost

543
00:49:32,490 --> 00:49:38,160
cool thanks for coming guys appreciate
it

