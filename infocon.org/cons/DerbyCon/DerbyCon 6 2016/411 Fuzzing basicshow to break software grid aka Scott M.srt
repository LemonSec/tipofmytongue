1
00:00:00,000 --> 00:00:05,549
the door shut and we ready already
crashing johnny's wait a moment you

2
00:00:05,549 --> 00:00:07,379
something he goes to rehab

3
00:00:07,379 --> 00:00:11,700
yeah we're going to argue alright well
thank you for coming to my soft buzzing

4
00:00:11,700 --> 00:00:20,130
basics how to write software and by the
way that working really bad day doesn't

5
00:00:20,130 --> 00:00:27,599
understand that I'm grid or Scott i'll
answer either one whichever I my husband

6
00:00:27,599 --> 00:00:29,609
my wife's on the back so if you see here

7
00:00:29,609 --> 00:00:35,730
be nice to her I'm an avid scuba diver
so if you're a diver and I scoops box

8
00:00:35,730 --> 00:00:40,980
hit me up i'm a hacker writer of
software but i can tell my boss only use

9
00:00:40,980 --> 00:00:47,099
my powers for good and not for evil most
time and I'm gonna security worker bee

10
00:00:47,100 --> 00:00:52,050
at company X my boss would ask me up to
the vault where I were just so I don't

11
00:00:52,050 --> 00:00:57,059
Marisol work what's that doesn't work

12
00:00:57,899 --> 00:01:06,390
yeah sometimes ok agenda white fuzz i'm
gonna show you some cleansing methods

13
00:01:06,390 --> 00:01:11,520
types of causing some amazing software
I've got lots of examples and samples

14
00:01:11,520 --> 00:01:16,229
and those will be on my github page that
you see there are going to try to give

15
00:01:16,229 --> 00:01:22,049
up there before the end of the con but
not certain that they will go up there

16
00:01:22,049 --> 00:01:26,850
right after if nothing else some tips
and tricks regarding buzzing and then

17
00:01:26,850 --> 00:01:30,360
leave some time for some questions and
comments

18
00:01:31,140 --> 00:01:37,530
ok starting off first of all this time I
don't test your code production but you

19
00:01:37,530 --> 00:01:41,939
know that doesn't always work done
before but Wi-Fi is it spot the break

20
00:01:41,939 --> 00:01:48,449
software i was a programmer for a very
long time so obviously it's more fun to

21
00:01:48,450 --> 00:01:52,860
break things that is develop find
exploitable bugs really fun

22
00:01:52,860 --> 00:01:56,490
anybody out there to exploit death few
people

23
00:01:56,490 --> 00:02:01,199
yeah you gotta do buzzing to find
exploits I've done a couple of exploits

24
00:02:01,200 --> 00:02:06,750
just for work-related used to have been
really simple so I'm very much a

25
00:02:06,750 --> 00:02:08,470
beginner that

26
00:02:08,470 --> 00:02:15,040
more thorough testing generally when you
fuzz you can get it put that users are

27
00:02:15,040 --> 00:02:20,709
programmers often don't consider or
can't make like a lot of in colored

28
00:02:20,710 --> 00:02:26,710
stuff or passing knowles and that's what
buzzing definitely helps increase your

29
00:02:26,710 --> 00:02:33,070
software quality but in my mind the most
important reason fuzzes it helps hold

30
00:02:33,070 --> 00:02:36,910
your vendors accountable for poorly
written and totally tested color I can't

31
00:02:36,910 --> 00:02:42,310
count the number of times I've done fuzz
testing on something that my company has

32
00:02:42,310 --> 00:02:47,620
bought and it's just totally falling
apart so when you get back with a vendor

33
00:02:47,620 --> 00:02:49,750
you say hey can you fix this

34
00:02:49,750 --> 00:02:53,230
they say well why did you pass that in
the first place to the input it only

35
00:02:53,230 --> 00:03:03,220
supposed to take you know 1390 okay
Esther crap that we have exactly know

36
00:03:03,220 --> 00:03:06,070
but no regular user would do that

37
00:03:06,070 --> 00:03:10,630
okay buzzing methods of basically I kind
of boil it down to three

38
00:03:11,140 --> 00:03:14,470
there's manual where you just put stuff
in yourself

39
00:03:14,470 --> 00:03:20,890
automated using the fuzzing software
writing your own buzzer and I to the

40
00:03:20,890 --> 00:03:25,510
wireless in there because i missed a
little bit with MDK three and cali but

41
00:03:25,510 --> 00:03:30,190
not much more than that it is kind of
interesting so that's something I want

42
00:03:30,190 --> 00:03:39,760
to do as types of buzzing basically i
see is just to local and remote local

43
00:03:39,760 --> 00:03:46,480
being buzzing something that you've got
on your own machine as far as i know you

44
00:03:46,480 --> 00:03:50,470
pretty much got to do that for export
development and gives you full control

45
00:03:50,470 --> 00:03:55,600
of the virus so you've got you
everything in one spot remote buzzing

46
00:03:55,600 --> 00:03:59,049
something that's installed elsewhere
like a web application a lot of what I

47
00:03:59,049 --> 00:04:03,940
deal with this web applications but it's
more restricted in terms of control

48
00:04:04,930 --> 00:04:10,510
ideally if you can get to look at the
server while you're doing your fuzzy for

49
00:04:10,510 --> 00:04:15,250
instance if I'm was testing a web
application that one of our developers

50
00:04:15,250 --> 00:04:19,899
did you can get pretty immediate
feedback on how it's going based on how

51
00:04:19,899 --> 00:04:20,690
the servers

52
00:04:20,690 --> 00:04:26,180
bonding or not responding but the
downside of that is routers switches

53
00:04:26,180 --> 00:04:31,610
firewall stuff sitting in between can be
kind of problematic depend on how their

54
00:04:31,610 --> 00:04:40,700
tune so something to harm your network
guys about software basically anything

55
00:04:40,700 --> 00:04:47,150
allowing interaction with your target
can be considered a buzzer for windows

56
00:04:47,150 --> 00:04:52,969
the two that i have used a peach buzzer
the public addition the community

57
00:04:52,970 --> 00:04:57,860
edition i know they have a professional
edition I've not used it but watch some

58
00:04:57,860 --> 00:05:05,540
of the videos on it looks pretty decent
perks week for a closing on windows i

59
00:05:05,540 --> 00:05:13,850
mostly use cali sweet bed doona . that
poem those other ones that you see spike

60
00:05:13,850 --> 00:05:22,340
him i watch that the Internet user
scripts are pretty decent in terms of

61
00:05:22,340 --> 00:05:27,109
closing windows peach fuzzer the
community . each browser com is a good

62
00:05:27,110 --> 00:05:33,710
website they've got all kinds of good
tutorials there the the peach pits the

63
00:05:33,710 --> 00:05:39,440
fuzz definitions are done in xml so
having a good xml his head as xml editor

64
00:05:39,440 --> 00:05:45,530
excuse me is helpful but it's not
require the xml for the peach pits is

65
00:05:45,530 --> 00:05:51,919
particularly complex but having a good
editor will let you kind of great stuff

66
00:05:51,919 --> 00:05:53,659
out properly so you can follow

67
00:05:53,660 --> 00:05:59,750
well there are a number of peach pits
available on the internet when you

68
00:05:59,750 --> 00:06:03,950
install the peach buzzer they've got
samples folder that's got some good

69
00:06:03,950 --> 00:06:09,950
templates and stuff in their pjs good
feedback on reproducing crashes and

70
00:06:09,950 --> 00:06:13,849
logging in phone I've got some examples
of that in a bit

71
00:06:14,450 --> 00:06:18,950
the like I said the tutorials are really
good i highly recommend working through

72
00:06:18,950 --> 00:06:23,030
those if you've never worked with peach
fuzz before those tutorials will really

73
00:06:23,030 --> 00:06:27,650
bring up to speed quickly on peach and
that link at the bottom

74
00:06:28,720 --> 00:06:34,060
is essentially a collection of other
links that a user on the beach forums

75
00:06:34,060 --> 00:06:40,660
posted listing various different
resources that you can go to bone up on

76
00:06:40,660 --> 00:06:44,410
buzzing and kind of get your feet wet so
to speak

77
00:06:45,820 --> 00:06:50,560
I can't think what he posted a number of
different links for beginner

78
00:06:50,560 --> 00:06:53,950
intermediate and advanced buzzing so
it's really helpful and agriculture

79
00:06:53,950 --> 00:06:56,950
regularly myself just refresh my memory

80
00:06:57,460 --> 00:07:01,840
there are some gotchas with the
community edition which buzzer I

81
00:07:01,840 --> 00:07:07,150
reported these bugs while ago and
essentially got back a response and well

82
00:07:07,150 --> 00:07:10,450
you're interested in are paid products
so we'll get to this eventually

83
00:07:10,450 --> 00:07:13,900
okay well that's why no big deal really

84
00:07:13,900 --> 00:07:20,380
you these mutators are simply misspelled
so if you spell it correctly they won't

85
00:07:20,380 --> 00:07:24,280
work properly so you have the
misspelling they're not all of the

86
00:07:24,280 --> 00:07:31,659
samples on peach work out-of-the-box and
those pills can be tough to write in

87
00:07:31,660 --> 00:07:36,880
debug so we're getting started with
peach you definitely want to stick with

88
00:07:36,880 --> 00:07:41,530
something simple first and then kind of
expand on it from there it's not too

89
00:07:41,530 --> 00:07:48,039
hard to make a peach pit for HTTP
traffic since the HTTP specification is

90
00:07:48,040 --> 00:07:54,160
fairly simple so it's not too difficult
to do one of those and as i was working

91
00:07:54,160 --> 00:07:58,990
through one of the tutorials i found out
that this particular mutator and killed

92
00:07:58,990 --> 00:08:05,200
windows when you're buzzing wait files
so depending on what you're doing what

93
00:08:05,200 --> 00:08:11,320
you're buzzing you may want to exclude
certain mutators not an example that I

94
00:08:11,320 --> 00:08:16,090
some tips on writing peach you just run
one piece of the command line and just

95
00:08:16,090 --> 00:08:20,859
gives you a list of all those options
peach minus T will validate your peach

96
00:08:20,860 --> 00:08:27,820
pit doing minus one will just sample
running but not apply any mutators to it

97
00:08:27,820 --> 00:08:30,510
will just run it with the data that you
give it and then

98
00:08:30,510 --> 00:08:36,900
so you can see how it works how it calls
your target program and in assuming you

99
00:08:36,900 --> 00:08:42,299
pass the correct data through the Peach
Pit your target program will return when

100
00:08:42,299 --> 00:08:45,270
it's supposed to return if you want to
give it back within what

101
00:08:45,270 --> 00:08:51,569
p minus C will give you a count of the
test iterations which will let you know

102
00:08:51,570 --> 00:08:57,780
how long it may take a peach minus P
will let you run peach fuzzer and

103
00:08:57,780 --> 00:09:02,189
parallel but it doesn't do any
networking it just divide the number of

104
00:09:02,190 --> 00:09:07,350
tests generations by the machine so put
some simple math I put their you have

105
00:09:07,350 --> 00:09:12,360
30,000 test duration is just going to
divided thirds on each machine so

106
00:09:12,360 --> 00:09:18,750
especially when you get up into the
areas like if you're buzzing HTTP for

107
00:09:18,750 --> 00:09:23,520
instance and you've got a big request
that has a lot of request headers you

108
00:09:23,520 --> 00:09:28,110
may want to split multiple machines so
you're finally we'll finish faster you

109
00:09:28,110 --> 00:09:32,400
can quickly run into tens of thousands
or hundreds of thousands of iterations

110
00:09:32,400 --> 00:09:39,449
depending on the size of your HDTV
requires ok so i built this peach pit

111
00:09:39,450 --> 00:09:43,590
from the online tutorial and like I said
I apologize you guys are back they have

112
00:09:43,590 --> 00:09:47,550
difficulty seeing it but I'm going to
put this presentation as well as all the

113
00:09:47,550 --> 00:09:52,290
samples and examples on give up
afterwards go through it but basically

114
00:09:52,290 --> 00:09:58,620
the way this breaks down is that the
data model describes the data that

115
00:09:58,620 --> 00:10:04,830
peaches going to consume in this case is
going to be a doctor file so it's just

116
00:10:04,830 --> 00:10:11,580
defined blah the state model defines how
peaches going to interact with it and

117
00:10:11,580 --> 00:10:16,740
then where it's going to pull its info
from so in this case it's referring to

118
00:10:16,740 --> 00:10:23,730
this PNG the I've got the test data in
this case moving into the EMG test files

119
00:10:23,730 --> 00:10:28,860
folder is going to pull out every one of
the dot PNG files there mutated in some

120
00:10:28,860 --> 00:10:31,459
way either flipping bits or

121
00:10:31,459 --> 00:10:38,059
messing with the metadata whatever kind
of indicators that you applied to it and

122
00:10:38,059 --> 00:10:43,368
then the action type called is going to
actually launch the process that you

123
00:10:43,369 --> 00:10:49,009
want to buzz in this case it's the ms
paint that you can see down in the agent

124
00:10:49,009 --> 00:10:56,509
areas so essentially what this is going
to do it's going to launch pain with

125
00:10:56,509 --> 00:11:05,119
buzz . that is coming from this area so
it's kind of profile mutated remember

126
00:11:05,119 --> 00:11:12,709
the fuzz dot PNG and then call ms paint
peach does require the windows debugging

127
00:11:12,709 --> 00:11:19,969
tools that that's what the wind but path
there is for the documentation says that

128
00:11:19,970 --> 00:11:26,209
you don't have to supply that but peach
rarely can seem to find it so I just

129
00:11:26,209 --> 00:11:32,660
spell it out literally there start on
call this does the launch here with

130
00:11:32,660 --> 00:11:41,839
launches the paint process and then cpu
kill true if the cpu spikes at a hundred

131
00:11:41,839 --> 00:11:47,059
percent for certain like the time
they're peach is going to kill that the

132
00:11:47,059 --> 00:11:53,600
succession and then move on to the next
the monitors that you see at the bottom

133
00:11:53,600 --> 00:12:00,829
in this case i'm watching the heat and
the next page here

134
00:12:00,829 --> 00:12:09,679
ok it's just yeah just watching to eat
their time the publisher class says okay

135
00:12:09,679 --> 00:12:16,490
this is my fuzz input from my folder of
files that were my PNG files are located

136
00:12:16,490 --> 00:12:21,199
strategy class random i'm going to
randomly hop around through the various

137
00:12:21,199 --> 00:12:27,829
mutated cases and the larger class is
we're going to log output from the fuzz

138
00:12:27,829 --> 00:12:34,969
run so if on the say that first time and
it runs through and paint doesn't crash

139
00:12:34,970 --> 00:12:39,470
into anything i was just going to
iterate counter when it does crash

140
00:12:39,470 --> 00:12:42,860
then that's where things get more
interesting in peace clause really

141
00:12:42,860 --> 00:12:50,750
helpful detailed info on how to take
your crash case and then weaponize it

142
00:12:50,750 --> 00:13:00,170
through an export gives you a stack dog
traces and all that so a pizza from the

143
00:13:00,170 --> 00:13:06,380
command line takes one program a
relatively similar in this case the data

144
00:13:06,380 --> 00:13:12,200
model is the name of the program i want
to buzz the extract . exe which was

145
00:13:12,200 --> 00:13:18,080
something that was built by one of our
programmers the way this program work

146
00:13:18,080 --> 00:13:22,490
was it took parameters separated by
spaces so that's the reason for the

147
00:13:22,490 --> 00:13:27,890
space right after the extract . exe i
define another data model with the

148
00:13:27,890 --> 00:13:33,710
parameter which the first run-through
it's going to be c colon backslash scans

149
00:13:33,710 --> 00:13:38,270
and outputs and extract the scans folder
if we wanted to

150
00:13:39,050 --> 00:13:43,490
if we had a command line program that
fun that you want to cause it took more

151
00:13:43,490 --> 00:13:48,530
than one parameter you would just define
different data models and I just call it

152
00:13:48,530 --> 00:13:57,230
arbitrarily grounder to render three so
on so forth the state model in this case

153
00:13:57,230 --> 00:14:03,980
what it does is it's going to build a
batch file which then has extract dhcp

154
00:14:03,980 --> 00:14:06,380
space parameter in it

155
00:14:06,380 --> 00:14:10,670
not really interested in buzzing in this
case I wasn't interested in buzzing

156
00:14:10,670 --> 00:14:16,520
anything but the parameter to the
extract dhcp program that was why I

157
00:14:16,520 --> 00:14:20,449
layout this data model and the state
model way it is and the tutorial goes

158
00:14:20,450 --> 00:14:28,250
into more in-depth stuff on this but as
before if we had a command line program

159
00:14:28,250 --> 00:14:32,090
that took more than one parameter and
you want the fuzz those parameters you

160
00:14:32,090 --> 00:14:38,780
would define them in the state model
here output parameter to brother three

161
00:14:38,780 --> 00:14:45,980
songs so so and then the action near the
bottom was making a call to a run

162
00:14:45,980 --> 00:14:48,710
program method which actually runs the

163
00:14:48,710 --> 00:14:58,430
X file and this buzzing was taking place
on the windows when agent the command

164
00:14:58,430 --> 00:15:02,780
line you can see that actually calls is
going to call the columns go programming

165
00:15:02,780 --> 00:15:10,610
fat which has my target program and in
the parameter that buzz the debug path

166
00:15:10,610 --> 00:15:16,580
don't want to kill the cpu spices
hundred percent this case and then

167
00:15:16,580 --> 00:15:23,060
depending on what you're buzzing you may
not want to use for the way frames and

168
00:15:23,060 --> 00:15:32,180
i'll call or wait for exit time out
those you may want to leave and I go

169
00:15:32,180 --> 00:15:36,319
back and forth sometimes I leave them as
they are as the default just because

170
00:15:36,320 --> 00:15:40,670
that seems to work for me but if you
start getting good results or your

171
00:15:40,670 --> 00:15:45,410
target program starts hanging you may
want to use one or both of those to let

172
00:15:45,410 --> 00:15:51,650
the program finishes process before
ghost of X plus so we're watching the

173
00:15:51,650 --> 00:15:57,920
heat begin and this little pop-up
watcher here if you have a program that

174
00:15:57,920 --> 00:16:03,469
has a pop-up it has to be responded to
before going to the next case each can

175
00:16:03,470 --> 00:16:08,750
handle that if you give it the name of
the pop-up window which will close

176
00:16:08,750 --> 00:16:12,920
automatically go to the next bus case so
you have to sit there and click and

177
00:16:12,920 --> 00:16:19,130
dismiss a window if you're going on all
buzzing for instance three pretty nifty

178
00:16:19,130 --> 00:16:24,890
stuff so we're wrapping up here in this
test taste of strategy class sequential

179
00:16:24,890 --> 00:16:29,780
i'm going to go literally from 1 to the
end of the test cases that peach defines

180
00:16:29,780 --> 00:16:36,620
the fuzzing run the publisher class hear
the call underscore program about that

181
00:16:36,620 --> 00:16:45,890
you see that is the actual container of
as i said the extract the THC space and

182
00:16:45,890 --> 00:16:52,490
in retro buzz I'm writing logs to that
area you can write the logs anywhere i

183
00:16:52,490 --> 00:16:56,510
just left their default because that's
where I liked it and then

184
00:16:56,510 --> 00:17:01,250
excluding mutators depending on what
you're buzzing you may not want to

185
00:17:01,250 --> 00:17:06,319
bother with closing every single case
all that gives you the best pausing

186
00:17:06,319 --> 00:17:12,020
coverage it makes you up time that going
to give you unnecessary results or stuff

187
00:17:12,020 --> 00:17:16,639
that's not valid for what you're doing
so you can drop certain mutators and

188
00:17:16,640 --> 00:17:20,750
like I said there's a big list of all
the mutaters on the beach website that

189
00:17:20,750 --> 00:17:27,349
the the piece developers went through so
you can see what the mutator does and

190
00:17:27,349 --> 00:17:30,919
then make a determination whether or not
that's going to be useful for you and

191
00:17:30,920 --> 00:17:38,000
whatever program is your place so you
can drop you notice there the near the

192
00:17:38,000 --> 00:17:43,100
bottom of the misspellings so if you
were to spell those two mutators

193
00:17:43,100 --> 00:17:48,860
correctly ignore or teach me throw an
error when you try to run it so I wanted

194
00:17:48,860 --> 00:17:51,020
to make sure i have that in there

195
00:17:51,020 --> 00:17:55,610
you included that right yes okay yeah
they don't they don't tell you there is

196
00:17:55,610 --> 00:17:59,570
still that's right they don't tell you
that you have to actually try to run it

197
00:17:59,570 --> 00:18:03,139
spelled correctly and then dies and then
you wonder what's going on

198
00:18:03,140 --> 00:18:12,500
ok so long as something I gotta jump out
here for a second to show you this the

199
00:18:12,500 --> 00:18:20,090
way peach logs i guess it is helpful to
let you know exactly what's going on

200
00:18:20,090 --> 00:18:26,419
so when it hits something that's an
error where the program frozen air

201
00:18:26,420 --> 00:18:34,370
crashes it says okay I can do it once
can reproduce so in the false folder

202
00:18:34,370 --> 00:18:38,419
this will be this will be a subfolder
underwear you've got peach logging so if

203
00:18:38,420 --> 00:18:43,790
you've got peach logging to my director
/ logs then within that there will be a

204
00:18:43,790 --> 00:18:49,250
fault and then the specifics on what's
going on so you can see here we've got a

205
00:18:49,250 --> 00:18:55,220
memory address it says exploitable the
17 821 was the specific test case that

206
00:18:55,220 --> 00:19:02,450
it died so within that we've got an
initial so this was the first time all

207
00:19:02,450 --> 00:19:09,650
but it died on the first time so in this
case there's my program and then this

208
00:19:09,650 --> 00:19:17,450
was the parameter passed to the extract
DXE that the extract dhcp program died

209
00:19:17,450 --> 00:19:27,530
on so he says okay it guide wants and he
wrote the dividing stuff here so then

210
00:19:27,530 --> 00:19:29,060
one level up

211
00:19:29,060 --> 00:19:33,679
it says okay died once i'm going to try
to reproduce you have to try to

212
00:19:33,680 --> 00:19:38,210
reproduce it manually which is going to
try a second time with the exact same

213
00:19:38,210 --> 00:19:45,020
input to see if the program crashes the
same time so there's the extract the THC

214
00:19:45,020 --> 00:19:54,950
and same strings before what killed
program and so it is ok i was able to

215
00:19:54,950 --> 00:19:56,210
reproduce it

216
00:19:56,210 --> 00:20:01,880
this is most likely above that I think
is exploitable and here's why we got the

217
00:20:01,880 --> 00:20:06,050
windows debug engine description and it
pulls this from the windows debugging

218
00:20:06,050 --> 00:20:11,389
tools that you've got this all so I've
got a stack trace and all this good

219
00:20:11,390 --> 00:20:21,140
stuff here and then new bottom you can
see above title user-mode write access

220
00:20:21,140 --> 00:20:25,970
violation starting at this area they're
not even also its exploitable so

221
00:20:25,970 --> 00:20:32,570
something if you're writing exploits
like i'll pay this is worth looking into

222
00:20:32,570 --> 00:20:39,379
here because I've got a reproducible
crash that happened in the same way with

223
00:20:39,380 --> 00:20:45,440
the same string and according to what
the info here tells me the debugging

224
00:20:45,440 --> 00:20:51,320
engine all this stuff which like I said
I am NOT an exploit developer yeah my

225
00:20:51,320 --> 00:20:54,020
earrings

226
00:20:54,020 --> 00:20:59,389
but peach logs all this stuff with the
help of windows above engine so you can

227
00:20:59,390 --> 00:21:07,640
as an export developer start the process
of going through right you're writing

228
00:21:07,640 --> 00:21:20,300
your skeleton exploit and hopefully
weaponizing actually that I within if

229
00:21:20,300 --> 00:21:24,649
you get a false positive and each refers
to something that's false positive if it

230
00:21:24,650 --> 00:21:33,320
can't reproduce it you'll see something
like this not reproducible and directing

231
00:21:33,320 --> 00:21:38,990
unknown or unavailable or something like
that where pieces ok crashes but I

232
00:21:38,990 --> 00:21:42,800
couldn't make it crash the second time
in a row so i'm going to assume that

233
00:21:42,800 --> 00:21:48,980
that's not going to be something that's
exploit if you were doing Export

234
00:21:48,980 --> 00:21:53,060
Development these will probably drop to
the bottom of your priority list just

235
00:21:53,060 --> 00:22:01,070
because they're not as likely to lead to
code execution but peach logs is way

236
00:22:01,070 --> 00:22:06,169
around through the status txt file and
it will tell you

237
00:22:06,170 --> 00:22:11,900
interracial 100 of the total iteration
200 total so you can see along the way

238
00:22:11,900 --> 00:22:15,770
how far is getting so pretty stuff

239
00:22:16,550 --> 00:22:23,000
oh that's just a hello

240
00:22:24,020 --> 00:22:35,770
ok it's still work there with me okay
switching here

241
00:22:35,770 --> 00:22:41,710
sweet bird is not really a fuzzer per se
but repeaters handy if you're doing

242
00:22:41,710 --> 00:22:48,730
manual fuzzing because you can just
simply grab the intercepted request

243
00:22:49,300 --> 00:22:55,149
HTTP with West coming over to Peter with
the right click and then little bit

244
00:22:55,150 --> 00:23:00,700
however you want i like to use it for
manual fuzzing of web applications the

245
00:23:00,700 --> 00:23:03,970
color and prepare depending on what
you're doing a pretty easy as far as

246
00:23:03,970 --> 00:23:10,570
unraveling base64 encoding viewstate on
the dotnet apps for instance that's a

247
00:23:10,570 --> 00:23:17,110
little hard to see that this particular
application that was dealing with this

248
00:23:17,110 --> 00:23:24,280
image handler item in it and it took a
query string parameter of an ID so i put

249
00:23:24,280 --> 00:23:26,860
the just as a marker of myself

250
00:23:26,860 --> 00:23:32,229
stepping through it when I want to
insert my buzz data and then I wanted to

251
00:23:32,230 --> 00:23:38,560
try to buzz the asp.net sessionid he saw
mark that with a buzz day like I said

252
00:23:38,560 --> 00:23:43,960
that's that's not a bird sweet function
per se but just a marker for me say it

253
00:23:43,960 --> 00:23:48,760
ok these are areas that I want to come
back to Africa gone through the various

254
00:23:48,760 --> 00:23:59,680
parts of the application you can see
what's that I have once or twice I don't

255
00:23:59,680 --> 00:24:05,350
have the pro version of sweet i'm just
using the free version but i'm still

256
00:24:05,350 --> 00:24:08,199
working on trying to figure out my way
around

257
00:24:08,200 --> 00:24:13,570
sweet and then getting some getting some
funding to get the pro version of birth

258
00:24:13,570 --> 00:24:24,100
how they switching gears to the kali
linux stuff then the brute force export

259
00:24:24,100 --> 00:24:31,149
detector it's a very vulnerable been
around for a long time anybody use bed

260
00:24:31,150 --> 00:24:40,480
everybody ok it's a network protocol got
modules for ftp smtp HTTP several others

261
00:24:40,480 --> 00:24:44,590
there it has a set list of strings for
fuzzing so it doesn't do

262
00:24:44,590 --> 00:24:47,679
pation like a peach does

263
00:24:47,680 --> 00:24:53,350
you can add your own strings by changing
colors coral and it's pretty easy to to

264
00:24:53,350 --> 00:24:54,520
follow

265
00:24:54,520 --> 00:24:57,940
it's a general use buzzer you kind of
fired off and forget it

266
00:24:57,940 --> 00:25:02,680
depending on what you're doing you might
want to mod some of the modules to pass

267
00:25:02,680 --> 00:25:08,740
in specific things I've used it a lot
for HTTP like I said I deal with web

268
00:25:08,740 --> 00:25:16,810
applications so HTTP in a fairly simple
protocol you can model that modules how

269
00:25:16,810 --> 00:25:23,710
do you like a kid does not have very
good feedback in terms of what caused

270
00:25:23,710 --> 00:25:27,970
the crash so i'll start wireshark 40
sharp or something like that so i can

271
00:25:27,970 --> 00:25:35,080
get a packet capture going so i can see
exactly what goes on if i get crash that

272
00:25:35,080 --> 00:25:41,500
these let's buzz streams that uses did
was designed and developed primarily to

273
00:25:41,500 --> 00:25:46,900
buzz see applications so there's a lot
of seem related stuff there the format

274
00:25:46,900 --> 00:25:54,760
strings for see there you may recognize
on with the code stuff and the large

275
00:25:54,760 --> 00:25:56,950
majors so stuff

276
00:25:56,950 --> 00:26:03,730
these were items that developers put in
that often cause crashes or at least

277
00:26:03,730 --> 00:26:10,270
instability programs do and it's a
expansion of for bed

278
00:26:10,270 --> 00:26:16,000
same as badly a network protocol fuzzer
has a more comprehensive list of those

279
00:26:16,000 --> 00:26:21,520
strings so it's more likely to crash
stuff simply because it's got a bigger

280
00:26:21,520 --> 00:26:26,620
payloads to draw from also written in
perl so you can add your own funds

281
00:26:26,620 --> 00:26:29,590
strings remove depending on your needs

282
00:26:29,590 --> 00:26:36,310
it's fine forget so you just kind of
kick it off and then wait for it to run

283
00:26:36,310 --> 00:26:41,679
I just like with bed i would start
packing captured before using it so i

284
00:26:41,680 --> 00:26:45,070
get better visibility into what caused
the crash

285
00:26:45,070 --> 00:26:50,980
the fuzz strings you can see here are
there's a few more specifically the

286
00:26:50,980 --> 00:26:55,160
format strings near the bottom there's
some more inch

287
00:26:55,160 --> 00:27:00,980
giggling format strings few more large
numbers some different miscellaneous

288
00:27:00,980 --> 00:27:05,990
strings that you can see there so it's a
little more comprehensive but depending

289
00:27:05,990 --> 00:27:09,950
on what you're doing you might use bed
you might use that you might use both so

290
00:27:09,950 --> 00:27:13,310
you know we always take the tool that
works best for you

291
00:27:13,310 --> 00:27:16,460
I've got home

292
00:27:16,460 --> 00:27:20,210
it's good for finding directory
traversal stuff it's got a huge list of

293
00:27:20,210 --> 00:27:28,580
various ways to do . / so it works
really good for that I had to edit the

294
00:27:28,580 --> 00:27:35,120
perl module there the traversal engine
rpm to look for specific target files i

295
00:27:35,120 --> 00:27:40,370
was looking to find a directory
traversal so depending on what you doing

296
00:27:40,370 --> 00:27:45,949
the default out-of-the-box install it
comes with Callie may work for you may

297
00:27:45,950 --> 00:27:47,780
need to modify it

298
00:27:47,780 --> 00:27:55,700
I found its best to run . home after you
doing a fair amount of recon . home will

299
00:27:55,700 --> 00:28:04,940
run without any of the special options
and stuff that you can pass to it but if

300
00:28:04,940 --> 00:28:12,410
you can tell . home what platform it's
on then it's going to run a whole lot

301
00:28:12,410 --> 00:28:15,620
better and it will cut out all kinds of
stuff that you don't like if you're

302
00:28:15,620 --> 00:28:20,360
using a windows box for instance you
don't need to have it look for the

303
00:28:20,360 --> 00:28:30,110
password for that shadow that sort of
the e and dash X parameters will help

304
00:28:30,110 --> 00:28:34,310
intensify your directory traversal
attacks so those are good to use

305
00:28:35,030 --> 00:28:39,800
and if you're using a web server don't
forget the minus and parameter to switch

306
00:28:39,800 --> 00:28:47,600
HTTP message methods between getting
pulse and so screenshot of some of the .

307
00:28:47,600 --> 00:28:49,909
own stuff

308
00:28:49,910 --> 00:28:58,940
the the very moving down the extra files
that's where you cannot change or modify

309
00:28:58,940 --> 00:29:01,990
as you see fit depending on what our
Father looking

310
00:29:01,990 --> 00:29:08,110
for and you can see their little screen
the representations of the dots and the

311
00:29:08,110 --> 00:29:14,080
slashes that . all will cycle through to
try to get directly targeted you pointed

312
00:29:14,080 --> 00:29:22,360
to that and we'll also try other methods
not on its own you have to tell it to

313
00:29:22,360 --> 00:29:28,059
via that dash and parameter if you don't
give it the dashing parameter I it's

314
00:29:28,059 --> 00:29:35,050
something you would well the question
was will do different . whole new

315
00:29:35,050 --> 00:29:43,000
different HTTP methods you would have to
describe those on the parameters dash

316
00:29:43,000 --> 00:29:49,809
IAM posed are I think they're comma
separated so you do that shall post

317
00:29:49,809 --> 00:29:57,160
update put delete whatever other methods
you want to use the medicine boy has

318
00:29:57,160 --> 00:30:01,150
some good father models anybody messed
around with the other modules at best .

319
00:30:01,150 --> 00:30:07,480
anybody know about they're not
particularly i see lions go up there not

320
00:30:07,480 --> 00:30:12,910
particularly well advertised in medicine
i'm not really sure why they're good

321
00:30:12,910 --> 00:30:22,420
they're our buzzer skoura esmtp https
few other protocols that path did you

322
00:30:22,420 --> 00:30:27,790
see the normal screen is a pointed
toward that's where you can see all the

323
00:30:27,790 --> 00:30:32,139
puzzles that are available breaking just
do a search buzzer within SF console

324
00:30:32,140 --> 00:30:39,010
warm-up I've had good luck with the SNB
HTTP buzzers I haven't really used many

325
00:30:39,010 --> 00:30:46,390
beyond that so far I've had me most of
the module the buzzer modules that need

326
00:30:46,390 --> 00:30:49,720
to put the threads per ampere so you can
bump that up and finish your buzzing a

327
00:30:49,720 --> 00:30:54,280
bit faster and the best professor
modules provide some pretty good

328
00:30:54,280 --> 00:31:00,670
feedback on what caused the crash but I
still want a capture just so I've got a

329
00:31:00,670 --> 00:31:03,350
I need

330
00:31:03,350 --> 00:31:07,549
that big long lonely path there too

331
00:31:07,549 --> 00:31:15,559
buzzer . RB is the Ruby code for how the
strings are created and that's

332
00:31:15,559 --> 00:31:20,450
worthwhile to look at you don't have to
know Ruby to interpret this even if

333
00:31:20,450 --> 00:31:25,340
you've only done just a tiny bit of
programming if you look at it and run

334
00:31:25,340 --> 00:31:30,799
down through it will make sense and you
can see how the mess . bills the buzzer

335
00:31:30,799 --> 00:31:38,150
five strings so it's a pretty good
reference the tds login corrupted TS

336
00:31:38,150 --> 00:31:43,789
login username or good for fuzzing
sequel server the code is a bit dated

337
00:31:43,789 --> 00:31:49,309
now you might have to edit it to send
the correct TS version for sequel server

338
00:31:49,309 --> 00:31:57,110
i think the I think the modules sent a
the tds person for sequel server 2000

339
00:31:57,110 --> 00:32:01,399
which hopefully nobody two-run single
server 2008 anybody admit to it if I

340
00:32:01,400 --> 00:32:09,440
were you I know I would but those two
links there to microsoft's website

341
00:32:09,440 --> 00:32:15,860
define where the TPS version is and
specifically how to structure it so

342
00:32:15,860 --> 00:32:23,120
you're going to change the Ruby code .
to the right tds version within medicine

343
00:32:23,120 --> 00:32:28,789
boy the those three other modules HTTP
formfield get you are all get you are

344
00:32:28,789 --> 00:32:35,510
strange those are good at the SNB to
negotiate corrupt is a good sentence bad

345
00:32:35,510 --> 00:32:44,360
negotiation packets dsm-v to and that
cost of interesting crashes the end user

346
00:32:44,360 --> 00:32:52,309
scripts and that dog / tennessee . has
good documentation on all scripts not

347
00:32:52,309 --> 00:32:59,299
just buzzing ones they've got a dns plus
1 i'm not used it yet but i have used

348
00:32:59,299 --> 00:33:03,530
the HDD form buzzer will go through the
script the fields are for and it was

349
00:33:03,530 --> 00:33:09,289
each one so it's it's pretty it's pretty
good for just kicking it off just let it

350
00:33:09,289 --> 00:33:14,640
go watch was doing I don't work with PHP
cover myself but

351
00:33:14,640 --> 00:33:21,060
so there is a PHP buzzer there but it
looks pretty interesting this classic

352
00:33:21,060 --> 00:33:25,500
through the color I've not written line
of color little but it looks fairly

353
00:33:25,500 --> 00:33:27,510
self-explanatory

354
00:33:27,510 --> 00:33:32,010
you can find all the scripts or nmap in
the user sharing map scripts directory

355
00:33:32,010 --> 00:33:38,910
so if you're up on you or want to do
somebody they're all there for you

356
00:33:39,600 --> 00:33:43,560
spike Spike's been around for a long
time

357
00:33:44,550 --> 00:33:51,000
tough to use but pretty powerful I don't
know see that well but the better you

358
00:33:51,000 --> 00:33:55,740
know seed of more modern to get spike
there's a really good tutorial on it to

359
00:33:55,740 --> 00:34:01,110
the info seconds to comment that's where
I started learning more about spike cali

360
00:34:01,110 --> 00:34:07,379
comes with some pre-built spikes in that
area that are useful but nine times out

361
00:34:07,380 --> 00:34:12,600
of ten you're going to have to modify
for your particular target there are two

362
00:34:12,600 --> 00:34:13,860
basic commands

363
00:34:13,860 --> 00:34:16,740
I think there's more but there's only
two that I've ever used despite the

364
00:34:16,739 --> 00:34:22,049
generics and tcp in generics and UDP
they send tcp and UDP packets

365
00:34:22,050 --> 00:34:23,280
respectively

366
00:34:23,280 --> 00:34:31,260
that's ipv4 it doesn't as far as i know
spike doesn't support ipv6 it's got some

367
00:34:31,260 --> 00:34:39,060
admittedly week documentation in the
user shared docs pipe but the best way

368
00:34:39,060 --> 00:34:42,630
to learn spike and to really know what
it does

369
00:34:42,630 --> 00:34:46,169
assuming you've got a reasonable
knowledge of seeds just look at the code

370
00:34:46,168 --> 00:34:52,918
you can search the spite about see for
the first hints and then look for five

371
00:34:52,918 --> 00:34:57,900
straight and you'll see the strings that
are used cali does not come with mike

372
00:34:57,900 --> 00:35:01,350
source so you got to pull it from
somewhere else

373
00:35:01,350 --> 00:35:05,100
last time I looked it was a buzzing .
work there was a spike file link there

374
00:35:06,090 --> 00:35:12,210
Callie only has the compiler version of
spikes so you can actually see what it's

375
00:35:12,210 --> 00:35:13,860
doing if you're interested

376
00:35:13,860 --> 00:35:19,050
modding spike or looking to see what
kind of strings it's using you'll have

377
00:35:19,050 --> 00:35:24,030
to pull us copy the source from that
area it may exist elsewhere but when I

378
00:35:24,030 --> 00:35:24,720
just didn't

379
00:35:24,720 --> 00:35:32,879
google search styles the first thing on
ok let's fight for funding hdb get like

380
00:35:32,880 --> 00:35:40,440
I said you don't have to have a good
knowledge of C but the more you know

381
00:35:40,440 --> 00:35:47,730
about it the more you can make a spike
basically you just lay out your HTTP

382
00:35:47,730 --> 00:35:53,550
request and then separated with a
carriage return life feat so this case

383
00:35:53,550 --> 00:36:00,119
the s string is a constant that will
change when you use a string variable it

384
00:36:00,119 --> 00:36:05,010
will pass that the first time on the
first run of the spike and then for the

385
00:36:05,010 --> 00:36:12,630
subsequent rise it's going to replace
that with its let's try another one this

386
00:36:12,630 --> 00:36:20,369
one I'm one of the first the value of
the cratering tiv so that's why I broke

387
00:36:20,369 --> 00:36:25,290
the get up into two lines so I can see
clearly ok this is the spot i want to

388
00:36:25,290 --> 00:36:34,410
insert my frustrate the fuzzing the web
resource . XD if you're on . and it's

389
00:36:34,410 --> 00:36:38,940
always a good idea to us that when
you're testing applications i wanted to

390
00:36:38,940 --> 00:36:45,750
in this case test the deal query string
and I didn't care about breaking up the

391
00:36:45,750 --> 00:36:50,760
t query string testing out separately at
the time but you could just buy busting

392
00:36:50,760 --> 00:36:54,900
the lineup multiples and inputting the
string under store variable in the spot

393
00:36:54,900 --> 00:36:57,900
where you want to insert your
bloodstream

394
00:36:59,070 --> 00:37:03,750
okay buzzing post the neat thing about
spike is it will calculate the correct

395
00:37:03,750 --> 00:37:08,849
content-length if you're finding a post
request but you've got to do it within a

396
00:37:08,849 --> 00:37:15,060
specific block that's the reason for the
insertion of the s-block side story and

397
00:37:15,060 --> 00:37:20,070
always the bottom but like i said i'm
gonna put this online so you'll be able

398
00:37:20,070 --> 00:37:27,359
to see it so as long as you to find the
in this case the body of the post that I

399
00:37:27,359 --> 00:37:31,980
wanted the fuzz the viewstate and start
an application within a block there

400
00:37:31,980 --> 00:37:36,180
everytime spike iterates through and it
grabs a new string is going to

401
00:37:36,180 --> 00:37:41,190
recalculate the content length so it's
going to pass it over correctly and the

402
00:37:41,190 --> 00:37:45,450
website of the receiving webserver well
just go check it out and with an HTTP

403
00:37:45,450 --> 00:37:52,020
error code that the content is wrong
with this kind of okay

404
00:37:52,020 --> 00:37:56,730
each clothes on cali works pretty much
the same as windows

405
00:37:56,730 --> 00:37:59,910
you've got to get the model packages if
you're on it you want to or debian

406
00:37:59,910 --> 00:38:08,700
distro you can just do an install model
complete with the Afghan cm so some

407
00:38:08,700 --> 00:38:13,109
general tips and tricks of a mess around
with your target first get an idea about

408
00:38:13,109 --> 00:38:18,540
what it what it does outward before you
launch a buzzing run against this will

409
00:38:18,540 --> 00:38:20,880
let you tailor your husband to your
target

410
00:38:20,880 --> 00:38:25,619
I know what input the program expects
will let you know what it doesn't expect

411
00:38:25,619 --> 00:38:31,080
and we'll kind of lead you to the third
thing there to ask yourself what are the

412
00:38:31,080 --> 00:38:35,190
best or worst inputs that I can call
that I can pass that will cause damage

413
00:38:35,190 --> 00:38:40,619
you know is I'm sure we always come with
more programmers come for certain types

414
00:38:40,619 --> 00:38:44,430
of attic but it's almost impossible to
catch everything because most

415
00:38:44,430 --> 00:38:50,250
programmers don't do quite listing of
input they don't have a have a block

416
00:38:50,250 --> 00:38:56,070
that says okay I want to reject a alpha
numeric and alphabetic America field for

417
00:38:56,070 --> 00:39:01,020
instance but they may not do mouse
checking length checking or stuff like

418
00:39:01,020 --> 00:39:06,540
that so try mixing special characters
and spaces Karen arms in line feeds and

419
00:39:06,540 --> 00:39:13,259
stuff when you create your strings just
to see what the program does for.net

420
00:39:13,260 --> 00:39:19,140
like I said I work a lot with web
applications . stuff in particular trial

421
00:39:19,140 --> 00:39:25,500
passes format strings to a.net into it
like the 0 into or the date formatting

422
00:39:25,500 --> 00:39:33,810
string just to see if the if your target
program blows up use a virtual machine

423
00:39:33,810 --> 00:39:37,440
software vmware Oracle VirtualBox might
be helpful when you're doing buzzing

424
00:39:37,440 --> 00:39:41,560
same thing goes for spare hardware use
it for funding practice

425
00:39:41,560 --> 00:39:45,640
you know if you've got some old wireless
routers or access points hanging around

426
00:39:45,640 --> 00:39:50,950
break out in BK three and play around it
is disrupted by nature be prepared to

427
00:39:50,950 --> 00:39:56,109
reboot your target i found this out the
hard way when I was starting out that I

428
00:39:56,110 --> 00:39:59,980
didn't let the network admins know and
all of a sudden they started seeing is

429
00:39:59,980 --> 00:40:04,600
crazy traffic going through a web
service attack

430
00:40:04,600 --> 00:40:11,500
no no it's just me I screwed up i forgot
to let you know the dev . modern-day IE

431
00:40:11,500 --> 00:40:15,820
has some free time with virtual machines
that are good for budget targets that's

432
00:40:15,820 --> 00:40:20,950
a microsoft site you can get a variety
of different of the apps i think

433
00:40:20,950 --> 00:40:27,220
virtualbox to with different operating
systems all of the different versions of

434
00:40:27,220 --> 00:40:33,220
Internet Explorer so you've got a pretty
good resource they're all hub . comments

435
00:40:33,220 --> 00:40:37,629
of the challenges with download virtual
machines not specifically buzzing

436
00:40:37,630 --> 00:40:45,010
related but I good resources in the last
and the x 1tb has a couple of good

437
00:40:45,010 --> 00:40:50,290
write-ups buzzing and I review those
periodic we just kind of refresh my

438
00:40:50,290 --> 00:40:50,980
memory

439
00:40:50,980 --> 00:40:56,470
learn something new start with a short
buzzing around first to make sure that

440
00:40:56,470 --> 00:41:01,480
everything is good just a few iterations
to make sure that the program your

441
00:41:01,480 --> 00:41:05,080
target programs responding or not
responding as the case may be to see

442
00:41:05,080 --> 00:41:06,190
what's happening

443
00:41:06,190 --> 00:41:10,450
make sure you're getting feedback from
your buzzer that's useful for you like a

444
00:41:10,450 --> 00:41:17,200
packet capture or log into something
like that stuff for windows seems like

445
00:41:17,200 --> 00:41:20,890
production as closely as possible so
you're buzzing run will be as accurate

446
00:41:20,890 --> 00:41:22,270
as you can make it

447
00:41:22,270 --> 00:41:28,270
I i put that in there about watching for
antivirus and anti-malware including and

448
00:41:28,270 --> 00:41:37,810
i have not yet seen antivirus right now
where Emmet catch a fuzzy one I don't

449
00:41:37,810 --> 00:41:44,190
know is that's by design or what but I
stuff it in there anyone just kind of

450
00:41:44,190 --> 00:41:51,569
no but if you see things happening or
something that you're not expecting see

451
00:41:51,569 --> 00:41:55,500
if maybe the anti-malware if you're
running Microsoft is tripping you up

452
00:41:55,500 --> 00:42:01,050
especially on Windows you tend to run
your target of memory particularly if

453
00:42:01,050 --> 00:42:03,960
you're using speech i don't know if
that's because of a memory leak and

454
00:42:03,960 --> 00:42:12,839
peach or just the way peach works and
control of the lead is your friend on

455
00:42:12,839 --> 00:42:17,549
your target so tips with Callie and this
is just you know your mileage may vary

456
00:42:17,550 --> 00:42:22,109
but i usually start with the
general-purpose puzzles like mad una and

457
00:42:22,109 --> 00:42:26,520
then progress to the other ones i needed
depends on what I'm buzzing know that

458
00:42:26,520 --> 00:42:31,920
method works well for me with web
applications been doing are currently

459
00:42:31,920 --> 00:42:38,670
having some problems the young the last
time i did a apt-get update and just

460
00:42:38,670 --> 00:42:46,710
upgrade on cali it pushed pearl to a new
version there 5225 and that broke bid

461
00:42:46,710 --> 00:42:52,020
dinner and I think brought units can but
I got in touch with the dude to do

462
00:42:52,020 --> 00:42:57,509
developer so child wire rule on that he
was very helpful to provide a fix and I

463
00:42:57,510 --> 00:43:04,319
back . that bed and that worked there
and I reported this on the county bugs

464
00:43:04,319 --> 00:43:08,369
page and i think it was yesterday I got
a response from one to cali does that

465
00:43:08,369 --> 00:43:12,089
they're going to push this into the
repos but I don't know it was going to

466
00:43:12,089 --> 00:43:19,799
go out this week next or even another
version but the there is a fix in place

467
00:43:19,800 --> 00:43:26,609
for bed and do but you just have to do
up a nap yet and you know see when it

468
00:43:26,609 --> 00:43:35,790
comes down the I've got the that link
there has the fixes in it so if you need

469
00:43:35,790 --> 00:43:40,140
better do not and the fixes have been
pushed the calorie close then you can

470
00:43:40,140 --> 00:43:43,290
apply the fixes yourself it's just a
handful want to code

471
00:43:43,290 --> 00:43:50,040
no big deal there but check other source
to make sure it's in the strange why you

472
00:43:50,040 --> 00:43:53,100
might need to customize them based on
your target so if you're

473
00:43:53,100 --> 00:43:58,710
working on for instance a matchbox you
wouldn't want to send . that bass

474
00:43:58,710 --> 00:44:04,290
strings or maybe you would depend on you
know what's going on and what your

475
00:44:04,290 --> 00:44:09,779
program is start packing capture before
you begin your fuzzing run some tools

476
00:44:09,780 --> 00:44:15,090
don't get good feedback so especially if
you're doing Export Development you want

477
00:44:15,090 --> 00:44:19,740
to know exactly what's going on over the
wire when you do your request get your

478
00:44:19,740 --> 00:44:27,629
response and that's pretty much it for
me i'll have the samples up at my page

479
00:44:27,630 --> 00:44:31,680
where I had to add some extra these
because the agreement with one deals are

480
00:44:31,680 --> 00:44:38,850
taking a course but make fuzzy part of
your development of QA process it does

481
00:44:38,850 --> 00:44:42,299
help but you know it's going to drive
your programmers nuts

482
00:44:42,300 --> 00:44:47,640
that's ok it often but i'll be around
stop and introduce yourself if you want

483
00:44:47,640 --> 00:44:57,930
my email address there are downtown at
gmail.com reach out to me i got about

484
00:44:57,930 --> 00:45:00,779
five minutes anybody any questions
comments

485
00:45:00,780 --> 00:45:06,090
yes never had anything friend

486
00:45:07,920 --> 00:45:18,150
run around not yet and you repeat the
question

487
00:45:18,720 --> 00:45:21,480
thinking oh I'm sorry the question was
have you ever had to send anything

488
00:45:21,480 --> 00:45:27,599
through funny of using sendkeys or
anything like that you have to slide or

489
00:45:27,599 --> 00:45:31,200
something like that i had yet but it
looks interesting it's something that I

490
00:45:31,200 --> 00:45:35,939
want to do much with us based on based
on the moment I've got some stuff in the

491
00:45:35,940 --> 00:45:39,569
pipeline will have to do some buzzing on
windows-based application so i think

492
00:45:39,569 --> 00:45:45,420
that's where that's going to come in but
I have done here and of course gifts

493
00:45:45,420 --> 00:45:59,880
have tried talking about wire started we
tried something like traits filesystem

494
00:45:59,880 --> 00:46:08,430
I'm i think i'll use dtrace some time
ago that i have racing is all my

495
00:46:08,430 --> 00:46:13,558
memories a little rusty on that but that
might be good to watch keep watch on

496
00:46:13,559 --> 00:46:16,770
appreciate it

497
00:46:16,770 --> 00:46:19,770
any other questions comments

498
00:46:20,819 --> 00:46:23,430
no that's what

