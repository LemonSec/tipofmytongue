1
00:00:00,000 --> 00:00:03,000
right you guys ready to start alright
sounds good

2
00:00:03,840 --> 00:00:09,719
ok well thank you thank you guys for up
for coming it really means a lot

3
00:00:09,719 --> 00:00:14,849
especially a topic like this which is
not always covered as much because it's

4
00:00:14,849 --> 00:00:19,500
one of those areas that kind of slips
through the cracks but I think more and

5
00:00:19,500 --> 00:00:22,680
more these days it's going to become
more and more of an issue which is of

6
00:00:22,680 --> 00:00:27,720
course data obvious station so of course
any employer anything invented it

7
00:00:27,720 --> 00:00:32,098
associated with not associated with that
a doll shouldn't be viewed by anyone etc

8
00:00:32,098 --> 00:00:40,169
just generic disclaimer so those guys
only on Parker math geeks always amateur

9
00:00:40,170 --> 00:00:46,020
mathematician I giant 21 everything
people always told me about that and I

10
00:00:46,020 --> 00:00:50,430
do mess with kernels and like the crash
and once in awhile it's kind of fun and

11
00:00:50,430 --> 00:00:54,780
but I can hold background of been a red
team ER but also going back and forth is

12
00:00:54,780 --> 00:00:59,940
a cryptographer and mathematicians so
it's kind of a weird perspective but

13
00:00:59,940 --> 00:01:05,188
it's also kind of fun because you can do
a lot of trolling and currently at now I

14
00:01:05,188 --> 00:01:09,029
run a DevOps automation company which is
not really old work and there's nothing

15
00:01:09,030 --> 00:01:15,360
related to any of this so this is a
primer on data obfuscation so we're

16
00:01:15,360 --> 00:01:19,320
going to go through the basics of crypto
because a lot of people the only thing

17
00:01:19,320 --> 00:01:23,189
they hear about crypto is don't
implement it yourself which in some

18
00:01:23,189 --> 00:01:26,580
situations it makes sense to implement
your own Krypton go through some

19
00:01:26,580 --> 00:01:31,798
situations where actually it's better to
do that but it's more forgiving and then

20
00:01:31,799 --> 00:01:34,979
we're going to actually go through and
we're going to find a non-standard

21
00:01:34,979 --> 00:01:39,450
crypto problem and together we're going
to design a crypto algorithm right here

22
00:01:39,450 --> 00:01:43,740
and go through all the steps go through
what we forgot and where we messed up

23
00:01:43,740 --> 00:01:47,460
and how to fix it the whole way through
so it's kind of the plan for the day

24
00:01:47,460 --> 00:01:52,048
going to go quickly but and what I'm
going to try to do is make us we keep

25
00:01:52,049 --> 00:01:56,610
going back to things so that even if you
guys lose things for a bit

26
00:01:56,610 --> 00:02:02,969
we can always we always come back so we
start out with entropy which pretty much

27
00:02:02,969 --> 00:02:06,839
every single non-implementation bug-like
not hardly

28
00:02:06,840 --> 00:02:12,390
which is kind of a crazy thing besides
that pretty much all crypto issues are a

29
00:02:12,390 --> 00:02:13,640
lack of entropy some

30
00:02:13,640 --> 00:02:18,140
where you can successfully make a guess
and if you can make a guess more easily

31
00:02:18,140 --> 00:02:22,399
than you have a chance at that breaking
it if you have no idea if you're right

32
00:02:22,400 --> 00:02:27,410
or wrong and if you have no idea how to
how to break it without brute forcing

33
00:02:27,410 --> 00:02:30,890
the key general you're gonna have a bad
time and then we're going to go through

34
00:02:30,890 --> 00:02:34,279
kind of discrete log problem basics of
crypto just because the reason we're

35
00:02:34,280 --> 00:02:38,000
going to do that is for those who are
not familiar i want to get everyone into

36
00:02:38,000 --> 00:02:42,650
that mindset because i don't want this
to be a talk of oh but I developed this

37
00:02:42,650 --> 00:02:47,570
I want this to be an ongoing discussion
and everyone here to start implementing

38
00:02:47,570 --> 00:02:51,109
to start implementing things like this
and playing around because it's actually

39
00:02:51,110 --> 00:02:54,590
quite a bit of fun least i think so

40
00:02:54,590 --> 00:03:01,220
so what makes and breaks entropy what
should you think about first of all how

41
00:03:01,220 --> 00:03:05,989
long does it take to make a guess if you
have a perfect cryptosystem and you have

42
00:03:05,989 --> 00:03:11,720
a 256-bit he sighs ideally you need to
the 256 guesses which at that point

43
00:03:11,720 --> 00:03:17,120
makes it impractical and so you have to
understand how many guesses do have to

44
00:03:17,120 --> 00:03:23,510
make and but also if you make a guess if
you guess what the key is right

45
00:03:24,110 --> 00:03:28,579
are you correct a lot of times in if
you're trying to decrypt best self you

46
00:03:28,579 --> 00:03:32,930
pick a random aes key and you decrypt
the data makes sense you might have a

47
00:03:32,930 --> 00:03:38,030
good shot but there are some situations
are going to look at that where we can

48
00:03:38,030 --> 00:03:41,269
have it so that if you decrypt the day
that you could decrypt it into something

49
00:03:41,269 --> 00:03:48,799
that makes sense but isn't the actual
plain text and the other part two is if

50
00:03:48,799 --> 00:03:53,150
you know part of the key if you know
part of the message can you extract the

51
00:03:53,150 --> 00:03:58,100
rest because sometimes if you can
because in that situation you can start

52
00:03:58,100 --> 00:04:02,329
brute-forcing part of the key something
makes sense okay i'm getting somewhere

53
00:04:02,329 --> 00:04:10,880
i'm going to keep going and most times
when crypto breaks this is what happens

54
00:04:10,880 --> 00:04:15,560
so let's look at LM hashes right is
everyone here has broken LM hashes and

55
00:04:15,560 --> 00:04:20,600
that's really easy even if it was a good
hashing algorithm one big issue even

56
00:04:20,600 --> 00:04:25,280
back in the day was only capital letters
would go in there

57
00:04:25,280 --> 00:04:30,619
so even if you didn't find a flaw in the
hash itself you can easily brute force

58
00:04:30,620 --> 00:04:34,520
the entire you can even easily brute
force the entire plane txt space and

59
00:04:34,520 --> 00:04:41,030
figure out where collision is what would
hatch into that value very easily and

60
00:04:41,030 --> 00:04:46,099
it's also i bring this up to because
everyone thinks so RSA is some magical

61
00:04:46,100 --> 00:04:51,860
magical tool and whenever you use that
the auditor should check the box but

62
00:04:51,860 --> 00:04:55,280
there's a lot of problems with public
key crypto if it's used the wrong way

63
00:04:55,850 --> 00:05:02,120
for example let's say you had cv numbers
and someone was going to encrypt them

64
00:05:02,120 --> 00:05:06,860
using RSA well if the public he was
available which sometimes it is always

65
00:05:06,860 --> 00:05:10,730
going in there you find the public key
an auditor probably check the box the

66
00:05:10,730 --> 00:05:16,400
qsa would generally do that because oh
cool RSA shiny and problem is it's only

67
00:05:16,400 --> 00:05:17,599
a three digit number

68
00:05:17,600 --> 00:05:21,050
what do you do you take the public key
there's only a thousand possibilities

69
00:05:21,050 --> 00:05:25,669
three-digit numbers 10 x 10 x 10 right
so you go through all the thousands of

70
00:05:25,669 --> 00:05:30,440
them which for a computer thousands of
tiny number encrypt them all matching

71
00:05:30,440 --> 00:05:34,940
with the ciphertext there you go now you
have a now you have a mapping so it's

72
00:05:34,940 --> 00:05:39,140
not necessarily algorithm it's how you
use it so even if you're not

73
00:05:39,140 --> 00:05:43,099
implementing your own crypto you should
generally have some idea of how it works

74
00:05:43,100 --> 00:05:48,260
when you're designing a cryptosystem
because you can run into problems and of

75
00:05:48,260 --> 00:05:52,219
course memory management you're going to
have a really bad time with you exposed

76
00:05:52,220 --> 00:05:56,930
plain text when someone sends a request
that bad things kind of broke everything

77
00:05:56,930 --> 00:06:01,430
so that's what that's a once in awhile
thing on that when that happens

78
00:06:01,430 --> 00:06:05,570
one example of this and part of this too
is since we are going to mark rippetoe

79
00:06:05,570 --> 00:06:09,260
i'm going to make a point of don't
implement your own TLS because we can

80
00:06:09,260 --> 00:06:14,900
actually go through a flaw that was a
real TLS issue but that penguin was we

81
00:06:14,900 --> 00:06:18,469
can all tell that's tux the penguin
right everyone can tell that's that's

82
00:06:18,470 --> 00:06:22,700
him pretty much he's been encrypted with
aes what went wrong

83
00:06:23,360 --> 00:06:30,500
well a yes is a block cipher so if you
have a 256-bit message then generally

84
00:06:30,500 --> 00:06:36,050
AES is very hard to break for that but
the trivial way to implement something

85
00:06:36,050 --> 00:06:38,990
over a bigger message is over let's
encrypt block-by-block

86
00:06:38,990 --> 00:06:44,990
there's a problem here well if you go
block-by-block you know the ciphertext

87
00:06:44,990 --> 00:06:48,980
you might have some idea what the
plaintext is like if someone did this

88
00:06:48,980 --> 00:06:54,830
for a web request usually you know what
most of that web request is so at that

89
00:06:54,830 --> 00:07:00,349
point you would just take the encrypted
data you see take the plaintext you know

90
00:07:00,350 --> 00:07:06,800
it is and in 256-bit chunks you have a
mapping from one to another and wherever

91
00:07:06,800 --> 00:07:10,910
the session ID would be you can extract
parts of that and then you could decrypt

92
00:07:10,910 --> 00:07:15,110
the message so that's why we invented
things like cipher block chaining which

93
00:07:15,110 --> 00:07:21,380
all that does is the function E encrypts
the plaintext but it uses it encrypts

94
00:07:21,380 --> 00:07:26,600
the plaintext Zord with the last block
of ciphertext and the reason they did

95
00:07:26,600 --> 00:07:32,240
this was to avoid the that image there
now here's what's the problem

96
00:07:32,780 --> 00:07:37,909
so I guess I don't sound work by go
there but if you the ciphertext is a

97
00:07:37,910 --> 00:07:44,510
known value to an interceptor so you
actually can kind of undo that now the

98
00:07:44,510 --> 00:07:48,950
issue is you sell to make a guess if you
have but the problem is with cbc if you

99
00:07:48,950 --> 00:07:50,630
have a client-side attack

100
00:07:50,630 --> 00:07:53,270
I don't necessarily go through there
this is this is the mass of the people

101
00:07:53,270 --> 00:07:57,169
who are actually interested i go through
slightly but essentially what you do is

102
00:07:57,170 --> 00:08:03,980
you guess jaydeep I you have multiple
requests and you inject your own plain

103
00:08:03,980 --> 00:08:08,660
text into their if it encrypts into the
proper ciphertext you've got it

104
00:08:08,660 --> 00:08:12,200
so essentially you're using that known
plaintext like we talked about with RSA

105
00:08:12,200 --> 00:08:16,760
but you'll have to do it over a thousand
times but you but having the ability to

106
00:08:16,760 --> 00:08:23,120
know that if you make a guess and you're
correct then you can keep making a lot

107
00:08:23,120 --> 00:08:27,380
of guests because guessing the plaintext
is way easier than guessing aqui aqui is

108
00:08:27,380 --> 00:08:31,610
totally random you generally in most
encrypted messages can guess most of the

109
00:08:31,610 --> 00:08:38,659
plaintext and so but now we're going to
gonna take a step back and go before

110
00:08:38,659 --> 00:08:42,829
crypto was even before computers were
even a thing so

111
00:08:43,690 --> 00:08:48,640
back in the back of the Roman days where
no one had heard of crypto security by

112
00:08:48,640 --> 00:08:51,819
obscurity actually helped for most of
most people here have heard of the

113
00:08:51,820 --> 00:08:55,540
Caesar cipher if you haven't you might
have used that as a kid where you'd say

114
00:08:55,540 --> 00:09:00,939
the key is 7 so you shift everything
seven letters and so those kinds of

115
00:09:00,940 --> 00:09:04,930
shifts which actually when you're the
shifting of letters eventually evolved

116
00:09:04,930 --> 00:09:08,739
into as or on the computer but it's a
lot of crypto is still based off of that

117
00:09:08,740 --> 00:09:13,180
but that's the first-ever siper another
one is of course the substitution cipher

118
00:09:13,180 --> 00:09:16,810
which you see in a lot of the crypto
grams of the newspapers which I don't

119
00:09:16,810 --> 00:09:20,680
even know if newspapers exist anymore
but that's when they used to have those

120
00:09:20,680 --> 00:09:24,849
and of course if you have the spacing
you would find I and a and be able to

121
00:09:24,850 --> 00:09:29,200
break those but your key space is really
small too especially with cryptograms

122
00:09:29,200 --> 00:09:34,330
because you only have 26 letters though
it might be interesting to try to do

123
00:09:34,330 --> 00:09:38,140
them in Chinese because of that cipher
actually might be somewhat valid to not

124
00:09:38,140 --> 00:09:43,660
a computer is you have 20,000 character
set my engines thing so then what the

125
00:09:43,660 --> 00:09:47,110
people did the substitution cipher
didn't work so they said what was the

126
00:09:47,110 --> 00:09:52,480
problem with the Caesar cipher yorkies
very small so if you're not using a

127
00:09:52,480 --> 00:09:57,010
computer how do you make a bigger key
you have a visionary cipher where you

128
00:09:57,010 --> 00:10:02,080
take multiple letters like you're
mapping a 2-1 be tattoo to create your

129
00:10:02,080 --> 00:10:07,990
key as a as a trivial hash because for
computers and so you take a word usually

130
00:10:07,990 --> 00:10:14,200
or a few random letters and you take you
take this and now you go you take each

131
00:10:14,200 --> 00:10:18,100
key shift the letter take the second
letter of your key shift by that much

132
00:10:18,100 --> 00:10:22,840
and repeat through there if the key is
long enough this is actually a valid

133
00:10:22,840 --> 00:10:28,930
cipher and as someone in this room will
maybe tell you if you ask him afterwards

134
00:10:28,930 --> 00:10:33,339
he wants that mention Visionnaire cipher
was used by the military and was used by

135
00:10:33,339 --> 00:10:38,890
the NSA in the and sixties and seventies
and up before they started before

136
00:10:38,890 --> 00:10:42,850
computers really became a thing and
computer-based crypto that was actually

137
00:10:42,850 --> 00:10:48,100
used in wars that some of us were that
many of us in the room were actually

138
00:10:48,100 --> 00:10:51,100
even alive to see

139
00:10:52,710 --> 00:10:57,930
so now let's fast-forward to modern
crypto because all those methods

140
00:10:57,930 --> 00:11:01,439
completely died when a computer happened
later in the software going to show how

141
00:11:01,440 --> 00:11:07,200
they died when we're trying to do things
like encrypt payloads and to improve

142
00:11:07,200 --> 00:11:11,130
privacy but the reason I'm going through
there it's not for nothing I want to go

143
00:11:11,130 --> 00:11:14,970
through what the thinking is because i
don't want to just tell people I want

144
00:11:14,970 --> 00:11:18,990
every I want everyone to be thinking
this way because i love this and I'd

145
00:11:18,990 --> 00:11:24,060
love for other people that play around
with this to sow confusion diffusion

146
00:11:24,060 --> 00:11:29,640
which really is a fancy way of saying if
you guess part of the key can you

147
00:11:29,640 --> 00:11:33,060
reverse it if you know what the
plaintext and cipher text with me and

148
00:11:33,060 --> 00:11:36,930
you can get the key from that that's a
bad thing because you can guess the

149
00:11:36,930 --> 00:11:43,469
plaintext if you get part of the message
can you go back in and try to try some

150
00:11:43,470 --> 00:11:48,030
other things and work your way backwards
into into getting the actual plaintext

151
00:11:48,030 --> 00:11:49,860
and not even if you get the key

152
00:11:49,860 --> 00:11:53,910
that's what confusion diffusion is
however when the NSA was choosing a yes

153
00:11:53,910 --> 00:11:58,650
as a cipher there were other ciphers
that actually we're more secure and it

154
00:11:58,650 --> 00:12:02,699
wasn't some conspiracy theory that they
were reducing the cipher strength but

155
00:12:02,700 --> 00:12:07,620
they it has to perform as part of the
mission to was they wanted people to

156
00:12:07,620 --> 00:12:11,340
encrypt data because there's a huge
there's a huge impact of people aren't

157
00:12:11,340 --> 00:12:16,920
encrypting so even with does the reason
was 56 bits is people wanted it to be

158
00:12:16,920 --> 00:12:20,790
it had to be practical to be used and
those of course the minimum back then

159
00:12:20,790 --> 00:12:24,660
but then of course an attack that was
theoretical eventually became very

160
00:12:24,660 --> 00:12:28,380
practical today and now someone's phone
could probably even crack does

161
00:12:29,190 --> 00:12:35,550
Thank You Moore's law so go into the
methods of Cherokee crypto the basics of

162
00:12:35,550 --> 00:12:41,189
shared key i'll go really quickly with
this is you gotta do some crunching move

163
00:12:41,190 --> 00:12:45,240
bits around so that it takes a decent
amount of time to encrypt it so you

164
00:12:45,240 --> 00:12:49,890
can't just credit brute force the key
and it has to be a big enough key and

165
00:12:49,890 --> 00:12:54,480
then but it has to be something that
works very fast when you do it once but

166
00:12:54,480 --> 00:12:58,800
that time has to add up the nice thing
about that is you can choose pretty much

167
00:12:58,800 --> 00:13:01,800
whatever algebraic structure you want
which is why

168
00:13:01,800 --> 00:13:04,920
in addition to being faster shared key
is always more secure

169
00:13:05,460 --> 00:13:09,870
that's why I usually see shared key
algorithms used and then public key to

170
00:13:09,870 --> 00:13:15,750
into exchange the keys because cherkis
faster more secure there's no reason not

171
00:13:15,750 --> 00:13:20,070
to use it except when Alice and Bob are
initially starting their communications

172
00:13:20,070 --> 00:13:26,550
so but of course with public key it's
all about the discrete log problem i

173
00:13:26,550 --> 00:13:29,699
will go to quick people here know how
that works

174
00:13:29,700 --> 00:13:34,320
I'm not going to bore them but
essentially solving for x there is very

175
00:13:34,320 --> 00:13:39,690
hard and so it is is not is not an
exponentially worse it's not with the

176
00:13:39,690 --> 00:13:43,470
real numbers of course logarithms are
easy but this is modulo and also know

177
00:13:43,470 --> 00:13:47,280
anything above and you / and find the
remainder and that's that's what the

178
00:13:47,280 --> 00:13:52,530
modulus is and what that problem is
pretty much the foundation of all public

179
00:13:52,530 --> 00:13:56,970
key cryptography reason I mention that
is your algebraic structure is set to

180
00:13:56,970 --> 00:14:01,080
having to have a discrete log we have
some flexibility like all the work with

181
00:14:01,080 --> 00:14:06,090
elliptic curves you create a new
discrete log problem and but that's all

182
00:14:06,090 --> 00:14:11,070
one other reason that you have some you
have some issues there because you're

183
00:14:11,070 --> 00:14:17,370
limited to a structure that has the two
types of keys and as i said earlier

184
00:14:18,120 --> 00:14:21,630
yep the discrete log problem can really
suck but actually the reason I bring

185
00:14:21,630 --> 00:14:25,890
this up again is when we go into the
payload crypto there was a cipher design

186
00:14:25,890 --> 00:14:30,780
based on our essay but the way you fix
something like this is if you have

187
00:14:30,780 --> 00:14:35,400
instead of one ciphertext for every
plaintext you have 10,000 ciphertext for

188
00:14:35,400 --> 00:14:43,110
every plain text you can go back now it
becomes a lot harder so but where are we

189
00:14:43,110 --> 00:14:47,640
lacking because generally with TLS
everyone's working very hard on that we

190
00:14:47,640 --> 00:14:49,080
generally know it works

191
00:14:49,080 --> 00:14:53,010
don't try to re-implement it you're
gonna mess it up as every dev set as

192
00:14:53,010 --> 00:14:58,140
every done is told and correctly self
but we're just trying to confuse and

193
00:14:58,140 --> 00:15:03,630
diffuse when you are encrypting
something usually over TLS you're going

194
00:15:03,630 --> 00:15:07,439
to it's no secret that you're sending
encrypted data it's no secret your

195
00:15:07,440 --> 00:15:14,190
browser page over https however when you
don't want to show that like if you have

196
00:15:14,190 --> 00:15:19,020
an SL inspection scenario if someone's
man-in-the-middle Inge if there's that

197
00:15:19,020 --> 00:15:22,980
yes grow program god forbid and I hope
that never happens and we're actually

198
00:15:22,980 --> 00:15:27,660
gonna troll anyone who mentions that and
show them that what they're proposing is

199
00:15:27,660 --> 00:15:32,640
mathematically impossible because
control them and so the I will

200
00:15:32,640 --> 00:15:40,110
let's let's talk a little bit but so the
other problem two is we can't all the

201
00:15:40,110 --> 00:15:45,300
mark rippetoe the rubber hose attack
still remains a valid cryptographic

202
00:15:45,300 --> 00:15:49,560
attack foremost crypto out there you can
hit someone's head with a hammer until

203
00:15:49,560 --> 00:15:53,880
they tell you the password hopefully
they don't forget but it still works but

204
00:15:53,880 --> 00:15:57,420
i'd like to actually address that and
find ways that we can get around the

205
00:15:57,420 --> 00:16:04,260
rubber hose adapt so uncool cipher going
back to and we're going to come back to

206
00:16:04,260 --> 00:16:10,620
this later is if you want entropy when
you're avoiding AV you can take our say

207
00:16:10,620 --> 00:16:15,960
right and you can multiply by a random
number but when n is your modulus said

208
00:16:15,960 --> 00:16:20,880
if you doing everything mod + $OPERAND
squared you can x ray number raised to

209
00:16:20,880 --> 00:16:25,980
the N because our end of the fee event
he is the number of digits less than

210
00:16:25,980 --> 00:16:30,030
relatively prime to end as Euler's
theorem and someone has a question about

211
00:16:30,030 --> 00:16:32,430
that later and go over it i don't want
to for people so I don't know if

212
00:16:32,430 --> 00:16:36,599
everyone's really in the math here but
you can essentially turn that into one

213
00:16:36,600 --> 00:16:40,230
so you're multiplying the ciphertext buy
one when you do that when you're

214
00:16:40,230 --> 00:16:44,700
changing it when you're encrypting but
now part of the end there's a lot of

215
00:16:44,700 --> 00:16:49,650
possibilities modern squared and so now
you have tons and tons of ciphertext and

216
00:16:49,650 --> 00:16:54,150
usually those ends are a hundred digit
prime number times another hundred

217
00:16:54,150 --> 00:17:00,630
digits prime number so that's how many
ciphertexts are there is is a 10,000

218
00:17:00,630 --> 00:17:04,079
digit number and there's some
limitations to get slightly smaller but

219
00:17:04,079 --> 00:17:09,000
that whole known plaintext now that's
out the window but notice that are going

220
00:17:09,000 --> 00:17:11,670
to pay loads so now we're getting to the
meat of this I'm sorry for the long

221
00:17:11,670 --> 00:17:15,209
primer I just felt that it would help
because the last thing i want to do is

222
00:17:15,209 --> 00:17:21,000
is to keep rambling and I really don't
want to just talk about ideas I have I

223
00:17:21,000 --> 00:17:26,880
want everyone to come up with stuff so
but generally use the right tool a lot

224
00:17:26,880 --> 00:17:30,540
of payload critters have gotten better
remember the always used to use AES and

225
00:17:30,540 --> 00:17:32,260
use a sand creek your payload

226
00:17:32,260 --> 00:17:37,240
and everyone's like oh my god fire i can
detect it and then their stock goes way

227
00:17:37,240 --> 00:17:40,870
up and then people realize oh well the
critters just we're using the wrong

228
00:17:40,870 --> 00:17:45,250
algorithm they actually can't do
anything another socket way down so it

229
00:17:45,250 --> 00:17:49,870
was it turns out there was a lot of a
lot of crap there but the problem on the

230
00:17:49,870 --> 00:17:54,639
red team side and we weren't breaking it
is we weren't using the right tool as

231
00:17:54,640 --> 00:17:56,050
shown there

232
00:17:56,050 --> 00:18:01,240
so what changes in our situation there
because when you're that when you're

233
00:18:01,240 --> 00:18:05,290
designing crypto and obfuscation you
have to figure out what does the

234
00:18:05,290 --> 00:18:09,879
attacker see what does Eve see what else
is out there sending a message problem

235
00:18:09,880 --> 00:18:12,970
is when you're trying to encrypt
something for your victim when you're

236
00:18:12,970 --> 00:18:16,750
running code on their machine it's gonna
have to be decrypted on their machine

237
00:18:16,750 --> 00:18:24,400
that he will be on there so using that
cipher to try to to try to hide that

238
00:18:24,400 --> 00:18:27,670
because you think someone to actually
try to break the aes or whatever using

239
00:18:27,670 --> 00:18:31,180
they're not going to bother you have the
key on their box

240
00:18:31,180 --> 00:18:37,840
it does not matter and all these ciphers
were designed so that were designed so

241
00:18:37,840 --> 00:18:40,419
with hey we know it's encrypted

242
00:18:40,420 --> 00:18:45,190
we don't have to hide ourselves we don't
have to obfuscate our algorithms and so

243
00:18:45,190 --> 00:18:49,390
they even have known x s boxes we've
seen that with with a yes where you

244
00:18:49,390 --> 00:18:50,260
permit the data

245
00:18:50,260 --> 00:18:55,000
why do they do that why they move bite
for bite around so that you can't guess

246
00:18:55,000 --> 00:19:00,730
anymore and so you end up with these
known as boxes that's an easy signature

247
00:19:00,730 --> 00:19:04,180
and now you're sitting here you have a
signature for your payload krypter not

248
00:19:04,180 --> 00:19:04,750
good

249
00:19:04,750 --> 00:19:12,400
that's exactly what we don't want so as
we know they are absolutely the wrong

250
00:19:12,400 --> 00:19:18,670
Cyprus is not worth doing for those so
one method you can do when you're trying

251
00:19:18,670 --> 00:19:22,000
to do payload crypto it's going to go
through this is if you're setting up a

252
00:19:22,000 --> 00:19:27,280
function pointer to a set of data that's
data in memory and you can just

253
00:19:27,280 --> 00:19:30,490
generally execute code once you have
code execution on a box just in the

254
00:19:30,490 --> 00:19:35,650
generic sense so the thing is if you
have an image file you're parsing an

255
00:19:35,650 --> 00:19:39,130
image so many programs do that and all
you have to do is a call instruction

256
00:19:39,970 --> 00:19:44,740
nobody's going to blacklist the call
instruction because that AV company

257
00:19:44,740 --> 00:19:45,180
would be

258
00:19:45,180 --> 00:19:52,200
business very quickly and you can move
through any image file and no one's

259
00:19:52,200 --> 00:19:55,680
going to blacklist a bunch of all cats
on the internet unless they're all

260
00:19:55,680 --> 00:20:00,750
together but if you just keep changing
it to go grab these bites and grab that

261
00:20:00,750 --> 00:20:06,750
image now it's significantly harder to
sing and eighties not to be able to scan

262
00:20:06,750 --> 00:20:09,810
memory maybe it'll do something in a
sandbox but there's a lot of ways to

263
00:20:09,810 --> 00:20:14,909
detect that you're in a sandbox and if
they be scanning memory if you think

264
00:20:14,910 --> 00:20:18,210
semantic back in the early 2000s was
slow

265
00:20:18,210 --> 00:20:25,500
yeah not not doable so the other thing
too when we're thinking about this

266
00:20:25,500 --> 00:20:32,700
process what would a human and machine
catch so computers are are not grammar

267
00:20:32,700 --> 00:20:37,110
police you're not go also you're
probably not going to make some AV act

268
00:20:37,110 --> 00:20:42,780
as a grammar police because as funny as
that would be you would have significant

269
00:20:42,780 --> 00:20:49,050
amount of false positives so course i
mentioned a fail of mine so the first

270
00:20:49,050 --> 00:20:52,830
thing there's like don't you miss me
versus you miss my mom

271
00:20:53,400 --> 00:20:57,120
true story by the way I was talking
about someone who is going to come to a

272
00:20:57,120 --> 00:21:00,330
conference in the space in Beijing it's
like all don't you miss me should come

273
00:21:00,330 --> 00:21:08,580
and I actually said to I said to her you
miss my mom and yes that's maybe I

274
00:21:08,580 --> 00:21:11,790
should maybe I should practice a little
more before messaging on my friends

275
00:21:11,790 --> 00:21:17,610
letting my friends that way but it was
kind of funny a computer will catch that

276
00:21:17,610 --> 00:21:20,699
but a human brain with that would
absolutely catch it

277
00:21:22,110 --> 00:21:28,050
so our crypto here were generally trying
to move into the second agra field

278
00:21:28,590 --> 00:21:31,919
what is the difference for the second
ography in cryptography second ography

279
00:21:31,920 --> 00:21:36,240
is not just a bunch of images you find
what's the hidden image on the CTF

280
00:21:36,240 --> 00:21:38,460
problem find the least significant bits

281
00:21:38,460 --> 00:21:43,140
there's a much larger scope there what
it really is is you make your message

282
00:21:43,140 --> 00:21:48,180
look like something else so over the
network path you can use stego and so

283
00:21:48,180 --> 00:21:51,180
one example is dns tunneling which we
use a lot

284
00:21:51,930 --> 00:21:56,220
why is it so hard to catch because you
have to let the NS requests out and if

285
00:21:56,220 --> 00:21:58,680
you're hitting a dns server with a bunch
of host names

286
00:21:58,680 --> 00:22:02,520
any heuristics just all heuristics are
just going to see

287
00:22:02,520 --> 00:22:09,420
oh that's just dns ok allow that and
well your perimeters broken and that's

288
00:22:09,420 --> 00:22:12,510
sad for a lot of companies he spent lots
and lots of money on the perimeter and

289
00:22:12,510 --> 00:22:17,700
are people that are say tell them that a
pretty good hustle though torch for a

290
00:22:17,700 --> 00:22:26,190
while there I was not working so
essentially with stego you need security

291
00:22:26,190 --> 00:22:29,550
by obscurity because if you want
something not to exist you have to not

292
00:22:29,550 --> 00:22:32,610
tell someone about that so the whole
added security by security doesn't work

293
00:22:32,610 --> 00:22:35,159
well when it's your only choice

294
00:22:35,160 --> 00:22:40,320
that's what you used that's why Caesar
had back in the back in the Roman days

295
00:22:40,320 --> 00:22:43,050
they had to use a caesar cipher even
though someone who knows about it would

296
00:22:43,050 --> 00:22:44,730
catch it it worked

297
00:22:44,730 --> 00:22:51,660
that's what they had and so we're going
to stego what looks legitimate text is

298
00:22:51,660 --> 00:22:55,200
of course my favorite you can encode
that much and i'm not going to repeat a

299
00:22:55,200 --> 00:23:00,960
previous talk but mess around stuff like
drunk types tengo whitespace eating put

300
00:23:00,960 --> 00:23:05,730
white space for bits and then have a key
in there in the text hidden so there's

301
00:23:05,730 --> 00:23:10,230
lots of different that really helps data
over the wire but also with store data

302
00:23:10,230 --> 00:23:14,640
if you make it look like something else
it can really confuse anyone doing

303
00:23:14,640 --> 00:23:20,130
forensics and mentioning this always get
some people are doing blue team stuff

304
00:23:20,130 --> 00:23:23,220
and they're like yeah well we're
starting to do this in bed itself and

305
00:23:23,220 --> 00:23:27,420
files just to really confuse the
forensics people but you know what

306
00:23:27,420 --> 00:23:31,470
it works because there's usually a time
block with how long they look at it so

307
00:23:31,470 --> 00:23:38,190
even with a human-looking in a forensic
situation if the actual malware is and a

308
00:23:38,190 --> 00:23:43,950
bunch of all cats and you're parsing for
various bits stored and you store that

309
00:23:43,950 --> 00:23:48,000
in white space somewhere where it looks
like someone was just rambling on and

310
00:23:48,000 --> 00:23:51,000
just couldn't use their tab there
spacebar key

311
00:23:51,000 --> 00:23:55,680
well that that's actually a malware it's
gonna take them a while it will confuse

312
00:23:55,680 --> 00:24:02,250
a lot of people and sorry

313
00:24:02,250 --> 00:24:06,840
yeah one thing to the one-time pad where
you get into that a lot

314
00:24:07,350 --> 00:24:10,860
why is the one-time pad good but because
no one had pad is actually the perfect

315
00:24:10,860 --> 00:24:16,199
cipher there's of course some issues
where if you can make guesses you can

316
00:24:16,200 --> 00:24:21,210
you have to make sure that your pad is
secure which is nearly impossible that's

317
00:24:21,210 --> 00:24:25,500
why nobody uses it but the funny thing
about that will go into this if you're

318
00:24:25,500 --> 00:24:29,160
just soaring all the fights of the
message you can store them back to

319
00:24:29,160 --> 00:24:30,630
whatever you want

320
00:24:30,630 --> 00:24:35,010
so it sounds like decrypt this drive
okay that you decrypted to something

321
00:24:35,010 --> 00:24:38,310
totally different but it looks like you
decrypted it and of course you can't

322
00:24:38,310 --> 00:24:41,700
just randomly typed a different password
to decrypt it differently

323
00:24:41,700 --> 00:24:48,120
well yeah actually maths as you can so
far as the whole FBI and the iphone case

324
00:24:48,120 --> 00:24:53,189
if the guy they wanted was actually sick
sophisticated enough they could make it

325
00:24:53,190 --> 00:24:57,330
so oh yeah the iphone just decrypted
into an entirely different OS and then

326
00:24:57,330 --> 00:25:01,379
they wouldn't find that which is my way
of essentially saying hey guys cut it

327
00:25:01,380 --> 00:25:05,280
out don't you're not going to find that
factory won't work try something else

328
00:25:05,280 --> 00:25:12,750
might actually do your job so so I this
really actually has that has stopped and

329
00:25:12,750 --> 00:25:19,620
so nobody actually really here is is is
this image plausible to so even if you

330
00:25:19,620 --> 00:25:24,870
like doing is or ciphers and it's a PNG
file is your next-gen firewall is that

331
00:25:24,870 --> 00:25:28,889
going to say hey that doesn't actually
look like a picture that's a bunch of

332
00:25:28,890 --> 00:25:31,110
random colors i'm going to flag it

333
00:25:31,110 --> 00:25:34,649
no because how are you going to do that
should really wear these you could

334
00:25:34,650 --> 00:25:37,740
possibly do some machine learning but
you know how many false positives you're

335
00:25:37,740 --> 00:25:40,830
going to have at least for the next 30
years

336
00:25:40,830 --> 00:25:45,480
that's not valid so even if the focus
file that just kind of looks like that

337
00:25:46,020 --> 00:25:50,400
there you go that's a way to hide to
hide your day to hide your payloads

338
00:25:50,400 --> 00:25:55,230
because nobody's gonna nobody's gonna
look at that and so here's the key

339
00:25:55,770 --> 00:26:01,080
oh I'm just taking a PNG file there's so
many tools it will analyze PNG's and oh

340
00:26:01,080 --> 00:26:03,090
here's a bunch of random text

341
00:26:03,090 --> 00:26:08,459
oh but actually if eyes or them thats
thats malware and but you can't really

342
00:26:08,460 --> 00:26:10,440
blacklist that because it's in memory

343
00:26:10,440 --> 00:26:13,890
yeah kind of fun

344
00:26:13,890 --> 00:26:19,530
and so essentially it's is all this
lying right but when are you going to

345
00:26:19,530 --> 00:26:24,780
stay go over the wire is a really good
time I always do this rant about I

346
00:26:24,780 --> 00:26:29,430
always great about ssl inspections a
huge trend absolutely hate it because

347
00:26:29,430 --> 00:26:35,310
all it does is when you get breached the
your attackers just going to go on your

348
00:26:35,310 --> 00:26:38,399
SL inspection box and you're also have
to tell your employees

349
00:26:38,400 --> 00:26:41,760
oh by the way you know how we allow you
to browse it to buy things on amazon

350
00:26:41,760 --> 00:26:45,810
while you're at work so all your amazon
passwords are also lost in addition to

351
00:26:45,810 --> 00:26:50,490
us getting breached so it becomes even
less fun and all you get from that

352
00:26:50,490 --> 00:26:55,050
well not really anything because a
sophisticated attacker can there's

353
00:26:55,050 --> 00:26:59,129
essentially infinite number of
possibilities to get around that so you

354
00:26:59,130 --> 00:27:03,900
cannot that door it but and if you're
trying to avoid blacklist thing text

355
00:27:03,900 --> 00:27:09,270
images nobody cares about that that's
innocuous and it's a text instead of

356
00:27:09,270 --> 00:27:15,420
word docs because people are now on the
lookout for word doc exploits so we can

357
00:27:15,420 --> 00:27:19,020
but images nobody cares you're
downloading images all the time you're

358
00:27:19,020 --> 00:27:20,129
browsing the web

359
00:27:20,130 --> 00:27:25,830
nobody looks like that and nobody can
blacklist this and so really the whole

360
00:27:25,830 --> 00:27:29,490
signature approach goes away but also
the reverse engineering approach looking

361
00:27:29,490 --> 00:27:33,870
at the binary by a machine it starts
getting a lot harder it's gonna take

362
00:27:33,870 --> 00:27:39,149
more computing power and so now we're
going to go Spence panel one-time pad

363
00:27:39,150 --> 00:27:44,040
and actually dig into this because our
goal here is we have 20 minutes we're

364
00:27:44,040 --> 00:27:50,100
going to then use the one-time pad and
design a cipher and this is not this

365
00:27:50,100 --> 00:27:55,379
mafia payload cipher we're honestly if
you just sore one bite you can get past

366
00:27:55,380 --> 00:27:58,740
most AV a lot of times actually hearing
last night people talking about that

367
00:27:58,740 --> 00:28:00,480
like yeah exactly

368
00:28:00,480 --> 00:28:03,840
if you do it yourself they're not going
to catch it but I want to then make a

369
00:28:03,840 --> 00:28:08,520
cipher that where we actually have to
encrypt the data but I want to make it

370
00:28:08,520 --> 00:28:11,879
so someone's got a gun to your head and
says decrypt the drive you can decrypt

371
00:28:11,880 --> 00:28:13,440
it whatever you want

372
00:28:13,440 --> 00:28:16,620
so that's going to be our next goal we
need to talk about sums up with the

373
00:28:16,620 --> 00:28:22,949
one-time pad at some point so and we're
gonna show crypto back door completely

374
00:28:22,950 --> 00:28:25,100
secret so this is the

375
00:28:25,100 --> 00:28:28,340
this is kind of the current state of
what people think of when they are

376
00:28:28,340 --> 00:28:36,020
thinking of overly encrypting is this
but that that's a valid cryptographic

377
00:28:36,020 --> 00:28:40,970
attack it works that's actually there
got a lot of government officials you

378
00:28:40,970 --> 00:28:47,210
think that's the best way to do it and
want to take keys so let's stop the

379
00:28:47,210 --> 00:28:50,840
rubber hose that app so how do you get
someone to believe a lie

380
00:28:51,710 --> 00:28:54,770
everyone says you gotta make them work
for it you gotta make it slightly

381
00:28:54,770 --> 00:29:00,679
incriminating you got to make them think
they've got something so make it look

382
00:29:00,679 --> 00:29:06,890
like something else problem so because
these days people like Oh crypto is

383
00:29:06,890 --> 00:29:08,059
strong

384
00:29:08,059 --> 00:29:13,820
this is their attack you have to be able
to live with them you gotta tell them

385
00:29:13,820 --> 00:29:15,200
nothing to see here

386
00:29:15,200 --> 00:29:20,059
ok so right here like to bring this up
because i saw this when I was staying at

387
00:29:20,059 --> 00:29:26,690
family out what out west and of course
the cat is looking like it had just

388
00:29:26,690 --> 00:29:33,140
murdered the rabbit there but if you
give them something because oh it's just

389
00:29:33,140 --> 00:29:38,510
the rabbit give them something there
might be an evil plan back there you

390
00:29:38,510 --> 00:29:43,669
don't know incriminate yourself somewhat
and when you're trying to go with

391
00:29:43,669 --> 00:29:50,330
randomness you can actually get to
random to and so we will we'll go with

392
00:29:50,330 --> 00:29:53,418
that later timing-wise that they want to
go through that I'm sorry we're going to

393
00:29:53,419 --> 00:29:58,640
go through a survey but I want to go
through because at first when I give us

394
00:29:58,640 --> 00:30:00,110
a small version this talk

395
00:30:00,110 --> 00:30:03,889
it was a fast 15 minute version there
are so many things i want to put in so I

396
00:30:03,890 --> 00:30:09,799
kind of wanted to go through go through
everything but now we want to design the

397
00:30:09,799 --> 00:30:15,710
LTP to actually create ago so if we want
to store key in a file because we want

398
00:30:15,710 --> 00:30:22,190
to decrypt from that file if you have n
bytes in the file that are your key and

399
00:30:22,190 --> 00:30:26,150
you want to know how to find it if
someone just give you the file

400
00:30:26,150 --> 00:30:32,659
hey there's an encryption key in here
where is it oh how many by turn an image

401
00:30:32,659 --> 00:30:35,980
a lot and so

402
00:30:35,980 --> 00:30:41,290
so if you're given if you're given a
file size and your choosing and bites

403
00:30:41,290 --> 00:30:47,860
its m2's n which is which is a huge
number because factorials are very very

404
00:30:47,860 --> 00:30:53,049
big so if you're trying to choose eight
bytes out of a $OPERAND out of 20 meg

405
00:30:53,049 --> 00:30:54,070
file

406
00:30:54,070 --> 00:30:58,899
good luck that's cryptographic level
guessing that's upwards of you know

407
00:30:58,900 --> 00:31:03,760
nearly you can you'll hit to the 256
very fast and it's like all that . just

408
00:31:03,760 --> 00:31:06,850
brute force regular crypto if you have a
pot problem if you have the ability to

409
00:31:06,850 --> 00:31:13,000
do that so a lot of the stego challenges
CTFs they have to make them very flawed

410
00:31:13,000 --> 00:31:19,090
because if you're really hiding random
random bytes you won't get that you need

411
00:31:19,090 --> 00:31:23,020
to find out what looks for it because if
someone just gives you that image you

412
00:31:23,020 --> 00:31:25,450
were not going to get that it is
impossible

413
00:31:25,450 --> 00:31:31,630
I would more likely see that aes would
be totally broken or would be less

414
00:31:31,630 --> 00:31:36,730
surprising than being able to find that
because at that point it's truly a wild

415
00:31:36,730 --> 00:31:39,160
guess

416
00:31:39,160 --> 00:31:44,799
so one thing you can do on the file
because sometimes you might have more

417
00:31:44,799 --> 00:31:51,190
than one file encrypted with a stream
cipher on top of that even if you have a

418
00:31:51,190 --> 00:31:56,380
static kee that's fine because if you
know that it's just a ski if you throw a

419
00:31:56,380 --> 00:32:01,270
yes all 20 / something it's no longer
just a ski we're actually going to run

420
00:32:01,270 --> 00:32:05,110
into that later me to our example and
bringing all this stuff up because when

421
00:32:05,110 --> 00:32:09,159
we create our example we're going to
start using these techniques that kind

422
00:32:09,160 --> 00:32:14,320
of interactively going through it so i'm
just laying this all out and again when

423
00:32:14,320 --> 00:32:18,970
everything dietro about security by
obscurity and choose an big big number

424
00:32:18,970 --> 00:32:27,340
problem is though if you're doing some
if you're doing padding you might not be

425
00:32:27,340 --> 00:32:30,370
able to decrypt you can't use an
algorithm like a yes or any of that

426
00:32:30,370 --> 00:32:34,059
stuff that's actually very much more
cryptographically secure than what we're

427
00:32:34,059 --> 00:32:36,220
going to do what we have our limitations

428
00:32:36,220 --> 00:32:39,850
just like with public key crypto we've
got our limitations we have a new set of

429
00:32:39,850 --> 00:32:43,959
requirements so you're going to have
some issues with padding the data so you

430
00:32:43,960 --> 00:32:46,990
have to be able to do this unpadded
which is going to add a few extra

431
00:32:46,990 --> 00:32:49,070
challenges to us

432
00:32:49,070 --> 00:32:54,529
so one thing as far as randomizing the
data to that you can do is if you're

433
00:32:54,529 --> 00:33:01,279
encrypting it you can also take the you
can also take the key you take a key and

434
00:33:01,279 --> 00:33:05,539
you just hash an extra password is kind
of a two-factor certainly two-factor

435
00:33:05,539 --> 00:33:09,559
authentication but now you've also
encrypt the message and made it even

436
00:33:09,559 --> 00:33:16,100
harder to to mess around with and even
essentially discreet but at that point

437
00:33:16,100 --> 00:33:20,299
we can just encrypt the data again and
it's really just for obfuscation the

438
00:33:20,299 --> 00:33:22,908
extra security is just icing on the cake

439
00:33:22,909 --> 00:33:28,159
they're so one thing too if you need to
get random integers like if you're

440
00:33:28,159 --> 00:33:31,669
grabbing from a file to someone you want
to grab the key from a file because you

441
00:33:31,669 --> 00:33:36,830
don't want to optimize this now we're
trying to obfuscate data so optimal

442
00:33:36,830 --> 00:33:38,418
crypto is out the window

443
00:33:38,419 --> 00:33:43,159
you don't care about how fast it is
because making it fast is very hard and

444
00:33:43,159 --> 00:33:46,700
then it will also cause more problems
and computers are very fast these days

445
00:33:46,700 --> 00:33:52,519
and one-time pads are very fast so one
trick left matically and we're gonna run

446
00:33:52,519 --> 00:33:57,679
into this later in this is weird is if
you take a prime to a power it's always

447
00:33:57,679 --> 00:34:01,429
relatively prime which all that means is
it doesn't share any prime factors with

448
00:34:01,429 --> 00:34:04,490
with anything else with with another
number

449
00:34:04,490 --> 00:34:08,149
they're relatively prime will always be
relatively prime to the modulus if you

450
00:34:08,149 --> 00:34:11,839
go like a prime number to the first
power to the second is going to cycle

451
00:34:11,839 --> 00:34:16,190
through like a clock through that hole
through those numbers so now you've

452
00:34:16,190 --> 00:34:21,409
created a set of random numbers and you
can randomly raise a prime to a power a

453
00:34:21,409 --> 00:34:24,740
different power and you get a random
number and it's a lot harder to guess

454
00:34:24,739 --> 00:34:28,790
and it makes a very difficult lookup
table and so it adds some confusion so

455
00:34:28,790 --> 00:34:32,418
yes you can somewhat break the padding
but that techniques makes it very hard

456
00:34:32,418 --> 00:34:37,790
and pretty much all padding algorithms
are based on that are just based on take

457
00:34:37,790 --> 00:34:40,369
a prime number keep multiplying it by
itself

458
00:34:40,369 --> 00:34:46,129
that's it and so that this that goes
into a further that when you're choosing

459
00:34:46,129 --> 00:34:50,569
a prime modulus we can get that but it
just works it's just more examples of

460
00:34:50,569 --> 00:34:58,160
alternating of alternating through why
is it not going out anymore but that's

461
00:34:58,160 --> 00:34:59,930
why

462
00:34:59,930 --> 00:35:06,348
so that this is this is for people who
are actually designing crypto no

463
00:35:06,349 --> 00:35:10,339
primitive root is always a primitive
root you will otherwise break the cycle

464
00:35:10,339 --> 00:35:14,540
and Uranus dies so you always want to
use a primitive root all that means is

465
00:35:14,540 --> 00:35:16,220
that so

466
00:35:16,220 --> 00:35:22,009
boilers theorem a toughy event modern is
always equal to 14 feet is the number of

467
00:35:22,010 --> 00:35:26,240
did the number of values less than
relatively prime to end if in that case

468
00:35:26,240 --> 00:35:30,500
you you have that you can still just
because it equals 1 there's other values

469
00:35:30,500 --> 00:35:35,750
work in cycle earlier so if your loop is
a lot shorter you have a lot fewer

470
00:35:35,750 --> 00:35:40,760
values that can go into their so always
use a primitive root and that's a lot of

471
00:35:40,760 --> 00:35:44,089
times in the self implemented
diffie-hellman that's what people forget

472
00:35:44,089 --> 00:35:49,700
and then they cause problems and so
generally is that rule of thumb that

473
00:35:49,700 --> 00:35:54,529
will that will do that so when you're
doing one-time pad stuff

474
00:35:54,530 --> 00:35:58,339
the problem is your key is as big as the
message so you have to find a way to

475
00:35:58,339 --> 00:36:03,680
hide the key on the box without having
the key to unlock the key but it's big

476
00:36:03,680 --> 00:36:08,720
you can't just pad that out from a
password because you have low entropy

477
00:36:08,720 --> 00:36:14,899
and then also if you're given a password
what is easier password that you know

478
00:36:14,900 --> 00:36:17,869
yourself and you made for one that's
given to you

479
00:36:17,869 --> 00:36:21,140
let's give you so much harder to
remember and you're not going to be able

480
00:36:21,140 --> 00:36:25,879
to with the gun to your head remember
your fake password as easily unless you

481
00:36:25,880 --> 00:36:28,880
came up with it so that's going to
become an interesting requirement when

482
00:36:28,880 --> 00:36:36,109
we when we start doing the anti rubber
hose stego and so what we're going to do

483
00:36:36,109 --> 00:36:39,410
is we're going to take so there's going
to be three ciphertext your random data

484
00:36:39,410 --> 00:36:44,328
and then two keys the keys itself are
ciphertext because you're essentially

485
00:36:44,329 --> 00:36:48,650
soaring it with the random data which
becomes your cipher text so what happens

486
00:36:48,650 --> 00:36:53,089
is we're going to design this so we have
our two plain text that we want and then

487
00:36:53,089 --> 00:36:57,920
our ciphertext and so what will happen
is we are then going to be able to have

488
00:36:57,920 --> 00:37:03,680
two different plaintext and be able to
decrypt the data and to fake data so

489
00:37:03,680 --> 00:37:08,210
let's go ahead and design and design a
crypto algorithm right here

490
00:37:08,210 --> 00:37:11,210
so in this situation

491
00:37:12,290 --> 00:37:15,290
you need to have it so that the user can
type a password

492
00:37:15,830 --> 00:37:21,140
it'll decrypt our data they type a
different password of their choice and

493
00:37:21,140 --> 00:37:27,500
it decrypt to other data so how are we
gonna do this once you are as a random

494
00:37:27,500 --> 00:37:31,940
set of fights can be anything just make
it random as we know true random as

495
00:37:31,940 --> 00:37:35,840
possible if you want to do that so
eventually you can actually make the the

496
00:37:35,840 --> 00:37:39,560
reason I brought up the to randomness it
wasn't just a random tangent what I

497
00:37:39,560 --> 00:37:44,900
meant was talking about there is someone
might say oh it's not mathematically

498
00:37:44,900 --> 00:37:50,090
impossible to show that you can decrypt
data into whatever you want but I'm

499
00:37:50,090 --> 00:37:56,000
trying to say yes that randomness can be
perfect so if the FBI wants a crypto

500
00:37:56,000 --> 00:37:57,110
back door

501
00:37:57,110 --> 00:38:01,340
they're just being really really stupid
because here you go

502
00:38:01,340 --> 00:38:05,300
that's how you break whatever backdoor
you're doing so can you bring down your

503
00:38:05,300 --> 00:38:10,070
two messages right you have your fake
data you know of its kind of

504
00:38:10,070 --> 00:38:11,690
incriminating but not quite

505
00:38:11,690 --> 00:38:16,460
and then you have your file you don't
want anyone to ever see then you have to

506
00:38:16,460 --> 00:38:23,390
pick to pass phrases and so you take the
past races and you make a lookup table

507
00:38:23,390 --> 00:38:29,060
with all the keys so you take the you
take the keys and the keys are just

508
00:38:29,060 --> 00:38:32,660
soared with the message and the
randomness and now you have to make it

509
00:38:32,660 --> 00:38:36,589
so that if you type in a passphrase it
looks up the right keys it images and

510
00:38:36,590 --> 00:38:45,470
files whatever you want on the system be
creative but here's the problem if you

511
00:38:45,470 --> 00:38:49,009
only have 26 possibilities for the
password or however many ascii

512
00:38:49,010 --> 00:38:53,570
characters who are 55 250 times
incredibly small number for a computer

513
00:38:53,570 --> 00:38:59,510
now one thing that helps i was looking
at this is like this was really bugging

514
00:38:59,510 --> 00:39:01,850
me for a while and it's going through
designing like this is actually my

515
00:39:01,850 --> 00:39:05,600
thought process was well how do we make
a bigger character set

516
00:39:06,110 --> 00:39:10,700
well if password was then was in
Mandarin be so much easier because

517
00:39:10,700 --> 00:39:14,870
you're 20,000 character set which is
significantly bigger than 26 so actually

518
00:39:14,870 --> 00:39:20,000
in some areas language and passwords can
affect the security of the crypto itself

519
00:39:20,000 --> 00:39:23,060
so but

520
00:39:23,060 --> 00:39:27,290
the guy using it doesn't speak doesn't
matter crap ok so you got to work with a

521
00:39:27,290 --> 00:39:31,520
non with a non pictographic language so
you take care of but we're going to do

522
00:39:31,520 --> 00:39:36,259
is take character groups of size 3 map
them with different parts of the key

523
00:39:36,890 --> 00:39:43,430
why sighs three because 255 to the third
comes a lot closer to 20,000 and now we

524
00:39:43,430 --> 00:39:49,490
actually have some some expectation of
security so essentially what you would

525
00:39:49,490 --> 00:39:54,109
do is you take you take a hex value
longer hex values you take parts of the

526
00:39:54,110 --> 00:39:58,460
passphrase break them up right we're
gonna break them up make a lookup table

527
00:39:58,460 --> 00:40:02,240
and you can also do something fancy put
them in images like we were talking

528
00:40:02,240 --> 00:40:07,069
about earlier right you can take them up
put them in a lookup table and then so

529
00:40:07,070 --> 00:40:09,650
you take it from the passphrase then you
take all the other three letter

530
00:40:09,650 --> 00:40:15,440
combinations right random data right so
now if you don't know the password

531
00:40:15,440 --> 00:40:21,230
there's just random data you have a
cipher text which is random bytes and

532
00:40:21,230 --> 00:40:24,260
the algorithm decrypt them is Zoar it
with the key

533
00:40:24,950 --> 00:40:30,589
here's the thing if you saw it with any
key you can make it anything you want

534
00:40:31,340 --> 00:40:35,330
so known plaintext doesn't work oh you
guys order that must be the key that's

535
00:40:35,330 --> 00:40:36,140
the password

536
00:40:36,140 --> 00:40:39,890
do you know no is there any way to find
out mathematically impossible

537
00:40:40,910 --> 00:40:46,640
ok so there you go so now we have now we
have that here is a problem where did we

538
00:40:46,640 --> 00:40:49,759
mess up and this is why sometimes people
don't always implement implement your

539
00:40:49,760 --> 00:40:55,130
own cryptography bad idea if the message
is only an ascii and it doesn't have any

540
00:40:55,130 --> 00:40:59,690
other but it doesn't happen just those
characters if those random values that

541
00:40:59,690 --> 00:41:05,330
are on different values that are not the
password you now have you can eliminate

542
00:41:05,330 --> 00:41:08,660
part of that password when you're
looking through it so that's one attack

543
00:41:08,660 --> 00:41:14,240
on this that we realized would work so
you can either make it so that is only

544
00:41:14,240 --> 00:41:18,169
you can detect oh its ASCII data i'm
only gonna make me look up table that

545
00:41:18,170 --> 00:41:24,020
way or one way you can do that is you
could throw a yes over there so

546
00:41:24,020 --> 00:41:28,430
essentially that's what we're looking at
earlier what was our problem we had a

547
00:41:28,430 --> 00:41:32,180
flaw in our entropy so it wasn't all for
nothing that discussion we had a flaw or

548
00:41:32,180 --> 00:41:34,430
entropy so how do we fix it

549
00:41:34,430 --> 00:41:44,000
so we had a what we can do is we can
just throw a s over it doesn't matter

550
00:41:44,000 --> 00:41:47,300
standard key we have a confusion
confusion but we're using it for the

551
00:41:47,300 --> 00:41:50,930
right thing we're using it to confuse or
diffuse if you want to put a two-factor

552
00:41:50,930 --> 00:41:56,240
then you can have that password in there
and if someone's ever seen you in screen

553
00:41:56,240 --> 00:41:59,750
surf you now it looks legitimate one day
of the gun to your head your head and

554
00:41:59,750 --> 00:42:06,170
say type password so at that point you
can actually you can actually obvious

555
00:42:06,170 --> 00:42:14,780
get that data now one issue is if you
had that as your message what's the

556
00:42:14,780 --> 00:42:19,849
problem here if everyone knows that the
message that the gold is hidden that now

557
00:42:19,849 --> 00:42:23,210
you've stolen most of the password
entropy failure again

558
00:42:23,839 --> 00:42:27,828
so what can you what can you actually
need to fix that

559
00:42:27,829 --> 00:42:32,300
well this is the same method however one
kind of funny thing with this is there's

560
00:42:32,300 --> 00:42:36,140
no rule that you have to only have two
plain texts so you can have an infinite

561
00:42:36,140 --> 00:42:39,890
amount of plaintext aware of all the
possibilities of where the gold is

562
00:42:39,890 --> 00:42:43,700
buried so someone will guess your
password and they'll be like oh crap all

563
00:42:43,700 --> 00:42:48,020
the other passphrases show the other
longitudes and latitudes now there's no

564
00:42:48,020 --> 00:42:52,220
way and they already they already like
oh we got that so that they they killed

565
00:42:52,220 --> 00:42:54,470
their hostage right here as the key to
that

566
00:42:54,470 --> 00:42:59,629
oh crap it decrypt into every other
possible possibility we don't have

567
00:42:59,630 --> 00:43:04,130
anything so you control with that was
fixing that I realized would be a funny

568
00:43:04,130 --> 00:43:08,869
way to troll with this with this
methodology over guys are following on I

569
00:43:08,869 --> 00:43:13,280
really wanted to do this is a let's try
to create this together because I would

570
00:43:13,280 --> 00:43:16,790
love for us to start making crypto
methods because here's the thing that's

571
00:43:16,790 --> 00:43:21,650
happening right now is we are losing
trust and what government might do with

572
00:43:21,650 --> 00:43:24,710
crypto and right now we're putting a lot
of trust in the mist

573
00:43:24,710 --> 00:43:31,220
so we forget how to do this we've got a
major problem so let's just go up

574
00:43:31,220 --> 00:43:36,410
through our flaws so we can use a yes to
to randomize the data and to just as a

575
00:43:36,410 --> 00:43:41,328
randomization method to make it so it's
not all texts we can for the password

576
00:43:41,329 --> 00:43:45,589
length could be a multiple of three most
of all three we need to Pat it how do we

577
00:43:45,589 --> 00:43:46,580
Pat it

578
00:43:46,580 --> 00:43:49,759
well with Peter the end you can take the
password the old part of the password

579
00:43:49,760 --> 00:43:54,110
rate take a prime number raised to that
power now you have a random value it's

580
00:43:54,110 --> 00:43:57,020
hard to guess when your brute forcing
the password

581
00:43:57,020 --> 00:44:00,800
it's going to be very difficult it's
easier when the password is a multiple

582
00:44:00,800 --> 00:44:06,050
of three or whatever you choose for your
character length but at that point you

583
00:44:06,050 --> 00:44:11,510
now you can actually pass it safely and
so on so that's why we mention that

584
00:44:11,510 --> 00:44:16,280
method is that's a legitimate padding
method and so we now

585
00:44:17,240 --> 00:44:21,529
well let's go to the takeaways of this
is that this . now it seems like its

586
00:44:21,530 --> 00:44:25,160
legit cryptosystem i'm still going to
look at it if you guys have any issues

587
00:44:25,160 --> 00:44:29,359
with any flaws with this I'm gonna post
an implementation of to get hub let's

588
00:44:29,360 --> 00:44:33,920
talk about it because I really want to
have this anti rubber hose crypto out

589
00:44:33,920 --> 00:44:38,240
there essentially is a message because
we know the problems with master keys

590
00:44:38,240 --> 00:44:41,810
right we know look at the TSA keys

591
00:44:41,810 --> 00:44:46,820
how many of us have tsa tsa keys that
were given by people in the community

592
00:44:46,820 --> 00:44:49,520
that are essentially backdoors luggage

593
00:44:49,520 --> 00:44:53,330
there's a significant risk but i want to
show people who think that there should

594
00:44:53,330 --> 00:45:00,140
be a master key somewhere there's no
reward either an attack on an adversary

595
00:45:00,140 --> 00:45:05,750
can use techniques like this and you
can't force people decrypter drive at

596
00:45:05,750 --> 00:45:06,380
customs

597
00:45:06,380 --> 00:45:09,740
why do you make some decrypter drive
first of all they're used eggnog raphy

598
00:45:09,740 --> 00:45:11,479
going to send over the Internet

599
00:45:11,480 --> 00:45:15,230
you can't firewall that off your country
I mean everyone knows where the Great

600
00:45:15,230 --> 00:45:18,350
Firewall of China but how many people
are able to get on their Facebook and

601
00:45:18,350 --> 00:45:19,940
Twitter while they're in China

602
00:45:19,940 --> 00:45:23,240
I mean come on that's it's kind of an
illusion they're making it they're

603
00:45:23,240 --> 00:45:27,799
making an additional barrier but the
point of our customers decrypt your

604
00:45:27,800 --> 00:45:32,870
laptop that's stupid and I wanted to
even take that to the point to

605
00:45:32,870 --> 00:45:39,830
mathematically show that is stupid and
so over stego they said infinite

606
00:45:39,830 --> 00:45:44,180
possibilities morning but yeah that's
that is the that's the truth there

607
00:45:44,180 --> 00:45:49,759
anything can look like anything if you
have say let's let's put the data we

608
00:45:49,760 --> 00:45:55,490
have something that we can alter there's
an infinite number of things there's an

609
00:45:55,490 --> 00:46:00,950
infinite number of protocols that could
possibly be made so at this point you

610
00:46:00,950 --> 00:46:07,160
could there's no real way to change that
next-gen heuristics can't really be done

611
00:46:07,160 --> 00:46:09,830
over the network except for some blatant
things over like where is this

612
00:46:09,830 --> 00:46:15,080
connecting with any real adversaries
apartment anyway so who really cares so

613
00:46:15,080 --> 00:46:21,650
I'm even with the data at rest you can
now have a encryption method where you

614
00:46:21,650 --> 00:46:26,030
don't know if it's the right crypto
therefore rubber hose attack has gone

615
00:46:26,030 --> 00:46:30,350
away hope you guys follow along and want
to go through my thank yous so not

616
00:46:30,350 --> 00:46:32,240
Thunder public company

617
00:46:32,240 --> 00:46:36,589
Kyle and all the crew rest who put under
pecan yesterday and you guys go to derpy

618
00:46:36,590 --> 00:46:41,750
contents and BBQ yeah so that is that
it's at Kyle's house followed on twitter

619
00:46:41,750 --> 00:46:45,650
but the thursday before der beek on
every year go there so thank you guys

620
00:46:46,400 --> 00:46:51,200
LVN hammer for helping with the demo and
we're gonna get that up on up on github

621
00:46:51,200 --> 00:46:57,560
and meal for waking me up this morning
my phone died and at Derby khan and

622
00:46:57,560 --> 00:47:00,799
everyone putting this putting this
together thank you thank you guys for

623
00:47:00,800 --> 00:47:04,040
coming i hope i didn't for you guys
there's a lot to go through

624
00:47:04,040 --> 00:47:09,470
if you have questions contact info
twitter email email me let's talk about

625
00:47:09,470 --> 00:47:10,009
this

626
00:47:10,010 --> 00:47:13,010
there was a lot to go through i'm gonna
try to put the slides of fun get help

627
00:47:13,010 --> 00:47:18,770
put a demo up on github and we can we
can work on something like this is there

628
00:47:18,770 --> 00:47:19,610
other any questions

