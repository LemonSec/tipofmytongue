1
00:00:00,000 --> 00:00:07,080
well good morning thank you all for
coming out to the the first more first

2
00:00:07,080 --> 00:00:11,550
session of the morning and i feel like i
need to start with the fire and

3
00:00:11,550 --> 00:00:18,869
brimstone here of Intel SGX i'm
particularly impressive would show up

4
00:00:18,869 --> 00:00:22,529
for a talk that had John up tight in the
title

5
00:00:23,070 --> 00:00:29,039
I actually threw that in a little bit
sort of like for my mom my mom was a in

6
00:00:29,039 --> 00:00:33,600
english major an editor for Simon &
Schuster and shoes to school me on China

7
00:00:33,600 --> 00:00:37,410
or not and others but it's actually
pretty appropriate because the

8
00:00:37,410 --> 00:00:41,610
poetically opaque because we're going to
talk about this morning is a new

9
00:00:41,610 --> 00:00:46,860
security feature that was released by
Intel in November called sgx proper

10
00:00:46,860 --> 00:00:53,579
guard extensions and in my opinion it is
rather elegant and sort of a poetic way

11
00:00:53,579 --> 00:01:01,559
of helping lockdown security for your
applications and data it it actually

12
00:01:01,559 --> 00:01:08,009
will stand up what's called opaque black
boxes in the application stack and it's

13
00:01:08,010 --> 00:01:12,540
I think it's pretty powerful its brand
new so it's sort of like a green field

14
00:01:12,540 --> 00:01:17,250
for development or some projects that
you may want to start doing some

15
00:01:17,250 --> 00:01:22,979
research on because i think it really is
going to be a fairly a good game changer

16
00:01:22,979 --> 00:01:38,260
or for securing our systems but without
a little bit about Who I am office

17
00:01:38,260 --> 00:01:46,060
mentally manager then got into software
security research for the agency along

18
00:01:46,060 --> 00:01:51,430
that path spend a lot of time with an
essay on some research projects got

19
00:01:51,430 --> 00:01:58,270
involved with some other operations and
also with socom supporting our software

20
00:01:58,270 --> 00:02:05,050
providers and then moved on to blackbird
technologies the sort of a boutique

21
00:02:05,050 --> 00:02:10,449
company there in Northern Virginia again
supporting some of my old employers

22
00:02:10,449 --> 00:02:14,440
doing some very very interesting things
they were acquired about a

23
00:02:14,440 --> 00:02:18,190
year-and-a-half ago by Raytheon which is
another really good company doing some

24
00:02:18,190 --> 00:02:25,780
great work currently working at vmware
as the solutions architect supporting

25
00:02:25,780 --> 00:02:30,430
the intelligence community and DOD soft
community in particular i should

26
00:02:30,430 --> 00:02:38,020
probably know that my talk really has
nothing to do with CIA or CIA work my

27
00:02:38,020 --> 00:02:43,239
work with NSA or DoD is were like a
disclaimer and certainly not with with

28
00:02:43,239 --> 00:02:47,800
vmware i'm not going to be talking about
anywhere with any vmware products this

29
00:02:47,800 --> 00:02:53,410
morning although i will say since
arriving at vmware I started talking to

30
00:02:53,410 --> 00:03:01,209
some of their up esxi engineers in palo
alto about questioning about are you

31
00:03:01,209 --> 00:03:07,060
going to provide support for SG accident
your hypervisor VMware's always been a

32
00:03:07,060 --> 00:03:13,720
little reluctant to talk publicly about
coming future features but they did say

33
00:03:13,720 --> 00:03:18,280
it was okay for me to say that they are
looking at it's very difficult for them

34
00:03:18,280 --> 00:03:22,510
but they are looking at it very strongly
and I'll talk a little bit about some

35
00:03:22,510 --> 00:03:26,739
projects of some other companies are
doing and I think vmware understand they

36
00:03:26,739 --> 00:03:36,100
sort of need to get on board with as
well so why this talk obviously what

37
00:03:36,100 --> 00:03:42,340
we're doing today in terms of securing
our systems and our data is not working

38
00:03:42,340 --> 00:03:43,810
it's definitely not working

39
00:03:43,810 --> 00:03:50,290
you see all these spectacular breeches
and they seem to be increasing and

40
00:03:50,290 --> 00:03:53,859
magnitude and in an impact

41
00:03:53,860 --> 00:03:59,770
now certainly by layering on intel SSD
accident sort of things it's a lot like

42
00:03:59,770 --> 00:04:04,690
doing sort of more of the same but it's
a little bit i think a little bit better

43
00:04:04,690 --> 00:04:12,700
in how it it operates it's very discreet
in what it's trying to protect and as

44
00:04:12,700 --> 00:04:20,228
you'll see it's fairly actually pretty
easy to to implement and not to the sort

45
00:04:20,228 --> 00:04:27,669
of reignite an old flame war about hard
G versus soft G in the community

46
00:04:28,180 --> 00:04:34,510
I'm just curious about that that lower
publication whether or not that what

47
00:04:34,510 --> 00:04:46,900
should be a hard G or soft G but i'll
leave that as I said sought sgx is a

48
00:04:46,900 --> 00:04:50,469
fairly new technology the although
Intel's been working on it since

49
00:04:50,470 --> 00:04:53,919
probably around $MONTH 2012

50
00:04:53,919 --> 00:05:01,150
they just released it in commodity
processors in november of last year and

51
00:05:01,150 --> 00:05:06,400
there are some platforms available today
that do support it and in fact a laptop

52
00:05:06,400 --> 00:05:12,549
i'm demonstrating on here my
presentation laptop is sgx compliant so

53
00:05:12,550 --> 00:05:16,900
although there's a lot of processors out
there and i'll show you a little bit

54
00:05:16,900 --> 00:05:22,239
later that does support SG x not all the
motherboards are bios's yet supported so

55
00:05:22,240 --> 00:05:26,110
you have to be a little bit careful
there but I not gonna have a list for

56
00:05:26,110 --> 00:05:30,010
you of the machines that are available
commodity machines that are available

57
00:05:30,010 --> 00:05:39,280
that do support SG x pulling and it's
not expensive in my opinion I think sgx

58
00:05:39,280 --> 00:05:50,109
has it's probably the most impactful
technology released from Intel involving

59
00:05:50,110 --> 00:05:55,320
security and functionality since $YEAR
vtx and as you'll see the

60
00:05:55,320 --> 00:05:59,940
way that they've implemented sgx and how
they roll it out is very similar to what

61
00:05:59,940 --> 00:06:10,980
they did with the etfs so what I want to
do a sort of level set first why it's

62
00:06:10,980 --> 00:06:18,360
important that we take advantage of sgx
and both impact both in in the

63
00:06:18,360 --> 00:06:24,210
intelligence and defense communities and
in the private sector as well of course

64
00:06:24,210 --> 00:06:28,229
it's nothing new they've the abundance
and the analysts have been talking about

65
00:06:28,230 --> 00:06:35,220
this new cyber cold war for a number of
years now and why what's true in the

66
00:06:35,220 --> 00:06:40,290
larger geopolitical sense that there's
this new cyber Cold War what I want to

67
00:06:40,290 --> 00:06:48,150
focus up on in this talk is sort of the
game within the game a little CI or yeah

68
00:06:48,150 --> 00:06:55,020
Cold War struggle that's going on at the
working level both the agency NSA and in

69
00:06:55,020 --> 00:07:01,590
private sector in protecting our tools
our capabilities and our intellectual

70
00:07:01,590 --> 00:07:06,090
property that small subset of the Cold
War and make no mistake

71
00:07:06,660 --> 00:07:13,290
everybody here is involved in one way or
the other in this new cyber Cold War and

72
00:07:13,290 --> 00:07:27,540
how it's playing out the the the legacy
cybercoders the light legacy Cold War

73
00:07:27,540 --> 00:07:33,840
was fought primarily between proxy
adversaries in places like Africa Middle

74
00:07:33,840 --> 00:07:39,030
East Latin America certainly in the
front lines between NATO and Warsaw Pact

75
00:07:39,030 --> 00:07:46,260
this new cyber cold war however is being
fought really literally between the two

76
00:07:46,260 --> 00:07:49,830
sets of adversaries between the US
government and the US industry and

77
00:07:49,830 --> 00:07:55,859
Russia and China and so the stakes are
really high in terms of flat potential

78
00:07:55,860 --> 00:08:00,120
when these things happen if we can
distribute it properly and the the

79
00:08:00,120 --> 00:08:06,180
potential loss of tools data
intellectual property and value

80
00:08:06,180 --> 00:08:15,960
or four companies is is huge it's
absolutely monstrous so again in the

81
00:08:15,960 --> 00:08:19,680
private sector well in the in the
intelligence community they're worried

82
00:08:19,680 --> 00:08:25,050
about the tools and capabilities that
they developed to work against their

83
00:08:25,050 --> 00:08:30,990
adversaries trying to protect those
those capabilities from compromised from

84
00:08:30,990 --> 00:08:37,529
reverse engineering and and the impact
that that entails and the private sector

85
00:08:37,529 --> 00:08:43,799
of course the the threat is too
intellectual property and this you know

86
00:08:43,799 --> 00:08:49,829
the secret sauce is sort of like you
know probably coke a secret formula for

87
00:08:49,830 --> 00:08:53,100
code is up for grabs

88
00:08:53,100 --> 00:08:59,040
mcdonalds special sauce for their
hamburgers or Pied Pipers and sign-out

89
00:08:59,040 --> 00:09:05,910
algorithm so it's inside out

90
00:09:08,459 --> 00:09:12,930
yes so in those are the kind of things
that industry is trying to protect but

91
00:09:12,930 --> 00:09:16,500
they don't you know when industry loses
their intellectual property that has an

92
00:09:16,500 --> 00:09:21,420
effect on the US economy in the US
national security so as I said in one

93
00:09:21,420 --> 00:09:26,189
way or another all of us involved in the
cybersecurity whether it's developing

94
00:09:26,190 --> 00:09:30,480
offensive capabilities are developing a
defensive paper mills wear your red or

95
00:09:30,480 --> 00:09:36,150
blue you're involved in the cyber Cold
War make no mistake about that i was at

96
00:09:36,150 --> 00:09:42,180
a recent NSA DoD cyber security
conference factors about two weeks ago

97
00:09:42,180 --> 00:09:47,459
and one of the speakers there made the
comment that it's estimated that each

98
00:09:47,459 --> 00:09:55,680
year a trillion dollars in intellectual
property is stolen through cyber attacks

99
00:09:55,680 --> 00:09:58,680
trillion dollars

100
00:09:59,320 --> 00:10:06,640
so of course you know there's this this
tension between the need to to get their

101
00:10:06,640 --> 00:10:11,500
tools our capabilities our products or
software out into the market space if

102
00:10:11,500 --> 00:10:14,590
you're in the public sector but if
you're in the in the private sector of

103
00:10:14,590 --> 00:10:19,600
in the public sector and intelligence
community the OD you have your offensive

104
00:10:19,600 --> 00:10:24,550
tools that you put out there and as soon
as you do that obviously you're leaving

105
00:10:24,550 --> 00:10:29,290
them open to capture compromise reverse
engineering and it's a very specific

106
00:10:29,290 --> 00:10:35,319
problem it's almost like signals
intelligence right you can't send out a

107
00:10:35,320 --> 00:10:43,330
signal like a covert signal from some
system and not provide the the ability

108
00:10:43,330 --> 00:10:46,540
of an adversary to intercept that signal
into something within the course and

109
00:10:46,540 --> 00:10:57,760
Cyrus it's a very much the same way the
course today on the defensive side those

110
00:10:57,760 --> 00:11:03,640
involved in building offensive red team
types of tools we do take a lot of steps

111
00:11:03,640 --> 00:11:10,540
to try protect our tools binary to the
diversification code paths obfuscation

112
00:11:10,540 --> 00:11:15,699
you know those sort of things that make
things difficult for the adversaries to

113
00:11:15,700 --> 00:11:21,700
reverse-engineer tools and capabilities
sdx doesn't obviate the need to do that

114
00:11:21,700 --> 00:11:28,420
you still need to do that now very wide
here a little bit but sgx it gives you

115
00:11:28,420 --> 00:11:35,380
the capability to layer on more
difficulty for your reverse engineer

116
00:11:35,380 --> 00:11:38,980
adversaries and that's really what the
games all about you're never going to

117
00:11:38,980 --> 00:11:41,980
make we all know in this room you're
never going to make your software

118
00:11:41,980 --> 00:11:46,450
impervious to reverse-engineer you just
it's my opinion and the opinion of

119
00:11:46,450 --> 00:11:48,100
others you just can't do it

120
00:11:48,100 --> 00:11:53,620
so the idea is to make it so difficult
so expensive so and so hard that they

121
00:11:53,620 --> 00:11:58,780
either give up or in some cases just
aren't able to do it depending on their

122
00:11:58,780 --> 00:12:01,730
skill level

123
00:12:01,730 --> 00:12:08,329
with SG x intel i thinks handed us a
really good tool to help out in this

124
00:12:08,329 --> 00:12:11,420
regard

125
00:12:11,420 --> 00:12:16,189
let's talk a little bit about the impact
of all of this again for the

126
00:12:16,190 --> 00:12:20,779
intelligence community the major impact
the biggest impact is the CIA

127
00:12:20,779 --> 00:12:27,529
counterintelligence a problem that
connotes because if the adversaries can

128
00:12:27,529 --> 00:12:32,720
get into your tools reverse-engineering
how you're doing things and how things

129
00:12:32,720 --> 00:12:39,170
work that opens up a lot of bad things
that could happen to you from from the

130
00:12:39,170 --> 00:12:43,729
respective counterintelligence they can
get in the middle of all that and you

131
00:12:43,730 --> 00:12:45,260
wouldn't know about it

132
00:12:45,260 --> 00:12:50,000
the human cost they could they could
track back it's possible depending on

133
00:12:50,000 --> 00:12:56,360
the system's trackback the human aspect
and you lose those capabilities

134
00:12:57,199 --> 00:13:01,370
it's an opportunity for them that they
break into your systems to provide

135
00:13:01,370 --> 00:13:07,160
misinformation and exposed sense of
sources and methods and and that's one

136
00:13:07,160 --> 00:13:10,519
thing sort of like rules and
intelligence community sources and

137
00:13:10,519 --> 00:13:14,360
methods so when your tools get
compromised you lose sources and methods

138
00:13:15,079 --> 00:13:21,469
almost immediately the OPSEC impact very
similar to the count to the

139
00:13:21,470 --> 00:13:27,860
counterintelligence impact of losing
tools and that's you know your object

140
00:13:27,860 --> 00:13:33,019
just absolutely goes out the window and
of course the budgetary impacts are huge

141
00:13:33,019 --> 00:13:39,350
as well because you have to replace
those tools you know currently in the

142
00:13:39,350 --> 00:13:44,750
wake of the Snowden exposures in
addition to that in some other exposures

143
00:13:44,750 --> 00:13:51,350
and so the intelligence community has to
go and contract to have new tools and

144
00:13:51,350 --> 00:13:55,970
new capabilities built in recent years
we've seen a lot of our P's and

145
00:13:55,970 --> 00:14:00,980
solicitations come out requesting what
they call clean slate development

146
00:14:00,980 --> 00:14:06,740
because you know they don't want the
tools built on technologies that were

147
00:14:06,740 --> 00:14:11,600
previously compromise and that's
expensive and so that drives up costs

148
00:14:11,600 --> 00:14:12,279
and

149
00:14:12,279 --> 00:14:18,339
your to your tax dollars for the impact
their intelligence community's real in

150
00:14:18,339 --> 00:14:22,990
the private sector a lot of parallels
the biggest impact in the private sector

151
00:14:22,990 --> 00:14:27,009
of course has lost a comp competitive
edge because as I said a lot of these

152
00:14:27,009 --> 00:14:32,379
companies their key advantage in the
market space is their intellectual

153
00:14:32,379 --> 00:14:38,230
property something that they're doing
that's interesting unique and sets them

154
00:14:38,230 --> 00:14:44,620
apart from their competitors and when
private sector loses their tools and

155
00:14:44,620 --> 00:14:50,379
capabilities to reverse engineering they
lose quite a bit quite a big advantage

156
00:14:50,379 --> 00:14:59,019
so into sgx i think has the opportunity
to really help out in this regard we're

157
00:14:59,019 --> 00:15:05,259
going to talk a little bit about what is
she is and how it works now this talk is

158
00:15:05,259 --> 00:15:10,569
not so much about how it works as a lot
of really good papers and discussions

159
00:15:10,569 --> 00:15:13,089
out there although i'll cover a little
bit of here

160
00:15:13,089 --> 00:15:19,899
I really want to talk to you more today
about how you can start developing in

161
00:15:19,899 --> 00:15:27,970
working with sgx yourselves and putting
together some compelling applications in

162
00:15:27,970 --> 00:15:32,439
fact you may may even start a company or
start marketing some of your products

163
00:15:32,439 --> 00:15:38,410
because currently right now because it's
so new it's pretty green field pretty

164
00:15:38,410 --> 00:15:42,219
green feel out there and i'll talk a
little bit about some of the the the

165
00:15:42,220 --> 00:15:51,579
ideas that we've seen Cena kicked around
lately so with sgx its hardware and

166
00:15:51,579 --> 00:15:56,019
force protection of the memory the
application memory stack that's baked

167
00:15:56,019 --> 00:16:01,569
into this the processor it's implemented
in microcode and it's implemented by I

168
00:16:01,569 --> 00:16:09,160
think it's 17 new instructions in the
ia32 instruction set which again is very

169
00:16:09,160 --> 00:16:17,170
similar about to how they rolled out vtx
that also was implemented by roughly 17

170
00:16:17,170 --> 00:16:20,679
instructions and in the ia32
instructions that

171
00:16:21,220 --> 00:16:28,930
and as you can see it they even look
very similar to the vtx instructions

172
00:16:28,930 --> 00:16:34,239
where you have enters and exits they
have to they do have some debugging

173
00:16:34,240 --> 00:16:37,269
support which is really important

174
00:16:37,779 --> 00:16:46,509
back in 2005-2006 time frame i developed
from scratch a hypervisor based on the

175
00:16:46,509 --> 00:16:54,399
btx instruction sets and i was working
on the platforms before BTW ex-israeli

176
00:16:54,399 --> 00:16:58,990
released in $YEAR vtx finally came out
and I could play around with it

177
00:16:58,990 --> 00:17:04,720
there was no support for debug in that
architecture early on and so what I

178
00:17:04,720 --> 00:17:10,689
ended up having to do was program
directly to the graphics card and I was

179
00:17:10,689 --> 00:17:16,390
turning on individual pixels in the
upper left-hand corner of my screen to

180
00:17:16,390 --> 00:17:21,610
tell me what went wrong but with with
sgx they've made things a lot more--

181
00:17:21,609 --> 00:17:29,559
easy to deal with from the permit from
of the developer's perspective the one

182
00:17:29,559 --> 00:17:38,289
thing that that Intel's done is they
have taken as zero trust approach to

183
00:17:38,289 --> 00:17:42,220
development you can sort of look at and
it's been described in a lot of

184
00:17:42,220 --> 00:17:47,140
literature and a lot of talks that I've
seen lately as a reverse sandbox so

185
00:17:47,140 --> 00:17:54,220
instead of trying to protect your co try
to protect the system from your code by

186
00:17:54,220 --> 00:17:59,320
sandboxing it is the reverse of that
what they're doing is they're they're

187
00:17:59,320 --> 00:18:05,678
assuming that platform that your code is
running on has been compromised and that

188
00:18:05,679 --> 00:18:11,350
there's you know compromised by the
highest privilege code they don't they

189
00:18:11,350 --> 00:18:15,520
assume that there's a delicious
hypervisor they assume that the OS has

190
00:18:15,520 --> 00:18:16,900
been compromised

191
00:18:16,900 --> 00:18:26,289
they assume smm is is compromised and so
they've set up these enclaves that

192
00:18:26,289 --> 00:18:29,860
something what they call on collecting
on the application stack that protects

193
00:18:29,860 --> 00:18:31,399
the sgx code

194
00:18:31,399 --> 00:18:36,139
you write and protects the code and data
of your application as opposed to the

195
00:18:36,139 --> 00:18:39,139
other way around which I think that
interesting approach

196
00:18:40,190 --> 00:18:46,549
STX implements all three of the major
tenants of trusted computing base no

197
00:18:46,549 --> 00:18:51,499
measurement ceiling and Anna station and
in fact that you squint at sgx and just

198
00:18:51,499 --> 00:18:58,820
the right way it really does look like
GPM software-based tvm is it has all the

199
00:18:58,820 --> 00:19:09,168
functionalities of that without having
to rely on on TPM chip so this is a

200
00:19:09,169 --> 00:19:18,019
pretty good model I think we're diagram
of what sgx does and this came from this

201
00:19:18,019 --> 00:19:24,080
image came from internal documentation
we have you normal you know stack there

202
00:19:24,080 --> 00:19:29,960
we have your code the stack and and
operating system but wedged in there is

203
00:19:29,960 --> 00:19:35,899
this thing called the enclaves the sgx
on play and the way that's done is when

204
00:19:35,899 --> 00:19:43,639
you fire up your SPX application it
reserves a segment of memory of program

205
00:19:43,639 --> 00:19:53,718
and seals that off then it will load
your Enclave code and data into the the

206
00:19:53,719 --> 00:19:58,849
on play for the secure memory that it
has setup doesn't measurement on it has

207
00:19:58,849 --> 00:20:04,369
cryptographically signed hash compares
it and if everything's fine then it will

208
00:20:04,369 --> 00:20:10,070
launch the on play and go once the
enclaves up and running

209
00:20:10,070 --> 00:20:16,639
nothing can see inside the i play
nothing not debuggers not a pro not the

210
00:20:16,639 --> 00:20:20,959
system you cannot see what's going
inside going on inside that Enclave and

211
00:20:20,960 --> 00:20:27,529
that's the real power in the real
benefit of of this approach that Intel's

212
00:20:27,529 --> 00:20:30,529
taken with sgx yeah

213
00:20:32,190 --> 00:20:57,629
not sure I quite understood that
question but the question is it correct

214
00:20:57,629 --> 00:21:01,769
me if I'm wrong is when the OS is
setting up with memory or so you have

215
00:21:01,769 --> 00:21:04,470
this memory is requested

216
00:21:04,470 --> 00:21:19,620
how is that control from a promise right
so how does the OS manage that if you

217
00:21:19,620 --> 00:21:23,549
need to increase the memory how does the
house that handled and things like that

218
00:21:23,549 --> 00:21:28,320
so and that's a very good question and I
have a couple slides on that upcoming

219
00:21:28,320 --> 00:21:36,210
but basically the way it happens is
there are set sizes of memory that sgx

220
00:21:36,210 --> 00:21:38,700
will will reserve for you

221
00:21:38,700 --> 00:21:43,470
I think there's three different settings
and I have a screenshot about it 128 64

222
00:21:43,470 --> 00:21:46,320
and and maybe 32 not sure

223
00:21:46,320 --> 00:21:50,460
so it's like that so it's not a lot of
space but when you think about code and

224
00:21:50,460 --> 00:21:56,490
data that you're trying to protect you
can do a lot in 128 bytes right and you

225
00:21:56,490 --> 00:22:02,759
can have multiple sgx enclaves running
but once it's set up its the OS and this

226
00:22:02,759 --> 00:22:07,860
is where it gets a little bit tricky and
again I'll refer you to some talks that

227
00:22:07,860 --> 00:22:14,008
happened at black hat recently and the
recent IDF where they get more into how

228
00:22:14,009 --> 00:22:17,970
it works this talk is a little bit less
of how it works but how you can start

229
00:22:17,970 --> 00:22:25,559
programming in it but it it sets up the
memory it load play code and data

230
00:22:25,559 --> 00:22:31,168
measures it and then it seals it and
then once it's sealed and initialize and

231
00:22:31,169 --> 00:22:32,220
ready to go

232
00:22:32,220 --> 00:22:34,230
that's where it gets locked down

233
00:22:34,230 --> 00:22:45,660
and.and you can't access that memory
after that only sgx application can

234
00:22:45,660 --> 00:22:48,870
access that memory and i'll show you
have this you have to split it out

235
00:22:49,410 --> 00:22:57,870
I hope that answers your question so
once the Enclave is set up in seal the

236
00:22:57,870 --> 00:23:03,239
ankh laid they had it has its own entry
table has its own heap stack and has its

237
00:23:03,240 --> 00:23:08,580
own code and again the main point here
is it now is an opaque black box on the

238
00:23:08,580 --> 00:23:14,280
application stack which is very very
good thing and I'll show that here a

239
00:23:14,280 --> 00:23:23,668
little bit so once implemented in the
proper way as I said you can't debug it

240
00:23:23,669 --> 00:23:31,890
with external debuggers you can't you
can't disassemble and i'll show you a

241
00:23:31,890 --> 00:23:35,250
little bit but this assembly is really
hard this is where i was saying earlier

242
00:23:35,250 --> 00:23:42,210
that you will you'll still want to
implement code obfuscation code path you

243
00:23:42,210 --> 00:23:48,450
know dummy pass within your code to make
it even more difficult but sgx in and of

244
00:23:48,450 --> 00:23:51,690
itself makes reverse-engineering very
hard

245
00:23:51,690 --> 00:23:55,140
there have been some claims and I've
seen some claims even in a recent black

246
00:23:55,140 --> 00:24:01,350
hat talk where they say it's absolutely
impossible to reverse engineer and sgx

247
00:24:01,350 --> 00:24:06,449
on clay and I I don't find that to be
true although i haven't done a whole lot

248
00:24:06,450 --> 00:24:10,890
of work yet I believe that you can get
enough information that you can sort of

249
00:24:10,890 --> 00:24:16,530
see what's going on but but there's some
things that Intel's doing an upcoming

250
00:24:16,530 --> 00:24:20,250
version to release of SG accent are
going to take care of some of these

251
00:24:20,250 --> 00:24:23,250
problems and I'll talk a little bit
about that as well

252
00:24:26,750 --> 00:24:35,630
so I had given this talk i was asked to
come in and give this talk at CIA and

253
00:24:35,630 --> 00:24:41,840
NSA a modified version is talk talk i
gave up there wasn't as technical and so

254
00:24:41,840 --> 00:24:45,320
this slide was more for them because
believe it or not there are a lot of

255
00:24:45,320 --> 00:24:50,210
folks in the intelligence community not
so much of NSA CIA I hope there's nobody

256
00:24:50,210 --> 00:24:56,990
here from CIA but they're not that well
versed not all of them in assembly

257
00:24:56,990 --> 00:25:00,830
language programming they can certainly
look at assembly language dumps because

258
00:25:00,830 --> 00:25:04,250
we're working at the diner and all that
stuff all the time and in double burgers

259
00:25:04,250 --> 00:25:06,920
but actually you know right

260
00:25:06,920 --> 00:25:11,330
assembly language because they they kind
of panic a little bit as I think a lot

261
00:25:11,330 --> 00:25:16,250
of people do so I know what maybe some
of you are thinking it's certainly

262
00:25:16,250 --> 00:25:18,950
something that community things like oh
my God we're going to have to develop

263
00:25:18,950 --> 00:25:25,430
assembly language code we're going to
have to you know or down through Intel's

264
00:25:25,430 --> 00:25:31,820
developer manuals and any of you have
done that it's not unlike trying to read

265
00:25:31,820 --> 00:25:37,129
a wolf at the conclusion of a bourbon
con last night and they're very thick

266
00:25:37,130 --> 00:25:46,010
very dense and so it's really hard to to
to discern and but fortunately absolute

267
00:25:46,010 --> 00:25:48,440
that the opposite is true

268
00:25:48,440 --> 00:25:56,420
so when when intel released st acts they
released a software development kit and

269
00:25:56,420 --> 00:26:03,740
the platform software extensions as well
that really eases the process and then

270
00:26:03,740 --> 00:26:11,330
we make sense whereas btx really was a
kernel level type of implementation sgx

271
00:26:11,330 --> 00:26:15,590
is more an application ring three
application stack implementation so it

272
00:26:15,590 --> 00:26:21,649
really does make sense that they would
create a very nice development kit which

273
00:26:21,650 --> 00:26:24,380
is which they've done

274
00:26:24,380 --> 00:26:30,920
so oh and I should know for linux
developers out there as a June late June

275
00:26:30,920 --> 00:26:38,180
I think it was Intel's made linux
versions of the sdk and the the platform

276
00:26:38,180 --> 00:26:43,190
modules available i'm not personally
played with it but it is available and i

277
00:26:43,190 --> 00:26:46,190
think that's a huge step on their part

278
00:26:47,150 --> 00:26:56,180
so when you when you install the
software development kid and the the

279
00:26:56,180 --> 00:27:02,600
extensions for the OS lo and behold when
you fire up visual studio there at the

280
00:27:02,600 --> 00:27:07,730
very top of the list of templates you
have available to you is SGS on place

281
00:27:07,730 --> 00:27:11,930
and so it doesn't get much easier than
that and then when you create those

282
00:27:11,930 --> 00:27:15,950
projects just like you would any other
project it will pre-populate some of the

283
00:27:15,950 --> 00:27:21,590
header files for you and give you a
really good head start on just like

284
00:27:21,590 --> 00:27:29,030
writing your code so on the development
side you know normally we have the

285
00:27:29,030 --> 00:27:34,190
standard development model where you you
declare your your functions either in

286
00:27:34,190 --> 00:27:39,470
the file or as extern then you run your
main and you call those functions right

287
00:27:39,470 --> 00:27:44,900
so of course when those applications are
running on platform they're sort of wide

288
00:27:44,900 --> 00:27:49,640
open to to disassembly a reverse
engineering you can get a really good

289
00:27:49,640 --> 00:27:54,470
sense even if they're obviously gated on
what's happening and how it's happening

290
00:27:54,470 --> 00:28:01,010
and discern all that with when when
you're developing or designing in sgx

291
00:28:01,010 --> 00:28:02,150
application

292
00:28:02,150 --> 00:28:06,890
the idea is that you want to spend a
little bit of time thinking about what

293
00:28:06,890 --> 00:28:08,870
in my application

294
00:28:08,870 --> 00:28:14,389
do I really want to protect what code
and what day to do I want to protect and

295
00:28:14,390 --> 00:28:19,310
you decide we're going to put that in
the on play now as I mentioned earlier i

296
00:28:19,310 --> 00:28:24,440
think the largest enclave size that you
can reserve is a hundred twenty-eight

297
00:28:24,440 --> 00:28:28,310
and again although you can put a lot in
there you're going to want to run your

298
00:28:28,310 --> 00:28:33,260
entire application in an enclave
although I've seen guys do that

299
00:28:33,260 --> 00:28:39,140
it gets a little one wheeling and so the
recommendation is that you do some

300
00:28:39,140 --> 00:28:43,970
thought of front decide what is it in
this application do i really want to

301
00:28:43,970 --> 00:28:49,970
protect could be an encryption algorithm
you know could be housed certificates

302
00:28:49,970 --> 00:28:55,910
are handled could be your developing say
cocom system where you would want to

303
00:28:55,910 --> 00:29:00,350
protect again in that case it would be
the encryption algorithm and i'll talk

304
00:29:00,350 --> 00:29:03,919
about in a little bit there have been
some interesting projects where they

305
00:29:03,920 --> 00:29:10,280
written plugins to chrome and other
browsers as SDS application and hence

306
00:29:10,280 --> 00:29:17,570
they handle all the cert functions in
the on play in the rest of your code can

307
00:29:17,570 --> 00:29:23,330
be at you know just out there normal so
now it's demo time and see this is a

308
00:29:23,330 --> 00:29:28,370
really exciting part for you guys
because this is an opportunity for me to

309
00:29:28,370 --> 00:29:31,699
really sort of blame and crash and so
yeah

310
00:29:31,700 --> 00:29:35,780
yes some sensors that can be
entertaining so why don't we go ahead

311
00:29:35,780 --> 00:29:38,629
and get into this

312
00:29:38,630 --> 00:29:53,210
whoops so the first demo i wanted to
show you is a little about a little bit

313
00:29:53,210 --> 00:29:57,590
about the the applications that need to
zoom in on some of the spell

314
00:29:58,430 --> 00:30:04,070
yeah we doing about the lights in here

315
00:30:11,170 --> 00:30:40,120
you're one of your map there is that
better oh yeah no no I can't see much

316
00:30:40,120 --> 00:30:52,810
lines now a model that I don't care
about the camera singh yeah that's

317
00:30:52,810 --> 00:30:55,600
better thank you can you still see can
you see the screen a little bit better

318
00:30:55,600 --> 00:31:19,750
get my notes here and see what are you
the first thing I wanted to show you was

319
00:31:19,750 --> 00:31:42,850
need to back up here a second and show
you that I won't show you this is my

320
00:31:42,850 --> 00:31:48,340
mouse is sliding down LOL so exact the
STX applications actually broken up into

321
00:31:48,340 --> 00:31:53,800
two different parts you have the
application the straight-up application

322
00:31:53,800 --> 00:31:59,080
that's going to call your sgx on clay
and then you have your sgx Enclave and

323
00:31:59,080 --> 00:32:04,060
what i called up here is the actual
enclave code and so the Enclave

324
00:32:04,060 --> 00:32:14,800
essentially compiles to a dll you have
different with within the sgx

325
00:32:14,800 --> 00:32:20,020
template you have several different
compile methods you have a standard

326
00:32:20,020 --> 00:32:24,820
debug there's a pre Lee pre-release
version release and a simulation of the

327
00:32:24,820 --> 00:32:28,780
simulations interesting and i haven't
played with it but simulation will allow

328
00:32:28,780 --> 00:32:34,450
you to write in and play around with sgx
applications if you don't have a

329
00:32:34,450 --> 00:32:39,610
platform that supports hester yes it
will emulate it for you can make sure

330
00:32:39,610 --> 00:32:43,899
that your codes working ok but make no
mistake they're not going to be secure

331
00:32:43,900 --> 00:32:48,280
you you're still going to be susceptible
to you know memory forensics and reverse

332
00:32:48,280 --> 00:32:52,780
engineering but at least it gives you
something you can play around with until

333
00:32:52,780 --> 00:33:04,629
you can get a machine that supports sgx
needling again when you when you open up

334
00:33:04,630 --> 00:33:09,760
the project it pre populate a lot of
these precompiled headers for you and

335
00:33:09,760 --> 00:33:13,660
places them in there and then what you
need to worry about is actually writing

336
00:33:13,660 --> 00:33:19,330
your code now in this little quick and
dirty test application and i put

337
00:33:19,330 --> 00:33:26,409
together it's a it's basically an
extreme secret crypto function but at

338
00:33:26,410 --> 00:33:32,650
basically all it does is it reverses the
string and my my secret data here is the

339
00:33:32,650 --> 00:33:34,480
string much merde

340
00:33:34,480 --> 00:33:38,380
and that's important and remember that
because when i get into the demo we're

341
00:33:38,380 --> 00:33:42,220
doing memory forensics will want to look
for that want to look for that strength

342
00:33:42,220 --> 00:33:48,220
so in and of itself it's it should be
very familiar again you're just writing

343
00:33:48,220 --> 00:33:56,500
essentially a dll it does produce what's
called an EDL file and that's an enclave

344
00:33:56,500 --> 00:34:00,730
descriptor language and it builds up for
it actually doesn't build it for you

345
00:34:00,730 --> 00:34:04,780
what it does it creates this empty
structure and so would you what you need

346
00:34:04,780 --> 00:34:11,739
to do is in this structure this Enclave
instructor you you wanted to find your

347
00:34:11,739 --> 00:34:18,699
Rob you're on clay functions that you
want to allow so the trusted

348
00:34:19,210 --> 00:34:24,760
the trusted he calls are there around
here uh protected functions there are

349
00:34:24,760 --> 00:34:30,520
other really prototypes here and so in
this particular demo we only have one

350
00:34:30,520 --> 00:34:35,530
function that we're dealing with and
that's our extreme secrets crypto

351
00:34:35,530 --> 00:34:41,500
function and it has to go into the edl
file they also have a place here for

352
00:34:41,500 --> 00:34:46,300
untrusted no calls or outcalls and those
would be calls that you would make would

353
00:34:46,300 --> 00:34:52,869
need to make from within your on clay
back out into the untrusted world but

354
00:34:52,869 --> 00:34:57,520
honestly I can't think of any reason why
you want to do that i'm sure there is

355
00:34:57,520 --> 00:34:58,900
there must be a reason

356
00:34:58,900 --> 00:35:02,050
until when you put it in there if they
didn't think there was a reason but I

357
00:35:02,050 --> 00:35:06,400
can't think of any reason why you would
want to make untrusted calls from within

358
00:35:06,400 --> 00:35:25,599
the Enclave to the outside world that so
now let's look at the standard

359
00:35:25,599 --> 00:35:32,080
application that we're going to use to
call our on clay and this is the the

360
00:35:32,080 --> 00:35:39,279
second part of that and it's just in
this case just a test application now

361
00:35:39,280 --> 00:35:45,160
and again this is just a standard
application this is not really Ron clay

362
00:35:45,160 --> 00:35:50,049
but this is the application is going to
call your on clay the template sets up

363
00:35:50,050 --> 00:36:01,839
again some of these pre-configured
headers these pre-configured headers

364
00:36:01,839 --> 00:36:09,070
here you do have to populate this and
there's something some guides online to

365
00:36:09,070 --> 00:36:11,260
do that

366
00:36:11,260 --> 00:36:26,140
and here is within our function or enter
applications where we call that on play

367
00:36:26,140 --> 00:36:32,470
function right here there's a stream
secret and then after that's done it

368
00:36:32,470 --> 00:36:45,759
will destroy your run your file now when
you do have to do in your application as

369
00:36:45,760 --> 00:36:53,020
you have to and again this sgx
configuration is all part of the

370
00:36:53,020 --> 00:37:03,550
template structure you have to import
the Enclave and so you over here you

371
00:37:03,550 --> 00:37:21,400
find the Enclave that you want to import
double-click at and then check it and

372
00:37:21,400 --> 00:37:26,260
important and that's it so then you just
compile it normally like you normally

373
00:37:26,260 --> 00:37:36,340
would and then you can test your
application so let's try that

374
00:37:46,470 --> 00:38:13,379
and so we get these messages that i
programmed in there that the sgx

375
00:38:13,380 --> 00:38:23,460
enclaves created successfully the the
buffer before i called the sgx on clay

376
00:38:23,460 --> 00:38:27,420
was just great from outside the Enclave
that was included in the application

377
00:38:27,420 --> 00:38:34,349
test application then recalls into the
on clay and it takes my secret string

378
00:38:34,349 --> 00:38:49,170
mom's merde and reverses it and then
done and so then it destroys it now the

379
00:38:49,170 --> 00:38:53,640
purpose of that really wasn't to show
you how i can write you know really cool

380
00:38:53,640 --> 00:38:58,470
crypto stop is more disordered that's
the flow you can see the major point

381
00:38:58,470 --> 00:39:01,140
here is that its standard development

382
00:39:01,140 --> 00:39:06,868
you don't have to invest in a lot of
research and development it's already

383
00:39:06,869 --> 00:39:10,950
stuff that you're doing now if you're
developing a visual studio kind of

384
00:39:10,950 --> 00:39:15,810
application so the learning curve to get
sgx and start playing with it is

385
00:39:15,810 --> 00:39:17,130
extremely low

386
00:39:17,130 --> 00:39:23,040
it makes it very attractive and in fact
of some you are working with interns and

387
00:39:23,040 --> 00:39:27,480
it will probably pass the intern season
now but it's really conceivable that you

388
00:39:27,480 --> 00:39:32,640
did would be a nice intern project to
assign and have them start developing

389
00:39:32,640 --> 00:39:37,680
some interesting SGS applications for
you and there is there actually is some

390
00:39:37,680 --> 00:39:43,680
interest in the government in sgx and
I'll tell whether really humorous start

391
00:39:43,680 --> 00:39:49,049
story but it was kind of funny in a way
i'd become aware of sgx through some

392
00:39:49,050 --> 00:39:54,240
context of into open into a while back
as early as $MONTH 2012 and thought you

393
00:39:54,240 --> 00:39:56,368
know this is some pretty interesting
technology

394
00:39:56,369 --> 00:40:00,749
I think you know the government should
probably show some interested in this

395
00:40:00,749 --> 00:40:06,390
and so I began briefing them about it
and got them you know a little bit

396
00:40:06,390 --> 00:40:09,720
excited about it but they like
government being the government really

397
00:40:09,720 --> 00:40:16,680
they never really showed much interest
in terms of setting up a budget setting

398
00:40:16,680 --> 00:40:19,200
the program and going after it

399
00:40:19,200 --> 00:40:25,799
and essentially just sort of let it drop
it was kind of funny a colleague of mine

400
00:40:25,799 --> 00:40:31,769
just about six or seven months ago was
in a meeting with the customer and the

401
00:40:31,769 --> 00:40:35,640
customer after the meeting pulling
besides hey if you guys been following

402
00:40:35,640 --> 00:40:40,828
what's going on with this Intel SGX top
or like yeah the last two or three years

403
00:40:40,829 --> 00:40:45,809
we've been trying to get your attention
on it so so anyway there is some

404
00:40:45,809 --> 00:40:50,039
interest inside the government now and
in SG acts and so if you work for

405
00:40:50,039 --> 00:40:54,359
companies that support that community
you know maybe a good idea to start

406
00:40:54,359 --> 00:40:58,828
maybe prototype and stuff talking to
your CCR's and getting in front of them

407
00:40:58,829 --> 00:41:03,450
with some metrics not even if you're not
a current contractor because the entry

408
00:41:03,450 --> 00:41:09,569
into to develop this technology is so
low you can actually probably go in

409
00:41:09,569 --> 00:41:14,788
unsolicited and show them some things
and and good chance that there may be

410
00:41:14,789 --> 00:41:17,789
some interest in it so anyway just sort
of my tip to you on that

411
00:41:19,319 --> 00:41:25,799
see if i covered everything I wanted on
net demo

412
00:41:26,489 --> 00:41:33,630
yeah so sly

413
00:41:33,630 --> 00:41:40,739
so naturally once I've started you know
being able to get some sgx stuff

414
00:41:40,739 --> 00:41:48,450
compiled and running because the the
wreath and in into X really exists is

415
00:41:48,450 --> 00:41:55,499
protected memory volatile memory from
your co-workers sense of code in your

416
00:41:55,499 --> 00:42:00,959
sensitive data one other feature and i
forgot to mention earlier is that

417
00:42:00,960 --> 00:42:03,340
nothing leaves the processor

418
00:42:03,340 --> 00:42:10,420
that's in Iran play your protected stop
unencrypted it never leaves the

419
00:42:10,420 --> 00:42:14,770
processor unencrypted in and that's huge
and so I really wanted to test that

420
00:42:14,770 --> 00:42:23,470
theory out so naturally gravitated to
volatility ahead of us took Matt's

421
00:42:23,470 --> 00:42:31,450
course earlier this week on her in
memory coding and i was mentioning to

422
00:42:31,450 --> 00:42:35,020
him I had some difficulty finding some
of the legacy tools and so I ran across

423
00:42:35,020 --> 00:42:40,090
this magnet to free utility out there
that will do windows dumps for United so

424
00:42:40,090 --> 00:42:48,910
i use magnet and volatility and so what
I wanted to do is look in the memory

425
00:42:48,910 --> 00:42:54,490
dumps for you know my secret data and
that code specifically looking for moms

426
00:42:54,490 --> 00:43:01,120
mare and looking for my extreme secret
function call string secret function

427
00:43:01,120 --> 00:43:13,000
call so lo and behold even though i had
compiled my code at pre-release and the

428
00:43:13,000 --> 00:43:23,560
Intel documentation says the pre-release
profile in terms of debug symbols is the

429
00:43:23,560 --> 00:43:31,060
same as release i know i found that was
true but it doesn't the pre-release

430
00:43:31,060 --> 00:43:39,880
version . these bills does not protect
yet from you no strings being copied

431
00:43:39,880 --> 00:43:46,960
into memory and being acted on so I did
a little bit of digging on then it turns

432
00:43:46,960 --> 00:43:47,380
out

433
00:43:47,380 --> 00:43:55,690
intel has really call it weird licensing
tier structure for sgx naturally because

434
00:43:55,690 --> 00:44:02,830
it's a new technology is very protective
and so in able to compile release

435
00:44:02,830 --> 00:44:06,529
versions of your sgx enclave

436
00:44:06,530 --> 00:44:13,520
you have to have what's termed by them a
production license and so I went down

437
00:44:13,520 --> 00:44:21,800
that road and and from my work with
intel I with my own company i had an NDA

438
00:44:21,800 --> 00:44:28,640
in place with them already so step one
in getting your production license from

439
00:44:28,640 --> 00:44:35,000
Intel with this is you have to have an
active in da then you have to change you

440
00:44:35,000 --> 00:44:42,110
know certification files and then you
have to engage in a series of interviews

441
00:44:42,110 --> 00:44:47,510
with intel engineers and Intel business
development folks and they have all

442
00:44:47,510 --> 00:44:53,780
kinds of questions for you about well
what exactly are you trying to build

443
00:44:53,780 --> 00:44:57,860
what's the product that you're trying to
product market that you're going after

444
00:44:57,860 --> 00:45:06,980
do you have in place you know all the
controls for protecting certifications

445
00:45:06,980 --> 00:45:08,900
and all those sort of things

446
00:45:08,900 --> 00:45:14,870
well unfortunately I didn't have my
social engineering hat on when i went

447
00:45:14,870 --> 00:45:19,190
through that interview process and
basically told them they look I'm giving

448
00:45:19,190 --> 00:45:24,020
a presentation and upcoming hacker con
was probably a mistake and I wanted to

449
00:45:24,020 --> 00:45:31,640
demonstrate the effectiveness of sgx and
protecting sensitive code and data

450
00:45:32,660 --> 00:45:36,529
well they immediately turned down my
request and they said basically we don't

451
00:45:36,530 --> 00:45:40,790
give out production licenses for demo
purposes

452
00:45:42,020 --> 00:45:45,980
fair enough but i wasn't able to get a
license protection but they do have this

453
00:45:45,980 --> 00:45:53,480
intermediate licensing agreement that
gives you access to their remote at a

454
00:45:53,480 --> 00:45:59,300
station server sgx support this model
called remote app station where you can

455
00:45:59,300 --> 00:46:03,290
go and say to an external server is this

456
00:46:03,290 --> 00:46:11,570
sgx enclave valid and and will will
assist in the ceiling and the

457
00:46:11,570 --> 00:46:15,530
attestation process of the earlier on
development

458
00:46:15,530 --> 00:46:20,750
and so in that again requires an
interview and in a disservice a long

459
00:46:20,750 --> 00:46:21,500
process

460
00:46:21,500 --> 00:46:26,480
well two days before flying down here i
finally got what's called my spi

461
00:46:26,480 --> 00:46:31,820
unfortunately haven't had a chance yet
to do that but all is not lost

462
00:46:32,540 --> 00:46:38,180
interesting thing is when you install
the interests GX platform software kits

463
00:46:38,180 --> 00:46:46,220
or modules Intel loads onto your system
a couple of Intel enclaves themselves

464
00:46:47,180 --> 00:46:51,919
let's stop and think about that a minute
intel is loading installing enclaves

465
00:46:51,920 --> 00:46:59,150
valid downplays onto your system to help
with the process and then going back to

466
00:46:59,150 --> 00:47:04,010
what I've said is it's very difficult to
to reverse-engineer enclaves they're

467
00:47:04,010 --> 00:47:10,490
essentially black boxes so you can't
tell at least I can't tell yet

468
00:47:11,030 --> 00:47:18,530
what exactly is that enclave doing right
you don't know and so he sort of see the

469
00:47:18,530 --> 00:47:24,470
problem or the advantage of using sgx to
protect your tools because it really is

470
00:47:24,470 --> 00:47:28,430
difficult to find out what's actually
going on so if you were a malicious guy

471
00:47:28,430 --> 00:47:33,440
so you're developing malicious or even
in touch and go to that matter

472
00:47:33,440 --> 00:47:40,010
you might want to include in your
Enclave code some cover applications say

473
00:47:40,010 --> 00:47:41,210
you know

474
00:47:41,210 --> 00:47:48,890
pokemon management system or whatever
and but along with that you have your

475
00:47:48,890 --> 00:47:52,580
encryption routines for exfiltrating
data that you're collecting on the

476
00:47:52,580 --> 00:47:58,160
platform and so again going back to this
idea and being paranoid as most of us

477
00:47:58,160 --> 00:48:04,490
are I don't like the idea that Intel is
loaded and is running on plays like full

478
00:48:04,490 --> 00:48:10,100
blown up Enclave on my machine so in the
next demo going to show you what that

479
00:48:10,100 --> 00:48:15,440
looks like from a forensic perspective
but as you can see from this slide when

480
00:48:15,440 --> 00:48:16,020
I

481
00:48:16,020 --> 00:48:22,290
I looked at my volatility doms I found
my my secret data string Monica Marron

482
00:48:22,290 --> 00:48:26,580
right in there were three references to
it now certainly was in free memory but

483
00:48:26,580 --> 00:48:33,690
it was in there and didn't like that at
all i did find some of the code that i

484
00:48:33,690 --> 00:48:37,920
didn't want to see in there running but
this this code actually is from the on

485
00:48:37,920 --> 00:48:47,610
the the application the non clave
application part let me do that real

486
00:48:47,610 --> 00:48:51,120
quick i'm gonna running behind time here

487
00:49:00,000 --> 00:49:09,360
yeah let me show you this first going to
show you what it looks like trying to

488
00:49:09,360 --> 00:49:22,440
debug an enclave outside of the the
development environment they do provide

489
00:49:22,440 --> 00:49:23,460
it

490
00:49:23,460 --> 00:49:27,990
Intel's the development kit does provide
debugging facilities and that's the only

491
00:49:27,990 --> 00:49:40,950
place you can debug on claims so let's
set a breakpoint refer to my notes

492
00:49:40,950 --> 00:49:44,339
nationwide on correctly

493
00:49:53,070 --> 00:50:22,740
we're going to do is set a breakpoint on
the my extreme secret crypto function

494
00:50:22,740 --> 00:51:17,399
and give us weird text message or can't
find the symbols but that's okay

495
00:51:18,720 --> 00:51:30,330
and so here we hit our rock in a break .
so it disassembled i can start to see

496
00:51:30,330 --> 00:51:34,920
some of the disassembly here but again
this is the application not the the

497
00:51:34,920 --> 00:51:46,200
Enclave code when I really wanted to
show you in the Enclave code for the

498
00:51:46,200 --> 00:51:54,419
application itself you can see that the
on clay failed to launch and so in a way

499
00:51:54,420 --> 00:51:57,530
is protecting itself that way

500
00:51:57,530 --> 00:52:06,320
because it won't allow you to to to
launch an enclave outside of the debug

501
00:52:06,320 --> 00:52:11,720
facilities and if it's not valid can't
validate that the the sgx enclave is

502
00:52:11,720 --> 00:52:19,730
real and measured and tested to it just
will fail launch if you have an

503
00:52:19,730 --> 00:52:22,400
honest-to-god one and it's all set up
and going

504
00:52:22,400 --> 00:52:29,600
what happens then is the Enclave itself
becomes one with respect to the debug

505
00:52:29,600 --> 00:52:36,770
debugger one executed piece of line of
code you can step through and you can

506
00:52:36,770 --> 00:53:08,420
see what it was doing still really get
in debugger so when I don't want to i

507
00:53:08,420 --> 00:53:11,780
want to show you is this

508
00:53:11,780 --> 00:53:31,430
pse upside dll this is the Intel's dll
enclave that is valid so you can see is

509
00:53:31,430 --> 00:53:38,299
can you see the screen where wash your
lens and blow that up a little bit so

510
00:53:38,300 --> 00:53:40,640
you can see

511
00:53:40,640 --> 00:53:43,879
brings their symbols are definitely not
there

512
00:53:43,880 --> 00:53:53,869
see all these sub things here if you
look at strings they're all really just

513
00:53:53,869 --> 00:53:58,789
kind of gibberish there's only two
strings in there that that make any

514
00:53:58,789 --> 00:54:08,569
sense and those are the exported
function calls these to the Enclave

515
00:54:08,569 --> 00:54:13,970
entry and this something called GP keep
use which just by its own names an

516
00:54:13,970 --> 00:54:15,319
interesting name

517
00:54:15,319 --> 00:54:21,558
let's take a look at the contract home
you can see it's actually fairly

518
00:54:21,559 --> 00:54:25,579
reasonable i think you could probably
disassemble this like understand this

519
00:54:25,579 --> 00:54:33,529
pretty well so you know the claims that
others are making that you can't it just

520
00:54:33,529 --> 00:54:38,359
not reverse engineering engineering just
based on what I'm seeing here I think

521
00:54:38,359 --> 00:54:42,680
it's possible to reverse engineer it may
be difficult but I don't think it's

522
00:54:42,680 --> 00:54:43,819
impossible

523
00:54:43,819 --> 00:54:52,009
and of course they're absolutely no no
import let's take a look at this other

524
00:54:52,009 --> 00:54:57,109
one here this G he this it looks a
little more difficult than the entry

525
00:54:57,109 --> 00:55:04,279
point you can see there's a lot of
undeclared parameters there are

526
00:55:04,279 --> 00:55:09,980
uninitialized parameters it really it's
kind of a mass in terms of reverse

527
00:55:09,980 --> 00:55:16,190
engineering it you can you sort of you
can use some of these jumps or X Rapids

528
00:55:16,190 --> 00:55:20,029
to go through and try and pasted
together what it's doing but it makes it

529
00:55:20,029 --> 00:55:24,200
very difficult and again going back if
you're putting if you continue to put

530
00:55:24,200 --> 00:55:30,828
obfuscation in there some fake code
paths it will make it even make it very

531
00:55:30,829 --> 00:55:33,829
difficult for your adversaries

532
00:55:36,090 --> 00:55:47,220
going to finish up here real quickly got
to get on to the next speaker so STX

533
00:55:47,220 --> 00:55:48,540
availability

534
00:55:48,540 --> 00:55:53,940
there are a tremendous amount of
processors available today that support

535
00:55:53,940 --> 00:56:02,160
SG x and and this is look at the list
and this list is current as a 22 months

536
00:56:02,160 --> 00:56:07,560
ago so Intel does is really weird thing
about their sk use and how they named

537
00:56:07,560 --> 00:56:14,009
their products for some reason the sgx
chips they all have the same esky k you

538
00:56:14,010 --> 00:56:20,610
number on them but there's a thing
called post-conversion a spec and that's

539
00:56:20,610 --> 00:56:27,750
what you want to look for you want to
look for the are in the colon second

540
00:56:27,750 --> 00:56:32,970
make sure i'm telling you the right
thing it's e to the r the hell LOL you

541
00:56:32,970 --> 00:56:41,069
want to look or the El code in the this
l1 l2 l3 you want to look for that if

542
00:56:41,070 --> 00:56:43,800
it's not if sgx is not supported

543
00:56:43,800 --> 00:56:48,630
there's an are there when I went to
microcenter the other day to look at

544
00:56:48,630 --> 00:56:54,180
them every one of them of this new
skylight processor was of the dl variety

545
00:56:54,180 --> 00:57:00,660
so all of them supported sgx there are
some systems out there that you can buy

546
00:57:00,660 --> 00:57:04,140
today that are already set up ready to
go

547
00:57:04,140 --> 00:57:08,879
bio supports it this inspiron laptop i
have is one of them cost me less than

548
00:57:08,880 --> 00:57:14,580
500 bucks so that there are available
when you start playing around with it so

549
00:57:14,580 --> 00:57:20,610
when you look at the bios you can and
sorry about the slide but very exciting

550
00:57:20,610 --> 00:57:23,850
moment when you're looking to buy us and
find out the whole while sdx is

551
00:57:23,850 --> 00:57:26,670
absolutely supported here

552
00:57:26,670 --> 00:57:33,210
the key point here is that s GX is not
implemented in bios by default and

553
00:57:33,210 --> 00:57:36,210
that's a problem if you're running
offensive operations

554
00:57:37,290 --> 00:57:42,870
because you know if your targets not
using sgx it's difficult if they haven't

555
00:57:42,870 --> 00:57:48,720
implemented it but i'll refer you back
to vtx when intel out rolled out vtx

556
00:57:48,720 --> 00:57:53,459
they didn't have it set as default but
now it is so hopefully in the future

557
00:57:53,460 --> 00:57:57,270
it'll be set by default and it's like
Katie bar the door

558
00:57:58,050 --> 00:58:03,960
here's what i was talking about where
you can set the sgx memory size 32 64

559
00:58:03,960 --> 00:58:07,830
and 128 and again you can do a lot of
malicious things are interesting things

560
00:58:07,830 --> 00:58:15,660
and 228 white megabytes so some
interesting sdx projects that are going

561
00:58:15,660 --> 00:58:16,890
on right now

562
00:58:16,890 --> 00:58:24,180
bromium at last month's IDF presented a
talk on their Rob extensions to the

563
00:58:24,180 --> 00:58:30,540
google browser and there are securing
their users certificates using a browser

564
00:58:30,540 --> 00:58:36,509
plug-in microsoft is going after sgx in
a big way but they're focuses on

565
00:58:36,510 --> 00:58:40,860
securing cloud instances personally I
think that's where the action is going

566
00:58:40,860 --> 00:58:45,540
to be my my next step in research is
actually going to be looking at clouds

567
00:58:45,540 --> 00:58:50,370
securing cloud instances and again going
back to this concept of reverse sandbox

568
00:58:50,370 --> 00:58:53,370
you don't know what's going on out there
in a cloud

569
00:58:53,370 --> 00:58:57,240
you don't know what your cloud service
riders are doing in terms of the date of

570
00:58:57,240 --> 00:59:03,180
the insider threat there and SG actually
go a long way and and alleviating

571
00:59:03,180 --> 00:59:06,870
concerns and we find that one of the
biggest concerns and companies moving

572
00:59:06,870 --> 00:59:11,490
stuff to the cloud is that insider
threat hit the the cloud service

573
00:59:11,490 --> 00:59:17,250
provider sgx eliminates that threat
completely and just think about the

574
00:59:17,250 --> 00:59:21,120
market there for like hedge funds
managers insurance companies and all

575
00:59:21,120 --> 00:59:27,540
that so cloud i think is where it's
gonna be again to get started with sgx

576
00:59:27,540 --> 00:59:32,160
very simple they've sort of really
really made it easy for you to do it you

577
00:59:32,160 --> 00:59:35,819
just need a skylake processor and of
course a motherboard that supports in

578
00:59:35,820 --> 00:59:37,320
the bios that supports it

579
00:59:37,320 --> 00:59:44,670
you need the sgx development kit from
Intel which is free there are platform

580
00:59:44,670 --> 00:59:48,930
extensions and then often you're off to
the races

581
00:59:49,980 --> 00:59:53,460
a little bit about future where I see
the future going

582
00:59:53,460 --> 01:00:00,210
sgx version 2 is coming out probably a
little bit later this year and it does

583
01:00:00,210 --> 01:00:04,290
fix a couple things that currently
aren't supported and sgx dynamic memory

584
01:00:04,290 --> 01:00:08,009
allocation and protection so it goes to
your question a little bit i think

585
01:00:08,010 --> 01:00:14,490
exception handling right now sgx doesn't
report exception handling general

586
01:00:14,490 --> 01:00:18,779
protection falls back to the on play
they need to do that basket being fixed

587
01:00:18,780 --> 01:00:23,520
this next one was less concerned about
the rtt the the timestamp stop

588
01:00:24,810 --> 01:00:29,490
I don't get why that's a big issue and
thread-local storage they're fixing that

589
01:00:29,490 --> 01:00:33,930
there really isn't any reason why
anybody in this room shouldn't we

590
01:00:33,930 --> 01:00:38,490
couldn't start playing around developing
sgx applications and I really do

591
01:00:38,490 --> 01:00:42,959
encourage you to do that again tools
compromises and electrical property

592
01:00:42,960 --> 01:00:47,430
theft is a big deal and I think it's in
common us to do everything we can to

593
01:00:47,430 --> 01:00:55,109
support that and I think sgx is a really
low threshold barrier in doing that and

594
01:00:55,109 --> 01:00:59,970
what encouraging would encourage all of
you to consider doing it getting out

595
01:00:59,970 --> 01:01:04,830
there and doing it i would say i'd take
some questions but I'm already over time

596
01:01:04,830 --> 01:01:08,910
if we can do it off why the next speaker
and he needs to get on so well behalf of

597
01:01:08,910 --> 01:01:12,660
hang out here and you can answer your
questions so again thank you so much for

598
01:01:12,660 --> 01:01:16,440
coming to such an early Sunday morning
presentation and i hope you found some

599
01:01:16,440 --> 01:01:19,770
value in

600
01:01:19,770 --> 01:01:20,280
yeah

