1
00:00:00,000 --> 00:00:15,750
injury

2
00:00:15,750 --> 00:00:33,000
no yeah I'm not friends anymore you know
you could not me but take something from

3
00:00:33,000 --> 00:00:42,510
the audience is this will be a prize if
anyone outside answer some questions i

4
00:00:42,510 --> 00:00:45,510
think is really hot

5
00:00:46,379 --> 00:00:53,399
good at good alright so this is security
automation in your continuous

6
00:00:53,399 --> 00:00:56,940
integration pipeline if you like buzz
words you might like this talk now

7
00:00:57,480 --> 00:01:05,729
so whom I I'm Jimmy bird i work at
Bayern defense systems on the lead

8
00:01:05,729 --> 00:01:10,950
developer over there and be do a lot
development so don't really see too many

9
00:01:10,950 --> 00:01:14,760
security talks that are focused on
development and so this is one of those

10
00:01:14,760 --> 00:01:17,909
and we use some of these practices at
work

11
00:01:17,909 --> 00:01:22,439
we don't use all the tools because you
know we don't have always always always

12
00:01:22,439 --> 00:01:25,199
encourages but when we get through some
of it

13
00:01:25,200 --> 00:01:29,909
um what happened at this thing

14
00:01:30,570 --> 00:01:42,449
what's your resolution I'm not plugged
in but i do have it was still moving my

15
00:01:42,450 --> 00:01:45,180
mouse around

16
00:01:45,180 --> 00:01:50,460
ok so so what are you talking about
today we're talking about continuous

17
00:01:50,460 --> 00:01:55,679
integration and continuous integration
is this idea that you want to be able to

18
00:01:55,680 --> 00:02:00,930
take your code and put it somewhere else
in a wet and say I want to compile my

19
00:02:00,930 --> 00:02:07,950
code and be able to show that it can
actually work on another machine and so

20
00:02:07,950 --> 00:02:10,890
Martin Fowler is a pretty good
description of continuous integration

21
00:02:10,889 --> 00:02:12,649
it's

22
00:02:12,650 --> 00:02:21,379
this thing really just not like my know
the kids cable lectures below locked

23
00:02:21,379 --> 00:02:23,209
together it makes more sense

24
00:02:23,209 --> 00:02:28,760
so yeah basically a skirt so each
integration is a basically you want to

25
00:02:28,760 --> 00:02:32,209
verify that your code can actually work
in a way that so other teammates can say

26
00:02:32,209 --> 00:02:37,730
hey I checked in this code it didn't
break and the princess work on my

27
00:02:37,730 --> 00:02:41,569
machine how many developers like this
sort of machine closing that bug

28
00:02:41,569 --> 00:02:44,659
no it doesn't i can prove it

29
00:02:45,200 --> 00:02:50,179
so we're trying to avoid this kind of
thing because also merchant code ends up

30
00:02:50,180 --> 00:02:54,500
being like this sucks it's tedious it's
hard and you know making a lot of

31
00:02:54,500 --> 00:02:58,250
mistakes and so you won't actually have
a place where you can fix your problems

32
00:02:58,250 --> 00:03:03,500
and show that it's actually verified
that's actually fixing problems and so

33
00:03:03,500 --> 00:03:07,250
the general gist of a continuous
integration is you want to push ups code

34
00:03:07,250 --> 00:03:11,120
if you're using a statically compiled
language respect the type language you

35
00:03:11,120 --> 00:03:14,959
want to compile it run some tests
against a lot of frameworks use

36
00:03:14,959 --> 00:03:18,199
automated test frameworks if you're
using Ruby approved private car spec or

37
00:03:18,199 --> 00:03:22,519
cucumber or some of the frameworks like
that or he's an . now you're probably

38
00:03:22,519 --> 00:03:26,510
using and unit or X in it and then you
can want to just get a report let's

39
00:03:26,510 --> 00:03:30,769
simply end up with something that kinda
looks like this it's just a we went out

40
00:03:30,769 --> 00:03:34,970
grabbed the whole bunch no packages
because no takes freaking forever and go

41
00:03:34,970 --> 00:03:39,019
ahead and compile those into the list
and run some reports on like scanning

42
00:03:39,019 --> 00:03:44,419
code see if there's any vulnerabilities
in our code and so some of the ti to or

43
00:03:44,419 --> 00:03:48,949
schedules that you end up using his
prices like teamcity EG Jenkins get lab

44
00:03:48,949 --> 00:03:53,389
Travis around here these are all just
kind of the same same thing different

45
00:03:53,389 --> 00:03:56,209
skins different companies

46
00:03:56,209 --> 00:04:02,389
it's all pretty much the same because
general when we get to software testing

47
00:04:02,389 --> 00:04:06,889
it's not easy it's not we've kind of
been having we're struggling this

48
00:04:06,889 --> 00:04:10,849
development for a long time and we're
trying to get better at it everyday but

49
00:04:10,849 --> 00:04:15,768
we're still struggling and you know we
can write normal tests and this is

50
00:04:15,769 --> 00:04:18,769
something we've kind of been doing for a
little bit like there's a this testing

51
00:04:18,769 --> 00:04:22,760
hierarchy basically what you want to be
able to do is write automated tests to

52
00:04:22,760 --> 00:04:25,639
say prove that your ballot or prove that
your code is

53
00:04:25,639 --> 00:04:30,289
actually doing what it should and in
this talk probably prove it shouldn't be

54
00:04:30,289 --> 00:04:34,219
doing other things and so some of them
are pretty basic you have like you know

55
00:04:34,219 --> 00:04:38,120
test yet functional tests acceptance as
these are kind of more like you I trivia

56
00:04:38,120 --> 00:04:43,669
contests and so it kind of goes up the
scale and so the problem is like I

57
00:04:43,669 --> 00:04:47,299
understand why we're not running
security-based alright this is it's not

58
00:04:47,300 --> 00:04:50,360
it may not be a functional feature but
it's definitely something we need to do

59
00:04:51,050 --> 00:04:55,219
it's not something we're doing it all I
do love this little gift look I built

60
00:04:55,219 --> 00:04:57,409
this cage he can't escape

61
00:04:57,409 --> 00:05:04,639
mhm this is also don't write your own
crypto because this is kind of the same

62
00:05:04,639 --> 00:05:08,210
thing you're just like why are you
writing your own crypto romantic couple

63
00:05:08,210 --> 00:05:13,430
nope no because developers we like to do
weird things I don't know why we want to

64
00:05:13,430 --> 00:05:14,689
do something like this

65
00:05:14,689 --> 00:05:19,339
why would we commit the password to the
database in source control on github

66
00:05:19,339 --> 00:05:24,229
should actually take a look at that one
time do a quick Google search for like

67
00:05:24,229 --> 00:05:28,400
site github a new connection string just
look how many passwords are out or just

68
00:05:28,400 --> 00:05:32,779
look for hard-coded password and get up
crazy developers do this stuff all the

69
00:05:32,779 --> 00:05:38,569
time or wind up having no Soren
plaintext passwords in our code how many

70
00:05:38,569 --> 00:05:40,580
you know just get what you just got rich
again

71
00:05:40,580 --> 00:05:45,139
yahoo like this week happens every week
worry there's a new password breach

72
00:05:45,139 --> 00:05:48,259
people are using terrible methods of
storing passwords

73
00:05:48,259 --> 00:05:51,529
why are we running testing hey I can
prove that we're not storing passwords a

74
00:05:51,529 --> 00:05:54,500
terrible boy does

75
00:05:54,500 --> 00:05:58,639
additionally sequel injection still
there why this things have been solved

76
00:05:58,639 --> 00:05:59,719
decade ago

77
00:05:59,719 --> 00:06:03,560
we're still having this issue how are
people getting their passwords takeaway

78
00:06:03,560 --> 00:06:08,330
probably sequel injection in most cases
and so we can write tests to kind of do

79
00:06:08,330 --> 00:06:13,188
this so wild fire wine politics test and
you know it'sit's something when you

80
00:06:13,189 --> 00:06:16,610
start doing as an industry

81
00:06:16,610 --> 00:06:22,129
so this slide right here is about the
rugged manifest it's basically some

82
00:06:22,129 --> 00:06:27,949
people already started down this path we
need to write code that is a rigid it's

83
00:06:27,949 --> 00:06:32,569
not something that's going to be there
can't be easily attacked and I can prove

84
00:06:32,569 --> 00:06:34,069
it and I can validate it

85
00:06:34,069 --> 00:06:40,490
so really the 1i want to read off the
slide here is I recognized my code can

86
00:06:40,490 --> 00:06:44,330
be attacked by a talented persistent
ever series you threaten our physical

87
00:06:44,330 --> 00:06:49,460
economic and national security because
it's happening we see it everyday uses

88
00:06:49,460 --> 00:06:53,779
shown us so we need to build a
approaches this problem that we're

89
00:06:53,779 --> 00:06:59,360
having and start using tools that help
us fix these issues and so there's a

90
00:06:59,360 --> 00:07:04,099
no-loss project called the wasp glue
recently just changed his name from

91
00:07:04,099 --> 00:07:07,550
pipeline and so some of the resources
that I'm gonna have it later in the

92
00:07:07,550 --> 00:07:11,840
slides is going to be about pipeline and
so they just change your name last week

93
00:07:11,840 --> 00:07:15,919
so they have some of the stuff some of
the documentation is updated one but

94
00:07:15,919 --> 00:07:20,568
this is a tool set that allows you to
glue a bunch of different security tools

95
00:07:20,569 --> 00:07:26,810
that help you automate the testing your
code in a secure one secure manner and

96
00:07:26,810 --> 00:07:33,889
give you a good report out the end and
so we have the rename it and so some of

97
00:07:33,889 --> 00:07:38,599
them into these are some of the
maintainer 'he's that Conda natural

98
00:07:38,599 --> 00:07:42,800
stone Erin Weaver they're all really
good people and they have some other

99
00:07:42,800 --> 00:07:48,500
talk so I'm going to recommend at the
end so it's for simple concepts really

100
00:07:48,500 --> 00:07:55,759
its you have this idea of a melter a
task a filter and a report and so the

101
00:07:55,759 --> 00:08:01,279
idea about mowcher is just how do you
get this into this pipeline or glue now

102
00:08:01,279 --> 00:08:05,479
it's kind of weird actually like the
name pipeline before but hey i want to

103
00:08:05,479 --> 00:08:07,969
be able to take a doctor may want to
look on the file system i'm going to

104
00:08:07,969 --> 00:08:12,770
give it to get help repo and you can
write all these kind of things show that

105
00:08:12,770 --> 00:08:17,150
the end and so there's something called
tasks and tasks as the meatiest this is

106
00:08:17,150 --> 00:08:21,650
where it takes a bunch of these tools
that you can use the scan your code you

107
00:08:21,650 --> 00:08:25,698
can verify that it actually doesn't have
any single injection vulnerabilities or

108
00:08:25,699 --> 00:08:29,740
other kind of tools like this and just
put them in one like nice package

109
00:08:29,740 --> 00:08:34,180
and so that as you can see there's a lot
of like Ruby and JavaScript mainly

110
00:08:34,179 --> 00:08:36,819
because this project is written in Ruby
and there's a lot of JavaScript that's

111
00:08:36,820 --> 00:08:40,539
on the world it's really easy for those
kind of things to these scanners but

112
00:08:40,539 --> 00:08:43,779
there are some java ones i've included
in some dotnet ones that try to shy away

113
00:08:43,779 --> 00:08:47,740
from being all proprietary stuff because
you don't have to pay for it but you

114
00:08:47,740 --> 00:08:52,060
know if we're doing all kinds of static
analysis tools or without someones gonna

115
00:08:52,060 --> 00:08:59,140
have to pay for a few of the tools
actually get in here so also filters

116
00:08:59,140 --> 00:09:02,319
basically filters are a way of just
saying re I've seen this vulnerability

117
00:09:02,320 --> 00:09:07,750
for it's a false positive i know it is
don't show me and then what you can

118
00:09:07,750 --> 00:09:11,620
actually do is take this out and get
into report and so you can get in csb

119
00:09:11,620 --> 00:09:16,029
JSON or just a text file and you can
also important to something like Jagger

120
00:09:16,029 --> 00:09:18,880
or whatever task management tools that
you're actually using the track your

121
00:09:18,880 --> 00:09:25,120
bugs so what you want to apply to do to
get started you can either do two things

122
00:09:25,120 --> 00:09:29,320
you can use a ruby to install the jump
or you can use docker and just pull it

123
00:09:29,320 --> 00:09:32,170
down and then you can just run inside a
doctor instance and that's what

124
00:09:32,170 --> 00:09:37,870
initiated i'm going to show us how to do
with dr. so come over here to already

125
00:09:37,870 --> 00:09:45,459
kind of open it up and docker so we can
see type and see that we have a whole

126
00:09:45,459 --> 00:09:50,439
bunch of stuff in this and this is the
lot there's a lot you can do with this

127
00:09:50,440 --> 00:09:54,010
tool unfortunately are so many flags and
configurations can set and I'm kind of

128
00:09:54,010 --> 00:09:56,980
just gonna go down like here's the happy
path here is to get the best bang for

129
00:09:56,980 --> 00:09:58,540
your buck

130
00:09:58,540 --> 00:10:03,550
so what you like he's like the hello
world example and so what we're going to

131
00:10:03,550 --> 00:10:07,930
do here is we're going to run glue and
we're going to pass it on the command to

132
00:10:07,930 --> 00:10:12,969
dashti we're also going to give it is
lint and jas require requirejs what this

133
00:10:12,970 --> 00:10:16,720
is going to do is take that get help
repel note if you're not familiar with

134
00:10:16,720 --> 00:10:22,360
any of the go projects are lost their
vault ourselves vulnerable projects so

135
00:10:22,360 --> 00:10:26,290
you can actually learn how to secure
your code so we're going to do is we're

136
00:10:26,290 --> 00:10:31,089
just going to pull this down and run
these two tools and so take a little bit

137
00:10:31,089 --> 00:10:35,800
time so i'll just talk about the tools
so he has lent is really just a printing

138
00:10:35,800 --> 00:10:39,699
tool it basically just allows you to say
hey you're writing really bad javascript

139
00:10:39,699 --> 00:10:41,279
don't do this

140
00:10:41,279 --> 00:10:45,959
retire Jas is actually something that
looks at your node package dependencies

141
00:10:45,959 --> 00:10:50,099
figures out there's any vulnerabilities
and says hey we know this has a known

142
00:10:50,100 --> 00:10:55,019
CBE should probably update and then you
can kind of know determine like is a

143
00:10:55,019 --> 00:11:01,079
severe or not kind of thing but least
you get the actual log value out of that

144
00:11:01,079 --> 00:11:07,620
so see it's it's giving us some findings
can look right here so these are just I

145
00:11:07,620 --> 00:11:11,999
just put them out of texts like default
text but we could get give it a CSV so

146
00:11:11,999 --> 00:11:14,459
basically what's happening here just
saying hey these kind of things that

147
00:11:14,459 --> 00:11:18,660
you're doing your project or kind of
unsafe you look specifically that's

148
00:11:18,660 --> 00:11:22,319
looking like it's not all the code
because it's going to jQuery jQuery

149
00:11:22,319 --> 00:11:26,160
actions and problems trusting the
letters are not really like super

150
00:11:26,160 --> 00:11:29,759
reliable there Scott okay you're
probably having a bad coding practice

151
00:11:29,759 --> 00:11:33,809
you probably don't want to do it but
it's a kind of more of a coding style in

152
00:11:33,809 --> 00:11:37,439
some respects but it does actually look
inside hey why do you have something

153
00:11:37,439 --> 00:11:41,219
called password in your hard coating of
value shouldn't be doing that so it does

154
00:11:41,220 --> 00:11:47,250
give you some of those kind of benefits
as well so here's another example of its

155
00:11:47,250 --> 00:11:51,959
like retired or up to retire can't just
came back and said hey here's a whole

156
00:11:51,959 --> 00:11:56,849
bunch code that's got a problem when
your dependencies uglify jas it's one of

157
00:11:56,850 --> 00:12:01,800
your men fires has a vulnerability it
surprising about update so this gives

158
00:12:01,800 --> 00:12:04,769
you a kind of life support and so what
you can do with these kind of reports

159
00:12:04,769 --> 00:12:08,459
create a bug report give yourself and
give your developers or have your

160
00:12:08,459 --> 00:12:12,209
development team fix this issue now you
can actually go ahead and say hey now I

161
00:12:12,209 --> 00:12:16,589
wanted to pub get rid of this
vulnerability and know that i'm not

162
00:12:16,589 --> 00:12:21,059
going to have this issue and so one
thing I do want to really touch on

163
00:12:21,059 --> 00:12:25,230
before getting near the end here is just
tasks there's two different kind of like

164
00:12:25,230 --> 00:12:30,779
categorizations tasks and you can either
use the tool specifically or you can use

165
00:12:30,779 --> 00:12:36,269
something called labels and so tasks are
really just like the tools that you're

166
00:12:36,269 --> 00:12:40,499
going to be using so if you want to look
at all the different tasks and tools we

167
00:12:40,499 --> 00:12:47,040
can actually pull the code and so
there's a giant list of tasks right here

168
00:12:47,040 --> 00:12:53,099
and so you can see all the bases its
under lib glue and then there's the four

169
00:12:53,100 --> 00:12:53,699
things that

170
00:12:53,699 --> 00:12:56,910
about the melters the reporters filters
in the tasks this is where you can

171
00:12:56,910 --> 00:12:59,969
actually get the giant list of all the
tasks that supports and this this

172
00:12:59,970 --> 00:13:05,189
changes frequently so some of these
things may not be here anymore or they

173
00:13:05,189 --> 00:13:11,339
may be new things so because they
changed the code so we can look at is

174
00:13:11,339 --> 00:13:14,609
actually say hey what is this tool and
you can actually give the tool a name

175
00:13:14,609 --> 00:13:18,059
and you can also give it a label which
is kind of like well this is a

176
00:13:18,059 --> 00:13:23,639
JavaScript and it's also code so that
you can end up doing is going ahead and

177
00:13:23,639 --> 00:13:29,339
set of running like a tools that could
actually go ahead and run a label so you

178
00:13:29,339 --> 00:13:37,949
know I want to run everything that's
related to JavaScript on this will go

179
00:13:37,949 --> 00:13:41,399
and run all the different tools and has
for JavaScript now this is going to take

180
00:13:41,399 --> 00:13:47,129
way too long and we're going to show the
results so what you can end up doing is

181
00:13:47,129 --> 00:13:51,029
looking at all the different tools and
they kind of don't have a list of the

182
00:13:51,029 --> 00:13:53,609
shed the documentation is getting better
and better every day but they don't have

183
00:13:53,609 --> 00:13:57,149
a good list but you can kind of just go
look at all the tasks and tools to

184
00:13:57,149 --> 00:14:00,899
figure out which ones don't need around
like my running a ruby code base let's

185
00:14:00,899 --> 00:14:04,529
run the Ruby tools if I'm just run over
in code and run everything which

186
00:14:04,529 --> 00:14:08,759
probably don't want to do go ahead and
you could go ahead and the run code if

187
00:14:08,759 --> 00:14:11,189
you see something like this if your
reason like Ruby on Rails you can use

188
00:14:11,189 --> 00:14:13,980
like break man which is a great tool and
a definitely recommend you should be

189
00:14:13,980 --> 00:14:18,419
using it you can use like specifically
to a framework which is rails for Ruby

190
00:14:18,419 --> 00:14:23,129
so basically the really important piece
here you what kind of wanted to say hey

191
00:14:23,129 --> 00:14:27,600
this is a a name of products so it's
like I want to use retired es it's all

192
00:14:27,600 --> 00:14:33,059
one word labels it's really just as a
javascript is dotnet is java and python

193
00:14:33,059 --> 00:14:37,738
those kind of things and so here's a
list of all the tools that recently

194
00:14:37,739 --> 00:14:42,359
pulled out and so this is just basically
a run this tool against myself over so

195
00:14:42,359 --> 00:14:46,859
it's kind of cool to is when you create
your like w packages or your MSI's you

196
00:14:46,859 --> 00:14:51,989
can go ahead and run like a V on it like
clamavi so if someone somehow put like a

197
00:14:51,989 --> 00:14:56,579
backdoor in your code and packaged with
the another tool that was delicious

198
00:14:57,179 --> 00:15:01,439
you might actually be able to see that
pay now we have a virus or our in our

199
00:15:01,439 --> 00:15:05,000
code base which is not people would be
good to know

200
00:15:05,000 --> 00:15:09,710
because you know the attacking come in
anytime here in a the DevOps talked

201
00:15:09,710 --> 00:15:11,270
about yesterday

202
00:15:11,270 --> 00:15:14,780
you know there's so many things that can
happen entire chain it could be in the

203
00:15:14,780 --> 00:15:19,730
code could be during a compile-time
someone to change out the linking of

204
00:15:19,730 --> 00:15:23,690
dependencies it could be during package
time we're trying to pack it up and send

205
00:15:23,690 --> 00:15:26,630
it somewhere so there's different tools
for different situations

206
00:15:26,630 --> 00:15:30,140
another one is also like using a loss
app you're not familiar with the losses

207
00:15:30,140 --> 00:15:35,990
app it's a really good tool for taking
the weber plus and replaying them and so

208
00:15:35,990 --> 00:15:39,830
you can end up saying i wanted to try a
sequel injection attack i want to try a

209
00:15:39,830 --> 00:15:44,060
across waves of scripting attack

210
00:15:44,060 --> 00:15:46,790
it's really good for replaying that you
can actually get report out of that as

211
00:15:46,790 --> 00:15:47,569
well

212
00:15:47,570 --> 00:15:52,310
terry run through the tools and so
here's some labels and some of its

213
00:15:52,310 --> 00:15:55,849
basically hey I want to look at a file
integrity monitoring or I want to use

214
00:15:55,850 --> 00:16:04,580
code or Ruby or framework of JavaScript
so it's all just a giant list and so you

215
00:16:04,580 --> 00:16:07,790
can also build some of your own tools so
if you're using like a statically first

216
00:16:07,790 --> 00:16:11,569
code analysis tool or some type of tool
that's not in that list you can go ahead

217
00:16:11,570 --> 00:16:19,070
and build your own tool so what they do
offer is if you look at any of the tasks

218
00:16:19,070 --> 00:16:27,620
in here there is a base one has yet so I
kind of like a base one so you really do

219
00:16:27,620 --> 00:16:31,220
is implement a few methods change a few
names and you have yourself a way of

220
00:16:31,220 --> 00:16:34,550
interacting with that tool that you
probably using in-house and so you can

221
00:16:34,550 --> 00:16:38,780
do that for anything so if you for some
reason the file system or get is not

222
00:16:38,780 --> 00:16:43,490
enough and you're using like svn or FTP
or whatever you know you can go ahead

223
00:16:43,490 --> 00:16:46,220
and write that to one you're going to go
ahead and write like other outputs as

224
00:16:46,220 --> 00:16:49,820
well if you have if you want to contact
your like github if you're trying to

225
00:16:49,820 --> 00:16:52,310
upload your results to get help
specifically instead of like your

226
00:16:52,310 --> 00:16:55,310
because I just support chair of the box

227
00:16:57,040 --> 00:17:02,709
and so one thing I will tell test the
group here if you want to you should

228
00:17:02,709 --> 00:17:06,938
write a task for vigil and this is a
very fun language just to give you heads

229
00:17:06,939 --> 00:17:13,299
up this language is pythonic in its
essence but what ends up doing is if you

230
00:17:13,299 --> 00:17:19,059
create an invalid code operation it will
delete the offending line and you're

231
00:17:19,059 --> 00:17:23,290
like okay well it's kind of weird just
deletes my code right and we'll do that

232
00:17:23,290 --> 00:17:28,899
over and over until the entire code
bases gone so don't make a mistake or

233
00:17:28,900 --> 00:17:31,330
your entire code base will be deleted

234
00:17:31,330 --> 00:17:38,500
so go ahead and make a task for that
going to challenge you to do that the

235
00:17:38,500 --> 00:17:40,960
first time your honor code you're going
to giant list you know if your

236
00:17:40,960 --> 00:17:43,780
penetration tester you ever get enough
penetration test reports kind of the

237
00:17:43,780 --> 00:17:46,809
same thing just gonna get a giant list
and you're gonna have to go through

238
00:17:46,809 --> 00:17:51,820
what's the highest what's the suvir's
what's mediums slows and you can also go

239
00:17:51,820 --> 00:17:55,120
to do some of those filters to say you
know this is false positives or this

240
00:17:55,120 --> 00:17:59,500
stuff we don't really care about because
it's catchy couldn't be affected but you

241
00:17:59,500 --> 00:18:01,330
know knowing is half the battle

242
00:18:01,330 --> 00:18:06,639
so you know we want to get to that point
where we're saying so that's gonna get

243
00:18:06,640 --> 00:18:09,100
to the point where saying we actually
know that we have a vulnerability

244
00:18:09,100 --> 00:18:11,918
because if you don't know let's see what
works for you actually want at least

245
00:18:11,919 --> 00:18:17,799
know when you can actually take care of
and take the steps to get it solved so

246
00:18:17,799 --> 00:18:21,309
here's some of the other resources you
know i'll go back to the first slide

247
00:18:21,309 --> 00:18:25,780
that's where you can actually find the
slides and so these are some more talks

248
00:18:25,780 --> 00:18:31,510
on it here's the 01 the website about it
so well so you can actually get more

249
00:18:31,510 --> 00:18:35,379
information about it here go to the
github page they have a pretty good

250
00:18:35,380 --> 00:18:42,460
documentation on it as well and so they
have pretty good how to install and how

251
00:18:42,460 --> 00:18:49,090
to get this all started and then there's
a few more talks about one from the

252
00:18:49,090 --> 00:18:52,270
crater 13 while someone else on the loss
project they kind of just talk about the

253
00:18:52,270 --> 00:18:57,610
sink similar kind of things i'm talking
about here today so go back to the front

254
00:18:57,610 --> 00:19:01,928
and this guy that's all I got for you
guys so many questions

255
00:19:04,559 --> 00:19:10,678
no no one over your head too much over
your head

256
00:19:10,679 --> 00:19:15,330
alright alright well thank you very much

