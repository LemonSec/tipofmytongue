1
00:00:00,000 --> 00:00:06,359
I don't run in here since we're both in
just a little bit behind but this is

2
00:00:06,359 --> 00:00:12,179
metaprogramming in Ruby and work we're
doing it wrong so welcome and thanks for

3
00:00:12,179 --> 00:00:16,079
having me if anybody wants to follow
along the there's some slides online if

4
00:00:16,079 --> 00:00:19,080
something is not clear up here but I'm
trying to prepare as much as possible

5
00:00:19,770 --> 00:00:26,400
I'm controller i do application security
. index financial financial services

6
00:00:26,400 --> 00:00:32,278
small business lending type of deal i
work in Ruby java know . net all the

7
00:00:32,279 --> 00:00:36,480
above have a little bit of a consulting
background for a before i went there but

8
00:00:36,480 --> 00:00:42,239
i know that this is like the short part
of the to talk about actually cares

9
00:00:42,239 --> 00:00:47,760
ok my I guess starting off at this talk
just to give you a little bit over you

10
00:00:47,760 --> 00:00:53,789
what we're going to be going through can
get a general idea of who is actually in

11
00:00:53,789 --> 00:00:57,180
the way I mean it's terrible to ever be
programming in the room at all just a

12
00:00:57,180 --> 00:01:04,049
couple and of that how many are familiar
with the concept of metaprogramming ok

13
00:01:04,049 --> 00:01:09,930
cool how perfect I wore my stranger
things for today there's a reason for

14
00:01:09,930 --> 00:01:14,970
that we're getting into trouble with the
three deadly sin zin metaprogramming

15
00:01:14,970 --> 00:01:18,270
we're going to go over some movie we're
going to break some stuff fixing stuff

16
00:01:18,270 --> 00:01:21,869
do all that but more importantly i just
talked two years ago the reason I'm

17
00:01:21,869 --> 00:01:26,729
bringing it back up because the same
problem still kind of exists the the big

18
00:01:26,729 --> 00:01:30,329
thing I want to cover is I won't be
going to the end of the live demo today

19
00:01:30,329 --> 00:01:35,429
because I'm going to avoid that now
nobody will come on

20
00:01:35,430 --> 00:01:40,619
there we go i got one back there so what
is ruby ruby is a this is the basic

21
00:01:40,619 --> 00:01:43,619
textbook definition of what reviews
dynamic open source program going to

22
00:01:43,619 --> 00:01:46,590
focus and simplicity and productivity
I've heard a lot of people with dog on

23
00:01:46,590 --> 00:01:50,159
Ruby today I'm sorry I like it it's
great

24
00:01:50,939 --> 00:01:54,449
the reason is that you know things like
this like this is a really simple

25
00:01:54,450 --> 00:01:58,170
implementation of something you can
create this greater class it's really

26
00:01:58,170 --> 00:02:01,950
readable for me without a computer
science background before i got into

27
00:02:01,950 --> 00:02:05,189
security on the whole it was it was
really nice for me to come into a

28
00:02:05,189 --> 00:02:08,910
language that allows me to get things
done and that's why i like your phone

29
00:02:08,910 --> 00:02:12,730
with ruby is my my first language to to
get get stuff out the door

30
00:02:12,730 --> 00:02:19,899
and when it came to doing security stuff
so what's best in Ruby right the big

31
00:02:19,900 --> 00:02:22,720
things that are best in room ER its
elegant simple productive those are the

32
00:02:22,720 --> 00:02:26,920
big things that I like I don't like
having a lot of what i consider extra

33
00:02:26,920 --> 00:02:30,040
stuff when i'm trying to get things out
the door i'm not an enterprise developer

34
00:02:30,040 --> 00:02:35,709
i just want to get something done as a
result of it being easy to deploy of

35
00:02:35,709 --> 00:02:40,000
these gems coming in and and kind of
rushing out the door I I shoot myself in

36
00:02:40,000 --> 00:02:45,879
the foot a lot and it makes it really
easy for us to do that and what is

37
00:02:45,879 --> 00:02:49,660
metaprogramming when I first found out
metaprogramming the definition that was

38
00:02:49,660 --> 00:02:54,519
given to me was code that writes code
was like that's something magic that's

39
00:02:54,519 --> 00:02:59,709
awesome that sounds like an AI right but
what the kind of the the more accurate

40
00:02:59,709 --> 00:03:05,530
definition is coded manipulates language
constructs at runtime it is not AI is

41
00:03:05,530 --> 00:03:09,190
not magic it probably opens up more
problems than we would like

42
00:03:09,730 --> 00:03:14,440
and that's what we want to draw
attention to write one of the most

43
00:03:14,440 --> 00:03:18,880
common examples is this concept of rails
dynamic finders a European folk singer

44
00:03:18,880 --> 00:03:21,190
with the concept of a ghost method

45
00:03:21,190 --> 00:03:28,569
ok so ghost methods are these are our
kind of set maybe set you up right they

46
00:03:28,569 --> 00:03:34,060
set you up for success basically rails
has this concept of a ghost method and

47
00:03:34,060 --> 00:03:39,130
find by and kind of an active record
where it takes the tail end of a method

48
00:03:39,130 --> 00:03:43,299
that you have throws it and says hey
that looks like something that i can

49
00:03:43,299 --> 00:03:47,530
find things on in the database in my
persistence layer does some stuff looks

50
00:03:47,530 --> 00:03:51,340
for the condition and returns them so
that way of the cool thing about their

51
00:03:51,340 --> 00:03:55,389
the meta programming part of this is
that as long as I can create an

52
00:03:55,389 --> 00:04:02,620
attribute that is in my in as is part of
one of my database objects i can find on

53
00:04:02,620 --> 00:04:05,680
it and our decision not to write a new
code I don't have to put anything else

54
00:04:05,680 --> 00:04:09,370
in the controller I just works right
it's that rails magic that makes it

55
00:04:09,370 --> 00:04:13,209
really easy for for folks to to get up
and running in to get these programs

56
00:04:13,209 --> 00:04:14,190
outdoor

57
00:04:14,190 --> 00:04:21,060
that's what it looks like and we have
time i will try to get into it in the

58
00:04:21,060 --> 00:04:24,600
tail end of the talk so what are the
three deadly move metaprogramming since

59
00:04:24,600 --> 00:04:29,460
the first is send second is constant
eyes and the third eval I won't spend

60
00:04:29,460 --> 00:04:33,270
too much time on evil i think we know ye
that was a bad thing but i'll touch on

61
00:04:33,270 --> 00:04:38,340
it so send is this is again the textbook
definition and invokes the method

62
00:04:38,340 --> 00:04:41,039
identified by simple passing any
argument specified with that really

63
00:04:41,040 --> 00:04:45,090
boils down to is that if i were to call
test that like string it's essentially

64
00:04:45,090 --> 00:04:49,619
equal to test that send the symbol
length will return on the $DAY the new

65
00:04:49,620 --> 00:04:54,840
the length of that string so why would
we even use this right the biggest

66
00:04:54,840 --> 00:04:58,950
things are it dynamically let me decide
what method to call there's some debate

67
00:04:58,950 --> 00:05:03,840
on why or if it should allow us to call
private methods but last time I checked

68
00:05:03,840 --> 00:05:07,770
it's still did most importantly it lets
you decide what to call at runtime and

69
00:05:07,770 --> 00:05:11,700
you might say well why would I want to
even go down that road

70
00:05:11,700 --> 00:05:16,200
it's really valuable in testing it's
really valuable in if you just if you

71
00:05:16,200 --> 00:05:20,640
want to limit the amount of code that
you are that putting inside of the

72
00:05:20,640 --> 00:05:25,500
codebase so this is a little bit of an
example that I wrote up in a demo

73
00:05:25,500 --> 00:05:30,930
application that I have these videos for
to avoid the damaged organ but the the

74
00:05:30,930 --> 00:05:34,110
actual live code is it is available and
you can spend the application up and

75
00:05:34,110 --> 00:05:39,090
play with it you'd like but this is the
method that's in there basically are

76
00:05:39,090 --> 00:05:42,450
finding an employee we're passing a type
that type is essentially a name or a

77
00:05:42,450 --> 00:05:47,789
status we're sending that directly to a
string value for providing the value and

78
00:05:47,790 --> 00:05:52,110
saving the record the cool thing about
this is no matter how many types i ad i

79
00:05:52,110 --> 00:05:59,040
just add the type in in the model or in
the object and it and this controller

80
00:05:59,040 --> 00:06:02,640
method will still function and I don't
have to write any additional code so

81
00:06:02,640 --> 00:06:06,120
five lines of code I've set myself up
for the future which is from a

82
00:06:06,120 --> 00:06:10,230
functional standpoint great so this is
what it looks like in the view i spend

83
00:06:10,230 --> 00:06:13,470
these up to try to cut down the time but
I'm changing my name

84
00:06:13,980 --> 00:06:17,100
I'm changing my status that's
essentially the idea here

85
00:06:19,440 --> 00:06:24,570
obviously if we are just trusting of you
to do our security we're going to get

86
00:06:24,570 --> 00:06:30,210
into some trouble but the real cool
things about this or that we have

87
00:06:30,210 --> 00:06:33,659
achieved functionality for two types
with minimal lines of code i've only had

88
00:06:33,660 --> 00:06:38,010
to write this one time i've added new
types of objects without having to

89
00:06:38,010 --> 00:06:41,370
rewrite the controller meaning that I
can you know I can have named status i

90
00:06:41,370 --> 00:06:44,550
wanted to give access to the salary I
could you know things of that nature

91
00:06:45,180 --> 00:06:48,510
I'm if I wanted to add any actions in
the future could do that as well

92
00:06:48,510 --> 00:06:51,900
another really cool use of this is
things like this if I have a

93
00:06:51,900 --> 00:06:57,239
configuration of ids and secrets in urls
and database strings and things of that

94
00:06:57,240 --> 00:07:01,920
nature inside of a configuration file
that I throw an application i don't have

95
00:07:01,920 --> 00:07:06,270
to write these in the code i can i can
load them dynamically in this way you

96
00:07:06,270 --> 00:07:14,190
may have seen something like this second
second here where you can load it from a

97
00:07:14,190 --> 00:07:18,960
file but you're still calling those
variables down the line of that

98
00:07:18,960 --> 00:07:24,570
particular module you can still load the
file but you're still putting all that

99
00:07:24,570 --> 00:07:27,659
inside of the code and if you make a
change it to make it you have to make a

100
00:07:27,660 --> 00:07:32,400
code change with something like send you
can run it through the loop and all you

101
00:07:32,400 --> 00:07:36,270
have to change your configuration file
so depending on what deployment you go

102
00:07:36,270 --> 00:07:41,609
to whether its production development
staging whatever you have a 5-line loop

103
00:07:41,610 --> 00:07:44,700
that goes through every key value pair
and send a configuration whether it

104
00:07:44,700 --> 00:07:48,390
changes across stating production or
development and you have what you need

105
00:07:48,390 --> 00:07:51,870
and that same five lines of code and you
don't have to go back and change in

106
00:07:51,870 --> 00:07:57,870
every single environment configuration
the bad things here are that it

107
00:07:57,870 --> 00:08:01,980
obviously lets the user determine what
method is called it allows the user or

108
00:08:01,980 --> 00:08:05,370
attacker to take advantage of this
developer may not have it have intended

109
00:08:05,370 --> 00:08:12,660
and in the demo here we kind of we throw
Bob in there we say hey Bob I don't

110
00:08:12,660 --> 00:08:15,660
wanna I don't want you i want to send
you a name want to send you a new salary

111
00:08:15,660 --> 00:08:19,380
i'm going to set the salary to 12
million dollars or something ridiculous

112
00:08:19,380 --> 00:08:25,110
and then even though i haven't exposed
that on the front end i'm able to get

113
00:08:25,110 --> 00:08:27,830
that salary changed

114
00:08:27,830 --> 00:08:35,240
in the actual view and everything so we
have 12 million dollars

115
00:08:37,220 --> 00:08:42,290
the other thing is that I you allows you
to give you access to things like ID

116
00:08:42,289 --> 00:08:47,420
every instance method that's
instantiated so when you're standing

117
00:08:47,420 --> 00:08:50,479
these you're not just exposing
attributes of the model you're exposing

118
00:08:50,480 --> 00:08:53,720
pretty much everything for that
particular user in this case I'm

119
00:08:53,720 --> 00:08:59,720
changing the ID value in kind of been
better applications that might give me

120
00:08:59,720 --> 00:09:02,510
some vertical privilege escalation or
something along those lines in my

121
00:09:02,510 --> 00:09:05,810
application it just breaks everything

122
00:09:05,810 --> 00:09:09,199
these are all the instance methods that
you exposed in and something like that

123
00:09:10,010 --> 00:09:13,910
basically what i've done is anything
that can be assigned a value I've have

124
00:09:13,910 --> 00:09:19,160
pulled out of this and so if you can do
something crazy with these methods then

125
00:09:19,160 --> 00:09:22,969
you can experiment with that but you
expose essentially all of these but send

126
00:09:22,970 --> 00:09:26,420
if you're accepting user parameters that
way

127
00:09:26,420 --> 00:09:32,270
so what's the fix the fixes that you
avoid using user controllable parameters

128
00:09:32,270 --> 00:09:37,699
with something like sin because it is a
powerful it's a powerful use case and

129
00:09:37,700 --> 00:09:41,360
it's it's really awesome to use in this
configuration context or in unit tests

130
00:09:41,360 --> 00:09:44,840
or whatever it might be but when you're
accepting user control parameters it you

131
00:09:44,840 --> 00:09:50,360
can kind of shoot you if you have to use
it maybe whitelist or find a way to

132
00:09:50,360 --> 00:09:56,840
limit the number of methods that are
that are callable now in my case for the

133
00:09:56,840 --> 00:10:01,250
stopgap for that the patch would be just
to put a list of acceptable programs

134
00:10:01,250 --> 00:10:06,920
that functions similar to like a permit
function and then you can always use dot

135
00:10:06,920 --> 00:10:13,819
notation like we saw in the beginning of
the of this particular section the next

136
00:10:13,820 --> 00:10:19,310
one up is constant eyes so constant izes
interesting it the again the textbook

137
00:10:19,310 --> 00:10:22,310
definition is trying to find declared
concert with the name specified in the

138
00:10:22,310 --> 00:10:25,819
string and returns that constant the
name era comes when it's not in camel

139
00:10:25,820 --> 00:10:32,480
case the strings on camel case or if
it's not initialized constant so here is

140
00:10:32,480 --> 00:10:36,860
an example of how we might use that and
this this is kind of a reduced kind of a

141
00:10:36,860 --> 00:10:39,710
dumbed down version of something that
was actually founded an open source

142
00:10:39,710 --> 00:10:40,740
project and get up

143
00:10:40,740 --> 00:10:43,950
basically it's happening as a class is
being created

144
00:10:44,550 --> 00:10:48,359
it's running constant eyes and say hey
does this is a this is a constant as an

145
00:10:48,360 --> 00:10:54,270
object and then it's running fine by so
it's using it as a validation method so

146
00:10:54,270 --> 00:10:59,850
why we use it again great for unit tests
and reducing code so i can essentially

147
00:10:59,850 --> 00:11:04,890
validate whether the constant exists now
i can reduce the code that I right to

148
00:11:04,890 --> 00:11:09,360
test those all of all of my classes and
all of my objects and i can write one

149
00:11:09,360 --> 00:11:13,290
right at one time in this particular
instance we're using it to validate

150
00:11:13,290 --> 00:11:18,839
employee id's as a as a demo so it just
kind of brings up the employee ID and

151
00:11:18,839 --> 00:11:22,560
says that's a good idea if it doesn't
it'll air out and actually catch an

152
00:11:22,560 --> 00:11:29,310
exception again what we're doing is
minimal minimal lines of code we can use

153
00:11:29,310 --> 00:11:33,300
that same controller that i have listed
here to function across multiple classes

154
00:11:33,300 --> 00:11:36,390
i can do it for employees I could do it
for reports i can do it for contracts

155
00:11:36,390 --> 00:11:41,310
and all those are inside the database in
the demo app I can run the same unit

156
00:11:41,310 --> 00:11:47,939
tests on multiple in all those classes
and it again it's 45 lines good bad

157
00:11:47,940 --> 00:11:51,149
things are it allows the user to
essentially running on any class so if

158
00:11:51,149 --> 00:11:55,140
you haven't considered what classes you
have what what objects you have a

159
00:11:55,140 --> 00:11:58,260
database then you could get into trouble
there

160
00:11:58,260 --> 00:12:02,010
it allows the attack the footprint the
application when name error is returned

161
00:12:02,010 --> 00:12:05,819
so if you're not catching your errors
properly and you they could use this in

162
00:12:05,820 --> 00:12:10,079
kind of a brute force attack to do it i
have a demo for that if errors are

163
00:12:10,079 --> 00:12:13,770
called the attacker will could obtain
sensitive information if you're not

164
00:12:13,770 --> 00:12:20,520
handling was properly so here is the the
concept of i'll just change the class

165
00:12:20,520 --> 00:12:24,930
that i'm using you guys probably can see
that but it's changing it to user and

166
00:12:24,930 --> 00:12:28,500
instead of validating and employees
bringing it back into the first user in

167
00:12:28,500 --> 00:12:32,850
the database which you obviously could
be a privileged user and admin give me

168
00:12:32,850 --> 00:12:40,230
some escalation privileges there in the
second example here I've got an attack

169
00:12:40,230 --> 00:12:47,220
going essentially there's five values
here that are two are the employee and

170
00:12:47,220 --> 00:12:51,839
user that we saw one is report and two
are just junk ones and you can see from

171
00:12:51,839 --> 00:12:53,750
the length of the response that

172
00:12:53,750 --> 00:12:58,400
one is not like the other so the 22
hundreds are the employee and the user

173
00:12:58,400 --> 00:13:04,220
that I that I can obviously validate and
see the two apple and not mappers return

174
00:13:04,220 --> 00:13:06,710
the name error because that's what
constant has returned if it's not in

175
00:13:06,710 --> 00:13:11,990
camel case and not initialized constant
but the last one is a no method error

176
00:13:11,990 --> 00:13:16,760
meaning that it was a uninitialized
constant but it didn't have some

177
00:13:16,760 --> 00:13:22,040
attribute in this case it was a report
didn't have an email attribute and so as

178
00:13:22,040 --> 00:13:26,300
a result i can see that that isn't that
is a valid a database object that i

179
00:13:26,300 --> 00:13:32,750
could probably use in another attack
this is no longer live code but it was

180
00:13:32,750 --> 00:13:35,570
pulled out of an open source project and
get up and this is a felt like it was

181
00:13:35,570 --> 00:13:38,720
necessary to to show you how this is
actually using that this doesn't

182
00:13:38,720 --> 00:13:43,130
actually exist i'm not making it up and
it's not just demo applications if you

183
00:13:43,130 --> 00:13:46,550
look at this method basically what's
happening is a payment method is being

184
00:13:46,550 --> 00:13:50,180
created the parameter that's coming into
something like credit card or gift card

185
00:13:50,180 --> 00:13:54,709
the tight is something like MasterCard
Visa or something along those lines then

186
00:13:54,710 --> 00:13:58,430
we just are accepting a bunch of
parameters in to create the object you

187
00:13:58,430 --> 00:14:04,099
see the object gets placed with all of
the with all of the parameters and then

188
00:14:04,100 --> 00:14:07,730
it just saved it goes through the call
of access side so if I were to pass

189
00:14:07,730 --> 00:14:11,660
paint a payment method of user
regardless of whether Visa Mastercard or

190
00:14:11,660 --> 00:14:12,890
whatever is in there

191
00:14:12,890 --> 00:14:17,030
it deletes the type value constant ties
it and then I could create a user off of

192
00:14:17,030 --> 00:14:18,770
that

193
00:14:18,770 --> 00:14:23,120
so this could be used as a possible way
to create users using some other

194
00:14:23,120 --> 00:14:28,160
endpoint which is a pretty interesting
find inside of github so what's the fix

195
00:14:28,160 --> 00:14:32,959
same kind of stuff you know whitelisted
you can constant eyes does have the

196
00:14:32,960 --> 00:14:36,020
ability to make reference to all the
initialize constants that are in there

197
00:14:36,020 --> 00:14:39,439
so the do take user parameters there
then you could get into some real

198
00:14:39,440 --> 00:14:43,160
trouble so just be aware of what your
models are and where you're accepting

199
00:14:43,160 --> 00:14:47,480
those parameters and ready to whitelist
or do some other form of of changing

200
00:14:47,480 --> 00:14:51,440
their in this case we again we
whitelisted that way we can maintain

201
00:14:51,440 --> 00:14:57,110
that particular list and a maybe in a
file or in another variable an array or

202
00:14:57,110 --> 00:14:59,870
something that I provide locally

203
00:14:59,870 --> 00:15:07,910
that looks like the last thing is email
i will try to blow through these email

204
00:15:07,910 --> 00:15:12,050
obviously it's executing really good and
I don't want folks to be like oh it's

205
00:15:12,050 --> 00:15:16,040
evil we never use email it does get used
and it is in some of these open source

206
00:15:16,040 --> 00:15:21,349
projects mostly why we might want to use
email and I I thought on this for a

207
00:15:21,350 --> 00:15:23,450
while when I first put this talk
together and it was kind of like

208
00:15:23,450 --> 00:15:27,560
obviously want to run all the code right
when so if you're if you're new

209
00:15:27,560 --> 00:15:32,060
developer why would you want to do that
while I can dynamically run it and I can

210
00:15:32,060 --> 00:15:36,199
create that Ruby environments and if i
wanted to have if i wanted to teach

211
00:15:36,200 --> 00:15:39,470
someone Ruby I could do it here and I
have to sandbox and I don't want to

212
00:15:39,470 --> 00:15:43,460
limit the amount of functionality that
they have and I was like okay that makes

213
00:15:43,460 --> 00:15:43,910
sense

214
00:15:43,910 --> 00:15:47,630
we're pulling out all the stops that we
can train people in ruby was doing a

215
00:15:47,630 --> 00:15:53,120
kind of protect what you're doing but
the interesting thing and I guess the

216
00:15:53,120 --> 00:15:57,050
one example that i found that made more
sense with something like this where

217
00:15:57,050 --> 00:16:01,250
instead of having the knowledge of how
review or sorry rails routes work

218
00:16:01,250 --> 00:16:11,240
someone created this method of passing
or created this profile show page by

219
00:16:11,240 --> 00:16:17,720
taking the class that exists and doing
it all in one one line of code so

220
00:16:17,720 --> 00:16:23,000
basically no matter what object i have i
give it an ID and it returns the name

221
00:16:23,000 --> 00:16:28,670
which you know logically makes sense and
they were like all you know it looks

222
00:16:28,670 --> 00:16:32,089
really cool it's one line of code and I
can basically have a show page for every

223
00:16:32,089 --> 00:16:37,370
single one of my objects that's real
example and that's the one that I put in

224
00:16:37,370 --> 00:16:42,200
here for that reason I had to take a
step back for and kind of realize that

225
00:16:42,200 --> 00:16:46,670
it is actually kind of cool that you did
that no and all in one line of code but

226
00:16:46,670 --> 00:16:53,329
you open yourself up to a whole lot more
so we kinda have to think about that in

227
00:16:53,330 --> 00:16:57,920
you have to realize that you are opening
it up to any ruby code so if we did have

228
00:16:57,920 --> 00:17:01,880
to do that in the case of something like
a code training site or something along

229
00:17:01,880 --> 00:17:04,640
those lines how could we do it

230
00:17:04,640 --> 00:17:09,380
here's an example of kind of what we did
with the with that as a demonstration

231
00:17:09,380 --> 00:17:12,700
here we can change employee 22 user like

232
00:17:12,700 --> 00:17:17,080
did with constant eyes and send now we
can also do the arithmetic operations in

233
00:17:17,079 --> 00:17:21,280
here we can see when something is not
found we can generate errors and

234
00:17:21,280 --> 00:17:26,530
ultimately at the end of this video we
you exit the system and if you're not

235
00:17:26,530 --> 00:17:33,610
gonna have any recovery options there
you can just crash the app just kind of

236
00:17:33,610 --> 00:17:36,820
shows you know if you don't provide it
with a value then it won't execute just

237
00:17:36,820 --> 00:17:42,820
because the logical on the back end but
ultimately we run a system exit so

238
00:17:42,820 --> 00:17:45,820
what's the fix avoid using email as much
as possible

239
00:17:46,570 --> 00:17:49,870
pretty much all together and at the only
use case that I've been able to think of

240
00:17:49,870 --> 00:17:54,429
is is kind of the sandbox environment so
if you're going to do something like

241
00:17:54,430 --> 00:17:59,560
that maybe spin up in docker some
container you don't care about that sits

242
00:17:59,560 --> 00:18:03,700
off under the application that doesn't
relate to the parent application even

243
00:18:03,700 --> 00:18:08,050
throw in an iframe or something I don't
you know just to get it out of you does

244
00:18:08,050 --> 00:18:13,240
crash or they are pulling information
out of it that it's not not sensitive

245
00:18:13,240 --> 00:18:19,300
but honestly avoided altogether the last
thing is method missing so talk a little

246
00:18:19,300 --> 00:18:22,360
bit about this with the ghost methods
and everything and I tried to simplify

247
00:18:22,360 --> 00:18:26,409
it a little bit so that it made sense
but essentially you can override method

248
00:18:26,410 --> 00:18:32,110
missing method missing is a method gets
called when there is when it doesn't

249
00:18:32,110 --> 00:18:34,689
understand what it's was getting when
the method is missing

250
00:18:34,690 --> 00:18:39,460
it runs this method you might want to
use it you want to do something more

251
00:18:39,460 --> 00:18:43,660
intelligent in the case of Active
Directory activemodel you can

252
00:18:43,660 --> 00:18:47,170
dynamically create methods on the fly
and the same way with the with the regex

253
00:18:47,170 --> 00:18:51,670
and they kind of have a pattern that you
know you want to create and this is a

254
00:18:51,670 --> 00:18:56,650
simplified version of the of what we saw
in the first part in an active record it

255
00:18:56,650 --> 00:19:03,160
basically takes the the method if it has
fined by in the method name with an

256
00:19:03,160 --> 00:19:06,820
underscore at the end it takes that tail
end and uses it as an argument to find

257
00:19:06,820 --> 00:19:13,840
information based on that it also allows
the attacker to create any method

258
00:19:13,840 --> 00:19:18,490
attached to find by so they could find
my role or whatever it might be so it's

259
00:19:18,490 --> 00:19:22,680
again just important to understand the
implementation there and make sure that

260
00:19:22,680 --> 00:19:27,300
when we are accepting music parameters
that we consider where they're being

261
00:19:27,300 --> 00:19:32,340
accepted in how the fix is basically
just avoid giving that power to users

262
00:19:32,340 --> 00:19:37,439
altogether you can reserve it for
development backend services if you do

263
00:19:37,440 --> 00:19:40,950
redefine method missing make sure that
you're calling super to the actual

264
00:19:40,950 --> 00:19:46,200
method missing so that it is the place
to go for the stairs out if it can be

265
00:19:46,200 --> 00:19:52,710
avoided avoided but otherwise just take
some heavy consideration so this is the

266
00:19:52,710 --> 00:19:53,430
interesting part

267
00:19:53,430 --> 00:19:59,580
these are the results from two years ago
basically what send only kind of

268
00:19:59,580 --> 00:20:05,370
isolating send inside of just
application controllers at 877 result

269
00:20:05,370 --> 00:20:08,219
some of those might be people just
putting up test applications or whatever

270
00:20:08,220 --> 00:20:09,090
it might be

271
00:20:09,090 --> 00:20:12,480
same thing that content wise taking
direct user parameters into the app

272
00:20:12,480 --> 00:20:20,730
controllers path 7652 and evil in the
app controllers path and 422 with send

273
00:20:20,730 --> 00:20:28,470
we went from 877 two years ago to 1547
today so that is still an issue with

274
00:20:28,470 --> 00:20:35,730
constant lies inside the app controllers
bathroom 7652 good results to 12,000 639

275
00:20:35,730 --> 00:20:40,530
this problem is kind of exponentially
growing the only thing that crept up

276
00:20:40,530 --> 00:20:47,820
really crept was eval thankfully kind of
561 results and out of all the out of

277
00:20:47,820 --> 00:20:48,389
all of them

278
00:20:48,390 --> 00:20:51,390
I guess I'm kind of happy to see that I
mean obviously there's going to be more

279
00:20:51,390 --> 00:20:55,470
codon can get up now than there was
before but constant has definitely some

280
00:20:55,470 --> 00:21:02,640
surprising there there might be a way to
see if these are being pulled out or

281
00:21:02,640 --> 00:21:08,040
sanitize and some other way down the
line but honestly it's kind of a broad

282
00:21:08,040 --> 00:21:10,620
really be interested into this little
bit further I think that's going to the

283
00:21:10,620 --> 00:21:15,570
next step here so not pooping on Ruby I
do love Ruby for the people that do like

284
00:21:15,570 --> 00:21:20,610
really the two of you in the room I I it
was but you know it was my first

285
00:21:20,610 --> 00:21:26,429
language so I do understand that it's
easy to use into yourself in the foot

286
00:21:26,430 --> 00:21:29,130
but just gonna want to harp on the
importance of implementation here across

287
00:21:29,130 --> 00:21:33,270
the board and to always think about the
attacker as you're implementing

288
00:21:33,929 --> 00:21:37,049
any kind of language and that's it

289
00:21:37,049 --> 00:21:43,139
if you have any questions i am open if
we're running okay on time which it

290
00:21:43,139 --> 00:21:49,199
seems maybe yeah and the code is
available on this link and you can meet

291
00:21:49,200 --> 00:21:49,889
me there

292
00:21:49,889 --> 00:22:04,830
Robotnik questions to visit for the sin
shall call that this can call anything

293
00:22:04,830 --> 00:22:10,619
that is an instance method of that
particular object which which does witch

294
00:22:10,619 --> 00:22:15,149
which I'm actually not a hundred percent
sure and we can look at it will just run

295
00:22:15,149 --> 00:22:18,748
it through and find out but you open up
here but you can see everything that's

296
00:22:18,749 --> 00:22:22,379
able to be called you might be able to
pump up the stack I'm not sure let's

297
00:22:22,379 --> 00:22:24,990
take a look afterwards

298
00:22:24,990 --> 00:22:41,159
yeah you have processes most of this
actually i was in nineteen ninety

299
00:22:41,159 --> 00:22:46,080
percent of this is is through source
code review because I especially with

300
00:22:46,080 --> 00:22:50,158
saying concise and evaluate always hit
those in a relative you because if I

301
00:22:50,159 --> 00:22:56,369
find them in the in the app in the
controller's then there's a good chance

302
00:22:56,369 --> 00:23:00,449
that the sanitization is not happening
and then that's usually how I find it

303
00:23:00,450 --> 00:23:05,399
there as far as dynamically I don't
think that I found these particular

304
00:23:05,399 --> 00:23:09,119
issues related specifically to
metaprogramming myself on on the app

305
00:23:09,119 --> 00:23:14,369
dynamically is in but usually my
engagements are have some kind of static

306
00:23:14,369 --> 00:23:19,199
component so else

307
00:23:20,230 --> 00:23:32,350
cool thanks again for coming to this
table talk after five appreciate it

