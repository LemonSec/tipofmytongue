1
00:00:00,000 --> 00:00:19,320
we're going right now ok so there goes
my executors good start to what the heck

2
00:00:19,320 --> 00:00:25,230
it is working

3
00:00:29,160 --> 00:00:35,190
yep

4
00:00:35,190 --> 00:00:39,809
wonderful this is what we start early

5
00:00:43,440 --> 00:00:49,739
ok alright so everybody i'm mark maker
and today i'll be talking about script

6
00:00:49,739 --> 00:00:53,489
confiscation and we'll be providing you
with the general set of guidelines into

7
00:00:53,489 --> 00:00:57,870
techniques for immediate also like to
give a shout-out to everybody who

8
00:00:57,870 --> 00:01:00,120
actually still stuck around for this
talk

9
00:01:00,120 --> 00:01:03,120
yeah well you guys are drinking

10
00:01:03,660 --> 00:01:08,130
yeah it's great i had a drink for this
so everybody's nice and loose you know

11
00:01:08,130 --> 00:01:12,810
that the man redman are coming on later
tonight so you know I got open up for

12
00:01:12,810 --> 00:01:17,040
them right here see ya tonight man

13
00:01:18,659 --> 00:01:23,549
alright so just start off here here's a
quick high-level outline of the major

14
00:01:23,549 --> 00:01:29,880
talking points i'll be discussing this
evening so first off I'll start off with

15
00:01:29,880 --> 00:01:35,939
a little bit about myself I'm based on
the DC metro area and have been our

16
00:01:35,939 --> 00:01:40,139
researcher at and game for the past six
months I spent around 10 years in the

17
00:01:40,140 --> 00:01:44,729
computer-security industry and spend
time developing your network operation

18
00:01:44,729 --> 00:01:48,090
schools in our new shops as well as
providing our analysis and reverse

19
00:01:48,090 --> 00:01:51,659
engineering capabilities to government
customers in here three environments

20
00:01:51,659 --> 00:01:54,659
also as a 74 the picture on the right

21
00:01:54,659 --> 00:01:57,659
I've become quite adept at multitasking
over the years

22
00:01:58,760 --> 00:02:06,410
so obvious creation what exactly is
obviously asian well here's wikipedia is

23
00:02:06,410 --> 00:02:09,889
long winded description above
obfuscation which actually starts out as

24
00:02:09,889 --> 00:02:14,450
a bit of a circular definition but in
short obfuscation is deliberately

25
00:02:14,450 --> 00:02:19,880
obscuring the purpose and or logic of
source code through manual or automated

26
00:02:19,880 --> 00:02:27,890
meets wire script stop skid well
depending on the audience obfuscation is

27
00:02:27,890 --> 00:02:31,549
deployed in commercial or legitimate
software primarily to protecting

28
00:02:31,550 --> 00:02:37,160
organizations intellectual property and
in some extremely misguided cases to

29
00:02:37,160 --> 00:02:41,060
help secure sensitive data such as
embedded login credentials I probably

30
00:02:41,060 --> 00:02:44,780
should have to get into that too much to
say hi that's a bad idea

31
00:02:45,680 --> 00:02:49,910
as for malware authors they have two
primary interest uh first of all they

32
00:02:49,910 --> 00:02:53,690
want to help the script to avoid
detection by obscuring the true nature

33
00:02:53,690 --> 00:02:59,000
of the code and and second of all they
want to deter any sort of reverse

34
00:02:59,000 --> 00:03:03,980
engineering efforts by obscuring the API
is called at runtime and any data

35
00:03:03,980 --> 00:03:08,810
structures objects or plain text strings
their use scripts will have a higher

36
00:03:08,810 --> 00:03:13,850
chance of avoiding any direction
hardware or software employed by the

37
00:03:13,850 --> 00:03:19,130
target user or organization and thus
provide a higher chance of being

38
00:03:19,130 --> 00:03:21,440
successfully executed on the host

39
00:03:21,440 --> 00:03:30,050
ok so how're skip sophisticated well
Manuel obfuscation is feasible but it's

40
00:03:30,050 --> 00:03:36,260
not feasible at scale arm you know one
of the prime examples of manifestation

41
00:03:36,260 --> 00:03:40,310
is the obvious skated sea contest takes
place annually you can definitely look

42
00:03:40,310 --> 00:03:44,540
that up and there's different plenty of
examples of code that you have

43
00:03:44,540 --> 00:03:48,799
absolutely no idea what's going on are
but yeah like I said it's not practical

44
00:03:48,800 --> 00:03:53,090
or feasible at a large scale so
automated obvious Gators are going to be

45
00:03:53,090 --> 00:03:57,800
leveraged primarily to provide a simple
means for producing these offices

46
00:03:57,800 --> 00:04:02,810
scripts there's several known up skaters
really available for download the price

47
00:04:02,810 --> 00:04:08,060
of small license fee if you just Google
automated obfuscator plus any language

48
00:04:08,060 --> 00:04:11,930
you'll find you as many results you need
in

49
00:04:11,930 --> 00:04:17,449
along with white papers you academic
papers for other proposed obvious caters

50
00:04:17,449 --> 00:04:22,580
that are out there arm and you know in
certain cases malware authors may even

51
00:04:22,580 --> 00:04:25,639
develop or customize their own obvious
caters to suit their own needs for their

52
00:04:25,639 --> 00:04:34,130
issues see so in modern-day taxes in
areas scripts are usually not the

53
00:04:34,130 --> 00:04:37,820
ultimate payload that malware authors
intent to execute i know that's a wide

54
00:04:37,820 --> 00:04:41,509
sweeping statement so of course there
are exceptions to the rule

55
00:04:41,509 --> 00:04:46,940
uh a very recent example is the
powershell ransomware known as powerware

56
00:04:46,940 --> 00:04:53,810
that's but I feel like come back he came
up a few months ago so that's definitely

57
00:04:53,810 --> 00:04:59,120
something that's prevalent but in
general scripts uh you know our reason

58
00:04:59,120 --> 00:05:03,680
in one of two ways either they're used
to gain an initial foothold on a system

59
00:05:03,680 --> 00:05:09,080
and retrieve and invoke next people
payload which is you know something that

60
00:05:09,080 --> 00:05:14,150
you know is going to actually carry
thing the mission out or in scenario

61
00:05:14,150 --> 00:05:18,859
with exploit kits and drive-by downloads
uh when javascript employed it tends to

62
00:05:18,860 --> 00:05:24,139
be used more for OS and host environment
detection and ultimately to help

63
00:05:24,139 --> 00:05:28,820
redirect the user to exploit code that's
targeted towards exploring their

64
00:05:28,820 --> 00:05:29,479
environment

65
00:05:29,479 --> 00:05:34,460
alright so the application

66
00:05:34,460 --> 00:05:39,049
why should we go through the trouble of
the FB skiing trips uh can't we just

67
00:05:39,050 --> 00:05:43,550
fire up a vm open a problem on in
wireshark and launched our scripts and

68
00:05:43,550 --> 00:05:44,900
we're good to go

69
00:05:44,900 --> 00:05:51,080
well you certainly can but as is the
case generally with all dynamic malware

70
00:05:51,080 --> 00:05:56,060
analysis you'll be missing a lot of
details the only way to truly know the

71
00:05:56,060 --> 00:06:01,789
full extent of confiscated script
capabilities through DRP station in

72
00:06:01,789 --> 00:06:06,889
static analysis extracting indicators of
compromise in determining possible

73
00:06:06,889 --> 00:06:11,840
sources or attribution is definitely
much easier if a script has been the

74
00:06:11,840 --> 00:06:14,840
obvious cute

75
00:06:15,529 --> 00:06:20,239
ok so the application goals our primary
goal when it comes to the office getting

76
00:06:20,239 --> 00:06:25,188
scripts is obtaining real understanding
of code the code to be four first and

77
00:06:25,189 --> 00:06:31,009
foremost readable by humans want to
easily be able to obtain context about

78
00:06:31,009 --> 00:06:36,019
the purpose of the code and how it's
being used and we also want to decide

79
00:06:36,019 --> 00:06:39,139
for the control data flow so we can
manually trace through the code and fit

80
00:06:39,139 --> 00:06:45,709
the puzzle pieces altogether arm and yet
what one other thing is the codes

81
00:06:45,709 --> 00:06:50,719
implication that's a bit that simply
want one of the main goals i would say

82
00:06:50,719 --> 00:06:56,599
is that wherever there are opportunities
for us to simplify something like we can

83
00:06:56,599 --> 00:06:59,719
definitely take it because ultimately
we're just trying to prison produce

84
00:06:59,719 --> 00:07:03,319
something that's logically equivalent to
the initial obviously a script but

85
00:07:03,319 --> 00:07:06,679
something that's a lot more easy to
understand by you

86
00:07:07,729 --> 00:07:12,769
ok so what do you need now that you've
actually determined that you need to

87
00:07:12,769 --> 00:07:15,589
date div scripts what tools you need

88
00:07:15,589 --> 00:07:20,089
well first off a virtual machine is an
absolute requirement because we handling

89
00:07:20,089 --> 00:07:25,009
what are thought to be malicious scripts
episode possess unknown capabilities and

90
00:07:25,009 --> 00:07:28,459
even the most cave careful engineer or
analyst is liable to accidentally

91
00:07:28,459 --> 00:07:34,639
execute a script in their environment
which could have you no unforeseen

92
00:07:34,639 --> 00:07:39,739
consequences sales hot so in isolated
and safe environment is a necessity

93
00:07:39,739 --> 00:07:44,808
second all you'll need a fully-featured
source code editor with language syntax

94
00:07:44,809 --> 00:07:48,529
highlighting function and variable
highlighting and robust find and replace

95
00:07:48,529 --> 00:07:53,269
feature so you know definitely not very
strict requirements there notepad plus

96
00:07:53,269 --> 00:08:00,619
plus definitely fits the bill for
everything see freely download the third

97
00:08:00,619 --> 00:08:03,919
thing you'll need of course is the
internet scripting language

98
00:08:03,919 --> 00:08:10,429
documentation examples are are
invaluable resources as obviously of

99
00:08:10,429 --> 00:08:16,698
scripts tend to use our language
features that are definitely either

100
00:08:16,699 --> 00:08:23,509
uncommon or potentially confusing as
part of their return to in reverse

101
00:08:23,509 --> 00:08:28,279
engineering testing online testing
frameworks are definitely very handy for

102
00:08:28,279 --> 00:08:29,000
evaluating

103
00:08:29,000 --> 00:08:33,500
smaller chunks of code that made more
difficult to carry out manually arm and

104
00:08:33,500 --> 00:08:38,299
of course more advanced cases will also
require debugger as we'll discuss in

105
00:08:38,299 --> 00:08:44,900
more detail later on so some general
tips before we get started there's no

106
00:08:44,900 --> 00:08:48,319
specific order steps you need to carry
out in order to properly be obviously a

107
00:08:48,320 --> 00:08:53,330
script it's a very nonlinear process
relies on intuition pattern section so

108
00:08:53,330 --> 00:08:56,690
you don't have to force yourself to go
from top to bottom or the beginning the

109
00:08:56,690 --> 00:09:01,340
control flow to the end of control flow
starting out you'll want to do this gate

110
00:09:01,340 --> 00:09:06,080
code sections that your eyes gravitate
towards and that are not overly

111
00:09:06,080 --> 00:09:10,100
convoluted you're picking off the
low-hanging fruit essentially the more

112
00:09:10,100 --> 00:09:13,610
sections your initially able to break
down the easier the overall the

113
00:09:13,610 --> 00:09:16,610
obfuscation process will be on you

114
00:09:20,240 --> 00:09:25,250
Cody uniformity is definitely very
crucial to the dr education process if

115
00:09:25,250 --> 00:09:28,730
UD obfuscating and writing out your
version of the code you want to take

116
00:09:28,730 --> 00:09:31,700
ownership of the code and employee
consistent coding conventions

117
00:09:31,700 --> 00:09:35,839
indentation you also want to standardize
and simplify how function calls are

118
00:09:35,839 --> 00:09:40,040
written where possible and how variables
are declared and defined understanding

119
00:09:40,040 --> 00:09:45,140
how any native scripting language
functions are used will also help for

120
00:09:45,140 --> 00:09:49,339
help to for the breakout script as you
replace these functions with the results

121
00:09:49,339 --> 00:09:50,390
were possible

122
00:09:50,390 --> 00:09:58,670
alright let's get started c so for
unused and garbage code first off you

123
00:09:58,670 --> 00:10:06,290
want to eliminate any of that we're it's
parent garbage code is definitely very

124
00:10:06,290 --> 00:10:10,849
easily determined by using both variable
and functional highlighting as well as

125
00:10:10,850 --> 00:10:16,820
defined functions provided by your text
editor choice any variables or functions

126
00:10:16,820 --> 00:10:19,940
that are not subsequently reference
elsewhere within the code can be coming

127
00:10:19,940 --> 00:10:27,290
out or removed quite easily so in this
simple piece of code we have about 30

128
00:10:27,290 --> 00:10:32,449
lines of you know but some of it looks
like junk but we can't really tell

129
00:10:32,990 --> 00:10:37,850
uh in in the same code of how i did one
variable and discovered that it

130
00:10:37,850 --> 00:10:43,310
is that it's not reference else or
within this routine I now if we assume

131
00:10:43,310 --> 00:10:48,050
that this is not a global variable
variable and it's not reference

132
00:10:48,050 --> 00:10:51,079
elsewhere within the code then we can
quickly remove it

133
00:10:52,100 --> 00:10:55,130
there are several other variables within
this function that also follow that same

134
00:10:55,130 --> 00:11:01,220
pattern of an integer plus the string
value of an integer and they also happen

135
00:11:01,220 --> 00:11:07,579
all happened to not be referencing you
anywhere else within the code so if we

136
00:11:07,579 --> 00:11:10,519
go ahead and remove these on US air
variables were left with a much cleaner

137
00:11:10,519 --> 00:11:17,089
and easier to look at supper to probably
the most commonly seen obfuscation

138
00:11:17,089 --> 00:11:22,490
technique and one that's you know
definitely the most prevalent i would

139
00:11:22,490 --> 00:11:26,930
say is the use of complicated variable
function names strings containing a

140
00:11:26,930 --> 00:11:30,800
combination of upper and lowercase
letters numbers and symbols are pretty

141
00:11:30,800 --> 00:11:34,550
difficult to look at internet and are
difficult to tell apart at first glance

142
00:11:35,209 --> 00:11:38,930
so the idea is here here is that we want
to replace them with more descriptive

143
00:11:38,930 --> 00:11:45,349
easier to digest names that our brains
can actually call for much quicker while

144
00:11:45,350 --> 00:11:49,130
you can use the final replace function
provided by editor on this case only be

145
00:11:49,130 --> 00:11:56,360
careful in order to avoid any sort of
issues that might come up with global

146
00:11:56,360 --> 00:12:01,279
versus local scope later on once you
actually have a better understanding of

147
00:12:01,279 --> 00:12:06,589
the purpose of a function or variable
you can go back and update their names

148
00:12:06,589 --> 00:12:11,029
to something a little more informative
like HTTP GET request or decoding orgy

149
00:12:11,029 --> 00:12:17,449
going back to the code we just removed
all the unnecessary variables from we

150
00:12:17,449 --> 00:12:22,279
can see we're left with several
complicated strings representing or

151
00:12:22,279 --> 00:12:27,949
labeling variables and functions so if
we go ahead with labeling the data flow

152
00:12:27,949 --> 00:12:32,060
becomes a little more clear of r1 will
contain the result of a creator dr. call

153
00:12:32,060 --> 00:12:37,489
and r1 is then subsequently used to
carry out a write function call with the

154
00:12:37,490 --> 00:12:45,740
data passed into the subroutine obscured
control flow is usually not evidence

155
00:12:45,740 --> 00:12:49,790
until much later in the obfuscation
process but what you're generally

156
00:12:49,790 --> 00:12:50,589
looking for

157
00:12:50,590 --> 00:12:57,280
his ways to simplify function calls so
that they're more direct for instance if

158
00:12:57,280 --> 00:13:01,390
you have one function that is called by
three different functions but each of

159
00:13:01,390 --> 00:13:06,160
those functions transform the input in
the exact same way and call the

160
00:13:06,160 --> 00:13:10,120
underlying function identically than
those three functions could be merged

161
00:13:10,120 --> 00:13:16,240
into one simple function function order
can also come into play as well if you

162
00:13:16,240 --> 00:13:19,360
think a more logical ordering of the
functions that matches up with the

163
00:13:19,360 --> 00:13:22,990
control flow that you've observed will
help you better understand the code then

164
00:13:22,990 --> 00:13:29,440
by all means rearrange the function
order so in this example we have

165
00:13:29,440 --> 00:13:34,270
fibroids subroutines after the
subroutines are defined there's initial

166
00:13:34,270 --> 00:13:38,140
call to sub 5 at the bottom line 21

167
00:13:38,830 --> 00:13:42,760
if you trace through the subroutines
you'll see that each one is called a

168
00:13:42,760 --> 00:13:47,200
long way but the ultimate subroutine
that is executed sub 2 so many calls

169
00:13:47,200 --> 00:13:51,280
outside of this code section to any of
these five subs will result in it

170
00:13:51,280 --> 00:13:55,360
ultimately in a call to sub 2 which
actually carries out in operation I've

171
00:13:55,360 --> 00:14:00,880
been calling another 17 thus we can
merge all these subroutines into one

172
00:14:00,880 --> 00:14:08,560
simple subroutine sub 2 and so any other
references to someone 345 could just be

173
00:14:08,560 --> 00:14:18,010
replaced with a reference to this to our
new well old sub arithmetic sequences

174
00:14:18,010 --> 00:14:23,680
when it comes to hard coded numeric
values obvious Gators may employees very

175
00:14:23,680 --> 00:14:27,760
simple arithmetic tooth workers
engineers other than doing the actual

176
00:14:27,760 --> 00:14:31,030
math it's certainly important to
research the exact behavior of the

177
00:14:31,030 --> 00:14:35,079
scripting language implementation of the
map mathematical functions that are used

178
00:14:35,080 --> 00:14:41,890
in this example a sequence of numbers
that are added and subtracted are passed

179
00:14:41,890 --> 00:14:46,510
into the SE character functions which
expects in it

180
00:14:46,510 --> 00:14:51,400
integer value in the asking range if you
do the actual math you'll find the 86 in

181
00:14:51,400 --> 00:14:55,930
the sequence cancel each other out in
sub-zero while the 9.5 out of 238 with

182
00:14:55,930 --> 00:14:59,109
three days pass into the character
function that results in a percent

183
00:15:00,990 --> 00:15:05,430
in this sample the first line in the
office can code initializes an array of

184
00:15:05,430 --> 00:15:09,779
3 double values the second line simply
sets a variable to the second element of

185
00:15:09,779 --> 00:15:14,939
the array which is 5,000 for 3 to the
third line uses the sine function which

186
00:15:14,940 --> 00:15:18,870
returns a 1 or negative 1 based on
whether or not the value supplied is

187
00:15:18,870 --> 00:15:22,320
positive or negative and the absolute
value function is also use at the end

188
00:15:22,320 --> 00:15:25,800
forbid in this direction the code can
ultimately be simplified to one or even

189
00:15:25,800 --> 00:15:30,990
two lines in the end and we'll know the
exact value that the last variable will

190
00:15:30,990 --> 00:15:38,070
be set to eventually ask for obfuscating
string values you want to simplify the

191
00:15:38,070 --> 00:15:42,360
use of any ascii character functions to
start with then eliminate any obvious no

192
00:15:42,360 --> 00:15:47,160
strings and then standardized strings
how strings are concatenated and merge

193
00:15:47,160 --> 00:15:53,730
together in a sub strings were possible
this line of code family relies on the

194
00:15:53,730 --> 00:15:59,070
server's vba function which you guessed
it versus a string the no strings

195
00:15:59,070 --> 00:16:02,430
contained within the function can be
eliminated right off the bat and once

196
00:16:02,430 --> 00:16:06,390
the screen is reverse independent to the
initial c-string were left with the blow

197
00:16:06,390 --> 00:16:10,350
result in that invokes a command shell
to run the command represented by the

198
00:16:10,350 --> 00:16:17,040
variable and ultimately terminate self
now here's the more common scenario seen

199
00:16:17,040 --> 00:16:21,899
in vba macros the macro in this case is
building windows batch file which will

200
00:16:21,899 --> 00:16:26,220
later be executed if we carry out the
string concatenation eliminate all the

201
00:16:26,220 --> 00:16:29,459
null strings and resolve a see
characters were left with a much clearer

202
00:16:29,459 --> 00:16:34,469
picture of the purpose of the batch file
as we can see the batch file will

203
00:16:34,470 --> 00:16:37,470
ultimately invoke a vbscript file
located the subdirectory of the current

204
00:16:37,470 --> 00:16:43,440
uses temporary okay so you tried
everything and your script is still up

205
00:16:43,440 --> 00:16:44,010
to skate

206
00:16:44,010 --> 00:16:49,860
you have no idea what else to do well in
this case you want to utilize a debugger

207
00:16:49,860 --> 00:16:54,300
and start doing some more dynamic
analysis our goal in this case is to

208
00:16:54,300 --> 00:16:58,740
circumvent the obfuscation and seek out
any sort of silver bullets in the form

209
00:16:58,740 --> 00:17:04,650
of eval functions or string decoding
your jeans going back to the resolve

210
00:17:04,650 --> 00:17:09,720
what you can first approached you might
also want to start out by commenting out

211
00:17:09,720 --> 00:17:14,680
code sections in order to help restrict
the program execution sidestep

212
00:17:14,680 --> 00:17:18,070
in situ and download functions may also
be necessary so those might need to be

213
00:17:18,069 --> 00:17:23,290
common it out as well and you know
definitely levers and bugger where you

214
00:17:23,290 --> 00:17:31,570
can uh so take princess in this example
of an opposite strip not sure how well

215
00:17:31,570 --> 00:17:35,740
you can see that but if you follow the
function that's highlighted in green you

216
00:17:35,740 --> 00:17:40,360
can see that's referred to several times
takes input 1 hexadecimal string in one

217
00:17:40,360 --> 00:17:45,100
alphanumeric string with varying leather
cases and returns a value based off the

218
00:17:45,100 --> 00:17:49,060
context in which the function is called
as part of a native scripting language

219
00:17:49,060 --> 00:17:54,820
function call in most cases the return
value is presumed to be a strain thus we

220
00:17:54,820 --> 00:17:59,110
can hypothesize that this function is a
simple string the coating routine and

221
00:17:59,110 --> 00:18:03,159
since we are using a bugger we don't
need to manually perform the decoding or

222
00:18:03,160 --> 00:18:06,910
reverse engineer all of its inner
workings we can simply set breakpoints

223
00:18:06,910 --> 00:18:10,420
before the function is called and prior
to the function being returned in order

224
00:18:10,420 --> 00:18:14,920
to resolve what the coded strings are
all right so you have to bear with me

225
00:18:14,920 --> 00:18:18,850
for this the obfuscation walkthrough and
completely redo this because everybody's

226
00:18:18,850 --> 00:18:24,820
been having problems with video today so
I had I went back and did a screen shots

227
00:18:24,820 --> 00:18:30,429
of doing the office location in my hotel
room like literally an hour ago

228
00:18:30,430 --> 00:18:40,150
ok so let's say you get something like
this dropped off at your desk or some

229
00:18:40,150 --> 00:18:45,430
macro just comes through your through
gmail embedded in a word document you

230
00:18:45,430 --> 00:18:48,250
extracted and you get something like
this what the hell do you do you know

231
00:18:48,250 --> 00:18:53,110
yet 76 lines of what appears to be
garbage some functions kind of stick out

232
00:18:53,110 --> 00:18:59,590
some donuts you know where to even start
so you can start with removing junk

233
00:18:59,590 --> 00:19:04,360
right so when the easiest thing to do is
go through and remove any sort of

234
00:19:04,360 --> 00:19:08,139
variables that aren't being reference
any sort of functions are being

235
00:19:08,140 --> 00:19:13,090
reference these are the easiest
variables that stick out that aren't

236
00:19:13,090 --> 00:19:18,340
being reference i'm definitely overdoing
the variable function syntax

237
00:19:18,340 --> 00:19:21,280
highlighting with a notepad plus plus

238
00:19:21,280 --> 00:19:26,110
so if i go through and eliminate those I
cut through about 15 lines of code or

239
00:19:26,110 --> 00:19:33,010
so things ready look a lot better but no
definite lot more work to go if we start

240
00:19:33,010 --> 00:19:40,210
to do a standardized the formatting
that's involved here things will become

241
00:19:40,210 --> 00:19:46,420
a little clearer after that this is more
just getting the invitation correct

242
00:19:46,420 --> 00:19:52,090
getting the center coding conventions to
kind of lineup and you know just making

243
00:19:52,090 --> 00:19:54,760
things a little more hunky-dory

244
00:19:54,760 --> 00:19:58,660
so that's you know initially with the
first 40 / 40 lines of code look like if

245
00:19:58,660 --> 00:20:06,580
we just you know get proper tabs in one
and rearranging function order that's

246
00:20:06,580 --> 00:20:13,570
something that appears to be no no
definitely like I'd say rice the top

247
00:20:13,570 --> 00:20:20,559
right way because once you look through
the different functions involved the the

248
00:20:20,559 --> 00:20:26,080
four subroutines at the top is able to
rearrange them because they're kind of

249
00:20:26,080 --> 00:20:31,090
split up in different sections within
the code in order to make it a little

250
00:20:31,090 --> 00:20:35,799
clearer by jamming them all together and
then I can kind of see that ultimately

251
00:20:35,799 --> 00:20:42,460
the result of any of these calls which
are automatically invokes when a word or

252
00:20:42,460 --> 00:20:49,540
whatever office application this macro
is embedded within arm will result in

253
00:20:49,540 --> 00:20:54,549
auto open auto underscore openwork open
one of those but ultimately they're

254
00:20:54,549 --> 00:21:01,840
calling that the subroutine online 17
right so i can take that and I can go

255
00:21:01,840 --> 00:21:06,639
through and merge all the functions
together right so all I need now is just

256
00:21:06,640 --> 00:21:11,500
a there's a initial auto open and then
that calls what appears to be made

257
00:21:11,500 --> 00:21:16,600
function so now i can go through and
started relatable some functions here

258
00:21:16,600 --> 00:21:22,418
and there I relabeled the the function
that's called bio open two main I went

259
00:21:22,419 --> 00:21:30,460
through and relabeled the one function
funk one and I relatable the subroutine

260
00:21:30,460 --> 00:21:34,360
right after that is someone so nothing
mind-blowing but you know just very

261
00:21:34,360 --> 00:21:38,709
simple things where you know the
dividends will pay off later on because

262
00:21:38,710 --> 00:21:39,700
like as you can see

263
00:21:39,700 --> 00:21:45,519
and whines 22 and 23 their invoking funk
one whereas it might not have been very

264
00:21:45,519 --> 00:21:50,320
apparent before just because of the mix
of you know complicated variable and

265
00:21:50,320 --> 00:21:52,510
function names are being used

266
00:21:52,510 --> 00:21:59,500
ok so now we can actually begin
simplifying right what we want to focus

267
00:21:59,500 --> 00:22:07,510
on is is in particular the main
subroutine and if we kinda already look

268
00:22:07,510 --> 00:22:12,370
like I've done some very simple string
concatenation in certain cases like

269
00:22:12,370 --> 00:22:19,090
online line 9i combined te and mp2
produced em I mean that's very apparent

270
00:22:19,090 --> 00:22:26,049
on if i should go through an online
seven collapse and merge together all

271
00:22:26,049 --> 00:22:27,220
these statements

272
00:22:27,220 --> 00:22:33,820
ultimately i get negative one that's all
that is attempt to produce so that's

273
00:22:33,820 --> 00:22:40,330
just doing the math and so the picture
picture begins to clear up right so i

274
00:22:40,330 --> 00:22:46,689
added the next one online 92 the a/c
character function to that value being

275
00:22:46,690 --> 00:22:54,220
passed in $YEAR so it's a character 101
that's being evaluated their arm i can i

276
00:22:54,220 --> 00:22:59,289
can start to see you know what what kind
of look like file pass start to take

277
00:22:59,289 --> 00:23:06,669
shape but it's still not quite clear if
i go a little further I can start to see

278
00:23:06,669 --> 00:23:15,429
that you have an exe an RTF extension
and the variable online 8i appears to be

279
00:23:15,429 --> 00:23:23,320
a path to the users temp directory now
if I go a little further with that yes

280
00:23:23,320 --> 00:23:28,000
there definitely file pass right so we
have to RTF documents and we have an

281
00:23:28,000 --> 00:23:31,600
executable is being referenced to and
they're all going to be located within

282
00:23:31,600 --> 00:23:37,449
the users temporary so we collapse
things a little bit more we label

283
00:23:37,450 --> 00:23:43,120
variables where we can and the
references later on in the code and this

284
00:23:43,120 --> 00:23:48,399
is what we're left with you know it's
definitely a lot clearer as to be intent

285
00:23:48,399 --> 00:23:51,320
at least the initial preamble within the
summer too

286
00:23:51,320 --> 00:23:56,419
I'm it but we can even go further right
so we see this createobject call on line

287
00:23:56,420 --> 00:24:03,500
fourteen right we're passing were . .
application right if we go through and

288
00:24:03,500 --> 00:24:07,880
relatable any services with that
two-word app object I it becomes clear

289
00:24:07,880 --> 00:24:15,410
that we're dealing with a no reference
to a newly spawned word.application that

290
00:24:15,410 --> 00:24:20,150
we're actually setting to false and then
we're opening the first RTF document

291
00:24:20,150 --> 00:24:28,130
that uh that's reference on line 7 now
you know later on that's going to be

292
00:24:28,130 --> 00:24:29,240
terminated

293
00:24:29,240 --> 00:24:36,290
then we know dereference that's a that
object and now we can proceed with

294
00:24:36,290 --> 00:24:39,800
renaming some other variables in these
are ones that are no further down the

295
00:24:39,800 --> 00:24:41,659
line right arm

296
00:24:41,660 --> 00:24:45,770
yeah this is more just going through and
just kind of doing some some bookkeeping

297
00:24:45,770 --> 00:24:53,570
getting some of those more obvious cated
strings and that we can do some also

298
00:24:53,570 --> 00:24:58,909
function relabeling based off the
context of what these other functions do

299
00:24:58,910 --> 00:25:05,180
right so we can quite clearly see on
line 25 that that's is calling me save

300
00:25:05,180 --> 00:25:11,750
as function so you know we can look back
and see how that's being used are the

301
00:25:11,750 --> 00:25:19,760
subroutine online 28 that's all that's
doing is just invoking the VA timer for

302
00:25:19,760 --> 00:25:24,770
just kind of you know essentially
initiating asleep and the function on

303
00:25:24,770 --> 00:25:29,600
line 36 that's just for launching a
command shell and passing command to it

304
00:25:29,600 --> 00:25:35,300
so we're done and actually pretty
straightforward right here's what the

305
00:25:35,300 --> 00:25:44,389
actual end result is so definitely a
little a little player but if we want to

306
00:25:44,390 --> 00:25:47,810
go down and kind of go through in order
the control flow

307
00:25:47,810 --> 00:25:53,810
uh we're saving a copy of the active
document of the current word document

308
00:25:53,810 --> 00:25:55,789
that's

309
00:25:55,789 --> 00:26:03,139
that's being referenced we're saving too
. copies that one called 32 dot RTF one

310
00:26:03,139 --> 00:26:06,289
called 311 . RTF our saving them to the
temp directory

311
00:26:07,580 --> 00:26:14,359
we're creating a new instance of
microsoft word that's going to be not

312
00:26:14,359 --> 00:26:19,279
visible and it's going to launch the
first are you haven't because I

313
00:26:19,279 --> 00:26:23,749
mentioned and we're gonna spawn a
command shell in order to launch the

314
00:26:23,749 --> 00:26:30,229
$TIME p.m. 3 dot exe executable that's
also located in the temporary and that's

315
00:26:30,229 --> 00:26:37,940
pretty much it so uh luckily for us
there are several tools to further

316
00:26:37,940 --> 00:26:43,369
assist us with the obvious getting
strips their tools such as a Maasai and

317
00:26:43,369 --> 00:26:48,709
Jason back that is him to automatically
produce Diaby skated versions of scripts

318
00:26:48,710 --> 00:26:54,139
with varying results there are plenty of
debuggers out there that get the job

319
00:26:54,139 --> 00:26:59,418
done for most most languages as well god
and there are also several online

320
00:26:59,419 --> 00:27:03,139
testing frameworks which are very many
can greatly speed up the obfuscation

321
00:27:03,139 --> 00:27:06,619
process so you don't even need to debug
your senses

322
00:27:09,289 --> 00:27:15,649
alright so to wrap things up in
conclusion script the obfuscation is

323
00:27:15,649 --> 00:27:21,678
very achievable uh your result should be
something is very simple and human

324
00:27:21,679 --> 00:27:27,349
readable that's that is first and
foremost logically equivalent to the

325
00:27:27,349 --> 00:27:32,330
original obfuscate script as part of the
process mean rely on your intuition to

326
00:27:32,330 --> 00:27:37,340
guide you and resolve smaller section of
code in order to drive context to how

327
00:27:37,340 --> 00:27:43,399
their use also removing extra code is
very helpful along the way and always be

328
00:27:43,399 --> 00:27:49,668
sure to consult the official scripting
language documentation we need alright

329
00:27:49,669 --> 00:27:52,669
thanks for listening

330
00:27:53,520 --> 00:28:00,180
any questions

331
00:28:06,090 --> 00:28:18,300
yeah i mean i like oh yeah he basically
was referencing any sort of automated

332
00:28:18,300 --> 00:28:22,860
office Gators in which ones i'd
recommend arm and like actually that's a

333
00:28:22,860 --> 00:28:26,790
pretty good question because like I know
for the most part i just did research on

334
00:28:26,790 --> 00:28:30,840
those and to see what's out there but
like I haven't really personally played

335
00:28:30,840 --> 00:28:34,169
around with them like Jason pack i feel
like i've used a few years ago and just

336
00:28:34,170 --> 00:28:38,640
never had a real success and most of the
other research that I didn't into

337
00:28:38,640 --> 00:28:44,610
automatic automatic deification is just
very tailored to specific obvious caters

338
00:28:44,610 --> 00:28:48,629
and it's just you know that it's it's
hard to find a silver bullet i think

339
00:28:48,630 --> 00:28:55,080
ultimately arm you know duty obfuscation
msi from what I've heard is is promising

340
00:28:55,080 --> 00:29:01,169
and how they can do you know essentially
runtime deification of a powershell

341
00:29:01,170 --> 00:29:04,260
scripts but haven't played around with
enough to be able to say one way or

342
00:29:04,260 --> 00:29:07,260
another it's good

343
00:29:15,840 --> 00:29:30,659
ah no I i have not come across those but
I mean I know it definitely seems like

344
00:29:30,660 --> 00:29:35,700
what's you know something that hasn't
been used in years is something that's

345
00:29:35,700 --> 00:29:41,970
definitely be right for you no more
common reuse I think it's just you know

346
00:29:41,970 --> 00:29:46,110
the more obscure the functions or
plugins whatever you have that's very

347
00:29:46,110 --> 00:29:54,689
game so yeah haven't specifically about
that in else write access

