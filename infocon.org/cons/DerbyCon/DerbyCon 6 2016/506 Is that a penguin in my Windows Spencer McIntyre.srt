1
00:00:00,000 --> 00:00:04,019
right blah i'm gonna go ahead and get
started

2
00:00:10,530 --> 00:00:13,980
there we go that way alright thanks
everyone my name is especially McIntyre

3
00:00:13,980 --> 00:00:16,800
and we talked about the windows
subsystem for linux today

4
00:00:16,800 --> 00:00:21,840
alright so we'll go over a little bit
about me and we'll go over what the

5
00:00:21,840 --> 00:00:25,320
windows subsystem for linux is awesome
the implementation details of how it

6
00:00:25,320 --> 00:00:29,400
works and then the attacker note so with
this talk i really want to take the

7
00:00:29,400 --> 00:00:32,549
approach of looking at it from two
aspects i want to provide information

8
00:00:32,549 --> 00:00:35,910
that may be useful for people that
really want to dive deep into the

9
00:00:35,910 --> 00:00:39,148
windows kernel one actually like no
house functioning people that might be

10
00:00:39,149 --> 00:00:41,520
interesting to exploit development
things of that nature

11
00:00:41,520 --> 00:00:45,120
I also on the other hand wanted to give
information that be useful for pen

12
00:00:45,120 --> 00:00:48,480
testers that way if you run across this
in an environment you know a little bit

13
00:00:48,480 --> 00:00:51,180
about it you know the types of
information that are applicable to you

14
00:00:51,180 --> 00:00:56,250
so hopefully when it's done you'll have
a you'll have that knowledge I just

15
00:00:56,250 --> 00:00:59,219
little bit about me my name is Spencer
bacteria on this is my third for time

16
00:00:59,219 --> 00:01:02,399
speaking at Derby come on really excited
to be here

17
00:01:02,399 --> 00:01:05,760
I were Christian the research innovation
apartment we do special projects on

18
00:01:05,760 --> 00:01:09,659
internal tool and vulnerability
development i work on a bunch of open

19
00:01:09,659 --> 00:01:13,170
source projects and I like to Windows
kernel things some stuff about me

20
00:01:13,770 --> 00:01:18,149
windows in Colonel so on the subsystem
for linux so what exactly it is it so it

21
00:01:18,150 --> 00:01:23,640
was Microsoft's initiative to allow the
native execution of x86 64 bit elf

22
00:01:23,640 --> 00:01:28,650
executables on windows so prior to 12
subsystem for linux coming out the only

23
00:01:28,650 --> 00:01:31,259
way you can do this would be you have to
utilize some sort of virtualization

24
00:01:31,259 --> 00:01:35,400
technology and so you have to that layer
in between where your FX cables running

25
00:01:35,400 --> 00:01:38,250
in the windows kernel you have like
you've been to some along those lines so

26
00:01:38,250 --> 00:01:43,290
there's a lot more overhead there so you
have a big performance increase so the

27
00:01:43,290 --> 00:01:48,060
wsl is not virtualization at all and so
because of that there's a huge enormous

28
00:01:48,060 --> 00:01:52,890
increase and what they have claimed is
that you get near-native execution times

29
00:01:52,890 --> 00:01:58,530
of the 64 bit of executable as if your
war on a full-blown linux system with

30
00:01:58,530 --> 00:02:02,939
comparable hardware capabilities as the
actual functionality is provided by two

31
00:02:02,939 --> 00:02:07,740
drivers that we talked a little bit more
a lot more about this DLX core and the

32
00:02:07,740 --> 00:02:10,889
LSS that army these two drivers are
providing this functionality

33
00:02:11,680 --> 00:02:14,620
this is Microsoft's diagram i did not
create this diagram this was on their

34
00:02:14,620 --> 00:02:18,400
blog I'm so there's credit down there
very Bob I don't make this this is how

35
00:02:18,400 --> 00:02:23,200
it actually gets started up so when you
actually going you run bash txt that's a

36
00:02:23,200 --> 00:02:26,589
portable executable and that's going to
communicate to the LX session management

37
00:02:26,590 --> 00:02:30,340
service that's running this thing going
to communicate down into the windows

38
00:02:30,340 --> 00:02:38,019
kernel and it's going to start up a new
instance of the LX on session for your

39
00:02:38,019 --> 00:02:41,469
particular user so that's an important
thing to know for an attackers

40
00:02:41,469 --> 00:02:45,370
perspective will get on in a little bit
is that one user is logged in and they

41
00:02:45,370 --> 00:02:50,859
start bash multiple times in multiple
CMG's all those are sharing the same

42
00:02:50,859 --> 00:02:56,950
environment so those are all interacting
it's only started once per when the user

43
00:02:56,950 --> 00:03:01,060
logs in and so when those the last of
those bash files at her

44
00:03:01,060 --> 00:03:04,900
bosch commands I've been run close out
that is when the session is then

45
00:03:04,900 --> 00:03:08,859
terminated so there's one regardless how
many instances bash that you're running

46
00:03:08,859 --> 00:03:10,959
so all shared

47
00:03:10,959 --> 00:03:14,109
I mean once the Alex Cora starts up it
starts up don't knit process and that's

48
00:03:14,109 --> 00:03:18,250
when the actual executable bash runs and
that's when you have all your access to

49
00:03:18,250 --> 00:03:22,449
like to realign library relations all
that native functionality that is linux

50
00:03:22,449 --> 00:03:27,099
users were used to having inside of our
passion environment so that those two

51
00:03:27,099 --> 00:03:32,828
drivers that just mentioned on the LSS
driver actually is is very very small

52
00:03:32,829 --> 00:03:36,669
there's not a whole lot of functionality
in there on the primary thing that it

53
00:03:36,669 --> 00:03:41,019
does is it cause the initialization LX
cordiality score is much much larger

54
00:03:41,019 --> 00:03:44,049
believe size-wise it's approximately 20
times larger

55
00:03:44,650 --> 00:03:48,310
it's where all of the assist calls are
implemented is where all the files of

56
00:03:48,310 --> 00:03:52,629
the filesystem logic is all implemented
that's all in LX core access to sort of

57
00:03:52,629 --> 00:03:56,918
the driver that sits on top of it though
and when alex s gets loaded by windows

58
00:03:56,919 --> 00:04:01,720
during the boot process it calls the
initialization in LX core which I starts

59
00:04:01,720 --> 00:04:04,720
up the driver object and that is what is
actually maintained but most of the

60
00:04:04,720 --> 00:04:07,478
functionality that you're going to be
dealing with this provided by alex is

61
00:04:07,479 --> 00:04:11,229
called things like that are all actually
implemented in LX core the much larger

62
00:04:11,229 --> 00:04:18,190
of the two drivers so there's a couple
of different ways that windows able to

63
00:04:18,190 --> 00:04:23,110
provide this functionality to to the
windows users will provide this linux

64
00:04:23,110 --> 00:04:25,240
functionality and a lot of these RV

65
00:04:25,240 --> 00:04:29,440
the the system calls that are utilized
as well as the filesystem sort of in

66
00:04:29,440 --> 00:04:33,580
linux everything on is not everything
but just about everything is accessible

67
00:04:33,580 --> 00:04:37,180
via file if you want to get Colonel
information there's a file you can read

68
00:04:37,180 --> 00:04:41,169
out about that if you want to know like
what address is a process hazards that

69
00:04:41,169 --> 00:04:45,460
there's finally can read about that like
proc file system as opposed to windows

70
00:04:45,460 --> 00:04:49,810
in Windows everything is is an object
and those objects are then accessed by

71
00:04:49,810 --> 00:04:52,930
the win32 API that Microsoft has exposed

72
00:04:52,930 --> 00:04:56,889
it's a pretty different architecture so
we're going to talk about the six calls

73
00:04:56,889 --> 00:05:00,909
that are actually supported by microsoft
to allow these executables to interact

74
00:05:00,909 --> 00:05:05,050
with the colonel as well as the file
systems but within the context of each

75
00:05:05,050 --> 00:05:09,580
one of the Linux processes that are
running these are not full-blown native

76
00:05:09,580 --> 00:05:13,810
windows processes these are actually
referred to as pico processes people

77
00:05:13,810 --> 00:05:18,849
processes are very lightweight small
container processes they've actually

78
00:05:18,849 --> 00:05:24,310
been around for awhile they will done as
and created as part of window of

79
00:05:24,310 --> 00:05:29,199
Microsoft's project robert which
intended to create a the capability for

80
00:05:29,199 --> 00:05:34,210
Microsoft to in the future utilize other
sorts of technologies i I've looked into

81
00:05:34,210 --> 00:05:38,739
it i cannot find another practical
application of where people processes

82
00:05:38,740 --> 00:05:42,610
are used to my knowledge of the wsl
system is the only place that people

83
00:05:42,610 --> 00:05:47,199
processes are actually used on but they
are there the container processes that

84
00:05:47,199 --> 00:05:52,180
do not have all of the overhead of a of
a windows process and the reason why is

85
00:05:52,180 --> 00:05:55,449
because these Linux processes that are
running they don't need to have NT dll

86
00:05:55,449 --> 00:05:58,360
available they're not be making any of
the windows system calls they don't have

87
00:05:58,360 --> 00:06:03,430
any of that I'm so this people process
is also limiting what an attacker can

88
00:06:03,430 --> 00:06:07,210
actually see about a linux process from
within the windows environment and vice

89
00:06:07,210 --> 00:06:08,138
versa

90
00:06:08,139 --> 00:06:11,889
yes like i mentioned one of the
important things that there's no pad tab

91
00:06:11,889 --> 00:06:17,349
and tll in addition to that the shared
region on of the user 32 the shared

92
00:06:17,349 --> 00:06:21,190
region that's map between the colonel
and the processes that on people they're

93
00:06:21,190 --> 00:06:24,940
familiar the colonel explication are
used to utilizing that region also is

94
00:06:24,940 --> 00:06:27,909
not map so it's not it's not available
because the learning process is

95
00:06:27,909 --> 00:06:31,750
presumably are not going to be utilizing
no legitimate Linux processes going to

96
00:06:31,750 --> 00:06:35,139
expect to be able to access up the
handle table information from Windows

97
00:06:35,139 --> 00:06:38,740
and Windows kernel does still provide

98
00:06:38,740 --> 00:06:41,830
I'd the scheduling functionality the
memory management things like that but

99
00:06:41,830 --> 00:06:44,258
the rest of of the process

100
00:06:44,259 --> 00:06:47,259
it's basically if you process the hollow
process

101
00:06:47,860 --> 00:06:52,419
I'm so the people process also get a
separate syscall dispatcher there is an

102
00:06:52,419 --> 00:06:56,590
additional six call dispatch there's
exactly one that is available on the

103
00:06:56,590 --> 00:07:01,448
system and when that LX SS driver and
the Alex core drivers are loaded they

104
00:07:01,449 --> 00:07:05,139
register themselves as a picot process
is called dispatchers so there are

105
00:07:05,139 --> 00:07:08,889
providers meaning that when the people
processes are actually started and the

106
00:07:08,889 --> 00:07:12,520
transition is made into Colonel land
because one of those of Linux processes

107
00:07:12,520 --> 00:07:17,109
is making a system call windows knows
that this is a picot process so it's

108
00:07:17,110 --> 00:07:21,550
going to route that system called to the
provider that is has registered itself

109
00:07:21,550 --> 00:07:27,970
as as the driver in this case can be LX
or so the system calls are the primary

110
00:07:27,970 --> 00:07:31,780
way by which all the Linux processes are
going to be able to interact with the

111
00:07:31,780 --> 00:07:36,758
host operating system as going to be
windows there is no linux kernel

112
00:07:36,759 --> 00:07:40,270
strictly speaking inside of Windows
Microsoft is claimed as a completely

113
00:07:40,270 --> 00:07:44,320
clean room implementation meaning that
all of the system calls that they

114
00:07:44,320 --> 00:07:48,789
support were written by them by looking
at the man pages during the prototypes

115
00:07:48,789 --> 00:07:51,639
are all set and things like that so
there's a couple of variations i will

116
00:07:51,639 --> 00:07:57,070
talk about the attack recession section
for fingerprinting but it's a clear was

117
00:07:57,070 --> 00:07:59,530
supposed to be a cleanroom
implementation so there's no linux

118
00:07:59,530 --> 00:08:03,250
kernel that is technically running into
it just appears that way to expose be

119
00:08:03,250 --> 00:08:06,880
the system calls so when i did my
analysis on one of the things i want to

120
00:08:06,880 --> 00:08:10,509
do is always know what all system calls
were actually supporting this is going

121
00:08:10,509 --> 00:08:14,199
to be one of the when the attack
surfaces that someone running inside of

122
00:08:14,199 --> 00:08:19,569
the linux container would have into the
windows environment so at the time they

123
00:08:19,569 --> 00:08:25,930
did this on this build 14 385 I'm I
compared the colonel that claim to be

124
00:08:25,930 --> 00:08:28,930
running the version of that Colonel to
the number of system calls that were in

125
00:08:28,930 --> 00:08:32,560
the linux kernel source tree for that
there are about sixty-three percent

126
00:08:32,559 --> 00:08:37,059
coverage of all this is calls that that
version of the links Colonel supported

127
00:08:37,059 --> 00:08:41,289
about sixty-three percent were offered
by a by Microsoft exposed to these

128
00:08:41,289 --> 00:08:45,790
binaries on someone's that were missing
read some of the the 32-bit equivalents

129
00:08:45,790 --> 00:08:48,670
I don't really know this i'm not much of
the linux kernel guy but actually build

130
00:08:48,670 --> 00:08:50,360
32-bit equivalents are the newer

131
00:08:50,360 --> 00:08:54,589
virgins a lot of us some of the older
system calls on linux are a 16-bit some

132
00:08:54,589 --> 00:08:57,920
of the newer 32-bit equivalents are some
of the ones that are actually missing

133
00:08:57,920 --> 00:09:02,120
presumably microsoft is still catching
up and they need to support more of

134
00:09:02,120 --> 00:09:06,529
these calls so as they continue to work
on and improve the ws else probably one

135
00:09:06,529 --> 00:09:10,070
of the areas where we can see that the
gap of that coverage shrink as they

136
00:09:10,070 --> 00:09:11,870
start to head and more

137
00:09:11,870 --> 00:09:17,029
ok so like I mentioned when a linux
process is running it's going to be this

138
00:09:17,029 --> 00:09:19,760
people process and when it needs to
communicate something to the colonel for

139
00:09:19,760 --> 00:09:24,319
example it needs to open a file create a
socket anything along those lines going

140
00:09:24,320 --> 00:09:28,459
to have to do that via system call and
so it's going to use its own ABI and

141
00:09:28,459 --> 00:09:34,040
it's going to make that transition into
the kernel and when the colonel is past

142
00:09:34,040 --> 00:09:37,849
the context is going to recognize the
fact that it is coming from the request

143
00:09:37,850 --> 00:09:40,100
is coming from a picot process and
you're gonna write that to the

144
00:09:40,100 --> 00:09:45,079
appropriate driver that's me that LX
core driver the syscall convention is

145
00:09:45,079 --> 00:09:50,180
utilized by linux binaries they follow
the system Davi which is a slightly

146
00:09:50,180 --> 00:09:53,930
different calling convention then what
Microsoft uses because there is no

147
00:09:53,930 --> 00:09:58,069
translation between this it is actually
the responsibility of the the pico

148
00:09:58,070 --> 00:10:02,990
system called dispatcher on to parse or
not possible utilize all the arguments

149
00:10:02,990 --> 00:10:06,380
in the native representation so it
doesn't matter the calling convention

150
00:10:06,380 --> 00:10:10,910
which is how I which is very important
instrumental and not having to change

151
00:10:10,910 --> 00:10:14,390
the linux binaries because they are
expecting to be able to make the system

152
00:10:14,390 --> 00:10:20,089
calls in the native linux convention
which is different than the microsoft

153
00:10:20,089 --> 00:10:23,839
once i'm so the calling convention is
slightly different four lengths they

154
00:10:23,839 --> 00:10:27,709
utilize a six of the registers as
opposed for on bitch much more akin to a

155
00:10:27,709 --> 00:10:32,660
a fast car to mention if you're used to
32-bit remainder of the arguments are

156
00:10:32,660 --> 00:10:36,050
stored on the stack this is important so
if you are going through in your debug

157
00:10:36,050 --> 00:10:39,290
you wanted the system calls you need to
remember that even though you're in

158
00:10:39,290 --> 00:10:42,469
windy bugger that they're calling
convention was actually from the system

159
00:10:42,470 --> 00:10:45,800
Davi not from Microsoft's calling
convention

160
00:10:45,800 --> 00:10:52,250
alright so moving beyond the system
calls there are other file systems that

161
00:10:52,250 --> 00:10:57,620
Microsoft has exposed to these expire so
there are two main file systems that are

162
00:10:57,620 --> 00:11:02,149
utilized one is the root file system
where you have your HTC directory

163
00:11:03,050 --> 00:11:07,550
there's home directory all of all of
that information the second is on the

164
00:11:07,550 --> 00:11:13,160
drive file system which is how the Linux
processes can access all of the the root

165
00:11:13,160 --> 00:11:16,160
of the windows drive so in your drive
file system you're going to have your c

166
00:11:16,160 --> 00:11:20,630
drive and everything beyond that you're
going to be able to have accessible from

167
00:11:20,630 --> 00:11:25,279
the links processes on so there's a
couple other the standard process uh see

168
00:11:25,279 --> 00:11:28,670
any file systems the practice file
system so you can get basic information

169
00:11:28,670 --> 00:11:31,279
if you needed to find like every match
things like that but these are the two

170
00:11:31,279 --> 00:11:35,870
primary file systems that allow access
to be able to read files off of it

171
00:11:35,870 --> 00:11:38,570
one of the things i found very
interesting through this implementation

172
00:11:38,570 --> 00:11:44,600
is that because the linux binaries that
are running have access to the full root

173
00:11:44,600 --> 00:11:45,350
of the drive

174
00:11:45,350 --> 00:11:48,709
barring any permission issues that will
talk about the the attacker section

175
00:11:48,709 --> 00:11:54,829
linux has access to read all of the
files off of the root filesystem the

176
00:11:54,829 --> 00:12:00,019
reverse is not entirely correct you're
not according to Microsoft documentation

177
00:12:00,019 --> 00:12:03,709
you're not able to read the files in
like the ECC director anything like that

178
00:12:03,709 --> 00:12:07,790
so presumably anti-religious not be able
to scan that was kind of interesting to

179
00:12:07,790 --> 00:12:11,959
you could potentially hide a file within
the linux file systems now that's

180
00:12:11,959 --> 00:12:15,020
according to the documentation i did
however find a small discrepancy and

181
00:12:15,020 --> 00:12:18,800
that's because within the windows user
that is running the wsl environment

182
00:12:18,800 --> 00:12:22,250
within their home directory in their app
data some of the Linux files that are

183
00:12:22,250 --> 00:12:26,899
created do exist there so strictly
speaking from Microsoft documentation I

184
00:12:26,899 --> 00:12:31,130
i don't know why that discrepancy is
there but i want to point it out soon

185
00:12:31,130 --> 00:12:34,250
you've seen that tyrion haha excellent

186
00:12:34,250 --> 00:12:37,459
there we go I'm not crazy let it be
known

187
00:12:37,459 --> 00:12:43,160
alright so the drive file system on
despite being rude if you are starting

188
00:12:43,160 --> 00:12:47,089
up your wsl environment you elevate
yourself into rude on one of the first

189
00:12:47,089 --> 00:12:50,209
things that think I was like oh like
let's just drop in MLS file and go get

190
00:12:50,209 --> 00:12:52,910
some access we'll be able to break out
of the windows environment

191
00:12:52,910 --> 00:12:56,899
wouldn't that be great unfortunately
doesn't work that way and the reason why

192
00:12:56,899 --> 00:13:00,290
it doesn't work that way is that one of
the things I'm really be harping on

193
00:13:00,290 --> 00:13:03,380
throughout the remainder of this
presentation is really doesn't mean

194
00:13:03,380 --> 00:13:07,790
anything in the wsl context doesn't get
you anything when you elevate yourself

195
00:13:07,790 --> 00:13:13,219
from pseudo into to root level access
the token that is the permissions of

196
00:13:13,220 --> 00:13:16,819
your Pico process that those don't
change and so when you are

197
00:13:16,819 --> 00:13:21,949
making your system calls on a lot of the
system calls are actually provided on my

198
00:13:21,949 --> 00:13:26,660
windows when there's an applicable one
that can be utilized over some of the

199
00:13:26,660 --> 00:13:30,079
other ones i cant and are then filled by
the links Corp forgot to mention that

200
00:13:30,079 --> 00:13:35,269
but the process no system calls that are
actually implemented on by windows

201
00:13:35,269 --> 00:13:38,779
utilizing the existing infrastructure
those are so going to utilize the native

202
00:13:38,779 --> 00:13:41,509
token and things like that when you
elevate yourself to route that token

203
00:13:41,509 --> 00:13:45,079
doesn't change it really doesn't mean
anything to the greater Windows host

204
00:13:45,079 --> 00:13:48,919
operating system is strictly within your
wsl environment you can like read access

205
00:13:48,919 --> 00:13:52,459
the shadow file that's great for you but
unfortunately that's not even shared

206
00:13:52,459 --> 00:13:57,289
within other users wsl environment so
elevating yourself too rude not really

207
00:13:57,289 --> 00:14:00,229
gonna be the best way to do anything

208
00:14:00,229 --> 00:14:05,299
alright so this is just a real quick
demonstration of showing that so this

209
00:14:05,299 --> 00:14:08,959
could potentially be a hiccup for users
that aren't necessarily used to to

210
00:14:08,959 --> 00:14:11,959
working in this type of environment so
if you're in the wsl environment and you

211
00:14:11,959 --> 00:14:14,238
have a sensitive file and you want to
protect it

212
00:14:14,239 --> 00:14:19,100
maybe you would mark it as owned by root
and only readable by rear but truly i

213
00:14:19,100 --> 00:14:22,999
can do a whole lot for you on so in this
case we're putting a super-secret onto a

214
00:14:22,999 --> 00:14:27,439
secret text file which oman eating it
and we're taking a look at making sure

215
00:14:27,439 --> 00:14:31,699
the toe McMahon actually did execute
successfully but then we take a look at

216
00:14:31,699 --> 00:14:37,069
it the file permissions are still 777 so
might be a hiccup for some users so

217
00:14:37,069 --> 00:14:40,639
point being if your pen tester on it
would probably be a little bit

218
00:14:40,639 --> 00:14:44,959
advantageous to look for file
permissions within the dr.s because you

219
00:14:44,959 --> 00:14:46,399
may you may get lucky

220
00:14:46,399 --> 00:14:49,789
so I context right into our attacker
knows I'm going a little bit quickly

221
00:14:49,789 --> 00:14:54,259
here trying to manage my time
appropriately so one of the first things

222
00:14:54,259 --> 00:14:58,999
that you probably want to do is like if
you're an attacker pentester you're in a

223
00:14:58,999 --> 00:15:01,999
Windows environment you know they're
running Windows 10 maybe they have wsl

224
00:15:01,999 --> 00:15:06,979
you won't be able to identify am I in
wsl I went into this thinking it'd

225
00:15:06,979 --> 00:15:10,220
probably be really difficult turns out
actually ridiculously easy you can

226
00:15:10,220 --> 00:15:14,720
pretty easily identify that the linux
session the linux session that you're on

227
00:15:14,720 --> 00:15:19,579
is actually uh is actually windows have
a couple of obvious ones and i want to

228
00:15:19,579 --> 00:15:23,149
break these out into obvious and
behavioral because if Microsoft Word to

229
00:15:23,149 --> 00:15:26,869
change them they're probably change the
obvious one son my personal appearance

230
00:15:26,869 --> 00:15:29,550
opinion and experience the less likely
change idea that

231
00:15:29,550 --> 00:15:32,790
behavior once but within the obvious
ones there's actually it says microsoft

232
00:15:32,790 --> 00:15:37,529
in the product version i highly doubt
any like legitimately into distribution

233
00:15:37,529 --> 00:15:41,519
is going to actually have microsoft and
they're just check for the dr mounted in

234
00:15:41,519 --> 00:15:46,170
the / mount directory so like I said
that dr s is going to have / mount / c /

235
00:15:46,170 --> 00:15:49,529
mount / d you have to drive things like
that if you're looking in there you're

236
00:15:49,529 --> 00:15:53,519
probably going to have on those drives
more interesting one to be some of the

237
00:15:53,519 --> 00:15:57,510
behavioral clues on Silva's exactly one
module that can float up into the system

238
00:15:57,510 --> 00:16:01,649
modules which seems kind of a little bit
sketchy from normal linux users

239
00:16:01,649 --> 00:16:05,760
perspective is that you know that you're
probably have a few loaded kernel module

240
00:16:05,760 --> 00:16:08,610
running you need to have drivers and
like that i'm running through on my

241
00:16:08,610 --> 00:16:11,730
system i need to add like a wireless
driver our graph display driver there's

242
00:16:11,730 --> 00:16:15,480
a number of drivers that are loaded on
my system to to be in an environment

243
00:16:15,480 --> 00:16:19,290
where claims that only one kernel
modules loaded it's pretty indicative

244
00:16:19,290 --> 00:16:24,329
that something is something is going
wrong in the proc file system that

245
00:16:24,329 --> 00:16:28,199
releases in her exposed information
regarding the running processes there

246
00:16:28,200 --> 00:16:31,200
are missing fields that are entirely
implemented this could change my

247
00:16:31,200 --> 00:16:36,690
microsoft as they improve their support
they're probably going to on expand on

248
00:16:36,690 --> 00:16:41,970
the proc file systems now price changes
well another one that I found very

249
00:16:41,970 --> 00:16:45,660
interesting this last one is actually my
favorite i ran across this was testing

250
00:16:45,660 --> 00:16:51,270
one of the metasploit of halos and
that's actually on the checks on the

251
00:16:51,270 --> 00:16:57,810
nmap system call are actually much more
strict so in that third argument where

252
00:16:57,810 --> 00:17:02,729
you're supposed to specify some of the
some of the flags on on Linux you can

253
00:17:02,730 --> 00:17:07,020
specify all any of the flags that are
defined and you specify additional facts

254
00:17:07,020 --> 00:17:10,559
that are undefined it just it just
ignores that they don't do anything on

255
00:17:10,559 --> 00:17:15,720
Windows however if you specify flag that
is undefined to the M map system call it

256
00:17:15,720 --> 00:17:21,030
will return an error so you can have the
exact same function with this extra 0 x

257
00:17:21,030 --> 00:17:25,800
1000 that's an undefined flag and
that'll run successfully on linux but on

258
00:17:25,800 --> 00:17:28,800
Windows it'll turn there's that's kind
of interesting behavior including that's

259
00:17:28,800 --> 00:17:32,909
actually because of the implementation
that Microsoft used for that system call

260
00:17:34,040 --> 00:17:37,820
so I'm like is mentioned i found that
was looking through some medicine

261
00:17:37,820 --> 00:17:41,179
playlist so another thing that I assumed
a lot of investors be very interesting

262
00:17:41,180 --> 00:17:45,590
as like if I'm looking at a wsl
environment what payload options do I

263
00:17:45,590 --> 00:17:47,449
have which one is that these are going
to work

264
00:17:47,450 --> 00:17:51,170
I'm so up here in the right the right
are gonna be the payloads that actually

265
00:17:51,170 --> 00:17:55,160
tried in which one of them were
unsuccessful so there's the brand-new on

266
00:17:55,160 --> 00:17:58,340
metal payload don't know if anybody
follows of medical development because

267
00:17:58,340 --> 00:18:02,810
it's really cool payload that is like
the future of the linux meterpreter I'm

268
00:18:02,810 --> 00:18:06,740
system that one unfortunately did not
work and the reason why was exactly

269
00:18:06,740 --> 00:18:11,870
because of this map system called they
may be changing it in the future version

270
00:18:11,870 --> 00:18:16,489
on but because medical aid has a
preference towards wanting to keep the

271
00:18:16,490 --> 00:18:20,150
shellcode much smaller it would expand
the size out a little bit more to clean

272
00:18:20,150 --> 00:18:24,740
up the arguments on so just kind of
fluke that I was found but it actually

273
00:18:24,740 --> 00:18:30,080
is in that particular stage or that why
that payload is not working on the shell

274
00:18:30,080 --> 00:18:35,659
the unstaged she'll reverse tcp worked
correctly on the x86 up meterpreter

275
00:18:35,660 --> 00:18:41,150
reverse tcp does not on and that's
because it's the x86 version microsoft

276
00:18:41,150 --> 00:18:45,920
the wsl project is intended to run
64-bit binaries and because of that

277
00:18:45,920 --> 00:18:51,410
32-bit lxq balls are not are not support
you can't run a 32 bit of executable in

278
00:18:51,410 --> 00:18:56,420
wsl at this point on normal full-blown
linux distributions you can run 32-bit

279
00:18:56,420 --> 00:19:00,230
bynars like I could run out 286
interpreter on my floor system please

280
00:19:00,230 --> 00:19:05,060
don't do that but you could do that on
wsl it is very much focused on like just

281
00:19:05,060 --> 00:19:09,440
the just 64 bit and last not least my
personal favorite the Python interpreter

282
00:19:09,440 --> 00:19:15,650
does work on fully-featured for the most
part on slide caveat to that but you get

283
00:19:15,650 --> 00:19:19,550
your session back you can interact with
it you can you can run commands on this

284
00:19:19,550 --> 00:19:23,000
presumably because the installation that
python that included in the linux

285
00:19:23,000 --> 00:19:27,050
standard base is present in the wsl
environment she can utilize the Python

286
00:19:27,050 --> 00:19:32,030
interpreter I say that it is mostly
supported and that's because on at the

287
00:19:32,030 --> 00:19:34,790
time I testing i believe it's probably
another one of the things that Microsoft

288
00:19:34,790 --> 00:19:40,159
is going to eventually change very soon
is the ifconfig man was not entirely

289
00:19:40,160 --> 00:19:44,840
sport you get errors out of that I'm and
so retrieving IP addresses and things

290
00:19:44,840 --> 00:19:47,120
like that utilizing the functionality
that the Python

291
00:19:47,120 --> 00:19:50,989
actually does it by interacting those
files on the expose the information to

292
00:19:50,990 --> 00:19:55,309
the colonel on that information was not
entirely available so you'll have

293
00:19:55,309 --> 00:19:58,910
trouble with your right trying to
retrieve the IP addresses like the eye

294
00:19:58,910 --> 00:20:02,150
of commitment but most of everything
else work while you can get a shell you

295
00:20:02,150 --> 00:20:06,470
upload download files on believe you can
route through it so all that good stuff

296
00:20:07,190 --> 00:20:11,750
additionally might be interested in what
up the clinic's Colonel protections are

297
00:20:11,750 --> 00:20:15,890
available since we know that there's not
a linux kernel actually running in there

298
00:20:15,890 --> 00:20:18,559
so what types of protections are
actually provided by the linux kernel

299
00:20:18,559 --> 00:20:23,149
you have things like data execution
prevention or depth you have a SLR no

300
00:20:23,150 --> 00:20:26,809
page mapping things like that i tested
all three of these the very basic

301
00:20:26,809 --> 00:20:32,000
implementations on and they are all
they're all implemented specifically

302
00:20:32,000 --> 00:20:36,530
when it comes to is LR believe the
reason why this was actually implemented

303
00:20:36,530 --> 00:20:41,030
is because the functions necessary to
allocate the memory are some of the

304
00:20:41,030 --> 00:20:46,399
functions that are already available in
the windows api so the system call in LX

305
00:20:46,400 --> 00:20:50,300
core is not the filling it in cell it's
forwarding those onto the windows

306
00:20:50,300 --> 00:20:53,690
implementation so all the function
features function is actually there is

307
00:20:53,690 --> 00:20:59,630
being leveraged ok so cross process
access so if you are in a minute process

308
00:20:59,630 --> 00:21:03,500
what can you get from a windows process
and vice versus the types of things you

309
00:21:03,500 --> 00:21:09,500
need to break out of the environment of
so from linux process you can't access

310
00:21:09,500 --> 00:21:12,590
the windows processes this is
unfortunate because windows once again

311
00:21:12,590 --> 00:21:16,129
provides access to this processes as
objects that are accessible through the

312
00:21:16,130 --> 00:21:21,470
win32 API that you can access from the
linux environment windows however can

313
00:21:21,470 --> 00:21:26,630
list Linux processes if you load up in
proc explore you'll see a bunch of Linux

314
00:21:26,630 --> 00:21:31,070
processes you're in bash your Python all
those things are all listed out as a

315
00:21:31,070 --> 00:21:35,659
child processes of the unit process the
kids do not do not match up as you would

316
00:21:35,660 --> 00:21:39,380
expect the lower number of kids are in
the linux environment so this process

317
00:21:39,380 --> 00:21:42,830
identifier is don't match up from what
you're seeing in the windows environment

318
00:21:42,830 --> 00:21:51,860
one of the things that you actually can
do is you can access d from windows you

319
00:21:51,860 --> 00:21:56,719
can access a ham slide ahead you're
actually so I covered on all that run

320
00:21:56,720 --> 00:22:00,740
behind a little bit i'm from windows
into links so you can access very

321
00:22:00,740 --> 00:22:05,330
minimal amount of information I'm so
windows allows access to the process

322
00:22:05,330 --> 00:22:09,080
given through to api for objects like i
just mentioned so the way you do that is

323
00:22:09,080 --> 00:22:12,919
actually utilizing the open process
function and you pass in the different

324
00:22:12,920 --> 00:22:18,380
arguments on that provide the level of
access that you need to it according to

325
00:22:18,380 --> 00:22:22,400
the Microsoft documentation on you're
not supposed to be able to use the

326
00:22:22,400 --> 00:22:25,550
process query limited information
however when I did in my testing i was

327
00:22:25,550 --> 00:22:28,970
able to use the process query limited
information get basic information that

328
00:22:28,970 --> 00:22:33,800
the pico process on because it is a
picot process though you cannot do

329
00:22:33,800 --> 00:22:38,629
things like open it with the ability to
read and write memory you can't create a

330
00:22:38,630 --> 00:22:42,560
thread you can't do all those things
that you could for a normal full windows

331
00:22:42,560 --> 00:22:46,700
managed on process which can use in
query limited information which

332
00:22:46,700 --> 00:22:51,080
basically allows you to check the exit
code when the process exit and you can

333
00:22:51,080 --> 00:22:55,820
call the synchronize meaning that you
can wait for that process to exit on so

334
00:22:55,820 --> 00:23:01,159
this is slightly interesting because as
us linux users know in linux the exit

335
00:23:01,160 --> 00:23:05,630
code of processes is actually somewhat
important there's a standard list of

336
00:23:05,630 --> 00:23:09,620
Mexico's that mean different things so
from the windows environment you could

337
00:23:09,620 --> 00:23:13,760
find a running process theoretically
wait for to exit and extract information

338
00:23:13,760 --> 00:23:19,820
out of that for you so you can get
information out on steelo eight bits of

339
00:23:19,820 --> 00:23:24,260
the windows status code corresponding
vertices meet it's the 2nd by that

340
00:23:24,260 --> 00:23:28,610
allows you just have to be shipped over
8 times you can get that on the exit

341
00:23:28,610 --> 00:23:31,760
code from from the linux process

342
00:23:31,760 --> 00:23:36,200
alright elected mission across user
access so if you have multiple users

343
00:23:36,200 --> 00:23:40,160
running within the wsl environment so
specific to each one of the users so you

344
00:23:40,160 --> 00:23:44,420
can't actually access each other's files
the file systems are our independent

345
00:23:44,420 --> 00:23:49,550
when i check this actually 11 user
starts it up it has to download a large

346
00:23:49,550 --> 00:23:52,610
amount of data from Microsoft to have
all like the Linux files and everything

347
00:23:52,610 --> 00:23:55,760
and when you go over to another user
despite the fact that one user had

348
00:23:55,760 --> 00:23:59,900
already done that they have to download
it all as well so those file systems are

349
00:23:59,900 --> 00:24:04,100
our independent unfortunately if you get
root level access than one wsl

350
00:24:04,100 --> 00:24:07,159
environment you're not going to be able
to extract the other user shadow file

351
00:24:07,160 --> 00:24:12,890
and that is meet i'm saying that i am up
i think that's about it well there's our

352
00:24:12,890 --> 00:24:17,030
my closing thoughts like I said route
really doesn't mean anything on some of

353
00:24:17,030 --> 00:24:21,620
these nuances are trying to trip up new
users I'm so i got this really sweet

354
00:24:21,620 --> 00:24:24,439
desktop because I signed up for the
windows insider program in order to be

355
00:24:24,440 --> 00:24:28,850
able to test all this cool ninja cat I'm
and those are my references

356
00:24:28,850 --> 00:24:29,330
thank you everyone

