1
00:00:00,000 --> 00:01:02,879
I'll guess I'll as a primer there yet
and we're gonna have that as I get

2
00:01:02,879 --> 00:01:32,158
closer not all right all right Kevin can
you hear me

3
00:01:32,159 --> 00:01:38,579
oh yeah that works alright today first
of all I'm Adam Compton Austen Lane were

4
00:01:38,579 --> 00:01:45,119
corrected 70 day jobs but i still hear
from that but still today we're going to

5
00:01:45,119 --> 00:01:50,100
be talking about automated in testing
tool kit and in testing automation along

6
00:01:50,100 --> 00:01:54,960
the way along with that before we get
started with much

7
00:01:54,960 --> 00:01:59,789
Who am I everybody has the obligatory
with my slides so Who am I had a father

8
00:01:59,790 --> 00:02:06,509
my husband hillbilly birth and raising
pen tester for most of my professional

9
00:02:06,509 --> 00:02:11,129
life good trained as a programmer been
doing that off and on over my life as

10
00:02:11,129 --> 00:02:12,090
well hello

11
00:02:12,090 --> 00:02:17,879
love it all wouldn't give any of it up i
love my children and my wife as well of

12
00:02:17,879 --> 00:02:21,239
course doesn't know i love my mom i love
them all

13
00:02:21,239 --> 00:02:27,360
they're up here somewhere so everyone my
name is austin Lane this is my first

14
00:02:27,360 --> 00:02:30,420
talk so bear with me

15
00:02:30,420 --> 00:02:35,309
alright um i spent about seven years as
a developer making horrible insecure

16
00:02:35,310 --> 00:02:38,819
stuff and then I switched over to
security and spent the last four years

17
00:02:38,819 --> 00:02:41,819
Breaking all that stuff so it's been
pretty exciting

18
00:02:42,390 --> 00:02:47,790
not quite as long as Adam but you know
it's been a lot of fun so I'm really

19
00:02:47,790 --> 00:02:49,410
excited to be here

20
00:02:49,410 --> 00:02:54,750
yeah i'm working on a beard up so like I
said here today we're talking about

21
00:02:54,750 --> 00:03:00,540
automation a pen testing our tool the
automated in automated testing tool kit

22
00:03:00,540 --> 00:03:06,810
basically in our experiences pen testers
we found that most tests sort of go

23
00:03:06,810 --> 00:03:13,560
through a routine there's you know the
the Recon discovery finding out what's

24
00:03:13,560 --> 00:03:18,389
on the network that you're looking at
testing simple services you know there's

25
00:03:18,389 --> 00:03:22,319
things you do for ftp there's things you
do for SMB there's things you do for

26
00:03:22,319 --> 00:03:24,958
netbios stuff like that

27
00:03:24,959 --> 00:03:30,180
default credits you're running lists you
know you're going through app appliances

28
00:03:30,180 --> 00:03:34,889
that have admin admin or something like
that you moved to common exploits

29
00:03:34,889 --> 00:03:40,260
amyloidosis seven things like that that
will get you access to a machine once

30
00:03:40,260 --> 00:03:44,489
you get access to start dumping credit
info you know using many cats something

31
00:03:44,489 --> 00:03:48,480
like that to pull info off of the
machine and then turn around and use

32
00:03:48,480 --> 00:03:53,910
that as a pivot to get it further access
into the network what we found is this

33
00:03:53,910 --> 00:03:58,290
routine can be slow on large networks
you know the bigger the network the more

34
00:03:58,290 --> 00:04:01,980
instances beach service you're going to
have the more of each of these that

35
00:04:01,980 --> 00:04:05,280
you're going to have to go through and
say okay and honest anonymous at admin

36
00:04:05,280 --> 00:04:08,010
admin stuff like that on every single
one of them

37
00:04:08,010 --> 00:04:12,899
um what we found is most of this can be
automated linux in general and a lot of

38
00:04:12,900 --> 00:04:14,940
other tools have some great stuff

39
00:04:14,940 --> 00:04:16,930
bosch Python Perl Ruby

40
00:04:16,930 --> 00:04:21,699
no anything you wanted to do to run some
of these automatically but in each

41
00:04:21,699 --> 00:04:25,449
instance you know you're running your
own things you're having to to come up

42
00:04:25,449 --> 00:04:30,490
with quickbooks crap bash script to you
know do the same task over and over

43
00:04:30,490 --> 00:04:34,600
again and then dumped all of that into a
file that you can review so we wrote a

44
00:04:34,600 --> 00:04:42,910
tool to help with the automation this is
apt to UM so let's go through sort of a

45
00:04:42,910 --> 00:04:47,949
tip typical pentest routine generally
start off with nmap you're scanning all

46
00:04:47,949 --> 00:04:51,789
the ports your clients giving you 1000 /
8 so you're gonna be there all day

47
00:04:51,789 --> 00:04:56,229
looking at everything that's running on
this giant network when you get the

48
00:04:56,229 --> 00:05:00,820
results back you go through and you say
ok I see port 21 so i'm going to run ftp

49
00:05:00,820 --> 00:05:04,240
against this and I'm going to look for
things like an anonymous FTP or you know

50
00:05:04,240 --> 00:05:09,729
what's on being hosted on these ftp
servers i see port 80 or 443 through and

51
00:05:09,729 --> 00:05:14,560
I'm gonna take screenshots of all the
websites that are there on here to see

52
00:05:14,560 --> 00:05:17,710
you know are these custom sites are
these appliances that are hosting these

53
00:05:17,710 --> 00:05:22,989
services i'm going to run something like
nikto maybe that looks for like oh this

54
00:05:22,990 --> 00:05:28,090
is a vulnerable CMS you know so you can
use this against this 1s else can if

55
00:05:28,090 --> 00:05:31,299
it's 443 you're gonna see like what
versions of SLO they're running because

56
00:05:31,300 --> 00:05:34,659
you know you know it's good for the
reports and you might actually be able

57
00:05:34,659 --> 00:05:37,659
to do something with like heart heart
bleed or something like that

58
00:05:38,229 --> 00:05:42,340
445 SMB there's a whole bunch of stuff
you can do on that Knoll enumeration

59
00:05:42,340 --> 00:05:48,429
open shares msoe 267 if the client is
really lazy and the list goes on

60
00:05:48,940 --> 00:05:54,280
um then you run responder you do you
capture some hashes you do some real a

61
00:05:54,280 --> 00:05:58,599
attacks and you know basically at that
point you've got access because it

62
00:05:58,599 --> 00:06:03,310
always gets you access and at the end of
the day you take over you you've

63
00:06:03,310 --> 00:06:08,229
obtained your goal you you've gotten
access to what is that your client you

64
00:06:08,229 --> 00:06:13,570
know is deemed important enough that you
know you've you're successful you you're

65
00:06:13,570 --> 00:06:16,780
on the domain controller your duck going
through their database getting credit

66
00:06:16,780 --> 00:06:21,219
card information you know you you've got
their domain admin credentials etc

67
00:06:23,650 --> 00:06:25,750
Thank You Austin

68
00:06:25,750 --> 00:06:32,740
so like allison is a necessary endured
and test methodology not mythology but a

69
00:06:32,740 --> 00:06:37,210
standard routine you go through for the
beginning with the way through main very

70
00:06:37,210 --> 00:06:43,599
manual process for the most part that it
works it works everybody does it to some

71
00:06:43,600 --> 00:06:47,950
degree some fashion everybody was on the
same thing is it broken

72
00:06:48,490 --> 00:06:52,540
well if it's not broken should we be
fixing it well the thing is is it is

73
00:06:52,540 --> 00:06:59,350
slightly flawed if you want to say that
way in that it relies on the human for

74
00:06:59,350 --> 00:07:04,270
much of it and it's humans doing
monotonous repetitive actions over and

75
00:07:04,270 --> 00:07:07,990
over humans tend to get a little sloppy
over time especially if you're doing the

76
00:07:07,990 --> 00:07:15,400
same task a lot so getting into that
manual pot processes parsing through all

77
00:07:15,400 --> 00:07:17,919
that data can be a little slow

78
00:07:17,919 --> 00:07:21,010
you might get a little slap happy if
you're doing this for like 12 hours a

79
00:07:21,010 --> 00:07:24,550
day or if it's like two in the morning
for heaven's sake of the customers

80
00:07:24,550 --> 00:07:28,060
making you do a nighttime test or
something like that you might plants /

81
00:07:28,060 --> 00:07:31,810
ass over something that you should be
looking at and not flag on it

82
00:07:32,620 --> 00:07:38,169
consistency are you checking every
single service instance on the network

83
00:07:38,169 --> 00:07:41,500
for the same test I'll that or you just
sampling things of that nature

84
00:07:41,500 --> 00:07:49,780
repeatability same concept it's also
like if i do engagement with targeting

85
00:07:49,780 --> 00:07:53,770
customer that every has a student
engagement i do a test for them every

86
00:07:53,770 --> 00:07:56,320
six months i do the first one

87
00:07:56,320 --> 00:08:01,450
awesome does the 16 months from now so
forth is my method of my base

88
00:08:01,450 --> 00:08:03,370
methodology the same as his

89
00:08:03,370 --> 00:08:07,540
yes but is he gonna go through testing
at the same way you're not probably not

90
00:08:07,540 --> 00:08:10,540
maybe for majority of it

91
00:08:11,110 --> 00:08:15,640
ok so there's some discrepancy between
our methodologies there's some of the

92
00:08:15,640 --> 00:08:20,080
repeatability from the customer's point
of view things of that nature there

93
00:08:20,080 --> 00:08:25,210
again it I realize on the human your
experience things of that nature so it

94
00:08:25,210 --> 00:08:28,630
is slightly flawed not necessarily
broken

95
00:08:29,169 --> 00:08:35,049
well we can fix a lot of the underlying
aspects of this some of it we can tweak

96
00:08:35,049 --> 00:08:36,630
things of that nature

97
00:08:36,630 --> 00:08:41,189
and in particular automation can help
with a lot of this thus were talking

98
00:08:41,190 --> 00:08:46,920
about automation and intestine but still
so you might ask why don't you just use

99
00:08:46,920 --> 00:08:51,540
insert favorite monolithic vulnerability
scanning engine

100
00:08:52,140 --> 00:08:59,189
well you can you can but there's certain
issues that certain good things for

101
00:08:59,190 --> 00:09:02,160
example some of the good things are
there's a good number of them to choose

102
00:09:02,160 --> 00:09:07,829
from open source commercial some of them
are fairly cheap some of them are free

103
00:09:09,150 --> 00:09:14,130
they're fairly useful and very useful in
some scenarios but maybe not in all for

104
00:09:14,130 --> 00:09:19,439
example you have you find the world's
best web application scanner that's

105
00:09:19,440 --> 00:09:25,080
great but that doesn't really happy on
other types of testing or you find

106
00:09:25,080 --> 00:09:29,760
something that's really good on one type
of testing it has lapses and other kinds

107
00:09:29,760 --> 00:09:34,620
of so you're not going to find anything
that covers everything perfectly and I'm

108
00:09:34,620 --> 00:09:41,160
not gonna say that apt does either but
it gives a good base to plug things in

109
00:09:41,160 --> 00:09:43,199
as your topic will talk about it later

110
00:09:43,200 --> 00:09:47,850
well why not just use one of these large
scanners to begin with

111
00:09:47,850 --> 00:09:54,870
well while some of them are cheap some
of them can be fairly it spins of ya

112
00:09:54,870 --> 00:10:00,060
believe that someone can be fairly yet
expensive some of them can be fairly

113
00:10:00,060 --> 00:10:07,140
resource-intensive i present my power up
one of these nice of on scanners on my

114
00:10:07,140 --> 00:10:08,010
laptop here

115
00:10:08,010 --> 00:10:12,270
this happens to be fairly be if you want
you can handle it in a vm co-processing

116
00:10:12,270 --> 00:10:16,500
might not be able to fire up too many
other VMS on here it's eating up most of

117
00:10:16,500 --> 00:10:19,860
my ram processor things of that nature
so okay

118
00:10:20,460 --> 00:10:25,200
it kind of ties my hands a little bit on
that but more importantly you get down

119
00:10:25,200 --> 00:10:29,880
to let's say you want to add a new check
or a new test or a new tool or something

120
00:10:29,880 --> 00:10:36,000
to that big monolithic thing how easy is
it in almost every case it's going to be

121
00:10:36,000 --> 00:10:37,590
fairly difficult

122
00:10:37,590 --> 00:10:40,740
yeah they might have a bug reporting
bored or something like that but that

123
00:10:40,740 --> 00:10:46,770
might take weeks months so forth down
the road for get fixed or get added in

124
00:10:46,770 --> 00:10:49,770
or things of that nature

125
00:10:50,410 --> 00:10:55,540
as we're talking with apt later on we'll
show how easy it is or what discuss how

126
00:10:55,540 --> 00:10:58,569
easy it is just add your own tool and
they're your own command your own

127
00:10:58,569 --> 00:11:04,389
updates things of that nature so there
again i'm not saying that in these big

128
00:11:04,389 --> 00:11:06,220
vulnerability scanning engines are bad

129
00:11:06,220 --> 00:11:10,180
by no means am I saying that I'm just
saying that they're good for what

130
00:11:10,180 --> 00:11:14,709
they're targeting we're looking for
something a little more Universal in

131
00:11:14,709 --> 00:11:17,529
there a lot of this

132
00:11:17,529 --> 00:11:22,089
ok so you want to get something a little
more broad spectrum look at some other

133
00:11:22,089 --> 00:11:26,800
things those out there who have used
Kelly which should be probably every

134
00:11:26,800 --> 00:11:30,189
single one of you out there for the most
part i would be willing to guess you re

135
00:11:30,189 --> 00:11:33,910
where that most of the tools that you're
going to be using on an engagement

136
00:11:33,910 --> 00:11:37,540
things of that nature you'll probably
find in cali might not be the absolute

137
00:11:37,540 --> 00:11:42,339
latest version or you might have to add
a one or two tools and therefore most

138
00:11:42,339 --> 00:11:48,069
part there's quite a few in there and as
a basis we tend to use Kelly as well so

139
00:11:48,069 --> 00:11:52,329
we build tools on top of it things of
that nature is not required but still we

140
00:11:52,329 --> 00:11:53,649
do so

141
00:11:53,649 --> 00:11:57,670
so you want to automate some stuff as a
awesome mentioned before there's lots of

142
00:11:57,670 --> 00:12:00,939
different ways you have bash you have
any of your scripting languages things

143
00:12:00,939 --> 00:12:05,560
of that but also remind a lot of these
other tools have their own API

144
00:12:05,560 --> 00:12:09,910
interfaces things of that nature lot of
vulnerability scanners have restful api

145
00:12:09,910 --> 00:12:14,560
is that you interface with metasploit
has the msgr pc interface you can use

146
00:12:14,560 --> 00:12:18,189
any number of other things and if you
told isn't it

147
00:12:18,189 --> 00:12:24,370
insert port why doesn't have a kind of
interface you can give you actual output

148
00:12:24,370 --> 00:12:28,689
of some kind of you can parse you can
script around that takes a little bit of

149
00:12:28,689 --> 00:12:33,550
regs and parsing well manipulation but
you can do it just a matter of how much

150
00:12:33,550 --> 00:12:41,319
you're willing to make the data fit the
model that you want so we went through a

151
00:12:41,319 --> 00:12:43,689
lot of that process got it going

152
00:12:43,689 --> 00:12:47,889
took care of a lot of the base work get
it up we have several modules in there

153
00:12:47,889 --> 00:12:53,019
at the moment and we're pretty happy
with what we have so far and it's hope

154
00:12:53,019 --> 00:13:00,639
grow a lot more but we ended up writing
apt to the little aside yes I know apt

155
00:13:00,639 --> 00:13:02,380
to is a weird acronyms that

156
00:13:02,380 --> 00:13:08,560
that is just it's my habit of making
tools after common acronym is that i

157
00:13:08,560 --> 00:13:13,959
like to make fun of so sorry about that
but yeah I have other ones out there you

158
00:13:13,960 --> 00:13:20,470
can find them but so what is apt to it
is a Python program that is basic has

159
00:13:20,470 --> 00:13:25,810
built around three basic bubbles of
parts first last one of them is the

160
00:13:25,810 --> 00:13:30,550
knowledge base where every piece of data
that is gathered process store things

161
00:13:30,550 --> 00:13:34,689
that is stored in its a in just a
knowledge base at the moment

162
00:13:34,690 --> 00:13:39,490
generic knowledgebase no real relevance
there that's the red safe and so forth

163
00:13:39,490 --> 00:13:45,250
any other you think you which says when
certain actions should be run with that

164
00:13:45,250 --> 00:13:49,180
other one shouldn't be water
preconditions and postconditions it's

165
00:13:49,180 --> 00:13:54,310
the real brain of the operation there
near the modules modules are the same as

166
00:13:54,310 --> 00:14:01,270
they are in any other large program it's
like motorsport modules your plugins for

167
00:14:01,270 --> 00:14:07,420
in maps whatever it's the modules for
apt what they can be there very atomic

168
00:14:07,420 --> 00:14:13,750
they have they perform small actions
they have preconditions postconditions

169
00:14:13,750 --> 00:14:15,190
things of that nature

170
00:14:15,190 --> 00:14:19,720
awesome we'll be talking about that more
in a moment take another step down it

171
00:14:19,720 --> 00:14:26,230
right now it's based you can put
multiple inputs right now the primary

172
00:14:26,230 --> 00:14:30,400
input that we have written up for
calling from is just in map almost

173
00:14:30,400 --> 00:14:33,340
everybody uses in map at some point
during their engagement typically near

174
00:14:33,340 --> 00:14:37,570
the beginning so close in map it can
parse out the output build-up invent

175
00:14:37,570 --> 00:14:45,490
tree things of that nature of the event
. it was in all the data from in map

176
00:14:45,490 --> 00:14:50,320
pulls it out by hose port service any
other data that might be an in map and

177
00:14:50,320 --> 00:14:53,860
any other tool there is put in the
knowledge base in the process it built

178
00:14:53,860 --> 00:15:01,300
at the event tree or event list for the
bank you to process the next one where I

179
00:15:01,300 --> 00:15:05,800
at once it's built out then it goes
through pops off the top of the event

180
00:15:05,800 --> 00:15:06,430
queue

181
00:15:06,430 --> 00:15:11,680
that's ok what's the first action first
event ok which modules are listening for

182
00:15:11,680 --> 00:15:15,150
this as a precondition ok you three are
fine go pro

183
00:15:15,150 --> 00:15:19,770
test with it and then it goes to the
second one third one fourth one so forth

184
00:15:20,700 --> 00:15:27,960
however that's fine that works but what
if a module has some output that can

185
00:15:27,960 --> 00:15:32,460
cause another event that's fine module
is not only can consume events but they

186
00:15:32,460 --> 00:15:36,630
can produce new events for other modules
that might be listening for them

187
00:15:36,630 --> 00:15:42,000
this is great for scenarios where you
might have something like one event is

188
00:15:42,000 --> 00:15:48,120
found you port 445 ok there's a module
listening for that it takes it checks to

189
00:15:48,120 --> 00:15:49,410
see if there's more sessions

190
00:15:49,410 --> 00:15:53,100
ok it finds that there's no sessions on
that particular instance it fires in

191
00:15:53,100 --> 00:15:57,660
advancing more sessions found on this
host another module not catch and got

192
00:15:57,660 --> 00:16:01,980
great you have no sessions there let me
try to do user enumeration it as user

193
00:16:01,980 --> 00:16:06,660
numeration if it's successful because he
found new users on this network a go do

194
00:16:06,660 --> 00:16:09,780
something there's might be other modules
that are listening for that kind of N

195
00:16:09,780 --> 00:16:11,280
and do other things

196
00:16:11,280 --> 00:16:16,319
it's not always a linear path it my
grandchild for Angie an inn way and

197
00:16:16,320 --> 00:16:21,030
branching things of that nature and it's
very dynamic at any point when you sit

198
00:16:21,030 --> 00:16:26,370
down at a network there's not a real way
to know which modules are going to be

199
00:16:26,370 --> 00:16:30,120
run in what order at what time on the
network based on the way the event he

200
00:16:30,120 --> 00:16:37,800
works and then processes keeps looping
and looping until they think you reaches

201
00:16:37,800 --> 00:16:42,599
zero that I think you can grow and
shrink as time goes on as other modules

202
00:16:42,600 --> 00:16:49,410
create new events into events and so
forth that is much detail into that as

203
00:16:49,410 --> 00:16:53,670
you probably need to know at this point
about means if you're interested later

204
00:16:53,670 --> 00:16:58,260
check out the code look at it help to us
but we'll get into other small aspects

205
00:16:58,260 --> 00:16:59,340
of that in a moment

206
00:16:59,340 --> 00:17:05,579
so yeah this apt tools out there that
can do things for you how does it help

207
00:17:06,300 --> 00:17:11,310
well helps with the right now the simple
aspects of your engagement is that first

208
00:17:11,310 --> 00:17:14,129
footstep on the network what are you
looking to do

209
00:17:14,130 --> 00:17:18,450
are you it'll go out it'll do
fingerprinting it'll go out check your

210
00:17:18,450 --> 00:17:23,760
anonymous login or check more sessions
they don't do some simple attacks things

211
00:17:23,760 --> 00:17:25,790
of this nature does all kind of look

212
00:17:25,790 --> 00:17:30,980
things right now all the way through
responder secret stoppers up things like

213
00:17:30,980 --> 00:17:33,500
that the more common things are scripted
up already

214
00:17:33,500 --> 00:17:38,510
more to come but it does it in a very
efficient quick manner and it does it

215
00:17:38,510 --> 00:17:43,460
much quicker than what I as a human
could get in there and doing that type

216
00:17:43,460 --> 00:17:47,630
in executed things like that no matter
how many session windows i have opened i

217
00:17:47,630 --> 00:17:51,380
might have eternal as I have I just
can't type that fast it can do it a lot

218
00:17:51,380 --> 00:17:58,220
faster also to add a new module two is
fairly straightforward they're getting

219
00:17:58,220 --> 00:18:02,840
talk about the actual anatomy of a
module here a little bit but it boils

220
00:18:02,840 --> 00:18:06,590
down to you have some metadata at the
top that describes what the module is

221
00:18:06,590 --> 00:18:11,780
and then little bit of other maintenance
stuff and then finally just the body

222
00:18:11,780 --> 00:18:16,760
that says run a command and process the
output of that command so ultimately

223
00:18:16,760 --> 00:18:22,160
you're just trying to write a parser for
any given command and solid python

224
00:18:22,160 --> 00:18:26,660
fairly straightforward lots of their
already to take a look at fairly simple

225
00:18:26,660 --> 00:18:31,610
to write if you're running this on
Callie it's fairly ready to go right off

226
00:18:31,610 --> 00:18:36,949
the bat one or two Python libraries that
need to be installed so well documented

227
00:18:36,950 --> 00:18:41,450
no issues there you clone it run it and
it you're up and going

228
00:18:41,990 --> 00:18:49,130
you can feed it a input right now of an
in map file xml file or a target range

229
00:18:49,130 --> 00:18:55,700
and it will go run in that Lori in your
box way so just quick little run down

230
00:18:55,700 --> 00:19:00,290
before I hand off to Austin here what
can it do can right now it can go and

231
00:19:00,290 --> 00:19:06,590
identify services system screenshot
whatever any user interface items seized

232
00:19:06,590 --> 00:19:12,350
GUI interface whether it's x11 VNC
webapps things of that nature finds file

233
00:19:12,350 --> 00:19:15,230
shares on the network can gain access

234
00:19:15,230 --> 00:19:19,400
yes ok fine search through there look
for interesting files and report on them

235
00:19:20,000 --> 00:19:23,840
oh you found a accounts on this is that
we have username look let's try to

236
00:19:23,840 --> 00:19:27,830
brute-force those touch on that later
with the safety levels remember remember

237
00:19:27,830 --> 00:19:32,419
that if we encounter scenario that
there's a Metasploit module that can

238
00:19:32,420 --> 00:19:36,890
help run our test or something great run
the Metasploit module definitely make

239
00:19:36,890 --> 00:19:38,140
you said these other two

240
00:19:38,140 --> 00:19:43,090
was that are out there that's what we're
going for it captures hashes fine take

241
00:19:43,090 --> 00:19:47,080
it and dump it off to jon or has cat or
whatever-related crack them go forth

242
00:19:47,080 --> 00:19:54,040
boils down to if there's this a file or
command command a binary that you want

243
00:19:54,040 --> 00:19:57,970
to run on an engagement from right now
and linux environment you can probably

244
00:19:57,970 --> 00:20:02,410
write a module forward fairly simply
you're not having the right to do the

245
00:20:02,410 --> 00:20:06,670
action you're just writing to execute
the command and parts the output and

246
00:20:06,670 --> 00:20:12,400
teach it and have it so that other
programs consuming at which point I hand

247
00:20:12,400 --> 00:20:14,080
off to Austin

248
00:20:14,080 --> 00:20:20,770
ok so like we mentioned earlier apt to
is a framework it's got a couple

249
00:20:20,770 --> 00:20:24,670
different sections the guts of which are
the modules and we've mentioned it a few

250
00:20:24,670 --> 00:20:28,210
times there are three basic types of
modules

251
00:20:28,210 --> 00:20:32,290
the first is the input 1 this is
something that will take the input file

252
00:20:32,290 --> 00:20:37,899
say right now an nmap xml file parse it
out and and determine what hosting

253
00:20:37,900 --> 00:20:42,700
services available that it can run on
the second type of module is a reporting

254
00:20:42,700 --> 00:20:46,690
module this is at the end of end of
everything else has run it's going to go

255
00:20:46,690 --> 00:20:50,050
back through the knowledge base and
basically iterate through it and for

256
00:20:50,050 --> 00:20:56,500
example generate a semi nice-looking
HTML file that lists out all the hosts

257
00:20:56,500 --> 00:21:00,310
all the services on each of those hosts
many domains they're attached to any

258
00:21:00,310 --> 00:21:04,929
vulnerabilities found for each of these
and the links to the output for that so

259
00:21:04,930 --> 00:21:08,170
you can basically just go through this
and see everything that was run

260
00:21:08,170 --> 00:21:13,480
everything that was found anything
relevant to each of these hosts the

261
00:21:13,480 --> 00:21:18,850
third and most important module i think
is the action module this is what each

262
00:21:18,850 --> 00:21:25,419
each program that would like to run any
binary any command goes inside an action

263
00:21:25,420 --> 00:21:29,140
module and it gets called upon from the
event queue

264
00:21:30,130 --> 00:21:34,870
it's got a few standard properties name
description or pretty self-evident that

265
00:21:34,870 --> 00:21:39,459
what what is the name of the commands
can be run in this module description

266
00:21:39,460 --> 00:21:42,940
helps you know is this going to run

267
00:21:42,940 --> 00:21:46,930
us too and discovery mode just to
identify something or is this going to

268
00:21:46,930 --> 00:21:50,800
run some sort of expert mode to actually
like try to create a you know a shell on

269
00:21:50,800 --> 00:21:52,990
the machine or take advantage of it

270
00:21:52,990 --> 00:21:57,910
requirements this is typically the name
of the application that this module is

271
00:21:57,910 --> 00:22:02,020
going to run so if you're trying to run
it make a dirt Buster module you would

272
00:22:02,020 --> 00:22:06,670
say the requirements derby and then when
apt to is run it will load up this

273
00:22:06,670 --> 00:22:10,120
module and try to execute that and see
if that's actually existing on the

274
00:22:10,120 --> 00:22:13,330
system it's not you get a warning the
beginning saying hey you're missing this

275
00:22:13,990 --> 00:22:19,120
you might want to go install it if you
are planning on running this module

276
00:22:19,120 --> 00:22:24,790
during the test for things like Python
libraries you can also make them a

277
00:22:24,790 --> 00:22:30,430
little more descriptive so whereas with
you know a binary you can typically run

278
00:22:30,430 --> 00:22:34,120
apt-get to install it on here maybe a
python library someone has a preferred

279
00:22:34,120 --> 00:22:38,530
method of doing it you can you can put
that in there you can say hey try

280
00:22:38,530 --> 00:22:43,149
running pip install and the library that
you need you know and that comes up as a

281
00:22:43,150 --> 00:22:46,480
nice helpful message for someone who
hasn't installed that library on their

282
00:22:46,480 --> 00:22:47,380
machine

283
00:22:47,380 --> 00:22:53,770
next up is the triggers this is what's
going to actually this module is going

284
00:22:53,770 --> 00:23:00,580
to be looking for this condition for it
to run so anytime a new services found

285
00:23:00,580 --> 00:23:05,530
the trigger new port 21 new port 445
that gets thrown up in the air and then

286
00:23:05,530 --> 00:23:08,080
any module that response to that says
that's me

287
00:23:08,080 --> 00:23:15,280
add me to the q anytime module runs and
it says well I found you know this thing

288
00:23:15,280 --> 00:23:21,760
is vulnerable to anonymous login or this
has no liberation or I found credentials

289
00:23:21,760 --> 00:23:25,360
it's going to throw up a new event there
and any module that is triggered off of

290
00:23:25,360 --> 00:23:29,830
that says up let me add me to the q
those requirements are basically what

291
00:23:29,830 --> 00:23:34,000
allows us to not only make this dynamic
but chain multi multiple modules

292
00:23:34,000 --> 00:23:40,090
together and five him off in in sequence
so that you are you get pretty good

293
00:23:40,090 --> 00:23:45,790
depth on what's going to run as this
thing progressive one of the most

294
00:23:45,790 --> 00:23:48,520
important things in here is the safety
level we've added this in because

295
00:23:48,520 --> 00:23:52,990
there's definitely there are certain
things that you want to run but not all

296
00:23:52,990 --> 00:23:53,600
the time

297
00:23:53,600 --> 00:23:57,289
and depending on what networking running
on there are some things you never want

298
00:23:57,289 --> 00:24:03,260
to run so we've basically giving a scale
of one to five 5 is the safest this is

299
00:24:03,260 --> 00:24:08,929
discovery modules this is things like
you know something like eating for Linux

300
00:24:08,929 --> 00:24:13,460
you can just see does this happen all
sessions this is something like uh-uh

301
00:24:14,360 --> 00:24:18,439
HTTP screenshot is is you know just go
on take a picture of whatever is on the

302
00:24:18,440 --> 00:24:24,380
web server moving down in the middle so
for you might start doing more things

303
00:24:24,380 --> 00:24:27,409
that interact with servers three is
where you start getting into things like

304
00:24:27,409 --> 00:24:31,400
that's where we put responder so this is
something that might start doing things

305
00:24:31,400 --> 00:24:34,880
that interferes with network requests
and so you'll want to run this for a

306
00:24:34,880 --> 00:24:39,020
limited amount of time you maybe you
don't want to run this at all so you're

307
00:24:39,020 --> 00:24:44,270
not going to go down that far for is
when you get down into brute forcing the

308
00:24:44,270 --> 00:24:48,408
I'm we put it put it there so that you
know if there's sorry going back out to

309
00:24:48,409 --> 00:24:51,980
going the other way to is when you get
into things like brute-forcing where

310
00:24:51,980 --> 00:24:54,710
there's risk of locking out accounts and
things like that that could be

311
00:24:54,710 --> 00:24:59,990
disruptive to the client on a bigger
level here and finally one is things

312
00:24:59,990 --> 00:25:03,260
where there is very real risk of just
and kicking over the server something

313
00:25:03,260 --> 00:25:06,919
like ms 0806 seven where like if you're
trying to use it there's a real chance

314
00:25:06,919 --> 00:25:10,549
that you know it could just kill that
service altogether and nobody can use it

315
00:25:10,549 --> 00:25:15,799
anymore so you know the safety levels
are there to make sure that you know

316
00:25:15,799 --> 00:25:20,299
it's only as destructive as you wanted
to be and for the most part if you run

317
00:25:20,299 --> 00:25:24,350
it out for you know you can get a good
amount of the modules in and get things

318
00:25:24,350 --> 00:25:29,719
you need done without worrying about
anybody getting mad at you inside the

319
00:25:29,720 --> 00:25:34,190
module basically processes where
everything happens the event you will

320
00:25:34,190 --> 00:25:40,070
call process process in turn does things
like you know you can have it you know

321
00:25:40,070 --> 00:25:45,379
grab any targets related to a specific
quarter service or domain or whatever

322
00:25:45,380 --> 00:25:49,460
from the knowledge base and bring that
back as a list and then you can you know

323
00:25:49,460 --> 00:25:54,289
act on them however you want either run
a command against an individual list and

324
00:25:54,289 --> 00:25:58,580
run a single command against all of them
it depends on what to welcome and you're

325
00:25:58,580 --> 00:26:00,919
going for

326
00:26:00,920 --> 00:26:07,040
limitations of the modules and and the
framework itself the first one and kind

327
00:26:07,040 --> 00:26:10,100
of one of the biggest ones the tool
needs to be non-interactive the way

328
00:26:10,100 --> 00:26:14,419
we've made this is is more or less to
fire-and-forget until the results come

329
00:26:14,420 --> 00:26:22,040
back if a tool is prompting you for a
yes or no input or to add something onto

330
00:26:22,040 --> 00:26:26,210
and middle of it you know the way this
runs its going to fire it off and then

331
00:26:26,210 --> 00:26:29,630
that prompt is going to get stuck there
and then when the results come back

332
00:26:29,630 --> 00:26:34,820
that's all you're going to see are we
most of the models written so far have

333
00:26:34,820 --> 00:26:38,810
been ones where you can simply say you
know here's the tool named in the IP

334
00:26:38,810 --> 00:26:39,740
address

335
00:26:39,740 --> 00:26:47,000
go wait whatever timeout we give it
generally you can give it you know on

336
00:26:47,000 --> 00:26:50,390
the high end 15 minutes at most of them
will be bit be done well before that

337
00:26:50,390 --> 00:26:54,530
something like responder we give it 15
minutes and then we just kill it at that

338
00:26:54,530 --> 00:26:58,940
point and then see what is found in that
amount of time but those are things that

339
00:26:58,940 --> 00:27:05,510
you you aren't required to do anything
to in the meantime to get meaningful

340
00:27:05,510 --> 00:27:08,390
results back

341
00:27:08,390 --> 00:27:15,230
multithreading is tricky we basically
had it's real easy real fast to clog up

342
00:27:15,230 --> 00:27:18,980
the network with a whole bunch of stuff
running at once so we've set limits

343
00:27:18,980 --> 00:27:22,610
throughout we've got limits to the
number of threads that can be run at

344
00:27:22,610 --> 00:27:27,020
once and we've got limits to the number
of threads i think can be created for

345
00:27:27,020 --> 00:27:31,010
anyone tool so something like responder
you only want one of them running at

346
00:27:31,010 --> 00:27:34,280
once you don't want five instances of
responder trying to poison all the

347
00:27:34,280 --> 00:27:37,430
requests on the network at the same time
because then that's just gonna get messy

348
00:27:37,430 --> 00:27:41,690
but there's plenty of others where you
know the computer is perfectly happy

349
00:27:41,690 --> 00:27:44,510
running ten instances of the same
application it was just on different

350
00:27:44,510 --> 00:27:53,600
hosts so it's sort of a module by module
basis and in you know at that point sort

351
00:27:53,600 --> 00:27:57,230
of down to whoever's writing that module
to use their best judgment on what they

352
00:27:57,230 --> 00:28:04,130
think given Network can handle and what
we try to do is just make it easy to

353
00:28:04,130 --> 00:28:10,640
implement these limits for whatever the
case may be and finally brute force with

354
00:28:10,640 --> 00:28:11,330
caution

355
00:28:11,330 --> 00:28:14,480
there's plenty of tools out there that
do all kinds of reinforcing for

356
00:28:14,480 --> 00:28:20,750
you know a number of logins you the best
we can do is add a safety level to that

357
00:28:20,750 --> 00:28:24,530
but because this is sort of running
blind until the end unless you're

358
00:28:24,530 --> 00:28:28,040
running an extreme for Best verbose mode
and you can just see everything

359
00:28:28,040 --> 00:28:32,418
happening at once you know you can fire
this off and then 15 minutes later come

360
00:28:32,419 --> 00:28:36,770
back and find out is locked out accounts
on half a dozen systems because you

361
00:28:36,770 --> 00:28:40,370
weren't real careful with how you were
choosing it to fire these off with

362
00:28:40,370 --> 00:28:45,168
accounts are using or you hadn't checked
the password policy policies see how

363
00:28:45,169 --> 00:28:50,929
many lockouts you could do on one before
you ran this so again safety levels are

364
00:28:50,929 --> 00:28:57,110
your friend and finally another big one
is non-standard pores really apt is

365
00:28:57,110 --> 00:29:02,510
dependent on the inputs given to it from
whatever scanning tool either running

366
00:29:02,510 --> 00:29:07,340
and map through apt or running and map
outside of it or in the future running

367
00:29:07,340 --> 00:29:13,699
insert scanner here when that scanner
looks at a service on a host and says

368
00:29:13,700 --> 00:29:18,320
this is for 21 is probably ftp if that's
the best it does that's the best we have

369
00:29:18,320 --> 00:29:25,820
to go off of apt won't know that this
file saying 21 is on here or let's say

370
00:29:25,820 --> 00:29:31,790
for 2,000 on a host apt doesn't know
that poor 2000 if and map didn't mark

371
00:29:31,790 --> 00:29:36,470
that as ftp it won't know to do anything
with that because it's not a standard

372
00:29:36,470 --> 00:29:42,650
port and the service name return for it
was an ftp so this will throw off some

373
00:29:42,650 --> 00:29:47,330
modules with weird things and this is
where sort of manual testing afterwards

374
00:29:47,330 --> 00:29:52,580
comes in or using a scanner that can
identify non-standard ports more

375
00:29:52,580 --> 00:29:56,600
accurately using something like dash a
on and map which will do a lot more

376
00:29:56,600 --> 00:30:03,949
thorough check than just your typical
master t scan uh so just sort of a

377
00:30:03,950 --> 00:30:08,030
standard shit sanity check task myself
like is this actually useful is this

378
00:30:08,030 --> 00:30:12,620
helping me I just came up with a little
scenario where I sort of testing myself

379
00:30:12,620 --> 00:30:17,689
against ATP I just said ok what if i'm
sitting on a network and there's 30 ftp

380
00:30:17,690 --> 00:30:24,260
services on these hosts how do i
compared to what ATP can do so I went

381
00:30:24,260 --> 00:30:25,870
down the list I said I

382
00:30:25,870 --> 00:30:30,250
going to check each of these for
anonymous log just something simple so

383
00:30:30,250 --> 00:30:35,230
you type ftp the IP address you wait for
the the prompt type in anonymous and

384
00:30:35,230 --> 00:30:38,440
type in whatever for the password and
then you wait for the response to come

385
00:30:38,440 --> 00:30:39,340
back to say

386
00:30:39,340 --> 00:30:45,280
yep you got an anonymous login or no
password rejected um in total of about

387
00:30:45,280 --> 00:30:49,270
five minutes to go through 30 servers
I'm not the fastest typer someone maybe

388
00:30:49,270 --> 00:30:54,220
it would say someone maybe doing a
manual check copying and pasting they're

389
00:30:54,220 --> 00:30:58,240
going back and forth between list of ips
and what they're actually doing this is

390
00:30:58,240 --> 00:31:01,900
obviously not doing bad scripting or
something like that to go through these

391
00:31:01,900 --> 00:31:06,880
little faster apt was done in 40 seconds
for this whole list so that's right

392
00:31:06,880 --> 00:31:11,200
about one second per server assuming
ideal conditions you know on local

393
00:31:11,200 --> 00:31:18,640
network fast response time stuff like
that so let's extrapolate like any

394
00:31:18,640 --> 00:31:22,390
service you can think of typically what
you're going to do is you're going to

395
00:31:22,390 --> 00:31:25,390
take this can file and you're going to
see a list of here's all the stuff

396
00:31:25,390 --> 00:31:31,240
that's on this network you know we like
to go to ftp at SMB heb stuff like that

397
00:31:31,240 --> 00:31:35,320
you're going to go down say that the
nmap output you're going to say alright

398
00:31:35,320 --> 00:31:39,790
there's all these service all these
hosts have this service so lets you know

399
00:31:39,790 --> 00:31:45,250
grab this port out of the file let's cut
the column out with just the IPS and

400
00:31:45,250 --> 00:31:49,450
dump it into a file this is now my IP
list going from looking for that map

401
00:31:49,450 --> 00:31:53,050
file to cutting it into a list
generously let's say about 30 seconds

402
00:31:53,050 --> 00:31:58,149
next you pick a tool for the service
you're gonna say alright for this one

403
00:31:58,150 --> 00:32:02,650
I'm going to this is a port 80 so I'm
gonna run nikto against all of these

404
00:32:02,650 --> 00:32:08,110
ones coming back as port 80 if it's a
tool that only accepts one IP like

405
00:32:08,110 --> 00:32:10,928
something like smtpclient where it's
just like your points directly at this

406
00:32:10,929 --> 00:32:12,760
host and seeing what comes back

407
00:32:12,760 --> 00:32:16,929
you're doing this repeatedly for each
one of those whether it's manually

408
00:32:16,929 --> 00:32:21,340
typing in going back forth cutting and
pasting if you're like me you have to

409
00:32:21,340 --> 00:32:24,550
read the help menu for every tool that
you use so you're going to add an extra

410
00:32:24,550 --> 00:32:28,210
minute on top of that just figuring out
what arguments am I supposed to add to

411
00:32:28,210 --> 00:32:29,770
this

412
00:32:29,770 --> 00:32:35,889
that's another 30 seconds plus of just
taking the IP typing out the name of the

413
00:32:35,890 --> 00:32:37,770
tool and firing it off

414
00:32:37,770 --> 00:32:41,850
now you repeat for every service that
you want to do this too and every host

415
00:32:41,850 --> 00:32:47,610
that you want to do it too and this
baseline time of just selecting a port

416
00:32:47,610 --> 00:32:52,679
generating on list selecting a tool
getting the arguments running against

417
00:32:52,680 --> 00:32:55,560
everything this time adds up

418
00:32:55,560 --> 00:32:59,970
this is you know picking and choosing a
two-finger how to do it doing it against

419
00:32:59,970 --> 00:33:06,060
everything apt to remove this baseline
time it's all pretty much instant it's

420
00:33:06,060 --> 00:33:08,070
going to see a list of services

421
00:33:08,070 --> 00:33:11,010
it's got a bunch of things that
correspond to each of these and it's

422
00:33:11,010 --> 00:33:14,040
just going to know these arguments are
going to run against it these are all

423
00:33:14,040 --> 00:33:15,810
the things i'm going to run against it

424
00:33:15,810 --> 00:33:19,440
let's go and so basically those minutes
of each tool that you're going to use

425
00:33:19,440 --> 00:33:23,640
are now wiped away in a matter of one or
two seconds for it you know just to

426
00:33:23,640 --> 00:33:29,820
throw this out here and wait for the
response from the server instead so i'll

427
00:33:29,820 --> 00:33:33,330
just give you sort of a we've talked a
lot about how this stuff run so now

428
00:33:33,330 --> 00:33:37,230
we're going to do a sort of a video demo
of what actually running and we can show

429
00:33:37,230 --> 00:33:40,230
how the process works and what comes out
of it

430
00:33:41,490 --> 00:33:48,720
give me a second here to make sure that
none of them knowing and all right

431
00:33:49,380 --> 00:33:56,760
singing it's working yeah there we go so
first thing you're showing all right

432
00:33:56,760 --> 00:34:03,210
that's positive as not displaying take
that out for spring and it's still not

433
00:34:03,210 --> 00:34:05,340
showing how are you

434
00:34:05,340 --> 00:34:08,909
yeah and a moment I will

435
00:34:10,260 --> 00:34:15,750
alright and stopping here

436
00:34:16,260 --> 00:34:19,800
hey you see that yeah alright let's go
with that

437
00:34:20,880 --> 00:34:24,600
grab the mind i'm going to take a little
hit

438
00:34:24,600 --> 00:34:34,380
we want all morning so one of the things
you're going to know if this is there's

439
00:34:34,380 --> 00:34:40,649
a bunch of files in your apt to modules
the Falcon fig things like that are the

440
00:34:40,649 --> 00:34:41,730
things that

441
00:34:41,730 --> 00:34:47,820
yeah well it's fine i just the kind of
things that are there is standard .

442
00:34:47,820 --> 00:34:53,010
h-help me new bunch of things in your
verbosity for the output bypass menu

443
00:34:53,010 --> 00:34:58,350
safety level as an awesome talked about
earlier very important for you want to

444
00:34:58,350 --> 00:35:02,700
set that to whatever your threshold is
that you're looking for you can input a

445
00:35:02,700 --> 00:35:08,549
config file you can import an xml file
things of this nature you can read a

446
00:35:08,550 --> 00:35:12,930
professor that I can claim something and
see it the config file bunch of things

447
00:35:12,930 --> 00:35:13,799
in here

448
00:35:13,800 --> 00:35:16,140
one of the things that were talking
about right now is the metasploit

449
00:35:16,140 --> 00:35:21,299
interface so the facilitate the
interaction batting fourth medicine we

450
00:35:21,300 --> 00:35:26,640
were using msgr pc interface so go ahead
and fire up myself console have this

451
00:35:26,640 --> 00:35:31,290
going reason I'm going this route with
you do the metasploit interface ever how

452
00:35:31,290 --> 00:35:36,119
you wish I go this way just so that I
have the sessions available to me after

453
00:35:36,119 --> 00:35:43,020
the fact so i can still interact with
them even after ABT finishes okay where

454
00:35:43,020 --> 00:35:45,119
we going here going to run it

455
00:35:45,119 --> 00:35:52,290
hell you doing the very verbose
bypassing the menu there is an

456
00:35:52,290 --> 00:35:56,279
interactive menu system with it as well
I tend to run with the dash be just a

457
00:35:56,280 --> 00:36:00,780
bypass that so it's the set it and
forget it let it run and you just watch

458
00:36:00,780 --> 00:36:06,119
output or come back to it after the fact
so here we go see on the output how many

459
00:36:06,119 --> 00:36:12,240
modules were loaded this is slightly
older version i don't know about a month

460
00:36:12,240 --> 00:36:16,859
owed your version has a bunch more
modules in it anytime module

461
00:36:16,859 --> 00:36:22,799
requirements are met it outputs it at
top appear it doesn't stop apt from

462
00:36:22,800 --> 00:36:25,950
running it just doesn't run those
modules if they're encountered now

463
00:36:25,950 --> 00:36:31,710
that's one way it's fault-tolerant if
some much some toward isn't present on

464
00:36:31,710 --> 00:36:37,109
the system goes head and scans it finds
that couple of vulnerabilities are in

465
00:36:37,109 --> 00:36:40,470
system these are fairly minor one at
this point they're still flags

466
00:36:40,470 --> 00:36:44,430
vulnerabilities lots of output i have
debugging and they were at the moment

467
00:36:44,430 --> 00:36:45,149
for this

468
00:36:45,150 --> 00:36:50,549
executing various commands you can just
see what's going on I think threads are

469
00:36:50,549 --> 00:36:55,829
set like a five on this one right now so
lots of stuff going around checking

470
00:36:55,829 --> 00:37:00,569
bunch of hosts stuff more output and I'm
SFTP so forth going down through here

471
00:37:01,260 --> 00:37:10,710
no sessions see where we have found
something was part of that she's not

472
00:37:10,710 --> 00:37:14,010
part of a domain is just part of work
great but there's others down here at

473
00:37:14,010 --> 00:37:17,730
the moment little flag but yeah this is
just a bunch of the commands that are

474
00:37:17,730 --> 00:37:20,730
running at the moment where we had here

475
00:37:21,270 --> 00:37:25,890
okay right there is part of a domain
poles and so now it builds that in the

476
00:37:25,890 --> 00:37:29,640
knowledge base knowing that there's a
domain that they're called hack met and

477
00:37:29,640 --> 00:37:34,049
in the future of start using that data
when it's attacking systems and so forth

478
00:37:34,799 --> 00:37:41,369
oh what was that oh that was all the
active every 15 to 30 seconds and get

479
00:37:41,369 --> 00:37:45,000
what it works out to it outputs a list
of all the active modules that are

480
00:37:45,000 --> 00:37:51,180
currently running if you got debugging
enabled one of the issues that were got

481
00:37:51,180 --> 00:37:55,828
it to do I the to do's is whenever you
get in her little output that as well

482
00:37:55,829 --> 00:38:00,150
just so you can see what's currently
running at any given time found a bunch

483
00:38:00,150 --> 00:38:08,279
of ip's bunch of users on a particular
system so forth those resulted in their

484
00:38:08,279 --> 00:38:13,260
own events being fire another one down
here users on a window system for them

485
00:38:13,260 --> 00:38:24,480
out and all sessions user numeration was
able to pull it over here it's gonna be

486
00:38:24,480 --> 00:38:31,980
kicking off hydrated moment you try to
get some passwords going to be doing

487
00:38:31,980 --> 00:38:38,130
that you're assuming i know i doing our
pc client stuff like that still it does

488
00:38:38,130 --> 00:38:42,869
it a little bit about identified user
name administrator password password

489
00:38:43,529 --> 00:38:46,770
there's a couple more of these down here
what it does is anytime at fine

490
00:38:46,770 --> 00:38:52,140
there's a module in there for password
guessing at the moment honest and be if

491
00:38:52,140 --> 00:38:58,410
it finds an SMB users out there on the
system it has a very shortly followed a

492
00:38:58,410 --> 00:39:02,970
password list that it tries that is
going to be expanded with a couple more

493
00:39:02,970 --> 00:39:07,828
modules as soon as i get a chance to
coat it up that will dynamically

494
00:39:07,829 --> 00:39:13,260
generate that list based on the network
name the season the year things of that

495
00:39:13,260 --> 00:39:18,420
nature as well as their lockout policy
if we can determine that so that it will

496
00:39:18,420 --> 00:39:24,119
only go up to like walking policy- one
attempt on any given account name things

497
00:39:24,119 --> 00:39:26,010
of that nature

498
00:39:26,010 --> 00:39:30,750
it finished and you saw that there was a
session captured in the background you

499
00:39:30,750 --> 00:39:38,339
can still interact with it at this point
if you wish I hear him that was from SL

500
00:39:38,339 --> 00:39:42,480
a dose of seven at this point you have
new directories log report improves

501
00:39:42,480 --> 00:39:48,480
let's go ahead and look at logs every
single thing that is output are done by

502
00:39:48,480 --> 00:39:51,750
the tool is logged in here with
date-time stamp them to the second so

503
00:39:51,750 --> 00:39:56,520
you can start piecing through there if
the customer comes back says something

504
00:39:56,520 --> 00:39:59,609
happened to this system at this time you
can go through there trying to narrow

505
00:39:59,609 --> 00:40:01,319
down what was going on

506
00:40:01,319 --> 00:40:06,808
were you actually targeting at that
point something of that nature so let's

507
00:40:06,809 --> 00:40:10,200
jump into the reports there's a report
austin it was referring to earlier

508
00:40:10,200 --> 00:40:15,509
that's just one sample of a report
module that can be written there exists

509
00:40:15,510 --> 00:40:16,770
a report

510
00:40:16,770 --> 00:40:20,730
we're not going to displayed in the demo
here but still you can have any kind of

511
00:40:20,730 --> 00:40:24,359
report generated out you can have it out
put a comma separated values whatever

512
00:40:24,359 --> 00:40:28,140
you want just a matter of writing it a
little module that will pull from the

513
00:40:28,140 --> 00:40:32,129
knowledge base to output in whatever
format you wish even that up to you all

514
00:40:32,130 --> 00:40:37,710
or to sit we get the chance the proofs
directory is a listing of every output

515
00:40:37,710 --> 00:40:42,599
of every command that was run by apt so
that if you want to go back and scrape

516
00:40:42,599 --> 00:40:44,010
the root search through it

517
00:40:44,010 --> 00:40:48,510
for example the output of Secrets dumped
here you can see the NTDs output it was

518
00:40:48,510 --> 00:40:54,240
successful and dump it out you can see
that just run John that quickly simple

519
00:40:54,240 --> 00:40:57,660
passwords nothing special there but it's
kind of things that would have done

520
00:40:57,660 --> 00:41:02,098
internally as well it's gonna go thru
jump through a few of these real quick

521
00:41:02,099 --> 00:41:03,840
i'm just going to talk as it go

522
00:41:03,840 --> 00:41:09,330
the reason I'm reason we haven't
capturing every output and putting it

523
00:41:09,330 --> 00:41:13,890
out there in this way instead of just
discarding it when it's done is that you

524
00:41:13,890 --> 00:41:17,100
have fine we have all the data in the
knowledge base that we feel is useful

525
00:41:17,100 --> 00:41:20,910
but here's all the output of these if
you want to go through and grip through

526
00:41:20,910 --> 00:41:25,170
for some nugget of information that we
might not be parsing out yet or some of

527
00:41:25,170 --> 00:41:30,330
that nature it's all still there also in
our reports at least when we put in a

528
00:41:30,330 --> 00:41:33,900
finding that vulnerability XYZ was found
on host

529
00:41:33,900 --> 00:41:37,350
well here's an example of how we test
for it you can open up one of these

530
00:41:37,350 --> 00:41:42,480
files screenshot that and that shows the
command that was run output of it then

531
00:41:42,480 --> 00:41:43,470
you can highlight it

532
00:41:43,470 --> 00:41:46,470
it's all they're ready for you to use
that in a report if you wish

533
00:41:47,010 --> 00:41:53,520
what's it doing here for the Metasploit
module is there's multiple types of

534
00:41:53,520 --> 00:41:58,050
Medicine boy modules for apt you can
write your right ones that are exploit

535
00:41:58,050 --> 00:42:03,510
based ones and ones that only react when
sessions are opened if it for new

536
00:42:03,510 --> 00:42:08,160
session is open due to any exploit one
of these other modules can run such as

537
00:42:08,160 --> 00:42:12,029
going in and dumping system information
going in and dumping windows hashes

538
00:42:12,030 --> 00:42:17,220
things of that nature or any post
operation you want it's going through

539
00:42:17,220 --> 00:42:22,140
doing a few the knowledge base will show
in a minute just more of the hash dogs

540
00:42:22,140 --> 00:42:31,529
stuff like that but still this is almost
done i think yeah so that's just a quick

541
00:42:31,530 --> 00:42:34,860
run-through of it there's been a lot
more added to it right now the

542
00:42:34,860 --> 00:42:39,090
knowledgebase dump that is dumped out to
the file file system after its done is

543
00:42:39,090 --> 00:42:44,910
XML that seem to be replaced with a
sequel light database that you can open

544
00:42:44,910 --> 00:42:48,509
up and search through in the current
version though it is just the xml

545
00:42:48,510 --> 00:42:55,260
database so you go ahead and close that
out is it thanks there or that Network

546
00:42:55,260 --> 00:43:03,960
know what those things are oh no it's
not a max doesn't work just helped of

547
00:43:03,960 --> 00:43:05,809
you know

548
00:43:05,809 --> 00:43:25,910
and of course we're all the way back i
always forget the option yeah and all

549
00:43:25,910 --> 00:43:30,170
right so demo time there was a quick
run-through of some of the current

550
00:43:30,170 --> 00:43:34,160
capabilities of it we actually have a
few more modules and apt than are

551
00:43:34,160 --> 00:43:38,538
demonstrated their lot of other tech
vectors are stuff for jboss and a bunch

552
00:43:38,539 --> 00:43:43,789
of your web app stuff responders in
there things of this nature things that

553
00:43:43,789 --> 00:43:49,609
you typically do is it's a tags tools
techniques that you typically use on

554
00:43:49,609 --> 00:43:53,328
that first day day and a half of an
engagement when you sit down there a lot

555
00:43:53,329 --> 00:43:58,009
of commonality you tend to do releases a
lot of commonality that we end up doing

556
00:43:58,009 --> 00:44:01,519
ourselves that's not necessarily say
those things that you do but odds are

557
00:44:01,519 --> 00:44:07,488
you do some portion of that as well but
when we're dealing with this we have a

558
00:44:07,489 --> 00:44:11,719
bunch of questions out there to the
audience to the industry as a whole if

559
00:44:11,719 --> 00:44:13,999
you're interested in using something
like this

560
00:44:13,999 --> 00:44:19,189
what kind of tools or techniques do you
use that can be repeated can be

561
00:44:19,189 --> 00:44:23,598
reprocessed and can be automated things
of this nature if there is something out

562
00:44:23,599 --> 00:44:24,890
there by all means

563
00:44:24,890 --> 00:44:29,689
hit us up on get up but in an issue a
request a new feature request of that

564
00:44:29,689 --> 00:44:34,999
nature or if you are so inclined to
start writing your own modules port go

565
00:44:34,999 --> 00:44:37,999
out there right on modules put in a pull
request things of that nature

566
00:44:38,569 --> 00:44:42,469
where available at any given time out
there contact will be on the next one so

567
00:44:42,469 --> 00:44:47,630
the future plans that we have interest
in going with ourselves are more than

568
00:44:47,630 --> 00:44:51,859
just the in map import that was in there
is a placeholder for now we just haven't

569
00:44:51,859 --> 00:44:55,489
gone back to write other ones for NASA's
next pose

570
00:44:55,489 --> 00:45:01,640
burps we whatever your choice of other
input sources finishing out the four

571
00:45:01,640 --> 00:45:07,368
attack chains for not just responder
here but for for some of the up their

572
00:45:07,369 --> 00:45:12,259
attack change that we typically use we
have many of them finished but some of

573
00:45:12,259 --> 00:45:15,259
them were just peace mailed in there
we're missing a few modules make sure we

574
00:45:15,259 --> 00:45:17,720
feel all that out have for tech chaining
go

575
00:45:17,720 --> 00:45:22,549
going on in the process write it as many
more modules as we can that are going to

576
00:45:22,550 --> 00:45:28,040
be useful to people make prettier
reports may be right if you are the

577
00:45:28,040 --> 00:45:35,090
report modules and I haven't started on
this year but my great this all over the

578
00:45:35,090 --> 00:45:42,050
Python 3 is currently on t7 the main
instigator of that is there are certain

579
00:45:42,050 --> 00:45:47,210
issues that have encountered with 27
that would be much easier much more

580
00:45:47,210 --> 00:45:53,000
easily circumvented or taking care of in
three then and 27 so I go down that path

581
00:45:53,000 --> 00:45:55,070
in the next couple months

582
00:45:55,070 --> 00:45:58,280
oh yeah it's one of those things if
you're interested in it please talk to

583
00:45:58,280 --> 00:46:01,430
us put in request work on it yourself

584
00:46:01,430 --> 00:46:07,250
we're open for any kind of criticism or
compliments or shaking of heads up like

585
00:46:07,250 --> 00:46:12,950
that or buying of whiskey is so every
what you want i don't hear finally even

586
00:46:12,950 --> 00:46:20,299
reaches Twitter Email get hub pictured
poison at which point i don't know what

587
00:46:20,300 --> 00:46:22,640
I'm me that I Mon Ami but still

588
00:46:22,640 --> 00:46:31,670
ok so just a few minutes left here any
questions comments criticisms yes

589
00:46:44,450 --> 00:46:51,919
oh they're over there they were
bothering my feet so sorry I'm not used

590
00:46:51,920 --> 00:46:56,690
to my still shoes are over there
somewhere but how do we handle

591
00:46:56,690 --> 00:47:02,089
dependencies as of right now we're going
off of the base version that is in cali

592
00:47:02,089 --> 00:47:07,070
on each instance where possible when
those get updated wyndham the common

593
00:47:07,070 --> 00:47:11,000
version of each tool is updated were
planning on going back and checking each

594
00:47:11,000 --> 00:47:15,380
module and things of that nature there
are no actual version checks within the

595
00:47:15,380 --> 00:47:17,089
modules themselves

596
00:47:17,089 --> 00:47:21,890
other than the fact that the module just
air out if it doesn't work the way it's

597
00:47:21,890 --> 00:47:26,540
expecting the command line options are
different to output an error log you can

598
00:47:26,540 --> 00:47:28,660
look at that figure out what's going on
in

599
00:47:28,660 --> 00:47:32,890
but in a issue take it and we can
address it at that . like so we got our

600
00:47:32,890 --> 00:47:36,368
first issue ticket last night shout-out
chappie for finding the bug for us yeah

601
00:47:36,369 --> 00:47:43,569
yeah yeah luckily that's an easy one
that can fix it quickly so yes any if

602
00:47:43,569 --> 00:47:47,680
you are using interview dress want to
bug just whatever put in tickets things

603
00:47:47,680 --> 00:47:50,828
of that nature we're happy to comment
with you talk to you whatever

604
00:47:51,549 --> 00:47:54,549
yes sir

605
00:48:00,609 --> 00:48:09,130
well ok the question is how does this
I'm correlate overlap what-have-you with

606
00:48:09,130 --> 00:48:16,990
Sparta that I don't have a great answer
to that other than to say that at the

607
00:48:16,990 --> 00:48:22,660
time we were starting to work on this we
didn't including smarter we didn't find

608
00:48:22,660 --> 00:48:26,680
any tool out there that met our needs
the way that we wanted the met

609
00:48:27,280 --> 00:48:34,299
so that's what I'm saying even with this
apt to works in our meant works with us

610
00:48:34,299 --> 00:48:38,020
the way that we like it we tried to open
source of some other people work on it

611
00:48:38,020 --> 00:48:42,670
and we're not expecting it to be a
one-size-fits-all out there obviously

612
00:48:42,670 --> 00:48:48,430
there's lots of tools in the infosec
industry that helps illustrate that not

613
00:48:48,430 --> 00:48:52,690
everybody likes the same thing does it
the same way this is this way works for

614
00:48:52,690 --> 00:48:57,789
you great work with his on it haven't
make it better if sparta is the way that

615
00:48:57,789 --> 00:49:04,839
she choose to go with all that great go
with that and maybe we will a little bit

616
00:49:04,839 --> 00:49:09,880
later do a more in-depth comparison of
the two and see if there's something we

617
00:49:09,880 --> 00:49:15,400
can work with them on or whole from or
something of that nature but just off

618
00:49:15,400 --> 00:49:16,329
the top of my head

619
00:49:16,329 --> 00:49:20,920
the best answer I can give you is that
it didn't fit our needs as what we were

620
00:49:20,920 --> 00:49:25,720
needing so I know that's something best
answer for you but that's the honest

621
00:49:25,720 --> 00:49:28,270
tree anybody else out there

622
00:49:28,270 --> 00:49:31,690
yes no maybe

623
00:49:31,690 --> 00:49:33,780
well thank you all very much

624
00:49:33,780 --> 00:49:34,440
a great rest of the day

