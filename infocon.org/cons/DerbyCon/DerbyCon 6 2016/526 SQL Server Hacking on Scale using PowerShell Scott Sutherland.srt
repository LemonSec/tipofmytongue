1
00:00:00,000 --> 00:00:04,380
i'm gonna be talking about hacking SQL
surround scale this talk is really going

2
00:00:04,380 --> 00:00:09,149
to focus on week and common
configurations that red teamers and pen

3
00:00:09,150 --> 00:00:13,230
testers can kind of leverage get
unauthorized access to data naturally

4
00:00:13,230 --> 00:00:17,430
because it's a database but also system
access and are leveraging it to or the

5
00:00:17,430 --> 00:00:20,430
week configurations forearm a domain
privilege escalation

6
00:00:20,970 --> 00:00:24,930
i'm scott sutherland work for a company
called that's by out of Minneapolis

7
00:00:24,930 --> 00:00:30,240
don't you talks in the past not here
this is normally a 60 minute

8
00:00:30,240 --> 00:00:35,550
presentation i'm trying to jam into 25
minutes so if i do cut this short

9
00:00:35,550 --> 00:00:40,649
i will put the slides out my twitter is
out their allies tweet out the slider

10
00:00:40,649 --> 00:00:47,190
link when i'm done so this will cover
i'm gonna be talking about kind of

11
00:00:47,190 --> 00:00:50,610
general motivations for targeting SQL
Server other date over other database

12
00:00:50,610 --> 00:00:54,390
platforms talk about a toolkit i
released a couple months ago called

13
00:00:54,390 --> 00:01:00,270
power of SQL really talk about how to
locate database targets and then I'll

14
00:01:00,270 --> 00:01:04,170
really be spending majority of my time
focusing on common at privilege

15
00:01:04,170 --> 00:01:08,729
escalation scenarios that are useful for
red teamers and pen testers and if

16
00:01:08,729 --> 00:01:12,060
there's time I lightly touch on post
exploitation activities and generate

17
00:01:12,060 --> 00:01:18,210
random recommendations for the blue team
so SQL server is something we see and

18
00:01:18,210 --> 00:01:23,100
pretty much every environment we come
into I i do app and network network and

19
00:01:23,100 --> 00:01:25,408
I see it on both sides of the house

20
00:01:25,409 --> 00:01:29,670
it's also very tightly integrated with
active directory and kind of the windows

21
00:01:29,670 --> 00:01:34,920
ecosystem and for that reason it makes a
better target than say oracle or MySQL

22
00:01:34,920 --> 00:01:37,650
or things like that out of the gate
because it has these trust relationships

23
00:01:37,650 --> 00:01:42,750
that just don't exist on those other
platforms powershell was nice because

24
00:01:42,750 --> 00:01:48,270
it's native to the the platform that I'm
attacking and so I liked it for that

25
00:01:48,270 --> 00:01:52,560
reason the most also i'm not really
programmer I'm kind of a scripter and so

26
00:01:52,560 --> 00:01:56,549
for me it gives me flexibility and I
don't necessarily have to learn how to

27
00:01:56,549 --> 00:01:58,829
program right to get the job done

28
00:01:58,829 --> 00:02:06,719
although i'm slowly trying to learn so
power of SQL came about our achievement

29
00:02:06,719 --> 00:02:11,519
gap our pistol because i had a lot of
1020 database scripts like kept building

30
00:02:11,520 --> 00:02:13,390
and releasing I really sick of

31
00:02:13,390 --> 00:02:17,589
copying / code and having to run them
all independently against database

32
00:02:17,590 --> 00:02:22,720
targets also i saw some stuff that will
shorter did quite a while ago now where

33
00:02:22,720 --> 00:02:25,990
he kind of went out and he looked at
what people are doing in the industry

34
00:02:25,990 --> 00:02:29,920
wrapped it all in powershell made it
very accessible not just that pen

35
00:02:29,920 --> 00:02:33,250
testers but also the admin so now admins
with limited knowledge of how this stuff

36
00:02:33,250 --> 00:02:38,140
works can actually evaluate their builds
before they go gold or whatever and I

37
00:02:38,140 --> 00:02:44,500
kind of wanted to bring that to the SQL
platform so general prod project goals

38
00:02:44,500 --> 00:02:48,580
were scalability i started out with jobs
it's really sucked and they crashed a

39
00:02:48,580 --> 00:02:53,950
lot so I i leaned on run spaces from
some data found on blogs from beau

40
00:02:53,950 --> 00:02:59,799
products and rent PS rambling cookie
monster guy i also wanted all my little

41
00:02:59,800 --> 00:03:04,300
tool sets to work together so i used the
powershell pipeline which will take you

42
00:03:04,300 --> 00:03:08,650
know information from one command and
allow it to be very easily processed by

43
00:03:08,650 --> 00:03:12,910
another and I want a portability SQL
server by default comes with these DLLs

44
00:03:12,910 --> 00:03:16,930
these SML libraries and when you read
the books on how to use PowerShell with

45
00:03:16,930 --> 00:03:21,459
SQL Server they tell you to use these
libraries and I just didn't want to have

46
00:03:21,459 --> 00:03:23,799
to lug them around with me everywhere I
went

47
00:03:23,799 --> 00:03:28,000
so I leaned on the.net framework and
some older version that I got some good

48
00:03:28,000 --> 00:03:32,890
advice from people in the community to
kind of push towards too . compliancy so

49
00:03:32,890 --> 00:03:36,640
he could run on you know windows seven
boxes and other things like that core

50
00:03:36,640 --> 00:03:37,600
functional goals

51
00:03:37,600 --> 00:03:42,160
we're pretty intuitive i want to find
the SQL servers i wanted to audit them

52
00:03:42,160 --> 00:03:45,609
inventory them i want to be able to do
really basic vulnerability scanning

53
00:03:45,610 --> 00:03:49,870
stuff and I wanted to do that automatic
escalation there's a ton of functions to

54
00:03:49,870 --> 00:03:53,890
do other things in there right now I
wrote a wiki out on the github you can

55
00:03:53,890 --> 00:03:57,640
go check it out if you're interested but
it's a like I said it's a tight time

56
00:03:57,640 --> 00:04:00,880
slot so I'm going to just kind of loss
over that and let you guys check it out

57
00:04:00,880 --> 00:04:05,500
independently you can also download this
from powershell gallery if that's what

58
00:04:05,500 --> 00:04:08,500
you like

59
00:04:09,220 --> 00:04:14,829
ok anyone know that will be out
afterwards as well

60
00:04:14,829 --> 00:04:17,570
sure sorry I don't know

61
00:04:17,570 --> 00:04:22,909
there's also some basic install
instructions here and there's an install

62
00:04:22,910 --> 00:04:26,000
instructions on the wiki that kind of
speak to maybe the best way for your use

63
00:04:26,000 --> 00:04:31,790
case so without the way i'll just talk
about SQL Server basics for those of you

64
00:04:31,790 --> 00:04:35,210
who are not super familiar SQL server is
just another application that runs on

65
00:04:35,210 --> 00:04:41,299
top of windows the core of it is a
series of windows services so the

66
00:04:41,300 --> 00:04:44,390
important thing to realize about that is
that anything that SQL server does on

67
00:04:44,390 --> 00:04:48,979
the operating system executed under the
context of the service account and

68
00:04:48,980 --> 00:04:53,150
that's going to become important later
and we'll see why I'm another thing to

69
00:04:53,150 --> 00:04:57,919
kind of be aware of are the actual user
accounts by default Windows accounts are

70
00:04:57,920 --> 00:05:03,290
used you can configure SQL server to use
native SQL server configuration

71
00:05:03,290 --> 00:05:07,130
excuse me SQL server login accounts and
neither of those have access to data by

72
00:05:07,130 --> 00:05:10,580
default they actually have to be mapped
to a separate database user that exists

73
00:05:10,580 --> 00:05:14,750
in each database on SQL server so i have
a little model up there for those who

74
00:05:14,750 --> 00:05:16,610
care

75
00:05:16,610 --> 00:05:20,780
also there are two roles that you guys
should be aware of that are important as

76
00:05:20,780 --> 00:05:23,929
we walk through this the first is the
system enroll which is basically a DBA

77
00:05:23,930 --> 00:05:27,500
roll and a public role which is kind of
the equivalent to the everyone group and

78
00:05:27,500 --> 00:05:34,670
windows but for SQL server so we can
really attack we can't find so I

79
00:05:34,670 --> 00:05:38,120
outlined some basic techniques for
finding SQL Server some more intuitive

80
00:05:38,120 --> 00:05:41,750
somewhere less intuitive we have the
traditional techniques of tcp and UDP

81
00:05:41,750 --> 00:05:47,570
scanning of various types but we do live
in kind of like a cloud world today so a

82
00:05:47,570 --> 00:05:52,219
lot of our clients are actually pushing
their databases into the sewer cloud and

83
00:05:52,220 --> 00:05:55,520
so what we found out while working with
them is that when they register or set

84
00:05:55,520 --> 00:05:59,419
up an SQL server database in the sewer
it actually registers under this

85
00:06:00,500 --> 00:06:05,510
there we go databases that windows
dotnet and so you can actually use very

86
00:06:05,510 --> 00:06:10,760
traditional dns dictionary attacks to
enumerate potential database endpoints

87
00:06:10,760 --> 00:06:15,080
that are exposed to the internet and
Microsoft will come back and they will

88
00:06:15,080 --> 00:06:20,150
make a very legitimate statement which
is by default there's a firewall on that

89
00:06:20,150 --> 00:06:23,690
does not let people connect to those
databases but we found through a little

90
00:06:23,690 --> 00:06:27,020
bit of research is that a lot of those
are actually exposed to the internet

91
00:06:27,020 --> 00:06:29,810
people are opening up their firewalls
because they don't know where

92
00:06:29,810 --> 00:06:34,700
traffic's coming from and to amplify
that people are integrating their

93
00:06:34,700 --> 00:06:40,280
database code and their application code
and get hub Lincoln all to Azure and we

94
00:06:40,280 --> 00:06:44,929
are founding where we found in many
cases they're public repose so you can

95
00:06:44,930 --> 00:06:48,590
go out to get hub or bitbucket or
whatever you can find not only the

96
00:06:48,590 --> 00:06:52,880
database connection sorry database
endpoints in the door but the connection

97
00:06:52,880 --> 00:07:00,200
strings that go with them so if you're
doing that stop local user enumeration

98
00:07:00,200 --> 00:07:03,800
I'm sorry local database integration is
pretty easy if you're already on a box

99
00:07:03,800 --> 00:07:07,790
the one that's really interesting is
domain user perspective so if you've

100
00:07:07,790 --> 00:07:11,660
already obtained doing user rights for a
dictionary attack or fish or mdns

101
00:07:11,660 --> 00:07:16,220
spoofing or whatever got you on the box
once you have that you then have the

102
00:07:16,220 --> 00:07:20,479
right to actually query active directory
for a ton of information and when SQL

103
00:07:20,479 --> 00:07:24,950
server is installed on domain system and
actually registers itself along with the

104
00:07:24,950 --> 00:07:29,360
associated service account in active
directory in any domain user can query

105
00:07:29,360 --> 00:07:33,650
for all of the domain SQL servers
because it needs to be there to support

106
00:07:33,650 --> 00:07:39,200
kerberos authentication so that's pretty
powerful along with many other taxes

107
00:07:39,200 --> 00:07:42,590
could go with them and then also as your
again to get the right domain account

108
00:07:42,590 --> 00:07:47,239
you can just sign into the report online
or use the powershell modules to

109
00:07:47,240 --> 00:07:52,370
interact with them so that the idea here
is that we used to have a surface of

110
00:07:52,370 --> 00:07:56,180
attack that was only internal and the
world put up firewalls and prevent

111
00:07:56,180 --> 00:07:59,180
people from directly accessing databases
and now people are starting to put that

112
00:07:59,180 --> 00:08:03,770
back out on the internet so that's just
something to be aware of i wrote a bunch

113
00:08:03,770 --> 00:08:08,270
of functions or functions to enumerate
SQL servers from different perspectives

114
00:08:08,270 --> 00:08:16,219
i'm gonna do a demo sex i'm not gonna go
into this right now but once you see

115
00:08:16,220 --> 00:08:21,800
once you actually have a list of
databases that you know about your

116
00:08:21,800 --> 00:08:25,010
typically what we'll do is we'll just
try to gain access to them test the

117
00:08:25,010 --> 00:08:27,580
current domain users privileges

118
00:08:27,580 --> 00:08:31,719
and there's a couple modules i made for
that the first we'll do dictionary

119
00:08:31,720 --> 00:08:35,589
attacks against all the identified SQL
servers with either your current

120
00:08:35,589 --> 00:08:41,079
credentials are provided credentials
actually get sqlconnection threaded will

121
00:08:41,078 --> 00:08:46,359
use your current creds showdown the sec
I did you a command cheat sheet since i

122
00:08:46,360 --> 00:08:50,920
have a tendency to ramble and we're
directions so i have the different user

123
00:08:50,920 --> 00:08:53,949
or attacker perspective on the side here
depending on what you're doing and where

124
00:08:53,950 --> 00:08:55,360
you're coming from

125
00:08:55,360 --> 00:08:59,019
along with associated commands and once
again it the commands to use the

126
00:08:59,019 --> 00:09:02,529
pipeline inspired by a lot of open
source tools and so you can see here

127
00:09:02,529 --> 00:09:07,149
like down the bottom we can do get SQL
instance domain as if you run that alone

128
00:09:07,149 --> 00:09:10,930
as a domain user you get the entire list
of SQL servers and you can directly pipe

129
00:09:10,930 --> 00:09:15,010
it into the second command which will
test your access to them so it's us many

130
00:09:15,010 --> 00:09:18,220
one liner which is nice

131
00:09:18,220 --> 00:09:21,220
I'm just going to skip right into the
demo

132
00:09:22,990 --> 00:09:27,730
ok so first off i'm just going to show
you this is us listing the local SQL

133
00:09:27,730 --> 00:09:31,420
Server instances we get some service
information we get kind of state whether

134
00:09:31,420 --> 00:09:36,550
it's running or not this is basically
emulating you already owning a box now

135
00:09:36,550 --> 00:09:40,269
we're actually running as a domain user
and after we've imported the module

136
00:09:40,269 --> 00:09:44,890
naturally and getting a list of SQL
Server instances on the domain and here

137
00:09:44,890 --> 00:09:49,449
we only have nine because it's my tiny
little punk-ass lab but in a real

138
00:09:49,449 --> 00:09:53,589
environment you have thousands of
databases thousands i just did one last

139
00:09:53,589 --> 00:09:57,279
week with a mid-sized company and there
was like three thousand instances in the

140
00:09:57,279 --> 00:10:02,140
domain so it also gives you nice
descriptive information along with that

141
00:10:02,140 --> 00:10:07,180
service account info you can do really
basic analytics with a powershell and

142
00:10:07,180 --> 00:10:11,260
get a list of you know how many service
accounts are excuse me how many servers

143
00:10:11,260 --> 00:10:14,860
are using using each unique service
accounts you can quickly identify

144
00:10:14,860 --> 00:10:17,860
potential tax surface for later on

145
00:10:19,010 --> 00:10:22,970
here's me actually actively running the
command it's getting the full list of

146
00:10:22,970 --> 00:10:27,110
SQL servers and piping it into the
thread connection test it spits out it

147
00:10:27,110 --> 00:10:31,790
tells us what we have access to what we
don't pretty quick but we don't want to

148
00:10:31,790 --> 00:10:35,300
have to rerun that discovery every time
because that gets time-consuming so we

149
00:10:35,300 --> 00:10:40,219
can actually set that output to a
variable and then reuse that variable

150
00:10:40,220 --> 00:10:43,040
moving forward so in very large
environment the connection test might

151
00:10:43,040 --> 00:10:48,349
take like 5-10 minutes minutes and i
don't have to do that every time so now

152
00:10:48,350 --> 00:10:51,500
we can see after assigning it to a
variable i can maintain a list of my

153
00:10:51,500 --> 00:10:54,620
accessible servers and then i can just
type them into other power of SQL

154
00:10:54,620 --> 00:10:57,620
commands and now i got server
information for all the servers i have

155
00:10:57,620 --> 00:11:03,470
listed database databases on a ton of
servers so makes it really really easy

156
00:11:03,470 --> 00:11:08,150
to take a consecutive action or quick
actions so a lot of people will go

157
00:11:08,150 --> 00:11:12,500
through and say like that 3000 system
environment i just saw we got access to

158
00:11:12,500 --> 00:11:16,730
250 servers from a normal domain user
perspective and people are like what in

159
00:11:16,730 --> 00:11:21,410
the fuck is happening so I mean people
are pulling out there going nuts and so

160
00:11:21,410 --> 00:11:26,750
we tried over the last six years we've
tried to do some mild root cause

161
00:11:26,750 --> 00:11:29,900
analysis and that the short answer is
admins give a lot of access that they

162
00:11:29,900 --> 00:11:34,790
shouldn't there on short timelines to
get things into production and they kind

163
00:11:34,790 --> 00:11:39,079
of rush and just get domain users
everything but the one that people that

164
00:11:39,080 --> 00:11:44,120
the reason people don't talk about as
much as this privilege inheritance issue

165
00:11:44,120 --> 00:11:50,060
so with SQL server when you install it
on a box express specifically the

166
00:11:50,060 --> 00:11:53,239
built-in users group has access to login
not a big deal especially if it's a

167
00:11:53,240 --> 00:11:58,010
standalone server nested in that users
group is the NTS or authority

168
00:11:58,010 --> 00:12:02,630
authenticated users once again if you're
a standalone SQL Server no big deal but

169
00:12:02,630 --> 00:12:08,330
the second you connect that box the
domain the domain users group on is

170
00:12:08,330 --> 00:12:12,350
basically qualifies as an authenticated
user and now you've just given everyone

171
00:12:12,350 --> 00:12:16,040
on your domain the rights to log into
your SQL server so that's pretty insane

172
00:12:16,040 --> 00:12:19,670
and that's one of the main reasons we
see such a widespread access in almost

173
00:12:19,670 --> 00:12:26,839
every environment we touch so let's
assume we have a lot of access now we've

174
00:12:26,840 --> 00:12:32,730
logged in we have some public role
access as a domain user we

175
00:12:32,730 --> 00:12:35,910
and I'll get this happen privileges
there's a million ways to do this I just

176
00:12:35,910 --> 00:12:40,709
started scratching the surface but so
far i know this sounds lame but it's

177
00:12:40,709 --> 00:12:44,729
just weak passwords is still really
common that brute force script i showed

178
00:12:44,730 --> 00:12:48,149
you earlier actually leverage is a
technique for doing blind user

179
00:12:48,149 --> 00:12:53,220
enumeration so if you run it as a domain
user will connect it will normally not

180
00:12:53,220 --> 00:12:56,610
have access to list all the users and
will enumerate them and then I do some

181
00:12:56,610 --> 00:12:59,610
very quick dictionary attacks but that
same environment i just looked at I

182
00:12:59,610 --> 00:13:03,870
think we found over a hundred weak
passwords and SQL server that were just

183
00:13:03,870 --> 00:13:05,760
username is password

184
00:13:05,760 --> 00:13:10,889
nothing fancy the other one is SQL
injection into store procedures so

185
00:13:10,889 --> 00:13:15,930
stored procedures in SQL server can run
with elevated privileges via a few

186
00:13:15,930 --> 00:13:19,138
different methods so if they're doing
concatenation of variables and stuff you

187
00:13:19,139 --> 00:13:23,100
know its traditional SQL injection you
can run arbitrary code also there's

188
00:13:23,100 --> 00:13:27,540
excessive privileges everywhere that we
see very commonly misconfigured from a

189
00:13:27,540 --> 00:13:30,839
number of different perspectives but on
the whole I don't have to run these

190
00:13:30,839 --> 00:13:34,949
every single time so as i mentioned i
created this invoke SQL audit script for

191
00:13:34,949 --> 00:13:39,209
those who don't actually want to ask
escalation they just kinda wanna list

192
00:13:39,209 --> 00:13:43,859
and create a vulnerability assessment
report basically so we can see it run

193
00:13:43,860 --> 00:13:47,130
here against whatever instances it will
go through always use the river boast

194
00:13:47,130 --> 00:13:50,790
flag if you want to get feedback on
what's going on but you can see here

195
00:13:50,790 --> 00:13:55,260
will help put the affected computer the
vulnerability if it's potentially

196
00:13:55,260 --> 00:13:58,800
vulnerable based on specific criteria
and then the command to actually exploit

197
00:13:58,800 --> 00:14:03,000
it if that's what you want to do so that
can be outputted naturally using powers

198
00:14:03,000 --> 00:14:09,000
on to a number of different formats i
also like i said i I'm a red team and a

199
00:14:09,000 --> 00:14:12,420
pen tester and I want the ability to
press a button and become an admin so i

200
00:14:12,420 --> 00:14:19,410
did so here in this example once again
we're doing access enumeration with that

201
00:14:19,410 --> 00:14:23,939
the two functions we talked about before
we're getting a list of the systems we

202
00:14:23,940 --> 00:14:24,930
can touch

203
00:14:24,930 --> 00:14:27,959
we're going to use that server in
function i showed you before to

204
00:14:27,959 --> 00:14:34,439
determine what systems we have 672 it's
worth noting that out of the 250 systems

205
00:14:34,440 --> 00:14:37,529
we access and that other environment
half of them is admin out of the gate

206
00:14:37,529 --> 00:14:39,000
that's not uncommon

207
00:14:39,000 --> 00:14:44,940
so here we're just running the invoke
SQL escalate privilege it's running and

208
00:14:44,940 --> 00:14:48,300
it looks very similar to the audit
because it's literally wrapping it and

209
00:14:48,300 --> 00:14:51,839
that the end it just as a check to see
if we are successful and you can

210
00:14:51,840 --> 00:14:56,700
validate that running the same command
again it's a big time-saver for

211
00:14:56,700 --> 00:15:00,690
escalation and SQL Server it's useful
during application assessments and

212
00:15:00,690 --> 00:15:01,620
depends

213
00:15:01,620 --> 00:15:07,170
so now let's assume we have taken over
up we're now at a DBA I and now we want

214
00:15:07,170 --> 00:15:13,979
to impersonate the service account like
i said i was always command execution

215
00:15:13,980 --> 00:15:18,810
means we can basically run as a service
account implicitly we don't have to know

216
00:15:18,810 --> 00:15:23,790
about password crack a hash or pass the
hash or anything anything anything we

217
00:15:23,790 --> 00:15:27,599
run through SQL server is going to run
in that context SQL server can be

218
00:15:27,600 --> 00:15:30,150
configured with a lot of different
service accounts but because we have

219
00:15:30,150 --> 00:15:33,660
that SPN list we know exactly what
service we want to touch on that are

220
00:15:33,660 --> 00:15:37,890
actually going to give us the potential
to escalate to a domain user and it

221
00:15:37,890 --> 00:15:41,520
should be noted that most service
accounts on clustered servers and

222
00:15:41,520 --> 00:15:44,490
enterprise environments have local
administrative rights you're going to go

223
00:15:44,490 --> 00:15:49,320
from a normal user to a minimum in most
cases a local administrator on those

224
00:15:49,320 --> 00:15:53,820
systems and then use your imagination
from there another thing worth noting is

225
00:15:53,820 --> 00:15:56,760
historically people kind of lean on XP
command shell to store procedure that

226
00:15:56,760 --> 00:16:00,030
execute those commands natively in SQL
server but they're like a billion other

227
00:16:00,030 --> 00:16:03,839
ways to do it on to stay under the radar
because a lot of people do auditing just

228
00:16:03,839 --> 00:16:07,589
on that function you can import your own
DLLs you can use a gun two different

229
00:16:07,589 --> 00:16:12,330
agent jobs you can do registry audio
autoruns through SQL native stored

230
00:16:12,330 --> 00:16:16,170
procedures so there's a lot of
variability there to take advantage of

231
00:16:16,170 --> 00:16:22,079
that i wrote this tool this additional
function that can execute iOS commands

232
00:16:22,080 --> 00:16:25,620
so here we have our accessible list
which is that list of servers i know i

233
00:16:25,620 --> 00:16:29,910
can log into and if I have sysadmin on
them when i run this it's actually going

234
00:16:29,910 --> 00:16:33,689
to run whatever command i want in the
context of the service account and you

235
00:16:33,690 --> 00:16:36,660
can do that scale it's threaded and all
that stuff

236
00:16:36,660 --> 00:16:40,649
also shared accounts are really really
interesting

237
00:16:40,649 --> 00:16:45,540
I'm so we talked about basic service
counts right there on as if your system

238
00:16:45,540 --> 00:16:50,279
and you can run OS commands the last
command runs as a service account but i

239
00:16:50,279 --> 00:16:53,339
didn't mention earlier that the surface
count inherently on every single version

240
00:16:53,339 --> 00:16:57,720
of SQL server has system and privileges
and on a standalone server not a big

241
00:16:57,720 --> 00:17:02,370
deal when you're in domain running
hundreds or thousands of SQL servers

242
00:17:02,370 --> 00:17:06,959
using the exact same domain account what
that means is if you own one SQL Server

243
00:17:06,959 --> 00:17:11,010
you inherently have system and
privileges and all of those slippers and

244
00:17:11,010 --> 00:17:15,299
this is insanely comment and the answer
i get for most clients is that on it

245
00:17:15,299 --> 00:17:18,299
saves on licensing fees i think so

246
00:17:18,299 --> 00:17:22,530
go figure so one account to rule them
all it's incredibly powerful lateral

247
00:17:22,530 --> 00:17:25,980
movement technique we use it during SQL
injection occasionally don't know if you

248
00:17:25,980 --> 00:17:29,070
can see the red but come through you
know from the internet you get to bypass

249
00:17:29,070 --> 00:17:33,720
the whole DMZ because you're landing in
the database and then we've had a lot of

250
00:17:33,720 --> 00:17:37,020
like marketing databases and things like
that leverages shared service account

251
00:17:37,020 --> 00:17:40,139
we're dropping right into their bank
database so it's pretty powerful trust

252
00:17:40,140 --> 00:17:49,140
relationship like Dom so another really
cool technique that's been around

253
00:17:49,140 --> 00:17:53,190
forever but is less known is something
called did a crawling database links our

254
00:17:53,190 --> 00:17:57,510
database link calling for those of you
are not familiar a database link is

255
00:17:57,510 --> 00:18:02,250
basically a pre-configured I set of
credentials that's used by one SQL

256
00:18:02,250 --> 00:18:05,850
server to remotely pull data from
another SQL server so it's used for

257
00:18:05,850 --> 00:18:09,330
distributed queries and things like that
although can do many other things which

258
00:18:09,330 --> 00:18:14,100
i won't get into here but that the
general idea is that link that's created

259
00:18:14,100 --> 00:18:18,449
is persistent and the public role any
user in the public role can actually

260
00:18:18,450 --> 00:18:22,320
query data over that link and when they
do that they're actually impersonating

261
00:18:22,320 --> 00:18:26,580
the user that link is configured with on
the remote server so if I monterey i'm

262
00:18:26,580 --> 00:18:32,129
now running code on server be as that
user which is cool we can do XP

263
00:18:32,130 --> 00:18:36,120
commander all the other stuff but what
really compounds this is that we can

264
00:18:36,120 --> 00:18:40,889
crawl the links we can nest them and so
we can crawl through environments are

265
00:18:40,890 --> 00:18:44,640
pretty insanely and here's an example of
us we do this fiasco injection quite a

266
00:18:44,640 --> 00:18:48,690
bit so we'll come thru hit the database
again but this time we're not assist

267
00:18:48,690 --> 00:18:49,890
happen so we don't have that coming

268
00:18:49,890 --> 00:18:55,020
execution option but we see a link on
the server is goes to db1 still not

269
00:18:55,020 --> 00:18:59,879
assist admin on said but db1 has links
to the banking database and that is a

270
00:18:59,880 --> 00:19:04,500
salmon so now i can crawl you know from
through a number of different service to

271
00:19:04,500 --> 00:19:08,010
get where I want to go and this is
insane because we've crawled these

272
00:19:08,010 --> 00:19:11,879
massive trees they get us into business
partners they get us into pci sounds

273
00:19:11,880 --> 00:19:14,790
that get us into high security zones
because they poke a tiny little hole

274
00:19:14,790 --> 00:19:18,510
through so the databases can catch can
connect to each other so it's a very

275
00:19:18,510 --> 00:19:25,020
powerful lateral movement nothing as
well as escalation so quick stats we

276
00:19:25,020 --> 00:19:28,440
have about fifty percent of environments
we see this end the max house we have is

277
00:19:28,440 --> 00:19:33,150
we have hopped through 12 service on a
single crawl meaning 12 individual hops

278
00:19:33,150 --> 00:19:36,780
and the reason it stopped is because the
open query function I very briefly

279
00:19:36,780 --> 00:19:42,180
showed you has a character woman so that
is what it is and then during that call

280
00:19:42,180 --> 00:19:48,300
we had 226 servers out of that 225 gets
this admin on I'm so just because of the

281
00:19:48,300 --> 00:19:52,230
link relationships there are thousands
of links and that particular crawl so we

282
00:19:52,230 --> 00:19:56,880
have actually produce code in 2012 and
before that actually a guy named auntie

283
00:19:56,880 --> 00:20:01,410
Rhonda sorry myself produced a bunch of
those and the form a display modules but

284
00:20:01,410 --> 00:20:05,550
auntie has taken upon himself to rewrite
them in power cell and so I've included

285
00:20:05,550 --> 00:20:09,930
his script along with some other kind of
auxiliary modules that will be wrapped

286
00:20:09,930 --> 00:20:17,940
in the power of SQL eventually in the
git repo for power up SQL so we'll do a

287
00:20:17,940 --> 00:20:21,540
quick demo that authorities awesome
couldn't be here but at least you get to

288
00:20:21,540 --> 00:20:25,200
see his work so right now it's a
standalone script you run it or imported

289
00:20:25,200 --> 00:20:30,390
just like anything kick it off and it's
going to go through and start with your

290
00:20:30,390 --> 00:20:34,680
first server identify the links identify
who the link is configured as and kind

291
00:20:34,680 --> 00:20:37,380
of track the path as it goes

292
00:20:37,380 --> 00:20:41,340
so it's it's pretty intuitive i guess
it's just like crawling links on the

293
00:20:41,340 --> 00:20:46,530
website but you know links and databases
i was just one faster it's not

294
00:20:47,399 --> 00:20:50,399
let's see okay here we go

295
00:20:51,450 --> 00:20:54,599
and anyway it will finish you'll get
some summary data and hopefully a second

296
00:20:54,599 --> 00:20:59,399
you kind of see the link basket longer
and longer and then you can use that for

297
00:20:59,399 --> 00:21:04,589
remediation hopefully at the end we were
inspired by the bloodhound gang and we

298
00:21:04,589 --> 00:21:11,129
started messing around with the with
neo4j to kind of visualize some of this

299
00:21:11,129 --> 00:21:16,408
stuff and right now this is just kind of
a default view it has no analytic

300
00:21:16,409 --> 00:21:19,769
capabilities just like the most simplest
visualization we could do without

301
00:21:19,769 --> 00:21:24,629
knowing what we're doing so this is
actually a live call i did three weeks

302
00:21:24,629 --> 00:21:28,168
ago that I anonymize the data but this
is a single server we got access to and

303
00:21:28,169 --> 00:21:32,249
from that this was the web and then out
of these like half of these are sysadmin

304
00:21:32,249 --> 00:21:35,789
links so it's pretty neat i just thought
i'd use that to help people visualize

305
00:21:35,789 --> 00:21:39,299
the impact now this one's my favorite

306
00:21:39,299 --> 00:21:42,719
this is another privilege escalation
method i'm a lot of you guys are

307
00:21:42,719 --> 00:21:48,149
familiar ever who's not familiar with
unc pass awesome that makes this easy

308
00:21:48,149 --> 00:21:52,379
alright so UNC path you know what they
do I'm in SQL Server there's a ton of

309
00:21:52,379 --> 00:21:56,488
stored procedures that support file past
everything that supports the file path

310
00:21:56,489 --> 00:22:00,659
supports the UNC path just like pretty
much every windows thing ever and so

311
00:22:00,659 --> 00:22:05,820
what you can do with those functions is
forced the SQL server to authenticate to

312
00:22:05,820 --> 00:22:09,450
you the attacker as the service account
and from there you can actually relay

313
00:22:09,450 --> 00:22:14,369
the password hashes out or crack them
offline so this kind of looks like from

314
00:22:14,369 --> 00:22:19,918
a tax perspective you would connect to
whatever server1 you'd force it to

315
00:22:19,919 --> 00:22:22,859
authenticate you in most cases you're
going to target two servers that are

316
00:22:22,859 --> 00:22:25,529
running the same service account because
you know they have privileges on each

317
00:22:25,529 --> 00:22:28,349
other you know you have local admin on
that box you don't have to guess you

318
00:22:28,349 --> 00:22:33,330
don't have to spray so you'll really get
over you can check out on authentication

319
00:22:33,330 --> 00:22:39,119
and you can put your payload over
whatever you want to do and right so the

320
00:22:39,119 --> 00:22:42,478
way the reason this is so impeccable is
that the public role that means everyone

321
00:22:42,479 --> 00:22:46,379
who can connect to SQL Server regardless
of privilege by default on every version

322
00:22:46,379 --> 00:22:50,908
of SQL Server ever has the privileges to
execute XP dirty and file exists which

323
00:22:50,909 --> 00:22:53,820
you can put unc pass in which will
enforce the server to authenticate to

324
00:22:53,820 --> 00:22:57,570
you where you can capture their hashes
so that's cool

325
00:22:59,120 --> 00:23:04,250
I reach out to Microsoft while ago and
they basically said it was intended use

326
00:23:04,250 --> 00:23:10,130
case so it is what it is i wrote a kind
of ad hoc script once again that i'll

327
00:23:10,130 --> 00:23:16,490
plan on rolling into power of SQL
eventually and it does everything i just

328
00:23:16,490 --> 00:23:22,190
described so you load it up actually use
it is so you import power of SQL and

329
00:23:22,190 --> 00:23:25,340
then you importante which is this
amazing tool kits kindly respond for

330
00:23:25,340 --> 00:23:28,520
powershell run by this guy named Kevin
Robinson Robinson Robinson sorry if I

331
00:23:28,520 --> 00:23:32,090
fucked up in it and then you run this
script the script

332
00:23:32,090 --> 00:23:37,639
well I do ESPN dump will take that will
attempt to connect us all the SQL

333
00:23:37,640 --> 00:23:41,120
servers and then it will do that UNC
injection and capture all the hashes

334
00:23:41,120 --> 00:23:48,290
with ave all the powershell magic so
this is my small environment of nine

335
00:23:48,290 --> 00:23:53,420
servers in about three seconds it starts
to rain shells shells sorry force of

336
00:23:53,420 --> 00:23:57,980
habit hashes I'm so not used to seeing
service account hashes come through and

337
00:23:57,980 --> 00:24:02,300
this might seem like a lot but it's very
little like for example 250 servers we

338
00:24:02,300 --> 00:24:06,200
would be getting 250 service worth of
hashes coming through my screen there so

339
00:24:06,200 --> 00:24:10,610
it's an incredible way to do privilege
escalation naturally there's some

340
00:24:10,610 --> 00:24:14,479
implicit matter movement there so i
think i have like two minutes left so

341
00:24:14,480 --> 00:24:21,080
i'm going to rush through this you can
go from basic OS 267 there's a lot of

342
00:24:21,080 --> 00:24:25,460
ways to do it if your OS admin you can
dump the LSA secrets and older versions

343
00:24:25,460 --> 00:24:29,000
you can just get it you can do process
migration token stealing single user

344
00:24:29,000 --> 00:24:33,290
mode . you pick your poison here's a
slide with 12 tools download offline

345
00:24:33,290 --> 00:24:37,040
play with it it's very easy to get to
data from the admin perspective that you

346
00:24:37,040 --> 00:24:41,659
would normally have our were intended to
have post exploitation and I'm going

347
00:24:41,660 --> 00:24:45,290
through the super quick we have
establishing persistence finding

348
00:24:45,290 --> 00:24:50,570
sensitive data and actual trading that
data persistence is really cool and SQL

349
00:24:50,570 --> 00:24:56,659
server because you can actually maintain
access and execute OS commands and store

350
00:24:56,660 --> 00:25:02,000
all your all your periodic execution
whatever whatever you're pretty awesome

351
00:25:02,000 --> 00:25:06,020
persistence method is on SQL layer so
you never have to drop anything in the

352
00:25:06,020 --> 00:25:10,600
registry you never have to drop anything
on the disk it's stored as an SQL object

353
00:25:10,600 --> 00:25:14,260
and then executed based on whatever the
trigger is so there are literal triggers

354
00:25:14,260 --> 00:25:19,210
just like in windows in SQL server you
can configure their agent jobs which are

355
00:25:19,210 --> 00:25:24,160
very similar schedule tasks you can mod
and backdoor existing functionality or

356
00:25:24,160 --> 00:25:27,610
you can use startup procedures which is
very similar to kind of the current

357
00:25:27,610 --> 00:25:32,229
version Ron and windows registry so all
of this stuff is on the SQL layer never

358
00:25:32,230 --> 00:25:35,650
touches the US and then naturally
anything you can do on the OS you can do

359
00:25:35,650 --> 00:25:39,490
through SQL server because you can just
push that down a couple tips for finding

360
00:25:39,490 --> 00:25:44,350
sense of data on scale look for large
databases look for databases using

361
00:25:44,350 --> 00:25:48,820
transparent encryption transparent
Christian is exactly what it sounds like

362
00:25:48,820 --> 00:25:52,059
if I login as a sysadmin I can see all
the data it's only good when you pull

363
00:25:52,059 --> 00:25:54,190
the disc out of the drive and walk out
of the building

364
00:25:54,190 --> 00:25:57,730
I'm so a lot of people are using it for
pci compliance and other types of

365
00:25:57,730 --> 00:26:01,330
compliance which means if you hit it
logically you're going to get everything

366
00:26:01,330 --> 00:26:06,158
that's very good for targeting that was
a I think that's James recommended that

367
00:26:06,159 --> 00:26:11,799
to us which was awesome also searching
by keywords digit into I think he's the

368
00:26:11,799 --> 00:26:13,510
first person is all use this technique

369
00:26:13,510 --> 00:26:16,600
yeah I was like two decades ago or
something but anyways give credit where

370
00:26:16,600 --> 00:26:20,168
credit's steel and the data exfiltration
over a million different avenues

371
00:26:20,169 --> 00:26:25,510
everybody familiar exfiltration
techniques generally tcp UDP direct

372
00:26:25,510 --> 00:26:31,780
database connections etc yeah alright
let's jump to the data dumping there's a

373
00:26:31,780 --> 00:26:35,590
bunch of cheats for you guys there check
it out offline since I'm have like 30

374
00:26:35,590 --> 00:26:46,600
seconds left one of this is actually
going to playing mmm that says goin in

375
00:26:46,600 --> 00:26:47,139
deep thought

376
00:26:47,140 --> 00:26:52,450
anyways i'm grabbing in theory the list
of SPN and piping it right into the

377
00:26:52,450 --> 00:26:55,000
threaded data so you're basically going
to be you could run this against your

378
00:26:55,000 --> 00:27:00,940
targeted list as well I don't know why
this up there we go okay right so you

379
00:27:00,940 --> 00:27:04,120
could pipe your whole list of accessible
service to this it will scour all of

380
00:27:04,120 --> 00:27:07,780
them for specific columns containing
keywords and if you're looking for

381
00:27:07,780 --> 00:27:12,250
cardholder data i also have a long
formula check so we'll check that so

382
00:27:12,250 --> 00:27:15,820
that's really really nice we find tons
of cardholder data outside of UCI

383
00:27:15,820 --> 00:27:20,049
environments using that so it's andy
anyways general recommendations and

384
00:27:20,049 --> 00:27:23,080
force the privilege of least privilege
everywhere to save all those dangerous

385
00:27:23,080 --> 00:27:24,280
stored procedures we talk

386
00:27:24,280 --> 00:27:26,920
about that result in public basically
directly owning the server

387
00:27:26,920 --> 00:27:31,330
out-of-the-box audit fixed insecure
configurations on a periodic basis

388
00:27:31,330 --> 00:27:35,080
because the surface of attack and no one
attacks will change over time a ton of

389
00:27:35,080 --> 00:27:39,760
people do application testing very few
people do database pen testing or

390
00:27:39,760 --> 00:27:43,030
database database configuration reviews
so make sure that include that in your

391
00:27:43,030 --> 00:27:48,610
you're planning your attack like that
sorry secure development lifecycle you

392
00:27:48,610 --> 00:27:51,580
can also use policy based management to
standardize and enforce your

393
00:27:51,580 --> 00:27:55,210
configurations on SQL Server and make
sure to enable editing at the server and

394
00:27:55,210 --> 00:27:58,660
database level everything that I talked
about today can be audited there's an

395
00:27:58,660 --> 00:28:00,160
event ID for all of it

396
00:28:00,160 --> 00:28:03,010
arms and I've done some blog so if you
want the details go check those out

397
00:28:03,010 --> 00:28:08,440
otherwise any questions and I was too
much information a short amount of time

398
00:28:08,440 --> 00:28:15,040
to go back all the way back to thirty
Seconds go

399
00:28:15,040 --> 00:28:33,520
ok now let me clarify it could be built
wall attached to the main or built prior

400
00:28:33,520 --> 00:28:36,730
to being on the domain and then added as
long as it's on the domain it's

401
00:28:36,730 --> 00:28:39,730
vulnerable sir

402
00:28:42,640 --> 00:28:50,830
the question was can I publish the gist
of all the demos I did I don't know how

403
00:28:50,830 --> 00:28:54,100
to do that but I will work with you
offline to publish the videos as just

404
00:28:54,100 --> 00:28:55,179
alright I got time

405
00:28:55,180 --> 00:28:58,900
thank you guys for everything and
attending have a good time at three

