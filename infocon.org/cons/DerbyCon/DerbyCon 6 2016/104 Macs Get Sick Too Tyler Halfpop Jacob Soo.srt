1
00:00:00,000 --> 00:00:52,680
guys we're gonna go ahead and get
started here it's a two o'clock title of

2
00:00:52,680 --> 00:01:02,190
the talk that we're giving today is max
get sick too and first much like to give

3
00:01:02,190 --> 00:01:08,490
a big thank you to derby khan and Dave
this is really awesome about this is one

4
00:01:08,490 --> 00:01:11,490
of my favorite conferences a year come
in it's always really fun everyone's

5
00:01:11,490 --> 00:01:17,820
really nice has Dave's a second career
modeling the unicorn he looks really

6
00:01:17,820 --> 00:01:25,529
good yeah so big thank you shot out this
is a talk I put together with a

7
00:01:25,530 --> 00:01:26,729
co-worker of mine

8
00:01:26,729 --> 00:01:30,509
Jacob sooo he lives in singapore and
unfortunately wasn't able to make it

9
00:01:30,509 --> 00:01:41,460
over here we're both now researchers at
palo alto networks between over just

10
00:01:41,460 --> 00:01:44,158
kind of a little bit about us and some
of our history

11
00:01:44,159 --> 00:01:49,890
Jacob has worked in the government in
singapore DSO and the Ministry of Home

12
00:01:49,890 --> 00:01:54,960
Affairs home affairs and then to palo
alto networks in the Global Security

13
00:01:54,960 --> 00:02:00,179
Response Team and then my previous
experience at Salesforce general

14
00:02:00,180 --> 00:02:03,990
dynamics fidelis tables cybersecurity
and then at Global

15
00:02:04,659 --> 00:02:09,099
Security Response Team alto networks and
I guess we're both now researchers at

16
00:02:09,098 --> 00:02:14,470
mario and will marry smashing an hour
that's what we try to do all day long

17
00:02:14,470 --> 00:02:19,780
just kind of a brief overview for you
guys a little bit but we're going to

18
00:02:19,780 --> 00:02:23,799
talk about so first off we're going to
go over a little bit about why care

19
00:02:23,799 --> 00:02:28,060
about malware a little overview of the
landscape and kind of what's going on

20
00:02:28,060 --> 00:02:32,860
and then we're gonna start diving into
setting up an environment and then

21
00:02:32,860 --> 00:02:39,310
looking at some our and hopefully it's
fun as much fun as comets having their

22
00:02:39,310 --> 00:02:51,760
hello I'm a Mac and i'm a pc baxter sure
sure it's been tight you okay no I'm not

23
00:02:51,760 --> 00:02:54,790
okay i have that virus that's going
around

24
00:02:54,790 --> 00:02:58,450
oh thank you you better stay back this
one's a doozy

25
00:02:58,450 --> 00:03:02,230
that's okay I'll be fine no no do not be
heir last you there hundred and fourteen

26
00:03:02,230 --> 00:03:08,349
thousand known viruses 4pcs he sees not
max so just grab me I think I gotta

27
00:03:08,349 --> 00:03:14,920
crash hey if you feel like that hope
good so how many of you guys out there

28
00:03:14,920 --> 00:03:16,510
remember seeing all those commercials

29
00:03:16,510 --> 00:03:21,790
okay yeah okay so a lot of high school
so that was kind of something that

30
00:03:21,790 --> 00:03:26,319
Apple's trying to put forward is you
know max they don't get viruses I hear

31
00:03:26,319 --> 00:03:29,649
that all the time from so many people
that but it's like community can happen

32
00:03:29,650 --> 00:03:34,840
it's impossible and this was actually on
apple's website back in $MONTH 2012 as a

33
00:03:34,840 --> 00:03:40,569
screenshot saying it doesn't get viruses
it's not susceptible you can safeguard

34
00:03:40,569 --> 00:03:44,060
your data by doing nothing you're just
good

35
00:03:44,060 --> 00:03:49,819
so they don't they don't have that on
there anymore so with a little bit of

36
00:03:49,819 --> 00:03:55,670
the the reality i love this quote by
Charlie Miller he he said Mac OS X is

37
00:03:55,670 --> 00:03:58,849
like living in a farmhouse in the
country with no locks and windows is

38
00:03:58,849 --> 00:04:04,099
living in a house with bars on the
windows in the bad part of town and then

39
00:04:04,099 --> 00:04:07,459
that's a that's a picture actually i
love that picture he gave a DEFCON talk

40
00:04:07,459 --> 00:04:13,069
and he talked about building a cyberwar
team for a North Korea and Sony like

41
00:04:13,069 --> 00:04:18,560
photoshopped himself in all these
pictures with the supreme leader he's

42
00:04:18,560 --> 00:04:22,910
he's a pretty good character so a little
bit more than reality

43
00:04:22,910 --> 00:04:28,100
bit9 put together a report and they said
2015 was the most prolific here in the

44
00:04:28,100 --> 00:04:33,800
history of a six-mile where there are
five times more OSX Mauer appeared in

45
00:04:33,800 --> 00:04:36,800
2015 the previous five years combined

46
00:04:38,090 --> 00:04:43,820
so it's definitely a trend in an uptick
and then also this was from $MONTH 2015

47
00:04:43,820 --> 00:04:47,360
mac OS x 1 this list

48
00:04:47,360 --> 00:04:51,169
this is not the list that you want to
win tho of the highest number of

49
00:04:51,169 --> 00:04:58,280
vulnerabilities found and then iphones
next after it and this chart here we can

50
00:04:58,280 --> 00:05:01,880
see a little bit of kind of a trend as
well the increasing number of

51
00:05:01,880 --> 00:05:05,180
vulnerabilities and i mean that that
might just because more people are

52
00:05:05,180 --> 00:05:07,190
looking at as well

53
00:05:07,190 --> 00:05:10,520
more people doing research

54
00:05:10,520 --> 00:05:14,090
this is definitely getting more popular
I know when I look around here a lot of

55
00:05:14,090 --> 00:05:17,150
these conferences i see tons of people
with macs tons of people are using them

56
00:05:17,150 --> 00:05:20,929
enterprises are starting to use them a
lot more they're becoming a lot more

57
00:05:20,930 --> 00:05:24,919
enterprise friendly I'm according to net
market share

58
00:05:24,919 --> 00:05:27,820
they made up about like five percent of
the

59
00:05:27,820 --> 00:05:32,409
desktop market share I think it's
definitely growing at least from my

60
00:05:32,410 --> 00:05:37,840
experience looking around here we have
another chart that a co-worker of mine

61
00:05:38,770 --> 00:05:45,549
Claude rope and just showing again just
kind of the uptick in the different kind

62
00:05:45,550 --> 00:05:50,560
of our families he broke it out into are
not families but different types and I

63
00:05:50,560 --> 00:05:57,160
kind of broke it out we can see
definitely on the rise and this was a

64
00:05:57,160 --> 00:06:03,130
fun 1i used virustotal intelligence and
I just wanted to count the number of

65
00:06:03,130 --> 00:06:07,360
hashes and then the the virus names and
it was kind of hard because a lot of the

66
00:06:07,360 --> 00:06:11,230
different AV engine to use like all
these different weird names but sophos

67
00:06:11,230 --> 00:06:15,250
had a pretty good naming convention and
just over like the past couple years I

68
00:06:15,250 --> 00:06:18,610
think I didn't count the number of
hashes and it was kind of no surprise

69
00:06:18,610 --> 00:06:24,280
that adware like clear is is the biggest
number of police samples and hashes out

70
00:06:24,280 --> 00:06:29,530
there install core was almost fifty
percent and we see that definitely a lot

71
00:06:29,530 --> 00:06:33,400
of the window side as well tons of
adware with that and then geo is another

72
00:06:33,400 --> 00:06:36,400
popular one that we see a lot

73
00:06:38,490 --> 00:06:43,740
so we're going to get into just setting
up a little bit of analysis environment

74
00:06:43,740 --> 00:06:49,080
for dealing with malware and I get this
question quite a bit not a lot of people

75
00:06:49,080 --> 00:06:53,789
have looked at macmall or know how to
setup an environment the biggest thing

76
00:06:53,789 --> 00:06:56,909
the first thing is we need a virtual
machine you don't be running this on a

77
00:06:56,910 --> 00:07:02,280
real system obviously anybody's done in
our analysis and then according to the

78
00:07:02,280 --> 00:07:07,380
max license agreement and you need a mac
to do that i'm sure a conference with a

79
00:07:07,380 --> 00:07:12,030
bunch of hackers you guys probably know
how to run that on other systems but at

80
00:07:12,030 --> 00:07:16,289
least according to apple's licensing you
need a mac and then you can run two

81
00:07:16,289 --> 00:07:21,360
additional copies with that my favorite
virtualization software that i like to

82
00:07:21,360 --> 00:07:27,270
use vmware fusion it's so easy to setup
a mac environment you just like a couple

83
00:07:27,270 --> 00:07:32,068
clicks file new install OSX from the
recovery partition and you have a vm

84
00:07:32,069 --> 00:07:36,870
that you can snap shot and start
analyzing our with so once we have our

85
00:07:36,870 --> 00:07:40,650
vm there are a couple security features
that Apple builds in that we need to

86
00:07:40,650 --> 00:07:48,210
disable in order to be as vulnerable as
possible i guess so the first thing is

87
00:07:48,210 --> 00:07:52,380
disabling gatekeeper and it's kind of
like a whitelist you can think of and

88
00:07:52,380 --> 00:07:56,759
that's in your security and privacy and
you just want to have allow obligation

89
00:07:56,759 --> 00:08:02,099
so you can run whatever and then apple
also includes expert X and that's you

90
00:08:02,099 --> 00:08:07,259
think of that is kinda like a blacklist
and that's apple updates that with

91
00:08:07,259 --> 00:08:14,190
different either hashes Mars will see it
in a second dr as well but for that we

92
00:08:14,190 --> 00:08:17,610
just want to if you're going to have
your vm on the internet prevent it from

93
00:08:17,610 --> 00:08:21,270
getting updates but most the time you're
doing analysis you're not going to have

94
00:08:21,270 --> 00:08:22,979
it on the internet anyways

95
00:08:22,980 --> 00:08:28,380
you can delete the X protect signature
files or else a file does get quarantine

96
00:08:28,380 --> 00:08:31,980
if you're looking at something old
that's that's known it's just an

97
00:08:31,980 --> 00:08:36,870
extended attributes that you can remove
with this X attr dashti and in the

98
00:08:36,870 --> 00:08:43,080
quarantine attribute you can remove
didn't mention also that X protect does

99
00:08:43,080 --> 00:08:45,600
come with the RS support now which is
pretty cool

100
00:08:45,600 --> 00:08:51,840
there's this file in your expert bundle
expert that yarn it contains like over

101
00:08:51,840 --> 00:08:56,400
50 rules so if you guys want some free
are rules to look at you can just jump

102
00:08:56,400 --> 00:08:59,850
in to that file this is an example of
one of them that's in there for key

103
00:08:59,850 --> 00:09:04,080
Ranger she's right in there it's kinda
cool

104
00:09:06,960 --> 00:09:10,380
the other thing that we want to disable
is system integrity protection and this

105
00:09:10,380 --> 00:09:15,750
was introduced with l copied on and its
called a pike rootless at first and in

106
00:09:15,750 --> 00:09:18,390
effect there's still a root account but
it's just a root account that can do

107
00:09:18,390 --> 00:09:24,420
less so it restricts things like d
tracing debugging of protected apps no

108
00:09:24,420 --> 00:09:31,260
kernel debugging only signed kernel
extensions no modifying nvram and this

109
00:09:31,260 --> 00:09:36,000
is kind of a fun little cartoon that i
really like on the side here someone

110
00:09:36,000 --> 00:09:39,150
steals my laptop while i'm logged in you
can read my email take my money and

111
00:09:39,150 --> 00:09:42,930
personally meet my friends at least they
won't be able to install drivers so

112
00:09:42,930 --> 00:09:46,229
please forget their I think that's like
a common thing and security right like

113
00:09:46,230 --> 00:09:49,410
you do all these other things but no
drivers that's good

114
00:09:51,550 --> 00:09:56,620
and then also the system integrity
production also has a list of protected

115
00:09:56,620 --> 00:10:01,810
files and that's in this file your
system library sandbox real estate com

116
00:10:02,529 --> 00:10:07,839
there's a list of exceptions it's in
another file and then in effect files

117
00:10:07,839 --> 00:10:10,149
are given this extended attributes as
well

118
00:10:10,149 --> 00:10:16,029
combat apple that ruthless and then on
the right here we can see just kind of

119
00:10:16,029 --> 00:10:22,089
some directories from apple's website
that are protected system user been all

120
00:10:22,089 --> 00:10:26,920
the things you think of you want to
disable that we're doing our analysis

121
00:10:26,920 --> 00:10:30,040
because we want to be able to do things
like be tracing kernel debugging all

122
00:10:30,040 --> 00:10:34,930
that so how we do that is especially in
the vm this is kind of tricky have to

123
00:10:34,930 --> 00:10:40,930
reboot the vm and then hit command are
right when you're booting up and it

124
00:10:40,930 --> 00:10:43,420
takes takes me like so many times to get
that right i don't know why it's like

125
00:10:43,420 --> 00:10:47,709
that's like the hardest part of it maybe
of all this is to get that butt and then

126
00:10:47,709 --> 00:10:51,969
once you boot up you launch the terminal
go to utilities and there's a utility

127
00:10:51,970 --> 00:10:57,970
that they include csru till you run at
CSR util disabled and you see a sorry

128
00:10:57,970 --> 00:11:01,660
tale status and look at everything
that's in there the other way that you

129
00:11:01,660 --> 00:11:07,600
can disable system integrity protection
is if you get assigned Colonel extension

130
00:11:07,600 --> 00:11:11,050
code signing certificate from Apple
those are kind of difficult to come by

131
00:11:11,050 --> 00:11:15,279
from whatever I think they'll give them
to only companies and you have to have a

132
00:11:15,279 --> 00:11:18,700
good reason and a few different special
key words I've heard and you can maybe

133
00:11:18,700 --> 00:11:23,200
get one but it's easier just to do it
the other way

134
00:11:24,899 --> 00:11:28,920
but interesting in this kind of opens up
an interesting technique that malware

135
00:11:28,920 --> 00:11:33,059
could use to Detective it's running
analysis environment because to analyze

136
00:11:33,059 --> 00:11:37,170
an hour we need to disable system
integrity production and you can check

137
00:11:37,170 --> 00:11:41,490
to see if system integrity protection is
disabled from user land with this csr

138
00:11:41,490 --> 00:11:46,949
check API so now we could just call that
and then if sip is disabled

139
00:11:47,519 --> 00:11:51,839
it's probably gonna be running analysis
environment and you know just don't do

140
00:11:51,839 --> 00:11:52,619
anything bad

141
00:11:52,619 --> 00:11:59,069
pretend like you're good and close or
whatever so that's kinda interesting us

142
00:11:59,069 --> 00:12:03,689
Stefan sr also has a kind of show me
this that there's some undocumented

143
00:12:03,689 --> 00:12:07,860
commands with csr utility it's kinda
interesting you can do dash dash without

144
00:12:07,860 --> 00:12:11,550
and then disable like certain features
like only the ones that you want not

145
00:12:11,550 --> 00:12:12,300
keeping it

146
00:12:12,300 --> 00:12:18,868
many people like without Colonel
extension signing with without dtrace

147
00:12:18,869 --> 00:12:31,319
restrictions so forth so uh time is it
now we're certain time i'll get to the

148
00:12:31,319 --> 00:12:34,019
fun stuff that's all the boring stuff
right like setting it up and all that

149
00:12:34,019 --> 00:12:38,910
now all kind of dive in look at a few
different our samples go through that

150
00:12:39,480 --> 00:12:47,519
so the first sample we talk about is
this soft see complex sample and there's

151
00:12:47,519 --> 00:12:52,889
a blog that were going to be posting
with this I think upcoming talking about

152
00:12:52,889 --> 00:12:53,279
it

153
00:12:53,279 --> 00:12:57,540
disable that analyzed with a couple of
coworkers of mine Danny Cruz and I rob

154
00:12:57,540 --> 00:13:00,360
cone

155
00:13:00,360 --> 00:13:07,920
so the first thing we need to know in
reversing OSX samples usually x64 mako's

156
00:13:07,920 --> 00:13:11,790
we also need to know about objective-c
the first thing is the calling

157
00:13:11,790 --> 00:13:18,329
convention on x64 and we can see at the
bottom the linux bsd and mac the way

158
00:13:18,329 --> 00:13:24,779
arguments are pushed for a call into
these registers are dirs I RDX rcx are

159
00:13:24,779 --> 00:13:29,160
eight or nine and then I listener
reference here i'll make these slides

160
00:13:29,160 --> 00:13:31,949
available with this guy has an awesome
website for a lot of really good

161
00:13:31,950 --> 00:13:38,790
low-level details acne.org that's where
this chart came from here to mention the

162
00:13:38,790 --> 00:13:40,829
other thing when you're reversing
objective-c you're going to see all

163
00:13:40,829 --> 00:13:47,219
these objective-c message send calls and
that sends a message for a simple return

164
00:13:47,220 --> 00:13:50,760
value to an instance of a class so the
first argument you're going to see

165
00:13:50,760 --> 00:13:55,260
pushing those registers is an argument
itself and then the next argument is

166
00:13:55,260 --> 00:14:00,240
actually the operation that for the
method that's going to be called so

167
00:14:00,240 --> 00:14:04,380
that's what we want secondly and then
any arguments that are passed to that

168
00:14:04,380 --> 00:14:07,310
API call come after that

169
00:14:07,310 --> 00:14:12,589
so just as an example from the initial
dropper of this office ii complex sample

170
00:14:12,590 --> 00:14:18,890
we can see we're setting up a call and
we can see that the string with format

171
00:14:18,890 --> 00:14:25,279
AP is is pushed into RSI with the move
command highlighted in red there and

172
00:14:25,279 --> 00:14:28,490
then you get all the way down to the
call to message sense so that's kind of

173
00:14:28,490 --> 00:14:33,980
a pain in the butt when you're reversing
thankfully we do have a hopper is it is

174
00:14:33,980 --> 00:14:40,550
pretty good decompiler for this so we
look at the initial dropper and hopper

175
00:14:40,550 --> 00:14:46,160
we can see pretty much exactly the same
as a lot easier to read then when

176
00:14:46,160 --> 00:14:47,569
looking at the Assembly there

177
00:14:47,570 --> 00:14:55,160
this is the main function we can see
some string with format calls a PDF and

178
00:14:55,160 --> 00:15:01,490
then there's also we're writing that to
a file and then we're gonna open that in

179
00:15:01,490 --> 00:15:05,990
preview and that's actually like a decoy
document will see in the next slide and

180
00:15:05,990 --> 00:15:11,990
then it's also writing this file / temp
content in the middle if you can see and

181
00:15:11,990 --> 00:15:14,750
then it's going to make that file
executable and then it's going to launch

182
00:15:14,750 --> 00:15:21,440
that / temp content and then this is a
picture of the decoy document it looks

183
00:15:21,440 --> 00:15:23,900
kind of like a aerospace type thing

184
00:15:23,900 --> 00:15:31,100
it's on Russian that's just kind of like
trick the user that hey this is ok no

185
00:15:31,100 --> 00:15:34,560
big deal we just have this cool PDF
that's all that happened

186
00:15:34,560 --> 00:15:40,290
and then just a little bit this next
layer that temp content file is actually

187
00:15:40,290 --> 00:15:43,949
what's gonna be setting up the
persistence on on a Mac there's tons of

188
00:15:43,950 --> 00:15:47,880
different locations for persistence in
almost like windows there's tons of ways

189
00:15:47,880 --> 00:15:51,150
to set up persistence as well

190
00:15:51,150 --> 00:15:58,410
sorry that monkey makes that so we have
like a launch agents launch demons you

191
00:15:58,410 --> 00:16:04,199
like old-school like Ron ways of setting
up persistence like linux ways all kinds

192
00:16:04,200 --> 00:16:08,100
of ways here and I also include a
reference from Patrick bordelles talk

193
00:16:08,100 --> 00:16:14,550
this year in RSA covered quite a few of
them but that persistence layer that we

194
00:16:14,550 --> 00:16:19,380
mentioned that $OPERAND / 10 content
file that gets launched that is going to

195
00:16:19,380 --> 00:16:24,270
use launch agents first persistence and
you can see that here there's a plist

196
00:16:24,270 --> 00:16:31,770
xml stuff first thing set up and then
it's making a directory and it's going

197
00:16:31,770 --> 00:16:40,020
to write a ke x ke xtd gonna write the
plist file and then a shell script start

198
00:16:40,020 --> 00:16:44,310
that Sh going to make those executable
and it's going to run the start Sh

199
00:16:44,310 --> 00:16:47,670
script and it's kind of common with a
lot of malware just like a bunch of like

200
00:16:47,670 --> 00:16:53,729
duct tape like she'll scripts and things
like that just kind of interesting so we

201
00:16:53,730 --> 00:16:58,530
look at the start shell script you're
just adding that the plist item metro to

202
00:16:58,530 --> 00:17:04,619
setup persistence an empty list item is
just xml and we can see what it looks

203
00:17:04,619 --> 00:17:09,540
like here running at load for that
Colonel extension that we had

204
00:17:10,890 --> 00:17:17,970
and so that kinda looks that except that
started ke xtd really current location

205
00:17:17,970 --> 00:17:21,690
this is the final payload and we look at
the main argument for that we have an mi

206
00:17:21,690 --> 00:17:26,190
being debugged function as well as it
connected to the internet and then

207
00:17:26,190 --> 00:17:29,670
asleep if it's not connected to the
internet and then we're going to call a

208
00:17:29,670 --> 00:17:36,900
subroutine after that does a lot of the
main bad stuff so that first call the am

209
00:17:36,900 --> 00:17:41,580
I being debugged is actually kind of
funny it's just a copypasta thing from

210
00:17:41,580 --> 00:17:47,280
the internet I found this originally on
my go sex reversers get hub he had the

211
00:17:47,280 --> 00:17:51,629
example the same exact name of the
function am I being debugged all the

212
00:17:51,630 --> 00:17:56,970
code is exactly the same and then they
found even a coke or command Rob

213
00:17:56,970 --> 00:18:00,840
actually found on a forum for apple like
back in $MONTH 2004 like this exact

214
00:18:00,840 --> 00:18:06,959
function so it's kinda interesting and
it's basically just a call to assist CTL

215
00:18:06,960 --> 00:18:14,340
there and then it's gonna check to see
if the ptrace flag and then you'll note

216
00:18:14,340 --> 00:18:16,169
the buggers found then remove itself

217
00:18:16,170 --> 00:18:20,910
this wasn't in the sample this is kind
of fun interesting one

218
00:18:21,840 --> 00:18:26,159
the the ptrace calling that and you can
actually call with a PT deny attached

219
00:18:26,160 --> 00:18:31,350
and if it if the sample is already being
debugged currently being traced it will

220
00:18:31,350 --> 00:18:35,370
just exit otherwise you call that
earlier and then you try to bug later

221
00:18:35,370 --> 00:18:38,850
it'll actually crash the the sample and
causes a segmentation fault

222
00:18:40,530 --> 00:18:48,149
we have that next function just that
connected to internet and the hours just

223
00:18:48,150 --> 00:18:52,200
doing a get request simple get request
to Google and just want to check to see

224
00:18:52,200 --> 00:18:56,820
if it has internet access before it
contacts anybody to try and hide us in

225
00:18:56,820 --> 00:19:03,840
the domains going to talk to so if that
succeeds it's not being debug it's it

226
00:19:03,840 --> 00:19:06,419
can connect to the internet and I mean
those are kind of common things a lot of

227
00:19:06,420 --> 00:19:11,490
malware want to do see if it's being
analyzed and see if it has internet and

228
00:19:11,490 --> 00:19:13,890
then it's gonna start doing its bad
stuff it's going to create this hello

229
00:19:13,890 --> 00:19:17,370
message where it's going to get all
kinds of information about the OS and

230
00:19:17,370 --> 00:19:24,479
then package that up for a post request
this is the ghetto s in function and we

231
00:19:24,480 --> 00:19:26,550
can see it's going to collect all sorts
of things

232
00:19:26,550 --> 00:19:32,850
username the process list all that jazz
and then it's going to decode the CTU

233
00:19:32,850 --> 00:19:37,260
servers out if you guys have looked at
malware done reversing you can probably

234
00:19:37,260 --> 00:19:41,850
see this is just kinda like a simple xor
looping around an excellent with a

235
00:19:41,850 --> 00:19:47,550
multibyte xor key that we have at the
bottom here and then it's doing that

236
00:19:47,550 --> 00:19:56,430
over just above 40 bytes to to decode
the CTU servers so we're doing this

237
00:19:56,430 --> 00:20:01,170
really simple way just to do this with
binary ninja it's like a new reversing

238
00:20:01,170 --> 00:20:07,320
tool that I really love they have a nice
API where you can just import binary

239
00:20:07,320 --> 00:20:12,060
ninja and then you load it up the marco
and then you're you're looking at this

240
00:20:12,060 --> 00:20:17,010
in a dissembler already so it's it's
easy just to pull the bites out using

241
00:20:17,010 --> 00:20:21,240
their api so we grabbed that we got the
XOR key at that location we're going to

242
00:20:21,240 --> 00:20:26,940
grab the server data and location and
then we just have a function to do the

243
00:20:26,940 --> 00:20:32,430
multibyte xor and then we're just going
to loop over every 24 bytes and decode

244
00:20:32,430 --> 00:20:36,930
the CTU servers and these are some syrup
servers that were decoded apple update

245
00:20:36,930 --> 00:20:41,580
dot org apple icloud stinnett itunes
dash helper . net

246
00:20:41,580 --> 00:20:46,740
and those have been associated with
Sophie and several different campaigns

247
00:20:46,740 --> 00:20:52,200
and then also we can see that it's
definitely trying to kind of social

248
00:20:52,200 --> 00:20:56,640
engineer users at that scene that you
know somebody like a junior person might

249
00:20:56,640 --> 00:21:00,450
see that and be like oh this is just
apple update its okay its not bad

250
00:21:03,080 --> 00:21:08,990
after we do all that this is an example
of the post request the initial hello

251
00:21:08,990 --> 00:21:14,630
message and i generate this just within
our environment we had our vm and I just

252
00:21:14,630 --> 00:21:18,470
have another linux vm and i'm using
something like I netsim to simulate

253
00:21:18,470 --> 00:21:24,320
internet services and then setting that
as the default gateway for to connect to

254
00:21:24,320 --> 00:21:28,730
and here we just have the post request
all that garbage is just encoded with a

255
00:21:28,730 --> 00:21:34,580
similar xor algorithm and it's all the
system information that we saw that the

256
00:21:34,580 --> 00:21:39,289
matter was collecting and then it post
that out and then there's other stuff

257
00:21:39,289 --> 00:21:49,610
the next sample i wanted to show
recently palo alto we did a labyrinth

258
00:21:49,610 --> 00:21:56,629
CTF and we had all kinds of different
challenges this is a picture here of the

259
00:21:56,630 --> 00:21:57,470
winners

260
00:21:57,470 --> 00:22:01,730
my boss made like a pew pew map of like
every time somebody 11 it like a cute

261
00:22:01,730 --> 00:22:06,620
house kind of fun and exciting over an
hour went back and forth and so yeah we

262
00:22:06,620 --> 00:22:10,279
have like almost 40 challenges or
something that all kinds of different

263
00:22:10,279 --> 00:22:16,309
tracks windows unix docs mobile threat
in random and there's one in particular

264
00:22:16,309 --> 00:22:23,389
I wanted to look at here it was an OSX
sample that I wrote

265
00:22:23,389 --> 00:22:29,120
we also gave out all kinds of cool
prizes money for the winners $5,000 for

266
00:22:29,120 --> 00:22:32,120
the first person to solve all the
challenges I feel like they probably

267
00:22:32,120 --> 00:22:35,360
earn it because I felt kind of overdid
it though is comparable and challenges

268
00:22:35,360 --> 00:22:42,408
for one person to do almost 40 so kudos
to those guys feel like I said that

269
00:22:42,409 --> 00:22:47,960
challenged the labyrinth CDF is kinda
like our associate ransomware challenge

270
00:22:47,960 --> 00:22:53,659
and it would go through and decrypt all
your PNG's in your downloads folder if

271
00:22:53,659 --> 00:22:58,669
you ran it and then it would pop up this
image congratulations all your PNG's are

272
00:22:58,669 --> 00:23:04,100
belong to us is all your monies as like
a joke but actually cooked a wall

273
00:23:04,100 --> 00:23:06,918
actually has that in their message for
that congratulations you've become a

274
00:23:06,919 --> 00:23:09,990
part of the cripple wall community like
it's like a

275
00:23:09,990 --> 00:23:14,580
you really got something good right but
we did include like a decrypt

276
00:23:14,580 --> 00:23:19,290
command-line argument okay somebody
actually did run it and then I mean I

277
00:23:19,290 --> 00:23:24,570
don't know what it will encrypt your
PNG's in your downloads folder but so

278
00:23:24,570 --> 00:23:28,590
we're looking at this first thing we
might want to do is run like dtrace and

279
00:23:28,590 --> 00:23:34,199
it's common estrace on linux you just
run with Exede you sudhi trust and then

280
00:23:34,200 --> 00:23:37,440
the program and then you're going to see
all the API calls that are made

281
00:23:38,370 --> 00:23:43,139
there's also a lot of other useful
recipes unlike those links there another

282
00:23:43,140 --> 00:23:48,390
huge dynamic utility might want to use
ms usage and you can monitor like all

283
00:23:48,390 --> 00:23:56,190
the file system activity with that OS X
also has all kinds of dynamic

284
00:23:56,190 --> 00:24:00,780
information just built in to the logs
you can be that with the console that

285
00:24:00,780 --> 00:24:04,590
app just popping that up you can look at
a lot of these logs otherwise if you

286
00:24:04,590 --> 00:24:08,850
want to be more like a command-line
cowboy you can just kind of taylor look

287
00:24:08,850 --> 00:24:12,059
at some of these different locations
here and then there's like a full list

288
00:24:12,059 --> 00:24:14,970
of a lot of the different forensic
artifacts at these links at the bottom

289
00:24:14,970 --> 00:24:22,110
of the reason i want to show this I
haven't seen a lot of swift now we're

290
00:24:22,110 --> 00:24:27,030
really like any but i think it's
interesting it's like a new language

291
00:24:27,030 --> 00:24:33,570
that Apple's come out with a type-safe
language runs on mac and i think linux

292
00:24:33,570 --> 00:24:37,980
as well and you can the coolest thing
about it really the only thing you know

293
00:24:37,980 --> 00:24:44,400
is that you can code with emojis which
is pretty awesome so you can have a poop

294
00:24:44,400 --> 00:24:48,990
class chickens so that's pretty fun

295
00:24:51,960 --> 00:24:55,950
so one of the main things when you open
up a swift example to start reversing it

296
00:24:55,950 --> 00:24:59,910
you're going to see all the names are
mangled and really ugly

297
00:25:00,510 --> 00:25:04,290
so here we have an example of the the
ransom message function in the middle

298
00:25:04,290 --> 00:25:10,440
there on the left and then i wrote like
a swift Mangler script based on this guy

299
00:25:10,440 --> 00:25:15,870
named aji seeing Sean he wrote this kind
of the 1i got the idea from and it's

300
00:25:15,870 --> 00:25:21,059
just showing out using a executable in
xcode to detangle the names

301
00:25:21,840 --> 00:25:24,600
he had it so like if you had a mac
version you can do it i only have a

302
00:25:24,600 --> 00:25:28,049
windows version vitac his ideas like
insanely expensive and you can only get

303
00:25:28,049 --> 00:25:32,879
it on one particular platform at a time
so i need to kind of like come up with a

304
00:25:32,880 --> 00:25:34,740
little bit of different workaround for
it

305
00:25:34,740 --> 00:25:39,960
hopper also has one as well and then
just if you want to learn more about

306
00:25:39,960 --> 00:25:44,640
Swift reverse-engineering guy named Ryan
starts gave a really good presentation

307
00:25:44,640 --> 00:25:49,049
and infiltrate con early this year at
the link there and I think Sean was

308
00:25:49,049 --> 00:26:06,510
going to write one for binary ninja at
some point to some mingling perfect yep

309
00:26:06,510 --> 00:26:07,379
exactly

310
00:26:07,380 --> 00:26:11,070
cool see ya bye ninja re doesn't that's
right from the source

311
00:26:11,070 --> 00:26:21,149
cool just like the resolution that's
really messed up for the demo it's gonna

312
00:26:21,149 --> 00:26:25,320
be hard to see zoom interval

313
00:26:30,240 --> 00:26:33,690
oh yeah it's really bad

314
00:26:33,690 --> 00:26:38,789
yeah sorry guys i had quite a few video
demos I was going to show you but I

315
00:26:38,789 --> 00:26:41,549
don't know how well that's going to work
it's pretty bad

316
00:26:41,549 --> 00:26:46,918
this is just kind of showing a script
using the windows to basically run the

317
00:26:46,919 --> 00:26:49,890
first script that will get you all the
mangled functions and then you're gonna

318
00:26:49,890 --> 00:26:55,830
run another script from within OSX to
just a shell out to run

319
00:26:57,690 --> 00:27:02,340
the utility built into Xcode and then
demand all those names get those names

320
00:27:02,340 --> 00:27:11,908
they're going to put them back into
hiding in windows so anyways after that

321
00:27:11,909 --> 00:27:15,659
demo we're going to see that there's an
interesting function called just get

322
00:27:15,659 --> 00:27:22,169
password and the the shower was actually
just calling this get password function

323
00:27:22,169 --> 00:27:27,120
to get the password that it was going to
use to encrypt the different files and

324
00:27:27,120 --> 00:27:29,489
here we can see it's really simple

325
00:27:29,490 --> 00:27:36,210
there's just a biter a and then there's
a password here i am floating around in

326
00:27:36,210 --> 00:27:42,240
my tin can far above the moon and then
it's going to return a string from that

327
00:27:42,240 --> 00:27:47,850
so it really easy way to solve this
challenge is we can just use OSX

328
00:27:47,850 --> 00:27:56,759
debugger ldb and there it's really
similar it has a lot of the aliases 4gb

329
00:27:56,759 --> 00:28:01,409
if you guys are similar with gdb and
there's also a couple of the lvm has a

330
00:28:01,409 --> 00:28:06,600
LGBT gb mapping that contains all the
aliases that you would need so things

331
00:28:06,600 --> 00:28:12,539
like our to run the the program B and
then you can do a puncture and address

332
00:28:12,539 --> 00:28:19,889
and b RL you can list all the
breakpoints BTC the backtraced rer read

333
00:28:19,889 --> 00:28:23,070
the registers a lot of the lot of the
commands are worth a lot more proposed

334
00:28:23,070 --> 00:28:27,750
and they start adding a lot of these
other aliases frb sure the arms and

335
00:28:27,750 --> 00:28:33,419
local bears d i will show the current
function that you're in otherwise you

336
00:28:33,419 --> 00:28:37,710
can specify 1s is gonna be a single step
if you guys are familiar with the

337
00:28:37,710 --> 00:28:43,080
bugging let's step into your just be
stepping through a program otherwise n

338
00:28:43,080 --> 00:28:47,820
is step over to be like see a call it
will actually not go into that function

339
00:28:47,820 --> 00:28:52,139
you'll just step over it and then Finn
will see accidentally go into that you

340
00:28:52,139 --> 00:28:58,139
don't want to be there you just do that
command step out otherwise x command you

341
00:28:58,139 --> 00:29:01,678
can examine different parts of memory
and then repeat that a certain number of

342
00:29:01,679 --> 00:29:04,880
times and then you specify a format
string

343
00:29:04,880 --> 00:29:11,780
like x4x usually or s4 strings will see
and then you can specify size an address

344
00:29:11,780 --> 00:29:19,040
another unique one is the p.o you can
print objective-c descriptions so here

345
00:29:19,040 --> 00:29:23,120
we have an example this one might work a
little bit better just showing we have

346
00:29:23,120 --> 00:29:47,570
our cat and then we're gonna run that is
that o.o yea was back

347
00:29:48,590 --> 00:30:03,949
no okay that'll work out there we go

348
00:30:03,950 --> 00:30:11,300
Peter's our hearts are guys so we're
just gonna launch the malware with LD be

349
00:30:11,300 --> 00:30:18,320
it was named crypto and i'm usually put
like a . danger extension specialist

350
00:30:18,320 --> 00:30:21,530
like windows malware that will make it
so you can't run it but doesn't really

351
00:30:21,530 --> 00:30:27,080
do anything I max probably an old habit
so we want to put a breakpoint that

352
00:30:27,080 --> 00:30:29,990
other demo where we would put it we
looked at the end of that

353
00:30:29,990 --> 00:30:33,650
get password function at the very end
and then we just put a breakpoint there

354
00:30:33,650 --> 00:30:37,400
and that's the location that we
specified and we ran it and stop there

355
00:30:37,400 --> 00:30:41,390
and we're going to read the registers
and return value if you guys are

356
00:30:41,390 --> 00:30:45,200
familiar thought reversing will be in
the RX register so we're going to use

357
00:30:45,200 --> 00:30:50,720
that examine command to look at the
memory at the location of you can

358
00:30:50,720 --> 00:30:54,710
specify register with dollar RX so this
you want to see the string at the

359
00:30:54,710 --> 00:31:00,230
register and we see the key for that
challenge was ground control to major

360
00:31:00,230 --> 00:31:03,510
tom

361
00:31:03,510 --> 00:31:08,580
and then we can do see we can continue
we see the little pop-up that says all

362
00:31:08,580 --> 00:31:18,929
the PNG's are belong to us and then we
renamed like the extension . labi like a

363
00:31:18,930 --> 00:31:23,190
lot of ransom or redeem we'll put some
their unique extension after all the

364
00:31:23,190 --> 00:31:28,320
files that they encrypt like I say we
did include this decrypt command-line

365
00:31:28,320 --> 00:31:31,800
argument there was like one guy on
twitter i didn't seem very happy about

366
00:31:31,800 --> 00:31:35,550
this challenge I mean we want to make it
kind of like realistic that you're

367
00:31:35,550 --> 00:31:38,760
analyzing now we're looking at it for
the challenge simply don't run it on a

368
00:31:38,760 --> 00:31:45,120
real system but then he found this this
function and he's he's better I think so

369
00:31:51,090 --> 00:31:58,590
so the next thing we're going to look at
as the hacking team RCS this is a map

370
00:31:58,590 --> 00:32:01,379
from Citizen lab in 2014

371
00:32:01,380 --> 00:32:05,250
I'm sure everyone is familiar with the
hacking team since they were breached

372
00:32:05,250 --> 00:32:10,530
their italian offensive security company
that sells a lot of offensive security

373
00:32:10,530 --> 00:32:16,379
tools to a lot of different governments
around the world and the sample going to

374
00:32:16,380 --> 00:32:23,160
get is their OS x version of rcs so the
first thing I'll do it just like when

375
00:32:23,160 --> 00:32:26,640
you're looking at windows malware the
process really transfers over really

376
00:32:26,640 --> 00:32:29,940
easy between Windows and Mac it's kind
of the same lot of the same skill supply

377
00:32:29,940 --> 00:32:35,310
what Windows you look at it like in
peace to do some of those schools first

378
00:32:35,310 --> 00:32:40,889
to like is the mock overview OSX
reversers for cut that open it up in

379
00:32:40,890 --> 00:32:45,630
that and just kind of start looking
around and we can see there's a segment

380
00:32:45,630 --> 00:32:50,610
the e frame you can see it's a protected
version of the flags

381
00:32:51,160 --> 00:32:56,860
or if we didn't open market overview
maybe we'd open up in ida and it would

382
00:32:56,860 --> 00:33:01,479
just tell us that this is useless
because it's encrypted and we can either

383
00:33:01,480 --> 00:33:10,600
keep going or not going this is Apple
this is actually apples built-in anti

384
00:33:10,600 --> 00:33:15,820
analysis binary protection and uh some
our users because there's no description

385
00:33:15,820 --> 00:33:20,889
stub actually in the malware it's all
apples doing this in the colonel

386
00:33:21,580 --> 00:33:26,080
it's using Blowfish encryption and it
Apple really designed it to help protect

387
00:33:26,080 --> 00:33:33,790
against piracy so there's this unprotect
vs mls segment I think that's don't

388
00:33:33,790 --> 00:33:38,440
steal mac OS anything you can see all
the code they're off to the right you

389
00:33:38,440 --> 00:33:43,510
can is initially I didn't really know
before kind of diving allows this lot of

390
00:33:43,510 --> 00:33:46,840
this is that Apple's Colonel's all open
source you can just look at it online

391
00:33:46,840 --> 00:33:52,090
open source . apple and downloading look
at it so that's the actual code you

392
00:33:52,090 --> 00:33:55,270
probably can't see it it's too small but
for doing this

393
00:33:55,270 --> 00:33:58,389
there's a kernel extension on
everybody's mac running that's don't

394
00:33:58,390 --> 00:34:03,970
steal mac OS x and then that's going to
help decode these segments with an smc

395
00:34:03,970 --> 00:34:11,050
key our hard work by these words guarded
please don't steal is really nice

396
00:34:11,050 --> 00:34:19,210
very cool so it we can do this with a
known now our sample this is from the

397
00:34:19,210 --> 00:34:22,030
server blog a while back

398
00:34:22,030 --> 00:34:25,870
initially this malware samples are all
around 2025 detection 'he's and then

399
00:34:25,870 --> 00:34:31,089
encrypted it and then I went 20 47 so
that might be useful for somebody

400
00:34:31,090 --> 00:34:33,770
pentesting guys out there

401
00:34:33,770 --> 00:34:38,509
so if we get a sample is protected

402
00:34:38,510 --> 00:34:42,980
let's go ahead and decrypt it the first
thing we can do is use O'Toole and a

403
00:34:42,980 --> 00:34:48,889
shell and look at it and we want to look
for flags 0x8 and that's for the st

404
00:34:48,889 --> 00:34:55,009
protected version and then class dump
has a built-in d protect tool that we

405
00:34:55,010 --> 00:35:03,920
can use to protect that this is just a
little demo showing that Iran the

406
00:35:03,920 --> 00:35:05,510
O'Toole to start with

407
00:35:05,510 --> 00:35:11,210
hopefully you guys can see that with the
0x8 flag i can see that segments

408
00:35:11,210 --> 00:35:17,859
protected and then we

409
00:35:17,859 --> 00:35:23,410
to protect with help and super easy
around just to protect and the binary or

410
00:35:23,410 --> 00:35:35,140
we can specify the architecture when you
specify the output file as well we did .

411
00:35:35,140 --> 00:35:45,259
decrypt it this way after we

412
00:35:45,260 --> 00:35:50,060
that now we're on 02 again and sorry i
got a new keyboard here as I'm like

413
00:35:50,060 --> 00:35:54,950
screwing up my hands are kinda hurting
suffering this like Kinesis keyboard

414
00:35:54,950 --> 00:36:02,779
it's like I don't know it's kind of
hardware to type on but and we want to

415
00:36:02,780 --> 00:36:07,160
look at the new decrypted file we can
see that that Flags is set to 0 now so

416
00:36:07,160 --> 00:36:13,430
it's decrypted the other option we have
is this is a paid tool server profile

417
00:36:13,430 --> 00:36:20,419
but it does all kinds of stuff not just
Mac Marco parsing you can do a lot of

418
00:36:20,420 --> 00:36:25,580
windows stuff Swift's docs pdfs i really
like it for pdfs because you can just

419
00:36:25,580 --> 00:36:28,940
look at all the streams really easily
and you haven't even has a built in

420
00:36:28,940 --> 00:36:35,930
JavaScript debugger but several actually
decrypt the segment for you so you can

421
00:36:35,930 --> 00:36:38,629
just look at it right in there which is
kinda cool

422
00:36:38,630 --> 00:36:44,329
and sir bros also greater approved so
that's how you know it's good right

423
00:36:44,930 --> 00:36:49,098
I found this one like on the old website
and he had like I really really

424
00:36:49,099 --> 00:36:56,809
passionate in testimony about it then
there's David a think this is the Deaf

425
00:36:56,809 --> 00:37:03,380
concerts with matt on them so actually
with that sample it doesn't really help

426
00:37:03,380 --> 00:37:07,369
us that much because there's another
pack around top of that so it's kind of

427
00:37:07,369 --> 00:37:11,539
like yo dawg i herd you liek packers so
we put back your packers you can pack

428
00:37:11,539 --> 00:37:18,109
will be back in just a little bit about
packers on the maxine there's only kind

429
00:37:18,109 --> 00:37:22,910
of a couple main ones on the window
seems like all kinds of them but upx is

430
00:37:22,910 --> 00:37:27,379
pretty pretty common just like on
windows and that's super easy to unpack

431
00:37:27,380 --> 00:37:36,019
just with the upx and dash D in the
binary otherwise if they break it it's

432
00:37:36,019 --> 00:37:40,279
pretty easy to to break ups won't
automatically unpacked with that you can

433
00:37:40,279 --> 00:37:45,500
just do it in a debugger pretty easily
looking for the jump it has a tail jump

434
00:37:45,500 --> 00:37:48,529
just like the windows version you can
see an example down there in the bottom

435
00:37:48,529 --> 00:37:57,769
of the jump RDX the other main one is
just impress and that one has like an

436
00:37:57,769 --> 00:38:01,609
initial stub that execute that impacts
the original code and then also another

437
00:38:01,609 --> 00:38:06,109
step and then the second stubble execute
and that'll jump into the original code

438
00:38:06,109 --> 00:38:13,578
so i was really easy to just see that
tail jump back into dld start the

439
00:38:13,579 --> 00:38:17,569
original code an OSX reverser put on it
and press number i have really tried it

440
00:38:17,569 --> 00:38:20,359
but that might work as well if you get a
sample

441
00:38:20,359 --> 00:38:21,920
it's worth trying

442
00:38:21,920 --> 00:38:27,799
but this sample actually has its own
custom packer that the hacking team

443
00:38:27,799 --> 00:38:32,089
developed and there's a really easy way
to get around it by just dumping the

444
00:38:32,089 --> 00:38:38,808
memory OSX reverser has a tool for that
called read them and we'll show a little

445
00:38:38,809 --> 00:38:46,700
example using that here we look at our
our first initial file just doing

446
00:38:46,700 --> 00:38:55,250
strings and we can't see anything in
there and we're gonna run it and just

447
00:38:55,250 --> 00:39:07,250
type any errors or output can also
doesn't mess up the pretty demo so we

448
00:39:07,250 --> 00:39:12,170
ran it and we're going to get top so you
guys do I are sock people recognize

449
00:39:12,170 --> 00:39:15,410
anything in there that doesn't look good

450
00:39:15,410 --> 00:39:18,890
the the pit and any of them look kind of
weird

451
00:39:20,480 --> 00:39:23,869
nope not that one I was trying to
highlight it as it was like jumping

452
00:39:23,869 --> 00:39:27,619
around like that random long random name
right anytime you see anything with like

453
00:39:27,619 --> 00:39:32,569
a weird random name it's probably
something that so 406 is the pit that we

454
00:39:32,569 --> 00:39:46,190
want to look at now we'll run read them
with DES help and just to show all the

455
00:39:46,190 --> 00:39:49,440
different options that we have available
to us

456
00:39:49,440 --> 00:39:56,400
we want the dash M for this example
which is going to dump the main binary

457
00:39:56,400 --> 00:39:59,400
for it

458
00:40:04,980 --> 00:40:09,150
you see 20 read man we specify that pit
that we saw her looking at it and top or

459
00:40:09,150 --> 00:40:15,329
use like activity of your things called
a mac or objective sees utilities the

460
00:40:15,329 --> 00:40:28,290
task explore and then we dump it to the
dump and we want cash em password and we

461
00:40:28,290 --> 00:40:34,950
can see that all dumped out for us
nicely and then now if we look at

462
00:40:34,950 --> 00:40:44,759
strings of this compact violin memory
what's that I it's just a market like

463
00:40:44,760 --> 00:40:46,859
you can open it up an idea

464
00:40:46,859 --> 00:40:51,359
well sort of in some things are perfect
with it but it's we'll see in a second

465
00:40:51,359 --> 00:40:54,540
it's easy enough to analyze social and
there's like symbols with it things and

466
00:40:54,540 --> 00:40:58,079
then here i'm just showing strings and I
know there's a couple symbols in it for

467
00:40:58,079 --> 00:41:00,720
stealing firefox passwords i did a grip

468
00:41:00,720 --> 00:41:11,549
just so we don't see all the garbage in
there as well so have we

469
00:41:11,550 --> 00:41:16,500
that up in any dissembler here we just
have AI de and its really nice to get

470
00:41:16,500 --> 00:41:19,590
all this symbol information with which
is like really helpful just to see what

471
00:41:19,590 --> 00:41:24,270
all the the different functions are
doing we have stuff like steel firefox

472
00:41:24,270 --> 00:41:30,090
Password that we already saw turning on
your webcam you know some government

473
00:41:30,090 --> 00:41:33,900
wants to see people make it i don't know
punishment enough for them

474
00:41:36,840 --> 00:41:40,380
yeah all kinds of like espionage type
functions and there's does all kinds of

475
00:41:40,380 --> 00:41:51,690
stuff it's like doesn't of features and
then so the this implant actually has a

476
00:41:51,690 --> 00:41:55,050
colonel component as well rootkit so I
just wanted to talk a little bit about

477
00:41:55,050 --> 00:41:59,880
doing kernel debugging in case you need
that so as far as setting it up like I

478
00:41:59,880 --> 00:42:06,720
said you can just download the colonel
right from open source . apple.com and

479
00:42:06,720 --> 00:42:11,399
then you need to download install xcode
and then download the kernel debugging

480
00:42:11,400 --> 00:42:17,400
kit for the version that you have and
then another kind of cool thing to do is

481
00:42:17,400 --> 00:42:20,970
since it's all open source you can
compile your own kernel so if you wanted

482
00:42:20,970 --> 00:42:23,720
to change some things

483
00:42:23,720 --> 00:42:27,259
or whatever you might want to change or
maybe doing some research and wanna

484
00:42:27,260 --> 00:42:32,030
wanna do something you can compile it
pretty easily just using i want to

485
00:42:32,030 --> 00:42:36,770
install xcode in the command line
utilities just doing make and then

486
00:42:36,770 --> 00:42:41,210
you're gonna get the colonel file that
you're in a copy in your vm and then

487
00:42:41,210 --> 00:42:44,720
apples recommended ways to do like a
touch on that file that you copied in

488
00:42:44,720 --> 00:42:48,529
there otherwise you can if you want to
be like a cowboy you can just remove the

489
00:42:48,530 --> 00:42:52,040
colonel case that's in there and then
reboot and then when you come back in

490
00:42:52,040 --> 00:42:56,810
you can do you named ash and you should
see that it's your Colonel now that you

491
00:42:56,810 --> 00:42:57,470
could prob

492
00:42:57,470 --> 00:43:00,470
that's kinda cool because you know that
it's the exact version that you have and

493
00:43:00,470 --> 00:43:05,569
then you have all the symbols for and
everything already and then so how to

494
00:43:05,570 --> 00:43:10,250
get into kernel debugging you'll start
up what we need to disable sip like we

495
00:43:10,250 --> 00:43:15,590
already did if it's a copy on and we
need to set boo darks and then there's a

496
00:43:15,590 --> 00:43:20,540
command on the left with the flag 20 x
44 and we can see all the different

497
00:43:20,540 --> 00:43:25,730
options and then we need to trigger an
mi event and that's like apples really

498
00:43:25,730 --> 00:43:29,330
fond of these like twister finger
combinations someone's actually like

499
00:43:29,330 --> 00:43:34,009
kind of hearts I command option control
shift escape yet like maybe it escaped

500
00:43:34,010 --> 00:43:39,050
like your tongue or something I don't
know other hand it's weird that's gonna

501
00:43:39,050 --> 00:43:42,619
hurt but then once you get that the
screen should freeze and then you have

502
00:43:42,619 --> 00:43:47,960
your host system now you run ldb if you
compile that you can do it from the

503
00:43:47,960 --> 00:43:52,099
kernel source folder it's going to
prompt you to run some debug scripts

504
00:43:52,099 --> 00:43:56,210
that will give you a bunch of extra
macros and then Katie p dash remote and

505
00:43:56,210 --> 00:44:00,710
an IP of your vm and can enjoy your
kernel debugging

506
00:44:02,109 --> 00:44:07,839
we just have a little example of that

507
00:44:15,339 --> 00:44:29,619
let's see the red isn't I know so we'll
launch it up running the debug script

508
00:44:29,619 --> 00:44:43,269
will do KTP remote the IP address will
be bugging you could do like a

509
00:44:43,269 --> 00:44:46,779
back-trace see you know where we are

510
00:44:48,789 --> 00:44:58,809
I think I ran like a KTP help right
there and it's easier almost if you just

511
00:44:58,809 --> 00:45:02,380
jump in and start messing with it and
then be doing help and make ATP help and

512
00:45:02,380 --> 00:45:05,859
you can see like there's all these
macros for that do all kinds of useful

513
00:45:05,859 --> 00:45:06,700
things

514
00:45:06,700 --> 00:45:10,629
it's pretty self-explanatory you can
just like read through and look at all

515
00:45:10,630 --> 00:45:12,339
the cool stuff you can do

516
00:45:12,339 --> 00:45:18,970
nice one if you're doing kernel
debugging is a show all text so text is

517
00:45:18,970 --> 00:45:23,200
like a driver on windows the colonel
extension cedis show all text you can

518
00:45:23,200 --> 00:45:30,910
see all the current drivers that are
running and we're at jumping around here

519
00:45:30,910 --> 00:45:39,368
and we have all the ldb commands that we
used earlier register read etc

520
00:45:40,890 --> 00:45:45,629
let's go ahead there i'm just for
conclusions now as we saw when we

521
00:45:45,630 --> 00:45:49,470
started off the mac apple has been
really big on kind of setting forth

522
00:45:49,470 --> 00:45:53,819
thing that max aren't vulnerable to now
we're at all that it can happen kind of

523
00:45:53,820 --> 00:45:59,670
which is kind of changed a lot recently
especially is like the targeting is gone

524
00:45:59,670 --> 00:46:04,050
up now more for max I think more people
are starting to look at max it's kind of

525
00:46:04,050 --> 00:46:09,240
like a really green field there's a lot
of areas for research that kind of open

526
00:46:09,240 --> 00:46:13,680
for people look at as there's more
research you know more targeting as well

527
00:46:13,680 --> 00:46:22,740
and just kind of anything just computing
safely on max this is this is something

528
00:46:22,740 --> 00:46:26,879
i would have my mom always use is like
only allow them apps from like the

529
00:46:26,880 --> 00:46:31,710
appstore identified developers or maybe
just the app store only for most people

530
00:46:31,710 --> 00:46:35,640
is probably fine and then there's an OSX
lockdown script and get up

531
00:46:35,640 --> 00:46:42,569
that's really nice little secure your
your Mac insulation a lot with a lot of

532
00:46:42,570 --> 00:46:47,670
good default Patrick Cordell objective-c
he has a lot of really good utilities

533
00:46:47,670 --> 00:46:51,780
one is like knock-knock that will show
you any persistence mechanisms that

534
00:46:51,780 --> 00:46:56,070
malware my do that that's something all
Mauer wants to be ready when strippers

535
00:46:56,070 --> 00:47:03,210
persist for a while and it wants to talk
out in the network so he has all kinds

536
00:47:03,210 --> 00:47:07,050
of course there's a tast explorer 1 as
well that you can like filter all your

537
00:47:07,050 --> 00:47:10,680
processes almost like a process explorer
and then you can show ones that are

538
00:47:10,680 --> 00:47:15,899
packed or not packed all your signed
one's not signed ones and also have a

539
00:47:15,900 --> 00:47:20,280
virus total score for you which is
really helpful then also in common sense

540
00:47:20,280 --> 00:47:25,890
hygiene if you're on secure network
using a VPN I like that freedom one from

541
00:47:25,890 --> 00:47:32,339
f-secure and then also chrome on a mac i
think is probably the most secure

542
00:47:32,340 --> 00:47:37,770
blocking flash using you block origin
privacy badger https everywhere

543
00:47:38,970 --> 00:47:45,779
and then I also like Little Snitch as
well that there were some pretty bad for

544
00:47:45,780 --> 00:47:49,860
abilities earlier i think this year with
little sense but I you know they patched

545
00:47:49,860 --> 00:47:53,820
them and so good it's pretty cool it's
useful to know any of the outbound

546
00:47:53,820 --> 00:48:09,300
traffic on your mac and uh that's all I
guess we have a be like a couple minutes

547
00:48:09,300 --> 00:48:15,750
maybe for a question or anybody has
anything good

548
00:48:15,750 --> 00:48:24,300
Oh going there any significant changes
with Sierra I haven't really had a

549
00:48:24,300 --> 00:48:27,300
chance to look at it much to know
Virginia and just kind of came out

550
00:48:27,300 --> 00:48:31,740
excited to see all the people
complaining about it like Twitter as

551
00:48:31,740 --> 00:48:35,339
usual like the first month and then
maybe I'll I'll jump in and and and

552
00:48:35,340 --> 00:48:37,380
started looking at it more but yeah I
don't know

553
00:48:37,380 --> 00:48:45,210
so the question really

554
00:48:45,210 --> 00:49:03,150
ok cool so so more secure code signing
stuff mentioned so that all ok thanks a

555
00:49:03,150 --> 00:49:04,380
lot guys for coming appreciate it

