1
00:00:00,000 --> 00:00:04,620
My name is Matthew lichtenberger am
senior cyber intelligence analyst at

2
00:00:04,620 --> 00:00:09,300
this UPS security operations center here
in Louisville Kentucky today I'm going

3
00:00:09,300 --> 00:00:13,500
to demo a whole new way of certain
issues we transmitting data that I call

4
00:00:13,500 --> 00:00:18,509
packet kol short for packet knockout
will first go over the implications of

5
00:00:18,510 --> 00:00:22,289
data exfiltration their context in
relation to data breaches that have

6
00:00:22,289 --> 00:00:27,180
occurred over the past decade and how
packet KL enables another method for

7
00:00:27,180 --> 00:00:31,529
bypassing monitoring channels when
communicating outbound at the end i'll

8
00:00:31,529 --> 00:00:35,370
be happy to answer any questions or run
additional demonstrations of specific

9
00:00:35,370 --> 00:00:41,790
use cases are provided so data
exfiltration is widely defined as the

10
00:00:41,790 --> 00:00:45,600
means by which data breaches occur
whether it's communicating over common

11
00:00:45,600 --> 00:00:49,890
service ports to remote sites there are
running the respective services for

12
00:00:49,890 --> 00:00:54,090
transmitting data via ftp in the clear
or even utilizing so-called sneakernet

13
00:00:54,090 --> 00:00:58,230
carry a USB device chock-full of
sensitive corporate data and

14
00:00:58,230 --> 00:01:02,459
exfiltration of data means a lot of pain
is coming is incoming the company

15
00:01:02,460 --> 00:01:07,140
unfortunate enough to be targeted the
implications are even more dire than

16
00:01:07,140 --> 00:01:11,580
privacy laws such as HIPAA and FERPA
here in the US as well as other measures

17
00:01:11,580 --> 00:01:14,580
enacted in other countries are factored
into the equation

18
00:01:15,270 --> 00:01:20,158
the result is very costly with months of
Workforce time and millions of dollars

19
00:01:20,159 --> 00:01:24,600
spent investigating the exfiltration
fixing the access sending out

20
00:01:24,600 --> 00:01:30,000
notifications reissuing information and
reassuring the public even then the

21
00:01:30,000 --> 00:01:33,930
damage the company reputation may
persist for years and some leaked

22
00:01:33,930 --> 00:01:40,650
information has no it remediation
available on to the data breaches over

23
00:01:40,650 --> 00:01:44,700
the past decade myriad of data breaches
hit major companies and organizations

24
00:01:44,700 --> 00:01:50,130
including target credit cards home depot
credit cards again or OPM personal and

25
00:01:50,130 --> 00:01:53,520
classified data a technical
understanding of how these breaches

26
00:01:53,520 --> 00:01:57,570
occurred isn't necessary will suffice it
to know that in each breach the

27
00:01:57,570 --> 00:02:01,380
commonality was the exfiltration
occurred utilizing standard network

28
00:02:01,380 --> 00:02:06,060
communication mixed in with the normal
day-to-day traffic going out this sort

29
00:02:06,060 --> 00:02:11,400
of hiding in plain sight is extremely
difficult to pick out and unfortunately

30
00:02:11,400 --> 00:02:13,110
the industry

31
00:02:13,110 --> 00:02:18,990
has trended towards studying deeper
developing deep packet inspection tools

32
00:02:18,990 --> 00:02:23,100
to try and identify the content of each
packet for potential violations

33
00:02:23,760 --> 00:02:28,410
unfortunately by focusing so narrowly
context is lost and the hypothetical

34
00:02:28,410 --> 00:02:34,530
analyst is left trying to find the
forest admits the trees so quick primer

35
00:02:34,530 --> 00:02:39,240
on port knocking door knocking is a
technique that is familiar to some in

36
00:02:39,240 --> 00:02:43,380
the IT community and its uses never
graduated beyond that of a clever hack

37
00:02:43,380 --> 00:02:47,340
so quick primer is worthwhile
essentially by monitoring the drop

38
00:02:47,340 --> 00:02:52,590
packets on a firewall a step or knocking
aware program can turn the firewall into

39
00:02:52,590 --> 00:02:58,140
a sort of a magic door where prearranged
secret knock or set of packets set to

40
00:02:58,140 --> 00:03:03,420
close ports indicates that the
authorized user is trying to connect the

41
00:03:03,420 --> 00:03:08,309
program can then instruct the firewall
to open a single port range of ports or

42
00:03:08,310 --> 00:03:12,060
the entire span to the specific incoming
IP address for a set period of time

43
00:03:13,110 --> 00:03:17,310
traditionally this has been done to
allow easy access to remote internal

44
00:03:17,310 --> 00:03:21,510
resources without appearing open to the
myriad scanners operating against

45
00:03:21,510 --> 00:03:26,429
internet-facing addresses the primary
weakness to this technique is that an

46
00:03:26,430 --> 00:03:29,730
attacker on the same network is the
client could see the same transaction

47
00:03:29,730 --> 00:03:37,798
and do their own knock pretending to
have legitimate access so packet KO is a

48
00:03:37,799 --> 00:03:42,450
pair of python scripts designed to
demonstrate the inherent means of data

49
00:03:42,450 --> 00:03:47,548
exfiltration via port numbers utilizing
these scripts you can setup a server

50
00:03:47,549 --> 00:03:53,070
using exfil deep I and have the client
transmit the data to it unidirectionally

51
00:03:53,070 --> 00:03:58,620
the transmission is prone to errors is
the tool utilizes UDP packets and thus

52
00:03:58,620 --> 00:04:00,510
there is no guarantee of delivery

53
00:04:00,510 --> 00:04:04,560
however the benefit of this utilization
is that the receiving server has

54
00:04:04,560 --> 00:04:08,610
plausible deniability as the system
relies on the logging features of

55
00:04:08,610 --> 00:04:13,410
iptables and our sis long no listener is
actually established on the remote

56
00:04:13,410 --> 00:04:17,668
server and that's if someone were to
investigate they might conclude that the

57
00:04:17,668 --> 00:04:20,190
packets must have been dropped

58
00:04:20,190 --> 00:04:24,480
script support multiple methods of
obfuscation additionally the payload in

59
00:04:24,480 --> 00:04:29,700
the packet is a randomly generated set
of 0 to 50 hexadecimal bites the tools

60
00:04:29,700 --> 00:04:35,610
provide options to naval base 16 base32
or base64 encoding also useful for

61
00:04:35,610 --> 00:04:39,900
transmitting binary data as ascii they
can set an arbitrary delay between

62
00:04:39,900 --> 00:04:44,250
packets being sent and support
offsetting the port numbers by a static

63
00:04:44,250 --> 00:04:44,910
amount

64
00:04:44,910 --> 00:04:49,620
additionally the server side handles
multiple items that previously were

65
00:04:49,620 --> 00:04:55,590
large pain points if provided with root
and the relevant command line option it

66
00:04:55,590 --> 00:05:00,060
will create the iptables rules and
rsyslog configurations necessary for its

67
00:05:00,060 --> 00:05:04,890
operation if not it will suggest to the
user the kinds of modifications that

68
00:05:04,890 --> 00:05:09,960
need to be made based on the encoding
and offset specified the only major

69
00:05:09,960 --> 00:05:13,950
caveat here is that the program needs to
be terminated with control seat in order

70
00:05:13,950 --> 00:05:18,479
to clean out the iptables rules if it
terminates unexpectedly you will need to

71
00:05:18,480 --> 00:05:23,610
go in and manually remove the logging
finally the server side will multiplex

72
00:05:23,610 --> 00:05:28,020
connections based on the incoming public
address this allows multiple data

73
00:05:28,020 --> 00:05:33,000
payloads to come in at the same time
however if all the clients are behind a

74
00:05:33,000 --> 00:05:36,900
net you may run into problems as the
incoming address will be the same for

75
00:05:36,900 --> 00:05:43,200
each client future modifications to this
tool aim to enable TCP transmission with

76
00:05:43,200 --> 00:05:47,729
single bit return communication
established via reset responses vs

77
00:05:47,730 --> 00:05:51,900
acknowledged responses to the initial
syn packet on a given port number

78
00:05:51,900 --> 00:05:56,400
additionally a nonlinear transmission
system would provide further obfuscation

79
00:05:56,400 --> 00:05:59,760
as the bites would no longer be in order

80
00:05:59,760 --> 00:06:04,320
finally options for more dynamic port
offsets our goal such that a rotating

81
00:06:04,320 --> 00:06:08,310
table of offsets could be utilized or
offsets based on the mathematical

82
00:06:08,310 --> 00:06:14,040
properties of each port number i've
posted the complete source of this tool

83
00:06:14,040 --> 00:06:17,640
on github and I'm always open to
improvement and suggestions that the

84
00:06:17,640 --> 00:06:21,419
community as a whole can make feel free
to use it and improve it

85
00:06:21,419 --> 00:06:24,719
my only request is that you let me know
of improvements to make I'd be happy to

86
00:06:24,720 --> 00:06:27,720
utilize these improvements in future
iterations of the tool

87
00:06:28,520 --> 00:06:35,628
so now we're going to go over to the
demo so what I've got is I've got a

88
00:06:35,629 --> 00:06:44,210
remote server over here that's running
the exhale daemon tool right so I

89
00:06:44,210 --> 00:06:54,919
realized the brightness on this isn't
the best but you can just the second see

90
00:06:54,919 --> 00:07:10,370
what I can do here we go fun might be
too big

91
00:07:18,349 --> 00:07:36,590
how's that better and then over here you
can so the server side is running now

92
00:07:36,590 --> 00:07:44,840
and go ahead and use that man so you can
see it as a whole so each tool comes

93
00:07:44,840 --> 00:07:58,849
with a very pronounced help file so yes
it explains each tool each option in the

94
00:07:58,849 --> 00:08:03,319
tool allows you to set up your rules as
you want so quick overview would become

95
00:08:03,319 --> 00:08:08,000
and I'm issuing I'm instructing it to
use base 16 i'm pointing it to the log

96
00:08:08,000 --> 00:08:13,909
file / var slash log slash firewall .
log i'm giving it a static offset to its

97
00:08:13,909 --> 00:08:19,310
ports of two thousand i'm sending the
termination characters 71 which happens

98
00:08:19,310 --> 00:08:25,729
to be the ascii code for the letter G
which wouldn't be in bay 16 i'm giving

99
00:08:25,729 --> 00:08:30,800
it attack v4 verbose and then I'm giving
an attack f to have it create the

100
00:08:30,800 --> 00:08:35,690
iptables rules and the arses log
configuration automatically hence why i

101
00:08:35,690 --> 00:08:40,969
need to run it with sudo so we're on it
and it says logging incoming packets so

102
00:08:40,969 --> 00:08:41,870
now we're going to go

103
00:08:41,870 --> 00:08:56,180
over to the client side where we have a
test document that has proprietary

104
00:08:56,180 --> 00:09:01,640
information that we might want to send
out in this case I just manually created

105
00:09:01,640 --> 00:09:04,970
it but hey you know sky's the limit here

106
00:09:04,970 --> 00:09:17,210
so what we're going to issue is so we
start with a delay in this case I'm

107
00:09:17,210 --> 00:09:20,540
going to 0.01 which sets the delay
between when it sends packets

108
00:09:21,290 --> 00:09:25,880
this allows you to set rules where you
can do slow and go essentially sending

109
00:09:25,880 --> 00:09:30,680
packets once every 10 seconds once every
24 hours once every week if you wanted

110
00:09:30,680 --> 00:09:35,930
to take a while but then you're going to
go under the noise limit on most

111
00:09:35,930 --> 00:09:40,640
monitoring tools we need to match most
of the other parameters so we're going

112
00:09:40,640 --> 00:09:47,029
to say base 16 gonna give it the text
file as our file again static offset of

113
00:09:47,029 --> 00:10:01,490
2,000 we're going to point it at the
remote server and this case and is going

114
00:10:01,490 --> 00:10:05,180
to give it the same termination
character then we're going to give it

115
00:10:05,180 --> 00:10:08,359
another v just so that we can see in
more detail what's going on

116
00:10:09,500 --> 00:10:18,410
we hit enter it's sending more string if
we look over here we get most of the

117
00:10:18,410 --> 00:10:23,510
message as i mentioned before this is
using UDP each packet needs to make it

118
00:10:23,510 --> 00:10:27,380
in order for the full and complete the
coating so in some cases you may not get

119
00:10:27,380 --> 00:10:32,750
anything you make it complete garbage
i'm playing around with the specific

120
00:10:32,750 --> 00:10:38,000
port offsets playing around with the
packet delays i found depending on where

121
00:10:38,000 --> 00:10:42,320
i'm sending it from and where I'm
sending it to will result in different

122
00:10:42,320 --> 00:10:47,720
results in terms of reliability of
packets but we can still get enough of

123
00:10:47,720 --> 00:10:52,280
this that we can tell that this is my
secret credit card information that i

124
00:10:52,280 --> 00:10:55,400
saved locally no one will get this the
full credit card

125
00:10:55,400 --> 00:10:58,400
and my password is trust no one

126
00:10:58,400 --> 00:11:03,560
so if we then terminate out we can see
that we have two files created in here

127
00:11:03,560 --> 00:11:11,689
first is a raw text file of the incoming
string and the second is the parsed

128
00:11:11,690 --> 00:11:17,060
message that it ran through now these
met these files will be created for each

129
00:11:17,060 --> 00:11:20,839
incoming IP address as i mentioned
before the server will multiplex

130
00:11:20,840 --> 00:11:24,650
connections so you can receive
connections for multiple disparity IP

131
00:11:24,650 --> 00:11:34,699
addresses at the same time you don't
have any questions

132
00:11:35,760 --> 00:11:44,220
I want to see the demo again with some
other settings here

133
00:11:44,220 --> 00:12:01,290
ok so we can also do know i'm in my
experience actually sending binary files

134
00:12:01,290 --> 00:12:08,640
and sending encrypted files is lossy you
want to go very slow in those contexts

135
00:12:08,640 --> 00:12:12,300
packet delays of at least 10 seconds
between each one

136
00:12:12,300 --> 00:12:17,729
but at the same time it is UDP so
there's a very real chance that you

137
00:12:17,730 --> 00:12:22,950
won't get anything haven't really come
up with a good solution for that

138
00:12:22,950 --> 00:12:28,590
honestly the tcp idea that i mentioned
before hands my best suggestion but i

139
00:12:28,590 --> 00:12:33,930
haven't had the time to implement it yet
so yes was little wires friends and

140
00:12:33,930 --> 00:12:43,800
other day we were you really in a e3
well actually that's that's the magic of

141
00:12:43,800 --> 00:12:48,750
this no ports need to be open on the
receiving side this is monitoring this

142
00:12:48,750 --> 00:12:53,400
is setting up in iptables rule with log
for the specific port range is based on

143
00:12:53,400 --> 00:13:00,120
the offset and the fact that a i think
is a ski 71 for our ascii should be six

144
00:13:00,120 --> 00:13:04,770
something like that for capital a so i
can actually fire up our shark and show

145
00:13:04,770 --> 00:13:07,770
you what it looks like on the wire if
you'd like

146
00:13:13,610 --> 00:13:18,589
well I might have to fire the magnifier
because i don't think i can do the magic

147
00:13:18,589 --> 00:13:38,480
of a okay there we go

148
00:13:39,769 --> 00:13:49,100
in this case I don't even need to set up
the receiving and I can just go ahead

149
00:13:49,100 --> 00:14:05,959
and reissue the same command we limit
ourselves to only we can see that right

150
00:14:05,959 --> 00:14:13,250
here is where we start seeing these so
we have four 2053 2052 2054 so you can

151
00:14:13,250 --> 00:14:19,220
see in each case it's just doing that
static 2014 offset and then adding the

152
00:14:19,220 --> 00:14:24,290
ASCII value of the letter that it sent
out and then moving on to the next one

153
00:14:24,290 --> 00:14:28,069
as i mentioned before one of the other
salute improvements i want to make on

154
00:14:28,070 --> 00:14:35,810
this is actually handling a rotating
cipher essentially of offsets instead of

155
00:14:35,810 --> 00:14:39,589
just a static one is static you can
still kind of tell but there's a pattern

156
00:14:39,589 --> 00:14:44,660
going on there but if you're suddenly
bouncing 2005 thousand than 1,200 than

157
00:14:44,660 --> 00:14:51,560
1,500 as long as both the client and
server agree hide a lot so but in each

158
00:14:51,560 --> 00:14:58,459
case you can see the packets are have a
static data set 0 to 50 hexadecimal

159
00:14:58,459 --> 00:15:02,510
bites it's completely random just
designed to further throw off the trail

160
00:15:02,510 --> 00:15:08,180
because usually empty UDP packets are
pretty anomalous but in this case that

161
00:15:08,180 --> 00:15:11,810
the data field of that packet has
nothing to do with the data being

162
00:15:11,810 --> 00:15:15,050
transmitted it's all about the receiving
port

163
00:15:16,940 --> 00:15:24,620
other questions alright well thank you
all for your time I hope this has been

164
00:15:24,620 --> 00:15:28,850
very instructive and as I mentioned
before you can reach me at my email

165
00:15:28,850 --> 00:15:35,510
address is right there you can get on me
on linkedin or as i mentioned before

166
00:15:35,510 --> 00:15:39,500
this entire project can be found on
github and I'm happy to take suggestions

167
00:15:39,500 --> 00:16:02,270
improvements anything else you can think
of think you'll get it

