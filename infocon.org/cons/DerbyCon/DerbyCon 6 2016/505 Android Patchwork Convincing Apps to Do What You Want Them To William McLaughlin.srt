1
00:00:00,000 --> 00:00:07,500
good afternoon my name is Bill
mcLaughlin say we'll be talking about

2
00:00:07,500 --> 00:00:15,809
some android patchwork so again i'm
billy i work at independent values as a

3
00:00:15,809 --> 00:00:19,830
security analyst i'm currently working
on my master's degree and i have been

4
00:00:19,830 --> 00:00:27,479
for a very long time most of all I'm
happy to be back up their account so

5
00:00:27,480 --> 00:00:31,859
independent evaluators is my employer or
a small company out of Baltimore we do

6
00:00:31,859 --> 00:00:35,550
security assessments of assessments
mobile assessments infrastructure stuff

7
00:00:35,550 --> 00:00:40,410
some white box stuff some black stout
black box stuff everywhere in between

8
00:00:40,410 --> 00:00:48,089
and a lot of times we need to use some
re so today we're gonna be talking about

9
00:00:48,090 --> 00:00:49,920
patching android applications

10
00:00:49,920 --> 00:00:54,270
why would want to do that what we need
to do that and how we go about doing

11
00:00:54,270 --> 00:00:54,960
that

12
00:00:54,960 --> 00:01:01,680
first we need to talk about some terms
everyone needs to be familiar with APK

13
00:01:01,680 --> 00:01:06,150
short for android package it's
essentially a zip file that contains

14
00:01:06,150 --> 00:01:10,619
everything that is required for the
application to function properly tax is

15
00:01:10,619 --> 00:01:14,610
short for delving executable can be
thought of as the injured equivalent to

16
00:01:14,610 --> 00:01:21,060
a Java class while the BBM is a dalek
virtual machine can be thought of as the

17
00:01:21,060 --> 00:01:25,320
android equivalent of the Java Virtual
Machine charity is the Android runtime

18
00:01:25,320 --> 00:01:31,320
as of android 5.0 I believe it has
replaced the dollar virtual machine lot

19
00:01:31,320 --> 00:01:32,970
of changes happen there

20
00:01:32,970 --> 00:01:38,908
one of which is a move from just-in-time
compilation to edit on compilation atb

21
00:01:38,909 --> 00:01:40,950
is short for the Android debug bridge

22
00:01:40,950 --> 00:01:45,090
this is a command-line tool lets you
interact with Android emulators or

23
00:01:45,090 --> 00:01:48,240
hardware devices from the command line
you can do things like install packages

24
00:01:48,240 --> 00:01:56,009
or open a shell or push and pull files
so it's a pretty patching this tiny

25
00:01:56,009 --> 00:01:59,460
little proof of concept map i developed
specifically for decon it is a direct

26
00:01:59,460 --> 00:02:02,158
consequence of you will never see this
anywhere else

27
00:02:02,159 --> 00:02:05,939
we're looking at it from the perspective
of a security analyst performing

28
00:02:05,939 --> 00:02:10,590
security assessment so we're going to be
looking at this app and examining it to

29
00:02:10,590 --> 00:02:12,760
find anything wrong

30
00:02:12,760 --> 00:02:17,379
so I wrote this I know it does this
application will pin certificates

31
00:02:18,400 --> 00:02:22,599
this means that is going to be making
secure connection to a website over SSL

32
00:02:22,599 --> 00:02:28,510
and we'll check the receipt certificate
from the server against a locally stored

33
00:02:28,510 --> 00:02:33,220
certificate to determine if the
connection is valid the problem of this

34
00:02:33,220 --> 00:02:38,019
from a security assessment Assessors
point of view is that it can be

35
00:02:38,019 --> 00:02:42,970
frustrating in that normally we like to
put a proxy between us and the server so

36
00:02:42,970 --> 00:02:45,700
we can view any web requests that are
happening see if there's anything

37
00:02:45,700 --> 00:02:51,310
questionable accounting so this checks
basically makes that much more difficult

38
00:02:51,310 --> 00:02:55,209
because we won't be able to inject our
own custom certificate without the

39
00:02:55,209 --> 00:02:57,519
application taking a dump

40
00:02:57,519 --> 00:03:02,920
so what to do we got an SL screenshot
here

41
00:03:02,920 --> 00:03:08,679
scala a email field it's got a password
field and a button single again if you'd

42
00:03:08,680 --> 00:03:13,329
fill these fields hit the button without
any kind of custom certificates and

43
00:03:13,329 --> 00:03:15,909
stored on the device no proxy happening

44
00:03:15,909 --> 00:03:22,540
you'll get a little toast message to
success nicer but my face now if you

45
00:03:22,540 --> 00:03:27,160
want to intercept this traffic before
it's a server install custom cert on the

46
00:03:27,160 --> 00:03:27,879
device

47
00:03:27,879 --> 00:03:33,160
i'm in my case is typically a very sweet
certificate and then you would configure

48
00:03:33,160 --> 00:03:39,250
the device itself throughout all traffic
to the bird proxy so this is where the

49
00:03:39,250 --> 00:03:43,720
certificate pinning will detect a
problem our applications traffic will be

50
00:03:43,720 --> 00:03:47,079
hitting this custom certificate before
moving forward to the server and

51
00:03:47,079 --> 00:03:50,739
application knows that the server
certificate should not be what is

52
00:03:50,739 --> 00:03:55,629
receiving so we're going to never going
to say failure spooky said detected

53
00:03:55,629 --> 00:03:58,840
surveys so we're gonna do about this

54
00:03:58,840 --> 00:04:02,769
well we want to convince the apt to stop
caring about what's it gets and just

55
00:04:02,769 --> 00:04:09,549
work going to do this we got a few steps
we want to compile the application so we

56
00:04:09,549 --> 00:04:14,650
can get a human-readable approximation
of the original source code we can do

57
00:04:14,650 --> 00:04:19,780
this because Java code is compiled to an
intermediary by code is not machine

58
00:04:19,779 --> 00:04:23,530
language so there are tools that allow
us to go from the spy code back into

59
00:04:23,530 --> 00:04:24,260
something even real

60
00:04:24,260 --> 00:04:29,510
we'll be looking at the source code to
try to determine where this certificate

61
00:04:29,510 --> 00:04:34,580
checking where the painting is occurring
will be decoding application so we get

62
00:04:34,580 --> 00:04:39,800
access to the smaller code which is a
representation of the java bytecode that

63
00:04:39,800 --> 00:04:45,320
is so much human readable and then we
will be editing that code attached it to

64
00:04:45,320 --> 00:04:50,450
do what we want first step CD
compilation our goal is to keep some

65
00:04:50,450 --> 00:04:53,330
source code we have a couple tools are
going to use the first of which is next

66
00:04:53,330 --> 00:04:54,140
to jar

67
00:04:54,140 --> 00:04:59,780
this is a small program will convert the
android classes to the normal java class

68
00:04:59,780 --> 00:05:03,890
style so that we can use a java
decompiler such as JD GUI different

69
00:05:03,890 --> 00:05:07,849
flower Procyon to give us that human
readable approximation of the original

70
00:05:07,850 --> 00:05:14,030
source code i mention so the first part
of this we have a BK it's called patch

71
00:05:14,030 --> 00:05:18,380
town . APK this is our program is our
application we're going to be messing

72
00:05:18,380 --> 00:05:23,450
around with our index the jar on it that
will result in a jar file you can see it

73
00:05:23,450 --> 00:05:28,250
there in red and then we'll run JD gooey
on this jar file which will then launch

74
00:05:28,250 --> 00:05:34,730
a nice little gooey little cut off sorry
you can look at the approximate source

75
00:05:34,730 --> 00:05:41,030
code here or I prefer to use the save
all sources functionality on the left to

76
00:05:41,030 --> 00:05:44,179
save zip file locally and then I can
play around with it from there

77
00:05:44,720 --> 00:05:51,620
so at the top we have a zip file on the
right that is the file resulting from JD

78
00:05:51,620 --> 00:05:57,590
GUI we wouldn't want to unzip that
quietly to a directory called SRC you

79
00:05:57,590 --> 00:06:04,580
can see that toward the middle there in
blue SRC within this directory there are

80
00:06:04,580 --> 00:06:07,760
multiple files and subdirectories the
ones we care about are going to be in a

81
00:06:07,760 --> 00:06:12,680
directory that is directory structure
name similar to similarly to the name of

82
00:06:12,680 --> 00:06:17,810
our package in our case the packages com
example . w mclaughlin that's me . patch

83
00:06:17,810 --> 00:06:18,260
down

84
00:06:18,260 --> 00:06:22,730
that's the name of the application so we
list that directory and we get five java

85
00:06:22,730 --> 00:06:26,240
files holding the approximated source
good our job we don't care about

86
00:06:26,240 --> 00:06:29,840
automatically generated as part of the
android build process build config we

87
00:06:29,840 --> 00:06:32,989
also don't care about is not specific to
this application selected three files

88
00:06:32,990 --> 00:06:36,170
keep in store like an activity and pin
task

89
00:06:36,170 --> 00:06:37,940
these are the three files that are going
to hold

90
00:06:37,940 --> 00:06:43,790
the logic that we need to change
recapping start with an APK we converted

91
00:06:43,790 --> 00:06:50,000
into a jar file you decompile discharge
file we analyze the directory structure

92
00:06:50,000 --> 00:06:54,320
and determine which classes we need to
look at next step is to analyze the

93
00:06:54,320 --> 00:06:55,670
source code in detail

94
00:06:55,670 --> 00:07:00,470
our goal here is to find the logic that
is handling the pinning and figure out

95
00:07:00,470 --> 00:07:05,300
how to circumvent it tools for this any
text editor can be used on using them

96
00:07:05,300 --> 00:07:10,910
are targets are the three files were
identified first up is this keep

97
00:07:10,910 --> 00:07:19,010
installer file to open it up and the
first thing we see is a couple of class

98
00:07:19,010 --> 00:07:22,460
members we have to keep in store
instance which is not and importantly we

99
00:07:22,460 --> 00:07:28,669
have an ssl contact spot a variable this
is important because ASL context can be

100
00:07:28,670 --> 00:07:33,980
used in certificate pinning as pretty
official google documentation example

101
00:07:33,980 --> 00:07:39,500
online they use ssl context with a
custom certificate with it after that we

102
00:07:39,500 --> 00:07:43,520
have a constructor on line 25 and throws
a whole bunch of exceptions so we're

103
00:07:43,520 --> 00:07:50,900
going to hop into that function get a
better look a lot of code mr. real quick

104
00:07:50,900 --> 00:07:56,570
first thing that happens is a local
object called local object to is

105
00:07:56,570 --> 00:08:03,349
declared it is a significant factor of
type x509 next we are we have a buffered

106
00:08:03,350 --> 00:08:07,760
input stream that is opening a file
called security values that CRT now this

107
00:08:07,760 --> 00:08:11,210
is likely the certificate that the
ancient that the android application is

108
00:08:11,210 --> 00:08:12,440
pending

109
00:08:12,440 --> 00:08:16,700
we know that because network security
values account that's good evaluators

110
00:08:16,700 --> 00:08:20,810
right and it ends in Nazi Party which is
a typical certificate file file

111
00:08:20,810 --> 00:08:26,030
extension now this giant triblock and
threw a bunch of stuff

112
00:08:26,030 --> 00:08:31,729
it starts off by generating certificate
object using this offer input stream

113
00:08:31,730 --> 00:08:34,730
that contains the data from the
certificate file

114
00:08:35,279 --> 00:08:40,889
we got my 33 looks like a little bit of
debug output that a developer left in

115
00:08:40,889 --> 00:08:46,769
after that we're closing the the
industry because we don't need anymore

116
00:08:46,769 --> 00:08:51,269
it's been loaded and line 35 is
interesting because there is a keystore

117
00:08:51,269 --> 00:08:55,889
being created with default parameters
936 is doing some more default

118
00:08:55,889 --> 00:09:01,170
operations on that and then line 37 is
adding a certificate to this keystore

119
00:09:01,170 --> 00:09:06,540
the name of this certificate of CA the
data is the object that is the data that

120
00:09:06,540 --> 00:09:12,899
was read in from the file security
values . CRT after that a trust manager

121
00:09:12,899 --> 00:09:18,600
factories being created online 39 is
being initialized using this key store

122
00:09:18,600 --> 00:09:24,389
and online 40 there's an SL context
being initialized using this new trust

123
00:09:24,389 --> 00:09:30,329
manager so a custom SL context and in
the end is using the one certificate the

124
00:09:30,329 --> 00:09:34,979
one certificate loaded from the security
evaluator is that CRT file within this

125
00:09:34,980 --> 00:09:37,920
class there's also two smaller functions
that are important

126
00:09:37,920 --> 00:09:42,540
there's a getinstance function that will
either return an instance of keep in

127
00:09:42,540 --> 00:09:46,620
store that are you ran through all the
steps we just talked about or will

128
00:09:46,620 --> 00:09:49,079
create a new one and then call the
instructor running through all those

129
00:09:49,079 --> 00:09:54,660
steps setting up the custom custom SL
contacts and then there's a get context

130
00:09:54,660 --> 00:09:59,309
function function on line 63 that simply
returns this custom SL contacts

131
00:10:00,089 --> 00:10:05,009
cool the important thing here we have a
custom SL context initialize with a

132
00:10:05,009 --> 00:10:10,110
custom trust manager technique estore
that only trusts one cert the one from

133
00:10:10,110 --> 00:10:15,180
the CRT file that we look and is also a
couple Gators next we'll take a look at

134
00:10:15,180 --> 00:10:21,449
this login activity class so we open it
up right away we can see it looks like a

135
00:10:21,449 --> 00:10:25,769
pretty normal class that extends app
compat activity it suspiciously looks a

136
00:10:25,769 --> 00:10:30,809
lot like the android studio default
login activity i won't elaborate on why

137
00:10:30,809 --> 00:10:36,269
but the oncreate function is what can be
called when the activity starts this is

138
00:10:36,269 --> 00:10:39,509
where we look first my stuff going on
the beginning

139
00:10:39,509 --> 00:10:43,230
none of it seems very interesting
however my 45 we're defining a

140
00:10:43,230 --> 00:10:46,920
onclicklistener for a button remember
the screenshot in the beginning there's

141
00:10:46,920 --> 00:10:47,979
one button

142
00:10:47,980 --> 00:10:51,370
there's an email field password field
and a button when the button is clicked

143
00:10:51,370 --> 00:10:55,420
that's when the search check happens so
this is what's going to happen when that

144
00:10:55,420 --> 00:10:59,140
button is touched we can see that
there's a function called a temp login

145
00:10:59,140 --> 00:11:04,569
that is being called we're gonna want to
look at that the Templars and function

146
00:11:04,570 --> 00:11:10,090
is a one-line function it calls execute
on a new PIN task

147
00:11:10,090 --> 00:11:13,090
alright simple enough

148
00:11:13,090 --> 00:11:16,570
we have a login button with an
onclicklistener that caused a temp login

149
00:11:16,570 --> 00:11:21,970
that in turn calls execute on this new
can't ask out object so clearly want to

150
00:11:21,970 --> 00:11:28,390
look at the penthouse class so open it
up we can see right away that extends

151
00:11:28,390 --> 00:11:32,710
async task so enjoyed an async task is
basically something that's going to be

152
00:11:32,710 --> 00:11:36,790
running the background so as to not
block the main thread by default you'll

153
00:11:36,790 --> 00:11:40,300
be getting errors if you try to compile
an app that is doing networking on the

154
00:11:40,300 --> 00:11:44,199
front end so it's pretty safe to assume
especially considering we know what that

155
00:11:44,200 --> 00:11:49,030
does that this task is going to be
handling some network communications

156
00:11:49,030 --> 00:11:54,370
probably the pinching the search second
so the first functions can be called

157
00:11:54,370 --> 00:11:59,380
when this task starts is the doing
background function to pop open this

158
00:11:59,380 --> 00:12:04,270
function and we see some stuff we gotta
try block someones so the first line

159
00:12:04,270 --> 00:12:08,140
you'll see this getinstance function
that we just talked about earlier this

160
00:12:08,140 --> 00:12:12,280
is going to return to keep in-store
containing the custom SL context that

161
00:12:12,280 --> 00:12:20,439
trusts the one single cert next HTTPS
URL connection is started specifying the

162
00:12:20,440 --> 00:12:27,340
security valuators dot-com website so
it's pretty safe to say here that this

163
00:12:27,340 --> 00:12:31,630
website screwed about.com is probably
linked to that CRT file because they

164
00:12:31,630 --> 00:12:34,630
have the same domain the same name

165
00:12:36,310 --> 00:12:41,770
so what happens here is my 24 we're
calling get input stream on this new

166
00:12:41,770 --> 00:12:46,329
connection to spirit about is calm two
things can happen with this function

167
00:12:46,330 --> 00:12:53,140
call this function either return no
errors so it will make the connection

168
00:12:53,140 --> 00:12:59,710
grab the cert compare this cert to our
the certainly in the keep in store if

169
00:12:59,710 --> 00:13:01,420
things are in agreement

170
00:13:01,420 --> 00:13:04,569
the search match and everything's fine

171
00:13:04,570 --> 00:13:10,000
the function finishes and the program
continues to continue line 25 then 26

172
00:13:10,000 --> 00:13:13,780
and will return an integer object with a
value 1

173
00:13:14,410 --> 00:13:19,569
however if there is an exception thrown
is the certificate check fails meaning

174
00:13:19,570 --> 00:13:23,980
that the certificate received from the
server is bad maybe it's a burp suite

175
00:13:23,980 --> 00:13:28,810
server a certificate or something like
that when it's compared against the one

176
00:13:28,810 --> 00:13:33,609
that's stored entrusted an exception is
thrown something like a bad certificate

177
00:13:33,610 --> 00:13:40,240
exception remember exactly what this so
when that happens the flow will change

178
00:13:40,240 --> 00:13:46,180
it will jump down to the catch on my 28
and you'll see that the exception here

179
00:13:46,180 --> 00:13:50,920
is named for amfAR args and will simply
return this exception so we can either

180
00:13:50,920 --> 00:13:56,170
return an integer value one on success
or to return the exception itself on

181
00:13:56,170 --> 00:14:02,319
failure so when I say return what
happens is returned value is sent to

182
00:14:02,320 --> 00:14:08,170
another function called onpostexecute
this function automatically run after

183
00:14:08,170 --> 00:14:14,229
the async task completes what it needs
to do so the either the exception of the

184
00:14:14,230 --> 00:14:18,670
integer comes into this function and one
check happens is this an exception

185
00:14:18,670 --> 00:14:24,010
online 36 if it is a function called
served validation failure is going to be

186
00:14:24,010 --> 00:14:28,540
called if it is not an exception for
example it's an integer with all you

187
00:14:28,540 --> 00:14:36,069
want sir validation success is going to
be called so basically if the source no

188
00:14:36,070 --> 00:14:41,260
match for validation failures happening
if they do match sir validation success

189
00:14:41,260 --> 00:14:42,430
is going to happen

190
00:14:42,430 --> 00:14:47,859
good cert means crystal execute
execution we get success function that

191
00:14:47,860 --> 00:14:52,540
sir an exception and we get a failure
function the important takeaway here is

192
00:14:52,540 --> 00:14:56,020
this is what we want to change we want
to make sure that this failure function

193
00:14:56,020 --> 00:15:03,400
is never called we always want success
so recapping the whole source analysis

194
00:15:03,400 --> 00:15:09,310
section we discovered there was a custom
SL context and Trust single cert be

195
00:15:09,310 --> 00:15:13,150
located the code in the pin task that
performs ascertaining

196
00:15:14,230 --> 00:15:17,770
we have now identified what we need to
change to get this application to do we

197
00:15:17,770 --> 00:15:24,160
want the next step before we actually
passion is we have to decode the

198
00:15:24,160 --> 00:15:31,209
application to do that we're going to
use apktool it's a pretty neat little

199
00:15:31,210 --> 00:15:35,290
tool kit does a lot of stuff we're going
to be using it specifically to get some

200
00:15:35,290 --> 00:15:44,349
small code representation of the
compiled classes so this command is

201
00:15:44,350 --> 00:15:48,670
gonna look like this we have our APK up
there on the left are going to run

202
00:15:48,670 --> 00:15:54,790
apktool d4d code against it it's gonna
do some stuff and then it's going to

203
00:15:54,790 --> 00:16:00,699
give you a directory with the name of
the APK our case it's passed down very

204
00:16:00,700 --> 00:16:04,750
similar to the structure of when we
decompiled earlier to get those java

205
00:16:04,750 --> 00:16:06,640
classes the java files

206
00:16:06,640 --> 00:16:09,670
we're going to have a small directory
which is going to contain the smaller

207
00:16:09,670 --> 00:16:12,880
code which is what we're going to be
patching within that there's a sub

208
00:16:12,880 --> 00:16:19,270
directory structure of calm example
double compacts down just like before

209
00:16:20,050 --> 00:16:24,939
within that folder with a bunch of
smaller files each with at least one per

210
00:16:24,940 --> 00:16:29,320
java class so you know the ones we don't
care about don't care about the are ones

211
00:16:29,320 --> 00:16:33,430
we don't care about building fig and we
do care about the ones in red but in

212
00:16:33,430 --> 00:16:36,640
particular we care about pin task
because you already identified exactly

213
00:16:36,640 --> 00:16:40,630
what we want to change so let's do it

214
00:16:40,630 --> 00:16:44,920
our goal here is to modify the execution
of the app to do we want we want to

215
00:16:44,920 --> 00:16:47,199
avoid the start painting we want to
always succeed so we can use whatever

216
00:16:47,200 --> 00:16:53,740
sir we want called a again I'm going to
using them any text editor will do or

217
00:16:53,740 --> 00:17:01,810
any yeah thanks i will do so this is the
contents of the pin tasks Molly file you

218
00:17:01,810 --> 00:17:06,909
can see it's all more readable than like
a typical assembly file would be but

219
00:17:06,910 --> 00:17:09,370
it's not nearly as readable as java code

220
00:17:09,369 --> 00:17:12,429
luckily we don't have to look at this
entire entire file which is I believe

221
00:17:12,430 --> 00:17:17,260
288 lines because we know what we want
to look for ready already know that we

222
00:17:17,260 --> 00:17:21,190
need to be in the onpostexecute function
because that holds the function calls

223
00:17:21,190 --> 00:17:26,170
for success or failure so we do a quick
search for onpostexecute gonna bring us

224
00:17:26,170 --> 00:17:27,910
right to line 29

225
00:17:27,910 --> 00:17:34,060
and within this chunk of code we have
two key parts you can see there is

226
00:17:34,060 --> 00:17:39,760
invoked virtual bunch of stuff you see
certain validation failure at the end of

227
00:17:39,760 --> 00:17:45,940
the line further down you can see cert
validation success so this is the

228
00:17:45,940 --> 00:17:51,610
equivalent code we're looking at earlier
if this is an exception fail otherwise

229
00:17:51,610 --> 00:18:01,689
succeed sort of the packs this process
is simple we simply change failure to

230
00:18:01,690 --> 00:18:11,800
success before we are failing now we're
seeing so now we have the proper Smalley

231
00:18:11,800 --> 00:18:16,870
function calls setup we chose pin task
as our target class because we knew the

232
00:18:16,870 --> 00:18:21,189
cert validation functions existed in
there we found the exact location in on

233
00:18:21,190 --> 00:18:26,440
post execute have not patched their
application so before we can actually

234
00:18:26,440 --> 00:18:29,170
test this we have to rebuild the
application

235
00:18:29,170 --> 00:18:34,300
thankfully apktool actual think it is
can rebuild application we're going to

236
00:18:34,300 --> 00:18:40,480
be using the be command which is built
essentially the opposite of decode

237
00:18:40,480 --> 00:18:47,560
specifying our directory patch town we
are specifying an output APK called Paks

238
00:18:47,560 --> 00:18:53,530
town hyphen pack DBK run this command
everything looks good to a quick LS on

239
00:18:53,530 --> 00:18:58,450
the right there you will see our new APK
before we can install this to do a

240
00:18:58,450 --> 00:19:04,060
couple quick intermediary steps we need
to sign the android application so do

241
00:19:04,060 --> 00:19:07,540
this is two things with the new one will
generate a key store and then too we

242
00:19:07,540 --> 00:19:12,340
have to sign a BK using this case or so
cherokee story use the key java keytool

243
00:19:12,340 --> 00:19:16,689
command we're gonna tell you want to
generate a key pair and we're gonna name

244
00:19:16,690 --> 00:19:22,480
our keystore patch town . KS keystore we
have an alias for particular certificate

245
00:19:22,480 --> 00:19:27,730
we're creating which is patch town and
we're in South urs a cool regenerated

246
00:19:27,730 --> 00:19:30,880
keypair it's stored in a file past and
KS

247
00:19:30,880 --> 00:19:36,190
now we need to use this file to sign our
android application and the reason we

248
00:19:36,190 --> 00:19:40,990
need to do this is that Android cares
that all packages are sign but it does

249
00:19:40,990 --> 00:19:42,340
not care at all

250
00:19:42,340 --> 00:19:47,320
by who so we can make up whatever key
store we want and as long as the

251
00:19:47,320 --> 00:19:49,210
application sign it's good to go

252
00:19:49,210 --> 00:19:54,160
you can install so it's actually signed
up using dark signer specifying the

253
00:19:54,160 --> 00:19:59,590
signature algorithm to digest algorithm
using our key store on our patch tbk

254
00:19:59,590 --> 00:20:06,669
with our alias for the certificate that
we created so we have an appt with an

255
00:20:06,670 --> 00:20:10,240
APK file it is now sign it is ready to
be installed we can do so using the

256
00:20:10,240 --> 00:20:14,860
Android debug bridge install command
passing our filename as the sole

257
00:20:14,860 --> 00:20:23,649
parameter so now it's time to test in
this scenario i now have a custom burp

258
00:20:23,650 --> 00:20:26,230
sweet certificate installed on my
Android device

259
00:20:26,230 --> 00:20:32,170
I am Telling my android device to proxy
all traffic out of the device pointed

260
00:20:32,170 --> 00:20:36,850
toward my suite installed on my desktop
so i can view any outgoing web requests

261
00:20:36,850 --> 00:20:42,129
normally initially the application will
connect it would get the burb server

262
00:20:42,130 --> 00:20:48,160
certificate realize it's not what is
expecting and break and fail and would

263
00:20:48,160 --> 00:20:53,890
exit this time though it does not you
get the success message we noticed

264
00:20:53,890 --> 00:20:56,710
before and it looks like we're good to
go

265
00:20:56,710 --> 00:21:02,650
rpac seems to have been successful we
test that we can look in verb to see if

266
00:21:02,650 --> 00:21:06,940
any requests are going through it if
they are and we know that patch

267
00:21:06,940 --> 00:21:15,310
successful thankfully when I looked in
verb it did the initial request to

268
00:21:15,310 --> 00:21:20,110
security values com hit my proxy meaning
the certificate pinning was circumvented

269
00:21:20,110 --> 00:21:28,479
and we can now view any traffic going in
between the admin server anywhere bus so

270
00:21:28,480 --> 00:21:35,950
full recap of what we did here we start
with an APK we did compiled it we got

271
00:21:35,950 --> 00:21:39,850
the approximate source code that we were
able to look through and identify key

272
00:21:39,850 --> 00:21:43,629
parts of the code key parts of the logic
that we would need to modify in order to

273
00:21:43,630 --> 00:21:44,450
get the attitude we

274
00:21:44,450 --> 00:21:51,440
we decoded the APK using apktool we
located the patch . that we initially

275
00:21:51,440 --> 00:21:56,570
saw the decompile source in the smaller
code we edited the smaller code

276
00:21:56,570 --> 00:22:03,020
replacing the get how the significant
certificate kid failure function with

277
00:22:03,020 --> 00:22:08,450
significant success function we rebuilt
the application using a tool again he

278
00:22:08,450 --> 00:22:16,730
signed it using key tool and drop
resigner we tested it we saw success so

279
00:22:16,730 --> 00:22:21,800
the stock was initially 50-minute talk I
got accepted as a stable so I chop much

280
00:22:21,800 --> 00:22:24,680
stuff out was initially going to talk
about some java native interface

281
00:22:24,680 --> 00:22:28,640
patching stuff basically allows you to
use C++ or C code in your job in your

282
00:22:28,640 --> 00:22:32,660
Android application but unfortunately
cut that out but if anyone has any

283
00:22:32,660 --> 00:22:36,260
questions about that maybe you can meet
me in the hall we could talk about it

284
00:22:36,260 --> 00:22:42,980
I'll be upstairs in the Derby room as
part of the I running the IOT village so

285
00:22:42,980 --> 00:22:50,270
feel free to come up another caveat
caveat that recently came up with the

286
00:22:50,270 --> 00:22:57,290
injured seven new get on you it's not as
simple as installing a if you want

287
00:22:57,290 --> 00:23:04,220
intercept traffic it's not as simple to
just install your custom proxy cert into

288
00:23:04,220 --> 00:23:09,200
the device and then do what we did to
allow the connections to work now apps

289
00:23:09,200 --> 00:23:14,360
by default will not be using the system
store the system certificate store so

290
00:23:14,360 --> 00:23:18,860
there's a line in the androidmanifest
you have that camera what is right off

291
00:23:18,860 --> 00:23:25,280
hand but it's easy enough that in $YEAR
he decided to uh do the application like

292
00:23:25,280 --> 00:23:28,310
we did at this one file rebuild it sign
it

293
00:23:28,310 --> 00:23:32,570
there's no mention of this online so if
you want to look into a little more

294
00:23:32,570 --> 00:23:35,570
it's there and i hope you guys learned
something

295
00:23:36,200 --> 00:23:40,370
my goal of giving this talk was too I
know when I first wanted to patch a

296
00:23:40,370 --> 00:23:43,159
native application i was like God I
don't have any idea what he'll do it

297
00:23:43,160 --> 00:23:44,240
right

298
00:23:44,240 --> 00:23:47,510
I thought it was gonna be different like
very difficult and really done its kind

299
00:23:47,510 --> 00:23:52,040
intimidated but as I got into it I
realize it's not as bad as it and i hope

300
00:23:52,040 --> 00:23:56,270
that i got that across you guys so
thanks for listening I hope you learned

301
00:23:56,270 --> 00:23:57,830
something I

302
00:23:57,830 --> 00:24:02,269
we have time for questions I'll take
them here if not you talking in the

303
00:24:02,269 --> 00:24:11,570
hallway upstairs any questions okay well
thank you

