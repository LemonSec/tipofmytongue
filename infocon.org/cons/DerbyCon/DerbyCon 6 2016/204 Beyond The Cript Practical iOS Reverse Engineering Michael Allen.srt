1
00:00:00,000 --> 00:00:10,889
that we're going to get started alright
so welcome everybody to beyond the Crypt

2
00:00:10,889 --> 00:00:15,928
practical iOS reverse-engineering my
name is michael allen and I I'm a

3
00:00:15,929 --> 00:00:23,460
security consultant with Iowa obviously
i'm interested in mobile assessing

4
00:00:23,460 --> 00:00:27,990
mobile applications but I also do
penetration test code reviews

5
00:00:27,990 --> 00:00:33,390
vulnerability assessments and so on
incidentally I walked we are hiring and

6
00:00:33,390 --> 00:00:38,520
so if you are interested in joining the
fire chip then just hit me up outside

7
00:00:38,520 --> 00:00:43,890
and other more than happy to field your
questions so why the start

8
00:00:44,550 --> 00:00:48,780
partially you know based on my own
personal experience when i started

9
00:00:48,780 --> 00:00:53,309
protesting for example mobile
applications

10
00:00:53,309 --> 00:00:59,339
I couldn't hear our didn't pay attention
to what was happening Underwood right I

11
00:00:59,340 --> 00:01:04,049
pretty much just run the common to that
were often recommended got some results

12
00:01:04,049 --> 00:01:05,850
and that was pretty much it

13
00:01:05,850 --> 00:01:11,699
and I work for a while but then you know
I . I get a snug and so I had to change

14
00:01:11,700 --> 00:01:17,700
my approach and so there might the
persons who are here know who are

15
00:01:17,700 --> 00:01:22,740
currently at that point and would like
to move beyond it or it could be that

16
00:01:22,740 --> 00:01:28,439
you have been you have been testing
third-party applications and you kind of

17
00:01:28,439 --> 00:01:35,579
want to move beyond that and get more
into iOS the iOS system itself and also

18
00:01:35,579 --> 00:01:42,210
the fact is that a lot of the common
books that you would usually find using

19
00:01:42,210 --> 00:01:47,039
the approach that you'd normally see be
recommended on blood and so on are

20
00:01:47,040 --> 00:01:50,100
pretty much clothes and so you know at
some point you're going to have to

21
00:01:50,100 --> 00:01:53,559
change your approach so

22
00:01:53,560 --> 00:02:00,159
I the outline interpretations we're
going to start with the current state of

23
00:02:00,159 --> 00:02:04,750
the union right so we're gonna look on
the common tools that are currently

24
00:02:04,750 --> 00:02:08,770
available know the results they are
produced and it's going to bring us up

25
00:02:08,770 --> 00:02:13,750
to the point where we realize that you
know a lot of common bugs are no clothes

26
00:02:13,750 --> 00:02:17,739
and so we're gonna have to change our
program and that new approach is going

27
00:02:17,739 --> 00:02:21,880
to involve a deeper understanding of
what's happening under the hood so we

28
00:02:21,880 --> 00:02:28,180
look at what a muckle binder is one of
my task is look at objectives en suite

29
00:02:28,180 --> 00:02:33,850
from a reverse engineers perspective and
then we'll wrap up with identifying you

30
00:02:33,850 --> 00:02:37,630
know simple Jeffrey detection routines
and how they can be bypassed all right

31
00:02:37,630 --> 00:02:46,870
so the first thing is you're gonna you
know need to build your to attend so

32
00:02:46,870 --> 00:02:51,340
we're going to look at they the common
to get started you know kind of general

33
00:02:51,340 --> 00:02:56,680
to get that you'd see often being
recommended know so we just go through

34
00:02:56,680 --> 00:02:59,799
this so the first thing is of course
you're going to need a jailbroken device

35
00:02:59,799 --> 00:03:05,350
and jailbroken is jailbreaking the
process of jailbreaking is just removing

36
00:03:05,350 --> 00:03:12,608
the restrictions that have been informed
by iOS right you are weakening the

37
00:03:12,609 --> 00:03:16,600
security posture of the device because
you are exploiting vulnerabilities and

38
00:03:16,600 --> 00:03:21,100
so the recommendation is to have a
dedicated testing device the latest

39
00:03:21,100 --> 00:03:29,230
jailbreak public rubric no ice Pangu 92
93 on the supported on 64 bit devices on

40
00:03:29,230 --> 00:03:36,130
their private jailbreaks I understand
for example Lucas test for just you know

41
00:03:36,130 --> 00:03:40,630
published it and then briefing

42
00:03:40,630 --> 00:03:46,810
what's a jobro the types of jailbreak
head on over requires a computer to

43
00:03:46,810 --> 00:03:53,230
start advice on Ted it's the opposite
and semi is a mixture of of the two so

44
00:03:53,230 --> 00:03:58,510
late as fungal jailbreak is semi 10 as
each time the device gets restarted you

45
00:03:58,510 --> 00:04:03,310
have to run the application again to
read your brief advice just some tips

46
00:04:03,310 --> 00:04:05,560
here change the Department password from

47
00:04:05,560 --> 00:04:11,290
alpine I would you know also encourage
you to access the device over USB

48
00:04:11,290 --> 00:04:19,450
instead of using Wi-Fi and Soyuz you
know USB box d you're pretty much on tcp

49
00:04:19,450 --> 00:04:25,780
really specify your port would also
recommend that you generate your use ssh

50
00:04:25,780 --> 00:04:27,820
keys generate your keys

51
00:04:27,820 --> 00:04:34,780
copy your public key over and also add
an area for your device so that you

52
00:04:34,780 --> 00:04:38,229
don't have to be typing in the password
every single time you want to access the

53
00:04:38,229 --> 00:04:38,800
device

54
00:04:38,800 --> 00:04:46,180
alright moving five you're going to want
to move well during an assessment you're

55
00:04:46,180 --> 00:04:50,229
going to want to move fire between your
horse and the device itself recommended

56
00:04:50,229 --> 00:04:57,310
to use ifunbox I explorer but really you
don't necessarily need those schools

57
00:04:57,310 --> 00:05:00,639
you're going to be accessing the device
over ssh anyway so you can always use

58
00:05:00,639 --> 00:05:08,320
SFTP I've also had problems with a
particular tweet for iphone box on the

59
00:05:08,320 --> 00:05:15,700
AFC to has given you some trouble so you
could just use SFTP intercepting network

60
00:05:15,700 --> 00:05:21,430
traffic most applications are going to
need well speak to a back-end server

61
00:05:21,430 --> 00:05:28,330
usually over HTTP HTTPS the defect or
two for intercepting traffic is bourke

62
00:05:28,330 --> 00:05:36,010
street you could of course use a party
that attack proxy but they they the main

63
00:05:36,010 --> 00:05:40,150
tool Pittsburgh sweet and so you have
burb running on your host machine

64
00:05:40,150 --> 00:05:45,190
assigned to an IP listen a particular
port and then from your device you

65
00:05:45,190 --> 00:05:49,030
configure your device to connect to that
machine on that particular port as well

66
00:05:49,030 --> 00:05:56,950
right now the problem you run into that
most of the application these days use

67
00:05:56,950 --> 00:06:02,139
ssl painting which means the certificate
is no in the binary itself unsorted

68
00:06:02,139 --> 00:06:08,800
bypass that you use ssl to switch is
eric you switch over is no longer be

69
00:06:08,800 --> 00:06:13,030
maintained and so the new thing with ssl
kill switch to and pretty much it's just

70
00:06:13,030 --> 00:06:13,529
that we

71
00:06:13,529 --> 00:06:19,259
it wouldn't start and you enable and
disable as required keep in mind that

72
00:06:19,259 --> 00:06:24,749
when you do enabling you are disabling
SS certification across the entire by

73
00:06:24,749 --> 00:06:28,199
which again goes back to the
recommendation of having a dedicated

74
00:06:28,199 --> 00:06:42,839
test device right so instrumentation the
usual 20 again is script so you

75
00:06:42,839 --> 00:06:47,609
basically injections or process you get
a interactive console and the sin that

76
00:06:47,609 --> 00:06:53,459
is you know mixture of objective-c
javascript only supported right now on

77
00:06:53,459 --> 00:07:02,159
iOS and OS X and just recently the folks
over at no secure 24 so they replaced

78
00:07:02,159 --> 00:07:07,829
the run time the script runtime is no
power by freedom and incidentally the

79
00:07:07,829 --> 00:07:13,469
talking and Michael beyond the script no
this is not a knock against scripts up

80
00:07:13,469 --> 00:07:20,909
powerful tool but you do in fact one of
more beyond that then the target just

81
00:07:20,909 --> 00:07:26,819
aimed at laying that foundation so how
do you script pretty much specify the

82
00:07:26,819 --> 00:07:32,399
specific the process ID that you are
interested in instrumenting and then

83
00:07:32,399 --> 00:07:38,039
just run script minus P provide the ID
and that's it you're in the interactive

84
00:07:38,039 --> 00:07:45,299
monsoon whereas we said the synthesis
objective-c javascript the new hotness

85
00:07:45,299 --> 00:07:52,799
however is Frieda this thing is pretty
much on steroids crack cocaine heroin

86
00:07:52,799 --> 00:07:59,489
you name all right so it allows you to
inject the google v8 engine into the

87
00:07:59,489 --> 00:08:04,169
target process and so that JavaScript
know has full access to the process

88
00:08:04,169 --> 00:08:09,839
memory support function cooking access
to native methods but more importantly

89
00:08:09,839 --> 00:08:16,499
you can inject into a starting process
right i mean it also supports up a whole

90
00:08:16,499 --> 00:08:19,169
lot more architectures than those

91
00:08:19,169 --> 00:08:27,090
stripped and so with the combination of
the freedom runtime engine and the

92
00:08:27,090 --> 00:08:31,229
script interactive console you know how
the best of all worlds

93
00:08:32,130 --> 00:08:38,490
I'm so this is just a very simple
example of using freedom and in this

94
00:08:38,490 --> 00:08:43,769
example we were just you know highlight
specifying a particular application that

95
00:08:43,769 --> 00:08:47,820
would like to instrument and we want to
see every time in particular method is

96
00:08:47,820 --> 00:08:53,820
called and so the minus U is over USB
receiver is for functions that start

97
00:08:53,820 --> 00:08:58,680
like that and we're just racing each
time one is God but this is merely

98
00:08:58,680 --> 00:09:04,050
stretching that not even scratching the
surface like i said i'm a lot of tools

99
00:09:04,050 --> 00:09:10,380
these are no powered by freedom during
an assessment there are some common

100
00:09:10,380 --> 00:09:15,120
tasks that you know I'm gonna go through
right and so on these include things

101
00:09:15,120 --> 00:09:20,130
like you know checking the keychain
looking at the logs and you know just

102
00:09:20,130 --> 00:09:25,439
some one day and asked and so there are
tools that automate all of these common

103
00:09:25,440 --> 00:09:29,550
task and some are listed here are they

104
00:09:29,550 --> 00:09:34,079
however have varying levels of support
so for example stupid no longer

105
00:09:34,079 --> 00:09:40,380
supported on so the exam and the one
that's interesting is leaving this was

106
00:09:40,380 --> 00:09:46,050
really just reset the at our black until
the example here is shown up

107
00:09:46,050 --> 00:09:53,910
you know I Demi tune logging teaching
dumping provides just general up info

108
00:09:53,910 --> 00:10:01,019
I'm and pretty much looks like this
right and then the fact that most of

109
00:10:01,019 --> 00:10:04,709
your work is going to be done in the
from a command line and so you're gonna

110
00:10:04,709 --> 00:10:10,018
need some essential tools and so the
recommendation again his usual to use

111
00:10:10,019 --> 00:10:16,649
big boss or Erica youtube but I'd also
like to recommend using the iOS been

112
00:10:16,649 --> 00:10:22,709
packed which is a number of tools that
have been compiled for iOS platform by

113
00:10:22,709 --> 00:10:24,300
jonathan levin

114
00:10:24,300 --> 00:10:31,020
I'm some examples of the bynars that are
included in that is being but are listed

115
00:10:31,020 --> 00:10:31,710
here

116
00:10:31,710 --> 00:10:38,070
keep in mind and my recommendation would
be so you get a tire fire that you

117
00:10:38,070 --> 00:10:42,150
pretty much switch over to your root
directory and Justin tired and all the

118
00:10:42,150 --> 00:10:46,770
five get copied to where they're
supposed to go i have lost jailbreaks

119
00:10:46,770 --> 00:10:52,050
because of that because some binary
didn't play well with some of the

120
00:10:52,050 --> 00:10:57,000
install the tweaks that i had so if
you're going to go this room may I

121
00:10:57,000 --> 00:11:02,430
suggest you choose the binder that
you're interested in capital what's your

122
00:11:02,430 --> 00:11:05,339
device rather than just using them all

123
00:11:05,340 --> 00:11:10,500
I'm spoken to him about this and you
know he has said that he has used it on

124
00:11:10,500 --> 00:11:16,050
several devices with no issues so it it
may have been that in a couple of weeks

125
00:11:16,050 --> 00:11:19,920
that i had installed a cosmetician so
keep that in mind

126
00:11:20,580 --> 00:11:27,180
alright so that's the you know basic to
get that you usually see and so now

127
00:11:27,180 --> 00:11:33,089
we're going to get into what usually
happens during a an assessment right so

128
00:11:33,090 --> 00:11:39,480
again let's go back to look into setting
traffic the application is going to

129
00:11:39,480 --> 00:11:47,520
communicate to a back-end server you can
use birth or you could set up a remote

130
00:11:47,520 --> 00:11:53,370
virtual interface so you plug the device
in to itunes get the udid grab that ID

131
00:11:53,370 --> 00:12:00,180
and then just run RBI CTL minus s device
ID that brings up an interface and then

132
00:12:00,180 --> 00:12:04,709
you can just move on that interface you
can write to a peach up five and then

133
00:12:04,710 --> 00:12:10,110
you can use your you know network to
your favorite network tool then parts at

134
00:12:10,110 --> 00:12:17,040
five right in secure storage most of the
attacks are based on insecure storage so

135
00:12:17,699 --> 00:12:23,910
properties files stores she realized
objects that appears sometimes they are

136
00:12:23,910 --> 00:12:32,100
in binary format but you can use the .
you tool to convert that in this example

137
00:12:32,100 --> 00:12:40,290
this is photowall storing the access pin
my super secure access pin in the

138
00:12:40,290 --> 00:12:47,849
feeling by in plain text right so you
have information leakage here transit

139
00:12:47,850 --> 00:12:54,660
data stores sequel databases most often
are used for planetside storage just a

140
00:12:54,660 --> 00:13:02,189
lightweight France I database when you
you know Korean using SQL again you

141
00:13:02,189 --> 00:13:06,660
might find sensitive information being
stored and in this example we're seeing

142
00:13:06,660 --> 00:13:13,079
the administrator username and password
again means toward implanted fun talk

143
00:13:13,079 --> 00:13:18,118
about sequin about sequel I believe
doesn't actually do what you think so

144
00:13:18,119 --> 00:13:23,699
when you delete data it gets added to
freely right and those three records are

145
00:13:23,699 --> 00:13:26,758
not overwritten two more space is
required

146
00:13:26,759 --> 00:13:31,289
the end result of that is that the data
might not be for working for wire and it

147
00:13:31,289 --> 00:13:35,549
can therefore be recovered something to
keep in mind and there are of course

148
00:13:35,549 --> 00:13:41,309
tools that will allow you to recover the
data dump in the keychain another good

149
00:13:41,309 --> 00:13:45,749
it's just a sequel database stored in
bar keychains you can courage again

150
00:13:45,749 --> 00:13:51,989
using the secret three command to force
people like three people like three

151
00:13:51,989 --> 00:13:56,549
command-line tool would be in the
repositories that we spoke about earlier

152
00:13:56,549 --> 00:14:02,730
or just use teaching dumper and don't
the entire contents of the key chain

153
00:14:02,730 --> 00:14:08,939
itself right snapshots launched an iOS
application iOS application goes into

154
00:14:08,939 --> 00:14:13,410
the background takes a snapshot and you
know exactly where to find that snapshot

155
00:14:13,410 --> 00:14:19,709
might store sensitive information again
and so it's you know one of those places

156
00:14:19,709 --> 00:14:22,040
that people usually check for $MONEY

157
00:14:22,040 --> 00:14:29,120
Josh's so the application directory is
going to have a ashes directory and that

158
00:14:29,120 --> 00:14:34,940
caches directory functions almost
similar to your web browsers cache

159
00:14:34,940 --> 00:14:41,779
pretty much in that improving
performance and again it may store web

160
00:14:41,779 --> 00:14:47,389
cache content and mr. sensitive
information again and so it's just a

161
00:14:47,389 --> 00:14:52,370
bunch of tables and you interact with it
through the sequel I'd three command

162
00:14:52,370 --> 00:14:52,970
again

163
00:14:52,970 --> 00:14:58,190
come online tool again something by
newark is wonderful is created by the

164
00:14:58,190 --> 00:15:02,750
euro loading system stored on the file
system in binary format of course the

165
00:15:02,750 --> 00:15:06,740
assumption made by the developers is
that fits it if it's a binder if it's in

166
00:15:06,740 --> 00:15:09,920
binary format nobody will be able to get
to it

167
00:15:10,550 --> 00:15:13,819
of course there are tools that allow you
to parse that and pretty much free

168
00:15:13,819 --> 00:15:14,689
tonight

169
00:15:14,690 --> 00:15:18,050
ibc inter-process communication

170
00:15:18,050 --> 00:15:24,079
I'm so the application registers a
custom URL scheme under the application

171
00:15:24,079 --> 00:15:28,519
is involved in the urine scheme that's
called and so usually you would don't

172
00:15:28,519 --> 00:15:33,050
the application binary and then you
would probably run streams on the

173
00:15:33,050 --> 00:15:37,399
application binary or you could created
peerless I'm and then you would grip for

174
00:15:37,399 --> 00:15:42,949
a particular string right well and this
was abused back in the day by how about

175
00:15:42,949 --> 00:15:48,229
where you could pretty much in vogue sky
through Europe scheme will be used as

176
00:15:48,230 --> 00:15:57,019
content make premium cards right and so
the recommendation here are the tools

177
00:15:57,019 --> 00:16:04,310
that i would recommend you using is LSD
trip and to use the public or private

178
00:16:04,310 --> 00:16:10,130
URLs option i pretty much gives you the
same thing and then some problem though

179
00:16:10,130 --> 00:16:16,310
is as we mentioned when we started out a
lot of these bugs are not being cold and

180
00:16:16,310 --> 00:16:23,479
so the URL attack your team attack is
pretty much dead in iOS 9 because know

181
00:16:23,480 --> 00:16:29,180
they have introduced universal links
right and so the developer can now

182
00:16:29,180 --> 00:16:31,270
specify the high

183
00:16:31,270 --> 00:16:36,550
that will be open for process by the
application communication is done over

184
00:16:36,550 --> 00:16:42,939
HTTPS and also print is nine you could
enumerate what apps are installed and

185
00:16:42,940 --> 00:16:48,490
advise using the chance openurl method
that's no longer the case

186
00:16:48,490 --> 00:16:52,210
so just an example of you know common
bug that you'll find that are no code

187
00:16:52,210 --> 00:17:00,070
injection attacks were abused injecting
into webviews 500 routines xml attacks

188
00:17:00,070 --> 00:17:01,600
and so on

189
00:17:01,600 --> 00:17:08,410
I'm so the point of this is keep in mind
that the issues that you identify with

190
00:17:08,410 --> 00:17:15,310
local storage are only valid are on the
work when the device is unlocked right

191
00:17:15,310 --> 00:17:19,990
some other common results that you might
find have to do with on security is

192
00:17:19,990 --> 00:17:24,819
which you would find you know using burp
suite or some hard-coded secrets but the

193
00:17:24,819 --> 00:17:31,899
fact is that with each other version of
iOS more and more of the common bugs are

194
00:17:31,900 --> 00:17:37,540
being closed that so pretty much binary
protections are are no standard at least

195
00:17:37,540 --> 00:17:42,790
in most of the third party app that you
see and then you know if the developer

196
00:17:42,790 --> 00:17:45,159
makes good use of the data protection

197
00:17:45,160 --> 00:17:50,050
ap is that's another thing that we just
mentioned that Universal links were

198
00:17:50,050 --> 00:17:58,240
introduced in iOS 9 that killed the IPC
Lupul so question we have to ask

199
00:17:58,240 --> 00:18:03,160
ourselves then in what happens when you
are in the common to steal or what

200
00:18:03,160 --> 00:18:09,490
happens when Google your google fool
doesn't return anything right or there

201
00:18:09,490 --> 00:18:14,770
might be custom security protection
protections in place or you might want

202
00:18:14,770 --> 00:18:20,080
to extend an existing tool . is at this
point we're going to need to change our

203
00:18:20,080 --> 00:18:23,439
approach right and so

204
00:18:23,440 --> 00:18:29,980
moving towards this new approach and I
put new in quotes because i know that

205
00:18:29,980 --> 00:18:34,120
some people will argue that there's
nothing about this are there's no such

206
00:18:34,120 --> 00:18:40,600
thing as new in in closet so I just put
this interview write in codes you're

207
00:18:40,600 --> 00:18:45,490
changing your prunes and it's going to
start with a better understanding up iOS

208
00:18:45,490 --> 00:18:50,769
internal right and so we're going to
look at what happens on the hood get

209
00:18:50,769 --> 00:18:57,309
into arm 32 64 just a little bit of a
deep dive into objective-c and sweet you

210
00:18:57,309 --> 00:19:01,269
know like what happens under word from a
reverse engineering perspective so the

211
00:19:01,269 --> 00:19:04,720
first thing we need to do is kind of
improve our toolkit

212
00:19:04,720 --> 00:19:12,039
so what does the reverse engineers to
look like disassemblers a pro shopper

213
00:19:12,039 --> 00:19:19,539
and we'll go through this no idea pro
kind of the photo tool that it comes to

214
00:19:19,539 --> 00:19:24,759
reverse engineering chances are you
happy if you're buying individually you

215
00:19:24,759 --> 00:19:32,379
will have to sell a body part or two it
is extremely expensive but I in my

216
00:19:32,379 --> 00:19:33,399
opinion

217
00:19:33,399 --> 00:19:41,979
Ida is to reversing what burp suite is
to web fantastic right and it's very you

218
00:19:41,980 --> 00:19:48,309
know extended you can extend it writer
on plugins strips

219
00:19:48,309 --> 00:19:55,000
I mean an entire top could be given on
just I'd alone and the i think the most

220
00:19:55,000 --> 00:20:01,899
recent version 695 also supports iOS
remote debugging right hopper scaling

221
00:20:01,899 --> 00:20:04,689
down a whole lot more

222
00:20:04,690 --> 00:20:09,549
just a couple hundred bucks doesn't
support as many architectures as I de

223
00:20:09,549 --> 00:20:15,220
but it's enough to at least get you
going right and i think--not just

224
00:20:15,220 --> 00:20:16,340
support

225
00:20:16,340 --> 00:20:21,199
on OSX i think but don't quote me on
that

226
00:20:23,390 --> 00:20:30,140
leb so Ellie be replaced gb just an
example here I'm so it's a plan server

227
00:20:30,140 --> 00:20:35,299
setup so you copy the debug server onto
your testing device and then on the

228
00:20:35,299 --> 00:20:41,570
client you simply connect to it right so
on the mobile device you're on the debug

229
00:20:41,570 --> 00:20:47,059
server it's gonna listen on a particular
port connection comes in launches the

230
00:20:47,059 --> 00:20:54,559
application during business and you know
an example is shown here you can just

231
00:20:54,559 --> 00:21:02,270
some tips so pretty much what would
happen is you launch the application or

232
00:21:02,270 --> 00:21:07,100
you would have the application binary
you would have the binary opened in your

233
00:21:07,100 --> 00:21:11,090
favorite disassembler my nephew and then
you would be interested in setting up

234
00:21:11,090 --> 00:21:15,620
great points at the particular offset so
you drop that offset and then you would

235
00:21:15,620 --> 00:21:21,649
from the ellen vtune you would first of
all launch the application on the device

236
00:21:21,649 --> 00:21:26,959
itself and then you would connect and
then you would run for example image-

237
00:21:26,960 --> 00:21:34,130
list to list the images grab the slide
the SLR offset and then at that slide to

238
00:21:34,130 --> 00:21:40,460
the offset that you are interested in
setting the bird . on of course you

239
00:21:40,460 --> 00:21:43,610
don't need to go through all of this if
the application has symbology but always

240
00:21:43,610 --> 00:21:50,928
get the bird . on the symbols but mom
it's just up and i'll step multiple ways

241
00:21:50,929 --> 00:21:52,250
of doing the same thing

242
00:21:52,250 --> 00:21:55,820
j 2 j tool is the new hotness

243
00:21:56,450 --> 00:22:06,799
so usually you would co2 will be
recommending right but an O'Toole is the

244
00:22:06,799 --> 00:22:13,908
Michael binary Swiss carbonite but Jay
tool offers prototype functionality with

245
00:22:13,909 --> 00:22:18,799
a lot more options right so you can do
Michael analysis you know each other on

246
00:22:18,799 --> 00:22:26,330
strings & M supported on multiple
platforms OSX iOS and it's a arm support

247
00:22:26,330 --> 00:22:29,639
assembly and so an example is shown here
of dumping

248
00:22:29,639 --> 00:22:38,189
the text section of a simple binary
using the gentle- the option on the

249
00:22:38,190 --> 00:22:42,450
bonus though is that Jada will also
operates on the chair catch and for

250
00:22:42,450 --> 00:22:47,849
those who may not be familiar shared
cache is a single file with sealing

251
00:22:47,849 --> 00:22:52,408
system libraries gets loaded once and
then is shared by all other processes

252
00:22:53,129 --> 00:22:58,468
alright i'm using a tool you can list
the libraries that are in the sharecash

253
00:22:58,469 --> 00:23:02,700
one and if you are interested in you
know extracting that library to go and

254
00:23:02,700 --> 00:23:07,649
do like further research it will also
facilitate that and if you're interested

255
00:23:07,649 --> 00:23:09,599
in him the shirt ash can be abused

256
00:23:09,599 --> 00:23:14,158
i would recommend checking out angles
talk at black hat heard of this year

257
00:23:14,159 --> 00:23:23,909
Frank exp getting no task related info
so you can display threads my ports dunk

258
00:23:23,909 --> 00:23:30,719
or image and a whole lot more and then
of course there's gb no longer

259
00:23:30,719 --> 00:23:37,109
well when I was putting this together it
was not supported on you no harm 624

260
00:23:37,109 --> 00:23:43,529
architectures and so you're left with
using LED be a five-month are useful

261
00:23:43,529 --> 00:23:50,129
tool if you want to see the haha one
application interact with the file

262
00:23:50,129 --> 00:23:55,619
system very useful but of course it so
it traces the file system activity using

263
00:23:55,619 --> 00:24:01,320
a press event right very useful and then
there is the Apple CC tools so you have

264
00:24:01,320 --> 00:24:06,149
a tool which we mentioned earlier on
Marcos spider-knight you have NM for

265
00:24:06,149 --> 00:24:11,579
dumping symbols lipo or thin and binary
the binder may-maybe a fat binder which

266
00:24:11,579 --> 00:24:14,579
means that it supports multiple
architectures you might just be

267
00:24:14,579 --> 00:24:20,459
interested in a particular architecture
so you use my photo in the binary under

268
00:24:20,459 --> 00:24:26,459
school sign for binary signing truth is
you need none of this jay tool pretty

269
00:24:26,459 --> 00:24:29,460
much does all of this and denser right

270
00:24:29,460 --> 00:24:41,789
so we look at the common to come on
tests realize or limitation realize that

271
00:24:41,789 --> 00:24:46,289
we need to change our approach and so we
improve our toolkit and we're going to

272
00:24:46,289 --> 00:24:51,840
get into the fun part of the top which
is you know reverse-engineering iOS

273
00:24:51,840 --> 00:24:57,870
applications and what happens on the
hood so we're going to look at the we're

274
00:24:57,870 --> 00:25:03,149
going to start with the buckle binder
former then move into ma simply i'm

275
00:25:03,149 --> 00:25:07,860
going to introduce arm 32 64 and have
very high level and then look at what

276
00:25:07,860 --> 00:25:16,229
happens under hood with Objective C and
should write know every away as its own

277
00:25:16,230 --> 00:25:25,980
binary former windows as PE linux has
dealt Marco OS X and iOS have model

278
00:25:25,980 --> 00:25:32,039
right and this is because that a brief
history lesson at the heart of iOS or

279
00:25:32,039 --> 00:25:38,760
sex with the ex a new current and at the
heart and ex- that the colonel is has

280
00:25:38,760 --> 00:25:45,929
like three major layers of the vsd I ok
and Marco right and so at the heart of X

281
00:25:45,929 --> 00:25:48,960
and nupur note in the mock my program

282
00:25:48,960 --> 00:25:57,450
alright so of course if you're going to
do any assessments on the finer the

283
00:25:57,450 --> 00:26:00,419
application binary you need to know
where it is right

284
00:26:00,419 --> 00:26:08,909
so in part is it formal application and
then iOS 8 and beyond a spirited so no

285
00:26:08,909 --> 00:26:13,230
the application binary is that one
location and the data that the applicant

286
00:26:13,230 --> 00:26:20,279
that binder uses that are not a location
and then in iOS 9.3 x I realized that no

287
00:26:20,279 --> 00:26:24,450
the applicant the pop binary is in
Argentina bundle application but

288
00:26:24,450 --> 00:26:30,750
lighting just something to know so what
is this michael binary quite simply has

289
00:26:30,750 --> 00:26:35,970
a header followed by a number Lord
commands followed by data right the

290
00:26:35,970 --> 00:26:40,500
header to pretty much indicates whether
or not the binary is a

291
00:26:40,500 --> 00:26:49,170
32-bit or 64-bit binary also indicates
the architecture that it supports the

292
00:26:49,170 --> 00:26:55,920
file type also indicates whether or not
it is a dynamic library 45 executable

293
00:26:55,920 --> 00:27:02,010
and so on and then there are a number of
lugs and incidentally some of these

294
00:27:02,010 --> 00:27:06,570
flags are what you would check for
during an assessment so you would

295
00:27:06,570 --> 00:27:12,060
usually check to see if the binder was
compiled using you know SLR and so you

296
00:27:12,060 --> 00:27:18,210
check for the pipeline so using j tool
minus h2 doctor had a minor v4 to

297
00:27:18,210 --> 00:27:24,210
increase for verbal stresses there such
a word and you dumb the head right

298
00:27:25,890 --> 00:27:34,080
no the binary is going to have a number
of instructions and these instructions

299
00:27:34,080 --> 00:27:39,120
are going to be essentially determine
how the binary gets mapped into memory

300
00:27:39,120 --> 00:27:41,699
right and these instructions

301
00:27:41,700 --> 00:27:44,580
some are gonna be processed by the
colonel and some are going to be

302
00:27:44,580 --> 00:27:49,679
processed by the dynamic linker alright
we refer to these instructions as Lord

303
00:27:49,680 --> 00:27:55,320
commands know the one of the most
important or commands is Elsie segment

304
00:27:55,320 --> 00:28:01,500
on a segment is pretty much remember
regions that have the same read/write

305
00:28:01,500 --> 00:28:07,560
executable protection right so the as
you said some of them are going to be

306
00:28:07,560 --> 00:28:10,800
some of these commands are going to be
hunted by the corner

307
00:28:10,800 --> 00:28:13,740
some are going to be hunted by the
dynamic linking all right so things that

308
00:28:13,740 --> 00:28:18,000
the current will handle are like LC
encryption input that deals with

309
00:28:18,000 --> 00:28:22,860
encryption dlc code signature that deals
with code signing and code-signing is

310
00:28:22,860 --> 00:28:33,840
heavily you on iOS ilc made the miners
main entry point right well and so what

311
00:28:33,840 --> 00:28:42,629
are these segments um you usually see
page 0 for no point of traps and that

312
00:28:42,630 --> 00:28:46,170
segment usually has all its access
permissions revolt

313
00:28:46,170 --> 00:28:47,850
so for gamblin

314
00:28:47,850 --> 00:28:58,770
64-bit architectures the entirety of its
base will be dedicated to bid or the

315
00:28:58,770 --> 00:29:04,650
first four games and then you have the
text segment music program coord data

316
00:29:04,650 --> 00:29:10,289
segment rewritable program data think it
symbols ever used by the dynamic linker

317
00:29:10,289 --> 00:29:15,840
and then you have the restrict and
restrict segment prevents you from force

318
00:29:15,840 --> 00:29:22,320
loading your own dynamic libraries using
the UIR the insert libraries environment

319
00:29:22,320 --> 00:29:27,629
variable option and then each segment is
going to have an optional section

320
00:29:27,630 --> 00:29:34,380
what does this look like just an example
here but the doctor segment you just use

321
00:29:34,380 --> 00:29:41,070
j 2 minus F mr. segment example shown
here or if you prefer to use a GUI

322
00:29:41,070 --> 00:29:48,299
option you could always use the
ever-popular Michael you to write so

323
00:29:48,299 --> 00:29:56,700
after the colonel is done doing what it
does it has over processing to the

324
00:29:56,700 --> 00:30:03,120
dynamic linker and the linker pretty
much is going to resolve among other

325
00:30:03,120 --> 00:30:12,389
things symbols and it's going to load
each l-look it's going to load each LC

326
00:30:12,390 --> 00:30:19,080
Lord dial in command so if you go back
to the for the bye run around where

327
00:30:19,080 --> 00:30:25,590
right so if you go back to the battery
you see a bunch of LC LC Lord dilated at

328
00:30:25,590 --> 00:30:26,760
the bottom it

329
00:30:26,760 --> 00:30:32,158
dialing is going to load those commands
and also the LC Lord dialing can specify

330
00:30:32,159 --> 00:30:42,780
specifies which value will be used in
this case / user live valid also very

331
00:30:42,780 --> 00:30:43,980
important

332
00:30:43,980 --> 00:30:48,600
the dynamic linker support in supposing
or method touching and so all you need

333
00:30:48,600 --> 00:30:53,879
to do is at the interposed section to
the data segments and you could force

334
00:30:53,880 --> 00:30:56,010
load your library's again using

335
00:30:56,010 --> 00:31:05,730
the URL the insert libraries environment
variable I'm just a note that code that

336
00:31:05,730 --> 00:31:09,630
has the attribute constructor will alter
on

337
00:31:09,630 --> 00:31:16,200
so in your dynamic library code that has
they attribute the constructor once at

338
00:31:16,200 --> 00:31:21,420
the dynamical ever gets loaded it will
order on and so most people might be

339
00:31:21,420 --> 00:31:28,230
familiar with dynamic libraries music if
you use dump the cryptid for injecting

340
00:31:28,230 --> 00:31:33,480
into a process and dumping the binary
itself because miners from the app store

341
00:31:33,480 --> 00:31:38,100
are encrypted and so but once they get
executed unloaded into memory they are

342
00:31:38,100 --> 00:31:44,639
unencrypted don't the cryptid inserts
the a dynamic library is the binder Oh

343
00:31:44,640 --> 00:31:54,030
plaintext food so what are not map tasks
so at this point the barn is loaded into

344
00:31:54,030 --> 00:32:00,780
memory right on other systems you would
call this a process in the world--love

345
00:32:00,780 --> 00:32:08,879
mark this is a task as with other
systems processes need to talk to each

346
00:32:08,880 --> 00:32:13,410
other and so you have inter-process
communication to facilitate

347
00:32:13,410 --> 00:32:19,620
inter-process communication each task as
a port to port is simply an IPC end .

348
00:32:19,620 --> 00:32:25,530
the point here very important point here
is if you are able to put on that Court

349
00:32:25,530 --> 00:32:30,570
you own that process and by own I mean
you have full control of that process

350
00:32:30,570 --> 00:32:36,629
the logical question is how do you own
that for two options you can use the

351
00:32:36,630 --> 00:32:44,160
mark trap task for . where you party in
the process ID of the process that you

352
00:32:44,160 --> 00:32:46,750
are interested in get a hand

353
00:32:46,750 --> 00:32:52,660
done depending on the jailbreak if it is
passed for top 40

354
00:32:53,290 --> 00:32:58,750
that means that you could read current
remember right the other option is

355
00:32:58,750 --> 00:33:05,860
processor set talks which will be no
return a sport in the system so as we

356
00:33:05,860 --> 00:33:12,939
said owning the passport means you own
the process and so you to interact with

357
00:33:12,940 --> 00:33:18,490
the task the task support once you have
it it's pretty much up it's pretty much

358
00:33:18,490 --> 00:33:22,060
left up to your imagination as to what
you wanted to you could rewrite member

359
00:33:22,060 --> 00:33:26,950
with using the portal mark vapi you
could inject her own show cord pretty

360
00:33:26,950 --> 00:33:32,650
much left of what you want to do an
example is shown here tasks Finn grab

361
00:33:32,650 --> 00:33:39,430
support and then you passed that hand of
into in this example my vm region that's

362
00:33:39,430 --> 00:33:44,830
an example dumping memory you can write
your own code again

363
00:33:44,830 --> 00:33:49,929
so you're pretty much grab they get the
passport use them up vm api's read

364
00:33:49,930 --> 00:33:54,760
member are quite simple you could use
rocket speed using the region's option

365
00:33:54,760 --> 00:34:01,540
which so you from exp process ID regions
options and then you take the reason

366
00:34:01,540 --> 00:34:08,409
that you are interested in facet to leb
don't fit right into a five popular file

367
00:34:08,409 --> 00:34:10,629
off the device and you're good

368
00:34:10,629 --> 00:34:18,668
so arm assembly course we're targeting
our devices here i'm so very quickly 32

369
00:34:18,668 --> 00:34:26,290
I'm 32 bunch of registers are 0-2 r12
you know general purpose we have our

370
00:34:26,290 --> 00:34:31,120
start point that we have our link
register which stores the return address

371
00:34:31,120 --> 00:34:37,239
top on car and we have the ar-15 in the
program counter what is important though

372
00:34:37,239 --> 00:34:42,069
is to understand how functions are
invoked and hope parameters are passed

373
00:34:42,070 --> 00:34:48,669
the functions so are 0-2 archery first
four function parameters return is

374
00:34:48,668 --> 00:34:53,799
usually stored in the stock from concern
book using a weekend brunch brunch and

375
00:34:53,800 --> 00:34:58,120
Exchange where branch and exchange means
you're going to be an arm and thumb mode

376
00:34:58,120 --> 00:34:59,830
branch and link

377
00:34:59,830 --> 00:35:03,279
return address is stored in the link
register grunting can exchange

378
00:35:03,280 --> 00:35:09,400
combination of officer basic coding
instructions it's a arm is a load store

379
00:35:09,400 --> 00:35:15,310
and so before you can use data must be
loaded into a register right and Hawaii

380
00:35:15,310 --> 00:35:21,850
remember this is loading goes from
right-to-left story goes from left to

381
00:35:21,850 --> 00:35:24,520
right that's it

382
00:35:24,520 --> 00:35:32,680
arms support lot more registers so no
you have x0 268 you know general-purpose

383
00:35:32,680 --> 00:35:41,529
64-bit registers the busier 2w 30 32 bit
of course you have your usual suspects

384
00:35:41,530 --> 00:35:43,540
again 3-pointers and so on

385
00:35:43,540 --> 00:35:51,550
I'm but the and again how no arguments
get past the functions and so on an

386
00:35:51,550 --> 00:35:54,040
entire talk could be just under section
alone

387
00:35:54,040 --> 00:35:59,529
alright so this is just to introduce you
to just enough to at least get you

388
00:35:59,530 --> 00:36:00,640
started

389
00:36:00,640 --> 00:36:03,640
objective-c iOS

390
00:36:09,710 --> 00:36:10,860
Andy care of

391
00:36:10,860 --> 00:36:15,570
fortunately you have a video problem
with the other media's and you don't

392
00:36:15,570 --> 00:36:19,350
have the audio to about the 38-minute
mark but we get that back up shortly

393
00:36:19,350 --> 00:36:22,350
sorry

394
00:38:01,410 --> 00:38:02,850
and all this topic

395
00:38:02,850 --> 00:38:09,810
does is you click on a button check to
see if a certain file exists and if it

396
00:38:09,810 --> 00:38:15,060
does Prince the device is jailbroken if
not it's not jailbroken food that's in

397
00:38:15,060 --> 00:38:18,450
function gets translated to this Alaskan
thing that you're seeing here

398
00:38:19,020 --> 00:38:25,350
alright so first thing on the sporty
symbol F indicates that it's a function

399
00:38:25,350 --> 00:38:30,569
then you have to see that indicates it's
a function that belongs to a class then

400
00:38:30,570 --> 00:38:37,110
you have the module name prefix then you
you have the class name prefixed with

401
00:38:37,110 --> 00:38:46,050
Len function name prefix then this is 0
PS i have no clue what that it so if

402
00:38:46,050 --> 00:38:49,290
somebody is here who knows what that
means

403
00:38:49,290 --> 00:38:54,540
please tell me when the talk is done and
then you have function attribute

404
00:38:54,540 --> 00:38:58,680
followed by your parameter on your
return type you don't have to do this by

405
00:38:58,680 --> 00:39:03,930
handle you could use the Swift the
Mongol tool to assist or if you're using

406
00:39:03,930 --> 00:39:07,560
proper there are plugins that automate
this process for you

407
00:39:07,560 --> 00:39:16,710
alright so we're going to get into your
protection routines simple their break

408
00:39:16,710 --> 00:39:21,450
detection routines we can identify them
and how we can bypass so we're going to

409
00:39:21,450 --> 00:39:25,649
know you know trying to apply some of
the things that we discussed earlier on

410
00:39:25,650 --> 00:39:33,150
and see how we general bypass simple
divert attention routine before so we're

411
00:39:33,150 --> 00:39:37,050
going to discuss minor budget estimate
that we're going to use before we

412
00:39:37,050 --> 00:39:38,250
proceed

413
00:39:38,250 --> 00:39:43,950
yes you could do this with several other
tools you could use ex-con she has

414
00:39:43,950 --> 00:39:48,839
protect up officer in fact some of the
virtue that we discussed earlier on

415
00:39:48,840 --> 00:39:53,880
freedom for example you could use to
accomplish some of the things that we're

416
00:39:53,880 --> 00:39:58,890
going to discuss know right now but the
question again is what happens when you

417
00:39:58,890 --> 00:40:05,700
can and so the idea behind this section
is really to introduce you to assembly

418
00:40:05,700 --> 00:40:06,419
right

419
00:40:06,420 --> 00:40:11,010
like I said when I started out I just
run the common tools didn't care much

420
00:40:11,010 --> 00:40:16,020
for the essence and so this section is
just fine in that introducing you

421
00:40:16,020 --> 00:40:20,700
to assembly right with some of the best
way to do that i thought was to use like

422
00:40:20,700 --> 00:40:25,770
some simple examples as a binary
touching 11 you can replace an

423
00:40:25,770 --> 00:40:30,840
instruction we are not know operation
could change up you know conditional

424
00:40:30,840 --> 00:40:35,550
instructions to unconditional one so
branch not equal just a branch of the

425
00:40:35,550 --> 00:40:40,290
register its own and going back to that
restrict segment as I said sometimes

426
00:40:40,290 --> 00:40:45,990
you're going to encounter biner that
prevents you from force loading your own

427
00:40:45,990 --> 00:40:49,589
dynamic library because of the district
segment we're going to have to add or

428
00:40:49,590 --> 00:40:56,790
remove the article on jabber detection
routines jailbroken idevice usually

429
00:40:56,790 --> 00:41:01,140
results in some artifact to be left
behind the one that we're going to look

430
00:41:01,140 --> 00:41:05,790
at quickly lon five parts inline
functions checking to see the sandbox is

431
00:41:05,790 --> 00:41:11,370
still intact and some methods that
developers might use to deny the body

432
00:41:11,370 --> 00:41:18,029
simple routine here so we have our is
your broken function and it just checks

433
00:41:18,030 --> 00:41:24,930
to see whether are not certain files
exist city up store at the stage but

434
00:41:24,930 --> 00:41:30,690
what does it look like from a reverse
engineers perspective simple we should

435
00:41:30,690 --> 00:41:35,610
call it too or is jailbroken function
return value get stored in register w8

436
00:41:35,610 --> 00:41:40,980
we see a comparison against 0 with
registered late and then a branch so all

437
00:41:40,980 --> 00:41:45,660
we need to do is about this check is
such that comparison don't like I said

438
00:41:45,660 --> 00:41:48,000
pretty straightforward and simple

439
00:41:48,000 --> 00:41:54,600
some might say okay but this is a
contrived example nobody does this enter

440
00:41:54,600 --> 00:41:59,009
in ticketmaster you install the app on
the device pretty much always you to

441
00:41:59,010 --> 00:42:03,210
purchase tickets from for a number of
events right installed on a jailbroken

442
00:42:03,210 --> 00:42:09,870
device from to that you know jailbreak
is detected open it up in a disassembled

443
00:42:09,870 --> 00:42:15,990
and you see again checks for known five
parts some common five parts and then

444
00:42:15,990 --> 00:42:21,509
reading through you realize that there's
a comparison between register that

445
00:42:21,510 --> 00:42:28,460
there's a move instruction that moves r1
into register w 9 and then w9

446
00:42:28,460 --> 00:42:33,890
is stored on it later use that later on
in the application to determine the

447
00:42:33,890 --> 00:42:38,299
state up to determine whether or not the
device and jailbroken all you need to do

448
00:42:38,300 --> 00:42:44,720
is write a 0 to register the nine and
it's done well

449
00:42:44,720 --> 00:42:52,399
inline functions basically change the
declaration of function know instead of

450
00:42:52,400 --> 00:42:56,869
seeing a clear branch to our jailbroken
function we're now looking at the body

451
00:42:56,869 --> 00:43:02,119
of the function itself and all this does
it just increases our time that would

452
00:43:02,119 --> 00:43:05,390
normally spend reverse engineer because
know you're gonna have to read through

453
00:43:05,390 --> 00:43:07,879
the entire assembly right but again

454
00:43:07,880 --> 00:43:14,030
usually there's some comparison and so
if you could find a comparison and

455
00:43:14,030 --> 00:43:19,400
update register and again here we're
seeing compares not tolerate again some

456
00:43:19,400 --> 00:43:23,960
value and based on the results a
particular branch is taken all we need

457
00:43:23,960 --> 00:43:30,920
to do is update this command for in a
properly function in sandbox the call 24

458
00:43:30,920 --> 00:43:36,980
should fear from a reverse engineers
perspective again you see the car park

459
00:43:36,980 --> 00:43:43,040
reading through the assembly again we
see a comparison up

460
00:43:43,040 --> 00:43:49,430
what is that double it again and based
on the results that I checked we see a

461
00:43:49,430 --> 00:43:54,770
branch again all we need to do is update
this particular from person to take the

462
00:43:54,770 --> 00:43:58,280
branch that we want pretty
straightforward but to get to this point

463
00:43:58,280 --> 00:44:02,060
it just means that you have to not be
afraid of the SMN just read you the

464
00:44:02,060 --> 00:44:08,270
instructions right features prevents you
from chasing the application and so

465
00:44:08,270 --> 00:44:16,910
here's a kiss control car the results it
is then returned in a strop where the

466
00:44:16,910 --> 00:44:23,060
PFLAG is going to have the status as to
whether or not the device has been as to

467
00:44:23,060 --> 00:44:26,599
whether or not the application is being
treated and then we see an and operation

468
00:44:26,599 --> 00:44:32,720
against the PE underscore trees variable
right but this petrus variable is

469
00:44:32,720 --> 00:44:38,930
defined in this product that h is that
body and so if we look in or disassembly

470
00:44:38,930 --> 00:44:40,720
then we

471
00:44:40,720 --> 00:44:47,140
and see the under-construction of w10
against the patriots value and so we

472
00:44:47,140 --> 00:44:52,900
need to do is read the register using
register read we see the value there and

473
00:44:52,900 --> 00:44:57,190
so the bypass check all we need to do is
updated to any aperture about you and in

474
00:44:57,190 --> 00:45:02,530
this instance I just wrote a zero right
so that the under-construction that

475
00:45:02,530 --> 00:45:08,560
check would feel and pretty much done in
i attached you know prevents you from

476
00:45:08,560 --> 00:45:15,009
attaching to process an itouch of course
is defined in sister Beatrice . h as

477
00:45:15,010 --> 00:45:22,240
third one and so I in this instance
again using j tool put the actual

478
00:45:22,240 --> 00:45:26,680
function and the disassembly and so we
see our call to deal open we see the

479
00:45:26,680 --> 00:45:30,279
call to so what is that year

480
00:45:30,849 --> 00:45:36,130
shim so basically we kind of have a kind
of like a one-to-one mapping of what's

481
00:45:36,130 --> 00:45:42,369
going on and then we see and/or
operation against w9 with the value

482
00:45:42,369 --> 00:45:48,849
wanna converting one of the decimal
third one PT denied that value and so

483
00:45:48,849 --> 00:45:52,119
all we need to do this patch that and
you're done

484
00:45:52,119 --> 00:45:59,080
mom I had a simple application
development fit and so I have a in this

485
00:45:59,080 --> 00:46:05,920
instance is jailbroken function that is
implemented in c and in this case it's

486
00:46:05,920 --> 00:46:09,550
just checking to see whether or not
certain files exist similar to what we

487
00:46:09,550 --> 00:46:12,090
did before calling this

488
00:46:12,090 --> 00:46:18,690
sweet call the function check the return
value based on the ballot return printer

489
00:46:18,690 --> 00:46:24,600
particular message from disassembles
perspective or reverse engineering

490
00:46:24,600 --> 00:46:30,450
perspective we again see the mangled
names and in this instance i'm using j

491
00:46:30,450 --> 00:46:37,770
tool again to December that particular
function and of course we see or call

492
00:46:37,770 --> 00:46:44,370
the or jailbroken function value gets
returned in w 0r comparison of 20

493
00:46:44,370 --> 00:46:45,390
against one

494
00:46:45,390 --> 00:46:52,290
so all we need to do is just that
compartment right so wrapping up the

495
00:46:52,290 --> 00:46:56,160
fact is that the common bugs are pretty
much are getting close

496
00:46:56,160 --> 00:47:03,390
alright most miners bdays have the
environment where from the app store how

497
00:47:03,390 --> 00:47:09,270
most of protections that are you know
pretty much standard SLR stop cooking

498
00:47:09,270 --> 00:47:16,290
that kind of thing and so you know we
kind of need to change our approach and

499
00:47:16,290 --> 00:47:21,180
changing that approach involves not
being afraid to look at and read and

500
00:47:21,180 --> 00:47:25,020
make modifications to assemble all right

501
00:47:25,020 --> 00:47:34,470
also if you want to move into iOS into
looking at the Iowa system it show then

502
00:47:34,470 --> 00:47:40,230
you're going to have to you know get
into reversing and so on and you know

503
00:47:40,230 --> 00:47:45,450
this offenders are really your friends
and I would encourage you to add the

504
00:47:45,450 --> 00:47:51,390
reverse engineering skill set to your
arsenal my you know you will i went

505
00:47:51,390 --> 00:47:58,200
discuss some simple algebra detection
routines but there are some commercial

506
00:47:58,200 --> 00:48:02,970
tools that you know our custom and it's
not as straightforward as it and you

507
00:48:02,970 --> 00:48:07,770
know it's going to require you to get
really deep zone both dress similar code

508
00:48:07,770 --> 00:48:13,890
identify what's happening and made the
passion so again mean take away at the

509
00:48:13,890 --> 00:48:16,170
reverse engineering skill set

510
00:48:16,170 --> 00:48:21,270
you're a sinner opens up our whole new
world of testing and that's pretty much

511
00:48:21,270 --> 00:48:22,060
it

512
00:48:22,060 --> 00:48:34,120
and supplement to attack by the way by
the way on so these are they you know if

513
00:48:34,120 --> 00:48:37,240
you are interested in getting more
information on the tools that we

514
00:48:37,240 --> 00:48:43,750
discussed these are the books blog posts
and so on if you are interested for

515
00:48:43,750 --> 00:48:50,230
example in arm exploitation in learning
more about arm expectation zipper SEC

516
00:48:50,230 --> 00:48:55,150
has a very cool course if you're
interested again in iOS OSX

517
00:48:55,150 --> 00:49:00,070
reverse-engineering Jonathan 11 again
also has a very cool course so at least

518
00:49:00,070 --> 00:49:04,780
those two courses will get you started
and on the right track thanks for comin

519
00:49:04,780 --> 00:49:05,500
appreciated

