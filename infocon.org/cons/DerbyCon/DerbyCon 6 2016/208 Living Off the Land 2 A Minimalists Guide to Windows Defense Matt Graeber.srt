1
00:00:17,940 --> 00:00:20,940
what

2
00:00:25,770 --> 00:00:32,278
alright guys we're gonna go ahead and
get started thanks a lot for showing up

3
00:00:32,279 --> 00:00:38,130
to what is my very first defensive talk
so i put I'm putting my big boy pants on

4
00:00:38,130 --> 00:00:50,610
today right so welcome to living off the
land to the defensive addition I gave a

5
00:00:50,610 --> 00:00:55,440
similar talk believe is two years ago I
with an offensive spin with Bruce

6
00:00:55,440 --> 00:01:03,300
Campbell's here and it's anyway I had a
great time presenting with him so sort

7
00:01:03,300 --> 00:01:08,160
of our motivation behind running theme
was inspired by him i also want to give

8
00:01:08,160 --> 00:01:12,810
another shout-out to him I he served as
a great mentor for me after I got out of

9
00:01:12,810 --> 00:01:18,330
the military i wanted to get into
infoset so he had the faith in me to

10
00:01:18,330 --> 00:01:19,500
succeed

11
00:01:19,500 --> 00:01:24,720
I'm served as a great mentor so you know
everyone out here probably has one

12
00:01:24,720 --> 00:01:29,130
person like that served as a great
mentor so definitely try to give them a

13
00:01:29,130 --> 00:01:32,250
shout out as much as you can and
acknowledge where where you came from

14
00:01:32,910 --> 00:01:39,090
so thank you Chris alright so let's get
started a little bit about myself I'm

15
00:01:39,090 --> 00:01:44,280
the manager of security research at
various groups that the threat division

16
00:01:44,280 --> 00:01:49,530
I've got two other people on my team
will shoulder and casey smith i freaking

17
00:01:49,530 --> 00:01:53,880
love the people i work with and then my
extended family and a TD going to have

18
00:01:53,880 --> 00:01:58,589
some like amazingly bright people like
this guy right here i am on microsoft

19
00:01:58,590 --> 00:02:04,800
MVP us specializing in powershell there
and I don't know our huge powershell

20
00:02:04,800 --> 00:02:11,160
fanboys i'm gerry jackson on the
defensive services lead or more

21
00:02:11,160 --> 00:02:15,390
technically for the adaptive vision as
well so I focus mostly on continuous

22
00:02:15,390 --> 00:02:18,339
monitoring and not compromise
assessments work

23
00:02:18,340 --> 00:02:22,690
previously I was in the Air Force for
the Air Force 25 years

24
00:02:27,550 --> 00:02:31,090
alright so so what spawned the idea for
doing this

25
00:02:31,090 --> 00:02:35,769
aside from presenting the office of the
addition of this a couple years ago was

26
00:02:35,769 --> 00:02:40,629
at a four gig when i was working at
Mannion's we had been seeing more

27
00:02:40,629 --> 00:02:48,129
compromises where w my was used as as a
as a vector primarily it had been being

28
00:02:48,129 --> 00:02:54,220
used as a lateral spread method but I in
previous talks i had spoken about how a

29
00:02:54,220 --> 00:02:59,440
t29 have been using wmi very heavily for
their operations not just for lateral

30
00:02:59,440 --> 00:03:04,359
spread but they also use w my eyes like
a covert storage mechanism where they

31
00:03:04,360 --> 00:03:08,260
store their payloads and also store the
result of their payloads and in the w my

32
00:03:08,260 --> 00:03:13,298
repository so of course me working a
million i was asked the question how do

33
00:03:13,299 --> 00:03:17,769
we defend against is how do we detect
this so i put some thought into that and

34
00:03:17,769 --> 00:03:22,600
that was sort of the genesis of like all
the w my talks that gave last year and

35
00:03:22,600 --> 00:03:25,480
we're going to cover some of those
concepts as well today will be the

36
00:03:25,480 --> 00:03:30,459
primary component of this talk but it
turns out w is great for detecting w my

37
00:03:30,459 --> 00:03:36,639
attacks using wmi event subscriptions so
you know throwing your exhibit utah

38
00:03:36,639 --> 00:03:39,639
preference wherever you like so
definitely applies here

39
00:03:40,420 --> 00:03:43,630
yeah so my interest in kind of living
off the land from a different

40
00:03:43,630 --> 00:03:48,069
perspective kinda started in the Air
Force so Air Force is just like any big

41
00:03:48,069 --> 00:03:51,310
organization they have all the
certification and accreditation and you

42
00:03:51,310 --> 00:03:55,150
know change review boards and all these
things and so compiled code wasn't

43
00:03:55,150 --> 00:03:57,790
something like we couldn't just make a
binary and today we're going to run this

44
00:03:57,790 --> 00:04:02,138
on every system in the enterprise but we
can run scripts on every system in the

45
00:04:02,139 --> 00:04:06,370
enterprise and so yeah the cool thing
about powershell as you can do the same

46
00:04:06,370 --> 00:04:09,849
things that you're doing well code you
can access the win32 API you can do all

47
00:04:09,849 --> 00:04:12,910
those kinds of things and so it's kind
of like Field of Dreams if you script

48
00:04:12,910 --> 00:04:16,469
that they become like you could just you
could write a powershell script to do it

49
00:04:16,470 --> 00:04:19,890
you could run that thing anywhere you
wanted and everybody was that so that

50
00:04:19,890 --> 00:04:27,360
kind of led me down the using powershell
to do everything alright so I the agenda

51
00:04:27,360 --> 00:04:30,690
we already kind of covered our
motivation we're gonna talk kind of like

52
00:04:30,690 --> 00:04:35,790
a face methodology of kind of defensive
structure so data collection talk about

53
00:04:35,790 --> 00:04:40,380
couple capabilities or built-in commands
that you can use intrusion detection

54
00:04:40,380 --> 00:04:45,180
investigations and then that's going to
go into kind of like hardening and using

55
00:04:45,180 --> 00:04:47,340
device card talking about the price

56
00:04:47,340 --> 00:04:52,229
alright so ridiculous collection this is
just kind of we really try to focus

57
00:04:52,230 --> 00:04:56,880
kinda like an inn . data collection
methodology so gathering things like

58
00:04:56,880 --> 00:05:01,830
processes services network connections
autoruns all the different persistent

59
00:05:01,830 --> 00:05:05,700
locations across the cost every system
enterprise bring it into something like

60
00:05:05,700 --> 00:05:11,010
splunk or log stash or whatever you're
in similar choices and then try and do

61
00:05:11,010 --> 00:05:16,710
some sort of analysis on that so to
really good ways to do this are using WI

62
00:05:16,710 --> 00:05:23,280
WI has been around since windows 95 at
least I think maybe possibly earlier its

63
00:05:23,280 --> 00:05:25,080
almost always available

64
00:05:25,080 --> 00:05:28,800
assuming that there's not some firewall
is blocking the ports that you need and

65
00:05:28,800 --> 00:05:33,479
then which they're typically isn't in my
experience and then a one-of-a-kind one

66
00:05:33,479 --> 00:05:38,340
of the cons that data is going to be
limited to the available w my classes so

67
00:05:38,340 --> 00:05:43,560
w my classes that are on windows 95 are
there's less classes on windows 95 and

68
00:05:43,560 --> 00:05:48,870
they're going to be on windows to for
example and so using wmi you there are

69
00:05:48,870 --> 00:05:53,640
ways to kind of go outside of the kind
of the w my schema or like classes but

70
00:05:53,640 --> 00:05:58,500
you would have to be pretty creative so
w-why is kind of limited in essence the

71
00:05:58,500 --> 00:06:03,330
other option is windows windows remote
management or 1rm which is the basis for

72
00:06:03,330 --> 00:06:08,550
our shell remoting and so I available
since kind of windows XP and it unlocks

73
00:06:08,550 --> 00:06:12,090
powershell functionality so this is
basically anything you can do in dotnet

74
00:06:12,090 --> 00:06:14,090
you could do over windows remote
management and

75
00:06:14,090 --> 00:06:22,310
anything in the windows 32 API so all
right so kind of segue from that we want

76
00:06:22,310 --> 00:06:27,650
to kind of make a case for power shell
remoting so as a consultant i go to

77
00:06:27,650 --> 00:06:31,909
numerous clients and tried tried asking
that window you know windows remote

78
00:06:31,910 --> 00:06:35,600
management enabling their enterprise and
they say no why would we do that bad

79
00:06:35,600 --> 00:06:41,000
guys are going to use that it's going to
be you know terrible right and so I i

80
00:06:41,000 --> 00:06:45,500
don't i don't agree with that i think
likely homes and Jefferson over wood are

81
00:06:45,500 --> 00:06:49,370
very big zealots for pushing out our
shell remoting through all your about

82
00:06:49,370 --> 00:06:52,430
your enterprise and so some of the
reasons that you would do that is

83
00:06:52,430 --> 00:06:56,330
because PowerShell remoting was built
with security in mind right and so it's

84
00:06:56,330 --> 00:07:04,039
firewall friendly so short million uses
one port 5985 or HTTP or 5986 for https

85
00:07:04,040 --> 00:07:06,710
it's always encrypted so don't want that

86
00:07:06,710 --> 00:07:10,070
HTTP vs https they confuse you

87
00:07:10,070 --> 00:07:14,479
PowerShell remoting is encrypted by
default and and so you're if you're on

88
00:07:14,479 --> 00:07:19,159
the domain is always going to be
encrypted regardless it in numerous for

89
00:07:19,160 --> 00:07:22,220
it enables numerous valuable
capabilities which i'm going to talk

90
00:07:22,220 --> 00:07:25,789
about here in a second so our shell
remoting you have things like inner PS

91
00:07:25,789 --> 00:07:29,090
session which I'll demonstrate a second
and you have things like info command

92
00:07:29,090 --> 00:07:32,989
which allow you to run an arbitrary
command on a remote system through

93
00:07:32,990 --> 00:07:37,700
powershell and you also have things like
Windows Event 14 so we have we have

94
00:07:37,700 --> 00:07:41,479
windows event logs on every system
that's that's that's cool but you know

95
00:07:41,479 --> 00:07:44,150
how do you centralize the event logs
will you can use Windows Event Reporting

96
00:07:44,150 --> 00:07:48,138
which runs over windows remote
management to centralize all those been

97
00:07:48,139 --> 00:07:53,960
lost in one location and then provides
an alternative to vulnerable or bone

98
00:07:53,960 --> 00:07:57,590
abilities of current admin protocols not
saying that there's it's impossible to

99
00:07:57,590 --> 00:07:59,780
find a vulnerability windows remote
management

100
00:07:59,780 --> 00:08:04,760
I'm sure it is there's none that I know
of that are public at this point but

101
00:08:04,760 --> 00:08:08,930
like the protocols that are already
using like SNB tons of tons of

102
00:08:08,930 --> 00:08:13,729
vulnerabilities going back to windows XP
you have like a meso 867 is probably the

103
00:08:13,729 --> 00:08:21,020
most prolific for ability or exploit out
there and then you have like RTP RTP a

104
00:08:21,020 --> 00:08:24,590
lot of administrators use it but it
causes interactive logon which expose

105
00:08:24,590 --> 00:08:28,520
your credentials to initial attacks like
me because that's where windows remote

106
00:08:28,520 --> 00:08:31,909
management

107
00:08:31,909 --> 00:08:40,400
yeah yeah yeah so network logon
someone's removing all right so our show

108
00:08:40,400 --> 00:08:45,199
promoted going into invoke man this is
kind of that one too many promoting and

109
00:08:45,200 --> 00:08:49,339
so it allows you to execute arbitrary
code on a remote machine or machines and

110
00:08:49,339 --> 00:08:53,390
so kind of the syntax for doing that
would be invoked command desk computer

111
00:08:53,390 --> 00:08:58,310
name computer 1 in this case script
block anything within the curly braces

112
00:08:58,310 --> 00:09:01,910
in that case I'll get process is going
to be run on every moment scene and

113
00:09:01,910 --> 00:09:06,469
return back to you hopefully then you
would supply credentials for remote

114
00:09:06,470 --> 00:09:09,500
machine another another really cool
thing that not a lot of people know

115
00:09:09,500 --> 00:09:13,640
about i just learned about it like two
months ago is you can actually if you

116
00:09:13,640 --> 00:09:19,490
have a function that's a so you have to
find locally you can actually run that

117
00:09:19,490 --> 00:09:23,180
remotely kind of transparently magic get
some magic

118
00:09:23,180 --> 00:09:30,229
I think that starts in powershell
version 3 true quality ok so yes that

119
00:09:30,230 --> 00:09:35,360
functionality might even existed
powerful version 2 1 back in the day

120
00:09:35,360 --> 00:09:39,470
when i first started using invoke man I
lot of problems that we faced or so we

121
00:09:39,470 --> 00:09:42,470
thought was that you had to have the
actual function defined on the remote

122
00:09:42,470 --> 00:09:46,040
system in order to call it that is not
the case and if I would've known that

123
00:09:46,040 --> 00:09:49,040
five years ago I would have saved myself
a lot of times

124
00:09:50,030 --> 00:09:55,459
and so it all do demo of that second the
other option is inter PS session so a

125
00:09:55,460 --> 00:09:59,480
lot of folks use PS exact kind of get a
command shell on a remote system and you

126
00:09:59,480 --> 00:10:00,560
know kind of do there

127
00:10:00,560 --> 00:10:04,099
whatever they want to do with that
command shell the alternative is

128
00:10:04,100 --> 00:10:08,390
interview session which runs over when
RM starts an interactive powershell

129
00:10:08,390 --> 00:10:13,250
session South powershell session with a
remote computer and the syntax is

130
00:10:13,250 --> 00:10:17,210
interview session desk computer name one
desperate ential and then you would

131
00:10:17,210 --> 00:10:20,210
passage individuals it would probably
bore password in this case

132
00:10:24,980 --> 00:10:30,920
alright so kind of the just doing a real
simple instruction

133
00:10:31,910 --> 00:10:46,520
yes back on all like you're talking like
the one more okay

134
00:10:47,030 --> 00:10:54,170
the better good ok now it's going
alright so we have a where you have a PS

135
00:10:54,170 --> 00:10:57,709
session which is basically an
authenticated session with a remote

136
00:10:57,710 --> 00:11:01,850
system over when RM i'm already created
and so I'm just going to pass that

137
00:11:01,850 --> 00:11:08,420
session and so I could do script block
where he's going to run process against

138
00:11:08,420 --> 00:11:16,459
the remote system and the sessions got
disconnected well

139
00:11:21,059 --> 00:11:33,718
alright so I mac user and then when i
switch over to windows keyboard Jackson

140
00:11:33,719 --> 00:11:44,399
so alright yeah alright so so what I
just did I ranking process which is a

141
00:11:44,399 --> 00:11:49,619
process listing in powershell you'll
notice that all the normal properties

142
00:11:49,619 --> 00:11:51,839
are returned from get process but
there's an additional additional

143
00:11:51,839 --> 00:11:55,739
property called PS computer name which
tells me that this information came from

144
00:11:55,739 --> 00:12:01,589
the IP address 1000 to this will be like
a hostname if you have dns and life and

145
00:12:01,589 --> 00:12:05,849
stuff set up so I'm just kind of a
simplified example of us running a

146
00:12:05,849 --> 00:12:08,849
command against the remote system

147
00:12:09,419 --> 00:12:13,139
alright so the next thing i want to show
this is just kind of cool things that we

148
00:12:13,139 --> 00:12:16,139
could do this session

149
00:12:19,329 --> 00:12:26,498
alright PS session went n so now i'm
using interview session which is going

150
00:12:26,499 --> 00:12:30,759
to give me an interactive prop on a
remote machine you'll notice that my

151
00:12:30,759 --> 00:12:37,089
props in powershell changes to indicate
that this is right on 1000 to IP address

152
00:12:37,089 --> 00:12:40,629
and i can just do you know get process
or whatever my command is going to be

153
00:12:40,629 --> 00:12:45,399
and that's that's running on that remote
machine and I can just type exit and go

154
00:12:45,399 --> 00:12:50,889
back to my local machine so just got a
way to easily over when r and get access

155
00:12:50,889 --> 00:12:53,739
to every move

156
00:12:53,739 --> 00:13:02,410
ok so now sometimes when around across
the enterprise is not going to be an

157
00:13:02,410 --> 00:13:06,519
option in that case you can certainly
call back to wy many of the same

158
00:13:06,519 --> 00:13:11,920
concepts the PS remoting in powershell
version 3 and above also apply using

159
00:13:11,920 --> 00:13:16,779
these simple mail it so when your sim
just think w my basically not gonna

160
00:13:16,779 --> 00:13:22,119
distinguish between the two right now
but you can establish a sim session

161
00:13:22,119 --> 00:13:28,179
instead of a PS session and get a lot of
the same kind of functionality and i'll

162
00:13:28,179 --> 00:13:34,209
show you some examples of that so I
talked at great length about the be mine

163
00:13:34,209 --> 00:13:40,540
in the past so I don't want to belabor
that per se but uh w-why is a offers a

164
00:13:40,540 --> 00:13:45,549
great opportunity to or data collection
when performing like a hunt

165
00:13:45,549 --> 00:13:51,730
investigation so but the problem is say
like if you're sweeping for files or

166
00:13:51,730 --> 00:13:57,459
registry keys is a pain in the ass to
form the w my queries manually has

167
00:13:57,459 --> 00:14:02,589
anyone like had to deal with warming
long w my queries for stuff we got a few

168
00:14:02,589 --> 00:14:07,449
guys so you don't you definitely know
the pain so I wrote him sweet to kind of

169
00:14:07,449 --> 00:14:13,599
abstract a lot of that away to really
help with with incident response and and

170
00:14:13,600 --> 00:14:19,689
hunting engagements so little bit more
background about the BMI again great way

171
00:14:19,689 --> 00:14:25,299
to collect post information the w my
service is listening on every system so

172
00:14:25,299 --> 00:14:30,579
going back to like windows 98 all the
way up to windows 10 Server 2016 that

173
00:14:30,579 --> 00:14:31,400
service is

174
00:14:31,400 --> 00:14:37,430
up and running I'm depending on the OS
there's gonna be like thousands of w my

175
00:14:37,430 --> 00:14:42,709
classes available to you so we're going
to be doing demos against a windows XP

176
00:14:42,710 --> 00:14:49,280
no windows 10 system to show you that
the like manageability is the same

177
00:14:49,280 --> 00:14:55,220
experience across all os's when using
wmi just there may be a different

178
00:14:55,220 --> 00:15:02,450
amounts or subset of w my classes
depending on the OS there's a great

179
00:15:02,450 --> 00:15:06,680
social module for interacting with this
stuff more classic Commandments were the

180
00:15:06,680 --> 00:15:11,239
wi maintenance which are available and
b2 we're gonna be showing everything in

181
00:15:11,240 --> 00:15:17,120
v3 plus where the simple maintenance or
introduce the great thing about those is

182
00:15:17,120 --> 00:15:21,710
that one you can establish the session
so you basically we need to authenticate

183
00:15:21,710 --> 00:15:27,440
once and then you can do a lot of
queries thereafter and it also works

184
00:15:27,440 --> 00:15:33,050
over multiple protocols by default some
Commandments were over WS man so I went

185
00:15:33,050 --> 00:15:40,069
around as per paul it's built on top of
WS man up so basically if you have like

186
00:15:40,070 --> 00:15:44,030
when around enabled in your enterprise
that you can use some Commandments using

187
00:15:44,030 --> 00:15:49,790
that default protocol but you can also
fall back to decom for as the legacy

188
00:15:49,790 --> 00:15:54,949
protocol which i'll be doing for windows
XP so what's great is I can drive all

189
00:15:54,950 --> 00:15:59,960
this from powershell on a single system
and I don't even need powershell to be

190
00:15:59,960 --> 00:16:05,150
installed on the remote system to
collect all this all this information i

191
00:16:05,150 --> 00:16:11,300
Wis also extensible so one of the
downsides is your limited to the w my

192
00:16:11,300 --> 00:16:14,719
class library that's available to so
like one thing that really irks me is

193
00:16:14,720 --> 00:16:19,790
like yes I can do a sweep of files
really easily but I can't get hashes of

194
00:16:19,790 --> 00:16:25,189
those files via w my alone so
theoretically you could extend the w my

195
00:16:25,190 --> 00:16:29,480
schema write your own w my provider this
would be a binary that you would have to

196
00:16:29,480 --> 00:16:34,880
push down and like register that
provider but it is extensible if you

197
00:16:34,880 --> 00:16:39,170
really wanted to do that if you wanted
to stick with strictly w line it is

198
00:16:39,170 --> 00:16:39,910
possible

199
00:16:39,910 --> 00:16:45,189
again queries can be very difficult for
manually so I try to abstract a lot of

200
00:16:45,190 --> 00:16:49,150
that away and also decom is not the most
firewalls only protocol

201
00:16:49,150 --> 00:16:56,079
fortunately when around is it's a single
port that supports w my operations

202
00:16:56,080 --> 00:17:01,390
windows about boarding operations and
power shell remoting okay so some sweet

203
00:17:01,390 --> 00:17:07,420
again doesn't require powershell on the
target is great i love that operates on

204
00:17:07,420 --> 00:17:11,740
some sessions so you would have to call
you don't do this remotely you called

205
00:17:11,740 --> 00:17:16,870
new dash since session to authenticate
to whatever you're sweeping against

206
00:17:16,869 --> 00:17:19,179
authentication for once

207
00:17:19,180 --> 00:17:26,230
abstract away the complexities of wy and
so it's comprised of sort of a core

208
00:17:26,230 --> 00:17:30,970
collection capability so we can easily
query without having to form complicated

209
00:17:30,970 --> 00:17:36,550
w my queries register Keys their values
the value types and we can even reverse

210
00:17:36,550 --> 00:17:39,550
over the registry

211
00:17:45,020 --> 00:17:49,250
I don't think it started

212
00:17:54,950 --> 00:18:06,620
ok so in addition to the registry keys
we can do sweets of the ball system and

213
00:18:06,620 --> 00:18:31,070
reverse of that as well so I know he
talked about registry keys and lock and

214
00:18:31,070 --> 00:18:35,240
stuff but you can also do directory and
file listings you can query the event

215
00:18:35,240 --> 00:18:39,830
log and then list services processes
windows a-list network connection

216
00:18:39,830 --> 00:18:45,800
welcome you have the ability to use not
be my degree network connections is

217
00:18:45,800 --> 00:18:51,260
amazing so in a world where everyone has
windows 8 plus installed in the

218
00:18:51,260 --> 00:18:53,480
enterprise this will be a beautiful
thing

219
00:18:53,480 --> 00:19:00,530
ok so I'm going to jump right into a
demo here now I've already established

220
00:19:00,530 --> 00:19:06,320
connections to like XP and Windows 10
system so first let me show you the hard

221
00:19:06,320 --> 00:19:14,480
way to do things i want to query the
monkey on buying windows 10 system so

222
00:19:14,480 --> 00:19:20,330
what I do is alcohol books and method i
would give it the high which is in 32

223
00:19:20,330 --> 00:19:26,510
number which you have to look up on msdn
give it the sucky path I we have to

224
00:19:26,510 --> 00:19:33,770
specify the class that contains the
method to enumerate values which is str8

225
00:19:33,770 --> 00:19:39,980
dropp the name space that contains that
class and then we can go ahead and fire

226
00:19:39,980 --> 00:19:42,980
this all

227
00:19:45,710 --> 00:19:58,700
ok so when we get a return value zero
that indicates success and so what this

228
00:19:58,700 --> 00:20:03,440
did it just called the new values method
in the SEC wrench prof classes a static

229
00:20:03,440 --> 00:20:11,330
w my method and it just returned to me
the names and the value types of all the

230
00:20:11,330 --> 00:20:16,070
values within that key so the next thing
that I would have to do I want to do

231
00:20:16,070 --> 00:20:21,470
this the hard way was calling is called
invokes and method again calling the get

232
00:20:21,470 --> 00:20:23,330
string value method

233
00:20:23,330 --> 00:20:26,990
how do I know it's called get string
value because i had to look up in msdn

234
00:20:26,990 --> 00:20:29,899
what type to refer to

235
00:20:29,899 --> 00:20:36,979
so type 2 is the reg underscore SZ type
so i'm going to call getstring value to

236
00:20:36,980 --> 00:20:38,929
get the string value

237
00:20:38,929 --> 00:20:46,880
ok so this is just like one of the
built-in monkeys in a default win 10

238
00:20:46,880 --> 00:20:48,289
installation

239
00:20:48,289 --> 00:20:52,580
also I i could investigate this little
bit further but now let me start to show

240
00:20:52,580 --> 00:20:58,460
you the easy way to do this in sin sweet
i have a function called get CS register

241
00:20:58,460 --> 00:21:02,779
value pretty straightforward give it
your sim session that we established

242
00:21:02,779 --> 00:21:09,289
before give the hive and the unsub keep
out and it gives me everything that I

243
00:21:09,289 --> 00:21:16,760
mean right there in one line so it
breaks out the type value into something

244
00:21:16,760 --> 00:21:22,730
that's human-readable it and it gives me
the high the sucky path the name of the

245
00:21:22,730 --> 00:21:28,520
value and the content of that value all
in a single line now let's take this one

246
00:21:28,520 --> 00:21:37,220
step further I started to implement
autoruns in pure wy so I'm going to get

247
00:21:37,220 --> 00:21:42,140
the law on switch and many of you are
probably familiar with autoruns I've

248
00:21:42,140 --> 00:21:47,450
mapped individual switches for the get
CS registry autostart function to the

249
00:21:47,450 --> 00:21:53,659
tabs that UNC in Charles again this is
all over

250
00:21:53,659 --> 00:21:54,680
pure

251
00:21:54,680 --> 00:22:00,710
wmi not running a single script on the
most and i'm running this on windows XP

252
00:22:00,710 --> 00:22:14,840
as well which doesn't have powerful
install so quickly show you the help of

253
00:22:14,840 --> 00:22:21,350
this and there's not like 121 parody
just get up like around functionality to

254
00:22:21,350 --> 00:22:26,179
the w my functionality it's cocaine to
get all this but this is what i have so

255
00:22:26,180 --> 00:22:32,000
far i have all of the following two tabs
logon LCA providers image hijacks happen

256
00:22:32,000 --> 00:22:37,430
it and if you just run it without the
switches then it is implied that you

257
00:22:37,430 --> 00:22:44,300
want to return all of the autoruns types
so it's very very intuitive in my

258
00:22:44,300 --> 00:22:47,570
opinion so cool stuff i really like it

259
00:22:47,570 --> 00:22:50,570
Jared you used it oh yeah all right

260
00:22:51,680 --> 00:22:57,560
oh ok a little more registry stuff i
really like the fact that i can rehearse

261
00:22:57,560 --> 00:23:06,860
so get CS registry key I'll give it my
sim session let's do this on windows XP

262
00:23:06,860 --> 00:23:10,850
and proving that well

263
00:23:10,850 --> 00:23:17,270
windows XP doesn't have power shell on
it that's ok we have a completion on

264
00:23:17,270 --> 00:23:23,450
some of the switches Sookie I don't even
need that ok so here's all the root keys

265
00:23:23,450 --> 00:23:35,060
in HK lon pop yet so i want to show you
this awesome switch

266
00:23:35,060 --> 00:23:38,060
okay go ahead and clap

267
00:23:41,960 --> 00:23:47,720
out what's also really cool is ok it
registry key is just giving me

268
00:23:47,720 --> 00:23:50,750
information only registry keys or what I
want those values

269
00:23:51,320 --> 00:24:01,100
well I can recur so over the keys and
then ya see this registry value though I

270
00:24:01,100 --> 00:24:06,709
mean that's pretty intuitive right cool

271
00:24:06,710 --> 00:24:10,070
all right now let's move into files
let's say I wanted to further

272
00:24:10,070 --> 00:24:14,928
investigate the executable that was in
that room key so let's do it the hard

273
00:24:14,929 --> 00:24:16,309
way

274
00:24:16,309 --> 00:24:21,799
ok so how to do it the hard way we're
going to do a pretty complicated query

275
00:24:21,799 --> 00:24:27,980
on the sin data file class so here's my
query basically we're saying select star

276
00:24:27,980 --> 00:24:32,120
from some day tomorrow we're driving
equals C half equals this and we have to

277
00:24:32,120 --> 00:24:39,168
escape or pass file name is Apollo name
and the extension is sexy like that

278
00:24:39,169 --> 00:24:49,190
sauce but it works ok so i can get the
file information now by default those of

279
00:24:49,190 --> 00:24:52,190
you who are not familiar with powershell

280
00:24:58,110 --> 00:25:14,490
alright by default a lot of powerful
objects are only going to display in a

281
00:25:14,490 --> 00:25:18,900
certain subset of the properties but in
the same data file class there's a lot

282
00:25:18,900 --> 00:25:23,580
more properties i just type into some
like format this fellow's the alias star

283
00:25:23,580 --> 00:25:26,939
to me all the properties and there's a
lot of additional properties that you're

284
00:25:26,940 --> 00:25:41,220
not seeing beautiful how folks are
getting here unfortunately we had

285
00:25:41,220 --> 00:25:46,200
another problem of one of the catch
devices so tell about the 50 minutes 48

286
00:25:46,200 --> 00:25:50,190
seconds mark we have no audio so sorry
for the inconvenience

287
00:30:48,930 --> 00:30:53,760
looks at like the rest run keys and a
couple other locations for persistence

288
00:30:53,760 --> 00:30:58,920
yes darling you do so this would be
looking for new new registry run keys or

289
00:30:58,920 --> 00:31:01,290
new start menu injuries

290
00:31:01,290 --> 00:31:06,330
alright so that was a very basic kind of
introduction to wi and women query

291
00:31:06,330 --> 00:31:12,659
language if you have any extra questions
gravity who's a powershell vp0 an e-book

292
00:31:12,660 --> 00:31:20,340
at this at this website that it goes
into a very deep look into WL so if you

293
00:31:20,340 --> 00:31:33,720
have any questions about that on learn
more check out hips are all right so up

294
00:31:33,720 --> 00:31:37,290
were kind of going to do an introduction
so it's w my base intrusion detection

295
00:31:37,290 --> 00:31:41,550
system larges depth permanent to be my
even subscriptions you can do things

296
00:31:41,550 --> 00:31:45,450
like monitor for general system
information introduction of persistence

297
00:31:45,450 --> 00:31:49,980
lateral movement it's dress complexities
of the permanent witn subscription so

298
00:31:49,980 --> 00:31:53,430
you don't have to understand that
there's filters and consumers and what

299
00:31:53,430 --> 00:31:56,940
all the arguments to those things are
going to msdn back and forth through

300
00:31:56,940 --> 00:32:01,680
things like a command called nude SW
monument filter which is going to tell

301
00:32:01,680 --> 00:32:07,680
you what it needs or register permit w
my event and then right now our past

302
00:32:07,680 --> 00:32:12,090
kind of two main built-in mechanisms for
reporting events one is the one is the

303
00:32:12,090 --> 00:32:13,320
event log which is ideal

304
00:32:13,320 --> 00:32:17,100
especially if you have one has been
forwarding and through an HTTP post

305
00:32:17,100 --> 00:32:21,659
method so you can just have it right
directly to swap over HTTP through like

306
00:32:21,660 --> 00:32:24,840
a rest apo all right here

307
00:32:24,840 --> 00:32:32,520
alright so the first thing we're going
to do is we're interested in detecting

308
00:32:32,520 --> 00:32:37,320
lateral movement one of the kind of most
prolific lateral movement techniques is

309
00:32:37,320 --> 00:32:43,530
using the win32 process and I process
classes creates method so you know

310
00:32:43,530 --> 00:32:47,790
process called creative you use Winnick
a lot of people use this a curveball

311
00:32:47,790 --> 00:32:49,020
strike

312
00:32:49,020 --> 00:32:54,120
empire all those guys are using that to
do lateral movement but what we found is

313
00:32:54,120 --> 00:32:59,370
that there is a class called the msft w
my provider exact method AC vent free

314
00:32:59,370 --> 00:33:04,500
this is actually like a debugging class
that allows you to detect when I met w

315
00:33:04,500 --> 00:33:08,850
my method is executed and so in this
particular case we're looking for the

316
00:33:08,850 --> 00:33:13,230
object to be 13 to process and the
method name to be create right and so

317
00:33:13,230 --> 00:33:20,310
every time I'm w my method is executed
and it's up to 132 process class and the

318
00:33:20,310 --> 00:33:21,629
methods name is great

319
00:33:21,630 --> 00:33:25,830
that's better that's going to trigger
and so we're just going to go ahead and

320
00:33:25,830 --> 00:33:27,480
create this

321
00:33:27,480 --> 00:33:31,890
alright so you see that we registered
this we're registering on the windows

322
00:33:31,890 --> 00:33:36,660
10pm that's that would kinda . with the
next thing that we're going to do is

323
00:33:36,660 --> 00:33:41,400
we're going to build the Indian login
consumer which allows us to write any

324
00:33:41,400 --> 00:33:48,540
been to the event log upon that lateral
movement techniques we use kind of one

325
00:33:48,540 --> 00:33:53,670
of the things that is worth pointing out
is the ws sh event log provider allows

326
00:33:53,670 --> 00:33:58,530
you to write arbitrary data to event ID
eight and so that's that's why we're

327
00:33:58,530 --> 00:34:00,389
using these two right here

328
00:34:00,390 --> 00:34:06,540
wsh just let you write any any strings
that you want to that event ID

329
00:34:08,010 --> 00:34:13,290
alright so now we've created that
consumer the last thing that we need to

330
00:34:13,290 --> 00:34:17,340
do is do that binding and marry these
two together we call that the you've

331
00:34:17,340 --> 00:34:21,360
been subscription kind of like an
umbrella term is over which we're taking

332
00:34:21,360 --> 00:34:24,840
the names that we defined up here so
that consumers called in to process

333
00:34:24,840 --> 00:34:28,530
great method that's arbitrary and then
we're going to marry them together and

334
00:34:28,530 --> 00:34:32,940
so now we have a true witn subscription
running on windows to inbox is

335
00:34:32,940 --> 00:34:38,610
monitoring for the win32 process
creating that being called so now we're

336
00:34:38,610 --> 00:34:43,230
going to do kind of like a an arbitrary
quote-unquote lateral movement or use of

337
00:34:43,230 --> 00:34:46,649
that method on this isn't actually going
to do lateral movement but we're going

338
00:34:46,649 --> 00:34:49,799
to use that method to spawn a command
shell I'm just to kind of demonstrate

339
00:34:51,060 --> 00:34:57,480
alright so the return value is 0 we got
it we got a pin for that command shell

340
00:34:57,480 --> 00:35:03,330
so there's now a command shell cmd.exe
running on that one just inbox and so

341
00:35:03,330 --> 00:35:07,950
now we can leverage some sweet Matz Matz
thing they just talked about and we can

342
00:35:07,950 --> 00:35:14,460
query the event log or sourcetype wsh
alright so we ran this a couple times to

343
00:35:14,460 --> 00:35:19,710
practice but you can get the idea we
have these insertion strings which are

344
00:35:19,710 --> 00:35:24,000
the actual the actual data from the
event log we can see the time and it was

345
00:35:24,000 --> 00:35:27,000
run which that looks like it's the older
one

346
00:35:28,110 --> 00:35:36,060
10 4 208 am which is the exact time that
we're at and so if we were to have store

347
00:35:36,060 --> 00:35:39,060
that

348
00:35:51,900 --> 00:36:07,680
alright so we have insertion strings do
alright and so we we get down to the

349
00:36:07,680 --> 00:36:12,990
point where we see the command executed
is cmd.exe so we're we're not only just

350
00:36:12,990 --> 00:36:17,308
notifying you that you know about
lateral movement technique or the crew

351
00:36:17,309 --> 00:36:20,069
to create method of 132 process was
executed

352
00:36:20,069 --> 00:36:23,250
we're also telling you what was executed
that you have little bit more fidelity

353
00:36:23,250 --> 00:36:24,299
on

354
00:36:24,299 --> 00:36:30,599
yep so another really cool interesting
time to sweep is if you were using since

355
00:36:30,599 --> 00:36:34,529
we to do like w my persistence checking
you can also use this to check to make

356
00:36:34,529 --> 00:36:41,160
sure that your w descriptions were
registered properly and so here we are

357
00:36:41,160 --> 00:36:46,440
able to see that that w my description
was registered properly so we have the

358
00:36:46,440 --> 00:36:50,789
filter named txt process great method
and the consumer named andy process

359
00:36:50,789 --> 00:36:57,809
grade you all right

360
00:36:59,760 --> 00:37:05,339
ok so i only recently discovered BTW i
think it's a really cool subsystem in

361
00:37:05,339 --> 00:37:12,328
windows for taking like the wi eventing
like one step beyond and using it to

362
00:37:12,329 --> 00:37:18,539
further augment the event log for like
super low level events that you might be

363
00:37:18,539 --> 00:37:25,140
interested in as a responder so real
brief intro BTW is used traditionally as

364
00:37:25,140 --> 00:37:31,828
of like a tracing and debugging platform
for user mode and promo drivers so

365
00:37:31,829 --> 00:37:36,839
applications can supply events to egw
though these are called providers and

366
00:37:36,839 --> 00:37:41,430
then any application there's some
built-in one's called consumers can

367
00:37:41,430 --> 00:37:47,038
consume these events and establish a
session two collections the traces are

368
00:37:47,039 --> 00:37:51,180
system wide so they can be noisy there
is some there's a limited amount of

369
00:37:51,180 --> 00:37:56,098
filtering that can be performed and i
will show you that you can capture these

370
00:37:56,099 --> 00:37:59,339
live in real time in memory you can also

371
00:37:59,980 --> 00:38:07,930
capture them to an etl file as well so
BTW can be really useful for like

372
00:38:07,930 --> 00:38:13,270
dynamic malware analysis in fact
pokémon uses under the hood

373
00:38:13,270 --> 00:38:16,540
in addition to a bunch of extra tools

374
00:38:16,540 --> 00:38:18,880
the only thing is it's not well
documented so you're gonna have to do

375
00:38:18,880 --> 00:38:20,710
some experimentation yourself

376
00:38:20,710 --> 00:38:27,880
ok so providers what supplies the events
to the consumer that receives those are

377
00:38:27,880 --> 00:38:31,570
some of the really cool providers that
are interesting to me is like the

378
00:38:31,570 --> 00:38:35,500
windows kernel trays so we can get like
real-time monitoring of like the

379
00:38:35,500 --> 00:38:40,660
registry processes all in user mode we
don't need a driver for any of this

380
00:38:40,660 --> 00:38:44,618
windows powershell has a great BTW
provider again none of those documents

381
00:38:44,619 --> 00:38:50,710
you need to experiment the consumers
what horses these these events will get

382
00:38:50,710 --> 00:38:54,340
one event powershell is great for that
this bunch of extra tools a session is

383
00:38:54,340 --> 00:38:59,560
what establishes the collection session
kind of like you basically pick and

384
00:38:59,560 --> 00:39:03,910
choose the provider that you want to to
collect off oh and the controller is

385
00:39:03,910 --> 00:39:12,190
what starts that session and allows you
to configure it so some common utilities

386
00:39:12,190 --> 00:39:16,780
that you probably use all the time that
you don't you may not realize uzw hood

387
00:39:16,780 --> 00:39:21,880
is the event log itself and SH I you do
whole packet capture with a u ZT w

388
00:39:21,880 --> 00:39:28,180
problem system on Windows Defender uzw
pretty heavily you can use log man to

389
00:39:28,180 --> 00:39:31,540
interact with all this stuff it's pretty
low-level utility it's got kind of a

390
00:39:31,540 --> 00:39:35,770
learning curve but I suggest that you
invest the time to look into it if

391
00:39:35,770 --> 00:39:37,420
you're really interested in this

392
00:39:37,420 --> 00:39:43,030
ok so hw4 incident response again
there's like two most like real time

393
00:39:43,030 --> 00:39:47,410
tracing in memory i think would be
really good for like real-time alerting

394
00:39:47,410 --> 00:39:51,850
for instant response scenarios and then
for etl captures what you're capturing

395
00:39:51,850 --> 00:39:57,368
on this this could be used for like like
post-mortem analysis or for following up

396
00:39:57,369 --> 00:40:01,210
for like remediation actions you you
could collect for a while

397
00:40:01,210 --> 00:40:04,480
full detail locks back and then do your
analysis on was collect

398
00:40:04,480 --> 00:40:10,420
ok so the scenario that i want to
present for using ECW was I want to

399
00:40:10,420 --> 00:40:17,500
detect whenever a.net assembly for
module is loaded in memory so while ago

400
00:40:17,500 --> 00:40:22,750
i came up with what I thought was a
pretty clever w my event to detect any

401
00:40:22,750 --> 00:40:28,090
arbitrary process where powershell was
being loaded but then Casey Smith said

402
00:40:28,090 --> 00:40:32,380
well why don't I just load some top
management automation in memory using

403
00:40:32,380 --> 00:40:37,480
the.net memory loader that's built into
the dominant class library was like okay

404
00:40:37,480 --> 00:40:42,100
well that would definitely defeat my
will be my event so i went to GW it

405
00:40:42,100 --> 00:40:47,259
turns out there's a great BTW provider
and keyword to detect just that

406
00:40:47,800 --> 00:40:54,460
okay so um attackers like me i use this
technique all the time i use the system

407
00:40:54,460 --> 00:40:58,600
. runtime or system were watching that
assembly static load method to load

408
00:40:58,600 --> 00:41:05,350
botnet byte array in memory great i love
it so we captured with BTW so sort of

409
00:41:05,350 --> 00:41:10,990
the methodology that i use to capture
these was I had to look at all the CW

410
00:41:10,990 --> 00:41:14,919
providers are available i located one
that looks like it might be interesting

411
00:41:14,920 --> 00:41:18,280
to me and I looked at the keywords in a
provider so this is like additional

412
00:41:18,280 --> 00:41:22,630
filtering that you can do provider i
started training session without

413
00:41:22,630 --> 00:41:29,500
provider i run malicious actions so I go
load something in memory using.net and

414
00:41:29,500 --> 00:41:33,850
it and then I stopped the trays analyze
results and if there are interesting

415
00:41:33,850 --> 00:41:36,220
events that are populated then you know

416
00:41:36,220 --> 00:41:41,799
thumbs up we we have a really good BTW
provider that we can use for is a

417
00:41:41,800 --> 00:41:45,310
response and then you repeat the whole
process again as you're wanting to

418
00:41:45,310 --> 00:41:54,130
discover more and more of these etw
providers so any interest of time we

419
00:41:54,130 --> 00:41:58,810
don't have much of what we are going
into launch so we're just going to go

420
00:41:58,810 --> 00:42:00,970
into work it out here

421
00:42:00,970 --> 00:42:05,618
what what what you do to query all the
providers is called this Walkman where

422
00:42:05,619 --> 00:42:09,940
providers cool thing that you can do is
you can specify a kid

423
00:42:09,940 --> 00:42:14,740
so this pit was for a powershell process
and enlisted out all of the providers

424
00:42:14,740 --> 00:42:20,709
that a consumer could tap into force a
powerful process or really any like

425
00:42:20,710 --> 00:42:24,730
opportunity on that process so i did
that and i discovered this . that common

426
00:42:24,730 --> 00:42:31,960
language runtime provider and i use log
man to start a trace using this provider

427
00:42:31,960 --> 00:42:36,819
and there's a loader keyword so here's
where i'm doing some filtering just the

428
00:42:36,819 --> 00:42:42,069
load event so anytime and assemble your
modules loaded whether it's on disk or

429
00:42:42,069 --> 00:42:47,020
in memory i'll be able to capture that
so then I go run by malicious action or

430
00:42:47,020 --> 00:42:51,550
wait for an actual attacker to do that I
stop my trace and then I can use a tool

431
00:42:51,550 --> 00:42:57,790
i get one event to parse out in this
case the the etl and I saved to disk to

432
00:42:57,790 --> 00:43:02,589
look for those in memory loads so this
is the on biscuits example I can do this

433
00:43:02,589 --> 00:43:07,270
in memory as well I don't have time for
that demo but there's a great library

434
00:43:07,270 --> 00:43:11,920
elbowed out there call trace event which
allows you to capture BTW events in

435
00:43:11,920 --> 00:43:16,810
real-time using this great . netlibrary
so I wrote some partial functionality

436
00:43:16,810 --> 00:43:22,390
around that so you can use PowerShell to
do all this analysis in real time so

437
00:43:22,390 --> 00:43:23,170
it's great

438
00:43:23,170 --> 00:43:26,980
um I'm so kind of learning as i go i
know there's like a small group within

439
00:43:26,980 --> 00:43:31,900
Microsoft who's using is pretty heavily
after the talk hit me up if anyone else

440
00:43:31,900 --> 00:43:35,829
is using this outside of Microsoft I'd
love to know and we can discuss like

441
00:43:35,829 --> 00:43:43,180
better ways to improve our methodology
for using ET w 2 i'm speeding through

442
00:43:43,180 --> 00:43:46,629
this the next days would be
investigation which is where you've

443
00:43:46,630 --> 00:43:50,680
collected all this data you've analyzed
you may have found outliers whatever now

444
00:43:50,680 --> 00:43:53,770
you need to determine context around
those outliers to determine whether they

445
00:43:53,770 --> 00:43:58,300
truly are malicious couple different
ways you do that is data pivoting so you

446
00:43:58,300 --> 00:44:01,270
can do three PowerShell remoting go
check you know what running processes

447
00:44:01,270 --> 00:44:05,800
are on that system persistence locations
network connections you can build the

448
00:44:05,800 --> 00:44:09,910
world context through some sort of
forensic investigation or you can do

449
00:44:09,910 --> 00:44:11,620
historical context through you know

450
00:44:11,620 --> 00:44:16,450
event large property losses so on so for
our forensics is how CSI cyber should

451
00:44:16,450 --> 00:44:21,580
actually look so our forensics is a
forensics tool kit that's written as a

452
00:44:21,580 --> 00:44:25,930
c-sharp dll or a binary powershell
module that allows the inspection of

453
00:44:25,930 --> 00:44:28,930
ntfs data structures ft us journalist
cetera

454
00:44:29,710 --> 00:44:32,710
it creates the event timeline based on
forensic art back so you can look more

455
00:44:32,710 --> 00:44:35,680
like file operations in the US and
journal you can look for program

456
00:44:35,680 --> 00:44:39,940
execution the prefetch you do user
activity and like the user registry hive

457
00:44:39,940 --> 00:44:44,830
so on so forth because powershell has
been open source time working on hfs+

458
00:44:44,830 --> 00:44:52,120
and XD poor support which are the two
main file systems for mac OS x and linux

459
00:44:52,120 --> 00:44:56,770
and then there's a public API that our
forensics exposes just like most unhappy

460
00:44:56,770 --> 00:45:02,290
LOL so one of the things that we want to
do is take take ideas from a bad guy and

461
00:45:02,290 --> 00:45:05,710
so powerful magics because it's a
c-sharp PLL is not something that you

462
00:45:05,710 --> 00:45:10,270
can remotely very easily unless you let
you have that dll on every system in the

463
00:45:10,270 --> 00:45:14,560
environment and so we build power
forensics portable which basically

464
00:45:14,560 --> 00:45:19,990
answers for those shortcomings so what
we do is we literally dynamically load a

465
00:45:19,990 --> 00:45:23,410
powerpoint 60 sharp assembly and in
memory which is very similar to what

466
00:45:23,410 --> 00:45:27,190
Matt just talked about detecting with
the GW and so this is that's what this

467
00:45:27,190 --> 00:45:32,020
code code snippet is here using that
assembly static load method and then we

468
00:45:32,020 --> 00:45:36,310
are able to call our forensics public
API which is exposed by that load module

469
00:45:36,310 --> 00:45:41,410
and so in this case we're calling the
file record class inside of power

470
00:45:41,410 --> 00:45:46,839
princess to enumerate the mft so you can
parse the empty that with we had a demo

471
00:45:46,840 --> 00:45:51,640
but I think we're short on time so we
have the Vice guard section cover

472
00:45:52,990 --> 00:45:56,950
okay so who's aware the phone matte
surface challenge

473
00:45:56,950 --> 00:46:00,879
does anyone have a binary that they want
me to run on my surface right now

474
00:46:01,800 --> 00:46:13,650
anyone fun that you got something you
wanna be a double but going to come up

475
00:46:15,360 --> 00:46:20,850
ok I was not it's not easy

476
00:46:21,870 --> 00:46:33,750
did you think that you have a budget
devices are bypass oh ok alright cool

477
00:46:33,750 --> 00:46:39,030
well I mean yeah we can certainly meet
up afterwards and discuss i'll

478
00:46:39,030 --> 00:46:41,040
definitely curious to know what you got

479
00:46:41,040 --> 00:46:45,660
so as we've been giving this talk I've
been running device card on my surface

480
00:46:45,660 --> 00:46:52,470
in a what I consider to be very lockdown
state so the Vice guard I've been

481
00:46:52,470 --> 00:46:57,480
playing with this a lot it's great it's
it has it definitely has an initial

482
00:46:57,480 --> 00:47:01,470
learning curve that you need to get over
but once you've done it enough times

483
00:47:01,470 --> 00:47:04,560
you've got into the routine it's not
really that bad

484
00:47:04,560 --> 00:47:08,400
it takes the initial investment to do
the initial configuration then once ever

485
00:47:08,400 --> 00:47:11,490
once you have everything in place then
you're good to go

486
00:47:11,490 --> 00:47:16,080
the only downside is like if you have a
really super lockdown configuration and

487
00:47:16,080 --> 00:47:21,299
you need to install new software that
isn't signed by certificates that are

488
00:47:21,300 --> 00:47:26,610
white listed in your policy then it can
be a challenge but there's definitely

489
00:47:26,610 --> 00:47:31,080
like the methodology to work around that
and task configure and redeploying new

490
00:47:31,080 --> 00:47:37,860
policies so the Vice card is Microsoft's
latest whitelisting solution so a lot of

491
00:47:37,860 --> 00:47:43,080
people here probably know that a blocker
in software restriction policies

492
00:47:43,080 --> 00:47:48,660
definitely not that great like there's a
ton of bypasses around them like it was

493
00:47:48,660 --> 00:47:52,290
certainly a great effort but this is
Microsoft's attempt to take it to the

494
00:47:52,290 --> 00:47:57,330
next level and in addition to just
whitelisting using binary and scripts

495
00:47:57,330 --> 00:48:02,130
this also requires whitelisting
alternate more drivers available Server

496
00:48:02,130 --> 00:48:07,050
2016 and Windows 10 enterprising
education i wish it was on pro or even

497
00:48:07,050 --> 00:48:07,660
home

498
00:48:07,660 --> 00:48:12,160
not matter but it is what it is it's
consists of two primary components code

499
00:48:12,160 --> 00:48:16,720
integrity which consists of use my own
integrity and our local integrity and

500
00:48:16,720 --> 00:48:20,740
virtualization base security these are
some additional hardware based features

501
00:48:20,740 --> 00:48:26,589
that can provide some additional
medications against like kernel mode

502
00:48:26,589 --> 00:48:32,319
exploits or device card specific
bypasses so if you have the hardware

503
00:48:32,319 --> 00:48:37,900
that to support this my scarred is even
better and it's all configure will be a

504
00:48:37,900 --> 00:48:41,980
the Big C I powerful module basically
what you do is you would take like a

505
00:48:41,980 --> 00:48:48,099
gold system you would scan all binaries
or run all dividers that you want to

506
00:48:48,099 --> 00:48:53,020
execute in your day-to-day operations
and then build a policy based on what a

507
00:48:53,020 --> 00:48:59,440
normal user is going to use day-to-day
alright so the ice carvers a blocker app

508
00:48:59,440 --> 00:49:03,010
Locker was kind of bolted on feature uh
if you are an admin you can just disable

509
00:49:03,010 --> 00:49:03,670
it

510
00:49:03,670 --> 00:49:07,510
there are a bunch of protections in
device card if you enable them that

511
00:49:07,510 --> 00:49:14,980
attempt to protect against a rogue admin
and if if you don't believe me try to

512
00:49:14,980 --> 00:49:17,920
bypass those yourself and give talk on
it

513
00:49:17,920 --> 00:49:24,640
I blocker again provided no protections
on the policy is applied system-wide so

514
00:49:24,640 --> 00:49:29,020
one of the cool things actually about a
blocker is that you could apply rules

515
00:49:29,020 --> 00:49:36,250
based on user or group currently can't
do that not in awkward then device or

516
00:49:36,250 --> 00:49:40,990
sorry um I Walker also have more
granular control over modern apps so

517
00:49:40,990 --> 00:49:46,240
Apple after can be used to complement
the by start hopefully the features that

518
00:49:46,240 --> 00:49:49,839
device card lacks a top locker has will
eventually be incorporated over into the

519
00:49:49,839 --> 00:49:53,130
device guard vocals e

520
00:49:53,130 --> 00:49:59,609
how folks outta here

521
00:49:59,609 --> 00:50:04,380
unfortunately seem to have a video fries
here so we don't be audio for the best

522
00:50:04,380 --> 00:50:06,059
the video

523
00:50:06,059 --> 00:50:06,660
my apologies

