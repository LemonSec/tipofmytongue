1
00:00:00,000 --> 00:00:08,370
I testing 123 alright alright thanks
everybody for coming out to static x how

2
00:00:08,370 --> 00:00:12,870
and why my name is a hammock and spring
creek right over there

3
00:00:13,590 --> 00:00:17,340
I'm just kidding anyway Adam go ahead
and introduce yourself

4
00:00:17,940 --> 00:00:24,810
so I'm Adam I'm a fairly new developer
ff7 on metasploit generally i do more

5
00:00:24,810 --> 00:00:29,429
software engineering things than
security things but I like bringing

6
00:00:29,429 --> 00:00:33,329
software engineering into security
especially red team tools because the

7
00:00:33,329 --> 00:00:37,410
more reliable we can make those better
red teamers we can be which makes

8
00:00:37,410 --> 00:00:42,660
everybody safer eventually somehow i
also like early and functional

9
00:00:42,660 --> 00:00:48,989
programming that's just me though i've
also been a musician for pretty much all

10
00:00:48,989 --> 00:00:54,839
my life which is fun i just got done
playing a show in July and I've got

11
00:00:54,840 --> 00:00:59,070
another musical them playing right after
i get back so that's going to be a fun

12
00:00:59,070 --> 00:01:03,629
extension of hangover con alright

13
00:01:03,629 --> 00:01:08,580
hi everybody my name is Brooke I put a
few things at taking some some

14
00:01:08,580 --> 00:01:12,360
inspiration from the other the other
rapid7 Adams talk yesterday I heard

15
00:01:12,360 --> 00:01:16,680
about some things that I have done in
the past and one was I have been

16
00:01:16,680 --> 00:01:20,729
programming a lot of my life and start
the Commodore 16 and did all my brothers

17
00:01:20,729 --> 00:01:24,659
CS homework and all that kind of stuff i
was just that kind little brother I've

18
00:01:24,659 --> 00:01:28,530
been adapted 13 years I got kiddin was
almost in high school so it's really

19
00:01:28,530 --> 00:01:33,630
exciting and he's a he's a good hacker
as well we've actually had like lockdown

20
00:01:33,630 --> 00:01:36,539
competitions we're locked down the home
network net figure out how to bust out

21
00:01:36,540 --> 00:01:38,159
my kind of stuff so it's kind of fun

22
00:01:38,159 --> 00:01:41,939
I've been open bc developer for three
years and a mess what developer for two

23
00:01:41,939 --> 00:01:46,139
so it's kind of competition little
offensive defensive sort of paradigm

24
00:01:46,140 --> 00:01:50,250
there you can follow me on that must be
cooked on Twitter and talk a little bit

25
00:01:50,250 --> 00:01:55,860
about executable file formats you guys
may be excited about that or maybe not I

26
00:01:55,860 --> 00:01:58,619
don't know but we're gonna talk a little
bit about sort of the ABCs of the

27
00:01:58,619 --> 00:02:03,000
different file formats you'll find in
the wild or executed several computers

28
00:02:03,000 --> 00:02:07,590
when the oldest this still kind of used
today it's called a dot out i'm a

29
00:02:07,590 --> 00:02:11,670
straight out it was actually stood for a
simpler output actually used to think it

30
00:02:11,670 --> 00:02:13,769
meant like you know a doubt

31
00:02:13,770 --> 00:02:18,270
they'll see that out whatever but yeah
actually can Thompson used in 1968 and

32
00:02:18,270 --> 00:02:22,620
the header for is literally p7 machine
code so that you can just simply just

33
00:02:22,620 --> 00:02:26,640
jump into it so it wouldn't have much of
a structure that's reason why a lot of

34
00:02:26,640 --> 00:02:29,910
like my sister was like in your mid
nineties like all switch away from this

35
00:02:29,910 --> 00:02:36,510
but I'm hey this is what sort of form
the basis of original in xcode cs4 . com

36
00:02:36,510 --> 00:02:40,679
well I mean not calm but you get it
anyway this really started a scripting

37
00:02:40,680 --> 00:02:46,230
extension / dec mainframe operating
systems and eventually CPM copied it and

38
00:02:46,230 --> 00:02:49,890
eventually ms-dos copied it and again
it's just not really that much format

39
00:02:49,890 --> 00:02:52,739
but as much just hear some code jump
into it and have fun

40
00:02:52,740 --> 00:02:58,410
it's a little bit limited i think i'm
getting so big but hey it's a what

41
00:02:58,410 --> 00:03:03,630
worked in the early days quickly uh
things moved from calm to exe and you

42
00:03:03,630 --> 00:03:07,410
guys were much into a mess . or anything
like that or Windows 31 but you know you

43
00:03:07,410 --> 00:03:10,920
always have that sort of mixture those
about exe files I'm can basically

44
00:03:10,920 --> 00:03:13,170
encapsulate a lot of different things
i'm all the way from Moustakas

45
00:03:13,170 --> 00:03:17,369
executables to windows 10 everything
in-between actually used a lot of

46
00:03:17,370 --> 00:03:21,330
different operating systems vos for
instance used it under the covers in

47
00:03:21,330 --> 00:03:26,340
some areas these days usually find
portable executable cough binary system

48
00:03:26,340 --> 00:03:29,820
but you can find lots of other
interesting things I next see James for

49
00:03:29,820 --> 00:03:35,190
mock oh so Marco is what you signed and
basically everything from apple and they

50
00:03:35,190 --> 00:03:38,250
basically invented their own you know
basically their own ecosystem of linkers

51
00:03:38,250 --> 00:03:41,910
and libraries and cordon file formats
and all that stuff I want to kind of

52
00:03:41,910 --> 00:03:45,120
neat things about it is it's easy to
make a multi architecture binary so this

53
00:03:45,120 --> 00:03:50,220
is no this happens we'll go from
parecido x86 back to arm and you know

54
00:03:50,220 --> 00:03:54,840
where we're gonna go next maybe it's
going to be you know at s390 or

55
00:03:54,840 --> 00:03:56,490
something like that

56
00:03:56,490 --> 00:04:01,650
he is also for elf so it can screw up
our alphabetical testing but we'll be

57
00:04:01,650 --> 00:04:05,160
talking about today and basically how do
you hack off for both defensive and

58
00:04:05,160 --> 00:04:08,730
offensive purposes but it's basically
the standard for pretty much every other

59
00:04:08,730 --> 00:04:14,519
unix operating system other than no sex
these days we find in solaris hp-ux ax

60
00:04:14,520 --> 00:04:18,959
freebsd linux just pretty much
everything uses very much the same file

61
00:04:18,959 --> 00:04:23,220
format to store the race go ahead and
pick them

62
00:04:23,840 --> 00:04:29,780
and one of the reasons we have out for
the big reason we have health is because

63
00:04:29,780 --> 00:04:36,289
ada out was so inflexible for example
the linux implementation of it out every

64
00:04:36,290 --> 00:04:41,780
address was resolved at compile time and
so you had if you had more than like

65
00:04:41,780 --> 00:04:45,739
three libraries you have to figure out
where to juggle all that in your

66
00:04:45,740 --> 00:04:51,620
whatever 20 megabytes that you've had on
that linux box so we're gonna walk

67
00:04:51,620 --> 00:04:57,710
through exactly how the people who came
up with a well-designed it and sort of a

68
00:04:57,710 --> 00:05:02,359
little bit of why they did and then how
we can abuse it for making binaries that

69
00:05:02,360 --> 00:05:08,720
just you know work everywhere on routers
and funds up so this is going to be a

70
00:05:08,720 --> 00:05:10,520
little bit of the original anatomy

71
00:05:10,520 --> 00:05:15,710
um yeah that's great

72
00:05:15,710 --> 00:05:22,489
so there was a nice little flow diagram
here of how the compilation process

73
00:05:22,490 --> 00:05:23,419
works

74
00:05:23,419 --> 00:05:26,539
what you do is you got source code and
then the compiler is the first Passover

75
00:05:26,539 --> 00:05:30,530
and produces what's called an object
file that object file is actually an elf

76
00:05:30,530 --> 00:05:35,090
file it's not an executable or anything
else that's it's just intermediate input

77
00:05:35,090 --> 00:05:40,789
for the linker which will then read the
elf file and put out an actual file that

78
00:05:40,789 --> 00:05:47,120
you can run on your system or link in
the library or do whatever else you want

79
00:05:47,120 --> 00:05:52,940
to it and so the original goals of
health was that was flexible that was

80
00:05:52,940 --> 00:05:56,780
one of the big things that the original
developers wanted it to be so you've got

81
00:05:56,780 --> 00:06:00,440
two different views of looking at the
file you've got segments which are what

82
00:06:00,440 --> 00:06:03,260
the operating system cares about and
then you've got sections which are

83
00:06:03,260 --> 00:06:06,680
mostly just metadata or different ways
of breaking up what actually gets loaded

84
00:06:06,680 --> 00:06:13,340
into memory you can have arbitrary
sections and data like not all data has

85
00:06:13,340 --> 00:06:17,450
to be in a section and you can make up
your own random sections if you want

86
00:06:17,450 --> 00:06:23,240
whatever all the standard of doing will
still work with them and each binary

87
00:06:23,240 --> 00:06:26,419
says exactly what it will do

88
00:06:26,419 --> 00:06:32,240
yeah there's no real convention other
than here's the certain fields that are

89
00:06:32,240 --> 00:06:36,009
defined in the RFC and if you have them
will do the special thanks to

90
00:06:36,009 --> 00:06:42,699
and that allows it to be fairly
Universal it works on most every

91
00:06:42,699 --> 00:06:46,360
architecture or there's a version of
hell for most every architecture which

92
00:06:46,360 --> 00:06:49,419
is pretty nifty it's something that a
lot of performance you look at earlier

93
00:06:49,419 --> 00:06:57,549
can't do they're just specifically x86
or originally just originally just PDP

94
00:06:57,550 --> 00:07:01,270
seven because that's all people needed
but we've got operating systems now that

95
00:07:01,270 --> 00:07:05,948
run on lots of different ships we need a
file format that runs on lots of chips

96
00:07:05,949 --> 00:07:09,430
and this can do multiple Indians modes
which is also fun

97
00:07:10,149 --> 00:07:15,669
this had some diagrams which explains
sort of the structural differences of

98
00:07:15,669 --> 00:07:21,849
the different types of binaries so the
simplest binary that you can build is

99
00:07:21,849 --> 00:07:27,459
what's called a static binary it has
typically to load sections a code

100
00:07:27,459 --> 00:07:31,300
section and then a data section and
there's not a whole lot else in there

101
00:07:31,300 --> 00:07:35,919
besides code and data because it knows
everything at runtime or everything at

102
00:07:35,919 --> 00:07:41,109
compile-time so everything is statically
linked and place into memory it loads

103
00:07:41,110 --> 00:07:45,849
from a fixed address every time so
exporting those is super simple then

104
00:07:45,849 --> 00:07:50,139
there are dynamic libraries which are a
little bit more complicated they have to

105
00:07:50,139 --> 00:07:56,409
have a couple of different program
sections and a couple of different

106
00:07:56,409 --> 00:08:01,719
segments that static binaries don't need
it has to have an interpreter section so

107
00:08:01,719 --> 00:08:05,110
every time you run a dynamic binary
which is most of the binaries on a

108
00:08:05,110 --> 00:08:10,569
modern operating system it actually get
passed through another program before

109
00:08:10,569 --> 00:08:17,860
anything before it actually starts
running typically that's in / lips / LD

110
00:08:17,860 --> 00:08:24,879
. whatever and it's pretty interesting
that the back the operating system goes

111
00:08:24,879 --> 00:08:25,389
up

112
00:08:25,389 --> 00:08:28,870
ok I'll map this into memory and then
i'll jump into this completely different

113
00:08:28,870 --> 00:08:32,979
program that will eventually then bring
up the binary and then it'll do things

114
00:08:32,979 --> 00:08:37,000
like similar resolution so you'll need a
symbol table and all the other sorts of

115
00:08:37,000 --> 00:08:41,139
things and then shared libraries are
almost exactly like dynamic executables

116
00:08:41,139 --> 00:08:44,860
accept their simple table which has the
same name is actually structured

117
00:08:44,860 --> 00:08:49,149
differently which is always fun and it
doesn't have an interpreter section

118
00:08:49,149 --> 00:08:49,570
since

119
00:08:49,570 --> 00:08:52,570
it assumes anything that can find it
knows what to do

120
00:08:53,800 --> 00:09:00,969
so part of what enables else to do its
magic is position independent code which

121
00:09:00,970 --> 00:09:07,930
is the compiler flags chef pic and the
run time we linking so there while

122
00:09:07,930 --> 00:09:13,660
segments and sections are orthogonal and
. all sorts of different things you'll

123
00:09:13,660 --> 00:09:17,319
have both a dynamic section and the
dynamic segment that point to the same

124
00:09:17,320 --> 00:09:21,460
code and it's basically this section
table which doesn't get mapped into

125
00:09:21,460 --> 00:09:24,730
memory since it's not loading and the
operating system doesn't care about it

126
00:09:24,730 --> 00:09:31,480
but it contains part of that inside of
the dynamics section which then allows

127
00:09:31,480 --> 00:09:36,880
the interpreter to go through and figure
out what exactly it needs to do and it's

128
00:09:36,880 --> 00:09:46,390
got everything in there that you need
the type of dynamic object it is or like

129
00:09:46,390 --> 00:09:51,640
where the symbols are what address it
wants to be loaded at stuff like that

130
00:09:51,640 --> 00:09:59,170
and then there's a whole family of
procedure linking tables and global

131
00:09:59,170 --> 00:10:00,670
offset tables

132
00:10:00,670 --> 00:10:04,540
some of them are in read-only memory
saying how is compiled in the summer and

133
00:10:04,540 --> 00:10:10,780
rewrite memory which but is where it
gets updated at compile-time typically

134
00:10:10,780 --> 00:10:14,500
whenever an executable is run the
interpreter will say oh here's all these

135
00:10:14,500 --> 00:10:18,580
symbols that wants all right they're all
just going to point to me and then when

136
00:10:18,580 --> 00:10:23,530
they're actually used i'll go through
and resolve them and that's typically

137
00:10:23,530 --> 00:10:29,800
done for performance reasons but it can
lead to some interesting things during

138
00:10:29,800 --> 00:10:35,079
runtime to wear if you resolve all the
symbols upfront you would get a

139
00:10:35,080 --> 00:10:39,160
different code then when you resolve
them lazily which is always fun

140
00:10:41,630 --> 00:10:45,530
alright so I'm gonna talk a little bit
about ways that you can make a lot more

141
00:10:45,530 --> 00:10:50,630
secure than it is and just basically
some some mitigation techniques and ways

142
00:10:50,630 --> 00:10:55,880
that you can screw up those meditation
techniques i thankfully I didn't include

143
00:10:55,880 --> 00:11:00,439
images in this section so they actually
translated built the laptop so i

144
00:11:00,440 --> 00:11:04,820
basically one though the sort of
fundamental techniques that use these

145
00:11:04,820 --> 00:11:08,840
days and most operating systems is the
concept of address based organization

146
00:11:09,530 --> 00:11:13,490
what you basically do here is you want
to make sure that if an attacker

147
00:11:13,490 --> 00:11:18,710
basically find a flaw in the code in
order to exploit that law you have to

148
00:11:18,710 --> 00:11:23,120
basically usually jump into some known
offset within the code by randomizing

149
00:11:23,120 --> 00:11:25,340
the different addresses within the code

150
00:11:25,340 --> 00:11:28,130
I'm you're basically able to make it
less predictable and make it more

151
00:11:28,130 --> 00:11:33,590
difficult for an attacker to basically
create a predictable attack oftentimes

152
00:11:33,590 --> 00:11:36,620
attackers to do something like a heat
sprayer that's do some sort of

153
00:11:36,620 --> 00:11:39,710
information leak or some other way to
figure out what the offsets things are

154
00:11:39,710 --> 00:11:42,890
I'm this makes it just that much harder

155
00:11:42,890 --> 00:11:47,720
I'm many different operating systems
implement a SLR which you actually look

156
00:11:47,720 --> 00:11:52,850
at wikipedia cancel the ALS are
anatomically picture sorry but uh you

157
00:11:52,850 --> 00:11:57,830
know all the Beasties except for freebsd
infinite the next window solaris kind of

158
00:11:57,830 --> 00:12:01,610
surprising thing that previously doesn't
have it yet i think it said performance

159
00:12:01,610 --> 00:12:06,740
thing but even as as late as on December
last year they were still not sure if it

160
00:12:06,740 --> 00:12:10,910
was valuable for their operating system
not so convincing thing I'm one catch

161
00:12:10,910 --> 00:12:16,760
though is that traditionally on SLR only
works with dynamic executables so what's

162
00:12:16,760 --> 00:12:20,540
the dynamic executable vs static
executable also an example here so

163
00:12:20,540 --> 00:12:24,500
here's here's a simple program this
basically Prince where printf is and so

164
00:12:24,500 --> 00:12:27,950
what should show is basically the
address of the offset wherein lipsy

165
00:12:27,950 --> 00:12:33,050
printout is I'm basically going to run
some code on ubuntu the various later

166
00:12:33,050 --> 00:12:36,920
and 1604 the really stable version and
if you just start like a naive guy you

167
00:12:36,920 --> 00:12:39,290
go and i was going to GC built-in code

168
00:12:39,290 --> 00:12:43,579
what do you get you bake to get a
completely predictable binary by default

169
00:12:43,580 --> 00:12:50,360
every time this binary runs everything
that the same offset and basically if

170
00:12:50,360 --> 00:12:54,870
you had a vulnerability you're basically
you're writing a CTF challenge or

171
00:12:54,870 --> 00:13:01,500
or your coat code is going to be
problematic can feel myself in a couple

172
00:13:01,500 --> 00:13:04,830
ways we can build his position
independent we can also build it as a

173
00:13:04,830 --> 00:13:09,570
portable physician and executable or
there's also a position independent code

174
00:13:09,570 --> 00:13:12,810
flag and whether you're building a
library or your building full of stolen

175
00:13:12,810 --> 00:13:18,630
binary something that position
independent code solves is both the

176
00:13:18,630 --> 00:13:22,439
ability to relocate code for security
point of view but also there are certain

177
00:13:22,440 --> 00:13:26,160
systems in this is actually dates back
way back to like the sixties and

178
00:13:26,160 --> 00:13:29,579
seventies back when I'm would have
multi-user systems that didn't have a

179
00:13:29,580 --> 00:13:32,670
name you there was actually a memory
protection so when you want to actually

180
00:13:32,670 --> 00:13:35,729
load multiple piece of code at same time
get your load them into physicals

181
00:13:35,730 --> 00:13:40,260
separate offsets so that you didn't have
complex between different pieces of code

182
00:13:40,260 --> 00:13:45,000
so it's kind of funny that a mal sorry
it's actually been around for a lot

183
00:13:45,000 --> 00:13:49,380
longer than people are using it for
security point of view so anyways yeah

184
00:13:49,380 --> 00:13:52,740
super easy like for instance in besiege
that's at the position independent code

185
00:13:52,740 --> 00:13:57,240
black and suddenly you've got some
lovely code that no it's not exactly

186
00:13:57,240 --> 00:14:00,750
completely random you can see there's a
lot of least one likes a linux there's a

187
00:14:00,750 --> 00:14:03,270
lot of bits that are the same each time
but you know it is shuffled around a

188
00:14:03,270 --> 00:14:07,470
little bit but then say your uh I don't
know commercial developer you want to

189
00:14:07,470 --> 00:14:10,680
build some sort of code that doesn't
depend on like all your system libraries

190
00:14:10,680 --> 00:14:13,229
and it keeps along with you so you can
basically do with the building

191
00:14:13,230 --> 00:14:17,070
executables is put static login but it
basically does is it pulls in all the

192
00:14:17,070 --> 00:14:20,880
dependent libraries and links in as well
right into the executable so you don't

193
00:14:20,880 --> 00:14:24,660
rely on external dependency you soon as
you do that suddenly your code is static

194
00:14:24,660 --> 00:14:28,709
again and it doesn't do any kind of
randomization so that's not good

195
00:14:28,709 --> 00:14:32,939
and if you can just imagine that I
switch slides that there's a picture of

196
00:14:32,940 --> 00:14:38,940
like a boat capsizing that's what should
be happening so C so we're going to talk

197
00:14:38,940 --> 00:14:44,640
a little bit about how you can sort of
build binaries that are basically geared

198
00:14:44,640 --> 00:14:49,709
towards offensive use yeah they're there
are a couple different kinds of binaries

199
00:14:49,709 --> 00:14:53,699
of the most common one that's talked
about his show code because that's what

200
00:14:53,700 --> 00:14:57,570
everyone has to write or rip out of
exploit which is fine but we write it

201
00:14:57,570 --> 00:15:03,180
for but there's a lot of constrains when
building shell code for it has to be an

202
00:15:03,180 --> 00:15:04,989
assembly and then

203
00:15:04,990 --> 00:15:10,209
you don't always know where you're gonna
be injected especially with recent

204
00:15:10,209 --> 00:15:15,069
memory corruption exploits you like a in
dec state right demo yesterday

205
00:15:15,070 --> 00:15:20,080
you just don't know exactly where you're
going to be and so everything has to be

206
00:15:20,080 --> 00:15:24,130
relative to what you do know which is
where you are right now

207
00:15:24,730 --> 00:15:28,750
well you're running so everything has to
be relative to the program counter on

208
00:15:28,750 --> 00:15:35,890
are more to the instruction pointer on
x86 or to read return of like in map or

209
00:15:35,890 --> 00:15:40,089
something to wherever you map in or
allocate memory it's very time-consuming

210
00:15:40,089 --> 00:15:43,839
to write not just because it's in the
assembly but because you can't use a lot

211
00:15:43,839 --> 00:15:48,730
of nice helpful tools you have to
structure your loads yourself or how you

212
00:15:48,730 --> 00:15:54,399
manage the stag or if the stack is even
right but it's the end result is

213
00:15:54,399 --> 00:16:01,240
something that's fairly robust which is
nice but certainly couldn't write all of

214
00:16:01,240 --> 00:16:08,290
post exploitation in assembly shellcode
that's just not maintainable and so

215
00:16:08,290 --> 00:16:11,529
there's the next step of thing is you
can build a static position dependent

216
00:16:11,529 --> 00:16:16,300
executable which means it doesn't need
to txt file system which is good because

217
00:16:16,300 --> 00:16:19,810
you don't know what type of box you're
compromising unless it's some sort of

218
00:16:19,810 --> 00:16:24,849
appliance that never gets updated which
if only that were all of them but sadly

219
00:16:24,850 --> 00:16:29,800
not and they're pretty easy to build you
just passed the static flag and it built

220
00:16:29,800 --> 00:16:33,130
up builds in everything and then as long
as you run it on sort of the same

221
00:16:33,130 --> 00:16:38,290
operating system it works more often
than not but it does require specific

222
00:16:38,290 --> 00:16:48,370
memory address which means if these
people had some sort of memory a sniffer

223
00:16:48,370 --> 00:16:53,680
agent in place whenever that address got
loaded if you had to choose an uncommon

224
00:16:53,680 --> 00:16:58,660
what an uncommon one then they would
know that they were compromised then it

225
00:16:58,660 --> 00:17:03,370
would be way too easy for them or maybe
if you choose a random one and then

226
00:17:03,370 --> 00:17:09,550
recompile it each time before loading it
then you would have to just trust that

227
00:17:09,550 --> 00:17:13,809
you could clobber that memory even if it
held something important like you know

228
00:17:13,809 --> 00:17:16,819
their heat that time especially on

229
00:17:16,819 --> 00:17:21,470
next if you're compromising process that
has address space randomization then you

230
00:17:21,470 --> 00:17:23,870
don't know what you're going to be
clobbering might have been useful

231
00:17:23,869 --> 00:17:31,489
oh well so if you could build a self
relocating static executive level then

232
00:17:31,490 --> 00:17:38,269
you wouldn't need to depend on the
memory and on the memory layout and you

233
00:17:38,269 --> 00:17:45,470
could use normalcy code which is
difficult to write but a lot easier than

234
00:17:45,470 --> 00:17:51,980
assembly code that you have to hand golf
and so it would also simplify the show

235
00:17:51,980 --> 00:17:56,539
could you do have to write because you
don't have to worry about what you do if

236
00:17:56,539 --> 00:18:02,299
the memories already taken or if it's
taken by multiple non-consecutive non or

237
00:18:02,299 --> 00:18:06,769
two different maps are over the same
block that you want to allocate so if we

238
00:18:06,769 --> 00:18:09,440
could build one of those that would be
really nice

239
00:18:09,440 --> 00:18:17,659
turns out we can open bsd 5.7 turned on
by default so on open vsd your binaries

240
00:18:17,659 --> 00:18:24,889
are independent our position independent
and they don't load any other files once

241
00:18:24,889 --> 00:18:29,840
you start them and richard welker of
muscle lipsy has been working on this

242
00:18:29,840 --> 00:18:34,699
since 2012 mostly for invented stuff
because on embedded systems you don't

243
00:18:34,700 --> 00:18:37,970
have an interview so you have to
relocate every time you run the same if

244
00:18:37,970 --> 00:18:42,230
you want to run more than one copy of
the same code and getting sinking

245
00:18:42,230 --> 00:18:45,980
dependencies between embedded boards is
a giant pain in the butt

246
00:18:49,159 --> 00:18:52,190
so I'm gonna have a little bit about
some some prior things that we've done

247
00:18:52,190 --> 00:18:56,629
the metasploit that both we and and
other people who were committed in the

248
00:18:56,629 --> 00:19:00,469
past that basically kind of laid the
groundwork for we're going to be

249
00:19:00,470 --> 00:19:04,700
presenting here today I want a little
bit about reflective DLL jet injection

250
00:19:04,700 --> 00:19:08,600
and windows meterpreter sure you guys
know all about this who here is actually

251
00:19:08,600 --> 00:19:12,500
heard of reflected DLL injection anybody

252
00:19:12,500 --> 00:19:16,279
alright so someone bore you with a long
things I just felt like a tldr you know

253
00:19:16,279 --> 00:19:19,940
you can go to the github page read
Stephen viewers paper you can watch the

254
00:19:19,940 --> 00:19:23,779
videos on that basic idea here is that
you have a little loader that basically

255
00:19:23,779 --> 00:19:28,930
bootstraps itself is basically able to
alcohol the memory that some position

256
00:19:28,930 --> 00:19:33,310
and some portable executable code we go
into it does all the simple resolution

257
00:19:33,310 --> 00:19:38,020
with kernel32 it links everything
together and jumped into it so it's kind

258
00:19:38,020 --> 00:19:42,790
of a neat little process so it's
basically a miniature c-code loader that

259
00:19:42,790 --> 00:19:48,159
you inject into a running process very
clever code and we've used it to great

260
00:19:48,160 --> 00:19:50,950
success of the years and a lot of
projects that take advantages as well

261
00:19:50,950 --> 00:19:57,580
something else that we've done that we
have something called linux+ interpreter

262
00:19:57,580 --> 00:20:02,649
we often call deposits but typically
it's targeted just for linux x86 32 bit

263
00:20:02,650 --> 00:20:06,070
Phillips Anderson did the sort of
foundational work there what he

264
00:20:06,070 --> 00:20:09,820
basically did was he managed to support
the windows meterpreter into linux

265
00:20:09,820 --> 00:20:14,590
through a lot of it kind of amazing
accident and I changes to the code but

266
00:20:14,590 --> 00:20:19,330
I'm the basics of it is basically
invented entire copy of the android an

267
00:20:19,330 --> 00:20:26,290
eclipse ii and a custom linker that is
able to basically in bed all the shared

268
00:20:26,290 --> 00:20:30,280
libraries you need a zip archives into
the into the running binary it on

269
00:20:30,280 --> 00:20:33,430
gypsies and then in walks through all
the symbols over and over again until

270
00:20:33,430 --> 00:20:37,630
they're all results basically does sort
of recursive resolver until everything's

271
00:20:37,630 --> 00:20:41,560
linked together and then jumps into it
so it's pretty amazing work you turn the

272
00:20:41,560 --> 00:20:44,860
debug flag and and positive according to
watch this stuff

273
00:20:44,860 --> 00:20:49,300
bye-bye on your console and it's pretty
fun to see one of the sort of the

274
00:20:49,300 --> 00:20:52,180
limitations of this is well shared
libraries are position independent the

275
00:20:52,180 --> 00:20:56,860
base are executable is not that actually
causes some problems when you try to use

276
00:20:56,860 --> 00:21:01,060
positive interpreter or linux
interpreter for doing actual sex

277
00:21:01,060 --> 00:21:05,740
exploitation is because you can actually
overlap with with with coaches that are

278
00:21:05,740 --> 00:21:10,210
already in use by your process there's
also it's very hard to actually embed

279
00:21:10,210 --> 00:21:13,540
new libraries because you don't use a
normal thing for us to zip everything up

280
00:21:13,540 --> 00:21:18,010
and sort of do some special packing in
order to get things built-in there's

281
00:21:18,010 --> 00:21:21,820
actually a little script that converts
like the zip files into Lexi code is

282
00:21:21,820 --> 00:21:27,220
compiled and so it's a little bit little
bit hard to extend and requires a lot of

283
00:21:27,220 --> 00:21:30,230
sort of custom hacking

284
00:21:30,230 --> 00:21:33,980
but that's basically how linux
interpreter works we're here to talk a

285
00:21:33,980 --> 00:21:37,429
little bit about serving a new project
we've been working on for the past few

286
00:21:37,429 --> 00:21:40,220
months and you won't go away

287
00:21:40,220 --> 00:21:44,360
yeah yeah so the new project we've been
working on is called metal is designed

288
00:21:44,360 --> 00:21:52,250
to be a stronger more robust form of
interpreter which will allow us to use a

289
00:21:52,250 --> 00:21:56,750
lot of the same postcode we have or what
little of that we have for linux but it

290
00:21:56,750 --> 00:22:00,770
allows also to use metasploit which
saves us a lot of time having to write

291
00:22:00,770 --> 00:22:06,080
that over again so we took a slightly
different approach to building metal and

292
00:22:06,080 --> 00:22:10,490
that it was completely different how we
use out of three dependencies for most

293
00:22:10,490 --> 00:22:14,570
things that we can so common libraries
that you find in most sane see projects

294
00:22:14,570 --> 00:22:23,178
like pearl and denied and livy and embed
TLS which is a fun little TLS library

295
00:22:23,179 --> 00:22:30,860
from the arm embedded group but if we're
going to use off-the-shelf out of tree

296
00:22:30,860 --> 00:22:37,939
dependencies like this we can't i be
building our payload with sort of the

297
00:22:37,940 --> 00:22:47,150
Byzantine ah boo 1404 only half working
dr. image that we build current a linux

298
00:22:47,150 --> 00:22:55,370
interpreter with and even once we do
that we're going to have to generate a

299
00:22:55,370 --> 00:22:59,389
process image that we can stick into a
running executable if we want to use

300
00:22:59,390 --> 00:23:05,299
this for memory corruption attacks so we
just sort of have to do whatever the

301
00:23:05,299 --> 00:23:10,610
colonel does whenever it does it's magic
tool of the executables which is lots of

302
00:23:10,610 --> 00:23:11,479
magic

303
00:23:11,480 --> 00:23:18,710
luckily some of its documented the 65
release for ABI code which tells you

304
00:23:18,710 --> 00:23:27,350
exactly how you should set up the stack
and which wow all that you need to do to

305
00:23:27,350 --> 00:23:32,299
make binaries happy and run themselves
and we had a nice little picture of that

306
00:23:32,299 --> 00:23:40,879
coming up but it won't be there so at
this point the the shellcode all it has

307
00:23:40,880 --> 00:23:43,549
to do is it has to do the connect back

308
00:23:43,549 --> 00:23:47,539
or divine and it reads the processed
image off the wire into some memory

309
00:23:47,539 --> 00:23:53,419
somewhere whatever then it has to push
the magic values onto the stack and then

310
00:23:53,419 --> 00:23:56,419
jump to it and then it should be done

311
00:23:57,049 --> 00:24:03,980
maybe who knows it it works most of the
time now so i'll talk about the stack

312
00:24:03,980 --> 00:24:07,369
layout and you'll just have to use your
imagination sorry about that

313
00:24:07,369 --> 00:24:14,238
so the stack looks a lot like it looks
like it would look like from C so you've

314
00:24:14,239 --> 00:24:18,590
got the first value is arc see which is
the number of command-line arguments you

315
00:24:18,590 --> 00:24:22,759
have alright that's fine and then you've
got your RV pointer array

316
00:24:22,759 --> 00:24:28,909
ok so that's fine and then you have some
special note values and after that comes

317
00:24:28,909 --> 00:24:31,730
all the magic that lipsy normally hide
from you

318
00:24:31,730 --> 00:24:37,519
uh after that you've got what's called
the Ox be vector of pointers which

319
00:24:37,519 --> 00:24:45,559
points which contains strings pointers
other magic to various process metadata

320
00:24:45,559 --> 00:24:51,139
that the colonel knows whenever it loads
the process and that lipsy needs to know

321
00:24:51,139 --> 00:24:56,539
some of like whatever the rng seed is
going to be or whether you're running as

322
00:24:56,539 --> 00:25:03,950
an elevated user or you know what your
load address was and then that's full of

323
00:25:03,950 --> 00:25:07,730
idols and then that's followed by
another array of pointers for your

324
00:25:07,730 --> 00:25:13,220
environment which is a also needs to
contain some magic sometimes at least

325
00:25:13,220 --> 00:25:19,489
luckily we were able to modify how we
were building to not rely on environment

326
00:25:19,489 --> 00:25:23,960
variables so it's just a couple of extra
knowles stacked on the end but getting

327
00:25:23,960 --> 00:25:28,369
the order right and importantly getting
the Indian this right of a lot of those

328
00:25:28,369 --> 00:25:34,908
required lots of time staring at gb
memory dumps and then we get to the part

329
00:25:34,909 --> 00:25:40,999
of how we can make generic code position
independent and contain all the stuff

330
00:25:40,999 --> 00:25:46,460
that needs so in order to do this we
have to abuse some liquor flags we have

331
00:25:46,460 --> 00:25:50,389
to pass some flags that look like they
might be contradictory like we post that

332
00:25:50,389 --> 00:25:55,519
has both the shared library and the
static linking flag and we have to tell

333
00:25:55,519 --> 00:25:57,370
it to generate special relocations

334
00:25:57,370 --> 00:26:04,389
with dash be symbolic and so shared we
need to generate a dynamic section that

335
00:26:04,390 --> 00:26:09,190
says we actually have symbols that we
need to use which your normal dynamic

336
00:26:09,190 --> 00:26:13,360
executive doesn't so we have to pass
that and then we need to make sure that

337
00:26:13,360 --> 00:26:18,669
it doesn't you know try to shell out to
the system blinker to reload it because

338
00:26:18,670 --> 00:26:22,300
at that point you'll be touching the
skin it's probably under a different

339
00:26:22,300 --> 00:26:26,950
name under different distros or on
Android in a completely different

340
00:26:26,950 --> 00:26:33,400
location that ignores the filesystem
hierarchy so need to get rid of that and

341
00:26:33,400 --> 00:26:38,800
we need to pull in all the symbols and
once we can generate the special uh

342
00:26:38,800 --> 00:26:44,710
relocations that allow you to relocate
your own process we finally include a

343
00:26:44,710 --> 00:26:53,559
little bit of magic that lipsy I keeps
for itself so selfishly and then we can

344
00:26:53,559 --> 00:26:59,500
build arbitrary c code to be injected
into arbitrary memory locations which is

345
00:26:59,500 --> 00:27:05,140
pretty fun and on top of all of that we
need to make this work not just for x86

346
00:27:05,140 --> 00:27:12,670
but for all the architectures that run
linux or at least the fun ones so we

347
00:27:12,670 --> 00:27:19,120
have to cross compile everything which
luckily we've got a lot of help from the

348
00:27:19,120 --> 00:27:24,669
embedded community and since they need
to cross-compile for everything and so

349
00:27:24,670 --> 00:27:29,080
we were able to cobble together some
scripts most of them are community now

350
00:27:29,080 --> 00:27:37,330
scripts that allow us to build
statically linked to chains for most any

351
00:27:37,330 --> 00:27:43,210
linux processor so mips big-endian and
then there's a mixed little-endian

352
00:27:43,210 --> 00:27:48,820
processor it's also fun and then there's
our little indian and arm big-endian now

353
00:27:48,820 --> 00:27:55,809
and the different powerpc in power is a
architectures so having a robust g

354
00:27:55,809 --> 00:27:59,770
support for that has been nice instead
of being able only being able to use the

355
00:27:59,770 --> 00:28:05,710
one GC that came into 1404 with a
slightly broken linker and we also have

356
00:28:05,710 --> 00:28:09,570
to use the Indians conversion functions
a lot because you

357
00:28:09,570 --> 00:28:15,060
don't know what Indians you were running
at which produced many subtle bugs and

358
00:28:15,060 --> 00:28:21,870
many blaring bugs that were very subtle
find and then when you're debugging

359
00:28:21,870 --> 00:28:28,110
embedded code it becomes very difficult
to debug on the devices that are running

360
00:28:28,110 --> 00:28:34,560
on or else it becomes difficult to set
up a full emulator so kim you doesn't

361
00:28:34,560 --> 00:28:38,790
have man pages for the user mode process
which is nice for running all these

362
00:28:38,790 --> 00:28:44,490
obscure architectures but the not but
can you user mode isn't documented in

363
00:28:44,490 --> 00:28:52,230
its main pages which means it's slightly
difficult to find andis ways like how

364
00:28:52,230 --> 00:28:56,790
you can get it to do is trace output
which is incredibly useful

365
00:28:56,790 --> 00:29:01,530
did you die before the read or after the
read with normal commute you don't know

366
00:29:01,530 --> 00:29:05,580
unless you spend an hour looking at the
core dump with estrace you can tell at

367
00:29:05,580 --> 00:29:10,470
least what you thought you were doing
which is fun and also supports a GDB

368
00:29:10,470 --> 00:29:16,740
server which is really nice for hooking
it up to retiree to mostly not GDB GDB

369
00:29:16,740 --> 00:29:25,320
server mode that's that's not fun and we
can also compile our binary for native

370
00:29:25,320 --> 00:29:32,159
targets including we've got it running
on OS X and pretty soon freebsd and

371
00:29:32,160 --> 00:29:37,290
native linux so that you compile it you
can skip all the compiler magic just to

372
00:29:37,290 --> 00:29:43,170
get a normal binary for using it with
normal debug tools which is also

373
00:29:43,170 --> 00:29:45,840
incredibly helpful

374
00:29:45,840 --> 00:29:54,449
alright so basically we created here is
a very compact very fast compact rat

375
00:29:54,450 --> 00:30:00,330
Morris framework it right now talks
interpreter but we're actually working

376
00:30:00,330 --> 00:30:05,129
on giving it some other ways to talkback
other kinds of c2 channels we basically

377
00:30:05,130 --> 00:30:09,360
extracted everything over out enough
that we can add other kinds of

378
00:30:09,360 --> 00:30:12,990
integrations into the payload itself
without necessarily being tied to

379
00:30:12,990 --> 00:30:18,360
meterpreter protocol that's kind of our
one of our long-term plans it uses less

380
00:30:18,360 --> 00:30:22,560
than 500 Abraham that's having loaded
all the miners anything of that that and

381
00:30:22,560 --> 00:30:27,179
in-memory I one reason why somewhat
smaller than say like and the existing

382
00:30:27,180 --> 00:30:30,720
positive interpreter other interpreters
because one is that the TMNT less

383
00:30:30,720 --> 00:30:34,740
library is a lot smaller than openssl so
we use on all of the other interpreters

384
00:30:34,740 --> 00:30:38,970
another reason is because we were able
to stack link every function we only

385
00:30:38,970 --> 00:30:44,460
take along with us the exact pumps we
use so the the linker smart updating

386
00:30:44,460 --> 00:30:47,940
strip out all of the other symbols out
of the the libraries that there are in

387
00:30:47,940 --> 00:30:52,920
use which that makes a lot more compact
this is really important we have some

388
00:30:52,920 --> 00:30:58,260
experts at target routers like 16
megabytes around so being able to live

389
00:30:58,260 --> 00:31:01,950
comfortably without really affecting the
performance or the stability of a small

390
00:31:01,950 --> 00:31:07,860
embedded device is him was one of our
design goals like I said it works on a

391
00:31:07,860 --> 00:31:11,280
second legs i'm also works on Android
and you know that states rights like

392
00:31:11,280 --> 00:31:15,600
this last week our yesterday what was
one of the things that was one of the

393
00:31:15,600 --> 00:31:19,740
first things you use it on one reason
was important to have a binary

394
00:31:19,740 --> 00:31:25,110
interpreters opposed to a like a job
interview that we have today for android

395
00:31:25,110 --> 00:31:30,389
is you weren't able to do things like
exok do too

396
00:31:30,390 --> 00:31:35,040
selinux restrictions so with this with
this interpreter will search tune down

397
00:31:35,040 --> 00:31:38,159
and reduce the footprint as far as like
what system called calls

398
00:31:38,760 --> 00:31:45,990
what sort of things it doesn't only get
caught by mitigations and source to work

399
00:31:45,990 --> 00:31:50,010
things that were working on right now
courses freebsd openbsd insel air

400
00:31:50,010 --> 00:31:55,260
support we actually almost have working
on windows as well which because it's a

401
00:31:55,260 --> 00:31:59,879
basic portable c code you can build
within GW and it'll produce an ultimate

402
00:31:59,880 --> 00:32:02,610
binary that can speak meterpreter
protocol but nothing in the world has

403
00:32:02,610 --> 00:32:07,260
seen yet so it's kind of an interesting
project there we could even use

404
00:32:07,260 --> 00:32:12,120
reflective DLL injection so this is kind
of neat about this the toolchain that we

405
00:32:12,120 --> 00:32:17,429
built and we built it for OSX and Linux
is exactly built in arbitrary binary so

406
00:32:17,430 --> 00:32:21,900
you can build a Python they can be
injected or you can build a ruby they

407
00:32:21,900 --> 00:32:25,410
can be detected or rape or anything you
want as long as you can bundle in all

408
00:32:25,410 --> 00:32:27,059
the shared libraries as

409
00:32:27,059 --> 00:32:31,019
part of the binary someone was joking
about doing that . net integration so we

410
00:32:31,019 --> 00:32:35,909
could actually run powershell on linux
within within this interpreter so that

411
00:32:35,909 --> 00:32:39,509
might be kind of fun to do in the future
and also looking at is that you know

412
00:32:39,509 --> 00:32:42,269
makes it allows me to be sort of
football for the payloads like i said if

413
00:32:42,269 --> 00:32:45,659
you can build Python you can inject
python scripts well after having a

414
00:32:45,659 --> 00:32:49,230
Python installed on the linux box or
having like you know sometimes people

415
00:32:49,230 --> 00:32:53,190
like after install and add things to the
system you can do without doing change

416
00:32:53,190 --> 00:32:59,039
the system which is kind of a kind of a
cool thing and typically like IOT

417
00:32:59,039 --> 00:33:02,100
devices that knows we're paying
attention you can throw things in our

418
00:33:02,100 --> 00:33:05,428
temple you want and it's really nothing
c4 sort of hoping that maybe people

419
00:33:05,429 --> 00:33:10,259
start noticing and you know we'll have
some more interesting litigation against

420
00:33:10,259 --> 00:33:12,299
us

421
00:33:12,299 --> 00:33:16,559
that's pretty much it today we actually
have like I said cross to change for OSX

422
00:33:16,559 --> 00:33:20,580
and Linux so basically you can target
linux from all the sex when our build

423
00:33:20,580 --> 00:33:25,168
system united airlines box abilities
these payloads we've got pallets working

424
00:33:25,169 --> 00:33:31,470
for armed little and big Indian mix
beginning Lillian we need stager so no

425
00:33:31,470 --> 00:33:34,980
one's reading powerpc stage yet so we
could do powerpc I've run it on one side

426
00:33:34,980 --> 00:33:39,269
of our privacy running printers before
so we've gotten shells and printers and

427
00:33:39,269 --> 00:33:43,139
injected this payload via the firmware
update process narrow highland get some

428
00:33:43,139 --> 00:33:47,490
of the work and let me focus on those
printers so so yeah there's a whole lot

429
00:33:47,490 --> 00:33:54,090
of potential here for interesting things
so i hope everyone a lot will be

430
00:33:54,090 --> 00:33:58,949
interested in check it out if you didn't
put the actual URL where you can

431
00:33:58,950 --> 00:34:03,840
download it from but I basically go to
rapid 7.com / metal and get up and

432
00:34:03,840 --> 00:34:05,459
that's we can actually download it

433
00:34:05,460 --> 00:34:10,530
that's it so we have a demo and we've
got some some interesting devices that

434
00:34:10,530 --> 00:34:17,609
we can make it run on we have this is
android monkey so he mark stanislav did

435
00:34:17,609 --> 00:34:21,119
some research and found that basically
this guy has a complete rout turned on

436
00:34:21,119 --> 00:34:24,990
by default it does not indicate or
anything you just basically plug it in

437
00:34:24,989 --> 00:34:29,310
and trust any device and and you can
basically a shell on this monkey and we

438
00:34:29,310 --> 00:34:30,599
can interpret on him

439
00:34:30,599 --> 00:34:33,410
we've also got to have it

440
00:34:33,409 --> 00:34:38,359
yeah i got a land turtle as well and a
linksys router which we can inject

441
00:34:38,360 --> 00:34:44,480
sheltered into as well that's got 16
megabytes of ram and red peppers well I

442
00:34:44,480 --> 00:34:48,139
thought maybe we could just go to answer
some questions while I'm busy seeing at

443
00:34:48,139 --> 00:34:52,969
my laptop will actually work this time
we can do the linksys two pounds i want

444
00:34:52,969 --> 00:34:57,410
the latest i want to go for the existing
yeah well you can take questions watch

445
00:34:57,410 --> 00:35:00,109
that up you're probably pretty good

446
00:35:00,110 --> 00:35:13,460
anyone have any questions also mirrored
the series but yeah this is just kind of

447
00:35:13,460 --> 00:35:22,580
anything like you know what he knows you
take pictures and send back help me

448
00:35:22,580 --> 00:35:28,040
actually try to avoid people that great
like advice on the back there's a real

449
00:35:28,040 --> 00:35:31,310
one

450
00:35:31,310 --> 00:35:43,700
so yeah it's hard to only unless your
circle reach around the normal sequence

451
00:35:43,700 --> 00:35:46,700
here see if I can get him better not
cycle

452
00:35:47,450 --> 00:36:18,799
oh I got poppers little bit up they have
a question why up decide okay

453
00:36:22,190 --> 00:36:28,280
my family knows

454
00:36:28,970 --> 00:36:43,459
check check down guys get their current
president presented Milton persistent

455
00:36:43,460 --> 00:36:46,310
bottles and out of this monkey as well I
don't know how like usually are in the

456
00:36:46,310 --> 00:36:54,529
world but up you know monkey persistence
of clinical you can we had a party and

457
00:36:54,530 --> 00:37:08,180
also all right right yeah yeah

458
00:37:09,200 --> 00:37:22,399
any other questions for ya yeah we have
to go to make follow we can separately

459
00:37:22,400 --> 00:37:27,680
and the change could build with the
chain so in itself is not hold any

460
00:37:27,680 --> 00:37:29,210
wedding system you have

461
00:37:29,210 --> 00:37:35,780
oh you don't have that like run off like
that it's always on the library right

462
00:37:35,780 --> 00:37:50,180
itself the right any more questions yeah
i'm going to hack the router back to get

463
00:37:50,180 --> 00:37:51,169
it

464
00:37:51,170 --> 00:37:55,850
so this is a fun little worm that was
discovered around Matt around

465
00:37:55,850 --> 00:38:00,680
two-and-a-half years ago now it's called
it was called the moon were basically

466
00:38:00,680 --> 00:38:07,040
its command injection in the login page
to the router it's really kind of a

467
00:38:07,040 --> 00:38:10,040
crappy blog it's like oh what's your
code

468
00:38:10,040 --> 00:38:17,270
oh it's semicolon here let me show up
for you so it took over a bunch of soho

469
00:38:17,270 --> 00:38:27,590
routers in 2014 and now it's going to do
for us so it's pretty simple just a lil

470
00:38:27,590 --> 00:38:31,650
hoes and our host and we'll set the new
payload and we run

471
00:38:31,650 --> 00:38:40,830
on we get session and a and now we can
see what you got over there and we do

472
00:38:40,830 --> 00:38:45,509
get uid turns out this is the embedded
linux system and there's only one user

473
00:38:45,510 --> 00:38:48,510
and its root so mission accomplished

474
00:38:49,170 --> 00:38:55,710
and so we can do all sorts of nice and
nasty things like we can look at the

475
00:38:55,710 --> 00:39:00,750
routing table you can change the router
table and change the routing table or we

476
00:39:00,750 --> 00:39:04,530
can also shell out and access the
non-volatile ram and look at the

477
00:39:04,530 --> 00:39:10,680
administrator creds and harvest them
that way we can also so many

478
00:39:10,680 --> 00:39:14,700
possibilities we cannot coming soon
we'll be able to pivot through the

479
00:39:14,700 --> 00:39:19,230
router so if you compromise something on
the other side you can pivot through

480
00:39:19,230 --> 00:39:23,220
that box maybe it's ephemeral maybe it's
a phone or something that you know is

481
00:39:23,220 --> 00:39:28,200
going to go away you can pivot back out
to the local network interface on the

482
00:39:28,200 --> 00:39:32,490
router establish a foothold there and
now you've got the network forever and

483
00:39:32,490 --> 00:39:36,810
ever and ever because no-one reboots
these things unless it gets low but

484
00:39:36,810 --> 00:39:39,810
since you're not using a whole lot of
ram it won't get slowed from you

485
00:39:41,190 --> 00:39:45,120
any other questions

486
00:39:45,120 --> 00:39:48,120
alright let's wrap it up

487
00:39:49,690 --> 00:40:11,380
this is actually mixed little-endian not
what it's built into the exploit luckily

488
00:40:11,380 --> 00:40:16,720
the people who dissected this router and
built the modules like oh this is a line

489
00:40:16,720 --> 00:40:19,779
of this little indian and it
automatically restricts you if we show

490
00:40:19,780 --> 00:40:32,260
options so now we have our if we show
options i will see that it requires a

491
00:40:32,260 --> 00:40:39,610
missile payload and normally the payload
is to just exact to shell as the default

492
00:40:39,610 --> 00:40:44,380
one but the shell on that system is busy
box that was compiled with all the bells

493
00:40:44,380 --> 00:40:51,760
turned off so it's a terribly painful
experience it has a half functioning w

494
00:40:51,760 --> 00:40:56,680
get that you can then use to further
stage stuff but yeah that's it's

495
00:40:56,680 --> 00:41:03,399
horrible and there's not a whole lot of
is allocated so it's actually a lot more

496
00:41:03,400 --> 00:41:08,320
reliable to inject the memory instead of
trying to stage something to temp and

497
00:41:08,320 --> 00:41:15,970
andrey exacting alright thanks y'all for

498
00:41:15,970 --> 00:41:16,270
coming out

