1
00:00:00,000 --> 00:00:04,589
I think it's ten o'clock so go ahead and
get started good morning everyone

2
00:00:05,160 --> 00:00:10,379
thanks for coming out no it's the last
day of derby khan and late night last

3
00:00:10,380 --> 00:00:14,429
night so I appreciate everyone getting
up and making out this is abusing stress

4
00:00:14,429 --> 00:00:18,960
relationships authentication back alleys
and forgotten features so in this

5
00:00:18,960 --> 00:00:22,949
presentation I'm going to be walking
through a example pentest in a lab

6
00:00:22,949 --> 00:00:26,430
environment i created just to demo some
of the tips and techniques that I've

7
00:00:26,430 --> 00:00:30,779
used in the past 24 linux post
exploitation and pivoting around linux

8
00:00:30,779 --> 00:00:33,870
networks while trying to remain is
undetectable as possible

9
00:00:34,860 --> 00:00:38,309
we've got a lot to cover a lot of
information the slides here in the next

10
00:00:38,309 --> 00:00:40,829
25 minutes but quick agenda

11
00:00:40,829 --> 00:00:44,579
there's a brief introduction about who i
am and why this talk and then I jump

12
00:00:44,579 --> 00:00:48,090
right into it and we can start talking
about exploiting authentication and

13
00:00:48,090 --> 00:00:52,710
trust in these networks and specifically
i'm going to talk about sudu Kerberos

14
00:00:52,710 --> 00:00:56,850
and si Jin some of the fun you can have
with all three of those at the end

15
00:00:56,850 --> 00:01:01,109
there's a demo and the demos going to
combine a lot of these techniques and

16
00:01:01,109 --> 00:01:04,830
ultimately culminate in bypassing and
getting around duo's two-factor

17
00:01:04,830 --> 00:01:08,640
authentication and get into a very
protected and segmented production

18
00:01:08,640 --> 00:01:13,590
network that's using that then hopefully
time committed if i don't go too slow

19
00:01:13,590 --> 00:01:16,619
here we can have time for some Q&A and
discussions at the end

20
00:01:18,509 --> 00:01:22,350
Who am I my name is Ronnie fathers and
i'm a senior consultant with cisco

21
00:01:22,350 --> 00:01:27,839
before cisco I was with a company called
neo abscess and a new hypothesis and at

22
00:01:27,840 --> 00:01:32,220
cisco I perform a lot of internal
pentest the technical stuff about also

23
00:01:32,220 --> 00:01:35,009
get exposed to a lot of high-level
strategic and kind of network

24
00:01:35,009 --> 00:01:38,610
architecture planning and work with a
lot of different organizations that

25
00:01:38,610 --> 00:01:43,740
lately have been seen and we've been
doing a lot more tests in Windows listen

26
00:01:43,740 --> 00:01:46,740
vironment and these are internal
penetration test where your standard

27
00:01:46,740 --> 00:01:50,759
tool sets don't work and we don't have
power shell which the fan favorite here

28
00:01:50,759 --> 00:01:55,110
at Derby khan and we've seen this in a
lot of DevOps and cloud infrastructure

29
00:01:55,110 --> 00:01:59,610
environments where everything is done
via linux and ssh keys and and DevOps

30
00:01:59,610 --> 00:02:05,070
and support tools like that so after
doing a lot of these pen tests and

31
00:02:05,070 --> 00:02:09,239
talking about after the fact with the
clients and showing them what I was able

32
00:02:09,239 --> 00:02:12,780
to do and then having remediation
strategy discussions

33
00:02:12,780 --> 00:02:16,170
I realized that a lot of people were
really aware of all you can do in a

34
00:02:16,170 --> 00:02:19,708
linux environment with just some of the
standard tool said that you have and

35
00:02:19,709 --> 00:02:22,890
after talking about it with some other
co-workers and red teamers I realized

36
00:02:22,890 --> 00:02:26,309
that they weren't really familiar with
some of the techniques also so that's

37
00:02:26,310 --> 00:02:29,520
where this talk was born and decide to
put a lot of information to SlideShare

38
00:02:29,520 --> 00:02:32,819
it out there i'm gonna jump right into
it and for the rest of the talk we're

39
00:02:32,819 --> 00:02:37,079
gonna be a pen testing this example
environment that i created and it's a

40
00:02:37,080 --> 00:02:40,410
really simple environment but it's
entirely based off architectures that

41
00:02:40,410 --> 00:02:45,930
I've seen organizations implement before
and this is called Rob . lab and in this

42
00:02:45,930 --> 00:02:49,769
organization there are three different
network segments there's the corporate

43
00:02:49,769 --> 00:02:53,700
network there's the dev network and then
there's a highly protected production

44
00:02:53,700 --> 00:02:59,160
network and the production network is
further segmented with two factor

45
00:02:59,160 --> 00:03:04,260
authentication there's two users in this
network there's mark and there's Patrick

46
00:03:04,260 --> 00:03:06,450
and they have two different privilege
levels

47
00:03:06,450 --> 00:03:10,018
mark is a an administrative user he
doesn't have many privileges and he

48
00:03:10,019 --> 00:03:14,280
can't actually leave the corporate
network Patrick on the other hand is a

49
00:03:14,280 --> 00:03:18,720
developer and he has rights to get into
dev and he has rights to get into prod

50
00:03:18,720 --> 00:03:20,430
to make changes when necessary

51
00:03:20,430 --> 00:03:25,140
this organization has some shared common
services here there's no windows in this

52
00:03:25,140 --> 00:03:32,369
organization but they are using ldap dns
and kerberos one box here that I want to

53
00:03:32,370 --> 00:03:35,850
talk about because I've seen a lot of
organizations have something similar

54
00:03:35,850 --> 00:03:39,390
I've called TS and it's inside the
corporate network and it's a shared-use

55
00:03:39,390 --> 00:03:44,250
box where employees can log into and get
a linux environment and they can use

56
00:03:44,250 --> 00:03:49,200
this box to run tests or stage code for
store things on they just have access to

57
00:03:49,200 --> 00:03:53,220
this box and my company has a few boxes
like this my my school had a box like

58
00:03:53,220 --> 00:03:57,209
this where all students were able to
login to a unix box and get access to it

59
00:03:57,209 --> 00:04:01,769
so I've seen a lot more especially as
DevOps you come lot more prevalent and

60
00:04:01,769 --> 00:04:07,350
organizations now we're going to assume
for the sake of this pen test that mark

61
00:04:07,350 --> 00:04:10,590
it's compromised and lower privileged
user has had his passwords stolen

62
00:04:11,370 --> 00:04:16,048
what's the worst that could happen
that's what we're going to start off on

63
00:04:16,048 --> 00:04:20,010
his pen test example and I'm gonna dive
right into it but before I do that I

64
00:04:20,010 --> 00:04:23,520
just looking at this kind of show of
hands who here thinks that this is a

65
00:04:23,520 --> 00:04:26,460
pretty is also simple but a pretty
saying

66
00:04:26,460 --> 00:04:29,789
and secured network layout and
organization

67
00:04:29,789 --> 00:04:33,449
yeah yeah i think so too if you look at
this they're doing a lot right

68
00:04:33,449 --> 00:04:37,560
they have segmentation in place they're
enforcing access controls they've got to

69
00:04:37,560 --> 00:04:41,069
fa on their sensitive network the
production network they've got users

70
00:04:41,069 --> 00:04:45,090
with different privilege levels they're
doing at least access here least

71
00:04:45,090 --> 00:04:49,109
privileged access their digital not
right but there's one area where they

72
00:04:49,110 --> 00:04:52,289
are weak and it's where these trusts
boundaries kind of get blurred between

73
00:04:52,289 --> 00:04:55,770
users with different privilege levels
and that's that TS box right there's

74
00:04:55,770 --> 00:04:58,020
we'll see

75
00:04:58,020 --> 00:05:02,609
so jumping into it cannot stress enough
how important reconnaissance is for red

76
00:05:02,610 --> 00:05:05,460
teamers you need to know exactly what
you're working with when you start doing

77
00:05:05,460 --> 00:05:09,419
an attack scenario and need to learn to
love those informational finding that i

78
00:05:09,419 --> 00:05:14,130
mentioned earlier ldap and dns our
treasure trove of information and my

79
00:05:14,130 --> 00:05:19,169
go-to for great information about a
network dns can tell you what services

80
00:05:19,169 --> 00:05:22,948
are running and where they are on the
network and ldap can tell you who's

81
00:05:22,949 --> 00:05:24,139
using them

82
00:05:24,139 --> 00:05:28,249
so these three dig commands here just an
example dns queries you can look up for

83
00:05:28,249 --> 00:05:33,199
serve records and they'll tell you where
the ldap servers are where the kerberos

84
00:05:33,199 --> 00:05:36,949
servers are and the txt record their the
bottom will tell you what the kerberos

85
00:05:36,949 --> 00:05:40,039
realm is so with those three commands we
have a pretty good idea of where

86
00:05:40,039 --> 00:05:44,719
authentication is being handled and
we're ldap is once we know where ldap is

87
00:05:44,719 --> 00:05:48,439
we can actually just do ldap queries to
find out even more information about it

88
00:05:48,439 --> 00:05:51,830
either through an authenticated binds or
if we have a password through an

89
00:05:51,830 --> 00:05:56,840
authenticated bind this ldap query will
dump out all the information for Rob .

90
00:05:56,840 --> 00:06:02,090
lab and tell us where boxes are located
information about those boxes what users

91
00:06:02,090 --> 00:06:06,378
around the network what groups there in
so through some of this recon if we have

92
00:06:06,379 --> 00:06:09,529
same marks password we might realize
that ok mark doesn't have many

93
00:06:09,529 --> 00:06:14,120
privileges but Patrick on the other hand
does and will keep that in mind knowing

94
00:06:14,120 --> 00:06:17,029
that Patrick might be the one we
actually want to try to compromise down

95
00:06:17,029 --> 00:06:23,749
the line so I've heard a lot of
organizations say that they're trying to

96
00:06:23,749 --> 00:06:27,139
migrate away from passwords that
passwords a week and we don't really use

97
00:06:27,139 --> 00:06:31,159
passwords in our environment because
we're fully characterized and we use ssh

98
00:06:31,159 --> 00:06:35,870
everywhere so even if you get a password
when you can't log into anywhere because

99
00:06:35,870 --> 00:06:38,620
we don't use password authentication

100
00:06:38,620 --> 00:06:46,570
slight problem with that though which is
Ambrose is password-based so if we sh as

101
00:06:46,570 --> 00:06:50,710
mark from our cali box here and we try
to get on at TS box we can see that we

102
00:06:50,710 --> 00:06:51,880
get permission denied

103
00:06:51,880 --> 00:06:55,270
and that's because password
authentication is disabled but we see

104
00:06:55,270 --> 00:07:02,139
that gssapi is enabled which is kerberos
for ssh now through that dns recon step

105
00:07:02,139 --> 00:07:05,979
ago we know where their kerberos servers
are so we can actually configure our

106
00:07:05,979 --> 00:07:09,669
cali box to talk to those kerberos
servers and authenticate to the kerberos

107
00:07:09,669 --> 00:07:14,380
realm which is Robin off that lab so we
can do a kan dit command to check out a

108
00:07:14,380 --> 00:07:18,310
ticket for Mark and we authenticate with
marks password we've got through say

109
00:07:18,310 --> 00:07:21,940
fishing make a list will show us

110
00:07:21,940 --> 00:07:29,320
yeah we're now we have a TGT for market
Rob . lab and we can ssh again but this

111
00:07:29,320 --> 00:07:33,370
time tell ssh to use gssapi
authentication and to delegate our

112
00:07:33,370 --> 00:07:37,090
credentials forward and a second ago we
got permission denied

113
00:07:37,090 --> 00:07:41,590
now we get welcome to go into so we just
authenticated to a box using a password

114
00:07:42,100 --> 00:07:45,160
even though you say password
authentication is disabled it only took

115
00:07:45,160 --> 00:07:48,370
a few additional steps are just knowing
how the network works and being able to

116
00:07:48,370 --> 00:07:56,200
talk to the Kerberos server first now
i'm not going to talk much about local

117
00:07:56,200 --> 00:07:59,530
privilege escalation there's really
great resources out there a lot of

118
00:07:59,530 --> 00:08:03,159
things you can look for but i have to
mention my favorite way of getting root

119
00:08:03,160 --> 00:08:07,210
privileges on a box it's the first thing
I always look for when i land on a box

120
00:08:07,210 --> 00:08:12,909
like this which is to do we trust you to
give us root privileges responsibly

121
00:08:12,910 --> 00:08:17,349
right but it's basically just a white
list of commands that a user can run as

122
00:08:17,349 --> 00:08:23,770
with root privileges and it's handled by
SC sewers sooo dash L is a command you

123
00:08:23,770 --> 00:08:27,580
can run which will tell you what you
have permissions to to run with root

124
00:08:27,580 --> 00:08:32,799
privileges so if we log in the TS as
Mark and we do a studio dash L we can

125
00:08:32,799 --> 00:08:35,500
see that Mark can run these following
four commands

126
00:08:35,500 --> 00:08:39,400
I don't know everyone in the back and
see that but does anyone see any

127
00:08:39,400 --> 00:08:41,520
problems with some of these commands

128
00:08:41,520 --> 00:08:46,530
people yeah if I was a pen tester my
eyes would light up because i can

129
00:08:46,530 --> 00:08:52,650
actually get a root shell from all four
of these commands pursue do find it

130
00:08:52,650 --> 00:08:56,730
seems innocent enough right you're just
searching but find has the exact program

131
00:08:56,730 --> 00:08:59,880
which will actually execute a command
once the file is found

132
00:09:00,690 --> 00:09:04,830
so we can just find a file that we know
exists and then execute been bashed and

133
00:09:04,830 --> 00:09:08,100
drop into a root shell them just the
text editor

134
00:09:08,610 --> 00:09:12,840
what could go wrong then lets you
execute shell command so we can just do

135
00:09:12,840 --> 00:09:15,960
a bin bash within them and drop
immediately down into a root shell

136
00:09:15,960 --> 00:09:19,890
here's one for DevOps people a custom
script

137
00:09:20,670 --> 00:09:24,599
well i have seen this before where the
script inherited permissions that are

138
00:09:24,600 --> 00:09:28,530
wrong and it's group rideable so we can
just modify that script and then run it

139
00:09:28,530 --> 00:09:32,850
was to do root shell this one's a little
bit more subtle

140
00:09:33,360 --> 00:09:38,400
on the surface it looks like all you can
do is copy logs from apache into a

141
00:09:38,400 --> 00:09:43,410
backup directory but that wild-card is
unbounded which means you can actually

142
00:09:43,410 --> 00:09:48,390
put in . slashes and Traverse upwards so
you can actually copy anything from

143
00:09:48,390 --> 00:09:54,750
anywhere to anywhere else so i can sue
copy been sh and overwrite some other

144
00:09:54,750 --> 00:09:58,650
script or binary that i also have super
missions to run and then student-run

145
00:09:58,650 --> 00:10:03,180
that and drop right into a root shell so
four different ways to get a root shell

146
00:10:03,180 --> 00:10:07,170
on this box didn't take much was no
crazy exploit we just dropped into a

147
00:10:07,170 --> 00:10:14,400
room show was to do well we've got roots
so now what we've all seen the talks at

148
00:10:14,400 --> 00:10:20,520
Derby con so far I mean what do we do
when we have system on windows we run

149
00:10:20,520 --> 00:10:25,800
many cats so we'll just w get the mini
cat self binary and will trot it and

150
00:10:25,800 --> 00:10:32,250
then we just to do many cats dash dumb
secrets just getting that doesn't work

151
00:10:32,250 --> 00:10:34,410
that doesn't exist

152
00:10:34,410 --> 00:10:38,760
uh we are route though so we can if we
want at local users we can change

153
00:10:38,760 --> 00:10:43,800
passwords we could do something really
nasty like rootkits are back doors but

154
00:10:43,800 --> 00:10:47,729
to me these are easy ways to get
detected to trigger alarms and or cause

155
00:10:47,730 --> 00:10:51,960
damage to an organization which we want
to try to avoid so now we need to think

156
00:10:51,960 --> 00:10:54,930
like attackers we need to think in
graphs

157
00:10:54,930 --> 00:10:58,649
we know that other users exist on the
network and we know that other boxes

158
00:10:58,649 --> 00:11:02,040
exist on the network and we know that
those users connect to those other boxes

159
00:11:02,040 --> 00:11:07,620
so there's only one solution in my mind
we need to go deeper

160
00:11:08,460 --> 00:11:14,310
we're route but you can't just transfer
route to another box

161
00:11:15,270 --> 00:11:22,649
the question is how do we become someone
else and move to a different box in this

162
00:11:22,649 --> 00:11:25,740
example in this organization we know
that they're using kerberos to

163
00:11:25,740 --> 00:11:30,839
authenticate well authenticated users
will leave behind Kerberos ticket caches

164
00:11:30,839 --> 00:11:35,339
now in Windows these Kerberos ticket
caches are stored and protected memory

165
00:11:35,339 --> 00:11:39,779
and you have to use a tool like many
cats to access them up on linux they're

166
00:11:39,779 --> 00:11:43,950
stored in the temp directory and they're
just files now they do have file

167
00:11:43,950 --> 00:11:47,279
permissions on them but we're route so
we can do whatever we want with them

168
00:11:47,279 --> 00:11:53,760
your default default location for
Kerberos ticket ashes on linux is temp

169
00:11:53,760 --> 00:12:00,360
krb5 CC underscore and then your user ID
and some random characters you can find

170
00:12:00,360 --> 00:12:05,100
where your current Carosa caches with a
que list command or it's always going to

171
00:12:05,100 --> 00:12:10,680
be stored in the care be five CC name
environment variable if we do an LS dash

172
00:12:10,680 --> 00:12:15,479
L on just temp curb star will see all
the Kerberos ticket caches that are in

173
00:12:15,480 --> 00:12:19,110
that temp directory now there's a
Kerberos ticket cash in that temp

174
00:12:19,110 --> 00:12:24,390
directory that's not expired yet and we
copy that into our ticket cash in the

175
00:12:24,390 --> 00:12:27,810
eyes of Kerberos we've essentially
become that person and we can

176
00:12:27,810 --> 00:12:36,029
authenticate is them wherever we want
with kerberos tickets so here we are

177
00:12:36,029 --> 00:12:41,370
route on that TS box we've elevated from
mark and we run a que list and we see

178
00:12:41,370 --> 00:12:46,380
that uh we're still market Rob . lab
that's our principal name and our

179
00:12:46,380 --> 00:12:51,720
Kerberos ticket cash is that temp carry
five cc1 that are 10,000 to random

180
00:12:51,720 --> 00:12:57,870
characters we do an LS dash L on the
temp directory and we see that oh

181
00:12:57,870 --> 00:13:02,279
patrick has been on this box recently he
got a ticket Kerberos ticket and sitting

182
00:13:02,279 --> 00:13:04,640
there in the temp directory

183
00:13:04,640 --> 00:13:13,310
if we copy Patrick's tur-bros ticket
cash and overwrite are Kerberos ticket

184
00:13:13,310 --> 00:13:16,640
cash and then run k list again

185
00:13:16,640 --> 00:13:20,900
kerberos now thanks ok our default
principles changed were now Patrick at

186
00:13:20,900 --> 00:13:26,689
Rob . lab so we just do the same thing
we did a second ago and we ssh with

187
00:13:26,690 --> 00:13:30,620
kerberos authentication as Patrick and
we just jumped into the development

188
00:13:30,620 --> 00:13:36,620
network as Patrick a4a Patrick were
previously marked didn't have access to

189
00:13:36,620 --> 00:13:40,010
get onto that development network so
just impersonating someone else and made

190
00:13:40,010 --> 00:13:48,560
another jump into a different network
segment by stealing kerberos tickets so

191
00:13:48,560 --> 00:13:54,050
kerberos is hard to configure it's not
extremely widely deployed but everyone

192
00:13:54,050 --> 00:14:01,130
uses ssh and a lot of users who use ssh
will use ssh agents and they'll do ssh

193
00:14:01,130 --> 00:14:06,020
agent forwarding is everyone kind of
familiar with ssh agents and forwarding

194
00:14:06,020 --> 00:14:13,010
basically to avoid storing your private
key everywhere when you do Sh agent

195
00:14:13,010 --> 00:14:17,180
forwarding it'll decrypt your private
key into memory on your laptop and then

196
00:14:17,180 --> 00:14:20,930
when you ssh to a box that opens a
socket and that stock it connects back

197
00:14:20,930 --> 00:14:25,550
to the agent which resides on your
laptop any further hop or authentication

198
00:14:25,550 --> 00:14:29,750
you want to make it will pass the
authentication materials the challenge

199
00:14:29,750 --> 00:14:33,470
and the response through that socket all
the way back to your laptop or your

200
00:14:33,470 --> 00:14:40,250
private key resides to do the challenge
response the beauty and the danger here

201
00:14:40,250 --> 00:14:45,950
is that if we can hijack the socket we
can use it to kind of outsourced our

202
00:14:45,950 --> 00:14:51,350
authentication to a legitimate person
and a legitimate ssh agent so what I

203
00:14:51,350 --> 00:14:55,580
mean is if we wanted to try to
authenticate as Patrick and we hijack

204
00:14:55,580 --> 00:15:00,290
the real Patrick's ssh off socket when
we get a challenge from the server one

205
00:15:00,290 --> 00:15:04,640
thick 82 we can just immediately passed
it off to the real Patrick it goes to

206
00:15:04,640 --> 00:15:08,930
his laptop where his real private key
resides it sends the response to that

207
00:15:08,930 --> 00:15:12,739
challenge back through the socket and
we've authenticated as patrick from our

208
00:15:12,740 --> 00:15:16,700
session without having to actually need
Patrick's private key because we've like

209
00:15:16,700 --> 00:15:18,320
i'd like i'd call it out

210
00:15:18,320 --> 00:15:24,920
first our authentication so that socket
is located on the system and the

211
00:15:24,920 --> 00:15:30,920
location is an environment variable
called pssh off sock so to hijack an ssh

212
00:15:30,920 --> 00:15:35,270
socket that's kind of a three-step
process first you want to discover who's

213
00:15:35,270 --> 00:15:38,990
actively logged in this only works if a
user has an active connection to the

214
00:15:38,990 --> 00:15:44,330
Machine and then you find the pit or the
process ID of their bash environment

215
00:15:44,330 --> 00:15:48,620
once you know that you can dump the
environment information for that pit and

216
00:15:48,620 --> 00:15:52,100
look for that environment variable
called ssh ofsaa can tell you where that

217
00:15:52,100 --> 00:15:56,420
socket is located on the system then we
just passed that as an environment

218
00:15:56,420 --> 00:16:01,490
variable to a new ssh connection and we
try to connect it will use that socket

219
00:16:01,490 --> 00:16:07,460
to handle all the authentication for us
so these are the commands to do that and

220
00:16:07,460 --> 00:16:11,360
this is going to be in the demo video
coming up in a few minutes about to

221
00:16:11,360 --> 00:16:15,800
discover login users you can use who and
to get the process ideas like to use ps3

222
00:16:15,800 --> 00:16:19,010
and so we can see that Patrick is logged
in

223
00:16:19,010 --> 00:16:23,390
sorry this is small for the people in
the back but we can see that patrick has

224
00:16:23,390 --> 00:16:30,350
a batch process ID at 1979 this little
one liner here it will dump the

225
00:16:30,350 --> 00:16:34,910
environment information for process ID
1979 and with a trim command that will

226
00:16:34,910 --> 00:16:39,860
pretty print it for us and then we just
grab for the ssh off sock environment

227
00:16:39,860 --> 00:16:45,200
variable and will see that there is a
ssh off socket in the temp directory

228
00:16:45,200 --> 00:16:51,350
here with a bunch of random characters
all we need to do is pass that as an

229
00:16:51,350 --> 00:16:57,110
environment variable to a new ssh
connection forward that agent again and

230
00:16:57,110 --> 00:17:01,160
we can authenticate as Patrick into the
depth network and when we hit enter

231
00:17:01,160 --> 00:17:03,980
like I said it's going to pass all that
authentication challenge-response

232
00:17:03,980 --> 00:17:07,819
through this real Patrick's
authentication socket and will

233
00:17:07,819 --> 00:17:10,819
authenticate is Patrick and jump onto
the dev network

234
00:17:14,250 --> 00:17:22,290
oh no it's too FA so even if a new
organization might say even if you have

235
00:17:22,290 --> 00:17:26,550
a password or even if you have an ssh
agent or even if you have a Kerberos

236
00:17:26,550 --> 00:17:31,860
ticket we use to FA are most sensitive
systems and there's no way you can get

237
00:17:31,860 --> 00:17:37,889
past that right well the first time i
came across this i was a bit stymied and

238
00:17:37,890 --> 00:17:41,910
I had this kind of step back and think
about all right how is two-factor

239
00:17:41,910 --> 00:17:48,990
authentication actually handled with ssh
how does it actually work so two-factor

240
00:17:48,990 --> 00:17:52,620
authentication for ssh usually happens
in one of two ways

241
00:17:54,030 --> 00:17:58,830
the first is using ssh is force command
what this does is after uses

242
00:17:58,830 --> 00:18:02,730
authenticated it forces them to execute
a command kind of throws them in a jail

243
00:18:02,730 --> 00:18:07,770
where they have to then put in there one
time password or PIN but that's not

244
00:18:07,770 --> 00:18:11,550
really true 2fa because they've already
authenticated and then you're

245
00:18:11,550 --> 00:18:15,120
challenging them again for another
authentication there's a few different

246
00:18:15,120 --> 00:18:19,770
ways to bypass that i'm not going to go
into it here because the more secure and

247
00:18:19,770 --> 00:18:26,730
true way to do to FA is through an
actual Pam module so duo and Google are

248
00:18:26,730 --> 00:18:32,160
two popular 2fa service providers and
they both offer compiled Pam modules

249
00:18:32,160 --> 00:18:38,490
that you can throw on a box and then use
that for ssh authentication excuse me

250
00:18:38,490 --> 00:18:50,880
but to understand that we need to think
how to pan module work when deep and

251
00:18:50,880 --> 00:18:56,100
modules actually execute and handle
authentication they may fire during the

252
00:18:56,100 --> 00:18:59,669
connection establishment face so cam
modules will ask you for your

253
00:18:59,670 --> 00:19:03,510
authentication whichever way you want
when you're trying to establish a

254
00:19:03,510 --> 00:19:08,010
connection to the machine over ssh once
that connection is established they're

255
00:19:08,010 --> 00:19:11,879
not used again they just go in the
background and you have your active

256
00:19:11,880 --> 00:19:16,110
session and the pan module never fires
again until that connection is destroyed

257
00:19:16,110 --> 00:19:20,310
and you try to open a new connection now
this is a really subtle the very

258
00:19:20,310 --> 00:19:24,419
important thing to realize that
authentication happens on a per

259
00:19:24,420 --> 00:19:27,810
connection basis not a per session basis

260
00:19:27,810 --> 00:19:31,710
as long as that connection is not
destroyed the users never prompted again

261
00:19:31,710 --> 00:19:35,910
and that connection can be as long
lasting as as as over along the user

262
00:19:35,910 --> 00:19:42,660
needs that connection recession to be
active so how can we use that to our

263
00:19:42,660 --> 00:19:50,910
advantage here has anyone heard of ssh
master mode three people for people

264
00:19:50,910 --> 00:19:57,060
yeah it's a kind of lesser-known feature
that's built into ssh that is incredibly

265
00:19:57,060 --> 00:20:04,320
powerful and in my mind really dangerous
to ssh master mode allows multiple ssh

266
00:20:04,320 --> 00:20:12,570
sessions to share one connection it's a
built-in multiplexer for ssh these

267
00:20:12,570 --> 00:20:17,310
sessions don't require additional
authentication because authentication

268
00:20:17,310 --> 00:20:22,080
remember only happens on a per
connection basis not a procession basis

269
00:20:22,080 --> 00:20:26,370
you can think of it like piggybacking on
an existing ssh connection the

270
00:20:26,370 --> 00:20:30,719
connection is there and we're throwing
in a new session into that existing ssh

271
00:20:30,720 --> 00:20:37,290
connection or tunnel so there's three
options that control ssh master mode and

272
00:20:37,290 --> 00:20:40,889
they all have to be present when the
connection is initiated once the

273
00:20:40,890 --> 00:20:44,700
connection is initiated you can open a
new session on that connection through a

274
00:20:44,700 --> 00:20:50,130
socket with the dash is command so these
are the three options right here on the

275
00:20:50,130 --> 00:20:54,570
first is control master which tells ssh
I want to use master mode for this

276
00:20:54,570 --> 00:21:00,210
connection control path tells ssh where
to store that socket in this case it's

277
00:21:00,210 --> 00:21:03,540
in the temp directory and these
variables get expanded to use your host

278
00:21:03,540 --> 00:21:08,639
import this last option really kind of
blew my mind when i read about in the

279
00:21:08,640 --> 00:21:11,520
manpage control persist yes

280
00:21:11,520 --> 00:21:17,340
what this does is tells ssh that even if
there's no active session keep the

281
00:21:17,340 --> 00:21:21,540
connection alive so think about that for
a second

282
00:21:21,540 --> 00:21:26,010
with control persist set you can log
into a box with ssh and do your work you

283
00:21:26,010 --> 00:21:27,960
can type exit and shut down

284
00:21:27,960 --> 00:21:32,550
SSH does not terminate the connection
the connection just keeps running there

285
00:21:32,550 --> 00:21:35,909
in the background until the next time
you want to open another session on it

286
00:21:37,170 --> 00:21:39,820
so how can we have use it

287
00:21:39,820 --> 00:21:43,510
well when I when I've read about it at
that okay this is kind of like a

288
00:21:43,510 --> 00:21:48,250
backdoor ssh if we can trick it user and
to initiate a connection with master

289
00:21:48,250 --> 00:21:53,110
mode it will open a socket we come by
later and inject a new session into that

290
00:21:53,110 --> 00:21:56,530
socket without needing to authenticate
because the real users already

291
00:21:56,530 --> 00:21:59,530
authenticated that connection for us

292
00:22:01,690 --> 00:22:08,650
alright demo time in this scenario we're
going to start in the video here where

293
00:22:08,650 --> 00:22:12,700
we've already gotten onto TS remember we
compromise marks password and we jumped

294
00:22:12,700 --> 00:22:16,210
onto that TS box and we've elevated
ourselves to route so we're going to

295
00:22:16,210 --> 00:22:20,500
start with a root shell on TS our goal
here is to get into that production

296
00:22:20,500 --> 00:22:36,010
Network which is protected with two fa
so here's our root shell on TS the first

297
00:22:36,010 --> 00:22:39,370
thing we're going to want to do is see
who's currently logged in so we run the

298
00:22:39,370 --> 00:22:44,530
command and we can see that patrick has
a active session so the ps3 will give us

299
00:22:44,530 --> 00:22:48,730
the process ID of bash for Patrick and
that one liner that i showed earlier

300
00:22:48,730 --> 00:22:53,530
here is going to dump the environment
variables for that fast session and

301
00:22:53,530 --> 00:22:57,460
we're gonna grab for his authentication
socket because Patrick's using agent

302
00:22:57,460 --> 00:23:01,210
forwarding here so that's where the ssh
off sockets located

303
00:23:01,750 --> 00:23:05,500
we just have to copy that and paste it
as an environment variable into a new

304
00:23:05,500 --> 00:23:11,530
SSH command before that agent on and we
want to jump onto the dev network as

305
00:23:11,530 --> 00:23:17,440
Patrick we hit enter it outsources all
the authentication for us and we jump

306
00:23:17,440 --> 00:23:21,580
onto dev as Patrick we've just
authenticated to him so we're feeling

307
00:23:21,580 --> 00:23:24,580
pretty good where attackers here let's
just try to jump onto that prod network

308
00:23:24,580 --> 00:23:30,790
right now we have patricks agent so
let's just go ahead and ssh into prod

309
00:23:31,610 --> 00:23:37,340
authentic you partial success and wash
it is to fa we definitely don't have

310
00:23:37,340 --> 00:23:42,770
access to that phone and it's duo to Ave
there's no way we can get around it but

311
00:23:42,770 --> 00:23:46,910
we think like attackers and we know that
the real Patrick does log into prod he's

312
00:23:46,910 --> 00:23:51,710
going to have to eventually so let's
backdoor his ssh with master mode so

313
00:23:51,710 --> 00:23:54,980
here we are opening is configured we're
talking sh that the next time you

314
00:23:54,980 --> 00:24:01,340
connect to prod use master mode save the
socket for that connection in the temp

315
00:24:01,340 --> 00:24:08,449
directory and a file called muhahaha and
then persisted keep that connection

316
00:24:08,450 --> 00:24:12,260
alive because when when he's done with
it

317
00:24:12,260 --> 00:24:15,740
I want to use it so don't destroy that
connection persisted and keep it alive

318
00:24:15,740 --> 00:24:20,540
if we look at the temp directory now we
see there's nothing there

319
00:24:22,070 --> 00:24:25,820
so now we just wait we keep our show
live on this box and we just wait for

320
00:24:25,820 --> 00:24:27,860
the real Patrick to come along

321
00:24:27,860 --> 00:24:31,250
so here's the real Patrick different
session

322
00:24:31,250 --> 00:24:36,470
he's doing is dev stuff and it's time to
make a change on prod so he's gonna ssh2

323
00:24:36,470 --> 00:24:39,140
as himself onto prod

324
00:24:39,140 --> 00:24:42,920
authentic partial success he's got his
phone at his desk in front of him so

325
00:24:42,920 --> 00:24:50,180
he's going to send himself a duo push
the dewlap pops up and says do you

326
00:24:50,180 --> 00:24:58,100
approve this connection to prod he says
yes he types in his password now he's

327
00:24:58,100 --> 00:25:01,790
got a session on fraud he does his death
stuff he makes whatever change or

328
00:25:01,790 --> 00:25:06,500
restart the service whatever he needs to
do any exits and he closes out that

329
00:25:06,500 --> 00:25:13,310
session and he goes home for the day now
we as attackers come back from lunch and

330
00:25:13,310 --> 00:25:18,470
you know we take a look at the temp
directory and suddenly there's a socket

331
00:25:18,470 --> 00:25:20,390
they're called muhahaha

332
00:25:20,390 --> 00:25:23,840
so we're going to try to ssh again but
we're going to tell ssh to use that

333
00:25:23,840 --> 00:25:37,669
existing connection with the dash S
command second ago we got to factor off

334
00:25:37,670 --> 00:25:42,170
now we just immediately open up a
session and we've got a session on prod

335
00:25:42,170 --> 00:25:46,880
as Patrick and didn't even see that duo
two-factor off problem at all

336
00:25:46,880 --> 00:25:57,500
so a little over on time but real quick
just to summarize here this is kind of

337
00:25:57,500 --> 00:26:01,130
graphical of what we did but we ended up
with a session on prod as Patrick

338
00:26:01,130 --> 00:26:07,120
without ever knowing Patrick's password
we never had

339
00:26:07,120 --> 00:26:12,489
Patrick's ssh key we never had access to
Patrick's bone for the two-factor off

340
00:26:12,490 --> 00:26:16,960
prompt and I think really telling is we
never used any hacker tools or things

341
00:26:16,960 --> 00:26:21,460
that might flag and ids because what was
there to detect we used kerberos we used

342
00:26:21,460 --> 00:26:26,350
ssh we used to do all this stuff is
normal in that Network and then we ended

343
00:26:26,350 --> 00:26:29,830
up with the shell as Patrick on fraud
which is also not normal or not

344
00:26:29,830 --> 00:26:34,449
unexpected because the real Patrick does
work on prod as well so I hope for

345
00:26:34,450 --> 00:26:37,990
consumers and blue team's alike some of
these tools and techniques really make

346
00:26:37,990 --> 00:26:41,740
it kind of question who and what do we
trust our network and how can we prevent

347
00:26:41,740 --> 00:26:45,550
ended defend against these types of
attacks and pivoting around our network

348
00:26:45,550 --> 00:26:51,850
so thank you i don't know if i have time
for questions but I will happily go out

349
00:26:51,850 --> 00:26:58,928
in the hallway and I'm happy to discuss
a little more okay have it thanks

350
00:26:58,929 --> 00:26:59,200
everyone

