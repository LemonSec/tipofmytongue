1
00:00:00,320 --> 00:00:03,120
um hello everyone uh thank you for

2
00:00:03,120 --> 00:00:04,000
joining uh

3
00:00:04,000 --> 00:00:06,319
this session this talk is going to be

4
00:00:06,319 --> 00:00:09,120
about kubernetes security 101

5
00:00:09,120 --> 00:00:11,679
best practice to secure your cluster my

6
00:00:11,679 --> 00:00:13,040
name is magna logan

7
00:00:13,040 --> 00:00:15,839
uh i'm part of the ds labs here trend

8
00:00:15,839 --> 00:00:17,840
micro

9
00:00:17,840 --> 00:00:21,359
so let's start with just

10
00:00:21,359 --> 00:00:24,480
a bit of uh overview about myself

11
00:00:24,480 --> 00:00:27,039
um as i said my name is magnu logan

12
00:00:27,039 --> 00:00:28,320
here's my handle on

13
00:00:28,320 --> 00:00:30,320
like twitter github link it in

14
00:00:30,320 --> 00:00:31,760
everywhere

15
00:00:31,760 --> 00:00:33,600
i'm an information secret specialist at

16
00:00:33,600 --> 00:00:35,040
trend micro and a senior threat

17
00:00:35,040 --> 00:00:36,559
researcher

18
00:00:36,559 --> 00:00:38,879
i'm a member of the cloud and container

19
00:00:38,879 --> 00:00:40,800
security research team

20
00:00:40,800 --> 00:00:43,520
i'm not a kubernetes security expert yet

21
00:00:43,520 --> 00:00:44,160
but i'm

22
00:00:44,160 --> 00:00:46,719
getting there and i'm going to take the

23
00:00:46,719 --> 00:00:48,480
kubernetes

24
00:00:48,480 --> 00:00:52,000
administration certification soon

25
00:00:52,000 --> 00:00:55,120
so the agenda for today it's basically a

26
00:00:55,120 --> 00:00:57,120
give you guys an overview of what is

27
00:00:57,120 --> 00:00:59,600
kubernetes how it works

28
00:00:59,600 --> 00:01:01,760
what is the kubernetes architecture the

29
00:01:01,760 --> 00:01:04,159
different components that we have there

30
00:01:04,159 --> 00:01:06,240
in your cluster and how they communicate

31
00:01:06,240 --> 00:01:07,200
with each other

32
00:01:07,200 --> 00:01:09,680
right then we're going to go about some

33
00:01:09,680 --> 00:01:11,520
best practices talking about

34
00:01:11,520 --> 00:01:13,920
the control plane which is the main node

35
00:01:13,920 --> 00:01:15,520
there the master node

36
00:01:15,520 --> 00:01:17,280
talking a few components about a few

37
00:01:17,280 --> 00:01:19,040
components the

38
00:01:19,040 --> 00:01:22,159
api server and the lcd then we're gonna

39
00:01:22,159 --> 00:01:23,040
go into

40
00:01:23,040 --> 00:01:25,439
our back which is the road based access

41
00:01:25,439 --> 00:01:26,560
control

42
00:01:26,560 --> 00:01:30,000
um then worker nodes talking about

43
00:01:30,000 --> 00:01:30,720
kubelet

44
00:01:30,720 --> 00:01:34,479
uh prop odds and some security features

45
00:01:34,479 --> 00:01:37,920
that are available there for you

46
00:01:37,920 --> 00:01:39,920
then we're gonna mention uh network

47
00:01:39,920 --> 00:01:42,320
policies and why they're important

48
00:01:42,320 --> 00:01:44,479
uh pod security policies as well as

49
00:01:44,479 --> 00:01:45,520
another uh

50
00:01:45,520 --> 00:01:47,759
way of securing all the pods on your

51
00:01:47,759 --> 00:01:48,720
cluster

52
00:01:48,720 --> 00:01:51,920
and uh lastly but not least we're gonna

53
00:01:51,920 --> 00:01:53,759
talk about audit logs and

54
00:01:53,759 --> 00:01:56,799
why they're important for you to have

55
00:01:56,799 --> 00:02:00,079
visibility and um and

56
00:02:00,079 --> 00:02:03,439
and just best uh better security

57
00:02:03,439 --> 00:02:05,520
on what's happening right on your

58
00:02:05,520 --> 00:02:07,600
cluster

59
00:02:07,600 --> 00:02:10,318
so to start off basically an uh

60
00:02:10,318 --> 00:02:12,000
introduction to kubernetes if you've

61
00:02:12,000 --> 00:02:13,360
never used it before

62
00:02:13,360 --> 00:02:15,280
right so kubernetes is an open source

63
00:02:15,280 --> 00:02:17,040
system for automating

64
00:02:17,040 --> 00:02:19,360
deployment scaling and management of

65
00:02:19,360 --> 00:02:22,000
containerized applications right so

66
00:02:22,000 --> 00:02:25,040
if you're running uh containers if

67
00:02:25,040 --> 00:02:26,720
you're running if you're using docker

68
00:02:26,720 --> 00:02:28,400
images for example you're running

69
00:02:28,400 --> 00:02:30,400
containers

70
00:02:30,400 --> 00:02:33,360
but that's hard to scale right so when

71
00:02:33,360 --> 00:02:35,440
you have multiple different images and

72
00:02:35,440 --> 00:02:36,000
and different

73
00:02:36,000 --> 00:02:39,040
containers uh it's hard to

74
00:02:39,040 --> 00:02:41,599
arc orchestrate and manage that so

75
00:02:41,599 --> 00:02:43,120
kubernetes is a solution

76
00:02:43,120 --> 00:02:45,519
that was created basically to solve that

77
00:02:45,519 --> 00:02:46,640
problem right

78
00:02:46,640 --> 00:02:49,040
so it was originally developed by google

79
00:02:49,040 --> 00:02:50,000
and based on some

80
00:02:50,000 --> 00:02:53,360
internal projects called borg and omega

81
00:02:53,360 --> 00:02:56,640
it was released in 2014

82
00:02:56,640 --> 00:02:59,760
and it's developed in gold right so the

83
00:02:59,760 --> 00:03:01,360
gold programming language

84
00:03:01,360 --> 00:03:03,760
and today kubernetes is maintained by

85
00:03:03,760 --> 00:03:04,959
the cncf

86
00:03:04,959 --> 00:03:08,400
was donated by google so the cncf is the

87
00:03:08,400 --> 00:03:10,640
cloud native computing foundation

88
00:03:10,640 --> 00:03:13,440
which is a sub-foundation of the linux

89
00:03:13,440 --> 00:03:14,720
foundation

90
00:03:14,720 --> 00:03:18,239
and and basically uh it manages

91
00:03:18,239 --> 00:03:20,480
a lot of uh open source projects and

92
00:03:20,480 --> 00:03:21,360
help them

93
00:03:21,360 --> 00:03:24,640
uh grow and scale

94
00:03:24,640 --> 00:03:27,840
so just uh a fun fact here kubernetes

95
00:03:27,840 --> 00:03:29,920
comes from the greek word which means

96
00:03:29,920 --> 00:03:31,599
helmsman

97
00:03:31,599 --> 00:03:35,519
or pilot and in this case it's an

98
00:03:35,519 --> 00:03:38,959
analogy to uh the captain of the ship

99
00:03:38,959 --> 00:03:39,840
that

100
00:03:39,840 --> 00:03:41,440
takes the containers which are the

101
00:03:41,440 --> 00:03:43,040
docker right so

102
00:03:43,040 --> 00:03:44,799
maybe you don't need kubernetes so

103
00:03:44,799 --> 00:03:46,319
that's one of the first questions that

104
00:03:46,319 --> 00:03:47,840
you should ask yourself and your

105
00:03:47,840 --> 00:03:48,720
organization

106
00:03:48,720 --> 00:03:51,040
why do you need kubernetes right

107
00:03:51,040 --> 00:03:52,239
kubernetes is a

108
00:03:52,239 --> 00:03:54,640
is a complex system and it's hard to

109
00:03:54,640 --> 00:03:55,920
understand at first

110
00:03:55,920 --> 00:03:57,760
it's easy to make mistakes if you're not

111
00:03:57,760 --> 00:03:59,439
following the best practices

112
00:03:59,439 --> 00:04:03,519
right so it offers a great deal of

113
00:04:03,519 --> 00:04:04,959
flexibility

114
00:04:04,959 --> 00:04:08,239
with uh many configuration options but

115
00:04:08,239 --> 00:04:10,239
at the same time these configuration

116
00:04:10,239 --> 00:04:12,239
options should be understood properly

117
00:04:12,239 --> 00:04:15,920
and set in a secure manner

118
00:04:15,920 --> 00:04:18,560
otherwise you might let your cluster uh

119
00:04:18,560 --> 00:04:19,440
vulnerable

120
00:04:19,440 --> 00:04:22,720
and open to attackers right um

121
00:04:22,720 --> 00:04:24,800
there are other solutions that out there

122
00:04:24,800 --> 00:04:26,639
for orchestrating contourized

123
00:04:26,639 --> 00:04:28,160
applications some of them

124
00:04:28,160 --> 00:04:31,440
are apache mesos docker swarm

125
00:04:31,440 --> 00:04:34,720
and head head open shift maybe

126
00:04:34,720 --> 00:04:37,040
those other options might be better for

127
00:04:37,040 --> 00:04:38,800
your scenario so you should look into

128
00:04:38,800 --> 00:04:39,919
that as well

129
00:04:39,919 --> 00:04:42,880
so i mentioned the cncf earlier right so

130
00:04:42,880 --> 00:04:44,320
what is the cncf

131
00:04:44,320 --> 00:04:46,160
uh as i said it's the cloud native

132
00:04:46,160 --> 00:04:48,400
computing foundation

133
00:04:48,400 --> 00:04:50,160
it's a foundation that creates a

134
00:04:50,160 --> 00:04:51,680
sustainable ecosystem

135
00:04:51,680 --> 00:04:54,240
and promotes communities to support the

136
00:04:54,240 --> 00:04:54,960
growth

137
00:04:54,960 --> 00:04:56,880
and the health of clouds open source

138
00:04:56,880 --> 00:04:58,400
software right so

139
00:04:58,400 --> 00:05:00,320
it as i said it's a sub foundation of

140
00:05:00,320 --> 00:05:01,680
the linux foundation

141
00:05:01,680 --> 00:05:05,440
and many open source projects are uh

142
00:05:05,440 --> 00:05:07,360
are like promoted and hosted and

143
00:05:07,360 --> 00:05:09,199
incubated by the cloud native

144
00:05:09,199 --> 00:05:10,880
as you can see there are many uh

145
00:05:10,880 --> 00:05:12,880
projects there kubernetes is just one of

146
00:05:12,880 --> 00:05:13,520
them

147
00:05:13,520 --> 00:05:17,120
but prometheus is very famous as well

148
00:05:17,120 --> 00:05:21,199
helm which is a package managed for

149
00:05:21,199 --> 00:05:25,360
kubernetes project at cd and etc so

150
00:05:25,360 --> 00:05:29,120
a lot of uh great projects there

151
00:05:29,120 --> 00:05:31,360
and and when we're talking about cloud

152
00:05:31,360 --> 00:05:33,360
native what does it mean right so

153
00:05:33,360 --> 00:05:35,280
sometimes it's hard to understand the

154
00:05:35,280 --> 00:05:36,320
concept

155
00:05:36,320 --> 00:05:38,960
what does it mean to have a cloud native

156
00:05:38,960 --> 00:05:40,880
application or develop a cloud native

157
00:05:40,880 --> 00:05:42,080
application right

158
00:05:42,080 --> 00:05:45,600
so according to the cncf they uh defined

159
00:05:45,600 --> 00:05:47,360
that cloud native applications need to

160
00:05:47,360 --> 00:05:48,479
have at least this

161
00:05:48,479 --> 00:05:51,039
uh seven characteristics on the left

162
00:05:51,039 --> 00:05:53,440
side so they need to be scalable they

163
00:05:53,440 --> 00:05:54,720
need to be dynamic

164
00:05:54,720 --> 00:05:57,759
resilient loosely coupled as in like

165
00:05:57,759 --> 00:05:59,360
micro services

166
00:05:59,360 --> 00:06:02,240
manageable observable and automated

167
00:06:02,240 --> 00:06:03,919
right so

168
00:06:03,919 --> 00:06:06,960
with those seven characteristics you

169
00:06:06,960 --> 00:06:09,039
have some examples of those

170
00:06:09,039 --> 00:06:10,960
cloud native applications on the right

171
00:06:10,960 --> 00:06:12,319
side which are

172
00:06:12,319 --> 00:06:16,479
containers service meshes microservices

173
00:06:16,479 --> 00:06:18,560
immutable infrastructure and the

174
00:06:18,560 --> 00:06:20,639
declarative apis

175
00:06:20,639 --> 00:06:23,680
so basically that well

176
00:06:23,680 --> 00:06:25,919
what that's the the ecosystem that's

177
00:06:25,919 --> 00:06:27,120
composed of

178
00:06:27,120 --> 00:06:31,360
uh cloud native applications right

179
00:06:31,680 --> 00:06:34,240
okay now now digging into the kubernetes

180
00:06:34,240 --> 00:06:35,680
architecture here

181
00:06:35,680 --> 00:06:39,199
uh we have basically two different

182
00:06:39,199 --> 00:06:41,919
types of nodes on kubernetes we have the

183
00:06:41,919 --> 00:06:44,319
master node and the worker nodes

184
00:06:44,319 --> 00:06:46,960
you can have multiple sets of them like

185
00:06:46,960 --> 00:06:49,199
i can have a cluster of masternodes and

186
00:06:49,199 --> 00:06:51,199
a cluster of worker nodes right so

187
00:06:51,199 --> 00:06:53,599
but you need at least usually you can

188
00:06:53,599 --> 00:06:54,400
have uh

189
00:06:54,400 --> 00:06:57,039
um just one node but it's not

190
00:06:57,039 --> 00:06:59,199
recommended to run everything on

191
00:06:59,199 --> 00:07:01,440
on the master node and everything in all

192
00:07:01,440 --> 00:07:02,960
your applications on the same node right

193
00:07:02,960 --> 00:07:03,759
so

194
00:07:03,759 --> 00:07:06,880
basically you have that structure uh on

195
00:07:06,880 --> 00:07:08,080
a high level

196
00:07:08,080 --> 00:07:11,599
so on the master node here we have

197
00:07:11,599 --> 00:07:14,800
uh five uh five main components

198
00:07:14,800 --> 00:07:17,199
that are the cube api server in the

199
00:07:17,199 --> 00:07:18,000
middle there

200
00:07:18,000 --> 00:07:20,080
which is responsible for exposing and

201
00:07:20,080 --> 00:07:22,400
receiving all the api calls

202
00:07:22,400 --> 00:07:25,039
right you have the xcd which is the

203
00:07:25,039 --> 00:07:26,000
database

204
00:07:26,000 --> 00:07:28,479
where kubernetes stores all the internal

205
00:07:28,479 --> 00:07:31,520
information and all the configurations

206
00:07:31,520 --> 00:07:35,120
uh it's like what nodes are part of the

207
00:07:35,120 --> 00:07:35,840
cluster

208
00:07:35,840 --> 00:07:37,680
what resources are available in the

209
00:07:37,680 --> 00:07:39,759
cluster stuff like that

210
00:07:39,759 --> 00:07:41,759
you have the cube controller manager

211
00:07:41,759 --> 00:07:44,080
right so which which is responsible for

212
00:07:44,080 --> 00:07:47,680
many internal tasks like uh noticing

213
00:07:47,680 --> 00:07:49,680
when a node is not responding

214
00:07:49,680 --> 00:07:51,919
uh maintaining the correct number of

215
00:07:51,919 --> 00:07:54,400
pods that is required for a specific

216
00:07:54,400 --> 00:07:55,199
application

217
00:07:55,199 --> 00:07:58,879
stuff like that and uh

218
00:07:58,879 --> 00:08:01,919
you have the tube scheduler which is the

219
00:08:01,919 --> 00:08:04,160
where is the scheduler that decides

220
00:08:04,160 --> 00:08:06,639
where where to execute the pods so which

221
00:08:06,639 --> 00:08:07,280
node the

222
00:08:07,280 --> 00:08:10,240
which pod is going to go into right and

223
00:08:10,240 --> 00:08:12,800
we're gonna go into the pods uh

224
00:08:12,800 --> 00:08:15,680
definition itself on the next line and

225
00:08:15,680 --> 00:08:17,680
you have the cloud controller manager

226
00:08:17,680 --> 00:08:19,759
that interacts with the cloud providers

227
00:08:19,759 --> 00:08:21,840
uh managing resources

228
00:08:21,840 --> 00:08:24,960
such as load balancers and these volumes

229
00:08:24,960 --> 00:08:27,280
right so this is the master node it's

230
00:08:27,280 --> 00:08:28,080
also known as

231
00:08:28,080 --> 00:08:31,280
the control plane and uh on the worker

232
00:08:31,280 --> 00:08:32,080
nodes

233
00:08:32,080 --> 00:08:35,760
you have uh at least three

234
00:08:35,760 --> 00:08:37,360
three main components which are the

235
00:08:37,360 --> 00:08:39,360
cubelet which is the agent that's

236
00:08:39,360 --> 00:08:41,120
responsible for managing

237
00:08:41,120 --> 00:08:43,760
uh the container runtime executing the

238
00:08:43,760 --> 00:08:45,519
containers when necessary

239
00:08:45,519 --> 00:08:48,160
and collecting uh informations about

240
00:08:48,160 --> 00:08:50,800
execution like telemetry data

241
00:08:50,800 --> 00:08:53,040
uh you have the cube proxy which manages

242
00:08:53,040 --> 00:08:54,959
the communication

243
00:08:54,959 --> 00:08:57,760
and network communication allowing that

244
00:08:57,760 --> 00:08:58,480
different

245
00:08:58,480 --> 00:09:00,240
containers can communicate with each

246
00:09:00,240 --> 00:09:02,880
other and also

247
00:09:02,880 --> 00:09:06,399
responsible for external requests right

248
00:09:06,399 --> 00:09:09,200
and lastly here we have the container

249
00:09:09,200 --> 00:09:10,240
runtime

250
00:09:10,240 --> 00:09:13,519
which uh is the engine that creates and

251
00:09:13,519 --> 00:09:14,480
executes the

252
00:09:14,480 --> 00:09:17,760
containers uh requested by the cubelet

253
00:09:17,760 --> 00:09:20,240
right by default the container runtime

254
00:09:20,240 --> 00:09:22,000
for kubernetes is docker

255
00:09:22,000 --> 00:09:24,560
but you could use other container

256
00:09:24,560 --> 00:09:26,959
runtime engines such as container d

257
00:09:26,959 --> 00:09:30,480
or cryo okay

258
00:09:30,480 --> 00:09:32,080
so this is a high level of the

259
00:09:32,080 --> 00:09:34,080
kubernetes architecture

260
00:09:34,080 --> 00:09:37,120
and and next we're going to see

261
00:09:37,120 --> 00:09:39,600
a little bit of b a little bit about the

262
00:09:39,600 --> 00:09:41,680
objects and and some components

263
00:09:41,680 --> 00:09:44,320
that uh can be created inside your

264
00:09:44,320 --> 00:09:46,800
cluster

265
00:09:47,279 --> 00:09:49,680
so here we have the the cluster node

266
00:09:49,680 --> 00:09:51,120
spots and namespaces

267
00:09:51,120 --> 00:09:54,800
right as i said the pod uh is an object

268
00:09:54,800 --> 00:09:57,360
inside the kubernetes cluster it's the

269
00:09:57,360 --> 00:09:58,160
smallest

270
00:09:58,160 --> 00:10:01,040
unit that you can have in your cluster a

271
00:10:01,040 --> 00:10:01,519
pod

272
00:10:01,519 --> 00:10:05,040
is uh is comprised of

273
00:10:05,040 --> 00:10:08,160
at least one or more containers so it's

274
00:10:08,160 --> 00:10:09,600
not a one-to-one

275
00:10:09,600 --> 00:10:11,920
relationship it's not one container is

276
00:10:11,920 --> 00:10:13,839
one pod has one container only

277
00:10:13,839 --> 00:10:16,240
you can have that but you can have more

278
00:10:16,240 --> 00:10:17,920
right so you can have like a side car

279
00:10:17,920 --> 00:10:18,880
container

280
00:10:18,880 --> 00:10:21,040
collecting log data from that other

281
00:10:21,040 --> 00:10:21,920
container

282
00:10:21,920 --> 00:10:23,760
and you can have even more so it doesn't

283
00:10:23,760 --> 00:10:25,120
matter but a pod

284
00:10:25,120 --> 00:10:26,959
is the smallest unit that you can have

285
00:10:26,959 --> 00:10:29,360
on kubernetes right

286
00:10:29,360 --> 00:10:31,760
you cannot create a container uh without

287
00:10:31,760 --> 00:10:33,680
a pot

288
00:10:33,680 --> 00:10:37,839
so here is just a and inside uh

289
00:10:37,839 --> 00:10:40,560
actually the pods are created either you

290
00:10:40,560 --> 00:10:42,320
can create a pod itself

291
00:10:42,320 --> 00:10:44,720
but usually on a production level a

292
00:10:44,720 --> 00:10:45,519
cluster

293
00:10:45,519 --> 00:10:48,000
you usually want to create a deployment

294
00:10:48,000 --> 00:10:48,640
which is an

295
00:10:48,640 --> 00:10:51,839
object inside kubernetes that creates

296
00:10:51,839 --> 00:10:54,399
the pods and manage themselves managed

297
00:10:54,399 --> 00:10:54,800
like

298
00:10:54,800 --> 00:10:58,560
uh scaling updates and rollbacks

299
00:10:58,560 --> 00:11:01,279
so if you need another docker another

300
00:11:01,279 --> 00:11:01,839
pod

301
00:11:01,839 --> 00:11:04,880
of the same image that you can just edit

302
00:11:04,880 --> 00:11:06,079
the deployment there

303
00:11:06,079 --> 00:11:09,360
and um and the kubernetes will take care

304
00:11:09,360 --> 00:11:11,120
of itself

305
00:11:11,120 --> 00:11:15,200
and also on top of the deployment you

306
00:11:15,200 --> 00:11:16,079
have

307
00:11:16,079 --> 00:11:18,320
logical separations inside the cluster

308
00:11:18,320 --> 00:11:20,000
which are the namespaces

309
00:11:20,000 --> 00:11:23,040
which is basically uh like folders that

310
00:11:23,040 --> 00:11:24,720
you have for each project on your

311
00:11:24,720 --> 00:11:26,880
cluster you can separate them into like

312
00:11:26,880 --> 00:11:27,360
dev

313
00:11:27,360 --> 00:11:29,839
qa and production so there's just a

314
00:11:29,839 --> 00:11:32,320
logical separation it's not a security

315
00:11:32,320 --> 00:11:35,839
a boundary or anything and on top of

316
00:11:35,839 --> 00:11:37,600
that you have the nodes which are the

317
00:11:37,600 --> 00:11:40,160
the virtual machines or the bare metal

318
00:11:40,160 --> 00:11:41,519
servers that

319
00:11:41,519 --> 00:11:44,240
uh you have running uh on your cluster

320
00:11:44,240 --> 00:11:45,519
right

321
00:11:45,519 --> 00:11:48,480
so some of the objects that you are

322
00:11:48,480 --> 00:11:50,079
that's uh that are available for you on

323
00:11:50,079 --> 00:11:51,760
kubernetes are here

324
00:11:51,760 --> 00:11:54,800
uh the api objects so i said

325
00:11:54,800 --> 00:11:57,680
we have the pod we have uh deployments

326
00:11:57,680 --> 00:11:58,880
uh we also have

327
00:11:58,880 --> 00:12:01,680
replicas act demonstrates services and

328
00:12:01,680 --> 00:12:02,639
and and

329
00:12:02,639 --> 00:12:06,160
jobs and cron jobs so each one of those

330
00:12:06,160 --> 00:12:09,120
objects have a special characteristic

331
00:12:09,120 --> 00:12:09,360
and

332
00:12:09,360 --> 00:12:12,399
and special uh usage for them

333
00:12:12,399 --> 00:12:14,399
right we're not gonna go into each one

334
00:12:14,399 --> 00:12:15,440
of those here

335
00:12:15,440 --> 00:12:17,680
on this talk because we don't have time

336
00:12:17,680 --> 00:12:18,720
but basically

337
00:12:18,720 --> 00:12:21,839
uh it's uh as you can see it's a yemo

338
00:12:21,839 --> 00:12:24,079
manifest here on the right it's it's a

339
00:12:24,079 --> 00:12:26,240
basically a manifest that you

340
00:12:26,240 --> 00:12:28,560
can tell the api server to create that

341
00:12:28,560 --> 00:12:29,519
object

342
00:12:29,519 --> 00:12:32,720
on a specific namespace that you want

343
00:12:32,720 --> 00:12:34,800
and it's going to create that for you

344
00:12:34,800 --> 00:12:35,839
right

345
00:12:35,839 --> 00:12:40,000
so they are like uh persistent entities

346
00:12:40,000 --> 00:12:41,839
uh in the kubernetes system

347
00:12:41,839 --> 00:12:44,639
right and and they use uh kubernetes use

348
00:12:44,639 --> 00:12:46,959
these entities to represent the state of

349
00:12:46,959 --> 00:12:48,959
your cluster

350
00:12:48,959 --> 00:12:50,880
and so how do you communicate with

351
00:12:50,880 --> 00:12:52,480
kubernetes how do you manage your

352
00:12:52,480 --> 00:12:54,000
cluster right so

353
00:12:54,000 --> 00:12:57,200
uh kubernetes has a cli tool that allows

354
00:12:57,200 --> 00:12:59,040
you to control kubernetes

355
00:12:59,040 --> 00:13:02,720
uh it's a config it's the cube ctrl or

356
00:13:02,720 --> 00:13:06,160
cube cuddle or cube control

357
00:13:06,160 --> 00:13:08,880
i'm not gonna go into the uh uh

358
00:13:08,880 --> 00:13:10,720
discussions of the definition here some

359
00:13:10,720 --> 00:13:12,560
people prefer one name or the other but

360
00:13:12,560 --> 00:13:16,160
i call i like to call cubectl

361
00:13:16,160 --> 00:13:19,279
uh uh how do you access that so there is

362
00:13:19,279 --> 00:13:20,320
a config file

363
00:13:20,320 --> 00:13:24,000
that's inside your home directory uh

364
00:13:24,000 --> 00:13:26,560
down inside the dot cube folder right

365
00:13:26,560 --> 00:13:27,440
and has the

366
00:13:27,440 --> 00:13:29,760
certificates and the keys that you need

367
00:13:29,760 --> 00:13:31,360
to access your cluster

368
00:13:31,360 --> 00:13:33,760
right so it's very similar to the docker

369
00:13:33,760 --> 00:13:34,399
cli

370
00:13:34,399 --> 00:13:37,839
uh two for docker uh containers so

371
00:13:37,839 --> 00:13:40,079
if you if you have experience um

372
00:13:40,079 --> 00:13:42,720
managing docker containers and and

373
00:13:42,720 --> 00:13:45,279
and uh and has worked with the docker

374
00:13:45,279 --> 00:13:46,399
cli before

375
00:13:46,399 --> 00:13:47,680
so you're not gonna have a lot of

376
00:13:47,680 --> 00:13:49,839
trouble uh it's gonna be easy for you

377
00:13:49,839 --> 00:13:52,240
the syntax is very similar too

378
00:13:52,240 --> 00:13:55,440
so it's easy to understand now going to

379
00:13:55,440 --> 00:13:55,920
the

380
00:13:55,920 --> 00:13:57,839
best practice here right so talking

381
00:13:57,839 --> 00:13:59,360
about the master node

382
00:13:59,360 --> 00:14:03,040
or uh as uh also known as the control

383
00:14:03,040 --> 00:14:04,800
plane right so one of the basic things

384
00:14:04,800 --> 00:14:05,839
that you can do

385
00:14:05,839 --> 00:14:08,560
uh to secure your control plane is to

386
00:14:08,560 --> 00:14:10,399
perform integrity monitoring right for

387
00:14:10,399 --> 00:14:10,959
the most

388
00:14:10,959 --> 00:14:13,760
uh critical kubernetes files right so if

389
00:14:13,760 --> 00:14:15,360
you have access to the control plane

390
00:14:15,360 --> 00:14:16,000
right so you

391
00:14:16,000 --> 00:14:18,560
if you're not running uh your cluster on

392
00:14:18,560 --> 00:14:20,160
a managed services

393
00:14:20,160 --> 00:14:23,680
like eks or or gke

394
00:14:23,680 --> 00:14:25,760
you can do this by monitoring their

395
00:14:25,760 --> 00:14:28,000
services and being alerted immediately

396
00:14:28,000 --> 00:14:31,040
if uh if any changes happen on them

397
00:14:31,040 --> 00:14:31,839
right so

398
00:14:31,839 --> 00:14:34,000
according to the cis kubernetes

399
00:14:34,000 --> 00:14:35,120
benchmark

400
00:14:35,120 --> 00:14:40,320
uh uh version 1.5.1

401
00:14:40,320 --> 00:14:42,800
was released a month a few months ago i

402
00:14:42,800 --> 00:14:43,440
think

403
00:14:43,440 --> 00:14:46,399
uh there is some critical files on your

404
00:14:46,399 --> 00:14:48,480
masternode that are important for you to

405
00:14:48,480 --> 00:14:49,120
manage

406
00:14:49,120 --> 00:14:51,920
and to monitor for their uh ownership

407
00:14:51,920 --> 00:14:53,120
and permissions right

408
00:14:53,120 --> 00:14:55,040
so those files are listed there in this

409
00:14:55,040 --> 00:14:56,320
lines

410
00:14:56,320 --> 00:14:58,639
and so if anything happens to them if

411
00:14:58,639 --> 00:15:00,399
anything uh any permissions

412
00:15:00,399 --> 00:15:03,440
or ownership changes you should be

413
00:15:03,440 --> 00:15:05,519
alerted about that because something

414
00:15:05,519 --> 00:15:08,160
might be going on on your cluster

415
00:15:08,160 --> 00:15:11,279
so when you create a a cluster

416
00:15:11,279 --> 00:15:13,839
using some tool like cube adm2 which is

417
00:15:13,839 --> 00:15:15,199
the most common one

418
00:15:15,199 --> 00:15:18,480
uh you already have four namespaces uh

419
00:15:18,480 --> 00:15:19,440
created for you

420
00:15:19,440 --> 00:15:21,199
right so we mentioned that namespaces

421
00:15:21,199 --> 00:15:24,000
are like uh logical separations between

422
00:15:24,000 --> 00:15:24,240
you

423
00:15:24,240 --> 00:15:27,839
uh your kubernetes uh objects and in

424
00:15:27,839 --> 00:15:29,519
your cluster

425
00:15:29,519 --> 00:15:33,120
excuse me so by default you have four

426
00:15:33,120 --> 00:15:35,680
uh namespaces created for you you have

427
00:15:35,680 --> 00:15:38,320
the default namespace the cubenote lease

428
00:15:38,320 --> 00:15:41,440
the cube public and the cube system the

429
00:15:41,440 --> 00:15:43,519
ma the most important one here

430
00:15:43,519 --> 00:15:46,000
is the cube system namespace which is

431
00:15:46,000 --> 00:15:46,800
the

432
00:15:46,800 --> 00:15:48,880
uh the objects that are created by the

433
00:15:48,880 --> 00:15:51,600
kubernetes system are located there

434
00:15:51,600 --> 00:15:54,720
so the objects that we mentioned

435
00:15:54,720 --> 00:15:58,079
on the architecture slide on the master

436
00:15:58,079 --> 00:15:58,480
node

437
00:15:58,480 --> 00:16:01,120
are all located there so kubernetes uses

438
00:16:01,120 --> 00:16:02,320
kubernetes to

439
00:16:02,320 --> 00:16:04,880
host itself to maintain itself so the

440
00:16:04,880 --> 00:16:06,240
xcd the api

441
00:16:06,240 --> 00:16:08,639
server they're all pods inside your

442
00:16:08,639 --> 00:16:10,000
kubernetes cluster

443
00:16:10,000 --> 00:16:12,240
and and that's a very important thing to

444
00:16:12,240 --> 00:16:13,040
know

445
00:16:13,040 --> 00:16:15,759
because if someone has access to those

446
00:16:15,759 --> 00:16:18,160
pods or has access to that namespace

447
00:16:18,160 --> 00:16:20,959
they can compromise basically compromise

448
00:16:20,959 --> 00:16:22,959
all your cluster right

449
00:16:22,959 --> 00:16:25,120
so those other namespaces are just by

450
00:16:25,120 --> 00:16:26,639
default there if you don't have

451
00:16:26,639 --> 00:16:28,399
uh if you create objects and you don't

452
00:16:28,399 --> 00:16:30,240
specify a namespace they'll be created

453
00:16:30,240 --> 00:16:32,639
on the default namespace

454
00:16:32,639 --> 00:16:35,680
and that's about it for this uh

455
00:16:35,680 --> 00:16:38,560
for the namespaces here um for the cube

456
00:16:38,560 --> 00:16:40,880
api server right so

457
00:16:40,880 --> 00:16:43,440
we mentioned that the api server is one

458
00:16:43,440 --> 00:16:45,040
of the main components on the master

459
00:16:45,040 --> 00:16:45,759
node

460
00:16:45,759 --> 00:16:48,800
and you have to be very careful uh about

461
00:16:48,800 --> 00:16:50,079
not exposing

462
00:16:50,079 --> 00:16:52,240
your api server to the internet right

463
00:16:52,240 --> 00:16:53,600
because uh

464
00:16:53,600 --> 00:16:56,079
if you expose it then anyone can access

465
00:16:56,079 --> 00:16:58,399
it and and might be able to

466
00:16:58,399 --> 00:17:00,800
uh issue requests to the api server if

467
00:17:00,800 --> 00:17:02,320
they have the proper

468
00:17:02,320 --> 00:17:06,319
permissions right so as i said the api

469
00:17:06,319 --> 00:17:07,520
server is exposed

470
00:17:07,520 --> 00:17:10,959
uh to receive api calls

471
00:17:10,959 --> 00:17:13,039
not just from the internal components on

472
00:17:13,039 --> 00:17:15,119
the master node but from the kublet

473
00:17:15,119 --> 00:17:17,119
and and the worker node components as

474
00:17:17,119 --> 00:17:18,559
well

475
00:17:18,559 --> 00:17:20,880
but there are still organizations that

476
00:17:20,880 --> 00:17:23,039
make this mistake of leaving the cube

477
00:17:23,039 --> 00:17:24,000
api servers

478
00:17:24,000 --> 00:17:27,359
exposed publicly to the internet right

479
00:17:27,359 --> 00:17:31,039
so it's the most uh most common entry

480
00:17:31,039 --> 00:17:33,760
point for attackers the same same way as

481
00:17:33,760 --> 00:17:36,160
exposing the docker demon api

482
00:17:36,160 --> 00:17:38,559
so that's a very uh serious issue that

483
00:17:38,559 --> 00:17:39,760
you should not do

484
00:17:39,760 --> 00:17:43,039
right so here you can just issue a core

485
00:17:43,039 --> 00:17:44,559
command to your

486
00:17:44,559 --> 00:17:49,200
api server address on the port uh 66643

487
00:17:49,200 --> 00:17:50,720
which is the default

488
00:17:50,720 --> 00:17:53,760
uh secure port right

489
00:17:53,760 --> 00:17:56,160
it had a previous version it had an also

490
00:17:56,160 --> 00:17:57,200
an insecure port

491
00:17:57,200 --> 00:18:00,559
open by default but not anymore

492
00:18:00,559 --> 00:18:02,880
and one other thing to notice here is

493
00:18:02,880 --> 00:18:04,559
that if you're using

494
00:18:04,559 --> 00:18:07,840
the aws eks clusters to run your

495
00:18:07,840 --> 00:18:09,760
kubernetes workloads

496
00:18:09,760 --> 00:18:12,880
then that cube api server

497
00:18:12,880 --> 00:18:15,280
endpoint is exposed publicly to the

498
00:18:15,280 --> 00:18:16,320
internet

499
00:18:16,320 --> 00:18:19,039
right so that that's something that you

500
00:18:19,039 --> 00:18:20,960
need to be very careful about

501
00:18:20,960 --> 00:18:24,240
and and make sure that you can use like

502
00:18:24,240 --> 00:18:28,400
um security groups or uh

503
00:18:28,400 --> 00:18:32,000
vpn access to block uh public access to

504
00:18:32,000 --> 00:18:32,640
that

505
00:18:32,640 --> 00:18:35,919
to that endpoint so still talking about

506
00:18:35,919 --> 00:18:38,240
the api server right so there's many uh

507
00:18:38,240 --> 00:18:40,000
there are many settings that

508
00:18:40,000 --> 00:18:42,640
uh are enabled there once you start your

509
00:18:42,640 --> 00:18:43,600
cluster

510
00:18:43,600 --> 00:18:45,520
how do you know which settings are

511
00:18:45,520 --> 00:18:49,240
enabled you can issue this command here

512
00:18:49,240 --> 00:18:51,440
ps.ef pipe graph

513
00:18:51,440 --> 00:18:54,160
cube api server on your master node if

514
00:18:54,160 --> 00:18:55,360
you have access to it

515
00:18:55,360 --> 00:18:56,880
and you're going to see all the flags

516
00:18:56,880 --> 00:18:58,480
that are enabled

517
00:18:58,480 --> 00:19:01,600
on the cube api server process right

518
00:19:01,600 --> 00:19:04,799
so according to the cis kubernetes

519
00:19:04,799 --> 00:19:06,799
benchmark

520
00:19:06,799 --> 00:19:09,360
it has 35 security settings that are

521
00:19:09,360 --> 00:19:10,000
recommended

522
00:19:10,000 --> 00:19:15,000
for the api server but as of version

523
00:19:15,000 --> 00:19:17,919
1.18.5 of kubernetes

524
00:19:17,919 --> 00:19:20,799
installed via cube adm only half of

525
00:19:20,799 --> 00:19:22,559
those security settings are enabled by

526
00:19:22,559 --> 00:19:24,240
default so the other half

527
00:19:24,240 --> 00:19:26,799
is not enabled on your cluster and you

528
00:19:26,799 --> 00:19:28,799
should definitely look into that

529
00:19:28,799 --> 00:19:31,039
uh to see if you need that those

530
00:19:31,039 --> 00:19:32,720
settings enabled as well

531
00:19:32,720 --> 00:19:35,679
right so be very careful about that and

532
00:19:35,679 --> 00:19:37,440
make sure you're hard on

533
00:19:37,440 --> 00:19:41,120
your qb api server before you expose it

534
00:19:41,120 --> 00:19:41,760
to

535
00:19:41,760 --> 00:19:44,480
you put it in production right as for

536
00:19:44,480 --> 00:19:44,799
the

537
00:19:44,799 --> 00:19:47,679
r back or row based access control so

538
00:19:47,679 --> 00:19:50,080
this is a a control that's

539
00:19:50,080 --> 00:19:52,320
commonly used on web applications right

540
00:19:52,320 --> 00:19:53,840
controlled uh

541
00:19:53,840 --> 00:19:57,039
access control by rows so you have like

542
00:19:57,039 --> 00:19:57,440
a

543
00:19:57,440 --> 00:19:59,919
regular user you have like a manager

544
00:19:59,919 --> 00:20:00,799
admin

545
00:20:00,799 --> 00:20:03,679
or or something like that many uh most

546
00:20:03,679 --> 00:20:04,880
of the web applications

547
00:20:04,880 --> 00:20:08,000
are are using this type of access

548
00:20:08,000 --> 00:20:09,200
control

549
00:20:09,200 --> 00:20:13,360
excuse me so it allows on kubernetes it

550
00:20:13,360 --> 00:20:15,360
allows you to configure who can access

551
00:20:15,360 --> 00:20:17,280
what in your cluster right

552
00:20:17,280 --> 00:20:19,440
so right now it's enabled by default on

553
00:20:19,440 --> 00:20:21,520
the latest uh kubernetes version

554
00:20:21,520 --> 00:20:23,919
you can see that from this flag uh

555
00:20:23,919 --> 00:20:25,120
authorization mode

556
00:20:25,120 --> 00:20:27,520
our back uh even on on the previous

557
00:20:27,520 --> 00:20:28,880
slide you can see that there

558
00:20:28,880 --> 00:20:32,240
on the image right so how do i check if

559
00:20:32,240 --> 00:20:34,159
my cluster has its enable it's the same

560
00:20:34,159 --> 00:20:36,320
command that we showed before for the

561
00:20:36,320 --> 00:20:37,919
the cube api server

562
00:20:37,919 --> 00:20:40,799
right so the r back is going to allow

563
00:20:40,799 --> 00:20:42,880
you to configure who can access what in

564
00:20:42,880 --> 00:20:44,559
your cluster right so we highly

565
00:20:44,559 --> 00:20:45,440
recommend

566
00:20:45,440 --> 00:20:46,960
if you don't have that enable if you're

567
00:20:46,960 --> 00:20:49,679
using previous versions of kubernetes

568
00:20:49,679 --> 00:20:51,919
that you enable that for the our back

569
00:20:51,919 --> 00:20:53,200
authorization

570
00:20:53,200 --> 00:20:55,840
and you can also restrict any user from

571
00:20:55,840 --> 00:20:58,000
accessing the cube system namespace like

572
00:20:58,000 --> 00:20:58,720
we mentioned

573
00:20:58,720 --> 00:21:01,840
which is very very important namespace

574
00:21:01,840 --> 00:21:03,760
where all the control plane pods are

575
00:21:03,760 --> 00:21:06,400
located right

576
00:21:06,400 --> 00:21:09,440
so on our back here we have at least

577
00:21:09,440 --> 00:21:10,240
four different

578
00:21:10,240 --> 00:21:13,280
objects that can be created uh the first

579
00:21:13,280 --> 00:21:16,159
object here is the row which is this

580
00:21:16,159 --> 00:21:18,320
object that will contain the rules that

581
00:21:18,320 --> 00:21:20,320
represent a set of permissions within a

582
00:21:20,320 --> 00:21:21,360
namespace

583
00:21:21,360 --> 00:21:24,159
right and then we have the row binding

584
00:21:24,159 --> 00:21:26,159
which is the object that simply grants

585
00:21:26,159 --> 00:21:27,200
the permissions

586
00:21:27,200 --> 00:21:29,919
of a row to one or more users right so

587
00:21:29,919 --> 00:21:30,720
you have

588
00:21:30,720 --> 00:21:33,200
on the top uh image there you have the

589
00:21:33,200 --> 00:21:33,840
row

590
00:21:33,840 --> 00:21:36,000
and the namespace level and you have row

591
00:21:36,000 --> 00:21:37,840
binding and you have a group of users

592
00:21:37,840 --> 00:21:39,280
right so it's basically

593
00:21:39,280 --> 00:21:42,320
a set of permissions on a row and row

594
00:21:42,320 --> 00:21:44,400
binding connects them the users and the

595
00:21:44,400 --> 00:21:45,280
row together

596
00:21:45,280 --> 00:21:48,080
right binding them together and the same

597
00:21:48,080 --> 00:21:50,000
thing for the other objects is the

598
00:21:50,000 --> 00:21:52,559
cluster row and the cluster row binding

599
00:21:52,559 --> 00:21:55,520
basically the main difference is that on

600
00:21:55,520 --> 00:21:56,559
the row object

601
00:21:56,559 --> 00:21:59,600
it's uh the permissions are set on a

602
00:21:59,600 --> 00:22:01,200
namespace level

603
00:22:01,200 --> 00:22:03,760
and on the cluster row the permissions

604
00:22:03,760 --> 00:22:05,840
are on the cluster level right so

605
00:22:05,840 --> 00:22:09,120
they are more broad and uh and and

606
00:22:09,120 --> 00:22:10,880
and more permissive right so you have to

607
00:22:10,880 --> 00:22:12,720
be very careful with that

608
00:22:12,720 --> 00:22:14,640
and the cluster row binding works the

609
00:22:14,640 --> 00:22:16,799
same way as the row binding

610
00:22:16,799 --> 00:22:19,440
but the permissions are on the cluster

611
00:22:19,440 --> 00:22:22,640
row for the set of users

612
00:22:22,640 --> 00:22:24,799
the lcd is the main data storage

613
00:22:24,799 --> 00:22:26,640
location for your cluster like we

614
00:22:26,640 --> 00:22:27,440
mentioned before

615
00:22:27,440 --> 00:22:29,280
this means that all your cluster objects

616
00:22:29,280 --> 00:22:30,640
are saved here right so

617
00:22:30,640 --> 00:22:33,760
if someone has access to your lcd and

618
00:22:33,760 --> 00:22:36,080
and permissions to edit objects there

619
00:22:36,080 --> 00:22:37,280
they basically can

620
00:22:37,280 --> 00:22:40,000
uh can change anything on your cluster

621
00:22:40,000 --> 00:22:41,120
so they can

622
00:22:41,120 --> 00:22:43,679
modify stuff and and because kubernetes

623
00:22:43,679 --> 00:22:44,559
keeps looking at

624
00:22:44,559 --> 00:22:48,159
scd for uh updated information that's

625
00:22:48,159 --> 00:22:49,039
there

626
00:22:49,039 --> 00:22:51,840
to reflect that state on your cluster

627
00:22:51,840 --> 00:22:53,600
itself right

628
00:22:53,600 --> 00:22:55,360
so like which nodes are part of the

629
00:22:55,360 --> 00:22:57,600
cluster with resources exist there

630
00:22:57,600 --> 00:23:00,080
everything are saved here and they're

631
00:23:00,080 --> 00:23:01,919
saved in plain text right so that's

632
00:23:01,919 --> 00:23:03,120
something that we're going to discuss

633
00:23:03,120 --> 00:23:06,240
later but we've seen over 200

634
00:23:06,240 --> 00:23:09,760
uh 2600 exposed

635
00:23:09,760 --> 00:23:13,039
xcd services on children this year so be

636
00:23:13,039 --> 00:23:14,400
very careful because

637
00:23:14,400 --> 00:23:17,440
the lcd also has an api that it can

638
00:23:17,440 --> 00:23:19,440
interact with which is usually not

639
00:23:19,440 --> 00:23:21,280
exposed to the internet

640
00:23:21,280 --> 00:23:23,440
but if someone's able or like a

641
00:23:23,440 --> 00:23:24,720
malicious insider

642
00:23:24,720 --> 00:23:28,000
is able to interact with that api

643
00:23:28,000 --> 00:23:31,039
uh he will be able to uh maybe alter

644
00:23:31,039 --> 00:23:32,720
things on that cd

645
00:23:32,720 --> 00:23:36,320
so for edt itself uh the two things that

646
00:23:36,320 --> 00:23:38,480
many things that you need to worry about

647
00:23:38,480 --> 00:23:40,480
is the security in transit the

648
00:23:40,480 --> 00:23:42,320
encryption in transit and encryption at

649
00:23:42,320 --> 00:23:43,520
rest

650
00:23:43,520 --> 00:23:46,400
the encryption in transit is it's set by

651
00:23:46,400 --> 00:23:48,320
default and it's usually taking care for

652
00:23:48,320 --> 00:23:50,320
you when you create your cluster

653
00:23:50,320 --> 00:23:53,039
so you can see that kubernetes creates a

654
00:23:53,039 --> 00:23:55,440
certificate and a key file

655
00:23:55,440 --> 00:23:58,960
for your ad cd so all the communications

656
00:23:58,960 --> 00:24:01,200
between the lcd and the other components

657
00:24:01,200 --> 00:24:03,120
are encrypted

658
00:24:03,120 --> 00:24:04,640
but the encryption at rest the

659
00:24:04,640 --> 00:24:06,799
encryption of the objects itself inside

660
00:24:06,799 --> 00:24:08,159
kubernetes

661
00:24:08,159 --> 00:24:10,559
are not done by default right so by

662
00:24:10,559 --> 00:24:12,080
default as i said there's

663
00:24:12,080 --> 00:24:15,039
stored in plain text and you need to be

664
00:24:15,039 --> 00:24:16,720
very careful with that

665
00:24:16,720 --> 00:24:20,000
uh so to encrypt those informations

666
00:24:20,000 --> 00:24:21,840
inside your xcd

667
00:24:21,840 --> 00:24:23,120
you need to create an encryption

668
00:24:23,120 --> 00:24:25,600
configuration object and apply that to

669
00:24:25,600 --> 00:24:26,960
your ad cd

670
00:24:26,960 --> 00:24:30,559
and then restart it so that it can start

671
00:24:30,559 --> 00:24:32,880
encrypting that information for example

672
00:24:32,880 --> 00:24:33,679
um

673
00:24:33,679 --> 00:24:35,760
secrets information that are sensitive

674
00:24:35,760 --> 00:24:37,279
information in your cluster

675
00:24:37,279 --> 00:24:40,240
you should definitely encrypt that so

676
00:24:40,240 --> 00:24:42,320
talking about network policies right

677
00:24:42,320 --> 00:24:46,240
uh network policies um is a is a

678
00:24:46,240 --> 00:24:48,480
object that's can be created by the

679
00:24:48,480 --> 00:24:50,000
kubernetes itself

680
00:24:50,000 --> 00:24:52,559
so by default in kubernetes all pods can

681
00:24:52,559 --> 00:24:54,320
communicate with any other part in your

682
00:24:54,320 --> 00:24:55,120
cluster

683
00:24:55,120 --> 00:24:58,080
by default and it's like a flat network

684
00:24:58,080 --> 00:24:58,480
right

685
00:24:58,480 --> 00:25:02,000
so even between different name spaces

686
00:25:02,000 --> 00:25:03,840
so that's a big issue right so make sure

687
00:25:03,840 --> 00:25:05,760
you create a proper network policy for

688
00:25:05,760 --> 00:25:06,880
your cluster

689
00:25:06,880 --> 00:25:09,840
some things to to think about is here

690
00:25:09,840 --> 00:25:11,600
does the front-end bot

691
00:25:11,600 --> 00:25:14,240
really need to talk to the the database

692
00:25:14,240 --> 00:25:14,960
pod

693
00:25:14,960 --> 00:25:17,679
right or just the back end part right so

694
00:25:17,679 --> 00:25:18,080
uh

695
00:25:18,080 --> 00:25:20,640
uh depending on on the structure of your

696
00:25:20,640 --> 00:25:22,720
micro services in your application

697
00:25:22,720 --> 00:25:25,360
you need to verify which parts really

698
00:25:25,360 --> 00:25:26,559
need to communicate each

699
00:25:26,559 --> 00:25:30,799
to each other and definitely apply the

700
00:25:30,799 --> 00:25:33,440
least privilege principle here and only

701
00:25:33,440 --> 00:25:34,320
allow

702
00:25:34,320 --> 00:25:36,159
uh the pods that are required to

703
00:25:36,159 --> 00:25:37,679
communicate with each other to

704
00:25:37,679 --> 00:25:40,000
to really do that right so what if an

705
00:25:40,000 --> 00:25:41,760
attacker can access the pods on your

706
00:25:41,760 --> 00:25:43,440
keep system namespace right

707
00:25:43,440 --> 00:25:45,360
since it's a flat network if i

708
00:25:45,360 --> 00:25:46,960
compromise the pod in

709
00:25:46,960 --> 00:25:49,200
one name space um i'm able to

710
00:25:49,200 --> 00:25:50,720
communicate to the other part that's on

711
00:25:50,720 --> 00:25:52,640
the cubesystem namespace and and that's

712
00:25:52,640 --> 00:25:52,960
a

713
00:25:52,960 --> 00:25:54,720
that's a big issue that's a big security

714
00:25:54,720 --> 00:25:56,400
issue here

715
00:25:56,400 --> 00:26:00,080
so on on aws

716
00:26:00,080 --> 00:26:02,559
for eks the the their managed services

717
00:26:02,559 --> 00:26:04,000
for kubernetes

718
00:26:04,000 --> 00:26:07,200
they they don't

719
00:26:07,200 --> 00:26:09,520
uh they have the network plug-in that

720
00:26:09,520 --> 00:26:11,600
don't support network policies

721
00:26:11,600 --> 00:26:13,360
so that's one other thing that you need

722
00:26:13,360 --> 00:26:15,200
to worry about if you're

723
00:26:15,200 --> 00:26:17,600
uh the network plug-in the cni that

724
00:26:17,600 --> 00:26:19,279
you're using like calico

725
00:26:19,279 --> 00:26:23,039
weave flannel or other cni's

726
00:26:23,039 --> 00:26:24,640
if they don't support the network

727
00:26:24,640 --> 00:26:27,120
policies then then even if you create an

728
00:26:27,120 --> 00:26:29,279
object it's not going to work

729
00:26:29,279 --> 00:26:32,159
uh so one thing that aws did is that

730
00:26:32,159 --> 00:26:33,600
they released recently

731
00:26:33,600 --> 00:26:36,400
the security groups for pods so you can

732
00:26:36,400 --> 00:26:37,600
use the

733
00:26:37,600 --> 00:26:40,480
the common uh security groups objects

734
00:26:40,480 --> 00:26:41,679
that you usually do for

735
00:26:41,679 --> 00:26:44,240
uh use for your ec2 instances you can

736
00:26:44,240 --> 00:26:46,960
use for specific pods on your cluster

737
00:26:46,960 --> 00:26:50,559
so it's kind of a network policy there

738
00:26:50,559 --> 00:26:52,720
and uh for the work node when talking

739
00:26:52,720 --> 00:26:54,400
about security as well

740
00:26:54,400 --> 00:26:56,320
same thing applies here right so you

741
00:26:56,320 --> 00:26:57,520
have a few uh

742
00:26:57,520 --> 00:26:59,440
files different files and different

743
00:26:59,440 --> 00:27:01,840
locations uh from the master node but

744
00:27:01,840 --> 00:27:03,039
you need to be

745
00:27:03,039 --> 00:27:06,640
aware of and and and like alerted if any

746
00:27:06,640 --> 00:27:07,520
of those

747
00:27:07,520 --> 00:27:09,200
changes right so here are the

748
00:27:09,200 --> 00:27:11,039
recommended ownership and permissions

749
00:27:11,039 --> 00:27:12,240
according to the

750
00:27:12,240 --> 00:27:15,360
cis benchmarks of those files and

751
00:27:15,360 --> 00:27:19,279
uh you you you should monitor those and

752
00:27:19,279 --> 00:27:20,000
get alerted

753
00:27:20,000 --> 00:27:23,440
if any of those changes on the kubelet

754
00:27:23,440 --> 00:27:25,279
side like we mentioned that the cubelet

755
00:27:25,279 --> 00:27:26,480
is the agent that

756
00:27:26,480 --> 00:27:29,440
runs on each node on your cluster even

757
00:27:29,440 --> 00:27:30,240
on the

758
00:27:30,240 --> 00:27:32,080
master node itself there is a cubelet

759
00:27:32,080 --> 00:27:33,919
running there even though it doesn't

760
00:27:33,919 --> 00:27:34,320
show

761
00:27:34,320 --> 00:27:37,679
on the architecture diagram uh it needs

762
00:27:37,679 --> 00:27:39,039
a cubelet there to

763
00:27:39,039 --> 00:27:41,760
kubernetes needs that to run the pods

764
00:27:41,760 --> 00:27:42,720
that are running on

765
00:27:42,720 --> 00:27:45,600
on your masternode right so the cd api

766
00:27:45,600 --> 00:27:48,960
server and stuff like that so

767
00:27:48,960 --> 00:27:50,799
we make sure that all the containers

768
00:27:50,799 --> 00:27:52,559
running in a pod as we said

769
00:27:52,559 --> 00:27:56,080
before all uh all containers have to run

770
00:27:56,080 --> 00:27:58,080
in a pot the pot is the smallest unit

771
00:27:58,080 --> 00:28:01,120
that you can have on kubernetes

772
00:28:01,120 --> 00:28:03,760
so for the kubelet uh best practices

773
00:28:03,760 --> 00:28:04,480
here

774
00:28:04,480 --> 00:28:06,399
the main uh security settings are

775
00:28:06,399 --> 00:28:08,320
restricting the cubelet permissions

776
00:28:08,320 --> 00:28:10,399
and rotating the cubelet certificates

777
00:28:10,399 --> 00:28:12,080
right so

778
00:28:12,080 --> 00:28:14,399
researching the permissions uh can

779
00:28:14,399 --> 00:28:16,559
mitigate the attackers from reading

780
00:28:16,559 --> 00:28:18,720
uh your public credentials after they

781
00:28:18,720 --> 00:28:20,720
broke out of the container and are able

782
00:28:20,720 --> 00:28:22,640
to do other things in a cluster

783
00:28:22,640 --> 00:28:24,799
right so the credentials of the cubelet

784
00:28:24,799 --> 00:28:26,000
are uh

785
00:28:26,000 --> 00:28:28,399
stored in plain text on on a specific

786
00:28:28,399 --> 00:28:29,520
directory

787
00:28:29,520 --> 00:28:31,840
so if someone compromises one of your

788
00:28:31,840 --> 00:28:32,799
pods and

789
00:28:32,799 --> 00:28:35,600
are able to break out of that container

790
00:28:35,600 --> 00:28:36,240
right

791
00:28:36,240 --> 00:28:38,399
uh they can access that information and

792
00:28:38,399 --> 00:28:39,919
they can impersonate

793
00:28:39,919 --> 00:28:42,000
the cubelet to talk to the api server

794
00:28:42,000 --> 00:28:44,480
using the kubelet credentials so

795
00:28:44,480 --> 00:28:46,480
you can check for that as well and

796
00:28:46,480 --> 00:28:49,440
restrict those permissions

797
00:28:49,440 --> 00:28:51,760
for the pods itself uh you have some

798
00:28:51,760 --> 00:28:52,960
security settings there

799
00:28:52,960 --> 00:28:55,679
are available there for you the main

800
00:28:55,679 --> 00:28:56,960
ones are

801
00:28:56,960 --> 00:28:58,320
those three that we're gonna mention

802
00:28:58,320 --> 00:29:00,880
here uh the first one is the limiting

803
00:29:00,880 --> 00:29:03,039
resources right so you don't want your

804
00:29:03,039 --> 00:29:06,480
uh containers or pods uh using

805
00:29:06,480 --> 00:29:07,600
all the resources that you have

806
00:29:07,600 --> 00:29:09,840
available on your node so you can

807
00:29:09,840 --> 00:29:12,240
restrict the cpu and memory usage just

808
00:29:12,240 --> 00:29:13,840
like what you can do with the docker

809
00:29:13,840 --> 00:29:14,799
containers

810
00:29:14,799 --> 00:29:16,720
right but in kubernetes you have a

811
00:29:16,720 --> 00:29:19,600
object that's called a resource quota

812
00:29:19,600 --> 00:29:22,799
that you can create and restrict

813
00:29:22,799 --> 00:29:26,000
apply that to specific uh pods

814
00:29:26,000 --> 00:29:29,440
to have them restricted with those

815
00:29:29,440 --> 00:29:33,600
uh specific limits and resources right

816
00:29:33,600 --> 00:29:35,679
another thing that you can do is create

817
00:29:35,679 --> 00:29:37,760
and apply a security context

818
00:29:37,760 --> 00:29:42,000
which is a kind of a security settings

819
00:29:42,000 --> 00:29:44,159
that you can do for your pod

820
00:29:44,159 --> 00:29:47,200
some of those are uh listed here for

821
00:29:47,200 --> 00:29:47,760
example

822
00:29:47,760 --> 00:29:50,159
allowed privilege escalation falls right

823
00:29:50,159 --> 00:29:52,000
so you don't want your containers

824
00:29:52,000 --> 00:29:54,960
to be able to exclaim privilege uh and

825
00:29:54,960 --> 00:29:56,720
get more capabilities

826
00:29:56,720 --> 00:29:59,360
right uh read on read only root file

827
00:29:59,360 --> 00:30:00,240
system

828
00:30:00,240 --> 00:30:03,440
so to you should set that to true

829
00:30:03,440 --> 00:30:06,159
because you don't want your root file

830
00:30:06,159 --> 00:30:07,520
system of your

831
00:30:07,520 --> 00:30:10,080
containers to be right writable right so

832
00:30:10,080 --> 00:30:11,520
if someone can write there and then

833
00:30:11,520 --> 00:30:14,960
they can modify it and that's an issue

834
00:30:14,960 --> 00:30:18,240
excuse me and runs as

835
00:30:18,240 --> 00:30:21,600
non-root so i said to true because you

836
00:30:21,600 --> 00:30:23,039
don't want your paw

837
00:30:23,039 --> 00:30:25,279
your pods or containers running as the

838
00:30:25,279 --> 00:30:26,159
root user

839
00:30:26,159 --> 00:30:28,320
right because if someone compromises

840
00:30:28,320 --> 00:30:29,200
that

841
00:30:29,200 --> 00:30:31,279
basically it's easier for them to break

842
00:30:31,279 --> 00:30:33,440
out of the container

843
00:30:33,440 --> 00:30:35,120
the last thing that you have for the

844
00:30:35,120 --> 00:30:36,799
pods secured settings

845
00:30:36,799 --> 00:30:40,320
is using the secomp armor or an

846
00:30:40,320 --> 00:30:44,159
sc linux uh security features which are

847
00:30:44,159 --> 00:30:47,520
the kernel linux kernel features there

848
00:30:47,520 --> 00:30:50,320
the second features the process system

849
00:30:50,320 --> 00:30:52,000
calls the app armor

850
00:30:52,000 --> 00:30:53,919
uses the program profiles to restrict

851
00:30:53,919 --> 00:30:56,880
the capabilities of individual programs

852
00:30:56,880 --> 00:30:59,840
and the sc linux applies some security

853
00:30:59,840 --> 00:31:02,000
labels to objects and evaluates all

854
00:31:02,000 --> 00:31:03,039
security relevant

855
00:31:03,039 --> 00:31:05,519
interactions via the security policy so

856
00:31:05,519 --> 00:31:07,120
all those can be applied

857
00:31:07,120 --> 00:31:09,360
directly on uh directly on the security

858
00:31:09,360 --> 00:31:10,320
context

859
00:31:10,320 --> 00:31:14,000
right or you could use something like uh

860
00:31:14,000 --> 00:31:17,039
pod security policy which is here the

861
00:31:17,039 --> 00:31:18,480
next uh

862
00:31:18,480 --> 00:31:20,320
the next thing we're gonna talk about

863
00:31:20,320 --> 00:31:22,080
and it's like an object

864
00:31:22,080 --> 00:31:24,399
that you have and you have all those

865
00:31:24,399 --> 00:31:26,320
security settings and you apply that to

866
00:31:26,320 --> 00:31:27,679
your cluster level

867
00:31:27,679 --> 00:31:30,799
to your cluster and it and enforces

868
00:31:30,799 --> 00:31:32,640
those settings on the cluster level

869
00:31:32,640 --> 00:31:33,919
right so

870
00:31:33,919 --> 00:31:36,000
it works with an object and it's also an

871
00:31:36,000 --> 00:31:37,519
admission controller

872
00:31:37,519 --> 00:31:40,399
that you have to enable on your cube api

873
00:31:40,399 --> 00:31:41,840
server because it's not enabled by

874
00:31:41,840 --> 00:31:42,799
default

875
00:31:42,799 --> 00:31:45,440
and so then you can apply that and make

876
00:31:45,440 --> 00:31:47,360
sure that all the pods that are deployed

877
00:31:47,360 --> 00:31:48,320
on your cluster

878
00:31:48,320 --> 00:31:52,000
they must have those security settings

879
00:31:52,000 --> 00:31:54,240
and lastly but not least uh the audit

880
00:31:54,240 --> 00:31:56,080
logs right so we mentioned that

881
00:31:56,080 --> 00:31:59,440
logs are very important it helps you uh

882
00:31:59,440 --> 00:32:02,240
to troubleshooting and identify some

883
00:32:02,240 --> 00:32:03,679
security issues

884
00:32:03,679 --> 00:32:05,600
the audit logs and kubernetes they are

885
00:32:05,600 --> 00:32:07,279
not enabled by the phone

886
00:32:07,279 --> 00:32:09,600
so to enable them you basically need two

887
00:32:09,600 --> 00:32:11,120
things you need a log path

888
00:32:11,120 --> 00:32:14,399
and a policy file and you set those

889
00:32:14,399 --> 00:32:17,039
on the cube api server configuration

890
00:32:17,039 --> 00:32:17,760
right

891
00:32:17,760 --> 00:32:20,880
so the log path is basically where your

892
00:32:20,880 --> 00:32:22,720
file log is going to be stored you can

893
00:32:22,720 --> 00:32:23,840
store locally

894
00:32:23,840 --> 00:32:26,320
on your uh on your masternode although

895
00:32:26,320 --> 00:32:28,640
that's not recommended and your policy

896
00:32:28,640 --> 00:32:29,919
file is going to tell you

897
00:32:29,919 --> 00:32:32,240
like what is going to be logged right so

898
00:32:32,240 --> 00:32:34,080
what what kind of data or what

899
00:32:34,080 --> 00:32:37,360
log level that you want on that cluster

900
00:32:37,360 --> 00:32:41,600
right so for the audit policy you have

901
00:32:41,600 --> 00:32:42,080
some

902
00:32:42,080 --> 00:32:44,640
four you have four login levels you have

903
00:32:44,640 --> 00:32:46,640
the non which doesn't log anything

904
00:32:46,640 --> 00:32:48,880
you have the metadata which is uh only

905
00:32:48,880 --> 00:32:50,480
logs request metadata

906
00:32:50,480 --> 00:32:53,519
not the risk request or response body

907
00:32:53,519 --> 00:32:56,559
you have the request audit logs

908
00:32:56,559 --> 00:32:59,519
which request logs the metadata and the

909
00:32:59,519 --> 00:33:02,320
request body but not the response

910
00:33:02,320 --> 00:33:05,440
and you have the request and response uh

911
00:33:05,440 --> 00:33:07,200
logging level which logs the event

912
00:33:07,200 --> 00:33:09,519
metadata the request and response body

913
00:33:09,519 --> 00:33:12,480
so you can see those are incremental and

914
00:33:12,480 --> 00:33:13,600
also

915
00:33:13,600 --> 00:33:15,840
because of that they are you they're

916
00:33:15,840 --> 00:33:18,159
increasing size as well because of your

917
00:33:18,159 --> 00:33:21,200
uh the amount of data that they store so

918
00:33:21,200 --> 00:33:23,840
you should have that enabled on your uh

919
00:33:23,840 --> 00:33:25,120
on your cluster

920
00:33:25,120 --> 00:33:27,440
the policy that's uh what it's going to

921
00:33:27,440 --> 00:33:28,960
be logged that's up to you

922
00:33:28,960 --> 00:33:32,080
but you should at least have some

923
00:33:32,080 --> 00:33:34,559
some stuff that require that logs the

924
00:33:34,559 --> 00:33:36,720
request data some request information

925
00:33:36,720 --> 00:33:39,120
there as well

926
00:33:39,120 --> 00:33:41,440
on eks the audit logs are very easy to

927
00:33:41,440 --> 00:33:42,480
enable

928
00:33:42,480 --> 00:33:45,279
right so you can uh just go to your

929
00:33:45,279 --> 00:33:46,960
control plane and there is a tab there

930
00:33:46,960 --> 00:33:47,279
uh

931
00:33:47,279 --> 00:33:50,320
called logging and you just click a

932
00:33:50,320 --> 00:33:51,120
button so

933
00:33:51,120 --> 00:33:54,000
like a switch turn on switch to enable

934
00:33:54,000 --> 00:33:55,760
the logs the audit logs

935
00:33:55,760 --> 00:33:58,159
they have other logs as well there the

936
00:33:58,159 --> 00:33:59,200
api server

937
00:33:59,200 --> 00:34:01,519
authenticator controller manager and

938
00:34:01,519 --> 00:34:02,399
scheduler

939
00:34:02,399 --> 00:34:04,399
none of those are enabled by default so

940
00:34:04,399 --> 00:34:05,679
you should enable those

941
00:34:05,679 --> 00:34:08,480
and once you do all those logs go to

942
00:34:08,480 --> 00:34:09,440
cloudwatch

943
00:34:09,440 --> 00:34:12,800
and you can see those logs there

944
00:34:12,800 --> 00:34:14,719
so to summarize everything that we

945
00:34:14,719 --> 00:34:17,199
talked about here i know it was

946
00:34:17,199 --> 00:34:19,520
kind of quick but we have a short amount

947
00:34:19,520 --> 00:34:20,399
of time

948
00:34:20,399 --> 00:34:23,359
so basically uh remember the basics as

949
00:34:23,359 --> 00:34:23,679
well

950
00:34:23,679 --> 00:34:25,918
so for your kubernetes uh make sure you

951
00:34:25,918 --> 00:34:27,679
update your environment version early

952
00:34:27,679 --> 00:34:28,399
and often

953
00:34:28,399 --> 00:34:30,639
right so kubernetes releases new

954
00:34:30,639 --> 00:34:31,599
versions every

955
00:34:31,599 --> 00:34:35,040
uh every three months right so

956
00:34:35,040 --> 00:34:36,639
there's a new version there so make sure

957
00:34:36,639 --> 00:34:38,399
that you're up to date your clusters are

958
00:34:38,399 --> 00:34:39,760
up to date as well because

959
00:34:39,760 --> 00:34:42,239
not just new features are available but

960
00:34:42,239 --> 00:34:44,000
uh bug fixes and other

961
00:34:44,000 --> 00:34:47,599
uh security settings are uh

962
00:34:47,599 --> 00:34:50,159
are bundled into this new versions right

963
00:34:50,159 --> 00:34:51,119
so

964
00:34:51,119 --> 00:34:53,679
uh make sure you do that don't use your

965
00:34:53,679 --> 00:34:54,960
cluster admin for

966
00:34:54,960 --> 00:34:57,680
uh for your daily work so treat you like

967
00:34:57,680 --> 00:34:58,640
a root admin

968
00:34:58,640 --> 00:35:01,520
right so because anyone that has a

969
00:35:01,520 --> 00:35:03,040
cluster admin permissions on your

970
00:35:03,040 --> 00:35:05,119
cluster can do basically anything and

971
00:35:05,119 --> 00:35:06,240
make it make it

972
00:35:06,240 --> 00:35:08,560
easy for them to break out of your

973
00:35:08,560 --> 00:35:11,760
cluster and access your nodes

974
00:35:11,760 --> 00:35:14,880
if you can if you're not bound to um

975
00:35:14,880 --> 00:35:18,160
any uh legal uh

976
00:35:18,160 --> 00:35:20,880
policy or compliance requirements you

977
00:35:20,880 --> 00:35:21,280
should

978
00:35:21,280 --> 00:35:24,800
use some managed services such as uh the

979
00:35:24,800 --> 00:35:28,079
aks eks or gte which is

980
00:35:28,079 --> 00:35:31,440
basically the managed services for azure

981
00:35:31,440 --> 00:35:34,960
aws and google cloud respectively

982
00:35:34,960 --> 00:35:38,079
and because they they handle the control

983
00:35:38,079 --> 00:35:39,280
plan for you

984
00:35:39,280 --> 00:35:40,960
so you don't need you don't have access

985
00:35:40,960 --> 00:35:42,400
to it and you don't need to worry about

986
00:35:42,400 --> 00:35:44,079
the security settings there

987
00:35:44,079 --> 00:35:46,720
so it's better and usually some of them

988
00:35:46,720 --> 00:35:48,720
don't even charge you for the control

989
00:35:48,720 --> 00:35:50,720
plane they only charge you for the

990
00:35:50,720 --> 00:35:54,000
the worker nodes that you have right and

991
00:35:54,000 --> 00:35:56,000
also check out the cis kubernetes

992
00:35:56,000 --> 00:35:57,119
benchmark has a

993
00:35:57,119 --> 00:35:59,680
has a lot of information there about the

994
00:35:59,680 --> 00:36:02,000
the best practices and security settings

995
00:36:02,000 --> 00:36:04,320
uh it's it seems like a long document

996
00:36:04,320 --> 00:36:05,200
but it's just

997
00:36:05,200 --> 00:36:07,520
a very detailed and and with the

998
00:36:07,520 --> 00:36:08,240
commands

999
00:36:08,240 --> 00:36:11,280
on specific commands to check that if

1000
00:36:11,280 --> 00:36:13,280
that setting is enabled and how to

1001
00:36:13,280 --> 00:36:15,440
set that setting if it's not enabled but

1002
00:36:15,440 --> 00:36:17,359
it's easy to read

1003
00:36:17,359 --> 00:36:20,800
so and before we finish i just want to

1004
00:36:20,800 --> 00:36:21,760
point out

1005
00:36:21,760 --> 00:36:25,040
uh two great materials that you should

1006
00:36:25,040 --> 00:36:25,680
look at

1007
00:36:25,680 --> 00:36:28,640
if you're looking to just study more

1008
00:36:28,640 --> 00:36:30,480
kubernetes security and learning and

1009
00:36:30,480 --> 00:36:33,200
going to like a deep dive level

1010
00:36:33,200 --> 00:36:37,040
uh the this is the kubernetes threat

1011
00:36:37,040 --> 00:36:39,040
matrix that was released by microsoft

1012
00:36:39,040 --> 00:36:40,000
earlier this year in

1013
00:36:40,000 --> 00:36:43,280
april right so the microsoft security

1014
00:36:43,280 --> 00:36:43,839
team on

1015
00:36:43,839 --> 00:36:46,720
i think from azure they released this uh

1016
00:36:46,720 --> 00:36:48,560
matrix based out of the

1017
00:36:48,560 --> 00:36:50,800
miter attack framework it's not an

1018
00:36:50,800 --> 00:36:52,320
official matrix for

1019
00:36:52,320 --> 00:36:54,320
for the mighty attack but it's very

1020
00:36:54,320 --> 00:36:56,800
helpful that shows you based on each

1021
00:36:56,800 --> 00:36:59,119
uh tactics and techniques which

1022
00:36:59,119 --> 00:37:00,720
techniques are used

1023
00:37:00,720 --> 00:37:04,000
uh excuse me by the attackers and by

1024
00:37:04,000 --> 00:37:04,800
criminals

1025
00:37:04,800 --> 00:37:06,880
to compromise your cluster that can be

1026
00:37:06,880 --> 00:37:08,720
used right it's not a complete

1027
00:37:08,720 --> 00:37:12,640
it has it has uh uh some missing

1028
00:37:12,640 --> 00:37:14,480
techniques and missing step but it's a

1029
00:37:14,480 --> 00:37:14,880
great

1030
00:37:14,880 --> 00:37:17,599
uh great start for you to start

1031
00:37:17,599 --> 00:37:19,839
understanding and protecting

1032
00:37:19,839 --> 00:37:23,440
your cluster better and to finalize

1033
00:37:23,440 --> 00:37:26,079
this is the github project that i

1034
00:37:26,079 --> 00:37:29,119
created the awesome arcade security list

1035
00:37:29,119 --> 00:37:31,280
uh this is the link there on the slides

1036
00:37:31,280 --> 00:37:32,560
it's a

1037
00:37:32,560 --> 00:37:35,119
free and open source project basically

1038
00:37:35,119 --> 00:37:36,640
it's just a bunch of

1039
00:37:36,640 --> 00:37:39,680
links and information on

1040
00:37:39,680 --> 00:37:43,040
videos presentations tools and other

1041
00:37:43,040 --> 00:37:45,040
repositories that i found

1042
00:37:45,040 --> 00:37:47,920
while studying kubernetes so it has some

1043
00:37:47,920 --> 00:37:48,560
information

1044
00:37:48,560 --> 00:37:52,160
on basic kubernetes and and

1045
00:37:52,160 --> 00:37:55,200
how it works and then we're going to

1046
00:37:55,200 --> 00:37:57,040
deep dive into the security stuff

1047
00:37:57,040 --> 00:37:58,800
showing some tools and some great

1048
00:37:58,800 --> 00:38:00,160
presentations of

1049
00:38:00,160 --> 00:38:02,720
other speakers so it's a great way to

1050
00:38:02,720 --> 00:38:04,960
learn so feel free to

1051
00:38:04,960 --> 00:38:09,040
star and fork that project on github

1052
00:38:09,040 --> 00:38:11,200
and if you have any other links or any

1053
00:38:11,200 --> 00:38:12,960
other information that you like to add

1054
00:38:12,960 --> 00:38:15,359
you can easily submit a pr and i'll take

1055
00:38:15,359 --> 00:38:16,800
a look at it

1056
00:38:16,800 --> 00:38:18,880
so that's it for today guys i hope you

1057
00:38:18,880 --> 00:38:20,640
enjoyed this talk and if you have any

1058
00:38:20,640 --> 00:38:21,599
questions

1059
00:38:21,599 --> 00:38:24,800
feel free to ask them in the q a session

1060
00:38:24,800 --> 00:38:30,240
later after this talk thank you

