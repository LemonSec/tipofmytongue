1
00:00:00,880 --> 00:00:03,360
hello everyone and thank you for joining

2
00:00:03,360 --> 00:00:05,600
uh welcome to my session about uh

3
00:00:05,600 --> 00:00:07,759
fantastic packers in malware

4
00:00:07,759 --> 00:00:11,040
uh and where to find them uh so

5
00:00:11,040 --> 00:00:13,360
this session will be kind of a hybrid

6
00:00:13,360 --> 00:00:14,320
session

7
00:00:14,320 --> 00:00:16,320
uh some some part of it will be an

8
00:00:16,320 --> 00:00:18,320
actual lecture and some part of it will

9
00:00:18,320 --> 00:00:18,800
be

10
00:00:18,800 --> 00:00:22,160
uh hands-on training a couple of words

11
00:00:22,160 --> 00:00:23,279
about myself

12
00:00:23,279 --> 00:00:25,439
uh my name is ellie i'm lead threat

13
00:00:25,439 --> 00:00:28,160
hunter in cyberism

14
00:00:28,160 --> 00:00:30,160
i'm in the cyber security industry for

15
00:00:30,160 --> 00:00:31,760
several years now

16
00:00:31,760 --> 00:00:35,120
started started as a security analyst

17
00:00:35,120 --> 00:00:38,000
uh threat hunter and now i'm leading a

18
00:00:38,000 --> 00:00:39,600
threat hunting team

19
00:00:39,600 --> 00:00:42,399
uh in recent years i published several

20
00:00:42,399 --> 00:00:44,480
several researchers mainly

21
00:00:44,480 --> 00:00:49,039
on cyber crime and malware research

22
00:00:49,039 --> 00:00:51,440
i also have a computer science degree

23
00:00:51,440 --> 00:00:52,719
and several

24
00:00:52,719 --> 00:00:56,800
reverse engineering certifications

25
00:00:57,440 --> 00:01:00,399
so what will be the agenda of of this

26
00:01:00,399 --> 00:01:01,120
session

27
00:01:01,120 --> 00:01:03,760
so first we will present what is a

28
00:01:03,760 --> 00:01:04,720
packer

29
00:01:04,720 --> 00:01:08,479
why malware want to use it we will also

30
00:01:08,479 --> 00:01:09,280
discuss what

31
00:01:09,280 --> 00:01:12,479
is a custom packer and how we

32
00:01:12,479 --> 00:01:17,360
identify customer packers i will also

33
00:01:17,360 --> 00:01:19,280
present several case studies of the last

34
00:01:19,280 --> 00:01:20,799
decade and

35
00:01:20,799 --> 00:01:22,960
i will also discuss about what an

36
00:01:22,960 --> 00:01:24,640
additional

37
00:01:24,640 --> 00:01:28,479
information we can get from it

38
00:01:28,479 --> 00:01:30,640
so to get things straight what is a

39
00:01:30,640 --> 00:01:31,759
packer so

40
00:01:31,759 --> 00:01:34,400
basically a packer is a software that

41
00:01:34,400 --> 00:01:35,360
compress or

42
00:01:35,360 --> 00:01:38,560
shrink an executable or a payload

43
00:01:38,560 --> 00:01:42,000
so it's doing it in order to

44
00:01:42,000 --> 00:01:45,119
obfuscate the content of this real

45
00:01:45,119 --> 00:01:49,200
executable hide the real data or code

46
00:01:49,200 --> 00:01:52,880
um avoid detection by anti-virus

47
00:01:52,880 --> 00:01:54,079
companies and

48
00:01:54,079 --> 00:01:56,640
slow down researchers or malware

49
00:01:56,640 --> 00:01:57,360
analysts

50
00:01:57,360 --> 00:02:00,399
trying to investigate this file

51
00:02:00,399 --> 00:02:04,079
uh so how packers work so most of

52
00:02:04,079 --> 00:02:07,040
the packers are working a similar way

53
00:02:07,040 --> 00:02:08,160
they take an in

54
00:02:08,160 --> 00:02:12,239
as an input an executable or the payload

55
00:02:12,239 --> 00:02:15,040
and in return the output will be the new

56
00:02:15,040 --> 00:02:15,680
packed

57
00:02:15,680 --> 00:02:18,640
uh executable which will have a new

58
00:02:18,640 --> 00:02:20,879
headers and a new section

59
00:02:20,879 --> 00:02:24,800
um the packer also changed the entry

60
00:02:24,800 --> 00:02:25,280
point

61
00:02:25,280 --> 00:02:29,840
of of this exec executable to its own

62
00:02:29,840 --> 00:02:33,599
entry point of the execute executable

63
00:02:33,599 --> 00:02:36,080
and obviously during runtime the packer

64
00:02:36,080 --> 00:02:37,920
is also responsible

65
00:02:37,920 --> 00:02:41,599
for resolving the dependencies and also

66
00:02:41,599 --> 00:02:43,840
to change the entry point and return it

67
00:02:43,840 --> 00:02:44,800
to the original

68
00:02:44,800 --> 00:02:50,160
entry point of the executable it packed

69
00:02:50,160 --> 00:02:52,640
this is just an image for demonstration

70
00:02:52,640 --> 00:02:53,760
we can see

71
00:02:53,760 --> 00:02:55,680
the malware payload or the original

72
00:02:55,680 --> 00:02:57,599
executable and after

73
00:02:57,599 --> 00:03:00,800
uh the the packer work uh

74
00:03:00,800 --> 00:03:04,400
it's been packed uh

75
00:03:04,400 --> 00:03:08,239
by the packer so there are

76
00:03:08,239 --> 00:03:10,959
several different type of kinds of

77
00:03:10,959 --> 00:03:11,760
packers

78
00:03:11,760 --> 00:03:15,200
uh some of them are free or open source

79
00:03:15,200 --> 00:03:19,519
open source such as rar or upx

80
00:03:19,519 --> 00:03:22,720
some of them are commercial packers

81
00:03:22,720 --> 00:03:26,239
that are used to conceal and protect

82
00:03:26,239 --> 00:03:30,159
licensing system of product

83
00:03:30,159 --> 00:03:32,959
such as stamida or vm protect some of

84
00:03:32,959 --> 00:03:34,159
them also have

85
00:03:34,159 --> 00:03:38,640
anti-analysis capabilities svm protect

86
00:03:38,640 --> 00:03:42,319
and there are costume packers

87
00:03:42,319 --> 00:03:46,159
which are the packers a packers that

88
00:03:46,159 --> 00:03:49,280
are been crafted or been written by the

89
00:03:49,280 --> 00:03:51,440
attacker

90
00:03:51,440 --> 00:03:53,599
and that really leads us to the main

91
00:03:53,599 --> 00:03:54,480
topic

92
00:03:54,480 --> 00:03:57,680
of this session uh so

93
00:03:57,680 --> 00:04:00,159
what is a custom packer so a costume

94
00:04:00,159 --> 00:04:00,720
packer

95
00:04:00,720 --> 00:04:03,599
also known as scripter is basically

96
00:04:03,599 --> 00:04:04,560
packers that

97
00:04:04,560 --> 00:04:06,959
have been written by the threat actors

98
00:04:06,959 --> 00:04:08,640
by the attackers

99
00:04:08,640 --> 00:04:11,200
so basically in other words every

100
00:04:11,200 --> 00:04:13,519
unpacking or decrypting mechanism or

101
00:04:13,519 --> 00:04:14,319
decrypting

102
00:04:14,319 --> 00:04:17,358
uh executable

103
00:04:17,358 --> 00:04:21,279
that's been written by an attacker to

104
00:04:21,279 --> 00:04:21,918
hide an

105
00:04:21,918 --> 00:04:24,799
actual payload

106
00:04:25,759 --> 00:04:28,639
so really the question is why attackers

107
00:04:28,639 --> 00:04:30,400
want to waste their time

108
00:04:30,400 --> 00:04:33,440
to create their own packer

109
00:04:33,440 --> 00:04:35,680
which is actually a product it's a code

110
00:04:35,680 --> 00:04:37,120
basically

111
00:04:37,120 --> 00:04:39,360
if there are already an open source

112
00:04:39,360 --> 00:04:40,960
alternatives

113
00:04:40,960 --> 00:04:44,479
so first of all it gives them better

114
00:04:44,479 --> 00:04:45,199
control

115
00:04:45,199 --> 00:04:48,560
because as a programmers uh if they

116
00:04:48,560 --> 00:04:49,759
wrote the code they

117
00:04:49,759 --> 00:04:53,600
know really how the code works and

118
00:04:53,600 --> 00:04:57,040
they give them it give them really

119
00:04:57,040 --> 00:04:58,960
the best understanding about the

120
00:04:58,960 --> 00:05:01,600
unpacking mechanism

121
00:05:01,600 --> 00:05:04,080
and if they do have a great

122
00:05:04,080 --> 00:05:05,919
understanding of this mechanism and if

123
00:05:05,919 --> 00:05:07,520
they wrote the code they can improve

124
00:05:07,520 --> 00:05:09,039
that

125
00:05:09,039 --> 00:05:12,479
so for example they can create a

126
00:05:12,479 --> 00:05:15,520
a packer upload it to sites such as

127
00:05:15,520 --> 00:05:16,560
virustotal

128
00:05:16,560 --> 00:05:19,759
see what are the detection rate and then

129
00:05:19,759 --> 00:05:22,320
tweak it and see again what are the

130
00:05:22,320 --> 00:05:24,000
detection rate

131
00:05:24,000 --> 00:05:26,000
and obviously they can add whatever they

132
00:05:26,000 --> 00:05:27,520
want and some of it

133
00:05:27,520 --> 00:05:32,000
are anti-analysis capabilities

134
00:05:32,400 --> 00:05:36,080
so really if if the attackers

135
00:05:36,080 --> 00:05:39,280
improving their so-called product

136
00:05:39,280 --> 00:05:42,720
how we as the defenders can catch up

137
00:05:42,720 --> 00:05:46,400
so the majority of these custom packers

138
00:05:46,400 --> 00:05:47,759
or crypters

139
00:05:47,759 --> 00:05:51,199
actually share

140
00:05:51,199 --> 00:05:54,160
a lot of similarities or concept uh in

141
00:05:54,160 --> 00:05:54,960
them

142
00:05:54,960 --> 00:05:58,720
and if we as a defenders will understand

143
00:05:58,720 --> 00:06:02,560
those concepts and will anticipate them

144
00:06:02,560 --> 00:06:04,960
uh we can actually overcome most of

145
00:06:04,960 --> 00:06:06,160
these new packers

146
00:06:06,160 --> 00:06:09,680
at least just by understanding

147
00:06:09,680 --> 00:06:13,600
understanding what needs to happen

148
00:06:13,600 --> 00:06:17,520
so we can search for it for example

149
00:06:17,520 --> 00:06:20,400
so the first case study that i will

150
00:06:20,400 --> 00:06:21,120
present

151
00:06:21,120 --> 00:06:24,560
is the get to downloader so this malware

152
00:06:24,560 --> 00:06:25,759
was first emerged

153
00:06:25,759 --> 00:06:30,840
in 2019 and associated with

154
00:06:30,840 --> 00:06:34,960
ta-505 threat actors it's been

155
00:06:34,960 --> 00:06:37,440
known to deliver several malware but the

156
00:06:37,440 --> 00:06:38,639
most notably

157
00:06:38,639 --> 00:06:43,039
obviously in recent year is the sdb bot

158
00:06:43,039 --> 00:06:46,400
so for this first case study

159
00:06:46,400 --> 00:06:49,599
i will present it dynamically just to

160
00:06:49,599 --> 00:06:54,160
to show an actual hands-on uh

161
00:06:54,160 --> 00:06:56,960
packer unpacking mechanism and what are

162
00:06:56,960 --> 00:06:57,919
the concept

163
00:06:57,919 --> 00:07:03,360
uh we would like to to to search for so

164
00:07:03,360 --> 00:07:08,080
i will go to my virtual machine

165
00:07:08,960 --> 00:07:11,680
and i will put the get to downloader

166
00:07:11,680 --> 00:07:12,479
binary

167
00:07:12,479 --> 00:07:15,599
into my debugger

168
00:07:15,840 --> 00:07:19,199
awesome now the first thing that this uh

169
00:07:19,199 --> 00:07:21,759
malware do is to allocate new memory as

170
00:07:21,759 --> 00:07:23,440
actually

171
00:07:23,440 --> 00:07:26,560
a lot of malware do so because i know it

172
00:07:26,560 --> 00:07:27,919
i will

173
00:07:27,919 --> 00:07:31,039
search for allocations of new memory

174
00:07:31,039 --> 00:07:33,680
so in order to do that i will write set

175
00:07:33,680 --> 00:07:35,360
bpx

176
00:07:35,360 --> 00:07:38,479
virtual alloc

177
00:07:38,479 --> 00:07:40,800
awesome now i have a breakpoint on every

178
00:07:40,800 --> 00:07:42,240
newly allocated memory that

179
00:07:42,240 --> 00:07:45,520
will be allocated by the malware and i

180
00:07:45,520 --> 00:07:47,120
will just track it

181
00:07:47,120 --> 00:07:50,400
now because i know this malware i know

182
00:07:50,400 --> 00:07:51,919
that this malware

183
00:07:51,919 --> 00:07:54,878
this version at least

184
00:07:55,360 --> 00:07:57,599
allocates three times but i will only

185
00:07:57,599 --> 00:07:59,199
focus on the last

186
00:07:59,199 --> 00:08:03,680
two times so i will hit run

187
00:08:03,680 --> 00:08:06,879
one time a virtual analog has been hit

188
00:08:06,879 --> 00:08:10,319
i will click again second time

189
00:08:10,319 --> 00:08:14,720
i will run to the user code

190
00:08:15,120 --> 00:08:19,039
and will observe the newly allocated

191
00:08:19,039 --> 00:08:19,919
memory

192
00:08:19,919 --> 00:08:22,960
which is stored in the register

193
00:08:22,960 --> 00:08:26,319
eax now just to to track it

194
00:08:26,319 --> 00:08:28,240
uh in the most efficient way i would

195
00:08:28,240 --> 00:08:29,759
just set a breakpoint

196
00:08:29,759 --> 00:08:32,240
on every time that this newly allocated

197
00:08:32,240 --> 00:08:33,279
memory

198
00:08:33,279 --> 00:08:36,559
um will be filled or something will

199
00:08:36,559 --> 00:08:37,279
write

200
00:08:37,279 --> 00:08:40,159
stuff into it so to do it i will right

201
00:08:40,159 --> 00:08:40,958
click

202
00:08:40,958 --> 00:08:44,320
breakpoint hardware right and i will

203
00:08:44,320 --> 00:08:44,959
tell him

204
00:08:44,959 --> 00:08:48,080
i will tell him uh when a byte is being

205
00:08:48,080 --> 00:08:48,720
written

206
00:08:48,720 --> 00:08:51,839
tell me about it awesome i will

207
00:08:51,839 --> 00:08:54,800
click run again and as i said another

208
00:08:54,800 --> 00:08:56,640
third virtual alloc

209
00:08:56,640 --> 00:08:59,760
i will go to the user mode

210
00:08:59,760 --> 00:09:03,040
and i will also inspect using the

211
00:09:03,040 --> 00:09:04,240
register eax

212
00:09:04,240 --> 00:09:07,440
the newly allocated memory i will

213
00:09:07,440 --> 00:09:10,399
similarly i will set a breakpoint on

214
00:09:10,399 --> 00:09:11,360
right

215
00:09:11,360 --> 00:09:14,480
and great now

216
00:09:14,480 --> 00:09:17,120
uh just pay attention the dump one is

217
00:09:17,120 --> 00:09:19,200
the first allocated memory

218
00:09:19,200 --> 00:09:22,320
and the dump two is the second so

219
00:09:22,320 --> 00:09:25,040
i will observe the dump one and i will

220
00:09:25,040 --> 00:09:26,720
hit run because i already has a

221
00:09:26,720 --> 00:09:28,000
breakpoint

222
00:09:28,000 --> 00:09:31,600
on these two allocated memory so every

223
00:09:31,600 --> 00:09:33,519
every time something will be written i

224
00:09:33,519 --> 00:09:35,680
will be know about it

225
00:09:35,680 --> 00:09:39,120
so as you can see i click run

226
00:09:39,120 --> 00:09:42,640
and something has been written now

227
00:09:42,640 --> 00:09:46,480
we can see that after this activity

228
00:09:46,480 --> 00:09:50,160
of of writing the byte happened

229
00:09:50,160 --> 00:09:53,760
we can see a jump now

230
00:09:53,760 --> 00:09:56,959
let's uh watch closely uh

231
00:09:56,959 --> 00:10:00,640
on this ascii table

232
00:10:00,640 --> 00:10:05,600
and we can just see

233
00:10:05,600 --> 00:10:09,920
let's take this jump and

234
00:10:10,160 --> 00:10:12,880
let's go again

235
00:10:13,279 --> 00:10:17,360
and for those uh

236
00:10:17,360 --> 00:10:20,480
who will be looking here

237
00:10:20,480 --> 00:10:23,760
we will observe that

238
00:10:25,839 --> 00:10:29,040
when we uh

239
00:10:29,040 --> 00:10:32,079
we're here in this part some data

240
00:10:32,079 --> 00:10:35,360
was written inside this newly allocated

241
00:10:35,360 --> 00:10:36,240
memory

242
00:10:36,240 --> 00:10:39,360
so and this really leads us to

243
00:10:39,360 --> 00:10:42,000
the first two concepts that i want to to

244
00:10:42,000 --> 00:10:43,360
to present here

245
00:10:43,360 --> 00:10:47,519
first usually when data has been poured

246
00:10:47,519 --> 00:10:50,240
uh where whether it's from the binary or

247
00:10:50,240 --> 00:10:50,640
being

248
00:10:50,640 --> 00:10:54,320
uh the obfuscated attackers like

249
00:10:54,320 --> 00:10:56,800
to modify or write their data or read

250
00:10:56,800 --> 00:10:58,640
from that data

251
00:10:58,640 --> 00:11:01,920
bite by byte so in this case we can see

252
00:11:01,920 --> 00:11:02,640
that

253
00:11:02,640 --> 00:11:06,160
some data has been entered

254
00:11:06,160 --> 00:11:09,200
to the register cl which is

255
00:11:09,200 --> 00:11:15,120
a one byte register

256
00:11:15,120 --> 00:11:18,160
and this uh and this register is being

257
00:11:18,160 --> 00:11:19,200
moved you can see

258
00:11:19,200 --> 00:11:23,200
byte one byte two uh the edx

259
00:11:23,200 --> 00:11:26,399
uh this to to this address that

260
00:11:26,399 --> 00:11:29,760
here so the first

261
00:11:29,760 --> 00:11:33,120
concept that i want to to for us to

262
00:11:33,120 --> 00:11:34,399
understand is

263
00:11:34,399 --> 00:11:37,839
that we want to look for bite by byte

264
00:11:37,839 --> 00:11:39,920
activities something data that is being

265
00:11:39,920 --> 00:11:41,519
written bite by byte

266
00:11:41,519 --> 00:11:44,240
now in order for in order for that data

267
00:11:44,240 --> 00:11:45,120
to be

268
00:11:45,120 --> 00:11:48,399
um written byte by byte it

269
00:11:48,399 --> 00:11:51,600
it has to be happens uh inside a loop

270
00:11:51,600 --> 00:11:54,720
because it has to be uh

271
00:11:54,720 --> 00:11:57,680
be written bite by byte uh and and to do

272
00:11:57,680 --> 00:11:58,480
it

273
00:11:58,480 --> 00:12:01,600
it has to be inside the loop so and this

274
00:12:01,600 --> 00:12:04,000
uh leads me to the second concept that i

275
00:12:04,000 --> 00:12:04,800
want to

276
00:12:04,800 --> 00:12:07,920
to show here uh whenever it's

277
00:12:07,920 --> 00:12:11,120
unpacking decrypting uh

278
00:12:11,120 --> 00:12:14,560
dr skating activity we will always want

279
00:12:14,560 --> 00:12:16,560
to search for loops because if

280
00:12:16,560 --> 00:12:19,440
uh we need to write data whether it's by

281
00:12:19,440 --> 00:12:20,399
by byte or

282
00:12:20,399 --> 00:12:23,760
4 bytes for byte it must be happened

283
00:12:23,760 --> 00:12:28,319
inside the loop so this is

284
00:12:29,360 --> 00:12:31,920
the second concept and i will just set a

285
00:12:31,920 --> 00:12:32,720
breakpoint

286
00:12:32,720 --> 00:12:35,279
here because i know that this line will

287
00:12:35,279 --> 00:12:36,639
write the byte

288
00:12:36,639 --> 00:12:39,760
here and this line obviously take me to

289
00:12:39,760 --> 00:12:40,639
the loop

290
00:12:40,639 --> 00:12:44,800
so if i click run

291
00:12:45,519 --> 00:12:48,480
we can see that i came to the address

292
00:12:48,480 --> 00:12:48,959
that

293
00:12:48,959 --> 00:12:51,519
writes the byte and if you will look

294
00:12:51,519 --> 00:12:53,519
here you can see that once i will pass

295
00:12:53,519 --> 00:12:54,639
it

296
00:12:54,639 --> 00:12:58,000
another uh byte

297
00:12:58,000 --> 00:13:01,279
was written let's do it again breakpoint

298
00:13:01,279 --> 00:13:02,160
you can see zero

299
00:13:02,160 --> 00:13:05,600
zero i will click step over and we can

300
00:13:05,600 --> 00:13:06,160
see

301
00:13:06,160 --> 00:13:09,680
51 here or some changing here

302
00:13:09,680 --> 00:13:12,480
now awesome so i know that this this

303
00:13:12,480 --> 00:13:12,959
loop

304
00:13:12,959 --> 00:13:15,519
is actually pouring some content inside

305
00:13:15,519 --> 00:13:17,360
this newly allocated memory

306
00:13:17,360 --> 00:13:20,959
so after i understood it i will just cl

307
00:13:20,959 --> 00:13:22,800
i will just set a breakpoint

308
00:13:22,800 --> 00:13:26,160
right after this loop so

309
00:13:26,160 --> 00:13:29,440
i will see whatever is been written

310
00:13:29,440 --> 00:13:32,480
i will click run and we could actually

311
00:13:32,480 --> 00:13:34,079
see that a lot of gibberish

312
00:13:34,079 --> 00:13:36,880
content has been written inside this uh

313
00:13:36,880 --> 00:13:38,959
newly allocated memory

314
00:13:38,959 --> 00:13:41,680
great but for those of you who are

315
00:13:41,680 --> 00:13:42,720
searching for

316
00:13:42,720 --> 00:13:46,720
uh portable executable obviously this is

317
00:13:46,720 --> 00:13:48,959
not what it looks like it looks like a

318
00:13:48,959 --> 00:13:49,920
gibberish we

319
00:13:49,920 --> 00:13:53,199
we would want to expect a classic mz

320
00:13:53,199 --> 00:13:54,160
header

321
00:13:54,160 --> 00:13:57,440
so let's continue our

322
00:13:57,440 --> 00:14:01,040
debugging activity so once we

323
00:14:01,040 --> 00:14:05,920
continue we found ourselves

324
00:14:05,920 --> 00:14:08,800
encountering another loop that started

325
00:14:08,800 --> 00:14:10,160
from this jump

326
00:14:10,160 --> 00:14:12,800
and returned to here but if you will

327
00:14:12,800 --> 00:14:13,199
look

328
00:14:13,199 --> 00:14:16,480
closely to this uh

329
00:14:16,480 --> 00:14:18,959
first allocated memory we can see that

330
00:14:18,959 --> 00:14:20,480
the bytes has been changed

331
00:14:20,480 --> 00:14:24,320
we see now m 8 z now

332
00:14:24,320 --> 00:14:29,040
we obviously can assume that

333
00:14:29,040 --> 00:14:32,079
this is start to be more similar to what

334
00:14:32,079 --> 00:14:32,639
we want

335
00:14:32,639 --> 00:14:35,760
to look for the classic mz

336
00:14:35,760 --> 00:14:38,079
of of the the portable executable the

337
00:14:38,079 --> 00:14:40,480
classic portable executable starting

338
00:14:40,480 --> 00:14:43,839
so we can understand that this loop

339
00:14:43,839 --> 00:14:44,560
maybe

340
00:14:44,560 --> 00:14:46,880
alters some of the data here and this

341
00:14:46,880 --> 00:14:47,760
leads us

342
00:14:47,760 --> 00:14:49,839
to the third concept that i want to

343
00:14:49,839 --> 00:14:50,880
present

344
00:14:50,880 --> 00:14:54,079
we we we can see that this loop contains

345
00:14:54,079 --> 00:14:54,959
of several

346
00:14:54,959 --> 00:14:57,600
of what i call of what i call data

347
00:14:57,600 --> 00:14:59,279
manipulation

348
00:14:59,279 --> 00:15:02,160
op codes and in this case we can see

349
00:15:02,160 --> 00:15:04,079
shift right

350
00:15:04,079 --> 00:15:07,279
we can see the xor and we can see

351
00:15:07,279 --> 00:15:10,560
the rotate left now

352
00:15:10,560 --> 00:15:13,279
this these specific op codes are known

353
00:15:13,279 --> 00:15:14,240
to be

354
00:15:14,240 --> 00:15:17,519
to be used in actually

355
00:15:17,519 --> 00:15:21,120
the majority of cryptos or uh decryption

356
00:15:21,120 --> 00:15:24,399
uh algorithms that i have observed

357
00:15:24,399 --> 00:15:28,000
in in dynamic running so their

358
00:15:28,000 --> 00:15:31,120
their presence inside of loop is always

359
00:15:31,120 --> 00:15:34,000
a good indication of of maybe some

360
00:15:34,000 --> 00:15:34,880
decryption

361
00:15:34,880 --> 00:15:37,120
uh decrypting or the obfuscation the

362
00:15:37,120 --> 00:15:38,720
opposite activity

363
00:15:38,720 --> 00:15:42,000
so just see let's continue

364
00:15:42,000 --> 00:15:45,040
to to to iterate about this loop

365
00:15:45,040 --> 00:15:47,420
in this loop again and

366
00:15:47,420 --> 00:15:50,000
[Music]

367
00:15:50,000 --> 00:15:53,040
and we reach the end of of this loop

368
00:15:53,040 --> 00:15:57,759
now we understand that let's for example

369
00:15:57,759 --> 00:15:59,839
iterate this loop again but now i will

370
00:15:59,839 --> 00:16:03,360
just set here a breakpoint

371
00:16:04,480 --> 00:16:06,720
we could see that something has been

372
00:16:06,720 --> 00:16:08,000
changed i will press again

373
00:16:08,000 --> 00:16:12,560
and if you will look at these lines

374
00:16:12,959 --> 00:16:15,839
we can see that the data has been

375
00:16:15,839 --> 00:16:17,120
changed

376
00:16:17,120 --> 00:16:20,800
awesome so we understand that

377
00:16:20,800 --> 00:16:23,279
that this loop actually modifying the

378
00:16:23,279 --> 00:16:25,199
already written content the already

379
00:16:25,199 --> 00:16:26,800
obfuscated content

380
00:16:26,800 --> 00:16:29,680
so awesome uh i will just set a

381
00:16:29,680 --> 00:16:30,399
breakpoint

382
00:16:30,399 --> 00:16:33,600
right after this loop and i will hit run

383
00:16:33,600 --> 00:16:36,959
and obviously a lot of stuff will change

384
00:16:36,959 --> 00:16:40,480
here awesome

385
00:16:40,480 --> 00:16:43,839
so now except the mz we can actually see

386
00:16:43,839 --> 00:16:44,880
that

387
00:16:44,880 --> 00:16:47,720
something that will look like this

388
00:16:47,720 --> 00:16:49,600
program

389
00:16:49,600 --> 00:16:52,639
so dos o

390
00:16:52,639 --> 00:16:55,920
d e so this is kind of uh telling us

391
00:16:55,920 --> 00:16:57,360
that maybe

392
00:16:57,360 --> 00:17:00,399
maybe this starts to be to to resemble

393
00:17:00,399 --> 00:17:00,720
us

394
00:17:00,720 --> 00:17:03,600
the the this program cannot run in dos

395
00:17:03,600 --> 00:17:04,160
mode

396
00:17:04,160 --> 00:17:06,720
as we expect in in in uh portable

397
00:17:06,720 --> 00:17:08,079
executable

398
00:17:08,079 --> 00:17:11,679
uh great so because i still have a

399
00:17:11,679 --> 00:17:12,720
breakpoint

400
00:17:12,720 --> 00:17:15,359
that the hardware breakpoint on these

401
00:17:15,359 --> 00:17:16,079
two

402
00:17:16,079 --> 00:17:18,400
i will click right again and let's see

403
00:17:18,400 --> 00:17:20,880
what happens

404
00:17:20,880 --> 00:17:24,559
great so now i reach this point

405
00:17:24,559 --> 00:17:30,000
but i look on the second

406
00:17:30,160 --> 00:17:33,200
on the second allocated memory uh

407
00:17:33,200 --> 00:17:35,760
and i can see the letter m so i

408
00:17:35,760 --> 00:17:36,720
understand that

409
00:17:36,720 --> 00:17:39,919
some data is starting to be poured into

410
00:17:39,919 --> 00:17:40,480
this

411
00:17:40,480 --> 00:17:43,600
uh newly allocated memory so let's just

412
00:17:43,600 --> 00:17:46,320
do step over a bunch of times and let's

413
00:17:46,320 --> 00:17:47,919
see what's happened

414
00:17:47,919 --> 00:17:51,039
okay okay okay something happened now i

415
00:17:51,039 --> 00:17:52,080
see the letter

416
00:17:52,080 --> 00:17:56,000
z mz now this is really starting to

417
00:17:56,000 --> 00:17:59,760
to look like uh the portable executable

418
00:17:59,760 --> 00:18:01,200
we want to find

419
00:18:01,200 --> 00:18:04,640
so i believe

420
00:18:04,640 --> 00:18:08,080
it was this place that

421
00:18:08,080 --> 00:18:11,440
copies so

422
00:18:11,440 --> 00:18:14,720
again we we observed

423
00:18:14,720 --> 00:18:17,280
that song content has been written i

424
00:18:17,280 --> 00:18:18,960
will click again we can see here zero

425
00:18:18,960 --> 00:18:20,000
zero

426
00:18:20,000 --> 00:18:23,840
click again and

427
00:18:24,640 --> 00:18:26,960
we can see that after i pass this line

428
00:18:26,960 --> 00:18:28,000
this red

429
00:18:28,000 --> 00:18:31,120
line this this move of one byte

430
00:18:31,120 --> 00:18:34,160
the zero zero turned to be 90

431
00:18:34,160 --> 00:18:37,840
so again uh moves of one byte

432
00:18:37,840 --> 00:18:41,360
and these moves happened again inside of

433
00:18:41,360 --> 00:18:42,160
a loop

434
00:18:42,160 --> 00:18:44,960
so this is great so i i kind of

435
00:18:44,960 --> 00:18:46,559
understand that

436
00:18:46,559 --> 00:18:50,400
maybe this loop will give me

437
00:18:50,400 --> 00:18:53,440
some some

438
00:18:53,440 --> 00:18:56,160
de-obfuscated data i will write run

439
00:18:56,160 --> 00:18:58,240
again just to see it again

440
00:18:58,240 --> 00:19:01,520
great i can see that i i said that

441
00:19:01,520 --> 00:19:04,160
the bytes will be moved by by byte to

442
00:19:04,160 --> 00:19:05,120
this edx

443
00:19:05,120 --> 00:19:08,160
register from the cxergy style but it's

444
00:19:08,160 --> 00:19:08,799
coming

445
00:19:08,799 --> 00:19:11,919
to the cx from the eax and

446
00:19:11,919 --> 00:19:15,360
if i will inspect what this eax is and i

447
00:19:15,360 --> 00:19:16,240
wrote on

448
00:19:16,240 --> 00:19:19,840
jump 3 i will see that

449
00:19:19,840 --> 00:19:22,960
this this

450
00:19:22,960 --> 00:19:25,200
place is actually the first allocated

451
00:19:25,200 --> 00:19:27,760
memory you can see this is the same

452
00:19:27,760 --> 00:19:31,120
so i can assume that some data

453
00:19:31,120 --> 00:19:33,840
in some pattern is being copied from

454
00:19:33,840 --> 00:19:35,120
here

455
00:19:35,120 --> 00:19:38,360
to here and because this is here it's

456
00:19:38,360 --> 00:19:41,600
m3m8 said and here it's mz

457
00:19:41,600 --> 00:19:45,679
i can assume that um it may be copying

458
00:19:45,679 --> 00:19:48,799
the exact bytes to give us an

459
00:19:48,799 --> 00:19:52,160
actual portable executable so let's

460
00:19:52,160 --> 00:19:55,360
confirm my hypothesis and

461
00:19:55,360 --> 00:19:57,200
obviously this is the loop that's doing

462
00:19:57,200 --> 00:19:58,880
everything i will just set the

463
00:19:58,880 --> 00:19:59,760
breakpoint

464
00:19:59,760 --> 00:20:03,440
after the loop and click run

465
00:20:03,440 --> 00:20:06,159
and what you see what you see we can see

466
00:20:06,159 --> 00:20:07,200
an actual

467
00:20:07,200 --> 00:20:10,480
portable executable here uh

468
00:20:10,480 --> 00:20:14,240
mz this program cannot run in dos mode

469
00:20:14,240 --> 00:20:17,840
um yeah so this is the the unpacked

470
00:20:17,840 --> 00:20:19,919
now this is not really really fully

471
00:20:19,919 --> 00:20:21,919
unpacked because we can see here

472
00:20:21,919 --> 00:20:25,600
upx 0 upx 1 so this is

473
00:20:25,600 --> 00:20:28,960
actually unpacked but still packed with

474
00:20:28,960 --> 00:20:32,559
the upx packer which is something that

475
00:20:32,559 --> 00:20:36,080
attackers like to do

476
00:20:36,640 --> 00:20:39,919
to just for good measure to to unpack it

477
00:20:39,919 --> 00:20:43,600
to to pack it with double packers

478
00:20:43,600 --> 00:20:47,200
great so after we understand

479
00:20:47,200 --> 00:20:49,840
this concept

480
00:20:54,400 --> 00:20:57,150
i will i will continue

481
00:20:57,150 --> 00:20:58,640
[Music]

482
00:20:58,640 --> 00:21:01,760
i will continue to the second uh

483
00:21:01,760 --> 00:21:05,520
case study uh which is taxnet now

484
00:21:05,520 --> 00:21:08,320
stuxnet is a malicious warm uh computer

485
00:21:08,320 --> 00:21:09,120
one that

486
00:21:09,120 --> 00:21:12,159
uh discovered in 2010

487
00:21:12,159 --> 00:21:15,440
it's very famous and its target their

488
00:21:15,440 --> 00:21:18,640
programmable logic controllers or plc

489
00:21:18,640 --> 00:21:20,720
uh which basically uh control the

490
00:21:20,720 --> 00:21:22,640
century centrifuge

491
00:21:22,640 --> 00:21:27,360
centrifuge and uh in natanz enrichment

492
00:21:27,360 --> 00:21:30,180
uh facility in iran

493
00:21:30,180 --> 00:21:31,440
[Music]

494
00:21:31,440 --> 00:21:34,880
now if we uh i'll just

495
00:21:34,880 --> 00:21:38,080
move it here now if we

496
00:21:38,080 --> 00:21:42,480
uh observe now now i i obviously

497
00:21:42,480 --> 00:21:44,880
dig in the code of of stuxnet of the

498
00:21:44,880 --> 00:21:47,120
first initial dropper of stuxnet

499
00:21:47,120 --> 00:21:49,760
and i observe this function which is the

500
00:21:49,760 --> 00:21:50,720
function that

501
00:21:50,720 --> 00:21:54,159
is is is responsible for

502
00:21:54,159 --> 00:21:58,480
for decrypting uh the dropper so

503
00:21:58,480 --> 00:22:00,400
when when we observe this function we

504
00:22:00,400 --> 00:22:02,320
can actually see the same

505
00:22:02,320 --> 00:22:06,159
uh similarities uh that we just observed

506
00:22:06,159 --> 00:22:07,919
in the get to malware

507
00:22:07,919 --> 00:22:10,159
first of all it has a loop it actually

508
00:22:10,159 --> 00:22:11,520
has three loops

509
00:22:11,520 --> 00:22:16,159
within a bigger loop so so four loops

510
00:22:16,159 --> 00:22:19,840
um the second concept is data

511
00:22:19,840 --> 00:22:21,440
manipulation op codes

512
00:22:21,440 --> 00:22:24,080
in this case we can see xor and shift

513
00:22:24,080 --> 00:22:25,600
right

514
00:22:25,600 --> 00:22:28,559
the third concept is moves of one byte

515
00:22:28,559 --> 00:22:29,760
we can see it

516
00:22:29,760 --> 00:22:33,120
uh down here

517
00:22:33,520 --> 00:22:36,720
so um

518
00:22:37,039 --> 00:22:42,080
awesome so let's see how this

519
00:22:42,080 --> 00:22:44,559
unpacking mechanism really works

520
00:22:44,559 --> 00:22:46,720
dynamically here i will not

521
00:22:46,720 --> 00:22:48,960
actually run it but i will just present

522
00:22:48,960 --> 00:22:50,799
it in the slides

523
00:22:50,799 --> 00:22:53,120
so we talked about three loops inside a

524
00:22:53,120 --> 00:22:54,320
bigger loop

525
00:22:54,320 --> 00:22:58,640
so we can see here that the first loop

526
00:22:58,640 --> 00:23:02,240
starts at the beginning of this

527
00:23:02,240 --> 00:23:06,000
gibberish content and it really iterates

528
00:23:06,000 --> 00:23:10,000
down it's doing some soaring

529
00:23:10,000 --> 00:23:12,320
extraordinary activities and we can see

530
00:23:12,320 --> 00:23:13,440
that it finish

531
00:23:13,440 --> 00:23:17,280
down here the second loop

532
00:23:17,280 --> 00:23:20,720
is starting from the beginning

533
00:23:20,720 --> 00:23:23,919
of the content but it also stopped

534
00:23:23,919 --> 00:23:28,240
at the middle of of this

535
00:23:28,240 --> 00:23:31,280
of this obfuscated

536
00:23:31,280 --> 00:23:34,320
data and

537
00:23:34,320 --> 00:23:36,480
the third loop which is actually very

538
00:23:36,480 --> 00:23:37,520
interesting

539
00:23:37,520 --> 00:23:40,880
starting from the bottom of

540
00:23:40,880 --> 00:23:44,000
the obfuscated data and goes

541
00:23:44,000 --> 00:23:46,720
up to the to the beginning of this

542
00:23:46,720 --> 00:23:49,120
obfuscated data

543
00:23:49,120 --> 00:23:51,200
and we can see the reason for that is

544
00:23:51,200 --> 00:23:52,400
it's because the

545
00:23:52,400 --> 00:23:55,600
we can see my this minus one here

546
00:23:55,600 --> 00:23:58,559
that just take it uh and the sub here

547
00:23:58,559 --> 00:23:59,679
that just take it

548
00:23:59,679 --> 00:24:02,840
uh that the decryption uh

549
00:24:02,840 --> 00:24:05,360
mechanism instead of the classic from up

550
00:24:05,360 --> 00:24:06,400
to down it's taken

551
00:24:06,400 --> 00:24:09,679
from uh down to up

552
00:24:09,679 --> 00:24:12,960
and all of the all of these loops are in

553
00:24:12,960 --> 00:24:16,080
one bigger loop so after we set a

554
00:24:16,080 --> 00:24:18,480
breakpoint after this loop we can

555
00:24:18,480 --> 00:24:22,000
see the clean portable executable mz

556
00:24:22,000 --> 00:24:24,960
this file cannot run in dos mode and

557
00:24:24,960 --> 00:24:26,159
actually similar

558
00:24:26,159 --> 00:24:29,520
similarly to to the get 2

559
00:24:29,520 --> 00:24:32,640
downloader the stocks net malware was

560
00:24:32,640 --> 00:24:33,440
also

561
00:24:33,440 --> 00:24:37,200
uh packed with upx

562
00:24:37,200 --> 00:24:41,520
malware so double packers here and there

563
00:24:41,520 --> 00:24:43,919
uh the third case study that i want to

564
00:24:43,919 --> 00:24:46,240
present is actually very new uh

565
00:24:46,240 --> 00:24:49,279
it's about the teardrop malware now this

566
00:24:49,279 --> 00:24:51,760
malware is related to the supply chain

567
00:24:51,760 --> 00:24:54,880
attack on solarwinds orion platform that

568
00:24:54,880 --> 00:24:58,320
was discovered in december 2020

569
00:24:58,320 --> 00:25:00,880
actually the name teardrop was uh given

570
00:25:00,880 --> 00:25:01,520
by

571
00:25:01,520 --> 00:25:04,159
fireeye uh and yeah the main goal of

572
00:25:04,159 --> 00:25:04,640
this

573
00:25:04,640 --> 00:25:08,080
malware was to deliver a cobblestrike

574
00:25:08,080 --> 00:25:11,200
implant so

575
00:25:11,200 --> 00:25:14,320
if we will look on this

576
00:25:14,320 --> 00:25:17,440
decryptive function uh

577
00:25:17,440 --> 00:25:20,240
of the two drop malware we can see

578
00:25:20,240 --> 00:25:21,200
actually

579
00:25:21,200 --> 00:25:24,000
the first of all obviously it's a 64

580
00:25:24,000 --> 00:25:24,559
byte

581
00:25:24,559 --> 00:25:28,159
uh malware uh we can see it because of

582
00:25:28,159 --> 00:25:28,400
the

583
00:25:28,400 --> 00:25:31,600
the the registers rcx yeah

584
00:25:31,600 --> 00:25:34,720
and so so on but we can see that it's

585
00:25:34,720 --> 00:25:38,159
it's has actually shared a lot of the

586
00:25:38,159 --> 00:25:41,279
similarities that we already seen first

587
00:25:41,279 --> 00:25:42,640
of all

588
00:25:42,640 --> 00:25:45,919
it has a loop here second

589
00:25:45,919 --> 00:25:48,880
it has the adapter manipulation op codes

590
00:25:48,880 --> 00:25:49,360
it have

591
00:25:49,360 --> 00:25:52,960
shift right shift left and xor

592
00:25:52,960 --> 00:25:56,400
and at the end there are moves of bytes

593
00:25:56,400 --> 00:26:00,880
at the end of of uh the loop

594
00:26:01,279 --> 00:26:04,559
so yeah it's kind of interesting because

595
00:26:04,559 --> 00:26:07,279
it's been a decade since from stuxnet to

596
00:26:07,279 --> 00:26:08,240
teardrop

597
00:26:08,240 --> 00:26:10,320
but the concept are are actually the

598
00:26:10,320 --> 00:26:12,639
same

599
00:26:12,799 --> 00:26:16,480
so what an additional uh information

600
00:26:16,480 --> 00:26:20,000
we can get from the custom packers

601
00:26:20,000 --> 00:26:23,600
so uh hero just gave some a picture an

602
00:26:23,600 --> 00:26:24,480
image

603
00:26:24,480 --> 00:26:28,240
of actually three droppers

604
00:26:28,240 --> 00:26:31,760
of of of of malware

605
00:26:31,760 --> 00:26:33,919
now if you will look on these three

606
00:26:33,919 --> 00:26:36,080
images you you will you will

607
00:26:36,080 --> 00:26:39,520
tell hey it looks the same and obviously

608
00:26:39,520 --> 00:26:41,600
it's it's basically looks the same the

609
00:26:41,600 --> 00:26:43,840
same op codes the same everything

610
00:26:43,840 --> 00:26:46,880
uh but where i when i

611
00:26:46,880 --> 00:26:50,799
investigate this three malware

612
00:26:50,799 --> 00:26:53,679
the fact was that although the the

613
00:26:53,679 --> 00:26:55,600
custom packer was

614
00:26:55,600 --> 00:26:59,520
uh the same the the payload was not

615
00:26:59,520 --> 00:27:01,840
the same uh one of them delivered the

616
00:27:01,840 --> 00:27:03,039
oroznif

617
00:27:03,039 --> 00:27:05,279
bank introducing one deliver the

618
00:27:05,279 --> 00:27:07,919
crackpot backing trojan and loader

619
00:27:07,919 --> 00:27:11,600
and uh another one deliver

620
00:27:11,600 --> 00:27:16,639
the amounted threat loader botnet

621
00:27:17,039 --> 00:27:21,200
so what an additional information

622
00:27:21,200 --> 00:27:23,840
that uh what what an additional

623
00:27:23,840 --> 00:27:25,520
information we can learn from these

624
00:27:25,520 --> 00:27:27,279
custom packers

625
00:27:27,279 --> 00:27:30,640
so just from inspecting these custom

626
00:27:30,640 --> 00:27:32,399
packers we can

627
00:27:32,399 --> 00:27:35,279
assume or or maybe understand that

628
00:27:35,279 --> 00:27:36,960
packers actually can be

629
00:27:36,960 --> 00:27:39,919
a really good indicator of compromise or

630
00:27:39,919 --> 00:27:40,399
at least

631
00:27:40,399 --> 00:27:42,880
narrow down the options significantly

632
00:27:42,880 --> 00:27:43,919
because if

633
00:27:43,919 --> 00:27:46,799
a packer is known to be used just for

634
00:27:46,799 --> 00:27:47,760
one malware

635
00:27:47,760 --> 00:27:52,000
so maybe it's a strong enough ioc

636
00:27:52,000 --> 00:27:55,120
to to indicate about this malware or or

637
00:27:55,120 --> 00:27:56,080
at least about

638
00:27:56,080 --> 00:28:00,000
several malware that use this packer

639
00:28:00,000 --> 00:28:03,520
now uh the use of this packer

640
00:28:03,520 --> 00:28:05,679
or the use of them in a malware can

641
00:28:05,679 --> 00:28:06,640
maybe

642
00:28:06,640 --> 00:28:09,279
tell us about some collaboration between

643
00:28:09,279 --> 00:28:11,279
uh different threat actors

644
00:28:11,279 --> 00:28:14,159
uh so if let's say the threat actors

645
00:28:14,159 --> 00:28:14,399
that

646
00:28:14,399 --> 00:28:17,440
related to emoted and

647
00:28:17,440 --> 00:28:21,600
quakebot and earthsniff use the same

648
00:28:21,600 --> 00:28:24,799
custom packer maybe that can

649
00:28:24,799 --> 00:28:27,039
let us understand that maybe there are

650
00:28:27,039 --> 00:28:28,799
some collaboration between them

651
00:28:28,799 --> 00:28:32,080
or maybe some third party uh

652
00:28:32,080 --> 00:28:36,000
actor right these uh packers and

653
00:28:36,000 --> 00:28:38,799
uh the other threat actors buy that from

654
00:28:38,799 --> 00:28:39,279
it

655
00:28:39,279 --> 00:28:41,919
now that really leaves a lot of room to

656
00:28:41,919 --> 00:28:43,760
to think about these

657
00:28:43,760 --> 00:28:47,360
subjects so

658
00:28:47,360 --> 00:28:50,640
let's talk about uh conclusions uh so in

659
00:28:50,640 --> 00:28:51,279
the present

660
00:28:51,279 --> 00:28:53,360
in this presentation i present and talk

661
00:28:53,360 --> 00:28:56,000
about decryption and the obligation

662
00:28:56,000 --> 00:29:00,000
mechanisms uh we actually see that

663
00:29:00,000 --> 00:29:02,480
although a decade or a lot of time

664
00:29:02,480 --> 00:29:03,440
actually

665
00:29:03,440 --> 00:29:06,480
uh passed from stocksnet to

666
00:29:06,480 --> 00:29:09,840
get to our teardrop most of them just

667
00:29:09,840 --> 00:29:14,320
share the same concept or similarities

668
00:29:14,320 --> 00:29:17,840
so uh something for for conclusion

669
00:29:17,840 --> 00:29:21,520
and and for enrichment so traditionally

670
00:29:21,520 --> 00:29:24,559
packers tend to start with reading and

671
00:29:24,559 --> 00:29:26,159
appreciate the data

672
00:29:26,159 --> 00:29:29,039
from the pe itself the embedded p uh

673
00:29:29,039 --> 00:29:30,240
embedded from the p

674
00:29:30,240 --> 00:29:32,159
and writing it to a newly allocated

675
00:29:32,159 --> 00:29:34,080
memory uh

676
00:29:34,080 --> 00:29:37,200
writing to or reading from uh

677
00:29:37,200 --> 00:29:39,760
in a lot of cases will happen bite by

678
00:29:39,760 --> 00:29:40,399
bite

679
00:29:40,399 --> 00:29:43,760
so we should look for bite by bite

680
00:29:43,760 --> 00:29:47,440
activities mainly writing activities

681
00:29:47,440 --> 00:29:50,799
um also in order to do it

682
00:29:50,799 --> 00:29:54,000
by bite that has to be in the context of

683
00:29:54,000 --> 00:29:57,760
a loop so we we we want to look for

684
00:29:57,760 --> 00:30:00,080
obviously loops but loops that contain

685
00:30:00,080 --> 00:30:00,880
this

686
00:30:00,880 --> 00:30:04,080
activity and also

687
00:30:04,080 --> 00:30:07,200
uh some op codes that manipulate data

688
00:30:07,200 --> 00:30:08,559
change the data

689
00:30:08,559 --> 00:30:11,039
can be seen in most of these custom

690
00:30:11,039 --> 00:30:11,840
packers

691
00:30:11,840 --> 00:30:15,600
uh most notably saw rotate left rotate

692
00:30:15,600 --> 00:30:18,720
right shift left shift right

693
00:30:18,720 --> 00:30:22,000
uh will most likely or there are

694
00:30:22,000 --> 00:30:24,320
there is a high chance that we will see

695
00:30:24,320 --> 00:30:26,640
them in a decryption

696
00:30:26,640 --> 00:30:29,679
loop so first of all

697
00:30:29,679 --> 00:30:32,159
uh thank you all very much for your time

698
00:30:32,159 --> 00:30:33,360
and for listening

699
00:30:33,360 --> 00:30:36,880
and if there are any questions

700
00:30:36,880 --> 00:30:45,200
i will be happy to answer

