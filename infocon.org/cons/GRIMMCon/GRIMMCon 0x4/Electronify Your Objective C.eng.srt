1
00:00:00,080 --> 00:00:02,320
hi good afternoon thank you very much

2
00:00:02,320 --> 00:00:03,439
for attending

3
00:00:03,439 --> 00:00:06,240
this talk i truly appreciate you taking

4
00:00:06,240 --> 00:00:07,600
your time to come and uh

5
00:00:07,600 --> 00:00:10,719
listen to this topic also thank you

6
00:00:10,719 --> 00:00:13,040
thank you very much to grim and to grim

7
00:00:13,040 --> 00:00:15,679
khan and all the folks who

8
00:00:15,679 --> 00:00:18,400
worked real hard to put this together uh

9
00:00:18,400 --> 00:00:20,400
thank you very much for uh for inviting

10
00:00:20,400 --> 00:00:20,880
me

11
00:00:20,880 --> 00:00:23,279
it's truly an honor and i know it's a

12
00:00:23,279 --> 00:00:25,199
lot of hard work and dedication

13
00:00:25,199 --> 00:00:26,480
uh to bring together all these

14
00:00:26,480 --> 00:00:28,320
knowledgeable speakers and i truly

15
00:00:28,320 --> 00:00:30,240
appreciate all the work that you do

16
00:00:30,240 --> 00:00:33,680
uh where this idea came from um i really

17
00:00:33,680 --> 00:00:36,079
really wanted to develop something like

18
00:00:36,079 --> 00:00:37,120
process hacker

19
00:00:37,120 --> 00:00:40,160
like the process hacker application uh

20
00:00:40,160 --> 00:00:41,760
for windows but i wanted to do it on the

21
00:00:41,760 --> 00:00:44,320
mac os side um

22
00:00:44,320 --> 00:00:46,399
and you know i know there's there's

23
00:00:46,399 --> 00:00:48,160
applications out there

24
00:00:48,160 --> 00:00:50,719
for mac os that dig into processes like

25
00:00:50,719 --> 00:00:52,160
uh patrick waters

26
00:00:52,160 --> 00:00:54,719
process monitor but i really can't find

27
00:00:54,719 --> 00:00:56,160
anything that's quite like

28
00:00:56,160 --> 00:00:58,640
process hacker on the windows side for

29
00:00:58,640 --> 00:00:59,359
the mac

30
00:00:59,359 --> 00:01:02,719
where it's graphical and you know very

31
00:01:02,719 --> 00:01:04,479
interactive you can click on a running

32
00:01:04,479 --> 00:01:06,240
process and dig into the threads that

33
00:01:06,240 --> 00:01:07,600
are within that process

34
00:01:07,600 --> 00:01:10,479
and get tons of detail on all of the

35
00:01:10,479 --> 00:01:12,080
processes it's also

36
00:01:12,080 --> 00:01:14,720
really really cool to see uh everything

37
00:01:14,720 --> 00:01:16,400
in a you know organized tree

38
00:01:16,400 --> 00:01:17,840
and you can organize things how you want

39
00:01:17,840 --> 00:01:19,680
move it around my only my problem there

40
00:01:19,680 --> 00:01:21,840
is that my experience in developing

41
00:01:21,840 --> 00:01:25,040
graphical user interfaces um

42
00:01:25,040 --> 00:01:28,720
really lie in uh web technologies right

43
00:01:28,720 --> 00:01:31,040
uh and i don't have much there either

44
00:01:31,040 --> 00:01:31,759
honestly

45
00:01:31,759 --> 00:01:34,079
um i mostly cheat and use bootstrap for

46
00:01:34,079 --> 00:01:36,159
all my css work so

47
00:01:36,159 --> 00:01:38,880
um having said that uh my colleague on

48
00:01:38,880 --> 00:01:40,000
the zoom red team chris

49
00:01:40,000 --> 00:01:42,960
ross he uh suggested that i check out

50
00:01:42,960 --> 00:01:44,079
electron

51
00:01:44,079 --> 00:01:46,960
and with the caveat that you know he

52
00:01:46,960 --> 00:01:48,320
wasn't sure

53
00:01:48,320 --> 00:01:50,640
how elektron handled the mac os native

54
00:01:50,640 --> 00:01:52,560
api calls that i that i would definitely

55
00:01:52,560 --> 00:01:53,360
need

56
00:01:53,360 --> 00:01:56,399
to access the os processes

57
00:01:56,399 --> 00:01:58,159
i didn't know much about electron i mean

58
00:01:58,159 --> 00:01:59,680
i've heard of electron uh

59
00:01:59,680 --> 00:02:00,960
so i took a look and i was actually

60
00:02:00,960 --> 00:02:02,479
pretty amazed by all the applications

61
00:02:02,479 --> 00:02:02,880
that

62
00:02:02,880 --> 00:02:05,040
are using the technology i really had no

63
00:02:05,040 --> 00:02:06,960
idea and i'll talk about some of those

64
00:02:06,960 --> 00:02:08,239
later but through this development

65
00:02:08,239 --> 00:02:10,878
research i found a way to make those api

66
00:02:10,878 --> 00:02:11,440
calls

67
00:02:11,440 --> 00:02:15,040
to my surprise and i also realized

68
00:02:15,040 --> 00:02:17,840
later uh beyond this development

69
00:02:17,840 --> 00:02:19,680
application the potential

70
00:02:19,680 --> 00:02:22,879
that being able to make objective c

71
00:02:22,879 --> 00:02:26,400
api calls from a an electron application

72
00:02:26,400 --> 00:02:29,680
um has for red team operations i'm a red

73
00:02:29,680 --> 00:02:30,480
teamer so

74
00:02:30,480 --> 00:02:32,080
it was like oh wow actually you know

75
00:02:32,080 --> 00:02:33,519
there's some cool stuff i could probably

76
00:02:33,519 --> 00:02:35,920
do with this on red team operations so

77
00:02:35,920 --> 00:02:37,760
that's what this talks about electrify

78
00:02:37,760 --> 00:02:40,560
electronifying your objective c and

79
00:02:40,560 --> 00:02:41,760
stashing objective c

80
00:02:41,760 --> 00:02:44,800
api calls in your electron apps

81
00:02:44,800 --> 00:02:47,920
so who am i i'm antonio piazza i

82
00:02:47,920 --> 00:02:50,959
am an offensive security engineer on the

83
00:02:50,959 --> 00:02:54,319
zoom red team uh i live in austin texas

84
00:02:54,319 --> 00:02:57,680
i'm a father i'm a husband um retired

85
00:02:57,680 --> 00:03:00,400
u.s army iraq war veteran

86
00:03:00,400 --> 00:03:03,840
and i was a 35 mike human intelligence

87
00:03:03,840 --> 00:03:05,280
collector uh what that means is i

88
00:03:05,280 --> 00:03:07,920
actually was an interrogator in iraq

89
00:03:07,920 --> 00:03:10,640
and i did uh debriefing in europe the

90
00:03:10,640 --> 00:03:11,599
agenda

91
00:03:11,599 --> 00:03:14,560
uh i kind of want to start down uh in

92
00:03:14,560 --> 00:03:16,159
some introductory

93
00:03:16,159 --> 00:03:20,159
you know topics um for people who aren't

94
00:03:20,159 --> 00:03:22,080
familiar with all of the stuff that i'm

95
00:03:22,080 --> 00:03:23,120
going to talk about

96
00:03:23,120 --> 00:03:26,400
here um they'll need these in

97
00:03:26,400 --> 00:03:28,080
this introductory to kind of get to

98
00:03:28,080 --> 00:03:29,519
where i'm going with this talk

99
00:03:29,519 --> 00:03:31,519
so maybe you might already have or might

100
00:03:31,519 --> 00:03:32,640
be familiar with

101
00:03:32,640 --> 00:03:34,959
uh electron apps and then mythic c2

102
00:03:34,959 --> 00:03:37,040
framework and felt payload

103
00:03:37,040 --> 00:03:40,879
osa script and uh jxa

104
00:03:40,879 --> 00:03:42,560
but i want to go through these topics

105
00:03:42,560 --> 00:03:44,319
before i get into

106
00:03:44,319 --> 00:03:46,319
actually uh the meat and potatoes of

107
00:03:46,319 --> 00:03:47,440
this and that's uh

108
00:03:47,440 --> 00:03:50,480
you know making objective c api calls uh

109
00:03:50,480 --> 00:03:53,680
uh from from your electronics so let's

110
00:03:53,680 --> 00:03:55,360
start with what is electron so it's an

111
00:03:55,360 --> 00:03:56,159
open source

112
00:03:56,159 --> 00:03:59,439
cross platform form javascript framework

113
00:03:59,439 --> 00:04:01,599
and it combines node.js and the chromium

114
00:04:01,599 --> 00:04:03,680
browser so the chromium browser is kind

115
00:04:03,680 --> 00:04:05,360
of like your platform for your graphical

116
00:04:05,360 --> 00:04:06,400
user interface it's

117
00:04:06,400 --> 00:04:08,159
really cool technology doing some

118
00:04:08,159 --> 00:04:09,680
research in this again

119
00:04:09,680 --> 00:04:11,840
i i was kind of shocked by all of the

120
00:04:11,840 --> 00:04:13,599
applications that are that are built on

121
00:04:13,599 --> 00:04:14,560
electron uh

122
00:04:14,560 --> 00:04:17,600
from slack to discord to twitch

123
00:04:17,600 --> 00:04:19,519
and even facebook messenger that i don't

124
00:04:19,519 --> 00:04:21,358
have on here but uh there's you know and

125
00:04:21,358 --> 00:04:22,479
there's there's many more

126
00:04:22,479 --> 00:04:24,240
next i want to talk about the uh mythic

127
00:04:24,240 --> 00:04:26,240
c2 framework so it's a

128
00:04:26,240 --> 00:04:27,759
command and control framework open

129
00:04:27,759 --> 00:04:29,280
source um

130
00:04:29,280 --> 00:04:32,880
cross platform uh post exploit uh

131
00:04:32,880 --> 00:04:36,400
exploitation red teaming framework um so

132
00:04:36,400 --> 00:04:38,479
for those of you that are not into um

133
00:04:38,479 --> 00:04:39,759
red teaming and might not

134
00:04:39,759 --> 00:04:42,720
know too much about command and control

135
00:04:42,720 --> 00:04:43,680
this is uh

136
00:04:43,680 --> 00:04:46,880
you know the server that i have uh

137
00:04:46,880 --> 00:04:50,479
you know up in the cloud or on-prem

138
00:04:50,479 --> 00:04:53,440
uh as a red teamer well i will actually

139
00:04:53,440 --> 00:04:54,720
you know

140
00:04:54,720 --> 00:04:58,560
send commands to a a victim

141
00:04:58,560 --> 00:05:01,520
endpoint that i i might have been able

142
00:05:01,520 --> 00:05:03,120
to uh compromise

143
00:05:03,120 --> 00:05:06,320
um with an exploit uh and

144
00:05:06,320 --> 00:05:08,240
exploit being one of these payloads that

145
00:05:08,240 --> 00:05:09,360
uh that

146
00:05:09,360 --> 00:05:11,680
works with mythic and that the the

147
00:05:11,680 --> 00:05:13,199
really cool thing about mythic is that

148
00:05:13,199 --> 00:05:14,800
it's modular you know you can build your

149
00:05:14,800 --> 00:05:16,000
own payloads

150
00:05:16,000 --> 00:05:17,680
to work with mythic uh there's a lot of

151
00:05:17,680 --> 00:05:20,160
documentation um that can tell you how

152
00:05:20,160 --> 00:05:20,479
to

153
00:05:20,479 --> 00:05:22,160
to begin building those and then there's

154
00:05:22,160 --> 00:05:24,160
a quite a few

155
00:05:24,160 --> 00:05:27,520
already built payloads for you

156
00:05:27,520 --> 00:05:30,320
um and anyway the the mythic c2

157
00:05:30,320 --> 00:05:31,919
framework is super powerful

158
00:05:31,919 --> 00:05:34,000
i use it quite often in red team

159
00:05:34,000 --> 00:05:35,199
operations

160
00:05:35,199 --> 00:05:37,120
um since i've really been working in mac

161
00:05:37,120 --> 00:05:39,280
environments for for a while

162
00:05:39,280 --> 00:05:41,680
um it has been my my go to see c2

163
00:05:41,680 --> 00:05:42,880
framework uh

164
00:05:42,880 --> 00:05:44,880
it's created by cody thomas really

165
00:05:44,880 --> 00:05:47,199
really talented uh developer for spectre

166
00:05:47,199 --> 00:05:47,680
ops

167
00:05:47,680 --> 00:05:50,240
he goes by it's a feature at uh on

168
00:05:50,240 --> 00:05:51,520
twitter

169
00:05:51,520 --> 00:05:53,840
um it's a little bit about the the the

170
00:05:53,840 --> 00:05:55,520
payloads that you have

171
00:05:55,520 --> 00:05:58,639
um you have atlas which is a windows c

172
00:05:58,639 --> 00:06:01,520
sharp.net payload you have leviathan

173
00:06:01,520 --> 00:06:02,560
which is a chrome

174
00:06:02,560 --> 00:06:04,479
browser extension payload and that was

175
00:06:04,479 --> 00:06:06,319
actually developed by

176
00:06:06,319 --> 00:06:09,360
my colleague at uh on the zoom red team

177
00:06:09,360 --> 00:06:12,319
um chris ross i talked about earlier he

178
00:06:12,319 --> 00:06:14,080
goes by zorier he was formerly of

179
00:06:14,080 --> 00:06:15,600
spectreops as well

180
00:06:15,600 --> 00:06:17,919
um there's the apollo payload which is

181
00:06:17,919 --> 00:06:18,960
uh windows c

182
00:06:18,960 --> 00:06:21,759
sharp.net payload there's two mac os

183
00:06:21,759 --> 00:06:24,479
payloads uh there's poseidon which uh

184
00:06:24,479 --> 00:06:27,280
does objective-c calls uh but is written

185
00:06:27,280 --> 00:06:28,560
in golang

186
00:06:28,560 --> 00:06:30,400
that one is created by my colleague

187
00:06:30,400 --> 00:06:32,400
chris ross as well

188
00:06:32,400 --> 00:06:34,560
and um and then of course there's the

189
00:06:34,560 --> 00:06:36,400
atfel payload and that's uh

190
00:06:36,400 --> 00:06:37,759
that's the one that we'll kind of talk

191
00:06:37,759 --> 00:06:39,440
about a little bit more

192
00:06:39,440 --> 00:06:42,960
in this uh in this talk

193
00:06:42,960 --> 00:06:45,199
so yeah the outfield payload um it's

194
00:06:45,199 --> 00:06:47,120
written in javascript for automation

195
00:06:47,120 --> 00:06:48,800
elevation jxa we'll talk a little bit

196
00:06:48,800 --> 00:06:51,280
more about that in the next slide

197
00:06:51,280 --> 00:06:54,479
but it can be executed by uh

198
00:06:54,479 --> 00:06:57,680
lolpin um living off the land binary

199
00:06:57,680 --> 00:07:00,240
uh which is osa script which we'll talk

200
00:07:00,240 --> 00:07:02,800
about here shortly as well

201
00:07:02,800 --> 00:07:06,880
and it uses objective-c api calls

202
00:07:06,880 --> 00:07:09,280
it also supports download cradles which

203
00:07:09,280 --> 00:07:10,639
is really cool

204
00:07:10,639 --> 00:07:13,599
means that you can actually you know

205
00:07:13,599 --> 00:07:15,520
write a line of osa a one-liner of osa

206
00:07:15,520 --> 00:07:17,039
script that will

207
00:07:17,039 --> 00:07:20,000
reach out to uh you know wherever you're

208
00:07:20,000 --> 00:07:21,840
hosting a malicious payload pull it down

209
00:07:21,840 --> 00:07:22,160
and

210
00:07:22,160 --> 00:07:26,479
execute it all in one line um uh

211
00:07:26,479 --> 00:07:30,080
apfel is limited by jxa language um

212
00:07:30,080 --> 00:07:32,000
and i'll talk a little bit about what i

213
00:07:32,000 --> 00:07:34,160
mean with that uh jxa is

214
00:07:34,160 --> 00:07:35,599
really powerful but it has some

215
00:07:35,599 --> 00:07:37,680
limitations and it has some things that

216
00:07:37,680 --> 00:07:38,160
are

217
00:07:38,160 --> 00:07:41,280
really painful uh but

218
00:07:41,280 --> 00:07:44,160
but overall it's really worth digging

219
00:07:44,160 --> 00:07:44,639
into

220
00:07:44,639 --> 00:07:47,599
if you're going to be doing any uh mac

221
00:07:47,599 --> 00:07:49,360
os red teaming

222
00:07:49,360 --> 00:07:53,280
okay osa script um so

223
00:07:53,280 --> 00:07:56,400
osa is the open source architecture

224
00:07:56,400 --> 00:07:59,840
it's native uh mac os and

225
00:07:59,840 --> 00:08:03,199
it's uh it was initially designed

226
00:08:03,199 --> 00:08:05,520
for for the use with applescript uh but

227
00:08:05,520 --> 00:08:07,360
it will work with any osa language you

228
00:08:07,360 --> 00:08:08,639
can actually

229
00:08:08,639 --> 00:08:11,120
uh let me get my laser pointer here you

230
00:08:11,120 --> 00:08:12,240
can actually

231
00:08:12,240 --> 00:08:15,280
um run this osa lang command

232
00:08:15,280 --> 00:08:18,639
um and it will show you the

233
00:08:18,639 --> 00:08:21,520
osa languages that are installed on the

234
00:08:21,520 --> 00:08:23,680
mac one of them being javascript which

235
00:08:23,680 --> 00:08:24,720
is jxa

236
00:08:24,720 --> 00:08:28,400
just talked about um and you can

237
00:08:28,400 --> 00:08:31,520
uh osa script can write sorry execute

238
00:08:31,520 --> 00:08:32,320
scripts

239
00:08:32,320 --> 00:08:34,640
uh written plain text on the in the

240
00:08:34,640 --> 00:08:35,440
terminal

241
00:08:35,440 --> 00:08:37,360
or also compiled scripts and there's an

242
00:08:37,360 --> 00:08:39,120
example of that here

243
00:08:39,120 --> 00:08:42,719
osa script tac e which is the execute

244
00:08:42,719 --> 00:08:44,959
flag and then you can tell it's

245
00:08:44,959 --> 00:08:46,720
something like say hello world that's

246
00:08:46,720 --> 00:08:48,240
actually um

247
00:08:48,240 --> 00:08:50,560
an apple script command that will have

248
00:08:50,560 --> 00:08:51,360
your mac

249
00:08:51,360 --> 00:08:54,399
use the apple voice uh to actually

250
00:08:54,399 --> 00:08:56,560
speak hello world through your speakers

251
00:08:56,560 --> 00:08:58,160
um or

252
00:08:58,160 --> 00:09:00,800
again uh you can do a compiled script

253
00:09:00,800 --> 00:09:03,120
run a compile script with osa script and

254
00:09:03,120 --> 00:09:06,240
you know it's got the the dot scpt

255
00:09:06,240 --> 00:09:08,480
suffix dot script suffix at the end of a

256
00:09:08,480 --> 00:09:09,519
file name

257
00:09:09,519 --> 00:09:12,320
javascript for automation um javascript

258
00:09:12,320 --> 00:09:13,519
for automation again

259
00:09:13,519 --> 00:09:17,279
super powerful um it

260
00:09:17,279 --> 00:09:20,480
can control applications and uh

261
00:09:20,480 --> 00:09:23,760
mac os using javascript which is

262
00:09:23,760 --> 00:09:25,600
pretty crazy when you think about it you

263
00:09:25,600 --> 00:09:28,000
can use a web language to actually

264
00:09:28,000 --> 00:09:31,040
um take you know communicate with

265
00:09:31,040 --> 00:09:33,839
the the operating system system on a mac

266
00:09:33,839 --> 00:09:34,320
um

267
00:09:34,320 --> 00:09:36,480
it's kind of like powershell less than

268
00:09:36,480 --> 00:09:37,839
version one

269
00:09:37,839 --> 00:09:41,519
um and uh it can send apple events

270
00:09:41,519 --> 00:09:45,120
to applications local or remote

271
00:09:45,120 --> 00:09:47,279
um and it you know apple events are

272
00:09:47,279 --> 00:09:49,680
actually applescript commands

273
00:09:49,680 --> 00:09:52,640
and their parameters and it's a it's a

274
00:09:52,640 --> 00:09:53,120
it's an

275
00:09:53,120 --> 00:09:56,560
ipc mechanism right so uh in a process

276
00:09:56,560 --> 00:09:58,000
communication so

277
00:09:58,000 --> 00:10:02,399
all of your um mac os applications

278
00:10:02,399 --> 00:10:04,800
have the have the ability to send apple

279
00:10:04,800 --> 00:10:05,600
events

280
00:10:05,600 --> 00:10:07,440
to other applications and receive apple

281
00:10:07,440 --> 00:10:08,880
events uh from other

282
00:10:08,880 --> 00:10:11,040
applications and you can actually uh

283
00:10:11,040 --> 00:10:12,800
take a look at those

284
00:10:12,800 --> 00:10:14,640
um for any program that you want by

285
00:10:14,640 --> 00:10:15,839
looking at the uh

286
00:10:15,839 --> 00:10:19,760
the uh script editor editor in mac os

287
00:10:19,760 --> 00:10:24,240
um jxa is uh invoked via osa script

288
00:10:24,240 --> 00:10:27,360
among other ways um and you can do that

289
00:10:27,360 --> 00:10:28,720
with uh

290
00:10:28,720 --> 00:10:32,640
again with a text uh on the terminal

291
00:10:32,640 --> 00:10:35,680
with the javascript file or um using the

292
00:10:35,680 --> 00:10:38,720
uh rebel interpreter uh and

293
00:10:38,720 --> 00:10:40,959
i show an example here uh the reply

294
00:10:40,959 --> 00:10:42,959
interpreter you simply just uh

295
00:10:42,959 --> 00:10:45,839
on the in the terminal type osa script

296
00:10:45,839 --> 00:10:46,160
tech

297
00:10:46,160 --> 00:10:48,320
l for language and then specify

298
00:10:48,320 --> 00:10:49,440
javascript

299
00:10:49,440 --> 00:10:51,120
and then tag i for interactive and then

300
00:10:51,120 --> 00:10:53,200
you're going to get this uh prompt

301
00:10:53,200 --> 00:10:55,200
this is just you know same thing that

302
00:10:55,200 --> 00:10:56,320
would happen

303
00:10:56,320 --> 00:10:57,760
you know if you typed in python on the

304
00:10:57,760 --> 00:10:58,959
command line you would get the the

305
00:10:58,959 --> 00:11:00,480
referral interpreter and you can

306
00:11:00,480 --> 00:11:02,959
type uh python commands in this case you

307
00:11:02,959 --> 00:11:04,800
just type javascript commands

308
00:11:04,800 --> 00:11:07,200
uh you know name variables whatever

309
00:11:07,200 --> 00:11:08,320
whatever you want however

310
00:11:08,320 --> 00:11:10,640
you which you would normally do in a you

311
00:11:10,640 --> 00:11:11,600
know a

312
00:11:11,600 --> 00:11:15,040
javascript file um and then of course

313
00:11:15,040 --> 00:11:17,040
you got the javascript files you can uh

314
00:11:17,040 --> 00:11:19,680
execute from osa script and you just

315
00:11:19,680 --> 00:11:20,320
give uh

316
00:11:20,320 --> 00:11:22,240
you know you don't need any sort of

317
00:11:22,240 --> 00:11:24,480
flags you just uh file name with

318
00:11:24,480 --> 00:11:27,760
the js suffix and it knows that it's

319
00:11:27,760 --> 00:11:28,240
going to

320
00:11:28,240 --> 00:11:30,560
execute a javascript file and then of

321
00:11:30,560 --> 00:11:31,760
course the other way is

322
00:11:31,760 --> 00:11:34,079
uh you could do the tac l for language

323
00:11:34,079 --> 00:11:35,040
and

324
00:11:35,040 --> 00:11:38,079
specify javascript and then a file

325
00:11:38,079 --> 00:11:41,519
with you know dot txt for the suffix so

326
00:11:41,519 --> 00:11:42,959
you can you can

327
00:11:42,959 --> 00:11:45,360
uh if you have a text file that has

328
00:11:45,360 --> 00:11:46,720
javascript in it you can

329
00:11:46,720 --> 00:11:48,560
execute that using you know by

330
00:11:48,560 --> 00:11:50,000
specifying uh

331
00:11:50,000 --> 00:11:52,480
javascript as the language um and then

332
00:11:52,480 --> 00:11:53,440
finally you have this

333
00:11:53,440 --> 00:11:56,959
uh the terminal text command line text

334
00:11:56,959 --> 00:12:00,160
um where you you know osa script

335
00:12:00,160 --> 00:12:02,240
for the command tacl for the language

336
00:12:02,240 --> 00:12:03,920
which specified javascript and then

337
00:12:03,920 --> 00:12:05,519
attack e for execute

338
00:12:05,519 --> 00:12:07,440
and then in quotes you actually can you

339
00:12:07,440 --> 00:12:09,279
know uh

340
00:12:09,279 --> 00:12:11,760
a one-liner of javascript separated by

341
00:12:11,760 --> 00:12:13,200
uh semicolons and

342
00:12:13,200 --> 00:12:16,480
and um have it again say uh just like we

343
00:12:16,480 --> 00:12:17,920
did in the last example

344
00:12:17,920 --> 00:12:21,120
um hello world so yeah

345
00:12:21,120 --> 00:12:23,279
that's the uh you know the apple script

346
00:12:23,279 --> 00:12:25,360
version versus the javascript version a

347
00:12:25,360 --> 00:12:27,360
little longer in the javascript version

348
00:12:27,360 --> 00:12:30,639
um one of the things i want to draw

349
00:12:30,639 --> 00:12:32,480
attention to is this app dot includes

350
00:12:32,480 --> 00:12:33,760
standard editions

351
00:12:33,760 --> 00:12:36,160
you're going to need to uh use this

352
00:12:36,160 --> 00:12:38,079
include standard additions equals true

353
00:12:38,079 --> 00:12:40,639
to access some of the things that uh for

354
00:12:40,639 --> 00:12:42,000
javascript to access some of the things

355
00:12:42,000 --> 00:12:43,040
that applescript

356
00:12:43,040 --> 00:12:46,240
would access um quick note um

357
00:12:46,240 --> 00:12:49,680
for you can actually send apple events

358
00:12:49,680 --> 00:12:54,160
remotely using remote ipc

359
00:12:54,160 --> 00:12:58,079
and that happens with this eppc protocol

360
00:12:58,079 --> 00:13:00,800
um it was like a needle in a haystack

361
00:13:00,800 --> 00:13:04,240
for me to find out what eppc stood for

362
00:13:04,240 --> 00:13:06,639
i found like one document uh on the

363
00:13:06,639 --> 00:13:07,600
whole web

364
00:13:07,600 --> 00:13:10,880
um and it uh i think i think according

365
00:13:10,880 --> 00:13:11,680
this one document

366
00:13:11,680 --> 00:13:13,600
stands for event program to program

367
00:13:13,600 --> 00:13:15,360
communication so

368
00:13:15,360 --> 00:13:18,720
um i'll i'll go with that um

369
00:13:18,720 --> 00:13:21,200
and it's uh it communicates over port 30

370
00:13:21,200 --> 00:13:23,680
31 or 30 31 i'm not going to get too

371
00:13:23,680 --> 00:13:24,399
much into

372
00:13:24,399 --> 00:13:28,000
to the remote ipc um just note that it's

373
00:13:28,000 --> 00:13:29,120
uh

374
00:13:29,120 --> 00:13:32,320
it's um you know communicating uh

375
00:13:32,320 --> 00:13:35,760
apple events from one host to another

376
00:13:35,760 --> 00:13:38,720
and uh over the network and i actually

377
00:13:38,720 --> 00:13:39,760
have another uh

378
00:13:39,760 --> 00:13:42,320
talk on mac os lateral movement where i

379
00:13:42,320 --> 00:13:42,800
i

380
00:13:42,800 --> 00:13:45,839
describe uh using uh apple strip

381
00:13:45,839 --> 00:13:49,839
as as excuse me as a lateral movement um

382
00:13:49,839 --> 00:13:53,440
tactic uh and finally uh the jxa

383
00:13:53,440 --> 00:13:54,079
cookbook

384
00:13:54,079 --> 00:13:57,440
is uh pretty much the most inclusive

385
00:13:57,440 --> 00:14:01,279
uh document there is for for uh

386
00:14:01,279 --> 00:14:04,720
for jxa um it's got it's all

387
00:14:04,720 --> 00:14:06,480
it's pretty big got a lot of stuff in

388
00:14:06,480 --> 00:14:08,639
there uh i highly recommend

389
00:14:08,639 --> 00:14:10,800
digging into that um and you could

390
00:14:10,800 --> 00:14:12,560
really really get into the

391
00:14:12,560 --> 00:14:15,360
meat and potatoes of jxa with that um

392
00:14:15,360 --> 00:14:17,040
there's some stuff that's uh

393
00:14:17,040 --> 00:14:19,760
you know not there but um it is what it

394
00:14:19,760 --> 00:14:21,360
is uh jxa

395
00:14:21,360 --> 00:14:23,440
is one of those uh things that apple

396
00:14:23,440 --> 00:14:24,560
started develop

397
00:14:24,560 --> 00:14:26,720
at one point and then just stopped and

398
00:14:26,720 --> 00:14:27,680
of course apple

399
00:14:27,680 --> 00:14:30,000
themselves do not have very much

400
00:14:30,000 --> 00:14:32,800
documentation so this is kind of a

401
00:14:32,800 --> 00:14:36,079
github repository uh where some

402
00:14:36,079 --> 00:14:37,920
knowledgeable people decided to share

403
00:14:37,920 --> 00:14:40,000
what they know about

404
00:14:40,000 --> 00:14:42,639
jxa

405
00:14:43,040 --> 00:14:46,000
the jxa and objective c bridge this is

406
00:14:46,000 --> 00:14:46,560
really

407
00:14:46,560 --> 00:14:50,560
the um the power behind jxa is this

408
00:14:50,560 --> 00:14:54,720
objective c bridge this is how uh jxa

409
00:14:54,720 --> 00:14:56,880
javascript is able to actually make

410
00:14:56,880 --> 00:14:58,320
objective cd

411
00:14:58,320 --> 00:15:02,880
api calls most api call object c api

412
00:15:02,880 --> 00:15:03,279
calls

413
00:15:03,279 --> 00:15:07,680
can be called from it um some cannot

414
00:15:07,680 --> 00:15:10,240
but you have to convert your objective c

415
00:15:10,240 --> 00:15:11,040
naming to

416
00:15:11,040 --> 00:15:14,560
jxa naming right like you can't just

417
00:15:14,560 --> 00:15:17,279
call javascript and expect it to make an

418
00:15:17,279 --> 00:15:18,959
objective c call you have to do some

419
00:15:18,959 --> 00:15:20,320
conversion there

420
00:15:20,320 --> 00:15:23,760
um and you have this object

421
00:15:23,760 --> 00:15:27,040
object this deals with the bridge and

422
00:15:27,040 --> 00:15:28,000
how the javascript

423
00:15:28,000 --> 00:15:30,880
engine actually accesses and interprets

424
00:15:30,880 --> 00:15:32,079
objective c

425
00:15:32,079 --> 00:15:34,639
objects so you you need this bridge for

426
00:15:34,639 --> 00:15:35,199
java

427
00:15:35,199 --> 00:15:37,360
for the javascript engine to actually be

428
00:15:37,360 --> 00:15:38,959
be able to interpret

429
00:15:38,959 --> 00:15:42,720
and uh and access objective c

430
00:15:42,720 --> 00:15:45,680
and then you got this uh this dollar

431
00:15:45,680 --> 00:15:46,079
sign

432
00:15:46,079 --> 00:15:49,199
object and this is the access point for

433
00:15:49,199 --> 00:15:50,160
all objective c

434
00:15:50,160 --> 00:15:53,519
function the uh jxa cookbook actually

435
00:15:53,519 --> 00:15:55,199
has a cool analogy for

436
00:15:55,199 --> 00:15:58,320
for um how the dollar sign object and

437
00:15:58,320 --> 00:16:00,399
the obviously objects work together

438
00:16:00,399 --> 00:16:03,440
and in that the object c object builds

439
00:16:03,440 --> 00:16:04,560
the bridges

440
00:16:04,560 --> 00:16:06,880
uh which the dollar sign object uses to

441
00:16:06,880 --> 00:16:07,680
walk across

442
00:16:07,680 --> 00:16:11,040
so down here in this example

443
00:16:11,040 --> 00:16:14,079
well first we have to import a framework

444
00:16:14,079 --> 00:16:14,399
that

445
00:16:14,399 --> 00:16:16,320
that we want to use so if there's

446
00:16:16,320 --> 00:16:17,440
there's a um

447
00:16:17,440 --> 00:16:19,600
you know a function or an object inside

448
00:16:19,600 --> 00:16:20,639
our framework

449
00:16:20,639 --> 00:16:22,639
we have to import it and we're going to

450
00:16:22,639 --> 00:16:24,079
use the dollar sign

451
00:16:24,079 --> 00:16:27,199
again that's kind of the um the access

452
00:16:27,199 --> 00:16:29,600
or the uh we're walking across this

453
00:16:29,600 --> 00:16:31,440
absolute bridge that we're building to

454
00:16:31,440 --> 00:16:32,399
the import

455
00:16:32,399 --> 00:16:35,519
uh or or using this import function and

456
00:16:35,519 --> 00:16:38,399
we're grabbing the uh the coco framework

457
00:16:38,399 --> 00:16:41,519
um down here we're uh

458
00:16:41,519 --> 00:16:43,279
defining a variable we're calling this

459
00:16:43,279 --> 00:16:45,360
host and we got this

460
00:16:45,360 --> 00:16:47,759
nso host object which comes from the

461
00:16:47,759 --> 00:16:49,279
coco framework

462
00:16:49,279 --> 00:16:51,120
and we're using this dollar sign object

463
00:16:51,120 --> 00:16:52,959
again to kind of walk across that

464
00:16:52,959 --> 00:16:55,360
objective-c bridge that we built to this

465
00:16:55,360 --> 00:16:58,160
to this object and then we have the

466
00:16:58,160 --> 00:16:59,839
current host function

467
00:16:59,839 --> 00:17:02,880
uh from the ns host object that we

468
00:17:02,880 --> 00:17:04,000
ultimately

469
00:17:04,000 --> 00:17:07,439
uh want to call so

470
00:17:07,439 --> 00:17:10,559
finally in order for us to kind of see

471
00:17:10,559 --> 00:17:14,160
the results of uh you know a

472
00:17:14,160 --> 00:17:16,640
objective c regix a objective c bridge

473
00:17:16,640 --> 00:17:17,199
function

474
00:17:17,199 --> 00:17:19,919
call we actually have to unwrap the

475
00:17:19,919 --> 00:17:21,039
object

476
00:17:21,039 --> 00:17:24,400
um so so again we have this

477
00:17:24,400 --> 00:17:27,839
objective c our obviously uh

478
00:17:27,839 --> 00:17:31,440
uh bridge and we're we're calling

479
00:17:31,440 --> 00:17:33,360
we're bringing this back to this deep

480
00:17:33,360 --> 00:17:35,039
unwrap function

481
00:17:35,039 --> 00:17:38,320
and uh we're getting that host addresses

482
00:17:38,320 --> 00:17:42,240
um variable

483
00:17:42,240 --> 00:17:44,240
from the current host function that that

484
00:17:44,240 --> 00:17:45,919
we called here so host stop

485
00:17:45,919 --> 00:17:48,880
addresses so this host variable and then

486
00:17:48,880 --> 00:17:49,679
we want to see

487
00:17:49,679 --> 00:17:51,280
the addresses in order to see that in

488
00:17:51,280 --> 00:17:52,720
javascript we have to use

489
00:17:52,720 --> 00:17:55,200
um an unwrap function so we have deep

490
00:17:55,200 --> 00:17:56,640
unwrapped and there's also an unwrap

491
00:17:56,640 --> 00:17:57,600
function that

492
00:17:57,600 --> 00:17:59,600
i'm not going to get into but you get

493
00:17:59,600 --> 00:18:02,159
the idea

494
00:18:03,520 --> 00:18:06,400
so objective c and electron apps so

495
00:18:06,400 --> 00:18:07,360
taking all this

496
00:18:07,360 --> 00:18:10,640
and you know all this so far we we know

497
00:18:10,640 --> 00:18:13,600
what uh osa script is now we know what

498
00:18:13,600 --> 00:18:14,080
uh

499
00:18:14,080 --> 00:18:17,520
jxa is now we know what an electron app

500
00:18:17,520 --> 00:18:18,960
is now how do we put all this together

501
00:18:18,960 --> 00:18:22,320
we want to be able to

502
00:18:22,320 --> 00:18:26,240
somehow um use javascript to

503
00:18:26,240 --> 00:18:29,200
to make objective c calls uh from our

504
00:18:29,200 --> 00:18:30,320
electron app

505
00:18:30,320 --> 00:18:33,600
well i mean we don't have jxa and

506
00:18:33,600 --> 00:18:36,080
you know per se in our electron app we

507
00:18:36,080 --> 00:18:37,679
do have javascript but we need to be

508
00:18:37,679 --> 00:18:38,480
able to somehow

509
00:18:38,480 --> 00:18:41,760
specifically use jxa in our electron app

510
00:18:41,760 --> 00:18:43,840
and the way we can do that this is what

511
00:18:43,840 --> 00:18:45,039
i discovered since um

512
00:18:45,039 --> 00:18:48,480
since electron uses node uh gs

513
00:18:48,480 --> 00:18:51,440
one can use uh osa script and electron

514
00:18:51,440 --> 00:18:53,520
and you do that because there's actually

515
00:18:53,520 --> 00:18:54,240
a

516
00:18:54,240 --> 00:18:57,679
npm called osa script by mikhail

517
00:18:57,679 --> 00:18:59,440
brevik so i did a lot of searching and

518
00:18:59,440 --> 00:19:00,960
and found this and i was

519
00:19:00,960 --> 00:19:02,480
like oh my god this is this is what i

520
00:19:02,480 --> 00:19:05,200
need um so

521
00:19:05,200 --> 00:19:08,480
we use osa script and thus jxa with no

522
00:19:08,480 --> 00:19:10,320
jx

523
00:19:10,320 --> 00:19:13,440
and um to do that i'm going to go

524
00:19:13,440 --> 00:19:14,000
through

525
00:19:14,000 --> 00:19:15,679
i guess through a few steps here i'm not

526
00:19:15,679 --> 00:19:17,039
going to get too detailed because i

527
00:19:17,039 --> 00:19:18,000
don't you know because of time

528
00:19:18,000 --> 00:19:19,200
constraints

529
00:19:19,200 --> 00:19:22,080
uh but you know you first are going to

530
00:19:22,080 --> 00:19:22,559
need

531
00:19:22,559 --> 00:19:26,080
uh to install node.js

532
00:19:26,080 --> 00:19:29,280
and then and then electron

533
00:19:29,280 --> 00:19:32,960
uh when you before you install electron

534
00:19:32,960 --> 00:19:35,039
um there's actually something that you

535
00:19:35,039 --> 00:19:36,640
need to do there's a weird issue and you

536
00:19:36,640 --> 00:19:38,000
have to give right permissions to

537
00:19:38,000 --> 00:19:40,880
the node underscore modules directory to

538
00:19:40,880 --> 00:19:41,760
all users

539
00:19:41,760 --> 00:19:43,679
so as you can see in this example i'm

540
00:19:43,679 --> 00:19:45,679
doing this i'm giving permissions to

541
00:19:45,679 --> 00:19:47,679
to all the users for this uh node

542
00:19:47,679 --> 00:19:49,120
modules directory

543
00:19:49,120 --> 00:19:50,960
um that's going to allow us to install

544
00:19:50,960 --> 00:19:53,039
electron globally and then you can see i

545
00:19:53,039 --> 00:19:54,559
do that here from npm

546
00:19:54,559 --> 00:19:57,600
with the attack g for global um and i

547
00:19:57,600 --> 00:19:58,559
get that

548
00:19:58,559 --> 00:20:00,960
latest version here and then you're

549
00:20:00,960 --> 00:20:02,640
gonna have to initialize the electron

550
00:20:02,640 --> 00:20:03,440
project

551
00:20:03,440 --> 00:20:06,640
using npm emit and then um

552
00:20:06,640 --> 00:20:08,000
and then finally here this is where

553
00:20:08,000 --> 00:20:09,440
you're going to install the osa script

554
00:20:09,440 --> 00:20:11,360
module into your project directory and

555
00:20:11,360 --> 00:20:11,679
that's

556
00:20:11,679 --> 00:20:14,799
um use npm install osa script tag tag

557
00:20:14,799 --> 00:20:15,679
save

558
00:20:15,679 --> 00:20:19,039
um again i don't want to go through

559
00:20:19,039 --> 00:20:21,360
uh all these details but i do have a

560
00:20:21,360 --> 00:20:22,799
detailed step-by-step

561
00:20:22,799 --> 00:20:25,280
uh instructions and tutorial on how to

562
00:20:25,280 --> 00:20:25,840
do all

563
00:20:25,840 --> 00:20:27,919
everything i'm talking about uh in this

564
00:20:27,919 --> 00:20:30,000
uh in this talk

565
00:20:30,000 --> 00:20:32,799
uh and with with some support files as

566
00:20:32,799 --> 00:20:34,159
well tutorial files

567
00:20:34,159 --> 00:20:36,720
on my medium blog which you can find

568
00:20:36,720 --> 00:20:37,440
here

569
00:20:37,440 --> 00:20:39,280
i'll actually keep have the links for a

570
00:20:39,280 --> 00:20:40,320
lot of things at the end of this

571
00:20:40,320 --> 00:20:43,840
presentation and share them as well

572
00:20:43,919 --> 00:20:46,400
um and this is this is an example of the

573
00:20:46,400 --> 00:20:47,360
objective c

574
00:20:47,360 --> 00:20:50,080
bridge and a javascript file uh being

575
00:20:50,080 --> 00:20:51,280
utilized so

576
00:20:51,280 --> 00:20:53,280
the first thing here that happens is

577
00:20:53,280 --> 00:20:54,960
you're going to define a variable we're

578
00:20:54,960 --> 00:20:56,880
just going to call this osa script

579
00:20:56,880 --> 00:20:58,799
you're going to use this require

580
00:20:58,799 --> 00:21:00,880
function and again this is this is a

581
00:21:00,880 --> 00:21:02,000
javascript file inside

582
00:21:02,000 --> 00:21:05,039
your your electron app um and we have

583
00:21:05,039 --> 00:21:06,080
the argument

584
00:21:06,080 --> 00:21:08,720
in quotes osa script that's saying hey

585
00:21:08,720 --> 00:21:10,080
we want our you know

586
00:21:10,080 --> 00:21:12,320
telling node that we want to use um the

587
00:21:12,320 --> 00:21:14,880
os osa script module that we

588
00:21:14,880 --> 00:21:18,080
have saved in our project so this

589
00:21:18,080 --> 00:21:21,120
this evolve function uh

590
00:21:21,120 --> 00:21:23,760
in osa and the osa script module allows

591
00:21:23,760 --> 00:21:24,880
you to

592
00:21:24,880 --> 00:21:28,159
uh use java script commands basically

593
00:21:28,159 --> 00:21:28,960
written

594
00:21:28,960 --> 00:21:32,159
directly as text so uh

595
00:21:32,159 --> 00:21:33,919
we'll talk about the other way that you

596
00:21:33,919 --> 00:21:35,440
you can use it next but in this

597
00:21:35,440 --> 00:21:37,360
particular

598
00:21:37,360 --> 00:21:39,440
example we're using eval and then we

599
00:21:39,440 --> 00:21:41,200
have we create this

600
00:21:41,200 --> 00:21:43,679
script variable where we're putting this

601
00:21:43,679 --> 00:21:45,600
text and you'll notice this is

602
00:21:45,600 --> 00:21:47,440
the same this is basically this is a

603
00:21:47,440 --> 00:21:48,799
one-liner from

604
00:21:48,799 --> 00:21:50,720
the last example for basically getting

605
00:21:50,720 --> 00:21:53,039
the the host addresses for

606
00:21:53,039 --> 00:21:56,320
from a system and then you're going to

607
00:21:56,320 --> 00:21:57,600
use the osa

608
00:21:57,600 --> 00:21:59,200
script function from the osd script

609
00:21:59,200 --> 00:22:00,640
module and you're going to call

610
00:22:00,640 --> 00:22:05,440
as your argument this descript variable

611
00:22:05,440 --> 00:22:07,919
the rest of this here these are this

612
00:22:07,919 --> 00:22:10,640
it's in my tutorial files too

613
00:22:10,640 --> 00:22:14,320
but this is just a way for for you to uh

614
00:22:14,320 --> 00:22:17,840
get the data back to your um browser

615
00:22:17,840 --> 00:22:21,440
uh console um and and then get errors

616
00:22:21,440 --> 00:22:23,360
back if there's errors

617
00:22:23,360 --> 00:22:25,919
um so yeah the same command but a

618
00:22:25,919 --> 00:22:26,640
one-liner

619
00:22:26,640 --> 00:22:28,960
in the terminal would look uh like this

620
00:22:28,960 --> 00:22:32,000
so running the osa script command

621
00:22:32,000 --> 00:22:34,559
tac l for language and then specifying

622
00:22:34,559 --> 00:22:35,840
javascript

623
00:22:35,840 --> 00:22:39,039
uh attack e for execute and then here's

624
00:22:39,039 --> 00:22:42,159
again the javascript uh

625
00:22:42,159 --> 00:22:44,720
line separated by semicolons and again

626
00:22:44,720 --> 00:22:46,320
you're going to get your

627
00:22:46,320 --> 00:22:49,120
you're going to return the addresses of

628
00:22:49,120 --> 00:22:52,479
the host machine that you're on

629
00:22:53,440 --> 00:22:55,919
so how do we weaponize this um this is

630
00:22:55,919 --> 00:22:57,440
this is why the app fell

631
00:22:57,440 --> 00:22:59,679
payload and the mythic c2 uh were

632
00:22:59,679 --> 00:23:01,039
important to talk about at the beginning

633
00:23:01,039 --> 00:23:02,720
of this because again this is kind of

634
00:23:02,720 --> 00:23:05,039
this is the framework that i used quite

635
00:23:05,039 --> 00:23:07,679
a bit in red team operations

636
00:23:07,679 --> 00:23:09,200
this is kind of like the proof of

637
00:23:09,200 --> 00:23:11,919
concept of how you can actually

638
00:23:11,919 --> 00:23:15,280
use um an electron app on on a red team

639
00:23:15,280 --> 00:23:16,320
exercise so

640
00:23:16,320 --> 00:23:18,559
you uh you can actually create a

641
00:23:18,559 --> 00:23:19,440
javascript

642
00:23:19,440 --> 00:23:22,240
file that holds the app fell payload and

643
00:23:22,240 --> 00:23:23,600
it's uh the info pail is just a

644
00:23:23,600 --> 00:23:24,720
javascript file

645
00:23:24,720 --> 00:23:27,840
and embed that into your uh into the

646
00:23:27,840 --> 00:23:28,480
directory

647
00:23:28,480 --> 00:23:29,760
in your electron app as you're

648
00:23:29,760 --> 00:23:31,600
developing it

649
00:23:31,600 --> 00:23:34,720
um so the way you do this

650
00:23:34,720 --> 00:23:36,720
and again we talked about using this dot

651
00:23:36,720 --> 00:23:38,880
eval function in the last example this

652
00:23:38,880 --> 00:23:40,240
time you're going to use the dot file

653
00:23:40,240 --> 00:23:42,080
function so instead of

654
00:23:42,080 --> 00:23:45,279
you know being able to

655
00:23:45,279 --> 00:23:47,039
run a one line or a variable you're

656
00:23:47,039 --> 00:23:48,320
going to actually call

657
00:23:48,320 --> 00:23:51,520
a javascript file that you have embedded

658
00:23:51,520 --> 00:23:52,320
in your project

659
00:23:52,320 --> 00:23:54,320
uh so in this case we're saying we have

660
00:23:54,320 --> 00:23:56,640
at fell underscore payload.js

661
00:23:56,640 --> 00:23:59,840
so the osa script function is going to

662
00:23:59,840 --> 00:24:02,320
you know call that as an argument again

663
00:24:02,320 --> 00:24:04,400
the stop files of an eval

664
00:24:04,400 --> 00:24:07,440
and all the same feedback uh

665
00:24:07,440 --> 00:24:11,520
into the council here uh in errors

666
00:24:11,520 --> 00:24:14,400
you could probably if you wanted to take

667
00:24:14,400 --> 00:24:16,480
the whole app fail payload maybe and

668
00:24:16,480 --> 00:24:17,600
separate it

669
00:24:17,600 --> 00:24:21,279
by semicolons and and use the dot eval

670
00:24:21,279 --> 00:24:22,320
function for that

671
00:24:22,320 --> 00:24:24,640
but uh you know that's really long so

672
00:24:24,640 --> 00:24:25,840
that's kind of the reason

673
00:24:25,840 --> 00:24:28,799
why you know i would use this dot file

674
00:24:28,799 --> 00:24:30,960
and embed the file

675
00:24:30,960 --> 00:24:34,240
into my uh my electron app directory

676
00:24:34,240 --> 00:24:36,159
uh i mean that would just be a mess and

677
00:24:36,159 --> 00:24:38,000
it's much easier just to have a

678
00:24:38,000 --> 00:24:39,360
javascript file that has

679
00:24:39,360 --> 00:24:42,080
that fell payload again it's super long

680
00:24:42,080 --> 00:24:42,880
um

681
00:24:42,880 --> 00:24:44,240
the other thing that we could do though

682
00:24:44,240 --> 00:24:46,480
is we could go back and use the the eval

683
00:24:46,480 --> 00:24:49,600
function and we could actually

684
00:24:49,600 --> 00:24:53,200
uh we could have our app uh

685
00:24:53,200 --> 00:24:56,480
call a jxa download cradle um

686
00:24:56,480 --> 00:24:59,440
and you can download mexico to host it

687
00:24:59,440 --> 00:25:00,799
at fell payload

688
00:25:00,799 --> 00:25:04,159
or some other jxa file

689
00:25:04,159 --> 00:25:07,200
with a with a one liner and

690
00:25:07,200 --> 00:25:09,919
uh this is this is the jxa download

691
00:25:09,919 --> 00:25:11,279
cradle

692
00:25:11,279 --> 00:25:14,480
you could you could put this into

693
00:25:14,480 --> 00:25:17,919
this one liner here into the uh

694
00:25:17,919 --> 00:25:19,840
that script variable that we had in the

695
00:25:19,840 --> 00:25:21,039
very first example

696
00:25:21,039 --> 00:25:24,640
using the eval function in the osa

697
00:25:24,640 --> 00:25:28,159
script uh node module and

698
00:25:28,159 --> 00:25:30,400
yeah it's really simple just uh you put

699
00:25:30,400 --> 00:25:31,520
this in quotes

700
00:25:31,520 --> 00:25:33,679
uh osa script tech l for the language

701
00:25:33,679 --> 00:25:35,919
javascript and attack e to execute then

702
00:25:35,919 --> 00:25:38,320
you notice this eval function here

703
00:25:38,320 --> 00:25:41,679
so what that eval function is going to

704
00:25:41,679 --> 00:25:42,320
do

705
00:25:42,320 --> 00:25:45,039
is it's actually going to not only

706
00:25:45,039 --> 00:25:46,720
download your malicious payload but it's

707
00:25:46,720 --> 00:25:48,240
going to execute it so all in one line

708
00:25:48,240 --> 00:25:50,480
you're going to download say you have

709
00:25:50,480 --> 00:25:54,320
a nat fail payload hosted on evil.com

710
00:25:54,320 --> 00:25:56,320
it's going to download it here and then

711
00:25:56,320 --> 00:25:57,840
this eval function's actually gonna

712
00:25:57,840 --> 00:25:59,120
execute it so

713
00:25:59,120 --> 00:26:00,880
yeah pretty cool if you can you can

714
00:26:00,880 --> 00:26:02,960
sneak this into um

715
00:26:02,960 --> 00:26:06,080
an electron app uh have it have the app

716
00:26:06,080 --> 00:26:10,000
uh you know do some other functionality

717
00:26:10,000 --> 00:26:13,440
uh that works with the pretext for uh

718
00:26:13,440 --> 00:26:15,760
your social engineering or your phishing

719
00:26:15,760 --> 00:26:16,960
campaign

720
00:26:16,960 --> 00:26:20,000
and um you know the the uh

721
00:26:20,000 --> 00:26:22,640
the victim runs the electronic

722
00:26:22,640 --> 00:26:23,520
application

723
00:26:23,520 --> 00:26:25,360
sees the normal behavior that they're

724
00:26:25,360 --> 00:26:27,039
supposed to see but in the background

725
00:26:27,039 --> 00:26:30,080
you actually have uh this um

726
00:26:30,080 --> 00:26:33,840
osa script uh note module

727
00:26:33,840 --> 00:26:35,679
um downloading and that fell payload and

728
00:26:35,679 --> 00:26:38,480
executing it all in one shot uh some

729
00:26:38,480 --> 00:26:38,960
more

730
00:26:38,960 --> 00:26:41,039
some more ways to weaponize after i had

731
00:26:41,039 --> 00:26:42,159
written my medium

732
00:26:42,159 --> 00:26:44,559
uh article or my medium uh blog post

733
00:26:44,559 --> 00:26:46,159
discussing all this

734
00:26:46,159 --> 00:26:49,600
um atomic shell uh had

735
00:26:49,600 --> 00:26:53,039
had uh i had shared it in a um in a

736
00:26:53,039 --> 00:26:56,240
forum and he had uh he had read it and

737
00:26:56,240 --> 00:26:59,679
he had actually uh taken this and

738
00:26:59,679 --> 00:27:04,640
created a uh an electron uh

739
00:27:04,799 --> 00:27:08,559
visual studio code um extension

740
00:27:08,559 --> 00:27:11,279
and used it in a red team operation

741
00:27:11,279 --> 00:27:12,480
according to him so

742
00:27:12,480 --> 00:27:14,320
he was successful with that so that's

743
00:27:14,320 --> 00:27:16,320
pretty cool um

744
00:27:16,320 --> 00:27:17,919
to finish the story about creating the

745
00:27:17,919 --> 00:27:20,080
mac os process hacker application that i

746
00:27:20,080 --> 00:27:21,679
was talking about

747
00:27:21,679 --> 00:27:24,960
and going beyond this red team use of

748
00:27:24,960 --> 00:27:28,000
electron applications or using um

749
00:27:28,000 --> 00:27:32,080
jxa the jxa objective c bridge

750
00:27:32,080 --> 00:27:34,000
in red team operations and electron

751
00:27:34,000 --> 00:27:35,279
applications

752
00:27:35,279 --> 00:27:38,159
um i i was trying to figure out how i

753
00:27:38,159 --> 00:27:38,799
could uh

754
00:27:38,799 --> 00:27:41,919
actually uh get into some of these you

755
00:27:41,919 --> 00:27:42,399
know

756
00:27:42,399 --> 00:27:46,000
uh deep low-level processes from the mac

757
00:27:46,000 --> 00:27:46,559
os

758
00:27:46,559 --> 00:27:49,840
uh using jxa and how i did that is

759
00:27:49,840 --> 00:27:51,039
actually uh

760
00:27:51,039 --> 00:27:54,720
there's a researcher a mac os researcher

761
00:27:54,720 --> 00:27:58,240
jerem bradley who created a application

762
00:27:58,240 --> 00:27:59,840
called true true

763
00:27:59,840 --> 00:28:03,200
which really digs into uh the

764
00:28:03,200 --> 00:28:05,039
parent child relationship with processes

765
00:28:05,039 --> 00:28:06,320
on a mac os

766
00:28:06,320 --> 00:28:08,320
um apple would like you to believe that

767
00:28:08,320 --> 00:28:09,600
uh every

768
00:28:09,600 --> 00:28:12,960
you know every process has one parent

769
00:28:12,960 --> 00:28:16,159
but you know jaren actually uh was able

770
00:28:16,159 --> 00:28:16,720
to

771
00:28:16,720 --> 00:28:19,760
dig in and show uh the true parent-child

772
00:28:19,760 --> 00:28:22,080
relationships what the true parent of

773
00:28:22,080 --> 00:28:25,440
uh child processes are and uh again did

774
00:28:25,440 --> 00:28:26,640
that with truthery

775
00:28:26,640 --> 00:28:29,600
um he wrote that and swift so what i had

776
00:28:29,600 --> 00:28:31,120
to do is i had to take that and i

777
00:28:31,120 --> 00:28:32,960
had to convert the swift into

778
00:28:32,960 --> 00:28:34,480
objective-c first of all

779
00:28:34,480 --> 00:28:36,159
and then i had to take uh the

780
00:28:36,159 --> 00:28:37,840
objective-c apis and

781
00:28:37,840 --> 00:28:41,279
again do that jxa

782
00:28:41,279 --> 00:28:43,200
and that would allow me to really dig in

783
00:28:43,200 --> 00:28:44,799
these mac os processes

784
00:28:44,799 --> 00:28:47,279
i was able to get uh pretty far with

785
00:28:47,279 --> 00:28:48,559
that i was able to

786
00:28:48,559 --> 00:28:51,279
use a really cool jxa feature that i i

787
00:28:51,279 --> 00:28:53,279
think i might have just touched on

788
00:28:53,279 --> 00:28:56,399
um and that is uh binding functions so

789
00:28:56,399 --> 00:28:58,720
you can use c libraries even dynamic

790
00:28:58,720 --> 00:29:02,320
libraries dilips as well um

791
00:29:02,320 --> 00:29:04,880
use the bind function to tell jxa how to

792
00:29:04,880 --> 00:29:05,840
call

793
00:29:05,840 --> 00:29:07,919
those other functions those c functions

794
00:29:07,919 --> 00:29:10,240
or those dialog functions

795
00:29:10,240 --> 00:29:11,760
and then you need to get a handle on the

796
00:29:11,760 --> 00:29:14,000
dial up so there's an example here

797
00:29:14,000 --> 00:29:17,440
uh so lib proc is the uh is the native

798
00:29:17,440 --> 00:29:18,399
areas the c

799
00:29:18,399 --> 00:29:21,919
library that that i wanted to uh

800
00:29:21,919 --> 00:29:24,960
to access uh the functions of and uh

801
00:29:24,960 --> 00:29:26,880
in order to do that on the mac os i

802
00:29:26,880 --> 00:29:29,039
couldn't find the the c library but i

803
00:29:29,039 --> 00:29:30,240
did find this lid proc

804
00:29:30,240 --> 00:29:33,279
die lib so i was able to actually um

805
00:29:33,279 --> 00:29:35,840
access that and uh so here i uh variable

806
00:29:35,840 --> 00:29:37,279
when i create this uh

807
00:29:37,279 --> 00:29:40,960
uh a variable lib proc path uh that goes

808
00:29:40,960 --> 00:29:42,880
here uh where this dialog actually is on

809
00:29:42,880 --> 00:29:43,279
the

810
00:29:43,279 --> 00:29:46,640
mac os system um i need to get a handle

811
00:29:46,640 --> 00:29:50,240
like i said on the dye lib uh itself

812
00:29:50,240 --> 00:29:52,399
so here i create a variable and a lib

813
00:29:52,399 --> 00:29:54,000
lib proc handle

814
00:29:54,000 --> 00:29:57,120
um and i use this dl open function

815
00:29:57,120 --> 00:30:00,240
and uh give it the uh parameter uh of

816
00:30:00,240 --> 00:30:01,279
this lib proc

817
00:30:01,279 --> 00:30:03,200
path um and that's how i open that

818
00:30:03,200 --> 00:30:04,640
dynamic library

819
00:30:04,640 --> 00:30:08,240
um this this die uh dl open um

820
00:30:08,240 --> 00:30:10,720
actually i have to i had to i don't show

821
00:30:10,720 --> 00:30:11,919
it in this code but i had to

822
00:30:11,919 --> 00:30:14,960
actually uh uh bind that function as

823
00:30:14,960 --> 00:30:15,520
well

824
00:30:15,520 --> 00:30:17,120
so after it's bound you see i can just

825
00:30:17,120 --> 00:30:18,640
use the the

826
00:30:18,640 --> 00:30:21,919
dollar object a dollar sign object again

827
00:30:21,919 --> 00:30:22,799
to

828
00:30:22,799 --> 00:30:24,880
walk across the objective-c bridge to

829
00:30:24,880 --> 00:30:27,360
access

830
00:30:27,360 --> 00:30:31,120
the dl-open function after i get a

831
00:30:31,120 --> 00:30:33,600
handle on the die lib i have to get a

832
00:30:33,600 --> 00:30:34,399
handle on the

833
00:30:34,399 --> 00:30:35,919
function that i want to use inside of

834
00:30:35,919 --> 00:30:37,600
that dial up so in this case it's proc

835
00:30:37,600 --> 00:30:38,159
list all

836
00:30:38,159 --> 00:30:41,200
apps you can see here i have to use the

837
00:30:41,200 --> 00:30:44,799
dlcim to actually get a handle on that

838
00:30:44,799 --> 00:30:46,480
function

839
00:30:46,480 --> 00:30:48,480
and so here the first parameter is the

840
00:30:48,480 --> 00:30:50,000
lib prog handle which is here

841
00:30:50,000 --> 00:30:53,760
the handle uh to the to the lid proc die

842
00:30:53,760 --> 00:30:54,399
lip

843
00:30:54,399 --> 00:30:57,760
and then um the actual function that i

844
00:30:57,760 --> 00:30:59,200
want the handle on which is proc

845
00:30:59,200 --> 00:31:01,360
underscore list all pits that's going to

846
00:31:01,360 --> 00:31:03,440
give me a list of all the

847
00:31:03,440 --> 00:31:06,720
the process ids finally

848
00:31:06,720 --> 00:31:09,840
um i need to bind the function proc list

849
00:31:09,840 --> 00:31:10,960
all pids

850
00:31:10,960 --> 00:31:14,720
uh from the library uh dynamic library

851
00:31:14,720 --> 00:31:17,360
in order for me to call it with that uh

852
00:31:17,360 --> 00:31:19,360
that dollar sign

853
00:31:19,360 --> 00:31:21,440
uh walk across that objective c bridge

854
00:31:21,440 --> 00:31:22,559
so here uh

855
00:31:22,559 --> 00:31:25,919
i got the op c uh object

856
00:31:25,919 --> 00:31:28,880
and then the uh bind function function

857
00:31:28,880 --> 00:31:31,200
and i'm telling it uh

858
00:31:31,200 --> 00:31:34,000
this is this is where that uh signature

859
00:31:34,000 --> 00:31:34,720
uh

860
00:31:34,720 --> 00:31:37,279
comes into play uh the function

861
00:31:37,279 --> 00:31:38,799
signature from

862
00:31:38,799 --> 00:31:41,679
the lib proc dialed for uh proc

863
00:31:41,679 --> 00:31:43,200
underscore list all pits

864
00:31:43,200 --> 00:31:44,880
has to be exactly how it's written in

865
00:31:44,880 --> 00:31:48,240
the source code so in the source code

866
00:31:48,240 --> 00:31:50,480
the return value is going to be integer

867
00:31:50,480 --> 00:31:52,240
uh one parameter is this

868
00:31:52,240 --> 00:31:54,480
uh void and then the other one is an

869
00:31:54,480 --> 00:31:56,640
integer so this is exactly how

870
00:31:56,640 --> 00:31:59,679
you'll see this proc list alters

871
00:31:59,679 --> 00:32:00,799
function

872
00:32:00,799 --> 00:32:04,480
uh uh defined in the

873
00:32:04,480 --> 00:32:07,760
uh in the lib proc uh

874
00:32:07,760 --> 00:32:11,679
c library so yeah this uh this

875
00:32:11,679 --> 00:32:14,640
really allowed me to dig into the os

876
00:32:14,640 --> 00:32:15,840
processes

877
00:32:15,840 --> 00:32:19,279
but i got stuck um but i really did i

878
00:32:19,279 --> 00:32:21,200
found some really cool stuff

879
00:32:21,200 --> 00:32:23,679
uh my d my team can do on red team

880
00:32:23,679 --> 00:32:24,720
operations but

881
00:32:24,720 --> 00:32:26,880
i was unable to complete with the

882
00:32:26,880 --> 00:32:28,080
original uh

883
00:32:28,080 --> 00:32:31,600
task was at least up to right now

884
00:32:31,600 --> 00:32:34,320
and the reason is is that uh the most

885
00:32:34,320 --> 00:32:36,480
important function that i need

886
00:32:36,480 --> 00:32:40,080
from the lib proxy library

887
00:32:40,080 --> 00:32:43,440
is the uh or in in this case uh from lid

888
00:32:43,440 --> 00:32:44,000
proc

889
00:32:44,000 --> 00:32:47,360
dial it um is the function pit info

890
00:32:47,360 --> 00:32:51,120
and um the reason uh

891
00:32:51,120 --> 00:32:53,360
i really can't use that or haven't

892
00:32:53,360 --> 00:32:55,440
figured out a way to use that

893
00:32:55,440 --> 00:32:57,679
is that it has a required argument that

894
00:32:57,679 --> 00:32:59,200
is a pointer to

895
00:32:59,200 --> 00:33:02,159
a specific c struct which is a proc

896
00:33:02,159 --> 00:33:03,440
underscore psd

897
00:33:03,440 --> 00:33:08,240
info and i so i found that jxa does

898
00:33:08,240 --> 00:33:10,240
not have an easy way to do this and in

899
00:33:10,240 --> 00:33:12,000
fact there might not be a way at all i'm

900
00:33:12,000 --> 00:33:13,360
not sure i haven't been able to find it

901
00:33:13,360 --> 00:33:15,200
and nobody's been able to

902
00:33:15,200 --> 00:33:18,480
uh that i've talked to so far so

903
00:33:18,480 --> 00:33:20,080
desperate times call for desperate

904
00:33:20,080 --> 00:33:21,679
measures um

905
00:33:21,679 --> 00:33:23,519
i called on my own friend my old friend

906
00:33:23,519 --> 00:33:26,559
stack overflow and

907
00:33:26,559 --> 00:33:28,880
i have had exactly zero responses from

908
00:33:28,880 --> 00:33:30,240
my question

909
00:33:30,240 --> 00:33:33,600
so please i beg of you if you happen

910
00:33:33,600 --> 00:33:35,840
to be one of the only other people

911
00:33:35,840 --> 00:33:37,679
besides me in the world that seem to

912
00:33:37,679 --> 00:33:40,399
have a stack overflow account uh today

913
00:33:40,399 --> 00:33:43,200
uh please go and upvote my question

914
00:33:43,200 --> 00:33:44,720
click this little up arrow i

915
00:33:44,720 --> 00:33:47,600
would greatly appreciate it um and if

916
00:33:47,600 --> 00:33:48,000
you can

917
00:33:48,000 --> 00:33:50,240
answer this question please for the love

918
00:33:50,240 --> 00:33:51,679
of everything good in this world

919
00:33:51,679 --> 00:33:54,640
do i hope i would really um kind of

920
00:33:54,640 --> 00:33:56,480
remove that roadblock that i have and i

921
00:33:56,480 --> 00:33:57,600
would love to uh

922
00:33:57,600 --> 00:33:59,440
talk to you and collaborate with you on

923
00:33:59,440 --> 00:34:00,880
on

924
00:34:00,880 --> 00:34:02,559
helping me finish this project be

925
00:34:02,559 --> 00:34:04,799
amazing so

926
00:34:04,799 --> 00:34:07,279
that's it uh i want to thank you all

927
00:34:07,279 --> 00:34:09,199
again so much for taking the time

928
00:34:09,199 --> 00:34:11,918
to come and listen to this talk i really

929
00:34:11,918 --> 00:34:12,639
hope you took

930
00:34:12,639 --> 00:34:14,800
something from it i hope you were able

931
00:34:14,800 --> 00:34:17,040
to um

932
00:34:17,040 --> 00:34:18,879
if you hadn't heard anything about osa

933
00:34:18,879 --> 00:34:20,879
script or jxa

934
00:34:20,879 --> 00:34:22,639
um you know took something from that or

935
00:34:22,639 --> 00:34:23,918
if you had you know

936
00:34:23,918 --> 00:34:26,239
uh really got to what the meat of this

937
00:34:26,239 --> 00:34:28,000
talk was about and that you know

938
00:34:28,000 --> 00:34:30,320
using uh objective c calls in your

939
00:34:30,320 --> 00:34:31,599
electron apps

940
00:34:31,599 --> 00:34:33,280
uh i really hope that you took something

941
00:34:33,280 --> 00:34:34,960
from that again thank you so much for

942
00:34:34,960 --> 00:34:37,280
from grim and everyone at grim con for

943
00:34:37,280 --> 00:34:38,879
putting on this uh convention

944
00:34:38,879 --> 00:34:41,119
and for inviting me to speak uh here's a

945
00:34:41,119 --> 00:34:42,480
list of all the references for

946
00:34:42,480 --> 00:34:44,159
everything that i talked about in this

947
00:34:44,159 --> 00:34:46,480
um thank you all so much and i'll be

948
00:34:46,480 --> 00:34:47,359
i'll be here

949
00:34:47,359 --> 00:34:48,960
on discord for any questions that you

950
00:34:48,960 --> 00:34:53,199
have and enjoy the rest of the

951
00:34:57,800 --> 00:35:00,800
conference

