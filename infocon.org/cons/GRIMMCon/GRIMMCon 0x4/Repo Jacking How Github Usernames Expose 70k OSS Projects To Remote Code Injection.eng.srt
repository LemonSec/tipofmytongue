1
00:00:01,360 --> 00:00:04,160
um so welcome everyone to my talk uh

2
00:00:04,160 --> 00:00:05,759
about repo jacking and how github

3
00:00:05,759 --> 00:00:07,839
usernames expose 70 000 open source

4
00:00:07,839 --> 00:00:09,519
projects to remote code injection

5
00:00:09,519 --> 00:00:11,200
i'm indiana maro i work for security

6
00:00:11,200 --> 00:00:12,799
innovation and today i'll be talking

7
00:00:12,799 --> 00:00:14,240
about repo jacking which is

8
00:00:14,240 --> 00:00:17,039
essentially a novel supply chain

9
00:00:17,039 --> 00:00:18,880
dependency vulnerability

10
00:00:18,880 --> 00:00:20,960
that's extremely widespread in open

11
00:00:20,960 --> 00:00:21,920
source projects

12
00:00:21,920 --> 00:00:23,840
so we'll kind of explore how that works

13
00:00:23,840 --> 00:00:25,519
you know how to exploit it

14
00:00:25,519 --> 00:00:27,359
how widespread is and then we'll also

15
00:00:27,359 --> 00:00:29,119
talk about some remediation strategies

16
00:00:29,119 --> 00:00:31,199
um and also kind of supply chain attacks

17
00:00:31,199 --> 00:00:32,640
in general

18
00:00:32,640 --> 00:00:34,719
so when i start talking about supply

19
00:00:34,719 --> 00:00:36,079
chain attacks i'm not talking about

20
00:00:36,079 --> 00:00:38,160
hardware supply chain tax which is like

21
00:00:38,160 --> 00:00:40,079
a whole different beast i'm talking

22
00:00:40,079 --> 00:00:41,920
about software supply chain attacks

23
00:00:41,920 --> 00:00:43,040
and i can't really talk about that

24
00:00:43,040 --> 00:00:44,480
without talking about soil winds

25
00:00:44,480 --> 00:00:45,680
obviously everyone's heard of

26
00:00:45,680 --> 00:00:48,000
solar winds in the coming uh the past

27
00:00:48,000 --> 00:00:48,800
few months

28
00:00:48,800 --> 00:00:50,800
um a huge hack you know and that was a

29
00:00:50,800 --> 00:00:52,239
software supply chain attack

30
00:00:52,239 --> 00:00:54,239
um there's been a lot of other notable

31
00:00:54,239 --> 00:00:55,840
ones like mimecast asus

32
00:00:55,840 --> 00:00:57,920
ccleaner in the past past couple of

33
00:00:57,920 --> 00:00:59,199
years um it's kind of a

34
00:00:59,199 --> 00:01:01,280
it's a whole attack field which is kind

35
00:01:01,280 --> 00:01:03,440
of on the on the rise

36
00:01:03,440 --> 00:01:06,000
um specifically you know with solarwinds

37
00:01:06,000 --> 00:01:06,479
um

38
00:01:06,479 --> 00:01:08,960
it's a it's a type of supply chain

39
00:01:08,960 --> 00:01:10,479
attack where you're hacking this company

40
00:01:10,479 --> 00:01:12,000
and this company is

41
00:01:12,000 --> 00:01:14,000
used by a bunch of other companies but i

42
00:01:14,000 --> 00:01:15,600
want to talk about a slightly different

43
00:01:15,600 --> 00:01:17,280
type of supply chain attack which is

44
00:01:17,280 --> 00:01:19,040
dependency supply chain attack and more

45
00:01:19,040 --> 00:01:20,799
specifically open source supply chain

46
00:01:20,799 --> 00:01:21,840
attacks

47
00:01:21,840 --> 00:01:23,280
so everyone uses open source right

48
00:01:23,280 --> 00:01:25,040
everyone knows open source according to

49
00:01:25,040 --> 00:01:26,479
the show on the type 2020 state of the

50
00:01:26,479 --> 00:01:28,320
software supply chain report

51
00:01:28,320 --> 00:01:30,720
uh 90 of modern application is just open

52
00:01:30,720 --> 00:01:32,000
source which makes sense right could use

53
00:01:32,000 --> 00:01:33,360
a web framework you use

54
00:01:33,360 --> 00:01:36,320
a pre-made ssl library or whatever um so

55
00:01:36,320 --> 00:01:37,520
this is obviously a very

56
00:01:37,520 --> 00:01:40,799
important aspect of your application to

57
00:01:40,799 --> 00:01:43,119
to secure um cyber attacks in this range

58
00:01:43,119 --> 00:01:43,920
are growing

59
00:01:43,920 --> 00:01:46,640
apparently up to 430 year-to-year growth

60
00:01:46,640 --> 00:01:47,119
um

61
00:01:47,119 --> 00:01:48,159
because you know targeting this open

62
00:01:48,159 --> 00:01:49,600
source library if you can get this one

63
00:01:49,600 --> 00:01:50,320
library

64
00:01:50,320 --> 00:01:52,399
uh you can hack you know and break into

65
00:01:52,399 --> 00:01:54,159
a lot of other things

66
00:01:54,159 --> 00:01:55,520
so it's extremely important to kind of

67
00:01:55,520 --> 00:01:57,200
secure these um because you know they're

68
00:01:57,200 --> 00:01:59,439
a huge part of an application

69
00:01:59,439 --> 00:02:01,920
um and we're talking about open source a

70
00:02:01,920 --> 00:02:02,479
lot of

71
00:02:02,479 --> 00:02:04,719
open source is stored on github right

72
00:02:04,719 --> 00:02:05,759
github is

73
00:02:05,759 --> 00:02:07,360
a website that hosts most of the world's

74
00:02:07,360 --> 00:02:08,959
open source um

75
00:02:08,959 --> 00:02:10,878
and and basically everything anytime

76
00:02:10,878 --> 00:02:12,080
you're you're looking at open source

77
00:02:12,080 --> 00:02:13,120
applications it's most likely to be

78
00:02:13,120 --> 00:02:14,560
stored in github

79
00:02:14,560 --> 00:02:16,800
so if it's important to like secure open

80
00:02:16,800 --> 00:02:18,000
source it's even more

81
00:02:18,000 --> 00:02:19,760
important to secure github because

82
00:02:19,760 --> 00:02:21,120
github hosts all these right so all

83
00:02:21,120 --> 00:02:22,000
these libraries that everyone

84
00:02:22,000 --> 00:02:24,720
is using um github is the the source of

85
00:02:24,720 --> 00:02:26,160
truth for those

86
00:02:26,160 --> 00:02:27,040
so you know if you could find a

87
00:02:27,040 --> 00:02:28,319
vulnerability in github you could

88
00:02:28,319 --> 00:02:30,160
potentially exploit it to exploit

89
00:02:30,160 --> 00:02:32,560
you know some some some other dependency

90
00:02:32,560 --> 00:02:34,239
down the line

91
00:02:34,239 --> 00:02:36,640
um and so when we're talking about open

92
00:02:36,640 --> 00:02:37,440
source

93
00:02:37,440 --> 00:02:39,200
uh kind of supply chain attacks and

94
00:02:39,200 --> 00:02:40,800
vulnerabilities um they're slightly

95
00:02:40,800 --> 00:02:42,319
different from attacks like solar wind

96
00:02:42,319 --> 00:02:42,879
attack

97
00:02:42,879 --> 00:02:45,040
um because in solar wind like the the

98
00:02:45,040 --> 00:02:46,480
attackers went after kind of the biggest

99
00:02:46,480 --> 00:02:48,080
target right solar wind because solar

100
00:02:48,080 --> 00:02:48,800
wind is

101
00:02:48,800 --> 00:02:50,800
as big and a lot of people depend on it

102
00:02:50,800 --> 00:02:52,000
and such um

103
00:02:52,000 --> 00:02:53,360
but with open source and dependency

104
00:02:53,360 --> 00:02:55,440
supply chain tax uh

105
00:02:55,440 --> 00:02:57,519
the the valuable targets might not be so

106
00:02:57,519 --> 00:02:59,360
big so this is a website

107
00:02:59,360 --> 00:03:01,120
uh libraries i o and they maintain a

108
00:03:01,120 --> 00:03:02,959
page called unseen infrastructure

109
00:03:02,959 --> 00:03:04,879
and the premise is basically they make a

110
00:03:04,879 --> 00:03:07,040
list of libraries that are immensely

111
00:03:07,040 --> 00:03:09,200
popular or immensely dependent upon

112
00:03:09,200 --> 00:03:10,959
but aren't uh aren't very there aren't

113
00:03:10,959 --> 00:03:12,480
many contributors so like if we look at

114
00:03:12,480 --> 00:03:13,360
the list down here

115
00:03:13,360 --> 00:03:15,680
we've got like concat map for example um

116
00:03:15,680 --> 00:03:17,440
it's got 800 000

117
00:03:17,440 --> 00:03:19,120
dependent repositories but it's only got

118
00:03:19,120 --> 00:03:20,560
like 30 stars on github

119
00:03:20,560 --> 00:03:22,239
and one contributor so essentially

120
00:03:22,239 --> 00:03:24,000
there's one contributor this one

121
00:03:24,000 --> 00:03:25,920
application is used by a whole bunch of

122
00:03:25,920 --> 00:03:27,360
others and these are all

123
00:03:27,360 --> 00:03:29,760
kind of different popular ones that uses

124
00:03:29,760 --> 00:03:32,319
so you recognize a lot of these right

125
00:03:32,319 --> 00:03:35,280
so so all of these are loading in code

126
00:03:35,280 --> 00:03:35,599
from

127
00:03:35,599 --> 00:03:38,319
this one contributor so it's kind of a

128
00:03:38,319 --> 00:03:39,599
really valuable target

129
00:03:39,599 --> 00:03:41,440
um if we actually look over here like

130
00:03:41,440 --> 00:03:43,360
angular for example the third one down

131
00:03:43,360 --> 00:03:45,280
angularjs is actually what's used in the

132
00:03:45,280 --> 00:03:46,799
front end for solar winds

133
00:03:46,799 --> 00:03:48,480
so if someone want to you know break

134
00:03:48,480 --> 00:03:50,239
into solar ones again all they'd have to

135
00:03:50,239 --> 00:03:51,120
do would be to

136
00:03:51,120 --> 00:03:52,959
you know break into this one app this

137
00:03:52,959 --> 00:03:54,799
concat map it'll get loaded in by

138
00:03:54,799 --> 00:03:57,280
angular angular get loaded in by

139
00:03:57,280 --> 00:04:00,159
solarwinds and then you're in um but you

140
00:04:00,159 --> 00:04:01,280
know maybe you don't want to

141
00:04:01,280 --> 00:04:02,799
break into it maybe it's too hard you

142
00:04:02,799 --> 00:04:04,560
won't go the easy route and maybe you

143
00:04:04,560 --> 00:04:04,879
just

144
00:04:04,879 --> 00:04:06,799
ask the developer if you could have it

145
00:04:06,799 --> 00:04:08,560
um this actually happened in the past

146
00:04:08,560 --> 00:04:10,560
back in 2018 there's a very popular

147
00:04:10,560 --> 00:04:12,640
library called event stream

148
00:04:12,640 --> 00:04:14,000
same type of deal right loaded in by

149
00:04:14,000 --> 00:04:16,160
lots of things um and

150
00:04:16,160 --> 00:04:18,560
it was maintained by one guy um and he

151
00:04:18,560 --> 00:04:20,079
was on to other projects right he just

152
00:04:20,079 --> 00:04:20,959
had that kind of sitting in the

153
00:04:20,959 --> 00:04:21,680
background

154
00:04:21,680 --> 00:04:23,520
um so someone went came up to him and

155
00:04:23,520 --> 00:04:25,040
asked hey can i have this

156
00:04:25,040 --> 00:04:26,800
library like can i maintain it and he

157
00:04:26,800 --> 00:04:28,720
said sure passed it over

158
00:04:28,720 --> 00:04:30,960
and soon after the the person was

159
00:04:30,960 --> 00:04:32,160
actually a malicious attacker

160
00:04:32,160 --> 00:04:34,000
and they loaded in malware to that

161
00:04:34,000 --> 00:04:36,160
library um specifically targeting crypto

162
00:04:36,160 --> 00:04:36,720
wallet

163
00:04:36,720 --> 00:04:39,919
um they were actually caught but um

164
00:04:39,919 --> 00:04:42,479
the not the person unfortunately but

165
00:04:42,479 --> 00:04:43,919
they were caught in their attempt

166
00:04:43,919 --> 00:04:45,280
but only because they used the

167
00:04:45,280 --> 00:04:47,360
deprecated api in the malicious code

168
00:04:47,360 --> 00:04:49,680
um if they had to use that deprecate api

169
00:04:49,680 --> 00:04:51,120
there'd be no warnings that came that

170
00:04:51,120 --> 00:04:51,840
would come up

171
00:04:51,840 --> 00:04:53,280
um and to this day they might not be

172
00:04:53,280 --> 00:04:55,360
caught um so you know that's kind of an

173
00:04:55,360 --> 00:04:56,639
example of someone

174
00:04:56,639 --> 00:05:00,160
of one of those really core libraries

175
00:05:00,160 --> 00:05:02,080
um being taken over but let's say you

176
00:05:02,080 --> 00:05:03,440
don't want to find like a vulnerability

177
00:05:03,440 --> 00:05:04,479
one

178
00:05:04,479 --> 00:05:06,800
and you don't want to ask the developer

179
00:05:06,800 --> 00:05:07,919
because you know you don't want to talk

180
00:05:07,919 --> 00:05:08,560
to people

181
00:05:08,560 --> 00:05:11,919
um q repo jacking so that's where repo

182
00:05:11,919 --> 00:05:12,560
jacking

183
00:05:12,560 --> 00:05:14,400
comes in i'm going to talk i'm going to

184
00:05:14,400 --> 00:05:15,520
kind of get a little story about how i

185
00:05:15,520 --> 00:05:16,560
actually

186
00:05:16,560 --> 00:05:18,960
ran into repo jacking so it started with

187
00:05:18,960 --> 00:05:20,000
either engagement

188
00:05:20,000 --> 00:05:21,680
um working for a big client and doing

189
00:05:21,680 --> 00:05:23,440
you know a standard source code review

190
00:05:23,440 --> 00:05:24,800
so looking through the dependencies and

191
00:05:24,800 --> 00:05:27,759
such and i run into a github url

192
00:05:27,759 --> 00:05:29,440
so they're they're linking directly to a

193
00:05:29,440 --> 00:05:31,280
github url um

194
00:05:31,280 --> 00:05:33,840
and you know loading code from that so i

195
00:05:33,840 --> 00:05:34,560
search it up

196
00:05:34,560 --> 00:05:36,720
i follow the user so whatever user is

197
00:05:36,720 --> 00:05:38,479
pointing to and when i try to browse to

198
00:05:38,479 --> 00:05:40,479
that user i get a 404 error user not

199
00:05:40,479 --> 00:05:40,880
found

200
00:05:40,880 --> 00:05:42,639
from github so it's kind of interesting

201
00:05:42,639 --> 00:05:44,400
because they're clearly loading code

202
00:05:44,400 --> 00:05:44,720
from

203
00:05:44,720 --> 00:05:46,720
from somewhere so then it browse to the

204
00:05:46,720 --> 00:05:48,479
full you know repository

205
00:05:48,479 --> 00:05:51,520
um and it directs me to a repository but

206
00:05:51,520 --> 00:05:53,039
for a different user

207
00:05:53,039 --> 00:05:54,560
so i was getting redirected to to a

208
00:05:54,560 --> 00:05:56,080
different user's repository

209
00:05:56,080 --> 00:05:57,840
that was really weird because i thought

210
00:05:57,840 --> 00:05:59,520
hey you know this github link is

211
00:05:59,520 --> 00:06:01,360
pointing towards this user

212
00:06:01,360 --> 00:06:03,840
so what i did is i went onto github

213
00:06:03,840 --> 00:06:05,759
registered a new user uh with the same

214
00:06:05,759 --> 00:06:06,560
username

215
00:06:06,560 --> 00:06:08,639
and it worked and then i create a new

216
00:06:08,639 --> 00:06:10,639
repository uh with the same name

217
00:06:10,639 --> 00:06:13,440
and now this this uh this code that i

218
00:06:13,440 --> 00:06:13,840
was

219
00:06:13,840 --> 00:06:15,759
auditing essentially was loading code

220
00:06:15,759 --> 00:06:17,840
from this newly created user

221
00:06:17,840 --> 00:06:19,919
um and that's kind of that's the premise

222
00:06:19,919 --> 00:06:21,199
of repo jacking

223
00:06:21,199 --> 00:06:23,759
um so what happens is github allows

224
00:06:23,759 --> 00:06:24,800
username reviews

225
00:06:24,800 --> 00:06:27,280
so when someone renames or deletes a

226
00:06:27,280 --> 00:06:29,360
user their username on github

227
00:06:29,360 --> 00:06:31,120
it's going to allow you to anyone to

228
00:06:31,120 --> 00:06:33,120
re-register it and any kind of previous

229
00:06:33,120 --> 00:06:34,319
urls pointing to that

230
00:06:34,319 --> 00:06:36,400
is are going to be affected because if

231
00:06:36,400 --> 00:06:37,759
you look at like a github

232
00:06:37,759 --> 00:06:39,680
url you've got the github domain right

233
00:06:39,680 --> 00:06:41,680
that's pretty static that's not going to

234
00:06:41,680 --> 00:06:42,240
change

235
00:06:42,240 --> 00:06:44,639
um then you've got the repository right

236
00:06:44,639 --> 00:06:45,600
all the way at the end

237
00:06:45,600 --> 00:06:47,199
um that's kind of dependent on the user

238
00:06:47,199 --> 00:06:48,720
right the user gets to name that

239
00:06:48,720 --> 00:06:50,000
repository but then you have the

240
00:06:50,000 --> 00:06:50,880
username

241
00:06:50,880 --> 00:06:53,199
um and if this username can be reused

242
00:06:53,199 --> 00:06:53,919
and

243
00:06:53,919 --> 00:06:55,280
taken by anyone essentially whenever

244
00:06:55,280 --> 00:06:56,880
someone you know deletes their account

245
00:06:56,880 --> 00:06:57,919
renames their account

246
00:06:57,919 --> 00:06:58,960
um that username is going to be

247
00:06:58,960 --> 00:07:00,880
available to be re-registered and so

248
00:07:00,880 --> 00:07:02,800
anyone could re-register that username

249
00:07:02,800 --> 00:07:05,520
and then recreate a repository and then

250
00:07:05,520 --> 00:07:06,880
you know that they've got full control

251
00:07:06,880 --> 00:07:07,360
over

252
00:07:07,360 --> 00:07:10,240
what's being loaded into code so a

253
00:07:10,240 --> 00:07:11,280
couple points about

254
00:07:11,280 --> 00:07:13,360
repo jacking it's conceptually similar

255
00:07:13,360 --> 00:07:15,280
to s3 bucket sniping or subdomain

256
00:07:15,280 --> 00:07:17,360
takeover if you're familiar with those

257
00:07:17,360 --> 00:07:19,120
we're essentially yeah you're pointing

258
00:07:19,120 --> 00:07:20,720
to a location

259
00:07:20,720 --> 00:07:23,360
online you know an online resource but

260
00:07:23,360 --> 00:07:26,479
that resource is available for anyone to

261
00:07:26,479 --> 00:07:29,840
claim or anyone to register it often

262
00:07:29,840 --> 00:07:31,039
results in code injection

263
00:07:31,039 --> 00:07:32,720
uh just because you know github stores

264
00:07:32,720 --> 00:07:34,720
code so people are often loading code

265
00:07:34,720 --> 00:07:36,479
off of github and running that

266
00:07:36,479 --> 00:07:38,560
um as a dependency so it often results

267
00:07:38,560 --> 00:07:40,479
in code injection which is pretty bad

268
00:07:40,479 --> 00:07:42,160
um and the other kind of scary part is

269
00:07:42,160 --> 00:07:43,280
that you can become vulnerable without

270
00:07:43,280 --> 00:07:44,479
changing your code right

271
00:07:44,479 --> 00:07:45,919
because you might have a dependency that

272
00:07:45,919 --> 00:07:48,160
is pointing towards a github url

273
00:07:48,160 --> 00:07:49,759
right like in this case let's say

274
00:07:49,759 --> 00:07:51,599
twitter bootstrap or whatever

275
00:07:51,599 --> 00:07:53,360
if twitter were to delete their account

276
00:07:53,360 --> 00:07:55,520
anyone can now reclaim that

277
00:07:55,520 --> 00:07:57,360
reuse make a new account with that

278
00:07:57,360 --> 00:07:59,039
twitter name and then you haven't

279
00:07:59,039 --> 00:08:00,240
changed anything in your code

280
00:08:00,240 --> 00:08:02,720
but you're now vulnerable to repo

281
00:08:02,720 --> 00:08:03,840
jacking

282
00:08:03,840 --> 00:08:05,520
and obviously since github is public

283
00:08:05,520 --> 00:08:07,039
anyone can exploit it and it's pretty

284
00:08:07,039 --> 00:08:09,199
trivial to do so

285
00:08:09,199 --> 00:08:11,919
so there's three main scenarios um when

286
00:08:11,919 --> 00:08:13,599
talking about repo jacking that can

287
00:08:13,599 --> 00:08:15,599
make an account essentially or a

288
00:08:15,599 --> 00:08:17,039
repository or url

289
00:08:17,039 --> 00:08:20,160
uh vulnerable to repo jacking scenario

290
00:08:20,160 --> 00:08:20,879
number one

291
00:08:20,879 --> 00:08:22,560
a user deletes their account that's the

292
00:08:22,560 --> 00:08:24,240
obvious one right someone deletes their

293
00:08:24,240 --> 00:08:25,599
account so obviously it's up for grabs

294
00:08:25,599 --> 00:08:26,639
from anyone

295
00:08:26,639 --> 00:08:28,319
and any url pointing through that are

296
00:08:28,319 --> 00:08:29,680
going to uh

297
00:08:29,680 --> 00:08:31,840
get get hijacked essentially and this

298
00:08:31,840 --> 00:08:33,360
actually happened in the while before

299
00:08:33,360 --> 00:08:36,080
so kodi is a video streaming platform

300
00:08:36,080 --> 00:08:36,880
and it has

301
00:08:36,880 --> 00:08:38,479
add-ons and a lot of those add-ons load

302
00:08:38,479 --> 00:08:40,479
code in directly from github

303
00:08:40,479 --> 00:08:42,799
there's a popular add-on that would load

304
00:08:42,799 --> 00:08:43,919
code from github

305
00:08:43,919 --> 00:08:45,920
but then that user deleted their account

306
00:08:45,920 --> 00:08:47,279
so now that's available for anyone and

307
00:08:47,279 --> 00:08:48,640
someone else did actually

308
00:08:48,640 --> 00:08:49,920
create a new account with that same

309
00:08:49,920 --> 00:08:52,240
username and now had control and they

310
00:08:52,240 --> 00:08:53,440
pushed updates and stuff

311
00:08:53,440 --> 00:08:55,440
it wasn't malicious um but it could have

312
00:08:55,440 --> 00:08:56,959
been so that's that's

313
00:08:56,959 --> 00:08:58,399
you know scenario number one so the

314
00:08:58,399 --> 00:08:59,680
thing with scenario one number one

315
00:08:59,680 --> 00:09:00,000
though

316
00:09:00,000 --> 00:09:02,480
is that most likely when user deletes

317
00:09:02,480 --> 00:09:03,920
their account all the repositories are

318
00:09:03,920 --> 00:09:04,480
gone right

319
00:09:04,480 --> 00:09:06,320
so anything that was linking to that url

320
00:09:06,320 --> 00:09:07,839
is gonna break it's all you're going to

321
00:09:07,839 --> 00:09:09,519
get a bunch of 404 errors

322
00:09:09,519 --> 00:09:11,040
and if you and obviously people

323
00:09:11,040 --> 00:09:12,160
investigate that and look into it and

324
00:09:12,160 --> 00:09:14,080
say oh this user doesn't exist anymore

325
00:09:14,080 --> 00:09:15,120
and they're going to change the location

326
00:09:15,120 --> 00:09:17,120
of that dependency so

327
00:09:17,120 --> 00:09:19,279
that's kind of a big flag that when that

328
00:09:19,279 --> 00:09:20,640
goes on and you have to be like a

329
00:09:20,640 --> 00:09:22,880
well-timed attacker to be able to

330
00:09:22,880 --> 00:09:24,480
monitor all the usernames when one gets

331
00:09:24,480 --> 00:09:26,080
deleted re-register it and

332
00:09:26,080 --> 00:09:28,560
and take over that way scenario two

333
00:09:28,560 --> 00:09:30,160
though it's a little more complex

334
00:09:30,160 --> 00:09:32,080
uh the user renames their account so it

335
00:09:32,080 --> 00:09:33,519
sounds the same right because in github

336
00:09:33,519 --> 00:09:34,640
you can rename your account

337
00:09:34,640 --> 00:09:37,279
that's good um but then your old account

338
00:09:37,279 --> 00:09:39,279
name is now available for registering

339
00:09:39,279 --> 00:09:40,800
from anyone

340
00:09:40,800 --> 00:09:42,000
but there's a little something called

341
00:09:42,000 --> 00:09:43,440
repository redirects which i'll talk

342
00:09:43,440 --> 00:09:44,560
about in a second here

343
00:09:44,560 --> 00:09:46,160
which makes this a lot more dangerous

344
00:09:46,160 --> 00:09:48,640
than snare one and the scenario three um

345
00:09:48,640 --> 00:09:50,080
is a little more niche for sure

346
00:09:50,080 --> 00:09:52,000
where a user transfers a repository over

347
00:09:52,000 --> 00:09:54,320
and then they delete their account

348
00:09:54,320 --> 00:09:56,000
and this also sets up a repository

349
00:09:56,000 --> 00:09:58,720
redirect which i'll kind of talk about

350
00:09:58,720 --> 00:10:00,880
so repository redirects this is a

351
00:10:00,880 --> 00:10:03,200
feature of github that was introduced in

352
00:10:03,200 --> 00:10:06,000
2013 and they got a little blog post

353
00:10:06,000 --> 00:10:06,800
about it

354
00:10:06,800 --> 00:10:07,760
and essentially what it is is that

355
00:10:07,760 --> 00:10:10,160
whenever you rename a repository or you

356
00:10:10,160 --> 00:10:10,720
rename

357
00:10:10,720 --> 00:10:12,800
a user github is going to set up some

358
00:10:12,800 --> 00:10:14,240
really handy redirects

359
00:10:14,240 --> 00:10:16,560
so any of your old urls are going to

360
00:10:16,560 --> 00:10:18,320
point to your newer urls

361
00:10:18,320 --> 00:10:20,240
this is really good for like developers

362
00:10:20,240 --> 00:10:22,000
um because you know it doesn't break all

363
00:10:22,000 --> 00:10:22,880
of your code

364
00:10:22,880 --> 00:10:25,680
um so you know so if you're if you're

365
00:10:25,680 --> 00:10:27,279
pointing towards it from somewhere else

366
00:10:27,279 --> 00:10:28,959
uh it'll just redirect you seamlessly so

367
00:10:28,959 --> 00:10:30,800
that's really nice um

368
00:10:30,800 --> 00:10:31,920
unfortunately it can also be really

369
00:10:31,920 --> 00:10:33,360
dangerous because it means that now when

370
00:10:33,360 --> 00:10:35,120
someone changes their username

371
00:10:35,120 --> 00:10:36,880
that usually is up for grabs so anyone

372
00:10:36,880 --> 00:10:38,640
can do it so they're vulnerable to repo

373
00:10:38,640 --> 00:10:39,200
jacking

374
00:10:39,200 --> 00:10:40,720
but no one knows because everything

375
00:10:40,720 --> 00:10:42,720
works the same any old link works the

376
00:10:42,720 --> 00:10:43,839
same and that's what happened in the

377
00:10:43,839 --> 00:10:44,880
case of

378
00:10:44,880 --> 00:10:47,680
uh of that first that first repo jacking

379
00:10:47,680 --> 00:10:49,200
basically was redirecting somewhere else

380
00:10:49,200 --> 00:10:50,399
and even though it was

381
00:10:50,399 --> 00:10:51,760
vulnerable no one knew because it was

382
00:10:51,760 --> 00:10:54,000
getting redirected so here's an example

383
00:10:54,000 --> 00:10:55,760
of this repository redirect and

384
00:10:55,760 --> 00:10:58,880
at work um this is the the github

385
00:10:58,880 --> 00:11:01,120
if you go to github.com twitter

386
00:11:01,120 --> 00:11:02,640
bootstrap and you can do this right now

387
00:11:02,640 --> 00:11:04,000
um it'll redirect you to somewhere

388
00:11:04,000 --> 00:11:06,000
different it'll radioactive github.com

389
00:11:06,000 --> 00:11:08,640
twbs bootstrap and this is because

390
00:11:08,640 --> 00:11:09,920
twitter probably you know create a new

391
00:11:09,920 --> 00:11:10,560
account

392
00:11:10,560 --> 00:11:12,480
specifically for bootstrap and transfer

393
00:11:12,480 --> 00:11:14,240
repository over but the old link will

394
00:11:14,240 --> 00:11:15,360
still work

395
00:11:15,360 --> 00:11:17,440
now when you when that repository direct

396
00:11:17,440 --> 00:11:18,880
is created um

397
00:11:18,880 --> 00:11:20,480
it's all it'll continue working

398
00:11:20,480 --> 00:11:22,079
indefinitely unless

399
00:11:22,079 --> 00:11:25,040
a user is re recreated with the same

400
00:11:25,040 --> 00:11:26,959
username in the same repository right

401
00:11:26,959 --> 00:11:28,000
and that's how you would hijack

402
00:11:28,000 --> 00:11:30,399
it so in this case obviously they won't

403
00:11:30,399 --> 00:11:31,839
do it but imagine that twitter were to

404
00:11:31,839 --> 00:11:33,200
delete their account

405
00:11:33,200 --> 00:11:34,720
anyone could then re-register that

406
00:11:34,720 --> 00:11:37,200
twitter name and they would be able to

407
00:11:37,200 --> 00:11:38,959
recreate that bootstrap repository

408
00:11:38,959 --> 00:11:40,480
and any of the old redirects that would

409
00:11:40,480 --> 00:11:42,000
redirect it to wbs which

410
00:11:42,000 --> 00:11:44,880
is the legitimate repository would now

411
00:11:44,880 --> 00:11:46,480
go to this new repository and code to be

412
00:11:46,480 --> 00:11:48,000
loaded from it

413
00:11:48,000 --> 00:11:50,720
so that's essentially uh repo jacking in

414
00:11:50,720 --> 00:11:51,600
a nutshell

415
00:11:51,600 --> 00:11:54,320
uh once we found this you know obviously

416
00:11:54,320 --> 00:11:56,079
we fixed it pretty quickly

417
00:11:56,079 --> 00:11:57,440
but then we went to github and we said

418
00:11:57,440 --> 00:11:59,120
hey github you know this is a problem

419
00:11:59,120 --> 00:12:01,680
uh because you know all these all these

420
00:12:01,680 --> 00:12:02,959
people who are linking to your urls

421
00:12:02,959 --> 00:12:04,480
don't realize that this is bad

422
00:12:04,480 --> 00:12:07,600
um and as a quick note here this also

423
00:12:07,600 --> 00:12:09,440
works for actual forget operations so i

424
00:12:09,440 --> 00:12:11,040
could get clone or gate push

425
00:12:11,040 --> 00:12:13,600
we'll get redirected um yeah so we went

426
00:12:13,600 --> 00:12:14,480
to github

427
00:12:14,480 --> 00:12:16,079
and and we told them this is bad right

428
00:12:16,079 --> 00:12:17,920
and and they said yes we know about this

429
00:12:17,920 --> 00:12:19,920
um and they kind of pushed us to point

430
00:12:19,920 --> 00:12:21,360
us to a link um

431
00:12:21,360 --> 00:12:23,040
and so this is something they had done a

432
00:12:23,040 --> 00:12:25,040
while ago which they basically

433
00:12:25,040 --> 00:12:26,720
retire the name space which means that

434
00:12:26,720 --> 00:12:28,399
they don't allow the repository to be

435
00:12:28,399 --> 00:12:29,360
recreated

436
00:12:29,360 --> 00:12:31,040
for any project that had more than 100

437
00:12:31,040 --> 00:12:32,720
clones in the week leading up to the

438
00:12:32,720 --> 00:12:35,279
owner's account being renamed or deleted

439
00:12:35,279 --> 00:12:36,560
this kind of mitigation that they

440
00:12:36,560 --> 00:12:38,720
implemented uh to ensure that really big

441
00:12:38,720 --> 00:12:39,839
repositories

442
00:12:39,839 --> 00:12:41,519
aren't being hijacked um so like they've

443
00:12:41,519 --> 00:12:42,800
got examples here for example like

444
00:12:42,800 --> 00:12:44,000
microsoft typescript

445
00:12:44,000 --> 00:12:46,720
or swagger api um those are really big

446
00:12:46,720 --> 00:12:47,760
repositories

447
00:12:47,760 --> 00:12:49,440
um and because of this you know if they

448
00:12:49,440 --> 00:12:50,959
have 100 clones in the week leading up

449
00:12:50,959 --> 00:12:52,399
to their deletion then

450
00:12:52,399 --> 00:12:55,600
no one can can re-register it uh but

451
00:12:55,600 --> 00:12:57,440
we found or i found when i was doing

452
00:12:57,440 --> 00:12:59,600
kind of a more in-depth research on how

453
00:12:59,600 --> 00:13:01,279
where these urls are being used is that

454
00:13:01,279 --> 00:13:03,440
it's not these big repositories which

455
00:13:03,440 --> 00:13:04,639
are vulnerable right all these big

456
00:13:04,639 --> 00:13:06,240
repositories are are going to have

457
00:13:06,240 --> 00:13:08,399
a package manager package somewhere

458
00:13:08,399 --> 00:13:09,519
right so any who's going to want to

459
00:13:09,519 --> 00:13:10,959
access those will just pull them in from

460
00:13:10,959 --> 00:13:11,920
a package manager

461
00:13:11,920 --> 00:13:13,760
but the bigger issue are people who are

462
00:13:13,760 --> 00:13:15,120
doing like a fork

463
00:13:15,120 --> 00:13:17,120
of a common repo and then changing just

464
00:13:17,120 --> 00:13:19,440
a bit of code and then relying on

465
00:13:19,440 --> 00:13:22,560
that direct github url of their fork

466
00:13:22,560 --> 00:13:23,200
right so

467
00:13:23,200 --> 00:13:25,200
it's always if they're basically if the

468
00:13:25,200 --> 00:13:26,560
if the dependency is big enough it's

469
00:13:26,560 --> 00:13:27,600
going to be in the proper package

470
00:13:27,600 --> 00:13:28,160
manager

471
00:13:28,160 --> 00:13:29,440
there's always the small ones that get

472
00:13:29,440 --> 00:13:30,720
you and if we look at like the old

473
00:13:30,720 --> 00:13:32,160
example of concat map

474
00:13:32,160 --> 00:13:34,720
you know that's got that what 30 30

475
00:13:34,720 --> 00:13:36,399
github stars and one contributor you

476
00:13:36,399 --> 00:13:37,040
know what i mean

477
00:13:37,040 --> 00:13:38,880
um so somewhere to look directly to that

478
00:13:38,880 --> 00:13:40,639
you know maybe that that hasn't had more

479
00:13:40,639 --> 00:13:41,839
than 100 clones in

480
00:13:41,839 --> 00:13:44,720
in the past week um so you know so so we

481
00:13:44,720 --> 00:13:46,160
do find i found that this

482
00:13:46,160 --> 00:13:47,440
mitigation can be good for the bigger

483
00:13:47,440 --> 00:13:49,120
ones but definitely doesn't fix this

484
00:13:49,120 --> 00:13:50,720
issue everywhere

485
00:13:50,720 --> 00:13:53,040
so once we knew about this repo jacking

486
00:13:53,040 --> 00:13:55,360
um github wasn't planning on fixing it

487
00:13:55,360 --> 00:13:55,760
or

488
00:13:55,760 --> 00:13:56,880
you know they had their mitigation

489
00:13:56,880 --> 00:13:58,800
already um i decided to kind of take a

490
00:13:58,800 --> 00:14:00,639
look on just how prevalent it is

491
00:14:00,639 --> 00:14:02,240
because you know i've seen that a bunch

492
00:14:02,240 --> 00:14:03,519
of times in code i've probably done it

493
00:14:03,519 --> 00:14:04,720
myself quite a few times

494
00:14:04,720 --> 00:14:07,120
linked directly to a github url so i

495
00:14:07,120 --> 00:14:08,800
want to scan through all open source

496
00:14:08,800 --> 00:14:11,120
code that i could and see just how many

497
00:14:11,120 --> 00:14:13,040
people are linking to github urls you

498
00:14:13,040 --> 00:14:14,800
know how bad is this

499
00:14:14,800 --> 00:14:15,600
so i'm going to walk through the

500
00:14:15,600 --> 00:14:18,079
different steps i took so step one

501
00:14:18,079 --> 00:14:20,160
in this process was the data collection

502
00:14:20,160 --> 00:14:21,760
so i had a couple data sources to

503
00:14:21,760 --> 00:14:22,959
actually pull the

504
00:14:22,959 --> 00:14:24,639
the data from first one here being the

505
00:14:24,639 --> 00:14:26,560
github activity data this is published

506
00:14:26,560 --> 00:14:27,360
by github

507
00:14:27,360 --> 00:14:29,680
it's a three terabyte data set that

508
00:14:29,680 --> 00:14:31,040
includes three million open source

509
00:14:31,040 --> 00:14:32,560
github repositories

510
00:14:32,560 --> 00:14:34,000
and the full source code for each one as

511
00:14:34,000 --> 00:14:36,079
well really good because i could search

512
00:14:36,079 --> 00:14:36,880
through this

513
00:14:36,880 --> 00:14:39,279
find any any reference to a github link

514
00:14:39,279 --> 00:14:40,240
and kind of

515
00:14:40,240 --> 00:14:42,000
go from there but the only issue is that

516
00:14:42,000 --> 00:14:43,760
i was last up in 2019

517
00:14:43,760 --> 00:14:45,199
so you know the day is not super fresh

518
00:14:45,199 --> 00:14:47,519
um but it still can yield a lot of good

519
00:14:47,519 --> 00:14:48,800
information

520
00:14:48,800 --> 00:14:50,720
and the second one was from the same

521
00:14:50,720 --> 00:14:53,120
place i mentioned before libraries.io

522
00:14:53,120 --> 00:14:55,040
they they maintain like an indexed

523
00:14:55,040 --> 00:14:57,360
database of dependencies and packages

524
00:14:57,360 --> 00:14:58,880
that depend upon each other

525
00:14:58,880 --> 00:15:00,480
so this was a really good source for for

526
00:15:00,480 --> 00:15:02,720
that type of like reverse dependency

527
00:15:02,720 --> 00:15:03,680
analysis

528
00:15:03,680 --> 00:15:05,519
um so i kind of use that on the

529
00:15:05,519 --> 00:15:07,760
secondary steps over here

530
00:15:07,760 --> 00:15:10,399
so i went through all of that and i came

531
00:15:10,399 --> 00:15:12,079
out with a list of about four million

532
00:15:12,079 --> 00:15:13,839
unique github links in source code

533
00:15:13,839 --> 00:15:15,680
so that's a lot of links and this is

534
00:15:15,680 --> 00:15:17,519
basically anyone or anything that linked

535
00:15:17,519 --> 00:15:18,720
to a github

536
00:15:18,720 --> 00:15:21,120
url but that's not you know that's not

537
00:15:21,120 --> 00:15:22,800
necessarily all the impactful links so

538
00:15:22,800 --> 00:15:24,160
step two is the cleanup

539
00:15:24,160 --> 00:15:25,360
because you might have a link like the

540
00:15:25,360 --> 00:15:28,079
one below in a readme file for example

541
00:15:28,079 --> 00:15:29,600
where you know it's not actually it's

542
00:15:29,600 --> 00:15:30,959
not going to result in code injection

543
00:15:30,959 --> 00:15:32,720
because it's just a readme file or like

544
00:15:32,720 --> 00:15:34,720
a comment of a file for example none of

545
00:15:34,720 --> 00:15:35,519
these are actually

546
00:15:35,519 --> 00:15:37,279
particularly interesting because even if

547
00:15:37,279 --> 00:15:38,560
you were take them over you wouldn't be

548
00:15:38,560 --> 00:15:39,120
able to

549
00:15:39,120 --> 00:15:41,040
get any kind of code injection right

550
00:15:41,040 --> 00:15:42,079
we're more interested in like something

551
00:15:42,079 --> 00:15:44,000
like this this is a docker file

552
00:15:44,000 --> 00:15:47,920
that does a w get on on a github url

553
00:15:47,920 --> 00:15:49,120
and then obviously you know runs the

554
00:15:49,120 --> 00:15:50,880
code there so for example if this

555
00:15:50,880 --> 00:15:53,680
protocol buffer slash protobuf

556
00:15:53,680 --> 00:15:55,839
euro was hijackable and vulnerable to

557
00:15:55,839 --> 00:15:56,959
repo tracking

558
00:15:56,959 --> 00:15:58,480
then this would result in you being able

559
00:15:58,480 --> 00:16:00,720
to get your code running inside this

560
00:16:00,720 --> 00:16:01,680
docker container

561
00:16:01,680 --> 00:16:03,360
so you have to do that cleanup um and

562
00:16:03,360 --> 00:16:05,360
the other thing we had to be wary of

563
00:16:05,360 --> 00:16:07,600
is that different package managers had

564
00:16:07,600 --> 00:16:09,040
the ability to link from

565
00:16:09,040 --> 00:16:11,120
github directly but in different formats

566
00:16:11,120 --> 00:16:12,560
right they all had slightly different

567
00:16:12,560 --> 00:16:13,680
formats so we need to make sure we were

568
00:16:13,680 --> 00:16:15,199
catching all of those

569
00:16:15,199 --> 00:16:16,240
and the one which i found was

570
00:16:16,240 --> 00:16:18,240
interesting is like for example npm and

571
00:16:18,240 --> 00:16:19,680
ruby gem does the same thing

572
00:16:19,680 --> 00:16:21,440
where you have the shorthand format um

573
00:16:21,440 --> 00:16:23,040
so instead of putting the full

574
00:16:23,040 --> 00:16:25,360
url uh if you just put the username

575
00:16:25,360 --> 00:16:27,279
slash repository name

576
00:16:27,279 --> 00:16:29,040
npm is going to know that you mean on

577
00:16:29,040 --> 00:16:30,639
github and that kind of speaks to just

578
00:16:30,639 --> 00:16:32,240
how common it is to link

579
00:16:32,240 --> 00:16:34,639
to code directly from github right

580
00:16:34,639 --> 00:16:35,680
because they even have a shorthand

581
00:16:35,680 --> 00:16:36,800
version from it so you have to make sure

582
00:16:36,800 --> 00:16:37,839
you catch all of those

583
00:16:37,839 --> 00:16:39,440
that was the cleanup and so we got rid

584
00:16:39,440 --> 00:16:41,279
of all the uninteresting links

585
00:16:41,279 --> 00:16:43,440
we're left with 2.1 million unique

586
00:16:43,440 --> 00:16:45,199
impactful github links so these are

587
00:16:45,199 --> 00:16:46,880
these are you know links that are going

588
00:16:46,880 --> 00:16:48,240
to load code

589
00:16:48,240 --> 00:16:49,920
um and if you can hijack these then

590
00:16:49,920 --> 00:16:51,519
you're in

591
00:16:51,519 --> 00:16:53,279
so after that you know we trim it down

592
00:16:53,279 --> 00:16:55,040
to just the github view usernames

593
00:16:55,040 --> 00:16:57,360
so we've got about 650 000 github

594
00:16:57,360 --> 00:16:58,880
usernames you have to scan through

595
00:16:58,880 --> 00:17:01,440
um the github api only allows you to do

596
00:17:01,440 --> 00:17:02,800
5000 requests an hour

597
00:17:02,800 --> 00:17:05,280
so it took a while but we managed to

598
00:17:05,280 --> 00:17:06,480
look through all those usernames and

599
00:17:06,480 --> 00:17:07,760
find all the ones that currently don't

600
00:17:07,760 --> 00:17:08,799
exist

601
00:17:08,799 --> 00:17:10,319
because if it doesn't exist it can be

602
00:17:10,319 --> 00:17:11,839
re-registered

603
00:17:11,839 --> 00:17:13,599
and therefore you know any link that is

604
00:17:13,599 --> 00:17:16,319
part of that username can be hijackable

605
00:17:16,319 --> 00:17:18,640
so we did that scan and it turns out

606
00:17:18,640 --> 00:17:20,319
about seven percent of the usernames you

607
00:17:20,319 --> 00:17:21,039
found

608
00:17:21,039 --> 00:17:23,679
were unregistered um and that's a lot

609
00:17:23,679 --> 00:17:24,640
bigger than i thought

610
00:17:24,640 --> 00:17:26,480
i was expecting like sub one percent

611
00:17:26,480 --> 00:17:28,400
maybe um but seven percent is

612
00:17:28,400 --> 00:17:30,240
is a huge number right obviously people

613
00:17:30,240 --> 00:17:31,520
get bored of their user usernames far

614
00:17:31,520 --> 00:17:32,880
more than expected

615
00:17:32,880 --> 00:17:34,080
and this was kind of the point where i

616
00:17:34,080 --> 00:17:35,520
realized just how widespread this was

617
00:17:35,520 --> 00:17:36,880
going to be

618
00:17:36,880 --> 00:17:37,919
considering that basically this meant

619
00:17:37,919 --> 00:17:40,480
that we had 92 000 github links using

620
00:17:40,480 --> 00:17:41,200
source code

621
00:17:41,200 --> 00:17:42,559
in a meaningful way that could be

622
00:17:42,559 --> 00:17:45,120
hijacked so the next step is just a sip

623
00:17:45,120 --> 00:17:46,559
book have reverse search

624
00:17:46,559 --> 00:17:48,880
for any place or any source code that

625
00:17:48,880 --> 00:17:50,960
used one of those links

626
00:17:50,960 --> 00:17:53,440
and turns out about 18 000 open source

627
00:17:53,440 --> 00:17:55,520
projects are directly vulnerable to repo

628
00:17:55,520 --> 00:17:56,720
jacking

629
00:17:56,720 --> 00:17:58,880
and that is a lot of projects um you

630
00:17:58,880 --> 00:18:00,160
know and these kind of range from

631
00:18:00,160 --> 00:18:01,280
everything from

632
00:18:01,280 --> 00:18:03,039
super large organizations like you know

633
00:18:03,039 --> 00:18:05,120
google or github uh to like small

634
00:18:05,120 --> 00:18:07,120
personal projects and such

635
00:18:07,120 --> 00:18:09,039
so here's an example of one that we

636
00:18:09,039 --> 00:18:10,720
found uh i'll gorilla search helper

637
00:18:10,720 --> 00:18:11,919
that's the name of the package

638
00:18:11,919 --> 00:18:14,640
version 3.2.2 since this closed into it

639
00:18:14,640 --> 00:18:15,840
has since been fixed

640
00:18:15,840 --> 00:18:18,000
um but basically in their package file

641
00:18:18,000 --> 00:18:19,840
they were linking directly to the super

642
00:18:19,840 --> 00:18:22,240
wolf slash middle and smith place

643
00:18:22,240 --> 00:18:25,200
um and that is a repo uh like a github

644
00:18:25,200 --> 00:18:26,240
repository

645
00:18:26,240 --> 00:18:28,000
so we found this so we take a look first

646
00:18:28,000 --> 00:18:29,280
of all does the original user

647
00:18:29,280 --> 00:18:31,919
exist search up super wolf does not so

648
00:18:31,919 --> 00:18:33,520
obviously the user change their name

649
00:18:33,520 --> 00:18:35,440
um or delete their account and then you

650
00:18:35,440 --> 00:18:37,200
actually check uh the actual repository

651
00:18:37,200 --> 00:18:38,960
mel smith in place and if you go here

652
00:18:38,960 --> 00:18:40,559
it's going to redirect you using that

653
00:18:40,559 --> 00:18:42,320
that repository redirects

654
00:18:42,320 --> 00:18:44,160
to this repository the male smith male

655
00:18:44,160 --> 00:18:45,760
smith in place

656
00:18:45,760 --> 00:18:46,880
and that's why this code is still

657
00:18:46,880 --> 00:18:48,320
working and that kind of highlights the

658
00:18:48,320 --> 00:18:49,280
danger of

659
00:18:49,280 --> 00:18:51,360
the redirects because this code has been

660
00:18:51,360 --> 00:18:52,320
like this for a while

661
00:18:52,320 --> 00:18:54,000
um and it just kept working even after

662
00:18:54,000 --> 00:18:56,799
that super bowl fuser disappeared

663
00:18:56,799 --> 00:18:59,679
um so basically this is a hijackable

664
00:18:59,679 --> 00:19:01,120
this right here is vulnerable to repo

665
00:19:01,120 --> 00:19:01,919
jacking

666
00:19:01,919 --> 00:19:04,000
and you can inject code in there so

667
00:19:04,000 --> 00:19:04,960
that's the 18 000

668
00:19:04,960 --> 00:19:06,320
impacted project right those are when

669
00:19:06,320 --> 00:19:08,000
they're directly vulnerable but that's

670
00:19:08,000 --> 00:19:09,280
not the whole story because algolia

671
00:19:09,280 --> 00:19:10,080
search helper

672
00:19:10,080 --> 00:19:12,320
is one package that's dependent upon by

673
00:19:12,320 --> 00:19:13,840
other packages right so you have to look

674
00:19:13,840 --> 00:19:14,480
at everything

675
00:19:14,480 --> 00:19:16,480
so what depends on this package so then

676
00:19:16,480 --> 00:19:18,480
you know you build out that graph

677
00:19:18,480 --> 00:19:19,840
and you take a look okay if you instant

678
00:19:19,840 --> 00:19:21,679
search what depends on that and you just

679
00:19:21,679 --> 00:19:22,520
keep going down

680
00:19:22,520 --> 00:19:24,880
qcli.u keep going until eventually you

681
00:19:24,880 --> 00:19:25,679
reach

682
00:19:25,679 --> 00:19:27,039
a really interesting project in this

683
00:19:27,039 --> 00:19:29,039
case it's the the vue.js

684
00:19:29,039 --> 00:19:31,760
command line tool uh ucli and it depends

685
00:19:31,760 --> 00:19:32,400
upon

686
00:19:32,400 --> 00:19:33,520
you know through a series of

687
00:19:33,520 --> 00:19:35,039
dependencies it depends upon the algolia

688
00:19:35,039 --> 00:19:35,919
search helper

689
00:19:35,919 --> 00:19:38,240
um and for those familiar with uh with

690
00:19:38,240 --> 00:19:39,440
the vue ji

691
00:19:39,440 --> 00:19:42,000
view view uh cli that's essentially the

692
00:19:42,000 --> 00:19:43,440
command line tool for doing view

693
00:19:43,440 --> 00:19:44,320
operations

694
00:19:44,320 --> 00:19:46,000
um which is you know one of the largest

695
00:19:46,000 --> 00:19:47,919
web frameworks in the world

696
00:19:47,919 --> 00:19:50,559
so essentially because of repo jacking

697
00:19:50,559 --> 00:19:52,480
what you have is you've got this super

698
00:19:52,480 --> 00:19:53,280
wolf user

699
00:19:53,280 --> 00:19:55,120
changed their name or deleted their

700
00:19:55,120 --> 00:19:56,480
account and because of that

701
00:19:56,480 --> 00:19:58,400
and through the supply chain you know in

702
00:19:58,400 --> 00:20:00,240
the dependency chain

703
00:20:00,240 --> 00:20:03,280
view is now vulnerable to code injection

704
00:20:03,280 --> 00:20:05,600
so you know a malicious attacker would

705
00:20:05,600 --> 00:20:07,200
re-register that super wolf name that

706
00:20:07,200 --> 00:20:08,880
mel smith and place repository

707
00:20:08,880 --> 00:20:11,120
um would kind of create code that

708
00:20:11,120 --> 00:20:12,480
they'll go up through the dependencies

709
00:20:12,480 --> 00:20:14,640
and eventually get into the the main cli

710
00:20:14,640 --> 00:20:16,159
and from there you know the impact they

711
00:20:16,159 --> 00:20:17,760
could have is tremendous

712
00:20:17,760 --> 00:20:19,679
so that really highlights the importance

713
00:20:19,679 --> 00:20:21,840
of doing this this dependency analysis

714
00:20:21,840 --> 00:20:22,799
as well because

715
00:20:22,799 --> 00:20:24,720
you know looking at a single directly

716
00:20:24,720 --> 00:20:26,240
vulnerable repository doesn't get you

717
00:20:26,240 --> 00:20:26,960
the whole

718
00:20:26,960 --> 00:20:29,679
image of the impact okay so we got our

719
00:20:29,679 --> 00:20:30,720
18 000

720
00:20:30,720 --> 00:20:33,520
projects which are impacted do the

721
00:20:33,520 --> 00:20:34,000
analysis

722
00:20:34,000 --> 00:20:35,919
right so now we gotta see what's what's

723
00:20:35,919 --> 00:20:37,840
actually vulnerable uh through the

724
00:20:37,840 --> 00:20:40,480
through that graph so due for a depth

725
00:20:40,480 --> 00:20:41,039
one

726
00:20:41,039 --> 00:20:42,400
we're up to fourteen thousand more

727
00:20:42,400 --> 00:20:44,000
thirty two thousand thirty eight

728
00:20:44,000 --> 00:20:44,480
thousand

729
00:20:44,480 --> 00:20:46,080
as this is as we keep going down through

730
00:20:46,080 --> 00:20:48,159
the depths and then eventually

731
00:20:48,159 --> 00:20:50,640
after like five a depth of five um we

732
00:20:50,640 --> 00:20:51,679
have seventy thousand

733
00:20:51,679 --> 00:20:53,600
impacted projects now we actually had to

734
00:20:53,600 --> 00:20:55,840
stop after seventy thousand

735
00:20:55,840 --> 00:20:59,360
um because part of those were actually

736
00:20:59,360 --> 00:21:01,440
huge web frameworks and libraries that

737
00:21:01,440 --> 00:21:03,520
are used by basically everyone

738
00:21:03,520 --> 00:21:06,320
like that concat map example for example

739
00:21:06,320 --> 00:21:06,640
um

740
00:21:06,640 --> 00:21:08,799
and as we tried to do the next level uh

741
00:21:08,799 --> 00:21:10,240
we physically couldn't process it it

742
00:21:10,240 --> 00:21:11,919
just took too long to process all the

743
00:21:11,919 --> 00:21:13,440
ones which would depend on them

744
00:21:13,440 --> 00:21:15,120
because they're so big and so that's the

745
00:21:15,120 --> 00:21:16,799
point where i said okay this

746
00:21:16,799 --> 00:21:18,799
this is you know this is enough this is

747
00:21:18,799 --> 00:21:20,799
clearly extremely widespread

748
00:21:20,799 --> 00:21:22,960
um and that's all and so that's where we

749
00:21:22,960 --> 00:21:24,240
stopped at

750
00:21:24,240 --> 00:21:26,400
so the key findings from this this

751
00:21:26,400 --> 00:21:28,400
research and this kind of mass analysis

752
00:21:28,400 --> 00:21:30,320
was that there's about 70 000 affected

753
00:21:30,320 --> 00:21:31,440
open source projects

754
00:21:31,440 --> 00:21:33,679
um only up to that right there's there

755
00:21:33,679 --> 00:21:35,760
could be so many more um past those

756
00:21:35,760 --> 00:21:36,799
depth levels

757
00:21:36,799 --> 00:21:39,520
um and if you add up all the the star

758
00:21:39,520 --> 00:21:39,919
count

759
00:21:39,919 --> 00:21:41,360
like the github star cam of all those

760
00:21:41,360 --> 00:21:43,039
projects combined they have over 1.5

761
00:21:43,039 --> 00:21:44,159
million stars

762
00:21:44,159 --> 00:21:46,400
which is a huge amount right like the

763
00:21:46,400 --> 00:21:48,640
biggest github repository has like 300

764
00:21:48,640 --> 00:21:49,440
000 stars

765
00:21:49,440 --> 00:21:52,000
um so this is this is a number of times

766
00:21:52,000 --> 00:21:53,760
you know larger than any individual

767
00:21:53,760 --> 00:21:55,039
project

768
00:21:55,039 --> 00:21:56,559
and it affected basically everything

769
00:21:56,559 --> 00:21:58,000
right because it's not language

770
00:21:58,000 --> 00:21:58,640
dependent

771
00:21:58,640 --> 00:22:00,799
um it goes you know any language can

772
00:22:00,799 --> 00:22:02,799
pull from from github urls

773
00:22:02,799 --> 00:22:05,600
so it affected you know java python go

774
00:22:05,600 --> 00:22:06,400
um

775
00:22:06,400 --> 00:22:08,400
it went all over the place um and then

776
00:22:08,400 --> 00:22:09,840
also affected basically every major

777
00:22:09,840 --> 00:22:10,720
organization

778
00:22:10,720 --> 00:22:12,960
that has open source so like microsoft

779
00:22:12,960 --> 00:22:15,360
we found some google some facebook

780
00:22:15,360 --> 00:22:17,840
github themselves so we're vulnerable so

781
00:22:17,840 --> 00:22:18,400
it

782
00:22:18,400 --> 00:22:21,280
impacts basically everyone um and and

783
00:22:21,280 --> 00:22:23,120
this this one is a little hard to

784
00:22:23,120 --> 00:22:24,960
determine um because you know different

785
00:22:24,960 --> 00:22:27,120
package managers use different

786
00:22:27,120 --> 00:22:29,200
ways of calculating downloads and they

787
00:22:29,200 --> 00:22:30,640
don't always make it available

788
00:22:30,640 --> 00:22:32,559
um but there's at least two million at

789
00:22:32,559 --> 00:22:33,760
least the bare minimum would be two

790
00:22:33,760 --> 00:22:35,039
million daily downloads

791
00:22:35,039 --> 00:22:37,919
of these impacted packages and projects

792
00:22:37,919 --> 00:22:38,559
um

793
00:22:38,559 --> 00:22:40,400
you know so that that that impact alone

794
00:22:40,400 --> 00:22:42,559
is tremendous

795
00:22:42,559 --> 00:22:44,400
um so we got all this data now i thought

796
00:22:44,400 --> 00:22:45,679
it'd be interesting to load it up into a

797
00:22:45,679 --> 00:22:47,200
graph and kind of get a visualization as

798
00:22:47,200 --> 00:22:47,760
well

799
00:22:47,760 --> 00:22:49,840
so here's a visualization we built

800
00:22:49,840 --> 00:22:51,520
essentially this is a project this node

801
00:22:51,520 --> 00:22:53,200
with a thousand downloads a month they

802
00:22:53,200 --> 00:22:55,039
kind of give you the size

803
00:22:55,039 --> 00:22:56,960
and these are all the directly

804
00:22:56,960 --> 00:22:58,880
vulnerable projects

805
00:22:58,880 --> 00:23:01,679
so everything here are projects and each

806
00:23:01,679 --> 00:23:04,000
each project gets their own little node

807
00:23:04,000 --> 00:23:05,600
sized up based on how many downloads

808
00:23:05,600 --> 00:23:07,039
they have

809
00:23:07,039 --> 00:23:08,480
and you can kind of see already based on

810
00:23:08,480 --> 00:23:10,080
that thousand dollar a month just

811
00:23:10,080 --> 00:23:12,000
just which some some really big projects

812
00:23:12,000 --> 00:23:14,000
are directly affected by this

813
00:23:14,000 --> 00:23:15,919
and then we walk down the the dependency

814
00:23:15,919 --> 00:23:17,039
chain

815
00:23:17,039 --> 00:23:19,039
this is the second a depth of two what's

816
00:23:19,039 --> 00:23:21,120
affected at depth of three you see some

817
00:23:21,120 --> 00:23:22,720
some big dependencies starting to kind

818
00:23:22,720 --> 00:23:23,200
of crop

819
00:23:23,200 --> 00:23:24,480
up and you kind of see how they're all

820
00:23:24,480 --> 00:23:26,080
getting pulled together by the different

821
00:23:26,080 --> 00:23:26,640
uh

822
00:23:26,640 --> 00:23:27,919
by the different links and there's some

823
00:23:27,919 --> 00:23:30,240
really interesting um analysis to get on

824
00:23:30,240 --> 00:23:31,440
here just by looking at this

825
00:23:31,440 --> 00:23:32,880
like for example this node over here

826
00:23:32,880 --> 00:23:34,880
which seems to to really touch onto

827
00:23:34,880 --> 00:23:36,960
everything um the node and kind of the

828
00:23:36,960 --> 00:23:37,520
bottom

829
00:23:37,520 --> 00:23:40,000
the bottom right side there and there's

830
00:23:40,000 --> 00:23:41,360
also some interesting bundling if you

831
00:23:41,360 --> 00:23:43,279
look all the way on the left over here

832
00:23:43,279 --> 00:23:45,360
um you can kind of see all the nodes

833
00:23:45,360 --> 00:23:46,480
sticking together and that's because

834
00:23:46,480 --> 00:23:46,960
they're

835
00:23:46,960 --> 00:23:49,120
they're interconnected you know that's

836
00:23:49,120 --> 00:23:50,880
f4 and once you hit step five this is

837
00:23:50,880 --> 00:23:52,159
where we had to stop right

838
00:23:52,159 --> 00:23:54,000
if you just look at this it makes sense

839
00:23:54,000 --> 00:23:55,600
because virtually every single one of

840
00:23:55,600 --> 00:23:56,080
these

841
00:23:56,080 --> 00:23:58,080
nodes are huge libraries and frameworks

842
00:23:58,080 --> 00:23:59,120
used by everyone

843
00:23:59,120 --> 00:24:01,360
uh you know if this is if this is view

844
00:24:01,360 --> 00:24:03,120
um you can just kind of imagine what

845
00:24:03,120 --> 00:24:05,039
these big frameworks are over here

846
00:24:05,039 --> 00:24:06,799
so we had to stop because obviously this

847
00:24:06,799 --> 00:24:07,840
would have this graph would have

848
00:24:07,840 --> 00:24:09,039
completely exploded

849
00:24:09,039 --> 00:24:11,039
on the depth level six um so this i

850
00:24:11,039 --> 00:24:12,080
think is a really interesting way to

851
00:24:12,080 --> 00:24:13,600
kind of visualize uh

852
00:24:13,600 --> 00:24:15,279
visualize just the impact that this has

853
00:24:15,279 --> 00:24:16,720
and you can't see that initial thousand

854
00:24:16,720 --> 00:24:20,559
download a month note anymore

855
00:24:20,640 --> 00:24:22,320
so we've talked about the actual

856
00:24:22,320 --> 00:24:23,679
vulnerability now we have to talk about

857
00:24:23,679 --> 00:24:25,120
some remediations right

858
00:24:25,120 --> 00:24:27,840
um so the biggest remediation if there's

859
00:24:27,840 --> 00:24:28,799
anything you're getting

860
00:24:28,799 --> 00:24:31,200
gonna get out of this talk is don't link

861
00:24:31,200 --> 00:24:32,400
directly to github

862
00:24:32,400 --> 00:24:34,720
repositories right that's like that's

863
00:24:34,720 --> 00:24:35,919
the most straightforward

864
00:24:35,919 --> 00:24:38,080
way you remediate this because github

865
00:24:38,080 --> 00:24:39,360
urls are not

866
00:24:39,360 --> 00:24:42,240
meant to be like immutable locations

867
00:24:42,240 --> 00:24:42,880
essentially

868
00:24:42,880 --> 00:24:44,320
that's what package manager is for so

869
00:24:44,320 --> 00:24:46,880
always use a package manager npm pipe

870
00:24:46,880 --> 00:24:48,320
composer whatever you use for your

871
00:24:48,320 --> 00:24:48,960
language

872
00:24:48,960 --> 00:24:50,640
that'll kind of ensure their job is to

873
00:24:50,640 --> 00:24:51,600
do that to make sure that you're

874
00:24:51,600 --> 00:24:53,200
downloading exactly the ones you

875
00:24:53,200 --> 00:24:54,880
uh you want to and github urls don't

876
00:24:54,880 --> 00:24:56,799
just don't offer that safety

877
00:24:56,799 --> 00:24:59,120
if you're currently the maintainer of a

878
00:24:59,120 --> 00:25:00,640
of a project you know open source or

879
00:25:00,640 --> 00:25:01,919
even or private or whatever

880
00:25:01,919 --> 00:25:03,679
i highly recommend you go right now

881
00:25:03,679 --> 00:25:05,600
after this talk look through your source

882
00:25:05,600 --> 00:25:06,000
code

883
00:25:06,000 --> 00:25:07,440
and you know even just a search for

884
00:25:07,440 --> 00:25:09,679
github.com uh or whatever and try to see

885
00:25:09,679 --> 00:25:11,039
if you're if you're linking to any

886
00:25:11,039 --> 00:25:12,000
github urls

887
00:25:12,000 --> 00:25:13,600
and if you are you might be vulnerable

888
00:25:13,600 --> 00:25:16,720
already um to repo jacking if these if

889
00:25:16,720 --> 00:25:17,120
those

890
00:25:17,120 --> 00:25:19,440
usernames can be reused um so just don't

891
00:25:19,440 --> 00:25:21,679
do it and that's the easiest way right

892
00:25:21,679 --> 00:25:22,880
a second way that you could protect

893
00:25:22,880 --> 00:25:24,880
yourself is through version pinning

894
00:25:24,880 --> 00:25:26,880
so pin your dependencies to a specific

895
00:25:26,880 --> 00:25:28,320
version so um

896
00:25:28,320 --> 00:25:29,760
the student of you would have noticed in

897
00:25:29,760 --> 00:25:31,919
that example of a goalie search

898
00:25:31,919 --> 00:25:34,240
algolia search there was a little

899
00:25:34,240 --> 00:25:36,720
hashtag and a git commit hash at the end

900
00:25:36,720 --> 00:25:37,760
and that's version pinning where you

901
00:25:37,760 --> 00:25:39,840
basically say to your package manager

902
00:25:39,840 --> 00:25:42,880
only download this specific commit

903
00:25:42,880 --> 00:25:44,240
so by only downloading that specific

904
00:25:44,240 --> 00:25:46,320
commit it will you know it'll ensure

905
00:25:46,320 --> 00:25:46,799
that

906
00:25:46,799 --> 00:25:48,400
uh it'll ensure that no other commit is

907
00:25:48,400 --> 00:25:50,080
downloaded um

908
00:25:50,080 --> 00:25:52,240
so i did kind of take a look at this um

909
00:25:52,240 --> 00:25:53,679
as part of this research

910
00:25:53,679 --> 00:25:55,760
and for basically all of the major

911
00:25:55,760 --> 00:25:57,440
package managers i looked at

912
00:25:57,440 --> 00:25:59,679
i was we were able to bypass that

913
00:25:59,679 --> 00:26:00,799
version pinning

914
00:26:00,799 --> 00:26:03,039
so version painting is definitely not a

915
00:26:03,039 --> 00:26:04,000
one fix

916
00:26:04,000 --> 00:26:06,400
all there um so it can be bypassed and a

917
00:26:06,400 --> 00:26:07,760
lot of them through a bunch of different

918
00:26:07,760 --> 00:26:08,799
kind of nifty ways

919
00:26:08,799 --> 00:26:11,120
i don't get too much detail because i'm

920
00:26:11,120 --> 00:26:12,640
still kind of in the process of removing

921
00:26:12,640 --> 00:26:14,480
these with some of the package managers

922
00:26:14,480 --> 00:26:16,720
um but definitely keep an eye out for an

923
00:26:16,720 --> 00:26:18,080
upcoming blog post

924
00:26:18,080 --> 00:26:21,279
that goes into more detail on this um

925
00:26:21,279 --> 00:26:22,640
and the other thing is don't pin to a

926
00:26:22,640 --> 00:26:24,240
tag or a branch version painting can

927
00:26:24,240 --> 00:26:26,480
pink to a tag or a branch of a

928
00:26:26,480 --> 00:26:28,640
repository uh don't do it because tags

929
00:26:28,640 --> 00:26:30,000
and branches are not immutable

930
00:26:30,000 --> 00:26:32,240
anyone can change those or delete them

931
00:26:32,240 --> 00:26:34,559
and then the last remediation you can

932
00:26:34,559 --> 00:26:36,400
take on are lock files so log files is

933
00:26:36,400 --> 00:26:37,919
basically a file that ensures that only

934
00:26:37,919 --> 00:26:39,279
a specific version

935
00:26:39,279 --> 00:26:42,080
of a of a dependency is downloaded and

936
00:26:42,080 --> 00:26:43,760
those might have an integrity check to

937
00:26:43,760 --> 00:26:44,480
make sure that

938
00:26:44,480 --> 00:26:46,000
you know there's no nothing funky going

939
00:26:46,000 --> 00:26:47,520
on and it's exactly the version you want

940
00:26:47,520 --> 00:26:48,000
it

941
00:26:48,000 --> 00:26:49,440
the thing is log files aren't always

942
00:26:49,440 --> 00:26:51,120
used from security

943
00:26:51,120 --> 00:26:52,720
point of view so some people use lock

944
00:26:52,720 --> 00:26:54,559
files to ensure that other developers

945
00:26:54,559 --> 00:26:56,400
get the same version as them so you know

946
00:26:56,400 --> 00:26:57,600
there's no bugs or anything or no

947
00:26:57,600 --> 00:26:59,279
untested code

948
00:26:59,279 --> 00:27:02,159
so for example this is the npm log file

949
00:27:02,159 --> 00:27:03,919
if the package comes from npm

950
00:27:03,919 --> 00:27:05,520
it'll include integrity check which is

951
00:27:05,520 --> 00:27:06,559
good right because i'll make sure that

952
00:27:06,559 --> 00:27:07,520
nothing can happen

953
00:27:07,520 --> 00:27:09,120
down the line but if the package comes

954
00:27:09,120 --> 00:27:11,120
from github like in this case

955
00:27:11,120 --> 00:27:12,480
for the express case at the bottom

956
00:27:12,480 --> 00:27:13,840
you'll notice that there is no integrity

957
00:27:13,840 --> 00:27:14,559
check

958
00:27:14,559 --> 00:27:16,799
um and all it relies on is that commit

959
00:27:16,799 --> 00:27:18,080
hash and

960
00:27:18,080 --> 00:27:19,520
you know as we talked with version

961
00:27:19,520 --> 00:27:21,279
pinning that can be bypassed

962
00:27:21,279 --> 00:27:23,679
um so you know lock but be aware of lock

963
00:27:23,679 --> 00:27:25,039
files they can definitely help

964
00:27:25,039 --> 00:27:27,440
but they're not the one fix all either

965
00:27:27,440 --> 00:27:28,880
the biggest is don't link directly

966
00:27:28,880 --> 00:27:31,039
github repositories

967
00:27:31,039 --> 00:27:33,760
so basically the tldr of the stock is

968
00:27:33,760 --> 00:27:35,679
gear repositories can be hijacked

969
00:27:35,679 --> 00:27:37,279
through repo jacking and you should

970
00:27:37,279 --> 00:27:39,039
never link directly to them or else you

971
00:27:39,039 --> 00:27:39,600
could get

972
00:27:39,600 --> 00:27:41,520
to have a code injection vulnerability

973
00:27:41,520 --> 00:27:43,039
so just don't do it

974
00:27:43,039 --> 00:27:46,320
i have i've written an article about

975
00:27:46,320 --> 00:27:48,640
repo jacking at the security innovation

976
00:27:48,640 --> 00:27:49,679
blog

977
00:27:49,679 --> 00:27:51,039
called rebo jacking exploring the

978
00:27:51,039 --> 00:27:53,279
dependency supply chain um that i would

979
00:27:53,279 --> 00:27:54,159
encourage you to read if you're

980
00:27:54,159 --> 00:27:55,039
interested in this

981
00:27:55,039 --> 00:27:57,120
there's some more analysis there and

982
00:27:57,120 --> 00:27:58,799
some some different things i couldn't

983
00:27:58,799 --> 00:28:00,960
get to talk about here and i will also

984
00:28:00,960 --> 00:28:02,080
be posting another

985
00:28:02,080 --> 00:28:03,760
kind of upcoming in the coming weeks

986
00:28:03,760 --> 00:28:06,640
article about the version pinning bypass

987
00:28:06,640 --> 00:28:08,799
and some other kind of interesting

988
00:28:08,799 --> 00:28:10,640
findings that we had and kind of

989
00:28:10,640 --> 00:28:12,320
how we how we went about trying to help

990
00:28:12,320 --> 00:28:13,840
remediate this issue

991
00:28:13,840 --> 00:28:16,080
um you can contact me at any of the

992
00:28:16,080 --> 00:28:17,360
snare places and

993
00:28:17,360 --> 00:28:18,880
thank you very much for listening to my

994
00:28:18,880 --> 00:28:21,120
talk

995
00:28:24,159 --> 00:28:30,159
that was awesome that was really cool

996
00:28:30,159 --> 00:28:33,039
good talk you did have a couple of

997
00:28:33,039 --> 00:28:35,279
questions come in through the discord

998
00:28:35,279 --> 00:28:39,360
um somebody said uh wouldn't it be like

999
00:28:39,360 --> 00:28:41,200
really easy to write a script that goes

1000
00:28:41,200 --> 00:28:42,880
through all the possible dependencies

1001
00:28:42,880 --> 00:28:44,000
that could be used to target

1002
00:28:44,000 --> 00:28:47,600
a given library uh which uh

1003
00:28:47,600 --> 00:28:50,720
you touched on in slide eight i believe

1004
00:28:50,720 --> 00:28:53,039
yeah or you wanted to comment there yeah

1005
00:28:53,039 --> 00:28:54,559
i mean it would definitely be uh

1006
00:28:54,559 --> 00:28:57,120
easy for for someone to go through that

1007
00:28:57,120 --> 00:28:57,679
um

1008
00:28:57,679 --> 00:29:00,159
and and do that analysis themselves and

1009
00:29:00,159 --> 00:29:01,279
and find all the

1010
00:29:01,279 --> 00:29:02,960
of everything that's vulnerable and

1011
00:29:02,960 --> 00:29:04,399
that's kind of the the danger here is

1012
00:29:04,399 --> 00:29:06,000
that it's really easy to find and it's

1013
00:29:06,000 --> 00:29:07,440
really easy to exploit

1014
00:29:07,440 --> 00:29:08,640
which is kind of a double whammy in

1015
00:29:08,640 --> 00:29:12,480
terms of of impact

1016
00:29:12,480 --> 00:29:15,520
yeah that's awesome i uh did we have

1017
00:29:15,520 --> 00:29:16,960
other questions in here before

1018
00:29:16,960 --> 00:29:19,760
uh yeah

1019
00:29:20,000 --> 00:29:23,120
so i don't see any questions in the chat

1020
00:29:23,120 --> 00:29:23,840
for go to

1021
00:29:23,840 --> 00:29:27,279
webinar or in the questions panel

1022
00:29:27,279 --> 00:29:29,520
so i i'd actually put in the discord

1023
00:29:29,520 --> 00:29:31,360
this is this is clearly bonkers pants

1024
00:29:31,360 --> 00:29:32,320
because

1025
00:29:32,320 --> 00:29:34,960
uh uh g dynamics put in there and the

1026
00:29:34,960 --> 00:29:36,159
same thought i had

1027
00:29:36,159 --> 00:29:39,360
simple but deadly as the best things are

1028
00:29:39,360 --> 00:29:41,840
or i guess worse it depends on your

1029
00:29:41,840 --> 00:29:43,120
perspective

1030
00:29:43,120 --> 00:29:45,279
yeah no that was how did you do the the

1031
00:29:45,279 --> 00:29:46,640
the scanning was it a script you put

1032
00:29:46,640 --> 00:29:47,279
together

1033
00:29:47,279 --> 00:29:49,679
how did you go through and find those

1034
00:29:49,679 --> 00:29:50,960
links was

1035
00:29:50,960 --> 00:29:52,480
that's that's actually a great question

1036
00:29:52,480 --> 00:29:54,240
um so that data set i talked about

1037
00:29:54,240 --> 00:29:55,919
the github activity data is actually

1038
00:29:55,919 --> 00:29:58,000
loaded into google bigquery

1039
00:29:58,000 --> 00:29:59,520
which is basically a google's kind of

1040
00:29:59,520 --> 00:30:01,279
cloud offering for querying large

1041
00:30:01,279 --> 00:30:02,399
amounts of data

1042
00:30:02,399 --> 00:30:03,760
um because it's you know it's a three

1043
00:30:03,760 --> 00:30:05,440
terabyte data set um

1044
00:30:05,440 --> 00:30:06,880
so downloading that and sifting through

1045
00:30:06,880 --> 00:30:08,480
would be hard but

1046
00:30:08,480 --> 00:30:10,720
google could do it in just a couple of

1047
00:30:10,720 --> 00:30:12,399
seconds using their engines

1048
00:30:12,399 --> 00:30:14,480
and they allow for regex so basically i

1049
00:30:14,480 --> 00:30:17,039
made a big super long complex regex

1050
00:30:17,039 --> 00:30:19,440
extracted all the github links um and

1051
00:30:19,440 --> 00:30:20,640
then from there i could just kind of go

1052
00:30:20,640 --> 00:30:22,399
to the individual files and

1053
00:30:22,399 --> 00:30:25,120
and then do my analysis yeah that's cool

1054
00:30:25,120 --> 00:30:25,760
yeah because that's

1055
00:30:25,760 --> 00:30:27,919
that was my first kind of thought there

1056
00:30:27,919 --> 00:30:30,080
not not necessarily the size but that

1057
00:30:30,080 --> 00:30:31,360
you have that

1058
00:30:31,360 --> 00:30:33,279
data that you were able to go through

1059
00:30:33,279 --> 00:30:34,720
and do that so that's a

1060
00:30:34,720 --> 00:30:37,840
that's really really really awesome

1061
00:30:37,840 --> 00:30:41,520
um you said you're working with some

1062
00:30:41,520 --> 00:30:43,520
repos right now or you're working with

1063
00:30:43,520 --> 00:30:45,600
some folks right now

1064
00:30:45,600 --> 00:30:48,159
um without saying who they are obviously

1065
00:30:48,159 --> 00:30:49,760
because uh you know you're trying to

1066
00:30:49,760 --> 00:30:50,960
work with them

1067
00:30:50,960 --> 00:30:52,880
but are you seeing when you do reach out

1068
00:30:52,880 --> 00:30:54,720
to people that they're

1069
00:30:54,720 --> 00:30:56,480
you know generally oh hold on yeah let

1070
00:30:56,480 --> 00:30:57,840
me go fix that or

1071
00:30:57,840 --> 00:30:59,279
let me go change this kind of what kind

1072
00:30:59,279 --> 00:31:00,720
of reaction are you getting when you

1073
00:31:00,720 --> 00:31:02,080
talk to people

1074
00:31:02,080 --> 00:31:03,919
yeah um so i've actually had some really

1075
00:31:03,919 --> 00:31:05,600
positive reactions um

1076
00:31:05,600 --> 00:31:07,919
you know this it kind of i've published

1077
00:31:07,919 --> 00:31:09,360
the blog post um so a lot of people read

1078
00:31:09,360 --> 00:31:10,240
through it and they're like okay yeah

1079
00:31:10,240 --> 00:31:11,440
they make sense i get

1080
00:31:11,440 --> 00:31:13,120
i get what's going on here um and the

1081
00:31:13,120 --> 00:31:14,720
fact that it's a pretty simple fix right

1082
00:31:14,720 --> 00:31:16,480
just point point somewhere else get a

1083
00:31:16,480 --> 00:31:18,480
package manager or whatever um

1084
00:31:18,480 --> 00:31:19,919
makes a lot easier for people be like

1085
00:31:19,919 --> 00:31:22,000
all right yeah you you got me and then

1086
00:31:22,000 --> 00:31:24,000
they fix it right there but um yeah i've

1087
00:31:24,000 --> 00:31:25,360
had some really positive

1088
00:31:25,360 --> 00:31:27,760
feedback and a lot of people especially

1089
00:31:27,760 --> 00:31:29,600
with the repositories or contacting

1090
00:31:29,600 --> 00:31:30,480
which are really

1091
00:31:30,480 --> 00:31:32,240
huge and large repositories really

1092
00:31:32,240 --> 00:31:34,000
understand the importance of security so

1093
00:31:34,000 --> 00:31:36,399
yeah they jump on it right away yeah no

1094
00:31:36,399 --> 00:31:37,919
that's great

1095
00:31:37,919 --> 00:31:41,200
um yeah very very very good and uh this

1096
00:31:41,200 --> 00:31:43,039
this talk as well will be recorded well

1097
00:31:43,039 --> 00:31:45,440
it is recorded and it'll be up on

1098
00:31:45,440 --> 00:31:48,480
the the youtube there uh youtube for

1099
00:31:48,480 --> 00:31:50,799
for grim and i'm i'm gonna point some

1100
00:31:50,799 --> 00:31:52,159
people to this because

1101
00:31:52,159 --> 00:31:55,039
uh excellent excellent work uh tabitha

1102
00:31:55,039 --> 00:31:56,799
delaney uh any other questions we have

1103
00:31:56,799 --> 00:31:57,840
any questions coming in or do you have

1104
00:31:57,840 --> 00:32:00,320
other questions

1105
00:32:00,320 --> 00:32:01,760
i didn't see any other questions come

1106
00:32:01,760 --> 00:32:04,640
through i thought it was uh

1107
00:32:04,640 --> 00:32:06,480
just to reiterate like just what a what

1108
00:32:06,480 --> 00:32:07,760
a dead simple

1109
00:32:07,760 --> 00:32:10,960
thing to to be able to fix and remediate

1110
00:32:10,960 --> 00:32:11,760
you know

1111
00:32:11,760 --> 00:32:14,960
once you know about it absolutely

1112
00:32:14,960 --> 00:32:17,600
knowing it's off the ballot right the

1113
00:32:17,600 --> 00:32:21,519
other half is red lasers and blue lasers

1114
00:32:21,679 --> 00:32:23,679
i had no specific questions myself but i

1115
00:32:23,679 --> 00:32:25,279
did want to comment that uh

1116
00:32:25,279 --> 00:32:28,480
in speaking your pacing was remarkable

1117
00:32:28,480 --> 00:32:30,399
uh you're you're a very excellent public

1118
00:32:30,399 --> 00:32:31,679
speaker

1119
00:32:31,679 --> 00:32:34,720
well thank you a pleasure to listen to

1120
00:32:34,720 --> 00:32:36,559
very good and this was your first talk

1121
00:32:36,559 --> 00:32:37,919
huh so yeah

1122
00:32:37,919 --> 00:32:40,880
yeah anymore yeah i will be presenting

1123
00:32:40,880 --> 00:32:42,240
this talk to a couple other places

1124
00:32:42,240 --> 00:32:43,120
coming up

1125
00:32:43,120 --> 00:32:45,200
um and also be including some kind of

1126
00:32:45,200 --> 00:32:47,039
further further analysis as i

1127
00:32:47,039 --> 00:32:48,960
continue to look into this and kind of

1128
00:32:48,960 --> 00:32:50,480
go from there

1129
00:32:50,480 --> 00:32:53,039
very good all right well feel free to to

1130
00:32:53,039 --> 00:32:54,320
hang out here a little bit we got about

1131
00:32:54,320 --> 00:32:55,760
15 minutes till the next talk but if

1132
00:32:55,760 --> 00:32:56,960
you've got other places to be oh are you

1133
00:32:56,960 --> 00:32:58,559
gonna be hanging out in the discord or

1134
00:32:58,559 --> 00:33:01,600
uh be uh in the virtual uh virtual happy

1135
00:33:01,600 --> 00:33:02,320
hours

1136
00:33:02,320 --> 00:33:03,600
yeah yeah i'll definitely be available

1137
00:33:03,600 --> 00:33:05,200
in discord for any questions or any

1138
00:33:05,200 --> 00:33:06,320
comments or

1139
00:33:06,320 --> 00:33:07,840
so yeah so i'll be there and feel free

1140
00:33:07,840 --> 00:33:10,799
to reach out to me

