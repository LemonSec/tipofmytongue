1
00:00:00,000 --> 00:00:03,449
[Music]

2
00:00:06,540 --> 00:00:09,589
[Music]

3
00:00:13,000 --> 00:00:16,079
[Music]

4
00:00:16,720 --> 00:00:18,320
good morning good afternoon good evening

5
00:00:18,320 --> 00:00:20,240
i'm ian tabor or better known as

6
00:00:20,240 --> 00:00:22,000
internet thank you again to grim for

7
00:00:22,000 --> 00:00:23,439
having me at your conference for a

8
00:00:23,439 --> 00:00:26,960
second time with my presentation titled

9
00:00:26,960 --> 00:00:30,320
value past auto how i built it save 28

10
00:00:30,320 --> 00:00:31,679
000

11
00:00:31,679 --> 00:00:33,760
first things first who am i

12
00:00:33,760 --> 00:00:35,040
you could say i'm the ultimate car

13
00:00:35,040 --> 00:00:37,840
hacker built this kit car 17 years ago

14
00:00:37,840 --> 00:00:40,399
now it's a tiger super cat and it only

15
00:00:40,399 --> 00:00:42,640
has three ecu's of which two of them i

16
00:00:42,640 --> 00:00:45,360
built myself it's basically a ford focus

17
00:00:45,360 --> 00:00:48,000
engine and ford sierra running gear

18
00:00:48,000 --> 00:00:49,280
uh it doesn't weigh a lot rear wheel

19
00:00:49,280 --> 00:00:51,039
drive great fun to drive

20
00:00:51,039 --> 00:00:53,440
however the british weather and life

21
00:00:53,440 --> 00:00:54,879
gets in the way so i don't get to drive

22
00:00:54,879 --> 00:00:57,600
it as much as i'd like to anyway on to

23
00:00:57,600 --> 00:00:59,600
my car hacking credentials here are the

24
00:00:59,600 --> 00:01:01,359
details of my previous presentations and

25
00:01:01,359 --> 00:01:03,359
events related to car hacking

26
00:01:03,359 --> 00:01:05,119
you may know of me due to my built me

27
00:01:05,119 --> 00:01:07,840
building my car in a box pd0 which is

28
00:01:07,840 --> 00:01:10,080
most of the electronics from a 2014

29
00:01:10,080 --> 00:01:12,720
peugeot 208 i built it at the end of

30
00:01:12,720 --> 00:01:15,840
2018 after seeing grimm's 3po at defcon

31
00:01:15,840 --> 00:01:17,600
car hiking village that year

32
00:01:17,600 --> 00:01:19,840
my car in a box thinks it's a fully

33
00:01:19,840 --> 00:01:21,520
working vehicle

34
00:01:21,520 --> 00:01:23,759
which i previously presented about at

35
00:01:23,759 --> 00:01:25,600
grim con one

36
00:01:25,600 --> 00:01:27,119
and how i now run the car hanging

37
00:01:27,119 --> 00:01:29,600
village in the uk i take my car in a box

38
00:01:29,600 --> 00:01:31,439
to events across the uk

39
00:01:31,439 --> 00:01:33,520
and i have once been to amsterdam which

40
00:01:33,520 --> 00:01:35,520
was fun getting through customs asked me

41
00:01:35,520 --> 00:01:37,280
about it sometime

42
00:01:37,280 --> 00:01:39,520
2020 was meant to be the tour of europe

43
00:01:39,520 --> 00:01:41,439
year where i was going to visit dublin

44
00:01:41,439 --> 00:01:43,119
brussels and stuttgart

45
00:01:43,119 --> 00:01:44,479
however

46
00:01:44,479 --> 00:01:47,520
covid and brexit got in the way but with

47
00:01:47,520 --> 00:01:49,600
through the use of technology virtual

48
00:01:49,600 --> 00:01:51,280
car hacking village happened for a few

49
00:01:51,280 --> 00:01:54,240
events and i had i managed to present at

50
00:01:54,240 --> 00:01:56,000
some other events too which i may not

51
00:01:56,000 --> 00:01:58,880
have done if copied hadn't happened

52
00:01:58,880 --> 00:02:00,000
however

53
00:02:00,000 --> 00:02:01,759
i have been invited globally to take my

54
00:02:01,759 --> 00:02:04,000
car in the box to numerous locations

55
00:02:04,000 --> 00:02:06,240
including india australia philippines

56
00:02:06,240 --> 00:02:08,318
singapore and brazil

57
00:02:08,318 --> 00:02:10,639
my car box is portable but it's not that

58
00:02:10,639 --> 00:02:14,319
portable onto the coroner case pasta

59
00:02:14,319 --> 00:02:16,400
what is pasta pasta was originally

60
00:02:16,400 --> 00:02:19,280
released at blackhat europe 2018 and was

61
00:02:19,280 --> 00:02:21,360
developed by toyota info technology

62
00:02:21,360 --> 00:02:23,920
center i have actually seen it in person

63
00:02:23,920 --> 00:02:26,160
in september 2019 but i didn't get a

64
00:02:26,160 --> 00:02:28,959
chance to play with it a bit of a shame

65
00:02:28,959 --> 00:02:31,760
so pasta portable automotive security

66
00:02:31,760 --> 00:02:33,760
test bed with adaptability

67
00:02:33,760 --> 00:02:35,680
pasta is designed and developed with a

68
00:02:35,680 --> 00:02:37,599
following philosophy

69
00:02:37,599 --> 00:02:39,599
it is open it must be based on

70
00:02:39,599 --> 00:02:42,400
non-proprietary technologies adaptable

71
00:02:42,400 --> 00:02:43,760
users should be able to rewrite the

72
00:02:43,760 --> 00:02:45,599
firmware of the ecu's redesign the

73
00:02:45,599 --> 00:02:46,879
architecture and connect their own

74
00:02:46,879 --> 00:02:48,480
devices for example

75
00:02:48,480 --> 00:02:51,120
safe there should be no real actuators

76
00:02:51,120 --> 00:02:53,280
it can avoid incidents such as wheels

77
00:02:53,280 --> 00:02:55,040
brakes and windows should be realized by

78
00:02:55,040 --> 00:02:58,480
a simulator not using the real things

79
00:02:58,480 --> 00:03:00,480
finally it must be portable the platform

80
00:03:00,480 --> 00:03:02,480
is preferred to be small and portable so

81
00:03:02,480 --> 00:03:05,200
users can study research and hack it

82
00:03:05,200 --> 00:03:07,440
anyway

83
00:03:07,440 --> 00:03:09,200
here is a picture of pasta there is a

84
00:03:09,200 --> 00:03:10,560
link at the bottom there that gives you

85
00:03:10,560 --> 00:03:13,280
the full details of their

86
00:03:13,280 --> 00:03:16,159
product i will go into some highlights

87
00:03:16,159 --> 00:03:17,920
if you want any more information look at

88
00:03:17,920 --> 00:03:18,959
that link

89
00:03:18,959 --> 00:03:19,920
and

90
00:03:19,920 --> 00:03:21,440
watch some of the presentations they

91
00:03:21,440 --> 00:03:23,840
have done at various events around the

92
00:03:23,840 --> 00:03:25,040
globe

93
00:03:25,040 --> 00:03:26,560
the case in question is probably about

94
00:03:26,560 --> 00:03:28,560
the same size as the average gentleman's

95
00:03:28,560 --> 00:03:30,239
briefcase shall we say

96
00:03:30,239 --> 00:03:32,000
top half of the case is inputs and

97
00:03:32,000 --> 00:03:34,400
outputs there are three screens and a

98
00:03:34,400 --> 00:03:35,840
load of buttons

99
00:03:35,840 --> 00:03:37,920
bottom half of the case there are four

100
00:03:37,920 --> 00:03:40,159
ecu's um

101
00:03:40,159 --> 00:03:42,000
three of them are body chassis and

102
00:03:42,000 --> 00:03:44,400
powertrain the fourth one is the gateway

103
00:03:44,400 --> 00:03:46,720
that joins them all together the gateway

104
00:03:46,720 --> 00:03:49,280
ecu has a fourth can bus connected to it

105
00:03:49,280 --> 00:03:52,319
by the obd2 port which on that picture

106
00:03:52,319 --> 00:03:53,840
is not shown because it's in the bottom

107
00:03:53,840 --> 00:03:55,200
right hand corner

108
00:03:55,200 --> 00:03:56,319
um

109
00:03:56,319 --> 00:03:58,640
i will go over some highlights of how i

110
00:03:58,640 --> 00:04:00,159
believe it fits together but they will

111
00:04:00,159 --> 00:04:02,080
not go over the full details

112
00:04:02,080 --> 00:04:04,720
so pasta is open source within that

113
00:04:04,720 --> 00:04:06,720
github repository there is the firmware

114
00:04:06,720 --> 00:04:08,959
for the ecu's there is the hardware and

115
00:04:08,959 --> 00:04:11,280
software spec there is the

116
00:04:11,280 --> 00:04:13,840
schematics for the ecu

117
00:04:13,840 --> 00:04:15,760
there are some can definition files one

118
00:04:15,760 --> 00:04:17,918
thing they do not publish within there

119
00:04:17,918 --> 00:04:20,320
is any great detail on how the top half

120
00:04:20,320 --> 00:04:23,600
of the case connects to the bottom half

121
00:04:23,600 --> 00:04:25,120
okay we can see that there are three

122
00:04:25,120 --> 00:04:26,840
screens

123
00:04:26,840 --> 00:04:29,360
powertrain body and chassis going to the

124
00:04:29,360 --> 00:04:30,960
three ecu's

125
00:04:30,960 --> 00:04:32,080
um

126
00:04:32,080 --> 00:04:34,639
if you read the document pasta 1.0 ecu

127
00:04:34,639 --> 00:04:38,400
hardware software spec version 1.0 e

128
00:04:38,400 --> 00:04:40,479
it says that the i o is connected via

129
00:04:40,479 --> 00:04:42,960
serial using sci0

130
00:04:42,960 --> 00:04:45,199
that can be confirmed by looking at the

131
00:04:45,199 --> 00:04:46,160
um

132
00:04:46,160 --> 00:04:47,840
closely at the diagram

133
00:04:47,840 --> 00:04:50,960
pinned on the left here are where the io

134
00:04:50,960 --> 00:04:52,639
sci0 is

135
00:04:52,639 --> 00:04:55,120
so i would assume that it connects but

136
00:04:55,120 --> 00:04:57,040
there's no great detail

137
00:04:57,040 --> 00:04:58,720
however looking at the can definition

138
00:04:58,720 --> 00:05:00,080
files all the switches and

139
00:05:00,080 --> 00:05:02,880
potentiometers across here

140
00:05:02,880 --> 00:05:05,520
initiate messages from the chassis ecu

141
00:05:05,520 --> 00:05:07,199
so that is where they will be connected

142
00:05:07,199 --> 00:05:08,800
online

143
00:05:08,800 --> 00:05:09,680
so

144
00:05:09,680 --> 00:05:12,240
this white box ecu what is it there is a

145
00:05:12,240 --> 00:05:14,240
picture of it a big black chip in the

146
00:05:14,240 --> 00:05:17,120
middle there is a renesis rx 63n

147
00:05:17,120 --> 00:05:21,440
processor it has two meg flash 256k ram

148
00:05:21,440 --> 00:05:23,520
internally internally there is a

149
00:05:23,520 --> 00:05:26,880
real-time clock an ethernet mac usb 2.0

150
00:05:26,880 --> 00:05:30,800
three times can 2.0 i2c sci

151
00:05:30,800 --> 00:05:32,560
spi and probably some three-letter

152
00:05:32,560 --> 00:05:34,320
acronyms i've missed out

153
00:05:34,320 --> 00:05:37,120
um when i first started looking in 2020

154
00:05:37,120 --> 00:05:40,479
this chip was available about 26 each

155
00:05:40,479 --> 00:05:42,400
however it's no longer available there

156
00:05:42,400 --> 00:05:44,479
is a similar replacement chip

157
00:05:44,479 --> 00:05:46,639
it's 15 each but there is a minimum

158
00:05:46,639 --> 00:05:49,520
order quantity of 480

159
00:05:49,520 --> 00:05:51,759
which sums up to be thousand two hundred

160
00:05:51,759 --> 00:05:53,680
dollars just in processes before you

161
00:05:53,680 --> 00:05:55,600
start

162
00:05:55,600 --> 00:05:58,240
so the white box ecu needs four can

163
00:05:58,240 --> 00:06:00,400
buses it has three internally the

164
00:06:00,400 --> 00:06:02,880
additional one is provided via an

165
00:06:02,880 --> 00:06:05,360
external can controller the microchip

166
00:06:05,360 --> 00:06:07,600
mcp2515

167
00:06:07,600 --> 00:06:09,759
uh in the middle there you can see uh

168
00:06:09,759 --> 00:06:12,240
four can transceivers um they are the

169
00:06:12,240 --> 00:06:14,960
nxp tja105os

170
00:06:14,960 --> 00:06:17,199
they can run up to one megabits

171
00:06:17,199 --> 00:06:18,319
can bus

172
00:06:18,319 --> 00:06:22,479
um the yellow connector there is rs232

173
00:06:22,479 --> 00:06:24,319
um jtag is there

174
00:06:24,319 --> 00:06:26,080
battery there for the real-time clock

175
00:06:26,080 --> 00:06:28,800
and on the reverse i believe is a micro

176
00:06:28,800 --> 00:06:30,560
sd card

177
00:06:30,560 --> 00:06:34,960
um for future possible expansion

178
00:06:34,960 --> 00:06:37,680
so the clan definition file here is a

179
00:06:37,680 --> 00:06:40,000
abstract of that can definition file

180
00:06:40,000 --> 00:06:41,600
within from within that github

181
00:06:41,600 --> 00:06:43,520
repository

182
00:06:43,520 --> 00:06:45,360
it shows the source and destination of

183
00:06:45,360 --> 00:06:47,039
can messages the frequency of the

184
00:06:47,039 --> 00:06:48,880
message being sent and finally how the

185
00:06:48,880 --> 00:06:50,800
data is encoded in the data bytes of

186
00:06:50,800 --> 00:06:52,720
that can message so if we look at the

187
00:06:52,720 --> 00:06:56,160
top row in the pink ish

188
00:06:56,160 --> 00:06:58,639
we have a break operation indicator its

189
00:06:58,639 --> 00:07:00,800
source is the chassis ecu

190
00:07:00,800 --> 00:07:03,360
its execution is the powertrain ecu it

191
00:07:03,360 --> 00:07:06,080
has an id in decimal of 26

192
00:07:06,080 --> 00:07:09,120
it has an id in hex of 01a

193
00:07:09,120 --> 00:07:11,840
it is repeated every 10 milliseconds

194
00:07:11,840 --> 00:07:14,639
it's got the length of two data bytes

195
00:07:14,639 --> 00:07:17,039
it's off or minimum it's zero it's on or

196
00:07:17,039 --> 00:07:19,759
maximum is 1.023 which means it's a 10

197
00:07:19,759 --> 00:07:20,960
bit number

198
00:07:20,960 --> 00:07:23,840
and its unit is percent

199
00:07:23,840 --> 00:07:25,440
so

200
00:07:25,440 --> 00:07:27,759
um finally here is a calculation that

201
00:07:27,759 --> 00:07:30,880
tells you 256 times a plus b all divided

202
00:07:30,880 --> 00:07:33,840
by 1023 gives you that percentage

203
00:07:33,840 --> 00:07:36,080
um on the next slide i will summarize

204
00:07:36,080 --> 00:07:37,919
this entire document rather than you

205
00:07:37,919 --> 00:07:41,120
have to read it all

206
00:07:41,360 --> 00:07:44,400
here it shows you that the

207
00:07:44,400 --> 00:07:47,759
chassis bus is sending 810 messages per

208
00:07:47,759 --> 00:07:51,759
second the powertrain bus is sending 668

209
00:07:51,759 --> 00:07:54,800
messages per second and the body bus is

210
00:07:54,800 --> 00:07:56,400
sending

211
00:07:56,400 --> 00:08:00,800
380 messages per second not plus ecu

212
00:08:00,800 --> 00:08:02,879
um the total number of messages going

213
00:08:02,879 --> 00:08:03,919
into the

214
00:08:03,919 --> 00:08:07,759
gateway ecu is therefore 1 858 however

215
00:08:07,759 --> 00:08:09,400
it also has to send those

216
00:08:09,400 --> 00:08:12,000
1858 messages back out again to the

217
00:08:12,000 --> 00:08:13,919
other ecu's on the other side

218
00:08:13,919 --> 00:08:17,039
so the can gateway ecu is actually

219
00:08:17,039 --> 00:08:18,520
processing

220
00:08:18,520 --> 00:08:21,680
3716 messages per second

221
00:08:21,680 --> 00:08:24,960
so onto the inputs and outputs

222
00:08:24,960 --> 00:08:26,639
as i said previously

223
00:08:26,639 --> 00:08:29,280
there are three um cp uh

224
00:08:29,280 --> 00:08:30,479
lcds

225
00:08:30,479 --> 00:08:33,200
that show for the powertrain body and

226
00:08:33,200 --> 00:08:35,919
chassis ecu they show outputs from the

227
00:08:35,919 --> 00:08:37,679
ecu itself

228
00:08:37,679 --> 00:08:40,679
um

229
00:08:40,880 --> 00:08:43,519
and then there's switches underneath the

230
00:08:43,519 --> 00:08:45,120
following um there are three

231
00:08:45,120 --> 00:08:46,800
potentiometers

232
00:08:46,800 --> 00:08:48,959
brake accelerator and steering

233
00:08:48,959 --> 00:08:51,360
two rotor encoders headlight and front

234
00:08:51,360 --> 00:08:52,880
washer wiper

235
00:08:52,880 --> 00:08:54,800
three toggle switches which is shift

236
00:08:54,800 --> 00:08:55,760
position

237
00:08:55,760 --> 00:08:59,279
indicator or blinker rear washer wiper

238
00:08:59,279 --> 00:09:01,680
there are eight push switches four of

239
00:09:01,680 --> 00:09:04,320
which are for the windows up and down

240
00:09:04,320 --> 00:09:06,880
and the final four also have indicators

241
00:09:06,880 --> 00:09:09,519
which is for the ignition door locks

242
00:09:09,519 --> 00:09:13,920
handbrake and hazard lights

243
00:09:13,920 --> 00:09:16,240
finally at top of the case itself you

244
00:09:16,240 --> 00:09:18,640
will see a small usb bluetooth

245
00:09:18,640 --> 00:09:21,200
dongle that is used for the bluetooth

246
00:09:21,200 --> 00:09:23,760
connected car that can be controlled via

247
00:09:23,760 --> 00:09:25,680
passenger itself

248
00:09:25,680 --> 00:09:28,000
anyway enough of the toyota version

249
00:09:28,000 --> 00:09:30,720
we go on to value pasta auto

250
00:09:30,720 --> 00:09:33,120
software is written within the arduino

251
00:09:33,120 --> 00:09:34,080
ide

252
00:09:34,080 --> 00:09:35,839
first thing i had to do was work out if

253
00:09:35,839 --> 00:09:37,680
the microcontroller and or the library

254
00:09:37,680 --> 00:09:39,600
in use would be able to send enough

255
00:09:39,600 --> 00:09:41,760
messages quick enough

256
00:09:41,760 --> 00:09:44,399
the mcp2515 library

257
00:09:44,399 --> 00:09:47,600
i was using still i'm using is one from

258
00:09:47,600 --> 00:09:50,959
corey j fowler um link being there

259
00:09:50,959 --> 00:09:52,959
what i did was wrote a script for my

260
00:09:52,959 --> 00:09:55,040
nano can device to send as many cam

261
00:09:55,040 --> 00:09:57,519
messages as it could for five seconds

262
00:09:57,519 --> 00:09:59,920
and then take an average number of the

263
00:09:59,920 --> 00:10:01,360
count that was

264
00:10:01,360 --> 00:10:03,519
created from those five seconds and

265
00:10:03,519 --> 00:10:06,880
analyze that using a logic analyzer

266
00:10:06,880 --> 00:10:08,880
a single eight byte can message will

267
00:10:08,880 --> 00:10:13,200
take about 240 microseconds on the wire

268
00:10:13,200 --> 00:10:16,240
at 500 kilobits per second can bus which

269
00:10:16,240 --> 00:10:18,480
gives a theoretical maximum for that bus

270
00:10:18,480 --> 00:10:20,880
speed of just over 4 000 messages per

271
00:10:20,880 --> 00:10:22,240
second

272
00:10:22,240 --> 00:10:24,240
here is the first bit of analysis on the

273
00:10:24,240 --> 00:10:26,480
2016 library

274
00:10:26,480 --> 00:10:29,200
managed to get through about 848

275
00:10:29,200 --> 00:10:31,360
messages per second

276
00:10:31,360 --> 00:10:32,880
looking at the way the library works and

277
00:10:32,880 --> 00:10:34,160
the data sheet

278
00:10:34,160 --> 00:10:36,320
the first command here is read a

279
00:10:36,320 --> 00:10:38,959
register to check if the buffer is empty

280
00:10:38,959 --> 00:10:39,920
i then

281
00:10:39,920 --> 00:10:41,040
write

282
00:10:41,040 --> 00:10:44,000
the eight bytes of data into the

283
00:10:44,000 --> 00:10:46,720
into the controller

284
00:10:46,720 --> 00:10:48,320
i then

285
00:10:48,320 --> 00:10:50,160
write another

286
00:10:50,160 --> 00:10:52,320
byte in from the data length i then

287
00:10:52,320 --> 00:10:55,040
write four bytes in for the header

288
00:10:55,040 --> 00:10:57,360
information of the cam message and then

289
00:10:57,360 --> 00:10:59,600
finally write a single

290
00:10:59,600 --> 00:11:01,200
bit into a

291
00:11:01,200 --> 00:11:04,240
register that says transmit the message

292
00:11:04,240 --> 00:11:06,959
on the wire the message then transmits

293
00:11:06,959 --> 00:11:08,880
i then check to see whether that message

294
00:11:08,880 --> 00:11:11,440
has been checked and sent and everything

295
00:11:11,440 --> 00:11:12,959
starts again

296
00:11:12,959 --> 00:11:15,600
as you can see there is a fixed period

297
00:11:15,600 --> 00:11:18,000
here between this command

298
00:11:18,000 --> 00:11:20,399
and the result this command the result

299
00:11:20,399 --> 00:11:21,839
is one result

300
00:11:21,839 --> 00:11:24,480
this command result

301
00:11:24,480 --> 00:11:25,839
this was actually written into the

302
00:11:25,839 --> 00:11:28,640
library itself of a 250 microsecond

303
00:11:28,640 --> 00:11:32,480
delay so i think we can do things better

304
00:11:32,480 --> 00:11:34,640
the later version of the library itself

305
00:11:34,640 --> 00:11:37,959
the 2017 version i could manage to get

306
00:11:37,959 --> 00:11:40,880
2606 messages per second because of

307
00:11:40,880 --> 00:11:43,440
removing those delays

308
00:11:43,440 --> 00:11:46,240
again we're using the same method of

309
00:11:46,240 --> 00:11:47,680
checker register

310
00:11:47,680 --> 00:11:49,360
write some data write some more data

311
00:11:49,360 --> 00:11:51,600
write some more data send the message

312
00:11:51,600 --> 00:11:53,360
it then does some polling to see whether

313
00:11:53,360 --> 00:11:54,800
the message is sent

314
00:11:54,800 --> 00:11:56,720
finally when the message is sent it then

315
00:11:56,720 --> 00:11:59,519
allows it to send the next message um

316
00:11:59,519 --> 00:12:01,920
this time the delays have been removed

317
00:12:01,920 --> 00:12:04,079
we're just waiting for the polling to

318
00:12:04,079 --> 00:12:05,360
happen

319
00:12:05,360 --> 00:12:07,440
however looking at the data sheet for

320
00:12:07,440 --> 00:12:09,440
the can controller itself there is a

321
00:12:09,440 --> 00:12:10,480
function

322
00:12:10,480 --> 00:12:12,480
that allows you to write all of the data

323
00:12:12,480 --> 00:12:16,880
into our transmit buffer zero in one go

324
00:12:16,880 --> 00:12:20,079
so i modified the library itself to

325
00:12:20,079 --> 00:12:22,959
actually do this in one go

326
00:12:22,959 --> 00:12:25,440
as you can see here there is the command

327
00:12:25,440 --> 00:12:26,959
that sends some data to the can

328
00:12:26,959 --> 00:12:28,880
controller there's a single command that

329
00:12:28,880 --> 00:12:29,839
says

330
00:12:29,839 --> 00:12:32,320
send the data we then poll it a load of

331
00:12:32,320 --> 00:12:35,040
times find out it's sent and then reset

332
00:12:35,040 --> 00:12:37,680
the bit in the interrupt function that

333
00:12:37,680 --> 00:12:39,600
say the message has been sent and

334
00:12:39,600 --> 00:12:41,279
everything starts again

335
00:12:41,279 --> 00:12:43,360
this version of the library managed to

336
00:12:43,360 --> 00:12:44,200
send

337
00:12:44,200 --> 00:12:47,120
3049 messages per second

338
00:12:47,120 --> 00:12:49,279
um

339
00:12:49,279 --> 00:12:51,120
if you can see here there's a minor

340
00:12:51,120 --> 00:12:53,839
delay between the writing of the data in

341
00:12:53,839 --> 00:12:56,160
and actually the sending this is due to

342
00:12:56,160 --> 00:12:58,480
the digital write function being used in

343
00:12:58,480 --> 00:13:01,040
the arduino ide which takes about eight

344
00:13:01,040 --> 00:13:02,800
to ten microseconds

345
00:13:02,800 --> 00:13:04,399
which means you can actually make it

346
00:13:04,399 --> 00:13:06,880
even quicker

347
00:13:06,880 --> 00:13:09,040
this is the final version of the library

348
00:13:09,040 --> 00:13:10,480
which i use

349
00:13:10,480 --> 00:13:12,959
in that i used direct port manipulation

350
00:13:12,959 --> 00:13:15,839
and managed to get it down to 3 309

351
00:13:15,839 --> 00:13:17,440
messages per second

352
00:13:17,440 --> 00:13:20,160
as you can see down the bottom here

353
00:13:20,160 --> 00:13:22,639
write the data in almost immediately

354
00:13:22,639 --> 00:13:24,720
tell it to transmit and then it

355
00:13:24,720 --> 00:13:26,160
transmits

356
00:13:26,160 --> 00:13:28,959
so that's a bit better than the 848

357
00:13:28,959 --> 00:13:30,639
messages per second

358
00:13:30,639 --> 00:13:32,959
and the direct port manipulation only

359
00:13:32,959 --> 00:13:35,120
takes two microseconds

360
00:13:35,120 --> 00:13:37,440
so onto the microcontroller

361
00:13:37,440 --> 00:13:39,120
the original plan was to try and use an

362
00:13:39,120 --> 00:13:42,519
arduino mega 2560 which has the

363
00:13:42,519 --> 00:13:45,600
atmega2560 16 mega cpu

364
00:13:45,600 --> 00:13:49,519
but has no canned controller on board

365
00:13:49,519 --> 00:13:52,079
this will potentially cause issues

366
00:13:52,079 --> 00:13:53,920
because you're forever waiting the or

367
00:13:53,920 --> 00:13:56,320
for the sbi bus to

368
00:13:56,320 --> 00:13:58,079
get the data out the controller or

369
00:13:58,079 --> 00:14:01,199
forever polling the controller

370
00:14:01,199 --> 00:14:04,000
so that was sort of parked

371
00:14:04,000 --> 00:14:06,480
um i then looked at the it's bitsy m4

372
00:14:06,480 --> 00:14:10,880
fire adafruit it has the atsam d51 150

373
00:14:10,880 --> 00:14:12,560
20 megahertz

374
00:14:12,560 --> 00:14:14,880
um again it has no can controller so

375
00:14:14,880 --> 00:14:17,360
would have to have four external sbi

376
00:14:17,360 --> 00:14:19,199
based controllers

377
00:14:19,199 --> 00:14:20,480
again it would

378
00:14:20,480 --> 00:14:23,120
be forever waiting to see whether those

379
00:14:23,120 --> 00:14:25,920
sbi controllers are actually got any

380
00:14:25,920 --> 00:14:29,600
data so finally found the teensy 4.0

381
00:14:29,600 --> 00:14:32,480
which is an arm cortex m7 at 600

382
00:14:32,480 --> 00:14:33,680
megahertz

383
00:14:33,680 --> 00:14:36,000
can be overclocked to over a gigahertz

384
00:14:36,000 --> 00:14:38,240
if you add some heatsinks

385
00:14:38,240 --> 00:14:39,839
the good thing about this

386
00:14:39,839 --> 00:14:43,199
microcontroller it has two canon 2.0

387
00:14:43,199 --> 00:14:45,920
um controllers on board and one can fd

388
00:14:45,920 --> 00:14:48,720
compliant controller

389
00:14:48,720 --> 00:14:51,040
looking at the benchmark stats for those

390
00:14:51,040 --> 00:14:52,880
three different ecus

391
00:14:52,880 --> 00:14:55,040
or microcontrollers shall we say

392
00:14:55,040 --> 00:14:58,160
um the arduino mega has a value of seven

393
00:14:58,160 --> 00:15:01,199
the metro m4 has a value of 215 which is

394
00:15:01,199 --> 00:15:03,279
about 30 times faster

395
00:15:03,279 --> 00:15:07,160
um and then the tnt4 has a value of 2

396
00:15:07,160 --> 00:15:11,600
314 which means the tnc is about 300

397
00:15:11,600 --> 00:15:14,320
times faster than the mega

398
00:15:14,320 --> 00:15:15,920
it's a pretty good little chip in the

399
00:15:15,920 --> 00:15:17,519
scheme of things

400
00:15:17,519 --> 00:15:20,320
on to the hardware the pcbs here is the

401
00:15:20,320 --> 00:15:24,720
version 0 of my pcb from 2020

402
00:15:24,720 --> 00:15:27,040
there is actually a mistake on it

403
00:15:27,040 --> 00:15:28,480
here you can probably see it at the

404
00:15:28,480 --> 00:15:30,720
bottom there there is an led

405
00:15:30,720 --> 00:15:32,560
um single surface mount one it should

406
00:15:32,560 --> 00:15:34,639
have been a neopixel but i put the

407
00:15:34,639 --> 00:15:37,199
footprint on backwards so couldn't use

408
00:15:37,199 --> 00:15:38,720
it

409
00:15:38,720 --> 00:15:41,600
here we have the tnt4 on the left um

410
00:15:41,600 --> 00:15:43,199
battery connector for the real-time

411
00:15:43,199 --> 00:15:44,160
clock

412
00:15:44,160 --> 00:15:47,199
the external can controller here and

413
00:15:47,199 --> 00:15:48,399
clock

414
00:15:48,399 --> 00:15:50,000
we then have four

415
00:15:50,000 --> 00:15:52,399
uh can transceivers third one down being

416
00:15:52,399 --> 00:15:54,480
slightly different in it's a can fd

417
00:15:54,480 --> 00:15:56,399
transceiver

418
00:15:56,399 --> 00:15:58,480
and then we have the automotive grade

419
00:15:58,480 --> 00:16:01,040
connectors on either side the right hand

420
00:16:01,040 --> 00:16:03,440
side is can and power

421
00:16:03,440 --> 00:16:06,959
the left hand side is inputs and outputs

422
00:16:06,959 --> 00:16:10,160
um i did actually create a version 1.1

423
00:16:10,160 --> 00:16:10,959
of the

424
00:16:10,959 --> 00:16:14,240
pcb i worked to fix the neopixel

425
00:16:14,240 --> 00:16:15,600
footprint but i never sent it to

426
00:16:15,600 --> 00:16:16,959
fabrication

427
00:16:16,959 --> 00:16:20,560
and then created a version 1.2 which um

428
00:16:20,560 --> 00:16:23,120
uses has some extra additional

429
00:16:23,120 --> 00:16:26,079
interrupts on the can controller to

430
00:16:26,079 --> 00:16:28,399
allow you to trigger on transmit or

431
00:16:28,399 --> 00:16:32,480
receive buffers directly as opposed to

432
00:16:32,480 --> 00:16:33,680
using

433
00:16:33,680 --> 00:16:36,160
spi interrupts

434
00:16:36,160 --> 00:16:37,920
or spi control

435
00:16:37,920 --> 00:16:40,320
again it looks almost identical to this

436
00:16:40,320 --> 00:16:42,320
the other one and the only one out of

437
00:16:42,320 --> 00:16:45,600
four is actually uh is actually 1.2

438
00:16:45,600 --> 00:16:47,440
is the gateway one because that's the

439
00:16:47,440 --> 00:16:49,680
only one that needs to actually use all

440
00:16:49,680 --> 00:16:53,040
four of the can controllers

441
00:16:53,040 --> 00:16:54,880
here is the i o board

442
00:16:54,880 --> 00:16:56,959
the i o function is

443
00:16:56,959 --> 00:16:59,720
provided via two

444
00:16:59,720 --> 00:17:02,959
mcp23017 io expander boards

445
00:17:02,959 --> 00:17:06,400
each of which has 16 inputs or outputs

446
00:17:06,400 --> 00:17:08,000
which you can see at the top there

447
00:17:08,000 --> 00:17:09,679
you've got two rows of eight

448
00:17:09,679 --> 00:17:10,799
above the two

449
00:17:10,799 --> 00:17:12,319
uh two chips

450
00:17:12,319 --> 00:17:13,919
at bottom there you've got some power

451
00:17:13,919 --> 00:17:14,959
and ground

452
00:17:14,959 --> 00:17:16,400
you're going to have the four analog

453
00:17:16,400 --> 00:17:17,520
inputs

454
00:17:17,520 --> 00:17:20,640
the next in serial which is

455
00:17:20,640 --> 00:17:24,400
serial 5 within the um tnt

456
00:17:24,400 --> 00:17:27,760
on the powertrain ecu itself

457
00:17:27,760 --> 00:17:31,280
analog 2 and analog 3 is used for serial

458
00:17:31,280 --> 00:17:32,720
4

459
00:17:32,720 --> 00:17:35,120
and again we have a 20-pin automotive

460
00:17:35,120 --> 00:17:37,440
grade connector

461
00:17:37,440 --> 00:17:40,000
to connect it back to the ecu itself

462
00:17:40,000 --> 00:17:44,240
it's a different one to the um ecu

463
00:17:44,240 --> 00:17:45,919
and it's keyed slightly differently it's

464
00:17:45,919 --> 00:17:47,760
black rather than gray so you can't mess

465
00:17:47,760 --> 00:17:49,600
it up and get it normally around

466
00:17:49,600 --> 00:17:51,120
here is what it looks like within the

467
00:17:51,120 --> 00:17:54,000
roof um it's a bit messy

468
00:17:54,000 --> 00:17:56,559
um i really don't want to unplug it so

469
00:17:56,559 --> 00:17:58,160
that's all you're going to get regarding

470
00:17:58,160 --> 00:18:00,080
pictures

471
00:18:00,080 --> 00:18:02,559
so again onto the inputs and outputs

472
00:18:02,559 --> 00:18:04,240
there are three three and a half inch

473
00:18:04,240 --> 00:18:06,480
next year human machine interface

474
00:18:06,480 --> 00:18:08,080
screens

475
00:18:08,080 --> 00:18:10,799
i'll go into a bit detail on that

476
00:18:10,799 --> 00:18:12,559
those are individually connected to the

477
00:18:12,559 --> 00:18:14,720
three easy used powertrain body and

478
00:18:14,720 --> 00:18:16,240
chassis

479
00:18:16,240 --> 00:18:18,240
we then have most of the switches on

480
00:18:18,240 --> 00:18:20,160
there are connected to the chassis ecu

481
00:18:20,160 --> 00:18:22,320
there are three potentiometers again for

482
00:18:22,320 --> 00:18:24,320
brake accelerator steering there is a

483
00:18:24,320 --> 00:18:25,840
little steering wheel there it came off

484
00:18:25,840 --> 00:18:27,039
of the keyring

485
00:18:27,039 --> 00:18:29,200
there are two rotary encoders including

486
00:18:29,200 --> 00:18:32,000
push for front light

487
00:18:32,000 --> 00:18:35,679
and flash and front wiper and washer

488
00:18:35,679 --> 00:18:38,400
there are five toggle switches two for

489
00:18:38,400 --> 00:18:40,480
the windows one for indicator one for

490
00:18:40,480 --> 00:18:43,039
gear indicator and one for the rear

491
00:18:43,039 --> 00:18:45,440
wiper and washer

492
00:18:45,440 --> 00:18:48,559
there are six push switches you can see

493
00:18:48,559 --> 00:18:51,280
hazards lock and horn and two additional

494
00:18:51,280 --> 00:18:52,799
push switches that include two

495
00:18:52,799 --> 00:18:55,120
indicators for parking brake and

496
00:18:55,120 --> 00:18:56,559
ignition

497
00:18:56,559 --> 00:18:58,320
in the bottom left hand corner you can

498
00:18:58,320 --> 00:19:01,679
also see another rotor encoder and

499
00:19:01,679 --> 00:19:03,919
potentiometer which is connected to the

500
00:19:03,919 --> 00:19:06,720
powertrain ecu which is used for the

501
00:19:06,720 --> 00:19:09,679
mode functions to

502
00:19:09,679 --> 00:19:13,760
connect the box itself to the um

503
00:19:13,760 --> 00:19:16,720
bluetooth car etc

504
00:19:16,720 --> 00:19:18,720
there is a bluetooth bt-05 on the

505
00:19:18,720 --> 00:19:20,799
powertrain ecu you can't see it at the

506
00:19:20,799 --> 00:19:21,919
moment because it's tucked down the

507
00:19:21,919 --> 00:19:25,120
left-hand side somewhere

508
00:19:25,120 --> 00:19:26,799
there is a bit of black acrylic

509
00:19:26,799 --> 00:19:28,080
underneath it which holds it all

510
00:19:28,080 --> 00:19:30,720
together which was manly cut in my

511
00:19:30,720 --> 00:19:31,679
kitchen

512
00:19:31,679 --> 00:19:33,600
don't tell the wife

513
00:19:33,600 --> 00:19:36,080
it actually needs to be replaced but i

514
00:19:36,080 --> 00:19:38,000
personally like it because it shows that

515
00:19:38,000 --> 00:19:40,480
it was sort of hand built

516
00:19:40,480 --> 00:19:41,280
so

517
00:19:41,280 --> 00:19:43,280
on to what it looks like here is the

518
00:19:43,280 --> 00:19:45,760
case in the closed variety it's quite

519
00:19:45,760 --> 00:19:47,440
small it's quite portable

520
00:19:47,440 --> 00:19:49,200
doesn't really weigh a lot it's a lot

521
00:19:49,200 --> 00:19:51,200
lighter than my car in a box

522
00:19:51,200 --> 00:19:53,200
here is the case open

523
00:19:53,200 --> 00:19:54,880
as you can see at the bottom there there

524
00:19:54,880 --> 00:19:56,559
are the four ecu's

525
00:19:56,559 --> 00:19:58,799
i am actually using pcbs for the front

526
00:19:58,799 --> 00:20:00,880
and rear plate so i can get them cut out

527
00:20:00,880 --> 00:20:03,679
correctly as opposed to me using

528
00:20:03,679 --> 00:20:07,360
again a file and a drill on the kitchen

529
00:20:07,360 --> 00:20:09,440
till the misses

530
00:20:09,440 --> 00:20:13,039
onto a close-up of the top half again

531
00:20:13,039 --> 00:20:14,559
you can see

532
00:20:14,559 --> 00:20:16,799
the top half acrylic it is wedged in

533
00:20:16,799 --> 00:20:18,480
with a bit of bubble wrap which stops it

534
00:20:18,480 --> 00:20:20,480
falling out when you open the lid

535
00:20:20,480 --> 00:20:22,960
however we are we are

536
00:20:22,960 --> 00:20:25,600
on to the bottom half of the case

537
00:20:25,600 --> 00:20:27,280
so in the bottom half you've got the

538
00:20:27,280 --> 00:20:29,520
four ecu's across the middle there in

539
00:20:29,520 --> 00:20:30,640
the bottom right hand corner you've got

540
00:20:30,640 --> 00:20:33,919
a 12 volt to five volt power supply the

541
00:20:33,919 --> 00:20:36,960
12 volt also filled the obd2 port to

542
00:20:36,960 --> 00:20:38,799
give it power

543
00:20:38,799 --> 00:20:40,880
bottom left-hand corner there you have a

544
00:20:40,880 --> 00:20:42,880
six-way fuse box

545
00:20:42,880 --> 00:20:45,440
those are actually connected behind

546
00:20:45,440 --> 00:20:48,400
together but it allows you to jump into

547
00:20:48,400 --> 00:20:50,559
each of the three buses for powertrain

548
00:20:50,559 --> 00:20:52,799
chassis or body

549
00:20:52,799 --> 00:20:55,520
um they actually are connected the

550
00:20:55,520 --> 00:20:57,600
jumper wires are connected two pins

551
00:20:57,600 --> 00:21:00,159
three and eleven on the obd2 port

552
00:21:00,159 --> 00:21:03,360
um the standard 6 and 14 is connected to

553
00:21:03,360 --> 00:21:07,520
the gateway ecu's obd2 port as well

554
00:21:07,520 --> 00:21:09,120
the top half is

555
00:21:09,120 --> 00:21:10,960
of the case looks like this if you

556
00:21:10,960 --> 00:21:13,360
accidentally open it when the um

557
00:21:13,360 --> 00:21:15,440
bubble wrap isn't wedged in

558
00:21:15,440 --> 00:21:17,840
that bit of card holds it all together

559
00:21:17,840 --> 00:21:19,600
behind that bit of card is a bit of a

560
00:21:19,600 --> 00:21:21,919
spaghetti mess i'll use some of my other

561
00:21:21,919 --> 00:21:24,320
little pcbs i've

562
00:21:24,320 --> 00:21:27,120
broken misconfigured etc as sort of

563
00:21:27,120 --> 00:21:29,039
holders to hold it all together

564
00:21:29,039 --> 00:21:31,440
it works quite well

565
00:21:31,440 --> 00:21:33,760
the case in question is

566
00:21:33,760 --> 00:21:38,400
255 by 345 by 115 millimeters

567
00:21:38,400 --> 00:21:41,919
um for you in inches it's about 10 by 14

568
00:21:41,919 --> 00:21:44,880
by 5 i think

569
00:21:44,880 --> 00:21:46,240
so the code

570
00:21:46,240 --> 00:21:47,679
as i said previously i started on the

571
00:21:47,679 --> 00:21:50,640
repetitive sending of the dummy data

572
00:21:50,640 --> 00:21:52,159
using timer-based interrupts to make

573
00:21:52,159 --> 00:21:54,480
sure i could send that 810 messages per

574
00:21:54,480 --> 00:21:55,520
second

575
00:21:55,520 --> 00:21:58,000
once the i o pcbs arrived i had to then

576
00:21:58,000 --> 00:21:59,600
write the code to interact with the

577
00:21:59,600 --> 00:22:02,720
inputs and the next indisplays

578
00:22:02,720 --> 00:22:04,400
initially there were four separate bits

579
00:22:04,400 --> 00:22:07,039
of code each for the four ecus however i

580
00:22:07,039 --> 00:22:09,440
have subsequently aggregated them into

581
00:22:09,440 --> 00:22:11,280
the single code sketch

582
00:22:11,280 --> 00:22:14,000
within my github repository there are

583
00:22:14,000 --> 00:22:17,039
the original single ecu codes

584
00:22:17,039 --> 00:22:19,280
but i offer no warranty on them at all i

585
00:22:19,280 --> 00:22:21,120
have no warranty on the whole solution

586
00:22:21,120 --> 00:22:22,880
either

587
00:22:22,880 --> 00:22:25,600
so the next gm human machine interfaces

588
00:22:25,600 --> 00:22:28,320
they are serial based displays

589
00:22:28,320 --> 00:22:29,760
which send serial commands back and

590
00:22:29,760 --> 00:22:31,840
forward you basically program it with

591
00:22:31,840 --> 00:22:34,000
some something to display

592
00:22:34,000 --> 00:22:37,039
on this ide um you can then make things

593
00:22:37,039 --> 00:22:39,440
visible or not visible you can make

594
00:22:39,440 --> 00:22:43,039
value show up etc make dials change um

595
00:22:43,039 --> 00:22:44,960
by sending data

596
00:22:44,960 --> 00:22:47,520
you can also run a simulator to show

597
00:22:47,520 --> 00:22:51,600
what would happen on one of their boards

598
00:22:51,919 --> 00:22:53,919
in the left-hand side there it says page

599
00:22:53,919 --> 00:22:55,840
zero that basically tells it to turn to

600
00:22:55,840 --> 00:22:58,080
page zero in the middle you can see the

601
00:22:58,080 --> 00:23:00,159
result of that command which goes back

602
00:23:00,159 --> 00:23:02,799
to the microcontroller or the simulator

603
00:23:02,799 --> 00:23:04,559
those um

604
00:23:04,559 --> 00:23:06,640
characters bytes there basically you

605
00:23:06,640 --> 00:23:08,720
tell it it is now at page zero so the

606
00:23:08,720 --> 00:23:10,240
microcontroller knows where those things

607
00:23:10,240 --> 00:23:11,600
are

608
00:23:11,600 --> 00:23:14,880
next screen is a little demo um start on

609
00:23:14,880 --> 00:23:16,799
page one i think it is

610
00:23:16,799 --> 00:23:18,640
and then paste something in that says go

611
00:23:18,640 --> 00:23:20,080
to page zero

612
00:23:20,080 --> 00:23:23,120
which does my little intro screen

613
00:23:23,120 --> 00:23:25,360
flashes for all the lights etc opens and

614
00:23:25,360 --> 00:23:27,120
closes the windows

615
00:23:27,120 --> 00:23:29,120
and then sends an um thing saying the

616
00:23:29,120 --> 00:23:31,039
page is done it then puts the brake

617
00:23:31,039 --> 00:23:32,080
lights on

618
00:23:32,080 --> 00:23:34,159
i then paste it again turn off the brake

619
00:23:34,159 --> 00:23:36,400
lights

620
00:23:36,400 --> 00:23:38,400
and then click around the screen to show

621
00:23:38,400 --> 00:23:41,039
you there are hot areas on the screen

622
00:23:41,039 --> 00:23:45,360
for the doors bonnet and trunk

623
00:23:45,679 --> 00:23:47,520
that allows you to send data back to the

624
00:23:47,520 --> 00:23:49,120
ecu saying someone's clicked on

625
00:23:49,120 --> 00:23:51,520
something so that you can do something

626
00:23:51,520 --> 00:23:52,799
with that

627
00:23:52,799 --> 00:23:54,720
works quite well they are pretty cheap

628
00:23:54,720 --> 00:23:57,760
i'll go into costs in a minute

629
00:23:57,760 --> 00:23:59,600
next part of the solution is the little

630
00:23:59,600 --> 00:24:02,000
arduino based car i bought this from

631
00:24:02,000 --> 00:24:04,960
amazon for about 50 pound i think it is

632
00:24:04,960 --> 00:24:07,360
um by default it can be used using

633
00:24:07,360 --> 00:24:09,919
bluetooth infrared ultrasonic detection

634
00:24:09,919 --> 00:24:11,919
or line following

635
00:24:11,919 --> 00:24:13,840
i had to modify the code that controls

636
00:24:13,840 --> 00:24:15,679
the lights to be the same as the body

637
00:24:15,679 --> 00:24:16,880
ecu

638
00:24:16,880 --> 00:24:19,520
so that um when the lights come on the

639
00:24:19,520 --> 00:24:20,880
body

640
00:24:20,880 --> 00:24:23,360
the lights would come on on the car

641
00:24:23,360 --> 00:24:25,200
correctly it's like indicators

642
00:24:25,200 --> 00:24:27,679
sidelights headlights main beam

643
00:24:27,679 --> 00:24:29,600
i also had to change the gateway code to

644
00:24:29,600 --> 00:24:31,760
allow some of those messages to go to

645
00:24:31,760 --> 00:24:34,880
the powertrain ecu because normally the

646
00:24:34,880 --> 00:24:37,120
powertrain ecu wouldn't see the details

647
00:24:37,120 --> 00:24:39,840
of the horn etc

648
00:24:39,840 --> 00:24:41,120
there is some logic within the

649
00:24:41,120 --> 00:24:43,840
powertrain ecu that tells

650
00:24:43,840 --> 00:24:46,799
the car how fast to drive or how fast

651
00:24:46,799 --> 00:24:48,080
not to drive

652
00:24:48,080 --> 00:24:51,120
it basically calculates a value

653
00:24:51,120 --> 00:24:54,559
um depending on the accelerator pedal

654
00:24:54,559 --> 00:24:57,120
the brake pedal and the handbrake status

655
00:24:57,120 --> 00:24:59,360
and the engine on the status

656
00:24:59,360 --> 00:25:01,440
and then sends it over bluetooth to the

657
00:25:01,440 --> 00:25:02,720
car

658
00:25:02,720 --> 00:25:05,520
so onto a bit of a demo

659
00:25:05,520 --> 00:25:08,320
so here's a demo first turn it on go

660
00:25:08,320 --> 00:25:10,159
through its initialization sequence you

661
00:25:10,159 --> 00:25:11,760
can see the little red flashing light in

662
00:25:11,760 --> 00:25:12,960
the corner

663
00:25:12,960 --> 00:25:16,960
that shows the bluetooth is working

664
00:25:17,360 --> 00:25:20,320
first turn the ignition on by pressing

665
00:25:20,320 --> 00:25:22,159
the ignition on button

666
00:25:22,159 --> 00:25:24,559
which works fine then take the handbrake

667
00:25:24,559 --> 00:25:26,720
off on the left

668
00:25:26,720 --> 00:25:27,840
there is an issue here with switch

669
00:25:27,840 --> 00:25:30,320
bounce but um it does work most of the

670
00:25:30,320 --> 00:25:31,600
time

671
00:25:31,600 --> 00:25:33,440
so the handbrake is off

672
00:25:33,440 --> 00:25:35,440
i then turn it around to mode b which

673
00:25:35,440 --> 00:25:38,240
means the bluetooth car is connected

674
00:25:38,240 --> 00:25:40,159
i can then increase and decrease the

675
00:25:40,159 --> 00:25:41,919
accelerator you can see the accelerator

676
00:25:41,919 --> 00:25:43,919
going up down on the rev counter

677
00:25:43,919 --> 00:25:46,080
braking seat changing indicators

678
00:25:46,080 --> 00:25:47,919
flashing on both the chassis and body

679
00:25:47,919 --> 00:25:49,360
ecu

680
00:25:49,360 --> 00:25:52,559
both for right and left

681
00:25:55,039 --> 00:25:57,200
we then change gear from park reverse

682
00:25:57,200 --> 00:25:59,600
neutral drive

683
00:25:59,600 --> 00:26:00,880
and now

684
00:26:00,880 --> 00:26:03,679
what i am doing

685
00:26:03,679 --> 00:26:05,200
is going to

686
00:26:05,200 --> 00:26:08,080
lower the right hand window

687
00:26:08,080 --> 00:26:11,840
lower the left hand window

688
00:26:13,440 --> 00:26:15,760
try and lock the left hand door lock the

689
00:26:15,760 --> 00:26:17,200
right hand door again we're having

690
00:26:17,200 --> 00:26:19,279
switch bounce issues doesn't really

691
00:26:19,279 --> 00:26:20,960
matter

692
00:26:20,960 --> 00:26:24,520
most of the time

693
00:26:28,000 --> 00:26:29,840
that's that

694
00:26:29,840 --> 00:26:32,320
now we go on to a demo of some hacking

695
00:26:32,320 --> 00:26:35,760
happening what i have connected to the

696
00:26:35,760 --> 00:26:38,000
obd2 port

697
00:26:38,000 --> 00:26:40,640
and also the chassis ecu

698
00:26:40,640 --> 00:26:44,080
is a nano can device which is spoofing

699
00:26:44,080 --> 00:26:48,000
hazards on flashlight flash headlights

700
00:26:48,000 --> 00:26:51,120
fuel gauge at 40 cooling temperature max

701
00:26:51,120 --> 00:26:53,440
steering at full right and accelerate

702
00:26:53,440 --> 00:26:54,960
around 10

703
00:26:54,960 --> 00:26:56,960
if you watch both the chassis and body

704
00:26:56,960 --> 00:26:58,000
ecu

705
00:26:58,000 --> 00:27:00,080
you can see things happen

706
00:27:00,080 --> 00:27:04,279
when those messages get injected

707
00:27:08,880 --> 00:27:10,080
so here we go

708
00:27:10,080 --> 00:27:12,880
lights are flashing indicators are on

709
00:27:12,880 --> 00:27:13,840
um

710
00:27:13,840 --> 00:27:15,679
fuel and the temperature gauge is going

711
00:27:15,679 --> 00:27:18,240
nuts and accelerators going nuts as you

712
00:27:18,240 --> 00:27:20,000
can see it's stuck on with the hazards

713
00:27:20,000 --> 00:27:21,200
and the light

714
00:27:21,200 --> 00:27:23,279
you basically have to interact with the

715
00:27:23,279 --> 00:27:26,000
inputs otherwise it will not reset it

716
00:27:26,000 --> 00:27:27,520
because it looks for a change of the

717
00:27:27,520 --> 00:27:29,120
inputs normally

718
00:27:29,120 --> 00:27:30,080
um

719
00:27:30,080 --> 00:27:32,320
that's that demo done

720
00:27:32,320 --> 00:27:34,960
here's another little demo

721
00:27:34,960 --> 00:27:36,799
with my little friend biggie

722
00:27:36,799 --> 00:27:38,720
the mascot of the car hacking village

723
00:27:38,720 --> 00:27:40,159
hello

724
00:27:40,159 --> 00:27:42,799
um he's now going to be driving on full

725
00:27:42,799 --> 00:27:44,240
left-hand steering

726
00:27:44,240 --> 00:27:46,880
and the same messages are we going to be

727
00:27:46,880 --> 00:27:49,360
injected again full right hand lock

728
00:27:49,360 --> 00:27:51,600
change of accelerator speed flashlight

729
00:27:51,600 --> 00:27:53,520
etc

730
00:27:53,520 --> 00:27:55,919
so we're going around full left i'm

731
00:27:55,919 --> 00:27:57,760
going to inject the full right hand lock

732
00:27:57,760 --> 00:28:00,480
which is causing it to stutter

733
00:28:00,480 --> 00:28:02,559
again stuttering again

734
00:28:02,559 --> 00:28:05,279
uh he's getting a bit dizzy

735
00:28:05,279 --> 00:28:07,760
uh the hacking has stopped

736
00:28:07,760 --> 00:28:10,080
now i'm gonna turn around

737
00:28:10,080 --> 00:28:11,039
and then

738
00:28:11,039 --> 00:28:13,600
lights on

739
00:28:14,080 --> 00:28:14,840
and

740
00:28:14,840 --> 00:28:18,799
whee disappear into the sunset

741
00:28:18,799 --> 00:28:22,720
so finally how much did it cost me so

742
00:28:22,720 --> 00:28:25,840
costs here shown are from mid 2020 and

743
00:28:25,840 --> 00:28:28,720
do not include postage and packing

744
00:28:28,720 --> 00:28:30,399
the ecu boards themselves

745
00:28:30,399 --> 00:28:33,039
um creating my own custom pcbs getting

746
00:28:33,039 --> 00:28:34,559
all the different parts

747
00:28:34,559 --> 00:28:37,360
the tnt itself is about 20 pound

748
00:28:37,360 --> 00:28:39,520
um they cost about 50 pounds each in

749
00:28:39,520 --> 00:28:41,440
total and there is four of them so

750
00:28:41,440 --> 00:28:44,080
that's 200 pound the i o boards costs

751
00:28:44,080 --> 00:28:46,559
about 25 pound each there are two of

752
00:28:46,559 --> 00:28:50,000
them for the um chassis and powertrain

753
00:28:50,000 --> 00:28:51,039
the

754
00:28:51,039 --> 00:28:54,720
body ecu doesn't require a i o board so

755
00:28:54,720 --> 00:28:56,960
i didn't need one connecting it just

756
00:28:56,960 --> 00:28:58,880
needed the um

757
00:28:58,880 --> 00:29:00,880
next in display connecting so that's a

758
00:29:00,880 --> 00:29:03,120
total of 50 pound

759
00:29:03,120 --> 00:29:05,039
the three three and a half inch next in

760
00:29:05,039 --> 00:29:07,360
displays are about 30 pounds each they

761
00:29:07,360 --> 00:29:10,399
are pretty good they go up to i believe

762
00:29:10,399 --> 00:29:13,120
10 12 inches in size

763
00:29:13,120 --> 00:29:15,360
um with quite a lot more resolution so

764
00:29:15,360 --> 00:29:17,760
that's a total of 90 pound

765
00:29:17,760 --> 00:29:19,279
the case the car the cabling the

766
00:29:19,279 --> 00:29:20,880
switches and all of the bits on the

767
00:29:20,880 --> 00:29:22,000
inside

768
00:29:22,000 --> 00:29:25,039
come to about a total of 160 pound

769
00:29:25,039 --> 00:29:28,000
so in total it cost me 500 pound to

770
00:29:28,000 --> 00:29:29,200
build

771
00:29:29,200 --> 00:29:31,520
which at about today's exchange rate

772
00:29:31,520 --> 00:29:33,279
that's 800

773
00:29:33,279 --> 00:29:35,520
um toyota pasta auto

774
00:29:35,520 --> 00:29:37,520
um currently if you want to purchase it

775
00:29:37,520 --> 00:29:40,799
is 26 780 dollars

776
00:29:40,799 --> 00:29:43,200
um so i built it and saved twenty five

777
00:29:43,200 --> 00:29:45,600
thousand nine hundred and eighty dollars

778
00:29:45,600 --> 00:29:47,279
so maybe i should have changed the name

779
00:29:47,279 --> 00:29:50,240
of my presentation to value pasta auto

780
00:29:50,240 --> 00:29:52,240
how i built it and saved twenty five

781
00:29:52,240 --> 00:29:55,440
thousand hundred and eighty dollars

782
00:29:55,440 --> 00:29:57,200
finally i'd like to say thank you for to

783
00:29:57,200 --> 00:29:59,679
my missus for putting up with my crap

784
00:29:59,679 --> 00:30:01,840
and while i've been building this and

785
00:30:01,840 --> 00:30:03,039
pdo

786
00:30:03,039 --> 00:30:06,399
i'd like to say thank you to terry ip um

787
00:30:06,399 --> 00:30:11,360
he used his um 3d printer to print the

788
00:30:11,360 --> 00:30:13,279
surrounds for the next-gen displays to

789
00:30:13,279 --> 00:30:16,080
allow me to put them into the case

790
00:30:16,080 --> 00:30:17,520
i'd also like to say thank you for the

791
00:30:17,520 --> 00:30:19,600
grim cyber team for allowing me to be

792
00:30:19,600 --> 00:30:20,399
here

793
00:30:20,399 --> 00:30:23,039
and for their previous help with my um

794
00:30:23,039 --> 00:30:24,640
car in a box

795
00:30:24,640 --> 00:30:27,600
i have actually sent um bitbayne

796
00:30:27,600 --> 00:30:30,159
um a couple of the different pcbs if he

797
00:30:30,159 --> 00:30:32,320
wants to try and build one of the ecu's

798
00:30:32,320 --> 00:30:34,559
himself but i don't think he has

799
00:30:34,559 --> 00:30:36,799
but again thank you i will be around for

800
00:30:36,799 --> 00:30:39,520
the next 15-20 minutes on the discord if

801
00:30:39,520 --> 00:30:41,200
you have any questions

802
00:30:41,200 --> 00:30:43,120
if you want any more information contact

803
00:30:43,120 --> 00:30:45,679
me via the methods at the bottom there

804
00:30:45,679 --> 00:30:49,039
and there is a link to my github for all

805
00:30:49,039 --> 00:30:52,399
the files relating to value pasta auto

806
00:30:52,399 --> 00:30:53,679
thank you very much

807
00:30:53,679 --> 00:30:57,240
and good night

808
00:31:02,490 --> 00:31:05,559
[Music]

809
00:31:08,950 --> 00:31:15,209
[Music]

810
00:31:15,760 --> 00:31:17,840
you

