1
00:00:00,000 --> 00:00:03,129
[Music]

2
00:00:05,620 --> 00:00:09,599
[Music]

3
00:00:12,980 --> 00:00:17,039
[Music]

4
00:00:17,039 --> 00:00:18,880
hello everybody welcome to my talk cyber

5
00:00:18,880 --> 00:00:20,720
threat intelligence for the rest of us

6
00:00:20,720 --> 00:00:22,800
implementing intelligence driven threat

7
00:00:22,800 --> 00:00:26,720
hunting an offensive security program in

8
00:00:26,720 --> 00:00:30,080
uh without dedicated teams

9
00:00:30,080 --> 00:00:32,320
i am tom somerville i am a security

10
00:00:32,320 --> 00:00:35,760
researcher at grim uh and i have come

11
00:00:35,760 --> 00:00:38,000
from many years is a traditional blue

12
00:00:38,000 --> 00:00:41,280
team i.t security background

13
00:00:41,280 --> 00:00:43,440
not much in the way of social media

14
00:00:43,440 --> 00:00:45,120
activity so if you want to get in touch

15
00:00:45,120 --> 00:00:47,200
with me please uh reach out to me after

16
00:00:47,200 --> 00:00:50,480
talk and get you my contact intro

17
00:00:50,480 --> 00:00:51,760
uh so

18
00:00:51,760 --> 00:00:53,840
what are we gonna talk about here uh so

19
00:00:53,840 --> 00:00:55,760
um while i was at my previous employer

20
00:00:55,760 --> 00:00:56,960
we were in a position where we were

21
00:00:56,960 --> 00:00:59,120
wrapping up the finishing details on a

22
00:00:59,120 --> 00:01:01,520
multi-year complete overhaul of our

23
00:01:01,520 --> 00:01:03,920
infosec program talking like splitting

24
00:01:03,920 --> 00:01:05,840
up into multiple teams complete pulling

25
00:01:05,840 --> 00:01:07,520
or place of our sim and log collection

26
00:01:07,520 --> 00:01:09,040
infrastructure

27
00:01:09,040 --> 00:01:10,640
reassessing our tooling additional

28
00:01:10,640 --> 00:01:13,280
staffing and more

29
00:01:13,280 --> 00:01:15,840
uh and so while we were sitting pretty

30
00:01:15,840 --> 00:01:18,320
we had two big questions uh first how

31
00:01:18,320 --> 00:01:21,600
was we do uh and second how do we mature

32
00:01:21,600 --> 00:01:23,439
the program from here

33
00:01:23,439 --> 00:01:25,840
uh and so i got to have a lot of fun

34
00:01:25,840 --> 00:01:28,320
being that person they got the piece all

35
00:01:28,320 --> 00:01:30,240
these different questions into this

36
00:01:30,240 --> 00:01:32,240
program that is

37
00:01:32,240 --> 00:01:34,799
uh what we'll be talking about today

38
00:01:34,799 --> 00:01:36,960
so this is more or less what we came up

39
00:01:36,960 --> 00:01:37,920
with

40
00:01:37,920 --> 00:01:38,960
um

41
00:01:38,960 --> 00:01:40,799
for us our entry point was our

42
00:01:40,799 --> 00:01:42,320
engineered network remember we just

43
00:01:42,320 --> 00:01:45,119
spent years overhauling and reorganizing

44
00:01:45,119 --> 00:01:47,680
almost everything infosec and all that

45
00:01:47,680 --> 00:01:50,159
work influences influences our time

46
00:01:50,159 --> 00:01:52,640
spent on cyber threat intelligence

47
00:01:52,640 --> 00:01:54,479
by narrowing our focus when researching

48
00:01:54,479 --> 00:01:56,399
threat actors and their technic

49
00:01:56,399 --> 00:01:58,719
techniques and procedures uh that we

50
00:01:58,719 --> 00:02:00,880
believe our implementation

51
00:02:00,880 --> 00:02:04,240
should already prevent or catch

52
00:02:04,240 --> 00:02:06,399
then we move on to cyber threat

53
00:02:06,399 --> 00:02:07,759
intelligence where we spend our time

54
00:02:07,759 --> 00:02:09,119
researching threat actors that would

55
00:02:09,119 --> 00:02:11,360
target us learning their tactic

56
00:02:11,360 --> 00:02:12,720
techniques and procedures and

57
00:02:12,720 --> 00:02:15,040
identifying items for hunting and

58
00:02:15,040 --> 00:02:16,720
emulation

59
00:02:16,720 --> 00:02:19,520
from there we go to offsec

60
00:02:19,520 --> 00:02:21,040
where we actually spend some time

61
00:02:21,040 --> 00:02:23,360
recreating the activity that we just

62
00:02:23,360 --> 00:02:26,160
researched in a lab environment and then

63
00:02:26,160 --> 00:02:27,920
once it's finished being lab it out we

64
00:02:27,920 --> 00:02:30,160
execute it in production

65
00:02:30,160 --> 00:02:31,599
and this will put our previous

66
00:02:31,599 --> 00:02:34,160
engineering work to the test

67
00:02:34,160 --> 00:02:35,840
after that we move over to threat

68
00:02:35,840 --> 00:02:37,840
hunting where we spend time looking for

69
00:02:37,840 --> 00:02:40,640
the various ttps that were carved

70
00:02:40,640 --> 00:02:43,440
out during our intel research

71
00:02:43,440 --> 00:02:44,319
uh

72
00:02:44,319 --> 00:02:45,599
and the activity that we performed

73
00:02:45,599 --> 00:02:47,680
during emulation there is an optional

74
00:02:47,680 --> 00:02:49,200
exit here for

75
00:02:49,200 --> 00:02:50,959
incident response in the rare event that

76
00:02:50,959 --> 00:02:52,720
it may be needed

77
00:02:52,720 --> 00:02:56,080
so uh then once both uh offset and

78
00:02:56,080 --> 00:02:58,159
hunting has been completed we move over

79
00:02:58,159 --> 00:02:59,440
to the assessment

80
00:02:59,440 --> 00:03:01,040
we just spent a lot of time playing

81
00:03:01,040 --> 00:03:02,080
around

82
00:03:02,080 --> 00:03:03,920
and so here is where we assess

83
00:03:03,920 --> 00:03:05,920
everything we've just done consolidate

84
00:03:05,920 --> 00:03:07,680
into actionable items

85
00:03:07,680 --> 00:03:09,599
and essentially create jiras and write

86
00:03:09,599 --> 00:03:11,040
fancy reports to management and

87
00:03:11,040 --> 00:03:12,879
engineers

88
00:03:12,879 --> 00:03:15,200
uh from there those tickets that we've

89
00:03:15,200 --> 00:03:16,879
opened will further drive our

90
00:03:16,879 --> 00:03:18,560
engineering environment in the weeks and

91
00:03:18,560 --> 00:03:20,319
the months and the years to come

92
00:03:20,319 --> 00:03:22,080
and additionally everything is reported

93
00:03:22,080 --> 00:03:24,480
to management who can use this data as a

94
00:03:24,480 --> 00:03:26,319
way to report on the effectiveness of

95
00:03:26,319 --> 00:03:28,239
the program to their own bosses and

96
00:03:28,239 --> 00:03:30,799
peers but also use it to plan future

97
00:03:30,799 --> 00:03:34,000
projects expenditures justify additional

98
00:03:34,000 --> 00:03:36,640
staffing and et cetera

99
00:03:36,640 --> 00:03:38,879
management can also have an input into

100
00:03:38,879 --> 00:03:41,200
this whole life cycle for example maybe

101
00:03:41,200 --> 00:03:42,640
they want to measure

102
00:03:42,640 --> 00:03:44,319
our capacity to detect and respond to

103
00:03:44,319 --> 00:03:45,680
that big thing the news that happened

104
00:03:45,680 --> 00:03:47,120
last week

105
00:03:47,120 --> 00:03:50,080
and then the whole thing gets uh

106
00:03:50,080 --> 00:03:52,560
put on loop essentially

107
00:03:52,560 --> 00:03:55,120
the best part of it is is that

108
00:03:55,120 --> 00:03:57,280
this train doesn't have a fixed speed

109
00:03:57,280 --> 00:03:59,040
and how long and how often you repeat

110
00:03:59,040 --> 00:04:00,959
this cycle is up to you

111
00:04:00,959 --> 00:04:03,519
and your available time and resources

112
00:04:03,519 --> 00:04:05,680
i would usually fit this whole life

113
00:04:05,680 --> 00:04:08,000
cycle into a single week that would be

114
00:04:08,000 --> 00:04:10,319
one individual for one week i would do

115
00:04:10,319 --> 00:04:12,239
everything i just mentioned

116
00:04:12,239 --> 00:04:14,640
minus the resolution of any engineering

117
00:04:14,640 --> 00:04:15,840
project work

118
00:04:15,840 --> 00:04:18,798
uh and we would usually repeat this once

119
00:04:18,798 --> 00:04:21,839
every six weeks

120
00:04:21,839 --> 00:04:23,600
so what does it actually look like to

121
00:04:23,600 --> 00:04:26,080
perform this activity uh well we start

122
00:04:26,080 --> 00:04:27,680
with cyber threat intelligence this is

123
00:04:27,680 --> 00:04:29,680
what ensures we optimize our time to

124
00:04:29,680 --> 00:04:30,560
come

125
00:04:30,560 --> 00:04:32,240
and do not spend time hunting or

126
00:04:32,240 --> 00:04:34,960
emulating items not relevant to us

127
00:04:34,960 --> 00:04:37,040
or our environment

128
00:04:37,040 --> 00:04:39,440
our threat intel is obtained from a few

129
00:04:39,440 --> 00:04:40,800
different sources

130
00:04:40,800 --> 00:04:42,560
we use some paid for as well as some

131
00:04:42,560 --> 00:04:43,360
free

132
00:04:43,360 --> 00:04:44,800
however for this presentation i'm going

133
00:04:44,800 --> 00:04:47,840
to be using all open threat intel

134
00:04:47,840 --> 00:04:49,840
my favorite free source of intelligence

135
00:04:49,840 --> 00:04:51,360
is by far minor

136
00:04:51,360 --> 00:04:53,680
and their groups page is my personal

137
00:04:53,680 --> 00:04:56,479
favorite little corner of the site

138
00:04:56,479 --> 00:04:58,560
i'll say that for a very long time open

139
00:04:58,560 --> 00:05:00,479
threat intelligence was enough and i

140
00:05:00,479 --> 00:05:02,479
barely touched threat until even though

141
00:05:02,479 --> 00:05:04,479
we had it for other reasons

142
00:05:04,479 --> 00:05:06,160
so if you plan to implement something

143
00:05:06,160 --> 00:05:07,520
similar to this

144
00:05:07,520 --> 00:05:09,199
you don't need paid intel for a good

145
00:05:09,199 --> 00:05:12,880
while however there is value there for

146
00:05:12,880 --> 00:05:15,600
paid intelligence mainly frequency and

147
00:05:15,600 --> 00:05:18,479
relevancy a lot of time open intel is

148
00:05:18,479 --> 00:05:20,560
dated and things no longer work as

149
00:05:20,560 --> 00:05:23,039
described in the report

150
00:05:23,039 --> 00:05:25,280
which may be in part as to why that

151
00:05:25,280 --> 00:05:27,039
intelligence has become open in the

152
00:05:27,039 --> 00:05:29,680
first place uh so paid intelligence gets

153
00:05:29,680 --> 00:05:32,080
you what happened today yesterday or

154
00:05:32,080 --> 00:05:34,000
maybe last week uh rather than what

155
00:05:34,000 --> 00:05:36,000
happened months ago or maybe even like a

156
00:05:36,000 --> 00:05:38,560
year or so ago

157
00:05:38,560 --> 00:05:41,120
so the first thing we did is we compiled

158
00:05:41,120 --> 00:05:42,960
a list of threat actors relevant to us

159
00:05:42,960 --> 00:05:44,880
initially the compilation of this list

160
00:05:44,880 --> 00:05:46,960
took a little time however once compiled

161
00:05:46,960 --> 00:05:49,600
i only occasionally had to update it

162
00:05:49,600 --> 00:05:51,280
note this list does not have to be

163
00:05:51,280 --> 00:05:52,880
perfect to derive value there'll be

164
00:05:52,880 --> 00:05:54,720
likely be many threat actors applicable

165
00:05:54,720 --> 00:05:57,120
to you and if you miss one or two

166
00:05:57,120 --> 00:05:59,039
you'll still be plenty effective so

167
00:05:59,039 --> 00:06:01,280
don't sweat this too much

168
00:06:01,280 --> 00:06:04,319
so how to identify relevant groups to us

169
00:06:04,319 --> 00:06:06,400
well using minor groups we simply read

170
00:06:06,400 --> 00:06:08,560
the descriptions column

171
00:06:08,560 --> 00:06:10,479
let's say you are a large manufacturing

172
00:06:10,479 --> 00:06:12,400
company based in the us

173
00:06:12,400 --> 00:06:13,600
uh you'd probably be interested in

174
00:06:13,600 --> 00:06:14,880
knowing what fox kitten is doing up

175
00:06:14,880 --> 00:06:16,400
there at the top

176
00:06:16,400 --> 00:06:18,400
probably less interested in darkhydrus

177
00:06:18,400 --> 00:06:19,440
in the middle

178
00:06:19,440 --> 00:06:21,199
but what about a group like wizard

179
00:06:21,199 --> 00:06:22,160
spider

180
00:06:22,160 --> 00:06:24,080
i'll give you a hint most of us should

181
00:06:24,080 --> 00:06:25,759
probably care about what groups that are

182
00:06:25,759 --> 00:06:28,160
classified as financially motivated or

183
00:06:28,160 --> 00:06:30,560
e-crime are up to so i definitely

184
00:06:30,560 --> 00:06:31,840
recommend

185
00:06:31,840 --> 00:06:34,080
following and hunting those groups as

186
00:06:34,080 --> 00:06:36,318
well

187
00:06:36,720 --> 00:06:38,000
now that i know

188
00:06:38,000 --> 00:06:39,840
who would target me i would change my

189
00:06:39,840 --> 00:06:42,160
focus as to how they're targeting me

190
00:06:42,160 --> 00:06:44,319
mondays i'd start out with a generic

191
00:06:44,319 --> 00:06:46,880
who's been active recently and uh take a

192
00:06:46,880 --> 00:06:48,800
quick look to see if any new tas have

193
00:06:48,800 --> 00:06:51,440
moved into the space that we care about

194
00:06:51,440 --> 00:06:52,800
now we generally would choose a threat

195
00:06:52,800 --> 00:06:55,120
actor for the week that has been active

196
00:06:55,120 --> 00:06:57,680
and who hasn't gotten a lot of attention

197
00:06:57,680 --> 00:07:00,479
to from us in a while uh for the stock

198
00:07:00,479 --> 00:07:03,039
we'll take spin 7 for a spin

199
00:07:03,039 --> 00:07:04,960
when we go to the actor page we see the

200
00:07:04,960 --> 00:07:07,039
last modified date useful for knowing

201
00:07:07,039 --> 00:07:09,520
about how active this ta is

202
00:07:09,520 --> 00:07:12,400
but note that this is not a

203
00:07:12,400 --> 00:07:15,039
when the ta was last active date but

204
00:07:15,039 --> 00:07:17,360
when mitre has last updated this group's

205
00:07:17,360 --> 00:07:20,160
page the intel they have updated the

206
00:07:20,160 --> 00:07:23,599
page with may or may not be very recent

207
00:07:23,599 --> 00:07:25,840
now the meat of the groups page

208
00:07:25,840 --> 00:07:28,560
is going to be this techniques used uh

209
00:07:28,560 --> 00:07:31,440
and it's mapped back to attack obviously

210
00:07:31,440 --> 00:07:33,280
this is useful for us in our overall

211
00:07:33,280 --> 00:07:35,120
tracking of tpps that have been

212
00:07:35,120 --> 00:07:37,360
validated in our environment

213
00:07:37,360 --> 00:07:39,840
and then note that all of these ttps

214
00:07:39,840 --> 00:07:41,680
have references to the right of each

215
00:07:41,680 --> 00:07:43,199
technique

216
00:07:43,199 --> 00:07:44,800
those little numbers link to publicly

217
00:07:44,800 --> 00:07:46,960
available source documentation

218
00:07:46,960 --> 00:07:49,199
that has more details

219
00:07:49,199 --> 00:07:50,879
scrolling down a little further

220
00:07:50,879 --> 00:07:52,319
we have a list of the software that the

221
00:07:52,319 --> 00:07:54,720
ta has been known to use links to more

222
00:07:54,720 --> 00:07:56,160
references

223
00:07:56,160 --> 00:07:58,000
so going through the references here i'm

224
00:07:58,000 --> 00:07:59,759
going to go and grab one of the most

225
00:07:59,759 --> 00:08:01,199
recent ones

226
00:08:01,199 --> 00:08:03,599
eventually i may work through all of

227
00:08:03,599 --> 00:08:06,639
these for every ta i probably won't

228
00:08:06,639 --> 00:08:08,080
things date pretty quickly and i'll

229
00:08:08,080 --> 00:08:09,520
probably move on to paid intelligence

230
00:08:09,520 --> 00:08:11,680
before then but i guess you could if you

231
00:08:11,680 --> 00:08:14,400
really wanted to

232
00:08:14,479 --> 00:08:17,280
uh so let's click on one

233
00:08:17,280 --> 00:08:19,199
and it takes us to a report by spider

234
00:08:19,199 --> 00:08:20,479
labs

235
00:08:20,479 --> 00:08:22,400
we already have an actor to emulate and

236
00:08:22,400 --> 00:08:25,759
hunt this week fin7 in our case

237
00:08:25,759 --> 00:08:27,440
all their tactics and techniques are

238
00:08:27,440 --> 00:08:29,520
neatly laid out for us and this report

239
00:08:29,520 --> 00:08:31,680
should get us some other procedures for

240
00:08:31,680 --> 00:08:33,919
the techniques that they use

241
00:08:33,919 --> 00:08:35,360
and just in this first paragraph we have

242
00:08:35,360 --> 00:08:36,958
some interesting data

243
00:08:36,958 --> 00:08:39,360
the payload is filament it's installed

244
00:08:39,360 --> 00:08:41,360
through application shimming it tells us

245
00:08:41,360 --> 00:08:43,200
what shimmy is in a reference for more

246
00:08:43,200 --> 00:08:45,680
detail it tells us why they shim which

247
00:08:45,680 --> 00:08:48,080
is for persistence exactly what the

248
00:08:48,080 --> 00:08:51,200
installation of this shim looks like

249
00:08:51,200 --> 00:08:53,440
we can go further and we can see that

250
00:08:53,440 --> 00:08:55,279
they use the utility that is a native

251
00:08:55,279 --> 00:08:57,680
microsoft binary it's instantiated from

252
00:08:57,680 --> 00:08:59,200
a powershell script

253
00:08:59,200 --> 00:09:01,680
um it tells us where the shim database

254
00:09:01,680 --> 00:09:03,760
is copied to after the install so we can

255
00:09:03,760 --> 00:09:06,080
go look for that while hunting uh tells

256
00:09:06,080 --> 00:09:08,480
us which regis keys are modified more

257
00:09:08,480 --> 00:09:10,320
things to hunt for

258
00:09:10,320 --> 00:09:12,160
these things are usually

259
00:09:12,160 --> 00:09:14,080
very densely packed with information and

260
00:09:14,080 --> 00:09:16,320
i could probably just sit up here

261
00:09:16,320 --> 00:09:18,080
and translate this report for a whole 30

262
00:09:18,080 --> 00:09:19,760
minutes so i'm going to abbreviate the

263
00:09:19,760 --> 00:09:21,040
parsing

264
00:09:21,040 --> 00:09:22,480
and stop here

265
00:09:22,480 --> 00:09:24,399
with time you'll learn what makes sense

266
00:09:24,399 --> 00:09:26,800
to hunt on in your own environment and

267
00:09:26,800 --> 00:09:28,720
how to recognize and pull available

268
00:09:28,720 --> 00:09:32,080
action data actionable data out of these

269
00:09:32,080 --> 00:09:34,320
and this is just uh

270
00:09:34,320 --> 00:09:36,800
all the actionable intel that i pulled

271
00:09:36,800 --> 00:09:38,640
out of this report that i could fit on

272
00:09:38,640 --> 00:09:40,080
this screen

273
00:09:40,080 --> 00:09:42,320
this is an example of how densely packed

274
00:09:42,320 --> 00:09:43,600
these are

275
00:09:43,600 --> 00:09:46,080
so at the end of monday we would have

276
00:09:46,080 --> 00:09:48,800
identified a threat actor potentially

277
00:09:48,800 --> 00:09:50,240
interested in my environment that i

278
00:09:50,240 --> 00:09:52,080
would be focusing on for a week number

279
00:09:52,080 --> 00:09:54,000
of tpps that the actor is known for

280
00:09:54,000 --> 00:09:56,480
using a list of procedures to hunt for

281
00:09:56,480 --> 00:09:58,240
later

282
00:09:58,240 --> 00:10:01,760
and at least one procedure that we will

283
00:10:01,760 --> 00:10:02,800
emulate

284
00:10:02,800 --> 00:10:05,519
um what we just covered usually won't

285
00:10:05,519 --> 00:10:07,839
take a full day so you should have ample

286
00:10:07,839 --> 00:10:10,399
time to run over many detailed intel

287
00:10:10,399 --> 00:10:12,560
reports on your ta of choice

288
00:10:12,560 --> 00:10:14,800
and pick many good targets for hunting

289
00:10:14,800 --> 00:10:17,279
emulation later on in the week maybe

290
00:10:17,279 --> 00:10:19,040
start on the next portion

291
00:10:19,040 --> 00:10:21,120
in the late afternoon

292
00:10:21,120 --> 00:10:21,839
so

293
00:10:21,839 --> 00:10:25,279
once cti portion of our week is over we

294
00:10:25,279 --> 00:10:27,920
move on to emulation

295
00:10:27,920 --> 00:10:31,519
or just general offensive security work

296
00:10:31,519 --> 00:10:33,360
don't worry too much about the code that

297
00:10:33,360 --> 00:10:35,279
you're going to see in the screen it can

298
00:10:35,279 --> 00:10:37,200
be a bit hard to read especially with my

299
00:10:37,200 --> 00:10:39,200
picture there in the corner

300
00:10:39,200 --> 00:10:42,240
however these slides all of the text as

301
00:10:42,240 --> 00:10:45,279
well as copies of all the code

302
00:10:45,279 --> 00:10:46,399
will be available

303
00:10:46,399 --> 00:10:48,480
on my github which there will be a link

304
00:10:48,480 --> 00:10:49,600
at the end

305
00:10:49,600 --> 00:10:51,279
of the presentation if you want this for

306
00:10:51,279 --> 00:10:52,959
later

307
00:10:52,959 --> 00:10:53,760
so

308
00:10:53,760 --> 00:10:56,399
uh we move on to thread actor emulation

309
00:10:56,399 --> 00:10:58,240
or as closely as we can we're going to

310
00:10:58,240 --> 00:11:00,560
emulate a portion of the attack chain in

311
00:11:00,560 --> 00:11:02,240
our own environment

312
00:11:02,240 --> 00:11:03,600
i would generally spend two to three

313
00:11:03,600 --> 00:11:05,760
days on this section

314
00:11:05,760 --> 00:11:07,600
from our example report spiderweb lab

315
00:11:07,600 --> 00:11:09,920
tells us that fin7 uses a powershell

316
00:11:09,920 --> 00:11:11,920
script to install a shim database that

317
00:11:11,920 --> 00:11:14,160
patches the payment processing service

318
00:11:14,160 --> 00:11:16,000
the shim code executes the malicious

319
00:11:16,000 --> 00:11:18,640
payload that's stored in the registry

320
00:11:18,640 --> 00:11:20,959
the malicious payload is filament

321
00:11:20,959 --> 00:11:22,160
so that's what we're going to try to do

322
00:11:22,160 --> 00:11:24,000
here sort of

323
00:11:24,000 --> 00:11:25,440
obviously i'm not going to install

324
00:11:25,440 --> 00:11:27,200
filament so we're going to change up the

325
00:11:27,200 --> 00:11:29,040
malicious payload to our own

326
00:11:29,040 --> 00:11:31,920
and i do not have the exact same target

327
00:11:31,920 --> 00:11:34,000
application that was shimmed so we're

328
00:11:34,000 --> 00:11:35,760
going to provide our own

329
00:11:35,760 --> 00:11:39,040
application to shim as well

330
00:11:39,040 --> 00:11:40,399
okay so to start i don't have that

331
00:11:40,399 --> 00:11:42,640
payment processing application that was

332
00:11:42,640 --> 00:11:44,160
mentioned in the report so i'm going to

333
00:11:44,160 --> 00:11:46,480
just whip up a fake one at target here's

334
00:11:46,480 --> 00:11:48,480
the source code of what i wrote what it

335
00:11:48,480 --> 00:11:50,800
looks like when i run

336
00:11:50,800 --> 00:11:52,720
uh next we need a malicious payload i

337
00:11:52,720 --> 00:11:54,959
don't want to use pillow mint so in true

338
00:11:54,959 --> 00:11:57,839
poc fashion just a small program that

339
00:11:57,839 --> 00:12:02,639
launches calc.exe when executed

340
00:12:02,639 --> 00:12:04,880
next the report says the final payload

341
00:12:04,880 --> 00:12:06,959
is stored in the registry key so i need

342
00:12:06,959 --> 00:12:09,920
to serialize our payload

343
00:12:09,920 --> 00:12:12,959
and store it as a string in the registry

344
00:12:12,959 --> 00:12:14,800
here i've converted the binary into a

345
00:12:14,800 --> 00:12:16,079
byte array

346
00:12:16,079 --> 00:12:19,920
compressed in base64 encoded that

347
00:12:19,920 --> 00:12:22,160
and this is how we will load that string

348
00:12:22,160 --> 00:12:24,480
into the relevant registry key mentioned

349
00:12:24,480 --> 00:12:27,120
in the report

350
00:12:27,279 --> 00:12:29,200
next we have to have some way to pull

351
00:12:29,200 --> 00:12:31,839
that string out decode decompress and

352
00:12:31,839 --> 00:12:34,560
load into memory and execute

353
00:12:34,560 --> 00:12:37,279
so here we create some code compile this

354
00:12:37,279 --> 00:12:40,160
up test it out

355
00:12:40,160 --> 00:12:42,480
once again this code is kind of small so

356
00:12:42,480 --> 00:12:44,720
it will be available

357
00:12:44,720 --> 00:12:46,320
on github after the talk if you want to

358
00:12:46,320 --> 00:12:47,839
take a look at it

359
00:12:47,839 --> 00:12:50,639
so when we run this app location

360
00:12:50,639 --> 00:12:52,639
we can see over on the right hand side

361
00:12:52,639 --> 00:12:55,360
when i hit run on that load reg key

362
00:12:55,360 --> 00:12:57,760
binary calc opens which means it was

363
00:12:57,760 --> 00:13:00,240
able to pull that string out of registry

364
00:13:00,240 --> 00:13:01,839
um

365
00:13:01,839 --> 00:13:06,240
decode decompress and execute just fine

366
00:13:06,240 --> 00:13:08,480
now we'll work on creating a dll that

367
00:13:08,480 --> 00:13:10,079
will be shimmed into our payment

368
00:13:10,079 --> 00:13:11,839
processing application

369
00:13:11,839 --> 00:13:13,920
this dll will execute the binary that

370
00:13:13,920 --> 00:13:16,639
decodes decompresses and executes that

371
00:13:16,639 --> 00:13:18,639
regiskey

372
00:13:18,639 --> 00:13:20,720
the dll had to be written in c plus plus

373
00:13:20,720 --> 00:13:23,040
because apparently dl's created in

374
00:13:23,040 --> 00:13:25,920
c-sharp are incapable of having

375
00:13:25,920 --> 00:13:27,440
default entry points

376
00:13:27,440 --> 00:13:29,680
so i just saved you a couple hours of

377
00:13:29,680 --> 00:13:31,680
troubleshooting there

378
00:13:31,680 --> 00:13:34,480
uh so the report stated

379
00:13:34,480 --> 00:13:36,959
that the shim code directly loads the

380
00:13:36,959 --> 00:13:38,639
binary starting the registry key from

381
00:13:38,639 --> 00:13:41,360
the dll and a key i will notice that we

382
00:13:41,360 --> 00:13:44,240
have that one extra step in there where

383
00:13:44,240 --> 00:13:45,680
the shim code

384
00:13:45,680 --> 00:13:48,639
is running a binary that pulls the

385
00:13:48,639 --> 00:13:50,639
string and executes that payload from

386
00:13:50,639 --> 00:13:52,800
registry uh so

387
00:13:52,800 --> 00:13:55,839
why do we do this well um

388
00:13:55,839 --> 00:13:58,240
do reasons uh first my c plus plus is

389
00:13:58,240 --> 00:14:00,480
not where my python or c sharp is and

390
00:14:00,480 --> 00:14:04,000
because at work i'd only get two maybe

391
00:14:04,000 --> 00:14:06,079
three days to lab out and execute this

392
00:14:06,079 --> 00:14:08,480
simulation uh in the instance of this

393
00:14:08,480 --> 00:14:10,880
talk a little less time than that

394
00:14:10,880 --> 00:14:12,959
and so these are some compromises that

395
00:14:12,959 --> 00:14:15,040
we have to live with

396
00:14:15,040 --> 00:14:17,279
i was originally super upset about

397
00:14:17,279 --> 00:14:18,880
having to make this compromise during

398
00:14:18,880 --> 00:14:20,480
the presentation

399
00:14:20,480 --> 00:14:22,320
because it doesn't perfectly emulate

400
00:14:22,320 --> 00:14:24,079
rta's procedure

401
00:14:24,079 --> 00:14:25,279
however

402
00:14:25,279 --> 00:14:26,800
i'm okay with it now because i think

403
00:14:26,800 --> 00:14:28,320
it's an important lesson to learn with

404
00:14:28,320 --> 00:14:30,399
threat emulation there will be times

405
00:14:30,399 --> 00:14:32,800
that you cannot perfectly emulate every

406
00:14:32,800 --> 00:14:35,120
little detail of the entire check chain

407
00:14:35,120 --> 00:14:36,560
and you'll be forced to come up with a

408
00:14:36,560 --> 00:14:38,720
good alternative that still works but

409
00:14:38,720 --> 00:14:40,800
doesn't deviate too far

410
00:14:40,800 --> 00:14:42,639
especially when we're trying to emulate

411
00:14:42,639 --> 00:14:45,680
c2 infrastructure

412
00:14:45,680 --> 00:14:46,639
so

413
00:14:46,639 --> 00:14:48,399
once we have our dll compiled we can

414
00:14:48,399 --> 00:14:50,959
give it a quick test using run dll and

415
00:14:50,959 --> 00:14:53,839
voila calc opens

416
00:14:53,839 --> 00:14:56,720
and so now on to creating a sim database

417
00:14:56,720 --> 00:14:59,120
the shim database patches an application

418
00:14:59,120 --> 00:15:00,959
by modifying or injecting into memory at

419
00:15:00,959 --> 00:15:02,880
runtime

420
00:15:02,880 --> 00:15:05,600
in our case we'll be injecting a dll at

421
00:15:05,600 --> 00:15:06,800
runtime

422
00:15:06,800 --> 00:15:09,040
first to create the shim we'll have to

423
00:15:09,040 --> 00:15:10,800
install the windows assessment

424
00:15:10,800 --> 00:15:14,880
development kit on our development box

425
00:15:16,800 --> 00:15:18,639
i've got a little video here we'll walk

426
00:15:18,639 --> 00:15:20,800
through

427
00:15:21,519 --> 00:15:23,040
first we'll open up the application that

428
00:15:23,040 --> 00:15:24,560
we just installed and create a new

429
00:15:24,560 --> 00:15:26,880
application fix uh we're gonna give it a

430
00:15:26,880 --> 00:15:28,720
name and we're gonna select the program

431
00:15:28,720 --> 00:15:31,920
that we wish to shim

432
00:15:31,920 --> 00:15:33,600
in our case it's gonna be the payment

433
00:15:33,600 --> 00:15:35,360
processing app that we wish to shim

434
00:15:35,360 --> 00:15:36,959
we'll skip that page

435
00:15:36,959 --> 00:15:38,560
we'll scroll down here

436
00:15:38,560 --> 00:15:41,519
and we'll find and select inject dll and

437
00:15:41,519 --> 00:15:43,120
that's going to be the compatibility fix

438
00:15:43,120 --> 00:15:44,240
we use

439
00:15:44,240 --> 00:15:45,920
up in parameters we're going to give it

440
00:15:45,920 --> 00:15:47,839
the full path

441
00:15:47,839 --> 00:15:50,480
that our dll2 inject will be located in

442
00:15:50,480 --> 00:15:52,560
our case c temp

443
00:15:52,560 --> 00:15:54,160
i'm going to hit next here we're going

444
00:15:54,160 --> 00:15:56,880
to uncheck all on this page and then

445
00:15:56,880 --> 00:15:58,560
select finish

446
00:15:58,560 --> 00:16:02,000
so our image save our shim is created so

447
00:16:02,000 --> 00:16:03,839
here we're going to save it

448
00:16:03,839 --> 00:16:06,639
we'll just name it uh same thing that it

449
00:16:06,639 --> 00:16:09,120
was in the fin7 report

450
00:16:09,120 --> 00:16:12,800
we'll save this over to ctemp

451
00:16:12,800 --> 00:16:13,600
okay

452
00:16:13,600 --> 00:16:16,240
next i'm going to install the shim the

453
00:16:16,240 --> 00:16:20,920
same way they did in the report

454
00:16:25,279 --> 00:16:26,720
and we're greeted with installation

455
00:16:26,720 --> 00:16:27,759
complete

456
00:16:27,759 --> 00:16:30,320
uh so now when i execute that payment

457
00:16:30,320 --> 00:16:32,399
processing app that we shimmed you can

458
00:16:32,399 --> 00:16:35,040
see that the application runs but also

459
00:16:35,040 --> 00:16:37,759
calc.exe also runs

460
00:16:37,759 --> 00:16:40,240
which would imply that that full chain

461
00:16:40,240 --> 00:16:42,720
of execution is working ultimately

462
00:16:42,720 --> 00:16:45,199
executing our binary

463
00:16:45,199 --> 00:16:48,000
in uh stored in the registry

464
00:16:48,000 --> 00:16:49,680
okay so this is great now fully labbed

465
00:16:49,680 --> 00:16:52,079
out however this is not how fin7

466
00:16:52,079 --> 00:16:54,480
executed their attack chain uh our

467
00:16:54,480 --> 00:16:56,800
report says that they did all this uh

468
00:16:56,800 --> 00:16:58,399
instantiated from a single powershell

469
00:16:58,399 --> 00:17:00,639
script so now we've created and tested

470
00:17:00,639 --> 00:17:02,800
each individual part let's throw it all

471
00:17:02,800 --> 00:17:05,119
together and script this out into a more

472
00:17:05,119 --> 00:17:08,559
portable script format

473
00:17:11,839 --> 00:17:14,240
all right so first we had three binaries

474
00:17:14,240 --> 00:17:16,720
we have our shim database

475
00:17:16,720 --> 00:17:19,280
we have our dll and we have the binary

476
00:17:19,280 --> 00:17:21,919
that extracts and executes the registry

477
00:17:21,919 --> 00:17:22,799
string

478
00:17:22,799 --> 00:17:25,679
uh we can read these binaries uh we raw

479
00:17:25,679 --> 00:17:28,640
bytes then base64 encode them into an

480
00:17:28,640 --> 00:17:30,720
array for later use

481
00:17:30,720 --> 00:17:34,000
uh with the powershell code at the top

482
00:17:34,000 --> 00:17:36,080
uh and then with the powershell code at

483
00:17:36,080 --> 00:17:38,880
the bottom we can decode stream that

484
00:17:38,880 --> 00:17:41,760
byte array back into binary on disk

485
00:17:41,760 --> 00:17:43,360
uh

486
00:17:43,360 --> 00:17:46,480
our report doesn't say how fin 7

487
00:17:46,480 --> 00:17:48,400
lifted and shipped these binaries to

488
00:17:48,400 --> 00:17:50,480
their targets there's many different

489
00:17:50,480 --> 00:17:52,480
ways that you could do this and so this

490
00:17:52,480 --> 00:17:56,320
is just one way that i chose how to do

491
00:17:56,320 --> 00:17:58,160
so once we run through our three

492
00:17:58,160 --> 00:18:01,039
binaries and convert those into a string

493
00:18:01,039 --> 00:18:05,360
that we can move around in our script um

494
00:18:05,360 --> 00:18:06,799
we can then

495
00:18:06,799 --> 00:18:08,400
build up the rest of our script which is

496
00:18:08,400 --> 00:18:10,320
what it looks like here and this will

497
00:18:10,320 --> 00:18:12,559
just go through and

498
00:18:12,559 --> 00:18:14,960
you know decode and stream those bytes

499
00:18:14,960 --> 00:18:18,000
to disk uh one at a time put the

500
00:18:18,000 --> 00:18:20,960
registry key value string into the

501
00:18:20,960 --> 00:18:23,600
recognized registry key and then

502
00:18:23,600 --> 00:18:26,799
um install the shim database once

503
00:18:26,799 --> 00:18:29,840
everything is completed

504
00:18:30,000 --> 00:18:30,960
and

505
00:18:30,960 --> 00:18:33,360
we copy this whole script over

506
00:18:33,360 --> 00:18:34,960
um

507
00:18:34,960 --> 00:18:36,880
executed in powershell and we agree with

508
00:18:36,880 --> 00:18:39,520
centered out the shim database has been

509
00:18:39,520 --> 00:18:41,200
successfully installed

510
00:18:41,200 --> 00:18:42,799
if we go back to our payment processing

511
00:18:42,799 --> 00:18:44,400
app um

512
00:18:44,400 --> 00:18:45,760
you can see that

513
00:18:45,760 --> 00:18:46,960
once again

514
00:18:46,960 --> 00:18:49,360
app runs as well as our payload that's

515
00:18:49,360 --> 00:18:52,080
stored in registry key so emulation

516
00:18:52,080 --> 00:18:54,240
portion has been fully lapped out

517
00:18:54,240 --> 00:18:56,000
so now we can go and we can take that

518
00:18:56,000 --> 00:18:58,240
powershell strip running production

519
00:18:58,240 --> 00:19:00,000
uh in various different environments and

520
00:19:00,000 --> 00:19:02,080
see how our protections and our

521
00:19:02,080 --> 00:19:05,120
detections stand up

522
00:19:05,120 --> 00:19:06,080
so

523
00:19:06,080 --> 00:19:07,039
uh

524
00:19:07,039 --> 00:19:08,799
monday left me with a lot of good things

525
00:19:08,799 --> 00:19:11,600
to hunt for uh tuesday and wednesday

526
00:19:11,600 --> 00:19:14,000
probably a good part of thursday

527
00:19:14,000 --> 00:19:16,799
actually emulated that activity uh or at

528
00:19:16,799 --> 00:19:18,080
least part of the activity that i'll be

529
00:19:18,080 --> 00:19:20,400
hunting for and so now

530
00:19:20,400 --> 00:19:22,640
it's time for us to go looking for that

531
00:19:22,640 --> 00:19:23,760
activity

532
00:19:23,760 --> 00:19:24,400
so

533
00:19:24,400 --> 00:19:25,919
why wait to hunt

534
00:19:25,919 --> 00:19:28,880
until after we do acting emulation uh

535
00:19:28,880 --> 00:19:31,760
well because now we have a control

536
00:19:31,760 --> 00:19:33,440
and during the actor emulation we've

537
00:19:33,440 --> 00:19:35,360
already tested at least four things

538
00:19:35,360 --> 00:19:37,520
we've tested our protection measures

539
00:19:37,520 --> 00:19:39,520
our detection measures analyst

540
00:19:39,520 --> 00:19:41,520
capabilities to properly triage and

541
00:19:41,520 --> 00:19:44,000
respond to those detections

542
00:19:44,000 --> 00:19:46,000
and probably tested our socks playbooks

543
00:19:46,000 --> 00:19:48,559
for relevancy

544
00:19:48,559 --> 00:19:50,240
so while we hunt we're going to think

545
00:19:50,240 --> 00:19:52,480
back to the intel that we gathered in

546
00:19:52,480 --> 00:19:54,880
our notes that we took on monday

547
00:19:54,880 --> 00:19:56,720
and what we should be looking for and

548
00:19:56,720 --> 00:19:59,280
for our example um we could look for

549
00:19:59,280 --> 00:20:01,120
things like do we expect the use of shim

550
00:20:01,120 --> 00:20:03,600
databases in our environment and do we

551
00:20:03,600 --> 00:20:06,159
see the relevant sim databases in the

552
00:20:06,159 --> 00:20:09,039
relevant paths in our environment uh do

553
00:20:09,039 --> 00:20:11,440
we see command execution for that

554
00:20:11,440 --> 00:20:16,559
microsoft binary the sb sdb inst dot exe

555
00:20:16,559 --> 00:20:18,640
are the religion relevant registry keys

556
00:20:18,640 --> 00:20:20,880
set and if so what are they set to

557
00:20:20,880 --> 00:20:23,039
what's the normal value for these keys

558
00:20:23,039 --> 00:20:24,640
that we would expect them to be if we

559
00:20:24,640 --> 00:20:26,559
see those

560
00:20:26,559 --> 00:20:28,880
do we or have we ever seen any other

561
00:20:28,880 --> 00:20:30,720
relevant files created that were

562
00:20:30,720 --> 00:20:32,480
mentioned in the report

563
00:20:32,480 --> 00:20:34,480
of course other items that we've noted

564
00:20:34,480 --> 00:20:37,200
down on monday from other reports um

565
00:20:37,200 --> 00:20:38,720
that we did that i didn't include in

566
00:20:38,720 --> 00:20:40,720
this talks example

567
00:20:40,720 --> 00:20:42,640
uh so

568
00:20:42,640 --> 00:20:45,440
how to query for this activity is going

569
00:20:45,440 --> 00:20:47,919
to depend a lot on your environment your

570
00:20:47,919 --> 00:20:50,880
sim and your logging capabilities

571
00:20:50,880 --> 00:20:52,400
i'm not going to go into

572
00:20:52,400 --> 00:20:54,480
any details on how to query your

573
00:20:54,480 --> 00:20:55,760
environment

574
00:20:55,760 --> 00:20:59,200
or how to how to threat hunt

575
00:20:59,200 --> 00:21:00,640
aaron and i already made that talk a

576
00:21:00,640 --> 00:21:03,039
couple of years ago and so here is the

577
00:21:03,039 --> 00:21:04,400
link um

578
00:21:04,400 --> 00:21:06,320
i know you can't see the

579
00:21:06,320 --> 00:21:08,240
far right side of that link but it will

580
00:21:08,240 --> 00:21:10,480
be available on github in the slide deck

581
00:21:10,480 --> 00:21:12,720
and in the recordings

582
00:21:12,720 --> 00:21:13,600
but

583
00:21:13,600 --> 00:21:16,559
so instead of focusing on my time on how

584
00:21:16,559 --> 00:21:19,039
to threat hunt um

585
00:21:19,039 --> 00:21:20,400
i just kind of want to say like if

586
00:21:20,400 --> 00:21:21,600
you're if you're thinking about

587
00:21:21,600 --> 00:21:23,679
implementing a program like this you

588
00:21:23,679 --> 00:21:25,280
probably already know how to query your

589
00:21:25,280 --> 00:21:28,080
logs uh and so instead of going to focus

590
00:21:28,080 --> 00:21:30,159
on what you should be doing while you're

591
00:21:30,159 --> 00:21:32,320
looking through your logs for this type

592
00:21:32,320 --> 00:21:34,720
of activity that we just emulated as

593
00:21:34,720 --> 00:21:38,400
well as what we read in our reports

594
00:21:38,400 --> 00:21:40,159
um first

595
00:21:40,159 --> 00:21:41,760
before you do any of this you should at

596
00:21:41,760 --> 00:21:43,679
least think that you've collect the logs

597
00:21:43,679 --> 00:21:45,919
in the environment we just performed

598
00:21:45,919 --> 00:21:48,720
that activity so we have a control so go

599
00:21:48,720 --> 00:21:50,880
look for the logs of the activity that

600
00:21:50,880 --> 00:21:53,840
you generated not necessarily

601
00:21:53,840 --> 00:21:55,520
the stuff that you saw on the report but

602
00:21:55,520 --> 00:21:58,240
verify okay yes the stuff i actually

603
00:21:58,240 --> 00:22:00,799
executed in our environment was logged i

604
00:22:00,799 --> 00:22:03,120
don't see those i know i have a problem

605
00:22:03,120 --> 00:22:05,760
somewhere else if i do see those i can

606
00:22:05,760 --> 00:22:07,039
be

607
00:22:07,039 --> 00:22:09,440
more comforted by the fact that my

608
00:22:09,440 --> 00:22:10,880
threat hunting

609
00:22:10,880 --> 00:22:14,480
queries turned up nothing

610
00:22:14,480 --> 00:22:16,559
also are the develop are the devices in

611
00:22:16,559 --> 00:22:19,039
the environment um

612
00:22:19,039 --> 00:22:21,120
are there any devices in our environment

613
00:22:21,120 --> 00:22:23,679
that are missing from logs uh it's very

614
00:22:23,679 --> 00:22:27,039
possible that i have a couple of you

615
00:22:27,039 --> 00:22:29,919
know posses that are being logged and

616
00:22:29,919 --> 00:22:32,559
then a couple that are either broken or

617
00:22:32,559 --> 00:22:34,640
for some reason logs are not shipping to

618
00:22:34,640 --> 00:22:37,360
our central environment so

619
00:22:37,360 --> 00:22:39,200
i need to make sure that i am

620
00:22:39,200 --> 00:22:42,400
reproducing this emulation on a large

621
00:22:42,400 --> 00:22:45,440
portion or a large sample

622
00:22:45,440 --> 00:22:47,280
of our environment as much as i can get

623
00:22:47,280 --> 00:22:49,679
away with uh to kind of validate the

624
00:22:49,679 --> 00:22:52,159
effectiveness of the equipment that we

625
00:22:52,159 --> 00:22:55,679
put in and to make sure that i can rely

626
00:22:55,679 --> 00:22:59,760
on the absence of information that i see

627
00:22:59,760 --> 00:23:01,840
also remember non-malicious activity are

628
00:23:01,840 --> 00:23:03,840
still findings very common to spend

629
00:23:03,840 --> 00:23:06,640
hours and hours of hunting that results

630
00:23:06,640 --> 00:23:09,039
in zero malicious activity identified

631
00:23:09,039 --> 00:23:11,039
but it wasn't a waste of time

632
00:23:11,039 --> 00:23:13,039
in fact most of the time your hunting

633
00:23:13,039 --> 00:23:15,360
activities are going to end up like this

634
00:23:15,360 --> 00:23:17,520
and if they don't i feel really bad for

635
00:23:17,520 --> 00:23:19,679
your ir team

636
00:23:19,679 --> 00:23:21,520
while hunting

637
00:23:21,520 --> 00:23:23,200
also ask yourself should this type of

638
00:23:23,200 --> 00:23:25,679
activity be allowed to execute under any

639
00:23:25,679 --> 00:23:28,400
circumstances so in our example that we

640
00:23:28,400 --> 00:23:30,159
covered should we allow application

641
00:23:30,159 --> 00:23:32,480
shimming in the first place or anywhere

642
00:23:32,480 --> 00:23:34,960
in our environment

643
00:23:34,960 --> 00:23:37,760
often hunts will result in a uh in

644
00:23:37,760 --> 00:23:39,840
assessments for the architecture teams

645
00:23:39,840 --> 00:23:42,240
to review how things have been deployed

646
00:23:42,240 --> 00:23:44,880
or projects that clearly got rolled to

647
00:23:44,880 --> 00:23:46,880
production but did not consult sanity

648
00:23:46,880 --> 00:23:50,080
during the design phase

649
00:23:50,080 --> 00:23:52,720
uh and lastly i think most critically

650
00:23:52,720 --> 00:23:55,279
don't hunt this activity twice in

651
00:23:55,279 --> 00:23:57,520
reality you probably will come back to a

652
00:23:57,520 --> 00:23:59,840
lot of things more than once uh or at

653
00:23:59,840 --> 00:24:02,240
least very similar activity

654
00:24:02,240 --> 00:24:05,039
as you probably cannot ensure that you

655
00:24:05,039 --> 00:24:07,600
can prevent everything from executing in

656
00:24:07,600 --> 00:24:09,760
all places forever

657
00:24:09,760 --> 00:24:12,720
100 certainty um but regardless of the

658
00:24:12,720 --> 00:24:14,320
protections in place that i encounter

659
00:24:14,320 --> 00:24:16,960
during emulation do we currently detect

660
00:24:16,960 --> 00:24:18,559
for this activity

661
00:24:18,559 --> 00:24:20,000
i'm a strong believer that you should

662
00:24:20,000 --> 00:24:22,480
still detect for activity that you have

663
00:24:22,480 --> 00:24:24,880
prevention mechanisms in place for

664
00:24:24,880 --> 00:24:27,039
yes it stops that but i want to know

665
00:24:27,039 --> 00:24:29,520
that someone is attempting to do these

666
00:24:29,520 --> 00:24:31,039
types of things

667
00:24:31,039 --> 00:24:32,880
and so that i can actually stop them

668
00:24:32,880 --> 00:24:36,000
before they're maybe successful

669
00:24:36,000 --> 00:24:38,240
and so also if it was worth your time to

670
00:24:38,240 --> 00:24:40,320
emulate and hunt on

671
00:24:40,320 --> 00:24:41,760
you should probably figure out how you

672
00:24:41,760 --> 00:24:43,840
convert that to continuous coverage

673
00:24:43,840 --> 00:24:45,440
going forward

674
00:24:45,440 --> 00:24:47,039
if i'm hunting it i'm writing a

675
00:24:47,039 --> 00:24:49,039
detection rule if it doesn't already

676
00:24:49,039 --> 00:24:50,720
exist

677
00:24:50,720 --> 00:24:52,400
and while hunting for activity keep in

678
00:24:52,400 --> 00:24:54,240
mind the structure of my logs the

679
00:24:54,240 --> 00:24:56,400
sequence of how that activity happened

680
00:24:56,400 --> 00:24:57,679
and occurred

681
00:24:57,679 --> 00:25:00,559
in those reports as well as emulation

682
00:25:00,559 --> 00:25:02,640
what would be the most reliable way that

683
00:25:02,640 --> 00:25:04,960
i could perform these detections because

684
00:25:04,960 --> 00:25:07,440
remember this is a one-man program and

685
00:25:07,440 --> 00:25:09,039
so you're going to be opening up tickets

686
00:25:09,039 --> 00:25:11,279
on how the detections can be created or

687
00:25:11,279 --> 00:25:12,640
improved

688
00:25:12,640 --> 00:25:14,880
and it's probably gonna be you that has

689
00:25:14,880 --> 00:25:17,760
to write those rules so take your notes

690
00:25:17,760 --> 00:25:19,679
here

691
00:25:19,679 --> 00:25:21,520
um

692
00:25:21,520 --> 00:25:24,720
okay so uh lastly i just spent a whole

693
00:25:24,720 --> 00:25:27,440
lot of time uh doing research doing

694
00:25:27,440 --> 00:25:28,400
emulation

695
00:25:28,400 --> 00:25:29,840
and hunting

696
00:25:29,840 --> 00:25:32,240
and so what value did i provide

697
00:25:32,240 --> 00:25:34,720
during this week as a week of activity

698
00:25:34,720 --> 00:25:36,720
and now how do i write all this up in

699
00:25:36,720 --> 00:25:39,200
the reports that management loves

700
00:25:39,200 --> 00:25:40,000
so

701
00:25:40,000 --> 00:25:41,840
the value that we've done is we've

702
00:25:41,840 --> 00:25:43,679
updated a list of threat actors that

703
00:25:43,679 --> 00:25:44,400
would

704
00:25:44,400 --> 00:25:46,799
hypothetically be interested in us uh we

705
00:25:46,799 --> 00:25:48,720
learned more about what their recent

706
00:25:48,720 --> 00:25:50,559
activity has been which of them are

707
00:25:50,559 --> 00:25:53,120
active and which of them are dormant

708
00:25:53,120 --> 00:25:55,200
uh we learned what their latest motives

709
00:25:55,200 --> 00:25:57,919
and their latest ttps are and if they've

710
00:25:57,919 --> 00:25:59,520
remained the same or if those have

711
00:25:59,520 --> 00:26:00,480
changed

712
00:26:00,480 --> 00:26:02,000
we've increased our knowledge of where

713
00:26:02,000 --> 00:26:04,240
our tax surface intersects the threat

714
00:26:04,240 --> 00:26:06,559
actors capabilities we've tested at

715
00:26:06,559 --> 00:26:08,720
least some real world procedures in our

716
00:26:08,720 --> 00:26:10,720
own environment we were able to see how

717
00:26:10,720 --> 00:26:13,039
our protection capability against said

718
00:26:13,039 --> 00:26:15,440
procedure stands up we're able to see

719
00:26:15,440 --> 00:26:17,600
how well our detection capability for

720
00:26:17,600 --> 00:26:20,159
said procedures is we are able to test

721
00:26:20,159 --> 00:26:22,400
our log collection capability and

722
00:26:22,400 --> 00:26:25,200
validate that it is working as expected

723
00:26:25,200 --> 00:26:26,880
we were able to test our analyst

724
00:26:26,880 --> 00:26:29,679
response capability maybe identify gaps

725
00:26:29,679 --> 00:26:31,840
for futures training

726
00:26:31,840 --> 00:26:34,080
and it also means that we're inherently

727
00:26:34,080 --> 00:26:36,000
able to test and validate our existing

728
00:26:36,000 --> 00:26:37,440
playbooks

729
00:26:37,440 --> 00:26:38,720
and see if they stood up to the

730
00:26:38,720 --> 00:26:40,960
challenge of emulation

731
00:26:40,960 --> 00:26:42,799
um we were able to look for additional

732
00:26:42,799 --> 00:26:46,000
tpps other than what we emulated

733
00:26:46,000 --> 00:26:47,120
um

734
00:26:47,120 --> 00:26:49,039
almost certainly gained some new insight

735
00:26:49,039 --> 00:26:51,120
into our own environment that we didn't

736
00:26:51,120 --> 00:26:52,400
already know

737
00:26:52,400 --> 00:26:54,480
probably uncovered shadow i.t poor

738
00:26:54,480 --> 00:26:57,279
engineering opened up a few jiras for

739
00:26:57,279 --> 00:26:59,840
grc or architecture to go over

740
00:26:59,840 --> 00:27:02,080
we probably opened a number of jiras for

741
00:27:02,080 --> 00:27:04,400
our own team or my future self to go

742
00:27:04,400 --> 00:27:05,520
over

743
00:27:05,520 --> 00:27:07,840
probably identified gaps in visibility

744
00:27:07,840 --> 00:27:09,840
or protection mechanisms that we either

745
00:27:09,840 --> 00:27:11,760
thought were in place or didn't know

746
00:27:11,760 --> 00:27:13,279
were gaps

747
00:27:13,279 --> 00:27:15,200
and that can be fixed or resolved with

748
00:27:15,200 --> 00:27:17,279
future project time or purchases as

749
00:27:17,279 --> 00:27:19,520
necessary we're able to provide

750
00:27:19,520 --> 00:27:21,840
management with validation of our

751
00:27:21,840 --> 00:27:24,960
various tools procedure implementations

752
00:27:24,960 --> 00:27:27,679
uh and time spent in the past uh to

753
00:27:27,679 --> 00:27:28,960
ensure

754
00:27:28,960 --> 00:27:31,440
that all that was not for waste

755
00:27:31,440 --> 00:27:33,520
also we've given them data that they can

756
00:27:33,520 --> 00:27:35,840
use to plan for future project time in

757
00:27:35,840 --> 00:27:38,559
expenditures and staffing etc

758
00:27:38,559 --> 00:27:40,799
and then maybe most importantly we were

759
00:27:40,799 --> 00:27:42,399
able to mix up the daily routine a

760
00:27:42,399 --> 00:27:43,440
little bit

761
00:27:43,440 --> 00:27:45,520
and sharpen our own knowledge and skills

762
00:27:45,520 --> 00:27:47,600
and for me that sounds like a lot of

763
00:27:47,600 --> 00:27:51,279
value for five business days

764
00:27:51,760 --> 00:27:54,399
um okay so i'm going to be available in

765
00:27:54,399 --> 00:27:56,240
discord for any questions that anyone

766
00:27:56,240 --> 00:27:57,360
may have

767
00:27:57,360 --> 00:27:58,799
so

768
00:27:58,799 --> 00:28:02,120
see you there

769
00:28:07,320 --> 00:28:11,290
[Music]

770
00:28:14,680 --> 00:28:19,920
[Music]

771
00:28:20,720 --> 00:28:22,799
you

