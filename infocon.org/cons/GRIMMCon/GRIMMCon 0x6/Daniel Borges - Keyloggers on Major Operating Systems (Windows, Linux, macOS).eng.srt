1
00:00:00,000 --> 00:00:03,129
[Music]

2
00:00:05,620 --> 00:00:09,599
[Music]

3
00:00:12,980 --> 00:00:16,480
[Music]

4
00:00:16,480 --> 00:00:18,880
welcome to key loggers across the

5
00:00:18,880 --> 00:00:20,880
operating systems

6
00:00:20,880 --> 00:00:23,359
i will be your host dan borges

7
00:00:23,359 --> 00:00:25,599
uh professionally i have done both red

8
00:00:25,599 --> 00:00:28,840
teaming and blue teaming in the past

9
00:00:28,840 --> 00:00:31,599
um and you'll see i've used a lot of

10
00:00:31,599 --> 00:00:34,000
these techniques uh both in my offensive

11
00:00:34,000 --> 00:00:35,920
operations and detecting them as a blue

12
00:00:35,920 --> 00:00:37,040
teamer

13
00:00:37,040 --> 00:00:39,360
um some other things i do is i'm also

14
00:00:39,360 --> 00:00:41,920
the cptc director

15
00:00:41,920 --> 00:00:43,440
this is the collegiate penetration

16
00:00:43,440 --> 00:00:45,120
testing competition

17
00:00:45,120 --> 00:00:47,600
in this competition we have a bunch of

18
00:00:47,600 --> 00:00:50,559
student teams from around the world

19
00:00:50,559 --> 00:00:53,520
come into an environment that we've made

20
00:00:53,520 --> 00:00:55,280
that they can then run a pen test on and

21
00:00:55,280 --> 00:00:57,199
find vulnerabilities and write reports

22
00:00:57,199 --> 00:00:58,399
on

23
00:00:58,399 --> 00:01:00,399
and then i'm also a core red team member

24
00:01:00,399 --> 00:01:03,039
for ccdc which is a competition where we

25
00:01:03,039 --> 00:01:05,680
turn that on its head we give students a

26
00:01:05,680 --> 00:01:06,880
secure

27
00:01:06,880 --> 00:01:08,560
computer environment and they have to

28
00:01:08,560 --> 00:01:12,320
defend it against a group of red teamers

29
00:01:12,320 --> 00:01:14,560
earlier this year i also wrote a book

30
00:01:14,560 --> 00:01:16,400
called adversarial tradecraft in cyber

31
00:01:16,400 --> 00:01:18,320
security offense versus defense in real

32
00:01:18,320 --> 00:01:19,840
time

33
00:01:19,840 --> 00:01:21,040
some of the lessons from this

34
00:01:21,040 --> 00:01:22,799
presentation have been drawn from that

35
00:01:22,799 --> 00:01:24,799
book so if you like that if you like

36
00:01:24,799 --> 00:01:27,280
this content and the way i present it

37
00:01:27,280 --> 00:01:29,200
you know please check out that book

38
00:01:29,200 --> 00:01:31,439
you can also find me on twitter at

39
00:01:31,439 --> 00:01:32,880
injection

40
00:01:32,880 --> 00:01:37,158
and my blog is lockbox.blogspot.com

41
00:01:37,439 --> 00:01:40,320
and down here is just a a little primer

42
00:01:40,320 --> 00:01:41,600
on the book if you want to see more

43
00:01:41,600 --> 00:01:43,920
about it

44
00:01:43,920 --> 00:01:46,720
so first what is a keylogger

45
00:01:46,720 --> 00:01:48,799
keyloggers are a very old technique they

46
00:01:48,799 --> 00:01:52,000
were invented in the 1970s

47
00:01:52,000 --> 00:01:55,439
in russia to record terminal users

48
00:01:55,439 --> 00:01:57,840
commands entered into a keyboard but

49
00:01:57,840 --> 00:01:59,520
essentially a keylogger does just that

50
00:01:59,520 --> 00:02:02,000
it records every

51
00:02:02,000 --> 00:02:05,280
key typed into a input device at a

52
00:02:05,280 --> 00:02:07,280
computer

53
00:02:07,280 --> 00:02:10,160
this is most often used for offensive

54
00:02:10,160 --> 00:02:12,560
purposes or spying for gathering

55
00:02:12,560 --> 00:02:14,560
credentials such as we can see in this

56
00:02:14,560 --> 00:02:16,319
example from nullbyte

57
00:02:16,319 --> 00:02:17,920
at the bottom of the screen

58
00:02:17,920 --> 00:02:19,680
this is the keylogger built into

59
00:02:19,680 --> 00:02:21,360
meterpreter a very

60
00:02:21,360 --> 00:02:23,120
common offensive

61
00:02:23,120 --> 00:02:24,640
uh platform

62
00:02:24,640 --> 00:02:27,200
but there are also like legitimate key

63
00:02:27,200 --> 00:02:29,599
loggers for example like

64
00:02:29,599 --> 00:02:32,560
uh kid loggers or the kind of nanny cam

65
00:02:32,560 --> 00:02:34,840
things to record what

66
00:02:34,840 --> 00:02:38,640
uh relatives or loved ones may enter

67
00:02:38,640 --> 00:02:40,480
into a computer

68
00:02:40,480 --> 00:02:42,000
i'm not condoning these these are all

69
00:02:42,000 --> 00:02:44,720
very taboo

70
00:02:45,360 --> 00:02:47,440
key loggers are used

71
00:02:47,440 --> 00:02:50,400
extensively in malware this is the

72
00:02:50,400 --> 00:02:54,319
miter attack page on keylogging uh t1056

73
00:02:54,319 --> 00:02:56,000
input capture and it's actually a sub

74
00:02:56,000 --> 00:02:58,159
technique o1

75
00:02:58,159 --> 00:03:01,280
and we can see over 162 different

76
00:03:01,280 --> 00:03:05,040
references to keylogging on this page

77
00:03:05,040 --> 00:03:07,040
these are all different kinds of malware

78
00:03:07,040 --> 00:03:08,959
across different thread actor groups

79
00:03:08,959 --> 00:03:10,480
they could be

80
00:03:10,480 --> 00:03:12,720
geographically different locations they

81
00:03:12,720 --> 00:03:14,319
could have different targets different

82
00:03:14,319 --> 00:03:16,239
verticals

83
00:03:16,239 --> 00:03:19,040
across many different years we see here

84
00:03:19,040 --> 00:03:22,000
and also many different implementations

85
00:03:22,000 --> 00:03:23,360
and then it's also included in many

86
00:03:23,360 --> 00:03:25,120
popular frameworks

87
00:03:25,120 --> 00:03:26,080
uh

88
00:03:26,080 --> 00:03:27,599
so we can tell key logging is an

89
00:03:27,599 --> 00:03:30,640
extremely popular technique it's used in

90
00:03:30,640 --> 00:03:33,280
all kinds of offensive frameworks

91
00:03:33,280 --> 00:03:34,799
malware

92
00:03:34,799 --> 00:03:38,159
even red team techniques

93
00:03:38,159 --> 00:03:41,360
and the reason it's so powerful is it

94
00:03:41,360 --> 00:03:43,760
gives an unprecedented view

95
00:03:43,760 --> 00:03:47,440
into the human side of using a computer

96
00:03:47,440 --> 00:03:48,400
system

97
00:03:48,400 --> 00:03:50,799
it's the kind of stuff you can't easily

98
00:03:50,799 --> 00:03:52,640
get from collecting technical

99
00:03:52,640 --> 00:03:55,280
information from a computer system

100
00:03:55,280 --> 00:03:57,920
a great story

101
00:03:57,920 --> 00:03:59,599
i was using keyloggers once in an

102
00:03:59,599 --> 00:04:01,120
offensive operation

103
00:04:01,120 --> 00:04:04,000
we had just compromised a new user and

104
00:04:04,000 --> 00:04:06,080
pivoted to their machine and we dropped

105
00:04:06,080 --> 00:04:08,000
our keylogger because we wanted to know

106
00:04:08,000 --> 00:04:09,599
specifically what this user was

107
00:04:09,599 --> 00:04:12,319
accessing and how they accessed it

108
00:04:12,319 --> 00:04:14,400
but in deploying this keylogger we saw

109
00:04:14,400 --> 00:04:16,238
them opening up their corporate chat

110
00:04:16,238 --> 00:04:18,238
solution and start to type to the

111
00:04:18,238 --> 00:04:19,600
security team that they thought they'd

112
00:04:19,600 --> 00:04:21,279
been compromised

113
00:04:21,279 --> 00:04:22,479
and they actually asked for somebody to

114
00:04:22,479 --> 00:04:24,160
come up to their desk

115
00:04:24,160 --> 00:04:26,639
um and investigate you know the

116
00:04:26,639 --> 00:04:27,840
potential compromise right then and

117
00:04:27,840 --> 00:04:29,759
there this is information that we

118
00:04:29,759 --> 00:04:31,759
wouldn't have gotten if we weren't key

119
00:04:31,759 --> 00:04:34,080
logging what they were actually typing

120
00:04:34,080 --> 00:04:36,479
to the security team so because of that

121
00:04:36,479 --> 00:04:39,120
we were able to remove our implants and

122
00:04:39,120 --> 00:04:41,040
back everything out so that way when the

123
00:04:41,040 --> 00:04:43,040
security team did come and triage the

124
00:04:43,040 --> 00:04:44,479
machine

125
00:04:44,479 --> 00:04:46,400
they didn't detect us

126
00:04:46,400 --> 00:04:48,240
so that type of operational intelligence

127
00:04:48,240 --> 00:04:50,160
is huge and you won't get that from

128
00:04:50,160 --> 00:04:51,919
traditional tools that just collect

129
00:04:51,919 --> 00:04:55,280
artifacts on a computer system

130
00:04:55,280 --> 00:04:57,199
what we're essentially targeting here is

131
00:04:57,199 --> 00:04:59,120
the principle of humanity

132
00:04:59,120 --> 00:05:00,800
uh

133
00:05:00,800 --> 00:05:02,240
essentially the principal humanity

134
00:05:02,240 --> 00:05:03,680
states that computer systems are

135
00:05:03,680 --> 00:05:06,320
designed for human use and for operators

136
00:05:06,320 --> 00:05:09,600
to access data and data systems

137
00:05:09,600 --> 00:05:12,000
as a threat actor we can abuse that by

138
00:05:12,000 --> 00:05:14,160
targeting those users figuring out how

139
00:05:14,160 --> 00:05:16,080
they use these systems how they normally

140
00:05:16,080 --> 00:05:17,919
access them and

141
00:05:17,919 --> 00:05:19,840
you know piggybacking on that access or

142
00:05:19,840 --> 00:05:23,280
abusing and gaining that access

143
00:05:23,360 --> 00:05:25,680
uh this is one of several principles

144
00:05:25,680 --> 00:05:28,080
that i outline in my book which i think

145
00:05:28,080 --> 00:05:29,199
are

146
00:05:29,199 --> 00:05:33,199
core guiding philosophies of red teaming

147
00:05:33,199 --> 00:05:36,080
such as hunting privileged users

148
00:05:36,080 --> 00:05:39,039
physical access is another one

149
00:05:39,039 --> 00:05:41,280
um

150
00:05:41,360 --> 00:05:42,880
the principle of economy the idea that

151
00:05:42,880 --> 00:05:44,960
you can only implement so many things on

152
00:05:44,960 --> 00:05:46,720
any given side

153
00:05:46,720 --> 00:05:49,840
but the principle of humanity is the key

154
00:05:49,840 --> 00:05:51,840
thing i believe we are abusing when we

155
00:05:51,840 --> 00:05:55,280
use key loggers and we start to

156
00:05:55,280 --> 00:05:56,560
collect all this operational

157
00:05:56,560 --> 00:05:58,639
intelligence on the user of the machine

158
00:05:58,639 --> 00:06:01,360
that we are targeting

159
00:06:01,440 --> 00:06:02,800
so we're going to start to look at some

160
00:06:02,800 --> 00:06:04,240
examples here we're going to start with

161
00:06:04,240 --> 00:06:05,600
windows

162
00:06:05,600 --> 00:06:06,880
because i think this is probably the

163
00:06:06,880 --> 00:06:08,960
most ubiquitous operating system and

164
00:06:08,960 --> 00:06:10,960
it's there's many ways to implement key

165
00:06:10,960 --> 00:06:14,080
logging on this uh operating system

166
00:06:14,080 --> 00:06:15,520
so to start you can do different kinds

167
00:06:15,520 --> 00:06:17,600
of hooking you can actually hook the

168
00:06:17,600 --> 00:06:19,759
functions themselves

169
00:06:19,759 --> 00:06:22,240
such as

170
00:06:22,240 --> 00:06:23,680
the keyboard input functions or you can

171
00:06:23,680 --> 00:06:26,080
hook the keyboard and then you can use

172
00:06:26,080 --> 00:06:28,960
api driven functions like get key state

173
00:06:28,960 --> 00:06:31,120
to say every time a key is pressed

174
00:06:31,120 --> 00:06:34,000
get the key state for that specific key

175
00:06:34,000 --> 00:06:36,160
the most popular technique on windows is

176
00:06:36,160 --> 00:06:38,720
get async key state which

177
00:06:38,720 --> 00:06:40,400
is kind of used in a polling manner

178
00:06:40,400 --> 00:06:42,240
where you'll loop through a variety of

179
00:06:42,240 --> 00:06:44,800
different keys and then

180
00:06:44,800 --> 00:06:46,720
get async key state just returns the

181
00:06:46,720 --> 00:06:48,400
state of that key whether it's pressed

182
00:06:48,400 --> 00:06:51,758
up or down or held

183
00:06:52,560 --> 00:06:56,319
and this we'll see is implemented

184
00:06:56,319 --> 00:06:57,599
very widely

185
00:06:57,599 --> 00:06:59,120
and then there's also other techniques

186
00:06:59,120 --> 00:07:02,160
such as abusing etw there's a new etw

187
00:07:02,160 --> 00:07:03,599
technique that allows you to collect key

188
00:07:03,599 --> 00:07:05,759
logs and this is already implemented in

189
00:07:05,759 --> 00:07:09,039
some frameworks like empire

190
00:07:09,520 --> 00:07:12,160
so here's an example of the git async

191
00:07:12,160 --> 00:07:14,400
key state implementation this is a

192
00:07:14,400 --> 00:07:16,160
powershell example that comes from this

193
00:07:16,160 --> 00:07:19,840
andrea fortuna uh blog

194
00:07:19,840 --> 00:07:22,160
and first we can see that it's looping

195
00:07:22,160 --> 00:07:24,080
and it sleeps for a certain amount of

196
00:07:24,080 --> 00:07:26,160
time in between each loop the next thing

197
00:07:26,160 --> 00:07:28,560
it does is it goes through

198
00:07:28,560 --> 00:07:30,479
all of these ascii key codes and then it

199
00:07:30,479 --> 00:07:33,360
actually calls git async key state with

200
00:07:33,360 --> 00:07:35,360
these ascii keystone uh key codes so

201
00:07:35,360 --> 00:07:36,720
it's trying to get the different state

202
00:07:36,720 --> 00:07:38,960
of every key

203
00:07:38,960 --> 00:07:41,120
uh one very common thing you'll see on a

204
00:07:41,120 --> 00:07:42,960
lot of these key loggers is they have

205
00:07:42,960 --> 00:07:46,160
these virtual key state maps and then

206
00:07:46,160 --> 00:07:47,759
they will uh

207
00:07:47,759 --> 00:07:49,759
do lookups and this essentially

208
00:07:49,759 --> 00:07:51,680
translate this ascii key code into the

209
00:07:51,680 --> 00:07:54,879
human readable key you know is it

210
00:07:54,879 --> 00:07:57,039
uh asdfg

211
00:07:57,039 --> 00:07:59,199
or is it a shift or is it a special

212
00:07:59,199 --> 00:08:01,199
character or symbol or a number

213
00:08:01,199 --> 00:08:03,120
um that's what those

214
00:08:03,120 --> 00:08:04,960
uh

215
00:08:04,960 --> 00:08:07,120
virtual key translations are there for

216
00:08:07,120 --> 00:08:08,639
and you'll see this pretty much in every

217
00:08:08,639 --> 00:08:10,080
key logger it's sometimes just like a

218
00:08:10,080 --> 00:08:12,319
large list of virtual keys and that's

219
00:08:12,319 --> 00:08:14,000
usually what takes up the majority of

220
00:08:14,000 --> 00:08:16,000
the space in virtual or in any kind of

221
00:08:16,000 --> 00:08:18,000
keylogger

222
00:08:18,000 --> 00:08:20,800
as the actual key logging is

223
00:08:20,800 --> 00:08:22,560
typically very simple

224
00:08:22,560 --> 00:08:24,560
such as a single api call and then a

225
00:08:24,560 --> 00:08:25,360
loop

226
00:08:25,360 --> 00:08:27,039
and then finally

227
00:08:27,039 --> 00:08:28,639
most key loggers will write their keys

228
00:08:28,639 --> 00:08:30,240
to a file or they could store them in a

229
00:08:30,240 --> 00:08:31,919
memory buffer and send them off of the

230
00:08:31,919 --> 00:08:34,240
system

231
00:08:35,360 --> 00:08:37,279
so when we think about the text

232
00:08:37,279 --> 00:08:38,479
there's a lot of different ways we can

233
00:08:38,479 --> 00:08:40,640
approach this this is called the pyramid

234
00:08:40,640 --> 00:08:42,159
of pain some people may or may not have

235
00:08:42,159 --> 00:08:45,360
heard it but the idea is that um

236
00:08:45,360 --> 00:08:47,839
targeting different parts of the

237
00:08:47,839 --> 00:08:50,640
operations to write architects will have

238
00:08:50,640 --> 00:08:53,200
a different return on value and impact

239
00:08:53,200 --> 00:08:54,480
on the attacker

240
00:08:54,480 --> 00:08:56,800
for example we could just target hash

241
00:08:56,800 --> 00:08:58,560
values of specific tools but that would

242
00:08:58,560 --> 00:09:00,800
be very easy to dodge say if they

243
00:09:00,800 --> 00:09:02,800
recompiled the tool

244
00:09:02,800 --> 00:09:05,360
um alex levinson and i released a tool

245
00:09:05,360 --> 00:09:09,279
at defcon i think it was like def con 26

246
00:09:09,279 --> 00:09:10,320
or something

247
00:09:10,320 --> 00:09:12,399
but we released a tool called gscript

248
00:09:12,399 --> 00:09:14,800
which did just that it allowed you to

249
00:09:14,800 --> 00:09:16,640
very quickly recompile and it would

250
00:09:16,640 --> 00:09:19,200
re-obfuscate the entire binary um

251
00:09:19,200 --> 00:09:22,320
changing all kinds of values in code and

252
00:09:22,320 --> 00:09:24,000
obviously changing the hash values and

253
00:09:24,000 --> 00:09:26,240
quickly changing the tool

254
00:09:26,240 --> 00:09:28,240
um and that just defeats these very weak

255
00:09:28,240 --> 00:09:30,080
detections where you're just trying to

256
00:09:30,080 --> 00:09:32,080
detect a hash value

257
00:09:32,080 --> 00:09:33,760
you can also have tool based detections

258
00:09:33,760 --> 00:09:34,800
this would be like if somebody was

259
00:09:34,800 --> 00:09:36,240
running that powershell script and they

260
00:09:36,240 --> 00:09:38,640
had specific command line values or

261
00:09:38,640 --> 00:09:40,080
there was a specific

262
00:09:40,080 --> 00:09:43,120
way that a tool did something um

263
00:09:43,120 --> 00:09:44,959
that was more obvious you can write

264
00:09:44,959 --> 00:09:47,120
those to text but again there's so many

265
00:09:47,120 --> 00:09:48,959
different ways to implement key logging

266
00:09:48,959 --> 00:09:50,480
it'd be really easy just to pick up a

267
00:09:50,480 --> 00:09:52,160
different tool or change the

268
00:09:52,160 --> 00:09:53,680
implementation

269
00:09:53,680 --> 00:09:57,040
but still use the same underlying method

270
00:09:57,040 --> 00:09:58,640
so finally what we're going to try to

271
00:09:58,640 --> 00:10:00,560
look at in this presentation

272
00:10:00,560 --> 00:10:03,200
is technique specific detections on the

273
00:10:03,200 --> 00:10:05,360
behavior

274
00:10:05,360 --> 00:10:08,800
these are often called ttps or

275
00:10:08,800 --> 00:10:12,240
tactics techniques and procedures

276
00:10:12,240 --> 00:10:13,279
and

277
00:10:13,279 --> 00:10:15,839
these are the hardest stuff for an actor

278
00:10:15,839 --> 00:10:17,600
to change

279
00:10:17,600 --> 00:10:18,720
because

280
00:10:18,720 --> 00:10:20,240
they have to change the technique that

281
00:10:20,240 --> 00:10:22,240
they're using which often becomes very

282
00:10:22,240 --> 00:10:23,839
difficult

283
00:10:23,839 --> 00:10:25,200
versus just changing the tool or

284
00:10:25,200 --> 00:10:26,720
recompiling the tool

285
00:10:26,720 --> 00:10:28,160
quick note i always thought the pyramid

286
00:10:28,160 --> 00:10:30,240
of pain was backwards if this is the

287
00:10:30,240 --> 00:10:31,760
hardest thing for the attacker to change

288
00:10:31,760 --> 00:10:32,959
i feel like it should be at the bottom

289
00:10:32,959 --> 00:10:34,320
of the pyramid you should have to change

290
00:10:34,320 --> 00:10:36,160
everything above it as well

291
00:10:36,160 --> 00:10:38,880
but that's an aside

292
00:10:38,880 --> 00:10:40,880
so actually looking at some detections

293
00:10:40,880 --> 00:10:42,480
on windows

294
00:10:42,480 --> 00:10:44,240
we can start again with very basic

295
00:10:44,240 --> 00:10:45,839
detections this will apply to all the

296
00:10:45,839 --> 00:10:47,519
operating systems but i'm just going to

297
00:10:47,519 --> 00:10:48,959
mention it here

298
00:10:48,959 --> 00:10:50,880
looking for things like auto execution

299
00:10:50,880 --> 00:10:53,519
start points or persistence locations is

300
00:10:53,519 --> 00:10:55,519
huge because

301
00:10:55,519 --> 00:10:56,959
all of these key loggers are basically

302
00:10:56,959 --> 00:10:58,560
going to start on runtime you're going

303
00:10:58,560 --> 00:11:00,640
to want to run them

304
00:11:00,640 --> 00:11:02,560
as soon as the user starts running the

305
00:11:02,560 --> 00:11:05,200
machine or if it's a c2 or an agent

306
00:11:05,200 --> 00:11:06,320
you're going to want to persist it

307
00:11:06,320 --> 00:11:08,320
somehow typically

308
00:11:08,320 --> 00:11:10,000
uh so those general detections looking

309
00:11:10,000 --> 00:11:11,839
at those locations and then again like

310
00:11:11,839 --> 00:11:13,440
we said egress traffic they're going to

311
00:11:13,440 --> 00:11:15,360
have to get the key logs off the system

312
00:11:15,360 --> 00:11:16,399
somehow

313
00:11:16,399 --> 00:11:17,600
if they're writing to a file they'll

314
00:11:17,600 --> 00:11:19,680
collect it later with a c2

315
00:11:19,680 --> 00:11:21,600
but if um they're doing something a

316
00:11:21,600 --> 00:11:23,519
little more fancy with like storing the

317
00:11:23,519 --> 00:11:24,800
key logs in a memory buffer they're

318
00:11:24,800 --> 00:11:26,000
going to want to ship them off of the

319
00:11:26,000 --> 00:11:28,079
system at some point so that could be

320
00:11:28,079 --> 00:11:30,959
dns udp tcp

321
00:11:30,959 --> 00:11:31,760
uh

322
00:11:31,760 --> 00:11:34,240
common ones are ftp and mail just like

323
00:11:34,240 --> 00:11:35,680
sending them away

324
00:11:35,680 --> 00:11:37,120
so

325
00:11:37,120 --> 00:11:38,640
look for that like strange traffic

326
00:11:38,640 --> 00:11:39,680
leaving the computer which could

327
00:11:39,680 --> 00:11:42,720
potentially be key logs uh

328
00:11:42,720 --> 00:11:44,480
a very common implementation for

329
00:11:44,480 --> 00:11:46,959
detection on windows is these edr

330
00:11:46,959 --> 00:11:49,680
platforms will hook get async key state

331
00:11:49,680 --> 00:11:52,079
and then they will monitor this for what

332
00:11:52,079 --> 00:11:54,959
programs calling it uh how often are

333
00:11:54,959 --> 00:11:56,720
they calling it

334
00:11:56,720 --> 00:11:58,320
and how are they calling it

335
00:11:58,320 --> 00:11:59,279
and

336
00:11:59,279 --> 00:12:01,600
in doing that we've seen many

337
00:12:01,600 --> 00:12:03,839
large edr vendors roll out detections

338
00:12:03,839 --> 00:12:06,560
for this get async key state and the

339
00:12:06,560 --> 00:12:09,518
problem with that is

340
00:12:09,760 --> 00:12:11,279
it can lend itself to a lot of false

341
00:12:11,279 --> 00:12:12,639
positives a lot of legitimate

342
00:12:12,639 --> 00:12:15,279
applications also use these apis

343
00:12:15,279 --> 00:12:18,079
so by increasing your polling window you

344
00:12:18,079 --> 00:12:20,399
can avoid some of these detections

345
00:12:20,399 --> 00:12:23,040
by looking a little bit more legitimate

346
00:12:23,040 --> 00:12:24,959
the problem with that is as you increase

347
00:12:24,959 --> 00:12:27,040
that polling window your keylogger can

348
00:12:27,040 --> 00:12:29,920
start to get lossy and it'll drop keys

349
00:12:29,920 --> 00:12:31,440
that it should be logging

350
00:12:31,440 --> 00:12:33,200
which can lead to problems if it's like

351
00:12:33,200 --> 00:12:34,959
a key and a password

352
00:12:34,959 --> 00:12:36,959
normally if you have a lossy keylogger

353
00:12:36,959 --> 00:12:38,240
that's okay you can work around that

354
00:12:38,240 --> 00:12:39,760
which is the context of the rest of the

355
00:12:39,760 --> 00:12:41,440
keys but

356
00:12:41,440 --> 00:12:43,519
something to consider

357
00:12:43,519 --> 00:12:44,720
and then

358
00:12:44,720 --> 00:12:46,720
in this image below

359
00:12:46,720 --> 00:12:48,639
this comes from the most recent

360
00:12:48,639 --> 00:12:50,880
miter attack evaluations every year now

361
00:12:50,880 --> 00:12:52,880
they've been doing these evals with a

362
00:12:52,880 --> 00:12:55,600
bunch of defensive products uh where

363
00:12:55,600 --> 00:12:57,200
they will stand up in environment and

364
00:12:57,200 --> 00:12:58,560
they run a series of tests with all

365
00:12:58,560 --> 00:13:01,279
these different edr vendors and their

366
00:13:01,279 --> 00:13:02,800
tests are modeled after a specific

367
00:13:02,800 --> 00:13:04,800
adversary in this latest case it was

368
00:13:04,800 --> 00:13:06,639
fin7

369
00:13:06,639 --> 00:13:08,880
um

370
00:13:09,440 --> 00:13:10,639
and

371
00:13:10,639 --> 00:13:12,240
then they'll run through this series of

372
00:13:12,240 --> 00:13:13,839
tests with all these vendors and then

373
00:13:13,839 --> 00:13:16,240
they publish all the detections and the

374
00:13:16,240 --> 00:13:17,839
corresponding techniques

375
00:13:17,839 --> 00:13:20,240
so this was a screenshot i grabbed from

376
00:13:20,240 --> 00:13:22,959
the last miter attack evals again all

377
00:13:22,959 --> 00:13:24,399
public on their site

378
00:13:24,399 --> 00:13:27,040
um and this is bitdefender

379
00:13:27,040 --> 00:13:28,880
detecting when

380
00:13:28,880 --> 00:13:30,079
a

381
00:13:30,079 --> 00:13:33,040
new keyboard hooking event occurred

382
00:13:33,040 --> 00:13:37,200
with this defender upgrade.exe

383
00:13:37,200 --> 00:13:39,600
um

384
00:13:40,560 --> 00:13:43,040
so so here we can see them

385
00:13:43,040 --> 00:13:45,199
detecting a new hooking of a keyboard

386
00:13:45,199 --> 00:13:46,959
event and then that raised this

387
00:13:46,959 --> 00:13:48,959
detection for uh

388
00:13:48,959 --> 00:13:52,638
key logging or input capture

389
00:13:52,880 --> 00:13:55,279
they called it a different sub technique

390
00:13:55,279 --> 00:13:56,880
but it is

391
00:13:56,880 --> 00:13:58,560
still a

392
00:13:58,560 --> 00:14:00,800
1056 and they did detect the actual

393
00:14:00,800 --> 00:14:02,240
keyboard hooking if you were to look at

394
00:14:02,240 --> 00:14:04,240
the details of this which in my opinion

395
00:14:04,240 --> 00:14:08,000
would be techniques of technique one

396
00:14:08,000 --> 00:14:09,600
um

397
00:14:09,600 --> 00:14:11,920
so then moving on to the linux offense

398
00:14:11,920 --> 00:14:13,279
uh

399
00:14:13,279 --> 00:14:15,199
this is where things get very tricky if

400
00:14:15,199 --> 00:14:17,839
you've ever actually tried keylogging on

401
00:14:17,839 --> 00:14:20,079
a

402
00:14:20,160 --> 00:14:22,240
linux system in production or a remote

403
00:14:22,240 --> 00:14:25,600
linux system you've probably tried

404
00:14:25,600 --> 00:14:27,440
your typical keyloggers which you can

405
00:14:27,440 --> 00:14:29,680
find on github which are actually device

406
00:14:29,680 --> 00:14:32,160
keyloggers for linux and

407
00:14:32,160 --> 00:14:33,440
you've probably been disappointed

408
00:14:33,440 --> 00:14:35,120
because you've noticed that you haven't

409
00:14:35,120 --> 00:14:38,800
collected any keys on your remote system

410
00:14:38,800 --> 00:14:41,120
this is actually the problem that led me

411
00:14:41,120 --> 00:14:42,079
into

412
00:14:42,079 --> 00:14:43,600
researching this whole space a bit more

413
00:14:43,600 --> 00:14:45,600
because i wanted to understand that so

414
00:14:45,600 --> 00:14:47,199
to start there's several techniques that

415
00:14:47,199 --> 00:14:49,680
exist on linux uh

416
00:14:49,680 --> 00:14:50,959
the one that you'll see a lot of

417
00:14:50,959 --> 00:14:53,040
implementations on github

418
00:14:53,040 --> 00:14:55,760
is device key logging and what this will

419
00:14:55,760 --> 00:14:58,160
do is it'll find your device file for

420
00:14:58,160 --> 00:15:00,240
your keyboard and then it'll read from

421
00:15:00,240 --> 00:15:01,920
this file just like you were reading

422
00:15:01,920 --> 00:15:04,240
from the keyboard and it'll then log it

423
00:15:04,240 --> 00:15:06,800
to a file

424
00:15:07,360 --> 00:15:10,399
this falls apart when you look at remote

425
00:15:10,399 --> 00:15:12,240
machines because they don't have the

426
00:15:12,240 --> 00:15:14,399
physical keyboard device they use pseudo

427
00:15:14,399 --> 00:15:17,120
terminals so we'll get to that

428
00:15:17,120 --> 00:15:19,600
another very popular technique is gui

429
00:15:19,600 --> 00:15:21,279
polling

430
00:15:21,279 --> 00:15:24,639
similar to windows if you're using kde

431
00:15:24,639 --> 00:15:28,399
or gnome there's usually an api gui like

432
00:15:28,399 --> 00:15:31,120
uh xquery key map which will then tell

433
00:15:31,120 --> 00:15:32,959
you all the key presses that are being

434
00:15:32,959 --> 00:15:35,440
entered into that gui system

435
00:15:35,440 --> 00:15:37,040
this can be useful

436
00:15:37,040 --> 00:15:40,240
if it's a remote system with a gui like

437
00:15:40,240 --> 00:15:41,040
a

438
00:15:41,040 --> 00:15:42,959
jump box that are people using

439
00:15:42,959 --> 00:15:45,040
unfortunately in my experience very

440
00:15:45,040 --> 00:15:46,880
rarely do these linux jump boxes ever

441
00:15:46,880 --> 00:15:49,519
have guise um it's very just as it's

442
00:15:49,519 --> 00:15:51,360
usually just a fashion with ssh access

443
00:15:51,360 --> 00:15:53,279
that people then pivoted through

444
00:15:53,279 --> 00:15:55,199
so that's where things get tricky

445
00:15:55,199 --> 00:15:56,160
because if we're talking about that

446
00:15:56,160 --> 00:15:57,519
situation

447
00:15:57,519 --> 00:15:59,759
these previous key logging techniques

448
00:15:59,759 --> 00:16:01,360
will not work for

449
00:16:01,360 --> 00:16:03,440
in that final situation the most common

450
00:16:03,440 --> 00:16:05,839
situation where you have a

451
00:16:05,839 --> 00:16:08,560
linux server that people remote to let's

452
00:16:08,560 --> 00:16:09,920
say in production and then they do their

453
00:16:09,920 --> 00:16:11,040
operations

454
00:16:11,040 --> 00:16:12,880
you need to use shell wrappers and

455
00:16:12,880 --> 00:16:14,959
there's two really good techniques that

456
00:16:14,959 --> 00:16:17,120
you can use here

457
00:16:17,120 --> 00:16:19,600
one is actually editing this authorized

458
00:16:19,600 --> 00:16:21,360
keys file and then you can place a

459
00:16:21,360 --> 00:16:23,680
command before the specific key

460
00:16:23,680 --> 00:16:25,759
uh and that command will get ran we'll

461
00:16:25,759 --> 00:16:27,839
look at that and then the other is just

462
00:16:27,839 --> 00:16:30,560
editing etsy password and replacing the

463
00:16:30,560 --> 00:16:32,800
user's default shell

464
00:16:32,800 --> 00:16:34,079
with a

465
00:16:34,079 --> 00:16:37,120
logging shell wrapper or keylogger

466
00:16:37,120 --> 00:16:39,360
um so here we can see two examples of

467
00:16:39,360 --> 00:16:42,079
those techniques this is the authorized

468
00:16:42,079 --> 00:16:43,279
keys file

469
00:16:43,279 --> 00:16:45,600
for some user in ssh and here's what it

470
00:16:45,600 --> 00:16:47,040
would normally look like and here's

471
00:16:47,040 --> 00:16:49,440
where you can add a command in front of

472
00:16:49,440 --> 00:16:51,440
that authorized keys file that will run

473
00:16:51,440 --> 00:16:53,600
whenever that user authorizes

474
00:16:53,600 --> 00:16:55,040
and then

475
00:16:55,040 --> 00:16:57,839
if you go to jms1.net this is a very old

476
00:16:57,839 --> 00:16:58,880
technique

477
00:16:58,880 --> 00:17:01,440
and then he has his uh log session

478
00:17:01,440 --> 00:17:03,440
script there and that's just a bash

479
00:17:03,440 --> 00:17:04,640
script

480
00:17:04,640 --> 00:17:06,640
that sets up some basic logging opens up

481
00:17:06,640 --> 00:17:08,480
a file for the log

482
00:17:08,480 --> 00:17:09,439
um

483
00:17:09,439 --> 00:17:10,319
and then

484
00:17:10,319 --> 00:17:12,079
we'll just uh

485
00:17:12,079 --> 00:17:14,160
log everything to that file i think

486
00:17:14,160 --> 00:17:16,559
using t before actually executing the

487
00:17:16,559 --> 00:17:19,760
commands themselves so very basic stuff

488
00:17:19,760 --> 00:17:22,160
this is a very old technique

489
00:17:22,160 --> 00:17:23,280
um

490
00:17:23,280 --> 00:17:24,559
if you visit this website you'll see

491
00:17:24,559 --> 00:17:26,160
that and it's an old script but it still

492
00:17:26,160 --> 00:17:29,520
works and it works really well

493
00:17:29,600 --> 00:17:31,440
another very old technique is just

494
00:17:31,440 --> 00:17:33,520
replacing the user shell so you can edit

495
00:17:33,520 --> 00:17:35,679
etsy password and then you can replace

496
00:17:35,679 --> 00:17:37,840
the line with your default shell with a

497
00:17:37,840 --> 00:17:39,520
tool like this called root sh the

498
00:17:39,520 --> 00:17:41,520
original root sh was written over 10

499
00:17:41,520 --> 00:17:44,240
years ago and see this is a rewrite and

500
00:17:44,240 --> 00:17:45,440
go

501
00:17:45,440 --> 00:17:48,559
um still the same thing very effective

502
00:17:48,559 --> 00:17:50,480
and very small if you look at the actual

503
00:17:50,480 --> 00:17:53,280
code uh again just sets up a new file

504
00:17:53,280 --> 00:17:55,039
sets up some basic logging

505
00:17:55,039 --> 00:17:57,200
and then just logs the command next to

506
00:17:57,200 --> 00:17:58,640
the command

507
00:17:58,640 --> 00:18:02,240
so uh very old techniques but still very

508
00:18:02,240 --> 00:18:04,720
useful and kind of that edge case for

509
00:18:04,720 --> 00:18:06,720
remote linux systems that most operators

510
00:18:06,720 --> 00:18:08,240
might not know about

511
00:18:08,240 --> 00:18:09,679
um

512
00:18:09,679 --> 00:18:12,160
detecting these techniques is also very

513
00:18:12,160 --> 00:18:15,919
old and simple um a very popular

514
00:18:15,919 --> 00:18:17,760
uh linux security technique for many

515
00:18:17,760 --> 00:18:19,600
years has been file integrity monitoring

516
00:18:19,600 --> 00:18:21,679
so everything on linux is a file

517
00:18:21,679 --> 00:18:25,039
and here we can see uh aid which is a

518
00:18:25,039 --> 00:18:27,039
open source free file integrity

519
00:18:27,039 --> 00:18:29,919
monitoring solution for linux

520
00:18:29,919 --> 00:18:31,919
finding etsy password being edited to

521
00:18:31,919 --> 00:18:34,480
replace the user's shelves

522
00:18:34,480 --> 00:18:37,120
both etsy passwords and the ssh

523
00:18:37,120 --> 00:18:38,240
authorized

524
00:18:38,240 --> 00:18:39,360
keys

525
00:18:39,360 --> 00:18:40,400
are

526
00:18:40,400 --> 00:18:42,320
very key files you should be monitoring

527
00:18:42,320 --> 00:18:43,840
any way with file integrity monitoring

528
00:18:43,840 --> 00:18:46,559
for example ssh authorized keys will

529
00:18:46,559 --> 00:18:48,480
allow a user to persistently access the

530
00:18:48,480 --> 00:18:50,480
box as that user

531
00:18:50,480 --> 00:18:53,679
so that's a big persistence location to

532
00:18:53,679 --> 00:18:55,520
just be checking for new access or to

533
00:18:55,520 --> 00:18:57,280
see that modified so you'll definitely

534
00:18:57,280 --> 00:18:59,840
want to if you implement these

535
00:18:59,840 --> 00:19:01,919
solutions and these defenses

536
00:19:01,919 --> 00:19:03,440
you'll definitely want those files in

537
00:19:03,440 --> 00:19:05,039
your file integrity monitoring key

538
00:19:05,039 --> 00:19:07,120
logging aside they're important files to

539
00:19:07,120 --> 00:19:10,120
monitor

540
00:19:10,640 --> 00:19:12,640
moving on to mac os

541
00:19:12,640 --> 00:19:15,039
first a lot of the same techniques exist

542
00:19:15,039 --> 00:19:17,600
for example because mac os is a unix

543
00:19:17,600 --> 00:19:18,720
system

544
00:19:18,720 --> 00:19:21,360
all those same linux techniques uh carry

545
00:19:21,360 --> 00:19:22,559
right over

546
00:19:22,559 --> 00:19:25,440
um so you'll get the shell replacements

547
00:19:25,440 --> 00:19:27,280
you can also edit the authorized keys

548
00:19:27,280 --> 00:19:29,039
file if you have remote ssh setup on

549
00:19:29,039 --> 00:19:30,160
your mac

550
00:19:30,160 --> 00:19:32,799
um however the most popular

551
00:19:32,799 --> 00:19:35,440
uh technique and example on mac

552
00:19:35,440 --> 00:19:37,039
is creating an event tab for the key

553
00:19:37,039 --> 00:19:39,120
down event

554
00:19:39,120 --> 00:19:41,760
we can see this here this is pretty

555
00:19:41,760 --> 00:19:43,039
simple

556
00:19:43,039 --> 00:19:45,200
we can see the sample in c

557
00:19:45,200 --> 00:19:47,440
by casey scarborough

558
00:19:47,440 --> 00:19:49,440
but this is a very widely shared and

559
00:19:49,440 --> 00:19:50,799
common example

560
00:19:50,799 --> 00:19:53,039
basically you start by creating an event

561
00:19:53,039 --> 00:19:54,720
mask for your

562
00:19:54,720 --> 00:19:57,679
key down events or your heat change

563
00:19:57,679 --> 00:19:59,760
and then you create the event tap on

564
00:19:59,760 --> 00:20:01,280
both the event mask which is the key

565
00:20:01,280 --> 00:20:03,120
down and that callback

566
00:20:03,120 --> 00:20:05,120
the callback function is what will get

567
00:20:05,120 --> 00:20:06,480
executed every time you have your key

568
00:20:06,480 --> 00:20:08,799
down and it's just a very simple

569
00:20:08,799 --> 00:20:11,120
function where you write that key down

570
00:20:11,120 --> 00:20:13,520
event to your file or keep it in your

571
00:20:13,520 --> 00:20:15,120
memory buffer for

572
00:20:15,120 --> 00:20:17,600
later exfiltration

573
00:20:17,600 --> 00:20:20,080
so this is a very common and simple

574
00:20:20,080 --> 00:20:21,919
implementation where you see this event

575
00:20:21,919 --> 00:20:23,919
tab created and then they just write to

576
00:20:23,919 --> 00:20:26,320
a file

577
00:20:26,320 --> 00:20:28,240
the detection here is also pretty well

578
00:20:28,240 --> 00:20:30,640
explored

579
00:20:30,640 --> 00:20:32,880
patrick wordle of objective c makes a

580
00:20:32,880 --> 00:20:35,280
lot of really cool mac os tools and

581
00:20:35,280 --> 00:20:37,440
here's one that he made called reekie

582
00:20:37,440 --> 00:20:40,240
which lets you monitor for event taps on

583
00:20:40,240 --> 00:20:41,360
mac os

584
00:20:41,360 --> 00:20:42,640
so

585
00:20:42,640 --> 00:20:44,400
and again like patrick puts a lot of

586
00:20:44,400 --> 00:20:46,240
thought into his detection tools one of

587
00:20:46,240 --> 00:20:47,679
the big problems with these keylogger

588
00:20:47,679 --> 00:20:49,679
detection techniques is just simple

589
00:20:49,679 --> 00:20:52,080
false positives uh because you know

590
00:20:52,080 --> 00:20:54,880
legitimate programs will use these so

591
00:20:54,880 --> 00:20:56,640
not only will he show you all this stuff

592
00:20:56,640 --> 00:20:59,840
but then his um

593
00:20:59,840 --> 00:21:02,240
his version also includes filters so

594
00:21:02,240 --> 00:21:04,159
that way you can like white list all of

595
00:21:04,159 --> 00:21:05,600
these mac os

596
00:21:05,600 --> 00:21:06,640
uh

597
00:21:06,640 --> 00:21:08,000
event tabs that are doing the same thing

598
00:21:08,000 --> 00:21:10,640
so you'll only see like strange

599
00:21:10,640 --> 00:21:12,640
unknown event tabs

600
00:21:12,640 --> 00:21:14,559
which is very helpful for bubbling up

601
00:21:14,559 --> 00:21:16,799
threats especially for users like if you

602
00:21:16,799 --> 00:21:18,480
just want to give this to all your users

603
00:21:18,480 --> 00:21:21,760
and give them a known configuration

604
00:21:21,760 --> 00:21:24,799
that's a pretty helpful way to do that

605
00:21:24,799 --> 00:21:25,600
um

606
00:21:25,600 --> 00:21:27,600
finally i felt like this presentation

607
00:21:27,600 --> 00:21:28,960
would be remiss without mentioning

608
00:21:28,960 --> 00:21:31,120
physical key loggers

609
00:21:31,120 --> 00:21:34,400
physical key loggers are a good way to

610
00:21:34,400 --> 00:21:36,799
add these techniques to basically any

611
00:21:36,799 --> 00:21:37,919
machine

612
00:21:37,919 --> 00:21:40,320
that has a hidden input or keyboard

613
00:21:40,320 --> 00:21:42,159
input

614
00:21:42,159 --> 00:21:44,000
the caveat obviously being here that you

615
00:21:44,000 --> 00:21:45,280
have to have physical access to the

616
00:21:45,280 --> 00:21:46,480
device

617
00:21:46,480 --> 00:21:48,559
so just a cool a few different cool

618
00:21:48,559 --> 00:21:51,120
solutions on the left here um this is

619
00:21:51,120 --> 00:21:52,720
just like a usb man in the middle type

620
00:21:52,720 --> 00:21:54,320
solution you just plug the keyboard into

621
00:21:54,320 --> 00:21:55,919
this and then this end of the computer

622
00:21:55,919 --> 00:21:57,120
the neat part about some of these

623
00:21:57,120 --> 00:21:58,480
solutions are

624
00:21:58,480 --> 00:22:00,400
a they have a bunch of internal storage

625
00:22:00,400 --> 00:22:02,559
to leave these keys on but then some of

626
00:22:02,559 --> 00:22:04,799
them all also support wireless or

627
00:22:04,799 --> 00:22:05,919
bluetooth

628
00:22:05,919 --> 00:22:08,080
exfiltration of the keys so if you're

629
00:22:08,080 --> 00:22:11,520
just near the keylogger you can

630
00:22:11,520 --> 00:22:14,720
dump the keys to a phone or a laptop

631
00:22:14,720 --> 00:22:16,720
and then on the other side

632
00:22:16,720 --> 00:22:19,039
we see the omg cable

633
00:22:19,039 --> 00:22:20,960
mg has been making these awesome cables

634
00:22:20,960 --> 00:22:24,880
with embedded devices in the cables

635
00:22:24,880 --> 00:22:27,360
and this one actually he has one that

636
00:22:27,360 --> 00:22:30,240
has key logging features and support

637
00:22:30,240 --> 00:22:33,520
um this is great for those uh apple

638
00:22:33,520 --> 00:22:35,360
magic keyboards where you have the wire

639
00:22:35,360 --> 00:22:36,880
that connects the computer to the

640
00:22:36,880 --> 00:22:38,080
keyboard

641
00:22:38,080 --> 00:22:39,919
you can have everything just sit in that

642
00:22:39,919 --> 00:22:43,120
cable it's very powerful

643
00:22:43,440 --> 00:22:44,240
so

644
00:22:44,240 --> 00:22:45,760
some final takeaways from this whole

645
00:22:45,760 --> 00:22:48,559
thing um we saw how powerful key logging

646
00:22:48,559 --> 00:22:51,360
is uh the technique is very old

647
00:22:51,360 --> 00:22:53,280
um it's using a ton of malware because

648
00:22:53,280 --> 00:22:54,880
it gets that human operational

649
00:22:54,880 --> 00:22:57,280
intelligence that is hard to get another

650
00:22:57,280 --> 00:22:58,640
way

651
00:22:58,640 --> 00:23:00,640
we saw how keylogging can be implemented

652
00:23:00,640 --> 00:23:02,960
across many common operating systems and

653
00:23:02,960 --> 00:23:04,799
even physically

654
00:23:04,799 --> 00:23:07,039
if if it's an operating system that just

655
00:23:07,039 --> 00:23:10,480
has like physical hit inputs

656
00:23:10,480 --> 00:23:12,720
so it's very easy to implement and most

657
00:23:12,720 --> 00:23:14,080
importantly we saw how key logging

658
00:23:14,080 --> 00:23:16,240
itself is a specific detectable

659
00:23:16,240 --> 00:23:18,880
technique in an attacker's kill chain

660
00:23:18,880 --> 00:23:20,240
this is important because not only can

661
00:23:20,240 --> 00:23:23,200
you detect around the keylogger like the

662
00:23:23,200 --> 00:23:25,120
the persistence or the auto start

663
00:23:25,120 --> 00:23:28,080
execution points or the exfiltration but

664
00:23:28,080 --> 00:23:29,360
specifically you can check the key

665
00:23:29,360 --> 00:23:31,600
logging technique now um in the kill

666
00:23:31,600 --> 00:23:32,720
chains

667
00:23:32,720 --> 00:23:34,240
which is just another touch point where

668
00:23:34,240 --> 00:23:36,400
you can catch attackers

669
00:23:36,400 --> 00:23:38,480
uh so some more thoughts on keyloggers

670
00:23:38,480 --> 00:23:40,000
down here i have a blog post where i

671
00:23:40,000 --> 00:23:43,440
expand on this and then also if you

672
00:23:43,440 --> 00:23:45,679
a lot of the inspiration uh from this

673
00:23:45,679 --> 00:23:48,320
research is in that book uh adversarial

674
00:23:48,320 --> 00:23:50,559
tradecraft on cybersecurity

675
00:23:50,559 --> 00:23:52,000
so if you like

676
00:23:52,000 --> 00:23:53,600
some of these notes you'll find a lot

677
00:23:53,600 --> 00:23:54,960
more of that stuff in the book and then

678
00:23:54,960 --> 00:23:56,159
also

679
00:23:56,159 --> 00:23:57,760
the presentation matches the book where

680
00:23:57,760 --> 00:23:59,520
it's the back and forth we look at an

681
00:23:59,520 --> 00:24:01,360
offensive technique and then how do you

682
00:24:01,360 --> 00:24:03,360
detect it how can you turn it against

683
00:24:03,360 --> 00:24:04,960
the attackers

684
00:24:04,960 --> 00:24:05,840
um

685
00:24:05,840 --> 00:24:07,360
etcetera

686
00:24:07,360 --> 00:24:09,440
so thank you very much this has been key

687
00:24:09,440 --> 00:24:11,039
logging across the operating systems and

688
00:24:11,039 --> 00:24:15,640
i've been your host dan borges

689
00:24:19,220 --> 00:24:23,190
[Music]

690
00:24:26,580 --> 00:24:32,720
[Music]

691
00:24:32,720 --> 00:24:34,799
you

