1
00:00:02,780 --> 00:00:07,789
so we're gonna get started with the last

2
00:00:04,939 --> 00:00:11,629
talk of the day so this talk is about

3
00:00:07,790 --> 00:00:13,549
mainframe hacking in 2019 and to

4
00:00:11,629 --> 00:00:15,620
entering these questions we have flipped

5
00:00:13,549 --> 00:00:17,210
with Phillip young sorry for that who

6
00:00:15,620 --> 00:00:19,250
you probably know as soldier of Fortran

7
00:00:17,210 --> 00:00:23,210
it was a leading expert and all things

8
00:00:19,250 --> 00:00:25,730
made for hacking so stay stay focused

9
00:00:23,210 --> 00:00:29,780
there's some swag to be won during the

10
00:00:25,730 --> 00:00:35,749
talks so yeah keep those brains on thank

11
00:00:29,780 --> 00:00:36,769
you I haven't done anything yet I just

12
00:00:35,749 --> 00:00:39,920
showed up

13
00:00:36,769 --> 00:00:44,030
easiest crowd let's try this

14
00:00:39,920 --> 00:00:45,949
how you doing North SEC no awesome ok

15
00:00:44,030 --> 00:00:49,100
good yeah that's I did great that's so

16
00:00:45,949 --> 00:00:50,960
much ok so before I get started this is

17
00:00:49,100 --> 00:00:54,050
like the thing I have to say oh my

18
00:00:50,960 --> 00:00:58,999
slides aren't up yet let me I'll wait

19
00:00:54,050 --> 00:01:01,300
until they there we go ok so before I

20
00:00:58,999 --> 00:01:03,979
get started this is sort of my standard

21
00:01:01,300 --> 00:01:06,110
required my employer makes me do this

22
00:01:03,979 --> 00:01:08,450
I'm not here representing my employer

23
00:01:06,110 --> 00:01:11,000
I'm not here speaking in the name of or

24
00:01:08,450 --> 00:01:13,850
on behalf of my employer I am just a

25
00:01:11,000 --> 00:01:19,159
concerned citizen who happens to care

26
00:01:13,850 --> 00:01:25,759
deeply about mainframe security if you

27
00:01:19,159 --> 00:01:29,799
fly if you go to a bank any bank if you

28
00:01:25,759 --> 00:01:34,609
ride a train if you pay your taxes or

29
00:01:29,799 --> 00:01:38,689
don't a mainframe is involved in some

30
00:01:34,609 --> 00:01:41,390
way you're like if you use ADP as your

31
00:01:38,689 --> 00:01:44,929
payment processor heavy mainframe shop

32
00:01:41,390 --> 00:01:49,299
ok the most important platform on the

33
00:01:44,930 --> 00:01:54,049
planet today is still the mainframe I I

34
00:01:49,299 --> 00:01:56,210
was at an event at Twitter like at the

35
00:01:54,049 --> 00:01:57,289
in their building and this guy comes up

36
00:01:56,210 --> 00:01:59,570
to me and he's like hey what do you do i

37
00:01:57,289 --> 00:02:02,240
do i do mainframe security research like

38
00:01:59,570 --> 00:02:03,788
cool i didn't know those still mattered

39
00:02:02,240 --> 00:02:07,729
anymore

40
00:02:03,789 --> 00:02:10,699
and i was like you know if twitter went

41
00:02:07,729 --> 00:02:12,800
offline like right now it would be in

42
00:02:10,699 --> 00:02:15,109
the news for three days and then

43
00:02:12,800 --> 00:02:16,880
facebook would have like whatever they

44
00:02:15,110 --> 00:02:18,140
built to replace twitter in

45
00:02:16,880 --> 00:02:20,090
be up and running and everyone would be

46
00:02:18,140 --> 00:02:21,829
land-grabbing for user IDs on that and

47
00:02:20,090 --> 00:02:24,080
Twitter would be gone and no one would

48
00:02:21,830 --> 00:02:25,430
care if all the mainframes this is legit

49
00:02:24,080 --> 00:02:28,940
if and all the mainframes are offline

50
00:02:25,430 --> 00:02:31,700
like right now it would be global

51
00:02:28,940 --> 00:02:34,670
economic chaos right trades wouldn't

52
00:02:31,700 --> 00:02:37,399
happen checks wouldn't get paid bills

53
00:02:34,670 --> 00:02:38,600
would not get paid paychecks like if a

54
00:02:37,400 --> 00:02:40,190
if I'm a friend goes down Thursday

55
00:02:38,600 --> 00:02:42,980
afternoon people are gonna be really

56
00:02:40,190 --> 00:02:45,829
upset come Monday morning then planes

57
00:02:42,980 --> 00:02:48,890
won't go like global grounding of

58
00:02:45,830 --> 00:02:51,320
Airlines let's see what else

59
00:02:48,890 --> 00:02:52,850
hospitals stopped working you don't have

60
00:02:51,320 --> 00:02:56,090
to pay university tuition so that's a

61
00:02:52,850 --> 00:02:59,120
plus just the whole world just shuts

62
00:02:56,090 --> 00:03:02,120
down in fact some large retailers in the

63
00:02:59,120 --> 00:03:03,830
states they will literally stop being

64
00:03:02,120 --> 00:03:04,970
able to fill their shelves because the

65
00:03:03,830 --> 00:03:06,440
trucks aren't showing up because all

66
00:03:04,970 --> 00:03:09,700
their logistics is run by mainframes

67
00:03:06,440 --> 00:03:13,790
okay so it's a very important platform I

68
00:03:09,700 --> 00:03:15,320
thought I care a lot about so so I

69
00:03:13,790 --> 00:03:17,510
started out how do I get on this journey

70
00:03:15,320 --> 00:03:20,359
to mainframes right so I started out on

71
00:03:17,510 --> 00:03:25,820
BBS's and x.25 networks who here has

72
00:03:20,360 --> 00:03:28,880
used an X 25 network one two three four

73
00:03:25,820 --> 00:03:31,640
five that's that's the most I've ever

74
00:03:28,880 --> 00:03:36,549
had I actually started reading these

75
00:03:31,640 --> 00:03:39,500
kind of guides on PBS's mind I was ten

76
00:03:36,550 --> 00:03:45,140
twelve I had no idea what I was doing

77
00:03:39,500 --> 00:03:48,110
also when you are a Canadian who is like

78
00:03:45,140 --> 00:03:49,429
twelve and the Internet's coming up and

79
00:03:48,110 --> 00:03:52,459
you read about telnet

80
00:03:49,430 --> 00:03:53,930
and then you read this guide written in

81
00:03:52,459 --> 00:03:57,230
the 80s about a thing called tell

82
00:03:53,930 --> 00:03:59,260
Annette and for like five years you just

83
00:03:57,230 --> 00:04:01,399
think they're the same thing

84
00:03:59,260 --> 00:04:03,140
not not great but anyway it doesn't

85
00:04:01,400 --> 00:04:07,280
matter because in Canada we have data

86
00:04:03,140 --> 00:04:10,279
pack did anybody use data pack a handful

87
00:04:07,280 --> 00:04:12,380
of people okay so data pack was an X the

88
00:04:10,280 --> 00:04:14,300
Canadian Canadian x.25 Network it meant

89
00:04:12,380 --> 00:04:16,969
if you had a modem you could dial into

90
00:04:14,300 --> 00:04:19,579
it and then connect to likely modems or

91
00:04:16,970 --> 00:04:21,560
like fax VMS machines and all kinds of

92
00:04:19,579 --> 00:04:25,510
fun stuff that I definitely didn't touch

93
00:04:21,560 --> 00:04:27,590
when I was a 14 year old hacker wannabe

94
00:04:25,510 --> 00:04:29,630
but I definitely did read this like this

95
00:04:27,590 --> 00:04:30,349
is one of the first really formative

96
00:04:29,630 --> 00:04:32,330
book

97
00:04:30,349 --> 00:04:35,029
of my life I even print it on a dot

98
00:04:32,330 --> 00:04:38,050
matrix printer yeah whoa

99
00:04:35,029 --> 00:04:40,580
all righty so fast-forward super fast

100
00:04:38,050 --> 00:04:43,430
eight like college get a degree in

101
00:04:40,580 --> 00:04:45,349
computer science move on to audit right

102
00:04:43,430 --> 00:04:48,259
because there was no cyber security jobs

103
00:04:45,349 --> 00:04:50,449
when I graduated college I was working

104
00:04:48,259 --> 00:04:54,800
on this audit for a large payment

105
00:04:50,449 --> 00:05:00,050
processor in the States and we got this

106
00:04:54,800 --> 00:05:02,629
guy from a three-letter company I'm not

107
00:05:00,050 --> 00:05:06,349
gonna name them I have named them in

108
00:05:02,629 --> 00:05:08,209
other talks previously and we bring this

109
00:05:06,349 --> 00:05:11,209
guy in and he's built to us is like a

110
00:05:08,209 --> 00:05:16,689
PCI certified mainframe expert he is the

111
00:05:11,209 --> 00:05:19,339
guy guy and he comes over and I'm like

112
00:05:16,689 --> 00:05:20,779
okay cool I'm gonna get your knowledge

113
00:05:19,339 --> 00:05:22,369
you're gonna dump it into my brain and

114
00:05:20,779 --> 00:05:24,259
I'm gonna actually be able to really

115
00:05:22,369 --> 00:05:25,849
audit a mainframe instead of what I was

116
00:05:24,259 --> 00:05:28,309
doing before which is quite literally a

117
00:05:25,849 --> 00:05:29,959
checklist and going do you have this

118
00:05:28,309 --> 00:05:31,580
good do you I don't know what I'm

119
00:05:29,959 --> 00:05:34,580
looking at I don't know why an AP of

120
00:05:31,580 --> 00:05:36,438
authorized librarian matters but I have

121
00:05:34,580 --> 00:05:39,258
to do it on the checklist so this guy

122
00:05:36,439 --> 00:05:40,759
comes back and I'm like okay cool your

123
00:05:39,259 --> 00:05:43,719
PCI certified how do I see what ports

124
00:05:40,759 --> 00:05:47,149
are open on a mainframe easy question oh

125
00:05:43,719 --> 00:05:50,080
well you have to pull the communication

126
00:05:47,149 --> 00:05:53,930
server memory region and read the bits

127
00:05:50,080 --> 00:05:57,680
by hand to figure that out I'm like that

128
00:05:53,930 --> 00:06:00,860
sounds stupid I wonder if you can run

129
00:05:57,680 --> 00:06:02,629
the netstat command and you could you

130
00:06:00,860 --> 00:06:03,949
just type netstat so I told when the

131
00:06:02,629 --> 00:06:05,029
system programmers to run the nest that

132
00:06:03,949 --> 00:06:08,349
command and this guy I know like those

133
00:06:05,029 --> 00:06:11,749
me too like hey what's netstat and

134
00:06:08,349 --> 00:06:12,979
that's when I was like holy moly the

135
00:06:11,749 --> 00:06:14,809
reason no one's talking about this

136
00:06:12,979 --> 00:06:17,930
platform at Def Con or anyone else is

137
00:06:14,809 --> 00:06:19,189
cuz no one cares to talk about it right

138
00:06:17,930 --> 00:06:21,050
there's no security expert in the space

139
00:06:19,189 --> 00:06:22,039
like literally I would love it if

140
00:06:21,050 --> 00:06:24,110
someone else was up here talking about

141
00:06:22,039 --> 00:06:27,830
this cuz I've been doing it for like

142
00:06:24,110 --> 00:06:31,369
five years so I've spoken everywhere too

143
00:06:27,830 --> 00:06:33,229
many places Def Con RSA black hatch MOOC

144
00:06:31,369 --> 00:06:36,259
on all kinds of places I've actually

145
00:06:33,229 --> 00:06:37,758
spoken at North sac before typically so

146
00:06:36,259 --> 00:06:40,669
this is not supposed to be like a super

147
00:06:37,759 --> 00:06:42,860
in-depth dive into like O'Dea hacking on

148
00:06:40,669 --> 00:06:43,849
the mainframe that's just what the

149
00:06:42,860 --> 00:06:45,740
mainframe was for a walk

150
00:06:43,849 --> 00:06:47,539
watching this later online because

151
00:06:45,740 --> 00:06:49,759
typically this is an email that'll end

152
00:06:47,539 --> 00:06:53,779
up on a mainframe mailing list that I'm

153
00:06:49,759 --> 00:06:57,379
on and you usually see stuff like this

154
00:06:53,779 --> 00:06:59,179
it's a very amateurish which it

155
00:06:57,379 --> 00:07:01,729
definitely is I am NOT a system

156
00:06:59,179 --> 00:07:03,169
programmer by trade I am literally doing

157
00:07:01,729 --> 00:07:07,459
this with just a bunch of free online

158
00:07:03,169 --> 00:07:09,289
books and like a gumption okay I also

159
00:07:07,459 --> 00:07:12,559
run what's called the internet mainframe

160
00:07:09,289 --> 00:07:15,979
program called the IMP it's quite

161
00:07:12,559 --> 00:07:17,360
literally masscan and map s 30 to 70 and

162
00:07:15,979 --> 00:07:19,818
a bunch of Python that sort of glues it

163
00:07:17,360 --> 00:07:21,800
all together and it takes screenshots of

164
00:07:19,819 --> 00:07:24,499
mainframes that it finds online I have a

165
00:07:21,800 --> 00:07:27,860
database of 600 screenshots typically

166
00:07:24,499 --> 00:07:30,830
things that look like this who can tell

167
00:07:27,860 --> 00:07:35,059
me who owns this mainframe that was not

168
00:07:30,830 --> 00:07:36,349
in my class come on someone I know this

169
00:07:35,059 --> 00:07:39,559
is not the prize-winning question it's

170
00:07:36,349 --> 00:07:41,688
like literally on the screen yeah it's

171
00:07:39,559 --> 00:07:43,969
the yeah deal who the joint service

172
00:07:41,689 --> 00:07:49,149
provider is what do you think that

173
00:07:43,969 --> 00:07:52,909
little shape is it's a Pentagon cool huh

174
00:07:49,149 --> 00:07:55,610
already so I teach a class on mainframe

175
00:07:52,909 --> 00:07:56,839
pen testing it is an intense who here

176
00:07:55,610 --> 00:07:59,089
was in the class I know a couple of

177
00:07:56,839 --> 00:08:00,889
people up front I see one in the back

178
00:07:59,089 --> 00:08:04,249
yeah okay no you guys can't answer the

179
00:08:00,889 --> 00:08:06,159
quiz question that's not fair how many

180
00:08:04,249 --> 00:08:08,749
system programmers we have in the room

181
00:08:06,159 --> 00:08:09,829
okay good that's not okay fine because

182
00:08:08,749 --> 00:08:11,719
then the question no one's gonna get it

183
00:08:09,829 --> 00:08:13,699
already cool so I run I teach a two-day

184
00:08:11,719 --> 00:08:16,089
class on how to actually really like put

185
00:08:13,699 --> 00:08:18,829
your mainframe through its paces

186
00:08:16,089 --> 00:08:19,939
but since only three people took the

187
00:08:18,829 --> 00:08:22,069
class I'm gonna have to give you like a

188
00:08:19,939 --> 00:08:25,399
101 on mainframes typically when I

189
00:08:22,069 --> 00:08:26,419
travel I asked people I asked though it

190
00:08:25,399 --> 00:08:27,619
doesn't own those little Hotel things

191
00:08:26,419 --> 00:08:28,938
you can ask for like special requests

192
00:08:27,619 --> 00:08:31,459
like oh it's our anniversary let's get

193
00:08:28,939 --> 00:08:32,930
some flowers and I put draw me a picture

194
00:08:31,459 --> 00:08:38,740
of a mainframe without looking it up on

195
00:08:32,929 --> 00:08:42,019
the internet and I see things like this

196
00:08:38,740 --> 00:08:45,210
right like it's a mainframe for a car or

197
00:08:42,019 --> 00:08:49,260
this this is a cool this is a good one

198
00:08:45,210 --> 00:08:50,580
the state of Maine and then this last

199
00:08:49,260 --> 00:08:53,819
one is the closest one

200
00:08:50,580 --> 00:08:56,130
it is a Sun micro system not a mainframe

201
00:08:53,820 --> 00:08:58,260
but at least it's a computer right like

202
00:08:56,130 --> 00:09:00,480
they knew enough to do that but what

203
00:08:58,260 --> 00:09:03,450
okay so this is what an actual mainframe

204
00:09:00,480 --> 00:09:05,160
looks like okay this is this is no why

205
00:09:03,450 --> 00:09:07,110
this is what it looks like so the size

206
00:09:05,160 --> 00:09:11,040
of industrial fridge it comes with that

207
00:09:07,110 --> 00:09:12,870
person that's it's funny it is a joke

208
00:09:11,040 --> 00:09:14,819
but it's no joke if it comes with people

209
00:09:12,870 --> 00:09:15,990
they just live underneath the keyboard

210
00:09:14,820 --> 00:09:18,780
section there they just stay in your

211
00:09:15,990 --> 00:09:23,190
data center that's a mainframe

212
00:09:18,780 --> 00:09:25,560
it is a modern piece of architecture it

213
00:09:23,190 --> 00:09:27,690
that it's super resilient it's designed

214
00:09:25,560 --> 00:09:30,089
to handle earthquakes you can quite

215
00:09:27,690 --> 00:09:31,920
literally rip out CPU cards and it just

216
00:09:30,090 --> 00:09:34,410
continues processing transactions on a

217
00:09:31,920 --> 00:09:37,020
different CPU doesn't matter it is is

218
00:09:34,410 --> 00:09:38,250
really quite a modern piece of

219
00:09:37,020 --> 00:09:39,930
technology the reason you don't hear

220
00:09:38,250 --> 00:09:41,760
about it at all it's because it's got

221
00:09:39,930 --> 00:09:44,219
like five six seven nines enough time

222
00:09:41,760 --> 00:09:46,590
okay that's why we don't hear about it

223
00:09:44,220 --> 00:09:47,850
going down all that often because what

224
00:09:46,590 --> 00:09:49,860
it does go down is because someone like

225
00:09:47,850 --> 00:09:54,140
me or someone like people in the room

226
00:09:49,860 --> 00:09:57,450
have screwed up but it's just a computer

227
00:09:54,140 --> 00:10:04,199
it's just a computer that has give me a

228
00:09:57,450 --> 00:10:04,560
second this is gonna take a bit yeah all

229
00:10:04,200 --> 00:10:08,640
right

230
00:10:04,560 --> 00:10:11,569
it has system network architecture

231
00:10:08,640 --> 00:10:14,130
virtual telecommunication access method

232
00:10:11,570 --> 00:10:15,900
resource access control facility time

233
00:10:14,130 --> 00:10:17,760
sharing option restructured extended

234
00:10:15,900 --> 00:10:19,079
executor job control language customer

235
00:10:17,760 --> 00:10:20,910
information control system virtual

236
00:10:19,080 --> 00:10:23,790
storage open multiple virtual storage

237
00:10:20,910 --> 00:10:25,319
high level assembly telnet 30 to 70

238
00:10:23,790 --> 00:10:33,150
authorized program facility and network

239
00:10:25,320 --> 00:10:35,850
job entry any questions we'll get there

240
00:10:33,150 --> 00:10:37,050
don't worry we're good

241
00:10:35,850 --> 00:10:39,300
I'm gonna move on to the cool hacking

242
00:10:37,050 --> 00:10:42,209
part now and you'll not okay so so tell

243
00:10:39,300 --> 00:10:44,609
that 30 to 70 that is really just the

244
00:10:42,210 --> 00:10:47,310
window into the mainframe okay unless

245
00:10:44,610 --> 00:10:51,090
you connect to V Tamil gets a beat em in

246
00:10:47,310 --> 00:10:53,729
a bit typically when I'm doing anything

247
00:10:51,090 --> 00:10:57,570
on the mainframe I use the client X 30

248
00:10:53,730 --> 00:10:58,710
to 70 it is open source it is freely

249
00:10:57,570 --> 00:11:02,150
available and

250
00:10:58,710 --> 00:11:04,590
is awesome it is it is probably the best

251
00:11:02,150 --> 00:11:06,060
3270 client that there is and I prefer

252
00:11:04,590 --> 00:11:08,190
it over the commercial enterprise

253
00:11:06,060 --> 00:11:09,869
options because it's it supports things

254
00:11:08,190 --> 00:11:12,660
like special characters and graphics so

255
00:11:09,870 --> 00:11:16,140
this is an honest-to-god TN 3270

256
00:11:12,660 --> 00:11:18,360
mainframe logon screen that I built you

257
00:11:16,140 --> 00:11:20,550
can do graphics you can do colors the

258
00:11:18,360 --> 00:11:23,580
challenge with with this kind of art is

259
00:11:20,550 --> 00:11:25,620
you I'm gonna get way in the weeds here

260
00:11:23,580 --> 00:11:28,980
but basically with a TN 30 to 70 stream

261
00:11:25,620 --> 00:11:30,570
protocol you can't change the color it

262
00:11:28,980 --> 00:11:31,560
takes up one character so one character

263
00:11:30,570 --> 00:11:33,390
is changing the color that's what

264
00:11:31,560 --> 00:11:35,760
another colors change there's always a

265
00:11:33,390 --> 00:11:36,030
space between them that's just how it

266
00:11:35,760 --> 00:11:38,670
works

267
00:11:36,030 --> 00:11:41,910
anyways so you can do stuff like that

268
00:11:38,670 --> 00:11:43,020
for their demos today I will be probably

269
00:11:41,910 --> 00:11:45,959
doing them like this because it's easier

270
00:11:43,020 --> 00:11:47,430
to see right it's white on its like

271
00:11:45,960 --> 00:11:50,220
black on white it's easier for everyone

272
00:11:47,430 --> 00:11:51,420
room to see versus this kind of hard to

273
00:11:50,220 --> 00:11:53,700
read especially red text

274
00:11:51,420 --> 00:11:56,300
we found sorry so this is that's it it's

275
00:11:53,700 --> 00:12:00,600
X 30 to 70 it's a telnet based protocol

276
00:11:56,300 --> 00:12:04,050
that means it's in clear text but it's

277
00:12:00,600 --> 00:12:05,370
it's encrypted with episodic so that's

278
00:12:04,050 --> 00:12:08,520
not encryption that's literally there's

279
00:12:05,370 --> 00:12:11,250
a switch in Wireshark to go decode EPS

280
00:12:08,520 --> 00:12:14,180
in it right it's just a ski but in

281
00:12:11,250 --> 00:12:16,470
whatever ancient format IBM decided on

282
00:12:14,180 --> 00:12:17,729
the reason the predominant reason that I

283
00:12:16,470 --> 00:12:19,860
use it especially for mainframe pen

284
00:12:17,730 --> 00:12:23,550
testing is because I can record every

285
00:12:19,860 --> 00:12:25,230
single thing I do in a session right so

286
00:12:23,550 --> 00:12:26,969
I can go back and take screenshots I can

287
00:12:25,230 --> 00:12:29,280
go and do whatever I need to do and it

288
00:12:26,970 --> 00:12:30,990
takes it a nice HTML formatted thing so

289
00:12:29,280 --> 00:12:34,589
I can do crap I can look through it

290
00:12:30,990 --> 00:12:36,870
that's why I use X 3270 I prefer it over

291
00:12:34,590 --> 00:12:38,550
the other clients also scriptable so if

292
00:12:36,870 --> 00:12:40,620
you have a whole bunch of tasks that you

293
00:12:38,550 --> 00:12:42,270
need to do like I had one program at one

294
00:12:40,620 --> 00:12:44,580
place literally could not download a

295
00:12:42,270 --> 00:12:47,760
file off the mainframe so I quite

296
00:12:44,580 --> 00:12:50,840
literally catted it and had at X 30 to

297
00:12:47,760 --> 00:12:53,580
70 just hit enter for like five hours

298
00:12:50,840 --> 00:12:55,230
all right instead of me doing it but

299
00:12:53,580 --> 00:12:58,290
that's possible with this okay that's

300
00:12:55,230 --> 00:13:01,440
why I prefer it over the other ones okay

301
00:12:58,290 --> 00:13:05,910
system network architecture does anybody

302
00:13:01,440 --> 00:13:07,500
know anything about SNA like no one

303
00:13:05,910 --> 00:13:09,000
there's people who took my class and

304
00:13:07,500 --> 00:13:11,750
they didn't put their hands up that's

305
00:13:09,000 --> 00:13:14,990
terrible okay so

306
00:13:11,750 --> 00:13:20,180
Senay basically you needed a way to

307
00:13:14,990 --> 00:13:21,260
identify things before tcp/ip existed

308
00:13:20,180 --> 00:13:24,819
okay

309
00:13:21,260 --> 00:13:28,180
it was invented like the 70s 80s

310
00:13:24,820 --> 00:13:31,580
essentially a terminal gets an ID and

311
00:13:28,180 --> 00:13:34,400
then you say I want to connect to this

312
00:13:31,580 --> 00:13:37,100
IP over here with this terminal and then

313
00:13:34,400 --> 00:13:39,500
it routes it where it needs to go the

314
00:13:37,100 --> 00:13:41,540
important thing to know for like when we

315
00:13:39,500 --> 00:13:44,480
talk about SNA is that every time you

316
00:13:41,540 --> 00:13:45,980
connect with X 32 7 you get a logical

317
00:13:44,480 --> 00:13:48,260
unit so if you go back a couple of

318
00:13:45,980 --> 00:13:49,580
slides here you can see on the very

319
00:13:48,260 --> 00:13:53,300
bottom there there's like I think called

320
00:13:49,580 --> 00:13:56,420
smog Lu 25 that's the identifier for

321
00:13:53,300 --> 00:13:57,680
that terminal connection right and I say

322
00:13:56,420 --> 00:13:58,910
that because that's important for when

323
00:13:57,680 --> 00:14:00,890
you're looking at logs and you're trying

324
00:13:58,910 --> 00:14:03,170
to like blue team this because you don't

325
00:14:00,890 --> 00:14:05,390
that the logs don't sort of match up so

326
00:14:03,170 --> 00:14:07,719
it's important to know that SN a logical

327
00:14:05,390 --> 00:14:07,720
units okay

328
00:14:07,750 --> 00:14:10,610
v Tam

329
00:14:09,260 --> 00:14:13,430
no one calls it virtual

330
00:14:10,610 --> 00:14:16,070
telecommunication whatever okay just be

331
00:14:13,430 --> 00:14:18,680
Tam when you connect so let's screen

332
00:14:16,070 --> 00:14:21,290
that you saw me show that's v-tail that

333
00:14:18,680 --> 00:14:23,479
pentagon one that's detail when you

334
00:14:21,290 --> 00:14:25,099
connect on TN 3270 you're connecting to

335
00:14:23,480 --> 00:14:26,570
v TM v TM is like the router that

336
00:14:25,100 --> 00:14:28,910
controls where you're gonna go where you

337
00:14:26,570 --> 00:14:30,080
want to go it's your first like there

338
00:14:28,910 --> 00:14:33,110
have been places where I've connected

339
00:14:30,080 --> 00:14:35,240
into a dev or sandbox environment and

340
00:14:33,110 --> 00:14:38,120
then known how to get to prod through V

341
00:14:35,240 --> 00:14:40,550
Tam okay just do all over the SNA

342
00:14:38,120 --> 00:14:44,330
Network so that's V Tim that's what V

343
00:14:40,550 --> 00:14:48,319
Tim does what's cool is one it doesn't

344
00:14:44,330 --> 00:14:50,870
log anything that's cool too it has all

345
00:14:48,320 --> 00:14:53,300
these various commands all three

346
00:14:50,870 --> 00:14:55,010
commands that you can do stuff log off

347
00:14:53,300 --> 00:14:57,680
is quite literally just close the

348
00:14:55,010 --> 00:15:00,020
connection log on is how you actually

349
00:14:57,680 --> 00:15:01,849
route your terminal to an application so

350
00:15:00,020 --> 00:15:04,100
if I want to get to TSO time-varying

351
00:15:01,850 --> 00:15:05,450
option that's where it's gonna take me

352
00:15:04,100 --> 00:15:08,120
that's where that commands gonna take me

353
00:15:05,450 --> 00:15:09,860
the other one is IBM tests so if to tell

354
00:15:08,120 --> 00:15:12,740
if you're in V tam or not and nine times

355
00:15:09,860 --> 00:15:15,530
out of ten you are you can type IBM test

356
00:15:12,740 --> 00:15:17,000
and it will reply IBM echo depth at that

357
00:15:15,530 --> 00:15:19,220
and the whole alphabet all the numbers

358
00:15:17,000 --> 00:15:20,900
right it's a debug command that allows

359
00:15:19,220 --> 00:15:23,150
you to identify that you're in beaten

360
00:15:20,900 --> 00:15:24,470
but that's how I can tell so all my

361
00:15:23,150 --> 00:15:24,980
scripts and stuff that I've written it

362
00:15:24,470 --> 00:15:27,490
checks for the

363
00:15:24,980 --> 00:15:31,760
first four V Tam so that it can move on

364
00:15:27,490 --> 00:15:34,459
okay you for me here talk about TSO TSO

365
00:15:31,760 --> 00:15:36,410
stands for time sharing option the

366
00:15:34,459 --> 00:15:40,069
reason it's called time sharing option

367
00:15:36,410 --> 00:15:41,510
is because it used to be optional you

368
00:15:40,070 --> 00:15:43,639
used to be able to buy a mainframe and

369
00:15:41,510 --> 00:15:45,139
it didn't come with this but this is the

370
00:15:43,639 --> 00:15:46,550
shelf this is when you're on it you're

371
00:15:45,139 --> 00:15:49,040
typing commands

372
00:15:46,550 --> 00:15:50,689
this is TSO is the shell environment

373
00:15:49,040 --> 00:15:51,920
like for lack of a better term that

374
00:15:50,690 --> 00:15:54,680
you're connecting to

375
00:15:51,920 --> 00:15:57,740
that's time sharing option when you want

376
00:15:54,680 --> 00:16:00,829
to run programs there's two ways you can

377
00:15:57,740 --> 00:16:03,470
call compiled programs they're called

378
00:16:00,829 --> 00:16:07,250
load modules but you can compile you can

379
00:16:03,470 --> 00:16:09,230
call compile programs or you execute

380
00:16:07,250 --> 00:16:10,720
scripts so that's the two main

381
00:16:09,230 --> 00:16:13,490
differences so here's an example of me

382
00:16:10,720 --> 00:16:17,990
calling a compiled program that I've

383
00:16:13,490 --> 00:16:20,180
written in TSO say yes I'd call and then

384
00:16:17,990 --> 00:16:24,579
I typed the file it's called the dataset

385
00:16:20,180 --> 00:16:24,579
I call a file and it's going to run

386
00:16:26,230 --> 00:16:35,060
right that's calling a binary compiled

387
00:16:30,410 --> 00:16:36,529
program next same thing but this is an

388
00:16:35,060 --> 00:16:37,670
execute this is a script it's a rec

389
00:16:36,529 --> 00:16:42,339
script I'll get there in a bit

390
00:16:37,670 --> 00:16:45,620
so this is how I would run rec script

391
00:16:42,339 --> 00:16:48,589
GPX enter boom we get a totally

392
00:16:45,620 --> 00:16:50,360
different skull now if you're wondering

393
00:16:48,589 --> 00:16:54,310
what programs in the background ran

394
00:16:50,360 --> 00:16:58,940
these and drives these the first one was

395
00:16:54,310 --> 00:17:01,930
assembler and that's what it looks like

396
00:16:58,940 --> 00:17:04,939
it is a mess

397
00:17:01,930 --> 00:17:07,819
the next one was written Rex look how

398
00:17:04,939 --> 00:17:10,699
easy that is alright so you can imagine

399
00:17:07,819 --> 00:17:13,129
I prototype all my stuff in Rex all my

400
00:17:10,699 --> 00:17:15,319
scripts then I start with our prototype

401
00:17:13,130 --> 00:17:17,299
in Rex they're easier to read easier to

402
00:17:15,319 --> 00:17:19,668
wrap a prototype Rex is like the Python

403
00:17:17,299 --> 00:17:25,309
well it's more like it's like if pearl

404
00:17:19,669 --> 00:17:27,380
and bash and Python how to kid an older

405
00:17:25,309 --> 00:17:29,809
kid because this was this was creating

406
00:17:27,380 --> 00:17:33,200
the 80s as they like 10% project by

407
00:17:29,809 --> 00:17:35,178
someone at IBM like long long time ago

408
00:17:33,200 --> 00:17:36,470
so this is like an optional thing that

409
00:17:35,179 --> 00:17:38,000
they built and now it's a super powerful

410
00:17:36,470 --> 00:17:38,820
scripting engine and it comes installed

411
00:17:38,000 --> 00:17:41,010
default

412
00:17:38,820 --> 00:17:42,300
every single mainframe period you know

413
00:17:41,010 --> 00:17:49,320
it's gonna be there it's installed by

414
00:17:42,300 --> 00:17:51,000
default JCL is typically what we use to

415
00:17:49,320 --> 00:17:53,340
submit jobs so so the operating systems

416
00:17:51,000 --> 00:17:55,710
actually batch driven so if I need to do

417
00:17:53,340 --> 00:17:57,810
something that's you you heard me say I

418
00:17:55,710 --> 00:17:59,310
have hit enter a billion times like that

419
00:17:57,810 --> 00:18:01,340
sucks so if I'm gonna if I'm gonna make

420
00:17:59,310 --> 00:18:03,960
a report or if I'm going to do things

421
00:18:01,340 --> 00:18:06,659
like run commands and unix or run

422
00:18:03,960 --> 00:18:10,530
commands in TSO by headless I would use

423
00:18:06,660 --> 00:18:13,680
JCL you submit the job and it goes in it

424
00:18:10,530 --> 00:18:16,050
looks like garbage and it takes you a

425
00:18:13,680 --> 00:18:18,450
while to figure it out but like this

426
00:18:16,050 --> 00:18:23,639
looks like crap too so it's fine this is

427
00:18:18,450 --> 00:18:27,000
what this is JCL this JCL does exactly

428
00:18:23,640 --> 00:18:30,090
what the previous TSO command does it

429
00:18:27,000 --> 00:18:33,300
executes a rec script and instead of the

430
00:18:30,090 --> 00:18:36,050
output going to my screen it goes to SD

431
00:18:33,300 --> 00:18:38,190
SF which prints out and looks like this

432
00:18:36,050 --> 00:18:41,280
so you can imagine this is pretty useful

433
00:18:38,190 --> 00:18:42,930
to be to do stuff where you can submit

434
00:18:41,280 --> 00:18:46,050
JCL but not might not have an

435
00:18:42,930 --> 00:18:48,300
interactive terminal okay so that's JCL

436
00:18:46,050 --> 00:18:49,919
some pro tips with JCL you always need

437
00:18:48,300 --> 00:18:52,560
to put two slashes on every single line

438
00:18:49,920 --> 00:18:54,390
unless you're doing in line commands for

439
00:18:52,560 --> 00:18:56,190
the program you're running there's also

440
00:18:54,390 --> 00:19:00,690
a program there you can see a program i

441
00:18:56,190 --> 00:19:04,700
caged f01 that's the program that we're

442
00:19:00,690 --> 00:19:07,650
running with this job step in JCL

443
00:19:04,700 --> 00:19:10,980
fantastic everyone here is like this is

444
00:19:07,650 --> 00:19:13,200
the why am I still here this is this is

445
00:19:10,980 --> 00:19:13,620
too late to be why are you doing this to

446
00:19:13,200 --> 00:19:15,990
us

447
00:19:13,620 --> 00:19:18,389
I'll get trust me we'll get there so how

448
00:19:15,990 --> 00:19:20,520
do we secure the mainframe we use rack F

449
00:19:18,390 --> 00:19:23,460
predominantly there's also a CF two and

450
00:19:20,520 --> 00:19:24,629
top secret they only have together 25%

451
00:19:23,460 --> 00:19:26,730
of the market rack have controls the

452
00:19:24,630 --> 00:19:28,980
other 75% of the market if you're

453
00:19:26,730 --> 00:19:30,960
thinking what are you talking about how

454
00:19:28,980 --> 00:19:32,970
are there's three security products for

455
00:19:30,960 --> 00:19:34,320
an operating system and their atomic

456
00:19:32,970 --> 00:19:35,340
right they're not like you can't install

457
00:19:34,320 --> 00:19:39,540
one on top of the other

458
00:19:35,340 --> 00:19:41,100
it's because the way the operating

459
00:19:39,540 --> 00:19:43,920
system works is every time you try to do

460
00:19:41,100 --> 00:19:46,080
something it asks a thing called the

461
00:19:43,920 --> 00:19:47,390
saff and then the staff will ask your

462
00:19:46,080 --> 00:19:49,860
security product if you can get access

463
00:19:47,390 --> 00:19:52,140
right so you can you can just swap in

464
00:19:49,860 --> 00:19:54,149
and out security products and the

465
00:19:52,140 --> 00:19:55,830
and some people have been using CAC f2

466
00:19:54,150 --> 00:19:57,920
for like 40 years

467
00:19:55,830 --> 00:20:00,510
and they're never gonna switch but

468
00:19:57,920 --> 00:20:03,600
that's the rack F is predominantly what

469
00:20:00,510 --> 00:20:07,620
we see now when you try to do something

470
00:20:03,600 --> 00:20:08,790
on the mainframe right it's gonna ask

471
00:20:07,620 --> 00:20:11,189
the rack out database it's just a

472
00:20:08,790 --> 00:20:13,440
database so it's not like like built in

473
00:20:11,190 --> 00:20:17,730
the operational it's no bit set on files

474
00:20:13,440 --> 00:20:20,370
or anything when you have access to the

475
00:20:17,730 --> 00:20:22,290
database that means you can change your

476
00:20:20,370 --> 00:20:25,709
permission to any file because this is a

477
00:20:22,290 --> 00:20:27,180
database so if I have system special

478
00:20:25,710 --> 00:20:30,900
which is one of the attributes that

479
00:20:27,180 --> 00:20:33,870
exists on the mainframe I can't that

480
00:20:30,900 --> 00:20:36,150
doesn't mean I can do anything but it

481
00:20:33,870 --> 00:20:39,570
just means I can give myself the ability

482
00:20:36,150 --> 00:20:40,590
to do anything right so sometimes you'll

483
00:20:39,570 --> 00:20:42,090
encounter an audit like some of the

484
00:20:40,590 --> 00:20:44,570
system special mode oh that's like route

485
00:20:42,090 --> 00:20:47,220
it's not like route it's more like

486
00:20:44,570 --> 00:20:49,830
someone has the ability to suit a route

487
00:20:47,220 --> 00:20:52,290
if they know the right command to type

488
00:20:49,830 --> 00:20:53,879
that's what system specialized system

489
00:20:52,290 --> 00:20:56,280
operations are the best it literally

490
00:20:53,880 --> 00:20:58,440
lets you touch read edit access any file

491
00:20:56,280 --> 00:21:01,230
and the logic flow in rack F is quite

492
00:20:58,440 --> 00:21:03,540
literally is it operations okay I'm not

493
00:21:01,230 --> 00:21:08,780
gonna check anything else right because

494
00:21:03,540 --> 00:21:11,520
why would I bother okay virtual storage

495
00:21:08,780 --> 00:21:13,550
there's like six thousand pages

496
00:21:11,520 --> 00:21:15,410
documenting everything that's in memory

497
00:21:13,550 --> 00:21:18,450
everything that's in memory is

498
00:21:15,410 --> 00:21:20,070
documented very clearly you know and I'm

499
00:21:18,450 --> 00:21:21,330
I'm telling you all this stuff because

500
00:21:20,070 --> 00:21:22,530
it's important later when we start

501
00:21:21,330 --> 00:21:27,149
breaking this apart okay

502
00:21:22,530 --> 00:21:29,430
so very important virtual storage is

503
00:21:27,150 --> 00:21:31,530
amazing but there's a lot of

504
00:21:29,430 --> 00:21:34,700
documentation and I have maybe read 12

505
00:21:31,530 --> 00:21:34,700
pages of it okay

506
00:21:34,850 --> 00:21:41,810
alrighty APF you heard me say ap have

507
00:21:38,490 --> 00:21:44,190
authorized it's basically a folder and

508
00:21:41,810 --> 00:21:47,100
anything in that folder and yes main

509
00:21:44,190 --> 00:21:49,140
framers I know it's a date PDS it's a

510
00:21:47,100 --> 00:21:51,810
folder anything in that folder is

511
00:21:49,140 --> 00:21:54,900
essentially ring 0 it's a program that

512
00:21:51,810 --> 00:21:56,399
runs with the capability of getting into

513
00:21:54,900 --> 00:22:00,330
ring 0 without having to do anything

514
00:21:56,400 --> 00:22:02,190
special it's not UID 0 it doesn't give

515
00:22:00,330 --> 00:22:05,720
you like set UID but it gives you the

516
00:22:02,190 --> 00:22:08,250
ability to change any region in memory

517
00:22:05,720 --> 00:22:10,260
we'll get to why that's important in a

518
00:22:08,250 --> 00:22:15,780
second because we just talked about rack

519
00:22:10,260 --> 00:22:18,870
F and rack F when you log in takes your

520
00:22:15,780 --> 00:22:20,850
access rights from the database and puts

521
00:22:18,870 --> 00:22:23,429
it into a place in memory that's right

522
00:22:20,850 --> 00:22:25,830
protected so you as a normal user cannot

523
00:22:23,430 --> 00:22:29,250
change it and then when you go to access

524
00:22:25,830 --> 00:22:31,080
a file it doesn't go to the database it

525
00:22:29,250 --> 00:22:33,180
checks your memory to see if you're

526
00:22:31,080 --> 00:22:35,669
allowed access to the file right to save

527
00:22:33,180 --> 00:22:39,870
on CPU cycles and all that stuff so if

528
00:22:35,670 --> 00:22:41,130
we can change our memory then we can

529
00:22:39,870 --> 00:22:44,100
give ourselves access to whatever we

530
00:22:41,130 --> 00:22:47,700
want in fact special and operations is

531
00:22:44,100 --> 00:22:50,280
one bit each in memory and if you can

532
00:22:47,700 --> 00:22:52,160
change those two bits you can

533
00:22:50,280 --> 00:22:54,060
effectively own the entire mainframe

534
00:22:52,160 --> 00:22:56,280
I'll show you how to do that when we get

535
00:22:54,060 --> 00:23:00,389
to the demo section okay kicks the

536
00:22:56,280 --> 00:23:01,770
customer information control system I

537
00:23:00,390 --> 00:23:04,260
like to say it's websites before

538
00:23:01,770 --> 00:23:06,270
websites existed their transactions they

539
00:23:04,260 --> 00:23:09,570
have four characters this is what kicks

540
00:23:06,270 --> 00:23:12,030
looks like it's like websites before

541
00:23:09,570 --> 00:23:14,580
websites existed okay you give it a four

542
00:23:12,030 --> 00:23:18,710
character transaction already now some

543
00:23:14,580 --> 00:23:18,710
for the price a little break here

544
00:23:19,100 --> 00:23:27,770
literally anyone yell it out just like I

545
00:23:23,940 --> 00:23:31,320
even the dumbest guess it is not memory

546
00:23:27,770 --> 00:23:32,940
it's so obviously not memory why would

547
00:23:31,320 --> 00:23:34,350
you think it's memory who yelled out

548
00:23:32,940 --> 00:23:36,690
memory I'll give you the prize anyways

549
00:23:34,350 --> 00:23:44,719
thank you all right so it's actually

550
00:23:36,690 --> 00:23:48,720
UNIX so omes refers to UNIX just UNIX

551
00:23:44,720 --> 00:23:51,960
the UNIX runs all networking on your

552
00:23:48,720 --> 00:23:54,090
mainframe so there is a UNIX part so

553
00:23:51,960 --> 00:23:57,090
just like you log into TSO you can SSH

554
00:23:54,090 --> 00:24:00,600
into Unix UNIX runs Java runs all web

555
00:23:57,090 --> 00:24:02,580
stuff unless it's Rex it allows you to

556
00:24:00,600 --> 00:24:05,429
do all kinds of cool stuff but it's look

557
00:24:02,580 --> 00:24:10,199
it's quite literally just Unix this is

558
00:24:05,430 --> 00:24:12,750
it nothing special in fact I call it and

559
00:24:10,200 --> 00:24:15,030
people call it OMB s not open multiple

560
00:24:12,750 --> 00:24:15,840
virtual storage because that doesn't

561
00:24:15,030 --> 00:24:17,879
make any sense

562
00:24:15,840 --> 00:24:18,750
so they call it OBS or UNIX system

563
00:24:17,880 --> 00:24:23,820
services

564
00:24:18,750 --> 00:24:26,190
is his eunuchs but you also run Rex from

565
00:24:23,820 --> 00:24:28,290
eunuchs that's in TSO so for example

566
00:24:26,190 --> 00:24:31,380
here's the exact same thing

567
00:24:28,290 --> 00:24:33,600
Rex script we ran earlier in JCL we ran

568
00:24:31,380 --> 00:24:36,090
it in TSO and now we're able to run it

569
00:24:33,600 --> 00:24:38,219
in eunuchs by just passing the /bin

570
00:24:36,090 --> 00:24:40,409
slash TSO command and then whatever TSO

571
00:24:38,220 --> 00:24:42,330
command we want to run right so it's

572
00:24:40,410 --> 00:24:45,240
it's easy to get around the operating

573
00:24:42,330 --> 00:24:46,830
system from various locations right and

574
00:24:45,240 --> 00:24:48,500
TSO has the same thing there's a whole

575
00:24:46,830 --> 00:24:54,179
bunch of commands in TSO that will run

576
00:24:48,500 --> 00:24:58,020
things in in the UNIX environment it's

577
00:24:54,180 --> 00:25:00,480
like Oh shallow commands alright so you

578
00:24:58,020 --> 00:25:02,490
can actually also run UNIX stuff in JCL

579
00:25:00,480 --> 00:25:05,270
so just like we could run TSO commands

580
00:25:02,490 --> 00:25:07,500
you can also run Unix commands in JCL

581
00:25:05,270 --> 00:25:08,879
this is this is very important to

582
00:25:07,500 --> 00:25:11,450
understand that you can run commands

583
00:25:08,880 --> 00:25:15,210
through JCL because for whatever reason

584
00:25:11,450 --> 00:25:18,180
there is this really cool feature that

585
00:25:15,210 --> 00:25:20,700
IBM implemented on the ftp server that

586
00:25:18,180 --> 00:25:24,450
when you that allows you to switch into

587
00:25:20,700 --> 00:25:27,060
what's called J's mode okay so you can

588
00:25:24,450 --> 00:25:29,310
switch into J's mode and any time you

589
00:25:27,060 --> 00:25:31,710
upload a file now through FTP instead of

590
00:25:29,310 --> 00:25:34,260
going to the file system it's gonna go

591
00:25:31,710 --> 00:25:37,590
to the job execution system and run your

592
00:25:34,260 --> 00:25:38,850
job so if you have a mainframe I'm

593
00:25:37,590 --> 00:25:41,459
assuming some people do in their

594
00:25:38,850 --> 00:25:42,629
corporate environment probably want to

595
00:25:41,460 --> 00:25:44,330
check who they're letting you're letting

596
00:25:42,630 --> 00:25:47,520
FTP from the outside into your mainframe

597
00:25:44,330 --> 00:25:49,439
because even if you blocked out access

598
00:25:47,520 --> 00:25:54,990
for everything else I can still submit

599
00:25:49,440 --> 00:25:56,940
jobs for FTP Network job entry look I'm

600
00:25:54,990 --> 00:25:57,780
swear I'd like put the next slide we're

601
00:25:56,940 --> 00:25:59,490
gonna get into fun stuff

602
00:25:57,780 --> 00:26:02,370
okay so bear with me it's like one more

603
00:25:59,490 --> 00:26:05,400
slide okay if one looks so dour or

604
00:26:02,370 --> 00:26:08,790
everyone's just super day hungover so

605
00:26:05,400 --> 00:26:11,220
Network job entry so long the only thing

606
00:26:08,790 --> 00:26:13,050
to know here is when two nodes like you

607
00:26:11,220 --> 00:26:15,600
have two mainframes on your environment

608
00:26:13,050 --> 00:26:18,090
you use network job entry to submit jobs

609
00:26:15,600 --> 00:26:20,100
between the two why would you do that

610
00:26:18,090 --> 00:26:21,570
because switching mainframes is a pain

611
00:26:20,100 --> 00:26:23,399
in the butt and it's easier just to say

612
00:26:21,570 --> 00:26:25,470
I have a job I want it to run on four

613
00:26:23,400 --> 00:26:27,179
mainframes so I'm gonna just change one

614
00:26:25,470 --> 00:26:28,470
line and that that JCL and it's gonna

615
00:26:27,179 --> 00:26:30,570
run on the different mainframe every

616
00:26:28,470 --> 00:26:32,090
time it's the only real interesting

617
00:26:30,570 --> 00:26:33,950
that's really really key thing to

618
00:26:32,090 --> 00:26:35,869
before we start breaking it apartment

619
00:26:33,950 --> 00:26:37,789
okay so let's network job entry it

620
00:26:35,869 --> 00:26:41,090
allows mainframes to submit jobs on

621
00:26:37,789 --> 00:26:42,019
other mainframes if you have if you're

622
00:26:41,090 --> 00:26:43,549
letting your clients like

623
00:26:42,019 --> 00:26:45,229
business-to-business submit jobs through

624
00:26:43,549 --> 00:26:48,259
Network job entry we definitely need to

625
00:26:45,229 --> 00:26:52,729
talk later because that's not good

626
00:26:48,259 --> 00:26:54,229
okay now the fun begins cuz now I'm

627
00:26:52,729 --> 00:26:58,340
gonna talk about stuff everyone in the

628
00:26:54,229 --> 00:27:02,029
room the room understands right so we're

629
00:26:58,340 --> 00:27:04,728
gonna talk about using nmap to map out a

630
00:27:02,029 --> 00:27:07,340
system to understand and use all these

631
00:27:04,729 --> 00:27:09,859
scripts that I wrote to map it out like

632
00:27:07,340 --> 00:27:10,369
hydros like just use Hydra to do

633
00:27:09,859 --> 00:27:12,590
brute-forcing

634
00:27:10,369 --> 00:27:14,959
nothing fancy a little tie up kick spawn

635
00:27:12,590 --> 00:27:17,418
was just super cool tool who here knew

636
00:27:14,960 --> 00:27:22,190
that Metasploit had some mainframe

637
00:27:17,419 --> 00:27:26,720
exploits in it there's three people who

638
00:27:22,190 --> 00:27:27,889
took the class come on thank you God and

639
00:27:26,720 --> 00:27:29,830
then we're gonna talk about network

640
00:27:27,889 --> 00:27:33,228
we're going to talk about injecting jobs

641
00:27:29,830 --> 00:27:34,939
using the network job entry subsystem so

642
00:27:33,229 --> 00:27:36,739
so we're gonna talk about for the next

643
00:27:34,940 --> 00:27:40,970
like like half an hour

644
00:27:36,739 --> 00:27:45,200
all right so and map into in like twenty

645
00:27:40,970 --> 00:27:47,049
fifteen I created a Lua library that is

646
00:27:45,200 --> 00:27:50,960
eighteen thirty to seventy emulator

647
00:27:47,049 --> 00:27:53,149
because nmap only talks Lua and I had a

648
00:27:50,960 --> 00:27:57,080
lot of free time I guess so I did this

649
00:27:53,149 --> 00:27:58,459
and it was finally accepted into the so

650
00:27:57,080 --> 00:28:00,499
this is in your end map if you have Kali

651
00:27:58,460 --> 00:28:03,440
on your laptop right now this is all

652
00:28:00,499 --> 00:28:05,029
there this is not like super new but it

653
00:28:03,440 --> 00:28:07,549
lets us do cool stuff like TSO user

654
00:28:05,029 --> 00:28:09,169
enumeration kicks transaction ID

655
00:28:07,549 --> 00:28:13,039
brute-forcing so remember I said kicks

656
00:28:09,169 --> 00:28:14,659
for characters for characters though

657
00:28:13,039 --> 00:28:16,279
I've actually done this I've enumerated

658
00:28:14,659 --> 00:28:18,309
the entire character space on an

659
00:28:16,279 --> 00:28:20,960
enterprise mainframe it took three days

660
00:28:18,309 --> 00:28:22,158
but then I knew exactly every single

661
00:28:20,960 --> 00:28:25,429
transaction ID that was on that system

662
00:28:22,159 --> 00:28:26,929
because I was using kicks enumeration V

663
00:28:25,429 --> 00:28:29,149
Tam application ID enumeration so

664
00:28:26,929 --> 00:28:32,029
remember I told you v Tam has a command

665
00:28:29,149 --> 00:28:34,008
the logon Apple ID whatever you don't

666
00:28:32,029 --> 00:28:36,409
know what the application IDs are they

667
00:28:34,009 --> 00:28:38,869
don't tell you so I wrote a script that

668
00:28:36,409 --> 00:28:40,549
tries to numerate them all or you can

669
00:28:38,869 --> 00:28:43,609
just go read their logon documentation

670
00:28:40,549 --> 00:28:45,410
will tell you and then gathering kicks

671
00:28:43,609 --> 00:28:47,000
information so that script goes and

672
00:28:45,410 --> 00:28:49,190
uses one of the transactions instead of

673
00:28:47,000 --> 00:28:50,810
trying to brute force the names you can

674
00:28:49,190 --> 00:28:53,060
use it and it'll just dump all the names

675
00:28:50,810 --> 00:28:58,850
to the screen for you so how do we do

676
00:28:53,060 --> 00:29:04,010
vtm enumeration so typically if you want

677
00:28:58,850 --> 00:29:08,929
to find kicks TSO db2 IMS they're gonna

678
00:29:04,010 --> 00:29:11,360
use a common name TS l1 TSO dev let's go

679
00:29:08,930 --> 00:29:14,720
start with TSO kicks they always start

680
00:29:11,360 --> 00:29:16,070
with kicks or maybe CIC they could only

681
00:29:14,720 --> 00:29:18,470
be eight characters long so they get

682
00:29:16,070 --> 00:29:21,379
kind of creative but they try to keep it

683
00:29:18,470 --> 00:29:22,730
simple so the best place to find that

684
00:29:21,380 --> 00:29:25,370
information to be honest is to just go

685
00:29:22,730 --> 00:29:27,860
look on SharePoint for user guides and

686
00:29:25,370 --> 00:29:30,169
then you can see like there'll be one

687
00:29:27,860 --> 00:29:33,860
that's like okay to log into our HR

688
00:29:30,170 --> 00:29:35,690
system type log on Apple ID kicks HR 1

689
00:29:33,860 --> 00:29:40,189
you know cool so then I'm going to try

690
00:29:35,690 --> 00:29:41,570
kake's HR 1 through 99 kicks HR d for

691
00:29:40,190 --> 00:29:44,960
dev like I'm just gonna try to numerate

692
00:29:41,570 --> 00:29:48,020
the entire space this is it I mean

693
00:29:44,960 --> 00:29:50,060
that's literally all it takes Kix has a

694
00:29:48,020 --> 00:29:53,060
whole bunch of scripts that exist so you

695
00:29:50,060 --> 00:29:55,429
can do cakes enumeration kicks

696
00:29:53,060 --> 00:29:57,800
brute-forcing and kicks info IBM pushed

697
00:29:55,430 --> 00:30:01,340
out of fix quietly that prevents me from

698
00:29:57,800 --> 00:30:05,930
doing user enumeration so that was good

699
00:30:01,340 --> 00:30:07,070
found that out like two weeks ago TSO so

700
00:30:05,930 --> 00:30:11,680
what's cool about TSO is you can

701
00:30:07,070 --> 00:30:13,730
actually do user enumeration in TSO

702
00:30:11,680 --> 00:30:16,100
because the I'll show you I'm actually

703
00:30:13,730 --> 00:30:19,070
going to do some live demos you actually

704
00:30:16,100 --> 00:30:22,909
when the logon process it tells you if

705
00:30:19,070 --> 00:30:24,590
you fat-fingered your user ID so i just

706
00:30:22,910 --> 00:30:27,200
use that to enumerate the entire user

707
00:30:24,590 --> 00:30:28,699
space and it takes like like 10 minutes

708
00:30:27,200 --> 00:30:30,500
I've done it before I've done in

709
00:30:28,700 --> 00:30:33,880
multiple places now you just get the

710
00:30:30,500 --> 00:30:37,970
whole user ID list in 10 minutes

711
00:30:33,880 --> 00:30:40,940
FTP so typically what we'll do is once

712
00:30:37,970 --> 00:30:43,750
I've identified accounts in TSO I'll use

713
00:30:40,940 --> 00:30:46,220
Hydra to brute-force the passwords in

714
00:30:43,750 --> 00:30:48,740
FTP there's much faster than in map and

715
00:30:46,220 --> 00:30:52,730
then I'll use that and Metasploit

716
00:30:48,740 --> 00:30:55,430
together to get a reverse shell because

717
00:30:52,730 --> 00:30:57,280
remember if I can submit jobs through

718
00:30:55,430 --> 00:30:59,620
FTP

719
00:30:57,280 --> 00:31:04,000
because I can issue the site file equals

720
00:30:59,620 --> 00:31:06,189
J's command now when I upload that JCL

721
00:31:04,000 --> 00:31:10,030
it'll execute as the user I'm logged

722
00:31:06,190 --> 00:31:11,650
into FTP with now we didn't talk about

723
00:31:10,030 --> 00:31:13,950
kick so we sort of said kicks is like an

724
00:31:11,650 --> 00:31:18,910
application server like a web app maybe

725
00:31:13,950 --> 00:31:23,190
in kicks if you have access to the cci

726
00:31:18,910 --> 00:31:26,770
transaction you can actually upload code

727
00:31:23,190 --> 00:31:30,010
like JCL into the internal reader and

728
00:31:26,770 --> 00:31:33,850
when you do that it'll execute the code

729
00:31:30,010 --> 00:31:36,760
the JCL and it runs it as the

730
00:31:33,850 --> 00:31:40,330
application ID of the kicks region

731
00:31:36,760 --> 00:31:41,890
that's running so very similar to how if

732
00:31:40,330 --> 00:31:43,449
you could do like a local file include

733
00:31:41,890 --> 00:31:45,790
or some kind of vulnerability on a web

734
00:31:43,450 --> 00:31:47,050
server that is the exact same thing

735
00:31:45,790 --> 00:31:48,970
we're doing here and I'll show you

736
00:31:47,050 --> 00:31:51,610
exactly what it looks like so I you

737
00:31:48,970 --> 00:31:53,290
built this tool it's it's super it's

738
00:31:51,610 --> 00:31:55,689
look but just look how impressive that

739
00:31:53,290 --> 00:31:59,590
is look how many options there are to

740
00:31:55,690 --> 00:32:03,700
pass any questions about the options let

741
00:31:59,590 --> 00:32:05,230
me know great so basically what you do

742
00:32:03,700 --> 00:32:08,410
is like you don't have to pass all these

743
00:32:05,230 --> 00:32:10,150
it's really really good so but this is

744
00:32:08,410 --> 00:32:14,080
me using kicks pone to just gather

745
00:32:10,150 --> 00:32:19,090
system information nice you can see we

746
00:32:14,080 --> 00:32:21,610
have access to the camtc dACC iccs CBR

747
00:32:19,090 --> 00:32:27,370
these are all the built-in transactions

748
00:32:21,610 --> 00:32:28,959
from IBM you can see it tells us the

749
00:32:27,370 --> 00:32:31,510
version of the operating system it tells

750
00:32:28,960 --> 00:32:34,270
us all kinds of information also it

751
00:32:31,510 --> 00:32:38,200
tells us the user ID that is the default

752
00:32:34,270 --> 00:32:41,200
kicks user now what gets really cool so

753
00:32:38,200 --> 00:32:43,390
I show you the next demo here when we're

754
00:32:41,200 --> 00:32:46,540
logged in we are not on the system as

755
00:32:43,390 --> 00:32:50,260
kicks user we're on the system as the

756
00:32:46,540 --> 00:32:52,120
program that's running kicks to start a

757
00:32:50,260 --> 00:32:54,040
test so here we go so kicks pone kicks

758
00:32:52,120 --> 00:32:56,860
pone has the ability and let this will

759
00:32:54,040 --> 00:32:59,139
loop a couple of times so kicks pone has

760
00:32:56,860 --> 00:33:01,929
a option that you could pass it that

761
00:32:59,140 --> 00:33:05,800
takes a job and ayub has created a bunch

762
00:33:01,930 --> 00:33:09,190
of jobs and one is called direct TSO so

763
00:33:05,800 --> 00:33:13,120
you launch kicks pone it connects

764
00:33:09,190 --> 00:33:15,940
uploads the JCL the JCL has a rec script

765
00:33:13,120 --> 00:33:20,469
inside it that allows you to get a a

766
00:33:15,940 --> 00:33:22,810
bind or a verse shell in in kicks so

767
00:33:20,470 --> 00:33:26,230
here I'm doing a bind shell so I run it

768
00:33:22,810 --> 00:33:27,820
it's gonna upload it's a bind TSO shell

769
00:33:26,230 --> 00:33:29,950
he actually has bind UNIX shells as well

770
00:33:27,820 --> 00:33:33,939
reverse unit shells and I'm gonna use

771
00:33:29,950 --> 00:33:36,280
net and cat to connect to that port so

772
00:33:33,940 --> 00:33:38,740
pour four four five now I'm TSO so I'm

773
00:33:36,280 --> 00:33:41,110
in the system's to7 if you look I listed

774
00:33:38,740 --> 00:33:42,520
the user here probably can't see it

775
00:33:41,110 --> 00:33:46,419
cause of all this garbage but my user ID

776
00:33:42,520 --> 00:33:48,670
a start one here and if you notice you

777
00:33:46,420 --> 00:33:50,440
might see this an attribute there's two

778
00:33:48,670 --> 00:33:53,680
attributes on that account one was

779
00:33:50,440 --> 00:33:55,600
protected and one was operation so

780
00:33:53,680 --> 00:33:58,440
operations means I can read any file now

781
00:33:55,600 --> 00:34:00,820
I can literally access any file I want

782
00:33:58,440 --> 00:34:02,920
protected is funny because protected

783
00:34:00,820 --> 00:34:05,439
means you can't actually log in and use

784
00:34:02,920 --> 00:34:06,790
the account interactively but if I can

785
00:34:05,440 --> 00:34:09,010
trick the operating system into running

786
00:34:06,790 --> 00:34:11,009
a job as that user I can execute

787
00:34:09,010 --> 00:34:12,940
whatever I want is that user so

788
00:34:11,010 --> 00:34:15,580
effectively with just kicks pulling I've

789
00:34:12,940 --> 00:34:18,060
owned the mainframe already Metasploit

790
00:34:15,580 --> 00:34:21,509
so these this is the only right now

791
00:34:18,060 --> 00:34:24,340
exploit and I and I call it an exploit

792
00:34:21,510 --> 00:34:26,770
but it's you're just using that the

793
00:34:24,340 --> 00:34:28,330
credentials and you're using what you

794
00:34:26,770 --> 00:34:29,889
want it like this you're just following

795
00:34:28,330 --> 00:34:31,270
the application process flow well we're

796
00:34:29,889 --> 00:34:33,339
using it in a way that I don't think

797
00:34:31,270 --> 00:34:35,590
people expected us to use it and when I

798
00:34:33,340 --> 00:34:36,220
say we I did not write that it was all

799
00:34:35,590 --> 00:34:38,080
Chad

800
00:34:36,219 --> 00:34:39,969
so Chad reckon street or at beginning in

801
00:34:38,080 --> 00:34:42,250
smalls definitely followed him on

802
00:34:39,969 --> 00:34:43,449
Twitter the world's greatest mainframe

803
00:34:42,250 --> 00:34:46,630
hacker he'll get a kick of me saying

804
00:34:43,449 --> 00:34:50,649
that but he wrote all this he actually

805
00:34:46,630 --> 00:34:52,450
had to add a z/os architecture to

806
00:34:50,650 --> 00:34:54,490
Metasploit to get it to work and again

807
00:34:52,449 --> 00:34:56,649
if you run Kali or you install

808
00:34:54,489 --> 00:34:58,299
Metasploit today it's included with

809
00:34:56,650 --> 00:35:00,700
Metasploit so you can just this is just

810
00:34:58,300 --> 00:35:02,560
part of your toolset now there's like a

811
00:35:00,700 --> 00:35:04,149
handful of payloads there's like a

812
00:35:02,560 --> 00:35:07,480
buying shell reverse shell this is a

813
00:35:04,150 --> 00:35:09,520
full-on unit shell and then there's

814
00:35:07,480 --> 00:35:13,960
generic JCL if you just want to upload

815
00:35:09,520 --> 00:35:17,560
whatever JCL it's just Metasploit see

816
00:35:13,960 --> 00:35:19,120
Metasploit but now I'm in UNIX so

817
00:35:17,560 --> 00:35:23,490
instead of being in TSO like we were for

818
00:35:19,120 --> 00:35:25,720
kicks pone this gives me a shell in Unix

819
00:35:23,490 --> 00:35:28,089
you can see I can run all kinds of stuff

820
00:35:25,720 --> 00:35:30,129
I can run netstat I can search for

821
00:35:28,090 --> 00:35:34,150
datasets in warning mode I can do all

822
00:35:30,130 --> 00:35:37,359
kinds of stuff okay so remember I talked

823
00:35:34,150 --> 00:35:39,160
about network job entry and how network

824
00:35:37,359 --> 00:35:41,590
job entry is used to send jobs from one

825
00:35:39,160 --> 00:35:42,460
main frame to another main frame and you

826
00:35:41,590 --> 00:35:43,599
might thinking like well how do they

827
00:35:42,460 --> 00:35:46,000
authenticate and they do all that stuff

828
00:35:43,599 --> 00:35:49,480
they quite literally if you know the

829
00:35:46,000 --> 00:35:53,230
name of the two nodes then you can

830
00:35:49,480 --> 00:35:54,700
impersonate both nodes because the

831
00:35:53,230 --> 00:35:56,440
authentication is quite literally you go

832
00:35:54,700 --> 00:36:00,040
up to a mainframe with Python you say

833
00:35:56,440 --> 00:36:02,080
hey I know that your name is smog and my

834
00:36:00,040 --> 00:36:06,910
name is water and then the mainframe

835
00:36:02,080 --> 00:36:11,920
smog goes cool come on in you know the

836
00:36:06,910 --> 00:36:13,629
secret word part of network job entry

837
00:36:11,920 --> 00:36:15,040
and this only works for trusted notes so

838
00:36:13,630 --> 00:36:16,920
if you've got a but no one has really

839
00:36:15,040 --> 00:36:20,320
super complicated node security

840
00:36:16,920 --> 00:36:23,500
basically if I can connect as a node in

841
00:36:20,320 --> 00:36:26,650
your mainframe node Network I can send

842
00:36:23,500 --> 00:36:29,400
jobs to any node in that network using

843
00:36:26,650 --> 00:36:32,560
Python script but what's cool is I

844
00:36:29,400 --> 00:36:35,109
control the header for the for the jobs

845
00:36:32,560 --> 00:36:37,200
like before the job part and I can

846
00:36:35,109 --> 00:36:40,869
control which user is submitting the job

847
00:36:37,200 --> 00:36:42,368
so when I connect and the job goes in it

848
00:36:40,869 --> 00:36:44,410
goes in as a user that I control so I

849
00:36:42,369 --> 00:36:46,720
just say the most privileged user on the

850
00:36:44,410 --> 00:36:48,629
planet and run commands and do whatever

851
00:36:46,720 --> 00:36:51,189
I want so here's an example of me

852
00:36:48,630 --> 00:36:52,599
running like using the Python library

853
00:36:51,190 --> 00:36:54,940
it's gonna have debug on so it's gonna

854
00:36:52,599 --> 00:36:57,490
look like a ton of information but I'm

855
00:36:54,940 --> 00:36:59,200
gonna connect with network job entry and

856
00:36:57,490 --> 00:37:01,330
let's see here and it's gonna submit

857
00:36:59,200 --> 00:37:04,629
it's gonna actually run a J's to command

858
00:37:01,330 --> 00:37:07,150
a simple one because I'm just

859
00:37:04,630 --> 00:37:08,800
demonstrating that it works but you can

860
00:37:07,150 --> 00:37:11,410
do crazy complicated things with this it

861
00:37:08,800 --> 00:37:14,220
actually comes with a Python script that

862
00:37:11,410 --> 00:37:16,540
will submit JCL as any user you want

863
00:37:14,220 --> 00:37:17,680
into whatever that node so this is just

864
00:37:16,540 --> 00:37:18,910
running a test - I look I didn't

865
00:37:17,680 --> 00:37:20,830
authenticate at all I didn't don't need

866
00:37:18,910 --> 00:37:24,190
to know a password or anything now you

867
00:37:20,830 --> 00:37:26,770
can set a password on your nodes in the

868
00:37:24,190 --> 00:37:29,710
J's - configuration file call the parm

869
00:37:26,770 --> 00:37:32,290
live people predominate don't do that

870
00:37:29,710 --> 00:37:34,869
and if they do the password is actually

871
00:37:32,290 --> 00:37:35,770
in the configuration file so if you can

872
00:37:34,869 --> 00:37:39,100
read the configuration file

873
00:37:35,770 --> 00:37:45,340
gonna be the password ok so cool we got

874
00:37:39,100 --> 00:37:46,420
a shell cool now what it's time for

875
00:37:45,340 --> 00:37:48,400
enumeration and privileged escalation

876
00:37:46,420 --> 00:37:52,690
yet come on guys come on I know it's the

877
00:37:48,400 --> 00:37:55,110
last talk hey there thank you try to get

878
00:37:52,690 --> 00:37:57,160
some blood flow everyone looks so dour

879
00:37:55,110 --> 00:37:58,180
no like oh my god are you telling me

880
00:37:57,160 --> 00:38:00,399
this is what controls our whole

881
00:37:58,180 --> 00:38:02,770
infrastructure Oh No

882
00:38:00,400 --> 00:38:05,410
so first of all I try to live off the

883
00:38:02,770 --> 00:38:07,240
land IPL info shows eos shows these are

884
00:38:05,410 --> 00:38:09,730
the commands i typically run it dumps a

885
00:38:07,240 --> 00:38:13,180
crap ton of information on my screen IPL

886
00:38:09,730 --> 00:38:14,530
info use type IPL info and it dumps

887
00:38:13,180 --> 00:38:15,520
literally everything you wanted to know

888
00:38:14,530 --> 00:38:18,610
about the operating system to your

889
00:38:15,520 --> 00:38:22,180
screen right just tons and tons and tons

890
00:38:18,610 --> 00:38:23,740
of information same thing with show z/os

891
00:38:22,180 --> 00:38:25,750
so these are - these are actually open

892
00:38:23,740 --> 00:38:28,029
source programs that people have written

893
00:38:25,750 --> 00:38:30,580
and most shops have installed them I

894
00:38:28,030 --> 00:38:32,680
don't know why I don't know why I as a

895
00:38:30,580 --> 00:38:34,360
pretend developer user need to know all

896
00:38:32,680 --> 00:38:36,160
the details about the operating system

897
00:38:34,360 --> 00:38:39,520
that I couldn't just ask them what for

898
00:38:36,160 --> 00:38:42,160
but whatever there's other commands that

899
00:38:39,520 --> 00:38:43,690
we run list users so Lu so you know when

900
00:38:42,160 --> 00:38:45,310
you connecting you type you like I don't

901
00:38:43,690 --> 00:38:47,470
know what my user ID is and you type ID

902
00:38:45,310 --> 00:38:50,920
to see who you are like what's your UID

903
00:38:47,470 --> 00:38:52,720
is same thing type L you in rack F it

904
00:38:50,920 --> 00:38:54,850
shows you all this detail but user ID

905
00:38:52,720 --> 00:38:57,609
like what's your like what attributes

906
00:38:54,850 --> 00:38:59,740
you have all kinds of stuff then I'm

907
00:38:57,610 --> 00:39:02,410
gonna look for like I can use I our DD N

908
00:38:59,740 --> 00:39:06,459
or DD list to look at the path variable

909
00:39:02,410 --> 00:39:08,770
this is an actual usable attack on the

910
00:39:06,460 --> 00:39:10,030
mainframe sometimes you know like in the

911
00:39:08,770 --> 00:39:11,800
path variable if I can control that

912
00:39:10,030 --> 00:39:14,950
variable like if I can edit a user's

913
00:39:11,800 --> 00:39:16,870
like bash RC I can put a folder that I

914
00:39:14,950 --> 00:39:18,700
own has the first fold of the search for

915
00:39:16,870 --> 00:39:20,710
same thing can happen on the mainframe

916
00:39:18,700 --> 00:39:22,270
it's not called path it's called dataset

917
00:39:20,710 --> 00:39:26,560
concatenations but you can definitely do

918
00:39:22,270 --> 00:39:29,170
that the thing is that list is usually

919
00:39:26,560 --> 00:39:30,460
quite large and if I can edit a data set

920
00:39:29,170 --> 00:39:33,010
that's higher out like a file that's

921
00:39:30,460 --> 00:39:34,360
higher up on the list and I know people

922
00:39:33,010 --> 00:39:36,370
are using programs that are further down

923
00:39:34,360 --> 00:39:39,250
the list I just drop a malicious program

924
00:39:36,370 --> 00:39:40,690
in the upper area and now I can wait for

925
00:39:39,250 --> 00:39:43,390
users to log on and now I have like a

926
00:39:40,690 --> 00:39:46,690
bunch of river shells and then that's at

927
00:39:43,390 --> 00:39:48,009
like it's this net set you could use the

928
00:39:46,690 --> 00:39:49,370
tool that I wrote so I wrote this tool

929
00:39:48,010 --> 00:39:51,980
last year to

930
00:39:49,370 --> 00:39:54,920
you help me enumerate things on the

931
00:39:51,980 --> 00:39:56,990
mainframe so things that I care about so

932
00:39:54,920 --> 00:39:58,870
it's it's just called enum I'm not very

933
00:39:56,990 --> 00:40:01,490
creative and you only get 8 characters

934
00:39:58,870 --> 00:40:03,319
so you run it and it has all this

935
00:40:01,490 --> 00:40:05,089
information you can display all the APF

936
00:40:03,320 --> 00:40:07,550
authorized libraries you can display

937
00:40:05,090 --> 00:40:09,770
information with the security system so

938
00:40:07,550 --> 00:40:12,530
for example here I am displaying

939
00:40:09,770 --> 00:40:15,080
information about this setup of the

940
00:40:12,530 --> 00:40:16,550
security because all this information

941
00:40:15,080 --> 00:40:20,450
remember I was harping on you there's

942
00:40:16,550 --> 00:40:22,820
6,000 pages for storage information all

943
00:40:20,450 --> 00:40:24,680
this information is in memory so my

944
00:40:22,820 --> 00:40:27,260
script is not touching files it's

945
00:40:24,680 --> 00:40:28,790
touching memory and I'm allowed to read

946
00:40:27,260 --> 00:40:30,800
all that memory this does not generate

947
00:40:28,790 --> 00:40:34,190
any alerts this does not generate any

948
00:40:30,800 --> 00:40:35,330
warnings it's silent and I could profile

949
00:40:34,190 --> 00:40:37,640
the system and get information that I

950
00:40:35,330 --> 00:40:40,910
want and I have a whole bunch of other

951
00:40:37,640 --> 00:40:43,009
tools that I've created access so access

952
00:40:40,910 --> 00:40:45,680
will check access your access to a file

953
00:40:43,010 --> 00:40:47,180
but it does it quietly instead of trying

954
00:40:45,680 --> 00:40:49,009
to run a command to check your access

955
00:40:47,180 --> 00:40:51,169
it's actually assembler let's you'll see

956
00:40:49,010 --> 00:40:52,880
in a second a PF check same thing but it

957
00:40:51,170 --> 00:40:56,870
just gets all the AP of authorized

958
00:40:52,880 --> 00:40:59,510
libraries and tries to figure out do you

959
00:40:56,870 --> 00:41:02,299
have access to one of them quietly cat

960
00:40:59,510 --> 00:41:04,630
map maps out all the files on the entire

961
00:41:02,300 --> 00:41:06,800
file system and tells you what they are

962
00:41:04,630 --> 00:41:08,660
takes a while I did it once on a

963
00:41:06,800 --> 00:41:12,530
production mainframe and I got a 350 Meg

964
00:41:08,660 --> 00:41:14,089
file back just filenames huge and then

965
00:41:12,530 --> 00:41:15,140
sits on so remember I said you use like

966
00:41:14,090 --> 00:41:16,820
DD List time how about your path

967
00:41:15,140 --> 00:41:18,230
variable just I wrote a tool called

968
00:41:16,820 --> 00:41:19,670
sissone that puts in a nice little

969
00:41:18,230 --> 00:41:23,420
visible table and you can see exactly

970
00:41:19,670 --> 00:41:25,610
what ones you have alter access to so

971
00:41:23,420 --> 00:41:28,670
here I am using access remember you have

972
00:41:25,610 --> 00:41:32,360
to call a compiled program so I'm

973
00:41:28,670 --> 00:41:33,920
calling access and I enter don't worry

974
00:41:32,360 --> 00:41:35,300
about the specifics for volume I really

975
00:41:33,920 --> 00:41:36,230
don't have time to get into it but you

976
00:41:35,300 --> 00:41:38,240
have to enter the file name of the

977
00:41:36,230 --> 00:41:41,570
volume and you can see I have alter

978
00:41:38,240 --> 00:41:43,819
access to that file right user dot C

979
00:41:41,570 --> 00:41:45,830
list happens to be the first program

980
00:41:43,820 --> 00:41:48,430
that people run when they log in now I

981
00:41:45,830 --> 00:41:51,799
can control people's login process

982
00:41:48,430 --> 00:41:53,600
access Oh a PF check is gonna check my

983
00:41:51,800 --> 00:41:56,240
access to all the AP a father eyes

984
00:41:53,600 --> 00:41:58,610
libraries if I have read or better or if

985
00:41:56,240 --> 00:42:01,129
I have all update or better on any of

986
00:41:58,610 --> 00:42:03,350
these I can contort a control of your

987
00:42:01,130 --> 00:42:05,150
mainframe now when I said these

988
00:42:03,350 --> 00:42:08,420
quietly it's because they're using a

989
00:42:05,150 --> 00:42:10,190
request in Iraq route and it may or make

990
00:42:08,420 --> 00:42:13,070
depending how you set it up may or may

991
00:42:10,190 --> 00:42:15,500
not leave a record of you checking your

992
00:42:13,070 --> 00:42:16,970
access it just depends on how most

993
00:42:15,500 --> 00:42:18,770
people haven't set up the granularity

994
00:42:16,970 --> 00:42:20,450
and their active database to check so

995
00:42:18,770 --> 00:42:22,040
whereas if you're running the commands

996
00:42:20,450 --> 00:42:25,149
for sure that's gonna generate an alert

997
00:42:22,040 --> 00:42:28,509
so this tries to quietly check access

998
00:42:25,150 --> 00:42:32,030
are you begin created this script

999
00:42:28,510 --> 00:42:36,050
Elvie that APF if you have write access

1000
00:42:32,030 --> 00:42:37,640
to a APF authorized library this program

1001
00:42:36,050 --> 00:42:41,720
gives you system special and system

1002
00:42:37,640 --> 00:42:43,339
operations literally run it give it a

1003
00:42:41,720 --> 00:42:45,529
data set hit enter

1004
00:42:43,340 --> 00:42:48,230
you've owned the mainframe it's how easy

1005
00:42:45,530 --> 00:42:50,140
it is there's all the options you pass

1006
00:42:48,230 --> 00:42:54,410
it right there's a whole bunch of flags

1007
00:42:50,140 --> 00:42:57,140
but Here I am I can check to see what

1008
00:42:54,410 --> 00:42:59,000
you have access rights to now typically

1009
00:42:57,140 --> 00:43:01,670
I don't use it because it's relying on

1010
00:42:59,000 --> 00:43:05,090
you having rack F to do that to do that

1011
00:43:01,670 --> 00:43:08,450
check I use a PF check to check my

1012
00:43:05,090 --> 00:43:10,790
access first and then I will use lva PF

1013
00:43:08,450 --> 00:43:11,180
to escalate my privileges what does it

1014
00:43:10,790 --> 00:43:15,259
do

1015
00:43:11,180 --> 00:43:17,480
it creates JCL that is a bunch of

1016
00:43:15,260 --> 00:43:20,060
assembler programming that escalates

1017
00:43:17,480 --> 00:43:25,420
your privileges submits the job job runs

1018
00:43:20,060 --> 00:43:29,360
comes back you've got super easy access

1019
00:43:25,420 --> 00:43:35,150
ok now let's see how are we on time we

1020
00:43:29,360 --> 00:43:39,460
got like what 15 minutes should we do

1021
00:43:35,150 --> 00:43:39,460
alive retry should we try let's see

1022
00:43:39,910 --> 00:43:51,470
alright here we go we're gonna ok so I

1023
00:43:46,940 --> 00:43:54,200
am in just a normal like normal UNIX box

1024
00:43:51,470 --> 00:43:56,990
nothing special so first thing I'm gonna

1025
00:43:54,200 --> 00:43:59,620
do see I'm actually did all of this

1026
00:43:56,990 --> 00:44:02,859
before because I'm super smart

1027
00:43:59,620 --> 00:44:02,859
see here

1028
00:44:04,550 --> 00:44:07,250
okay so the first thing I'm gonna do

1029
00:44:06,050 --> 00:44:11,870
remember I told you that you can

1030
00:44:07,250 --> 00:44:13,730
enumerate users in TSO so I'm going

1031
00:44:11,870 --> 00:44:19,640
connecting the TSO I'm gonna type TSO

1032
00:44:13,730 --> 00:44:21,560
here log on Apple ID TSO I'm saying type

1033
00:44:19,640 --> 00:44:25,370
Annie's name someone yell out a username

1034
00:44:21,560 --> 00:44:26,000
to try op er done opera Phil would work

1035
00:44:25,370 --> 00:44:30,470
that's not fair

1036
00:44:26,000 --> 00:44:32,750
ah per user ID opera is not authorized

1037
00:44:30,470 --> 00:44:36,020
to use TSO this is what I'm checking for

1038
00:44:32,750 --> 00:44:37,700
in nmap when I'm doing my Tia so log on

1039
00:44:36,020 --> 00:44:39,800
a numeration that's it's okay so first

1040
00:44:37,700 --> 00:44:43,759
thing I'm gonna do I need to find where

1041
00:44:39,800 --> 00:44:46,190
TSO is right sometimes it's not TSO so

1042
00:44:43,760 --> 00:44:50,660
I'm gonna use my feet and numeration

1043
00:44:46,190 --> 00:44:53,420
script in nmap to quickly enumerate all

1044
00:44:50,660 --> 00:44:55,250
the transaction IDs that's super fast so

1045
00:44:53,420 --> 00:44:57,700
you can see here now we found three

1046
00:44:55,250 --> 00:45:01,190
valid application IDs so we found TSO

1047
00:44:57,700 --> 00:45:03,350
zero six eight zero six TSO and kicks TS

1048
00:45:01,190 --> 00:45:04,820
52 first thing I do is try to see if

1049
00:45:03,350 --> 00:45:05,960
kicks is locked down if pics isn't

1050
00:45:04,820 --> 00:45:13,670
locked down then it's game over

1051
00:45:05,960 --> 00:45:20,930
so we'll do uh let's see so we'll run

1052
00:45:13,670 --> 00:45:22,340
the kicks info script and what this

1053
00:45:20,930 --> 00:45:23,990
script is gonna do it's gonna connect

1054
00:45:22,340 --> 00:45:26,690
into the mainframe and you can see here

1055
00:45:23,990 --> 00:45:29,419
I'm using the that runs I'm using kicks

1056
00:45:26,690 --> 00:45:31,190
TS 52 to run it right so remember we

1057
00:45:29,420 --> 00:45:33,890
found that we just found it in the vtm

1058
00:45:31,190 --> 00:45:36,170
step and now I have a list of every

1059
00:45:33,890 --> 00:45:38,839
single transaction that's on this and

1060
00:45:36,170 --> 00:45:40,790
enabled on this environment plus a whole

1061
00:45:38,840 --> 00:45:43,790
bunch of information I know because I

1062
00:45:40,790 --> 00:45:45,590
set this up the system up that it's

1063
00:45:43,790 --> 00:45:47,870
vulnerable to kicks pwned just by virtue

1064
00:45:45,590 --> 00:45:49,460
of me being able to access various data

1065
00:45:47,870 --> 00:45:50,779
sets right I would typically run kick

1066
00:45:49,460 --> 00:45:55,010
spawn at this point see what I have

1067
00:45:50,780 --> 00:45:58,690
access to okay now we know we have

1068
00:45:55,010 --> 00:46:02,980
access to TSO let's see what was demo -

1069
00:45:58,690 --> 00:46:02,980
let's enumerate all the users in TSO

1070
00:46:07,130 --> 00:46:14,040
so now we're trying and now I have a

1071
00:46:09,660 --> 00:46:15,420
mind you my system has 20 users a real

1072
00:46:14,040 --> 00:46:17,970
enterprise environment could have

1073
00:46:15,420 --> 00:46:21,510
anywhere from thousands to hundreds of

1074
00:46:17,970 --> 00:46:22,200
thousands of users ok so it won't be

1075
00:46:21,510 --> 00:46:25,410
that fast

1076
00:46:22,200 --> 00:46:27,540
it'll take maybe 20 minutes instead of

1077
00:46:25,410 --> 00:46:29,129
half a minute but here we go so now I

1078
00:46:27,540 --> 00:46:31,800
have a list of all of that all the user

1079
00:46:29,130 --> 00:46:34,790
IDs on the system by the way this

1080
00:46:31,800 --> 00:46:38,460
doesn't leave a record this doesn't say

1081
00:46:34,790 --> 00:46:40,589
invalid access attempt so when I do this

1082
00:46:38,460 --> 00:46:42,810
now I have a list of all the valid users

1083
00:46:40,589 --> 00:46:44,430
so when I do brute-forcing I'm not

1084
00:46:42,810 --> 00:46:45,990
creating extra noise I'm gonna create a

1085
00:46:44,430 --> 00:46:48,270
 ton of noise but I'm not creating

1086
00:46:45,990 --> 00:46:49,859
more noise maybe everyone fat-fingered

1087
00:46:48,270 --> 00:46:52,830
their password Monday morning it happens

1088
00:46:49,859 --> 00:47:00,000
right so I have a list of all the valid

1089
00:46:52,830 --> 00:47:03,348
users we're gonna use let's see here I'm

1090
00:47:00,000 --> 00:47:03,349
gonna use I already a tix info

1091
00:47:06,020 --> 00:47:12,300
ok well used T so brute now to see if we

1092
00:47:09,450 --> 00:47:15,149
can get a guess a password super

1093
00:47:12,300 --> 00:47:17,250
complicated password by the way we're

1094
00:47:15,150 --> 00:47:19,290
limited to 8 characters and our password

1095
00:47:17,250 --> 00:47:22,260
that's the maximum password length we

1096
00:47:19,290 --> 00:47:23,910
can have so I'm gonna run this

1097
00:47:22,260 --> 00:47:26,310
brute-force script and it's first gonna

1098
00:47:23,910 --> 00:47:26,790
try the user ID typically I don't do

1099
00:47:26,310 --> 00:47:28,349
that

1100
00:47:26,790 --> 00:47:30,390
there's a flag you can pass it and turn

1101
00:47:28,349 --> 00:47:32,010
that off now we're gonna try the

1102
00:47:30,390 --> 00:47:35,759
password North sac and it's gonna

1103
00:47:32,010 --> 00:47:39,240
hopefully work or I have killed it this

1104
00:47:35,760 --> 00:47:41,480
is why you record your demos we'll see

1105
00:47:39,240 --> 00:47:41,479
here

1106
00:47:47,080 --> 00:47:53,290
oh no I lost my connection guys let's

1107
00:47:51,880 --> 00:47:56,170
see can I still connect with uh

1108
00:47:53,290 --> 00:48:11,050
I really don't have to log back in let's

1109
00:47:56,170 --> 00:48:12,460
see awesome okay so good thing is in

1110
00:48:11,050 --> 00:48:16,480
case of failure when this blows up in my

1111
00:48:12,460 --> 00:48:18,510
face I recorded all this so joke's on

1112
00:48:16,480 --> 00:48:22,840
you whoever is messing with my internet

1113
00:48:18,510 --> 00:48:26,830
alrighty so I'm gonna do brute force I'm

1114
00:48:22,840 --> 00:48:29,800
gonna do force the user IDs

1115
00:48:26,830 --> 00:48:32,290
this one works not like I must have lost

1116
00:48:29,800 --> 00:48:34,120
in it so here you're seeing me try the

1117
00:48:32,290 --> 00:48:36,009
password North sac across the entire

1118
00:48:34,120 --> 00:48:38,230
user space and boom I have a valid

1119
00:48:36,010 --> 00:48:40,870
password on one user so I need is just

1120
00:48:38,230 --> 00:48:44,770
one user so here you can see valid user

1121
00:48:40,870 --> 00:48:46,690
ID info s10 North SEC next I'm gonna use

1122
00:48:44,770 --> 00:48:49,240
Hydra this is you could have used Hydra

1123
00:48:46,690 --> 00:48:52,420
instead of the other ones so I'm gonna

1124
00:48:49,240 --> 00:48:56,560
use Hydra hi feels much faster than

1125
00:48:52,420 --> 00:48:58,090
doing TSO typically they might limit how

1126
00:48:56,560 --> 00:49:00,310
many 10 30 do 70 connections you can

1127
00:48:58,090 --> 00:49:03,280
have but not FTP or who knows right so

1128
00:49:00,310 --> 00:49:08,620
same thing username and password info

1129
00:49:03,280 --> 00:49:09,880
s10 the password is nor sec and then we

1130
00:49:08,620 --> 00:49:13,569
already did pixel so now i'm going to

1131
00:49:09,880 --> 00:49:16,030
login with that account so i'm gonna

1132
00:49:13,570 --> 00:49:18,460
connect i'm gonna connect it now for

1133
00:49:16,030 --> 00:49:20,200
sake of time I've already uploaded all

1134
00:49:18,460 --> 00:49:22,270
the scripts I'm gonna use so let's just

1135
00:49:20,200 --> 00:49:24,100
keep that in mind so I'm gonna log in

1136
00:49:22,270 --> 00:49:26,770
I'm gonna pass at the user ID that I've

1137
00:49:24,100 --> 00:49:29,110
already cracked I'm gonna login with

1138
00:49:26,770 --> 00:49:34,150
that user ID into the mainframe so now

1139
00:49:29,110 --> 00:49:36,550
I'm in TSO first I'm gonna execute

1140
00:49:34,150 --> 00:49:38,560
assuming I already know it has no access

1141
00:49:36,550 --> 00:49:42,250
to anything for sake of time I'm gonna

1142
00:49:38,560 --> 00:49:43,900
actually get the sec flag and get the

1143
00:49:42,250 --> 00:49:47,560
where the location of the rack eff

1144
00:49:43,900 --> 00:49:52,450
databases because the rack F database

1145
00:49:47,560 --> 00:49:56,140
holds all the hashes so if I have read

1146
00:49:52,450 --> 00:49:58,149
access to the rack F database I can

1147
00:49:56,140 --> 00:49:59,950
crack all that password hashes so we're

1148
00:49:58,150 --> 00:50:00,880
gonna run this first so I need the

1149
00:49:59,950 --> 00:50:02,859
volume name right

1150
00:50:00,880 --> 00:50:05,830
for access so I'll run the list des

1151
00:50:02,860 --> 00:50:07,630
command to list that data set and now

1152
00:50:05,830 --> 00:50:09,250
I'm gonna use I'm gonna call my access

1153
00:50:07,630 --> 00:50:13,030
group to tell me do I have read access

1154
00:50:09,250 --> 00:50:20,410
to that data set or that file run this

1155
00:50:13,030 --> 00:50:22,690
command put in the right volume and I

1156
00:50:20,410 --> 00:50:24,580
have read access to that data set so I

1157
00:50:22,690 --> 00:50:27,040
would typically at this point connecting

1158
00:50:24,580 --> 00:50:29,110
with FTP download that the database

1159
00:50:27,040 --> 00:50:30,610
throw it on a password cracking rig and

1160
00:50:29,110 --> 00:50:33,370
use John the Ripper or hash cat to crack

1161
00:50:30,610 --> 00:50:38,440
the passwords because it supports rack F

1162
00:50:33,370 --> 00:50:41,440
des and KDF AES password hashes so yeah

1163
00:50:38,440 --> 00:50:42,580
it's pretty cool all right so assuming

1164
00:50:41,440 --> 00:50:43,600
that's running in the background let's

1165
00:50:42,580 --> 00:50:45,880
see what else we can do with this

1166
00:50:43,600 --> 00:50:47,950
account let's go see if we can access

1167
00:50:45,880 --> 00:50:49,870
some of the administrators files maybe I

1168
00:50:47,950 --> 00:50:51,850
can screw around with him so I'm gonna

1169
00:50:49,870 --> 00:50:54,040
go into ispf we're gonna go to the file

1170
00:50:51,850 --> 00:50:56,080
browser and then it are filled North

1171
00:50:54,040 --> 00:50:58,300
we're looking for North SEC files say

1172
00:50:56,080 --> 00:51:00,069
right so I'm gonna go to fill dot n go

1173
00:50:58,300 --> 00:51:02,050
to it and look oh there's a North SEC

1174
00:51:00,070 --> 00:51:05,020
file let's see I can't read the file I

1175
00:51:02,050 --> 00:51:09,070
do not have sufficient authority I'm not

1176
00:51:05,020 --> 00:51:14,170
allowed to read that file well

1177
00:51:09,070 --> 00:51:16,870
dang alright let's exit ispf and now

1178
00:51:14,170 --> 00:51:18,460
we're going to list see if I have a PF

1179
00:51:16,870 --> 00:51:21,100
authorized access if I have access to

1180
00:51:18,460 --> 00:51:23,350
any AP of authorized libraries or

1181
00:51:21,100 --> 00:51:27,040
folders and I do turns out there's one

1182
00:51:23,350 --> 00:51:29,110
that I have update access to why maybe

1183
00:51:27,040 --> 00:51:31,900
it's an old data set maybe it's on a dev

1184
00:51:29,110 --> 00:51:34,420
system who knows now I'm gonna run I use

1185
00:51:31,900 --> 00:51:41,980
script the LD API and I'm gonna pass it

1186
00:51:34,420 --> 00:51:43,660
that data set name and that's it now if

1187
00:51:41,980 --> 00:51:49,570
you look at my user access you can see I

1188
00:51:43,660 --> 00:51:52,980
am special in operations ok now hurry up

1189
00:51:49,570 --> 00:51:52,980
Phil let's go let's go look at the file

1190
00:51:55,140 --> 00:51:58,660
and we'll go edit that will view the

1191
00:51:58,240 --> 00:52:01,509
file

1192
00:51:58,660 --> 00:52:05,710
I still can't access the file that's

1193
00:52:01,510 --> 00:52:07,840
because the way APF authorized runs it

1194
00:52:05,710 --> 00:52:09,520
doesn't actually change my access in my

1195
00:52:07,840 --> 00:52:11,050
current session it just changes my

1196
00:52:09,520 --> 00:52:14,550
access in the rack F database I need to

1197
00:52:11,050 --> 00:52:17,910
log out and log back in for the changes

1198
00:52:14,550 --> 00:52:19,140
take effect once I log back in I'll be

1199
00:52:17,910 --> 00:52:24,020
able to access that file so let's see

1200
00:52:19,140 --> 00:52:26,910
here so we'll go in will view the file

1201
00:52:24,020 --> 00:52:29,190
and we'll see what's in others there's a

1202
00:52:26,910 --> 00:52:31,259
file called secret so now's my chance to

1203
00:52:29,190 --> 00:52:34,710
see what's in the secret file and now I

1204
00:52:31,260 --> 00:52:39,090
can read this file okay

1205
00:52:34,710 --> 00:52:41,040
and I'm gonna put a comment in it and

1206
00:52:39,090 --> 00:52:42,570
then we'll just log off the neighbor so

1207
00:52:41,040 --> 00:52:44,880
now I have full control of the entire

1208
00:52:42,570 --> 00:52:48,480
environment at this point I could turn

1209
00:52:44,880 --> 00:52:52,380
it off download any dataset I want just

1210
00:52:48,480 --> 00:52:56,070
full full control okay

1211
00:52:52,380 --> 00:53:01,380
no thank you hey thank you young so

1212
00:52:56,070 --> 00:53:04,160
weird the live demo totally worked right

1213
00:53:01,380 --> 00:53:08,310
we'll just pretend it worked awesome

1214
00:53:04,160 --> 00:53:11,190
okay so I have like literally six

1215
00:53:08,310 --> 00:53:14,580
minutes left seven minutes left I live

1216
00:53:11,190 --> 00:53:16,890
there's not enough time on the planet to

1217
00:53:14,580 --> 00:53:19,110
cover everything on listen I teach a

1218
00:53:16,890 --> 00:53:20,879
two-day class and even in the two-day

1219
00:53:19,110 --> 00:53:23,460
class were like I wish we had like more

1220
00:53:20,880 --> 00:53:26,640
time there's just so much content to

1221
00:53:23,460 --> 00:53:30,720
cover here it is a largely unexplored

1222
00:53:26,640 --> 00:53:33,620
system I know all the mainframe hackers

1223
00:53:30,720 --> 00:53:36,839
on the planet cuz there are seven of us

1224
00:53:33,620 --> 00:53:38,069
okay so the reason I give talks like

1225
00:53:36,840 --> 00:53:39,570
this is because I'm trying to get other

1226
00:53:38,070 --> 00:53:41,460
people interested in the platform get

1227
00:53:39,570 --> 00:53:43,770
other people interested in in giving

1228
00:53:41,460 --> 00:53:46,830
talks because I can't I just can't keep

1229
00:53:43,770 --> 00:53:48,960
traveling giving talks on this thing now

1230
00:53:46,830 --> 00:53:52,350
I'm gonna I wonder if I can show

1231
00:53:48,960 --> 00:53:54,710
something really cool let me see I got

1232
00:53:52,350 --> 00:53:54,710
the time

1233
00:53:55,210 --> 00:54:02,800
give me a minute all right yeah thank

1234
00:53:59,410 --> 00:54:04,210
you okay so I know this was rough I know

1235
00:54:02,800 --> 00:54:06,520
the beginning of the talk was super

1236
00:54:04,210 --> 00:54:07,810
rough like sitting up here and watching

1237
00:54:06,520 --> 00:54:10,120
everyone go from this like oh this could

1238
00:54:07,810 --> 00:54:20,950
be a cool talk and then being like ap

1239
00:54:10,120 --> 00:54:22,930
what this 6,000 pages what is he right

1240
00:54:20,950 --> 00:54:26,710
so I'm gonna show the close up so this

1241
00:54:22,930 --> 00:54:29,049
is so wood woodsy bit 31 and 0 please

1242
00:54:26,710 --> 00:54:30,760
stand up so I can say so these are the

1243
00:54:29,050 --> 00:54:35,700
other these are the two others you can

1244
00:54:30,760 --> 00:54:39,280
thank them for helping out these are the

1245
00:54:35,700 --> 00:54:42,009
two of the seven mainframe hackers they

1246
00:54:39,280 --> 00:54:43,300
just happen to be here but here's sort

1247
00:54:42,010 --> 00:54:46,630
of like the list of all the people who

1248
00:54:43,300 --> 00:54:48,520
should typically follow on on Twitter if

1249
00:54:46,630 --> 00:54:51,610
you're on Twitter yes there is a

1250
00:54:48,520 --> 00:54:53,890
mainframe Twitter no there was no

1251
00:54:51,610 --> 00:54:55,030
mainframe Twitter in 2013 so I'm super

1252
00:54:53,890 --> 00:54:56,920
proud of the mainframe community for

1253
00:54:55,030 --> 00:55:00,940
getting on Twitter in like the last six

1254
00:54:56,920 --> 00:55:03,250
years but if you have if you follow

1255
00:55:00,940 --> 00:55:05,050
people follow these these people on

1256
00:55:03,250 --> 00:55:10,210
Twitter they're posing all kinds of cool

1257
00:55:05,050 --> 00:55:13,200
 now any questions while I try to do

1258
00:55:10,210 --> 00:55:13,200
this other dumb demo

