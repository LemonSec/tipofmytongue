1
00:00:02,860 --> 00:00:09,260
alright last talk of did they not the

2
00:00:06,740 --> 00:00:11,809
last of the activities today but we are

3
00:00:09,260 --> 00:00:13,639
here in room 2 for tret I'm thinking the

4
00:00:11,809 --> 00:00:15,649
clouds so if this is not where you

5
00:00:13,639 --> 00:00:16,460
expected to be there's still time to

6
00:00:15,650 --> 00:00:19,250
move to room 1

7
00:00:16,460 --> 00:00:21,800
we're here today with Jacob grandma Kurd

8
00:00:19,250 --> 00:00:27,009
this armor from ecent dire and I'll let

9
00:00:21,800 --> 00:00:29,630
them present themselves so yeah before

10
00:00:27,009 --> 00:00:31,609
all right thanks everybody for coming

11
00:00:29,630 --> 00:00:33,230
the last talk of the day it's been it's

12
00:00:31,609 --> 00:00:36,530
been a long day but lots of good talks I

13
00:00:33,230 --> 00:00:38,898
hope this is one of them so as she

14
00:00:36,530 --> 00:00:41,390
mentioned I'm Jacob grant and this is

15
00:00:38,899 --> 00:00:43,610
Curtis armor we're both security

16
00:00:41,390 --> 00:00:45,379
strategists at Easton tire we get to do

17
00:00:43,610 --> 00:00:47,120
a lot of fun stuff with testing new

18
00:00:45,379 --> 00:00:50,599
signal sources that can come into our

19
00:00:47,120 --> 00:00:52,280
Security Operations Center and today

20
00:00:50,600 --> 00:00:55,039
we're talking about threat hunting in

21
00:00:52,280 --> 00:00:56,780
the cloud so some of the things that

22
00:00:55,039 --> 00:00:58,850
we're gonna cover first and foremost is

23
00:00:56,780 --> 00:01:00,739
some definitions of what's a cloud

24
00:00:58,850 --> 00:01:02,000
service provider important things to get

25
00:01:00,739 --> 00:01:06,110
out of the way before we get into any

26
00:01:02,000 --> 00:01:08,479
more advanced concepts but how do you

27
00:01:06,110 --> 00:01:10,520
take data from a cloud service provider

28
00:01:08,479 --> 00:01:12,500
and ingested it into a system that you

29
00:01:10,520 --> 00:01:14,210
can do throughout hunting on what are

30
00:01:12,500 --> 00:01:15,280
some new areas that you're going to be

31
00:01:14,210 --> 00:01:19,610
looking at compared to a traditional

32
00:01:15,280 --> 00:01:21,920
enterprise infrastructure and security

33
00:01:19,610 --> 00:01:23,299
tools that you may have had in an

34
00:01:21,920 --> 00:01:24,979
enterprise infrastructure that do not

35
00:01:23,299 --> 00:01:29,329
port well to the cloud or how they

36
00:01:24,979 --> 00:01:31,310
interact and look at some common attack

37
00:01:29,329 --> 00:01:36,408
techniques and real-life examples as

38
00:01:31,310 --> 00:01:38,780
well great so starting off we're

39
00:01:36,409 --> 00:01:40,759
defining cloud service provider as a

40
00:01:38,780 --> 00:01:42,290
company that provides something as a

41
00:01:40,759 --> 00:01:44,180
service in the most traditional sense

42
00:01:42,290 --> 00:01:45,320
it's always been infrastructure as a

43
00:01:44,180 --> 00:01:47,509
service you think of a cloud provider

44
00:01:45,320 --> 00:01:50,029
you think of VMs hosted on someone

45
00:01:47,509 --> 00:01:51,439
else's someone else's hardware but

46
00:01:50,030 --> 00:01:53,810
that's becoming more advanced as you

47
00:01:51,439 --> 00:01:56,869
start to look at the big three so AWS

48
00:01:53,810 --> 00:01:58,670
as you're in Google Cloud where they

49
00:01:56,869 --> 00:02:00,229
have software as a service you can do

50
00:01:58,670 --> 00:02:02,259
functions all sorts of different

51
00:02:00,229 --> 00:02:04,969
advanced micro services that are there

52
00:02:02,259 --> 00:02:08,240
and of course it's important to realize

53
00:02:04,969 --> 00:02:10,250
the reasons for moving to the cloud the

54
00:02:08,240 --> 00:02:12,380
biggest one is probably just the ease of

55
00:02:10,250 --> 00:02:14,210
use of the speed and stability of your

56
00:02:12,380 --> 00:02:15,680
deployments it's really nice to be able

57
00:02:14,210 --> 00:02:16,490
to spin up what would be a full data

58
00:02:15,680 --> 00:02:19,400
center and a couple

59
00:02:16,490 --> 00:02:22,160
seconds but there's the business side of

60
00:02:19,400 --> 00:02:24,950
it too so changing what would have been

61
00:02:22,160 --> 00:02:27,440
a lot of capital expenditure for on-prem

62
00:02:24,950 --> 00:02:30,109
servers or putting stuff into a data

63
00:02:27,440 --> 00:02:31,970
center you change that into effects and

64
00:02:30,110 --> 00:02:38,150
stuff so there's a good business case

65
00:02:31,970 --> 00:02:41,030
for it what's on the screen here is the

66
00:02:38,150 --> 00:02:42,830
AWS shared responsibility model so some

67
00:02:41,030 --> 00:02:44,270
of you who are more familiar with AWS

68
00:02:42,830 --> 00:02:45,830
will probably have seen something like

69
00:02:44,270 --> 00:02:48,560
this before

70
00:02:45,830 --> 00:02:50,960
the point of this is to make clear the

71
00:02:48,560 --> 00:02:52,550
responsibilities of security between the

72
00:02:50,960 --> 00:02:55,070
cloud service provider and the actual

73
00:02:52,550 --> 00:02:56,720
end customer they have a few different

74
00:02:55,070 --> 00:02:58,970
versions of this as well this particular

75
00:02:56,720 --> 00:03:01,070
one is for infrastructure as a service

76
00:02:58,970 --> 00:03:04,370
so again thinking traditional instances

77
00:03:01,070 --> 00:03:06,470
and VMs good rule of thumb is on the

78
00:03:04,370 --> 00:03:08,330
left there if it's in the cloud it's

79
00:03:06,470 --> 00:03:10,070
probably your responsibility if it is

80
00:03:08,330 --> 00:03:15,350
the cloud it's probably the cause of

81
00:03:10,070 --> 00:03:17,870
service providers responsibility so what

82
00:03:15,350 --> 00:03:19,820
I have here is just kind of a diagram

83
00:03:17,870 --> 00:03:21,920
that shows cloud service provider

84
00:03:19,820 --> 00:03:24,109
adoption I called it the big three

85
00:03:21,920 --> 00:03:25,519
earlier with AWS Azure and GCP but

86
00:03:24,110 --> 00:03:29,080
that's actually not the case right now

87
00:03:25,520 --> 00:03:33,460
and this is a survey from about 400,000

88
00:03:29,080 --> 00:03:36,200
InfoSec field people from LinkedIn and

89
00:03:33,460 --> 00:03:38,080
they said that Rackspace is actually

90
00:03:36,200 --> 00:03:42,109
third right now but GCP is going to

91
00:03:38,080 --> 00:03:44,000
outstrip them fairly soon for the

92
00:03:42,110 --> 00:03:46,280
purposes of this talk we're trying to

93
00:03:44,000 --> 00:03:48,350
stay within the realm of AWS and Azure

94
00:03:46,280 --> 00:03:50,630
and we may change this talk later on to

95
00:03:48,350 --> 00:03:52,910
include GCP but we'll try and stay

96
00:03:50,630 --> 00:03:54,320
within that realm for now the important

97
00:03:52,910 --> 00:03:55,940
thing to know as we go through this is

98
00:03:54,320 --> 00:04:01,340
that a lot of these concepts do apply to

99
00:03:55,940 --> 00:04:04,220
other cloud service providers as well so

100
00:04:01,340 --> 00:04:06,680
this is from the same survey they asked

101
00:04:04,220 --> 00:04:08,600
all of the InfoSec professionals what's

102
00:04:06,680 --> 00:04:11,500
their level of security concern related

103
00:04:08,600 --> 00:04:14,840
to moving to a cloud service provider

104
00:04:11,500 --> 00:04:19,250
shockingly 9% of people were either not

105
00:04:14,840 --> 00:04:21,140
concerned or only slightly concerned the

106
00:04:19,250 --> 00:04:22,940
number of people who have been concerned

107
00:04:21,140 --> 00:04:24,979
on some higher level moderately are

108
00:04:22,940 --> 00:04:26,870
extremely has gone up since the last

109
00:04:24,979 --> 00:04:30,490
time they ran this Brandes survey I

110
00:04:26,870 --> 00:04:33,800
think about 11% since then

111
00:04:30,490 --> 00:04:36,139
and also important relevant to the stock

112
00:04:33,800 --> 00:04:37,250
is how well do the security tools that

113
00:04:36,139 --> 00:04:39,590
you would normally be using in an

114
00:04:37,250 --> 00:04:41,870
on-prem environment translate to a cloud

115
00:04:39,590 --> 00:04:44,719
service provider as you can see it's

116
00:04:41,870 --> 00:04:46,430
usually not good there are a few tools

117
00:04:44,720 --> 00:04:49,099
which do port over well but the vast

118
00:04:46,430 --> 00:04:50,960
majority at least lose some of their

119
00:04:49,099 --> 00:04:59,060
functionality or just flat-out don't

120
00:04:50,960 --> 00:05:01,130
work my life perfect all right so let's

121
00:04:59,060 --> 00:05:03,289
take some time and look at some examples

122
00:05:01,130 --> 00:05:07,430
of cloud breaches that we've seen are

123
00:05:03,289 --> 00:05:10,250
related to content service providers so

124
00:05:07,430 --> 00:05:12,080
in in most cases a lot of the attacks

125
00:05:10,250 --> 00:05:14,449
that we see are related to people you

126
00:05:12,080 --> 00:05:16,729
know sharing API keys and it get help

127
00:05:14,449 --> 00:05:18,349
repositories or posting something that

128
00:05:16,729 --> 00:05:21,740
they shouldn't be posting that someone

129
00:05:18,349 --> 00:05:23,449
gets ahold of so we heard in the last

130
00:05:21,740 --> 00:05:25,340
talk you know someone gets access to

131
00:05:23,449 --> 00:05:27,110
some sort of privilege they have access

132
00:05:25,340 --> 00:05:28,940
to spin up resources they spin up

133
00:05:27,110 --> 00:05:30,830
resources and they monetize on it by

134
00:05:28,940 --> 00:05:33,320
using crypto miners crypto jacking is

135
00:05:30,830 --> 00:05:35,570
what it's called and we have some cases

136
00:05:33,320 --> 00:05:38,930
that aren't explicitly you know cloud

137
00:05:35,570 --> 00:05:40,789
related but like kasaya for example it

138
00:05:38,930 --> 00:05:43,759
works in a hypervisor type model where

139
00:05:40,789 --> 00:05:45,770
it has a web interface there was no code

140
00:05:43,759 --> 00:05:48,050
execution that was not disclosed and

141
00:05:45,770 --> 00:05:49,460
then someone got access to the the

142
00:05:48,050 --> 00:05:51,639
management interface and then push down

143
00:05:49,460 --> 00:05:55,120
crypto miners to all the guest machines

144
00:05:51,639 --> 00:05:57,229
so this concept can be applied to cloud

145
00:05:55,120 --> 00:05:59,120
but this is something that we Eddie

146
00:05:57,229 --> 00:06:01,340
sontar detected because we had endpoint

147
00:05:59,120 --> 00:06:05,389
visibility which is very key and will

148
00:06:01,340 --> 00:06:06,609
kind of go through those examples so

149
00:06:05,389 --> 00:06:09,319
what are they after

150
00:06:06,610 --> 00:06:11,509
so as we said most of the time getting

151
00:06:09,319 --> 00:06:13,750
API keys gives them a lot of power a lot

152
00:06:11,509 --> 00:06:16,789
of flexibility within the environment

153
00:06:13,750 --> 00:06:18,500
you know any any access that they can

154
00:06:16,789 --> 00:06:21,169
get to the portal gives them inherent

155
00:06:18,500 --> 00:06:23,780
access to machines depending on the the

156
00:06:21,169 --> 00:06:26,109
permission level of that user so they're

157
00:06:23,780 --> 00:06:29,270
after our credentials console access

158
00:06:26,110 --> 00:06:32,090
they want to escalate privileges so

159
00:06:29,270 --> 00:06:34,250
sometimes when you get keys they're not

160
00:06:32,090 --> 00:06:36,349
the right level but you can use that to

161
00:06:34,250 --> 00:06:37,490
escalate to get higher level keys to be

162
00:06:36,349 --> 00:06:40,969
able to do whatever you want to do

163
00:06:37,490 --> 00:06:41,790
within the environment there's also

164
00:06:40,969 --> 00:06:43,860
direct access

165
00:06:41,790 --> 00:06:46,080
the instances we're gonna cover the fact

166
00:06:43,860 --> 00:06:49,260
that you know in in traditional you know

167
00:06:46,080 --> 00:06:51,450
hybrid environments we see some clients

168
00:06:49,260 --> 00:06:53,849
forklifting you know old servers into

169
00:06:51,450 --> 00:06:55,620
cloud if you can get direct access to

170
00:06:53,850 --> 00:06:58,050
that instance you're able to harvest

171
00:06:55,620 --> 00:07:00,510
whatever data is on that instance itself

172
00:06:58,050 --> 00:07:03,600
so being able to you know run code or

173
00:07:00,510 --> 00:07:04,860
access private data is key for the back

174
00:07:03,600 --> 00:07:07,110
eyes so that they're trying to get

175
00:07:04,860 --> 00:07:09,660
direct access to instance and then

176
00:07:07,110 --> 00:07:13,140
obviously trying to get data out to try

177
00:07:09,660 --> 00:07:17,520
and you know extort someone or you know

178
00:07:13,140 --> 00:07:18,810
sell it to the highest bidder so some

179
00:07:17,520 --> 00:07:20,280
examples that I'm sure we're all

180
00:07:18,810 --> 00:07:24,540
familiar with here

181
00:07:20,280 --> 00:07:26,609
uber they posted some code which allowed

182
00:07:24,540 --> 00:07:29,340
the attackers to you know gain access to

183
00:07:26,610 --> 00:07:31,770
a portion of their infrastructure

184
00:07:29,340 --> 00:07:34,609
it was s3 buckets that they stole data

185
00:07:31,770 --> 00:07:37,890
from and then they took that data

186
00:07:34,610 --> 00:07:40,470
extorted them uber paid a fine uber paid

187
00:07:37,890 --> 00:07:42,240
the bounty as a bug bounty it all became

188
00:07:40,470 --> 00:07:45,930
public and then everyone was waving

189
00:07:42,240 --> 00:07:49,890
their finger at ruber of course another

190
00:07:45,930 --> 00:07:51,420
one Tesla they had specific kubernetes

191
00:07:49,890 --> 00:07:53,909
that was open to everyone

192
00:07:51,420 --> 00:07:57,600
someone got access to it they had access

193
00:07:53,910 --> 00:08:00,330
to their s3 buckets but those keys had

194
00:07:57,600 --> 00:08:02,370
access to be able to generate crypto

195
00:08:00,330 --> 00:08:05,880
miners in servers so they're able to

196
00:08:02,370 --> 00:08:08,430
spin up assets and then put Krypton

197
00:08:05,880 --> 00:08:10,110
crypto mining agents on them and then

198
00:08:08,430 --> 00:08:13,920
get money out of that through that

199
00:08:10,110 --> 00:08:16,650
method and again as we said before the

200
00:08:13,920 --> 00:08:18,480
kiss a breach not specifically cloud

201
00:08:16,650 --> 00:08:21,179
based but kind of functions in the same

202
00:08:18,480 --> 00:08:23,070
sort of way they were able to get access

203
00:08:21,180 --> 00:08:25,350
to the hypervisor and then push code

204
00:08:23,070 --> 00:08:30,360
down to the guest machines across a

205
00:08:25,350 --> 00:08:33,630
global client and obviously you need to

206
00:08:30,360 --> 00:08:35,039
be able to see on the endpoint to be

207
00:08:33,630 --> 00:08:36,689
able to detect those pushes down

208
00:08:35,039 --> 00:08:40,890
especially if you don't have visibility

209
00:08:36,690 --> 00:08:44,280
in the CSP log level and that's this

210
00:08:40,890 --> 00:08:46,340
just then Samsung posted a ton of source

211
00:08:44,280 --> 00:08:49,380
code that was public to the Internet

212
00:08:46,340 --> 00:08:51,780
security researcher got ahold of AWS

213
00:08:49,380 --> 00:08:54,060
credentials which had access to their

214
00:08:51,780 --> 00:08:55,500
entire repository so this is very very

215
00:08:54,060 --> 00:08:59,640
bad on this happened

216
00:08:55,500 --> 00:09:02,730
a week ago and this kind of stresses the

217
00:08:59,640 --> 00:09:04,590
fact that you know access and and keys

218
00:09:02,730 --> 00:09:06,690
that are getting posted into in public

219
00:09:04,590 --> 00:09:09,120
areas or that can be scrapes are always

220
00:09:06,690 --> 00:09:11,790
going to be used to leverage you know

221
00:09:09,120 --> 00:09:19,920
access and execute you know code within

222
00:09:11,790 --> 00:09:22,010
customer environments I'm going to go

223
00:09:19,920 --> 00:09:24,560
through some of the more traditional

224
00:09:22,010 --> 00:09:26,550
enterprise security tools that were all

225
00:09:24,560 --> 00:09:29,189
probably very used to seeing at this

226
00:09:26,550 --> 00:09:30,719
point so if you had just a regular

227
00:09:29,190 --> 00:09:32,250
enterprise environment just on Brown

228
00:09:30,720 --> 00:09:34,200
we're not talking about cloud providers

229
00:09:32,250 --> 00:09:35,820
at this point you're gonna see a lot of

230
00:09:34,200 --> 00:09:37,350
different devices and it might depend on

231
00:09:35,820 --> 00:09:39,690
kind of the maturity of the customer

232
00:09:37,350 --> 00:09:42,210
what sort of vertical they're in but a

233
00:09:39,690 --> 00:09:44,910
few examples you're more likely to see

234
00:09:42,210 --> 00:09:48,090
obviously a firewall probably a next-gen

235
00:09:44,910 --> 00:09:49,650
firewall or UTM maybe a network IDs or

236
00:09:48,090 --> 00:09:54,360
IPs that might be rolled into the

237
00:09:49,650 --> 00:09:56,760
firewall but not necessarily so you'll

238
00:09:54,360 --> 00:09:59,280
see EDR PPE agents which I'll talk a

239
00:09:56,760 --> 00:10:01,980
little bit more about in a second maybe

240
00:09:59,280 --> 00:10:05,040
a sim for logging and lots of other

241
00:10:01,980 --> 00:10:07,080
options too so I have a bunch of logos

242
00:10:05,040 --> 00:10:08,939
up here for free and open source stuff

243
00:10:07,080 --> 00:10:14,100
as well as some corporate options as

244
00:10:08,940 --> 00:10:16,170
well so the network IDs and IPS side of

245
00:10:14,100 --> 00:10:17,940
things this is probably one of the it I

246
00:10:16,170 --> 00:10:21,240
shouldn't say probably it is the oldest

247
00:10:17,940 --> 00:10:23,610
of the ones that I just referenced very

248
00:10:21,240 --> 00:10:25,950
obvious in its function observed network

249
00:10:23,610 --> 00:10:27,780
traffic as it's going over the wire look

250
00:10:25,950 --> 00:10:29,190
for either signature based matches of

251
00:10:27,780 --> 00:10:31,020
malicious activity or anything that

252
00:10:29,190 --> 00:10:34,560
might constitute some sort of anomaly

253
00:10:31,020 --> 00:10:37,319
and then either flag it if it's an IDs

254
00:10:34,560 --> 00:10:38,609
or interrupt it if it's an IPS there's a

255
00:10:37,320 --> 00:10:40,020
few different ways of doing that just

256
00:10:38,610 --> 00:10:41,940
called out here if you're in line of

257
00:10:40,020 --> 00:10:44,010
course it's easy to just you know cut

258
00:10:41,940 --> 00:10:45,660
the connection but if you're out of band

259
00:10:44,010 --> 00:10:52,080
you can do things like TCP resets as

260
00:10:45,660 --> 00:10:55,140
well so endpoint protection platforms

261
00:10:52,080 --> 00:10:56,850
and endpoint detection and response so

262
00:10:55,140 --> 00:10:58,890
you see these thrown around a lot

263
00:10:56,850 --> 00:11:00,240
they're kind of converging now as well

264
00:10:58,890 --> 00:11:01,620
you'll see some providers trying to get

265
00:11:00,240 --> 00:11:03,390
merge the two functionalities together

266
00:11:01,620 --> 00:11:05,940
because it kind of makes sense in a way

267
00:11:03,390 --> 00:11:08,640
but if you're referring strictly to EVP

268
00:11:05,940 --> 00:11:09,150
you're talking about interrupting code

269
00:11:08,640 --> 00:11:11,819
that's being

270
00:11:09,150 --> 00:11:13,260
immediately and if you're talking about

271
00:11:11,820 --> 00:11:16,290
EDR you're really talking more about a

272
00:11:13,260 --> 00:11:18,140
telemetry side of things there are there

273
00:11:16,290 --> 00:11:21,680
is some overlap between the two but

274
00:11:18,140 --> 00:11:26,370
that's their fundamental difference and

275
00:11:21,680 --> 00:11:28,349
of course the sim so these have usually

276
00:11:26,370 --> 00:11:30,450
been used for compliance reasons so if

277
00:11:28,350 --> 00:11:32,070
you're like PCI or Sox compliant you

278
00:11:30,450 --> 00:11:34,620
would want a sim to make sure that you

279
00:11:32,070 --> 00:11:38,220
have all of your data to to meet those

280
00:11:34,620 --> 00:11:40,170
frameworks but now we're kind of getting

281
00:11:38,220 --> 00:11:42,630
to a point where these have some really

282
00:11:40,170 --> 00:11:46,050
good advanced applications for threat

283
00:11:42,630 --> 00:11:47,670
hunting and event correlation so this is

284
00:11:46,050 --> 00:11:49,469
kind of where we're gonna where we're

285
00:11:47,670 --> 00:11:53,219
gonna play in the stock is in the sim

286
00:11:49,470 --> 00:11:55,620
and going forward it should be probably

287
00:11:53,220 --> 00:11:57,150
your one-stop shop a one-stop shop but

288
00:11:55,620 --> 00:11:58,560
should have a lot of your information

289
00:11:57,150 --> 00:12:02,939
for any Incident Response activity

290
00:11:58,560 --> 00:12:05,520
you're doing so taking all of those and

291
00:12:02,940 --> 00:12:09,120
rolling them together I've made a very

292
00:12:05,520 --> 00:12:11,220
oversimplified Enterprise diagram not

293
00:12:09,120 --> 00:12:12,960
too worried about users here because

294
00:12:11,220 --> 00:12:14,220
we're talking about things that are

295
00:12:12,960 --> 00:12:17,970
going to be ported to the cloud as

296
00:12:14,220 --> 00:12:22,410
instances not using any of the built-in

297
00:12:17,970 --> 00:12:24,120
services like RDS for Amazon just

298
00:12:22,410 --> 00:12:25,290
instances themselves so if you

299
00:12:24,120 --> 00:12:26,430
forklifted everything from your

300
00:12:25,290 --> 00:12:29,339
environment this is what we'd be looking

301
00:12:26,430 --> 00:12:31,949
at you see your web servers front-end

302
00:12:29,339 --> 00:12:34,290
database back-end all of those servers

303
00:12:31,950 --> 00:12:36,330
have some type of endpoint agent on them

304
00:12:34,290 --> 00:12:39,540
you can see kind of in the middle on the

305
00:12:36,330 --> 00:12:44,760
bottom there your IDs slash IPs and your

306
00:12:39,540 --> 00:12:47,279
sim on the bottom left so how do we get

307
00:12:44,760 --> 00:12:51,920
those into the cloud here's the exact

308
00:12:47,279 --> 00:12:54,450
same architecture this is within AWS so

309
00:12:51,920 --> 00:12:57,360
first off what's different the symlog

310
00:12:54,450 --> 00:13:00,570
sources are different because we're not

311
00:12:57,360 --> 00:13:01,860
getting logs from the network equipment

312
00:13:00,570 --> 00:13:04,050
that was controlled by the custom

313
00:13:01,860 --> 00:13:05,490
running anymore the router and Internet

314
00:13:04,050 --> 00:13:08,819
gateway that are listed here are our

315
00:13:05,490 --> 00:13:10,320
abstraction abstractions by AWS so

316
00:13:08,820 --> 00:13:14,220
you're actually getting the logs from

317
00:13:10,320 --> 00:13:15,900
AWS itself through Cloud trail or VPC

318
00:13:14,220 --> 00:13:19,950
flow logs which is the other one that's

319
00:13:15,900 --> 00:13:21,720
listed there and as I mentioned those

320
00:13:19,950 --> 00:13:22,080
are no longer controlled by the customer

321
00:13:21,720 --> 00:13:23,940
so that's

322
00:13:22,080 --> 00:13:27,510
the other difference what's missing is

323
00:13:23,940 --> 00:13:29,700
our IDs is gone how do you get an IDs

324
00:13:27,510 --> 00:13:31,380
into this architecture if the router and

325
00:13:29,700 --> 00:13:33,570
Internet gateway are abstractions when

326
00:13:31,380 --> 00:13:35,430
in the enterprise environment you'd have

327
00:13:33,570 --> 00:13:37,830
like a span or a port mirror there or

328
00:13:35,430 --> 00:13:40,910
maybe the IDs just sits in line but you

329
00:13:37,830 --> 00:13:43,650
can't do that anymore so what do you do

330
00:13:40,910 --> 00:13:47,219
there's a few different options you can

331
00:13:43,650 --> 00:13:48,750
have the IDS act or be your be an

332
00:13:47,220 --> 00:13:51,600
instance that acts as your internet

333
00:13:48,750 --> 00:13:53,760
gateway so you're effectively routing

334
00:13:51,600 --> 00:13:55,950
traffic through it for analysis as it's

335
00:13:53,760 --> 00:13:57,930
on its way to the Internet there are

336
00:13:55,950 --> 00:14:00,840
lots of options for this and you can

337
00:13:57,930 --> 00:14:02,849
kind of get this from an image for a

338
00:14:00,840 --> 00:14:05,010
firewall like there's in the AWS

339
00:14:02,850 --> 00:14:06,720
marketplace there's you know Palo Alto

340
00:14:05,010 --> 00:14:08,550
there's Check Point there's all sorts of

341
00:14:06,720 --> 00:14:09,960
stuff you can choose from and you can

342
00:14:08,550 --> 00:14:13,349
get some of the same functionality from

343
00:14:09,960 --> 00:14:14,970
that if you could also do something like

344
00:14:13,350 --> 00:14:17,280
just have a Linux instance that acts as

345
00:14:14,970 --> 00:14:19,230
the the gateway and you can do a lot of

346
00:14:17,280 --> 00:14:22,650
your detection on that instead so the

347
00:14:19,230 --> 00:14:24,270
problem here comes with scale since

348
00:14:22,650 --> 00:14:25,680
you've kind of pulled the responsibility

349
00:14:24,270 --> 00:14:27,780
of that internet gateway down into an

350
00:14:25,680 --> 00:14:30,000
instance you now are responsible for

351
00:14:27,780 --> 00:14:36,060
more aspects of getting than the network

352
00:14:30,000 --> 00:14:39,900
traffic out of your network the next one

353
00:14:36,060 --> 00:14:41,579
is fairly new which is tap agents so

354
00:14:39,900 --> 00:14:42,930
this would be there's a few different

355
00:14:41,580 --> 00:14:44,550
vendors doing this right now

356
00:14:42,930 --> 00:14:46,620
in Microsoft they have something called

357
00:14:44,550 --> 00:14:48,150
the V tap or if you're looking at say

358
00:14:46,620 --> 00:14:50,310
gigamon they have a solution for it as

359
00:14:48,150 --> 00:14:51,980
well but basically what it's doing is

360
00:14:50,310 --> 00:14:54,060
it's just taking the traffic and

361
00:14:51,980 --> 00:14:56,670
offloading it through other means rather

362
00:14:54,060 --> 00:14:59,729
than doing a port mirror or tap over to

363
00:14:56,670 --> 00:15:02,490
an IDs or IPs instance so this is pretty

364
00:14:59,730 --> 00:15:05,250
good and I think it's probably going to

365
00:15:02,490 --> 00:15:07,140
be the best solution long term but right

366
00:15:05,250 --> 00:15:09,720
now the costs depending on the vendor

367
00:15:07,140 --> 00:15:11,910
that you go with are pretty steep and

368
00:15:09,720 --> 00:15:14,010
it's also not portable so if you're

369
00:15:11,910 --> 00:15:15,329
going with AWS and say you wanted to

370
00:15:14,010 --> 00:15:17,640
switch to like digital ocean or

371
00:15:15,330 --> 00:15:23,070
Rackspace that solution may not follow

372
00:15:17,640 --> 00:15:25,590
you there a few other options - the the

373
00:15:23,070 --> 00:15:28,140
craziest one on the list is running IDs

374
00:15:25,590 --> 00:15:29,400
or IPs on the actual instances so this

375
00:15:28,140 --> 00:15:30,990
would mean running something on your web

376
00:15:29,400 --> 00:15:32,939
servers and your database servers to do

377
00:15:30,990 --> 00:15:35,550
the analysis it's extremely expensive I

378
00:15:32,940 --> 00:15:36,990
don't recommend it

379
00:15:35,550 --> 00:15:39,599
you can backhaul traffic to where there

380
00:15:36,990 --> 00:15:41,459
is an IDs not really a great solution

381
00:15:39,600 --> 00:15:43,470
for anything that's public facing since

382
00:15:41,459 --> 00:15:46,109
now that has to route through your

383
00:15:43,470 --> 00:15:48,779
on-prem all the way up to AWS or go

384
00:15:46,110 --> 00:15:50,070
without so this is this is an argument

385
00:15:48,779 --> 00:15:51,990
that I'm sure we're hearing more and

386
00:15:50,070 --> 00:15:53,459
more which is that network based

387
00:15:51,990 --> 00:15:56,250
monitoring is becoming less effective

388
00:15:53,459 --> 00:16:00,839
the more traffic is encrypted which is

389
00:15:56,250 --> 00:16:02,370
true but that's not to say that it's

390
00:16:00,839 --> 00:16:03,540
useless there's lots of things even if

391
00:16:02,370 --> 00:16:04,890
it is encrypted traffic that you're

392
00:16:03,540 --> 00:16:06,719
gonna be missing out on if you decide to

393
00:16:04,890 --> 00:16:09,029
go without so things like TLS

394
00:16:06,720 --> 00:16:12,029
fingerprinting and some other functions

395
00:16:09,029 --> 00:16:14,670
as well so it's important to kind of

396
00:16:12,029 --> 00:16:17,220
plan according to your needs if you

397
00:16:14,670 --> 00:16:18,390
don't feel that that is part of your

398
00:16:17,220 --> 00:16:21,120
environment or you think that's a

399
00:16:18,390 --> 00:16:22,350
requirement endpoint and some of the

400
00:16:21,120 --> 00:16:23,519
other logs I'm going to talk about in a

401
00:16:22,350 --> 00:16:26,910
second should cover off everything

402
00:16:23,519 --> 00:16:30,029
pretty good so talking about cloud

403
00:16:26,910 --> 00:16:33,060
service logs from the services

404
00:16:30,029 --> 00:16:35,820
themselves so AWS has something by a

405
00:16:33,060 --> 00:16:39,209
called cloud trail you can configure it

406
00:16:35,820 --> 00:16:40,680
by region and it has some options for

407
00:16:39,209 --> 00:16:42,689
what you want to see if you want to see

408
00:16:40,680 --> 00:16:45,319
only reads against your infrastructure

409
00:16:42,690 --> 00:16:48,779
or rights or both I recommend both

410
00:16:45,320 --> 00:16:51,360
because why not and you can log to s3 or

411
00:16:48,779 --> 00:16:53,670
to lambda which is their their function

412
00:16:51,360 --> 00:16:55,620
service so if you wanted to do something

413
00:16:53,670 --> 00:16:58,620
special with the log as it comes in and

414
00:16:55,620 --> 00:17:01,709
you can do it that way and importantly

415
00:16:58,620 --> 00:17:04,140
VPC logs which is they're basically

416
00:17:01,709 --> 00:17:05,418
NetFlow is logged separately you have to

417
00:17:04,140 --> 00:17:09,540
turn that on through a different

418
00:17:05,419 --> 00:17:12,900
mechanism azor is fairly similar in the

419
00:17:09,540 --> 00:17:15,569
sense that they have their Activity

420
00:17:12,900 --> 00:17:16,890
Monitor it's turned on by default you

421
00:17:15,569 --> 00:17:18,599
can choose where you want to have it

422
00:17:16,890 --> 00:17:21,689
stored you can go to a storage account

423
00:17:18,599 --> 00:17:24,030
or a service called event hub and in the

424
00:17:21,689 --> 00:17:26,130
same way their network logs are separate

425
00:17:24,030 --> 00:17:33,290
but they're done through network

426
00:17:26,130 --> 00:17:36,720
security groups as opposed to VPC so

427
00:17:33,290 --> 00:17:38,250
before I get into some of the potential

428
00:17:36,720 --> 00:17:40,800
attacks against the cloud it's important

429
00:17:38,250 --> 00:17:43,020
to understand one aspect of it which is

430
00:17:40,800 --> 00:17:44,520
I am so this is where you're going to be

431
00:17:43,020 --> 00:17:45,690
controlling a lot of your users and your

432
00:17:44,520 --> 00:17:47,550
permission

433
00:17:45,690 --> 00:17:49,500
for who's allowed to do what within the

434
00:17:47,550 --> 00:17:52,350
cloud service provider you can also

435
00:17:49,500 --> 00:17:55,850
assign permissions to instances

436
00:17:52,350 --> 00:17:59,300
themselves if they need to access other

437
00:17:55,850 --> 00:18:03,360
components of the cloud service provider

438
00:17:59,300 --> 00:18:05,250
I also have a snippet just kind of so

439
00:18:03,360 --> 00:18:07,649
you can get an idea of what VPC flow

440
00:18:05,250 --> 00:18:08,820
logs look like in AWS so it's got a

441
00:18:07,650 --> 00:18:10,680
header there with all the different

442
00:18:08,820 --> 00:18:16,020
details and it just kind of spits it out

443
00:18:10,680 --> 00:18:18,150
as as one line per connection there also

444
00:18:16,020 --> 00:18:19,139
this is really probably more useful for

445
00:18:18,150 --> 00:18:21,720
folks who are watching this on a

446
00:18:19,140 --> 00:18:24,480
recording but some easy translation

447
00:18:21,720 --> 00:18:26,610
between the big three they all have a

448
00:18:24,480 --> 00:18:28,290
lot of the same functions but obviously

449
00:18:26,610 --> 00:18:30,479
they call them all different things and

450
00:18:28,290 --> 00:18:32,040
so this is just a quick reference guide

451
00:18:30,480 --> 00:18:34,730
I've got a link there as well if you

452
00:18:32,040 --> 00:18:34,730
want to check that out

453
00:18:35,310 --> 00:18:40,740
so some attacker tools we've been doing

454
00:18:38,160 --> 00:18:42,060
a lot of testing with AWS and Azure

455
00:18:40,740 --> 00:18:45,180
these are a couple of my favorites right

456
00:18:42,060 --> 00:18:47,580
now so there's a tool called PACU which

457
00:18:45,180 --> 00:18:51,720
is named after a type of piranha in the

458
00:18:47,580 --> 00:18:56,730
Amazon which makes sense or microburst

459
00:18:51,720 --> 00:18:58,350
for Azure and some of the things you can

460
00:18:56,730 --> 00:19:00,540
do with these I'll show you in a second

461
00:18:58,350 --> 00:19:02,280
but just in general some of the things

462
00:19:00,540 --> 00:19:05,280
you're going to want to look for and I

463
00:19:02,280 --> 00:19:07,710
did a lot of this testing just in elk it

464
00:19:05,280 --> 00:19:11,550
has input plugins so you can pull

465
00:19:07,710 --> 00:19:14,670
straight from Amazon s3 or Azure storage

466
00:19:11,550 --> 00:19:18,870
accounts and get the logs that way so

467
00:19:14,670 --> 00:19:21,390
brute force of any of the services so s3

468
00:19:18,870 --> 00:19:22,679
buckets Azure storage accounts that's

469
00:19:21,390 --> 00:19:24,120
literally going through and using a

470
00:19:22,680 --> 00:19:26,070
dictionary attack to try and find the

471
00:19:24,120 --> 00:19:29,610
names of different resources within your

472
00:19:26,070 --> 00:19:31,409
environment or accounts themselves if

473
00:19:29,610 --> 00:19:32,820
someone has a foothold already and they

474
00:19:31,410 --> 00:19:34,340
have a user but maybe not a lot of

475
00:19:32,820 --> 00:19:37,590
permissions they may try to brute force

476
00:19:34,340 --> 00:19:39,120
their permissions and it shows up pretty

477
00:19:37,590 --> 00:19:41,220
easily I'll show you on the next slide

478
00:19:39,120 --> 00:19:44,129
what that looks like they might list

479
00:19:41,220 --> 00:19:45,870
metadata for both Azure an AWS they have

480
00:19:44,130 --> 00:19:48,000
metadata services which record details

481
00:19:45,870 --> 00:19:50,219
about instances and permissions and

482
00:19:48,000 --> 00:19:55,310
other code that they're supposed to run

483
00:19:50,220 --> 00:19:55,310
on boot which is also interesting and

484
00:19:55,400 --> 00:19:58,750
there's exploits that both of these can

485
00:19:57,720 --> 00:20:01,360
run so

486
00:19:58,750 --> 00:20:04,240
PACU for instance has this really fun

487
00:20:01,360 --> 00:20:07,060
module in it where you can set up a

488
00:20:04,240 --> 00:20:09,610
lambda function to backdoor every new I

489
00:20:07,060 --> 00:20:11,110
am user that's created by getting the

490
00:20:09,610 --> 00:20:14,050
rest us H key and posting it to a random

491
00:20:11,110 --> 00:20:15,429
web server somewhere lots of different

492
00:20:14,050 --> 00:20:16,480
options I really encourage everyone here

493
00:20:15,430 --> 00:20:20,440
to kind of check them out if you're

494
00:20:16,480 --> 00:20:23,140
interested what I've got on the screen

495
00:20:20,440 --> 00:20:25,780
now is an example of a permission brute

496
00:20:23,140 --> 00:20:27,580
force using PACU so start on the top

497
00:20:25,780 --> 00:20:30,490
left this is just a visualization that

498
00:20:27,580 --> 00:20:32,919
you can easily recreate an elk it's the

499
00:20:30,490 --> 00:20:35,200
specific user that's making API eat the

500
00:20:32,920 --> 00:20:36,880
eye calls Curtis is on there but more

501
00:20:35,200 --> 00:20:39,310
importantly PACU test is on there on the

502
00:20:36,880 --> 00:20:44,670
far right they go up to a hundred stop

503
00:20:39,310 --> 00:20:47,050
throwing errors so the bottom left is

504
00:20:44,670 --> 00:20:49,390
all of the different calls that it made

505
00:20:47,050 --> 00:20:52,629
and you can see no one call makes up the

506
00:20:49,390 --> 00:20:54,670
majority it is sorted by by count so

507
00:20:52,630 --> 00:20:56,170
that's pretty consistent with someone

508
00:20:54,670 --> 00:20:59,290
trying to see what permissions they have

509
00:20:56,170 --> 00:21:01,870
for every call they can make and on the

510
00:20:59,290 --> 00:21:03,399
right there's a call this is the actual

511
00:21:01,870 --> 00:21:07,300
log as it comes through it's in JSON

512
00:21:03,400 --> 00:21:09,340
format but they used a dry run operation

513
00:21:07,300 --> 00:21:11,110
it's a flag you can set when you're

514
00:21:09,340 --> 00:21:13,449
making these calls there's not really a

515
00:21:11,110 --> 00:21:15,909
lot of practical use in a production

516
00:21:13,450 --> 00:21:20,640
setting for them it's really either used

517
00:21:15,910 --> 00:21:20,640
for testing or this in my experience

518
00:21:21,030 --> 00:21:26,830
this is another fun one that really

519
00:21:25,180 --> 00:21:31,630
illustrates the importance of collecting

520
00:21:26,830 --> 00:21:35,800
these logs this is indicating that an

521
00:21:31,630 --> 00:21:37,900
image was taken from Amazon and shared

522
00:21:35,800 --> 00:21:39,460
with an external account what that means

523
00:21:37,900 --> 00:21:41,290
is basically they're allowed to boot up

524
00:21:39,460 --> 00:21:43,990
that image within their own account do

525
00:21:41,290 --> 00:21:46,149
whatever they want with it and you will

526
00:21:43,990 --> 00:21:50,800
be none the wiser aside from this log

527
00:21:46,150 --> 00:21:52,450
you get one chance to catch this alright

528
00:21:50,800 --> 00:21:54,760
Curtis is going to talk a little bit

529
00:21:52,450 --> 00:21:58,270
about end point logs in those cloud

530
00:21:54,760 --> 00:22:00,550
service providers yes so how can we use

531
00:21:58,270 --> 00:22:04,330
logs from the end point to provide

532
00:22:00,550 --> 00:22:06,370
better visibility so for us what does

533
00:22:04,330 --> 00:22:09,370
endpoint visibly mean so we're talking

534
00:22:06,370 --> 00:22:11,020
strictly about VMs where we're not

535
00:22:09,370 --> 00:22:11,379
talking about micro services we're

536
00:22:11,020 --> 00:22:13,330
talking

537
00:22:11,380 --> 00:22:16,300
the use case when you're moving some

538
00:22:13,330 --> 00:22:17,949
server infrastructure into the cloud and

539
00:22:16,300 --> 00:22:21,940
it's running some sort of business

540
00:22:17,950 --> 00:22:23,740
function and what organizations need

541
00:22:21,940 --> 00:22:25,870
visibility into the cloud endpoints so

542
00:22:23,740 --> 00:22:27,670
if you're running any business function

543
00:22:25,870 --> 00:22:30,040
anything out of the cloud that has you

544
00:22:27,670 --> 00:22:33,100
know proprietary information something

545
00:22:30,040 --> 00:22:34,750
that a bad guy could get and utilize you

546
00:22:33,100 --> 00:22:37,899
want to have visibility into your actual

547
00:22:34,750 --> 00:22:39,910
endpoints as we'll go through you only

548
00:22:37,900 --> 00:22:42,940
get a certain level of visibility from

549
00:22:39,910 --> 00:22:44,500
the cloud service provider itself and

550
00:22:42,940 --> 00:22:48,150
you don't really get visibility into the

551
00:22:44,500 --> 00:22:50,320
actual endpoints that are running code

552
00:22:48,150 --> 00:22:52,000
so what's the difference between armed

553
00:22:50,320 --> 00:22:53,530
Prem and these Cloud endpoints that

554
00:22:52,000 --> 00:22:55,720
we're talking about there's nothing

555
00:22:53,530 --> 00:22:58,360
there just virtual machines running in

556
00:22:55,720 --> 00:23:00,150
another spot the thing is is that

557
00:22:58,360 --> 00:23:02,530
there's you know more inherent security

558
00:23:00,150 --> 00:23:05,020
because it's deployed generally in a

559
00:23:02,530 --> 00:23:07,060
zero trust model but when people are

560
00:23:05,020 --> 00:23:09,280
forklifting applications and servers

561
00:23:07,060 --> 00:23:11,980
from there on Prem environment into the

562
00:23:09,280 --> 00:23:13,270
cloud we come into the same problem

563
00:23:11,980 --> 00:23:16,120
where you know they can talk to each

564
00:23:13,270 --> 00:23:18,610
other there's you know there is not that

565
00:23:16,120 --> 00:23:19,989
inherent security anymore so we have to

566
00:23:18,610 --> 00:23:22,090
have visibility into what's actually

567
00:23:19,990 --> 00:23:26,500
executing and know what's happening on

568
00:23:22,090 --> 00:23:28,300
those endpoints what is required to hunt

569
00:23:26,500 --> 00:23:30,820
so how are we supposed to hunt for bad

570
00:23:28,300 --> 00:23:33,820
things in the cloud so what we talked

571
00:23:30,820 --> 00:23:35,530
about at least on tires raw telemetry so

572
00:23:33,820 --> 00:23:37,929
we like getting everything off of the

573
00:23:35,530 --> 00:23:40,210
the endpoints being able to pull that in

574
00:23:37,930 --> 00:23:43,600
and then be able to do hunt specific for

575
00:23:40,210 --> 00:23:45,130
you know tactics or techniques being

576
00:23:43,600 --> 00:23:46,719
able to get everything and not dropping

577
00:23:45,130 --> 00:23:48,250
anything gives you the ability to go

578
00:23:46,720 --> 00:23:49,960
back and look for things that may not

579
00:23:48,250 --> 00:23:51,850
have been known before and gives you the

580
00:23:49,960 --> 00:23:53,590
full visibility into being able to hunt

581
00:23:51,850 --> 00:23:56,669
for you know certain types of threat

582
00:23:53,590 --> 00:23:59,470
actors within a cloud environment and

583
00:23:56,670 --> 00:24:01,990
what's the classic misconception about

584
00:23:59,470 --> 00:24:03,550
cloud security the classic misconception

585
00:24:01,990 --> 00:24:06,880
is that it's on the cloud security

586
00:24:03,550 --> 00:24:09,159
provider as Jacob alluded to earlier if

587
00:24:06,880 --> 00:24:11,260
you were running the instance you were

588
00:24:09,160 --> 00:24:13,330
supplying the software it's up to you to

589
00:24:11,260 --> 00:24:17,860
protect those endpoints it's not the

590
00:24:13,330 --> 00:24:19,330
cloud service providers job and what are

591
00:24:17,860 --> 00:24:21,490
the risk of running workloads in the

592
00:24:19,330 --> 00:24:22,870
cloud the main risk is if you don't have

593
00:24:21,490 --> 00:24:24,370
visibility and what's happening on your

594
00:24:22,870 --> 00:24:25,299
endpoints is that you're not going to

595
00:24:24,370 --> 00:24:26,469
know when some

596
00:24:25,299 --> 00:24:27,700
thing happens you're not gonna know when

597
00:24:26,470 --> 00:24:30,039
a breach happens you're not gonna know

598
00:24:27,700 --> 00:24:32,259
what an incident happens there's a lot

599
00:24:30,039 --> 00:24:34,299
of risk in insider threats within the

600
00:24:32,259 --> 00:24:37,809
cloud um so unless you're getting that

601
00:24:34,299 --> 00:24:39,908
data you're gonna kind of be Sol right

602
00:24:37,809 --> 00:24:41,408
you're not gonna know um what's happened

603
00:24:39,909 --> 00:24:46,299
historically if you're not collecting

604
00:24:41,409 --> 00:24:48,190
all that data originally so kind of

605
00:24:46,299 --> 00:24:52,779
shifting to the the whole forensic view

606
00:24:48,190 --> 00:24:54,220
of of this when dealing with an incident

607
00:24:52,779 --> 00:24:57,429
you need to have that data already

608
00:24:54,220 --> 00:24:59,320
collected if something happens and you

609
00:24:57,429 --> 00:25:01,029
don't have an endpoint telemetry you

610
00:24:59,320 --> 00:25:02,379
don't have endpoint visibility you're

611
00:25:01,029 --> 00:25:03,700
gonna be going back and looking at

612
00:25:02,379 --> 00:25:05,168
artifacts of something that's already

613
00:25:03,700 --> 00:25:07,149
happened we want to collect all that

614
00:25:05,169 --> 00:25:12,210
data up front and then be able to go

615
00:25:07,149 --> 00:25:12,209
back and look at it in a historical view

616
00:25:12,269 --> 00:25:16,600
one of the things that's an issue is

617
00:25:14,590 --> 00:25:18,428
that we're not able in most cases to get

618
00:25:16,600 --> 00:25:20,439
access to the actual hard drive that's

619
00:25:18,429 --> 00:25:22,239
running those virtual machines because

620
00:25:20,440 --> 00:25:24,249
it's distributed and they're in giant

621
00:25:22,239 --> 00:25:26,700
data centers I'm getting that for like a

622
00:25:24,249 --> 00:25:28,989
court case for example is very difficult

623
00:25:26,700 --> 00:25:30,730
the best chance you have is being able

624
00:25:28,989 --> 00:25:32,409
to log every single thing that happened

625
00:25:30,730 --> 00:25:34,179
on the endpoint storing that data and

626
00:25:32,409 --> 00:25:36,340
then being able to use that in a case

627
00:25:34,179 --> 00:25:38,470
saying hey all this stuff happened I

628
00:25:36,340 --> 00:25:40,209
have the data I have the proof and this

629
00:25:38,470 --> 00:25:43,179
is what you know I believe to be the

630
00:25:40,210 --> 00:25:45,639
case another thing that you can't do is

631
00:25:43,179 --> 00:25:47,769
memory analysis unless you have some

632
00:25:45,639 --> 00:25:50,649
agent on the endpoint and you're able to

633
00:25:47,769 --> 00:25:52,690
you know query and dump memory you're

634
00:25:50,649 --> 00:25:55,149
you're gonna be you know useless for

635
00:25:52,690 --> 00:25:57,009
trying to dump specific contents of an

636
00:25:55,149 --> 00:26:02,258
instance unless you can do it at the

637
00:25:57,009 --> 00:26:04,600
time of the incident and again central

638
00:26:02,259 --> 00:26:07,029
storage is key so getting all that data

639
00:26:04,600 --> 00:26:09,549
off the machine itself stored somewhere

640
00:26:07,029 --> 00:26:12,460
else that's secure and archived so that

641
00:26:09,549 --> 00:26:14,259
you can go back and review it the

642
00:26:12,460 --> 00:26:16,480
problem is is if the data is stored on

643
00:26:14,259 --> 00:26:18,279
the endpoint itself someone gets access

644
00:26:16,480 --> 00:26:21,399
to it they can wipe all the data off

645
00:26:18,279 --> 00:26:22,359
once they you know execute their task so

646
00:26:21,399 --> 00:26:24,668
we want to make sure that we're getting

647
00:26:22,359 --> 00:26:26,230
all the data out so that if something

648
00:26:24,669 --> 00:26:28,119
happens to the instance we still have a

649
00:26:26,230 --> 00:26:30,159
history of what happened up to the point

650
00:26:28,119 --> 00:26:35,259
that it got destroyed or the data got

651
00:26:30,159 --> 00:26:37,659
wiped another issue we have focused on

652
00:26:35,259 --> 00:26:39,130
is the east to west problem you know

653
00:26:37,659 --> 00:26:41,410
this is not an issue

654
00:26:39,130 --> 00:26:44,440
just with cloud itself this is an issue

655
00:26:41,410 --> 00:26:46,600
with all kind of on-prem instances if

656
00:26:44,440 --> 00:26:49,630
you do not have East the West visibility

657
00:26:46,600 --> 00:26:52,780
you can't watch or hunt for lateral

658
00:26:49,630 --> 00:26:56,980
movement across an environment so we use

659
00:26:52,780 --> 00:26:59,740
end points to get that visibility from a

660
00:26:56,980 --> 00:27:01,480
lateral movement perspective if one

661
00:26:59,740 --> 00:27:03,520
machine becomes compromised and then it

662
00:27:01,480 --> 00:27:05,920
pivots to another machine if you have

663
00:27:03,520 --> 00:27:07,750
endpoint telemetry you have the ability

664
00:27:05,920 --> 00:27:13,990
to follow that through the entire attack

665
00:27:07,750 --> 00:27:15,880
chain and as I said if you have all the

666
00:27:13,990 --> 00:27:17,560
telemetry you can follow the entire

667
00:27:15,880 --> 00:27:19,810
attack chain you can see where the

668
00:27:17,560 --> 00:27:22,870
contents dropped you can see everything

669
00:27:19,810 --> 00:27:24,820
that the bad guy did as long as it

670
00:27:22,870 --> 00:27:26,860
touches disk and in some cases you can

671
00:27:24,820 --> 00:27:29,500
see portions of the memory attacks as

672
00:27:26,860 --> 00:27:32,020
well but you know without endpoint

673
00:27:29,500 --> 00:27:36,670
visibility you're essentially blind and

674
00:27:32,020 --> 00:27:39,700
then as Jacob mentioned before the whole

675
00:27:36,670 --> 00:27:42,280
encrypted traffic conversation

676
00:27:39,700 --> 00:27:44,410
everything that executes on the endpoint

677
00:27:42,280 --> 00:27:46,899
has to be decrypted at some point to be

678
00:27:44,410 --> 00:27:48,790
able to execute code so if you have that

679
00:27:46,900 --> 00:27:50,320
visibility you can tell the entire story

680
00:27:48,790 --> 00:27:53,110
of how it got there

681
00:27:50,320 --> 00:28:00,909
how it executed and how it communicated

682
00:27:53,110 --> 00:28:03,550
it so let's talk about some ways that

683
00:28:00,910 --> 00:28:05,200
you can execute code so in a few slides

684
00:28:03,550 --> 00:28:07,690
we're gonna go through you know the main

685
00:28:05,200 --> 00:28:10,720
ways to execute code from the top level

686
00:28:07,690 --> 00:28:12,510
down through api's um so I always have a

687
00:28:10,720 --> 00:28:14,620
spiel on PowerShell visibility

688
00:28:12,510 --> 00:28:18,400
PowerShell is very powerful

689
00:28:14,620 --> 00:28:20,379
obviously PowerShell so there's a ton of

690
00:28:18,400 --> 00:28:21,940
great resources out there on how you

691
00:28:20,380 --> 00:28:23,740
should be locking it down

692
00:28:21,940 --> 00:28:25,540
Microsoft put out a great post a few

693
00:28:23,740 --> 00:28:28,060
years ago on how to lock it down

694
00:28:25,540 --> 00:28:30,700
there's countless conference

695
00:28:28,060 --> 00:28:32,649
presentations on hunting for PowerShell

696
00:28:30,700 --> 00:28:34,360
you know detecting bad PowerShell within

697
00:28:32,650 --> 00:28:36,190
environments these are some of my

698
00:28:34,360 --> 00:28:38,800
favorite resources that I posted up here

699
00:28:36,190 --> 00:28:40,660
and as we know when the attacker

700
00:28:38,800 --> 00:28:42,879
community on people love to use

701
00:28:40,660 --> 00:28:48,190
PowerShell because it's so easy to evade

702
00:28:42,880 --> 00:28:50,560
you know traditional EPP solutions so

703
00:28:48,190 --> 00:28:52,810
what can we do about giving getting

704
00:28:50,560 --> 00:28:53,860
visibility in the PowerShell

705
00:28:52,810 --> 00:28:55,419
so there's a bunch of different

706
00:28:53,860 --> 00:28:58,449
configurations that can be enabled on

707
00:28:55,420 --> 00:29:01,420
the back end script lock logging module

708
00:28:58,450 --> 00:29:03,310
logging and transcription in my personal

709
00:29:01,420 --> 00:29:05,200
opinion script block logging is the most

710
00:29:03,310 --> 00:29:07,840
useful out of all of them because it

711
00:29:05,200 --> 00:29:10,090
gives you the decoded PowerShell after

712
00:29:07,840 --> 00:29:13,530
it's run through the interpreter so even

713
00:29:10,090 --> 00:29:16,300
if you know you get a blob of encoded

714
00:29:13,530 --> 00:29:18,910
encrypted PowerShell after it it

715
00:29:16,300 --> 00:29:20,530
executes it has to decrypt all that to

716
00:29:18,910 --> 00:29:23,230
know how to run it I'm so on the back

717
00:29:20,530 --> 00:29:25,090
end you get the transcript the script

718
00:29:23,230 --> 00:29:27,850
lock logging logs and you can see

719
00:29:25,090 --> 00:29:30,070
exactly what the attacker did okay the

720
00:29:27,850 --> 00:29:34,080
biggest problem that we have is that if

721
00:29:30,070 --> 00:29:36,070
you execute scripts from the PowerShell

722
00:29:34,080 --> 00:29:39,010
you don't get visibility into what

723
00:29:36,070 --> 00:29:42,250
actually ran all you know is that it ran

724
00:29:39,010 --> 00:29:45,610
a scripts stuff happens and that's great

725
00:29:42,250 --> 00:29:47,590
as a defender I need to know exactly

726
00:29:45,610 --> 00:29:50,199
what was executed how it was executed

727
00:29:47,590 --> 00:29:53,590
and what it did so we need to get

728
00:29:50,200 --> 00:29:55,450
visibility into that and again I can't

729
00:29:53,590 --> 00:29:58,209
stress this enough getting that data off

730
00:29:55,450 --> 00:29:59,740
the endpoint is key because if someone

731
00:29:58,210 --> 00:30:01,660
gets to be able to execute some code

732
00:29:59,740 --> 00:30:03,910
they're essentially going to be able to

733
00:30:01,660 --> 00:30:05,890
tamper with the data that is living on

734
00:30:03,910 --> 00:30:08,530
that machine if you're not forwarding it

735
00:30:05,890 --> 00:30:12,330
out you cannot trust that data and it

736
00:30:08,530 --> 00:30:12,330
becomes you know no for an investigation

737
00:30:12,930 --> 00:30:16,870
so script lock logging super easy to

738
00:30:16,300 --> 00:30:18,639
implement

739
00:30:16,870 --> 00:30:20,949
I recommend this is implemented across

740
00:30:18,640 --> 00:30:24,490
all infrastructures on Prem cloud

741
00:30:20,950 --> 00:30:27,010
wherever anything that's bad related to

742
00:30:24,490 --> 00:30:28,810
PowerShell will have clear indicators on

743
00:30:27,010 --> 00:30:31,090
the other side of the script block

744
00:30:28,810 --> 00:30:33,520
logging so you should be collecting this

745
00:30:31,090 --> 00:30:35,679
and then if you are looking to do threat

746
00:30:33,520 --> 00:30:38,350
hunting you should be using the decoded

747
00:30:35,680 --> 00:30:39,700
data on the back to look for bad things

748
00:30:38,350 --> 00:30:43,330
that are happening within the

749
00:30:39,700 --> 00:30:44,830
environment and what would be an

750
00:30:43,330 --> 00:30:48,850
endpoint talk without talking about

751
00:30:44,830 --> 00:30:51,389
mitre attack so you know minor attack is

752
00:30:48,850 --> 00:30:55,659
a great framework that we can you know

753
00:30:51,390 --> 00:30:58,630
specifically put attack lifecycles and

754
00:30:55,660 --> 00:31:00,700
categories on the endpoint this is a

755
00:30:58,630 --> 00:31:03,070
list of all the known public attacks

756
00:31:00,700 --> 00:31:05,410
that we've seen that pentesters use that

757
00:31:03,070 --> 00:31:06,399
threat actors use building hunting

758
00:31:05,410 --> 00:31:08,770
capabilities

759
00:31:06,400 --> 00:31:10,480
around this framework is key to being

760
00:31:08,770 --> 00:31:12,670
able to detect bad guys in your

761
00:31:10,480 --> 00:31:13,990
environment it's it's really really

762
00:31:12,670 --> 00:31:16,380
important

763
00:31:13,990 --> 00:31:18,610
and it's one of the one of the best

764
00:31:16,380 --> 00:31:23,320
published frameworks in my opinion for

765
00:31:18,610 --> 00:31:25,810
doing endpoint security hunting so with

766
00:31:23,320 --> 00:31:28,330
that in mind what type of data sources

767
00:31:25,810 --> 00:31:30,370
do we need to get out of instances to be

768
00:31:28,330 --> 00:31:33,250
able to do this sort of hunting so

769
00:31:30,370 --> 00:31:36,580
everything related to endpoint detection

770
00:31:33,250 --> 00:31:39,430
and response is specifically all around

771
00:31:36,580 --> 00:31:41,320
these data sources so file monitoring

772
00:31:39,430 --> 00:31:44,590
process monitoring you know process use

773
00:31:41,320 --> 00:31:46,330
of network all of mitre specific to

774
00:31:44,590 --> 00:31:52,149
endpoint can be mapped back to these

775
00:31:46,330 --> 00:31:54,639
data input sources and because we know

776
00:31:52,150 --> 00:31:56,520
there's a lot of students here you know

777
00:31:54,640 --> 00:31:58,420
how can we do this on the cheap of

778
00:31:56,520 --> 00:32:01,210
course there are some open source

779
00:31:58,420 --> 00:32:04,690
technologies that we can use system on

780
00:32:01,210 --> 00:32:06,630
system monitor does it has an awesome

781
00:32:04,690 --> 00:32:09,670
coverage SKU and we'll go over this

782
00:32:06,630 --> 00:32:11,770
really shortly within the Windows space

783
00:32:09,670 --> 00:32:14,860
I'm always query from you know making

784
00:32:11,770 --> 00:32:16,450
active queries to be able to map to

785
00:32:14,860 --> 00:32:20,199
mitre and there are projects out there

786
00:32:16,450 --> 00:32:22,780
already that have OS query queries that

787
00:32:20,200 --> 00:32:24,480
map to specific mitre techniques um so I

788
00:32:22,780 --> 00:32:26,980
would encourage you checking that out

789
00:32:24,480 --> 00:32:28,960
obviously PowerShell logging um that's

790
00:32:26,980 --> 00:32:31,690
free all you gotta do is collect it and

791
00:32:28,960 --> 00:32:35,050
take it out and on the Linux side again

792
00:32:31,690 --> 00:32:36,550
OS query there's aa Daddy oddity there's

793
00:32:35,050 --> 00:32:39,070
a project out there that's my map

794
00:32:36,550 --> 00:32:41,950
specifically to miter attack great

795
00:32:39,070 --> 00:32:43,960
project again encourage you guys to

796
00:32:41,950 --> 00:32:49,090
check it out and then log stash audit

797
00:32:43,960 --> 00:32:51,490
beat which is oddity on steroids so

798
00:32:49,090 --> 00:32:53,439
talking about sis Mon um what features

799
00:32:51,490 --> 00:32:55,570
and capabilities do we get so we

800
00:32:53,440 --> 00:32:57,340
actually get quite a bit there's a lot

801
00:32:55,570 --> 00:33:00,460
of coverage on that we can get out of

802
00:32:57,340 --> 00:33:02,020
sis Mon natively there is a lot of

803
00:33:00,460 --> 00:33:05,320
different configs that have been put out

804
00:33:02,020 --> 00:33:10,360
by security researchers taylor swift on

805
00:33:05,320 --> 00:33:12,070
security and cyber war dog and olaf is a

806
00:33:10,360 --> 00:33:13,540
there's a ton of good configs that are

807
00:33:12,070 --> 00:33:16,960
maps directly to miter and there's also

808
00:33:13,540 --> 00:33:18,820
you know free elk mappings as well Jacob

809
00:33:16,960 --> 00:33:20,110
talked about it earlier but when you're

810
00:33:18,820 --> 00:33:23,139
taking in data and map

811
00:33:20,110 --> 00:33:25,120
it - you know might our attack sim can

812
00:33:23,140 --> 00:33:26,620
be really powerful for that and there's

813
00:33:25,120 --> 00:33:28,239
a lot of free open source you know

814
00:33:26,620 --> 00:33:31,629
frameworks to be able to utilize that

815
00:33:28,240 --> 00:33:33,880
type of data and shout out the cyber war

816
00:33:31,630 --> 00:33:36,820
dog this is probably a little bit old

817
00:33:33,880 --> 00:33:40,360
but this is a the mitre attack coverage

818
00:33:36,820 --> 00:33:43,360
JSON navigator blob so you can see kind

819
00:33:40,360 --> 00:33:45,370
of the portions if not full coverage of

820
00:33:43,360 --> 00:33:47,559
components of the mitre attack framework

821
00:33:45,370 --> 00:33:49,540
that system on has the capability of

822
00:33:47,559 --> 00:33:54,340
giving some signal source to be able to

823
00:33:49,540 --> 00:33:58,030
provide detection so we're gonna move on

824
00:33:54,340 --> 00:34:01,350
to actually executing code on endpoints

825
00:33:58,030 --> 00:34:04,059
so this is mainly gonna be around

826
00:34:01,350 --> 00:34:06,730
getting code to execute once you get

827
00:34:04,059 --> 00:34:08,109
access some sort of access to content

828
00:34:06,730 --> 00:34:13,030
service provider or a cloud service

829
00:34:08,109 --> 00:34:16,929
provider sorry and we want to focus on

830
00:34:13,030 --> 00:34:19,330
you know top-level downs so kind of the

831
00:34:16,929 --> 00:34:24,490
thing I like to drive home is these VMs

832
00:34:19,330 --> 00:34:27,009
in you know the csps are just VMs so all

833
00:34:24,489 --> 00:34:29,709
the the normal ways to execute code are

834
00:34:27,010 --> 00:34:32,280
their shell code you know script

835
00:34:29,710 --> 00:34:34,810
interpreters binaries it's all the same

836
00:34:32,280 --> 00:34:38,530
they just have more inherent security of

837
00:34:34,810 --> 00:34:41,889
getting that code executed so from

838
00:34:38,530 --> 00:34:43,929
getting access to you know Keys API keys

839
00:34:41,889 --> 00:34:46,419
you have the ability to push code down

840
00:34:43,929 --> 00:34:49,060
so we're gonna cover that on both as

841
00:34:46,418 --> 00:34:51,429
you're in it AWS and then obviously

842
00:34:49,060 --> 00:34:54,100
there's the classic way of if you're

843
00:34:51,429 --> 00:34:56,050
hosting a server in the cloud you're

844
00:34:54,100 --> 00:34:58,420
running a web application it's you know

845
00:34:56,050 --> 00:35:00,609
affected by remote code execution that

846
00:34:58,420 --> 00:35:02,980
can still be targeted the person can get

847
00:35:00,609 --> 00:35:04,359
a shell at that level escalate and then

848
00:35:02,980 --> 00:35:06,790
be able to try and you know pivot

849
00:35:04,359 --> 00:35:10,720
internally so we're gonna focus on

850
00:35:06,790 --> 00:35:12,910
mostly the API to endpoint so in in the

851
00:35:10,720 --> 00:35:14,589
Microsoft Azure space you know one of

852
00:35:12,910 --> 00:35:18,520
the main ways that you can execute code

853
00:35:14,590 --> 00:35:22,000
from API so there's run command there's

854
00:35:18,520 --> 00:35:26,470
custom script extension there's hybrid

855
00:35:22,000 --> 00:35:27,790
run book worker and serial console we're

856
00:35:26,470 --> 00:35:30,129
specifically on this talk going to talk

857
00:35:27,790 --> 00:35:32,940
about run command in the custom script

858
00:35:30,130 --> 00:35:35,490
extension so

859
00:35:32,940 --> 00:35:39,630
run command is a way to execute code

860
00:35:35,490 --> 00:35:42,259
across your VM infrastructure it's used

861
00:35:39,630 --> 00:35:44,760
for you know tons of legitimate purposes

862
00:35:42,260 --> 00:35:47,400
you can do it through Azure portal the

863
00:35:44,760 --> 00:35:50,819
REST API as your CLI or the the

864
00:35:47,400 --> 00:35:53,430
top-level powershell commandlets and

865
00:35:50,819 --> 00:35:57,089
it's it's typically used to update or

866
00:35:53,430 --> 00:36:00,270
install applications so of course great

867
00:35:57,089 --> 00:36:02,040
great functionality thanks Microsoft so

868
00:36:00,270 --> 00:36:05,190
it also requires a certain level of

869
00:36:02,040 --> 00:36:07,650
permissions so you know you need the

870
00:36:05,190 --> 00:36:09,599
ability to hit the run command action

871
00:36:07,650 --> 00:36:11,579
permission and you need to be able to

872
00:36:09,599 --> 00:36:15,329
have access to the the virtual machine

873
00:36:11,579 --> 00:36:18,180
itself and what's interesting is that

874
00:36:15,329 --> 00:36:20,760
every single one of these drops the

875
00:36:18,180 --> 00:36:22,859
actual script to disk so anything that's

876
00:36:20,760 --> 00:36:25,560
run is drop the disk so that's great

877
00:36:22,859 --> 00:36:27,900
right you know as a defender a copy of

878
00:36:25,560 --> 00:36:29,750
that script is super useful for me so

879
00:36:27,900 --> 00:36:33,780
this is kind of the flow that we follow

880
00:36:29,750 --> 00:36:36,660
we have the run command extension or

881
00:36:33,780 --> 00:36:39,450
sorry the Windows Azure guest agent

882
00:36:36,660 --> 00:36:42,839
which invokes to command prompts which

883
00:36:39,450 --> 00:36:47,879
then invokes the run command exe which

884
00:36:42,839 --> 00:36:50,430
then executes the PowerShell so as you

885
00:36:47,880 --> 00:36:52,500
can see here when the PowerShell is

886
00:36:50,430 --> 00:36:53,940
actually called um you know it's calling

887
00:36:52,500 --> 00:36:55,560
a script because we're dropping the

888
00:36:53,940 --> 00:36:58,140
script to disk it's calling the script

889
00:36:55,560 --> 00:36:59,730
and then it's executing it so we don't

890
00:36:58,140 --> 00:37:03,540
get much visibility here right like what

891
00:36:59,730 --> 00:37:05,190
what did the script do but a good thing

892
00:37:03,540 --> 00:37:08,069
that they drop all the scripts to disk

893
00:37:05,190 --> 00:37:10,020
so then you know as a defender I have

894
00:37:08,069 --> 00:37:11,790
the ability to go and I have the ability

895
00:37:10,020 --> 00:37:13,530
to look at the script what was executed

896
00:37:11,790 --> 00:37:18,029
the content that was provided all this

897
00:37:13,530 --> 00:37:19,710
great stuff but you can just appended

898
00:37:18,030 --> 00:37:21,780
the lead on the back end and then it

899
00:37:19,710 --> 00:37:23,310
deletes all the content so you can't

900
00:37:21,780 --> 00:37:26,369
review hit so you're essentially blind

901
00:37:23,310 --> 00:37:28,078
when that script executes because all

902
00:37:26,369 --> 00:37:30,180
the content that was stored if you

903
00:37:28,079 --> 00:37:31,920
weren't logging at the time is deleted

904
00:37:30,180 --> 00:37:37,020
so that there's nothing really to see

905
00:37:31,920 --> 00:37:38,819
here ah but let us go to the logs so if

906
00:37:37,020 --> 00:37:41,880
you have a script lock logging enabled

907
00:37:38,819 --> 00:37:46,619
you're actually going to get the content

908
00:37:41,880 --> 00:37:48,690
as it's executed so in this

909
00:37:46,619 --> 00:37:51,450
civic example you know I turned off

910
00:37:48,690 --> 00:37:53,730
Windows Defender grades and I also

911
00:37:51,450 --> 00:37:56,189
deleted all the script contents so you

912
00:37:53,730 --> 00:37:57,660
can you know let your minds wander and

913
00:37:56,190 --> 00:37:58,740
what could be done here in this this

914
00:37:57,660 --> 00:38:02,490
type of situation

915
00:37:58,740 --> 00:38:04,609
so again logging is really important but

916
00:38:02,490 --> 00:38:08,008
the Linux flow is a bit different

917
00:38:04,609 --> 00:38:11,490
obviously you know bash run command bash

918
00:38:08,009 --> 00:38:14,400
and then execute the commands again the

919
00:38:11,490 --> 00:38:16,078
scripts are dropped the disk but again

920
00:38:14,400 --> 00:38:17,970
we have the capability of deleting that

921
00:38:16,079 --> 00:38:22,619
if we just append content onto the back

922
00:38:17,970 --> 00:38:25,470
end of it and then on the custom script

923
00:38:22,619 --> 00:38:27,420
extension side very similar you know

924
00:38:25,470 --> 00:38:29,480
it's used for legitimate purposes it

925
00:38:27,420 --> 00:38:32,190
requires a certain level of permissions

926
00:38:29,480 --> 00:38:33,900
very similar to the the run command

927
00:38:32,190 --> 00:38:35,970
it's just executed in a different way

928
00:38:33,900 --> 00:38:38,519
the scripts are also dropped the disk

929
00:38:35,970 --> 00:38:42,058
here if you're trying to do something

930
00:38:38,519 --> 00:38:43,618
bad there has a timeout on it so if you

931
00:38:42,059 --> 00:38:45,660
know you're sending a reverse shell

932
00:38:43,619 --> 00:38:48,119
built-in through power shell you know

933
00:38:45,660 --> 00:38:50,519
that type of thing that's gonna die

934
00:38:48,119 --> 00:38:52,230
after about 90 minutes I'm so you'd want

935
00:38:50,519 --> 00:38:54,029
to create a scheduled task or something

936
00:38:52,230 --> 00:38:54,509
to you know get some persistence on the

937
00:38:54,029 --> 00:38:56,819
box

938
00:38:54,509 --> 00:38:58,859
you know presumably and this is the

939
00:38:56,819 --> 00:39:00,480
workflow for the custom script extension

940
00:38:58,859 --> 00:39:02,970
from the portal itself of course this

941
00:39:00,480 --> 00:39:05,730
can be done through API so when you

942
00:39:02,970 --> 00:39:06,930
upload a script to be executed it gets

943
00:39:05,730 --> 00:39:10,349
uploaded to a temporary storage

944
00:39:06,930 --> 00:39:12,629
container when it executes s-- you get

945
00:39:10,349 --> 00:39:16,019
the standard error and standard out from

946
00:39:12,630 --> 00:39:18,119
the script execution and it has a very

947
00:39:16,019 --> 00:39:21,779
similar flow to the original run command

948
00:39:18,119 --> 00:39:24,480
execution so it's the guest agent which

949
00:39:21,779 --> 00:39:27,119
invokes command which invokes the custom

950
00:39:24,480 --> 00:39:29,700
scripts interpreter which then executes

951
00:39:27,119 --> 00:39:31,319
the powershell and again we're kind of

952
00:39:29,700 --> 00:39:33,629
limited on what we see here because it's

953
00:39:31,319 --> 00:39:36,269
executing a PowerShell script it's not a

954
00:39:33,630 --> 00:39:38,849
powershell one-liner so logging is

955
00:39:36,269 --> 00:39:40,589
really important and of course you know

956
00:39:38,849 --> 00:39:43,289
it's dropped into a different directory

957
00:39:40,589 --> 00:39:45,808
but of we know where it is so you can

958
00:39:43,289 --> 00:39:47,099
you know expunge all of the proof of

959
00:39:45,809 --> 00:39:49,170
something running within the environment

960
00:39:47,099 --> 00:39:53,220
unless you're logging at the time of

961
00:39:49,170 --> 00:39:55,259
execution and an example of how this

962
00:39:53,220 --> 00:39:58,109
runs from a custom script extension

963
00:39:55,259 --> 00:40:00,380
perspective on Linux very interesting it

964
00:39:58,109 --> 00:40:02,598
actually gets done through Python

965
00:40:00,380 --> 00:40:04,400
so Python calls bash which calls another

966
00:40:02,599 --> 00:40:07,849
Python interpreter which doesn't execute

967
00:40:04,400 --> 00:40:11,450
the script code and again it is it's all

968
00:40:07,849 --> 00:40:13,730
done through script files and this also

969
00:40:11,450 --> 00:40:17,509
drops at the disk and we also have the

970
00:40:13,730 --> 00:40:20,210
capability of deleting it again so

971
00:40:17,509 --> 00:40:23,950
moving on to the the azure the AWS side

972
00:40:20,210 --> 00:40:26,539
so there's two main methods of doing

973
00:40:23,950 --> 00:40:30,319
execution code execution from the API

974
00:40:26,539 --> 00:40:31,910
down which is AWS system manager which

975
00:40:30,319 --> 00:40:35,839
is run command and then there's also

976
00:40:31,910 --> 00:40:38,359
user data and metadata execution so very

977
00:40:35,839 --> 00:40:41,869
much like the azure side it works the

978
00:40:38,359 --> 00:40:44,509
exact same way it's legitimately used to

979
00:40:41,869 --> 00:40:46,519
install and update packages the

980
00:40:44,509 --> 00:40:49,579
requirements are a little different

981
00:40:46,519 --> 00:40:51,680
you need the Amazon ec2 rule for SSM and

982
00:40:49,579 --> 00:40:53,779
then you need to access the user needs

983
00:40:51,680 --> 00:40:56,569
access with the API key needs access to

984
00:40:53,779 --> 00:41:00,019
the actual instance so the workflow for

985
00:40:56,569 --> 00:41:02,779
this is very similar the SSM agent

986
00:41:00,019 --> 00:41:05,750
execute power shell which then calls the

987
00:41:02,779 --> 00:41:08,990
powershell script again because it's a

988
00:41:05,750 --> 00:41:10,789
script we only get the visibility into

989
00:41:08,990 --> 00:41:13,839
the script executing we don't actually

990
00:41:10,789 --> 00:41:18,559
see what the code was on the back end

991
00:41:13,839 --> 00:41:21,650
this also drops it's a disk so we have

992
00:41:18,559 --> 00:41:23,690
you know data on the disk itself but if

993
00:41:21,650 --> 00:41:26,539
the bad guy appended a delete function

994
00:41:23,690 --> 00:41:32,660
on the end you know we'd be we'd be

995
00:41:26,539 --> 00:41:36,410
screwed to be able to find that so in

996
00:41:32,660 --> 00:41:39,019
summary logging activity from the CSP

997
00:41:36,410 --> 00:41:41,420
api is micro service and endpoint logs

998
00:41:39,019 --> 00:41:42,649
is key for visibility we can't stress

999
00:41:41,420 --> 00:41:45,049
enough that if you're not getting

1000
00:41:42,650 --> 00:41:47,690
visibility into your endpoints you have

1001
00:41:45,049 --> 00:41:50,450
no idea what's executing because the CSP

1002
00:41:47,690 --> 00:41:52,940
only tells you that content is executing

1003
00:41:50,450 --> 00:41:55,189
not what it is which is a serious

1004
00:41:52,940 --> 00:41:57,650
problem from our perspective always

1005
00:41:55,190 --> 00:42:00,680
enable script lock logging across any

1006
00:41:57,650 --> 00:42:04,329
environment on Prem Cloud wherever in

1007
00:42:00,680 --> 00:42:08,390
stock data in an experiment for yourself

1008
00:42:04,329 --> 00:42:11,359
so as your GCP there's a bunch of

1009
00:42:08,390 --> 00:42:12,828
different free service offerings for you

1010
00:42:11,359 --> 00:42:14,240
know just to be able to test

1011
00:42:12,829 --> 00:42:17,240
functionality test feature

1012
00:42:14,240 --> 00:42:20,270
to see how it works what can be used and

1013
00:42:17,240 --> 00:42:22,700
you know different functionalities so we

1014
00:42:20,270 --> 00:42:24,890
recommend that and alka is a free tool

1015
00:42:22,700 --> 00:42:26,509
has a lot of power and there's a ton of

1016
00:42:24,890 --> 00:42:28,730
content out there from other security

1017
00:42:26,510 --> 00:42:31,220
researchers on how to leverage it to do

1018
00:42:28,730 --> 00:42:33,710
threat hunting it can be you know a

1019
00:42:31,220 --> 00:42:38,029
really powerful tool that's very cost

1020
00:42:33,710 --> 00:42:39,700
effective long run anyways thanks

1021
00:42:38,030 --> 00:42:43,510
everyone for listening to our talk and

1022
00:42:39,700 --> 00:42:43,509
we'll answer some questions

