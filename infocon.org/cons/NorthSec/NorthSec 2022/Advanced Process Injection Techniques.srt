1
00:00:00,000 --> 00:00:02,320
yes

2
00:00:03,439 --> 00:00:04,720
so

3
00:00:04,720 --> 00:00:07,040
let me introduce myself so i'm currently

4
00:00:07,040 --> 00:00:09,519
working in cyber warfare lab as a red

5
00:00:09,519 --> 00:00:11,599
team security researcher

6
00:00:11,599 --> 00:00:13,040
and i have

7
00:00:13,040 --> 00:00:15,440
sorry

8
00:00:15,440 --> 00:00:18,240
and i have three years of three plus

9
00:00:18,240 --> 00:00:19,760
years of experience in reverse

10
00:00:19,760 --> 00:00:22,640
engineering and mostly i'm interested in

11
00:00:22,640 --> 00:00:25,680
reversing the internals and

12
00:00:25,680 --> 00:00:26,960
malwares

13
00:00:26,960 --> 00:00:27,680
and

14
00:00:27,680 --> 00:00:29,599
right now

15
00:00:29,599 --> 00:00:31,519
i'm currently focusing the

16
00:00:31,519 --> 00:00:34,000
windows internal sandal

17
00:00:34,000 --> 00:00:34,330
so

18
00:00:34,330 --> 00:00:36,399
[Music]

19
00:00:36,399 --> 00:00:38,960
so i hope you guys all have uh

20
00:00:38,960 --> 00:00:41,520
downloaded all the prerequisite that

21
00:00:41,520 --> 00:00:45,600
that that we have mentioned here

22
00:00:45,600 --> 00:00:48,239
yeah okay

23
00:00:49,920 --> 00:00:51,280
so

24
00:00:51,280 --> 00:00:53,920
so uh let me just begin with the

25
00:00:53,920 --> 00:00:56,640
so let's just begin the

26
00:00:56,640 --> 00:00:59,039
session now

27
00:00:59,039 --> 00:01:01,600
so i'm gonna go quick on this p file

28
00:01:01,600 --> 00:01:03,520
format because we have a lot to cover

29
00:01:03,520 --> 00:01:05,600
here you can see we are covering seven

30
00:01:05,600 --> 00:01:07,360
injection technique

31
00:01:07,360 --> 00:01:09,840
now which is which which is lot more to

32
00:01:09,840 --> 00:01:12,640
cover in the in a day so

33
00:01:12,640 --> 00:01:14,560
i'm just going to go quick in the

34
00:01:14,560 --> 00:01:15,920
p

35
00:01:15,920 --> 00:01:18,560
file format

36
00:01:18,560 --> 00:01:21,600
so pp file format is particularly

37
00:01:21,600 --> 00:01:23,759
particularly a file format for the

38
00:01:23,759 --> 00:01:26,400
executable dlls of the code in the

39
00:01:26,400 --> 00:01:29,600
windows operating system

40
00:01:32,000 --> 00:01:34,159
so there are few importance header on

41
00:01:34,159 --> 00:01:36,640
the pe file format

42
00:01:36,640 --> 00:01:38,960
which are the setter and the header and

43
00:01:38,960 --> 00:01:41,280
inside the anti-header there are file

44
00:01:41,280 --> 00:01:43,680
header and optional header

45
00:01:43,680 --> 00:01:45,520
and the last header is the section

46
00:01:45,520 --> 00:01:47,840
header

47
00:01:47,840 --> 00:01:51,520
let me just turn on the laser now

48
00:01:53,119 --> 00:01:55,600
so you can see these are the uh

49
00:01:55,600 --> 00:01:57,439
these are the headers that we that i

50
00:01:57,439 --> 00:02:00,240
just talked about

51
00:02:01,119 --> 00:02:03,360
so those header is the first header of

52
00:02:03,360 --> 00:02:06,560
the pe file format and this is the 64

53
00:02:06,560 --> 00:02:09,119
byte long structure and you can see

54
00:02:09,119 --> 00:02:11,680
there are lots of member here but we are

55
00:02:11,680 --> 00:02:14,319
only interested in e-magic and then

56
00:02:14,319 --> 00:02:16,640
alpha new

57
00:02:16,640 --> 00:02:19,040
the e-magic is the first members and it

58
00:02:19,040 --> 00:02:21,440
hold the signature of the dos file which

59
00:02:21,440 --> 00:02:24,800
is the mz uh we all know that it's the

60
00:02:24,800 --> 00:02:27,280
mz

61
00:02:27,680 --> 00:02:30,959
so uh the another another member is the

62
00:02:30,959 --> 00:02:33,920
alpha nu uh which hold the offset to the

63
00:02:33,920 --> 00:02:36,959
start of the anti-header so let's say

64
00:02:36,959 --> 00:02:39,760
whenever we are parsing the p header uh

65
00:02:39,760 --> 00:02:41,519
in our code

66
00:02:41,519 --> 00:02:42,319
so

67
00:02:42,319 --> 00:02:44,319
if we parse the dos header

68
00:02:44,319 --> 00:02:46,879
and if we add the alpha nu offset to

69
00:02:46,879 --> 00:02:48,400
that dos header we will use to the

70
00:02:48,400 --> 00:02:50,400
anti-heaters that's why the alpha new

71
00:02:50,400 --> 00:02:53,760
header is important to us

72
00:02:54,160 --> 00:02:56,640
so this is the

73
00:02:56,640 --> 00:02:58,400
so this is the

74
00:02:58,400 --> 00:03:00,400
sorry this is the dos header and all the

75
00:03:00,400 --> 00:03:01,840
members are here

76
00:03:01,840 --> 00:03:05,840
which is which is in the pe view

77
00:03:06,720 --> 00:03:08,480
so the

78
00:03:08,480 --> 00:03:10,560
another header is the anti-header this

79
00:03:10,560 --> 00:03:12,480
is the primary structure for the p

80
00:03:12,480 --> 00:03:14,959
header and it is of type image

81
00:03:14,959 --> 00:03:16,720
anti-headers

82
00:03:16,720 --> 00:03:19,040
so this consists of three members which

83
00:03:19,040 --> 00:03:21,120
are signature file header and optional

84
00:03:21,120 --> 00:03:23,519
header

85
00:03:24,560 --> 00:03:27,040
so signature is a four byte d word and

86
00:03:27,040 --> 00:03:30,080
it holds the value p followed by the two

87
00:03:30,080 --> 00:03:32,640
terminating zero you can see there is a

88
00:03:32,640 --> 00:03:35,120
p and followed by two terminating zero

89
00:03:35,120 --> 00:03:37,360
here

90
00:03:38,400 --> 00:03:40,799
so the next header is the file header uh

91
00:03:40,799 --> 00:03:44,239
file header is a 20 byte long structure

92
00:03:44,239 --> 00:03:46,080
and this header contains basic

93
00:03:46,080 --> 00:03:48,239
information of the pe file

94
00:03:48,239 --> 00:03:50,640
and the one that is important for us is

95
00:03:50,640 --> 00:03:53,200
the number of section for our project

96
00:03:53,200 --> 00:03:56,159
but uh the few other uh informations are

97
00:03:56,159 --> 00:03:58,400
here which are mis these are the machine

98
00:03:58,400 --> 00:04:00,159
architecture

99
00:04:00,159 --> 00:04:02,640
and the time date stamp pointed to the

100
00:04:02,640 --> 00:04:05,519
symbol table table number of symbols

101
00:04:05,519 --> 00:04:06,879
size of optional header and

102
00:04:06,879 --> 00:04:09,840
characteristics

103
00:04:10,959 --> 00:04:12,000
so

104
00:04:12,000 --> 00:04:14,560
let's come to the optional header uh

105
00:04:14,560 --> 00:04:17,600
this is the most crucial this uh the

106
00:04:17,600 --> 00:04:20,079
most visual fields are contained in this

107
00:04:20,079 --> 00:04:21,519
optional header

108
00:04:21,519 --> 00:04:23,759
even though the name of this header is

109
00:04:23,759 --> 00:04:25,360
the optional

110
00:04:25,360 --> 00:04:27,520
so some of the important fields are

111
00:04:27,520 --> 00:04:30,240
image base address of the entry point

112
00:04:30,240 --> 00:04:32,479
subsystem section alignment file

113
00:04:32,479 --> 00:04:35,199
alignment size of the code and the image

114
00:04:35,199 --> 00:04:37,680
data directory so data directory is an

115
00:04:37,680 --> 00:04:39,520
array of the image data directory

116
00:04:39,520 --> 00:04:42,479
structure this is structure holes two

117
00:04:42,479 --> 00:04:44,800
members which are virtual address and

118
00:04:44,800 --> 00:04:47,199
the size

119
00:04:47,199 --> 00:04:49,840
so this is the structure of the optional

120
00:04:49,840 --> 00:04:52,880
header you can see

121
00:04:54,720 --> 00:04:57,199
so the virtual address now points to the

122
00:04:57,199 --> 00:04:58,800
relative version address of the

123
00:04:58,800 --> 00:05:01,199
particular directory and the size holds

124
00:05:01,199 --> 00:05:03,919
the size of that particular directory

125
00:05:03,919 --> 00:05:06,400
so in the data directory array there are

126
00:05:06,400 --> 00:05:09,120
east elements point to some of some

127
00:05:09,120 --> 00:05:11,360
important information such as import

128
00:05:11,360 --> 00:05:13,759
address table export address table

129
00:05:13,759 --> 00:05:15,600
resource table

130
00:05:15,600 --> 00:05:20,080
so here are the list of the directories

131
00:05:23,360 --> 00:05:26,720
so the last header is the section header

132
00:05:26,720 --> 00:05:29,280
which contains the important information

133
00:05:29,280 --> 00:05:31,280
related to the related to the sections

134
00:05:31,280 --> 00:05:34,160
such as name of sections virtual address

135
00:05:34,160 --> 00:05:36,639
virtual size and size of the raw data

136
00:05:36,639 --> 00:05:40,400
pointed to the raw data etc

137
00:05:40,400 --> 00:05:42,479
so these are the common these are the

138
00:05:42,479 --> 00:05:44,320
common section

139
00:05:44,320 --> 00:05:46,000
of the executables

140
00:05:46,000 --> 00:05:48,560
uh text section and the r data section

141
00:05:48,560 --> 00:05:50,400
data section research section and the

142
00:05:50,400 --> 00:05:53,840
relocation section

143
00:05:54,639 --> 00:05:56,560
so now we

144
00:05:56,560 --> 00:05:58,400
we wish the first

145
00:05:58,400 --> 00:06:00,160
injection technique of this video

146
00:06:00,160 --> 00:06:02,560
session

147
00:06:02,639 --> 00:06:03,680
so

148
00:06:03,680 --> 00:06:06,400
let's just get started with this

149
00:06:06,400 --> 00:06:08,639
injection technique so this is the apc

150
00:06:08,639 --> 00:06:10,560
code injection technique

151
00:06:10,560 --> 00:06:12,960
so apc stands for the asynchronous

152
00:06:12,960 --> 00:06:14,720
procedure call

153
00:06:14,720 --> 00:06:16,720
this is a really nice feature of the

154
00:06:16,720 --> 00:06:18,960
windows operating system

155
00:06:18,960 --> 00:06:21,520
that allows us to place a job in a queue

156
00:06:21,520 --> 00:06:24,240
for execution uh

157
00:06:24,240 --> 00:06:26,479
in context of the particular threat so

158
00:06:26,479 --> 00:06:28,720
basically uh in this technique we are

159
00:06:28,720 --> 00:06:31,440
placing our cell code in a pcq

160
00:06:31,440 --> 00:06:33,680
of the process trade and whenever this

161
00:06:33,680 --> 00:06:36,000
process threat enters into the all the

162
00:06:36,000 --> 00:06:38,000
table state our cell code will get

163
00:06:38,000 --> 00:06:39,440
executed

164
00:06:39,440 --> 00:06:41,440
the sum of the routing that might put

165
00:06:41,440 --> 00:06:44,240
the thread in all the table states are

166
00:06:44,240 --> 00:06:46,880
slip ex single object and weight wait

167
00:06:46,880 --> 00:06:48,880
for single lock ctx i'll wait for

168
00:06:48,880 --> 00:06:50,960
multiple object ex and there are few

169
00:06:50,960 --> 00:06:53,280
others

170
00:06:53,840 --> 00:06:55,840
so these are the steps for the apc

171
00:06:55,840 --> 00:06:58,160
injection first we need to find the

172
00:06:58,160 --> 00:07:00,960
target process to inject our pill boot

173
00:07:00,960 --> 00:07:03,120
and after that we need to perform the

174
00:07:03,120 --> 00:07:05,360
relocation sorry we need to perform the

175
00:07:05,360 --> 00:07:07,440
remote allocation

176
00:07:07,440 --> 00:07:09,440
after that we will write our payload

177
00:07:09,440 --> 00:07:11,840
into that newly allocated memory in the

178
00:07:11,840 --> 00:07:13,840
in the target process

179
00:07:13,840 --> 00:07:16,400
so after writing the payload we have to

180
00:07:16,400 --> 00:07:19,199
find all the trades which is present in

181
00:07:19,199 --> 00:07:21,440
that target process

182
00:07:21,440 --> 00:07:23,599
once we find all the threads we will

183
00:07:23,599 --> 00:07:25,599
place our sell code in the queue for all

184
00:07:25,599 --> 00:07:28,080
the threads and whenever the threads

185
00:07:28,080 --> 00:07:30,479
enter into the outlet table state our

186
00:07:30,479 --> 00:07:32,720
cell code will get executed

187
00:07:32,720 --> 00:07:34,960
so this is to note that this uh this

188
00:07:34,960 --> 00:07:37,599
technique is quite unstable so there is

189
00:07:37,599 --> 00:07:38,400
a

190
00:07:38,400 --> 00:07:40,880
there is a different variant of this apc

191
00:07:40,880 --> 00:07:42,800
injection which is also known as the

192
00:07:42,800 --> 00:07:44,960
early bird apc injection

193
00:07:44,960 --> 00:07:47,039
which we will be going to cover in the

194
00:07:47,039 --> 00:07:50,000
lab session so

195
00:07:50,000 --> 00:07:52,000
so these are all the api calls that are

196
00:07:52,000 --> 00:07:55,360
used in this apc injection

197
00:07:55,360 --> 00:07:59,560
so let's move to the lab

198
00:08:00,080 --> 00:08:03,080
okay

199
00:08:12,800 --> 00:08:13,840
so

200
00:08:13,840 --> 00:08:17,039
is my vm visible

201
00:08:21,039 --> 00:08:22,160
yes

202
00:08:22,160 --> 00:08:25,160
okay

203
00:08:26,160 --> 00:08:27,520
okay so

204
00:08:27,520 --> 00:08:29,599
here in the server here in the line

205
00:08:29,599 --> 00:08:31,719
number 300 at

206
00:08:31,719 --> 00:08:33,599
237

207
00:08:33,599 --> 00:08:36,159
uh i have commented this out so let's

208
00:08:36,159 --> 00:08:38,958
just uncomment this line

209
00:08:38,958 --> 00:08:42,958
and i will comment this line number 236

210
00:08:42,958 --> 00:08:46,800
so uh this is the just the

211
00:08:46,800 --> 00:08:48,560
this is just the variable which will

212
00:08:48,560 --> 00:08:50,399
allows us to switch between early bird

213
00:08:50,399 --> 00:08:53,440
and the normal abc injection

214
00:08:53,440 --> 00:08:55,200
so

215
00:08:55,200 --> 00:08:57,519
i hope you guys have

216
00:08:57,519 --> 00:08:59,920
uh have all the vm ready

217
00:08:59,920 --> 00:09:02,000
to

218
00:09:02,000 --> 00:09:06,839
to go way to go to go with me

219
00:09:09,760 --> 00:09:13,040
so before uh executing this application

220
00:09:13,040 --> 00:09:14,240
i will just

221
00:09:14,240 --> 00:09:15,680
put the breakpoint

222
00:09:15,680 --> 00:09:17,680
so the breakpoint i have already put the

223
00:09:17,680 --> 00:09:21,279
breakpoint here at line number 117

224
00:09:21,279 --> 00:09:23,519
so i'll just execute this

225
00:09:23,519 --> 00:09:26,080
application

226
00:09:34,720 --> 00:09:38,720
so uh the target process for our for our

227
00:09:38,720 --> 00:09:42,160
uh implant is the notepad.exe so

228
00:09:42,160 --> 00:09:45,040
i will just open this 32-bit notepad

229
00:09:45,040 --> 00:09:49,440
which is which is in the cs4 directory

230
00:09:49,440 --> 00:09:54,000
so this is our victim process

231
00:09:57,519 --> 00:10:00,959
yeah so we have the victim process open

232
00:10:00,959 --> 00:10:03,519
so let me just go into this

233
00:10:03,519 --> 00:10:07,279
uh find target process function

234
00:10:07,680 --> 00:10:11,200
so uh here we can see uh using the

235
00:10:11,200 --> 00:10:14,320
of using the api called great tool help

236
00:10:14,320 --> 00:10:16,640
32 snapshot we are taking the snapshot

237
00:10:16,640 --> 00:10:19,279
of the process as well as the snapshot

238
00:10:19,279 --> 00:10:21,600
of the thread

239
00:10:21,600 --> 00:10:25,279
so let me just step over this code

240
00:10:25,279 --> 00:10:27,279
and with the help of this process 32

241
00:10:27,279 --> 00:10:29,920
first we are retrieving the first

242
00:10:29,920 --> 00:10:34,800
process from the snapshot

243
00:10:35,040 --> 00:10:38,079
and after that we are comparing whether

244
00:10:38,079 --> 00:10:39,040
the

245
00:10:39,040 --> 00:10:40,560
whether the

246
00:10:40,560 --> 00:10:42,480
process from the snapshot is equal to

247
00:10:42,480 --> 00:10:44,640
our target process so our target process

248
00:10:44,640 --> 00:10:46,959
is notepad and

249
00:10:46,959 --> 00:10:48,640
and currently it's pointing to the

250
00:10:48,640 --> 00:10:50,560
system process

251
00:10:50,560 --> 00:10:53,040
so once this

252
00:10:53,040 --> 00:10:54,640
is equal to the

253
00:10:54,640 --> 00:10:56,959
process our target process it will enter

254
00:10:56,959 --> 00:10:58,800
this if block

255
00:10:58,800 --> 00:11:01,519
so if it is not equal to our target

256
00:11:01,519 --> 00:11:03,440
process it will just simply

257
00:11:03,440 --> 00:11:05,920
go and call the process 32 next function

258
00:11:05,920 --> 00:11:08,399
which will retrieve the next

259
00:11:08,399 --> 00:11:11,200
process from the snapshot

260
00:11:11,200 --> 00:11:13,600
so this process goes until uh it is

261
00:11:13,600 --> 00:11:16,560
equal to our notepad so i'm just gonna

262
00:11:16,560 --> 00:11:19,519
put the breakpoint at line number 27

263
00:11:19,519 --> 00:11:22,079
and i will continue the execution

264
00:11:22,079 --> 00:11:24,640
so now you can see we are

265
00:11:24,640 --> 00:11:28,000
inside the if block

266
00:11:28,000 --> 00:11:30,160
so we are doing the same thing for the

267
00:11:30,160 --> 00:11:32,880
thread as well

268
00:11:33,040 --> 00:11:33,920
so

269
00:11:33,920 --> 00:11:36,640
we are just getting the first thread and

270
00:11:36,640 --> 00:11:37,440
here

271
00:11:37,440 --> 00:11:38,160
uh

272
00:11:38,160 --> 00:11:40,399
here there is a if lock you can see

273
00:11:40,399 --> 00:11:43,279
so we are checking whether the

274
00:11:43,279 --> 00:11:45,920
the whether the threats owner is whether

275
00:11:45,920 --> 00:11:48,320
the trade owner id is equal to our

276
00:11:48,320 --> 00:11:51,279
target process id so if the trade owner

277
00:11:51,279 --> 00:11:53,760
id is equal to our target process id uh

278
00:11:53,760 --> 00:11:57,440
we will push that trade id into the

279
00:11:57,440 --> 00:12:00,560
uh into into the vector or we or we can

280
00:12:00,560 --> 00:12:02,240
just

281
00:12:02,240 --> 00:12:04,480
add this thread id into the

282
00:12:04,480 --> 00:12:07,279
arrays also

283
00:12:09,200 --> 00:12:11,680
so here basically we are just collecting

284
00:12:11,680 --> 00:12:13,600
all the threads that are uh that are

285
00:12:13,600 --> 00:12:16,079
inside the notepad so let me just go

286
00:12:16,079 --> 00:12:18,399
here and show you so there is only one

287
00:12:18,399 --> 00:12:20,880
thread currently so it will just

288
00:12:20,880 --> 00:12:25,639
uh get that thread for us

289
00:12:28,000 --> 00:12:31,120
so our three donor is for like um

290
00:12:31,120 --> 00:12:32,880
because we want to

291
00:12:32,880 --> 00:12:34,959
get all the threads of the

292
00:12:34,959 --> 00:12:37,760
notepad right this is our target process

293
00:12:37,760 --> 00:12:40,160
so this is checking the trade owner is

294
00:12:40,160 --> 00:12:42,079
checking that whether this

295
00:12:42,079 --> 00:12:44,480
the process id of the trade owner is

296
00:12:44,480 --> 00:12:46,800
equal to our process id which is

297
00:12:46,800 --> 00:12:49,120
one two two zero zero

298
00:12:49,120 --> 00:12:52,120
so

299
00:12:54,320 --> 00:12:57,519
no no not code thread but uh yeah it's

300
00:12:57,519 --> 00:12:59,680
it's the like we have the process you

301
00:12:59,680 --> 00:13:01,920
can see it see it's the notepad.exe

302
00:13:01,920 --> 00:13:03,680
right so the

303
00:13:03,680 --> 00:13:06,959
process id is one two two zero zero and

304
00:13:06,959 --> 00:13:09,600
let's see uh here we are checking

305
00:13:09,600 --> 00:13:10,800
let's say

306
00:13:10,800 --> 00:13:12,720
we have got this straight from the

307
00:13:12,720 --> 00:13:13,920
snapshot

308
00:13:13,920 --> 00:13:16,639
so this is checking that whether this uh

309
00:13:16,639 --> 00:13:19,920
whether this thread owner id is one

310
00:13:19,920 --> 00:13:20,800
zero

311
00:13:20,800 --> 00:13:23,360
or not if it's if it is equal to one two

312
00:13:23,360 --> 00:13:24,079
two

313
00:13:24,079 --> 00:13:25,600
zero zero then

314
00:13:25,600 --> 00:13:28,720
uh then the process then the owner id

315
00:13:28,720 --> 00:13:31,360
processes will be equal to the

316
00:13:31,360 --> 00:13:35,839
on this this target process on id

317
00:13:35,839 --> 00:13:37,839
so here basically we are just collecting

318
00:13:37,839 --> 00:13:39,360
this thread id

319
00:13:39,360 --> 00:13:41,279
from our target process

320
00:13:41,279 --> 00:13:45,279
and putting it into the vector array

321
00:13:47,040 --> 00:13:48,560
so

322
00:13:48,560 --> 00:13:52,079
i will just go over here

323
00:13:55,440 --> 00:13:57,360
so yeah you can see i have put the

324
00:13:57,360 --> 00:13:59,600
breakpoint already here in line number

325
00:13:59,600 --> 00:14:01,839
126 is

326
00:14:01,839 --> 00:14:06,000
so i will just continue this application

327
00:14:06,079 --> 00:14:08,480
so now uh you can see there uh in the

328
00:14:08,480 --> 00:14:11,199
dids the vector array

329
00:14:11,199 --> 00:14:13,120
so we have got the

330
00:14:13,120 --> 00:14:17,480
we have got all the thread ids

331
00:14:19,279 --> 00:14:23,279
so let me just confirm yeah this is it

332
00:14:23,279 --> 00:14:25,440
so once we get all the thread ids for

333
00:14:25,440 --> 00:14:28,000
the uh from the particular process from

334
00:14:28,000 --> 00:14:30,880
our target process uh we will open we

335
00:14:30,880 --> 00:14:33,120
will open the

336
00:14:33,120 --> 00:14:34,959
uh we will open this target process

337
00:14:34,959 --> 00:14:37,360
using the process id and with the

338
00:14:37,360 --> 00:14:39,680
process all access right so we are

339
00:14:39,680 --> 00:14:41,680
trying to get all the access right from

340
00:14:41,680 --> 00:14:44,800
of that process object so basically we

341
00:14:44,800 --> 00:14:46,800
are just getting the handle to this

342
00:14:46,800 --> 00:14:48,720
particular

343
00:14:48,720 --> 00:14:51,199
particular process this target process

344
00:14:51,199 --> 00:14:53,439
here

345
00:14:55,600 --> 00:14:57,839
now once we got the target process we

346
00:14:57,839 --> 00:15:00,639
will allocate the uh memory

347
00:15:00,639 --> 00:15:02,720
so here you can see the base address is

348
00:15:02,720 --> 00:15:06,079
all zeros here so we are allocating the

349
00:15:06,079 --> 00:15:08,160
we are allocating the new memory in the

350
00:15:08,160 --> 00:15:09,760
target process

351
00:15:09,760 --> 00:15:13,199
for our sale code

352
00:15:13,199 --> 00:15:15,600
so you can see the silk the base

353
00:15:15,600 --> 00:15:19,199
addresses of 460 and four zeros let me

354
00:15:19,199 --> 00:15:21,199
just go to the

355
00:15:21,199 --> 00:15:25,959
process hacker and in the memory

356
00:15:28,160 --> 00:15:31,880
okay let me just add

357
00:15:59,519 --> 00:16:01,199
so yeah this is the one that we just

358
00:16:01,199 --> 00:16:03,839
allocated and you can see um

359
00:16:03,839 --> 00:16:08,120
it's all zeros here

360
00:16:09,759 --> 00:16:11,839
so after that using the

361
00:16:11,839 --> 00:16:14,320
api a write process memory we are

362
00:16:14,320 --> 00:16:16,639
writing our payload into that

363
00:16:16,639 --> 00:16:19,360
into this memory so let me just execute

364
00:16:19,360 --> 00:16:20,880
this

365
00:16:20,880 --> 00:16:22,560
code

366
00:16:22,560 --> 00:16:24,800
and i will just read with this

367
00:16:24,800 --> 00:16:26,480
memory here and you can see our cell

368
00:16:26,480 --> 00:16:27,759
code is

369
00:16:27,759 --> 00:16:30,959
successfully written here

370
00:16:31,199 --> 00:16:33,040
now uh you can see

371
00:16:33,040 --> 00:16:34,800
the

372
00:16:34,800 --> 00:16:37,519
protection for the memory is read and

373
00:16:37,519 --> 00:16:39,360
write so we need to change this

374
00:16:39,360 --> 00:16:41,040
protection to

375
00:16:41,040 --> 00:16:42,959
read and execute so that

376
00:16:42,959 --> 00:16:47,040
our payload will be able to execute

377
00:16:49,680 --> 00:16:52,560
so it's in the forces

378
00:16:52,560 --> 00:16:54,399
so you can see we have successfully

379
00:16:54,399 --> 00:16:55,600
changed the

380
00:16:55,600 --> 00:16:58,320
memory protection of this

381
00:16:58,320 --> 00:17:02,839
um of this memory so it's now read and

382
00:17:02,839 --> 00:17:06,799
execute now we are converting our

383
00:17:06,799 --> 00:17:08,720
now we are converting our

384
00:17:08,720 --> 00:17:12,319
cell code to the start routing

385
00:17:12,480 --> 00:17:14,720
so we will look through we will look

386
00:17:14,720 --> 00:17:16,480
through all this thread id that we

387
00:17:16,480 --> 00:17:19,919
collected from the process and we will

388
00:17:19,919 --> 00:17:23,839
put our cell code in its uh in its

389
00:17:23,839 --> 00:17:25,199
apc queue

390
00:17:25,199 --> 00:17:26,319
for the

391
00:17:26,319 --> 00:17:28,559
for the threads

392
00:17:28,559 --> 00:17:30,960
using the queue user apc

393
00:17:30,960 --> 00:17:33,520
function

394
00:17:33,520 --> 00:17:37,799
so let me just execute it

395
00:17:46,320 --> 00:17:48,320
so yeah you can see nothing happened

396
00:17:48,320 --> 00:17:50,320
because uh this technique is not

397
00:17:50,320 --> 00:17:52,080
reliable

398
00:17:52,080 --> 00:17:53,760
so

399
00:17:53,760 --> 00:17:56,720
so our thread might so it is not

400
00:17:56,720 --> 00:17:59,039
it is not confirmed that the thread

401
00:17:59,039 --> 00:18:01,200
might enter into the audio table state

402
00:18:01,200 --> 00:18:03,679
so our shellcode might not get executed

403
00:18:03,679 --> 00:18:05,760
so we have to be really lucky on this

404
00:18:05,760 --> 00:18:08,000
one

405
00:18:08,160 --> 00:18:11,760
so if we try this a few a few different

406
00:18:11,760 --> 00:18:14,960
times then we might able to execute our

407
00:18:14,960 --> 00:18:17,840
self code so

408
00:18:18,799 --> 00:18:21,360
so let let us switch this switch this

409
00:18:21,360 --> 00:18:25,559
application to the early bird

410
00:18:28,000 --> 00:18:28,720
so

411
00:18:28,720 --> 00:18:30,960
uh

412
00:18:32,240 --> 00:18:34,480
pull it first so let me rerun this

413
00:18:34,480 --> 00:18:36,559
application again and this time we will

414
00:18:36,559 --> 00:18:38,480
be going into this

415
00:18:38,480 --> 00:18:40,799
early bird function and you can see i

416
00:18:40,799 --> 00:18:42,720
have already put the big friend at the

417
00:18:42,720 --> 00:18:45,919
line number 59

418
00:18:53,679 --> 00:18:56,640
so here you can see we are

419
00:18:56,640 --> 00:18:58,400
how we are creating the process in the

420
00:18:58,400 --> 00:19:00,880
suspended mode you can see the flag we

421
00:19:00,880 --> 00:19:04,880
have we are using is quite suspended

422
00:19:05,600 --> 00:19:08,000
so if i just step over and you can see

423
00:19:08,000 --> 00:19:10,160
the notepad is created in the suspended

424
00:19:10,160 --> 00:19:12,320
mode

425
00:19:12,320 --> 00:19:14,559
after that we will allocate the memory

426
00:19:14,559 --> 00:19:17,679
for the uh for the payload in the remote

427
00:19:17,679 --> 00:19:20,160
process in this process so let me just

428
00:19:20,160 --> 00:19:21,679
open this one

429
00:19:21,679 --> 00:19:25,760
and if i execute this first law look

430
00:19:29,600 --> 00:19:33,199
7 in 4 0's

431
00:19:35,440 --> 00:19:38,000
so you can see the memory is allocated

432
00:19:38,000 --> 00:19:40,080
here

433
00:19:40,080 --> 00:19:43,039
and it's all zero

434
00:19:43,200 --> 00:19:45,630
now we will write our payload into that

435
00:19:45,630 --> 00:19:47,360
[Music]

436
00:19:47,360 --> 00:19:49,360
so you can see i have executed this

437
00:19:49,360 --> 00:19:51,520
write process memory so

438
00:19:51,520 --> 00:19:54,320
our cell code should be written here

439
00:19:54,320 --> 00:19:56,320
so you can see our cell code is

440
00:19:56,320 --> 00:19:59,520
successfully written here

441
00:20:02,960 --> 00:20:05,600
so after this we are changing the memory

442
00:20:05,600 --> 00:20:08,159
protection from read write to page read

443
00:20:08,159 --> 00:20:10,400
and execute

444
00:20:10,400 --> 00:20:15,039
so at this moment you can see it's rw

445
00:20:16,320 --> 00:20:18,799
so let me just refresh this

446
00:20:18,799 --> 00:20:21,200
box and let's see

447
00:20:21,200 --> 00:20:23,200
see so you can see

448
00:20:23,200 --> 00:20:24,640
uh the

449
00:20:24,640 --> 00:20:26,400
the memory reason is now read and

450
00:20:26,400 --> 00:20:28,640
execute

451
00:20:28,640 --> 00:20:30,960
so now we can just put our cell code in

452
00:20:30,960 --> 00:20:34,640
a cube using the queue user apc and

453
00:20:34,640 --> 00:20:37,360
we can resume the main thread of the

454
00:20:37,360 --> 00:20:40,399
suspended process

455
00:20:40,559 --> 00:20:42,400
so now we can see our cell code is

456
00:20:42,400 --> 00:20:44,320
successfully injected and you can see

457
00:20:44,320 --> 00:20:45,840
the

458
00:20:45,840 --> 00:20:47,520
you can see the processes still in

459
00:20:47,520 --> 00:20:49,360
notepad

460
00:20:49,360 --> 00:20:50,320
and

461
00:20:50,320 --> 00:20:52,320
nothing is changed here

462
00:20:52,320 --> 00:20:54,880
but our circuit is successfully get

463
00:20:54,880 --> 00:20:57,520
executed

464
00:20:59,280 --> 00:21:01,440
so this is it for the

465
00:21:01,440 --> 00:21:03,200
apc injection

466
00:21:03,200 --> 00:21:08,440
so if you have any question you can ask

467
00:21:49,679 --> 00:21:52,240
so let's take a two minute break and

468
00:21:52,240 --> 00:21:54,559
we can start with the another technique

469
00:21:54,559 --> 00:21:56,320
called model stomping

470
00:21:56,320 --> 00:21:59,200
so if you have any question you can just

471
00:21:59,200 --> 00:22:03,960
drop the question in the comments

472
00:22:37,679 --> 00:22:38,960
so

473
00:22:38,960 --> 00:22:40,880
if you have any queries then you can

474
00:22:40,880 --> 00:22:45,240
just drop in the chat box

475
00:23:21,200 --> 00:23:23,600
okay so i'll start the

476
00:23:23,600 --> 00:23:25,840
another technique which is called model

477
00:23:25,840 --> 00:23:28,840
stomping

478
00:23:44,080 --> 00:23:46,799
so now let's start with the

479
00:23:46,799 --> 00:23:48,799
another another technique called module

480
00:23:48,799 --> 00:23:51,760
stomping so in this technique phrase

481
00:23:51,760 --> 00:23:53,840
just get the laser here

482
00:23:53,840 --> 00:23:55,600
so in this technique phrase or lazy

483
00:23:55,600 --> 00:23:58,159
template dll is loaded into the target

484
00:23:58,159 --> 00:24:00,720
process and the cell code will be

485
00:24:00,720 --> 00:24:03,440
injected into that loaded loaded target

486
00:24:03,440 --> 00:24:04,559
dll

487
00:24:04,559 --> 00:24:06,880
and when we create a

488
00:24:06,880 --> 00:24:09,200
new thread uh the cell code will get

489
00:24:09,200 --> 00:24:12,000
executed from the legitimate dll and the

490
00:24:12,000 --> 00:24:13,600
one

491
00:24:13,600 --> 00:24:15,440
and one of the advantage of this

492
00:24:15,440 --> 00:24:17,360
technique is there will

493
00:24:17,360 --> 00:24:19,200
no need to be changed there will no need

494
00:24:19,200 --> 00:24:20,480
to change

495
00:24:20,480 --> 00:24:23,600
memory protection like we did in the um

496
00:24:23,600 --> 00:24:26,639
a pc injection

497
00:24:28,720 --> 00:24:30,480
so these are the steps for the model

498
00:24:30,480 --> 00:24:32,960
stomping first we will get the handle to

499
00:24:32,960 --> 00:24:34,480
the target process

500
00:24:34,480 --> 00:24:37,360
and after that we will load our

501
00:24:37,360 --> 00:24:40,240
target dll into the target process

502
00:24:40,240 --> 00:24:42,240
after that we will write our payload at

503
00:24:42,240 --> 00:24:44,320
the entry point address of the loaded

504
00:24:44,320 --> 00:24:46,799
dll this one this step is really

505
00:24:46,799 --> 00:24:48,799
important

506
00:24:48,799 --> 00:24:51,840
and after that the thread is

507
00:24:51,840 --> 00:24:53,120
created and

508
00:24:53,120 --> 00:24:56,959
the thread will execute our payload

509
00:24:58,240 --> 00:25:00,720
so these are all the api calls that are

510
00:25:00,720 --> 00:25:02,000
using the

511
00:25:02,000 --> 00:25:05,440
module stomping technique

512
00:25:06,880 --> 00:25:11,720
so let's just jump into the lab

513
00:26:06,320 --> 00:26:07,120
so

514
00:26:07,120 --> 00:26:11,360
we are running this application

515
00:26:11,360 --> 00:26:13,600
in a 32-bit mode so

516
00:26:13,600 --> 00:26:16,960
it will require the target process to be

517
00:26:16,960 --> 00:26:19,120
in a 32-bit mode so

518
00:26:19,120 --> 00:26:24,199
so i'm running the 32-bit notepad here

519
00:26:32,400 --> 00:26:34,760
so the process id is

520
00:26:34,760 --> 00:26:39,480
13520 for this notepad

521
00:26:54,480 --> 00:26:57,520
so i have put the breakpoint in this

522
00:26:57,520 --> 00:26:59,600
at the line number 64.

523
00:26:59,600 --> 00:27:04,760
so i'll just execute this program now

524
00:27:09,279 --> 00:27:11,520
so using the open process we are trying

525
00:27:11,520 --> 00:27:14,080
to get the handle to this uh target

526
00:27:14,080 --> 00:27:15,840
process

527
00:27:15,840 --> 00:27:19,840
and and our process id is 0 sorry 3 4 d

528
00:27:19,840 --> 00:27:23,039
0 in hex which is

529
00:27:23,039 --> 00:27:26,399
which is 1 3 5 to 0 in decimal

530
00:27:26,399 --> 00:27:30,960
so let's let me just execute this code

531
00:27:30,960 --> 00:27:33,200
so we can see we have successfully got

532
00:27:33,200 --> 00:27:35,600
the handle to the target process this

533
00:27:35,600 --> 00:27:38,000
process

534
00:27:38,159 --> 00:27:40,480
now we will uh here you can see at the

535
00:27:40,480 --> 00:27:43,039
line number 72 we are allocating the

536
00:27:43,039 --> 00:27:45,200
memory uh but the target but the

537
00:27:45,200 --> 00:27:47,520
allocation size is the length of the

538
00:27:47,520 --> 00:27:50,159
target target library so which means we

539
00:27:50,159 --> 00:27:51,679
are

540
00:27:51,679 --> 00:27:54,159
going to load uh we are

541
00:27:54,159 --> 00:27:56,640
not going to uh load our

542
00:27:56,640 --> 00:27:58,880
or we are not going to copy our

543
00:27:58,880 --> 00:28:00,960
dll into the

544
00:28:00,960 --> 00:28:02,960
into the remote process

545
00:28:02,960 --> 00:28:05,120
but we but we are

546
00:28:05,120 --> 00:28:07,200
writing our

547
00:28:07,200 --> 00:28:09,120
uh module file path to the target

548
00:28:09,120 --> 00:28:10,880
process memory

549
00:28:10,880 --> 00:28:12,640
so

550
00:28:12,640 --> 00:28:14,240
the the

551
00:28:14,240 --> 00:28:16,880
so before selecting this dll this is the

552
00:28:16,880 --> 00:28:20,080
target dll and this is the

553
00:28:20,080 --> 00:28:23,440
legitimate dll from the microsoft

554
00:28:23,440 --> 00:28:26,480
so before selecting the dll we must be

555
00:28:26,480 --> 00:28:29,440
sure that the uh the dll must not be

556
00:28:29,440 --> 00:28:32,320
loaded already into this uh process

557
00:28:32,320 --> 00:28:35,600
target process so we can see there is

558
00:28:35,600 --> 00:28:37,200
no such dll

559
00:28:37,200 --> 00:28:40,640
called file mgmt dll here and this tll

560
00:28:40,640 --> 00:28:42,559
must be

561
00:28:42,559 --> 00:28:46,639
larger and larger than our cell code

562
00:28:46,880 --> 00:28:48,720
so after that we will allocate the

563
00:28:48,720 --> 00:28:50,080
memory for

564
00:28:50,080 --> 00:28:52,720
uh for writing this file path into the

565
00:28:52,720 --> 00:28:56,120
target memory

566
00:28:58,399 --> 00:29:00,240
so you can see we have allocated the

567
00:29:00,240 --> 00:29:03,679
memory in this address

568
00:29:08,080 --> 00:29:12,439
which is e4 and four zeros

569
00:29:13,600 --> 00:29:14,399
so

570
00:29:14,399 --> 00:29:15,520
uh

571
00:29:15,520 --> 00:29:20,080
if i just execute this line of code

572
00:29:20,080 --> 00:29:22,080
we write process memory

573
00:29:22,080 --> 00:29:25,360
uh we will be right the file file path

574
00:29:25,360 --> 00:29:29,120
to the target process memory

575
00:29:31,279 --> 00:29:34,000
so you can see we have written the

576
00:29:34,000 --> 00:29:36,799
file path for the file management dll

577
00:29:36,799 --> 00:29:39,200
which is our target dll to be loaded

578
00:29:39,200 --> 00:29:41,840
into this process

579
00:29:42,960 --> 00:29:44,480
so uh

580
00:29:44,480 --> 00:29:46,880
using this load library a functions we

581
00:29:46,880 --> 00:29:49,440
are going to uh load this dll into the

582
00:29:49,440 --> 00:29:51,840
remote process memory into the remote

583
00:29:51,840 --> 00:29:55,559
process which is notepad

584
00:29:56,080 --> 00:29:59,440
so uh at this point we are retrieving

585
00:29:59,440 --> 00:30:02,000
this load library from the local address

586
00:30:02,000 --> 00:30:04,240
of the load library function from the

587
00:30:04,240 --> 00:30:07,039
local memory local process local process

588
00:30:07,039 --> 00:30:09,279
but

589
00:30:09,520 --> 00:30:12,480
but most of the time the kernel 32.dll

590
00:30:12,480 --> 00:30:14,720
is loaded in loaded at the same base

591
00:30:14,720 --> 00:30:15,919
address

592
00:30:15,919 --> 00:30:20,919
in many other process as well

593
00:30:22,399 --> 00:30:24,720
so you can see the base address for the

594
00:30:24,720 --> 00:30:28,640
uh load library a function is 7 6 3 4 0

595
00:30:28,640 --> 00:30:31,360
bd 0

596
00:30:32,799 --> 00:30:35,120
and we are assuming that the

597
00:30:35,120 --> 00:30:36,960
load library a

598
00:30:36,960 --> 00:30:39,200
is in the same address is in the same

599
00:30:39,200 --> 00:30:40,640
address space

600
00:30:40,640 --> 00:30:42,799
in the target process as well

601
00:30:42,799 --> 00:30:44,720
so after that we will create the remote

602
00:30:44,720 --> 00:30:46,240
thread

603
00:30:46,240 --> 00:30:49,360
so the function will be the load library

604
00:30:49,360 --> 00:30:51,840
a and the parameter will be the

605
00:30:51,840 --> 00:30:54,399
file path

606
00:30:54,880 --> 00:30:56,000
so

607
00:30:56,000 --> 00:30:57,919
in the model here you can see there is

608
00:30:57,919 --> 00:30:59,279
nothing

609
00:30:59,279 --> 00:31:00,240
there is

610
00:31:00,240 --> 00:31:03,679
there is no dll such as there is no dll

611
00:31:03,679 --> 00:31:05,600
the

612
00:31:05,600 --> 00:31:08,399
there is no file mg and dll here

613
00:31:08,399 --> 00:31:12,480
so if i just uh execute this code

614
00:31:12,480 --> 00:31:15,600
so this quit remote trade will going to

615
00:31:15,600 --> 00:31:18,799
execute the remote thread into the

616
00:31:18,799 --> 00:31:21,440
target process so if i just

617
00:31:21,440 --> 00:31:24,799
create the remote thread here

618
00:31:27,039 --> 00:31:30,000
so you can see the file mgmt.dll is

619
00:31:30,000 --> 00:31:33,840
loaded into this target process memory

620
00:31:34,159 --> 00:31:36,880
now we have loaded our target dll into

621
00:31:36,880 --> 00:31:40,000
the target process

622
00:31:42,080 --> 00:31:44,559
we have to file we have to find the base

623
00:31:44,559 --> 00:31:46,720
address of the dll

624
00:31:46,720 --> 00:31:48,880
because we have to write our cell code

625
00:31:48,880 --> 00:31:50,559
at the entry point

626
00:31:50,559 --> 00:31:54,158
at the entry point of this dll

627
00:31:54,399 --> 00:31:55,840
so

628
00:31:55,840 --> 00:31:57,200
let me just

629
00:31:57,200 --> 00:32:01,840
go into this file module base function

630
00:32:02,080 --> 00:32:05,200
so here we can see using the enum

631
00:32:05,200 --> 00:32:08,799
process modules we are reading all the

632
00:32:08,799 --> 00:32:10,720
we are reading all the modules all the

633
00:32:10,720 --> 00:32:14,480
modules of this target process so here

634
00:32:14,480 --> 00:32:17,440
you can see right now it's all the

635
00:32:17,440 --> 00:32:20,480
all the values are 0x ccc all the zonks

636
00:32:20,480 --> 00:32:22,480
value

637
00:32:22,480 --> 00:32:26,559
so if i just execute this function

638
00:32:26,559 --> 00:32:29,440
you can see we have got all the

639
00:32:29,440 --> 00:32:31,679
all the base address of this uh all

640
00:32:31,679 --> 00:32:35,120
these of these models

641
00:32:38,799 --> 00:32:43,440
so uh using the gate module file name ex

642
00:32:43,440 --> 00:32:45,760
we are looking through each modules and

643
00:32:45,760 --> 00:32:48,240
using this gate module file name ex we

644
00:32:48,240 --> 00:32:50,000
are trying to get the

645
00:32:50,000 --> 00:32:52,000
full path of the

646
00:32:52,000 --> 00:32:53,679
we are trying to get the full path of

647
00:32:53,679 --> 00:32:56,080
this dll and here we are checking

648
00:32:56,080 --> 00:32:57,760
whether whether

649
00:32:57,760 --> 00:32:59,360
it contains the

650
00:32:59,360 --> 00:33:01,519
we are just checking the substring and

651
00:33:01,519 --> 00:33:03,120
we are just checking that whether the

652
00:33:03,120 --> 00:33:05,279
file path contains the

653
00:33:05,279 --> 00:33:07,519
contains our file uh which is

654
00:33:07,519 --> 00:33:10,320
filemgmp.dll

655
00:33:10,320 --> 00:33:13,120
so let me just execute this function and

656
00:33:13,120 --> 00:33:14,320
see here

657
00:33:14,320 --> 00:33:16,399
we can see we have got the

658
00:33:16,399 --> 00:33:18,880
full path for the notepad.exe and it's

659
00:33:18,880 --> 00:33:21,840
checking whether the uh whether the path

660
00:33:21,840 --> 00:33:26,080
contain the file mgmt.dll or not

661
00:33:26,080 --> 00:33:29,120
so i will just continue this

662
00:33:29,120 --> 00:33:31,039
application and

663
00:33:31,039 --> 00:33:33,399
you can see the model name is now

664
00:33:33,399 --> 00:33:37,120
filemgmpdll and it is equal so

665
00:33:37,120 --> 00:33:39,519
we are returning the base address of the

666
00:33:39,519 --> 00:33:43,279
file mgmt dll so

667
00:33:44,240 --> 00:33:46,960
let's just go over here and

668
00:33:46,960 --> 00:33:49,200
so you can see the base address for the

669
00:33:49,200 --> 00:33:54,000
file mgmt.dll is six to f9 on and four

670
00:33:54,000 --> 00:33:56,399
zeros

671
00:33:56,480 --> 00:33:59,679
so if i just execute this line

672
00:33:59,679 --> 00:34:02,240
you can see we have got the base address

673
00:34:02,240 --> 00:34:03,440
of the

674
00:34:03,440 --> 00:34:07,440
of the loaded dll which is six 62f900

675
00:34:07,440 --> 00:34:10,239
let me just put this in the watts

676
00:34:10,239 --> 00:34:14,560
you can see it's 6 to f9 and 4 zeros

677
00:34:14,719 --> 00:34:18,719
and here it's the 60 f9400 so we are

678
00:34:18,719 --> 00:34:21,839
good to go

679
00:34:22,320 --> 00:34:23,839
so after this

680
00:34:23,839 --> 00:34:26,000
after that we have to find the entry

681
00:34:26,000 --> 00:34:30,359
point of the target dll

682
00:34:35,040 --> 00:34:37,760
so using the read process memory we are

683
00:34:37,760 --> 00:34:41,280
reading the 1000 bytes from this

684
00:34:41,280 --> 00:34:44,320
from this base address

685
00:34:46,560 --> 00:34:49,359
so here we are parsing the dos header of

686
00:34:49,359 --> 00:34:52,480
this target dll

687
00:34:52,879 --> 00:34:57,679
and we are retrieving the anti-headers

688
00:34:59,119 --> 00:35:01,680
now from the optional header uh there is

689
00:35:01,680 --> 00:35:02,800
a

690
00:35:02,800 --> 00:35:05,119
there is a member called address of

691
00:35:05,119 --> 00:35:06,400
entry point

692
00:35:06,400 --> 00:35:09,359
so this is the offset of the entry point

693
00:35:09,359 --> 00:35:13,920
so one once we add this value to the

694
00:35:13,920 --> 00:35:16,240
module based address then we will get

695
00:35:16,240 --> 00:35:18,560
the exact entry point of the

696
00:35:18,560 --> 00:35:23,040
loaded dll in in the target process

697
00:35:25,119 --> 00:35:28,079
so here we can see the entry point is to

698
00:35:28,079 --> 00:35:31,839
well before zero

699
00:35:36,960 --> 00:35:40,160
just add this to the ones as well

700
00:35:40,160 --> 00:35:41,440
so uh

701
00:35:41,440 --> 00:35:43,280
we will just add this entry point with

702
00:35:43,280 --> 00:35:44,880
the

703
00:35:44,880 --> 00:35:46,660
model module this

704
00:35:46,660 --> 00:35:48,560
[Music]

705
00:35:48,560 --> 00:35:51,040
so here at the point at at this point we

706
00:35:51,040 --> 00:35:55,359
have cut the entry point of the dll

707
00:35:55,839 --> 00:35:57,520
which is loaded in the

708
00:35:57,520 --> 00:36:00,320
remote process

709
00:36:02,240 --> 00:36:04,400
now we have got the entry point we will

710
00:36:04,400 --> 00:36:07,040
just write our cell code in that entry

711
00:36:07,040 --> 00:36:10,040
point

712
00:36:13,040 --> 00:36:15,200
uh now it looks like the

713
00:36:15,200 --> 00:36:17,040
payload is returned to the entry point

714
00:36:17,040 --> 00:36:18,240
of the

715
00:36:18,240 --> 00:36:20,800
target dl we will just

716
00:36:20,800 --> 00:36:24,320
execute the remote thread now

717
00:36:25,359 --> 00:36:27,839
so you can see our cell code is executed

718
00:36:27,839 --> 00:36:30,480
successfully and to confirm this we can

719
00:36:30,480 --> 00:36:32,800
just go to the thread here

720
00:36:32,800 --> 00:36:35,359
and you can see there is a file ng empty

721
00:36:35,359 --> 00:36:38,320
dll loaded here

722
00:36:38,320 --> 00:36:41,040
and you can see the message box is

723
00:36:41,040 --> 00:36:43,920
in the stack trace

724
00:36:43,920 --> 00:36:44,960
so

725
00:36:44,960 --> 00:36:46,720
this is it for the

726
00:36:46,720 --> 00:36:49,119
module stomping so if you have any

727
00:36:49,119 --> 00:36:53,079
queries you can ask

728
00:37:00,610 --> 00:37:03,709
[Music]

729
00:38:44,480 --> 00:38:47,040
so i will start with the i will start

730
00:38:47,040 --> 00:38:50,240
the process following now

731
00:38:53,680 --> 00:38:56,240
so this is the one of this is one of the

732
00:38:56,240 --> 00:38:58,640
famous technique and this has few

733
00:38:58,640 --> 00:39:00,480
different variants

734
00:39:00,480 --> 00:39:02,560
but the one that we are going to talk

735
00:39:02,560 --> 00:39:04,720
here is the original one

736
00:39:04,720 --> 00:39:07,280
so in this uh

737
00:39:07,280 --> 00:39:09,839
in this technique we are just

738
00:39:09,839 --> 00:39:11,440
in this technique we will just replace

739
00:39:11,440 --> 00:39:12,320
the

740
00:39:12,320 --> 00:39:14,240
executable section of the legitimate

741
00:39:14,240 --> 00:39:17,440
process uh with the with the malicious

742
00:39:17,440 --> 00:39:19,680
executable and all the replacement will

743
00:39:19,680 --> 00:39:21,200
take place in the

744
00:39:21,200 --> 00:39:23,759
memory

745
00:39:27,760 --> 00:39:29,680
so these are the steps for the process

746
00:39:29,680 --> 00:39:30,880
following

747
00:39:30,880 --> 00:39:33,359
so the first the important step is to

748
00:39:33,359 --> 00:39:35,119
create the pros create the process in

749
00:39:35,119 --> 00:39:36,000
the

750
00:39:36,000 --> 00:39:38,000
suspended mode

751
00:39:38,000 --> 00:39:40,720
after that we we have we need to find

752
00:39:40,720 --> 00:39:42,640
the image-based address of the target

753
00:39:42,640 --> 00:39:44,960
process

754
00:39:44,960 --> 00:39:47,359
because we we have to hollow out that

755
00:39:47,359 --> 00:39:50,240
targeted target image

756
00:39:50,240 --> 00:39:52,400
so after we hollow out that target image

757
00:39:52,400 --> 00:39:54,800
we will allocate a new memory into the

758
00:39:54,800 --> 00:39:57,440
same image base address

759
00:39:57,440 --> 00:40:00,800
so for our payload

760
00:40:00,800 --> 00:40:02,800
so after that we will copy all the

761
00:40:02,800 --> 00:40:05,520
payload section and header to the newly

762
00:40:05,520 --> 00:40:06,800
allocated

763
00:40:06,800 --> 00:40:08,880
memory in the target process

764
00:40:08,880 --> 00:40:10,960
then we will sense the context of the

765
00:40:10,960 --> 00:40:12,960
target process

766
00:40:12,960 --> 00:40:14,560
after that we will resume the main

767
00:40:14,560 --> 00:40:15,440
thread

768
00:40:15,440 --> 00:40:19,040
of the target basis process

769
00:40:19,040 --> 00:40:21,280
so these are the api that are used in

770
00:40:21,280 --> 00:40:23,119
this

771
00:40:23,119 --> 00:40:26,000
technique so the one that is important

772
00:40:26,000 --> 00:40:29,200
is this nd on map view of section api

773
00:40:29,200 --> 00:40:31,760
with the help of this api we are going

774
00:40:31,760 --> 00:40:34,000
to unmap the

775
00:40:34,000 --> 00:40:35,839
uh unmapped target image from the

776
00:40:35,839 --> 00:40:38,839
process

777
00:40:40,640 --> 00:40:45,000
so let's jump into the lab

778
00:41:23,280 --> 00:41:25,440
so you can see i have put the breakpoint

779
00:41:25,440 --> 00:41:27,599
at line number 103

780
00:41:27,599 --> 00:41:31,960
so i'll just execute this application

781
00:41:37,920 --> 00:41:41,520
so using the create process api we are

782
00:41:41,520 --> 00:41:43,440
we are going to create the target

783
00:41:43,440 --> 00:41:44,640
process

784
00:41:44,640 --> 00:41:48,520
in a suspended mode

785
00:41:50,480 --> 00:41:53,839
so you can see the target process is

786
00:41:53,839 --> 00:41:57,279
traded in a suspended mode

787
00:42:00,160 --> 00:42:02,560
now using this anti-query information

788
00:42:02,560 --> 00:42:06,400
process uh we are going to read the

789
00:42:06,400 --> 00:42:08,319
uh we are going to read the information

790
00:42:08,319 --> 00:42:10,160
about this process

791
00:42:10,160 --> 00:42:14,880
uh because we need uh one thing here the

792
00:42:14,880 --> 00:42:17,440
we need to get the pay batteries here

793
00:42:17,440 --> 00:42:21,920
and as well as the uh image space

794
00:42:22,640 --> 00:42:26,000
so here uh this is pointing to the pave

795
00:42:26,000 --> 00:42:27,599
of the

796
00:42:27,599 --> 00:42:31,280
our remote process and and in 32 bit at

797
00:42:31,280 --> 00:42:34,079
the offset of the 8 we will find the

798
00:42:34,079 --> 00:42:36,480
image space address of the

799
00:42:36,480 --> 00:42:38,960
particular process so let me just go

800
00:42:38,960 --> 00:42:41,200
here

801
00:42:43,280 --> 00:42:45,599
so you can see the image base address of

802
00:42:45,599 --> 00:42:46,960
the

803
00:42:46,960 --> 00:42:49,440
so the image based address of the

804
00:42:49,440 --> 00:42:51,200
notepad is f

805
00:42:51,200 --> 00:42:53,280
0 and 4 0s

806
00:42:53,280 --> 00:42:54,079
so

807
00:42:54,079 --> 00:42:56,079
we are hollowing this

808
00:42:56,079 --> 00:42:59,040
image so we are just uh

809
00:42:59,040 --> 00:43:01,119
hello we are just hollow outing this

810
00:43:01,119 --> 00:43:03,440
image

811
00:43:03,680 --> 00:43:04,880
so

812
00:43:04,880 --> 00:43:06,480
let me just show you something here

813
00:43:06,480 --> 00:43:08,800
first

814
00:43:09,760 --> 00:43:12,720
so this is the 32-bit baby structure and

815
00:43:12,720 --> 00:43:13,920
at the

816
00:43:13,920 --> 00:43:15,680
opposite eight you can see

817
00:43:15,680 --> 00:43:18,880
uh it's pointing to the image address uh

818
00:43:18,880 --> 00:43:22,319
which is this image address here

819
00:43:23,440 --> 00:43:27,440
so if i just uh if i just execute this

820
00:43:27,440 --> 00:43:29,760
code

821
00:43:29,760 --> 00:43:31,760
i will be pointing at the offset 8 right

822
00:43:31,760 --> 00:43:34,000
now

823
00:43:35,599 --> 00:43:37,680
now using the read process memory we

824
00:43:37,680 --> 00:43:40,480
will read the image base from that

825
00:43:40,480 --> 00:43:41,760
opposite

826
00:43:41,760 --> 00:43:43,359
so right now you can see the target

827
00:43:43,359 --> 00:43:45,359
image base is uh

828
00:43:45,359 --> 00:43:47,040
zero zeros

829
00:43:47,040 --> 00:43:50,400
so if i just execute this one

830
00:43:50,400 --> 00:43:54,000
you can see uh it's a f and all zeros

831
00:43:54,000 --> 00:43:57,520
which is equal to our target image base

832
00:43:57,520 --> 00:43:59,839
so now we will unmap this section from

833
00:43:59,839 --> 00:44:02,640
the process so just look uh look at this

834
00:44:02,640 --> 00:44:04,880
carefully right now uh we can see there

835
00:44:04,880 --> 00:44:06,319
is a f and

836
00:44:06,319 --> 00:44:09,560
five zeros

837
00:44:11,680 --> 00:44:14,480
and you can also notice the type is the

838
00:44:14,480 --> 00:44:17,119
image here

839
00:44:18,319 --> 00:44:19,520
so

840
00:44:19,520 --> 00:44:21,440
from here to here

841
00:44:21,440 --> 00:44:23,599
uh we are just great we are just reading

842
00:44:23,599 --> 00:44:24,400
our

843
00:44:24,400 --> 00:44:26,880
payload buffer from the file and

844
00:44:26,880 --> 00:44:29,599
on writing and putting that

845
00:44:29,599 --> 00:44:33,480
buffer into the heap

846
00:44:38,160 --> 00:44:40,640
and from the payload buffer we are

847
00:44:40,640 --> 00:44:42,640
reading the size of the image of that

848
00:44:42,640 --> 00:44:45,119
payload buffer here by parsing the p

849
00:44:45,119 --> 00:44:48,119
header

850
00:44:50,800 --> 00:44:53,520
so you can see we have uh got the size

851
00:44:53,520 --> 00:44:54,400
of the

852
00:44:54,400 --> 00:44:56,960
size of the image of the of that payload

853
00:44:56,960 --> 00:44:59,040
uh this is important

854
00:44:59,040 --> 00:45:01,280
uh because after unmapping this section

855
00:45:01,280 --> 00:45:03,359
we have to

856
00:45:03,359 --> 00:45:05,359
allocate a new memory

857
00:45:05,359 --> 00:45:06,960
so that's why this is important to

858
00:45:06,960 --> 00:45:09,839
allocate the new memory

859
00:45:09,839 --> 00:45:11,680
so

860
00:45:11,680 --> 00:45:14,800
here you can see uh using the zw on map

861
00:45:14,800 --> 00:45:16,720
view up section we are going to unmap

862
00:45:16,720 --> 00:45:19,280
this section right now you can see f00

863
00:45:19,280 --> 00:45:22,079
is still here

864
00:45:22,400 --> 00:45:27,119
so if i just execute this api

865
00:45:27,119 --> 00:45:30,240
uh you can see the f00 is unmapped and

866
00:45:30,240 --> 00:45:33,359
it's vanished from here

867
00:45:33,359 --> 00:45:35,598
so

868
00:45:37,280 --> 00:45:40,079
so now we can reallocate the

869
00:45:40,079 --> 00:45:42,880
memory in the same image space so we can

870
00:45:42,880 --> 00:45:44,160
see we are

871
00:45:44,160 --> 00:45:47,440
allocating the uh image at this f00

872
00:45:47,440 --> 00:45:49,920
offset now

873
00:45:49,920 --> 00:45:52,319
so if i just execute this first solo px

874
00:45:52,319 --> 00:45:54,720
function

875
00:45:55,599 --> 00:45:57,240
you can see the

876
00:45:57,240 --> 00:46:00,400
fn500 we can we have allocated the new

877
00:46:00,400 --> 00:46:03,599
memory and it's all zeros and the type

878
00:46:03,599 --> 00:46:05,920
is the private you can see

879
00:46:05,920 --> 00:46:08,240
and the protection is memory protection

880
00:46:08,240 --> 00:46:11,680
is read right and execute

881
00:46:13,440 --> 00:46:15,599
so after that we will be calculating the

882
00:46:15,599 --> 00:46:17,200
delta base for

883
00:46:17,200 --> 00:46:20,319
for the relocation

884
00:46:20,800 --> 00:46:23,440
so now we will be writing the header to

885
00:46:23,440 --> 00:46:24,240
this

886
00:46:24,240 --> 00:46:26,240
memory address you can see right now

887
00:46:26,240 --> 00:46:27,680
it's all zeros

888
00:46:27,680 --> 00:46:30,079
so if i just execute this line

889
00:46:30,079 --> 00:46:31,920
uh you can see we have written the

890
00:46:31,920 --> 00:46:34,880
payload header here

891
00:46:36,880 --> 00:46:38,160
now

892
00:46:38,160 --> 00:46:39,839
now uh

893
00:46:39,839 --> 00:46:45,040
from line 7 172 to 177 we are

894
00:46:45,040 --> 00:46:47,200
writing all the sections into this

895
00:46:47,200 --> 00:46:50,400
address into this memory location

896
00:46:50,400 --> 00:46:52,720
so let me just continue continue the

897
00:46:52,720 --> 00:46:54,880
execution

898
00:46:54,880 --> 00:46:57,599
so if i do this

899
00:46:57,599 --> 00:46:59,359
you can see all the sections are written

900
00:46:59,359 --> 00:47:01,839
here now

901
00:47:03,440 --> 00:47:06,160
so after that we need to fix the

902
00:47:06,160 --> 00:47:10,839
uh we need to perform the location

903
00:47:10,880 --> 00:47:11,599
so

904
00:47:11,599 --> 00:47:14,880
uh what is exactly happening is here

905
00:47:14,880 --> 00:47:17,839
so what exactly happening here is

906
00:47:17,839 --> 00:47:21,599
uh there are some constant uh in the

907
00:47:21,599 --> 00:47:22,480
upper

908
00:47:22,480 --> 00:47:25,200
image so uh use

909
00:47:25,200 --> 00:47:26,559
so we are

910
00:47:26,559 --> 00:47:29,040
repatching all those we are we are

911
00:47:29,040 --> 00:47:31,920
fixing all this con constant to

912
00:47:31,920 --> 00:47:33,520
uh

913
00:47:33,520 --> 00:47:36,720
to execute the process

914
00:47:36,720 --> 00:47:39,720
peacefully

915
00:47:39,839 --> 00:47:42,880
so uh if you are really interested to

916
00:47:42,880 --> 00:47:45,440
know what's happening here in this line

917
00:47:45,440 --> 00:47:46,559
of code

918
00:47:46,559 --> 00:47:48,559
so you can uh

919
00:47:48,559 --> 00:47:50,319
comment

920
00:47:50,319 --> 00:47:52,480
so you can just drop the comment

921
00:47:52,480 --> 00:47:54,559
uh because like uh

922
00:47:54,559 --> 00:47:57,119
i have to go through the different tools

923
00:47:57,119 --> 00:47:59,200
to make you understand this

924
00:47:59,200 --> 00:48:01,040
because uh from the

925
00:48:01,040 --> 00:48:03,359
from the code perspective it's really

926
00:48:03,359 --> 00:48:05,839
hard to understand what's going on here

927
00:48:05,839 --> 00:48:07,520
so if you are really interested you can

928
00:48:07,520 --> 00:48:09,440
just drop the comment and at the end of

929
00:48:09,440 --> 00:48:11,839
this video session i'm

930
00:48:11,839 --> 00:48:13,920
going to

931
00:48:13,920 --> 00:48:15,920
i'm going to explain what's really

932
00:48:15,920 --> 00:48:17,599
happening here

933
00:48:17,599 --> 00:48:20,000
so for now just understand that we are

934
00:48:20,000 --> 00:48:22,800
fixing some constant in the uh remote

935
00:48:22,800 --> 00:48:25,119
process memory of uh

936
00:48:25,119 --> 00:48:26,800
in the

937
00:48:26,800 --> 00:48:29,440
uh in the

938
00:48:30,160 --> 00:48:32,079
in the payload which is loaded in the

939
00:48:32,079 --> 00:48:35,359
remote process memory

940
00:48:35,359 --> 00:48:38,240
so once the relocation is done

941
00:48:38,240 --> 00:48:40,079
we will get the entry point of our

942
00:48:40,079 --> 00:48:42,160
payload in the which is in the target

943
00:48:42,160 --> 00:48:44,960
process memory

944
00:48:46,960 --> 00:48:49,839
so here we have got the offset

945
00:48:49,839 --> 00:48:53,119
and we have added the offset to the

946
00:48:53,119 --> 00:48:54,400
uh to the

947
00:48:54,400 --> 00:48:56,559
image base of the payload

948
00:48:56,559 --> 00:48:59,200
so this is the exact entry point of the

949
00:48:59,200 --> 00:49:01,200
of our payload in the target process

950
00:49:01,200 --> 00:49:03,119
memory

951
00:49:03,119 --> 00:49:04,880
now we will get the

952
00:49:04,880 --> 00:49:07,440
context

953
00:49:07,599 --> 00:49:10,480
of that process

954
00:49:10,800 --> 00:49:15,040
so you can see uh here the

955
00:49:15,040 --> 00:49:18,559
here the eax register is holding the

956
00:49:18,559 --> 00:49:21,119
holding the entry point of the previous

957
00:49:21,119 --> 00:49:22,960
uh

958
00:49:22,960 --> 00:49:24,160
previously

959
00:49:24,160 --> 00:49:26,079
holding the entry point of the original

960
00:49:26,079 --> 00:49:29,680
image but we already have replaced that

961
00:49:29,680 --> 00:49:31,760
image with our

962
00:49:31,760 --> 00:49:33,839
payload so we have to replace the entry

963
00:49:33,839 --> 00:49:36,160
point

964
00:49:36,400 --> 00:49:38,319
entry point of the original image base

965
00:49:38,319 --> 00:49:40,720
with our payload image base

966
00:49:40,720 --> 00:49:44,559
with our payload entry point

967
00:49:44,559 --> 00:49:45,359
so

968
00:49:45,359 --> 00:49:47,040
so whenever the process

969
00:49:47,040 --> 00:49:49,760
is created in the suspended mode uh the

970
00:49:49,760 --> 00:49:52,079
eax register holds the

971
00:49:52,079 --> 00:49:54,319
entry point of that particular process

972
00:49:54,319 --> 00:49:57,280
so that's why we need to replace the

973
00:49:57,280 --> 00:49:59,119
entry point here

974
00:49:59,119 --> 00:50:00,880
so we are replacing the

975
00:50:00,880 --> 00:50:02,880
uh

976
00:50:02,880 --> 00:50:05,200
entry point uh we are replacing the

977
00:50:05,200 --> 00:50:07,520
entry point of the original process

978
00:50:07,520 --> 00:50:11,040
which is f21860 with the entry point of

979
00:50:11,040 --> 00:50:13,839
of our payload which is f 0 1 2

980
00:50:13,839 --> 00:50:14,960
6 c

981
00:50:14,960 --> 00:50:18,640
which is in the target process memory

982
00:50:19,200 --> 00:50:21,440
so once the uh

983
00:50:21,440 --> 00:50:22,559
once we

984
00:50:22,559 --> 00:50:26,240
pass the eax register here

985
00:50:26,240 --> 00:50:28,400
we will just apply the patches using

986
00:50:28,400 --> 00:50:31,119
this say trade context

987
00:50:31,119 --> 00:50:32,559
after that we will just resume the

988
00:50:32,559 --> 00:50:34,880
threat

989
00:50:37,599 --> 00:50:40,000
so you can see we have successfully

990
00:50:40,000 --> 00:50:41,760
loaded the

991
00:50:41,760 --> 00:50:44,480
cell code here

992
00:50:48,319 --> 00:50:50,720
so you can see nothing is changed here

993
00:50:50,720 --> 00:50:53,440
the image file is still the notepad.exe

994
00:50:53,440 --> 00:50:56,480
command line is still denotepad.exe

995
00:50:56,480 --> 00:50:59,200
and our cell code is loaded from the

996
00:50:59,200 --> 00:51:00,240
notepad

997
00:51:00,240 --> 00:51:02,000
process

998
00:51:02,000 --> 00:51:07,079
so this is it for the process halloween

999
00:51:09,839 --> 00:51:12,240
so if you have any queries about this

1000
00:51:12,240 --> 00:51:13,760
you can just

1001
00:51:13,760 --> 00:51:17,400
drop the comment

1002
00:52:15,839 --> 00:52:18,839
foreign

1003
00:52:40,319 --> 00:52:41,440
okay so

1004
00:52:41,440 --> 00:52:43,520
i will start with the persistable link

1005
00:52:43,520 --> 00:52:45,200
now

1006
00:52:45,200 --> 00:52:47,920
so this technique utilizes the windows

1007
00:52:47,920 --> 00:52:50,880
api calls uh which are related to ntfs

1008
00:52:50,880 --> 00:52:52,640
transactions

1009
00:52:52,640 --> 00:52:54,960
so ntfs transaction brings the concept

1010
00:52:54,960 --> 00:52:57,520
of the automatic transaction to the ntfs

1011
00:52:57,520 --> 00:53:00,319
file system

1012
00:53:00,319 --> 00:53:02,800
so for instance let's say we are

1013
00:53:02,800 --> 00:53:04,640
performing some file operation in a

1014
00:53:04,640 --> 00:53:06,240
transaction

1015
00:53:06,240 --> 00:53:07,920
right so

1016
00:53:07,920 --> 00:53:09,760
suppose we are writing 100 bytes of the

1017
00:53:09,760 --> 00:53:11,760
buffer in a file

1018
00:53:11,760 --> 00:53:14,559
and assume that we have written away we

1019
00:53:14,559 --> 00:53:16,400
managed to successfully write all those

1020
00:53:16,400 --> 00:53:18,880
hundred byte uh into that file in a

1021
00:53:18,880 --> 00:53:20,319
transaction

1022
00:53:20,319 --> 00:53:21,599
however that

1023
00:53:21,599 --> 00:53:24,079
operation will not be fully successful

1024
00:53:24,079 --> 00:53:27,119
until the operation is committed

1025
00:53:27,119 --> 00:53:28,400
for the transaction

1026
00:53:28,400 --> 00:53:30,559
so this means that the operations should

1027
00:53:30,559 --> 00:53:32,960
be committed to

1028
00:53:32,960 --> 00:53:36,880
for the operation to be fully successful

1029
00:53:36,880 --> 00:53:38,480
so if any

1030
00:53:38,480 --> 00:53:41,280
so if any issue arises during

1031
00:53:41,280 --> 00:53:44,000
the write operation the transaction will

1032
00:53:44,000 --> 00:53:46,720
roll back and entire operation will fail

1033
00:53:46,720 --> 00:53:47,760
so

1034
00:53:47,760 --> 00:53:50,400
this is to maintain the integrity of the

1035
00:53:50,400 --> 00:53:53,359
data on the disk

1036
00:53:53,839 --> 00:53:57,040
so process following has four process

1037
00:53:57,040 --> 00:53:59,280
halloween is broken down into four step

1038
00:53:59,280 --> 00:54:02,160
uh transact load rollback and the

1039
00:54:02,160 --> 00:54:03,440
animate

1040
00:54:03,440 --> 00:54:06,000
so in the transact section we are going

1041
00:54:06,000 --> 00:54:07,599
to

1042
00:54:07,599 --> 00:54:10,079
open our file legitimate file for the

1043
00:54:10,079 --> 00:54:11,760
transaction

1044
00:54:11,760 --> 00:54:14,160
and then we will write our payload into

1045
00:54:14,160 --> 00:54:17,440
that transacted file and after that

1046
00:54:17,440 --> 00:54:19,440
with the help of that transacted file we

1047
00:54:19,440 --> 00:54:21,839
will create a image section

1048
00:54:21,839 --> 00:54:23,119
here

1049
00:54:23,119 --> 00:54:25,280
and once we created the email section we

1050
00:54:25,280 --> 00:54:27,920
do not need that transacted file so as i

1051
00:54:27,920 --> 00:54:29,760
mentioned before if we commit the

1052
00:54:29,760 --> 00:54:32,319
transaction uh the operation will be

1053
00:54:32,319 --> 00:54:36,000
successful so in this case if we

1054
00:54:36,000 --> 00:54:38,400
uh commit the transaction our payload

1055
00:54:38,400 --> 00:54:40,400
will get written into the sticks uh

1056
00:54:40,400 --> 00:54:42,799
which we do not want that to happen

1057
00:54:42,799 --> 00:54:44,319
so uh

1058
00:54:44,319 --> 00:54:46,240
so in the third step we will just roll

1059
00:54:46,240 --> 00:54:48,240
back the transaction uh which will

1060
00:54:48,240 --> 00:54:50,240
completely remove the malicious code

1061
00:54:50,240 --> 00:54:51,440
from the

1062
00:54:51,440 --> 00:54:53,839
ntfs system and there will be nothing

1063
00:54:53,839 --> 00:54:55,839
left on the disk

1064
00:54:55,839 --> 00:54:58,720
and after that

1065
00:54:58,720 --> 00:55:01,200
the last part is to animate the process

1066
00:55:01,200 --> 00:55:04,240
so use until now we have the image

1067
00:55:04,240 --> 00:55:06,400
section here so using this image section

1068
00:55:06,400 --> 00:55:09,920
we are going to create the process

1069
00:55:09,920 --> 00:55:10,880
so

1070
00:55:10,880 --> 00:55:13,599
we have to fix something

1071
00:55:13,599 --> 00:55:15,839
in that process so basically let's

1072
00:55:15,839 --> 00:55:18,160
assume that we have to give the

1073
00:55:18,160 --> 00:55:21,839
we have to give the life to that process

1074
00:55:22,240 --> 00:55:24,000
and

1075
00:55:24,000 --> 00:55:25,280
and this

1076
00:55:25,280 --> 00:55:27,440
this fine this fourth step is really

1077
00:55:27,440 --> 00:55:29,040
important step

1078
00:55:29,040 --> 00:55:31,200
and i want every

1079
00:55:31,200 --> 00:55:33,599
i want everyone to understand this step

1080
00:55:33,599 --> 00:55:35,760
because this is uh literally same in

1081
00:55:35,760 --> 00:55:37,599
upcoming techniques like process

1082
00:55:37,599 --> 00:55:40,319
hardware dropping and process costing

1083
00:55:40,319 --> 00:55:42,160
so uh

1084
00:55:42,160 --> 00:55:44,079
we will be going in depth in this step

1085
00:55:44,079 --> 00:55:48,559
in process double ganking lab so

1086
00:55:48,559 --> 00:55:50,799
so

1087
00:55:51,680 --> 00:55:53,920
please save energy for this lab because

1088
00:55:53,920 --> 00:55:56,240
we will be spending more

1089
00:55:56,240 --> 00:55:58,559
time in this persistable ganking lab as

1090
00:55:58,559 --> 00:56:02,000
compared to others

1091
00:56:02,000 --> 00:56:05,520
so these are all the apis

1092
00:56:05,520 --> 00:56:07,440
so these are all the apis that i use in

1093
00:56:07,440 --> 00:56:09,440
the support ganking

1094
00:56:09,440 --> 00:56:11,680
some are missing but no ways we will

1095
00:56:11,680 --> 00:56:14,480
cover that in the lab

1096
00:56:14,480 --> 00:56:16,799
so if you understand the process

1097
00:56:16,799 --> 00:56:18,799
hollowing and persistable ganking it

1098
00:56:18,799 --> 00:56:20,559
will be really easy to understand all

1099
00:56:20,559 --> 00:56:22,559
the upcoming techniques

1100
00:56:22,559 --> 00:56:24,000
because all those techniques are

1101
00:56:24,000 --> 00:56:26,160
somewhat similar to these two techniques

1102
00:56:26,160 --> 00:56:28,399
so

1103
00:56:28,559 --> 00:56:32,480
so let's just move to the lab

1104
00:56:34,799 --> 00:56:38,799
and this one is little bit complex so

1105
00:56:41,839 --> 00:56:43,359
so uh

1106
00:56:43,359 --> 00:56:45,839
for this

1107
00:56:47,839 --> 00:56:49,680
so for this technique we need to turn

1108
00:56:49,680 --> 00:56:51,839
off the windows defender completely

1109
00:56:51,839 --> 00:56:53,599
because it will get detected by the

1110
00:56:53,599 --> 00:56:56,559
windows defender

1111
00:56:57,119 --> 00:56:59,119
okay since i do not have the permission

1112
00:56:59,119 --> 00:57:03,720
here let me just go away

1113
00:57:21,599 --> 00:57:24,640
so in the admis administrative template

1114
00:57:24,640 --> 00:57:27,760
and inside the windows component

1115
00:57:27,760 --> 00:57:30,079
there you can see the

1116
00:57:30,079 --> 00:57:33,920
microsoft defender antivirus

1117
00:57:35,440 --> 00:57:36,400
and

1118
00:57:36,400 --> 00:57:38,720
you just have to enable this

1119
00:57:38,720 --> 00:57:40,799
this policy

1120
00:57:40,799 --> 00:57:42,480
so whether we are just starting off the

1121
00:57:42,480 --> 00:57:45,599
microsoft defender

1122
00:57:48,400 --> 00:57:51,040
so it will not work in my case because

1123
00:57:51,040 --> 00:57:52,480
uh

1124
00:57:52,480 --> 00:57:55,200
i'm not running in the administrative

1125
00:57:55,200 --> 00:57:56,079
user

1126
00:57:56,079 --> 00:57:56,880
so

1127
00:57:56,880 --> 00:57:59,839
this will not work

1128
00:58:02,480 --> 00:58:04,559
i have to

1129
00:58:04,559 --> 00:58:06,640
log into the admin account and then i

1130
00:58:06,640 --> 00:58:10,078
have to do that but

1131
00:58:11,599 --> 00:58:14,559
but even though let's start this

1132
00:58:14,559 --> 00:58:17,559
technique

1133
00:58:25,359 --> 00:58:28,160
so once you turn off the uh

1134
00:58:28,160 --> 00:58:30,559
policy you can just restart the pc and

1135
00:58:30,559 --> 00:58:33,040
then the antivirus will be completely

1136
00:58:33,040 --> 00:58:36,279
turned off

1137
00:58:37,920 --> 00:58:39,839
but at the end i will be getting some

1138
00:58:39,839 --> 00:58:40,799
mirror

1139
00:58:40,799 --> 00:58:43,520
because the antivirus is not on not

1140
00:58:43,520 --> 00:58:47,400
turned off in my case

1141
00:58:56,079 --> 00:58:58,880
so you can see

1142
00:58:58,880 --> 00:59:00,000
the

1143
00:59:00,000 --> 00:59:02,400
i'm i'm putting this in the debugging

1144
00:59:02,400 --> 00:59:03,440
mode and

1145
00:59:03,440 --> 00:59:06,000
the architecture is 64 bit so it's

1146
00:59:06,000 --> 00:59:08,880
compulsory for if you are using 64-bit

1147
00:59:08,880 --> 00:59:11,520
architecture uh you need to

1148
00:59:11,520 --> 00:59:14,559
run this application uh in a 64-bit as

1149
00:59:14,559 --> 00:59:16,559
well if you run this application in a

1150
00:59:16,559 --> 00:59:20,720
32-bit then it will fail

1151
00:59:23,280 --> 00:59:25,760
so for the 32-bit application you have

1152
00:59:25,760 --> 00:59:27,119
to

1153
00:59:27,119 --> 00:59:30,079
you need to have 32-bit operating system

1154
00:59:30,079 --> 00:59:32,079
and for the 64-bit you need to have

1155
00:59:32,079 --> 00:59:34,000
64-bit operating system for this

1156
00:59:34,000 --> 00:59:36,319
technique

1157
00:59:36,319 --> 00:59:38,079
so uh

1158
00:59:38,079 --> 00:59:39,920
so let me just put the breakpoint at

1159
00:59:39,920 --> 00:59:42,240
line number 173

1160
00:59:42,240 --> 00:59:44,880
and these are all the apis which are

1161
00:59:44,880 --> 00:59:47,280
loaded dynamically so let's not worry

1162
00:59:47,280 --> 00:59:49,839
about this

1163
00:59:50,240 --> 00:59:53,119
so i'll just execute this

1164
00:59:53,119 --> 00:59:56,440
code here

1165
01:00:05,280 --> 01:00:08,000
so here uh you can see our target

1166
01:00:08,000 --> 01:00:09,240
process is the

1167
01:00:09,240 --> 01:00:12,839
mynode.txc which is in the temp

1168
01:00:12,839 --> 01:00:17,119
folder in the c directory

1169
01:00:17,280 --> 01:00:19,839
here this is the uh this is the target

1170
01:00:19,839 --> 01:00:23,359
uh this is the estimate file

1171
01:00:24,799 --> 01:00:26,720
so let's just let's

1172
01:00:26,720 --> 01:00:29,839
step into this function

1173
01:00:31,520 --> 01:00:35,440
so at the line number 43

1174
01:00:35,839 --> 01:00:38,799
uh using the antiquate transaction we

1175
01:00:38,799 --> 01:00:42,720
are creating the ntfs transaction object

1176
01:00:42,720 --> 01:00:46,720
so let me just go over here

1177
01:00:47,119 --> 01:00:49,280
into programming and

1178
01:00:49,280 --> 01:00:52,599
in the handle

1179
01:00:58,000 --> 01:01:01,200
so uh if i uh let me just execute this

1180
01:01:01,200 --> 01:01:03,520
code

1181
01:01:03,520 --> 01:01:05,200
and you can see we have created the

1182
01:01:05,200 --> 01:01:07,520
transaction sorry oh yeah transaction

1183
01:01:07,520 --> 01:01:10,520
object

1184
01:01:12,480 --> 01:01:13,839
uh and

1185
01:01:13,839 --> 01:01:16,400
and use and we will be opening our

1186
01:01:16,400 --> 01:01:19,119
target file for the transaction and here

1187
01:01:19,119 --> 01:01:21,200
you can see we have passed the handle to

1188
01:01:21,200 --> 01:01:22,960
the transaction

1189
01:01:22,960 --> 01:01:26,319
and using the create file transacted w

1190
01:01:26,319 --> 01:01:28,319
we are just opening the file for the

1191
01:01:28,319 --> 01:01:30,400
transaction and the permission we are

1192
01:01:30,400 --> 01:01:32,240
requesting the read and write permission

1193
01:01:32,240 --> 01:01:33,280
for this

1194
01:01:33,280 --> 01:01:36,160
transacted file

1195
01:01:37,599 --> 01:01:40,480
so yeah you can see um we have got the

1196
01:01:40,480 --> 01:01:42,960
handle to the file

1197
01:01:42,960 --> 01:01:45,440
which is uh c8

1198
01:01:45,440 --> 01:01:48,640
you can see it's a c8 here

1199
01:01:49,280 --> 01:01:51,599
so after that we are just returning this

1200
01:01:51,599 --> 01:01:53,440
transaction handle to the transaction

1201
01:01:53,440 --> 01:01:57,280
and handle to the transacted file

1202
01:01:58,799 --> 01:02:00,400
so now uh

1203
01:02:00,400 --> 01:02:02,480
we will write our payload buffer into

1204
01:02:02,480 --> 01:02:06,280
the transacted file

1205
01:02:08,640 --> 01:02:11,039
so if i just go over it if i just go

1206
01:02:11,039 --> 01:02:13,760
here and

1207
01:02:13,920 --> 01:02:16,079
open the file and see it's uh there are

1208
01:02:16,079 --> 01:02:17,839
kv with

1209
01:02:17,839 --> 01:02:19,440
and

1210
01:02:19,440 --> 01:02:22,799
because uh nothing is written here

1211
01:02:22,799 --> 01:02:24,880
uh because this is because this

1212
01:02:24,880 --> 01:02:27,039
transaction is not committed

1213
01:02:27,039 --> 01:02:28,079
so

1214
01:02:28,079 --> 01:02:30,880
so we need to commit the transaction to

1215
01:02:30,880 --> 01:02:33,200
uh to per to uh we need to commit the

1216
01:02:33,200 --> 01:02:37,200
transaction for the successful operation

1217
01:02:37,760 --> 01:02:40,000
otherwise nothing will be

1218
01:02:40,000 --> 01:02:41,440
done to the file

1219
01:02:41,440 --> 01:02:42,480
so

1220
01:02:42,480 --> 01:02:44,480
the buffer is still in the transacted

1221
01:02:44,480 --> 01:02:47,039
file so

1222
01:02:47,039 --> 01:02:49,280
so let's enter this create section from

1223
01:02:49,280 --> 01:02:52,720
transacted file function

1224
01:02:58,400 --> 01:03:01,680
so using the antique section

1225
01:03:01,680 --> 01:03:02,400
we

1226
01:03:02,400 --> 01:03:03,920
we are creating the

1227
01:03:03,920 --> 01:03:06,880
uh image section here

1228
01:03:06,880 --> 01:03:09,280
and the flag we are using is sake image

1229
01:03:09,280 --> 01:03:12,000
here uh this will uh confirms that the

1230
01:03:12,000 --> 01:03:14,079
file that we are

1231
01:03:14,079 --> 01:03:15,520
passing here

1232
01:03:15,520 --> 01:03:17,680
must have the

1233
01:03:17,680 --> 01:03:21,119
valid v header so if the transacted file

1234
01:03:21,119 --> 01:03:23,200
doesn't have the valid pe header then it

1235
01:03:23,200 --> 01:03:24,799
will fail to

1236
01:03:24,799 --> 01:03:26,880
create the section because of the second

1237
01:03:26,880 --> 01:03:28,240
image flag

1238
01:03:28,240 --> 01:03:30,880
so the this transacted file must have

1239
01:03:30,880 --> 01:03:33,280
the valid pe header

1240
01:03:33,280 --> 01:03:34,960
so here you can see

1241
01:03:34,960 --> 01:03:38,000
if i execute this line of code

1242
01:03:38,000 --> 01:03:39,599
you can see the section is created

1243
01:03:39,599 --> 01:03:41,200
successfully

1244
01:03:41,200 --> 01:03:44,559
and if i just go and

1245
01:03:44,559 --> 01:03:47,839
click on read and write you can see our

1246
01:03:47,839 --> 01:03:49,599
payload is successfully

1247
01:03:49,599 --> 01:03:51,280
written in the section

1248
01:03:51,280 --> 01:03:53,440
so we have created the

1249
01:03:53,440 --> 01:03:58,440
section out of the transacted file

1250
01:03:58,720 --> 01:04:02,079
so now we have the uh image section

1251
01:04:02,079 --> 01:04:04,960
we we do not need the transact uh we we

1252
01:04:04,960 --> 01:04:09,039
do not need the transact transacted file

1253
01:04:09,039 --> 01:04:11,280
so we will just roll back the

1254
01:04:11,280 --> 01:04:12,960
transaction using anti-rollback

1255
01:04:12,960 --> 01:04:16,000
transaction function

1256
01:04:17,280 --> 01:04:19,839
so here you can see we are just we will

1257
01:04:19,839 --> 01:04:22,160
be rolling back the transaction using

1258
01:04:22,160 --> 01:04:26,200
the anti-rollback transaction

1259
01:04:27,920 --> 01:04:30,160
now we will close handle to this

1260
01:04:30,160 --> 01:04:34,078
transaction and the transacted file

1261
01:04:34,240 --> 01:04:36,000
here you can see our transaction object

1262
01:04:36,000 --> 01:04:39,160
is distributed

1263
01:04:41,039 --> 01:04:42,880
and the file and the file is also the

1264
01:04:42,880 --> 01:04:46,240
string file handle is also destroyed

1265
01:04:46,240 --> 01:04:49,039
so using the uh using this section you

1266
01:04:49,039 --> 01:04:50,960
can see using these sections we are

1267
01:04:50,960 --> 01:04:54,319
creating the uh process body uh with the

1268
01:04:54,319 --> 01:04:57,280
help of the anti-create process ex

1269
01:04:57,280 --> 01:05:00,480
api uh we are using this api because uh

1270
01:05:00,480 --> 01:05:02,160
this api

1271
01:05:02,160 --> 01:05:05,520
requires uh requires this section uh

1272
01:05:05,520 --> 01:05:09,200
rather than the file path so since we

1273
01:05:09,200 --> 01:05:11,200
have this section so we are using this

1274
01:05:11,200 --> 01:05:14,558
antiquate process ex

1275
01:05:18,880 --> 01:05:21,119
so let's just look at here

1276
01:05:21,119 --> 01:05:23,119
if i just execute the

1277
01:05:23,119 --> 01:05:24,720
code here

1278
01:05:24,720 --> 01:05:26,799
you can see we have got the process body

1279
01:05:26,799 --> 01:05:29,038
now

1280
01:05:30,960 --> 01:05:32,079
right

1281
01:05:32,079 --> 01:05:32,960
so

1282
01:05:32,960 --> 01:05:34,559
you can see there is nothing in the

1283
01:05:34,559 --> 01:05:37,680
properties of this process

1284
01:05:37,680 --> 01:05:41,359
so we have to fix this process

1285
01:05:43,520 --> 01:05:45,599
now with the help of the antiquity

1286
01:05:45,599 --> 01:05:47,520
information we are reading the process

1287
01:05:47,520 --> 01:05:50,520
information

1288
01:05:52,640 --> 01:05:54,799
because we want two things here our

1289
01:05:54,799 --> 01:05:57,280
first one is the pave itself and the

1290
01:05:57,280 --> 01:05:58,799
second one is the

1291
01:05:58,799 --> 01:06:01,760
entry point of that particular

1292
01:06:01,760 --> 01:06:04,000
process

1293
01:06:04,000 --> 01:06:07,280
entry point of our payload

1294
01:06:07,280 --> 01:06:08,640
which is in the

1295
01:06:08,640 --> 01:06:11,920
in this particular process

1296
01:06:13,200 --> 01:06:15,520
so after that we are reading the

1297
01:06:15,520 --> 01:06:18,240
wave here

1298
01:06:18,240 --> 01:06:20,079
so here after reading the paper we are

1299
01:06:20,079 --> 01:06:22,319
just type casting this to the

1300
01:06:22,319 --> 01:06:25,599
uh baby structure if i just go over here

1301
01:06:25,599 --> 01:06:27,440
uh you can see this is the very large

1302
01:06:27,440 --> 01:06:30,000
structure and this is the similar

1303
01:06:30,000 --> 01:06:32,880
structure that is just show you

1304
01:06:32,880 --> 01:06:35,200
that i saw you before in here

1305
01:06:35,200 --> 01:06:36,559
you can see this is the this is

1306
01:06:36,559 --> 01:06:39,280
structure so we are typecasting

1307
01:06:39,280 --> 01:06:41,599
so we are typecasting this uh

1308
01:06:41,599 --> 01:06:43,200
retrieve data

1309
01:06:43,200 --> 01:06:45,119
uh with the paper

1310
01:06:45,119 --> 01:06:46,400
and in here

1311
01:06:46,400 --> 01:06:48,640
we can see we are getting the image base

1312
01:06:48,640 --> 01:06:51,118
address

1313
01:06:52,160 --> 01:06:55,680
so using the rtl image antihero we will

1314
01:06:55,680 --> 01:06:58,480
reach to the anti-header of the payload

1315
01:06:58,480 --> 01:07:00,559
and from there

1316
01:07:00,559 --> 01:07:02,240
we will try to

1317
01:07:02,240 --> 01:07:05,839
get the address of the entry point

1318
01:07:06,880 --> 01:07:08,640
so once we get the entry point you can

1319
01:07:08,640 --> 01:07:10,720
see we have got the entry point once we

1320
01:07:10,720 --> 01:07:12,559
get the entry point we will add this

1321
01:07:12,559 --> 01:07:13,520
with the

1322
01:07:13,520 --> 01:07:15,920
image base address of our payload

1323
01:07:15,920 --> 01:07:20,000
which is loaded in this target process

1324
01:07:20,880 --> 01:07:23,200
so as you can see this is our entry

1325
01:07:23,200 --> 01:07:25,599
point of our payload

1326
01:07:25,599 --> 01:07:29,240
in the target process

1327
01:07:29,280 --> 01:07:33,280
so here comes the important part

1328
01:07:33,440 --> 01:07:35,760
using the rtl create process parameter

1329
01:07:35,760 --> 01:07:37,280
ex

1330
01:07:37,280 --> 01:07:39,359
we are creating the process parameter

1331
01:07:39,359 --> 01:07:41,359
here so at this point you can see it's

1332
01:07:41,359 --> 01:07:44,799
all zeros so and we are passing the

1333
01:07:44,799 --> 01:07:46,880
command line argument and i think it's a

1334
01:07:46,880 --> 01:07:48,960
current directory path

1335
01:07:48,960 --> 01:07:51,599
uh which i am not sure but

1336
01:07:51,599 --> 01:07:53,359
you can always fill these null values

1337
01:07:53,359 --> 01:07:56,880
with the required argument it's uh it's

1338
01:07:56,880 --> 01:07:59,520
not necessary but you can always

1339
01:07:59,520 --> 01:08:01,280
uh work on this one

1340
01:08:01,280 --> 01:08:03,599
so i'm just giving the command line

1341
01:08:03,599 --> 01:08:04,880
argument and the

1342
01:08:04,880 --> 01:08:08,960
image file path i'm not sure

1343
01:08:09,440 --> 01:08:13,280
so if i just execute this

1344
01:08:13,280 --> 01:08:15,760
api

1345
01:08:16,640 --> 01:08:18,560
you can see we have created the process

1346
01:08:18,560 --> 01:08:21,520
parameter so uh the the second one was

1347
01:08:21,520 --> 01:08:23,520
the current directory

1348
01:08:23,520 --> 01:08:25,759
and the first one was the

1349
01:08:25,759 --> 01:08:27,120
command line

1350
01:08:27,120 --> 01:08:29,040
so this was the command line and this

1351
01:08:29,040 --> 01:08:31,040
was the current directory so you could

1352
01:08:31,040 --> 01:08:33,600
just fill uh all this null with the

1353
01:08:33,600 --> 01:08:36,238
parameter as you want

1354
01:08:36,238 --> 01:08:38,560
so once we have created the process we

1355
01:08:38,560 --> 01:08:39,600
need to

1356
01:08:39,600 --> 01:08:41,520
uh we need to transfer this process

1357
01:08:41,520 --> 01:08:42,719
parameter

1358
01:08:42,719 --> 01:08:45,120
into this remote process newly allocated

1359
01:08:45,120 --> 01:08:49,000
a newly created process

1360
01:08:52,080 --> 01:08:55,600
so here we can see uh we are allocating

1361
01:08:55,600 --> 01:08:57,040
the

1362
01:08:57,040 --> 01:08:59,759
uh we are allocating the memory for the

1363
01:08:59,759 --> 01:09:01,679
parameter process parameter in the

1364
01:09:01,679 --> 01:09:04,000
remote

1365
01:09:04,839 --> 01:09:07,600
process so you can see the

1366
01:09:07,600 --> 01:09:11,040
uh the address is

1367
01:09:12,080 --> 01:09:16,960
addresses 1 cc 960 and 9605 and 4 zeros

1368
01:09:16,960 --> 01:09:19,198
so let me just go here and look at that

1369
01:09:19,198 --> 01:09:21,759
address

1370
01:09:21,759 --> 01:09:25,920
this is one cc yeah this is the one

1371
01:09:25,920 --> 01:09:29,120
so in here or at this point you can see

1372
01:09:29,120 --> 01:09:31,279
it's all empty so in here we are going

1373
01:09:31,279 --> 01:09:35,159
to write the process parameter

1374
01:09:36,799 --> 01:09:38,880
so you can see using the right version

1375
01:09:38,880 --> 01:09:41,120
memory we are going to write the process

1376
01:09:41,120 --> 01:09:43,920
parameter into the remote process so if

1377
01:09:43,920 --> 01:09:46,399
i just execute this function

1378
01:09:46,399 --> 01:09:49,040
and look into the

1379
01:09:49,040 --> 01:09:51,519
memory

1380
01:09:52,319 --> 01:09:54,640
so somewhere around here

1381
01:09:54,640 --> 01:09:57,440
you can see we have

1382
01:09:57,440 --> 01:09:59,600
we have written our

1383
01:09:59,600 --> 01:10:02,239
we have written our process parameter in

1384
01:10:02,239 --> 01:10:05,120
the remote process

1385
01:10:08,480 --> 01:10:10,719
so this is the address where the process

1386
01:10:10,719 --> 01:10:12,480
parameter is written

1387
01:10:12,480 --> 01:10:14,560
so let me just add this in the watch as

1388
01:10:14,560 --> 01:10:16,080
well

1389
01:10:16,080 --> 01:10:18,320
so

1390
01:10:18,400 --> 01:10:20,400
after this

1391
01:10:20,400 --> 01:10:22,800
we will get the pave of that remote

1392
01:10:22,800 --> 01:10:24,800
process

1393
01:10:24,800 --> 01:10:26,239
now we have to

1394
01:10:26,239 --> 01:10:28,800
uh now there in the in the pave

1395
01:10:28,800 --> 01:10:30,560
there is a member called process

1396
01:10:30,560 --> 01:10:32,000
parameter

1397
01:10:32,000 --> 01:10:34,400
so we have to

1398
01:10:34,400 --> 01:10:36,000
give the address of the process

1399
01:10:36,000 --> 01:10:38,159
parameter to this member

1400
01:10:38,159 --> 01:10:41,520
so let me just go over here

1401
01:10:41,520 --> 01:10:42,840
let's open this

1402
01:10:42,840 --> 01:10:46,719
one the another one this is the 34 64

1403
01:10:46,719 --> 01:10:48,000
bit paper

1404
01:10:48,000 --> 01:10:50,080
and you can see at the offset there is a

1405
01:10:50,080 --> 01:10:51,679
process parameter

1406
01:10:51,679 --> 01:10:54,480
so we have to give this

1407
01:10:54,480 --> 01:10:58,000
address to the process parameter member

1408
01:10:58,000 --> 01:11:01,280
so let me just open the page here

1409
01:11:01,280 --> 01:11:03,120
i think this is the one

1410
01:11:03,120 --> 01:11:05,840
so at the 20th offset you can see uh

1411
01:11:05,840 --> 01:11:08,480
it's empty right now so we will be

1412
01:11:08,480 --> 01:11:09,920
writing this

1413
01:11:09,920 --> 01:11:13,280
value here

1414
01:11:13,280 --> 01:11:15,760
using this right process memory so if i

1415
01:11:15,760 --> 01:11:19,199
just execute this code

1416
01:11:20,800 --> 01:11:23,199
and we read this

1417
01:11:23,199 --> 01:11:25,760
so you can see at the 20th offset we

1418
01:11:25,760 --> 01:11:27,280
have written the

1419
01:11:27,280 --> 01:11:31,360
address of the process parameter

1420
01:11:31,360 --> 01:11:34,880
so now everything is set

1421
01:11:36,880 --> 01:11:39,760
so using the anti-grade 3dx we will be

1422
01:11:39,760 --> 01:11:41,600
creating a new thread

1423
01:11:41,600 --> 01:11:43,600
and the start routing of the thread will

1424
01:11:43,600 --> 01:11:47,840
be the entry point of our payload

1425
01:11:48,800 --> 01:11:50,960
so yeah you can see we will get the

1426
01:11:50,960 --> 01:11:55,120
error now which is c00 c0002

1427
01:11:55,120 --> 01:11:57,600
so this is because this we are getting

1428
01:11:57,600 --> 01:12:00,159
this error from the windows defender

1429
01:12:00,159 --> 01:12:01,760
so we have to turn off the windows

1430
01:12:01,760 --> 01:12:03,520
defender to

1431
01:12:03,520 --> 01:12:07,199
successfully execute this process

1432
01:12:07,360 --> 01:12:08,800
so if we just turn off the windows

1433
01:12:08,800 --> 01:12:11,760
defender from the group policy

1434
01:12:11,760 --> 01:12:15,280
uh we will be able to execute this code

1435
01:12:15,280 --> 01:12:16,560
so

1436
01:12:16,560 --> 01:12:18,480
so this is it for the process double

1437
01:12:18,480 --> 01:12:21,480
ganging

1438
01:12:24,080 --> 01:12:26,000
so if you have any queries you can just

1439
01:12:26,000 --> 01:12:30,520
drop the queries in the chat

1440
01:12:36,480 --> 01:12:39,879
oh yeah

1441
01:12:59,360 --> 01:13:01,920
so yeah you can see it's disabled now

1442
01:13:01,920 --> 01:13:03,199
because of the

1443
01:13:03,199 --> 01:13:07,199
because i am not the admin right now

1444
01:13:07,199 --> 01:13:08,960
i'm not in the admin user right now

1445
01:13:08,960 --> 01:13:10,239
that's why

1446
01:13:10,239 --> 01:13:11,360
so

1447
01:13:11,360 --> 01:13:13,280
you can just disable this you can just

1448
01:13:13,280 --> 01:13:15,199
enable this and

1449
01:13:15,199 --> 01:13:19,000
the code will work

1450
01:15:10,400 --> 01:15:13,120
so now we will look into the

1451
01:15:13,120 --> 01:15:15,199
okay so now we will look into the

1452
01:15:15,199 --> 01:15:17,040
another technique which is the

1453
01:15:17,040 --> 01:15:20,560
transacted halloween sorry it's not the

1454
01:15:20,560 --> 01:15:22,239
transacted halloween it's transact

1455
01:15:22,239 --> 01:15:23,440
hollowing

1456
01:15:23,440 --> 01:15:25,840
sorry for the typo

1457
01:15:25,840 --> 01:15:28,000
so this is

1458
01:15:28,000 --> 01:15:29,679
this is the combination of the two

1459
01:15:29,679 --> 01:15:31,760
technique which is process hollowing and

1460
01:15:31,760 --> 01:15:33,520
persistable ganging

1461
01:15:33,520 --> 01:15:35,760
the advantage of this technique is this

1462
01:15:35,760 --> 01:15:38,000
technique will solve this use of both

1463
01:15:38,000 --> 01:15:40,640
the technique

1464
01:15:40,880 --> 01:15:43,920
so uh in the process hollowing

1465
01:15:43,920 --> 01:15:46,640
when we unmap this section we

1466
01:15:46,640 --> 01:15:48,880
we needed to allocate the new memory for

1467
01:15:48,880 --> 01:15:50,840
our payload right

1468
01:15:50,840 --> 01:15:54,719
so so if you have noticed you might have

1469
01:15:54,719 --> 01:15:56,400
noticed that the

1470
01:15:56,400 --> 01:15:58,640
memory section that we created is of

1471
01:15:58,640 --> 01:16:00,800
type private

1472
01:16:00,800 --> 01:16:03,280
so but normally uh if we look into the

1473
01:16:03,280 --> 01:16:04,960
process the process has the memory

1474
01:16:04,960 --> 01:16:07,360
section of type image for the executable

1475
01:16:07,360 --> 01:16:08,400
section

1476
01:16:08,400 --> 01:16:11,120
so this looks really suspicious from the

1477
01:16:11,120 --> 01:16:12,719
perspective of the

1478
01:16:12,719 --> 01:16:15,679
security peoples and security tools

1479
01:16:15,679 --> 01:16:17,600
so process the poll ganging will fix

1480
01:16:17,600 --> 01:16:19,520
this issue

1481
01:16:19,520 --> 01:16:21,920
and on the other hand as we just saw in

1482
01:16:21,920 --> 01:16:25,199
the lab it's a little bit complex to

1483
01:16:25,199 --> 01:16:26,880
create the process in process double

1484
01:16:26,880 --> 01:16:27,840
ganging

1485
01:16:27,840 --> 01:16:29,920
so the process following will help on

1486
01:16:29,920 --> 01:16:32,400
this one

1487
01:16:32,640 --> 01:16:35,760
so from here to here you can see this

1488
01:16:35,760 --> 01:16:38,640
flow uh this is literally same

1489
01:16:38,640 --> 01:16:41,040
as the persistable ganging

1490
01:16:41,040 --> 01:16:43,840
from uh transact to rollback and after

1491
01:16:43,840 --> 01:16:46,480
that the process is created using the

1492
01:16:46,480 --> 01:16:48,960
process allowing technique

1493
01:16:48,960 --> 01:16:51,440
so first we will create a anti-fs

1494
01:16:51,440 --> 01:16:53,840
transaction object after that we will

1495
01:16:53,840 --> 01:16:56,800
open the target file for the transaction

1496
01:16:56,800 --> 01:16:58,719
and we will write our payload into this

1497
01:16:58,719 --> 01:17:00,080
transacted file

1498
01:17:00,080 --> 01:17:02,480
so once we created the transacted file

1499
01:17:02,480 --> 01:17:05,280
with our payload so once we uh once we

1500
01:17:05,280 --> 01:17:07,040
write our payload into that transacted

1501
01:17:07,040 --> 01:17:07,840
file

1502
01:17:07,840 --> 01:17:09,840
uh we will create an image section out

1503
01:17:09,840 --> 01:17:11,760
of that transacted file

1504
01:17:11,760 --> 01:17:12,640
so

1505
01:17:12,640 --> 01:17:14,560
after we created the image section we do

1506
01:17:14,560 --> 01:17:16,480
not need the transacted file so we will

1507
01:17:16,480 --> 01:17:18,159
just roll back the transaction which

1508
01:17:18,159 --> 01:17:20,640
will completely remove the

1509
01:17:20,640 --> 01:17:23,120
file from the edx sorry file from the

1510
01:17:23,120 --> 01:17:25,600
ntfa system

1511
01:17:25,600 --> 01:17:27,760
so after that

1512
01:17:27,760 --> 01:17:30,719
after that we we have the email section

1513
01:17:30,719 --> 01:17:31,679
so

1514
01:17:31,679 --> 01:17:33,520
uh we will create the

1515
01:17:33,520 --> 01:17:36,000
target process in a suspended mode

1516
01:17:36,000 --> 01:17:37,600
and we will

1517
01:17:37,600 --> 01:17:41,600
map that image into that target process

1518
01:17:41,600 --> 01:17:43,440
so we will map that image section into

1519
01:17:43,440 --> 01:17:46,400
that target process

1520
01:17:46,640 --> 01:17:49,920
so uh as i as i mentioned before process

1521
01:17:49,920 --> 01:17:52,640
following has quite different variant so

1522
01:17:52,640 --> 01:17:54,239
this is the another variant of the

1523
01:17:54,239 --> 01:17:56,320
process allowing technique

1524
01:17:56,320 --> 01:17:58,560
so in this technique we are not going to

1525
01:17:58,560 --> 01:18:01,520
unmap anything so after we on after we

1526
01:18:01,520 --> 01:18:03,679
map the image section into that target

1527
01:18:03,679 --> 01:18:07,280
process memory now we have to

1528
01:18:07,280 --> 01:18:09,920
uh we have to fix the

1529
01:18:09,920 --> 01:18:13,120
context of the process so we we just

1530
01:18:13,120 --> 01:18:15,360
need to replace the entry point

1531
01:18:15,360 --> 01:18:17,280
as we did it before

1532
01:18:17,280 --> 01:18:20,159
and after that we after that we have to

1533
01:18:20,159 --> 01:18:22,159
update the image base address at the

1534
01:18:22,159 --> 01:18:24,640
pave of the target process

1535
01:18:24,640 --> 01:18:27,360
and we will resume the threat

1536
01:18:27,360 --> 01:18:29,440
so these are all the api calls that i

1537
01:18:29,440 --> 01:18:32,080
use in this technique

1538
01:18:32,080 --> 01:18:36,280
so let's move into the lab

1539
01:19:01,679 --> 01:19:02,640
so

1540
01:19:02,640 --> 01:19:04,880
i will put the breakpoint at the line

1541
01:19:04,880 --> 01:19:06,880
number 171

1542
01:19:06,880 --> 01:19:11,080
and i will execute this program

1543
01:19:26,960 --> 01:19:31,360
so let's just step into this function

1544
01:19:32,159 --> 01:19:35,159
so

1545
01:19:36,880 --> 01:19:39,280
so here i'm just

1546
01:19:39,280 --> 01:19:43,199
retrieving the function dynamically

1547
01:19:47,920 --> 01:19:50,239
so here you're using the anti-quit

1548
01:19:50,239 --> 01:19:52,320
transaction we are creating the ntfs

1549
01:19:52,320 --> 01:19:54,560
transaction object

1550
01:19:54,560 --> 01:19:57,679
like we did in the persistable hanging

1551
01:19:57,679 --> 01:20:00,239
and after that we will uh open the

1552
01:20:00,239 --> 01:20:02,480
target file for the transaction using

1553
01:20:02,480 --> 01:20:05,199
the create file transacted w and the

1554
01:20:05,199 --> 01:20:07,280
transaction and we are requesting the

1555
01:20:07,280 --> 01:20:10,559
read and write permission

1556
01:20:10,880 --> 01:20:12,639
and we are not waiting or we are just

1557
01:20:12,639 --> 01:20:17,280
opening the file so file must be here

1558
01:20:17,440 --> 01:20:21,599
uh yeah you can see the file is there

1559
01:20:22,719 --> 01:20:25,120
so after that we after we get the handle

1560
01:20:25,120 --> 01:20:27,280
to that transacted file

1561
01:20:27,280 --> 01:20:29,120
uh we will write our payload to that

1562
01:20:29,120 --> 01:20:32,760
transacted file

1563
01:20:38,400 --> 01:20:42,440
just go to this process

1564
01:20:48,400 --> 01:20:50,960
so we can see we have the transaction of

1565
01:20:50,960 --> 01:20:53,600
transaction object and we have opened

1566
01:20:53,600 --> 01:20:57,360
the we have open the file

1567
01:20:59,440 --> 01:21:02,080
so using the transacted file uh we are

1568
01:21:02,080 --> 01:21:05,120
creating this section so again we have

1569
01:21:05,120 --> 01:21:08,320
used the sake image so this will

1570
01:21:08,320 --> 01:21:10,960
uh this will make sure that the

1571
01:21:10,960 --> 01:21:12,960
uh this this will make sure that the

1572
01:21:12,960 --> 01:21:15,040
transacted file has the

1573
01:21:15,040 --> 01:21:17,679
valid pa header if the transacted file

1574
01:21:17,679 --> 01:21:19,920
doesn't have valid p header then

1575
01:21:19,920 --> 01:21:22,159
it will fail to create the anti quiz it

1576
01:21:22,159 --> 01:21:25,599
will fail to create this section

1577
01:21:26,960 --> 01:21:30,159
so we can see uh the section is created

1578
01:21:30,159 --> 01:21:32,800
if we just enter if we just hit control

1579
01:21:32,800 --> 01:21:35,440
and enter we can see

1580
01:21:35,440 --> 01:21:37,440
we have created this section from the

1581
01:21:37,440 --> 01:21:38,960
transacted file

1582
01:21:38,960 --> 01:21:42,760
and this is our payload

1583
01:21:46,800 --> 01:21:49,040
now we will just close the

1584
01:21:49,040 --> 01:21:51,040
transacted file because we do not need

1585
01:21:51,040 --> 01:21:53,199
that

1586
01:21:53,199 --> 01:21:54,719
after that we will

1587
01:21:54,719 --> 01:21:56,639
roll back the transaction because we do

1588
01:21:56,639 --> 01:21:58,960
not want to save our save the payload in

1589
01:21:58,960 --> 01:22:02,320
the dix on the rigs

1590
01:22:03,199 --> 01:22:04,880
so after that we will close all the

1591
01:22:04,880 --> 01:22:06,960
handles

1592
01:22:06,960 --> 01:22:07,679
now

1593
01:22:07,679 --> 01:22:11,840
now we are left with this section here

1594
01:22:12,239 --> 01:22:15,920
so uh using the anti-process query

1595
01:22:15,920 --> 01:22:19,840
sorry antiquary information process

1596
01:22:21,760 --> 01:22:23,360
basically we are not using here right

1597
01:22:23,360 --> 01:22:26,080
now but we will be using here at line

1598
01:22:26,080 --> 01:22:28,400
number 191

1599
01:22:28,400 --> 01:22:31,040
but before that uh

1600
01:22:31,040 --> 01:22:33,199
here you can see we we are creating the

1601
01:22:33,199 --> 01:22:36,080
process in a suspended mode

1602
01:22:36,080 --> 01:22:38,639
so if i uh just step into this process

1603
01:22:38,639 --> 01:22:41,520
into this function

1604
01:22:43,280 --> 01:22:46,800
uh you can see uh we are creating the

1605
01:22:46,800 --> 01:22:49,760
calc.exe

1606
01:22:49,760 --> 01:22:52,800
uh in the suspended mode

1607
01:22:52,800 --> 01:22:55,440
so the calc that exe will be created in

1608
01:22:55,440 --> 01:22:58,480
a suspended mode

1609
01:23:01,760 --> 01:23:04,159
so you can see the uh processes in the

1610
01:23:04,159 --> 01:23:07,839
suspended mode right now

1611
01:23:18,159 --> 01:23:18,960
now

1612
01:23:18,960 --> 01:23:21,840
you can see we have step into this

1613
01:23:21,840 --> 01:23:24,159
map section image map section into

1614
01:23:24,159 --> 01:23:27,360
process va function

1615
01:23:31,040 --> 01:23:34,080
so using this anti-map view of section

1616
01:23:34,080 --> 01:23:36,239
we are going to

1617
01:23:36,239 --> 01:23:39,679
map the image that we have

1618
01:23:39,679 --> 01:23:42,960
into this target process memory so let's

1619
01:23:42,960 --> 01:23:45,760
let's just open this one and

1620
01:23:45,760 --> 01:23:48,560
so uh here you can see the section basis

1621
01:23:48,560 --> 01:23:50,480
zero zero zero

1622
01:23:50,480 --> 01:23:52,639
so if i just uh

1623
01:23:52,639 --> 01:23:54,960
execute this function enter my view of

1624
01:23:54,960 --> 01:23:57,440
section

1625
01:23:57,520 --> 01:24:00,960
we can see our uh our our payload is

1626
01:24:00,960 --> 01:24:02,960
mapped into this address in a target

1627
01:24:02,960 --> 01:24:07,280
process so let's just refresh this

1628
01:24:07,760 --> 01:24:10,400
i think this is the one

1629
01:24:10,400 --> 01:24:14,159
so you can see this is our payload here

1630
01:24:14,159 --> 01:24:15,679
it's successfully mapped into the

1631
01:24:15,679 --> 01:24:18,159
process and it's the image it's the type

1632
01:24:18,159 --> 01:24:21,519
is the image here you can see

1633
01:24:23,120 --> 01:24:24,480
so uh

1634
01:24:24,480 --> 01:24:26,719
so this is the base address for the

1635
01:24:26,719 --> 01:24:30,400
payload as well for the

1636
01:24:30,400 --> 01:24:32,719
which is in the target process so this

1637
01:24:32,719 --> 01:24:35,199
is the base address of the target so we

1638
01:24:35,199 --> 01:24:36,639
do not have to go

1639
01:24:36,639 --> 01:24:38,639
we didn't have to retrieve this base

1640
01:24:38,639 --> 01:24:40,239
address from the

1641
01:24:40,239 --> 01:24:42,840
target process from the paper the from

1642
01:24:42,840 --> 01:24:45,520
the from reading the tiger process

1643
01:24:45,520 --> 01:24:48,000
memory

1644
01:24:49,440 --> 01:24:51,360
so we have the base address of the

1645
01:24:51,360 --> 01:24:52,400
payload

1646
01:24:52,400 --> 01:24:55,759
which is in the target process

1647
01:24:57,360 --> 01:24:59,920
so uh using this antiquary information

1648
01:24:59,920 --> 01:25:01,520
again we are reading the process

1649
01:25:01,520 --> 01:25:03,199
information

1650
01:25:03,199 --> 01:25:07,599
because at this point uh we have to

1651
01:25:08,000 --> 01:25:10,480
uh we have to

1652
01:25:10,480 --> 01:25:12,880
uh i'll tell you later so

1653
01:25:12,880 --> 01:25:15,840
let's just get into this

1654
01:25:15,840 --> 01:25:17,760
function uh we are getting the entry

1655
01:25:17,760 --> 01:25:19,199
point of the

1656
01:25:19,199 --> 01:25:21,760
payload in the target process

1657
01:25:21,760 --> 01:25:24,000
so we have the base address uh we just

1658
01:25:24,000 --> 01:25:26,639
need to calculate the address of the

1659
01:25:26,639 --> 01:25:29,600
entry point offset

1660
01:25:32,080 --> 01:25:35,199
so you can see the address of the end

1661
01:25:35,199 --> 01:25:37,040
offset of the entry point is one to be

1662
01:25:37,040 --> 01:25:39,280
it so we just need to add this offset

1663
01:25:39,280 --> 01:25:42,560
there with the section base address

1664
01:25:42,560 --> 01:25:44,400
which is the base address of the payload

1665
01:25:44,400 --> 01:25:47,440
in the remote basis

1666
01:25:47,520 --> 01:25:49,679
so now you can see we have got the entry

1667
01:25:49,679 --> 01:25:53,000
point here

1668
01:25:54,639 --> 01:25:57,440
so after that uh using the gate thread

1669
01:25:57,440 --> 01:25:59,199
context we are

1670
01:25:59,199 --> 01:26:02,480
getting the process context here

1671
01:26:02,480 --> 01:26:06,400
so uh in 32 bit the rax was holding the

1672
01:26:06,400 --> 01:26:09,760
entry point but in case of the 64-bit

1673
01:26:09,760 --> 01:26:12,719
rcx will hold the entry point

1674
01:26:12,719 --> 01:26:15,040
so at this point it is pointing to the

1675
01:26:15,040 --> 01:26:17,920
original entry point of the

1676
01:26:17,920 --> 01:26:19,040
original

1677
01:26:19,040 --> 01:26:19,920
image

1678
01:26:19,920 --> 01:26:22,960
which is the calc the offset entry point

1679
01:26:22,960 --> 01:26:24,880
of the calc.txt

1680
01:26:24,880 --> 01:26:27,360
but we want to replace uh

1681
01:26:27,360 --> 01:26:29,840
that entry point with our payload

1682
01:26:29,840 --> 01:26:32,000
entry point

1683
01:26:32,000 --> 01:26:32,960
so

1684
01:26:32,960 --> 01:26:34,560
let's just replace

1685
01:26:34,560 --> 01:26:36,560
that r6 with our payload entry point you

1686
01:26:36,560 --> 01:26:37,760
can see

1687
01:26:37,760 --> 01:26:40,239
912b 8

1688
01:26:40,239 --> 01:26:43,280
and it's it it is 912b8

1689
01:26:43,280 --> 01:26:46,080
after that we have to apply this

1690
01:26:46,080 --> 01:26:47,440
context

1691
01:26:47,440 --> 01:26:49,520
which will be done by the setrate

1692
01:26:49,520 --> 01:26:51,840
context

1693
01:26:54,080 --> 01:26:55,520
so uh

1694
01:26:55,520 --> 01:26:58,639
so now we have to do one thing before

1695
01:26:58,639 --> 01:27:02,000
executing before executing the thread

1696
01:27:02,000 --> 01:27:04,560
we have to update the

1697
01:27:04,560 --> 01:27:08,159
we have to update the image base address

1698
01:27:08,159 --> 01:27:10,320
in the page also because right now it's

1699
01:27:10,320 --> 01:27:11,920
pointing to the

1700
01:27:11,920 --> 01:27:13,920
uh it's pointing to the notepad image

1701
01:27:13,920 --> 01:27:17,440
base so we have to replace that with the

1702
01:27:17,440 --> 01:27:20,000
we have to replace that with the

1703
01:27:20,000 --> 01:27:21,679
payload image base

1704
01:27:21,679 --> 01:27:24,000
so here we are just uh

1705
01:27:24,000 --> 01:27:27,040
reading the behavior

1706
01:27:27,760 --> 01:27:31,440
so uh the image base offset is at the

1707
01:27:31,440 --> 01:27:33,920
10th 0x 10th offset

1708
01:27:33,920 --> 01:27:36,080
and the hexagonal 10th optic offset in

1709
01:27:36,080 --> 01:27:37,760
the hexadecimal

1710
01:27:37,760 --> 01:27:41,040
and 64 bit let me just go to the desktop

1711
01:27:41,040 --> 01:27:42,080
and

1712
01:27:42,080 --> 01:27:44,239
open this figure here

1713
01:27:44,239 --> 01:27:47,120
so you can see uh at 10th of seat in

1714
01:27:47,120 --> 01:27:50,800
exit decimal uh we have the image base

1715
01:27:50,800 --> 01:27:51,920
address

1716
01:27:51,920 --> 01:27:54,320
member

1717
01:27:54,800 --> 01:27:55,600
so

1718
01:27:55,600 --> 01:27:59,360
here we are just adding the

1719
01:27:59,440 --> 01:28:02,800
and we are just adding the 10 in the

1720
01:28:02,800 --> 01:28:04,719
in the remote

1721
01:28:04,719 --> 01:28:07,360
you can see

1722
01:28:07,920 --> 01:28:09,719
so you can see it's a

1723
01:28:09,719 --> 01:28:13,280
d409 fc 0 and we have just added 10 here

1724
01:28:13,280 --> 01:28:15,679
and this this points to the

1725
01:28:15,679 --> 01:28:18,719
remote image base

1726
01:28:23,280 --> 01:28:28,120
so let me just open the pave here

1727
01:28:28,639 --> 01:28:31,120
so right now this is the tenth offset

1728
01:28:31,120 --> 01:28:33,920
you can see it's pointing to the

1729
01:28:33,920 --> 01:28:36,320
original image base which is seven ff

1730
01:28:36,320 --> 01:28:39,360
seven one two ca0

1731
01:28:39,360 --> 01:28:42,400
seven f f seven one two ca and four

1732
01:28:42,400 --> 01:28:44,159
zeros uh which is pointing to the

1733
01:28:44,159 --> 01:28:45,679
character txt

1734
01:28:45,679 --> 01:28:48,480
but we want this to point to the uh our

1735
01:28:48,480 --> 01:28:51,280
payload base which is seven ff sixty

1736
01:28:51,280 --> 01:28:54,159
seven b nine and four zeros

1737
01:28:54,159 --> 01:28:56,480
so using the right process memory we are

1738
01:28:56,480 --> 01:29:00,320
going to replace this uh address replace

1739
01:29:00,320 --> 01:29:02,480
the address of image image based address

1740
01:29:02,480 --> 01:29:03,440
of the

1741
01:29:03,440 --> 01:29:05,520
payload in the pave here

1742
01:29:05,520 --> 01:29:06,480
so

1743
01:29:06,480 --> 01:29:08,480
if i just

1744
01:29:08,480 --> 01:29:10,960
execute this right process memory api

1745
01:29:10,960 --> 01:29:14,080
and reread the

1746
01:29:14,080 --> 01:29:17,920
memory you can see it's changed

1747
01:29:18,480 --> 01:29:20,639
now it's pointing to the

1748
01:29:20,639 --> 01:29:22,320
pointing to our

1749
01:29:22,320 --> 01:29:24,719
image base of the payload

1750
01:29:24,719 --> 01:29:28,639
so it's seven b9 you can see d7 b9 and

1751
01:29:28,639 --> 01:29:30,639
four zeros now it's pointing to our

1752
01:29:30,639 --> 01:29:33,120
payload

1753
01:29:33,199 --> 01:29:34,719
after that we will just resume the

1754
01:29:34,719 --> 01:29:37,040
thread

1755
01:29:37,120 --> 01:29:38,880
and you can see our cell code is

1756
01:29:38,880 --> 01:29:43,400
executed and it's in the calc.exe

1757
01:29:44,480 --> 01:29:45,440
so

1758
01:29:45,440 --> 01:29:47,679
you can see nothing is changed

1759
01:29:47,679 --> 01:29:50,159
the command line is not changed and the

1760
01:29:50,159 --> 01:29:53,679
image file name is also not changed here

1761
01:29:53,679 --> 01:29:56,080
so this is the transacted this is the

1762
01:29:56,080 --> 01:29:59,120
transact following

1763
01:29:59,520 --> 01:30:02,320
so this is it for this lab

1764
01:30:02,320 --> 01:30:04,159
so if you have any

1765
01:30:04,159 --> 01:30:06,960
queries you can just drop the comment

1766
01:30:06,960 --> 01:30:10,440
drop in the comment

1767
01:31:48,719 --> 01:31:51,199
so let's start the another technique

1768
01:31:51,199 --> 01:31:53,600
which is processor by dripping so in

1769
01:31:53,600 --> 01:31:55,440
this technique the file on the dix is

1770
01:31:55,440 --> 01:31:57,600
modified after the image has been mapped

1771
01:31:57,600 --> 01:31:59,840
into the target process

1772
01:31:59,840 --> 01:32:02,239
so let's assume that the file android x

1773
01:32:02,239 --> 01:32:03,679
is our payload

1774
01:32:03,679 --> 01:32:05,920
so using that payload file we have

1775
01:32:05,920 --> 01:32:08,880
created the image section

1776
01:32:08,880 --> 01:32:11,440
and using that image section

1777
01:32:11,440 --> 01:32:13,920
using that image section and the api

1778
01:32:13,920 --> 01:32:15,280
anti-process

1779
01:32:15,280 --> 01:32:18,159
ex we we have created the process body

1780
01:32:18,159 --> 01:32:20,159
here so let's suppose

1781
01:32:20,159 --> 01:32:22,239
uh here we have created the process body

1782
01:32:22,239 --> 01:32:23,280
using the

1783
01:32:23,280 --> 01:32:24,840
uh image

1784
01:32:24,840 --> 01:32:27,360
section and let's come to the second

1785
01:32:27,360 --> 01:32:29,040
line

1786
01:32:29,040 --> 01:32:31,040
the modification is done before creating

1787
01:32:31,040 --> 01:32:33,280
an initial thread which means that

1788
01:32:33,280 --> 01:32:35,280
before

1789
01:32:35,280 --> 01:32:37,760
before starting the initial thread we

1790
01:32:37,760 --> 01:32:39,679
have to modify our payload which is on

1791
01:32:39,679 --> 01:32:42,159
the dix

1792
01:32:42,639 --> 01:32:46,000
so the question is why do we need to

1793
01:32:46,000 --> 01:32:47,520
modify

1794
01:32:47,520 --> 01:32:50,000
the file on the dix because we already

1795
01:32:50,000 --> 01:32:52,159
have the process body

1796
01:32:52,159 --> 01:32:54,400
we could just fix the process parameter

1797
01:32:54,400 --> 01:32:56,320
and resume the thread right like we did

1798
01:32:56,320 --> 01:32:59,600
in the persistable ranking

1799
01:32:59,600 --> 01:33:01,679
so the answer is

1800
01:33:01,679 --> 01:33:05,440
whenever so the answer is

1801
01:33:05,440 --> 01:33:08,560
uh many security products or register

1802
01:33:08,560 --> 01:33:11,199
the cornell callbacks

1803
01:33:11,199 --> 01:33:12,000
so

1804
01:33:12,000 --> 01:33:14,239
whenever the initial thread is created

1805
01:33:14,239 --> 01:33:16,239
the corner callback will get triggered

1806
01:33:16,239 --> 01:33:20,639
and it will notify the security products

1807
01:33:20,639 --> 01:33:24,159
so then security products go over so so

1808
01:33:24,159 --> 01:33:26,719
then secretive product will go and scan

1809
01:33:26,719 --> 01:33:27,520
the

1810
01:33:27,520 --> 01:33:29,920
image section which is in the memory

1811
01:33:29,920 --> 01:33:32,320
and as well as the file which is on the

1812
01:33:32,320 --> 01:33:33,679
dix

1813
01:33:33,679 --> 01:33:36,800
so if we modify the file which is under

1814
01:33:36,800 --> 01:33:40,639
dix before creating an initial thread

1815
01:33:40,639 --> 01:33:42,400
what will happen is the file the

1816
01:33:42,400 --> 01:33:44,480
antivirus will go and scan the image

1817
01:33:44,480 --> 01:33:46,239
section

1818
01:33:46,239 --> 01:33:48,960
and as well as the file on the dix and

1819
01:33:48,960 --> 01:33:51,600
the security product will

1820
01:33:51,600 --> 01:33:52,639
uh

1821
01:33:52,639 --> 01:33:54,400
find that the file on the dix is

1822
01:33:54,400 --> 01:33:56,480
different than the file

1823
01:33:56,480 --> 01:33:57,840
different than the

1824
01:33:57,840 --> 01:33:59,600
image section which is executed in the

1825
01:33:59,600 --> 01:34:00,639
memory

1826
01:34:00,639 --> 01:34:03,360
so this will full and evade the most of

1827
01:34:03,360 --> 01:34:05,920
the security products that's why it is

1828
01:34:05,920 --> 01:34:08,400
necessary to modify the file on the disk

1829
01:34:08,400 --> 01:34:13,000
in this processor docking technique

1830
01:34:19,360 --> 01:34:21,520
so uh these are the steps for the

1831
01:34:21,520 --> 01:34:23,760
processor production

1832
01:34:23,760 --> 01:34:26,960
so uh first we will create the temporary

1833
01:34:26,960 --> 01:34:29,120
or decoy file

1834
01:34:29,120 --> 01:34:30,880
uh in which we are going to write our

1835
01:34:30,880 --> 01:34:33,760
payload after that we will create an

1836
01:34:33,760 --> 01:34:36,719
image section using that bigquery file

1837
01:34:36,719 --> 01:34:38,000
so

1838
01:34:38,000 --> 01:34:40,000
using this implement section we are

1839
01:34:40,000 --> 01:34:41,280
going to create a

1840
01:34:41,280 --> 01:34:43,199
new process body

1841
01:34:43,199 --> 01:34:45,679
so we are going to create a process

1842
01:34:45,679 --> 01:34:47,679
which will be just the body process body

1843
01:34:47,679 --> 01:34:48,800
at this point

1844
01:34:48,800 --> 01:34:51,440
so after creating the process we will

1845
01:34:51,440 --> 01:34:53,600
modify the

1846
01:34:53,600 --> 01:34:56,080
decoy file which is on the dix

1847
01:34:56,080 --> 01:34:57,920
and then we will set up the process

1848
01:34:57,920 --> 01:34:59,840
parameter and create the remote thread

1849
01:34:59,840 --> 01:35:02,639
as we did in the persistable ganging

1850
01:35:02,639 --> 01:35:04,719
and after that we will close the handle

1851
01:35:04,719 --> 01:35:06,400
to the degree file

1852
01:35:06,400 --> 01:35:09,040
so the query file should be closed only

1853
01:35:09,040 --> 01:35:10,239
after the

1854
01:35:10,239 --> 01:35:12,400
only after creating the new thread

1855
01:35:12,400 --> 01:35:15,760
because uh security products

1856
01:35:15,760 --> 01:35:16,960
do not only

1857
01:35:16,960 --> 01:35:18,159
[Music]

1858
01:35:18,159 --> 01:35:20,960
monitor the process but they do

1859
01:35:20,960 --> 01:35:23,760
but they also do monitor the file

1860
01:35:23,760 --> 01:35:24,880
changes

1861
01:35:24,880 --> 01:35:27,440
in the system

1862
01:35:27,440 --> 01:35:29,679
so this is why it is important to close

1863
01:35:29,679 --> 01:35:31,600
the file handle after creating the

1864
01:35:31,600 --> 01:35:33,600
thread

1865
01:35:33,600 --> 01:35:35,840
so this will evade the

1866
01:35:35,840 --> 01:35:39,880
most of the security products

1867
01:35:42,960 --> 01:35:45,040
so these are all the api calls for the

1868
01:35:45,040 --> 01:35:48,159
processor by developing

1869
01:35:48,639 --> 01:35:53,719
so let's move into the lab for this one

1870
01:36:27,840 --> 01:36:29,520
so you can see

1871
01:36:29,520 --> 01:36:31,440
i have put the brakeman at line number

1872
01:36:31,440 --> 01:36:33,600
121

1873
01:36:33,600 --> 01:36:36,080
and i will execute this process

1874
01:36:36,080 --> 01:36:39,840
sorry execute this program

1875
01:36:49,280 --> 01:36:50,080
so

1876
01:36:50,080 --> 01:36:52,000
you can see we have created the degree

1877
01:36:52,000 --> 01:36:54,400
file uh in this directory

1878
01:36:54,400 --> 01:36:58,559
so let me just go to this directory

1879
01:37:03,360 --> 01:37:04,320
so

1880
01:37:04,320 --> 01:37:07,760
so we we haven't created it but we are

1881
01:37:07,760 --> 01:37:09,760
we will be creating now or using this

1882
01:37:09,760 --> 01:37:11,440
great file w

1883
01:37:11,440 --> 01:37:14,719
and we are get we are

1884
01:37:14,719 --> 01:37:17,040
asking the read and write permission as

1885
01:37:17,040 --> 01:37:19,199
well

1886
01:37:19,360 --> 01:37:22,480
so now we have the handle to this

1887
01:37:22,480 --> 01:37:25,480
file

1888
01:37:37,199 --> 01:37:39,440
so this is the file

1889
01:37:39,440 --> 01:37:42,080
that this is the degree file you can see

1890
01:37:42,080 --> 01:37:45,080
std61

1891
01:37:46,080 --> 01:37:48,639
so once we get the handle to this

1892
01:37:48,639 --> 01:37:51,280
file uh we will just write our payload

1893
01:37:51,280 --> 01:37:54,000
into that degree file

1894
01:37:54,000 --> 01:37:57,280
so using the right file

1895
01:37:58,639 --> 01:37:59,440
so

1896
01:37:59,440 --> 01:38:01,679
you can see we have written the

1897
01:38:01,679 --> 01:38:05,600
payload buffer into this file

1898
01:38:05,840 --> 01:38:09,920
which is now it's 11 kb here

1899
01:38:10,080 --> 01:38:12,320
so

1900
01:38:12,800 --> 01:38:15,360
after that using the antiquate section

1901
01:38:15,360 --> 01:38:16,400
and the

1902
01:38:16,400 --> 01:38:19,199
decay file we are creating the

1903
01:38:19,199 --> 01:38:22,080
image section here

1904
01:38:27,360 --> 01:38:29,280
so you can see we have created the image

1905
01:38:29,280 --> 01:38:31,760
section

1906
01:38:31,760 --> 01:38:35,560
and this is our payload

1907
01:38:45,280 --> 01:38:47,199
so um

1908
01:38:47,199 --> 01:38:49,520
so using that image section we are going

1909
01:38:49,520 --> 01:38:50,320
to

1910
01:38:50,320 --> 01:38:52,080
create the process body using the

1911
01:38:52,080 --> 01:38:55,760
antiquate process ex api

1912
01:38:57,520 --> 01:38:59,280
as you can see the process is created

1913
01:38:59,280 --> 01:39:01,759
here now

1914
01:39:11,280 --> 01:39:13,920
so uh using the antiquity information we

1915
01:39:13,920 --> 01:39:16,560
are reading this process information

1916
01:39:16,560 --> 01:39:19,440
because uh we need the entry point of

1917
01:39:19,440 --> 01:39:22,159
this particular process

1918
01:39:22,159 --> 01:39:23,199
like we

1919
01:39:23,199 --> 01:39:27,480
did in the persistable ganging

1920
01:39:27,600 --> 01:39:29,760
so let me just step into this

1921
01:39:29,760 --> 01:39:32,239
function

1922
01:39:36,880 --> 01:39:39,520
here we can see we are reading the paper

1923
01:39:39,520 --> 01:39:41,760
of this target process using the

1924
01:39:41,760 --> 01:39:45,119
anti-reversal memory

1925
01:39:45,199 --> 01:39:48,480
after that we are typecasting this

1926
01:39:48,480 --> 01:39:50,719
this paper buffer with the baby

1927
01:39:50,719 --> 01:39:53,719
structure

1928
01:39:54,320 --> 01:39:55,119
so

1929
01:39:55,119 --> 01:39:56,239
from the

1930
01:39:56,239 --> 01:39:58,639
address from the

1931
01:39:58,639 --> 01:40:01,119
optional here we have we are retrieving

1932
01:40:01,119 --> 01:40:02,960
the address of the entry point of the

1933
01:40:02,960 --> 01:40:05,440
payload

1934
01:40:05,760 --> 01:40:08,320
you can see it's one to be it and here

1935
01:40:08,320 --> 01:40:11,040
we are adding the image base

1936
01:40:11,040 --> 01:40:13,199
here we are adding the offset of the

1937
01:40:13,199 --> 01:40:15,520
entry point with the image base address

1938
01:40:15,520 --> 01:40:17,440
and which will give us the exact entry

1939
01:40:17,440 --> 01:40:19,920
point of the payload

1940
01:40:19,920 --> 01:40:23,840
which is in the target process

1941
01:40:26,159 --> 01:40:28,560
so now we have got the

1942
01:40:28,560 --> 01:40:31,199
entry point

1943
01:40:32,000 --> 01:40:34,080
so it's time to modify the file on the

1944
01:40:34,080 --> 01:40:35,679
dix

1945
01:40:35,679 --> 01:40:38,320
so at this point you can see it's a mg

1946
01:40:38,320 --> 01:40:40,880
header here

1947
01:40:41,600 --> 01:40:44,080
so here we are

1948
01:40:44,080 --> 01:40:45,920
placing the cursor at the beginning of

1949
01:40:45,920 --> 01:40:47,679
the file

1950
01:40:47,679 --> 01:40:51,000
you can see

1951
01:40:51,280 --> 01:40:53,440
so

1952
01:40:54,320 --> 01:40:56,880
now we are going to write the

1953
01:40:56,880 --> 01:40:58,960
buffer which is of size

1954
01:40:58,960 --> 01:41:01,199
1000 bytes

1955
01:41:01,199 --> 01:41:02,840
in

1956
01:41:02,840 --> 01:41:06,239
x now let me just put bitcoin here

1957
01:41:06,239 --> 01:41:09,199
and i'll continue this application

1958
01:41:09,199 --> 01:41:10,719
so you can see the

1959
01:41:10,719 --> 01:41:13,600
uh right file is successfully

1960
01:41:13,600 --> 01:41:16,080
right file api has successfully done

1961
01:41:16,080 --> 01:41:18,480
it's done it starts

1962
01:41:18,480 --> 01:41:19,360
so

1963
01:41:19,360 --> 01:41:21,520
let me just go over here and you can see

1964
01:41:21,520 --> 01:41:24,320
we have overwritten our file

1965
01:41:24,320 --> 01:41:26,159
payload file and you can see we have

1966
01:41:26,159 --> 01:41:28,159
written the hello world from cyber

1967
01:41:28,159 --> 01:41:32,599
warfare lab which is this buffer

1968
01:41:32,960 --> 01:41:35,679
and here we have only uh over it in the

1969
01:41:35,679 --> 01:41:36,960
half of the

1970
01:41:36,960 --> 01:41:37,840
or

1971
01:41:37,840 --> 01:41:39,840
a list in the half of the buffer but

1972
01:41:39,840 --> 01:41:43,400
this will be okay

1973
01:41:46,159 --> 01:41:48,960
so after this we have to

1974
01:41:48,960 --> 01:41:50,960
create the process parameter like we did

1975
01:41:50,960 --> 01:41:54,320
in the persistable ganking

1976
01:41:57,679 --> 01:41:59,840
after that we will be allocating the

1977
01:41:59,840 --> 01:42:02,480
virtual memory for the process parameter

1978
01:42:02,480 --> 01:42:05,440
in the remote process

1979
01:42:06,800 --> 01:42:09,199
now we will move our process map process

1980
01:42:09,199 --> 01:42:12,560
parameter into the remote process

1981
01:42:12,560 --> 01:42:14,560
using the right and the right also

1982
01:42:14,560 --> 01:42:15,679
memory

1983
01:42:15,679 --> 01:42:17,920
after that we will get the wave address

1984
01:42:17,920 --> 01:42:20,159
here

1985
01:42:21,520 --> 01:42:22,130
so

1986
01:42:22,130 --> 01:42:23,840
[Music]

1987
01:42:23,840 --> 01:42:27,199
as you can see in process hopper dotting

1988
01:42:27,199 --> 01:42:29,839
in the memory

1989
01:42:30,080 --> 01:42:32,639
you can see at the opposite

1990
01:42:32,639 --> 01:42:35,760
20 there is all zeros so i'll just write

1991
01:42:35,760 --> 01:42:37,199
the

1992
01:42:37,199 --> 01:42:42,119
address of the process parameter there

1993
01:42:43,440 --> 01:42:45,199
so you can see we have

1994
01:42:45,199 --> 01:42:47,920
overwritten this value with the process

1995
01:42:47,920 --> 01:42:50,880
parameter address

1996
01:42:50,880 --> 01:42:53,199
now all we have to do is to

1997
01:42:53,199 --> 01:42:56,239
create the remote thread

1998
01:42:56,239 --> 01:42:57,360
and the

1999
01:42:57,360 --> 01:42:59,280
and the start routing will be our entry

2000
01:42:59,280 --> 01:43:00,320
point

2001
01:43:00,320 --> 01:43:04,040
payload entry point

2002
01:43:11,760 --> 01:43:14,000
so i think this is uh

2003
01:43:14,000 --> 01:43:16,800
this is because of the

2004
01:43:16,800 --> 01:43:19,280
uh this is uh because of the windows

2005
01:43:19,280 --> 01:43:20,800
defender

2006
01:43:20,800 --> 01:43:25,080
so let me read on this again

2007
01:43:28,000 --> 01:43:29,920
because whenever

2008
01:43:29,920 --> 01:43:31,840
whenever we fail

2009
01:43:31,840 --> 01:43:33,119
so

2010
01:43:33,119 --> 01:43:34,880
whenever we fail to create the remote

2011
01:43:34,880 --> 01:43:35,760
thread

2012
01:43:35,760 --> 01:43:37,199
in source technique

2013
01:43:37,199 --> 01:43:39,600
it's probably some antivirus might be

2014
01:43:39,600 --> 01:43:43,760
blocking us from creating the thread

2015
01:43:50,080 --> 01:43:53,840
so i'll uncomment all of this

2016
01:43:59,600 --> 01:44:02,800
yeah i think it's because of the

2017
01:44:02,800 --> 01:44:06,840
uh it's because of the

2018
01:44:09,600 --> 01:44:11,520
i think it's because of the

2019
01:44:11,520 --> 01:44:13,520
thread i think it's because of the

2020
01:44:13,520 --> 01:44:16,080
antivirus let me just print the let me

2021
01:44:16,080 --> 01:44:19,960
just put the breakpoint here

2022
01:44:23,840 --> 01:44:26,320
so yeah it's the status code is same as

2023
01:44:26,320 --> 01:44:29,199
the persistable ganging

2024
01:44:29,199 --> 01:44:30,000
so

2025
01:44:30,000 --> 01:44:32,880
uh the the thread creation has been

2026
01:44:32,880 --> 01:44:36,560
blocked by the windows defender

2027
01:44:36,560 --> 01:44:38,159
so i think this

2028
01:44:38,159 --> 01:44:40,239
technique is

2029
01:44:40,239 --> 01:44:42,080
not working

2030
01:44:42,080 --> 01:44:44,239
in the latest version of the windows

2031
01:44:44,239 --> 01:44:45,760
because it's getting blocked by the

2032
01:44:45,760 --> 01:44:47,360
windows defender

2033
01:44:47,360 --> 01:44:48,800
so i

2034
01:44:48,800 --> 01:44:51,520
from the group policy if you

2035
01:44:51,520 --> 01:44:52,960
disable the

2036
01:44:52,960 --> 01:44:56,880
microsoft defender the process will work

2037
01:44:56,880 --> 01:45:00,400
that the thread creation will work

2038
01:45:00,639 --> 01:45:03,760
this might be uh probably this will this

2039
01:45:03,760 --> 01:45:06,239
this issue might be

2040
01:45:06,239 --> 01:45:08,239
probably this issue will happen in the

2041
01:45:08,239 --> 01:45:10,480
process questing as well

2042
01:45:10,480 --> 01:45:12,960
uh because uh in processing gusting it's

2043
01:45:12,960 --> 01:45:16,560
the same thing so let's just

2044
01:45:16,560 --> 01:45:18,320
try it out in the business questing as

2045
01:45:18,320 --> 01:45:20,480
well

2046
01:45:28,000 --> 01:45:32,480
so if you see the status code 0xc

2047
01:45:32,480 --> 01:45:33,360
and

2048
01:45:33,360 --> 01:45:36,400
i think it's six zero and two two uh

2049
01:45:36,400 --> 01:45:37,600
that means

2050
01:45:37,600 --> 01:45:39,760
the thread creation has been blocked by

2051
01:45:39,760 --> 01:45:43,480
the windows defender

2052
01:45:48,080 --> 01:45:51,520
so if you have any queries you can just

2053
01:45:51,520 --> 01:45:53,520
drop that in the

2054
01:45:53,520 --> 01:45:56,840
comment section

2055
01:46:39,280 --> 01:46:41,520
also i suggest you to turn off the

2056
01:46:41,520 --> 01:46:42,960
defender

2057
01:46:42,960 --> 01:46:45,600
to practice all these

2058
01:46:45,600 --> 01:46:47,679
injection techniques

2059
01:46:47,679 --> 01:46:50,080
because uh

2060
01:46:50,080 --> 01:46:51,520
uh there there

2061
01:46:51,520 --> 01:46:53,199
there are other ways to create the

2062
01:46:53,199 --> 01:46:55,040
thread

2063
01:46:55,040 --> 01:46:59,800
so no worries about that part

2064
01:48:07,280 --> 01:48:08,320
so

2065
01:48:08,320 --> 01:48:12,559
let's begin with the process ghosting

2066
01:48:15,360 --> 01:48:18,639
so this technique is literally similar

2067
01:48:18,639 --> 01:48:20,800
to the process double ganging the only

2068
01:48:20,800 --> 01:48:22,880
different the only difference is that

2069
01:48:22,880 --> 01:48:23,760
the

2070
01:48:23,760 --> 01:48:25,520
section is created using the delete

2071
01:48:25,520 --> 01:48:29,440
pending file instead of the transaction

2072
01:48:29,440 --> 01:48:31,360
so whenever we put the file in the

2073
01:48:31,360 --> 01:48:32,960
delete bending state

2074
01:48:32,960 --> 01:48:35,280
uh it will make antivirus 2

2075
01:48:35,280 --> 01:48:38,320
too difficult to scan and delete it

2076
01:48:38,320 --> 01:48:41,119
but we just seen that the

2077
01:48:41,119 --> 01:48:43,199
defender was blocking us from creating

2078
01:48:43,199 --> 01:48:46,320
the thread using this technique using

2079
01:48:46,320 --> 01:48:48,239
the uh process

2080
01:48:48,239 --> 01:48:50,719
fixing technique

2081
01:48:50,719 --> 01:48:52,400
so let's see if this

2082
01:48:52,400 --> 01:48:53,760
will uh

2083
01:48:53,760 --> 01:48:55,760
let's see if this will bypass

2084
01:48:55,760 --> 01:48:57,840
all right let's see this fill

2085
01:48:57,840 --> 01:48:58,840
allows us

2086
01:48:58,840 --> 01:49:03,040
to execute the thread

2087
01:49:06,400 --> 01:49:08,880
so in the process questing uh we will be

2088
01:49:08,880 --> 01:49:10,960
creating a dummy file

2089
01:49:10,960 --> 01:49:13,360
like we did in the processor harper

2090
01:49:13,360 --> 01:49:14,639
derpy

2091
01:49:14,639 --> 01:49:16,320
after that using the anti-set

2092
01:49:16,320 --> 01:49:18,960
information file and the file disposes

2093
01:49:18,960 --> 01:49:21,440
an information class as a parameter we

2094
01:49:21,440 --> 01:49:23,520
will be putting our file into the delete

2095
01:49:23,520 --> 01:49:26,239
binding state

2096
01:49:26,320 --> 01:49:28,400
and after that we will write our buffer

2097
01:49:28,400 --> 01:49:31,679
into the delete pending file

2098
01:49:33,520 --> 01:49:35,679
so uh

2099
01:49:35,679 --> 01:49:37,679
so using the delete pending file we will

2100
01:49:37,679 --> 01:49:40,719
create the image section

2101
01:49:40,719 --> 01:49:42,639
and once the

2102
01:49:42,639 --> 01:49:44,560
image section is created we do not need

2103
01:49:44,560 --> 01:49:46,560
the pending file so we will just close

2104
01:49:46,560 --> 01:49:49,040
the handle to the delete pending file so

2105
01:49:49,040 --> 01:49:50,880
once we close the handle to the delete

2106
01:49:50,880 --> 01:49:53,440
pending file the file will be

2107
01:49:53,440 --> 01:49:57,119
automatically deleted from the system

2108
01:49:57,119 --> 01:49:59,119
and after that um

2109
01:49:59,119 --> 01:50:01,199
we will be doing the same thing which we

2110
01:50:01,199 --> 01:50:03,440
did in the process of working

2111
01:50:03,440 --> 01:50:06,400
creating the image creating the process

2112
01:50:06,400 --> 01:50:09,280
using the image section and updating and

2113
01:50:09,280 --> 01:50:10,800
updating and fixing the process

2114
01:50:10,800 --> 01:50:12,159
parameters

2115
01:50:12,159 --> 01:50:13,440
and after that we will be using the

2116
01:50:13,440 --> 01:50:15,040
threat so

2117
01:50:15,040 --> 01:50:16,080
uh

2118
01:50:16,080 --> 01:50:18,880
during the thread uh while resuming the

2119
01:50:18,880 --> 01:50:20,800
threat we were facing the issue in

2120
01:50:20,800 --> 01:50:22,560
process harper darting

2121
01:50:22,560 --> 01:50:24,960
let's see if we face any issue in this

2122
01:50:24,960 --> 01:50:26,719
process question

2123
01:50:26,719 --> 01:50:28,800
because let's see if

2124
01:50:28,800 --> 01:50:31,520
windows defender is going to

2125
01:50:31,520 --> 01:50:33,199
block us in this technique as well or

2126
01:50:33,199 --> 01:50:35,440
not

2127
01:50:36,239 --> 01:50:38,320
so these are all the api that i use for

2128
01:50:38,320 --> 01:50:41,519
the process costing

2129
01:50:41,840 --> 01:50:45,880
so let's move on to the lab

2130
01:51:51,920 --> 01:51:54,080
so you can see we have hit the

2131
01:51:54,080 --> 01:51:57,599
breakpoint at line number 220 so we will

2132
01:51:57,599 --> 01:52:01,560
just step into this function

2133
01:52:16,239 --> 01:52:20,159
so here using the nd open file we are

2134
01:52:20,159 --> 01:52:23,119
opening the file

2135
01:52:28,719 --> 01:52:31,280
so if there is no file um

2136
01:52:31,280 --> 01:52:32,960
if there is an old file then it will

2137
01:52:32,960 --> 01:52:35,360
just delete that file and

2138
01:52:35,360 --> 01:52:36,800
create a new file because of the

2139
01:52:36,800 --> 01:52:40,560
supersede flag here

2140
01:52:43,280 --> 01:52:47,119
so we have got the handle to the file

2141
01:52:49,840 --> 01:52:55,239
so okay let me just go over here and

2142
01:53:01,280 --> 01:53:04,800
so this is the file that we just created

2143
01:53:04,800 --> 01:53:09,000
so let me just go over there

2144
01:53:14,560 --> 01:53:16,800
so this is the file and you can see it's

2145
01:53:16,800 --> 01:53:18,000
um

2146
01:53:18,000 --> 01:53:21,520
it's accessed by our application so

2147
01:53:21,520 --> 01:53:25,080
we cannot open

2148
01:53:28,159 --> 01:53:30,719
so uh here you can see using the

2149
01:53:30,719 --> 01:53:33,360
anti-set information file api

2150
01:53:33,360 --> 01:53:35,280
and the

2151
01:53:35,280 --> 01:53:37,440
and the file disposition information

2152
01:53:37,440 --> 01:53:39,440
class as a parameter

2153
01:53:39,440 --> 01:53:42,159
we are setting the file into the delete

2154
01:53:42,159 --> 01:53:44,879
pending state

2155
01:53:47,760 --> 01:53:49,520
now the file is in the delete pending

2156
01:53:49,520 --> 01:53:51,520
state now we will write the payload into

2157
01:53:51,520 --> 01:53:54,760
that file

2158
01:53:56,159 --> 01:53:58,400
so if i first

2159
01:53:58,400 --> 01:54:01,879
go over here

2160
01:54:13,199 --> 01:54:16,320
so you can see uh we have already

2161
01:54:16,320 --> 01:54:18,320
set our file in the delete pending state

2162
01:54:18,320 --> 01:54:20,080
that's why we do not have to permission

2163
01:54:20,080 --> 01:54:21,760
to open this file

2164
01:54:21,760 --> 01:54:24,159
so this will be same thing will happen

2165
01:54:24,159 --> 01:54:27,839
to the antivirus as well

2166
01:54:30,400 --> 01:54:32,320
so they will not able to

2167
01:54:32,320 --> 01:54:37,040
scan the file and or delete the file

2168
01:54:37,040 --> 01:54:39,199
now are using the file handle we are

2169
01:54:39,199 --> 01:54:43,119
going to create the section here

2170
01:54:45,440 --> 01:54:47,199
so here you can see we have created this

2171
01:54:47,199 --> 01:54:49,360
section

2172
01:54:49,360 --> 01:54:50,880
and you can see

2173
01:54:50,880 --> 01:54:54,000
this is our payload

2174
01:54:58,639 --> 01:55:02,000
so let me just go to this file you can

2175
01:55:02,000 --> 01:55:02,840
see

2176
01:55:02,840 --> 01:55:05,599
uh so whenever i

2177
01:55:05,599 --> 01:55:08,560
step through step over this code

2178
01:55:08,560 --> 01:55:10,800
so whenever i close this handle to the

2179
01:55:10,800 --> 01:55:11,760
file

2180
01:55:11,760 --> 01:55:14,560
this file this file will get deleted

2181
01:55:14,560 --> 01:55:16,639
permanently you can see

2182
01:55:16,639 --> 01:55:20,480
the pz6 dd1

2183
01:55:22,560 --> 01:55:25,199
so you can see the file has been deleted

2184
01:55:25,199 --> 01:55:29,159
successfully from the system

2185
01:55:33,040 --> 01:55:35,599
so after that we are just creating the

2186
01:55:35,599 --> 01:55:38,400
process with the section

2187
01:55:38,400 --> 01:55:42,159
section that we just created

2188
01:55:44,800 --> 01:55:46,880
so let's go over here you can see we

2189
01:55:46,880 --> 01:55:50,239
have created this section now

2190
01:55:55,119 --> 01:55:58,159
now uh everything uh now everything will

2191
01:55:58,159 --> 01:56:00,239
be similar to the sustainable ganging

2192
01:56:00,239 --> 01:56:02,960
and processor part typing we will we are

2193
01:56:02,960 --> 01:56:03,920
just

2194
01:56:03,920 --> 01:56:07,840
setting up the process parameters here

2195
01:56:11,199 --> 01:56:13,599
so using the anti-query information

2196
01:56:13,599 --> 01:56:15,119
process we are reading the process

2197
01:56:15,119 --> 01:56:17,440
information

2198
01:56:17,440 --> 01:56:19,840
then we are getting the entry point of

2199
01:56:19,840 --> 01:56:20,560
our

2200
01:56:20,560 --> 01:56:24,599
payload in the target process

2201
01:56:32,080 --> 01:56:34,400
here we can see um

2202
01:56:34,400 --> 01:56:36,560
we have we are just adding the entry

2203
01:56:36,560 --> 01:56:40,400
point offset with the image base address

2204
01:56:40,480 --> 01:56:42,719
to get the entry point like we did in

2205
01:56:42,719 --> 01:56:45,040
the process double hanging and harper

2206
01:56:45,040 --> 01:56:47,519
derping

2207
01:56:48,400 --> 01:56:50,639
now we have the entry point

2208
01:56:50,639 --> 01:56:55,080
let's just put this into watts

2209
01:56:56,960 --> 01:56:59,280
after that we will create the process

2210
01:56:59,280 --> 01:57:01,920
parameter

2211
01:57:02,639 --> 01:57:04,000
so you can see we have created the

2212
01:57:04,000 --> 01:57:06,080
process parameter with the

2213
01:57:06,080 --> 01:57:08,800
current directory dll path image path

2214
01:57:08,800 --> 01:57:11,840
and the command line

2215
01:57:11,840 --> 01:57:14,239
so at this point we are giving the

2216
01:57:14,239 --> 01:57:15,440
uh

2217
01:57:15,440 --> 01:57:18,239
target path has and file file path as

2218
01:57:18,239 --> 01:57:21,678
the svc host

2219
01:57:22,719 --> 01:57:26,320
in the process parameter you can see

2220
01:57:28,000 --> 01:57:30,400
now now we have to allocate the memory

2221
01:57:30,400 --> 01:57:32,480
for the process parameter in the remote

2222
01:57:32,480 --> 01:57:35,440
process memory

2223
01:57:36,320 --> 01:57:38,080
so now we have allocated the remote

2224
01:57:38,080 --> 01:57:41,199
process for the parameter

2225
01:57:41,199 --> 01:57:42,880
so we remote process memory for the

2226
01:57:42,880 --> 01:57:45,520
parameter

2227
01:57:49,679 --> 01:57:51,040
now we will

2228
01:57:51,040 --> 01:57:52,960
write our

2229
01:57:52,960 --> 01:57:55,920
parameter into that newly allocated

2230
01:57:55,920 --> 01:57:59,280
memory in the remote process

2231
01:58:03,040 --> 01:58:06,880
so you can see this is the 1dd305

2232
01:58:06,880 --> 01:58:11,040
3 of f7 8940

2233
01:58:11,440 --> 01:58:15,598
this is the process parameter address

2234
01:58:18,400 --> 01:58:21,799
now here

2235
01:58:24,800 --> 01:58:26,960
now here we are writing the address of

2236
01:58:26,960 --> 01:58:29,199
the process parameter

2237
01:58:29,199 --> 01:58:33,239
using the right process memory

2238
01:58:35,920 --> 01:58:37,760
so at the

2239
01:58:37,760 --> 01:58:40,239
20th offset of the tape

2240
01:58:40,239 --> 01:58:41,920
uh we can see

2241
01:58:41,920 --> 01:58:44,560
once i click the reddit there will be

2242
01:58:44,560 --> 01:58:45,360
the

2243
01:58:45,360 --> 01:58:49,520
parameter address written so you can see

2244
01:58:49,520 --> 01:58:53,360
after that we can just resume the thread

2245
01:58:53,920 --> 01:58:56,639
so yeah the same thing happened

2246
01:58:56,639 --> 01:58:57,360
the

2247
01:58:57,360 --> 01:58:59,360
windows defender is blocking us from

2248
01:58:59,360 --> 01:59:02,920
creating the thread

2249
01:59:03,360 --> 01:59:05,199
so this is it for the

2250
01:59:05,199 --> 01:59:06,080
uh

2251
01:59:06,080 --> 01:59:07,520
for the processed

2252
01:59:07,520 --> 01:59:09,360
ghosting

2253
01:59:09,360 --> 01:59:12,159
now let me just restart this

2254
01:59:12,159 --> 01:59:14,560
vm and i'll try to turn off the windows

2255
01:59:14,560 --> 01:59:17,840
defender completely

2256
02:00:06,480 --> 02:00:08,560
so i will turn off the windows defender

2257
02:00:08,560 --> 02:00:10,800
completely here

2258
02:00:10,800 --> 02:00:12,719
and now we start the

2259
02:00:12,719 --> 02:00:13,760
pc

2260
02:00:13,760 --> 02:00:16,560
sorry the vm

2261
02:00:18,480 --> 02:00:20,639
and we can confirm that the

2262
02:00:20,639 --> 02:00:23,440
uh the process that the thread creation

2263
02:00:23,440 --> 02:00:28,759
was blocked by the windows defender

2264
02:01:08,400 --> 02:01:10,719
so let's test this with the process

2265
02:01:10,719 --> 02:01:13,440
ghosting now

2266
02:01:15,360 --> 02:01:17,280
i think the defender is completely

2267
02:01:17,280 --> 02:01:20,000
turned off now

2268
02:01:21,040 --> 02:01:25,560
let me just turn up from here as well

2269
02:01:53,119 --> 02:01:54,560
so let's

2270
02:01:54,560 --> 02:01:58,000
put the breakpoint here

2271
02:02:02,880 --> 02:02:05,440
so as you can see our

2272
02:02:05,440 --> 02:02:06,639
uh

2273
02:02:06,639 --> 02:02:08,639
our cell code is successfully execute

2274
02:02:08,639 --> 02:02:10,320
executed

2275
02:02:10,320 --> 02:02:12,800
so it was because of the windows

2276
02:02:12,800 --> 02:02:16,480
defender we were getting that error

2277
02:02:16,480 --> 02:02:18,000
so

2278
02:02:18,000 --> 02:02:21,280
uh you could always try this uh you know

2279
02:02:21,280 --> 02:02:22,880
try this at home

2280
02:02:22,880 --> 02:02:24,639
like you could always try

2281
02:02:24,639 --> 02:02:28,800
some new things to bypass this

2282
02:02:28,800 --> 02:02:30,800
bypass the defender using the different

2283
02:02:30,800 --> 02:02:33,800
technique

2284
02:02:41,280 --> 02:02:46,040
so let me just run this again

2285
02:02:51,360 --> 02:02:56,199
so let me just feel on this again

2286
02:03:05,440 --> 02:03:06,400
so

2287
02:03:06,400 --> 02:03:08,639
yeah i just wanted to show you this so

2288
02:03:08,639 --> 02:03:12,000
at this point you can see we have our

2289
02:03:12,000 --> 02:03:13,760
process parameter is set as the

2290
02:03:13,760 --> 02:03:16,080
svchost.exe

2291
02:03:16,080 --> 02:03:19,360
so if i just continue you can see

2292
02:03:19,360 --> 02:03:22,159
the process is successfully liquid

2293
02:03:22,159 --> 02:03:26,440
our circuit is successfully executed

2294
02:03:31,360 --> 02:03:34,080
so let's try this with the

2295
02:03:34,080 --> 02:03:38,040
harper derping as well

2296
02:03:47,280 --> 02:03:51,880
so let me just put the breakpoint here

2297
02:04:05,360 --> 02:04:07,040
so you can see

2298
02:04:07,040 --> 02:04:11,360
the process is executed successfully

2299
02:04:11,360 --> 02:04:12,880
sorry the cell code is executed

2300
02:04:12,880 --> 02:04:14,159
successfully

2301
02:04:14,159 --> 02:04:16,480
so the window defender was blocking us

2302
02:04:16,480 --> 02:04:17,440
to

2303
02:04:17,440 --> 02:04:22,440
create a new thread or the remote thread

2304
02:04:30,480 --> 02:04:33,520
so uh thank you everyone for

2305
02:04:33,520 --> 02:04:36,400
attending attending this webinar and

2306
02:04:36,400 --> 02:04:38,480
this is it for the

2307
02:04:38,480 --> 02:04:41,839
process injection technique

2308
02:04:43,119 --> 02:04:46,159
so if you have any queries you can just

2309
02:04:46,159 --> 02:04:50,759
drop drop into this app

2310
02:04:56,000 --> 02:04:58,079
you

