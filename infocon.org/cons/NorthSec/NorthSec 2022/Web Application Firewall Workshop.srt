1
00:00:33,840 --> 00:00:36,840
right

2
00:00:58,800 --> 00:01:01,800
yes

3
00:01:21,130 --> 00:01:22,320
[Music]

4
00:01:22,320 --> 00:01:25,320
oh

5
00:01:36,880 --> 00:01:39,880
oh

6
00:01:48,479 --> 00:01:51,479
um

7
00:01:54,560 --> 00:01:58,520
just don't click next

8
00:02:19,280 --> 00:02:22,280
this

9
00:02:34,560 --> 00:02:37,560
this

10
00:03:16,000 --> 00:03:19,000
is

11
00:03:23,840 --> 00:03:26,480
okay uh so outside so welcome everyone

12
00:03:26,480 --> 00:03:28,560
uh it's nice to do a

13
00:03:28,560 --> 00:03:30,879
live physical event so uh this will be a

14
00:03:30,879 --> 00:03:33,120
workshop as you can see on a web

15
00:03:33,120 --> 00:03:35,120
application parallel or often called

16
00:03:35,120 --> 00:03:36,720
just simple

17
00:03:36,720 --> 00:03:39,200
uh so this will be an interactive

18
00:03:39,200 --> 00:03:41,599
presentation so i'll have some slides

19
00:03:41,599 --> 00:03:44,000
uh but there is some uh instruction also

20
00:03:44,000 --> 00:03:46,799
to do by yourself some of the exercises

21
00:03:46,799 --> 00:03:48,879
so i'll give plenty of examples but

22
00:03:48,879 --> 00:03:50,319
we'll focus on

23
00:03:50,319 --> 00:03:51,840
at least

24
00:03:51,840 --> 00:03:53,920
four exercises

25
00:03:53,920 --> 00:03:55,680
so

26
00:03:55,680 --> 00:03:58,400
that's further to do so who am i so i'm

27
00:03:58,400 --> 00:04:00,400
a secret engineer for servicenow

28
00:04:00,400 --> 00:04:02,720
i used to be working for a good secure

29
00:04:02,720 --> 00:04:04,319
as a researcher

30
00:04:04,319 --> 00:04:05,360
uh

31
00:04:05,360 --> 00:04:07,120
i have interest in multiple things in

32
00:04:07,120 --> 00:04:09,760
security mainly application security uh

33
00:04:09,760 --> 00:04:12,319
anything related to application crypto

34
00:04:12,319 --> 00:04:14,400
and static analysis

35
00:04:14,400 --> 00:04:16,320
so one of the projects i've started is

36
00:04:16,320 --> 00:04:18,399
uh fancy bugs

37
00:04:18,399 --> 00:04:21,120
it's it's a 10 years old uh static iss

38
00:04:21,120 --> 00:04:23,680
tool that is focusing mainly on java and

39
00:04:23,680 --> 00:04:25,759
patching language

40
00:04:25,759 --> 00:04:26,639
so

41
00:04:26,639 --> 00:04:28,800
if you're interested

42
00:04:28,800 --> 00:04:30,400
there

43
00:04:30,400 --> 00:04:32,960
now for this presentation um

44
00:04:32,960 --> 00:04:36,960
i divided in into five main category of

45
00:04:36,960 --> 00:04:38,560
wife bypass

46
00:04:38,560 --> 00:04:42,479
plus an introduction to begin with and

47
00:04:42,479 --> 00:04:44,160
those categories

48
00:04:44,160 --> 00:04:46,000
are general categories so i'll give

49
00:04:46,000 --> 00:04:47,919
plenty of examples for each

50
00:04:47,919 --> 00:04:49,680
but i think the main goal of this

51
00:04:49,680 --> 00:04:51,280
presentation is that you remember the

52
00:04:51,280 --> 00:04:53,440
general category so if you ever

53
00:04:53,440 --> 00:04:54,560
encounter

54
00:04:54,560 --> 00:04:58,240
either a middleware that is a wife a

55
00:04:58,240 --> 00:05:00,080
reverse proxy

56
00:05:00,080 --> 00:05:03,039
maybe some a bunch of reg eggs that are

57
00:05:03,039 --> 00:05:05,120
inside of an application maybe an each

58
00:05:05,120 --> 00:05:06,080
access

59
00:05:06,080 --> 00:05:08,000
file that is blocking some path or some

60
00:05:08,000 --> 00:05:09,360
parameter

61
00:05:09,360 --> 00:05:11,360
it will be the same pattern so

62
00:05:11,360 --> 00:05:14,160
uh you have some tool to think okay what

63
00:05:14,160 --> 00:05:16,080
are the type of ways that i can attack

64
00:05:16,080 --> 00:05:17,280
this problem

65
00:05:17,280 --> 00:05:19,919
and often it's because people will focus

66
00:05:19,919 --> 00:05:21,440
on one

67
00:05:21,440 --> 00:05:22,960
aspect of it so

68
00:05:22,960 --> 00:05:25,440
often people will focus only on ankle

69
00:05:25,440 --> 00:05:27,039
damage but we'll see that there are some

70
00:05:27,039 --> 00:05:29,199
time alternatives that are easier

71
00:05:29,199 --> 00:05:31,440
uh to uh

72
00:05:31,440 --> 00:05:35,600
to use to bypass some filters

73
00:05:37,680 --> 00:05:39,919
uh now for this workshop i'll give you

74
00:05:39,919 --> 00:05:41,039
uh

75
00:05:41,039 --> 00:05:43,360
a good 30 second if you want to take a

76
00:05:43,360 --> 00:05:45,360
note and well we'll do the exercise i'll

77
00:05:45,360 --> 00:05:49,280
show again the uh the requester urls but

78
00:05:49,280 --> 00:05:51,280
basically at this repository you'll find

79
00:05:51,280 --> 00:05:53,759
all the code that i'm running for the

80
00:05:53,759 --> 00:05:55,199
application

81
00:05:55,199 --> 00:05:57,440
and you'll also find link to the site

82
00:05:57,440 --> 00:06:00,080
that i'm showing

83
00:06:00,160 --> 00:06:01,919
so i'll show you

84
00:06:01,919 --> 00:06:03,199
and

85
00:06:03,199 --> 00:06:07,120
so the slide are a summarized version of

86
00:06:07,120 --> 00:06:08,720
a mini website

87
00:06:08,720 --> 00:06:10,880
so

88
00:06:11,680 --> 00:06:14,160
this is uh all the content of this

89
00:06:14,160 --> 00:06:16,720
presentation so i'll zoom a bit on it

90
00:06:16,720 --> 00:06:19,120
but you'll see uh there's quite

91
00:06:19,120 --> 00:06:20,720
something so

92
00:06:20,720 --> 00:06:22,720
for each categories there will be some

93
00:06:22,720 --> 00:06:25,919
material and then some step-by-step

94
00:06:25,919 --> 00:06:29,360
instruction for the different lab

95
00:06:29,360 --> 00:06:31,120
here

96
00:06:31,120 --> 00:06:32,800
you'll see a

97
00:06:32,800 --> 00:06:34,880
different payload a few questions that

98
00:06:34,880 --> 00:06:36,400
i'll be asking

99
00:06:36,400 --> 00:06:39,680
so you can either follow along the slide

100
00:06:39,680 --> 00:06:42,240
or the this but really for the exercise

101
00:06:42,240 --> 00:06:44,080
you should be referring to

102
00:06:44,080 --> 00:06:44,880
this

103
00:06:44,880 --> 00:06:46,800
small website

104
00:06:46,800 --> 00:06:51,599
that is the the second link here

105
00:06:52,240 --> 00:06:54,000
so but

106
00:06:54,000 --> 00:06:57,199
wait uh until i um tell you that we're

107
00:06:57,199 --> 00:07:00,160
doing an exercise uh but for now if you

108
00:07:00,160 --> 00:07:01,440
have a

109
00:07:01,440 --> 00:07:06,080
um okay i'll need to reopen this line

110
00:07:07,840 --> 00:07:10,080
okay

111
00:07:14,000 --> 00:07:17,280
but that's foreign

112
00:07:17,280 --> 00:07:19,680
now uh just some quick definition to

113
00:07:19,680 --> 00:07:21,440
make sure everybody understands what is

114
00:07:21,440 --> 00:07:23,840
a web application firewall so often they

115
00:07:23,840 --> 00:07:26,160
are just called waff so you'll probably

116
00:07:26,160 --> 00:07:27,840
hear this uh for the rest of the

117
00:07:27,840 --> 00:07:29,039
presentation

118
00:07:29,039 --> 00:07:31,440
their purpose is either to filter some

119
00:07:31,440 --> 00:07:34,479
requests a monitor so maybe not block

120
00:07:34,479 --> 00:07:36,240
everything but sometimes raise alert

121
00:07:36,240 --> 00:07:38,400
that there is potentially an attacker

122
00:07:38,400 --> 00:07:41,280
exploiting your web application

123
00:07:41,280 --> 00:07:43,440
or even to block

124
00:07:43,440 --> 00:07:45,840
requests

125
00:07:46,240 --> 00:07:48,800
so i have some traffic so

126
00:07:48,800 --> 00:07:51,599
the wife will be installed or

127
00:07:51,599 --> 00:07:53,840
deployed between the client so this will

128
00:07:53,840 --> 00:07:54,560
be

129
00:07:54,560 --> 00:07:56,160
your

130
00:07:56,160 --> 00:07:58,960
external user on the internet and the

131
00:07:58,960 --> 00:08:01,120
backend will be your application

132
00:08:01,120 --> 00:08:02,240
and what

133
00:08:02,240 --> 00:08:04,879
while this is represented as

134
00:08:04,879 --> 00:08:06,639
a different server or

135
00:08:06,639 --> 00:08:08,080
application

136
00:08:08,080 --> 00:08:10,400
sometime it will be as just a different

137
00:08:10,400 --> 00:08:12,479
application running on the same machine

138
00:08:12,479 --> 00:08:14,479
sometimes it will even just be a

139
00:08:14,479 --> 00:08:16,479
component inside of the web framework

140
00:08:16,479 --> 00:08:18,560
that will do some filtering for

141
00:08:18,560 --> 00:08:22,080
potential matches just be careful

142
00:08:22,479 --> 00:08:25,280
uh oh no possible i think working and

143
00:08:25,280 --> 00:08:27,360
i'm using the webcam for

144
00:08:27,360 --> 00:08:28,479
zoom

145
00:08:28,479 --> 00:08:30,240
for this song okay

146
00:08:30,240 --> 00:08:32,879
um yeah

147
00:08:32,958 --> 00:08:34,000
yeah

148
00:08:34,000 --> 00:08:35,120
um

149
00:08:35,120 --> 00:08:37,120
okay some of the vendors so what are

150
00:08:37,120 --> 00:08:38,880
some examples of a web that you can

151
00:08:38,880 --> 00:08:41,440
encounter so usually when people deploy

152
00:08:41,440 --> 00:08:43,200
manually uh

153
00:08:43,200 --> 00:08:45,360
waff this will be sometimes just a

154
00:08:45,360 --> 00:08:47,040
module or a feature that they would

155
00:08:47,040 --> 00:08:48,959
enable on their love but lancers so this

156
00:08:48,959 --> 00:08:51,600
is the case for f5

157
00:08:51,600 --> 00:08:52,720
but

158
00:08:52,720 --> 00:08:54,640
if you want to just start and have some

159
00:08:54,640 --> 00:08:56,320
level of protection on your web

160
00:08:56,320 --> 00:08:58,800
application you can deploy freely

161
00:08:58,800 --> 00:09:02,240
mode security or maxi

162
00:09:02,240 --> 00:09:05,519
uh unfortunately my security uh is not

163
00:09:05,519 --> 00:09:07,040
actively maintained

164
00:09:07,040 --> 00:09:10,560
but there's already a good set of rules

165
00:09:10,560 --> 00:09:13,440
but we'll see that are some edge case

166
00:09:13,440 --> 00:09:15,120
that we can exploit on not security

167
00:09:15,120 --> 00:09:16,000
today

168
00:09:16,000 --> 00:09:19,440
so i'll show some example

169
00:09:19,440 --> 00:09:20,320
but

170
00:09:20,320 --> 00:09:24,399
almost cloud for providers so azure aws

171
00:09:24,399 --> 00:09:26,880
that's the red logo at the bottom they

172
00:09:26,880 --> 00:09:29,920
have their own uh waff

173
00:09:29,920 --> 00:09:30,720
and

174
00:09:30,720 --> 00:09:32,800
the clear advantage of having waf in

175
00:09:32,800 --> 00:09:34,399
their infrastructure is that if there is

176
00:09:34,399 --> 00:09:36,240
some new variety that come out let's say

177
00:09:36,240 --> 00:09:38,480
for log for shell that came out last

178
00:09:38,480 --> 00:09:39,360
year

179
00:09:39,360 --> 00:09:41,360
you can provide a quick response to

180
00:09:41,360 --> 00:09:44,320
block some payload uh automatically so

181
00:09:44,320 --> 00:09:45,760
if you can see that there are some

182
00:09:45,760 --> 00:09:47,680
automate scanner and experts that are

183
00:09:47,680 --> 00:09:49,040
being shared to

184
00:09:49,040 --> 00:09:52,080
test those exploit you can

185
00:09:52,080 --> 00:09:54,640
try to find a pattern and create a rule

186
00:09:54,640 --> 00:09:56,399
that will protect all your client at the

187
00:09:56,399 --> 00:09:57,440
same time

188
00:09:57,440 --> 00:10:00,160
so because not all client can update at

189
00:10:00,160 --> 00:10:01,600
the same

190
00:10:01,600 --> 00:10:02,560
speed

191
00:10:02,560 --> 00:10:06,719
it's a way to provide a quick response

192
00:10:08,480 --> 00:10:09,200
so

193
00:10:09,200 --> 00:10:11,120
the first segment you'll see it's going

194
00:10:11,120 --> 00:10:13,600
to be uh maybe too obvious or too simple

195
00:10:13,600 --> 00:10:16,399
but often people forget about it

196
00:10:16,399 --> 00:10:19,600
it's simply uh if some specific path or

197
00:10:19,600 --> 00:10:22,640
parameter is blocked or some keyword

198
00:10:22,640 --> 00:10:24,880
the first step should be trying to find

199
00:10:24,880 --> 00:10:26,160
alternatives

200
00:10:26,160 --> 00:10:28,160
so an example of this

201
00:10:28,160 --> 00:10:30,880
uh is on wordpress so

202
00:10:30,880 --> 00:10:32,800
many club provider will

203
00:10:32,800 --> 00:10:34,399
block some endpoint because they leave

204
00:10:34,399 --> 00:10:36,240
too much information about the user

205
00:10:36,240 --> 00:10:39,120
including some username some emails

206
00:10:39,120 --> 00:10:41,519
uh so this is the case for uh

207
00:10:41,519 --> 00:10:43,760
wordpress so they will try to block the

208
00:10:43,760 --> 00:10:44,959
first part

209
00:10:44,959 --> 00:10:48,800
so ending with a wp a v2 user

210
00:10:48,800 --> 00:10:50,880
but often they forget that there are

211
00:10:50,880 --> 00:10:53,360
plenty of other ways that you can get

212
00:10:53,360 --> 00:10:55,360
the same information so you can i

213
00:10:55,360 --> 00:10:57,839
request the author page

214
00:10:57,839 --> 00:11:01,040
you can call the same uh

215
00:11:01,040 --> 00:11:03,519
v2 user endpoint

216
00:11:03,519 --> 00:11:05,920
using uh the restaurant parameter

217
00:11:05,920 --> 00:11:07,120
this is because

218
00:11:07,120 --> 00:11:09,519
wp json is just uh

219
00:11:09,519 --> 00:11:10,720
rewriting

220
00:11:10,720 --> 00:11:14,720
to the index page with the restaurant

221
00:11:14,720 --> 00:11:16,959
parameter pass so in the end it's the

222
00:11:16,959 --> 00:11:19,279
same endpoint being accessed but

223
00:11:19,279 --> 00:11:21,120
different url

224
00:11:21,120 --> 00:11:22,000
uh

225
00:11:22,000 --> 00:11:24,079
alternatively even if you have some

226
00:11:24,079 --> 00:11:26,240
plugin sometimes install either the

227
00:11:26,240 --> 00:11:28,800
information can be accessible

228
00:11:28,800 --> 00:11:30,720
elsewhere so uh if you have a

229
00:11:30,720 --> 00:11:32,800
wordpress.com website

230
00:11:32,800 --> 00:11:35,120
uh it might not be excelled directly

231
00:11:35,120 --> 00:11:37,440
through the slash user endpoint

232
00:11:37,440 --> 00:11:38,320
but

233
00:11:38,320 --> 00:11:40,079
with the jetpack plugin that is enabled

234
00:11:40,079 --> 00:11:41,760
by default

235
00:11:41,760 --> 00:11:42,560
your

236
00:11:42,560 --> 00:11:44,240
user list will be accessible also

237
00:11:44,240 --> 00:11:46,160
through this row

238
00:11:46,160 --> 00:11:47,920
there are also some other alternatives

239
00:11:47,920 --> 00:11:49,920
explained in this article

240
00:11:49,920 --> 00:11:51,600
but they will use some techniques that

241
00:11:51,600 --> 00:11:55,240
i'll explain later

242
00:11:56,079 --> 00:11:58,639
now when it comes to xss uh you can

243
00:11:58,639 --> 00:12:00,399
simply try to find some alternative

244
00:12:00,399 --> 00:12:01,440
types so

245
00:12:01,440 --> 00:12:02,800
this will be a

246
00:12:02,800 --> 00:12:05,920
much more easier if it's just some regix

247
00:12:05,920 --> 00:12:07,600
that was implemented by a developer to

248
00:12:07,600 --> 00:12:08,639
quickly

249
00:12:08,639 --> 00:12:09,440
patch

250
00:12:09,440 --> 00:12:11,200
a specific case

251
00:12:11,200 --> 00:12:13,360
you're you'll easily find uh some

252
00:12:13,360 --> 00:12:14,800
alternative tag

253
00:12:14,800 --> 00:12:17,120
if you're looking to bypass

254
00:12:17,120 --> 00:12:19,200
html sanitizer that it is well

255
00:12:19,200 --> 00:12:20,560
maintained

256
00:12:20,560 --> 00:12:22,800
it will be more complicated but try to

257
00:12:22,800 --> 00:12:25,120
find other alternative tags or

258
00:12:25,120 --> 00:12:26,320
attributes

259
00:12:26,320 --> 00:12:27,519
so i'll

260
00:12:27,519 --> 00:12:29,920
give some example here so instead of

261
00:12:29,920 --> 00:12:32,079
using a script tag or an image tag that

262
00:12:32,079 --> 00:12:32,959
are

263
00:12:32,959 --> 00:12:34,639
the typical

264
00:12:34,639 --> 00:12:38,079
xss payload for testing uh try to use

265
00:12:38,079 --> 00:12:41,279
svg tag a video tag or even

266
00:12:41,279 --> 00:12:43,440
in this case um

267
00:12:43,440 --> 00:12:45,680
one of a researcher found that using

268
00:12:45,680 --> 00:12:47,360
details

269
00:12:47,360 --> 00:12:50,959
along some on toggle

270
00:12:51,839 --> 00:12:55,600
uh but it also mixed with some uh

271
00:12:55,600 --> 00:12:57,120
case uh

272
00:12:57,120 --> 00:12:59,519
has changed to some of the property and

273
00:12:59,519 --> 00:13:02,160
it add new line so it's a combination of

274
00:13:02,160 --> 00:13:05,760
many pattern but we can see that using

275
00:13:05,760 --> 00:13:07,760
tags can often

276
00:13:07,760 --> 00:13:08,880
easily

277
00:13:08,880 --> 00:13:11,920
bypass some filters

278
00:13:11,920 --> 00:13:14,000
now it comes when it comes to

279
00:13:14,000 --> 00:13:15,920
sql injection

280
00:13:15,920 --> 00:13:17,760
there are some tables that will be a

281
00:13:17,760 --> 00:13:19,839
blacklist or some keyword that would be

282
00:13:19,839 --> 00:13:22,240
practiced in almost all web

283
00:13:22,240 --> 00:13:24,720
so it's unlikely that your

284
00:13:24,720 --> 00:13:26,639
normal user will submit information

285
00:13:26,639 --> 00:13:27,680
schema

286
00:13:27,680 --> 00:13:30,959
the tables or dot coms unless it's a

287
00:13:30,959 --> 00:13:32,639
forum's

288
00:13:32,639 --> 00:13:35,279
talking and discussing about sql

289
00:13:35,279 --> 00:13:36,079
so

290
00:13:36,079 --> 00:13:38,480
it's pretty safe to uh block those

291
00:13:38,480 --> 00:13:40,240
complete keyword

292
00:13:40,240 --> 00:13:41,279
uh so

293
00:13:41,279 --> 00:13:43,279
if it's just a list of keyword that is

294
00:13:43,279 --> 00:13:45,279
blocked try to find some alternative

295
00:13:45,279 --> 00:13:46,320
table

296
00:13:46,320 --> 00:13:48,720
so often it will be uh either

297
00:13:48,720 --> 00:13:51,839
just positive also air table constraint

298
00:13:51,839 --> 00:13:54,240
doesn't include just table names but

299
00:13:54,240 --> 00:13:56,000
come straight with the two table but

300
00:13:56,000 --> 00:13:58,079
you'll be able to find table name this

301
00:13:58,079 --> 00:13:59,040
way

302
00:13:59,040 --> 00:14:01,839
uh often statistic table so

303
00:14:01,839 --> 00:14:04,240
these will either be provided by the

304
00:14:04,240 --> 00:14:08,480
dbms itself or sometime it's some

305
00:14:08,800 --> 00:14:10,320
a module that was installed with the

306
00:14:10,320 --> 00:14:12,160
framework that will create some table

307
00:14:12,160 --> 00:14:13,600
for statistics

308
00:14:13,600 --> 00:14:15,440
and you can target those to get some

309
00:14:15,440 --> 00:14:16,480
innovation

310
00:14:16,480 --> 00:14:19,360
and find some hidden table

311
00:14:19,360 --> 00:14:21,279
now i have a question for you

312
00:14:21,279 --> 00:14:23,440
does anybody know what uh underscoring

313
00:14:23,440 --> 00:14:26,320
this congregation history is

314
00:14:26,320 --> 00:14:28,959
this table is doing

315
00:14:28,959 --> 00:14:31,920
so it's no longer events since a year

316
00:14:31,920 --> 00:14:33,120
and a half

317
00:14:33,120 --> 00:14:36,160
but it was the table used by uh entity

318
00:14:36,160 --> 00:14:37,519
uh

319
00:14:37,519 --> 00:14:39,760
uh framework for for the app

320
00:14:39,760 --> 00:14:42,160
i think it's entity framework

321
00:14:42,160 --> 00:14:43,279
uh something

322
00:14:43,279 --> 00:14:46,000
like that uh now it was renamed to

323
00:14:46,000 --> 00:14:48,880
underscore score ef migration history

324
00:14:48,880 --> 00:14:52,000
and it no longer has a special column

325
00:14:52,000 --> 00:14:53,839
that was a model

326
00:14:53,839 --> 00:14:56,079
that had the complete

327
00:14:56,079 --> 00:15:00,399
table model of the orm uh gzip and in

328
00:15:00,399 --> 00:15:02,720
one column so you used to be able to

329
00:15:02,720 --> 00:15:04,880
target this cut this table

330
00:15:04,880 --> 00:15:07,360
and extract uh the list of column and

331
00:15:07,360 --> 00:15:08,639
table in

332
00:15:08,639 --> 00:15:09,839
one week

333
00:15:09,839 --> 00:15:12,320
and it's actually pretty rare i i didn't

334
00:15:12,320 --> 00:15:15,760
see it uh in other door or

335
00:15:15,760 --> 00:15:17,120
who are

336
00:15:17,120 --> 00:15:18,320
so um

337
00:15:18,320 --> 00:15:20,880
and the last example this is for oracle

338
00:15:20,880 --> 00:15:21,839
so

339
00:15:21,839 --> 00:15:22,720
all

340
00:15:22,720 --> 00:15:27,040
underscore tables will be blacklist in

341
00:15:30,880 --> 00:15:33,920
statistic also include table names so

342
00:15:33,920 --> 00:15:36,079
you can try those if

343
00:15:36,079 --> 00:15:38,839
only specific table name are

344
00:15:38,839 --> 00:15:42,160
blocked uh for the exercise of this one

345
00:15:42,160 --> 00:15:43,279
i'll

346
00:15:43,279 --> 00:15:45,199
it will be in the next at the end of the

347
00:15:45,199 --> 00:15:47,839
next section so i'll in i've included

348
00:15:47,839 --> 00:15:49,920
one exercise but generally the

349
00:15:49,920 --> 00:15:51,440
methodology for

350
00:15:51,440 --> 00:15:54,560
finding those alternate keyword or table

351
00:15:54,560 --> 00:15:57,600
is just digging for the documentation so

352
00:15:57,600 --> 00:15:59,120
i didn't want to do an exercise where

353
00:15:59,120 --> 00:16:00,639
you just had to

354
00:16:00,639 --> 00:16:02,480
do some google search for for some

355
00:16:02,480 --> 00:16:04,639
framework because it can be a time

356
00:16:04,639 --> 00:16:06,880
consuming and it's either you find it or

357
00:16:06,880 --> 00:16:09,600
you don't

358
00:16:09,600 --> 00:16:11,040
but i

359
00:16:11,040 --> 00:16:12,560
found a way uh later on to have an

360
00:16:12,560 --> 00:16:14,399
exercise on it

361
00:16:14,399 --> 00:16:16,320
now encoding this is

362
00:16:16,320 --> 00:16:18,320
probably what people

363
00:16:18,320 --> 00:16:20,480
often think first so

364
00:16:20,480 --> 00:16:22,320
they think okay we have a web

365
00:16:22,320 --> 00:16:24,240
application firewall it's detached from

366
00:16:24,240 --> 00:16:26,079
the application so it doesn't have all

367
00:16:26,079 --> 00:16:27,360
the contacts

368
00:16:27,360 --> 00:16:30,639
attached to the request so uh so maybe

369
00:16:30,639 --> 00:16:32,160
uh the application is doing some

370
00:16:32,160 --> 00:16:33,680
additional decoding

371
00:16:33,680 --> 00:16:34,639
uh

372
00:16:34,639 --> 00:16:36,880
and then uh

373
00:16:36,880 --> 00:16:38,800
i can do some transformation to some of

374
00:16:38,800 --> 00:16:40,639
the parameter that i'm i'm

375
00:16:40,639 --> 00:16:42,720
sending to the application and

376
00:16:42,720 --> 00:16:44,399
the idea is

377
00:16:44,399 --> 00:16:46,399
we're not sending a different parameter

378
00:16:46,399 --> 00:16:48,320
but we're gonna encode it slightly

379
00:16:48,320 --> 00:16:51,120
differently that the waff will not be

380
00:16:51,120 --> 00:16:53,920
able to see that that it's actually a

381
00:16:53,920 --> 00:16:56,240
keyword that it has like this because

382
00:16:56,240 --> 00:16:58,639
it's slightly encoded differently

383
00:16:58,639 --> 00:17:01,920
so uh one example is changing a case

384
00:17:01,920 --> 00:17:04,400
mapping so in unicode

385
00:17:04,400 --> 00:17:07,520
our basic st character will have an

386
00:17:07,520 --> 00:17:09,839
upper case and a lowercase version of

387
00:17:09,839 --> 00:17:11,439
those

388
00:17:11,439 --> 00:17:13,359
and um

389
00:17:13,359 --> 00:17:15,520
if the application in the end does some

390
00:17:15,520 --> 00:17:16,559
lower

391
00:17:16,559 --> 00:17:17,439
case

392
00:17:17,439 --> 00:17:19,760
operation or uppercase

393
00:17:19,760 --> 00:17:22,400
or some insensitive uh

394
00:17:22,400 --> 00:17:23,919
operation

395
00:17:23,919 --> 00:17:26,640
then you can just change the case of the

396
00:17:26,640 --> 00:17:28,480
keyword and maybe you'll be able to

397
00:17:28,480 --> 00:17:29,360
black

398
00:17:29,360 --> 00:17:31,679
to bypass the wife

399
00:17:31,679 --> 00:17:32,960
so

400
00:17:32,960 --> 00:17:34,720
what do you need to look for when you're

401
00:17:34,720 --> 00:17:36,400
reviewing some maybe some regex on

402
00:17:36,400 --> 00:17:38,240
console configuration

403
00:17:38,240 --> 00:17:41,120
uh look for case insensitivity so

404
00:17:41,120 --> 00:17:43,280
if you have a

405
00:17:43,280 --> 00:17:45,200
rig x in your wife configure make sure

406
00:17:45,200 --> 00:17:47,039
if as for example

407
00:17:47,039 --> 00:17:48,240
php

408
00:17:48,240 --> 00:17:49,760
you would see the

409
00:17:49,760 --> 00:17:51,280
the

410
00:17:51,280 --> 00:17:54,400
identifier idm saying okay if this

411
00:17:54,400 --> 00:17:57,840
pattern is present but regardless of

412
00:17:57,840 --> 00:18:00,480
the the case it would be like this in

413
00:18:00,480 --> 00:18:02,240
python you need to add an additional

414
00:18:02,240 --> 00:18:04,240
flag

415
00:18:04,240 --> 00:18:06,960
and in apache http server

416
00:18:06,960 --> 00:18:09,840
you need to add those nc

417
00:18:09,840 --> 00:18:12,640
otherwise it will be strict

418
00:18:12,640 --> 00:18:14,080
case mapping

419
00:18:14,080 --> 00:18:16,160
case validation so case mapping is the

420
00:18:16,160 --> 00:18:17,200
operation

421
00:18:17,200 --> 00:18:17,919
of

422
00:18:17,919 --> 00:18:20,240
finding the upper case equivalent

423
00:18:20,240 --> 00:18:22,240
character

424
00:18:22,240 --> 00:18:23,440
but yeah

425
00:18:23,440 --> 00:18:25,679
so make sure if you are looking at or

426
00:18:25,679 --> 00:18:28,400
investigating at the some filter the

427
00:18:28,400 --> 00:18:31,760
insensitivity is enabled

428
00:18:31,760 --> 00:18:33,760
we are encoding this is something you

429
00:18:33,760 --> 00:18:37,520
can encode and sometimes double wrangle

430
00:18:37,520 --> 00:18:39,440
this will be possible because

431
00:18:39,440 --> 00:18:41,600
some components will sometimes do

432
00:18:41,600 --> 00:18:43,760
encoding that is unnecessary

433
00:18:43,760 --> 00:18:46,400
so uh there is this case here for a path

434
00:18:46,400 --> 00:18:48,240
for an exploit that i don't know about

435
00:18:48,240 --> 00:18:50,880
but the idea is that the component that

436
00:18:50,880 --> 00:18:53,919
is trying to load the file on disk

437
00:18:53,919 --> 00:18:57,120
maybe is not sure about the way that the

438
00:18:57,120 --> 00:18:59,039
the parameter will will come to this

439
00:18:59,039 --> 00:19:02,240
component so it's doing an additional

440
00:19:02,240 --> 00:19:04,480
reality coding that the web container

441
00:19:04,480 --> 00:19:05,919
already did

442
00:19:05,919 --> 00:19:08,160
so if you have a component that or

443
00:19:08,160 --> 00:19:10,880
one or two that are doing additional uh

444
00:19:10,880 --> 00:19:13,600
encoding then you can potentially do

445
00:19:13,600 --> 00:19:14,880
this

446
00:19:14,880 --> 00:19:16,160
um

447
00:19:16,160 --> 00:19:17,919
so and sometimes it can be really deep

448
00:19:17,919 --> 00:19:20,080
so if you have a the component that is a

449
00:19:20,080 --> 00:19:22,320
reading file that is doing

450
00:19:22,320 --> 00:19:25,120
unnecessary reality coding

451
00:19:25,120 --> 00:19:27,520
then you can do this

452
00:19:27,520 --> 00:19:30,480
uh we'll add the case here for uh

453
00:19:30,480 --> 00:19:32,000
for uh

454
00:19:32,000 --> 00:19:36,559
an xss pattern so here it's just

455
00:19:36,640 --> 00:19:38,880
excellent that are encoded

456
00:19:38,880 --> 00:19:41,280
to a bypass potential filter that will

457
00:19:41,280 --> 00:19:42,000
look

458
00:19:42,000 --> 00:19:45,120
only for script with tags

459
00:19:45,120 --> 00:19:46,640
but because the application is doing

460
00:19:46,640 --> 00:19:50,960
some unnecessary decoding we can do this

461
00:19:51,039 --> 00:19:52,799
now some uh

462
00:19:52,799 --> 00:19:55,360
xss is

463
00:19:55,360 --> 00:19:57,600
a vector where we'll have plenty of

464
00:19:57,600 --> 00:19:58,960
opportunity because

465
00:19:58,960 --> 00:20:01,200
depending on on where the values are

466
00:20:01,200 --> 00:20:03,520
placed in the page we'll be able to

467
00:20:03,520 --> 00:20:06,640
encode sometime our value

468
00:20:06,640 --> 00:20:08,720
with additional incoming so

469
00:20:08,720 --> 00:20:10,799
if it's present either in an attribute

470
00:20:10,799 --> 00:20:12,640
or in an xml tag

471
00:20:12,640 --> 00:20:14,559
and it's read by javascript

472
00:20:14,559 --> 00:20:17,039
then you can encode it with excel

473
00:20:17,039 --> 00:20:18,480
entities because

474
00:20:18,480 --> 00:20:20,640
when it's going to be read from the dom

475
00:20:20,640 --> 00:20:22,880
by javascript automatically those

476
00:20:22,880 --> 00:20:24,880
entities gets decoded

477
00:20:24,880 --> 00:20:26,640
so this is a behavior that happened

478
00:20:26,640 --> 00:20:28,640
client side but the idea is that your

479
00:20:28,640 --> 00:20:32,400
wife would not necessarily look for

480
00:20:32,400 --> 00:20:35,440
xml entities encoded parameter and think

481
00:20:35,440 --> 00:20:36,880
that it will be safe even though it's

482
00:20:36,880 --> 00:20:37,919
reflected

483
00:20:37,919 --> 00:20:39,919
as is

484
00:20:39,919 --> 00:20:42,720
uh so you can do any of these with name

485
00:20:42,720 --> 00:20:44,320
so here is a

486
00:20:44,320 --> 00:20:47,280
lower than so

487
00:20:47,360 --> 00:20:49,360
starting character for external tags or

488
00:20:49,360 --> 00:20:50,640
html types

489
00:20:50,640 --> 00:20:52,400
but you can encode the same character

490
00:20:52,400 --> 00:20:53,520
with uh

491
00:20:53,520 --> 00:20:56,000
x value

492
00:20:56,159 --> 00:20:58,000
or the decimal one

493
00:20:58,000 --> 00:21:00,840
60 in exact small is

494
00:21:00,840 --> 00:21:04,159
3c if it's present your value end up in

495
00:21:04,159 --> 00:21:06,720
javascript

496
00:21:06,720 --> 00:21:10,799
you'll be able to use some slash encoded

497
00:21:11,120 --> 00:21:13,039
escape

498
00:21:13,039 --> 00:21:14,000
value

499
00:21:14,000 --> 00:21:15,600
but basically the way to represent this

500
00:21:15,600 --> 00:21:17,520
character is pretty rare because it's

501
00:21:17,520 --> 00:21:19,760
going to be either in javascript or some

502
00:21:19,760 --> 00:21:22,559
type of scripting

503
00:21:22,720 --> 00:21:25,600
if you are trying to just uh bypass some

504
00:21:25,600 --> 00:21:27,679
specific character that are a filter so

505
00:21:27,679 --> 00:21:30,400
maybe single chord or double quote

506
00:21:30,400 --> 00:21:33,039
you can use sometime

507
00:21:33,039 --> 00:21:35,280
function that will

508
00:21:35,280 --> 00:21:36,960
provide the same result

509
00:21:36,960 --> 00:21:39,840
but without

510
00:21:39,840 --> 00:21:41,919
using a single directory you'll be able

511
00:21:41,919 --> 00:21:43,360
to integrate

512
00:21:43,360 --> 00:21:46,000
those same x values but as parameter to

513
00:21:46,000 --> 00:21:48,080
this function so this is not exactly

514
00:21:48,080 --> 00:21:51,120
encoding but i have to to replace it

515
00:21:51,120 --> 00:21:53,360
here

516
00:21:54,080 --> 00:21:57,120
now another avenue is unicode encoding

517
00:21:57,120 --> 00:22:00,000
so this will apply uh if only if you're

518
00:22:00,000 --> 00:22:01,280
you have some file that has been

519
00:22:01,280 --> 00:22:02,559
uploaded and

520
00:22:02,559 --> 00:22:04,240
your file is being blocked because some

521
00:22:04,240 --> 00:22:06,400
analysis is done to the file

522
00:22:06,400 --> 00:22:08,640
or in some case to the

523
00:22:08,640 --> 00:22:10,799
the body of requests where you can

524
00:22:10,799 --> 00:22:13,200
specify the specific and cooling

525
00:22:13,200 --> 00:22:14,080
so

526
00:22:14,080 --> 00:22:17,760
utf-7 is mostly historic because chrome

527
00:22:17,760 --> 00:22:20,400
i think since 2009 doesn't support it

528
00:22:20,400 --> 00:22:23,039
anymore and most browser won't support

529
00:22:23,039 --> 00:22:25,120
it

530
00:22:25,120 --> 00:22:27,200
and many uh web frameworks simply don't

531
00:22:27,200 --> 00:22:30,720
support this uh content type anymore

532
00:22:30,720 --> 00:22:34,240
but we still have uh utf-16 uh

533
00:22:34,240 --> 00:22:36,640
the little engine and big engine version

534
00:22:36,640 --> 00:22:38,400
that are still available

535
00:22:38,400 --> 00:22:40,480
so this means that uh

536
00:22:40,480 --> 00:22:43,679
so the preservative with uh

537
00:22:43,679 --> 00:22:46,720
uh utf-16 is that you need to place some

538
00:22:46,720 --> 00:22:49,919
what i call bum or byte order

539
00:22:49,919 --> 00:22:52,480
mark so this is the first two byte or

540
00:22:52,480 --> 00:22:54,799
three bytes i'm not sure so that will

541
00:22:54,799 --> 00:22:55,840
define

542
00:22:55,840 --> 00:22:57,840
what encoding is being used so most

543
00:22:57,840 --> 00:23:00,400
application will have we'll be using

544
00:23:00,400 --> 00:23:03,280
utf-8 by default but if you specify

545
00:23:03,280 --> 00:23:04,880
those uh

546
00:23:04,880 --> 00:23:07,039
specific marker then you'll be able to

547
00:23:07,039 --> 00:23:09,600
encode it in etf 16

548
00:23:09,600 --> 00:23:11,039
kelly or v

549
00:23:11,039 --> 00:23:12,240
so

550
00:23:12,240 --> 00:23:15,280
every character will take two bytes so

551
00:23:15,280 --> 00:23:16,880
for uh

552
00:23:16,880 --> 00:23:17,840
um

553
00:23:17,840 --> 00:23:20,080
a web that is doing strict byte

554
00:23:20,080 --> 00:23:22,480
comparison so thinking that it's pdf

555
00:23:22,480 --> 00:23:23,520
eight string

556
00:23:23,520 --> 00:23:26,240
it will think that these are go by

557
00:23:26,240 --> 00:23:29,200
uh separating every character so most of

558
00:23:29,200 --> 00:23:32,559
of regex will fail

559
00:23:33,520 --> 00:23:36,720
um yeah and etf 32

560
00:23:36,720 --> 00:23:38,720
uh pretty rare but it's a

561
00:23:38,720 --> 00:23:41,679
also a fixed-length uh

562
00:23:41,679 --> 00:23:44,400
character lens

563
00:23:45,600 --> 00:23:47,279
now normalization this is something

564
00:23:47,279 --> 00:23:50,000
again is a rare but there are many cases

565
00:23:50,000 --> 00:23:52,240
when it can it can be helpful

566
00:23:52,240 --> 00:23:55,440
so uh and one example uh normalized

567
00:23:55,440 --> 00:23:56,960
character is basically you have some

568
00:23:56,960 --> 00:23:58,480
unico character that will have an

569
00:23:58,480 --> 00:24:00,799
equivalent version that is a simplified

570
00:24:00,799 --> 00:24:01,679
version

571
00:24:01,679 --> 00:24:03,279
so sometimes it's

572
00:24:03,279 --> 00:24:05,440
to um cope with

573
00:24:05,440 --> 00:24:06,240
um

574
00:24:06,240 --> 00:24:08,720
limited support of unicode so it's being

575
00:24:08,720 --> 00:24:10,000
simplified

576
00:24:10,000 --> 00:24:12,240
for storage for example

577
00:24:12,240 --> 00:24:14,080
and one example is

578
00:24:14,080 --> 00:24:16,480
the little in default mode i forgot the

579
00:24:16,480 --> 00:24:18,799
exact name of the collision or the

580
00:24:18,799 --> 00:24:21,600
configuration but in sql server

581
00:24:21,600 --> 00:24:25,360
if you store this character so ff and c

582
00:24:25,360 --> 00:24:26,960
with the default collision

583
00:24:26,960 --> 00:24:28,880
it will convert it to

584
00:24:28,880 --> 00:24:31,279
simply the regular

585
00:24:31,279 --> 00:24:33,360
xml tag characters

586
00:24:33,360 --> 00:24:35,760
so lower than character

587
00:24:35,760 --> 00:24:37,919
so this means that on storage you'll

588
00:24:37,919 --> 00:24:40,559
send this to your database but once it

589
00:24:40,559 --> 00:24:42,480
will be fetched it will be an actual

590
00:24:42,480 --> 00:24:45,039
excel fix so this is something to test

591
00:24:45,039 --> 00:24:46,880
it will depend mainly on your database

592
00:24:46,880 --> 00:24:48,480
configuration in a type of field that

593
00:24:48,480 --> 00:24:50,400
you're using because

594
00:24:50,400 --> 00:24:53,360
some type of and varchar will not do

595
00:24:53,360 --> 00:24:56,000
this but it's three uh depending on the

596
00:24:56,000 --> 00:24:59,120
collision configuration

597
00:24:59,120 --> 00:25:01,440
and by the way so in the

598
00:25:01,440 --> 00:25:03,919
detail website you have more reference

599
00:25:03,919 --> 00:25:05,840
and more detail explanation

600
00:25:05,840 --> 00:25:07,120
so um

601
00:25:07,120 --> 00:25:08,640
you'll be able to find

602
00:25:08,640 --> 00:25:10,720
more detail

603
00:25:10,720 --> 00:25:12,640
so now we're ready to do uh some

604
00:25:12,640 --> 00:25:15,360
exercise so um because it's a workshop

605
00:25:15,360 --> 00:25:17,600
so for the first exercise

606
00:25:17,600 --> 00:25:18,480
uh

607
00:25:18,480 --> 00:25:20,720
if you're not fully ready you can just

608
00:25:20,720 --> 00:25:22,559
click on the link

609
00:25:22,559 --> 00:25:24,960
in the slide and you'll get

610
00:25:24,960 --> 00:25:26,799
kind of a level up

611
00:25:26,799 --> 00:25:29,760
so i'll give you

612
00:25:29,760 --> 00:25:33,120
a good 15 minutes to start with uh just

613
00:25:33,120 --> 00:25:37,039
to find you out uh get to it

614
00:25:37,039 --> 00:25:39,360
i think most of those can be done from

615
00:25:39,360 --> 00:25:40,559
the website

616
00:25:40,559 --> 00:25:43,120
mobile phone even so what you need to

617
00:25:43,120 --> 00:25:44,240
look for

618
00:25:44,240 --> 00:25:45,279
so

619
00:25:45,279 --> 00:25:46,640
these are not

620
00:25:46,640 --> 00:25:47,760
uh

621
00:25:47,760 --> 00:25:50,080
proprietary or commercial uh web use

622
00:25:50,080 --> 00:25:51,600
these are simple

623
00:25:51,600 --> 00:25:53,760
uh php function

624
00:25:53,760 --> 00:25:56,400
just because it's easier to uh to

625
00:25:56,400 --> 00:25:58,159
describe but you'll see later exercises

626
00:25:58,159 --> 00:26:01,600
that we'll be using some actual

627
00:26:01,600 --> 00:26:03,840
web views in production

628
00:26:03,840 --> 00:26:06,000
and what you need to think about is

629
00:26:06,000 --> 00:26:07,600
we've looked at

630
00:26:07,600 --> 00:26:10,799
finding alternative keyword or

631
00:26:10,799 --> 00:26:11,840
elements

632
00:26:11,840 --> 00:26:12,880
and we

633
00:26:12,880 --> 00:26:15,440
looked at including now you have three

634
00:26:15,440 --> 00:26:16,480
form

635
00:26:16,480 --> 00:26:19,039
where uh you can submit a name so let's

636
00:26:19,039 --> 00:26:20,720
say i'm just like this

637
00:26:20,720 --> 00:26:23,520
it's b and it's being effect in the page

638
00:26:23,520 --> 00:26:26,159
so you need to find

639
00:26:26,159 --> 00:26:28,080
a way to do an xss

640
00:26:28,080 --> 00:26:30,880
but if i do an obvious pattern

641
00:26:30,880 --> 00:26:33,360
like this

642
00:26:36,159 --> 00:26:38,480
you'll see that uh

643
00:26:38,480 --> 00:26:39,440
my

644
00:26:39,440 --> 00:26:42,880
homemade waff will block some uh pillow

645
00:26:42,880 --> 00:26:45,120
so you can look at the

646
00:26:45,120 --> 00:26:47,200
the code in the page so this is the the

647
00:26:47,200 --> 00:26:49,600
core element to look at

648
00:26:49,600 --> 00:26:52,320
but if you need more context you have

649
00:26:52,320 --> 00:26:54,000
access to the full source code if you

650
00:26:54,000 --> 00:26:55,200
open the

651
00:26:55,200 --> 00:26:57,200
viewforce code so you'll see

652
00:26:57,200 --> 00:26:59,120
the complete page

653
00:26:59,120 --> 00:27:00,720
uh

654
00:27:00,720 --> 00:27:02,559
with the actual code if you want to see

655
00:27:02,559 --> 00:27:04,559
that

656
00:27:04,559 --> 00:27:06,240
once you're done with one exercise you

657
00:27:06,240 --> 00:27:09,600
can go to the next form so there are

658
00:27:09,600 --> 00:27:12,960
three uh form to test

659
00:27:12,960 --> 00:27:14,720
and the three are not necessarily a

660
00:27:14,720 --> 00:27:17,039
different difficulty it's really just

661
00:27:17,039 --> 00:27:18,240
different

662
00:27:18,240 --> 00:27:20,240
things you need to find and you need to

663
00:27:20,240 --> 00:27:22,640
apply the different tricks that i've uh

664
00:27:22,640 --> 00:27:25,039
presented

665
00:27:25,039 --> 00:27:28,080
so i i'm giving you time to uh open your

666
00:27:28,080 --> 00:27:30,159
laptop and

667
00:27:30,159 --> 00:27:31,039
find the

668
00:27:31,039 --> 00:27:32,880
url if you have any question raise your

669
00:27:32,880 --> 00:27:35,679
hand and i'll be looking for people

670
00:27:35,679 --> 00:27:39,120
online at the discord the

671
00:27:39,120 --> 00:27:41,039
channel channel uh

672
00:27:41,039 --> 00:27:42,240
workshop

673
00:27:42,240 --> 00:27:44,159
so but uh be patient i'll probably

674
00:27:44,159 --> 00:27:47,200
respond within 10 minutes

675
00:27:47,200 --> 00:27:51,240
so uh yeah good luck

676
00:28:07,039 --> 00:28:10,039
okay

677
00:28:16,559 --> 00:28:19,559
oh

678
00:29:14,960 --> 00:29:17,960
okay

679
00:29:26,399 --> 00:29:28,399
so this is the main requester you need

680
00:29:28,399 --> 00:29:31,120
to look for

681
00:29:31,760 --> 00:29:34,159
and you'll get the slide and

682
00:29:34,159 --> 00:29:39,080
i'll paste it in the discord then

683
00:30:04,799 --> 00:30:08,520
so we're enabled again

684
00:30:14,799 --> 00:30:17,799
sweetie

685
00:30:23,440 --> 00:30:26,600
all right

686
00:30:48,720 --> 00:30:51,720
is

687
00:30:59,600 --> 00:31:02,600
um

688
00:31:10,080 --> 00:31:13,240
all right

689
00:31:23,360 --> 00:31:26,600
come on

690
00:32:25,840 --> 00:32:28,840
okay

691
00:32:40,480 --> 00:32:43,799
so uh

692
00:32:48,320 --> 00:32:50,960
so basically if you open the

693
00:32:50,960 --> 00:32:54,159
weft workshop on the

694
00:32:54,840 --> 00:32:59,320
extreme workshop

695
00:33:15,200 --> 00:33:18,720
and you'll find the slide and

696
00:33:18,720 --> 00:33:21,120
so so that's a lot of thing for but wife

697
00:33:21,120 --> 00:33:24,000
workshop open the slide and then

698
00:33:24,000 --> 00:33:27,279
whenever we'll encounter

699
00:33:34,640 --> 00:33:38,440
alright slide the

700
00:33:50,159 --> 00:33:54,480
actually it might just be easier to um

701
00:33:54,799 --> 00:33:59,760
to uh type directly the exercise url

702
00:34:01,279 --> 00:34:04,559
so it's three form

703
00:34:04,880 --> 00:34:07,200
and for each form you get some reflected

704
00:34:07,200 --> 00:34:09,280
value

705
00:34:09,280 --> 00:34:10,879
in the page and

706
00:34:10,879 --> 00:34:13,119
you have um

707
00:34:13,119 --> 00:34:15,918
just a php function simulating a wife so

708
00:34:15,918 --> 00:34:18,639
this is this could be a rule

709
00:34:18,639 --> 00:34:20,639
configuring a web and you need to find a

710
00:34:20,639 --> 00:34:22,719
bypass for each of those so

711
00:34:22,719 --> 00:34:26,040
you have three

712
00:34:36,079 --> 00:34:39,399
thank you

713
00:35:07,520 --> 00:35:10,520
is

714
00:35:20,560 --> 00:35:23,560
foreign

715
00:35:45,040 --> 00:35:48,040
um

716
00:36:03,359 --> 00:36:06,359
yes

717
00:36:14,320 --> 00:36:17,320
oh

718
00:37:02,960 --> 00:37:04,880
quick question so does anybody doesn't

719
00:37:04,880 --> 00:37:08,480
want to be taken into a picture

720
00:37:08,480 --> 00:37:10,400
i'll be taking a picture so everybody's

721
00:37:10,400 --> 00:37:12,160
okay with that

722
00:37:12,160 --> 00:37:14,930
and try to look very concentrated

723
00:37:14,930 --> 00:37:18,279
[Laughter]

724
00:37:40,880 --> 00:37:43,880
yes

725
00:38:11,200 --> 00:38:14,200
uh

726
00:38:26,880 --> 00:38:29,680
i guess it's not

727
00:38:30,800 --> 00:38:33,119
so

728
00:38:59,040 --> 00:39:42,320
for this um

729
00:39:42,320 --> 00:39:45,320
uh

730
00:39:57,040 --> 00:40:00,040
yes

731
00:40:11,040 --> 00:40:14,040
yes

732
00:40:44,000 --> 00:40:47,000
um

733
00:41:41,680 --> 00:41:44,680
foreign

734
00:42:01,200 --> 00:42:04,200
um

735
00:42:31,440 --> 00:42:33,359
okay so i'll present the solution for

736
00:42:33,359 --> 00:42:35,599
the three exercise uh

737
00:42:35,599 --> 00:42:37,839
because we have a few more exercises to

738
00:42:37,839 --> 00:42:40,000
show

739
00:42:40,079 --> 00:42:42,319
so

740
00:42:42,560 --> 00:42:45,119
so by razor van anybody found the tree

741
00:42:45,119 --> 00:42:48,160
solution for each tree

742
00:42:48,160 --> 00:42:50,319
so at least two people and probably you

743
00:42:50,319 --> 00:42:52,880
were very close so

744
00:42:52,880 --> 00:42:55,119
okay

745
00:42:56,000 --> 00:42:59,480
open the exercise

746
00:43:00,960 --> 00:43:01,680
so

747
00:43:01,680 --> 00:43:04,240
for the first one

748
00:43:04,240 --> 00:43:06,400
uh

749
00:43:06,400 --> 00:43:09,280
you need to understand that

750
00:43:09,280 --> 00:43:10,960
square bracket in

751
00:43:10,960 --> 00:43:13,200
regex unless there's a wild card after

752
00:43:13,200 --> 00:43:15,119
it or a plus sign it's only one

753
00:43:15,119 --> 00:43:18,079
character so this is looking for

754
00:43:18,079 --> 00:43:19,839
an opening tags

755
00:43:19,839 --> 00:43:22,240
followed by one ascii character

756
00:43:22,240 --> 00:43:24,560
the issue and many of you found it is

757
00:43:24,560 --> 00:43:26,800
it's not case insensitive so for this

758
00:43:26,800 --> 00:43:27,920
reason

759
00:43:27,920 --> 00:43:30,160
uh instead of

760
00:43:30,160 --> 00:43:32,079
using this

761
00:43:32,079 --> 00:43:33,040
which is

762
00:43:33,040 --> 00:43:34,000
blocked

763
00:43:34,000 --> 00:43:36,000
i can just simply uh replace the first

764
00:43:36,000 --> 00:43:39,040
character by a capital i and certainly

765
00:43:39,040 --> 00:43:41,760
it's working because uh web browser are

766
00:43:41,760 --> 00:43:45,920
case insensitive for uh tag names

767
00:43:46,000 --> 00:43:48,480
and same thing for attribute names so

768
00:43:48,480 --> 00:43:51,440
this was the first

769
00:43:52,319 --> 00:43:54,400
the second one is

770
00:43:54,400 --> 00:43:56,400
a bit more tricky because actually not

771
00:43:56,400 --> 00:43:59,520
everything is in this uh snippet of code

772
00:43:59,520 --> 00:44:01,200
this is just the weft but you really

773
00:44:01,200 --> 00:44:02,800
need to look at where the value is

774
00:44:02,800 --> 00:44:04,319
placed

775
00:44:04,319 --> 00:44:05,200
so

776
00:44:05,200 --> 00:44:08,319
when you submit a new value you'll see

777
00:44:08,319 --> 00:44:10,880
that in this profile form

778
00:44:10,880 --> 00:44:12,800
the value is placed

779
00:44:12,800 --> 00:44:13,680
but

780
00:44:13,680 --> 00:44:14,720
here

781
00:44:14,720 --> 00:44:17,440
this welcome followed by the name

782
00:44:17,440 --> 00:44:20,240
is actually done by javascript so

783
00:44:20,240 --> 00:44:23,839
if we look at the code

784
00:44:26,480 --> 00:44:28,960
it's reading the field register name

785
00:44:28,960 --> 00:44:31,359
from the profile form

786
00:44:31,359 --> 00:44:34,240
and because we're reading

787
00:44:34,240 --> 00:44:36,400
an attribute

788
00:44:36,400 --> 00:44:37,920
from the dom

789
00:44:37,920 --> 00:44:40,079
uh this means it's the context of excel

790
00:44:40,079 --> 00:44:43,040
i just want to find the field so because

791
00:44:43,040 --> 00:44:46,240
we're reading it from here

792
00:44:46,240 --> 00:44:49,280
it's xml so if we include entities from

793
00:44:49,280 --> 00:44:51,280
javascript when you will read the value

794
00:44:51,280 --> 00:44:53,280
automatically javascript will decode

795
00:44:53,280 --> 00:44:54,240
those

796
00:44:54,240 --> 00:44:56,960
because in the dom the dom

797
00:44:56,960 --> 00:44:59,359
the actual representation is

798
00:44:59,359 --> 00:45:00,880
will be decoded

799
00:45:00,880 --> 00:45:02,079
so

800
00:45:02,079 --> 00:45:05,520
so just to confirm that i'm not saying

801
00:45:05,520 --> 00:45:06,720
uh

802
00:45:06,720 --> 00:45:09,359
something wrong so here uh instead of

803
00:45:09,359 --> 00:45:11,200
using tags

804
00:45:11,200 --> 00:45:15,440
so this will appear as is in the html so

805
00:45:15,440 --> 00:45:18,400
the xss is not happening here it's the

806
00:45:18,400 --> 00:45:21,920
javascript that later reads this uh

807
00:45:21,920 --> 00:45:24,560
this field that will like

808
00:45:24,560 --> 00:45:26,960
i create this.xss

809
00:45:26,960 --> 00:45:29,599
so uh

810
00:45:29,599 --> 00:45:32,300
yeah another thing i want to mention

811
00:45:32,300 --> 00:45:33,920
[Music]

812
00:45:33,920 --> 00:45:36,640
yeah we'll look at the source just to to

813
00:45:36,640 --> 00:45:39,440
confirm what is happening

814
00:45:39,440 --> 00:45:41,119
so here

815
00:45:41,119 --> 00:45:42,720
we cannot escape

816
00:45:42,720 --> 00:45:45,440
the single code at least from what i've

817
00:45:45,440 --> 00:45:48,480
and even if you would use a backslash

818
00:45:48,480 --> 00:45:50,720
you don't have any control with the

819
00:45:50,720 --> 00:45:52,640
value that would follow so if you

820
00:45:52,640 --> 00:45:55,599
thought about this this was a great idea

821
00:45:55,599 --> 00:45:57,680
but um

822
00:45:57,680 --> 00:45:59,200
really the solution was to encode

823
00:45:59,200 --> 00:46:01,280
everything and because

824
00:46:01,280 --> 00:46:03,359
it's javascript context then everything

825
00:46:03,359 --> 00:46:05,839
gets decoded

826
00:46:05,839 --> 00:46:09,119
now for the final one

827
00:46:10,720 --> 00:46:12,800
the regex was probably misleading

828
00:46:12,800 --> 00:46:14,079
because

829
00:46:14,079 --> 00:46:17,119
it's not so much about the regex or the

830
00:46:17,119 --> 00:46:18,880
validation function

831
00:46:18,880 --> 00:46:20,800
here i wanted to show that

832
00:46:20,800 --> 00:46:23,200
often you need to look at implementation

833
00:46:23,200 --> 00:46:25,359
difference between what is validating

834
00:46:25,359 --> 00:46:27,680
the request and the application that is

835
00:46:27,680 --> 00:46:30,319
receiving the request so sometime you

836
00:46:30,319 --> 00:46:32,240
have something that validate the url but

837
00:46:32,240 --> 00:46:35,119
later when it's passed to maybe a http

838
00:46:35,119 --> 00:46:38,720
library it will parse the http uh url

839
00:46:38,720 --> 00:46:39,839
differently

840
00:46:39,839 --> 00:46:42,079
so this is something to think about here

841
00:46:42,079 --> 00:46:44,480
it's a much more simpler case

842
00:46:44,480 --> 00:46:47,440
where the validate input is using on the

843
00:46:47,440 --> 00:46:49,280
score get

844
00:46:49,280 --> 00:46:51,760
but actually the application itself will

845
00:46:51,760 --> 00:46:53,839
reflect the request

846
00:46:53,839 --> 00:46:56,480
so and request in php is both get and

847
00:46:56,480 --> 00:46:58,079
post parameter

848
00:46:58,079 --> 00:46:59,920
so the idea was

849
00:46:59,920 --> 00:47:02,319
instead of focusing so much on encoding

850
00:47:02,319 --> 00:47:04,240
uh differently

851
00:47:04,240 --> 00:47:06,640
just look for another vector and here it

852
00:47:06,640 --> 00:47:08,480
was

853
00:47:08,480 --> 00:47:10,319
switching to post parameter so i'm just

854
00:47:10,319 --> 00:47:11,920
going to

855
00:47:11,920 --> 00:47:13,280
switch

856
00:47:13,280 --> 00:47:15,680
this form and changing from a get to a

857
00:47:15,680 --> 00:47:17,599
post

858
00:47:17,599 --> 00:47:18,400
and

859
00:47:18,400 --> 00:47:21,520
what used to be blocked now uh

860
00:47:21,520 --> 00:47:23,760
should trigger an existence so as simple

861
00:47:23,760 --> 00:47:24,880
as that

862
00:47:24,880 --> 00:47:27,119
so

863
00:47:27,760 --> 00:47:31,040
so that's the way i found a way to uh

864
00:47:31,040 --> 00:47:33,119
do an exercise on finding alternative

865
00:47:33,119 --> 00:47:35,760
keyword or path

866
00:47:35,760 --> 00:47:37,200
without having to search into

867
00:47:37,200 --> 00:47:40,720
documentation for a new application

868
00:47:40,720 --> 00:47:43,200
now back to

869
00:47:43,200 --> 00:47:46,079
the slides

870
00:47:46,079 --> 00:47:48,720
so we saw finding an alternative keyword

871
00:47:48,720 --> 00:47:49,440
and

872
00:47:49,440 --> 00:47:50,960
encoding

873
00:47:50,960 --> 00:47:53,839
now i i've done a segment specifically

874
00:47:53,839 --> 00:47:55,599
on experimentation because it's one of

875
00:47:55,599 --> 00:47:57,520
the core uh

876
00:47:57,520 --> 00:47:59,440
vector where people will try to find a

877
00:47:59,440 --> 00:48:01,359
web bypass

878
00:48:01,359 --> 00:48:02,640
um

879
00:48:02,640 --> 00:48:05,599
sometimes regex will include some

880
00:48:05,599 --> 00:48:07,200
spaces and

881
00:48:07,200 --> 00:48:09,760
in uh sql you'll find plenty of

882
00:48:09,760 --> 00:48:11,440
alternative uh

883
00:48:11,440 --> 00:48:13,680
character that will do a space

884
00:48:13,680 --> 00:48:17,520
so tab will often be also accepted as a

885
00:48:17,520 --> 00:48:19,440
keyword separator

886
00:48:19,440 --> 00:48:22,640
but there are plenty and actually i even

887
00:48:22,640 --> 00:48:25,520
cropped the sql server one

888
00:48:25,520 --> 00:48:27,359
from the original source because it was

889
00:48:27,359 --> 00:48:28,800
uh

890
00:48:28,800 --> 00:48:31,040
they're three times more character that

891
00:48:31,040 --> 00:48:34,559
can be used as a white space

892
00:48:34,559 --> 00:48:37,119
also a few tricks so you can use a

893
00:48:37,119 --> 00:48:39,359
comment so this is not a single getter

894
00:48:39,359 --> 00:48:41,440
but it's going to do the same thing so

895
00:48:41,440 --> 00:48:44,160
you can include the empty comments or

896
00:48:44,160 --> 00:48:46,559
comments with misleading keyword inside

897
00:48:46,559 --> 00:48:48,720
of it uh maybe

898
00:48:48,720 --> 00:48:50,240
to try to fold

899
00:48:50,240 --> 00:48:51,440
the waff

900
00:48:51,440 --> 00:48:53,839
in mss square you can add some

901
00:48:53,839 --> 00:48:56,800
square bracket around a table name and

902
00:48:56,800 --> 00:48:59,839
you can put columns between

903
00:48:59,839 --> 00:49:03,520
codes or double quotes

904
00:49:03,520 --> 00:49:06,160
in a record you can include table name

905
00:49:06,160 --> 00:49:08,400
and column in exactly small so this is

906
00:49:08,400 --> 00:49:11,200
pretty helpful because this will not be

907
00:49:11,200 --> 00:49:13,440
a byte representation it's really ascii

908
00:49:13,440 --> 00:49:15,119
representation

909
00:49:15,119 --> 00:49:17,280
as you see it this is the way it's being

910
00:49:17,280 --> 00:49:19,520
sent

911
00:49:19,920 --> 00:49:22,000
um

912
00:49:22,000 --> 00:49:25,119
and now the this this part is important

913
00:49:25,119 --> 00:49:26,800
because this will be the next exercise

914
00:49:26,800 --> 00:49:28,240
so uh

915
00:49:28,240 --> 00:49:30,559
this is something that was found

916
00:49:30,559 --> 00:49:34,160
by uh the same researchers

917
00:49:36,640 --> 00:49:39,680
that documented this behavior that in uh

918
00:49:39,680 --> 00:49:42,160
maestro you could use

919
00:49:42,160 --> 00:49:43,440
one that

920
00:49:43,440 --> 00:49:44,720
uh

921
00:49:44,720 --> 00:49:46,880
but one of my colleagues

922
00:49:46,880 --> 00:49:48,880
i found that this could apply to uh

923
00:49:48,880 --> 00:49:50,400
bypass

924
00:49:50,400 --> 00:49:52,559
the aws waff

925
00:49:52,559 --> 00:49:54,960
and i i've looked at it and i said oh

926
00:49:54,960 --> 00:49:56,400
this must be a

927
00:49:56,400 --> 00:49:58,480
way to bypass also the injection that is

928
00:49:58,480 --> 00:50:00,960
used by mod security and

929
00:50:00,960 --> 00:50:02,720
plenty of waff

930
00:50:02,720 --> 00:50:05,680
and it is so uh the idea is that

931
00:50:05,680 --> 00:50:08,880
mysql when it will see uh when it will

932
00:50:08,880 --> 00:50:11,119
parse your query it will tokenize every

933
00:50:11,119 --> 00:50:13,359
keyword and it will go through from left

934
00:50:13,359 --> 00:50:15,760
to right and when it will see a

935
00:50:15,760 --> 00:50:17,680
scientific notation so

936
00:50:17,680 --> 00:50:20,319
one expo exponent or any numerical value

937
00:50:20,319 --> 00:50:22,640
exponent something it will start to

938
00:50:22,640 --> 00:50:23,839
parse

939
00:50:23,839 --> 00:50:26,800
it as a numeral or literal

940
00:50:26,800 --> 00:50:27,760
volume

941
00:50:27,760 --> 00:50:28,880
but

942
00:50:28,880 --> 00:50:31,599
if the character that is following the e

943
00:50:31,599 --> 00:50:34,400
character is not numeric it will simply

944
00:50:34,400 --> 00:50:35,520
uh

945
00:50:35,520 --> 00:50:36,960
just uh

946
00:50:36,960 --> 00:50:38,960
cancel the operation and

947
00:50:38,960 --> 00:50:42,559
the one that e is simply ignored

948
00:50:42,559 --> 00:50:43,440
and

949
00:50:43,440 --> 00:50:45,359
so for this reason now we can start to

950
00:50:45,359 --> 00:50:48,640
add some what one dot

951
00:50:48,640 --> 00:50:49,839
to uh

952
00:50:49,839 --> 00:50:52,319
prepare all all of our keywords and this

953
00:50:52,319 --> 00:50:55,359
will fool a little injection

954
00:50:55,359 --> 00:50:57,760
uh lib injection is doing some advanced

955
00:50:57,760 --> 00:51:00,480
context analysis where it try to

956
00:51:00,480 --> 00:51:02,800
to see for example when you place a

957
00:51:02,800 --> 00:51:04,720
single code in your parameter it will

958
00:51:04,720 --> 00:51:08,400
see okay possibly this is starting

959
00:51:08,400 --> 00:51:10,079
to be out of

960
00:51:10,079 --> 00:51:11,920
the context of a literal so it will try

961
00:51:11,920 --> 00:51:14,640
to find in this context some specific

962
00:51:14,640 --> 00:51:17,200
keyword that are sql

963
00:51:17,200 --> 00:51:19,359
and and it will try to to see if it's a

964
00:51:19,359 --> 00:51:23,200
valid sql query that you're injecting so

965
00:51:23,200 --> 00:51:24,480
and it has

966
00:51:24,480 --> 00:51:26,720
all the the keyword from a different

967
00:51:26,720 --> 00:51:27,920
dbms

968
00:51:27,920 --> 00:51:29,760
index in the engine

969
00:51:29,760 --> 00:51:32,559
but with this it's easy to fool uh the

970
00:51:32,559 --> 00:51:34,880
lab injection that it will simply

971
00:51:34,880 --> 00:51:36,800
not see

972
00:51:36,800 --> 00:51:41,280
as mario debbie or mascara will see it

973
00:51:41,599 --> 00:51:44,640
so and this will be the next exercise so

974
00:51:44,640 --> 00:51:46,960
for this one uh there will be a live

975
00:51:46,960 --> 00:51:49,960
instance

976
00:51:50,160 --> 00:51:52,480
possible through a mobile but you'll see

977
00:51:52,480 --> 00:51:55,920
it might be pretty hard to always uh

978
00:51:55,920 --> 00:51:57,839
retype through the area so this one it's

979
00:51:57,839 --> 00:52:00,319
not a form so you have to

980
00:52:00,319 --> 00:52:01,920
uh

981
00:52:01,920 --> 00:52:04,880
to find the input in the

982
00:52:04,880 --> 00:52:07,200
url that are vulnerable to

983
00:52:07,200 --> 00:52:09,599
sql injection

984
00:52:09,599 --> 00:52:10,800
actually there are

985
00:52:10,800 --> 00:52:13,599
two parameters that can be a place in my

986
00:52:13,599 --> 00:52:15,359
custom application and both are

987
00:52:15,359 --> 00:52:18,880
vulnerable so you have two vector

988
00:52:18,880 --> 00:52:22,160
so i'll i'll give you one so here um

989
00:52:22,160 --> 00:52:24,640
there's this uh

990
00:52:24,640 --> 00:52:26,400
jar filter

991
00:52:26,400 --> 00:52:28,800
where you can specify the

992
00:52:28,800 --> 00:52:31,440
movie types and if you add a single code

993
00:52:31,440 --> 00:52:32,720
to it

994
00:52:32,720 --> 00:52:34,800
uh this will raise an error and return

995
00:52:34,800 --> 00:52:37,280
nothing but uh

996
00:52:37,280 --> 00:52:39,839
if i start to add some keyword

997
00:52:39,839 --> 00:52:41,440
let's say union

998
00:52:41,440 --> 00:52:43,760
whoops

999
00:52:44,960 --> 00:52:46,720
something

1000
00:52:46,720 --> 00:52:49,440
then you'll get a forbidden page this is

1001
00:52:49,440 --> 00:52:52,720
uh the mod security module from uh it's

1002
00:52:52,720 --> 00:52:53,760
either a

1003
00:52:53,760 --> 00:52:57,760
nginx module or a apache module

1004
00:52:57,760 --> 00:52:59,200
and

1005
00:52:59,200 --> 00:53:00,880
the request will not even reach your

1006
00:53:00,880 --> 00:53:03,280
application because it's yeah it's

1007
00:53:03,280 --> 00:53:06,800
appearing too risky for um

1008
00:53:06,800 --> 00:53:08,559
for more security

1009
00:53:08,559 --> 00:53:10,480
and what security is a combination of

1010
00:53:10,480 --> 00:53:13,040
both a set of regex and also lab

1011
00:53:13,040 --> 00:53:14,400
injection

1012
00:53:14,400 --> 00:53:17,200
and lip ejection is really going to be

1013
00:53:17,200 --> 00:53:18,079
used

1014
00:53:18,079 --> 00:53:20,240
uh when you have payload that simply

1015
00:53:20,240 --> 00:53:22,319
don't have sql keywords so if you are

1016
00:53:22,319 --> 00:53:25,280
just trying to do single code space

1017
00:53:25,280 --> 00:53:27,119
empty string equal

1018
00:53:27,119 --> 00:53:28,880
single code just to do a

1019
00:53:28,880 --> 00:53:30,640
always true condition

1020
00:53:30,640 --> 00:53:32,880
game injection will uh find those

1021
00:53:32,880 --> 00:53:36,000
because it it's a contextual parser that

1022
00:53:36,000 --> 00:53:39,119
is able to find uh scale patterns

1023
00:53:39,119 --> 00:53:42,640
and this is the type of condition that

1024
00:53:42,640 --> 00:53:44,400
we want to find in the application so

1025
00:53:44,400 --> 00:53:46,079
try to

1026
00:53:46,079 --> 00:53:48,000
inject into the

1027
00:53:48,000 --> 00:53:49,920
parameter and confirm that there's an

1028
00:53:49,920 --> 00:53:52,400
injection

1029
00:53:52,880 --> 00:53:54,240
and then

1030
00:53:54,240 --> 00:53:58,879
try to do some always true condition to

1031
00:53:59,359 --> 00:54:02,240
without specifying something empty uh

1032
00:54:02,240 --> 00:54:03,839
find something that is always true so

1033
00:54:03,839 --> 00:54:05,359
i'll give you

1034
00:54:05,359 --> 00:54:06,720
uh

1035
00:54:06,720 --> 00:54:08,480
good five to ten minutes and then i'll

1036
00:54:08,480 --> 00:54:10,559
explain you

1037
00:54:10,559 --> 00:54:13,040
the next step

1038
00:54:13,040 --> 00:54:15,280
so try to find a pattern that is blocked

1039
00:54:15,280 --> 00:54:20,000
and then using the scientific notation

1040
00:54:20,000 --> 00:54:22,000
try to find a bypass

1041
00:54:22,000 --> 00:54:25,040
but don't go too far with the first

1042
00:54:25,040 --> 00:54:26,960
exercise or don't try to do a query that

1043
00:54:26,960 --> 00:54:30,319
is doing a union and on and adding some

1044
00:54:30,319 --> 00:54:32,240
table main just do

1045
00:54:32,240 --> 00:54:35,200
a condition that is always true because

1046
00:54:35,200 --> 00:54:36,880
you'll see that the final payload will

1047
00:54:36,880 --> 00:54:39,839
be quite complicated

1048
00:54:54,400 --> 00:54:55,359
so

1049
00:54:55,359 --> 00:54:56,880
for people that are not sure you need to

1050
00:54:56,880 --> 00:55:00,720
find first uh s transaction vector and

1051
00:55:00,720 --> 00:55:03,200
you'll be uh blocked by uh mod security

1052
00:55:03,200 --> 00:55:06,319
and trying to find a bypass using this

1053
00:55:06,319 --> 00:55:09,799
specific technique

1054
00:55:19,020 --> 00:55:22,139
[Music]

1055
00:55:30,799 --> 00:55:33,799
is

1056
00:55:42,170 --> 00:55:45,269
[Music]

1057
00:55:49,080 --> 00:55:52,250
[Music]

1058
00:55:57,050 --> 00:56:00,119
[Music]

1059
00:56:03,550 --> 00:56:06,629
[Music]

1060
00:56:28,880 --> 00:56:31,839
foreign

1061
00:56:39,200 --> 00:56:42,200
foreign

1062
00:56:56,240 --> 00:56:59,479
thank you

1063
00:57:26,700 --> 00:57:29,739
[Music]

1064
00:57:50,240 --> 00:57:53,339
[Music]

1065
00:57:55,850 --> 00:57:59,009
[Music]

1066
00:58:11,920 --> 00:58:14,920
is

1067
00:58:36,480 --> 00:58:39,480
um

1068
00:59:00,880 --> 00:59:03,200
and quick reminder so there is the

1069
00:59:03,200 --> 00:59:04,720
application that you can test directly

1070
00:59:04,720 --> 00:59:06,480
there is a slide but there is also this

1071
00:59:06,480 --> 00:59:08,240
uh website

1072
00:59:08,240 --> 00:59:10,880
which includes step-by-step uh

1073
00:59:10,880 --> 00:59:14,319
instruction for the different labs and

1074
00:59:14,319 --> 00:59:16,079
it's really the detailed version so

1075
00:59:16,079 --> 00:59:18,400
you're probably seeing uh less than 50

1076
00:59:18,400 --> 00:59:21,359
of the content on the slide

1077
00:59:21,359 --> 00:59:23,599
and if you want to run uh the instance

1078
00:59:23,599 --> 00:59:26,000
by yourself to have some

1079
00:59:26,000 --> 00:59:28,640
basic information on how to run and set

1080
00:59:28,640 --> 00:59:31,799
up the application

1081
01:00:54,839 --> 01:00:58,920
oh empire

1082
01:01:18,319 --> 01:01:21,319
okay

1083
01:01:24,960 --> 01:01:27,960
hmm

1084
01:01:41,599 --> 01:01:44,599
so

1085
01:01:56,000 --> 01:01:59,000
um

1086
01:02:24,319 --> 01:02:26,960
okay i'll do the demonstration for uh

1087
01:02:26,960 --> 01:02:29,520
detection and the advanced expectations

1088
01:02:29,520 --> 01:02:31,839
and you'll have a few more minutes for

1089
01:02:31,839 --> 01:02:33,680
to complete the exercise and then i'll

1090
01:02:33,680 --> 01:02:35,599
continue to the next module

1091
01:02:35,599 --> 01:02:38,160
so for detection so

1092
01:02:38,160 --> 01:02:40,640
you either add uh

1093
01:02:40,640 --> 01:02:42,960
yeah i should be able to zoom okay

1094
01:02:42,960 --> 01:02:44,000
the

1095
01:02:44,000 --> 01:02:46,960
either have the general parameter

1096
01:02:46,960 --> 01:02:49,200
here where you could do some injection

1097
01:02:49,200 --> 01:02:50,240
and

1098
01:02:50,240 --> 01:02:52,559
so this was blocked

1099
01:02:52,559 --> 01:02:54,799
and if you have uh

1100
01:02:54,799 --> 01:02:56,960
install the docker locally

1101
01:02:56,960 --> 01:02:58,880
one advantage is you'll be able to see

1102
01:02:58,880 --> 01:03:00,480
exactly

1103
01:03:00,480 --> 01:03:02,880
am i able to zoom yeah you'll be able to

1104
01:03:02,880 --> 01:03:04,799
zoom to to uh

1105
01:03:04,799 --> 01:03:07,039
to see exactly which rule is being

1106
01:03:07,039 --> 01:03:08,400
detected so

1107
01:03:08,400 --> 01:03:11,680
is it part of the regex core rule set or

1108
01:03:11,680 --> 01:03:13,280
is it lip injection that is detecting

1109
01:03:13,280 --> 01:03:14,559
this pattern

1110
01:03:14,559 --> 01:03:16,559
and this just or

1111
01:03:16,559 --> 01:03:17,599
with a

1112
01:03:17,599 --> 01:03:18,960
single code

1113
01:03:18,960 --> 01:03:21,680
this is uh the the keyword or is not

1114
01:03:21,680 --> 01:03:23,200
like this so

1115
01:03:23,200 --> 01:03:24,880
it's really an injection that let's see

1116
01:03:24,880 --> 01:03:27,440
it as a screen injection pattern and

1117
01:03:27,440 --> 01:03:29,440
we'll block it

1118
01:03:29,440 --> 01:03:32,559
here at for detection uh or to bypass

1119
01:03:32,559 --> 01:03:35,039
the filter simply adding

1120
01:03:35,039 --> 01:03:36,079
uh

1121
01:03:36,079 --> 01:03:37,119
this

1122
01:03:37,119 --> 01:03:38,720
scientific notation

1123
01:03:38,720 --> 01:03:41,200
before one of the electricity raw

1124
01:03:41,200 --> 01:03:42,960
but typically you can add it to any

1125
01:03:42,960 --> 01:03:44,720
function name or keyword that you're

1126
01:03:44,720 --> 01:03:45,680
using

1127
01:03:45,680 --> 01:03:47,440
because this

1128
01:03:47,440 --> 01:03:49,520
will simply be ignored by mysql we can

1129
01:03:49,520 --> 01:03:51,680
add this and certainly

1130
01:03:51,680 --> 01:03:53,680
we have a condition that is always true

1131
01:03:53,680 --> 01:03:55,760
and we can see that we get all the movie

1132
01:03:55,760 --> 01:03:56,839
from

1133
01:03:56,839 --> 01:03:58,480
here

1134
01:03:58,480 --> 01:04:00,240
now for the advanced part it's pretty

1135
01:04:00,240 --> 01:04:03,280
hard to to build that's why um

1136
01:04:03,280 --> 01:04:06,640
i've included the complete payload

1137
01:04:06,640 --> 01:04:08,559
but we're not going to be able to use

1138
01:04:08,559 --> 01:04:10,720
union so this is something that you've

1139
01:04:10,720 --> 01:04:13,039
probably

1140
01:04:13,039 --> 01:04:14,079
saw that

1141
01:04:14,079 --> 01:04:17,039
even though i'm we're using

1142
01:04:17,039 --> 01:04:18,799
one.e

1143
01:04:18,799 --> 01:04:21,440
because um

1144
01:04:21,440 --> 01:04:23,599
my security has some aggressive rule

1145
01:04:23,599 --> 01:04:25,680
regarding if you have union keyword

1146
01:04:25,680 --> 01:04:28,240
follow by select

1147
01:04:28,240 --> 01:04:30,799
it will be blocked

1148
01:04:30,799 --> 01:04:33,359
we won't be able to use union but we'll

1149
01:04:33,359 --> 01:04:35,760
be able to use select from

1150
01:04:35,760 --> 01:04:37,920
inside of this query and do a boolean

1151
01:04:37,920 --> 01:04:41,839
condition to extract specific character

1152
01:04:41,839 --> 01:04:45,200
so this is something we call a

1153
01:04:45,200 --> 01:04:47,200
blind sql injection so

1154
01:04:47,200 --> 01:04:49,520
but no it's not exactly blind because

1155
01:04:49,520 --> 01:04:52,839
you you still have an oracle but

1156
01:04:52,839 --> 01:04:56,559
basically uh the complete query

1157
01:04:56,559 --> 01:04:58,400
that we're sending is something like

1158
01:04:58,400 --> 01:04:59,520
this

1159
01:04:59,520 --> 01:05:03,520
so we're extracting uh the sc character

1160
01:05:03,520 --> 01:05:05,440
from a substring so substring is to

1161
01:05:05,440 --> 01:05:07,599
attract one specific character

1162
01:05:07,599 --> 01:05:10,079
from here we're selecting so i should

1163
01:05:10,079 --> 01:05:12,000
have start with the middle part but

1164
01:05:12,000 --> 01:05:13,839
we're extracting the first password from

1165
01:05:13,839 --> 01:05:16,000
the user table here

1166
01:05:16,000 --> 01:05:17,520
then we're doing a substring on the

1167
01:05:17,520 --> 01:05:20,839
password to extract just the first

1168
01:05:20,839 --> 01:05:24,240
character and then ascii is to

1169
01:05:24,240 --> 01:05:27,200
convert the ascii character to a

1170
01:05:27,200 --> 01:05:29,520
numerical value and then we can compare

1171
01:05:29,520 --> 01:05:30,480
it

1172
01:05:30,480 --> 01:05:32,240
to an s key

1173
01:05:32,240 --> 01:05:34,480
and this is the actual

1174
01:05:34,480 --> 01:05:37,359
query that we want to execute

1175
01:05:37,359 --> 01:05:39,920
this is the obfuscated version in order

1176
01:05:39,920 --> 01:05:41,680
to bypass the one

1177
01:05:41,680 --> 01:05:43,680
so you'll see that there is plenty of

1178
01:05:43,680 --> 01:05:45,760
occurrence where we will be

1179
01:05:45,760 --> 01:05:46,960
referring

1180
01:05:46,960 --> 01:05:50,599
to this notation

1181
01:05:51,760 --> 01:05:52,880
and again

1182
01:05:52,880 --> 01:05:54,799
this doesn't need to be a one so if you

1183
01:05:54,799 --> 01:05:58,720
see a r chord ray x that look for this

1184
01:05:58,720 --> 01:06:01,039
in some new rules uh you can just change

1185
01:06:01,039 --> 01:06:04,640
this to two or any value

1186
01:06:04,640 --> 01:06:05,359
so

1187
01:06:05,359 --> 01:06:07,440
you'll still have uh five more minutes

1188
01:06:07,440 --> 01:06:09,039
if you want to do this

1189
01:06:09,039 --> 01:06:11,839
so try to just execute this

1190
01:06:11,839 --> 01:06:13,440
inside of your query

1191
01:06:13,440 --> 01:06:15,200
or your the parameter

1192
01:06:15,200 --> 01:06:17,920
and change the 70 to something else just

1193
01:06:17,920 --> 01:06:19,119
to see that

1194
01:06:19,119 --> 01:06:22,160
there is a true or false commission

1195
01:06:22,160 --> 01:06:24,960
and one important note you need to add a

1196
01:06:24,960 --> 01:06:27,039
single code before the or if you're

1197
01:06:27,039 --> 01:06:28,720
using the

1198
01:06:28,720 --> 01:06:30,240
uh

1199
01:06:30,240 --> 01:06:32,640
the variable parameter on the first page

1200
01:06:32,640 --> 01:06:34,079
i didn't add the single code just

1201
01:06:34,079 --> 01:06:35,520
because the syntax i think would have

1202
01:06:35,520 --> 01:06:37,119
been

1203
01:06:37,119 --> 01:06:39,520
just seen as one literal so

1204
01:06:39,520 --> 01:06:43,680
but there is a single code missing here

1205
01:06:43,920 --> 01:06:45,440
and

1206
01:06:45,440 --> 01:06:47,839
for you'll be able to do the same thing

1207
01:06:47,839 --> 01:06:49,599
if you're looking at the movie detail

1208
01:06:49,599 --> 01:06:50,799
page

1209
01:06:50,799 --> 01:06:53,839
there is a id parameter that

1210
01:06:53,839 --> 01:06:56,319
is not only numeric so

1211
01:06:56,319 --> 01:07:01,720
uh here you uh you don't need to do

1212
01:07:02,480 --> 01:07:04,559
don't need to use single code so

1213
01:07:04,559 --> 01:07:06,880
same thing will apply so here it's

1214
01:07:06,880 --> 01:07:08,400
forbidden

1215
01:07:08,400 --> 01:07:12,319
but if i try something like this

1216
01:07:12,799 --> 01:07:15,599
i'm able to bypass just because i've put

1217
01:07:15,599 --> 01:07:16,960
the

1218
01:07:16,960 --> 01:07:21,520
en throwback by a little volume

1219
01:07:22,799 --> 01:07:25,039
um yeah

1220
01:07:25,039 --> 01:07:26,400
so

1221
01:07:26,400 --> 01:07:28,720
and i was discussing this with the wiki

1222
01:07:28,720 --> 01:07:29,920
so uh

1223
01:07:29,920 --> 01:07:31,359
it doesn't mean necessarily that the

1224
01:07:31,359 --> 01:07:33,760
wealth has no value even though it has a

1225
01:07:33,760 --> 01:07:36,319
edge case currently so

1226
01:07:36,319 --> 01:07:38,079
for an attacker if you have a complete

1227
01:07:38,079 --> 01:07:39,920
website you'll have tons of parameters

1228
01:07:39,920 --> 01:07:42,319
so all other outputs parameter could be

1229
01:07:42,319 --> 01:07:44,240
test for sq injection

1230
01:07:44,240 --> 01:07:46,079
if you are running a scanner

1231
01:07:46,079 --> 01:07:48,319
scanner will be efficient at detecting a

1232
01:07:48,319 --> 01:07:50,319
sql injection if they can

1233
01:07:50,319 --> 01:07:52,480
pass some long query where they can

1234
01:07:52,480 --> 01:07:54,319
confirm for sure

1235
01:07:54,319 --> 01:07:56,400
that there is extra injections scanners

1236
01:07:56,400 --> 01:07:58,000
usually don't use

1237
01:07:58,000 --> 01:08:00,319
sample conditions that

1238
01:08:00,319 --> 01:08:02,160
are likely to to

1239
01:08:02,160 --> 01:08:04,880
to return different uh

1240
01:08:04,880 --> 01:08:06,559
length of page

1241
01:08:06,559 --> 01:08:08,079
it's easy for a human to detect that

1242
01:08:08,079 --> 01:08:11,119
okay this is a we're pretty sure it's an

1243
01:08:11,119 --> 01:08:12,640
sql injection

1244
01:08:12,640 --> 01:08:14,480
but uh for scanner

1245
01:08:14,480 --> 01:08:16,560
usually they'll need plenty of keyword

1246
01:08:16,560 --> 01:08:18,560
uh so

1247
01:08:18,560 --> 01:08:21,040
with this swap in a real context a real

1248
01:08:21,040 --> 01:08:23,198
application you'll still slow the the

1249
01:08:23,198 --> 01:08:25,679
attacker because you it will be pretty

1250
01:08:25,679 --> 01:08:28,640
inefficient at finding which vector are

1251
01:08:28,640 --> 01:08:29,520
uh

1252
01:08:29,520 --> 01:08:32,560
present for a skill injection sorry

1253
01:08:32,560 --> 01:08:35,759
so you still have some time to

1254
01:08:35,759 --> 01:08:36,880
do this

1255
01:08:36,880 --> 01:08:39,439
exercise and then

1256
01:08:39,439 --> 01:08:41,198
we'll and the next exercise is going to

1257
01:08:41,198 --> 01:08:43,359
be a very similar application but you'll

1258
01:08:43,359 --> 01:08:44,640
see that we'll

1259
01:08:44,640 --> 01:08:47,040
be able to bypass the wealth completely

1260
01:08:47,040 --> 01:08:49,040
which which with a

1261
01:08:49,040 --> 01:08:50,960
much more simpler uh

1262
01:08:50,960 --> 01:08:53,839
pattern

1263
01:09:11,670 --> 01:09:14,770
[Music]

1264
01:09:21,859 --> 01:09:24,929
[Music]

1265
01:09:27,359 --> 01:09:30,359
is

1266
01:09:37,920 --> 01:09:40,979
[Music]

1267
01:09:50,740 --> 01:09:53,858
[Music]

1268
01:09:59,510 --> 01:10:05,010
[Music]

1269
01:10:21,600 --> 01:10:24,600
foreign

1270
01:10:55,440 --> 01:10:58,440
point

1271
01:11:09,440 --> 01:11:12,440
um

1272
01:12:03,600 --> 01:12:06,600
is

1273
01:12:09,360 --> 01:12:12,360
uh

1274
01:12:28,880 --> 01:12:31,880
um

1275
01:12:40,159 --> 01:12:43,159
firebox

1276
01:12:53,520 --> 01:12:56,520
uh

1277
01:13:08,960 --> 01:13:11,960
um

1278
01:13:48,560 --> 01:13:51,560
okay

1279
01:14:05,780 --> 01:14:12,280
[Music]

1280
01:14:13,520 --> 01:14:15,840
six

1281
01:14:36,239 --> 01:14:39,239
is

1282
01:15:19,360 --> 01:15:21,199
for this

1283
01:15:21,199 --> 01:15:22,660
one

1284
01:15:22,660 --> 01:15:25,720
[Music]

1285
01:15:32,719 --> 01:15:35,719
okay

1286
01:16:32,719 --> 01:16:35,719
why

1287
01:16:42,640 --> 01:16:46,600
so if i do change

1288
01:16:57,280 --> 01:16:58,239
okay

1289
01:16:58,239 --> 01:16:59,840
so i'm going to continue to the next

1290
01:16:59,840 --> 01:17:02,080
section and i have some bonus

1291
01:17:02,080 --> 01:17:04,239
information for uh

1292
01:17:04,239 --> 01:17:06,400
the sql segment

1293
01:17:06,400 --> 01:17:08,719
so

1294
01:17:10,560 --> 01:17:13,840
so the labs include all instructions for

1295
01:17:13,840 --> 01:17:16,320
the exercise but if you look at the

1296
01:17:16,320 --> 01:17:18,560
material section

1297
01:17:18,560 --> 01:17:20,320
you'll see that it's the content that i

1298
01:17:20,320 --> 01:17:22,880
mostly presented through the slide

1299
01:17:22,880 --> 01:17:24,480
and at the end

1300
01:17:24,480 --> 01:17:26,320
is it here

1301
01:17:26,320 --> 01:17:27,440
oh it's in

1302
01:17:27,440 --> 01:17:29,360
including material

1303
01:17:29,360 --> 01:17:31,120
so there are three tools that i didn't

1304
01:17:31,120 --> 01:17:33,040
mention in the slide but can be helpful

1305
01:17:33,040 --> 01:17:35,040
in many contexts

1306
01:17:35,040 --> 01:17:36,560
so

1307
01:17:36,560 --> 01:17:39,679
cyber chef it's a web-based encoder but

1308
01:17:39,679 --> 01:17:42,480
it's really easy to just encode on the

1309
01:17:42,480 --> 01:17:44,320
fly a few things if you don't have burp

1310
01:17:44,320 --> 01:17:46,239
or encoder

1311
01:17:46,239 --> 01:17:48,480
and even then it's better than most

1312
01:17:48,480 --> 01:17:51,199
encoder in most proxy so

1313
01:17:51,199 --> 01:17:53,040
the big advantage is that you can change

1314
01:17:53,040 --> 01:17:55,440
encoding so you can specify your input

1315
01:17:55,440 --> 01:17:57,280
and then drag and drop some encoding so

1316
01:17:57,280 --> 01:17:58,400
it you can

1317
01:17:58,400 --> 01:18:00,960
do entity encoding and then url encoding

1318
01:18:00,960 --> 01:18:03,440
of the final payload and then you get

1319
01:18:03,440 --> 01:18:06,239
the the result

1320
01:18:06,320 --> 01:18:08,480
uh if you want to be efficient uh in

1321
01:18:08,480 --> 01:18:12,320
verb i really like to use the burp

1322
01:18:12,320 --> 01:18:14,799
extension

1323
01:18:14,960 --> 01:18:17,280
and this uh plugin

1324
01:18:17,280 --> 01:18:20,239
are used to to you to use tag to do a

1325
01:18:20,239 --> 01:18:22,640
nested encoding so you can

1326
01:18:22,640 --> 01:18:25,120
use basically um

1327
01:18:25,120 --> 01:18:27,280
tags and you can enable it's not the

1328
01:18:27,280 --> 01:18:29,600
case by default but in repeater

1329
01:18:29,600 --> 01:18:32,400
you can specify those tags

1330
01:18:32,400 --> 01:18:34,480
and when you'll send the requests

1331
01:18:34,480 --> 01:18:36,640
uh the extension will transparently

1332
01:18:36,640 --> 01:18:38,640
encode everything according to the tag

1333
01:18:38,640 --> 01:18:40,880
you've used so you don't need to

1334
01:18:40,880 --> 01:18:42,640
remember the tags you just right click

1335
01:18:42,640 --> 01:18:45,199
in your repeater or intruder

1336
01:18:45,199 --> 01:18:48,000
and you have a list of

1337
01:18:48,000 --> 01:18:50,400
encoding possible but it will just place

1338
01:18:50,400 --> 01:18:51,600
those tags

1339
01:18:51,600 --> 01:18:53,280
so when you're doing some tests and

1340
01:18:53,280 --> 01:18:55,199
you're just editing one character doing

1341
01:18:55,199 --> 01:18:56,560
some tests

1342
01:18:56,560 --> 01:18:58,640
it's really nice to be able to just

1343
01:18:58,640 --> 01:19:01,280
visually see uh what you're thinking

1344
01:19:01,280 --> 01:19:03,600
about without having to encode and

1345
01:19:03,600 --> 01:19:07,520
decode when you want to exit every time

1346
01:19:07,520 --> 01:19:10,560
there's another extension so uh

1347
01:19:10,560 --> 01:19:12,800
this can be helpful uh

1348
01:19:12,800 --> 01:19:14,960
i i've developed it it's just a simple

1349
01:19:14,960 --> 01:19:16,719
fuzzer and you can add some additional

1350
01:19:16,719 --> 01:19:17,920
encoding

1351
01:19:17,920 --> 01:19:20,640
it's you can specify

1352
01:19:20,640 --> 01:19:23,280
this generator so usually generator is

1353
01:19:23,280 --> 01:19:26,239
to generate list of items

1354
01:19:26,239 --> 01:19:28,480
uh in burpee intruder but what i've done

1355
01:19:28,480 --> 01:19:30,640
with this extension is i'm taking the

1356
01:19:30,640 --> 01:19:32,960
selection and i'm generating

1357
01:19:32,960 --> 01:19:36,000
a variation for different encoding so

1358
01:19:36,000 --> 01:19:38,880
all character encode with xml entities

1359
01:19:38,880 --> 01:19:42,560
uh url encode double link url encode

1360
01:19:42,560 --> 01:19:45,840
unicode special encoding stuff like that

1361
01:19:45,840 --> 01:19:47,199
so if you have a parameter and you want

1362
01:19:47,199 --> 01:19:49,199
to see what is passing through you can

1363
01:19:49,199 --> 01:19:52,560
use this extension

1364
01:19:52,560 --> 01:19:55,040
now the last thing i want to mention uh

1365
01:19:55,040 --> 01:19:56,640
so this was the

1366
01:19:56,640 --> 01:19:58,719
the solutions to to extract one

1367
01:19:58,719 --> 01:20:01,440
character at a time for the

1368
01:20:01,440 --> 01:20:04,719
user table using the web bypass but we

1369
01:20:04,719 --> 01:20:06,400
actually have a team that potentially

1370
01:20:06,400 --> 01:20:09,520
found a way to do a union select

1371
01:20:09,520 --> 01:20:10,960
still using the

1372
01:20:10,960 --> 01:20:14,239
exponent but along with some

1373
01:20:14,239 --> 01:20:15,760
special character

1374
01:20:15,760 --> 01:20:18,000
formalization

1375
01:20:18,000 --> 01:20:21,520
using escape character to specify some

1376
01:20:21,520 --> 01:20:23,360
specific guide that with full label

1377
01:20:23,360 --> 01:20:24,639
injection so

1378
01:20:24,639 --> 01:20:26,239
if the solution ever worked i'm going to

1379
01:20:26,239 --> 01:20:29,520
add it to this material

1380
01:20:29,520 --> 01:20:31,360
but obviously doing being able to do

1381
01:20:31,360 --> 01:20:33,520
union select is much more powerful than

1382
01:20:33,520 --> 01:20:37,120
extracting one character at a time

1383
01:20:37,120 --> 01:20:37,840
so

1384
01:20:37,840 --> 01:20:40,080
this was for this

1385
01:20:40,080 --> 01:20:43,120
back to the slide

1386
01:20:45,199 --> 01:20:47,040
switching protocol

1387
01:20:47,040 --> 01:20:48,480
so uh

1388
01:20:48,480 --> 01:20:50,880
the two last module are a switching

1389
01:20:50,880 --> 01:20:53,440
protocol which is a something part of

1390
01:20:53,440 --> 01:20:56,000
the hd protocol and it will be very

1391
01:20:56,000 --> 01:20:59,040
similar to the request smuggling

1392
01:20:59,040 --> 01:21:02,719
case so but we'll only have one exercise

1393
01:21:02,719 --> 01:21:03,920
for a

1394
01:21:03,920 --> 01:21:06,800
switching protocol because i think it's

1395
01:21:06,800 --> 01:21:08,400
too much similar to have a different

1396
01:21:08,400 --> 01:21:10,239
exercise

1397
01:21:10,239 --> 01:21:12,480
and as you'll see it's going to be the

1398
01:21:12,480 --> 01:21:14,480
same application but it's going to be

1399
01:21:14,480 --> 01:21:16,400
much easier

1400
01:21:16,400 --> 01:21:18,719
to bypass

1401
01:21:18,719 --> 01:21:21,440
so what exactly is switching protocol

1402
01:21:21,440 --> 01:21:25,679
so switching protocol is a mode or a

1403
01:21:25,679 --> 01:21:28,719
part of http so the idea is that

1404
01:21:28,719 --> 01:21:30,960
from http1 that one they wanted to

1405
01:21:30,960 --> 01:21:33,360
support additional protocol so the idea

1406
01:21:33,360 --> 01:21:35,920
is that you have a regular http uh

1407
01:21:35,920 --> 01:21:39,199
request that is sent so this is

1408
01:21:39,199 --> 01:21:40,000
part

1409
01:21:40,000 --> 01:21:43,440
and as another you specify upgrade

1410
01:21:43,440 --> 01:21:44,880
with the parameter that is the the

1411
01:21:44,880 --> 01:21:47,440
protocol that you want to upgrade to

1412
01:21:47,440 --> 01:21:50,800
and if the server returned

1413
01:21:50,800 --> 01:21:53,520
its status code 101

1414
01:21:53,520 --> 01:21:55,840
this means that the the application is

1415
01:21:55,840 --> 01:21:58,560
saying yes i i'm able to upgrade to this

1416
01:21:58,560 --> 01:21:59,600
protocol

1417
01:21:59,600 --> 01:22:01,520
so once this

1418
01:22:01,520 --> 01:22:03,440
to uh this request and response is

1419
01:22:03,440 --> 01:22:04,800
exchanged

1420
01:22:04,800 --> 01:22:06,960
within the same http connection the

1421
01:22:06,960 --> 01:22:08,960
following bytes are going to be in this

1422
01:22:08,960 --> 01:22:11,679
protocol so this is the way a web socket

1423
01:22:11,679 --> 01:22:12,639
works

1424
01:22:12,639 --> 01:22:15,440
so you always need to do to send a dummy

1425
01:22:15,440 --> 01:22:17,840
uh http request that is just to do the

1426
01:22:17,840 --> 01:22:19,520
upgrade

1427
01:22:19,520 --> 01:22:21,120
to websocket

1428
01:22:21,120 --> 01:22:24,480
and when the the web server and return

1429
01:22:24,480 --> 01:22:28,159
101 the browser no okay the

1430
01:22:28,159 --> 01:22:31,520
uh web server is able to speak web

1431
01:22:31,520 --> 01:22:33,760
socket so from now on this communication

1432
01:22:33,760 --> 01:22:34,800
is now

1433
01:22:34,800 --> 01:22:39,360
uh full duplex websocket communication

1434
01:22:39,360 --> 01:22:41,199
so

1435
01:22:41,199 --> 01:22:45,040
our this can be used to bypass uh

1436
01:22:45,040 --> 01:22:47,120
proxies or waff

1437
01:22:47,120 --> 01:22:50,800
is that some time or most will simply

1438
01:22:50,800 --> 01:22:53,199
look at the status code and if they see

1439
01:22:53,199 --> 01:22:54,719
101

1440
01:22:54,719 --> 01:22:56,560
they'll say okay it was upgrade to

1441
01:22:56,560 --> 01:22:59,120
websocket so i'll no longer look at what

1442
01:22:59,120 --> 01:23:00,960
is being exchanged

1443
01:23:00,960 --> 01:23:04,080
but sometimes in a rare case

1444
01:23:04,080 --> 01:23:06,159
you'll be able to be able to control the

1445
01:23:06,159 --> 01:23:07,440
status code

1446
01:23:07,440 --> 01:23:10,400
because sometimes some endpoints will uh

1447
01:23:10,400 --> 01:23:12,159
proxy some request to some additional

1448
01:23:12,159 --> 01:23:13,920
server and they will reflect the

1449
01:23:13,920 --> 01:23:16,400
complete response from the external

1450
01:23:16,400 --> 01:23:18,000
service and it will also include some

1451
01:23:18,000 --> 01:23:20,800
headers and potentially status quo

1452
01:23:20,800 --> 01:23:24,480
so that's one flexibility pretty rare

1453
01:23:24,480 --> 01:23:26,800
sometimes you'll be able to uh on a

1454
01:23:26,800 --> 01:23:28,800
specific path control an application so

1455
01:23:28,800 --> 01:23:30,480
you'll be able to write some code to the

1456
01:23:30,480 --> 01:23:32,960
provider or the copywriter and you'll be

1457
01:23:32,960 --> 01:23:35,920
able to set a status code that is

1458
01:23:35,920 --> 01:23:38,639
returned and if you're able to to return

1459
01:23:38,639 --> 01:23:40,320
101

1460
01:23:40,320 --> 01:23:42,960
even though you are not going to uh

1461
01:23:42,960 --> 01:23:44,000
actually

1462
01:23:44,000 --> 01:23:46,239
uh do some web socket or upgrade to

1463
01:23:46,239 --> 01:23:49,760
another protocol you'll fool the the uh

1464
01:23:49,760 --> 01:23:52,080
the proxy because

1465
01:23:52,080 --> 01:23:54,239
now from a malicious client you can do a

1466
01:23:54,239 --> 01:23:55,920
request to your endpoint that you have

1467
01:23:55,920 --> 01:24:00,320
created that is returning 101

1468
01:24:00,560 --> 01:24:03,280
the proxy will think okay it was upgrade

1469
01:24:03,280 --> 01:24:05,679
to a websocket or whatever protocol so

1470
01:24:05,679 --> 01:24:08,080
i'll no longer inspect the request and

1471
01:24:08,080 --> 01:24:09,600
then your same client keep the

1472
01:24:09,600 --> 01:24:12,159
connection alive and we'll send an http

1473
01:24:12,159 --> 01:24:13,679
a request

1474
01:24:13,679 --> 01:24:15,280
and this will be passed through the the

1475
01:24:15,280 --> 01:24:16,719
application

1476
01:24:16,719 --> 01:24:17,600
and

1477
01:24:17,600 --> 01:24:20,239
the web server can now honor other

1478
01:24:20,239 --> 01:24:21,920
requests to other path

1479
01:24:21,920 --> 01:24:24,719
of the application and uh

1480
01:24:24,719 --> 01:24:26,800
mod security uh

1481
01:24:26,800 --> 01:24:30,159
next c and mo swap will not inspect this

1482
01:24:30,159 --> 01:24:32,480
type of traffic

1483
01:24:32,480 --> 01:24:34,960
so there's a lot of condition needed

1484
01:24:34,960 --> 01:24:36,000
uh

1485
01:24:36,000 --> 01:24:38,159
and the most difficult one is being able

1486
01:24:38,159 --> 01:24:41,440
to force a stethoscope being returned on

1487
01:24:41,440 --> 01:24:44,400
the website you are targeting

1488
01:24:44,400 --> 01:24:46,639
but this will be possible in cloud

1489
01:24:46,639 --> 01:24:50,080
infrastructure mainly

1490
01:24:51,199 --> 01:24:54,560
now another alternative is http 2 clear

1491
01:24:54,560 --> 01:24:57,120
text so this is another protocol because

1492
01:24:57,120 --> 01:24:59,760
we can upgrade to multiple type of

1493
01:24:59,760 --> 01:25:00,960
protocol

1494
01:25:00,960 --> 01:25:02,639
and sometimes the back-end application

1495
01:25:02,639 --> 01:25:06,080
behind the wav is supporting http 2

1496
01:25:06,080 --> 01:25:08,400
and it will have also hp to create

1497
01:25:08,400 --> 01:25:09,679
export

1498
01:25:09,679 --> 01:25:11,920
so this means that the application will

1499
01:25:11,920 --> 01:25:15,199
be able to both receive http 1 and http

1500
01:25:15,199 --> 01:25:16,639
2

1501
01:25:16,639 --> 01:25:20,239
the managers actor will

1502
01:25:20,239 --> 01:25:23,360
initiate and upgrade to https

1503
01:25:23,360 --> 01:25:24,080
so

1504
01:25:24,080 --> 01:25:26,400
at this time the wife is inspecting all

1505
01:25:26,400 --> 01:25:28,000
header and requests

1506
01:25:28,000 --> 01:25:30,480
uh so if you have vanishes postponer and

1507
01:25:30,480 --> 01:25:32,800
yet everything is active

1508
01:25:32,800 --> 01:25:35,120
but once the upgrade is completed then

1509
01:25:35,120 --> 01:25:37,679
the http traffic will not be inspect

1510
01:25:37,679 --> 01:25:39,280
because uh

1511
01:25:39,280 --> 01:25:43,040
the proxy doesn't simply inspect

1512
01:25:43,040 --> 01:25:45,840
upgrade protocol

1513
01:25:45,840 --> 01:25:49,199
so uh this was found so the the credit

1514
01:25:49,199 --> 01:25:52,000
to the researcher is in the detail

1515
01:25:52,000 --> 01:25:55,000
website

1516
01:25:57,040 --> 01:25:59,040
yeah i i thought it was a duplicate from

1517
01:25:59,040 --> 01:26:00,800
the previous one but it's

1518
01:26:00,800 --> 01:26:02,880
almost the same thing so the proxy need

1519
01:26:02,880 --> 01:26:04,800
to honor 10101

1520
01:26:04,800 --> 01:26:06,639
and in some cases

1521
01:26:06,639 --> 01:26:08,800
the uh

1522
01:26:08,800 --> 01:26:10,080
i didn't mention it but it's uh

1523
01:26:10,080 --> 01:26:11,920
important like there are some old

1524
01:26:11,920 --> 01:26:14,880
versions of varnish and some uh

1525
01:26:14,880 --> 01:26:18,000
proxy that simply didn't honor a 101

1526
01:26:18,000 --> 01:26:20,880
so that means as soon as they would see

1527
01:26:20,880 --> 01:26:22,960
upgrade web socket they would simply

1528
01:26:22,960 --> 01:26:26,000
stop to inspect following uh requests

1529
01:26:26,000 --> 01:26:28,080
so this means that even if the the

1530
01:26:28,080 --> 01:26:29,920
website would return

1531
01:26:29,920 --> 01:26:30,960
to

1532
01:26:30,960 --> 01:26:32,880
200 okay

1533
01:26:32,880 --> 01:26:35,440
then it would simply not inspect so uh

1534
01:26:35,440 --> 01:26:37,920
it was found in a couple of proxies but

1535
01:26:37,920 --> 01:26:40,159
these have been patched

1536
01:26:40,159 --> 01:26:43,360
if the proxy is aware of upgrade

1537
01:26:43,360 --> 01:26:45,520
and honors 101

1538
01:26:45,520 --> 01:26:47,679
then this will work with the work

1539
01:26:47,679 --> 01:26:49,520
because it there were

1540
01:26:49,520 --> 01:26:50,400
an actual

1541
01:26:50,400 --> 01:26:51,600
upgrade

1542
01:26:51,600 --> 01:26:53,520
and often practices don't support all

1543
01:26:53,520 --> 01:26:55,920
the upgrade protocols so they will not

1544
01:26:55,920 --> 01:26:58,400
inspect our requests

1545
01:26:58,400 --> 01:27:00,159
so this is the

1546
01:27:00,159 --> 01:27:03,360
the next exercise and last one

1547
01:27:03,360 --> 01:27:05,360
so you'll see the application is pretty

1548
01:27:05,360 --> 01:27:07,839
similar

1549
01:27:10,400 --> 01:27:11,360
okay

1550
01:27:11,360 --> 01:27:16,559
so it's the same uh movie application

1551
01:27:16,639 --> 01:27:19,600
it's also vulnerable to sql injection

1552
01:27:19,600 --> 01:27:22,560
but here don't try to use

1553
01:27:22,560 --> 01:27:25,199
the the exponent

1554
01:27:25,199 --> 01:27:27,199
you'll be able to use

1555
01:27:27,199 --> 01:27:28,719
an easier exploit

1556
01:27:28,719 --> 01:27:31,280
so if you go to the

1557
01:27:31,280 --> 01:27:32,420
the detailed instruction

1558
01:27:32,420 --> 01:27:34,239
[Music]

1559
01:27:34,239 --> 01:27:36,480
there is this script so you won't be

1560
01:27:36,480 --> 01:27:38,320
able to if you are we're doing exercise

1561
01:27:38,320 --> 01:27:40,320
from your smartphone unfortunately you

1562
01:27:40,320 --> 01:27:44,159
can from now but there is the script uh

1563
01:27:44,159 --> 01:27:47,920
h2c smuggler that allow you to specified

1564
01:27:47,920 --> 01:27:49,120
um

1565
01:27:49,120 --> 01:27:51,280
this is just for testing but when you'll

1566
01:27:51,280 --> 01:27:52,639
be able to

1567
01:27:52,639 --> 01:27:56,000
you want to actually uh do the

1568
01:27:56,000 --> 01:28:00,159
inject or smuggle your own traffic

1569
01:28:00,159 --> 01:28:02,080
you have always two url that you're

1570
01:28:02,080 --> 01:28:04,880
specifying the first one is the url

1571
01:28:04,880 --> 01:28:07,120
which is doing the upgrade so this is

1572
01:28:07,120 --> 01:28:09,920
just a dummy request usually

1573
01:28:09,920 --> 01:28:13,040
the root page will work

1574
01:28:13,040 --> 01:28:15,120
and then the second one is once the

1575
01:28:15,120 --> 01:28:16,480
upgrade is done

1576
01:28:16,480 --> 01:28:18,639
you'll be uh practicing additional uh

1577
01:28:18,639 --> 01:28:19,679
traffic

1578
01:28:19,679 --> 01:28:22,960
and this will be added over http 2

1579
01:28:22,960 --> 01:28:26,000
but through the http one connection

1580
01:28:26,000 --> 01:28:29,840
so the same anticipation

1581
01:28:30,320 --> 01:28:33,520
and uh this specific this technique

1582
01:28:33,520 --> 01:28:35,360
so again the requirement is that your

1583
01:28:35,360 --> 01:28:37,679
biking application need to support http

1584
01:28:37,679 --> 01:28:39,679
2

1585
01:28:39,679 --> 01:28:41,199
and this

1586
01:28:41,199 --> 01:28:44,400
attack vector can bypass uh mod security

1587
01:28:44,400 --> 01:28:45,520
like c

1588
01:28:45,520 --> 01:28:48,800
and multiple other uh

1589
01:28:48,800 --> 01:28:50,159
and it's pretty easy because you don't

1590
01:28:50,159 --> 01:28:51,760
need to think about adding some special

1591
01:28:51,760 --> 01:28:54,560
character including you're simply uh

1592
01:28:54,560 --> 01:28:58,480
bypassing entirely uh it's a

1593
01:28:58,480 --> 01:29:00,400
a spot that is

1594
01:29:00,400 --> 01:29:02,320
a blind spot from the wave they are

1595
01:29:02,320 --> 01:29:04,080
simply not expecting

1596
01:29:04,080 --> 01:29:07,120
inspecting this part of the traffic

1597
01:29:07,120 --> 01:29:08,800
so first part

1598
01:29:08,800 --> 01:29:11,600
detect that maxi is uh

1599
01:29:11,600 --> 01:29:14,159
blocking all traffic so

1600
01:29:14,159 --> 01:29:16,320
so uh usually next the way that it's

1601
01:29:16,320 --> 01:29:17,840
used in production is that there will be

1602
01:29:17,840 --> 01:29:19,280
some training part

1603
01:29:19,280 --> 01:29:21,120
where uh you're sending some real

1604
01:29:21,120 --> 01:29:22,960
traffic to your application

1605
01:29:22,960 --> 01:29:24,960
and it will add some exception to some

1606
01:29:24,960 --> 01:29:27,120
parents that need special character but

1607
01:29:27,120 --> 01:29:29,040
everything else will be

1608
01:29:29,040 --> 01:29:30,639
uh blocked if you have some special

1609
01:29:30,639 --> 01:29:33,360
characters so just adding a single quote

1610
01:29:33,360 --> 01:29:34,960
will be blocked by default but with some

1611
01:29:34,960 --> 01:29:38,239
training with mexi you can uh

1612
01:29:38,239 --> 01:29:41,520
have a working application with the wef

1613
01:29:41,520 --> 01:29:44,239
here to show that it's really working i

1614
01:29:44,239 --> 01:29:46,159
configure next but with no training so

1615
01:29:46,159 --> 01:29:47,280
it's blocking

1616
01:29:47,280 --> 01:29:49,120
all parameter that includes some special

1617
01:29:49,120 --> 01:29:51,120
character including

1618
01:29:51,120 --> 01:29:53,679
tags in single code

1619
01:29:53,679 --> 01:29:57,440
so and next see uh in returning a

1620
01:29:57,440 --> 01:29:59,520
forbidden page it's returning a custom

1621
01:29:59,520 --> 01:30:02,800
page so i when you see next he says no

1622
01:30:02,800 --> 01:30:04,719
this means that you've been blocked and

1623
01:30:04,719 --> 01:30:06,880
it's

1624
01:30:07,199 --> 01:30:08,000
but

1625
01:30:08,000 --> 01:30:11,920
with the smuggling to hp2 clear text

1626
01:30:11,920 --> 01:30:14,719
you'll see that you'll be able to

1627
01:30:14,719 --> 01:30:16,560
send your own request and you'll be able

1628
01:30:16,560 --> 01:30:20,320
to exploit the sql injection this one

1629
01:30:20,320 --> 01:30:22,560
so good luck so uh the script can be

1630
01:30:22,560 --> 01:30:23,760
found

1631
01:30:23,760 --> 01:30:24,960
on the

1632
01:30:24,960 --> 01:30:26,719
the repository

1633
01:30:26,719 --> 01:30:29,920
so if you look at

1634
01:30:31,120 --> 01:30:33,120
hd2 clear text

1635
01:30:33,120 --> 01:30:35,600
the script is there if you google it

1636
01:30:35,600 --> 01:30:37,440
you'll find the official repository for

1637
01:30:37,440 --> 01:30:39,519
it

1638
01:30:40,639 --> 01:30:44,080
the the tool is not

1639
01:30:44,800 --> 01:30:46,960
not so much intuitive but a bit verbal

1640
01:30:46,960 --> 01:30:50,080
so you'll get the response for from both

1641
01:30:50,080 --> 01:30:52,639
requests when you're doing some tests

1642
01:30:52,639 --> 01:30:55,520
so uh always look at the last part

1643
01:30:55,520 --> 01:30:58,159
of the output to see what

1644
01:30:58,159 --> 01:31:00,320
was the result

1645
01:31:00,320 --> 01:31:01,760
so good luck

1646
01:31:01,760 --> 01:31:03,760
so we have the next 20 minutes and then

1647
01:31:03,760 --> 01:31:05,679
i'll

1648
01:31:05,679 --> 01:31:07,920
go through some demonstration and

1649
01:31:07,920 --> 01:31:08,800
the

1650
01:31:08,800 --> 01:31:10,800
you have some snippet of

1651
01:31:10,800 --> 01:31:14,159
detecting and bypassing the

1652
01:31:14,159 --> 01:31:15,280
wife

1653
01:31:15,280 --> 01:31:17,280
you have some extra challenge where try

1654
01:31:17,280 --> 01:31:19,840
to just extract the mysql version and i

1655
01:31:19,840 --> 01:31:22,000
didn't include right away the answer so

1656
01:31:22,000 --> 01:31:23,120
i'll show it

1657
01:31:23,120 --> 01:31:27,320
in 15 to 20 minutes

1658
01:31:56,880 --> 01:31:59,840
system

1659
01:32:05,120 --> 01:32:08,120
okay

1660
01:32:14,239 --> 01:32:17,239
um

1661
01:32:38,320 --> 01:32:41,320
foreign

1662
01:33:00,560 --> 01:33:03,560
yes

1663
01:33:17,760 --> 01:33:20,760
oh

1664
01:33:46,960 --> 01:33:49,960
mr

1665
01:34:27,679 --> 01:34:30,679
bye

1666
01:35:08,880 --> 01:35:11,880
uh

1667
01:35:13,750 --> 01:35:16,840
[Music]

1668
01:36:02,000 --> 01:36:05,000
so

1669
01:36:18,639 --> 01:36:21,639
yes

1670
01:36:24,719 --> 01:36:27,719
foreign

1671
01:37:08,400 --> 01:37:10,800
okay i'll show the solution for the the

1672
01:37:10,800 --> 01:37:13,520
last exercise and then i'll

1673
01:37:13,520 --> 01:37:15,520
do the the final slide and you'll get

1674
01:37:15,520 --> 01:37:18,080
the bonus uh two minutes to choose if

1675
01:37:18,080 --> 01:37:19,440
you want to leave or

1676
01:37:19,440 --> 01:37:21,360
finish the lego slice

1677
01:37:21,360 --> 01:37:23,040
and if you have questions i'll be there

1678
01:37:23,040 --> 01:37:25,519
on tv

1679
01:37:25,679 --> 01:37:29,360
so i don't know if it's big enough

1680
01:37:29,360 --> 01:37:31,519
so

1681
01:37:32,159 --> 01:37:35,440
the id was

1682
01:37:35,440 --> 01:37:38,560
the first step is always uh to test if

1683
01:37:38,560 --> 01:37:41,679
http uh http 2 clear text is enabled on

1684
01:37:41,679 --> 01:37:43,760
the the back end

1685
01:37:43,760 --> 01:37:44,480
so

1686
01:37:44,480 --> 01:37:47,280
you can do this uh just specifying dash

1687
01:37:47,280 --> 01:37:50,400
t at the end with the h2c smuggler

1688
01:37:50,400 --> 01:37:52,159
script

1689
01:37:52,159 --> 01:37:55,360
like this okay

1690
01:37:55,360 --> 01:37:57,839
that's all

1691
01:37:58,239 --> 01:38:00,880
here we can see there's some tls warning

1692
01:38:00,880 --> 01:38:01,600
but

1693
01:38:01,600 --> 01:38:04,320
here it's saying success yeah it can be

1694
01:38:04,320 --> 01:38:05,360
tunneled

1695
01:38:05,360 --> 01:38:06,960
so this means that the upgrade was

1696
01:38:06,960 --> 01:38:10,000
successfully working uh 101 was returned

1697
01:38:10,000 --> 01:38:12,239
and then i began

1698
01:38:12,239 --> 01:38:13,920
we could have kept the connection and

1699
01:38:13,920 --> 01:38:16,719
passed additional requests

1700
01:38:16,719 --> 01:38:19,119
then the following uh url that we're

1701
01:38:19,119 --> 01:38:20,719
specifying

1702
01:38:20,719 --> 01:38:23,520
this is something that is a tunnel true

1703
01:38:23,520 --> 01:38:25,840
to the application so actually

1704
01:38:25,840 --> 01:38:28,080
uh you'll be able to specify those like

1705
01:38:28,080 --> 01:38:31,119
localhost or anything you already have a

1706
01:38:31,119 --> 01:38:33,040
connection established with the backend

1707
01:38:33,040 --> 01:38:35,199
application so you won't be able to

1708
01:38:35,199 --> 01:38:37,520
access maybe an internal microservice

1709
01:38:37,520 --> 01:38:40,080
that is not on the same container

1710
01:38:40,080 --> 01:38:41,840
but you can specify maybe a different

1711
01:38:41,840 --> 01:38:42,800
hose

1712
01:38:42,800 --> 01:38:45,600
a different port

1713
01:38:45,600 --> 01:38:46,800
but

1714
01:38:46,800 --> 01:38:49,199
it will be with the active connection so

1715
01:38:49,199 --> 01:38:51,679
here i'm using the same os

1716
01:38:51,679 --> 01:38:52,719
here

1717
01:38:52,719 --> 01:38:53,440
so

1718
01:38:53,440 --> 01:38:55,840
in the output you'll get

1719
01:38:55,840 --> 01:38:57,520
two requests so this is the the end of

1720
01:38:57,520 --> 01:38:59,119
the first one and then you'll see that

1721
01:38:59,119 --> 01:39:01,280
we're requesting slash for the second

1722
01:39:01,280 --> 01:39:05,040
request so this is the tunnel one

1723
01:39:05,679 --> 01:39:08,480
so uh

1724
01:39:08,480 --> 01:39:09,920
i'll need to

1725
01:39:09,920 --> 01:39:13,840
look at the url again

1726
01:39:20,560 --> 01:39:23,760
okay so if we just want to trigger the

1727
01:39:23,760 --> 01:39:26,000
weft

1728
01:39:26,000 --> 01:39:27,920
one

1729
01:39:27,920 --> 01:39:30,320
no no

1730
01:39:30,320 --> 01:39:31,520
okay

1731
01:39:31,520 --> 01:39:34,719
the port was 777 so maybe it was a

1732
01:39:34,719 --> 01:39:37,280
mistake on the

1733
01:39:37,280 --> 01:39:40,679
slide so

1734
01:39:40,880 --> 01:39:41,760
yeah

1735
01:39:41,760 --> 01:39:44,800
so if i just specified a single code we

1736
01:39:44,800 --> 01:39:47,040
can see that xc is active it's seeing

1737
01:39:47,040 --> 01:39:48,400
the single code in the parameter it's

1738
01:39:48,400 --> 01:39:50,880
blocking it

1739
01:39:50,880 --> 01:39:54,080
so uh

1740
01:39:54,080 --> 01:39:55,520
um yeah

1741
01:39:55,520 --> 01:39:57,920
and one condition we we want to test is

1742
01:39:57,920 --> 01:39:58,880
just

1743
01:39:58,880 --> 01:39:59,840
our

1744
01:39:59,840 --> 01:40:02,239
empty string equal uh single code so

1745
01:40:02,239 --> 01:40:04,800
i'll put it in here

1746
01:40:04,800 --> 01:40:07,280
so since we know that this is passing

1747
01:40:07,280 --> 01:40:10,239
through so um

1748
01:40:10,400 --> 01:40:12,320
just

1749
01:40:12,320 --> 01:40:14,639
we always want to start with something

1750
01:40:14,639 --> 01:40:16,560
small that

1751
01:40:16,560 --> 01:40:18,560
so here i'll just specify the first

1752
01:40:18,560 --> 01:40:21,560
movie

1753
01:40:22,400 --> 01:40:24,080
by the way this is a old custom

1754
01:40:24,080 --> 01:40:25,600
application that's why all the movies

1755
01:40:25,600 --> 01:40:27,440
are so old so uh

1756
01:40:27,440 --> 01:40:29,199
okay so um

1757
01:40:29,199 --> 01:40:30,800
here we can see that in the second

1758
01:40:30,800 --> 01:40:33,280
request we get the detail page for

1759
01:40:33,280 --> 01:40:36,759
spiderman movie

1760
01:40:36,800 --> 01:40:38,080
so

1761
01:40:38,080 --> 01:40:40,159
just a proof concept and then if we are

1762
01:40:40,159 --> 01:40:41,440
adding

1763
01:40:41,440 --> 01:40:44,800
or one equal one

1764
01:40:44,800 --> 01:40:47,520
then uh suddenly we get all the movie

1765
01:40:47,520 --> 01:40:50,480
description in this detail page so

1766
01:40:50,480 --> 01:40:53,760
inception from every everything

1767
01:40:53,760 --> 01:40:54,560
so

1768
01:40:54,560 --> 01:40:57,040
if we want to do a

1769
01:40:57,040 --> 01:40:59,520
complete expectation now we're no longer

1770
01:40:59,520 --> 01:41:01,520
limited to uh like

1771
01:41:01,520 --> 01:41:03,360
the previous exercise we were

1772
01:41:03,360 --> 01:41:05,040
block union

1773
01:41:05,040 --> 01:41:07,199
keyword select now we have access to

1774
01:41:07,199 --> 01:41:09,280
everything because the web is

1775
01:41:09,280 --> 01:41:11,119
not even expecting

1776
01:41:11,119 --> 01:41:12,800
inspecting those

1777
01:41:12,800 --> 01:41:13,760
query

1778
01:41:13,760 --> 01:41:15,679
the http to one

1779
01:41:15,679 --> 01:41:18,000
so here i'm doing a union select on the

1780
01:41:18,000 --> 01:41:19,360
movie table

1781
01:41:19,360 --> 01:41:22,480
i'm looking for here

1782
01:41:22,639 --> 01:41:25,440
and with the select i'm

1783
01:41:25,440 --> 01:41:27,600
injecting a line a dummy line that is

1784
01:41:27,600 --> 01:41:29,199
where all fields are

1785
01:41:29,199 --> 01:41:30,239
one

1786
01:41:30,239 --> 01:41:32,320
so

1787
01:41:32,320 --> 01:41:35,360
and this union is adding this entry to

1788
01:41:35,360 --> 01:41:36,719
the the list

1789
01:41:36,719 --> 01:41:38,320
so we'll be able to see all the lists of

1790
01:41:38,320 --> 01:41:41,360
movie and at the end for this entry the

1791
01:41:41,360 --> 01:41:43,360
title the id

1792
01:41:43,360 --> 01:41:47,040
all information will be the one so now

1793
01:41:47,040 --> 01:41:50,400
we just need to replace

1794
01:41:50,400 --> 01:41:51,760
the specific

1795
01:41:51,760 --> 01:41:53,360
column that is reflected so here we can

1796
01:41:53,360 --> 01:41:56,320
use almost anything

1797
01:41:56,320 --> 01:41:57,440
and

1798
01:41:57,440 --> 01:41:58,960
would have been helpful to use a

1799
01:41:58,960 --> 01:42:00,719
different

1800
01:42:00,719 --> 01:42:02,719
number so this way we know where it's

1801
01:42:02,719 --> 01:42:04,480
reflected

1802
01:42:04,480 --> 01:42:06,400
that's like this

1803
01:42:06,400 --> 01:42:10,000
so now i'll just uh

1804
01:42:11,520 --> 01:42:14,560
why is it

1805
01:42:14,560 --> 01:42:16,880
this

1806
01:42:22,560 --> 01:42:25,560
recharge

1807
01:42:34,560 --> 01:42:35,760
oh

1808
01:42:35,760 --> 01:42:38,480
okay i have no idea so i'll

1809
01:42:38,480 --> 01:42:39,280
just

1810
01:42:39,280 --> 01:42:42,560
reuse one one one and i'll pick one uh i

1811
01:42:42,560 --> 01:42:45,040
random

1812
01:42:45,199 --> 01:42:47,040
and see if it's reflected and here we

1813
01:42:47,040 --> 01:42:50,400
can see that the second

1814
01:42:51,040 --> 01:42:53,360
column name is actually the title so

1815
01:42:53,360 --> 01:42:54,239
here

1816
01:42:54,239 --> 01:42:56,639
the add version is reflected so this was

1817
01:42:56,639 --> 01:42:59,119
the small objective that i gave you

1818
01:42:59,119 --> 01:43:01,199
so but basically you can do anything you

1819
01:43:01,199 --> 01:43:03,600
can select any table at this point uh

1820
01:43:03,600 --> 01:43:07,760
nexi is not inspecting uh request there

1821
01:43:07,760 --> 01:43:09,040
so

1822
01:43:09,040 --> 01:43:11,280
good luck doing this exercise i'll

1823
01:43:11,280 --> 01:43:13,360
jump to the slide to with the just

1824
01:43:13,360 --> 01:43:15,040
finished with the

1825
01:43:15,040 --> 01:43:17,600
material

1826
01:43:21,679 --> 01:43:23,840
switching protocol require smuggling

1827
01:43:23,840 --> 01:43:26,560
it's going to be uh very similar to what

1828
01:43:26,560 --> 01:43:27,760
we saw

1829
01:43:27,760 --> 01:43:29,440
uh it's just that

1830
01:43:29,440 --> 01:43:30,880
i i really see a clear difference

1831
01:43:30,880 --> 01:43:32,960
between the two attack patterns

1832
01:43:32,960 --> 01:43:35,440
and the two previous cases are often

1833
01:43:35,440 --> 01:43:37,520
called request smuggling

1834
01:43:37,520 --> 01:43:39,520
but

1835
01:43:39,520 --> 01:43:41,840
the typical request modeling

1836
01:43:41,840 --> 01:43:43,040
attack pattern

1837
01:43:43,040 --> 01:43:44,239
involve

1838
01:43:44,239 --> 01:43:46,880
having some very confusing http requests

1839
01:43:46,880 --> 01:43:47,679
where

1840
01:43:47,679 --> 01:43:50,560
you have two content plans specified so

1841
01:43:50,560 --> 01:43:52,880
early version of this attack

1842
01:43:52,880 --> 01:43:55,119
uh attacker will use two contents and

1843
01:43:55,119 --> 01:43:56,000
other

1844
01:43:56,000 --> 01:43:57,840
this is for a really old version of the

1845
01:43:57,840 --> 01:44:01,760
attack like uh end of 2000

1846
01:44:01,760 --> 01:44:04,800
so 2008

1847
01:44:05,119 --> 01:44:07,760
and the idea is that the proxy will use

1848
01:44:07,760 --> 01:44:09,440
the first error for example but the

1849
01:44:09,440 --> 01:44:12,400
backend application receiving the same

1850
01:44:12,400 --> 01:44:15,280
request would look at the second header

1851
01:44:15,280 --> 01:44:16,480
and with this

1852
01:44:16,480 --> 01:44:17,920
you can

1853
01:44:17,920 --> 01:44:20,639
potentially do a request to something

1854
01:44:20,639 --> 01:44:22,719
that would be blocked by the proxies the

1855
01:44:22,719 --> 01:44:24,560
proxy or the load balancer might have

1856
01:44:24,560 --> 01:44:26,880
some path that they are blocking because

1857
01:44:26,880 --> 01:44:29,840
it's internal or monitoring path

1858
01:44:29,840 --> 01:44:33,639
disclosing some information

1859
01:44:34,960 --> 01:44:36,239
uh yeah

1860
01:44:36,239 --> 01:44:37,119
so

1861
01:44:37,119 --> 01:44:39,040
and this is

1862
01:44:39,040 --> 01:44:40,639
mainly because of an implementation

1863
01:44:40,639 --> 01:44:42,080
detail where the proxy and the

1864
01:44:42,080 --> 01:44:44,080
application are doing some different

1865
01:44:44,080 --> 01:44:46,880
implementation to parse the center

1866
01:44:46,880 --> 01:44:50,239
so this is more like an example where it

1867
01:44:50,239 --> 01:44:52,000
could be a

1868
01:44:52,000 --> 01:44:53,679
container ejection so

1869
01:44:53,679 --> 01:44:54,880
the

1870
01:44:54,880 --> 01:44:58,000
the proxy is probably doing some cash

1871
01:44:58,000 --> 01:45:00,480
uh as an example and here

1872
01:45:00,480 --> 01:45:03,199
the proxy takes that it's fetching the

1873
01:45:03,199 --> 01:45:06,080
index the test.html

1874
01:45:06,080 --> 01:45:07,520
pages

1875
01:45:07,520 --> 01:45:09,280
but because the

1876
01:45:09,280 --> 01:45:10,639
application in the end parses

1877
01:45:10,639 --> 01:45:11,760
differently

1878
01:45:11,760 --> 01:45:14,400
it will actually

1879
01:45:14,400 --> 01:45:17,040
respond to a request

1880
01:45:17,040 --> 01:45:18,560
as if it was requesting a profile

1881
01:45:18,560 --> 01:45:21,119
information so it will cache some json

1882
01:45:21,119 --> 01:45:23,840
information as html so with this cache

1883
01:45:23,840 --> 01:45:26,159
processing we have potential phishing

1884
01:45:26,159 --> 01:45:29,040
and access possible

1885
01:45:29,040 --> 01:45:32,159
but we can use the same pattern to also

1886
01:45:32,159 --> 01:45:33,280
do a

1887
01:45:33,280 --> 01:45:35,679
web bypass so that's why i've separated

1888
01:45:35,679 --> 01:45:37,840
because request smuggling i usually use

1889
01:45:37,840 --> 01:45:39,840
to do other stuff so

1890
01:45:39,840 --> 01:45:40,960
uh

1891
01:45:40,960 --> 01:45:43,520
trigger xss on other connection of other

1892
01:45:43,520 --> 01:45:44,800
people

1893
01:45:44,800 --> 01:45:47,119
and uh there are some

1894
01:45:47,119 --> 01:45:47,760
various other

1895
01:45:47,760 --> 01:45:49,119
[Music]

1896
01:45:49,119 --> 01:45:50,880
attack patterns with weak smuggling but

1897
01:45:50,880 --> 01:45:53,520
it's usually

1898
01:45:53,520 --> 01:45:55,360
have different implications

1899
01:45:55,360 --> 01:45:59,040
and weap is just one of the aspects

1900
01:45:59,040 --> 01:46:01,520
the other uh one that is more recent uh

1901
01:46:01,520 --> 01:46:03,360
this is uh

1902
01:46:03,360 --> 01:46:05,679
a new pattern that was found uh

1903
01:46:05,679 --> 01:46:07,360
somebody and it was presented initially

1904
01:46:07,360 --> 01:46:09,760
at defcon and nobody

1905
01:46:09,760 --> 01:46:12,639
did some noise about it until one year

1906
01:46:12,639 --> 01:46:14,880
later uh

1907
01:46:14,880 --> 01:46:16,480
james cato found some additional

1908
01:46:16,480 --> 01:46:18,719
variation to this attack pattern and

1909
01:46:18,719 --> 01:46:21,679
then it become better now

1910
01:46:21,679 --> 01:46:22,480
so

1911
01:46:22,480 --> 01:46:24,719
the idea is that

1912
01:46:24,719 --> 01:46:28,159
in http1 you have multiple ways to to

1913
01:46:28,159 --> 01:46:30,480
specify the way that the length of the

1914
01:46:30,480 --> 01:46:31,920
body

1915
01:46:31,920 --> 01:46:34,159
is so you can use content lamp but you

1916
01:46:34,159 --> 01:46:38,239
can also use since http 1.1 uh transform

1917
01:46:38,239 --> 01:46:39,679
and calling chunk

1918
01:46:39,679 --> 01:46:41,360
and

1919
01:46:41,360 --> 01:46:42,719
is

1920
01:46:42,719 --> 01:46:44,159
when you send data and you don't know

1921
01:46:44,159 --> 01:46:46,719
the length in advance so you'll see

1922
01:46:46,719 --> 01:46:49,199
okay this jump is this lamp and then you

1923
01:46:49,199 --> 01:46:50,480
send

1924
01:46:50,480 --> 01:46:52,159
the data

1925
01:46:52,159 --> 01:46:53,840
you'll know when it's complete when you

1926
01:46:53,840 --> 01:46:56,719
send a length zero this means okay uh we

1927
01:46:56,719 --> 01:46:58,880
don't have anything yet uh anymore just

1928
01:46:58,880 --> 01:47:01,840
to send and return zero followed by two

1929
01:47:01,840 --> 01:47:03,520
new lines

1930
01:47:03,520 --> 01:47:07,520
uh then the connection will be closed

1931
01:47:07,520 --> 01:47:09,040
the thing is what happened if a

1932
01:47:09,040 --> 01:47:12,239
malicious actor or a hacker

1933
01:47:12,239 --> 01:47:14,960
sent a request with both content and

1934
01:47:14,960 --> 01:47:17,119
transferring folders

1935
01:47:17,119 --> 01:47:19,840
the rfc says that you should be always

1936
01:47:19,840 --> 01:47:22,320
using transferring encoding but some

1937
01:47:22,320 --> 01:47:25,760
proxy i didn't honor this

1938
01:47:25,760 --> 01:47:27,440
and also what was found is that

1939
01:47:27,440 --> 01:47:28,800
sometimes

1940
01:47:28,800 --> 01:47:30,719
you can play on some implementation

1941
01:47:30,719 --> 01:47:32,000
details so

1942
01:47:32,000 --> 01:47:32,719
uh

1943
01:47:32,719 --> 01:47:35,840
the proxy is actually using in in

1944
01:47:35,840 --> 01:47:37,840
priority transparent coding

1945
01:47:37,840 --> 01:47:39,140
but let's say i'm

1946
01:47:39,140 --> 01:47:40,960
[Music]

1947
01:47:40,960 --> 01:47:42,560
using uh

1948
01:47:42,560 --> 01:47:44,639
i'm placing a tab

1949
01:47:44,639 --> 01:47:46,719
right after encoding it will not parse

1950
01:47:46,719 --> 01:47:49,920
it as a transfer including editor so

1951
01:47:49,920 --> 01:47:51,440
it's invalid it should have been

1952
01:47:51,440 --> 01:47:53,040
followed by a semicolon

1953
01:47:53,040 --> 01:47:55,440
so the proxy will ignore it because it's

1954
01:47:55,440 --> 01:47:57,600
it has some special character

1955
01:47:57,600 --> 01:47:59,119
but the backend application let's say

1956
01:47:59,119 --> 01:48:00,880
for example is uh

1957
01:48:00,880 --> 01:48:03,760
node.js and for uh sometime

1958
01:48:03,760 --> 01:48:05,840
i

1959
01:48:11,040 --> 01:48:14,639
slightly differently and for this reason

1960
01:48:14,639 --> 01:48:16,800
the proxy will interpret the land as

1961
01:48:16,800 --> 01:48:18,800
something and the application will see

1962
01:48:18,800 --> 01:48:20,880
at a completely different length

1963
01:48:20,880 --> 01:48:22,960
and for this reason this request can be

1964
01:48:22,960 --> 01:48:24,639
either seen as

1965
01:48:24,639 --> 01:48:26,480
we're sending this

1966
01:48:26,480 --> 01:48:29,040
completion of zero

1967
01:48:29,040 --> 01:48:30,880
to vm as one

1968
01:48:30,880 --> 01:48:33,760
data as a post monitor but if we're

1969
01:48:33,760 --> 01:48:35,920
interpreting it with from the

1970
01:48:35,920 --> 01:48:37,760
transferring coding editor

1971
01:48:37,760 --> 01:48:39,600
then we're actually sending uh two

1972
01:48:39,600 --> 01:48:41,679
requests instead of one

1973
01:48:41,679 --> 01:48:43,360
where the first one is

1974
01:48:43,360 --> 01:48:45,280
and right away because we're sending a

1975
01:48:45,280 --> 01:48:47,360
chunk of length zero

1976
01:48:47,360 --> 01:48:49,600
and then it's starting a second request

1977
01:48:49,600 --> 01:48:51,520
to the ambient third

1978
01:48:51,520 --> 01:48:53,360
so with this type of pattern you can

1979
01:48:53,360 --> 01:48:55,760
also bypass weft if you have some rule

1980
01:48:55,760 --> 01:48:57,440
in your iogenix where

1981
01:48:57,440 --> 01:48:59,280
specific path are

1982
01:48:59,280 --> 01:49:01,840
blocked

1983
01:49:02,320 --> 01:49:05,440
but of course this is a case where the

1984
01:49:05,440 --> 01:49:07,199
the rule are separate from the

1985
01:49:07,199 --> 01:49:09,199
application so if your nginx is doing

1986
01:49:09,199 --> 01:49:11,280
some reverse proxy

1987
01:49:11,280 --> 01:49:12,480
to

1988
01:49:12,480 --> 01:49:13,840
some other application that will be

1989
01:49:13,840 --> 01:49:17,199
parsing http differently

1990
01:49:17,599 --> 01:49:19,280
so in conclusion

1991
01:49:19,280 --> 01:49:20,239
uh

1992
01:49:20,239 --> 01:49:21,920
in this workshop i wanted to show you

1993
01:49:21,920 --> 01:49:23,840
just the general principle of what are

1994
01:49:23,840 --> 01:49:26,000
the different techniques bypass

1995
01:49:26,000 --> 01:49:26,960
graph

1996
01:49:26,960 --> 01:49:27,760
so

1997
01:49:27,760 --> 01:49:29,920
i'm hoping that at this point you know

1998
01:49:29,920 --> 01:49:32,080
uh more uh tricks

1999
01:49:32,080 --> 01:49:32,960
and

2000
01:49:32,960 --> 01:49:35,119
the next time you and encounter a wife

2001
01:49:35,119 --> 01:49:37,040
you just don't think about pinpointing

2002
01:49:37,040 --> 01:49:39,520
there are some other vectors to think

2003
01:49:39,520 --> 01:49:40,960
about

2004
01:49:40,960 --> 01:49:44,159
uh so enco uh as soon as in your the

2005
01:49:44,159 --> 01:49:46,000
final application there is some encoding

2006
01:49:46,000 --> 01:49:47,920
or decoding that is done

2007
01:49:47,920 --> 01:49:50,000
this is opportunity to

2008
01:49:50,000 --> 01:49:51,119
add some

2009
01:49:51,119 --> 01:49:52,719
level of context in the request to

2010
01:49:52,719 --> 01:49:54,320
confuse the proxy

2011
01:49:54,320 --> 01:49:56,400
if there is some transformation so some

2012
01:49:56,400 --> 01:49:58,400
keyword or replaced or removed by the

2013
01:49:58,400 --> 01:49:59,520
application

2014
01:49:59,520 --> 01:50:01,840
this is additional keyword that you can

2015
01:50:01,840 --> 01:50:03,040
uh

2016
01:50:03,040 --> 01:50:04,000
basically

2017
01:50:04,000 --> 01:50:06,400
inject in your request to just confuse

2018
01:50:06,400 --> 01:50:08,560
again the proxy

2019
01:50:08,560 --> 01:50:10,159
and instead encoding would be double

2020
01:50:10,159 --> 01:50:12,480
input and stuff like that

2021
01:50:12,480 --> 01:50:14,480
parser implementation is probably the

2022
01:50:14,480 --> 01:50:18,159
the more more general uh description to

2023
01:50:18,159 --> 01:50:20,560
include request smuggling but also url

2024
01:50:20,560 --> 01:50:22,000
parse parsing

2025
01:50:22,000 --> 01:50:22,840
so

2026
01:50:22,840 --> 01:50:25,440
uh different language different

2027
01:50:25,440 --> 01:50:27,679
platforms more often i see different

2028
01:50:27,679 --> 01:50:29,360
protocols differently

2029
01:50:29,360 --> 01:50:31,360
so it's really looking at those

2030
01:50:31,360 --> 01:50:32,960
difference and looking at the

2031
01:50:32,960 --> 01:50:35,199
implementation that they have done

2032
01:50:35,199 --> 01:50:37,040
that you can uh

2033
01:50:37,040 --> 01:50:39,040
leverage this

2034
01:50:39,040 --> 01:50:42,080
uh waff is not a silver bullet so you'll

2035
01:50:42,080 --> 01:50:43,360
not

2036
01:50:43,360 --> 01:50:45,679
end security right away by installing

2037
01:50:45,679 --> 01:50:46,719
ios

2038
01:50:46,719 --> 01:50:48,639
but at the same time i'm not saying you

2039
01:50:48,639 --> 01:50:49,679
shouldn't

2040
01:50:49,679 --> 01:50:50,960
install wealth

2041
01:50:50,960 --> 01:50:52,880
as i mentioned in the introduction what

2042
01:50:52,880 --> 01:50:55,360
are is a a good way here cloud brother

2043
01:50:55,360 --> 01:50:57,119
and you want to provide some

2044
01:50:57,119 --> 01:50:57,920
uh

2045
01:50:57,920 --> 01:51:00,560
quick response to some uh new coming

2046
01:51:00,560 --> 01:51:03,599
attacks so for example look for shell or

2047
01:51:03,599 --> 01:51:06,239
uh shell shock or

2048
01:51:06,239 --> 01:51:08,159
any type of a web attack that you could

2049
01:51:08,159 --> 01:51:10,159
think you can provide some level of

2050
01:51:10,159 --> 01:51:11,360
protection

2051
01:51:11,360 --> 01:51:13,840
uh to make it at least harder for the

2052
01:51:13,840 --> 01:51:16,880
attackers to uh find those penalties

2053
01:51:16,880 --> 01:51:21,400
so um yeah

2054
01:51:21,599 --> 01:51:23,199
and there is more so

2055
01:51:23,199 --> 01:51:25,520
you saw a subset i i've tried to include

2056
01:51:25,520 --> 01:51:28,239
a lot of detail of reference in the uh

2057
01:51:28,239 --> 01:51:30,960
the detailed tutorial for the labs

2058
01:51:30,960 --> 01:51:32,080
but

2059
01:51:32,080 --> 01:51:35,199
it's still not everything so uh i've

2060
01:51:35,199 --> 01:51:36,800
been into two presentations that are

2061
01:51:36,800 --> 01:51:39,520
focusing on specific topic

2062
01:51:39,520 --> 01:51:42,320
so the first one is purely at how you

2063
01:51:42,320 --> 01:51:43,840
can confuse

2064
01:51:43,840 --> 01:51:45,199
uh

2065
01:51:45,199 --> 01:51:46,239
uh

2066
01:51:46,239 --> 01:51:47,679
different path that will be parsed

2067
01:51:47,679 --> 01:51:49,760
differently depending on what library

2068
01:51:49,760 --> 01:51:50,800
and

2069
01:51:50,800 --> 01:51:53,280
web container are used to live to create

2070
01:51:53,280 --> 01:51:56,480
some patch reversal attack

2071
01:51:56,480 --> 01:51:58,800
the second one is purely on sql

2072
01:51:58,800 --> 01:52:00,960
injection many of the segments that i

2073
01:52:00,960 --> 01:52:03,440
present like the reference like

2074
01:52:03,440 --> 01:52:04,800
all the white space character that can

2075
01:52:04,800 --> 01:52:06,719
be used in living bms

2076
01:52:06,719 --> 01:52:08,639
i've extracted those information from

2077
01:52:08,639 --> 01:52:10,560
this presentation

2078
01:52:10,560 --> 01:52:13,280
uh this is a more recent one uh

2079
01:52:13,280 --> 01:52:15,599
showing a more advanced approach to a

2080
01:52:15,599 --> 01:52:17,040
bypassword

2081
01:52:17,040 --> 01:52:19,840
for estrella injection this is a talk

2082
01:52:19,840 --> 01:52:23,119
purely on how you can implement a fuzzer

2083
01:52:23,119 --> 01:52:24,800
to

2084
01:52:24,800 --> 01:52:27,119
detect patterns that are edge cases of

2085
01:52:27,119 --> 01:52:30,000
the debuff

2086
01:52:30,000 --> 01:52:31,520
so this is the end so if you have any

2087
01:52:31,520 --> 01:52:33,199
questions i'll be there until the end

2088
01:52:33,199 --> 01:52:34,000
and

2089
01:52:34,000 --> 01:52:36,639
you have the next

2090
01:52:36,639 --> 01:52:38,159
seven minutes to either complete

2091
01:52:38,159 --> 01:52:39,599
exercise or

2092
01:52:39,599 --> 01:52:42,840
take a break and prepare for a lunch or

2093
01:52:42,840 --> 01:52:45,920
whatever and i'll i'll keep the

2094
01:52:45,920 --> 01:52:49,040
application running so uh until uh

2095
01:52:49,040 --> 01:52:50,639
sunday

2096
01:52:50,639 --> 01:52:51,520
but

2097
01:52:51,520 --> 01:52:53,520
keep in mind everything is available at

2098
01:52:53,520 --> 01:52:56,000
the on this repository to produce it at

2099
01:52:56,000 --> 01:52:56,840
any

2100
01:52:56,840 --> 01:52:59,599
time and if you have issue uh running

2101
01:52:59,599 --> 01:53:01,760
any of the docker instance uh open and

2102
01:53:01,760 --> 01:53:06,000
shoot on docker on the github

2103
01:53:06,080 --> 01:53:10,040
that's it thank you

