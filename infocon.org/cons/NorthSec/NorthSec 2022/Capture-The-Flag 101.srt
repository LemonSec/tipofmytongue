1
00:00:13,120 --> 00:00:14,770
uh

2
00:00:14,770 --> 00:00:17,910
[Music]

3
00:00:29,439 --> 00:00:33,199
this thing one two yeah yeah

4
00:00:35,200 --> 00:00:38,840
oh it was a normal

5
00:00:44,960 --> 00:00:47,960
me

6
00:01:01,800 --> 00:01:04,950
[Music]

7
00:01:08,000 --> 00:01:11,250
[Music]

8
00:01:18,400 --> 00:01:21,400
is

9
00:01:44,320 --> 00:01:45,600
for the

10
00:01:45,600 --> 00:01:47,920
zero person on the stream uh you should

11
00:01:47,920 --> 00:01:51,399
go on ctf101.netsec.io

12
00:01:51,600 --> 00:01:54,320
and uh make sure to create an account

13
00:01:54,320 --> 00:01:56,240
and then i'll uh i'll talk with the

14
00:01:56,240 --> 00:01:58,320
people in the audience

15
00:01:58,320 --> 00:02:01,119
be back be right back

16
00:02:01,119 --> 00:02:03,680
i'm sorry i'm not looking at you

17
00:02:03,680 --> 00:02:06,320
i'm gonna actually just stop this thing

18
00:02:06,320 --> 00:02:09,840
and then share my screen

19
00:02:14,239 --> 00:02:16,959
should be good

20
00:02:17,520 --> 00:02:20,760
all right

21
00:02:26,400 --> 00:02:30,680
is there anyone who speaks english

22
00:03:14,400 --> 00:03:17,469
[Music]

23
00:03:26,159 --> 00:03:29,159
is

24
00:03:42,960 --> 00:03:46,029
[Music]

25
00:03:51,200 --> 00:03:54,200
foreign

26
00:03:56,860 --> 00:03:59,989
[Music]

27
00:04:09,760 --> 00:04:12,760
um

28
00:04:14,480 --> 00:04:17,480
um

29
00:04:23,220 --> 00:04:30,179
[Music]

30
00:04:40,479 --> 00:04:43,719
way up

31
00:04:49,520 --> 00:04:53,680
register and work on the challenge

32
00:04:53,840 --> 00:04:57,320
mohan though

33
00:04:58,000 --> 00:05:00,000
and

34
00:05:00,000 --> 00:05:04,199
oh no that's login i need a register

35
00:05:15,600 --> 00:05:19,479
oh yeah that's this

36
00:05:25,199 --> 00:05:26,800
all right so

37
00:05:26,800 --> 00:05:29,520
as i was uh telling in the room uh we

38
00:05:29,520 --> 00:05:31,360
were gonna we're gonna start from the

39
00:05:31,360 --> 00:05:33,440
bottom from system men and then work our

40
00:05:33,440 --> 00:05:35,039
way up this is a million way of forensic

41
00:05:35,039 --> 00:05:36,479
reverse engineering

42
00:05:36,479 --> 00:05:38,560
uh unfortunately i have no way to know

43
00:05:38,560 --> 00:05:41,600
if there's anyone uh online so

44
00:05:41,600 --> 00:05:44,240
uh i might forget about you completely

45
00:05:44,240 --> 00:05:45,919
at which case you should have come on

46
00:05:45,919 --> 00:05:48,800
site i'm sorry about that in advance

47
00:05:48,800 --> 00:05:52,960
uh okay so we're gonna look at ssh first

48
00:05:52,960 --> 00:05:55,198
um

49
00:05:55,440 --> 00:05:57,039
the

50
00:05:57,039 --> 00:05:58,800
the way that we're going to connect with

51
00:05:58,800 --> 00:06:01,919
ssh is using a key so is everyone here

52
00:06:01,919 --> 00:06:03,840
familiar with ssh

53
00:06:03,840 --> 00:06:06,000
or have you never heard about it

54
00:06:06,000 --> 00:06:08,720
familiar so ssh is basically like remote

55
00:06:08,720 --> 00:06:11,280
desktop but for the for a console and

56
00:06:11,280 --> 00:06:14,000
it's usually to administer linux systems

57
00:06:14,000 --> 00:06:16,639
but it is very useful as well because it

58
00:06:16,639 --> 00:06:20,479
can carry arbitrary data across a tunnel

59
00:06:20,479 --> 00:06:22,000
we're not going to do the tunnel part

60
00:06:22,000 --> 00:06:24,880
yet but ssh has an important concept so

61
00:06:24,880 --> 00:06:27,520
instead of relying on passwords you can

62
00:06:27,520 --> 00:06:28,800
use keys

63
00:06:28,800 --> 00:06:32,080
and as an administrator using keys is

64
00:06:32,080 --> 00:06:34,160
very key

65
00:06:34,160 --> 00:06:36,479
but it's the the fact that

66
00:06:36,479 --> 00:06:38,080
you're pretty much guaranteed the

67
00:06:38,080 --> 00:06:41,199
complexity of the what the user uses to

68
00:06:41,199 --> 00:06:42,400
authenticate

69
00:06:42,400 --> 00:06:46,319
uh and it's we're talking like 150 60

70
00:06:46,319 --> 00:06:49,680
bit of complexity

71
00:06:49,680 --> 00:06:51,840
again you know depending on the specific

72
00:06:51,840 --> 00:06:54,639
cryptography used but it is

73
00:06:54,639 --> 00:06:56,759
uh

74
00:06:56,759 --> 00:07:01,039
stronger-ish security so

75
00:07:01,039 --> 00:07:03,039
this is

76
00:07:03,039 --> 00:07:05,360
very simple right you have the host name

77
00:07:05,360 --> 00:07:08,319
you have the port you have the username

78
00:07:08,319 --> 00:07:10,080
and then everything is laid out at the

79
00:07:10,080 --> 00:07:10,960
bottom

80
00:07:10,960 --> 00:07:13,360
for you so we'll try to connect and see

81
00:07:13,360 --> 00:07:17,360
what this leads us to so if

82
00:07:17,360 --> 00:07:19,199
i use this now

83
00:07:19,199 --> 00:07:22,160
you can use a

84
00:07:22,160 --> 00:07:25,919
windows subsystem for linux it has ssh

85
00:07:25,919 --> 00:07:29,599
now so you can use that but uh you you

86
00:07:29,599 --> 00:07:32,400
can also use putty so we put in here the

87
00:07:32,400 --> 00:07:34,880
key in the putty format putty is a very

88
00:07:34,880 --> 00:07:38,080
well known windows ssh client but i'm

89
00:07:38,080 --> 00:07:39,840
gonna for the demonstration i'm gonna

90
00:07:39,840 --> 00:07:42,720
use uh ssh

91
00:07:42,720 --> 00:07:44,879
from linux so

92
00:07:44,879 --> 00:07:47,120
as we what we can see oh i'm gonna just

93
00:07:47,120 --> 00:07:49,520
remove the trust that i established

94
00:07:49,520 --> 00:07:51,280
before

95
00:07:51,280 --> 00:07:52,160
uh

96
00:07:52,160 --> 00:07:56,720
known hosts uh this is a bit uh

97
00:07:56,720 --> 00:07:59,720
whoops

98
00:07:59,840 --> 00:08:01,680
yeah all right

99
00:08:01,680 --> 00:08:03,520
it's because i tested all my challenges

100
00:08:03,520 --> 00:08:05,360
yesterday so that's why i had different

101
00:08:05,360 --> 00:08:06,400
behavior

102
00:08:06,400 --> 00:08:09,120
uh oh i'm also gonna go in this folder

103
00:08:09,120 --> 00:08:10,800
and i'm gonna remove everything to show

104
00:08:10,800 --> 00:08:13,520
you that i'm not cheating

105
00:08:13,520 --> 00:08:17,199
so we're empties a clean slate

106
00:08:17,199 --> 00:08:18,639
now

107
00:08:18,639 --> 00:08:21,039
we're trying to ssh there it's the first

108
00:08:21,039 --> 00:08:23,919
time we connect so ssh is considered a

109
00:08:23,919 --> 00:08:26,479
trust on first use protocol

110
00:08:26,479 --> 00:08:29,520
which means that you there is some

111
00:08:29,520 --> 00:08:32,080
like the host key is exchanged on the

112
00:08:32,080 --> 00:08:34,559
first time so you you could be

113
00:08:34,559 --> 00:08:36,080
man in the middle the first time you

114
00:08:36,080 --> 00:08:39,120
connect to an unknown ssh server but

115
00:08:39,120 --> 00:08:42,000
after you did the first trust usually

116
00:08:42,000 --> 00:08:44,959
you know you just set up the server so

117
00:08:44,959 --> 00:08:47,040
you connect to it right away after

118
00:08:47,040 --> 00:08:49,519
but so once the this first trust is

119
00:08:49,519 --> 00:08:51,600
established then

120
00:08:51,600 --> 00:08:52,640
um

121
00:08:52,640 --> 00:08:55,440
if anything in the cryptography changes

122
00:08:55,440 --> 00:08:58,640
afterwards you'll get a big ass

123
00:08:58,640 --> 00:08:59,839
warning

124
00:08:59,839 --> 00:09:01,839
really scary that says you are being

125
00:09:01,839 --> 00:09:03,519
attacked something eavesdropped in the

126
00:09:03,519 --> 00:09:05,760
middle the secret that you exchange on

127
00:09:05,760 --> 00:09:07,760
the first use is different

128
00:09:07,760 --> 00:09:08,560
so

129
00:09:08,560 --> 00:09:11,040
now for our purposes you know in a ctf

130
00:09:11,040 --> 00:09:13,440
context you basically are trying to

131
00:09:13,440 --> 00:09:15,519
attack the system so you will trust that

132
00:09:15,519 --> 00:09:18,000
whatever key but then here what we have

133
00:09:18,000 --> 00:09:20,240
is that we're asked for a password

134
00:09:20,240 --> 00:09:21,040
so

135
00:09:21,040 --> 00:09:23,920
we know that there is a key pair that

136
00:09:23,920 --> 00:09:25,279
was given

137
00:09:25,279 --> 00:09:27,279
so now let's try to use that so we'll

138
00:09:27,279 --> 00:09:29,920
download it

139
00:09:31,360 --> 00:09:33,600
so i'll uh

140
00:09:33,600 --> 00:09:36,000
you know you started ctf you create a

141
00:09:36,000 --> 00:09:37,519
folder with the name of the ctf and then

142
00:09:37,519 --> 00:09:40,399
you put your stuff at the right spots so

143
00:09:40,399 --> 00:09:42,480
i have the track is called system and

144
00:09:42,480 --> 00:09:46,080
i'll put the key pair there

145
00:09:46,080 --> 00:09:47,440
and then

146
00:09:47,440 --> 00:09:50,560
let's look at the options i want to pass

147
00:09:50,560 --> 00:09:53,359
a key

148
00:09:59,120 --> 00:10:02,240
all right so we have here identity file

149
00:10:02,240 --> 00:10:04,079
right select the file from which the

150
00:10:04,079 --> 00:10:06,480
identity private key for public key

151
00:10:06,480 --> 00:10:08,880
authentication is red so we're gonna try

152
00:10:08,880 --> 00:10:11,120
that

153
00:10:11,120 --> 00:10:12,959
it's a bit directed right so i'm

154
00:10:12,959 --> 00:10:14,560
cheating a little bit here

155
00:10:14,560 --> 00:10:16,560
so we're gonna pass dash i

156
00:10:16,560 --> 00:10:20,399
and then a link to the key

157
00:10:21,600 --> 00:10:23,360
ssh keypair

158
00:10:23,360 --> 00:10:25,519
gonna try to connect

159
00:10:25,519 --> 00:10:30,000
oh i'm getting an error like unprotected

160
00:10:30,000 --> 00:10:31,600
private key

161
00:10:31,600 --> 00:10:34,079
well ssh is trying to teach you how to

162
00:10:34,079 --> 00:10:36,720
do the the things correctly right it

163
00:10:36,720 --> 00:10:37,519
says

164
00:10:37,519 --> 00:10:39,040
you know this stuff shouldn't be

165
00:10:39,040 --> 00:10:41,760
readable by others so it's saying that

166
00:10:41,760 --> 00:10:43,920
the permissions are too broad

167
00:10:43,920 --> 00:10:44,720
and

168
00:10:44,720 --> 00:10:46,640
on linux by default

169
00:10:46,640 --> 00:10:49,519
uh other have read access to your files

170
00:10:49,519 --> 00:10:51,360
and they don't know that this is a

171
00:10:51,360 --> 00:10:53,200
single user system so they're giving me

172
00:10:53,200 --> 00:10:54,240
this warning

173
00:10:54,240 --> 00:10:57,600
so we're gonna change permission on it

174
00:10:57,600 --> 00:10:59,360
so permission

175
00:10:59,360 --> 00:11:01,920
again you know this is ctf 101 we're

176
00:11:01,920 --> 00:11:03,279
going to change permissions and it's

177
00:11:03,279 --> 00:11:05,120
part of the challenge

178
00:11:05,120 --> 00:11:07,279
you know it's it's all good

179
00:11:07,279 --> 00:11:10,480
so we're going to use uh change mod and

180
00:11:10,480 --> 00:11:12,880
i like the symbolic

181
00:11:12,880 --> 00:11:15,040
way of changing permission do we see the

182
00:11:15,040 --> 00:11:16,720
at the bottom yeah

183
00:11:16,720 --> 00:11:19,920
i like the symbolic i i could

184
00:11:19,920 --> 00:11:22,640
i'll pump it up oh i can't actually i'll

185
00:11:22,640 --> 00:11:24,480
clear all right

186
00:11:24,480 --> 00:11:26,800
so i like the symbolic way of changing

187
00:11:26,800 --> 00:11:28,320
permission because it's super easy to

188
00:11:28,320 --> 00:11:31,040
remember as opposed to the octal like

189
00:11:31,040 --> 00:11:34,640
zero six four four or seven seven seven

190
00:11:34,640 --> 00:11:35,920
uh so

191
00:11:35,920 --> 00:11:37,040
the

192
00:11:37,040 --> 00:11:38,000
the

193
00:11:38,000 --> 00:11:41,519
friendly way you basically have u for

194
00:11:41,519 --> 00:11:42,720
user

195
00:11:42,720 --> 00:11:44,640
j for group

196
00:11:44,640 --> 00:11:48,800
and o for others which is the the

197
00:11:48,800 --> 00:11:50,880
the permission system that you see here

198
00:11:50,880 --> 00:11:51,760
right

199
00:11:51,760 --> 00:11:52,959
so

200
00:11:52,959 --> 00:11:55,200
the the first uh

201
00:11:55,200 --> 00:11:57,920
sequence of three is user

202
00:11:57,920 --> 00:12:00,880
second sequence of three is group and

203
00:12:00,880 --> 00:12:03,600
the last is others or people some people

204
00:12:03,600 --> 00:12:05,360
call it world

205
00:12:05,360 --> 00:12:06,160
so

206
00:12:06,160 --> 00:12:06,959
what

207
00:12:06,959 --> 00:12:08,639
the error messages i got is that

208
00:12:08,639 --> 00:12:11,839
permissions were uh too

209
00:12:11,839 --> 00:12:12,880
broad

210
00:12:12,880 --> 00:12:15,279
it was too permissive so we're gonna get

211
00:12:15,279 --> 00:12:19,040
rid of those readable portion for group

212
00:12:19,040 --> 00:12:20,720
and other

213
00:12:20,720 --> 00:12:21,680
now

214
00:12:21,680 --> 00:12:23,440
with the symbolic way this is

215
00:12:23,440 --> 00:12:25,200
accomplished by saying

216
00:12:25,200 --> 00:12:28,639
user must be equals to read write

217
00:12:28,639 --> 00:12:29,600
comma

218
00:12:29,600 --> 00:12:31,440
group and others

219
00:12:31,440 --> 00:12:33,120
equal nothing

220
00:12:33,120 --> 00:12:34,959
as simple as that don't need to remember

221
00:12:34,959 --> 00:12:37,200
the octal stuff

222
00:12:37,200 --> 00:12:39,440
and then

223
00:12:39,440 --> 00:12:41,440
say i always forget i didn't get into

224
00:12:41,440 --> 00:12:45,120
the directory so and then the file name

225
00:12:45,120 --> 00:12:47,120
so what happened

226
00:12:47,120 --> 00:12:50,000
happens that we remove the read bits by

227
00:12:50,000 --> 00:12:52,639
saying that we want nothing

228
00:12:52,639 --> 00:12:53,600
in

229
00:12:53,600 --> 00:12:55,519
for group or other

230
00:12:55,519 --> 00:12:56,880
now

231
00:12:56,880 --> 00:12:59,040
will it complain

232
00:12:59,040 --> 00:13:01,360
no we got in

233
00:13:01,360 --> 00:13:04,480
we were in the system

234
00:13:04,959 --> 00:13:07,279
let's oh we ls you know we list the

235
00:13:07,279 --> 00:13:09,920
files and there is a flag let's look at

236
00:13:09,920 --> 00:13:11,399
him at it

237
00:13:11,399 --> 00:13:12,959
flag.txt

238
00:13:12,959 --> 00:13:15,760
learning to use ssh and ssh keys is a

239
00:13:15,760 --> 00:13:17,600
very important skills and we got the

240
00:13:17,600 --> 00:13:21,160
flag right there

241
00:13:23,680 --> 00:13:26,638
i'm gonna try it

242
00:13:27,519 --> 00:13:30,320
all right we got it

243
00:13:30,320 --> 00:13:31,440
so

244
00:13:31,440 --> 00:13:35,839
let's check how we're doing

245
00:13:39,920 --> 00:13:41,360
okay okay

246
00:13:41,360 --> 00:13:43,760
so um anyone

247
00:13:43,760 --> 00:13:45,680
has so we're gonna move on to the next

248
00:13:45,680 --> 00:13:48,480
one but anyone has questions or you guys

249
00:13:48,480 --> 00:13:50,720
are are not set up properly or this is

250
00:13:50,720 --> 00:13:54,760
just too easy you haven't attempted

251
00:14:14,639 --> 00:14:17,639
see

252
00:14:29,920 --> 00:14:32,990
[Music]

253
00:14:41,199 --> 00:14:44,199
um

254
00:15:02,399 --> 00:15:05,399
um

255
00:15:29,600 --> 00:15:33,399
don't leave

256
00:15:44,959 --> 00:15:47,359
all right

257
00:15:50,320 --> 00:15:51,839
so

258
00:15:51,839 --> 00:15:54,639
yeah so i'm gonna look at the challenge

259
00:15:54,639 --> 00:15:56,959
first right because we need to have a

260
00:15:56,959 --> 00:15:59,920
goal oriented

261
00:16:02,079 --> 00:16:03,680
resolve it's good

262
00:16:03,680 --> 00:16:05,680
okay so ssh tunnel

263
00:16:05,680 --> 00:16:09,680
it's very important skill to understand

264
00:16:09,680 --> 00:16:11,440
so

265
00:16:11,440 --> 00:16:12,959
you're going to leverage the machine

266
00:16:12,959 --> 00:16:16,800
that you had you just gain access to

267
00:16:16,800 --> 00:16:19,839
in order to reach another machine behind

268
00:16:19,839 --> 00:16:21,360
that machine

269
00:16:21,360 --> 00:16:23,600
this other machine is not available on

270
00:16:23,600 --> 00:16:25,040
the internet

271
00:16:25,040 --> 00:16:27,519
and and this is what's written here is

272
00:16:27,519 --> 00:16:30,000
that you could try to reach

273
00:16:30,000 --> 00:16:32,000
that other machine

274
00:16:32,000 --> 00:16:34,079
from the first one

275
00:16:34,079 --> 00:16:35,040
so

276
00:16:35,040 --> 00:16:38,959
the goal is to to query a service

277
00:16:38,959 --> 00:16:41,519
on the sysanmin

278
00:16:41,519 --> 00:16:43,759
service machine okay i'm going to do a

279
00:16:43,759 --> 00:16:46,959
little diagram here so

280
00:16:47,199 --> 00:16:48,880
uh let's

281
00:16:48,880 --> 00:16:52,800
so this is pivot box

282
00:16:54,639 --> 00:16:55,519
and

283
00:16:55,519 --> 00:16:58,160
the machine behind is this admin service

284
00:16:58,160 --> 00:16:59,759
okay

285
00:16:59,759 --> 00:17:03,480
this is the internet

286
00:17:04,720 --> 00:17:07,679
and uh

287
00:17:08,880 --> 00:17:11,520
this is us

288
00:17:11,599 --> 00:17:12,959
all right

289
00:17:12,959 --> 00:17:14,000
so

290
00:17:14,000 --> 00:17:17,359
what we did in the previous uh exercise

291
00:17:17,359 --> 00:17:21,679
is access pivot box okay now what we are

292
00:17:21,679 --> 00:17:22,720
asked

293
00:17:22,720 --> 00:17:25,760
is there is a service

294
00:17:25,760 --> 00:17:28,559
running here so a process

295
00:17:28,559 --> 00:17:30,840
running here on port

296
00:17:30,840 --> 00:17:32,400
555.

297
00:17:32,400 --> 00:17:35,360
what we are asked is

298
00:17:35,360 --> 00:17:39,678
to query that service okay

299
00:17:40,480 --> 00:17:43,760
but the problem is that this so the the

300
00:17:43,760 --> 00:17:46,400
host name is called system men service

301
00:17:46,400 --> 00:17:48,160
we're gonna try

302
00:17:48,160 --> 00:17:49,280
from

303
00:17:49,280 --> 00:17:51,760
our my computer

304
00:17:51,760 --> 00:17:55,200
i'm gonna try to access it right but

305
00:17:55,200 --> 00:17:57,200
this is not an internet this is not a

306
00:17:57,200 --> 00:18:00,400
global ip address this is not

307
00:18:00,400 --> 00:18:01,520
uh

308
00:18:01,520 --> 00:18:03,919
something that is reachable from my

309
00:18:03,919 --> 00:18:06,000
computer right now

310
00:18:06,000 --> 00:18:07,520
okay well

311
00:18:07,520 --> 00:18:10,720
what about from the server we just got

312
00:18:10,720 --> 00:18:15,280
access to so from pivot box

313
00:18:15,280 --> 00:18:17,760
can we access that system

314
00:18:17,760 --> 00:18:21,039
so let's try to ping it

315
00:18:21,039 --> 00:18:21,840
oh

316
00:18:21,840 --> 00:18:26,160
i can't there's no ping is not installed

317
00:18:26,160 --> 00:18:29,200
ping is not installed

318
00:18:29,200 --> 00:18:31,679
can we

319
00:18:32,880 --> 00:18:34,400
resolve it

320
00:18:34,400 --> 00:18:37,600
we don't have an s lookup okay can we

321
00:18:37,600 --> 00:18:43,320
is there dig another dns tool no

322
00:18:43,760 --> 00:18:46,320
is there

323
00:18:46,320 --> 00:18:48,080
systemd resolve

324
00:18:48,080 --> 00:18:50,320
no

325
00:18:53,919 --> 00:18:56,640
so basically i don't know how from that

326
00:18:56,640 --> 00:18:59,440
system it's a very restricted system and

327
00:18:59,440 --> 00:19:02,320
it's part of the challenge okay this is

328
00:19:02,320 --> 00:19:06,320
why we have to learn about ssh tunnels

329
00:19:06,320 --> 00:19:08,480
so

330
00:19:09,600 --> 00:19:11,679
again back to our our little diagram

331
00:19:11,679 --> 00:19:15,440
here so we did ssh into

332
00:19:15,440 --> 00:19:18,320
pivot box

333
00:19:20,000 --> 00:19:20,880
all right

334
00:19:20,880 --> 00:19:23,440
so we did ssh into pivot box

335
00:19:23,440 --> 00:19:26,799
but there is nothing here that gives us

336
00:19:26,799 --> 00:19:28,960
the power to reach

337
00:19:28,960 --> 00:19:32,320
the the port 555 that we need to reach

338
00:19:32,320 --> 00:19:34,720
on this other system we're not even sure

339
00:19:34,720 --> 00:19:37,120
that system exists because we have no

340
00:19:37,120 --> 00:19:41,120
tools to query dns that i found

341
00:19:41,120 --> 00:19:42,320
does anyone

342
00:19:42,320 --> 00:19:45,120
here know another dns resolving tool

343
00:19:45,120 --> 00:19:48,080
that i haven't tried

344
00:19:49,360 --> 00:19:51,600
host file the host file let's check take

345
00:19:51,600 --> 00:19:52,960
a look at the host file that's a good uh

346
00:19:52,960 --> 00:19:54,559
good point

347
00:19:54,559 --> 00:19:57,840
so a host file on linux is atc host

348
00:19:57,840 --> 00:20:00,000
oh it's there

349
00:20:00,000 --> 00:20:02,559
all right so we know the ip that's good

350
00:20:02,559 --> 00:20:04,159
we made progress

351
00:20:04,159 --> 00:20:07,120
so now is there okay so we have

352
00:20:07,120 --> 00:20:09,039
so the host file

353
00:20:09,039 --> 00:20:10,559
i didn't even know docker worked that

354
00:20:10,559 --> 00:20:11,760
way

355
00:20:11,760 --> 00:20:14,480
so docker did inject the ip in the host

356
00:20:14,480 --> 00:20:17,840
file so we know now that this

357
00:20:17,840 --> 00:20:19,840
is on a different

358
00:20:19,840 --> 00:20:22,960
subnet it's not an internet accessible

359
00:20:22,960 --> 00:20:25,120
address right we're going to put that in

360
00:20:25,120 --> 00:20:28,080
our diagram here

361
00:20:28,159 --> 00:20:29,280
uh

362
00:20:29,280 --> 00:20:31,440
up that's the ip

363
00:20:31,440 --> 00:20:34,640
of this system

364
00:20:34,640 --> 00:20:35,440
and

365
00:20:35,440 --> 00:20:37,600
since it's not an internet accessible

366
00:20:37,600 --> 00:20:42,080
address we need to find a way to uh

367
00:20:42,080 --> 00:20:44,080
query it

368
00:20:44,080 --> 00:20:45,280
to uh

369
00:20:45,280 --> 00:20:46,799
we need to find a way but we are in

370
00:20:46,799 --> 00:20:49,679
pivot box so here we probably have an ip

371
00:20:49,679 --> 00:20:52,880
in this subnet so i tried to look at rip

372
00:20:52,880 --> 00:20:54,799
it says command that found i'll try i

373
00:20:54,799 --> 00:20:57,520
have config i'm not found is there a way

374
00:20:57,520 --> 00:21:00,480
i can find my own ip and that subnet is

375
00:21:00,480 --> 00:21:04,960
it an etsy host it's not

376
00:21:08,159 --> 00:21:10,080
so

377
00:21:10,080 --> 00:21:12,320
there's probably a couple ways and one

378
00:21:12,320 --> 00:21:14,159
of the things is we have access to

379
00:21:14,159 --> 00:21:16,720
python right so we could

380
00:21:16,720 --> 00:21:19,840
put python code to figure out what's my

381
00:21:19,840 --> 00:21:20,720
ip

382
00:21:20,720 --> 00:21:22,960
or what what are all my ips because

383
00:21:22,960 --> 00:21:25,039
python is basically you know

384
00:21:25,039 --> 00:21:26,880
an interpreter of

385
00:21:26,880 --> 00:21:28,320
a lot of things

386
00:21:28,320 --> 00:21:30,000
but why not go there because it's kind

387
00:21:30,000 --> 00:21:32,880
of out of scope a little bit but still

388
00:21:32,880 --> 00:21:34,880
an important part of the mindset right

389
00:21:34,880 --> 00:21:37,280
of the what do you have at hand that can

390
00:21:37,280 --> 00:21:39,840
help you solve the problem which is i

391
00:21:39,840 --> 00:21:42,480
need to query that service

392
00:21:42,480 --> 00:21:43,440
so

393
00:21:43,440 --> 00:21:45,360
we're gonna try we're gonna forget

394
00:21:45,360 --> 00:21:48,000
what's rip we're gonna assume that we

395
00:21:48,000 --> 00:21:50,960
can connect to this ip

396
00:21:50,960 --> 00:21:52,799
so we're gonna try maybe

397
00:21:52,799 --> 00:21:57,200
you know so i uh so netcat doesn't exist

398
00:21:57,200 --> 00:21:58,960
doesn't exist

399
00:21:58,960 --> 00:22:00,400
uh curl

400
00:22:00,400 --> 00:22:03,280
doesn't exist so nc is basically

401
00:22:03,280 --> 00:22:04,559
low level

402
00:22:04,559 --> 00:22:07,120
tcp it's called the tcp swiss army knife

403
00:22:07,120 --> 00:22:09,360
so it allows you to connect you know to

404
00:22:09,360 --> 00:22:12,880
any ip and a port uh it's very useful

405
00:22:12,880 --> 00:22:14,799
tool for

406
00:22:14,799 --> 00:22:17,039
port exploration and stuff like that

407
00:22:17,039 --> 00:22:19,520
but very manual it's very low level

408
00:22:19,520 --> 00:22:23,679
uh curl is for querying uh http stuff

409
00:22:23,679 --> 00:22:26,480
and it's not there and then there's wget

410
00:22:26,480 --> 00:22:30,320
wget is another it's curl like

411
00:22:30,320 --> 00:22:33,280
so we can see okay can we connect to the

412
00:22:33,280 --> 00:22:34,720
host

413
00:22:34,720 --> 00:22:35,840
and so

414
00:22:35,840 --> 00:22:39,039
by default it will try port 80

415
00:22:39,039 --> 00:22:41,760
4 http stuff and it says connection

416
00:22:41,760 --> 00:22:44,159
refuse but we know that it was on port

417
00:22:44,159 --> 00:22:47,200
5555 so we can do that

418
00:22:47,200 --> 00:22:50,640
and then it says connection reviews

419
00:22:52,559 --> 00:22:53,600
okay

420
00:22:53,600 --> 00:22:56,480
now we tried all our options

421
00:22:56,480 --> 00:22:57,840
to leverage

422
00:22:57,840 --> 00:23:00,320
pivot box so we were we were here right

423
00:23:00,320 --> 00:23:02,480
we tried

424
00:23:02,480 --> 00:23:04,480
tried everything

425
00:23:04,480 --> 00:23:06,559
from here

426
00:23:06,559 --> 00:23:07,360
and

427
00:23:07,360 --> 00:23:11,520
the result is set face

428
00:23:14,000 --> 00:23:15,679
now

429
00:23:15,679 --> 00:23:17,919
we have all the tools that we need on

430
00:23:17,919 --> 00:23:21,360
our attack machine why don't we

431
00:23:21,360 --> 00:23:24,240
have a mechanism to reach this port and

432
00:23:24,240 --> 00:23:27,600
this is why why ssh is so powerful

433
00:23:27,600 --> 00:23:29,280
you can

434
00:23:29,280 --> 00:23:32,320
and so basically what what happens is

435
00:23:32,320 --> 00:23:34,559
that with ssh

436
00:23:34,559 --> 00:23:36,960
you create a tunnel

437
00:23:36,960 --> 00:23:40,320
that will go up to here i'll uh i'll try

438
00:23:40,320 --> 00:23:44,640
to make that more uh clear i guess

439
00:23:44,640 --> 00:23:48,240
and so what we'll do is that we'll we'll

440
00:23:48,240 --> 00:23:52,480
uh send our data here and it will go out

441
00:23:52,480 --> 00:23:55,600
like it's coming from here to go there

442
00:23:55,600 --> 00:23:56,799
okay

443
00:23:56,799 --> 00:23:58,799
that's what we're gonna try to do with

444
00:23:58,799 --> 00:24:01,840
our ssh tunnel

445
00:24:02,559 --> 00:24:06,399
ssh tunnel now

446
00:24:06,480 --> 00:24:10,080
the syntax for ssh tunnel and the and

447
00:24:10,080 --> 00:24:13,039
and you can figure this out on your own

448
00:24:13,039 --> 00:24:16,159
uh with the man page

449
00:24:16,159 --> 00:24:17,520
but uh

450
00:24:17,520 --> 00:24:19,760
if you search for tunnels so searching

451
00:24:19,760 --> 00:24:22,960
in man page you just write slash

452
00:24:22,960 --> 00:24:26,480
and it will search in the man page

453
00:24:26,559 --> 00:24:28,559
search for tunnel

454
00:24:28,559 --> 00:24:30,559
couple words uh maybe it's not super

455
00:24:30,559 --> 00:24:33,559
clear

456
00:24:34,159 --> 00:24:36,400
that's not the type so ssh has basically

457
00:24:36,400 --> 00:24:39,440
a lot of different types of tunnel

458
00:24:39,440 --> 00:24:41,600
it's not helping i know the name of the

459
00:24:41,600 --> 00:24:44,159
option i'm gonna like

460
00:24:44,159 --> 00:24:46,559
reverse figure it out okay

461
00:24:46,559 --> 00:24:47,520
so

462
00:24:47,520 --> 00:24:50,480
dash capital l but so it's here if you

463
00:24:50,480 --> 00:24:52,640
look at the man page it says specifies

464
00:24:52,640 --> 00:24:55,440
that connection to the given tcp port or

465
00:24:55,440 --> 00:24:58,400
your linux socket on the client host

466
00:24:58,400 --> 00:25:01,760
are to be forwarded to the given host

467
00:25:01,760 --> 00:25:03,520
and port

468
00:25:03,520 --> 00:25:04,400
so

469
00:25:04,400 --> 00:25:07,120
what's interesting is that an ssh tunnel

470
00:25:07,120 --> 00:25:09,279
doesn't only allow you

471
00:25:09,279 --> 00:25:10,400
to do

472
00:25:10,400 --> 00:25:13,520
port here which is already in itself

473
00:25:13,520 --> 00:25:15,520
very interesting right you're tunneling

474
00:25:15,520 --> 00:25:17,840
securely getting out and poking the

475
00:25:17,840 --> 00:25:20,559
local system but it allows you

476
00:25:20,559 --> 00:25:22,880
to go from

477
00:25:22,880 --> 00:25:25,520
the system you are connecting to

478
00:25:25,520 --> 00:25:28,480
to another system only available from

479
00:25:28,480 --> 00:25:30,960
that system

480
00:25:30,960 --> 00:25:32,320
so

481
00:25:32,320 --> 00:25:34,080
capital l

482
00:25:34,080 --> 00:25:35,520
and then you have

483
00:25:35,520 --> 00:25:36,799
port

484
00:25:36,799 --> 00:25:39,360
host and host port this is what we're

485
00:25:39,360 --> 00:25:40,840
gonna

486
00:25:40,840 --> 00:25:43,919
build so

487
00:25:43,919 --> 00:25:46,559
port is the port on the client

488
00:25:46,559 --> 00:25:49,039
host is the host

489
00:25:49,039 --> 00:25:52,640
after the original ssh connection

490
00:25:52,640 --> 00:25:54,640
in in our case

491
00:25:54,640 --> 00:25:57,679
this is sysadmin service

492
00:25:57,679 --> 00:26:01,919
this so our original ssh is to pivot box

493
00:26:01,919 --> 00:26:04,480
but from there our tunnel we want it to

494
00:26:04,480 --> 00:26:07,760
be destined to system in service at the

495
00:26:07,760 --> 00:26:09,360
remote end

496
00:26:09,360 --> 00:26:12,480
and then there's host port so if host

497
00:26:12,480 --> 00:26:18,080
this is an n service host port is 555

498
00:26:18,080 --> 00:26:19,360
and so

499
00:26:19,360 --> 00:26:21,279
let's try it okay we had our previous

500
00:26:21,279 --> 00:26:24,159
command we still need the key because

501
00:26:24,159 --> 00:26:26,159
we're still authenticated to that system

502
00:26:26,159 --> 00:26:28,480
we're just adding another feature on top

503
00:26:28,480 --> 00:26:29,760
of it

504
00:26:29,760 --> 00:26:32,480
so dash capital l

505
00:26:32,480 --> 00:26:33,600
port

506
00:26:33,600 --> 00:26:36,719
our port is local

507
00:26:36,840 --> 00:26:38,559
basically

508
00:26:38,559 --> 00:26:41,039
we we invented right as long as we

509
00:26:41,039 --> 00:26:42,960
remember what value we put there this is

510
00:26:42,960 --> 00:26:46,240
local this is for us for later

511
00:26:46,240 --> 00:26:47,440
because

512
00:26:47,440 --> 00:26:49,440
although we're set up in that tunnel

513
00:26:49,440 --> 00:26:51,440
that tunnel

514
00:26:51,440 --> 00:26:54,320
it's not giving us the flag instantly we

515
00:26:54,320 --> 00:26:56,880
still need to query that service but

516
00:26:56,880 --> 00:26:58,720
instead of doing it

517
00:26:58,720 --> 00:27:01,279
from the target system we will do it

518
00:27:01,279 --> 00:27:03,679
from our own system it's all going to

519
00:27:03,679 --> 00:27:05,360
make sense very soon

520
00:27:05,360 --> 00:27:07,919
but this port we can

521
00:27:07,919 --> 00:27:10,480
figure it out on your own one a really

522
00:27:10,480 --> 00:27:13,919
good value is one two three four five

523
00:27:13,919 --> 00:27:15,919
it doesn't matter to be honest

524
00:27:15,919 --> 00:27:18,080
okay then it was host

525
00:27:18,080 --> 00:27:21,840
host will put sis admin service

526
00:27:21,840 --> 00:27:24,559
because pivot box knows what that means

527
00:27:24,559 --> 00:27:28,918
it translates to 172.1.0.8

528
00:27:29,679 --> 00:27:32,880
and then 555.

529
00:27:33,600 --> 00:27:35,760
so what's weird about the first time you

530
00:27:35,760 --> 00:27:38,159
do an ssh tunnel is that you think that

531
00:27:38,159 --> 00:27:40,480
the ssh tunnel is so important that it's

532
00:27:40,480 --> 00:27:43,039
going to change the behavior of ssh from

533
00:27:43,039 --> 00:27:44,960
the the common line perspective but it

534
00:27:44,960 --> 00:27:47,679
doesn't so you press enter and you still

535
00:27:47,679 --> 00:27:49,120
have your shell

536
00:27:49,120 --> 00:27:51,360
but what you don't know or what is not

537
00:27:51,360 --> 00:27:52,320
obvious

538
00:27:52,320 --> 00:27:54,159
is that the tunnel was connected at the

539
00:27:54,159 --> 00:27:55,840
same time so you do have your command

540
00:27:55,840 --> 00:27:58,320
interpreter but the tunnel was created

541
00:27:58,320 --> 00:28:01,039
so if we look at our local machine so

542
00:28:01,039 --> 00:28:03,200
i'm opening a new common line on my

543
00:28:03,200 --> 00:28:04,720
local machine

544
00:28:04,720 --> 00:28:07,039
and you do a net step

545
00:28:07,039 --> 00:28:10,000
to look at what are open services and

546
00:28:10,000 --> 00:28:13,760
let's grab one two three four five

547
00:28:14,399 --> 00:28:17,120
so the flag that i'm using

548
00:28:17,120 --> 00:28:19,440
the p flag is to show the process

549
00:28:19,440 --> 00:28:22,640
associated with a socket this requires

550
00:28:22,640 --> 00:28:24,640
root this is why i added sudo and i need

551
00:28:24,640 --> 00:28:26,240
to type my password

552
00:28:26,240 --> 00:28:28,720
but so uh unfortunate positioning of

553
00:28:28,720 --> 00:28:31,840
zoom okay let's just run it another time

554
00:28:31,840 --> 00:28:33,440
all right

555
00:28:33,440 --> 00:28:36,559
so what you can see from this is that on

556
00:28:36,559 --> 00:28:39,840
my local system now that i did the

557
00:28:39,840 --> 00:28:41,360
tunnel

558
00:28:41,360 --> 00:28:43,039
i have

559
00:28:43,039 --> 00:28:45,440
something on port one two three four

560
00:28:45,440 --> 00:28:46,320
five

561
00:28:46,320 --> 00:28:47,440
that is

562
00:28:47,440 --> 00:28:49,520
listening and it's ssh

563
00:28:49,520 --> 00:28:51,919
so ssh

564
00:28:51,919 --> 00:28:54,559
created that tunnel for me now i wanna

565
00:28:54,559 --> 00:28:57,360
solve the fl i wanna find the flag what

566
00:28:57,360 --> 00:29:00,399
was i requested to do i was requested to

567
00:29:00,399 --> 00:29:02,159
poke the service

568
00:29:02,159 --> 00:29:03,919
so that's what i want to do

569
00:29:03,919 --> 00:29:06,799
but now what's

570
00:29:06,799 --> 00:29:08,559
the thing that we let's go back to our

571
00:29:08,559 --> 00:29:11,840
diagram so now that i have this tunnel

572
00:29:11,840 --> 00:29:13,679
and i'm here

573
00:29:13,679 --> 00:29:14,640
how

574
00:29:14,640 --> 00:29:17,039
can i query it

575
00:29:17,039 --> 00:29:19,039
i can query it by

576
00:29:19,039 --> 00:29:22,240
accessing my local system on port one

577
00:29:22,240 --> 00:29:24,480
two three four five so if i drop

578
00:29:24,480 --> 00:29:25,840
a packet

579
00:29:25,840 --> 00:29:27,679
destined to

580
00:29:27,679 --> 00:29:30,159
localhost one two three four five this

581
00:29:30,159 --> 00:29:31,840
will magically

582
00:29:31,840 --> 00:29:32,640
go

583
00:29:32,640 --> 00:29:33,440
to

584
00:29:33,440 --> 00:29:37,360
sysadmin service port 555.

585
00:29:37,360 --> 00:29:40,760
let's do this

586
00:29:40,960 --> 00:29:42,720
so i'm going to use ncat because it's

587
00:29:42,720 --> 00:29:45,919
the superior alternative to nc which is

588
00:29:45,919 --> 00:29:48,559
uh netcat which is the old

589
00:29:48,559 --> 00:29:51,120
uh venerable at this point

590
00:29:51,120 --> 00:29:54,559
uh tcp swiss army knife so i'm going to

591
00:29:54,559 --> 00:29:56,440
end cap

592
00:29:56,440 --> 00:29:59,039
127.0.0.1 which is localhost and i'm

593
00:29:59,039 --> 00:30:01,039
going to do the port one two three four

594
00:30:01,039 --> 00:30:02,080
five

595
00:30:02,080 --> 00:30:04,799
this will magically

596
00:30:04,799 --> 00:30:06,640
enter the tunnel

597
00:30:06,640 --> 00:30:10,720
go through pivot box encrypted by ssh

598
00:30:10,720 --> 00:30:14,320
get out at the other side of pivot box

599
00:30:14,320 --> 00:30:17,360
and go to port 5555 and i'll get the

600
00:30:17,360 --> 00:30:19,679
flag and this is what happened

601
00:30:19,679 --> 00:30:21,360
congratulations

602
00:30:21,360 --> 00:30:23,200
you pivoted

603
00:30:23,200 --> 00:30:25,760
so imagine

604
00:30:25,760 --> 00:30:28,559
all the firewall bypass capabilities

605
00:30:28,559 --> 00:30:30,960
that you have once you master ssh

606
00:30:30,960 --> 00:30:34,159
tunnels so it's incredible

607
00:30:34,159 --> 00:30:37,360
you can do so much shadow i.t with ssh

608
00:30:37,360 --> 00:30:39,840
tunnels

609
00:30:39,840 --> 00:30:43,039
and there's even a concept in ssh where

610
00:30:43,039 --> 00:30:45,120
it's called proxy command

611
00:30:45,120 --> 00:30:48,559
where you can ssh into a box behind an

612
00:30:48,559 --> 00:30:53,440
ssh tunnel ssh is very very powerful

613
00:30:53,440 --> 00:30:56,159
and so let's try to put that

614
00:30:56,159 --> 00:30:58,240
password in

615
00:30:58,240 --> 00:31:00,000
and we got it

616
00:31:00,000 --> 00:31:00,880
so

617
00:31:00,880 --> 00:31:05,000
let's look at how we're doing

618
00:31:05,600 --> 00:31:08,080
this is you know again

619
00:31:08,080 --> 00:31:09,600
very hard

620
00:31:09,600 --> 00:31:10,480
to

621
00:31:10,480 --> 00:31:13,200
know where everyone is at right so i'm

622
00:31:13,200 --> 00:31:16,000
taking it really slow maybe too slow for

623
00:31:16,000 --> 00:31:17,840
some of you maybe too fast for others

624
00:31:17,840 --> 00:31:19,919
right trying to do my best

625
00:31:19,919 --> 00:31:21,600
trying to be respectful of everyone's

626
00:31:21,600 --> 00:31:22,480
time

627
00:31:22,480 --> 00:31:24,320
so we got six solve for the first one

628
00:31:24,320 --> 00:31:27,039
which is very good

629
00:31:27,120 --> 00:31:29,120
and then the last one we're like oh five

630
00:31:29,120 --> 00:31:30,799
solves okay so we're doing we're doing

631
00:31:30,799 --> 00:31:34,399
great all right so

632
00:31:34,399 --> 00:31:37,600
this the pivot box service

633
00:31:37,600 --> 00:31:40,399
is useful so keep it close

634
00:31:40,399 --> 00:31:44,399
because once you do xss attack

635
00:31:44,399 --> 00:31:47,440
on other people on the internet

636
00:31:47,440 --> 00:31:50,320
you need them to be able to exfiltrate

637
00:31:50,320 --> 00:31:53,200
their secret to a server somewhere

638
00:31:53,200 --> 00:31:55,600
their browser will want to talk to

639
00:31:55,600 --> 00:31:58,159
something and you need something to

640
00:31:58,159 --> 00:32:00,640
listen there so don't forget that system

641
00:32:00,640 --> 00:32:03,600
we're going to use it for the last

642
00:32:03,600 --> 00:32:06,880
uh challenge of the web track

643
00:32:06,880 --> 00:32:09,840
now let's look at the web track

644
00:32:09,840 --> 00:32:11,679
or you know what since it's a beginning

645
00:32:11,679 --> 00:32:13,039
of a new track

646
00:32:13,039 --> 00:32:14,480
we can

647
00:32:14,480 --> 00:32:15,279
uh

648
00:32:15,279 --> 00:32:16,960
we can take a

649
00:32:16,960 --> 00:32:20,000
you know couple minutes

650
00:32:20,720 --> 00:32:23,279
i'll i'll ask the people on how they

651
00:32:23,279 --> 00:32:24,080
feel

652
00:32:24,080 --> 00:32:27,399
be right back

653
00:32:31,960 --> 00:32:35,160
[Music]

654
00:32:38,640 --> 00:32:41,640
okay

655
00:32:51,000 --> 00:32:54,230
[Music]

656
00:32:59,760 --> 00:33:02,760
um

657
00:33:16,880 --> 00:33:19,880
foreign

658
00:33:47,440 --> 00:33:50,440
uh

659
00:34:37,679 --> 00:34:40,679
yes

660
00:35:02,880 --> 00:35:05,880
okay

661
00:35:35,200 --> 00:35:38,279
all right

662
00:35:53,839 --> 00:35:56,839
okay

663
00:36:02,400 --> 00:36:05,400
foreign

664
00:36:22,160 --> 00:36:25,160
oh

665
00:36:25,940 --> 00:36:27,280
[Music]

666
00:36:27,280 --> 00:36:30,599
okay so

667
00:36:49,520 --> 00:36:51,040
all right

668
00:36:51,040 --> 00:36:53,359
so

669
00:36:53,359 --> 00:36:56,240
for the web

670
00:36:58,000 --> 00:37:00,640
for the for the web one

671
00:37:00,640 --> 00:37:01,680
uh

672
00:37:01,680 --> 00:37:03,920
the the first one is a

673
00:37:03,920 --> 00:37:07,359
true classic of all ctfs that are easy

674
00:37:07,359 --> 00:37:10,160
to have access to

675
00:37:10,160 --> 00:37:12,560
and it's

676
00:37:12,560 --> 00:37:15,599
use the source

677
00:37:17,760 --> 00:37:20,320
so we're going to open it

678
00:37:20,320 --> 00:37:23,119
and then what we have is a web page

679
00:37:23,119 --> 00:37:25,599
and we're like what i don't know admin

680
00:37:25,599 --> 00:37:26,880
and min

681
00:37:26,880 --> 00:37:28,640
login failed

682
00:37:28,640 --> 00:37:32,000
uh user user

683
00:37:32,480 --> 00:37:35,119
login failed okay i don't know what can

684
00:37:35,119 --> 00:37:38,800
i do i can try to look at the source

685
00:37:38,800 --> 00:37:42,000
and if i do this

686
00:37:42,000 --> 00:37:46,160
what do i i have i have oh

687
00:37:48,720 --> 00:37:50,480
okay use the source

688
00:37:50,480 --> 00:37:53,200
not even using my own advice all right

689
00:37:53,200 --> 00:37:56,160
so you know

690
00:37:56,240 --> 00:37:59,599
web pages have html code and that code

691
00:37:59,599 --> 00:38:01,200
is all open

692
00:38:01,200 --> 00:38:03,839
no matter how complicated it can be to

693
00:38:03,839 --> 00:38:06,800
look at it nowadays it's still all there

694
00:38:06,800 --> 00:38:08,880
right it's still instructions given to

695
00:38:08,880 --> 00:38:12,640
the browser that are readily available

696
00:38:12,720 --> 00:38:13,839
so

697
00:38:13,839 --> 00:38:16,880
in that code there can be comments there

698
00:38:16,880 --> 00:38:18,560
often is comments

699
00:38:18,560 --> 00:38:21,760
so when you see an advice or a a joke

700
00:38:21,760 --> 00:38:25,280
around using the source

701
00:38:25,680 --> 00:38:27,040
the uh

702
00:38:27,040 --> 00:38:29,280
power

703
00:38:29,280 --> 00:38:31,760
then it's just look at the at the source

704
00:38:31,760 --> 00:38:33,200
and sometimes

705
00:38:33,200 --> 00:38:36,320
it can be really misleading like for

706
00:38:36,320 --> 00:38:38,079
example a classic

707
00:38:38,079 --> 00:38:39,680
of just

708
00:38:39,680 --> 00:38:42,800
a twist on that use the source trick is

709
00:38:42,800 --> 00:38:46,720
you put a thousand empty lines

710
00:38:46,720 --> 00:38:49,440
and then the the password or the flag is

711
00:38:49,440 --> 00:38:51,280
there right so if there's a thousand

712
00:38:51,280 --> 00:38:52,880
empty lines you don't see it in the

713
00:38:52,880 --> 00:38:54,800
first screen you see nothing but then

714
00:38:54,800 --> 00:38:56,960
you realize oh there is a scroll bar and

715
00:38:56,960 --> 00:38:58,640
then you scroll at the bottom and you

716
00:38:58,640 --> 00:39:01,119
have your flag so you know

717
00:39:01,119 --> 00:39:03,760
baby steps

718
00:39:03,760 --> 00:39:06,320
but so it says if needed

719
00:39:06,320 --> 00:39:09,760
support account is support welcome too

720
00:39:09,760 --> 00:39:11,040
so

721
00:39:11,040 --> 00:39:14,320
we're gonna do support

722
00:39:14,320 --> 00:39:15,680
welcome to

723
00:39:15,680 --> 00:39:17,359
login hey

724
00:39:17,359 --> 00:39:19,359
hidden account activated here's your

725
00:39:19,359 --> 00:39:20,240
flag

726
00:39:20,240 --> 00:39:21,520
now

727
00:39:21,520 --> 00:39:24,240
it's it's really simple right it's 101

728
00:39:24,240 --> 00:39:26,480
but the reason why it needs to be

729
00:39:26,480 --> 00:39:31,040
explained is that sometimes

730
00:39:31,040 --> 00:39:33,839
there's a hint in the source and then

731
00:39:33,839 --> 00:39:35,839
you're you're told

732
00:39:35,839 --> 00:39:37,440
the

733
00:39:37,440 --> 00:39:39,119
you're hinted towards the right

734
00:39:39,119 --> 00:39:41,440
direction so it's always something to

735
00:39:41,440 --> 00:39:44,000
look at and a lot of other places where

736
00:39:44,000 --> 00:39:46,599
people will hide hints include

737
00:39:46,599 --> 00:39:50,240
robots.txt and stuff like that common

738
00:39:50,240 --> 00:39:51,040
uh

739
00:39:51,040 --> 00:39:56,400
http stuff hidden behind web servers

740
00:39:56,400 --> 00:39:58,400
so we got this

741
00:39:58,400 --> 00:40:01,440
all right so the the to to view the

742
00:40:01,440 --> 00:40:02,720
source

743
00:40:02,720 --> 00:40:06,879
uh you can use uh

744
00:40:07,520 --> 00:40:11,839
i think zoom is messing up with my

745
00:40:12,400 --> 00:40:15,359
all right so you can use the view source

746
00:40:15,359 --> 00:40:18,000
like this control u but the end spec

747
00:40:18,000 --> 00:40:20,079
mode is pretty powerful and it's

748
00:40:20,079 --> 00:40:22,079
something we're gonna use more and more

749
00:40:22,079 --> 00:40:23,200
as we

750
00:40:23,200 --> 00:40:26,000
as we go the through the web track

751
00:40:26,000 --> 00:40:29,359
so and spec mode has a source component

752
00:40:29,359 --> 00:40:32,880
but with a nice uh

753
00:40:33,280 --> 00:40:36,000
navigation mechanism

754
00:40:36,000 --> 00:40:38,000
you can and then there's the network

755
00:40:38,000 --> 00:40:39,760
where you'll see a queries from your

756
00:40:39,760 --> 00:40:40,960
browser

757
00:40:40,960 --> 00:40:43,680
so it's all uh good stuff

758
00:40:43,680 --> 00:40:45,280
oh and you can see that i'm i'm using

759
00:40:45,280 --> 00:40:47,040
like a

760
00:40:47,040 --> 00:40:51,040
preset to simulate a phone

761
00:40:51,040 --> 00:40:52,880
okay

762
00:40:52,880 --> 00:40:55,359
all right so

763
00:40:55,359 --> 00:40:57,359
first one quite easy

764
00:40:57,359 --> 00:40:59,200
view source

765
00:40:59,200 --> 00:41:02,319
you have a clear text username password

766
00:41:02,319 --> 00:41:03,599
you can get in

767
00:41:03,599 --> 00:41:06,400
now let's move on to the sql

768
00:41:06,400 --> 00:41:07,280
okay

769
00:41:07,280 --> 00:41:09,839
so sql what's going on here i'm gonna do

770
00:41:09,839 --> 00:41:12,319
test right search for test

771
00:41:12,319 --> 00:41:14,319
now this is a

772
00:41:14,319 --> 00:41:17,359
made-up challenge right but what what is

773
00:41:17,359 --> 00:41:20,480
key in understanding sql injection is

774
00:41:20,480 --> 00:41:21,280
that

775
00:41:21,280 --> 00:41:23,680
it goes into

776
00:41:23,680 --> 00:41:25,200
a database

777
00:41:25,200 --> 00:41:28,079
and sql is a programming language

778
00:41:28,079 --> 00:41:30,079
so it goes

779
00:41:30,079 --> 00:41:33,440
in a something

780
00:41:33,440 --> 00:41:35,839
that is a programming language so sin it

781
00:41:35,839 --> 00:41:38,720
must be syntactically accurate

782
00:41:38,720 --> 00:41:41,040
and you must you must think like the

783
00:41:41,040 --> 00:41:43,599
programmer so now to help us understand

784
00:41:43,599 --> 00:41:44,720
all this

785
00:41:44,720 --> 00:41:47,839
we show the query in this challenge so

786
00:41:47,839 --> 00:41:50,079
basically when i wrote test in the

787
00:41:50,079 --> 00:41:52,640
search here what happened is there was a

788
00:41:52,640 --> 00:41:55,599
select star from items where

789
00:41:55,599 --> 00:41:57,119
name like

790
00:41:57,119 --> 00:41:59,040
and then test is there

791
00:41:59,040 --> 00:42:01,680
so we can say oh okay so this is where

792
00:42:01,680 --> 00:42:05,200
it's going all right i

793
00:42:05,200 --> 00:42:08,640
imagine that the flag will be in the

794
00:42:08,640 --> 00:42:09,599
table

795
00:42:09,599 --> 00:42:12,960
that it's querying already so i'm gonna

796
00:42:12,960 --> 00:42:17,079
try to look for a flag

797
00:42:18,319 --> 00:42:19,200
ah

798
00:42:19,200 --> 00:42:21,200
so someone in the system is making

799
00:42:21,200 --> 00:42:24,240
messing with me the in that database

800
00:42:24,240 --> 00:42:27,280
there is already a a

801
00:42:27,280 --> 00:42:28,960
a

802
00:42:28,960 --> 00:42:33,359
uh an item in the items table that has

803
00:42:33,359 --> 00:42:36,319
name flag but the description is nice

804
00:42:36,319 --> 00:42:37,280
try

805
00:42:37,280 --> 00:42:38,079
so

806
00:42:38,079 --> 00:42:40,160
someone's messing with me right but this

807
00:42:40,160 --> 00:42:43,200
was not sql injection so what is sql

808
00:42:43,200 --> 00:42:47,040
injection is when you're trying to mess

809
00:42:47,040 --> 00:42:50,319
up that query so what defines

810
00:42:50,319 --> 00:42:51,760
the

811
00:42:51,760 --> 00:42:53,200
boundaries

812
00:42:53,200 --> 00:42:54,480
of

813
00:42:54,480 --> 00:42:57,680
tokens in an sql statement

814
00:42:57,680 --> 00:42:59,520
in this case are

815
00:42:59,520 --> 00:43:00,800
double quotes

816
00:43:00,800 --> 00:43:03,839
so if the web the person who programmed

817
00:43:03,839 --> 00:43:05,200
this webpage

818
00:43:05,200 --> 00:43:07,680
didn't account that i can put double

819
00:43:07,680 --> 00:43:09,040
quotes

820
00:43:09,040 --> 00:43:11,839
then he has a problem right so i'm gonna

821
00:43:11,839 --> 00:43:15,279
try putting in double quotes

822
00:43:15,599 --> 00:43:16,960
oh

823
00:43:16,960 --> 00:43:20,319
something up now why did did the

824
00:43:20,319 --> 00:43:21,520
page broke

825
00:43:21,520 --> 00:43:23,359
let's think about it

826
00:43:23,359 --> 00:43:24,319
well

827
00:43:24,319 --> 00:43:26,560
let's replace in our head

828
00:43:26,560 --> 00:43:29,040
flag with a double quote so what we have

829
00:43:29,040 --> 00:43:30,640
is like

830
00:43:30,640 --> 00:43:33,280
double quote percent

831
00:43:33,280 --> 00:43:34,560
double quote

832
00:43:34,560 --> 00:43:36,880
percent double quote this is invalid

833
00:43:36,880 --> 00:43:40,160
syntax so of course the sql lexer when

834
00:43:40,160 --> 00:43:43,119
it arrives in the sql engine

835
00:43:43,119 --> 00:43:45,359
it says

836
00:43:45,359 --> 00:43:48,400
this is not sql man you i blew up

837
00:43:48,400 --> 00:43:51,599
and php was made to fail uh in this case

838
00:43:51,599 --> 00:43:54,480
i'm not ignoring errors i am

839
00:43:54,480 --> 00:43:56,720
uh bubbling up errors

840
00:43:56,720 --> 00:43:59,839
so let's let's try let's start

841
00:43:59,839 --> 00:44:01,280
by

842
00:44:01,280 --> 00:44:03,359
thinking okay but how

843
00:44:03,359 --> 00:44:06,000
can we make it legit okay

844
00:44:06,000 --> 00:44:09,200
so let's put double quote

845
00:44:09,200 --> 00:44:11,040
and then put

846
00:44:11,040 --> 00:44:12,960
or

847
00:44:12,960 --> 00:44:15,520
and then

848
00:44:16,240 --> 00:44:19,439
let's put name

849
00:44:20,079 --> 00:44:21,920
i'm i'm trying to think okay i don't

850
00:44:21,920 --> 00:44:24,400
want to spoil the flag too fast right so

851
00:44:24,400 --> 00:44:26,720
i'm going to put like a b c

852
00:44:26,720 --> 00:44:29,200
and then or name and then i'm going to

853
00:44:29,200 --> 00:44:30,960
finish because the thing is we you need

854
00:44:30,960 --> 00:44:32,560
we need to finish that double quote

855
00:44:32,560 --> 00:44:34,720
correctly for it to pass right

856
00:44:34,720 --> 00:44:37,920
so or name equals and then i'm gonna do

857
00:44:37,920 --> 00:44:40,640
abc and then leave it like that right so

858
00:44:40,640 --> 00:44:42,319
what does this look like

859
00:44:42,319 --> 00:44:45,760
so this works and and let's look at why

860
00:44:45,760 --> 00:44:48,240
it works but we don't get the flag right

861
00:44:48,240 --> 00:44:52,400
so it says like double quote percent abc

862
00:44:52,400 --> 00:44:55,440
double quote or name equal

863
00:44:55,440 --> 00:44:59,040
double quote abc percent double

864
00:44:59,040 --> 00:45:03,280
so it's syntax and syntactically valid

865
00:45:03,280 --> 00:45:06,079
but it doesn't yield the result that

866
00:45:06,079 --> 00:45:08,000
we're looking for

867
00:45:08,000 --> 00:45:10,960
now what would

868
00:45:12,319 --> 00:45:14,319
all right so

869
00:45:14,319 --> 00:45:17,839
the where clause is using boolean logic

870
00:45:17,839 --> 00:45:21,119
okay so if we can do or we can do or

871
00:45:21,119 --> 00:45:23,280
true so it's like

872
00:45:23,280 --> 00:45:27,200
where name like false or true

873
00:45:27,200 --> 00:45:28,960
then if it's true

874
00:45:28,960 --> 00:45:33,359
all rows are gonna be evaluated to true

875
00:45:33,359 --> 00:45:35,040
which means that i will get in my

876
00:45:35,040 --> 00:45:37,920
results set all rows

877
00:45:37,920 --> 00:45:40,480
so we can do then okay let's do a true

878
00:45:40,480 --> 00:45:42,079
statement so we're gonna close that

879
00:45:42,079 --> 00:45:44,160
bracket here

880
00:45:44,160 --> 00:45:47,359
and we're gonna do or and then

881
00:45:47,359 --> 00:45:49,359
the the classic

882
00:45:49,359 --> 00:45:52,560
true statement that you see in every

883
00:45:52,560 --> 00:45:55,359
joke online about s transaction is or

884
00:45:55,359 --> 00:45:58,240
one equals one okay but this could be

885
00:45:58,240 --> 00:46:01,280
simplified to one one is a positive

886
00:46:01,280 --> 00:46:03,839
value it's a true true value when

887
00:46:03,839 --> 00:46:06,640
evaluated so it's always

888
00:46:06,640 --> 00:46:08,160
you guys should come up front it's very

889
00:46:08,160 --> 00:46:11,280
loud you'll not hear anything uh one run

890
00:46:11,280 --> 00:46:12,880
one mirror or one or you can sit

891
00:46:12,880 --> 00:46:14,400
together as you want

892
00:46:14,400 --> 00:46:16,160
um

893
00:46:16,160 --> 00:46:17,599
but so

894
00:46:17,599 --> 00:46:19,520
so we'll do the one equals one because

895
00:46:19,520 --> 00:46:22,640
you know it's the xkcd joke and stuff

896
00:46:22,640 --> 00:46:24,960
but people should do r1 and i'm

897
00:46:24,960 --> 00:46:26,240
explaining why

898
00:46:26,240 --> 00:46:29,200
one equals one is like in every

899
00:46:29,200 --> 00:46:32,160
filter out there right so if you do r1

900
00:46:32,160 --> 00:46:34,319
it's harder to filter one because it

901
00:46:34,319 --> 00:46:36,240
could be a legit value input by a

902
00:46:36,240 --> 00:46:39,439
customer yes

903
00:46:41,440 --> 00:46:43,839
come on

904
00:46:45,839 --> 00:46:48,240
there are many ways to bypass that

905
00:46:48,240 --> 00:46:50,720
challenge many ways

906
00:46:50,720 --> 00:46:52,640
so i'm gonna show you one but now i'm

907
00:46:52,640 --> 00:46:54,640
teaching sql injection so we'll do we'll

908
00:46:54,640 --> 00:46:56,400
do the legit first

909
00:46:56,400 --> 00:47:00,640
but then i there's one you're close

910
00:47:02,480 --> 00:47:03,839
semicolon probably doesn't work but

911
00:47:03,839 --> 00:47:07,520
there's a there's one simpler that works

912
00:47:07,520 --> 00:47:08,400
and

913
00:47:08,400 --> 00:47:10,640
and you have everything

914
00:47:10,640 --> 00:47:14,319
semicolon works okay

915
00:47:14,319 --> 00:47:17,520
no but i i don't want to spoil it man no

916
00:47:17,520 --> 00:47:19,520
we'll get there we'll get there

917
00:47:19,520 --> 00:47:21,839
but so okay let's do or one equal one

918
00:47:21,839 --> 00:47:24,079
but then i'm too in a hurry like i'm too

919
00:47:24,079 --> 00:47:26,800
excited i do r1 equal one and i'll do

920
00:47:26,800 --> 00:47:28,960
i'll do search right away oh error

921
00:47:28,960 --> 00:47:31,760
why is that now since we have the query

922
00:47:31,760 --> 00:47:34,480
it's easy for us to answer that but

923
00:47:34,480 --> 00:47:36,559
imagine when you're doing ctf you don't

924
00:47:36,559 --> 00:47:39,200
have the query output in your face so

925
00:47:39,200 --> 00:47:41,200
oftentimes you need to go

926
00:47:41,200 --> 00:47:44,319
in an actual sql engine and try the

927
00:47:44,319 --> 00:47:45,760
stuff right

928
00:47:45,760 --> 00:47:47,599
and and we could do that if we want i

929
00:47:47,599 --> 00:47:50,319
don't know how i i think i'm slow so i

930
00:47:50,319 --> 00:47:51,839
don't do i won't do this but you have

931
00:47:51,839 --> 00:47:53,359
sql light on your system where you can

932
00:47:53,359 --> 00:47:55,200
do that but so

933
00:47:55,200 --> 00:47:57,599
one of the important tricks

934
00:47:57,599 --> 00:47:58,800
is to know

935
00:47:58,800 --> 00:48:01,440
how to comment in sql

936
00:48:01,440 --> 00:48:03,839
so if you comment the rest of the

937
00:48:03,839 --> 00:48:07,520
sentence you don't you you can avoid to

938
00:48:07,520 --> 00:48:10,800
having it syntactically valid so comment

939
00:48:10,800 --> 00:48:14,960
in mysql and and many sql databases is

940
00:48:14,960 --> 00:48:18,800
two dash followed by a space

941
00:48:18,800 --> 00:48:20,480
so now i'm doing

942
00:48:20,480 --> 00:48:22,319
closing the first part of the where

943
00:48:22,319 --> 00:48:23,359
clause

944
00:48:23,359 --> 00:48:26,960
saying or true value and then the rest

945
00:48:26,960 --> 00:48:29,760
we ignore it's a comment for programmers

946
00:48:29,760 --> 00:48:31,119
you know

947
00:48:31,119 --> 00:48:32,559
let's try that

948
00:48:32,559 --> 00:48:35,440
and boom here we go we look at the like

949
00:48:35,440 --> 00:48:37,599
so it's like everything

950
00:48:37,599 --> 00:48:40,960
or one equal one and the rest is ignored

951
00:48:40,960 --> 00:48:43,839
by the sql database the sql engine and

952
00:48:43,839 --> 00:48:46,079
so now we have like

953
00:48:46,079 --> 00:48:48,000
congratulations

954
00:48:48,000 --> 00:48:51,119
and then flag equals no no and we

955
00:48:51,119 --> 00:48:53,359
realized that we had a little bit of of

956
00:48:53,359 --> 00:48:54,400
a

957
00:48:54,400 --> 00:48:56,319
trolling material in there like if you

958
00:48:56,319 --> 00:48:58,720
put just one equal one you are onto

959
00:48:58,720 --> 00:49:02,079
something but so our flag is here now

960
00:49:02,079 --> 00:49:03,680
let's get

961
00:49:03,680 --> 00:49:05,280
let's get creative

962
00:49:05,280 --> 00:49:07,599
as my friend just suggested

963
00:49:07,599 --> 00:49:11,599
so i i never expected comma semicolon to

964
00:49:11,599 --> 00:49:14,599
work

965
00:49:33,680 --> 00:49:36,078
what's up

966
00:49:38,640 --> 00:49:40,319
so

967
00:49:40,319 --> 00:49:42,960
a person sign in this car in the like

968
00:49:42,960 --> 00:49:44,400
class is

969
00:49:44,400 --> 00:49:46,720
a wild card it's like star in most

970
00:49:46,720 --> 00:49:48,559
things i don't know the old farts who

971
00:49:48,559 --> 00:49:50,880
design sql decided back then that it was

972
00:49:50,880 --> 00:49:53,200
a different character it's not star but

973
00:49:53,200 --> 00:49:54,400
so

974
00:49:54,400 --> 00:49:56,240
here's the behavior and i i'm getting

975
00:49:56,240 --> 00:49:57,920
back at you regarding the semicolon

976
00:49:57,920 --> 00:49:59,040
because i don't understand what's going

977
00:49:59,040 --> 00:50:03,119
on but if if if we do person sign

978
00:50:03,119 --> 00:50:04,480
and we search

979
00:50:04,480 --> 00:50:06,319
it's gonna work right but you see it

980
00:50:06,319 --> 00:50:08,720
here it's here it's showing up so you

981
00:50:08,720 --> 00:50:11,359
you put in person in search when you

982
00:50:11,359 --> 00:50:13,280
look at the query the person that you've

983
00:50:13,280 --> 00:50:14,160
written

984
00:50:14,160 --> 00:50:17,119
is in the query and basically why does

985
00:50:17,119 --> 00:50:19,520
it work it's because this query is

986
00:50:19,520 --> 00:50:20,640
i want

987
00:50:20,640 --> 00:50:22,319
anything anything anything

988
00:50:22,319 --> 00:50:25,359
and it works right now the behavior of

989
00:50:25,359 --> 00:50:26,559
semicolon

990
00:50:26,559 --> 00:50:27,839
troubles me

991
00:50:27,839 --> 00:50:30,240
and i'll show you why because

992
00:50:30,240 --> 00:50:33,359
it's not showing in the query so it's

993
00:50:33,359 --> 00:50:34,880
probably not

994
00:50:34,880 --> 00:50:38,160
as the sql engine that that

995
00:50:38,160 --> 00:50:40,480
gobbles it it's probably something that

996
00:50:40,480 --> 00:50:43,599
php is doing

997
00:50:45,040 --> 00:50:47,119
yeah yeah you can do that but it would

998
00:50:47,119 --> 00:50:49,760
show we would see it because what what

999
00:50:49,760 --> 00:50:52,720
is displayed is what is sent to the sql

1000
00:50:52,720 --> 00:50:53,599
engine

1001
00:50:53,599 --> 00:50:55,280
so so i don't know i don't know what's

1002
00:50:55,280 --> 00:50:56,960
going on but it works you know what

1003
00:50:56,960 --> 00:50:58,800
let's let's take a look at the source

1004
00:50:58,800 --> 00:50:59,920
maybe

1005
00:50:59,920 --> 00:51:01,760
maybe it is showing

1006
00:51:01,760 --> 00:51:05,160
no it's not

1007
00:51:08,000 --> 00:51:11,000
yes

1008
00:51:30,640 --> 00:51:33,359
it could it could be but i i i

1009
00:51:33,359 --> 00:51:35,760
i would need to be convinced uh i'm not

1010
00:51:35,760 --> 00:51:38,880
100 on this one and i think like right

1011
00:51:38,880 --> 00:51:40,400
now i think about it i think there's a

1012
00:51:40,400 --> 00:51:42,000
bug in this challenge if i put nothing

1013
00:51:42,000 --> 00:51:43,599
is there an error

1014
00:51:43,599 --> 00:51:46,160
ah i validated the case where there is

1015
00:51:46,160 --> 00:51:48,960
nothing because because then let's say

1016
00:51:48,960 --> 00:51:51,920
that i wouldn't have put uh

1017
00:51:51,920 --> 00:51:52,720
uh

1018
00:51:52,720 --> 00:51:54,720
no this case

1019
00:51:54,720 --> 00:51:58,558
the query would be percent

1020
00:51:59,359 --> 00:52:02,359
oliver

1021
00:52:13,520 --> 00:52:16,720
yeah yeah but why is the semicolon isn't

1022
00:52:16,720 --> 00:52:18,559
in the query right where does it

1023
00:52:18,559 --> 00:52:21,040
disappear

1024
00:52:29,119 --> 00:52:31,200
it's still it's still it still should be

1025
00:52:31,200 --> 00:52:34,720
string concatenation in inside the php

1026
00:52:34,720 --> 00:52:36,319
variable

1027
00:52:36,319 --> 00:52:38,960
okay so okay that let's look at the

1028
00:52:38,960 --> 00:52:41,359
inspect okay let's look at this

1029
00:52:41,359 --> 00:52:43,920
from the inspect console let's look at

1030
00:52:43,920 --> 00:52:46,000
what is sent by the browser when i put a

1031
00:52:46,000 --> 00:52:48,640
semicolon

1032
00:52:49,520 --> 00:52:50,720
whoops

1033
00:52:50,720 --> 00:52:53,359
all right

1034
00:52:53,440 --> 00:52:54,720
we are

1035
00:52:54,720 --> 00:52:57,040
sending payload we are sending a

1036
00:52:57,040 --> 00:52:59,200
semicolon so this is

1037
00:52:59,200 --> 00:53:03,440
url encoded as percent b3b which it

1038
00:53:03,440 --> 00:53:07,680
should be url decoded by php

1039
00:53:07,680 --> 00:53:10,079
then injected in a variable that is

1040
00:53:10,079 --> 00:53:12,640
string concatenated

1041
00:53:12,640 --> 00:53:15,040
i still i still for me i still can't

1042
00:53:15,040 --> 00:53:17,680
explain it i'm still a bit dissatisfied

1043
00:53:17,680 --> 00:53:18,800
but uh

1044
00:53:18,800 --> 00:53:22,000
i'm sure there's an explanation

1045
00:53:25,599 --> 00:53:29,440
but so so let's do uh

1046
00:53:29,440 --> 00:53:32,079
let's do let's take the f here right so

1047
00:53:32,079 --> 00:53:34,960
if we had the proper f it will work

1048
00:53:34,960 --> 00:53:39,280
so let's do the f and then semicolon

1049
00:53:39,280 --> 00:53:42,400
see what it does

1050
00:53:42,400 --> 00:53:46,319
semicolon really disappears

1051
00:53:48,000 --> 00:53:51,440
ah oh my g sucks

1052
00:53:51,440 --> 00:53:53,680
that that's my mistake though so i i

1053
00:53:53,680 --> 00:53:56,480
tried to use utf-8 characters but there

1054
00:53:56,480 --> 00:53:59,440
is a collation in sql where

1055
00:53:59,440 --> 00:54:01,359
similar characters will be interpreted

1056
00:54:01,359 --> 00:54:04,160
differently anyway we dug deep and you

1057
00:54:04,160 --> 00:54:07,040
can see how it can be you know come more

1058
00:54:07,040 --> 00:54:08,559
complicated

1059
00:54:08,559 --> 00:54:12,000
but let's move on with uh our next one

1060
00:54:12,000 --> 00:54:14,800
which is the self xss any questions on

1061
00:54:14,800 --> 00:54:17,920
the sql injection

1062
00:54:18,240 --> 00:54:19,839
you can see how

1063
00:54:19,839 --> 00:54:22,640
uh once you understand what's happening

1064
00:54:22,640 --> 00:54:24,480
it's kind of simple but it gets

1065
00:54:24,480 --> 00:54:27,440
complicated when you try to exploit it

1066
00:54:27,440 --> 00:54:29,520
because most of the challenges will not

1067
00:54:29,520 --> 00:54:33,119
be the simplest cases

1068
00:54:33,119 --> 00:54:34,559
you really need to think like a

1069
00:54:34,559 --> 00:54:36,880
programmer basically

1070
00:54:36,880 --> 00:54:38,799
all right oh a lot of people saw the

1071
00:54:38,799 --> 00:54:40,799
suffix success that's good

1072
00:54:40,799 --> 00:54:43,040
okay so what's the difference between

1073
00:54:43,040 --> 00:54:44,559
what we had before

1074
00:54:44,559 --> 00:54:47,680
and the self-excess

1075
00:54:48,400 --> 00:54:50,799
boom

1076
00:54:50,799 --> 00:54:52,799
okay so we have a search very similar

1077
00:54:52,799 --> 00:54:54,480
looking to the sql injection so we'll do

1078
00:54:54,480 --> 00:54:57,119
right away or one equals one right

1079
00:54:57,119 --> 00:54:58,240
and then

1080
00:54:58,240 --> 00:55:00,160
this is not the sql injection challenge

1081
00:55:00,160 --> 00:55:02,160
but what's different here

1082
00:55:02,160 --> 00:55:03,680
is

1083
00:55:03,680 --> 00:55:06,640
our output is there in the web page

1084
00:55:06,640 --> 00:55:08,799
now

1085
00:55:08,799 --> 00:55:12,319
being able to modify a web page

1086
00:55:12,319 --> 00:55:15,359
is something that we know and we deal

1087
00:55:15,359 --> 00:55:18,160
with the web since ages right we're

1088
00:55:18,160 --> 00:55:20,799
really familiar with that

1089
00:55:20,799 --> 00:55:22,960
but what's the attack behind that well

1090
00:55:22,960 --> 00:55:24,559
the attack is

1091
00:55:24,559 --> 00:55:26,720
if i can inject

1092
00:55:26,720 --> 00:55:28,160
javascript

1093
00:55:28,160 --> 00:55:31,440
i can then have your browser do

1094
00:55:31,440 --> 00:55:32,880
something

1095
00:55:32,880 --> 00:55:35,119
as a third party so okay i'll do a

1096
00:55:35,119 --> 00:55:37,520
diagram

1097
00:55:41,599 --> 00:55:44,799
so we'll have like the user

1098
00:55:44,799 --> 00:55:47,839
the let's say attacker

1099
00:55:47,839 --> 00:55:50,078
then

1100
00:55:50,640 --> 00:55:53,279
the victim

1101
00:55:54,640 --> 00:55:57,839
and then the web server

1102
00:55:58,079 --> 00:56:00,319
so

1103
00:56:00,480 --> 00:56:02,559
when we were doing nothing on the

1104
00:56:02,559 --> 00:56:05,680
internet it didn't matter xss people i i

1105
00:56:05,680 --> 00:56:08,319
was one like in the 90s downplaying the

1106
00:56:08,319 --> 00:56:10,480
importance of the of the vulnerability

1107
00:56:10,480 --> 00:56:12,960
even in early 2000s i was like no one

1108
00:56:12,960 --> 00:56:17,119
gives a about xss it's like

1109
00:56:17,119 --> 00:56:19,839
remote code execution or nothing right

1110
00:56:19,839 --> 00:56:21,920
but then well the thing is that the

1111
00:56:21,920 --> 00:56:23,680
relationship between the web server and

1112
00:56:23,680 --> 00:56:26,319
the victim grew in importance and and a

1113
00:56:26,319 --> 00:56:28,480
lot of trust is behind it right let's

1114
00:56:28,480 --> 00:56:31,040
say the victim is donald trump and the

1115
00:56:31,040 --> 00:56:32,720
web server is twitter

1116
00:56:32,720 --> 00:56:36,079
if i can impersonate donald trump on

1117
00:56:36,079 --> 00:56:38,400
twitter i am pretty powerful not

1118
00:56:38,400 --> 00:56:41,040
right now anymore but

1119
00:56:41,040 --> 00:56:43,200
at some point in the past i would have

1120
00:56:43,200 --> 00:56:45,280
been pretty powerful right but

1121
00:56:45,280 --> 00:56:47,839
this is what

1122
00:56:47,839 --> 00:56:49,520
i would get people to invest in my

1123
00:56:49,520 --> 00:56:50,960
crypto for sure

1124
00:56:50,960 --> 00:56:54,000
so this is basically what xss is

1125
00:56:54,000 --> 00:56:58,400
you are sending a url so let's i i my

1126
00:56:58,400 --> 00:57:00,240
diagrams always start elegant and they

1127
00:57:00,240 --> 00:57:03,520
always become a mess but you uh you know

1128
00:57:03,520 --> 00:57:06,079
you follow along please so you send an

1129
00:57:06,079 --> 00:57:09,599
url no matter how a twitter dm an email

1130
00:57:09,599 --> 00:57:12,640
whatever the per the victim clicks on it

1131
00:57:12,640 --> 00:57:16,799
it's it it is in that url there is code

1132
00:57:16,799 --> 00:57:18,480
injected

1133
00:57:18,480 --> 00:57:19,839
javascript

1134
00:57:19,839 --> 00:57:22,799
that will be sent to the web server and

1135
00:57:22,799 --> 00:57:26,079
interpreted by the your browser and this

1136
00:57:26,079 --> 00:57:28,559
is another thing weird it's like and

1137
00:57:28,559 --> 00:57:32,000
this is a called a reflected xss

1138
00:57:32,000 --> 00:57:35,119
so the victim is carrying the payload to

1139
00:57:35,119 --> 00:57:36,640
the browser

1140
00:57:36,640 --> 00:57:39,760
the web server reflects the payload in

1141
00:57:39,760 --> 00:57:42,640
its page when it comes back to the

1142
00:57:42,640 --> 00:57:43,760
victim

1143
00:57:43,760 --> 00:57:45,680
there is javascript and the browser is

1144
00:57:45,680 --> 00:57:46,400
like

1145
00:57:46,400 --> 00:57:49,440
javascript yeah i'm executing this

1146
00:57:49,440 --> 00:57:53,040
and so this is the attack and now

1147
00:57:53,040 --> 00:57:54,400
we will do a

1148
00:57:54,400 --> 00:57:56,799
simple case where which we call

1149
00:57:56,799 --> 00:57:59,200
self-exercise so exercises this yourself

1150
00:57:59,200 --> 00:58:02,160
exercising yourself it's very for

1151
00:58:02,160 --> 00:58:04,799
demonstration or uh

1152
00:58:04,799 --> 00:58:07,440
academic almost purposes

1153
00:58:07,440 --> 00:58:09,200
but then the real attack is going to be

1154
00:58:09,200 --> 00:58:11,119
on the next one

1155
00:58:11,119 --> 00:58:14,000
uh where we are attacking someone who

1156
00:58:14,000 --> 00:58:16,880
clicks on everything we send his way

1157
00:58:16,880 --> 00:58:17,920
okay

1158
00:58:17,920 --> 00:58:19,599
so the first one

1159
00:58:19,599 --> 00:58:21,760
so in the first scenario we're basically

1160
00:58:21,760 --> 00:58:24,640
attacking ourselves

1161
00:58:24,640 --> 00:58:26,160
but

1162
00:58:26,160 --> 00:58:28,880
what we can see is that

1163
00:58:28,880 --> 00:58:32,319
we are modifying a web page with input

1164
00:58:32,319 --> 00:58:34,480
so this is always the first place you

1165
00:58:34,480 --> 00:58:37,200
start to dig okay

1166
00:58:37,200 --> 00:58:39,680
are they doing any filtering

1167
00:58:39,680 --> 00:58:41,280
well let's find out

1168
00:58:41,280 --> 00:58:44,000
can i do

1169
00:58:45,040 --> 00:58:48,000
this right

1170
00:58:48,400 --> 00:58:52,240
oh look at that the the html bracket

1171
00:58:52,240 --> 00:58:55,520
disappeared but the thing is bold this

1172
00:58:55,520 --> 00:58:58,079
is exactly what i asked

1173
00:58:58,079 --> 00:59:01,200
and you can see here that there are bold

1174
00:59:01,200 --> 00:59:03,200
tags well you might not see i don't know

1175
00:59:03,200 --> 00:59:05,599
how small this is but

1176
00:59:05,599 --> 00:59:08,960
the bolt tags were carried

1177
00:59:08,960 --> 00:59:11,200
this is the beginning of something very

1178
00:59:11,200 --> 00:59:12,400
dangerous

1179
00:59:12,400 --> 00:59:15,440
so what if we do

1180
00:59:15,440 --> 00:59:16,839
put script

1181
00:59:16,839 --> 00:59:18,400
tag

1182
00:59:18,400 --> 00:59:21,599
and then some javascript

1183
00:59:22,640 --> 00:59:24,799
what is going to happen and this is all

1184
00:59:24,799 --> 00:59:27,200
valid so script tag

1185
00:59:27,200 --> 00:59:30,079
javascript valid javascript

1186
00:59:30,079 --> 00:59:32,880
close the script tag then let's let's do

1187
00:59:32,880 --> 00:59:35,040
the search

1188
00:59:35,040 --> 00:59:36,559
oh my god it's written hello and it's

1189
00:59:36,559 --> 00:59:38,720
not written document.write so what

1190
00:59:38,720 --> 00:59:39,680
happened

1191
00:59:39,680 --> 00:59:41,200
what happened is

1192
00:59:41,200 --> 00:59:44,000
we actually had

1193
00:59:44,000 --> 00:59:46,960
the javascript executed

1194
00:59:46,960 --> 00:59:49,440
you we can see that what we have is

1195
00:59:49,440 --> 00:59:51,200
still the script that it's still there

1196
00:59:51,200 --> 00:59:53,839
right the the browser the web server

1197
00:59:53,839 --> 00:59:56,240
reflected all of what i've written to

1198
00:59:56,240 --> 00:59:59,040
the browser the browser when it saw that

1199
00:59:59,040 --> 01:00:02,559
line it did its job it said oh this is

1200
01:00:02,559 --> 01:00:05,119
script i'm i'm executing javascript now

1201
01:00:05,119 --> 01:00:06,480
this is what i do

1202
01:00:06,480 --> 01:00:09,040
and then boom hello is printed and then

1203
01:00:09,040 --> 01:00:12,480
the rest of the page is rendered

1204
01:00:12,799 --> 01:00:14,960
okay let's go back to the challenge

1205
01:00:14,960 --> 01:00:16,799
description now because we pretty much

1206
01:00:16,799 --> 01:00:19,359
have xss

1207
01:00:19,359 --> 01:00:22,160
challenge description says

1208
01:00:22,160 --> 01:00:24,400
your payload must absolutely contain

1209
01:00:24,400 --> 01:00:26,960
alert one and this is just a cheat hack

1210
01:00:26,960 --> 01:00:28,799
so that the web server could send you

1211
01:00:28,799 --> 01:00:29,920
the flag

1212
01:00:29,920 --> 01:00:32,319
it's not really important

1213
01:00:32,319 --> 01:00:33,680
but let's do it

1214
01:00:33,680 --> 01:00:35,520
so script

1215
01:00:35,520 --> 01:00:38,480
either one

1216
01:00:40,839 --> 01:00:42,640
script

1217
01:00:42,640 --> 01:00:45,200
we got the alert so as the page was

1218
01:00:45,200 --> 01:00:46,480
rendered

1219
01:00:46,480 --> 01:00:49,440
it it it stumbled upon

1220
01:00:49,440 --> 01:00:52,480
the play so that the thing is not even

1221
01:00:52,480 --> 01:00:54,559
available in the inspector and spec

1222
01:00:54,559 --> 01:00:56,960
console but we did get the other then

1223
01:00:56,960 --> 01:00:58,880
let's do okay

1224
01:00:58,880 --> 01:01:00,799
and then search for nothing because it

1225
01:01:00,799 --> 01:01:03,040
was just pure javascript nothing was

1226
01:01:03,040 --> 01:01:05,680
output it was all hidden by the browser

1227
01:01:05,680 --> 01:01:07,520
interpreting code

1228
01:01:07,520 --> 01:01:09,599
but you have the flag here right

1229
01:01:09,599 --> 01:01:12,079
congratulations you x assessed yourself

1230
01:01:12,079 --> 01:01:14,640
and we have the flag

1231
01:01:14,640 --> 01:01:15,599
again

1232
01:01:15,599 --> 01:01:17,760
super fake

1233
01:01:17,760 --> 01:01:20,240
to understand next one is the real one

1234
01:01:20,240 --> 01:01:21,599
and it's

1235
01:01:21,599 --> 01:01:23,599
you'll see this step up

1236
01:01:23,599 --> 01:01:25,200
a bit it's probably the hardest

1237
01:01:25,200 --> 01:01:29,598
challenge of ctf 101 is the the next one

1238
01:01:30,160 --> 01:01:33,040
and it's because xss are complicated to

1239
01:01:33,040 --> 01:01:34,880
perform these are complicated attack to

1240
01:01:34,880 --> 01:01:37,880
do

1241
01:01:38,720 --> 01:01:39,839
all right

1242
01:01:39,839 --> 01:01:42,000
so

1243
01:01:42,000 --> 01:01:45,119
xss larry i i should have called him xss

1244
01:01:45,119 --> 01:01:47,119
trump now with the example i made

1245
01:01:47,119 --> 01:01:49,280
earlier but so

1246
01:01:49,280 --> 01:01:54,160
we have the challenge so similar page

1247
01:01:54,480 --> 01:01:58,559
i actually i think it's the same page

1248
01:02:00,240 --> 01:02:01,920
so

1249
01:02:01,920 --> 01:02:05,200
you can submit urls for larry to visit

1250
01:02:05,200 --> 01:02:07,599
here so basically larry is a very

1251
01:02:07,599 --> 01:02:09,280
enthusiastic

1252
01:02:09,280 --> 01:02:12,079
page visitor so whenever you send him

1253
01:02:12,079 --> 01:02:13,280
stuff

1254
01:02:13,280 --> 01:02:15,119
he will visit

1255
01:02:15,119 --> 01:02:16,640
so let's have him

1256
01:02:16,640 --> 01:02:17,599
visit

1257
01:02:17,599 --> 01:02:21,079
i don't know google.com

1258
01:02:21,599 --> 01:02:24,000
so here behind the talking

1259
01:02:24,000 --> 01:02:26,000
it was written that larry visited the

1260
01:02:26,000 --> 01:02:26,960
page

1261
01:02:26,960 --> 01:02:29,039
so we have no output

1262
01:02:29,039 --> 01:02:30,880
we don't know larry doesn't reply to us

1263
01:02:30,880 --> 01:02:32,559
it's just he's just an enthusiastic

1264
01:02:32,559 --> 01:02:34,559
person browsing reddit

1265
01:02:34,559 --> 01:02:36,480
so we have no output so how are we going

1266
01:02:36,480 --> 01:02:37,680
to steal

1267
01:02:37,680 --> 01:02:40,000
larry's secret

1268
01:02:40,000 --> 01:02:43,520
well it's tough right

1269
01:02:43,520 --> 01:02:45,839
let's continue reading the description

1270
01:02:45,839 --> 01:02:48,880
our goal is to steal larry's browser

1271
01:02:48,880 --> 01:02:50,000
cookies

1272
01:02:50,000 --> 01:02:55,119
for the ctf 101 that insect.io domain

1273
01:02:55,119 --> 01:02:56,400
so

1274
01:02:56,400 --> 01:02:59,359
a browser will not send unrelated

1275
01:02:59,359 --> 01:03:02,400
keys to unrelated web servers so we will

1276
01:03:02,400 --> 01:03:06,319
need to find an xss under

1277
01:03:06,319 --> 01:03:08,880
that namespace that that

1278
01:03:08,880 --> 01:03:10,720
domain

1279
01:03:10,720 --> 01:03:13,359
and have him execute javascript

1280
01:03:13,359 --> 01:03:16,799
that will send his secret to us a third

1281
01:03:16,799 --> 01:03:18,160
party

1282
01:03:18,160 --> 01:03:21,280
it's getting pretty complicated

1283
01:03:21,280 --> 01:03:22,960
for this task you will need an

1284
01:03:22,960 --> 01:03:25,440
accessible web server you can use pivot

1285
01:03:25,440 --> 01:03:28,079
bot and this is where it brings back to

1286
01:03:28,079 --> 01:03:31,680
the ssh track where we have ssh to a

1287
01:03:31,680 --> 01:03:35,520
server that is reachable from that

1288
01:03:35,520 --> 01:03:38,000
victim

1289
01:03:38,400 --> 01:03:40,160
so

1290
01:03:40,160 --> 01:03:41,920
let's so

1291
01:03:41,920 --> 01:03:43,680
the

1292
01:03:43,680 --> 01:03:47,839
sesame ssh system uh

1293
01:03:47,839 --> 01:03:50,078
that

1294
01:03:52,640 --> 01:03:55,119
yeah the system and ssh system is shared

1295
01:03:55,119 --> 01:03:58,000
okay we're all on it together so we will

1296
01:03:58,000 --> 01:04:00,400
all need to use different ports so i'm

1297
01:04:00,400 --> 01:04:02,319
going to use a port you're going to have

1298
01:04:02,319 --> 01:04:03,680
to use a different one because you will

1299
01:04:03,680 --> 01:04:05,839
not be able to start a web server on the

1300
01:04:05,839 --> 01:04:08,720
same port it's important to understand

1301
01:04:08,720 --> 01:04:11,359
so i'm going to go there and run a

1302
01:04:11,359 --> 01:04:13,839
server

1303
01:04:14,079 --> 01:04:17,400
uh python3-m

1304
01:04:17,640 --> 01:04:19,200
http.server

1305
01:04:19,200 --> 01:04:22,000
and i'm gonna pick

1306
01:04:22,000 --> 01:04:24,160
one two three four five

1307
01:04:24,160 --> 01:04:26,720
okay it started which means that it's

1308
01:04:26,720 --> 01:04:28,480
running which is great

1309
01:04:28,480 --> 01:04:29,520
now

1310
01:04:29,520 --> 01:04:31,680
i want to confirm first before getting

1311
01:04:31,680 --> 01:04:34,319
into any xss any complicated payload

1312
01:04:34,319 --> 01:04:36,319
what you want to do is confirm that

1313
01:04:36,319 --> 01:04:38,000
larry the clicker

1314
01:04:38,000 --> 01:04:40,640
can go to that web server i want to see

1315
01:04:40,640 --> 01:04:41,520
him

1316
01:04:41,520 --> 01:04:43,760
browse i want to see him work

1317
01:04:43,760 --> 01:04:45,760
so in the challenge description we were

1318
01:04:45,760 --> 01:04:47,400
told

1319
01:04:47,400 --> 01:04:48,960
sysadmin.ss

1320
01:04:48,960 --> 01:04:51,760
ssh is going to resolve

1321
01:04:51,760 --> 01:04:54,480
to the good uh host

1322
01:04:54,480 --> 01:04:57,359
but i use a different port so i'm gonna

1323
01:04:57,359 --> 01:04:59,920
use that port here i'm gonna send this

1324
01:04:59,920 --> 01:05:03,039
to larry the clicker

1325
01:05:03,520 --> 01:05:06,000
one two three four five

1326
01:05:06,000 --> 01:05:09,680
larry click larry let's go

1327
01:05:09,680 --> 01:05:12,799
oh i got a request i have a get

1328
01:05:12,799 --> 01:05:15,680
slash http 1.1

1329
01:05:15,680 --> 01:05:17,680
didn't have that before

1330
01:05:17,680 --> 01:05:18,880
so

1331
01:05:18,880 --> 01:05:21,680
larry visited larry delivered he clicked

1332
01:05:21,680 --> 01:05:23,280
on that link

1333
01:05:23,280 --> 01:05:25,359
now i'm i'm not stealing any of his

1334
01:05:25,359 --> 01:05:28,880
secret here i need to figure a way

1335
01:05:28,880 --> 01:05:30,720
to steal his secret that's what

1336
01:05:30,720 --> 01:05:32,880
i'm after and i need to do this under

1337
01:05:32,880 --> 01:05:35,520
the ctf 101 domain

1338
01:05:35,520 --> 01:05:37,200
luckily

1339
01:05:37,200 --> 01:05:39,760
i have a web page that is vulnerable to

1340
01:05:39,760 --> 01:05:40,960
reflected

1341
01:05:40,960 --> 01:05:44,000
cross-site scripting

1342
01:05:44,000 --> 01:05:46,799
so what i'm gonna do is i'm gonna attack

1343
01:05:46,799 --> 01:05:48,880
myself now

1344
01:05:48,880 --> 01:05:51,200
but then eventually i'll build the

1345
01:05:51,200 --> 01:05:53,520
perfect url in order to be able to

1346
01:05:53,520 --> 01:05:57,119
attack larry okay

1347
01:05:59,599 --> 01:06:02,000
so the secret arena are gonna going to

1348
01:06:02,000 --> 01:06:05,680
be in a cookie one way of having access

1349
01:06:05,680 --> 01:06:10,400
to a cookie is the document that cookie

1350
01:06:10,400 --> 01:06:14,079
so let's do this on myself

1351
01:06:15,599 --> 01:06:17,520
nothing

1352
01:06:17,520 --> 01:06:20,559
it could be normal

1353
01:06:21,920 --> 01:06:24,240
at the same time i think i forgot to

1354
01:06:24,240 --> 01:06:27,319
write it maybe that's the problem

1355
01:06:27,319 --> 01:06:29,039
document.write

1356
01:06:29,039 --> 01:06:31,280
document.cookie

1357
01:06:31,280 --> 01:06:32,960
you can see that i've done this before

1358
01:06:32,960 --> 01:06:35,200
right

1359
01:06:35,920 --> 01:06:38,240
all right

1360
01:06:38,720 --> 01:06:40,400
still nothing well maybe i don't have

1361
01:06:40,400 --> 01:06:44,599
cookies do i have cookies

1362
01:06:51,920 --> 01:06:55,039
it might not be one that is available uh

1363
01:06:55,039 --> 01:06:57,760
for javascript so you can have cookies

1364
01:06:57,760 --> 01:06:58,799
that are

1365
01:06:58,799 --> 01:07:01,280
http only and that the javascript

1366
01:07:01,280 --> 01:07:03,200
context cannot access it so it's not it

1367
01:07:03,200 --> 01:07:05,599
might not be the best test

1368
01:07:05,599 --> 01:07:08,079
let's do

1369
01:07:10,480 --> 01:07:11,599
this

1370
01:07:11,599 --> 01:07:13,599
confirm that we still have injection we

1371
01:07:13,599 --> 01:07:15,520
still have injection okay

1372
01:07:15,520 --> 01:07:20,160
so instead of doing the the the cookie

1373
01:07:20,160 --> 01:07:21,599
we're gonna do

1374
01:07:21,599 --> 01:07:25,400
uh a query

1375
01:07:28,079 --> 01:07:30,079
yeah let's

1376
01:07:30,079 --> 01:07:33,760
now that's that's a bit too much

1377
01:07:38,319 --> 01:07:40,960
oh no that's not bad actually okay so

1378
01:07:40,960 --> 01:07:43,039
we're gonna just decomplexify this a

1379
01:07:43,039 --> 01:07:45,440
little bit

1380
01:07:55,440 --> 01:07:56,720
uh

1381
01:07:56,720 --> 01:08:00,160
uh uh yeah so okay no no no no okay no

1382
01:08:00,160 --> 01:08:01,599
i'm sorry i'm gonna start with something

1383
01:08:01,599 --> 01:08:02,559
simpler

1384
01:08:02,559 --> 01:08:04,240
so

1385
01:08:04,240 --> 01:08:06,240
i need to exfiltrate and for

1386
01:08:06,240 --> 01:08:08,480
information to a third party

1387
01:08:08,480 --> 01:08:12,079
to do so uh there are various mechanism

1388
01:08:12,079 --> 01:08:15,119
but one classic is the image tag in html

1389
01:08:15,119 --> 01:08:16,960
you can basically request an image from

1390
01:08:16,960 --> 01:08:18,799
everywhere there's no notion of

1391
01:08:18,799 --> 01:08:21,679
third-party security when it regards to

1392
01:08:21,679 --> 01:08:24,719
pulling resources like images

1393
01:08:24,719 --> 01:08:26,880
so we're gonna pull an image

1394
01:08:26,880 --> 01:08:30,319
from the the

1395
01:08:30,560 --> 01:08:31,759
uh

1396
01:08:31,759 --> 01:08:36,399
the the ssh service that i used before

1397
01:08:36,399 --> 01:08:39,399
so

1398
01:08:41,198 --> 01:08:45,759
uh cis and min this is a sage

1399
01:08:46,399 --> 01:08:48,399
i should use double quotes and i should

1400
01:08:48,399 --> 01:08:52,158
double quotes if they're gonna work

1401
01:08:52,158 --> 01:08:54,238
let's try that

1402
01:08:54,238 --> 01:08:58,158
whoops double quotes are not working

1403
01:08:59,040 --> 01:09:02,319
let's use single quotes

1404
01:09:02,880 --> 01:09:03,920
all right

1405
01:09:03,920 --> 01:09:06,000
so you can see that my browser is still

1406
01:09:06,000 --> 01:09:08,399
working and then i have a broken image

1407
01:09:08,399 --> 01:09:10,399
so what happens in here

1408
01:09:10,399 --> 01:09:12,399
is i do have

1409
01:09:12,399 --> 01:09:14,238
the http

1410
01:09:14,238 --> 01:09:18,000
column slash system ssh a dot gif okay

1411
01:09:18,000 --> 01:09:21,679
so this works now

1412
01:09:21,679 --> 01:09:23,359
uh

1413
01:09:23,359 --> 01:09:25,679
i'm not i don't have access to sysadmin

1414
01:09:25,679 --> 01:09:30,080
dash ssh this is not a public ip so and

1415
01:09:30,080 --> 01:09:32,158
my web server unfortunately is isn't the

1416
01:09:32,158 --> 01:09:34,479
ctf 101 docker environment

1417
01:09:34,479 --> 01:09:37,679
but will this work on the victim we can

1418
01:09:37,679 --> 01:09:41,679
try and this challenge is helpful

1419
01:09:41,679 --> 01:09:42,640
because

1420
01:09:42,640 --> 01:09:44,560
helpful in the sense to learn

1421
01:09:44,560 --> 01:09:48,238
because we we i reflect the query in the

1422
01:09:48,238 --> 01:09:49,359
url

1423
01:09:49,359 --> 01:09:50,238
so

1424
01:09:50,238 --> 01:09:53,120
i can uh

1425
01:09:53,120 --> 01:09:56,080
you have only to copy and paste

1426
01:09:56,080 --> 01:09:59,679
the the content of the url and send it

1427
01:09:59,679 --> 01:10:01,600
to larry so it's kind of making life

1428
01:10:01,600 --> 01:10:05,920
easier for you here so let's do that

1429
01:10:10,480 --> 01:10:13,840
so larry visited this

1430
01:10:13,840 --> 01:10:16,880
we should get a request oh you know what

1431
01:10:16,880 --> 01:10:19,280
no i i

1432
01:10:19,280 --> 01:10:22,159
i forgot the port

1433
01:10:29,679 --> 01:10:32,159
so one two three four five in my case

1434
01:10:32,159 --> 01:10:34,320
your case is different right

1435
01:10:34,320 --> 01:10:37,600
so let's search and then copy

1436
01:10:37,600 --> 01:10:40,320
and then visit

1437
01:10:40,400 --> 01:10:43,920
just before so i i put a couple of new

1438
01:10:43,920 --> 01:10:45,840
carriage returns so that it's obvious

1439
01:10:45,840 --> 01:10:48,320
that it's a new request

1440
01:10:48,320 --> 01:10:49,360
oh

1441
01:10:49,360 --> 01:10:52,000
so we get we did get the get right so

1442
01:10:52,000 --> 01:10:54,320
when i put an image tag

1443
01:10:54,320 --> 01:10:59,520
in this via injection the xss i uh la

1444
01:10:59,520 --> 01:11:01,920
and when larry clicks on that link he

1445
01:11:01,920 --> 01:11:04,239
his browser is trying to pull that image

1446
01:11:04,239 --> 01:11:08,639
now i just need to add the cookie to it

1447
01:11:09,760 --> 01:11:11,199
and this is where you need to learn

1448
01:11:11,199 --> 01:11:13,840
javascript

1449
01:11:13,840 --> 01:11:15,199
so

1450
01:11:15,199 --> 01:11:17,040
the the

1451
01:11:17,040 --> 01:11:19,679
double quote limitation is an important

1452
01:11:19,679 --> 01:11:22,000
one you almost always need to put double

1453
01:11:22,000 --> 01:11:25,120
quotes especially if you nest javascript

1454
01:11:25,120 --> 01:11:26,400
and html

1455
01:11:26,400 --> 01:11:28,560
so because of that limitation we're

1456
01:11:28,560 --> 01:11:30,640
gonna do everything in pure javascript

1457
01:11:30,640 --> 01:11:33,120
it's just simpler

1458
01:11:33,120 --> 01:11:35,600
but so i'm jumping a little bit forward

1459
01:11:35,600 --> 01:11:37,760
here but i'm gonna explain everything uh

1460
01:11:37,760 --> 01:11:40,000
line by line and you'll follow you'll

1461
01:11:40,000 --> 01:11:41,840
see no no where is there

1462
01:11:41,840 --> 01:11:43,920
so the only complexity that i'm adding

1463
01:11:43,920 --> 01:11:46,159
now is that i'm doing this pure

1464
01:11:46,159 --> 01:11:47,440
javascript

1465
01:11:47,440 --> 01:11:49,199
and i'm adding the fact that it's going

1466
01:11:49,199 --> 01:11:51,360
to be dynamically created in order to

1467
01:11:51,360 --> 01:11:54,800
avoid double quotes so what we have here

1468
01:11:54,800 --> 01:11:55,920
is

1469
01:11:55,920 --> 01:11:58,480
i'm using javascript to create an image

1470
01:11:58,480 --> 01:12:00,159
tag okay

1471
01:12:00,159 --> 01:12:02,960
that image tag i'm assigning it

1472
01:12:02,960 --> 01:12:04,560
the

1473
01:12:04,560 --> 01:12:06,159
this url

1474
01:12:06,159 --> 01:12:09,839
so the url and uh

1475
01:12:14,560 --> 01:12:17,040
so this url is

1476
01:12:17,040 --> 01:12:18,080
http

1477
01:12:18,080 --> 01:12:21,199
admin oh i almost forgot my custom port

1478
01:12:21,199 --> 01:12:24,080
column one two three four five

1479
01:12:24,080 --> 01:12:24,880
so

1480
01:12:24,880 --> 01:12:27,840
my web server that i control

1481
01:12:27,840 --> 01:12:30,560
a that gif ada gif no one gives a

1482
01:12:30,560 --> 01:12:32,080
what is the name it could already

1483
01:12:32,080 --> 01:12:34,719
already be like just the forward slash

1484
01:12:34,719 --> 01:12:37,120
then to that i'm appending

1485
01:12:37,120 --> 01:12:39,440
document.cookie

1486
01:12:39,440 --> 01:12:42,640
semicolon so this is ending so the image

1487
01:12:42,640 --> 01:12:46,080
in the javascript uh memory this image

1488
01:12:46,080 --> 01:12:48,880
tag has this url but if it doesn't exist

1489
01:12:48,880 --> 01:12:51,440
on the dom it will never be queried that

1490
01:12:51,440 --> 01:12:54,080
image so that last section

1491
01:12:54,080 --> 01:12:56,560
is to add it to the dom the document

1492
01:12:56,560 --> 01:12:59,199
object model so that the browser will be

1493
01:12:59,199 --> 01:13:01,040
oh there's an image i need to go fetch

1494
01:13:01,040 --> 01:13:02,480
it because i want to display it to the

1495
01:13:02,480 --> 01:13:04,800
user

1496
01:13:04,800 --> 01:13:06,880
so and then image which is the name of

1497
01:13:06,880 --> 01:13:08,800
the variable that we assign at the

1498
01:13:08,800 --> 01:13:10,000
beginning right

1499
01:13:10,000 --> 01:13:11,760
so with this we should have a pretty

1500
01:13:11,760 --> 01:13:13,040
good recipe

1501
01:13:13,040 --> 01:13:16,640
i see one risk one risk here is that my

1502
01:13:16,640 --> 01:13:18,400
cookie is not

1503
01:13:18,400 --> 01:13:20,400
url encoded

1504
01:13:20,400 --> 01:13:23,440
so it could fail because if there's a

1505
01:13:23,440 --> 01:13:24,400
value

1506
01:13:24,400 --> 01:13:28,080
that is not legal in uh urls

1507
01:13:28,080 --> 01:13:30,800
something either larry when he clicks on

1508
01:13:30,800 --> 01:13:32,320
it or something and the chain is going

1509
01:13:32,320 --> 01:13:34,400
to fail but we're going to execute it

1510
01:13:34,400 --> 01:13:35,920
like that and see

1511
01:13:35,920 --> 01:13:39,199
so we know in advance that for us all

1512
01:13:39,199 --> 01:13:41,120
we're going to have is a broken image

1513
01:13:41,120 --> 01:13:44,320
because sysadmin ssh is not reachable

1514
01:13:44,320 --> 01:13:46,719
from my computer

1515
01:13:46,719 --> 01:13:48,640
so let's do that i'm going to add a

1516
01:13:48,640 --> 01:13:50,000
little like

1517
01:13:50,000 --> 01:13:52,560
column a equals so it becomes a

1518
01:13:52,560 --> 01:13:55,280
parameter and not appended at the end of

1519
01:13:55,280 --> 01:13:56,560
the gif

1520
01:13:56,560 --> 01:14:00,000
or gif i don't know which club you're in

1521
01:14:00,000 --> 01:14:02,320
so okay so this is a complicated payload

1522
01:14:02,320 --> 01:14:03,760
that i'm gonna lose so i'm gonna write

1523
01:14:03,760 --> 01:14:06,400
it down here i'm gonna create a web

1524
01:14:06,400 --> 01:14:08,880
and then do a readme

1525
01:14:08,880 --> 01:14:11,520
and then read me and then put this put

1526
01:14:11,520 --> 01:14:13,120
this here all right

1527
01:14:13,120 --> 01:14:15,520
okay search

1528
01:14:15,520 --> 01:14:18,159
as expected browser waiting it's gonna

1529
01:14:18,159 --> 01:14:21,840
get broken image and it it's not visible

1530
01:14:21,840 --> 01:14:25,440
now let's send this to larry and c

1531
01:14:25,440 --> 01:14:27,840
we're gonna do a couple carriage return

1532
01:14:27,840 --> 01:14:30,159
so we see if it's new or not

1533
01:14:30,159 --> 01:14:32,879
let's do this

1534
01:14:33,840 --> 01:14:36,960
oh no need for url encoding we have the

1535
01:14:36,960 --> 01:14:38,800
flag so

1536
01:14:38,800 --> 01:14:42,000
let's recap what happened what the

1537
01:14:42,000 --> 01:14:44,239
is this complex that is

1538
01:14:44,239 --> 01:14:46,800
called an xss

1539
01:14:46,800 --> 01:14:49,199
it is

1540
01:14:51,120 --> 01:14:54,080
we the attacker sent to donald trump a

1541
01:14:54,080 --> 01:14:56,880
url which contained and if you look at

1542
01:14:56,880 --> 01:14:58,000
the url

1543
01:14:58,000 --> 01:15:01,280
that we we sent right it's it contains a

1544
01:15:01,280 --> 01:15:02,159
search

1545
01:15:02,159 --> 01:15:03,120
with

1546
01:15:03,120 --> 01:15:06,159
characters that are html characters that

1547
01:15:06,159 --> 01:15:08,880
should be filtered or escape or whatever

1548
01:15:08,880 --> 01:15:10,880
that is not escaped or filtered or

1549
01:15:10,880 --> 01:15:13,520
whatever that is reflected by the web

1550
01:15:13,520 --> 01:15:15,679
server

1551
01:15:15,679 --> 01:15:16,480
so

1552
01:15:16,480 --> 01:15:19,120
this victim's browser sending that query

1553
01:15:19,120 --> 01:15:20,640
that query is processed by the web

1554
01:15:20,640 --> 01:15:24,159
server the web server sends that back as

1555
01:15:24,159 --> 01:15:25,360
a web page

1556
01:15:25,360 --> 01:15:27,760
which has the angle brackets and stuff

1557
01:15:27,760 --> 01:15:29,840
like that that was unescaped and this

1558
01:15:29,840 --> 01:15:32,080
goes to the victim and the victim is

1559
01:15:32,080 --> 01:15:34,080
like oh it's javascript and it's coming

1560
01:15:34,080 --> 01:15:36,960
from a web server i trust let's execute

1561
01:15:36,960 --> 01:15:39,280
it and then part of that javascript is

1562
01:15:39,280 --> 01:15:42,640
injecting an image in the dom and saying

1563
01:15:42,640 --> 01:15:44,480
there is something at

1564
01:15:44,480 --> 01:15:46,880
a dot gif on

1565
01:15:46,880 --> 01:15:48,719
our

1566
01:15:48,719 --> 01:15:50,719
attacker's machine which is not in the

1567
01:15:50,719 --> 01:15:53,719
diagram

1568
01:15:59,760 --> 01:16:02,000
and then this is the browser that is

1569
01:16:02,000 --> 01:16:03,520
going there

1570
01:16:03,520 --> 01:16:05,040
and then

1571
01:16:05,040 --> 01:16:09,040
we are hiding the secret in the query

1572
01:16:09,040 --> 01:16:11,520
we're saying i want an image but this

1573
01:16:11,520 --> 01:16:14,000
image has this url which

1574
01:16:14,000 --> 01:16:17,920
have the flag in it

1575
01:16:19,040 --> 01:16:22,320
spready cool

1576
01:16:22,320 --> 01:16:24,960
xss

1577
01:16:25,199 --> 01:16:28,000
and this is a simple one like the ones

1578
01:16:28,000 --> 01:16:30,800
at nordsec the guys are just completely

1579
01:16:30,800 --> 01:16:32,960
crazy like i don't even understand them

1580
01:16:32,960 --> 01:16:34,880
anymore there's like oh i found a bug in

1581
01:16:34,880 --> 01:16:36,200
this and if you do this

1582
01:16:36,200 --> 01:16:38,239
[Music]

1583
01:16:38,239 --> 01:16:40,400
so

1584
01:16:41,120 --> 01:16:43,600
a twist on

1585
01:16:43,600 --> 01:16:46,840
on xss is so we saw the reflected

1586
01:16:46,840 --> 01:16:50,080
style but a twist on it is the stored

1587
01:16:50,080 --> 01:16:52,480
xss so storage access is basically one

1588
01:16:52,480 --> 01:16:54,719
that goes into the database

1589
01:16:54,719 --> 01:16:57,199
and then that when you view a web page

1590
01:16:57,199 --> 01:17:00,239
it's sent back to you so restoredxss is

1591
01:17:00,239 --> 01:17:03,440
very dangerous and can be wormable

1592
01:17:03,440 --> 01:17:07,440
for example if myspace you there's a

1593
01:17:07,440 --> 01:17:09,199
story that success in it and you write

1594
01:17:09,199 --> 01:17:11,040
to a forum post

1595
01:17:11,040 --> 01:17:13,920
and you trigger an xss then everyone

1596
01:17:13,920 --> 01:17:16,880
visiting that forum post can execute

1597
01:17:16,880 --> 01:17:18,719
that javascript and if part of that

1598
01:17:18,719 --> 01:17:21,679
javascript payload you are

1599
01:17:21,679 --> 01:17:24,719
posting another post on that forum with

1600
01:17:24,719 --> 01:17:27,600
the payload then it's just spreading to

1601
01:17:27,600 --> 01:17:31,840
everyone it just becomes crazy

1602
01:17:33,199 --> 01:17:34,960
all right so

1603
01:17:34,960 --> 01:17:37,440
the hardcore shift is behind us

1604
01:17:37,440 --> 01:17:39,120
we're back with

1605
01:17:39,120 --> 01:17:40,719
encoding

1606
01:17:40,719 --> 01:17:43,760
uh which is our forensics uh one on one

1607
01:17:43,760 --> 01:17:45,679
so there are many uh

1608
01:17:45,679 --> 01:17:49,360
flavors and types of uh of forensics uh

1609
01:17:49,360 --> 01:17:52,400
challenges in ctfs a lot of them are

1610
01:17:52,400 --> 01:17:53,440
fairly

1611
01:17:53,440 --> 01:17:55,678
uh

1612
01:17:57,040 --> 01:18:00,080
well i i would say easy it's not true

1613
01:18:00,080 --> 01:18:02,880
as as you know everything complexity

1614
01:18:02,880 --> 01:18:05,600
gets in and i remember at defcon quals

1615
01:18:05,600 --> 01:18:09,040
where we had like pieces of a raid array

1616
01:18:09,040 --> 01:18:11,280
and you had to rebuild the raid array

1617
01:18:11,280 --> 01:18:13,760
using those pieces and then mount it and

1618
01:18:13,760 --> 01:18:16,480
you had to hunt basically the the file

1619
01:18:16,480 --> 01:18:18,960
system structure and reconstruct it was

1620
01:18:18,960 --> 01:18:20,480
very complicated

1621
01:18:20,480 --> 01:18:22,080
but so

1622
01:18:22,080 --> 01:18:24,800
a lot of it has to do with having the

1623
01:18:24,800 --> 01:18:25,760
eye

1624
01:18:25,760 --> 01:18:28,239
for something right having seen stuff

1625
01:18:28,239 --> 01:18:31,280
before or having the idea of

1626
01:18:31,280 --> 01:18:32,560
uh

1627
01:18:32,560 --> 01:18:35,440
oh this sounds like a pointer or

1628
01:18:35,440 --> 01:18:38,880
encoded or something so now this stuff

1629
01:18:38,880 --> 01:18:41,040
does anyone have any idea what it what

1630
01:18:41,040 --> 01:18:43,440
this is

1631
01:18:43,440 --> 01:18:45,199
like

1632
01:18:45,199 --> 01:18:48,400
what is this encoded with

1633
01:18:48,400 --> 01:18:51,840
base64 correct

1634
01:18:51,840 --> 01:18:52,640
so

1635
01:18:52,640 --> 01:18:56,560
we're gonna learn our favorite tool

1636
01:18:56,560 --> 01:18:59,280
for uh those types of stuff

1637
01:18:59,280 --> 01:19:02,800
it's from uh the uk secret service

1638
01:19:02,800 --> 01:19:04,880
it's called the cyber chef

1639
01:19:04,880 --> 01:19:07,199
it's basically a swiss army knife for

1640
01:19:07,199 --> 01:19:08,880
encoding and

1641
01:19:08,880 --> 01:19:11,920
escaping and and crypto

1642
01:19:11,920 --> 01:19:16,080
and so it has a from base64 recipe

1643
01:19:16,080 --> 01:19:19,920
so at the top you put in the the crypto

1644
01:19:19,920 --> 01:19:22,640
at the bottom you get the result

1645
01:19:22,640 --> 01:19:25,920
and so here we can see that the flag is

1646
01:19:25,920 --> 01:19:26,960
here

1647
01:19:26,960 --> 01:19:29,360
so let's read it out loud

1648
01:19:29,360 --> 01:19:31,520
in this field you should recognize basic

1649
01:19:31,520 --> 01:19:33,520
encoding techniques just by looking at

1650
01:19:33,520 --> 01:19:36,080
them congrats because it looks like you

1651
01:19:36,080 --> 01:19:39,920
just did so here is your flag

1652
01:19:40,080 --> 01:19:43,679
so basically just basics before decoding

1653
01:19:43,679 --> 01:19:45,920
here

1654
01:19:49,679 --> 01:19:52,800
and we are correct

1655
01:19:52,800 --> 01:19:54,800
all right now we have a document

1656
01:19:54,800 --> 01:19:58,239
and in that document uh we'll have

1657
01:19:58,239 --> 01:20:00,480
two

1658
01:20:00,719 --> 01:20:03,199
two flags

1659
01:20:03,199 --> 01:20:05,679
let's look at it this i used to teach

1660
01:20:05,679 --> 01:20:07,920
cyber security at uh

1661
01:20:07,920 --> 01:20:10,480
ets university nearby

1662
01:20:10,480 --> 01:20:13,520
and uh so this is an old

1663
01:20:13,520 --> 01:20:15,280
class summary

1664
01:20:15,280 --> 01:20:17,760
that i use for that challenge

1665
01:20:17,760 --> 01:20:19,440
so okay

1666
01:20:19,440 --> 01:20:23,360
what are the things and these these

1667
01:20:23,360 --> 01:20:26,159
ctf challenges why is this included in

1668
01:20:26,159 --> 01:20:30,159
the 101 it's because i was very salty

1669
01:20:30,159 --> 01:20:33,280
about not succeeding doing a challenge

1670
01:20:33,280 --> 01:20:34,320
one day

1671
01:20:34,320 --> 01:20:35,199
and

1672
01:20:35,199 --> 01:20:37,360
these are two techniques that i didn't

1673
01:20:37,360 --> 01:20:39,679
succeed at first and i was like it's so

1674
01:20:39,679 --> 01:20:42,400
 stupid that i need to teach that

1675
01:20:42,400 --> 01:20:44,400
to everyone so that they don't fall

1676
01:20:44,400 --> 01:20:47,360
victim of my stupidity back then

1677
01:20:47,360 --> 01:20:49,600
and so

1678
01:20:49,600 --> 01:20:52,159
how can you hide stuff in a document

1679
01:20:52,159 --> 01:20:54,080
well

1680
01:20:54,080 --> 01:20:56,559
one way

1681
01:20:58,159 --> 01:20:59,040
yeah

1682
01:20:59,040 --> 01:21:01,280
uh yeah using encryption and stuff legit

1683
01:21:01,280 --> 01:21:03,520
yeah but let's let's think

1684
01:21:03,520 --> 01:21:06,800
uh secret service like uh hiding in

1685
01:21:06,800 --> 01:21:09,440
plain sight type stuff right

1686
01:21:09,440 --> 01:21:10,639
and so

1687
01:21:10,639 --> 01:21:13,120
a thing should draw our attention but

1688
01:21:13,120 --> 01:21:16,719
it's normal that it doesn't but

1689
01:21:16,880 --> 01:21:19,120
yeah it's it's kind of stag if you want

1690
01:21:19,120 --> 01:21:22,400
but so um what you can do is

1691
01:21:22,400 --> 01:21:25,920
you can uh so a word document is super

1692
01:21:25,920 --> 01:21:28,480
flexible right it allows you to have

1693
01:21:28,480 --> 01:21:30,719
all sorts of of

1694
01:21:30,719 --> 01:21:32,960
you can put white on white basically you

1695
01:21:32,960 --> 01:21:35,520
can put you know tiny tiny tiny fonts

1696
01:21:35,520 --> 01:21:38,800
and like that so one trick is to

1697
01:21:38,800 --> 01:21:42,400
copy that paste all that stuff into a

1698
01:21:42,400 --> 01:21:46,080
dumbass text editor

1699
01:21:46,239 --> 01:21:48,000
and then

1700
01:21:48,000 --> 01:21:50,719
search in it and we know you know we're

1701
01:21:50,719 --> 01:21:53,199
we're in a ctf what are we gonna search

1702
01:21:53,199 --> 01:21:56,639
for we're gonna search for flag right

1703
01:21:56,639 --> 01:21:57,520
boom

1704
01:21:57,520 --> 01:22:00,560
i got a flag at the end at the

1705
01:22:00,560 --> 01:22:02,719
bottom end that you probably don't see

1706
01:22:02,719 --> 01:22:04,719
sorry about that oops

1707
01:22:04,719 --> 01:22:07,199
somehow dragged zoom

1708
01:22:07,199 --> 01:22:09,840
at the bottom bottom and there's

1709
01:22:09,840 --> 01:22:13,840
something that matched flag okay now

1710
01:22:13,840 --> 01:22:15,360
what we're gonna do is we're gonna go

1711
01:22:15,360 --> 01:22:17,840
back to the document select that text

1712
01:22:17,840 --> 01:22:19,920
and we see that there is text there

1713
01:22:19,920 --> 01:22:22,320
and then we're gonna make it

1714
01:22:22,320 --> 01:22:23,440
uh

1715
01:22:23,440 --> 01:22:24,719
darker

1716
01:22:24,719 --> 01:22:26,639
here we go so

1717
01:22:26,639 --> 01:22:27,679
ah

1718
01:22:27,679 --> 01:22:30,080
it's nice

1719
01:22:36,800 --> 01:22:39,040
since

1720
01:22:53,679 --> 01:22:54,639
okay

1721
01:22:54,639 --> 01:22:56,239
so the

1722
01:22:56,239 --> 01:22:58,960
yeah so basically one trick is white on

1723
01:22:58,960 --> 01:23:01,040
white type stuff let's paste it in the

1724
01:23:01,040 --> 01:23:04,960
thing and move on to the next one

1725
01:23:05,040 --> 01:23:07,840
oops

1726
01:23:19,199 --> 01:23:22,800
all right we succeeded the honor you see

1727
01:23:22,800 --> 01:23:23,440
the

1728
01:23:23,440 --> 01:23:26,159
so the next one so it says

1729
01:23:26,159 --> 01:23:28,480
the flag is in french but it still

1730
01:23:28,480 --> 01:23:31,199
starts with flag dash all right all

1731
01:23:31,199 --> 01:23:32,159
right

1732
01:23:32,159 --> 01:23:34,239
okay let's go back to the document kind

1733
01:23:34,239 --> 01:23:36,000
of cheat a little here

1734
01:23:36,000 --> 01:23:37,520
but this is the one

1735
01:23:37,520 --> 01:23:40,239
that i never succeeded in a previous ctf

1736
01:23:40,239 --> 01:23:42,639
and i was really salty when i learned

1737
01:23:42,639 --> 01:23:45,040
the answer and so

1738
01:23:45,040 --> 01:23:48,800
one hint is the the spell check

1739
01:23:48,800 --> 01:23:52,159
so why is spell check clear okay here we

1740
01:23:52,159 --> 01:23:54,719
have names of people okay spell check

1741
01:23:54,719 --> 01:23:57,040
doesn't clear it's not too bad

1742
01:23:57,040 --> 01:24:00,560
but why do we have at the top

1743
01:24:00,560 --> 01:24:03,120
all sorts of mistakes in words that

1744
01:24:03,120 --> 01:24:05,840
looks like they should pass

1745
01:24:05,840 --> 01:24:09,280
so let's paste specifically this part

1746
01:24:09,280 --> 01:24:13,559
in uh in a console

1747
01:24:28,320 --> 01:24:31,840
alright so if we look at it in text

1748
01:24:31,840 --> 01:24:34,480
what we can see is

1749
01:24:34,480 --> 01:24:35,520
some

1750
01:24:35,520 --> 01:24:37,760
weird things right so the first word

1751
01:24:37,760 --> 01:24:39,440
that is uh

1752
01:24:39,440 --> 01:24:41,600
buggy is informatic

1753
01:24:41,600 --> 01:24:45,280
and then e is fine r is is not fine and

1754
01:24:45,280 --> 01:24:48,639
so if we look in our console we see f

1755
01:24:48,639 --> 01:24:51,440
capital f we see capital l

1756
01:24:51,440 --> 01:24:53,280
we see capital a

1757
01:24:53,280 --> 01:24:55,120
and then capital j

1758
01:24:55,120 --> 01:24:57,360
g capital g

1759
01:24:57,360 --> 01:24:59,360
this is basically flag right so it's

1760
01:24:59,360 --> 01:25:00,719
hidden there

1761
01:25:00,719 --> 01:25:01,840
somewhere

1762
01:25:01,840 --> 01:25:03,120
somehow

1763
01:25:03,120 --> 01:25:05,920
let's put it in red

1764
01:25:05,920 --> 01:25:09,120
uh it's not just red it's like tiny tiny

1765
01:25:09,120 --> 01:25:10,560
tiny

1766
01:25:10,560 --> 01:25:14,960
so let's put it in uh you know 60.

1767
01:25:14,960 --> 01:25:16,719
so f

1768
01:25:16,719 --> 01:25:17,920
l

1769
01:25:17,920 --> 01:25:19,600
a g

1770
01:25:19,600 --> 01:25:21,679
at this point you guys should do it

1771
01:25:21,679 --> 01:25:24,800
manually but this is ctf 101 another

1772
01:25:24,800 --> 01:25:27,440
lesson i want you guys to realize is

1773
01:25:27,440 --> 01:25:28,239
that

1774
01:25:28,239 --> 01:25:30,800
the the difference between a regular

1775
01:25:30,800 --> 01:25:33,760
challenge and a challenging challenge is

1776
01:25:33,760 --> 01:25:36,080
that they will take something simple

1777
01:25:36,080 --> 01:25:39,199
like for example solving a captcha

1778
01:25:39,199 --> 01:25:41,600
and they will ask you to do it 5 000

1779
01:25:41,600 --> 01:25:44,480
times which means that you should not do

1780
01:25:44,480 --> 01:25:46,639
it by hand which means that you need to

1781
01:25:46,639 --> 01:25:49,760
code something learning to script is a

1782
01:25:49,760 --> 01:25:50,880
key

1783
01:25:50,880 --> 01:25:54,560
part of solving ctf problems

1784
01:25:54,560 --> 01:25:56,400
there's a whole sub category of these

1785
01:25:56,400 --> 01:25:58,239
that are usually called programming or

1786
01:25:58,239 --> 01:26:00,480
programming related so we're going to do

1787
01:26:00,480 --> 01:26:03,199
this but programmatically now have in

1788
01:26:03,199 --> 01:26:05,600
mind that this one in this case here you

1789
01:26:05,600 --> 01:26:07,199
should do it by hand i'm going to lose

1790
01:26:07,199 --> 01:26:09,920
more time programming it but still the

1791
01:26:09,920 --> 01:26:11,840
lessons are important and you'll see

1792
01:26:11,840 --> 01:26:13,040
also

1793
01:26:13,040 --> 01:26:16,560
the the the way i use you i advise

1794
01:26:16,560 --> 01:26:19,360
people to operate baby steps not doing

1795
01:26:19,360 --> 01:26:21,679
everything all at once

1796
01:26:21,679 --> 01:26:24,159
building towards the solution

1797
01:26:24,159 --> 01:26:26,799
let's do that

1798
01:26:29,600 --> 01:26:32,480
so i'm assigning the string to uh

1799
01:26:32,480 --> 01:26:33,920
to a variable

1800
01:26:33,920 --> 01:26:37,040
let's let's uh remove

1801
01:26:37,040 --> 01:26:40,400
where like here the words are normal

1802
01:26:40,400 --> 01:26:42,320
so we're gonna we're gonna substring

1803
01:26:42,320 --> 01:26:45,199
this to just that portion and the so

1804
01:26:45,199 --> 01:26:48,320
yeah like here okay

1805
01:26:48,320 --> 01:26:50,719
all right now imagine that this problem

1806
01:26:50,719 --> 01:26:52,400
is way bigger imagine we have thousands

1807
01:26:52,400 --> 01:26:54,719
of character and it's like a binary

1808
01:26:54,719 --> 01:26:57,440
encoded inside a document and so we need

1809
01:26:57,440 --> 01:26:59,120
to do this thousand times so we cannot

1810
01:26:59,120 --> 01:27:01,199
scale it but let's do it let's do it

1811
01:27:01,199 --> 01:27:03,440
program programmatically so now what i

1812
01:27:03,440 --> 01:27:06,159
want to do first is i want

1813
01:27:06,159 --> 01:27:10,239
the i wanna i want all words in separate

1814
01:27:10,239 --> 01:27:11,280
tokens

1815
01:27:11,280 --> 01:27:13,840
and i want the last character of every

1816
01:27:13,840 --> 01:27:16,840
word

1817
01:27:18,300 --> 01:27:21,439
[Music]

1818
01:27:26,719 --> 01:27:28,960
all right so i split into words now last

1819
01:27:28,960 --> 01:27:33,840
character last character let's do a test

1820
01:27:38,080 --> 01:27:40,239
oh

1821
01:27:44,840 --> 01:27:47,840
no so now i realize that this is at the

1822
01:27:47,840 --> 01:27:50,080
bottom and i need to put it higher so

1823
01:27:50,080 --> 01:27:51,920
i'm gonna have to do something a bit

1824
01:27:51,920 --> 01:27:55,520
weird but bear with me

1825
01:27:57,520 --> 01:27:58,960
all right if

1826
01:27:58,960 --> 01:28:00,880
this is good right you you all can see

1827
01:28:00,880 --> 01:28:02,400
at the back yeah okay perfect let's move

1828
01:28:02,400 --> 01:28:05,679
on so in c i have one ah that's not a

1829
01:28:05,679 --> 01:28:08,239
good choice

1830
01:28:08,320 --> 01:28:11,199
so in c i put one word as a test now i

1831
01:28:11,199 --> 01:28:15,799
want a last character what's the syntax

1832
01:28:17,840 --> 01:28:19,840
oh yeah i got it all right let's go back

1833
01:28:19,840 --> 01:28:23,159
to our list

1834
01:28:39,360 --> 01:28:42,080
okay so this is a list comprehension a

1835
01:28:42,080 --> 01:28:44,800
very powerful python concept i advise

1836
01:28:44,800 --> 01:28:46,960
everyone who's programming

1837
01:28:46,960 --> 01:28:49,679
semi regularly to really look into these

1838
01:28:49,679 --> 01:28:53,199
they are very powerful as i said um now

1839
01:28:53,199 --> 01:28:55,360
the we see that we have the last

1840
01:28:55,360 --> 01:28:57,760
character but there is some garbage so

1841
01:28:57,760 --> 01:28:59,360
we have commas

1842
01:28:59,360 --> 01:29:02,159
and and stuff so there's a problem with

1843
01:29:02,159 --> 01:29:04,320
the way we're doing things why is that

1844
01:29:04,320 --> 01:29:06,800
oh because when we split we kept the

1845
01:29:06,800 --> 01:29:09,120
commas so let's just get rid of them

1846
01:29:09,120 --> 01:29:11,840
somewhere before we do our last

1847
01:29:11,840 --> 01:29:12,960
character

1848
01:29:12,960 --> 01:29:15,440
assignment

1849
01:29:19,520 --> 01:29:22,520
whoa

1850
01:30:02,480 --> 01:30:05,360
okay so not perfect but

1851
01:30:05,360 --> 01:30:07,600
pretty close where i think we're gonna

1852
01:30:07,600 --> 01:30:09,360
be able to figure out that last buggy

1853
01:30:09,360 --> 01:30:11,040
character but so what i just did is

1854
01:30:11,040 --> 01:30:14,000
basically this string or yeah i did the

1855
01:30:14,000 --> 01:30:16,719
string i replaced comma with nothing

1856
01:30:16,719 --> 01:30:18,239
column with nothing

1857
01:30:18,239 --> 01:30:20,320
dot with nothing and then i extract the

1858
01:30:20,320 --> 01:30:21,920
last character inside the list

1859
01:30:21,920 --> 01:30:24,080
comprehension so now let's join that

1860
01:30:24,080 --> 01:30:25,679
back together because i'm too lazy i

1861
01:30:25,679 --> 01:30:29,239
want to cut and paste

1862
01:30:36,560 --> 01:30:39,280
so the string object in python has a

1863
01:30:39,280 --> 01:30:41,440
join attribute which takes a list and

1864
01:30:41,440 --> 01:30:43,440
you select on what you want to join so i

1865
01:30:43,440 --> 01:30:46,000
join with nothing so i have this so i

1866
01:30:46,000 --> 01:30:47,679
told before it was written that the flag

1867
01:30:47,679 --> 01:30:51,440
was in french so this is flag with a t

1868
01:30:51,440 --> 01:30:54,159
it's a mistake

1869
01:30:56,719 --> 01:30:58,800
so it's the flag

1870
01:30:58,800 --> 01:31:01,679
and the the fl part we can figure out

1871
01:31:01,679 --> 01:31:03,920
from the string by looking at it we have

1872
01:31:03,920 --> 01:31:06,320
the man and then a

1873
01:31:06,320 --> 01:31:07,280
and then

1874
01:31:07,280 --> 01:31:10,080
a carriage return and then a zero and

1875
01:31:10,080 --> 01:31:12,239
column so i don't know how the document

1876
01:31:12,239 --> 01:31:14,639
got like that but i mean we can figure

1877
01:31:14,639 --> 01:31:18,400
it out and uh solve it so let's

1878
01:31:18,400 --> 01:31:19,840
go back

1879
01:31:19,840 --> 01:31:21,679
put that in

1880
01:31:21,679 --> 01:31:23,120
fix the little

1881
01:31:23,120 --> 01:31:26,320
thingies that are offset

1882
01:31:26,320 --> 01:31:29,199
flag and then here it's also

1883
01:31:29,199 --> 01:31:31,839
flag

1884
01:31:32,080 --> 01:31:33,600
so the flag

1885
01:31:33,600 --> 01:31:35,840
observator

1886
01:31:35,840 --> 01:31:39,360
and here we go we are correct

1887
01:31:39,360 --> 01:31:42,000
all right we're almost close two

1888
01:31:42,000 --> 01:31:44,560
challenge left but the crack me at the

1889
01:31:44,560 --> 01:31:46,960
end all right network

1890
01:31:46,960 --> 01:31:49,920
well pretty much all ctfs have b caps i

1891
01:31:49,920 --> 01:31:51,760
don't know why it's a religion for

1892
01:31:51,760 --> 01:31:54,080
security people pcaps and i you know

1893
01:31:54,080 --> 01:31:56,159
what i love them

1894
01:31:56,159 --> 01:31:59,839
i guilt guilty as charge

1895
01:32:03,520 --> 01:32:07,120
so pcaps are opened by wireshark

1896
01:32:07,120 --> 01:32:09,840
we're gonna we're gonna do things a bit

1897
01:32:09,840 --> 01:32:10,880
uh

1898
01:32:10,880 --> 01:32:13,440
unefficiently here because you'll learn

1899
01:32:13,440 --> 01:32:15,920
some stuff while we do so

1900
01:32:15,920 --> 01:32:17,120
so

1901
01:32:17,120 --> 01:32:19,679
uh i clicked on something i it up

1902
01:32:19,679 --> 01:32:20,480
okay

1903
01:32:20,480 --> 01:32:23,600
what we have is a very small pcap with a

1904
01:32:23,600 --> 01:32:27,280
sequence of ping and reply and we can

1905
01:32:27,280 --> 01:32:28,800
look at them like that and the problem

1906
01:32:28,800 --> 01:32:31,360
with pcaps is that it can go in all

1907
01:32:31,360 --> 01:32:33,040
sorts of directions right there's so

1908
01:32:33,040 --> 01:32:35,600
much data if you start you could you

1909
01:32:35,600 --> 01:32:37,360
could look at timestamp if you have tcp

1910
01:32:37,360 --> 01:32:39,280
you could look at sequence number you

1911
01:32:39,280 --> 01:32:41,760
look at all sorts of stuff you can get

1912
01:32:41,760 --> 01:32:44,719
drowned in noise but now ping is pretty

1913
01:32:44,719 --> 01:32:45,600
simple

1914
01:32:45,600 --> 01:32:48,159
and usually well

1915
01:32:48,159 --> 01:32:50,800
people who looked at pcaps before know

1916
01:32:50,800 --> 01:32:53,840
the ping pattern for linux and windows

1917
01:32:53,840 --> 01:32:56,400
by heart it's like a crescendo and it

1918
01:32:56,400 --> 01:32:59,199
used to be to detect error correction uh

1919
01:32:59,199 --> 01:33:01,520
not error correction error on the media

1920
01:33:01,520 --> 01:33:03,440
so if some bits were corrupted you would

1921
01:33:03,440 --> 01:33:05,520
see it in the ping

1922
01:33:05,520 --> 01:33:09,120
reply and so ping is is uh comparing

1923
01:33:09,120 --> 01:33:11,040
what you what it sends

1924
01:33:11,040 --> 01:33:13,360
uh and what you send it and what you you

1925
01:33:13,360 --> 01:33:14,239
uh

1926
01:33:14,239 --> 01:33:15,920
it sends back

1927
01:33:15,920 --> 01:33:17,600
what you send it

1928
01:33:17,600 --> 01:33:18,880
so

1929
01:33:18,880 --> 01:33:20,159
here our

1930
01:33:20,159 --> 01:33:22,480
data packet for someone experienced in

1931
01:33:22,480 --> 01:33:23,760
networking

1932
01:33:23,760 --> 01:33:26,080
you would see that it's not a regular

1933
01:33:26,080 --> 01:33:28,400
someone is is using a different

1934
01:33:28,400 --> 01:33:31,440
uh data data package in ping and this is

1935
01:33:31,440 --> 01:33:33,199
allowed by the protocol but no one does

1936
01:33:33,199 --> 01:33:35,920
that so if we if we scroll down and look

1937
01:33:35,920 --> 01:33:37,440
at here

1938
01:33:37,440 --> 01:33:39,760
the data section okay

1939
01:33:39,760 --> 01:33:42,080
we will figure out what the solution is

1940
01:33:42,080 --> 01:33:44,800
pretty easily so f

1941
01:33:44,800 --> 01:33:46,239
l

1942
01:33:46,239 --> 01:33:47,679
a

1943
01:33:47,679 --> 01:33:49,040
g

1944
01:33:49,040 --> 01:33:50,560
dash

1945
01:33:50,560 --> 01:33:51,760
m

1946
01:33:51,760 --> 01:33:52,719
e

1947
01:33:52,719 --> 01:33:53,520
so

1948
01:33:53,520 --> 01:33:56,159
easy solve would be to write this down

1949
01:33:56,159 --> 01:33:57,760
and then uh

1950
01:33:57,760 --> 01:34:00,239
submit the flag but we're we want we

1951
01:34:00,239 --> 01:34:01,760
want to learn something else we're gonna

1952
01:34:01,760 --> 01:34:04,800
do it the complicated way so what is a

1953
01:34:04,800 --> 01:34:07,840
good way to scale wireshark analysis is

1954
01:34:07,840 --> 01:34:10,400
to use t-sharp so t-sharp is the sister

1955
01:34:10,400 --> 01:34:12,800
tool that is on the common line so what

1956
01:34:12,800 --> 01:34:14,480
i'm going to do now is i'm going to find

1957
01:34:14,480 --> 01:34:17,920
a way to extract the data out of the

1958
01:34:17,920 --> 01:34:22,600
peak app just the data section

1959
01:34:35,679 --> 01:34:38,480
all right so if we use a dash r for read

1960
01:34:38,480 --> 01:34:40,639
and then send the p cap to t shark what

1961
01:34:40,639 --> 01:34:43,040
we get is kind of a nice text based

1962
01:34:43,040 --> 01:34:45,119
summary of pretty much the information

1963
01:34:45,119 --> 01:34:47,040
we have in wireshark's

1964
01:34:47,040 --> 01:34:48,639
upper pane

1965
01:34:48,639 --> 01:34:50,080
which in itself is not what we're

1966
01:34:50,080 --> 01:34:53,040
looking for so the the key component of

1967
01:34:53,040 --> 01:34:54,639
t shark if you want to scale it and

1968
01:34:54,639 --> 01:34:58,080
automate it is the dash capital t

1969
01:34:58,080 --> 01:34:59,199
fields

1970
01:34:59,199 --> 01:35:00,400
this puts

1971
01:35:00,400 --> 01:35:04,239
t-shark in a mode of field extraction

1972
01:35:04,239 --> 01:35:06,719
now the fields that you want to extract

1973
01:35:06,719 --> 01:35:10,000
you will add them individually adding

1974
01:35:10,000 --> 01:35:13,040
dash e and the name of the field so what

1975
01:35:13,040 --> 01:35:15,040
we're gonna do is capital t

1976
01:35:15,040 --> 01:35:17,600
fields dash e and then we're gonna add

1977
01:35:17,600 --> 01:35:20,400
names of the field how can you know

1978
01:35:20,400 --> 01:35:22,800
what's the name of the field you asked

1979
01:35:22,800 --> 01:35:25,440
well let me tell you that wireshark is

1980
01:35:25,440 --> 01:35:27,360
very helpful because

1981
01:35:27,360 --> 01:35:29,840
there is a feature when you

1982
01:35:29,840 --> 01:35:32,320
right click that is called prepare

1983
01:35:32,320 --> 01:35:35,199
filter so if you do prepare filter and

1984
01:35:35,199 --> 01:35:37,360
selected or not selected doesn't matter

1985
01:35:37,360 --> 01:35:39,440
what you have is that it will create a

1986
01:35:39,440 --> 01:35:41,280
query for you

1987
01:35:41,280 --> 01:35:42,400
at the top

1988
01:35:42,400 --> 01:35:44,880
so this allows us to learn so what is

1989
01:35:44,880 --> 01:35:47,840
let's say icmp checksum what is the name

1990
01:35:47,840 --> 01:35:51,440
of that field let's do prepare filter

1991
01:35:51,440 --> 01:35:52,719
selected

1992
01:35:52,719 --> 01:35:55,760
we know that it's icmp dash checksum

1993
01:35:55,760 --> 01:35:57,280
pretty convenient because we didn't have

1994
01:35:57,280 --> 01:35:58,960
to look through pages and pages of

1995
01:35:58,960 --> 01:36:00,719
 fields name

1996
01:36:00,719 --> 01:36:03,679
so uh did i i just sweared on the stream

1997
01:36:03,679 --> 01:36:06,400
i'm sorry and here sorry

1998
01:36:06,400 --> 01:36:10,320
um so we want data so let's select data

1999
01:36:10,320 --> 01:36:12,560
and then i'm gonna do all of what i just

2000
01:36:12,560 --> 01:36:17,080
mentioned after i drop the mic

2001
01:36:25,280 --> 01:36:29,600
okay so we have our data here

2002
01:36:29,600 --> 01:36:32,400
interesting everything is separated by

2003
01:36:32,400 --> 01:36:35,520
one line it's very neat but now i need

2004
01:36:35,520 --> 01:36:38,320
to scale that up another thing i want

2005
01:36:38,320 --> 01:36:39,760
you guys to learn

2006
01:36:39,760 --> 01:36:42,800
ipython or interactive python console is

2007
01:36:42,800 --> 01:36:44,159
powerful

2008
01:36:44,159 --> 01:36:47,199
ipython notebook is like

2009
01:36:47,199 --> 01:36:49,760
powerful and documentation at the same

2010
01:36:49,760 --> 01:36:52,000
time if you guys never use this stuff

2011
01:36:52,000 --> 01:36:53,679
you you should learn it and it's called

2012
01:36:53,679 --> 01:36:55,840
jupiter notebooks now but we're going to

2013
01:36:55,840 --> 01:36:57,840
use a jupiter notebook

2014
01:36:57,840 --> 01:36:59,199
to solve

2015
01:36:59,199 --> 01:37:02,440
that challenge

2016
01:37:33,040 --> 01:37:34,800
so i don't know if you know about this

2017
01:37:34,800 --> 01:37:36,719
but uh jupiter notebook's pretty pretty

2018
01:37:36,719 --> 01:37:39,280
cool so we can do like you know uh okay

2019
01:37:39,280 --> 01:37:41,600
it's markdown i'm gonna write i never do

2020
01:37:41,600 --> 01:37:43,760
this but for the demonstration purposes

2021
01:37:43,760 --> 01:37:48,920
i will i'm gonna document what i'm doing

2022
01:38:05,600 --> 01:38:08,239
so you can embed markdown directly into

2023
01:38:08,239 --> 01:38:11,040
it but the other cool thing is so this

2024
01:38:11,040 --> 01:38:14,159
is python basically okay but

2025
01:38:14,159 --> 01:38:17,199
the ipython kernel allows you to mix

2026
01:38:17,199 --> 01:38:21,879
with common line so let's do that

2027
01:38:35,280 --> 01:38:38,960
the syntax for it is uh

2028
01:38:38,960 --> 01:38:41,760
exclamation mark so exclamation mark

2029
01:38:41,760 --> 01:38:44,560
everything that comes after is executed

2030
01:38:44,560 --> 01:38:48,320
in a shell okay and uh you can assign it

2031
01:38:48,320 --> 01:38:50,080
to python variables

2032
01:38:50,080 --> 01:38:52,800
this is sick right because shell script

2033
01:38:52,800 --> 01:38:54,480
usually are nightmare to

2034
01:38:54,480 --> 01:38:56,000
maintain because no one documents them

2035
01:38:56,000 --> 01:38:58,159
properly now you can mix them with code

2036
01:38:58,159 --> 01:38:59,679
and just focus on the interesting bit

2037
01:38:59,679 --> 01:39:01,440
and have markdown for your documentation

2038
01:39:01,440 --> 01:39:04,080
around it's pretty pretty neat so now we

2039
01:39:04,080 --> 01:39:06,480
have this and we know that this as a

2040
01:39:06,480 --> 01:39:09,760
list in python will be easy to process

2041
01:39:09,760 --> 01:39:11,920
so now in the next couple of steps what

2042
01:39:11,920 --> 01:39:14,560
i want to do is since it's four six four

2043
01:39:14,560 --> 01:39:17,679
six four six uh four c4 c4c and stuff

2044
01:39:17,679 --> 01:39:19,440
like that i'm gonna

2045
01:39:19,440 --> 01:39:22,480
gonna grab just the last two character

2046
01:39:22,480 --> 01:39:25,520
of every line but but not every line

2047
01:39:25,520 --> 01:39:28,239
necessarily every line out of two so

2048
01:39:28,239 --> 01:39:31,959
we're gonna do this together

2049
01:39:59,679 --> 01:40:02,239
so as i was saying i'm going baby steps

2050
01:40:02,239 --> 01:40:04,880
right so i figured out that extracting

2051
01:40:04,880 --> 01:40:07,199
the last two character is

2052
01:40:07,199 --> 01:40:08,800
is to use

2053
01:40:08,800 --> 01:40:11,360
dash minus two column with anything and

2054
01:40:11,360 --> 01:40:13,760
this is in python to say start from the

2055
01:40:13,760 --> 01:40:17,600
the last go back two characters and and

2056
01:40:17,600 --> 01:40:20,159
adding the column means but i want to

2057
01:40:20,159 --> 01:40:22,400
get the rest of the string up till the

2058
01:40:22,400 --> 01:40:24,560
end so this way you get the last two

2059
01:40:24,560 --> 01:40:26,800
character now i do i did this for one

2060
01:40:26,800 --> 01:40:28,400
item because i wanted to confirm that it

2061
01:40:28,400 --> 01:40:31,199
works but if we uh if we do again a list

2062
01:40:31,199 --> 01:40:32,880
comprehension you can do that on all

2063
01:40:32,880 --> 01:40:36,840
lines so let's do that

2064
01:41:02,840 --> 01:41:06,320
oh okay now i have it in the the way i

2065
01:41:06,320 --> 01:41:09,119
was interested in having but now i still

2066
01:41:09,119 --> 01:41:11,679
have it duplicated is there a shortcut

2067
01:41:11,679 --> 01:41:15,360
to get rid of every uh one out of two in

2068
01:41:15,360 --> 01:41:18,000
python there is and luckily i googled

2069
01:41:18,000 --> 01:41:20,560
this before uh being here so for me it

2070
01:41:20,560 --> 01:41:22,400
will look easy but it's not quite easy

2071
01:41:22,400 --> 01:41:24,560
but there actually lists take three

2072
01:41:24,560 --> 01:41:27,600
parameter beginning and and then kind of

2073
01:41:27,600 --> 01:41:29,840
this iterator fancy iterator so we're

2074
01:41:29,840 --> 01:41:31,920
gonna do uh just that in order to

2075
01:41:31,920 --> 01:41:35,520
extract one out of two

2076
01:41:35,520 --> 01:41:39,440
fields in the data list

2077
01:41:45,360 --> 01:41:47,360
okay we're getting closer to a solution

2078
01:41:47,360 --> 01:41:49,600
so we clean that up so now what we have

2079
01:41:49,600 --> 01:41:50,960
is x

2080
01:41:50,960 --> 01:41:53,360
for the characters that we are are that

2081
01:41:53,360 --> 01:41:56,400
we want to do now let's just run on top

2082
01:41:56,400 --> 01:42:00,880
of this uh chr so that we get the the

2083
01:42:00,880 --> 01:42:03,600
character value associated with with

2084
01:42:03,600 --> 01:42:06,159
this x

2085
01:42:06,159 --> 01:42:07,840
and the programmers in the room will

2086
01:42:07,840 --> 01:42:09,520
know that this is not gonna work but i'm

2087
01:42:09,520 --> 01:42:12,920
still doing it

2088
01:42:18,719 --> 01:42:20,400
and the reason i say that is because i

2089
01:42:20,400 --> 01:42:22,400
recognize the boston key party people at

2090
01:42:22,400 --> 01:42:23,840
the back and i know that they're gonna

2091
01:42:23,840 --> 01:42:26,080
laugh about my programming and my stuff

2092
01:42:26,080 --> 01:42:30,880
here i'm teaching ctf 101 guys

2093
01:42:34,719 --> 01:42:36,960
okay so the reason it fails is because

2094
01:42:36,960 --> 01:42:38,880
the character i extracted were out of a

2095
01:42:38,880 --> 01:42:40,880
console so it will fail because it's

2096
01:42:40,880 --> 01:42:43,440
considered text so now i need to cast

2097
01:42:43,440 --> 01:42:45,280
this somehow into an

2098
01:42:45,280 --> 01:42:50,440
integer because chr expect integers

2099
01:43:00,960 --> 01:43:05,440
so hint in python 3 in the the hint

2100
01:43:05,440 --> 01:43:06,400
method

2101
01:43:06,400 --> 01:43:08,480
they added a very nice convenience

2102
01:43:08,480 --> 01:43:10,719
function where you can

2103
01:43:10,719 --> 01:43:13,280
set the base so you basically pass the

2104
01:43:13,280 --> 01:43:16,000
string to the end and you say it's base

2105
01:43:16,000 --> 01:43:19,199
16 and so it will interpret it as the

2106
01:43:19,199 --> 01:43:21,040
proper integer in the proper base and

2107
01:43:21,040 --> 01:43:24,080
then you pass chr into it and then we're

2108
01:43:24,080 --> 01:43:26,159
gonna do the trick we did last time

2109
01:43:26,159 --> 01:43:28,560
we're gonna join that list on an empty

2110
01:43:28,560 --> 01:43:32,239
string which will assemble it for us

2111
01:43:32,239 --> 01:43:35,959
and then we'll have the flag

2112
01:43:50,639 --> 01:43:53,360
so again doing this uh

2113
01:43:53,360 --> 01:43:55,440
from the pcap would have been faster but

2114
01:43:55,440 --> 01:43:57,600
now you've learned about uh ipython

2115
01:43:57,600 --> 01:43:59,040
notebook the fact that it's kind of

2116
01:43:59,040 --> 01:44:00,960
documenting itself and the fact that you

2117
01:44:00,960 --> 01:44:03,440
have the recipe for later so it's a

2118
01:44:03,440 --> 01:44:06,000
pretty neat tool chain that i like to

2119
01:44:06,000 --> 01:44:09,679
use a lot in in work and in ctfs

2120
01:44:09,679 --> 01:44:11,360
there was a monthly hack yesterday

2121
01:44:11,360 --> 01:44:12,880
evening

2122
01:44:12,880 --> 01:44:13,840
about

2123
01:44:13,840 --> 01:44:15,440
embedding

2124
01:44:15,440 --> 01:44:18,000
radar the reverse engineering tool

2125
01:44:18,000 --> 01:44:20,960
inside ipython so you could have like

2126
01:44:20,960 --> 01:44:24,320
interactive easy to share web-based

2127
01:44:24,320 --> 01:44:27,040
reverse engineering toolkit inside of

2128
01:44:27,040 --> 01:44:29,440
a jupyter notebook which is pretty sick

2129
01:44:29,440 --> 01:44:31,119
when you think about it

2130
01:44:31,119 --> 01:44:34,960
okay moving on the crackme so

2131
01:44:34,960 --> 01:44:38,080
the goal of that crack me okay

2132
01:44:38,080 --> 01:44:39,840
is

2133
01:44:39,840 --> 01:44:42,560
so that you're not scared

2134
01:44:42,560 --> 01:44:45,440
and we're not gonna understand all of

2135
01:44:45,440 --> 01:44:47,920
what we're gonna look at now okay

2136
01:44:47,920 --> 01:44:49,760
actually we're gonna understand very

2137
01:44:49,760 --> 01:44:52,159
little of what we're gonna look at but

2138
01:44:52,159 --> 01:44:54,560
the idea is that

2139
01:44:54,560 --> 01:44:57,119
we're gonna open tools that are scary

2140
01:44:57,119 --> 01:44:58,960
and that the first time i opened them i

2141
01:44:58,960 --> 01:45:00,960
closed them i was like i think i

2142
01:45:00,960 --> 01:45:03,440
infected my computer right it's so

2143
01:45:03,440 --> 01:45:06,960
weird full of zeros and ones and

2144
01:45:06,960 --> 01:45:07,679
and

2145
01:45:07,679 --> 01:45:09,360
the the guys doing the reverse

2146
01:45:09,360 --> 01:45:11,119
engineering are so better than me that

2147
01:45:11,119 --> 01:45:12,719
i'm not gonna ever do that it's too

2148
01:45:12,719 --> 01:45:13,920
complicated

2149
01:45:13,920 --> 01:45:16,400
uh but that's not true

2150
01:45:16,400 --> 01:45:19,040
you can take it bite size

2151
01:45:19,040 --> 01:45:21,840
uh pun intended i guess or not but you

2152
01:45:21,840 --> 01:45:24,400
can take it you know little by little

2153
01:45:24,400 --> 01:45:27,520
and uh sometimes the challenges are

2154
01:45:27,520 --> 01:45:30,239
quite easy it's just the way to approach

2155
01:45:30,239 --> 01:45:32,880
it not being scared and uh and taking

2156
01:45:32,880 --> 01:45:35,480
you know baby steps and this one is a

2157
01:45:35,480 --> 01:45:38,560
particularly easy one you can do it in

2158
01:45:38,560 --> 01:45:41,840
statsic you can do it in dynamic uh it's

2159
01:45:41,840 --> 01:45:43,440
it's quite easy

2160
01:45:43,440 --> 01:45:45,199
to

2161
01:45:45,199 --> 01:45:47,199
to approach actually

2162
01:45:47,199 --> 01:45:50,599
let's do it

2163
01:46:00,880 --> 01:46:02,320
so first we're going to look at it

2164
01:46:02,320 --> 01:46:04,960
statically so statical static analysis

2165
01:46:04,960 --> 01:46:07,520
means without executing anything

2166
01:46:07,520 --> 01:46:09,280
and so for that we're going to use

2167
01:46:09,280 --> 01:46:11,199
guidra

2168
01:46:11,199 --> 01:46:13,360
i used to joke about the nsa having

2169
01:46:13,360 --> 01:46:15,440
access of my computer but now uh they're

2170
01:46:15,440 --> 01:46:18,239
friends uh i forgot snowden

2171
01:46:18,239 --> 01:46:20,880
i i forgot them

2172
01:46:20,880 --> 01:46:23,840
bad joke is it too soon i don't know but

2173
01:46:23,840 --> 01:46:27,360
snowden in russia

2174
01:46:27,360 --> 01:46:29,679
you know

2175
01:46:31,760 --> 01:46:32,639
okay

2176
01:46:32,639 --> 01:46:34,960
it complains i don't know why

2177
01:46:34,960 --> 01:46:35,760
yeah

2178
01:46:35,760 --> 01:46:37,440
i know it doesn't exist

2179
01:46:37,440 --> 01:46:39,119
give me a break

2180
01:46:39,119 --> 01:46:40,639
all right

2181
01:46:40,639 --> 01:46:41,880
i

2182
01:46:41,880 --> 01:46:46,199
don't want that

2183
01:46:54,239 --> 01:46:55,600
okay

2184
01:46:55,600 --> 01:46:57,679
so gabriel wants you to set a project

2185
01:46:57,679 --> 01:46:59,199
and you you haven't

2186
01:46:59,199 --> 01:47:01,360
added the binary to it yet but you open

2187
01:47:01,360 --> 01:47:03,360
it it's java it takes a while

2188
01:47:03,360 --> 01:47:05,600
uh it's pretty powerful though and uh

2189
01:47:05,600 --> 01:47:08,639
ida pro is like a three grand this is

2190
01:47:08,639 --> 01:47:10,560
free so

2191
01:47:10,560 --> 01:47:12,320
who wants either pro except those that

2192
01:47:12,320 --> 01:47:14,880
can afford it

2193
01:47:14,880 --> 01:47:17,520
uh uh uh let's go let's load that crack

2194
01:47:17,520 --> 01:47:19,679
me okay nice and what i like about

2195
01:47:19,679 --> 01:47:22,480
modern tools like that is that for

2196
01:47:22,480 --> 01:47:24,239
someone stupid like me

2197
01:47:24,239 --> 01:47:26,880
you can go and look at the

2198
01:47:26,880 --> 01:47:27,600
the

2199
01:47:27,600 --> 01:47:29,920
the decompiler like i'm not even a c

2200
01:47:29,920 --> 01:47:31,679
programmer it's not true that i will

2201
01:47:31,679 --> 01:47:34,159
understand the assembly right

2202
01:47:34,159 --> 01:47:37,440
so why is there an error okay so some

2203
01:47:37,440 --> 01:47:40,480
libraries are not found

2204
01:47:40,480 --> 01:47:41,920
it's gonna make me running it

2205
01:47:41,920 --> 01:47:43,360
complicated

2206
01:47:43,360 --> 01:47:46,080
okay so now we we opened it okay we have

2207
01:47:46,080 --> 01:47:48,719
access to all that stuff the

2208
01:47:48,719 --> 01:47:52,400
important pieces are exported the the

2209
01:47:52,400 --> 01:47:53,520
calls

2210
01:47:53,520 --> 01:47:56,719
that the operating system makes to run

2211
01:47:56,719 --> 01:47:59,440
your code it needs something to be

2212
01:47:59,440 --> 01:48:01,360
exported so the first thing you want to

2213
01:48:01,360 --> 01:48:04,400
look at when you open a binary like that

2214
01:48:04,400 --> 01:48:06,880
is the export table where where what

2215
01:48:06,880 --> 01:48:09,440
stuff that is exported to the operating

2216
01:48:09,440 --> 01:48:11,760
system everything that starts with an

2217
01:48:11,760 --> 01:48:15,199
underscore you should ignore right and

2218
01:48:15,199 --> 01:48:18,880
oh in this specific case you saw in the

2219
01:48:18,880 --> 01:48:20,960
browser that there were two files so

2220
01:48:20,960 --> 01:48:23,040
there's one that is dash hard and

2221
01:48:23,040 --> 01:48:25,280
there's one that is regular so the dash

2222
01:48:25,280 --> 01:48:28,080
art is

2223
01:48:28,080 --> 01:48:30,480
stripped so what this strip means it

2224
01:48:30,480 --> 01:48:33,280
means that to save space in the 70s they

2225
01:48:33,280 --> 01:48:35,360
decided that we should remove symbols

2226
01:48:35,360 --> 01:48:37,520
because the machine doesn't need them

2227
01:48:37,520 --> 01:48:40,239
and so it means that there is no human

2228
01:48:40,239 --> 01:48:42,639
readable strings in the

2229
01:48:42,639 --> 01:48:45,600
in the the file itself

2230
01:48:45,600 --> 01:48:47,840
what except if you print stuff and you

2231
01:48:47,840 --> 01:48:50,159
know stuff that interacts with the user

2232
01:48:50,159 --> 01:48:53,119
but so things like this would not have

2233
01:48:53,119 --> 01:48:56,159
nice strings that are readable instead

2234
01:48:56,159 --> 01:48:58,639
it would be just f with an address an

2235
01:48:58,639 --> 01:49:01,199
address of the in the binary

2236
01:49:01,199 --> 01:49:03,040
so

2237
01:49:03,040 --> 01:49:05,280
we're doing the easy version here but

2238
01:49:05,280 --> 01:49:07,440
oftentimes you'll have stripped binaries

2239
01:49:07,440 --> 01:49:10,000
unfortunately for the the real reverse

2240
01:49:10,000 --> 01:49:12,239
engineering challenges

2241
01:49:12,239 --> 01:49:14,960
um okay so all of this is exported so

2242
01:49:14,960 --> 01:49:17,040
it's it's more than anticipated but

2243
01:49:17,040 --> 01:49:18,960
there's a name that stands out and it's

2244
01:49:18,960 --> 01:49:20,239
called main

2245
01:49:20,239 --> 01:49:22,400
so we're gonna click on main

2246
01:49:22,400 --> 01:49:26,080
so now we see the the uh the assembly

2247
01:49:26,080 --> 01:49:28,960
of the main function but uh let's let's

2248
01:49:28,960 --> 01:49:31,119
take a look at the the compiled it's

2249
01:49:31,119 --> 01:49:33,040
it's it's better

2250
01:49:33,040 --> 01:49:35,760
so now we see okay buffer printf

2251
01:49:35,760 --> 01:49:38,000
dramatic oh a function called dramatic

2252
01:49:38,000 --> 01:49:40,320
what is dramatic when i look at it oh

2253
01:49:40,320 --> 01:49:43,040
it's a for loop with a sleep

2254
01:49:43,040 --> 01:49:46,159
and then it's writing a

2255
01:49:46,159 --> 01:49:48,239
put char on something

2256
01:49:48,239 --> 01:49:51,840
can i cast it as something else here

2257
01:49:51,840 --> 01:49:54,080
so in char this is a dot so it's

2258
01:49:54,080 --> 01:49:55,199
basically

2259
01:49:55,199 --> 01:49:56,639
doing a dot

2260
01:49:56,639 --> 01:49:58,719
for how many times

2261
01:49:58,719 --> 01:50:01,440
it's not clear it's from perimeter all

2262
01:50:01,440 --> 01:50:03,599
right it's coming from the main let's go

2263
01:50:03,599 --> 01:50:05,360
back

2264
01:50:05,360 --> 01:50:08,560
so it should oh dramatic three so it

2265
01:50:08,560 --> 01:50:11,599
will print basically three dots

2266
01:50:11,599 --> 01:50:14,159
separated by sleep and then

2267
01:50:14,159 --> 01:50:18,719
uh x10 is carriage return so uh x10 is

2268
01:50:18,719 --> 01:50:21,520
decimal but uh 10 is carriage return

2269
01:50:21,520 --> 01:50:24,159
so you'll see okay after that a courage

2270
01:50:24,159 --> 01:50:25,520
return okay

2271
01:50:25,520 --> 01:50:26,480
okay

2272
01:50:26,480 --> 01:50:29,119
so far it's safe like i could run it if

2273
01:50:29,119 --> 01:50:30,320
i want to

2274
01:50:30,320 --> 01:50:32,480
so that's good

2275
01:50:32,480 --> 01:50:33,679
then

2276
01:50:33,679 --> 01:50:36,159
compute okay what does compute do

2277
01:50:36,159 --> 01:50:38,560
oh compute is a lot scarier

2278
01:50:38,560 --> 01:50:41,440
there is a bunch of stuff in it uh here

2279
01:50:41,440 --> 01:50:43,520
you know crypto mumble jumbo then

2280
01:50:43,520 --> 01:50:46,080
there's shawn function here

2281
01:50:46,080 --> 01:50:48,239
and then some comparison

2282
01:50:48,239 --> 01:50:49,119
yeah

2283
01:50:49,119 --> 01:50:52,880
anyway it's returning md what's md md oh

2284
01:50:52,880 --> 01:50:55,119
it's a malloc so it's a buffer

2285
01:50:55,119 --> 01:50:56,719
okay okay

2286
01:50:56,719 --> 01:51:00,800
compute is scarier let's move on

2287
01:51:00,800 --> 01:51:03,840
and then oops

2288
01:51:04,960 --> 01:51:06,719
and then it prints the flag the

2289
01:51:06,719 --> 01:51:08,960
beginning of the flag and then raise

2290
01:51:08,960 --> 01:51:10,239
what is raise

2291
01:51:10,239 --> 01:51:11,440
well when you don't know about a

2292
01:51:11,440 --> 01:51:13,440
function in the c library you can always

2293
01:51:13,440 --> 01:51:16,159
use man pages to find what it is so

2294
01:51:16,159 --> 01:51:19,559
let's do that

2295
01:51:37,760 --> 01:51:39,679
okay so the

2296
01:51:39,679 --> 01:51:41,119
the

2297
01:51:41,119 --> 01:51:43,679
programming api of the c library is in

2298
01:51:43,679 --> 01:51:46,960
the section three of the man page so you

2299
01:51:46,960 --> 01:51:49,840
because raise has other man pages of

2300
01:51:49,840 --> 01:51:50,719
stuff

2301
01:51:50,719 --> 01:51:52,800
higher level you need to specify that

2302
01:51:52,800 --> 01:51:55,199
you are interested in section 3.

2303
01:51:55,199 --> 01:51:56,080
so

2304
01:51:56,080 --> 01:51:58,880
send a signal to the caller so basically

2305
01:51:58,880 --> 01:52:01,360
this will send the signal to my process

2306
01:52:01,360 --> 01:52:03,599
which means that it can destroy it or

2307
01:52:03,599 --> 01:52:05,199
 it up right which is not what we

2308
01:52:05,199 --> 01:52:06,560
want

2309
01:52:06,560 --> 01:52:08,239
so we have to keep that in mind for

2310
01:52:08,239 --> 01:52:09,360
later

2311
01:52:09,360 --> 01:52:11,760
then uh it looks like it's gonna print

2312
01:52:11,760 --> 01:52:14,400
so it's printed flag and then it's about

2313
01:52:14,400 --> 01:52:16,880
to print but there's this

2314
01:52:16,880 --> 01:52:19,280
damn raise at the middle

2315
01:52:19,280 --> 01:52:20,800
and then put char another carriage

2316
01:52:20,800 --> 01:52:22,719
return okay you know what i've seen

2317
01:52:22,719 --> 01:52:24,400
enough i'm ready to run it i'm not

2318
01:52:24,400 --> 01:52:25,840
scared i'm no longer scared that i'm

2319
01:52:25,840 --> 01:52:27,920
gonna infect myself by the way i don't

2320
01:52:27,920 --> 01:52:30,480
recommend this doing this in

2321
01:52:30,480 --> 01:52:33,119
in most ctfs here nordsec is friendly

2322
01:52:33,119 --> 01:52:34,480
nothing will destroy your computer

2323
01:52:34,480 --> 01:52:36,239
unless it's clearly written in the

2324
01:52:36,239 --> 01:52:38,639
challenge description description but

2325
01:52:38,639 --> 01:52:41,119
there are some ctfs out there that have

2326
01:52:41,119 --> 01:52:43,760
been known to have malware or

2327
01:52:43,760 --> 01:52:46,080
destructive payloads so always do this

2328
01:52:46,080 --> 01:52:47,679
stuff in a vm

2329
01:52:47,679 --> 01:52:50,679
usually

2330
01:52:58,880 --> 01:53:00,880
so i'm making it executable and then i'm

2331
01:53:00,880 --> 01:53:02,159
going to run it

2332
01:53:02,159 --> 01:53:04,960
and we're going to look what's going on

2333
01:53:04,960 --> 01:53:06,560
performing intense computation the

2334
01:53:06,560 --> 01:53:08,400
dramatic function and then flag

2335
01:53:08,400 --> 01:53:11,360
segmentation fault core dump

2336
01:53:11,360 --> 01:53:13,520
damn it okay there's a raise

2337
01:53:13,520 --> 01:53:14,560
so

2338
01:53:14,560 --> 01:53:15,599
i could

2339
01:53:15,599 --> 01:53:16,639
then

2340
01:53:16,639 --> 01:53:17,679
do

2341
01:53:17,679 --> 01:53:19,679
several things i could finish to

2342
01:53:19,679 --> 01:53:22,080
understand statically what's going on

2343
01:53:22,080 --> 01:53:24,719
and solve it

2344
01:53:24,719 --> 01:53:26,639
purely in a mathematical fashion so

2345
01:53:26,639 --> 01:53:28,480
there is data that is performed in

2346
01:53:28,480 --> 01:53:31,119
compute and then this data is printed to

2347
01:53:31,119 --> 01:53:32,639
the screen but there's something in

2348
01:53:32,639 --> 01:53:34,320
between so i could do this purely

2349
01:53:34,320 --> 01:53:35,599
statically

2350
01:53:35,599 --> 01:53:37,679
and because it's launch hours soon i

2351
01:53:37,679 --> 01:53:39,520
won't do that

2352
01:53:39,520 --> 01:53:42,159
otherwise we could patch the binary

2353
01:53:42,159 --> 01:53:44,960
so we could remove the raise statement

2354
01:53:44,960 --> 01:53:47,199
and then re-execute it without it this

2355
01:53:47,199 --> 01:53:48,080
is

2356
01:53:48,080 --> 01:53:49,840
uh

2357
01:53:49,840 --> 01:53:52,880
involves patching it out so changing

2358
01:53:52,880 --> 01:53:55,679
whatever the the call is by not and it's

2359
01:53:55,679 --> 01:53:58,400
kind of involved uh so i'll show you

2360
01:53:58,400 --> 01:54:01,920
another way dynamically but so signals

2361
01:54:01,920 --> 01:54:04,800
are uh caught by

2362
01:54:04,800 --> 01:54:07,199
the uh the processes and the process

2363
01:54:07,199 --> 01:54:09,119
have an opportunity to do something with

2364
01:54:09,119 --> 01:54:09,840
them

2365
01:54:09,840 --> 01:54:12,400
by default most signals will have a

2366
01:54:12,400 --> 01:54:14,239
process terminate

2367
01:54:14,239 --> 01:54:16,719
and a debugger

2368
01:54:16,719 --> 01:54:19,520
is a layer on top of your process that

2369
01:54:19,520 --> 01:54:22,239
catches your your signal and in the

2370
01:54:22,239 --> 01:54:25,520
debugger you can tell it to ignore them

2371
01:54:25,520 --> 01:54:27,119
so we're going to do is we're going to

2372
01:54:27,119 --> 01:54:27,920
run

2373
01:54:27,920 --> 01:54:30,800
that binary inside the debugger

2374
01:54:30,800 --> 01:54:32,000
and see

2375
01:54:32,000 --> 01:54:35,960
what we can do with that signal

2376
01:54:40,800 --> 01:54:43,760
so the classic debugger is a gdb and i i

2377
01:54:43,760 --> 01:54:46,000
happen to have a pawn dbg

2378
01:54:46,000 --> 01:54:46,960
uh

2379
01:54:46,960 --> 01:54:49,199
wrapper around it so it's a lot more

2380
01:54:49,199 --> 01:54:51,520
verbose

2381
01:54:51,520 --> 01:54:53,280
and a lot more reverse engineering

2382
01:54:53,280 --> 01:54:55,840
oriented so uh by default gdb doesn't

2383
01:54:55,840 --> 01:54:57,920
have anything about uh the

2384
01:54:57,920 --> 01:54:59,119
machine code

2385
01:54:59,119 --> 01:55:01,599
you basically usually use gdb along with

2386
01:55:01,599 --> 01:55:03,040
source code so

2387
01:55:03,040 --> 01:55:04,639
because it's an open source operating

2388
01:55:04,639 --> 01:55:07,040
system you have source code but so

2389
01:55:07,040 --> 01:55:09,040
i advise people who are getting serious

2390
01:55:09,040 --> 01:55:11,360
into reverse engineering and solving

2391
01:55:11,360 --> 01:55:13,440
challenges like that they should install

2392
01:55:13,440 --> 01:55:14,400
either

2393
01:55:14,400 --> 01:55:16,800
phone dbg or jeff

2394
01:55:16,800 --> 01:55:17,679
g

2395
01:55:17,679 --> 01:55:18,880
e f

2396
01:55:18,880 --> 01:55:20,560
or there's another one there's like

2397
01:55:20,560 --> 01:55:22,239
three one that are competing severely

2398
01:55:22,239 --> 01:55:23,199
right now

2399
01:55:23,199 --> 01:55:25,280
uh they all have pros and cons but me

2400
01:55:25,280 --> 01:55:28,080
i'm lazy i use pawn dbg since while

2401
01:55:28,080 --> 01:55:29,440
okay so

2402
01:55:29,440 --> 01:55:32,800
we're gonna run this so r then enter

2403
01:55:32,800 --> 01:55:35,280
so it started and we can see we have the

2404
01:55:35,280 --> 01:55:37,440
output and then

2405
01:55:37,440 --> 01:55:39,920
what did it say what did it say

2406
01:55:39,920 --> 01:55:43,199
oh it says program received six seven

2407
01:55:43,199 --> 01:55:45,440
segmentation fault so basically the the

2408
01:55:45,440 --> 01:55:48,560
raise three is a segmentation fault that

2409
01:55:48,560 --> 01:55:51,119
is sent to the os and the os sends it

2410
01:55:51,119 --> 01:55:52,800
back to the process

2411
01:55:52,800 --> 01:55:55,920
now since i'm in the debugger i this is

2412
01:55:55,920 --> 01:55:58,400
basically a trap and it gives me it

2413
01:55:58,400 --> 01:56:00,960
plugs the process shows me the state of

2414
01:56:00,960 --> 01:56:02,800
the stack so this this is the state of

2415
01:56:02,800 --> 01:56:04,239
the registers

2416
01:56:04,239 --> 01:56:06,320
then you have the code that is running

2417
01:56:06,320 --> 01:56:07,360
right now

2418
01:56:07,360 --> 01:56:09,360
and then you have the stack there's a

2419
01:56:09,360 --> 01:56:12,080
lot this is a lot right

2420
01:56:12,080 --> 01:56:14,000
we're not going to go through this it's

2421
01:56:14,000 --> 01:56:17,040
it it would need basically a ctf 101 on

2422
01:56:17,040 --> 01:56:18,880
its own it's a lot to understand a lot

2423
01:56:18,880 --> 01:56:19,840
of stuff

2424
01:56:19,840 --> 01:56:22,719
um but so what we need to understand uh

2425
01:56:22,719 --> 01:56:24,960
the easy route if you wanna if you want

2426
01:56:24,960 --> 01:56:27,760
me to say is that

2427
01:56:27,760 --> 01:56:29,760
there's a the operating system sent a

2428
01:56:29,760 --> 01:56:31,599
signal and in the debugger you have the

2429
01:56:31,599 --> 01:56:35,040
opportunity to ignore that signal so

2430
01:56:35,040 --> 01:56:37,360
this is the dynamic way

2431
01:56:37,360 --> 01:56:40,159
lazy way of solving that challenge and

2432
01:56:40,159 --> 01:56:42,400
so let's do that

2433
01:56:42,400 --> 01:56:45,119
so we're just going to continue

2434
01:56:45,119 --> 01:56:47,360
and then boom we're getting the printf

2435
01:56:47,360 --> 01:56:49,760
so basically the raise instruction uh

2436
01:56:49,760 --> 01:56:51,920
the raise function was ignored and so we

2437
01:56:51,920 --> 01:56:55,599
have the the thing but if we remember

2438
01:56:55,599 --> 01:56:58,880
correctly we had the flag dash before

2439
01:56:58,880 --> 01:57:00,800
and it's the segmentation fault that

2440
01:57:00,800 --> 01:57:02,880
added the carriage return

2441
01:57:02,880 --> 01:57:03,760
so

2442
01:57:03,760 --> 01:57:04,560
we

2443
01:57:04,560 --> 01:57:09,040
basically need to append flag dash to

2444
01:57:09,040 --> 01:57:11,520
what the output that we got so let's do

2445
01:57:11,520 --> 01:57:13,679
that

2446
01:57:22,239 --> 01:57:25,040
and this concludes

2447
01:57:25,040 --> 01:57:29,440
nicely ctf 101 and i'm right on time i

2448
01:57:29,440 --> 01:57:30,320
think

2449
01:57:30,320 --> 01:57:32,239
maybe i'm too short i don't know was i

2450
01:57:32,239 --> 01:57:35,440
supposed to be three hours or two

2451
01:57:36,840 --> 01:57:41,280
hours don't check i want to finish now

2452
01:57:47,360 --> 01:57:50,239
at one aha no but okay so

2453
01:57:50,239 --> 01:57:52,719
you guys you wanted me do you want me to

2454
01:57:52,719 --> 01:57:55,760
do it statically so do you want me to do

2455
01:57:55,760 --> 01:57:57,760
the crypto by hand and arrive at the

2456
01:57:57,760 --> 01:57:59,760
same result i can do that if you want

2457
01:57:59,760 --> 01:58:01,360
but if you want to have lunch you can go

2458
01:58:01,360 --> 01:58:02,560
and have lunch

2459
01:58:02,560 --> 01:58:04,400
says you choose

2460
01:58:04,400 --> 01:58:06,800
i see no one leaving i'll feel compelled

2461
01:58:06,800 --> 01:58:10,520
to do it statically

2462
01:58:25,679 --> 01:58:28,719
no no no no so i will i will do it like

2463
01:58:28,719 --> 01:58:30,400
let's say it's malware

2464
01:58:30,400 --> 01:58:32,080
so you don't want to run any of it

2465
01:58:32,080 --> 01:58:33,840
because you because they could hide a

2466
01:58:33,840 --> 01:58:36,000
lot of stuff in the start and everywhere

2467
01:58:36,000 --> 01:58:38,320
right if it's if you don't trust it so

2468
01:58:38,320 --> 01:58:39,520
what i'm going to do is i'm going to

2469
01:58:39,520 --> 01:58:41,679
focus on the compute function i'm going

2470
01:58:41,679 --> 01:58:43,440
to reproduce the crypto that they're

2471
01:58:43,440 --> 01:58:45,440
doing there i haven't done this in a

2472
01:58:45,440 --> 01:58:47,280
while uh so it might

2473
01:58:47,280 --> 01:58:49,199
not work we'll see

2474
01:58:49,199 --> 01:58:52,080
uh but uh and then i'm gonna try to do

2475
01:58:52,080 --> 01:58:55,520
that and see what uh what's the result

2476
01:58:55,520 --> 01:58:57,440
now

2477
01:58:57,440 --> 01:59:00,400
this looks like a stack canary

2478
01:59:00,400 --> 01:59:01,199
uh

2479
01:59:01,199 --> 01:59:06,000
because of the fs access uh cpu uh

2480
01:59:06,000 --> 01:59:07,280
thingy

2481
01:59:07,280 --> 01:59:09,760
forgot what it's named um

2482
01:59:09,760 --> 01:59:12,560
so and it's compared after the function

2483
01:59:12,560 --> 01:59:15,199
and if it's it's not valid it does a

2484
01:59:15,199 --> 01:59:17,440
stack check fail so i'm going to ignore

2485
01:59:17,440 --> 01:59:19,520
that part now the

2486
01:59:19,520 --> 01:59:21,840
the beginning of what is sent to sha 1

2487
01:59:21,840 --> 01:59:23,199
is

2488
01:59:23,199 --> 01:59:26,000
local 48 so it starts here so what i'm

2489
01:59:26,000 --> 01:59:28,000
going to do is i'm going to append all

2490
01:59:28,000 --> 01:59:31,040
of this together do i need to append 14

2491
01:59:31,040 --> 01:59:34,080
14 is the length yeah 40

2492
01:59:34,080 --> 01:59:36,159
no that's not it

2493
01:59:36,159 --> 01:59:38,800
where is 14 maybe it's happened okay

2494
01:59:38,800 --> 01:59:41,360
we'll try with and wait out so i'm gonna

2495
01:59:41,360 --> 01:59:44,560
basically just extract all of that hex

2496
01:59:44,560 --> 01:59:47,199
and then i'm gonna show on the thing and

2497
01:59:47,199 --> 01:59:49,520
we're gonna see if we arrive at the same

2498
01:59:49,520 --> 01:59:52,520
result

2499
02:01:18,639 --> 02:01:19,440
okay

2500
02:01:19,440 --> 02:01:21,679
so what i did is and i

2501
02:01:21,679 --> 02:01:24,400
started my ipython notebook

2502
02:01:24,400 --> 02:01:26,480
i did a really rough proof of concept

2503
02:01:26,480 --> 02:01:29,760
that i can hash bytes so the b here

2504
02:01:29,760 --> 02:01:31,760
means that i'm passing bytes now it

2505
02:01:31,760 --> 02:01:34,080
looks like a string but soon it's not

2506
02:01:34,080 --> 02:01:35,679
going to be a string then i'm doing a

2507
02:01:35,679 --> 02:01:38,080
digest on it so hopefully this will

2508
02:01:38,080 --> 02:01:40,239
yield to the same

2509
02:01:40,239 --> 02:01:41,440
uh

2510
02:01:41,440 --> 02:01:43,199
end result then

2511
02:01:43,199 --> 02:01:43,920
uh

2512
02:01:43,920 --> 02:01:44,960
what i'm

2513
02:01:44,960 --> 02:01:46,800
trying to that that what is happening in

2514
02:01:46,800 --> 02:01:51,159
the c in the the crack

2515
02:03:58,880 --> 02:04:00,639
i'm more and more scared that this is

2516
02:04:00,639 --> 02:04:03,280
not gonna work

2517
02:04:03,920 --> 02:04:09,480
oh i forgot the column the the quotes

2518
02:04:33,599 --> 02:04:36,560
okay now this is

2519
02:04:36,560 --> 02:04:38,480
raw strings

2520
02:04:38,480 --> 02:04:40,480
this is

2521
02:04:40,480 --> 02:04:44,119
this gonna be enough

2522
02:05:05,040 --> 02:05:08,040
okay

2523
02:05:45,440 --> 02:05:48,440
hey

2524
02:05:50,800 --> 02:05:52,800
i don't think this is what

2525
02:05:52,800 --> 02:05:54,400
we expected

2526
02:05:54,400 --> 02:05:57,960
let's compare

2527
02:06:02,880 --> 02:06:03,599
b

2528
02:06:03,599 --> 02:06:06,480
five five four eight eight b five four

2529
02:06:06,480 --> 02:06:08,960
eight eight okay so i tried and

2530
02:06:08,960 --> 02:06:13,159
downwards i'll try upwards

2531
02:06:33,119 --> 02:06:35,920
i don't think it's gonna work so there's

2532
02:06:35,920 --> 02:06:38,560
something and it could be indian-ness

2533
02:06:38,560 --> 02:06:39,920
and it could be

2534
02:06:39,920 --> 02:06:42,400
uh the way that geidra is presenting the

2535
02:06:42,400 --> 02:06:45,840
information i might need to look better

2536
02:06:45,840 --> 02:06:48,880
or the way the assembly is because guy

2537
02:06:48,880 --> 02:06:50,480
draw is showing me something but it

2538
02:06:50,480 --> 02:06:53,040
might not necessarily be

2539
02:06:53,040 --> 02:06:55,199
uh and i forgot do i have i have a

2540
02:06:55,199 --> 02:06:56,960
source code somewhere let's let's take a

2541
02:06:56,960 --> 02:06:59,840
look at the source code

2542
02:07:00,800 --> 02:07:03,119
that is cheating by the way so shouldn't

2543
02:07:03,119 --> 02:07:04,560
supposed to have the source code but i

2544
02:07:04,560 --> 02:07:08,520
don't want to end like that

2545
02:07:39,920 --> 02:07:42,560
okay so it was a it is a string so it is

2546
02:07:42,560 --> 02:07:44,560
it's a printable

2547
02:07:44,560 --> 02:07:47,760
uh thing that we're doing here that guy

2548
02:07:47,760 --> 02:07:49,679
draw can't figure it out so okay let's

2549
02:07:49,679 --> 02:07:52,800
try to convert it as such

2550
02:07:52,800 --> 02:07:55,840
yeah you see so that this is interesting

2551
02:07:55,840 --> 02:07:58,079
and this is actually a good lesson in uh

2552
02:07:58,079 --> 02:08:01,360
challenges like that so some somehow

2553
02:08:01,360 --> 02:08:04,239
the way the compiler transformed this

2554
02:08:04,239 --> 02:08:06,480
and and it might be for a lot of

2555
02:08:06,480 --> 02:08:08,079
different reasons that i don't know

2556
02:08:08,079 --> 02:08:10,480
compiler and themselves are fascinating

2557
02:08:10,480 --> 02:08:12,880
but the compiler decided that this is

2558
02:08:12,880 --> 02:08:15,520
way too inefficient and it's gonna just

2559
02:08:15,520 --> 02:08:16,480
use

2560
02:08:16,480 --> 02:08:19,280
registers to build that string so that

2561
02:08:19,280 --> 02:08:22,960
you can pass it to the sha1 function

2562
02:08:22,960 --> 02:08:26,159
but by doing so it makes them

2563
02:08:26,159 --> 02:08:28,719
look like this in the the disassembly

2564
02:08:28,719 --> 02:08:31,040
and then even in assembly they're

2565
02:08:31,040 --> 02:08:32,639
basically you know

2566
02:08:32,639 --> 02:08:34,320
raw

2567
02:08:34,320 --> 02:08:35,760
uh

2568
02:08:35,760 --> 02:08:38,480
raw x and i think they are backwards and

2569
02:08:38,480 --> 02:08:40,320
i think this is why it's not working

2570
02:08:40,320 --> 02:08:42,079
like 73

2571
02:08:42,079 --> 02:08:43,679
20

2572
02:08:43,679 --> 02:08:48,719
6 f 75 73 20 6 f75

2573
02:08:48,719 --> 02:08:50,719
no it's not it doesn't make sense 20

2574
02:08:50,719 --> 02:08:54,560
would be space but oh sk20 maybe not

2575
02:08:54,560 --> 02:08:55,599
okay

2576
02:08:55,599 --> 02:08:56,400
so

2577
02:08:56,400 --> 02:08:58,719
sorry

2578
02:08:58,880 --> 02:09:01,280
come on

2579
02:09:01,840 --> 02:09:05,159
hex 20.

2580
02:09:11,040 --> 02:09:12,079
printable

2581
02:09:12,079 --> 02:09:15,199
okay but okay so

2582
02:09:15,679 --> 02:09:19,320
do i have either

2583
02:09:43,840 --> 02:09:45,760
so we'll look at it and either instead

2584
02:09:45,760 --> 02:09:48,960
see if it's any different

2585
02:09:54,880 --> 02:09:56,320
compute

2586
02:09:56,320 --> 02:09:58,639
all right the stack

2587
02:09:58,639 --> 02:10:02,000
strings are here aha here we can

2588
02:10:02,000 --> 02:10:03,280
actually

2589
02:10:03,280 --> 02:10:07,440
cast it as a string okay

2590
02:10:08,239 --> 02:10:11,839
so if we do so

2591
02:10:12,000 --> 02:10:14,480
we can see that it's upside down

2592
02:10:14,480 --> 02:10:16,400
and again you know

2593
02:10:16,400 --> 02:10:18,320
it's probably the way the machine works

2594
02:10:18,320 --> 02:10:21,280
it points to a memory region and then uh

2595
02:10:21,280 --> 02:10:24,079
because it's a show on expects a buffer

2596
02:10:24,079 --> 02:10:26,880
so it's like this buffer starts here and

2597
02:10:26,880 --> 02:10:28,800
goes here and it's probably writing to

2598
02:10:28,800 --> 02:10:31,440
it in reverse

2599
02:10:31,440 --> 02:10:32,800
but then

2600
02:10:32,800 --> 02:10:34,400
once we'll have

2601
02:10:34,400 --> 02:10:37,759
all of the strings

2602
02:10:38,480 --> 02:10:40,560
upside down

2603
02:10:40,560 --> 02:10:43,840
so uh

2604
02:10:44,639 --> 02:10:47,599
there is no way

2605
02:10:47,599 --> 02:10:49,599
you are

2606
02:10:49,599 --> 02:10:50,480
ever

2607
02:10:50,480 --> 02:10:53,119
going to

2608
02:10:53,119 --> 02:10:55,360
figure this

2609
02:10:55,360 --> 02:10:58,560
out okay so let's write this in my

2610
02:10:58,560 --> 02:11:01,520
python instead

2611
02:11:03,040 --> 02:11:07,480
where is it here one second

2612
02:11:10,480 --> 02:11:13,480
okay

2613
02:11:24,960 --> 02:11:28,320
is there so capital and then no

2614
02:11:28,320 --> 02:11:32,000
exclamation nothing okay let's do that

2615
02:11:32,000 --> 02:11:33,840
uh whoops it's not the byte string i

2616
02:11:33,840 --> 02:11:37,280
need to add the b here let's go

2617
02:11:37,280 --> 02:11:40,960
and we got b54 so this looks like we got

2618
02:11:40,960 --> 02:11:44,079
it right let's do it and i think since i

2619
02:11:44,079 --> 02:11:45,520
already submitted

2620
02:11:45,520 --> 02:11:46,239
i

2621
02:11:46,239 --> 02:11:48,239
should have still like already submitted

2622
02:11:48,239 --> 02:11:51,320
or something

2623
02:11:57,840 --> 02:11:59,119
yeah

2624
02:11:59,119 --> 02:12:01,760
okay so you have to trust me uh on that

2625
02:12:01,760 --> 02:12:03,679
one because it says basically you

2626
02:12:03,679 --> 02:12:05,280
already submitted

2627
02:12:05,280 --> 02:12:07,360
even if you put the right or the wrong

2628
02:12:07,360 --> 02:12:08,320
answer

2629
02:12:08,320 --> 02:12:09,440
but uh

2630
02:12:09,440 --> 02:12:12,320
it is another way of doing it statically

2631
02:12:12,320 --> 02:12:15,520
unfortunately from geidra uh it was it

2632
02:12:15,520 --> 02:12:18,079
is a little bit difficult the way they

2633
02:12:18,079 --> 02:12:21,440
cast this into a char is not helping

2634
02:12:21,440 --> 02:12:24,639
us realize that it's a string but if we

2635
02:12:24,639 --> 02:12:26,560
would have realized it was a string

2636
02:12:26,560 --> 02:12:27,840
maybe oh

2637
02:12:27,840 --> 02:12:30,400
here it is look at it look at it

2638
02:12:30,400 --> 02:12:31,360
so

2639
02:12:31,360 --> 02:12:35,119
in the c code it's bad

2640
02:12:35,119 --> 02:12:36,159
but

2641
02:12:36,159 --> 02:12:37,679
in the the

2642
02:12:37,679 --> 02:12:40,719
assembly view it's okay

2643
02:12:40,719 --> 02:12:43,119
so it's possible without paying three

2644
02:12:43,119 --> 02:12:47,320
grand to do that

2645
02:12:51,440 --> 02:12:53,760
and this concludes

2646
02:12:53,760 --> 02:12:57,760
ctf 101 101 i'll uh i'll hang around a

2647
02:12:57,760 --> 02:12:59,679
little bit and feel free to come and see

2648
02:12:59,679 --> 02:13:01,840
me if you have any questions i hope you

2649
02:13:01,840 --> 02:13:04,480
learn at least a thing or two or two

2650
02:13:04,480 --> 02:13:07,280
this is the objective here so

2651
02:13:07,280 --> 02:13:11,639
and thank you for your participation

2652
02:13:19,610 --> 02:13:22,700
[Music]

2653
02:13:23,840 --> 02:13:26,840
is

2654
02:13:32,960 --> 02:13:36,029
[Music]

2655
02:13:52,560 --> 02:13:55,560
is

2656
02:14:11,040 --> 02:14:14,040
um

