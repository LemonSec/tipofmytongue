1
00:00:00,060 --> 00:00:05,699
so let's start today's topic my name is

2
00:00:02,669 --> 00:00:07,619
<font color="#E5E5E5">one and the today's topic is one step</font>

3
00:00:05,700 --> 00:00:12,679
before game hackers<font color="#CCCCCC"> into many</font><font color="#E5E5E5"> Android</font>

4
00:00:07,620 --> 00:00:17,039
emulators<font color="#CCCCCC"> so first let me</font><font color="#E5E5E5"> give a brief</font>

5
00:00:12,679 --> 00:00:19,948
<font color="#E5E5E5">self-introduction</font><font color="#CCCCCC"> I am Chinese</font><font color="#E5E5E5"> and now I</font>

6
00:00:17,039 --> 00:00:22,160
but now I live<font color="#E5E5E5"> and work in</font><font color="#CCCCCC"> Japan I work</font>

7
00:00:19,949 --> 00:00:25,699
as a security<font color="#E5E5E5"> engineer in a copper</font>

8
00:00:22,160 --> 00:00:28,820
company<font color="#E5E5E5"> called DN corporation which is</font>

9
00:00:25,699 --> 00:00:31,800
<font color="#E5E5E5">basically a mobile</font><font color="#CCCCCC"> game company</font>

10
00:00:28,820 --> 00:00:35,880
<font color="#E5E5E5">personally in private I love</font><font color="#CCCCCC"> playing</font>

11
00:00:31,800 --> 00:00:40,410
games as well as hacking games so this

12
00:00:35,880 --> 00:00:42,149
is today's<font color="#CCCCCC"> agenda</font><font color="#E5E5E5"> before we start may I</font>

13
00:00:40,410 --> 00:00:45,629
know how many of<font color="#CCCCCC"> you have ever</font><font color="#E5E5E5"> played</font>

14
00:00:42,149 --> 00:00:53,340
<font color="#CCCCCC">I'd like to play games any kind</font><font color="#E5E5E5"> of games</font>

15
00:00:45,629 --> 00:00:55,890
<font color="#CCCCCC">Oh</font><font color="#E5E5E5"> almost over you I'm so motivated so</font>

16
00:00:53,340 --> 00:00:56,850
first let me<font color="#CCCCCC"> introduce the background</font>

17
00:00:55,890 --> 00:00:59,550
<font color="#CCCCCC">the game</font>

18
00:00:56,850 --> 00:01:01,590
<font color="#CCCCCC">cheating's tread model so we've defined</font>

19
00:00:59,550 --> 00:01:03,930
three<font color="#CCCCCC"> roles</font><font color="#E5E5E5"> in the game cheating's</font><font color="#CCCCCC"> red</font>

20
00:01:01,590 --> 00:01:07,200
model the<font color="#CCCCCC"> users the cheaters</font><font color="#E5E5E5"> and the</font>

21
00:01:03,930 --> 00:01:10,049
vendors<font color="#E5E5E5"> aka the game developers so for</font>

22
00:01:07,200 --> 00:01:12,869
PC<font color="#CCCCCC"> games</font><font color="#E5E5E5"> or this videos have the full</font>

23
00:01:10,049 --> 00:01:15,330
control<font color="#CCCCCC"> over</font><font color="#E5E5E5"> their</font><font color="#CCCCCC"> PCs they have the</font>

24
00:01:12,869 --> 00:01:19,049
permission<font color="#CCCCCC"> to install</font><font color="#E5E5E5"> or run privilege</font>

25
00:01:15,330 --> 00:01:21,929
code<font color="#E5E5E5"> but on mobile devices things get a</font>

26
00:01:19,049 --> 00:01:24,030
bit different<font color="#E5E5E5"> the users usually don't</font>

27
00:01:21,930 --> 00:01:26,640
have a privileged access over their

28
00:01:24,030 --> 00:01:29,280
device devices<font color="#E5E5E5"> unless</font><font color="#CCCCCC"> they're rooted</font><font color="#E5E5E5"> or</font>

29
00:01:26,640 --> 00:01:32,100
geo broke their devices<font color="#CCCCCC"> and this is the</font>

30
00:01:29,280 --> 00:01:35,250
same for game developers<font color="#E5E5E5"> on the other</font>

31
00:01:32,100 --> 00:01:37,919
hand the cheaters<font color="#E5E5E5"> usually</font><font color="#CCCCCC"> only rooted</font><font color="#E5E5E5"> or</font>

32
00:01:35,250 --> 00:01:38,759
jailbroken device you may think<font color="#E5E5E5"> you</font>

33
00:01:37,920 --> 00:01:40,619
<font color="#E5E5E5">missing okay</font>

34
00:01:38,759 --> 00:01:42,360
then the cheaters must be the<font color="#E5E5E5"> most</font>

35
00:01:40,619 --> 00:01:45,240
powerful<font color="#CCCCCC"> nothing can stop them from</font>

36
00:01:42,360 --> 00:01:48,420
cheating<font color="#E5E5E5"> but this does</font><font color="#CCCCCC"> not mean the</font>

37
00:01:45,240 --> 00:01:51,929
<font color="#E5E5E5">cheaters are making profits actually</font><font color="#CCCCCC"> yes</font>

38
00:01:48,420 --> 00:01:54,420
that is<font color="#E5E5E5"> true that the cheaters can hack</font>

39
00:01:51,930 --> 00:01:56,700
on their own devices<font color="#CCCCCC"> but if they want</font><font color="#E5E5E5"> to</font>

40
00:01:54,420 --> 00:01:58,829
<font color="#E5E5E5">share their cheat tours to</font><font color="#CCCCCC"> the users</font>

41
00:01:56,700 --> 00:02:01,710
they will<font color="#E5E5E5"> have to persuade their users</font>

42
00:01:58,829 --> 00:02:06,710
to first<font color="#E5E5E5"> recruit or jailbreak</font><font color="#CCCCCC"> their</font>

43
00:02:01,710 --> 00:02:06,710
device firstly which is not an easy<font color="#E5E5E5"> task</font>

44
00:02:06,750 --> 00:02:12,780
so for cheaters<font color="#CCCCCC"> they think of easy way</font>

45
00:02:10,289 --> 00:02:15,480
to distribute their cheating tours<font color="#E5E5E5"> that</font>

46
00:02:12,780 --> 00:02:18,000
<font color="#E5E5E5">is the emulators here I mean emulators</font>

47
00:02:15,480 --> 00:02:21,149
like the commercial like emulators<font color="#CCCCCC"> like</font>

48
00:02:18,000 --> 00:02:24,030
BlueStacks<font color="#E5E5E5"> Knox and so you may have</font>

49
00:02:21,150 --> 00:02:29,670
<font color="#E5E5E5">heard of this emulators and I don't mean</font>

50
00:02:24,030 --> 00:02:32,310
<font color="#E5E5E5">the AVD from Android studio so</font><font color="#CCCCCC"> AVP for</font>

51
00:02:29,670 --> 00:02:35,519
<font color="#CCCCCC">Android Android</font><font color="#E5E5E5"> studio are basically for</font>

52
00:02:32,310 --> 00:02:38,490
x86<font color="#E5E5E5"> emulation or</font><font color="#CCCCCC"> four which is</font><font color="#E5E5E5"> which</font>

53
00:02:35,520 --> 00:02:43,200
does not support<font color="#E5E5E5"> apk that is built for</font>

54
00:02:38,490 --> 00:02:48,709
<font color="#CCCCCC">only arm or you can</font><font color="#E5E5E5"> build a forum</font>

55
00:02:43,200 --> 00:02:51,690
emulation in<font color="#E5E5E5"> a VD but it's</font><font color="#CCCCCC"> super slow so</font>

56
00:02:48,709 --> 00:02:53,850
this commercial<font color="#E5E5E5"> emulators like Bruce</font><font color="#CCCCCC"> Dex</font>

57
00:02:51,690 --> 00:02:56,010
and knocks they use they use a different

58
00:02:53,850 --> 00:02:58,470
<font color="#E5E5E5">technology called Houdini which is</font>

59
00:02:56,010 --> 00:03:01,260
developed by Intel<font color="#E5E5E5"> and I will</font><font color="#CCCCCC"> introduce</font>

60
00:02:58,470 --> 00:03:03,330
<font color="#E5E5E5">this further data later so for</font><font color="#CCCCCC"> this</font>

61
00:03:01,260 --> 00:03:06,390
commercial<font color="#E5E5E5"> emulators they have highly</font>

62
00:03:03,330 --> 00:03:09,390
unified environment<font color="#CCCCCC"> so you don't</font><font color="#E5E5E5"> need to</font>

63
00:03:06,390 --> 00:03:11,250
tune your software to<font color="#E5E5E5"> your tours</font>

64
00:03:09,390 --> 00:03:15,149
for different firmware<font color="#E5E5E5"> or for different</font>

65
00:03:11,250 --> 00:03:17,880
API levels etcetera<font color="#CCCCCC"> and what is better</font>

66
00:03:15,150 --> 00:03:21,989
is that<font color="#E5E5E5"> this emulators are usually very</font>

67
00:03:17,880 --> 00:03:24,209
<font color="#CCCCCC">easy to route and they are or some of</font>

68
00:03:21,989 --> 00:03:27,540
them are even shipped with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> routed</font>

69
00:03:24,209 --> 00:03:34,500
environment<font color="#E5E5E5"> in advance so this is a good</font>

70
00:03:27,540 --> 00:03:36,870
news<font color="#E5E5E5"> for the cheaters</font><font color="#CCCCCC"> so according to</font><font color="#E5E5E5"> my</font>

71
00:03:34,500 --> 00:03:38,940
investigation the most popular the<font color="#E5E5E5"> most</font>

72
00:03:36,870 --> 00:03:41,670
popular cheating approach on emulators

73
00:03:38,940 --> 00:03:45,180
is touch simulation so<font color="#E5E5E5"> that touch</font>

74
00:03:41,670 --> 00:03:45,988
simulation request requires route

75
00:03:45,180 --> 00:03:48,180
privilege

76
00:03:45,989 --> 00:03:50,220
it does require route privilege but it

77
00:03:48,180 --> 00:03:54,810
does not involve modification or

78
00:03:50,220 --> 00:03:57,269
analysis of game<font color="#E5E5E5"> of games binary that</font>

79
00:03:54,810 --> 00:04:01,830
also means touch simulation is a great

80
00:03:57,269 --> 00:04:04,140
gray zone<font color="#E5E5E5"> because you can you can see it</font>

81
00:04:01,830 --> 00:04:07,290
is<font color="#E5E5E5"> cheating but</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> hardly say it is</font>

82
00:04:04,140 --> 00:04:10,230
it is a crime it is<font color="#CCCCCC"> illegal because</font><font color="#E5E5E5"> it</font>

83
00:04:07,290 --> 00:04:14,090
does not modify the game data directory

84
00:04:10,230 --> 00:04:16,858
<font color="#E5E5E5">so and the interesting thing</font><font color="#CCCCCC"> is that</font>

85
00:04:14,090 --> 00:04:19,709
some touch simulation engine

86
00:04:16,858 --> 00:04:23,758
some even have some advanced function

87
00:04:19,709 --> 00:04:25,409
like OCR<font color="#CCCCCC"> or image recognization on the</font>

88
00:04:23,759 --> 00:04:29,909
other hand you can see<font color="#E5E5E5"> cheated by</font>

89
00:04:25,409 --> 00:04:33,150
<font color="#E5E5E5">hooking is not showing up emulators this</font>

90
00:04:29,909 --> 00:04:36,300
is because game codes are usually<font color="#E5E5E5"> native</font>

91
00:04:33,150 --> 00:04:39,448
and on commercial emulators<font color="#CCCCCC"> they use</font>

92
00:04:36,300 --> 00:04:43,289
Houdini has decided<font color="#E5E5E5"> as is to translate</font>

93
00:04:39,449 --> 00:04:44,159
<font color="#CCCCCC">arm code to x86 at runtime</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> this makes</font>

94
00:04:43,289 --> 00:04:47,128
it difficult

95
00:04:44,159 --> 00:04:53,340
hook emulators then our physical<font color="#CCCCCC"> puron</font>

96
00:04:47,129 --> 00:04:56,400
device so here comes my research purpose

97
00:04:53,340 --> 00:04:59,520
<font color="#E5E5E5">my purpose is to enable hooking on</font>

98
00:04:56,400 --> 00:05:01,620
commercial<font color="#E5E5E5"> Android emulators so you can</font>

99
00:04:59,520 --> 00:05:07,020
distribute<font color="#E5E5E5"> your teeth to cheat worse</font>

100
00:05:01,620 --> 00:05:10,009
<font color="#E5E5E5">more easy easier and this is the</font>

101
00:05:07,020 --> 00:05:12,930
emulator targets<font color="#E5E5E5"> I have investigated</font>

102
00:05:10,009 --> 00:05:16,979
<font color="#CCCCCC">they are loose there are BlueStacks Knox</font>

103
00:05:12,930 --> 00:05:20,159
<font color="#E5E5E5">and the lady</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> you can tell you you can</font>

104
00:05:16,979 --> 00:05:23,818
tell<font color="#E5E5E5"> from this table the Android version</font>

105
00:05:20,159 --> 00:05:26,719
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> emulators are very much alike</font>

106
00:05:23,819 --> 00:05:29,610
they use similar<font color="#E5E5E5"> Android versions and</font>

107
00:05:26,719 --> 00:05:32,129
also similar<font color="#CCCCCC"> hood in in versions</font><font color="#E5E5E5"> so</font>

108
00:05:29,610 --> 00:05:35,310
<font color="#E5E5E5">maybe it's just a coincidence but</font><font color="#CCCCCC"> maybe</font>

109
00:05:32,129 --> 00:05:39,270
not<font color="#E5E5E5"> this is not</font><font color="#CCCCCC"> our concern so let's</font>

110
00:05:35,310 --> 00:05:41,849
move<font color="#E5E5E5"> on to our next page if you try to</font>

111
00:05:39,270 --> 00:05:44,789
run a<font color="#E5E5E5"> current line binary on emulators</font>

112
00:05:41,849 --> 00:05:47,250
you will find it<font color="#E5E5E5"> will be executed</font>

113
00:05:44,789 --> 00:05:49,589
properly<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> because the emulators</font>

114
00:05:47,250 --> 00:05:52,620
use a feature in Linux called<font color="#CCCCCC"> bean</font>

115
00:05:49,589 --> 00:05:55,969
formats<font color="#E5E5E5"> misc</font><font color="#CCCCCC"> with this feature you can</font>

116
00:05:52,620 --> 00:05:59,610
<font color="#E5E5E5">reduce a certain binaries binaries</font>

117
00:05:55,969 --> 00:06:03,060
<font color="#E5E5E5">signature or</font><font color="#CCCCCC"> magic number with a certain</font>

118
00:05:59,610 --> 00:06:06,029
loader<font color="#E5E5E5"> so in our case when our binary</font>

119
00:06:03,060 --> 00:06:10,979
comes to emulator<font color="#E5E5E5"> you want to execute it</font>

120
00:06:06,029 --> 00:06:15,029
on<font color="#CCCCCC"> the emulator</font><font color="#E5E5E5"> as this as the slide</font>

121
00:06:10,979 --> 00:06:17,938
shows<font color="#E5E5E5"> the Houdini binary the Houdini</font>

122
00:06:15,029 --> 00:06:20,310
executable will be used<font color="#E5E5E5"> to load this on</font>

123
00:06:17,939 --> 00:06:23,250
binary execute this<font color="#E5E5E5"> on binary in this</font>

124
00:06:20,310 --> 00:06:26,940
case is easy it's easy<font color="#E5E5E5"> to inject your</font>

125
00:06:23,250 --> 00:06:28,970
library to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> targets execute</font><font color="#CCCCCC"> bowl with</font>

126
00:06:26,940 --> 00:06:33,440
air deep reload feature

127
00:06:28,970 --> 00:06:36,590
and thus<font color="#E5E5E5"> to perform</font><font color="#CCCCCC"> a hooking from your</font>

128
00:06:33,440 --> 00:06:39,950
injected library<font color="#CCCCCC"> however there</font><font color="#E5E5E5"> are other</font>

129
00:06:36,590 --> 00:06:43,340
methods<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> popular</font><font color="#CCCCCC"> used to doing</font>

130
00:06:39,950 --> 00:06:46,280
who used to do hook like<font color="#CCCCCC"> peaches</font><font color="#E5E5E5"> but if</font>

131
00:06:43,340 --> 00:06:48,349
you try<font color="#E5E5E5"> to use x86 versions</font><font color="#CCCCCC"> PJs you</font>

132
00:06:46,280 --> 00:06:50,960
won't make it<font color="#E5E5E5"> work directly because you</font>

133
00:06:48,350 --> 00:06:56,600
<font color="#E5E5E5">can't load your arm like binary with the</font>

134
00:06:50,960 --> 00:07:00,830
x86<font color="#CCCCCC"> dr open and if you compile a virgin</font>

135
00:06:56,600 --> 00:07:03,620
speech ace<font color="#E5E5E5"> because</font><font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> virgin speeches</font>

136
00:07:00,830 --> 00:07:06,500
also we<font color="#E5E5E5"> were wrong on the emulators</font><font color="#CCCCCC"> but</font>

137
00:07:03,620 --> 00:07:10,250
you<font color="#E5E5E5"> steer you have finally</font><font color="#CCCCCC"> us diafail</font>

138
00:07:06,500 --> 00:07:13,430
here because in fact<font color="#E5E5E5"> the peach</font><font color="#CCCCCC"> face is</font>

139
00:07:10,250 --> 00:07:16,130
very<font color="#E5E5E5"> much dependent on the registers on</font>

140
00:07:13,430 --> 00:07:20,690
architectures so Houdini it seems

141
00:07:16,130 --> 00:07:23,690
Houdini seems to fail to translate arms

142
00:07:20,690 --> 00:07:28,400
<font color="#E5E5E5">peaches correctly to x86 versions</font>

143
00:07:23,690 --> 00:07:30,530
peaches so this also doesn't<font color="#E5E5E5"> work</font><font color="#CCCCCC"> but</font>

144
00:07:28,400 --> 00:07:33,409
anyway at least we<font color="#E5E5E5"> have the air deep</font>

145
00:07:30,530 --> 00:07:36,549
reload feature work<font color="#E5E5E5"> so we can so can we</font>

146
00:07:33,410 --> 00:07:38,660
use also use air deal preload feature to

147
00:07:36,550 --> 00:07:39,980
inject your library<font color="#E5E5E5"> to a java</font>

148
00:07:38,660 --> 00:07:42,440
application<font color="#CCCCCC"> not a</font><font color="#E5E5E5"> command-line</font>

149
00:07:39,980 --> 00:07:43,880
<font color="#E5E5E5">application</font><font color="#CCCCCC"> so the answer is</font><font color="#E5E5E5"> no and</font><font color="#CCCCCC"> i</font>

150
00:07:42,440 --> 00:07:48,440
will show why the answer<font color="#CCCCCC"> is knowing the</font>

151
00:07:43,880 --> 00:07:51,860
following slice<font color="#CCCCCC"> so this is a normal</font><font color="#E5E5E5"> java</font>

152
00:07:48,440 --> 00:07:54,169
application startup process<font color="#CCCCCC"> it is we are</font>

153
00:07:51,860 --> 00:07:56,570
known that there is a process<font color="#CCCCCC"> called i</font>

154
00:07:54,169 --> 00:07:58,400
<font color="#E5E5E5">got in</font><font color="#CCCCCC"> android and every java</font>

155
00:07:56,570 --> 00:08:01,040
application is focused<font color="#E5E5E5"> on it</font>

156
00:07:58,400 --> 00:08:03,289
the<font color="#E5E5E5"> basics process is that</font><font color="#CCCCCC"> zygote runs</font>

157
00:08:01,040 --> 00:08:07,400
the loop and when the startup request

158
00:08:03,290 --> 00:08:09,230
comes from activity manager<font color="#CCCCCC"> the</font><font color="#E5E5E5"> zygote</font>

159
00:08:07,400 --> 00:08:11,840
<font color="#CCCCCC">we have yourself</font><font color="#E5E5E5"> and initialize</font>

160
00:08:09,230 --> 00:08:14,090
<font color="#CCCCCC">houdini you can see</font><font color="#E5E5E5"> the good process is</font>

161
00:08:11,840 --> 00:08:17,150
initialized<font color="#CCCCCC"> we're before</font><font color="#E5E5E5"> launching the</font>

162
00:08:14,090 --> 00:08:19,549
<font color="#E5E5E5">application so setting</font><font color="#CCCCCC"> early private</font>

163
00:08:17,150 --> 00:08:24,010
environment<font color="#E5E5E5"> variable before launching</font>

164
00:08:19,550 --> 00:08:24,010
such a application will cause no change

165
00:08:24,400 --> 00:08:31,880
<font color="#CCCCCC">anyway android in fact they it</font><font color="#E5E5E5"> provide a</font>

166
00:08:28,690 --> 00:08:34,219
<font color="#E5E5E5">workaround to enable air the pre pre</font>

167
00:08:31,880 --> 00:08:36,500
load feature<font color="#E5E5E5"> when you</font><font color="#CCCCCC"> start a java</font>

168
00:08:34,219 --> 00:08:38,930
application<font color="#CCCCCC"> so it's called</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Rebbe's</font>

169
00:08:36,500 --> 00:08:42,120
system property<font color="#E5E5E5"> so you can read set a</font>

170
00:08:38,929 --> 00:08:45,439
<font color="#E5E5E5">web system property to air the</font>

171
00:08:42,120 --> 00:08:48,329
equal the library<font color="#E5E5E5"> you want to inject and</font>

172
00:08:45,439 --> 00:08:50,579
<font color="#E5E5E5">when you set this</font><font color="#CCCCCC"> rep property the start</font>

173
00:08:48,329 --> 00:08:52,829
process<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> little</font><font color="#CCCCCC"> bit different</font><font color="#E5E5E5"> so</font>

174
00:08:50,579 --> 00:08:55,769
that this time<font color="#CCCCCC"> the zygote is still</font>

175
00:08:52,829 --> 00:08:57,388
listen listening<font color="#E5E5E5"> at the socket and</font>

176
00:08:55,769 --> 00:08:59,399
they're ready to<font color="#E5E5E5"> rock yourself</font><font color="#CCCCCC"> whenever</font>

177
00:08:57,389 --> 00:09:02,399
<font color="#E5E5E5">a startup request comes</font>

178
00:08:59,399 --> 00:09:04,980
but when itself in the child

179
00:09:02,399 --> 00:09:09,839
<font color="#E5E5E5">process instead of initialized the</font>

180
00:09:04,980 --> 00:09:12,509
application<font color="#E5E5E5"> its execute the</font><font color="#CCCCCC"> a PP process</font>

181
00:09:09,839 --> 00:09:15,240
binary with share so of course when you

182
00:09:12,509 --> 00:09:17,100
are<font color="#CCCCCC"> executing</font><font color="#E5E5E5"> a command with share</font><font color="#CCCCCC"> the</font>

183
00:09:15,240 --> 00:09:20,069
share we first of all<font color="#E5E5E5"> firstly fork</font>

184
00:09:17,100 --> 00:09:23,339
itself so the relation<font color="#CCCCCC"> among this this</font>

185
00:09:20,069 --> 00:09:26,029
<font color="#CCCCCC">processes will</font><font color="#E5E5E5"> finally look like this</font>

186
00:09:23,339 --> 00:09:28,350
picture<font color="#E5E5E5"> so the direct current of the</font>

187
00:09:26,029 --> 00:09:35,339
application process<font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually share</font>

188
00:09:28,350 --> 00:09:37,800
instead of zygote and this is the this

189
00:09:35,339 --> 00:09:39,809
is<font color="#E5E5E5"> a detail of the course deck you</font><font color="#CCCCCC"> are</font>

190
00:09:37,800 --> 00:09:42,359
see after the I got<font color="#E5E5E5"> fault is self a</font>

191
00:09:39,809 --> 00:09:44,430
function called as the<font color="#CCCCCC"> exit</font><font color="#E5E5E5"> application</font>

192
00:09:42,360 --> 00:09:46,889
will<font color="#CCCCCC"> record in this function it</font>

193
00:09:44,430 --> 00:09:50,189
concatenates some command-line strings

194
00:09:46,889 --> 00:09:53,819
and executed with<font color="#E5E5E5"> share you can see that</font>

195
00:09:50,189 --> 00:09:56,939
the a<font color="#CCCCCC"> PP process binary is executed by</font>

196
00:09:53,819 --> 00:10:02,998
<font color="#E5E5E5">sheer with - - application parameters</font>

197
00:09:56,939 --> 00:10:06,509
<font color="#E5E5E5">here so so it looks fine that if you</font>

198
00:10:02,999 --> 00:10:10,259
work<font color="#CCCCCC"> if you start the app with</font><font color="#E5E5E5"> your app</font>

199
00:10:06,509 --> 00:10:13,829
with<font color="#CCCCCC"> web</font><font color="#E5E5E5"> property you can take advantage</font>

200
00:10:10,259 --> 00:10:16,589
of LD preload<font color="#E5E5E5"> but actually if you</font><font color="#CCCCCC"> look</font>

201
00:10:13,829 --> 00:10:18,809
if you<font color="#E5E5E5"> look carefully to this come</font>

202
00:10:16,589 --> 00:10:21,449
<font color="#E5E5E5">online so this command this command is</font>

203
00:10:18,809 --> 00:10:24,959
this<font color="#CCCCCC"> sure command is the final share</font>

204
00:10:21,449 --> 00:10:30,089
command when you start an application<font color="#E5E5E5"> by</font>

205
00:10:24,959 --> 00:10:32,819
setting the<font color="#E5E5E5"> wrap property</font><font color="#CCCCCC"> so look</font>

206
00:10:30,089 --> 00:10:37,350
<font color="#E5E5E5">carefully the the system the system</font>

207
00:10:32,819 --> 00:10:40,378
being share this<font color="#CCCCCC"> binary is x86 version</font>

208
00:10:37,350 --> 00:10:43,769
and the library<font color="#E5E5E5"> you intended to inject</font>

209
00:10:40,379 --> 00:10:45,480
<font color="#E5E5E5">is</font><font color="#CCCCCC"> um version so this actually won't do</font>

210
00:10:43,769 --> 00:10:50,370
the trick<font color="#CCCCCC"> it won't load your arm</font>

211
00:10:45,480 --> 00:10:54,779
<font color="#E5E5E5">versions binary to your target process</font>

212
00:10:50,370 --> 00:10:56,790
so so in order to inject an<font color="#CCCCCC"> armed</font>

213
00:10:54,779 --> 00:10:59,610
library<font color="#E5E5E5"> I'm afraid we have</font><font color="#CCCCCC"> to</font>

214
00:10:56,790 --> 00:11:06,930
investigate more about<font color="#E5E5E5"> how Houdini work</font>

215
00:10:59,610 --> 00:11:09,689
how could in work on emulators<font color="#E5E5E5"> so again</font>

216
00:11:06,930 --> 00:11:13,019
this is the this<font color="#CCCCCC"> is the house I go to</font>

217
00:11:09,689 --> 00:11:16,139
start is this is the common<font color="#E5E5E5"> this is the</font>

218
00:11:13,019 --> 00:11:19,649
common for both Android<font color="#E5E5E5"> 5 and Android 4</font>

219
00:11:16,139 --> 00:11:23,430
which are used on this commercial

220
00:11:19,649 --> 00:11:26,850
<font color="#E5E5E5">emulators version the OS version</font><font color="#CCCCCC"> I won't</font>

221
00:11:23,430 --> 00:11:30,748
go into detail in of this of this course

222
00:11:26,850 --> 00:11:36,600
tag but note that Houdini<font color="#CCCCCC"> still haven't</font>

223
00:11:30,749 --> 00:11:39,240
interacted with this part yet and after

224
00:11:36,600 --> 00:11:40,980
the application<font color="#E5E5E5"> startup</font><font color="#CCCCCC"> rig the</font>

225
00:11:39,240 --> 00:11:42,870
<font color="#E5E5E5">application startup request from</font>

226
00:11:40,980 --> 00:11:45,059
activity manager<font color="#E5E5E5"> is received as I got</font>

227
00:11:42,870 --> 00:11:47,759
 yourself and is here that the

228
00:11:45,059 --> 00:11:50,339
Houdini is initialized<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the Android</font>

229
00:11:47,759 --> 00:11:53,040
5 and from<font color="#E5E5E5"> here</font><font color="#CCCCCC"> the Android 5 and</font>

230
00:11:50,339 --> 00:11:55,170
Android 4 behave different for Android 5

231
00:11:53,040 --> 00:11:57,389
here is the Android file<font color="#E5E5E5"> picture Houdini</font>

232
00:11:55,170 --> 00:12:00,209
is initialized by by the function called

233
00:11:57,389 --> 00:12:02,309
is marked<font color="#E5E5E5"> red</font><font color="#CCCCCC"> it's called</font><font color="#E5E5E5"> initialized</font>

234
00:12:00,209 --> 00:12:04,768
native<font color="#E5E5E5"> bridge in fact there</font><font color="#CCCCCC"> is another</font>

235
00:12:02,309 --> 00:12:09,149
stage called<font color="#CCCCCC"> traditionalized face</font><font color="#E5E5E5"> but</font>

236
00:12:04,769 --> 00:12:11,519
let's just<font color="#CCCCCC"> ignore it for</font><font color="#E5E5E5"> simplicity</font><font color="#CCCCCC"> so</font>

237
00:12:09,149 --> 00:12:13,199
what initialize<font color="#E5E5E5"> bridge what this</font>

238
00:12:11,519 --> 00:12:15,569
function<font color="#CCCCCC"> do is very simple it just</font><font color="#E5E5E5"> to</font>

239
00:12:13,199 --> 00:12:17,248
<font color="#CCCCCC">register some core backs to a structure</font>

240
00:12:15,569 --> 00:12:19,589
called native bridge

241
00:12:17,249 --> 00:12:21,779
core backs so note there are two

242
00:12:19,589 --> 00:12:23,939
<font color="#CCCCCC">functions very important</font><font color="#E5E5E5"> is called load</font>

243
00:12:21,779 --> 00:12:26,819
<font color="#CCCCCC">library and get trampoline you can</font>

244
00:12:23,939 --> 00:12:30,120
consider it you<font color="#CCCCCC"> can consider</font><font color="#E5E5E5"> them as the</font>

245
00:12:26,819 --> 00:12:32,490
as the<font color="#E5E5E5"> arm</font><font color="#CCCCCC"> versions</font><font color="#E5E5E5"> D are open and D are</font>

246
00:12:30,120 --> 00:12:35,189
seen so each time the Java layer want to

247
00:12:32,490 --> 00:12:39,660
load a library it<font color="#E5E5E5"> will call arm library</font>

248
00:12:35,189 --> 00:12:42,629
<font color="#E5E5E5">we</font><font color="#CCCCCC"> Accord these dysfunctions</font><font color="#E5E5E5"> to and</font>

249
00:12:39,660 --> 00:12:46,499
without handle the different<font color="#E5E5E5"> of</font>

250
00:12:42,629 --> 00:12:48,749
architecture<font color="#CCCCCC"> so if you look at lib</font>

251
00:12:46,499 --> 00:12:51,329
Houdini<font color="#CCCCCC"> dota so far</font><font color="#E5E5E5"> you will find a</font>

252
00:12:48,749 --> 00:12:54,480
structure<font color="#E5E5E5"> called native bridge interface</font>

253
00:12:51,329 --> 00:12:56,638
<font color="#E5E5E5">is exported and some function pointers</font>

254
00:12:54,480 --> 00:12:58,829
are there<font color="#E5E5E5"> so this function pointers will</font>

255
00:12:56,639 --> 00:13:01,999
eventually be registered<font color="#CCCCCC"> to the this</font>

256
00:12:58,829 --> 00:13:04,559
native bridge core back structure

257
00:13:01,999 --> 00:13:09,119
on the other<font color="#E5E5E5"> way</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> other hand the</font>

258
00:13:04,559 --> 00:13:12,238
for Android for<font color="#CCCCCC"> 404</font><font color="#E5E5E5"> version with DVM</font><font color="#CCCCCC"> so</font>

259
00:13:09,119 --> 00:13:15,479
at<font color="#E5E5E5"> that</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> the Android developers dear</font>

260
00:13:12,239 --> 00:13:18,139
didn't they didn't consider they haven't

261
00:13:15,479 --> 00:13:20,249
considered<font color="#E5E5E5"> the cross-platform</font>

262
00:13:18,139 --> 00:13:23,689
<font color="#E5E5E5">implementations they didn't expect that</font>

263
00:13:20,249 --> 00:13:27,179
<font color="#CCCCCC">I'm sure we're wrong on</font><font color="#E5E5E5"> x86 version</font>

264
00:13:23,689 --> 00:13:32,159
<font color="#E5E5E5">device so in this case you have to</font>

265
00:13:27,179 --> 00:13:34,409
modify the DVM DBMS code<font color="#CCCCCC"> yourself how</font>

266
00:13:32,159 --> 00:13:38,459
you<font color="#E5E5E5"> modify it is quite simple so there</font>

267
00:13:34,409 --> 00:13:41,220
is a DVM load native code there and<font color="#E5E5E5"> you</font>

268
00:13:38,459 --> 00:13:43,138
can insert a function<font color="#E5E5E5"> called who</font><font color="#CCCCCC"> hook</font>

269
00:13:41,220 --> 00:13:45,329
<font color="#E5E5E5">the</font><font color="#CCCCCC"> year open Houdini hook they are open</font>

270
00:13:43,139 --> 00:13:48,209
and what<font color="#E5E5E5"> this function do is quite</font>

271
00:13:45,329 --> 00:13:50,638
straightforward<font color="#CCCCCC"> if we're first</font><font color="#E5E5E5"> first</font>

272
00:13:48,209 --> 00:13:53,789
they call the<font color="#E5E5E5"> x86 versions</font><font color="#CCCCCC"> do open to</font>

273
00:13:50,639 --> 00:13:56,249
open<font color="#CCCCCC"> the library</font><font color="#E5E5E5"> and if this D open</font>

274
00:13:53,789 --> 00:13:59,309
failed<font color="#E5E5E5"> it were in</font><font color="#CCCCCC"> each Houdini and used</font>

275
00:13:56,249 --> 00:14:02,909
hood in East year open and<font color="#CCCCCC"> Houdini steer</font>

276
00:13:59,309 --> 00:14:05,850
<font color="#E5E5E5">open is this is marked as read</font><font color="#CCCCCC"> it's</font>

277
00:14:02,909 --> 00:14:08,600
called<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> his name is DVM</font><font color="#CCCCCC"> to HD</font>

278
00:14:05,850 --> 00:14:12,059
<font color="#CCCCCC">tear</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> and there is also a function</font>

279
00:14:08,600 --> 00:14:14,759
similar to<font color="#E5E5E5"> DSM is called DVM to HDD are</font>

280
00:14:12,059 --> 00:14:19,100
same and this are these<font color="#E5E5E5"> functions are</font>

281
00:14:14,759 --> 00:14:19,100
registered in Houdini<font color="#CCCCCC"> indeed hook in it</font>

282
00:14:20,299 --> 00:14:27,869
so this<font color="#E5E5E5"> is basically how Houdini is</font>

283
00:14:24,689 --> 00:14:30,868
initialized emulators<font color="#E5E5E5"> and during my</font>

284
00:14:27,869 --> 00:14:33,509
investigations I found some<font color="#E5E5E5"> interesting</font>

285
00:14:30,869 --> 00:14:36,209
facts<font color="#E5E5E5"> so there</font><font color="#CCCCCC"> are as far</font><font color="#E5E5E5"> as I know</font>

286
00:14:33,509 --> 00:14:39,179
<font color="#CCCCCC">Intel does not</font><font color="#E5E5E5"> so Houdini is developed</font>

287
00:14:36,209 --> 00:14:41,399
by Intel and Intel actually does not

288
00:14:39,179 --> 00:14:46,079
provide<font color="#E5E5E5"> commercial license for Houdini</font>

289
00:14:41,399 --> 00:14:47,819
library publicly so as you can<font color="#E5E5E5"> see there</font>

290
00:14:46,079 --> 00:14:48,929
is<font color="#E5E5E5"> another emulator very famous emulator</font>

291
00:14:47,819 --> 00:14:51,029
called genymotion

292
00:14:48,929 --> 00:14:53,850
which is also super famous but not

293
00:14:51,029 --> 00:14:55,769
<font color="#E5E5E5">included in my research</font><font color="#CCCCCC"> because it is</font>

294
00:14:53,850 --> 00:14:58,529
not<font color="#E5E5E5"> bundled with</font><font color="#CCCCCC"> the Houdini when</font>

295
00:14:55,769 --> 00:15:03,539
released in order<font color="#CCCCCC"> to avoid the violence</font>

296
00:14:58,529 --> 00:15:05,819
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> interest license instead it</font><font color="#CCCCCC"> will</font>

297
00:15:03,539 --> 00:15:07,649
hint you to<font color="#CCCCCC"> download the Houdini binary</font>

298
00:15:05,819 --> 00:15:10,709
yourself<font color="#E5E5E5"> some square after you download</font>

299
00:15:07,649 --> 00:15:13,319
their software<font color="#E5E5E5"> emulations so this is if</font>

300
00:15:10,709 --> 00:15:14,150
not efficient<font color="#CCCCCC"> for</font><font color="#E5E5E5"> users so genymotion is</font>

301
00:15:13,319 --> 00:15:17,959
not a main

302
00:15:14,150 --> 00:15:20,810
in craft foam<font color="#CCCCCC"> but on the other hand</font><font color="#E5E5E5"> you</font>

303
00:15:17,960 --> 00:15:23,150
can see Bruce<font color="#E5E5E5"> Dex it is using who live</font>

304
00:15:20,810 --> 00:15:26,989
Houdini it is using Houdini<font color="#E5E5E5"> while</font>

305
00:15:23,150 --> 00:15:29,660
released<font color="#E5E5E5"> and delivery or not it seems</font>

306
00:15:26,990 --> 00:15:33,260
<font color="#E5E5E5">that is trying to hide the Houdini by</font>

307
00:15:29,660 --> 00:15:37,819
the<font color="#E5E5E5"> wrist so if you if you look at the</font>

308
00:15:33,260 --> 00:15:40,640
reverse the by<font color="#CCCCCC"> live DVM daughter so far</font>

309
00:15:37,820 --> 00:15:43,730
in Bruce<font color="#E5E5E5"> Tex</font><font color="#CCCCCC"> you can find a code like</font>

310
00:15:40,640 --> 00:15:46,880
it's trying to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> open a library called</font>

311
00:15:43,730 --> 00:15:49,370
<font color="#CCCCCC">Lib 3 be trans dot</font><font color="#E5E5E5"> ESO and if this</font><font color="#CCCCCC"> DA</font>

312
00:15:46,880 --> 00:15:52,430
open fail<font color="#E5E5E5"> it will tell you leave Houdini</font>

313
00:15:49,370 --> 00:15:56,120
<font color="#E5E5E5">library's load is failed it does not</font>

314
00:15:52,430 --> 00:15:58,270
consist consistent so actually this

315
00:15:56,120 --> 00:16:01,340
<font color="#E5E5E5">leaves will be chance daughter so is</font>

316
00:15:58,270 --> 00:16:07,610
<font color="#E5E5E5">live Houdini dot s also they somehow</font>

317
00:16:01,340 --> 00:16:10,760
want to hide it<font color="#CCCCCC"> and phonics</font><font color="#E5E5E5"> they packed</font>

318
00:16:07,610 --> 00:16:12,530
the<font color="#E5E5E5"> Lib DVM dot there so far but if</font><font color="#CCCCCC"> you</font>

319
00:16:10,760 --> 00:16:20,480
<font color="#E5E5E5">unpack it is basically doing the same</font>

320
00:16:12,530 --> 00:16:23,500
<font color="#E5E5E5">thing as BlueStacks so the next</font><font color="#CCCCCC"> test</font>

321
00:16:20,480 --> 00:16:26,840
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the let's go</font><font color="#CCCCCC"> to the cooking</font>

322
00:16:23,500 --> 00:16:30,500
cooking stuff<font color="#E5E5E5"> so there are very many</font>

323
00:16:26,840 --> 00:16:33,560
famous cooking frameworks existed like

324
00:16:30,500 --> 00:16:37,100
<font color="#E5E5E5">exposed</font><font color="#CCCCCC"> Frida</font><font color="#E5E5E5"> and substrates some</font>

325
00:16:33,560 --> 00:16:40,109
typical<font color="#CCCCCC"> wines</font><font color="#E5E5E5"> so expose</font>

326
00:16:37,100 --> 00:16:44,310
<font color="#CCCCCC">usually is only</font><font color="#E5E5E5"> used for</font><font color="#CCCCCC"> Java</font>

327
00:16:40,110 --> 00:16:49,350
applications for cooking<font color="#E5E5E5"> but I will talk</font>

328
00:16:44,310 --> 00:16:53,010
this later to you use exposed to utilize

329
00:16:49,350 --> 00:16:56,100
to enable a native cooking<font color="#E5E5E5"> so and the</font>

330
00:16:53,010 --> 00:16:59,939
second<font color="#E5E5E5"> one the exposed</font><font color="#CCCCCC"> works by</font>

331
00:16:56,100 --> 00:17:03,270
substitute the a PP process and it<font color="#E5E5E5"> will</font>

332
00:16:59,940 --> 00:17:06,680
load its own<font color="#CCCCCC"> JA fires in this</font><font color="#E5E5E5"> modified</font>

333
00:17:03,270 --> 00:17:09,720
<font color="#CCCCCC">MPP process and once I got itself</font>

334
00:17:06,680 --> 00:17:11,610
<font color="#E5E5E5">so all of the MIT makes sure that</font><font color="#CCCCCC"> all of</font>

335
00:17:09,720 --> 00:17:16,110
the applications<font color="#CCCCCC"> fourth ones I got</font><font color="#E5E5E5"> will</font>

336
00:17:11,609 --> 00:17:18,780
load the JA fire in advance so and

337
00:17:16,109 --> 00:17:22,198
another one is<font color="#CCCCCC"> Frieda and Frieda is the</font>

338
00:17:18,780 --> 00:17:24,500
is my person is my<font color="#E5E5E5"> favorites cooking</font>

339
00:17:22,199 --> 00:17:27,780
framework is instrumentation<font color="#E5E5E5"> framework</font>

340
00:17:24,500 --> 00:17:30,330
<font color="#CCCCCC">so is it more most can do everything</font><font color="#E5E5E5"> you</font>

341
00:17:27,780 --> 00:17:32,879
<font color="#E5E5E5">can use it instrument on your desktop on</font>

342
00:17:30,330 --> 00:17:35,159
<font color="#E5E5E5">iOS Android and</font><font color="#CCCCCC"> you can use it to</font>

343
00:17:32,880 --> 00:17:38,220
<font color="#E5E5E5">instruments the Java layer and you can</font>

344
00:17:35,160 --> 00:17:41,430
use<font color="#CCCCCC"> it to instrument</font><font color="#E5E5E5"> the native layer so</font>

345
00:17:38,220 --> 00:17:43,800
but the<font color="#CCCCCC"> bad thing</font><font color="#E5E5E5"> for cheaters</font><font color="#CCCCCC"> they</font>

346
00:17:41,430 --> 00:17:48,080
don't want use<font color="#CCCCCC"> Freda</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> cheesy don't</font>

347
00:17:43,800 --> 00:17:51,149
want you use freedom because freedom act

348
00:17:48,080 --> 00:17:53,490
<font color="#CCCCCC">Freda act as a</font><font color="#E5E5E5"> client side and the</font>

349
00:17:51,150 --> 00:17:56,640
server side<font color="#E5E5E5"> so you have to basically you</font>

350
00:17:53,490 --> 00:17:59,640
have to connect your pieces with USB to

351
00:17:56,640 --> 00:18:02,990
your device<font color="#CCCCCC"> and use your pcs to control</font>

352
00:17:59,640 --> 00:18:06,560
the behavior of<font color="#E5E5E5"> your device so you can't</font>

353
00:18:02,990 --> 00:18:09,300
develop<font color="#CCCCCC"> cheat worse by Freda and</font>

354
00:18:06,560 --> 00:18:11,190
distribute it to<font color="#E5E5E5"> your users easily you</font>

355
00:18:09,300 --> 00:18:13,980
require your it<font color="#E5E5E5"> will require your user</font>

356
00:18:11,190 --> 00:18:17,460
to plug your USB properly and have a

357
00:18:13,980 --> 00:18:20,340
rooted<font color="#E5E5E5"> form and have a PC</font><font color="#CCCCCC"> so it's not</font>

358
00:18:17,460 --> 00:18:23,760
preferable<font color="#E5E5E5"> for cheaters and what's more</font>

359
00:18:20,340 --> 00:18:26,220
than<font color="#CCCCCC"> Frida said the the author said they</font>

360
00:18:23,760 --> 00:18:28,500
won't support<font color="#E5E5E5"> emulators instrumentation</font>

361
00:18:26,220 --> 00:18:30,510
in foreseeable future it's not their

362
00:18:28,500 --> 00:18:34,710
priority<font color="#E5E5E5"> and this is on their github</font>

363
00:18:30,510 --> 00:18:37,260
issues and substrate is kind of<font color="#E5E5E5"> it's</font>

364
00:18:34,710 --> 00:18:40,350
also a<font color="#E5E5E5"> good one</font><font color="#CCCCCC"> works on Android</font>

365
00:18:37,260 --> 00:18:43,320
it works by fake the<font color="#CCCCCC"> lip lock dot and so</font>

366
00:18:40,350 --> 00:18:47,840
far so<font color="#E5E5E5"> every Java Java application will</font>

367
00:18:43,320 --> 00:18:50,340
load this fake<font color="#CCCCCC"> le log dot ESO fire</font><font color="#E5E5E5"> to</font>

368
00:18:47,840 --> 00:18:53,879
achieve the injection

369
00:18:50,340 --> 00:18:56,480
so but it's kind of outdated<font color="#CCCCCC"> it</font><font color="#E5E5E5"> only</font>

370
00:18:53,880 --> 00:19:00,360
woke up to Android 4.4 if I recall

371
00:18:56,480 --> 00:19:02,280
correctly and if you want to make it use

372
00:19:00,360 --> 00:19:03,629
<font color="#CCCCCC">with</font><font color="#E5E5E5"> emulate make it work with</font><font color="#CCCCCC"> the</font>

373
00:19:02,280 --> 00:19:06,210
<font color="#E5E5E5">emulator so you have to do some</font>

374
00:19:03,630 --> 00:19:10,200
modification yourselves<font color="#E5E5E5"> so here comes my</font>

375
00:19:06,210 --> 00:19:13,740
my<font color="#CCCCCC"> propose so now this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the normal</font>

376
00:19:10,200 --> 00:19:16,680
approach for how do you do hooking so it

377
00:19:13,740 --> 00:19:18,870
decides beside the LD preload trick you

378
00:19:16,680 --> 00:19:22,260
can also do<font color="#E5E5E5"> hooking using P trace right</font>

379
00:19:18,870 --> 00:19:24,899
<font color="#E5E5E5">so the basic idea is</font><font color="#CCCCCC"> to use P trace to</font>

380
00:19:22,260 --> 00:19:27,030
attach to your<font color="#E5E5E5"> target process and call</font>

381
00:19:24,900 --> 00:19:30,510
the<font color="#CCCCCC"> DA open in inside the target</font><font color="#E5E5E5"> process</font>

382
00:19:27,030 --> 00:19:35,850
<font color="#E5E5E5">to load your injection library and in</font>

383
00:19:30,510 --> 00:19:40,080
<font color="#E5E5E5">the injection library you modify the</font>

384
00:19:35,850 --> 00:19:44,669
<font color="#E5E5E5">function the function entering point so</font>

385
00:19:40,080 --> 00:19:47,610
that's the hooking part so for so on<font color="#E5E5E5"> an</font>

386
00:19:44,670 --> 00:19:50,250
emulator is only one step<font color="#E5E5E5"> it's only one</font>

387
00:19:47,610 --> 00:19:54,060
<font color="#E5E5E5">step further</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> hooking so it's the</font>

388
00:19:50,250 --> 00:19:56,280
same first you use P trace to attach x86

389
00:19:54,060 --> 00:19:59,370
versions<font color="#E5E5E5"> PJs to attach to your target</font>

390
00:19:56,280 --> 00:20:02,550
<font color="#CCCCCC">process and you court the air open</font><font color="#E5E5E5"> to</font>

391
00:19:59,370 --> 00:20:05,340
load x86 versions<font color="#E5E5E5"> your x86 versions</font>

392
00:20:02,550 --> 00:20:09,659
injection library and the inside your

393
00:20:05,340 --> 00:20:13,290
<font color="#E5E5E5">inside your x86 versions the library you</font>

394
00:20:09,660 --> 00:20:15,480
can find<font color="#CCCCCC"> you can load the</font><font color="#E5E5E5"> leap leap</font>

395
00:20:13,290 --> 00:20:19,350
Houdini dot assault and to find<font color="#CCCCCC"> the leaf</font>

396
00:20:15,480 --> 00:20:22,920
<font color="#E5E5E5">coordinated</font><font color="#CCCCCC"> esos</font><font color="#E5E5E5"> dear open inside it and</font>

397
00:20:19,350 --> 00:20:25,620
use this tear open to<font color="#E5E5E5"> opening</font><font color="#CCCCCC"> your arm</font>

398
00:20:22,920 --> 00:20:29,250
versions injection library and inside

399
00:20:25,620 --> 00:20:31,350
this this real injection library that

400
00:20:29,250 --> 00:20:39,380
you can<font color="#E5E5E5"> hook your phone you can</font><font color="#CCCCCC"> do your</font>

401
00:20:31,350 --> 00:20:43,469
<font color="#CCCCCC">hook hooking works so</font><font color="#E5E5E5"> so my</font>

402
00:20:39,380 --> 00:20:46,350
implementation<font color="#CCCCCC"> is based on this</font><font color="#E5E5E5"> a method</font>

403
00:20:43,470 --> 00:20:49,050
but after I implemented it<font color="#E5E5E5"> I found there</font>

404
00:20:46,350 --> 00:20:51,899
is a there is<font color="#CCCCCC"> a other</font><font color="#E5E5E5"> process there is</font>

405
00:20:49,050 --> 00:20:55,200
<font color="#CCCCCC">other way</font><font color="#E5E5E5"> to achieve achieve this goal</font>

406
00:20:51,900 --> 00:21:00,440
<font color="#E5E5E5">so you can you utilize exposed so Expo</font>

407
00:20:55,200 --> 00:21:03,400
Expo space<font color="#E5E5E5"> basically it works for x x86</font>

408
00:21:00,440 --> 00:21:10,570
<font color="#E5E5E5">Android Android</font><font color="#CCCCCC"> versions</font>

409
00:21:03,400 --> 00:21:13,510
and so the key the key<font color="#CCCCCC"> point</font><font color="#E5E5E5"> to hookah</font>

410
00:21:10,570 --> 00:21:15,429
<font color="#E5E5E5">emulator is to inject</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> the most</font>

411
00:21:13,510 --> 00:21:17,890
<font color="#CCCCCC">difficult thing is to inject your</font><font color="#E5E5E5"> arm</font>

412
00:21:15,430 --> 00:21:20,140
library to<font color="#CCCCCC"> the target process</font><font color="#E5E5E5"> so as and</font>

413
00:21:17,890 --> 00:21:23,500
being aware that<font color="#CCCCCC"> ex-post has already</font>

414
00:21:20,140 --> 00:21:25,510
enabled<font color="#E5E5E5"> you to inject</font><font color="#CCCCCC"> java code</font><font color="#E5E5E5"> to the</font>

415
00:21:23,500 --> 00:21:27,970
target<font color="#CCCCCC"> prayers</font><font color="#E5E5E5"> process so you can take</font>

416
00:21:25,510 --> 00:21:30,280
<font color="#CCCCCC">advantage of this feature to course</font>

417
00:21:27,970 --> 00:21:34,420
system load library<font color="#CCCCCC"> in the inside</font><font color="#E5E5E5"> of the</font>

418
00:21:30,280 --> 00:21:37,780
<font color="#CCCCCC">target process</font><font color="#E5E5E5"> with the help</font><font color="#CCCCCC"> of xx</font><font color="#E5E5E5"> post</font>

419
00:21:34,420 --> 00:21:39,580
<font color="#E5E5E5">so note that the the system dot load</font>

420
00:21:37,780 --> 00:21:42,850
library<font color="#E5E5E5"> function will take care of</font><font color="#CCCCCC"> the</font>

421
00:21:39,580 --> 00:21:44,470
architecture<font color="#E5E5E5"> dependent native</font><font color="#CCCCCC"> library</font><font color="#E5E5E5"> so</font>

422
00:21:42,850 --> 00:21:47,379
you<font color="#E5E5E5"> won't you don't even have to know</font>

423
00:21:44,470 --> 00:21:51,280
<font color="#E5E5E5">how Houdini works how emulator works to</font>

424
00:21:47,380 --> 00:21:56,620
load the arm or x86 versions library so

425
00:21:51,280 --> 00:21:59,910
you<font color="#E5E5E5"> can just core it using</font><font color="#CCCCCC"> xposed so</font>

426
00:21:56,620 --> 00:22:02,739
after after<font color="#E5E5E5"> you load your native library</font>

427
00:21:59,910 --> 00:22:05,110
is successfully injected to the<font color="#CCCCCC"> your</font>

428
00:22:02,740 --> 00:22:07,720
target process<font color="#E5E5E5"> and then you can do</font>

429
00:22:05,110 --> 00:22:12,370
hooking hooking works to inside the your

430
00:22:07,720 --> 00:22:17,530
native library<font color="#E5E5E5"> so this is my</font><font color="#CCCCCC"> tools</font><font color="#E5E5E5"> my</font>

431
00:22:12,370 --> 00:22:23,020
github<font color="#E5E5E5"> my tours to hook on the emulators</font>

432
00:22:17,530 --> 00:22:25,330
and is it's based on the master day<font color="#CCCCCC"> I</font>

433
00:22:23,020 --> 00:22:28,450
didn't<font color="#E5E5E5"> I didn't make one based on</font>

434
00:22:25,330 --> 00:22:32,560
<font color="#CCCCCC">message B and this the usage is as</font>

435
00:22:28,450 --> 00:22:36,250
simple as hook by hook<font color="#E5E5E5"> you can pass a</font>

436
00:22:32,560 --> 00:22:38,080
library and the target<font color="#E5E5E5"> address to the to</font>

437
00:22:36,250 --> 00:22:42,570
this<font color="#CCCCCC"> football</font><font color="#E5E5E5"> just function Yahoo by</font>

438
00:22:38,080 --> 00:22:45,840
name function<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can hook</font><font color="#E5E5E5"> it and</font>

439
00:22:42,570 --> 00:22:52,120
<font color="#E5E5E5">I'm going</font><font color="#CCCCCC"> to I'm going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> show you a</font>

440
00:22:45,840 --> 00:22:54,189
demo but you don't<font color="#E5E5E5"> don't don't expect</font>

441
00:22:52,120 --> 00:22:56,860
this demo to<font color="#CCCCCC"> be so fantastic because</font>

442
00:22:54,190 --> 00:22:59,110
it's on a demo game and the demo game is

443
00:22:56,860 --> 00:23:02,050
basically<font color="#E5E5E5"> made by our company</font><font color="#CCCCCC"> for</font>

444
00:22:59,110 --> 00:23:04,939
training purpose and definitely<font color="#E5E5E5"> I can't</font>

445
00:23:02,050 --> 00:23:08,599
<font color="#E5E5E5">doing I can't do a demo</font>

446
00:23:04,940 --> 00:23:13,249
I'm a real game for that is illegal I

447
00:23:08,599 --> 00:23:21,769
got caught<font color="#E5E5E5"> so I can already perform this</font>

448
00:23:13,249 --> 00:23:25,519
on a demo game so this this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

449
00:23:21,769 --> 00:23:31,989
typical typical cute kawaii<font color="#CCCCCC"> characters</font>

450
00:23:25,519 --> 00:23:31,989
<font color="#CCCCCC">thing in Japan sorry</font>

451
00:23:36,060 --> 00:23:45,060
so first<font color="#CCCCCC"> you you</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> fighting</font><font color="#E5E5E5"> the boss</font>

452
00:23:38,770 --> 00:23:49,500
and the boss<font color="#E5E5E5"> SP barely</font><font color="#CCCCCC"> very soft</font><font color="#E5E5E5"> yet and</font>

453
00:23:45,060 --> 00:23:52,990
you of course<font color="#E5E5E5"> you lost you do this and</font>

454
00:23:49,500 --> 00:23:56,440
this<font color="#E5E5E5"> is this is on the emulator of the</font>

455
00:23:52,990 --> 00:23:58,900
<font color="#CCCCCC">dog simulator so when you use ad Bashir</font>

456
00:23:56,440 --> 00:24:03,100
<font color="#E5E5E5">you use</font><font color="#CCCCCC"> adb here to connect to the</font>

457
00:23:58,900 --> 00:24:09,070
<font color="#E5E5E5">emulator</font><font color="#CCCCCC"> and play this stage again since</font>

458
00:24:03,100 --> 00:24:11,740
<font color="#E5E5E5">you</font><font color="#CCCCCC"> are still losing</font><font color="#E5E5E5"> but but after but</font>

459
00:24:09,070 --> 00:24:20,100
<font color="#E5E5E5">you can find the results it's actually</font>

460
00:24:11,740 --> 00:24:20,100
winged so finally

461
00:24:22,280 --> 00:24:25,149
finally

462
00:24:26,240 --> 00:24:31,580
finally<font color="#E5E5E5"> this the this is the conclusion</font>

463
00:24:28,730 --> 00:24:33,890
for today<font color="#CCCCCC"> so mobile game is getting more</font>

464
00:24:31,580 --> 00:24:36,949
and<font color="#CCCCCC"> more popular as well as cheating</font>

465
00:24:33,890 --> 00:24:39,320
developing and cheating<font color="#CCCCCC"> pet patterns</font>

466
00:24:36,950 --> 00:24:42,140
<font color="#CCCCCC">changed as a technique developers</font><font color="#E5E5E5"> so I</font>

467
00:24:39,320 --> 00:24:44,689
am I am expecting the<font color="#CCCCCC"> cheating patterns</font>

468
00:24:42,140 --> 00:24:47,360
will become more popular<font color="#CCCCCC"> on Android and</font>

469
00:24:44,690 --> 00:24:49,840
there are more<font color="#CCCCCC"> people using</font><font color="#E5E5E5"> cooking</font>

470
00:24:47,360 --> 00:24:53,600
skills on emulators instead of only

471
00:24:49,840 --> 00:24:59,169
merely touch simulation<font color="#CCCCCC"> the</font><font color="#E5E5E5"> primitive</font>

472
00:24:53,600 --> 00:25:05,300
method so but of course<font color="#E5E5E5"> so in order to</font>

473
00:24:59,170 --> 00:25:07,640
in order to prepare ourselves as a game

474
00:25:05,300 --> 00:25:10,960
<font color="#E5E5E5">company prepare ourselves for this kind</font>

475
00:25:07,640 --> 00:25:14,660
of<font color="#E5E5E5"> cheating we should do some further</font>

476
00:25:10,960 --> 00:25:17,540
<font color="#E5E5E5">like the firm for</font><font color="#CCCCCC"> the work like emulator</font>

477
00:25:14,660 --> 00:25:20,690
detect detections or some doing some

478
00:25:17,540 --> 00:25:23,750
other efforts in the<font color="#E5E5E5"> future so and</font>

479
00:25:20,690 --> 00:25:26,870
finally<font color="#E5E5E5"> game security is fun and I'm so</font>

480
00:25:23,750 --> 00:25:29,480
<font color="#CCCCCC">happy</font><font color="#E5E5E5"> to meet so</font><font color="#CCCCCC"> many gay guys that</font><font color="#E5E5E5"> is</font>

481
00:25:26,870 --> 00:25:33,439
<font color="#CCCCCC">they're like</font><font color="#E5E5E5"> plays games or maybe also</font>

482
00:25:29,480 --> 00:25:35,950
like hacking games<font color="#E5E5E5"> so thank you any</font>

483
00:25:33,440 --> 00:25:35,950
<font color="#E5E5E5">questions</font>

