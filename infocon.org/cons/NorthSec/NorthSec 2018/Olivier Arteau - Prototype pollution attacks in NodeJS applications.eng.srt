1
00:00:00,000 --> 00:00:06,600
so after you<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> welcome</font><font color="#E5E5E5"> to everybody</font>

2
00:00:04,680 --> 00:00:10,649
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> presentation is</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be</font>

3
00:00:06,600 --> 00:00:12,989
about<font color="#E5E5E5"> prototype pollution attack</font><font color="#CCCCCC"> so</font>

4
00:00:10,650 --> 00:00:14,969
first of all who am i I do these<font color="#CCCCCC"> days</font>

5
00:00:12,990 --> 00:00:17,520
mostly pen<font color="#CCCCCC"> tests and a bit of security</font>

6
00:00:14,969 --> 00:00:19,230
research<font color="#E5E5E5"> before starting</font><font color="#CCCCCC"> in InfoSec</font><font color="#E5E5E5"> I</font>

7
00:00:17,520 --> 00:00:20,850
used to do lots<font color="#E5E5E5"> of web live of him</font>

8
00:00:19,230 --> 00:00:23,460
mostly<font color="#CCCCCC"> front-end</font><font color="#E5E5E5"> so this is where I</font>

9
00:00:20,850 --> 00:00:26,099
learned most of the JavaScript<font color="#E5E5E5"> that's</font>

10
00:00:23,460 --> 00:00:27,990
<font color="#CCCCCC">gonna be presented</font><font color="#E5E5E5"> here so the plan for</font>

11
00:00:26,099 --> 00:00:30,480
<font color="#E5E5E5">this presentation is I'm gonna first do</font>

12
00:00:27,990 --> 00:00:32,189
a brief<font color="#E5E5E5"> introduction to JavaScript but</font>

13
00:00:30,480 --> 00:00:34,050
I'm<font color="#CCCCCC"> gonna focus</font><font color="#E5E5E5"> very much on the part</font>

14
00:00:32,189 --> 00:00:36,750
<font color="#E5E5E5">that</font><font color="#CCCCCC"> are going</font><font color="#E5E5E5"> to be used through this</font>

15
00:00:34,050 --> 00:00:38,519
presentation<font color="#CCCCCC"> we're gonna go after</font><font color="#E5E5E5"> that</font>

16
00:00:36,750 --> 00:00:41,280
<font color="#CCCCCC">what can allow</font><font color="#E5E5E5"> a prototype</font><font color="#CCCCCC"> Ellucian to</font>

17
00:00:38,520 --> 00:00:43,620
happen<font color="#E5E5E5"> how can it be exploited</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'm</font>

18
00:00:41,280 --> 00:00:47,460
gonna<font color="#E5E5E5"> leave a few notes on how this type</font>

19
00:00:43,620 --> 00:00:48,538
of<font color="#CCCCCC"> attack can be</font><font color="#E5E5E5"> mitigated so the first</font>

20
00:00:47,460 --> 00:00:50,640
thing that's really<font color="#CCCCCC"> interesting in</font>

21
00:00:48,539 --> 00:00:53,760
<font color="#E5E5E5">javascript is that is the way class or</font>

22
00:00:50,640 --> 00:00:56,129
declared and work<font color="#E5E5E5"> let's say</font><font color="#CCCCCC"> you want to</font>

23
00:00:53,760 --> 00:00:58,260
first<font color="#E5E5E5"> of all declare a class that's</font>

24
00:00:56,129 --> 00:01:02,010
called die<font color="#E5E5E5"> it first starts as a function</font>

25
00:00:58,260 --> 00:01:03,629
and the<font color="#E5E5E5"> way you add a method to classes</font>

26
00:01:02,010 --> 00:01:05,939
is<font color="#CCCCCC"> you add them on what's called the</font>

27
00:01:03,629 --> 00:01:08,009
prototype<font color="#CCCCCC"> so if you want</font><font color="#E5E5E5"> to have a</font>

28
00:01:05,939 --> 00:01:09,869
method<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> going to be there on all</font>

29
00:01:08,010 --> 00:01:12,240
instances of dog we're<font color="#E5E5E5"> gonna do dog</font>

30
00:01:09,869 --> 00:01:14,549
which<font color="#E5E5E5"> is the function the prototype</font><font color="#CCCCCC"> that</font>

31
00:01:12,240 --> 00:01:16,560
<font color="#CCCCCC">talk equals the function and now</font><font color="#E5E5E5"> after</font>

32
00:01:14,549 --> 00:01:20,759
that<font color="#E5E5E5"> all instances of dog have the</font>

33
00:01:16,560 --> 00:01:23,460
function<font color="#CCCCCC"> named</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> what's also good</font><font color="#E5E5E5"> to</font>

34
00:01:20,759 --> 00:01:26,759
note in<font color="#CCCCCC"> JavaScript is</font><font color="#E5E5E5"> that all the</font>

35
00:01:23,460 --> 00:01:29,009
objects<font color="#E5E5E5"> in a rates from base up a base</font>

36
00:01:26,759 --> 00:01:30,270
object<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> named object and the base</font>

37
00:01:29,009 --> 00:01:32,909
<font color="#CCCCCC">object comes with a few interesting</font>

38
00:01:30,270 --> 00:01:34,820
<font color="#E5E5E5">properties</font><font color="#CCCCCC"> one of the</font><font color="#E5E5E5"> interesting</font>

39
00:01:32,909 --> 00:01:37,110
<font color="#E5E5E5">properties is called constructor and</font>

40
00:01:34,820 --> 00:01:39,809
constructor points back to<font color="#CCCCCC"> the</font>

41
00:01:37,110 --> 00:01:41,610
<font color="#CCCCCC">constructor for which the object was</font>

42
00:01:39,810 --> 00:01:44,310
created<font color="#E5E5E5"> so here if we have an instance</font>

43
00:01:41,610 --> 00:01:45,630
of dog<font color="#CCCCCC"> the instance that constructor is</font>

44
00:01:44,310 --> 00:01:48,119
going to point<font color="#CCCCCC"> to the function of</font><font color="#E5E5E5"> the</font>

45
00:01:45,630 --> 00:01:50,490
and see if we're able to point<font color="#E5E5E5"> to the</font>

46
00:01:48,119 --> 00:01:52,140
function of dog<font color="#E5E5E5"> this also means that we</font>

47
00:01:50,490 --> 00:01:54,810
<font color="#CCCCCC">can reach the prototype of it by doing</font>

48
00:01:52,140 --> 00:01:56,430
constructor that<font color="#CCCCCC"> prototype and what's</font>

49
00:01:54,810 --> 00:01:58,469
really also<font color="#E5E5E5"> interesting is that since</font>

50
00:01:56,430 --> 00:02:00,000
<font color="#E5E5E5">the ACMA scripts</font><font color="#CCCCCC"> six tender was</font>

51
00:01:58,469 --> 00:02:02,460
introduced there<font color="#E5E5E5"> was</font><font color="#CCCCCC"> a magic property</font>

52
00:02:00,000 --> 00:02:04,920
that's named proto<font color="#CCCCCC"> that does</font><font color="#E5E5E5"> essentially</font>

53
00:02:02,460 --> 00:02:09,060
the constructor the prototype thing all

54
00:02:04,920 --> 00:02:11,009
at once<font color="#CCCCCC"> what's also good</font><font color="#E5E5E5"> to note is that</font>

55
00:02:09,060 --> 00:02:12,430
<font color="#E5E5E5">there's two notations to access property</font>

56
00:02:11,008 --> 00:02:15,458
on an object

57
00:02:12,430 --> 00:02:17,170
<font color="#CCCCCC">they</font><font color="#E5E5E5"> both allow access</font><font color="#CCCCCC"> to the same</font>

58
00:02:15,459 --> 00:02:19,060
property and there's no a

59
00:02:17,170 --> 00:02:21,700
differentiation between<font color="#CCCCCC"> whether the</font>

60
00:02:19,060 --> 00:02:24,730
property is<font color="#E5E5E5"> of type of function or is</font>

61
00:02:21,700 --> 00:02:29,798
<font color="#E5E5E5">simply an object</font><font color="#CCCCCC"> so this is like all</font>

62
00:02:24,730 --> 00:02:32,018
mixed up together so what is prototype

63
00:02:29,799 --> 00:02:34,959
<font color="#CCCCCC">illusion prototype pollution is a term</font>

64
00:02:32,019 --> 00:02:36,790
that was coined<font color="#E5E5E5"> a long while ago people</font>

65
00:02:34,959 --> 00:02:39,370
used<font color="#CCCCCC"> to do lots of experimentation</font><font color="#E5E5E5"> to</font>

66
00:02:36,790 --> 00:02:41,500
add sort<font color="#CCCCCC"> of like extension method</font><font color="#E5E5E5"> to</font>

67
00:02:39,370 --> 00:02:42,609
base types like<font color="#E5E5E5"> object so let's say if</font>

68
00:02:41,500 --> 00:02:44,919
you wanted to have a function that

69
00:02:42,609 --> 00:02:47,650
<font color="#E5E5E5">that's called contains the answer on all</font>

70
00:02:44,919 --> 00:02:49,599
objects<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are instantiated you could</font>

71
00:02:47,650 --> 00:02:52,870
add it on<font color="#CCCCCC"> the prototype of object</font><font color="#E5E5E5"> and it</font>

72
00:02:49,599 --> 00:02:55,119
would sort<font color="#E5E5E5"> of add extension method to it</font>

73
00:02:52,870 --> 00:02:57,269
<font color="#E5E5E5">one of the first library that leveraged</font>

74
00:02:55,120 --> 00:03:00,310
this a lot was called prototype GS

75
00:02:57,269 --> 00:03:01,900
<font color="#CCCCCC">however what was found to do it to the</font>

76
00:03:00,310 --> 00:03:03,669
usage of<font color="#E5E5E5"> this library and</font><font color="#CCCCCC"> other</font>

77
00:03:01,900 --> 00:03:05,590
experimentation is that it is<font color="#E5E5E5"> actually a</font>

78
00:03:03,669 --> 00:03:07,709
really<font color="#E5E5E5"> bad</font><font color="#CCCCCC"> idea to do</font><font color="#E5E5E5"> this kind</font><font color="#CCCCCC"> of thing</font>

79
00:03:05,590 --> 00:03:10,389
because<font color="#CCCCCC"> it causes a lot of</font>

80
00:03:07,709 --> 00:03:12,730
incompatibilities between<font color="#E5E5E5"> all the</font>

81
00:03:10,389 --> 00:03:14,829
libraries that<font color="#E5E5E5"> start adding all the</font>

82
00:03:12,730 --> 00:03:16,540
things on the prototype of object<font color="#E5E5E5"> so</font>

83
00:03:14,829 --> 00:03:17,859
this is not<font color="#E5E5E5"> considered a very bad</font>

84
00:03:16,540 --> 00:03:20,638
<font color="#CCCCCC">practice and you're not</font><font color="#E5E5E5"> going to</font>

85
00:03:17,859 --> 00:03:25,389
actually<font color="#E5E5E5"> see this a lot</font>

86
00:03:20,639 --> 00:03:26,889
so if but this<font color="#E5E5E5"> presentation is not going</font>

87
00:03:25,389 --> 00:03:28,840
<font color="#CCCCCC">to be about developer shooting</font>

88
00:03:26,889 --> 00:03:30,760
themselves in the<font color="#CCCCCC"> foot by actually</font>

89
00:03:28,840 --> 00:03:33,129
<font color="#E5E5E5">trying to add extension method on object</font>

90
00:03:30,760 --> 00:03:34,899
this is<font color="#E5E5E5"> mostly going to be about what if</font>

91
00:03:33,129 --> 00:03:37,000
an attacker can actually start<font color="#CCCCCC"> doing</font>

92
00:03:34,900 --> 00:03:40,359
<font color="#E5E5E5">those things can actually</font><font color="#CCCCCC"> start adding</font>

93
00:03:37,000 --> 00:03:42,400
property on the prototype<font color="#E5E5E5"> of object so</font>

94
00:03:40,359 --> 00:03:44,769
the first thing that<font color="#E5E5E5"> we're going to need</font>

95
00:03:42,400 --> 00:03:48,669
to ask ourselves is what can even allow

96
00:03:44,769 --> 00:03:51,430
an attacker to have add properties on

97
00:03:48,669 --> 00:03:54,220
the prototype<font color="#CCCCCC"> of object and there's a</font>

98
00:03:51,430 --> 00:03:56,109
few operations in which<font color="#E5E5E5"> I found there</font>

99
00:03:54,220 --> 00:03:59,019
were vulnerable<font color="#CCCCCC"> implementation</font><font color="#E5E5E5"> that</font>

100
00:03:56,109 --> 00:04:02,470
could prototype<font color="#CCCCCC"> solutions to apon if we</font>

101
00:03:59,019 --> 00:04:04,720
are able<font color="#CCCCCC"> to control some</font><font color="#E5E5E5"> parameters</font><font color="#CCCCCC"> one</font>

102
00:04:02,470 --> 00:04:07,900
of the first class of<font color="#E5E5E5"> operations that</font><font color="#CCCCCC"> I</font>

103
00:04:04,720 --> 00:04:10,989
found to<font color="#CCCCCC"> be to be susceptible</font><font color="#E5E5E5"> to this</font>

104
00:04:07,900 --> 00:04:12,790
type<font color="#CCCCCC"> of</font><font color="#E5E5E5"> things was</font><font color="#CCCCCC"> merge operation</font><font color="#E5E5E5"> merge</font>

105
00:04:10,989 --> 00:04:15,489
operation can<font color="#CCCCCC"> be seen at a very very</font>

106
00:04:12,790 --> 00:04:18,099
<font color="#E5E5E5">high</font><font color="#CCCCCC"> level</font><font color="#E5E5E5"> as you have two objects with</font>

107
00:04:15,489 --> 00:04:19,449
each a set of different<font color="#CCCCCC"> properties</font><font color="#E5E5E5"> and</font>

108
00:04:18,099 --> 00:04:21,969
<font color="#E5E5E5">you want to merge them together and</font>

109
00:04:19,449 --> 00:04:25,419
there's also<font color="#CCCCCC"> some priority that's given</font>

110
00:04:21,969 --> 00:04:26,280
to<font color="#E5E5E5"> the last arguments so basically we</font>

111
00:04:25,419 --> 00:04:27,840
have two object

112
00:04:26,280 --> 00:04:30,599
becomes one<font color="#E5E5E5"> with all the properties</font>

113
00:04:27,840 --> 00:04:33,780
<font color="#E5E5E5">merged together and the way merge</font>

114
00:04:30,600 --> 00:04:36,389
operation<font color="#E5E5E5"> that were affected</font><font color="#CCCCCC"> we're</font>

115
00:04:33,780 --> 00:04:38,460
implemented worked<font color="#CCCCCC"> raw</font><font color="#E5E5E5"> worked in this</font>

116
00:04:36,389 --> 00:04:40,950
way basically<font color="#E5E5E5"> they start by iterating</font>

117
00:04:38,460 --> 00:04:44,489
all the properties that<font color="#E5E5E5"> exist on the</font>

118
00:04:40,950 --> 00:04:46,469
<font color="#E5E5E5">second object</font><font color="#CCCCCC"> and if the</font><font color="#E5E5E5"> property exists</font>

119
00:04:44,490 --> 00:04:48,600
on the first and the second object<font color="#CCCCCC"> and</font>

120
00:04:46,470 --> 00:04:52,830
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> both of type object it starts</font>

121
00:04:48,600 --> 00:04:54,419
<font color="#CCCCCC">its recursively merge</font><font color="#E5E5E5"> those things but</font>

122
00:04:52,830 --> 00:04:57,960
where it gets<font color="#CCCCCC"> really really interesting</font>

123
00:04:54,419 --> 00:05:00,090
is if the<font color="#CCCCCC"> the attributes value over here</font>

124
00:04:57,960 --> 00:05:02,549
<font color="#E5E5E5">is</font><font color="#CCCCCC"> named underscore underscore proto</font>

125
00:05:00,090 --> 00:05:05,880
underscore underscore<font color="#E5E5E5"> well this value</font>

126
00:05:02,550 --> 00:05:08,760
<font color="#E5E5E5">always exists on object and is also of</font>

127
00:05:05,880 --> 00:05:10,350
type object which<font color="#E5E5E5"> means that if we have</font>

128
00:05:08,760 --> 00:05:12,270
this value<font color="#CCCCCC"> that is defined over</font><font color="#E5E5E5"> here</font>

129
00:05:10,350 --> 00:05:13,919
it's always<font color="#E5E5E5"> going to be true that it's</font>

130
00:05:12,270 --> 00:05:16,099
going<font color="#E5E5E5"> to be defined and existing and</font>

131
00:05:13,919 --> 00:05:18,900
<font color="#E5E5E5">what's gonna happen is if</font><font color="#CCCCCC"> we can control</font>

132
00:05:16,100 --> 00:05:22,229
<font color="#CCCCCC">on the second side what's defined inside</font>

133
00:05:18,900 --> 00:05:24,000
the proto property<font color="#E5E5E5"> this value over here</font>

134
00:05:22,229 --> 00:05:26,490
<font color="#E5E5E5">is going to point to the prototype of</font>

135
00:05:24,000 --> 00:05:29,310
object<font color="#E5E5E5"> so when it's going to recurse</font><font color="#CCCCCC"> in</font>

136
00:05:26,490 --> 00:05:31,620
<font color="#CCCCCC">to this the a value</font><font color="#E5E5E5"> is going to be the</font>

137
00:05:29,310 --> 00:05:32,940
<font color="#E5E5E5">prototype of object this and the keys</font>

138
00:05:31,620 --> 00:05:35,729
<font color="#CCCCCC">that are going</font><font color="#E5E5E5"> to be set here are going</font>

139
00:05:32,940 --> 00:05:39,840
<font color="#E5E5E5">to be the keys</font><font color="#CCCCCC"> that are that we define</font>

140
00:05:35,729 --> 00:05:42,030
in the second part so basically<font color="#CCCCCC"> if we</font>

141
00:05:39,840 --> 00:05:43,619
<font color="#E5E5E5">have this is the base object that we're</font>

142
00:05:42,030 --> 00:05:48,179
going<font color="#E5E5E5"> to merge properties into and this</font>

143
00:05:43,620 --> 00:05:50,580
is the user input that we control so

144
00:05:48,180 --> 00:05:52,410
here we have a proto property where we

145
00:05:50,580 --> 00:05:54,930
<font color="#CCCCCC">added</font><font color="#E5E5E5"> a property</font><font color="#CCCCCC"> named pollutant and</font>

146
00:05:52,410 --> 00:05:58,500
when we merge those together with an

147
00:05:54,930 --> 00:06:00,930
implementation<font color="#E5E5E5"> that's affected now all</font>

148
00:05:58,500 --> 00:06:02,729
instances of object having<font color="#CCCCCC"> a property</font>

149
00:06:00,930 --> 00:06:04,669
that's<font color="#E5E5E5"> named polluted with the value of</font>

150
00:06:02,729 --> 00:06:07,650
<font color="#CCCCCC">one and this</font><font color="#E5E5E5"> is true not</font><font color="#CCCCCC"> just for</font>

151
00:06:04,669 --> 00:06:10,169
objects that<font color="#E5E5E5"> are created after the</font>

152
00:06:07,650 --> 00:06:11,669
pollution<font color="#E5E5E5"> happen but it's also pollutes</font>

153
00:06:10,169 --> 00:06:16,289
<font color="#E5E5E5">all the existing object that were</font>

154
00:06:11,669 --> 00:06:18,840
previously created so for<font color="#E5E5E5"> those there</font>

155
00:06:16,289 --> 00:06:21,240
was lots of library which add a horrible

156
00:06:18,840 --> 00:06:22,890
implementation and the two most<font color="#E5E5E5"> popular</font>

157
00:06:21,240 --> 00:06:25,410
libraries that<font color="#E5E5E5"> I found to be affected</font>

158
00:06:22,890 --> 00:06:28,349
<font color="#CCCCCC">where</font><font color="#E5E5E5"> lodash and oak for both of these</font>

159
00:06:25,410 --> 00:06:31,229
there were<font color="#E5E5E5"> CV</font><font color="#CCCCCC"> that were that</font><font color="#E5E5E5"> were</font>

160
00:06:28,350 --> 00:06:33,150
released<font color="#E5E5E5"> and so if you have no J's</font>

161
00:06:31,229 --> 00:06:35,190
project<font color="#E5E5E5"> you probably</font><font color="#CCCCCC"> have been</font><font color="#E5E5E5"> notified</font>

162
00:06:33,150 --> 00:06:38,729
by this but didn't knew too<font color="#CCCCCC"> much but</font>

163
00:06:35,190 --> 00:06:39,990
what this was all about<font color="#E5E5E5"> also all the</font>

164
00:06:38,729 --> 00:06:42,060
details as<font color="#CCCCCC"> to</font>

165
00:06:39,990 --> 00:06:43,650
the<font color="#E5E5E5"> libraries</font><font color="#CCCCCC"> that were fixed in which</font>

166
00:06:42,060 --> 00:06:45,750
versions<font color="#E5E5E5"> they were fixed is all going to</font>

167
00:06:43,650 --> 00:06:47,880
<font color="#E5E5E5">be in</font><font color="#CCCCCC"> the paper that</font><font color="#E5E5E5"> I'm gonna link at</font>

168
00:06:45,750 --> 00:06:51,360
the<font color="#E5E5E5"> end so for this kind of detail</font><font color="#CCCCCC"> it's</font>

169
00:06:47,880 --> 00:06:52,860
all<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be listed there</font><font color="#CCCCCC"> so the</font>

170
00:06:51,360 --> 00:06:54,090
second class of operation<font color="#E5E5E5"> that I found</font>

171
00:06:52,860 --> 00:06:56,670
to<font color="#CCCCCC"> be susceptible</font><font color="#E5E5E5"> to this type</font><font color="#CCCCCC"> of</font>

172
00:06:54,090 --> 00:06:59,070
problem<font color="#CCCCCC"> are our clone operation</font><font color="#E5E5E5"> clone</font>

173
00:06:56,670 --> 00:07:00,630
operation<font color="#E5E5E5"> are basically you have an</font>

174
00:06:59,070 --> 00:07:05,370
object<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you want to create a full</font>

175
00:07:00,630 --> 00:07:07,170
copy<font color="#E5E5E5"> of it and the way I found and the</font>

176
00:07:05,370 --> 00:07:08,700
way<font color="#E5E5E5"> some implementation were vulnerable</font>

177
00:07:07,170 --> 00:07:10,500
to<font color="#E5E5E5"> prototype pollution</font>

178
00:07:08,700 --> 00:07:13,680
<font color="#CCCCCC">truely's</font><font color="#E5E5E5"> operation is if they</font>

179
00:07:10,500 --> 00:07:17,160
implemented a clone has emerged on an

180
00:07:13,680 --> 00:07:19,530
<font color="#E5E5E5">empty object basically this does a clone</font>

181
00:07:17,160 --> 00:07:21,960
however if the merge operation<font color="#CCCCCC"> that's</font>

182
00:07:19,530 --> 00:07:23,400
being used<font color="#CCCCCC"> to do this</font><font color="#E5E5E5"> is affected by the</font>

183
00:07:21,960 --> 00:07:25,229
<font color="#E5E5E5">button by</font><font color="#CCCCCC"> the bug that's previously</font>

184
00:07:23,400 --> 00:07:27,780
mentioned<font color="#E5E5E5"> when you're going to be using</font>

185
00:07:25,230 --> 00:07:30,120
<font color="#E5E5E5">this clone operation</font><font color="#CCCCCC"> it's also going to</font>

186
00:07:27,780 --> 00:07:32,669
cause<font color="#E5E5E5"> prototype pollution to happen with</font>

187
00:07:30,120 --> 00:07:34,200
the same effect for for<font color="#E5E5E5"> these types I</font>

188
00:07:32,670 --> 00:07:36,420
only found<font color="#E5E5E5"> one library which was</font>

189
00:07:34,200 --> 00:07:38,789
affected so this is probably in practice

190
00:07:36,420 --> 00:07:43,500
<font color="#CCCCCC">a rather a niche edge edge case that's</font>

191
00:07:38,790 --> 00:07:44,730
less likely<font color="#CCCCCC"> to be seen the third one</font>

192
00:07:43,500 --> 00:07:46,700
that's really<font color="#CCCCCC"> interesting is that</font>

193
00:07:44,730 --> 00:07:50,190
there's a<font color="#CCCCCC"> bunch of library which allows</font>

194
00:07:46,700 --> 00:07:52,620
values to<font color="#CCCCCC"> be defined by a path</font><font color="#E5E5E5"> basically</font>

195
00:07:50,190 --> 00:07:54,480
we start by<font color="#E5E5E5"> having an</font><font color="#CCCCCC"> object which</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

196
00:07:52,620 --> 00:07:56,640
set of property and if we want<font color="#E5E5E5"> a set</font>

197
00:07:54,480 --> 00:08:00,060
object<font color="#CCCCCC"> that'd be the test equals one two</font>

198
00:07:56,640 --> 00:08:02,610
three some API allows and some libraries

199
00:08:00,060 --> 00:08:04,680
allows us to do this by defining a path

200
00:08:02,610 --> 00:08:07,290
<font color="#E5E5E5">and error if the attacker is able to</font>

201
00:08:04,680 --> 00:08:10,230
control this<font color="#E5E5E5"> part of the path it can</font>

202
00:08:07,290 --> 00:08:12,180
start defining the path to be on proto

203
00:08:10,230 --> 00:08:13,860
<font color="#E5E5E5">on a scroll that polluted and if you</font>

204
00:08:12,180 --> 00:08:16,140
<font color="#E5E5E5">control also</font><font color="#CCCCCC"> the volume</font><font color="#E5E5E5"> what's</font><font color="#CCCCCC"> gonna</font>

205
00:08:13,860 --> 00:08:19,500
happen is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the prototype</font><font color="#CCCCCC"> of object</font>

206
00:08:16,140 --> 00:08:22,800
is<font color="#E5E5E5"> also going to be polluted for those</font>

207
00:08:19,500 --> 00:08:24,690
libraries<font color="#E5E5E5"> this is essentially something</font>

208
00:08:22,800 --> 00:08:27,180
<font color="#E5E5E5">that's working by design so this is</font>

209
00:08:24,690 --> 00:08:29,210
highly<font color="#CCCCCC"> unlikely that there's ever going</font>

210
00:08:27,180 --> 00:08:31,800
to be a patch<font color="#E5E5E5"> I spoke to a few</font>

211
00:08:29,210 --> 00:08:33,870
maintainer switch<font color="#CCCCCC"> an affected library</font>

212
00:08:31,800 --> 00:08:36,539
and the general consensus is that<font color="#E5E5E5"> it's</font>

213
00:08:33,870 --> 00:08:38,220
somewhat by design<font color="#E5E5E5"> so for</font><font color="#CCCCCC"> lost libraries</font>

214
00:08:36,539 --> 00:08:40,799
you have<font color="#E5E5E5"> to be super</font><font color="#CCCCCC"> careful never to</font>

215
00:08:38,220 --> 00:08:46,200
allow<font color="#E5E5E5"> the</font><font color="#CCCCCC"> path to be fully controlled</font><font color="#E5E5E5"> by</font>

216
00:08:40,799 --> 00:08:47,969
<font color="#E5E5E5">user input so exploitation time</font><font color="#CCCCCC"> when I</font>

217
00:08:46,200 --> 00:08:50,100
started<font color="#CCCCCC"> to do this research this was</font>

218
00:08:47,970 --> 00:08:52,950
<font color="#E5E5E5">already some interesting</font>

219
00:08:50,100 --> 00:08:55,170
cases<font color="#CCCCCC"> but I wanted to see up to which</font>

220
00:08:52,950 --> 00:08:57,390
<font color="#CCCCCC">point it</font><font color="#E5E5E5"> was exploitable in practice so</font>

221
00:08:55,170 --> 00:09:00,990
I looked<font color="#CCCCCC"> through a bunch</font><font color="#E5E5E5"> of open source</font>

222
00:08:57,390 --> 00:09:03,840
project<font color="#CCCCCC"> that were using</font><font color="#E5E5E5"> no GS and the</font>

223
00:09:00,990 --> 00:09:06,030
one that I<font color="#E5E5E5"> found to be a good case study</font>

224
00:09:03,840 --> 00:09:08,850
for<font color="#E5E5E5"> this was go CMS at</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> time I did this</font>

225
00:09:06,030 --> 00:09:10,020
research<font color="#E5E5E5"> the latest version was 119</font><font color="#CCCCCC"> - so</font>

226
00:09:08,850 --> 00:09:12,120
if you<font color="#E5E5E5"> want to reproduce everything</font>

227
00:09:10,020 --> 00:09:13,890
that's being discussed<font color="#CCCCCC"> here this is the</font>

228
00:09:12,120 --> 00:09:16,110
version<font color="#E5E5E5"> that you have to install it was</font>

229
00:09:13,890 --> 00:09:19,860
a fairly<font color="#E5E5E5"> large application it's</font><font color="#CCCCCC"> it's</font>

230
00:09:16,110 --> 00:09:22,500
fairly used and most importantly<font color="#CCCCCC"> it</font><font color="#E5E5E5"> used</font>

231
00:09:19,860 --> 00:09:25,200
one<font color="#CCCCCC"> of the affected library with user</font>

232
00:09:22,500 --> 00:09:27,870
input<font color="#E5E5E5"> so we actually add something that</font>

233
00:09:25,200 --> 00:09:29,850
<font color="#CCCCCC">we could pollute the prototype with and</font>

234
00:09:27,870 --> 00:09:32,880
I wanted<font color="#E5E5E5"> to see up to what point this</font>

235
00:09:29,850 --> 00:09:35,580
was exploitable<font color="#E5E5E5"> so the first thing we</font>

236
00:09:32,880 --> 00:09:37,770
need to do is to identify where<font color="#CCCCCC"> the</font>

237
00:09:35,580 --> 00:09:40,190
prototype pollution can occur in the

238
00:09:37,770 --> 00:09:43,140
case of<font color="#CCCCCC"> ghost</font><font color="#E5E5E5"> CMS one of the</font><font color="#CCCCCC"> unwanted</font>

239
00:09:40,190 --> 00:09:46,050
<font color="#E5E5E5">endpoints which was used for password</font>

240
00:09:43,140 --> 00:09:48,689
reset used the vulnerable<font color="#CCCCCC"> merge of</font>

241
00:09:46,050 --> 00:09:50,310
<font color="#CCCCCC">lodash which is over here and the</font>

242
00:09:48,690 --> 00:09:52,710
portion<font color="#CCCCCC"> the data that we control is</font>

243
00:09:50,310 --> 00:09:56,910
options that data options<font color="#CCCCCC"> the data is</font>

244
00:09:52,710 --> 00:09:58,610
essentially in this context<font color="#E5E5E5"> the</font><font color="#CCCCCC"> body of</font>

245
00:09:56,910 --> 00:10:02,640
the post<font color="#E5E5E5"> request</font><font color="#CCCCCC"> that we send to that</font>

246
00:09:58,610 --> 00:10:04,680
password<font color="#E5E5E5"> reset endpoint so even though</font>

247
00:10:02,640 --> 00:10:06,810
we<font color="#E5E5E5"> don't fully control options as long</font>

248
00:10:04,680 --> 00:10:09,420
as we control part<font color="#E5E5E5"> of the structure</font><font color="#CCCCCC"> the</font>

249
00:10:06,810 --> 00:10:11,760
prototype pollution is going to occur<font color="#E5E5E5"> so</font>

250
00:10:09,420 --> 00:10:13,860
it<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> gives us a base request</font>

251
00:10:11,760 --> 00:10:15,870
like this<font color="#E5E5E5"> so</font><font color="#CCCCCC"> basically we have the</font>

252
00:10:13,860 --> 00:10:18,060
password reset<font color="#E5E5E5"> endpoint there's a few</font>

253
00:10:15,870 --> 00:10:20,100
values<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make sure that we reach the</font>

254
00:10:18,060 --> 00:10:22,770
vulnerable merge and we have<font color="#E5E5E5"> here the</font>

255
00:10:20,100 --> 00:10:24,960
<font color="#E5E5E5">underscore proto and over here this is</font>

256
00:10:22,770 --> 00:10:26,640
<font color="#E5E5E5">going to be where all the properties</font>

257
00:10:24,960 --> 00:10:30,420
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> want to add on the prototype</font><font color="#E5E5E5"> of</font>

258
00:10:26,640 --> 00:10:32,370
object<font color="#E5E5E5"> where they're going to be so one</font>

259
00:10:30,420 --> 00:10:33,810
of<font color="#E5E5E5"> the first thing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> makes it really</font>

260
00:10:32,370 --> 00:10:35,580
hard<font color="#CCCCCC"> to exploit this kind of</font>

261
00:10:33,810 --> 00:10:38,160
<font color="#E5E5E5">vulnerability is whenever you add a</font>

262
00:10:35,580 --> 00:10:42,300
single<font color="#E5E5E5"> property it messes up a lot</font><font color="#CCCCCC"> of</font>

263
00:10:38,160 --> 00:10:43,589
the execution of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> application so</font><font color="#E5E5E5"> the</font>

264
00:10:42,300 --> 00:10:45,569
<font color="#E5E5E5">biggest problem that you have is</font>

265
00:10:43,590 --> 00:10:48,750
whenever you pollute one single property

266
00:10:45,570 --> 00:10:50,790
<font color="#E5E5E5">everything starts crashing so this is</font>

267
00:10:48,750 --> 00:10:51,960
not something that that's<font color="#CCCCCC"> interests</font><font color="#E5E5E5"> that</font>

268
00:10:50,790 --> 00:10:53,579
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is not</font><font color="#E5E5E5"> something that's that</font>

269
00:10:51,960 --> 00:10:56,850
interesting if you want to do more<font color="#E5E5E5"> than</font>

270
00:10:53,580 --> 00:10:58,140
just<font color="#E5E5E5"> a denial of service</font><font color="#CCCCCC"> so the general</font>

271
00:10:56,850 --> 00:11:00,090
approach<font color="#CCCCCC"> that I took</font><font color="#E5E5E5"> that I think is</font>

272
00:10:58,140 --> 00:11:02,430
kind of<font color="#E5E5E5"> the good one is to first</font>

273
00:11:00,090 --> 00:11:04,020
identify which endpoints as

274
00:11:02,430 --> 00:11:06,390
some behavior<font color="#CCCCCC"> that you want to exploit</font>

275
00:11:04,020 --> 00:11:08,610
<font color="#E5E5E5">and you're gonna try to first of all fix</font>

276
00:11:06,390 --> 00:11:10,380
it in a way<font color="#CCCCCC"> that it's gonna finally</font>

277
00:11:08,610 --> 00:11:14,040
reach<font color="#E5E5E5"> at the point that you</font><font color="#CCCCCC"> want it to</font>

278
00:11:10,380 --> 00:11:15,390
reach<font color="#E5E5E5"> and in this case the target</font><font color="#CCCCCC"> end</font>

279
00:11:14,040 --> 00:11:17,730
<font color="#E5E5E5">point that</font><font color="#CCCCCC"> I choose was the main page</font>

280
00:11:15,390 --> 00:11:21,990
<font color="#E5E5E5">and the reason I wanted</font><font color="#CCCCCC"> to reach at the</font>

281
00:11:17,730 --> 00:11:23,820
main page is<font color="#E5E5E5"> that it is that the</font><font color="#CCCCCC"> main</font>

282
00:11:21,990 --> 00:11:27,000
page<font color="#E5E5E5"> actually rendered some templates</font>

283
00:11:23,820 --> 00:11:28,590
and the reason<font color="#E5E5E5"> templates are a really</font>

284
00:11:27,000 --> 00:11:30,780
good target for prototype pollution is

285
00:11:28,590 --> 00:11:32,300
that very often<font color="#CCCCCC"> the</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> the templates</font>

286
00:11:30,780 --> 00:11:34,920
are compiled is that they use

287
00:11:32,300 --> 00:11:36,540
<font color="#E5E5E5">intermediate structure that are then</font>

288
00:11:34,920 --> 00:11:38,579
converted<font color="#E5E5E5"> to JavaScript code</font><font color="#CCCCCC"> then</font>

289
00:11:36,540 --> 00:11:41,640
executed<font color="#E5E5E5"> so if we can pollute the</font>

290
00:11:38,580 --> 00:11:44,100
properties<font color="#CCCCCC"> during</font><font color="#E5E5E5"> the compilation of</font>

291
00:11:41,640 --> 00:11:45,360
those templates<font color="#E5E5E5"> we're gonna</font><font color="#CCCCCC"> we we're</font>

292
00:11:44,100 --> 00:11:46,800
gonna have<font color="#E5E5E5"> the potential</font><font color="#CCCCCC"> to have</font>

293
00:11:45,360 --> 00:11:50,400
<font color="#E5E5E5">JavaScript code that's</font><font color="#CCCCCC"> gonna be executed</font>

294
00:11:46,800 --> 00:11:51,839
<font color="#CCCCCC">on the server so there's a few</font>

295
00:11:50,400 --> 00:11:55,800
strategies<font color="#E5E5E5"> that we can</font><font color="#CCCCCC"> use to</font><font color="#E5E5E5"> kind of</font>

296
00:11:51,840 --> 00:11:58,620
fix the all the<font color="#E5E5E5"> the things that are</font>

297
00:11:55,800 --> 00:12:00,359
<font color="#CCCCCC">gonna be messed up</font><font color="#E5E5E5"> basically the way</font>

298
00:11:58,620 --> 00:12:02,910
we're going to fix<font color="#E5E5E5"> thing is we're gonna</font>

299
00:12:00,360 --> 00:12:04,920
first start by polluting<font color="#CCCCCC"> a random</font>

300
00:12:02,910 --> 00:12:06,959
property it's gonna crash when we're

301
00:12:04,920 --> 00:12:08,939
<font color="#E5E5E5">gonna try to</font><font color="#CCCCCC"> render</font><font color="#E5E5E5"> the main page we're</font>

302
00:12:06,960 --> 00:12:11,010
gonna figure out<font color="#E5E5E5"> why it crashes we're</font>

303
00:12:08,940 --> 00:12:13,140
gonna fix that<font color="#E5E5E5"> local crash we're gonna</font>

304
00:12:11,010 --> 00:12:15,240
retry the payload it's gonna crash again

305
00:12:13,140 --> 00:12:17,670
elsewhere and<font color="#CCCCCC"> we're gonna continue this</font>

306
00:12:15,240 --> 00:12:20,220
in an iterative process until it's

307
00:12:17,670 --> 00:12:22,740
finally renders the whole<font color="#E5E5E5"> thing so the</font>

308
00:12:20,220 --> 00:12:25,440
<font color="#E5E5E5">first strategy that we can</font><font color="#CCCCCC"> use to fix</font>

309
00:12:22,740 --> 00:12:27,150
<font color="#CCCCCC">bad</font><font color="#E5E5E5"> things is to</font><font color="#CCCCCC"> figure out if there</font><font color="#E5E5E5"> are</font>

310
00:12:25,440 --> 00:12:30,270
simply some properties<font color="#E5E5E5"> that are missing</font>

311
00:12:27,150 --> 00:12:32,310
<font color="#CCCCCC">in this case of this</font><font color="#E5E5E5"> payload one of the</font>

312
00:12:30,270 --> 00:12:34,560
issues that I add is that<font color="#E5E5E5"> during the</font>

313
00:12:32,310 --> 00:12:37,500
execution when properties were polluted

314
00:12:34,560 --> 00:12:39,469
the object<font color="#CCCCCC"> over-ear results didn't have</font>

315
00:12:37,500 --> 00:12:42,810
any of those meta pagination pages

316
00:12:39,470 --> 00:12:45,240
property so what happened is that it

317
00:12:42,810 --> 00:12:47,609
triggered an error which caused the

318
00:12:45,240 --> 00:12:50,430
<font color="#E5E5E5">whole page</font><font color="#CCCCCC"> to crash and it wouldn't</font>

319
00:12:47,610 --> 00:12:52,680
<font color="#E5E5E5">reach the end points that</font><font color="#CCCCCC"> I wanted so</font>

320
00:12:50,430 --> 00:12:54,300
here what we're gonna do is since the

321
00:12:52,680 --> 00:12:57,660
meta doesn't exist we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> pollute</font>

322
00:12:54,300 --> 00:13:00,089
<font color="#E5E5E5">the meta property with this</font><font color="#CCCCCC"> value and</font>

323
00:12:57,660 --> 00:13:02,640
the next time we're gonna try<font color="#CCCCCC"> this</font>

324
00:13:00,089 --> 00:13:04,080
pillow<font color="#E5E5E5"> the meta property is now going to</font>

325
00:13:02,640 --> 00:13:06,180
exist<font color="#E5E5E5"> and it's going to have those</font>

326
00:13:04,080 --> 00:13:08,370
property so it's<font color="#CCCCCC"> not</font><font color="#E5E5E5"> going to work and</font>

327
00:13:06,180 --> 00:13:10,469
<font color="#CCCCCC">it's going to continue further</font><font color="#E5E5E5"> in the</font>

328
00:13:08,370 --> 00:13:12,570
execution

329
00:13:10,470 --> 00:13:13,890
the second strategy<font color="#CCCCCC"> is sometimes the</font>

330
00:13:12,570 --> 00:13:17,790
crashes are<font color="#E5E5E5"> going to occur in places</font>

331
00:13:13,890 --> 00:13:19,170
<font color="#E5E5E5">where there's not much you</font><font color="#CCCCCC"> can do to to</font>

332
00:13:17,790 --> 00:13:22,020
<font color="#E5E5E5">avoid the crashes by simply adding</font>

333
00:13:19,170 --> 00:13:24,360
<font color="#E5E5E5">properties so if you're stuck</font><font color="#CCCCCC"> in a</font>

334
00:13:22,020 --> 00:13:27,900
<font color="#CCCCCC">situation like</font><font color="#E5E5E5"> this you</font><font color="#CCCCCC"> have to look at</font>

335
00:13:24,360 --> 00:13:30,060
what<font color="#CCCCCC"> all the conditions that that made</font>

336
00:13:27,900 --> 00:13:32,010
it reach at that point where it crashed

337
00:13:30,060 --> 00:13:35,280
the crashes is kind of inevitable<font color="#CCCCCC"> and</font>

338
00:13:32,010 --> 00:13:36,750
look if there are ways to<font color="#CCCCCC"> add properties</font>

339
00:13:35,280 --> 00:13:38,339
so that<font color="#E5E5E5"> it it takes a</font><font color="#CCCCCC"> completely</font>

340
00:13:36,750 --> 00:13:43,610
different code<font color="#CCCCCC"> path and it no longer</font>

341
00:13:38,340 --> 00:13:45,570
<font color="#CCCCCC">takes the path that's gonna always</font><font color="#E5E5E5"> crash</font>

342
00:13:43,610 --> 00:13:46,350
the<font color="#E5E5E5"> truth the third strategy is</font>

343
00:13:45,570 --> 00:13:48,240
something<font color="#E5E5E5"> that's really really</font>

344
00:13:46,350 --> 00:13:50,190
<font color="#CCCCCC">interesting about prototype pollution is</font>

345
00:13:48,240 --> 00:13:52,830
if you pollute<font color="#CCCCCC"> a property that's of type</font>

346
00:13:50,190 --> 00:13:54,840
object<font color="#E5E5E5"> now all objects aren't going to</font>

347
00:13:52,830 --> 00:13:56,970
be<font color="#E5E5E5"> I have sort of an infinite</font><font color="#CCCCCC"> debt</font><font color="#E5E5E5"> and</font>

348
00:13:54,840 --> 00:13:59,430
the reason is<font color="#CCCCCC"> that if</font><font color="#E5E5E5"> for example we</font>

349
00:13:56,970 --> 00:14:01,470
pollute through with an<font color="#E5E5E5"> empty object</font><font color="#CCCCCC"> the</font>

350
00:13:59,430 --> 00:14:03,060
thing<font color="#E5E5E5"> that's gonna happen is that who is</font>

351
00:14:01,470 --> 00:14:05,370
going<font color="#CCCCCC"> to be of type object</font><font color="#E5E5E5"> which means</font>

352
00:14:03,060 --> 00:14:07,380
if it's of type object it's also going

353
00:14:05,370 --> 00:14:09,720
<font color="#E5E5E5">to have the property</font><font color="#CCCCCC"> foam so now food</font>

354
00:14:07,380 --> 00:14:11,340
that<font color="#CCCCCC"> foo is also pointing back to the</font>

355
00:14:09,720 --> 00:14:13,230
empty<font color="#CCCCCC"> object which has a property foo</font>

356
00:14:11,340 --> 00:14:14,820
and the reason this can<font color="#CCCCCC"> be really</font>

357
00:14:13,230 --> 00:14:16,920
problematic<font color="#E5E5E5"> is if there are algorithms</font>

358
00:14:14,820 --> 00:14:19,230
<font color="#E5E5E5">in the programs that</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> sort of</font>

359
00:14:16,920 --> 00:14:21,089
recursive operation on object where the

360
00:14:19,230 --> 00:14:23,760
<font color="#E5E5E5">iterates the property if it's</font><font color="#CCCCCC"> off type</font>

361
00:14:21,090 --> 00:14:26,640
<font color="#CCCCCC">of object it recurs into it the problem</font>

362
00:14:23,760 --> 00:14:29,340
is<font color="#E5E5E5"> that since the the objects are all</font>

363
00:14:26,640 --> 00:14:32,790
going to<font color="#E5E5E5"> have infinite there it's</font><font color="#CCCCCC"> gonna</font>

364
00:14:29,340 --> 00:14:34,500
<font color="#E5E5E5">crash</font><font color="#CCCCCC"> due</font><font color="#E5E5E5"> to Stack Overflow exception so</font>

365
00:14:32,790 --> 00:14:36,900
the program is gonna crash which is not

366
00:14:34,500 --> 00:14:39,030
desirable<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the way you can fix those</font>

367
00:14:36,900 --> 00:14:41,069
<font color="#E5E5E5">kind of problem is by adding what I</font>

368
00:14:39,030 --> 00:14:43,560
would call<font color="#CCCCCC"> kind of a stop property</font><font color="#E5E5E5"> so</font>

369
00:14:41,070 --> 00:14:45,840
here instead<font color="#E5E5E5"> of just polluting an empty</font>

370
00:14:43,560 --> 00:14:48,589
object<font color="#CCCCCC"> we're also gonna pollute the</font>

371
00:14:45,840 --> 00:14:52,470
object in a way that it's<font color="#E5E5E5"> gonna contain</font>

372
00:14:48,590 --> 00:14:54,690
the attributes<font color="#E5E5E5"> the property foo and</font>

373
00:14:52,470 --> 00:14:57,210
what's gonna<font color="#CCCCCC"> happen is now when we do</font>

374
00:14:54,690 --> 00:14:59,040
food at food since this value overrides

375
00:14:57,210 --> 00:15:00,930
the value<font color="#E5E5E5"> that's on the prototype it's</font>

376
00:14:59,040 --> 00:15:02,490
simply going to<font color="#CCCCCC"> be of</font><font color="#E5E5E5"> type string and in</font>

377
00:15:00,930 --> 00:15:05,189
most cases this is<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> prevent all</font>

378
00:15:02,490 --> 00:15:07,360
the the infinite recursions

379
00:15:05,190 --> 00:15:10,420
issue

380
00:15:07,360 --> 00:15:13,720
so now now that<font color="#CCCCCC"> we have done this</font>

381
00:15:10,420 --> 00:15:15,878
iterative process<font color="#E5E5E5"> until the main page</font>

382
00:15:13,720 --> 00:15:17,319
finally renders it probably renders with

383
00:15:15,879 --> 00:15:19,059
<font color="#CCCCCC">my bitch data but</font><font color="#E5E5E5"> that's not much</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> an</font>

384
00:15:17,319 --> 00:15:21,519
issue<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to look at what we can</font>

385
00:15:19,059 --> 00:15:23,709
pollute to have interesting behavior and

386
00:15:21,519 --> 00:15:25,959
one of the first<font color="#E5E5E5"> thing that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> then I</font>

387
00:15:23,709 --> 00:15:28,660
<font color="#E5E5E5">notice</font><font color="#CCCCCC"> about the widow CMS work is that</font>

388
00:15:25,959 --> 00:15:32,199
the template to be rendered<font color="#CCCCCC"> once the</font><font color="#E5E5E5"> the</font>

389
00:15:28,660 --> 00:15:34,029
<font color="#CCCCCC">pages finished executing was lazy loaded</font>

390
00:15:32,199 --> 00:15:36,279
and what's really<font color="#E5E5E5"> interesting about lazy</font>

391
00:15:34,029 --> 00:15:39,100
loading is that the volume<font color="#E5E5E5"> first starts</font>

392
00:15:36,279 --> 00:15:41,739
as undefined<font color="#CCCCCC"> and then whenever</font><font color="#E5E5E5"> it sets</font>

393
00:15:39,100 --> 00:15:44,290
or it checks<font color="#CCCCCC"> whether it's defined it</font>

394
00:15:41,739 --> 00:15:45,730
checks if the<font color="#E5E5E5"> value is already</font><font color="#CCCCCC"> exists</font>

395
00:15:44,290 --> 00:15:47,319
<font color="#CCCCCC">and if it already exists it says well</font>

396
00:15:45,730 --> 00:15:49,839
it's already loaded<font color="#CCCCCC"> the value is good</font>

397
00:15:47,319 --> 00:15:51,910
<font color="#CCCCCC">I'm gonna</font><font color="#E5E5E5"> continue so here if we pollute</font>

398
00:15:49,839 --> 00:15:54,189
the value that's<font color="#E5E5E5"> over here on the score</font>

399
00:15:51,910 --> 00:15:56,049
templates the program is simply<font color="#CCCCCC"> gonna</font>

400
00:15:54,189 --> 00:15:58,809
<font color="#E5E5E5">think that the value was already loaded</font>

401
00:15:56,049 --> 00:16:00,220
and<font color="#E5E5E5"> every time</font><font color="#CCCCCC"> pages is going to be</font>

402
00:15:58,809 --> 00:16:03,368
<font color="#E5E5E5">rendered we're gonna be in control of</font>

403
00:16:00,220 --> 00:16:05,489
<font color="#E5E5E5">which templates gets rendered which is</font>

404
00:16:03,369 --> 00:16:08,079
something<font color="#E5E5E5"> that's really</font><font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> so</font>

405
00:16:05,489 --> 00:16:11,679
we can control which<font color="#E5E5E5"> template is going</font>

406
00:16:08,079 --> 00:16:14,019
<font color="#CCCCCC">to be rendered but this is not at the</font>

407
00:16:11,679 --> 00:16:16,209
<font color="#E5E5E5">end of the export mostly because</font><font color="#CCCCCC"> at the</font>

408
00:16:14,019 --> 00:16:17,739
<font color="#E5E5E5">templates has to have the HBS extension</font>

409
00:16:16,209 --> 00:16:20,290
which means we're not going<font color="#CCCCCC"> to be able</font>

410
00:16:17,739 --> 00:16:22,419
<font color="#E5E5E5">to do local fire read and other things</font>

411
00:16:20,290 --> 00:16:24,279
like<font color="#CCCCCC"> that so we have to pick a template</font>

412
00:16:22,419 --> 00:16:26,169
<font color="#E5E5E5">that's interesting</font><font color="#CCCCCC"> so I first started by</font>

413
00:16:24,279 --> 00:16:27,999
pointing to<font color="#CCCCCC"> templates</font><font color="#E5E5E5"> that was lying</font>

414
00:16:26,169 --> 00:16:30,249
like TMP<font color="#CCCCCC"> and I did a</font><font color="#E5E5E5"> bit of fuzzing to</font>

415
00:16:27,999 --> 00:16:32,019
figure out what was<font color="#CCCCCC"> interesting in</font>

416
00:16:30,249 --> 00:16:33,519
combination of what the template add to

417
00:16:32,019 --> 00:16:35,439
contain and which properties could<font color="#E5E5E5"> be</font>

418
00:16:33,519 --> 00:16:40,209
<font color="#E5E5E5">added so</font><font color="#CCCCCC"> that's some JavaScript code</font>

419
00:16:35,439 --> 00:16:41,889
<font color="#E5E5E5">ended up being in the final JavaScript</font>

420
00:16:40,209 --> 00:16:45,609
code that<font color="#CCCCCC"> was generated for the</font>

421
00:16:41,889 --> 00:16:48,999
templates so what I identified was that

422
00:16:45,610 --> 00:16:51,489
<font color="#E5E5E5">partial invocation was the best thing to</font>

423
00:16:48,999 --> 00:16:53,799
<font color="#E5E5E5">be corrupted and there was a value</font>

424
00:16:51,489 --> 00:16:55,959
that's called block params<font color="#E5E5E5"> that ended up</font>

425
00:16:53,799 --> 00:16:58,629
<font color="#E5E5E5">being directly in the JavaScript code</font>

426
00:16:55,959 --> 00:17:01,378
and<font color="#E5E5E5"> that was</font><font color="#CCCCCC"> included</font><font color="#E5E5E5"> I'm just gonna</font>

427
00:16:58,629 --> 00:17:01,379
take a bit of<font color="#E5E5E5"> water</font>

428
00:17:06,960 --> 00:17:12,579
<font color="#E5E5E5">okay so now once this was identified</font><font color="#CCCCCC"> I</font>

429
00:17:11,050 --> 00:17:15,250
simply had to find a template which

430
00:17:12,579 --> 00:17:17,649
contained a partial invocation<font color="#CCCCCC"> that</font>

431
00:17:15,250 --> 00:17:20,619
<font color="#CCCCCC">could be used however</font><font color="#E5E5E5"> when I looked at</font>

432
00:17:17,650 --> 00:17:22,810
<font color="#E5E5E5">all the templates</font><font color="#CCCCCC"> that were used by goe</font>

433
00:17:20,619 --> 00:17:24,760
CMS when I<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use these even if some</font>

434
00:17:22,810 --> 00:17:26,319
contains partial invocation<font color="#CCCCCC"> the problem</font>

435
00:17:24,760 --> 00:17:28,900
the<font color="#CCCCCC"> dyad is most of the templates were</font>

436
00:17:26,319 --> 00:17:30,700
quite complex and the compilation<font color="#E5E5E5"> due to</font>

437
00:17:28,900 --> 00:17:32,890
the corruptions ended up completely

438
00:17:30,700 --> 00:17:35,890
crashing if it contains too<font color="#E5E5E5"> many things</font>

439
00:17:32,890 --> 00:17:37,330
outside<font color="#E5E5E5"> of partial invocation</font><font color="#CCCCCC"> but what I</font>

440
00:17:35,890 --> 00:17:40,330
found to be<font color="#E5E5E5"> rather interesting</font><font color="#CCCCCC"> is that</font>

441
00:17:37,330 --> 00:17:42,730
there's a<font color="#CCCCCC"> lots of package</font><font color="#E5E5E5"> that are</font>

442
00:17:40,330 --> 00:17:44,110
shipped with<font color="#E5E5E5"> all the test</font><font color="#CCCCCC"> cases</font><font color="#E5E5E5"> and one</font>

443
00:17:42,730 --> 00:17:46,000
of the<font color="#E5E5E5"> package</font><font color="#CCCCCC"> that ships with all its</font>

444
00:17:44,110 --> 00:17:48,040
test cases<font color="#CCCCCC"> is called Express HBS and</font>

445
00:17:46,000 --> 00:17:49,630
what's<font color="#E5E5E5"> really convenient is</font><font color="#CCCCCC"> that all</font>

446
00:17:48,040 --> 00:17:53,710
those test cases<font color="#E5E5E5"> are really really</font>

447
00:17:49,630 --> 00:17:57,130
minimal HBS file that can all be pointed

448
00:17:53,710 --> 00:17:59,950
to and used and<font color="#CCCCCC"> Ear</font><font color="#E5E5E5"> one of one of those</font>

449
00:17:57,130 --> 00:18:01,720
test cases<font color="#CCCCCC"> I simply contains</font><font color="#E5E5E5"> a partial</font>

450
00:17:59,950 --> 00:18:03,340
invocation<font color="#E5E5E5"> that I needed and about</font>

451
00:18:01,720 --> 00:18:05,410
nothing<font color="#E5E5E5"> else so this was really</font>

452
00:18:03,340 --> 00:18:08,530
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was really</font><font color="#CCCCCC"> useful</font><font color="#E5E5E5"> because</font>

453
00:18:05,410 --> 00:18:10,030
<font color="#E5E5E5">otherwise I would have to</font><font color="#CCCCCC"> figure out</font><font color="#E5E5E5"> why</font>

454
00:18:08,530 --> 00:18:12,580
the compilation<font color="#E5E5E5"> for more complex</font>

455
00:18:10,030 --> 00:18:14,110
<font color="#E5E5E5">template crashed and try to fix it which</font>

456
00:18:12,580 --> 00:18:16,149
would have been taken<font color="#E5E5E5"> probably a lot</font>

457
00:18:14,110 --> 00:18:18,189
more<font color="#CCCCCC"> time to finish the export</font><font color="#E5E5E5"> but here</font>

458
00:18:16,150 --> 00:18:22,750
we have test data that's ship in

459
00:18:18,190 --> 00:18:25,390
production so thank you Express HBS so

460
00:18:22,750 --> 00:18:26,980
after this<font color="#CCCCCC"> the</font><font color="#E5E5E5"> properties that we have</font>

461
00:18:25,390 --> 00:18:28,570
<font color="#CCCCCC">polluted is essentially the</font><font color="#E5E5E5"> templates</font>

462
00:18:26,980 --> 00:18:30,760
<font color="#E5E5E5">that I've linked here and here this is</font>

463
00:18:28,570 --> 00:18:32,020
<font color="#CCCCCC">like the</font><font color="#E5E5E5"> structure that's used it's one</font>

464
00:18:30,760 --> 00:18:35,980
of the<font color="#E5E5E5"> intermediate structure that's</font>

465
00:18:32,020 --> 00:18:37,420
used<font color="#E5E5E5"> by</font><font color="#CCCCCC"> the HBS</font><font color="#E5E5E5"> compiler and</font><font color="#CCCCCC"> here the</font>

466
00:18:35,980 --> 00:18:39,760
<font color="#E5E5E5">value of error this is</font><font color="#CCCCCC"> the volume that's</font>

467
00:18:37,420 --> 00:18:40,840
going to end up directly<font color="#E5E5E5"> being in the</font>

468
00:18:39,760 --> 00:18:45,230
final template that's<font color="#E5E5E5"> going to be</font>

469
00:18:40,840 --> 00:18:47,418
compiled okay so demo

470
00:18:45,230 --> 00:18:54,250
yeah<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> have my</font><font color="#E5E5E5"> laptop</font><font color="#CCCCCC"> err but</font>

471
00:18:47,419 --> 00:18:59,570
thankfully I recorded everything so yeah

472
00:18:54,250 --> 00:19:01,840
I'm just<font color="#CCCCCC"> gonna do buzz</font><font color="#E5E5E5"> okay so wait a</font>

473
00:18:59,570 --> 00:19:01,840
<font color="#CCCCCC">minute</font>

474
00:19:05,250 --> 00:19:11,870
this is like<font color="#E5E5E5"> not my laptop so okay so we</font>

475
00:19:08,789 --> 00:19:14,879
first of<font color="#E5E5E5"> all start we have like a blank</font>

476
00:19:11,870 --> 00:19:17,039
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is like a</font><font color="#E5E5E5"> stocky install of ghost</font>

477
00:19:14,880 --> 00:19:20,940
<font color="#E5E5E5">EMS we can see that it works</font><font color="#CCCCCC"> properly</font>

478
00:19:17,039 --> 00:19:22,770
<font color="#E5E5E5">and now what we're going to do is we</font>

479
00:19:20,940 --> 00:19:26,039
have<font color="#CCCCCC"> our full request</font><font color="#E5E5E5"> with like all the</font>

480
00:19:22,770 --> 00:19:28,260
payloads<font color="#E5E5E5"> and we have over here the what</font>

481
00:19:26,039 --> 00:19:30,990
what we're going to execute<font color="#E5E5E5"> and what's</font>

482
00:19:28,260 --> 00:19:32,520
good to<font color="#CCCCCC"> mention is that since the</font>

483
00:19:30,990 --> 00:19:34,830
<font color="#E5E5E5">JavaScript code ends up in a context</font>

484
00:19:32,520 --> 00:19:36,600
<font color="#CCCCCC">where it's evolved the required function</font>

485
00:19:34,830 --> 00:19:38,699
is not directly accessible<font color="#E5E5E5"> so you have</font>

486
00:19:36,600 --> 00:19:41,459
this to use this sort<font color="#E5E5E5"> of global process</font>

487
00:19:38,700 --> 00:19:42,900
main module constructor<font color="#CCCCCC"> underscore</font><font color="#E5E5E5"> load</font>

488
00:19:41,460 --> 00:19:44,880
<font color="#E5E5E5">this is roughly the equivalent of</font>

489
00:19:42,900 --> 00:19:45,960
require so here the<font color="#E5E5E5"> pillow that we're</font>

490
00:19:44,880 --> 00:19:47,400
going<font color="#E5E5E5"> to do is we're</font><font color="#CCCCCC"> going to require a</font>

491
00:19:45,960 --> 00:19:49,289
child<font color="#CCCCCC"> process and we're going execute</font>

492
00:19:47,400 --> 00:19:53,490
<font color="#CCCCCC">kcon which is like gonna make a</font>

493
00:19:49,289 --> 00:19:55,110
calculator appear<font color="#E5E5E5"> so the first request</font>

494
00:19:53,490 --> 00:19:57,419
<font color="#E5E5E5">is simply going</font><font color="#CCCCCC"> to corrupt</font><font color="#E5E5E5"> the state of</font>

495
00:19:55,110 --> 00:19:59,668
the application<font color="#CCCCCC"> so</font><font color="#E5E5E5"> the calculator is not</font>

496
00:19:57,419 --> 00:20:00,900
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> pop right</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> so what's gonna</font>

497
00:19:59,669 --> 00:20:03,380
happen<font color="#CCCCCC"> is now the state of the</font>

498
00:20:00,900 --> 00:20:06,179
<font color="#CCCCCC">application is</font><font color="#E5E5E5"> completely corrupted and</font>

499
00:20:03,380 --> 00:20:08,640
the<font color="#E5E5E5"> endpoint crashes but what's</font>

500
00:20:06,179 --> 00:20:10,950
interesting is whenever we're<font color="#CCCCCC"> gonna</font>

501
00:20:08,640 --> 00:20:12,960
<font color="#E5E5E5">refresh</font><font color="#CCCCCC"> the main page we're gonna have</font>

502
00:20:10,950 --> 00:20:15,590
that the calculator that's gonna now<font color="#E5E5E5"> be</font>

503
00:20:12,960 --> 00:20:15,590
executed

504
00:20:20,279 --> 00:20:27,370
yeah<font color="#CCCCCC"> and now I still have a bit of</font><font color="#E5E5E5"> time</font>

505
00:20:23,860 --> 00:20:28,299
<font color="#E5E5E5">so</font><font color="#CCCCCC"> I can this issue</font><font color="#E5E5E5"> be mitigated one of</font>

506
00:20:27,370 --> 00:20:30,279
the interesting things that<font color="#E5E5E5"> were</font>

507
00:20:28,299 --> 00:20:32,799
introduced<font color="#E5E5E5"> in ACMA script</font><font color="#CCCCCC"> 5 is there's</font>

508
00:20:30,279 --> 00:20:36,400
<font color="#E5E5E5">actually kind of a way of freezing of</font>

509
00:20:32,799 --> 00:20:38,830
making object completely<font color="#CCCCCC"> immutable and</font>

510
00:20:36,400 --> 00:20:41,350
this is<font color="#E5E5E5"> probably the least used API that</font>

511
00:20:38,830 --> 00:20:43,210
<font color="#E5E5E5">was released in</font><font color="#CCCCCC"> Atma script 5 but this</font>

512
00:20:41,350 --> 00:20:45,969
is actually<font color="#CCCCCC"> really useful</font><font color="#E5E5E5"> now because we</font>

513
00:20:43,210 --> 00:20:47,830
can actually<font color="#E5E5E5"> fix</font><font color="#CCCCCC"> the fact</font><font color="#E5E5E5"> that the</font>

514
00:20:45,970 --> 00:20:49,900
<font color="#CCCCCC">prototype of object is modifiable at</font>

515
00:20:47,830 --> 00:20:52,240
runtime<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we can actually make the</font>

516
00:20:49,900 --> 00:20:54,370
prototype<font color="#E5E5E5"> of object immutable and this</font>

517
00:20:52,240 --> 00:20:56,039
and what's<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> happen every time</font>

518
00:20:54,370 --> 00:20:59,229
there's<font color="#CCCCCC"> gonna be a property</font><font color="#E5E5E5"> that's gonna</font>

519
00:20:56,039 --> 00:21:01,240
<font color="#CCCCCC">that's gonna</font><font color="#E5E5E5"> be try to be assigned to</font>

520
00:20:59,230 --> 00:21:03,630
<font color="#CCCCCC">own the prototype of object</font><font color="#E5E5E5"> it's simply</font>

521
00:21:01,240 --> 00:21:05,470
gonna<font color="#CCCCCC"> assign a fail which means the</font>

522
00:21:03,630 --> 00:21:07,330
<font color="#E5E5E5">assignment is</font><font color="#CCCCCC"> going to be done but it's</font>

523
00:21:05,470 --> 00:21:09,520
gonna have no effect so this<font color="#E5E5E5"> can</font>

524
00:21:07,330 --> 00:21:11,770
completely prevent<font color="#E5E5E5"> a prototype pollution</font>

525
00:21:09,520 --> 00:21:13,600
for the object type which is I think

526
00:21:11,770 --> 00:21:18,279
<font color="#CCCCCC">something that</font><font color="#E5E5E5"> should be</font><font color="#CCCCCC"> probably the</font>

527
00:21:13,600 --> 00:21:19,480
default behavior in<font color="#E5E5E5"> JavaScript also one</font>

528
00:21:18,279 --> 00:21:22,240
<font color="#CCCCCC">of the interesting thing that I've seen</font>

529
00:21:19,480 --> 00:21:23,409
<font color="#E5E5E5">some project do that really prevents a</font>

530
00:21:22,240 --> 00:21:26,260
<font color="#CCCCCC">lot of the issue with</font><font color="#E5E5E5"> prototype</font>

531
00:21:23,409 --> 00:21:29,049
pollution is to do what's<font color="#CCCCCC"> called a JSON</font>

532
00:21:26,260 --> 00:21:31,029
schema validation essentially you have

533
00:21:29,049 --> 00:21:33,580
<font color="#CCCCCC">endpoints which which accept decent data</font>

534
00:21:31,029 --> 00:21:35,590
you can define<font color="#CCCCCC"> sort of a structure that</font>

535
00:21:33,580 --> 00:21:37,090
defines<font color="#E5E5E5"> which fields are expected what</font>

536
00:21:35,590 --> 00:21:39,490
are their types<font color="#E5E5E5"> and you can also make</font>

537
00:21:37,090 --> 00:21:42,220
sure<font color="#E5E5E5"> that there are no extra attributes</font>

538
00:21:39,490 --> 00:21:43,630
that are allowed<font color="#E5E5E5"> so</font><font color="#CCCCCC"> not only this is</font>

539
00:21:42,220 --> 00:21:45,460
going to prevent prototype<font color="#E5E5E5"> pollution</font>

540
00:21:43,630 --> 00:21:46,840
<font color="#E5E5E5">from being possible as the attacker is</font>

541
00:21:45,460 --> 00:21:48,610
no longer<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to control the</font>

542
00:21:46,840 --> 00:21:50,709
<font color="#E5E5E5">structure but it's also going to prevent</font>

543
00:21:48,610 --> 00:21:52,809
issues<font color="#E5E5E5"> like mass assignment or any other</font>

544
00:21:50,710 --> 00:21:56,049
issues where the type expected by<font color="#E5E5E5"> a</font>

545
00:21:52,809 --> 00:21:59,470
server is not exactly the one also<font color="#E5E5E5"> in</font>

546
00:21:56,049 --> 00:22:01,960
<font color="#E5E5E5">ACMA script</font><font color="#CCCCCC"> 6</font><font color="#E5E5E5"> they also</font><font color="#CCCCCC"> introduced map</font>

547
00:21:59,470 --> 00:22:04,570
which are essentially a way<font color="#CCCCCC"> to to</font>

548
00:22:01,960 --> 00:22:06,970
finally do<font color="#CCCCCC"> maps properly because</font><font color="#E5E5E5"> before</font>

549
00:22:04,570 --> 00:22:10,510
a lot<font color="#E5E5E5"> of the because before the way</font>

550
00:22:06,970 --> 00:22:12,309
people created map was simply to<font color="#CCCCCC"> use</font>

551
00:22:10,510 --> 00:22:14,320
empty<font color="#CCCCCC"> object however</font><font color="#E5E5E5"> when you're using</font>

552
00:22:12,309 --> 00:22:16,000
empty<font color="#CCCCCC"> object it comes with all the prop</font>

553
00:22:14,320 --> 00:22:18,309
the<font color="#CCCCCC"> base property of the type object</font>

554
00:22:16,000 --> 00:22:20,799
which has a lot of undesirable effect<font color="#E5E5E5"> as</font>

555
00:22:18,309 --> 00:22:23,230
we've<font color="#E5E5E5"> seen in this</font><font color="#CCCCCC"> presentation so it's</font>

556
00:22:20,799 --> 00:22:24,810
now<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of recommended to start</font>

557
00:22:23,230 --> 00:22:27,940
<font color="#E5E5E5">switching</font>

558
00:22:24,810 --> 00:22:30,399
object to map<font color="#E5E5E5"> whenever it's being used</font>

559
00:22:27,940 --> 00:22:32,140
for<font color="#CCCCCC"> the purpose</font><font color="#E5E5E5"> of being used as</font><font color="#CCCCCC"> a map</font>

560
00:22:30,400 --> 00:22:35,170
and yeah

561
00:22:32,140 --> 00:22:36,670
and this<font color="#E5E5E5"> is the link to the to this</font>

562
00:22:35,170 --> 00:22:38,620
presentation<font color="#E5E5E5"> it's going to contain all</font>

563
00:22:36,670 --> 00:22:40,840
the video<font color="#E5E5E5"> the slides and also have a</font>

564
00:22:38,620 --> 00:22:43,840
white paper which describes everything

565
00:22:40,840 --> 00:22:46,230
that I've talked about<font color="#CCCCCC"> today and a bit</font>

566
00:22:43,840 --> 00:22:46,230
more<font color="#CCCCCC"> to</font>

