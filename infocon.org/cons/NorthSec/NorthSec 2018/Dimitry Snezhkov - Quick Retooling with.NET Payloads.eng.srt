1
00:00:00,000 --> 00:00:05,970
hi North<font color="#E5E5E5"> sac</font><font color="#CCCCCC"> my name is dmitriy steshin</font>

2
00:00:02,159 --> 00:00:10,919
<font color="#E5E5E5">cough and I work at</font><font color="#CCCCCC"> x4 shred at</font><font color="#E5E5E5"> IBM I do</font>

3
00:00:05,970 --> 00:00:13,259
security work<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> talk is something</font>

4
00:00:10,920 --> 00:00:16,948
<font color="#E5E5E5">that we came</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> with for the past</font>

5
00:00:13,259 --> 00:00:20,480
<font color="#E5E5E5">probably half a year is that we are</font>

6
00:00:16,949 --> 00:00:25,800
gonna<font color="#E5E5E5"> try to retool with.net payloads</font>

7
00:00:20,480 --> 00:00:28,140
<font color="#CCCCCC">on-site at the</font><font color="#E5E5E5"> customer so the</font><font color="#CCCCCC"> problem</font>

8
00:00:25,800 --> 00:00:31,769
of<font color="#E5E5E5"> a red team operator once you get on</font>

9
00:00:28,140 --> 00:00:33,870
<font color="#E5E5E5">the host is that you have a first mover</font>

10
00:00:31,769 --> 00:00:35,399
disadvantage<font color="#E5E5E5"> right what does that mean</font>

11
00:00:33,870 --> 00:00:37,709
<font color="#E5E5E5">that means that you have to move first</font>

12
00:00:35,399 --> 00:00:41,040
<font color="#CCCCCC">to be able</font><font color="#E5E5E5"> to discover what the system</font>

13
00:00:37,710 --> 00:00:44,250
is<font color="#E5E5E5"> how it operates essentially</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> need</font>

14
00:00:41,040 --> 00:00:45,750
to do your recon first<font color="#E5E5E5"> and you may be</font>

15
00:00:44,250 --> 00:00:48,870
stopped by a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different things</font>

16
00:00:45,750 --> 00:00:51,899
<font color="#CCCCCC">right it's your</font><font color="#E5E5E5"> CMD instrumentation your</font>

17
00:00:48,870 --> 00:00:55,019
sandbox execution<font color="#CCCCCC"> you may have</font>

18
00:00:51,899 --> 00:00:58,770
monitoring agents on a quiet system<font color="#E5E5E5"> and</font>

19
00:00:55,020 --> 00:01:02,340
so some companies<font color="#CCCCCC"> also</font><font color="#E5E5E5"> do white listing</font>

20
00:00:58,770 --> 00:01:03,899
of binaries that<font color="#E5E5E5"> you can run more so in</font>

21
00:01:02,340 --> 00:01:06,119
<font color="#E5E5E5">a black placed fashion where</font><font color="#CCCCCC"> you</font>

22
00:01:03,899 --> 00:01:09,869
<font color="#E5E5E5">basically say</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> PowerShell that exe</font>

23
00:01:06,119 --> 00:01:11,760
cannot run but more importantly<font color="#E5E5E5"> defense</font>

24
00:01:09,869 --> 00:01:14,760
fingerprints your tools that you bring

25
00:01:11,760 --> 00:01:16,710
in on the<font color="#E5E5E5"> host and so let's see how we</font>

26
00:01:14,760 --> 00:01:19,259
can actually start solving this issue

27
00:01:16,710 --> 00:01:21,649
being on the<font color="#E5E5E5"> host how we can become less</font>

28
00:01:19,259 --> 00:01:25,259
more detect<font color="#E5E5E5"> less detectable and more</font>

29
00:01:21,650 --> 00:01:28,820
agile in<font color="#E5E5E5"> our tooling right that we bring</font>

30
00:01:25,259 --> 00:01:31,409
in<font color="#E5E5E5"> and so before we go into retooling</font>

31
00:01:28,820 --> 00:01:35,279
strategic disadvantage for the red team

32
00:01:31,409 --> 00:01:37,619
<font color="#E5E5E5">or on the host is that well we talked</font>

33
00:01:35,280 --> 00:01:40,200
about we you<font color="#E5E5E5"> have to move first</font><font color="#CCCCCC"> right</font>

34
00:01:37,619 --> 00:01:43,290
<font color="#CCCCCC">your</font><font color="#E5E5E5"> defense</font><font color="#CCCCCC"> you have to move first you</font>

35
00:01:40,200 --> 00:01:46,409
need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> collect the</font><font color="#E5E5E5"> information and you</font>

36
00:01:43,290 --> 00:01:49,530
may burn your presence<font color="#E5E5E5"> your presence may</font>

37
00:01:46,409 --> 00:01:51,780
get discovered right away<font color="#E5E5E5"> so the way</font>

38
00:01:49,530 --> 00:01:53,970
offensive operators move<font color="#E5E5E5"> is a little bit</font>

39
00:01:51,780 --> 00:01:55,670
more<font color="#CCCCCC"> predictable right yeah a specific</font>

40
00:01:53,970 --> 00:01:58,908
<font color="#CCCCCC">thing that you need to collect from</font><font color="#E5E5E5"> the</font>

41
00:01:55,670 --> 00:02:01,079
from the<font color="#E5E5E5"> host to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to continue</font>

42
00:01:58,909 --> 00:02:04,130
<font color="#E5E5E5">persistence on that host so a lot of</font>

43
00:02:01,079 --> 00:02:07,169
unknowns<font color="#CCCCCC"> the problem with bringing</font>

44
00:02:04,130 --> 00:02:10,199
already existing tools on a host is just

45
00:02:07,170 --> 00:02:13,080
that right<font color="#E5E5E5"> as detection and so how do we</font>

46
00:02:10,199 --> 00:02:14,220
<font color="#E5E5E5">make</font><font color="#CCCCCC"> sure we can retool</font><font color="#E5E5E5"> what we have in</font>

47
00:02:13,080 --> 00:02:18,240
the field<font color="#E5E5E5"> right on</font>

48
00:02:14,220 --> 00:02:20,130
<font color="#CCCCCC">live</font><font color="#E5E5E5"> host so there was this idea that we</font>

49
00:02:18,240 --> 00:02:23,010
<font color="#CCCCCC">may start doing building</font><font color="#E5E5E5"> blocks of</font>

50
00:02:20,130 --> 00:02:27,329
things right on<font color="#CCCCCC"> the box</font><font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font>

51
00:02:23,010 --> 00:02:29,340
<font color="#CCCCCC">bringing static tools in and maybe we</font>

52
00:02:27,330 --> 00:02:33,420
<font color="#E5E5E5">can even start</font><font color="#CCCCCC"> building tools that build</font>

53
00:02:29,340 --> 00:02:36,000
tools that<font color="#CCCCCC"> will be our will</font><font color="#E5E5E5"> be part</font><font color="#CCCCCC"> of</font>

54
00:02:33,420 --> 00:02:38,160
our offensive arsenal<font color="#CCCCCC"> and</font><font color="#E5E5E5"> also one of</font>

55
00:02:36,000 --> 00:02:40,200
the other things that<font color="#E5E5E5"> we need to keep in</font>

56
00:02:38,160 --> 00:02:41,940
mind<font color="#CCCCCC"> while we're doing</font><font color="#E5E5E5"> it is utilization</font>

57
00:02:40,200 --> 00:02:45,839
we have to operate<font color="#CCCCCC"> within the realm of</font>

58
00:02:41,940 --> 00:02:47,700
what's<font color="#E5E5E5"> available on that post and it may</font>

59
00:02:45,840 --> 00:02:50,970
not<font color="#CCCCCC"> necessarily be what you want</font><font color="#E5E5E5"> to be</font>

60
00:02:47,700 --> 00:02:53,489
on a host so retooling in the field has

61
00:02:50,970 --> 00:02:56,370
advantages right<font color="#E5E5E5"> you create custom</font><font color="#CCCCCC"> stuff</font>

62
00:02:53,490 --> 00:02:58,020
<font color="#CCCCCC">you create</font><font color="#E5E5E5"> custom code you you blend</font>

63
00:02:56,370 --> 00:03:00,720
into the environment<font color="#E5E5E5"> but you also have</font>

64
00:02:58,020 --> 00:03:03,780
disadvantages<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have dev time on the</font>

65
00:03:00,720 --> 00:03:06,540
<font color="#CCCCCC">lab host while being watched</font><font color="#E5E5E5"> many times</font>

66
00:03:03,780 --> 00:03:09,750
and it's a live<font color="#E5E5E5"> system right</font><font color="#CCCCCC"> so you do</font>

67
00:03:06,540 --> 00:03:12,209
not know how the<font color="#E5E5E5"> system responds your</font>

68
00:03:09,750 --> 00:03:14,880
operational security<font color="#E5E5E5"> also has to be a</font>

69
00:03:12,209 --> 00:03:17,760
priority<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> reality you've got bugs</font>

70
00:03:14,880 --> 00:03:20,340
you have defensive mechanisms<font color="#E5E5E5"> that watch</font>

71
00:03:17,760 --> 00:03:25,079
over you<font color="#E5E5E5"> and live offensive dev right on</font>

72
00:03:20,340 --> 00:03:26,880
the<font color="#E5E5E5"> host is is fairly hard so if we</font>

73
00:03:25,080 --> 00:03:29,220
agree<font color="#CCCCCC"> with the premise that we actually</font>

74
00:03:26,880 --> 00:03:31,709
need<font color="#CCCCCC"> to do live retooling on</font><font color="#E5E5E5"> a host</font><font color="#CCCCCC"> what</font>

75
00:03:29,220 --> 00:03:34,590
do we need for<font color="#E5E5E5"> this</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> define</font><font color="#CCCCCC"> some</font>

76
00:03:31,709 --> 00:03:37,980
goals<font color="#E5E5E5"> strategic goals of the</font><font color="#CCCCCC"> recon let's</font>

77
00:03:34,590 --> 00:03:40,800
say<font color="#E5E5E5"> right the first first path in before</font>

78
00:03:37,980 --> 00:03:43,790
we go further<font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to stay under the</font>

79
00:03:40,800 --> 00:03:47,400
<font color="#CCCCCC">radar for a longer time</font><font color="#E5E5E5"> survivability</font>

80
00:03:43,790 --> 00:03:50,489
<font color="#CCCCCC">you need to better deliver your</font><font color="#E5E5E5"> code or</font>

81
00:03:47,400 --> 00:03:54,510
payloads<font color="#CCCCCC"> to the existing ecosystem</font>

82
00:03:50,489 --> 00:03:57,540
without changing it and you need<font color="#E5E5E5"> to be</font>

83
00:03:54,510 --> 00:03:59,700
able to retool<font color="#CCCCCC"> for the unknown</font><font color="#E5E5E5"> right you</font>

84
00:03:57,540 --> 00:04:02,790
may not know what<font color="#E5E5E5"> kind of defenses you</font>

85
00:03:59,700 --> 00:04:05,250
<font color="#E5E5E5">have so from the tactical traits what</font>

86
00:04:02,790 --> 00:04:06,750
does<font color="#E5E5E5"> left</font><font color="#CCCCCC"> - life</font><font color="#E5E5E5"> - and</font><font color="#CCCCCC"> really mean so</font>

87
00:04:05,250 --> 00:04:08,790
you have to support<font color="#E5E5E5"> the transfer of the</font>

88
00:04:06,750 --> 00:04:11,670
payloads<font color="#CCCCCC"> you have to support</font><font color="#E5E5E5"> a building</font>

89
00:04:08,790 --> 00:04:13,500
of those payloads<font color="#CCCCCC"> on-site while you're</font>

90
00:04:11,670 --> 00:04:16,260
evading<font color="#E5E5E5"> operating system and sometimes</font>

91
00:04:13,500 --> 00:04:18,149
<font color="#CCCCCC">network defenses so</font><font color="#E5E5E5"> essentially stop</font>

92
00:04:16,260 --> 00:04:20,039
being a kitchen and they I<font color="#E5E5E5"> mean the</font>

93
00:04:18,149 --> 00:04:21,510
elephant<font color="#E5E5E5"> in the kitchen and you know</font>

94
00:04:20,040 --> 00:04:25,349
breaking<font color="#E5E5E5"> all the rules while you're</font>

95
00:04:21,510 --> 00:04:27,780
doing your recon<font color="#E5E5E5"> once we agree to that</font>

96
00:04:25,349 --> 00:04:28,050
we start building<font color="#CCCCCC"> this right what are</font>

97
00:04:27,780 --> 00:04:29,909
the

98
00:04:28,050 --> 00:04:32,129
<font color="#CCCCCC">if we need</font><font color="#E5E5E5"> to accomplish our goals that</font>

99
00:04:29,909 --> 00:04:35,520
we<font color="#CCCCCC"> set out to</font><font color="#E5E5E5"> accomplish</font><font color="#CCCCCC"> so from the</font>

100
00:04:32,129 --> 00:04:38,069
technical standpoint<font color="#CCCCCC"> you want to</font><font color="#E5E5E5"> avoid</font>

101
00:04:35,520 --> 00:04:40,680
<font color="#E5E5E5">logs right on the operating system</font>

102
00:04:38,069 --> 00:04:42,750
<font color="#E5E5E5">facilities you may need to get to a</font>

103
00:04:40,680 --> 00:04:47,729
reasonable interface with legacy or

104
00:04:42,750 --> 00:04:50,129
unmanaged<font color="#E5E5E5"> layer right of of the</font>

105
00:04:47,729 --> 00:04:52,830
operating system<font color="#CCCCCC"> you may have a</font>

106
00:04:50,129 --> 00:04:54,509
<font color="#E5E5E5">different decent</font><font color="#CCCCCC"> interrupt with with OS</font>

107
00:04:52,830 --> 00:04:57,389
and<font color="#E5E5E5"> api's that</font><font color="#CCCCCC"> exists on that machine</font>

108
00:04:54,509 --> 00:04:59,159
<font color="#CCCCCC">and obviously you always</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> keep</font>

109
00:04:57,389 --> 00:05:04,199
<font color="#E5E5E5">your operational security for your tools</font>

110
00:04:59,159 --> 00:05:07,159
<font color="#CCCCCC">so there's this concept of slim payload</font>

111
00:05:04,199 --> 00:05:10,500
delivery right so you've<font color="#E5E5E5"> got a slim</font>

112
00:05:07,159 --> 00:05:12,690
<font color="#E5E5E5">cradle that doesn't post it doesn't pose</font>

113
00:05:10,500 --> 00:05:15,120
<font color="#E5E5E5">any threat to the operating system it's</font>

114
00:05:12,690 --> 00:05:19,889
<font color="#E5E5E5">not detectable it doesn't carry payloads</font>

115
00:05:15,120 --> 00:05:22,349
it doesn't have a<font color="#E5E5E5"> malicious feature it</font>

116
00:05:19,889 --> 00:05:24,210
doesn't serve malicious goals<font color="#CCCCCC"> so it is</font>

117
00:05:22,349 --> 00:05:26,909
benign<font color="#E5E5E5"> from the scanning perspective</font>

118
00:05:24,210 --> 00:05:28,799
<font color="#E5E5E5">right but it can't dynamically load</font>

119
00:05:26,909 --> 00:05:31,379
<font color="#E5E5E5">other payloads that bring you bring in</font>

120
00:05:28,800 --> 00:05:34,020
and you can actually<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> should</font>

121
00:05:31,379 --> 00:05:37,889
be able<font color="#CCCCCC"> to load assemblies if we're</font>

122
00:05:34,020 --> 00:05:40,919
talking about dotnet<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the concept of</font>

123
00:05:37,889 --> 00:05:42,419
treating code as data<font color="#E5E5E5"> that you bring in</font>

124
00:05:40,919 --> 00:05:45,810
into the<font color="#CCCCCC"> environment</font><font color="#E5E5E5"> and then you start</font>

125
00:05:42,419 --> 00:05:47,159
<font color="#CCCCCC">operating on the more important things</font>

126
00:05:45,810 --> 00:05:49,620
we're gonna see down down<font color="#E5E5E5"> in</font>

127
00:05:47,159 --> 00:05:51,930
presentation would<font color="#E5E5E5"> be you know so we're</font>

128
00:05:49,620 --> 00:05:53,639
gonna do compilation obviously<font color="#E5E5E5"> and we</font>

129
00:05:51,930 --> 00:05:55,380
but we also want<font color="#CCCCCC"> to decouple</font><font color="#E5E5E5"> the</font>

130
00:05:53,639 --> 00:05:58,830
<font color="#CCCCCC">compilation from the</font><font color="#E5E5E5"> actual execution</font>

131
00:05:55,380 --> 00:06:02,610
<font color="#E5E5E5">right so the cycle may confuse defense a</font>

132
00:05:58,830 --> 00:06:04,919
<font color="#E5E5E5">little bit more so what are the current</font>

133
00:06:02,610 --> 00:06:06,569
options that we have well normally we

134
00:06:04,919 --> 00:06:10,109
default to<font color="#E5E5E5"> PowerShell right it's</font>

135
00:06:06,569 --> 00:06:12,870
available<font color="#CCCCCC"> it's installed</font><font color="#E5E5E5"> it's it's used</font>

136
00:06:10,110 --> 00:06:17,250
<font color="#CCCCCC">very heavily</font><font color="#E5E5E5"> from both defensive and</font>

137
00:06:12,870 --> 00:06:20,400
<font color="#E5E5E5">offensive perspectives we've got</font><font color="#CCCCCC"> WMI and</font>

138
00:06:17,250 --> 00:06:23,039
we also have<font color="#CCCCCC"> comma</font><font color="#E5E5E5"> and unmanaged code</font>

139
00:06:20,400 --> 00:06:24,989
right you can code towards<font color="#E5E5E5"> direct API in</font>

140
00:06:23,039 --> 00:06:27,560
<font color="#E5E5E5">the Windows machine</font><font color="#CCCCCC"> you also have direct</font>

141
00:06:24,990 --> 00:06:32,009
managed code which is dotnet<font color="#E5E5E5"> everybody</font>

142
00:06:27,560 --> 00:06:34,289
loves and knows about<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so both all</font>

143
00:06:32,009 --> 00:06:37,139
<font color="#E5E5E5">of these options have pros</font><font color="#CCCCCC"> and cons so</font>

144
00:06:34,289 --> 00:06:39,779
you're talking<font color="#E5E5E5"> about availability of the</font>

145
00:06:37,139 --> 00:06:41,939
compilers on the target system

146
00:06:39,779 --> 00:06:43,199
use of<font color="#E5E5E5"> ease of</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> and logging for</font>

147
00:06:41,939 --> 00:06:46,830
example for<font color="#CCCCCC"> PowerShell through</font>

148
00:06:43,199 --> 00:06:48,960
automation<font color="#CCCCCC"> API and then if you want to</font>

149
00:06:46,830 --> 00:06:50,729
<font color="#E5E5E5">drop into</font><font color="#CCCCCC"> Interop and actually talk to</font>

150
00:06:48,960 --> 00:06:53,188
<font color="#E5E5E5">the operating</font><font color="#CCCCCC"> system at the low level</font>

151
00:06:50,729 --> 00:06:55,169
then<font color="#E5E5E5"> you have those interfaces and comm</font>

152
00:06:53,189 --> 00:06:59,039
that<font color="#E5E5E5"> you need to make sure that you</font>

153
00:06:55,169 --> 00:07:00,779
actually<font color="#E5E5E5"> cover so and it also you</font><font color="#CCCCCC"> know</font>

154
00:06:59,039 --> 00:07:04,438
comes down to how well<font color="#CCCCCC"> you can actually</font>

155
00:07:00,779 --> 00:07:08,520
develop<font color="#CCCCCC"> an alive environment there</font><font color="#E5E5E5"> okay</font>

156
00:07:04,439 --> 00:07:10,379
so out of all these<font color="#E5E5E5"> options</font><font color="#CCCCCC"> I'm very</font>

157
00:07:08,520 --> 00:07:13,889
interested<font color="#E5E5E5"> in that net</font><font color="#CCCCCC"> right the</font><font color="#E5E5E5"> managed</font>

158
00:07:10,379 --> 00:07:15,779
code what we can do with<font color="#E5E5E5"> it</font><font color="#CCCCCC"> so the the</font>

159
00:07:13,889 --> 00:07:17,909
<font color="#CCCCCC">the issue</font><font color="#E5E5E5"> of executing code through</font>

160
00:07:15,779 --> 00:07:18,300
dotnet is<font color="#E5E5E5"> not new there are tons of</font>

161
00:07:17,909 --> 00:07:20,430
tools

162
00:07:18,300 --> 00:07:23,430
static tools that exist<font color="#E5E5E5"> that should be</font>

163
00:07:20,430 --> 00:07:25,379
able to do any kind<font color="#E5E5E5"> invocation of</font>

164
00:07:23,430 --> 00:07:29,939
<font color="#E5E5E5">operating system commands to powershell</font>

165
00:07:25,379 --> 00:07:32,969
from dotnet but our goal here<font color="#CCCCCC"> is how do</font>

166
00:07:29,939 --> 00:07:35,430
<font color="#E5E5E5">we use that net</font><font color="#CCCCCC"> in two retooling of our</font>

167
00:07:32,969 --> 00:07:38,520
<font color="#CCCCCC">arsenal right on the box without having</font>

168
00:07:35,430 --> 00:07:40,710
static<font color="#E5E5E5"> tools in so the advantage of the</font>

169
00:07:38,520 --> 00:07:42,389
dotnet for using<font color="#E5E5E5"> this is you obviously</font>

170
00:07:40,710 --> 00:07:44,758
<font color="#CCCCCC">have breadth of interfaces to the</font>

171
00:07:42,389 --> 00:07:48,240
<font color="#E5E5E5">operating</font><font color="#CCCCCC"> system you know wealth of very</font>

172
00:07:44,759 --> 00:07:50,610
well<font color="#CCCCCC"> developed you know</font><font color="#E5E5E5"> features that</font>

173
00:07:48,240 --> 00:07:52,740
target anything from<font color="#E5E5E5"> network</font>

174
00:07:50,610 --> 00:07:54,569
<font color="#E5E5E5">communication to host communication you</font>

175
00:07:52,740 --> 00:07:57,060
can<font color="#E5E5E5"> reach deep into operating system</font>

176
00:07:54,569 --> 00:08:00,870
with process and vocation<font color="#CCCCCC"> or</font><font color="#E5E5E5"> platform</font>

177
00:07:57,060 --> 00:08:02,580
invoke and you have utilization

178
00:08:00,870 --> 00:08:05,759
properties<font color="#CCCCCC"> to.net meaning it is</font>

179
00:08:02,580 --> 00:08:09,990
available on at least latest<font color="#E5E5E5"> Windows</font>

180
00:08:05,759 --> 00:08:12,479
machines<font color="#E5E5E5"> it's fairly flexible and to</font>

181
00:08:09,990 --> 00:08:14,490
solve our problem initially<font color="#CCCCCC"> is that it's</font>

182
00:08:12,479 --> 00:08:14,639
not<font color="#E5E5E5"> logged at the API</font><font color="#CCCCCC"> level at least</font><font color="#E5E5E5"> for</font>

183
00:08:14,490 --> 00:08:16,439
now

184
00:08:14,639 --> 00:08:18,899
right if PowerShell is logged and<font color="#E5E5E5"> that</font>

185
00:08:16,439 --> 00:08:20,759
net is<font color="#CCCCCC"> not logged right</font><font color="#E5E5E5"> now but it does</font>

186
00:08:18,899 --> 00:08:22,469
have<font color="#CCCCCC"> disadvantages and those</font>

187
00:08:20,759 --> 00:08:24,749
disadvantages are something<font color="#CCCCCC"> that we have</font>

188
00:08:22,469 --> 00:08:27,029
to deal with<font color="#E5E5E5"> well first of all it's a</font>

189
00:08:24,749 --> 00:08:28,709
slower day of time<font color="#E5E5E5"> right you have to go</font>

190
00:08:27,029 --> 00:08:31,770
through<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cycle of writing compiling</font>

191
00:08:28,709 --> 00:08:33,779
running a writing compiling<font color="#E5E5E5"> writing</font><font color="#CCCCCC"> is</font>

192
00:08:31,770 --> 00:08:35,760
<font color="#E5E5E5">very little prototyping and that not</font>

193
00:08:33,779 --> 00:08:37,469
inherent<font color="#E5E5E5"> to the box right we're</font><font color="#CCCCCC"> taking</font>

194
00:08:35,760 --> 00:08:39,448
it as<font color="#E5E5E5"> a</font><font color="#CCCCCC"> carte blanche there isn't</font>

195
00:08:37,469 --> 00:08:40,829
<font color="#E5E5E5">there's nothing installed on the on the</font>

196
00:08:39,448 --> 00:08:43,948
Windows machine except for dotnet<font color="#E5E5E5"> and</font>

197
00:08:40,828 --> 00:08:46,829
<font color="#CCCCCC">maybe a compiler</font><font color="#E5E5E5"> and it is compilation</font>

198
00:08:43,948 --> 00:08:50,760
right it is<font color="#E5E5E5"> identifiable by digital</font>

199
00:08:46,829 --> 00:08:52,709
forensics as well<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we know that</font><font color="#E5E5E5"> we</font>

200
00:08:50,760 --> 00:08:53,010
can target advantages all the advantages

201
00:08:52,709 --> 00:08:55,640
<font color="#CCCCCC">are</font>

202
00:08:53,010 --> 00:08:58,380
<font color="#E5E5E5">playing towards our favor</font><font color="#CCCCCC"> but our</font>

203
00:08:55,640 --> 00:09:02,280
disadvantages have to be<font color="#E5E5E5"> also recognized</font>

204
00:08:58,380 --> 00:09:04,530
<font color="#CCCCCC">so let's address them so let's let's</font>

205
00:09:02,280 --> 00:09:06,990
start<font color="#E5E5E5"> to start let's</font><font color="#CCCCCC"> start to gradually</font>

206
00:09:04,530 --> 00:09:09,470
design and build this<font color="#E5E5E5"> sort of you know</font>

207
00:09:06,990 --> 00:09:12,030
prototype the<font color="#E5E5E5"> managed execution toolkit</font>

208
00:09:09,470 --> 00:09:15,300
<font color="#E5E5E5">behind those big words what</font><font color="#CCCCCC"> that really</font>

209
00:09:12,030 --> 00:09:18,810
means is it<font color="#CCCCCC"> using dotnet to be able to</font>

210
00:09:15,300 --> 00:09:21,599
<font color="#E5E5E5">execute your code</font><font color="#CCCCCC"> execute</font><font color="#E5E5E5"> your data that</font>

211
00:09:18,810 --> 00:09:26,099
<font color="#E5E5E5">you bring in from</font><font color="#CCCCCC"> the outside or or</font>

212
00:09:21,600 --> 00:09:29,120
write directly on<font color="#CCCCCC"> the box</font><font color="#E5E5E5"> and so and so</font>

213
00:09:26,100 --> 00:09:31,500
<font color="#CCCCCC">we begin with a module of the typhoon</font>

214
00:09:29,120 --> 00:09:33,740
which which is<font color="#CCCCCC"> a name for managed</font>

215
00:09:31,500 --> 00:09:37,260
execution<font color="#E5E5E5"> kit proof of concept</font><font color="#CCCCCC"> here is</font>

216
00:09:33,740 --> 00:09:39,780
seesaw seesaw<font color="#E5E5E5"> meaning really just</font>

217
00:09:37,260 --> 00:09:43,140
focusing on<font color="#CCCCCC"> c-sharp implementation of</font>

218
00:09:39,780 --> 00:09:47,819
that<font color="#E5E5E5"> so when we start thinking about</font>

219
00:09:43,140 --> 00:09:49,500
this<font color="#E5E5E5"> compilation</font><font color="#CCCCCC"> and running</font><font color="#E5E5E5"> cycle that</font>

220
00:09:47,820 --> 00:09:51,210
you rinse and repeat right we have a

221
00:09:49,500 --> 00:09:53,190
source code we've got a compiler you've

222
00:09:51,210 --> 00:09:56,640
got the executable and then you go with

223
00:09:53,190 --> 00:09:58,830
<font color="#CCCCCC">it</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the offensive perspective what</font>

224
00:09:56,640 --> 00:10:02,370
is dotnet in a nutshell<font color="#E5E5E5"> right you've got</font>

225
00:09:58,830 --> 00:10:04,740
the api's you've got the common language

226
00:10:02,370 --> 00:10:07,050
runtime<font color="#CCCCCC"> which is the</font><font color="#E5E5E5"> framework of dotnet</font>

227
00:10:04,740 --> 00:10:10,230
and you've got compilers that<font color="#E5E5E5"> is</font>

228
00:10:07,050 --> 00:10:12,510
inherent to<font color="#E5E5E5"> the Windows installation but</font>

229
00:10:10,230 --> 00:10:16,710
you also have some distant relatives of

230
00:10:12,510 --> 00:10:19,140
that right you've got a code<font color="#E5E5E5"> object</font>

231
00:10:16,710 --> 00:10:21,210
model<font color="#E5E5E5"> and you've got some other things</font>

232
00:10:19,140 --> 00:10:24,120
<font color="#CCCCCC">that we're going to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about so we</font>

233
00:10:21,210 --> 00:10:30,030
want to focus on things that<font color="#E5E5E5"> build</font>

234
00:10:24,120 --> 00:10:32,670
things for us so code<font color="#CCCCCC"> Dom is essentially</font>

235
00:10:30,030 --> 00:10:35,459
solving<font color="#E5E5E5"> the issue of dynamic compilation</font>

236
00:10:32,670 --> 00:10:38,400
<font color="#E5E5E5">and creation of code generation</font><font color="#CCCCCC"> of code</font>

237
00:10:35,460 --> 00:10:43,710
generation<font color="#CCCCCC"> of code from code right you</font>

238
00:10:38,400 --> 00:10:47,880
see this from asp.net<font color="#E5E5E5"> XML</font><font color="#CCCCCC"> a bunch of UI</font>

239
00:10:43,710 --> 00:10:49,980
code<font color="#CCCCCC"> Wizards in</font><font color="#E5E5E5"> Visual Studio and it's a</font>

240
00:10:47,880 --> 00:10:51,720
salt<font color="#E5E5E5"> problem right you you want to</font>

241
00:10:49,980 --> 00:10:55,890
create your code from the code<font color="#E5E5E5"> that you</font>

242
00:10:51,720 --> 00:10:59,760
<font color="#CCCCCC">have and you essentially compile</font>

243
00:10:55,890 --> 00:11:02,580
<font color="#E5E5E5">something that you know</font><font color="#CCCCCC"> something from</font>

244
00:10:59,760 --> 00:11:05,640
you you<font color="#E5E5E5"> take a maybe a string of code</font>

245
00:11:02,580 --> 00:11:08,730
right<font color="#E5E5E5"> and you turn it into an</font><font color="#CCCCCC"> object</font>

246
00:11:05,640 --> 00:11:12,329
and so you<font color="#CCCCCC"> made the code right omission</font>

247
00:11:08,730 --> 00:11:14,880
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> code is</font><font color="#CCCCCC"> the goal here</font><font color="#E5E5E5"> and the</font>

248
00:11:12,329 --> 00:11:16,979
good<font color="#E5E5E5"> thing about this code um is that</font>

249
00:11:14,880 --> 00:11:19,740
<font color="#CCCCCC">you can do dynamic</font><font color="#E5E5E5"> compilation no longer</font>

250
00:11:16,980 --> 00:11:21,060
you need<font color="#E5E5E5"> to invoke CSC that exe for</font>

251
00:11:19,740 --> 00:11:23,790
example right because it may be

252
00:11:21,060 --> 00:11:25,319
<font color="#E5E5E5">blacklisted there may be logged somehow</font>

253
00:11:23,790 --> 00:11:27,599
from the command shell so you can

254
00:11:25,320 --> 00:11:29,130
actually<font color="#E5E5E5"> do it</font><font color="#CCCCCC"> right in the in the</font>

255
00:11:27,600 --> 00:11:32,160
cradle that's limb cradle you can

256
00:11:29,130 --> 00:11:34,260
dynamically compile it so the first

257
00:11:32,160 --> 00:11:37,529
<font color="#CCCCCC">order of operation</font><font color="#E5E5E5"> to solve our issues</font>

258
00:11:34,260 --> 00:11:39,209
is<font color="#E5E5E5"> R Apple</font><font color="#CCCCCC"> write some things that we're</font>

259
00:11:37,529 --> 00:11:41,490
missing in<font color="#CCCCCC"> that net let's do a little</font>

260
00:11:39,209 --> 00:11:44,969
<font color="#CCCCCC">rebel so we can</font><font color="#E5E5E5"> constantly you know</font>

261
00:11:41,490 --> 00:11:49,050
<font color="#E5E5E5">prove our code prototype our code you</font>

262
00:11:44,970 --> 00:11:52,079
can use<font color="#E5E5E5"> VB JavaScript or jscript brother</font>

263
00:11:49,050 --> 00:11:55,709
<font color="#E5E5E5">or she sharp in code</font><font color="#CCCCCC"> dom so we're gonna</font>

264
00:11:52,079 --> 00:11:57,750
<font color="#E5E5E5">concentrate on c-sharp so we want quick</font>

265
00:11:55,709 --> 00:12:00,060
gains<font color="#E5E5E5"> because if we want to see what</font>

266
00:11:57,750 --> 00:12:01,740
<font color="#E5E5E5">this machine is about we need to</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> into</font>

267
00:12:00,060 --> 00:12:04,649
the cycle<font color="#E5E5E5"> really fast and we want to</font>

268
00:12:01,740 --> 00:12:06,300
execute<font color="#E5E5E5"> interactive commands maybe on it</font>

269
00:12:04,649 --> 00:12:08,269
right so we're gonna<font color="#E5E5E5"> take</font><font color="#CCCCCC"> the code we're</font>

270
00:12:06,300 --> 00:12:11,760
<font color="#E5E5E5">gonna compile it into some form of a</font>

271
00:12:08,269 --> 00:12:14,130
digestible<font color="#CCCCCC"> you know format and then</font>

272
00:12:11,760 --> 00:12:17,120
we're gonna try to<font color="#E5E5E5"> execute this so from</font>

273
00:12:14,130 --> 00:12:21,329
the patient perspective red team's<font color="#E5E5E5"> gain</font>

274
00:12:17,120 --> 00:12:22,079
<font color="#CCCCCC">you move away from CSC dot exe or</font>

275
00:12:21,329 --> 00:12:23,910
<font color="#CCCCCC">msbuild</font>

276
00:12:22,079 --> 00:12:27,180
into the dynamic compilation right at

277
00:12:23,910 --> 00:12:28,980
the code level<font color="#E5E5E5"> so what's needed it's not</font>

278
00:12:27,180 --> 00:12:30,899
really hard<font color="#CCCCCC"> to compile it but you need</font>

279
00:12:28,980 --> 00:12:33,149
<font color="#E5E5E5">to make sure you take</font><font color="#CCCCCC"> care of certain</font>

280
00:12:30,899 --> 00:12:36,630
<font color="#CCCCCC">things first of all you need to load</font>

281
00:12:33,149 --> 00:12:38,790
your you need to understand how<font color="#E5E5E5"> you want</font>

282
00:12:36,630 --> 00:12:40,439
to compile it in a safe manner<font color="#CCCCCC"> right do</font>

283
00:12:38,790 --> 00:12:43,560
you want<font color="#E5E5E5"> to compile it in memory do you</font>

284
00:12:40,440 --> 00:12:45,630
<font color="#E5E5E5">want to compile and drop the executable</font>

285
00:12:43,560 --> 00:12:47,790
<font color="#CCCCCC">in the disk</font><font color="#E5E5E5"> where are your temp files</font>

286
00:12:45,630 --> 00:12:49,140
are<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be stored and what are the</font>

287
00:12:47,790 --> 00:12:50,910
compiler parameters that<font color="#E5E5E5"> you're gonna</font>

288
00:12:49,140 --> 00:12:54,680
pass to the compiler<font color="#CCCCCC"> to accomplish your</font>

289
00:12:50,910 --> 00:12:57,719
goal<font color="#E5E5E5"> specifically for Apple right</font><font color="#CCCCCC"> and so</font>

290
00:12:54,680 --> 00:13:00,029
many things can<font color="#CCCCCC"> go wrong here and let's</font>

291
00:12:57,720 --> 00:13:05,220
dive in<font color="#CCCCCC"> and attack what can go wrong how</font>

292
00:13:00,029 --> 00:13:07,170
we can<font color="#CCCCCC"> actually do this so there are</font>

293
00:13:05,220 --> 00:13:09,120
<font color="#E5E5E5">certain things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> can be evaded while</font>

294
00:13:07,170 --> 00:13:11,819
you're compiling<font color="#CCCCCC"> code</font><font color="#E5E5E5"> down</font><font color="#CCCCCC"> write the</font>

295
00:13:09,120 --> 00:13:13,800
detections so for example if blue team

296
00:13:11,820 --> 00:13:15,810
is detecting<font color="#E5E5E5"> dll drops on the</font><font color="#CCCCCC"> filesystem</font>

297
00:13:13,800 --> 00:13:18,000
<font color="#CCCCCC">then you</font><font color="#E5E5E5"> can just replace the</font><font color="#CCCCCC"> allowance</font>

298
00:13:15,810 --> 00:13:19,180
<font color="#CCCCCC">with TMP is because that net has a</font>

299
00:13:18,000 --> 00:13:21,940
property<font color="#E5E5E5"> of not</font>

300
00:13:19,180 --> 00:13:23,979
<font color="#CCCCCC">wiring you to compile</font><font color="#E5E5E5"> to a</font><font color="#CCCCCC"> DLL name</font>

301
00:13:21,940 --> 00:13:25,720
right they will<font color="#E5E5E5"> happily take the TMP</font>

302
00:13:23,980 --> 00:13:30,370
<font color="#CCCCCC">name so that's your evasion point right</font>

303
00:13:25,720 --> 00:13:32,530
<font color="#CCCCCC">there so what is the goal for our</font><font color="#E5E5E5"> seesaw</font>

304
00:13:30,370 --> 00:13:35,910
<font color="#CCCCCC">right</font><font color="#E5E5E5"> beyond</font><font color="#CCCCCC"> Apple is</font><font color="#E5E5E5"> the dynamic</font>

305
00:13:32,530 --> 00:13:38,560
<font color="#CCCCCC">combination of c-sharp code</font><font color="#E5E5E5"> is the</font>

306
00:13:35,910 --> 00:13:41,410
dynamic loading of assemblies<font color="#E5E5E5"> into</font>

307
00:13:38,560 --> 00:13:43,449
memory<font color="#E5E5E5"> and removing those disk artifacts</font>

308
00:13:41,410 --> 00:13:46,719
that<font color="#E5E5E5"> we may potentially have here right</font>

309
00:13:43,450 --> 00:13:50,530
if we decide<font color="#CCCCCC"> to dump</font><font color="#E5E5E5"> a temp file</font>

310
00:13:46,720 --> 00:13:53,410
somewhere<font color="#E5E5E5"> and then possibly forcing</font>

311
00:13:50,530 --> 00:13:56,920
dotnet to compile and run in<font color="#CCCCCC"> separated</font>

312
00:13:53,410 --> 00:13:59,020
<font color="#E5E5E5">direction right for even further</font>

313
00:13:56,920 --> 00:14:01,300
<font color="#E5E5E5">confusion of the defense because of the</font>

314
00:13:59,020 --> 00:14:05,110
if the sandbox looks at the compilation

315
00:14:01,300 --> 00:14:06,699
<font color="#E5E5E5">and invocation</font><font color="#CCCCCC"> in one stage then</font><font color="#E5E5E5"> you may</font>

316
00:14:05,110 --> 00:14:10,240
<font color="#E5E5E5">get to the</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> where they can</font><font color="#CCCCCC"> actually</font>

317
00:14:06,700 --> 00:14:12,670
<font color="#E5E5E5">trace it better and then</font><font color="#CCCCCC"> you know other</font>

318
00:14:10,240 --> 00:14:16,470
things<font color="#E5E5E5"> that we we want to achieve from</font>

319
00:14:12,670 --> 00:14:18,939
<font color="#E5E5E5">the</font><font color="#CCCCCC"> operational security perspective</font><font color="#E5E5E5"> and</font>

320
00:14:16,470 --> 00:14:21,580
features<font color="#E5E5E5"> that we want in here</font><font color="#CCCCCC"> so let's</font>

321
00:14:18,940 --> 00:14:24,160
<font color="#E5E5E5">go through this one by</font><font color="#CCCCCC"> one so R Apple is</font>

322
00:14:21,580 --> 00:14:25,750
still<font color="#CCCCCC"> on our list</font><font color="#E5E5E5"> right so that's how do</font>

323
00:14:24,160 --> 00:14:30,219
we do this so<font color="#CCCCCC"> we know we</font><font color="#E5E5E5"> can generate</font>

324
00:14:25,750 --> 00:14:32,590
code for<font color="#E5E5E5"> code</font><font color="#CCCCCC"> Dom right we want to have</font>

325
00:14:30,220 --> 00:14:34,900
some<font color="#E5E5E5"> form of a contract</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> our code</font>

326
00:14:32,590 --> 00:14:37,180
that executes<font color="#E5E5E5"> in the loop right for</font>

327
00:14:34,900 --> 00:14:39,430
example<font color="#CCCCCC"> we want to compile it we want to</font>

328
00:14:37,180 --> 00:14:41,410
get<font color="#CCCCCC"> results from it and we want to</font>

329
00:14:39,430 --> 00:14:45,489
dispose the object that you've<font color="#CCCCCC"> just run</font>

330
00:14:41,410 --> 00:14:48,040
so you don't leak<font color="#CCCCCC"> memory or whatever the</font>

331
00:14:45,490 --> 00:14:50,230
case may be here<font color="#E5E5E5"> so for code</font><font color="#CCCCCC"> Dom it's</font>

332
00:14:48,040 --> 00:14:51,849
just<font color="#CCCCCC"> a string right so you you put a</font>

333
00:14:50,230 --> 00:14:56,200
snippet directives like<font color="#E5E5E5"> for example</font>

334
00:14:51,850 --> 00:14:58,270
using system into<font color="#E5E5E5"> one object or part of</font>

335
00:14:56,200 --> 00:15:01,240
<font color="#E5E5E5">the code then</font><font color="#CCCCCC"> you have some form of</font><font color="#E5E5E5"> an</font>

336
00:14:58,270 --> 00:15:03,160
<font color="#E5E5E5">instrumentation from your cradle code to</font>

337
00:15:01,240 --> 00:15:05,950
run the<font color="#E5E5E5"> code through the dynamic</font><font color="#CCCCCC"> compile</font>

338
00:15:03,160 --> 00:15:08,850
and<font color="#CCCCCC"> then you dispose that right so we</font>

339
00:15:05,950 --> 00:15:11,500
<font color="#E5E5E5">marry code down to the compilation also</font>

340
00:15:08,850 --> 00:15:13,480
evasion points here that<font color="#CCCCCC"> you generate</font>

341
00:15:11,500 --> 00:15:15,640
half of the code from<font color="#CCCCCC"> the tool and the</font>

342
00:15:13,480 --> 00:15:18,070
other code<font color="#E5E5E5"> the other half of the code</font>

343
00:15:15,640 --> 00:15:21,840
comes<font color="#CCCCCC"> from the operator somebody who</font>

344
00:15:18,070 --> 00:15:21,840
wants<font color="#E5E5E5"> to run</font><font color="#CCCCCC"> the code in the wrapper</font>

345
00:15:22,000 --> 00:15:30,190
once you compile you can reflectively

346
00:15:26,170 --> 00:15:32,870
load<font color="#E5E5E5"> your namespace for</font><font color="#CCCCCC"> example it's</font>

347
00:15:30,190 --> 00:15:35,510
called dynamic<font color="#E5E5E5"> compile right and then</font>

348
00:15:32,870 --> 00:15:36,950
use activator reflection to create an

349
00:15:35,510 --> 00:15:39,290
instance<font color="#E5E5E5"> of your code that you've just</font>

350
00:15:36,950 --> 00:15:41,210
compiled through<font color="#CCCCCC"> R Apple then you get</font>

351
00:15:39,290 --> 00:15:43,069
<font color="#E5E5E5">results and then you dispose so</font>

352
00:15:41,210 --> 00:15:47,570
essentially this is<font color="#E5E5E5"> how</font><font color="#CCCCCC"> our rebel is</font>

353
00:15:43,070 --> 00:15:51,680
going to work<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so at the rebel at the</font>

354
00:15:47,570 --> 00:15:53,300
you<font color="#E5E5E5"> know whatever interpreter shell that</font>

355
00:15:51,680 --> 00:15:56,390
you<font color="#E5E5E5"> have you specify a directive that</font>

356
00:15:53,300 --> 00:15:57,829
<font color="#E5E5E5">goes into preamble right and then you</font>

357
00:15:56,390 --> 00:16:00,560
<font color="#E5E5E5">have the code and then you start</font>

358
00:15:57,830 --> 00:16:04,070
compiling<font color="#E5E5E5"> and you get the result because</font>

359
00:16:00,560 --> 00:16:05,540
you<font color="#E5E5E5"> you've invoked</font><font color="#CCCCCC"> that the contract</font><font color="#E5E5E5"> so</font>

360
00:16:04,070 --> 00:16:07,550
in this contrived example we just<font color="#CCCCCC"> get</font>

361
00:16:05,540 --> 00:16:08,810
the<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of you know what languages</font>

362
00:16:07,550 --> 00:16:10,609
and compilers<font color="#E5E5E5"> are available</font><font color="#CCCCCC"> in the</font>

363
00:16:08,810 --> 00:16:12,680
<font color="#CCCCCC">system</font><font color="#E5E5E5"> but your mind mileage may vary</font>

364
00:16:10,610 --> 00:16:16,730
you can start query in the system

365
00:16:12,680 --> 00:16:19,010
through dotnet so<font color="#E5E5E5"> CS r</font><font color="#CCCCCC"> apple has a code</font>

366
00:16:16,730 --> 00:16:21,410
<font color="#E5E5E5">cradle</font><font color="#CCCCCC"> like we saw it uses code Dom</font>

367
00:16:19,010 --> 00:16:24,110
right and it has rudimentary reusable

368
00:16:21,410 --> 00:16:27,410
component<font color="#CCCCCC"> because of the contract</font><font color="#E5E5E5"> but</font>

369
00:16:24,110 --> 00:16:29,300
it's also sequential it's also there's

370
00:16:27,410 --> 00:16:31,670
no abstraction you<font color="#E5E5E5"> can run functions off</font>

371
00:16:29,300 --> 00:16:35,089
of it<font color="#E5E5E5"> you can create namespaces you</font>

372
00:16:31,670 --> 00:16:38,180
can't do any sort<font color="#E5E5E5"> of you know object</font>

373
00:16:35,089 --> 00:16:41,209
manipulation<font color="#CCCCCC"> beyond your direct branch</font>

374
00:16:38,180 --> 00:16:43,550
<font color="#CCCCCC">so you can't reuse the code and so it's</font>

375
00:16:41,209 --> 00:16:47,319
it's quick<font color="#CCCCCC"> and dirty it works</font><font color="#E5E5E5"> but we can</font>

376
00:16:43,550 --> 00:16:49,609
do better<font color="#CCCCCC"> to the right side there is</font><font color="#E5E5E5"> a</font>

377
00:16:47,320 --> 00:16:52,790
there<font color="#CCCCCC"> is a script that you can actually</font>

378
00:16:49,610 --> 00:16:54,980
paste into the you know<font color="#CCCCCC"> rabble right</font>

379
00:16:52,790 --> 00:16:57,110
here right and so if you brought<font color="#CCCCCC"> a</font>

380
00:16:54,980 --> 00:16:59,150
<font color="#CCCCCC">script and</font><font color="#E5E5E5"> you can just paste those</font>

381
00:16:57,110 --> 00:17:01,100
things and and it will compile<font color="#E5E5E5"> in and</font>

382
00:16:59,150 --> 00:17:03,050
give you a<font color="#E5E5E5"> result but so it's a crude</font>

383
00:17:01,100 --> 00:17:06,589
way of<font color="#E5E5E5"> doing the</font><font color="#CCCCCC"> rapa</font><font color="#E5E5E5"> land scripting</font>

384
00:17:03,050 --> 00:17:08,869
together so we can do<font color="#E5E5E5"> better as we said</font>

385
00:17:06,589 --> 00:17:12,409
<font color="#E5E5E5">all right let's</font><font color="#CCCCCC"> fix the issue that we</font>

386
00:17:08,869 --> 00:17:14,719
had with with<font color="#CCCCCC"> r</font><font color="#E5E5E5"> apple of reusability and</font>

387
00:17:12,410 --> 00:17:17,059
<font color="#E5E5E5">just expansion let's create CSX</font>

388
00:17:14,720 --> 00:17:19,069
extensions CSX is just<font color="#E5E5E5"> a name it's it's</font>

389
00:17:17,059 --> 00:17:22,399
a c-sharp extension that's how<font color="#E5E5E5"> I</font><font color="#CCCCCC"> name</font>

390
00:17:19,069 --> 00:17:25,490
<font color="#E5E5E5">that right so we create a better</font>

391
00:17:22,400 --> 00:17:28,490
contract<font color="#E5E5E5"> so we say</font><font color="#CCCCCC"> April our pre-launch</font>

392
00:17:25,490 --> 00:17:30,740
<font color="#CCCCCC">run code and post launch</font><font color="#E5E5E5"> pretty simple</font>

393
00:17:28,490 --> 00:17:33,410
<font color="#E5E5E5">right but it's</font><font color="#CCCCCC"> also it also maintains</font>

394
00:17:30,740 --> 00:17:35,540
that<font color="#E5E5E5"> evasion vector right so you can</font>

395
00:17:33,410 --> 00:17:36,950
<font color="#CCCCCC">actually do you can split your code if</font>

396
00:17:35,540 --> 00:17:39,290
<font color="#E5E5E5">somebody is looking in</font><font color="#CCCCCC"> your memory for</font>

397
00:17:36,950 --> 00:17:42,140
for a payload code<font color="#CCCCCC"> B the shell code or</font>

398
00:17:39,290 --> 00:17:44,178
whatever<font color="#E5E5E5"> the case may be</font><font color="#CCCCCC"> then they don't</font>

399
00:17:42,140 --> 00:17:46,340
<font color="#E5E5E5">see it in one buffer they see then</font>

400
00:17:44,179 --> 00:17:48,770
something that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> split between the</font><font color="#CCCCCC"> two</font>

401
00:17:46,340 --> 00:17:50,510
and you the operator<font color="#E5E5E5"> so we want to</font>

402
00:17:48,770 --> 00:17:53,690
create<font color="#E5E5E5"> the full branching in classes we</font>

403
00:17:50,510 --> 00:17:56,029
want to<font color="#E5E5E5"> have a want to do compilation as</font>

404
00:17:53,690 --> 00:17:57,950
we did<font color="#E5E5E5"> before</font><font color="#CCCCCC"> and we can write</font>

405
00:17:56,029 --> 00:18:01,789
extensions that can<font color="#CCCCCC"> actually execute</font>

406
00:17:57,950 --> 00:18:03,289
<font color="#E5E5E5">real code</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the example of the</font>

407
00:18:01,789 --> 00:18:06,650
contract where we create a names

408
00:18:03,289 --> 00:18:08,990
namespace<font color="#E5E5E5"> let's say it's a file that you</font>

409
00:18:06,650 --> 00:18:12,850
want to invoke a code write a text file

410
00:18:08,990 --> 00:18:16,250
that<font color="#E5E5E5"> you somehow introduced into typhoon</font>

411
00:18:12,850 --> 00:18:18,709
<font color="#CCCCCC">and</font><font color="#E5E5E5"> it has to follow some rules right it</font>

412
00:18:16,250 --> 00:18:21,679
has<font color="#CCCCCC"> to have a specific name space</font><font color="#E5E5E5"> it has</font>

413
00:18:18,710 --> 00:18:25,309
to have a specific<font color="#CCCCCC"> before/after hook and</font>

414
00:18:21,679 --> 00:18:28,460
has to<font color="#E5E5E5"> have some form of execution</font><font color="#CCCCCC"> you</font>

415
00:18:25,309 --> 00:18:33,039
know your logic<font color="#CCCCCC"> and whatever</font><font color="#E5E5E5"> the case</font>

416
00:18:28,460 --> 00:18:35,419
may be so<font color="#CCCCCC"> from the operator perspective</font>

417
00:18:33,039 --> 00:18:39,080
<font color="#CCCCCC">they will see an executable which is a</font>

418
00:18:35,419 --> 00:18:41,240
slim cradle that doesn't have much<font color="#E5E5E5"> that</font>

419
00:18:39,080 --> 00:18:43,610
is going<font color="#CCCCCC"> to load</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> a code</font><font color="#E5E5E5"> file</font>

420
00:18:41,240 --> 00:18:45,529
<font color="#CCCCCC">right-click board manager dot CAS which</font>

421
00:18:43,610 --> 00:18:50,990
<font color="#CCCCCC">is code file</font><font color="#E5E5E5"> it's not executable it's</font>

422
00:18:45,529 --> 00:18:52,730
not assembly so it's pretty much<font color="#E5E5E5"> safe or</font>

423
00:18:50,990 --> 00:18:54,799
<font color="#E5E5E5">right that's we're talking about code as</font>

424
00:18:52,730 --> 00:18:56,330
data you bring in code inside<font color="#E5E5E5"> then you</font>

425
00:18:54,799 --> 00:18:59,230
just start compiling<font color="#E5E5E5"> or write the code</font>

426
00:18:56,330 --> 00:19:02,360
<font color="#E5E5E5">inside answer compiling so we know that</font>

427
00:18:59,230 --> 00:19:04,070
<font color="#CCCCCC">CSC</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> code um creates</font><font color="#E5E5E5"> temporary files</font>

428
00:19:02,360 --> 00:19:06,350
or<font color="#E5E5E5"> can't create temporary files</font>

429
00:19:04,070 --> 00:19:08,418
<font color="#E5E5E5">so after this invocation of compilation</font>

430
00:19:06,350 --> 00:19:10,969
you will have a temp file in<font color="#CCCCCC"> your</font>

431
00:19:08,419 --> 00:19:13,880
current<font color="#CCCCCC"> directory which is bad for</font><font color="#E5E5E5"> your</font>

432
00:19:10,970 --> 00:19:15,980
artifacts right<font color="#E5E5E5"> for hiding from incident</font>

433
00:19:13,880 --> 00:19:19,159
response<font color="#CCCCCC"> will</font><font color="#E5E5E5"> address that problem later</font>

434
00:19:15,980 --> 00:19:21,830
but here's the example<font color="#E5E5E5"> of what you would</font>

435
00:19:19,159 --> 00:19:24,770
do to compile it<font color="#E5E5E5"> in one iteration</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> a</font>

436
00:19:21,830 --> 00:19:26,840
<font color="#CCCCCC">DLL</font><font color="#E5E5E5"> and then you will execute that DLL</font>

437
00:19:24,770 --> 00:19:29,289
by loading<font color="#CCCCCC"> that DLL into</font><font color="#E5E5E5"> the memory of</font>

438
00:19:26,840 --> 00:19:32,620
the cradle<font color="#E5E5E5"> and then you would call that</font>

439
00:19:29,289 --> 00:19:35,210
<font color="#E5E5E5">namespace and the object to execute your</font>

440
00:19:32,620 --> 00:19:38,860
logic there right<font color="#CCCCCC"> so we're decoupling</font>

441
00:19:35,210 --> 00:19:43,279
compilation and execution goes and into

442
00:19:38,860 --> 00:19:45,379
so<font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about the</font><font color="#CCCCCC"> cfir</font><font color="#E5E5E5"> again right so</font>

443
00:19:43,279 --> 00:19:47,929
<font color="#CCCCCC">some things are good some things are not</font>

444
00:19:45,380 --> 00:19:52,130
so we're not invoking<font color="#CCCCCC"> CSC dot exe which</font>

445
00:19:47,929 --> 00:19:53,870
is good<font color="#CCCCCC"> but it is still indirectly</font>

446
00:19:52,130 --> 00:19:56,510
<font color="#E5E5E5">invoked right if you look</font><font color="#CCCCCC"> at this this</font>

447
00:19:53,870 --> 00:19:59,040
<font color="#CCCCCC">Mon or a process</font><font color="#E5E5E5"> monitor you will see</font>

448
00:19:56,510 --> 00:20:01,890
that<font color="#CCCCCC"> exactly the same facilities are</font>

449
00:19:59,040 --> 00:20:04,590
<font color="#CCCCCC">are engaged</font><font color="#E5E5E5"> just not directly from the</font>

450
00:20:01,890 --> 00:20:07,440
command<font color="#E5E5E5"> line also the other things that</font>

451
00:20:04,590 --> 00:20:09,270
<font color="#CCCCCC">we need to we need to make sure</font><font color="#E5E5E5"> we take</font>

452
00:20:07,440 --> 00:20:11,930
care<font color="#CCCCCC"> of is</font><font color="#E5E5E5"> the temp files right they can</font>

453
00:20:09,270 --> 00:20:14,670
be trained<font color="#E5E5E5"> transient or permanence</font>

454
00:20:11,930 --> 00:20:17,370
permanent<font color="#E5E5E5"> right so compilation in memory</font>

455
00:20:14,670 --> 00:20:19,860
in dotnet is<font color="#E5E5E5"> a misnomer</font><font color="#CCCCCC"> it never</font>

456
00:20:17,370 --> 00:20:23,659
compiles in memory it just compiles to<font color="#CCCCCC"> a</font>

457
00:20:19,860 --> 00:20:26,070
temporary space on<font color="#E5E5E5"> disk</font><font color="#CCCCCC"> right and so</font>

458
00:20:23,660 --> 00:20:28,230
something from the forensic perspective

459
00:20:26,070 --> 00:20:30,300
<font color="#CCCCCC">you know people are aware</font><font color="#E5E5E5"> and we should</font>

460
00:20:28,230 --> 00:20:31,170
be<font color="#E5E5E5"> aware of as offensive operators of</font>

461
00:20:30,300 --> 00:20:34,139
<font color="#E5E5E5">that as well</font>

462
00:20:31,170 --> 00:20:36,360
so we're gonna deal with this issues<font color="#CCCCCC"> you</font>

463
00:20:34,140 --> 00:20:38,460
know in a<font color="#E5E5E5"> different iteration and we</font>

464
00:20:36,360 --> 00:20:41,159
also want to make sure<font color="#E5E5E5"> that we can</font>

465
00:20:38,460 --> 00:20:44,280
actually<font color="#E5E5E5"> load and unload assemblies that</font>

466
00:20:41,160 --> 00:20:46,590
<font color="#E5E5E5">we compile and create dynamically for</font>

467
00:20:44,280 --> 00:20:49,020
example if you brought in some<font color="#CCCCCC"> code</font>

468
00:20:46,590 --> 00:20:51,840
you've<font color="#CCCCCC"> compile it you</font><font color="#E5E5E5"> loaded up the</font>

469
00:20:49,020 --> 00:20:54,330
<font color="#E5E5E5">assembly is locked right until the end</font>

470
00:20:51,840 --> 00:20:56,429
of<font color="#E5E5E5"> the iteration or execution of the of</font>

471
00:20:54,330 --> 00:20:58,350
the code<font color="#E5E5E5"> so you can't really in classic</font>

472
00:20:56,430 --> 00:21:00,150
dotnet you cannot remove that DLL<font color="#E5E5E5"> from</font>

473
00:20:58,350 --> 00:21:02,520
the disk<font color="#CCCCCC"> and sometimes you</font><font color="#E5E5E5"> want to do</font>

474
00:21:00,150 --> 00:21:05,010
this because you<font color="#CCCCCC"> want to stay in memory</font>

475
00:21:02,520 --> 00:21:06,900
<font color="#CCCCCC">even</font><font color="#E5E5E5"> if you drop the DLL temporarily for</font>

476
00:21:05,010 --> 00:21:09,810
just<font color="#E5E5E5"> sub-second right you want to be</font>

477
00:21:06,900 --> 00:21:12,150
able<font color="#E5E5E5"> to remove it okay so as we</font><font color="#CCCCCC"> talked</font>

478
00:21:09,810 --> 00:21:14,610
about<font color="#E5E5E5"> the generation and memory is not</font>

479
00:21:12,150 --> 00:21:16,590
really in memory it still drops it<font color="#E5E5E5"> into</font>

480
00:21:14,610 --> 00:21:19,199
a temp file<font color="#E5E5E5"> the question is where it</font>

481
00:21:16,590 --> 00:21:22,709
<font color="#CCCCCC">drops drops it</font><font color="#E5E5E5"> right if either drops it</font>

482
00:21:19,200 --> 00:21:24,600
<font color="#E5E5E5">into a local temp or it drops it</font><font color="#CCCCCC"> into</font>

483
00:21:22,710 --> 00:21:29,160
local<font color="#E5E5E5"> directory depending on how you</font>

484
00:21:24,600 --> 00:21:32,030
compile so selection<font color="#CCCCCC"> of parameters to</font>

485
00:21:29,160 --> 00:21:34,950
<font color="#CCCCCC">your CSC and</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> Dom are very important</font>

486
00:21:32,030 --> 00:21:36,690
this is the<font color="#E5E5E5"> the example of process</font>

487
00:21:34,950 --> 00:21:39,060
<font color="#CCCCCC">manager that is</font><font color="#E5E5E5"> looking at code</font><font color="#CCCCCC"> Dom</font>

488
00:21:36,690 --> 00:21:41,850
compilation and invocation<font color="#CCCCCC"> it's littered</font>

489
00:21:39,060 --> 00:21:43,919
with<font color="#E5E5E5"> artifacts it's littered with temp</font>

490
00:21:41,850 --> 00:21:47,280
files<font color="#CCCCCC"> it's littered</font><font color="#E5E5E5"> where the</font><font color="#CCCCCC"> dll's</font>

491
00:21:43,920 --> 00:21:52,710
they're dropped on the<font color="#CCCCCC"> Box we</font><font color="#E5E5E5"> want to</font>

492
00:21:47,280 --> 00:21:54,990
<font color="#E5E5E5">fix this so the</font><font color="#CCCCCC"> next goal for</font><font color="#E5E5E5"> seesaw</font><font color="#CCCCCC"> is</font>

493
00:21:52,710 --> 00:21:57,150
to remove artifacts right in order for

494
00:21:54,990 --> 00:21:59,310
us to<font color="#E5E5E5"> do this we</font><font color="#CCCCCC"> need to understand</font>

495
00:21:57,150 --> 00:22:03,840
limitations that<font color="#E5E5E5"> net first of all you</font>

496
00:21:59,310 --> 00:22:07,260
can't<font color="#E5E5E5"> a load byte code you can't load a</font>

497
00:22:03,840 --> 00:22:09,480
stream of bytes<font color="#E5E5E5"> or stream of you know</font>

498
00:22:07,260 --> 00:22:11,429
<font color="#CCCCCC">generating assembly into the memory</font><font color="#E5E5E5"> and</font>

499
00:22:09,480 --> 00:22:15,539
execute it<font color="#E5E5E5"> in a classic dotnet</font><font color="#CCCCCC"> with</font>

500
00:22:11,429 --> 00:22:19,259
further instrumentation<font color="#E5E5E5"> and so the way</font>

501
00:22:15,539 --> 00:22:22,950
<font color="#CCCCCC">to do this is to say okay</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know I</font>

502
00:22:19,259 --> 00:22:24,809
would like<font color="#E5E5E5"> to remove a</font><font color="#CCCCCC"> dll from the disk</font>

503
00:22:22,950 --> 00:22:27,239
but<font color="#E5E5E5"> I'm not able to do so</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> I'm</font>

504
00:22:24,809 --> 00:22:29,729
locked<font color="#E5E5E5"> right so we have to fix this</font>

505
00:22:27,239 --> 00:22:31,559
issue right<font color="#CCCCCC"> here and the way to do this</font>

506
00:22:29,729 --> 00:22:34,679
is to bring<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> concept</font><font color="#E5E5E5"> of</font>

507
00:22:31,559 --> 00:22:37,320
application domains<font color="#E5E5E5"> right you load your</font>

508
00:22:34,679 --> 00:22:39,539
<font color="#CCCCCC">DLL</font><font color="#E5E5E5"> your load your artifact you load</font>

509
00:22:37,320 --> 00:22:41,369
your executable payload into a

510
00:22:39,539 --> 00:22:44,219
<font color="#E5E5E5">completely different application domain</font>

511
00:22:41,369 --> 00:22:47,999
from your cradle<font color="#E5E5E5"> you do your job</font><font color="#CCCCCC"> then</font>

512
00:22:44,219 --> 00:22:50,339
you remove it right and then<font color="#CCCCCC"> you offload</font>

513
00:22:47,999 --> 00:22:52,349
the application<font color="#CCCCCC"> domain because now your</font>

514
00:22:50,339 --> 00:22:54,749
Creator<font color="#CCCCCC"> runs in one application domain</font>

515
00:22:52,349 --> 00:22:57,839
and your payload runs in another you're

516
00:22:54,749 --> 00:23:02,009
able to<font color="#E5E5E5"> break that coupling right and</font>

517
00:22:57,839 --> 00:23:04,320
deal with the artifacts<font color="#E5E5E5"> okay so we fix</font>

518
00:23:02,009 --> 00:23:08,669
this issue the other issue that we<font color="#CCCCCC"> face</font>

519
00:23:04,320 --> 00:23:11,460
<font color="#E5E5E5">as an operator on a box is dotnet does</font>

520
00:23:08,669 --> 00:23:15,379
not have<font color="#E5E5E5"> everything right sometimes</font><font color="#CCCCCC"> you</font>

521
00:23:11,460 --> 00:23:18,359
need to run into things and<font color="#E5E5E5"> invoke</font>

522
00:23:15,379 --> 00:23:22,259
operating system facilities through<font color="#CCCCCC"> the</font>

523
00:23:18,359 --> 00:23:26,519
<font color="#E5E5E5">windows</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> and here's the interrupt</font>

524
00:23:22,259 --> 00:23:30,299
right interrupt<font color="#E5E5E5"> is a technique</font><font color="#CCCCCC"> a set of</font>

525
00:23:26,519 --> 00:23:32,489
<font color="#E5E5E5">API is for dotnet to be able to drop</font>

526
00:23:30,299 --> 00:23:34,769
down to<font color="#CCCCCC"> the operating system level to</font>

527
00:23:32,489 --> 00:23:39,989
the windows<font color="#CCCCCC"> API to come to comp plus</font><font color="#E5E5E5"> to</font>

528
00:23:34,769 --> 00:23:41,909
<font color="#CCCCCC">C++ and into ActiveX</font><font color="#E5E5E5"> and so if CLR is</font>

529
00:23:39,989 --> 00:23:44,070
<font color="#E5E5E5">managed code where we've been living for</font>

530
00:23:41,909 --> 00:23:49,229
<font color="#CCCCCC">a very long time while we're creating</font>

531
00:23:44,070 --> 00:23:51,989
<font color="#E5E5E5">this the this prototype right managed</font>

532
00:23:49,229 --> 00:23:53,759
code and interrupt to the<font color="#CCCCCC"> main undamaged</font>

533
00:23:51,989 --> 00:23:57,929
code<font color="#CCCCCC"> and</font><font color="#E5E5E5"> interrupt to the</font><font color="#CCCCCC"> unmanaged code</font>

534
00:23:53,759 --> 00:24:00,359
is outside of CLR<font color="#CCCCCC"> theory there is a</font>

535
00:23:57,929 --> 00:24:02,549
<font color="#E5E5E5">specific namespace system that</font><font color="#CCCCCC"> runtime</font>

536
00:24:00,359 --> 00:24:05,070
<font color="#CCCCCC">that</font><font color="#E5E5E5"> interrupts services that takes care</font>

537
00:24:02,549 --> 00:24:06,690
of this and there's wealth of

538
00:24:05,070 --> 00:24:08,460
information on the internet here's the

539
00:24:06,690 --> 00:24:11,759
link where you<font color="#CCCCCC"> can get more info but</font>

540
00:24:08,460 --> 00:24:15,059
essentially and I have to say that<font color="#E5E5E5"> that</font>

541
00:24:11,759 --> 00:24:17,969
also carries<font color="#E5E5E5"> evasion mechanisms right</font>

542
00:24:15,059 --> 00:24:19,950
because now you're leaving dotnet which

543
00:24:17,969 --> 00:24:21,690
might potentially get instrumented at

544
00:24:19,950 --> 00:24:24,179
some point<font color="#E5E5E5"> and you're actually</font><font color="#CCCCCC"> dropping</font>

545
00:24:21,690 --> 00:24:27,929
into<font color="#E5E5E5"> operating system</font>

546
00:24:24,179 --> 00:24:30,870
level and so what happens is while you

547
00:24:27,929 --> 00:24:34,350
may still be<font color="#CCCCCC"> flagged</font><font color="#E5E5E5"> on a payload your</font>

548
00:24:30,870 --> 00:24:36,149
analysis<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> mechanism or workflow</font>

549
00:24:34,350 --> 00:24:38,158
is<font color="#E5E5E5"> the couple right here you're going</font>

550
00:24:36,149 --> 00:24:40,229
from<font color="#E5E5E5"> that now to completely unmanaged</font>

551
00:24:38,159 --> 00:24:40,890
code which breaks a lot<font color="#E5E5E5"> of workflows and</font>

552
00:24:40,230 --> 00:24:44,700
defense

553
00:24:40,890 --> 00:24:47,940
so<font color="#CCCCCC"> Interop essentially works on the dll</font>

554
00:24:44,700 --> 00:24:49,950
import<font color="#CCCCCC"> attributes right to to your</font>

555
00:24:47,940 --> 00:24:52,320
function your instrumented in such a way

556
00:24:49,950 --> 00:24:54,720
that says<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> that's an external code</font>

557
00:24:52,320 --> 00:24:56,279
<font color="#E5E5E5">somewhere over there after</font><font color="#CCCCCC"> we compile</font>

558
00:24:54,720 --> 00:24:59,010
we'll be<font color="#CCCCCC"> able to manage it at the</font>

559
00:24:56,279 --> 00:25:02,399
runtime<font color="#CCCCCC"> and so for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> in this case</font>

560
00:24:59,010 --> 00:25:05,279
<font color="#CCCCCC">we will find a</font><font color="#E5E5E5"> window and we will send</font>

561
00:25:02,399 --> 00:25:08,370
<font color="#E5E5E5">them we set the windows title right and</font>

562
00:25:05,279 --> 00:25:11,399
we're gonna involve<font color="#E5E5E5"> a user</font><font color="#CCCCCC"> 32 the dll</font>

563
00:25:08,370 --> 00:25:14,850
<font color="#CCCCCC">which is hopefully</font><font color="#E5E5E5"> available everywhere</font>

564
00:25:11,399 --> 00:25:17,760
<font color="#CCCCCC">and drive our code from the from there</font>

565
00:25:14,850 --> 00:25:20,039
<font color="#E5E5E5">so that's that's a platform invoke right</font>

566
00:25:17,760 --> 00:25:22,529
that's a shim<font color="#CCCCCC"> and then we can start a</font>

567
00:25:20,039 --> 00:25:25,230
process<font color="#E5E5E5"> and we can say you know from our</font>

568
00:25:22,529 --> 00:25:27,390
cradle we can say<font color="#E5E5E5"> okay well you know I</font>

569
00:25:25,230 --> 00:25:30,120
want<font color="#E5E5E5"> to find window which will be found</font>

570
00:25:27,390 --> 00:25:34,080
in user 32 that<font color="#E5E5E5"> DLL and I want to set a</font>

571
00:25:30,120 --> 00:25:36,178
window a<font color="#E5E5E5"> centum window title on it again</font>

572
00:25:34,080 --> 00:25:37,980
the shim and<font color="#E5E5E5"> the Vulcan code is in</font>

573
00:25:36,179 --> 00:25:40,230
different<font color="#E5E5E5"> assemblies</font><font color="#CCCCCC"> or can be in</font>

574
00:25:37,980 --> 00:25:42,799
different assemblies<font color="#E5E5E5"> and that place to</font>

575
00:25:40,230 --> 00:25:47,399
<font color="#E5E5E5">our two</font><font color="#CCCCCC"> towards are in the evasion</font>

576
00:25:42,799 --> 00:25:50,370
mechanism now but we can do even<font color="#CCCCCC"> better</font>

577
00:25:47,399 --> 00:25:55,678
right we can do dynamic<font color="#CCCCCC"> interrupt</font><font color="#E5E5E5"> what</font>

578
00:25:50,370 --> 00:25:58,229
is dynamic<font color="#CCCCCC"> interrupts mean in.net 4.0 i</font>

579
00:25:55,679 --> 00:26:01,230
believe they introduced a concept of

580
00:25:58,230 --> 00:26:03,870
<font color="#E5E5E5">dynamic object</font><font color="#CCCCCC"> meaning that the object</font>

581
00:26:01,230 --> 00:26:07,559
is type is not known at the compilation

582
00:26:03,870 --> 00:26:10,739
<font color="#E5E5E5">time it's given</font><font color="#CCCCCC"> it's given a marker that</font>

583
00:26:07,559 --> 00:26:13,590
<font color="#CCCCCC">will be resolved or tagged that will be</font>

584
00:26:10,740 --> 00:26:17,039
resolved at the<font color="#E5E5E5"> runtime and so you can</font>

585
00:26:13,590 --> 00:26:19,470
reflectively start loading any<font color="#E5E5E5"> dll that</font>

586
00:26:17,039 --> 00:26:21,658
you have on<font color="#E5E5E5"> the system directly</font><font color="#CCCCCC"> not</font>

587
00:26:19,470 --> 00:26:23,850
knowing what type<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> function you're</font>

588
00:26:21,659 --> 00:26:25,890
<font color="#E5E5E5">going to be invoking what what returns</font>

589
00:26:23,850 --> 00:26:27,750
it has<font color="#E5E5E5"> whatever the case may be</font>

590
00:26:25,890 --> 00:26:30,179
<font color="#E5E5E5">you use some reflection and they made</font>

591
00:26:27,750 --> 00:26:33,090
<font color="#CCCCCC">API</font><font color="#E5E5E5"> is like</font><font color="#CCCCCC"> define</font><font color="#E5E5E5"> type create type and</font>

592
00:26:30,179 --> 00:26:36,299
get method which is really helpful<font color="#E5E5E5"> right</font>

593
00:26:33,090 --> 00:26:37,350
<font color="#E5E5E5">and very powerful in our case so the</font>

594
00:26:36,299 --> 00:26:40,530
example of<font color="#E5E5E5"> that</font>

595
00:26:37,350 --> 00:26:43,949
<font color="#E5E5E5">repple will be to load our system and</font>

596
00:26:40,530 --> 00:26:45,450
<font color="#E5E5E5">then load our namespace</font><font color="#CCCCCC"> for dynamic load</font>

597
00:26:43,950 --> 00:26:48,900
which we<font color="#CCCCCC"> already know how to do with</font>

598
00:26:45,450 --> 00:26:52,049
code<font color="#E5E5E5"> um and then we just say okay well</font>

599
00:26:48,900 --> 00:26:54,890
<font color="#E5E5E5">let's load any win API right in this</font>

600
00:26:52,049 --> 00:26:59,639
case<font color="#CCCCCC"> it's user 32 and let's call any</font>

601
00:26:54,890 --> 00:27:01,049
function from<font color="#CCCCCC"> that DLL</font><font color="#E5E5E5"> or assembly</font><font color="#CCCCCC"> for</font>

602
00:26:59,640 --> 00:27:03,000
example in<font color="#E5E5E5"> this case</font><font color="#CCCCCC"> it's message box</font>

603
00:27:01,049 --> 00:27:05,490
right and it's all dynamic<font color="#CCCCCC"> so in this</font>

604
00:27:03,000 --> 00:27:07,500
case you move away from<font color="#E5E5E5"> knowing</font><font color="#CCCCCC"> what</font>

605
00:27:05,490 --> 00:27:08,850
you're gonna do at the compile time<font color="#E5E5E5"> to</font>

606
00:27:07,500 --> 00:27:11,429
know<font color="#E5E5E5"> in what you're gonna do at the</font>

607
00:27:08,850 --> 00:27:13,799
<font color="#CCCCCC">runtime</font><font color="#E5E5E5"> so you got yourself</font><font color="#CCCCCC"> a scriptable</font>

608
00:27:11,429 --> 00:27:18,750
<font color="#CCCCCC">net dotnet api bridge which is</font><font color="#E5E5E5"> really</font>

609
00:27:13,799 --> 00:27:21,090
powerful<font color="#E5E5E5"> for our purposes okay so by now</font>

610
00:27:18,750 --> 00:27:24,150
<font color="#E5E5E5">we pretty much take care</font><font color="#CCCCCC"> of the seesaw</font>

611
00:27:21,090 --> 00:27:27,299
calls<font color="#CCCCCC"> right we</font><font color="#E5E5E5"> are able</font><font color="#CCCCCC"> to dynamically</font>

612
00:27:24,150 --> 00:27:31,470
compile the c-sharp code<font color="#E5E5E5"> in</font><font color="#CCCCCC"> r apple we</font>

613
00:27:27,299 --> 00:27:33,900
can do this without you know logging<font color="#E5E5E5"> for</font>

614
00:27:31,470 --> 00:27:35,880
<font color="#CCCCCC">the most part if we can assume</font><font color="#E5E5E5"> that</font>

615
00:27:33,900 --> 00:27:38,429
<font color="#E5E5E5">typhoon that exceeds can be lodged</font>

616
00:27:35,880 --> 00:27:40,980
whatever<font color="#E5E5E5"> right we can load and unload</font><font color="#CCCCCC"> as</font>

617
00:27:38,429 --> 00:27:43,230
<font color="#E5E5E5">assemblies into memory we can take care</font>

618
00:27:40,980 --> 00:27:45,169
<font color="#CCCCCC">of the artifacts on the system we can</font>

619
00:27:43,230 --> 00:27:50,820
<font color="#E5E5E5">remove the allows once you load them and</font>

620
00:27:45,169 --> 00:27:55,740
<font color="#E5E5E5">we can do interrupts with with code</font>

621
00:27:50,820 --> 00:27:59,340
outside<font color="#CCCCCC"> of the CLR</font><font color="#E5E5E5"> okay but it's still</font>

622
00:27:55,740 --> 00:28:01,409
dotnet it's still<font color="#E5E5E5"> compile</font><font color="#CCCCCC"> right so can</font>

623
00:27:59,340 --> 00:28:03,658
<font color="#E5E5E5">we</font><font color="#CCCCCC"> do something better</font><font color="#E5E5E5"> can we do more</font>

624
00:28:01,409 --> 00:28:06,570
flexible solution can we gain more

625
00:28:03,659 --> 00:28:08,850
<font color="#E5E5E5">script ability out of it can we</font><font color="#CCCCCC"> even</font>

626
00:28:06,570 --> 00:28:11,610
forego ab domains<font color="#E5E5E5"> altogether because</font>

627
00:28:08,850 --> 00:28:17,959
they're hard<font color="#CCCCCC"> to work with and can we</font>

628
00:28:11,610 --> 00:28:21,030
actually avoid compilation right<font color="#E5E5E5"> and so</font>

629
00:28:17,960 --> 00:28:22,980
again let's<font color="#CCCCCC"> start building this managed</font>

630
00:28:21,030 --> 00:28:25,950
execution toolkit even further<font color="#E5E5E5"> right so</font>

631
00:28:22,980 --> 00:28:29,340
we we let's look at a component called

632
00:28:25,950 --> 00:28:32,070
<font color="#E5E5E5">delirium right so we want to bring in</font>

633
00:28:29,340 --> 00:28:34,260
dynamic<font color="#CCCCCC"> dlr into the mix</font><font color="#E5E5E5"> and start</font>

634
00:28:32,070 --> 00:28:37,230
working<font color="#E5E5E5"> with</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> so what is the LR</font>

635
00:28:34,260 --> 00:28:39,419
right in<font color="#E5E5E5"> dotnet you've got</font><font color="#CCCCCC"> CL argh</font>

636
00:28:37,230 --> 00:28:41,789
a common<font color="#E5E5E5"> language runtime but you also</font>

637
00:28:39,419 --> 00:28:44,760
have a<font color="#CCCCCC"> dynamic language</font><font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> a</font>

638
00:28:41,789 --> 00:28:47,879
dynamic<font color="#CCCCCC"> language runtime</font><font color="#E5E5E5"> it's a set of</font>

639
00:28:44,760 --> 00:28:51,120
<font color="#E5E5E5">services to</font><font color="#CCCCCC"> create dynamic languages in</font>

640
00:28:47,880 --> 00:28:54,930
dotnet or using.net facilities

641
00:28:51,120 --> 00:28:56,909
and so the<font color="#CCCCCC"> advantage of that is that you</font>

642
00:28:54,930 --> 00:28:59,250
move<font color="#E5E5E5"> away from statically typed</font>

643
00:28:56,910 --> 00:29:02,160
languages like C sharp<font color="#E5E5E5"> right</font><font color="#CCCCCC"> where you</font>

644
00:28:59,250 --> 00:29:03,570
<font color="#E5E5E5">have to know the the</font><font color="#CCCCCC"> the type of</font><font color="#E5E5E5"> the</font>

645
00:29:02,160 --> 00:29:06,240
variable or whatever the case<font color="#E5E5E5"> may be</font>

646
00:29:03,570 --> 00:29:08,370
<font color="#CCCCCC">you're an object right or</font><font color="#E5E5E5"> no the library</font>

647
00:29:06,240 --> 00:29:10,740
that<font color="#E5E5E5"> you're gonna invoke into something</font>

648
00:29:08,370 --> 00:29:12,889
that<font color="#E5E5E5"> is completely dynamic</font><font color="#CCCCCC"> right dynamic</font>

649
00:29:10,740 --> 00:29:19,740
languages<font color="#E5E5E5"> we know it's</font><font color="#CCCCCC"> JavaScript PHP</font>

650
00:29:12,890 --> 00:29:24,180
Python<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> gonna gain us a lot</font>

651
00:29:19,740 --> 00:29:27,090
of advantages<font color="#E5E5E5"> well from the developer</font>

652
00:29:24,180 --> 00:29:28,920
perspective DLR<font color="#CCCCCC"> is used for porting</font>

653
00:29:27,090 --> 00:29:30,990
dynamic languages to dotnet so for

654
00:29:28,920 --> 00:29:32,880
example if you want<font color="#E5E5E5"> to have</font><font color="#CCCCCC"> Ruby dotnet</font>

655
00:29:30,990 --> 00:29:36,180
or if you want to<font color="#E5E5E5"> have Python dotnet</font>

656
00:29:32,880 --> 00:29:38,910
<font color="#E5E5E5">it's all achievable now with DLR right</font>

657
00:29:36,180 --> 00:29:42,150
and so just like java virtual<font color="#CCCCCC"> machine</font>

658
00:29:38,910 --> 00:29:43,980
has you know<font color="#CCCCCC"> parrot or jython or</font>

659
00:29:42,150 --> 00:29:46,590
whatever the case may be the same<font color="#E5E5E5"> thing</font>

660
00:29:43,980 --> 00:29:48,690
happens in dotnet<font color="#CCCCCC"> ecosystem so you can</font>

661
00:29:46,590 --> 00:29:51,330
actually work in your preferred<font color="#E5E5E5"> language</font>

662
00:29:48,690 --> 00:29:55,080
of choice<font color="#E5E5E5"> just using dotnet facilities</font>

663
00:29:51,330 --> 00:29:57,780
<font color="#E5E5E5">and so</font><font color="#CCCCCC"> it's this on top of the CLR</font><font color="#E5E5E5"> it's</font>

664
00:29:55,080 --> 00:29:59,220
a it's a feature<font color="#E5E5E5"> or you know part of the</font>

665
00:29:57,780 --> 00:30:02,480
<font color="#E5E5E5">framework and then you start building</font>

666
00:29:59,220 --> 00:30:05,790
<font color="#E5E5E5">your languages on top of it</font>

667
00:30:02,480 --> 00:30:10,190
essentially for<font color="#E5E5E5"> us this is the gain</font>

668
00:30:05,790 --> 00:30:13,170
right<font color="#E5E5E5"> we move from this completely</font>

669
00:30:10,190 --> 00:30:15,030
focused<font color="#E5E5E5"> and managed a workflow of</font>

670
00:30:13,170 --> 00:30:17,340
knowing your type to something<font color="#CCCCCC"> that</font>

671
00:30:15,030 --> 00:30:20,280
you're used<font color="#CCCCCC"> to do in any dynamic</font>

672
00:30:17,340 --> 00:30:22,830
language you just<font color="#E5E5E5"> have an option object</font>

673
00:30:20,280 --> 00:30:24,540
or a<font color="#E5E5E5"> variable and</font><font color="#CCCCCC"> just set some property</font>

674
00:30:22,830 --> 00:30:29,610
<font color="#CCCCCC">on the variable directly without knowing</font>

675
00:30:24,540 --> 00:30:34,440
what type it is so to get<font color="#CCCCCC"> to delirium</font>

676
00:30:29,610 --> 00:30:36,179
<font color="#CCCCCC">you have to use three assemblies</font><font color="#E5E5E5"> right</font>

677
00:30:34,440 --> 00:30:38,640
you have to use<font color="#E5E5E5"> Microsoft scripting</font>

678
00:30:36,180 --> 00:30:40,890
namespace<font color="#CCCCCC"> you have to use Microsoft</font>

679
00:30:38,640 --> 00:30:45,180
dynamic namespace<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then you have to</font>

680
00:30:40,890 --> 00:30:46,620
use a<font color="#E5E5E5"> namespace</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> library of the</font>

681
00:30:45,180 --> 00:30:48,930
language<font color="#E5E5E5"> that has already been created</font>

682
00:30:46,620 --> 00:30:49,800
<font color="#E5E5E5">and</font><font color="#CCCCCC"> pour it to.net dotnet for example</font>

683
00:30:48,930 --> 00:30:52,260
ironpython

684
00:30:49,800 --> 00:30:54,419
<font color="#E5E5E5">right or Ruby</font><font color="#CCCCCC"> in this case we're gonna</font>

685
00:30:52,260 --> 00:30:58,260
<font color="#E5E5E5">be talking</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> just about ironpython but</font>

686
00:30:54,420 --> 00:30:59,480
you know there was stay<font color="#CCCCCC"> either way right</font>

687
00:30:58,260 --> 00:31:01,670
and<font color="#E5E5E5"> so</font>

688
00:30:59,480 --> 00:31:04,280
a pretty<font color="#CCCCCC"> powerful thing because we</font><font color="#E5E5E5"> can</font>

689
00:31:01,670 --> 00:31:06,890
move away from<font color="#E5E5E5"> strong type</font><font color="#CCCCCC"> to dynamic</font>

690
00:31:04,280 --> 00:31:09,200
and we can actually<font color="#E5E5E5"> do more code</font>

691
00:31:06,890 --> 00:31:14,030
reflection<font color="#E5E5E5"> to us code reflection means</font>

692
00:31:09,200 --> 00:31:18,230
<font color="#E5E5E5">evasion so in C in c-sharp your static</font>

693
00:31:14,030 --> 00:31:20,660
types<font color="#CCCCCC"> let us give you an example</font><font color="#E5E5E5"> very</font>

694
00:31:18,230 --> 00:31:22,340
<font color="#E5E5E5">common scenario where you need to get</font>

695
00:31:20,660 --> 00:31:23,480
something<font color="#CCCCCC"> from</font><font color="#E5E5E5"> while you're on the box</font>

696
00:31:22,340 --> 00:31:25,310
you need<font color="#E5E5E5"> to get something</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the</font>

697
00:31:23,480 --> 00:31:27,830
<font color="#CCCCCC">internet from your point</font><font color="#E5E5E5"> of presence</font>

698
00:31:25,310 --> 00:31:30,020
<font color="#E5E5E5">like a payload or whatever the case may</font>

699
00:31:27,830 --> 00:31:32,750
be and<font color="#CCCCCC"> so in this example</font><font color="#E5E5E5"> you're getting</font>

700
00:31:30,020 --> 00:31:35,240
a content of google.com in c-sharp<font color="#CCCCCC"> right</font>

701
00:31:32,750 --> 00:31:37,610
<font color="#CCCCCC">Power Cells PowerShell is a little bit</font>

702
00:31:35,240 --> 00:31:40,490
more dynamic<font color="#E5E5E5"> and so it can create</font><font color="#CCCCCC"> an</font>

703
00:31:37,610 --> 00:31:41,959
object of dotnet<font color="#E5E5E5"> and then it's not going</font>

704
00:31:40,490 --> 00:31:43,880
to be<font color="#E5E5E5"> strongly typed it's gonna be</font>

705
00:31:41,960 --> 00:31:46,100
dynamic<font color="#E5E5E5"> and you can get exactly the same</font>

706
00:31:43,880 --> 00:31:49,610
<font color="#CCCCCC">thing in you know with less pain no</font>

707
00:31:46,100 --> 00:31:55,760
compilation<font color="#E5E5E5"> and</font><font color="#CCCCCC"> good things but partial</font>

708
00:31:49,610 --> 00:31:57,080
is logged so<font color="#E5E5E5"> Python itself is</font><font color="#CCCCCC"> it's good</font>

709
00:31:55,760 --> 00:31:58,520
for<font color="#CCCCCC"> offense because it has a lot of</font>

710
00:31:57,080 --> 00:32:00,110
<font color="#E5E5E5">facilities</font><font color="#CCCCCC"> that have</font><font color="#E5E5E5"> been used over the</font>

711
00:31:58,520 --> 00:32:01,970
years<font color="#CCCCCC"> right</font><font color="#E5E5E5"> it has a lot</font><font color="#CCCCCC"> of libraries</font>

712
00:32:00,110 --> 00:32:03,530
and<font color="#E5E5E5"> so we can accomplish exactly</font><font color="#CCCCCC"> the</font>

713
00:32:01,970 --> 00:32:07,130
same thing

714
00:32:03,530 --> 00:32:11,090
with Python but not having<font color="#CCCCCC"> the C Python</font>

715
00:32:07,130 --> 00:32:13,880
executable on the box at<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> so in</font>

716
00:32:11,090 --> 00:32:17,060
the in<font color="#E5E5E5"> a regular C Python you use a</font>

717
00:32:13,880 --> 00:32:20,930
<font color="#E5E5E5">library like URL Lib</font><font color="#CCCCCC"> to you fetch the</font>

718
00:32:17,060 --> 00:32:22,550
<font color="#E5E5E5">content and then</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> you go</font><font color="#CCCCCC"> in DLR</font><font color="#E5E5E5"> you're</font>

719
00:32:20,930 --> 00:32:24,980
<font color="#E5E5E5">doing exactly what PowerShell does</font>

720
00:32:22,550 --> 00:32:29,480
you're invoking<font color="#E5E5E5"> or you're you're</font>

721
00:32:24,980 --> 00:32:31,730
leveraging dotnet<font color="#CCCCCC"> namespace</font><font color="#E5E5E5"> to bring in</font>

722
00:32:29,480 --> 00:32:33,500
an object<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then you call a property</font>

723
00:32:31,730 --> 00:32:35,690
<font color="#E5E5E5">or a method on that object to</font><font color="#CCCCCC"> do</font>

724
00:32:33,500 --> 00:32:39,290
something with<font color="#CCCCCC"> it right</font><font color="#E5E5E5"> all that lives</font>

725
00:32:35,690 --> 00:32:41,540
in the ironpython<font color="#E5E5E5"> that dll so what</font>

726
00:32:39,290 --> 00:32:45,560
really just happened here from strategic

727
00:32:41,540 --> 00:32:47,389
standpoint<font color="#E5E5E5"> once you run this quote right</font>

728
00:32:45,560 --> 00:32:51,290
and let's say you<font color="#E5E5E5"> have set up your</font>

729
00:32:47,390 --> 00:32:52,970
ironpython environment<font color="#E5E5E5"> through the</font>

730
00:32:51,290 --> 00:32:56,240
<font color="#E5E5E5">cradles that we're gonna see how we're</font>

731
00:32:52,970 --> 00:32:59,570
gonna do<font color="#CCCCCC"> this we do compilation</font><font color="#E5E5E5"> watch on</font>

732
00:32:56,240 --> 00:33:00,020
the on the process monitor<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's</font>

733
00:32:59,570 --> 00:33:03,050
empty

734
00:33:00,020 --> 00:33:07,160
right no<font color="#CCCCCC"> CSC that</font><font color="#E5E5E5"> exe no artifacts no</font>

735
00:33:03,050 --> 00:33:09,649
temporary files<font color="#E5E5E5"> and no</font><font color="#CCCCCC"> ab domains</font><font color="#E5E5E5"> right</font>

736
00:33:07,160 --> 00:33:12,020
it's fairly clean<font color="#E5E5E5"> while we're still</font>

737
00:33:09,650 --> 00:33:13,179
executing<font color="#E5E5E5"> what we want to execute it's</font>

738
00:33:12,020 --> 00:33:16,730
pretty powerful<font color="#E5E5E5"> stuff</font>

739
00:33:13,179 --> 00:33:18,289
so<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> proved that so what do</font>

740
00:33:16,730 --> 00:33:20,389
we<font color="#CCCCCC"> want to do with this well we want to</font>

741
00:33:18,289 --> 00:33:23,090
<font color="#E5E5E5">solve exactly</font><font color="#CCCCCC"> the same thing we want to</font>

742
00:33:20,389 --> 00:33:26,449
<font color="#E5E5E5">solve with seesaw we want to have the</font>

743
00:33:23,090 --> 00:33:29,389
full leverage of<font color="#E5E5E5"> dllr to compensate for</font>

744
00:33:26,450 --> 00:33:33,500
partial deficiencies while managing the

745
00:33:29,389 --> 00:33:36,110
dotnet advantages we want to compile

746
00:33:33,500 --> 00:33:38,330
Python to exe<font color="#CCCCCC"> Sordi</font><font color="#E5E5E5"> allows if you want</font>

747
00:33:36,110 --> 00:33:41,689
to through the<font color="#E5E5E5"> dynamic language runtime</font>

748
00:33:38,330 --> 00:33:44,990
without<font color="#E5E5E5"> artifacts we want to actually</font>

749
00:33:41,690 --> 00:33:47,629
<font color="#E5E5E5">use the features of dotnet that were</font>

750
00:33:44,990 --> 00:33:50,629
hidden<font color="#E5E5E5"> through the regular C sharp</font>

751
00:33:47,629 --> 00:33:53,240
invocation is to<font color="#E5E5E5"> actually load</font><font color="#CCCCCC"> DLL and</font>

752
00:33:50,629 --> 00:33:56,959
<font color="#E5E5E5">soundless through the byte stream read</font>

753
00:33:53,240 --> 00:33:59,480
<font color="#CCCCCC">network stream or maybe a pipe write or</font>

754
00:33:56,960 --> 00:34:01,250
a socket<font color="#CCCCCC"> whatever the case may be</font><font color="#E5E5E5"> and we</font>

755
00:33:59,480 --> 00:34:05,000
<font color="#E5E5E5">want to maintain the</font><font color="#CCCCCC"> interrupt to the</font>

756
00:34:01,250 --> 00:34:07,340
native interface through<font color="#CCCCCC"> third ELR okay</font>

757
00:34:05,000 --> 00:34:10,849
<font color="#E5E5E5">so here comes delirium</font><font color="#CCCCCC"> it is</font>

758
00:34:07,340 --> 00:34:16,000
specifically ironpython<font color="#CCCCCC"> it does work</font>

759
00:34:10,849 --> 00:34:19,300
with<font color="#CCCCCC"> dynamic types it mixes and matches</font>

760
00:34:16,000 --> 00:34:23,060
styles of<font color="#CCCCCC"> programming for Python and</font>

761
00:34:19,300 --> 00:34:24,200
dotnet so you can actually have what's

762
00:34:23,060 --> 00:34:26,569
the examples of<font color="#E5E5E5"> that but you can</font>

763
00:34:24,199 --> 00:34:29,569
<font color="#CCCCCC">actually confuse the defense even</font><font color="#E5E5E5"> more</font>

764
00:34:26,569 --> 00:34:31,279
and you can actually reflect code<font color="#E5E5E5"> from</font>

765
00:34:29,569 --> 00:34:33,349
<font color="#CCCCCC">one language to another</font><font color="#E5E5E5"> for example you</font>

766
00:34:31,280 --> 00:34:37,119
can invoke<font color="#CCCCCC"> c-sharp compilation from</font>

767
00:34:33,349 --> 00:34:39,200
<font color="#CCCCCC">Python or Python invocation</font><font color="#E5E5E5"> from C sharp</font>

768
00:34:37,119 --> 00:34:41,929
<font color="#E5E5E5">so</font><font color="#CCCCCC"> ironpython</font>

769
00:34:39,199 --> 00:34:46,388
lives in CLR<font color="#E5E5E5"> name space nothing</font><font color="#CCCCCC"> more</font>

770
00:34:41,929 --> 00:34:49,940
nothing less<font color="#E5E5E5"> you import CLR into your</font>

771
00:34:46,389 --> 00:34:54,250
delirium and<font color="#E5E5E5"> wrap</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right and you're</font>

772
00:34:49,940 --> 00:34:56,690
done with<font color="#CCCCCC"> ironpython</font><font color="#E5E5E5"> comes a lot of a</font>

773
00:34:54,250 --> 00:34:58,099
lot<font color="#E5E5E5"> of libraries or a lot of support and</font>

774
00:34:56,690 --> 00:35:00,589
<font color="#CCCCCC">I actually inherent</font><font color="#E5E5E5"> there right you've</font>

775
00:34:58,099 --> 00:35:02,359
got socket<font color="#E5E5E5"> even though you have a dotnet</font>

776
00:35:00,589 --> 00:35:05,540
the counter a<font color="#E5E5E5"> counterparty for the</font>

777
00:35:02,359 --> 00:35:07,339
second you also<font color="#E5E5E5"> have a an overlay from a</font>

778
00:35:05,540 --> 00:35:10,819
<font color="#E5E5E5">Python perspective you've got math</font>

779
00:35:07,339 --> 00:35:12,770
libraries you<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have zip libraries</font>

780
00:35:10,819 --> 00:35:15,380
you've got a lot of<font color="#E5E5E5"> good stuff but</font>

781
00:35:12,770 --> 00:35:17,839
please remember that<font color="#E5E5E5"> you do not have</font>

782
00:35:15,380 --> 00:35:21,079
standard library you do not have<font color="#E5E5E5"> all the</font>

783
00:35:17,839 --> 00:35:23,720
other goodies like URL Lib<font color="#CCCCCC"> that resides</font>

784
00:35:21,079 --> 00:35:26,450
in that small<font color="#E5E5E5"> little ironpython</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> dll</font>

785
00:35:23,720 --> 00:35:28,700
you could potentially<font color="#CCCCCC"> loaded for</font>

786
00:35:26,450 --> 00:35:30,980
<font color="#CCCCCC">a</font><font color="#E5E5E5"> disk somewhere and here's another</font>

787
00:35:28,700 --> 00:35:33,980
evasion point for<font color="#CCCCCC"> example in order for</font>

788
00:35:30,980 --> 00:35:36,020
you<font color="#CCCCCC"> to load</font><font color="#E5E5E5"> a standard library for</font>

789
00:35:33,980 --> 00:35:38,450
ironpython<font color="#CCCCCC"> it just needs</font><font color="#E5E5E5"> to find the</font>

790
00:35:36,020 --> 00:35:42,170
file it doesn't have to be<font color="#E5E5E5"> dot</font><font color="#CCCCCC"> dll or</font>

791
00:35:38,450 --> 00:35:45,140
dot zip<font color="#CCCCCC"> it can be dot</font><font color="#E5E5E5"> doc X right so</font><font color="#CCCCCC"> you</font>

792
00:35:42,170 --> 00:35:47,990
can have you can<font color="#E5E5E5"> bring in a corrupted</font>

793
00:35:45,140 --> 00:35:50,480
<font color="#E5E5E5">doc X into the environment and</font><font color="#CCCCCC"> load it</font>

794
00:35:47,990 --> 00:35:53,089
<font color="#E5E5E5">up as a standard library</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> off you go</font>

795
00:35:50,480 --> 00:35:56,089
so here's the example<font color="#CCCCCC"> of how we</font><font color="#E5E5E5"> would</font>

796
00:35:53,089 --> 00:35:58,009
actually<font color="#E5E5E5"> loud Stan low standard library</font>

797
00:35:56,089 --> 00:36:02,150
if<font color="#E5E5E5"> you want to you can do without it</font>

798
00:35:58,010 --> 00:36:03,260
<font color="#E5E5E5">right because you have dotnet so DLR</font><font color="#CCCCCC"> is</font>

799
00:36:02,150 --> 00:36:06,020
nothing more than<font color="#CCCCCC"> just a dotnet</font>

800
00:36:03,260 --> 00:36:10,520
<font color="#E5E5E5">technique it's a heavily reflected</font>

801
00:36:06,020 --> 00:36:15,140
heavily dynamic loaded introspected way

802
00:36:10,520 --> 00:36:17,570
of dealing with dotnet<font color="#CCCCCC"> API</font><font color="#E5E5E5"> you just add</font>

803
00:36:15,140 --> 00:36:20,598
add reference to the let's say<font color="#E5E5E5"> windows</font>

804
00:36:17,570 --> 00:36:22,880
forms and then you call that form<font color="#CCCCCC"> right</font>

805
00:36:20,599 --> 00:36:25,190
<font color="#CCCCCC">or for example if you want to</font><font color="#E5E5E5"> import a</font>

806
00:36:22,880 --> 00:36:27,260
message<font color="#E5E5E5"> box from the form and then you</font>

807
00:36:25,190 --> 00:36:28,760
invoke them you know a method<font color="#CCCCCC"> and the</font>

808
00:36:27,260 --> 00:36:31,280
message box or whatever<font color="#CCCCCC"> the case</font><font color="#E5E5E5"> may be</font>

809
00:36:28,760 --> 00:36:33,530
<font color="#E5E5E5">plus on</font><font color="#CCCCCC"> top of it you have</font><font color="#E5E5E5"> the</font>

810
00:36:31,280 --> 00:36:36,890
flexibility<font color="#E5E5E5"> of the Python and you</font><font color="#CCCCCC"> can</font>

811
00:36:33,530 --> 00:36:42,740
just go<font color="#CCCCCC"> of to</font><font color="#E5E5E5"> create a very</font><font color="#CCCCCC"> powerful and</font>

812
00:36:36,890 --> 00:36:45,140
fast<font color="#E5E5E5"> code and so other</font><font color="#CCCCCC"> things that you</font>

813
00:36:42,740 --> 00:36:47,209
can<font color="#CCCCCC"> do with</font><font color="#E5E5E5"> delirium for now is that if</font>

814
00:36:45,140 --> 00:36:49,098
you have a Python<font color="#E5E5E5"> code remember we</font>

815
00:36:47,210 --> 00:36:51,410
<font color="#E5E5E5">talked about code as data we bring in</font>

816
00:36:49,099 --> 00:36:53,960
data<font color="#E5E5E5"> it's plain text right nobody knows</font>

817
00:36:51,410 --> 00:36:57,230
what<font color="#E5E5E5"> we're bringing it's not executable</font>

818
00:36:53,960 --> 00:37:00,770
it's not<font color="#CCCCCC"> detectable and then you can</font>

819
00:36:57,230 --> 00:37:03,770
actually compile Python into<font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> if you</font>

820
00:37:00,770 --> 00:37:06,079
want to unload<font color="#CCCCCC"> it by other tools</font><font color="#E5E5E5"> so</font>

821
00:37:03,770 --> 00:37:08,690
again you break that<font color="#E5E5E5"> the chain of</font>

822
00:37:06,079 --> 00:37:12,200
analysis from compilation to invocation

823
00:37:08,690 --> 00:37:14,569
<font color="#E5E5E5">across highly reflective pipeline so</font>

824
00:37:12,200 --> 00:37:17,359
<font color="#E5E5E5">you're you're compiling</font><font color="#CCCCCC"> in module tests</font>

825
00:37:14,569 --> 00:37:19,849
that py and to test that<font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> right and</font>

826
00:37:17,359 --> 00:37:22,130
then you then you invoke that<font color="#E5E5E5"> and so you</font>

827
00:37:19,849 --> 00:37:25,849
can give you can go<font color="#CCCCCC"> and even further why</font>

828
00:37:22,130 --> 00:37:29,119
not just create<font color="#E5E5E5"> a delirium executable</font>

829
00:37:25,849 --> 00:37:31,099
that<font color="#CCCCCC"> we'll call</font><font color="#E5E5E5"> dynamic Python files so</font>

830
00:37:29,119 --> 00:37:32,990
for example you have<font color="#CCCCCC"> an extension</font><font color="#E5E5E5"> we saw</font>

831
00:37:31,099 --> 00:37:35,300
the extension that we we<font color="#E5E5E5"> can create</font><font color="#CCCCCC"> in</font>

832
00:37:32,990 --> 00:37:37,368
c-sharp<font color="#E5E5E5"> but we can also create</font>

833
00:37:35,300 --> 00:37:39,140
extensions<font color="#CCCCCC"> in</font><font color="#E5E5E5"> Python now because it's</font>

834
00:37:37,369 --> 00:37:39,890
still dotnet<font color="#CCCCCC"> you can still go against</font>

835
00:37:39,140 --> 00:37:42,890
that contract

836
00:37:39,890 --> 00:37:45,319
we created<font color="#CCCCCC"> the pre-launch</font><font color="#E5E5E5"> execute post</font>

837
00:37:42,890 --> 00:37:47,839
<font color="#E5E5E5">launch and then we can specify what</font>

838
00:37:45,319 --> 00:37:50,808
executable we want what what platform we

839
00:37:47,839 --> 00:37:53,538
want and whether it's<font color="#CCCCCC"> the DLR</font><font color="#E5E5E5"> or an</font>

840
00:37:50,809 --> 00:37:57,319
executable<font color="#E5E5E5"> things to keep in</font><font color="#CCCCCC"> mind is</font>

841
00:37:53,539 --> 00:37:59,359
that compilation is not the<font color="#E5E5E5"> runtime as</font>

842
00:37:57,319 --> 00:38:01,910
far as dependencies are concerned so<font color="#CCCCCC"> if</font>

843
00:37:59,359 --> 00:38:03,589
you can compile things because

844
00:38:01,910 --> 00:38:06,049
<font color="#E5E5E5">everything is dynamic</font><font color="#CCCCCC"> the compiler</font>

845
00:38:03,589 --> 00:38:07,910
doesn't<font color="#E5E5E5"> know or doesn't</font><font color="#CCCCCC"> care what you</font>

846
00:38:06,049 --> 00:38:09,619
<font color="#CCCCCC">compile it says</font><font color="#E5E5E5"> ok well they just throw</font>

847
00:38:07,910 --> 00:38:12,109
it to the runtime<font color="#E5E5E5"> right we're gonna</font>

848
00:38:09,619 --> 00:38:14,269
compile give you a fully valid

849
00:38:12,109 --> 00:38:16,519
executable but then at the<font color="#CCCCCC"> runtime</font>

850
00:38:14,269 --> 00:38:20,410
you're gonna have to figure<font color="#E5E5E5"> out a way</font><font color="#CCCCCC"> to</font>

851
00:38:16,519 --> 00:38:22,488
meet those dependencies and so

852
00:38:20,410 --> 00:38:25,450
separation of things you can compile it

853
00:38:22,489 --> 00:38:28,789
<font color="#CCCCCC">on one machine bring it over</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font>

854
00:38:25,450 --> 00:38:31,970
supplement the runtime with dynamic link

855
00:38:28,789 --> 00:38:33,890
libraries like ironpython and<font color="#E5E5E5"> microsoft</font>

856
00:38:31,970 --> 00:38:37,819
<font color="#E5E5E5">dynamics scripting so when the defense</font>

857
00:38:33,890 --> 00:38:40,098
looks at payload<font color="#CCCCCC"> dll</font><font color="#E5E5E5"> that was created or</font>

858
00:38:37,819 --> 00:38:42,589
<font color="#CCCCCC">pilot a payload Exe status created that</font>

859
00:38:40,099 --> 00:38:44,599
is devoid of ironpython<font color="#E5E5E5"> devoid of</font>

860
00:38:42,589 --> 00:38:47,150
Microsoft dynamic<font color="#E5E5E5"> DLL it doesn't help</font>

861
00:38:44,599 --> 00:38:49,609
<font color="#CCCCCC">Microsoft scripting</font><font color="#E5E5E5"> DLL it's safe it's</font>

862
00:38:47,150 --> 00:38:55,759
only when they<font color="#CCCCCC"> two meet</font><font color="#E5E5E5"> right</font>

863
00:38:49,609 --> 00:38:58,609
the magic happens<font color="#E5E5E5"> again let's let's do</font>

864
00:38:55,759 --> 00:39:00,380
even easier<font color="#CCCCCC"> wrap all</font><font color="#E5E5E5"> right you don't</font>

865
00:38:58,609 --> 00:39:04,489
<font color="#E5E5E5">have to compile anything you can</font><font color="#CCCCCC"> just</font>

866
00:39:00,380 --> 00:39:06,940
start<font color="#E5E5E5"> working with CLR</font><font color="#CCCCCC"> namespace pretty</font>

867
00:39:04,489 --> 00:39:11,739
easy right<font color="#E5E5E5"> you just load</font><font color="#CCCCCC"> it up and</font><font color="#E5E5E5"> then</font>

868
00:39:06,940 --> 00:39:11,739
then<font color="#CCCCCC"> you execute it into inter apple</font>

869
00:39:13,119 --> 00:39:17,359
<font color="#CCCCCC">here's another example</font><font color="#E5E5E5"> that you can</font>

870
00:39:15,170 --> 00:39:20,869
actually do even go in further and

871
00:39:17,359 --> 00:39:24,109
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of using the.net you can use C</font>

872
00:39:20,869 --> 00:39:28,130
types<font color="#E5E5E5"> for types of things that you want</font>

873
00:39:24,109 --> 00:39:31,609
<font color="#CCCCCC">to call on you know</font><font color="#E5E5E5"> Interop emulation</font>

874
00:39:28,130 --> 00:39:33,769
<font color="#CCCCCC">but</font><font color="#E5E5E5"> for that you do need the standard</font>

875
00:39:31,609 --> 00:39:35,420
library but you<font color="#E5E5E5"> can still call kernel</font>

876
00:39:33,769 --> 00:39:38,109
theory to<font color="#E5E5E5"> get windows directory or</font>

877
00:39:35,420 --> 00:39:40,009
whatever the case may be so this bridge

878
00:39:38,109 --> 00:39:42,348
<font color="#E5E5E5">scripting bridge that you've just</font>

879
00:39:40,009 --> 00:39:44,720
<font color="#E5E5E5">created gets even more powerful right</font>

880
00:39:42,349 --> 00:39:47,440
because now you can<font color="#CCCCCC"> actually jump</font><font color="#E5E5E5"> dump</font>

881
00:39:44,720 --> 00:39:51,859
into<font color="#CCCCCC"> it you can dump the</font>

882
00:39:47,440 --> 00:39:55,640
dependency<font color="#E5E5E5"> on platform invoke and you</font>

883
00:39:51,859 --> 00:39:57,319
can work<font color="#CCCCCC"> with c-types if you want to so</font>

884
00:39:55,640 --> 00:39:59,868
strategically what just happened<font color="#E5E5E5"> right</font>

885
00:39:57,319 --> 00:40:03,079
<font color="#E5E5E5">where all of the all this time we're</font>

886
00:39:59,869 --> 00:40:06,220
<font color="#CCCCCC">bringing code</font><font color="#E5E5E5"> as payload to execute in</font>

887
00:40:03,079 --> 00:40:08,150
an empty cradle<font color="#E5E5E5"> right we do not bring</font>

888
00:40:06,220 --> 00:40:10,939
<font color="#E5E5E5">compiled code we do not bring</font>

889
00:40:08,150 --> 00:40:13,220
executables we bring code in plain<font color="#E5E5E5"> text</font>

890
00:40:10,940 --> 00:40:16,069
format<font color="#E5E5E5"> and then we start running from it</font>

891
00:40:13,220 --> 00:40:17,930
<font color="#E5E5E5">you know</font><font color="#CCCCCC"> four through through either</font>

892
00:40:16,069 --> 00:40:19,819
compilation in the case of<font color="#E5E5E5"> seesaw or</font>

893
00:40:17,930 --> 00:40:23,569
delirium doesn't even have compilation

894
00:40:19,819 --> 00:40:27,500
right you<font color="#E5E5E5"> just kind of run it so on the</font>

895
00:40:23,569 --> 00:40:30,859
point<font color="#E5E5E5"> of the delivery of code</font><font color="#CCCCCC"> how do you</font>

896
00:40:27,500 --> 00:40:35,380
get<font color="#E5E5E5"> ironpython that DLL into your system</font>

897
00:40:30,859 --> 00:40:38,029
<font color="#E5E5E5">well or for that matter how do you get</font>

898
00:40:35,380 --> 00:40:43,130
<font color="#E5E5E5">maybe there is a way</font><font color="#CCCCCC"> to have</font><font color="#E5E5E5"> an</font>

899
00:40:38,029 --> 00:40:45,410
<font color="#E5E5E5">intermediate language construct that you</font>

900
00:40:43,130 --> 00:40:47,960
can bring in for example<font color="#E5E5E5"> if you don't</font>

901
00:40:45,410 --> 00:40:51,230
<font color="#E5E5E5">want to bring code to compile you can</font>

902
00:40:47,960 --> 00:40:53,660
split the<font color="#E5E5E5"> DLL into two parts right</font>

903
00:40:51,230 --> 00:40:56,109
<font color="#CCCCCC">called margins for example and the</font><font color="#E5E5E5"> way</font>

904
00:40:53,660 --> 00:40:59,690
margins work<font color="#CCCCCC"> in that net is that it's</font>

905
00:40:56,109 --> 00:41:01,670
the<font color="#CCCCCC"> module that</font><font color="#E5E5E5"> the module is a</font><font color="#CCCCCC"> DLL but</font>

906
00:40:59,690 --> 00:41:03,890
it doesn't have a<font color="#E5E5E5"> manifest so when the</font>

907
00:41:01,670 --> 00:41:06,170
defense looks at it<font color="#E5E5E5"> they look at a</font>

908
00:41:03,890 --> 00:41:08,690
binary blob that<font color="#E5E5E5"> is not executable</font><font color="#CCCCCC"> that</font>

909
00:41:06,170 --> 00:41:10,819
is not you<font color="#E5E5E5"> know it's nothing there's</font>

910
00:41:08,690 --> 00:41:12,710
<font color="#E5E5E5">just binary blob but when you combine</font>

911
00:41:10,819 --> 00:41:16,849
<font color="#CCCCCC">that with manifest</font><font color="#E5E5E5"> that's when you get</font>

912
00:41:12,710 --> 00:41:20,089
to<font color="#CCCCCC"> the assembly so on that topic</font>

913
00:41:16,849 --> 00:41:22,880
<font color="#E5E5E5">typhoon itself</font><font color="#CCCCCC"> it brings in ironpython</font>

914
00:41:20,089 --> 00:41:25,308
<font color="#CCCCCC">dead dll in as an</font><font color="#E5E5E5"> embedded resource in</font>

915
00:41:22,880 --> 00:41:27,559
itself<font color="#CCCCCC"> right so we basically hook</font>

916
00:41:25,309 --> 00:41:29,630
assembly resolution when we're saying

917
00:41:27,559 --> 00:41:32,420
<font color="#CCCCCC">okay we'll load me up a Python right</font>

918
00:41:29,630 --> 00:41:34,390
around time<font color="#E5E5E5"> and then that hook goes and</font>

919
00:41:32,420 --> 00:41:39,200
resolves it to the embedded

920
00:41:34,390 --> 00:41:41,328
<font color="#E5E5E5">assembly inside of the typhoon</font><font color="#CCCCCC"> right it</font>

921
00:41:39,200 --> 00:41:43,009
just<font color="#E5E5E5"> says okay well let's load it from</font>

922
00:41:41,329 --> 00:41:44,660
the resource so that's<font color="#E5E5E5"> that's really</font>

923
00:41:43,009 --> 00:41:46,309
<font color="#E5E5E5">good you</font><font color="#CCCCCC"> don't need to go out</font><font color="#E5E5E5"> and grab</font>

924
00:41:44,660 --> 00:41:49,910
<font color="#CCCCCC">it</font><font color="#E5E5E5"> from anywhere it comes with the tool</font>

925
00:41:46,309 --> 00:41:51,619
itself there are<font color="#E5E5E5"> other evasion</font>

926
00:41:49,910 --> 00:41:55,190
mechanisms that<font color="#E5E5E5"> you can start</font><font color="#CCCCCC"> thinking</font>

927
00:41:51,619 --> 00:41:57,529
<font color="#CCCCCC">about like for example</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> NAT</font><font color="#E5E5E5"> module</font>

928
00:41:55,190 --> 00:41:59,329
<font color="#E5E5E5">that we talked about and we're going</font><font color="#CCCCCC"> to</font>

929
00:41:57,529 --> 00:42:01,760
see an<font color="#E5E5E5"> example of that</font>

930
00:41:59,329 --> 00:42:07,329
you can also<font color="#E5E5E5"> hi</font>

931
00:42:01,760 --> 00:42:10,010
both assemblies and<font color="#E5E5E5"> net modules into</font><font color="#CCCCCC"> the</font>

932
00:42:07,329 --> 00:42:12,470
downloaded directory for assemblies<font color="#CCCCCC"> that</font>

933
00:42:10,010 --> 00:42:14,150
you fetch from code itself<font color="#CCCCCC"> it's kind</font><font color="#E5E5E5"> of</font>

934
00:42:12,470 --> 00:42:18,348
convoluted<font color="#E5E5E5"> but the way it kind of works</font>

935
00:42:14,150 --> 00:42:20,720
is this<font color="#E5E5E5"> essentially every every</font><font color="#CCCCCC"> year</font>

936
00:42:18,349 --> 00:42:23,359
executable can have executable dot exe

937
00:42:20,720 --> 00:42:26,359
dot config file and then you can<font color="#CCCCCC"> specify</font>

938
00:42:23,359 --> 00:42:28,299
dependencies<font color="#E5E5E5"> where to fetch additional</font>

939
00:42:26,359 --> 00:42:31,430
DLL from right and<font color="#E5E5E5"> so you can hide</font>

940
00:42:28,300 --> 00:42:34,130
ironpython<font color="#CCCCCC"> dead</font><font color="#E5E5E5"> DLL</font><font color="#CCCCCC"> if you cannot bring</font>

941
00:42:31,430 --> 00:42:37,430
<font color="#CCCCCC">it as an</font><font color="#E5E5E5"> internal resource to fetch at</font>

942
00:42:34,130 --> 00:42:40,130
the fetch it at the runtime so for net

943
00:42:37,430 --> 00:42:42,319
modules this is the<font color="#CCCCCC"> example</font><font color="#E5E5E5"> of what a</font>

944
00:42:40,130 --> 00:42:45,020
Microsoft intermediate language<font color="#E5E5E5"> looks</font>

945
00:42:42,319 --> 00:42:48,800
when you're compiling that modules right

946
00:42:45,020 --> 00:42:53,300
it's it's it's<font color="#E5E5E5"> just a just assembly</font>

947
00:42:48,800 --> 00:42:56,390
without manifest<font color="#CCCCCC"> and so this brings</font><font color="#E5E5E5"> us</font>

948
00:42:53,300 --> 00:43:00,079
<font color="#E5E5E5">to to a point of well can we</font><font color="#CCCCCC"> even</font>

949
00:42:56,390 --> 00:43:03,618
compile dynamic<font color="#CCCCCC"> net module</font><font color="#E5E5E5"> from sim from</font>

950
00:43:00,079 --> 00:43:07,280
c-sharp<font color="#E5E5E5"> in c-sharp</font><font color="#CCCCCC"> into into an assembly</font>

951
00:43:03,619 --> 00:43:10,640
through the DLR<font color="#E5E5E5"> yes right we can say</font>

952
00:43:07,280 --> 00:43:13,160
okay well that's<font color="#CCCCCC"> staged code into a</font>

953
00:43:10,640 --> 00:43:16,368
string<font color="#E5E5E5"> like for</font><font color="#CCCCCC"> example it's going</font><font color="#E5E5E5"> to be</font>

954
00:43:13,160 --> 00:43:20,180
a interruption in<font color="#E5E5E5"> c-sharp right you see</font>

955
00:43:16,369 --> 00:43:22,640
the<font color="#CCCCCC"> dll import for a bunch of libraries</font>

956
00:43:20,180 --> 00:43:25,069
on the operating<font color="#E5E5E5"> system and then what</font>

957
00:43:22,640 --> 00:43:27,828
we're gonna<font color="#E5E5E5"> do we're gonna generate</font>

958
00:43:25,069 --> 00:43:30,890
library through<font color="#CCCCCC"> Python</font><font color="#E5E5E5"> we're gonna stop</font>

959
00:43:27,829 --> 00:43:33,260
<font color="#E5E5E5">it into a variable all in memory we're</font>

960
00:43:30,890 --> 00:43:35,509
gonna create a list of<font color="#E5E5E5"> those libraries</font>

961
00:43:33,260 --> 00:43:37,670
<font color="#CCCCCC">that we've generated</font><font color="#E5E5E5"> and then we're</font>

962
00:43:35,510 --> 00:43:39,710
gonna be direct<font color="#E5E5E5"> we're gonna be</font>

963
00:43:37,670 --> 00:43:42,650
reflectively loading them in<font color="#E5E5E5"> memory</font>

964
00:43:39,710 --> 00:43:45,049
again<font color="#E5E5E5"> compiling them together to</font><font color="#CCCCCC"> create</font>

965
00:43:42,650 --> 00:43:48,829
a third dynamic assembly<font color="#E5E5E5"> right and then</font>

966
00:43:45,049 --> 00:43:51,980
calling an API or or<font color="#E5E5E5"> a function within</font>

967
00:43:48,829 --> 00:43:53,780
<font color="#E5E5E5">this created dynamic assembly</font><font color="#CCCCCC"> to you</font>

968
00:43:51,980 --> 00:43:55,490
know for the game<font color="#E5E5E5"> pretty much so</font>

969
00:43:53,780 --> 00:43:57,950
essentially you're looking<font color="#CCCCCC"> at bits and</font>

970
00:43:55,490 --> 00:44:00,470
pieces building blocks<font color="#CCCCCC"> that you're</font>

971
00:43:57,950 --> 00:44:03,410
bringing in<font color="#E5E5E5"> into Typhon right and you're</font>

972
00:44:00,470 --> 00:44:05,509
compiling them into memory<font color="#CCCCCC"> to to invoke</font>

973
00:44:03,410 --> 00:44:08,270
something<font color="#E5E5E5"> that will gain you more</font>

974
00:44:05,510 --> 00:44:11,330
<font color="#E5E5E5">visibility or run your code your</font>

975
00:44:08,270 --> 00:44:15,620
payloads or queries

976
00:44:11,330 --> 00:44:18,259
okay so<font color="#E5E5E5"> things about hiding things into</font>

977
00:44:15,620 --> 00:44:21,319
memory like for example<font color="#E5E5E5"> you could</font>

978
00:44:18,260 --> 00:44:23,060
potentially bring in a zip file through

979
00:44:21,320 --> 00:44:25,910
<font color="#CCCCCC">the code right you can unwrap it into</font>

980
00:44:23,060 --> 00:44:28,509
the<font color="#CCCCCC"> memory you can stuff it into a</font>

981
00:44:25,910 --> 00:44:31,279
memory map file which<font color="#E5E5E5"> doesn't have</font>

982
00:44:28,510 --> 00:44:33,230
counterpart on the<font color="#E5E5E5"> disk and then invoke</font>

983
00:44:31,280 --> 00:44:36,860
payload from that memory map file

984
00:44:33,230 --> 00:44:39,380
directly right that also<font color="#E5E5E5"> you know speaks</font>

985
00:44:36,860 --> 00:44:41,510
to the evasion<font color="#CCCCCC"> and it it's really</font><font color="#E5E5E5"> really</font>

986
00:44:39,380 --> 00:44:45,560
hard<font color="#E5E5E5"> to detect unless every memory</font><font color="#CCCCCC"> map</font>

987
00:44:41,510 --> 00:44:47,900
file<font color="#E5E5E5"> is inspected or just the fact that</font>

988
00:44:45,560 --> 00:44:53,090
you're creating<font color="#E5E5E5"> a memory map file is</font>

989
00:44:47,900 --> 00:44:56,780
locked or detected and stopped<font color="#E5E5E5"> and so we</font>

990
00:44:53,090 --> 00:44:57,940
can even do create we<font color="#E5E5E5"> can invoke</font>

991
00:44:56,780 --> 00:45:01,310
<font color="#E5E5E5">ironpython</font>

992
00:44:57,940 --> 00:45:03,770
from ironpython<font color="#CCCCCC"> over that net assembly</font>

993
00:45:01,310 --> 00:45:06,500
<font color="#E5E5E5">with variables right you can dynamically</font>

994
00:45:03,770 --> 00:45:08,509
create<font color="#E5E5E5"> you know the constructs</font><font color="#CCCCCC"> like</font>

995
00:45:06,500 --> 00:45:10,610
bring string and then you say okay well

996
00:45:08,510 --> 00:45:12,740
<font color="#E5E5E5">that string is going to be hello or a</font>

997
00:45:10,610 --> 00:45:15,800
world and<font color="#E5E5E5"> then you can create a Python</font>

998
00:45:12,740 --> 00:45:18,290
engine then you can have a script<font color="#CCCCCC"> that</font>

999
00:45:15,800 --> 00:45:20,630
you create from<font color="#CCCCCC"> that string</font><font color="#E5E5E5"> that you've</font>

1000
00:45:18,290 --> 00:45:25,660
just you know<font color="#CCCCCC"> passed to</font><font color="#E5E5E5"> it and then you</font>

1001
00:45:20,630 --> 00:45:25,660
can reflectively<font color="#E5E5E5"> execute Python code</font>

1002
00:45:26,620 --> 00:45:31,040
most more stealth<font color="#E5E5E5"> than you know that</font>

1003
00:45:29,090 --> 00:45:33,380
there are some examples here if you want

1004
00:45:31,040 --> 00:45:36,980
to<font color="#E5E5E5"> do a compilation and memory here you</font>

1005
00:45:33,380 --> 00:45:39,230
can load the file you can it<font color="#E5E5E5"> just kind</font>

1006
00:45:36,980 --> 00:45:41,330
<font color="#E5E5E5">of shows you that you can</font><font color="#CCCCCC"> actually go</font>

1007
00:45:39,230 --> 00:45:44,180
<font color="#E5E5E5">really deep in reflection</font><font color="#CCCCCC"> and the more</font>

1008
00:45:41,330 --> 00:45:48,049
reflection you have the less chances of

1009
00:45:44,180 --> 00:45:49,730
that<font color="#E5E5E5"> workflow for folks on the defense</font>

1010
00:45:48,050 --> 00:45:52,550
side who do not know<font color="#E5E5E5"> what to look for</font>

1011
00:45:49,730 --> 00:45:53,900
they they will<font color="#E5E5E5"> just not be</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> put</font>

1012
00:45:52,550 --> 00:45:55,610
two and two together to be able<font color="#E5E5E5"> to</font>

1013
00:45:53,900 --> 00:46:01,190
detect<font color="#E5E5E5"> that right or at least part of it</font>

1014
00:45:55,610 --> 00:46:04,550
<font color="#CCCCCC">okay so we've done</font><font color="#E5E5E5"> recon right you can</font>

1015
00:46:01,190 --> 00:46:08,060
do<font color="#E5E5E5"> W my query and everything that</font><font color="#CCCCCC"> dotnet</font>

1016
00:46:04,550 --> 00:46:08,570
can do can you<font color="#E5E5E5"> do exploitation through</font>

1017
00:46:08,060 --> 00:46:11,870
that

1018
00:46:08,570 --> 00:46:15,680
okay so<font color="#E5E5E5"> shellcode is a</font><font color="#CCCCCC"> shellcode right</font>

1019
00:46:11,870 --> 00:46:17,839
is it can<font color="#CCCCCC"> be a binary</font><font color="#E5E5E5"> blob or it can be</font>

1020
00:46:15,680 --> 00:46:20,180
a tax blob and<font color="#E5E5E5"> that payload follows</font>

1021
00:46:17,840 --> 00:46:24,110
exactly the<font color="#CCCCCC"> same strategy right code is</font>

1022
00:46:20,180 --> 00:46:24,890
data you bring shellcode in in plain

1023
00:46:24,110 --> 00:46:28,789
text for

1024
00:46:24,890 --> 00:46:30,618
and introduce that<font color="#E5E5E5"> into the cradle that</font>

1025
00:46:28,789 --> 00:46:32,480
<font color="#E5E5E5">either compiles it and then runs it or</font>

1026
00:46:30,619 --> 00:46:37,239
just runs it directly<font color="#CCCCCC"> through a</font>

1027
00:46:32,480 --> 00:46:40,039
reflection<font color="#E5E5E5"> right you can create you know</font>

1028
00:46:37,239 --> 00:46:43,130
compilation with<font color="#CCCCCC"> unsafe keyword which</font>

1029
00:46:40,039 --> 00:46:45,859
means you're<font color="#E5E5E5"> introduced you're you're</font>

1030
00:46:43,130 --> 00:46:48,710
<font color="#E5E5E5">lowering the guard for dotnet to say I'm</font>

1031
00:46:45,859 --> 00:46:50,960
<font color="#E5E5E5">gonna check</font><font color="#CCCCCC"> for memory</font><font color="#E5E5E5"> leaks or whatever</font>

1032
00:46:48,710 --> 00:46:52,789
the<font color="#E5E5E5"> case may be and you say no I know</font>

1033
00:46:50,960 --> 00:46:55,279
what I'm doing I'm you know<font color="#E5E5E5"> just give me</font>

1034
00:46:52,789 --> 00:46:57,140
direct access to<font color="#E5E5E5"> the memory right so</font>

1035
00:46:55,279 --> 00:47:00,440
<font color="#E5E5E5">that's what that</font><font color="#CCCCCC"> not does and then you</font>

1036
00:46:57,140 --> 00:47:02,359
essentially say okay well<font color="#E5E5E5"> again you can</font>

1037
00:47:00,440 --> 00:47:04,190
say memory<font color="#E5E5E5"> map file you can stuff your</font>

1038
00:47:02,359 --> 00:47:07,160
<font color="#E5E5E5">shellcode in the memory in that file</font>

1039
00:47:04,190 --> 00:47:10,130
<font color="#CCCCCC">reach</font><font color="#E5E5E5"> out to the memory map file and map</font>

1040
00:47:07,160 --> 00:47:12,549
<font color="#CCCCCC">a pointer to the location</font><font color="#E5E5E5"> of the memory</font>

1041
00:47:10,130 --> 00:47:15,529
mapped file where your<font color="#CCCCCC"> shellcode is and</font>

1042
00:47:12,549 --> 00:47:17,989
off you go<font color="#E5E5E5"> right I mean there</font><font color="#CCCCCC"> are issues</font>

1043
00:47:15,529 --> 00:47:21,680
with virtual a<font color="#E5E5E5"> lock and and some things</font>

1044
00:47:17,989 --> 00:47:25,069
may<font color="#E5E5E5"> not</font><font color="#CCCCCC"> work but in concept you</font><font color="#E5E5E5"> should</font>

1045
00:47:21,680 --> 00:47:28,489
be able to do<font color="#E5E5E5"> that okay so</font><font color="#CCCCCC"> from from</font><font color="#E5E5E5"> the</font>

1046
00:47:25,069 --> 00:47:32,119
seesaw style you can create a c-sharp

1047
00:47:28,489 --> 00:47:33,739
style you know<font color="#E5E5E5"> shellcode which may be</font>

1048
00:47:32,119 --> 00:47:35,989
dynamic as you're<font color="#E5E5E5"> bringing stuff in</font>

1049
00:47:33,739 --> 00:47:38,599
right and that's<font color="#E5E5E5"> how you pair it</font><font color="#CCCCCC"> up with</font>

1050
00:47:35,989 --> 00:47:44,690
let's say<font color="#CCCCCC"> Metasploit where you would</font>

1051
00:47:38,599 --> 00:47:47,059
create a you know<font color="#E5E5E5"> a listener to</font><font color="#CCCCCC"> to</font>

1052
00:47:44,690 --> 00:47:49,609
specific c-sharp<font color="#CCCCCC"> shellcode connection</font>

1053
00:47:47,059 --> 00:47:52,819
and then<font color="#E5E5E5"> you create the thread and then</font>

1054
00:47:49,609 --> 00:47:55,670
you do<font color="#E5E5E5"> this right pretty standard but</font>

1055
00:47:52,819 --> 00:47:58,249
<font color="#E5E5E5">from Delirium standpoint you can do it</font>

1056
00:47:55,670 --> 00:48:01,489
in Python<font color="#CCCCCC"> too like the the buffer</font><font color="#E5E5E5"> that</font>

1057
00:47:58,249 --> 00:48:03,230
contains the<font color="#CCCCCC"> shellcode maybe just like</font>

1058
00:48:01,489 --> 00:48:05,720
any<font color="#E5E5E5"> battery buffer you're doing in</font>

1059
00:48:03,230 --> 00:48:07,819
regular C Python<font color="#CCCCCC"> right you just</font><font color="#E5E5E5"> stuck an</font>

1060
00:48:05,720 --> 00:48:10,220
in buffer and then<font color="#E5E5E5"> you have a socket and</font>

1061
00:48:07,819 --> 00:48:12,230
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can send to it</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> it's socket</font>

1062
00:48:10,220 --> 00:48:15,078
comes with ironpython<font color="#CCCCCC"> that DLL</font><font color="#E5E5E5"> you do</font>

1063
00:48:12,230 --> 00:48:16,910
<font color="#E5E5E5">not need to have standard library while</font>

1064
00:48:15,079 --> 00:48:20,150
you're still using<font color="#E5E5E5"> the dotnet and not</font>

1065
00:48:16,910 --> 00:48:22,190
having<font color="#E5E5E5"> a single Python executable that</font>

1066
00:48:20,150 --> 00:48:25,220
<font color="#CCCCCC">is a true Windows executable on</font><font color="#E5E5E5"> the</font>

1067
00:48:22,190 --> 00:48:26,539
system and then if you're<font color="#E5E5E5"> missing</font>

1068
00:48:25,220 --> 00:48:28,459
something<font color="#CCCCCC"> you can always</font><font color="#E5E5E5"> drop</font><font color="#CCCCCC"> the</font>

1069
00:48:26,539 --> 00:48:32,019
<font color="#CCCCCC">PowerShell right you can always start a</font>

1070
00:48:28,460 --> 00:48:34,430
process<font color="#E5E5E5"> you can start a process with</font>

1071
00:48:32,019 --> 00:48:36,810
encoded commands and you know

1072
00:48:34,430 --> 00:48:42,029
<font color="#E5E5E5">essentially the the</font><font color="#CCCCCC"> path is known</font>

1073
00:48:36,810 --> 00:48:46,560
<font color="#CCCCCC">how to operate PowerShell here so for</font>

1074
00:48:42,030 --> 00:48:48,450
development<font color="#CCCCCC"> Python is is relatively easy</font>

1075
00:48:46,560 --> 00:48:50,970
<font color="#CCCCCC">right if you abstract from</font><font color="#E5E5E5"> the fact</font><font color="#CCCCCC"> that</font>

1076
00:48:48,450 --> 00:48:53,430
you're<font color="#E5E5E5"> still</font><font color="#CCCCCC"> working with dotnet and</font><font color="#E5E5E5"> you</font>

1077
00:48:50,970 --> 00:48:56,430
still work with<font color="#CCCCCC"> the namespace namespaces</font>

1078
00:48:53,430 --> 00:48:58,529
and some of them may not<font color="#E5E5E5"> necessarily be</font>

1079
00:48:56,430 --> 00:49:01,040
exactly the<font color="#E5E5E5"> same as in a regular Python</font>

1080
00:48:58,530 --> 00:49:03,660
but your lists are<font color="#CCCCCC"> the same</font><font color="#E5E5E5"> your</font>

1081
00:49:01,040 --> 00:49:05,580
enumerables are the same your lambdas

1082
00:49:03,660 --> 00:49:08,759
even are the same so<font color="#CCCCCC"> you can write</font>

1083
00:49:05,580 --> 00:49:10,620
pretty you know reflective code here<font color="#E5E5E5"> and</font>

1084
00:49:08,760 --> 00:49:13,640
pretty concise code to<font color="#E5E5E5"> accomplish your</font>

1085
00:49:10,620 --> 00:49:16,770
goals and<font color="#E5E5E5"> everything again starts with</font>

1086
00:49:13,640 --> 00:49:18,750
importing CLR and then importing your

1087
00:49:16,770 --> 00:49:22,920
namespaces just like in the regular C

1088
00:49:18,750 --> 00:49:24,930
sharp or<font color="#E5E5E5"> VB script so</font><font color="#CCCCCC"> delirium Typhoon's</font>

1089
00:49:22,920 --> 00:49:26,670
goals are met right we're able<font color="#E5E5E5"> to</font>

1090
00:49:24,930 --> 00:49:29,299
leverage<font color="#E5E5E5"> the LR to avoid</font><font color="#CCCCCC"> PowerShell</font>

1091
00:49:26,670 --> 00:49:33,600
together while gaining<font color="#CCCCCC"> script ability</font>

1092
00:49:29,300 --> 00:49:36,960
while<font color="#E5E5E5"> defeating much of the artifacts</font>

1093
00:49:33,600 --> 00:49:39,660
that c-sharp generates on the box<font color="#CCCCCC"> or CSC</font>

1094
00:49:36,960 --> 00:49:41,400
dot exe generates on the box<font color="#CCCCCC"> and we can</font>

1095
00:49:39,660 --> 00:49:44,250
mix and match<font color="#E5E5E5"> right we can drop to</font>

1096
00:49:41,400 --> 00:49:47,370
dotnet from<font color="#E5E5E5"> Python or we can</font><font color="#CCCCCC"> use Python</font>

1097
00:49:44,250 --> 00:49:51,030
purely for our goals<font color="#E5E5E5"> you know socket</font>

1098
00:49:47,370 --> 00:49:54,750
connections<font color="#E5E5E5"> versus you know system</font>

1099
00:49:51,030 --> 00:49:56,640
<font color="#E5E5E5">dotnet whatever right and then we can do</font>

1100
00:49:54,750 --> 00:50:01,290
full<font color="#E5E5E5"> the reflection is reflected code</font>

1101
00:49:56,640 --> 00:50:03,839
and we can<font color="#E5E5E5"> if not remediate then at</font>

1102
00:50:01,290 --> 00:50:06,090
least force analysis into that stage

1103
00:50:03,840 --> 00:50:08,220
where they need to<font color="#CCCCCC"> work a</font><font color="#E5E5E5"> lot harder to</font>

1104
00:50:06,090 --> 00:50:11,550
<font color="#CCCCCC">figure out the ins and outs of our code</font>

1105
00:50:08,220 --> 00:50:14,100
here so<font color="#CCCCCC"> timephone manage execution</font>

1106
00:50:11,550 --> 00:50:17,790
<font color="#E5E5E5">toolkit has two parts for now right is</font>

1107
00:50:14,100 --> 00:50:21,270
the seesaw<font color="#E5E5E5"> that is able</font><font color="#CCCCCC"> to do the repple</font>

1108
00:50:17,790 --> 00:50:23,430
do the dynamic deletion of artifacts do

1109
00:50:21,270 --> 00:50:25,500
do compilation<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> dll loading the</font>

1110
00:50:23,430 --> 00:50:28,799
dll directly without executables<font color="#CCCCCC"> in</font>

1111
00:50:25,500 --> 00:50:31,110
memory and calling you know functions on

1112
00:50:28,800 --> 00:50:35,280
that<font color="#CCCCCC"> dll</font><font color="#E5E5E5"> and you also have a delirium</font>

1113
00:50:31,110 --> 00:50:39,870
<font color="#E5E5E5">part right which</font><font color="#CCCCCC"> forgoes compilation all</font>

1114
00:50:35,280 --> 00:50:42,360
<font color="#CCCCCC">together</font><font color="#E5E5E5"> but brings in</font><font color="#CCCCCC"> our in</font><font color="#E5E5E5"> python</font><font color="#CCCCCC"> dll</font>

1115
00:50:39,870 --> 00:50:44,850
<font color="#E5E5E5">and then works on IDL are to be able to</font>

1116
00:50:42,360 --> 00:50:46,360
execute code directly without

1117
00:50:44,850 --> 00:50:49,480
compilation

1118
00:50:46,360 --> 00:50:52,570
and then<font color="#CCCCCC"> compiled co2 exceeds dll's load</font>

1119
00:50:49,480 --> 00:50:54,340
the<font color="#E5E5E5"> mop exactly</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> see so I did and also</font>

1120
00:50:52,570 --> 00:50:57,450
speed up<font color="#E5E5E5"> the</font><font color="#CCCCCC"> development maybe</font><font color="#E5E5E5"> two to</font>

1121
00:50:54,340 --> 00:51:01,780
<font color="#E5E5E5">four times right right live on the host</font>

1122
00:50:57,450 --> 00:51:05,589
<font color="#E5E5E5">so essentially this brings us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

1123
00:51:01,780 --> 00:51:08,290
point<font color="#E5E5E5"> where</font><font color="#CCCCCC"> our goal</font><font color="#E5E5E5"> of live retooling</font>

1124
00:51:05,590 --> 00:51:11,410
can be actually<font color="#CCCCCC"> realized and can be</font>

1125
00:51:08,290 --> 00:51:13,600
<font color="#E5E5E5">achieved</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> and so you do have a</font>

1126
00:51:11,410 --> 00:51:15,670
<font color="#E5E5E5">disadvantage</font><font color="#CCCCCC"> of first mover disadvantage</font>

1127
00:51:13,600 --> 00:51:18,040
because<font color="#E5E5E5"> you need to be able</font><font color="#CCCCCC"> to go and</font>

1128
00:51:15,670 --> 00:51:20,650
<font color="#E5E5E5">query the</font><font color="#CCCCCC"> system but you can do this</font><font color="#E5E5E5"> and</font>

1129
00:51:18,040 --> 00:51:24,100
the<font color="#CCCCCC"> safer a</font><font color="#E5E5E5"> little bit safer manner by</font>

1130
00:51:20,650 --> 00:51:27,070
using<font color="#E5E5E5"> the.net facilities and by</font>

1131
00:51:24,100 --> 00:51:29,860
correctly invoking compilation correctly

1132
00:51:27,070 --> 00:51:34,630
watching over your artifacts or<font color="#E5E5E5"> bringing</font>

1133
00:51:29,860 --> 00:51:37,960
in your dependencies as in Python DLR

1134
00:51:34,630 --> 00:51:39,820
<font color="#E5E5E5">and then that makes you makes your</font>

1135
00:51:37,960 --> 00:51:41,800
operational security as an offensive

1136
00:51:39,820 --> 00:51:43,720
operator much stronger and that makes

1137
00:51:41,800 --> 00:51:46,210
you think what you're actually doing<font color="#E5E5E5"> on</font>

1138
00:51:43,720 --> 00:51:50,379
the<font color="#E5E5E5"> box and how that affects your your</font>

1139
00:51:46,210 --> 00:51:52,600
path there<font color="#E5E5E5"> so the code is is out there</font>

1140
00:51:50,380 --> 00:51:55,480
it's it's released it is really alpha

1141
00:51:52,600 --> 00:51:57,540
right I mean it's it's working<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's</font>

1142
00:51:55,480 --> 00:52:03,250
definitely not<font color="#E5E5E5"> at the point where</font><font color="#CCCCCC"> it's</font>

1143
00:51:57,540 --> 00:52:07,930
you<font color="#CCCCCC"> know super uber</font><font color="#E5E5E5"> performant or</font>

1144
00:52:03,250 --> 00:52:10,860
<font color="#CCCCCC">whatnot right and</font><font color="#E5E5E5"> essentially if I can</font>

1145
00:52:07,930 --> 00:52:10,859
<font color="#CCCCCC">actually drop two</font>

1146
00:52:12,020 --> 00:52:18,910
I don't<font color="#CCCCCC"> think I can</font><font color="#E5E5E5"> up to this guy</font>

1147
00:52:27,840 --> 00:52:31,580
so I can drop to my VM

1148
00:52:36,520 --> 00:52:42,670
<font color="#E5E5E5">I don't know but yeah the code is there</font>

1149
00:52:38,950 --> 00:52:44,290
the the examples are there<font color="#E5E5E5"> if you guys</font>

1150
00:52:42,670 --> 00:52:47,710
want to download play with it<font color="#E5E5E5"> or</font>

1151
00:52:44,290 --> 00:52:50,380
contribute to<font color="#E5E5E5"> it obviously</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> I'm</font>

1152
00:52:47,710 --> 00:52:55,260
<font color="#CCCCCC">very much</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> to that and if you have</font>

1153
00:52:50,380 --> 00:52:55,260
any questions let me know<font color="#E5E5E5"> thank you</font>

1154
00:52:56,100 --> 00:53:02,009
[Applause]

