1
00:00:00,120 --> 00:00:03,090
let's get started thank you so much for

2
00:00:01,589 --> 00:00:05,069
<font color="#E5E5E5">attending and</font><font color="#CCCCCC"> thank you so</font><font color="#E5E5E5"> much to the</font>

3
00:00:03,090 --> 00:00:08,910
organizers<font color="#E5E5E5"> for hosting this amazing</font>

4
00:00:05,069 --> 00:00:10,260
event<font color="#E5E5E5"> so my name is</font><font color="#CCCCCC"> Mark</font><font color="#E5E5E5"> Mossberg</font><font color="#CCCCCC"> I'm an</font>

5
00:00:08,910 --> 00:00:12,360
engineer trail of<font color="#CCCCCC"> its and today I'll be</font>

6
00:00:10,260 --> 00:00:15,420
presenting some<font color="#E5E5E5"> joint work done with my</font>

7
00:00:12,360 --> 00:00:17,759
colleagues<font color="#E5E5E5"> Felipe Manzano and</font><font color="#CCCCCC"> Jana even</font>

8
00:00:15,420 --> 00:00:20,580
<font color="#CCCCCC">it's key</font><font color="#E5E5E5"> on porting binary analysis</font>

9
00:00:17,760 --> 00:00:22,199
techniques<font color="#E5E5E5"> over to an alternate</font>

10
00:00:20,580 --> 00:00:25,470
execution environment<font color="#E5E5E5"> namely at the</font>

11
00:00:22,199 --> 00:00:27,689
blockchain<font color="#E5E5E5"> so we'll begin with just what</font>

12
00:00:25,470 --> 00:00:29,330
is the blockchain so from Wikipedia we

13
00:00:27,689 --> 00:00:32,399
have this<font color="#CCCCCC"> definition it is</font><font color="#E5E5E5"> a</font>

14
00:00:29,330 --> 00:00:34,620
<font color="#E5E5E5">decentralized distributed</font><font color="#CCCCCC"> and public</font>

15
00:00:32,399 --> 00:00:36,050
digital ledger<font color="#CCCCCC"> that is used</font><font color="#E5E5E5"> to record</font>

16
00:00:34,620 --> 00:00:38,399
<font color="#E5E5E5">transactions and so I've highlighted</font>

17
00:00:36,050 --> 00:00:40,078
<font color="#CCCCCC">what I think are</font><font color="#E5E5E5"> some of the more</font>

18
00:00:38,399 --> 00:00:42,600
important parts<font color="#CCCCCC"> of this definition</font><font color="#E5E5E5"> is</font>

19
00:00:40,079 --> 00:00:44,610
the fact that it's a digital ledger<font color="#E5E5E5"> and</font>

20
00:00:42,600 --> 00:00:48,140
it can be used<font color="#E5E5E5"> to record transactions</font>

21
00:00:44,610 --> 00:00:50,219
and enable transaction<font color="#E5E5E5"> between parties</font>

22
00:00:48,140 --> 00:00:52,199
<font color="#CCCCCC">bashings have a number of</font><font color="#E5E5E5"> very useful</font>

23
00:00:50,219 --> 00:00:53,550
properties and so they're resilient

24
00:00:52,199 --> 00:00:55,320
<font color="#CCCCCC">because they're distributed systems you</font>

25
00:00:53,550 --> 00:00:58,828
can<font color="#E5E5E5"> drop nodes off the network and the</font>

26
00:00:55,320 --> 00:01:00,329
system is designed to function<font color="#CCCCCC"> like that</font>

27
00:00:58,829 --> 00:01:02,430
they're verifiable<font color="#E5E5E5"> and that anyone can</font>

28
00:01:00,329 --> 00:01:04,739
recompute<font color="#E5E5E5"> the blockchain and verify</font>

29
00:01:02,430 --> 00:01:06,360
what's on there<font color="#E5E5E5"> they're transparent and</font>

30
00:01:04,739 --> 00:01:09,960
the data is public and they're also

31
00:01:06,360 --> 00:01:11,880
immutable<font color="#E5E5E5"> and so that's just about all</font>

32
00:01:09,960 --> 00:01:13,259
<font color="#E5E5E5">I'll say about blockchains I'm not</font>

33
00:01:11,880 --> 00:01:15,449
really<font color="#E5E5E5"> here to extol the virtues of</font>

34
00:01:13,260 --> 00:01:17,610
using block chains<font color="#E5E5E5"> and so we'll proceed</font>

35
00:01:15,450 --> 00:01:18,090
into<font color="#E5E5E5"> one particular blockchain of</font>

36
00:01:17,610 --> 00:01:21,450
interest

37
00:01:18,090 --> 00:01:23,659
it's called<font color="#CCCCCC"> aetherium so aetherium is</font>

38
00:01:21,450 --> 00:01:26,520
this very interesting<font color="#E5E5E5"> blockchain based</font>

39
00:01:23,659 --> 00:01:28,110
decentralized<font color="#E5E5E5"> computation platform and</font>

40
00:01:26,520 --> 00:01:29,670
so there is it also<font color="#E5E5E5"> has a cryptocurrency</font>

41
00:01:28,110 --> 00:01:31,590
<font color="#E5E5E5">and lot</font><font color="#CCCCCC"> of other</font><font color="#E5E5E5"> things but there's a</font>

42
00:01:29,670 --> 00:01:33,509
<font color="#CCCCCC">lot of</font><font color="#E5E5E5"> angles</font><font color="#CCCCCC"> we can look at a theorem</font>

43
00:01:31,590 --> 00:01:36,930
today we're going<font color="#E5E5E5"> to really look</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> it</font>

44
00:01:33,509 --> 00:01:39,180
as a computation platform some other

45
00:01:36,930 --> 00:01:41,610
facts about<font color="#CCCCCC"> aetherium it's the second</font>

46
00:01:39,180 --> 00:01:43,619
<font color="#CCCCCC">largest</font><font color="#E5E5E5"> cryptocurrency evaluation and</font>

47
00:01:41,610 --> 00:01:46,200
has this ridiculous peak market cap

48
00:01:43,619 --> 00:01:50,040
earlier this year of over<font color="#E5E5E5"> 100 billion</font>

49
00:01:46,200 --> 00:01:51,509
dollars<font color="#E5E5E5"> and it's also a smart contract</font>

50
00:01:50,040 --> 00:01:54,479
<font color="#CCCCCC">framework and</font><font color="#E5E5E5"> that's what we're going to</font>

51
00:01:51,509 --> 00:01:56,430
focus on today<font color="#E5E5E5"> smart contracts are</font>

52
00:01:54,479 --> 00:01:59,158
applications<font color="#E5E5E5"> this is from the etherion</font>

53
00:01:56,430 --> 00:02:02,159
<font color="#E5E5E5">website their applications that run as</font>

54
00:01:59,159 --> 00:02:04,140
programmed<font color="#E5E5E5"> without downtime censorship</font>

55
00:02:02,159 --> 00:02:05,549
fraud or third party interference and

56
00:02:04,140 --> 00:02:08,220
these are all properties of these

57
00:02:05,549 --> 00:02:12,090
applications inherit from being on<font color="#CCCCCC"> the</font>

58
00:02:08,220 --> 00:02:13,980
blockchain<font color="#CCCCCC"> you can basically think</font><font color="#E5E5E5"> of</font>

59
00:02:12,090 --> 00:02:16,230
them as the<font color="#E5E5E5"> application layer</font>

60
00:02:13,980 --> 00:02:18,510
of his execution environment using

61
00:02:16,230 --> 00:02:21,149
<font color="#CCCCCC">etherium app</font><font color="#E5E5E5"> smart contracts you can</font>

62
00:02:18,510 --> 00:02:24,349
implement many types of applications for

63
00:02:21,150 --> 00:02:27,750
<font color="#E5E5E5">useful tasks like managing assets</font>

64
00:02:24,349 --> 00:02:30,079
<font color="#CCCCCC">conducting voting operations auctions</font>

65
00:02:27,750 --> 00:02:33,239
crowdfunding<font color="#E5E5E5"> making your own currency</font>

66
00:02:30,080 --> 00:02:34,980
<font color="#E5E5E5">but just like any other programs written</font>

67
00:02:33,239 --> 00:02:38,489
<font color="#E5E5E5">by humans they can of</font><font color="#CCCCCC"> course have bugs</font>

68
00:02:34,980 --> 00:02:41,910
and so I just want<font color="#E5E5E5"> to point out that</font>

69
00:02:38,489 --> 00:02:44,489
it's very unique<font color="#E5E5E5"> to aetherium how much</font>

70
00:02:41,910 --> 00:02:46,319
money you<font color="#E5E5E5"> can lose from bugs in smart</font>

71
00:02:44,489 --> 00:02:47,970
contracts and so<font color="#CCCCCC"> actually won't</font><font color="#E5E5E5"> focus on</font>

72
00:02:46,319 --> 00:02:49,619
that<font color="#E5E5E5"> too much in this talk there's</font>

73
00:02:47,970 --> 00:02:52,349
another great<font color="#E5E5E5"> talk tomorrow about dive</font>

74
00:02:49,620 --> 00:02:54,090
more deeply<font color="#E5E5E5"> into this but the main</font>

75
00:02:52,349 --> 00:02:55,290
<font color="#E5E5E5">takeaway is I it's really important to</font>

76
00:02:54,090 --> 00:02:56,790
have analysis tooling for<font color="#E5E5E5"> these smart</font>

77
00:02:55,290 --> 00:02:58,230
contracts because<font color="#E5E5E5"> we want to enable</font>

78
00:02:56,790 --> 00:03:01,109
<font color="#E5E5E5">these really useful applications built</font>

79
00:02:58,230 --> 00:03:02,849
on the blockchain<font color="#E5E5E5"> but if we keep having</font>

80
00:03:01,110 --> 00:03:06,480
<font color="#E5E5E5">this program</font><font color="#CCCCCC"> is getting massively hacked</font>

81
00:03:02,849 --> 00:03:08,220
losing tens of millions<font color="#CCCCCC"> of dollars that</font>

82
00:03:06,480 --> 00:03:09,810
will<font color="#E5E5E5"> never occur and</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> lis need</font>

83
00:03:08,220 --> 00:03:11,819
better analysis tooling and that's why

84
00:03:09,810 --> 00:03:14,610
we're here today<font color="#E5E5E5"> and so that brings us</font>

85
00:03:11,819 --> 00:03:16,828
<font color="#CCCCCC">to symbolic execution it was</font><font color="#E5E5E5"> mentioned a</font>

86
00:03:14,610 --> 00:03:18,420
bit<font color="#CCCCCC"> earlier and</font><font color="#E5E5E5"> I will</font><font color="#CCCCCC"> talk</font><font color="#E5E5E5"> and so we'll</font>

87
00:03:16,829 --> 00:03:20,430
dive<font color="#E5E5E5"> into a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> more deeply</font><font color="#CCCCCC"> in this</font>

88
00:03:18,420 --> 00:03:21,780
one it's a very<font color="#CCCCCC"> powerful program</font><font color="#E5E5E5"> an</font>

89
00:03:20,430 --> 00:03:24,630
analysis technique that over the past

90
00:03:21,780 --> 00:03:26,940
decade has been<font color="#E5E5E5"> really proven in terms</font>

91
00:03:24,630 --> 00:03:30,810
of its usefulness<font color="#E5E5E5"> for the fields of</font>

92
00:03:26,940 --> 00:03:32,549
software security<font color="#E5E5E5"> and testing and so our</font>

93
00:03:30,810 --> 00:03:34,889
research<font color="#E5E5E5"> question was to see if we could</font>

94
00:03:32,549 --> 00:03:38,670
pour<font color="#E5E5E5"> this over</font><font color="#CCCCCC"> to aetherium</font><font color="#E5E5E5"> and make it</font>

95
00:03:34,889 --> 00:03:41,040
<font color="#CCCCCC">useful so we</font><font color="#E5E5E5"> have a very simple agenda</font>

96
00:03:38,670 --> 00:03:47,458
<font color="#CCCCCC">today</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> review what symbolic</font>

97
00:03:41,040 --> 00:03:50,130
execution is sorry<font color="#E5E5E5"> we'll review what</font>

98
00:03:47,459 --> 00:03:52,560
symbolic execution is then we'll dive

99
00:03:50,130 --> 00:03:54,989
deeply into the internals of<font color="#CCCCCC"> the</font>

100
00:03:52,560 --> 00:03:57,389
etherium<font color="#E5E5E5"> virtual machine and computation</font>

101
00:03:54,989 --> 00:03:59,430
platform and last we will talk about

102
00:03:57,389 --> 00:04:03,450
what it's like to<font color="#CCCCCC"> combine the two and</font>

103
00:03:59,430 --> 00:04:06,840
<font color="#E5E5E5">what we can do with those abilities so</font>

104
00:04:03,450 --> 00:04:08,578
let's begin<font color="#CCCCCC"> symbolic execution</font><font color="#E5E5E5"> so the</font>

105
00:04:06,840 --> 00:04:10,620
story with<font color="#E5E5E5"> symbolic execution begins in</font>

106
00:04:08,579 --> 00:04:12,329
the 70s actually with<font color="#E5E5E5"> this paper by</font>

107
00:04:10,620 --> 00:04:14,579
James King which coined the term

108
00:04:12,329 --> 00:04:17,099
symbolic execution and program testing

109
00:04:14,579 --> 00:04:19,049
the field was very dormant for like the

110
00:04:17,099 --> 00:04:21,209
<font color="#E5E5E5">next</font><font color="#CCCCCC"> 40 years and it was only in the</font>

111
00:04:19,048 --> 00:04:23,219
<font color="#E5E5E5">last</font><font color="#CCCCCC"> 10 years have we seen a real</font>

112
00:04:21,209 --> 00:04:24,630
resurgence<font color="#E5E5E5"> and research in this</font><font color="#CCCCCC"> field</font>

113
00:04:23,220 --> 00:04:27,450
with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> number of really breakthrough</font>

114
00:04:24,630 --> 00:04:27,719
papers<font color="#CCCCCC"> called out a few here we have the</font>

115
00:04:27,450 --> 00:04:31,610
<font color="#CCCCCC">key</font>

116
00:04:27,720 --> 00:04:35,160
paper in 2008<font color="#CCCCCC"> BAP</font><font color="#E5E5E5"> from Carnegie Mellon</font>

117
00:04:31,610 --> 00:04:37,560
<font color="#E5E5E5">sage from Microsoft mayhem</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this kind</font>

118
00:04:35,160 --> 00:04:40,020
of<font color="#E5E5E5"> leads up to the DARPA cyber</font><font color="#CCCCCC"> Grand</font>

119
00:04:37,560 --> 00:04:41,850
<font color="#CCCCCC">Challenge where symbolic execution was</font>

120
00:04:40,020 --> 00:04:45,000
really heavily used by<font color="#CCCCCC"> nearly every team</font>

121
00:04:41,850 --> 00:04:48,570
for automatic book finding and exploit

122
00:04:45,000 --> 00:04:50,760
generation<font color="#CCCCCC"> but today we're going to</font>

123
00:04:48,570 --> 00:04:52,710
focus<font color="#CCCCCC"> mostly on the</font><font color="#E5E5E5"> research presented</font>

124
00:04:50,760 --> 00:04:56,000
in the CLE paper<font color="#E5E5E5"> which is which</font><font color="#CCCCCC"> is kind</font>

125
00:04:52,710 --> 00:04:59,070
<font color="#CCCCCC">of coined classical symbolic execution</font>

126
00:04:56,000 --> 00:05:00,690
<font color="#CCCCCC">and</font><font color="#E5E5E5"> so let's begin</font><font color="#CCCCCC"> and so it's useful to</font>

127
00:04:59,070 --> 00:05:02,700
contrast symbolic execution with

128
00:05:00,690 --> 00:05:04,530
concrete<font color="#E5E5E5"> execution</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so everyone knows</font>

129
00:05:02,700 --> 00:05:07,409
<font color="#E5E5E5">how this</font><font color="#CCCCCC"> works at</font><font color="#E5E5E5"> every point and the</font>

130
00:05:04,530 --> 00:05:09,179
<font color="#E5E5E5">pseudocode program every variable has</font><font color="#CCCCCC"> a</font>

131
00:05:07,410 --> 00:05:11,250
concrete value and so when the program

132
00:05:09,180 --> 00:05:14,040
<font color="#CCCCCC">asks for input</font><font color="#E5E5E5"> the user provides</font><font color="#CCCCCC"> input</font>

133
00:05:11,250 --> 00:05:16,560
and maybe they entered in<font color="#E5E5E5"> 42 the program</font>

134
00:05:14,040 --> 00:05:21,570
executes succour dingly<font color="#E5E5E5"> so a will get 43</font>

135
00:05:16,560 --> 00:05:22,919
and people get<font color="#CCCCCC"> zero one thing one really</font>

136
00:05:21,570 --> 00:05:25,740
important thing changes in symbolic

137
00:05:22,919 --> 00:05:28,229
execution<font color="#E5E5E5"> is that variables are no</font>

138
00:05:25,740 --> 00:05:30,240
longer required<font color="#E5E5E5"> to have</font><font color="#CCCCCC"> specific values</font>

139
00:05:28,230 --> 00:05:33,270
they can actually<font color="#E5E5E5"> have ranges of values</font>

140
00:05:30,240 --> 00:05:36,480
and so if we<font color="#E5E5E5"> execute this code under a</font>

141
00:05:33,270 --> 00:05:39,030
symbolic<font color="#CCCCCC"> execution</font><font color="#E5E5E5"> model the exit bit</font>

142
00:05:36,480 --> 00:05:40,770
variable is not going to be a concrete

143
00:05:39,030 --> 00:05:44,179
variable<font color="#CCCCCC"> anymore</font><font color="#E5E5E5"> will actually replace</font>

144
00:05:40,770 --> 00:05:48,180
it with an input symbol and this symbol

145
00:05:44,180 --> 00:05:49,260
<font color="#E5E5E5">will represent any integer so then the</font>

146
00:05:48,180 --> 00:05:52,860
program<font color="#CCCCCC"> will continue executing</font>

147
00:05:49,260 --> 00:05:56,520
accordingly<font color="#CCCCCC"> x the pen a depends on X so</font>

148
00:05:52,860 --> 00:05:57,990
a<font color="#E5E5E5"> will also be symbolic and B is a</font>

149
00:05:56,520 --> 00:05:59,849
concrete variable and so it will remain

150
00:05:57,990 --> 00:06:02,430
concrete and so here we have<font color="#CCCCCC"> this</font>

151
00:05:59,850 --> 00:06:07,020
<font color="#E5E5E5">distinction between symbolic and</font>

152
00:06:02,430 --> 00:06:08,580
concrete variables so things<font color="#CCCCCC"> ly start to</font>

153
00:06:07,020 --> 00:06:11,609
get interesting when<font color="#CCCCCC"> we consider control</font>

154
00:06:08,580 --> 00:06:14,070
flow in symbolic execution<font color="#E5E5E5"> and so in</font>

155
00:06:11,610 --> 00:06:15,960
this<font color="#E5E5E5"> program we have some code on the</font>

156
00:06:14,070 --> 00:06:19,260
left that gets input and then makes a

157
00:06:15,960 --> 00:06:21,120
decision<font color="#E5E5E5"> it checks if</font><font color="#CCCCCC"> the variable</font><font color="#E5E5E5"> is 42</font>

158
00:06:19,260 --> 00:06:24,860
and does<font color="#E5E5E5"> something otherwise it doesn't</font>

159
00:06:21,120 --> 00:06:27,390
<font color="#CCCCCC">lead us and so in symbolic execution</font>

160
00:06:24,860 --> 00:06:29,250
<font color="#CCCCCC">number the VAR variable does not</font><font color="#E5E5E5"> have an</font>

161
00:06:27,390 --> 00:06:31,409
actual value<font color="#CCCCCC"> that could</font><font color="#E5E5E5"> be any integer</font>

162
00:06:29,250 --> 00:06:33,390
and so what happens when we're<font color="#CCCCCC"> exiting</font>

163
00:06:31,410 --> 00:06:35,910
this<font color="#E5E5E5"> program it looks like execution</font><font color="#CCCCCC"> one</font>

164
00:06:33,390 --> 00:06:37,530
<font color="#E5E5E5">could actually go both ways and in</font>

165
00:06:35,910 --> 00:06:39,900
<font color="#E5E5E5">practice that's after what happens with</font>

166
00:06:37,530 --> 00:06:41,489
symbolic<font color="#E5E5E5"> execution</font><font color="#CCCCCC"> so the</font><font color="#E5E5E5"> engine that's</font>

167
00:06:39,900 --> 00:06:44,280
running<font color="#E5E5E5"> the analysis will make a copy</font>

168
00:06:41,490 --> 00:06:46,289
of the program<font color="#E5E5E5"> state and one path one</font>

169
00:06:44,280 --> 00:06:49,619
state<font color="#CCCCCC"> LLL</font><font color="#E5E5E5"> explore one and the other</font>

170
00:06:46,289 --> 00:06:52,169
<font color="#E5E5E5">state it'll explore the other in order</font>

171
00:06:49,620 --> 00:06:54,080
<font color="#E5E5E5">to do this it</font><font color="#CCCCCC"> needs</font><font color="#E5E5E5"> to keep track</font><font color="#CCCCCC"> of</font>

172
00:06:52,169 --> 00:06:56,969
something<font color="#E5E5E5"> called the path constraints</font>

173
00:06:54,080 --> 00:06:59,250
these are the constraints<font color="#CCCCCC"> on the</font>

174
00:06:56,970 --> 00:07:02,370
variables<font color="#E5E5E5"> that</font><font color="#CCCCCC"> must be true in order</font><font color="#E5E5E5"> for</font>

175
00:06:59,250 --> 00:07:05,250
the state<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be executed</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so in the</font>

176
00:07:02,370 --> 00:07:07,500
do something<font color="#E5E5E5"> state the VAR variable</font>

177
00:07:05,250 --> 00:07:11,190
transitions from<font color="#E5E5E5"> an unconstrained</font>

178
00:07:07,500 --> 00:07:13,430
<font color="#E5E5E5">symbolic integer to a constrained some</font>

179
00:07:11,190 --> 00:07:15,900
block integer<font color="#E5E5E5"> that must be equal to 42</font>

180
00:07:13,430 --> 00:07:17,789
conversely<font color="#E5E5E5"> and the other state the</font>

181
00:07:15,900 --> 00:07:25,349
symbol is constrained to<font color="#CCCCCC"> be anything</font>

182
00:07:17,789 --> 00:07:27,599
except<font color="#E5E5E5"> 42 so this is a little bit more</font>

183
00:07:25,349 --> 00:07:30,120
of a complex<font color="#E5E5E5"> slide but it serves to</font>

184
00:07:27,599 --> 00:07:32,759
visualize what happens when symbolic

185
00:07:30,120 --> 00:07:35,370
execution happens<font color="#CCCCCC"> on zip</font><font color="#E5E5E5"> code and so</font><font color="#CCCCCC"> on</font>

186
00:07:32,759 --> 00:07:38,070
the Left<font color="#CCCCCC"> we have some code</font><font color="#E5E5E5"> and on the</font>

187
00:07:35,370 --> 00:07:41,310
right we<font color="#CCCCCC"> have what's</font><font color="#E5E5E5"> called the symbolic</font>

188
00:07:38,070 --> 00:07:44,819
execution tree so this program<font color="#E5E5E5"> on the</font>

189
00:07:41,310 --> 00:07:48,330
<font color="#E5E5E5">left has a number of input variables a B</font>

190
00:07:44,819 --> 00:07:50,400
and C some concrete integers<font color="#E5E5E5"> and then it</font>

191
00:07:48,330 --> 00:07:53,099
has<font color="#E5E5E5"> some control flow and so there is</font>

192
00:07:50,400 --> 00:07:56,130
branching<font color="#CCCCCC"> based on the symbolic</font>

193
00:07:53,099 --> 00:07:59,250
variables and some assignments<font color="#E5E5E5"> at the</font>

194
00:07:56,130 --> 00:08:01,650
bottom<font color="#E5E5E5"> there's this assertion and so our</font>

195
00:07:59,250 --> 00:08:03,509
goal is to check<font color="#E5E5E5"> is it possible to ever</font>

196
00:08:01,650 --> 00:08:06,270
violate<font color="#E5E5E5"> this assertion and we can do</font>

197
00:08:03,509 --> 00:08:07,590
<font color="#E5E5E5">this using symbolic execution</font><font color="#CCCCCC"> so on the</font>

198
00:08:06,270 --> 00:08:08,940
right we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see what happens when you</font>

199
00:08:07,590 --> 00:08:12,210
symbolically execute the code on<font color="#E5E5E5"> the</font>

200
00:08:08,940 --> 00:08:14,430
<font color="#CCCCCC">left we have</font><font color="#E5E5E5"> these you can see visually</font>

201
00:08:12,210 --> 00:08:16,830
the state forking that happens at these

202
00:08:14,430 --> 00:08:18,210
points in the program<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> can and we</font>

203
00:08:16,830 --> 00:08:21,349
<font color="#CCCCCC">can see that the analysis will fully</font>

204
00:08:18,210 --> 00:08:23,719
enumerate the state space of the<font color="#E5E5E5"> program</font>

205
00:08:21,349 --> 00:08:26,070
<font color="#E5E5E5">we can</font><font color="#CCCCCC"> see that in one particular path</font>

206
00:08:23,719 --> 00:08:27,719
this one right<font color="#E5E5E5"> here</font>

207
00:08:26,070 --> 00:08:31,320
it<font color="#E5E5E5"> shows that it's actually possible</font><font color="#CCCCCC"> to</font>

208
00:08:27,719 --> 00:08:33,450
violate the assertion so if a is<font color="#CCCCCC"> false</font><font color="#E5E5E5"> B</font>

209
00:08:31,320 --> 00:08:36,260
is less than<font color="#CCCCCC"> five and C is true</font><font color="#E5E5E5"> we end</font>

210
00:08:33,450 --> 00:08:39,060
up in a<font color="#E5E5E5"> state</font><font color="#CCCCCC"> about ways the assertion</font>

211
00:08:36,260 --> 00:08:41,700
furthermore in every<font color="#CCCCCC"> possible state we</font>

212
00:08:39,059 --> 00:08:42,539
<font color="#E5E5E5">find we also collect the constraints</font><font color="#CCCCCC"> and</font>

213
00:08:41,700 --> 00:08:44,459
<font color="#E5E5E5">these are very useful to have around</font>

214
00:08:42,539 --> 00:08:47,069
<font color="#CCCCCC">because then we can use things like</font>

215
00:08:44,459 --> 00:08:48,569
<font color="#E5E5E5">constraint solvers so you reason</font><font color="#CCCCCC"> about</font>

216
00:08:47,070 --> 00:08:50,430
them<font color="#E5E5E5"> and ask questions about the</font><font color="#CCCCCC"> program</font>

217
00:08:48,570 --> 00:08:53,100
<font color="#E5E5E5">we can also do things like generate</font>

218
00:08:50,430 --> 00:08:55,319
inputs and so the way constraint solvers

219
00:08:53,100 --> 00:08:58,649
work<font color="#CCCCCC"> on the outside is very simple</font>

220
00:08:55,320 --> 00:08:59,910
<font color="#E5E5E5">express your query as a set of</font>

221
00:08:58,649 --> 00:09:03,240
constraints<font color="#E5E5E5"> and it will either return</font>

222
00:08:59,910 --> 00:09:04,769
satisfiable or<font color="#CCCCCC"> an Sun satisfiable</font><font color="#E5E5E5"> and if</font>

223
00:09:03,240 --> 00:09:07,199
it was satisfiable it will<font color="#E5E5E5"> also return a</font>

224
00:09:04,769 --> 00:09:08,670
proof<font color="#E5E5E5"> and this group is</font><font color="#CCCCCC"> very useful</font>

225
00:09:07,199 --> 00:09:10,709
because in the context<font color="#E5E5E5"> of program</font>

226
00:09:08,670 --> 00:09:14,099
analysis is basically<font color="#E5E5E5"> the</font><font color="#CCCCCC"> input for the</font>

227
00:09:10,709 --> 00:09:16,079
program<font color="#CCCCCC"> drive it down the</font><font color="#E5E5E5"> state if the</font>

228
00:09:14,100 --> 00:09:21,360
constraints were not satisfiable<font color="#CCCCCC"> as a</font>

229
00:09:16,079 --> 00:09:24,329
solver just tells us so and that's it<font color="#CCCCCC"> so</font>

230
00:09:21,360 --> 00:09:25,560
of course not everything<font color="#E5E5E5"> is super</font><font color="#CCCCCC"> easy</font>

231
00:09:24,329 --> 00:09:27,719
with some alga execution and<font color="#E5E5E5"> there a</font>

232
00:09:25,560 --> 00:09:29,849
number<font color="#E5E5E5"> of challenges I've selected three</font>

233
00:09:27,720 --> 00:09:31,470
of the main relevant ones<font color="#E5E5E5"> for us</font><font color="#CCCCCC"> today</font>

234
00:09:29,850 --> 00:09:33,000
and so path explosion was mentioned

235
00:09:31,470 --> 00:09:35,430
earlier<font color="#CCCCCC"> you might have the intuition</font>

236
00:09:33,000 --> 00:09:36,720
<font color="#CCCCCC">that</font><font color="#E5E5E5"> programs are huge right you can</font>

237
00:09:35,430 --> 00:09:38,569
they<font color="#E5E5E5"> can get into infinite numbers of</font>

238
00:09:36,720 --> 00:09:40,920
<font color="#E5E5E5">states and so how could you possibly</font>

239
00:09:38,569 --> 00:09:43,170
manage an infant number of states and

240
00:09:40,920 --> 00:09:45,630
<font color="#E5E5E5">that's really true</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> order to make</font>

241
00:09:43,170 --> 00:09:47,610
<font color="#E5E5E5">symbolic execution effective you need</font><font color="#CCCCCC"> to</font>

242
00:09:45,630 --> 00:09:50,759
<font color="#E5E5E5">have strategies to prioritize the search</font>

243
00:09:47,610 --> 00:09:51,240
the state space<font color="#E5E5E5"> to find the bugs you</font>

244
00:09:50,759 --> 00:09:53,759
<font color="#CCCCCC">want</font>

245
00:09:51,240 --> 00:09:56,100
and so one counter<font color="#E5E5E5"> this we also</font>

246
00:09:53,759 --> 00:09:58,069
encounter<font color="#E5E5E5"> this and theorem to certain</font>

247
00:09:56,100 --> 00:10:01,350
extent<font color="#E5E5E5"> I'll talk about that later</font>

248
00:09:58,069 --> 00:10:04,560
<font color="#E5E5E5">symbolic memory indexing is another kind</font>

249
00:10:01,350 --> 00:10:07,949
<font color="#E5E5E5">of unique problem and so consider this</font>

250
00:10:04,560 --> 00:10:10,768
snippet of assembly code<font color="#E5E5E5"> or do you</font>

251
00:10:07,949 --> 00:10:13,260
referencing a register<font color="#E5E5E5"> say</font><font color="#CCCCCC"> our ax is</font>

252
00:10:10,769 --> 00:10:15,480
actually a symbolic<font color="#E5E5E5"> variable though and</font>

253
00:10:13,260 --> 00:10:17,160
so now we<font color="#E5E5E5"> have to dereference the</font>

254
00:10:15,480 --> 00:10:19,769
symbolic pointer and load it into

255
00:10:17,160 --> 00:10:21,260
another register<font color="#E5E5E5"> well that's kind of a</font>

256
00:10:19,769 --> 00:10:23,010
weird<font color="#E5E5E5"> situation where do we actually</font>

257
00:10:21,260 --> 00:10:25,019
dereference that pointer could point to

258
00:10:23,010 --> 00:10:26,310
a<font color="#E5E5E5"> number of different locations</font><font color="#CCCCCC"> so how</font>

259
00:10:25,019 --> 00:10:29,550
do we actually continue<font color="#E5E5E5"> beyond this</font>

260
00:10:26,310 --> 00:10:31,439
point this<font color="#E5E5E5"> is an accepted this is a big</font>

261
00:10:29,550 --> 00:10:32,550
problem<font color="#E5E5E5"> in small execution there are a</font>

262
00:10:31,440 --> 00:10:33,899
number<font color="#E5E5E5"> of</font><font color="#CCCCCC"> strategies that exist for</font>

263
00:10:32,550 --> 00:10:37,910
handling<font color="#E5E5E5"> it one might be to just</font>

264
00:10:33,899 --> 00:10:39,959
concretize the<font color="#CCCCCC"> RA X register into one</font>

265
00:10:37,910 --> 00:10:42,899
concrete variable but of course this

266
00:10:39,959 --> 00:10:46,010
will compromise your analysis and limit

267
00:10:42,899 --> 00:10:49,529
the number<font color="#E5E5E5"> of states you can search</font>

268
00:10:46,010 --> 00:10:51,060
another problem is loops and so infinite

269
00:10:49,529 --> 00:10:52,980
loops and symbolic loops are also very

270
00:10:51,060 --> 00:10:54,930
challenging<font color="#E5E5E5"> because if you consider this</font>

271
00:10:52,980 --> 00:10:56,970
code which gets<font color="#CCCCCC"> an input and then uses</font>

272
00:10:54,930 --> 00:11:00,689
it as a loop bound under symbolic

273
00:10:56,970 --> 00:11:03,689
execution that that<font color="#CCCCCC"> VAR variable</font><font color="#E5E5E5"> doesn't</font>

274
00:11:00,689 --> 00:11:05,399
have a real value<font color="#E5E5E5"> and so the termination</font>

275
00:11:03,689 --> 00:11:08,339
<font color="#CCCCCC">condition for the loop</font><font color="#E5E5E5"> never really gets</font>

276
00:11:05,399 --> 00:11:08,880
met and so a naive engine will just kind

277
00:11:08,339 --> 00:11:10,709
of

278
00:11:08,880 --> 00:11:11,699
in this kind<font color="#CCCCCC"> of case and</font><font color="#E5E5E5"> so there's a</font>

279
00:11:10,709 --> 00:11:13,619
lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> challenges with some all</font>

280
00:11:11,699 --> 00:11:18,540
execution<font color="#E5E5E5"> and we run into a number of</font>

281
00:11:13,620 --> 00:11:22,560
<font color="#E5E5E5">them also with</font><font color="#CCCCCC"> aetherium so this kind of</font>

282
00:11:18,540 --> 00:11:23,670
finish<font color="#CCCCCC"> that finishes our review brief</font>

283
00:11:22,560 --> 00:11:25,829
whirlwind tour of<font color="#E5E5E5"> something like</font>

284
00:11:23,670 --> 00:11:28,290
execution<font color="#E5E5E5"> the main takeaways are</font><font color="#CCCCCC"> that</font>

285
00:11:25,829 --> 00:11:30,569
using it we can test many paths in a

286
00:11:28,290 --> 00:11:32,069
program<font color="#E5E5E5"> we can do this without actually</font>

287
00:11:30,569 --> 00:11:34,199
<font color="#E5E5E5">knowing that much about the program</font>

288
00:11:32,069 --> 00:11:36,000
<font color="#CCCCCC">ahead</font><font color="#E5E5E5"> of time</font><font color="#CCCCCC"> and so the analysis will</font>

289
00:11:34,199 --> 00:11:38,849
<font color="#CCCCCC">systematically explore the different</font>

290
00:11:36,000 --> 00:11:42,389
<font color="#CCCCCC">branches</font><font color="#E5E5E5"> in the code negate them and in</font>

291
00:11:38,850 --> 00:11:44,399
general<font color="#CCCCCC"> inputs for them also using the</font>

292
00:11:42,389 --> 00:11:46,350
constraints that we<font color="#E5E5E5"> gather we can prove</font>

293
00:11:44,399 --> 00:11:48,389
properties about<font color="#E5E5E5"> pros about programs and</font>

294
00:11:46,350 --> 00:11:53,009
reason<font color="#E5E5E5"> about them using constraint</font>

295
00:11:48,389 --> 00:11:55,350
solvers this is very useful<font color="#E5E5E5"> and so now</font>

296
00:11:53,009 --> 00:12:02,490
that<font color="#E5E5E5"> brings</font><font color="#CCCCCC"> us to a theorem internals</font>

297
00:11:55,350 --> 00:12:03,990
<font color="#E5E5E5">and</font><font color="#CCCCCC"> so like I mentioned before a theorem</font>

298
00:12:02,490 --> 00:12:05,730
is this decentralized computation

299
00:12:03,990 --> 00:12:07,980
platform<font color="#E5E5E5"> it has this cryptocurrency</font>

300
00:12:05,730 --> 00:12:10,740
aspect to<font color="#E5E5E5"> it also but most interestingly</font>

301
00:12:07,980 --> 00:12:14,069
for<font color="#E5E5E5"> us it includes a</font><font color="#CCCCCC"> virtual machine</font><font color="#E5E5E5"> and</font>

302
00:12:10,740 --> 00:12:15,269
so today in our discussion<font color="#CCCCCC"> of etherium</font>

303
00:12:14,069 --> 00:12:16,979
<font color="#E5E5E5">we'll talk about a number</font><font color="#CCCCCC"> to the things</font>

304
00:12:15,269 --> 00:12:18,899
we'll talk<font color="#E5E5E5"> about some our contracts</font>

305
00:12:16,980 --> 00:12:21,600
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> talk about transactions on the</font>

306
00:12:18,899 --> 00:12:23,759
etherium<font color="#CCCCCC"> network we'll go in detail on</font>

307
00:12:21,600 --> 00:12:26,550
the theory and virtual machine<font color="#CCCCCC"> and talk</font>

308
00:12:23,759 --> 00:12:28,350
about other things like<font color="#E5E5E5"> the etherium</font>

309
00:12:26,550 --> 00:12:31,430
application binary interface and the

310
00:12:28,350 --> 00:12:33,269
bytecode format used for smart contracts

311
00:12:31,430 --> 00:12:36,239
will start with smart contracts

312
00:12:33,269 --> 00:12:38,250
themselves<font color="#CCCCCC"> and so in aetherium there's</font>

313
00:12:36,240 --> 00:12:40,980
two kinds of entities<font color="#E5E5E5"> on the network</font>

314
00:12:38,250 --> 00:12:44,160
<font color="#E5E5E5">there are external</font><font color="#CCCCCC"> accounts and contract</font>

315
00:12:40,980 --> 00:12:45,810
accounts external accounts are simple

316
00:12:44,160 --> 00:12:47,910
they're controlled by humans and

317
00:12:45,810 --> 00:12:49,670
basically just have an account<font color="#CCCCCC"> balance</font>

318
00:12:47,910 --> 00:12:52,829
that tracks how<font color="#CCCCCC"> much ether</font><font color="#E5E5E5"> they have</font>

319
00:12:49,670 --> 00:12:54,689
using external<font color="#E5E5E5"> accounts</font><font color="#CCCCCC"> - humans can</font>

320
00:12:52,829 --> 00:12:59,160
transact<font color="#E5E5E5"> with each other and send each</font>

321
00:12:54,689 --> 00:13:01,019
<font color="#E5E5E5">other ether contract accounts are</font>

322
00:12:59,160 --> 00:13:02,790
controlled by code<font color="#E5E5E5"> and so they also all</font>

323
00:13:01,019 --> 00:13:04,529
they they also have<font color="#E5E5E5"> a balance but then</font>

324
00:13:02,790 --> 00:13:07,230
they have some code that<font color="#CCCCCC"> will execute</font>

325
00:13:04,529 --> 00:13:08,970
<font color="#E5E5E5">whenever they receive a transaction and</font>

326
00:13:07,230 --> 00:13:10,680
<font color="#CCCCCC">so these</font><font color="#E5E5E5"> are these are very interesting</font>

327
00:13:08,970 --> 00:13:12,060
<font color="#CCCCCC">and that's</font><font color="#E5E5E5"> in this</font><font color="#CCCCCC"> is what we're talking</font>

328
00:13:10,680 --> 00:13:14,399
<font color="#CCCCCC">about when we talk to</font><font color="#E5E5E5"> smart contracts</font>

329
00:13:12,060 --> 00:13:17,069
we're talking<font color="#E5E5E5"> code that's deployed</font><font color="#CCCCCC"> onto</font>

330
00:13:14,399 --> 00:13:20,130
<font color="#CCCCCC">the network executes when people send</font>

331
00:13:17,069 --> 00:13:22,579
<font color="#E5E5E5">the transactions</font><font color="#CCCCCC"> furthermore contracts</font>

332
00:13:20,130 --> 00:13:24,889
can also interact<font color="#CCCCCC"> with other contracts</font>

333
00:13:22,579 --> 00:13:27,199
we can have these highly<font color="#E5E5E5"> complex stack</font>

334
00:13:24,889 --> 00:13:31,670
traces<font color="#E5E5E5"> between different contracts on</font>

335
00:13:27,199 --> 00:13:33,410
<font color="#CCCCCC">the network so smart contracts</font>

336
00:13:31,670 --> 00:13:35,689
<font color="#CCCCCC">themselves</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> just a little bit</font>

337
00:13:33,410 --> 00:13:36,980
<font color="#E5E5E5">what they look like don't we how much we</font>

338
00:13:35,689 --> 00:13:39,049
can<font color="#E5E5E5"> read the code on the</font><font color="#CCCCCC"> right but don't</font>

339
00:13:36,980 --> 00:13:40,249
<font color="#E5E5E5">even try it</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> to give you a sense of</font>

340
00:13:39,049 --> 00:13:41,660
<font color="#E5E5E5">what they look</font><font color="#CCCCCC"> like they're programmed</font>

341
00:13:40,249 --> 00:13:44,209
in this<font color="#CCCCCC"> language</font><font color="#E5E5E5"> called solidity and</font>

342
00:13:41,660 --> 00:13:46,399
<font color="#E5E5E5">they basically encode state machines and</font>

343
00:13:44,209 --> 00:13:48,709
so you can declare<font color="#E5E5E5"> a certain number of</font>

344
00:13:46,399 --> 00:13:51,110
<font color="#E5E5E5">state variables in them and you can also</font>

345
00:13:48,709 --> 00:13:53,079
declare some functions<font color="#E5E5E5"> to mutate and</font>

346
00:13:51,110 --> 00:13:55,329
modify<font color="#E5E5E5"> those state variables if you want</font>

347
00:13:53,079 --> 00:13:57,529
one thing<font color="#E5E5E5"> that's really unique about</font>

348
00:13:55,329 --> 00:13:59,920
smart contracts<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> they actually</font>

349
00:13:57,529 --> 00:14:02,119
<font color="#E5E5E5">have a lot of assertions compared to</font>

350
00:13:59,920 --> 00:14:04,639
code written in<font color="#E5E5E5"> traditional languages</font>

351
00:14:02,119 --> 00:14:08,589
and so this is<font color="#E5E5E5"> actually how air handling</font>

352
00:14:04,639 --> 00:14:11,239
is<font color="#E5E5E5"> mainly done in</font><font color="#CCCCCC"> ethereum when a</font>

353
00:14:08,589 --> 00:14:13,489
contract encounters an assertion or

354
00:14:11,239 --> 00:14:15,649
<font color="#E5E5E5">require statement that's false there's a</font>

355
00:14:13,489 --> 00:14:19,429
state rollback mechanism that<font color="#E5E5E5"> rolls back</font>

356
00:14:15,649 --> 00:14:21,499
<font color="#E5E5E5">the state of the contracts and</font><font color="#CCCCCC"> like I</font>

357
00:14:19,429 --> 00:14:23,360
<font color="#E5E5E5">mentioned these code the these contracts</font>

358
00:14:21,499 --> 00:14:26,569
will execute<font color="#E5E5E5"> whenever they receive a</font>

359
00:14:23,360 --> 00:14:28,249
transaction<font color="#CCCCCC"> also</font><font color="#E5E5E5"> mention</font><font color="#CCCCCC"> that even</font>

360
00:14:26,569 --> 00:14:30,259
<font color="#E5E5E5">though they're programmed and solidity</font>

361
00:14:28,249 --> 00:14:31,549
solidity<font color="#CCCCCC"> is a compiled language</font><font color="#E5E5E5"> and so</font>

362
00:14:30,259 --> 00:14:33,079
<font color="#E5E5E5">those are actually compiled</font><font color="#CCCCCC"> to binaries</font>

363
00:14:31,549 --> 00:14:35,360
and that's what that's<font color="#E5E5E5"> what's deployed</font>

364
00:14:33,079 --> 00:14:36,979
<font color="#CCCCCC">onto the network and so because of that</font>

365
00:14:35,360 --> 00:14:38,959
<font color="#E5E5E5">binary analysis is useful</font><font color="#CCCCCC"> because</font>

366
00:14:36,980 --> 00:14:43,639
generally we don't<font color="#E5E5E5"> have a source code</font>

367
00:14:38,959 --> 00:14:47,268
for our many contracts it's now stock

368
00:14:43,639 --> 00:14:48,949
transactions these are the fundamental

369
00:14:47,269 --> 00:14:51,829
communication interface for the etherium

370
00:14:48,949 --> 00:14:53,419
<font color="#CCCCCC">network it's actually it you send</font>

371
00:14:51,829 --> 00:14:54,859
transactions<font color="#E5E5E5"> between two entities on the</font>

372
00:14:53,419 --> 00:14:57,110
<font color="#E5E5E5">network and</font><font color="#CCCCCC"> you can do things like</font>

373
00:14:54,860 --> 00:14:59,480
transfer ether between<font color="#E5E5E5"> entities you</font><font color="#CCCCCC"> can</font>

374
00:14:57,110 --> 00:15:01,939
deploy contracts<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> interact</font>

375
00:14:59,480 --> 00:15:03,499
with contracts interacting<font color="#E5E5E5"> with</font>

376
00:15:01,939 --> 00:15:06,709
contracts we just means<font color="#E5E5E5"> calling</font>

377
00:15:03,499 --> 00:15:09,049
functions in<font color="#E5E5E5"> that the structure is</font>

378
00:15:06,709 --> 00:15:10,368
pretty simple<font color="#CCCCCC"> you</font><font color="#E5E5E5"> specify</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> to and from</font>

379
00:15:09,049 --> 00:15:12,799
address because every<font color="#E5E5E5"> entity has an</font>

380
00:15:10,369 --> 00:15:14,480
<font color="#E5E5E5">address you</font><font color="#CCCCCC"> can specify some</font><font color="#E5E5E5"> ether to</font>

381
00:15:12,799 --> 00:15:16,009
send and you can also optionally<font color="#E5E5E5"> specify</font>

382
00:15:14,480 --> 00:15:17,899
an arbitrary

383
00:15:16,009 --> 00:15:20,149
data buffer and this becomes<font color="#E5E5E5"> very</font>

384
00:15:17,899 --> 00:15:22,339
important when<font color="#CCCCCC"> doing with smart</font>

385
00:15:20,149 --> 00:15:25,790
contracts and we'll<font color="#E5E5E5"> dig into that later</font>

386
00:15:22,339 --> 00:15:27,439
and the API section<font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> talk about</font>

387
00:15:25,790 --> 00:15:30,230
<font color="#CCCCCC">there and virtual machine this is a</font>

388
00:15:27,439 --> 00:15:34,189
pretty interesting<font color="#E5E5E5"> virtual machine so</font>

389
00:15:30,230 --> 00:15:35,810
it's a stack machine<font color="#E5E5E5"> and it has 256 bit</font>

390
00:15:34,189 --> 00:15:39,469
<font color="#CCCCCC">eight upper good sides which</font>

391
00:15:35,810 --> 00:15:41,660
is huge as about<font color="#CCCCCC"> 200</font><font color="#E5E5E5"> instructions and</font>

392
00:15:39,470 --> 00:15:42,770
<font color="#E5E5E5">these fall</font><font color="#CCCCCC"> into a couple</font><font color="#E5E5E5"> categories you</font>

393
00:15:41,660 --> 00:15:45,140
have<font color="#E5E5E5"> your standard</font><font color="#CCCCCC"> arithmetic</font>

394
00:15:42,770 --> 00:15:48,680
instructions like<font color="#E5E5E5"> add multiply divide</font>

395
00:15:45,140 --> 00:15:51,050
and whatnot<font color="#E5E5E5"> you have very simple control</font>

396
00:15:48,680 --> 00:15:54,439
flow just<font color="#E5E5E5"> conditional jumps and</font>

397
00:15:51,050 --> 00:15:56,329
unconditional jumps<font color="#CCCCCC"> we have a variety</font><font color="#E5E5E5"> of</font>

398
00:15:54,440 --> 00:15:58,520
memory access<font color="#E5E5E5"> instructions</font><font color="#CCCCCC"> because</font>

399
00:15:56,330 --> 00:16:00,110
there's a variety<font color="#E5E5E5"> of types of memory and</font>

400
00:15:58,520 --> 00:16:02,870
the etherium virtual machine which we'll

401
00:16:00,110 --> 00:16:04,400
see in<font color="#E5E5E5"> a</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> last</font><font color="#E5E5E5"> we have a number</font>

402
00:16:02,870 --> 00:16:06,770
<font color="#CCCCCC">of kind of</font><font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> domain specific</font>

403
00:16:04,400 --> 00:16:10,189
instructions related<font color="#E5E5E5"> to blockchain stuff</font>

404
00:16:06,770 --> 00:16:15,050
<font color="#E5E5E5">so we can get the timestamp of a block</font>

405
00:16:10,190 --> 00:16:19,010
<font color="#E5E5E5">being get the address of an account we</font>

406
00:16:15,050 --> 00:16:20,930
can revert a transact<font color="#E5E5E5"> transaction we can</font>

407
00:16:19,010 --> 00:16:23,720
<font color="#E5E5E5">self-destructs is it all interesting</font>

408
00:16:20,930 --> 00:16:27,109
kind of<font color="#E5E5E5"> odd instructions that are very</font>

409
00:16:23,720 --> 00:16:29,270
<font color="#CCCCCC">domain-specific there's also this</font>

410
00:16:27,110 --> 00:16:31,940
concept<font color="#CCCCCC"> of gasps</font><font color="#E5E5E5"> which is basically a</font>

411
00:16:29,270 --> 00:16:33,740
cost<font color="#E5E5E5"> to execute an instruction and so</font>

412
00:16:31,940 --> 00:16:35,600
you guys<font color="#E5E5E5"> have to pay money is to execute</font>

413
00:16:33,740 --> 00:16:36,920
<font color="#E5E5E5">your programs and</font><font color="#CCCCCC"> etherium and the</font>

414
00:16:35,600 --> 00:16:38,089
reason for<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is because these</font>

415
00:16:36,920 --> 00:16:40,280
<font color="#E5E5E5">programs are</font><font color="#CCCCCC"> turing-complete</font>

416
00:16:38,089 --> 00:16:43,339
and so in<font color="#CCCCCC"> order to avoid situations</font>

417
00:16:40,280 --> 00:16:45,650
<font color="#CCCCCC">where the network gets tossed because</font>

418
00:16:43,339 --> 00:16:47,210
someone intentionally<font color="#E5E5E5"> or accidentally</font>

419
00:16:45,650 --> 00:16:49,400
executed an infinite loop for example

420
00:16:47,210 --> 00:16:52,820
<font color="#E5E5E5">the</font><font color="#CCCCCC"> instruction set cost and that limits</font>

421
00:16:49,400 --> 00:16:55,520
the<font color="#CCCCCC"> ability of the denial of service in</font>

422
00:16:52,820 --> 00:16:57,470
<font color="#CCCCCC">ethereum and</font><font color="#E5E5E5"> lastly like I mentioned so</font>

423
00:16:55,520 --> 00:16:59,510
this is the compilation target that

424
00:16:57,470 --> 00:17:01,810
ultimately smart contracts are compiled

425
00:16:59,510 --> 00:17:01,810
<font color="#E5E5E5">to</font>

426
00:17:04,839 --> 00:17:08,948
if<font color="#E5E5E5"> they're in virtual machine has a</font>

427
00:17:06,459 --> 00:17:10,689
number of<font color="#E5E5E5"> virtual address spaces which</font>

428
00:17:08,949 --> 00:17:12,909
is also<font color="#E5E5E5"> kind of pretty novel</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so</font>

429
00:17:10,689 --> 00:17:16,360
there's four main address spaces that

430
00:17:12,909 --> 00:17:18,850
the<font color="#E5E5E5"> evm can talk to and just</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> clear</font>

431
00:17:16,359 --> 00:17:21,490
these<font color="#CCCCCC"> are all virtual address spaces</font>

432
00:17:18,849 --> 00:17:22,869
these are not there's no real<font color="#CCCCCC"> hardware</font>

433
00:17:21,490 --> 00:17:25,449
involved<font color="#CCCCCC"> in any of</font><font color="#E5E5E5"> these and so the</font>

434
00:17:22,869 --> 00:17:27,819
first<font color="#E5E5E5"> is storage and so you can think</font><font color="#CCCCCC"> of</font>

435
00:17:25,449 --> 00:17:30,840
<font color="#E5E5E5">this as a smart contracts persistent</font>

436
00:17:27,819 --> 00:17:33,990
storage almost like<font color="#E5E5E5"> disk</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is where</font>

437
00:17:30,840 --> 00:17:36,009
<font color="#E5E5E5">contracts state variables get stored and</font>

438
00:17:33,990 --> 00:17:38,559
what's really interesting about<font color="#E5E5E5"> it is</font>

439
00:17:36,009 --> 00:17:41,769
<font color="#E5E5E5">that it's virtually infinite in that</font>

440
00:17:38,559 --> 00:17:45,908
it's a 256 bit addressable<font color="#E5E5E5"> address space</font>

441
00:17:41,769 --> 00:17:48,070
which<font color="#E5E5E5"> is really</font><font color="#CCCCCC"> massive it's also</font>

442
00:17:45,909 --> 00:17:51,059
relatively<font color="#E5E5E5"> expensive to use the</font>

443
00:17:48,070 --> 00:17:53,918
<font color="#E5E5E5">instructions that write to storage</font>

444
00:17:51,059 --> 00:17:57,039
memory is<font color="#CCCCCC"> the second region</font><font color="#E5E5E5"> and so this</font>

445
00:17:53,919 --> 00:17:59,529
is a volatile address space that<font color="#CCCCCC"> gets</font>

446
00:17:57,039 --> 00:18:03,158
cleared out on every execution<font color="#E5E5E5"> of the</font>

447
00:17:59,529 --> 00:18:04,990
smart contracts and it's just used for

448
00:18:03,159 --> 00:18:07,389
intermediate<font color="#E5E5E5"> computation it somewhat</font>

449
00:18:04,990 --> 00:18:09,820
resembles<font color="#E5E5E5"> a heap a very simple heap</font>

450
00:18:07,389 --> 00:18:13,209
almost like a break or s break<font color="#CCCCCC"> in</font><font color="#E5E5E5"> Linux</font>

451
00:18:09,820 --> 00:18:16,779
<font color="#E5E5E5">and it expands as you as you need more</font>

452
00:18:13,210 --> 00:18:20,320
<font color="#E5E5E5">but that's that</font><font color="#CCCCCC"> encourage</font>

453
00:18:16,779 --> 00:18:23,200
<font color="#E5E5E5">gas costs there's a separate region of</font>

454
00:18:20,320 --> 00:18:25,480
<font color="#CCCCCC">memory for the call data and</font><font color="#E5E5E5"> that's a</font>

455
00:18:23,200 --> 00:18:27,549
transaction data buffer and so the

456
00:18:25,480 --> 00:18:28,960
contract<font color="#E5E5E5"> needs to</font><font color="#CCCCCC"> access this in order</font>

457
00:18:27,549 --> 00:18:31,059
<font color="#E5E5E5">to know what functions to call and</font>

458
00:18:28,960 --> 00:18:33,759
access arguments and<font color="#E5E5E5"> stuff like that so</font>

459
00:18:31,059 --> 00:18:36,070
<font color="#E5E5E5">that is a separate</font><font color="#CCCCCC"> address space and</font>

460
00:18:33,759 --> 00:18:37,869
lastly we<font color="#CCCCCC"> have the stack so like I</font>

461
00:18:36,070 --> 00:18:39,220
<font color="#E5E5E5">mentioned the EVM is a stack machine and</font>

462
00:18:37,869 --> 00:18:42,158
so all the instructions are<font color="#CCCCCC"> going to be</font>

463
00:18:39,220 --> 00:18:47,619
mostly<font color="#CCCCCC"> using</font><font color="#E5E5E5"> the stack</font><font color="#CCCCCC"> to perform the</font>

464
00:18:42,159 --> 00:18:49,389
<font color="#CCCCCC">direct</font><font color="#E5E5E5"> memory accesses so now</font><font color="#CCCCCC"> we'll get</font>

465
00:18:47,619 --> 00:18:51,399
<font color="#CCCCCC">into something</font><font color="#E5E5E5"> called the etherium</font>

466
00:18:49,389 --> 00:18:54,340
application binary interface<font color="#E5E5E5"> this is</font>

467
00:18:51,399 --> 00:18:55,869
<font color="#E5E5E5">really the core</font><font color="#CCCCCC"> of how calling functions</font>

468
00:18:54,340 --> 00:18:59,408
and interacting with contracts work and

469
00:18:55,869 --> 00:19:02,139
so when you call a<font color="#E5E5E5"> function in a</font>

470
00:18:59,409 --> 00:19:04,600
contract<font color="#E5E5E5"> you need to specify some</font>

471
00:19:02,139 --> 00:19:06,399
information<font color="#E5E5E5"> you need to say</font><font color="#CCCCCC"> what</font>

472
00:19:04,600 --> 00:19:07,899
<font color="#E5E5E5">function you</font><font color="#CCCCCC"> would like to call and you</font>

473
00:19:06,399 --> 00:19:08,379
need to provide<font color="#E5E5E5"> some arguments to that</font>

474
00:19:07,899 --> 00:19:10,840
function

475
00:19:08,379 --> 00:19:12,610
all of<font color="#CCCCCC"> that is serialized</font><font color="#E5E5E5"> in C the</font>

476
00:19:10,840 --> 00:19:17,439
transaction<font color="#E5E5E5"> data buffer according</font><font color="#CCCCCC"> to</font>

477
00:19:12,610 --> 00:19:18,668
this API<font color="#E5E5E5"> spec it's pretty simple and has</font>

478
00:19:17,440 --> 00:19:21,460
two main<font color="#E5E5E5"> components like ice</font>

479
00:19:18,669 --> 00:19:23,169
the first four<font color="#E5E5E5"> bytes are used to</font>

480
00:19:21,460 --> 00:19:26,169
<font color="#E5E5E5">identify the function</font><font color="#CCCCCC"> that you want</font><font color="#E5E5E5"> to</font>

481
00:19:23,169 --> 00:19:28,090
call<font color="#E5E5E5"> and followed</font><font color="#CCCCCC"> by the arguments and</font>

482
00:19:26,169 --> 00:19:31,059
serialized form that you're<font color="#E5E5E5"> calling the</font>

483
00:19:28,090 --> 00:19:34,330
function with here's an example of<font color="#E5E5E5"> a</font>

484
00:19:31,059 --> 00:19:37,570
simple<font color="#CCCCCC"> ABI encoded transaction data</font>

485
00:19:34,330 --> 00:19:39,279
buffer and so<font color="#CCCCCC"> say we</font><font color="#E5E5E5"> have a smart</font>

486
00:19:37,570 --> 00:19:42,939
contract function that takes<font color="#E5E5E5"> three</font>

487
00:19:39,279 --> 00:19:45,460
unsigned integers<font color="#CCCCCC"> okay so say we</font><font color="#E5E5E5"> wants</font>

488
00:19:42,940 --> 00:19:48,909
<font color="#CCCCCC">to call this function with one</font><font color="#E5E5E5"> two and</font>

489
00:19:45,460 --> 00:19:51,399
three<font color="#E5E5E5"> so formulate our data buffer</font>

490
00:19:48,909 --> 00:19:53,799
properly so first we<font color="#CCCCCC"> need to compute</font><font color="#E5E5E5"> the</font>

491
00:19:51,399 --> 00:19:56,168
function identifier and this<font color="#E5E5E5"> is this</font><font color="#CCCCCC"> is</font>

492
00:19:53,799 --> 00:19:58,869
defined to<font color="#E5E5E5"> be the SHA hash</font><font color="#CCCCCC"> the prototype</font>

493
00:19:56,169 --> 00:20:01,690
<font color="#E5E5E5">and just and the first four bytes of the</font>

494
00:19:58,869 --> 00:20:03,730
<font color="#CCCCCC">SHA hash prototype for</font><font color="#E5E5E5"> this simple</font>

495
00:20:01,690 --> 00:20:07,570
<font color="#CCCCCC">example</font><font color="#E5E5E5"> the arguments just follow after</font>

496
00:20:03,730 --> 00:20:11,080
<font color="#CCCCCC">that</font><font color="#E5E5E5"> and so we have one</font><font color="#CCCCCC"> two and three</font><font color="#E5E5E5"> in</font>

497
00:20:07,570 --> 00:20:12,480
<font color="#CCCCCC">big-endian</font><font color="#E5E5E5"> format</font><font color="#CCCCCC"> after that</font><font color="#E5E5E5"> point so</font>

498
00:20:11,080 --> 00:20:15,609
it's pretty pretty straightforward

499
00:20:12,480 --> 00:20:17,649
things get more<font color="#E5E5E5"> complex when we start</font>

500
00:20:15,609 --> 00:20:19,269
<font color="#E5E5E5">using more complex solidity datatypes</font>

501
00:20:17,649 --> 00:20:22,899
<font color="#E5E5E5">and so if you had a function</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> takes</font>

502
00:20:19,269 --> 00:20:26,739
<font color="#E5E5E5">an unsigned integer and a variable</font>

503
00:20:22,899 --> 00:20:29,229
<font color="#E5E5E5">length array of unsigned integers and we</font>

504
00:20:26,739 --> 00:20:33,009
wanted<font color="#E5E5E5"> to send it the</font><font color="#CCCCCC"> argument one and</font>

505
00:20:29,230 --> 00:20:34,840
then this array<font color="#CCCCCC"> of 42 43 44</font><font color="#E5E5E5"> then things</font>

506
00:20:33,009 --> 00:20:37,960
become more<font color="#E5E5E5"> complex so</font><font color="#CCCCCC"> we have the one</font>

507
00:20:34,840 --> 00:20:39,609
encoded like before but after<font color="#CCCCCC"> that point</font>

508
00:20:37,960 --> 00:20:42,909
some other fields get introduced and so

509
00:20:39,609 --> 00:20:46,299
we have<font color="#CCCCCC"> this offset field</font><font color="#E5E5E5"> and n elements</font>

510
00:20:42,909 --> 00:20:49,419
field that<font color="#E5E5E5"> basically you can</font><font color="#CCCCCC"> use to</font>

511
00:20:46,299 --> 00:20:51,668
identify<font color="#E5E5E5"> where the actual data lives in</font>

512
00:20:49,419 --> 00:20:52,989
the<font color="#E5E5E5"> transaction data buffer and so now</font>

513
00:20:51,669 --> 00:20:56,559
this thing<font color="#CCCCCC"> is</font><font color="#E5E5E5"> starting to look</font><font color="#CCCCCC"> more like</font>

514
00:20:52,989 --> 00:20:57,789
a<font color="#E5E5E5"> complex binary format and so that'll</font>

515
00:20:56,559 --> 00:21:00,428
become<font color="#E5E5E5"> relevant later on</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> try to</font>

516
00:20:57,789 --> 00:21:01,809
symbolically execute<font color="#E5E5E5"> things and lastly</font>

517
00:21:00,429 --> 00:21:04,419
<font color="#CCCCCC">let's talk about the boy by</font><font color="#E5E5E5"> code format</font>

518
00:21:01,809 --> 00:21:06,039
<font color="#CCCCCC">it's also</font><font color="#E5E5E5"> very simple</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> it's</font>

519
00:21:04,419 --> 00:21:07,690
<font color="#E5E5E5">really just code and it always begins</font>

520
00:21:06,039 --> 00:21:10,779
<font color="#E5E5E5">with a certain section at the start</font>

521
00:21:07,690 --> 00:21:14,559
<font color="#E5E5E5">called The Dispatch stub and there's an</font>

522
00:21:10,779 --> 00:21:16,299
implicit entry point<font color="#E5E5E5"> of zero and so the</font>

523
00:21:14,559 --> 00:21:18,340
<font color="#E5E5E5">responsibility of</font><font color="#CCCCCC"> The Dispatch</font><font color="#E5E5E5"> stub is</font>

524
00:21:16,299 --> 00:21:20,799
to parse the first four bytes of<font color="#E5E5E5"> the</font>

525
00:21:18,340 --> 00:21:23,859
transaction data buffer and dispatch to

526
00:21:20,799 --> 00:21:26,129
the<font color="#E5E5E5"> functions accordingly</font><font color="#CCCCCC"> and so</font><font color="#E5E5E5"> after</font>

527
00:21:23,859 --> 00:21:30,119
the dispatch<font color="#E5E5E5"> stub it's what we</font><font color="#CCCCCC"> adjust</font>

528
00:21:26,129 --> 00:21:30,119
<font color="#E5E5E5">the functions in the</font><font color="#CCCCCC"> contract</font>

529
00:21:30,870 --> 00:21:37,539
so here's an example disassembly of a

530
00:21:35,320 --> 00:21:39,399
dispatch<font color="#E5E5E5"> stub it's not super important</font>

531
00:21:37,539 --> 00:21:40,960
<font color="#E5E5E5">to read every single instruction here</font>

532
00:21:39,399 --> 00:21:43,059
but it's useful to walk through just<font color="#E5E5E5"> to</font>

533
00:21:40,960 --> 00:21:45,039
understand<font color="#E5E5E5"> how it works and so at the</font>

534
00:21:43,059 --> 00:21:47,590
top<font color="#E5E5E5"> here</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> this call data load</font>

535
00:21:45,039 --> 00:21:49,210
instruction<font color="#E5E5E5"> so this is used by the</font>

536
00:21:47,590 --> 00:21:50,740
contract to actually<font color="#E5E5E5"> access the call</font>

537
00:21:49,210 --> 00:21:55,390
data region<font color="#E5E5E5"> of memory with the</font>

538
00:21:50,740 --> 00:21:59,130
<font color="#E5E5E5">transaction data buffer</font><font color="#CCCCCC"> we can see later</font>

539
00:21:55,390 --> 00:22:03,370
<font color="#CCCCCC">on in the code that it's pushing this</font>

540
00:21:59,130 --> 00:22:05,289
hex<font color="#E5E5E5"> number onto</font><font color="#CCCCCC"> the stack</font><font color="#E5E5E5"> doing an EQ</font>

541
00:22:03,370 --> 00:22:08,459
instruction<font color="#E5E5E5"> and then jumping and so this</font>

542
00:22:05,289 --> 00:22:08,460
is how<font color="#CCCCCC"> it's dispatching</font>

543
00:23:18,149 --> 00:23:22,479
check<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> we're back in business</font><font color="#CCCCCC"> I'm</font>

544
00:23:21,279 --> 00:23:25,210
sorry about<font color="#E5E5E5"> that</font>

545
00:23:22,480 --> 00:23:27,450
does anyone can anyone explain to me

546
00:23:25,210 --> 00:23:30,940
what the rest<font color="#E5E5E5"> of this</font><font color="#CCCCCC"> disassembly does</font>

547
00:23:27,450 --> 00:23:33,340
<font color="#E5E5E5">okay so like I said this code here</font>

548
00:23:30,940 --> 00:23:35,559
that's circled is pushing this hex

549
00:23:33,340 --> 00:23:36,999
constant comparing it to the first four

550
00:23:35,559 --> 00:23:38,950
bytes<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the data</font><font color="#E5E5E5"> and jumping and so</font>

551
00:23:36,999 --> 00:23:41,649
that's how the dispatch mechanism works

552
00:23:38,950 --> 00:23:43,269
<font color="#CCCCCC">it's it's</font><font color="#E5E5E5"> looking at the</font><font color="#CCCCCC"> data and</font><font color="#E5E5E5"> then</font>

553
00:23:41,649 --> 00:23:45,789
jumping into the into the<font color="#CCCCCC"> buy code based</font>

554
00:23:43,269 --> 00:23:47,470
on that we<font color="#E5E5E5"> have an identical</font><font color="#CCCCCC"> construct</font>

555
00:23:45,789 --> 00:23:49,239
<font color="#E5E5E5">later on in the code where</font><font color="#CCCCCC"> we have this</font>

556
00:23:47,470 --> 00:23:51,970
different hex constant and it's

557
00:23:49,239 --> 00:23:54,220
comparing against the first four bytes

558
00:23:51,970 --> 00:23:55,600
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the transaction data</font><font color="#E5E5E5"> and dropping</font><font color="#CCCCCC"> so</font>

559
00:23:54,220 --> 00:23:57,429
that's really how the dispatch mechanism

560
00:23:55,600 --> 00:24:00,309
works in<font color="#CCCCCC"> the other and virtual machine</font>

561
00:23:57,429 --> 00:24:02,230
if we send it junk<font color="#E5E5E5"> data and the first</font>

562
00:24:00,309 --> 00:24:04,119
four bytes<font color="#E5E5E5"> the bytes didn't match any of</font>

563
00:24:02,230 --> 00:24:08,109
<font color="#E5E5E5">the function IDs we had this revert</font>

564
00:24:04,119 --> 00:24:09,939
instruction and the state reverts and so

565
00:24:08,109 --> 00:24:11,859
just to<font color="#E5E5E5"> summarize</font><font color="#CCCCCC"> etherium is this</font>

566
00:24:09,940 --> 00:24:14,379
interesting<font color="#E5E5E5"> decentralized virtual</font>

567
00:24:11,859 --> 00:24:17,499
<font color="#CCCCCC">machine based computation platform and</font>

568
00:24:14,379 --> 00:24:19,600
using it we can write and deploy<font color="#CCCCCC"> small</font>

569
00:24:17,499 --> 00:24:23,200
contract<font color="#E5E5E5"> applications and interact with</font>

570
00:24:19,600 --> 00:24:27,369
them using transactions<font color="#E5E5E5"> so now</font><font color="#CCCCCC"> we'll get</font>

571
00:24:23,200 --> 00:24:29,769
into<font color="#E5E5E5"> the meat</font><font color="#CCCCCC"> of things and and combine</font>

572
00:24:27,369 --> 00:24:30,970
symbolic execution with<font color="#CCCCCC"> aetherium and so</font>

573
00:24:29,769 --> 00:24:32,739
our goals<font color="#E5E5E5"> here are pretty</font>

574
00:24:30,970 --> 00:24:34,320
<font color="#E5E5E5">straightforward we want to kind of</font>

575
00:24:32,739 --> 00:24:37,149
follow<font color="#E5E5E5"> in the tradition of classical</font>

576
00:24:34,320 --> 00:24:39,039
<font color="#E5E5E5">symbolic execution and generate inputs</font>

577
00:24:37,149 --> 00:24:43,299
that exercise the functionality of<font color="#E5E5E5"> the</font>

578
00:24:39,039 --> 00:24:44,950
contract<font color="#E5E5E5"> we want to do this in such a</font>

579
00:24:43,299 --> 00:24:47,049
<font color="#E5E5E5">way</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> where</font><font color="#CCCCCC"> we enumerate the state</font>

580
00:24:44,950 --> 00:24:48,309
space and discover failure<font color="#CCCCCC"> states we</font>

581
00:24:47,049 --> 00:24:50,649
<font color="#E5E5E5">also don't want to generate false</font>

582
00:24:48,309 --> 00:24:52,450
positives<font color="#E5E5E5"> and that if we find an error</font>

583
00:24:50,649 --> 00:24:54,639
<font color="#E5E5E5">state and the program we will always be</font>

584
00:24:52,450 --> 00:24:57,850
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to generate an input that triggered</font>

585
00:24:54,639 --> 00:24:59,709
it under concrete execution<font color="#E5E5E5"> lastly we</font>

586
00:24:57,850 --> 00:25:03,939
want to allow humans to reason about

587
00:24:59,710 --> 00:25:05,350
improved<font color="#CCCCCC"> properties about</font><font color="#E5E5E5"> contracts and</font>

588
00:25:03,940 --> 00:25:07,480
so here's the methodology of how this<font color="#E5E5E5"> is</font>

589
00:25:05,350 --> 00:25:09,879
going<font color="#CCCCCC"> to work</font><font color="#E5E5E5"> basically first we need to</font>

590
00:25:07,480 --> 00:25:13,119
implement a symbolic EVM interpreter

591
00:25:09,879 --> 00:25:15,519
this interpreter will differ<font color="#CCCCCC"> from normal</font>

592
00:25:13,119 --> 00:25:17,499
ones and<font color="#CCCCCC"> that it can handle</font><font color="#E5E5E5"> symbolic</font>

593
00:25:15,519 --> 00:25:19,570
arguments<font color="#E5E5E5"> and it's able of building up</font>

594
00:25:17,499 --> 00:25:22,090
symbolic expression trees and

595
00:25:19,570 --> 00:25:25,178
propagating things<font color="#E5E5E5"> based on how the</font>

596
00:25:22,090 --> 00:25:26,889
<font color="#CCCCCC">program executes once we have symbolic</font>

597
00:25:25,179 --> 00:25:29,220
<font color="#E5E5E5">EVM interpreter will then start</font>

598
00:25:26,889 --> 00:25:31,800
executing contracts<font color="#E5E5E5"> with symbolic and</font>

599
00:25:29,220 --> 00:25:33,570
and in this in this<font color="#E5E5E5"> case symbolic input</font>

600
00:25:31,800 --> 00:25:35,490
is really<font color="#E5E5E5"> those fields of the</font>

601
00:25:33,570 --> 00:25:37,679
transaction and<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we can provide two</font>

602
00:25:35,490 --> 00:25:39,210
main inputs to a contract<font color="#CCCCCC"> any</font>

603
00:25:37,680 --> 00:25:41,310
<font color="#E5E5E5">transaction we can provide a symbolic</font>

604
00:25:39,210 --> 00:25:43,860
transaction value and a symbolic

605
00:25:41,310 --> 00:25:45,510
transaction data buffer and really the

606
00:25:43,860 --> 00:25:49,080
data<font color="#E5E5E5"> buffer is</font><font color="#CCCCCC"> the more interesting one</font>

607
00:25:45,510 --> 00:25:50,840
<font color="#CCCCCC">here this is</font><font color="#E5E5E5"> what we can</font><font color="#CCCCCC"> use to</font><font color="#E5E5E5"> pass in</font>

608
00:25:49,080 --> 00:25:53,399
both<font color="#CCCCCC"> arguments the contracts</font><font color="#E5E5E5"> and</font>

609
00:25:50,840 --> 00:25:55,379
automatically<font color="#CCCCCC"> I do things like</font><font color="#E5E5E5"> find all</font>

610
00:25:53,400 --> 00:25:57,270
the functions<font color="#E5E5E5"> and so that's what we'll</font>

611
00:25:55,380 --> 00:25:59,490
focus<font color="#E5E5E5"> on today</font>

612
00:25:57,270 --> 00:26:01,200
so just to read just<font color="#CCCCCC"> to</font><font color="#E5E5E5"> review in a</font>

613
00:25:59,490 --> 00:26:03,300
concrete<font color="#CCCCCC"> kind of transaction we have one</font>

614
00:26:01,200 --> 00:26:05,310
initial contract<font color="#E5E5E5"> state we apply</font>

615
00:26:03,300 --> 00:26:08,669
transaction a concrete transaction and

616
00:26:05,310 --> 00:26:11,159
we have one<font color="#CCCCCC"> output</font><font color="#E5E5E5"> state it's a little</font>

617
00:26:08,670 --> 00:26:12,780
bit different<font color="#CCCCCC"> for symbolic execution of</font>

618
00:26:11,160 --> 00:26:14,330
<font color="#CCCCCC">etherium so now we have symbolic</font>

619
00:26:12,780 --> 00:26:16,950
transactions that were

620
00:26:14,330 --> 00:26:18,990
kind<font color="#E5E5E5"> of throwing</font><font color="#CCCCCC"> onto the network and we</font>

621
00:26:16,950 --> 00:26:22,130
won't get one<font color="#E5E5E5"> output state anymore will</font>

622
00:26:18,990 --> 00:26:24,300
<font color="#E5E5E5">actually get a number of output</font><font color="#CCCCCC"> states</font>

623
00:26:22,130 --> 00:26:26,280
<font color="#E5E5E5">the number of application we get will</font>

624
00:26:24,300 --> 00:26:28,290
depend<font color="#E5E5E5"> on exactly what</font><font color="#CCCCCC"> the contract does</font>

625
00:26:26,280 --> 00:26:32,970
what stay forking happens when the

626
00:26:28,290 --> 00:26:34,620
contract executes and so on and so yeah

627
00:26:32,970 --> 00:26:36,960
<font color="#E5E5E5">so this</font><font color="#CCCCCC"> is just illustrating now we're</font>

628
00:26:34,620 --> 00:26:41,459
going<font color="#E5E5E5"> to make the the inputs of</font><font color="#CCCCCC"> the</font>

629
00:26:36,960 --> 00:26:43,140
transaction<font color="#E5E5E5"> symbolic each of the output</font>

630
00:26:41,460 --> 00:26:44,960
<font color="#E5E5E5">states that we get out of</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> symbolic</font>

631
00:26:43,140 --> 00:26:47,430
transaction can<font color="#E5E5E5"> be classified into</font>

632
00:26:44,960 --> 00:26:49,650
basically we call them alive and

633
00:26:47,430 --> 00:26:51,300
reverted<font color="#CCCCCC"> States and so if the contract</font>

634
00:26:49,650 --> 00:26:54,060
encountered an<font color="#E5E5E5"> error and reverted that's</font>

635
00:26:51,300 --> 00:26:56,399
that's obviously a reverted<font color="#E5E5E5"> state but if</font>

636
00:26:54,060 --> 00:26:58,889
the contract is kind of executed cleanly

637
00:26:56,400 --> 00:27:01,110
<font color="#E5E5E5">and got to one of the valid terminating</font>

638
00:26:58,890 --> 00:27:03,120
instructions and then we just stop and

639
00:27:01,110 --> 00:27:05,040
<font color="#E5E5E5">return instructions we call them alive</font>

640
00:27:03,120 --> 00:27:07,320
<font color="#CCCCCC">states and these</font><font color="#E5E5E5"> are candidates for</font>

641
00:27:05,040 --> 00:27:09,290
sending further<font color="#E5E5E5"> symbolic transactions to</font>

642
00:27:07,320 --> 00:27:13,169
further<font color="#E5E5E5"> explore the state space of the</font>

643
00:27:09,290 --> 00:27:15,590
<font color="#E5E5E5">contracts</font><font color="#CCCCCC"> and so here's just</font><font color="#E5E5E5"> a couple</font>

644
00:27:13,170 --> 00:27:18,030
applications<font color="#CCCCCC"> that we've been</font><font color="#E5E5E5"> exploring</font>

645
00:27:15,590 --> 00:27:19,110
<font color="#CCCCCC">etherion about execution</font><font color="#E5E5E5"> so for one</font>

646
00:27:18,030 --> 00:27:21,899
<font color="#CCCCCC">thing we can automatically check</font>

647
00:27:19,110 --> 00:27:24,719
assertions and the contracts this<font color="#E5E5E5"> is</font>

648
00:27:21,900 --> 00:27:27,000
because the way assertions just work in

649
00:27:24,720 --> 00:27:29,850
<font color="#E5E5E5">sylheti is are compiled as as branches</font>

650
00:27:27,000 --> 00:27:31,680
to invalid instructions<font color="#E5E5E5"> not quite sure</font>

651
00:27:29,850 --> 00:27:33,719
<font color="#E5E5E5">why</font><font color="#CCCCCC"> it's an invalid instruction</font><font color="#E5E5E5"> these</font>

652
00:27:31,680 --> 00:27:35,880
are handled by interpreters as the same

653
00:27:33,720 --> 00:27:37,950
as reverts but because in some<font color="#E5E5E5"> both</font>

654
00:27:35,880 --> 00:27:40,260
symbolic<font color="#CCCCCC"> execution we try to explore all</font>

655
00:27:37,950 --> 00:27:43,140
states if<font color="#E5E5E5"> we can find a state that gets</font>

656
00:27:40,260 --> 00:27:45,120
us to<font color="#CCCCCC"> a river</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we've</font><font color="#E5E5E5"> found a way</font><font color="#CCCCCC"> to</font>

657
00:27:43,140 --> 00:27:46,590
we're<font color="#E5E5E5"> gonna fail and so we we get this</font>

658
00:27:45,120 --> 00:27:49,350
<font color="#E5E5E5">checking automatically</font><font color="#CCCCCC"> that's because</font>

659
00:27:46,590 --> 00:27:53,189
the analysis will try to<font color="#E5E5E5"> fully enumerate</font>

660
00:27:49,350 --> 00:27:56,520
the<font color="#CCCCCC"> states</font><font color="#E5E5E5"> function discovery</font><font color="#CCCCCC"> is another</font>

661
00:27:53,190 --> 00:27:59,070
really<font color="#E5E5E5"> good application and so if you</font>

662
00:27:56,520 --> 00:28:00,660
have experience with traditional binary

663
00:27:59,070 --> 00:28:03,870
analysis you know how hard<font color="#E5E5E5"> it is to</font>

664
00:28:00,660 --> 00:28:05,610
<font color="#CCCCCC">actually extract functions from</font><font color="#E5E5E5"> I got a</font>

665
00:28:03,870 --> 00:28:08,520
<font color="#CCCCCC">static a compiled in excel binary it's</font>

666
00:28:05,610 --> 00:28:10,199
not trivial<font color="#E5E5E5"> to find the functions</font><font color="#CCCCCC"> things</font>

667
00:28:08,520 --> 00:28:11,760
<font color="#CCCCCC">a little bit easier for aetherium</font>

668
00:28:10,200 --> 00:28:16,020
because of the dispatcher stuff and so

669
00:28:11,760 --> 00:28:18,120
<font color="#E5E5E5">remember that if</font><font color="#CCCCCC"> we simply execute the</font>

670
00:28:16,020 --> 00:28:21,780
<font color="#E5E5E5">dispatch stuff</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> find all paths</font>

671
00:28:18,120 --> 00:28:23,189
<font color="#E5E5E5">and luckily for us all paths through the</font>

672
00:28:21,780 --> 00:28:25,799
dispatch double lead to the functions

673
00:28:23,190 --> 00:28:27,870
and<font color="#E5E5E5"> so simply symbolically executing the</font>

674
00:28:25,799 --> 00:28:30,000
dispatch stub will automatically recover

675
00:28:27,870 --> 00:28:30,870
<font color="#E5E5E5">all of the functions at contract and</font>

676
00:28:30,000 --> 00:28:33,830
<font color="#E5E5E5">this is actually very straightforward</font>

677
00:28:30,870 --> 00:28:36,418
<font color="#CCCCCC">and</font><font color="#E5E5E5"> a very nice use of</font><font color="#CCCCCC"> this technique</font>

678
00:28:33,830 --> 00:28:39,330
so now let's<font color="#E5E5E5"> walk through an example of</font>

679
00:28:36,419 --> 00:28:41,309
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> generating transactions that</font>

680
00:28:39,330 --> 00:28:44,909
will drive a contract into a certain

681
00:28:41,309 --> 00:28:47,340
<font color="#CCCCCC">state so this is an example</font><font color="#E5E5E5"> smart</font>

682
00:28:44,910 --> 00:28:50,520
<font color="#CCCCCC">contract</font><font color="#E5E5E5"> written</font><font color="#CCCCCC"> in solidity</font><font color="#E5E5E5"> and it has</font>

683
00:28:47,340 --> 00:28:53,010
some buggy code and so at the bottom

684
00:28:50,520 --> 00:28:55,400
<font color="#E5E5E5">guarded by this kind</font><font color="#CCCCCC"> of if if statement</font>

685
00:28:53,010 --> 00:28:57,929
there is<font color="#E5E5E5"> this possible</font><font color="#CCCCCC"> integer overflow</font>

686
00:28:55,400 --> 00:28:59,730
<font color="#CCCCCC">however in order</font><font color="#E5E5E5"> to get</font><font color="#CCCCCC"> to that point</font>

687
00:28:57,929 --> 00:29:01,740
<font color="#CCCCCC">you first</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to kind of prime the</font>

688
00:28:59,730 --> 00:29:03,900
contracts<font color="#E5E5E5"> and get it</font><font color="#CCCCCC"> into a state and</font>

689
00:29:01,740 --> 00:29:06,299
<font color="#E5E5E5">exploitable</font><font color="#CCCCCC"> State and so it actually</font>

690
00:29:03,900 --> 00:29:10,380
requires<font color="#E5E5E5"> two transactions to reach this</font>

691
00:29:06,299 --> 00:29:12,650
<font color="#E5E5E5">overflow and so begins that's still fine</font>

692
00:29:10,380 --> 00:29:16,320
<font color="#E5E5E5">using our similar execution we can still</font>

693
00:29:12,650 --> 00:29:18,330
generate transaction sequences<font color="#E5E5E5"> for</font>

694
00:29:16,320 --> 00:29:20,549
arbitrary numbers of transactions<font color="#E5E5E5"> and so</font>

695
00:29:18,330 --> 00:29:22,168
<font color="#E5E5E5">here's a visualization of what as</font>

696
00:29:20,549 --> 00:29:25,200
actually going to<font color="#E5E5E5"> happen if we try to</font>

697
00:29:22,169 --> 00:29:27,600
symbolically execute this program<font color="#E5E5E5"> so on</font>

698
00:29:25,200 --> 00:29:30,660
the Left we<font color="#CCCCCC"> have our initial starting</font>

699
00:29:27,600 --> 00:29:34,889
contract state and<font color="#E5E5E5"> we'll submit one</font>

700
00:29:30,660 --> 00:29:37,559
symbolic transaction<font color="#CCCCCC"> out of this we'll</font>

701
00:29:34,890 --> 00:29:40,770
get<font color="#E5E5E5"> two states</font><font color="#CCCCCC"> so one of</font><font color="#E5E5E5"> the states will</font>

702
00:29:37,559 --> 00:29:43,770
be<font color="#E5E5E5"> a revert state this will be because</font>

703
00:29:40,770 --> 00:29:45,480
<font color="#E5E5E5">the first four bytes did not match the</font>

704
00:29:43,770 --> 00:29:48,750
<font color="#E5E5E5">function identifier for the function and</font>

705
00:29:45,480 --> 00:29:50,340
<font color="#E5E5E5">so</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> I'll</font><font color="#CCCCCC"> revert</font><font color="#E5E5E5"> and so more</font>

706
00:29:48,750 --> 00:29:52,679
interestingly in the state on the top

707
00:29:50,340 --> 00:29:54,870
this will be the state where<font color="#E5E5E5"> we discover</font>

708
00:29:52,679 --> 00:29:56,820
where the<font color="#E5E5E5"> function is in the contracts</font>

709
00:29:54,870 --> 00:29:58,709
<font color="#E5E5E5">and execute it once</font>

710
00:29:56,820 --> 00:30:02,100
so this is<font color="#E5E5E5"> going to prime the contracts</font>

711
00:29:58,710 --> 00:30:03,900
and<font color="#E5E5E5"> get it into the</font><font color="#CCCCCC"> exploitable state at</font>

712
00:30:02,100 --> 00:30:06,449
this<font color="#E5E5E5"> point we have</font><font color="#CCCCCC"> won a live state so</font>

713
00:30:03,900 --> 00:30:09,870
we can go ahead<font color="#E5E5E5"> and submit one Morrison</font>

714
00:30:06,450 --> 00:30:12,540
<font color="#CCCCCC">blog transaction from this we'll get</font><font color="#E5E5E5"> two</font>

715
00:30:09,870 --> 00:30:14,429
more<font color="#E5E5E5"> states and one of these with</font><font color="#CCCCCC"> the</font>

716
00:30:12,540 --> 00:30:16,050
<font color="#CCCCCC">open flow if we flip back to</font><font color="#E5E5E5"> the code we</font>

717
00:30:14,430 --> 00:30:18,030
can see<font color="#E5E5E5"> that there's this check if the</font>

718
00:30:16,050 --> 00:30:20,419
<font color="#E5E5E5">input parameter is less than 42</font><font color="#CCCCCC"> it's</font>

719
00:30:18,030 --> 00:30:22,830
safe<font color="#CCCCCC"> otherwise reaches the buggy code</font>

720
00:30:20,420 --> 00:30:25,230
<font color="#E5E5E5">and so those are</font><font color="#CCCCCC"> the two paths</font><font color="#E5E5E5"> that will</font>

721
00:30:22,830 --> 00:30:26,790
find later<font color="#E5E5E5"> on if we dig into this a</font>

722
00:30:25,230 --> 00:30:28,260
little<font color="#E5E5E5"> more</font><font color="#CCCCCC"> deeply we</font><font color="#E5E5E5"> can look into</font>

723
00:30:26,790 --> 00:30:30,320
exactly<font color="#E5E5E5"> what's going on with the</font>

724
00:30:28,260 --> 00:30:32,640
constraints and so for the<font color="#CCCCCC"> Reavers state</font>

725
00:30:30,320 --> 00:30:34,710
there's two sim block inputs is just the

726
00:30:32,640 --> 00:30:36,930
<font color="#E5E5E5">value in data and the only constraint is</font>

727
00:30:34,710 --> 00:30:39,510
that<font color="#CCCCCC"> the first four bytes cannot equal</font>

728
00:30:36,930 --> 00:30:41,700
<font color="#CCCCCC">Wheatley and</font><font color="#E5E5E5"> so let's pretend that the</font>

729
00:30:39,510 --> 00:30:44,430
function<font color="#CCCCCC"> n defier others function is hex</font>

730
00:30:41,700 --> 00:30:47,400
<font color="#CCCCCC">Wheatley</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so the only constraint is</font>

731
00:30:44,430 --> 00:30:49,740
<font color="#CCCCCC">that this is not the case for the safe</font>

732
00:30:47,400 --> 00:30:52,020
path one transaction later<font color="#CCCCCC"> it's very</font>

733
00:30:49,740 --> 00:30:53,910
similar<font color="#CCCCCC"> so the data must be constrained</font>

734
00:30:52,020 --> 00:30:56,520
the first four bytes must be constrained

735
00:30:53,910 --> 00:30:57,990
to<font color="#E5E5E5"> hex elite</font><font color="#CCCCCC"> leads</font><font color="#E5E5E5"> for both those</font>

736
00:30:56,520 --> 00:31:00,180
transactions<font color="#E5E5E5"> in order to execute the</font>

737
00:30:57,990 --> 00:31:01,170
<font color="#CCCCCC">function for the second one</font><font color="#E5E5E5"> the argument</font>

738
00:31:00,180 --> 00:31:03,390
actually matters and so<font color="#CCCCCC"> we have</font>

739
00:31:01,170 --> 00:31:05,580
constraint that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> first argument must</font>

740
00:31:03,390 --> 00:31:10,500
<font color="#E5E5E5">be less</font><font color="#CCCCCC"> than 42 this is execute that</font>

741
00:31:05,580 --> 00:31:12,750
safe path lastly for the unsafe path we

742
00:31:10,500 --> 00:31:15,060
have almost an include identical

743
00:31:12,750 --> 00:31:16,590
constraints except for the last one<font color="#CCCCCC"> so</font>

744
00:31:15,060 --> 00:31:18,990
remember that<font color="#E5E5E5"> the if statement mandated</font>

745
00:31:16,590 --> 00:31:21,149
that the input variable needed to be

746
00:31:18,990 --> 00:31:23,220
greater than<font color="#CCCCCC"> or</font><font color="#E5E5E5"> equal to</font><font color="#CCCCCC"> 4 you to to</font>

747
00:31:21,150 --> 00:31:24,600
reach the buggy path<font color="#CCCCCC"> and so that's the</font>

748
00:31:23,220 --> 00:31:27,480
<font color="#E5E5E5">constraint we</font><font color="#CCCCCC"> have here</font>

749
00:31:24,600 --> 00:31:28,620
so using these tables of inputs and

750
00:31:27,480 --> 00:31:30,510
<font color="#E5E5E5">constraints you can</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> use a</font>

751
00:31:28,620 --> 00:31:34,110
constraint solver<font color="#E5E5E5"> to actually generate</font>

752
00:31:30,510 --> 00:31:37,440
real transactions and so<font color="#CCCCCC"> basically we</font>

753
00:31:34,110 --> 00:31:39,570
<font color="#E5E5E5">can say</font><font color="#CCCCCC"> is III</font><font color="#E5E5E5"> which is a solver from</font>

754
00:31:37,440 --> 00:31:40,920
Microsoft<font color="#CCCCCC"> given that there's no</font>

755
00:31:39,570 --> 00:31:44,159
<font color="#E5E5E5">constraints on the transaction value</font>

756
00:31:40,920 --> 00:31:45,990
<font color="#E5E5E5">what is an example transaction value I</font>

757
00:31:44,160 --> 00:31:48,300
<font color="#E5E5E5">can use here and it might generate this</font>

758
00:31:45,990 --> 00:31:50,820
<font color="#E5E5E5">random number it's fine because there's</font>

759
00:31:48,300 --> 00:31:52,649
no constraints on<font color="#CCCCCC"> the other hand that</font><font color="#E5E5E5"> is</font>

760
00:31:50,820 --> 00:31:54,149
of course constrained<font color="#E5E5E5"> so anything except</font>

761
00:31:52,650 --> 00:31:56,610
<font color="#E5E5E5">we eat will work here</font>

762
00:31:54,150 --> 00:31:59,880
<font color="#E5E5E5">and so</font><font color="#CCCCCC"> maybe III</font><font color="#E5E5E5"> will say</font><font color="#CCCCCC"> hex Cafe cafe</font>

763
00:31:56,610 --> 00:32:02,250
<font color="#E5E5E5">this way</font><font color="#CCCCCC"> and the same thing</font><font color="#E5E5E5"> kind of</font>

764
00:31:59,880 --> 00:32:04,140
thing same<font color="#E5E5E5"> kind of thing happens for the</font>

765
00:32:02,250 --> 00:32:06,690
for every path<font color="#E5E5E5"> we want to generate an</font>

766
00:32:04,140 --> 00:32:09,990
input for we have our set of constraints

767
00:32:06,690 --> 00:32:11,850
<font color="#E5E5E5">we can use</font><font color="#CCCCCC"> z3 to fill in</font>

768
00:32:09,990 --> 00:32:13,679
the the values of the transactions and

769
00:32:11,850 --> 00:32:15,000
<font color="#E5E5E5">actually generate transactions that</font>

770
00:32:13,679 --> 00:32:18,860
<font color="#E5E5E5">we've used on the blockchain</font><font color="#CCCCCC"> will make</font>

771
00:32:15,000 --> 00:32:18,860
the contract get<font color="#E5E5E5"> into one or more</font><font color="#CCCCCC"> states</font>

772
00:32:20,330 --> 00:32:26,668
so now let's talk a little<font color="#E5E5E5"> bit about</font>

773
00:32:22,669 --> 00:32:31,500
challenges<font color="#CCCCCC"> and so we'll talk</font><font color="#E5E5E5"> about three</font>

774
00:32:26,669 --> 00:32:34,020
<font color="#E5E5E5">main ones here that we encountered</font><font color="#CCCCCC"> so</font>

775
00:32:31,500 --> 00:32:38,100
first state explosion so here's a

776
00:32:34,020 --> 00:32:39,210
snippet<font color="#E5E5E5"> of code</font><font color="#CCCCCC"> taken</font><font color="#E5E5E5"> from the very</font>

777
00:32:38,100 --> 00:32:42,209
testing paper which is<font color="#CCCCCC"> a paper from</font>

778
00:32:39,210 --> 00:32:45,390
<font color="#CCCCCC">Carnegie Mellon</font><font color="#E5E5E5"> Carnegie Mellon pretty</font>

779
00:32:42,210 --> 00:32:47,570
pretty famous<font color="#CCCCCC"> and it basically</font><font color="#E5E5E5"> shows as</font>

780
00:32:45,390 --> 00:32:51,390
an<font color="#E5E5E5"> example of kind</font><font color="#CCCCCC"> of worst-case</font>

781
00:32:47,570 --> 00:32:53,820
<font color="#E5E5E5">scenario first of all execution</font><font color="#CCCCCC"> so in</font>

782
00:32:51,390 --> 00:32:57,539
this code<font color="#E5E5E5"> we have a certain structure as</font>

783
00:32:53,820 --> 00:33:00,720
a loop over<font color="#CCCCCC"> this symbolic buffer of</font>

784
00:32:57,539 --> 00:33:02,250
input bytes<font color="#CCCCCC"> and inside the loop</font><font color="#E5E5E5"> we have</font>

785
00:33:00,720 --> 00:33:04,169
<font color="#E5E5E5">a branch and so for every iteration of</font>

786
00:33:02,250 --> 00:33:07,380
<font color="#E5E5E5">the loop we're checking if it's a B and</font>

787
00:33:04,169 --> 00:33:09,779
<font color="#CCCCCC">bumping</font><font color="#E5E5E5"> some counter and then finally</font>

788
00:33:07,380 --> 00:33:12,919
<font color="#CCCCCC">after the loop we check if the counter</font>

789
00:33:09,779 --> 00:33:15,029
was precisely equal<font color="#E5E5E5"> to</font><font color="#CCCCCC"> 75</font><font color="#E5E5E5"> we hit a bug</font>

790
00:33:12,919 --> 00:33:17,580
<font color="#E5E5E5">so this is really bad</font><font color="#CCCCCC"> for some ball</font>

791
00:33:15,029 --> 00:33:19,830
execution because<font color="#E5E5E5"> every iteration of the</font>

792
00:33:17,580 --> 00:33:21,809
<font color="#CCCCCC">loop is going to double the number of</font>

793
00:33:19,830 --> 00:33:25,289
states that<font color="#CCCCCC"> are currently being</font><font color="#E5E5E5"> explored</font>

794
00:33:21,809 --> 00:33:27,330
<font color="#E5E5E5">and</font><font color="#CCCCCC"> eventually it after the loop</font>

795
00:33:25,289 --> 00:33:29,429
executes it will have produced<font color="#E5E5E5"> two to</font>

796
00:33:27,330 --> 00:33:31,980
the<font color="#E5E5E5"> 100 states that need to be explored</font>

797
00:33:29,429 --> 00:33:35,640
<font color="#E5E5E5">and so so it's very</font><font color="#CCCCCC"> difficult to pick</font>

798
00:33:31,980 --> 00:33:38,490
<font color="#E5E5E5">out this one state the word counter is</font>

799
00:33:35,640 --> 00:33:40,710
75<font color="#CCCCCC"> and hit the bug and</font><font color="#E5E5E5"> choose that out</font>

800
00:33:38,490 --> 00:33:42,210
of all of<font color="#E5E5E5"> those</font><font color="#CCCCCC"> two the 100 states and</font>

801
00:33:40,710 --> 00:33:46,350
so this is this<font color="#E5E5E5"> is pretty bad first of</font>

802
00:33:42,210 --> 00:33:48,539
all execution<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so when we were first</font>

803
00:33:46,350 --> 00:33:50,340
looking at<font color="#E5E5E5"> this so we knew that symbolic</font>

804
00:33:48,539 --> 00:33:51,960
execution really struggles the scale<font color="#E5E5E5"> for</font>

805
00:33:50,340 --> 00:33:54,600
large programs because you inevitably

806
00:33:51,960 --> 00:33:56,669
inevitably hit a massive numbers of

807
00:33:54,600 --> 00:33:58,439
<font color="#E5E5E5">states but</font><font color="#CCCCCC"> we noticed that small</font>

808
00:33:56,669 --> 00:34:00,990
<font color="#E5E5E5">contexts are usually very</font><font color="#CCCCCC"> small they're</font>

809
00:33:58,440 --> 00:34:02,520
really in the hundreds<font color="#E5E5E5"> of lines of</font>

810
00:34:00,990 --> 00:34:04,020
solidity code or<font color="#CCCCCC"> less and so</font><font color="#E5E5E5"> that was</font>

811
00:34:02,520 --> 00:34:06,799
initially really<font color="#E5E5E5"> promising for us we</font>

812
00:34:04,020 --> 00:34:09,000
thought this<font color="#E5E5E5"> might not be</font><font color="#CCCCCC"> a big deal</font>

813
00:34:06,799 --> 00:34:11,668
<font color="#CCCCCC">then we</font><font color="#E5E5E5"> kind of realized something and</font>

814
00:34:09,000 --> 00:34:14,099
<font color="#E5E5E5">so even though</font><font color="#CCCCCC"> the smart contract</font><font color="#E5E5E5"> itself</font>

815
00:34:11,668 --> 00:34:16,799
is it's less<font color="#CCCCCC"> than</font><font color="#E5E5E5"> 100 lines longer or so</font>

816
00:34:14,099 --> 00:34:19,050
there's always this infinite<font color="#E5E5E5"> implicit</font>

817
00:34:16,800 --> 00:34:22,220
infinite loop around<font color="#E5E5E5"> it for receiving</font>

818
00:34:19,050 --> 00:34:23,659
input and and that<font color="#E5E5E5"> kind of throw</font>

819
00:34:22,219 --> 00:34:25,459
a wrench into<font color="#CCCCCC"> things and so if we make</font>

820
00:34:23,659 --> 00:34:27,740
this kind<font color="#CCCCCC"> of meta program</font><font color="#E5E5E5"> but we're</font>

821
00:34:25,460 --> 00:34:28,849
actually trying to<font color="#E5E5E5"> analyze</font><font color="#CCCCCC"> it's</font>

822
00:34:27,739 --> 00:34:30,379
basically<font color="#E5E5E5"> this infinite loop</font><font color="#CCCCCC"> we're</font>

823
00:34:28,849 --> 00:34:32,570
<font color="#E5E5E5">getting transactions and running the</font>

824
00:34:30,379 --> 00:34:35,629
contract<font color="#CCCCCC"> then it becomes a bit clearer</font>

825
00:34:32,570 --> 00:34:36,950
<font color="#E5E5E5">how we have not avoided this involve</font>

826
00:34:35,629 --> 00:34:39,049
execution problem we still<font color="#CCCCCC"> have this</font>

827
00:34:36,949 --> 00:34:41,569
loop and<font color="#E5E5E5"> we still have this branching</font>

828
00:34:39,050 --> 00:34:43,310
<font color="#CCCCCC">inside the blue based on the input and I</font>

829
00:34:41,570 --> 00:34:45,679
<font color="#CCCCCC">don't know if this looks</font><font color="#E5E5E5"> familiar to</font>

830
00:34:43,310 --> 00:34:49,279
anyone but yeah this causes problems<font color="#CCCCCC"> and</font>

831
00:34:45,679 --> 00:34:51,918
so here's a little<font color="#CCCCCC"> visualization so if</font>

832
00:34:49,280 --> 00:34:54,980
we have a simple<font color="#E5E5E5"> contract with three</font>

833
00:34:51,918 --> 00:34:56,480
functions in<font color="#E5E5E5"> a first transaction</font><font color="#CCCCCC"> we can</font>

834
00:34:54,980 --> 00:34:59,390
<font color="#E5E5E5">we'll get three out the states based on</font>

835
00:34:56,480 --> 00:35:01,990
<font color="#E5E5E5">each function and after each transaction</font>

836
00:34:59,390 --> 00:35:04,460
will kind of start exploding<font color="#CCCCCC"> our</font>

837
00:35:01,990 --> 00:35:06,529
possible state space and so of<font color="#CCCCCC"> course</font>

838
00:35:04,460 --> 00:35:08,420
the caveat here is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it we</font><font color="#E5E5E5"> depends on</font>

839
00:35:06,530 --> 00:35:09,920
<font color="#E5E5E5">exactly</font><font color="#CCCCCC"> what code is being executed by</font>

840
00:35:08,420 --> 00:35:11,990
<font color="#E5E5E5">the contract but in the worst case we</font>

841
00:35:09,920 --> 00:35:14,810
<font color="#CCCCCC">can</font><font color="#E5E5E5"> have these kinds</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> patterns</font><font color="#CCCCCC"> if not</font>

842
00:35:11,990 --> 00:35:16,848
worse and so<font color="#E5E5E5"> some research we're doing</font>

843
00:35:14,810 --> 00:35:18,470
<font color="#CCCCCC">currently is</font><font color="#E5E5E5"> actually exploring ways to</font>

844
00:35:16,849 --> 00:35:19,670
<font color="#E5E5E5">use can colic execution which has been</font>

845
00:35:18,470 --> 00:35:22,160
used very<font color="#E5E5E5"> successfully in the</font><font color="#CCCCCC"> would</font>

846
00:35:19,670 --> 00:35:24,859
<font color="#CCCCCC">occur</font><font color="#E5E5E5"> in the past where you take a seed</font>

847
00:35:22,160 --> 00:35:27,589
trace and use that to help<font color="#CCCCCC"> your analysis</font>

848
00:35:24,859 --> 00:35:30,109
<font color="#CCCCCC">and so using this you can explore deep</font>

849
00:35:27,589 --> 00:35:32,570
paths<font color="#E5E5E5"> close to the seed trace and not be</font>

850
00:35:30,109 --> 00:35:36,348
overwhelmed<font color="#E5E5E5"> by the state explosion that</font>

851
00:35:32,570 --> 00:35:38,450
still occurs<font color="#E5E5E5"> so now we'll talk about a</font>

852
00:35:36,349 --> 00:35:40,220
<font color="#E5E5E5">couple solidity language features that</font>

853
00:35:38,450 --> 00:35:42,649
make it<font color="#CCCCCC"> really hard to have some bulk</font>

854
00:35:40,220 --> 00:35:45,799
execution for<font color="#CCCCCC"> aetherium so one thing is</font>

855
00:35:42,650 --> 00:35:48,680
mappings<font color="#E5E5E5"> so</font><font color="#CCCCCC"> mappings are</font><font color="#E5E5E5"> the native data</font>

856
00:35:45,800 --> 00:35:50,900
type for<font color="#CCCCCC"> heifer hashmaps in</font><font color="#E5E5E5"> the solidity</font>

857
00:35:48,680 --> 00:35:53,779
<font color="#CCCCCC">and</font><font color="#E5E5E5"> this is a very simple contract that</font>

858
00:35:50,900 --> 00:35:56,930
uses<font color="#CCCCCC"> one and so it uses a map to</font><font color="#E5E5E5"> keep</font>

859
00:35:53,780 --> 00:35:59,780
track<font color="#E5E5E5"> of the balances of users and so it</font>

860
00:35:56,930 --> 00:36:02,660
<font color="#E5E5E5">maps from an</font><font color="#CCCCCC"> address type to an integer</font>

861
00:35:59,780 --> 00:36:05,420
<font color="#CCCCCC">and using this update function you can</font>

862
00:36:02,660 --> 00:36:11,000
actually call and update<font color="#E5E5E5"> your own</font>

863
00:36:05,420 --> 00:36:11,990
<font color="#E5E5E5">balance and the contracts and so the</font>

864
00:36:11,000 --> 00:36:12,920
<font color="#E5E5E5">mapping type is actually very</font>

865
00:36:11,990 --> 00:36:17,060
interesting<font color="#CCCCCC"> it has</font><font color="#E5E5E5"> some pretty</font>

866
00:36:12,920 --> 00:36:18,560
<font color="#CCCCCC">interesting semantics and so the the</font>

867
00:36:17,060 --> 00:36:20,900
semantics are<font color="#E5E5E5"> that all possible</font><font color="#CCCCCC"> keys</font>

868
00:36:18,560 --> 00:36:23,299
already<font color="#E5E5E5"> exist in the mapping</font><font color="#CCCCCC"> and are</font>

869
00:36:20,900 --> 00:36:25,640
<font color="#CCCCCC">zero initialized</font><font color="#E5E5E5"> because of this</font>

870
00:36:23,300 --> 00:36:29,140
mappings<font color="#E5E5E5"> are not iterable because for</font>

871
00:36:25,640 --> 00:36:31,460
<font color="#CCCCCC">example if you key on and unsigned</font><font color="#E5E5E5"> 250</font>

872
00:36:29,140 --> 00:36:33,080
256 bit integer that's an enormous

873
00:36:31,460 --> 00:36:35,500
<font color="#CCCCCC">amount of keys and</font><font color="#E5E5E5"> so it doesn't</font>

874
00:36:33,080 --> 00:36:35,500
<font color="#CCCCCC">actually</font>

875
00:36:35,810 --> 00:36:40,109
<font color="#CCCCCC">so of</font><font color="#E5E5E5"> course it implements</font><font color="#CCCCCC"> that using</font>

876
00:36:37,890 --> 00:36:41,670
kind<font color="#E5E5E5"> of sparse memory allocation</font><font color="#CCCCCC"> and</font>

877
00:36:40,109 --> 00:36:43,259
stuff like that<font color="#E5E5E5"> but the most interesting</font>

878
00:36:41,670 --> 00:36:45,320
<font color="#CCCCCC">part</font><font color="#E5E5E5"> of how</font><font color="#CCCCCC"> mappings work is that</font>

879
00:36:43,260 --> 00:36:48,270
<font color="#E5E5E5">there's this direct mapping</font>

880
00:36:45,320 --> 00:36:52,680
implementation or if you want to<font color="#E5E5E5"> store</font>

881
00:36:48,270 --> 00:36:54,119
or look up an entry<font color="#E5E5E5"> in a mapping you do</font>

882
00:36:52,680 --> 00:36:56,310
something<font color="#E5E5E5"> like taking the hash of the</font>

883
00:36:54,119 --> 00:37:01,470
<font color="#CCCCCC">key and using</font><font color="#E5E5E5"> that as the literal</font>

884
00:36:56,310 --> 00:37:04,500
address and storage of of where you want

885
00:37:01,470 --> 00:37:06,270
to store the data<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> we have this</font>

886
00:37:04,500 --> 00:37:09,480
really<font color="#CCCCCC"> interesting pattern</font><font color="#E5E5E5"> where we have</font>

887
00:37:06,270 --> 00:37:10,800
true<font color="#E5E5E5"> constant time access for four</font>

888
00:37:09,480 --> 00:37:12,810
members<font color="#CCCCCC"> of our hash table because</font>

889
00:37:10,800 --> 00:37:15,300
there's<font color="#E5E5E5"> there's no buckets everything is</font>

890
00:37:12,810 --> 00:37:17,250
direct mapped<font color="#E5E5E5"> into the echo space and we</font>

891
00:37:15,300 --> 00:37:20,369
can<font color="#E5E5E5"> do that because the outer space is</font>

892
00:37:17,250 --> 00:37:22,020
<font color="#CCCCCC">nearly infinite howie's virtually and so</font>

893
00:37:20,369 --> 00:37:24,660
this presents<font color="#E5E5E5"> us with some</font><font color="#CCCCCC"> challenges</font>

894
00:37:22,020 --> 00:37:26,580
there because so first of all hash

895
00:37:24,660 --> 00:37:29,129
accessing mappings<font color="#E5E5E5"> with some</font><font color="#CCCCCC"> ball keys</font>

896
00:37:26,580 --> 00:37:31,560
is pretty common<font color="#E5E5E5"> but</font><font color="#CCCCCC"> then we</font><font color="#E5E5E5"> lead that</font>

897
00:37:29,130 --> 00:37:35,430
leads to hashing symbolic values and

898
00:37:31,560 --> 00:37:38,100
that is a hard<font color="#CCCCCC"> situation furthermore we</font>

899
00:37:35,430 --> 00:37:39,899
have more symbolic<font color="#E5E5E5"> storage</font><font color="#CCCCCC"> indexes being</font>

900
00:37:38,100 --> 00:37:42,600
used which complicates things

901
00:37:39,900 --> 00:37:44,550
but basically<font color="#E5E5E5"> computing the hash of</font><font color="#CCCCCC"> a</font>

902
00:37:42,600 --> 00:37:46,290
symbolic value<font color="#CCCCCC"> produces a symbolic</font>

903
00:37:44,550 --> 00:37:49,170
expression<font color="#E5E5E5"> that is intentionally</font>

904
00:37:46,290 --> 00:37:51,000
impossible to solve<font color="#CCCCCC"> and so this we</font>

905
00:37:49,170 --> 00:37:52,890
throws a wrench into things<font color="#CCCCCC"> as an</font>

906
00:37:51,000 --> 00:37:55,290
example<font color="#CCCCCC"> just look at</font><font color="#E5E5E5"> this and so</font><font color="#CCCCCC"> he</font>

907
00:37:52,890 --> 00:37:56,430
tried<font color="#E5E5E5"> to hash a symbolic variable and</font>

908
00:37:55,290 --> 00:37:59,910
let's say we<font color="#E5E5E5"> want to constrain</font><font color="#CCCCCC"> it to</font>

909
00:37:56,430 --> 00:38:01,560
<font color="#E5E5E5">this random hex value if we could</font>

910
00:37:59,910 --> 00:38:03,990
provide this equation to a constraint

911
00:38:01,560 --> 00:38:05,670
<font color="#CCCCCC">solver and have it solve it for</font><font color="#E5E5E5"> us we</font>

912
00:38:03,990 --> 00:38:08,339
would<font color="#CCCCCC"> be effectively</font><font color="#E5E5E5"> reversing the hash</font>

913
00:38:05,670 --> 00:38:10,170
<font color="#E5E5E5">and that is explicitly a property</font><font color="#CCCCCC"> that</font>

914
00:38:08,340 --> 00:38:12,390
<font color="#CCCCCC">isn't possible with cryptographic hash</font>

915
00:38:10,170 --> 00:38:14,250
functions<font color="#E5E5E5"> so so this is pretty</font>

916
00:38:12,390 --> 00:38:15,960
problematic<font color="#CCCCCC"> because if we just</font><font color="#E5E5E5"> straight</font>

917
00:38:14,250 --> 00:38:17,760
<font color="#E5E5E5">forward actually symbolically execute</font>

918
00:38:15,960 --> 00:38:19,170
through hashes<font color="#E5E5E5"> we will not be able to</font>

919
00:38:17,760 --> 00:38:21,630
solve<font color="#E5E5E5"> for constraints in any of the</font>

920
00:38:19,170 --> 00:38:24,300
later<font color="#CCCCCC"> States and so this is a big</font>

921
00:38:21,630 --> 00:38:26,160
problem<font color="#E5E5E5"> and so we have kind of a</font>

922
00:38:24,300 --> 00:38:27,720
workaround<font color="#CCCCCC"> a solution</font><font color="#E5E5E5"> that we've been</font>

923
00:38:26,160 --> 00:38:30,049
<font color="#E5E5E5">experimenting</font><font color="#CCCCCC"> with for our</font>

924
00:38:27,720 --> 00:38:33,810
implementation and it's based<font color="#E5E5E5"> around</font>

925
00:38:30,050 --> 00:38:36,090
<font color="#CCCCCC">conch</font><font color="#E5E5E5"> realization and so as we analyze</font>

926
00:38:33,810 --> 00:38:39,930
and<font color="#E5E5E5"> execute through a program we'll see</font>

927
00:38:36,090 --> 00:38:42,300
some concrete<font color="#CCCCCC"> hashes being computed so</font>

928
00:38:39,930 --> 00:38:45,210
maybe<font color="#CCCCCC"> user</font><font color="#E5E5E5"> a is hashed and</font><font color="#CCCCCC"> using a</font>

929
00:38:42,300 --> 00:38:46,619
mapping<font color="#CCCCCC"> maybe user B is also</font><font color="#E5E5E5"> hashed and</font>

930
00:38:45,210 --> 00:38:49,140
used

931
00:38:46,619 --> 00:38:51,509
and then when it comes<font color="#CCCCCC"> time to</font><font color="#E5E5E5"> compute a</font>

932
00:38:49,140 --> 00:38:53,219
symbolic<font color="#CCCCCC"> hash rather than really</font><font color="#E5E5E5"> just</font>

933
00:38:51,509 --> 00:38:55,319
<font color="#E5E5E5">straightforward</font><font color="#CCCCCC"> computing</font><font color="#E5E5E5"> the hash and</font>

934
00:38:53,219 --> 00:38:57,930
and being<font color="#E5E5E5"> unable</font><font color="#CCCCCC"> to solve constraints</font>

935
00:38:55,319 --> 00:38:59,670
<font color="#E5E5E5">from that point on we constrain it based</font>

936
00:38:57,930 --> 00:39:04,469
<font color="#E5E5E5">on what we know and so the idea is that</font>

937
00:38:59,670 --> 00:39:06,869
if if a dictionary map<font color="#E5E5E5"> was or if a hash</font>

938
00:39:04,469 --> 00:39:09,329
map was looked up in a based on<font color="#E5E5E5"> a</font>

939
00:39:06,869 --> 00:39:12,239
certain<font color="#E5E5E5"> key previously</font><font color="#CCCCCC"> changes are later</font>

940
00:39:09,329 --> 00:39:14,759
on<font color="#CCCCCC"> it will it</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> be interesting to use</font>

941
00:39:12,239 --> 00:39:17,759
that for<font color="#CCCCCC"> most multi</font><font color="#E5E5E5"> section perspective</font>

942
00:39:14,759 --> 00:39:20,719
later on<font color="#CCCCCC"> and so we replace the complex</font>

943
00:39:17,759 --> 00:39:23,369
<font color="#E5E5E5">hash expression with this kind of</font>

944
00:39:20,719 --> 00:39:25,769
alternate expression<font color="#E5E5E5"> objects basically</font>

945
00:39:23,369 --> 00:39:28,289
<font color="#CCCCCC">that just represents</font><font color="#E5E5E5"> everything we know</font>

946
00:39:25,769 --> 00:39:30,718
<font color="#CCCCCC">about all the concrete keys and so it's</font>

947
00:39:28,289 --> 00:39:34,319
basically<font color="#CCCCCC"> just</font><font color="#E5E5E5"> uses SMT if-then-else</font>

948
00:39:30,719 --> 00:39:38,069
expressions<font color="#E5E5E5"> so using this strategy we</font>

949
00:39:34,319 --> 00:39:39,779
<font color="#CCCCCC">can avoid a case where we can't solve</font>

950
00:39:38,069 --> 00:39:41,759
our constraints<font color="#E5E5E5"> anymore and it allow</font><font color="#CCCCCC"> us</font>

951
00:39:39,779 --> 00:39:43,799
allow our analysis<font color="#E5E5E5"> to continue with</font>

952
00:39:41,759 --> 00:39:49,019
<font color="#CCCCCC">sobel solvable constraints and so we can</font>

953
00:39:43,799 --> 00:39:50,249
continue<font color="#E5E5E5"> and fork</font><font color="#CCCCCC"> States</font><font color="#E5E5E5"> in this way</font><font color="#CCCCCC"> one</font>

954
00:39:49,019 --> 00:39:52,049
of<font color="#CCCCCC"> the other challenges</font><font color="#E5E5E5"> we've been</font>

955
00:39:50,249 --> 00:39:54,058
<font color="#E5E5E5">encountering</font><font color="#CCCCCC"> is trying to have</font><font color="#E5E5E5"> our</font>

956
00:39:52,049 --> 00:39:56,759
analysis<font color="#CCCCCC"> to support all types of</font>

957
00:39:54,059 --> 00:39:59,309
solidity<font color="#E5E5E5"> types basically and so</font><font color="#CCCCCC"> we've</font>

958
00:39:56,759 --> 00:40:01,799
<font color="#E5E5E5">found some challenges with supporting</font>

959
00:39:59,309 --> 00:40:04,619
dynamic arguments so dynamic arguments

960
00:40:01,799 --> 00:40:07,079
are variable-length arrays essentially

961
00:40:04,619 --> 00:40:10,529
and<font color="#E5E5E5"> so functions can receive variable</font>

962
00:40:07,079 --> 00:40:12,390
length data<font color="#CCCCCC"> past event however like we</font>

963
00:40:10,529 --> 00:40:13,829
<font color="#E5E5E5">mentioned before this makes the</font>

964
00:40:12,390 --> 00:40:17,460
transaction<font color="#CCCCCC"> data become a much more</font>

965
00:40:13,829 --> 00:40:20,339
complex format with lots of offsets and

966
00:40:17,460 --> 00:40:23,519
and an element<font color="#E5E5E5"> and n elements fields</font>

967
00:40:20,339 --> 00:40:26,640
which will<font color="#E5E5E5"> lead to symbolic indexing and</font>

968
00:40:23,519 --> 00:40:28,499
then copies<font color="#E5E5E5"> later</font><font color="#CCCCCC"> on because if if this</font>

969
00:40:26,640 --> 00:40:31,618
field<font color="#CCCCCC"> that contains the offset to the</font>

970
00:40:28,499 --> 00:40:35,879
actual<font color="#E5E5E5"> data is symbolic will inevitably</font>

971
00:40:31,619 --> 00:40:37,499
get an instruction<font color="#CCCCCC"> that tries to</font><font color="#E5E5E5"> load</font>

972
00:40:35,880 --> 00:40:39,719
<font color="#E5E5E5">from there and I will produce this</font><font color="#CCCCCC"> in</font>

973
00:40:37,499 --> 00:40:42,959
bulk index which as<font color="#E5E5E5"> mentioned earlier</font><font color="#CCCCCC"> is</font>

974
00:40:39,719 --> 00:40:44,400
a pretty tough problem<font color="#CCCCCC"> to solve and so</font>

975
00:40:42,960 --> 00:40:48,180
the workaround we've been using<font color="#CCCCCC"> for this</font>

976
00:40:44,400 --> 00:40:49,769
is to<font color="#E5E5E5"> really aggressively concretize the</font>

977
00:40:48,180 --> 00:40:53,308
transaction<font color="#E5E5E5"> data based on what we know</font>

978
00:40:49,769 --> 00:40:56,308
<font color="#E5E5E5">and so for example</font><font color="#CCCCCC"> for this function</font>

979
00:40:53,309 --> 00:40:58,180
<font color="#CCCCCC">that takes two dynamic length arrays</font><font color="#E5E5E5"> a</font>

980
00:40:56,309 --> 00:41:00,490
and<font color="#E5E5E5"> B</font>

981
00:40:58,180 --> 00:41:03,730
biggest on<font color="#E5E5E5"> since what since we were</font>

982
00:41:00,490 --> 00:41:05,020
passing<font color="#E5E5E5"> it a concrete length buffer even</font>

983
00:41:03,730 --> 00:41:06,730
though it has<font color="#CCCCCC"> symbolic</font><font color="#E5E5E5"> elements and it</font>

984
00:41:05,020 --> 00:41:08,920
we<font color="#E5E5E5"> still know how long the buffer is and</font>

985
00:41:06,730 --> 00:41:10,900
so using this we<font color="#CCCCCC"> can kind of compute a</font>

986
00:41:08,920 --> 00:41:12,670
fair distribution of<font color="#CCCCCC"> space for each</font>

987
00:41:10,900 --> 00:41:15,490
element<font color="#E5E5E5"> and so we we take the total</font>

988
00:41:12,670 --> 00:41:16,960
<font color="#E5E5E5">space and subtract all the space for the</font>

989
00:41:15,490 --> 00:41:19,029
<font color="#E5E5E5">metadata for each</font><font color="#CCCCCC"> argument like</font><font color="#E5E5E5"> the</font>

990
00:41:16,960 --> 00:41:22,650
<font color="#CCCCCC">offset fields and n elements fields and</font>

991
00:41:19,030 --> 00:41:24,580
divide that<font color="#E5E5E5"> we can or I've arrived to</font>

992
00:41:22,650 --> 00:41:26,500
the conclusion that there's actually

993
00:41:24,580 --> 00:41:28,600
<font color="#CCCCCC">only until 32 bytes of space for</font><font color="#E5E5E5"> each</font>

994
00:41:26,500 --> 00:41:30,640
argument<font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> about and that's</font>

995
00:41:28,600 --> 00:41:32,350
enough space for<font color="#E5E5E5"> one</font><font color="#CCCCCC"> element in each and</font>

996
00:41:30,640 --> 00:41:35,500
so we can effectively concretize

997
00:41:32,350 --> 00:41:38,410
everything else based on<font color="#E5E5E5"> that and so</font>

998
00:41:35,500 --> 00:41:39,610
using this we can we can<font color="#CCCCCC"> have countries</font>

999
00:41:38,410 --> 00:41:42,940
<font color="#CCCCCC">that are</font><font color="#E5E5E5"> that are much more</font><font color="#CCCCCC"> easily</font>

1000
00:41:39,610 --> 00:41:45,100
solvable<font color="#E5E5E5"> and have more performant</font>

1001
00:41:42,940 --> 00:41:47,380
analyses<font color="#CCCCCC"> of course the main limitation</font>

1002
00:41:45,100 --> 00:41:49,630
of<font color="#E5E5E5"> this approach is that the state space</font>

1003
00:41:47,380 --> 00:41:51,670
gets artificially limited and so it's

1004
00:41:49,630 --> 00:41:54,850
just<font color="#E5E5E5"> based on however much data we chose</font>

1005
00:41:51,670 --> 00:41:57,040
to provide<font color="#E5E5E5"> in our execution and so if we</font>

1006
00:41:54,850 --> 00:41:58,960
do this we're going<font color="#E5E5E5"> to miss branches for</font>

1007
00:41:57,040 --> 00:42:00,490
example that require the length of a to

1008
00:41:58,960 --> 00:42:03,720
be<font color="#E5E5E5"> greater than one because it</font>

1009
00:42:00,490 --> 00:42:07,569
concretize<font color="#CCCCCC"> did but this wasn't working</font>

1010
00:42:03,720 --> 00:42:08,529
<font color="#CCCCCC">somewhat well in</font><font color="#E5E5E5"> practice so far and</font>

1011
00:42:07,570 --> 00:42:10,300
<font color="#E5E5E5">there's some other miscellaneous</font>

1012
00:42:08,530 --> 00:42:11,620
challenges that<font color="#E5E5E5"> I won't get into today</font>

1013
00:42:10,300 --> 00:42:13,240
are that<font color="#E5E5E5"> in order to really have</font><font color="#CCCCCC"> a</font>

1014
00:42:11,620 --> 00:42:15,810
complete symbolic environment model

1015
00:42:13,240 --> 00:42:19,330
<font color="#CCCCCC">personal execution you need to support</font>

1016
00:42:15,810 --> 00:42:21,279
complex<font color="#E5E5E5"> inter contract calls and in a</font>

1017
00:42:19,330 --> 00:42:23,200
very<font color="#E5E5E5"> full environment model you can't</font>

1018
00:42:21,280 --> 00:42:25,570
you can't just model<font color="#E5E5E5"> the environment for</font>

1019
00:42:23,200 --> 00:42:26,830
execution<font color="#E5E5E5"> of one contract because it's</font>

1020
00:42:25,570 --> 00:42:28,780
<font color="#CCCCCC">often the case in real contracts they</font>

1021
00:42:26,830 --> 00:42:30,279
<font color="#CCCCCC">they talk to</font><font color="#E5E5E5"> many others</font><font color="#CCCCCC"> and so you need</font>

1022
00:42:28,780 --> 00:42:33,250
<font color="#E5E5E5">have a very full</font><font color="#CCCCCC"> and Byrant model</font><font color="#E5E5E5"> and</font>

1023
00:42:30,280 --> 00:42:34,510
lastly<font color="#E5E5E5"> gas and symbolic gas in</font>

1024
00:42:33,250 --> 00:42:37,770
<font color="#CCCCCC">particular is a very interesting</font>

1025
00:42:34,510 --> 00:42:39,900
challenge<font color="#E5E5E5"> that we need</font><font color="#CCCCCC"> to support also</font>

1026
00:42:37,770 --> 00:42:42,250
<font color="#E5E5E5">so now</font><font color="#CCCCCC"> just have a few words on</font><font color="#E5E5E5"> our</font>

1027
00:42:39,900 --> 00:42:43,960
<font color="#E5E5E5">implementation so it's implemented</font>

1028
00:42:42,250 --> 00:42:45,430
<font color="#CCCCCC">within this</font><font color="#E5E5E5"> project called the manticore</font>

1029
00:42:43,960 --> 00:42:48,640
projects which is an<font color="#E5E5E5"> open source</font>

1030
00:42:45,430 --> 00:42:51,040
symbolic execution<font color="#E5E5E5"> tool historically</font>

1031
00:42:48,640 --> 00:42:54,009
it's a<font color="#E5E5E5"> symbolic execution tool for</font>

1032
00:42:51,040 --> 00:42:57,490
regular binaries for x86<font color="#E5E5E5"> and arm and so</font>

1033
00:42:54,010 --> 00:42:58,840
forth<font color="#E5E5E5"> but over the</font><font color="#CCCCCC"> past</font><font color="#E5E5E5"> I would</font><font color="#CCCCCC"> say</font><font color="#E5E5E5"> nine</font>

1034
00:42:57,490 --> 00:43:01,060
months or<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we've</font><font color="#E5E5E5"> added support for</font>

1035
00:42:58,840 --> 00:43:02,800
<font color="#E5E5E5">aetherium to it we've made a little sub</font>

1036
00:43:01,060 --> 00:43:04,540
module let's end on it<font color="#CCCCCC"> in about</font><font color="#E5E5E5"> 4,000</font>

1037
00:43:02,800 --> 00:43:07,210
<font color="#E5E5E5">lines of Python code and using it</font>

1038
00:43:04,540 --> 00:43:08,920
exposes a pretty nice<font color="#E5E5E5"> Python API</font><font color="#CCCCCC"> you can</font>

1039
00:43:07,210 --> 00:43:10,110
do things like launch<font color="#E5E5E5"> symbol</font>

1040
00:43:08,920 --> 00:43:12,090
transactions

1041
00:43:10,110 --> 00:43:13,770
and some of your own<font color="#E5E5E5"> some</font><font color="#CCCCCC"> t-cell</font><font color="#E5E5E5"> for</font>

1042
00:43:12,090 --> 00:43:15,920
queries to ask your own<font color="#E5E5E5"> questions about</font>

1043
00:43:13,770 --> 00:43:18,860
<font color="#CCCCCC">what's possible for the contract to</font><font color="#E5E5E5"> do</font>

1044
00:43:15,920 --> 00:43:22,920
it's available on github<font color="#E5E5E5"> also and and</font>

1045
00:43:18,860 --> 00:43:25,620
from<font color="#E5E5E5"> pi</font><font color="#CCCCCC"> pi</font><font color="#E5E5E5"> and so</font><font color="#CCCCCC"> we've been we've been</font>

1046
00:43:22,920 --> 00:43:27,840
<font color="#E5E5E5">using mentor a lot recently</font><font color="#CCCCCC"> internally I</font>

1047
00:43:25,620 --> 00:43:31,830
try a<font color="#CCCCCC"> little bit's for doing a smart</font>

1048
00:43:27,840 --> 00:43:33,660
contract audits<font color="#E5E5E5"> and so our auditors have</font>

1049
00:43:31,830 --> 00:43:35,490
been<font color="#E5E5E5"> writing quite</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of medical</font>

1050
00:43:33,660 --> 00:43:36,779
scripts recently to test their own

1051
00:43:35,490 --> 00:43:40,109
<font color="#E5E5E5">assumptions about what the</font><font color="#CCCCCC"> contract can</font>

1052
00:43:36,780 --> 00:43:43,350
do and once they narrow in on a kind<font color="#E5E5E5"> of</font>

1053
00:43:40,110 --> 00:43:45,330
<font color="#E5E5E5">a sketchy or part of code that's that's</font>

1054
00:43:43,350 --> 00:43:47,940
worth noticing more<font color="#E5E5E5"> they'll often</font><font color="#CCCCCC"> right</font>

1055
00:43:45,330 --> 00:43:49,500
<font color="#CCCCCC">Manticore scripts</font><font color="#E5E5E5"> to to test that we've</font>

1056
00:43:47,940 --> 00:43:51,540
also deployed it<font color="#E5E5E5"> with in client test</font>

1057
00:43:49,500 --> 00:43:53,340
<font color="#E5E5E5">infrastructure and then this the pattern</font>

1058
00:43:51,540 --> 00:43:55,290
generally looks like this and<font color="#CCCCCC"> so</font><font color="#E5E5E5"> well</font>

1059
00:43:53,340 --> 00:43:57,720
<font color="#E5E5E5">have a set of mentor scripts and that</font>

1060
00:43:55,290 --> 00:43:59,340
that don't<font color="#E5E5E5"> attempt just run on the</font>

1061
00:43:57,720 --> 00:44:01,770
proton<font color="#CCCCCC"> the contract and</font><font color="#E5E5E5"> find all the</font>

1062
00:43:59,340 --> 00:44:04,530
bugs<font color="#CCCCCC"> they're more targeted for checking</font>

1063
00:44:01,770 --> 00:44:06,120
specific<font color="#E5E5E5"> invariants that are important</font>

1064
00:44:04,530 --> 00:44:08,850
<font color="#CCCCCC">for security</font><font color="#E5E5E5"> and so the general pattern</font>

1065
00:44:06,120 --> 00:44:10,440
is to have a script<font color="#CCCCCC"> that initializes the</font>

1066
00:44:08,850 --> 00:44:12,480
state of the contracts and watches a

1067
00:44:10,440 --> 00:44:15,960
fixed number of<font color="#CCCCCC"> sub</font><font color="#E5E5E5"> web transactions and</font>

1068
00:44:12,480 --> 00:44:20,100
then asserts<font color="#E5E5E5"> certain and</font><font color="#CCCCCC"> variants in all</font>

1069
00:44:15,960 --> 00:44:21,540
states that are discovered so now if I

1070
00:44:20,100 --> 00:44:29,009
have<font color="#CCCCCC"> some</font><font color="#E5E5E5"> time I'll just</font><font color="#CCCCCC"> do a few</font><font color="#E5E5E5"> quick</font>

1071
00:44:21,540 --> 00:44:30,600
<font color="#E5E5E5">demos with the manticore tool and so so</font>

1072
00:44:29,010 --> 00:44:33,000
we'll start<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a simple</font><font color="#E5E5E5"> demo of</font>

1073
00:44:30,600 --> 00:44:35,580
running<font color="#CCCCCC"> Manticore on the contract</font><font color="#E5E5E5"> that I</font>

1074
00:44:33,000 --> 00:44:40,010
showed before<font color="#CCCCCC"> it's this smart contracts</font>

1075
00:44:35,580 --> 00:44:43,020
that has the integer overflow path and

1076
00:44:40,010 --> 00:44:47,420
requires two transactions to reach that

1077
00:44:43,020 --> 00:44:49,890
<font color="#E5E5E5">path though and so magic or supports</font>

1078
00:44:47,420 --> 00:44:52,320
<font color="#CCCCCC">medicore supports a really intuitive</font>

1079
00:44:49,890 --> 00:44:53,790
command<font color="#CCCCCC"> line interface and so you can</font>

1080
00:44:52,320 --> 00:44:55,560
really<font color="#CCCCCC"> easily just launched it at</font>

1081
00:44:53,790 --> 00:44:57,930
contracts<font color="#E5E5E5"> and start sending some blog</font>

1082
00:44:55,560 --> 00:45:00,990
transactions and and generating<font color="#CCCCCC"> States</font>

1083
00:44:57,930 --> 00:45:02,399
<font color="#E5E5E5">and so in this case you can see</font><font color="#CCCCCC"> that</font>

1084
00:45:00,990 --> 00:45:06,120
it's Jenna<font color="#E5E5E5"> it's starting sim blog</font>

1085
00:45:02,400 --> 00:45:08,220
transactions started one I'm sorry<font color="#CCCCCC"> did a</font>

1086
00:45:06,120 --> 00:45:11,730
second in the transaction over<font color="#E5E5E5"> here and</font>

1087
00:45:08,220 --> 00:45:14,160
lastly it detected that<font color="#CCCCCC"> 100% code</font>

1088
00:45:11,730 --> 00:45:17,130
coverage was reached and<font color="#E5E5E5"> so it halted</font>

1089
00:45:14,160 --> 00:45:19,140
the analysis<font color="#E5E5E5"> and so we can see if we</font>

1090
00:45:17,130 --> 00:45:21,110
dive into this workspace<font color="#E5E5E5"> directory</font>

1091
00:45:19,140 --> 00:45:24,230
<font color="#E5E5E5">that's produced</font>

1092
00:45:21,110 --> 00:45:26,900
there's a lot of files here<font color="#CCCCCC"> and so for</font>

1093
00:45:24,230 --> 00:45:29,660
each state and<font color="#CCCCCC"> Manticore discovers it</font>

1094
00:45:26,900 --> 00:45:31,790
generates a set of files<font color="#E5E5E5"> corresponding</font>

1095
00:45:29,660 --> 00:45:35,480
with various pieces of<font color="#CCCCCC"> information</font><font color="#E5E5E5"> about</font>

1096
00:45:31,790 --> 00:45:39,110
that<font color="#E5E5E5"> state and so for</font><font color="#CCCCCC"> example it</font>

1097
00:45:35,480 --> 00:45:41,900
generates in this solidity code we have

1098
00:45:39,110 --> 00:45:43,760
these little<font color="#E5E5E5"> log lines that</font><font color="#CCCCCC"> execute</font><font color="#E5E5E5"> when</font>

1099
00:45:41,900 --> 00:45:50,480
the path is reached and<font color="#E5E5E5"> so we can search</font>

1100
00:45:43,760 --> 00:45:55,310
through them<font color="#E5E5E5"> for the overflow path let's</font>

1101
00:45:50,480 --> 00:45:58,760
do that<font color="#E5E5E5"> here and so you can</font><font color="#CCCCCC"> see that in</font>

1102
00:45:55,310 --> 00:46:00,500
the test for test case there that's

1103
00:45:58,760 --> 00:46:02,480
where that's<font color="#CCCCCC"> the path corresponding to</font>

1104
00:46:00,500 --> 00:46:04,760
the overflow<font color="#CCCCCC"> and so if you look at the</font>

1105
00:46:02,480 --> 00:46:06,560
files produced<font color="#E5E5E5"> for test for we have a</font>

1106
00:46:04,760 --> 00:46:09,050
lot we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> the file containing the</font>

1107
00:46:06,560 --> 00:46:12,740
constraints that<font color="#E5E5E5"> require that make that</font>

1108
00:46:09,050 --> 00:46:15,920
state true we have a file containing<font color="#E5E5E5"> the</font>

1109
00:46:12,740 --> 00:46:19,299
runtime code execution that the<font color="#CCCCCC"> transact</font>

1110
00:46:15,920 --> 00:46:21,530
<font color="#E5E5E5">that the contract executed there and</font>

1111
00:46:19,300 --> 00:46:23,840
probably<font color="#CCCCCC"> most interesting we have a file</font>

1112
00:46:21,530 --> 00:46:26,270
that<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> has concrete transaction</font>

1113
00:46:23,840 --> 00:46:29,420
data in it and so remember<font color="#E5E5E5"> every path</font>

1114
00:46:26,270 --> 00:46:32,000
that<font color="#CCCCCC"> Manticore finds it generates a set</font>

1115
00:46:29,420 --> 00:46:36,830
of inputs for and so you can use these

1116
00:46:32,000 --> 00:46:37,910
<font color="#E5E5E5">to concretely get the contracts into a</font>

1117
00:46:36,830 --> 00:46:41,930
certain state that's found in the

1118
00:46:37,910 --> 00:46:43,910
<font color="#E5E5E5">analysis and so and</font><font color="#CCCCCC"> so we can see</font>

1119
00:46:41,930 --> 00:46:46,060
<font color="#E5E5E5">what-what</font><font color="#CCCCCC"> it generated</font><font color="#E5E5E5"> and so the first</font>

1120
00:46:43,910 --> 00:46:49,310
transaction<font color="#E5E5E5"> is the transaction to create</font>

1121
00:46:46,060 --> 00:46:51,410
the contracts on<font color="#E5E5E5"> the blockchain the</font>

1122
00:46:49,310 --> 00:46:54,380
second transaction<font color="#E5E5E5"> is calling the test</font>

1123
00:46:51,410 --> 00:46:57,399
<font color="#E5E5E5">me function with this certain variable</font>

1124
00:46:54,380 --> 00:46:57,400
<font color="#E5E5E5">and if we look at</font><font color="#CCCCCC"> the solidity</font>

1125
00:47:00,420 --> 00:47:06,460
<font color="#E5E5E5">who at the solidity the fur that</font><font color="#CCCCCC"> input</font>

1126
00:47:03,760 --> 00:47:08,380
is<font color="#E5E5E5"> not used for this section that</font><font color="#CCCCCC"> primes</font>

1127
00:47:06,460 --> 00:47:10,810
the contract<font color="#E5E5E5"> so it doesn't matter and so</font>

1128
00:47:08,380 --> 00:47:12,550
this will<font color="#E5E5E5"> work just fine</font><font color="#CCCCCC"> and lastly we</font>

1129
00:47:10,810 --> 00:47:14,980
can see that's calling test me<font color="#E5E5E5"> again</font>

1130
00:47:12,550 --> 00:47:16,630
within this other argument<font color="#E5E5E5"> and in order</font>

1131
00:47:14,980 --> 00:47:18,250
to<font color="#E5E5E5"> reach this code the input just needs</font>

1132
00:47:16,630 --> 00:47:20,740
to be greater<font color="#E5E5E5"> than</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> equal</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> 42 and</font>

1133
00:47:18,250 --> 00:47:22,350
<font color="#CCCCCC">this number</font><font color="#E5E5E5"> looks bigger than 42 and so</font>

1134
00:47:20,740 --> 00:47:24,609
that will<font color="#CCCCCC"> work just</font><font color="#E5E5E5"> fine</font>

1135
00:47:22,350 --> 00:47:26,350
now quickly demo<font color="#E5E5E5"> some of the more</font>

1136
00:47:24,610 --> 00:47:28,240
powerful<font color="#E5E5E5"> features of the</font><font color="#CCCCCC"> manotaur api</font>

1137
00:47:26,350 --> 00:47:32,110
<font color="#E5E5E5">and this is what you</font><font color="#CCCCCC"> really want to use</font>

1138
00:47:28,240 --> 00:47:33,910
for auditing contracts<font color="#E5E5E5"> and so we're</font>

1139
00:47:32,110 --> 00:47:37,090
<font color="#CCCCCC">gonna be analyzing</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> source code of</font>

1140
00:47:33,910 --> 00:47:39,640
this wallet<font color="#CCCCCC"> contract it's pretty</font><font color="#E5E5E5"> simple</font>

1141
00:47:37,090 --> 00:47:41,320
<font color="#E5E5E5">it once you make</font><font color="#CCCCCC"> it it's it sets you as</font>

1142
00:47:39,640 --> 00:47:43,629
the owner<font color="#E5E5E5"> and then you can do things</font>

1143
00:47:41,320 --> 00:47:45,430
like deposit ether into<font color="#E5E5E5"> it and withdraw</font>

1144
00:47:43,630 --> 00:47:47,350
it<font color="#E5E5E5"> at a later time the withdrawal</font>

1145
00:47:45,430 --> 00:47:52,000
function is protected such that only the

1146
00:47:47,350 --> 00:47:53,560
owner can withdraw the<font color="#CCCCCC"> ether</font><font color="#E5E5E5"> and so we</font>

1147
00:47:52,000 --> 00:47:55,780
can we<font color="#CCCCCC"> can test</font><font color="#E5E5E5"> this contract with</font>

1148
00:47:53,560 --> 00:47:57,940
<font color="#CCCCCC">Manticore to see if it's possible</font><font color="#E5E5E5"> to</font>

1149
00:47:55,780 --> 00:48:00,040
withdraw the ether even if you're not

1150
00:47:57,940 --> 00:48:02,170
<font color="#E5E5E5">the owner or something like that so to</font>

1151
00:48:00,040 --> 00:48:04,420
do this we can import<font color="#CCCCCC"> Manticore</font><font color="#E5E5E5"> create</font>

1152
00:48:02,170 --> 00:48:07,570
this initial blockchain state<font color="#E5E5E5"> is</font>

1153
00:48:04,420 --> 00:48:10,060
<font color="#CCCCCC">mandatory vm objects and later on</font><font color="#E5E5E5"> we can</font>

1154
00:48:07,570 --> 00:48:12,640
set up<font color="#E5E5E5"> our custom environment and so our</font>

1155
00:48:10,060 --> 00:48:14,080
environment will have an account<font color="#E5E5E5"> an</font>

1156
00:48:12,640 --> 00:48:16,779
external<font color="#CCCCCC"> account for the creator and</font>

1157
00:48:14,080 --> 00:48:18,240
<font color="#CCCCCC">will also</font><font color="#E5E5E5"> have an account for a</font>

1158
00:48:16,780 --> 00:48:20,830
<font color="#E5E5E5">simulated attacker</font>

1159
00:48:18,240 --> 00:48:24,669
lastly we'll use the solidity create

1160
00:48:20,830 --> 00:48:28,450
contract<font color="#CCCCCC"> api to</font><font color="#E5E5E5"> deploy the contract</font><font color="#CCCCCC"> onto</font>

1161
00:48:24,670 --> 00:48:30,700
our any<font color="#E5E5E5"> weighted blockchain after that</font>

1162
00:48:28,450 --> 00:48:33,609
<font color="#CCCCCC">we'll submit</font><font color="#E5E5E5"> one transaction and</font><font color="#CCCCCC"> so</font>

1163
00:48:30,700 --> 00:48:37,089
<font color="#E5E5E5">called the deposit function in the</font>

1164
00:48:33,610 --> 00:48:39,610
contract account<font color="#E5E5E5"> and this will yeah</font>

1165
00:48:37,090 --> 00:48:41,680
put some ether<font color="#CCCCCC"> into the wallet and so</font>

1166
00:48:39,610 --> 00:48:44,140
we'll pass that with<font color="#CCCCCC"> so we'll</font><font color="#E5E5E5"> call that</font>

1167
00:48:41,680 --> 00:48:46,629
<font color="#CCCCCC">with the Creator</font><font color="#E5E5E5"> account as a caller and</font>

1168
00:48:44,140 --> 00:48:49,299
and this<font color="#E5E5E5"> value for</font><font color="#CCCCCC"> a number</font><font color="#E5E5E5"> of ether</font>

1169
00:48:46,630 --> 00:48:51,790
<font color="#E5E5E5">designs in that transaction after that</font>

1170
00:48:49,300 --> 00:48:53,380
<font color="#E5E5E5">we'll send</font><font color="#CCCCCC"> to symbolic transactions and</font>

1171
00:48:51,790 --> 00:48:53,920
we'll send them<font color="#E5E5E5"> from the attackers</font>

1172
00:48:53,380 --> 00:48:56,170
account

1173
00:48:53,920 --> 00:48:58,450
<font color="#CCCCCC">we'll make a symbolic transaction data</font>

1174
00:48:56,170 --> 00:49:01,840
buffer<font color="#E5E5E5"> using this API</font><font color="#CCCCCC"> and just use</font><font color="#E5E5E5"> that</font>

1175
00:48:58,450 --> 00:49:04,419
as the data for the transaction and then

1176
00:49:01,840 --> 00:49:06,040
after we send the<font color="#E5E5E5"> two symbol</font><font color="#CCCCCC"> all</font>

1177
00:49:04,420 --> 00:49:08,410
transactions from<font color="#E5E5E5"> the attacker will</font>

1178
00:49:06,040 --> 00:49:10,540
check every state and each state we can

1179
00:49:08,410 --> 00:49:12,970
do a custom query to see if the

1180
00:49:10,540 --> 00:49:13,670
attackers account balance can be<font color="#E5E5E5"> greater</font>

1181
00:49:12,970 --> 00:49:15,680
<font color="#E5E5E5">than one</font>

1182
00:49:13,670 --> 00:49:18,650
and so the attacker<font color="#E5E5E5"> started out with</font>

1183
00:49:15,680 --> 00:49:20,899
account balance of zero<font color="#CCCCCC"> that is right</font>

1184
00:49:18,650 --> 00:49:22,640
here<font color="#E5E5E5"> and so we'll see is there any</font>

1185
00:49:20,900 --> 00:49:24,680
situation where the attacker actually

1186
00:49:22,640 --> 00:49:27,200
<font color="#E5E5E5">has either after submitting</font><font color="#CCCCCC"> two</font>

1187
00:49:24,680 --> 00:49:31,629
transactions<font color="#E5E5E5"> and we and we</font><font color="#CCCCCC"> will print</font>

1188
00:49:27,200 --> 00:49:33,618
<font color="#E5E5E5">yes</font><font color="#CCCCCC"> if we find a state like that</font><font color="#E5E5E5"> and so</font>

1189
00:49:31,630 --> 00:49:36,109
I'll<font color="#E5E5E5"> just go ahead and run the scripts</font>

1190
00:49:33,619 --> 00:49:38,869
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see that it goes ahead and</font>

1191
00:49:36,109 --> 00:49:42,680
<font color="#E5E5E5">creates some accounts deposits some</font>

1192
00:49:38,869 --> 00:49:43,519
ether<font color="#E5E5E5"> into the wallets</font><font color="#CCCCCC"> and now it's</font>

1193
00:49:42,680 --> 00:49:45,259
<font color="#E5E5E5">starting to sound the attacker</font>

1194
00:49:43,519 --> 00:49:48,618
<font color="#CCCCCC">transactions so it's not the first</font><font color="#E5E5E5"> one</font>

1195
00:49:45,260 --> 00:49:50,630
pretty<font color="#E5E5E5"> quickly</font><font color="#CCCCCC"> and now because</font><font color="#E5E5E5"> I needs</font>

1196
00:49:48,619 --> 00:49:51,740
<font color="#E5E5E5">to run over every produce</font><font color="#CCCCCC"> state it's</font>

1197
00:49:50,630 --> 00:49:53,510
<font color="#E5E5E5">taking a bit longer</font><font color="#CCCCCC"> for the third one</font>

1198
00:49:51,740 --> 00:49:56,390
but in a<font color="#E5E5E5"> couple seconds it's going to</font>

1199
00:49:53,510 --> 00:49:58,970
finish<font color="#E5E5E5"> and we'll see if we found any</font>

1200
00:49:56,390 --> 00:50:00,348
states where you<font color="#E5E5E5"> can steal the ether and</font>

1201
00:49:58,970 --> 00:50:03,470
so you of<font color="#E5E5E5"> course we</font><font color="#CCCCCC"> found a lot of</font>

1202
00:50:00,349 --> 00:50:04,549
states or that didn't work but<font color="#CCCCCC"> Manticore</font>

1203
00:50:03,470 --> 00:50:06,288
tells us that we there<font color="#E5E5E5"> was actually one</font>

1204
00:50:04,549 --> 00:50:09,309
state<font color="#E5E5E5"> where we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> steal the ether and</font>

1205
00:50:06,289 --> 00:50:13,579
so let's<font color="#E5E5E5"> look into the output directory</font>

1206
00:50:09,309 --> 00:50:16,819
<font color="#CCCCCC">and so the</font><font color="#E5E5E5"> scripts generates this custom</font>

1207
00:50:13,579 --> 00:50:19,640
test case called<font color="#E5E5E5"> wallet hack and let's</font>

1208
00:50:16,819 --> 00:50:22,430
<font color="#E5E5E5">look at how</font><font color="#CCCCCC"> mantle</font><font color="#E5E5E5"> were found a way</font><font color="#CCCCCC"> to</font>

1209
00:50:19,640 --> 00:50:24,680
steal the either<font color="#E5E5E5"> well</font><font color="#CCCCCC"> looking into the</font>

1210
00:50:22,430 --> 00:50:28,129
<font color="#E5E5E5">transaction file to see that and so we</font>

1211
00:50:24,680 --> 00:50:30,288
can see a<font color="#E5E5E5"> transaction</font><font color="#CCCCCC"> that creates the</font>

1212
00:50:28,130 --> 00:50:32,420
contracts<font color="#E5E5E5"> we can see the first</font>

1213
00:50:30,289 --> 00:50:34,970
<font color="#E5E5E5">transaction which is from the creator's</font>

1214
00:50:32,420 --> 00:50:38,089
account which is depositing this amount

1215
00:50:34,970 --> 00:50:39,740
of ether and see the contracts<font color="#CCCCCC"> and then</font>

1216
00:50:38,089 --> 00:50:41,119
we have our to attack your transactions

1217
00:50:39,740 --> 00:50:44,959
<font color="#E5E5E5">so let's see what it found</font>

1218
00:50:41,119 --> 00:50:47,450
and so it's<font color="#CCCCCC"> found</font><font color="#E5E5E5"> that if you</font><font color="#CCCCCC"> can call</font>

1219
00:50:44,960 --> 00:50:50,599
the change<font color="#E5E5E5"> owner function and then</font>

1220
00:50:47,450 --> 00:50:53,000
withdraw you can then change the owner

1221
00:50:50,599 --> 00:50:55,279
to yourself and then<font color="#CCCCCC"> withdraw</font><font color="#E5E5E5"> all the</font>

1222
00:50:53,000 --> 00:50:57,049
ether<font color="#CCCCCC"> and so the bug in this contract</font>

1223
00:50:55,279 --> 00:50:59,240
was that<font color="#E5E5E5"> the change owner function is</font>

1224
00:50:57,049 --> 00:51:02,269
public<font color="#E5E5E5"> and anyone can call it make</font>

1225
00:50:59,240 --> 00:51:04,038
themselves<font color="#CCCCCC"> the owner and so the key</font>

1226
00:51:02,269 --> 00:51:06,169
point here<font color="#E5E5E5"> is that all we needed to</font>

1227
00:51:04,039 --> 00:51:07,819
express is our desired end conditions<font color="#E5E5E5"> we</font>

1228
00:51:06,170 --> 00:51:10,609
just said we just<font color="#E5E5E5"> need to say give the</font>

1229
00:51:07,819 --> 00:51:12,440
contract<font color="#CCCCCC"> here and is there</font><font color="#E5E5E5"> any possible</font>

1230
00:51:10,609 --> 00:51:14,990
state where an attacker<font color="#E5E5E5"> gets him either</font>

1231
00:51:12,440 --> 00:51:18,910
<font color="#CCCCCC">and that's it</font><font color="#E5E5E5"> and then the else can go</font>

1232
00:51:14,990 --> 00:51:18,910
and find a way to make that satisfiable

1233
00:51:19,160 --> 00:51:24,980
so that<font color="#E5E5E5"> pretty much wraps things up here</font>

1234
00:51:21,860 --> 00:51:26,210
<font color="#E5E5E5">summary is</font><font color="#CCCCCC"> that we found</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> somewhat</font>

1235
00:51:24,980 --> 00:51:26,600
<font color="#E5E5E5">excuse is definitely possible through</font>

1236
00:51:26,210 --> 00:51:28,340
<font color="#CCCCCC">aetherium</font>

1237
00:51:26,600 --> 00:51:29,810
and shows a lot of promise for<font color="#CCCCCC"> use</font>

1238
00:51:28,340 --> 00:51:31,160
<font color="#E5E5E5">already there</font>

1239
00:51:29,810 --> 00:51:33,110
of course many interesting challenges

1240
00:51:31,160 --> 00:51:34,640
that we<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> overcome but there's a</font>

1241
00:51:33,110 --> 00:51:37,100
big potential<font color="#CCCCCC"> depth in fact in this</font>

1242
00:51:34,640 --> 00:51:38,480
space here<font color="#E5E5E5"> if you're interested you</font><font color="#CCCCCC"> can</font>

1243
00:51:37,100 --> 00:51:42,650
<font color="#E5E5E5">check out</font><font color="#CCCCCC"> Manticore which is available</font>

1244
00:51:38,480 --> 00:51:44,180
<font color="#E5E5E5">open</font><font color="#CCCCCC"> source implementation and I just</font>

1245
00:51:42,650 --> 00:51:47,030
also want<font color="#CCCCCC"> to give a special thanks to</font><font color="#E5E5E5"> my</font>

1246
00:51:44,180 --> 00:51:50,149
coworker<font color="#CCCCCC"> Felipe Manzana who did</font><font color="#E5E5E5"> most of</font>

1247
00:51:47,030 --> 00:51:51,200
<font color="#E5E5E5">this work so but yeah that's pretty</font><font color="#CCCCCC"> much</font>

1248
00:51:50,150 --> 00:51:53,180
<font color="#E5E5E5">it</font>

1249
00:51:51,200 --> 00:51:55,279
real sort of hiring<font color="#E5E5E5"> so if you find</font><font color="#CCCCCC"> this</font>

1250
00:51:53,180 --> 00:51:57,020
very<font color="#E5E5E5"> work interesting I mean please get</font>

1251
00:51:55,280 --> 00:51:59,230
in touch<font color="#CCCCCC"> but</font><font color="#E5E5E5"> thank</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> all for your time</font>

1252
00:51:57,020 --> 00:51:59,230
<font color="#CCCCCC">and attention</font>

