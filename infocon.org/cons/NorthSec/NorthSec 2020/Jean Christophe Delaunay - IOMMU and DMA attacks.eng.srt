1
00:00:01,140 --> 00:00:20,039
[Music]

2
00:00:17,570 --> 00:00:23,010
hi everybody we're back and right on

3
00:00:20,039 --> 00:00:25,110
time so right now we're going to listen

4
00:00:23,010 --> 00:00:27,330
to like yourself middle name who the

5
00:00:25,110 --> 00:00:29,520
former pentester who used to play a lot

6
00:00:27,330 --> 00:00:31,139
with Microsoft Active Microsoft Active

7
00:00:29,520 --> 00:00:33,030
Directory infrastructures both on

8
00:00:31,140 --> 00:00:35,579
defensive and offensive aspects of

9
00:00:33,030 --> 00:00:37,829
selective it French offensive security

10
00:00:35,579 --> 00:00:39,479
company he is now in the reverse

11
00:00:37,829 --> 00:00:42,089
engineering team within his company

12
00:00:39,479 --> 00:00:45,479
focusing on Windows and hardware topics

13
00:00:42,089 --> 00:00:47,729
his talks is iommu and DMA attacks or

14
00:00:45,479 --> 00:00:49,679
input-output memory management unit and

15
00:00:47,729 --> 00:00:54,839
they're at memory access with a kiss oh

16
00:00:49,679 --> 00:00:57,239
it's start hi everyone in this

17
00:00:54,839 --> 00:01:01,138
presentation I'm going to talk about our

18
00:00:57,239 --> 00:01:03,899
menu and direct memory attacks but first

19
00:01:01,139 --> 00:01:06,690
of all I'd like to thanks not SEC staff

20
00:01:03,899 --> 00:01:08,730
for the incredible work you know in

21
00:01:06,690 --> 00:01:11,429
order to reorganize the these events

22
00:01:08,730 --> 00:01:16,100
online you guys Rock really thank you

23
00:01:11,430 --> 00:01:19,680
very much also I hope everybody's safe a

24
00:01:16,100 --> 00:01:21,720
bit of presentation I'm usually stop the

25
00:01:19,680 --> 00:01:24,090
running she's to us on Twitter I'm

26
00:01:21,720 --> 00:01:27,090
working for a French offensive security

27
00:01:24,090 --> 00:01:29,970
company called inactive we have three

28
00:01:27,090 --> 00:01:33,090
poles pen tests reverse engineering and

29
00:01:29,970 --> 00:01:35,460
developments and as it was announced I'm

30
00:01:33,090 --> 00:01:37,530
working in the reversion reverse

31
00:01:35,460 --> 00:01:39,419
engineering team now but was previously

32
00:01:37,530 --> 00:01:41,940
in the pen test one and used to focus on

33
00:01:39,420 --> 00:01:45,240
work with those related subjects like

34
00:01:41,940 --> 00:01:48,690
Active Directory serve identification

35
00:01:45,240 --> 00:01:51,990
schemes etc in the reverse engineering

36
00:01:48,690 --> 00:01:56,190
team we focus mainly on low-level

37
00:01:51,990 --> 00:02:00,419
subjects like yeah reverse Hardware poll

38
00:01:56,190 --> 00:02:02,190
etc and if you understood well yeah I'm

39
00:02:00,420 --> 00:02:04,920
French I speak cos all

40
00:02:02,190 --> 00:02:09,258
so hopefully excuse my poor English and

41
00:02:04,920 --> 00:02:12,870
and accents now we do a quick road map

42
00:02:09,258 --> 00:02:16,379
first our procedure short introduction

43
00:02:12,870 --> 00:02:16,990
on DMS objects then I'll focus on the

44
00:02:16,379 --> 00:02:18,970
various

45
00:02:16,990 --> 00:02:22,870
I on the new implementation within

46
00:02:18,970 --> 00:02:25,180
mainstream oasis and finally I'll

47
00:02:22,870 --> 00:02:31,870
explain some attacks then conclude and

48
00:02:25,180 --> 00:02:34,540
talk a bit on our ongoing words first a

49
00:02:31,870 --> 00:02:37,360
quick disclaimer in this presentation

50
00:02:34,540 --> 00:02:41,079
I'll talk about known attacks on engine

51
00:02:37,360 --> 00:02:43,570
technology only and I'll stay quite high

52
00:02:41,080 --> 00:02:46,660
level this is mostly state-of-the-art

53
00:02:43,570 --> 00:02:50,109
stuff so no real brand new fancy things

54
00:02:46,660 --> 00:02:54,490
for DMA experts even though I'll talk a

55
00:02:50,110 --> 00:02:56,410
bit about Thunderbolt attacks in this

56
00:02:54,490 --> 00:02:58,840
presentation targets an already switched

57
00:02:56,410 --> 00:03:01,810
on computer the consider attack vector

58
00:02:58,840 --> 00:03:03,490
being the field made one you know for

59
00:03:01,810 --> 00:03:06,280
example when your room being accessed

60
00:03:03,490 --> 00:03:11,200
during a conferences or so

61
00:03:06,280 --> 00:03:14,350
this is the every major scenario what is

62
00:03:11,200 --> 00:03:17,890
DNA well on this slide I've put a

63
00:03:14,350 --> 00:03:20,170
simplified explanation of what it is on

64
00:03:17,890 --> 00:03:23,049
the left you can see the normal workflow

65
00:03:20,170 --> 00:03:25,780
occurring when transferring data with an

66
00:03:23,050 --> 00:03:28,960
external peripheral it goes through the

67
00:03:25,780 --> 00:03:29,980
CPU involves our request interior

68
00:03:28,960 --> 00:03:31,810
success rocks

69
00:03:29,980 --> 00:03:35,619
you know dr. interacts with the main

70
00:03:31,810 --> 00:03:38,620
memory on the right is the DMA workflow

71
00:03:35,620 --> 00:03:41,290
you can see that there's not as many

72
00:03:38,620 --> 00:03:43,710
elements as on the Left illustration in

73
00:03:41,290 --> 00:03:47,530
fact in order to increase performance is

74
00:03:43,710 --> 00:03:49,780
dedicated bus is used with a dedicated

75
00:03:47,530 --> 00:03:55,780
controller to be able to access the main

76
00:03:49,780 --> 00:03:59,500
memory directly here are the various

77
00:03:55,780 --> 00:04:01,960
technologies using DMA you've probably

78
00:03:59,500 --> 00:04:06,760
heard of all of them we have the good

79
00:04:01,960 --> 00:04:10,030
old PCI and a GP e we have firewire PCI

80
00:04:06,760 --> 00:04:12,640
Express etcetera and you can see that

81
00:04:10,030 --> 00:04:15,370
I've puts many illustration in regarding

82
00:04:12,640 --> 00:04:19,108
PCI Express graphic card which is well

83
00:04:15,370 --> 00:04:23,890
known to be using PCI Express but also

84
00:04:19,108 --> 00:04:27,039
nvme SSD Drive and USBC connector with

85
00:04:23,890 --> 00:04:31,919
Thunderbolt supports these two also rely

86
00:04:27,040 --> 00:04:31,919
on PCI bus and offer DMA

87
00:04:32,160 --> 00:04:39,310
now we'll talk about the iommu intel

88
00:04:36,340 --> 00:04:43,568
implements what it calls virtualization

89
00:04:39,310 --> 00:04:47,979
technology for directed IO which is also

90
00:04:43,569 --> 00:04:51,130
known as the short DTD basically this is

91
00:04:47,979 --> 00:04:53,740
the iommu stuff I will talk about its

92
00:04:51,130 --> 00:04:56,080
purpose is to proceed to DMA remapping

93
00:04:53,740 --> 00:04:58,630
in order to control which memory

94
00:04:56,080 --> 00:05:03,729
locations are reachable and by Yahoo

95
00:04:58,630 --> 00:05:07,810
this DMA remapping works as a classical

96
00:05:03,729 --> 00:05:10,210
a menu there's the term IO MMU in that

97
00:05:07,810 --> 00:05:12,539
it takes addresses manipulated by

98
00:05:10,210 --> 00:05:16,780
peripherals and translate them to

99
00:05:12,539 --> 00:05:18,789
physical addresses actually if the

100
00:05:16,780 --> 00:05:21,190
functioning is similar to a classical

101
00:05:18,789 --> 00:05:24,250
MMU these peripheral addresses are not

102
00:05:21,190 --> 00:05:26,860
bound to any real virtual addresses that

103
00:05:24,250 --> 00:05:29,080
we could observe while debugging a

104
00:05:26,860 --> 00:05:35,500
process for example they have their own

105
00:05:29,080 --> 00:05:39,250
address space a really important notion

106
00:05:35,500 --> 00:05:43,060
I will often refer to is the domain term

107
00:05:39,250 --> 00:05:46,360
in PC world peripheral are organized by

108
00:05:43,060 --> 00:05:49,169
what they call domains each domain has

109
00:05:46,360 --> 00:05:51,940
its proper mmm new configuration and

110
00:05:49,169 --> 00:05:54,490
what is important to remember here is

111
00:05:51,940 --> 00:05:56,759
that all peripherals within a single

112
00:05:54,490 --> 00:05:59,710
domain share the same memory mapping

113
00:05:56,759 --> 00:06:02,590
basically what it means is that for

114
00:05:59,710 --> 00:06:04,750
example if I have graphic card and

115
00:06:02,590 --> 00:06:07,479
network card which are under the same

116
00:06:04,750 --> 00:06:09,630
pci domain then the network card could

117
00:06:07,479 --> 00:06:13,300
access graphic cards memory pages and

118
00:06:09,630 --> 00:06:15,820
we'll see later how that is important in

119
00:06:13,300 --> 00:06:19,840
order to be identified peripheral is

120
00:06:15,820 --> 00:06:23,349
assigned triplets best dev fun where bus

121
00:06:19,840 --> 00:06:26,530
is the bus number dev is obviously for

122
00:06:23,349 --> 00:06:30,789
device number and thumb represents the

123
00:06:26,530 --> 00:06:34,419
function of the device for example if we

124
00:06:30,789 --> 00:06:38,589
stick with graphic car example let's say

125
00:06:34,419 --> 00:06:40,870
that we have a cyber digital NSA

126
00:06:38,589 --> 00:06:44,289
compliant graphic card which also makes

127
00:06:40,870 --> 00:06:46,809
I don't know copy well we would have to

128
00:06:44,289 --> 00:06:49,779
triplets one with a function for

129
00:06:46,809 --> 00:06:55,990
graphics and one with the function for

130
00:06:49,779 --> 00:06:59,050
coffee so we have two triplets so we'll

131
00:06:55,990 --> 00:07:00,580
finish this short introduction with some

132
00:06:59,050 --> 00:07:03,729
use cases of iommu

133
00:07:00,580 --> 00:07:06,580
implementation the first one which is

134
00:07:03,729 --> 00:07:10,508
actually the well-known one is the

135
00:07:06,580 --> 00:07:13,330
hypervisor a use case imagine I have a

136
00:07:10,509 --> 00:07:16,449
virtual machine and a peripheral attach

137
00:07:13,330 --> 00:07:19,448
to it because my peripheral is attested

138
00:07:16,449 --> 00:07:21,969
to this varium I don't want to be I

139
00:07:19,449 --> 00:07:26,680
don't want it to be able to access to my

140
00:07:21,969 --> 00:07:29,439
hosts main memory in the OSU's case well

141
00:07:26,680 --> 00:07:31,959
it's pretty ly the same thing except

142
00:07:29,439 --> 00:07:34,569
that I want to protect my OS or kernel

143
00:07:31,959 --> 00:07:37,240
from Rock peripherals so I must ensure

144
00:07:34,569 --> 00:07:43,839
that peripherals can only access their

145
00:07:37,240 --> 00:07:48,610
memory pages and now that we've seen a

146
00:07:43,839 --> 00:07:52,269
bit what is DMA and iommu we'll take a

147
00:07:48,610 --> 00:07:57,039
close look on implementations on various

148
00:07:52,269 --> 00:08:00,669
choices first let's take a look at

149
00:07:57,039 --> 00:08:03,748
Microsoft Windows on Windows IO a menu

150
00:08:00,669 --> 00:08:07,209
is used by technologies such as hyper-v

151
00:08:03,749 --> 00:08:11,019
virtualization by security which is also

152
00:08:07,209 --> 00:08:14,050
called the VBS and the new canal DMA

153
00:08:11,019 --> 00:08:16,119
protection hyper-v well you've normally

154
00:08:14,050 --> 00:08:19,269
heard about it is the Microsoft

155
00:08:16,119 --> 00:08:22,839
virtualization technology VBS on its

156
00:08:19,269 --> 00:08:25,749
side relies on hyper-v and permits to

157
00:08:22,839 --> 00:08:30,159
isolate critical components as NSA

158
00:08:25,749 --> 00:08:32,669
essays or stuff like that from unsecured

159
00:08:30,159 --> 00:08:35,198
world we'll see what it is after and

160
00:08:32,669 --> 00:08:37,389
finally the the kernel the DMA

161
00:08:35,198 --> 00:08:42,870
protection is a new feature introduced

162
00:08:37,389 --> 00:08:48,269
with Windows 10 version 1803 basically

163
00:08:42,870 --> 00:08:51,160
what does Colonel DMA protection is it's

164
00:08:48,269 --> 00:08:53,620
it's preventing peripheral which have

165
00:08:51,160 --> 00:08:57,160
not a driver with memory isolation

166
00:08:53,620 --> 00:08:57,970
capability like DMA remapping each work

167
00:08:57,160 --> 00:09:02,110
why the

168
00:08:57,970 --> 00:09:04,660
Couture is locked and you can see that I

169
00:09:02,110 --> 00:09:06,160
wrote on the slides that this is

170
00:09:04,660 --> 00:09:08,800
according to Microsoft because

171
00:09:06,160 --> 00:09:11,079
unfortunately windows being closed

172
00:09:08,800 --> 00:09:14,500
source we can be a hundred percent sure

173
00:09:11,079 --> 00:09:17,649
there are no and not a lot of technical

174
00:09:14,500 --> 00:09:20,920
documentation on the iommu usage in here

175
00:09:17,649 --> 00:09:24,360
so a reverse engineering word is needed

176
00:09:20,920 --> 00:09:27,670
and actually is in progress on our side

177
00:09:24,360 --> 00:09:31,120
on this slide I've put a scheme of what

178
00:09:27,670 --> 00:09:33,040
is VBS we won't go a lot in details on

179
00:09:31,120 --> 00:09:35,439
it this is not the purpose of this

180
00:09:33,040 --> 00:09:38,800
presentation but on the right is where

181
00:09:35,439 --> 00:09:42,339
the user evolves when using his computer

182
00:09:38,800 --> 00:09:45,310
it's called vl0 and on the left you have

183
00:09:42,339 --> 00:09:50,259
the secular world which is called DT l1

184
00:09:45,310 --> 00:09:53,258
and is isolated from DT l0 technologies

185
00:09:50,259 --> 00:09:57,550
such as credential world device guar

186
00:09:53,259 --> 00:10:05,439
etcetera they all rely on VBS and the

187
00:09:57,550 --> 00:10:07,719
underlying stuff is the iommu now let's

188
00:10:05,439 --> 00:10:12,069
talk about Linux I am a new

189
00:10:07,720 --> 00:10:14,920
implementation on Linux the Iowa iommu

190
00:10:12,069 --> 00:10:17,319
is not activated by default and you can

191
00:10:14,920 --> 00:10:21,160
change this with special boot arguments

192
00:10:17,319 --> 00:10:23,740
until IMM you own but it's not here by

193
00:10:21,160 --> 00:10:27,309
default and by the way there is also an

194
00:10:23,740 --> 00:10:32,319
AMG IO menu but this talk is on Intel

195
00:10:27,309 --> 00:10:35,079
so each i/o my new toy defines an iommu

196
00:10:32,319 --> 00:10:37,540
o-p-s structure which serve as an

197
00:10:35,079 --> 00:10:40,000
abstraction layer while interacting with

198
00:10:37,540 --> 00:10:43,439
the hardware we'll see this on the slide

199
00:10:40,000 --> 00:10:45,399
after and here on the slide when I say

200
00:10:43,439 --> 00:10:49,930
platform type

201
00:10:45,399 --> 00:10:54,490
I don't refer to x86 64 eksetera but

202
00:10:49,930 --> 00:10:58,149
more on Intel icky Knox necrotic also in

203
00:10:54,490 --> 00:11:01,120
Linux world virtual address as seen by a

204
00:10:58,149 --> 00:11:03,759
peripheral is called an IO VA it is

205
00:11:01,120 --> 00:11:08,350
associated with a physical address P

206
00:11:03,759 --> 00:11:11,830
addr with its corresponding SC else on

207
00:11:08,350 --> 00:11:14,050
Linux my pit mapping is a

208
00:11:11,830 --> 00:11:17,110
per demand and not per per your frown

209
00:11:14,050 --> 00:11:18,849
but also each peripheral has its own

210
00:11:17,110 --> 00:11:24,160
domain so in fact each peripheral has

211
00:11:18,850 --> 00:11:27,250
its own address space so here is the ion

212
00:11:24,160 --> 00:11:30,939
manure or peer structure for the Intel

213
00:11:27,250 --> 00:11:33,130
platform and looking at it you can see

214
00:11:30,940 --> 00:11:36,900
why it is considered as an abstraction

215
00:11:33,130 --> 00:11:39,189
layer and I've also put on the writes

216
00:11:36,900 --> 00:11:41,740
the map function and the corresponding

217
00:11:39,190 --> 00:11:44,710
and map function you have all the

218
00:11:41,740 --> 00:11:46,930
function pointers in here so we have

219
00:11:44,710 --> 00:11:53,950
here for Intel but we would have the

220
00:11:46,930 --> 00:11:56,859
same for AMD economics etc and we finish

221
00:11:53,950 --> 00:12:00,280
the implant in implant image part with

222
00:11:56,860 --> 00:12:03,040
the Mac OS Apple understood many years

223
00:12:00,280 --> 00:12:06,010
ago that hardware security is really

224
00:12:03,040 --> 00:12:08,430
important they've been adding iommu

225
00:12:06,010 --> 00:12:13,150
support for quite some time actually and

226
00:12:08,430 --> 00:12:16,239
if a lot of points are open source we

227
00:12:13,150 --> 00:12:19,689
can take a look but unfortunately all

228
00:12:16,240 --> 00:12:22,990
the driver parts is not so it's inactive

229
00:12:19,690 --> 00:12:25,180
we began to reverse engineering the UEFI

230
00:12:22,990 --> 00:12:28,840
part in order to understand how it is

231
00:12:25,180 --> 00:12:31,989
implemented in our reversed work we saw

232
00:12:28,840 --> 00:12:37,840
that UEFI is involved in the IOM in

233
00:12:31,990 --> 00:12:41,320
configuring process this in particular

234
00:12:37,840 --> 00:12:45,570
means that I ami is enforced at boot

235
00:12:41,320 --> 00:12:48,790
time also we saw that there is a custom

236
00:12:45,570 --> 00:12:50,530
UEFI protocol permitting drivers to it

237
00:12:48,790 --> 00:12:54,550
you configure iommu

238
00:12:50,530 --> 00:12:57,040
mappings for peripheral and precision

239
00:12:54,550 --> 00:13:01,359
here when I say protocol where it is

240
00:12:57,040 --> 00:13:02,829
protocol in UEFI context basically there

241
00:13:01,360 --> 00:13:05,710
is an interface implementing

242
00:13:02,830 --> 00:13:09,310
functionalities and this interface has a

243
00:13:05,710 --> 00:13:11,470
custom jewy drivers can talk to this

244
00:13:09,310 --> 00:13:16,540
interface they just have to specify the

245
00:13:11,470 --> 00:13:20,890
GID they want to talk to and when the

246
00:13:16,540 --> 00:13:23,949
UEFI hands off to the OS the Apple I OPC

247
00:13:20,890 --> 00:13:25,130
family driver really realizes the iommu

248
00:13:23,950 --> 00:13:30,440
for the

249
00:13:25,130 --> 00:13:33,010
context this driver also declares the

250
00:13:30,440 --> 00:13:36,200
Apple DTD device mapper class which

251
00:13:33,010 --> 00:13:38,750
authorized the i/o mapping class well

252
00:13:36,200 --> 00:13:40,850
here you can easily guess what this

253
00:13:38,750 --> 00:13:44,480
class do as their names are pretty

254
00:13:40,850 --> 00:13:46,850
talkative also the Apple VT device

255
00:13:44,480 --> 00:13:49,700
mapper class really finds IO VM map

256
00:13:46,850 --> 00:13:52,880
memory and the corresponding IO VM and

257
00:13:49,700 --> 00:13:55,070
map memory API which permits you add and

258
00:13:52,880 --> 00:13:58,370
remove memory mapping within the IO

259
00:13:55,070 --> 00:14:02,120
Avenue and what is really really really

260
00:13:58,370 --> 00:14:04,400
important is like it's unlike Linux Mac

261
00:14:02,120 --> 00:14:07,160
OS uses a single domain for all

262
00:14:04,400 --> 00:14:11,240
peripherals and we'll see after why this

263
00:14:07,160 --> 00:14:15,050
is really important ok

264
00:14:11,240 --> 00:14:19,100
we've seen the theoretical stuff and

265
00:14:15,050 --> 00:14:22,219
will now see the attacks actually if you

266
00:14:19,100 --> 00:14:26,180
get bored until now I hope it will

267
00:14:22,220 --> 00:14:28,370
change now we'll see once again we'll

268
00:14:26,180 --> 00:14:30,979
start with Windows a quick reminder

269
00:14:28,370 --> 00:14:33,440
first that we consider here that the

270
00:14:30,980 --> 00:14:37,040
target computer is already switched on

271
00:14:33,440 --> 00:14:39,980
and is locked as we saw earlier Windows

272
00:14:37,040 --> 00:14:42,800
does not use iommu by default the

273
00:14:39,980 --> 00:14:45,980
workflow of this attack is pretty easy

274
00:14:42,800 --> 00:14:49,579
to understand actually first we find a

275
00:14:45,980 --> 00:14:51,410
way to connect to the PCI bus and we

276
00:14:49,580 --> 00:14:53,960
then probe the target computer main

277
00:14:51,410 --> 00:14:56,870
memory searching for the unlocking

278
00:14:53,960 --> 00:15:00,710
routine we patch the password checking

279
00:14:56,870 --> 00:15:03,710
routine even up you can log log whatever

280
00:15:00,710 --> 00:15:07,250
password is entered now we'll see a bit

281
00:15:03,710 --> 00:15:09,650
more in details how to do so so I said

282
00:15:07,250 --> 00:15:12,740
we are probably main memory searching

283
00:15:09,650 --> 00:15:15,860
for unlocking routine this routine is

284
00:15:12,740 --> 00:15:20,060
called M svt password evaluates and is

285
00:15:15,860 --> 00:15:23,210
located in until answer dot dl are in

286
00:15:20,060 --> 00:15:25,609
red I've highlighted the RTL compare

287
00:15:23,210 --> 00:15:27,860
memory API which is used in this routine

288
00:15:25,610 --> 00:15:32,150
to compare the answer password with a

289
00:15:27,860 --> 00:15:34,790
normally valid password on the Left I've

290
00:15:32,150 --> 00:15:39,100
displayed the up codes corresponding to

291
00:15:34,790 --> 00:15:39,099
the instruction in either pro

292
00:15:39,140 --> 00:15:44,960
now as I said we want to patch the

293
00:15:42,770 --> 00:15:46,760
password checking routine in order to be

294
00:15:44,960 --> 00:15:49,610
able to log in whatever password is

295
00:15:46,760 --> 00:15:52,640
enter here is the result of such a patch

296
00:15:49,610 --> 00:15:54,710
as you see I have not the previous the

297
00:15:52,640 --> 00:15:56,540
previous condition I'll jump to ensure

298
00:15:54,710 --> 00:15:59,240
that we continue in the branch we are

299
00:15:56,540 --> 00:16:01,730
interested in and by the way these

300
00:15:59,240 --> 00:16:04,700
branch being the one that basically says

301
00:16:01,730 --> 00:16:07,220
this is the good password so we managed

302
00:16:04,700 --> 00:16:11,000
to to have a good password whatever

303
00:16:07,220 --> 00:16:13,760
password we are entering to proceed to

304
00:16:11,000 --> 00:16:17,440
this attack we have to search for a

305
00:16:13,760 --> 00:16:21,890
specific opcode in main memory for that

306
00:16:17,440 --> 00:16:26,090
we use the awesome PCL each tool from

307
00:16:21,890 --> 00:16:28,430
the no less awesome of frisks and if you

308
00:16:26,090 --> 00:16:32,570
look at this at this line you can notice

309
00:16:28,430 --> 00:16:35,780
many things first my amazing Microsoft

310
00:16:32,570 --> 00:16:37,730
Paint skills I'm quite proud of it but

311
00:16:35,780 --> 00:16:40,970
more importantly the two opcodes

312
00:16:37,730 --> 00:16:44,600
patterns I'm searching for in memory we

313
00:16:40,970 --> 00:16:48,950
can see that the c6o fa4

314
00:16:44,600 --> 00:16:52,880
in red and FB f etc in orange we are

315
00:16:48,950 --> 00:16:56,720
looking for them at the offsets 7 3a + 7

316
00:16:52,880 --> 00:16:59,450
3 e in memory here on the slide aha I

317
00:16:56,720 --> 00:17:02,330
haven't highlighted these offsets as

318
00:16:59,450 --> 00:17:05,810
they were not aligned but we will see

319
00:17:02,330 --> 00:17:08,030
the offset on the next slide now we can

320
00:17:05,810 --> 00:17:10,909
take a look at the patch we are patching

321
00:17:08,030 --> 00:17:14,420
at offset 7 3 B with op codes nope nope

322
00:17:10,910 --> 00:17:16,850
nope nope etc so what you can understand

323
00:17:14,420 --> 00:17:19,339
from this slide is that we are searching

324
00:17:16,849 --> 00:17:22,399
for two specific patterns at two

325
00:17:19,339 --> 00:17:24,919
specific offsets and provide a patch to

326
00:17:22,400 --> 00:17:27,680
be applied at a specific offsets this

327
00:17:24,920 --> 00:17:30,800
kind of signature is all you need to be

328
00:17:27,680 --> 00:17:35,810
able to use a PC eyelet well apart from

329
00:17:30,800 --> 00:17:38,180
the hardware of course so the

330
00:17:35,810 --> 00:17:41,810
prerequisites to proceed to this attacks

331
00:17:38,180 --> 00:17:45,080
are hardware and software you can use an

332
00:17:41,810 --> 00:17:48,080
FPGA spawn zone with the USB 3 extension

333
00:17:45,080 --> 00:17:51,639
card for performances all the PCIe

334
00:17:48,080 --> 00:17:53,980
screamer or - there is a

335
00:17:51,640 --> 00:17:58,660
more recent version of its which is

336
00:17:53,980 --> 00:18:00,760
based on the m2 form factor and whatever

337
00:17:58,660 --> 00:18:03,760
that's all committing to connecting to

338
00:18:00,760 --> 00:18:06,610
the PCI bus actually on the software

339
00:18:03,760 --> 00:18:10,030
side er you can use PCI leach on likes

340
00:18:06,610 --> 00:18:12,429
or Windows and you also need the

341
00:18:10,030 --> 00:18:18,010
signatures as I've been talking about in

342
00:18:12,430 --> 00:18:22,030
the previous slides here is an example

343
00:18:18,010 --> 00:18:24,520
of my FPGA with its USB extension card

344
00:18:22,030 --> 00:18:27,670
on the top so in blue you can see the

345
00:18:24,520 --> 00:18:32,190
the extension count actually the FPGA is

346
00:18:27,670 --> 00:18:35,080
quite big we use it's more for test etc

347
00:18:32,190 --> 00:18:37,870
when you you will want to attack you

348
00:18:35,080 --> 00:18:43,840
will prefer the the PCIe screamer

349
00:18:37,870 --> 00:18:46,750
because it's much slower much tinier on

350
00:18:43,840 --> 00:18:51,010
line X there is also no I mean mmm you

351
00:18:46,750 --> 00:18:52,930
use by default the attack principle it's

352
00:18:51,010 --> 00:18:54,850
exactly the same actually you are

353
00:18:52,930 --> 00:18:57,130
searching for the password unlocking

354
00:18:54,850 --> 00:19:00,760
routine which is in this case verify

355
00:18:57,130 --> 00:19:02,770
password ash from the UNIX that SSO

356
00:19:00,760 --> 00:19:05,590
library then all you have to do is to

357
00:19:02,770 --> 00:19:07,800
patch it and you have here in the the

358
00:19:05,590 --> 00:19:13,000
bottom of the the slides you have the

359
00:19:07,800 --> 00:19:17,050
signature for this specific library and

360
00:19:13,000 --> 00:19:20,290
finally Mac OS so this part is the most

361
00:19:17,050 --> 00:19:24,820
interesting as the iommu is enabled by

362
00:19:20,290 --> 00:19:27,280
default as we said earlier so in order

363
00:19:24,820 --> 00:19:30,550
to be able to compromise our target we

364
00:19:27,280 --> 00:19:34,030
must find a way to bypass this iommu

365
00:19:30,550 --> 00:19:36,100
protection Coleen Rothwell I found some

366
00:19:34,030 --> 00:19:38,590
interesting vulnerabilities during his

367
00:19:36,100 --> 00:19:42,129
PhD thesis they did a really really

368
00:19:38,590 --> 00:19:45,040
great job and following he faces he

369
00:19:42,130 --> 00:19:48,190
released with other researchers the

370
00:19:45,040 --> 00:19:50,290
thunderclap platform and this platform

371
00:19:48,190 --> 00:19:53,500
contains both hardware and software and

372
00:19:50,290 --> 00:19:56,830
permits among other things to compromise

373
00:19:53,500 --> 00:20:00,510
the system running with Mac OS prior to

374
00:19:56,830 --> 00:20:00,510
version 10 12 for

375
00:20:01,890 --> 00:20:07,590
the principle is the following you may

376
00:20:04,380 --> 00:20:09,650
recall that I told you that on Mac OS

377
00:20:07,590 --> 00:20:12,659
peripherals are under the same domain

378
00:20:09,650 --> 00:20:15,210
this means that they share the same

379
00:20:12,660 --> 00:20:17,720
address space so this is possible to

380
00:20:15,210 --> 00:20:20,429
access my network cards memory pages

381
00:20:17,720 --> 00:20:22,650
well provided that these network cards

382
00:20:20,429 --> 00:20:25,860
relies on PCI Express technology of

383
00:20:22,650 --> 00:20:28,950
course current rothwell exploited this

384
00:20:25,860 --> 00:20:34,399
video to be able to execute commands as

385
00:20:28,950 --> 00:20:34,400
route on Mac OS before version 1012 for

386
00:20:34,970 --> 00:20:41,940
let's see the attack now first we have

387
00:20:39,540 --> 00:20:45,570
to understand how network packets are

388
00:20:41,940 --> 00:20:49,260
describes these packets are described by

389
00:20:45,570 --> 00:20:52,918
what we called an embosser which you can

390
00:20:49,260 --> 00:20:55,200
see on the slide in here we'll see also

391
00:20:52,919 --> 00:20:58,530
this structure on the next slide so I'm

392
00:20:55,200 --> 00:21:02,250
switching to it and this particular

393
00:20:58,530 --> 00:21:04,950
structure has many fields across C

394
00:21:02,250 --> 00:21:09,059
unions among these fields we can see

395
00:21:04,950 --> 00:21:13,049
that we have M dates in red and packets

396
00:21:09,059 --> 00:21:15,540
dates in orange and MX in blue these

397
00:21:13,049 --> 00:21:18,870
elements represent data which is a story

398
00:21:15,540 --> 00:21:20,970
in the packet and because of the Union

399
00:21:18,870 --> 00:21:24,000
type there can be only one type at a

400
00:21:20,970 --> 00:21:26,160
time depending on specific facts you can

401
00:21:24,000 --> 00:21:28,950
see the these flags in comments in the

402
00:21:26,160 --> 00:21:32,340
structure you know it's a MX set M

403
00:21:28,950 --> 00:21:35,940
packet header set etc and spoiler alert

404
00:21:32,340 --> 00:21:38,159
we are interested in here in the next

405
00:21:35,940 --> 00:21:41,340
one which saw which stores data in

406
00:21:38,160 --> 00:21:45,570
external buffer so if you look at the MX

407
00:21:41,340 --> 00:21:48,540
I said that we are interested in it and

408
00:21:45,570 --> 00:21:51,659
this means that we are interested in the

409
00:21:48,540 --> 00:21:54,899
corresponding flag which will enable it

410
00:21:51,660 --> 00:21:59,640
and this corresponding flag which which

411
00:21:54,900 --> 00:22:02,549
is MX but with uppercase is stored in

412
00:21:59,640 --> 00:22:05,100
the end of structure header as you see

413
00:22:02,549 --> 00:22:08,879
on the slide in purple so in this

414
00:22:05,100 --> 00:22:12,090
specific structure we have the field

415
00:22:08,880 --> 00:22:16,110
which contains the flag which maybe we

416
00:22:12,090 --> 00:22:19,199
can set ok

417
00:22:16,110 --> 00:22:22,620
so let's say we have the MX flag set

418
00:22:19,200 --> 00:22:26,970
which by the way occurs when there are

419
00:22:22,620 --> 00:22:29,729
big packets so pretty often because an

420
00:22:26,970 --> 00:22:32,549
external buffer is allocated to store

421
00:22:29,730 --> 00:22:33,179
the data it must be freed when it is no

422
00:22:32,549 --> 00:22:36,059
longer needed

423
00:22:33,179 --> 00:22:38,790
okay the function in charge of freeing

424
00:22:36,059 --> 00:22:42,420
the buffer is stalled in the MX

425
00:22:38,790 --> 00:22:46,340
structure actually and it is stored as a

426
00:22:42,420 --> 00:22:50,130
function pointer so you should now

427
00:22:46,340 --> 00:22:53,520
normally see what is the problem because

428
00:22:50,130 --> 00:22:56,130
we have DMA access we can modify this

429
00:22:53,520 --> 00:22:58,049
function pointer through DMA and also

430
00:22:56,130 --> 00:23:01,980
control its parameters are there are

431
00:22:58,049 --> 00:23:04,230
also members of the MX structure so we

432
00:23:01,980 --> 00:23:08,210
have a complete access to this structure

433
00:23:04,230 --> 00:23:11,190
we can alter it and all we have to do is

434
00:23:08,210 --> 00:23:14,429
override this pointer with the kunc

435
00:23:11,190 --> 00:23:17,309
execute API and this specific API

436
00:23:14,429 --> 00:23:18,120
permits to launch the binary as roots in

437
00:23:17,309 --> 00:23:20,370
the userland

438
00:23:18,120 --> 00:23:22,799
and all you have to do is to wait for

439
00:23:20,370 --> 00:23:28,168
the buffer to be freedom and when it's

440
00:23:22,799 --> 00:23:32,070
freed this function will be called apple

441
00:23:28,169 --> 00:23:34,740
patch this vulnerability by adding some

442
00:23:32,070 --> 00:23:38,010
random values which are exhort with the

443
00:23:34,740 --> 00:23:41,850
data to be protected so what it means is

444
00:23:38,010 --> 00:23:44,549
that if you don't know these random

445
00:23:41,850 --> 00:23:44,939
values you can't proceed to this attack

446
00:23:44,549 --> 00:23:47,460
anymore

447
00:23:44,940 --> 00:23:49,919
and these random values are said during

448
00:23:47,460 --> 00:23:52,110
the boot process so this attack is no

449
00:23:49,919 --> 00:23:56,370
longer feasible and if you remember in

450
00:23:52,110 --> 00:23:59,189
our attack vector we said it was a

451
00:23:56,370 --> 00:24:02,399
female evil mate so the computer must be

452
00:23:59,190 --> 00:24:09,690
already switched on and we don't want it

453
00:24:02,400 --> 00:24:12,480
to reboot now let's conclude DMA attack

454
00:24:09,690 --> 00:24:14,850
vectors are more and more discussed and

455
00:24:12,480 --> 00:24:18,480
are still a real threat model despite

456
00:24:14,850 --> 00:24:20,340
being known for ages actually as

457
00:24:18,480 --> 00:24:22,620
expected Mac OS is ahead of its

458
00:24:20,340 --> 00:24:25,350
contestants regarding hardware security

459
00:24:22,620 --> 00:24:27,120
but windows seems to take the the

460
00:24:25,350 --> 00:24:29,969
physical attack vector very very

461
00:24:27,120 --> 00:24:31,679
seriously and we plan to go further

462
00:24:29,970 --> 00:24:34,860
than the current state of the art during

463
00:24:31,680 --> 00:24:40,440
our French happy project which I'll be

464
00:24:34,860 --> 00:24:43,050
talking a bit now so this this state of

465
00:24:40,440 --> 00:24:47,070
the art was achieved because we plan to

466
00:24:43,050 --> 00:24:50,340
go further and our projects is called DM

467
00:24:47,070 --> 00:24:53,820
our vests and consists in studying dma

468
00:24:50,340 --> 00:24:56,699
subjects relying on a PCI bus from

469
00:24:53,820 --> 00:24:59,310
software to hardware the time to look at

470
00:24:56,700 --> 00:25:01,650
each mainstream oasis whether it's open

471
00:24:59,310 --> 00:25:05,129
source or not and various technologies

472
00:25:01,650 --> 00:25:10,140
such as m2 Thunderbolt etc and also

473
00:25:05,130 --> 00:25:14,490
architectures like a 86a arm etc and

474
00:25:10,140 --> 00:25:17,600
much more things at the moment we are

475
00:25:14,490 --> 00:25:20,730
studying Thunderbolt on Windows and

476
00:25:17,600 --> 00:25:23,550
because it's closed source we are

477
00:25:20,730 --> 00:25:27,060
reversing it the Intel software suite

478
00:25:23,550 --> 00:25:28,260
for Thunderbolts contains what we call

479
00:25:27,060 --> 00:25:31,919
the universal Windows platform

480
00:25:28,260 --> 00:25:36,450
application you probably know the this

481
00:25:31,920 --> 00:25:38,940
stuff it's the new Microsoft well not so

482
00:25:36,450 --> 00:25:41,460
new Microsoft application model with the

483
00:25:38,940 --> 00:25:46,370
online store etc we used to call it a

484
00:25:41,460 --> 00:25:50,340
metro so this is the uwp application

485
00:25:46,370 --> 00:25:53,280
this suits also has a service which

486
00:25:50,340 --> 00:25:56,459
communicates with the application but

487
00:25:53,280 --> 00:25:58,980
also with the Windows driver frameworks

488
00:25:56,460 --> 00:26:02,640
drivers and there are two drivers there

489
00:25:58,980 --> 00:26:05,790
is a userland driver and there is a

490
00:26:02,640 --> 00:26:12,270
kernel on driver these are the UMD f4

491
00:26:05,790 --> 00:26:15,899
userland and kmg f4 key analog and to

492
00:26:12,270 --> 00:26:18,270
finish he is the first schematic we've

493
00:26:15,900 --> 00:26:22,170
learnt you represent the insert under

494
00:26:18,270 --> 00:26:25,379
both stuff you can see that the UWP

495
00:26:22,170 --> 00:26:28,290
application and the service our

496
00:26:25,380 --> 00:26:33,030
community community community through

497
00:26:28,290 --> 00:26:36,120
another binary and DubLi wgf interact

498
00:26:33,030 --> 00:26:38,340
with the plugin file manager and this is

499
00:26:36,120 --> 00:26:40,020
what we are doing at the moment and plan

500
00:26:38,340 --> 00:26:43,620
to publish about it later

501
00:26:40,020 --> 00:26:44,190
the aim is to keep digging always two

502
00:26:43,620 --> 00:26:46,678
there are

503
00:26:44,190 --> 00:26:51,389
were later to understand how I AMA

504
00:26:46,679 --> 00:26:59,149
movies used actually thank you if you

505
00:26:51,389 --> 00:26:59,149
have any questions thank you very much

506
00:26:59,220 --> 00:27:03,990
I will give maybe two or three minutes

507
00:27:02,309 --> 00:27:05,940
for the participants to go and have a

508
00:27:03,990 --> 00:27:07,740
look at the question maybe of both some

509
00:27:05,940 --> 00:27:10,039
of them are asked for three minutes

510
00:27:07,740 --> 00:27:10,039
ahead so

511
00:27:17,500 --> 00:27:24,200
hi welcome back

512
00:27:20,600 --> 00:27:28,219
okay so first question are you planning

513
00:27:24,200 --> 00:27:32,090
to do some iommu DMA PRTs IT research on

514
00:27:28,220 --> 00:27:35,960
the iPhone yes we plan to do it's

515
00:27:32,090 --> 00:27:39,139
actually the the rapid stuff

516
00:27:35,960 --> 00:27:44,000
the French stuff at the beginning we we

517
00:27:39,140 --> 00:27:45,860
targeted solely the the PCI Express

518
00:27:44,000 --> 00:27:50,630
technologies because there are so many

519
00:27:45,860 --> 00:27:54,439
things but as iOS iPhone other phones

520
00:27:50,630 --> 00:27:57,230
are a target of interest there are more

521
00:27:54,440 --> 00:28:01,010
and more targeted we plan to do it yes

522
00:27:57,230 --> 00:28:03,380
and I think it will be a good thing to

523
00:28:01,010 --> 00:28:05,510
look at it yes in the near future or

524
00:28:03,380 --> 00:28:09,080
more like in a few years in fact all to

525
00:28:05,510 --> 00:28:13,430
say difficult to say as I said we've

526
00:28:09,080 --> 00:28:17,439
began to reverse the Thunderbolt stuff

527
00:28:13,430 --> 00:28:21,470
on on Windows and it's pretty fast so

528
00:28:17,440 --> 00:28:26,360
let's finish that and after we'll see ok

529
00:28:21,470 --> 00:28:28,370
ok good so if you did some DMA research

530
00:28:26,360 --> 00:28:31,850
on the iPhone already are you planning

531
00:28:28,370 --> 00:28:35,449
to release this well we haven't done the

532
00:28:31,850 --> 00:28:38,689
research on iPhone because these

533
00:28:35,450 --> 00:28:43,760
projects is public yes we will publish

534
00:28:38,690 --> 00:28:46,400
if we found something is the latest

535
00:28:43,760 --> 00:28:49,670
microwave still vulnerable to

536
00:28:46,400 --> 00:28:52,460
thunderclap enemy attacks no no no as I

537
00:28:49,670 --> 00:28:54,980
said this particular vulnerability was

538
00:28:52,460 --> 00:28:58,970
patched and the thunderclap platform

539
00:28:54,980 --> 00:29:02,200
uses this ability so not like a table

540
00:28:58,970 --> 00:29:02,200
anymore but it's interesting

541
00:29:04,930 --> 00:29:10,010
so are there any kind of signal

542
00:29:07,460 --> 00:29:11,960
signature or behavior that threat hunter

543
00:29:10,010 --> 00:29:20,080
could monitor to detect such attacks in

544
00:29:11,960 --> 00:29:24,350
your life they know signature love you I

545
00:29:20,080 --> 00:29:27,610
don't think so it may be if the the

546
00:29:24,350 --> 00:29:30,379
workstation that that was targeted

547
00:29:27,610 --> 00:29:33,289
wasn't rebooted and

548
00:29:30,380 --> 00:29:36,590
if yeah I think it's the the only thing

549
00:29:33,289 --> 00:29:39,320
because the principle of this kind of

550
00:29:36,590 --> 00:29:41,600
attacks is that you access the direct

551
00:29:39,320 --> 00:29:44,120
memory so the RAM and when you reboot

552
00:29:41,600 --> 00:29:48,500
the RAM it's just flash for the most

553
00:29:44,120 --> 00:29:50,899
part so it may be if you if you don't

554
00:29:48,500 --> 00:29:53,539
reboot the the computer but it's more

555
00:29:50,900 --> 00:29:56,059
likely being small likely very difficult

556
00:29:53,539 --> 00:29:57,980
to spot this kind of stuff except if

557
00:29:56,059 --> 00:30:03,280
there are some backdoors after that

558
00:29:57,980 --> 00:30:06,409
versa so it's not the the DMA stuff ok

559
00:30:03,280 --> 00:30:08,389
have you heard about DMA attacks

560
00:30:06,409 --> 00:30:12,340
targeting embedded devices using

561
00:30:08,390 --> 00:30:12,340
architectures such as arm nips

562
00:30:13,090 --> 00:30:23,389
I'm very device not shruthi's a guy in

563
00:30:20,030 --> 00:30:27,080
my in my company did some some stuff on

564
00:30:23,390 --> 00:30:31,250
the HPI though it's not really embedded

565
00:30:27,080 --> 00:30:35,330
but it's kind of server and there is

566
00:30:31,250 --> 00:30:38,900
also the guy which produces the PCIe

567
00:30:35,330 --> 00:30:41,899
screamer Ramson I mean who did some GMA

568
00:30:38,900 --> 00:30:44,000
on the iPhone so well it's not really

569
00:30:41,900 --> 00:30:47,710
embedded devices but you have this kind

570
00:30:44,000 --> 00:30:49,789
of architecture beside the the arm etc

571
00:30:47,710 --> 00:30:59,320
could we say that it's like a little bit

572
00:30:49,789 --> 00:31:02,450
under research I don't know okay

573
00:30:59,320 --> 00:31:06,260
can you read write TPM registers that

574
00:31:02,450 --> 00:31:10,909
physical address fit 40000 through PMA

575
00:31:06,260 --> 00:31:14,780
when the IMU is disabled which address

576
00:31:10,909 --> 00:31:18,250
so I've heard the TPM yeah and registers

577
00:31:14,780 --> 00:31:21,830
that physical address said for the down

578
00:31:18,250 --> 00:31:24,289
you mean you mean in the in the CPR of

579
00:31:21,830 --> 00:31:26,960
the TPM because the TPM has some

580
00:31:24,289 --> 00:31:29,690
registers and the principle of the TPM

581
00:31:26,960 --> 00:31:32,270
is that it's a it's a secure device it's

582
00:31:29,690 --> 00:31:35,090
secure components so you counts accesses

583
00:31:32,270 --> 00:31:39,710
I don't know if I understood well the

584
00:31:35,090 --> 00:31:41,870
question because if it's that's no you

585
00:31:39,710 --> 00:31:44,200
can't you can't access the TPM but

586
00:31:41,870 --> 00:31:47,800
whatever the TPM is it

587
00:31:44,200 --> 00:31:51,740
exporting should be used by the

588
00:31:47,800 --> 00:31:58,730
exploitation system at this moment yes

589
00:31:51,740 --> 00:32:02,900
you can because it's in main memory are

590
00:31:58,730 --> 00:32:12,920
there I am us in embedded systems such

591
00:32:02,900 --> 00:32:15,050
as stm32f4 the STM well honestly I don't

592
00:32:12,920 --> 00:32:19,670
really know as a trainer but I don't

593
00:32:15,050 --> 00:32:21,680
think so okay are you leveraging the

594
00:32:19,670 --> 00:32:25,610
work done by the inception project in

595
00:32:21,680 --> 00:32:27,770
your research yes the inception project

596
00:32:25,610 --> 00:32:30,830
was really cool actually I've done some

597
00:32:27,770 --> 00:32:33,350
pull requests in its but the the

598
00:32:30,830 --> 00:32:37,210
inception project the guy who did this

599
00:32:33,350 --> 00:32:40,129
great work he he doesn't commit a lot so

600
00:32:37,210 --> 00:32:43,670
actually the the what is done is

601
00:32:40,130 --> 00:32:44,750
inception is basically the same thing as

602
00:32:43,670 --> 00:32:47,780
PC islets

603
00:32:44,750 --> 00:32:51,440
it's just that inception also supports

604
00:32:47,780 --> 00:32:53,420
the firewire case so when we're doing

605
00:32:51,440 --> 00:32:55,910
when your pen tester and you want to do

606
00:32:53,420 --> 00:32:58,940
some attacks if you have some firewire

607
00:32:55,910 --> 00:33:04,070
you will switch to Inception otherwise

608
00:32:58,940 --> 00:33:06,980
you'll use physiology okay and one last

609
00:33:04,070 --> 00:33:09,980
question for an on Apple hardware does

610
00:33:06,980 --> 00:33:12,980
IM iommu seems to be correctly

611
00:33:09,980 --> 00:33:15,580
implemented at the unifier level we

612
00:33:12,980 --> 00:33:21,850
haven't the carriers so I can answer

613
00:33:15,580 --> 00:33:25,790
unfortunately but we plan to merit near

614
00:33:21,850 --> 00:33:28,040
computer same thing but actually because

615
00:33:25,790 --> 00:33:29,840
as I said there are lots of stuff which

616
00:33:28,040 --> 00:33:34,580
is open-source

617
00:33:29,840 --> 00:33:37,010
I think they probably already some stuff

618
00:33:34,580 --> 00:33:41,810
on the internet so somebody you probably

619
00:33:37,010 --> 00:33:43,610
looked at there I don't know okay well

620
00:33:41,810 --> 00:33:47,300
thank you very much like stuff for being

621
00:33:43,610 --> 00:33:49,370
to you I'm sure about a big round of

622
00:33:47,300 --> 00:33:50,060
applause to you through the chat thank

623
00:33:49,370 --> 00:33:54,699
you guys

624
00:33:50,060 --> 00:33:54,700
and then I will take a short break and

625
00:33:55,680 --> 00:34:14,030
[Music]

