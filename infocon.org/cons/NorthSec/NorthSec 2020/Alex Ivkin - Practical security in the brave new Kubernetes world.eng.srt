1
00:00:01,130 --> 00:00:20,198
[Music]

2
00:00:17,640 --> 00:00:22,420
hello backstory I messed up earlier

3
00:00:20,199 --> 00:00:24,759
presented another talk today instead

4
00:00:22,420 --> 00:00:27,160
we'll be talking about right now

5
00:00:24,759 --> 00:00:30,669
practical security and the brave new

6
00:00:27,160 --> 00:00:32,740
kubernetes world with Alex if Jim who's

7
00:00:30,669 --> 00:00:35,800
a director of solutions that equipped on

8
00:00:32,740 --> 00:00:37,840
a u.s. security company he his focus is

9
00:00:35,800 --> 00:00:40,330
on secure deployment of unsecure or

10
00:00:37,840 --> 00:00:42,370
secure software including container

11
00:00:40,330 --> 00:00:44,980
orchestration application security and

12
00:00:42,370 --> 00:00:46,660
firmware security alex has two decades

13
00:00:44,980 --> 00:00:48,519
of security integration experience

14
00:00:46,660 --> 00:00:50,980
presented at numerous security

15
00:00:48,520 --> 00:00:53,080
conferences delivered training hold a

16
00:00:50,980 --> 00:00:56,709
master in computer science co-authors

17
00:00:53,080 --> 00:00:59,019
the isocost yet certification and climb

18
00:00:56,710 --> 00:01:02,980
mountains in his spare time so give a

19
00:00:59,020 --> 00:01:04,629
good round of applause to Alex thank you

20
00:01:02,980 --> 00:01:07,780
thank you I can I can hear all those

21
00:01:04,629 --> 00:01:10,390
opposed right yeah thank you for joining

22
00:01:07,780 --> 00:01:12,940
I'm excited to be here it's really a

23
00:01:10,390 --> 00:01:15,550
great thing to be here and I'm gonna

24
00:01:12,940 --> 00:01:18,310
start switching into the presentation

25
00:01:15,550 --> 00:01:20,620
right now so everybody can actually see

26
00:01:18,310 --> 00:01:34,240
the presentation instead of my screens

27
00:01:20,620 --> 00:01:39,040
in the bag now presentation no thank you

28
00:01:34,240 --> 00:01:41,380
very much I'm sure you've seen before a

29
00:01:39,040 --> 00:01:43,630
lot of presentations in kubernetes world

30
00:01:41,380 --> 00:01:45,009
start with the nautical themes so I'm no

31
00:01:43,630 --> 00:01:47,979
different I'm actually gonna put on my

32
00:01:45,010 --> 00:01:51,270
my pirate hat you don't see it today

33
00:01:47,979 --> 00:01:55,658
right now but oh you'll see it later

34
00:01:51,270 --> 00:01:57,908
there there there so I I'm not gonna

35
00:01:55,659 --> 00:02:01,720
take all inpired speak but if you're so

36
00:01:57,909 --> 00:02:04,720
good I have my hat right so if you've

37
00:02:01,720 --> 00:02:07,179
ever been feeling overwhelmed or if

38
00:02:04,720 --> 00:02:08,679
you've started looking at the new cool

39
00:02:07,180 --> 00:02:11,140
technologies that are coming from the

40
00:02:08,679 --> 00:02:13,629
DevOps world and started thinking that

41
00:02:11,140 --> 00:02:15,879
hey they're building so much rapid stuff

42
00:02:13,629 --> 00:02:17,170
so quick and there's many many new

43
00:02:15,879 --> 00:02:20,620
technologies coming onboard

44
00:02:17,170 --> 00:02:22,929
that I just you know feel that I'm not

45
00:02:20,620 --> 00:02:26,380
following not coming through not

46
00:02:22,930 --> 00:02:28,090
understanding them enough well it's true

47
00:02:26,380 --> 00:02:29,859
yes they're building it and they're

48
00:02:28,090 --> 00:02:32,140
building it really really fast and the

49
00:02:29,860 --> 00:02:34,750
question in everybody's minds who's

50
00:02:32,140 --> 00:02:36,519
doing the security is is that a good

51
00:02:34,750 --> 00:02:38,590
thing is that a bad thing well how do I

52
00:02:36,520 --> 00:02:40,600
start thinking about all the new cool

53
00:02:38,590 --> 00:02:43,000
technologies that are my developers are

54
00:02:40,600 --> 00:02:45,579
picking up and I'm here to tell you that

55
00:02:43,000 --> 00:02:47,319
it's not all that bad there's actually

56
00:02:45,580 --> 00:02:49,269
really good things about it there's some

57
00:02:47,319 --> 00:02:52,060
bad things about it this presentation is

58
00:02:49,269 --> 00:02:54,100
about the details of what it means to be

59
00:02:52,060 --> 00:02:57,160
running DevOps and communities and

60
00:02:54,100 --> 00:03:00,640
adopting the developer mindset so there

61
00:02:57,160 --> 00:03:02,109
am Alex Afghan I come from the land of

62
00:03:00,640 --> 00:03:04,059
the trees from Portland Oregon

63
00:03:02,110 --> 00:03:08,080
you heard all about me and we're gonna

64
00:03:04,060 --> 00:03:10,209
start the modern application stack if

65
00:03:08,080 --> 00:03:12,459
you think about it doesn't consist of

66
00:03:10,209 --> 00:03:17,049
the usual platforms that you used to

67
00:03:12,459 --> 00:03:18,730
what it does in consists of is platform

68
00:03:17,049 --> 00:03:20,620
in the back you know that server that's

69
00:03:18,730 --> 00:03:24,310
actually running some some serverless

70
00:03:20,620 --> 00:03:26,980
components on it that also has an OS and

71
00:03:24,310 --> 00:03:29,799
the kernel on top of it and then there's

72
00:03:26,980 --> 00:03:31,690
the container ecosystem the runtime an

73
00:03:29,799 --> 00:03:33,190
Orchestrator that puts all those

74
00:03:31,690 --> 00:03:35,380
containers together and finally the

75
00:03:33,190 --> 00:03:37,269
application so in this talk I'm not

76
00:03:35,380 --> 00:03:39,640
gonna talk about the two lower pieces

77
00:03:37,269 --> 00:03:41,980
even though I actually work with the

78
00:03:39,640 --> 00:03:43,570
lower level of security they're outside

79
00:03:41,980 --> 00:03:46,780
of this we're gonna focus on application

80
00:03:43,570 --> 00:03:48,579
Orchestrator and container so everybody

81
00:03:46,780 --> 00:03:50,590
heard about containers some of you've

82
00:03:48,579 --> 00:03:52,720
been trying playing even maybe hacking

83
00:03:50,590 --> 00:03:54,850
containers and the question the first

84
00:03:52,720 --> 00:03:57,579
question that everybody has is can

85
00:03:54,850 --> 00:03:59,799
containers help with my security and the

86
00:03:57,579 --> 00:04:01,600
answer is yes yeah yeah if you build

87
00:03:59,799 --> 00:04:03,130
them and deploy them and run them

88
00:04:01,600 --> 00:04:06,100
properly and I'll give you a couple of

89
00:04:03,130 --> 00:04:08,260
examples where they help is persistence

90
00:04:06,100 --> 00:04:10,239
containers you can wipe them off so it

91
00:04:08,260 --> 00:04:13,720
makes harder to pursue so a specific

92
00:04:10,239 --> 00:04:15,340
container it's harder to do tooling or

93
00:04:13,720 --> 00:04:17,560
living off the land there's just not

94
00:04:15,340 --> 00:04:19,630
enough tools and an average container

95
00:04:17,560 --> 00:04:21,940
for you to do in the Furious activities

96
00:04:19,630 --> 00:04:24,190
or for somebody else to do it

97
00:04:21,940 --> 00:04:26,169
things like path traversal obviously are

98
00:04:24,190 --> 00:04:27,640
limited resource consumption if you're

99
00:04:26,169 --> 00:04:28,349
on incorrectly so there's certain things

100
00:04:27,640 --> 00:04:30,289
that

101
00:04:28,349 --> 00:04:34,039
containers do well

102
00:04:30,290 --> 00:04:35,180
now if your app is bad the container

103
00:04:34,040 --> 00:04:37,220
will never fix it

104
00:04:35,180 --> 00:04:38,660
so if you've got any of the issues that

105
00:04:37,220 --> 00:04:40,730
your app has been suffering before

106
00:04:38,660 --> 00:04:42,950
you've put it on here it's still gotta

107
00:04:40,730 --> 00:04:45,200
suffer from those and you know in

108
00:04:42,950 --> 00:04:47,330
injections and security civilization

109
00:04:45,200 --> 00:04:51,469
runtime exploits all the other

110
00:04:47,330 --> 00:04:53,240
boundaries and the references overflows

111
00:04:51,470 --> 00:04:55,940
and records and how my views timeless

112
00:04:53,240 --> 00:04:57,530
check all those fun stuff is still gonna

113
00:04:55,940 --> 00:04:59,990
be there still gonna be crashing your

114
00:04:57,530 --> 00:05:02,989
app and making it easier to use and more

115
00:04:59,990 --> 00:05:05,540
importantly things like cross-site

116
00:05:02,990 --> 00:05:07,070
request forgery or even server site

117
00:05:05,540 --> 00:05:10,430
request forgery become even more

118
00:05:07,070 --> 00:05:13,730
important but because now you're with

119
00:05:10,430 --> 00:05:15,500
those you get an insight into not just a

120
00:05:13,730 --> 00:05:17,660
application but the container that it's

121
00:05:15,500 --> 00:05:20,810
running on and the orchestrator that

122
00:05:17,660 --> 00:05:23,120
it's on and containers also add their

123
00:05:20,810 --> 00:05:26,270
additional issues with software supply

124
00:05:23,120 --> 00:05:29,150
chain and I'll cover that in a bit so

125
00:05:26,270 --> 00:05:30,200
alright containers out we've talked

126
00:05:29,150 --> 00:05:31,760
about them there's plenty of

127
00:05:30,200 --> 00:05:33,349
presentation talk about security of

128
00:05:31,760 --> 00:05:36,770
containers and what's good what's bad

129
00:05:33,350 --> 00:05:39,470
about them good summary now how do you

130
00:05:36,770 --> 00:05:42,020
ship your containers you really don't

131
00:05:39,470 --> 00:05:43,430
deliver your application in one single

132
00:05:42,020 --> 00:05:45,109
container it just doesn't make sense

133
00:05:43,430 --> 00:05:47,180
that the whole idea about splitting up

134
00:05:45,110 --> 00:05:48,740
monolithic apps is you have multiple

135
00:05:47,180 --> 00:05:50,900
small components that are independent

136
00:05:48,740 --> 00:05:53,690
with each other so you ship it with

137
00:05:50,900 --> 00:05:56,900
something and there's all good friends

138
00:05:53,690 --> 00:05:59,180
of ours that we've been seeing in the

139
00:05:56,900 --> 00:06:01,580
past and tried and true and have

140
00:05:59,180 --> 00:06:04,010
experience with that provides

141
00:06:01,580 --> 00:06:05,750
declarative deployments where you tell

142
00:06:04,010 --> 00:06:08,210
what you want and then it figures out

143
00:06:05,750 --> 00:06:11,120
how to do it there have been all good

144
00:06:08,210 --> 00:06:13,370
and so but they also have quite a bit of

145
00:06:11,120 --> 00:06:16,330
limitations so the new kid on the block

146
00:06:13,370 --> 00:06:22,040
spin now for several years kubernetes

147
00:06:16,330 --> 00:06:25,640
kubernetes yay the captain there and you

148
00:06:22,040 --> 00:06:27,770
can see from different reports criminate

149
00:06:25,640 --> 00:06:30,710
has been taking a whole precedence over

150
00:06:27,770 --> 00:06:32,180
other types of orchestrators on the

151
00:06:30,710 --> 00:06:34,940
market it's it's a clear majority

152
00:06:32,180 --> 00:06:37,130
everybody's taking on it everybody's

153
00:06:34,940 --> 00:06:41,000
trying to use it trying to understand it

154
00:06:37,130 --> 00:06:43,680
trying to hack ass so what's good about

155
00:06:41,000 --> 00:06:47,910
it and where does it help

156
00:06:43,680 --> 00:06:50,580
well it does here some help with

157
00:06:47,910 --> 00:06:52,860
security and helps natively with

158
00:06:50,580 --> 00:06:54,840
security the biggest thing that helps

159
00:06:52,860 --> 00:06:58,050
with is it allows you containers to

160
00:06:54,840 --> 00:07:02,609
leave very short lifespans meaning that

161
00:06:58,050 --> 00:07:04,650
if you deploy your micro services that

162
00:07:02,610 --> 00:07:07,020
only need to run for less than 10

163
00:07:04,650 --> 00:07:10,229
seconds you do it with orchestrators and

164
00:07:07,020 --> 00:07:12,060
that kills attempts to abuse that

165
00:07:10,229 --> 00:07:14,870
specific container within 10 seconds so

166
00:07:12,060 --> 00:07:18,000
your exposure is is really limited and

167
00:07:14,870 --> 00:07:19,830
likewise you have a bunch of containers

168
00:07:18,000 --> 00:07:22,020
that are mixing and mashing and living

169
00:07:19,830 --> 00:07:24,870
on different nodes flipping servers so

170
00:07:22,020 --> 00:07:28,469
your persistence becomes a headache if

171
00:07:24,870 --> 00:07:32,160
you're a red teamer that's good what's

172
00:07:28,470 --> 00:07:34,800
bad well I said can they help with

173
00:07:32,160 --> 00:07:38,460
security yes if you know what you're

174
00:07:34,800 --> 00:07:43,050
doing and that if is the biggest if I've

175
00:07:38,460 --> 00:07:45,448
seen in my security career the things

176
00:07:43,050 --> 00:07:47,820
that I've seen working with different

177
00:07:45,449 --> 00:07:52,199
cluster installations and communities

178
00:07:47,820 --> 00:07:54,840
deployments is the misunderstanding the

179
00:07:52,199 --> 00:07:58,410
taking of the defaults as if they were

180
00:07:54,840 --> 00:08:01,859
secure or picking the wrong components

181
00:07:58,410 --> 00:08:04,289
is what hurts most deployments so things

182
00:08:01,860 --> 00:08:06,180
that I've seen just list them the bad

183
00:08:04,289 --> 00:08:09,719
authentication access controls security

184
00:08:06,180 --> 00:08:12,210
misconfigurations people have you know

185
00:08:09,720 --> 00:08:16,620
always had login monitoring as an author

186
00:08:12,210 --> 00:08:18,090
afterthought and missing on a mutual TLS

187
00:08:16,620 --> 00:08:19,620
and service accounts and secrets

188
00:08:18,090 --> 00:08:24,900
distribution all that kind of finest

189
00:08:19,620 --> 00:08:26,880
stuff so to understand the extent of

190
00:08:24,900 --> 00:08:29,370
that problem and to see how we can deal

191
00:08:26,880 --> 00:08:32,309
with that I wanted to walk you through

192
00:08:29,370 --> 00:08:34,830
steps of what it takes to deploy and

193
00:08:32,309 --> 00:08:37,380
modern application on the communities

194
00:08:34,830 --> 00:08:39,919
platform so obviously you can't just

195
00:08:37,380 --> 00:08:44,189
throw a bunch of containers down if you

196
00:08:39,919 --> 00:08:46,410
have your pieces of application on the

197
00:08:44,190 --> 00:08:48,209
web talking to each other you need to

198
00:08:46,410 --> 00:08:49,890
have some sort of way to talk to them

199
00:08:48,209 --> 00:08:51,900
externally so you have to have an

200
00:08:49,890 --> 00:08:53,579
ingress point and you have to have a

201
00:08:51,900 --> 00:08:55,949
service match so that they can

202
00:08:53,579 --> 00:08:56,969
communicate with each other once you get

203
00:08:55,950 --> 00:08:58,860
that

204
00:08:56,970 --> 00:09:02,129
you need to introduce a way of

205
00:08:58,860 --> 00:09:03,149
monitoring your performance if it's a

206
00:09:02,129 --> 00:09:04,620
production application they obviously

207
00:09:03,149 --> 00:09:07,980
don't want it to be slow you don't want

208
00:09:04,620 --> 00:09:10,500
it to go down accidentally or you don't

209
00:09:07,980 --> 00:09:12,660
want to see what kind of issues airs

210
00:09:10,500 --> 00:09:14,910
that it's having and catch them ahead of

211
00:09:12,660 --> 00:09:18,000
time so you need to introduce a metric

212
00:09:14,910 --> 00:09:19,649
store a lock store and tools to monitor

213
00:09:18,000 --> 00:09:23,279
those metrics as they're being collected

214
00:09:19,649 --> 00:09:24,959
and monitoring the logs then you start

215
00:09:23,279 --> 00:09:26,519
thinking about it and yeah you have to

216
00:09:24,959 --> 00:09:28,290
have the authorization you know that

217
00:09:26,519 --> 00:09:30,870
pesky thing that security folks are

218
00:09:28,290 --> 00:09:33,540
pushing me to do and you have to make

219
00:09:30,870 --> 00:09:36,029
sure that the API that is being

220
00:09:33,540 --> 00:09:38,430
collected is authorized and you're

221
00:09:36,029 --> 00:09:40,259
actually making decisions on who to

222
00:09:38,430 --> 00:09:43,469
provide data based on authorization not

223
00:09:40,259 --> 00:09:45,420
just your trust then you have to have a

224
00:09:43,470 --> 00:09:47,250
network controller because you know

225
00:09:45,420 --> 00:09:50,579
there's other security folks who saying

226
00:09:47,250 --> 00:09:55,529
oh we got a control cow who and how

227
00:09:50,579 --> 00:09:57,388
talks to our network and then once

228
00:09:55,529 --> 00:09:59,730
you've got all that you need to think

229
00:09:57,389 --> 00:10:02,129
about how do I bring all those

230
00:09:59,730 --> 00:10:04,949
containers together and deploy them on

231
00:10:02,129 --> 00:10:07,709
my cluster so you have to have a

232
00:10:04,949 --> 00:10:11,399
registry that contains all those various

233
00:10:07,709 --> 00:10:14,099
pieces of stuff and then once you have

234
00:10:11,399 --> 00:10:15,779
so many pieces you have them you need a

235
00:10:14,100 --> 00:10:18,509
way of managing those pieces and

236
00:10:15,779 --> 00:10:20,550
deploying them in one swap or upgrading

237
00:10:18,509 --> 00:10:22,170
them as a unit instead of trying to

238
00:10:20,550 --> 00:10:23,969
upgraded all the little pieces together

239
00:10:22,170 --> 00:10:25,769
and getting yourselves in a mess so you

240
00:10:23,970 --> 00:10:29,730
need some sort of a package manager for

241
00:10:25,769 --> 00:10:32,430
for those pieces and if it weren't

242
00:10:29,730 --> 00:10:35,309
already too complex you also need TLS

243
00:10:32,430 --> 00:10:38,219
because yes because encryption and you

244
00:10:35,309 --> 00:10:39,870
also need dashboards who have a look at

245
00:10:38,220 --> 00:10:42,389
all this mess and and have an

246
00:10:39,870 --> 00:10:44,910
existential thought of why did I get

247
00:10:42,389 --> 00:10:47,579
myself into all this trouble and the

248
00:10:44,910 --> 00:10:49,829
trouble is big so when you've collected

249
00:10:47,579 --> 00:10:52,290
all those components when you've pulled

250
00:10:49,829 --> 00:10:54,989
it all together this is the echo system

251
00:10:52,290 --> 00:10:58,319
this is literally screenshot of the

252
00:10:54,990 --> 00:11:00,740
cloud native landscape that now exists

253
00:10:58,319 --> 00:11:04,680
that's grown around the kubernetes

254
00:11:00,740 --> 00:11:09,120
ecosystem that provides different pieces

255
00:11:04,680 --> 00:11:10,680
of software support and monitoring

256
00:11:09,120 --> 00:11:12,990
management

257
00:11:10,680 --> 00:11:14,880
for your application on communities it's

258
00:11:12,990 --> 00:11:17,640
literally that massive and it's getting

259
00:11:14,880 --> 00:11:19,380
bigger and bigger every day so you can

260
00:11:17,640 --> 00:11:21,510
see how many different pieces of

261
00:11:19,380 --> 00:11:24,930
software it actually takes to run a

262
00:11:21,510 --> 00:11:27,779
fully micro service fully containerized

263
00:11:24,930 --> 00:11:32,670
application in production on communities

264
00:11:27,779 --> 00:11:34,200
and with that come security issues one

265
00:11:32,670 --> 00:11:37,110
of the most popular in Grosse Pointe

266
00:11:34,200 --> 00:11:39,300
East EO has plenty of those and they're

267
00:11:37,110 --> 00:11:42,149
being addressed but as we all know

268
00:11:39,300 --> 00:11:44,040
security needs bashing and this batch

269
00:11:42,149 --> 00:11:48,029
has happened slowly gravano

270
00:11:44,040 --> 00:11:51,149
one of the collectors or display tools

271
00:11:48,029 --> 00:11:53,970
for prometheus which is the very popular

272
00:11:51,149 --> 00:11:56,850
metrics collection tool in communities

273
00:11:53,970 --> 00:12:01,050
they they both have security issues and

274
00:11:56,850 --> 00:12:04,649
envoi the their most popular may be

275
00:12:01,050 --> 00:12:08,250
sense linker d-- mash for your

276
00:12:04,649 --> 00:12:10,500
communities pods that has its own issues

277
00:12:08,250 --> 00:12:12,330
this is what i'm showing here is is very

278
00:12:10,500 --> 00:12:16,010
critical components that your

279
00:12:12,330 --> 00:12:21,380
coordinated system relies on and has a

280
00:12:16,010 --> 00:12:24,390
specific interest in keeping secure so

281
00:12:21,380 --> 00:12:26,610
i'll give you an example let's say

282
00:12:24,390 --> 00:12:29,220
you're making early church system you

283
00:12:26,610 --> 00:12:31,470
wanted to say what is that community's

284
00:12:29,220 --> 00:12:34,709
network plugin that i want to use in my

285
00:12:31,470 --> 00:12:38,760
specific deployment only is more than

286
00:12:34,709 --> 00:12:41,010
eight available and if you pick nazi

287
00:12:38,760 --> 00:12:42,930
Liam not we've we've nat which is a

288
00:12:41,010 --> 00:12:45,600
commercial partial commercial

289
00:12:42,930 --> 00:12:47,609
application you're gonna end up with no

290
00:12:45,600 --> 00:12:49,709
encryption so you'll have to flip it at

291
00:12:47,610 --> 00:12:50,070
some point later and then would be a big

292
00:12:49,709 --> 00:12:52,920
headache

293
00:12:50,070 --> 00:12:55,070
that's easy mistakes to make in the

294
00:12:52,920 --> 00:12:58,740
beginning when you're deploying now

295
00:12:55,070 --> 00:13:00,870
ingress controllers alright so what if

296
00:12:58,740 --> 00:13:03,990
what I do to pick a right ingress

297
00:13:00,870 --> 00:13:06,120
controller into my kubernetes well you

298
00:13:03,990 --> 00:13:08,100
can see there's ingress nginx

299
00:13:06,120 --> 00:13:09,750
and I'm not sure if you heard there's

300
00:13:08,100 --> 00:13:11,459
also nginx ingress and they're

301
00:13:09,750 --> 00:13:13,980
completely different one comes from

302
00:13:11,459 --> 00:13:16,439
Intel from kubernetes koala the other

303
00:13:13,980 --> 00:13:18,209
one comes from the nginx crowd so

304
00:13:16,440 --> 00:13:20,130
completely different you can see they're

305
00:13:18,209 --> 00:13:21,160
completely different in terms of how

306
00:13:20,130 --> 00:13:23,920
they're handling or

307
00:13:21,160 --> 00:13:26,469
even thinking about security pick one

308
00:13:23,920 --> 00:13:29,910
over another and you might end up in a

309
00:13:26,470 --> 00:13:32,470
bit of a trouble later on talking to

310
00:13:29,910 --> 00:13:36,009
authentication or trying to support draw

311
00:13:32,470 --> 00:13:37,449
tickets or tokens similarly for the

312
00:13:36,009 --> 00:13:39,970
other ones too

313
00:13:37,449 --> 00:13:41,979
II still thankfully has been getting

314
00:13:39,970 --> 00:13:44,620
some momentum and some support from

315
00:13:41,980 --> 00:13:48,610
Google so it has a bit of a support

316
00:13:44,620 --> 00:13:54,670
behind it and a bit of a help in getting

317
00:13:48,610 --> 00:13:56,259
that going but it's still fairly it

318
00:13:54,670 --> 00:13:57,180
still needs to work to be done let me

319
00:13:56,259 --> 00:13:59,740
put it this way

320
00:13:57,180 --> 00:14:03,069
ambassador traffic and what do you see

321
00:13:59,740 --> 00:14:07,389
here is actually only six that I picked

322
00:14:03,069 --> 00:14:08,889
out of probably well 15 different

323
00:14:07,389 --> 00:14:11,110
ingress controllers that are available

324
00:14:08,889 --> 00:14:12,790
right now for kubernetes I have a link

325
00:14:11,110 --> 00:14:16,240
at the bottom of that presentation

326
00:14:12,790 --> 00:14:20,259
that'll send you through the whole list

327
00:14:16,240 --> 00:14:22,899
if you're so inclined well so you

328
00:14:20,259 --> 00:14:27,279
thought about this and maybe a thought

329
00:14:22,899 --> 00:14:28,689
in your hat is well I I know this piece

330
00:14:27,279 --> 00:14:30,819
is very difficult to pick and maybe I

331
00:14:28,689 --> 00:14:33,250
can plan the time around and picking us

332
00:14:30,819 --> 00:14:36,250
different components and and putting

333
00:14:33,250 --> 00:14:38,079
them together before architected but the

334
00:14:36,250 --> 00:14:40,389
very basic decision that you have to

335
00:14:38,079 --> 00:14:43,209
make is the one of how do I run

336
00:14:40,389 --> 00:14:46,329
kubernetes do I run it myself on my own

337
00:14:43,209 --> 00:14:48,880
bare metal servers or do I run it in the

338
00:14:46,329 --> 00:14:51,670
cloud on their servers or do I trust

339
00:14:48,880 --> 00:14:55,149
somebody else to run it like Google

340
00:14:51,670 --> 00:14:58,219
Amazon assure and even digitalocean has

341
00:14:55,149 --> 00:15:00,340
their own offering so

342
00:14:58,220 --> 00:15:04,030
this is where you run into trouble too

343
00:15:00,340 --> 00:15:07,130
if you've looked and seen previous

344
00:15:04,030 --> 00:15:09,050
presentations about security and the

345
00:15:07,130 --> 00:15:12,350
container security you probably know

346
00:15:09,050 --> 00:15:15,319
already by now that darker is has really

347
00:15:12,350 --> 00:15:17,810
good defaults in the beginning from

348
00:15:15,320 --> 00:15:20,990
security standpoint so that when you run

349
00:15:17,810 --> 00:15:23,060
on application in darker with defaults

350
00:15:20,990 --> 00:15:25,100
it's gonna protect you from a lot of

351
00:15:23,060 --> 00:15:27,229
things and I've listened this here so

352
00:15:25,100 --> 00:15:29,330
darker D comes with a programmer enabled

353
00:15:27,230 --> 00:15:31,370
by default there's a comp for a file

354
00:15:29,330 --> 00:15:34,180
that is filtering a lot of calls there

355
00:15:31,370 --> 00:15:38,000
is blocking 56 calls and that's all good

356
00:15:34,180 --> 00:15:41,930
now what you probably didn't know is if

357
00:15:38,000 --> 00:15:44,200
you run me cube which is one of the ways

358
00:15:41,930 --> 00:15:46,520
to developers for a developer to run

359
00:15:44,200 --> 00:15:48,740
kubernetes really quickly on their own

360
00:15:46,520 --> 00:15:50,000
laptop so you don't get any of it you

361
00:15:48,740 --> 00:15:51,740
didn't get a pardon or you didn't get a

362
00:15:50,000 --> 00:15:52,430
sec profiles you don't block in issues

363
00:15:51,740 --> 00:15:55,400
calls so

364
00:15:52,430 --> 00:15:59,329
woohoo that means basically you can hose

365
00:15:55,400 --> 00:16:01,670
your own system really really fast maybe

366
00:15:59,330 --> 00:16:04,820
not a big deal and you probably break

367
00:16:01,670 --> 00:16:08,420
you system periodically so whatever but

368
00:16:04,820 --> 00:16:10,730
there are others like k3s that promise

369
00:16:08,420 --> 00:16:14,240
more of a production ready deployments

370
00:16:10,730 --> 00:16:17,390
they still don't adopt the good defaults

371
00:16:14,240 --> 00:16:20,540
they're still not filtering in ii

372
00:16:17,390 --> 00:16:21,740
profiles they still allow little more

373
00:16:20,540 --> 00:16:24,740
than normal

374
00:16:21,740 --> 00:16:27,860
sis calls to go through and to give you

375
00:16:24,740 --> 00:16:31,400
an example of what a non blocks call can

376
00:16:27,860 --> 00:16:33,800
do if you don't block on share it

377
00:16:31,400 --> 00:16:36,260
literally takes one command on sure -

378
00:16:33,800 --> 00:16:39,620
are inside of a non privileged container

379
00:16:36,260 --> 00:16:41,930
to elevate to root because it'll

380
00:16:39,620 --> 00:16:43,850
actually share the routes namespace the

381
00:16:41,930 --> 00:16:45,439
username space with you inside the

382
00:16:43,850 --> 00:16:46,910
container and then your route and so

383
00:16:45,440 --> 00:16:49,040
your whole if you're basing your

384
00:16:46,910 --> 00:16:52,040
security model in containers on running

385
00:16:49,040 --> 00:16:54,380
as non-root users then your whole

386
00:16:52,040 --> 00:16:56,329
security is out of the blown out of the

387
00:16:54,380 --> 00:17:00,589
water just because you didn't block once

388
00:16:56,330 --> 00:17:04,060
this call now when you go to cloud

389
00:17:00,589 --> 00:17:06,589
providers like GC PE or AWS who as your

390
00:17:04,060 --> 00:17:08,810
you can see them even though they're not

391
00:17:06,589 --> 00:17:11,720
blocking syscalls as many syscalls

392
00:17:08,810 --> 00:17:13,549
it's you see on this lower column what

393
00:17:11,720 --> 00:17:15,409
actually realized after investigating

394
00:17:13,549 --> 00:17:19,280
and playing around with those

395
00:17:15,409 --> 00:17:21,380
communities systems is that they block

396
00:17:19,280 --> 00:17:23,990
those Seuss calls at the node level they

397
00:17:21,380 --> 00:17:27,500
have their own hardened operating

398
00:17:23,990 --> 00:17:30,500
systems that are 89 assist calls not by

399
00:17:27,500 --> 00:17:33,650
kubernetes but by the OS and kernel

400
00:17:30,500 --> 00:17:37,630
themselves so this is good what I

401
00:17:33,650 --> 00:17:40,309
calling this sense is that generally

402
00:17:37,630 --> 00:17:45,400
your cloud providers are doing better

403
00:17:40,309 --> 00:17:45,399
than you would out-of-the-box yourself

404
00:17:45,900 --> 00:17:52,320
all right well so that brings us to to

405
00:17:50,370 --> 00:17:54,750
the most important points is oh man this

406
00:17:52,320 --> 00:17:56,370
is so much crap there's just a lot of

407
00:17:54,750 --> 00:17:59,340
things that I could go wrong with

408
00:17:56,370 --> 00:18:01,320
kubernetes and it's a big if in in

409
00:17:59,340 --> 00:18:05,929
asking myself if I could actually run

410
00:18:01,320 --> 00:18:09,210
and execute all those micro services

411
00:18:05,930 --> 00:18:11,190
successfully so what they do well I'm

412
00:18:09,210 --> 00:18:12,930
here to give you several advices

413
00:18:11,190 --> 00:18:16,770
real-world practical advices that I've

414
00:18:12,930 --> 00:18:20,600
run into and I've done over a couple of

415
00:18:16,770 --> 00:18:23,970
years in the past deploying stuff so a

416
00:18:20,600 --> 00:18:28,080
very easy set of steps that you can do

417
00:18:23,970 --> 00:18:35,280
to make sure that you actually deploy

418
00:18:28,080 --> 00:18:37,050
correctly is to focus on getting the

419
00:18:35,280 --> 00:18:40,470
images there

420
00:18:37,050 --> 00:18:42,870
you don't trust essentially you either

421
00:18:40,470 --> 00:18:45,840
start your own images from the beginning

422
00:18:42,870 --> 00:18:48,810
or if you can't or if your developers

423
00:18:45,840 --> 00:18:51,179
don't want to start your images from a

424
00:18:48,810 --> 00:18:54,060
darker file that you've reconstructed

425
00:18:51,180 --> 00:18:55,950
what that means is that um you might

426
00:18:54,060 --> 00:18:58,409
know that darker keeps all the darker

427
00:18:55,950 --> 00:19:02,010
history in its list and you could

428
00:18:58,410 --> 00:19:04,380
actually run a tool and I have a link

429
00:19:02,010 --> 00:19:06,540
there the tool that I wrote that allows

430
00:19:04,380 --> 00:19:09,420
you to recover the docker file from an

431
00:19:06,540 --> 00:19:12,000
existing image once you recover that

432
00:19:09,420 --> 00:19:15,050
docker file building and you want as

433
00:19:12,000 --> 00:19:17,370
easy as running a darker build - half

434
00:19:15,050 --> 00:19:20,580
the reason I'm suggesting it here is

435
00:19:17,370 --> 00:19:22,949
that because that docker history is

436
00:19:20,580 --> 00:19:26,159
nothing more than just a set of comments

437
00:19:22,950 --> 00:19:28,200
inside of the the darker continued

438
00:19:26,160 --> 00:19:30,870
Ducker tar file itself

439
00:19:28,200 --> 00:19:34,140
anybody can fake that histories so you

440
00:19:30,870 --> 00:19:36,840
could have the history that says oh I'm

441
00:19:34,140 --> 00:19:38,700
just you know deploying this file or

442
00:19:36,840 --> 00:19:41,159
copying this while or maybe I'm running

443
00:19:38,700 --> 00:19:44,060
apt-get to get those dependencies but in

444
00:19:41,160 --> 00:19:46,830
fact your layers inside of your docker

445
00:19:44,060 --> 00:19:51,389
container will contain malicious stuff

446
00:19:46,830 --> 00:19:53,550
so the easiest thing to do is either

447
00:19:51,390 --> 00:19:55,710
don't trust those once that you get off

448
00:19:53,550 --> 00:19:58,710
the internet or recover the docker file

449
00:19:55,710 --> 00:20:01,370
be liam's yourself tag it with your own

450
00:19:58,710 --> 00:20:06,420
tags and at least you know that your

451
00:20:01,370 --> 00:20:08,310
supply chain is somewhat better never

452
00:20:06,420 --> 00:20:10,350
run privilege containers or share the

453
00:20:08,310 --> 00:20:11,790
volleys with the nodes that's the

454
00:20:10,350 --> 00:20:14,699
easiest way to get yourself own

455
00:20:11,790 --> 00:20:17,340
privilege containers allow you to deploy

456
00:20:14,700 --> 00:20:19,410
things like kernel modules into your

457
00:20:17,340 --> 00:20:21,990
host module if you if you know how to

458
00:20:19,410 --> 00:20:24,900
will share the volumes outside of the

459
00:20:21,990 --> 00:20:27,720
container they're generally a very bad

460
00:20:24,900 --> 00:20:30,690
idea now firstly there's not always a

461
00:20:27,720 --> 00:20:32,790
way of avoiding this like you for

462
00:20:30,690 --> 00:20:35,280
example even get lab when it runs its

463
00:20:32,790 --> 00:20:37,500
CDI CTE pipeline they're runner that

464
00:20:35,280 --> 00:20:40,020
they're decided to deploy on kubernetes

465
00:20:37,500 --> 00:20:42,000
requires privileged containers and the

466
00:20:40,020 --> 00:20:43,470
they required because they want to start

467
00:20:42,000 --> 00:20:45,270
other containers from at them there's

468
00:20:43,470 --> 00:20:46,800
really not a good way to start a

469
00:20:45,270 --> 00:20:49,920
container within the container without

470
00:20:46,800 --> 00:20:52,350
having a privileged container if you

471
00:20:49,920 --> 00:20:54,450
can't avoid doing that avoided at all

472
00:20:52,350 --> 00:20:57,600
costs that's the easy way to get owns

473
00:20:54,450 --> 00:21:00,450
the shared volumes obviously if you get

474
00:20:57,600 --> 00:21:02,459
yourself access to the files that are

475
00:21:00,450 --> 00:21:04,950
running on the node itself then you can

476
00:21:02,460 --> 00:21:08,700
change those files and get yourself

477
00:21:04,950 --> 00:21:12,930
persistence and hook into the underlying

478
00:21:08,700 --> 00:21:15,240
node stash illuminated secrets into all

479
00:21:12,930 --> 00:21:18,180
the secrets your data into kubernetes

480
00:21:15,240 --> 00:21:20,730
secrets that's really a basic step so

481
00:21:18,180 --> 00:21:22,890
you can leadership them all it somewhere

482
00:21:20,730 --> 00:21:25,890
and encrypt them somewhere and don't

483
00:21:22,890 --> 00:21:28,920
keep them in your application I hope

484
00:21:25,890 --> 00:21:30,840
that's fairly simple monitor for work

485
00:21:28,920 --> 00:21:33,930
containers now that that should be

486
00:21:30,840 --> 00:21:36,870
pretty obvious the way that people got

487
00:21:33,930 --> 00:21:39,000
their systems abused their communities

488
00:21:36,870 --> 00:21:41,969
clusters abused two three years ago

489
00:21:39,000 --> 00:21:44,850
already was by somebody just figuring

490
00:21:41,970 --> 00:21:47,730
out that they had an open API and their

491
00:21:44,850 --> 00:21:50,189
open API allowed somebody else to push a

492
00:21:47,730 --> 00:21:54,000
command to run a container and what that

493
00:21:50,190 --> 00:21:56,160
does is that communities or dr. D will

494
00:21:54,000 --> 00:21:58,260
go out and download that image and will

495
00:21:56,160 --> 00:22:00,630
run it for somebody else so that's how

496
00:21:58,260 --> 00:22:03,180
people had their clusters mining manera

497
00:22:00,630 --> 00:22:04,500
coins for quite some time and that's

498
00:22:03,180 --> 00:22:07,740
still happening there's still plenty of

499
00:22:04,500 --> 00:22:09,480
open API darker the api's and kubernetes

500
00:22:07,740 --> 00:22:11,970
api is out on the internet where

501
00:22:09,480 --> 00:22:12,659
somebody will just push containers out

502
00:22:11,970 --> 00:22:14,970
to you

503
00:22:12,659 --> 00:22:18,059
and get you help Lee producing coins for

504
00:22:14,970 --> 00:22:20,309
them which is arguably not a not a

505
00:22:18,059 --> 00:22:22,710
terrible terrible thing that will happen

506
00:22:20,309 --> 00:22:25,139
to you but it's still nothing you want

507
00:22:22,710 --> 00:22:26,549
to have on your cluster so check the

508
00:22:25,139 --> 00:22:29,309
check the clusters from containers

509
00:22:26,549 --> 00:22:31,259
periodically have a monitoring system if

510
00:22:29,309 --> 00:22:35,580
you're running in the cloud secure the

511
00:22:31,259 --> 00:22:37,649
metadata I cut out the demo out of this

512
00:22:35,580 --> 00:22:40,168
presentation but my dam is essentially

513
00:22:37,649 --> 00:22:42,418
going and looking at the cluster and

514
00:22:40,169 --> 00:22:45,779
picking up the metadata and the metadata

515
00:22:42,419 --> 00:22:47,340
in the cloud for kubernetes clusters

516
00:22:45,779 --> 00:22:48,840
doesn't just contain information about

517
00:22:47,340 --> 00:22:51,539
the nodes it contains information about

518
00:22:48,840 --> 00:22:54,389
the cluster itself you can get this

519
00:22:51,539 --> 00:22:57,479
service IDs out of that metadata and

520
00:22:54,389 --> 00:23:00,869
then elevate your privilege very easily

521
00:22:57,479 --> 00:23:03,450
into what essentially could be your

522
00:23:00,869 --> 00:23:07,470
kubernetes administrator so if you don't

523
00:23:03,450 --> 00:23:09,509
secure your metadata you really running

524
00:23:07,470 --> 00:23:12,960
high risk of somebody elevating

525
00:23:09,509 --> 00:23:14,789
privileges to administrators running

526
00:23:12,960 --> 00:23:17,549
container optimized OS if you're in

527
00:23:14,789 --> 00:23:19,979
Google or Bottlerocket and if you're an

528
00:23:17,549 --> 00:23:21,570
AWS some some operating system that's

529
00:23:19,979 --> 00:23:23,609
more secure than they default that's

530
00:23:21,570 --> 00:23:25,739
should be natural to you that actually

531
00:23:23,609 --> 00:23:27,599
takes really literally no effort it's

532
00:23:25,739 --> 00:23:29,729
just picking they're picking the image

533
00:23:27,599 --> 00:23:33,539
that you use during the cloud deployment

534
00:23:29,729 --> 00:23:35,989
on bare metal you need to run a hardened

535
00:23:33,539 --> 00:23:39,149
operating system like I showed before

536
00:23:35,989 --> 00:23:40,769
are kasturi's themselves don't

537
00:23:39,149 --> 00:23:42,869
necessarily provide you with the same

538
00:23:40,769 --> 00:23:44,999
defaults that the darker does so you

539
00:23:42,869 --> 00:23:47,570
have to protect yourself some other way

540
00:23:44,999 --> 00:23:48,720
somewhere you know do this the

541
00:23:47,570 --> 00:23:52,080
defense-in-depth

542
00:23:48,720 --> 00:23:53,820
approach and unfortunately you many of

543
00:23:52,080 --> 00:23:56,609
you probably heard their core OS is dead

544
00:23:53,820 --> 00:23:58,200
so a flatcar is supposed to be its

545
00:23:56,609 --> 00:24:01,109
replacement I haven't tried it I'm not

546
00:23:58,200 --> 00:24:03,149
quite sure what how good it is maybe

547
00:24:01,109 --> 00:24:05,908
it's good I haven't tried can't really

548
00:24:03,149 --> 00:24:08,099
recommend or not recommended but you can

549
00:24:05,909 --> 00:24:10,409
always get by by running minimal Debian

550
00:24:08,099 --> 00:24:13,109
installation that only has CRI the

551
00:24:10,409 --> 00:24:16,049
darker d or something on it in the same

552
00:24:13,109 --> 00:24:19,408
if you looking to go deeper have an

553
00:24:16,049 --> 00:24:21,418
outline that is really really limited to

554
00:24:19,409 --> 00:24:23,669
only running containers and obviously

555
00:24:21,419 --> 00:24:25,020
Ron use are back everybody should be

556
00:24:23,669 --> 00:24:28,330
doing that

557
00:24:25,020 --> 00:24:29,860
normal mode now once you pass the easy

558
00:24:28,330 --> 00:24:36,668
things that you've done and you feel

559
00:24:29,860 --> 00:24:38,559
girly look at the building images from

560
00:24:36,669 --> 00:24:39,760
scratch or use destroy less images

561
00:24:38,559 --> 00:24:41,889
there's a really cool I've been using

562
00:24:39,760 --> 00:24:44,200
them for a while literally no issues

563
00:24:41,890 --> 00:24:47,530
with them I really like how they work

564
00:24:44,200 --> 00:24:49,210
LOD security policies have multiple

565
00:24:47,530 --> 00:24:51,129
registers and authenticate authorized

566
00:24:49,210 --> 00:24:52,960
access into those register don't don't

567
00:24:51,130 --> 00:24:55,539
keep your production control production

568
00:24:52,960 --> 00:24:57,580
mixed in with your development images

569
00:24:55,539 --> 00:24:59,919
obviously and have developers

570
00:24:57,580 --> 00:25:03,010
accidentally do something not very good

571
00:24:59,919 --> 00:25:05,559
for your production infrastructure we

572
00:25:03,010 --> 00:25:07,960
map route to not route it's more

573
00:25:05,559 --> 00:25:11,230
difficult to use it breaks stuff but if

574
00:25:07,960 --> 00:25:13,929
you diligence you can get fairly far

575
00:25:11,230 --> 00:25:15,700
enough with it obviously upgrading only

576
00:25:13,929 --> 00:25:17,980
master notes and the later knowledge

577
00:25:15,700 --> 00:25:19,750
kubernetes iterates quite fast and they

578
00:25:17,980 --> 00:25:21,580
are doing a lot of security improvements

579
00:25:19,750 --> 00:25:23,740
a lot of security fixes to the core of

580
00:25:21,580 --> 00:25:26,918
kubernetes so please make sure you

581
00:25:23,740 --> 00:25:29,500
update aim for zero trust that's more

582
00:25:26,919 --> 00:25:31,929
more of an advanced air topic and then

583
00:25:29,500 --> 00:25:35,230
the hard mode is if you actually start

584
00:25:31,929 --> 00:25:37,299
doing the scans for your images notice I

585
00:25:35,230 --> 00:25:38,950
put it here in the hard mode not because

586
00:25:37,299 --> 00:25:41,440
it's hard to do but because those tools

587
00:25:38,950 --> 00:25:43,750
in my experience are incredibly fallsy

588
00:25:41,440 --> 00:25:45,669
they're just not really tuned for

589
00:25:43,750 --> 00:25:49,120
container the ways the containers

590
00:25:45,669 --> 00:25:51,940
optimum operating especially social

591
00:25:49,120 --> 00:25:53,889
composition on also links to hundred and

592
00:25:51,940 --> 00:25:55,510
it's not thousands of libraries that you

593
00:25:53,890 --> 00:25:57,100
never use in the container and you don't

594
00:25:55,510 --> 00:26:00,460
be scratching your head and thinking why

595
00:25:57,100 --> 00:26:02,530
what I do so maybe when you get to the

596
00:26:00,460 --> 00:26:05,200
hard mode then start paying attention to

597
00:26:02,530 --> 00:26:06,940
those or wait till a mature plot

598
00:26:05,200 --> 00:26:09,460
admission policies cool things they

599
00:26:06,940 --> 00:26:12,580
really help with your security if you

600
00:26:09,460 --> 00:26:14,559
can sign your images sign them that will

601
00:26:12,580 --> 00:26:17,860
help tremendously with supply chain for

602
00:26:14,559 --> 00:26:20,350
darker on mixed sensitive workloads

603
00:26:17,860 --> 00:26:21,549
here just remember that namespace don't

604
00:26:20,350 --> 00:26:23,439
provide what's called a hard

605
00:26:21,549 --> 00:26:27,750
multi-tenancy meaning that you can't

606
00:26:23,440 --> 00:26:30,340
separate different data very

607
00:26:27,750 --> 00:26:32,770
successfully using namespaces there's

608
00:26:30,340 --> 00:26:34,330
still the cooks and crannies that people

609
00:26:32,770 --> 00:26:37,240
can get around to jump from one

610
00:26:34,330 --> 00:26:38,389
namespace to another just don't don't

611
00:26:37,240 --> 00:26:41,089
mix

612
00:26:38,389 --> 00:26:45,309
if you really need multi-tenancy run

613
00:26:41,089 --> 00:26:45,309
multiple containers don't run namespaces

614
00:26:45,399 --> 00:26:53,119
final things I there's a plenty of the

615
00:26:50,649 --> 00:26:56,349
no information available on the

616
00:26:53,119 --> 00:26:58,999
Internet's where you can go and start

617
00:26:56,349 --> 00:27:01,218
digging deeper into the things that I've

618
00:26:58,999 --> 00:27:03,709
listed here and understanding what they

619
00:27:01,219 --> 00:27:06,469
are and how you can protect the career

620
00:27:03,709 --> 00:27:08,899
native arms there's a decent sentinel of

621
00:27:06,469 --> 00:27:11,179
companies that spawn up that publish

622
00:27:08,899 --> 00:27:13,699
white papers and presentation but a

623
00:27:11,179 --> 00:27:15,619
decent some some better some worse but

624
00:27:13,700 --> 00:27:17,869
you know this you can if you can pick

625
00:27:15,619 --> 00:27:19,668
one or two interesting nuggets from

626
00:27:17,869 --> 00:27:23,629
their presentation I think that's good

627
00:27:19,669 --> 00:27:27,709
enough in a final slide I want to leave

628
00:27:23,629 --> 00:27:29,779
you here it's complex guys it's gonna

629
00:27:27,709 --> 00:27:32,119
get more and more complex to it there's

630
00:27:29,779 --> 00:27:35,200
really not an end in sight and

631
00:27:32,119 --> 00:27:37,099
simplifying this this is gonna have more

632
00:27:35,200 --> 00:27:42,559
components built on top of more

633
00:27:37,099 --> 00:27:46,129
components and if you're a really blue

634
00:27:42,559 --> 00:27:48,469
team er think about keeping complexity

635
00:27:46,129 --> 00:27:51,019
in in tap think about limiting the

636
00:27:48,469 --> 00:27:52,729
numbers of let's say ingress controllers

637
00:27:51,019 --> 00:27:55,119
just standardize on one don't let

638
00:27:52,729 --> 00:27:58,009
developers pick whatever they want or

639
00:27:55,119 --> 00:28:00,678
you know like I said CN is or CRI is

640
00:27:58,009 --> 00:28:04,639
just limit them they'll make your life a

641
00:28:00,679 --> 00:28:06,349
lot easier if you're red teamer now it's

642
00:28:04,639 --> 00:28:07,908
the Arison configuration of kubernetes

643
00:28:06,349 --> 00:28:11,299
containers that are gonna lead to a lot

644
00:28:07,909 --> 00:28:13,429
of reaches it's not like you know zero

645
00:28:11,299 --> 00:28:15,908
days and your eStore and android

646
00:28:13,429 --> 00:28:19,129
deployments all desert doesn't happen to

647
00:28:15,909 --> 00:28:22,609
so just look for something that somebody

648
00:28:19,129 --> 00:28:24,769
forgot to set a setting on your access

649
00:28:22,609 --> 00:28:27,799
to your secrets and you know if you

650
00:28:24,769 --> 00:28:30,469
somebody is doing let's say let's

651
00:28:27,799 --> 00:28:34,549
encrypt through dns and they storage

652
00:28:30,469 --> 00:28:37,279
secrets in a fork for accessing the DNS

653
00:28:34,549 --> 00:28:40,070
management interface in the container

654
00:28:37,279 --> 00:28:44,059
then you can only DNS and what's better

655
00:28:40,070 --> 00:28:46,460
than owning a DNS server right and for

656
00:28:44,059 --> 00:28:47,989
everybody else make secure by default

657
00:28:46,460 --> 00:28:50,539
that's the only thing that's gonna

658
00:28:47,989 --> 00:28:51,730
really help us in the long term with the

659
00:28:50,539 --> 00:28:54,190
kubernetes becoming

660
00:28:51,730 --> 00:28:58,090
so popular don't let folks peek

661
00:28:54,190 --> 00:29:02,980
insecurity falls with that may you

662
00:28:58,090 --> 00:29:05,230
journey be fruitful and happy and I

663
00:29:02,980 --> 00:29:08,440
believe that we're here to stay for a

664
00:29:05,230 --> 00:29:10,890
long time to make sure your spirit thank

665
00:29:08,440 --> 00:29:10,890
you very much

666
00:29:11,030 --> 00:29:16,670
okay we're back Thanks alex is right

667
00:29:13,880 --> 00:29:19,250
okay Karina is it such a big pathology

668
00:29:16,670 --> 00:29:21,260
and it's like it's gonna become more and

669
00:29:19,250 --> 00:29:23,300
more used and I like the steps of them

670
00:29:21,260 --> 00:29:25,100
easy and normal in advance it really

671
00:29:23,300 --> 00:29:27,379
helps people and like either starting

672
00:29:25,100 --> 00:29:31,280
with a low-security and going up all the

673
00:29:27,380 --> 00:29:33,530
way and let's go with the questions we

674
00:29:31,280 --> 00:29:35,810
have one that is about it quite a lot

675
00:29:33,530 --> 00:29:37,580
do you have any resources for someone

676
00:29:35,810 --> 00:29:40,040
who would like to start doing some

677
00:29:37,580 --> 00:29:42,760
offensive kubernetes assessment like

678
00:29:40,040 --> 00:29:46,760
abusing msconfig or escaping containers

679
00:29:42,760 --> 00:29:50,480
yeah there's a there's a system that a

680
00:29:46,760 --> 00:29:52,310
friend of mine put together called

681
00:29:50,480 --> 00:29:54,230
Bostick here essentially it's just the

682
00:29:52,310 --> 00:29:57,320
kubernetes cluster that you can download

683
00:29:54,230 --> 00:29:59,930
as a set of VMware or sorry VirtualBox

684
00:29:57,320 --> 00:30:02,560
VMs that you can deploy and start

685
00:29:59,930 --> 00:30:05,960
playing around it with searching for

686
00:30:02,560 --> 00:30:08,149
it's it's like it's your own CTF for

687
00:30:05,960 --> 00:30:11,300
kubernetes they're actually being CTF

688
00:30:08,150 --> 00:30:13,580
stew that you can participate in to get

689
00:30:11,300 --> 00:30:15,530
a sense of what it takes to investigate

690
00:30:13,580 --> 00:30:17,629
and there's a plenty of tools now

691
00:30:15,530 --> 00:30:20,720
available that allow you to automate

692
00:30:17,630 --> 00:30:23,450
some of that discovery I don't quite

693
00:30:20,720 --> 00:30:25,400
have a link to where you know you'd have

694
00:30:23,450 --> 00:30:27,920
something like them awesome community is

695
00:30:25,400 --> 00:30:30,770
on edge but I will I'm actually thinking

696
00:30:27,920 --> 00:30:35,510
of putting something together so maybe

697
00:30:30,770 --> 00:30:37,850
watch my docker hub oh not that github

698
00:30:35,510 --> 00:30:39,520
and then I'll see if I can put together

699
00:30:37,850 --> 00:30:41,600
those resources in one place

700
00:30:39,520 --> 00:30:43,790
maybe nice if you want to add your

701
00:30:41,600 --> 00:30:49,429
github account to in the twitch chat so

702
00:30:43,790 --> 00:30:51,860
people can go to it um ok second

703
00:30:49,430 --> 00:30:54,590
question what about monitoring the k8

704
00:30:51,860 --> 00:30:56,540
loads what are some of the thing to look

705
00:30:54,590 --> 00:30:58,120
for - the technologist behavior in your

706
00:30:56,540 --> 00:31:02,600
costume

707
00:30:58,120 --> 00:31:05,270
um it's a good question I write now most

708
00:31:02,600 --> 00:31:07,820
of the logs that you know keep on and

709
00:31:05,270 --> 00:31:12,770
everybody is really geared towards air

710
00:31:07,820 --> 00:31:16,040
monitoring if you can get logs from your

711
00:31:12,770 --> 00:31:20,720
sed then you can monitor for things that

712
00:31:16,040 --> 00:31:22,559
are basically that adding new docker

713
00:31:20,720 --> 00:31:25,100
containers adding

714
00:31:22,559 --> 00:31:32,399
or changing configuration on the

715
00:31:25,100 --> 00:31:34,918
Canadians itself I guess I might really

716
00:31:32,399 --> 00:31:37,678
short answer is that I'm not entirely

717
00:31:34,919 --> 00:31:38,580
sure of any open-source tool that would

718
00:31:37,679 --> 00:31:40,919
allow you to do it

719
00:31:38,580 --> 00:31:42,418
there's several available there you know

720
00:31:40,919 --> 00:31:44,220
I don't want to advertise anybody but

721
00:31:42,419 --> 00:31:46,919
there's a co second twistlock and they

722
00:31:44,220 --> 00:31:49,049
all promise to do those things I frankly

723
00:31:46,919 --> 00:31:53,419
have not tried those I'm just really

724
00:31:49,049 --> 00:31:57,330
relying on monitoring the SCT myself

725
00:31:53,419 --> 00:32:00,059
mm-hmm is there any danger of leaving

726
00:31:57,330 --> 00:32:03,720
sensitive data on intermediary build

727
00:32:00,059 --> 00:32:06,720
containers oh yeah absolutely

728
00:32:03,720 --> 00:32:08,850
there's as you know containers are built

729
00:32:06,720 --> 00:32:13,169
with the layers in mind and every new

730
00:32:08,850 --> 00:32:15,119
layer just just tells me what the data

731
00:32:13,169 --> 00:32:16,649
is replaced on the previous layer when

732
00:32:15,119 --> 00:32:19,399
you delete a file from an intermediate

733
00:32:16,649 --> 00:32:22,379
layer and I have a whole actually a

734
00:32:19,399 --> 00:32:23,610
separate workshop on darker security if

735
00:32:22,379 --> 00:32:28,139
you're interested if you go to the

736
00:32:23,610 --> 00:32:30,090
github slash Afghan there's a workshop

737
00:32:28,139 --> 00:32:34,379
on container secreting this is where I

738
00:32:30,090 --> 00:32:36,360
show that if you build something in the

739
00:32:34,379 --> 00:32:37,949
middle it's always there even if you

740
00:32:36,360 --> 00:32:40,619
delete it and I tell you how you can

741
00:32:37,950 --> 00:32:42,539
recover that deleted file by just

742
00:32:40,619 --> 00:32:45,959
looking at the internals of how the

743
00:32:42,539 --> 00:32:47,490
containers build so remember never

744
00:32:45,960 --> 00:32:50,159
putting anything secret even at the

745
00:32:47,490 --> 00:32:51,749
build time use build args or use

746
00:32:50,159 --> 00:32:54,840
environment variables but don't ever

747
00:32:51,749 --> 00:32:58,399
build anything into the image would you

748
00:32:54,840 --> 00:32:58,399
consider giving that workshop next year

749
00:33:00,950 --> 00:33:07,049
it's asking do you have any recommended

750
00:33:05,190 --> 00:33:10,999
tools to assess the security of

751
00:33:07,049 --> 00:33:14,220
containers but insecure config version

752
00:33:10,999 --> 00:33:17,999
there's several there on the market the

753
00:33:14,220 --> 00:33:21,450
in Guardian who created the the basta

754
00:33:17,999 --> 00:33:23,610
cube training platform also has what

755
00:33:21,450 --> 00:33:26,009
they call pirate ease that's one of the

756
00:33:23,610 --> 00:33:28,969
systems I'm familiar with that basically

757
00:33:26,009 --> 00:33:33,210
evaluates this set up defaults the

758
00:33:28,970 --> 00:33:35,070
internals of your clusters I that's the

759
00:33:33,210 --> 00:33:36,419
one I have experience with you can run

760
00:33:35,070 --> 00:33:38,879
that but there's plain

761
00:33:36,419 --> 00:33:40,529
there's probably five or six more and I

762
00:33:38,879 --> 00:33:43,049
can probably dig up the links for those

763
00:33:40,529 --> 00:33:48,720
too that all you to assess their open

764
00:33:43,049 --> 00:33:51,239
sores they're fairly okay they're not

765
00:33:48,720 --> 00:33:54,690
the full coverage but they give you a

766
00:33:51,239 --> 00:33:57,299
sense of where you stand at least nekton

767
00:33:54,690 --> 00:34:00,149
you share these links in these tools

768
00:33:57,299 --> 00:34:04,859
even though they're not yeah I can trick

769
00:34:00,149 --> 00:34:06,508
and can you link to any resources to

770
00:34:04,859 --> 00:34:13,949
learn more about containers build

771
00:34:06,509 --> 00:34:17,639
history and security yes please link

772
00:34:13,949 --> 00:34:22,828
everything up to that point should there

773
00:34:17,639 --> 00:34:24,059
be a separation for multi-tenancy can

774
00:34:22,829 --> 00:34:25,169
you say that question again I don't see

775
00:34:24,059 --> 00:34:26,520
it sorry

776
00:34:25,168 --> 00:34:32,040
up to that point should there be

777
00:34:26,520 --> 00:34:33,149
separation for multi-tenancy that's your

778
00:34:32,040 --> 00:34:35,849
finery I actually understand the

779
00:34:33,149 --> 00:34:41,098
question but let me try to address the

780
00:34:35,849 --> 00:34:42,599
multi-tenancy it as I said kubernetes

781
00:34:41,099 --> 00:34:44,399
namespaces don't provide hard

782
00:34:42,599 --> 00:34:47,369
multi-tenancy in the sense that if you

783
00:34:44,399 --> 00:34:50,069
have multiple customers or customer data

784
00:34:47,369 --> 00:34:52,679
you really shouldn't be running it on

785
00:34:50,069 --> 00:34:54,449
the same cluster and that's because the

786
00:34:52,679 --> 00:34:57,720
controls are not there and it's been

787
00:34:54,449 --> 00:35:00,210
proven almost academically that it's not

788
00:34:57,720 --> 00:35:01,980
possible to introduce those controls at

789
00:35:00,210 --> 00:35:05,970
least without sacrificing a lot of

790
00:35:01,980 --> 00:35:08,309
things now for self multi-tenancy

791
00:35:05,970 --> 00:35:10,290
meaning that hey I don't have multiple

792
00:35:08,309 --> 00:35:12,000
customers but I have multiple groups on

793
00:35:10,290 --> 00:35:14,549
the same proven AIDS clusters and that's

794
00:35:12,000 --> 00:35:16,290
okay if it's leaks sometimes or it looks

795
00:35:14,549 --> 00:35:17,750
a little bit of a data yeah

796
00:35:16,290 --> 00:35:21,779
you can do it if it's within your

797
00:35:17,750 --> 00:35:23,579
organization and you're okay maybe you

798
00:35:21,780 --> 00:35:25,770
know trusting somewhat the groups that

799
00:35:23,579 --> 00:35:28,500
you have then yeah you can you can use

800
00:35:25,770 --> 00:35:33,869
them stations for that if you can't

801
00:35:28,500 --> 00:35:35,369
recognize things again if you adopt a

802
00:35:33,869 --> 00:35:39,299
proper threat model if your threat model

803
00:35:35,369 --> 00:35:41,010
says my groups are within decent control

804
00:35:39,299 --> 00:35:43,170
and I can trust them not to run

805
00:35:41,010 --> 00:35:44,579
malicious stuff knowingly then yes you

806
00:35:43,170 --> 00:35:47,910
can provide self multi-tenancy with

807
00:35:44,579 --> 00:35:49,290
namespaces the opposite situation is if

808
00:35:47,910 --> 00:35:50,440
you're running your clients data which

809
00:35:49,290 --> 00:35:56,650
you can't trust

810
00:35:50,440 --> 00:35:59,829
at all then you can't really do it um

811
00:35:56,650 --> 00:36:02,130
between more secure ization security

812
00:35:59,829 --> 00:36:05,589
security realization what that word

813
00:36:02,130 --> 00:36:09,430
unless complexity which would you

814
00:36:05,589 --> 00:36:15,310
prioritize so securitization and less

815
00:36:09,430 --> 00:36:18,069
complicity I think I understand but I

816
00:36:15,310 --> 00:36:21,430
always praise less complexity it's even

817
00:36:18,069 --> 00:36:23,859
bring more security with it so if you

818
00:36:21,430 --> 00:36:27,490
can establish beyond the meetings where

819
00:36:23,859 --> 00:36:30,190
developers are thinking about you know

820
00:36:27,490 --> 00:36:31,720
points of ingress I grass the storage

821
00:36:30,190 --> 00:36:36,130
controllers and cetera cetera that are

822
00:36:31,720 --> 00:36:37,990
putting into the cluster before they

823
00:36:36,130 --> 00:36:40,359
make the choice so that you have at

824
00:36:37,990 --> 00:36:41,828
least of you into how they making that

825
00:36:40,359 --> 00:36:43,089
choice because a lot of times you know

826
00:36:41,829 --> 00:36:44,349
they're not making that choice because

827
00:36:43,089 --> 00:36:46,270
the security they making it because of

828
00:36:44,349 --> 00:36:50,280
convenience or speed or something like

829
00:36:46,270 --> 00:36:52,569
that and if you can be there and and

830
00:36:50,280 --> 00:36:54,040
participate in making that choice you

831
00:36:52,569 --> 00:36:57,759
will provide them with a valuable

832
00:36:54,040 --> 00:36:59,410
service and hopefully limit the number

833
00:36:57,760 --> 00:37:03,310
of choices they make to something that's

834
00:36:59,410 --> 00:37:05,799
manageable okay we have one final

835
00:37:03,310 --> 00:37:09,119
question what are the weak points of

836
00:37:05,800 --> 00:37:16,060
full solutions like five at all yes

837
00:37:09,119 --> 00:37:18,970
which one pivotal yeah yes can you read

838
00:37:16,060 --> 00:37:21,910
that again I'm not sure I would like to

839
00:37:18,970 --> 00:37:23,919
but the person I tried the questions but

840
00:37:21,910 --> 00:37:29,049
I can't see you can see it again give me

841
00:37:23,920 --> 00:37:31,180
a second so the question is what are the

842
00:37:29,050 --> 00:37:37,270
weak points or full solutions like five

843
00:37:31,180 --> 00:37:39,848
at all yes pivotal paquius yeah if I

844
00:37:37,270 --> 00:37:41,790
don't have a direct experience with

845
00:37:39,849 --> 00:37:44,140
pivotal but I've actually worked with

846
00:37:41,790 --> 00:37:46,180
there's a competitor over there that

847
00:37:44,140 --> 00:37:49,240
tries to push PKI on top of everything

848
00:37:46,180 --> 00:37:51,759
the reality is PK is never full solution

849
00:37:49,240 --> 00:37:55,229
there's PK does descent for

850
00:37:51,760 --> 00:37:58,329
authentication maybe some authorization

851
00:37:55,230 --> 00:38:00,339
obviously the transport layer encryption

852
00:37:58,329 --> 00:38:02,890
but it doesn't really address the

853
00:38:00,339 --> 00:38:04,029
questions of how do i do my end user

854
00:38:02,890 --> 00:38:10,180
authentication

855
00:38:04,030 --> 00:38:12,430
a provides different controls where if

856
00:38:10,180 --> 00:38:13,870
you think about the zero trust controls

857
00:38:12,430 --> 00:38:17,109
right we're how do i authenticate the

858
00:38:13,870 --> 00:38:21,069
end point without trusting the end point

859
00:38:17,110 --> 00:38:23,020
implicitly so a lot of systems

860
00:38:21,070 --> 00:38:25,990
especially like East you if you consider

861
00:38:23,020 --> 00:38:27,820
now in communities provides mutual TLS

862
00:38:25,990 --> 00:38:31,270
already out of the box it's clearly a

863
00:38:27,820 --> 00:38:33,520
good component to have but it's not the

864
00:38:31,270 --> 00:38:35,640
only component it's it's only dressing

865
00:38:33,520 --> 00:38:39,070
part of the issue

866
00:38:35,640 --> 00:38:41,770
okay well I think we're out of time

867
00:38:39,070 --> 00:38:44,230
thank you very much Alex a lot of plans

868
00:38:41,770 --> 00:38:45,910
again for giving us a talk is really

869
00:38:44,230 --> 00:38:48,430
interesting and there will be coming up

870
00:38:45,910 --> 00:38:48,850
next with the DMA attack stock in ten

871
00:38:48,430 --> 00:38:50,500
minutes

872
00:38:48,850 --> 00:38:52,830
so everybody can go for coffee and

873
00:38:50,500 --> 00:38:52,830
Matthew

874
00:38:57,430 --> 00:39:15,779
[Music]

