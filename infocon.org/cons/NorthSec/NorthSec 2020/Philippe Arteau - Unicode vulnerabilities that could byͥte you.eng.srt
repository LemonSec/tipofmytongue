1
00:00:01,120 --> 00:00:21,320
[Music]

2
00:00:18,189 --> 00:00:24,680
hello so I'm back Luke is running around

3
00:00:21,320 --> 00:00:27,970
tabs so let's continue cuz we had a

4
00:00:24,680 --> 00:00:30,650
little bit of we're a little bit late

5
00:00:27,970 --> 00:00:32,689
lips we're gonna listen to Philip a

6
00:00:30,650 --> 00:00:34,430
stone now he's a secure researcher

7
00:00:32,689 --> 00:00:36,739
working for go secure his research is

8
00:00:34,430 --> 00:00:38,749
focused on web application security his

9
00:00:36,739 --> 00:00:41,030
past work experience includes pen

10
00:00:38,749 --> 00:00:43,489
testing secure code review and software

11
00:00:41,030 --> 00:00:46,579
the Batman he is the author of a widely

12
00:00:43,489 --> 00:00:49,010
used Java static analysis tool os fine

13
00:00:46,579 --> 00:00:50,809
security bugs he is also a contributor

14
00:00:49,010 --> 00:00:52,519
to the static analysis tool for dotnet

15
00:00:50,809 --> 00:00:55,039
called security code scam

16
00:00:52,519 --> 00:00:58,850
he built many plugins for burp ends up

17
00:00:55,039 --> 00:01:01,639
proxy tools including retired yes

18
00:00:58,850 --> 00:01:04,099
reissue requests scripters CSP auditor

19
00:01:01,639 --> 00:01:05,269
and many others for the past presented

20
00:01:04,099 --> 00:01:08,570
at several conferences including

21
00:01:05,269 --> 00:01:11,450
blackhat arsenal sector Absa QSC atl

22
00:01:08,570 --> 00:01:15,110
second north sec and 44 con he's also a

23
00:01:11,450 --> 00:01:18,140
very invested volunteer for nutsack and

24
00:01:15,110 --> 00:01:20,539
for the cdf so let's give a good one of

25
00:01:18,140 --> 00:01:22,520
applause to philip as to who's going to

26
00:01:20,540 --> 00:01:28,160
talk about unicode vulnerabilities that

27
00:01:22,520 --> 00:01:31,869
could dip or bite you hi everyone so i

28
00:01:28,160 --> 00:01:35,149
run on twitch or seeing the stream later

29
00:01:31,870 --> 00:01:38,060
so i'm going to talk today about a

30
00:01:35,150 --> 00:01:41,780
security related to unicode or security

31
00:01:38,060 --> 00:01:45,980
risk implication with unicode usage in a

32
00:01:41,780 --> 00:01:53,590
web application or system in general so

33
00:01:45,980 --> 00:01:58,420
without further ado so as you have seen

34
00:01:53,590 --> 00:02:01,220
my presentation has but also unicode the

35
00:01:58,420 --> 00:02:05,030
character that is also aimed at testing

36
00:02:01,220 --> 00:02:08,899
a system from conferences so and so far

37
00:02:05,030 --> 00:02:13,760
north tech is sorting unicode greatly so

38
00:02:08,899 --> 00:02:15,700
that's pretty good we'll see later this

39
00:02:13,760 --> 00:02:19,870
type of cattle are about

40
00:02:15,700 --> 00:02:22,730
the main topic of this presentation is

41
00:02:19,870 --> 00:02:25,849
transformation that our standard from

42
00:02:22,730 --> 00:02:28,760
the unica from unicode that can add a

43
00:02:25,849 --> 00:02:31,760
security issue so first we're going to

44
00:02:28,760 --> 00:02:35,690
go through a basic history of encoding

45
00:02:31,760 --> 00:02:37,459
just to see what solution unicode is

46
00:02:35,690 --> 00:02:40,550
trying to solve or what problem is

47
00:02:37,459 --> 00:02:42,470
trying to solve normalization and case

48
00:02:40,550 --> 00:02:44,989
notification will be transformation that

49
00:02:42,470 --> 00:02:48,590
as cannot secretly unpack in your code

50
00:02:44,989 --> 00:02:50,030
or a library that you are using we're

51
00:02:48,590 --> 00:02:52,700
going to see also that pinnacle can be

52
00:02:50,030 --> 00:02:55,700
used by a pen tester or bug bounty

53
00:02:52,700 --> 00:02:59,480
hunter as to bypass worth or any type of

54
00:02:55,700 --> 00:03:01,760
filter we have also two other section

55
00:02:59,480 --> 00:03:04,280
that are maybe as important but less

56
00:03:01,760 --> 00:03:08,560
technical that I'm gonna go quickly

57
00:03:04,280 --> 00:03:12,040
through so mograph attack will be usage

58
00:03:08,560 --> 00:03:14,690
special character in unicode to do

59
00:03:12,040 --> 00:03:18,349
basically to fool user with clinical

60
00:03:14,690 --> 00:03:21,739
domain and the tag integrity is also an

61
00:03:18,349 --> 00:03:23,200
important topic related to lost or

62
00:03:21,739 --> 00:03:26,570
partial rows of data

63
00:03:23,200 --> 00:03:28,940
so am i already got a great introduction

64
00:03:26,570 --> 00:03:30,858
about me a moment ago so I'm gonna go

65
00:03:28,940 --> 00:03:33,890
quickly so I'm working for a new secure

66
00:03:30,859 --> 00:03:36,590
as a superior shirt in the application

67
00:03:33,890 --> 00:03:39,910
security I'm also a volunteer at North

68
00:03:36,590 --> 00:03:41,870
SEC so I'm often doing EF changes

69
00:03:39,910 --> 00:03:46,400
depending of the year but I'm also

70
00:03:41,870 --> 00:03:49,700
helping with the website of 9 sec so

71
00:03:46,400 --> 00:03:53,500
before we start I'm gonna go through a

72
00:03:49,700 --> 00:03:58,399
basic introduction of including

73
00:03:53,500 --> 00:03:59,540
the first type of encoding that under

74
00:03:58,400 --> 00:04:02,060
show you the first one but one of the

75
00:03:59,540 --> 00:04:06,980
early one was a ski that emerged in the

76
00:04:02,060 --> 00:04:10,400
early 60s and the way as key word it was

77
00:04:06,980 --> 00:04:13,429
pretty primitive but work and was pretty

78
00:04:10,400 --> 00:04:16,399
simple every bite was one character so

79
00:04:13,430 --> 00:04:21,139
when you need to write a text from X

80
00:04:16,399 --> 00:04:24,500
file maybe nested or anything is limited

81
00:04:21,139 --> 00:04:25,730
or in asking one byte equal one

82
00:04:24,500 --> 00:04:30,080
character

83
00:04:25,730 --> 00:04:32,930
and the way the different bytes are

84
00:04:30,080 --> 00:04:38,300
attributed because one byte in value

85
00:04:32,930 --> 00:04:40,610
from 0 to 255 so the first two values

86
00:04:38,300 --> 00:04:45,440
are a control character that would be

87
00:04:40,610 --> 00:04:47,510
used to basically interact with maybe

88
00:04:45,440 --> 00:04:49,160
the computer or other programs so think

89
00:04:47,510 --> 00:04:52,010
about your character

90
00:04:49,160 --> 00:04:54,440
bill and for the console backspace and

91
00:04:52,010 --> 00:04:57,469
the foul this type of character so these

92
00:04:54,440 --> 00:04:59,960
are non printable character then we'll

93
00:04:57,470 --> 00:05:02,420
add a standard character sets a Latin

94
00:04:59,960 --> 00:05:05,510
character and so every catered from the

95
00:05:02,420 --> 00:05:10,940
alphabet upper case lower case but also

96
00:05:05,510 --> 00:05:14,810
numeric values and some punctuation then

97
00:05:10,940 --> 00:05:18,140
we'll have the extended character set

98
00:05:14,810 --> 00:05:20,840
and those are aimed at covering special

99
00:05:18,140 --> 00:05:23,719
characters in the index so if you are

100
00:05:20,840 --> 00:05:27,020
writing maybe French text or Spanish

101
00:05:23,720 --> 00:05:29,900
text you have excellent character in

102
00:05:27,020 --> 00:05:32,960
your text and the idea is that all

103
00:05:29,900 --> 00:05:36,380
accent characters will be stored in this

104
00:05:32,960 --> 00:05:39,500
section the thing is that we cannot

105
00:05:36,380 --> 00:05:41,750
store all accent character of every

106
00:05:39,500 --> 00:05:46,370
language so we'll need to do some choice

107
00:05:41,750 --> 00:05:49,340
and with this limitation system around

108
00:05:46,370 --> 00:05:53,060
the mid 60s and 70s have implement

109
00:05:49,340 --> 00:05:57,590
different extended choices and these

110
00:05:53,060 --> 00:06:02,300
were called Co page code page will be

111
00:05:57,590 --> 00:06:05,989
basically variation of the second half

112
00:06:02,300 --> 00:06:11,810
of the assigned byte so any character

113
00:06:05,990 --> 00:06:13,040
from 128 to 256 will be assigned a

114
00:06:11,810 --> 00:06:15,680
different code page

115
00:06:13,040 --> 00:06:19,880
IBM PC will have by default a code page

116
00:06:15,680 --> 00:06:22,610
but maybe a Russian computer that is

117
00:06:19,880 --> 00:06:25,640
writing text could use some an echo page

118
00:06:22,610 --> 00:06:27,730
to write a text with sigelei character

119
00:06:25,640 --> 00:06:29,930
we won't write Russian

120
00:06:27,730 --> 00:06:34,150
at the same time if you want to write a

121
00:06:29,930 --> 00:06:37,790
text in Greek you can use a code page

122
00:06:34,150 --> 00:06:39,560
737 and the idea is that you can add

123
00:06:37,790 --> 00:06:42,400
multiple file will

124
00:06:39,560 --> 00:06:45,910
Paige and you can switch between dots

125
00:06:42,400 --> 00:06:48,409
but with this type of implementation

126
00:06:45,910 --> 00:06:51,889
there's going to be a multiple problem

127
00:06:48,410 --> 00:06:54,320
and one of the problem is what if I want

128
00:06:51,889 --> 00:06:59,600
to transfer far from one system to

129
00:06:54,320 --> 00:07:04,400
another so now we're gonna have maybe a

130
00:06:59,600 --> 00:07:07,370
system that has code page 437 so does

131
00:07:04,400 --> 00:07:11,479
Latin the basic the default one on IBM

132
00:07:07,370 --> 00:07:13,490
PC and if the same file is transferred

133
00:07:11,480 --> 00:07:16,880
maybe over the network or over a

134
00:07:13,490 --> 00:07:20,300
diskette then on a recent computer that

135
00:07:16,880 --> 00:07:22,729
ask maybe a cyclic default encoding then

136
00:07:20,300 --> 00:07:25,280
suddenly an action straight accent

137
00:07:22,729 --> 00:07:27,800
character can be translate to different

138
00:07:25,280 --> 00:07:31,359
characters tsunami we're losing

139
00:07:27,800 --> 00:07:35,000
information and the message is

140
00:07:31,360 --> 00:07:37,790
transformed so that's one issue but also

141
00:07:35,000 --> 00:07:40,580
we cannot add at the same time in one

142
00:07:37,790 --> 00:07:43,130
text maybe a french description with

143
00:07:40,580 --> 00:07:47,750
quotation and Spanish or quotation and

144
00:07:43,130 --> 00:07:50,330
silly because it would be hard to switch

145
00:07:47,750 --> 00:07:53,870
or in a text file from one code page to

146
00:07:50,330 --> 00:07:57,890
run so there are some basic big

147
00:07:53,870 --> 00:07:59,900
limitation to using ASCII so as soon as

148
00:07:57,890 --> 00:08:02,030
we're doing communication or exchanging

149
00:07:59,900 --> 00:08:06,739
file the more relations are the more

150
00:08:02,030 --> 00:08:10,039
these limitation can be problematic so

151
00:08:06,740 --> 00:08:14,150
the big solution for this there were

152
00:08:10,039 --> 00:08:17,840
multiple IDs but the main one that that

153
00:08:14,150 --> 00:08:20,719
is still used today is Unicode so here

154
00:08:17,840 --> 00:08:25,820
code is a standard that defined both

155
00:08:20,720 --> 00:08:28,940
characters and including characters so

156
00:08:25,820 --> 00:08:32,390
the first component is Unicode code

157
00:08:28,940 --> 00:08:34,789
points and code points are uniquely

158
00:08:32,390 --> 00:08:38,000
index characters so every character in

159
00:08:34,789 --> 00:08:40,958
every language will have a unique code

160
00:08:38,000 --> 00:08:43,279
points so the idea is that in a single

161
00:08:40,958 --> 00:08:45,890
standard within a context every

162
00:08:43,279 --> 00:08:49,220
character of every language including a

163
00:08:45,890 --> 00:08:51,990
symbol measuring unit and even languages

164
00:08:49,220 --> 00:08:56,750
are not even used anymore like in yellow

165
00:08:51,990 --> 00:08:59,310
and for example if we look at the third

166
00:08:56,750 --> 00:09:03,959
character the green one which is a

167
00:08:59,310 --> 00:09:06,569
Japanese character for water this six C

168
00:09:03,959 --> 00:09:09,329
24 this is not necessarily the

169
00:09:06,570 --> 00:09:12,630
representation and bite of this

170
00:09:09,330 --> 00:09:16,470
character this is the index of this

171
00:09:12,630 --> 00:09:19,339
character in Unicode so it's a unique

172
00:09:16,470 --> 00:09:22,589
number for the concept of this character

173
00:09:19,339 --> 00:09:25,800
code points are not defining the way a

174
00:09:22,589 --> 00:09:29,899
character are included but there will be

175
00:09:25,800 --> 00:09:33,329
multiple included that are defined by

176
00:09:29,899 --> 00:09:35,610
Unicode and one of them which is the

177
00:09:33,330 --> 00:09:38,640
most popular one is a Unicode

178
00:09:35,610 --> 00:09:42,920
transformation format eight eight four

179
00:09:38,640 --> 00:09:46,980
eight eight bits so the interesting

180
00:09:42,920 --> 00:09:48,959
element with utf-8 compared to ASCII is

181
00:09:46,980 --> 00:09:51,480
there now incidentally we have a

182
00:09:48,959 --> 00:09:54,569
variable and encoding so we cannot take

183
00:09:51,480 --> 00:09:58,230
any more as one character is one byte

184
00:09:54,570 --> 00:10:03,120
every time it will be in some cases so

185
00:09:58,230 --> 00:10:06,600
for all s key Latin character they will

186
00:10:03,120 --> 00:10:10,430
be equivalent to the s key character but

187
00:10:06,600 --> 00:10:15,480
any character that has a punctuation

188
00:10:10,430 --> 00:10:21,739
accent or any other language other than

189
00:10:15,480 --> 00:10:27,300
English will be encoded differently so

190
00:10:21,740 --> 00:10:29,370
yeah and the way we know the number of

191
00:10:27,300 --> 00:10:32,670
bytes used by each character the first

192
00:10:29,370 --> 00:10:34,470
the number of date at the beginning of

193
00:10:32,670 --> 00:10:39,089
the first byte will be fine so for

194
00:10:34,470 --> 00:10:44,579
example 40 byte will have 1 1 0 I start

195
00:10:39,089 --> 00:10:46,850
until to a maximum of 6 bytes with 6 1 4

196
00:10:44,579 --> 00:10:49,799
5 0

197
00:10:46,850 --> 00:10:52,889
so as I'm sure you tell fate is the most

198
00:10:49,799 --> 00:10:55,529
popular the change that you see pattern

199
00:10:52,889 --> 00:10:59,399
cooling is pretty rare at the moment a

200
00:10:55,529 --> 00:11:02,459
web server even desktop are mainly using

201
00:10:59,399 --> 00:11:05,629
utf-8 but we still need to keep in mind

202
00:11:02,459 --> 00:11:10,439
that there can be some color encoding

203
00:11:05,629 --> 00:11:14,489
because windows for a long time was by

204
00:11:10,439 --> 00:11:17,309
default using ISO 8859 even early

205
00:11:14,489 --> 00:11:21,299
version of Windows 10 we're using this

206
00:11:17,309 --> 00:11:24,478
encoding which is basically a ski with a

207
00:11:21,299 --> 00:11:28,199
code page that support character but our

208
00:11:24,479 --> 00:11:34,019
accent for a French Spanish and if you

209
00:11:28,199 --> 00:11:36,389
were the language but fully even now i

210
00:11:34,019 --> 00:11:38,609
windows is switching to a default

211
00:11:36,389 --> 00:11:42,359
attempt it I think it's as two years at

212
00:11:38,609 --> 00:11:48,299
the arms start the switch for both the

213
00:11:42,359 --> 00:11:51,539
system and console of Windows so what

214
00:11:48,299 --> 00:11:53,850
can happen if you there's low encoding

215
00:11:51,539 --> 00:11:57,480
declare and you assume that it's VD f8

216
00:11:53,850 --> 00:11:59,759
so maybe you have a user that is using

217
00:11:57,480 --> 00:12:03,239
Windows that is writing a text plain

218
00:11:59,759 --> 00:12:07,579
text file so it can be for example a CSV

219
00:12:03,239 --> 00:12:11,879
yes we doesn't have declare encoding by

220
00:12:07,579 --> 00:12:16,108
the way it's defined so your user is

221
00:12:11,879 --> 00:12:20,100
saving with its default text editor in

222
00:12:16,109 --> 00:12:22,609
ISO 8859 but if your assistance of your

223
00:12:20,100 --> 00:12:26,339
application is opening this file and

224
00:12:22,609 --> 00:12:28,829
thinking is pf8 you will have some

225
00:12:26,339 --> 00:12:32,699
calculate will not be recognized because

226
00:12:28,829 --> 00:12:36,659
it's not included the way it so that was

227
00:12:32,699 --> 00:12:40,378
the ammonia production or basic concept

228
00:12:36,659 --> 00:12:44,789
of where Unicode claim came from and

229
00:12:40,379 --> 00:12:47,609
what the problem is it's solving now we

230
00:12:44,789 --> 00:12:51,479
know that mini code is including our

231
00:12:47,609 --> 00:12:54,600
character from every language the thing

232
00:12:51,479 --> 00:12:56,189
is the character the same character same

233
00:12:54,600 --> 00:12:58,830
visual representation can be anchored

234
00:12:56,189 --> 00:13:01,500
different different way with

235
00:12:58,830 --> 00:13:05,850
different unicode characters so for

236
00:13:01,500 --> 00:13:08,700
example I've had at the top right you

237
00:13:05,850 --> 00:13:12,630
can see a few examples so this C capital

238
00:13:08,700 --> 00:13:14,970
C with Sevilla can be both written with

239
00:13:12,630 --> 00:13:17,850
a single character but also with a

240
00:13:14,970 --> 00:13:19,970
capital C with a combining character

241
00:13:17,850 --> 00:13:22,650
that will include this is a bit like the

242
00:13:19,970 --> 00:13:26,310
the character on my title slide which

243
00:13:22,650 --> 00:13:31,770
has combining character which is high on

244
00:13:26,310 --> 00:13:33,569
top of any character and the idea with

245
00:13:31,770 --> 00:13:36,150
normalization is we're going to try to

246
00:13:33,570 --> 00:13:39,750
compare a Unicode string and see if they

247
00:13:36,150 --> 00:13:43,860
are actually at the same meaning or or

248
00:13:39,750 --> 00:13:47,490
equivalent so we'll have NFC a

249
00:13:43,860 --> 00:13:50,730
normalization and NFC key si si si

250
00:13:47,490 --> 00:13:53,940
sorry Norma's Asian and they're actually

251
00:13:50,730 --> 00:13:57,000
two others that are really similar to

252
00:13:53,940 --> 00:13:57,870
those two so I've simplified a bit for

253
00:13:57,000 --> 00:14:01,620
its presentation

254
00:13:57,870 --> 00:14:05,700
and those are my ization will happen in

255
00:14:01,620 --> 00:14:08,880
multiple use case in your web

256
00:14:05,700 --> 00:14:13,380
application or library so sometimes

257
00:14:08,880 --> 00:14:15,540
ivory will transform your input with and

258
00:14:13,380 --> 00:14:17,640
try to normalize them maybe because they

259
00:14:15,540 --> 00:14:20,520
are building a URL and they are trying

260
00:14:17,640 --> 00:14:25,860
to make sure your oath the old name will

261
00:14:20,520 --> 00:14:28,110
be a value or DNS friendly sometime user

262
00:14:25,860 --> 00:14:31,440
Pat when the from our red are normalized

263
00:14:28,110 --> 00:14:35,010
make sure special character will be

264
00:14:31,440 --> 00:14:39,870
properly handle when we request system

265
00:14:35,010 --> 00:14:42,120
API sometime just to show transformation

266
00:14:39,870 --> 00:14:45,210
I'll try to user name or this type of

267
00:14:42,120 --> 00:14:48,600
data it's also been used something to

268
00:14:45,210 --> 00:14:50,310
generate slug because the NF kisi

269
00:14:48,600 --> 00:14:53,370
specifically normalization will convert

270
00:14:50,310 --> 00:14:57,979
many character to ASCII character so

271
00:14:53,370 --> 00:15:01,410
sometimes people will use it to

272
00:14:57,980 --> 00:15:04,180
physically transform special character

273
00:15:01,410 --> 00:15:06,579
to ask you only string

274
00:15:04,180 --> 00:15:11,709
practice this is the intended for this

275
00:15:06,580 --> 00:15:14,050
único dozen clearly document why those

276
00:15:11,710 --> 00:15:16,779
in which use case it's a to you

277
00:15:14,050 --> 00:15:20,170
personalization but basically it's used

278
00:15:16,779 --> 00:15:23,080
multiple cases to compare straining or

279
00:15:20,170 --> 00:15:28,510
simplified the string to comparable

280
00:15:23,080 --> 00:15:33,850
performance so our already mentioned the

281
00:15:28,510 --> 00:15:36,720
aerials NFC and NF KC so the the first C

282
00:15:33,850 --> 00:15:40,029
means canonical and because

283
00:15:36,720 --> 00:15:43,870
compatibility couldn't be just NFC they

284
00:15:40,029 --> 00:15:46,089
had K for compatibility so it's a bit

285
00:15:43,870 --> 00:15:50,620
confusing but what you need to remember

286
00:15:46,089 --> 00:15:53,950
is that NFC is a strict comparison of

287
00:15:50,620 --> 00:15:57,250
the commands that we'll have for example

288
00:15:53,950 --> 00:16:01,000
will match the CCS Zillah as a character

289
00:15:57,250 --> 00:16:04,540
or the decomposed version of it but the

290
00:16:01,000 --> 00:16:07,450
compatibility mode will include it's

291
00:16:04,540 --> 00:16:11,520
much more flexible comparison so for

292
00:16:07,450 --> 00:16:14,560
example if we normalize the scripted age

293
00:16:11,520 --> 00:16:16,839
it would be equal it would be as a

294
00:16:14,560 --> 00:16:21,010
result capital H it would be equivalent

295
00:16:16,839 --> 00:16:23,980
if we compare them to the ASCII or Latin

296
00:16:21,010 --> 00:16:28,270
age same for fraction they will be

297
00:16:23,980 --> 00:16:31,930
decomposed exponent will be also be

298
00:16:28,270 --> 00:16:37,110
composed many measuring unit will be

299
00:16:31,930 --> 00:16:40,359
converted to a ski a ski a character

300
00:16:37,110 --> 00:16:42,370
also their start of calculus or just

301
00:16:40,360 --> 00:16:45,450
circle around a character that would

302
00:16:42,370 --> 00:16:48,820
become decomposed just asking a personal

303
00:16:45,450 --> 00:16:51,640
so where is the security list so so far

304
00:16:48,820 --> 00:16:55,270
I've done a big introduction on Unicode

305
00:16:51,640 --> 00:16:58,270
I started to see that many API do

306
00:16:55,270 --> 00:17:00,819
normalization to l the potentially the

307
00:16:58,270 --> 00:17:04,059
developer or the user to add a valid

308
00:17:00,820 --> 00:17:09,189
input it can add some side effect and

309
00:17:04,059 --> 00:17:13,780
the first one the most pitiful which was

310
00:17:09,189 --> 00:17:17,050
presented at blackhat late summer last

311
00:17:13,780 --> 00:17:18,609
year so basically we're gonna have some

312
00:17:17,050 --> 00:17:21,428
character that will be converted to

313
00:17:18,609 --> 00:17:25,178
equivalent ASCII character and kill as

314
00:17:21,429 --> 00:17:29,410
can be issue in Europe or far apart

315
00:17:25,179 --> 00:17:33,040
and we have this very visual example

316
00:17:29,410 --> 00:17:36,730
where we're gonna do maybe a redirection

317
00:17:33,040 --> 00:17:40,600
maybe for what - and we're validating

318
00:17:36,730 --> 00:17:42,820
that okay the domain to which were real

319
00:17:40,600 --> 00:17:45,550
date ring are only some domain from

320
00:17:42,820 --> 00:17:48,610
Microsoft welcome the thing is the

321
00:17:45,550 --> 00:17:53,020
attacker will use a Unicode character

322
00:17:48,610 --> 00:17:58,030
here I count up so this is the a /c is a

323
00:17:53,020 --> 00:18:00,870
single unicode character but because in

324
00:17:58,030 --> 00:18:05,050
the location other browser used to

325
00:18:00,870 --> 00:18:08,939
normalize this character to a slash C so

326
00:18:05,050 --> 00:18:12,879
in a ski so browser we're doing this

327
00:18:08,940 --> 00:18:17,380
probably to help developer valid URL so

328
00:18:12,880 --> 00:18:19,570
they were doing a normalization pass so

329
00:18:17,380 --> 00:18:23,250
this is not an issue that was on the

330
00:18:19,570 --> 00:18:28,600
server side but implicitly the browser

331
00:18:23,250 --> 00:18:29,940
were converting to this so in the end if

332
00:18:28,600 --> 00:18:33,100
we're redirecting

333
00:18:29,940 --> 00:18:36,010
over to with secret token student Lee we

334
00:18:33,100 --> 00:18:38,050
can excavate potentially interesting

335
00:18:36,010 --> 00:18:41,379
values to our own domain that we control

336
00:18:38,050 --> 00:18:45,520
because we have just break the URL and

337
00:18:41,380 --> 00:18:48,340
we're controlling dogsy so further

338
00:18:45,520 --> 00:18:54,190
example with at symbol

339
00:18:48,340 --> 00:18:57,418
question mark and slash some other

340
00:18:54,190 --> 00:18:57,419
example in committed mode

341
00:18:58,120 --> 00:19:06,219
so I hope I didn't didn't miss too much

342
00:19:02,980 --> 00:19:08,110
so right after showing a couple of

343
00:19:06,220 --> 00:19:10,690
example of normalization I just wanted

344
00:19:08,110 --> 00:19:12,969
to show a quick tool I did it's an

345
00:19:10,690 --> 00:19:15,130
interactive list of character that can

346
00:19:12,970 --> 00:19:20,110
have interesting security implications

347
00:19:15,130 --> 00:19:22,120
so if you think you the application is

348
00:19:20,110 --> 00:19:26,860
doing some memorization on some string

349
00:19:22,120 --> 00:19:32,469
or URL you can look at character for

350
00:19:26,860 --> 00:19:35,678
example this exponent a this role

351
00:19:32,470 --> 00:19:39,190
and basically it's explaining you okay

352
00:19:35,679 --> 00:19:43,840
this character 0 a a good point is

353
00:19:39,190 --> 00:19:46,179
convert to ASCII 8 so 61 and this is the

354
00:19:43,840 --> 00:19:50,408
way it's being encoded in different

355
00:19:46,179 --> 00:19:53,140
language it will look like this and you

356
00:19:50,409 --> 00:19:56,590
can also add there's a few options so

357
00:19:53,140 --> 00:19:58,950
you can decide to either code section

358
00:19:56,590 --> 00:20:01,570
per language also some character

359
00:19:58,950 --> 00:20:05,169
transformation will not be effective in

360
00:20:01,570 --> 00:20:09,360
some language and you can filter if you

361
00:20:05,169 --> 00:20:13,440
only want to look at NFC which is the

362
00:20:09,360 --> 00:20:16,408
canonical so this is a more most strict

363
00:20:13,440 --> 00:20:19,179
normalization but as you can see an FCC

364
00:20:16,409 --> 00:20:22,240
will have a bunch of character to choose

365
00:20:19,179 --> 00:20:24,760
from if you need to encode some

366
00:20:22,240 --> 00:20:28,210
character to do some bypass so thank and

367
00:20:24,760 --> 00:20:31,600
the search feature is can be used to if

368
00:20:28,210 --> 00:20:34,240
you need you know what character you

369
00:20:31,600 --> 00:20:37,449
want to use you can search for example K

370
00:20:34,240 --> 00:20:41,740
which unicode character can potentially

371
00:20:37,450 --> 00:20:49,779
be convert in transit by some library or

372
00:20:41,740 --> 00:20:51,700
some function to ASCII characters so in

373
00:20:49,779 --> 00:20:53,649
some cases it will not only be a

374
00:20:51,700 --> 00:20:58,210
escalator so sometimes there will be an

375
00:20:53,649 --> 00:21:00,549
apostrophe after the letter but the IDS

376
00:20:58,210 --> 00:21:04,120
are those Unicode character can be

377
00:21:00,549 --> 00:21:08,139
translated to a scheme if the specific

378
00:21:04,120 --> 00:21:11,260
transformation is applied so that was

379
00:21:08,140 --> 00:21:14,409
for the quick example I'll place the

380
00:21:11,260 --> 00:21:16,090
link and twitch right after this

381
00:21:14,409 --> 00:21:19,090
presentation so if you want to play with

382
00:21:16,090 --> 00:21:22,059
it and search for it search for

383
00:21:19,090 --> 00:21:25,178
characters and also to test application

384
00:21:22,059 --> 00:21:28,960
in the context of pen test or even bug

385
00:21:25,179 --> 00:21:31,330
bounty so a general recommendation if

386
00:21:28,960 --> 00:21:33,909
you are doing sequel check make sure you

387
00:21:31,330 --> 00:21:36,520
do no magician before there's any speed

388
00:21:33,909 --> 00:21:38,289
check because if you do a validation and

389
00:21:36,520 --> 00:21:44,500
for example look for a black list there

390
00:21:38,289 --> 00:21:46,000
is no the keyword X but there is after

391
00:21:44,500 --> 00:21:50,200
the speed check an organization that

392
00:21:46,000 --> 00:21:53,289
could generate the the keyword X you can

393
00:21:50,200 --> 00:21:55,570
have a bypass review the library you're

394
00:21:53,289 --> 00:21:57,129
using especially if you have a critical

395
00:21:55,570 --> 00:21:59,889
application that is doing some

396
00:21:57,130 --> 00:22:02,649
validation on all sign-on or stuff like

397
00:21:59,890 --> 00:22:05,440
that maybe the achieved ever you're

398
00:22:02,649 --> 00:22:07,059
using or the network every could do some

399
00:22:05,440 --> 00:22:11,140
normalization and you don't know about

400
00:22:07,059 --> 00:22:12,899
it so you can test it with the character

401
00:22:11,140 --> 00:22:16,659
I'm providing in the list

402
00:22:12,899 --> 00:22:17,289
so again prefer general security rural

403
00:22:16,659 --> 00:22:19,600
tones

404
00:22:17,289 --> 00:22:23,919
prefer white list over black list is

405
00:22:19,600 --> 00:22:27,189
possible do string validation at the

406
00:22:23,919 --> 00:22:30,070
source so I'm gonna jump to a case

407
00:22:27,190 --> 00:22:33,909
modification which is pretty similar to

408
00:22:30,070 --> 00:22:36,428
an origin you can see so a case

409
00:22:33,909 --> 00:22:38,700
modification will be every time with to

410
00:22:36,429 --> 00:22:43,090
uppercase or to lowercase

411
00:22:38,700 --> 00:22:45,309
transformation so Unicode define the

412
00:22:43,090 --> 00:22:48,100
behavior for every character

413
00:22:45,309 --> 00:22:49,928
what would should be the result for the

414
00:22:48,100 --> 00:22:53,709
uppercase and lowercase transformation

415
00:22:49,929 --> 00:22:55,690
so for this reason almost our language

416
00:22:53,710 --> 00:23:00,490
will have the same behavior

417
00:22:55,690 --> 00:23:03,309
I've noticed that go and see shark do

418
00:23:00,490 --> 00:23:07,299
have a more limited subset of character

419
00:23:03,309 --> 00:23:09,279
that can become a ski so it's a there

420
00:23:07,299 --> 00:23:11,158
are few that are not covered important

421
00:23:09,279 --> 00:23:15,669
go and see shark but aside from that

422
00:23:11,159 --> 00:23:18,280
Ruby Java HP most of them have the same

423
00:23:15,669 --> 00:23:19,340
either as defined in the Unicode

424
00:23:18,280 --> 00:23:23,420
standard

425
00:23:19,340 --> 00:23:25,399
assume that al Qaeda will advance so if

426
00:23:23,420 --> 00:23:27,590
you apply uppercase to some special

427
00:23:25,400 --> 00:23:31,660
Gator sometimes they will not have any

428
00:23:27,590 --> 00:23:34,879
variation but many character will have

429
00:23:31,660 --> 00:23:38,240
Riddick to the same characters for

430
00:23:34,880 --> 00:23:41,780
example we're gonna see an example in a

431
00:23:38,240 --> 00:23:45,650
moment but the Kelvin degree so for the

432
00:23:41,780 --> 00:23:47,660
temperature the kelvin' symbol if you

433
00:23:45,650 --> 00:23:51,290
apply the lowercase and transformation

434
00:23:47,660 --> 00:23:54,830
it will become lowercase K like at the S

435
00:23:51,290 --> 00:23:58,000
key Latin character so if we apply

436
00:23:54,830 --> 00:24:00,770
uppercase transformation to lowercase P

437
00:23:58,000 --> 00:24:04,430
preview of this no surprise it becomes

438
00:24:00,770 --> 00:24:07,190
capital A but it's interesting to note

439
00:24:04,430 --> 00:24:09,080
that there's a few other characters

440
00:24:07,190 --> 00:24:11,600
which are also on the same application

441
00:24:09,080 --> 00:24:14,720
that I just present that will become s

442
00:24:11,600 --> 00:24:18,169
character so this German B will become s

443
00:24:14,720 --> 00:24:20,510
s capital s and this is because it's

444
00:24:18,170 --> 00:24:24,710
part of the German language this is the

445
00:24:20,510 --> 00:24:27,680
way the language work there's not the

446
00:24:24,710 --> 00:24:31,460
capital B like this one doesn't exist

447
00:24:27,680 --> 00:24:34,850
it's written with two s I same with this

448
00:24:31,460 --> 00:24:39,730
fi character that is a ligature of F and

449
00:24:34,850 --> 00:24:42,919
I it becomes capital F and get not I

450
00:24:39,730 --> 00:24:46,430
which is if you compare it to the the

451
00:24:42,920 --> 00:24:48,710
string if I would be equal lowercase

452
00:24:46,430 --> 00:24:52,280
will have completely different character

453
00:24:48,710 --> 00:24:54,320
that will ask this behavior so character

454
00:24:52,280 --> 00:24:56,629
that have impact on uppercase the

455
00:24:54,320 --> 00:24:58,100
information does necessarily have the

456
00:24:56,630 --> 00:25:03,560
same repetition with lowercase

457
00:24:58,100 --> 00:25:06,620
transformation but K will work and so if

458
00:25:03,560 --> 00:25:09,710
we do a lowercase of the 24 to a

459
00:25:06,620 --> 00:25:14,320
character which is the Kelvin degree

460
00:25:09,710 --> 00:25:17,810
symbol it will become 6 B which is s key

461
00:25:14,320 --> 00:25:20,750
okay so if you're comparing a toast and

462
00:25:17,810 --> 00:25:24,649
your one of your own could be a Facebook

463
00:25:20,750 --> 00:25:28,460
IKEA or geeky I don't know you can

464
00:25:24,650 --> 00:25:30,840
possibly put 21 at week two if you are

465
00:25:28,460 --> 00:25:33,450
trying to bypass the filter

466
00:25:30,840 --> 00:25:38,519
there's also this Turkish character that

467
00:25:33,450 --> 00:25:43,440
can become lowercase I along with some '

468
00:25:38,519 --> 00:25:47,009
so it should be a - right above the eye

469
00:25:43,440 --> 00:25:49,379
but basically it's a dot less eye but

470
00:25:47,009 --> 00:25:52,740
with a dot on top of it so PowerPoint is

471
00:25:49,379 --> 00:25:55,769
not rendering properly but so it's not

472
00:25:52,740 --> 00:25:58,649
exactly a ski but sometime it could be

473
00:25:55,769 --> 00:26:04,440
enough if the second part is later

474
00:25:58,649 --> 00:26:07,018
talking truncated or removed so again a

475
00:26:04,440 --> 00:26:08,879
potential issue will be similar to a

476
00:26:07,019 --> 00:26:12,240
normalization so if you're doing a

477
00:26:08,879 --> 00:26:16,619
critical signature on strings and you

478
00:26:12,240 --> 00:26:19,580
have done to uppercase or to lowercase

479
00:26:16,619 --> 00:26:23,580
on your value before doing this I check

480
00:26:19,580 --> 00:26:25,860
this can cause some issues it can be

481
00:26:23,580 --> 00:26:30,240
used also to bypass where four filters

482
00:26:25,860 --> 00:26:33,600
of similar to known as Asian so quick

483
00:26:30,240 --> 00:26:35,869
example so if were maybe looking for is

484
00:26:33,600 --> 00:26:39,360
the current role or the current user

485
00:26:35,869 --> 00:26:42,570
equal to admin we might not be in the

486
00:26:39,360 --> 00:26:45,740
application able to register an admin

487
00:26:42,570 --> 00:26:51,178
user but we might be able to register

488
00:26:45,740 --> 00:26:53,580
idiom with Douglas I am and this

489
00:26:51,179 --> 00:26:57,480
character once the operation summation

490
00:26:53,580 --> 00:27:04,230
will be fi will be equal to this n men

491
00:26:57,480 --> 00:27:07,230
in Colin ASCII characters so another

492
00:27:04,230 --> 00:27:10,379
example this is a Java code of a class

493
00:27:07,230 --> 00:27:13,740
doing all validation in TLS

494
00:27:10,379 --> 00:27:17,759
communication so here we have two

495
00:27:13,740 --> 00:27:20,580
variable name and templates so name will

496
00:27:17,759 --> 00:27:24,090
be the toast which we're connecting and

497
00:27:20,580 --> 00:27:26,580
template will be the host name which the

498
00:27:24,090 --> 00:27:31,259
library has extracted from a certificate

499
00:27:26,580 --> 00:27:34,019
but because to lowercase is applied then

500
00:27:31,259 --> 00:27:35,360
we could add a managed switch yet that

501
00:27:34,019 --> 00:27:39,960
would have

502
00:27:35,360 --> 00:27:41,149
Kelvin K for example in Austin and kill

503
00:27:39,960 --> 00:27:45,679
them degree

504
00:27:41,149 --> 00:27:49,518
would be transposed to a lowercase key

505
00:27:45,679 --> 00:27:53,179
in this case and could be used to bypass

506
00:27:49,519 --> 00:27:56,499
this also a verification we have this

507
00:27:53,179 --> 00:27:59,409
also this recently of the MD general

508
00:27:56,499 --> 00:28:04,370
where this is a password reset

509
00:27:59,409 --> 00:28:08,960
functionality where basically the email

510
00:28:04,370 --> 00:28:12,408
was doing a weak comparison which I

511
00:28:08,960 --> 00:28:15,769
think of the word case and in the end

512
00:28:12,409 --> 00:28:17,690
the the problem here is that first

513
00:28:15,769 --> 00:28:21,139
there's a weakness in the comparison of

514
00:28:17,690 --> 00:28:24,320
the email with the database the

515
00:28:21,139 --> 00:28:27,320
restoring the user but it's sending an

516
00:28:24,320 --> 00:28:32,418
email to the original email in the form

517
00:28:27,320 --> 00:28:35,090
that was submit and because of this we

518
00:28:32,419 --> 00:28:37,879
could have we're trying to impersonate

519
00:28:35,090 --> 00:28:41,449
maybe Superman and we're going to

520
00:28:37,879 --> 00:28:46,070
register a super Indian account with AI

521
00:28:41,450 --> 00:28:48,440
that is satisfied here the feasibility

522
00:28:46,070 --> 00:28:50,899
and the actual expert ability might not

523
00:28:48,440 --> 00:28:52,999
be possible if we cannot we don't manage

524
00:28:50,899 --> 00:28:55,939
to have SMTP server that receive this

525
00:28:52,999 --> 00:29:00,499
email so I'm not hundred percent sure it

526
00:28:55,940 --> 00:29:02,869
can be possible on a real application

527
00:29:00,499 --> 00:29:07,399
but this is an article was patch in each

528
00:29:02,869 --> 00:29:10,070
angle and the fix was they change the

529
00:29:07,399 --> 00:29:15,168
comparison but it's not this that is

530
00:29:10,070 --> 00:29:16,939
doing a completely completely mitigating

531
00:29:15,169 --> 00:29:19,009
the the problem here

532
00:29:16,940 --> 00:29:21,080
what if them is that instead they are

533
00:29:19,009 --> 00:29:23,600
extracting the email again from the

534
00:29:21,080 --> 00:29:25,908
other ways from this user to make sure

535
00:29:23,600 --> 00:29:27,889
the are using an email that they are

536
00:29:25,909 --> 00:29:33,409
trusting in the first place so a value

537
00:29:27,889 --> 00:29:38,360
from the database so mitigation similar

538
00:29:33,409 --> 00:29:40,639
to no magician so but here in most

539
00:29:38,360 --> 00:29:43,059
language and library when they are doing

540
00:29:40,639 --> 00:29:45,498
is really critical check they will have

541
00:29:43,059 --> 00:29:48,529
custom function that are making sure

542
00:29:45,499 --> 00:29:50,330
that the work is are only applied to s

543
00:29:48,529 --> 00:29:53,509
connector this is something I've seen in

544
00:29:50,330 --> 00:29:54,389
the GDK for example in Java and a few

545
00:29:53,509 --> 00:29:57,179
other library

546
00:29:54,390 --> 00:30:01,320
in c-sharp they have a safe function

547
00:29:57,179 --> 00:30:05,190
that is to lowercase Brian so if you

548
00:30:01,320 --> 00:30:08,990
want to do a case in sensible check you

549
00:30:05,190 --> 00:30:14,279
can use this function it would be safe

550
00:30:08,990 --> 00:30:16,019
okay so I'm I think I told that I'm

551
00:30:14,279 --> 00:30:19,470
almost done with time so I'm gonna

552
00:30:16,019 --> 00:30:22,830
quickly I go through the encoding bypass

553
00:30:19,470 --> 00:30:26,399
for Wes but I'm gonna have to skip the

554
00:30:22,830 --> 00:30:29,000
small two section for the deterrent

555
00:30:26,399 --> 00:30:35,309
ability and the pinnacle below which was

556
00:30:29,000 --> 00:30:37,980
just only a dollar sign so graph will be

557
00:30:35,309 --> 00:30:40,649
a system in between your client and your

558
00:30:37,980 --> 00:30:43,200
application or your system and yeah it

559
00:30:40,649 --> 00:30:46,289
is that will include in a way so that

560
00:30:43,200 --> 00:30:48,570
the firewall that is looking for

561
00:30:46,289 --> 00:30:50,879
specific string will not see the

562
00:30:48,570 --> 00:30:54,450
malicious pattern and reach the

563
00:30:50,880 --> 00:30:57,059
verification so utf-8 is pretty common

564
00:30:54,450 --> 00:30:58,919
but Unicode is defining a few other and

565
00:30:57,059 --> 00:31:00,629
Cooling that might be supported on your

566
00:30:58,919 --> 00:31:05,669
system

567
00:31:00,630 --> 00:31:09,840
one interesting one is utf-16 utf-16 as

568
00:31:05,669 --> 00:31:13,850
a system of byte order mark meaning that

569
00:31:09,840 --> 00:31:13,850
even if your default encoding is utf-8

570
00:31:13,909 --> 00:31:21,679
if you define in your text file maybe

571
00:31:16,740 --> 00:31:24,299
XML file byte order mark for utf-16

572
00:31:21,679 --> 00:31:29,159
automatically the XML parser will switch

573
00:31:24,299 --> 00:31:31,139
to utf-16 so this can be useful if you

574
00:31:29,159 --> 00:31:34,590
have something in between that is

575
00:31:31,139 --> 00:31:39,120
looking for malicious XML pelo you can

576
00:31:34,590 --> 00:31:45,049
include it with in daf-16 both before or

577
00:31:39,120 --> 00:31:49,860
big-endian so a quick example here of

578
00:31:45,049 --> 00:31:53,039
this power would look so this is a XML

579
00:31:49,860 --> 00:31:54,928
document included in utf-16 so we can

580
00:31:53,039 --> 00:31:57,000
see there are some byte order mark at

581
00:31:54,929 --> 00:31:59,940
the beginning and every character is

582
00:31:57,000 --> 00:32:02,970
taking two bytes in practice if you open

583
00:31:59,940 --> 00:32:04,889
this on your editor or the way your

584
00:32:02,970 --> 00:32:06,520
application would see it it would be as

585
00:32:04,889 --> 00:32:10,479
a regular exam

586
00:32:06,520 --> 00:32:14,080
the truth XML also has another option

587
00:32:10,480 --> 00:32:17,110
specifically its examine documents in

588
00:32:14,080 --> 00:32:22,030
Excel you can define in the first

589
00:32:17,110 --> 00:32:25,240
declaration node the encoding and from

590
00:32:22,030 --> 00:32:30,129
this it will switch to a design coding

591
00:32:25,240 --> 00:32:33,820
so even if your parser is your it's

592
00:32:30,130 --> 00:32:36,580
being specified use this encoding it can

593
00:32:33,820 --> 00:32:38,919
be switch also this way the screenshot

594
00:32:36,580 --> 00:32:42,309
is showing an interesting parser which

595
00:32:38,920 --> 00:32:43,660
is Olympics no.2 in SC and what's

596
00:32:42,309 --> 00:32:45,389
interesting is that the encoding is

597
00:32:43,660 --> 00:32:48,340
switching right after the attribute

598
00:32:45,390 --> 00:32:50,860
instead of the end of times the first

599
00:32:48,340 --> 00:32:53,139
detection time so this is a interesting

600
00:32:50,860 --> 00:32:55,570
behavior but India is going to be the

601
00:32:53,140 --> 00:32:58,510
same principle we just want to bypass

602
00:32:55,570 --> 00:33:00,280
maybe we have some malicious path but

603
00:32:58,510 --> 00:33:02,860
we're using our managers method that

604
00:33:00,280 --> 00:33:06,610
were using in our Excel payload to do an

605
00:33:02,860 --> 00:33:09,459
X 60 or some type of RC but because

606
00:33:06,610 --> 00:33:12,939
we're including it in utf-16 we might be

607
00:33:09,460 --> 00:33:14,320
able to bypass some filters so i need to

608
00:33:12,940 --> 00:33:18,610
quickly mention that

609
00:33:14,320 --> 00:33:20,909
well utf-16 can be useful resources for

610
00:33:18,610 --> 00:33:23,979
bypassing that there might be some

611
00:33:20,910 --> 00:33:26,679
easier ways with external entities

612
00:33:23,980 --> 00:33:28,720
double encoding don't put the protractor

613
00:33:26,679 --> 00:33:32,530
in the case of bypassing success for

614
00:33:28,720 --> 00:33:35,590
example because browser often truncate

615
00:33:32,530 --> 00:33:37,570
non-credible character but yeah i just

616
00:33:35,590 --> 00:33:39,820
need to mention it's maybe a bit out of

617
00:33:37,570 --> 00:33:43,740
scope but i need to mention because it's

618
00:33:39,820 --> 00:33:47,790
probably an easier of new inbox case and

619
00:33:43,740 --> 00:33:51,880
the last element I want to show for

620
00:33:47,790 --> 00:33:56,470
application of Unicode in to bypass

621
00:33:51,880 --> 00:34:01,720
filter there is a common bypass for XSS

622
00:33:56,470 --> 00:34:04,000
filter in that neck so this is less an

623
00:34:01,720 --> 00:34:10,060
actual thing because the knife core has

624
00:34:04,000 --> 00:34:11,770
drop is XSS filter but basically in more

625
00:34:10,060 --> 00:34:13,149
than that application will use SQL

626
00:34:11,770 --> 00:34:15,579
Server

627
00:34:13,149 --> 00:34:17,949
and SQL Server or maybe the client

628
00:34:15,579 --> 00:34:22,779
library I'm not sure which component is

629
00:34:17,949 --> 00:34:26,730
doing normalization but if you're having

630
00:34:22,779 --> 00:34:28,989
a column that is n bar chart and

631
00:34:26,730 --> 00:34:30,520
depending of the coalition so the

632
00:34:28,989 --> 00:34:33,668
include different coding of your

633
00:34:30,520 --> 00:34:36,369
database character might be convert to

634
00:34:33,668 --> 00:34:38,379
ASCII characters in this case we're

635
00:34:36,369 --> 00:34:42,309
inserting an image source but with the

636
00:34:38,379 --> 00:34:46,469
character FF 1c and but the way it will

637
00:34:42,309 --> 00:34:50,020
be stored it will be the ASCII character

638
00:34:46,469 --> 00:34:54,489
so in practice we'll add our store XSS

639
00:34:50,020 --> 00:34:58,630
and it will render as the as on the

640
00:34:54,489 --> 00:35:01,020
right so I have to skip to last section

641
00:34:58,630 --> 00:35:05,260
which are pretty quick it was just a

642
00:35:01,020 --> 00:35:07,569
quick example of the clinical attacks so

643
00:35:05,260 --> 00:35:10,839
for example error and with on the scope

644
00:35:07,569 --> 00:35:13,150
with a small dot hunter few

645
00:35:10,839 --> 00:35:16,839
recommendation and make sure if you are

646
00:35:13,150 --> 00:35:18,670
doing conversion that because in some

647
00:35:16,839 --> 00:35:21,069
language character would be truncated or

648
00:35:18,670 --> 00:35:23,319
replaced with unknown one so make sure

649
00:35:21,069 --> 00:35:27,779
if you're migrating or doing backups

650
00:35:23,319 --> 00:35:31,390
that character are properly sized so and

651
00:35:27,779 --> 00:35:33,940
I'll be sharing the link to the slides

652
00:35:31,390 --> 00:35:36,400
so if you want to see the last couple of

653
00:35:33,940 --> 00:35:38,950
slides or see the resource that I have

654
00:35:36,400 --> 00:35:41,890
mentioned along the way this will be

655
00:35:38,950 --> 00:35:46,598
published on this URL so I'll paste it

656
00:35:41,890 --> 00:35:49,240
right after on the twitch streams but

657
00:35:46,599 --> 00:35:51,490
yeah or you can visit it right now so

658
00:35:49,240 --> 00:35:55,359
it's like go secure that get up the

659
00:35:51,490 --> 00:35:57,430
slash presentation to get the sites and

660
00:35:55,359 --> 00:36:00,609
welcome back so we have one question

661
00:35:57,430 --> 00:36:02,680
here it says does this hollow I'm sorry

662
00:36:00,609 --> 00:36:04,569
getting a little bit tired does this

663
00:36:02,680 --> 00:36:06,640
also work in certificates would it be

664
00:36:04,569 --> 00:36:08,680
possible to spoof a valid certificate by

665
00:36:06,640 --> 00:36:15,549
using Unicode characters like Kelvin K

666
00:36:08,680 --> 00:36:18,390
for example yes okay so basically the

667
00:36:15,549 --> 00:36:21,339
the code I've showed was an example of

668
00:36:18,390 --> 00:36:23,618
Unicode naughty so this is a special

669
00:36:21,339 --> 00:36:25,600
immunity of a specific language I would

670
00:36:23,619 --> 00:36:27,910
say

671
00:36:25,600 --> 00:36:31,180
is currently patched but the party is

672
00:36:27,910 --> 00:36:35,200
not officially released that's why I

673
00:36:31,180 --> 00:36:37,810
didn't put a CD or anything specific but

674
00:36:35,200 --> 00:36:40,480
the reason is that that critical to show

675
00:36:37,810 --> 00:36:44,770
it in this presentation is that in order

676
00:36:40,480 --> 00:36:46,990
to do full TLS interception you will

677
00:36:44,770 --> 00:36:49,870
need more than just bypassing hosting

678
00:36:46,990 --> 00:36:52,419
verification so for example if you want

679
00:36:49,870 --> 00:36:56,650
to man in the middle Android application

680
00:36:52,420 --> 00:36:58,900
or basically any type of crime you need

681
00:36:56,650 --> 00:37:02,200
to secure that would be signed by root

682
00:36:58,900 --> 00:37:05,230
authorities so but yes the in the case

683
00:37:02,200 --> 00:37:08,919
of the code that I have shown the

684
00:37:05,230 --> 00:37:11,860
scenario was you could crack to escape

685
00:37:08,920 --> 00:37:14,550
with a Unicode character in the common

686
00:37:11,860 --> 00:37:18,850
name so it's not possible in the out

687
00:37:14,550 --> 00:37:22,090
hunting section of the suit escape but

688
00:37:18,850 --> 00:37:25,120
because the subject is supporting

689
00:37:22,090 --> 00:37:28,750
Unicode strings you can add this type of

690
00:37:25,120 --> 00:37:31,480
roaming but the big limitation again

691
00:37:28,750 --> 00:37:35,830
that is missing to have a full menu of

692
00:37:31,480 --> 00:37:38,110
any job application TLS is you will need

693
00:37:35,830 --> 00:37:40,029
to be able to have a sign but

694
00:37:38,110 --> 00:37:46,180
authorities that would sign your sister

695
00:37:40,030 --> 00:37:49,810
yet and so far that I know these are a

696
00:37:46,180 --> 00:37:52,529
pretty strict role rule forbidding your

697
00:37:49,810 --> 00:37:55,390
certificate so it would not be possible

698
00:37:52,530 --> 00:37:58,720
this way but if you are I think an

699
00:37:55,390 --> 00:38:01,750
internal associate authorities and this

700
00:37:58,720 --> 00:38:06,609
would be a far-fetched but possible

701
00:38:01,750 --> 00:38:09,070
attacks make sense so but yes it will be

702
00:38:06,610 --> 00:38:12,220
possible to for example at Facebook with

703
00:38:09,070 --> 00:38:15,790
the Kelvin a degree has a key and

704
00:38:12,220 --> 00:38:17,169
because and you would put this in - okay

705
00:38:15,790 --> 00:38:20,140
that means return to the client and

706
00:38:17,170 --> 00:38:24,160
because the client will compare with a

707
00:38:20,140 --> 00:38:26,799
prior to that lower case operation then

708
00:38:24,160 --> 00:38:28,330
those name would match but again this

709
00:38:26,800 --> 00:38:31,540
will forget will need to be signed by

710
00:38:28,330 --> 00:38:34,000
some authorities so could be a scenario

711
00:38:31,540 --> 00:38:36,140
that you have somebody may be a country

712
00:38:34,000 --> 00:38:38,240
or highly

713
00:38:36,140 --> 00:38:42,770
motivate attacker that that knows about

714
00:38:38,240 --> 00:38:44,720
a route authorities that want to ID from

715
00:38:42,770 --> 00:38:47,930
the transversal area because

716
00:38:44,720 --> 00:38:49,609
organization are actively monitoring to

717
00:38:47,930 --> 00:38:53,390
see that are generated with their domain

718
00:38:49,610 --> 00:38:59,270
so it could be a way to maybe bypassed

719
00:38:53,390 --> 00:39:04,670
it but is kind of also but yeah still

720
00:38:59,270 --> 00:39:06,440
possible but probable now yeah but there

721
00:39:04,670 --> 00:39:09,170
will be an article soon as soon as the

722
00:39:06,440 --> 00:39:12,680
devotee is published there will be more

723
00:39:09,170 --> 00:39:18,260
detail about it but yeah cool

724
00:39:12,680 --> 00:39:22,339
I'm the acoustic ever blog yes and we

725
00:39:18,260 --> 00:39:24,680
have another cute question somebody asks

726
00:39:22,340 --> 00:39:29,000
what's your favorite favorite Unicode

727
00:39:24,680 --> 00:39:32,569
code point I would say the the most

728
00:39:29,000 --> 00:39:33,980
common one is key so Kelvin because it's

729
00:39:32,570 --> 00:39:37,230
working both with

730
00:39:33,980 --> 00:39:42,450
[Music]

731
00:39:37,230 --> 00:39:45,840
inform canonical so NFC and it's also

732
00:39:42,450 --> 00:39:50,009
working with to Ortiz because when

733
00:39:45,840 --> 00:39:52,410
comparison are insensitive of cases it's

734
00:39:50,010 --> 00:39:56,210
in general the rapper will choose to

735
00:39:52,410 --> 00:40:02,339
lowercase which has a bit less character

736
00:39:56,210 --> 00:40:04,290
available but yeah I will tell you you

737
00:40:02,340 --> 00:40:06,090
don't need to when you look over view

738
00:40:04,290 --> 00:40:07,560
you just find the operation that is done

739
00:40:06,090 --> 00:40:09,690
and you look at the character are

740
00:40:07,560 --> 00:40:12,330
possible but if you are testing blindly

741
00:40:09,690 --> 00:40:14,359
I would say key is one of the one to

742
00:40:12,330 --> 00:40:21,900
start with

743
00:40:14,359 --> 00:40:23,640
yeah okay let's do one last one to your

744
00:40:21,900 --> 00:40:25,920
knowledge are such transformations

745
00:40:23,640 --> 00:40:31,650
included by commercial scanners such as

746
00:40:25,920 --> 00:40:35,580
birth I don't think so because even in

747
00:40:31,650 --> 00:40:39,390
code review it's a lower case and upper

748
00:40:35,580 --> 00:40:44,250
case are pretty common but it we need to

749
00:40:39,390 --> 00:40:46,980
be in secret e critical components but

750
00:40:44,250 --> 00:40:49,080
it could actually but it's more looking

751
00:40:46,980 --> 00:40:52,770
mainly for logic flow so if you're

752
00:40:49,080 --> 00:40:55,710
bypassing maybe a SSRI filter so to

753
00:40:52,770 --> 00:41:00,600
bypass a filter that to be able to reach

754
00:40:55,710 --> 00:41:05,850
this if ik domain or oath its purity

755
00:41:00,600 --> 00:41:07,380
possible but you'll be limited okay well

756
00:41:05,850 --> 00:41:08,670
we're out of time a little bit late

757
00:41:07,380 --> 00:41:11,250
thank you very much for your

758
00:41:08,670 --> 00:41:13,530
presentation was great let's give a big

759
00:41:11,250 --> 00:41:16,140
round of applause on twitch chat for

760
00:41:13,530 --> 00:41:18,240
Phillip Otto and we'll be back really

761
00:41:16,140 --> 00:41:23,830
shortly with the last presentation of

762
00:41:18,240 --> 00:41:42,259
the day they will ask please and peace

763
00:41:23,830 --> 00:41:42,259
[Music]

