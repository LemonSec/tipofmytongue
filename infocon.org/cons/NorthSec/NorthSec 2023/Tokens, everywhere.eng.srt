1
00:27:59,340 --> 00:28:02,340
online

2
00:28:02,700 --> 00:28:06,620
all good online resume

3
00:28:11,580 --> 00:28:13,760
okay

4
00:28:14,360 --> 00:28:17,658
I think

5
00:28:18,919 --> 00:28:23,039
okay I think we are good to go uh first

6
00:28:23,039 --> 00:28:27,179
double checking is a zoom stream okay

7
00:28:27,179 --> 00:28:29,159
so you can hear my voice

8
00:28:29,159 --> 00:28:30,960
okay good

9
00:28:30,960 --> 00:28:33,120
so I have two remarks and these are

10
00:28:33,120 --> 00:28:37,039
quite a bit limiting my movement

11
00:28:38,700 --> 00:28:41,520
okay so uh welcome everybody

12
00:28:41,520 --> 00:28:45,299
to this Workshop and uh you can

13
00:28:45,299 --> 00:28:47,039
participate if you want to you can sleep

14
00:28:47,039 --> 00:28:50,400
if you want to it's okay it's a good

15
00:28:50,400 --> 00:28:53,760
place to work also like I think Roberto

16
00:28:53,760 --> 00:28:56,159
is working here so

17
00:28:56,159 --> 00:28:59,220
let's move on move forward so um we're

18
00:28:59,220 --> 00:29:01,260
going to talk about tokens

19
00:29:01,260 --> 00:29:04,220
and um

20
00:29:05,580 --> 00:29:10,220
tokens tokens tokens where are

21
00:29:14,159 --> 00:29:17,580
multiple discipline is always so I can

22
00:29:17,580 --> 00:29:20,658
now work no

23
00:29:21,360 --> 00:29:23,520
okay there we go

24
00:29:23,520 --> 00:29:27,000
so Key West about me so who am I so I'm

25
00:29:27,000 --> 00:29:29,640
mistress anymore also known as Dr as

26
00:29:29,640 --> 00:29:30,539
ready

27
00:29:30,539 --> 00:29:33,240
and I work for security works

28
00:29:33,240 --> 00:29:35,700
been there two years now in counter

29
00:29:35,700 --> 00:29:38,159
threat units and what I do there I I

30
00:29:38,159 --> 00:29:40,380
just research so that's my job so I

31
00:29:40,380 --> 00:29:43,320
research I

32
00:29:43,320 --> 00:29:45,600
I try to find owner abilities from

33
00:29:45,600 --> 00:29:47,820
Microsoft products especially from cloud

34
00:29:47,820 --> 00:29:50,460
related I report them to Microsoft and

35
00:29:50,460 --> 00:29:52,919
they fix it or not and then also we have

36
00:29:52,919 --> 00:29:55,399
our own tool called thesis and um

37
00:29:55,399 --> 00:29:57,960
they're gonna they are using my research

38
00:29:57,960 --> 00:30:00,299
on that also so that we can detect stuff

39
00:30:00,299 --> 00:30:03,299
and prepare stuff but that's about

40
00:30:03,299 --> 00:30:06,059
that what else I'm Microsoft MVP in

41
00:30:06,059 --> 00:30:06,899
security

42
00:30:06,899 --> 00:30:10,140
also MBR which stands for micros most

43
00:30:10,140 --> 00:30:13,020
valuable researcher so this is my second

44
00:30:13,020 --> 00:30:14,580
year then

45
00:30:14,580 --> 00:30:16,340
and uh

46
00:30:16,340 --> 00:30:19,080
every year in Black at us they are going

47
00:30:19,080 --> 00:30:22,080
to publish the list of 100 researchers

48
00:30:22,080 --> 00:30:24,960
and that's the list I'm on SO

49
00:30:24,960 --> 00:30:26,880
happy to be there I don't know how it

50
00:30:26,880 --> 00:30:30,500
goes this year but we'll see

51
00:30:30,779 --> 00:30:31,380
um

52
00:30:31,380 --> 00:30:34,679
I created a tool called A8 internals I

53
00:30:34,679 --> 00:30:37,260
think at least some of you know that and

54
00:30:37,260 --> 00:30:40,140
I and those who are here

55
00:30:40,140 --> 00:30:43,200
I have some stickers so we I have the

56
00:30:43,200 --> 00:30:45,000
basic ones

57
00:30:45,000 --> 00:30:48,120
like these ones and then shiny ones so

58
00:30:48,120 --> 00:30:49,919
you can pick your own

59
00:30:49,919 --> 00:30:53,220
when you want to and uh yeah so the

60
00:30:53,220 --> 00:30:54,720
toolkit will and we are going to use

61
00:30:54,720 --> 00:30:56,279
that today so you don't have to use that

62
00:30:56,279 --> 00:30:58,500
if you don't want to but it's easier for

63
00:30:58,500 --> 00:31:01,559
me to present stuff and um it's for

64
00:31:01,559 --> 00:31:04,380
hacking and administrating Azure ID and

65
00:31:04,380 --> 00:31:06,840
Microsoft device it's open source so you

66
00:31:06,840 --> 00:31:08,580
can download it quite easily and install

67
00:31:08,580 --> 00:31:09,960
quite easily

68
00:31:09,960 --> 00:31:12,899
and it has been listed by my miterate

69
00:31:12,899 --> 00:31:16,020
attack since last year February

70
00:31:16,020 --> 00:31:18,179
and is it any good I don't know but it

71
00:31:18,179 --> 00:31:20,700
has been used by a group called apt-29

72
00:31:20,700 --> 00:31:23,039
also known as nobelium

73
00:31:23,039 --> 00:31:27,480
so at least they found it useful

74
00:31:27,480 --> 00:31:30,240
so learning goals for today so I want

75
00:31:30,240 --> 00:31:31,860
that you understand what is the role of

76
00:31:31,860 --> 00:31:33,960
tokens when you are

77
00:31:33,960 --> 00:31:35,940
you know using cloud services for

78
00:31:35,940 --> 00:31:38,539
instance I want you to know that how

79
00:31:38,539 --> 00:31:41,039
Azure ready has implemented or auth

80
00:31:41,039 --> 00:31:43,980
standards it's a bit funny

81
00:31:43,980 --> 00:31:46,679
and also that you will have skills to

82
00:31:46,679 --> 00:31:49,020
start analyzing tokens so that's one of

83
00:31:49,020 --> 00:31:51,840
my hobbies and I want you to learn that

84
00:31:51,840 --> 00:31:55,020
also so yeah and of course

85
00:31:55,020 --> 00:31:56,880
at the end also that you would

86
00:31:56,880 --> 00:31:59,159
understand the basic attack scenarios

87
00:31:59,159 --> 00:32:02,000
you can do with the tokens

88
00:32:02,000 --> 00:32:07,200
so content is there and let's start by

89
00:32:07,200 --> 00:32:11,039
having a graph course on how Cloud works

90
00:32:11,039 --> 00:32:14,159
and um by the way you can do it as smart

91
00:32:14,159 --> 00:32:16,200
as you want to from this session it's

92
00:32:16,200 --> 00:32:17,640
okay for me

93
00:32:17,640 --> 00:32:21,480
um and my tag is Dr s ready

94
00:32:21,480 --> 00:32:24,240
so how does cloud work so

95
00:32:24,240 --> 00:32:27,020
there it is

96
00:32:27,120 --> 00:32:29,220
that's how it works so what do we have

97
00:32:29,220 --> 00:32:31,020
here so first thing

98
00:32:31,020 --> 00:32:33,539
what we have is clients

99
00:32:33,539 --> 00:32:35,760
and by clients I mean the piece of

100
00:32:35,760 --> 00:32:37,620
software that could be Outlook that

101
00:32:37,620 --> 00:32:39,899
could be ads browser or it could be a

102
00:32:39,899 --> 00:32:41,340
powerful client

103
00:32:41,340 --> 00:32:43,799
so it could be anything

104
00:32:43,799 --> 00:32:46,559
and then we have Auto details in part so

105
00:32:46,559 --> 00:32:48,120
before you can do something with your

106
00:32:48,120 --> 00:32:50,100
client you need to authenticate

107
00:32:50,100 --> 00:32:52,860
and in this case it's already and it has

108
00:32:52,860 --> 00:32:55,380
a different protocols it is supporting

109
00:32:55,380 --> 00:33:00,120
so it can be open ID connect or oauth 2

110
00:33:00,120 --> 00:33:03,179
and usually it's oauth2

111
00:33:03,179 --> 00:33:04,799
and now after you have authenticated

112
00:33:04,799 --> 00:33:07,799
then you can use those services

113
00:33:07,799 --> 00:33:10,860
and technically even when you open a

114
00:33:10,860 --> 00:33:13,140
browser and go to office for instance

115
00:33:13,140 --> 00:33:16,260
and and open Outlook what is happening

116
00:33:16,260 --> 00:33:18,299
back in is that you are using apis

117
00:33:18,299 --> 00:33:21,419
actually so the browser is a client that

118
00:33:21,419 --> 00:33:23,760
is using or calling those apis

119
00:33:23,760 --> 00:33:27,059
and that's how it uh works so first you

120
00:33:27,059 --> 00:33:28,980
need to have the client

121
00:33:28,980 --> 00:33:31,019
then you authenticate and when you

122
00:33:31,019 --> 00:33:32,460
authenticate you have something called

123
00:33:32,460 --> 00:33:34,380
access token

124
00:33:34,380 --> 00:33:36,360
and then with that access token you can

125
00:33:36,360 --> 00:33:38,700
go and consume the services so that's

126
00:33:38,700 --> 00:33:39,779
pretty much

127
00:33:39,779 --> 00:33:43,260
a simple way or simple but simply put

128
00:33:43,260 --> 00:33:46,940
how Cloud works

129
00:33:47,580 --> 00:33:50,279
and Technical terms so we have identity

130
00:33:50,279 --> 00:33:51,480
provider

131
00:33:51,480 --> 00:33:53,640
in this case Azure ID and then we have

132
00:33:53,640 --> 00:33:55,740
service provider

133
00:33:55,740 --> 00:33:58,799
so these are the crucial components so

134
00:33:58,799 --> 00:34:02,658
you you need to have both

135
00:34:04,320 --> 00:34:08,280
so um also this ID provider in this case

136
00:34:08,280 --> 00:34:10,859
already it knows about the client and

137
00:34:10,859 --> 00:34:13,859
you as a user only what you tell to

138
00:34:13,859 --> 00:34:14,940
Cloud

139
00:34:14,940 --> 00:34:17,399
it has no other way to know anything

140
00:34:17,399 --> 00:34:19,199
about you so you need to tell Who You

141
00:34:19,199 --> 00:34:22,619
Are uh what's the typical way to do that

142
00:34:22,619 --> 00:34:24,899
give username and password right

143
00:34:24,899 --> 00:34:26,639
and so on

144
00:34:26,639 --> 00:34:28,859
and also the service provider in this

145
00:34:28,859 --> 00:34:30,480
case it could be at ready if you are

146
00:34:30,480 --> 00:34:32,520
calling it already API so or it can be

147
00:34:32,520 --> 00:34:37,859
Azure it can be micros 365. uh so that

148
00:34:37,859 --> 00:34:40,440
service provider is trusting r d

149
00:34:40,440 --> 00:34:43,379
provider and again the service provider

150
00:34:43,379 --> 00:34:45,300
knows about you only what you tell it

151
00:34:45,300 --> 00:34:48,119
same way as what you tell to Cloud

152
00:34:48,119 --> 00:34:49,859
and uh

153
00:34:49,859 --> 00:34:51,960
service provider also knows about you

154
00:34:51,960 --> 00:34:54,119
and the used client only what do you

155
00:34:54,119 --> 00:34:55,679
tell

156
00:34:55,679 --> 00:34:58,859
our ID provider tells actually and uh

157
00:34:58,859 --> 00:35:01,440
how I need to provide a sales the

158
00:35:01,440 --> 00:35:03,780
service provider who you are what device

159
00:35:03,780 --> 00:35:05,460
you are using and even what

160
00:35:05,460 --> 00:35:08,580
authentication methods you you use is in

161
00:35:08,580 --> 00:35:11,040
the form of access token so that's how

162
00:35:11,040 --> 00:35:12,839
that information is delivered to to

163
00:35:12,839 --> 00:35:15,680
service provider

164
00:35:15,960 --> 00:35:18,660
okay uh what else

165
00:35:18,660 --> 00:35:21,900
uh when you are authenticating again

166
00:35:21,900 --> 00:35:24,900
against that already you need to give

167
00:35:24,900 --> 00:35:27,780
some proof of identity and here are some

168
00:35:27,780 --> 00:35:30,420
options for that for so the username and

169
00:35:30,420 --> 00:35:33,300
password is a most typical one and if

170
00:35:33,300 --> 00:35:35,760
you are calling or if you are using like

171
00:35:35,760 --> 00:35:39,000
oauth terminology it's called ropc or

172
00:35:39,000 --> 00:35:42,839
resource all the passwords credentials

173
00:35:42,839 --> 00:35:45,119
you can use authenticator software you

174
00:35:45,119 --> 00:35:47,160
can give 502 keys and so there's a lot

175
00:35:47,160 --> 00:35:48,780
of options that you can you can actually

176
00:35:48,780 --> 00:35:51,359
achieve things

177
00:35:51,359 --> 00:35:54,720
and uh in US already we have a lot of

178
00:35:54,720 --> 00:35:57,180
things stored there but at least there's

179
00:35:57,180 --> 00:36:00,060
three identities so you have the user

180
00:36:00,060 --> 00:36:02,220
identity so there's a user object

181
00:36:02,220 --> 00:36:04,740
we also have like device identities so

182
00:36:04,740 --> 00:36:07,560
if you have devices joined and then we

183
00:36:07,560 --> 00:36:10,079
have the application or client it's the

184
00:36:10,079 --> 00:36:12,240
same thing different name so we have

185
00:36:12,240 --> 00:36:15,439
also identities for those

186
00:36:15,540 --> 00:36:17,640
but we're going to see this in in action

187
00:36:17,640 --> 00:36:20,820
so now let's start our first kind of

188
00:36:20,820 --> 00:36:24,540
exercise so how many of you have

189
00:36:24,540 --> 00:36:27,660
installed uh Fiddler or burp Suite in

190
00:36:27,660 --> 00:36:30,420
your computers so quite many yes so you

191
00:36:30,420 --> 00:36:32,040
can use that but if you don't you can

192
00:36:32,040 --> 00:36:34,859
use the hacking button

193
00:36:34,859 --> 00:36:37,440
if 12 so I'm going to show

194
00:36:37,440 --> 00:36:40,440
what we how we can start this so you can

195
00:36:40,440 --> 00:36:42,240
do this also with them

196
00:36:42,240 --> 00:36:45,900
uh your Fiddler uh and by the way does

197
00:36:45,900 --> 00:36:48,240
any everybody have the credentials

198
00:36:48,240 --> 00:36:51,740
provided this small one

199
00:36:51,740 --> 00:36:54,240
okay so you can use that or you can use

200
00:36:54,240 --> 00:36:56,040
your own credits so it's up to you but

201
00:36:56,040 --> 00:36:58,320
uh if you don't want to give this a kind

202
00:36:58,320 --> 00:37:00,839
of a hacking system you might not want

203
00:37:00,839 --> 00:37:04,380
to use your own so yeah

204
00:37:04,380 --> 00:37:05,760
but

205
00:37:05,760 --> 00:37:08,720
I found out

206
00:37:15,420 --> 00:37:18,000
okay so I don't know can I talk and type

207
00:37:18,000 --> 00:37:19,920
at the same time

208
00:37:19,920 --> 00:37:25,079
let's try so I hit F12 and it opens up

209
00:37:25,079 --> 00:37:28,260
the developers tools right here

210
00:37:28,260 --> 00:37:31,740
and now I'm gonna browse to

211
00:37:31,740 --> 00:37:34,220
office

212
00:37:47,820 --> 00:37:50,280
see

213
00:37:50,280 --> 00:37:53,339
you know what's the likely password

214
00:37:53,339 --> 00:37:59,720
Wi-Fi password is uh not SEC 2023 right

215
00:38:10,680 --> 00:38:13,220
so

216
00:38:17,339 --> 00:38:19,940
so

217
00:38:23,280 --> 00:38:25,740
okay so now I signed in

218
00:38:25,740 --> 00:38:27,420
and

219
00:38:27,420 --> 00:38:29,760
the question was that can you see any

220
00:38:29,760 --> 00:38:33,839
tokens and I have a pin for you so for

221
00:38:33,839 --> 00:38:35,880
instance if you are using this if if 12

222
00:38:35,880 --> 00:38:39,000
or develop tools then staying with

223
00:38:39,000 --> 00:38:41,579
failure above you can search stuff so if

224
00:38:41,579 --> 00:38:44,400
you search for e y

225
00:38:44,400 --> 00:38:46,440
J and zero

226
00:38:46,440 --> 00:38:48,540
and hit enter you can see a lot of

227
00:38:48,540 --> 00:38:50,460
tokens here actually

228
00:38:50,460 --> 00:38:53,220
so you might think that when you are

229
00:38:53,220 --> 00:38:55,020
logging into office there there's only

230
00:38:55,020 --> 00:38:57,599
like one token but no there's a lot of

231
00:38:57,599 --> 00:38:59,460
tokens to different services

232
00:38:59,460 --> 00:39:01,380
and we're gonna see later which Services

233
00:39:01,380 --> 00:39:03,839
actually

234
00:39:03,839 --> 00:39:05,339
but as you can see there's a lot of

235
00:39:05,339 --> 00:39:07,759
tokens

236
00:39:12,240 --> 00:39:14,660
so

237
00:39:17,099 --> 00:39:19,700
yes

238
00:39:22,500 --> 00:39:25,200
okay so that was like a

239
00:39:25,200 --> 00:39:29,300
uh first first kind of uh small handsome

240
00:39:29,300 --> 00:39:33,000
Hands-On exercise so with

241
00:39:33,000 --> 00:39:34,980
form of proof of identity did you use

242
00:39:34,980 --> 00:39:36,540
actually

243
00:39:36,540 --> 00:39:39,540
so what was it using my password right

244
00:39:39,540 --> 00:39:43,200
so that's how cloudy who you are so you

245
00:39:43,200 --> 00:39:44,940
just type those username and password

246
00:39:44,940 --> 00:39:47,339
from that piece of paper and now Cloud

247
00:39:47,339 --> 00:39:50,460
knows who you are or well who you are

248
00:39:50,460 --> 00:39:53,060
pretend to be

249
00:39:54,540 --> 00:39:56,820
Okay so

250
00:39:56,820 --> 00:40:00,420
let's move forward

251
00:40:00,420 --> 00:40:03,599
and let's talk about Bearer tokens which

252
00:40:03,599 --> 00:40:05,820
you actually saw

253
00:40:05,820 --> 00:40:08,280
and what are the bearer tokens so

254
00:40:08,280 --> 00:40:10,320
uh according to

255
00:40:10,320 --> 00:40:11,880
standard

256
00:40:11,880 --> 00:40:13,859
Barrel token is a

257
00:40:13,859 --> 00:40:18,300
it's a thing that um The Who Whoever has

258
00:40:18,300 --> 00:40:20,940
that can use that token to any purposes

259
00:40:20,940 --> 00:40:23,820
he or she wants to

260
00:40:23,820 --> 00:40:26,339
so that's why the name is called Barrel

261
00:40:26,339 --> 00:40:29,579
so who you who has access to that token

262
00:40:29,579 --> 00:40:31,680
can use that token to any purposes

263
00:40:31,680 --> 00:40:34,920
in the service that is allowed so you

264
00:40:34,920 --> 00:40:36,540
don't need to have that cryptographic

265
00:40:36,540 --> 00:40:38,880
material also called as a proof of

266
00:40:38,880 --> 00:40:41,099
position so you only need to have that

267
00:40:41,099 --> 00:40:44,099
access token or well better token

268
00:40:44,099 --> 00:40:45,599
and um

269
00:40:45,599 --> 00:40:48,540
technically it starts the string of

270
00:40:48,540 --> 00:40:50,940
something so for client that should be

271
00:40:50,940 --> 00:40:52,920
meaningless that that you don't know

272
00:40:52,920 --> 00:40:56,460
what it is what it contains uh it starts

273
00:40:56,460 --> 00:40:58,140
to string that client is sending to the

274
00:40:58,140 --> 00:41:00,420
service provider like in this case uh to

275
00:41:00,420 --> 00:41:01,980
always

276
00:41:01,980 --> 00:41:05,420
like services

277
00:41:06,300 --> 00:41:09,119
and they're talking star pre-dominant

278
00:41:09,119 --> 00:41:12,240
type of access tokens with oauth2 and

279
00:41:12,240 --> 00:41:14,400
well as I told you it's just an opaque

280
00:41:14,400 --> 00:41:16,200
opaque string it's not intended to have

281
00:41:16,200 --> 00:41:18,839
any meaning to the client however

282
00:41:18,839 --> 00:41:20,520
uh

283
00:41:20,520 --> 00:41:23,940
it could be also Json web token or JWT

284
00:41:23,940 --> 00:41:26,160
and this is actually what it usually is

285
00:41:26,160 --> 00:41:28,980
and when it's Json web token you can

286
00:41:28,980 --> 00:41:31,140
actually see what's inside that and we

287
00:41:31,140 --> 00:41:34,020
will come back to that later and uh

288
00:41:34,020 --> 00:41:37,500
as you saw from the previous step or the

289
00:41:37,500 --> 00:41:40,440
exercise the way that you deliver this

290
00:41:40,440 --> 00:41:42,540
token to the service is the

291
00:41:42,540 --> 00:41:44,579
authorization better then there's a

292
00:41:44,579 --> 00:41:46,079
bearer and then there's the string

293
00:41:46,079 --> 00:41:48,720
whatever that is and that can be that

294
00:41:48,720 --> 00:41:51,618
Json web token

295
00:41:51,980 --> 00:41:54,359
and some terminology

296
00:41:54,359 --> 00:41:57,960
uh recording to all both so we have this

297
00:41:57,960 --> 00:41:59,760
identity provider but it's called

298
00:41:59,760 --> 00:42:03,420
authorization server in all terminology

299
00:42:03,420 --> 00:42:05,400
and also the service provider is called

300
00:42:05,400 --> 00:42:07,500
resource reader so it's a little bit

301
00:42:07,500 --> 00:42:10,260
different name but same thing and users

302
00:42:10,260 --> 00:42:13,200
are resource owners and then the

303
00:42:13,200 --> 00:42:16,800
applications like Outlook or or teams

304
00:42:16,800 --> 00:42:22,400
they are called clients or with clients

305
00:42:22,619 --> 00:42:24,599
and here's some process that how the

306
00:42:24,599 --> 00:42:27,839
authorization flow goes in oauth so

307
00:42:27,839 --> 00:42:30,000
first you are a research owner or user

308
00:42:30,000 --> 00:42:32,520
and you want to access your data so you

309
00:42:32,520 --> 00:42:34,859
are going to use the client

310
00:42:34,859 --> 00:42:37,740
and then that client is gonna connect to

311
00:42:37,740 --> 00:42:39,780
the authorization server and use the

312
00:42:39,780 --> 00:42:41,700
proof of identity you have chosen or you

313
00:42:41,700 --> 00:42:43,920
have agreed to like using a password

314
00:42:43,920 --> 00:42:46,320
and if everything is okay meaning that

315
00:42:46,320 --> 00:42:49,320
the authorization server allows you to

316
00:42:49,320 --> 00:42:52,140
access Services it will create you a

317
00:42:52,140 --> 00:42:53,820
bearer token

318
00:42:53,820 --> 00:42:56,280
and then the client will connect to that

319
00:42:56,280 --> 00:42:58,560
resource server and provide that pair a

320
00:42:58,560 --> 00:43:01,440
token and now the

321
00:43:01,440 --> 00:43:04,079
service provider will then you know give

322
00:43:04,079 --> 00:43:05,940
you give you that

323
00:43:05,940 --> 00:43:08,400
uh we'll provide you the service

324
00:43:08,400 --> 00:43:11,160
so if you want to read your email you'll

325
00:43:11,160 --> 00:43:13,200
pop up your outlook client you log in

326
00:43:13,200 --> 00:43:15,780
and then you access the uh Excel online

327
00:43:15,780 --> 00:43:18,660
and it will return you your inbox and so

328
00:43:18,660 --> 00:43:20,579
on so

329
00:43:20,579 --> 00:43:25,099
so quite uh basic stuff right

330
00:43:25,260 --> 00:43:26,700
so

331
00:43:26,700 --> 00:43:29,579
then exercise so

332
00:43:29,579 --> 00:43:32,460
when you did that that you logged into

333
00:43:32,460 --> 00:43:36,960
that office so with authorization server

334
00:43:36,960 --> 00:43:39,000
you actually used

335
00:43:39,000 --> 00:43:42,420
so those who are watching the stack

336
00:43:42,420 --> 00:43:45,060
waves so or Trace between the your

337
00:43:45,060 --> 00:43:48,000
browser and the office so with

338
00:43:48,000 --> 00:43:50,760
authorization server did you use

339
00:43:50,760 --> 00:43:53,540
or do you know

340
00:43:53,640 --> 00:43:57,300
okay so let's let's try to see

341
00:43:57,300 --> 00:43:59,579
if we can point any

342
00:43:59,579 --> 00:44:03,720
so now if you type here

343
00:44:03,720 --> 00:44:06,500
uh

344
00:44:06,839 --> 00:44:08,520
actually you don't need to type because

345
00:44:08,520 --> 00:44:11,520
it's right here so

346
00:44:11,520 --> 00:44:14,940
so here so this login.micsonline.com so

347
00:44:14,940 --> 00:44:16,619
that is the authorization server in this

348
00:44:16,619 --> 00:44:19,680
case so that's Azure ID where you send

349
00:44:19,680 --> 00:44:21,660
your gradient source for instance

350
00:44:21,660 --> 00:44:26,760
and uh that's the that's the correct one

351
00:44:26,760 --> 00:44:29,280
and then uh did we see any resource

352
00:44:29,280 --> 00:44:31,380
servers so basically all other here

353
00:44:31,380 --> 00:44:33,920
which are not that uh

354
00:44:33,920 --> 00:44:36,420
authorization server all those things

355
00:44:36,420 --> 00:44:38,579
that you have that token they are

356
00:44:38,579 --> 00:44:41,359
resource service

357
00:44:41,460 --> 00:44:44,280
so if we could quickly look at here we

358
00:44:44,280 --> 00:44:47,040
can see that there's graph API then we

359
00:44:47,040 --> 00:44:49,040
have web shell we have

360
00:44:49,040 --> 00:44:51,119
substrate.office.com and I think that's

361
00:44:51,119 --> 00:44:55,940
the most used resource over here

362
00:44:58,440 --> 00:45:01,440
okay

363
00:45:04,020 --> 00:45:05,880
and um

364
00:45:05,880 --> 00:45:08,940
any questions at this point

365
00:45:08,940 --> 00:45:12,079
no okay

366
00:45:16,200 --> 00:45:19,140
why did you look for dyg

367
00:45:19,140 --> 00:45:21,119
um yeah that good question so why did

368
00:45:21,119 --> 00:45:25,319
you why did I look for EYC well you're

369
00:45:25,319 --> 00:45:27,900
gonna have answer that in in next couple

370
00:45:27,900 --> 00:45:31,200
of slides so yeah good question

371
00:45:31,200 --> 00:45:33,900
so because of this so

372
00:45:33,900 --> 00:45:37,740
uh Json web token or JWT

373
00:45:37,740 --> 00:45:39,660
so let's talk about some technical stuff

374
00:45:39,660 --> 00:45:42,900
might be boring might be not we'll see

375
00:45:42,900 --> 00:45:45,960
so what is a Json web token so that's

376
00:45:45,960 --> 00:45:48,359
that's the compact way to present uh

377
00:45:48,359 --> 00:45:50,760
claims and claims are related to that

378
00:45:50,760 --> 00:45:52,140
user

379
00:45:52,140 --> 00:45:55,140
or resource owner so it says that who

380
00:45:55,140 --> 00:45:57,000
you are for instance it can tell you

381
00:45:57,000 --> 00:45:59,640
what device you are using

382
00:45:59,640 --> 00:46:02,160
and that kind of information so those

383
00:46:02,160 --> 00:46:04,380
are claims and we have a two

384
00:46:04,380 --> 00:46:07,020
implementations so first one is Json web

385
00:46:07,020 --> 00:46:08,160
signature

386
00:46:08,160 --> 00:46:10,500
and that is usually used as a synonym to

387
00:46:10,500 --> 00:46:13,140
JWT and that's wrong but I can live with

388
00:46:13,140 --> 00:46:16,319
that so JWT is not

389
00:46:16,319 --> 00:46:19,619
jws but it's a it's both state of the US

390
00:46:19,619 --> 00:46:21,420
and jwe

391
00:46:21,420 --> 00:46:25,380
and I think you all have seen these

392
00:46:25,380 --> 00:46:27,480
states and web signature kind of token

393
00:46:27,480 --> 00:46:31,800
and that was that started with a y z t

394
00:46:31,800 --> 00:46:33,240
Jade

395
00:46:33,240 --> 00:46:35,579
and then we have this other thing called

396
00:46:35,579 --> 00:46:39,119
Json web encryption token and I think we

397
00:46:39,119 --> 00:46:41,460
might have time to get into that later

398
00:46:41,460 --> 00:46:43,680
on this this day but we'll see about

399
00:46:43,680 --> 00:46:45,300
that

400
00:46:45,300 --> 00:46:49,020
but now let's talk about JWT so it is

401
00:46:49,020 --> 00:46:51,599
used in Azure 80 as an access token an

402
00:46:51,599 --> 00:46:52,859
ID token

403
00:46:52,859 --> 00:46:55,500
so that's the standard for that and it

404
00:46:55,500 --> 00:46:59,339
has a three parts so it has Josie or as

405
00:46:59,339 --> 00:47:03,359
I say Jose so Java JavaScript uh opted

406
00:47:03,359 --> 00:47:05,099
on an encryption header which is right

407
00:47:05,099 --> 00:47:07,500
here the first part and then that is a

408
00:47:07,500 --> 00:47:10,079
base64 encoded

409
00:47:10,079 --> 00:47:12,240
and because that's Jason

410
00:47:12,240 --> 00:47:15,119
it always starts with uh what is that

411
00:47:15,119 --> 00:47:18,599
square bracket and when you like a base

412
00:47:18,599 --> 00:47:21,480
60 will encode that it it is going to be

413
00:47:21,480 --> 00:47:25,319
a y and and J

414
00:47:25,319 --> 00:47:27,780
so that's why we said for that then we

415
00:47:27,780 --> 00:47:31,140
have a DOT and then we have the payload

416
00:47:31,140 --> 00:47:34,619
which is usually the claim set as Json

417
00:47:34,619 --> 00:47:36,599
and then we have the signature part so

418
00:47:36,599 --> 00:47:38,220
that's why it's called Json web

419
00:47:38,220 --> 00:47:41,040
signature so it's not encrypted but it

420
00:47:41,040 --> 00:47:43,020
is signed with the key that is trusted

421
00:47:43,020 --> 00:47:45,060
by both parties so I mean the

422
00:47:45,060 --> 00:47:46,440
authorization server and the resource

423
00:47:46,440 --> 00:47:48,900
resource server so in this case actually

424
00:47:48,900 --> 00:47:52,920
science that token and then when

425
00:47:52,920 --> 00:47:55,500
when uh you call like for instance

426
00:47:55,500 --> 00:47:57,480
excess online apis

427
00:47:57,480 --> 00:48:00,420
exit online to us that signature so that

428
00:48:00,420 --> 00:48:02,640
that way they can be sure that you are

429
00:48:02,640 --> 00:48:04,980
who you claim you are but that is not

430
00:48:04,980 --> 00:48:06,900
encrypted so you can see what is inside

431
00:48:06,900 --> 00:48:09,119
that and we're gonna do that also

432
00:48:09,119 --> 00:48:10,859
uh in a minute

433
00:48:10,859 --> 00:48:14,520
so there's a typical uh Josie header so

434
00:48:14,520 --> 00:48:17,819
we have the type here JWT we have the

435
00:48:17,819 --> 00:48:19,440
algorithm which means the signing

436
00:48:19,440 --> 00:48:21,560
algorithm algorithm and then we have the

437
00:48:21,560 --> 00:48:26,359
uh ID of the key that you can use to

438
00:48:26,359 --> 00:48:29,880
uh verify the signature so that's how

439
00:48:29,880 --> 00:48:32,460
how it works and here's a

440
00:48:32,460 --> 00:48:35,280
couple of things that you can have so

441
00:48:35,280 --> 00:48:37,819
the signing algorithm it can be

442
00:48:37,819 --> 00:48:40,800
rs256 which is quite typical

443
00:48:40,800 --> 00:48:43,800
and then we have it can be hmac short

444
00:48:43,800 --> 00:48:46,859
v56 or it can be none which would be

445
00:48:46,859 --> 00:48:48,720
nice to hackers because then you could

446
00:48:48,720 --> 00:48:51,660
create your own ones if if that's not

447
00:48:51,660 --> 00:48:54,119
signed and it still happens personally

448
00:48:54,119 --> 00:48:56,520
but not with us already anymore so they

449
00:48:56,520 --> 00:49:01,220
they always have to have that signature

450
00:49:02,000 --> 00:49:04,920
okay and here's an example of the

451
00:49:04,920 --> 00:49:07,140
payload of that Nexus token so what

452
00:49:07,140 --> 00:49:09,180
there is typically so we have the

453
00:49:09,180 --> 00:49:11,579
audience which says which API you can

454
00:49:11,579 --> 00:49:12,900
use these two

455
00:49:12,900 --> 00:49:15,480
then if there's an issuer which means

456
00:49:15,480 --> 00:49:18,839
that which organization actually issue

457
00:49:18,839 --> 00:49:21,900
this uh token and then we have of course

458
00:49:21,900 --> 00:49:24,420
the expiration date and time then we

459
00:49:24,420 --> 00:49:27,359
have the application ID uh who knows

460
00:49:27,359 --> 00:49:29,760
what is this application

461
00:49:29,760 --> 00:49:31,020
anybody

462
00:49:31,020 --> 00:49:32,940
so that's Michael's office

463
00:49:32,940 --> 00:49:34,380
for instance

464
00:49:34,380 --> 00:49:36,540
and then we have the object ID which is

465
00:49:36,540 --> 00:49:40,200
the user's object ID in at ready and

466
00:49:40,200 --> 00:49:43,260
then we have scope and scope can be like

467
00:49:43,260 --> 00:49:47,040
that you can call certain apis only or

468
00:49:47,040 --> 00:49:48,720
if you have using impersonation which is

469
00:49:48,720 --> 00:49:51,060
the best one it means that you can do

470
00:49:51,060 --> 00:49:52,980
anything the user have permisses to do

471
00:49:52,980 --> 00:49:56,460
in that that API

472
00:49:56,460 --> 00:49:58,440
we have tenant ID and then we have the

473
00:49:58,440 --> 00:50:00,180
user principal name

474
00:50:00,180 --> 00:50:02,880
and these here the audience is the

475
00:50:02,880 --> 00:50:05,339
resource server again in the oauth

476
00:50:05,339 --> 00:50:07,140
terminology and then we have the issue

477
00:50:07,140 --> 00:50:09,119
which is authorization server and then

478
00:50:09,119 --> 00:50:10,859
we have the scope which usually is the

479
00:50:10,859 --> 00:50:13,980
API so that's what's inside that access

480
00:50:13,980 --> 00:50:16,640
token

481
00:50:18,000 --> 00:50:22,440
and then how to validate that signature

482
00:50:22,440 --> 00:50:25,440
so it's based on standard which means

483
00:50:25,440 --> 00:50:27,599
that you have the ECR here and then

484
00:50:27,599 --> 00:50:29,460
slash dot well-known open ID

485
00:50:29,460 --> 00:50:31,140
configuration

486
00:50:31,140 --> 00:50:35,339
so if you're here is that one so if you

487
00:50:35,339 --> 00:50:37,319
get an access token and you want to you

488
00:50:37,319 --> 00:50:39,599
know verify this signature you take this

489
00:50:39,599 --> 00:50:41,220
URL

490
00:50:41,220 --> 00:50:44,339
and then you put it in front of this

491
00:50:44,339 --> 00:50:46,859
and from there you will get a list of uh

492
00:50:46,859 --> 00:50:49,760
things and one of the those are

493
00:50:49,760 --> 00:50:52,740
jwks underscore URI

494
00:50:52,740 --> 00:50:55,260
and that points to

495
00:50:55,260 --> 00:50:57,119
in this case in that already it points

496
00:50:57,119 --> 00:50:59,819
to this URL and when you go there you

497
00:50:59,819 --> 00:51:02,099
will get a list of keys in Json format

498
00:51:02,099 --> 00:51:04,020
then you just need to pick the correct

499
00:51:04,020 --> 00:51:06,839
one like that is matching the

500
00:51:06,839 --> 00:51:10,800
uh sorry wrong wrong direction that is

501
00:51:10,800 --> 00:51:13,559
matching the um

502
00:51:13,559 --> 00:51:16,200
uh where it is actually oh yeah sorry

503
00:51:16,200 --> 00:51:20,040
here in uh Josie header there's a key ID

504
00:51:20,040 --> 00:51:23,760
then you just need to get the same key

505
00:51:23,760 --> 00:51:26,220
ID from here and then you have the key

506
00:51:26,220 --> 00:51:28,020
material here and then you can use that

507
00:51:28,020 --> 00:51:30,720
to verify the signature so that's how it

508
00:51:30,720 --> 00:51:33,240
technically works and also this is an

509
00:51:33,240 --> 00:51:35,640
example from us ready but um other

510
00:51:35,640 --> 00:51:37,800
services who are using access token that

511
00:51:37,800 --> 00:51:41,460
suit also like work in that way

512
00:51:41,460 --> 00:51:43,859
so if you ever wondered that how Azure

513
00:51:43,859 --> 00:51:45,420
ID or the service is actually doing that

514
00:51:45,420 --> 00:51:47,579
so this is the technical data so how how

515
00:51:47,579 --> 00:51:51,000
that is verified

516
00:51:51,180 --> 00:51:55,260
okay so other uses for JWT and that's

517
00:51:55,260 --> 00:51:57,180
ready so it's not just for Access tokens

518
00:51:57,180 --> 00:52:00,300
or ID tokens you only have like you can

519
00:52:00,300 --> 00:52:03,240
also use that to get PRT who knows what

520
00:52:03,240 --> 00:52:05,839
is PRT

521
00:52:06,420 --> 00:52:08,819
I know Robert because he works on

522
00:52:08,819 --> 00:52:12,359
Microsoft so that is a primary research

523
00:52:12,359 --> 00:52:15,059
token and it's um it's a

524
00:52:15,059 --> 00:52:17,940
stored in computers that are has already

525
00:52:17,940 --> 00:52:21,480
joined so it is used for proving

526
00:52:21,480 --> 00:52:24,059
identity of the device and I'm going to

527
00:52:24,059 --> 00:52:26,280
demonstrate that at the end if we have

528
00:52:26,280 --> 00:52:28,800
time also you can use this to obtain

529
00:52:28,800 --> 00:52:31,380
prds and then you can send some keys to

530
00:52:31,380 --> 00:52:32,700
that already

531
00:52:32,700 --> 00:52:36,020
so so you use the same like um

532
00:52:36,020 --> 00:52:39,240
JWT formats so but it's not the access

533
00:52:39,240 --> 00:52:41,700
token but I'll show them to you at the

534
00:52:41,700 --> 00:52:43,819
end

535
00:52:44,640 --> 00:52:49,079
okay well yeah primary research token so

536
00:52:49,079 --> 00:52:52,140
so that is a long layout token

537
00:52:52,140 --> 00:52:56,220
so it's valid for 90 days not not 14

538
00:52:56,220 --> 00:52:58,800
days as the documentation says it's 90

539
00:52:58,800 --> 00:53:01,920
days and and you can update that using

540
00:53:01,920 --> 00:53:04,880
the device certificates and it is used

541
00:53:04,880 --> 00:53:07,859
technically in the background it is used

542
00:53:07,859 --> 00:53:09,660
to get your new access tokens

543
00:53:09,660 --> 00:53:11,579
automatically

544
00:53:11,579 --> 00:53:14,760
and these access tokens that you are

545
00:53:14,760 --> 00:53:17,160
going to get using PRT they have the

546
00:53:17,160 --> 00:53:19,559
device claim which means that there's a

547
00:53:19,559 --> 00:53:20,640
device ID

548
00:53:20,640 --> 00:53:23,220
and it has already those who don't know

549
00:53:23,220 --> 00:53:26,099
that you can configure things called

550
00:53:26,099 --> 00:53:28,220
conditional access

551
00:53:28,220 --> 00:53:30,359
conditional access policies and you can

552
00:53:30,359 --> 00:53:31,859
for instance say that okay you can log

553
00:53:31,859 --> 00:53:34,200
in if you have a device that is

554
00:53:34,200 --> 00:53:35,579
compliant

555
00:53:35,579 --> 00:53:38,040
and that compliant information is stored

556
00:53:38,040 --> 00:53:41,460
in Azure ID in your device object and

557
00:53:41,460 --> 00:53:43,260
now when you have access token that has

558
00:53:43,260 --> 00:53:45,420
have that device ID then as already

559
00:53:45,420 --> 00:53:47,940
knows that you are using that device

560
00:53:47,940 --> 00:53:49,740
so

561
00:53:49,740 --> 00:53:52,859
so that's how this actually works

562
00:53:52,859 --> 00:53:55,520
so

563
00:53:56,880 --> 00:53:59,579
yeah what else did I have I was supposed

564
00:53:59,579 --> 00:54:01,200
to mention about this

565
00:54:01,200 --> 00:54:03,200
um

566
00:54:04,339 --> 00:54:07,079
I think it might come to my minor sample

567
00:54:07,079 --> 00:54:09,800
yes there's a question

568
00:54:14,599 --> 00:54:19,339
what was that the type of

569
00:54:19,339 --> 00:54:22,339
Arts

570
00:54:25,280 --> 00:54:28,079
signing frequency well

571
00:54:28,079 --> 00:54:29,579
I don't know if I understood the

572
00:54:29,579 --> 00:54:31,920
question correctly but uh

573
00:54:31,920 --> 00:54:33,960
but uh

574
00:54:33,960 --> 00:54:36,420
that is valid for 90 days that's pretty

575
00:54:36,420 --> 00:54:37,319
much

576
00:54:37,319 --> 00:54:39,420
yeah

577
00:54:39,420 --> 00:54:44,660
they kind of sign you out after the time

578
00:54:45,180 --> 00:54:48,119
no this doesn't sign anybody out so you

579
00:54:48,119 --> 00:54:50,339
only use this to get a new access token

580
00:54:50,339 --> 00:54:54,059
yeah and it happens automatically and um

581
00:54:54,059 --> 00:54:57,660
yeah the thing I was gonna mention is

582
00:54:57,660 --> 00:54:59,760
that

583
00:54:59,760 --> 00:55:04,440
uh just a second so if I go back

584
00:55:04,440 --> 00:55:07,260
review slides

585
00:55:07,260 --> 00:55:10,950
just expression

586
00:55:10,950 --> 00:55:14,089
[Music]

587
00:55:14,660 --> 00:55:19,640
I think right set the service forever

588
00:55:26,059 --> 00:55:29,099
yeah so the question was

589
00:55:29,099 --> 00:55:31,920
yeah so the question was that um if you

590
00:55:31,920 --> 00:55:34,380
can get that token can you look in like

591
00:55:34,380 --> 00:55:38,220
a forever uh pretty much a yes but uh

592
00:55:38,220 --> 00:55:41,959
it's not easy to get because

593
00:55:42,059 --> 00:55:44,520
uh how would I put this it's it's stored

594
00:55:44,520 --> 00:55:46,859
in your computer in a place that you can

595
00:55:46,859 --> 00:55:51,780
access really so it it involves TPM for

596
00:55:51,780 --> 00:55:53,220
instance if you have so you can access

597
00:55:53,220 --> 00:55:55,740
that but we have a ways to go around

598
00:55:55,740 --> 00:55:59,220
that and and we can even get our own

599
00:55:59,220 --> 00:56:01,339
ones but anyways then

600
00:56:01,339 --> 00:56:03,839
the primary first token is the most

601
00:56:03,839 --> 00:56:05,160
probable one

602
00:56:05,160 --> 00:56:08,040
as a proofounded it because you can you

603
00:56:08,040 --> 00:56:10,920
know tell who you are and who also like

604
00:56:10,920 --> 00:56:13,380
what device you are using but also that

605
00:56:13,380 --> 00:56:15,839
you can uh well we will we will get back

606
00:56:15,839 --> 00:56:17,579
to the that um

607
00:56:17,579 --> 00:56:20,760
recess token stuff but uh as a request

608
00:56:20,760 --> 00:56:23,520
token you can get access token to any

609
00:56:23,520 --> 00:56:25,980
any client and any service so there are

610
00:56:25,980 --> 00:56:27,720
no limits for that

611
00:56:27,720 --> 00:56:30,240
but uh we will get back to that uh back

612
00:56:30,240 --> 00:56:32,720
to that later

613
00:56:35,160 --> 00:56:37,760
because that's the most in in uh

614
00:56:37,760 --> 00:56:40,079
interesting stuff

615
00:56:40,079 --> 00:56:42,180
so where we

616
00:56:42,180 --> 00:56:44,339
here so

617
00:56:44,339 --> 00:56:48,059
now let's see uh what is inside the jws

618
00:56:48,059 --> 00:56:50,579
and we're gonna use uh well you can use

619
00:56:50,579 --> 00:56:52,940
whatever site you want to but

620
00:56:52,940 --> 00:56:56,040
jwt.ms is uh it's okay or then you can

621
00:56:56,040 --> 00:56:59,280
use the read add in Access token but uh

622
00:56:59,280 --> 00:57:01,880
let's see

623
00:57:07,380 --> 00:57:10,680
so now when I go back to uh developer

624
00:57:10,680 --> 00:57:15,380
tools here I should be able to copy this

625
00:57:15,380 --> 00:57:19,740
where it is errors

626
00:57:19,920 --> 00:57:21,240
there

627
00:57:21,240 --> 00:57:23,779
so

628
00:57:24,720 --> 00:57:27,599
just gonna copy this like this and Ctrl

629
00:57:27,599 --> 00:57:29,160
C

630
00:57:29,160 --> 00:57:32,899
and I can go to

631
00:57:40,160 --> 00:57:44,099
jwp.ms or any other tool you want to use

632
00:57:44,099 --> 00:57:46,800
and I can then paste it here

633
00:57:46,800 --> 00:57:48,900
and then you can see what we have like

634
00:57:48,900 --> 00:57:52,740
what is the Josie header and then what

635
00:57:52,740 --> 00:57:54,119
like

636
00:57:54,119 --> 00:57:57,059
things we have here so let's get a

637
00:57:57,059 --> 00:57:59,220
couple of minutes to you that you can

638
00:57:59,220 --> 00:58:01,619
actually see what's the contents

639
00:58:01,619 --> 00:58:03,780
so then we can have a little discussion

640
00:58:03,780 --> 00:58:05,280
of this

641
00:58:05,280 --> 00:58:08,660
and I can have a couple more

642
00:58:28,640 --> 00:58:31,759
thank you

643
00:58:33,359 --> 00:58:35,339
and I'm also going to show you another

644
00:58:35,339 --> 00:58:41,000
way to do that with a A8 internals

645
00:59:10,079 --> 00:59:12,000
and loading the module takes long

646
00:59:12,000 --> 00:59:14,579
because Mike road is checking that

647
00:59:14,579 --> 00:59:17,839
every time I load it

648
00:59:25,859 --> 00:59:28,020
so what I'm doing here now is that I'm

649
00:59:28,020 --> 00:59:30,780
I'm gonna use one of the A8 internal

650
00:59:30,780 --> 00:59:33,540
methods or functions called read aad in

651
00:59:33,540 --> 00:59:35,160
Access token and then when you provide a

652
00:59:35,160 --> 00:59:38,160
token as you can see it starts with a y

653
00:59:38,160 --> 00:59:42,359
j zero and I hit enter it does the same

654
00:59:42,359 --> 00:59:45,180
that's that the JWT so it shows what

655
00:59:45,180 --> 00:59:48,319
claims there are

656
00:59:49,920 --> 00:59:52,680
so let's um talk about what we have here

657
00:59:52,680 --> 00:59:54,859
actually

658
00:59:56,760 --> 00:59:59,660
so this token here audience is

659
00:59:59,660 --> 01:00:02,940
craft.micros.com so what that means what

660
01:00:02,940 --> 01:00:05,460
service is this

661
01:00:05,460 --> 01:00:08,760
well it's Microsoft craft API so you can

662
01:00:08,760 --> 01:00:10,920
use this token for that purpose and it

663
01:00:10,920 --> 01:00:13,559
was issued by this tenant

664
01:00:13,559 --> 01:00:15,720
so what is this tenant

665
01:00:15,720 --> 01:00:17,579
current ID

666
01:00:17,579 --> 01:00:19,500
uh

667
01:00:19,500 --> 01:00:23,819
if you want to know that you can go to

668
01:00:23,819 --> 01:00:27,599
aad internals.com

669
01:00:28,099 --> 01:00:29,760
so

670
01:00:29,760 --> 01:00:33,119
here you can paste the tenant ID

671
01:00:33,119 --> 01:00:35,579
like this and then it will tell you what

672
01:00:35,579 --> 01:00:37,260
tenant that was and some other

673
01:00:37,260 --> 01:00:39,559
information

674
01:00:41,040 --> 01:00:45,119
so we can see that it's called T 2 dot

675
01:00:45,119 --> 01:00:47,579
my o365.site and we can see that there

676
01:00:47,579 --> 01:00:49,200
are a couple of domains there and so on

677
01:00:49,200 --> 01:00:52,380
and so on but yeah so using that tenant

678
01:00:52,380 --> 01:00:54,660
idea you can see what's the organization

679
01:00:54,660 --> 01:00:58,020
actually who who issued that then we

680
01:00:58,020 --> 01:01:02,520
have this time here so yeah

681
01:01:05,599 --> 01:01:09,200
just those ideas

682
01:01:12,380 --> 01:01:15,960
yeah so the question is that is there a

683
01:01:15,960 --> 01:01:18,839
repository that tells you what is that

684
01:01:18,839 --> 01:01:21,599
what the tenant ID means no there isn't

685
01:01:21,599 --> 01:01:22,980
so

686
01:01:22,980 --> 01:01:25,440
this is the tool I created that can get

687
01:01:25,440 --> 01:01:27,420
you that information so with Senator you

688
01:01:27,420 --> 01:01:30,059
need to call a certain API and then it

689
01:01:30,059 --> 01:01:31,920
returns you information about that

690
01:01:31,920 --> 01:01:33,240
General ID

691
01:01:33,240 --> 01:01:36,000
but yeah but there's no well there's a

692
01:01:36,000 --> 01:01:38,280
kind of repository it's called Azure ID

693
01:01:38,280 --> 01:01:43,280
but we can access that directly so yes

694
01:01:43,380 --> 01:01:48,900
so this time here so uh I I 80

695
01:01:48,900 --> 01:01:51,720
I can't remember what the what what is

696
01:01:51,720 --> 01:01:54,720
that but it's same as not before and and

697
01:01:54,720 --> 01:01:57,780
not after or when that expires and this

698
01:01:57,780 --> 01:02:01,079
time is um it's um what is that Linux

699
01:02:01,079 --> 01:02:02,099
time called

700
01:02:02,099 --> 01:02:04,819
anybody

701
01:02:06,240 --> 01:02:08,160
I can't remember either

702
01:02:08,160 --> 01:02:10,319
yeah but anyways it's a Linux time so

703
01:02:10,319 --> 01:02:13,859
it's a second so millisecond score

704
01:02:13,859 --> 01:02:16,799
yeah Epoch yes Epoch time yes so it uh

705
01:02:16,799 --> 01:02:18,960
it's a milliseconds from first of

706
01:02:18,960 --> 01:02:22,460
January 1970.

707
01:02:22,500 --> 01:02:26,700
yes and uh then we have like a a i o I

708
01:02:26,700 --> 01:02:28,380
don't know what that means but a m r

709
01:02:28,380 --> 01:02:30,119
that's so interesting because it shows

710
01:02:30,119 --> 01:02:32,099
you that what kind of methods you use to

711
01:02:32,099 --> 01:02:35,280
sign in so it can be PWD which means

712
01:02:35,280 --> 01:02:38,160
password or it can be MFA or it can be

713
01:02:38,160 --> 01:02:41,640
RSA and so on but we will see that later

714
01:02:41,640 --> 01:02:43,200
and then we see that I've watched the

715
01:02:43,200 --> 01:02:45,960
application ID and it says Office 365

716
01:02:45,960 --> 01:02:47,420
shell

717
01:02:47,420 --> 01:02:49,319
wcss client

718
01:02:49,319 --> 01:02:52,500
I don't know what that is but

719
01:02:52,500 --> 01:02:55,799
something that is used by by the office

720
01:02:55,799 --> 01:02:56,940
model

721
01:02:56,940 --> 01:02:59,520
then we have ID type which is its user

722
01:02:59,520 --> 01:03:02,099
and then we have IP address and this is

723
01:03:02,099 --> 01:03:05,040
IB address of me and probably you will

724
01:03:05,040 --> 01:03:06,599
have the same because we are using the

725
01:03:06,599 --> 01:03:09,180
same Wi-Fi network okay

726
01:03:09,180 --> 01:03:10,920
and

727
01:03:10,920 --> 01:03:13,559
what else interesting we are well here's

728
01:03:13,559 --> 01:03:16,440
the score that with this access token

729
01:03:16,440 --> 01:03:20,359
you can only use the email

730
01:03:20,359 --> 01:03:24,000
API from graph API and you have

731
01:03:24,000 --> 01:03:26,940
permissions to use files read write you

732
01:03:26,940 --> 01:03:28,920
open ID profile and then you have

733
01:03:28,920 --> 01:03:31,020
permissions to read quite user

734
01:03:31,020 --> 01:03:34,339
information like my information

735
01:03:34,980 --> 01:03:38,280
and you have the UPN here and

736
01:03:38,280 --> 01:03:42,619
this w i d s means that

737
01:03:42,619 --> 01:03:45,900
Roberto correct me if I I tell something

738
01:03:45,900 --> 01:03:47,700
wrong but I think this is a group

739
01:03:47,700 --> 01:03:51,660
memberships of that user so where what

740
01:03:51,660 --> 01:03:55,759
group groups this user is member of

741
01:03:56,059 --> 01:03:59,579
and then we have a tenant region scope

742
01:03:59,579 --> 01:04:02,579
which means this is a it doesn't mean

743
01:04:02,579 --> 01:04:04,980
not available it means North America

744
01:04:04,980 --> 01:04:06,420
because the tenant is in North America

745
01:04:06,420 --> 01:04:08,940
so all this kind of information we have

746
01:04:08,940 --> 01:04:11,160
we also have a signature about this

747
01:04:11,160 --> 01:04:13,140
particular service doesn't care about

748
01:04:13,140 --> 01:04:15,059
that so it doesn't show it and it

749
01:04:15,059 --> 01:04:18,059
doesn't even validate that

750
01:04:18,059 --> 01:04:22,440
but with aad internals you can actually

751
01:04:22,440 --> 01:04:24,119
try to validate that I don't know that

752
01:04:24,119 --> 01:04:25,500
it worked because I haven't tried that

753
01:04:25,500 --> 01:04:27,839
in quite a long time so if I provide

754
01:04:27,839 --> 01:04:29,760
validate it should validate that is it

755
01:04:29,760 --> 01:04:31,920
okay and

756
01:04:31,920 --> 01:04:34,319
it says that I can't verify that because

757
01:04:34,319 --> 01:04:35,880
this bug

758
01:04:35,880 --> 01:04:37,920
so don't don't

759
01:04:37,920 --> 01:04:41,000
um hear about that

760
01:04:42,000 --> 01:04:46,760
okay uh any questions about this yes

761
01:04:51,960 --> 01:04:53,520
and you want to access the Microsoft

762
01:04:53,520 --> 01:04:55,200
graphic yeah

763
01:04:55,200 --> 01:04:57,540
if you break your own email just by

764
01:04:57,540 --> 01:05:00,740
having the user impersonation

765
01:05:01,220 --> 01:05:05,520
yeah that was a good question so uh if

766
01:05:05,520 --> 01:05:09,059
the scope here is using impersonation so

767
01:05:09,059 --> 01:05:12,059
can I read my email uh yes you can if

768
01:05:12,059 --> 01:05:13,680
you have permissive to do that in the

769
01:05:13,680 --> 01:05:16,740
back end you can read others too if you

770
01:05:16,740 --> 01:05:18,540
have permissions in there but user

771
01:05:18,540 --> 01:05:20,339
information just means that there are no

772
01:05:20,339 --> 01:05:25,140
limits what you can do like API wise

773
01:05:25,140 --> 01:05:27,059
yeah

774
01:05:27,059 --> 01:05:31,619
but as far as I know you can't get scope

775
01:05:31,619 --> 01:05:33,780
user underscore impersonation for

776
01:05:33,780 --> 01:05:37,920
micrograph API yeah

777
01:05:39,180 --> 01:05:41,160
because Microsoft want to make it more

778
01:05:41,160 --> 01:05:42,839
secure and that's one way to do that and

779
01:05:42,839 --> 01:05:46,500
and it's absolutely a very good way

780
01:05:46,500 --> 01:05:49,220
okay

781
01:05:50,579 --> 01:05:54,839
okay so then uh let's move forward or is

782
01:05:54,839 --> 01:05:57,558
there any other questions

783
01:05:57,619 --> 01:06:00,680
yes yes

784
01:06:10,880 --> 01:06:13,619
so that's correct so if you are using

785
01:06:13,619 --> 01:06:15,960
service principle to get like an access

786
01:06:15,960 --> 01:06:19,819
token yeah it's not user but uh

787
01:06:19,819 --> 01:06:22,319
it doesn't always have the same claims

788
01:06:22,319 --> 01:06:24,119
so the claims that depends on which

789
01:06:24,119 --> 01:06:26,160
service you are trying to access so this

790
01:06:26,160 --> 01:06:29,579
is for graph API so it has like this ID

791
01:06:29,579 --> 01:06:31,920
type is user but if that service

792
01:06:31,920 --> 01:06:33,960
principle it could be something else but

793
01:06:33,960 --> 01:06:35,700
I don't know what it is in this case

794
01:06:35,700 --> 01:06:37,799
send the information

795
01:06:37,799 --> 01:06:39,240
yeah

796
01:06:39,240 --> 01:06:41,240
yeah

797
01:06:45,059 --> 01:06:47,700
okay then a couple of words about the

798
01:06:47,700 --> 01:06:50,240
other type of JWT

799
01:06:50,240 --> 01:06:54,599
which is awe or Json web encryption

800
01:06:54,599 --> 01:06:57,500
so that is used in natural 80 to return

801
01:06:57,500 --> 01:07:00,780
keys and encrypted data from Azure ID

802
01:07:00,780 --> 01:07:03,480
and you don't say that quite often you

803
01:07:03,480 --> 01:07:05,280
see that when when you are using the

804
01:07:05,280 --> 01:07:06,780
device that is joined and it's using

805
01:07:06,780 --> 01:07:10,680
that PRT to transfer data from from

806
01:07:10,680 --> 01:07:12,960
Azure and back and and that's quite

807
01:07:12,960 --> 01:07:15,240
annoying if you want to you know see

808
01:07:15,240 --> 01:07:17,880
what is going on between the the device

809
01:07:17,880 --> 01:07:21,119
and as ready because those access tokens

810
01:07:21,119 --> 01:07:22,920
are encrypted so you can see them so

811
01:07:22,920 --> 01:07:24,119
that's

812
01:07:24,119 --> 01:07:26,460
that's annoying at least for me as a

813
01:07:26,460 --> 01:07:28,680
researcher so but that's the thing that

814
01:07:28,680 --> 01:07:30,780
we can we can do to access that but it's

815
01:07:30,780 --> 01:07:32,579
a little bit different so we have the

816
01:07:32,579 --> 01:07:36,059
same elements like uh Jose header

817
01:07:36,059 --> 01:07:38,700
then we have the encrypted key

818
01:07:38,700 --> 01:07:41,339
then we have the IV and then we have the

819
01:07:41,339 --> 01:07:43,440
ciphertext and finally authentication

820
01:07:43,440 --> 01:07:47,400
tag which is just a piece of some text

821
01:07:47,400 --> 01:07:49,859
that is embedded to that Cipher text so

822
01:07:49,859 --> 01:07:51,119
I don't know what's the use it for that

823
01:07:51,119 --> 01:07:52,920
but it is there

824
01:07:52,920 --> 01:07:55,559
like appendix but you don't need it to

825
01:07:55,559 --> 01:07:56,520
anyone

826
01:07:56,520 --> 01:07:57,599
okay

827
01:07:57,599 --> 01:08:00,539
and uh how do we encrypt that or

828
01:08:00,539 --> 01:08:04,079
decrease that's a very very nice

829
01:08:04,079 --> 01:08:06,119
graph here how you can how you can do

830
01:08:06,119 --> 01:08:08,099
that so I'll just leave it here so you

831
01:08:08,099 --> 01:08:10,200
can familiarize yourself with that later

832
01:08:10,200 --> 01:08:12,420
on so we are not going to go like step

833
01:08:12,420 --> 01:08:15,260
by step with this

834
01:08:16,080 --> 01:08:18,839
uh

835
01:08:18,839 --> 01:08:23,580
yes so uh exercise but uh we actually

836
01:08:23,580 --> 01:08:25,679
can't do this yet because there hasn't

837
01:08:25,679 --> 01:08:28,259
been any side of the Luis yet

838
01:08:28,259 --> 01:08:31,799
but uh there might be later on so

839
01:08:31,799 --> 01:08:34,460
we'll see

840
01:08:37,979 --> 01:08:39,420
so

841
01:08:39,420 --> 01:08:41,040
yeah so actually when I was starting

842
01:08:41,040 --> 01:08:44,479
this how this work uh we have the

843
01:08:44,479 --> 01:08:48,120
encryption algorithm that can be

844
01:08:48,120 --> 01:08:49,738
well there are a couple of options what

845
01:08:49,738 --> 01:08:53,279
it can be and it can be like eight two

846
01:08:53,279 --> 01:08:58,920
five six CBC or a256 GB G or whatever

847
01:08:58,920 --> 01:09:01,560
that other one is but regardless of what

848
01:09:01,560 --> 01:09:04,140
the algorithm says marks always use this

849
01:09:04,140 --> 01:09:04,859
one

850
01:09:04,859 --> 01:09:07,560
so even though it says TCM that's I

851
01:09:07,560 --> 01:09:09,238
think that's the correct one so eight

852
01:09:09,238 --> 01:09:13,198
two five six CGM it still uses this one

853
01:09:13,198 --> 01:09:15,600
so it was very annoying to me because I

854
01:09:15,600 --> 01:09:17,399
had everything in place I tried to

855
01:09:17,399 --> 01:09:19,620
decrypt that but it didn't work because

856
01:09:19,620 --> 01:09:21,600
I was trying to follow the standard and

857
01:09:21,600 --> 01:09:23,640
use that method that the algorithm

858
01:09:23,640 --> 01:09:27,899
claims at so so yeah but I

859
01:09:27,899 --> 01:09:31,198
I found out this uh by reverse

860
01:09:31,198 --> 01:09:33,060
engineering the

861
01:09:33,060 --> 01:09:35,759
the part of

862
01:09:35,759 --> 01:09:39,660
of a software that is a you know

863
01:09:39,660 --> 01:09:42,299
encrypting this so so that's how I found

864
01:09:42,299 --> 01:09:45,420
that but yeah it was a bit annoying uh I

865
01:09:45,420 --> 01:09:47,160
have another presentation for that but

866
01:09:47,160 --> 01:09:49,679
that will take an hour so we won't go

867
01:09:49,679 --> 01:09:51,899
deeper into that

868
01:09:51,899 --> 01:09:53,640
so

869
01:09:53,640 --> 01:09:56,699
let's move forward to to next thing

870
01:09:56,699 --> 01:09:59,160
which is already authentication sorry

871
01:09:59,160 --> 01:10:02,820
already talking types and we have a uh

872
01:10:02,820 --> 01:10:04,500
three different types so we have ID

873
01:10:04,500 --> 01:10:07,620
token and the standard here is open ID

874
01:10:07,620 --> 01:10:10,800
connect and the purpose is to identify

875
01:10:10,800 --> 01:10:14,520
the user and that is uh valid for one

876
01:10:14,520 --> 01:10:15,420
hour

877
01:10:15,420 --> 01:10:18,540
after it's issued

878
01:10:18,540 --> 01:10:21,239
the second one is access token and that

879
01:10:21,239 --> 01:10:24,000
is a os2 standard and it is used for

880
01:10:24,000 --> 01:10:25,679
user identification but also to

881
01:10:25,679 --> 01:10:27,659
authorization so what is the difference

882
01:10:27,659 --> 01:10:30,120
between ID token access token is that

883
01:10:30,120 --> 01:10:32,219
access token also contains information

884
01:10:32,219 --> 01:10:35,520
about what Target you can access and

885
01:10:35,520 --> 01:10:37,980
also uh what you can do there like that

886
01:10:37,980 --> 01:10:40,679
scope for instance so but you can access

887
01:10:40,679 --> 01:10:44,760
crop API with this API score

888
01:10:44,760 --> 01:10:47,520
and then we have the refresh token also

889
01:10:47,520 --> 01:10:49,140
oauth2

890
01:10:49,140 --> 01:10:51,420
and that is used for requesting new

891
01:10:51,420 --> 01:10:55,500
access tokens when they are invalidated

892
01:10:55,500 --> 01:10:57,719
and there is no limit

893
01:10:57,719 --> 01:11:00,719
for the lifetime for request token by

894
01:11:00,719 --> 01:11:04,260
you need to use that in every 90 days so

895
01:11:04,260 --> 01:11:08,000
that's valid for forever

896
01:11:09,060 --> 01:11:10,260
so

897
01:11:10,260 --> 01:11:13,940
this this make any sense yeah

898
01:11:14,100 --> 01:11:15,960
password or something will it delete

899
01:11:15,960 --> 01:11:20,820
like will you have to reinput

900
01:11:22,400 --> 01:11:25,920
yeah so if you uh reset your password

901
01:11:25,920 --> 01:11:28,500
then that invalidates the refresh token

902
01:11:28,500 --> 01:11:30,900
and then you need to use whatever new

903
01:11:30,900 --> 01:11:32,760
password you have and you can also

904
01:11:32,760 --> 01:11:35,460
revoke that manually if you're an admin

905
01:11:35,460 --> 01:11:37,739
you can just go and revoke with a stock

906
01:11:37,739 --> 01:11:39,719
and then you need to give your user and

907
01:11:39,719 --> 01:11:43,760
a password again so yeah good question

908
01:11:43,980 --> 01:11:46,640
many other questions

909
01:11:46,640 --> 01:11:52,800
oh okay so uh then the JWT type so the

910
01:11:52,800 --> 01:11:57,000
standard we went through so ID token

911
01:11:57,000 --> 01:11:59,880
access token they are jws and then the

912
01:11:59,880 --> 01:12:02,640
refresh token is jwe but that is

913
01:12:02,640 --> 01:12:04,800
encrypted with the key only learn to

914
01:12:04,800 --> 01:12:06,300
Microsoft so we don't know what is

915
01:12:06,300 --> 01:12:08,400
inside that token actually so we don't

916
01:12:08,400 --> 01:12:10,380
we don't know but we can see what is

917
01:12:10,380 --> 01:12:13,380
inside the access token ID token and can

918
01:12:13,380 --> 01:12:15,659
this be revoked well access token you

919
01:12:15,659 --> 01:12:17,340
can't so if you have access token and

920
01:12:17,340 --> 01:12:19,140
you reset your password it doesn't

921
01:12:19,140 --> 01:12:20,580
matter you can still use that access

922
01:12:20,580 --> 01:12:22,739
token as long as it's valid

923
01:12:22,739 --> 01:12:26,280
so there might be a one hour gap so even

924
01:12:26,280 --> 01:12:28,020
though you reset you reset your password

925
01:12:28,020 --> 01:12:29,820
you can still use that one

926
01:12:29,820 --> 01:12:31,739
so you need to remember that and same

927
01:12:31,739 --> 01:12:34,400
with ID Target

928
01:12:39,179 --> 01:12:41,179
s

929
01:12:46,460 --> 01:12:49,500
yeah so it's valid yeah even though you

930
01:12:49,500 --> 01:12:51,480
reset password you can you can

931
01:12:51,480 --> 01:12:54,139
invalidate that

932
01:12:56,040 --> 01:12:59,400
but however there are new stuff in Azure

933
01:12:59,400 --> 01:13:02,340
ready that um it's called what is that

934
01:13:02,340 --> 01:13:04,400
called

935
01:13:04,400 --> 01:13:07,380
evaluation yeah continuous access

936
01:13:07,380 --> 01:13:10,140
evaluation so that kind of might help

937
01:13:10,140 --> 01:13:12,679
you on that

938
01:13:14,940 --> 01:13:18,600
okay then about refresh tokens so yeah

939
01:13:18,600 --> 01:13:20,520
so refresh tokens are used to acquire

940
01:13:20,520 --> 01:13:23,219
new access tokens and ID tokens

941
01:13:23,219 --> 01:13:26,699
and oauth standard has some security

942
01:13:26,699 --> 01:13:30,120
guard rails and the first one is that

943
01:13:30,120 --> 01:13:33,120
that refresh token must be bound to the

944
01:13:33,120 --> 01:13:36,260
client it was issued

945
01:13:36,600 --> 01:13:39,360
well yeah so

946
01:13:39,360 --> 01:13:41,880
that that doesn't work actually quite

947
01:13:41,880 --> 01:13:44,580
well with as ready and it also must be

948
01:13:44,580 --> 01:13:47,000
bound to the scope and resource server

949
01:13:47,000 --> 01:13:49,560
consented by the resource owner which

950
01:13:49,560 --> 01:13:53,219
means that when you log in you will get

951
01:13:53,219 --> 01:13:55,500
the refresh token and that is meant for

952
01:13:55,500 --> 01:13:57,840
certain service and for certain resource

953
01:13:57,840 --> 01:14:01,320
server and if you use that refresh token

954
01:14:01,320 --> 01:14:03,179
to get an access token you should only

955
01:14:03,179 --> 01:14:05,580
be able to do that for same scope and

956
01:14:05,580 --> 01:14:08,900
for same resource server

957
01:14:08,940 --> 01:14:11,520
and that usually works like that

958
01:14:11,520 --> 01:14:14,340
however Azure ready implementation

959
01:14:14,340 --> 01:14:16,380
allows you to get those tokens for

960
01:14:16,380 --> 01:14:18,540
different scopes

961
01:14:18,540 --> 01:14:21,360
so which means that you

962
01:14:21,360 --> 01:14:23,699
well let's imagine that you have an uh

963
01:14:23,699 --> 01:14:26,580
refresh token for Outlook client

964
01:14:26,580 --> 01:14:30,300
for let's say a certain service endpoint

965
01:14:30,300 --> 01:14:33,179
and then you use that refresh token so

966
01:14:33,179 --> 01:14:35,880
you must use same client ID of course

967
01:14:35,880 --> 01:14:37,800
because that's Outlaw client but you can

968
01:14:37,800 --> 01:14:39,960
change the resource so you can have an

969
01:14:39,960 --> 01:14:41,340
extra in the other tenant for instance

970
01:14:41,340 --> 01:14:44,040
so you can do that

971
01:14:44,040 --> 01:14:47,699
so it's it doesn't work as the standard

972
01:14:47,699 --> 01:14:48,719
States

973
01:14:48,719 --> 01:14:50,640
and then we have the 4C which is a

974
01:14:50,640 --> 01:14:52,199
totally different stuff and we're gonna

975
01:14:52,199 --> 01:14:53,699
get back to that later

976
01:14:53,699 --> 01:14:57,360
so anybody heard about really

977
01:14:57,360 --> 01:14:59,580
okay well there's something new and

978
01:14:59,580 --> 01:15:02,360
interesting for you guys

979
01:15:02,640 --> 01:15:05,460
okay so uh then a little bit longer

980
01:15:05,460 --> 01:15:09,540
exercise which you can use to get access

981
01:15:09,540 --> 01:15:12,000
tokens using different methods and here

982
01:15:12,000 --> 01:15:15,659
I'm using uh a A8 internals because you

983
01:15:15,659 --> 01:15:18,780
can choose what kind of things you are

984
01:15:18,780 --> 01:15:21,659
using and when you get that access token

985
01:15:21,659 --> 01:15:23,400
and you dump that you can see that there

986
01:15:23,400 --> 01:15:25,380
are different information now for

987
01:15:25,380 --> 01:15:28,199
instance for for that um what

988
01:15:28,199 --> 01:15:31,020
authentication methods you used so I'm

989
01:15:31,020 --> 01:15:33,120
gonna show examples here and you can try

990
01:15:33,120 --> 01:15:35,280
that back at home and or at the same

991
01:15:35,280 --> 01:15:37,140
time if you want to

992
01:15:37,140 --> 01:15:40,260
by the way who of you have a internals

993
01:15:40,260 --> 01:15:42,800
in store already

994
01:15:42,840 --> 01:15:45,860
one two couple yeah so you can do this

995
01:15:45,860 --> 01:15:50,059
at the same time so let's see

996
01:15:54,179 --> 01:15:57,600
so the first one is uh was the ROTC

997
01:15:57,600 --> 01:16:00,179
which was resource owned password so

998
01:16:00,179 --> 01:16:03,080
let's try that

999
01:16:15,900 --> 01:16:18,799
sorry about that

1000
01:16:25,679 --> 01:16:27,679
um

1001
01:16:48,840 --> 01:16:51,620
foreign

1002
01:17:14,219 --> 01:17:15,719
yeah

1003
01:17:15,719 --> 01:17:18,260
okay

1004
01:17:19,040 --> 01:17:21,900
so if we now dump the access token we

1005
01:17:21,900 --> 01:17:24,960
can see that it used this password

1006
01:17:24,960 --> 01:17:28,199
and the client ID was a bit different so

1007
01:17:28,199 --> 01:17:30,719
it was 1b730 or something and that's

1008
01:17:30,719 --> 01:17:32,760
that's reacted out the power zone so

1009
01:17:32,760 --> 01:17:35,100
that's what Azure rate sorry A8

1010
01:17:35,100 --> 01:17:36,600
internals is using to get that access

1011
01:17:36,600 --> 01:17:39,080
token

1012
01:17:41,460 --> 01:17:44,219
and now let's do the same in interactive

1013
01:17:44,219 --> 01:17:46,260
way so I don't provide the greater

1014
01:17:46,260 --> 01:17:48,179
Source here using this method I just

1015
01:17:48,179 --> 01:17:51,360
leave it like this and hit enter

1016
01:17:51,360 --> 01:17:55,980
now it opens a pop-up so if you have MFA

1017
01:17:55,980 --> 01:17:58,140
enabled for instance you can now use

1018
01:17:58,140 --> 01:17:59,159
this and

1019
01:17:59,159 --> 01:18:03,139
uh and well you sleep

1020
01:18:25,340 --> 01:18:28,739
so I'm gonna do now MFA

1021
01:18:28,739 --> 01:18:30,659
hopefully

1022
01:18:30,659 --> 01:18:33,259
yeah

1023
01:18:41,340 --> 01:18:43,860
and now when I dump the token you can

1024
01:18:43,860 --> 01:18:46,620
see that I use my own name here

1025
01:18:46,620 --> 01:18:50,580
uh and then now when we go to AMR we can

1026
01:18:50,580 --> 01:18:53,760
see that I use tester proso MFA so that

1027
01:18:53,760 --> 01:18:56,219
information is stored in Access token so

1028
01:18:56,219 --> 01:18:59,340
if you are trying to access a service

1029
01:18:59,340 --> 01:19:02,760
that that you are required MFE and you

1030
01:19:02,760 --> 01:19:04,560
don't have it here then you will be

1031
01:19:04,560 --> 01:19:07,500
prompted that you need to log in again

1032
01:19:07,500 --> 01:19:09,659
but now because we have that empathy

1033
01:19:09,659 --> 01:19:11,460
claim we can

1034
01:19:11,460 --> 01:19:13,800
use these two services that require MFA

1035
01:19:13,800 --> 01:19:17,960
because it is uh the claim is here

1036
01:19:18,780 --> 01:19:20,760
and also we have some new information

1037
01:19:20,760 --> 01:19:23,760
here because this user has been

1038
01:19:23,760 --> 01:19:26,159
synchronized on on-prem ad to have

1039
01:19:26,159 --> 01:19:28,380
already we can see the on-prem seat for

1040
01:19:28,380 --> 01:19:30,900
instance so you can match this user with

1041
01:19:30,900 --> 01:19:34,520
on-prem user you have in your on-premity

1042
01:19:34,520 --> 01:19:36,780
I know and you can also see that the

1043
01:19:36,780 --> 01:19:38,280
scope is a little bit different so I

1044
01:19:38,280 --> 01:19:40,800
have a much more stop here than in the

1045
01:19:40,800 --> 01:19:43,340
previous one

1046
01:19:44,520 --> 01:19:46,520
um

1047
01:19:55,800 --> 01:19:59,040
okay and the next one is uh I use device

1048
01:19:59,040 --> 01:20:03,300
device code authentication globe

1049
01:20:03,300 --> 01:20:05,580
and it says that I should go to this

1050
01:20:05,580 --> 01:20:07,320
address here

1051
01:20:07,320 --> 01:20:10,460
which I'm gonna do now

1052
01:20:16,440 --> 01:20:18,600
like this

1053
01:20:18,600 --> 01:20:21,719
and then I need to give this number

1054
01:20:21,719 --> 01:20:25,320
or string

1055
01:20:25,380 --> 01:20:27,840
I give it here and then it asks me to

1056
01:20:27,840 --> 01:20:29,699
authenticate myself

1057
01:20:29,699 --> 01:20:33,919
so I can use that which I already had

1058
01:20:34,260 --> 01:20:37,020
and that's it so that's a one ordered

1059
01:20:37,020 --> 01:20:40,380
case of method so let's see how it looks

1060
01:20:40,380 --> 01:20:42,120
now

1061
01:20:42,120 --> 01:20:44,340
so

1062
01:20:44,340 --> 01:20:46,380
it's also only the same information like

1063
01:20:46,380 --> 01:20:49,380
I used password to login and that's

1064
01:20:49,380 --> 01:20:51,480
device code authentication flow is

1065
01:20:51,480 --> 01:20:53,880
actually quite nice for fishing because

1066
01:20:53,880 --> 01:20:56,360
you can say the link to use that please

1067
01:20:56,360 --> 01:20:59,480
authenticate or login and the user.net

1068
01:20:59,480 --> 01:21:02,520
uh user doesn't know what the user was

1069
01:21:02,520 --> 01:21:05,400
doing he or she's just locks in and and

1070
01:21:05,400 --> 01:21:07,380
you will get the access token and now

1071
01:21:07,380 --> 01:21:08,580
you can do whatever

1072
01:21:08,580 --> 01:21:12,440
same thing that the user can do

1073
01:21:15,179 --> 01:21:15,980
it

1074
01:21:15,980 --> 01:21:18,540
how to block that device code

1075
01:21:18,540 --> 01:21:22,100
authentication flow you can't

1076
01:21:27,960 --> 01:21:30,980
that's the only way

1077
01:21:34,980 --> 01:21:37,560
okay so the next one is that we try to

1078
01:21:37,560 --> 01:21:39,860
use refresh token to do that

1079
01:21:39,860 --> 01:21:44,420
and now let's see if we can get one

1080
01:21:51,780 --> 01:21:54,179
so actually if I go to one of these

1081
01:21:54,179 --> 01:21:57,780
requests to that login.marks online

1082
01:21:57,780 --> 01:22:03,739
dot com I should have it here

1083
01:22:06,900 --> 01:22:09,840
let's try so I'm just going to copy the

1084
01:22:09,840 --> 01:22:11,400
whole response here

1085
01:22:11,400 --> 01:22:14,120
uh and open my

1086
01:22:14,120 --> 01:22:17,280
Notepad plus plus

1087
01:22:17,280 --> 01:22:19,400
okay

1088
01:22:25,400 --> 01:22:28,739
I need to verify this so I should have

1089
01:22:28,739 --> 01:22:31,699
some plugins here

1090
01:22:32,699 --> 01:22:34,140
moment

1091
01:22:34,140 --> 01:22:36,659
and here we have refresh tokens so when

1092
01:22:36,659 --> 01:22:38,340
you actually log in

1093
01:22:38,340 --> 01:22:40,679
that already you will have uh three

1094
01:22:40,679 --> 01:22:42,480
tokens you have the access token you

1095
01:22:42,480 --> 01:22:43,980
have ID token or interest login well

1096
01:22:43,980 --> 01:22:46,679
this actually also depends on the

1097
01:22:46,679 --> 01:22:49,500
uh service you are accessing but in this

1098
01:22:49,500 --> 01:22:52,080
case we have the refresh token so I'm

1099
01:22:52,080 --> 01:22:55,040
just gonna copy that

1100
01:23:14,040 --> 01:23:16,040
is

1101
01:23:16,739 --> 01:23:18,739
um

1102
01:23:22,560 --> 01:23:24,239
so I'm going to paste that and then I

1103
01:23:24,239 --> 01:23:27,000
need to provide client ID

1104
01:23:27,000 --> 01:23:30,620
which was somewhere here

1105
01:23:30,719 --> 01:23:32,960
foreign

1106
01:23:47,000 --> 01:23:50,699
like this and then the scope was for

1107
01:23:50,699 --> 01:23:53,960
resource in this case

1108
01:24:09,300 --> 01:24:11,460
and it didn't work of course it didn't

1109
01:24:11,460 --> 01:24:12,840
work

1110
01:24:12,840 --> 01:24:16,500
so what was wrong the grant is invalid

1111
01:24:16,500 --> 01:24:18,239
which means that it didn't like my

1112
01:24:18,239 --> 01:24:21,739
refresh token for some reason

1113
01:24:21,780 --> 01:24:24,800
don't know why

1114
01:24:29,460 --> 01:24:31,440
what was that

1115
01:24:31,440 --> 01:24:34,219
yeah yeah

1116
01:24:34,520 --> 01:24:39,140
that that's what I thought it might be

1117
01:24:49,199 --> 01:24:52,199
foreign

1118
01:25:18,179 --> 01:25:21,739
so the next kind of uh

1119
01:25:22,199 --> 01:25:26,360
Western here no let's go here so

1120
01:25:26,360 --> 01:25:28,739
why there are so many different methods

1121
01:25:28,739 --> 01:25:31,560
to get access token so is there any

1122
01:25:31,560 --> 01:25:36,320
anybody any opinions or any guesses why

1123
01:25:40,620 --> 01:25:43,219
yeah

1124
01:25:44,239 --> 01:25:46,860
so there are a lot of different kind of

1125
01:25:46,860 --> 01:25:49,140
systems and different situations for

1126
01:25:49,140 --> 01:25:51,179
instance that refresh token thing is

1127
01:25:51,179 --> 01:25:52,739
because you need to renew them every now

1128
01:25:52,739 --> 01:25:53,580
and then

1129
01:25:53,580 --> 01:25:55,980
and then that

1130
01:25:55,980 --> 01:25:59,219
device code it's meant for devices that

1131
01:25:59,219 --> 01:26:02,699
don't have like display that you can use

1132
01:26:02,699 --> 01:26:05,460
to log in or not even a keyboard maybe

1133
01:26:05,460 --> 01:26:07,860
so that's the reason for that

1134
01:26:07,860 --> 01:26:11,460
why it is turned on by by default I

1135
01:26:11,460 --> 01:26:13,080
don't know because usually you don't

1136
01:26:13,080 --> 01:26:15,360
need to do that part it is there anyways

1137
01:26:15,360 --> 01:26:17,400
and then you need to have that

1138
01:26:17,400 --> 01:26:19,560
interactive flow so that you can provide

1139
01:26:19,560 --> 01:26:21,420
MFA because you can do that in common

1140
01:26:21,420 --> 01:26:25,320
line so so that's why why there are so

1141
01:26:25,320 --> 01:26:28,199
so many different ones and what token

1142
01:26:28,199 --> 01:26:31,260
types was returned so that was actually

1143
01:26:31,260 --> 01:26:33,600
answered already here so

1144
01:26:33,600 --> 01:26:35,940
we got access token refresh token and ID

1145
01:26:35,940 --> 01:26:37,800
token and also some client information

1146
01:26:37,800 --> 01:26:41,780
in certain cases but yeah

1147
01:26:45,360 --> 01:26:47,100
Okay so

1148
01:26:47,100 --> 01:26:50,100
then if there's no any questions we can

1149
01:26:50,100 --> 01:26:53,219
move robot okay so the next topic is

1150
01:26:53,219 --> 01:26:55,739
that what is inside a refresh token so

1151
01:26:55,739 --> 01:26:57,840
that's that has been interested me a

1152
01:26:57,840 --> 01:26:59,100
long time

1153
01:26:59,100 --> 01:27:01,560
but uh

1154
01:27:01,560 --> 01:27:04,020
yeah these kind of things they are or

1155
01:27:04,020 --> 01:27:06,540
technical background so first of all

1156
01:27:06,540 --> 01:27:08,760
everything is encrypted using a public

1157
01:27:08,760 --> 01:27:11,340
key it's just a funny way to do that but

1158
01:27:11,340 --> 01:27:13,020
that's how it works at least with

1159
01:27:13,020 --> 01:27:15,659
Microsoft and it's decrypted using a

1160
01:27:15,659 --> 01:27:16,679
private key

1161
01:27:16,679 --> 01:27:19,020
and keys are only known to Microsoft so

1162
01:27:19,020 --> 01:27:20,940
you can't even get the public key

1163
01:27:20,940 --> 01:27:22,620
anywhere

1164
01:27:22,620 --> 01:27:24,900
uh so this means that we don't know what

1165
01:27:24,900 --> 01:27:26,460
is inside that's already with this token

1166
01:27:26,460 --> 01:27:28,860
but we know what is inside adfs refresh

1167
01:27:28,860 --> 01:27:31,860
token and ADF is like a federating

1168
01:27:31,860 --> 01:27:33,239
services

1169
01:27:33,239 --> 01:27:36,780
uh and as already is at least partly

1170
01:27:36,780 --> 01:27:39,120
based on the same code base not exactly

1171
01:27:39,120 --> 01:27:43,199
but but anyways uh at least probably

1172
01:27:43,199 --> 01:27:45,960
so let's try to see what is inside adfs

1173
01:27:45,960 --> 01:27:50,000
because that's we know what we know

1174
01:27:50,940 --> 01:27:53,699
so here is the anatomy of the afps

1175
01:27:53,699 --> 01:27:58,260
repress token so we have the token blob

1176
01:27:58,260 --> 01:28:01,080
which is here on green and then we have

1177
01:28:01,080 --> 01:28:04,080
the signature plot which is in red

1178
01:28:04,080 --> 01:28:07,620
so token blob has certain information so

1179
01:28:07,620 --> 01:28:08,880
we have the

1180
01:28:08,880 --> 01:28:11,400
tokens well we will get back to this

1181
01:28:11,400 --> 01:28:14,360
later but it has a lot of information

1182
01:28:14,360 --> 01:28:18,360
and then the signature of course it's a

1183
01:28:18,360 --> 01:28:21,659
token signing private key or you use the

1184
01:28:21,659 --> 01:28:24,960
token signing private key to sign that

1185
01:28:24,960 --> 01:28:27,860
uh refresh token

1186
01:28:27,860 --> 01:28:30,239
and here's the refresh token or the

1187
01:28:30,239 --> 01:28:33,840
token plot looks nice right uh and we

1188
01:28:33,840 --> 01:28:36,179
know a couple of things here so we know

1189
01:28:36,179 --> 01:28:40,139
that PSM has of that certificate you use

1190
01:28:40,139 --> 01:28:43,500
to encrypt this and we have some size

1191
01:28:43,500 --> 01:28:45,060
information

1192
01:28:45,060 --> 01:28:47,760
and then we have the encrypted key

1193
01:28:47,760 --> 01:28:51,179
and ID block here

1194
01:28:51,179 --> 01:28:54,060
and then the size of the encrypted token

1195
01:28:54,060 --> 01:28:56,639
and the last part

1196
01:28:56,639 --> 01:29:00,120
of that token is the actual uh encrypted

1197
01:29:00,120 --> 01:29:02,520
token and the size depends so it can be

1198
01:29:02,520 --> 01:29:05,639
anything because it has claims also so

1199
01:29:05,639 --> 01:29:07,320
it's not always the same but the header

1200
01:29:07,320 --> 01:29:09,360
stuff is usually the same oh well it is

1201
01:29:09,360 --> 01:29:11,760
always the same so what is then inside

1202
01:29:11,760 --> 01:29:14,280
that refresh token the red one when you

1203
01:29:14,280 --> 01:29:17,340
encrypt this or sorry decrypt this so we

1204
01:29:17,340 --> 01:29:20,520
have claims so pretty much same thing

1205
01:29:20,520 --> 01:29:24,120
that you have with uh access tokens so

1206
01:29:24,120 --> 01:29:26,760
we can safely assume that these kind of

1207
01:29:26,760 --> 01:29:28,800
information is also in absolutely

1208
01:29:28,800 --> 01:29:31,080
replace token although we are cannot be

1209
01:29:31,080 --> 01:29:33,540
sure so what we have we have the client

1210
01:29:33,540 --> 01:29:35,520
ID we have the resource and then we have

1211
01:29:35,520 --> 01:29:38,460
the easier and then we have some more

1212
01:29:38,460 --> 01:29:41,400
information about the actual user

1213
01:29:41,400 --> 01:29:43,500
I don't think that part is there because

1214
01:29:43,500 --> 01:29:46,080
this is Windows related so

1215
01:29:46,080 --> 01:29:47,219
but

1216
01:29:47,219 --> 01:29:49,320
if we look inside what is inside that

1217
01:29:49,320 --> 01:29:51,239
single sign-on token

1218
01:29:51,239 --> 01:29:53,400
so we have this kind of information so

1219
01:29:53,400 --> 01:29:56,100
these are just pretty much stuff related

1220
01:29:56,100 --> 01:29:57,960
to open 80.

1221
01:29:57,960 --> 01:30:01,020
so this is not enough already

1222
01:30:01,020 --> 01:30:04,560
I assume but uh but this is a in

1223
01:30:04,560 --> 01:30:06,300
on-premely anyway so we are going to

1224
01:30:06,300 --> 01:30:09,120
skip this

1225
01:30:09,120 --> 01:30:10,800
but if you want to see what is inside

1226
01:30:10,800 --> 01:30:13,260
Area Professor Reapers token you can

1227
01:30:13,260 --> 01:30:16,139
then come to back come back to this but

1228
01:30:16,139 --> 01:30:17,520
anyways

1229
01:30:17,520 --> 01:30:20,340
uh is it safe to assume that at least

1230
01:30:20,340 --> 01:30:22,020
this kind of information is included

1231
01:30:22,020 --> 01:30:24,840
there so when you use refresh talking it

1232
01:30:24,840 --> 01:30:26,760
already knows that what is the what the

1233
01:30:26,760 --> 01:30:29,520
Glide ID uh what was the resource and

1234
01:30:29,520 --> 01:30:32,880
also who was the Eco and who are you so

1235
01:30:32,880 --> 01:30:34,620
that information is

1236
01:30:34,620 --> 01:30:38,900
probably stored in in refresh token

1237
01:30:38,900 --> 01:30:42,659
okay then to faucet and this was

1238
01:30:42,659 --> 01:30:44,699
actually quite interesting so I I found

1239
01:30:44,699 --> 01:30:47,940
out this by accident then my colleague

1240
01:30:47,940 --> 01:30:50,639
kind of made a little more research and

1241
01:30:50,639 --> 01:30:53,520
published a paper about this

1242
01:30:53,520 --> 01:30:54,659
so

1243
01:30:54,659 --> 01:30:58,620
CI stands for family of client IDs

1244
01:30:58,620 --> 01:31:01,620
and that is a group of Microsoft first

1245
01:31:01,620 --> 01:31:04,020
party applications and there's a list in

1246
01:31:04,020 --> 01:31:06,780
that in our GitHub so I think there's a

1247
01:31:06,780 --> 01:31:09,239
roughly 36 or something so we can

1248
01:31:09,239 --> 01:31:10,920
actually see

1249
01:31:10,920 --> 01:31:13,580
this

1250
01:31:14,280 --> 01:31:16,280
is

1251
01:31:16,620 --> 01:31:19,260
so how many there oh actually

1252
01:31:19,260 --> 01:31:20,900
so

1253
01:31:20,900 --> 01:31:24,480
33 at the moment and this is what we

1254
01:31:24,480 --> 01:31:27,179
know of there might be others but these

1255
01:31:27,179 --> 01:31:29,340
are those clients

1256
01:31:29,340 --> 01:31:32,280
and they have a special refresh token

1257
01:31:32,280 --> 01:31:35,699
called family reverse token or frt

1258
01:31:35,699 --> 01:31:37,560
and that's not the refresh token for

1259
01:31:37,560 --> 01:31:40,739
fossil uh Posse coins or positive access

1260
01:31:40,739 --> 01:31:42,600
tokens

1261
01:31:42,600 --> 01:31:45,960
now the behavior is a little bit

1262
01:31:45,960 --> 01:31:50,280
different so you can use any frt to get

1263
01:31:50,280 --> 01:31:52,440
access talking to any toxic line and

1264
01:31:52,440 --> 01:31:53,760
resource

1265
01:31:53,760 --> 01:31:56,280
so this is violating every colloquials

1266
01:31:56,280 --> 01:31:58,500
of all of standard so basically this

1267
01:31:58,500 --> 01:32:00,120
means that if you have refresh token for

1268
01:32:00,120 --> 01:32:02,219
teams clients you you can get an access

1269
01:32:02,219 --> 01:32:05,699
token for Outlook login and so on

1270
01:32:05,699 --> 01:32:08,639
and and this makes like that device code

1271
01:32:08,639 --> 01:32:10,560
authentication flow quite powerful

1272
01:32:10,560 --> 01:32:13,139
because if you use that to get well for

1273
01:32:13,139 --> 01:32:15,000
instance team success token you can

1274
01:32:15,000 --> 01:32:17,340
exchange that to any other access token

1275
01:32:17,340 --> 01:32:18,659
you want to

1276
01:32:18,659 --> 01:32:20,699
if they are sharing the same client

1277
01:32:20,699 --> 01:32:24,120
sorry if they are housing clients

1278
01:32:24,120 --> 01:32:27,480
yeah so this is this was like my

1279
01:32:27,480 --> 01:32:30,000
face when I I learned that how how that

1280
01:32:30,000 --> 01:32:31,860
worked

1281
01:32:31,860 --> 01:32:35,040
uh yes so

1282
01:32:35,040 --> 01:32:36,840
Let's uh

1283
01:32:36,840 --> 01:32:41,120
Let's uh do a little bit of exercise

1284
01:32:51,800 --> 01:32:56,760
and uh I try to do this actually using a

1285
01:32:56,760 --> 01:32:59,300
feed letter

1286
01:32:59,840 --> 01:33:03,679
let's see how it works

1287
01:33:24,480 --> 01:33:27,480
wow

1288
01:33:35,580 --> 01:33:38,580
approaches

1289
01:33:44,360 --> 01:33:47,340
again Microsoft is checking the module

1290
01:33:47,340 --> 01:33:50,360
okay and there is

1291
01:34:00,239 --> 01:34:03,080
all right

1292
01:34:03,080 --> 01:34:06,600
yeah so first time when you use aaad

1293
01:34:06,600 --> 01:34:10,440
internals and uh you are going you are

1294
01:34:10,440 --> 01:34:12,960
trying to use the interactive

1295
01:34:12,960 --> 01:34:16,500
it needs to set some registic registry

1296
01:34:16,500 --> 01:34:19,320
keys for it to work so I need to restart

1297
01:34:19,320 --> 01:34:21,739
that

1298
01:34:45,020 --> 01:34:48,179
oh yeah this is the server operating

1299
01:34:48,179 --> 01:34:50,900
system so

1300
01:34:54,659 --> 01:34:56,900
foreign

1301
01:34:58,159 --> 01:35:01,860
so I need to get this Internet Explorer

1302
01:35:01,860 --> 01:35:05,780
in common security toolbox

1303
01:35:24,020 --> 01:35:29,480
yeah there's such a choice of live demos

1304
01:35:46,560 --> 01:35:49,460
there we go

1305
01:36:02,100 --> 01:36:06,239
okay so now I I got an access token for

1306
01:36:06,239 --> 01:36:08,159
teams so let's see how that traffic

1307
01:36:08,159 --> 01:36:09,360
looks like

1308
01:36:09,360 --> 01:36:13,800
oh the last part where you actually get

1309
01:36:13,800 --> 01:36:16,699
the access tokens

1310
01:36:21,300 --> 01:36:22,739
so here

1311
01:36:22,739 --> 01:36:24,719
is the last response and you get an

1312
01:36:24,719 --> 01:36:26,340
access token

1313
01:36:26,340 --> 01:36:28,260
and research token and then of course ID

1314
01:36:28,260 --> 01:36:30,900
token now

1315
01:36:30,900 --> 01:36:34,500
uh this is the latest edition and it was

1316
01:36:34,500 --> 01:36:36,900
published like last week during the

1317
01:36:36,900 --> 01:36:40,880
blackout Asia so I uh kind of

1318
01:36:40,880 --> 01:36:43,739
re-engineered the whole cache handling

1319
01:36:43,739 --> 01:36:46,679
so it now supports toxic lines which

1320
01:36:46,679 --> 01:36:49,139
means that if you have a method or

1321
01:36:49,139 --> 01:36:51,300
function that requires certain policy

1322
01:36:51,300 --> 01:36:54,300
client and you don't have that in in

1323
01:36:54,300 --> 01:36:56,400
cash it can use the refresh token to get

1324
01:36:56,400 --> 01:37:02,059
one so so let's see how how it works

1325
01:37:10,040 --> 01:37:13,139
so I'm going to use a random

1326
01:37:13,139 --> 01:37:15,120
function that uh

1327
01:37:15,120 --> 01:37:17,340
get some Recon information as an Insider

1328
01:37:17,340 --> 01:37:19,560
from yesterday tenant and it is using a

1329
01:37:19,560 --> 01:37:22,679
different client ID uh but it's post

1330
01:37:22,679 --> 01:37:24,900
decline it's going to use so it should

1331
01:37:24,900 --> 01:37:28,500
work because we have that

1332
01:37:28,500 --> 01:37:31,500
and when we use that verbose we can

1333
01:37:31,500 --> 01:37:33,780
we can see uh what is actually happening

1334
01:37:33,780 --> 01:37:35,960
there

1335
01:37:37,440 --> 01:37:41,299
maybe too much information but

1336
01:37:41,520 --> 01:37:44,659
but we can go to

1337
01:37:44,820 --> 01:37:47,239
go to Fiddler

1338
01:37:47,239 --> 01:37:51,120
and what was the last thing yes so this

1339
01:37:51,120 --> 01:37:52,980
is where we are now

1340
01:37:52,980 --> 01:37:54,900
so I'm gonna

1341
01:37:54,900 --> 01:37:58,519
just Mark that as red

1342
01:37:59,100 --> 01:38:02,040
and now I try to find out a

1343
01:38:02,040 --> 01:38:04,260
a

1344
01:38:04,260 --> 01:38:06,960
correct place

1345
01:38:06,960 --> 01:38:09,980
where we actually

1346
01:38:11,880 --> 01:38:14,460
or is that one

1347
01:38:14,460 --> 01:38:16,260
yes

1348
01:38:16,260 --> 01:38:18,360
so we here we are actually using refresh

1349
01:38:18,360 --> 01:38:22,080
token of that teams

1350
01:38:22,080 --> 01:38:24,360
teams client because we had that and we

1351
01:38:24,360 --> 01:38:27,300
can use that so

1352
01:38:27,300 --> 01:38:29,580
because of course it works as it works

1353
01:38:29,580 --> 01:38:31,679
we don't need to care about any more

1354
01:38:31,679 --> 01:38:33,900
like do we have the correct access token

1355
01:38:33,900 --> 01:38:36,300
to that certain service so it's enough

1356
01:38:36,300 --> 01:38:39,540
that we have one that is supposedly or

1357
01:38:39,540 --> 01:38:42,000
if our frd actually and we can use that

1358
01:38:42,000 --> 01:38:44,940
to other clients however we want to

1359
01:38:44,940 --> 01:38:47,219
now if we go

1360
01:38:47,219 --> 01:38:50,460
further up here

1361
01:38:50,460 --> 01:38:54,920
in the beginning of this nice verbose

1362
01:38:55,080 --> 01:38:56,460
stop

1363
01:38:56,460 --> 01:38:59,340
we can see that

1364
01:38:59,340 --> 01:39:01,500
it wanted to have an access token with

1365
01:39:01,500 --> 01:39:04,500
this client ID to this resource but it

1366
01:39:04,500 --> 01:39:07,380
didn't find but it says that okay this

1367
01:39:07,380 --> 01:39:09,360
is a known for the client

1368
01:39:09,360 --> 01:39:13,500
so it's trying to get one using a

1369
01:39:13,500 --> 01:39:18,080
like that forcing a refresh token

1370
01:39:20,100 --> 01:39:21,840
yes so

1371
01:39:21,840 --> 01:39:23,699
the question is that how can we

1372
01:39:23,699 --> 01:39:25,679
recognize Jose token

1373
01:39:25,679 --> 01:39:29,420
does anybody have any any idea

1374
01:39:29,880 --> 01:39:34,280
so if you are looking the trace

1375
01:39:34,280 --> 01:39:39,420
on YouTube a bit oh let's sing it

1376
01:39:39,420 --> 01:39:43,580
it doesn't work actually why not

1377
01:39:45,420 --> 01:39:47,960
okay

1378
01:39:52,320 --> 01:39:55,320
foreign

1379
01:40:27,659 --> 01:40:30,060
yes so whenever you are getting access

1380
01:40:30,060 --> 01:40:33,300
token that is a foster there there's a

1381
01:40:33,300 --> 01:40:35,699
4C equals one so now you know that that

1382
01:40:35,699 --> 01:40:37,560
is a bossy client so it's why is it

1383
01:40:37,560 --> 01:40:39,659
quite easy actually to spot

1384
01:40:39,659 --> 01:40:42,060
but the actual access token doesn't have

1385
01:40:42,060 --> 01:40:44,400
that information so it's only when you

1386
01:40:44,400 --> 01:40:47,340
are request requesting that so then that

1387
01:40:47,340 --> 01:40:51,679
information is included but otherwise no

1388
01:40:56,219 --> 01:40:58,020
and by the way

1389
01:40:58,020 --> 01:41:02,000
if you are using aad internals and and

1390
01:41:02,000 --> 01:41:05,300
you will get an access token

1391
01:41:05,300 --> 01:41:08,100
that is a fossil client that we don't

1392
01:41:08,100 --> 01:41:10,440
know of it will tell you that hey

1393
01:41:10,440 --> 01:41:11,820
there's a new fossil client please

1394
01:41:11,820 --> 01:41:14,280
report this to us so that we can add it

1395
01:41:14,280 --> 01:41:16,940
into that list

1396
01:41:18,179 --> 01:41:21,300
so the positive stuff is uh just

1397
01:41:21,300 --> 01:41:23,040
important for you to understand how it

1398
01:41:23,040 --> 01:41:25,440
works because it can be used in a bad

1399
01:41:25,440 --> 01:41:28,040
purposes

1400
01:41:28,679 --> 01:41:31,800
and uh that's how it works

1401
01:41:31,800 --> 01:41:34,139
and by the way when we asked for

1402
01:41:34,139 --> 01:41:36,360
Microsoft why is it this way so do you

1403
01:41:36,360 --> 01:41:38,719
know why

1404
01:41:39,659 --> 01:41:44,100
yeah so it it has it's been used as a

1405
01:41:44,100 --> 01:41:45,659
single sign-in solution for mobile

1406
01:41:45,659 --> 01:41:46,860
phones

1407
01:41:46,860 --> 01:41:50,400
so that's why why it is like this

1408
01:41:50,400 --> 01:41:52,080
but you don't need that anymore because

1409
01:41:52,080 --> 01:41:54,659
you have prts for instance so but it is

1410
01:41:54,659 --> 01:41:57,780
still there I don't know why it might go

1411
01:41:57,780 --> 01:42:01,460
away maybe yeah

1412
01:42:02,520 --> 01:42:07,400
so some uh attack scenarios

1413
01:42:07,940 --> 01:42:09,719
so

1414
01:42:09,719 --> 01:42:12,360
we have the facing stuff so you might

1415
01:42:12,360 --> 01:42:14,520
have this man in the middle or adversary

1416
01:42:14,520 --> 01:42:16,139
in the middle attacks

1417
01:42:16,139 --> 01:42:19,199
or you can use device code

1418
01:42:19,199 --> 01:42:22,080
or then you can steal the token you can

1419
01:42:22,080 --> 01:42:23,880
do the token drift so you can steal

1420
01:42:23,880 --> 01:42:25,739
token from a browser

1421
01:42:25,739 --> 01:42:27,960
or you can use a PRT

1422
01:42:27,960 --> 01:42:30,300
and I'm going to demonstrate this to you

1423
01:42:30,300 --> 01:42:31,380
actually

1424
01:42:31,380 --> 01:42:33,540
and then you can also spoof the proof of

1425
01:42:33,540 --> 01:42:36,300
identity so if you uh

1426
01:42:36,300 --> 01:42:38,159
you can use store called Golden Sam

1427
01:42:38,159 --> 01:42:40,800
attacks so if you are able to create a

1428
01:42:40,800 --> 01:42:43,800
sample token you can exchange that to

1429
01:42:43,800 --> 01:42:45,600
access token

1430
01:42:45,600 --> 01:42:47,820
also if you have the thing called

1431
01:42:47,820 --> 01:42:50,400
seamless single sign-on configured you

1432
01:42:50,400 --> 01:42:54,119
can use so-called silver tickets silver

1433
01:42:54,119 --> 01:42:56,880
tickets and you can exchange those to to

1434
01:42:56,880 --> 01:42:59,340
access tokens and then you if you have

1435
01:42:59,340 --> 01:43:01,260
the device certificates

1436
01:43:01,260 --> 01:43:03,719
I mean the computer that is showing to

1437
01:43:03,719 --> 01:43:05,820
that already and you you can get your

1438
01:43:05,820 --> 01:43:07,400
hands to that

1439
01:43:07,400 --> 01:43:10,980
certificate you can get your own PRT and

1440
01:43:10,980 --> 01:43:13,020
with that you can get again any any

1441
01:43:13,020 --> 01:43:15,320
access token you want

1442
01:43:15,320 --> 01:43:18,239
so do you want to see a demo about this

1443
01:43:18,239 --> 01:43:21,900
yes attack scenarios okay

1444
01:43:21,900 --> 01:43:25,638
so let's do that there

1445
01:43:31,020 --> 01:43:34,260
so let's start with uh

1446
01:43:34,260 --> 01:43:36,960
uh

1447
01:43:36,960 --> 01:43:38,639
some

1448
01:43:38,639 --> 01:43:42,679
we need to prepare something personal

1449
01:43:43,080 --> 01:43:45,840
so we have this

1450
01:43:45,840 --> 01:43:48,900
uh Fiddler here

1451
01:43:48,900 --> 01:43:51,480
so what we're going to do is is that

1452
01:43:51,480 --> 01:43:53,280
we're gonna join a device to that

1453
01:43:53,280 --> 01:43:54,540
already

1454
01:43:54,540 --> 01:43:56,219
and I'm going to show you that how you

1455
01:43:56,219 --> 01:43:57,960
can monitor the traffic between that

1456
01:43:57,960 --> 01:44:01,800
device and Azure ID all the time even

1457
01:44:01,800 --> 01:44:03,600
before it's joined so that you can see

1458
01:44:03,600 --> 01:44:04,860
what is happening

1459
01:44:04,860 --> 01:44:07,980
and for that purpose we actually created

1460
01:44:07,980 --> 01:44:10,020
a plugin

1461
01:44:10,020 --> 01:44:13,020
and that is available in GitHub the CQ

1462
01:44:13,020 --> 01:44:15,780
Works gitlab sorry GitHub

1463
01:44:15,780 --> 01:44:19,020
and we have a plugin for both

1464
01:44:19,020 --> 01:44:21,780
piddler and also for bird suite and the

1465
01:44:21,780 --> 01:44:24,659
verb one is a bit nicer because Fiddler

1466
01:44:24,659 --> 01:44:27,420
is uh well it's a fiddler

1467
01:44:27,420 --> 01:44:30,000
so it's not that nice but

1468
01:44:30,000 --> 01:44:32,400
I'm gonna copy this and they need to be

1469
01:44:32,400 --> 01:44:35,540
copied where actually

1470
01:44:45,980 --> 01:44:50,639
yes so it's a app data local programs

1471
01:44:50,639 --> 01:44:54,420
feedler and inspector so I'm gonna paste

1472
01:44:54,420 --> 01:44:55,619
those here

1473
01:44:55,619 --> 01:44:58,560
of DL so now when we start Fiddler it

1474
01:44:58,560 --> 01:45:01,699
should have those in place

1475
01:45:03,659 --> 01:45:05,520
so let's see I'm going to select

1476
01:45:05,520 --> 01:45:08,880
something change the inspectors and now

1477
01:45:08,880 --> 01:45:11,100
uh we have a new

1478
01:45:11,100 --> 01:45:13,199
tab for PRT

1479
01:45:13,199 --> 01:45:16,260
and same here and also the 80 for Access

1480
01:45:16,260 --> 01:45:19,920
tokens but we can we can use those yet

1481
01:45:19,920 --> 01:45:23,840
because we don't have any data for them

1482
01:45:24,960 --> 01:45:27,980
okay now I move to

1483
01:45:27,980 --> 01:45:31,020
the Windows 10 box I'm going to join to

1484
01:45:31,020 --> 01:45:32,580
that already

1485
01:45:32,580 --> 01:45:35,719
put it right here

1486
01:45:36,860 --> 01:45:38,639
and

1487
01:45:38,639 --> 01:45:41,460
first thing first though next thing is

1488
01:45:41,460 --> 01:45:44,340
that I want to configure this computer

1489
01:45:44,340 --> 01:45:47,760
to use that other server as a proxy so

1490
01:45:47,760 --> 01:45:50,580
that we can see all the traffic

1491
01:45:50,580 --> 01:45:51,780
so

1492
01:45:51,780 --> 01:45:53,880
there's a function for that in A8

1493
01:45:53,880 --> 01:45:56,480
internals

1494
01:45:59,159 --> 01:46:02,100
so it's called set aad in proxy settings

1495
01:46:02,100 --> 01:46:03,780
and we're going to provide a proxy

1496
01:46:03,780 --> 01:46:05,159
address

1497
01:46:05,159 --> 01:46:06,960
we need to copy that because can't

1498
01:46:06,960 --> 01:46:09,199
remember

1499
01:46:09,440 --> 01:46:12,860
nothing at all

1500
01:46:27,060 --> 01:46:30,480
right 888

1501
01:46:33,000 --> 01:46:35,520
and then I provide Suites called trust

1502
01:46:35,520 --> 01:46:38,159
Fiddler you can also use thrust verb if

1503
01:46:38,159 --> 01:46:40,560
you are using burps week but so this

1504
01:46:40,560 --> 01:46:43,020
will set all the possible proxy settings

1505
01:46:43,020 --> 01:46:47,580
I I can I could find in in Windows and

1506
01:46:47,580 --> 01:46:49,380
then it also trusts automatically to

1507
01:46:49,380 --> 01:46:51,239
fill a root certificate so it can

1508
01:46:51,239 --> 01:46:53,159
actually block that

1509
01:46:53,159 --> 01:46:55,400
okay

1510
01:46:55,400 --> 01:46:58,920
yeah do you know why

1511
01:46:58,920 --> 01:47:02,000
I'm not an admin

1512
01:47:22,699 --> 01:47:25,820
thank you

1513
01:47:31,219 --> 01:47:34,320
Robert could you disable this checking

1514
01:47:34,320 --> 01:47:37,820
okay in Chinese every time

1515
01:47:39,119 --> 01:47:41,659
no

1516
01:47:46,920 --> 01:47:49,340
yes

1517
01:48:02,360 --> 01:48:06,000
yes and now even when system is trying

1518
01:48:06,000 --> 01:48:09,000
to do something everything goes through

1519
01:48:09,000 --> 01:48:11,760
my my people there now

1520
01:48:11,760 --> 01:48:14,040
so now let's try to join these two Azure

1521
01:48:14,040 --> 01:48:15,119
ID

1522
01:48:15,119 --> 01:48:17,340
or do we need to reboot this maybe I'll

1523
01:48:17,340 --> 01:48:20,840
just uh reboot this one

1524
01:48:31,560 --> 01:48:34,560
foreign

1525
01:49:05,340 --> 01:49:07,679
okay so we go to settings we go to

1526
01:49:07,679 --> 01:49:11,159
accounts we go to access work or school

1527
01:49:11,159 --> 01:49:14,159
and then connect

1528
01:49:14,159 --> 01:49:17,100
but because we want to join not register

1529
01:49:17,100 --> 01:49:19,139
we need to click here down here so join

1530
01:49:19,139 --> 01:49:21,060
this device already so don't type here

1531
01:49:21,060 --> 01:49:23,040
because that will register it and that's

1532
01:49:23,040 --> 01:49:24,360
different thing

1533
01:49:24,360 --> 01:49:28,099
so we join

1534
01:49:44,659 --> 01:49:47,940
and are you sure about this so yes we

1535
01:49:47,940 --> 01:49:49,320
are

1536
01:49:49,320 --> 01:49:52,040
powder

1537
01:49:54,000 --> 01:49:57,139
and done

1538
01:49:57,179 --> 01:49:59,639
so now it's connected

1539
01:49:59,639 --> 01:50:04,520
and now we need to restart this again

1540
01:50:08,040 --> 01:50:12,679
so that we can then log in as that user

1541
01:50:23,719 --> 01:50:27,320
now we changed

1542
01:50:29,340 --> 01:50:32,340
anymore

1543
01:50:52,679 --> 01:50:55,199
now it may change to Fiddler we can see

1544
01:50:55,199 --> 01:50:56,760
that there's a lot of clapping going on

1545
01:50:56,760 --> 01:50:59,060
in there

1546
01:51:05,580 --> 01:51:07,980
we can see login.microssonline.com and

1547
01:51:07,980 --> 01:51:10,638
so on so on

1548
01:51:12,179 --> 01:51:15,139
complicated

1549
01:51:20,400 --> 01:51:22,460
um

1550
01:51:32,540 --> 01:51:35,040
and actually you might want to filter

1551
01:51:35,040 --> 01:51:38,340
things from Fiddler so so that you don't

1552
01:51:38,340 --> 01:51:40,619
want to see everything like every like a

1553
01:51:40,619 --> 01:51:43,500
JavaScript or whatever you can trust

1554
01:51:43,500 --> 01:51:45,540
filter that out so

1555
01:51:45,540 --> 01:51:48,800
get rid of

1556
01:51:49,800 --> 01:51:52,080
or any images you don't need those

1557
01:51:52,080 --> 01:51:54,440
either

1558
01:52:01,380 --> 01:52:04,679
this could actually take a while when

1559
01:52:04,679 --> 01:52:06,780
your first time using a little bit

1560
01:52:06,780 --> 01:52:10,460
because you don't want to see everything

1561
01:52:14,940 --> 01:52:19,638
there are still some image spoils

1562
01:52:23,460 --> 01:52:26,420
foreign

1563
01:52:34,320 --> 01:52:37,560
so we are now locked in here so let's

1564
01:52:37,560 --> 01:52:41,000
try to see some stuff

1565
01:52:49,860 --> 01:52:53,159
yeah so I try to find a line with get

1566
01:52:53,159 --> 01:52:55,879
key data

1567
01:52:56,699 --> 01:53:01,739
so let's see what we have inside here so

1568
01:53:02,460 --> 01:53:05,760
here we can see some token traffic going

1569
01:53:05,760 --> 01:53:07,380
on

1570
01:53:07,380 --> 01:53:09,360
you can see refresh tokens and then we

1571
01:53:09,360 --> 01:53:13,280
can see a thing called session key jwe

1572
01:53:13,280 --> 01:53:14,840
and

1573
01:53:14,840 --> 01:53:18,739
that is used to

1574
01:53:19,320 --> 01:53:22,139
encrypt and decrypt stuff so I'm going

1575
01:53:22,139 --> 01:53:24,000
to show it to you how that works in a

1576
01:53:24,000 --> 01:53:25,080
second

1577
01:53:25,080 --> 01:53:29,699
before going there so for instance here

1578
01:53:29,699 --> 01:53:31,860
what we see is that

1579
01:53:31,860 --> 01:53:34,980
you are asking an access token

1580
01:53:34,980 --> 01:53:37,800
and what you get back is just a Json

1581
01:53:37,800 --> 01:53:39,659
block

1582
01:53:39,659 --> 01:53:42,540
let me get it to you

1583
01:53:42,540 --> 01:53:46,460
let's put it in okay

1584
01:53:50,400 --> 01:53:56,040
like here and now when I go search for

1585
01:53:56,040 --> 01:53:57,900
uh Dot

1586
01:53:57,900 --> 01:54:02,159
I'm gonna replace that with Dot and uh

1587
01:54:02,159 --> 01:54:05,000
and enter

1588
01:54:07,139 --> 01:54:09,239
so we can see that we asked for Access

1589
01:54:09,239 --> 01:54:12,719
token what we got back was actually jwe

1590
01:54:12,719 --> 01:54:16,139
so encrypted stuff

1591
01:54:16,139 --> 01:54:18,179
and if I

1592
01:54:18,179 --> 01:54:20,940
open this one here

1593
01:54:20,940 --> 01:54:24,559
so we can see what's inside

1594
01:54:34,199 --> 01:54:36,920
so we can see that

1595
01:54:36,920 --> 01:54:40,500
it is well it's lying to us that it is

1596
01:54:40,500 --> 01:54:44,100
using GCM it is using CBC

1597
01:54:44,100 --> 01:54:46,500
but anyways we can see that this is a

1598
01:54:46,500 --> 01:54:48,480
gawe and the content of that is

1599
01:54:48,480 --> 01:54:50,520
encrypted so we can see the access token

1600
01:54:50,520 --> 01:54:53,639
and that's because the device is using

1601
01:54:53,639 --> 01:54:55,800
PRT to get that

1602
01:54:55,800 --> 01:54:58,260
so let's see if we if there's something

1603
01:54:58,260 --> 01:55:01,020
that we can do about that

1604
01:55:01,020 --> 01:55:05,040
so I'll go to device now

1605
01:55:05,040 --> 01:55:08,460
and because this is a virtual server a

1606
01:55:08,460 --> 01:55:14,219
virtual computer uh I I don't have a TPM

1607
01:55:14,219 --> 01:55:17,159
yeah which means that I can actually

1608
01:55:17,159 --> 01:55:19,580
export the keys

1609
01:55:19,580 --> 01:55:22,320
of this device so I can export the

1610
01:55:22,320 --> 01:55:24,559
device

1611
01:55:24,840 --> 01:55:27,840
here

1612
01:55:36,380 --> 01:55:41,300
as an admin to do this

1613
01:55:43,320 --> 01:55:46,280
oh let's try again

1614
01:56:00,060 --> 01:56:03,119
I like to use the ISD because I consume

1615
01:56:03,119 --> 01:56:05,159
that phone so it's easier for you to

1616
01:56:05,159 --> 01:56:07,460
read

1617
01:56:08,699 --> 01:56:10,980
oh

1618
01:56:10,980 --> 01:56:13,040
um

1619
01:56:26,719 --> 01:56:30,300
so what I'm actually doing here well two

1620
01:56:30,300 --> 01:56:32,159
things so first of all I can steal the

1621
01:56:32,159 --> 01:56:34,020
this device identity

1622
01:56:34,020 --> 01:56:36,420
but now I just want to get to the key

1623
01:56:36,420 --> 01:56:40,219
that I can decrypt the traffic

1624
01:56:46,020 --> 01:56:48,500
okay

1625
01:56:56,219 --> 01:57:00,260
so I export the certificate like that

1626
01:57:03,800 --> 01:57:06,239
and then the transport key which is the

1627
01:57:06,239 --> 01:57:08,040
most important one

1628
01:57:08,040 --> 01:57:11,600
so now I'm testing the copies

1629
01:57:11,699 --> 01:57:15,119
and copy that to that server we are

1630
01:57:15,119 --> 01:57:17,839
running filler

1631
01:57:18,900 --> 01:57:19,500
um

1632
01:57:19,500 --> 01:57:21,900
she's gonna put it here on the desktop

1633
01:57:21,900 --> 01:57:24,239
that's the good place for your keys

1634
01:57:24,239 --> 01:57:25,619
right

1635
01:57:25,619 --> 01:57:27,300
so

1636
01:57:27,300 --> 01:57:31,260
uh I'm gonna go to this get uh get key

1637
01:57:31,260 --> 01:57:35,159
data and I'm gonna switch to PRT and now

1638
01:57:35,159 --> 01:57:37,560
it it is asking which transfer key I

1639
01:57:37,560 --> 01:57:39,659
want to use and I I'm going to use the

1640
01:57:39,659 --> 01:57:43,739
one that we stored in desktop right

1641
01:57:43,739 --> 01:57:46,199
like that

1642
01:57:46,199 --> 01:57:47,580
and then

1643
01:57:47,580 --> 01:57:51,659
when I changed to whatever request that

1644
01:57:51,659 --> 01:57:54,540
has the session key

1645
01:57:54,540 --> 01:57:58,020
but here we go well I'll show you so we

1646
01:57:58,020 --> 01:58:03,719
have this SNP w e w j w e so this again

1647
01:58:03,719 --> 01:58:06,540
that encrypted stuff then now when I

1648
01:58:06,540 --> 01:58:09,480
have the key or I can decrypt that and

1649
01:58:09,480 --> 01:58:11,280
this is what this tool automatically

1650
01:58:11,280 --> 01:58:13,920
does so it shows that okay I found this

1651
01:58:13,920 --> 01:58:16,619
decrypted system key so if you want to

1652
01:58:16,619 --> 01:58:18,540
use that's just click the use and I'm

1653
01:58:18,540 --> 01:58:19,980
doing that

1654
01:58:19,980 --> 01:58:22,820
and now I am going to see these other

1655
01:58:22,820 --> 01:58:26,880
requests that are encrypted and I have

1656
01:58:26,880 --> 01:58:28,860
that system key I can now be equipped

1657
01:58:28,860 --> 01:58:29,699
that

1658
01:58:29,699 --> 01:58:32,460
so for instance I changed this one and

1659
01:58:32,460 --> 01:58:33,540
now

1660
01:58:33,540 --> 01:58:36,420
without this it would look like that

1661
01:58:36,420 --> 01:58:38,639
Json stuff

1662
01:58:38,639 --> 01:58:40,380
like

1663
01:58:40,380 --> 01:58:43,520
here so here's the encrypted stuff part

1664
01:58:43,520 --> 01:58:48,360
and now the tool can automatically

1665
01:58:48,360 --> 01:58:51,599
uh decrypt that so now we can see what

1666
01:58:51,599 --> 01:58:54,000
access token you actually have here

1667
01:58:54,000 --> 01:58:57,060
and we can see that it's a forcing again

1668
01:58:57,060 --> 01:58:59,580
uh we got reverse token and we have

1669
01:58:59,580 --> 01:59:02,460
access tokens and so on so so

1670
01:59:02,460 --> 01:59:03,060
um

1671
01:59:03,060 --> 01:59:05,340
this way you can now

1672
01:59:05,340 --> 01:59:07,080
start to learn what actually happens

1673
01:59:07,080 --> 01:59:09,659
between the device and and the Azure ID

1674
01:59:09,659 --> 01:59:11,820
so

1675
01:59:11,820 --> 01:59:13,260
so

1676
01:59:13,260 --> 01:59:16,800
yeah so that was the the first demo

1677
01:59:16,800 --> 01:59:19,860
related to that but now that's the

1678
01:59:19,860 --> 01:59:22,679
question sorry uh I will choose attack

1679
01:59:22,679 --> 01:59:26,119
that kind of like session

1680
01:59:26,119 --> 01:59:29,659
don't have anything or

1681
01:59:29,659 --> 01:59:32,280
you can detect that because that's the

1682
01:59:32,280 --> 01:59:34,320
latest way to do stuff so

1683
01:59:34,320 --> 01:59:37,679
so you can detect that because from

1684
01:59:37,679 --> 01:59:40,139
Azure ID point of view it's just another

1685
01:59:40,139 --> 01:59:43,460
normal request so

1686
01:59:44,159 --> 01:59:46,320
yeah so yeah

1687
01:59:46,320 --> 01:59:49,619
okay uh then uh

1688
01:59:49,619 --> 01:59:51,599
I will start another

1689
01:59:51,599 --> 01:59:52,580
uh

1690
01:59:52,580 --> 01:59:56,480
session of

1691
01:59:57,360 --> 01:59:59,480
the

1692
01:59:59,480 --> 02:00:02,400
puzzle and now I'm not an admin I'm just

1693
02:00:02,400 --> 02:00:05,179
a regular user

1694
02:00:09,780 --> 02:00:11,940
and I'm running this command now as a

1695
02:00:11,940 --> 02:00:14,280
user and because I'm locked in a

1696
02:00:14,280 --> 02:00:16,980
computer that is uh has already joined I

1697
02:00:16,980 --> 02:00:20,099
can I can get my well even though this

1698
02:00:20,099 --> 02:00:22,380
would be using TPM I couldn't get my

1699
02:00:22,380 --> 02:00:24,360
hands to that PRT

1700
02:00:24,360 --> 02:00:28,380
but because how windows Azure Windows

1701
02:00:28,380 --> 02:00:30,360
works with other edits and computers is

1702
02:00:30,360 --> 02:00:32,040
that you can ask from Windows that give

1703
02:00:32,040 --> 02:00:33,719
me PRP

1704
02:00:33,719 --> 02:00:35,820
so we can do that

1705
02:00:35,820 --> 02:00:39,080
so let's try

1706
02:00:44,639 --> 02:00:48,119
so I can just ask PRT token and it will

1707
02:00:48,119 --> 02:00:49,260
give it to me

1708
02:00:49,260 --> 02:00:52,380
because that's how Windows works so I'm

1709
02:00:52,380 --> 02:00:55,199
using the same method here than than for

1710
02:00:55,199 --> 02:00:57,780
instance Outlook is using to get a new

1711
02:00:57,780 --> 02:01:01,260
access token so if you are able to

1712
02:01:01,260 --> 02:01:03,000
compromise any user computer you can

1713
02:01:03,000 --> 02:01:07,520
just ask that PRT like this

1714
02:01:11,280 --> 02:01:13,080
and then you can use that to get access

1715
02:01:13,080 --> 02:01:16,940
tokens so here's an example

1716
02:01:26,159 --> 02:01:27,739
here

1717
02:01:27,739 --> 02:01:30,300
like this

1718
02:01:30,300 --> 02:01:32,460
well actually let's

1719
02:01:32,460 --> 02:01:38,179
use prte here so that's long nice

1720
02:01:38,580 --> 02:01:40,699
okay

1721
02:01:52,760 --> 02:01:55,320
and now when we dump this we can see

1722
02:01:55,320 --> 02:01:58,099
something interesting

1723
02:01:59,400 --> 02:02:03,480
so when we go to AMR we can see that

1724
02:02:03,480 --> 02:02:06,300
there's a password and RSA

1725
02:02:06,300 --> 02:02:09,239
so the RSA means that you I use PRT to

1726
02:02:09,239 --> 02:02:10,400
get that

1727
02:02:10,400 --> 02:02:16,380
and if I would have used uh MFA when I

1728
02:02:16,380 --> 02:02:18,300
logged in or joined this computer just

1729
02:02:18,300 --> 02:02:19,139
already

1730
02:02:19,139 --> 02:02:22,020
the MFA would be here too so you would

1731
02:02:22,020 --> 02:02:23,940
have an MFA claim

1732
02:02:23,940 --> 02:02:27,179
so this is an easy way to steal the

1733
02:02:27,179 --> 02:02:28,560
uh

1734
02:02:28,560 --> 02:02:30,780
token so

1735
02:02:30,780 --> 02:02:34,340
let's try this in another way

1736
02:02:47,000 --> 02:02:49,380
so let's see does it work so I copy the

1737
02:02:49,380 --> 02:02:51,239
PRT to clipboard and I'm going to use

1738
02:02:51,239 --> 02:02:54,619
that from another computer now

1739
02:02:55,020 --> 02:02:57,679
all right

1740
02:03:12,060 --> 02:03:15,920
and it seemed to work so

1741
02:03:15,960 --> 02:03:18,480
I just copied that and I was able to use

1742
02:03:18,480 --> 02:03:20,400
that so

1743
02:03:20,400 --> 02:03:24,000
this is a stealing tokens this is a fun

1744
02:03:24,000 --> 02:03:25,800
stuff

1745
02:03:25,800 --> 02:03:31,739
uh we have still a bit of time so

1746
02:03:32,119 --> 02:03:35,699
I'll try to show you something I I can't

1747
02:03:35,699 --> 02:03:37,679
remember by heart but let's see we can

1748
02:03:37,679 --> 02:03:39,480
do this together

1749
02:03:39,480 --> 02:03:42,199
so

1750
02:03:43,380 --> 02:03:46,080
I have that uh

1751
02:03:46,080 --> 02:03:47,760
key already

1752
02:03:47,760 --> 02:03:49,860
so I'm just gonna copy also the

1753
02:03:49,860 --> 02:03:52,699
certificate

1754
02:03:56,900 --> 02:04:00,739
to that server

1755
02:04:03,420 --> 02:04:04,739
like here

1756
02:04:04,739 --> 02:04:07,800
so when you have the certificate and

1757
02:04:07,800 --> 02:04:09,840
then you have that transport key you

1758
02:04:09,840 --> 02:04:11,820
actually have just stolen the identity

1759
02:04:11,820 --> 02:04:14,420
of that device

1760
02:04:16,880 --> 02:04:19,080
which means that you can get your own

1761
02:04:19,080 --> 02:04:22,739
prts using that as another user

1762
02:04:22,739 --> 02:04:24,840
sounds weird right let's see how this

1763
02:04:24,840 --> 02:04:27,199
goes

1764
02:04:46,139 --> 02:04:48,139
um

1765
02:04:49,880 --> 02:04:52,260
now when you need to remember the

1766
02:04:52,260 --> 02:04:55,760
commands I should use okay

1767
02:05:05,780 --> 02:05:09,500
yeah that was

1768
02:05:31,340 --> 02:05:33,119
yes so

1769
02:05:33,119 --> 02:05:35,159
and what I read now is that I'm gonna

1770
02:05:35,159 --> 02:05:39,500
get a PRT key so it has a certain

1771
02:05:39,500 --> 02:05:41,580
cryptographic material

1772
02:05:41,580 --> 02:05:43,739
and I can do that because I have the

1773
02:05:43,739 --> 02:05:45,840
both the device certificate and then

1774
02:05:45,840 --> 02:05:48,780
that transfer key and I can get this to

1775
02:05:48,780 --> 02:05:51,719
other users so I use that osteoma but

1776
02:05:51,719 --> 02:05:54,540
I'm now I'm gonna use some other user

1777
02:05:54,540 --> 02:05:57,260
perhaps

1778
02:06:16,920 --> 02:06:19,699
that's nice

1779
02:06:22,400 --> 02:06:24,080
okay

1780
02:06:24,080 --> 02:06:27,000
so this end group didn't finish so it

1781
02:06:27,000 --> 02:06:31,619
wants me to use MFA but I'm configured

1782
02:06:31,619 --> 02:06:33,119
this in a way that you can actually do

1783
02:06:33,119 --> 02:06:34,080
that so

1784
02:06:34,080 --> 02:06:36,540
I can't use show you the demo but

1785
02:06:36,540 --> 02:06:40,199
anyways after getting those PRT keys

1786
02:06:40,199 --> 02:06:41,880
uh

1787
02:06:41,880 --> 02:06:44,760
the access tokens that I would get with

1788
02:06:44,760 --> 02:06:48,239
that PRT would have the device ID but it

1789
02:06:48,239 --> 02:06:51,119
but because I worked in another user it

1790
02:06:51,119 --> 02:06:53,099
would be for another user

1791
02:06:53,099 --> 02:06:55,500
but anyways um if you're able to like

1792
02:06:55,500 --> 02:06:59,040
steal the the device identity and this

1793
02:06:59,040 --> 02:07:01,440
way to get access tokens

1794
02:07:01,440 --> 02:07:03,780
the as already things that you are using

1795
02:07:03,780 --> 02:07:05,760
that device which you are not using you

1796
02:07:05,760 --> 02:07:08,280
only have that certificate and key so

1797
02:07:08,280 --> 02:07:10,260
you kind of stole the identity and you

1798
02:07:10,260 --> 02:07:12,360
can pretend to be that device if that

1799
02:07:12,360 --> 02:07:14,159
device is compliant then all the access

1800
02:07:14,159 --> 02:07:18,480
tokens you uh use you get with that PRT

1801
02:07:18,480 --> 02:07:20,280
has already thinks that you are using

1802
02:07:20,280 --> 02:07:22,619
compliant device even that you are not

1803
02:07:22,619 --> 02:07:24,420
real

1804
02:07:24,420 --> 02:07:27,780
Okay so

1805
02:07:30,300 --> 02:07:34,679
uh I showed you the device code stuff uh

1806
02:07:34,679 --> 02:07:36,780
the PRT

1807
02:07:36,780 --> 02:07:39,599
how you can use that to if you are just

1808
02:07:39,599 --> 02:07:41,820
a normal user you can ask Windows to

1809
02:07:41,820 --> 02:07:45,179
give me PRT because that's how it works

1810
02:07:45,179 --> 02:07:48,780
and then I I showed you that how you can

1811
02:07:48,780 --> 02:07:51,900
now if you if you I want to you can see

1812
02:07:51,900 --> 02:07:53,880
what is happening between the has

1813
02:07:53,880 --> 02:07:56,099
already joined device and the the Azure

1814
02:07:56,099 --> 02:07:57,000
ready

1815
02:07:57,000 --> 02:07:59,820
with those uh piece

1816
02:07:59,820 --> 02:08:01,860
but

1817
02:08:01,860 --> 02:08:05,159
that was all I got planned for today

1818
02:08:05,159 --> 02:08:07,860
so if you have any questions you are

1819
02:08:07,860 --> 02:08:11,040
free to ask I'll be around here so if

1820
02:08:11,040 --> 02:08:14,280
you want to ask offline that's also okay

1821
02:08:14,280 --> 02:08:17,360
any questions now

1822
02:08:18,960 --> 02:08:22,159
okay thank you

1823
02:16:04,800 --> 02:16:07,760
let's see about this

1824
02:16:23,480 --> 02:16:27,360
all right so we're back

1825
02:16:27,360 --> 02:16:29,540
thank you so much for attending this

1826
02:16:29,540 --> 02:16:32,660
engineering Workshop in go language

1827
02:16:32,660 --> 02:16:34,459
my name is

1828
02:16:34,459 --> 02:16:37,500
and I work for dispersky and I'm a

1829
02:16:37,500 --> 02:16:39,299
reverse engineer slash diversity

1830
02:16:39,299 --> 02:16:41,760
researcher and the daily job that I do

1831
02:16:41,760 --> 02:16:45,379
is I investigate APD cases and write

1832
02:16:45,379 --> 02:16:48,299
reports on what we see and the types of

1833
02:16:48,299 --> 02:16:51,320
attack that's uh

1834
02:16:54,260 --> 02:16:56,730
out there

1835
02:16:56,730 --> 02:16:59,478
[Music]

1836
02:16:59,478 --> 02:17:03,619
of course my job and

1837
02:17:07,320 --> 02:17:09,978
something you've never seen before uh

1838
02:17:09,978 --> 02:17:12,299
for me

1839
02:17:12,299 --> 02:17:14,099
I

1840
02:17:14,099 --> 02:17:16,379
can't go

1841
02:17:16,379 --> 02:17:19,320
a long time well a few years ago now it

1842
02:17:19,320 --> 02:17:21,240
was something back then many people

1843
02:17:21,240 --> 02:17:23,398
thought that go was going to be the uh

1844
02:17:23,398 --> 02:17:26,760
number one uh language for malware the

1845
02:17:26,760 --> 02:17:29,040
future and so on there were kind of good

1846
02:17:29,040 --> 02:17:30,599
reasons to think it might become more

1847
02:17:30,599 --> 02:17:32,160
popular I think it might not have been

1848
02:17:32,160 --> 02:17:33,299
the case

1849
02:17:33,299 --> 02:17:36,240
but still it's something we see uh

1850
02:17:36,240 --> 02:17:39,179
occasionally from time to time and so

1851
02:17:39,179 --> 02:17:41,398
you can never rule out finding yourself

1852
02:17:41,398 --> 02:17:43,920
in a situation where eventually you were

1853
02:17:43,920 --> 02:17:45,299
you will have to reverse engineer

1854
02:17:45,299 --> 02:17:46,620
something that has been written in your

1855
02:17:46,620 --> 02:17:48,058
language

1856
02:17:48,058 --> 02:17:50,939
um and as such it's kind of a good idea

1857
02:17:50,939 --> 02:17:52,859
to at least have some general idea of

1858
02:17:52,859 --> 02:17:54,959
how to approach such binaries now

1859
02:17:54,959 --> 02:17:57,240
usually when that turns out to be the

1860
02:17:57,240 --> 02:17:58,799
case when you encounter a new language

1861
02:17:58,799 --> 02:18:01,138
if you are familiar with reverse

1862
02:18:01,138 --> 02:18:03,000
engineering C programs or C plus plus

1863
02:18:03,000 --> 02:18:05,280
programs you can kind of figure out how

1864
02:18:05,280 --> 02:18:06,718
to where to go from there and this

1865
02:18:06,718 --> 02:18:08,040
experience usually translates pretty

1866
02:18:08,040 --> 02:18:11,218
well to other languages if you know I've

1867
02:18:11,218 --> 02:18:13,740
seen reversing and probably Delphi is

1868
02:18:13,740 --> 02:18:15,478
moving too difficulty and C plus plus

1869
02:18:15,478 --> 02:18:17,700
and rust most likely you'll be able to

1870
02:18:17,700 --> 02:18:20,939
get into it but go tends to be sort of

1871
02:18:20,939 --> 02:18:22,439
its own thing

1872
02:18:22,439 --> 02:18:23,879
so

1873
02:18:23,879 --> 02:18:27,478
um I have noticed that among my peers uh

1874
02:18:27,478 --> 02:18:30,959
direct co-workers and even further uh in

1875
02:18:30,959 --> 02:18:32,760
the industry a lot of people were sort

1876
02:18:32,760 --> 02:18:35,340
of scared that it might not be a correct

1877
02:18:35,340 --> 02:18:36,898
word but some people were kind of really

1878
02:18:36,898 --> 02:18:39,780
reluctant to look into program written a

1879
02:18:39,780 --> 02:18:41,218
little language they would be like okay

1880
02:18:41,218 --> 02:18:43,558
I have this new power it's ready to go

1881
02:18:43,558 --> 02:18:45,478
so maybe I will look at it next year

1882
02:18:45,478 --> 02:18:47,340
when I have some time so did you put it

1883
02:18:47,340 --> 02:18:49,200
away and never have to look at it ever

1884
02:18:49,200 --> 02:18:51,240
again so

1885
02:18:51,240 --> 02:18:54,120
I mean I understand this because having

1886
02:18:54,120 --> 02:18:56,760
to look at go it really means adding to

1887
02:18:56,760 --> 02:18:58,679
acquire some sort of immune skills but

1888
02:18:58,679 --> 02:19:01,138
at the same time I promise you that go

1889
02:19:01,138 --> 02:19:03,000
turns out to be a language that I think

1890
02:19:03,000 --> 02:19:04,620
is fairly easy to reverse engineer and

1891
02:19:04,620 --> 02:19:08,879
in fact much more uh much more enjoyable

1892
02:19:08,879 --> 02:19:11,398
than languages like C plus plus that's

1893
02:19:11,398 --> 02:19:13,740
in my opinion so I mean we will be able

1894
02:19:13,740 --> 02:19:15,120
to talk about this in a little bit but

1895
02:19:15,120 --> 02:19:17,519
although the entry ticket is a little

1896
02:19:17,519 --> 02:19:19,320
bit expensive when it comes to go

1897
02:19:19,320 --> 02:19:21,420
because you have to learn new things

1898
02:19:21,420 --> 02:19:23,218
that you might have not learned before

1899
02:19:23,218 --> 02:19:25,799
or that you might not be aware of as as

1900
02:19:25,799 --> 02:19:28,859
soon as you get this uh entry-level

1901
02:19:28,859 --> 02:19:30,780
knowledge about the language and about

1902
02:19:30,780 --> 02:19:33,000
the way that the compiler sorts out

1903
02:19:33,000 --> 02:19:34,500
things it's like binaries then I think

1904
02:19:34,500 --> 02:19:36,840
you'll probably do very fine

1905
02:19:36,840 --> 02:19:38,160
so

1906
02:19:38,160 --> 02:19:41,398
let us talk a little bit about this uh

1907
02:19:41,398 --> 02:19:44,879
Workshop what we're going to do is talk

1908
02:19:44,879 --> 02:19:47,519
first of all about a bit of theory and

1909
02:19:47,519 --> 02:19:49,620
then it's going to be mostly a practical

1910
02:19:49,620 --> 02:19:54,540
tutorials usually when I work on a new

1911
02:19:54,540 --> 02:19:57,060
language I don't really like to look

1912
02:19:57,060 --> 02:19:59,399
into the syntax or the specifics of it

1913
02:19:59,399 --> 02:20:02,399
and the reason for this is that you know

1914
02:20:02,399 --> 02:20:03,920
there are so many languages out there

1915
02:20:03,920 --> 02:20:06,540
you really don't need slash phone to

1916
02:20:06,540 --> 02:20:08,580
become an expert in all of them and most

1917
02:20:08,580 --> 02:20:10,560
of the time as I mentioned earlier they

1918
02:20:10,560 --> 02:20:12,540
really don't need to anyway like if you

1919
02:20:12,540 --> 02:20:14,760
get a program written in I don't know

1920
02:20:14,760 --> 02:20:17,340
whatever new combined language out there

1921
02:20:17,340 --> 02:20:19,320
odds are that if you just look at it and

1922
02:20:19,320 --> 02:20:21,420
either decompile it and look at the

1923
02:20:21,420 --> 02:20:23,640
assembly if you know C or C plus plus

1924
02:20:23,640 --> 02:20:24,960
you will be able to figure things out so

1925
02:20:24,960 --> 02:20:26,939
you don't have to think about the way

1926
02:20:26,939 --> 02:20:28,800
that you don't have to learn the syntax

1927
02:20:28,800 --> 02:20:30,359
of that programming language you don't

1928
02:20:30,359 --> 02:20:31,979
have to think about the programming

1929
02:20:31,979 --> 02:20:33,180
Concepts because at the end of the day

1930
02:20:33,180 --> 02:20:35,280
there are always going to be traditional

1931
02:20:35,280 --> 02:20:37,080
oop or stuff like this

1932
02:20:37,080 --> 02:20:41,040
but I'm lost to admit that though turns

1933
02:20:41,040 --> 02:20:43,020
out to be sort of different enough for

1934
02:20:43,020 --> 02:20:44,939
from other languages that we won't

1935
02:20:44,939 --> 02:20:47,100
really be able to escape this so one of

1936
02:20:47,100 --> 02:20:48,540
the first things that we will be doing

1937
02:20:48,540 --> 02:20:50,580
in this tutorial is we will look at

1938
02:20:50,580 --> 02:20:52,680
simple go programs and we will study the

1939
02:20:52,680 --> 02:20:54,660
generated code

1940
02:20:54,660 --> 02:20:56,220
um this is actually a general

1941
02:20:56,220 --> 02:20:58,200
methodology that I tend to use whenever

1942
02:20:58,200 --> 02:21:00,479
I want to go into a new programming

1943
02:21:00,479 --> 02:21:02,819
language or a new programming language

1944
02:21:02,819 --> 02:21:04,380
reverse engineer which is I just

1945
02:21:04,380 --> 02:21:06,240
generate some hello worlds and modify

1946
02:21:06,240 --> 02:21:08,100
them a little bit and then figure out

1947
02:21:08,100 --> 02:21:10,380
exactly how this source code translated

1948
02:21:10,380 --> 02:21:16,220
to how it translates into the a binary

1949
02:21:19,080 --> 02:21:23,280
maybe uh why is that important well

1950
02:21:23,280 --> 02:21:25,620
we thought it would become more and more

1951
02:21:25,620 --> 02:21:29,220
used by uh malware authors I think it's

1952
02:21:29,220 --> 02:21:31,319
somewhat true also somewhat somewhat not

1953
02:21:31,319 --> 02:21:33,899
too uh two days ago maybe three days ago

1954
02:21:33,899 --> 02:21:38,160
now I think there was a an article from

1955
02:21:38,160 --> 02:21:40,439
it was an immediate blog post I don't

1956
02:21:40,439 --> 02:21:41,819
recall exactly who wrote it but it was

1957
02:21:41,819 --> 02:21:46,979
about a kimsuki malware Alpha something

1958
02:21:46,979 --> 02:21:49,920
I don't recall the name exactly but they

1959
02:21:49,920 --> 02:21:52,620
this group actually developed a dual

1960
02:21:52,620 --> 02:21:55,200
equivalent of their main malware family

1961
02:21:55,200 --> 02:21:57,420
actually I was really thinking of using

1962
02:21:57,420 --> 02:21:59,280
this one for this tutorial like because

1963
02:21:59,280 --> 02:22:00,540
it's something quite new but

1964
02:22:00,540 --> 02:22:02,640
unfortunately it's protected with the

1965
02:22:02,640 --> 02:22:04,800
unprotected so it's kind of not suitable

1966
02:22:04,800 --> 02:22:07,260
for what we want to be doing there but I

1967
02:22:07,260 --> 02:22:11,720
mean go tend to show up here and there

1968
02:22:11,720 --> 02:22:14,580
but it's not really

1969
02:22:14,580 --> 02:22:16,500
it's not really prevalent or not as

1970
02:22:16,500 --> 02:22:18,180
prevalent as we thought it would be

1971
02:22:18,180 --> 02:22:19,500
initial

1972
02:22:19,500 --> 02:22:22,939
um one of the reasons

