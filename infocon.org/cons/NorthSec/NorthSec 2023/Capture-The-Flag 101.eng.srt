1
00:00:00,000 --> 00:00:02,220
again you know I use the specific

2
00:00:02,220 --> 00:00:04,380
environment and it's all the same

3
00:00:04,380 --> 00:00:06,120
concept but it's just a little bit

4
00:00:06,120 --> 00:00:07,859
different like permissions are a little

5
00:00:07,859 --> 00:00:09,480
bit different using a different client

6
00:00:09,480 --> 00:00:13,200
might behave differently and so on okay

7
00:00:13,200 --> 00:00:17,820
SSH tunneling is a whole other Beast

8
00:00:17,820 --> 00:00:20,699
I'm gonna do a diagram

9
00:00:20,699 --> 00:00:23,699
which is gonna be super ugly

10
00:00:23,699 --> 00:00:28,519
but I hope will make my point across

11
00:00:29,420 --> 00:00:34,099
I'm looking for something that can draw

12
00:00:34,920 --> 00:00:37,460
okay

13
00:00:39,860 --> 00:00:41,579
so

14
00:00:41,579 --> 00:00:47,460
are the system we are connecting to is

15
00:00:47,460 --> 00:00:49,620
on the internet

16
00:00:49,620 --> 00:00:55,339
this is our client over here

17
00:00:55,800 --> 00:00:57,719
there's probably better tools that I

18
00:00:57,719 --> 00:00:59,460
could use

19
00:00:59,460 --> 00:01:02,340
um and let's read the description of our

20
00:01:02,340 --> 00:01:05,400
Challenge from the pivot box machine so

21
00:01:05,400 --> 00:01:07,619
what what machine are they talking about

22
00:01:07,619 --> 00:01:10,500
oh we acquired it in the SSH China

23
00:01:10,500 --> 00:01:14,159
Challenge so we are reusing something we

24
00:01:14,159 --> 00:01:17,460
got access to previously you can reach a

25
00:01:17,460 --> 00:01:21,180
service that spits out a secret

26
00:01:21,180 --> 00:01:25,860
however pivot box lacks many tools like

27
00:01:25,860 --> 00:01:29,159
NC or socap maybe we should learn to use

28
00:01:29,159 --> 00:01:32,340
SSH tunnels to reach that service the

29
00:01:32,340 --> 00:01:35,040
service is app CIS and Men Dash service

30
00:01:35,040 --> 00:01:37,320
on Port 5555

31
00:01:37,320 --> 00:01:38,520
so

32
00:01:38,520 --> 00:01:41,579
if we would diagram this it basically

33
00:01:41,579 --> 00:01:44,460
would look like this so our

34
00:01:44,460 --> 00:01:50,119
system men service let's call it SS

35
00:01:50,340 --> 00:01:54,420
is behind a wall right it's not

36
00:01:54,420 --> 00:01:57,479
reachable directly from our laptop so

37
00:01:57,479 --> 00:01:58,860
there's no way

38
00:01:58,860 --> 00:02:02,579
to do this so that doesn't work that

39
00:02:02,579 --> 00:02:04,020
doesn't work

40
00:02:04,020 --> 00:02:05,340
now

41
00:02:05,340 --> 00:02:08,699
um and apparently from SSH we don't have

42
00:02:08,699 --> 00:02:11,580
the the the the tools necessary to be

43
00:02:11,580 --> 00:02:14,340
able to poke directly the the service

44
00:02:14,340 --> 00:02:16,680
let's try you know you never should take

45
00:02:16,680 --> 00:02:18,540
the hint for granted or the description

46
00:02:18,540 --> 00:02:21,480
program test let's try okay

47
00:02:21,480 --> 00:02:25,500
usually for a plain text service you use

48
00:02:25,500 --> 00:02:29,040
um netcat or curl or whatever

49
00:02:29,040 --> 00:02:31,260
and we can try

50
00:02:31,260 --> 00:02:34,260
that or we can try ping this admin

51
00:02:34,260 --> 00:02:37,020
service so now we will not oh I don't

52
00:02:37,020 --> 00:02:40,200
even have ping on the system uh can I

53
00:02:40,200 --> 00:02:41,640
install

54
00:02:41,640 --> 00:02:43,019
ping

55
00:02:43,019 --> 00:02:44,879
oh I don't have permission to install

56
00:02:44,879 --> 00:02:47,340
software so I could maybe upload

57
00:02:47,340 --> 00:02:49,440
software that could be a way to solve

58
00:02:49,440 --> 00:02:51,599
that challenge but clearly in my

59
00:02:51,599 --> 00:02:53,220
description this is not what I want you

60
00:02:53,220 --> 00:02:55,860
to learn here so we're not gonna do that

61
00:02:55,860 --> 00:02:59,580
but then I can try Okay do I have curl I

62
00:02:59,580 --> 00:03:01,980
don't have curl so curl with is a is a

63
00:03:01,980 --> 00:03:05,940
HTTP client uh I do I have netcat I

64
00:03:05,940 --> 00:03:08,640
don't have net cat I have W get I have W

65
00:03:08,640 --> 00:03:10,860
get so maybe this could work

66
00:03:10,860 --> 00:03:12,780
but again you know the role of the

67
00:03:12,780 --> 00:03:15,440
challenge let's try

68
00:03:18,900 --> 00:03:21,379
no

69
00:03:22,080 --> 00:03:25,739
no no no uh

70
00:03:48,690 --> 00:03:52,728
[Music]

71
00:04:03,599 --> 00:04:05,599
um

72
00:04:11,400 --> 00:04:14,099
okay it works now so the service was

73
00:04:14,099 --> 00:04:16,918
down but I I brought it up so if it was

74
00:04:16,918 --> 00:04:18,720
down it means that it's easy it's it's

75
00:04:18,720 --> 00:04:21,238
fragile so let's be kind with the

76
00:04:21,238 --> 00:04:23,639
service but if if it's ever down again

77
00:04:23,639 --> 00:04:27,600
just let me know we'll restart it so I I

78
00:04:27,600 --> 00:04:32,220
it it worked ish but I couldn't

79
00:04:32,220 --> 00:04:34,800
um uh write the files or permission the

80
00:04:34,800 --> 00:04:37,080
night so clearly again this is not the

81
00:04:37,080 --> 00:04:39,660
way but basically what I want to add

82
00:04:39,660 --> 00:04:41,880
here is that even though we have

83
00:04:41,880 --> 00:04:46,020
presence here we cannot try to reach the

84
00:04:46,020 --> 00:04:48,660
service this way so that does not work

85
00:04:48,660 --> 00:04:51,900
here we don't have sufficient access but

86
00:04:51,900 --> 00:04:53,520
so this is where

87
00:04:53,520 --> 00:04:59,040
tunneling or pivoting kicks in we can

88
00:04:59,040 --> 00:05:03,120
use SSH as a tunnel

89
00:05:03,120 --> 00:05:09,560
okay so this basically is a tunnel

90
00:05:10,500 --> 00:05:14,520
to reach the other system on the other

91
00:05:14,520 --> 00:05:17,639
side of it so the connecting to SSH

92
00:05:17,639 --> 00:05:21,720
regularly we build the tunnel and we

93
00:05:21,720 --> 00:05:24,539
tell the tunnel when a packet arrives

94
00:05:24,539 --> 00:05:28,620
here we want you to send it there on the

95
00:05:28,620 --> 00:05:30,720
other end of that tunnel so we're gonna

96
00:05:30,720 --> 00:05:33,060
write an SSA a fanciest State command

97
00:05:33,060 --> 00:05:35,400
that will do that it will go in the

98
00:05:35,400 --> 00:05:38,039
tunnel and we go out the tunnel so this

99
00:05:38,039 --> 00:05:41,280
is where it has reach to the other

100
00:05:41,280 --> 00:05:42,479
network

101
00:05:42,479 --> 00:05:45,479
uh well this is getting confusing but

102
00:05:45,479 --> 00:05:49,020
and it will like come out and be able to

103
00:05:49,020 --> 00:05:54,180
reach the the other system now

104
00:05:54,180 --> 00:05:59,280
in uh SSH language uh this is called uh

105
00:05:59,280 --> 00:06:03,060
SSH uh tunneling but uh specifically a

106
00:06:03,060 --> 00:06:04,800
local forward

107
00:06:04,800 --> 00:06:07,139
local port forwarding

108
00:06:07,139 --> 00:06:10,139
so now we can you know Google it

109
00:06:10,139 --> 00:06:12,199
um

110
00:06:12,780 --> 00:06:16,080
and just you know we don't care about

111
00:06:16,080 --> 00:06:17,759
the concept we want the command oh yeah

112
00:06:17,759 --> 00:06:19,259
the command is here

113
00:06:19,259 --> 00:06:20,820
I explained the concept that's why I'm

114
00:06:20,820 --> 00:06:24,300
skipping ahead but so Dash capital l

115
00:06:24,300 --> 00:06:27,900
local IP but it's optional local Port

116
00:06:27,900 --> 00:06:31,020
mandatory destination and destination

117
00:06:31,020 --> 00:06:33,240
Port luckily

118
00:06:33,240 --> 00:06:36,240
we have all that in our challenge

119
00:06:36,240 --> 00:06:37,620
description

120
00:06:37,620 --> 00:06:39,660
so

121
00:06:39,660 --> 00:06:42,720
we disconnect this is important we're

122
00:06:42,720 --> 00:06:45,120
tunneling through that system so we're

123
00:06:45,120 --> 00:06:48,479
not gonna do that on that system so we

124
00:06:48,479 --> 00:06:51,479
disconnect we reuse our previous command

125
00:06:51,479 --> 00:06:53,280
because we need to authenticate to the

126
00:06:53,280 --> 00:06:55,560
service with the same user and the same

127
00:06:55,560 --> 00:06:58,259
port and the same key but we're gonna

128
00:06:58,259 --> 00:07:01,819
add the the the forwarding

129
00:07:01,819 --> 00:07:04,560
characteristics so

130
00:07:04,560 --> 00:07:06,600
destination Port if we look at the

131
00:07:06,600 --> 00:07:08,759
challenge description

132
00:07:08,759 --> 00:07:12,300
is 5555 so we have it like the the

133
00:07:12,300 --> 00:07:15,120
service that we're trying to have spit

134
00:07:15,120 --> 00:07:17,940
out a secret is running at 555 so let's

135
00:07:17,940 --> 00:07:20,360
do that

136
00:07:21,539 --> 00:07:25,800
five five five five the destination

137
00:07:25,800 --> 00:07:27,900
is the name

138
00:07:27,900 --> 00:07:32,400
so here we uh Docker is kind with us it

139
00:07:32,400 --> 00:07:35,460
provides DNS so we're not using raw IPS

140
00:07:35,460 --> 00:07:38,880
we're using uh names so we put that in

141
00:07:38,880 --> 00:07:41,220
here and then the local code is pretty

142
00:07:41,220 --> 00:07:43,500
much at our this question

143
00:07:43,500 --> 00:07:47,039
I like to use one two three four five

144
00:07:47,039 --> 00:07:49,199
easy to remember

145
00:07:49,199 --> 00:07:52,199
and then the local IP is if you need to

146
00:07:52,199 --> 00:07:55,080
bind to something else then localhost

147
00:07:55,080 --> 00:07:59,220
but we don't need to do that

148
00:07:59,220 --> 00:08:02,280
so I had SSH two times here so I need to

149
00:08:02,280 --> 00:08:04,560
remove the extra one okay so now we are

150
00:08:04,560 --> 00:08:07,259
doing SSH we're specifying that we want

151
00:08:07,259 --> 00:08:09,900
to do a local forward so from we're

152
00:08:09,900 --> 00:08:12,960
building the tunnel from our machine to

153
00:08:12,960 --> 00:08:18,800
the uh pivot box system uh on CTF 101

154
00:08:18,800 --> 00:08:21,599
which means that the end of the tunnel

155
00:08:21,599 --> 00:08:23,900
will be on the other side of that system

156
00:08:23,900 --> 00:08:27,240
and here we're saying with the other

157
00:08:27,240 --> 00:08:30,599
side of the tunnel or the system should

158
00:08:30,599 --> 00:08:34,320
reach to system Min Dash service on Port

159
00:08:34,320 --> 00:08:35,820
55555

160
00:08:35,820 --> 00:08:38,539
so going back to the diagram

161
00:08:38,539 --> 00:08:43,500
this the command is building this let's

162
00:08:43,500 --> 00:08:45,540
use another color the command is

163
00:08:45,540 --> 00:08:50,160
building this portion here

164
00:08:50,160 --> 00:08:53,420
with the specific intention of sending

165
00:08:53,420 --> 00:08:57,319
to that system

166
00:08:58,920 --> 00:09:01,260
now another thing that people might be

167
00:09:01,260 --> 00:09:05,279
surprised uh when they

168
00:09:05,279 --> 00:09:07,920
um they run a command like that is that

169
00:09:07,920 --> 00:09:11,220
we will still get our prom we are still

170
00:09:11,220 --> 00:09:13,380
connected on pivot box and this is why

171
00:09:13,380 --> 00:09:17,880
the reason is SSH has channels and we

172
00:09:17,880 --> 00:09:20,880
still requested a command Channel but we

173
00:09:20,880 --> 00:09:23,640
added the tunneling channel on top of

174
00:09:23,640 --> 00:09:26,820
the command Channel by default we could

175
00:09:26,820 --> 00:09:29,940
add a flag that will not require a

176
00:09:29,940 --> 00:09:32,100
command Channel but it's just

177
00:09:32,100 --> 00:09:34,380
not necessary but what's

178
00:09:34,380 --> 00:09:36,540
counterintuitive about what we just did

179
00:09:36,540 --> 00:09:39,420
is that the next step needs to happen on

180
00:09:39,420 --> 00:09:44,040
my local system not on the the uh the

181
00:09:44,040 --> 00:09:46,500
pivot box system so I need to open a new

182
00:09:46,500 --> 00:09:49,019
terminal in my case I'm going to split

183
00:09:49,019 --> 00:09:52,700
my screen so that you see

184
00:09:52,700 --> 00:09:55,800
and uh but so

185
00:09:55,800 --> 00:09:59,160
the the the next command is I want to

186
00:09:59,160 --> 00:10:01,860
send that that packet right I want to

187
00:10:01,860 --> 00:10:03,779
reach

188
00:10:03,779 --> 00:10:06,540
the the the the the end game here on

189
00:10:06,540 --> 00:10:09,839
Port 5555 so

190
00:10:09,839 --> 00:10:13,140
to do so I'm gonna use uh net cap

191
00:10:13,140 --> 00:10:16,380
now the tunnel is from my machine to

192
00:10:16,380 --> 00:10:20,480
this service so I used 175

193
00:10:20,480 --> 00:10:25,080
127.0.0.1 or localhost and I chose to

194
00:10:25,080 --> 00:10:27,779
use port1235

195
00:10:27,779 --> 00:10:29,640
uh four five sorry one two three four

196
00:10:29,640 --> 00:10:32,160
five and so now what will happen if I do

197
00:10:32,160 --> 00:10:33,380
that

198
00:10:33,380 --> 00:10:36,779
congratulations I pivoted so my local

199
00:10:36,779 --> 00:10:39,600
packets were sent to the destination

200
00:10:39,600 --> 00:10:42,839
that we specified in the SSH tunnel that

201
00:10:42,839 --> 00:10:46,620
service is just a kind

202
00:10:46,620 --> 00:10:51,120
person that uh gives the the flag uh on

203
00:10:51,120 --> 00:10:54,180
first hit but then you know in the real

204
00:10:54,180 --> 00:10:56,760
CTF The Twist is that you'll have to

205
00:10:56,760 --> 00:10:58,320
exploit that service or do something

206
00:10:58,320 --> 00:11:00,959
more to that service but the pivoting

207
00:11:00,959 --> 00:11:02,880
concepts remain and they are really

208
00:11:02,880 --> 00:11:04,500
important

209
00:11:04,500 --> 00:11:06,060
so

210
00:11:06,060 --> 00:11:09,600
we're gonna copy this

211
00:11:09,600 --> 00:11:12,660
put that here

212
00:11:12,660 --> 00:11:14,880
submit and

213
00:11:14,880 --> 00:11:16,920
we won

214
00:11:16,920 --> 00:11:19,519
good

215
00:11:19,680 --> 00:11:22,800
now could have we done this via directly

216
00:11:22,800 --> 00:11:25,079
via the machine did you guys figure out

217
00:11:25,079 --> 00:11:27,660
from paper box how did you do it

218
00:11:27,660 --> 00:11:29,959
yeah

219
00:11:30,000 --> 00:11:32,100
three example standard out okay that

220
00:11:32,100 --> 00:11:34,200
that that's a cool one so let's do that

221
00:11:34,200 --> 00:11:36,420
so I was asking because I knew they

222
00:11:36,420 --> 00:11:39,120
would bypass the the Restriction of the

223
00:11:39,120 --> 00:11:40,980
challenge so let's just do that for fun

224
00:11:40,980 --> 00:11:44,220
right so assistant man service and then

225
00:11:44,220 --> 00:11:46,860
since this is a URL now the port is not

226
00:11:46,860 --> 00:11:49,560
a different parameter it's part of the

227
00:11:49,560 --> 00:11:51,320
URL

228
00:11:51,320 --> 00:11:54,779
and since HTTP is a text based protocol

229
00:11:54,779 --> 00:11:57,779
and my flag is text it's gonna it's

230
00:11:57,779 --> 00:11:59,820
gonna work it's gonna spit it out but

231
00:11:59,820 --> 00:12:02,339
now the previous error we got is it

232
00:12:02,339 --> 00:12:04,980
tried to write to the file system but

233
00:12:04,980 --> 00:12:07,320
the file system is unwritable by

234
00:12:07,320 --> 00:12:09,120
definition I didn't want you to copy

235
00:12:09,120 --> 00:12:11,940
executables

236
00:12:11,940 --> 00:12:15,720
um so what uh Vanessa just do that to

237
00:12:15,720 --> 00:12:18,420
work around is okay but wget you can

238
00:12:18,420 --> 00:12:21,300
tell it to instead of write a file to

239
00:12:21,300 --> 00:12:24,720
show the file to show their content so

240
00:12:24,720 --> 00:12:28,079
this is capital O for output and then uh

241
00:12:28,079 --> 00:12:30,060
this would by default try to write to a

242
00:12:30,060 --> 00:12:32,160
file but we're not we can't so we're

243
00:12:32,160 --> 00:12:35,760
gonna use Dash Dash is like Linux lingo

244
00:12:35,760 --> 00:12:38,700
or Linux standard of saying it's

245
00:12:38,700 --> 00:12:42,899
standard out so the console so with this

246
00:12:42,899 --> 00:12:45,899
okay

247
00:12:46,380 --> 00:12:49,200
so with this what we have is you know

248
00:12:49,200 --> 00:12:52,260
you see that it tried to do HTTP you see

249
00:12:52,260 --> 00:12:53,820
that there's something wrong because

250
00:12:53,820 --> 00:12:56,339
it's no headers and it's assuming a

251
00:12:56,339 --> 00:12:59,820
super old version of HTTP but still you

252
00:12:59,820 --> 00:13:03,240
know we got somewhat mingled we still

253
00:13:03,240 --> 00:13:05,760
got enough of the flag to be able to win

254
00:13:05,760 --> 00:13:08,160
the challenge so this would be a bypass

255
00:13:08,160 --> 00:13:11,220
of the challenge and it's totally legit

256
00:13:11,220 --> 00:13:14,339
in CTS right we try to put restriction

257
00:13:14,339 --> 00:13:16,320
we try to send you in a Direction but

258
00:13:16,320 --> 00:13:19,019
you can do whatever you want uh there's

259
00:13:19,019 --> 00:13:21,500
no problem

260
00:13:21,540 --> 00:13:24,600
okay so moving on so now it's really

261
00:13:24,600 --> 00:13:28,139
shifting categories of challenge here uh

262
00:13:28,139 --> 00:13:30,540
but these are are the web challenges

263
00:13:30,540 --> 00:13:32,579
they're they're fairly approachable and

264
00:13:32,579 --> 00:13:34,860
interesting uh but the assistant admin

265
00:13:34,860 --> 00:13:37,079
is kind of the base layer you know

266
00:13:37,079 --> 00:13:38,880
necessary

267
00:13:38,880 --> 00:13:42,480
for more infrastructure or uh you know

268
00:13:42,480 --> 00:13:45,240
type cdfs so

269
00:13:45,240 --> 00:13:48,260
the source

270
00:13:48,540 --> 00:13:50,820
so here the challenge says use the

271
00:13:50,820 --> 00:13:53,339
source look uh set of thousand challenge

272
00:13:53,339 --> 00:13:55,680
designers before me and there's a

273
00:13:55,680 --> 00:13:58,260
website so we're gonna open the website

274
00:13:58,260 --> 00:14:01,260
take a look ah there's a username and

275
00:14:01,260 --> 00:14:03,899
password I'm not sure what to do but

276
00:14:03,899 --> 00:14:06,600
I'll take the hint

277
00:14:06,600 --> 00:14:08,220
and

278
00:14:08,220 --> 00:14:12,079
um and do a view source

279
00:14:12,540 --> 00:14:15,540
foreign

280
00:14:22,200 --> 00:14:24,839
okay so what we have here is in the

281
00:14:24,839 --> 00:14:27,540
source so we did view Source we have to

282
00:14:27,540 --> 00:14:31,860
do disable the support account and then

283
00:14:31,860 --> 00:14:33,779
um the support account if needed support

284
00:14:33,779 --> 00:14:35,459
the account is with the username and

285
00:14:35,459 --> 00:14:38,579
password so basically this is a HTML

286
00:14:38,579 --> 00:14:40,860
code to say you know it's a comment

287
00:14:40,860 --> 00:14:43,620
don't display it

288
00:14:43,620 --> 00:14:45,300
um and

289
00:14:45,300 --> 00:14:46,339
um

290
00:14:46,339 --> 00:14:49,560
I saw so this is pretty much in our face

291
00:14:49,560 --> 00:14:51,480
right we know like we need to you know

292
00:14:51,480 --> 00:14:54,360
copy this in the page uh we're gonna do

293
00:14:54,360 --> 00:14:56,880
this in just a second but before I I go

294
00:14:56,880 --> 00:14:58,500
there I want to talk to you about the

295
00:14:58,500 --> 00:15:00,060
Twist on a challenge like that that I've

296
00:15:00,060 --> 00:15:02,040
seen and and just put you in the mindset

297
00:15:02,040 --> 00:15:05,940
of CTF solving but um I've I've seen a

298
00:15:05,940 --> 00:15:08,100
challenge like this that there were

299
00:15:08,100 --> 00:15:10,860
empty lines at the bottom and the the

300
00:15:10,860 --> 00:15:15,540
real flag was just 12 000 lines below so

301
00:15:15,540 --> 00:15:16,980
the only thing that was different is

302
00:15:16,980 --> 00:15:19,079
that there was a scroll bar on the side

303
00:15:19,079 --> 00:15:21,660
so sometimes it's really in your face

304
00:15:21,660 --> 00:15:23,880
right you need to think about it or you

305
00:15:23,880 --> 00:15:26,160
need to do a Ctrl F and then search for

306
00:15:26,160 --> 00:15:29,399
plug or whatever

307
00:15:29,399 --> 00:15:30,180
um

308
00:15:30,180 --> 00:15:33,660
now uh the username and password so it's

309
00:15:33,660 --> 00:15:37,860
welcome to we can close that so support

310
00:15:37,860 --> 00:15:41,339
welcome to and again hidden account

311
00:15:41,339 --> 00:15:43,920
activated here is your flag so we got

312
00:15:43,920 --> 00:15:46,399
this

313
00:15:50,160 --> 00:15:54,440
paste that here here we go yay

314
00:15:54,440 --> 00:15:57,779
SQL so things are getting spicier but I

315
00:15:57,779 --> 00:16:01,160
see many salts so that's good

316
00:16:03,120 --> 00:16:06,600
okay SQL injection

317
00:16:06,600 --> 00:16:09,500
is

318
00:16:11,820 --> 00:16:16,019
it uh it's uh so if you're a programmer

319
00:16:16,019 --> 00:16:18,060
it's kind of obvious but if you're not

320
00:16:18,060 --> 00:16:20,880
this is more difficult but so

321
00:16:20,880 --> 00:16:25,740
the why is SQL injection so pervasive

322
00:16:25,740 --> 00:16:28,040
it's because

323
00:16:28,040 --> 00:16:30,899
data is mixed with code

324
00:16:30,899 --> 00:16:32,339
together

325
00:16:32,339 --> 00:16:35,040
thrown into an interpreter that is the

326
00:16:35,040 --> 00:16:38,759
SQL engine and when that is done you

327
00:16:38,759 --> 00:16:41,040
know uh there's there's all sorts of

328
00:16:41,040 --> 00:16:43,320
bypasses to be able to access that

329
00:16:43,320 --> 00:16:46,560
information so

330
00:16:46,680 --> 00:16:49,980
if I uh and so this challenge is

331
00:16:49,980 --> 00:16:52,259
instructive and it is a one-on-one

332
00:16:52,259 --> 00:16:55,079
challenge because it shows you that code

333
00:16:55,079 --> 00:16:57,899
so what's happening is so SQL is

334
00:16:57,899 --> 00:16:59,699
structured query language and it's to

335
00:16:59,699 --> 00:17:03,319
ask questions to a database

336
00:17:04,020 --> 00:17:07,020
foreign

337
00:17:14,959 --> 00:17:19,559
usually all SQL queries return

338
00:17:19,559 --> 00:17:23,699
a user not a user uh columns and values

339
00:17:23,699 --> 00:17:25,919
okay so rows and columns it's a table

340
00:17:25,919 --> 00:17:27,299
basically

341
00:17:27,299 --> 00:17:30,179
in most queries and

342
00:17:30,179 --> 00:17:33,900
um the um we see that query here so this

343
00:17:33,900 --> 00:17:35,700
is not a regular thing right this is

344
00:17:35,700 --> 00:17:38,160
special purpose made but you can also

345
00:17:38,160 --> 00:17:40,860
think that whenever you're trying you

346
00:17:40,860 --> 00:17:42,780
think you have a real and SPL injection

347
00:17:42,780 --> 00:17:46,320
you can always spin up a little database

348
00:17:46,320 --> 00:17:49,679
on using MySQL or SQL live and try the

349
00:17:49,679 --> 00:17:51,900
things on your system where you can see

350
00:17:51,900 --> 00:17:53,700
where you're not in a in a blind

351
00:17:53,700 --> 00:17:56,280
environment so there's always ways to

352
00:17:56,280 --> 00:17:58,500
reproduce a smaller subset of the

353
00:17:58,500 --> 00:18:01,460
problem on your computer

354
00:18:01,679 --> 00:18:04,440
but now we have the output so I I've put

355
00:18:04,440 --> 00:18:06,539
it or because the classic is like or one

356
00:18:06,539 --> 00:18:07,740
equals one

357
00:18:07,740 --> 00:18:10,440
and here we have hints so what we are

358
00:18:10,440 --> 00:18:13,380
seeing here is it is in the database

359
00:18:13,380 --> 00:18:16,559
okay so we we're having this is the

360
00:18:16,559 --> 00:18:18,120
content of the database so I'm going to

361
00:18:18,120 --> 00:18:21,299
search for a flag why not

362
00:18:21,299 --> 00:18:24,480
and flag is ah nice try so my database

363
00:18:24,480 --> 00:18:27,240
is basically trolling us so now I'm

364
00:18:27,240 --> 00:18:29,640
gonna try to spice things up by like oh

365
00:18:29,640 --> 00:18:32,340
I'm gonna try or one equals one

366
00:18:32,340 --> 00:18:35,100
and it says you are onto something but

367
00:18:35,100 --> 00:18:38,460
uh let's take a look at our in at our

368
00:18:38,460 --> 00:18:42,720
string and uh the mistake here is that

369
00:18:42,720 --> 00:18:45,480
so we are in a light context so this is

370
00:18:45,480 --> 00:18:48,360
uh the condition of the query and there

371
00:18:48,360 --> 00:18:51,000
are double quotes So when we we put in

372
00:18:51,000 --> 00:18:54,480
R1 equal one we never escape the context

373
00:18:54,480 --> 00:18:56,640
of the double quote

374
00:18:56,640 --> 00:18:58,620
so

375
00:18:58,620 --> 00:19:00,678
um

376
00:19:08,580 --> 00:19:12,240
let's disconnect uh

377
00:19:15,419 --> 00:19:17,520
okay so we have this here so what we

378
00:19:17,520 --> 00:19:19,559
want to do so this this is the the

379
00:19:19,559 --> 00:19:20,820
output

380
00:19:20,820 --> 00:19:24,840
of when we write R1 equals one okay but

381
00:19:24,840 --> 00:19:28,620
what we want to do is uh close that

382
00:19:28,620 --> 00:19:31,620
double bracket so this will be give

383
00:19:31,620 --> 00:19:35,820
something like this so like that and

384
00:19:35,820 --> 00:19:37,679
then uh

385
00:19:37,679 --> 00:19:41,100
oops and then we're gonna have this okay

386
00:19:41,100 --> 00:19:44,340
so if we put only a double double quote

387
00:19:44,340 --> 00:19:46,919
this is what's gonna happen and this is

388
00:19:46,919 --> 00:19:51,080
probably not legal SQL let's try

389
00:19:51,419 --> 00:19:54,059
if I put just in double quote

390
00:19:54,059 --> 00:19:56,100
there are so many ways to bypass that

391
00:19:56,100 --> 00:19:57,600
challenge by the way

392
00:19:57,600 --> 00:19:59,880
okay so I have an error

393
00:19:59,880 --> 00:20:02,520
so it means that I like basically the

394
00:20:02,520 --> 00:20:04,980
the query failed and MySQL through an

395
00:20:04,980 --> 00:20:07,260
error PHP copy error and PHP through the

396
00:20:07,260 --> 00:20:08,820
error back at our face

397
00:20:08,820 --> 00:20:11,940
in many uh production contexts the air

398
00:20:11,940 --> 00:20:13,740
will be hidden so all you have to you'll

399
00:20:13,740 --> 00:20:15,960
have a 500 or whatever and this will not

400
00:20:15,960 --> 00:20:17,039
help you

401
00:20:17,039 --> 00:20:20,280
so okay so so this one is broken now how

402
00:20:20,280 --> 00:20:23,280
could I Unbreak it

403
00:20:23,280 --> 00:20:24,600
um so

404
00:20:24,600 --> 00:20:26,820
I don't I'm I this would kind of be

405
00:20:26,820 --> 00:20:28,980
jumping straight into the solution but

406
00:20:28,980 --> 00:20:30,600
let's try okay so I'm gonna do double

407
00:20:30,600 --> 00:20:35,299
quotes space or then one equal one

408
00:20:35,299 --> 00:20:39,419
which mean that the uh the query will

409
00:20:39,419 --> 00:20:43,380
become this double quote or one equal

410
00:20:43,380 --> 00:20:46,580
one and then the they are the the

411
00:20:46,580 --> 00:20:50,160
remaining percent and quotes will still

412
00:20:50,160 --> 00:20:54,120
be there right so do we think this will

413
00:20:54,120 --> 00:20:56,360
work

414
00:21:00,000 --> 00:21:02,100
let's try

415
00:21:02,100 --> 00:21:05,340
since you seem unsure

416
00:21:05,340 --> 00:21:08,760
we have an error why is that because we

417
00:21:08,760 --> 00:21:11,100
aren't we the double quote is still here

418
00:21:11,100 --> 00:21:13,620
at the end and it's never starting never

419
00:21:13,620 --> 00:21:15,960
ending so it's an unbalanced double

420
00:21:15,960 --> 00:21:19,380
quote so what the the trick of all the

421
00:21:19,380 --> 00:21:23,880
SQL injection folks is to

422
00:21:23,880 --> 00:21:26,280
um there is a functionality in SQL where

423
00:21:26,280 --> 00:21:28,520
you say the rest of the line is a common

424
00:21:28,520 --> 00:21:31,620
so if you you turn the rest of the line

425
00:21:31,620 --> 00:21:34,679
as a comment this means that our code

426
00:21:34,679 --> 00:21:38,580
will look like this and then comment and

427
00:21:38,580 --> 00:21:41,039
the rest doesn't matter no more quotes

428
00:21:41,039 --> 00:21:44,299
balancing or whatever

429
00:21:45,000 --> 00:21:47,900
try that

430
00:21:49,980 --> 00:21:52,760
that was

431
00:21:55,320 --> 00:21:58,080
boom we've got our flag right here and

432
00:21:58,080 --> 00:22:00,120
so the value was flagged but written

433
00:22:00,120 --> 00:22:04,140
with fancy Unicode letters and we have a

434
00:22:04,140 --> 00:22:08,760
flag with our flag now let's think of a

435
00:22:08,760 --> 00:22:11,880
couple bypasses uh because now we did

436
00:22:11,880 --> 00:22:15,200
kind of the you know 101 SQL injection

437
00:22:15,200 --> 00:22:19,020
but looking at it this way here I was

438
00:22:19,020 --> 00:22:21,000
like we're almost there right and this

439
00:22:21,000 --> 00:22:23,760
is a new bypass that I figured now

440
00:22:23,760 --> 00:22:25,740
because there's another one that is even

441
00:22:25,740 --> 00:22:27,419
easier than I'm keeping for later let's

442
00:22:27,419 --> 00:22:30,419
hope double quote and then all I need to

443
00:22:30,419 --> 00:22:33,059
do is comment the rest right that would

444
00:22:33,059 --> 00:22:35,760
work so let's try if it does so we're

445
00:22:35,760 --> 00:22:38,520
basically because the the percent is

446
00:22:38,520 --> 00:22:41,700
like the Asterix of SQL percent means

447
00:22:41,700 --> 00:22:43,679
anything

448
00:22:43,679 --> 00:22:46,440
um so if we only have like percent we

449
00:22:46,440 --> 00:22:49,140
will get all the database or all that

450
00:22:49,140 --> 00:22:50,640
table sorry

451
00:22:50,640 --> 00:22:52,919
you need to be specific so let's try

452
00:22:52,919 --> 00:22:56,400
with just the close quote and then Dash

453
00:22:56,400 --> 00:22:57,720
Dash

454
00:22:57,720 --> 00:22:59,400
it works

455
00:22:59,400 --> 00:23:02,640
we still have our content now the

456
00:23:02,640 --> 00:23:06,059
easiest bypass is the percent

457
00:23:06,059 --> 00:23:07,500
bypass

458
00:23:07,500 --> 00:23:09,059
because

459
00:23:09,059 --> 00:23:12,900
you will you will basically get

460
00:23:12,900 --> 00:23:16,039
in the command

461
00:23:16,500 --> 00:23:19,500
uh

462
00:23:21,299 --> 00:23:24,539
triple percent which means everything

463
00:23:24,539 --> 00:23:26,400
everything

464
00:23:26,400 --> 00:23:28,980
so let's try and it works so this

465
00:23:28,980 --> 00:23:31,140
challenge is completely you know broken

466
00:23:31,140 --> 00:23:32,880
if you think about it from the SQL

467
00:23:32,880 --> 00:23:36,059
perspective uh but it's still educative

468
00:23:36,059 --> 00:23:37,980
about how it works and the fact that you

469
00:23:37,980 --> 00:23:40,980
can see the query really helps you there

470
00:23:40,980 --> 00:23:46,020
in a in a CTF 201 we could do the step

471
00:23:46,020 --> 00:23:49,260
of you know having your own database

472
00:23:49,260 --> 00:23:52,200
locally but you know running a database

473
00:23:52,200 --> 00:23:55,440
in on a Linux system is as easy as

474
00:23:55,440 --> 00:23:58,679
typing SQL light and then enter and now

475
00:23:58,679 --> 00:24:01,320
you can create a table and then query

476
00:24:01,320 --> 00:24:03,360
this is the the

477
00:24:03,360 --> 00:24:06,179
not sure how it works the schema but it

478
00:24:06,179 --> 00:24:09,059
from select one

479
00:24:09,059 --> 00:24:12,240
and you get one right select one two

480
00:24:12,240 --> 00:24:15,240
three you have three one row three

481
00:24:15,240 --> 00:24:17,940
columns one two three so it's um

482
00:24:17,940 --> 00:24:21,299
it's a good way of of playing with it

483
00:24:21,299 --> 00:24:23,580
throwing with it but it's a little bit

484
00:24:23,580 --> 00:24:26,100
out of scope for our um what we're

485
00:24:26,100 --> 00:24:28,820
trying to do here

486
00:24:29,410 --> 00:24:31,380
[Music]

487
00:24:31,380 --> 00:24:34,340
all right

488
00:24:36,600 --> 00:24:38,600
um

489
00:24:43,620 --> 00:24:45,860
uh oh

490
00:24:45,860 --> 00:24:49,980
without double quotes with double quotes

491
00:24:49,980 --> 00:24:52,679
oh yeah interesting

492
00:24:52,679 --> 00:24:55,140
so but the quotes are the

493
00:24:55,140 --> 00:24:57,799
end

494
00:24:58,100 --> 00:25:03,740
it works okay it works on all engines

495
00:25:03,960 --> 00:25:05,820
okay interesting I didn't know about

496
00:25:05,820 --> 00:25:10,980
that one so semicolon definitely worked

497
00:25:10,980 --> 00:25:14,700
um okay uh yeah so moving on to our next

498
00:25:14,700 --> 00:25:17,400
uh challenge

499
00:25:17,400 --> 00:25:19,860
whoops I forgot to put the flag

500
00:25:19,860 --> 00:25:22,799
I need my points

501
00:25:22,799 --> 00:25:25,140
that's also a classic that happens in

502
00:25:25,140 --> 00:25:27,000
CTF people are stressed and they forget

503
00:25:27,000 --> 00:25:30,299
we see a lot okay so communication and

504
00:25:30,299 --> 00:25:32,880
your team is really important we see a

505
00:25:32,880 --> 00:25:35,340
lot of double submissions which means if

506
00:25:35,340 --> 00:25:37,679
it's a two three hour challenge it means

507
00:25:37,679 --> 00:25:39,720
someone lasts three hours could have

508
00:25:39,720 --> 00:25:41,700
worked on something else but worked on

509
00:25:41,700 --> 00:25:44,279
the same thing as the other to organize

510
00:25:44,279 --> 00:25:46,919
you can use Discord Google Drive you

511
00:25:46,919 --> 00:25:51,480
know choose your your or a Trello or you

512
00:25:51,480 --> 00:25:54,539
know kanban GitHub project whatever yeah

513
00:25:54,539 --> 00:25:56,279
they are means to

514
00:25:56,279 --> 00:25:58,740
um collaborate in order to avoid losing

515
00:25:58,740 --> 00:26:00,539
time like that oh we have a lot of solve

516
00:26:00,539 --> 00:26:03,480
I'm I'm impressed you're familiar with

517
00:26:03,480 --> 00:26:05,340
this stuff okay

518
00:26:05,340 --> 00:26:07,279
so

519
00:26:07,279 --> 00:26:10,080
self-excess is a weird one because it's

520
00:26:10,080 --> 00:26:13,620
totally fake but uh so let's try Okay

521
00:26:13,620 --> 00:26:16,200
this looks like an uh an SQL injection

522
00:26:16,200 --> 00:26:19,260
challenge let's try that

523
00:26:19,260 --> 00:26:21,600
and this this is not the SQL injection

524
00:26:21,600 --> 00:26:25,200
chat okay so why

525
00:26:25,200 --> 00:26:29,279
would you have immediately The Reflex of

526
00:26:29,279 --> 00:26:32,520
xss here it's because you've you you've

527
00:26:32,520 --> 00:26:35,760
gave you you gave user input to the at

528
00:26:35,760 --> 00:26:39,539
the web application and it thrown it

529
00:26:39,539 --> 00:26:42,299
throws you back your user input

530
00:26:42,299 --> 00:26:45,900
so now the way of uh of of trying to see

531
00:26:45,900 --> 00:26:49,380
if you have an injection context is to

532
00:26:49,380 --> 00:26:51,299
try the right HTML

533
00:26:51,299 --> 00:26:54,539
so contexts are super important in HD in

534
00:26:54,539 --> 00:26:59,520
HTML and basically if you can move from

535
00:26:59,520 --> 00:27:02,940
a HTML context into a script context

536
00:27:02,940 --> 00:27:05,640
then you're basically running code in

537
00:27:05,640 --> 00:27:08,179
people's browsers in this case yourself

538
00:27:08,179 --> 00:27:12,120
but if you can trick the person because

539
00:27:12,120 --> 00:27:14,940
the payload is in the the the the the

540
00:27:14,940 --> 00:27:16,799
bar address bar

541
00:27:16,799 --> 00:27:19,860
so then it means that you can craft a

542
00:27:19,860 --> 00:27:22,320
URL that if you can trick someone to

543
00:27:22,320 --> 00:27:25,020
click on it it will trigger the payload

544
00:27:25,020 --> 00:27:27,779
it will run in his browser and you'll be

545
00:27:27,779 --> 00:27:29,940
and you will be the controller of that

546
00:27:29,940 --> 00:27:32,700
code and then you will be able to make

547
00:27:32,700 --> 00:27:35,820
it exfiltrate Secrets which is the next

548
00:27:35,820 --> 00:27:38,580
challenge but now we're just gonna xss

549
00:27:38,580 --> 00:27:40,020
ourselves

550
00:27:40,020 --> 00:27:43,320
now to validate if there is filtering or

551
00:27:43,320 --> 00:27:47,100
not here I have decided to add D tags uh

552
00:27:47,100 --> 00:27:49,740
so that it will be bold so does that

553
00:27:49,740 --> 00:27:52,440
work oh yes it's bold

554
00:27:52,440 --> 00:27:56,539
so it means that we are there is no

555
00:27:56,539 --> 00:28:02,159
HTML escaping we are injecting HTML here

556
00:28:02,159 --> 00:28:05,580
the the payload that you will always see

557
00:28:05,580 --> 00:28:09,779
is the good old script uh alert 1

558
00:28:09,779 --> 00:28:13,679
payload which means that the browser

559
00:28:13,679 --> 00:28:16,620
will enter in scripting context it will

560
00:28:16,620 --> 00:28:20,640
see JavaScript it will execute it

561
00:28:20,640 --> 00:28:25,080
so boom I have a browser message saying

562
00:28:25,080 --> 00:28:28,620
one so it executed code and the code is

563
00:28:28,620 --> 00:28:30,960
in the address so it means that if I

564
00:28:30,960 --> 00:28:33,539
send this to anyone here you will get a

565
00:28:33,539 --> 00:28:36,299
pop-up message one so congratulations

566
00:28:36,299 --> 00:28:38,640
you accessed yourself

567
00:28:38,640 --> 00:28:41,840
and here's the flag

568
00:28:45,000 --> 00:28:48,539
[Music]

569
00:28:49,380 --> 00:28:54,960
next up is uh xss Larry so can you

570
00:28:54,960 --> 00:28:57,480
access Larry the clicker so basically

571
00:28:57,480 --> 00:29:00,480
here we're we're simulating someone who

572
00:29:00,480 --> 00:29:02,460
clicks on links like everything you send

573
00:29:02,460 --> 00:29:06,120
them the goal is to steal something from

574
00:29:06,120 --> 00:29:09,539
his browser uh

575
00:29:09,539 --> 00:29:11,940
um uh because he has cookies that we are

576
00:29:11,940 --> 00:29:13,860
interested in that basically if you

577
00:29:13,860 --> 00:29:15,360
steal the right cookie you can

578
00:29:15,360 --> 00:29:17,820
impersonate me on Outlook or whatever

579
00:29:17,820 --> 00:29:21,059
right whatever resource

580
00:29:21,059 --> 00:29:27,418
um so uh let's take a look so whoops

581
00:29:30,419 --> 00:29:33,000
so this is the page we want to steal

582
00:29:33,000 --> 00:29:38,039
from and uh Larry is here

583
00:29:38,039 --> 00:29:41,820
so it uh basically it's like sending an

584
00:29:41,820 --> 00:29:43,740
email with a link in it and hoping the

585
00:29:43,740 --> 00:29:45,480
person will click it so it's just a

586
00:29:45,480 --> 00:29:48,539
simulation of that for CTF purposes uh

587
00:29:48,539 --> 00:29:51,720
and I name them Larry uh we want to

588
00:29:51,720 --> 00:29:55,260
steal a browser cookie for for the CTF

589
00:29:55,260 --> 00:29:56,760
101 domain

590
00:29:56,760 --> 00:29:59,039
and uh

591
00:29:59,039 --> 00:30:01,260
uh the

592
00:30:01,260 --> 00:30:04,799
if you want so we don't know where Larry

593
00:30:04,799 --> 00:30:07,799
sits or he needs is access to the

594
00:30:07,799 --> 00:30:10,260
internet to be a and and we need

595
00:30:10,260 --> 00:30:12,120
something listening on the internet

596
00:30:12,120 --> 00:30:14,820
otherwise we will not get when we run

597
00:30:14,820 --> 00:30:17,820
code in his context we will not get the

598
00:30:17,820 --> 00:30:22,440
Ping to our context to our system so

599
00:30:22,440 --> 00:30:25,080
this is why I recommend you run pivot

600
00:30:25,080 --> 00:30:28,380
box but other people have their own

601
00:30:28,380 --> 00:30:31,320
machine online and as long as it's

602
00:30:31,320 --> 00:30:35,039
reachable and Larry has the same DNS

603
00:30:35,039 --> 00:30:37,980
resolver capabilities as we had for

604
00:30:37,980 --> 00:30:40,080
assistant Main Service which means that

605
00:30:40,080 --> 00:30:45,179
we can use this admin SSH uh and um and

606
00:30:45,179 --> 00:30:47,840
and it should work

607
00:30:49,260 --> 00:30:52,200
and and here it says yeah so since this

608
00:30:52,200 --> 00:30:54,960
is a shared system uh we need to pick up

609
00:30:54,960 --> 00:30:57,480
uh each our own port otherwise we will

610
00:30:57,480 --> 00:31:00,480
uh mess with each other so let's connect

611
00:31:00,480 --> 00:31:01,980
there

612
00:31:01,980 --> 00:31:06,299
I have the web server here

613
00:31:06,299 --> 00:31:09,419
and we'll I'll pick it different port

614
00:31:09,419 --> 00:31:11,960
right away

615
00:31:12,480 --> 00:31:14,700
I think it's just like that

616
00:31:14,700 --> 00:31:17,340
yeah okay so now I have a web server

617
00:31:17,340 --> 00:31:21,120
running on uh on all addresses on Port

618
00:31:21,120 --> 00:31:22,980
one two three four five which is

619
00:31:22,980 --> 00:31:25,740
reachable like that okay we can try to

620
00:31:25,740 --> 00:31:28,380
see if Larry works I think it should

621
00:31:28,380 --> 00:31:32,000
connect I don't remember

622
00:31:34,080 --> 00:31:38,059
and skewing the link

623
00:31:41,220 --> 00:31:44,340
will I get the hits I know no no that's

624
00:31:44,340 --> 00:31:49,220
not the and no no no I need to put uh

625
00:31:49,220 --> 00:31:52,820
assessments or SSH

626
00:31:53,340 --> 00:31:56,520
yeah made a big mistake so I need to use

627
00:31:56,520 --> 00:31:59,580
the the the host name that will be

628
00:31:59,580 --> 00:32:04,080
resolved as that system uh on that port

629
00:32:04,080 --> 00:32:06,659
and

630
00:32:06,659 --> 00:32:10,200
so this is kind of the first test so we

631
00:32:10,200 --> 00:32:13,380
know that we're getting hit by the bus

632
00:32:13,380 --> 00:32:16,520
but now

633
00:32:16,799 --> 00:32:20,340
this is why excess is tricky so what we

634
00:32:20,340 --> 00:32:23,340
need to do here is

635
00:32:23,340 --> 00:32:28,320
craft something uh in that web page a a

636
00:32:28,320 --> 00:32:31,200
URL that when

637
00:32:31,200 --> 00:32:34,200
someone else clicks on it it will send

638
00:32:34,200 --> 00:32:37,679
the cookie to me a third party here but

639
00:32:37,679 --> 00:32:39,960
now so it will be able to build that

640
00:32:39,960 --> 00:32:44,039
first we will try to access the content

641
00:32:44,039 --> 00:32:45,480
itself

642
00:32:45,480 --> 00:32:48,120
so document way

643
00:32:48,120 --> 00:32:50,539
okay

644
00:32:51,779 --> 00:32:55,500
I do I have a cookie can I set the

645
00:32:55,500 --> 00:32:57,919
cooking

646
00:33:05,760 --> 00:33:08,720
whoops fine

647
00:33:13,500 --> 00:33:15,860
true

648
00:33:18,659 --> 00:33:20,820
this is the part I always rehearse

649
00:33:20,820 --> 00:33:23,399
usually but I didn't today

650
00:33:23,399 --> 00:33:27,120
so I might jump to my solution so I have

651
00:33:27,120 --> 00:33:31,399
a Google analytics cookie luckily enough

652
00:33:31,799 --> 00:33:35,519
um and so I know that I am injecting I

653
00:33:35,519 --> 00:33:38,940
can't run JavaScript no now how can I

654
00:33:38,940 --> 00:33:41,279
get these cookies

655
00:33:41,279 --> 00:33:45,179
sent uh to me

656
00:33:45,179 --> 00:33:48,179
uh the classic way I don't know that so

657
00:33:48,179 --> 00:33:50,100
these guys are actually working in the

658
00:33:50,100 --> 00:33:52,140
field I'm a researcher so I don't do

659
00:33:52,140 --> 00:33:54,059
exercise all the time but they might

660
00:33:54,059 --> 00:33:56,039
have a very different payload than I

661
00:33:56,039 --> 00:34:00,240
what I'll build with my notes

662
00:34:00,240 --> 00:34:02,700
um so I'm curious to hear about what the

663
00:34:02,700 --> 00:34:04,440
how they'll come up with the solution

664
00:34:04,440 --> 00:34:07,940
but the um

665
00:34:07,980 --> 00:34:12,060
the let's let's start writing down the

666
00:34:12,060 --> 00:34:14,070
payload

667
00:34:14,070 --> 00:34:16,139
[Music]

668
00:34:16,139 --> 00:34:18,679
so

669
00:34:18,899 --> 00:34:20,520
one

670
00:34:20,520 --> 00:34:23,879
easy way and and this is a bit odd but

671
00:34:23,879 --> 00:34:28,139
you if you basically put in an image the

672
00:34:28,139 --> 00:34:31,260
browser will go and fetch that image so

673
00:34:31,260 --> 00:34:33,418
usually this is one of the tricks that

674
00:34:33,418 --> 00:34:37,320
are used to uh to you know make a

675
00:34:37,320 --> 00:34:40,020
browser reach a different resource so we

676
00:34:40,020 --> 00:34:42,599
saw that the

677
00:34:42,599 --> 00:34:48,740
the clicker will reach that so if we do

678
00:34:51,418 --> 00:34:55,679
this and then href with

679
00:34:55,679 --> 00:34:59,099
this and then

680
00:34:59,099 --> 00:35:01,619
a that give

681
00:35:01,619 --> 00:35:03,900
uh

682
00:35:03,900 --> 00:35:07,140
like this

683
00:35:07,140 --> 00:35:08,700
so

684
00:35:08,700 --> 00:35:10,560
[Music]

685
00:35:10,560 --> 00:35:14,520
so this locally

686
00:35:15,119 --> 00:35:18,599
will not be satisfying because my system

687
00:35:18,599 --> 00:35:20,760
doesn't know anything about assistant

688
00:35:20,760 --> 00:35:24,260
SSH oops

689
00:35:28,940 --> 00:35:31,140
single quote

690
00:35:31,140 --> 00:35:34,040
no no no no no

691
00:35:36,300 --> 00:35:39,020
exactly

692
00:35:39,660 --> 00:35:42,540
so as I said this wouldn't be satisfying

693
00:35:42,540 --> 00:35:45,000
but

694
00:35:45,000 --> 00:35:48,260
oh my God

695
00:35:48,920 --> 00:35:54,440
SRC not uh href ref is for a tags

696
00:35:54,440 --> 00:35:59,099
SRC but it will display a broken image

697
00:35:59,099 --> 00:36:00,240
anyway

698
00:36:00,240 --> 00:36:03,240
but the the where we're heading is like

699
00:36:03,240 --> 00:36:06,359
we're building small steps to see the

700
00:36:06,359 --> 00:36:09,000
the whole solution I have double quotes

701
00:36:09,000 --> 00:36:12,720
again single quotes

702
00:36:12,720 --> 00:36:16,578
should bring that back to my notes

703
00:36:18,300 --> 00:36:19,680
okay

704
00:36:19,680 --> 00:36:22,680
so do we have our image tag is what

705
00:36:22,680 --> 00:36:25,700
we're interested in

706
00:36:27,599 --> 00:36:30,599
foreign

707
00:36:46,579 --> 00:36:49,859
web page if you want so now we know that

708
00:36:49,859 --> 00:36:52,800
that it worked and now what we want to

709
00:36:52,800 --> 00:36:56,760
do is to give that to Larry okay this is

710
00:36:56,760 --> 00:37:00,599
a complete URL that will fetch an image

711
00:37:00,599 --> 00:37:03,660
on a third-party resource which is

712
00:37:03,660 --> 00:37:06,599
system admin SSH results in a broken

713
00:37:06,599 --> 00:37:09,060
image for me will result in a broken

714
00:37:09,060 --> 00:37:10,920
image for Larry as well but the

715
00:37:10,920 --> 00:37:14,339
difference is that we will see that if

716
00:37:14,339 --> 00:37:17,099
it's working we will see it in our logs

717
00:37:17,099 --> 00:37:19,280
here

718
00:37:25,320 --> 00:37:28,560
oh that's a weird ordering

719
00:37:28,560 --> 00:37:33,180
okay message file on the phone

720
00:37:33,180 --> 00:37:36,119
it means that we're on to something now

721
00:37:36,119 --> 00:37:40,680
what we need to do is add the cookie

722
00:37:40,680 --> 00:37:43,200
in that command

723
00:37:43,200 --> 00:37:46,680
without uh whoops that's the length and

724
00:37:46,680 --> 00:37:49,619
the uh oh did we lose the okay it's

725
00:37:49,619 --> 00:37:51,800
there

726
00:37:52,560 --> 00:37:55,380
add the cookie without using double

727
00:37:55,380 --> 00:37:57,540
quotes and I think this is where I

728
00:37:57,540 --> 00:38:00,420
always uh I'm bad

729
00:38:00,420 --> 00:38:03,020
so

730
00:38:10,680 --> 00:38:12,680
um

731
00:38:31,280 --> 00:38:35,520
okay so what the when now there are

732
00:38:35,520 --> 00:38:37,619
thousands of ways you're injecting

733
00:38:37,619 --> 00:38:40,200
JavaScript you can do it however you

734
00:38:40,200 --> 00:38:42,480
want and now they're they're talking

735
00:38:42,480 --> 00:38:45,000
about the cleverest and smallest payload

736
00:38:45,000 --> 00:38:48,960
the difficulty here is you can't use

737
00:38:48,960 --> 00:38:51,180
double quotes so because of that you

738
00:38:51,180 --> 00:38:52,859
have to like you know because because

739
00:38:52,859 --> 00:38:56,040
you could assemble the the string but

740
00:38:56,040 --> 00:38:58,020
doing it without double quotes with the

741
00:38:58,020 --> 00:39:00,240
with the cookie it's kind of difficult

742
00:39:00,240 --> 00:39:02,640
so the solution that he's proposing

743
00:39:02,640 --> 00:39:04,079
which is very clever is that we're gonna

744
00:39:04,079 --> 00:39:07,320
do this in a pure JavaScript uh payload

745
00:39:07,320 --> 00:39:11,280
so window that location is a way in

746
00:39:11,280 --> 00:39:14,099
JavaScript to send the browser somewhere

747
00:39:14,099 --> 00:39:17,760
so if Larry clicks on our link and we

748
00:39:17,760 --> 00:39:21,000
send Larry to our system where we have

749
00:39:21,000 --> 00:39:24,560
an HTTP server and we can make the URL

750
00:39:24,560 --> 00:39:27,540
leads us to the string we're looking for

751
00:39:27,540 --> 00:39:30,480
we will have the the cookie and the flag

752
00:39:30,480 --> 00:39:32,000
so

753
00:39:32,000 --> 00:39:35,160
window.location equals

754
00:39:35,160 --> 00:39:38,280
um our SSH that service which we can use

755
00:39:38,280 --> 00:39:41,240
single quotes

756
00:39:43,200 --> 00:39:47,220
and then it's plus two concatenate

757
00:39:47,220 --> 00:39:50,280
and then we're gonna do uh you know just

758
00:39:50,280 --> 00:39:53,460
because we're fancy you know uh stolen

759
00:39:53,460 --> 00:39:59,960
equals and then a document that cookie

760
00:40:01,140 --> 00:40:03,540
you will encode the whole thing oh just

761
00:40:03,540 --> 00:40:07,400
the cookie what's the API

762
00:40:12,720 --> 00:40:15,720
this

763
00:40:17,700 --> 00:40:21,680
uh this is where you hit you hit Google

764
00:40:28,380 --> 00:40:31,200
ah let's let's do it clean for them

765
00:40:31,200 --> 00:40:36,180
uh JavaScript URI encoding

766
00:40:36,180 --> 00:40:38,400
and gold URI is that what you're looking

767
00:40:38,400 --> 00:40:40,700
for

768
00:40:43,440 --> 00:40:46,099
that's right

769
00:40:47,030 --> 00:40:51,530
[Music]

770
00:40:53,220 --> 00:40:55,140
you know what Let's do let's do one

771
00:40:55,140 --> 00:40:57,180
without and one with so we see the

772
00:40:57,180 --> 00:40:59,299
difference

773
00:41:00,480 --> 00:41:01,859
football

774
00:41:01,859 --> 00:41:04,880
ah true

775
00:41:08,700 --> 00:41:11,240
okay

776
00:41:12,380 --> 00:41:15,780
uh I mean I need to probably pack

777
00:41:15,780 --> 00:41:17,760
everything okay

778
00:41:17,760 --> 00:41:21,599
so I have I want to jump out of the HTML

779
00:41:21,599 --> 00:41:25,440
context pick jump in a script context I

780
00:41:25,440 --> 00:41:28,500
want to send your browser to the did you

781
00:41:28,500 --> 00:41:31,700
try it on this on this one

782
00:41:34,140 --> 00:41:36,200
okay

783
00:41:36,300 --> 00:41:38,460
um because I was not sure if the the if

784
00:41:38,460 --> 00:41:40,500
it would obey the location and redirect

785
00:41:40,500 --> 00:41:44,160
the the bot I I use

786
00:41:44,160 --> 00:41:46,140
um okay so we're gonna send the browser

787
00:41:46,140 --> 00:41:48,960
to that URL and here we're saying the

788
00:41:48,960 --> 00:41:51,119
URL is something that doesn't exist with

789
00:41:51,119 --> 00:41:54,240
parameter document that cookie

790
00:41:54,240 --> 00:41:56,839
so

791
00:41:58,320 --> 00:42:01,280
try it

792
00:42:02,940 --> 00:42:05,280
to me this is the hardest challenge of

793
00:42:05,280 --> 00:42:09,740
CTF 101 because I'm I suck at web

794
00:42:13,339 --> 00:42:16,200
oh no no I didn't do the good thing so I

795
00:42:16,200 --> 00:42:18,240
made another mistake classic mistake I

796
00:42:18,240 --> 00:42:20,099
put it in the page visitor but the page

797
00:42:20,099 --> 00:42:23,220
visitor visit links this is not a link

798
00:42:23,220 --> 00:42:27,420
so I need to do it on myself to get the

799
00:42:27,420 --> 00:42:29,460
link

800
00:42:29,460 --> 00:42:33,359
oh I'm doing yeah I'm kind of uh I'm

801
00:42:33,359 --> 00:42:37,279
redirecting myself here oh one sec

802
00:42:37,740 --> 00:42:40,220
things

803
00:42:43,680 --> 00:42:46,380
but this this should work as well ah I

804
00:42:46,380 --> 00:42:48,180
lost yeah that's not the right build on

805
00:42:48,180 --> 00:42:54,419
one side now look now now now yay

806
00:42:55,800 --> 00:42:58,619
so slow enough all right so I have the

807
00:42:58,619 --> 00:43:01,160
basically the payload and you could also

808
00:43:01,160 --> 00:43:05,400
uh URI uh encode the payload and then

809
00:43:05,400 --> 00:43:07,800
you would get the thing is that slash

810
00:43:07,800 --> 00:43:10,079
are a special character so you need to

811
00:43:10,079 --> 00:43:12,540
encode them so they become uh this is a

812
00:43:12,540 --> 00:43:16,260
angle bracket uh percentage 3C the web

813
00:43:16,260 --> 00:43:18,180
is just a mess of encoding and you

814
00:43:18,180 --> 00:43:20,339
always need to realize where you are and

815
00:43:20,339 --> 00:43:23,880
Escape in the proper way uh and with

816
00:43:23,880 --> 00:43:26,700
practice this comes naturally

817
00:43:26,700 --> 00:43:30,060
like everything no one bicycles on the

818
00:43:30,060 --> 00:43:32,099
first day

819
00:43:32,099 --> 00:43:36,480
uh yeah so we have this here that's dry

820
00:43:36,480 --> 00:43:39,359
oh didn't get my uh usual

821
00:43:39,359 --> 00:43:42,480
Larry prom okay that's Now it worked

822
00:43:42,480 --> 00:43:46,440
now if we whoops that's here and then

823
00:43:46,440 --> 00:43:49,800
oh yeah so we're lucky here because we

824
00:43:49,800 --> 00:43:53,099
have the thing and it worked uh without

825
00:43:53,099 --> 00:43:56,520
the URI encoding let's try with the URL

826
00:43:56,520 --> 00:43:58,740
encoding what will it change but nothing

827
00:43:58,740 --> 00:44:01,640
was a Escape

828
00:44:04,720 --> 00:44:07,890
[Music]

829
00:44:21,440 --> 00:44:24,359
but can we show them like if I put a

830
00:44:24,359 --> 00:44:26,940
bracket I will break the

831
00:44:26,940 --> 00:44:29,359
well

832
00:44:33,839 --> 00:44:36,540
right

833
00:44:36,540 --> 00:44:41,640
now I'm picturing the wife okay

834
00:44:46,040 --> 00:44:49,380
now that's his idea because my I'm gonna

835
00:44:49,380 --> 00:44:51,720
show you the payload I use usually it's

836
00:44:51,720 --> 00:44:54,439
so complicated

837
00:44:58,140 --> 00:45:00,359
I'm gonna yeah I'm gonna put the final

838
00:45:00,359 --> 00:45:03,380
link here

839
00:45:04,830 --> 00:45:11,229
[Music]

840
00:45:20,780 --> 00:45:23,780
thank you

841
00:45:26,910 --> 00:45:34,868
[Music]

842
00:45:45,960 --> 00:45:46,970
all right

843
00:45:46,970 --> 00:45:50,100
[Music]

844
00:45:52,040 --> 00:45:54,660
yeah they're there to help if you if you

845
00:45:54,660 --> 00:45:57,960
want and and like xss there's a lot of

846
00:45:57,960 --> 00:46:01,140
excesses and CTF and it's a very one a

847
00:46:01,140 --> 00:46:03,780
difficult one to uh to wrap your head

848
00:46:03,780 --> 00:46:06,300
around so do not hesitate to ask for

849
00:46:06,300 --> 00:46:12,260
help I thought I had my solution

850
00:46:13,319 --> 00:46:16,400
thank you

851
00:46:16,920 --> 00:46:20,300
ah here it is

852
00:46:21,119 --> 00:46:24,560
web access system

853
00:46:24,780 --> 00:46:29,700
okay so uh here this solution here it

854
00:46:29,700 --> 00:46:32,220
uses a script tag to create an image at

855
00:46:32,220 --> 00:46:34,920
mm so this is basically a way to avoid

856
00:46:34,920 --> 00:46:38,700
uh double quotes so you can use single

857
00:46:38,700 --> 00:46:40,500
quotes everywhere because it's in

858
00:46:40,500 --> 00:46:43,200
JavaScript and so you create the image

859
00:46:43,200 --> 00:46:46,619
element and you specify the source and

860
00:46:46,619 --> 00:46:51,180
when you do so uh you um uh it will

861
00:46:51,180 --> 00:46:53,099
basically go and fetch that image and

862
00:46:53,099 --> 00:46:54,720
when it's it's trying to fetch that

863
00:46:54,720 --> 00:46:56,780
image it will work

864
00:46:56,780 --> 00:47:00,599
the complicated one I had

865
00:47:00,599 --> 00:47:03,839
was that I was trying to concatenate and

866
00:47:03,839 --> 00:47:06,660
since you need the image and the source

867
00:47:06,660 --> 00:47:09,060
you need two types of quotes so that

868
00:47:09,060 --> 00:47:11,520
doesn't work mixing the the because the

869
00:47:11,520 --> 00:47:17,220
double quote don't pass so uh I uh I was

870
00:47:17,220 --> 00:47:18,500
using

871
00:47:18,500 --> 00:47:21,599
a Char encoder so this is like malware

872
00:47:21,599 --> 00:47:24,540
like but I was encoding everything and

873
00:47:24,540 --> 00:47:27,540
evaling the string from charcoal in

874
00:47:27,540 --> 00:47:29,819
order to build their their laughing

875
00:47:29,819 --> 00:47:32,579
because they see how up I am and

876
00:47:32,579 --> 00:47:34,800
it works but it's like yeah I don't know

877
00:47:34,800 --> 00:47:37,440
I've seen more malware than xss in my

878
00:47:37,440 --> 00:47:40,380
life clearly and so this is the same

879
00:47:40,380 --> 00:47:44,700
thing right it will and maybe it will

880
00:47:44,700 --> 00:47:47,700
will it work now I'm using like once 192

881
00:47:47,700 --> 00:47:49,859
so I'm using hard-coded IPS that will

882
00:47:49,859 --> 00:47:52,319
fail so but the thing is that I built

883
00:47:52,319 --> 00:47:55,920
the payload and I encoded it in charcoal

884
00:47:55,920 --> 00:47:58,859
and I'm using JavaScript to decode this

885
00:47:58,859 --> 00:48:01,560
from charcoal and then evaluating it

886
00:48:01,560 --> 00:48:04,380
which means consider this string as

887
00:48:04,380 --> 00:48:07,619
JavaScript which then runs the the the

888
00:48:07,619 --> 00:48:11,160
payload and so this was my bypass to

889
00:48:11,160 --> 00:48:12,960
avoid the double quote so when I said my

890
00:48:12,960 --> 00:48:16,880
social was complicated here you go

891
00:48:17,700 --> 00:48:19,200
okay

892
00:48:19,200 --> 00:48:22,560
so with this we exfiltrated the flag so

893
00:48:22,560 --> 00:48:24,960
let's copy it

894
00:48:24,960 --> 00:48:28,560
and put it in

895
00:48:28,560 --> 00:48:31,560
submit

896
00:48:36,420 --> 00:48:40,500
now a little break for us encoding so

897
00:48:40,500 --> 00:48:44,040
again this is comes off in and it's it's

898
00:48:44,040 --> 00:48:45,359
not

899
00:48:45,359 --> 00:48:47,880
so why is it in CTF 101 since it's so

900
00:48:47,880 --> 00:48:50,700
easy it's because it it's always there

901
00:48:50,700 --> 00:48:53,460
but it's not directly there there are

902
00:48:53,460 --> 00:48:56,579
rarely points to be doing to have doing

903
00:48:56,579 --> 00:49:00,240
straight up base64 but a good way to

904
00:49:00,240 --> 00:49:02,940
hide the flag so that it will not you

905
00:49:02,940 --> 00:49:05,040
will not be able to find it by looking

906
00:49:05,040 --> 00:49:08,339
for flag is by encoding it in basic

907
00:49:08,339 --> 00:49:10,980
support So this you you kind of have to

908
00:49:10,980 --> 00:49:13,980
have the habit of seeing it often and

909
00:49:13,980 --> 00:49:16,260
knowing what to do quickly to look at it

910
00:49:16,260 --> 00:49:19,800
and it's also a nice introduction to a

911
00:49:19,800 --> 00:49:24,740
very good City F2 called cyber chef

912
00:49:27,540 --> 00:49:31,160
so cyber Chef is a web tool from gchq

913
00:49:31,160 --> 00:49:34,319
and it does and it's local you're not

914
00:49:34,319 --> 00:49:36,420
sending anything to the the spies in the

915
00:49:36,420 --> 00:49:41,780
UK uh it runs in your browser

916
00:49:44,160 --> 00:49:46,560
and it supports a ton of stuff there's

917
00:49:46,560 --> 00:49:48,480
even one called Magic

918
00:49:48,480 --> 00:49:50,280
we can try

919
00:49:50,280 --> 00:49:57,000
and Magic didn't uh oh so magic suggests

920
00:49:57,000 --> 00:50:01,680
a base uh uh 85 but it used a depth of

921
00:50:01,680 --> 00:50:02,880
three

922
00:50:02,880 --> 00:50:05,700
we try a depth of one

923
00:50:05,700 --> 00:50:08,520
so magic is not working for base

924
00:50:08,520 --> 00:50:11,480
intensive

925
00:50:12,300 --> 00:50:15,960
oh yeah it's trying a lot of stuff

926
00:50:15,960 --> 00:50:19,380
maybe a bit too much trying too hard no

927
00:50:19,380 --> 00:50:24,060
so basically uh bay 64 the what what

928
00:50:24,060 --> 00:50:26,040
gives it away for me

929
00:50:26,040 --> 00:50:29,040
is the presence of the equal sign at the

930
00:50:29,040 --> 00:50:31,380
end so it's a padded format because it's

931
00:50:31,380 --> 00:50:35,640
not on one byte necessarily

932
00:50:35,640 --> 00:50:38,520
um and so uh and it always looks like

933
00:50:38,520 --> 00:50:41,099
this so it's a reduced alphabet it's

934
00:50:41,099 --> 00:50:43,980
meant to be safe to pass binary data and

935
00:50:43,980 --> 00:50:45,480
you have it here right it's the the

936
00:50:45,480 --> 00:50:49,319
second option so from day64 and then you

937
00:50:49,319 --> 00:50:51,599
will get the output in this field oh

938
00:50:51,599 --> 00:50:53,819
there's a mistake you should recognize

939
00:50:53,819 --> 00:50:55,740
basic encoding techniques just by

940
00:50:55,740 --> 00:50:57,599
looking at them congrats because it

941
00:50:57,599 --> 00:50:59,220
looks like you just did

942
00:50:59,220 --> 00:51:01,020
here we go

943
00:51:01,020 --> 00:51:03,740
lag

944
00:51:05,940 --> 00:51:09,059
oon flower

945
00:51:15,540 --> 00:51:18,540
possible

946
00:51:26,220 --> 00:51:27,540
why

947
00:51:27,540 --> 00:51:29,460
I I

948
00:51:29,460 --> 00:51:31,460
um

949
00:51:35,420 --> 00:51:38,640
power recycling

950
00:51:38,640 --> 00:51:42,839
I I put the the URL on the Discord

951
00:51:42,839 --> 00:51:44,880
maybe that's the problem they're

952
00:51:44,880 --> 00:51:47,040
probably more player than I anticipated

953
00:51:47,040 --> 00:51:50,040
uh

954
00:52:02,960 --> 00:52:06,140
that's it

955
00:52:06,240 --> 00:52:08,880
so we're gonna we're gonna power cycle

956
00:52:08,880 --> 00:52:10,079
it

957
00:52:10,079 --> 00:52:14,359
oh and that's power cycle but stop

958
00:52:39,980 --> 00:52:42,660
so I'm gonna resize this to the point

959
00:52:42,660 --> 00:52:44,880
where I must not forget to resize it

960
00:52:44,880 --> 00:52:47,099
down because it's gonna be 500 bucks a

961
00:52:47,099 --> 00:52:49,280
month

962
00:52:50,160 --> 00:52:51,780
um

963
00:52:51,780 --> 00:52:54,900
I don't want to grow that this can I do

964
00:52:54,900 --> 00:52:57,079
that

965
00:52:58,380 --> 00:53:01,579
yeah CPU and RAM

966
00:53:03,680 --> 00:53:06,780
yeah it's trying it's trying but maybe

967
00:53:06,780 --> 00:53:09,619
if I refresh

968
00:53:14,280 --> 00:53:17,780
it's still powering us

969
00:53:20,579 --> 00:53:23,780
oh it's down now

970
00:53:24,839 --> 00:53:27,839
foreign

971
00:53:37,579 --> 00:53:40,079
that message I'm not I'm not gonna

972
00:53:40,079 --> 00:53:42,420
recite now usually it's fast but I'm not

973
00:53:42,420 --> 00:53:44,579
gonna take that risk

974
00:53:44,579 --> 00:53:47,230
turn on

975
00:53:47,230 --> 00:53:50,499
[Music]

976
00:53:55,440 --> 00:53:58,559
so if anyone here you're unsure about

977
00:53:58,559 --> 00:54:01,740
your xss payload try to have it looked

978
00:54:01,740 --> 00:54:04,619
up by the the guys here the pros because

979
00:54:04,619 --> 00:54:06,540
clearly they're we're exhausting

980
00:54:06,540 --> 00:54:08,940
resources it could be other things so

981
00:54:08,940 --> 00:54:12,420
I'm not blaming anyone but uh yeah Larry

982
00:54:12,420 --> 00:54:14,880
is a node.js

983
00:54:14,880 --> 00:54:19,020
app that is spawn so the whole jvm so it

984
00:54:19,020 --> 00:54:22,380
can take some resources uh it's the

985
00:54:22,380 --> 00:54:24,240
first time we're having issues like that

986
00:54:24,240 --> 00:54:26,940
but we used to be I never put it on

987
00:54:26,940 --> 00:54:30,059
Discord before so if we're like 100

988
00:54:30,059 --> 00:54:33,000
person then it might explain it but in

989
00:54:33,000 --> 00:54:35,359
the meantime

990
00:54:36,720 --> 00:54:39,720
certificate

991
00:54:47,960 --> 00:54:52,319
oh yeah yeah yeah cool

992
00:54:54,180 --> 00:54:56,339
so

993
00:54:56,339 --> 00:54:58,200
but on a

994
00:54:58,200 --> 00:55:02,460
honorary but how do you unair you image

995
00:55:02,460 --> 00:55:05,819
source that people has if it's always an

996
00:55:05,819 --> 00:55:08,359
error yeah

997
00:55:14,040 --> 00:55:16,319
yeah yeah I know the executes code but

998
00:55:16,319 --> 00:55:17,339
uh

999
00:55:17,339 --> 00:55:18,020
the

1000
00:55:18,020 --> 00:55:21,000
you fetch the URL from where from window

1001
00:55:21,000 --> 00:55:23,359
location

1002
00:55:25,099 --> 00:55:32,160
any URL plus document cookie but this is

1003
00:55:34,470 --> 00:55:39,488
[Music]

1004
00:55:41,540 --> 00:55:43,980
but I understand because this is going

1005
00:55:43,980 --> 00:55:45,960
to be JavaScript but you need it to

1006
00:55:45,960 --> 00:55:47,880
build it something that will query

1007
00:55:47,880 --> 00:55:51,359
something do Ajax or

1008
00:55:51,359 --> 00:55:54,359
okay

1009
00:55:57,740 --> 00:56:02,160
so if in on error you return a URL the

1010
00:56:02,160 --> 00:56:05,760
browser will boom go there okay I didn't

1011
00:56:05,760 --> 00:56:08,119
know that

1012
00:56:23,160 --> 00:56:25,700
living room

1013
00:56:50,760 --> 00:56:53,700
okay I think yeah the assistant man

1014
00:56:53,700 --> 00:56:56,160
needs to be restarted but besides that

1015
00:56:56,160 --> 00:56:58,879
we're good

1016
00:57:05,339 --> 00:57:07,440
okay everything is back up

1017
00:57:07,440 --> 00:57:12,559
now let's complete our encoding one

1018
00:57:13,319 --> 00:57:15,839
and I have it okay so we're back on

1019
00:57:15,839 --> 00:57:18,359
track document one

1020
00:57:18,359 --> 00:57:20,400
so there's a hidden flag in this

1021
00:57:20,400 --> 00:57:23,880
document uh it's it has two flags and

1022
00:57:23,880 --> 00:57:26,040
this is the easiest of the two so

1023
00:57:26,040 --> 00:57:27,960
sometimes for a track it's normal to

1024
00:57:27,960 --> 00:57:31,260
have more than one flag in a single uh

1025
00:57:31,260 --> 00:57:33,240
document but you need to you know think

1026
00:57:33,240 --> 00:57:35,400
oh maybe I didn't find the first one so

1027
00:57:35,400 --> 00:57:37,319
you need to to think of submitting the

1028
00:57:37,319 --> 00:57:38,900
other one

1029
00:57:38,900 --> 00:57:44,280
let's do this forensic

1030
00:57:44,760 --> 00:57:47,480
save

1031
00:57:50,220 --> 00:57:51,200
all right

1032
00:57:51,200 --> 00:57:53,460
[Music]

1033
00:57:53,460 --> 00:57:57,079
where is the flag

1034
00:58:00,000 --> 00:58:03,960
ah I know it's a document things can be

1035
00:58:03,960 --> 00:58:06,480
hidden away right so we're gonna search

1036
00:58:06,480 --> 00:58:08,940
for flag

1037
00:58:08,940 --> 00:58:11,460
is there a flag oh look at that

1038
00:58:11,460 --> 00:58:14,520
there's something white with a mistake

1039
00:58:14,520 --> 00:58:18,180
at the bottom we can highlight it all

1040
00:58:18,180 --> 00:58:22,640
and then we can make it dark my

1041
00:58:22,640 --> 00:58:27,140
liberal office is broken what's that

1042
00:58:31,140 --> 00:58:34,619
I don't even know where the

1043
00:58:34,619 --> 00:58:37,760
colors are anymore

1044
00:58:38,880 --> 00:58:42,240
ah here it is okay so if it put it make

1045
00:58:42,240 --> 00:58:44,700
it bigger

1046
00:58:44,700 --> 00:58:49,339
okay now color this oh it's a flag so

1047
00:58:49,339 --> 00:58:51,240
that's uh

1048
00:58:51,240 --> 00:58:54,859
bad example I know but the

1049
00:58:54,859 --> 00:58:57,180
concept of something hidden in plain

1050
00:58:57,180 --> 00:59:00,540
sight is the lesson here uh I've seen

1051
00:59:00,540 --> 00:59:02,640
this in CTF but I don't think we did

1052
00:59:02,640 --> 00:59:04,380
something like this in North Tech ever

1053
00:59:04,380 --> 00:59:05,640
and I don't think there's stuff like

1054
00:59:05,640 --> 00:59:08,040
that at hack Fest is there I saw that in

1055
00:59:08,040 --> 00:59:10,700
the real world I guess

1056
00:59:10,700 --> 00:59:13,440
something like that so it really happens

1057
00:59:13,440 --> 00:59:15,599
so it's not really that problem okay

1058
00:59:15,599 --> 00:59:18,780
okay cool yeah it is

1059
00:59:18,780 --> 00:59:21,720
and and cryptography they say it's the

1060
00:59:21,720 --> 00:59:24,480
kurkash prince of kirchhoff's principle

1061
00:59:24,480 --> 00:59:27,299
is that the the power the resistance of

1062
00:59:27,299 --> 00:59:29,520
your cryptography must be in the key not

1063
00:59:29,520 --> 00:59:31,380
in the algorithm this is why we've been

1064
00:59:31,380 --> 00:59:35,520
doing for years in crypto but prior to

1065
00:59:35,520 --> 00:59:39,240
his statement a lot of encryption was it

1066
00:59:39,240 --> 00:59:42,180
was in the algorithm like

1067
00:59:42,180 --> 00:59:44,760
um you know in the Roman days they would

1068
00:59:44,760 --> 00:59:47,099
tattoo a message on the head of someone

1069
00:59:47,099 --> 00:59:51,000
and then wait for the hair to grow and

1070
00:59:51,000 --> 00:59:53,579
then uh when you receive the slave you

1071
00:59:53,579 --> 00:59:55,319
shave the head and you have the message

1072
00:59:55,319 --> 00:59:58,520
The Secret Message this doesn't respect

1073
00:59:58,520 --> 01:00:02,280
kirkash principle because if you know

1074
01:00:02,280 --> 01:00:04,319
the algorithm you're just gonna shave

1075
01:00:04,319 --> 01:00:06,180
everyone and you're gonna find the

1076
01:00:06,180 --> 01:00:09,119
secrets so this is like this is not

1077
01:00:09,119 --> 01:00:12,119
against a kirchhoff's principle sound

1078
01:00:12,119 --> 01:00:15,420
because clearly if you know someone's

1079
01:00:15,420 --> 01:00:16,740
gonna hide something like that by

1080
01:00:16,740 --> 01:00:19,559
putting white on white then you you will

1081
01:00:19,559 --> 01:00:22,400
find their secrets

1082
01:00:23,700 --> 01:00:26,059
but so up

1083
01:00:26,059 --> 01:00:30,420
and correct and well we had many saw we

1084
01:00:30,420 --> 01:00:32,640
had 10 songs before I solved it so

1085
01:00:32,640 --> 01:00:34,559
congratulations

1086
01:00:34,559 --> 01:00:37,859
and all I did was search for flag now

1087
01:00:37,859 --> 01:00:41,940
this is the same as cha as uh as the

1088
01:00:41,940 --> 01:00:44,400
challenge document one but there's a

1089
01:00:44,400 --> 01:00:47,400
there's a hidden lesson here again and

1090
01:00:47,400 --> 01:00:50,400
it's uh so where to find that and and

1091
01:00:50,400 --> 01:00:53,099
this I had in a real estate at hackers

1092
01:00:53,099 --> 01:00:56,099
and when I I was told the solution I was

1093
01:00:56,099 --> 01:00:59,220
really pissed off so I remember for all

1094
01:00:59,220 --> 01:01:02,460
my life uh the the the technique that

1095
01:01:02,460 --> 01:01:06,420
was used but so if we take the text for

1096
01:01:06,420 --> 01:01:10,440
example and we uh copy and we paste it

1097
01:01:10,440 --> 01:01:12,900
in notepad notepad isn't Rich you know

1098
01:01:12,900 --> 01:01:16,500
notepad it's just whatever you had right

1099
01:01:16,500 --> 01:01:18,180
and so

1100
01:01:18,180 --> 01:01:21,480
is is it revealing something that we

1101
01:01:21,480 --> 01:01:22,740
didn't expect

1102
01:01:22,740 --> 01:01:27,439
let's not do notepad let's do uh

1103
01:01:30,180 --> 01:01:33,859
let's do yeah local

1104
01:01:37,079 --> 01:01:39,540
so if we paste it in whatever text

1105
01:01:39,540 --> 01:01:40,859
editor

1106
01:01:40,859 --> 01:01:44,040
so what we have is less security from F6

1107
01:01:44,040 --> 01:01:49,260
F capital f a r capital L vast capital a

1108
01:01:49,260 --> 01:01:51,720
capital j

1109
01:01:51,720 --> 01:01:54,839
so from there and then it's a dash right

1110
01:01:54,839 --> 01:01:59,099
so from there you could do f l a j dash

1111
01:01:59,099 --> 01:02:04,380
and then it's l e f l a

1112
01:02:04,380 --> 01:02:07,200
J B blah blah blah

1113
01:02:07,200 --> 01:02:10,680
now what we're gonna do here is another

1114
01:02:10,680 --> 01:02:14,640
opportunity so a classic Defcon quals

1115
01:02:14,640 --> 01:02:16,140
challenge would be to do something

1116
01:02:16,140 --> 01:02:19,500
simple like that but at a scale that you

1117
01:02:19,500 --> 01:02:21,180
will not be able to solve it without

1118
01:02:21,180 --> 01:02:24,119
programming this is a very classical way

1119
01:02:24,119 --> 01:02:27,299
uh that they operate the people at

1120
01:02:27,299 --> 01:02:28,980
Defcon

1121
01:02:28,980 --> 01:02:32,220
so let's assume it's a super long flag

1122
01:02:32,220 --> 01:02:34,260
and it cannot be done and let's try to

1123
01:02:34,260 --> 01:02:37,140
build it build a solution using the

1124
01:02:37,140 --> 01:02:41,880
computer and uh and do it quickly

1125
01:02:41,880 --> 01:02:44,760
now we're gonna so the first word with

1126
01:02:44,760 --> 01:02:48,960
this is the is this one

1127
01:02:48,960 --> 01:02:53,339
and uh this is probably the last like

1128
01:02:53,339 --> 01:02:55,500
security paper message is okay so let's

1129
01:02:55,500 --> 01:02:59,460
just pick this string specifically

1130
01:02:59,460 --> 01:03:01,680
and then let's whip up the good old

1131
01:03:01,680 --> 01:03:05,760
IPython console so python has a good

1132
01:03:05,760 --> 01:03:08,579
repo so a network Patrol that you can

1133
01:03:08,579 --> 01:03:11,099
program interactively with but IPython

1134
01:03:11,099 --> 01:03:12,420
is better because it has syntax

1135
01:03:12,420 --> 01:03:14,160
highlighting and it will autocomplete

1136
01:03:14,160 --> 01:03:16,619
apis so I often

1137
01:03:16,619 --> 01:03:18,960
work with something like that

1138
01:03:18,960 --> 01:03:22,980
now you can uh uh you know like I am

1139
01:03:22,980 --> 01:03:25,619
giving this as a string

1140
01:03:25,619 --> 01:03:29,579
and now what I want to do is okay let's

1141
01:03:29,579 --> 01:03:35,059
get all the words so I can try to do uh

1142
01:03:35,059 --> 01:03:38,160
split on Spaces

1143
01:03:38,160 --> 01:03:40,140
now I have a list

1144
01:03:40,140 --> 01:03:45,420
of words where the last letter is of

1145
01:03:45,420 --> 01:03:50,819
Interest okay now uh I can get into a

1146
01:03:50,819 --> 01:03:56,220
list continuation mode and try to do

1147
01:03:56,220 --> 01:03:58,380
uh four

1148
01:03:58,380 --> 01:04:03,420
c n so now I am doing I want a character

1149
01:04:03,420 --> 01:04:05,940
the the

1150
01:04:05,940 --> 01:04:09,780
now I am iterating on a list okay why I

1151
01:04:09,780 --> 01:04:11,180
can't move

1152
01:04:11,180 --> 01:04:12,859
okay

1153
01:04:12,859 --> 01:04:16,859
now I am iterating in the list okay and

1154
01:04:16,859 --> 01:04:20,640
if I do c4c in the split I will get the

1155
01:04:20,640 --> 01:04:22,980
words again but now I have C which is

1156
01:04:22,980 --> 01:04:25,859
the each word but I want the last

1157
01:04:25,859 --> 01:04:28,500
character how can I get the last

1158
01:04:28,500 --> 01:04:33,059
character in Python I think it's this

1159
01:04:33,059 --> 01:04:36,240
no this is reverse uh

1160
01:04:36,240 --> 01:04:39,078
this

1161
01:04:39,240 --> 01:04:41,880
yeah okay so this is the last character

1162
01:04:41,880 --> 01:04:43,680
so this is what I want to use in my

1163
01:04:43,680 --> 01:04:45,180
continuation

1164
01:04:45,180 --> 01:04:47,779
so

1165
01:04:50,940 --> 01:04:54,839
here minus one and then the rest

1166
01:04:54,839 --> 01:04:58,920
so now oh now I have uh the the last

1167
01:04:58,920 --> 01:05:02,700
character of every word but still in a

1168
01:05:02,700 --> 01:05:03,480
list

1169
01:05:03,480 --> 01:05:07,640
and now I can join that list

1170
01:05:07,940 --> 01:05:12,540
on uh and join the API is you need to

1171
01:05:12,540 --> 01:05:14,760
use a string

1172
01:05:14,760 --> 01:05:16,559
so I'm doing

1173
01:05:16,559 --> 01:05:20,940
an empty string join this list of empty

1174
01:05:20,940 --> 01:05:23,480
uh

1175
01:05:23,480 --> 01:05:28,680
of of empty uh not empty of the last

1176
01:05:28,680 --> 01:05:31,140
character I'm interested in now clearly

1177
01:05:31,140 --> 01:05:33,260
there's a problem because I have

1178
01:05:33,260 --> 01:05:36,960
semicolon and commas how can I make my

1179
01:05:36,960 --> 01:05:40,799
one-liner even better I can replace the

1180
01:05:40,799 --> 01:05:43,799
characters I can chain and replace with

1181
01:05:43,799 --> 01:05:46,920
a coma to nothing

1182
01:05:46,920 --> 01:05:49,380
this this does that get me further along

1183
01:05:49,380 --> 01:05:51,599
okay so I have a list I need to do that

1184
01:05:51,599 --> 01:05:54,119
before the split because I want to work

1185
01:05:54,119 --> 01:05:58,260
in string context not in list context

1186
01:05:58,260 --> 01:06:03,200
and then split afterwards all right

1187
01:06:12,660 --> 01:06:15,359
okay I'm getting closer but I still have

1188
01:06:15,359 --> 01:06:18,420
the coma and the dots so let's add two

1189
01:06:18,420 --> 01:06:21,020
more replace

1190
01:06:23,880 --> 01:06:26,339
again I'm going a little bit fast here

1191
01:06:26,339 --> 01:06:30,299
but the the lesson is uh like a little

1192
01:06:30,299 --> 01:06:32,940
bit of scripting can go a long way and

1193
01:06:32,940 --> 01:06:34,859
this is the kind of scripting by the way

1194
01:06:34,859 --> 01:06:39,059
that uh chat GPT is really good at so if

1195
01:06:39,059 --> 01:06:41,640
you haven't played with it you should

1196
01:06:41,640 --> 01:06:44,339
because otherwise we will be replaced by

1197
01:06:44,339 --> 01:06:46,319
machines

1198
01:06:46,319 --> 01:06:49,980
um but so we need to be smarter than the

1199
01:06:49,980 --> 01:06:53,280
machines we need to leverage them so

1200
01:06:53,280 --> 01:06:56,839
now we have a

1201
01:06:57,480 --> 01:07:02,160
we have a something odd in there but we

1202
01:07:02,160 --> 01:07:03,900
have enough that we can probably figure

1203
01:07:03,900 --> 01:07:05,220
it out

1204
01:07:05,220 --> 01:07:09,780
um so uh uh the the we saw in the

1205
01:07:09,780 --> 01:07:13,500
original string that there was one

1206
01:07:13,500 --> 01:07:17,599
condition that didn't work properly

1207
01:07:21,480 --> 01:07:25,799
so we see here is there was no l so this

1208
01:07:25,799 --> 01:07:29,220
we skipped this the T here and then this

1209
01:07:29,220 --> 01:07:32,720
is French so it's

1210
01:07:34,940 --> 01:07:37,740
we can probably figure the subset of

1211
01:07:37,740 --> 01:07:40,680
French that is real from that here so

1212
01:07:40,680 --> 01:07:43,740
you know again in five minutes we

1213
01:07:43,740 --> 01:07:46,680
whipped out a really quick uh scripting

1214
01:07:46,680 --> 01:07:50,700
solution that we could uh scale and this

1215
01:07:50,700 --> 01:07:53,539
comes with practice you know you cannot

1216
01:07:53,539 --> 01:07:57,480
necessarily succeed on the first run and

1217
01:07:57,480 --> 01:08:00,780
but list continuations in Python is a

1218
01:08:00,780 --> 01:08:03,180
very powerful construct and gets a lot

1219
01:08:03,180 --> 01:08:06,780
done in in a one-liner but

1220
01:08:06,780 --> 01:08:09,119
and and this is the the opportunity of

1221
01:08:09,119 --> 01:08:12,240
CTF code you don't have to you know do

1222
01:08:12,240 --> 01:08:14,460
ever anything again with it it can be as

1223
01:08:14,460 --> 01:08:16,319
obscure as you want as long as you got

1224
01:08:16,319 --> 01:08:18,060
the flag it doesn't matter it doesn't

1225
01:08:18,060 --> 01:08:20,339
have to be maintainable

1226
01:08:20,339 --> 01:08:26,460
so uh backslash x a zero I think is a

1227
01:08:26,460 --> 01:08:29,179
new line or something like that that got

1228
01:08:29,179 --> 01:08:32,160
slided into here or the a could have

1229
01:08:32,160 --> 01:08:34,799
been from the good character anyway so

1230
01:08:34,799 --> 01:08:36,540
getting rid of that and getting rid of

1231
01:08:36,540 --> 01:08:42,080
the lowercase T submitting and we got it

1232
01:08:42,600 --> 01:08:45,380
Network

1233
01:08:45,620 --> 01:08:49,620
because rctf have pickups pretty much

1234
01:08:49,620 --> 01:08:50,759
true

1235
01:08:50,759 --> 01:08:55,080
so this is a Wireshark challenge I love

1236
01:08:55,080 --> 01:08:57,799
Wireshark

1237
01:09:02,219 --> 01:09:05,100
now but Wireshark can be really

1238
01:09:05,100 --> 01:09:06,719
intimidating

1239
01:09:06,719 --> 01:09:08,399
so

1240
01:09:08,399 --> 01:09:10,679
you have access to all the layers of the

1241
01:09:10,679 --> 01:09:12,738
OSI model

1242
01:09:12,738 --> 01:09:16,020
here and it will highlight the bytes

1243
01:09:16,020 --> 01:09:18,839
that you are interested in too sometimes

1244
01:09:18,839 --> 01:09:20,580
what they they will do is the the

1245
01:09:20,580 --> 01:09:23,580
challenges they will drown you in in

1246
01:09:23,580 --> 01:09:26,279
data you'll have like large Peak gaps

1247
01:09:26,279 --> 01:09:28,020
many things to look at you won't know

1248
01:09:28,020 --> 01:09:30,238
what to do necessarily here we I went

1249
01:09:30,238 --> 01:09:31,219
there

1250
01:09:31,219 --> 01:09:34,259
minimalistic approach again and approach

1251
01:09:34,259 --> 01:09:36,779
that by hand could be solvable

1252
01:09:36,779 --> 01:09:40,259
relatively easily but we will do a

1253
01:09:40,259 --> 01:09:43,439
programmatic solution chaining C sharp

1254
01:09:43,439 --> 01:09:47,460
and python because why not

1255
01:09:47,460 --> 01:09:49,560
um now

1256
01:09:49,560 --> 01:09:53,460
anyone has an idea or a suggestion on

1257
01:09:53,460 --> 01:09:59,040
where could you hide a plug using ping

1258
01:09:59,040 --> 01:10:01,340
so using icmp

1259
01:10:01,340 --> 01:10:06,679
Echo and reply request and Echo reply

1260
01:10:08,640 --> 01:10:13,920
so if we look at a regular

1261
01:10:13,920 --> 01:10:17,900
let's try to do a capture

1262
01:10:19,199 --> 01:10:22,199
oops

1263
01:10:29,140 --> 01:10:33,350
[Music]

1264
01:10:33,780 --> 01:10:37,860
okay so if I ping from my system

1265
01:10:37,860 --> 01:10:40,580
on Google

1266
01:10:42,900 --> 01:10:46,099
this looks like this

1267
01:10:47,520 --> 01:10:50,060
so the the

1268
01:10:50,060 --> 01:10:53,460
layers of ping have Echo we have a

1269
01:10:53,460 --> 01:10:56,640
checksum you have data ah data

1270
01:10:56,640 --> 01:11:00,300
interesting so it seems to be you know

1271
01:11:00,300 --> 01:11:01,560
stuff

1272
01:11:01,560 --> 01:11:02,940
and then

1273
01:11:02,940 --> 01:11:06,239
uh some characters and then zero one two

1274
01:11:06,239 --> 01:11:08,699
three four five six seven on Windows

1275
01:11:08,699 --> 01:11:10,560
it's another one that is very specific

1276
01:11:10,560 --> 01:11:13,440
right it's ABCD or something so

1277
01:11:13,440 --> 01:11:15,659
basically it looks like

1278
01:11:15,659 --> 01:11:18,300
it doesn't matter what isn't the data of

1279
01:11:18,300 --> 01:11:21,480
a ping and interestingly enough it is

1280
01:11:21,480 --> 01:11:24,659
symmetric so the data of the reply and

1281
01:11:24,659 --> 01:11:28,260
the data of the request is the same

1282
01:11:28,260 --> 01:11:31,199
and now I will slide in a little you

1283
01:11:31,199 --> 01:11:33,719
know classroom thing that I remember but

1284
01:11:33,719 --> 01:11:35,640
that does is not important for anyone

1285
01:11:35,640 --> 01:11:37,980
the reason they were doing this is

1286
01:11:37,980 --> 01:11:40,800
because before check summing there was

1287
01:11:40,800 --> 01:11:43,260
corruption at the electrical level that

1288
01:11:43,260 --> 01:11:44,900
will introduce change

1289
01:11:44,900 --> 01:11:48,840
changes in the data and so by using ping

1290
01:11:48,840 --> 01:11:50,580
they could detect that kind of problem

1291
01:11:50,580 --> 01:11:53,340
because the response wouldn't be exactly

1292
01:11:53,340 --> 01:11:56,100
the same as the the request and they

1293
01:11:56,100 --> 01:11:58,920
could detect issues but because of

1294
01:11:58,920 --> 01:12:01,560
modern networking this is just now a

1295
01:12:01,560 --> 01:12:04,560
legacy something left in there that is

1296
01:12:04,560 --> 01:12:08,600
just useful to plug to sound smart

1297
01:12:08,600 --> 01:12:12,540
now let's go back to our pickup and look

1298
01:12:12,540 --> 01:12:14,699
at

1299
01:12:14,699 --> 01:12:17,400
the the data portion

1300
01:12:17,400 --> 01:12:19,320
what we have is

1301
01:12:19,320 --> 01:12:22,920
something something and then capital f

1302
01:12:22,920 --> 01:12:26,699
and the reply is the same

1303
01:12:26,699 --> 01:12:31,560
now what's the next packet oh capital l

1304
01:12:31,560 --> 01:12:34,260
what's the reply capital L what's the

1305
01:12:34,260 --> 01:12:37,199
next packet capital a

1306
01:12:37,199 --> 01:12:39,780
starts to make sense right

1307
01:12:39,780 --> 01:12:42,440
so

1308
01:12:43,199 --> 01:12:44,880
um

1309
01:12:44,880 --> 01:12:49,020
if you want to do a network extraction

1310
01:12:49,020 --> 01:12:53,040
data extraction at scale you can use

1311
01:12:53,040 --> 01:12:57,960
t-sharp t-sharp will rely on specific

1312
01:12:57,960 --> 01:13:00,300
um you basically give it attributes that

1313
01:13:00,300 --> 01:13:02,580
of the data you're interested in too by

1314
01:13:02,580 --> 01:13:04,500
default it's probably it's not

1315
01:13:04,500 --> 01:13:06,480
interesting necessarily let's take a

1316
01:13:06,480 --> 01:13:08,599
look

1317
01:13:09,600 --> 01:13:12,420
so by default well it's interesting as a

1318
01:13:12,420 --> 01:13:13,860
force assignment

1319
01:13:13,860 --> 01:13:16,920
but not for uh for a CTF player so it

1320
01:13:16,920 --> 01:13:19,140
has like timestamp IP addresses and

1321
01:13:19,140 --> 01:13:20,940
stuff like that now

1322
01:13:20,940 --> 01:13:23,699
you can put it in a Mode called the T

1323
01:13:23,699 --> 01:13:25,739
fields

1324
01:13:25,739 --> 01:13:29,480
uh is it detailed

1325
01:13:33,360 --> 01:13:37,199
but okay capital T yeah okay so you can

1326
01:13:37,199 --> 01:13:39,960
put it in a Mode called field that will

1327
01:13:39,960 --> 01:13:44,120
tell it to go after the

1328
01:13:44,120 --> 01:13:48,600
uh the the specific fields that you are

1329
01:13:48,600 --> 01:13:51,480
interested into which will by default I

1330
01:13:51,480 --> 01:13:54,000
believe tab separated so that's outputs

1331
01:13:54,000 --> 01:13:56,460
nice on the terminal so I put it in this

1332
01:13:56,460 --> 01:13:58,800
mode and now what I want to extract and

1333
01:13:58,800 --> 01:14:02,580
look at is data how do I know what's the

1334
01:14:02,580 --> 01:14:05,159
name of that field in

1335
01:14:05,159 --> 01:14:06,140
um

1336
01:14:06,140 --> 01:14:12,980
uh on a t-sharp common line I know by uh

1337
01:14:12,980 --> 01:14:15,780
by doing using this function here

1338
01:14:15,780 --> 01:14:19,500
prepare as a filter so if I do this it

1339
01:14:19,500 --> 01:14:23,159
will put me as a filter on top a test

1340
01:14:23,159 --> 01:14:26,340
and I can see data that data equals

1341
01:14:26,340 --> 01:14:27,480
something okay

1342
01:14:27,480 --> 01:14:29,340
I'm gonna give it back another example

1343
01:14:29,340 --> 01:14:30,920
just to make it more

1344
01:14:30,920 --> 01:14:34,940
obviously is a little bit small right

1345
01:14:38,060 --> 01:14:40,679
yeah okay

1346
01:14:40,679 --> 01:14:43,440
um the so let's say I want to extract

1347
01:14:43,440 --> 01:14:44,719
automatically

1348
01:14:44,719 --> 01:14:49,620
the uh time to live okay how would I do

1349
01:14:49,620 --> 01:14:50,460
that

1350
01:14:50,460 --> 01:14:54,659
you go prepare as a filter selected and

1351
01:14:54,659 --> 01:14:57,480
you see ip.ptl is the way to extract

1352
01:14:57,480 --> 01:15:02,360
that so if we put ip.tl in our t-sharp

1353
01:15:02,360 --> 01:15:05,520
uh here let me

1354
01:15:05,520 --> 01:15:09,000
Zoom back okay ip.ppl what will happen

1355
01:15:09,000 --> 01:15:12,440
is that for each packet I will have

1356
01:15:12,440 --> 01:15:17,100
ip.ctl okay so this is a very useful tip

1357
01:15:17,100 --> 01:15:21,120
to know what what are the fields names

1358
01:15:21,120 --> 01:15:24,780
on the the very detailed information

1359
01:15:24,780 --> 01:15:26,940
that wiresharks divides now the one

1360
01:15:26,940 --> 01:15:29,219
we're interested in is that data

1361
01:15:29,219 --> 01:15:32,520
so data that data as we found earlier

1362
01:15:32,520 --> 01:15:36,360
let's take a look at that later data ah

1363
01:15:36,360 --> 01:15:38,280
it's cool

1364
01:15:38,280 --> 01:15:40,679
I would have expected to have it in as a

1365
01:15:40,679 --> 01:15:44,640
string so it's kind of uh disappointing

1366
01:15:44,640 --> 01:15:48,980
but python to the rescue

1367
01:15:53,460 --> 01:15:56,940
how did I train the T-shirt to the

1368
01:15:56,940 --> 01:15:59,340
python

1369
01:15:59,340 --> 01:16:03,060
oh yeah I remember I remember okay

1370
01:16:03,060 --> 01:16:06,900
so another really cool trick with uh

1371
01:16:06,900 --> 01:16:09,480
t-sharp oh you know what no I'm gonna

1372
01:16:09,480 --> 01:16:11,219
show you another two

1373
01:16:11,219 --> 01:16:14,400
because the IPython console is cool but

1374
01:16:14,400 --> 01:16:17,699
it's not the self-documenting

1375
01:16:17,699 --> 01:16:21,239
by that I mean that tomorrow you don't

1376
01:16:21,239 --> 01:16:24,060
remember the python IPython code you

1377
01:16:24,060 --> 01:16:26,100
wrote to solve The Challenge from the

1378
01:16:26,100 --> 01:16:28,640
day before how can you build something

1379
01:16:28,640 --> 01:16:31,920
that is self-documenting

1380
01:16:31,920 --> 01:16:34,560
so that you will remember or you know be

1381
01:16:34,560 --> 01:16:36,840
able to show to your friends or do a

1382
01:16:36,840 --> 01:16:38,760
write-up for the CTF

1383
01:16:38,760 --> 01:16:43,320
so I'm a big fan of Jupiter notebooks

1384
01:16:43,320 --> 01:16:47,100
these are basically uh uh

1385
01:16:47,100 --> 01:16:48,260
um

1386
01:16:48,260 --> 01:16:52,080
python interpreters built in a web

1387
01:16:52,080 --> 01:16:53,159
browser

1388
01:16:53,159 --> 01:16:56,640
okay so we're gonna I I use a lot that a

1389
01:16:56,640 --> 01:16:59,580
lot for research so now I will create a

1390
01:16:59,580 --> 01:17:01,920
python kernel

1391
01:17:01,920 --> 01:17:05,280
and one of the little known feature of

1392
01:17:05,280 --> 01:17:07,020
the Jupiter notebook so so this is

1393
01:17:07,020 --> 01:17:09,900
basically an IPython notebook like uh I

1394
01:17:09,900 --> 01:17:11,100
can do

1395
01:17:11,100 --> 01:17:15,540
you know hello and then print s okay I

1396
01:17:15,540 --> 01:17:19,080
run that I get hello I could do you know

1397
01:17:19,080 --> 01:17:24,179
uh 23 plus 47 and print that and it will

1398
01:17:24,179 --> 01:17:25,199
run okay

1399
01:17:25,199 --> 01:17:28,199
now what uh things that not a lot of

1400
01:17:28,199 --> 01:17:31,320
people know is that if you pre-pamped

1401
01:17:31,320 --> 01:17:35,219
with a exclamation mark it will execute

1402
01:17:35,219 --> 01:17:38,219
a shell command but you can also save

1403
01:17:38,219 --> 01:17:41,040
that output in a variable

1404
01:17:41,040 --> 01:17:44,580
which means that uh you get like air you

1405
01:17:44,580 --> 01:17:47,340
get a list with the content of the

1406
01:17:47,340 --> 01:17:50,640
current folder okay so now I save the

1407
01:17:50,640 --> 01:17:52,980
t-sharp command previously what we're

1408
01:17:52,980 --> 01:17:56,580
gonna have now is uh uh a list of

1409
01:17:56,580 --> 01:17:57,960
packets

1410
01:17:57,960 --> 01:18:00,120
with the content

1411
01:18:00,120 --> 01:18:02,340
the file doesn't exist of course because

1412
01:18:02,340 --> 01:18:06,239
I am in that directory

1413
01:18:06,239 --> 01:18:09,600
so now I have a list of the packets of

1414
01:18:09,600 --> 01:18:12,179
the data I realized that it's all the

1415
01:18:12,179 --> 01:18:15,780
same so what I want is the last byte but

1416
01:18:15,780 --> 01:18:18,960
this is X encoded so I need to extract

1417
01:18:18,960 --> 01:18:21,960
the last two characters so one character

1418
01:18:21,960 --> 01:18:27,260
two character is one byte in x

1419
01:18:27,300 --> 01:18:30,719
um uh so yeah cyber Chef could could

1420
01:18:30,719 --> 01:18:35,179
make that clear I guess so cyber chef

1421
01:18:35,179 --> 01:18:41,699
46 in from X means F right so you we

1422
01:18:41,699 --> 01:18:44,219
could solve it like that

1423
01:18:44,219 --> 01:18:46,140
you know

1424
01:18:46,140 --> 01:18:48,420
pasting uh

1425
01:18:48,420 --> 01:18:51,480
uh one at a time

1426
01:18:51,480 --> 01:18:54,440
here

1427
01:18:54,659 --> 01:18:57,900
where is my cyber shift there like we

1428
01:18:57,900 --> 01:19:00,480
could like you know copy and paste but

1429
01:19:00,480 --> 01:19:03,060
again we're gonna do it the Defcon large

1430
01:19:03,060 --> 01:19:04,920
scale mode so we're not gonna do that

1431
01:19:04,920 --> 01:19:07,679
but but many people in CTF would have

1432
01:19:07,679 --> 01:19:09,360
solved it like that and there's no

1433
01:19:09,360 --> 01:19:11,699
problem doing so as long as you got the

1434
01:19:11,699 --> 01:19:13,260
flag as long as you have the job done

1435
01:19:13,260 --> 01:19:14,640
it's great

1436
01:19:14,640 --> 01:19:17,520
but so but we're gonna try to do it in

1437
01:19:17,520 --> 01:19:19,739
the programmatic fashion so I have this

1438
01:19:19,739 --> 01:19:24,000
output a list of packets now there is a

1439
01:19:24,000 --> 01:19:27,120
copy like the second packet I'm not

1440
01:19:27,120 --> 01:19:29,340
interested in so I want to drop

1441
01:19:29,340 --> 01:19:33,380
one out of two from the list

1442
01:19:33,840 --> 01:19:36,199
if I had rehearsed I would remember

1443
01:19:36,199 --> 01:19:40,199
exactly the way to do it cleanly I don't

1444
01:19:40,199 --> 01:19:43,380
remember now so we're gonna do the good

1445
01:19:43,380 --> 01:19:46,520
old-fashioned stack overflow

1446
01:19:46,520 --> 01:19:54,380
python list keep one out of two items

1447
01:19:55,679 --> 01:19:58,920
and the answer is

1448
01:19:58,920 --> 01:20:01,820
complicated

1449
01:20:03,420 --> 01:20:06,620
that's not what I want

1450
01:20:10,800 --> 01:20:11,900
to

1451
01:20:11,900 --> 01:20:15,420
keep only one out of the like Drop I

1452
01:20:15,420 --> 01:20:18,780
have basically I have two F's I want

1453
01:20:18,780 --> 01:20:23,280
only one F like keep one out of two

1454
01:20:23,280 --> 01:20:27,199
like only the pairwise

1455
01:20:37,860 --> 01:20:41,839
have something more elegant somewhere

1456
01:20:42,140 --> 01:20:46,299
[Music]

1457
01:20:58,199 --> 01:21:00,860
beautiful

1458
01:21:01,640 --> 01:21:05,179
letter okay

1459
01:21:05,179 --> 01:21:08,940
no there's a way to do that in the list

1460
01:21:08,940 --> 01:21:13,759
context one sec okay it's I think it's

1461
01:21:17,520 --> 01:21:20,600
Ah that's it

1462
01:21:21,239 --> 01:21:24,239
so yeah so this will keep everyone out

1463
01:21:24,239 --> 01:21:27,360
of the two it's very easy and fast no

1464
01:21:27,360 --> 01:21:29,100
Loop required but it's more harder to

1465
01:21:29,100 --> 01:21:32,040
understand and now okay so now I have a

1466
01:21:32,040 --> 01:21:34,500
subset of my problem now I want to

1467
01:21:34,500 --> 01:21:37,020
iterate over each list item and keep

1468
01:21:37,020 --> 01:21:40,440
just the last two characters so list

1469
01:21:40,440 --> 01:21:44,100
continuations back to the rescue

1470
01:21:44,100 --> 01:21:48,179
uh uh CN packets this will give me one

1471
01:21:48,179 --> 01:21:54,060
now I want to grab the last two and what

1472
01:21:54,060 --> 01:21:56,640
does that give this gives me what I'm

1473
01:21:56,640 --> 01:22:00,300
interested in too now I want to cast

1474
01:22:00,300 --> 01:22:04,140
this this is hex so I think this is one

1475
01:22:04,140 --> 01:22:07,080
no no I want

1476
01:22:07,080 --> 01:22:09,800
char

1477
01:22:13,199 --> 01:22:14,699
not char

1478
01:22:14,699 --> 01:22:18,919
string as long uh

1479
01:22:28,860 --> 01:22:31,500
so now I'm close to the solution so I am

1480
01:22:31,500 --> 01:22:34,980
okay so let's just bubble that back we

1481
01:22:34,980 --> 01:22:37,560
are dropping one out of every two entry

1482
01:22:37,560 --> 01:22:40,320
because we had the Ping and the reply so

1483
01:22:40,320 --> 01:22:42,840
we want only one because the data is

1484
01:22:42,840 --> 01:22:46,860
exactly the same now for each in that

1485
01:22:46,860 --> 01:22:49,320
list so a list continuation is always

1486
01:22:49,320 --> 01:22:53,520
read outside in for each in that list I

1487
01:22:53,520 --> 01:22:56,540
am doing keeping the last two characters

1488
01:22:56,540 --> 01:23:00,900
this is an an X so I'm turning it into

1489
01:23:00,900 --> 01:23:04,440
an integer but an X is base 16 so I need

1490
01:23:04,440 --> 01:23:07,020
to tell it that is base 16. now I have

1491
01:23:07,020 --> 01:23:09,600
an integer and I'm turning that integer

1492
01:23:09,600 --> 01:23:12,960
into a character uh and now this is a

1493
01:23:12,960 --> 01:23:15,600
list continuation so it will create a

1494
01:23:15,600 --> 01:23:16,560
list

1495
01:23:16,560 --> 01:23:20,340
and I use the trick I used before

1496
01:23:20,340 --> 01:23:22,260
so I join

1497
01:23:22,260 --> 01:23:25,620
on an empty string and I get flag

1498
01:23:25,620 --> 01:23:27,780
Network forensics

1499
01:23:27,780 --> 01:23:29,520
expert

1500
01:23:29,520 --> 01:23:31,080
when you think about it so we're going

1501
01:23:31,080 --> 01:23:32,460
to make the points before the server

1502
01:23:32,460 --> 01:23:35,280
crash that would be about its time to

1503
01:23:35,280 --> 01:23:36,719
crash

1504
01:23:36,719 --> 01:23:38,400
we're good

1505
01:23:38,400 --> 01:23:41,460
um now what is interesting

1506
01:23:41,460 --> 01:23:45,480
um here is look at how tight this is

1507
01:23:45,480 --> 01:23:47,460
right

1508
01:23:47,460 --> 01:23:49,500
so basically

1509
01:23:49,500 --> 01:23:53,640
you know a two-liner to the flag

1510
01:23:53,640 --> 01:23:55,560
it's crazy when you think about all the

1511
01:23:55,560 --> 01:23:57,719
the powerful Expressions that you can

1512
01:23:57,719 --> 01:24:01,080
compact in a in a module that you will

1513
01:24:01,080 --> 01:24:02,880
have your solution saved for you

1514
01:24:02,880 --> 01:24:04,620
self-documenting

1515
01:24:04,620 --> 01:24:09,179
so uh pcap flag here we go

1516
01:24:09,179 --> 01:24:11,580
all right so if I convince you to use

1517
01:24:11,580 --> 01:24:14,420
the notebook uh whoops

1518
01:24:14,420 --> 01:24:17,480
migration plan okay

1519
01:24:17,480 --> 01:24:20,460
uh I hope if I convinced you I think

1520
01:24:20,460 --> 01:24:22,739
it's a great tool to use for research or

1521
01:24:22,739 --> 01:24:24,060
for CTF

1522
01:24:24,060 --> 01:24:26,280
and and even for work like you can

1523
01:24:26,280 --> 01:24:28,320
program your work replace yourself by

1524
01:24:28,320 --> 01:24:32,600
Script and okay so reverse engineering

1525
01:24:32,600 --> 01:24:36,800
uh it's a crack me

1526
01:24:37,020 --> 01:24:40,199
simple and safe to execute crack me so

1527
01:24:40,199 --> 01:24:43,860
why why the asterisks is because

1528
01:24:43,860 --> 01:24:46,320
you need to be careful with executables

1529
01:24:46,320 --> 01:24:48,780
that are provided to you and not don't

1530
01:24:48,780 --> 01:24:51,420
run them on your machine unless or or

1531
01:24:51,420 --> 01:24:55,140
use a VM for that because you don't know

1532
01:24:55,140 --> 01:24:58,739
who built it and it could be uh evil you

1533
01:24:58,739 --> 01:25:02,699
know so it's uh like at North Tech we

1534
01:25:02,699 --> 01:25:06,360
don't do that but we've done ransomware

1535
01:25:06,360 --> 01:25:08,699
like fake Ransom Wares before and you

1536
01:25:08,699 --> 01:25:09,719
don't know

1537
01:25:09,719 --> 01:25:12,360
maybe that the challenge designer never

1538
01:25:12,360 --> 01:25:15,060
intend for harm but but harm could be

1539
01:25:15,060 --> 01:25:18,360
collateral damage uh so the the the the

1540
01:25:18,360 --> 01:25:21,420
advice is always to use a VM

1541
01:25:21,420 --> 01:25:26,580
um uh and not uh not use

1542
01:25:26,580 --> 01:25:30,060
uh not not run it on your own computer

1543
01:25:30,060 --> 01:25:32,219
uh yeah

1544
01:25:32,219 --> 01:25:35,219
I've I've seen like an open CTF at

1545
01:25:35,219 --> 01:25:37,739
Defcon in Vegas I've seen challenge

1546
01:25:37,739 --> 01:25:41,040
designer put like destroy your home

1547
01:25:41,040 --> 01:25:43,320
directory and flags because they were

1548
01:25:43,320 --> 01:25:45,840
like Ah that's cool but I mean it's this

1549
01:25:45,840 --> 01:25:47,880
was 10 years ago it's probably not out

1550
01:25:47,880 --> 01:25:50,280
of fashion by today's standards but you

1551
01:25:50,280 --> 01:25:51,600
still have stuff like that on stack

1552
01:25:51,600 --> 01:25:53,640
Overflow like office or Reddit

1553
01:25:53,640 --> 01:25:55,920
obfuscated commands that will destroy

1554
01:25:55,920 --> 01:25:57,659
your machine so you know you have to be

1555
01:25:57,659 --> 01:26:00,300
careful and cpf they like to you know

1556
01:26:00,300 --> 01:26:03,000
mess with people so I would I would be

1557
01:26:03,000 --> 01:26:03,900
careful

1558
01:26:03,900 --> 01:26:06,540
here I'm gonna run it on my machine just

1559
01:26:06,540 --> 01:26:09,540
because I'm too lazy and I built it like

1560
01:26:09,540 --> 01:26:12,840
I created the source code I compiled it

1561
01:26:12,840 --> 01:26:15,420
myself but uh so this is why I say

1562
01:26:15,420 --> 01:26:17,820
you'll have to trust me on that so we're

1563
01:26:17,820 --> 01:26:21,120
gonna take a look at the easy

1564
01:26:21,120 --> 01:26:23,780
one

1565
01:26:24,659 --> 01:26:27,060
I'm gonna I I always

1566
01:26:27,060 --> 01:26:31,080
either start static or dynamic I think I

1567
01:26:31,080 --> 01:26:34,139
want to start static with you guys so

1568
01:26:34,139 --> 01:26:38,040
static file analysis is you are looking

1569
01:26:38,040 --> 01:26:40,560
at it without executing it so you you

1570
01:26:40,560 --> 01:26:41,580
are

1571
01:26:41,580 --> 01:26:43,800
um leaving it like that

1572
01:26:43,800 --> 01:26:46,860
uh opening it there's no chance of an of

1573
01:26:46,860 --> 01:26:50,219
infection unless it breaks the software

1574
01:26:50,219 --> 01:26:52,920
you're using to analyze it which is very

1575
01:26:52,920 --> 01:26:56,219
very rare I've never seen that before

1576
01:26:56,219 --> 01:26:58,800
um whereas Dynamic analysis is you

1577
01:26:58,800 --> 01:27:01,620
execute it oftentimes with a debugger

1578
01:27:01,620 --> 01:27:04,620
and you look at the state and you try to

1579
01:27:04,620 --> 01:27:07,440
figure out what's what's going on so

1580
01:27:07,440 --> 01:27:10,020
it's difficult to design a good crack me

1581
01:27:10,020 --> 01:27:12,000
because when you think about it this is

1582
01:27:12,000 --> 01:27:15,000
an executable that has the flag in it so

1583
01:27:15,000 --> 01:27:18,300
it means that the job of the designer is

1584
01:27:18,300 --> 01:27:20,880
to make it hard for you to get to that

1585
01:27:20,880 --> 01:27:24,960
flag but not too but not too hard so

1586
01:27:24,960 --> 01:27:28,139
let's take a look at this one given that

1587
01:27:28,139 --> 01:27:29,280
context

1588
01:27:29,280 --> 01:27:32,520
we're gonna use the gidra tool to do

1589
01:27:32,520 --> 01:27:33,480
that

1590
01:27:33,480 --> 01:27:36,060
either Pro is too expensive for my taste

1591
01:27:36,060 --> 01:27:40,460
and so when idra came out I gradually

1592
01:27:40,460 --> 01:27:44,840
stopped using either proof

1593
01:27:45,380 --> 01:27:47,580
you can because it's free and open

1594
01:27:47,580 --> 01:27:49,980
source but for static analysis you could

1595
01:27:49,980 --> 01:27:53,340
do it outside the VM for dynamic like

1596
01:27:53,340 --> 01:27:56,100
we're we're not going to execute it but

1597
01:27:56,100 --> 01:27:58,980
now gidra has a debugger so you can

1598
01:27:58,980 --> 01:28:01,380
execute it so I would advise ghidra

1599
01:28:01,380 --> 01:28:05,600
inside the VM makes sense a lot of sense

1600
01:28:05,639 --> 01:28:07,679
so I'm going to use non-shared project

1601
01:28:07,679 --> 01:28:10,760
because it's simpler

1602
01:28:11,239 --> 01:28:16,500
and where was my up here we go crack me

1603
01:28:16,500 --> 01:28:18,719
and then

1604
01:28:18,719 --> 01:28:20,719
um

1605
01:28:29,890 --> 01:28:33,009
[Music]

1606
01:28:41,980 --> 01:28:48,129
[Music]

1607
01:28:54,400 --> 01:29:01,029
[Music]

1608
01:29:05,219 --> 01:29:08,219
foreign

1609
01:29:19,260 --> 01:29:21,860
foreign

1610
01:29:22,739 --> 01:29:25,800
so and and these online tools are really

1611
01:29:25,800 --> 01:29:28,080
cool for CTF because you don't care

1612
01:29:28,080 --> 01:29:29,940
about the content of the file it's not

1613
01:29:29,940 --> 01:29:33,120
like your company information but be

1614
01:29:33,120 --> 01:29:35,219
careful with like company files on

1615
01:29:35,219 --> 01:29:36,960
services like that because you you don't

1616
01:29:36,960 --> 01:29:38,639
pay you're not paying and you're sending

1617
01:29:38,639 --> 01:29:40,800
them binaries so you know if it's your

1618
01:29:40,800 --> 01:29:42,420
products I wouldn't use something like

1619
01:29:42,420 --> 01:29:43,760
that

1620
01:29:43,760 --> 01:29:46,560
uh we well let's try it out it will

1621
01:29:46,560 --> 01:29:48,179
probably like solve the challenge like

1622
01:29:48,179 --> 01:29:51,060
that right yeah yeah so I'm not gonna

1623
01:29:51,060 --> 01:29:52,980
use that for now

1624
01:29:52,980 --> 01:29:55,199
put that aside

1625
01:29:55,199 --> 01:29:56,760
okay

1626
01:29:56,760 --> 01:29:59,520
um and and gidra every year I do the

1627
01:29:59,520 --> 01:30:02,340
same crack me every year ghidro is

1628
01:30:02,340 --> 01:30:04,620
getting closer and closer to having it

1629
01:30:04,620 --> 01:30:07,620
solved like just looking at it it might

1630
01:30:07,620 --> 01:30:09,960
be the easier that it will do that

1631
01:30:09,960 --> 01:30:11,820
um entirely

1632
01:30:11,820 --> 01:30:15,420
so guidance UI is a bit confusing so we

1633
01:30:15,420 --> 01:30:17,040
created a project but there's nothing

1634
01:30:17,040 --> 01:30:19,320
there you need to import is basically

1635
01:30:19,320 --> 01:30:21,659
the first step Zoom

1636
01:30:21,659 --> 01:30:24,000
so everything starts with an importing

1637
01:30:24,000 --> 01:30:27,000
files which is kind of the the opposite

1638
01:30:27,000 --> 01:30:30,139
way of either

1639
01:30:31,260 --> 01:30:33,260
m m

1640
01:30:33,260 --> 01:30:35,360
crack me

1641
01:30:35,360 --> 01:30:38,520
we're importing it it detected that it's

1642
01:30:38,520 --> 01:30:41,159
an L file so a Linux executable

1643
01:30:41,159 --> 01:30:45,920
and then the dragon to chew on it

1644
01:30:46,860 --> 01:30:50,219
yes analyze it please there's a lot of

1645
01:30:50,219 --> 01:30:53,400
options just analyze

1646
01:30:53,400 --> 01:30:56,940
now it finished so it's a relatively

1647
01:30:56,940 --> 01:30:59,219
small binary

1648
01:30:59,219 --> 01:31:03,480
and now we can take a look at the uh

1649
01:31:03,480 --> 01:31:05,820
what what happened so

1650
01:31:05,820 --> 01:31:09,239
um executable have uh things that are

1651
01:31:09,239 --> 01:31:12,239
exported by default

1652
01:31:12,239 --> 01:31:15,659
and you wanna to analyze the binary

1653
01:31:15,659 --> 01:31:17,639
basically you need to start somewhere

1654
01:31:17,639 --> 01:31:20,400
right and uh some

1655
01:31:20,400 --> 01:31:24,000
like uh hello world in C gets compiled

1656
01:31:24,000 --> 01:31:26,820
Linux gets compiled down to I think it's

1657
01:31:26,820 --> 01:31:30,659
a 16 or 4K executable it's now the the

1658
01:31:30,659 --> 01:31:33,540
what the the C library and compiler's

1659
01:31:33,540 --> 01:31:36,540
ads is huge and so even though start

1660
01:31:36,540 --> 01:31:39,300
looks like the start of your code it's

1661
01:31:39,300 --> 01:31:42,120
actually like libsy rapper that does

1662
01:31:42,120 --> 01:31:44,699
whatever it's not interesting so you

1663
01:31:44,699 --> 01:31:46,920
need to find like what is your real

1664
01:31:46,920 --> 01:31:50,460
entry point and so uh you have a start

1665
01:31:50,460 --> 01:31:53,040
main here and a main here symbol so

1666
01:31:53,040 --> 01:31:56,040
let's double click on that oh now we are

1667
01:31:56,040 --> 01:31:59,100
we're at something interesting so we

1668
01:31:59,100 --> 01:32:00,360
have a main

1669
01:32:00,360 --> 01:32:03,840
has variables it prints performing

1670
01:32:03,840 --> 01:32:06,900
intense computation is a function called

1671
01:32:06,900 --> 01:32:08,400
dramatic

1672
01:32:08,400 --> 01:32:09,659
sounds good

1673
01:32:09,659 --> 01:32:12,659
then there's a compute it prints the

1674
01:32:12,659 --> 01:32:16,560
beginning of a flag it rays

1675
01:32:16,560 --> 01:32:19,560
and then there's a loop doing a

1676
01:32:19,560 --> 01:32:21,000
calculation

1677
01:32:21,000 --> 01:32:24,300
and a put chart 10 10

1678
01:32:24,300 --> 01:32:26,400
in

1679
01:32:26,400 --> 01:32:29,940
X in Char is backslash M so basically

1680
01:32:29,940 --> 01:32:32,940
this is just a new line so we have here

1681
01:32:32,940 --> 01:32:35,000
something basically that prints a flag

1682
01:32:35,000 --> 01:32:39,900
so if we can have access to the lvar1

1683
01:32:39,900 --> 01:32:41,100
variable

1684
01:32:41,100 --> 01:32:44,520
we probably would have the flag now what

1685
01:32:44,520 --> 01:32:49,400
is that raise call right it's weird

1686
01:32:49,400 --> 01:32:52,620
and uh since lb R1 is returned by

1687
01:32:52,620 --> 01:32:55,500
compute maybe we can know

1688
01:32:55,500 --> 01:32:58,320
what's going on here

1689
01:32:58,320 --> 01:33:00,420
so what we have is

1690
01:33:00,420 --> 01:33:04,500
a stack variable so local variables and

1691
01:33:04,500 --> 01:33:09,020
long things that look a lot like

1692
01:33:09,060 --> 01:33:13,400
uh printable characters but that gidra

1693
01:33:13,400 --> 01:33:16,260
disappointingly doesn't show as

1694
01:33:16,260 --> 01:33:19,980
printable character so it's not I I'll

1695
01:33:19,980 --> 01:33:22,020
still be doing that demo because clearly

1696
01:33:22,020 --> 01:33:24,199
they're not figuring out stack strings

1697
01:33:24,199 --> 01:33:26,040
it's okay

1698
01:33:26,040 --> 01:33:28,800
it makes my challenge last longer a

1699
01:33:28,800 --> 01:33:32,580
better life span but so at this point

1700
01:33:32,580 --> 01:33:36,960
someone smart or experienced will be

1701
01:33:36,960 --> 01:33:41,360
like oh uh how can I go back

1702
01:33:41,760 --> 01:33:43,920
will be like

1703
01:33:43,920 --> 01:33:47,760
if if I skip that raise

1704
01:33:47,760 --> 01:33:50,340
I will have the flag because there's a

1705
01:33:50,340 --> 01:33:53,580
this is raising a signal signal can be

1706
01:33:53,580 --> 01:33:55,800
caught or ignored by the operating

1707
01:33:55,800 --> 01:33:59,219
system so let's try running the binary

1708
01:33:59,219 --> 01:34:02,900
and see how far we can get

1709
01:34:03,840 --> 01:34:07,199
so I'm using a hybrid approach now

1710
01:34:07,199 --> 01:34:09,600
new new time I'm do it first time I'm

1711
01:34:09,600 --> 01:34:13,199
doing that so to execute a file that you

1712
01:34:13,199 --> 01:34:14,639
downloaded on Linux you need to make it

1713
01:34:14,639 --> 01:34:16,260
executable it's not executable by

1714
01:34:16,260 --> 01:34:20,100
default so I'm adding uh all will have

1715
01:34:20,100 --> 01:34:24,600
execute execution right so this is

1716
01:34:24,600 --> 01:34:28,679
shown here now if I run the crack me I

1717
01:34:28,679 --> 01:34:31,679
have performing intense computation and

1718
01:34:31,679 --> 01:34:33,840
then a quarter so flag and then

1719
01:34:33,840 --> 01:34:36,300
segmentation fault so this is clearly

1720
01:34:36,300 --> 01:34:38,520
the signal now I'm going to wrap around

1721
01:34:38,520 --> 01:34:43,080
and start it with GDB so the gnu

1722
01:34:43,080 --> 01:34:46,440
debugger the default Linux debugger

1723
01:34:46,440 --> 01:34:50,719
and uh I have a GDB plugin

1724
01:34:50,719 --> 01:34:54,420
uh I strongly advise people to if

1725
01:34:54,420 --> 01:34:56,580
they're serious about doing exploit or

1726
01:34:56,580 --> 01:34:59,699
crack knees to use a GDB plugin GDB by

1727
01:34:59,699 --> 01:35:02,340
default is not is built for people who

1728
01:35:02,340 --> 01:35:04,739
have source code not built for reverse

1729
01:35:04,739 --> 01:35:07,199
engineering or expectation so so a

1730
01:35:07,199 --> 01:35:11,040
plugin will really help the vanilla GDB

1731
01:35:11,040 --> 01:35:13,199
that doesn't show you assembly doesn't

1732
01:35:13,199 --> 01:35:15,120
show you stack doesn't show you anything

1733
01:35:15,120 --> 01:35:17,760
so it's just not helpful so I use only

1734
01:35:17,760 --> 01:35:20,639
BG I'm surprised that it works still not

1735
01:35:20,639 --> 01:35:22,020
doing that often

1736
01:35:22,020 --> 01:35:25,199
and so I launched the program but by

1737
01:35:25,199 --> 01:35:27,179
default since it could be malware it

1738
01:35:27,179 --> 01:35:29,880
will not run it so I need to run it

1739
01:35:29,880 --> 01:35:32,639
I think so I'm gonna do

1740
01:35:32,639 --> 01:35:35,340
R and then I have my performing intense

1741
01:35:35,340 --> 01:35:37,139
computation

1742
01:35:37,139 --> 01:35:39,960
and I see what I see here is the state

1743
01:35:39,960 --> 01:35:42,179
like this is what's not shown by default

1744
01:35:42,179 --> 01:35:47,159
so I have program received a signal so

1745
01:35:47,159 --> 01:35:49,920
it I so this tripped the debugger so I

1746
01:35:49,920 --> 01:35:52,260
still have control of the program

1747
01:35:52,260 --> 01:35:54,719
and it shows me the state of the

1748
01:35:54,719 --> 01:35:56,520
registers

1749
01:35:56,520 --> 01:35:59,520
the disassembly of where I am I am at

1750
01:35:59,520 --> 01:36:02,179
this position in the executable

1751
01:36:02,179 --> 01:36:05,760
uh and this is inside the ellipse I

1752
01:36:05,760 --> 01:36:06,480
believe

1753
01:36:06,480 --> 01:36:10,020
and I have the state of the stack so we

1754
01:36:10,020 --> 01:36:11,820
see that there is a string that we

1755
01:36:11,820 --> 01:36:13,320
haven't seen before

1756
01:36:13,320 --> 01:36:15,960
that is on the stack

1757
01:36:15,960 --> 01:36:18,120
uh and then there's the back trade so

1758
01:36:18,120 --> 01:36:20,219
these are the costs why so you know

1759
01:36:20,219 --> 01:36:22,739
start main called something called main

1760
01:36:22,739 --> 01:36:26,100
called raise and then I'm here

1761
01:36:26,100 --> 01:36:27,840
in raise

1762
01:36:27,840 --> 01:36:30,239
now

1763
01:36:30,239 --> 01:36:32,940
we can ignore a signal the way to ignore

1764
01:36:32,940 --> 01:36:35,400
signal is by pressing continue

1765
01:36:35,400 --> 01:36:38,219
and we have the rest of the flag

1766
01:36:38,219 --> 01:36:40,739
so that's a crack me worth one point

1767
01:36:40,739 --> 01:36:42,300
right

1768
01:36:42,300 --> 01:36:48,360
so uh this uh is uh the easiest way to

1769
01:36:48,360 --> 01:36:51,179
solve that uh challenge

1770
01:36:51,179 --> 01:36:55,380
you could also write the instruction

1771
01:36:55,380 --> 01:36:59,219
pointer to try to skip the problematic

1772
01:36:59,219 --> 01:37:00,179
code

1773
01:37:00,179 --> 01:37:03,060
am I gonna try that do you are you good

1774
01:37:03,060 --> 01:37:05,480
with GDB I need to like

1775
01:37:05,480 --> 01:37:09,000
specify content to a register

1776
01:37:09,000 --> 01:37:12,239
I haven't done this in in a year

1777
01:37:12,239 --> 01:37:13,679
I'll try

1778
01:37:13,679 --> 01:37:16,400
YOLO

1779
01:37:17,699 --> 01:37:20,460
so run

1780
01:37:20,460 --> 01:37:24,060
we're gonna Jam somewhere so I mean this

1781
01:37:24,060 --> 01:37:26,699
is interesting for 101 because it it

1782
01:37:26,699 --> 01:37:29,820
puts you in the State of Mind of the how

1783
01:37:29,820 --> 01:37:32,699
what how the machine works and it gets

1784
01:37:32,699 --> 01:37:34,739
you close to the metal and understanding

1785
01:37:34,739 --> 01:37:36,540
how things happen

1786
01:37:36,540 --> 01:37:40,320
so why are we executing stuff it's

1787
01:37:40,320 --> 01:37:42,900
because an instruction pointer is

1788
01:37:42,900 --> 01:37:47,219
incremented so the uh the uh

1789
01:37:47,219 --> 01:37:50,159
an instruction pointer is incremented by

1790
01:37:50,159 --> 01:37:52,620
the computer and it will fetch the next

1791
01:37:52,620 --> 01:37:55,820
instruction so

1792
01:37:57,719 --> 01:37:59,480
pretty Square

1793
01:37:59,480 --> 01:38:02,718
once the question

1794
01:38:04,260 --> 01:38:07,260
register

1795
01:38:09,780 --> 01:38:11,280
that's good

1796
01:38:11,280 --> 01:38:13,679
we're uh where where I'm gonna google it

1797
01:38:13,679 --> 01:38:16,080
but I'm gonna do the theory first so rip

1798
01:38:16,080 --> 01:38:19,920
is the instruction pointer so this is uh

1799
01:38:19,920 --> 01:38:22,280
somewhere on the CPU has this address

1800
01:38:22,280 --> 01:38:25,199
and this address is the code that is

1801
01:38:25,199 --> 01:38:29,699
being executed and so uh

1802
01:38:29,699 --> 01:38:33,600
what we want to do oh I I I went too far

1803
01:38:33,600 --> 01:38:39,980
what we want to do is to basically put a

1804
01:38:40,920 --> 01:38:43,920
foreign

1805
01:38:54,540 --> 01:38:57,139
run

1806
01:38:57,300 --> 01:39:01,980
and now now you can uh uh you can run

1807
01:39:01,980 --> 01:39:04,320
instructions by instruction so now I

1808
01:39:04,320 --> 01:39:06,179
break I break one into the main so I'm

1809
01:39:06,179 --> 01:39:07,679
in the main function but we know that

1810
01:39:07,679 --> 01:39:09,179
there's a lot of stuff that will happen

1811
01:39:09,179 --> 01:39:12,440
before and you can always use you know

1812
01:39:12,440 --> 01:39:15,600
GDB side by side with the decompiler to

1813
01:39:15,600 --> 01:39:18,780
figure out where you are so um we're

1814
01:39:18,780 --> 01:39:21,600
gonna run this code up to a specific

1815
01:39:21,600 --> 01:39:23,699
point that I don't see yet

1816
01:39:23,699 --> 01:39:27,980
so we could

1817
01:39:28,520 --> 01:39:33,920
break on we can do that

1818
01:39:38,580 --> 01:39:42,679
and then run up to that point

1819
01:39:45,739 --> 01:39:49,620
uh we can uh

1820
01:39:49,620 --> 01:39:52,620
next

1821
01:39:55,199 --> 01:39:58,080
so I so by using next you step over the

1822
01:39:58,080 --> 01:40:00,719
call instead of stepping in the call

1823
01:40:00,719 --> 01:40:03,540
and I will I will and then when you

1824
01:40:03,540 --> 01:40:05,460
press enter you basically reissue the

1825
01:40:05,460 --> 01:40:07,260
last command so I'm gonna try to step

1826
01:40:07,260 --> 01:40:08,580
over the call

1827
01:40:08,580 --> 01:40:11,760
so the compute is a Long Function so it

1828
01:40:11,760 --> 01:40:14,159
took the time to execute and output the

1829
01:40:14,159 --> 01:40:16,560
dots

1830
01:40:16,560 --> 01:40:17,219
um

1831
01:40:17,219 --> 01:40:22,199
can not compute sorry the dramatic

1832
01:40:22,199 --> 01:40:25,560
now computually fast

1833
01:40:25,560 --> 01:40:28,199
and the other the raises here so we're

1834
01:40:28,199 --> 01:40:30,780
gonna break on it

1835
01:40:30,780 --> 01:40:33,380
foreign

1836
01:40:34,219 --> 01:40:37,380
because it's an address continue okay so

1837
01:40:37,380 --> 01:40:39,540
now we're at the spot that we want to

1838
01:40:39,540 --> 01:40:42,540
bypass so what I'm gonna do the

1839
01:40:42,540 --> 01:40:44,280
instruction pointer you can see is

1840
01:40:44,280 --> 01:40:47,040
exactly at this point now what I want to

1841
01:40:47,040 --> 01:40:50,040
do is I want to set our IP to be the

1842
01:40:50,040 --> 01:40:52,560
next thing so it will never execute when

1843
01:40:52,560 --> 01:40:54,179
we say continue we'll never have the

1844
01:40:54,179 --> 01:40:56,219
stack Trace

1845
01:40:56,219 --> 01:40:58,880
address

1846
01:41:06,239 --> 01:41:08,940
you'd use the jump instruction to set it

1847
01:41:08,940 --> 01:41:13,699
and continue okay can I do that

1848
01:41:21,840 --> 01:41:24,440
my message

1849
01:41:32,640 --> 01:41:35,689
[Music]

1850
01:41:40,619 --> 01:41:42,719
so he's saying like you can put the

1851
01:41:42,719 --> 01:41:45,239
address but you can put a cute way that

1852
01:41:45,239 --> 01:41:48,239
will be more easily rememberable but

1853
01:41:48,239 --> 01:41:50,100
you'll see when I we will start looking

1854
01:41:50,100 --> 01:41:52,679
at the Hard variant why this is not

1855
01:41:52,679 --> 01:41:54,659
something you can always afford to do

1856
01:41:54,659 --> 01:41:57,179
uh but uh it will be resolved

1857
01:41:57,179 --> 01:41:58,679
symbolically like that so I need to

1858
01:41:58,679 --> 01:42:03,360
other fancy things all right so we jump

1859
01:42:03,360 --> 01:42:06,300
at that so we skip the stack the the

1860
01:42:06,300 --> 01:42:10,800
signal and we got the print now uh and

1861
01:42:10,800 --> 01:42:14,420
it exit exited normally so we skip the

1862
01:42:14,420 --> 01:42:18,060
uh the what was causing it to crash so

1863
01:42:18,060 --> 01:42:20,460
again you know many ways we can also

1864
01:42:20,460 --> 01:42:24,179
patch it we could like not so the call

1865
01:42:24,179 --> 01:42:26,760
to raise takes I don't know a couple of

1866
01:42:26,760 --> 01:42:29,820
bytes we can knock this replace these

1867
01:42:29,820 --> 01:42:35,000
bytes by uh Xerox uh 80 no 90 0x 90.

1868
01:42:35,000 --> 01:42:38,040
and uh and then when it will execute

1869
01:42:38,040 --> 01:42:39,900
this and then or We Should Skip actually

1870
01:42:39,900 --> 01:42:42,659
these two because this is preparing the

1871
01:42:42,659 --> 01:42:45,000
call so we should skip these two uh

1872
01:42:45,000 --> 01:42:48,540
overwrite these two by zero X 90 and

1873
01:42:48,540 --> 01:42:50,699
then this would just slide so it would

1874
01:42:50,699 --> 01:42:52,860
call and then this will not exist

1875
01:42:52,860 --> 01:42:54,600
anymore and then it will move and jump

1876
01:42:54,600 --> 01:42:57,480
and whatever so there are many ways to

1877
01:42:57,480 --> 01:43:00,000
uh approach a problem like that

1878
01:43:00,000 --> 01:43:01,619
now

1879
01:43:01,619 --> 01:43:04,860
if we want to do it statically from uh

1880
01:43:04,860 --> 01:43:08,639
uh gaidra we need to figure out what's

1881
01:43:08,639 --> 01:43:11,699
going on here uh here we see that there

1882
01:43:11,699 --> 01:43:15,300
is a Char one call so basically this

1883
01:43:15,300 --> 01:43:18,420
long ass string

1884
01:43:18,420 --> 01:43:19,860
which

1885
01:43:19,860 --> 01:43:22,560
maybe backwards could work

1886
01:43:22,560 --> 01:43:23,699
no

1887
01:43:23,699 --> 01:43:28,080
it's confusing uh gaidra but so uh this

1888
01:43:28,080 --> 01:43:31,800
is basically a string that is being fed

1889
01:43:31,800 --> 01:43:36,420
to a Char one uh uh hash and then so the

1890
01:43:36,420 --> 01:43:38,159
flag is actually the show one of

1891
01:43:38,159 --> 01:43:40,619
something we cannot get to that

1892
01:43:40,619 --> 01:43:44,880
something here maybe we could do it uh

1893
01:43:44,880 --> 01:43:48,119
dynamically in uh GDB we could stop at

1894
01:43:48,119 --> 01:43:50,100
the right place where that string is

1895
01:43:50,100 --> 01:43:52,199
assembled and

1896
01:43:52,199 --> 01:43:55,440
um and figure out uh what it is

1897
01:43:55,440 --> 01:43:57,060
so we can run

1898
01:43:57,060 --> 01:44:02,040
break on compute uh continue are we on

1899
01:44:02,040 --> 01:44:06,000
compute not necessarily

1900
01:44:06,000 --> 01:44:11,060
no next as continue

1901
01:44:15,800 --> 01:44:21,239
compute all right so uh

1902
01:44:21,840 --> 01:44:24,800
next

1903
01:44:27,480 --> 01:44:29,659
next

1904
01:44:33,300 --> 01:44:36,300
okay I skipped the first part okay so

1905
01:44:36,300 --> 01:44:38,639
Eric so the last instruction this

1906
01:44:38,639 --> 01:44:43,860
instruction here uh put that uh X and

1907
01:44:43,860 --> 01:44:47,400
the the CPU and in the ARX register and

1908
01:44:47,400 --> 01:44:49,860
you can see that this is there is so if

1909
01:44:49,860 --> 01:44:53,040
I want to take a slow approach I could

1910
01:44:53,040 --> 01:44:56,699
start writing down the various

1911
01:44:56,699 --> 01:45:00,659
um content of that and uh putting it

1912
01:45:00,659 --> 01:45:04,460
somewhere I'm gonna do a new notebook

1913
01:45:06,420 --> 01:45:09,000
so there is

1914
01:45:09,000 --> 01:45:13,020
and then continue

1915
01:45:17,300 --> 01:45:19,580
where is it

1916
01:45:19,580 --> 01:45:23,880
RDX so the the RDX is here so no way

1917
01:45:23,880 --> 01:45:26,840
with spaces

1918
01:45:27,600 --> 01:45:30,440
no way

1919
01:45:32,520 --> 01:45:34,739
ah

1920
01:45:34,739 --> 01:45:37,560
oh it's here

1921
01:45:37,560 --> 01:45:40,940
there is no way

1922
01:45:42,840 --> 01:45:44,460
you

1923
01:45:44,460 --> 01:45:47,600
are always available

1924
01:45:51,420 --> 01:45:53,400
there is no way

1925
01:45:53,400 --> 01:45:58,440
there is no way you are ever go e

1926
01:45:58,440 --> 01:46:01,800
so it got combined or it the it figures

1927
01:46:01,800 --> 01:46:05,540
that this is just a long string

1928
01:46:06,300 --> 01:46:08,460
what does it look like okay now it's

1929
01:46:08,460 --> 01:46:10,920
gonna add it there is no way

1930
01:46:10,920 --> 01:46:14,520
you are ever going too far

1931
01:46:14,520 --> 01:46:17,239
figure

1932
01:46:18,659 --> 01:46:21,659
nothing

1933
01:46:29,750 --> 01:46:30,239
[Applause]

1934
01:46:30,239 --> 01:46:32,239
um

1935
01:46:39,300 --> 01:46:42,300
this

1936
01:46:45,119 --> 01:46:47,760
whoops

1937
01:46:47,760 --> 01:46:49,800
yeah

1938
01:46:49,800 --> 01:46:52,760
so foreign

1939
01:46:52,760 --> 01:46:56,460
so before we do anything with the stack

1940
01:46:56,460 --> 01:46:59,400
so uh and this will happen after the

1941
01:46:59,400 --> 01:47:02,880
string length for sure uh so we can do a

1942
01:47:02,880 --> 01:47:05,760
next again and now I think we have

1943
01:47:05,760 --> 01:47:10,320
completed uh the string so again the

1944
01:47:10,320 --> 01:47:11,460
string is

1945
01:47:11,460 --> 01:47:13,219
um added or

1946
01:47:13,219 --> 01:47:16,020
pushed to the stack

1947
01:47:16,020 --> 01:47:19,679
so the stack is shown here and what

1948
01:47:19,679 --> 01:47:21,360
we're doing here is that we're saying

1949
01:47:21,360 --> 01:47:25,380
show me content of memory as a string so

1950
01:47:25,380 --> 01:47:29,460
slash s means as a string add dollar RSP

1951
01:47:29,460 --> 01:47:32,940
is the value of a point Thing by the RSP

1952
01:47:32,940 --> 01:47:34,100
register

1953
01:47:34,100 --> 01:47:38,639
uh that is this address plus 10 in X so

1954
01:47:38,639 --> 01:47:42,119
how did I find the the plus 10 in X is

1955
01:47:42,119 --> 01:47:46,679
here it's the this here is 10x so by

1956
01:47:46,679 --> 01:47:49,860
doing so now we have there is no way you

1957
01:47:49,860 --> 01:47:52,679
are ever going to figure this out okay I

1958
01:47:52,679 --> 01:47:55,580
have that string

1959
01:47:56,940 --> 01:48:03,980
up and now uh if we want to uh

1960
01:48:05,280 --> 01:48:07,980
we now that we have the string which was

1961
01:48:07,980 --> 01:48:11,280
the hard part with uh uh with

1962
01:48:11,280 --> 01:48:14,580
um gaidra now we have that string we

1963
01:48:14,580 --> 01:48:17,040
know it's doing a string land allocating

1964
01:48:17,040 --> 01:48:20,040
some memory doing the Sha one of the

1965
01:48:20,040 --> 01:48:21,239
string

1966
01:48:21,239 --> 01:48:26,040
and uh then returning so what uh we're

1967
01:48:26,040 --> 01:48:28,800
gonna do is

1968
01:48:28,800 --> 01:48:33,440
the md5 uh one

1969
01:48:46,139 --> 01:48:49,980
so I'm we're gonna do Echo this pipe

1970
01:48:49,980 --> 01:48:53,639
into sha one sum I could do it in Python

1971
01:48:53,639 --> 01:48:55,860
but this is going to be longer uh we're

1972
01:48:55,860 --> 01:48:57,600
gonna do that instead

1973
01:48:57,600 --> 01:48:59,159
and

1974
01:48:59,159 --> 01:49:00,500
um

1975
01:49:00,500 --> 01:49:03,540
self-documenting my solution maybe

1976
01:49:03,540 --> 01:49:06,900
lacking a couple words here and there uh

1977
01:49:06,900 --> 01:49:09,480
and now we're gonna try with submitting

1978
01:49:09,480 --> 01:49:13,638
this with the flag beforehand

1979
01:49:14,159 --> 01:49:18,360
and it's incorrect so

1980
01:49:18,360 --> 01:49:21,559
ah true true

1981
01:49:22,619 --> 01:49:25,320
the echo does add a new line at the end

1982
01:49:25,320 --> 01:49:28,440
of the string should I remember that and

1983
01:49:28,440 --> 01:49:31,380
so because of the nature of hashing this

1984
01:49:31,380 --> 01:49:34,679
will output a very different uh

1985
01:49:34,679 --> 01:49:37,340
executable

1986
01:49:37,520 --> 01:49:40,139
this will generate a very different hash

1987
01:49:40,139 --> 01:49:41,400
because

1988
01:49:41,400 --> 01:49:43,800
I would like to verify it but I'm gonna

1989
01:49:43,800 --> 01:49:46,380
just forgot

1990
01:49:46,380 --> 01:49:49,800
um uh so cryptographic has the strength

1991
01:49:49,800 --> 01:49:51,780
of a cryptographic hash is that to be

1992
01:49:51,780 --> 01:49:53,580
entirely different based on a little

1993
01:49:53,580 --> 01:49:55,500
variation of input so this is what

1994
01:49:55,500 --> 01:49:58,260
happened there was missing our Echo was

1995
01:49:58,260 --> 01:50:02,159
adding a new line and this code wasn't

1996
01:50:02,159 --> 01:50:04,560
uh and by removing it we get a

1997
01:50:04,560 --> 01:50:06,719
completely different hash I'm gonna try

1998
01:50:06,719 --> 01:50:11,000
it if that's our solution

1999
01:50:12,960 --> 01:50:17,100
and we got the flag now uh

2000
01:50:17,100 --> 01:50:22,100
uh let's put it in the decompiler

2001
01:50:33,900 --> 01:50:35,900
um

2002
01:50:43,340 --> 01:50:47,340
can I show just this one yeah

2003
01:50:47,340 --> 01:50:50,340
okay

2004
01:50:52,440 --> 01:50:54,500
um

2005
01:51:01,100 --> 01:51:06,020
it's the compute function is just code

2006
01:51:11,780 --> 01:51:15,179
and another tool that could have been

2007
01:51:15,179 --> 01:51:19,400
very useful in the plot is

2008
01:51:19,800 --> 01:51:22,800
imagine

2009
01:51:34,320 --> 01:51:38,460
it's like spring break uh

2010
01:51:49,080 --> 01:51:51,540
let's try I have it installed I've never

2011
01:51:51,540 --> 01:51:54,420
used it I saw someone at an event I

2012
01:51:54,420 --> 01:51:56,219
actually know one of the guy who worked

2013
01:51:56,219 --> 01:51:58,920
on it but

2014
01:51:58,920 --> 01:52:01,920
well

2015
01:52:19,880 --> 01:52:23,780
online the web page

2016
01:53:00,420 --> 01:53:03,719
so okay well that's a very powerful uh

2017
01:53:03,719 --> 01:53:06,659
thing that I will remember for sure and

2018
01:53:06,659 --> 01:53:07,679
so

2019
01:53:07,679 --> 01:53:12,179
now one thing so this unfortunately uh

2020
01:53:12,179 --> 01:53:15,480
no matter how hard it looked like this

2021
01:53:15,480 --> 01:53:18,600
was the easy mode because the binary was

2022
01:53:18,600 --> 01:53:22,139
not stripped so all of the strings like

2023
01:53:22,139 --> 01:53:25,199
Main and compute and everything that was

2024
01:53:25,199 --> 01:53:28,139
the name of a function are is there

2025
01:53:28,139 --> 01:53:31,380
because it helps debugger understand the

2026
01:53:31,380 --> 01:53:34,980
binary program but production binaries

2027
01:53:34,980 --> 01:53:37,080
are most often stripped because it makes

2028
01:53:37,080 --> 01:53:40,500
the binary smaller then we'll take a

2029
01:53:40,500 --> 01:53:42,000
look at what it looks like it's a

2030
01:53:42,000 --> 01:53:44,659
different Beast

2031
01:53:45,960 --> 01:53:47,960
um

2032
01:53:48,780 --> 01:53:52,580
I need to download it first

2033
01:53:53,730 --> 01:53:56,000
[Music]

2034
01:53:56,000 --> 01:53:59,640
four four four four yeah

2035
01:53:59,640 --> 01:54:03,520
[Music]

2036
01:54:18,000 --> 01:54:20,520
so the difference is like we go like if

2037
01:54:20,520 --> 01:54:24,659
we look at the export man

2038
01:54:24,659 --> 01:54:27,239
if we look at the exports they are they

2039
01:54:27,239 --> 01:54:29,699
are very different than the than earlier

2040
01:54:29,699 --> 01:54:32,100
right we have two functions that were

2041
01:54:32,100 --> 01:54:35,219
identified standard out which apparently

2042
01:54:35,219 --> 01:54:38,239
is an export not sure why

2043
01:54:38,239 --> 01:54:41,699
uh functions we have the the functions

2044
01:54:41,699 --> 01:54:45,360
are like all unnamed functions but this

2045
01:54:45,360 --> 01:54:48,000
assembly or decompiling tools are meant

2046
01:54:48,000 --> 01:54:50,820
for are built for that for you to rename

2047
01:54:50,820 --> 01:54:54,659
so now I'm gonna try to find the main

2048
01:54:54,659 --> 01:54:57,860
I'm not sure okay so this is

2049
01:54:57,860 --> 01:55:01,199
domain right lib C start Main and this

2050
01:55:01,199 --> 01:55:03,480
is still a named function because it's

2051
01:55:03,480 --> 01:55:07,380
part of the ellipse and and it the tool

2052
01:55:07,380 --> 01:55:09,900
knows that it's that because of the way

2053
01:55:09,900 --> 01:55:12,540
the elf is structured and loading but

2054
01:55:12,540 --> 01:55:15,420
now this is here our real name

2055
01:55:15,420 --> 01:55:17,820
and so the practice of reverse

2056
01:55:17,820 --> 01:55:19,980
engineering is basically taking this

2057
01:55:19,980 --> 01:55:24,300
saying rename function writing Main and

2058
01:55:24,300 --> 01:55:26,400
you can have your own naming convention

2059
01:55:26,400 --> 01:55:28,679
like when you're unsure you underscore

2060
01:55:28,679 --> 01:55:31,920
or Z or maybe or whatever and you try to

2061
01:55:31,920 --> 01:55:35,639
go as fast as you can to confirm if it's

2062
01:55:35,639 --> 01:55:38,340
clean or not but now look at this here

2063
01:55:38,340 --> 01:55:40,020
like the

2064
01:55:40,020 --> 01:55:43,800
the the printf is part of the C library

2065
01:55:43,800 --> 01:55:48,119
API so it's there clean but our uh

2066
01:55:48,119 --> 01:55:51,840
dramatic are compute uh everything has

2067
01:55:51,840 --> 01:55:54,840
been like hidden away so if we look at

2068
01:55:54,840 --> 01:55:57,780
this it's still you know doing the same

2069
01:55:57,780 --> 01:56:00,840
shower thing but now there are no

2070
01:56:00,840 --> 01:56:03,960
addresses that can be used to figure out

2071
01:56:03,960 --> 01:56:06,719
and not necessarily sorry names that can

2072
01:56:06,719 --> 01:56:09,060
be used to figure out and when

2073
01:56:09,060 --> 01:56:11,159
statically you know you give it names

2074
01:56:11,159 --> 01:56:13,619
and you move around it's not too bad

2075
01:56:13,619 --> 01:56:15,239
because it will remember the name that

2076
01:56:15,239 --> 01:56:18,360
you've given to stuff but uh then when

2077
01:56:18,360 --> 01:56:21,600
you switch to your um your decompiler

2078
01:56:21,600 --> 01:56:24,060
yeah your debugger

2079
01:56:24,060 --> 01:56:28,080
things are a little bit harder because

2080
01:56:28,080 --> 01:56:32,179
I need to make it executable

2081
01:56:38,040 --> 01:56:40,500
up

2082
01:56:40,500 --> 01:56:42,960
so things are a little bit harder

2083
01:56:42,960 --> 01:56:44,699
because you cannot do brake main you

2084
01:56:44,699 --> 01:56:46,679
don't have a main so you need to figure

2085
01:56:46,679 --> 01:56:52,100
out where is the entry point uh uh it is

2086
01:56:52,920 --> 01:56:55,820
I don't remember

2087
01:56:56,300 --> 01:57:00,840
GDB finding entry point

2088
01:57:00,840 --> 01:57:04,159
uh Apple file

2089
01:57:04,159 --> 01:57:06,179
info file

2090
01:57:06,179 --> 01:57:11,040
so now you have entry point is there so

2091
01:57:11,040 --> 01:57:14,179
the I think the entry point will always

2092
01:57:14,179 --> 01:57:17,340
be yeah if I run I will be in the entry

2093
01:57:17,340 --> 01:57:20,960
point nope it ran

2094
01:57:21,000 --> 01:57:23,540
so it ran up to the crash in this case

2095
01:57:23,540 --> 01:57:26,639
so if you want if you if if it would be

2096
01:57:26,639 --> 01:57:29,040
malware this would have been a mistake

2097
01:57:29,040 --> 01:57:31,619
uh let's try again

2098
01:57:31,619 --> 01:57:37,219
um and do uh a breakpoint on whoops

2099
01:57:39,179 --> 01:57:42,000
there are no symbols so I can't this has

2100
01:57:42,000 --> 01:57:43,139
main anymore

2101
01:57:43,139 --> 01:57:46,380
but I can discuss the entry point

2102
01:57:46,380 --> 01:57:49,580
so info file

2103
01:57:50,719 --> 01:57:55,679
can this ass uh uh this but this is why

2104
01:57:55,679 --> 01:57:58,260
I like whoops

2105
01:57:58,260 --> 01:57:59,460
no

2106
01:57:59,460 --> 01:58:04,139
so this is why I like uh phone dbg or

2107
01:58:04,139 --> 01:58:05,880
other modules like that is I would break

2108
01:58:05,880 --> 01:58:08,520
on the address and then I would run

2109
01:58:08,520 --> 01:58:10,260
until the address and then I would have

2110
01:58:10,260 --> 01:58:12,300
something to then move and and work

2111
01:58:12,300 --> 01:58:16,860
around but this is not our main yet and

2112
01:58:16,860 --> 01:58:19,860
it's still not unclear and I think this

2113
01:58:19,860 --> 01:58:21,840
is Kernel address space

2114
01:58:21,840 --> 01:58:24,179
uh uh maybe not

2115
01:58:24,179 --> 01:58:28,080
don't quote me on that uh I would next

2116
01:58:28,080 --> 01:58:29,840
uh whoops

2117
01:58:29,840 --> 01:58:34,139
step step instructions

2118
01:58:34,139 --> 01:58:36,739
continue

2119
01:58:37,199 --> 01:58:40,339
I don't know what I'm doing

2120
01:58:52,590 --> 01:58:56,609
[Music]

2121
01:59:03,000 --> 01:59:06,060
I don't know

2122
01:59:06,060 --> 01:59:07,679
I will try to

2123
01:59:07,679 --> 01:59:12,960
I guess break elsewhere

2124
01:59:14,040 --> 01:59:16,699
foreign

2125
01:59:18,739 --> 01:59:22,080
the previous way to solve it still works

2126
01:59:22,080 --> 01:59:24,540
no matter if debugging symbols exist or

2127
01:59:24,540 --> 01:59:26,880
not and this was the only difference

2128
01:59:26,880 --> 01:59:29,460
between the easy and the hard is not

2129
01:59:29,460 --> 01:59:31,619
nothing in the code is different it's

2130
01:59:31,619 --> 01:59:34,260
just that I stripped the symbols from

2131
01:59:34,260 --> 01:59:36,659
the binary which by definition makes it

2132
01:59:36,659 --> 01:59:39,480
harder but most reverse engineering or

2133
01:59:39,480 --> 01:59:42,840
crack me or Pawn challenges uh will be

2134
01:59:42,840 --> 01:59:45,300
built like that to to

2135
01:59:45,300 --> 01:59:46,020
um

2136
01:59:46,020 --> 01:59:49,080
to make it harder for you but but then

2137
01:59:49,080 --> 01:59:52,440
you still have as you walk around you

2138
01:59:52,440 --> 01:59:54,119
still have some strings to help you

2139
01:59:54,119 --> 01:59:58,020
figure out what's happening and there

2140
01:59:58,020 --> 02:00:00,980
are tools I believe that synchronizes

2141
02:00:00,980 --> 02:00:06,179
the whatever you do in ghidra uh you

2142
02:00:06,179 --> 02:00:10,080
will have in GDB uh same with Ida so so

2143
02:00:10,080 --> 02:00:12,060
if you rename a function there you will

2144
02:00:12,060 --> 02:00:15,540
have it in GDB these are complicated to

2145
02:00:15,540 --> 02:00:19,739
set up so if you do some uh basically

2146
02:00:19,739 --> 02:00:21,780
people working a lot on reverse

2147
02:00:21,780 --> 02:00:23,639
engineering or crack knees or

2148
02:00:23,639 --> 02:00:26,340
exploitation challenges should spend

2149
02:00:26,340 --> 02:00:28,800
time oiling their tool chain to make

2150
02:00:28,800 --> 02:00:31,320
sure that stuff like this is is workable

2151
02:00:31,320 --> 02:00:33,540
and possible and there are a lot of good

2152
02:00:33,540 --> 02:00:37,679
uh tutorials online and phone dbg this

2153
02:00:37,679 --> 02:00:41,159
specific uh GDP plugin does have a

2154
02:00:41,159 --> 02:00:43,619
bridge for either

2155
02:00:43,619 --> 02:00:47,159
um that that should help you be faster

2156
02:00:47,159 --> 02:00:51,540
at doing this foreign

2157
02:01:03,900 --> 02:01:07,820
yeah uh x64 yeah people used Aldi dbg

2158
02:01:07,820 --> 02:01:12,540
before but x64 since uh six years has

2159
02:01:12,540 --> 02:01:15,780
been a solid Alternatives alternative

2160
02:01:15,780 --> 02:01:18,300
but sometimes only there's something

2161
02:01:18,300 --> 02:01:20,940
about ali like for Packers for example

2162
02:01:20,940 --> 02:01:24,420
that Ali just never breaks uh but uh I

2163
02:01:24,420 --> 02:01:27,119
think 64 is really reliable and used by

2164
02:01:27,119 --> 02:01:29,940
the industry more and more

2165
02:01:29,940 --> 02:01:33,540
um uh there's also win dbg it's harder

2166
02:01:33,540 --> 02:01:36,719
to use it it's kind of like

2167
02:01:36,719 --> 02:01:40,020
um GDB but it is the one provided by

2168
02:01:40,020 --> 02:01:41,880
Microsoft to debug their own stuff

2169
02:01:41,880 --> 02:01:46,320
including kernel code so uh but it's

2170
02:01:46,320 --> 02:01:50,219
it's a lot less user friendly than x64

2171
02:01:50,219 --> 02:01:53,219
dbg so again you know make sure you you

2172
02:01:53,219 --> 02:01:58,980
try uh both and I I know like these

2173
02:01:58,980 --> 02:02:03,659
references might be uh hard to um to to

2174
02:02:03,659 --> 02:02:06,300
remember but I'm gonna do a deal with

2175
02:02:06,300 --> 02:02:08,760
you here everyone's still here or on the

2176
02:02:08,760 --> 02:02:12,420
stream uh if you come and see me during

2177
02:02:12,420 --> 02:02:14,280
the CTF I will be there the whole

2178
02:02:14,280 --> 02:02:17,159
weekend uh and you're like hey what's

2179
02:02:17,159 --> 02:02:19,679
the name of the tool I will happily like

2180
02:02:19,679 --> 02:02:22,639
give it to you again like this is not

2181
02:02:22,639 --> 02:02:26,040
this is not cheating this is just like I

2182
02:02:26,040 --> 02:02:28,199
told you it's just that I didn't have

2183
02:02:28,199 --> 02:02:30,420
slides so you don't have takeaways

2184
02:02:30,420 --> 02:02:33,300
except just uh three hours of me renting

2185
02:02:33,300 --> 02:02:35,040
so

2186
02:02:35,040 --> 02:02:36,960
um I'll happily give it back and give

2187
02:02:36,960 --> 02:02:39,000
the the good one oh give me the context

2188
02:02:39,000 --> 02:02:40,380
of what you're trying to do I'll give

2189
02:02:40,380 --> 02:02:43,500
you the pointers to the tools uh and you

2190
02:02:43,500 --> 02:02:45,000
can do that with the guys here as well

2191
02:02:45,000 --> 02:02:48,980
this is will not be considered cheating

2192
02:02:51,440 --> 02:02:56,659
I think we're we're on YouTube so

2193
02:02:56,820 --> 02:03:00,500
But but so uh for the weekend uh

2194
02:03:00,500 --> 02:03:03,840
we might have a YouTube but it will be a

2195
02:03:03,840 --> 02:03:06,239
raw and unedited

2196
02:03:06,239 --> 02:03:07,860
um

2197
02:03:07,860 --> 02:03:09,659
you have to yeah you have to go through

2198
02:03:09,659 --> 02:03:11,400
it and find the parts you're interested

2199
02:03:11,400 --> 02:03:13,080
in

2200
02:03:13,080 --> 02:03:14,880
um

2201
02:03:14,880 --> 02:03:17,699
that

2202
02:03:17,699 --> 02:03:21,239
that's it for me or is it how long how

2203
02:03:21,239 --> 02:03:24,559
many how much time

2204
02:03:25,619 --> 02:03:28,320
36 minutes I don't I don't think I want

2205
02:03:28,320 --> 02:03:30,480
to get into the exploitation do you want

2206
02:03:30,480 --> 02:03:34,199
me to do the expectation it's a bonus

2207
02:03:34,199 --> 02:03:36,719
okay I'll do it

2208
02:03:36,719 --> 02:03:39,540
uh I stay here no answer explanation

2209
02:03:39,540 --> 02:03:42,800
it's because I it's uh this is like

2210
02:03:42,800 --> 02:03:47,940
medieval level uh oscp from 10 years ago

2211
02:03:47,940 --> 02:03:52,020
uh exploit it's a stack smashing it's

2212
02:03:52,020 --> 02:03:55,199
not modern at all uh because they're

2213
02:03:55,199 --> 02:03:58,020
since then a lot have changed to prevent

2214
02:03:58,020 --> 02:04:02,719
bugs like this in compilers in in

2215
02:04:02,719 --> 02:04:06,300
CPUs and all that so this is kind of as

2216
02:04:06,300 --> 02:04:09,719
fake as it can be but let's try let's

2217
02:04:09,719 --> 02:04:11,639
look at it

2218
02:04:11,639 --> 02:04:14,099
I have 36 minutes

2219
02:04:14,099 --> 02:04:16,260
and I'm Rusty

2220
02:04:16,260 --> 02:04:19,980
okay exploit

2221
02:04:22,080 --> 02:04:26,040
uh so most exploitation challenge starts

2222
02:04:26,040 --> 02:04:28,619
with a service it's usually text based

2223
02:04:28,619 --> 02:04:32,460
because it's a very minimalistic uh and

2224
02:04:32,460 --> 02:04:35,280
the goal is just to write to memory and

2225
02:04:35,280 --> 02:04:39,000
then have the the computer go in that

2226
02:04:39,000 --> 02:04:41,760
memory and execute what's in it

2227
02:04:41,760 --> 02:04:44,880
so here we have a serial number checker

2228
02:04:44,880 --> 02:04:48,119
uh we're gonna do a test so this sorry

2229
02:04:48,119 --> 02:04:50,099
wrong serial number

2230
02:04:50,099 --> 02:04:52,380
then we're gonna do a classic

2231
02:04:52,380 --> 02:04:54,719
and then ah I'm not having a wrong

2232
02:04:54,719 --> 02:04:57,780
serial number I crashed it so there's

2233
02:04:57,780 --> 02:05:00,420
something broken here I need to figure

2234
02:05:00,420 --> 02:05:04,139
out what it is we get the service again

2235
02:05:04,139 --> 02:05:09,000
and this is because we run it in uh in a

2236
02:05:09,000 --> 02:05:11,820
mode where it will restart on the next

2237
02:05:11,820 --> 02:05:13,199
connection

2238
02:05:13,199 --> 02:05:14,639
uh

2239
02:05:14,639 --> 02:05:17,159
so then you can hunt for the right

2240
02:05:17,159 --> 02:05:19,920
length where you crash it so you see

2241
02:05:19,920 --> 02:05:23,520
like between these two lamps uh I'm

2242
02:05:23,520 --> 02:05:25,280
crashing it

2243
02:05:25,280 --> 02:05:27,060
now

2244
02:05:27,060 --> 02:05:28,619
uh

2245
02:05:28,619 --> 02:05:32,239
the source code is provided

2246
02:05:32,820 --> 02:05:35,400
and the instructions to compile it as

2247
02:05:35,400 --> 02:05:36,420
well

2248
02:05:36,420 --> 02:05:40,340
so let's download the source code

2249
02:05:47,910 --> 02:05:48,480
[Music]

2250
02:05:48,480 --> 02:05:50,480
um

2251
02:05:50,699 --> 02:05:54,540
so we have a compute function we have a

2252
02:05:54,540 --> 02:05:56,940
validate function

2253
02:05:56,940 --> 02:06:00,300
there is a session enter your serial

2254
02:06:00,300 --> 02:06:04,219
number we receive from the network

2255
02:06:05,119 --> 02:06:08,639
uh there's a success and then a

2256
02:06:08,639 --> 02:06:10,860
confirmation number

2257
02:06:10,860 --> 02:06:14,420
or wrong serial number

2258
02:06:19,320 --> 02:06:23,059
runs on one two three four five

2259
02:06:23,099 --> 02:06:26,940
servers ready and it's forking so this

2260
02:06:26,940 --> 02:06:29,659
is here

2261
02:06:39,000 --> 02:06:42,480
okay uh

2262
02:06:43,320 --> 02:06:44,760
so

2263
02:06:44,760 --> 02:06:47,460
it says on the web it runs this is

2264
02:06:47,460 --> 02:06:52,380
important for the to have reliable uh

2265
02:06:52,380 --> 02:06:55,800
addressing uh that this is what this is

2266
02:06:55,800 --> 02:06:57,480
one reason why Linux is harder to

2267
02:06:57,480 --> 02:06:59,820
exploit than Windows it's because it's

2268
02:06:59,820 --> 02:07:02,340
more when you do exploitation you need

2269
02:07:02,340 --> 02:07:03,719
to have a

2270
02:07:03,719 --> 02:07:06,360
a great understanding of them the state

2271
02:07:06,360 --> 02:07:07,860
of the memory

2272
02:07:07,860 --> 02:07:10,320
and uh on Windows since it's all

2273
02:07:10,320 --> 02:07:12,840
pre-compiled and the same thing every

2274
02:07:12,840 --> 02:07:15,420
Windows version is like the same uh

2275
02:07:15,420 --> 02:07:17,400
whereas on Linux you need like the the

2276
02:07:17,400 --> 02:07:19,560
exact one because there's the new

2277
02:07:19,560 --> 02:07:22,380
version every six months or so uh so you

2278
02:07:22,380 --> 02:07:24,360
you this information is kind of valuable

2279
02:07:24,360 --> 02:07:27,420
if you want to exploit it quickly now in

2280
02:07:27,420 --> 02:07:29,460
order to do local testing

2281
02:07:29,460 --> 02:07:31,679
that we

2282
02:07:31,679 --> 02:07:34,020
will need to be able to compile it so

2283
02:07:34,020 --> 02:07:38,119
create a fake service file

2284
02:07:42,619 --> 02:07:45,540
thank you

2285
02:07:45,540 --> 02:07:48,119
[Music]

2286
02:07:48,119 --> 02:07:53,598
do I run is there still a Docker for

2287
02:08:15,599 --> 02:08:18,599
me

2288
02:08:18,960 --> 02:08:22,400
chain concept

2289
02:09:04,159 --> 02:09:07,580
do I have

2290
02:09:09,239 --> 02:09:11,239
um

2291
02:09:13,580 --> 02:09:17,420
the doctor uh

2292
02:09:30,300 --> 02:09:33,199
one

2293
02:09:39,780 --> 02:09:43,580
there's a square at this point

2294
02:09:46,880 --> 02:09:50,360
slash Square host

2295
02:09:53,159 --> 02:09:56,179
slash will do a point

2296
02:09:58,139 --> 02:10:01,139
Bash

2297
02:10:01,619 --> 02:10:04,159
oops

2298
02:10:11,699 --> 02:10:14,119
numbers

2299
02:10:23,280 --> 02:10:24,680
extreme

2300
02:10:24,680 --> 02:10:26,159
[Music]

2301
02:10:26,159 --> 02:10:29,159
unable to find oh it's still there I

2302
02:10:29,159 --> 02:10:30,960
thought that the because if you look at

2303
02:10:30,960 --> 02:10:32,099
the

2304
02:10:32,099 --> 02:10:34,980
here like they don't list 14 or 4

2305
02:10:34,980 --> 02:10:37,159
anymore

2306
02:10:40,440 --> 02:10:44,299
they don't list the old images

2307
02:10:46,980 --> 02:10:49,980
compiler

2308
02:10:51,240 --> 02:10:54,469
[Music]

2309
02:11:08,460 --> 02:11:11,119
wow

2310
02:11:12,360 --> 02:11:15,480
so we're spinning the exact version of

2311
02:11:15,480 --> 02:11:17,540
that operating system

2312
02:11:17,540 --> 02:11:21,000
uh we are

2313
02:11:21,000 --> 02:11:21,980
um

2314
02:11:21,980 --> 02:11:24,420
installing uh

2315
02:11:24,420 --> 02:11:27,800
uh stuff to compile

2316
02:11:30,719 --> 02:11:33,719
open

2317
02:11:38,880 --> 02:11:42,920
oh yeah good memory

2318
02:11:44,520 --> 02:11:47,520
then

2319
02:11:48,119 --> 02:11:50,639
I they're probably pointing to a slow

2320
02:11:50,639 --> 02:11:52,920
archive that still works

2321
02:11:52,920 --> 02:11:54,780
um okay so we're installing stuff to be

2322
02:11:54,780 --> 02:11:57,840
able to compile uh then then our

2323
02:11:57,840 --> 02:12:00,239
instruction so we need to do put this in

2324
02:12:00,239 --> 02:12:03,199
services.h

2325
02:12:03,840 --> 02:12:07,580
otherwise it won't compile

2326
02:12:09,420 --> 02:12:10,619
um

2327
02:12:10,619 --> 02:12:13,280
here

2328
02:12:15,960 --> 02:12:20,719
so this is out of the docker image

2329
02:12:22,980 --> 02:12:27,139
and this is inside the docker image

2330
02:12:27,139 --> 02:12:30,420
then compile without so we need to put

2331
02:12:30,420 --> 02:12:32,940
no stack protector because the compiler

2332
02:12:32,940 --> 02:12:34,860
has that detection built in now this is

2333
02:12:34,860 --> 02:12:37,040
why I was saying it's a very old

2334
02:12:37,040 --> 02:12:41,159
technique but to show

2335
02:12:41,159 --> 02:12:43,139
um how to smash that stack

2336
02:12:43,139 --> 02:12:47,000
and I'm missing stuff

2337
02:12:49,739 --> 02:12:52,879
the kernel image

2338
02:13:15,960 --> 02:13:18,960
so

2339
02:13:22,260 --> 02:13:24,900
good point good point I'm glad I have

2340
02:13:24,900 --> 02:13:27,300
helpers because sometimes you lose hours

2341
02:13:27,300 --> 02:13:30,320
and stuff like this

2342
02:13:33,540 --> 02:13:36,260
so

2343
02:13:36,780 --> 02:13:39,179
okay I have service

2344
02:13:39,179 --> 02:13:41,219
can run it

2345
02:13:41,219 --> 02:13:44,119
uh

2346
02:14:03,900 --> 02:14:11,419
[Music]

2347
02:14:11,460 --> 02:14:15,060
okay so again now we're we're giving it

2348
02:14:15,060 --> 02:14:18,900
network access and now do I have this

2349
02:14:18,900 --> 02:14:22,820
I'm gonna install that as well

2350
02:14:23,219 --> 02:14:26,940
terminal multiplexer

2351
02:14:28,500 --> 02:14:32,340
I want to debug it it's gonna be useful

2352
02:14:32,340 --> 02:14:35,360
so service

2353
02:14:37,520 --> 02:14:40,619
this is usually when you have a 32-bit

2354
02:14:40,619 --> 02:14:43,639
to 64-bit problem

2355
02:14:47,040 --> 02:14:49,040
s

2356
02:15:10,739 --> 02:15:13,199
that sounds

2357
02:15:13,199 --> 02:15:17,480
no no no no see at the date

2358
02:15:21,719 --> 02:15:23,880
I told you I didn't want to do this by

2359
02:15:23,880 --> 02:15:25,860
the way so you're here you're here

2360
02:15:25,860 --> 02:15:28,579
you're stuck with me

2361
02:15:29,330 --> 02:15:32,529
[Music]

2362
02:15:52,139 --> 02:15:54,540
we can look at the source code in the

2363
02:15:54,540 --> 02:15:56,880
meantime

2364
02:15:56,880 --> 02:15:59,880
oops

2365
02:16:07,860 --> 02:16:11,579
so this is I think where the magic

2366
02:16:11,579 --> 02:16:14,119
happens

2367
02:16:15,300 --> 02:16:20,280
uh a pointer and a copy to a buffer of a

2368
02:16:20,280 --> 02:16:22,260
limited length

2369
02:16:22,260 --> 02:16:25,560
this is terminated so it should be good

2370
02:16:25,560 --> 02:16:27,599
this one

2371
02:16:27,599 --> 02:16:33,799
is not so here is that the bug is here

2372
02:16:38,459 --> 02:16:43,160
okay server runs now can I connect to it

2373
02:16:48,898 --> 02:16:53,840
yay okay so what's cool about that

2374
02:16:53,879 --> 02:16:57,619
is that we can debug it

2375
02:17:00,299 --> 02:17:02,840
of course

2376
02:17:04,320 --> 02:17:06,019
that's good

2377
02:17:06,019 --> 02:17:10,120
why is the favorite is

2378
02:17:10,120 --> 02:17:13,279
[Music]

2379
02:17:23,459 --> 02:17:25,459
um

2380
02:17:28,638 --> 02:17:32,218
so the the container is meant to compile

2381
02:17:32,218 --> 02:17:36,438
the binary it will work on the system

2382
02:17:36,558 --> 02:17:40,320
but uh this is why you need a vagrant

2383
02:17:40,320 --> 02:17:43,379
this is going to be 64-bit addressing

2384
02:17:43,379 --> 02:17:47,160
and the bug is not uh I I think the bug

2385
02:17:47,160 --> 02:17:50,179
is 32-bit only

2386
02:17:52,740 --> 02:17:54,859
um

2387
02:17:55,260 --> 02:17:59,000
I think this is why I need a vagrant

2388
02:18:05,040 --> 02:18:07,558
layout

2389
02:18:07,558 --> 02:18:10,558
okay

2390
02:18:38,120 --> 02:18:41,899
okay I um

2391
02:19:03,599 --> 02:19:06,780
so this is I so I used to teach this

2392
02:19:06,780 --> 02:19:09,558
like 10 years ago

2393
02:19:09,558 --> 02:19:13,320
and this is what I was using to explain

2394
02:19:13,320 --> 02:19:16,218
the solution

2395
02:19:16,439 --> 02:19:17,700
so

2396
02:19:17,700 --> 02:19:21,058
we yeah one of the first uh complexity

2397
02:19:21,058 --> 02:19:24,359
is that there's a fourth call by default

2398
02:19:24,359 --> 02:19:27,000
GDB will not follow the forge the child

2399
02:19:27,000 --> 02:19:29,280
it will stick on the parent so we need

2400
02:19:29,280 --> 02:19:32,280
to get rid of the work around that now

2401
02:19:32,280 --> 02:19:35,820
we could add symbols as well with uh

2402
02:19:35,820 --> 02:19:37,920
ggdb3

2403
02:19:37,920 --> 02:19:41,519
and then follow Port mode for child and

2404
02:19:41,519 --> 02:19:44,099
with the symbols we can break on the

2405
02:19:44,099 --> 02:19:45,120
sessions

2406
02:19:45,120 --> 02:19:46,978
now

2407
02:19:46,978 --> 02:19:49,760
yes

2408
02:19:52,439 --> 02:19:55,439
you need to compile it on a specific on

2409
02:19:55,439 --> 02:19:59,640
Ubuntu 1404 otherwise

2410
02:19:59,640 --> 02:20:02,180
no

2411
02:20:02,580 --> 02:20:06,540
or it might uh but you'll have it like

2412
02:20:06,540 --> 02:20:08,760
my answer because my answer is just one

2413
02:20:08,760 --> 02:20:12,320
string and boom it blows up right so

2414
02:20:12,320 --> 02:20:15,300
the flag is not even if you compile it

2415
02:20:15,300 --> 02:20:17,640
the flag is on the server so whatever

2416
02:20:17,640 --> 02:20:20,820
you'll find locally to exploit will not

2417
02:20:20,820 --> 02:20:22,260
work on the server because it's going to

2418
02:20:22,260 --> 02:20:23,939
be a different thing which means a

2419
02:20:23,939 --> 02:20:26,840
different memory address

2420
02:20:27,600 --> 02:20:31,800
same principle but but you won't get

2421
02:20:31,800 --> 02:20:34,020
grab the flag

2422
02:20:34,020 --> 02:20:36,420
so this is why you need to mimic the

2423
02:20:36,420 --> 02:20:37,160
target

2424
02:20:37,160 --> 02:20:41,600
uh so that it will it will work

2425
02:20:41,750 --> 02:20:43,920
[Music]

2426
02:20:43,920 --> 02:20:46,979
so the yeah so here the flow as I was

2427
02:20:46,979 --> 02:20:50,399
saying the second string copy here

2428
02:20:50,399 --> 02:20:55,439
um it it copies to uh uh above a buffer

2429
02:20:55,439 --> 02:20:59,220
of a but the source can be up to 18. so

2430
02:20:59,220 --> 02:21:04,399
you will uh override and sends value 2

2431
02:21:04,399 --> 02:21:09,359
is below value one you you uh you

2432
02:21:09,359 --> 02:21:13,260
overwrite you you no sorry since buffer

2433
02:21:13,260 --> 02:21:18,600
is below the integer values you uh

2434
02:21:18,600 --> 02:21:21,720
overwrite the memory going upwards which

2435
02:21:21,720 --> 02:21:24,899
means that you can smash value 1 and

2436
02:21:24,899 --> 02:21:28,859
value 2. at this place

2437
02:21:28,859 --> 02:21:31,680
so you have effect

2438
02:21:31,680 --> 02:21:35,939
on value one even if you are after

2439
02:21:35,939 --> 02:21:38,280
so the goal the way to solve this

2440
02:21:38,280 --> 02:21:41,100
challenge is to you use the buffer

2441
02:21:41,100 --> 02:21:43,620
overflow to make sure that you will

2442
02:21:43,620 --> 02:21:46,680
override value one with something that

2443
02:21:46,680 --> 02:21:49,319
you know will match value two and value

2444
02:21:49,319 --> 02:21:51,720
two you are in control of it because

2445
02:21:51,720 --> 02:21:55,859
it's whatever your buffer is and this

2446
02:21:55,859 --> 02:21:59,100
out of the compute function

2447
02:21:59,100 --> 02:22:01,700
so in the debugger

2448
02:22:01,700 --> 02:22:05,520
uh if you send like we often see

2449
02:22:05,520 --> 02:22:08,220
sequences of A's but it's it's more

2450
02:22:08,220 --> 02:22:10,020
useful to use different characters

2451
02:22:10,020 --> 02:22:11,819
because you then you know you're at this

2452
02:22:11,819 --> 02:22:14,100
position or that position there are

2453
02:22:14,100 --> 02:22:18,840
tools uh in pound dbg that will or uh or

2454
02:22:18,840 --> 02:22:21,000
radar a radar has tools like that as

2455
02:22:21,000 --> 02:22:23,160
well that generates the sequence of a

2456
02:22:23,160 --> 02:22:26,399
lens that you specify uh but here we've

2457
02:22:26,399 --> 02:22:28,080
done it by and I've done it by hand I

2458
02:22:28,080 --> 02:22:30,660
don't recall what they are

2459
02:22:30,660 --> 02:22:34,380
um so when we look at the the string

2460
02:22:34,380 --> 02:22:35,700
copy

2461
02:22:35,700 --> 02:22:38,040
this is what the memory looks like when

2462
02:22:38,040 --> 02:22:41,880
you have that so you can see 41 42 43 44

2463
02:22:41,880 --> 02:22:46,439
45 46 47 48

2464
02:22:46,439 --> 02:22:49,380
um and if you look at the buffer uh this

2465
02:22:49,380 --> 02:22:52,140
is the the content of the buffer 10.

2466
02:22:52,140 --> 02:22:54,420
value one is this

2467
02:22:54,420 --> 02:22:57,420
value two is this

2468
02:22:57,420 --> 02:23:02,399
now after you run value one

2469
02:23:02,399 --> 02:23:05,520
that's the the the state of the buffer

2470
02:23:05,520 --> 02:23:08,960
man I don't remember any of this

2471
02:23:08,960 --> 02:23:12,180
and uh value 2

2472
02:23:12,180 --> 02:23:16,979
is this so they are very different

2473
02:23:16,979 --> 02:23:20,040
like and and it changed drastically

2474
02:23:20,040 --> 02:23:24,140
after the the overwrite

2475
02:23:24,660 --> 02:23:26,760
um so

2476
02:23:26,760 --> 02:23:30,540
buffer will receive uh SN plus nine so

2477
02:23:30,540 --> 02:23:34,560
here SN plus nine will be what's sent to

2478
02:23:34,560 --> 02:23:37,859
buffer what's complicated is that they

2479
02:23:37,859 --> 02:23:40,020
are infinite number of solutions because

2480
02:23:40,020 --> 02:23:42,840
you need to have two things that one

2481
02:23:42,840 --> 02:23:45,080
thing that you control that you send

2482
02:23:45,080 --> 02:23:47,540
it will be cut into

2483
02:23:47,540 --> 02:23:51,300
Ransom compute and it will be compared

2484
02:23:51,300 --> 02:23:54,780
to one another but some of it you use to

2485
02:23:54,780 --> 02:23:57,479
overwrite one of the values so you need

2486
02:23:57,479 --> 02:24:00,479
to align them so this the solution we

2487
02:24:00,479 --> 02:24:04,020
are you know narrowing into is one of

2488
02:24:04,020 --> 02:24:07,140
the many solutions that that could be

2489
02:24:07,140 --> 02:24:11,100
so if we smash value one we we can make

2490
02:24:11,100 --> 02:24:14,040
it so to pass the test validate will be

2491
02:24:14,040 --> 02:24:15,000
true

2492
02:24:15,000 --> 02:24:18,899
so now we did like uh fake tests if you

2493
02:24:18,899 --> 02:24:21,019
want

2494
02:24:21,180 --> 02:24:25,920
um so uh you know value two is this uh

2495
02:24:25,920 --> 02:24:28,200
value one is this

2496
02:24:28,200 --> 02:24:31,260
um so we're not quite uh there and also

2497
02:24:31,260 --> 02:24:33,720
you have to avoid non-printable uh

2498
02:24:33,720 --> 02:24:35,939
characters

2499
02:24:35,939 --> 02:24:39,680
um so try different uh input

2500
02:24:39,680 --> 02:24:43,080
iterate on what you send until

2501
02:24:43,080 --> 02:24:46,380
everything that you need that that value

2502
02:24:46,380 --> 02:24:48,840
to is printable characters so that you

2503
02:24:48,840 --> 02:24:51,660
will be able to overwrite Value one with

2504
02:24:51,660 --> 02:24:54,380
printable characters

2505
02:25:07,560 --> 02:25:12,080
doesn't it stop only on uh zero

2506
02:25:12,080 --> 02:25:15,300
okay so yeah there are a handful of them

2507
02:25:15,300 --> 02:25:18,180
that will stop the copy

2508
02:25:18,180 --> 02:25:22,080
um so so basically the the

2509
02:25:22,080 --> 02:25:26,460
a b c d e f g payload you know got us

2510
02:25:26,460 --> 02:25:29,399
there but we cannot progress with it

2511
02:25:29,399 --> 02:25:31,740
because there this will generate after

2512
02:25:31,740 --> 02:25:34,380
it goes through validate not validate uh

2513
02:25:34,380 --> 02:25:37,260
compute it will generate non-printable

2514
02:25:37,260 --> 02:25:39,060
characters which means that it's not a

2515
02:25:39,060 --> 02:25:41,280
good payload for the exploitation

2516
02:25:41,280 --> 02:25:44,700
now if we send many A's

2517
02:25:44,700 --> 02:25:47,520
you will uh

2518
02:25:47,520 --> 02:25:52,020
uh go and get into a mode where

2519
02:25:52,020 --> 02:25:54,540
everything is as key

2520
02:25:54,540 --> 02:25:58,380
so value two everything is SE now

2521
02:25:58,380 --> 02:26:01,680
now that we control value two

2522
02:26:01,680 --> 02:26:04,380
now that we know value two everything is

2523
02:26:04,380 --> 02:26:07,800
as key we need to just adjust our

2524
02:26:07,800 --> 02:26:11,399
payload so that value one will match

2525
02:26:11,399 --> 02:26:13,500
value two and we can do that locally

2526
02:26:13,500 --> 02:26:17,819
because we had access to the we can

2527
02:26:17,819 --> 02:26:19,740
debug the program

2528
02:26:19,740 --> 02:26:22,500
and again I mean this is like the

2529
02:26:22,500 --> 02:26:26,760
shittiest uh I did it that way at

2530
02:26:26,760 --> 02:26:30,300
University this is how I write it up and

2531
02:26:30,300 --> 02:26:33,660
with like this was before anger I'm sure

2532
02:26:33,660 --> 02:26:35,640
in Anger someone who knows how this

2533
02:26:35,640 --> 02:26:37,560
thing works will like solve this like

2534
02:26:37,560 --> 02:26:41,000
this uh anger just basically you know

2535
02:26:41,000 --> 02:26:45,060
find the that does all possibilities and

2536
02:26:45,060 --> 02:26:46,979
finds the one that narrow down to the

2537
02:26:46,979 --> 02:26:48,899
state that you want to be in it's just

2538
02:26:48,899 --> 02:26:53,280
I'm I've never used anger except taking

2539
02:26:53,280 --> 02:26:56,760
um uh in a workshop never used it after

2540
02:26:56,760 --> 02:26:59,100
so I would need more work this is why it

2541
02:26:59,100 --> 02:27:01,380
was a bonus like I need to be to prepare

2542
02:27:01,380 --> 02:27:03,720
more in order to teach it better but

2543
02:27:03,720 --> 02:27:08,340
you'll still have the solution but so

2544
02:27:08,340 --> 02:27:13,260
um in my uh testing I I arrive at a

2545
02:27:13,260 --> 02:27:15,780
payload that I thought would work by

2546
02:27:15,780 --> 02:27:19,380
doing the math but uh there was a an

2547
02:27:19,380 --> 02:27:21,180
issue so I was obtaining something

2548
02:27:21,180 --> 02:27:25,560
slightly different uh but if you invert

2549
02:27:25,560 --> 02:27:30,359
the two value and you add the a then I

2550
02:27:30,359 --> 02:27:34,340
arrive at a payload that worked and

2551
02:27:34,340 --> 02:27:37,979
uh and this is basically the exploit for

2552
02:27:37,979 --> 02:27:39,899
that challenge

2553
02:27:39,899 --> 02:27:42,240
uh it will get it in the state that you

2554
02:27:42,240 --> 02:27:44,280
need to be in

2555
02:27:44,280 --> 02:27:46,460
um

2556
02:27:47,160 --> 02:27:50,399
so I can show you but I mean the better

2557
02:27:50,399 --> 02:27:52,800
way would be to debug it but

2558
02:27:52,800 --> 02:27:57,380
um the the the error I'm getting

2559
02:27:57,720 --> 02:28:01,260
that I I'm not convinced that by running

2560
02:28:01,260 --> 02:28:05,880
it on a 64-bit system uh this will that

2561
02:28:05,880 --> 02:28:09,858
this solution will work but we can

2562
02:28:13,979 --> 02:28:16,979
foreign

2563
02:28:24,600 --> 02:28:27,600
foreign

2564
02:28:35,960 --> 02:28:37,939
I

2565
02:28:37,939 --> 02:28:40,260
don't want to do the solution yet I have

2566
02:28:40,260 --> 02:28:43,340
11 minutes left

2567
02:28:45,720 --> 02:28:47,520
you're right you're right you're right

2568
02:28:47,520 --> 02:28:49,500
you're right

2569
02:28:49,500 --> 02:28:52,200
you are correct sir

2570
02:28:52,200 --> 02:28:54,960
okay let's try to run it so now

2571
02:28:54,960 --> 02:28:57,920
I've shown you the solution we're gonna

2572
02:28:57,920 --> 02:29:02,120
wait until the end for the money shot

2573
02:29:02,120 --> 02:29:05,120
but the um

2574
02:29:05,120 --> 02:29:09,300
the uh so now I'm gonna try it in the

2575
02:29:09,300 --> 02:29:11,280
64-bit environment we'll see what it

2576
02:29:11,280 --> 02:29:14,280
looks like we'll try to go but I'm not

2577
02:29:14,280 --> 02:29:15,960
convinced that we're gonna progress much

2578
02:29:15,960 --> 02:29:17,819
in 10 minutes

2579
02:29:17,819 --> 02:29:20,040
um but uh what um

2580
02:29:20,040 --> 02:29:23,100
my son was saying is that I need to do

2581
02:29:23,100 --> 02:29:26,460
all of the of the the set follow forward

2582
02:29:26,460 --> 02:29:29,100
mode whatever to be able to

2583
02:29:29,100 --> 02:29:31,260
put it in the right state

2584
02:29:31,260 --> 02:29:36,500
that where I will follow the child and

2585
02:29:37,520 --> 02:29:42,240
uh and then I could run it but

2586
02:29:42,240 --> 02:29:44,520
not sure what it will look like without

2587
02:29:44,520 --> 02:29:47,040
symbols

2588
02:29:47,040 --> 02:29:49,100
um

2589
02:29:50,880 --> 02:29:54,779
then run

2590
02:29:56,240 --> 02:29:59,289
[Music]

2591
02:30:03,030 --> 02:30:09,030
[Music]

2592
02:30:18,120 --> 02:30:21,979
okay so it's dying

2593
02:30:22,800 --> 02:30:25,519
and

2594
02:30:25,920 --> 02:30:29,280
can I connect again

2595
02:30:29,280 --> 02:30:31,680
yes okay

2596
02:30:31,680 --> 02:30:36,260
but I don't have any uh break point

2597
02:30:37,360 --> 02:30:41,089
[Music]

2598
02:30:59,220 --> 02:31:01,880
is

2599
02:31:04,140 --> 02:31:09,740
do I need to use a 32-bit GDB

2600
02:31:35,590 --> 02:31:37,740
[Music]

2601
02:31:37,740 --> 02:31:41,780
so really by the way

2602
02:31:56,819 --> 02:32:01,519
there's a a steam wow

2603
02:32:03,370 --> 02:32:10,380
[Music]

2604
02:32:10,380 --> 02:32:13,680
Okay Google

2605
02:32:13,680 --> 02:32:16,340
foreign

2606
02:32:17,760 --> 02:32:20,829
[Music]

2607
02:32:36,130 --> 02:32:42,039
[Music]

2608
02:33:02,890 --> 02:33:08,878
[Music]

2609
02:33:15,600 --> 02:33:19,090
let's compile with

2610
02:33:19,090 --> 02:33:22,319
[Music]

2611
02:33:27,020 --> 02:33:30,180
this but

2612
02:33:30,180 --> 02:33:33,180
foreign

2613
02:33:56,710 --> 02:34:00,460
[Music]

2614
02:34:11,780 --> 02:34:15,019
[Music]

2615
02:34:48,359 --> 02:34:51,359
privilege

2616
02:34:52,380 --> 02:34:54,679
is

2617
02:34:55,800 --> 02:34:58,560
so mad

2618
02:34:58,560 --> 02:35:02,660
at the main c randomized

2619
02:35:02,840 --> 02:35:08,300
local smash attack and local smash

2620
02:35:10,800 --> 02:35:12,858
yeah

2621
02:35:12,960 --> 02:35:15,960
disabled

2622
02:35:31,260 --> 02:35:32,880
yes

2623
02:35:32,880 --> 02:35:35,839
silky run

2624
02:35:39,240 --> 02:35:41,840
Market

2625
02:35:48,300 --> 02:35:50,720
okay

2626
02:35:54,810 --> 02:35:57,900
[Music]

2627
02:36:08,780 --> 02:36:12,319
ah my God

2628
02:36:37,720 --> 02:36:41,400
[Music]

2629
02:36:52,620 --> 02:36:54,720
yes one of it

2630
02:36:54,720 --> 02:36:58,580
it's space that payload

2631
02:36:58,920 --> 02:37:00,660
okay

2632
02:37:00,660 --> 02:37:03,080
so

2633
02:37:03,120 --> 02:37:07,160
the service is running here

2634
02:37:13,890 --> 02:37:17,660
[Music]

2635
02:37:20,580 --> 02:37:23,420
and

2636
02:37:30,800 --> 02:37:35,539
stop stack corruption for the win

2637
02:37:35,700 --> 02:37:38,160
so I mean

2638
02:37:38,160 --> 02:37:40,560
I wish I had something better to show

2639
02:37:40,560 --> 02:37:43,920
you but what happens is that we again

2640
02:37:43,920 --> 02:37:47,220
like from the source code

2641
02:37:47,220 --> 02:37:50,220
here

2642
02:37:50,220 --> 02:37:53,939
we are providing a buffer that is

2643
02:37:53,939 --> 02:37:57,180
too large here and the first string copy

2644
02:37:57,180 --> 02:38:01,380
is fine because it's uh there is a no

2645
02:38:01,380 --> 02:38:04,020
pointer that a note byte that is

2646
02:38:04,020 --> 02:38:06,800
injected in the original

2647
02:38:06,800 --> 02:38:11,460
uh charba buffer that will make the

2648
02:38:11,460 --> 02:38:13,859
string copy and after a fixed amount of

2649
02:38:13,859 --> 02:38:16,439
characters that is the size of the

2650
02:38:16,439 --> 02:38:17,520
buffer

2651
02:38:17,520 --> 02:38:19,920
then value one is computed

2652
02:38:19,920 --> 02:38:22,380
we have no control over any of this

2653
02:38:22,380 --> 02:38:25,560
besides the regular first part of the

2654
02:38:25,560 --> 02:38:29,120
serial number now the second string copy

2655
02:38:29,120 --> 02:38:31,220
arrives

2656
02:38:31,220 --> 02:38:34,859
and to a new buffer like we're kind of

2657
02:38:34,859 --> 02:38:36,920
reusing one variable here

2658
02:38:36,920 --> 02:38:41,160
uh but then we copy from the ninth

2659
02:38:41,160 --> 02:38:44,580
position where nothing was made to

2660
02:38:44,580 --> 02:38:48,840
ensure the the length of the the thing

2661
02:38:48,840 --> 02:38:51,479
besides the like it's it's accepting

2662
02:38:51,479 --> 02:38:56,060
between this and that so then this copy

2663
02:38:56,060 --> 02:39:00,000
will overwrite content and it will

2664
02:39:00,000 --> 02:39:03,060
override up so the stack is buff buff

2665
02:39:03,060 --> 02:39:06,600
value two value one or above value one

2666
02:39:06,600 --> 02:39:09,680
value two but so you are

2667
02:39:09,680 --> 02:39:13,979
uh overwriting content on the memory

2668
02:39:13,979 --> 02:39:18,600
and then value 2 is computed so no yes

2669
02:39:18,600 --> 02:39:22,020
you override value 2 and value one but

2670
02:39:22,020 --> 02:39:25,260
value two is then Rewritten so then you

2671
02:39:25,260 --> 02:39:27,120
have to make sure that whatever is

2672
02:39:27,120 --> 02:39:30,359
Rewritten here and whatever you overflow

2673
02:39:30,359 --> 02:39:34,880
there is equals equal and

2674
02:39:34,880 --> 02:39:37,640
must be print all printable characters

2675
02:39:37,640 --> 02:39:41,520
and the way to achieve this is when when

2676
02:39:41,520 --> 02:39:44,700
you have a lot of A's a lot of A's

2677
02:39:44,700 --> 02:39:46,979
through the validate function the

2678
02:39:46,979 --> 02:39:53,119
compute function sorry will create uh um

2679
02:39:53,580 --> 02:39:55,560
this

2680
02:39:55,560 --> 02:39:58,560
value

2681
02:39:59,160 --> 02:40:03,800
I think this value

2682
02:40:08,280 --> 02:40:10,680
and yeah so so yeah this one was

2683
02:40:10,680 --> 02:40:13,380
extracted from Iran and so this is when

2684
02:40:13,380 --> 02:40:15,720
we figure that we need to put this at

2685
02:40:15,720 --> 02:40:18,180
the end but it turns out that it was not

2686
02:40:18,180 --> 02:40:21,120
long enough or whatever so I like and

2687
02:40:21,120 --> 02:40:23,460
when looking at it you realize that the

2688
02:40:23,460 --> 02:40:25,859
the the two characters are inverted here

2689
02:40:25,859 --> 02:40:28,439
so you you flip them in the the right

2690
02:40:28,439 --> 02:40:31,800
order and then you pad by two other A's

2691
02:40:31,800 --> 02:40:36,420
and then you uh you get the answer

2692
02:40:36,420 --> 02:40:39,000
and if we do

2693
02:40:39,000 --> 02:40:41,780
the

2694
02:40:42,359 --> 02:40:45,319
mesh

2695
02:40:49,620 --> 02:40:52,680
the interruption for the win yay

2696
02:40:52,680 --> 02:40:57,080
I completely cheated oh two Souls

2697
02:41:00,300 --> 02:41:03,380
someone from here

2698
02:41:05,760 --> 02:41:09,920
you figured it out or you you copied

2699
02:41:11,580 --> 02:41:13,680
because I was gonna say next year you're

2700
02:41:13,680 --> 02:41:15,920
here

2701
02:41:16,560 --> 02:41:18,300
okay well thank you so much everyone

2702
02:41:18,300 --> 02:41:21,660
it's been a quite a ride and now I'm

2703
02:41:21,660 --> 02:41:24,020
asleep

2704
02:41:24,560 --> 02:41:28,460
have a honestly

2705
02:41:29,160 --> 02:41:31,380
I hope you have a great cpf and if you

2706
02:41:31,380 --> 02:41:33,060
have questions do not come do not

2707
02:41:33,060 --> 02:41:35,640
hesitate to come and see all of us we're

2708
02:41:35,640 --> 02:41:37,270
here to learn

2709
02:41:37,270 --> 02:41:40,429
[Music]

