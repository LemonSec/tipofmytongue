1
00:00:08,620 --> 00:00:19,159
hello everyone so yeah today we're gonna

2
00:00:15,500 --> 00:00:22,070
talk about graph QL so the name of the

3
00:00:19,160 --> 00:00:24,410
talk is resting peace exploiting graph

4
00:00:22,070 --> 00:00:26,630
QL at first when I had thought on this

5
00:00:24,410 --> 00:00:28,700
the name of this talk I thought it was

6
00:00:26,630 --> 00:00:31,640
really nice but after that I just so

7
00:00:28,700 --> 00:00:35,440
many so many articles and presentations

8
00:00:31,640 --> 00:00:37,760
with the same name but yeah that's it so

9
00:00:35,440 --> 00:00:40,608
as you might have noticed already

10
00:00:37,760 --> 00:00:44,358
English is not my natural language I

11
00:00:40,609 --> 00:00:48,079
come from Brazil currently I work as a

12
00:00:44,359 --> 00:00:51,170
security analyst most of my days today I

13
00:00:48,079 --> 00:00:52,789
work as wearing the blue team thing but

14
00:00:51,170 --> 00:00:55,100
for the most of my days I used to work

15
00:00:52,789 --> 00:01:00,129
as a penetration tester doing some red

16
00:00:55,100 --> 00:01:04,849
team meetings I'd love to play CTF

17
00:01:00,129 --> 00:01:06,530
recently I didn't place so much but yeah

18
00:01:04,849 --> 00:01:08,780
it's really nice I recommend everyone

19
00:01:06,530 --> 00:01:11,600
and that's where I came up with this

20
00:01:08,780 --> 00:01:14,450
plataform I'm one of the cofounders of

21
00:01:11,600 --> 00:01:18,350
shelter labs which is an online platform

22
00:01:14,450 --> 00:01:20,030
to learn how to play where security to

23
00:01:18,350 --> 00:01:21,979
learn a little bit of more about

24
00:01:20,030 --> 00:01:24,020
security of Toro hands-on approach to

25
00:01:21,980 --> 00:01:25,340
free to check it out by the way is not

26
00:01:24,020 --> 00:01:29,979
the same shelter as the other

27
00:01:25,340 --> 00:01:34,880
presentation about the evasion stuff

28
00:01:29,980 --> 00:01:39,440
yeah so opinions are my own and not my

29
00:01:34,880 --> 00:01:43,130
views of my employers so so the agenda

30
00:01:39,440 --> 00:01:46,460
for today we're gonna take a quick look

31
00:01:43,130 --> 00:01:50,300
about REST API is to see how they work I

32
00:01:46,460 --> 00:01:52,039
want to present you some overall things

33
00:01:50,300 --> 00:01:53,899
about graphic wall because that's really

34
00:01:52,040 --> 00:01:56,870
important if you want to exploit them

35
00:01:53,900 --> 00:01:59,000
and I hope we get some hands on how to

36
00:01:56,870 --> 00:02:03,140
exploit graft well and some security

37
00:01:59,000 --> 00:02:04,580
recommendations at the end so let's talk

38
00:02:03,140 --> 00:02:07,070
about rest a little bit

39
00:02:04,580 --> 00:02:09,679
suppose this regular scenario for a bit

40
00:02:07,070 --> 00:02:12,109
and we have a to-do list web application

41
00:02:09,679 --> 00:02:14,870
and we have the dashboard for the to-do

42
00:02:12,110 --> 00:02:17,000
list and for this dashboard we need to

43
00:02:14,870 --> 00:02:19,640
present a few informations like the user

44
00:02:17,000 --> 00:02:20,420
name of the user that's current logged

45
00:02:19,640 --> 00:02:23,809
in

46
00:02:20,420 --> 00:02:27,470
titles of the buckets so for a buckets

47
00:02:23,810 --> 00:02:30,980
for example work or personal things or

48
00:02:27,470 --> 00:02:34,790
healthy things and you have the to do

49
00:02:30,980 --> 00:02:39,019
items for each bucket and how you do

50
00:02:34,790 --> 00:02:43,340
this ingress usually first you have to

51
00:02:39,020 --> 00:02:45,110
do every one request you get I the

52
00:02:43,340 --> 00:02:47,870
informations of the user to get a

53
00:02:45,110 --> 00:02:50,180
username so for example you do a get

54
00:02:47,870 --> 00:02:54,170
request for an endpoint for example

55
00:02:50,180 --> 00:02:57,739
users slash ID and get informations of

56
00:02:54,170 --> 00:02:59,929
that user and it comes with this does

57
00:02:57,739 --> 00:03:02,269
response for example with lots of

58
00:02:59,930 --> 00:03:06,590
informations and they user name of the

59
00:03:02,269 --> 00:03:09,890
user then you do another request like

60
00:03:06,590 --> 00:03:12,860
buckets slash the user ID to get all the

61
00:03:09,890 --> 00:03:15,109
buckets related to that user and it

62
00:03:12,860 --> 00:03:17,840
comes again with the response with lots

63
00:03:15,110 --> 00:03:19,370
of information that maybe you don't need

64
00:03:17,840 --> 00:03:22,730
you just want the name of the bucket

65
00:03:19,370 --> 00:03:25,790
that's okay and then you get you need to

66
00:03:22,730 --> 00:03:29,298
do a third request for example like

67
00:03:25,790 --> 00:03:32,390
buckets slash item slash bucket ID for

68
00:03:29,299 --> 00:03:34,340
each bucket for the user to get the

69
00:03:32,390 --> 00:03:37,339
informations related to the buckets the

70
00:03:34,340 --> 00:03:43,370
items from the to-do list that it needs

71
00:03:37,340 --> 00:03:46,400
to do and this is not only a dashboard

72
00:03:43,370 --> 00:03:48,739
right because some people can say I can

73
00:03:46,400 --> 00:03:50,660
create a see go endpoint for the

74
00:03:48,739 --> 00:03:52,250
dashboard and I only return the

75
00:03:50,660 --> 00:03:54,380
information that I need I don't need to

76
00:03:52,250 --> 00:03:57,890
return all those kind of things and I do

77
00:03:54,380 --> 00:03:59,540
only one request but it's not only a

78
00:03:57,890 --> 00:04:01,250
dashboard so you might need the

79
00:03:59,540 --> 00:04:03,560
informations of the users in another

80
00:04:01,250 --> 00:04:05,000
screens of your application and you

81
00:04:03,560 --> 00:04:08,570
might need a name of the book as in

82
00:04:05,000 --> 00:04:11,510
other screens so you need to have lots

83
00:04:08,570 --> 00:04:13,190
of endpoints one for different crafted

84
00:04:11,510 --> 00:04:16,339
for different parts of your application

85
00:04:13,190 --> 00:04:19,488
and again is not only a web application

86
00:04:16,339 --> 00:04:22,369
we usually have Android apps we have iOS

87
00:04:19,488 --> 00:04:24,530
and if that sometimes might behave

88
00:04:22,370 --> 00:04:27,440
different my requires different

89
00:04:24,530 --> 00:04:31,390
information which will require different

90
00:04:27,440 --> 00:04:33,600
endpoints for each of those screens so

91
00:04:31,390 --> 00:04:35,550
what if we have some

92
00:04:33,600 --> 00:04:38,960
for that that could help with that and

93
00:04:35,550 --> 00:04:42,960
that's why I wear crafts you all came in

94
00:04:38,960 --> 00:04:46,020
so a little bit of history graph QL was

95
00:04:42,960 --> 00:04:50,130
developed by Facebook and publicly

96
00:04:46,020 --> 00:04:53,580
released on their years of 2015 and it

97
00:04:50,130 --> 00:04:56,700
was created to solve a few of those

98
00:04:53,580 --> 00:05:00,390
issues it's really recent but it's

99
00:04:56,700 --> 00:05:02,340
already being used for so many great big

100
00:05:00,390 --> 00:05:02,880
companies for example we have here

101
00:05:02,340 --> 00:05:05,219
Twitter

102
00:05:02,880 --> 00:05:05,940
we have Shopify we have at least from

103
00:05:05,220 --> 00:05:08,160
bitbucket

104
00:05:05,940 --> 00:05:11,190
we have github that's using it already

105
00:05:08,160 --> 00:05:15,750
and lots of companies already using it

106
00:05:11,190 --> 00:05:17,670
and first it only exposes one endpoint

107
00:05:15,750 --> 00:05:20,190
for you so all the requests that you

108
00:05:17,670 --> 00:05:24,630
need to do your request for a single

109
00:05:20,190 --> 00:05:27,240
endpoint and you can another advantage

110
00:05:24,630 --> 00:05:29,969
of this is intends to minimize the

111
00:05:27,240 --> 00:05:32,580
amount of data transfer so avoid over

112
00:05:29,970 --> 00:05:34,620
and under fetching data so you got your

113
00:05:32,580 --> 00:05:37,050
going to request only the data you need

114
00:05:34,620 --> 00:05:39,360
so avoid like for example on the first

115
00:05:37,050 --> 00:05:41,850
rats rats requests where you got

116
00:05:39,360 --> 00:05:44,460
informations like from the birthday of

117
00:05:41,850 --> 00:05:47,400
the user if you don't need us you just

118
00:05:44,460 --> 00:05:50,130
won't receive it it helps you a fast

119
00:05:47,400 --> 00:05:52,590
development because we've graphed all

120
00:05:50,130 --> 00:05:55,950
the front-end team doesn't depend too

121
00:05:52,590 --> 00:05:58,710
much on the back-end team it can just do

122
00:05:55,950 --> 00:06:00,270
the queries the way they want and get

123
00:05:58,710 --> 00:06:04,140
the results that they need without

124
00:06:00,270 --> 00:06:06,750
really doing requests for the backends

125
00:06:04,140 --> 00:06:08,520
it works with any platform so it doesn't

126
00:06:06,750 --> 00:06:11,520
matter if you want to coat it in Python

127
00:06:08,520 --> 00:06:14,280
react and Valera or Rubby that really

128
00:06:11,520 --> 00:06:16,740
doesn't matter instead of basic Gnostic

129
00:06:14,280 --> 00:06:19,909
doesn't matter what database are you're

130
00:06:16,740 --> 00:06:23,130
using if it's a relational database like

131
00:06:19,910 --> 00:06:25,800
MySQL or post me or if you're using

132
00:06:23,130 --> 00:06:29,280
something like no sequel it really

133
00:06:25,800 --> 00:06:34,770
doesn't matter and it's basically only a

134
00:06:29,280 --> 00:06:38,669
query language 40 AP is so to understand

135
00:06:34,770 --> 00:06:42,510
the concepts and how to exploit it

136
00:06:38,670 --> 00:06:44,010
you'll notice at the end that exploiting

137
00:06:42,510 --> 00:06:46,760
graphical is no different than

138
00:06:44,010 --> 00:06:49,219
exploiting like other kind of

139
00:06:46,760 --> 00:06:50,930
web applications what do you need to do

140
00:06:49,220 --> 00:06:53,720
is understand the concepts understand

141
00:06:50,930 --> 00:06:55,670
how the language works so we have a few

142
00:06:53,720 --> 00:06:58,970
important concepts that I will show here

143
00:06:55,670 --> 00:07:03,950
there's types queries mutations schemas

144
00:06:58,970 --> 00:07:07,670
and resolvers so graph QL is basically

145
00:07:03,950 --> 00:07:10,789
built on types types are for example

146
00:07:07,670 --> 00:07:15,080
does simple thing that you have a type

147
00:07:10,790 --> 00:07:17,870
user with the fields ID that has a type

148
00:07:15,080 --> 00:07:19,849
ID and this is Clum a show mark at the

149
00:07:17,870 --> 00:07:22,850
end is just to say it can't be null or

150
00:07:19,850 --> 00:07:27,190
empty and another field name to be a

151
00:07:22,850 --> 00:07:30,380
string we have the special types to

152
00:07:27,190 --> 00:07:32,450
define it in graft law that one of them

153
00:07:30,380 --> 00:07:35,420
is the query type the current type is

154
00:07:32,450 --> 00:07:38,630
what you use to create requests you

155
00:07:35,420 --> 00:07:41,930
graph cool so that's how you ask data

156
00:07:38,630 --> 00:07:47,110
from the from the API so for example

157
00:07:41,930 --> 00:07:50,360
have this query thing that is users

158
00:07:47,110 --> 00:07:53,840
requesting for IDs and username and

159
00:07:50,360 --> 00:07:55,910
that's the one of queries are the most

160
00:07:53,840 --> 00:07:59,119
interesting things on graph QL here

161
00:07:55,910 --> 00:08:02,750
because as well as I was mentioning that

162
00:07:59,120 --> 00:08:04,700
it's easiest for developers UI here you

163
00:08:02,750 --> 00:08:07,610
can see that I request ID and username

164
00:08:04,700 --> 00:08:11,659
and I get response data exactly as a

165
00:08:07,610 --> 00:08:13,880
request FY for any reason want to change

166
00:08:11,660 --> 00:08:16,430
the world order between ID and username

167
00:08:13,880 --> 00:08:19,219
let me works the same time and the

168
00:08:16,430 --> 00:08:22,520
results on the right side will be on the

169
00:08:19,220 --> 00:08:26,420
same order there every question I can do

170
00:08:22,520 --> 00:08:29,570
queries by sending variables the same

171
00:08:26,420 --> 00:08:32,750
way as we can do in REST API - it does

172
00:08:29,570 --> 00:08:36,380
example here I send the ID to where I

173
00:08:32,750 --> 00:08:41,479
wanted data related to the user with the

174
00:08:36,380 --> 00:08:44,510
ID - equals - and you can see that we

175
00:08:41,479 --> 00:08:47,750
can build even more complex queries when

176
00:08:44,510 --> 00:08:52,819
in graph Q also for example I can just

177
00:08:47,750 --> 00:08:55,850
request ID username and this user is in

178
00:08:52,820 --> 00:08:58,040
the database is related to buckets so I

179
00:08:55,850 --> 00:09:00,220
can query the bucket set and the name of

180
00:08:58,040 --> 00:09:02,770
the bucket set so the

181
00:09:00,220 --> 00:09:05,050
one request really similar to the other

182
00:09:02,770 --> 00:09:08,410
one I can get the informations that I

183
00:09:05,050 --> 00:09:10,209
need so the username and the book is the

184
00:09:08,410 --> 00:09:14,530
name of the buckets related to that

185
00:09:10,210 --> 00:09:16,660
username we have the mutation type there

186
00:09:14,530 --> 00:09:18,850
is also define it in graphically already

187
00:09:16,660 --> 00:09:22,810
this is another special type and it's

188
00:09:18,850 --> 00:09:26,470
similar to the query but the goal of the

189
00:09:22,810 --> 00:09:28,660
mutation type is to request two data to

190
00:09:26,470 --> 00:09:31,180
be edited in the back end in their

191
00:09:28,660 --> 00:09:33,219
database so if the mutations types I can

192
00:09:31,180 --> 00:09:35,650
edit things or delete data from the

193
00:09:33,220 --> 00:09:38,800
database in this example here I have a

194
00:09:35,650 --> 00:09:40,600
mutation called create bucket where I

195
00:09:38,800 --> 00:09:43,930
just send two variables for this

196
00:09:40,600 --> 00:09:47,050
that's the name is cool and archive it

197
00:09:43,930 --> 00:09:49,660
which is false and the interesting about

198
00:09:47,050 --> 00:09:52,060
mutations to you is that I can also make

199
00:09:49,660 --> 00:09:55,920
queries inside a mutation so what I'm

200
00:09:52,060 --> 00:09:59,709
saying here yes when you execute this

201
00:09:55,920 --> 00:10:01,780
command they create bucket query please

202
00:09:59,710 --> 00:10:03,850
return the ID and the name of the object

203
00:10:01,780 --> 00:10:06,310
that you have just created in the

204
00:10:03,850 --> 00:10:09,220
database so in the right side you can

205
00:10:06,310 --> 00:10:11,319
see the ID is 18 and it comes back with

206
00:10:09,220 --> 00:10:14,380
the name there's the name the same name

207
00:10:11,320 --> 00:10:18,130
that I've just sent of course we have

208
00:10:14,380 --> 00:10:20,860
these schemas these schemas are just a

209
00:10:18,130 --> 00:10:24,070
collection of the graphically all types

210
00:10:20,860 --> 00:10:26,740
so it's basically all those types that

211
00:10:24,070 --> 00:10:30,040
we just discussed it put it together in

212
00:10:26,740 --> 00:10:32,500
a way that it shows how the API works

213
00:10:30,040 --> 00:10:35,380
how everything is connected so in this

214
00:10:32,500 --> 00:10:38,380
example here right in the end you can

215
00:10:35,380 --> 00:10:41,530
see that I have the type post which has

216
00:10:38,380 --> 00:10:43,600
two fields the title and author and we

217
00:10:41,530 --> 00:10:46,360
have the type person to have three

218
00:10:43,600 --> 00:10:48,520
fields that name age and posts you can

219
00:10:46,360 --> 00:10:51,190
also see that for example the type

220
00:10:48,520 --> 00:10:55,870
person the field post has an object

221
00:10:51,190 --> 00:10:57,820
called posts which cannot be new and you

222
00:10:55,870 --> 00:10:59,890
have the definitions of queries and

223
00:10:57,820 --> 00:11:03,190
mutations to this example I have one

224
00:10:59,890 --> 00:11:05,980
query called all persons which will on

225
00:11:03,190 --> 00:11:08,410
the right side of the columns you see

226
00:11:05,980 --> 00:11:11,560
what object will be returned it from the

227
00:11:08,410 --> 00:11:13,030
query so for your persons will return an

228
00:11:11,560 --> 00:11:16,030
object person we

229
00:11:13,030 --> 00:11:18,010
define it in the end and the same thing

230
00:11:16,030 --> 00:11:19,810
for their mutations types of

231
00:11:18,010 --> 00:11:24,760
descriptions I won't discuss in this

232
00:11:19,810 --> 00:11:27,849
talk today and resolvers resolvers are

233
00:11:24,760 --> 00:11:29,680
kind of the most important thing when

234
00:11:27,850 --> 00:11:32,800
you're talking about exploiting

235
00:11:29,680 --> 00:11:35,170
graphical and coding so we have the

236
00:11:32,800 --> 00:11:38,520
queries defining here so have our

237
00:11:35,170 --> 00:11:41,530
persons for example but how do we say

238
00:11:38,520 --> 00:11:44,290
what is the language what the language

239
00:11:41,530 --> 00:11:46,089
will do once it gets this query a person

240
00:11:44,290 --> 00:11:48,730
that's wearing resolvers coming

241
00:11:46,090 --> 00:11:51,660
resolvers take these queries either is a

242
00:11:48,730 --> 00:11:54,910
query or mutation or anything and

243
00:11:51,660 --> 00:11:58,719
handles it for this example here I have

244
00:11:54,910 --> 00:12:02,319
implemented resolver in Python for a

245
00:11:58,720 --> 00:12:05,110
query that returns the packets so it's

246
00:12:02,320 --> 00:12:07,960
our resolve buckets basically what it do

247
00:12:05,110 --> 00:12:10,270
is check if the user logged in as if

248
00:12:07,960 --> 00:12:12,310
there is a user logged in if it's not

249
00:12:10,270 --> 00:12:15,640
just return an exception saying you are

250
00:12:12,310 --> 00:12:19,599
not logged in if it receives a variable

251
00:12:15,640 --> 00:12:22,720
called search future the buckets using

252
00:12:19,600 --> 00:12:25,780
this variable if not just returned the

253
00:12:22,720 --> 00:12:28,260
buckets related to that user ID in at

254
00:12:25,780 --> 00:12:30,850
the end you see one of the most

255
00:12:28,260 --> 00:12:34,060
sensitive things of graph QL which is

256
00:12:30,850 --> 00:12:37,690
rewrite here I'm returning the whole of

257
00:12:34,060 --> 00:12:40,089
backed up bucket object that was future

258
00:12:37,690 --> 00:12:44,970
yeah you'll see later why this is

259
00:12:40,090 --> 00:12:48,700
important so yeah let's get you some

260
00:12:44,970 --> 00:12:53,280
exploitation first we need some tools

261
00:12:48,700 --> 00:12:56,610
right tooth to exploiting graph tool

262
00:12:53,280 --> 00:12:59,380
nowadays are really simple isn't nothing

263
00:12:56,610 --> 00:13:01,690
that complicated first you have some

264
00:12:59,380 --> 00:13:03,760
graphical payloads there's available in

265
00:13:01,690 --> 00:13:07,960
the github of payload all the things

266
00:13:03,760 --> 00:13:10,569
which is des github has a massive word

267
00:13:07,960 --> 00:13:13,440
list for lots of different things and

268
00:13:10,570 --> 00:13:16,360
also already has an word list for

269
00:13:13,440 --> 00:13:18,700
exploiting graph 2 also it contains a

270
00:13:16,360 --> 00:13:22,980
few endpoints and a few words that will

271
00:13:18,700 --> 00:13:22,980
help you identify and find

272
00:13:23,579 --> 00:13:29,949
horrible graphical applications you have

273
00:13:27,250 --> 00:13:32,709
in Sonya that's one of the tools that

274
00:13:29,950 --> 00:13:37,500
we're being we'll be using today here

275
00:13:32,709 --> 00:13:40,029
and in Sonya is really similar to

276
00:13:37,500 --> 00:13:41,740
postman application which I'm pretty

277
00:13:40,029 --> 00:13:44,649
sure that you guys should be familiar

278
00:13:41,740 --> 00:13:46,540
with we have graphed your playground

279
00:13:44,649 --> 00:13:49,480
which is an application also really

280
00:13:46,540 --> 00:13:52,870
similar to postman as just viewed as an

281
00:13:49,480 --> 00:13:55,390
IDE for graph QL it helps you build the

282
00:13:52,870 --> 00:13:59,170
Carreras intestine and you have one of

283
00:13:55,390 --> 00:14:02,439
the most important tools for exploiting

284
00:13:59,170 --> 00:14:05,649
things which is the graph QL Voyageur

285
00:14:02,440 --> 00:14:07,480
does I won't show you here today but I

286
00:14:05,649 --> 00:14:08,350
really recommend you to check it if

287
00:14:07,480 --> 00:14:11,290
you're interested

288
00:14:08,350 --> 00:14:14,130
and this basically what it does is get

289
00:14:11,290 --> 00:14:17,079
those schemas like this one and create a

290
00:14:14,130 --> 00:14:19,870
graph explaining how everything is

291
00:14:17,079 --> 00:14:23,769
connected and no way you can understand

292
00:14:19,870 --> 00:14:27,940
a little bit better how the API works

293
00:14:23,769 --> 00:14:32,649
and what you can do with the API so

294
00:14:27,940 --> 00:14:37,680
let's get you a few exploiters now for

295
00:14:32,649 --> 00:14:39,760
this presentation I wrote this - Julie's

296
00:14:37,680 --> 00:14:44,939
application in graphical the

297
00:14:39,760 --> 00:14:49,000
front-engine react and the backend is

298
00:14:44,940 --> 00:14:57,370
Python jungle with graph cool so at

299
00:14:49,000 --> 00:14:59,560
first I'll just log in here okay so this

300
00:14:57,370 --> 00:15:04,180
is a just really simple to-do list

301
00:14:59,560 --> 00:15:08,410
application I can add things here to go

302
00:15:04,180 --> 00:15:11,829
to a meeting or new tasks or whatever

303
00:15:08,410 --> 00:15:14,740
can create new buckets and it's just

304
00:15:11,829 --> 00:15:16,449
that simple so what's the first first

305
00:15:14,740 --> 00:15:20,769
thing we should do when we find an

306
00:15:16,449 --> 00:15:23,910
application like this well let's check

307
00:15:20,769 --> 00:15:26,740
the request to see what it does

308
00:15:23,910 --> 00:15:32,670
I'm pretty sure you guys cannot read it

309
00:15:26,740 --> 00:15:32,670
let me is it better a little bit No

310
00:15:33,449 --> 00:15:39,149
so we can see here lots of requests for

311
00:15:37,019 --> 00:15:43,319
the the endpoint that I mean is

312
00:15:39,149 --> 00:15:48,059
localhost for 3,000 but we can also see

313
00:15:43,319 --> 00:15:51,299
here a request for when any point on the

314
00:15:48,059 --> 00:15:58,228
port on the endpoint / graphic well on

315
00:15:51,299 --> 00:16:00,539
portal um for 8,000 here so doesn't

316
00:15:58,229 --> 00:16:03,689
point here graph QL it's really common

317
00:16:00,539 --> 00:16:05,729
is usually when you find a graphical

318
00:16:03,689 --> 00:16:07,738
application all the requests will be

319
00:16:05,729 --> 00:16:09,869
done for a graph cool so that's one

320
00:16:07,739 --> 00:16:14,369
thing that you should look for is either

321
00:16:09,869 --> 00:16:19,889
graph QL or graph iql or graph QL dot

322
00:16:14,369 --> 00:16:25,799
php' or something similar if we check in

323
00:16:19,889 --> 00:16:28,139
here the request the parameters are sent

324
00:16:25,799 --> 00:16:33,978
we can see here they request for the

325
00:16:28,139 --> 00:16:33,979
craft we already I just copped us here

326
00:16:39,439 --> 00:16:49,349
okay so you can see that similar to the

327
00:16:45,419 --> 00:16:52,109
queries we just seen okay I just erased

328
00:16:49,350 --> 00:16:56,220
a few things are not important to us is

329
00:16:52,109 --> 00:16:59,729
just things that are added to for the

330
00:16:56,220 --> 00:17:02,159
language so you can see here the

331
00:16:59,729 --> 00:17:05,129
language that the query that has been

332
00:17:02,159 --> 00:17:09,000
made so it's a query for you that user

333
00:17:05,128 --> 00:17:11,549
details type asking for teh username the

334
00:17:09,000 --> 00:17:14,339
bucket sets and for each bucket set I

335
00:17:11,549 --> 00:17:16,559
want the ID the name and the items

336
00:17:14,339 --> 00:17:20,039
related to that buckets done and for

337
00:17:16,559 --> 00:17:22,829
each item I want the to-do item and with

338
00:17:20,039 --> 00:17:25,859
only one request I can get all the

339
00:17:22,829 --> 00:17:27,418
information that I need already okay so

340
00:17:25,859 --> 00:17:31,580
we don't need to do like all those

341
00:17:27,419 --> 00:17:35,850
requests as we need it on the REST API

342
00:17:31,580 --> 00:17:46,610
okay so that's nice well let's try visit

343
00:17:35,850 --> 00:17:46,610
this URL here oh nice just close itself

344
00:17:58,090 --> 00:18:05,419
okay let's get to it graph slash

345
00:18:01,670 --> 00:18:08,180
graphical oh so this is the graph you'll

346
00:18:05,420 --> 00:18:11,480
play playground every time you install a

347
00:18:08,180 --> 00:18:15,110
graphical application to use it you will

348
00:18:11,480 --> 00:18:17,059
find this by default if you go to this

349
00:18:15,110 --> 00:18:19,250
endpoint / graphic well you see the

350
00:18:17,059 --> 00:18:22,129
doesn't this graph cloud playground

351
00:18:19,250 --> 00:18:24,260
which is a basically an IDE where you

352
00:18:22,130 --> 00:18:27,380
can write queries for graph QL and

353
00:18:24,260 --> 00:18:31,730
tested your application and it's

354
00:18:27,380 --> 00:18:35,179
supposed to be off when you put it into

355
00:18:31,730 --> 00:18:39,410
production but usually it does not what

356
00:18:35,179 --> 00:18:42,890
happens so it always you can always

357
00:18:39,410 --> 00:18:45,730
check it if you find it it but you will

358
00:18:42,890 --> 00:18:49,400
see that it's not really necessary so

359
00:18:45,730 --> 00:18:51,350
from this IDE here we can see this

360
00:18:49,400 --> 00:18:54,620
little button here in the corner can you

361
00:18:51,350 --> 00:18:56,750
see us called dogs if we click it we can

362
00:18:54,620 --> 00:19:00,379
see already all the documentation of our

363
00:18:56,750 --> 00:19:03,080
API so I have two queries two types one

364
00:19:00,380 --> 00:19:05,480
query and one mutation if I click on

365
00:19:03,080 --> 00:19:08,449
query for example I can see that I can

366
00:19:05,480 --> 00:19:11,870
query for buckets items users users

367
00:19:08,450 --> 00:19:14,510
detail if I go to buckets can see the

368
00:19:11,870 --> 00:19:17,360
bucket type I can see the fields of the

369
00:19:14,510 --> 00:19:19,940
buckets even then they are not on the

370
00:19:17,360 --> 00:19:20,750
request I can have a better understand

371
00:19:19,940 --> 00:19:22,870
of this already

372
00:19:20,750 --> 00:19:25,520
okay so I have the idea out there

373
00:19:22,870 --> 00:19:30,729
created that I have the owner have the

374
00:19:25,520 --> 00:19:33,559
items so it's documentation for free for

375
00:19:30,730 --> 00:19:38,179
for graphical endpoints

376
00:19:33,559 --> 00:19:42,440
this is not exactly bad so for example

377
00:19:38,179 --> 00:19:44,080
github has graph QL open API endpoint so

378
00:19:42,440 --> 00:19:47,420
this helps a lot if you're developing

379
00:19:44,080 --> 00:19:49,309
developing for github you can just get

380
00:19:47,420 --> 00:19:51,620
this documentation understand and do

381
00:19:49,309 --> 00:19:56,090
whatever you want but because it's

382
00:19:51,620 --> 00:20:00,469
supposed to be like this and we can also

383
00:19:56,090 --> 00:20:03,020
use a tool like in Sonya so in Sonya and

384
00:20:00,470 --> 00:20:04,700
here is really similar to the graph to

385
00:20:03,020 --> 00:20:07,129
our playground but we don't depend the

386
00:20:04,700 --> 00:20:09,260
application to give this to us

387
00:20:07,130 --> 00:20:11,419
we can just configure this as you can

388
00:20:09,260 --> 00:20:14,690
see is really similar to postman

389
00:20:11,419 --> 00:20:17,029
I just configure a post I put the URL of

390
00:20:14,690 --> 00:20:20,359
the endpoint and I can write my queries

391
00:20:17,029 --> 00:20:22,669
here and if you notice right here I have

392
00:20:20,359 --> 00:20:24,889
the schema button where I can refresh

393
00:20:22,669 --> 00:20:29,179
the schema and show the documentation

394
00:20:24,889 --> 00:20:32,418
just the same way as the graphical

395
00:20:29,179 --> 00:20:35,749
playground on the application and this

396
00:20:32,419 --> 00:20:43,159
is not anything like hidden or something

397
00:20:35,749 --> 00:20:46,219
this let me check better to read so this

398
00:20:43,159 --> 00:20:51,739
is the query graph to a query that it

399
00:20:46,219 --> 00:20:53,659
returns all this documentation so you

400
00:20:51,739 --> 00:20:56,419
can just make this query for the

401
00:20:53,659 --> 00:21:01,849
documentation and get it it's really

402
00:20:56,419 --> 00:21:03,829
that simple but let's get a few more

403
00:21:01,849 --> 00:21:07,489
understanding on our graphical

404
00:21:03,829 --> 00:21:09,469
application so that students request for

405
00:21:07,489 --> 00:21:14,509
example with a request that we just

406
00:21:09,469 --> 00:21:18,529
captured so here it is the result of the

407
00:21:14,509 --> 00:21:22,279
query and as we have the documentation

408
00:21:18,529 --> 00:21:24,679
here this IDE helps us a lot so for

409
00:21:22,279 --> 00:21:27,109
example we have the username here if I

410
00:21:24,679 --> 00:21:32,419
just type control space it autocompletes

411
00:21:27,109 --> 00:21:34,609
all the other data of the endpoint so I

412
00:21:32,419 --> 00:21:39,829
can for example kirara for my password

413
00:21:34,609 --> 00:21:43,519
hash if I want so if this was a REST API

414
00:21:39,829 --> 00:21:45,259
the data that is coded that's how it is

415
00:21:43,519 --> 00:21:48,289
and there's nothing much we can do about

416
00:21:45,259 --> 00:21:50,419
it but as the graph crawl I can just add

417
00:21:48,289 --> 00:21:52,669
more information here and request

418
00:21:50,419 --> 00:21:54,859
whatever I want so I can add an email

419
00:21:52,669 --> 00:22:01,909
here for example and now I get the email

420
00:21:54,859 --> 00:22:04,759
of the user okay and another thing is if

421
00:22:01,909 --> 00:22:07,070
by any chance I don't have the access to

422
00:22:04,759 --> 00:22:10,729
schemas and I don't have access to this

423
00:22:07,070 --> 00:22:13,129
autocomplete I always have to pay

424
00:22:10,729 --> 00:22:15,499
attention of their error codes so for

425
00:22:13,129 --> 00:22:18,529
example here I don't know if there is a

426
00:22:15,499 --> 00:22:21,799
password field but if I just write pass

427
00:22:18,529 --> 00:22:25,700
and hit Send it shows me a railroad

428
00:22:21,799 --> 00:22:29,510
message say cannot pass on type user

429
00:22:25,700 --> 00:22:32,540
did you mean password so yeah I mean

430
00:22:29,510 --> 00:22:34,550
password and then it works so that's

431
00:22:32,540 --> 00:22:39,050
another thing that we should always keep

432
00:22:34,550 --> 00:22:44,620
an eye on and really if you're recording

433
00:22:39,050 --> 00:22:48,139
on graph QL just before continuing I

434
00:22:44,620 --> 00:22:50,060
just I can only query all this data from

435
00:22:48,140 --> 00:22:53,750
the user because as I was mentioned

436
00:22:50,060 --> 00:22:55,909
before the resolver for this query is

437
00:22:53,750 --> 00:22:58,730
returning the whole object of the user

438
00:22:55,910 --> 00:23:05,540
and not only even their sensitive data

439
00:22:58,730 --> 00:23:11,180
like the password so if I have a bucket

440
00:23:05,540 --> 00:23:14,210
son here and if I want you I can all

441
00:23:11,180 --> 00:23:16,820
buckets are related to an owner of the

442
00:23:14,210 --> 00:23:20,960
bucket and I can do this back query in

443
00:23:16,820 --> 00:23:25,850
graphical tool so I can get the owner of

444
00:23:20,960 --> 00:23:27,710
the bucket with their username okay

445
00:23:25,850 --> 00:23:31,850
that's not a big deal

446
00:23:27,710 --> 00:23:36,140
it's right here but every username has a

447
00:23:31,850 --> 00:23:39,590
bucket sent in every book it's at have

448
00:23:36,140 --> 00:23:44,090
his owner which has a bucket set it has

449
00:23:39,590 --> 00:23:46,760
his owner which has a book itself you

450
00:23:44,090 --> 00:23:50,120
see where I'm going with this I have an

451
00:23:46,760 --> 00:23:55,950
owner and a book it's said in an owner

452
00:23:50,120 --> 00:23:59,099
and book it said in an owner and I want

453
00:23:55,950 --> 00:23:59,099
[Music]

454
00:23:59,410 --> 00:24:07,520
yeah and from the owner

455
00:24:01,580 --> 00:24:18,860
I want the ID so see how long it takes

456
00:24:07,520 --> 00:24:21,670
to oh I just messed something here let's

457
00:24:18,860 --> 00:24:21,669
go back a little bit

458
00:24:24,730 --> 00:24:36,850
look it's ads and name let's go for the

459
00:24:29,710 --> 00:24:40,930
name for this one okay so let's add a

460
00:24:36,850 --> 00:24:45,669
little bit more of owners look at sets

461
00:24:40,930 --> 00:24:49,780
and owners and professor and I booked it

462
00:24:45,670 --> 00:24:55,330
said again and an owner and they use

463
00:24:49,780 --> 00:24:58,030
your name so yes you can understand out

464
00:24:55,330 --> 00:25:01,270
that as much as I can add this like

465
00:24:58,030 --> 00:25:04,360
forever and what is going to cause is

466
00:25:01,270 --> 00:25:06,129
like did I do s on the application I can

467
00:25:04,360 --> 00:25:08,679
add this forever in the application to

468
00:25:06,130 --> 00:25:10,930
take just longer and longer to respond

469
00:25:08,680 --> 00:25:13,690
and I can just break the application to

470
00:25:10,930 --> 00:25:16,390
respond so that's something you also

471
00:25:13,690 --> 00:25:18,550
need to be query you not to be worried

472
00:25:16,390 --> 00:25:24,880
about is to limit the size of the

473
00:25:18,550 --> 00:25:30,490
queries how complex they are and we can

474
00:25:24,880 --> 00:25:35,640
also for example I couldn't create a

475
00:25:30,490 --> 00:25:40,870
query for the items okay I want to see

476
00:25:35,640 --> 00:25:43,240
the ID and the items in theory I'm

477
00:25:40,870 --> 00:25:46,899
supposed to get a response of my own

478
00:25:43,240 --> 00:25:48,730
items but as we can see here it's

479
00:25:46,900 --> 00:25:53,140
returning all of the items of the

480
00:25:48,730 --> 00:25:55,690
database not only mine this is a regular

481
00:25:53,140 --> 00:25:57,960
a really common problem

482
00:25:55,690 --> 00:26:01,390
I was just large cool thing on the code

483
00:25:57,960 --> 00:26:07,300
and that is something that can really

484
00:26:01,390 --> 00:26:09,580
happen the REST API skew but what it

485
00:26:07,300 --> 00:26:13,090
doesn't happen and we can really

486
00:26:09,580 --> 00:26:17,580
leverage graph call here is items are

487
00:26:13,090 --> 00:26:23,230
related to buckets and all the buckets

488
00:26:17,580 --> 00:26:30,699
have an owner and all the honors I can

489
00:26:23,230 --> 00:26:35,370
get the ID user name and password you

490
00:26:30,700 --> 00:26:38,940
know their response that I get as

491
00:26:35,370 --> 00:26:41,820
as I can query all the items from the

492
00:26:38,940 --> 00:26:45,680
database and for each database I can

493
00:26:41,820 --> 00:26:49,169
crawl back to the owner of that item I

494
00:26:45,680 --> 00:26:51,960
can request the passwords for all the

495
00:26:49,170 --> 00:26:58,710
users logged register in the

496
00:26:51,960 --> 00:27:01,170
applications here so from simple item

497
00:26:58,710 --> 00:27:04,650
things that was being likened I can get

498
00:27:01,170 --> 00:27:11,940
all the P is for the users with

499
00:27:04,650 --> 00:27:18,660
registered in my database okay so

500
00:27:11,940 --> 00:27:29,070
another another thing I have a query

501
00:27:18,660 --> 00:27:32,090
called the buckets oh okay so let's say

502
00:27:29,070 --> 00:27:32,090
for the buckets

503
00:27:40,200 --> 00:27:48,239
for the buckets I want the ID and the

504
00:27:43,369 --> 00:27:52,279
name okay and it's working as expected

505
00:27:48,239 --> 00:27:58,980
only returned returning my own buckets

506
00:27:52,279 --> 00:28:02,570
but I have this search thing here where

507
00:27:58,980 --> 00:28:07,369
I can search for buckets so let's say I

508
00:28:02,570 --> 00:28:12,470
want all buckets that have to wear go

509
00:28:07,369 --> 00:28:18,439
like this it doesn't find anyone

510
00:28:12,470 --> 00:28:18,440
let's try life

511
00:28:30,660 --> 00:28:44,799
so if I for example okay no it's not

512
00:28:40,690 --> 00:28:54,390
supposed to be case sensitive but it's

513
00:28:44,799 --> 00:28:56,679
supposed to work but no anyway here

514
00:28:54,390 --> 00:28:58,990
don't know why is not working this

515
00:28:56,679 --> 00:29:02,250
search right now but I work unless later

516
00:28:58,990 --> 00:29:05,350
you know but this is just another

517
00:29:02,250 --> 00:29:07,720
variable that it's being sent to the

518
00:29:05,350 --> 00:29:12,820
backend to be queried on the database

519
00:29:07,720 --> 00:29:16,000
just like every regular variable that we

520
00:29:12,820 --> 00:29:20,350
sent to it's like every user input that

521
00:29:16,000 --> 00:29:23,559
we sent to databases so I can always try

522
00:29:20,350 --> 00:29:26,860
to inject things here so just write to

523
00:29:23,559 --> 00:29:30,760
injectors single quote here and I get a

524
00:29:26,860 --> 00:29:42,219
syntax error so I can try to work on

525
00:29:30,760 --> 00:29:47,070
this so let's say or order order by one

526
00:29:42,220 --> 00:29:51,580
for example and coming out it looks like

527
00:29:47,070 --> 00:29:55,720
getting somewhere in the sequel

528
00:29:51,580 --> 00:29:58,540
injection here so graph QL is just as

529
00:29:55,720 --> 00:30:00,880
vulnerable as sequel injection or

530
00:29:58,540 --> 00:30:03,730
database injection or any kind of

531
00:30:00,880 --> 00:30:06,970
injection as the other languages you

532
00:30:03,730 --> 00:30:09,490
just need to understand that yeah this

533
00:30:06,970 --> 00:30:14,549
is a variable and you can play with this

534
00:30:09,490 --> 00:30:25,710
you so if we can do something like

535
00:30:14,549 --> 00:30:30,850
select oh you know you know all select I

536
00:30:25,710 --> 00:30:32,500
have to do this to match it sequel

537
00:30:30,850 --> 00:30:42,330
injection can be another talk on the

538
00:30:32,500 --> 00:30:46,090
zone get name from bucket bucket

539
00:30:42,330 --> 00:30:49,240
okay now I just made a sequel query

540
00:30:46,090 --> 00:30:52,419
injection on the application it wasn't

541
00:30:49,240 --> 00:30:54,670
working the search but this is a little

542
00:30:52,420 --> 00:30:57,990
bit better right because now I know I

543
00:30:54,670 --> 00:31:02,350
have all the buckets for every one for

544
00:30:57,990 --> 00:31:05,590
in that's registering my database so

545
00:31:02,350 --> 00:31:10,270
yeah those are a few of the things that

546
00:31:05,590 --> 00:31:12,639
you can explain in Graf cool so I had

547
00:31:10,270 --> 00:31:18,400
some slides here that I glad I did I

548
00:31:12,640 --> 00:31:22,380
needed to use because just if the demo

549
00:31:18,400 --> 00:31:27,460
wasn't working and some recommendations

550
00:31:22,380 --> 00:31:29,740
so query whitelisting so you need to

551
00:31:27,460 --> 00:31:31,690
make sure that your application only

552
00:31:29,740 --> 00:31:35,230
accepts the query dollars to post you

553
00:31:31,690 --> 00:31:37,180
and you are protecting the sensitive

554
00:31:35,230 --> 00:31:40,300
data of the users for example the

555
00:31:37,180 --> 00:31:43,690
password even though that the graph QL

556
00:31:40,300 --> 00:31:45,820
allows you all this dynamic thing of the

557
00:31:43,690 --> 00:31:47,800
Quarian helps a lot of front-end people

558
00:31:45,820 --> 00:31:50,770
you need to be alright as some of the

559
00:31:47,800 --> 00:31:54,340
stuff cannot be querying okay you need

560
00:31:50,770 --> 00:31:57,400
to limit the depth or the complex or of

561
00:31:54,340 --> 00:31:59,050
the query there's a-- and actually if

562
00:31:57,400 --> 00:32:03,760
you check on the graph cloud security

563
00:31:59,050 --> 00:32:06,940
page there's depth limit is the thing

564
00:32:03,760 --> 00:32:11,260
that they really mention and there is

565
00:32:06,940 --> 00:32:13,510
stress as the be sure that your queries

566
00:32:11,260 --> 00:32:15,490
won't stop the database won't be too

567
00:32:13,510 --> 00:32:18,340
long or too complex that your database

568
00:32:15,490 --> 00:32:21,160
cannot handle it right your resolvers

569
00:32:18,340 --> 00:32:25,540
correctly so you don't leak data they're

570
00:32:21,160 --> 00:32:27,340
not necessary for the for the users do

571
00:32:25,540 --> 00:32:32,050
there's several validations as you as

572
00:32:27,340 --> 00:32:34,330
usual don't only trust the the client

573
00:32:32,050 --> 00:32:36,159
and code that you wrote for the

574
00:32:34,330 --> 00:32:39,699
client-side application you need to

575
00:32:36,160 --> 00:32:43,660
check everything because it's okay that

576
00:32:39,700 --> 00:32:46,390
is vulnerable to sequel injections to

577
00:32:43,660 --> 00:32:49,600
cross-site scripting into all those kind

578
00:32:46,390 --> 00:32:52,960
of injections be careful with your error

579
00:32:49,600 --> 00:32:54,760
messages be sure to only reply the

580
00:32:52,960 --> 00:32:55,450
message that is really useful to the

581
00:32:54,760 --> 00:32:57,370
users

582
00:32:55,450 --> 00:33:00,130
and don't like things like did you mean

583
00:32:57,370 --> 00:33:02,559
this thing and help the attackers to

584
00:33:00,130 --> 00:33:05,019
understand better your database and have

585
00:33:02,559 --> 00:33:08,590
proper access control so for example

586
00:33:05,019 --> 00:33:11,169
that items thing that you could query

587
00:33:08,590 --> 00:33:13,360
all the items of their users there's

588
00:33:11,169 --> 00:33:16,840
still a problem that graph you all is

589
00:33:13,360 --> 00:33:20,529
not going to resolve so be sure to check

590
00:33:16,840 --> 00:33:23,290
this properly and that's it thanks for

591
00:33:20,529 --> 00:33:30,869
presentations any question

592
00:33:23,290 --> 00:33:30,869
[Applause]

