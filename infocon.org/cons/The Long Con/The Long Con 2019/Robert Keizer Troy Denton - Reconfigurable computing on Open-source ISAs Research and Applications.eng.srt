1
00:00:08,550 --> 00:00:14,609
[Applause]

2
00:00:14,850 --> 00:00:23,770
hello my name is Troy Denton I'm a

3
00:00:20,320 --> 00:00:26,950
longtime listener first-time caller to

4
00:00:23,770 --> 00:00:29,019
the long con and it's a great privilege

5
00:00:26,950 --> 00:00:31,240
to speak to some of the brightest people

6
00:00:29,019 --> 00:00:32,980
I know in this room here so thank you

7
00:00:31,240 --> 00:00:35,379
for having me and thanks for sticking

8
00:00:32,980 --> 00:00:45,129
around to the end let's have a round of

9
00:00:35,379 --> 00:00:47,649
applause for lifelong learning so the

10
00:00:45,129 --> 00:00:49,599
project that Robert and I have elected

11
00:00:47,649 --> 00:00:52,600
to work on might be the craziest thing

12
00:00:49,600 --> 00:00:58,480
I've ever elected to work on and we call

13
00:00:52,600 --> 00:01:01,530
it reconfigurable computing so what what

14
00:00:58,480 --> 00:01:04,560
does that entail what does that mean

15
00:01:01,530 --> 00:01:08,590
I'll break it down to a human analogy

16
00:01:04,560 --> 00:01:11,770
I'm told there are people on this earth

17
00:01:08,590 --> 00:01:15,340
they call themselves body builders they

18
00:01:11,770 --> 00:01:18,970
like to get together in sweaty dark

19
00:01:15,340 --> 00:01:24,729
brick themed rooms and they lift heavy

20
00:01:18,970 --> 00:01:27,310
objects over and over again myself like

21
00:01:24,729 --> 00:01:29,530
a lot of you have what I call a shitty

22
00:01:27,310 --> 00:01:31,899
IT body so I don't really know what

23
00:01:29,530 --> 00:01:34,630
that's like but I have one good

24
00:01:31,899 --> 00:01:37,720
authority that they get really good at

25
00:01:34,630 --> 00:01:40,899
lifting things after doing it a lot and

26
00:01:37,720 --> 00:01:43,289
looking at their own technique so if

27
00:01:40,899 --> 00:01:45,970
people can do that if they can improve

28
00:01:43,289 --> 00:01:47,500
by doing the same thing over and over

29
00:01:45,970 --> 00:01:50,410
again and analyzing their own

30
00:01:47,500 --> 00:01:53,229
efficiencies wow what if computers could

31
00:01:50,410 --> 00:01:54,880
do that why can't computers do that so

32
00:01:53,229 --> 00:01:59,380
that's kind of the crux of our project

33
00:01:54,880 --> 00:02:03,098
here why did we elect to do such a crazy

34
00:01:59,380 --> 00:02:05,770
thing the answer plainly is the same

35
00:02:03,099 --> 00:02:07,720
reason you're all here today we just

36
00:02:05,770 --> 00:02:08,829
like doing nerdy that's really all

37
00:02:07,720 --> 00:02:11,530
it is

38
00:02:08,830 --> 00:02:13,629
my input into our meetings to figure

39
00:02:11,530 --> 00:02:15,790
this out I am something of an embedded

40
00:02:13,629 --> 00:02:18,190
systems designer and I wanted to take

41
00:02:15,790 --> 00:02:21,280
the next step and do something with a

42
00:02:18,190 --> 00:02:23,109
ddr3 chip in it so branching into high

43
00:02:21,280 --> 00:02:24,520
speed designs that was literally my only

44
00:02:23,110 --> 00:02:26,410
criteria

45
00:02:24,520 --> 00:02:30,400
and robbed abroad sheer madness to my

46
00:02:26,410 --> 00:02:32,799
plate and I ate it up willingly yeah so

47
00:02:30,400 --> 00:02:34,810
we resolved to do basically the hardest

48
00:02:32,800 --> 00:02:40,810
thing we could think of and we'll see

49
00:02:34,810 --> 00:02:43,330
how far we get how might this work for

50
00:02:40,810 --> 00:02:44,860
people who have used like Bitcoin miners

51
00:02:43,330 --> 00:02:46,870
and things like that you might be

52
00:02:44,860 --> 00:02:51,280
familiar with a device called the field

53
00:02:46,870 --> 00:02:55,690
programmable gate array or FPGA what

54
00:02:51,280 --> 00:02:58,780
that is is a gigantic chip that has a

55
00:02:55,690 --> 00:03:01,120
ton of logical building blocks inside of

56
00:02:58,780 --> 00:03:03,670
it that you can connect whichever way

57
00:03:01,120 --> 00:03:07,150
you like and you specify that through

58
00:03:03,670 --> 00:03:08,859
software on an intuitive level it's like

59
00:03:07,150 --> 00:03:11,710
having a shitload of Lego

60
00:03:08,860 --> 00:03:18,070
all crammed into a little chip to do

61
00:03:11,710 --> 00:03:20,050
your bidding on the low level you can

62
00:03:18,070 --> 00:03:22,000
use it to make arbitrary logic functions

63
00:03:20,050 --> 00:03:24,640
so if you think back to electronics

64
00:03:22,000 --> 00:03:27,310
class when he did NAND gates and or

65
00:03:24,640 --> 00:03:30,070
gates XOR gates that's all in there in

66
00:03:27,310 --> 00:03:33,940
varying forms you can wire up arbitrary

67
00:03:30,070 --> 00:03:36,280
stuff on modern devices we have so many

68
00:03:33,940 --> 00:03:38,859
of these things that it becomes feasible

69
00:03:36,280 --> 00:03:41,410
to make a whole CPU in there or multiple

70
00:03:38,860 --> 00:03:47,530
CPUs and that is in fact a common use

71
00:03:41,410 --> 00:03:50,980
case of these in the way that CPUs run

72
00:03:47,530 --> 00:03:53,260
on a kernel like a binary image FPGAs

73
00:03:50,980 --> 00:03:55,299
similarly have their own binary image

74
00:03:53,260 --> 00:03:57,940
that tells it how to configure itself

75
00:03:55,300 --> 00:04:00,280
when you power the device on it goes to

76
00:03:57,940 --> 00:04:02,500
its SPI flash or whatever configuration

77
00:04:00,280 --> 00:04:04,959
storage you have and it loads what's

78
00:04:02,500 --> 00:04:07,660
called a bit stream which tells it how

79
00:04:04,959 --> 00:04:17,350
to wire up a CPU out of its individual

80
00:04:07,660 --> 00:04:18,668
little building blocks yes old memes I'm

81
00:04:17,350 --> 00:04:21,040
humming a lot I haven't practiced this

82
00:04:18,668 --> 00:04:24,219
by the way thank you for your patience

83
00:04:21,040 --> 00:04:27,040
so Rob and I are open-source aficionados

84
00:04:24,220 --> 00:04:29,200
to say the least I would call it quasi

85
00:04:27,040 --> 00:04:32,950
religious fervor with which we use these

86
00:04:29,200 --> 00:04:36,130
systems it really helps us in analyzing

87
00:04:32,950 --> 00:04:38,110
workloads and CPUs because we can dig

88
00:04:36,130 --> 00:04:40,569
into the system internals and use deep

89
00:04:38,110 --> 00:04:42,400
symbols to see what things are doing and

90
00:04:40,569 --> 00:04:45,310
to help us analyze the systems a little

91
00:04:42,400 --> 00:04:46,989
easier I won't say it's impossible to do

92
00:04:45,310 --> 00:04:48,939
this on a closed source system but it

93
00:04:46,990 --> 00:04:52,120
would certainly be harder

94
00:04:48,939 --> 00:04:54,280
so the general workflow that we have

95
00:04:52,120 --> 00:04:56,469
envisioned and embarked on to make a

96
00:04:54,280 --> 00:05:00,219
computer that improves itself looks a

97
00:04:56,469 --> 00:05:02,919
bit like this we first use profiling

98
00:05:00,219 --> 00:05:06,250
tools and debugging symbols to figure

99
00:05:02,919 --> 00:05:09,210
out where a program might be slow so

100
00:05:06,250 --> 00:05:11,770
think of like a non hardware accelerated

101
00:05:09,210 --> 00:05:14,109
sha-256 algorithm that's going to take

102
00:05:11,770 --> 00:05:16,900
some cpu time we would be able to easily

103
00:05:14,110 --> 00:05:18,729
pick that out we can then use these

104
00:05:16,900 --> 00:05:21,609
results to figure out in focus efforts

105
00:05:18,729 --> 00:05:24,400
on what should be optimized and we can

106
00:05:21,610 --> 00:05:27,639
use existing tools with limitations to

107
00:05:24,400 --> 00:05:29,650
convert these logical functions into a

108
00:05:27,639 --> 00:05:33,039
hardware implementation so instead of a

109
00:05:29,650 --> 00:05:36,340
C library it might shuffle out to be

110
00:05:33,039 --> 00:05:40,870
some pipelined data flow that we can put

111
00:05:36,340 --> 00:05:42,580
in a digital logic form we can then use

112
00:05:40,870 --> 00:05:45,909
existing tools to fold these

113
00:05:42,580 --> 00:05:49,508
improvements back into that binary image

114
00:05:45,909 --> 00:05:52,120
that is the CPU and then the next time

115
00:05:49,509 --> 00:05:54,669
you boot the system or do some smarter

116
00:05:52,120 --> 00:05:56,440
tricks you can then make advantage or

117
00:05:54,669 --> 00:06:00,750
take advantage of these modifications to

118
00:05:56,440 --> 00:06:00,750
the CPU to make your programs run faster

119
00:06:01,529 --> 00:06:06,729
this would be really hard to do on a

120
00:06:03,909 --> 00:06:09,009
generic level because you know you add

121
00:06:06,729 --> 00:06:10,539
to a CPU a new instruction comes out you

122
00:06:09,009 --> 00:06:12,819
would have to compile your software to

123
00:06:10,539 --> 00:06:15,729
use that new instruction that's not

124
00:06:12,819 --> 00:06:18,759
terribly useful unless you have way more

125
00:06:15,729 --> 00:06:21,400
time than money so our approach is to be

126
00:06:18,759 --> 00:06:24,279
able to flip out library functions so

127
00:06:21,400 --> 00:06:27,789
that'll using for example LD preload on

128
00:06:24,279 --> 00:06:30,639
Linux instead of loading lib SSL load

129
00:06:27,789 --> 00:06:32,409
like Lib SSL underscore FPGA and then

130
00:06:30,639 --> 00:06:34,169
the calling software really wouldn't

131
00:06:32,409 --> 00:06:36,370
know the difference that it's using a

132
00:06:34,169 --> 00:06:41,710
performance enhanced version of the same

133
00:06:36,370 --> 00:06:43,539
stuff the system design we're kind of

134
00:06:41,710 --> 00:06:45,818
tearing this presentation in layers

135
00:06:43,539 --> 00:06:48,459
I'm the hardware guy so I'll indulge you

136
00:06:45,819 --> 00:06:50,440
in the hardware here and I welcome you

137
00:06:48,459 --> 00:06:51,940
to join me into the madness of

138
00:06:50,440 --> 00:06:56,530
high-speed electronic design

139
00:06:51,940 --> 00:06:58,120
and FPGA tomfoolery there's a lot of

140
00:06:56,530 --> 00:06:59,919
vendors out there and a lot of them you

141
00:06:58,120 --> 00:07:02,890
have to use their specific software to

142
00:06:59,920 --> 00:07:05,110
do things as referenced my religious

143
00:07:02,890 --> 00:07:05,860
fervor doesn't let me do that for better

144
00:07:05,110 --> 00:07:09,130
or worse

145
00:07:05,860 --> 00:07:11,410
so we're electing to use the lattice

146
00:07:09,130 --> 00:07:13,000
semiconductor options which have been

147
00:07:11,410 --> 00:07:15,460
reverse engineered by the open-source

148
00:07:13,000 --> 00:07:17,830
community so the first one on the left

149
00:07:15,460 --> 00:07:21,340
that's the that's a nice forty device

150
00:07:17,830 --> 00:07:23,859
that has been around for a few years

151
00:07:21,340 --> 00:07:25,570
project ice storm was the what the

152
00:07:23,860 --> 00:07:29,380
project that reverse engineered that and

153
00:07:25,570 --> 00:07:32,080
lets you write FPGA bitstream zwip in

154
00:07:29,380 --> 00:07:33,880
source tools in I don't know how long

155
00:07:32,080 --> 00:07:35,109
ago the ECP five was released I feel

156
00:07:33,880 --> 00:07:38,350
like it was only a year or two or

157
00:07:35,110 --> 00:07:40,030
something about a year it is a far more

158
00:07:38,350 --> 00:07:42,010
capable device that's also been

159
00:07:40,030 --> 00:07:44,950
reverse-engineered and it is way the

160
00:07:42,010 --> 00:07:47,440
hell bigger so the ice forty has just

161
00:07:44,950 --> 00:07:50,260
shy of eight K programmable logic cells

162
00:07:47,440 --> 00:07:52,090
the EC p5 readily kicks the out of

163
00:07:50,260 --> 00:07:57,969
that with like eighty-five thousand it

164
00:07:52,090 --> 00:08:01,330
is an absolute workhorse they are also

165
00:07:57,970 --> 00:08:03,070
quite inexpensive so you go to memory

166
00:08:01,330 --> 00:08:04,960
Express you buy a new CPU you're easily

167
00:08:03,070 --> 00:08:07,690
dropping hundreds of dollars one of

168
00:08:04,960 --> 00:08:10,390
these little chips is like $15 granted

169
00:08:07,690 --> 00:08:14,770
it's not like an i7 but it can do some

170
00:08:10,390 --> 00:08:17,349
pretty incredible stuff for $15 so as

171
00:08:14,770 --> 00:08:19,450
most hardware projects begin it's really

172
00:08:17,350 --> 00:08:20,620
hard to hit the ground running when you

173
00:08:19,450 --> 00:08:21,969
know you're just buying the chip you got

174
00:08:20,620 --> 00:08:24,790
to make the motherboard and stuff like

175
00:08:21,970 --> 00:08:26,770
you can't just wire things to it like an

176
00:08:24,790 --> 00:08:29,680
Arduino this thing is like a very

177
00:08:26,770 --> 00:08:31,330
compact device so you start life off in

178
00:08:29,680 --> 00:08:33,700
these projects with a with what's called

179
00:08:31,330 --> 00:08:35,770
a development board so this this is the

180
00:08:33,700 --> 00:08:37,990
architecture that we found here the

181
00:08:35,770 --> 00:08:39,939
Versa you can pick it up on DG key and

182
00:08:37,990 --> 00:08:41,710
get it tomorrow if you the order before

183
00:08:39,940 --> 00:08:44,620
6 p.m.

184
00:08:41,710 --> 00:08:46,210
it's got PCIe a full complement of cool

185
00:08:44,620 --> 00:08:51,100
high-speed features and it's a good

186
00:08:46,210 --> 00:08:53,020
starting point where we intend to go is

187
00:08:51,100 --> 00:08:54,820
with custom hardware that was my whole

188
00:08:53,020 --> 00:08:57,900
motivation to do this I want to make

189
00:08:54,820 --> 00:09:00,610
some really cool hardware so we found a

190
00:08:57,900 --> 00:09:03,910
incredible open-source design called the

191
00:09:00,610 --> 00:09:05,860
orange crab I don't know why there's no

192
00:09:03,910 --> 00:09:07,839
explanation why it's called that

193
00:09:05,860 --> 00:09:10,240
but it is open-source hardware the all

194
00:09:07,840 --> 00:09:12,940
the design files are totally on github

195
00:09:10,240 --> 00:09:14,200
they did it in Chi CAD which is awesome

196
00:09:12,940 --> 00:09:15,550
some people will make open-source

197
00:09:14,200 --> 00:09:17,830
hardware but they'll make it in a

198
00:09:15,550 --> 00:09:19,479
program you have to pay to use which is

199
00:09:17,830 --> 00:09:21,970
to say it's a pretty useless endeavor

200
00:09:19,480 --> 00:09:24,220
but Chi CAD is totally free and open

201
00:09:21,970 --> 00:09:25,840
it's developed by the people at CERN so

202
00:09:24,220 --> 00:09:28,180
if it's good enough for the Large Hadron

203
00:09:25,840 --> 00:09:31,600
Collider I think it's good enough for my

204
00:09:28,180 --> 00:09:35,050
weird hobby project yeah so that's it in

205
00:09:31,600 --> 00:09:37,990
the top right corner I use it as ddr3

206
00:09:35,050 --> 00:09:40,390
part of my design goals greg Da'Ville de

207
00:09:37,990 --> 00:09:43,150
Ville is the designer he's I've reached

208
00:09:40,390 --> 00:09:44,830
out to him by email he's been like super

209
00:09:43,150 --> 00:09:46,510
helpful and like following up to see

210
00:09:44,830 --> 00:09:49,270
like how I'm doing and stuff just an

211
00:09:46,510 --> 00:09:51,640
incredible experience our general

212
00:09:49,270 --> 00:09:53,620
architecture is to make it a modular

213
00:09:51,640 --> 00:09:55,500
design so that we can plug a couple of

214
00:09:53,620 --> 00:09:58,260
these in together more on that later

215
00:09:55,500 --> 00:10:00,610
with some cross connections in place

216
00:09:58,260 --> 00:10:02,800
this isn't directly relevant to the

217
00:10:00,610 --> 00:10:05,830
project but to manufacture these things

218
00:10:02,800 --> 00:10:08,229
you'll notice I can't zoom this in but

219
00:10:05,830 --> 00:10:10,450
the EC p5 there's no pins around the

220
00:10:08,230 --> 00:10:13,240
outside all the pins are under the

221
00:10:10,450 --> 00:10:15,190
device they're like like little balls of

222
00:10:13,240 --> 00:10:16,600
solder they call it a ball grid array so

223
00:10:15,190 --> 00:10:18,370
to solder this thing you have to

224
00:10:16,600 --> 00:10:20,950
actually bake it you put like little

225
00:10:18,370 --> 00:10:24,850
beads of solder you place it carefully

226
00:10:20,950 --> 00:10:28,300
and I've found designs to make a hot

227
00:10:24,850 --> 00:10:30,520
rodded toaster oven that's apart from

228
00:10:28,300 --> 00:10:32,319
being a total fire hazard looks really

229
00:10:30,520 --> 00:10:34,540
cool and I'm super excited so they've

230
00:10:32,320 --> 00:10:39,130
taken a toaster oven they've put more

231
00:10:34,540 --> 00:10:45,880
elements into it and like insulated it's

232
00:10:39,130 --> 00:10:47,950
it's an incredible beast so we do have

233
00:10:45,880 --> 00:10:49,900
some hardware designs in place I was

234
00:10:47,950 --> 00:10:51,760
really hoping to get some ready for the

235
00:10:49,900 --> 00:10:55,319
conference but it turns out that design

236
00:10:51,760 --> 00:10:57,970
tolerances are super tight and that

237
00:10:55,320 --> 00:11:01,450
amounts to really long lead times so you

238
00:10:57,970 --> 00:11:04,390
guys get a 3d rendering that's that's

239
00:11:01,450 --> 00:11:06,730
what you get so at a high level this is

240
00:11:04,390 --> 00:11:09,970
this is the modular kind of board it

241
00:11:06,730 --> 00:11:12,760
features the EC p5 that's the square

242
00:11:09,970 --> 00:11:16,450
chip in the middle and the ddr3 ram is -

243
00:11:12,760 --> 00:11:17,740
it's right the high speed PCB design you

244
00:11:16,450 --> 00:11:19,459
know a lot of people don't really think

245
00:11:17,740 --> 00:11:21,679
about PCBs as being any

246
00:11:19,459 --> 00:11:24,399
more than a bunch of wires but it's

247
00:11:21,679 --> 00:11:27,110
really like a high speed transmission

248
00:11:24,399 --> 00:11:29,660
bus like it's probably one of the more

249
00:11:27,110 --> 00:11:32,179
important parts of the designs so that's

250
00:11:29,660 --> 00:11:34,939
that it has a serial console access for

251
00:11:32,179 --> 00:11:36,439
debugging and JTAG access for even

252
00:11:34,939 --> 00:11:39,769
harder debugging which will certainly

253
00:11:36,439 --> 00:11:41,899
happen on the flip side it has headers

254
00:11:39,769 --> 00:11:45,649
to be plugged in in a modular way and

255
00:11:41,899 --> 00:11:47,569
the ability to populate an SD card if

256
00:11:45,649 --> 00:11:49,999
you see all these bits of dust below the

257
00:11:47,569 --> 00:11:51,979
SD card those are like capacitors and

258
00:11:49,999 --> 00:11:55,069
bus termination resistors and stuff that

259
00:11:51,980 --> 00:11:59,629
are mind-bogglingly small and hard to

260
00:11:55,069 --> 00:12:01,610
assemble but we're gonna try it the

261
00:11:59,629 --> 00:12:04,629
general architecture of how this modular

262
00:12:01,610 --> 00:12:08,959
thing will work will have two devices

263
00:12:04,629 --> 00:12:11,860
that access multiplex tree sources so

264
00:12:08,959 --> 00:12:15,819
the idea being that one device can

265
00:12:11,860 --> 00:12:19,459
analyze itself and cook up a optimized

266
00:12:15,819 --> 00:12:21,889
CPU Edition it can then hand execution

267
00:12:19,459 --> 00:12:23,719
over and some roundabout way to a

268
00:12:21,889 --> 00:12:26,389
secondary device to then boot up and

269
00:12:23,720 --> 00:12:29,389
take over the reason we have to do this

270
00:12:26,389 --> 00:12:32,029
is because the FPGA is can't change

271
00:12:29,389 --> 00:12:33,709
themselves in a run time there are some

272
00:12:32,029 --> 00:12:37,220
provisions but they're very half-baked

273
00:12:33,709 --> 00:12:40,099
and not all that useful frankly so the

274
00:12:37,220 --> 00:12:43,220
general idea is they both have access to

275
00:12:40,100 --> 00:12:44,540
the peripherals on the onset we were

276
00:12:43,220 --> 00:12:48,319
thinking of shoot the other node in the

277
00:12:44,540 --> 00:12:50,929
head kind of design where you uh hey

278
00:12:48,319 --> 00:12:52,519
other CPU I made this new design you're

279
00:12:50,929 --> 00:12:54,379
gonna reboot now and you're gonna reboot

280
00:12:52,519 --> 00:12:57,589
with this image that I give you and they

281
00:12:54,379 --> 00:12:59,540
can both kind of coordinator that gets

282
00:12:57,589 --> 00:13:02,119
kind of hairy and weird so we've elected

283
00:12:59,540 --> 00:13:04,998
to have a judge jury and executioner

284
00:13:02,119 --> 00:13:07,699
chip that handles all of the bringing

285
00:13:04,999 --> 00:13:10,549
things up and down and when requests get

286
00:13:07,699 --> 00:13:11,209
serviced so the FPGA is can be very

287
00:13:10,549 --> 00:13:15,049
complicated

288
00:13:11,209 --> 00:13:15,679
our little executioner chip can be very

289
00:13:15,049 --> 00:13:21,439
simple

290
00:13:15,679 --> 00:13:26,540
a little at Melwood work some of the

291
00:13:21,439 --> 00:13:28,519
challenges were facing this this pile of

292
00:13:26,540 --> 00:13:29,959
like abstract spaghetti by the way is

293
00:13:28,519 --> 00:13:31,699
what I've been staring at for weeks on

294
00:13:29,959 --> 00:13:33,469
end and it's burned into my retinas at

295
00:13:31,699 --> 00:13:37,160
this point these are the high speed

296
00:13:33,470 --> 00:13:39,920
buses connecting the the ECP five on the

297
00:13:37,160 --> 00:13:41,390
left with the ddr3 on the right the

298
00:13:39,920 --> 00:13:42,740
design tolerances I was talking about

299
00:13:41,390 --> 00:13:45,590
previously

300
00:13:42,740 --> 00:13:47,540
mostly relate to what are called vias

301
00:13:45,590 --> 00:13:50,270
which connect different layers of the

302
00:13:47,540 --> 00:13:53,540
circuit board this design we're aiming

303
00:13:50,270 --> 00:13:56,390
to do in four layers and the device

304
00:13:53,540 --> 00:13:57,949
pitch is so fine that the vias that

305
00:13:56,390 --> 00:14:00,410
connect these layers they're operating

306
00:13:57,950 --> 00:14:02,840
on submillimetre levels so there's only

307
00:14:00,410 --> 00:14:04,459
I don't know less than half of the

308
00:14:02,840 --> 00:14:06,020
manufacturers I've reached out to can

309
00:14:04,460 --> 00:14:08,810
even do that so it winds up being

310
00:14:06,020 --> 00:14:11,090
expensive and and taking quite a while

311
00:14:08,810 --> 00:14:13,459
to get a design made so that's one

312
00:14:11,090 --> 00:14:15,500
challenge another one is the high speed

313
00:14:13,460 --> 00:14:18,470
signals themselves so you notice that

314
00:14:15,500 --> 00:14:21,050
some of these lines the wires the yellow

315
00:14:18,470 --> 00:14:22,430
ones are like squiggly and weird and

316
00:14:21,050 --> 00:14:25,430
they're next to these ones that are

317
00:14:22,430 --> 00:14:25,849
straight and not very weird why might

318
00:14:25,430 --> 00:14:29,959
that be

319
00:14:25,850 --> 00:14:31,640
so with ddr3 you need to make sure that

320
00:14:29,960 --> 00:14:33,830
the signals you're sending out all

321
00:14:31,640 --> 00:14:34,850
arrive at the same time otherwise it's

322
00:14:33,830 --> 00:14:38,300
gonna get confused because you're

323
00:14:34,850 --> 00:14:39,800
operating at such high speeds this is

324
00:14:38,300 --> 00:14:41,449
just a thing that comes into play all

325
00:14:39,800 --> 00:14:42,740
your wires and in effect become

326
00:14:41,450 --> 00:14:44,900
transmission lines and you need to

327
00:14:42,740 --> 00:14:46,610
account for that so that that's been a

328
00:14:44,900 --> 00:14:48,140
challenge and that's where the predicate

329
00:14:46,610 --> 00:14:49,520
work the orange crab has been very

330
00:14:48,140 --> 00:14:51,500
valuable because he's done most of the

331
00:14:49,520 --> 00:14:54,010
hard work already he is brilliant and

332
00:14:51,500 --> 00:14:56,450
I'm just playing with Lego at this point

333
00:14:54,010 --> 00:14:58,610
another challenge is like figuring out

334
00:14:56,450 --> 00:14:59,900
Ram controller is how those work and

335
00:14:58,610 --> 00:15:02,930
like other really domain-specific

336
00:14:59,900 --> 00:15:06,709
knowledge about how you make an FPGA

337
00:15:02,930 --> 00:15:11,689
link the RAM to the CPU you've put on it

338
00:15:06,710 --> 00:15:15,980
for instance and there are other

339
00:15:11,690 --> 00:15:18,260
challenges yet hardware is called

340
00:15:15,980 --> 00:15:22,250
hardware for a reason it's really damn

341
00:15:18,260 --> 00:15:23,930
hard in the top right we have a BGA

342
00:15:22,250 --> 00:15:26,120
design that's actually less complicated

343
00:15:23,930 --> 00:15:27,469
than the one we're trying to do you can

344
00:15:26,120 --> 00:15:29,560
imagine you'd have no hope in hell of

345
00:15:27,470 --> 00:15:32,720
soldering that on your own with an iron

346
00:15:29,560 --> 00:15:35,119
not to mention they're very expensive to

347
00:15:32,720 --> 00:15:38,089
make these circuit boards so like a six

348
00:15:35,120 --> 00:15:41,810
layer set of five boards is gonna run

349
00:15:38,089 --> 00:15:44,960
you easily in excess of $1,000 they're

350
00:15:41,810 --> 00:15:47,089
prone to exploding I've learned that in

351
00:15:44,960 --> 00:15:49,249
university and probably

352
00:15:47,089 --> 00:15:51,740
think I uttered the loudest f-bomb of my

353
00:15:49,249 --> 00:15:53,920
life when an when a board failed right

354
00:15:51,740 --> 00:15:56,809
before I was about to present it

355
00:15:53,920 --> 00:15:58,248
endlessly frustrating I used to have

356
00:15:56,809 --> 00:16:01,699
hair before I got into computers I don't

357
00:15:58,249 --> 00:16:03,829
anymore and as well a lot of this stuff

358
00:16:01,699 --> 00:16:06,109
ends up getting made in China and I

359
00:16:03,829 --> 00:16:07,849
don't know why this always happens

360
00:16:06,110 --> 00:16:10,790
whenever I'm in a rush to get something

361
00:16:07,850 --> 00:16:12,829
from China it's some like three-week

362
00:16:10,790 --> 00:16:14,629
long national holiday and I'm just left

363
00:16:12,829 --> 00:16:16,339
dead in the water it doesn't matter what

364
00:16:14,629 --> 00:16:17,899
time of year they just cook them up

365
00:16:16,339 --> 00:16:20,809
whenever I need something I think I

366
00:16:17,899 --> 00:16:22,339
don't know but but they do it way

367
00:16:20,809 --> 00:16:25,879
cheaper than anyone else so you know

368
00:16:22,339 --> 00:16:29,749
yeah you give you take so that concludes

369
00:16:25,879 --> 00:16:31,399
the hardware the next layer up is the

370
00:16:29,749 --> 00:16:33,019
gate wear so I was referring to a bit

371
00:16:31,399 --> 00:16:39,110
stream earlier and that's how you get a

372
00:16:33,019 --> 00:16:40,550
CPU onto the thing the general and

373
00:16:39,110 --> 00:16:43,040
there's a number of tool chains that

374
00:16:40,550 --> 00:16:44,329
could do this the the free open source

375
00:16:43,040 --> 00:16:46,069
software way to do it

376
00:16:44,329 --> 00:16:49,849
or the way we've elected to do it is

377
00:16:46,069 --> 00:16:53,389
using the VEX risk v intellectual

378
00:16:49,850 --> 00:16:54,800
property I realize IP usually has a

379
00:16:53,389 --> 00:16:56,749
different context at a security

380
00:16:54,800 --> 00:16:58,160
conference I apologize but that stands

381
00:16:56,749 --> 00:17:01,220
for intellectual property when you're

382
00:16:58,160 --> 00:17:04,099
talking about FPGAs it's a little soft

383
00:17:01,220 --> 00:17:06,890
CPU that's open source it can run Linux

384
00:17:04,099 --> 00:17:09,619
it integrates nicely with a system

385
00:17:06,890 --> 00:17:11,779
called light X which is dangerously

386
00:17:09,619 --> 00:17:15,229
close to late latech like the formatting

387
00:17:11,779 --> 00:17:17,689
thing I don't like that name it's

388
00:17:15,230 --> 00:17:19,849
designed in like a higher level Hardware

389
00:17:17,689 --> 00:17:23,149
definition language called spinal HDL

390
00:17:19,849 --> 00:17:24,289
and it has a number of example projects

391
00:17:23,148 --> 00:17:26,299
that let you kind of hit the ground

392
00:17:24,289 --> 00:17:30,020
running getting linux working on this

393
00:17:26,299 --> 00:17:31,399
system one of it's one of my favorite

394
00:17:30,020 --> 00:17:35,299
features is that lets you define

395
00:17:31,399 --> 00:17:38,178
hardware in python it's not turning your

396
00:17:35,299 --> 00:17:40,720
Python code into hardware you're

397
00:17:38,179 --> 00:17:43,820
describing hardware in Python and it's

398
00:17:40,720 --> 00:17:46,700
fired above easier than the technologies

399
00:17:43,820 --> 00:17:49,610
of yesterday one of the predominant

400
00:17:46,700 --> 00:17:52,460
tools we end up using is Yosa switch

401
00:17:49,610 --> 00:17:56,689
will turn your vera log into a bit

402
00:17:52,460 --> 00:17:58,940
stream as well as next PNR so a PNR is

403
00:17:56,690 --> 00:18:00,710
place and route when you have a device

404
00:17:58,940 --> 00:18:02,899
with like

405
00:18:00,710 --> 00:18:04,129
ninety thousand spots where you could

406
00:18:02,899 --> 00:18:05,748
put something you need to figure out

407
00:18:04,129 --> 00:18:07,279
where to put it and this is a huge

408
00:18:05,749 --> 00:18:07,999
software project that figures that out

409
00:18:07,279 --> 00:18:09,769
for you

410
00:18:07,999 --> 00:18:13,009
it has timing implications so you need

411
00:18:09,769 --> 00:18:15,230
to optimize it light x is what's called

412
00:18:13,009 --> 00:18:17,749
a system on shipbuilder so that

413
00:18:15,230 --> 00:18:19,549
essentially lets you take a cpu and glue

414
00:18:17,749 --> 00:18:23,059
stuff to it or it doesn't have to be a

415
00:18:19,549 --> 00:18:24,679
cpu but in our instance it is and it

416
00:18:23,059 --> 00:18:26,809
includes it's like an ecosystem that has

417
00:18:24,679 --> 00:18:31,490
a number of peripherals that you can use

418
00:18:26,809 --> 00:18:34,879
like a PCIe interface SDRAM SD cards all

419
00:18:31,490 --> 00:18:35,990
kinds of stuff and my again this is a

420
00:18:34,879 --> 00:18:37,248
theme we're like I don't know how to

421
00:18:35,990 --> 00:18:40,639
pronounce any of this stuff but I think

422
00:18:37,249 --> 00:18:45,980
it's my again is is the Python library

423
00:18:40,639 --> 00:18:47,809
that you use to define Hardware so the

424
00:18:45,980 --> 00:18:50,330
workflow looks like this Python is

425
00:18:47,809 --> 00:18:52,519
really easy it gets turned into Vero log

426
00:18:50,330 --> 00:18:55,480
which is brain numbing ly insane and

427
00:18:52,519 --> 00:19:01,909
then it gets turned into your bit stream

428
00:18:55,480 --> 00:19:03,860
in a nutshell so so that's how you build

429
00:19:01,909 --> 00:19:05,869
a module for the thing when you build a

430
00:19:03,860 --> 00:19:07,758
system on chip like something that has a

431
00:19:05,869 --> 00:19:10,730
number of peripherals you're just taking

432
00:19:07,759 --> 00:19:13,970
the sum of all these modules and light X

433
00:19:10,730 --> 00:19:15,559
is more or less gluing them together in

434
00:19:13,970 --> 00:19:21,470
what's known as a system-on-chip

435
00:19:15,559 --> 00:19:24,200
synthesis so that's laying some

436
00:19:21,470 --> 00:19:26,960
groundwork into how the space we're

437
00:19:24,200 --> 00:19:29,360
operating in anyways just gonna go over

438
00:19:26,960 --> 00:19:31,749
ways you might augment to the cpu and

439
00:19:29,360 --> 00:19:34,428
why we elected to do it the way we have

440
00:19:31,749 --> 00:19:36,740
the most trivial way to add something to

441
00:19:34,429 --> 00:19:38,509
your CPU it'd be just like how you would

442
00:19:36,740 --> 00:19:40,460
use a graphics card is to just add

443
00:19:38,509 --> 00:19:43,159
something on an external bus and then

444
00:19:40,460 --> 00:19:47,509
communicate with it so conceivably the

445
00:19:43,159 --> 00:19:50,539
CPU could generate a new better CPU send

446
00:19:47,509 --> 00:19:53,509
it off to its auxilary one and offload

447
00:19:50,539 --> 00:19:56,330
processing to it over an external bus

448
00:19:53,509 --> 00:19:58,460
which is probably that probably worked

449
00:19:56,330 --> 00:20:00,199
great for us All Things Considered but

450
00:19:58,460 --> 00:20:02,059
it's not the fastest option because it

451
00:20:00,200 --> 00:20:03,559
has to go off of the chip and talk to

452
00:20:02,059 --> 00:20:05,830
another chip and that's when things kind

453
00:20:03,559 --> 00:20:09,289
of get hairy

454
00:20:05,830 --> 00:20:12,499
the next most intrusive way would be an

455
00:20:09,289 --> 00:20:14,450
internal bus so with this project we've

456
00:20:12,499 --> 00:20:16,909
become aware of the wishbone

457
00:20:14,450 --> 00:20:20,720
bus which is a way to connect it's like

458
00:20:16,909 --> 00:20:21,440
a USB bus in a way inside a chip a

459
00:20:20,720 --> 00:20:23,629
system-on-chip

460
00:20:21,440 --> 00:20:27,169
so it's a little faster yet than an

461
00:20:23,629 --> 00:20:30,408
external bus but it's still it's not the

462
00:20:27,169 --> 00:20:32,450
fastest you can get but it does offer a

463
00:20:30,409 --> 00:20:34,580
great deal of flexibility and it's

464
00:20:32,450 --> 00:20:36,710
designed to be easy to use to integrate

465
00:20:34,580 --> 00:20:39,649
different intellectual properties into

466
00:20:36,710 --> 00:20:41,330
your core there's like a whole website

467
00:20:39,649 --> 00:20:45,859
full of stuff you can kind of pick and

468
00:20:41,330 --> 00:20:47,960
choose from the next most intrusive way

469
00:20:45,859 --> 00:20:49,489
would be to kind of Frankenstein things

470
00:20:47,960 --> 00:20:52,549
into the CPU and this is the way we've

471
00:20:49,489 --> 00:20:54,559
elected to do it if you can think back

472
00:20:52,549 --> 00:20:56,779
like back when you used to care about

473
00:20:54,559 --> 00:20:58,100
where like your interrupt addresses were

474
00:20:56,779 --> 00:21:00,679
and things like this on your computer

475
00:20:58,100 --> 00:21:02,869
this is operating in the same way when

476
00:21:00,679 --> 00:21:05,809
we want to write bits to a register in

477
00:21:02,869 --> 00:21:07,908
our hardware or custom hardware we just

478
00:21:05,809 --> 00:21:10,070
write that to a memory address on the

479
00:21:07,909 --> 00:21:12,379
CPU knows to wrote that to this hardware

480
00:21:10,070 --> 00:21:14,059
block for instance so this might be how

481
00:21:12,379 --> 00:21:15,559
like old disk controllers maybe modern

482
00:21:14,059 --> 00:21:18,529
ones worked that way too I have no idea

483
00:21:15,559 --> 00:21:21,918
I don't even really care but memory

484
00:21:18,529 --> 00:21:24,200
mapped i/o is the old term for it in in

485
00:21:21,919 --> 00:21:26,149
the fpga parlance they call it a csr

486
00:21:24,200 --> 00:21:30,259
interface or a configuration status

487
00:21:26,149 --> 00:21:32,178
register and then the next most

488
00:21:30,259 --> 00:21:34,429
intrusive and the most intrusive way is

489
00:21:32,179 --> 00:21:36,649
to actually augment the instruction set

490
00:21:34,429 --> 00:21:38,509
so risk v the reason why we picked it

491
00:21:36,649 --> 00:21:40,758
initially is because you can actually

492
00:21:38,509 --> 00:21:42,679
modify the instruction set and they even

493
00:21:40,759 --> 00:21:45,259
have a plug-in system so you can create

494
00:21:42,679 --> 00:21:46,789
whatever crazy instructions you want and

495
00:21:45,259 --> 00:21:49,580
that gets into really experimental

496
00:21:46,789 --> 00:21:51,499
territory and is frankly way smarter

497
00:21:49,580 --> 00:21:53,119
than i care to be at the moment but it

498
00:21:51,499 --> 00:21:58,940
is an option it's worth exploring at

499
00:21:53,119 --> 00:22:02,029
some point and that is the purview of

500
00:21:58,940 --> 00:22:05,149
the hardware complement i'd like to pass

501
00:22:02,029 --> 00:22:09,549
it off to rob who's gonna make it sing

502
00:22:05,149 --> 00:22:09,549
and dance for you robert kaiser everyone

503
00:22:10,210 --> 00:22:16,580
thanks Trey so yeah my name is Rob

504
00:22:13,370 --> 00:22:18,889
Kaiser Troy very graciously put up with

505
00:22:16,580 --> 00:22:23,389
my crazy harebrained ideas so you should

506
00:22:18,890 --> 00:22:25,430
all thank him very nicely so there's

507
00:22:23,390 --> 00:22:27,230
this thing called an FPGA we've got some

508
00:22:25,430 --> 00:22:28,580
system on a chip on it so you need to

509
00:22:27,230 --> 00:22:30,730
make it do something to do that you need

510
00:22:28,580 --> 00:22:33,710
software so you build all the things

511
00:22:30,730 --> 00:22:35,330
there after cobbling together a whole

512
00:22:33,710 --> 00:22:36,410
bunch of different projects you end up I

513
00:22:35,330 --> 00:22:37,970
think it was like five different

514
00:22:36,410 --> 00:22:40,940
projects or something I don't get lab I

515
00:22:37,970 --> 00:22:43,700
thankfully all open-source you end up

516
00:22:40,940 --> 00:22:45,710
with like 50 commands yeah three repos

517
00:22:43,700 --> 00:22:47,500
apparently so yeah not that bad but

518
00:22:45,710 --> 00:22:51,670
trying to get that working as a pain

519
00:22:47,500 --> 00:22:54,950
anyways you end up building the CPU so

520
00:22:51,670 --> 00:22:58,130
basically the vex risk V architecture is

521
00:22:54,950 --> 00:23:01,400
defined in a programming language you

522
00:22:58,130 --> 00:23:02,540
then take that and compile it so I just

523
00:23:01,400 --> 00:23:04,010
want to make sure everybody understands

524
00:23:02,540 --> 00:23:05,720
like this isn't just like oh yeah I

525
00:23:04,010 --> 00:23:08,300
compiled a program for the CPU no you

526
00:23:05,720 --> 00:23:10,640
compiled how the CPU operates including

527
00:23:08,300 --> 00:23:11,899
all the pipeline stages so you can have

528
00:23:10,640 --> 00:23:14,990
a two stage you can have a three stage

529
00:23:11,900 --> 00:23:16,730
whatever you want system-on-a-chip goes

530
00:23:14,990 --> 00:23:18,080
on basically includes all the stuff

531
00:23:16,730 --> 00:23:20,860
we've been over this you have to build

532
00:23:18,080 --> 00:23:23,809
that there are systems for it thankfully

533
00:23:20,860 --> 00:23:27,350
build root same kind of thing thankfully

534
00:23:23,809 --> 00:23:29,600
the Linux on latex it basically starts

535
00:23:27,350 --> 00:23:32,449
off where you can actually relatively

536
00:23:29,600 --> 00:23:36,290
simply get a simulator going where you

537
00:23:32,450 --> 00:23:37,790
are writing vex risk V CPU and because

538
00:23:36,290 --> 00:23:39,800
it's using the build root system it will

539
00:23:37,790 --> 00:23:42,470
actually let you build the Linux kernel

540
00:23:39,800 --> 00:23:46,010
for that CPU architecture which is

541
00:23:42,470 --> 00:23:48,890
actually kind of nice ah very nice so

542
00:23:46,010 --> 00:23:53,090
you end up with this which is holy

543
00:23:48,890 --> 00:23:55,520
it ran in a simulator it runs very slow

544
00:23:53,090 --> 00:23:58,399
when I say very slow I mean it's CPU

545
00:23:55,520 --> 00:24:00,260
pins a modern laptop and runs what is

546
00:23:58,400 --> 00:24:01,940
CPU pins when it's trying to emulate 1

547
00:24:00,260 --> 00:24:04,040
megahertz because it's actually CPU

548
00:24:01,940 --> 00:24:08,330
spinning on its emulating the actual

549
00:24:04,040 --> 00:24:10,309
gates right so this works but as you do

550
00:24:08,330 --> 00:24:11,990
as you do an interrupt and type into the

551
00:24:10,309 --> 00:24:13,639
console you're gonna wait about two

552
00:24:11,990 --> 00:24:17,870
seconds before it actually prints the

553
00:24:13,640 --> 00:24:23,180
character so it's a decent slow so it

554
00:24:17,870 --> 00:24:24,620
runs yet don't run it in a simulator I

555
00:24:23,180 --> 00:24:26,000
working in a simulator and thankfully

556
00:24:24,620 --> 00:24:27,709
Troy was like no we're gonna buy the dev

557
00:24:26,000 --> 00:24:29,030
board and do this and Troy put in all

558
00:24:27,710 --> 00:24:30,290
the work to actually get it running on

559
00:24:29,030 --> 00:24:32,300
the board which by the way it was not

560
00:24:30,290 --> 00:24:33,920
trivial because it's not we use a

561
00:24:32,300 --> 00:24:37,430
slightly different thing that'll be

562
00:24:33,920 --> 00:24:39,650
later on and we found that user land

563
00:24:37,430 --> 00:24:41,810
tools are really lacking in the default

564
00:24:39,650 --> 00:24:43,520
build root system so this it they're not

565
00:24:41,810 --> 00:24:45,050
using stock build root they're using

566
00:24:43,520 --> 00:24:48,500
build root that's then basically

567
00:24:45,050 --> 00:24:50,000
modified slightly so to get programs

568
00:24:48,500 --> 00:24:51,890
running since you don't have a cross

569
00:24:50,000 --> 00:24:54,740
compiler because keep in mind you just

570
00:24:51,890 --> 00:24:57,320
compiled the CPU you have to use this to

571
00:24:54,740 --> 00:24:59,030
then yeah get it going build root it

572
00:24:57,320 --> 00:25:02,720
does build a compiler in there but it's

573
00:24:59,030 --> 00:25:04,610
hard to get to so that's the OS other

574
00:25:02,720 --> 00:25:06,830
than that it is effectively a Linux

575
00:25:04,610 --> 00:25:09,800
system so you end up with this Linux

576
00:25:06,830 --> 00:25:11,629
system that runs that is Linux if you

577
00:25:09,800 --> 00:25:13,970
were to cat proxy PU info you'd get

578
00:25:11,630 --> 00:25:15,770
whatever you actually compiled on the

579
00:25:13,970 --> 00:25:18,260
CPU it's a vex it's a it's a risk 5

580
00:25:15,770 --> 00:25:22,030
architecture yeah

581
00:25:18,260 --> 00:25:24,260
also any questions I'm just gonna keep

582
00:25:22,030 --> 00:25:26,000
if there's questions outside of this

583
00:25:24,260 --> 00:25:28,100
section please just ask at the end and

584
00:25:26,000 --> 00:25:29,630
try and I'll go back and forth but if

585
00:25:28,100 --> 00:25:36,110
there's questions about the OS by all

586
00:25:29,630 --> 00:25:37,460
means software so profiling we mentioned

587
00:25:36,110 --> 00:25:38,959
that the whole point was to self

588
00:25:37,460 --> 00:25:41,510
optimize stuff or at least that was the

589
00:25:38,960 --> 00:25:44,120
original idea that's a fancy little way

590
00:25:41,510 --> 00:25:48,560
to profile profile somebody apparently

591
00:25:44,120 --> 00:25:50,689
but so basically comes down to why why

592
00:25:48,560 --> 00:25:52,730
would we why would a profile so what's

593
00:25:50,690 --> 00:25:55,100
taking 1% CPU if you're running open SSL

594
00:25:52,730 --> 00:25:56,510
and you've disabled the crypto

595
00:25:55,100 --> 00:25:58,969
extensions on your processor you're

596
00:25:56,510 --> 00:26:01,040
gonna see it in a massive for loop a

597
00:25:58,970 --> 00:26:05,180
nested for doing the crypto rotations

598
00:26:01,040 --> 00:26:07,250
inside the block cipher so profile is a

599
00:26:05,180 --> 00:26:10,790
pain without symbol lookup tables as it

600
00:26:07,250 --> 00:26:13,190
turns out and it really really is

601
00:26:10,790 --> 00:26:16,639
limited so it was not possible to do

602
00:26:13,190 --> 00:26:19,850
what we wanted to do without recompiling

603
00:26:16,640 --> 00:26:21,610
stuff you could do it but you end up

604
00:26:19,850 --> 00:26:24,469
getting assembly and you end up getting

605
00:26:21,610 --> 00:26:27,409
basically obfuscated functions maybe if

606
00:26:24,470 --> 00:26:28,670
you're lucky so G prof some of you have

607
00:26:27,410 --> 00:26:30,620
probably used G prof it's pretty

608
00:26:28,670 --> 00:26:33,470
standard s profits less standard but it

609
00:26:30,620 --> 00:26:36,110
exists G prof is basically profiling

610
00:26:33,470 --> 00:26:37,070
it's a thing it runs you can compile

611
00:26:36,110 --> 00:26:39,139
your program

612
00:26:37,070 --> 00:26:42,678
you run it and it gives you some stuff

613
00:26:39,139 --> 00:26:45,168
about it and it runs not with you have

614
00:26:42,679 --> 00:26:45,830
to recompile your program basically to

615
00:26:45,169 --> 00:26:49,279
make that happen

616
00:26:45,830 --> 00:26:52,850
s prof same thing but it's for the

617
00:26:49,279 --> 00:26:54,620
library so in our example that we wanted

618
00:26:52,850 --> 00:26:56,918
to start with which was let's take you

619
00:26:54,620 --> 00:27:00,649
know some program and let's have a call

620
00:26:56,919 --> 00:27:02,480
OpenSSL sha-256 right and say here's the

621
00:27:00,649 --> 00:27:04,219
string give me that shot

622
00:27:02,480 --> 00:27:07,549
give me the hash to do that it actually

623
00:27:04,220 --> 00:27:10,909
uses the OpenSSL library well if I were

624
00:27:07,549 --> 00:27:12,620
to profile my program great it shows me

625
00:27:10,909 --> 00:27:14,600
that I made one call to a library right

626
00:27:12,620 --> 00:27:17,059
doesn't actually help me so you have to

627
00:27:14,600 --> 00:27:20,480
use s prof which then by the way you

628
00:27:17,059 --> 00:27:23,090
have to recompile your library so that's

629
00:27:20,480 --> 00:27:24,759
a pain yeah so you have to keep

630
00:27:23,090 --> 00:27:28,699
recompile your library with debug flags

631
00:27:24,759 --> 00:27:32,029
there's a thing called leg-up the

632
00:27:28,700 --> 00:27:34,399
websites down as of last week it's a

633
00:27:32,029 --> 00:27:36,710
pain in the ass to get to it it's out of

634
00:27:34,399 --> 00:27:37,969
U of T I highly recommend University of

635
00:27:36,710 --> 00:27:41,720
Toronto these guys these are these kind

636
00:27:37,970 --> 00:27:44,299
of cool stuff it is basically LLVM so

637
00:27:41,720 --> 00:27:45,500
LLVM backend specifically where it will

638
00:27:44,299 --> 00:27:48,200
take arbitrary stuff in the front-end

639
00:27:45,500 --> 00:27:49,220
and compile it to ver log which is kind

640
00:27:48,200 --> 00:27:51,799
of neat

641
00:27:49,220 --> 00:27:54,100
so it by default can files see to vera

642
00:27:51,799 --> 00:27:57,679
log which i can take an arbitrary c

643
00:27:54,100 --> 00:27:59,299
function and say make it run and it will

644
00:27:57,679 --> 00:28:03,649
go through a whole bunch of steps and

645
00:27:59,299 --> 00:28:07,610
optimize it using LLVM and then output

646
00:28:03,649 --> 00:28:11,779
vera log they do have a commercial

647
00:28:07,610 --> 00:28:14,000
offering as well and they ship a vm

648
00:28:11,779 --> 00:28:15,860
appliance or at least they did as of a

649
00:28:14,000 --> 00:28:17,809
week ago and it's on the laptop and

650
00:28:15,860 --> 00:28:19,639
everything else but it basically you can

651
00:28:17,809 --> 00:28:21,350
run a vm and it has their entire tool

652
00:28:19,639 --> 00:28:24,740
chain on it which is really handy

653
00:28:21,350 --> 00:28:27,980
because this is unbelievably complicated

654
00:28:24,740 --> 00:28:31,220
to get compiled from source it's worse

655
00:28:27,980 --> 00:28:33,320
than it's worse than doing the previous

656
00:28:31,220 --> 00:28:36,950
stuff because you're compiling a

657
00:28:33,320 --> 00:28:41,960
compiler so the whole idea was to do

658
00:28:36,950 --> 00:28:43,129
sha-256 dot c 2 dot v right and then

659
00:28:41,960 --> 00:28:45,710
what we were going to do is basically

660
00:28:43,129 --> 00:28:46,850
black box that so once we once we have

661
00:28:45,710 --> 00:28:48,320
this vera log thing we can say okay

662
00:28:46,850 --> 00:28:49,279
we're gonna we're gonna box that and

663
00:28:48,320 --> 00:28:51,139
then there's a way in which when we

664
00:28:49,279 --> 00:28:53,420
build the SOC we can say

665
00:28:51,140 --> 00:28:55,460
hey include this little bit of thing and

666
00:28:53,420 --> 00:28:57,830
then we define how that basically at the

667
00:28:55,460 --> 00:29:02,630
wire level which wire's go to function

668
00:28:57,830 --> 00:29:05,449
pointer like which which which what the

669
00:29:02,630 --> 00:29:09,170
function signature is on the actual

670
00:29:05,450 --> 00:29:12,080
implementation there so found the

671
00:29:09,170 --> 00:29:14,360
sha-256 algorithm then basically made a

672
00:29:12,080 --> 00:29:17,720
new example in a leg-up system so

673
00:29:14,360 --> 00:29:19,100
example is yeah they have Mandelbrot

674
00:29:17,720 --> 00:29:21,049
which is nice and a whole bunch of other

675
00:29:19,100 --> 00:29:23,780
ones where they say hey here's this C

676
00:29:21,049 --> 00:29:25,490
implementation of something say a

677
00:29:23,780 --> 00:29:28,340
Mandelbrot system where it you know

678
00:29:25,490 --> 00:29:30,470
recursively generates well they have

679
00:29:28,340 --> 00:29:33,470
examples where you run make and oh look

680
00:29:30,470 --> 00:29:36,770
it outputs V which actually runs which

681
00:29:33,470 --> 00:29:38,000
is neat yeah it breaks pretty heavily as

682
00:29:36,770 --> 00:29:40,760
soon as you try and use something

683
00:29:38,000 --> 00:29:42,799
outside of it so for people who can't

684
00:29:40,760 --> 00:29:45,620
see that I'm gonna take a quick look

685
00:29:42,799 --> 00:29:48,139
yeah sort of anyways basically it did

686
00:29:45,620 --> 00:29:50,959
automatic dynamic labeling as part of

687
00:29:48,140 --> 00:29:53,360
the pre-processing step and if they did

688
00:29:50,960 --> 00:29:56,150
it with Perl for reasons passing my

689
00:29:53,360 --> 00:29:58,040
freaking understanding they basically

690
00:29:56,150 --> 00:30:03,799
dynamically inspected C code and

691
00:29:58,040 --> 00:30:10,059
injected C code with Perl it fails

692
00:30:03,799 --> 00:30:12,980
because there was in this shot 256 dot C

693
00:30:10,059 --> 00:30:14,570
defined that defined a function and if

694
00:30:12,980 --> 00:30:17,000
you're familiar with C you define a

695
00:30:14,570 --> 00:30:18,620
function in lined and you use basically

696
00:30:17,000 --> 00:30:20,330
escape characters at the very end of the

697
00:30:18,620 --> 00:30:22,370
thing to keep multiple lines together

698
00:30:20,330 --> 00:30:24,260
well it didn't it failed it because the

699
00:30:22,370 --> 00:30:26,959
the Perl code was stupid and just put

700
00:30:24,260 --> 00:30:31,520
injected some code and then didn't have

701
00:30:26,960 --> 00:30:33,679
yeah and it was syntax broke and then at

702
00:30:31,520 --> 00:30:36,020
the end of all this whole thing this is

703
00:30:33,679 --> 00:30:39,470
what happens so I'm gonna see if I can't

704
00:30:36,020 --> 00:30:41,780
see that basically yeah it leg-up does

705
00:30:39,470 --> 00:30:43,850
not support function pointers I should

706
00:30:41,780 --> 00:30:45,950
have checked this first because it was

707
00:30:43,850 --> 00:30:49,790
about two weeks of my life besides doing

708
00:30:45,950 --> 00:30:51,320
other stuff that I found out that we

709
00:30:49,790 --> 00:30:54,010
can't do what we want to do because nine

710
00:30:51,320 --> 00:30:56,510
times out of ten an implementation of

711
00:30:54,010 --> 00:30:57,590
sha-256 is going to have some kind of

712
00:30:56,510 --> 00:31:00,169
pointer because you've got

713
00:30:57,590 --> 00:31:01,970
initialization state on the on the block

714
00:31:00,169 --> 00:31:03,620
and so it makes sense to keep that

715
00:31:01,970 --> 00:31:04,610
actually in memory and then to simply

716
00:31:03,620 --> 00:31:07,489
rotate

717
00:31:04,610 --> 00:31:10,010
inside that same memory there are ways

718
00:31:07,490 --> 00:31:11,570
to do this without this I tried to find

719
00:31:10,010 --> 00:31:14,720
one it's not worth the time to hack it

720
00:31:11,570 --> 00:31:16,580
up basically so leg up has severe

721
00:31:14,720 --> 00:31:19,940
limitations in case people are wondering

722
00:31:16,580 --> 00:31:21,230
I wanted to go over really simply some

723
00:31:19,940 --> 00:31:23,570
spinal HDL stuff it was mentioned

724
00:31:21,230 --> 00:31:24,440
earlier at skala and python-based hacked

725
00:31:23,570 --> 00:31:26,389
up a little bit

726
00:31:24,440 --> 00:31:27,799
it is Scylla technically there's my

727
00:31:26,390 --> 00:31:31,220
again which is Python and then they used

728
00:31:27,799 --> 00:31:32,780
together in latex to create stuff but

729
00:31:31,220 --> 00:31:36,260
basically it takes Scala which is nice

730
00:31:32,780 --> 00:31:39,379
and compiles it to very logger VHDL then

731
00:31:36,260 --> 00:31:41,510
you can go from there and simulate or

732
00:31:39,380 --> 00:31:43,460
synthesize there's a term here called

733
00:31:41,510 --> 00:31:45,710
crossbars that's sort of well

734
00:31:43,460 --> 00:31:47,690
technically the wishbone interface is

735
00:31:45,710 --> 00:31:49,880
sort of like a crossbar you can make it

736
00:31:47,690 --> 00:31:51,919
into a crossbar but you define all your

737
00:31:49,880 --> 00:31:54,530
buses all your anything that is internal

738
00:31:51,919 --> 00:31:56,900
to a CPU you would do anything that is

739
00:31:54,530 --> 00:32:00,220
internal to a processor which is not the

740
00:31:56,900 --> 00:32:04,010
same thing as the CPU would go in there

741
00:32:00,220 --> 00:32:06,410
so the basic goal we tried to do is use

742
00:32:04,010 --> 00:32:09,260
a library to form a task goal is to not

743
00:32:06,410 --> 00:32:11,390
modify the original program make use of

744
00:32:09,260 --> 00:32:13,850
LD preload in a way to overload the

745
00:32:11,390 --> 00:32:16,520
function and then it's directed to

746
00:32:13,850 --> 00:32:21,678
hardware right so basically dynamically

747
00:32:16,520 --> 00:32:26,389
create a user a user land library a

748
00:32:21,679 --> 00:32:28,370
kernel module and then hot load it right

749
00:32:26,390 --> 00:32:29,900
so you run the same command again it

750
00:32:28,370 --> 00:32:33,428
hits the user land goes to the kernel

751
00:32:29,900 --> 00:32:37,760
kernel jumped it to basically hardware

752
00:32:33,429 --> 00:32:39,770
that was the idea so the novel working

753
00:32:37,760 --> 00:32:42,650
conclusions we're basically done so the

754
00:32:39,770 --> 00:32:45,379
end result of this is that we got all

755
00:32:42,650 --> 00:32:46,760
the pieces working independently trying

756
00:32:45,380 --> 00:32:50,419
to put them all together it turns out

757
00:32:46,760 --> 00:32:52,970
harder than you'd think some of the

758
00:32:50,419 --> 00:32:57,410
things we did get working try do you

759
00:32:52,970 --> 00:32:59,450
want to grab a microphone but so Troy

760
00:32:57,410 --> 00:33:02,120
did expand the light exports definitions

761
00:32:59,450 --> 00:33:04,460
so we ended up with a versa board that

762
00:33:02,120 --> 00:33:06,860
was not on that light x system so Troy

763
00:33:04,460 --> 00:33:09,340
went ahead and did that so it works

764
00:33:06,860 --> 00:33:13,189
which is awesome

765
00:33:09,340 --> 00:33:15,169
augmentation of a CPU basically it

766
00:33:13,190 --> 00:33:17,420
we had some we have some very log code

767
00:33:15,170 --> 00:33:20,540
that's example ver log code and you can

768
00:33:17,420 --> 00:33:23,270
fiddle the bits in memory on the FPGA

769
00:33:20,540 --> 00:33:26,180
the physical thing running Linux it

770
00:33:23,270 --> 00:33:29,900
actually works which is kind of neat

771
00:33:26,180 --> 00:33:31,760
and integrating arbitrary oh that change

772
00:33:29,900 --> 00:33:33,200
color anyways integrating arbitrary very

773
00:33:31,760 --> 00:33:37,010
log code into the address space that's

774
00:33:33,200 --> 00:33:38,390
there that is part of that right so you

775
00:33:37,010 --> 00:33:42,220
have this vera log code you need to then

776
00:33:38,390 --> 00:33:45,710
shove that into your SOC so that's done

777
00:33:42,220 --> 00:33:47,690
yeah running a Linux system and then I

778
00:33:45,710 --> 00:33:50,930
shoved in a patch for the make labels

779
00:33:47,690 --> 00:33:53,390
dot po2 the leg up stuff because well it

780
00:33:50,930 --> 00:33:56,390
broke and so I had to do that some

781
00:33:53,390 --> 00:33:57,680
limitations c2 HDL is horrible horrible

782
00:33:56,390 --> 00:34:03,020
horrible there are some things that

783
00:33:57,680 --> 00:34:04,850
can't do just can't right yeah and then

784
00:34:03,020 --> 00:34:07,160
dynamically creating a limit kernel

785
00:34:04,850 --> 00:34:08,779
module is hard

786
00:34:07,160 --> 00:34:10,940
we created a kernel module created a

787
00:34:08,780 --> 00:34:12,740
user land thing and we did the very loud

788
00:34:10,940 --> 00:34:16,190
stuff we did all the pieces but doing

789
00:34:12,739 --> 00:34:19,339
that in a generic way is hard some of

790
00:34:16,190 --> 00:34:19,880
the crazy things so coming soon sooner

791
00:34:19,340 --> 00:34:22,820
rather than later

792
00:34:19,880 --> 00:34:25,700
hopefully actual hardware builds so we

793
00:34:22,820 --> 00:34:28,280
do have that kind of specked out four

794
00:34:25,699 --> 00:34:29,600
layer hopefully maybe six turns out if

795
00:34:28,280 --> 00:34:31,340
you ever do hardware design Troy will

796
00:34:29,600 --> 00:34:33,370
tell you all about it but four layers is

797
00:34:31,340 --> 00:34:35,179
better than six cost

798
00:34:33,370 --> 00:34:36,889
shoot the other node in the head maybe

799
00:34:35,179 --> 00:34:40,550
we've got that chip that's gonna be part

800
00:34:36,889 --> 00:34:42,549
of that toaster oven automatic entire

801
00:34:40,550 --> 00:34:44,990
refactoring process so this is basically

802
00:34:42,550 --> 00:34:46,580
there's nothing in these steps that

803
00:34:44,989 --> 00:34:48,678
couldn't be automated that's the end

804
00:34:46,580 --> 00:34:52,040
goal here right

805
00:34:48,679 --> 00:34:53,600
encryption sim deep processing and then

806
00:34:52,040 --> 00:34:57,380
this is what really got us started on

807
00:34:53,600 --> 00:34:58,880
this hardware security so this is a

808
00:34:57,380 --> 00:35:00,470
security conference there's nothing

809
00:34:58,880 --> 00:35:04,370
saying you couldn't actually do this and

810
00:35:00,470 --> 00:35:06,649
then push out some an SOC that ran that

811
00:35:04,370 --> 00:35:07,850
actually has some stuff in it so the

812
00:35:06,650 --> 00:35:09,470
kernel doesn't have access to it right

813
00:35:07,850 --> 00:35:11,779
because you're defining the wishbone

814
00:35:09,470 --> 00:35:14,240
because you're defining inside the

815
00:35:11,780 --> 00:35:16,610
processor you could lock off areas of

816
00:35:14,240 --> 00:35:18,200
the processor so even the kernel doesn't

817
00:35:16,610 --> 00:35:20,570
have access to it and only has an

818
00:35:18,200 --> 00:35:23,480
interface to it that would mean that you

819
00:35:20,570 --> 00:35:24,589
could basically shove DRM into it if you

820
00:35:23,480 --> 00:35:26,539
wanted to

821
00:35:24,589 --> 00:35:28,880
or crypto tokens or whatever else you

822
00:35:26,539 --> 00:35:33,559
wanted to do you could put that in there

823
00:35:28,880 --> 00:35:35,269
and even root on that machine real mode

824
00:35:33,559 --> 00:35:38,119
Linux whatever you want to do you could

825
00:35:35,269 --> 00:35:40,758
reboot the OS right you could I'm gonna

826
00:35:38,119 --> 00:35:42,559
restart the processor and now run free

827
00:35:40,759 --> 00:35:44,119
artists on it well free art sauce only

828
00:35:42,559 --> 00:35:45,589
has that interface to it so you can you

829
00:35:44,119 --> 00:35:47,839
can separate out and have physical

830
00:35:45,589 --> 00:35:48,349
security in certain aspects which is

831
00:35:47,839 --> 00:35:50,538
kind of cool

832
00:35:48,349 --> 00:35:53,359
good new radio blocks are kind of cool

833
00:35:50,539 --> 00:35:54,859
because they are defined in C++ but

834
00:35:53,359 --> 00:35:56,660
theoretically they're nice and isolated

835
00:35:54,859 --> 00:35:58,249
so you could optimize that really easily

836
00:35:56,660 --> 00:36:00,670
self to optimizing computer is what

837
00:35:58,249 --> 00:36:04,069
really we wanted to do that's hard to do

838
00:36:00,670 --> 00:36:06,499
and then you could have some real fun by

839
00:36:04,069 --> 00:36:07,940
messing around with the ISA because you

840
00:36:06,499 --> 00:36:09,649
define you're defining the ISA there's

841
00:36:07,940 --> 00:36:13,420
nothing saying you couldn't create a

842
00:36:09,650 --> 00:36:17,539
random is a instruction recompile LLVM

843
00:36:13,420 --> 00:36:19,460
to include that instruction and then

844
00:36:17,539 --> 00:36:21,380
suddenly you've got a new tool chain

845
00:36:19,460 --> 00:36:22,670
which has a custom ISA and you could

846
00:36:21,380 --> 00:36:24,890
keep doing that there's nothing saying

847
00:36:22,670 --> 00:36:26,109
you couldn't just let that run which

848
00:36:24,890 --> 00:36:28,719
means that you've got a self optimizing

849
00:36:26,109 --> 00:36:32,150
compiler and operating system and

850
00:36:28,719 --> 00:36:35,059
program space that just self optimizes

851
00:36:32,150 --> 00:36:37,400
which is freaking cool that was about it

852
00:36:35,059 --> 00:36:38,359
I think Troy and I are gonna stick

853
00:36:37,400 --> 00:36:39,549
around and ask you to answer any

854
00:36:38,359 --> 00:36:44,058
questions if anybody has

855
00:36:39,549 --> 00:36:50,119
oh crap oh no I wasn't prepared for this

856
00:36:44,059 --> 00:36:53,079
oh no yeah so yeah we put up the hand

857
00:36:50,119 --> 00:36:53,079
first let's go with the far

858
00:37:13,190 --> 00:37:17,369
okay so the question was we took some

859
00:37:15,480 --> 00:37:19,289
complicated stuff and made it all work

860
00:37:17,369 --> 00:37:21,780
sort of together how did we test it if

861
00:37:19,289 --> 00:37:24,510
we did test each individual piece yeah

862
00:37:21,780 --> 00:37:26,280
so the answer is yes we did test each

863
00:37:24,510 --> 00:37:28,500
individual piece in the sense that for

864
00:37:26,280 --> 00:37:30,630
example a kernel module you can test

865
00:37:28,500 --> 00:37:33,930
that it loaded by you know printing

866
00:37:30,630 --> 00:37:36,780
something to the kernel log the bare log

867
00:37:33,930 --> 00:37:40,348
code you can pilot you've got a dog V

868
00:37:36,780 --> 00:37:41,760
file the SOC stuff you we put this on an

869
00:37:40,349 --> 00:37:43,619
FPGA we put this on a physical thing

870
00:37:41,760 --> 00:37:46,170
it's at Troy's house we just didn't want

871
00:37:43,619 --> 00:37:48,390
to do an SSH tunnel to a serial console

872
00:37:46,170 --> 00:37:51,089
to a different machine - then it was

873
00:37:48,390 --> 00:37:52,650
Hanley has to show live demo but we

874
00:37:51,089 --> 00:37:55,799
actually did this and the result was

875
00:37:52,650 --> 00:37:59,460
with a Linux kernel running on dev board

876
00:37:55,799 --> 00:38:02,130
we Troy fiddled some bits and then that

877
00:37:59,460 --> 00:38:04,049
actually was properly represented the

878
00:38:02,130 --> 00:38:07,140
code that we had defined in a different

879
00:38:04,049 --> 00:38:08,549
module on Farrell log so we tested all

880
00:38:07,140 --> 00:38:17,700
the bits we just didn't test them all

881
00:38:08,549 --> 00:38:23,520
and to end because that's difficult the

882
00:38:17,700 --> 00:38:26,308
question was did we look at Arduino yeah

883
00:38:23,520 --> 00:38:28,650
so there are operating systems cremated

884
00:38:26,309 --> 00:38:31,549
for an Arduino that specialized in it

885
00:38:28,650 --> 00:38:34,349
this is trying to solve a deeper

886
00:38:31,549 --> 00:38:36,538
hypothetical madness problem so this is

887
00:38:34,349 --> 00:38:39,450
defining instead of using an Arduino

888
00:38:36,539 --> 00:38:41,160
this would be an Arduino works where it

889
00:38:39,450 --> 00:38:43,529
has a processor and that process is

890
00:38:41,160 --> 00:38:45,598
rather simplistic we are augmenting and

891
00:38:43,529 --> 00:38:49,940
messing around inside that processor

892
00:38:45,599 --> 00:38:49,940
that was the goal yeah

893
00:39:06,720 --> 00:39:11,620
yes so the question was since the CPU

894
00:39:10,120 --> 00:39:14,799
are basically the architecture of the

895
00:39:11,620 --> 00:39:16,029
FPGA is being loaded through SPI which

896
00:39:14,800 --> 00:39:17,830
for people who don't know is basically a

897
00:39:16,030 --> 00:39:20,950
serial programming interface it's a way

898
00:39:17,830 --> 00:39:23,080
to communicate when the FPGA boots up it

899
00:39:20,950 --> 00:39:24,759
tries to load what the gate should be

900
00:39:23,080 --> 00:39:27,250
and the question was specifically

901
00:39:24,760 --> 00:39:31,990
related to if somebody was going to use

902
00:39:27,250 --> 00:39:34,240
a secure DRAM or our crypto keys segment

903
00:39:31,990 --> 00:39:36,370
so it even the kernel that's running on

904
00:39:34,240 --> 00:39:37,990
the chip can't get access to it how

905
00:39:36,370 --> 00:39:40,270
would we make that secure you want to I

906
00:39:37,990 --> 00:39:42,490
can do this a little bit the general

907
00:39:40,270 --> 00:39:45,220
practice of doing that you can do

908
00:39:42,490 --> 00:39:46,720
encrypted bit streams as well that's

909
00:39:45,220 --> 00:39:47,799
something the vendor supports and they

910
00:39:46,720 --> 00:39:49,120
have tools to do that that's not

911
00:39:47,800 --> 00:39:50,740
something I've explored quite yet

912
00:39:49,120 --> 00:39:53,259
because we still have a lot to do before

913
00:39:50,740 --> 00:39:54,700
we get to that kind of work but that

914
00:39:53,260 --> 00:39:56,740
space has been explored by the vendors

915
00:39:54,700 --> 00:39:58,960
all the major ones support a bit stream

916
00:39:56,740 --> 00:40:00,370
encryption another way to look at that

917
00:39:58,960 --> 00:40:02,320
is the encrypted bit stream is an

918
00:40:00,370 --> 00:40:03,250
important piece but you can also there's

919
00:40:02,320 --> 00:40:05,320
nothing saying you couldn't actually

920
00:40:03,250 --> 00:40:08,260
have a classical CPU or you've in our

921
00:40:05,320 --> 00:40:10,720
case like an FPGA act as an SPI master

922
00:40:08,260 --> 00:40:14,140
to another FPGA and then as long as you

923
00:40:10,720 --> 00:40:17,470
have like you don't grant access to a B

924
00:40:14,140 --> 00:40:19,210
will always be secure assuming that your

925
00:40:17,470 --> 00:40:21,490
code is proper if that makes sense right

926
00:40:19,210 --> 00:40:33,330
so you can bootstrap it with a secure

927
00:40:21,490 --> 00:40:37,569
mechanism what am I on and am i sharing

928
00:40:33,330 --> 00:40:39,120
hello I'm on a lack of sleep and you're

929
00:40:37,570 --> 00:40:43,630
welcome to as much as you would like

930
00:40:39,120 --> 00:40:44,430
there you go all right we'll be around

931
00:40:43,630 --> 00:40:49,610
thanks everybody

932
00:40:44,430 --> 00:40:49,609
[Applause]

933
00:40:57,190 --> 00:41:04,160
who would be the stars of the biopic of

934
00:41:00,110 --> 00:41:06,650
this project to produce it man I I want

935
00:41:04,160 --> 00:41:08,509
to squeeze like Mark Wahlberg in there

936
00:41:06,650 --> 00:41:10,550
for no real reason other than I think

937
00:41:08,510 --> 00:41:14,840
he's just a crazy guy I don't I don't

938
00:41:10,550 --> 00:41:18,350
know he would play both of us that bet

939
00:41:14,840 --> 00:41:20,290
that would be the trick awesome thank

940
00:41:18,350 --> 00:41:26,380
you very much guys

941
00:41:20,290 --> 00:41:26,380
[Applause]

