1
00:00:08,240 --> 00:00:16,120
[Applause]

2
00:00:11,620 --> 00:00:17,500
can you guys hear me okay so yeah I'm

3
00:00:16,120 --> 00:00:19,780
going to be talking about the refugees

4
00:00:17,500 --> 00:00:23,590
for builds projects but I figure like

5
00:00:19,780 --> 00:00:25,119
any good slide there we go

6
00:00:23,590 --> 00:00:27,029
we need to have a bit about me it's not

7
00:00:25,119 --> 00:00:29,740
a real talk unless I talk about myself

8
00:00:27,029 --> 00:00:31,750
more than anything I'm just some guy I

9
00:00:29,740 --> 00:00:33,760
use free and open-source software in my

10
00:00:31,750 --> 00:00:35,860
spare time as a hobbyist and I use it at

11
00:00:33,760 --> 00:00:37,120
work as a professional and I'm sure that

12
00:00:35,860 --> 00:00:38,500
this probably relates to you a good

13
00:00:37,120 --> 00:00:41,290
number of you guys in the audience

14
00:00:38,500 --> 00:00:44,080
I am aware I have a funny accent it's

15
00:00:41,290 --> 00:00:46,060
not Australian if British so deal with

16
00:00:44,080 --> 00:00:48,370
it if I say anything inappropriate Simon

17
00:00:46,060 --> 00:00:50,080
correct sorry

18
00:00:48,370 --> 00:00:51,879
aside from that so aside from using

19
00:00:50,080 --> 00:00:54,040
foster for over a decade and a half

20
00:00:51,880 --> 00:00:56,710
contributing patches and January hacking

21
00:00:54,040 --> 00:00:59,830
and doing stuff I seem to be collecting

22
00:00:56,710 --> 00:01:01,390
cats and alarming rates I've seen for

23
00:00:59,830 --> 00:01:03,519
acquired a single cats every year in

24
00:01:01,390 --> 00:01:05,409
Canada this is not sustainable for a

25
00:01:03,520 --> 00:01:09,580
process I'm not planning on getting

26
00:01:05,409 --> 00:01:11,490
another one next year but that's me so

27
00:01:09,580 --> 00:01:14,200
oh I've spoiler

28
00:01:11,490 --> 00:01:16,149
first of all hurray for Debian I'm going

29
00:01:14,200 --> 00:01:18,609
to be using a lot of examples from the

30
00:01:16,149 --> 00:01:20,350
Debian projects that said a lot of the

31
00:01:18,609 --> 00:01:23,439
principles and ideas they do apply to

32
00:01:20,350 --> 00:01:26,288
other operating systems other distros

33
00:01:23,439 --> 00:01:29,380
like fedora and Arch operating systems

34
00:01:26,289 --> 00:01:31,569
like FreeBSD and there are also some

35
00:01:29,380 --> 00:01:33,249
software projects using these principles

36
00:01:31,569 --> 00:01:35,710
and ideas behind brevities pull or build

37
00:01:33,249 --> 00:01:37,329
say don't think this is a Debian talk or

38
00:01:35,710 --> 00:01:42,219
me pushing you guys into using Debian

39
00:01:37,329 --> 00:01:44,439
it's all lies elsewhere so let's set the

40
00:01:42,219 --> 00:01:48,490
scene how do we how do we make software

41
00:01:44,439 --> 00:01:50,380
the software come from so typically you

42
00:01:48,490 --> 00:01:52,329
have three main components you have your

43
00:01:50,380 --> 00:01:55,060
developers you have the Internet's and

44
00:01:52,329 --> 00:01:56,979
you have your users your developers will

45
00:01:55,060 --> 00:01:59,170
normally author compile and package

46
00:01:56,979 --> 00:02:01,060
their code so that will include going

47
00:01:59,170 --> 00:02:03,459
from the human readable source code to

48
00:02:01,060 --> 00:02:06,130
producing a binary blob that thing your

49
00:02:03,459 --> 00:02:09,069
piece might execute or that Sasuke being

50
00:02:06,130 --> 00:02:11,319
packaged up as a zipped RPM dev whatever

51
00:02:09,068 --> 00:02:13,750
but that they would not be responsible

52
00:02:11,319 --> 00:02:15,579
for these kind of activities once

53
00:02:13,750 --> 00:02:17,170
they've got their software built and

54
00:02:15,580 --> 00:02:19,150
they're fairly confident networks

55
00:02:17,170 --> 00:02:21,040
goes out on the internet so it's

56
00:02:19,150 --> 00:02:21,730
accessible so this binary file would be

57
00:02:21,040 --> 00:02:24,269
copied

58
00:02:21,730 --> 00:02:26,760
we distributed to hosting sites mirrors

59
00:02:24,270 --> 00:02:29,250
replicated and generally made accessible

60
00:02:26,760 --> 00:02:30,840
and then subsequently the user will come

61
00:02:29,250 --> 00:02:33,120
in and they'll be in a position of

62
00:02:30,840 --> 00:02:35,160
downloading that package or that binary

63
00:02:33,120 --> 00:02:36,630
blob trusting it that it is what it

64
00:02:35,160 --> 00:02:39,299
claims to be and what they think it is

65
00:02:36,630 --> 00:02:42,150
and using it sounds great right

66
00:02:39,300 --> 00:02:44,240
in an ideal world this very high level

67
00:02:42,150 --> 00:02:48,570
overview tends to be what happens but

68
00:02:44,240 --> 00:02:49,710
it's not the case as we're aware every

69
00:02:48,570 --> 00:02:52,140
single stage of the software development

70
00:02:49,710 --> 00:02:54,960
process there is opportunity for

71
00:02:52,140 --> 00:02:56,750
problems because it's computers

72
00:02:54,960 --> 00:03:00,090
computers always go wrong which is great

73
00:02:56,750 --> 00:03:02,610
so this is by no means an exhaustive

74
00:03:00,090 --> 00:03:03,840
list of what does go wrong but to give

75
00:03:02,610 --> 00:03:06,630
an example a lot of things that we've

76
00:03:03,840 --> 00:03:08,130
identified as a community as developers

77
00:03:06,630 --> 00:03:10,079
and as practitioners writing software

78
00:03:08,130 --> 00:03:11,760
maintaining gates there's questions

79
00:03:10,080 --> 00:03:13,140
around you know author identity how do

80
00:03:11,760 --> 00:03:15,690
you know the person who wrote that

81
00:03:13,140 --> 00:03:18,660
software is who they came to me or is

82
00:03:15,690 --> 00:03:20,040
indeed you know a credible person the

83
00:03:18,660 --> 00:03:21,329
code being visible how do you know

84
00:03:20,040 --> 00:03:22,739
what's even going into the code the

85
00:03:21,330 --> 00:03:25,050
changes being proposed the changes

86
00:03:22,740 --> 00:03:26,370
actually being accepted transmission

87
00:03:25,050 --> 00:03:28,770
errors can occur and download in the

88
00:03:26,370 --> 00:03:30,600
content through just network failures or

89
00:03:28,770 --> 00:03:33,240
and we can also have intentional

90
00:03:30,600 --> 00:03:36,109
tampering of communications man the

91
00:03:33,240 --> 00:03:38,640
middle attacks DNS spoofing and the oak

92
00:03:36,110 --> 00:03:40,860
there's also concerns around zero days

93
00:03:38,640 --> 00:03:43,440
or disclosures of sensitive information

94
00:03:40,860 --> 00:03:45,300
and security bugs and how we react to

95
00:03:43,440 --> 00:03:47,250
those and of course as users use

96
00:03:45,300 --> 00:03:49,980
software we always find stuff broken

97
00:03:47,250 --> 00:03:52,320
perhaps unintentionally but fortunately

98
00:03:49,980 --> 00:03:53,670
as an industry we also have acknowledged

99
00:03:52,320 --> 00:03:56,940
that some of these problems and come up

100
00:03:53,670 --> 00:03:59,250
with solutions as well so ideas around

101
00:03:56,940 --> 00:04:01,740
GPG signing to you know give credibility

102
00:03:59,250 --> 00:04:03,720
of who made the commits and also who

103
00:04:01,740 --> 00:04:07,980
made this package and I just realized my

104
00:04:03,720 --> 00:04:10,050
voice went there we also have code PRS

105
00:04:07,980 --> 00:04:11,850
peer reviews pull requests we can audit

106
00:04:10,050 --> 00:04:13,620
what are the changes being made is the

107
00:04:11,850 --> 00:04:16,620
backdoor being pushed into this package

108
00:04:13,620 --> 00:04:18,418
or nots checksumming is available for

109
00:04:16,620 --> 00:04:19,769
once for published a package and we

110
00:04:18,418 --> 00:04:22,530
download it we can compare that our

111
00:04:19,769 --> 00:04:24,570
downloaded package is indeed what it

112
00:04:22,530 --> 00:04:27,179
should be and hasn't been corrupted we

113
00:04:24,570 --> 00:04:28,919
can encrypt a communications as well and

114
00:04:27,180 --> 00:04:31,200
then there are things around rapid

115
00:04:28,919 --> 00:04:33,000
release cycles and the community being

116
00:04:31,200 --> 00:04:34,979
engaged and being able to provide that

117
00:04:33,000 --> 00:04:38,220
feedback being able to identify bugs

118
00:04:34,979 --> 00:04:39,870
flaws or call out unintentional and

119
00:04:38,220 --> 00:04:43,140
things that may be brewing as a result

120
00:04:39,870 --> 00:04:44,940
of a coach angel or future change and of

121
00:04:43,140 --> 00:04:46,440
course if we're still not happy with any

122
00:04:44,940 --> 00:04:48,630
of these kind of solutions giving us

123
00:04:46,440 --> 00:04:50,219
enough trust behind what we're

124
00:04:48,630 --> 00:04:52,710
downloading is what we think it is and

125
00:04:50,220 --> 00:04:53,820
it is indeed the right thing just

126
00:04:52,710 --> 00:04:57,060
building yourself and source right

127
00:04:53,820 --> 00:05:00,150
that's really durable but who the hell

128
00:04:57,060 --> 00:05:01,740
actually bothers with that it I mean

129
00:05:00,150 --> 00:05:03,239
let's be realistic here I'm sure there's

130
00:05:01,740 --> 00:05:07,830
probably some Jones who uses in here so

131
00:05:03,240 --> 00:05:09,330
sorry but the vast majority of us we

132
00:05:07,830 --> 00:05:11,609
don't build software we'll just take a

133
00:05:09,330 --> 00:05:14,550
pre-built binary and we'll accept it as

134
00:05:11,610 --> 00:05:16,650
it's ready and it's good to go so it's

135
00:05:14,550 --> 00:05:19,740
worth identifying why don't people

136
00:05:16,650 --> 00:05:21,599
bother building stuff themselves it

137
00:05:19,740 --> 00:05:23,820
turns into a huge yak shaming exercise

138
00:05:21,600 --> 00:05:25,170
trying to create a build system we're

139
00:05:23,820 --> 00:05:27,330
trying to create and run that you can

140
00:05:25,170 --> 00:05:29,820
build the software it isn't an easy task

141
00:05:27,330 --> 00:05:32,340
it's much easier said than done the

142
00:05:29,820 --> 00:05:34,830
first concern time it takes a lot of

143
00:05:32,340 --> 00:05:36,929
time to even get into the position of

144
00:05:34,830 --> 00:05:39,300
being able to build that software and

145
00:05:36,930 --> 00:05:41,669
that's as a result of perhaps having to

146
00:05:39,300 --> 00:05:43,110
reverse engineer how the software was

147
00:05:41,669 --> 00:05:44,940
built elsewhere or was intended to be

148
00:05:43,110 --> 00:05:46,710
built some projects are better than

149
00:05:44,940 --> 00:05:48,660
others some will have you know nice

150
00:05:46,710 --> 00:05:51,870
descriptive make files and readme ease

151
00:05:48,660 --> 00:05:54,180
and documentation others are just a huge

152
00:05:51,870 --> 00:05:55,290
nebulous black box of oh god what the

153
00:05:54,180 --> 00:05:57,750
hell is going on here what were they

154
00:05:55,290 --> 00:06:00,360
thinking how do I build this and I'm

155
00:05:57,750 --> 00:06:03,150
familiar with certain projects to which

156
00:06:00,360 --> 00:06:04,470
this applies the hard way I may need

157
00:06:03,150 --> 00:06:06,210
provisioning for those of us in a

158
00:06:04,470 --> 00:06:08,700
corporate environment this can be a real

159
00:06:06,210 --> 00:06:09,930
war like going to court for 80 hey we

160
00:06:08,700 --> 00:06:11,760
need another machine or a virtual

161
00:06:09,930 --> 00:06:14,580
machine that's running the operating

162
00:06:11,760 --> 00:06:16,200
system or has enough you know capacity

163
00:06:14,580 --> 00:06:19,710
or whatever to build this software it's

164
00:06:16,200 --> 00:06:21,450
time it's effort we can figure out that

165
00:06:19,710 --> 00:06:23,130
the software needed but then we need to

166
00:06:21,450 --> 00:06:24,960
actually get it how do we make sure what

167
00:06:23,130 --> 00:06:26,010
the right version of the packages how do

168
00:06:24,960 --> 00:06:27,299
we even make sure that we can access

169
00:06:26,010 --> 00:06:29,310
those patches in the first place they

170
00:06:27,300 --> 00:06:31,380
may not necessarily be available to us

171
00:06:29,310 --> 00:06:34,890
as end-users because there may be based

172
00:06:31,380 --> 00:06:36,930
upon internal bill tools and then

173
00:06:34,890 --> 00:06:38,700
subsequently if they do manage to go

174
00:06:36,930 --> 00:06:40,680
through this major pain in the ass and

175
00:06:38,700 --> 00:06:42,870
actually build something you're left

176
00:06:40,680 --> 00:06:44,580
with a binary blob but is the build

177
00:06:42,870 --> 00:06:49,110
actually rights I mean it bill

178
00:06:44,580 --> 00:06:50,729
what was it successful so either way

179
00:06:49,110 --> 00:06:52,169
either through downloading a binary

180
00:06:50,729 --> 00:06:53,909
that's provided to us by a third

181
00:06:52,169 --> 00:06:54,960
partying via the internet or by building

182
00:06:53,909 --> 00:06:57,509
ourselves we're left with the question

183
00:06:54,960 --> 00:06:59,998
how do we know that our binary be it

184
00:06:57,509 --> 00:07:02,430
downloaded or built is indeed what we

185
00:06:59,999 --> 00:07:02,969
think it is as in and is indeed going to

186
00:07:02,430 --> 00:07:05,039
work

187
00:07:02,969 --> 00:07:07,620
so this is where reproducible builds now

188
00:07:05,039 --> 00:07:09,120
steps in so I've stolen this straight

189
00:07:07,620 --> 00:07:10,469
from the rep reducible bills to org

190
00:07:09,120 --> 00:07:12,180
website but the long the short of it is

191
00:07:10,469 --> 00:07:13,979
it's a set of software development

192
00:07:12,180 --> 00:07:16,080
practices that create an independently

193
00:07:13,979 --> 00:07:17,688
verifiable path from the source code

194
00:07:16,080 --> 00:07:20,370
that we first written as human readable

195
00:07:17,689 --> 00:07:22,439
to the binary code being used by the

196
00:07:20,370 --> 00:07:24,270
computers so the unreadable prabha don't

197
00:07:22,439 --> 00:07:27,749
know how many of you can read binary but

198
00:07:24,270 --> 00:07:29,159
I certainly can't so it's also worth

199
00:07:27,749 --> 00:07:31,499
acknowledging as well that this is not a

200
00:07:29,159 --> 00:07:33,330
complete security solution in and of

201
00:07:31,499 --> 00:07:35,819
itself it needs to complement other

202
00:07:33,330 --> 00:07:38,490
practices and this is where things like

203
00:07:35,819 --> 00:07:40,259
GPG signing checksums TLS and all the

204
00:07:38,490 --> 00:07:41,460
rest of it none of those are complete

205
00:07:40,259 --> 00:07:43,409
security solutions in and of themselves

206
00:07:41,460 --> 00:07:45,900
they all just contribute towards this

207
00:07:43,409 --> 00:07:47,789
idea of building a collective model and

208
00:07:45,900 --> 00:07:49,469
idea of trust that we trust what we're

209
00:07:47,789 --> 00:07:51,240
using that we have confidence in what

210
00:07:49,469 --> 00:07:54,449
we're getting and it is indeed what we

211
00:07:51,240 --> 00:07:58,289
think it is so and the underlying

212
00:07:54,449 --> 00:08:00,569
principles from reproducible builds the

213
00:07:58,289 --> 00:08:03,029
first one is a deterministic build

214
00:08:00,569 --> 00:08:05,129
system output so by that we need a build

215
00:08:03,029 --> 00:08:07,589
system where by transforming a given

216
00:08:05,129 --> 00:08:09,839
source every time we pass it through it

217
00:08:07,589 --> 00:08:11,310
must always give the same results it

218
00:08:09,839 --> 00:08:16,229
must always create the same binary

219
00:08:11,310 --> 00:08:18,899
compiled an item secondly we need to

220
00:08:16,229 --> 00:08:20,370
define the build environment so not only

221
00:08:18,899 --> 00:08:22,289
does the build environment need to be

222
00:08:20,370 --> 00:08:23,849
deterministic it needs to be described

223
00:08:22,289 --> 00:08:25,199
and something we can communicate to

224
00:08:23,849 --> 00:08:27,240
other people it's something other people

225
00:08:25,199 --> 00:08:28,409
can look and go ah this is the software

226
00:08:27,240 --> 00:08:31,319
they're using these are the version of

227
00:08:28,409 --> 00:08:33,479
the tools they're using and thus if we

228
00:08:31,319 --> 00:08:34,589
remove that barrier of what the hell are

229
00:08:33,479 --> 00:08:37,250
they using to build us in the first

230
00:08:34,589 --> 00:08:41,550
place what version of GCC was it and

231
00:08:37,250 --> 00:08:43,559
then finally we are left with allowing

232
00:08:41,549 --> 00:08:45,209
others to validate and compare their

233
00:08:43,559 --> 00:08:47,489
outputs they've got a build system

234
00:08:45,209 --> 00:08:49,290
they've got one which means-- built the

235
00:08:47,490 --> 00:08:49,920
spec of the build environment that's

236
00:08:49,290 --> 00:08:51,959
been defined

237
00:08:49,920 --> 00:08:53,610
they've built a binary blob and they now

238
00:08:51,959 --> 00:08:56,790
need the means in which they can take

239
00:08:53,610 --> 00:08:58,709
their binary blob and say is it indeed

240
00:08:56,790 --> 00:09:00,269
you know comparable to one bill

241
00:08:58,709 --> 00:09:04,500
elsewhere by someone else or by the

242
00:09:00,269 --> 00:09:05,880
official maintainer of the software so

243
00:09:04,500 --> 00:09:07,800
there's a lot of focus

244
00:09:05,880 --> 00:09:10,050
on the build system and this is a bit of

245
00:09:07,800 --> 00:09:11,640
an aside from reproducible builds itself

246
00:09:10,050 --> 00:09:14,280
and this branches into other good

247
00:09:11,640 --> 00:09:15,480
software development practices but the

248
00:09:14,280 --> 00:09:17,040
emphasis on the build system here is

249
00:09:15,480 --> 00:09:20,310
something I feel is important because

250
00:09:17,040 --> 00:09:21,959
how often have any of us been in again

251
00:09:20,310 --> 00:09:23,969
corporate or professional environments

252
00:09:21,960 --> 00:09:26,400
where there's a concept of the build

253
00:09:23,970 --> 00:09:28,500
system and this is big nebulous black

254
00:09:26,400 --> 00:09:30,689
box of obscurity that nobody knows about

255
00:09:28,500 --> 00:09:32,790
but it's just there we appreciate it's

256
00:09:30,690 --> 00:09:34,710
there we just assume it's gonna work and

257
00:09:32,790 --> 00:09:36,030
people forget about it it's just ah they

258
00:09:34,710 --> 00:09:36,900
melt ISM is great it works when it works

259
00:09:36,030 --> 00:09:39,540
when it doesn't

260
00:09:36,900 --> 00:09:41,069
you're blocking a stack so this is

261
00:09:39,540 --> 00:09:44,640
shifting your focus bit more to treating

262
00:09:41,070 --> 00:09:47,370
the build system better so one of the

263
00:09:44,640 --> 00:09:48,360
first things that a lot that so one of

264
00:09:47,370 --> 00:09:49,770
the first kind of prints will ever be

265
00:09:48,360 --> 00:09:52,770
recurring with addressing the build

266
00:09:49,770 --> 00:09:54,329
system is automation automate as much as

267
00:09:52,770 --> 00:09:56,880
you can with your build system you

268
00:09:54,330 --> 00:09:58,950
reduce the element or the possibility of

269
00:09:56,880 --> 00:10:00,510
human error when you make builds and

270
00:09:58,950 --> 00:10:03,150
this can be silly things like someone

271
00:10:00,510 --> 00:10:05,250
forgetting to do it do some obscure step

272
00:10:03,150 --> 00:10:07,290
like write a certain file move a certain

273
00:10:05,250 --> 00:10:10,500
file to a certain directory automate it

274
00:10:07,290 --> 00:10:12,780
remove the risk of a human up it

275
00:10:10,500 --> 00:10:14,820
happens not too long ago actually at my

276
00:10:12,780 --> 00:10:17,550
workplace we're trying to acquire a new

277
00:10:14,820 --> 00:10:19,620
version of a pip Python package which

278
00:10:17,550 --> 00:10:21,270
allegedly had a fix for some bug be

279
00:10:19,620 --> 00:10:23,730
encountered we download the new version

280
00:10:21,270 --> 00:10:25,800
still didn't work turned out the

281
00:10:23,730 --> 00:10:27,660
maintain of the project had just rebuilt

282
00:10:25,800 --> 00:10:29,219
the old git tag and forgot to bump

283
00:10:27,660 --> 00:10:30,780
something in the manual processing

284
00:10:29,220 --> 00:10:34,860
knowledged crap we should follow

285
00:10:30,780 --> 00:10:38,939
automate this secondly make your build

286
00:10:34,860 --> 00:10:40,740
system open ish so why that give

287
00:10:38,940 --> 00:10:43,260
transparency define your build system

288
00:10:40,740 --> 00:10:45,150
more be able to communicate communicate

289
00:10:43,260 --> 00:10:49,590
what is your build system what is going

290
00:10:45,150 --> 00:10:51,720
on in there far too often built systems

291
00:10:49,590 --> 00:10:55,290
are this just this obscure chain of code

292
00:10:51,720 --> 00:10:58,080
goes in binary comes out great rates not

293
00:10:55,290 --> 00:10:59,849
quite with regards to making it open ish

294
00:10:58,080 --> 00:11:00,960
there are certain acknowledgments that

295
00:10:59,850 --> 00:11:04,050
need to be made as well toward

296
00:11:00,960 --> 00:11:05,130
sensitivity of certain bits of code or

297
00:11:04,050 --> 00:11:07,589
certain things going through that build

298
00:11:05,130 --> 00:11:09,330
system so an example here was not too

299
00:11:07,590 --> 00:11:12,840
long ago a canonical who provide the

300
00:11:09,330 --> 00:11:15,240
cloud images for Ubuntu in AWS caesura

301
00:11:12,840 --> 00:11:16,980
and so forth they're built it's nice

302
00:11:15,240 --> 00:11:18,420
people fairly open they've moved towards

303
00:11:16,980 --> 00:11:19,710
closing off certain parts of it and

304
00:11:18,420 --> 00:11:21,420
making it secret then

305
00:11:19,710 --> 00:11:23,610
Infinity's it's partly political it's

306
00:11:21,420 --> 00:11:25,829
partly due to legal reasons but they may

307
00:11:23,610 --> 00:11:27,750
be including certain code code changes

308
00:11:25,830 --> 00:11:30,480
in their in their build which refer to

309
00:11:27,750 --> 00:11:32,870
certain Intel microcode exploits which

310
00:11:30,480 --> 00:11:35,310
I'm sure never happened

311
00:11:32,870 --> 00:11:37,590
so certainly you know you've got make as

312
00:11:35,310 --> 00:11:39,869
open as you can but be aware of you know

313
00:11:37,590 --> 00:11:42,540
what are the limitations of making it

314
00:11:39,870 --> 00:11:44,580
open and then finally acknowledge the

315
00:11:42,540 --> 00:11:46,920
value of your build system it's a target

316
00:11:44,580 --> 00:11:49,380
it's got a big huge kick me sign on the

317
00:11:46,920 --> 00:11:51,270
back just think if someone was trying to

318
00:11:49,380 --> 00:11:53,160
take malicious action towards you or

319
00:11:51,270 --> 00:11:54,689
your projects rather than going after

320
00:11:53,160 --> 00:11:56,459
the users machines if they could go

321
00:11:54,690 --> 00:11:57,900
towards your build system the

322
00:11:56,460 --> 00:12:00,720
ramifications the influence that this

323
00:11:57,900 --> 00:12:02,280
have is massive so really treat your

324
00:12:00,720 --> 00:12:04,710
build system as a first-class citizen

325
00:12:02,280 --> 00:12:07,079
and as much and give it as much scrutiny

326
00:12:04,710 --> 00:12:08,970
and as much auditing as perhaps people

327
00:12:07,080 --> 00:12:10,650
pay towards code with peer reviews and

328
00:12:08,970 --> 00:12:12,690
you know making surety people sign off

329
00:12:10,650 --> 00:12:14,579
and there's approval the same applies to

330
00:12:12,690 --> 00:12:17,610
your build system and this ties into

331
00:12:14,580 --> 00:12:19,440
that horrible DevOps word but platforms

332
00:12:17,610 --> 00:12:20,640
is code defining a build systems code

333
00:12:19,440 --> 00:12:23,310
and you can do this to be yeah making

334
00:12:20,640 --> 00:12:24,540
automating getting and so forth but this

335
00:12:23,310 --> 00:12:26,189
is more of an aside about the build

336
00:12:24,540 --> 00:12:27,660
system and might complain that build

337
00:12:26,190 --> 00:12:31,170
systems are generally a bit and in

338
00:12:27,660 --> 00:12:32,969
the real world so coming back to

339
00:12:31,170 --> 00:12:35,670
reproducible builds let's take a look at

340
00:12:32,970 --> 00:12:37,770
the history it's not a new idea this

341
00:12:35,670 --> 00:12:40,229
this was a snippet taken from the Debian

342
00:12:37,770 --> 00:12:43,020
development mailing list back in 2007

343
00:12:40,230 --> 00:12:44,820
where someone just posited the idea hey

344
00:12:43,020 --> 00:12:46,770
if we build the same package three times

345
00:12:44,820 --> 00:12:48,900
in a row if we could differ it and check

346
00:12:46,770 --> 00:12:51,270
if there's any binary differences we

347
00:12:48,900 --> 00:12:53,250
could then be able to infer if there's

348
00:12:51,270 --> 00:12:55,140
something being compromised in the build

349
00:12:53,250 --> 00:12:57,900
process or the built systems itself

350
00:12:55,140 --> 00:12:59,819
isn't this a great idea I'm sure that

351
00:12:57,900 --> 00:13:01,829
the idea is even older than this

352
00:12:59,820 --> 00:13:03,840
instance 7 2007 and may have been

353
00:13:01,830 --> 00:13:05,280
mentioned elsewhere but just in terms of

354
00:13:03,840 --> 00:13:08,280
Debian here's a nice example where

355
00:13:05,280 --> 00:13:11,339
someone brought it up it wasn't received

356
00:13:08,280 --> 00:13:13,800
well though the one the first major

357
00:13:11,340 --> 00:13:15,510
complaints was it's pointless what's the

358
00:13:13,800 --> 00:13:17,430
point we've got new PG we've got

359
00:13:15,510 --> 00:13:19,710
checksums we've got md5 Sam

360
00:13:17,430 --> 00:13:21,719
why bother what's the point of binary

361
00:13:19,710 --> 00:13:24,780
differing don't bother the other

362
00:13:21,720 --> 00:13:26,400
criticism was it's not feasible or it's

363
00:13:24,780 --> 00:13:29,069
not technically feasible worthwhile to

364
00:13:26,400 --> 00:13:30,750
do so in this instance here this person

365
00:13:29,070 --> 00:13:32,970
mentions Hayes happy people food wrong

366
00:13:30,750 --> 00:13:33,300
so hopefully by then this talk will have

367
00:13:32,970 --> 00:13:36,420
a half

368
00:13:33,300 --> 00:13:39,810
individual nevertheless

369
00:13:36,420 --> 00:13:41,370
I first try was attempted by a I put by

370
00:13:39,810 --> 00:13:44,729
a couple of folks in the in the Debian

371
00:13:41,370 --> 00:13:46,320
team this was back in DEFCON 13 they

372
00:13:44,730 --> 00:13:48,000
kicked off a small project for about 30

373
00:13:46,320 --> 00:13:50,190
or so hackers he basically went you know

374
00:13:48,000 --> 00:13:52,019
what screw it let's this try they see

375
00:13:50,190 --> 00:13:55,529
what happens if we do try this bit

376
00:13:52,019 --> 00:13:57,180
different of Debian packages so their

377
00:13:55,529 --> 00:13:58,920
approach basically board ante let's

378
00:13:57,180 --> 00:14:00,719
record the existing build environments

379
00:13:58,920 --> 00:14:03,510
and the existing Debian built system

380
00:14:00,720 --> 00:14:05,250
let's try to replicate it and then if we

381
00:14:03,510 --> 00:14:06,959
start changing certain variables in that

382
00:14:05,250 --> 00:14:09,029
build system and in that build process

383
00:14:06,959 --> 00:14:11,399
what breaks what influence do these

384
00:14:09,029 --> 00:14:15,420
variables actually have in terms of

385
00:14:11,399 --> 00:14:17,630
producing different output binaries so

386
00:14:15,420 --> 00:14:21,029
from this very rudimentary attempt of

387
00:14:17,630 --> 00:14:22,350
replicating the built system a number of

388
00:14:21,029 --> 00:14:24,660
variations or number of sources of

389
00:14:22,350 --> 00:14:26,670
variation were identified and some of

390
00:14:24,660 --> 00:14:27,600
these will perhaps be obvious things

391
00:14:26,670 --> 00:14:30,839
like if you're not using the same

392
00:14:27,600 --> 00:14:32,399
software version of make and GCC it's

393
00:14:30,839 --> 00:14:33,209
gonna give you a different output the

394
00:14:32,399 --> 00:14:34,740
same ghost we're using a different

395
00:14:33,209 --> 00:14:37,560
operating system or a different version

396
00:14:34,740 --> 00:14:39,120
as well other obvious things partying at

397
00:14:37,560 --> 00:14:41,010
the timestamps depending what time you

398
00:14:39,120 --> 00:14:43,200
build your binary you might be injecting

399
00:14:41,010 --> 00:14:45,660
these into log files and thus the binary

400
00:14:43,200 --> 00:14:47,070
world if what will differ also the path

401
00:14:45,660 --> 00:14:48,360
is well where on the desk where you

402
00:14:47,070 --> 00:14:49,680
building or where were the files that

403
00:14:48,360 --> 00:14:53,550
were being built apart where where they

404
00:14:49,680 --> 00:14:55,410
stored the list does go on the file

405
00:14:53,550 --> 00:14:57,120
ordering hmm that's a bit obscure

406
00:14:55,410 --> 00:14:58,649
depending what order the offering system

407
00:14:57,120 --> 00:15:00,240
read the files off disk or the file

408
00:14:58,649 --> 00:15:02,579
system reported it you could get

409
00:15:00,240 --> 00:15:05,430
differences in your built binary we're

410
00:15:02,579 --> 00:15:08,849
getting a bit obscure now and the lists

411
00:15:05,430 --> 00:15:10,649
us to go on locales network settings the

412
00:15:08,850 --> 00:15:13,260
hostname of the machine the username

413
00:15:10,649 --> 00:15:15,240
making the build even the output of you

414
00:15:13,260 --> 00:15:17,100
name as well all of these things could

415
00:15:15,240 --> 00:15:19,770
create variants in your in your built

416
00:15:17,100 --> 00:15:24,420
binary so yeah you name it it probably

417
00:15:19,770 --> 00:15:26,370
broke it so in identifying all of these

418
00:15:24,420 --> 00:15:27,959
sources of variation the next protocol

419
00:15:26,370 --> 00:15:30,000
is let's lock them down let's try to

420
00:15:27,959 --> 00:15:32,130
reduce this variation and then see if we

421
00:15:30,000 --> 00:15:34,890
get any closest being able to do bit

422
00:15:32,130 --> 00:15:36,600
difficult binaries so the approach taken

423
00:15:34,890 --> 00:15:38,610
here was start with the hardware and

424
00:15:36,600 --> 00:15:40,170
work your way down Hardware first let's

425
00:15:38,610 --> 00:15:42,810
stop using physical machines virtual

426
00:15:40,170 --> 00:15:43,860
machines and using disk snapshots these

427
00:15:42,810 --> 00:15:45,510
are now the build environments that

428
00:15:43,860 --> 00:15:47,250
represent what things being built under

429
00:15:45,510 --> 00:15:50,010
and this ties into being

430
00:15:47,250 --> 00:15:51,300
able to have disposable build instances

431
00:15:50,010 --> 00:15:52,950
I mean again how often have we heard

432
00:15:51,300 --> 00:15:55,260
about the abilities to network and when

433
00:15:52,950 --> 00:15:55,680
it breaks it's everything grinds to a

434
00:15:55,260 --> 00:15:57,689
halt

435
00:15:55,680 --> 00:15:59,310
instead by having virtual machines and

436
00:15:57,690 --> 00:16:01,920
snapshots we're moving towards the idea

437
00:15:59,310 --> 00:16:03,390
of the bill tester maybe precious but we

438
00:16:01,920 --> 00:16:06,390
can replace it because we have the

439
00:16:03,390 --> 00:16:07,530
technology the second step was then

440
00:16:06,390 --> 00:16:09,900
focusing on the environment or the

441
00:16:07,530 --> 00:16:11,850
software side of things so using skate

442
00:16:09,900 --> 00:16:14,490
routes fairly well adopted well known

443
00:16:11,850 --> 00:16:17,700
old cannas UNIX standard just use these

444
00:16:14,490 --> 00:16:19,710
got a lock down the file paths and see

445
00:16:17,700 --> 00:16:22,410
how far this goes towards fixing the

446
00:16:19,710 --> 00:16:24,060
source of variation on aspects of

447
00:16:22,410 --> 00:16:26,010
timestamps affecting things there was a

448
00:16:24,060 --> 00:16:27,810
fantastic package out there called Lib

449
00:16:26,010 --> 00:16:29,340
fake time and you'll never guess what it

450
00:16:27,810 --> 00:16:32,819
does but it allows you to fake the time

451
00:16:29,340 --> 00:16:34,380
as seen by an application or process and

452
00:16:32,820 --> 00:16:37,290
it does this by intercepting system

453
00:16:34,380 --> 00:16:38,370
calls for requests for the time so it's

454
00:16:37,290 --> 00:16:40,099
worth checking out in your spare time

455
00:16:38,370 --> 00:16:42,960
for you know shits and giggles

456
00:16:40,100 --> 00:16:44,280
the third step was then we've got the

457
00:16:42,960 --> 00:16:46,350
hardware setup we've got the software

458
00:16:44,280 --> 00:16:47,610
controlled what about the build scripts

459
00:16:46,350 --> 00:16:50,130
themselves and the way that they're

460
00:16:47,610 --> 00:16:52,530
working are they necessarily correct not

461
00:16:50,130 --> 00:16:55,050
always in some cases when they were

462
00:16:52,530 --> 00:16:56,550
building Java packages there were time

463
00:16:55,050 --> 00:16:58,709
stamps being injected and they weren't

464
00:16:56,550 --> 00:17:00,540
needed in the outputted build anyway so

465
00:16:58,710 --> 00:17:02,700
just changing how certain dependencies

466
00:17:00,540 --> 00:17:05,609
the core by using the no time stamps

467
00:17:02,700 --> 00:17:08,189
flag the same fatah using - N and gzip

468
00:17:05,609 --> 00:17:10,589
we can reduce these sources of variation

469
00:17:08,189 --> 00:17:12,120
and we can also actually cut down the

470
00:17:10,589 --> 00:17:16,260
size of the binary produce by cutting

471
00:17:12,119 --> 00:17:18,149
all the crap out so take - we've tried

472
00:17:16,260 --> 00:17:19,829
to lock down things from our first

473
00:17:18,150 --> 00:17:21,630
rudimentary approach we've tried locking

474
00:17:19,829 --> 00:17:24,899
things down a bit let's see what happens

475
00:17:21,630 --> 00:17:27,600
so taking a sample of 5,000 or so

476
00:17:24,900 --> 00:17:31,850
packages this team then pumped it

477
00:17:27,599 --> 00:17:37,919
through this pipeline and come on

478
00:17:31,850 --> 00:17:39,810
almost two-thirds were reprimanded dip

479
00:17:37,920 --> 00:17:42,620
them and bit for a bit these binaries

480
00:17:39,810 --> 00:17:45,300
were identical and not just out of those

481
00:17:42,620 --> 00:17:47,850
$3,000 packages it includes some fairly

482
00:17:45,300 --> 00:17:49,710
big and commonly used things like W gear

483
00:17:47,850 --> 00:17:51,270
and fine details so it's not like this

484
00:17:49,710 --> 00:17:53,250
is just obscure small package that one

485
00:17:51,270 --> 00:17:54,750
cares about it includes really kind of

486
00:17:53,250 --> 00:17:58,890
far-reaching packages that a lot of

487
00:17:54,750 --> 00:18:00,900
people will be using of the almost 2,000

488
00:17:58,890 --> 00:18:02,640
or so that weren't

489
00:18:00,900 --> 00:18:05,100
identifying again what was the source of

490
00:18:02,640 --> 00:18:06,660
variation there it was a long tale of

491
00:18:05,100 --> 00:18:08,459
variation I mean for the most part it

492
00:18:06,660 --> 00:18:10,050
was things like the build ID being

493
00:18:08,460 --> 00:18:11,790
injected into the build again it's

494
00:18:10,050 --> 00:18:13,620
needless so if we correct and remove

495
00:18:11,790 --> 00:18:15,990
that we can have something closer to

496
00:18:13,620 --> 00:18:17,159
what's being reproducible I'm not going

497
00:18:15,990 --> 00:18:19,500
to go through all the rest of all the

498
00:18:17,160 --> 00:18:20,520
different types of sources of variation

499
00:18:19,500 --> 00:18:23,550
how they're fixed and addressed because

500
00:18:20,520 --> 00:18:27,030
I'd be here forever so let's step

501
00:18:23,550 --> 00:18:28,470
forward four years where are we now so

502
00:18:27,030 --> 00:18:30,420
the Debian projects being adopted in

503
00:18:28,470 --> 00:18:32,550
this process and they're at the point

504
00:18:30,420 --> 00:18:35,520
where I believe over 90% of the packet

505
00:18:32,550 --> 00:18:37,290
is offered in stretch for amd64 they've

506
00:18:35,520 --> 00:18:38,910
reproducible they can build these

507
00:18:37,290 --> 00:18:41,159
packages multiple times on different

508
00:18:38,910 --> 00:18:43,350
machines even at different points in

509
00:18:41,160 --> 00:18:45,540
time and always produce the same output

510
00:18:43,350 --> 00:18:48,030
at binary which means they can add give

511
00:18:45,540 --> 00:18:51,090
them and if one build were to introduce

512
00:18:48,030 --> 00:18:52,560
a signature which wasn't the same that

513
00:18:51,090 --> 00:18:54,030
raises concerns has that system be

514
00:18:52,560 --> 00:18:55,530
compromised has it got the right source

515
00:18:54,030 --> 00:18:59,310
code has it got what we think it's got

516
00:18:55,530 --> 00:19:01,050
in it this this 90% kind of mark this

517
00:18:59,310 --> 00:19:02,370
was this wasn't easy work like I said it

518
00:19:01,050 --> 00:19:04,440
was four years of fast-forwarding

519
00:19:02,370 --> 00:19:07,100
through time but it was it was achieved

520
00:19:04,440 --> 00:19:10,620
by basically influencing wide-reaching

521
00:19:07,100 --> 00:19:12,600
kind of concerns within Debian itself

522
00:19:10,620 --> 00:19:14,909
so this spent from things like the

523
00:19:12,600 --> 00:19:17,639
policy on howdy package is used their

524
00:19:14,910 --> 00:19:19,620
packaging tools this was addressed in

525
00:19:17,640 --> 00:19:21,300
this in terms of everyday lives this

526
00:19:19,620 --> 00:19:22,199
relates to you know if we want to

527
00:19:21,300 --> 00:19:24,810
achieve something that's more reputable

528
00:19:22,200 --> 00:19:26,490
in our own builds updating and adjusting

529
00:19:24,810 --> 00:19:27,899
our build tools just because it builds

530
00:19:26,490 --> 00:19:29,910
something currently doesn't mean we're

531
00:19:27,900 --> 00:19:32,070
using those tools correctly think back

532
00:19:29,910 --> 00:19:33,420
to you know this Javadoc calls and why

533
00:19:32,070 --> 00:19:35,040
we including the time stamps we can cut

534
00:19:33,420 --> 00:19:36,810
down the crap and we can you know use

535
00:19:35,040 --> 00:19:39,149
our bill tools in a better fashion the

536
00:19:36,810 --> 00:19:40,379
economy yeah they changed a lot the

537
00:19:39,150 --> 00:19:42,540
hardware they run things on they move

538
00:19:40,380 --> 00:19:44,070
from fixed hosts to running a lot of

539
00:19:42,540 --> 00:19:46,649
virtual machines which was very

540
00:19:44,070 --> 00:19:48,480
graciously donated but again this ties

541
00:19:46,650 --> 00:19:50,280
into the concept don't treat your build

542
00:19:48,480 --> 00:19:52,230
system like this precious thing that has

543
00:19:50,280 --> 00:19:54,300
to stay up and has to be well maintained

544
00:19:52,230 --> 00:19:56,400
it's disposable make it such that you

545
00:19:54,300 --> 00:19:57,720
can tear it down spin anyone up not only

546
00:19:56,400 --> 00:19:59,460
will it give you better ease in

547
00:19:57,720 --> 00:20:01,230
responding to certain incidents should

548
00:19:59,460 --> 00:20:03,390
they happen but also in terms of just

549
00:20:01,230 --> 00:20:05,280
scaling up your workflow what kind of

550
00:20:03,390 --> 00:20:06,810
replacing stuff is hardware fails it's

551
00:20:05,280 --> 00:20:08,550
nice to be early to be in a position to

552
00:20:06,810 --> 00:20:12,540
replace your build infrastructure quite

553
00:20:08,550 --> 00:20:14,500
quickly within the Debian kind of

554
00:20:12,540 --> 00:20:16,210
release policies and the pipe

555
00:20:14,500 --> 00:20:18,010
they updated these to actually say that

556
00:20:16,210 --> 00:20:20,350
conditions towards making the packages

557
00:20:18,010 --> 00:20:21,280
Brett producible is now part of the

558
00:20:20,350 --> 00:20:22,689
standard and something that people

559
00:20:21,280 --> 00:20:26,590
package maintains will need to work

560
00:20:22,690 --> 00:20:28,660
towards it was thus then enforced so it

561
00:20:26,590 --> 00:20:30,399
wasn't just a side project as it gained

562
00:20:28,660 --> 00:20:32,620
steam and popularity it was actually

563
00:20:30,400 --> 00:20:35,380
tied into the official protesters were

564
00:20:32,620 --> 00:20:37,300
and made you know this is how we're

565
00:20:35,380 --> 00:20:38,680
going to do stuff and I don't made

566
00:20:37,300 --> 00:20:41,710
people subsequently have to make the

567
00:20:38,680 --> 00:20:43,480
patches conform and aside from the

568
00:20:41,710 --> 00:20:46,540
Packers within the Debian contact itself

569
00:20:43,480 --> 00:20:49,120
this also fed into relations with

570
00:20:46,540 --> 00:20:51,399
upstream code providers submitting PRS

571
00:20:49,120 --> 00:20:53,560
to third-party projects to correct the

572
00:20:51,400 --> 00:20:55,710
tooling they're using to make their

573
00:20:53,560 --> 00:20:57,040
bills more rep reusable down the line

574
00:20:55,710 --> 00:20:59,830
now

575
00:20:57,040 --> 00:21:02,170
there is a caveat to all of this just

576
00:20:59,830 --> 00:21:03,820
because we can make bills reprimand we

577
00:21:02,170 --> 00:21:06,190
can start building them and we can

578
00:21:03,820 --> 00:21:09,220
compare the signatures like I said it's

579
00:21:06,190 --> 00:21:11,050
not a security solution by itself it's

580
00:21:09,220 --> 00:21:12,460
part of a wider solution of being able

581
00:21:11,050 --> 00:21:14,100
to order what code we're running and

582
00:21:12,460 --> 00:21:16,960
building up trust

583
00:21:14,100 --> 00:21:19,270
so using injunction it does it conserved

584
00:21:16,960 --> 00:21:21,940
so I used in conjunction it facilitates

585
00:21:19,270 --> 00:21:24,460
the ability to increase that trust but

586
00:21:21,940 --> 00:21:26,290
by not having reproducible builds this

587
00:21:24,460 --> 00:21:27,960
in itself is not representative of a

588
00:21:26,290 --> 00:21:30,070
vulnerability or a Fault in the package

589
00:21:27,960 --> 00:21:31,300
that said more work is certainly needed

590
00:21:30,070 --> 00:21:33,330
on the project it's gained a lot of

591
00:21:31,300 --> 00:21:35,200
steam some great progress has been made

592
00:21:33,330 --> 00:21:36,730
but it's still got a ways to go yet

593
00:21:35,200 --> 00:21:38,800
things like having independently

594
00:21:36,730 --> 00:21:41,110
verifiable and submitted all signatures

595
00:21:38,800 --> 00:21:42,610
of packages such that we can check that

596
00:21:41,110 --> 00:21:45,370
even though they're saying the package

597
00:21:42,610 --> 00:21:46,600
piece is this this signature we can

598
00:21:45,370 --> 00:21:47,770
check third parties who have

599
00:21:46,600 --> 00:21:50,350
independently built it as well and check

600
00:21:47,770 --> 00:21:52,990
that they are not provided loaded

601
00:21:50,350 --> 00:21:54,969
results or flawed results there's also

602
00:21:52,990 --> 00:21:56,170
expanding the project into being able to

603
00:21:54,970 --> 00:21:58,000
build the kernel itself in a

604
00:21:56,170 --> 00:21:59,740
reproducible manner so there is the same

605
00:21:58,000 --> 00:22:02,320
kernel project going on within Debian

606
00:21:59,740 --> 00:22:04,120
it's not in the mainstream build line of

607
00:22:02,320 --> 00:22:05,439
Debian yet but there are at the point

608
00:22:04,120 --> 00:22:09,790
where they can reproduce the build the

609
00:22:05,440 --> 00:22:11,350
Linux kernel so yep time's up but I'd

610
00:22:09,790 --> 00:22:12,580
like to thank the Deming reproducible

611
00:22:11,350 --> 00:22:14,230
builds contributors for their amazing

612
00:22:12,580 --> 00:22:16,659
progress and the reproducible builds

613
00:22:14,230 --> 00:22:18,160
project itself for maintain lists and

614
00:22:16,660 --> 00:22:20,650
pushing this kind of practice throughout

615
00:22:18,160 --> 00:22:22,060
the industry and I'd like to thank you

616
00:22:20,650 --> 00:22:27,480
guys and I don't think this type of

617
00:22:22,060 --> 00:22:27,480
questions thank God for that thank you

618
00:22:30,669 --> 00:22:32,730
you

