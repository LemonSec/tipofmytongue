1
00:00:07,630 --> 00:00:12,460
these are this is my working place lied

2
00:00:09,940 --> 00:00:16,349
I would talk about that on the sidelines

3
00:00:12,460 --> 00:00:18,849
let's open with some rattle Munroe xkcd

4
00:00:16,349 --> 00:00:19,710
asking airplane designers about airplane

5
00:00:18,849 --> 00:00:22,210
safety

6
00:00:19,710 --> 00:00:23,650
nothing is ever foolproof but modern

7
00:00:22,210 --> 00:00:26,640
airplanes are incredibly resilient

8
00:00:23,650 --> 00:00:29,049
flying is the safest way to travel

9
00:00:26,640 --> 00:00:31,750
asking building engineers about elevator

10
00:00:29,050 --> 00:00:34,750
safety elevators are protected by

11
00:00:31,750 --> 00:00:36,610
multiple tried and tested failsafe

12
00:00:34,750 --> 00:00:38,130
mechanisms that are nearly incapable of

13
00:00:36,610 --> 00:00:40,269
falling

14
00:00:38,130 --> 00:00:43,980
asking software engineers about

15
00:00:40,270 --> 00:00:47,380
computerized voting that's terrifying

16
00:00:43,980 --> 00:00:48,640
what really don't trust voting software

17
00:00:47,380 --> 00:00:51,940
and don't listen to anyone who tells you

18
00:00:48,640 --> 00:00:53,980
it's safe why I don't quite know how to

19
00:00:51,940 --> 00:00:55,750
put this but our entire field is bad at

20
00:00:53,980 --> 00:00:59,680
what we do and if you rely on us

21
00:00:55,750 --> 00:01:02,430
everyone will die they say they fixed it

22
00:00:59,680 --> 00:01:04,479
with something called bak chain ah

23
00:01:02,430 --> 00:01:08,799
whatever they sold you don't touch it

24
00:01:04,479 --> 00:01:14,020
buried in the desert wear gloves now

25
00:01:08,799 --> 00:01:15,429
some people have misunderstood this

26
00:01:14,020 --> 00:01:16,749
particular cartoon there was people

27
00:01:15,429 --> 00:01:19,689
writing essays and everything about it

28
00:01:16,749 --> 00:01:22,210
it's it's actually not a commentary on

29
00:01:19,689 --> 00:01:24,398
voting on software voting or any of that

30
00:01:22,210 --> 00:01:25,960
is this a commentary on the like okay

31
00:01:24,399 --> 00:01:28,810
why do people in the computing field say

32
00:01:25,960 --> 00:01:29,919
this and that's a conversation we can

33
00:01:28,810 --> 00:01:31,450
have on the sidelines there's actually a

34
00:01:29,920 --> 00:01:33,460
very good reason people in the computing

35
00:01:31,450 --> 00:01:35,350
field say that kind of thing but the

36
00:01:33,460 --> 00:01:37,149
other other folks have a lot of

37
00:01:35,350 --> 00:01:39,339
confidence and let's narrow the

38
00:01:37,149 --> 00:01:41,740
discussion from voting software which is

39
00:01:39,340 --> 00:01:45,520
broader to sort of a subset voting

40
00:01:41,740 --> 00:01:46,958
machines I think I think it's I think

41
00:01:45,520 --> 00:01:49,089
it's fair to say that probably voting

42
00:01:46,959 --> 00:01:51,369
machines are maybe not a good idea for

43
00:01:49,090 --> 00:01:53,350
high stakes elections and there's

44
00:01:51,369 --> 00:01:56,920
there's a case to be made for paper

45
00:01:53,350 --> 00:01:58,329
ballots all the way through but I can

46
00:01:56,920 --> 00:02:02,340
kind of appreciate some of the flip side

47
00:01:58,329 --> 00:02:05,109
arguments to voting machines can

48
00:02:02,340 --> 00:02:06,609
contaminate in different ways like if

49
00:02:05,109 --> 00:02:09,310
you wanted to have preference ballot or

50
00:02:06,609 --> 00:02:11,380
something and they can give results very

51
00:02:09,310 --> 00:02:13,030
quickly and that can that can kind of

52
00:02:11,380 --> 00:02:14,890
quell unrest when people say ah there's

53
00:02:13,030 --> 00:02:19,230
our result we're not we're not waiting

54
00:02:14,890 --> 00:02:21,489
days for it all that being said I think

55
00:02:19,230 --> 00:02:24,149
there's nothing really wrong with

56
00:02:21,490 --> 00:02:26,740
with paper ballots but the idea of

57
00:02:24,150 --> 00:02:28,930
voting machines interested interest me

58
00:02:26,740 --> 00:02:31,090
from this more theoretical perspective

59
00:02:28,930 --> 00:02:36,970
what I call problems of two or more

60
00:02:31,090 --> 00:02:39,070
users having to trust one computer so

61
00:02:36,970 --> 00:02:45,190
let's just use the voting machine area

62
00:02:39,070 --> 00:02:48,880
as an example how do we address the fact

63
00:02:45,190 --> 00:02:50,590
that there's many stakeholders and one

64
00:02:48,880 --> 00:02:53,620
computer that everyone is trusting there

65
00:02:50,590 --> 00:02:54,970
so this is not the only criteria you

66
00:02:53,620 --> 00:02:56,890
should apply is such a thing but this is

67
00:02:54,970 --> 00:02:58,990
sort of the the angle I come at it from

68
00:02:56,890 --> 00:03:00,670
a software that runs on it should be

69
00:02:58,990 --> 00:03:01,990
free and open-source software there

70
00:03:00,670 --> 00:03:03,809
should be public discussion about what's

71
00:03:01,990 --> 00:03:06,280
in it it should be well known

72
00:03:03,810 --> 00:03:07,540
scrutineers are people traditionally who

73
00:03:06,280 --> 00:03:09,100
come right from the political parties

74
00:03:07,540 --> 00:03:11,500
and the witness account or maybe even

75
00:03:09,100 --> 00:03:14,620
witness how an election center is run so

76
00:03:11,500 --> 00:03:16,210
I'm putting out there the idea that

77
00:03:14,620 --> 00:03:18,880
scrutineers could actually witness a

78
00:03:16,210 --> 00:03:20,650
software load and all say hey okay we

79
00:03:18,880 --> 00:03:22,690
all agree that this not only is this the

80
00:03:20,650 --> 00:03:26,100
software that was published but that

81
00:03:22,690 --> 00:03:28,240
that was what was actually loaded

82
00:03:26,100 --> 00:03:29,620
because it doesn't matter if you have

83
00:03:28,240 --> 00:03:32,860
one thing published and a completely

84
00:03:29,620 --> 00:03:34,770
different thing at load time and I even

85
00:03:32,860 --> 00:03:37,330
go so far to say they got a stick around

86
00:03:34,770 --> 00:03:39,850
while while the voting machine is in

87
00:03:37,330 --> 00:03:40,840
operation trusted platform modules are

88
00:03:39,850 --> 00:03:42,910
kind of an interesting technical

89
00:03:40,840 --> 00:03:45,310
solution for how you can set up a

90
00:03:42,910 --> 00:03:48,040
machine and that abandonment the issue

91
00:03:45,310 --> 00:03:50,950
that we in elections is if you have like

92
00:03:48,040 --> 00:03:52,269
remote attestation that the machine is

93
00:03:50,950 --> 00:03:54,600
fine the machine is final the machine is

94
00:03:52,270 --> 00:03:58,270
not fine by the time that's happened

95
00:03:54,600 --> 00:04:00,250
there's not really any reversing it so

96
00:03:58,270 --> 00:04:02,440
it's it's better if you have people

97
00:04:00,250 --> 00:04:05,170
watching it to begin with and TPMS can

98
00:04:02,440 --> 00:04:08,410
play a role in that inspection look at

99
00:04:05,170 --> 00:04:10,450
the trommel Hudsons heads project or the

100
00:04:08,410 --> 00:04:13,960
leap Libre key for purism they have this

101
00:04:10,450 --> 00:04:16,329
idea of end users watching and

102
00:04:13,960 --> 00:04:17,980
validating TPM results early in the boot

103
00:04:16,329 --> 00:04:21,310
process before critical software gets

104
00:04:17,980 --> 00:04:23,950
loaded so how do you do the software

105
00:04:21,310 --> 00:04:26,500
load you could go back to what Maz was

106
00:04:23,950 --> 00:04:28,450
talking about yesterday and you could

107
00:04:26,500 --> 00:04:30,580
make sure that the build is reproducible

108
00:04:28,450 --> 00:04:31,719
so not only is the software out there

109
00:04:30,580 --> 00:04:33,680
for everyone to see but that it

110
00:04:31,720 --> 00:04:35,960
consistently produces

111
00:04:33,680 --> 00:04:39,050
the the same binary when it's when it's

112
00:04:35,960 --> 00:04:42,409
compiled and if it's reproducible then

113
00:04:39,050 --> 00:04:44,720
it's possible to have this idea of give

114
00:04:42,410 --> 00:04:47,240
everyone who's a witness to the software

115
00:04:44,720 --> 00:04:50,300
load the chance to look at a read-only

116
00:04:47,240 --> 00:04:51,830
copy of that of that software and how

117
00:04:50,300 --> 00:04:54,550
you might do that maybe you would you

118
00:04:51,830 --> 00:04:58,099
rely on optical discs that are read-only

119
00:04:54,550 --> 00:04:59,780
in the world flash memory one commonly

120
00:04:58,100 --> 00:05:02,300
available combination is that you can

121
00:04:59,780 --> 00:05:06,830
get an SD card that has a lock switch

122
00:05:02,300 --> 00:05:08,000
and an adapter though I think you many

123
00:05:06,830 --> 00:05:11,120
of you are probably already imagining

124
00:05:08,000 --> 00:05:12,949
what could possibly go wrong in in that

125
00:05:11,120 --> 00:05:14,840
scenario right you know people are

126
00:05:12,949 --> 00:05:16,970
putting optical discs inside their

127
00:05:14,840 --> 00:05:18,919
computer how do you know is that an

128
00:05:16,970 --> 00:05:20,090
opportunity for it to be rewritten if it

129
00:05:18,919 --> 00:05:22,099
turns out it's actually not oh right

130
00:05:20,090 --> 00:05:25,849
once optical disk and who can tell the

131
00:05:22,099 --> 00:05:27,500
difference and are there opportunities

132
00:05:25,849 --> 00:05:30,560
for sleight of hand if people are moving

133
00:05:27,500 --> 00:05:36,710
a flash memory card around a kind of

134
00:05:30,560 --> 00:05:40,810
thing so here's option number two have

135
00:05:36,710 --> 00:05:43,789
the firmware in your voting machine be

136
00:05:40,810 --> 00:05:46,610
just a small bootstrap ROM and give some

137
00:05:43,789 --> 00:05:49,400
people give people a way to verify it

138
00:05:46,610 --> 00:05:51,440
verify that externally before loading

139
00:05:49,400 --> 00:05:54,789
additional software with that bootstrap

140
00:05:51,440 --> 00:05:56,840
ROM so maybe lights and switches and

141
00:05:54,789 --> 00:05:59,330
then you can load the process by

142
00:05:56,840 --> 00:06:02,840
bootstrap process now and this isn't a

143
00:05:59,330 --> 00:06:05,990
matter of asking the witnesses and the

144
00:06:02,840 --> 00:06:08,448
operators to type every bit of software

145
00:06:05,990 --> 00:06:10,669
in you can you once you get your

146
00:06:08,449 --> 00:06:14,180
bootstrap process far enough along you

147
00:06:10,669 --> 00:06:16,159
can have it load load data that it will

148
00:06:14,180 --> 00:06:18,680
execute and run and before it actually

149
00:06:16,159 --> 00:06:21,380
executes and runs it just report a

150
00:06:18,680 --> 00:06:23,570
cryptographic hash of okay I'm about to

151
00:06:21,380 --> 00:06:24,949
execute and run this so maybe the next

152
00:06:23,570 --> 00:06:27,409
stage is to actually go from some

153
00:06:24,949 --> 00:06:29,690
bootstrap process to running the kernel

154
00:06:27,409 --> 00:06:32,509
Linux and it reports first hey there's

155
00:06:29,690 --> 00:06:36,800
that there's that checksum and that's

156
00:06:32,509 --> 00:06:38,449
the real one for 4.14 seven eight so

157
00:06:36,800 --> 00:06:40,880
really interesting going on in the free

158
00:06:38,449 --> 00:06:44,029
software world that kind of came out of

159
00:06:40,880 --> 00:06:47,480
the reproducible build stuff is the idea

160
00:06:44,029 --> 00:06:51,230
of rebuilding the entire world

161
00:06:47,480 --> 00:06:53,840
software and also maybe other platforms

162
00:06:51,230 --> 00:06:56,660
as well with having way to completely

163
00:06:53,840 --> 00:07:02,869
have a full bootstrap path that people

164
00:06:56,660 --> 00:07:04,880
can use to to bring all of that back so

165
00:07:02,870 --> 00:07:07,610
one of the main people working on this

166
00:07:04,880 --> 00:07:11,270
is Yan from the Netherlands and you can

167
00:07:07,610 --> 00:07:13,010
see this is a from his fosston 2017 a

168
00:07:11,270 --> 00:07:16,940
talk you can see that I'm used YouTube

169
00:07:13,010 --> 00:07:20,060
or the fosston website what he's working

170
00:07:16,940 --> 00:07:21,860
on is the canoe mast project a mess is

171
00:07:20,060 --> 00:07:24,950
Matt these calls it Maxwell's equations

172
00:07:21,860 --> 00:07:28,760
for software funky and it is mutually

173
00:07:24,950 --> 00:07:31,550
self-hosting which is a little different

174
00:07:28,760 --> 00:07:33,789
from the idea of say of a self hosting

175
00:07:31,550 --> 00:07:36,650
compiler like you know the example of

176
00:07:33,790 --> 00:07:38,360
like most C compilers are themselves

177
00:07:36,650 --> 00:07:40,520
written in C and they can compile

178
00:07:38,360 --> 00:07:42,140
themselves and that's just self hosting

179
00:07:40,520 --> 00:07:45,049
so here's the example of how this is

180
00:07:42,140 --> 00:07:47,030
mutually self-hosting they have a scheme

181
00:07:45,050 --> 00:07:49,040
interpreter scheme is popular Lisp

182
00:07:47,030 --> 00:07:52,429
variant this scheme interpreter is

183
00:07:49,040 --> 00:07:56,060
written in C and the scheme is of course

184
00:07:52,430 --> 00:07:57,530
a good language for writing up or as

185
00:07:56,060 --> 00:07:58,940
part of me C is a good language for

186
00:07:57,530 --> 00:08:00,770
writing a portable interpreter that you

187
00:07:58,940 --> 00:08:02,990
want to that you want a bootstrap

188
00:08:00,770 --> 00:08:06,320
because the portability of it and then

189
00:08:02,990 --> 00:08:08,060
they have messy C it's a seek compiler

190
00:08:06,320 --> 00:08:10,930
written in scheme so both of these can

191
00:08:08,060 --> 00:08:13,310
interpret or compile each other and

192
00:08:10,930 --> 00:08:18,380
scheme is a good language for writing a

193
00:08:13,310 --> 00:08:20,870
language compiler and so they've gotten

194
00:08:18,380 --> 00:08:23,480
to the point now where it can build a C

195
00:08:20,870 --> 00:08:25,880
compiler called TCC which was originally

196
00:08:23,480 --> 00:08:30,530
written for the international co-op

197
00:08:25,880 --> 00:08:34,340
station contest but it's now in a very

198
00:08:30,530 --> 00:08:38,059
it's not obstacle people use it for

199
00:08:34,340 --> 00:08:40,790
different things and TCC can build the

200
00:08:38,059 --> 00:08:43,069
canoe triplet from which the rest of the

201
00:08:40,789 --> 00:08:44,510
free world can be can be fully fully

202
00:08:43,070 --> 00:08:44,990
built so there's the canoe compiler

203
00:08:44,510 --> 00:08:46,970
collection

204
00:08:44,990 --> 00:08:48,560
there's the canoe C library and there's

205
00:08:46,970 --> 00:08:50,960
gonna be bin utils which is like stuff

206
00:08:48,560 --> 00:08:55,099
for linking and dealing with assembler

207
00:08:50,960 --> 00:08:58,100
and stuff so working more on the low

208
00:08:55,100 --> 00:08:59,540
level we have Jeremiah orion's who

209
00:08:58,100 --> 00:09:00,980
appears to be from the United States I

210
00:08:59,540 --> 00:09:01,890
don't have a picture of him but this is

211
00:09:00,980 --> 00:09:05,430
again

212
00:09:01,890 --> 00:09:07,140
Gravatar and if you can't read that the

213
00:09:05,430 --> 00:09:09,329
back it his Gravatar says the first

214
00:09:07,140 --> 00:09:13,260
version of everything is janky don't

215
00:09:09,330 --> 00:09:14,580
fear tankyness and the way that he's

216
00:09:13,260 --> 00:09:16,380
starting out the bootstrap is they

217
00:09:14,580 --> 00:09:18,060
defined a virtual machine infrastructure

218
00:09:16,380 --> 00:09:22,140
that they call night that's not their

219
00:09:18,060 --> 00:09:25,920
logo and then they have a very simple

220
00:09:22,140 --> 00:09:29,310
ROM that is a monitor so the idea of a

221
00:09:25,920 --> 00:09:30,689
monitor in when you're doing this kinda

222
00:09:29,310 --> 00:09:35,819
thing as a monitor is a program that

223
00:09:30,690 --> 00:09:37,560
lets you inspect and insert data into

224
00:09:35,820 --> 00:09:39,450
that particular memory addresses and to

225
00:09:37,560 --> 00:09:41,400
jump in execute so this is actually the

226
00:09:39,450 --> 00:09:49,170
Apple 2 monitor that I grabbed a

227
00:09:41,400 --> 00:09:50,699
screenshot from very good and then we

228
00:09:49,170 --> 00:09:52,380
call it the Steve zero project but they

229
00:09:50,700 --> 00:09:55,200
actually have Steve zero in stage one

230
00:09:52,380 --> 00:09:57,780
stage two you all in that so then they

231
00:09:55,200 --> 00:10:00,060
have hex assemblers of increasing

232
00:09:57,780 --> 00:10:01,260
complexity so that's instead of you

233
00:10:00,060 --> 00:10:04,949
entering manually you actually have

234
00:10:01,260 --> 00:10:07,680
hexadecimal in a text file as you can

235
00:10:04,950 --> 00:10:09,510
put have it's a machine language level

236
00:10:07,680 --> 00:10:12,180
but you can put comments and stuff in it

237
00:10:09,510 --> 00:10:14,640
and then they have the from that they

238
00:10:12,180 --> 00:10:18,209
build macro assemblers where you can

239
00:10:14,640 --> 00:10:21,540
define macros to instead of having hex

240
00:10:18,210 --> 00:10:27,480
decimal you can start having more human

241
00:10:21,540 --> 00:10:31,530
readable versions of thinks and that's

242
00:10:27,480 --> 00:10:33,330
coming really well long they so they've

243
00:10:31,530 --> 00:10:35,310
been working bringing their two projects

244
00:10:33,330 --> 00:10:37,110
together the scheme interpreter written

245
00:10:35,310 --> 00:10:43,530
in C that Yann from the Netherlands

246
00:10:37,110 --> 00:10:45,240
wrote it can output it can the mass and

247
00:10:43,530 --> 00:10:47,550
messy they can have their output in the

248
00:10:45,240 --> 00:10:49,860
m1 macro assembler language and so

249
00:10:47,550 --> 00:10:53,160
thanks to that now the the free world

250
00:10:49,860 --> 00:10:55,260
can now be reboot strapped with only a

251
00:10:53,160 --> 00:10:56,490
one megabyte blob they actually kind of

252
00:10:55,260 --> 00:10:59,970
call it readable because they I think

253
00:10:56,490 --> 00:11:02,030
they have comments around there their

254
00:10:59,970 --> 00:11:04,470
macro assembler that that's outputting

255
00:11:02,030 --> 00:11:09,209
I'm not sure how readable that really is

256
00:11:04,470 --> 00:11:11,100
but it when megabyte is a lot smaller of

257
00:11:09,210 --> 00:11:13,710
a blob than what they they used to rely

258
00:11:11,100 --> 00:11:14,940
on which was a full binary build of the

259
00:11:13,710 --> 00:11:16,320
canoe triplet

260
00:11:14,940 --> 00:11:18,570
can you compiler collection can you see

261
00:11:16,320 --> 00:11:20,850
library VIN utils and that was hundreds

262
00:11:18,570 --> 00:11:24,210
of megabytes and they're working to get

263
00:11:20,850 --> 00:11:26,820
it get things down to even smaller they

264
00:11:24,210 --> 00:11:30,240
have they're working on a C compiler

265
00:11:26,820 --> 00:11:31,950
that's not the full C language but is a

266
00:11:30,240 --> 00:11:36,570
much smaller subset that's called the m2

267
00:11:31,950 --> 00:11:38,090
planet and they're rewriting the the

268
00:11:36,570 --> 00:11:42,240
scheme interpreter that was written in C

269
00:11:38,090 --> 00:11:47,160
to use this simpler C variant and that

270
00:11:42,240 --> 00:11:48,780
will mean that mostly you'll have to if

271
00:11:47,160 --> 00:11:51,329
you're trying to read this stuff to

272
00:11:48,780 --> 00:11:52,860
inspect your bootstrap you'll most most

273
00:11:51,330 --> 00:11:55,950
of the reading you'll have to do before

274
00:11:52,860 --> 00:12:03,030
you get to more well-known software is

275
00:11:55,950 --> 00:12:05,370
the that would be the the scheme

276
00:12:03,030 --> 00:12:06,750
interpreter written in written in a

277
00:12:05,370 --> 00:12:09,330
simple C variant you'd have to read that

278
00:12:06,750 --> 00:12:10,710
instead of a bunch of assembler now a

279
00:12:09,330 --> 00:12:12,930
lot of people have said well what about

280
00:12:10,710 --> 00:12:15,000
forth and I had the exact same thought

281
00:12:12,930 --> 00:12:16,739
and they've heard it from a lot of

282
00:12:15,000 --> 00:12:18,690
people because when it wouldn't be nice

283
00:12:16,740 --> 00:12:20,400
if you can bootstrap forth as early as

284
00:12:18,690 --> 00:12:23,010
possible in the process I'm not to deal

285
00:12:20,400 --> 00:12:25,260
with so many hex assemble levels of hex

286
00:12:23,010 --> 00:12:26,790
assemblers and macro assemblers you know

287
00:12:25,260 --> 00:12:28,710
and maybe you can write your your scheme

288
00:12:26,790 --> 00:12:33,000
interpreter in fourth or even go so far

289
00:12:28,710 --> 00:12:36,630
as to write your your C compiler in

290
00:12:33,000 --> 00:12:38,610
fourth but you know suggestions does not

291
00:12:36,630 --> 00:12:40,350
make working code make and they've kind

292
00:12:38,610 --> 00:12:42,450
of thrown down the gauntlet and said

293
00:12:40,350 --> 00:12:44,010
because the great many people started

294
00:12:42,450 --> 00:12:46,500
stated fourth would be an ideal

295
00:12:44,010 --> 00:12:49,080
bootstrapping language and so the time

296
00:12:46,500 --> 00:12:50,370
and effort was put forth they have a

297
00:12:49,080 --> 00:12:51,840
little bit of it there for people to

298
00:12:50,370 --> 00:12:53,730
kind of build upon but it's ultimately

299
00:12:51,840 --> 00:12:54,930
determined from their perspective that

300
00:12:53,730 --> 00:12:56,340
assembly was preferable as the

301
00:12:54,930 --> 00:12:58,500
underlying architecture was in total

302
00:12:56,340 --> 00:13:00,060
garbage it now sits waiting for any

303
00:12:58,500 --> 00:13:02,040
fourth programmer who wishes to prove

304
00:13:00,060 --> 00:13:04,800
fourth is a real bootstrapping language

305
00:13:02,040 --> 00:13:07,339
so here are some image macros about

306
00:13:04,800 --> 00:13:07,339
throwing down the gauntlet

307
00:13:08,240 --> 00:13:15,060
cuz it's Sunday morning and here are I

308
00:13:13,200 --> 00:13:18,300
like the idea of fourth because there

309
00:13:15,060 --> 00:13:20,420
are now obsolete but you know still

310
00:13:18,300 --> 00:13:22,800
somewhat available computers that were

311
00:13:20,420 --> 00:13:25,540
manufactured that actually had were self

312
00:13:22,800 --> 00:13:30,060
programmable with four firmwares

313
00:13:25,540 --> 00:13:32,680
there's some of those examples and then

314
00:13:30,060 --> 00:13:35,349
that's most of what I have to say today

315
00:13:32,680 --> 00:13:36,729
I've got some other ideas out here for

316
00:13:35,350 --> 00:13:39,730
sideline talk I'm just putting on the

317
00:13:36,730 --> 00:13:41,769
slide so people can look at them so I'm

318
00:13:39,730 --> 00:13:42,699
not going to waste a presentation time

319
00:13:41,769 --> 00:13:46,300
on that

320
00:13:42,699 --> 00:13:48,099
I'm just running it past I can give a

321
00:13:46,300 --> 00:13:52,329
quick summary though right Andreessen I

322
00:13:48,100 --> 00:13:57,100
talked about last year and Oracle's as

323
00:13:52,329 --> 00:13:59,170
data feeds people are using an Intel

324
00:13:57,100 --> 00:14:02,440
technology flat but maybe bootstrapping

325
00:13:59,170 --> 00:14:04,990
is kind of an alternative and is there

326
00:14:02,440 --> 00:14:06,670
does bootstrapping meet with a bunch of

327
00:14:04,990 --> 00:14:08,290
witnesses does that give a way to make a

328
00:14:06,670 --> 00:14:09,069
share tenancy hosting co-op that's an

329
00:14:08,290 --> 00:14:13,120
interesting question

330
00:14:09,069 --> 00:14:15,339
so where are we on time we are at 20

331
00:14:13,120 --> 00:14:20,910
after we're doing great I'll take your

332
00:14:15,339 --> 00:14:20,910
questions I got five shop

333
00:14:33,140 --> 00:14:40,830
the skill level doesn't need to be high

334
00:14:35,760 --> 00:14:42,270
because the once once you get to the

335
00:14:40,830 --> 00:14:47,100
point where a bootstrapping system can

336
00:14:42,270 --> 00:14:48,270
report report stuff on a screen they

337
00:14:47,100 --> 00:14:49,650
just need to see in a book that it

338
00:14:48,270 --> 00:14:51,540
matches that like oh this is the

339
00:14:49,650 --> 00:14:53,160
checksum I'm expecting when you get far

340
00:14:51,540 --> 00:14:55,050
enough you can even start displaying QR

341
00:14:53,160 --> 00:14:57,329
codes on screen and people can have come

342
00:14:55,050 --> 00:14:59,910
come as witnesses to a software loading

343
00:14:57,330 --> 00:15:01,140
with their smartphones and just say okay

344
00:14:59,910 --> 00:15:03,030
I saw that the earlier part of the

345
00:15:01,140 --> 00:15:04,470
process was done right now I just I hold

346
00:15:03,030 --> 00:15:07,079
up my smartphone and the smartphone will

347
00:15:04,470 --> 00:15:09,260
tell me if the wrong QR code shows up on

348
00:15:07,080 --> 00:15:09,260
screen

349
00:15:19,130 --> 00:15:24,870
well when we're talking in person then

350
00:15:22,680 --> 00:15:27,750
we're talking about like having an a

351
00:15:24,870 --> 00:15:29,850
localized display technology like like

352
00:15:27,750 --> 00:15:34,649
saying an analog monitor on an already

353
00:15:29,850 --> 00:15:37,350
bootstrapped computer but yeah it sure

354
00:15:34,649 --> 00:15:39,029
the the tampering at the hardware level

355
00:15:37,350 --> 00:15:42,000
is always sort of a risk with these

356
00:15:39,029 --> 00:15:43,589
things of course and so if you really

357
00:15:42,000 --> 00:15:45,720
want to go far with it you know there's

358
00:15:43,589 --> 00:15:48,000
ways to build more inspectable hardware

359
00:15:45,720 --> 00:15:49,709
as well I actually bought something very

360
00:15:48,000 --> 00:15:53,040
interesting also from the Netherlands a

361
00:15:49,709 --> 00:15:57,810
group of people put together an

362
00:15:53,040 --> 00:16:00,329
interesting CPU with with TTL logic

363
00:15:57,810 --> 00:16:02,550
chips that actually fits on one board

364
00:16:00,329 --> 00:16:03,750
because they optimized it to use a lot

365
00:16:02,550 --> 00:16:05,519
of software techniques instead of

366
00:16:03,750 --> 00:16:08,310
Hardware techniques and so it's a TTL

367
00:16:05,519 --> 00:16:09,990
computer on one board so that's that's

368
00:16:08,310 --> 00:16:12,388
amazingly inspectable and even going

369
00:16:09,990 --> 00:16:13,980
further on inspect ability there's some

370
00:16:12,389 --> 00:16:17,970
people who have a project to built a

371
00:16:13,980 --> 00:16:20,339
Maus 6502 on one very big circuit board

372
00:16:17,970 --> 00:16:22,769
and so there there is some room for

373
00:16:20,339 --> 00:16:24,420
verifiability there the display tech

374
00:16:22,769 --> 00:16:31,769
that's a very that's another interesting

375
00:16:24,420 --> 00:16:34,259
realm to look into mechanical TT wise as

376
00:16:31,769 --> 00:16:39,500
a display tech might be might be you're

377
00:16:34,259 --> 00:16:42,860
out let's leave it at that

378
00:16:39,500 --> 00:16:42,860
I'll see you all

379
00:16:44,780 --> 00:16:46,839
you

