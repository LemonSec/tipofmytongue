1
00:00:07,650 --> 00:00:12,450
so I'm Mike they've decided not to

2
00:00:10,980 --> 00:00:16,260
introduce me because I told them not to

3
00:00:12,450 --> 00:00:18,840
and so if you were here last year I

4
00:00:16,260 --> 00:00:20,310
talked a bit about cloud because that

5
00:00:18,840 --> 00:00:23,189
appears to be my thing and I'm just

6
00:00:20,310 --> 00:00:29,099
typecast and again my cat features

7
00:00:23,189 --> 00:00:30,480
prominently as cute this time so this

8
00:00:29,100 --> 00:00:33,870
I've chosen to be generous and call you

9
00:00:30,480 --> 00:00:36,420
all professionals this is about s3 last

10
00:00:33,870 --> 00:00:38,220
time I kind of boiled the ocean I talked

11
00:00:36,420 --> 00:00:40,320
about everything that Amazon offered in

12
00:00:38,220 --> 00:00:42,629
terms of security services this year I'm

13
00:00:40,320 --> 00:00:45,930
going to talk specifically about only

14
00:00:42,630 --> 00:00:53,460
one service so buckle up this is gonna

15
00:00:45,930 --> 00:00:55,469
go quick s3 who's used s3 half the room

16
00:00:53,460 --> 00:01:00,329
will call it who thinks they really

17
00:00:55,469 --> 00:01:03,510
understand s3 so with like three half

18
00:01:00,329 --> 00:01:08,780
hands awesome perfect first question

19
00:01:03,510 --> 00:01:08,780
what is s3 any ideas

20
00:01:09,020 --> 00:01:14,850
okay correct

21
00:01:11,280 --> 00:01:17,819
it is 3 s's so acceptable answers are

22
00:01:14,850 --> 00:01:20,339
things like object store apples are

23
00:01:17,819 --> 00:01:23,819
objects oranges or objects cats are not

24
00:01:20,340 --> 00:01:25,619
objects if you've ever owned one and

25
00:01:23,819 --> 00:01:28,950
Amazon service is the other except rely

26
00:01:25,619 --> 00:01:30,690
solar and simple storage service is like

27
00:01:28,950 --> 00:01:33,530
these are all fine things but there is a

28
00:01:30,690 --> 00:01:36,690
correct answer and it's key value store

29
00:01:33,530 --> 00:01:38,220
s3 is one thing and this is critical to

30
00:01:36,690 --> 00:01:39,599
understanding the nuances of how it

31
00:01:38,220 --> 00:01:41,550
functions and the functionality that's

32
00:01:39,599 --> 00:01:44,340
layered on top of it is you have a key

33
00:01:41,550 --> 00:01:47,280
it's a string and there's a value a blob

34
00:01:44,340 --> 00:01:48,709
metadata whatever but that's at its core

35
00:01:47,280 --> 00:01:53,550
that's what this thing is

36
00:01:48,709 --> 00:01:56,099
well done PowerPoint so brief history

37
00:01:53,550 --> 00:01:59,310
this is an actual exponential curve so

38
00:01:56,099 --> 00:02:03,090
you can see what exponential looks like

39
00:01:59,310 --> 00:02:05,130
and based on Amazon's blog posts news

40
00:02:03,090 --> 00:02:07,459
releases adoption of s3 in terms of

41
00:02:05,130 --> 00:02:11,790
object counts in the service has been

42
00:02:07,459 --> 00:02:15,480
exponential for the last 11 years so it

43
00:02:11,790 --> 00:02:18,780
was released in what we call mid 2006

44
00:02:15,480 --> 00:02:21,780
and today we have two hundred and thirty

45
00:02:18,780 --> 00:02:25,140
trillion objects in this service

46
00:02:21,780 --> 00:02:27,360
and it like this is exponential it has

47
00:02:25,140 --> 00:02:28,649
basically done a vertical thing over the

48
00:02:27,360 --> 00:02:32,340
last few years and it will continue to

49
00:02:28,650 --> 00:02:35,790
do so if history is any indicator so

50
00:02:32,340 --> 00:02:37,170
what's so magic about it well as three

51
00:02:35,790 --> 00:02:38,459
compatible api's does the thing you're

52
00:02:37,170 --> 00:02:40,500
going to hear a lot if you look at other

53
00:02:38,459 --> 00:02:42,390
object store services and there's a ton

54
00:02:40,500 --> 00:02:46,709
of them which means this is kind of the

55
00:02:42,390 --> 00:02:48,899
benchmark it's it runs the Internet

56
00:02:46,709 --> 00:02:54,780
anybody remember what the internet did

57
00:02:48,900 --> 00:02:56,430
when s3 broken us East one in 2017 slack

58
00:02:54,780 --> 00:02:58,440
didn't work all of your favorite

59
00:02:56,430 --> 00:02:59,400
websites didn't work nothing worked

60
00:02:58,440 --> 00:03:03,120
everyone's you can't read those but

61
00:02:59,400 --> 00:03:05,160
hopefully you can see the icons single

62
00:03:03,120 --> 00:03:07,650
customers have trillions of objects and

63
00:03:05,160 --> 00:03:09,930
exabytes of data in this service so

64
00:03:07,650 --> 00:03:11,880
however big you think you are you

65
00:03:09,930 --> 00:03:13,319
literally don't matter on the grand

66
00:03:11,880 --> 00:03:15,180
scale of the service which means you get

67
00:03:13,319 --> 00:03:21,720
to leverage the economies of scale for

68
00:03:15,180 --> 00:03:24,330
free notes and a single bucket can

69
00:03:21,720 --> 00:03:27,239
handle 3,000 transactions per second and

70
00:03:24,330 --> 00:03:29,489
that those are writes reads that's a

71
00:03:27,239 --> 00:03:30,810
whole separate story if you want 10,000

72
00:03:29,489 --> 00:03:33,420
you just call up Amazon and say hey I

73
00:03:30,810 --> 00:03:35,670
expect a big big load coming in can you

74
00:03:33,420 --> 00:03:37,920
warm up my bucket and they go sure and

75
00:03:35,670 --> 00:03:39,750
hang up the phone on you

76
00:03:37,920 --> 00:03:44,488
like this is one of those things where

77
00:03:39,750 --> 00:03:46,860
like magic just magic just happens so an

78
00:03:44,489 --> 00:03:48,480
s3 bucket can handle over like aggregate

79
00:03:46,860 --> 00:03:50,910
throughput is practically unlimited I

80
00:03:48,480 --> 00:03:53,578
have pulled over a hundred gigabytes out

81
00:03:50,910 --> 00:03:56,549
of a single bucket into lambda functions

82
00:03:53,579 --> 00:03:57,870
s3 ec2 instances like so aggregate

83
00:03:56,549 --> 00:03:59,400
throughput from these things is

84
00:03:57,870 --> 00:04:02,640
practically unlimited you can do

85
00:03:59,400 --> 00:04:05,100
anything with this stuff there's no

86
00:04:02,640 --> 00:04:07,048
limit of number of objects and you can

87
00:04:05,100 --> 00:04:09,570
directly serve websites from it which we

88
00:04:07,049 --> 00:04:12,420
know because people do it all the time I

89
00:04:09,570 --> 00:04:18,089
do it and it has legendary durability

90
00:04:12,420 --> 00:04:20,039
how many nines of durability well so

91
00:04:18,089 --> 00:04:21,418
it's 11 nines of a durability less

92
00:04:20,039 --> 00:04:24,719
availability than you might think but in

93
00:04:21,418 --> 00:04:26,549
practice somewhere around five or six so

94
00:04:24,720 --> 00:04:29,940
it's a prototype for a lot of different

95
00:04:26,550 --> 00:04:31,349
services so s3 is this one Google Cloud

96
00:04:29,940 --> 00:04:33,840
Storage blob storage did a load

97
00:04:31,349 --> 00:04:36,150
digitalocean Mineo is the free one

98
00:04:33,840 --> 00:04:38,340
some source IBM has there's Dell has

99
00:04:36,150 --> 00:04:40,710
theirs I don't know who would use Dells

100
00:04:38,340 --> 00:04:43,469
object store I'm looking at the guy at

101
00:04:40,710 --> 00:04:47,909
the back of the room but s3 is the

102
00:04:43,470 --> 00:04:49,199
prototype so moving back up the scale to

103
00:04:47,910 --> 00:04:51,690
just the general concept of object

104
00:04:49,199 --> 00:04:54,780
storage some primers on it core concepts

105
00:04:51,690 --> 00:04:56,729
buckets are the highest level structure

106
00:04:54,780 --> 00:04:59,638
in an object store everything goes into

107
00:04:56,729 --> 00:05:02,190
a bucket and buckets represent the where

108
00:04:59,639 --> 00:05:06,060
you attach functionality objects go into

109
00:05:02,190 --> 00:05:07,979
buckets prefixes are shared starting

110
00:05:06,060 --> 00:05:09,900
strings for objects so it lets you

111
00:05:07,979 --> 00:05:12,060
filter them because these are key value

112
00:05:09,900 --> 00:05:14,340
stores there's no good way to search the

113
00:05:12,060 --> 00:05:16,530
key space that's not how they're built

114
00:05:14,340 --> 00:05:18,869
so there are other sort of hacks and

115
00:05:16,530 --> 00:05:21,719
workarounds that they provide and ACLs

116
00:05:18,870 --> 00:05:23,160
both on buckets and objects that allows

117
00:05:21,720 --> 00:05:26,100
you to control access and all sorts of

118
00:05:23,160 --> 00:05:28,500
other stuff so buckets they're the

119
00:05:26,100 --> 00:05:31,139
top-level container they contain a whole

120
00:05:28,500 --> 00:05:32,850
bunch of stuff they have a name and

121
00:05:31,139 --> 00:05:35,820
generally it's in a global namespace

122
00:05:32,850 --> 00:05:37,590
like DNS so this is why s3 is

123
00:05:35,820 --> 00:05:40,080
challenging is because your bucket names

124
00:05:37,590 --> 00:05:42,388
live in the DNS namespace they're easy

125
00:05:40,080 --> 00:05:43,469
to enumerate and they're easy to check

126
00:05:42,389 --> 00:05:46,650
and see whether or not you have stuff in

127
00:05:43,470 --> 00:05:48,389
them so buckets hold objects they have

128
00:05:46,650 --> 00:05:50,969
an ACL which controls access to the

129
00:05:48,389 --> 00:05:53,599
bucket and sometimes for some amounts

130
00:05:50,970 --> 00:05:55,380
access to the objects in them and

131
00:05:53,599 --> 00:05:58,380
sometimes if you're lucky if

132
00:05:55,380 --> 00:06:02,550
fine-grained policy lets you layer on

133
00:05:58,380 --> 00:06:05,880
top of on top of the ACL and on top of

134
00:06:02,550 --> 00:06:08,340
other things and they provide the

135
00:06:05,880 --> 00:06:09,780
functionality so versioning websites

136
00:06:08,340 --> 00:06:11,638
surveying all sort of stuff is attached

137
00:06:09,780 --> 00:06:14,299
at the bucket level so the bucket

138
00:06:11,639 --> 00:06:17,190
provides these to the objects in it

139
00:06:14,300 --> 00:06:19,800
objects have a key and a value and

140
00:06:17,190 --> 00:06:21,990
frequently user metadata that's usually

141
00:06:19,800 --> 00:06:24,300
like a key value something something

142
00:06:21,990 --> 00:06:28,080
that's attached to your value in a key

143
00:06:24,300 --> 00:06:29,700
value store so you know hey I like you

144
00:06:28,080 --> 00:06:32,219
like here like object stores here's an

145
00:06:29,700 --> 00:06:34,500
object store in your object store no

146
00:06:32,220 --> 00:06:36,690
okay

147
00:06:34,500 --> 00:06:38,130
and objects usually have an ACL and

148
00:06:36,690 --> 00:06:42,240
we'll see later when I dig into s3

149
00:06:38,130 --> 00:06:44,070
specifically what that means prefixes

150
00:06:42,240 --> 00:06:46,380
are like these are just a simple thing

151
00:06:44,070 --> 00:06:47,520
or shared starting strains and I'll show

152
00:06:46,380 --> 00:06:49,530
an example of that later

153
00:06:47,520 --> 00:06:51,659
so prefixes provide efficient ways of

154
00:06:49,530 --> 00:06:54,510
applying a policy or something to a

155
00:06:51,660 --> 00:06:56,550
large group of any number of objects by

156
00:06:54,510 --> 00:06:59,490
applying it to a prefix and again I'll

157
00:06:56,550 --> 00:07:01,800
show an example that later and they like

158
00:06:59,490 --> 00:07:04,410
rage regex and what you're used to in

159
00:07:01,800 --> 00:07:05,880
listing objects in some file system they

160
00:07:04,410 --> 00:07:07,500
don't apply because again it's a key

161
00:07:05,880 --> 00:07:09,510
value store and they're not their

162
00:07:07,500 --> 00:07:12,090
mapping keys and hashing they're not

163
00:07:09,510 --> 00:07:13,980
necessarily listing and indexing them so

164
00:07:12,090 --> 00:07:16,020
things get interesting when you want to

165
00:07:13,980 --> 00:07:19,169
do large-scale listing on pockets with

166
00:07:16,020 --> 00:07:21,000
billions of objects a sales and

167
00:07:19,169 --> 00:07:22,169
permission boundaries this is where it

168
00:07:21,000 --> 00:07:25,440
gets fun and this is where people

169
00:07:22,169 --> 00:07:27,299
usually end up screwing up and that is a

170
00:07:25,440 --> 00:07:30,690
Ciel's control access to buckets and

171
00:07:27,300 --> 00:07:33,090
objects but crypto also controls access

172
00:07:30,690 --> 00:07:35,870
to buckets and objects so you can layer

173
00:07:33,090 --> 00:07:38,460
on NaCl a policy and a cryptographic

174
00:07:35,870 --> 00:07:40,919
boundary and the whether or not you can

175
00:07:38,460 --> 00:07:42,810
do an operation on an object in a bucket

176
00:07:40,919 --> 00:07:44,789
depends on the intersection of all of

177
00:07:42,810 --> 00:07:46,800
them and that's something that people

178
00:07:44,790 --> 00:07:48,360
just it's difficult to wrap your head

179
00:07:46,800 --> 00:07:49,590
around the first time you see it so I'm

180
00:07:48,360 --> 00:07:52,979
gonna talk a little bit about that

181
00:07:49,590 --> 00:07:54,989
that's three specifics later so that's

182
00:07:52,979 --> 00:07:56,849
three semantics workflow I create a

183
00:07:54,990 --> 00:07:59,070
bucket I do something with the bucket

184
00:07:56,850 --> 00:08:00,300
like a configuration policy I label

185
00:07:59,070 --> 00:08:02,310
functionality I care about like a

186
00:08:00,300 --> 00:08:03,930
website and then I add an object to it

187
00:08:02,310 --> 00:08:06,660
and then I configure security on the

188
00:08:03,930 --> 00:08:08,460
object optionally I can do that on poets

189
00:08:06,660 --> 00:08:09,930
I can do that later all sorts of fun

190
00:08:08,460 --> 00:08:15,000
stuff can happen that's the basic

191
00:08:09,930 --> 00:08:16,470
workflow of an object store so we're

192
00:08:15,000 --> 00:08:18,120
gonna get real we're gonna talk about s3

193
00:08:16,470 --> 00:08:20,910
specifically I want to leave time at the

194
00:08:18,120 --> 00:08:22,290
end for questions so hopefully this if

195
00:08:20,910 --> 00:08:24,090
you have something that's interesting or

196
00:08:22,290 --> 00:08:27,479
something more about there should be

197
00:08:24,090 --> 00:08:29,820
time at the end for questions so s3 has

198
00:08:27,479 --> 00:08:32,669
six main security mechanisms available

199
00:08:29,820 --> 00:08:35,549
to it a Ciel's bucket policies

200
00:08:32,669 --> 00:08:37,319
server-side encryption access logging

201
00:08:35,549 --> 00:08:42,900
durability and there's something there

202
00:08:37,320 --> 00:08:44,670
and ownership so these are six different

203
00:08:42,900 --> 00:08:48,170
ways of controlling what you can do with

204
00:08:44,670 --> 00:08:49,979
what in what when and why

205
00:08:48,170 --> 00:08:51,660
there's no way to screw up the

206
00:08:49,980 --> 00:08:56,040
intersection of six different mechanisms

207
00:08:51,660 --> 00:09:00,089
for something right no way no way so

208
00:08:56,040 --> 00:09:02,760
 a CLS Bukka DC ELLs provide a

209
00:09:00,090 --> 00:09:06,090
summary so you can't read it

210
00:09:02,760 --> 00:09:08,130
unfortunately but this is your AWS

211
00:09:06,090 --> 00:09:10,230
account this is what your account can do

212
00:09:08,130 --> 00:09:11,700
with this bucket and here the different

213
00:09:10,230 --> 00:09:13,950
they control access to four different

214
00:09:11,700 --> 00:09:16,290
permissions the ability to list objects

215
00:09:13,950 --> 00:09:18,270
the ability to write objects which

216
00:09:16,290 --> 00:09:19,920
includes delete reading bucket

217
00:09:18,270 --> 00:09:22,890
permissions and writing bucket

218
00:09:19,920 --> 00:09:26,400
permissions ACLs provide no explicit

219
00:09:22,890 --> 00:09:28,290
deny mechanism only explicit allow if

220
00:09:26,400 --> 00:09:31,170
you're not specified it is an implicit

221
00:09:28,290 --> 00:09:33,569
deny this is important for later and how

222
00:09:31,170 --> 00:09:35,270
the different mechanisms intersect so

223
00:09:33,570 --> 00:09:37,800
you can grant these permissions to

224
00:09:35,270 --> 00:09:40,890
yourself or see what's been granted to

225
00:09:37,800 --> 00:09:42,530
you if this isn't your bucket that talks

226
00:09:40,890 --> 00:09:45,000
about ownership we'll get into that and

227
00:09:42,530 --> 00:09:46,949
you can grant these permissions to other

228
00:09:45,000 --> 00:09:48,870
accounts if you own the bucket or have

229
00:09:46,950 --> 00:09:52,410
permissions to grant these permissions

230
00:09:48,870 --> 00:09:54,660
you can grant them to everyone and this

231
00:09:52,410 --> 00:09:59,160
is what people usually check they they

232
00:09:54,660 --> 00:10:01,860
open up all of these to everyone don't

233
00:09:59,160 --> 00:10:03,420
do that unless you know what you're

234
00:10:01,860 --> 00:10:05,220
doing and notes list lis that you need

235
00:10:03,420 --> 00:10:07,349
to do that but generally speaking that's

236
00:10:05,220 --> 00:10:09,960
not required that's how people end up in

237
00:10:07,350 --> 00:10:11,970
trouble and you can grant them to a log

238
00:10:09,960 --> 00:10:14,150
delivery group which lets other Amazon

239
00:10:11,970 --> 00:10:17,550
services deliver logs into your bucket

240
00:10:14,150 --> 00:10:20,130
so for things like cloud trail and

241
00:10:17,550 --> 00:10:23,370
Amazon specific logging services this

242
00:10:20,130 --> 00:10:24,540
lets Amazon deliver logs to you so

243
00:10:23,370 --> 00:10:25,440
that's that's a really nice handy

244
00:10:24,540 --> 00:10:28,079
feature because you don't have to open

245
00:10:25,440 --> 00:10:31,650
up to others just Amazon specific

246
00:10:28,080 --> 00:10:34,290
services object ACLs they're very

247
00:10:31,650 --> 00:10:36,569
similar they again provide a summary of

248
00:10:34,290 --> 00:10:38,730
what you your account can do on this

249
00:10:36,570 --> 00:10:41,280
object and they grant access to three

250
00:10:38,730 --> 00:10:42,840
things the ability to read the object

251
00:10:41,280 --> 00:10:44,459
the ability to write the object

252
00:10:42,840 --> 00:10:48,290
permissions and the ability to read the

253
00:10:44,460 --> 00:10:50,520
object permissions what's missing

254
00:10:48,290 --> 00:10:54,420
writing object permissions that's

255
00:10:50,520 --> 00:10:57,750
granted at the bucket level so this gets

256
00:10:54,420 --> 00:11:00,469
really interesting when again there's no

257
00:10:57,750 --> 00:11:03,890
explicit deny only implicit

258
00:11:00,470 --> 00:11:06,110
and only explicit allow so AC ELLs are

259
00:11:03,890 --> 00:11:08,569
easy to get wrong I just going o grant

260
00:11:06,110 --> 00:11:09,920
right objects grant list objects but

261
00:11:08,570 --> 00:11:11,510
then you don't grant a grant read

262
00:11:09,920 --> 00:11:14,060
objects so I can list the contents but

263
00:11:11,510 --> 00:11:16,040
not read it as the people throw well

264
00:11:14,060 --> 00:11:18,109
that doesn't work and then they're gonna

265
00:11:16,040 --> 00:11:19,670
get into the next contest the next topic

266
00:11:18,110 --> 00:11:21,830
but to finish this one out again you can

267
00:11:19,670 --> 00:11:25,550
grant these permissions to separate

268
00:11:21,830 --> 00:11:27,920
accounts or the public and so what usual

269
00:11:25,550 --> 00:11:29,870
people do is they go public read and

270
00:11:27,920 --> 00:11:34,490
they do this on every put so every

271
00:11:29,870 --> 00:11:37,010
object has public read object so this

272
00:11:34,490 --> 00:11:39,650
case that's actually yes the public is

273
00:11:37,010 --> 00:11:41,540
allowed to read this object because and

274
00:11:39,650 --> 00:11:44,630
you can't read it but the pocket is a

275
00:11:41,540 --> 00:11:46,550
UUID and the object is you your ID and i

276
00:11:44,630 --> 00:11:48,320
went you know good enough it's some

277
00:11:46,550 --> 00:11:50,300
source code it's in github anyway i

278
00:11:48,320 --> 00:11:51,010
don't care i don't want have to deal

279
00:11:50,300 --> 00:11:54,170
with it

280
00:11:51,010 --> 00:11:55,790
chances of them guessing it is low so

281
00:11:54,170 --> 00:11:57,709
now we're gonna talk with bucket

282
00:11:55,790 --> 00:11:59,300
policies this is where it gets really

283
00:11:57,710 --> 00:12:00,440
interesting and this is in the

284
00:11:59,300 --> 00:12:01,880
background which i'll go through and

285
00:12:00,440 --> 00:12:04,640
highlight and it will actually bigger so

286
00:12:01,880 --> 00:12:06,260
you can read it this is where it gets

287
00:12:04,640 --> 00:12:08,240
that gets really interesting

288
00:12:06,260 --> 00:12:10,460
so the bucket policies are json

289
00:12:08,240 --> 00:12:13,580
documents legend nixon lets you mix and

290
00:12:10,460 --> 00:12:16,220
match extreme granularity so policy made

291
00:12:13,580 --> 00:12:19,930
up of statements and every statement is

292
00:12:16,220 --> 00:12:22,370
a is either allows or denies an action

293
00:12:19,930 --> 00:12:27,620
explicitly so you have explicit deny

294
00:12:22,370 --> 00:12:31,070
here every statement has the following

295
00:12:27,620 --> 00:12:32,450
parts not still too small so every

296
00:12:31,070 --> 00:12:34,970
statement has an effect either allow or

297
00:12:32,450 --> 00:12:37,970
deny has to be one of the two can't be

298
00:12:34,970 --> 00:12:40,370
both every statement has a principle and

299
00:12:37,970 --> 00:12:43,100
the principle is another account or a

300
00:12:40,370 --> 00:12:45,250
user in your account so i can allow

301
00:12:43,100 --> 00:12:47,660
another account to do something

302
00:12:45,250 --> 00:12:49,280
conditionally and it's an

303
00:12:47,660 --> 00:12:51,890
intersectionally with other statements

304
00:12:49,280 --> 00:12:54,770
to the stuff in my bucket or to my

305
00:12:51,890 --> 00:12:56,390
bucket itself every count has one or

306
00:12:54,770 --> 00:12:58,579
more actions and these actions can

307
00:12:56,390 --> 00:13:00,620
contain wildcards so here i have get

308
00:12:58,580 --> 00:13:02,630
object and get object ACL but i could

309
00:13:00,620 --> 00:13:04,790
have get star which allows them to

310
00:13:02,630 --> 00:13:07,100
basically have read access to everything

311
00:13:04,790 --> 00:13:08,719
including the bucket which is handy if

312
00:13:07,100 --> 00:13:10,280
you cuz for us three i think there's

313
00:13:08,720 --> 00:13:12,140
fifty or sixty different actions you can

314
00:13:10,280 --> 00:13:13,110
take so being able to wildcard your

315
00:13:12,140 --> 00:13:15,060
actions

316
00:13:13,110 --> 00:13:17,820
and have them named consistently and say

317
00:13:15,060 --> 00:13:20,280
get star means read only then that's

318
00:13:17,820 --> 00:13:24,180
really handy for me as a as an

319
00:13:20,280 --> 00:13:27,079
administrator of this resource so every

320
00:13:24,180 --> 00:13:29,939
bucket has one or more resources and

321
00:13:27,080 --> 00:13:32,910
it's a fortune you can't see this really

322
00:13:29,940 --> 00:13:35,280
but this is the top resource is a

323
00:13:32,910 --> 00:13:37,050
specific object the next one is a prefix

324
00:13:35,280 --> 00:13:41,220
so there's a wild-card in it and the

325
00:13:37,050 --> 00:13:42,449
third one is you know into 2018 - so I

326
00:13:41,220 --> 00:13:44,970
can say you're allowed to get any

327
00:13:42,450 --> 00:13:48,600
financial reports that start in 2018

328
00:13:44,970 --> 00:13:49,590
and that's that's something I can do

329
00:13:48,600 --> 00:13:50,820
even though I don't know how many

330
00:13:49,590 --> 00:13:55,230
objects is going to that's going to

331
00:13:50,820 --> 00:13:56,270
apply to so the final part which again I

332
00:13:55,230 --> 00:13:59,190
really should have made these bigger

333
00:13:56,270 --> 00:14:01,410
underestimated how long this room was I

334
00:13:59,190 --> 00:14:03,870
can have conditions in this policy so I

335
00:14:01,410 --> 00:14:04,890
can say okay this applies but only if

336
00:14:03,870 --> 00:14:07,320
you're coming from a particular IP

337
00:14:04,890 --> 00:14:09,420
address and not from another set of IP

338
00:14:07,320 --> 00:14:11,610
addresses and I can have multiple

339
00:14:09,420 --> 00:14:13,890
statements that contain all of these in

340
00:14:11,610 --> 00:14:16,940
one policy for a bucket and those layer

341
00:14:13,890 --> 00:14:19,260
with my ACLs so this sounds complicated

342
00:14:16,940 --> 00:14:21,300
awesome there's documentation and

343
00:14:19,260 --> 00:14:23,130
literally a policy generator to help you

344
00:14:21,300 --> 00:14:25,589
build these things because they're

345
00:14:23,130 --> 00:14:27,689
complicated to remember so there is

346
00:14:25,590 --> 00:14:29,850
there are tools built into the service

347
00:14:27,690 --> 00:14:31,920
and the web UI that help you build these

348
00:14:29,850 --> 00:14:34,470
complicated policies because this is how

349
00:14:31,920 --> 00:14:36,510
you do things right so we've ACLs and

350
00:14:34,470 --> 00:14:38,100
Mia policies and they layer together as

351
00:14:36,510 --> 00:14:40,680
they can grant but not tonight

352
00:14:38,100 --> 00:14:42,960
policies can grant and deny and an

353
00:14:40,680 --> 00:14:44,760
option an operation is allowed if it is

354
00:14:42,960 --> 00:14:51,030
granted by anything and denied by

355
00:14:44,760 --> 00:14:54,500
nothing explicitly so super easy you'll

356
00:14:51,030 --> 00:14:56,430
all get it right now I can stop talking

357
00:14:54,500 --> 00:14:58,140
server-side encryption is the other part

358
00:14:56,430 --> 00:15:01,969
there's basically four ways to do it in

359
00:14:58,140 --> 00:15:06,120
s3 there's none magic default key and

360
00:15:01,970 --> 00:15:11,130
custom key magic is don't worry about it

361
00:15:06,120 --> 00:15:13,560
but it's magic and again these IDE

362
00:15:11,130 --> 00:15:15,840
cryptographic boundaries so even if s3

363
00:15:13,560 --> 00:15:18,000
the ACLs then the policies grant me

364
00:15:15,840 --> 00:15:20,010
permission is to perform an operation if

365
00:15:18,000 --> 00:15:22,020
it mandates that I use a particular key

366
00:15:20,010 --> 00:15:24,420
for that operation which you can do in a

367
00:15:22,020 --> 00:15:26,819
policy and I don't have access to that

368
00:15:24,420 --> 00:15:30,209
key I can't do that operation

369
00:15:26,819 --> 00:15:31,529
so this has a cryptographic boundary if

370
00:15:30,209 --> 00:15:33,299
you're using Amazon's managed

371
00:15:31,529 --> 00:15:35,339
server-side encryption stuff so there's

372
00:15:33,299 --> 00:15:38,220
policies on your keys policies on your

373
00:15:35,339 --> 00:15:39,929
pockets policies on your objects ACLs so

374
00:15:38,220 --> 00:15:41,929
this is this all layers together in a

375
00:15:39,929 --> 00:15:44,488
way that provides extremely granular

376
00:15:41,929 --> 00:15:47,189
secure ways of deploying these services

377
00:15:44,489 --> 00:15:49,949
and we're gonna get into how regularly

378
00:15:47,189 --> 00:15:52,289
people screw this up and you can mix and

379
00:15:49,949 --> 00:15:53,878
match encryption policies and stuff

380
00:15:52,289 --> 00:15:56,279
within a bucket and objects and all

381
00:15:53,879 --> 00:15:58,169
sorts of fun stuff and you can enforce

382
00:15:56,279 --> 00:16:00,539
it you can say I'm only going to allow

383
00:15:58,169 --> 00:16:03,600
uploads into this prefix if they match

384
00:16:00,539 --> 00:16:05,100
this encryption behavior so you don't

385
00:16:03,600 --> 00:16:08,609
have to go and fix it later you can just

386
00:16:05,100 --> 00:16:11,970
deny the upload on on initiation and go

387
00:16:08,609 --> 00:16:13,949
nope thou shalt do as I say or no upload

388
00:16:11,970 --> 00:16:14,929
for you so there's all sorts of fun

389
00:16:13,949 --> 00:16:16,949
stuff you can do

390
00:16:14,929 --> 00:16:18,600
access logging this is a simple one

391
00:16:16,949 --> 00:16:19,559
configuration is logged by Amazon

392
00:16:18,600 --> 00:16:21,959
services

393
00:16:19,559 --> 00:16:25,228
acha configuration can be tracked over

394
00:16:21,959 --> 00:16:28,378
time object operations like guests can

395
00:16:25,229 --> 00:16:31,199
be logged at a I'll call it best effort

396
00:16:28,379 --> 00:16:32,850
but it's pretty good like if you have a

397
00:16:31,199 --> 00:16:35,728
bucket with millions of transactions per

398
00:16:32,850 --> 00:16:39,119
second out of it they might miss some so

399
00:16:35,729 --> 00:16:42,539
call it highly probabilistic logging

400
00:16:39,119 --> 00:16:46,169
yeah not quite sampling see how they

401
00:16:42,539 --> 00:16:49,289
look like a 99% an encryption key I use

402
00:16:46,169 --> 00:16:51,089
is audit log separately so if you have

403
00:16:49,289 --> 00:16:52,499
particular keys that are mandated for

404
00:16:51,089 --> 00:16:54,539
you some ticular parts of your pocket or

405
00:16:52,499 --> 00:16:56,639
for particular objects this is logged

406
00:16:54,539 --> 00:16:57,720
and audited separately so you can see

407
00:16:56,639 --> 00:17:00,839
what's going on with the keys who's

408
00:16:57,720 --> 00:17:04,379
encrypting and decrypting with what they

409
00:17:00,839 --> 00:17:05,789
had a durability again 11 9 0 if you've

410
00:17:04,378 --> 00:17:09,898
got a million objects in there you'll

411
00:17:05,789 --> 00:17:13,829
lose one every 10,000 years so better

412
00:17:09,898 --> 00:17:15,898
than I don't know a USB Drive objects

413
00:17:13,829 --> 00:17:17,490
can be versioned and permissions to past

414
00:17:15,898 --> 00:17:19,948
versions are managed separately from the

415
00:17:17,490 --> 00:17:22,189
objects themselves so I can grant any

416
00:17:19,949 --> 00:17:24,329
operation I want to the current version

417
00:17:22,189 --> 00:17:26,370
mandate versioning at the bucket and

418
00:17:24,329 --> 00:17:28,710
then whenever an object is clobbered

419
00:17:26,369 --> 00:17:30,120
that past version is no longer

420
00:17:28,710 --> 00:17:32,519
accessible the person that can clobber

421
00:17:30,120 --> 00:17:34,709
it and I can get notifications when past

422
00:17:32,519 --> 00:17:36,659
versions are created so that's a good

423
00:17:34,710 --> 00:17:38,549
use case for something like logging

424
00:17:36,659 --> 00:17:40,650
buckets where if an object is clobbered

425
00:17:38,549 --> 00:17:43,260
I want to know that someone

426
00:17:40,650 --> 00:17:45,000
overwrote a log file I don't care that a

427
00:17:43,260 --> 00:17:47,879
new one showed up but if an old one was

428
00:17:45,000 --> 00:17:51,330
clobbered I definitely care that kind of

429
00:17:47,880 --> 00:17:52,950
thing is really useful how do I know

430
00:17:51,330 --> 00:17:55,139
they deleted my data this is a question

431
00:17:52,950 --> 00:17:56,340
I got last year it's important to know

432
00:17:55,140 --> 00:17:58,200
what you're asking if you have

433
00:17:56,340 --> 00:18:01,379
legislative or regulatory requirements

434
00:17:58,200 --> 00:18:04,110
for certification that data has been

435
00:18:01,380 --> 00:18:05,940
destroyed make sure you know what you're

436
00:18:04,110 --> 00:18:08,129
asking in what context you're asking it

437
00:18:05,940 --> 00:18:11,040
in so in a consumer solid-state drive if

438
00:18:08,130 --> 00:18:13,710
you shred - you a file on Linux it is

439
00:18:11,040 --> 00:18:15,500
guaranteed not off that disk because of

440
00:18:13,710 --> 00:18:19,200
how the solid state controller works

441
00:18:15,500 --> 00:18:21,210
because of house s3 works your best bet

442
00:18:19,200 --> 00:18:24,480
is delegate - in a certification of

443
00:18:21,210 --> 00:18:26,280
which there's a couple dozen ISO and

444
00:18:24,480 --> 00:18:28,130
Phipps and other standards that s3

445
00:18:26,280 --> 00:18:30,060
complies to HIPAA is another one

446
00:18:28,130 --> 00:18:32,220
delegate to one of those that is

447
00:18:30,060 --> 00:18:34,590
sufficient they call it a day

448
00:18:32,220 --> 00:18:35,940
because you know trying to get oh I need

449
00:18:34,590 --> 00:18:38,639
a certification to Amazon that's deleted

450
00:18:35,940 --> 00:18:40,110
my stuff you're probably not gonna get

451
00:18:38,640 --> 00:18:41,460
it your best bet is client-side

452
00:18:40,110 --> 00:18:43,379
encryption but now you're doing key

453
00:18:41,460 --> 00:18:45,870
management are you doing key management

454
00:18:43,380 --> 00:18:48,660
better than they're doing data

455
00:18:45,870 --> 00:18:49,919
destruction so that that's an important

456
00:18:48,660 --> 00:18:52,380
question to ask and I'm not saying that

457
00:18:49,920 --> 00:18:53,820
it's the right answer but it's make sure

458
00:18:52,380 --> 00:18:56,460
you know what you're talking about

459
00:18:53,820 --> 00:19:00,060
call up an Amazon rep get a good answer

460
00:18:56,460 --> 00:19:02,310
from them objects and metadata are

461
00:19:00,060 --> 00:19:03,600
immutable you can't change them all you

462
00:19:02,310 --> 00:19:05,879
can do is overwrite them that's where

463
00:19:03,600 --> 00:19:08,449
past versions come in and consistency of

464
00:19:05,880 --> 00:19:10,620
operation varies but is well defined on

465
00:19:08,450 --> 00:19:13,010
initial puts for an object that doesn't

466
00:19:10,620 --> 00:19:15,330
exist before didn't exist before it's

467
00:19:13,010 --> 00:19:17,820
immediately consistent you can read

468
00:19:15,330 --> 00:19:19,310
after write if you're overriding an

469
00:19:17,820 --> 00:19:23,760
object it's eventually consistent a

470
00:19:19,310 --> 00:19:25,679
second or two tops ownership every

471
00:19:23,760 --> 00:19:28,500
bucket and every object has an owner

472
00:19:25,680 --> 00:19:30,480
different objects within a bucket need

473
00:19:28,500 --> 00:19:31,260
not share owners with each other or with

474
00:19:30,480 --> 00:19:34,890
the bucket

475
00:19:31,260 --> 00:19:36,960
so if I own a bucket and you want to put

476
00:19:34,890 --> 00:19:39,240
an object in it you can put an object in

477
00:19:36,960 --> 00:19:41,910
my bucket if I permit you I can't read

478
00:19:39,240 --> 00:19:45,150
it unless you allow me to but because

479
00:19:41,910 --> 00:19:47,160
I'm paying for it I can delete it that's

480
00:19:45,150 --> 00:19:50,130
the basic premise around Amazon the way

481
00:19:47,160 --> 00:19:51,660
s3 handles it and handles ownership read

482
00:19:50,130 --> 00:19:54,150
permissions are by default restricted to

483
00:19:51,660 --> 00:19:58,350
the owner but I can grant others through

484
00:19:54,150 --> 00:20:01,290
object ACLS and object ecl's are useful

485
00:19:58,350 --> 00:20:03,629
but ownership cannot be transferred so

486
00:20:01,290 --> 00:20:06,060
the the hacker working flat is Everton a

487
00:20:03,630 --> 00:20:07,530
new object shows my bucket and it's I'm

488
00:20:06,060 --> 00:20:09,360
graduate read access I can read it

489
00:20:07,530 --> 00:20:12,149
clobber it with my own now I own the

490
00:20:09,360 --> 00:20:18,030
object policies don't apply to objects I

491
00:20:12,150 --> 00:20:18,570
don't own hit it good never gonna screw

492
00:20:18,030 --> 00:20:21,930
this one up

493
00:20:18,570 --> 00:20:27,840
so what could possibly go wrong with a

494
00:20:21,930 --> 00:20:29,490
system this simple nothing hints it's

495
00:20:27,840 --> 00:20:35,270
not because s3 is bad it's because it's

496
00:20:29,490 --> 00:20:38,100
complicated like this stuff is just

497
00:20:35,270 --> 00:20:41,580
misconfigured constantly all the time

498
00:20:38,100 --> 00:20:43,620
without fail and the reasons people

499
00:20:41,580 --> 00:20:45,990
assume that simple storage service isn't

500
00:20:43,620 --> 00:20:48,929
complicated and they assume that it's

501
00:20:45,990 --> 00:20:50,640
like oh I just need to access that oh

502
00:20:48,930 --> 00:20:52,770
that didn't work go to documentation

503
00:20:50,640 --> 00:20:55,680
this is how you make it public awesome

504
00:20:52,770 --> 00:20:56,879
I'm gonna do that no don't do that you

505
00:20:55,680 --> 00:21:01,200
did a thing because it was easy not

506
00:20:56,880 --> 00:21:06,050
because it was right and this is not

507
00:21:01,200 --> 00:21:16,040
your mother's Linux it's different okay

508
00:21:06,050 --> 00:21:16,040
so this is how an s3 usually works so in

509
00:21:16,590 --> 00:21:22,649
don't do this this right here don't do

510
00:21:20,309 --> 00:21:24,539
that you probably don't need to unless

511
00:21:22,650 --> 00:21:29,340
you know explicitly that you're doing it

512
00:21:24,539 --> 00:21:31,890
like the moral like the okay this was

513
00:21:29,340 --> 00:21:34,168
this happens a lot in 2017 in the summer

514
00:21:31,890 --> 00:21:36,990
there were at least ten major breaches

515
00:21:34,169 --> 00:21:38,070
that opened up 75,000 top-secret or

516
00:21:36,990 --> 00:21:40,710
higher

517
00:21:38,070 --> 00:21:42,750
Claire's documents and 230 million

518
00:21:40,710 --> 00:21:43,950
people's records so what does it know

519
00:21:42,750 --> 00:21:45,659
about you everything

520
00:21:43,950 --> 00:21:48,600
it's probably an s3 and it's probably

521
00:21:45,659 --> 00:21:53,250
public this happened so much that Amazon

522
00:21:48,600 --> 00:21:57,330
added three big orange indicators in the

523
00:21:53,250 --> 00:21:59,340
console when you do something stupid it

524
00:21:57,330 --> 00:22:01,260
doesn't have to be this way so this is

525
00:21:59,340 --> 00:22:03,139
intended to give you an exposure to how

526
00:22:01,260 --> 00:22:05,730
to do things right what mechanisms exist

527
00:22:03,140 --> 00:22:09,059
s3 is private secure out-of-the-box if

528
00:22:05,730 --> 00:22:10,590
you do nothing it is not public if you

529
00:22:09,059 --> 00:22:12,450
only use it within your account it is

530
00:22:10,590 --> 00:22:15,059
fine pocket names to me easily

531
00:22:12,450 --> 00:22:21,419
enumerated so don't be lazy when you're

532
00:22:15,059 --> 00:22:23,279
doing something awareness is most of the

533
00:22:21,419 --> 00:22:25,350
battle so this is intended to give

534
00:22:23,279 --> 00:22:28,110
awareness if not training if you're

535
00:22:25,350 --> 00:22:31,230
interested in more be the change I want

536
00:22:28,110 --> 00:22:35,158
to see in the world and either get help

537
00:22:31,230 --> 00:22:38,130
or educate or read the documentation the

538
00:22:35,159 --> 00:22:40,140
third help point and the CTF is read the

539
00:22:38,130 --> 00:22:42,360
documentation look I'm not kidding read

540
00:22:40,140 --> 00:22:45,120
the documentation just in case there are

541
00:22:42,360 --> 00:22:47,570
folks in the room here myself and others

542
00:22:45,120 --> 00:22:51,678
that are happy to provide assistance

543
00:22:47,570 --> 00:22:59,549
this is not I appreciate you listening

544
00:22:51,679 --> 00:23:01,080
that's number one questions I don't like

545
00:22:59,549 --> 00:23:03,620
that was fast but we have two minutes

546
00:23:01,080 --> 00:23:03,620
for questions

547
00:23:42,710 --> 00:23:48,030
yes three so the question was how do i

548
00:23:45,720 --> 00:23:49,800
prototype my access policy in member

549
00:23:48,030 --> 00:23:51,420
permission policy about making it live

550
00:23:49,800 --> 00:23:54,000
and accidentally making important stuff

551
00:23:51,420 --> 00:23:56,190
public so three things one read the

552
00:23:54,000 --> 00:23:57,900
documentation tons and tons of examples

553
00:23:56,190 --> 00:24:01,470
exist in documentation for different use

554
00:23:57,900 --> 00:24:03,810
cases two there are policy generators on

555
00:24:01,470 --> 00:24:06,840
Amazon site there was one at the bottom

556
00:24:03,810 --> 00:24:08,520
of the s3 interface the console itself

557
00:24:06,840 --> 00:24:10,050
the web console and it will help you

558
00:24:08,520 --> 00:24:13,680
generate policies and step you through

559
00:24:10,050 --> 00:24:17,100
in a GUI fashion what you want to do and

560
00:24:13,680 --> 00:24:19,070
the third one is there's a policy tester

561
00:24:17,100 --> 00:24:22,590
so you can take the policy you've built

562
00:24:19,070 --> 00:24:24,840
say test this policy and then put in

563
00:24:22,590 --> 00:24:26,970
conditions like hey if I am X how will

564
00:24:24,840 --> 00:24:28,500
this policy affect me so if you have 20

565
00:24:26,970 --> 00:24:29,850
different statements in the policy maybe

566
00:24:28,500 --> 00:24:32,010
non-trivial to figure out how they enter

567
00:24:29,850 --> 00:24:33,600
or how they overlap especially if

568
00:24:32,010 --> 00:24:34,890
they're written by different people so

569
00:24:33,600 --> 00:24:36,270
this policy tester will help you

570
00:24:34,890 --> 00:24:40,410
validate policies for different use

571
00:24:36,270 --> 00:24:42,600
cases but as far as semantically hey my

572
00:24:40,410 --> 00:24:46,230
business logic is X how do I do this

573
00:24:42,600 --> 00:24:47,699
your best bet is an expert human so

574
00:24:46,230 --> 00:24:49,260
there's some stuff to help you muddle

575
00:24:47,700 --> 00:24:50,670
through but at the end of the day an

576
00:24:49,260 --> 00:24:52,830
expert human is like you're not going to

577
00:24:50,670 --> 00:24:54,200
compile a core kernel yourself if you've

578
00:24:52,830 --> 00:24:58,169
never touched Thanks

579
00:24:54,200 --> 00:24:59,850
that's the best example I can get any

580
00:24:58,170 --> 00:25:02,240
other pressing questions if not I'll be

581
00:24:59,850 --> 00:25:02,240
kicking around

582
00:25:02,809 --> 00:25:16,789
okay oh wait is that a heckle absolutely

583
00:25:13,840 --> 00:25:18,980
I'm serving a website or I'm making

584
00:25:16,789 --> 00:25:20,809
available at public data set if you

585
00:25:18,980 --> 00:25:22,519
would put it on Twitter it should be

586
00:25:20,809 --> 00:25:24,740
public in your bucket but your bucket

587
00:25:22,519 --> 00:25:27,350
probably doesn't need to be public a

588
00:25:24,740 --> 00:25:28,999
prefix could be public so you can serve

589
00:25:27,350 --> 00:25:31,309
a website up a bucket and the website

590
00:25:28,999 --> 00:25:34,039
can websites prefix can be public but

591
00:25:31,309 --> 00:25:35,779
the bucket can still be private so if

592
00:25:34,039 --> 00:25:36,799
you're gonna make a bucket public it's

593
00:25:35,779 --> 00:25:39,409
because you want to make an entire

594
00:25:36,799 --> 00:25:43,759
namespace public like you would make a

595
00:25:39,409 --> 00:25:45,499
github account like every repo in every

596
00:25:43,759 --> 00:25:47,210
bone account kind of thing the account

597
00:25:45,499 --> 00:25:52,190
would be equivalent to a bucket so yes

598
00:25:47,210 --> 00:25:53,900
but very few okay that is it thank you

599
00:25:52,190 --> 00:25:59,439
very much

600
00:25:53,900 --> 00:25:59,439
[Applause]

