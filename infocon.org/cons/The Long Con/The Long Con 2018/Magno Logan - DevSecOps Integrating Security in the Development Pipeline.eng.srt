1
00:00:08,200 --> 00:00:12,059
[Applause]

2
00:00:14,059 --> 00:00:24,090
hi everyone good morning who here has

3
00:00:20,189 --> 00:00:27,390
heard about that sack ops before your

4
00:00:24,090 --> 00:00:30,110
hands who here actually understand what

5
00:00:27,390 --> 00:00:30,110
it means okay

6
00:00:31,110 --> 00:00:39,300
yeah to that so yeah

7
00:00:36,180 --> 00:00:42,479
my name is Megan oh also known as magna

8
00:00:39,300 --> 00:00:46,229
Logan I'm not from here

9
00:00:42,479 --> 00:00:47,010
right I'm from Brazil so a few

10
00:00:46,229 --> 00:00:49,199
disclaimers

11
00:00:47,010 --> 00:00:50,970
sorry for my English if you don't

12
00:00:49,199 --> 00:00:56,729
understand something that I say you can

13
00:00:50,970 --> 00:01:00,239
ask me later no problem so yeah I focus

14
00:00:56,729 --> 00:01:03,330
a lot of application security I have a

15
00:01:00,239 --> 00:01:05,880
developer background I'm currently

16
00:01:03,330 --> 00:01:08,429
working for skip delicious security

17
00:01:05,880 --> 00:01:12,320
analyst right we have a few positions

18
00:01:08,430 --> 00:01:16,770
available I've spoken at a few

19
00:01:12,320 --> 00:01:18,660
conferences in Brazil I found it was

20
00:01:16,770 --> 00:01:21,660
chapter there and organize a security

21
00:01:18,660 --> 00:01:27,259
confess there as well so yeah that's my

22
00:01:21,660 --> 00:01:31,860
main focus right now I'm originally from

23
00:01:27,260 --> 00:01:38,610
City College on pessoa so if you visit

24
00:01:31,860 --> 00:01:42,200
there just talk to me okay so software

25
00:01:38,610 --> 00:01:46,860
development for me I believe it's like

26
00:01:42,200 --> 00:01:50,700
MMO RPG game so it never ends so you're

27
00:01:46,860 --> 00:01:53,520
always trying to create new features fix

28
00:01:50,700 --> 00:01:55,800
bugs and improve your software so it's

29
00:01:53,520 --> 00:01:57,089
the same thing like the game your try

30
00:01:55,800 --> 00:01:59,789
always trying to improve your character

31
00:01:57,090 --> 00:02:03,120
and doing quests and stuff so I think

32
00:01:59,790 --> 00:02:06,540
that's a good analogy but the problem is

33
00:02:03,120 --> 00:02:09,390
that security usually becomes a

34
00:02:06,540 --> 00:02:14,879
bottleneck when we try to ship code and

35
00:02:09,389 --> 00:02:17,339
create software faster right so if in

36
00:02:14,879 --> 00:02:22,459
the current state and like the agile

37
00:02:17,340 --> 00:02:24,120
methodology that we're using we can't be

38
00:02:22,459 --> 00:02:25,950
doing that anymore

39
00:02:24,120 --> 00:02:28,530
otherwise the company won't make money

40
00:02:25,950 --> 00:02:30,298
right if we take like two weeks three

41
00:02:28,530 --> 00:02:33,060
weeks to do a pen testing and provide

42
00:02:30,299 --> 00:02:35,489
some results that's not feasible for a

43
00:02:33,060 --> 00:02:39,530
company that's deploying software every

44
00:02:35,489 --> 00:02:42,780
day in production right so yeah that was

45
00:02:39,530 --> 00:02:45,450
first it was a waterfall methodology for

46
00:02:42,780 --> 00:02:48,510
create writing code and developing

47
00:02:45,450 --> 00:02:51,510
software and that was a slower process

48
00:02:48,510 --> 00:02:55,140
so that was a scepter before acceptable

49
00:02:51,510 --> 00:02:58,349
before but now everything became a gyro

50
00:02:55,140 --> 00:03:01,890
and it's like we also need to adapt

51
00:02:58,349 --> 00:03:03,390
ourselves to follow the pace of the

52
00:03:01,890 --> 00:03:08,279
developers and the development lifecycle

53
00:03:03,390 --> 00:03:14,730
so we can ship code faster but in a

54
00:03:08,280 --> 00:03:17,040
secure manner right so if you ever took

55
00:03:14,730 --> 00:03:19,890
a like a programming course or developer

56
00:03:17,040 --> 00:03:22,828
course in college or somewhere you

57
00:03:19,890 --> 00:03:24,420
always try to make yourself to work you

58
00:03:22,829 --> 00:03:26,819
don't sometimes you don't know how it

59
00:03:24,420 --> 00:03:29,220
works and it's like you don't care a lot

60
00:03:26,819 --> 00:03:33,290
of about security so if it was it's

61
00:03:29,220 --> 00:03:37,310
working ship it right but that's not

62
00:03:33,290 --> 00:03:37,310
acceptable anymore right

63
00:03:37,530 --> 00:03:43,109
and we tend to think that developers are

64
00:03:39,900 --> 00:03:44,849
not worried about security and usually

65
00:03:43,109 --> 00:03:48,090
they are they just don't have the proper

66
00:03:44,849 --> 00:03:49,440
training they never learn about security

67
00:03:48,090 --> 00:03:58,889
coding right they learn about

68
00:03:49,440 --> 00:04:03,620
programming so usually that's a problem

69
00:03:58,889 --> 00:04:07,169
that happens in companies before where

70
00:04:03,620 --> 00:04:09,239
the developer wrote their code and it

71
00:04:07,169 --> 00:04:11,430
works in in their machine or in the

72
00:04:09,239 --> 00:04:13,290
developer environment and then they ship

73
00:04:11,430 --> 00:04:15,540
it to production and it doesn't work

74
00:04:13,290 --> 00:04:17,339
there maybe because it's consuming a lot

75
00:04:15,540 --> 00:04:19,289
of memory it's breaking somewhere it's

76
00:04:17,339 --> 00:04:22,849
it's missing a dependency or something

77
00:04:19,289 --> 00:04:26,039
so that why the DevOps

78
00:04:22,849 --> 00:04:28,590
culture or methodology was created too

79
00:04:26,039 --> 00:04:31,229
tight try to integrate integrate those

80
00:04:28,590 --> 00:04:33,599
teams so they can better work together

81
00:04:31,229 --> 00:04:37,539
and cheap software faster right and

82
00:04:33,599 --> 00:04:40,640
create value to the company

83
00:04:37,540 --> 00:04:45,020
so yeah just a few things about DevOps

84
00:04:40,640 --> 00:04:47,349
right focus a lot on automation right

85
00:04:45,020 --> 00:04:49,430
and the integration of those teams and

86
00:04:47,350 --> 00:04:51,860
one of the things that I think it's

87
00:04:49,430 --> 00:04:54,470
important it's increasing the feedback

88
00:04:51,860 --> 00:04:56,810
so everything that you do you receive a

89
00:04:54,470 --> 00:04:59,060
feedback if it's okay or not from the

90
00:04:56,810 --> 00:05:01,430
tools that you're using so you can keep

91
00:04:59,060 --> 00:05:04,130
going otherwise if you see a problem you

92
00:05:01,430 --> 00:05:06,290
can fix right away so break something

93
00:05:04,130 --> 00:05:08,120
something like okay break the build if

94
00:05:06,290 --> 00:05:11,390
there is a vulnerability or something

95
00:05:08,120 --> 00:05:13,430
right but a lot of companies that are

96
00:05:11,390 --> 00:05:17,450
doing the evokes they are not focusing

97
00:05:13,430 --> 00:05:21,140
on security although some authors Rd

98
00:05:17,450 --> 00:05:24,250
that security is already included in the

99
00:05:21,140 --> 00:05:28,690
develops culture and it's part of it

100
00:05:24,250 --> 00:05:39,470
they are not really focused on it so

101
00:05:28,690 --> 00:05:45,290
what about security not working okay

102
00:05:39,470 --> 00:05:47,990
good sorry so it has been proven that if

103
00:05:45,290 --> 00:05:49,850
you find vulnerabilities on the early

104
00:05:47,990 --> 00:05:54,050
stages of the software lifecycle right

105
00:05:49,850 --> 00:05:57,560
it's easier and also cheaper to fix

106
00:05:54,050 --> 00:06:02,390
those bugs so why we're not doing that

107
00:05:57,560 --> 00:06:04,760
yet on every code that we write right so

108
00:06:02,390 --> 00:06:07,640
I think that that's why was the the new

109
00:06:04,760 --> 00:06:10,159
name the apps I copped was created to

110
00:06:07,640 --> 00:06:13,760
emphasize the need for security in this

111
00:06:10,160 --> 00:06:17,450
new culture change and methodology

112
00:06:13,760 --> 00:06:19,640
called DevOps right there are many

113
00:06:17,450 --> 00:06:23,300
different names I think that they mean

114
00:06:19,640 --> 00:06:25,370
basically the same thing so there are

115
00:06:23,300 --> 00:06:28,010
some discussions about it I won't get

116
00:06:25,370 --> 00:06:30,830
into that in this talk but I think it's

117
00:06:28,010 --> 00:06:34,730
important to to know about them but I

118
00:06:30,830 --> 00:06:37,969
think yeah basically the main goal here

119
00:06:34,730 --> 00:06:40,780
is try to integrate security in the

120
00:06:37,970 --> 00:06:40,780
development lifecycle

121
00:06:46,800 --> 00:06:56,410
so yeah the main goal of the black ops

122
00:06:52,120 --> 00:06:58,660
is making sure that this automation and

123
00:06:56,410 --> 00:07:00,940
this integration with the developments

124
00:06:58,660 --> 00:07:04,330
and the operations are done in a secure

125
00:07:00,940 --> 00:07:07,150
way and one way that we can do that it's

126
00:07:04,330 --> 00:07:12,580
using the shifting security left

127
00:07:07,150 --> 00:07:15,130
approach where we perform testing since

128
00:07:12,580 --> 00:07:16,870
the early stages of the lifecycle right

129
00:07:15,130 --> 00:07:19,659
most of the companies test for

130
00:07:16,870 --> 00:07:24,580
vulnerabilities after the application is

131
00:07:19,660 --> 00:07:27,630
deployed like a dynamic testing a good

132
00:07:24,580 --> 00:07:29,830
way to start shifting security left

133
00:07:27,630 --> 00:07:34,030
explaining security from the beginning

134
00:07:29,830 --> 00:07:36,010
and creating security requirements for

135
00:07:34,030 --> 00:07:39,460
the software that you are creating and

136
00:07:36,010 --> 00:07:41,230
even you can also like participate on a

137
00:07:39,460 --> 00:07:44,500
spring planning meetings from your

138
00:07:41,230 --> 00:07:46,480
development team and suggest some

139
00:07:44,500 --> 00:07:52,590
security features that should be added

140
00:07:46,480 --> 00:07:52,590
there as well so yeah I think that

141
00:07:53,220 --> 00:08:00,100
creating and testing for security at

142
00:07:56,950 --> 00:08:04,570
each stage it's an important thing to do

143
00:08:00,100 --> 00:08:07,060
and will help you to find issues faster

144
00:08:04,570 --> 00:08:13,599
and earlier and it's gonna cost you less

145
00:08:07,060 --> 00:08:16,450
to fix those so two weeks ago very code

146
00:08:13,600 --> 00:08:20,170
released the state of software security

147
00:08:16,450 --> 00:08:22,840
report it has a lot of interesting

148
00:08:20,170 --> 00:08:24,970
information if you from app sack but I

149
00:08:22,840 --> 00:08:28,619
think the main the main thing would be

150
00:08:24,970 --> 00:08:32,500
this graphic here proving that

151
00:08:28,620 --> 00:08:36,370
applications that scan their code more

152
00:08:32,500 --> 00:08:38,980
frequent they fit their the they're

153
00:08:36,370 --> 00:08:40,870
fixed rates are higher so you can if you

154
00:08:38,980 --> 00:08:43,420
were if the developer seen that issue

155
00:08:40,870 --> 00:08:45,490
over and over again he wants to get rid

156
00:08:43,419 --> 00:08:49,599
of that issue and he's gonna fix that

157
00:08:45,490 --> 00:08:52,420
right away so it relates the screen free

158
00:08:49,600 --> 00:08:54,220
frequency with DevOps right so if you

159
00:08:52,420 --> 00:08:55,870
usually if you're scanning your cone

160
00:08:54,220 --> 00:08:57,790
like 300 times

161
00:08:55,870 --> 00:09:01,450
you're probably doing that automatic

162
00:08:57,790 --> 00:09:03,969
automatically I hope so yeah this just

163
00:09:01,450 --> 00:09:06,040
proved that deaths a cops can increase

164
00:09:03,970 --> 00:09:09,580
the fixed rate right because I think

165
00:09:06,040 --> 00:09:15,189
that just finding the vulnerabilities or

166
00:09:09,580 --> 00:09:18,130
not interesting not enough sorry so you

167
00:09:15,190 --> 00:09:21,040
have to understand how to fix the code

168
00:09:18,130 --> 00:09:23,410
on the custom application or to prove

169
00:09:21,040 --> 00:09:25,510
not just like send your developers a

170
00:09:23,410 --> 00:09:27,730
link of the vulnerability and here is a

171
00:09:25,510 --> 00:09:30,339
generic way to fix it right if they

172
00:09:27,730 --> 00:09:37,300
don't understand security very well they

173
00:09:30,339 --> 00:09:39,040
won't be able to fix it by themselves so

174
00:09:37,300 --> 00:09:42,609
yeah I think it's there are a lot of

175
00:09:39,040 --> 00:09:46,630
discussions and different architectures

176
00:09:42,610 --> 00:09:48,400
that what you should be doing to say to

177
00:09:46,630 --> 00:09:52,930
be able to say that you are doing the a

178
00:09:48,400 --> 00:09:55,089
cops from my upset perspective I'm gonna

179
00:09:52,930 --> 00:10:01,870
talk about three things that I think

180
00:09:55,089 --> 00:10:04,600
it's important so yeah automation using

181
00:10:01,870 --> 00:10:06,820
a lot of tools available for you to

182
00:10:04,600 --> 00:10:09,250
automate some of those security checks

183
00:10:06,820 --> 00:10:11,740
right now and implementing them into

184
00:10:09,250 --> 00:10:13,839
your development pipeline first thing

185
00:10:11,740 --> 00:10:16,150
that would say is make sure that you

186
00:10:13,839 --> 00:10:18,250
understand and know what are the tools

187
00:10:16,150 --> 00:10:21,069
that your developers are using like the

188
00:10:18,250 --> 00:10:24,610
code repository the ticketing system the

189
00:10:21,070 --> 00:10:27,940
CI - so that you can use that and

190
00:10:24,610 --> 00:10:30,940
integrate that directly in there - so

191
00:10:27,940 --> 00:10:32,830
that it doesn't there is an overhead of

192
00:10:30,940 --> 00:10:37,690
new tools that they need to learn and

193
00:10:32,830 --> 00:10:40,810
use to do the apps AQAP's so there is

194
00:10:37,690 --> 00:10:42,640
this company that releases a periodic

195
00:10:40,810 --> 00:10:45,430
table of DevOps tools that I think it's

196
00:10:42,640 --> 00:10:48,939
really nice and there are some security

197
00:10:45,430 --> 00:10:52,239
tools here on the bottom right that you

198
00:10:48,940 --> 00:10:54,430
can use these are not the only ones but

199
00:10:52,240 --> 00:10:56,580
there is more so yeah I think this is

200
00:10:54,430 --> 00:10:56,579
interesting

201
00:10:58,650 --> 00:11:02,980
so from an application security

202
00:11:00,880 --> 00:11:05,320
perspective I think that three main

203
00:11:02,980 --> 00:11:08,380
techniques or tools that you should have

204
00:11:05,320 --> 00:11:11,170
on your pipeline

205
00:11:08,380 --> 00:11:14,470
are these free software composition

206
00:11:11,170 --> 00:11:16,180
analysis that it's basically a to that

207
00:11:14,470 --> 00:11:19,060
it scans your libraries or your

208
00:11:16,180 --> 00:11:23,380
third-party code and checks for outdated

209
00:11:19,060 --> 00:11:25,930
versions or vulnerabilities so usually

210
00:11:23,380 --> 00:11:29,170
most most of the the code that we have

211
00:11:25,930 --> 00:11:32,410
now in our software are third-party our

212
00:11:29,170 --> 00:11:35,199
dependencies right so that's a good

213
00:11:32,410 --> 00:11:37,540
thing the other one is static analysis

214
00:11:35,200 --> 00:11:40,270
or static abstract testing sassed it

215
00:11:37,540 --> 00:11:43,300
scans the custom code that your

216
00:11:40,270 --> 00:11:45,939
developers are writing and the other one

217
00:11:43,300 --> 00:11:50,760
is - dynamic abstract testing that

218
00:11:45,940 --> 00:11:54,190
that's the running application right

219
00:11:50,760 --> 00:11:56,890
usually people only do the last one and

220
00:11:54,190 --> 00:12:00,580
it's either start doing with the last

221
00:11:56,890 --> 00:12:04,030
one and I think the order here is it's

222
00:12:00,580 --> 00:12:05,890
wrong you should start first with the

223
00:12:04,030 --> 00:12:09,959
software composition analysis and I'm

224
00:12:05,890 --> 00:12:09,960
gonna tell you a little bit about it so

225
00:12:11,340 --> 00:12:19,120
some guys from os did arisia research a

226
00:12:15,790 --> 00:12:22,390
few years ago and they they verify that

227
00:12:19,120 --> 00:12:24,250
almost 95% of the applications include

228
00:12:22,390 --> 00:12:26,530
any some kind of open source rights

229
00:12:24,250 --> 00:12:29,680
either a library or import or something

230
00:12:26,530 --> 00:12:32,110
that you use in your code and almost is

231
00:12:29,680 --> 00:12:35,050
almost 70 percent of those applications

232
00:12:32,110 --> 00:12:39,880
contain some kind of vulnerabilities

233
00:12:35,050 --> 00:12:41,890
right and that's why I see a - is

234
00:12:39,880 --> 00:12:43,840
important that's gonna check for the

235
00:12:41,890 --> 00:12:46,420
components that you're using if they're

236
00:12:43,840 --> 00:12:51,520
outdated right you don't want to be the

237
00:12:46,420 --> 00:12:55,900
next Equifax so one thing to be - to

238
00:12:51,520 --> 00:12:58,630
note here it's that a tool like that

239
00:12:55,900 --> 00:13:01,120
will check not just for the penances

240
00:12:58,630 --> 00:13:03,730
that you have but also for the indirect

241
00:13:01,120 --> 00:13:05,410
dependencies it means that the penances

242
00:13:03,730 --> 00:13:07,120
of the dependencies that you're using so

243
00:13:05,410 --> 00:13:09,670
that's something that's hard to do

244
00:13:07,120 --> 00:13:16,210
manually so you probably need a tool for

245
00:13:09,670 --> 00:13:19,920
that there are a few tools that you can

246
00:13:16,210 --> 00:13:22,150
use the pennies checks from a space free

247
00:13:19,920 --> 00:13:25,270
you can use mostly on

248
00:13:22,150 --> 00:13:27,610
like Java and.net applications but there

249
00:13:25,270 --> 00:13:30,970
is another one called Nick if the dog

250
00:13:27,610 --> 00:13:32,860
there that checks for open source code

251
00:13:30,970 --> 00:13:36,220
so you can directly integrate that on

252
00:13:32,860 --> 00:13:39,610
your github and check your github

253
00:13:36,220 --> 00:13:42,760
repositories for vulnerabilities there

254
00:13:39,610 --> 00:13:46,210
on the dependencies that he'll have the

255
00:13:42,760 --> 00:13:48,760
link below there it's about a talk made

256
00:13:46,210 --> 00:13:51,820
by another Brazilian it's in English as

257
00:13:48,760 --> 00:13:55,090
well so he analyzes those tools and

258
00:13:51,820 --> 00:13:57,700
compares them with like a few features

259
00:13:55,090 --> 00:14:00,430
and which one would be better for each

260
00:13:57,700 --> 00:14:04,950
scenario so I think if you wanna use one

261
00:14:00,430 --> 00:14:04,949
of those check that presentation as well

262
00:14:05,850 --> 00:14:12,220
so about the pinnace check from oh it's

263
00:14:08,800 --> 00:14:18,250
a project by a wasp everyone here knows

264
00:14:12,220 --> 00:14:21,010
about wasp can you okay yeah so yeah it

265
00:14:18,250 --> 00:14:25,060
checks for the penises and basically

266
00:14:21,010 --> 00:14:27,430
checks for the any VD database if the

267
00:14:25,060 --> 00:14:29,109
library is out there or if it has a non

268
00:14:27,430 --> 00:14:32,140
vulnerability right

269
00:14:29,110 --> 00:14:35,380
it has plug-ins for maven Jenkins and

270
00:14:32,140 --> 00:14:38,770
everything so you can try using that on

271
00:14:35,380 --> 00:14:44,410
your own your code to check for those

272
00:14:38,770 --> 00:14:47,590
libraries another thing that you should

273
00:14:44,410 --> 00:14:51,790
have on your pipeline it's a static

274
00:14:47,590 --> 00:14:53,470
analysis and it scans the custom code

275
00:14:51,790 --> 00:14:57,400
that you have in your applications

276
00:14:53,470 --> 00:15:00,490
it checks for vulnerabilities there some

277
00:14:57,400 --> 00:15:02,250
vulnerabilities are easier to find when

278
00:15:00,490 --> 00:15:07,050
you have access to the source code right

279
00:15:02,250 --> 00:15:09,700
it provides specific information about

280
00:15:07,050 --> 00:15:12,550
what the problem is what it's located

281
00:15:09,700 --> 00:15:16,210
and how to fix it sometimes it gives you

282
00:15:12,550 --> 00:15:19,839
like a data flow and provides you the

283
00:15:16,210 --> 00:15:22,870
best place to fix to apply the fix and

284
00:15:19,840 --> 00:15:26,470
it's gonna replicate that fiction all

285
00:15:22,870 --> 00:15:29,050
over your code so that's nice there are

286
00:15:26,470 --> 00:15:33,400
a lot of tools out there that do that

287
00:15:29,050 --> 00:15:34,649
already like very code white hat so but

288
00:15:33,400 --> 00:15:37,769
I think a good

289
00:15:34,649 --> 00:15:40,290
that's also free but it might not be

290
00:15:37,769 --> 00:15:41,550
considered a static analysis but it's

291
00:15:40,290 --> 00:15:45,420
good it's a good start

292
00:15:41,550 --> 00:15:48,149
it's a sonic qube it checks for the code

293
00:15:45,420 --> 00:15:50,729
quality of the quality of your code and

294
00:15:48,149 --> 00:15:53,790
it does some security checks

295
00:15:50,730 --> 00:15:55,679
mostly for Java applications but it's a

296
00:15:53,790 --> 00:15:58,769
good way to start introducing secure

297
00:15:55,679 --> 00:16:03,600
coding for your labs so you won't create

298
00:15:58,769 --> 00:16:05,639
a lot of friction so when you start when

299
00:16:03,600 --> 00:16:08,699
you implement another specifics as to

300
00:16:05,639 --> 00:16:11,459
write it integrate with a lot of CI ICD

301
00:16:08,699 --> 00:16:15,118
tools each each also checks for like

302
00:16:11,459 --> 00:16:18,138
code coverage and it has something

303
00:16:15,119 --> 00:16:21,480
called code smells so it tells you like

304
00:16:18,139 --> 00:16:23,610
this code doesn't look really well

305
00:16:21,480 --> 00:16:26,399
implemented it might cause some problems

306
00:16:23,610 --> 00:16:28,589
it's not a security issue right now but

307
00:16:26,399 --> 00:16:34,499
you should take a look so I think that's

308
00:16:28,589 --> 00:16:36,600
that's interesting and there is the

309
00:16:34,499 --> 00:16:40,740
dynamic dynamic app socket testing right

310
00:16:36,600 --> 00:16:44,550
that the the one that you run when your

311
00:16:40,740 --> 00:16:47,699
application is deployed most companies

312
00:16:44,550 --> 00:16:50,939
you only do this right and there are a

313
00:16:47,699 --> 00:16:52,800
lot of tools available on the market but

314
00:16:50,939 --> 00:16:54,929
be careful with false positives right

315
00:16:52,800 --> 00:16:58,498
you don't want to run one tool like this

316
00:16:54,929 --> 00:17:01,410
and just generate a PDF report and give

317
00:16:58,499 --> 00:17:03,509
you to your developers right you should

318
00:17:01,410 --> 00:17:06,329
also check if the vulnerabilities are

319
00:17:03,509 --> 00:17:10,579
not false positives and make sure that

320
00:17:06,329 --> 00:17:13,168
focus on the critical ones first and

321
00:17:10,579 --> 00:17:15,898
also I think that if you have to choose

322
00:17:13,169 --> 00:17:18,839
between SAST and DAST I think sass would

323
00:17:15,898 --> 00:17:20,879
be a better approach because since you

324
00:17:18,839 --> 00:17:23,490
have access to the source code you have

325
00:17:20,880 --> 00:17:26,250
a way to find more vulnerabilities and

326
00:17:23,490 --> 00:17:29,370
you can check use us earlier in the life

327
00:17:26,250 --> 00:17:34,380
cycle so the bugs that you found are

328
00:17:29,370 --> 00:17:35,729
probably gonna be cheaper to fix so one

329
00:17:34,380 --> 00:17:41,159
of the tools that I like to talk about

330
00:17:35,730 --> 00:17:44,179
is OS app it's a it's a proxy to do

331
00:17:41,159 --> 00:17:47,630
mostly Maino testing on web applications

332
00:17:44,179 --> 00:17:49,430
but it has some automation as well

333
00:17:47,630 --> 00:17:53,060
automated features as well so you can do

334
00:17:49,430 --> 00:17:57,350
automated scanning and you can integrate

335
00:17:53,060 --> 00:17:58,940
that in your CI too since it has an API

336
00:17:57,350 --> 00:18:02,899
and everything and also plug-ins for

337
00:17:58,940 --> 00:18:05,690
Jenkins so you can run it before

338
00:18:02,900 --> 00:18:08,300
after a Beauty generated and you can

339
00:18:05,690 --> 00:18:16,460
already check for a few security issues

340
00:18:08,300 --> 00:18:19,040
there so this is like desired depths a

341
00:18:16,460 --> 00:18:22,250
cop's pipeline with a few tools on each

342
00:18:19,040 --> 00:18:26,780
each phase I think it's interesting to

343
00:18:22,250 --> 00:18:29,630
show here that it's not like something

344
00:18:26,780 --> 00:18:37,600
that fits on every company you should

345
00:18:29,630 --> 00:18:41,660
adapt for your your company as well and

346
00:18:37,600 --> 00:18:45,590
for my last remarks or like dads are not

347
00:18:41,660 --> 00:18:48,640
security as experts we need to train

348
00:18:45,590 --> 00:18:51,290
them and make sure that they understand

349
00:18:48,640 --> 00:18:54,770
the impact and the vulnerabilities that

350
00:18:51,290 --> 00:18:56,540
you found try to make security as much

351
00:18:54,770 --> 00:19:00,980
part of the development process as

352
00:18:56,540 --> 00:19:04,730
writing code it has to be transparent

353
00:19:00,980 --> 00:19:06,740
right so if you can't be asking the

354
00:19:04,730 --> 00:19:09,860
developers to run a bunch of security

355
00:19:06,740 --> 00:19:13,070
tools for you so that's why automation

356
00:19:09,860 --> 00:19:16,550
is important another thing is that

357
00:19:13,070 --> 00:19:19,610
nobody likes bugs right maybe ours

358
00:19:16,550 --> 00:19:21,590
security experts were not developers it

359
00:19:19,610 --> 00:19:25,159
makes them look bad right when you bring

360
00:19:21,590 --> 00:19:28,340
the a lot like a PDF report with a lot

361
00:19:25,160 --> 00:19:32,450
of vulnerabilities especially in a PDF

362
00:19:28,340 --> 00:19:34,939
format right I think another thing

363
00:19:32,450 --> 00:19:38,060
that's really important it's try to

364
00:19:34,940 --> 00:19:40,520
become the developers best friend and

365
00:19:38,060 --> 00:19:43,129
they will help you without even knowing

366
00:19:40,520 --> 00:19:45,590
that's something that we call the

367
00:19:43,130 --> 00:19:51,100
security champions so usually there is

368
00:19:45,590 --> 00:19:53,510
like 1 to 100 ratio between security

369
00:19:51,100 --> 00:19:57,800
analysts and developers in most

370
00:19:53,510 --> 00:20:00,500
companies right so you have to recruit

371
00:19:57,800 --> 00:20:01,490
more people for your team to help you

372
00:20:00,500 --> 00:20:03,940
with the security

373
00:20:01,490 --> 00:20:06,559
shoes so I think that's a good way to

374
00:20:03,940 --> 00:20:10,429
implement security over all your

375
00:20:06,559 --> 00:20:12,860
organization and also remembers remember

376
00:20:10,429 --> 00:20:16,640
what matters to the business and try to

377
00:20:12,860 --> 00:20:18,949
balance security with features right we

378
00:20:16,640 --> 00:20:21,410
we can't implement all the security

379
00:20:18,950 --> 00:20:25,880
features we want because sometimes it's

380
00:20:21,410 --> 00:20:28,540
gonna make the business stop working

381
00:20:25,880 --> 00:20:32,780
I think that's it that I have for today

382
00:20:28,540 --> 00:20:35,570
here the reference and links and if you

383
00:20:32,780 --> 00:20:37,928
have any questions we have two five

384
00:20:35,570 --> 00:20:37,928
minutes

385
00:20:39,460 --> 00:20:51,440
no questions okay thank you

386
00:20:44,030 --> 00:20:51,440
[Applause]

