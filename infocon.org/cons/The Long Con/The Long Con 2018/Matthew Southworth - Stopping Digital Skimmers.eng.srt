1
00:00:07,950 --> 00:00:17,980
hi folks I'm Matt Winnipeg is awesome

2
00:00:13,770 --> 00:00:20,259
but it's freezing up here and notable

3
00:00:17,980 --> 00:00:23,230
because three layers down I have a

4
00:00:20,260 --> 00:00:24,640
b-sides New York City sort on if you've

5
00:00:23,230 --> 00:00:28,840
never been to b-sides in New York you

6
00:00:24,640 --> 00:00:30,849
should come sometime it is fantastic mmm

7
00:00:28,840 --> 00:00:31,779
I have a New York centric Twitter handle

8
00:00:30,849 --> 00:00:33,580
because that's where I lived when

9
00:00:31,779 --> 00:00:36,040
Twitter started and you could still get

10
00:00:33,580 --> 00:00:40,449
the five character handles that doesn't

11
00:00:36,040 --> 00:00:42,280
work anymore either I'm on the security

12
00:00:40,450 --> 00:00:45,550
team at a company where the local office

13
00:00:42,280 --> 00:00:47,079
called Priceline and I'm neither a pen

14
00:00:45,550 --> 00:00:51,010
tester nor developer I just know enough

15
00:00:47,079 --> 00:00:53,800
to cause some trouble this is a

16
00:00:51,010 --> 00:00:56,800
discussion of what are called online

17
00:00:53,800 --> 00:00:59,890
skimmers you may have heard of the mage

18
00:00:56,800 --> 00:01:02,620
cart attacks earlier this year that hit

19
00:00:59,890 --> 00:01:06,910
companies like a new egg British Airways

20
00:01:02,620 --> 00:01:09,550
and Ticketmaster in the UK these are

21
00:01:06,910 --> 00:01:11,770
pretty advanced attacks the adversaries

22
00:01:09,550 --> 00:01:15,009
also target the Magento shopping cart

23
00:01:11,770 --> 00:01:18,158
system I'm gonna talk a little bit about

24
00:01:15,009 --> 00:01:19,750
where the attacks come from how they get

25
00:01:18,159 --> 00:01:23,470
into your system and some potential

26
00:01:19,750 --> 00:01:25,560
protections so everyone knows what the

27
00:01:23,470 --> 00:01:28,630
old-school credit card skimmer is right

28
00:01:25,560 --> 00:01:31,030
a piece of hardware that you put on an

29
00:01:28,630 --> 00:01:33,970
old card reader like in the states where

30
00:01:31,030 --> 00:01:36,579
they still have the mag stripes and it

31
00:01:33,970 --> 00:01:39,310
either copies the stripe data off of the

32
00:01:36,579 --> 00:01:41,439
card and stores it locally or sends it

33
00:01:39,310 --> 00:01:43,750
back home with a cell modem in either

34
00:01:41,439 --> 00:01:45,789
case the results the same someone is

35
00:01:43,750 --> 00:01:49,270
buying a lot of flat-screen TVs with

36
00:01:45,790 --> 00:01:51,579
your credit card number because of chip

37
00:01:49,270 --> 00:01:53,979
and pin chip and sign these attacks have

38
00:01:51,579 --> 00:01:57,758
gotten less effective so the same actors

39
00:01:53,979 --> 00:01:59,469
have taken their attacks online this is

40
00:01:57,759 --> 00:02:01,600
some example JavaScript that was found

41
00:01:59,469 --> 00:02:03,548
in the wild on one of those companies I

42
00:02:01,600 --> 00:02:06,640
mentioned slightly modified for our

43
00:02:03,549 --> 00:02:07,420
presentation and this what twelve lines

44
00:02:06,640 --> 00:02:10,600
or something

45
00:02:07,420 --> 00:02:13,930
we'll grab credit card data and send it

46
00:02:10,600 --> 00:02:16,090
off to a malicious third party so this

47
00:02:13,930 --> 00:02:19,110
the code somehow gets injected into the

48
00:02:16,090 --> 00:02:23,079
side we'll talk about how that happens

49
00:02:19,110 --> 00:02:25,629
sits in wait until the customer its

50
00:02:23,079 --> 00:02:28,530
submit or does something that involves

51
00:02:25,629 --> 00:02:31,390
sensitive data then it fires off and

52
00:02:28,530 --> 00:02:33,549
sends a copy of all of your data to a

53
00:02:31,390 --> 00:02:35,890
third-party website for the purposes of

54
00:02:33,549 --> 00:02:39,189
our demonstration we're using this cloud

55
00:02:35,890 --> 00:02:41,018
CDN ddns net skimming pre-tin that's a

56
00:02:39,189 --> 00:02:42,549
malicious website it's actually running

57
00:02:41,019 --> 00:02:47,170
on my buddy's wife raspberry pi right

58
00:02:42,549 --> 00:02:50,859
now so please don't crash it so this is

59
00:02:47,170 --> 00:02:52,510
a black skimmer it's native to I don't

60
00:02:50,859 --> 00:02:54,819
know the southeastern coast in the US

61
00:02:52,510 --> 00:02:56,679
it's got this weird under bright bill

62
00:02:54,819 --> 00:02:58,689
and it can fly through the water and

63
00:02:56,680 --> 00:03:10,810
scoop up fish and that is my

64
00:02:58,689 --> 00:03:15,760
transitional slide it's the griddle okay

65
00:03:10,810 --> 00:03:17,349
and my hands will shake so I'm just

66
00:03:15,760 --> 00:03:20,138
going to play the video and talk you

67
00:03:17,349 --> 00:03:21,459
through it this is set up without a CSP

68
00:03:20,139 --> 00:03:24,159
don't worry I'll explain to you what

69
00:03:21,459 --> 00:03:26,949
that is later you can see it's the

70
00:03:24,159 --> 00:03:28,540
riddle we are buying jokes here and down

71
00:03:26,949 --> 00:03:30,790
here will scroll up this is the same

72
00:03:28,540 --> 00:03:32,290
malicious code I showed you earlier it's

73
00:03:30,790 --> 00:03:33,940
running in the background on this

74
00:03:32,290 --> 00:03:36,129
website it's loaded somehow in the

75
00:03:33,940 --> 00:03:38,620
browser and you can see again the

76
00:03:36,129 --> 00:03:41,858
malicious domain cloud CDN slash

77
00:03:38,620 --> 00:03:43,449
skimming customer comes in here gives

78
00:03:41,859 --> 00:03:45,400
his name he's found the jokes he wants

79
00:03:43,449 --> 00:03:48,729
puts in his very valid credit card

80
00:03:45,400 --> 00:03:53,290
number it passes a lung check puts in

81
00:03:48,729 --> 00:03:59,519
the submits it this is our post checkout

82
00:03:53,290 --> 00:04:03,220
page right action page PHP that Paul so

83
00:03:59,519 --> 00:04:06,010
Mike the last speaker before dinner had

84
00:04:03,220 --> 00:04:08,079
a lot of great tips in burp and burp is

85
00:04:06,010 --> 00:04:10,298
my comfort zone I love working with the

86
00:04:08,079 --> 00:04:11,859
intercepting proxy so my challenge for

87
00:04:10,299 --> 00:04:13,449
myself for this talk was to do

88
00:04:11,859 --> 00:04:15,579
everything in the chrome inspector pane

89
00:04:13,449 --> 00:04:17,669
so I'm not flipping back and forth and

90
00:04:15,579 --> 00:04:21,639
it's amazing what you can get out there

91
00:04:17,668 --> 00:04:23,948
so in the inspector pane you see we

92
00:04:21,639 --> 00:04:25,599
posted to action page with the check out

93
00:04:23,949 --> 00:04:29,020
data as you would expect

94
00:04:25,599 --> 00:04:31,719
got a 200 back this is our legitimate

95
00:04:29,020 --> 00:04:32,568
domain where we're selling jokes and you

96
00:04:31,719 --> 00:04:34,129
can see we posted

97
00:04:32,569 --> 00:04:36,259
all the data just like you'd expect with

98
00:04:34,129 --> 00:04:38,059
a very basic online shopping cart all

99
00:04:36,259 --> 00:04:41,059
that data gets posted home to the

100
00:04:38,059 --> 00:04:44,449
website but you can see that the browser

101
00:04:41,059 --> 00:04:47,059
also made a connection to cloud CDN our

102
00:04:44,449 --> 00:04:50,240
malicious site posted up more data to

103
00:04:47,059 --> 00:04:52,909
that endpoint and when we roll down

104
00:04:50,240 --> 00:04:55,459
you'll see it took all of the form data

105
00:04:52,909 --> 00:04:58,219
made a nice serialize a JSON object here

106
00:04:55,459 --> 00:05:00,349
and sent it on as well all the credit

107
00:04:58,219 --> 00:05:02,179
card data on the site was stolen this is

108
00:05:00,349 --> 00:05:07,938
the exact attack that hit one of those

109
00:05:02,179 --> 00:05:10,058
companies I mentioned before you don't

110
00:05:07,939 --> 00:05:14,330
need to see it again please skip skip

111
00:05:10,059 --> 00:05:17,080
okay so these attacks rely on very

112
00:05:14,330 --> 00:05:19,279
little code that's super simple right

113
00:05:17,080 --> 00:05:20,869
typically they fire only on the checkout

114
00:05:19,279 --> 00:05:24,469
page you don't need it everywhere and

115
00:05:20,869 --> 00:05:28,069
they siphon the data off to a malicious

116
00:05:24,469 --> 00:05:30,679
domain that I don't know passes a smell

117
00:05:28,069 --> 00:05:34,039
test here are some of the examples from

118
00:05:30,679 --> 00:05:35,568
past attacks and I know if I was looking

119
00:05:34,039 --> 00:05:37,789
at the connections my browser what's

120
00:05:35,569 --> 00:05:40,399
making or if I was reading through the

121
00:05:37,789 --> 00:05:43,058
code in the web site and I saw a new re

122
00:05:40,399 --> 00:05:43,059
llc.com

123
00:05:43,899 --> 00:05:49,819
people are dropping vowels these days

124
00:05:46,719 --> 00:05:50,300
all of these domains were set up with CA

125
00:05:49,819 --> 00:05:51,860
certs

126
00:05:50,300 --> 00:05:54,589
so you didn't get any mixed content

127
00:05:51,860 --> 00:05:56,479
warnings and it's these attacks are

128
00:05:54,589 --> 00:05:57,919
completely transparent to the user the

129
00:05:56,479 --> 00:05:59,930
user is not going to know this is

130
00:05:57,919 --> 00:06:02,649
happening unless you're doing a lot more

131
00:05:59,930 --> 00:06:05,659
inspection than any of my customers do

132
00:06:02,649 --> 00:06:08,360
you all of these domains are taking

133
00:06:05,659 --> 00:06:09,289
advantage of a nature of attack called

134
00:06:08,360 --> 00:06:11,719
typosquatting

135
00:06:09,289 --> 00:06:15,949
and that's relevant both here and later

136
00:06:11,719 --> 00:06:17,719
on right it's where you take a domain

137
00:06:15,949 --> 00:06:19,969
name or a package name that people are

138
00:06:17,719 --> 00:06:25,129
going to trust and look for a variation

139
00:06:19,969 --> 00:06:26,419
on it a lot of sites these days right

140
00:06:25,129 --> 00:06:27,709
you don't want to handle credit card

141
00:06:26,419 --> 00:06:30,139
data you don't to pay the compliance

142
00:06:27,709 --> 00:06:33,079
costs so you bring in a third party to

143
00:06:30,139 --> 00:06:36,559
send the credit card data to and then

144
00:06:33,079 --> 00:06:37,819
you just work with a token however due

145
00:06:36,559 --> 00:06:39,319
to the nature of these attacks if

146
00:06:37,819 --> 00:06:41,539
someone can inject code into your

147
00:06:39,319 --> 00:06:44,240
website they can inject a fake check out

148
00:06:41,539 --> 00:06:45,830
form and gather all of this data

149
00:06:44,240 --> 00:06:47,569
send it to your legitimate third-party

150
00:06:45,830 --> 00:06:49,699
processor as well as sending it off to

151
00:06:47,569 --> 00:06:52,550
themselves one of the most recent

152
00:06:49,699 --> 00:06:57,289
attacks by this group match card did

153
00:06:52,550 --> 00:07:00,169
just that so how is the code getting

154
00:06:57,289 --> 00:07:01,669
into websites some of these examples are

155
00:07:00,169 --> 00:07:03,530
known from the public disclosures about

156
00:07:01,669 --> 00:07:07,818
those attacks and some of this is

157
00:07:03,530 --> 00:07:09,739
speculation obviously if you're serving

158
00:07:07,819 --> 00:07:12,650
your web content with mutable servers

159
00:07:09,740 --> 00:07:15,740
and an adversary can get on there they

160
00:07:12,650 --> 00:07:17,150
can change what's served if they can't

161
00:07:15,740 --> 00:07:20,210
get on to your servers or if that's not

162
00:07:17,150 --> 00:07:22,190
the past of least resistance they could

163
00:07:20,210 --> 00:07:24,198
get access to your code repository if

164
00:07:22,190 --> 00:07:26,180
you've got a developer who reuses her

165
00:07:24,199 --> 00:07:28,069
password for more than one place that

166
00:07:26,180 --> 00:07:30,289
would be a very good address Avenue of

167
00:07:28,069 --> 00:07:33,169
attack or if you can just you know slip

168
00:07:30,289 --> 00:07:34,370
a developer a couple thousand bucks even

169
00:07:33,169 --> 00:07:37,698
one of the flat screens you know you're

170
00:07:34,370 --> 00:07:40,970
going to get later on all those are

171
00:07:37,699 --> 00:07:43,729
viable ways of getting similar to the

172
00:07:40,970 --> 00:07:45,639
domain type of squatting there is more

173
00:07:43,729 --> 00:07:48,919
and more type of squatting in the

174
00:07:45,639 --> 00:08:01,280
third-party library space for web code

175
00:07:48,919 --> 00:08:03,880
so right so so these are all third-party

176
00:08:01,280 --> 00:08:07,429
libraries that were found in the Python

177
00:08:03,880 --> 00:08:09,530
public repos and they are squatting on

178
00:08:07,430 --> 00:08:13,159
the name of Jango which is you know the

179
00:08:09,530 --> 00:08:14,840
web framework slight misspellings these

180
00:08:13,159 --> 00:08:17,240
packages all provide the same

181
00:08:14,840 --> 00:08:18,590
functionality same code as Jango but

182
00:08:17,240 --> 00:08:21,110
they also include some extra

183
00:08:18,590 --> 00:08:22,400
maliciousness to siphon off sensitive

184
00:08:21,110 --> 00:08:24,590
data and send it away

185
00:08:22,400 --> 00:08:27,650
we know that for one of the companies

186
00:08:24,590 --> 00:08:29,780
that fell victim to these attacks the

187
00:08:27,650 --> 00:08:32,179
malicious code was injected to their

188
00:08:29,780 --> 00:08:34,010
site through cross-site scripting we

189
00:08:32,179 --> 00:08:36,049
know that one of the companies who fell

190
00:08:34,010 --> 00:08:37,458
victim to this attack actually their

191
00:08:36,049 --> 00:08:39,588
servers and everything else were

192
00:08:37,458 --> 00:08:41,328
pristine but they were bringing in some

193
00:08:39,589 --> 00:08:43,190
third party code on their checkout page

194
00:08:41,328 --> 00:08:44,870
if you've ever seen the little chat

195
00:08:43,190 --> 00:08:47,079
window that pops up hey do you need help

196
00:08:44,870 --> 00:08:48,829
with this purchase instead of

197
00:08:47,079 --> 00:08:51,199
compromising the first party

198
00:08:48,829 --> 00:08:53,750
the attackers compromised that chat

199
00:08:51,200 --> 00:08:55,279
provider because that JavaScript was

200
00:08:53,750 --> 00:08:57,320
running on the checkout page the

201
00:08:55,279 --> 00:09:01,490
adversary was able to copy off all

202
00:08:57,320 --> 00:09:04,220
of the assistive content malicious

203
00:09:01,490 --> 00:09:06,170
browser plugins and not using the

204
00:09:04,220 --> 00:09:08,870
attacks we've seen so far but it's the

205
00:09:06,170 --> 00:09:11,449
same idea either through typosquatting

206
00:09:08,870 --> 00:09:13,850
or finding an abandoned plugin and

207
00:09:11,450 --> 00:09:16,010
buying it up from the developer that's

208
00:09:13,850 --> 00:09:20,840
two more ways to observe traffic in the

209
00:09:16,010 --> 00:09:24,170
web browser and steal it off so what can

210
00:09:20,840 --> 00:09:27,500
we do about this first there are some

211
00:09:24,170 --> 00:09:33,920
really good IOC s out there for these

212
00:09:27,500 --> 00:09:37,730
attacks go see the dog has a few

213
00:09:33,920 --> 00:09:40,490
thousand host names IP addresses and who

214
00:09:37,730 --> 00:09:42,020
is details for domains that were

215
00:09:40,490 --> 00:09:45,410
registered in the most recent attacks

216
00:09:42,020 --> 00:09:47,480
you can scan your code repos for these

217
00:09:45,410 --> 00:09:48,770
you can look at your DNS logs you can

218
00:09:47,480 --> 00:09:51,140
look at your network telemetry

219
00:09:48,770 --> 00:09:53,420
to see if you see anything related to

220
00:09:51,140 --> 00:09:55,340
these when you get in there your heart

221
00:09:53,420 --> 00:09:56,839
sinks a little bit because you see all

222
00:09:55,340 --> 00:09:59,030
of these domain names that are very

223
00:09:56,840 --> 00:10:00,680
similar to something you may be familiar

224
00:09:59,030 --> 00:10:03,140
with and something that you realize if

225
00:10:00,680 --> 00:10:05,140
you saw it listed in a website you'd

226
00:10:03,140 --> 00:10:08,030
think you'd not think twice about it

227
00:10:05,140 --> 00:10:10,750
there are several other great write-ups

228
00:10:08,030 --> 00:10:13,280
about this links are at the end

229
00:10:10,750 --> 00:10:15,230
commercial company risk IQ has done a

230
00:10:13,280 --> 00:10:17,480
ton of research there's this Dutch guy

231
00:10:15,230 --> 00:10:22,370
willem who has a great blog covering all

232
00:10:17,480 --> 00:10:24,530
of this beyond that beyond the network

233
00:10:22,370 --> 00:10:28,100
Paloma tree and looking into repos for

234
00:10:24,530 --> 00:10:30,380
IO C's of previous compromised you need

235
00:10:28,100 --> 00:10:32,270
to have great integrity controls to

236
00:10:30,380 --> 00:10:35,660
prevent this let's just go from getting

237
00:10:32,270 --> 00:10:39,319
into your site first you want strong off

238
00:10:35,660 --> 00:10:40,520
to your code repos stolen password from

239
00:10:39,320 --> 00:10:43,340
a developer should not be enough to

240
00:10:40,520 --> 00:10:46,819
bring down your site turn on to FA for

241
00:10:43,340 --> 00:10:48,950
all of that you need to have some degree

242
00:10:46,820 --> 00:10:51,710
of peer review before the code gets out

243
00:10:48,950 --> 00:10:54,080
so that if a developer subverted it

244
00:10:51,710 --> 00:10:55,640
would be detected when you're bringing

245
00:10:54,080 --> 00:10:57,280
in third-party libraries to your code

246
00:10:55,640 --> 00:10:59,240
you should check them for

247
00:10:57,280 --> 00:11:02,780
vulnerabilities as well as maliciousness

248
00:10:59,240 --> 00:11:04,580
and type of spotting retired is a wasp's

249
00:11:02,780 --> 00:11:07,819
dependency check are a couple open

250
00:11:04,580 --> 00:11:10,890
source tools to help you with some

251
00:11:07,820 --> 00:11:13,350
if your repo is clean you need to detect

252
00:11:10,890 --> 00:11:16,260
an alert on changes to the servers if

253
00:11:13,350 --> 00:11:18,330
they're beautiful servers right so some

254
00:11:16,260 --> 00:11:20,040
sort of file integrity monitoring over

255
00:11:18,330 --> 00:11:23,180
the objects that get loaded onto there

256
00:11:20,040 --> 00:11:26,640
and get served out to your customers

257
00:11:23,180 --> 00:11:28,530
ideally what's in the repo what's on the

258
00:11:26,640 --> 00:11:32,069
server and what runs in the browser can

259
00:11:28,530 --> 00:11:35,670
all be hashed and compares and there are

260
00:11:32,070 --> 00:11:37,320
ways to assert the hash of the third

261
00:11:35,670 --> 00:11:39,479
party or first party resource to the

262
00:11:37,320 --> 00:11:43,820
browser so that the browser will only

263
00:11:39,480 --> 00:11:43,820
run the script if it matches the hash

264
00:11:44,600 --> 00:11:51,270
finally you need to look at your site

265
00:11:47,340 --> 00:11:54,390
from an outside perspective so sandbox

266
00:11:51,270 --> 00:11:57,689
it somehow I would expect evasive

267
00:11:54,390 --> 00:12:01,439
techniques here meaning don't only load

268
00:11:57,690 --> 00:12:03,600
your network don't only load your site

269
00:12:01,440 --> 00:12:05,880
from selenium or phantom jeaious and

270
00:12:03,600 --> 00:12:09,060
expect that to detect all these changes

271
00:12:05,880 --> 00:12:11,220
you need to have real emulation real

272
00:12:09,060 --> 00:12:15,449
people looking at the site from

273
00:12:11,220 --> 00:12:18,420
anonymous networks you need to inventory

274
00:12:15,450 --> 00:12:20,250
all the third-party scripts pixels etc

275
00:12:18,420 --> 00:12:21,689
that you're loading you need to do a

276
00:12:20,250 --> 00:12:23,340
spell check against those and that will

277
00:12:21,690 --> 00:12:25,890
help you in the next step and the

278
00:12:23,340 --> 00:12:28,020
policies you can develop to assert

279
00:12:25,890 --> 00:12:35,180
positively what the browser is allowed

280
00:12:28,020 --> 00:12:37,920
to connect to so the best protection

281
00:12:35,180 --> 00:12:40,709
against getting these online skimmers

282
00:12:37,920 --> 00:12:43,829
injected to your site is to use a header

283
00:12:40,710 --> 00:12:44,940
called a content security policy this

284
00:12:43,830 --> 00:12:46,830
gives you really fine grained control

285
00:12:44,940 --> 00:12:49,770
over what you allow the browser to

286
00:12:46,830 --> 00:12:52,470
connect to when it's on your site CSP is

287
00:12:49,770 --> 00:12:55,970
a header that you set in the web server

288
00:12:52,470 --> 00:12:58,110
so Apache nginx whatever it's a

289
00:12:55,970 --> 00:13:01,470
whitelist or a blacklist of what you

290
00:12:58,110 --> 00:13:03,660
allow people to connect to there are a

291
00:13:01,470 --> 00:13:07,500
lot of directives within the header you

292
00:13:03,660 --> 00:13:09,360
can set anything that ends in SRC takes

293
00:13:07,500 --> 00:13:10,800
what's called a source list it's a list

294
00:13:09,360 --> 00:13:12,090
of domains that you allowed it the

295
00:13:10,800 --> 00:13:15,000
browser to connect to for those

296
00:13:12,090 --> 00:13:18,570
particular types of objects so style SRC

297
00:13:15,000 --> 00:13:19,590
is the list of domains that you want the

298
00:13:18,570 --> 00:13:22,680
browser to connect to

299
00:13:19,590 --> 00:13:24,660
to get a spell see two important ones at

300
00:13:22,680 --> 00:13:26,160
the end the report your eye that's an

301
00:13:24,660 --> 00:13:29,459
end point that the browser is going to

302
00:13:26,160 --> 00:13:31,920
post any CSP violations to so if you're

303
00:13:29,460 --> 00:13:34,200
implementing a CSP and break something

304
00:13:31,920 --> 00:13:36,780
you have a method to know that limitary

305
00:13:34,200 --> 00:13:38,970
from the browser sha-256 is another

306
00:13:36,780 --> 00:13:42,240
directive you can put in the header to

307
00:13:38,970 --> 00:13:47,820
specify the exact hash of the attribute

308
00:13:42,240 --> 00:13:50,280
you want it to load so there's a very

309
00:13:47,820 --> 00:13:52,530
well named website called content

310
00:13:50,280 --> 00:13:55,650
security policy comm has a bunch of

311
00:13:52,530 --> 00:13:58,709
examples stolen by Lee from there the

312
00:13:55,650 --> 00:14:02,069
most simplest CSP you can assert through

313
00:13:58,710 --> 00:14:05,250
a header is defaults here the default

314
00:14:02,070 --> 00:14:07,530
SRC self that just tells the browser

315
00:14:05,250 --> 00:14:09,780
load any assets that are from the same

316
00:14:07,530 --> 00:14:15,270
origin right from the same URL same

317
00:14:09,780 --> 00:14:17,850
domain name you can be a little more

318
00:14:15,270 --> 00:14:22,230
advanced a lot of people run GA right

319
00:14:17,850 --> 00:14:24,930
this is a basic policy that lets you

320
00:14:22,230 --> 00:14:28,770
load Google Analytics to get a little

321
00:14:24,930 --> 00:14:30,359
more complicated if you do default FFC

322
00:14:28,770 --> 00:14:32,610
none ya know there's a laser pointer but

323
00:14:30,360 --> 00:14:34,740
I like to stretch if you view the

324
00:14:32,610 --> 00:14:36,990
default SRC none that's a default deny

325
00:14:34,740 --> 00:14:39,300
and then you say you only allow scripts

326
00:14:36,990 --> 00:14:43,070
connect that's nature acts call images

327
00:14:39,300 --> 00:14:43,069
and style sheets from the same origin

328
00:14:43,550 --> 00:14:53,280
this looks great every site many sites

329
00:14:49,260 --> 00:14:56,880
load dozens or scores of third-party

330
00:14:53,280 --> 00:14:58,020
assets pixels scripts etc how do you get

331
00:14:56,880 --> 00:15:02,880
to somewhere where you can implement

332
00:14:58,020 --> 00:15:06,560
this sanely so got an example from the

333
00:15:02,880 --> 00:15:09,510
same joke store before now it's

334
00:15:06,560 --> 00:15:12,540
expressing this content security policy

335
00:15:09,510 --> 00:15:14,580
so this is the additional header that

336
00:15:12,540 --> 00:15:15,469
the web server is sending everything

337
00:15:14,580 --> 00:15:19,460
else is the same

338
00:15:15,470 --> 00:15:19,460
I'll show you how this works

339
00:15:21,000 --> 00:15:27,460
so again it's the same checkout form all

340
00:15:24,820 --> 00:15:29,710
the same information is gathered same

341
00:15:27,460 --> 00:15:34,830
malicious JavaScript running posting to

342
00:15:29,710 --> 00:15:41,290
the same cloud CDN ddns dotnet endpoint

343
00:15:34,830 --> 00:15:42,760
same customer buying the same jokes give

344
00:15:41,290 --> 00:15:45,579
it the customer name hey does anyone

345
00:15:42,760 --> 00:15:50,250
know what 14 North Moore Street in

346
00:15:45,580 --> 00:15:55,440
Tribeca is it's a famous eighties movie

347
00:15:50,250 --> 00:15:59,550
firehouse I couldn't know okay finally

348
00:15:55,440 --> 00:16:02,350
so we checked out here we posted to our

349
00:15:59,550 --> 00:16:05,680
checkout page and you can see again the

350
00:16:02,350 --> 00:16:09,160
same information was sent out of 200

351
00:16:05,680 --> 00:16:11,729
submitted all the same payment data this

352
00:16:09,160 --> 00:16:15,640
is fine this is coming back to me

353
00:16:11,730 --> 00:16:18,760
however the connection to the skimming

354
00:16:15,640 --> 00:16:21,220
endpoint was blocked the browser said no

355
00:16:18,760 --> 00:16:23,680
it violates the CSP I'm not going to do

356
00:16:21,220 --> 00:16:25,630
it this is the message the browser will

357
00:16:23,680 --> 00:16:28,120
send back if you specify a reporting

358
00:16:25,630 --> 00:16:30,220
endpoint so you can see something has

359
00:16:28,120 --> 00:16:31,810
changed on the site chances are a

360
00:16:30,220 --> 00:16:33,220
developer dissipated something but maybe

361
00:16:31,810 --> 00:16:36,150
we have some malicious code running

362
00:16:33,220 --> 00:16:40,450
that's trying to siphon data outside

363
00:16:36,150 --> 00:16:43,000
this is a durable method meaning as we

364
00:16:40,450 --> 00:16:46,240
reload several times you'll continue to

365
00:16:43,000 --> 00:16:48,580
see it being blocked and this is the

366
00:16:46,240 --> 00:16:50,530
magic of the inspector I would have had

367
00:16:48,580 --> 00:16:51,760
to do all had to show you all of this in

368
00:16:50,530 --> 00:16:53,470
burp it would have been a lot of

369
00:16:51,760 --> 00:16:58,300
flipping back and forth you would not

370
00:16:53,470 --> 00:17:00,930
liked it again feeling old but these

371
00:16:58,300 --> 00:17:00,930
tools are

372
00:17:06,819 --> 00:17:14,349
so how do you get started implementing

373
00:17:09,579 --> 00:17:16,658
one of these on your site first develop

374
00:17:14,349 --> 00:17:19,029
an inventory of the sensitive pages and

375
00:17:16,659 --> 00:17:21,909
the third-party resources you're

376
00:17:19,029 --> 00:17:24,329
bringing in on those pages so are you

377
00:17:21,909 --> 00:17:27,610
firing Linux you have marketing pixels

378
00:17:24,329 --> 00:17:29,649
etc you don't need to run this

379
00:17:27,609 --> 00:17:32,559
everywhere focus on the pages that

380
00:17:29,649 --> 00:17:36,189
collect sensitive data there is a

381
00:17:32,559 --> 00:17:37,960
separate header you can set that is

382
00:17:36,190 --> 00:17:41,679
called content security policy report

383
00:17:37,960 --> 00:17:45,870
only takes all the same syntax but it

384
00:17:41,679 --> 00:17:48,309
won't block anything it will simply send

385
00:17:45,870 --> 00:17:51,279
data back to your reporting endpoint

386
00:17:48,309 --> 00:17:53,139
saying hey my policy said I shouldn't

387
00:17:51,279 --> 00:17:54,279
have connected this place I'm connecting

388
00:17:53,139 --> 00:17:59,649
to it anyway but I thought you should

389
00:17:54,279 --> 00:18:02,980
know you don't need to run a CSP on all

390
00:17:59,649 --> 00:18:05,768
of your traffic either for initial

391
00:18:02,980 --> 00:18:08,740
implementation or you can argue at all

392
00:18:05,769 --> 00:18:10,809
right if you are getting a relatively

393
00:18:08,740 --> 00:18:11,950
good subset and you know you've got good

394
00:18:10,809 --> 00:18:15,220
coverage maybe you don't need it

395
00:18:11,950 --> 00:18:17,350
everywhere Google has a great syntax

396
00:18:15,220 --> 00:18:20,549
validator for the CSP when you implement

397
00:18:17,350 --> 00:18:25,330
it to tell you've got any syntax bugs

398
00:18:20,549 --> 00:18:27,340
so in summary first you need strong

399
00:18:25,330 --> 00:18:29,408
source code control you need you need to

400
00:18:27,340 --> 00:18:31,870
be able to connect what's in your repo

401
00:18:29,409 --> 00:18:34,960
what's on the server what's running in

402
00:18:31,870 --> 00:18:37,600
the browser if you hash all of those you

403
00:18:34,960 --> 00:18:40,779
can compare in the browser with the SSRI

404
00:18:37,600 --> 00:18:43,629
directive or with the hash directive in

405
00:18:40,779 --> 00:18:46,330
the header to make sure that what your

406
00:18:43,629 --> 00:18:48,309
browser is running is what you expect it

407
00:18:46,330 --> 00:18:50,408
to be you need great integrity

408
00:18:48,309 --> 00:18:51,610
monitoring on the servers make them

409
00:18:50,409 --> 00:18:54,009
immutable maybe you don't care about

410
00:18:51,610 --> 00:18:56,408
this but if you're running actual web

411
00:18:54,009 --> 00:18:58,539
servers and something changes and it's

412
00:18:56,409 --> 00:19:01,899
outside of your expectations you should

413
00:18:58,539 --> 00:19:03,519
know about that right away the process

414
00:19:01,899 --> 00:19:06,219
you need a process with any repo to

415
00:19:03,519 --> 00:19:08,769
notice third-party libraries libraries

416
00:19:06,220 --> 00:19:10,240
with vulnerabilities um what's good

417
00:19:08,769 --> 00:19:12,220
today may not be so good tomorrow

418
00:19:10,240 --> 00:19:15,010
you need to inventory what you've got

419
00:19:12,220 --> 00:19:17,500
today I know in my case it's hundreds of

420
00:19:15,010 --> 00:19:20,129
tracking pixels but none on the checkout

421
00:19:17,500 --> 00:19:22,250
page once you've got

422
00:19:20,130 --> 00:19:25,440
baseline then you work to build the CSB

423
00:19:22,250 --> 00:19:27,750
you started with report only you move it

424
00:19:25,440 --> 00:19:29,100
on into blocking when you're ready and

425
00:19:27,750 --> 00:19:34,230
when you know what effect it's going to

426
00:19:29,100 --> 00:19:35,820
have you use hashing or SSRIs to do that

427
00:19:34,230 --> 00:19:38,460
full integrity check across the chain

428
00:19:35,820 --> 00:19:41,100
and you look at your site from an

429
00:19:38,460 --> 00:19:43,860
external perspective run it from a phone

430
00:19:41,100 --> 00:19:46,050
off the network run it from our browser

431
00:19:43,860 --> 00:19:48,870
off the network make sure that there's

432
00:19:46,050 --> 00:19:53,060
not an evasive technique to prevent you

433
00:19:48,870 --> 00:19:53,060
from seeing malicious code running there

434
00:19:53,090 --> 00:19:57,389
real quick commercial I work for a great

435
00:19:55,410 --> 00:20:00,270
company we're hiring here dev managers

436
00:19:57,390 --> 00:20:02,160
developers coops and any security people

437
00:20:00,270 --> 00:20:05,280
who want to live in an exciting place

438
00:20:02,160 --> 00:20:07,100
work with me in New York work in Bangkok

439
00:20:05,280 --> 00:20:10,649
work and Amsterdam work in the UK

440
00:20:07,100 --> 00:20:13,350
booking comm Priceline open table kayak

441
00:20:10,650 --> 00:20:15,810
we all have openings we all work

442
00:20:13,350 --> 00:20:18,419
together it's a fun team here are a

443
00:20:15,810 --> 00:20:19,500
bunch of references that will be posted

444
00:20:18,420 --> 00:20:30,090
online very soon

445
00:20:19,500 --> 00:20:33,180
any questions Oh questions yeah browser

446
00:20:30,090 --> 00:20:35,129
plugin probably not right let's see

447
00:20:33,180 --> 00:20:39,690
I don't think whatever operations there

448
00:20:35,130 --> 00:20:42,480
if the and the CSP won't help if someone

449
00:20:39,690 --> 00:20:44,160
contains a CSP right if you're that

450
00:20:42,480 --> 00:20:48,000
screwed and you can't detect a change at

451
00:20:44,160 --> 00:20:50,010
the CSP you've got no luck the way a

452
00:20:48,000 --> 00:20:51,870
browser plugin would work if it could I

453
00:20:50,010 --> 00:20:52,710
don't know save it to local storage and

454
00:20:51,870 --> 00:20:57,260
then send it up later

455
00:20:52,710 --> 00:20:57,260
that wouldn't be observed by the CSP

456
00:20:58,100 --> 00:21:03,500
cool thanks

457
00:21:01,440 --> 00:21:03,500
you

