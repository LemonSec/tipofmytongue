1
00:00:07,580 --> 00:00:11,900
so I'm happy that everybody's still here

2
00:00:10,639 --> 00:00:13,639
I was a little bit worried at the end of

3
00:00:11,900 --> 00:00:16,279
the day that things would start to thin

4
00:00:13,639 --> 00:00:21,650
and out so hopefully I don't let anyone

5
00:00:16,279 --> 00:00:24,140
down but so my name is Christian Braun I

6
00:00:21,650 --> 00:00:26,000
work for a company called fastly we

7
00:00:24,140 --> 00:00:27,380
operate a content delivery network which

8
00:00:26,000 --> 00:00:30,400
means we got a lot of infrastructure

9
00:00:27,380 --> 00:00:33,170
deployed globally a lot of systems that

10
00:00:30,400 --> 00:00:35,559
need security obviously take it pretty

11
00:00:33,170 --> 00:00:38,410
seriously so I'm on the security team I

12
00:00:35,559 --> 00:00:41,180
kind of have three main areas of focus

13
00:00:38,410 --> 00:00:44,779
architecture making stuff that we're

14
00:00:41,180 --> 00:00:48,019
building secure and hopefully not having

15
00:00:44,780 --> 00:00:49,549
to add security after the fact so we're

16
00:00:48,019 --> 00:00:51,650
pretty good about that security research

17
00:00:49,549 --> 00:00:53,449
I spent the last couple of years last

18
00:00:51,650 --> 00:00:55,040
couple years primarily focused on the

19
00:00:53,449 --> 00:00:57,830
security research team where we are kind

20
00:00:55,040 --> 00:01:00,470
of prototyping thread identification and

21
00:00:57,830 --> 00:01:02,599
containment technologies and then

22
00:01:00,470 --> 00:01:04,190
finally operations so I'm also on the

23
00:01:02,600 --> 00:01:05,780
triage rotation which means that I'm

24
00:01:04,190 --> 00:01:08,720
dealing with our intrusion detection

25
00:01:05,780 --> 00:01:10,490
alerts vulnerability reports that are

26
00:01:08,720 --> 00:01:12,530
coming in and that sort of thing so I'm

27
00:01:10,490 --> 00:01:14,270
involved also kind of like operationally

28
00:01:12,530 --> 00:01:16,250
on the team which gives me pretty good I

29
00:01:14,270 --> 00:01:17,600
guess exposure to some of the problems

30
00:01:16,250 --> 00:01:21,740
that you run into when you're trying to

31
00:01:17,600 --> 00:01:25,070
do security on a large environment so

32
00:01:21,740 --> 00:01:27,440
what I want to talk about today is I'd

33
00:01:25,070 --> 00:01:29,509
basically talk about some R&D that we've

34
00:01:27,440 --> 00:01:32,300
been doing around security telemetry

35
00:01:29,510 --> 00:01:35,300
I'll talk about what that means and why

36
00:01:32,300 --> 00:01:38,380
people should care about it some

37
00:01:35,300 --> 00:01:40,850
different sources for telemetry and

38
00:01:38,380 --> 00:01:42,979
different subsystems that you could use

39
00:01:40,850 --> 00:01:47,240
to basically extract information to look

40
00:01:42,980 --> 00:01:49,250
for indicators of compromise or i/o seas

41
00:01:47,240 --> 00:01:51,919
take a look at the prototype that we

42
00:01:49,250 --> 00:01:55,430
built so it's kind of two parts we're

43
00:01:51,920 --> 00:01:57,260
leveraging an open-source project built

44
00:01:55,430 --> 00:01:59,780
by another company doing pretty cool

45
00:01:57,260 --> 00:02:03,140
stuff and then there is like basically

46
00:01:59,780 --> 00:02:05,360
the integration of that technology into

47
00:02:03,140 --> 00:02:08,869
our environment and how we kind of and

48
00:02:05,360 --> 00:02:10,610
how we use it to to basically collect it

49
00:02:08,869 --> 00:02:11,720
collect collect telemetry without

50
00:02:10,610 --> 00:02:12,709
destroying the performance in our

51
00:02:11,720 --> 00:02:14,629
environment which is also really

52
00:02:12,709 --> 00:02:17,650
important for us and then just kind of a

53
00:02:14,629 --> 00:02:17,649
conclusions and wrap up

54
00:02:18,950 --> 00:02:24,720
so telemetry I know it's kind of an

55
00:02:21,870 --> 00:02:26,730
overloaded term in the mechanical

56
00:02:24,720 --> 00:02:30,060
engineering world and chemical

57
00:02:26,730 --> 00:02:33,420
engineering world that has very very

58
00:02:30,060 --> 00:02:35,640
specific meanings but the one that kind

59
00:02:33,420 --> 00:02:37,980
of more resonated with me was one of the

60
00:02:35,640 --> 00:02:39,809
definitions off of Wikipedia which kind

61
00:02:37,980 --> 00:02:41,899
of defines telemetry as an automated

62
00:02:39,810 --> 00:02:44,450
communications process by which

63
00:02:41,900 --> 00:02:47,700
measurements and data are collected from

64
00:02:44,450 --> 00:02:49,950
mostly inaccessible systems the data

65
00:02:47,700 --> 00:02:53,040
will come back to a centralized area for

66
00:02:49,950 --> 00:02:55,170
an analysis the data you could contain

67
00:02:53,040 --> 00:02:58,108
either metrics or data or other other

68
00:02:55,170 --> 00:03:00,540
things you know could be like pressure

69
00:02:58,109 --> 00:03:02,450
sensors or whatever the case may be in

70
00:03:00,540 --> 00:03:05,280
kind of like SCADA and mechanical world

71
00:03:02,450 --> 00:03:08,250
but for me it's a little bit more simple

72
00:03:05,280 --> 00:03:10,400
than that when I when I think about

73
00:03:08,250 --> 00:03:12,989
security telemetry we have a lot of

74
00:03:10,400 --> 00:03:15,590
devices aren't in our environments we

75
00:03:12,989 --> 00:03:19,680
got switches we got firewalls we got

76
00:03:15,590 --> 00:03:22,709
servers all these things are producing a

77
00:03:19,680 --> 00:03:24,870
huge amount of data oftentimes which

78
00:03:22,709 --> 00:03:27,030
could contain indications of compromise

79
00:03:24,870 --> 00:03:30,540
but so it's a matter of being able to

80
00:03:27,030 --> 00:03:33,810
collect that information ship it in a

81
00:03:30,540 --> 00:03:36,150
scalable format and basically have the

82
00:03:33,810 --> 00:03:38,400
technology in place to identify when we

83
00:03:36,150 --> 00:03:45,090
think something is something is being

84
00:03:38,400 --> 00:03:47,720
compromised so some of the high-level

85
00:03:45,090 --> 00:03:50,909
requirements and why we need it

86
00:03:47,720 --> 00:03:52,409
anybody who's kind of who's responsible

87
00:03:50,909 --> 00:03:55,709
for security in any kind of an

88
00:03:52,409 --> 00:03:59,429
operational environment knows that you

89
00:03:55,709 --> 00:04:02,220
want to have data in place to assist

90
00:03:59,430 --> 00:04:04,319
with investigations to assist with

91
00:04:02,220 --> 00:04:07,079
forensics if you suspect that something

92
00:04:04,319 --> 00:04:10,879
has gone wrong in the environment and

93
00:04:07,079 --> 00:04:13,049
oftentimes you shouldn't have just one

94
00:04:10,879 --> 00:04:15,030
intrusion detection function in the

95
00:04:13,049 --> 00:04:16,079
environment so it's very common that you

96
00:04:15,030 --> 00:04:18,358
might have like host-based intrusion

97
00:04:16,079 --> 00:04:20,820
detection antivirus network-based

98
00:04:18,358 --> 00:04:22,138
intrusion detection and all these things

99
00:04:20,820 --> 00:04:24,810
are kind of telling you and something

100
00:04:22,139 --> 00:04:26,400
might be going wrong in the environment

101
00:04:24,810 --> 00:04:28,770
and then basically it's up to the

102
00:04:26,400 --> 00:04:30,789
security analyst to gate to log in and

103
00:04:28,770 --> 00:04:33,849
try to make sense of you know

104
00:04:30,790 --> 00:04:35,530
why like why are we seeing these alerts

105
00:04:33,850 --> 00:04:37,780
of these false positives or these things

106
00:04:35,530 --> 00:04:41,619
that we need to be concerned about so I

107
00:04:37,780 --> 00:04:44,559
think using it using that it's allow the

108
00:04:41,620 --> 00:04:47,290
tree to correlate stuff from an

109
00:04:44,560 --> 00:04:50,080
intrusion detection process both hosted

110
00:04:47,290 --> 00:04:52,600
network based intrusion detection is

111
00:04:50,080 --> 00:04:54,010
really important the other area I think

112
00:04:52,600 --> 00:04:56,290
is actually really important is less to

113
00:04:54,010 --> 00:04:59,020
do with malicious attacks but if you

114
00:04:56,290 --> 00:05:00,970
operate networks where there's a wide

115
00:04:59,020 --> 00:05:03,580
range of users that are logging into

116
00:05:00,970 --> 00:05:05,860
systems performing actions on those

117
00:05:03,580 --> 00:05:06,909
systems they may or may not be they may

118
00:05:05,860 --> 00:05:09,850
they may not be doing something

119
00:05:06,910 --> 00:05:11,920
intentionally wrong but they killed they

120
00:05:09,850 --> 00:05:14,140
could still be executing stuff that

121
00:05:11,920 --> 00:05:16,600
exposes the environment to additional

122
00:05:14,140 --> 00:05:18,640
risk so you want to be able to identify

123
00:05:16,600 --> 00:05:20,140
when this is happening so this could be

124
00:05:18,640 --> 00:05:21,460
as something as simple as like an audit

125
00:05:20,140 --> 00:05:23,919
trail of what's being what's being

126
00:05:21,460 --> 00:05:25,450
executed on the system but I guess like

127
00:05:23,920 --> 00:05:28,690
the bottom line is that we want to know

128
00:05:25,450 --> 00:05:29,650
who did what and when and we want it we

129
00:05:28,690 --> 00:05:31,450
want to be able to answer those

130
00:05:29,650 --> 00:05:33,039
questions hopefully in a knot of eight

131
00:05:31,450 --> 00:05:35,409
none available and a performant manner

132
00:05:33,040 --> 00:05:37,420
and we'll talk about kind of the

133
00:05:35,410 --> 00:05:38,770
importance at least for us and when it

134
00:05:37,420 --> 00:05:42,040
comes to performance being able to do

135
00:05:38,770 --> 00:05:47,409
this so I just want to draw a couple

136
00:05:42,040 --> 00:05:49,750
like tangible examples so a lot of us

137
00:05:47,410 --> 00:05:52,420
who have network-based intrusion

138
00:05:49,750 --> 00:05:54,850
protections and never big network-based

139
00:05:52,420 --> 00:05:57,130
intrusion detection sensors rather it's

140
00:05:54,850 --> 00:05:59,230
pretty common you'll see like alerts

141
00:05:57,130 --> 00:06:00,670
when they're suspected communications

142
00:05:59,230 --> 00:06:02,230
with either known command and control

143
00:06:00,670 --> 00:06:04,930
systems out on the internet or just

144
00:06:02,230 --> 00:06:09,270
knowing bad actors usually there's a

145
00:06:04,930 --> 00:06:11,620
blacklist you know and and so on and

146
00:06:09,270 --> 00:06:13,630
when we are when we're seeing inbound

147
00:06:11,620 --> 00:06:16,690
communications from these bad actors

148
00:06:13,630 --> 00:06:19,659
it could be concerning especially say if

149
00:06:16,690 --> 00:06:22,360
it's coming to a port that shouldn't be

150
00:06:19,660 --> 00:06:23,770
running on that host so immediately

151
00:06:22,360 --> 00:06:25,780
there's a few questions that we want to

152
00:06:23,770 --> 00:06:27,849
answer is this service actually

153
00:06:25,780 --> 00:06:29,739
listening so if I have like a web server

154
00:06:27,850 --> 00:06:32,200
and I'm seeing inbound communications to

155
00:06:29,740 --> 00:06:34,450
like port 8080 or some other service is

156
00:06:32,200 --> 00:06:37,180
that service actually running on the

157
00:06:34,450 --> 00:06:40,419
system and if it's running on the system

158
00:06:37,180 --> 00:06:42,250
did it actually accept the connection if

159
00:06:40,419 --> 00:06:44,530
the machine was compromised on the other

160
00:06:42,250 --> 00:06:44,680
hand there could be like a rootkit or

161
00:06:44,530 --> 00:06:46,150
and

162
00:06:44,680 --> 00:06:47,949
implant installed on the node that's

163
00:06:46,150 --> 00:06:50,020
basically that will hide sockets that

164
00:06:47,949 --> 00:06:51,789
will hide processes hide the presence of

165
00:06:50,020 --> 00:06:55,659
kernel modules and that sort of thing so

166
00:06:51,789 --> 00:06:57,219
it it becomes a really a guessing game

167
00:06:55,660 --> 00:06:58,539
but it becomes more difficult in terms

168
00:06:57,220 --> 00:07:01,330
of like trying to determine whether or

169
00:06:58,539 --> 00:07:04,810
not a system has been compromised

170
00:07:01,330 --> 00:07:07,060
the other thing too is like in in many

171
00:07:04,810 --> 00:07:10,810
cases depending on the source of like

172
00:07:07,060 --> 00:07:13,750
your net flow data connection may not

173
00:07:10,810 --> 00:07:17,680
necessarily have needed to be accepted

174
00:07:13,750 --> 00:07:19,750
or or established in order for net flow

175
00:07:17,680 --> 00:07:22,900
records to actually be created so in

176
00:07:19,750 --> 00:07:26,380
some cases if there's network access

177
00:07:22,900 --> 00:07:28,508
control in place there may have been

178
00:07:26,380 --> 00:07:30,729
attempt to communicate but let's just

179
00:07:28,509 --> 00:07:33,099
say the ACL has dropped it but because

180
00:07:30,729 --> 00:07:34,930
of how certain net flow

181
00:07:33,099 --> 00:07:37,330
generators work they'll end up

182
00:07:34,930 --> 00:07:39,340
generating flow records for that

183
00:07:37,330 --> 00:07:43,030
connection anyways which which monies

184
00:07:39,340 --> 00:07:45,580
the monies of water so in this case

185
00:07:43,030 --> 00:07:48,008
having a record of which kernel modules

186
00:07:45,580 --> 00:07:50,830
have been loaded which connections have

187
00:07:48,009 --> 00:07:54,909
been accepted any time we've bound

188
00:07:50,830 --> 00:07:56,698
sockets to listen on the network you

189
00:07:54,909 --> 00:07:59,680
know any kind of outbound communications

190
00:07:56,699 --> 00:08:01,690
would be having having an audit trail of

191
00:07:59,680 --> 00:08:03,669
that stuff would be really valuable for

192
00:08:01,690 --> 00:08:05,260
us and especially if we have it in a way

193
00:08:03,669 --> 00:08:07,150
that we're shipping it off the system so

194
00:08:05,260 --> 00:08:12,370
that we and we're moving it to like a

195
00:08:07,150 --> 00:08:14,919
trustworthy location another example

196
00:08:12,370 --> 00:08:17,159
that I point out is this is kind of more

197
00:08:14,919 --> 00:08:20,740
of like a host-based intrusion detection

198
00:08:17,159 --> 00:08:24,840
correlation where we're seeing you know

199
00:08:20,740 --> 00:08:27,580
it might have been invalid protocol

200
00:08:24,840 --> 00:08:32,049
negotiations on SSH between two internal

201
00:08:27,580 --> 00:08:33,669
systems and so immediately we want to

202
00:08:32,049 --> 00:08:35,919
know like what so these are systems you

203
00:08:33,669 --> 00:08:37,598
know we might own what was running on

204
00:08:35,919 --> 00:08:39,520
these systems at the time this happened

205
00:08:37,599 --> 00:08:42,820
and more specifically who is actually

206
00:08:39,520 --> 00:08:44,920
responsible for these because this could

207
00:08:42,820 --> 00:08:46,959
indicate that if a system was

208
00:08:44,920 --> 00:08:48,670
compromised and it's trying to scan

209
00:08:46,959 --> 00:08:50,349
within the internal environment it could

210
00:08:48,670 --> 00:08:53,529
it be an indication of lateral movement

211
00:08:50,350 --> 00:08:55,390
within a network and so we need to know

212
00:08:53,529 --> 00:08:56,570
like basically what was running who is

213
00:08:55,390 --> 00:08:58,640
running on

214
00:08:56,570 --> 00:09:00,980
who's on the system what users were

215
00:08:58,640 --> 00:09:06,050
those processes running as that sort of

216
00:09:00,980 --> 00:09:08,720
thing so and the other thing is we kind

217
00:09:06,050 --> 00:09:11,319
of get this if you're an environment

218
00:09:08,720 --> 00:09:13,970
that's using like pseudo as an example

219
00:09:11,320 --> 00:09:15,170
anytime that there's a command that

220
00:09:13,970 --> 00:09:16,880
requires privilege

221
00:09:15,170 --> 00:09:18,079
there'll be an audit trail that gets

222
00:09:16,880 --> 00:09:19,310
created I don't want to use the term

223
00:09:18,080 --> 00:09:20,570
audit trail there'll be a log that gets

224
00:09:19,310 --> 00:09:25,819
created it's probably a better better

225
00:09:20,570 --> 00:09:27,710
way to put it and but in some cases if

226
00:09:25,820 --> 00:09:30,320
you think about like like a Bitcoin

227
00:09:27,710 --> 00:09:32,480
miner or you think about certain other

228
00:09:30,320 --> 00:09:35,360
utilities on the system that may not

229
00:09:32,480 --> 00:09:38,450
require privilege if you're not using

230
00:09:35,360 --> 00:09:40,940
things like sudo if things like sudo are

231
00:09:38,450 --> 00:09:42,320
required to execute these utilities and

232
00:09:40,940 --> 00:09:44,990
you're gonna be basically completely

233
00:09:42,320 --> 00:09:46,820
blind and these these utilities could

234
00:09:44,990 --> 00:09:54,260
still actually represent risk to the

235
00:09:46,820 --> 00:09:56,300
system so where do we get this data this

236
00:09:54,260 --> 00:09:58,580
isn't a this is not a unique problem to

237
00:09:56,300 --> 00:10:02,990
us we have kind of unique requirements

238
00:09:58,580 --> 00:10:04,640
in terms of how much volume in terms of

239
00:10:02,990 --> 00:10:06,740
accepting connections and initiating

240
00:10:04,640 --> 00:10:09,650
connections during origin poll from the

241
00:10:06,740 --> 00:10:11,840
fleet and that sort of thing so this is

242
00:10:09,650 --> 00:10:14,120
not a problem that was is necessarily

243
00:10:11,840 --> 00:10:15,770
unique to us so the most common source

244
00:10:14,120 --> 00:10:18,530
for this data usually comes from

245
00:10:15,770 --> 00:10:20,510
security event auditing and in Linux

246
00:10:18,530 --> 00:10:24,709
it's usually typically known as like

247
00:10:20,510 --> 00:10:27,500
audit D so a lot of these kind of the

248
00:10:24,710 --> 00:10:29,510
user space implementation of a security

249
00:10:27,500 --> 00:10:31,760
event auditing framework when this

250
00:10:29,510 --> 00:10:35,120
framework was designed it was designed

251
00:10:31,760 --> 00:10:37,850
to basically be evaluated against common

252
00:10:35,120 --> 00:10:40,310
criteria and meet things like cap as an

253
00:10:37,850 --> 00:10:43,610
example and there's a lot of really

254
00:10:40,310 --> 00:10:45,770
stringent requirements associated with

255
00:10:43,610 --> 00:10:49,070
with common criteria so a couple

256
00:10:45,770 --> 00:10:50,780
examples that I tend to give is there

257
00:10:49,070 --> 00:10:53,120
needs to be an upper bound on the number

258
00:10:50,780 --> 00:10:55,520
of audit records that you can lose in

259
00:10:53,120 --> 00:10:57,500
the event of an unexpected power failure

260
00:10:55,520 --> 00:10:59,060
so when you think about it it doesn't

261
00:10:57,500 --> 00:11:01,670
really seem like that

262
00:10:59,060 --> 00:11:03,079
intrusive of a requirement but what that

263
00:11:01,670 --> 00:11:05,000
basically means is that you need to

264
00:11:03,080 --> 00:11:07,310
throw it all how many in flight system

265
00:11:05,000 --> 00:11:09,650
calls can be running at the same time so

266
00:11:07,310 --> 00:11:09,920
if you need let's just say you want to

267
00:11:09,650 --> 00:11:13,069
say

268
00:11:09,920 --> 00:11:15,680
twenty-eight at maximum 128 and you can

269
00:11:13,070 --> 00:11:17,990
have no more than 128 system calls in

270
00:11:15,680 --> 00:11:19,250
flight and when you're when we're

271
00:11:17,990 --> 00:11:21,529
looking on a cache like we have

272
00:11:19,250 --> 00:11:24,410
thousands of operations that are in

273
00:11:21,529 --> 00:11:26,930
flight and we don't want to be

274
00:11:24,410 --> 00:11:31,040
throttling that to meet this cap

275
00:11:26,930 --> 00:11:33,079
requirement another example is if an

276
00:11:31,040 --> 00:11:35,209
auditable event is selected to be

277
00:11:33,079 --> 00:11:38,510
audited and it cannot be audited then

278
00:11:35,209 --> 00:11:41,060
the event cannot happen so if you think

279
00:11:38,510 --> 00:11:43,880
about things like a transient memory

280
00:11:41,060 --> 00:11:46,550
failure a memory allocation failure that

281
00:11:43,880 --> 00:11:50,000
results in us not being able to allocate

282
00:11:46,550 --> 00:11:52,130
the data necessary to create the audit

283
00:11:50,000 --> 00:11:53,899
record usually what would happen is that

284
00:11:52,130 --> 00:11:57,110
that operation would fail but we

285
00:11:53,899 --> 00:11:59,300
wouldn't necessarily want to fail the

286
00:11:57,110 --> 00:12:02,690
connect operation from occurring as an

287
00:11:59,300 --> 00:12:04,430
example but based on cap we have to pre

288
00:12:02,690 --> 00:12:07,870
allocate all that stuff ahead of time

289
00:12:04,430 --> 00:12:09,739
and basically ensure that there's no

290
00:12:07,870 --> 00:12:11,420
typically we would consider like a

291
00:12:09,740 --> 00:12:13,490
transient failure that is going to be

292
00:12:11,420 --> 00:12:18,500
able to impact our ability to execute

293
00:12:13,490 --> 00:12:20,240
this operation so in general I think

294
00:12:18,500 --> 00:12:22,160
that these are really good requirements

295
00:12:20,240 --> 00:12:24,140
because what they've what they've done

296
00:12:22,160 --> 00:12:26,779
is they've made they've made the audit

297
00:12:24,140 --> 00:12:28,760
trail very reliable they've made it

298
00:12:26,779 --> 00:12:30,350
there's high integrity requirements

299
00:12:28,760 --> 00:12:31,459
which is something that you that is

300
00:12:30,350 --> 00:12:32,870
really important when you're thinking

301
00:12:31,459 --> 00:12:35,449
about an audit trail and you're using

302
00:12:32,870 --> 00:12:39,019
this to kind of inform security

303
00:12:35,449 --> 00:12:41,839
decisions but these also have a very

304
00:12:39,019 --> 00:12:44,000
negative impact on performance which

305
00:12:41,839 --> 00:12:46,250
we'll go into in a little bit

306
00:12:44,000 --> 00:12:48,019
certain other operating systems so I

307
00:12:46,250 --> 00:12:50,959
personally like I worked a little bit on

308
00:12:48,019 --> 00:12:52,880
the Mac OS and FreeBSD auditing

309
00:12:50,959 --> 00:12:56,899
framework things are a little bit

310
00:12:52,880 --> 00:12:58,459
different there you can have you can you

311
00:12:56,899 --> 00:13:01,459
can have per process audit

312
00:12:58,459 --> 00:13:03,800
configurations but it's still there's

313
00:13:01,459 --> 00:13:05,599
still kind of these same requirements in

314
00:13:03,800 --> 00:13:09,800
terms of like robustness and pre

315
00:13:05,600 --> 00:13:13,670
allocation the other thing too is that

316
00:13:09,800 --> 00:13:17,899
the number of the types of events that

317
00:13:13,670 --> 00:13:19,399
are auditable are fairly static which

318
00:13:17,899 --> 00:13:21,140
means that we have these system calls

319
00:13:19,399 --> 00:13:23,240
that we consider to be security

320
00:13:21,140 --> 00:13:24,980
irrelevant and these are the system

321
00:13:23,240 --> 00:13:26,950
you're able to look at so if there's

322
00:13:24,980 --> 00:13:29,720
certain other operations or functions

323
00:13:26,950 --> 00:13:32,180
that are security relevant in the

324
00:13:29,720 --> 00:13:34,029
context of a specific exploit you're not

325
00:13:32,180 --> 00:13:36,140
necessarily going to have the system

326
00:13:34,029 --> 00:13:38,240
create an audit trail for you and we'll

327
00:13:36,140 --> 00:13:46,100
talk about why that's why that's

328
00:13:38,240 --> 00:13:48,410
important right so right and and again

329
00:13:46,100 --> 00:13:50,000
and when we so we talked about like on a

330
00:13:48,410 --> 00:13:51,740
cache where we have like thousands and

331
00:13:50,000 --> 00:13:53,450
thousands of connect operations

332
00:13:51,740 --> 00:13:55,670
potentially happening at once we don't

333
00:13:53,450 --> 00:13:59,029
we don't want to be like slowing that

334
00:13:55,670 --> 00:14:01,010
down so these are some performance

335
00:13:59,029 --> 00:14:05,420
numbers from a few different sources so

336
00:14:01,010 --> 00:14:07,160
Linux Foundation Red Hat IBM

337
00:14:05,420 --> 00:14:12,410
so the first stat is that when they

338
00:14:07,160 --> 00:14:16,339
disabled audit on SELinux enabled system

339
00:14:12,410 --> 00:14:19,069
call they went from you know 75 down to

340
00:14:16,339 --> 00:14:22,070
40 41 nanoseconds which is a pretty

341
00:14:19,070 --> 00:14:26,209
substantial performance penalty in other

342
00:14:22,070 --> 00:14:29,680
cases having audit just even having the

343
00:14:26,209 --> 00:14:32,739
call auto entry-and-exit resulted in

344
00:14:29,680 --> 00:14:36,560
some twenty percent performance penalty

345
00:14:32,740 --> 00:14:38,000
and then in certain other cases you know

346
00:14:36,560 --> 00:14:40,910
it's the difference between going from

347
00:14:38,000 --> 00:14:43,160
like you know two hundred thousand

348
00:14:40,910 --> 00:14:44,930
operations per second down to like down

349
00:14:43,160 --> 00:14:46,969
to down to three thousand now some of

350
00:14:44,930 --> 00:14:49,520
these performance metrics they're old

351
00:14:46,970 --> 00:14:51,110
and these may have been improved and

352
00:14:49,520 --> 00:14:53,589
kind of more modern versions of the

353
00:14:51,110 --> 00:14:57,620
kernel but there's still kind of other

354
00:14:53,589 --> 00:14:58,730
issues outside of performance and I

355
00:14:57,620 --> 00:15:00,380
don't think that I brought the other one

356
00:14:58,730 --> 00:15:03,079
that I brought up is that you what you

357
00:15:00,380 --> 00:15:06,500
end up having is like a monolithic audit

358
00:15:03,079 --> 00:15:08,029
configuration so you can't say I want to

359
00:15:06,500 --> 00:15:09,500
audit these operations for this

360
00:15:08,029 --> 00:15:11,000
collection of process and those

361
00:15:09,500 --> 00:15:12,920
operations for that collection of

362
00:15:11,000 --> 00:15:15,290
process you're basically stuck with one

363
00:15:12,920 --> 00:15:20,540
global configuration which could be

364
00:15:15,290 --> 00:15:22,040
problematic especially for us so the

365
00:15:20,540 --> 00:15:25,670
other thing that I that I kind of

366
00:15:22,040 --> 00:15:28,910
alluded to is exploit mitigation bypass

367
00:15:25,670 --> 00:15:31,219
operations so the other thing is you

368
00:15:28,910 --> 00:15:33,350
want to be able if there's an exploit

369
00:15:31,220 --> 00:15:35,690
that is starting to run on a process you

370
00:15:33,350 --> 00:15:36,710
want to know immediately especially if

371
00:15:35,690 --> 00:15:39,050
you're in

372
00:15:36,710 --> 00:15:41,270
situation where you want to have like an

373
00:15:39,050 --> 00:15:43,520
attack disruption function where if you

374
00:15:41,270 --> 00:15:46,340
see the beginnings of an exploit

375
00:15:43,520 --> 00:15:48,620
starting to starting to unfold you know

376
00:15:46,340 --> 00:15:50,360
maybe you want to detonate the container

377
00:15:48,620 --> 00:15:53,290
or kill the process or whatever and take

378
00:15:50,360 --> 00:15:55,910
options and you want to do that

379
00:15:53,290 --> 00:15:58,640
preferably why while the exploit is

380
00:15:55,910 --> 00:16:01,579
basically starting to get going so

381
00:15:58,640 --> 00:16:03,500
there's a lot of exploit mitigation

382
00:16:01,580 --> 00:16:06,140
mechanisms out there so that some of the

383
00:16:03,500 --> 00:16:08,810
most kind of like common ones but were

384
00:16:06,140 --> 00:16:11,180
things like tap in Microsoft or just

385
00:16:08,810 --> 00:16:12,520
like the non exec stacks and a lot of

386
00:16:11,180 --> 00:16:16,030
operating systems which basically

387
00:16:12,520 --> 00:16:18,710
prevent an attacker from uploading

388
00:16:16,030 --> 00:16:20,329
uploading the code associated with like

389
00:16:18,710 --> 00:16:24,080
like let's say shellcode payload and

390
00:16:20,330 --> 00:16:27,470
having that execute on the stack things

391
00:16:24,080 --> 00:16:29,090
like wox rx which basically required

392
00:16:27,470 --> 00:16:30,680
that you you can't have like a read a

393
00:16:29,090 --> 00:16:32,720
page of memory that is marked as

394
00:16:30,680 --> 00:16:34,729
executable and writable at the same time

395
00:16:32,720 --> 00:16:36,740
so there's there's all these kind of

396
00:16:34,730 --> 00:16:38,930
exploit mitigations but for every

397
00:16:36,740 --> 00:16:42,310
exploit mitigation people figured out

398
00:16:38,930 --> 00:16:45,199
ways to get around them so really

399
00:16:42,310 --> 00:16:48,140
popular mechanism to get around like

400
00:16:45,200 --> 00:16:51,050
things like non exec stacks are Rob

401
00:16:48,140 --> 00:16:53,810
chains and things like stack pivoting

402
00:16:51,050 --> 00:16:55,790
which basically allows the attacker to

403
00:16:53,810 --> 00:16:57,469
construct stack frames not actually

404
00:16:55,790 --> 00:16:59,209
include the code but actually leverage

405
00:16:57,470 --> 00:17:03,710
the executable code that's already

406
00:16:59,210 --> 00:17:07,220
mapped into the process and we want we

407
00:17:03,710 --> 00:17:09,200
want to be able to see so in order to do

408
00:17:07,220 --> 00:17:11,030
this the attacker needs to basically

409
00:17:09,200 --> 00:17:13,400
have control over a region of memory and

410
00:17:11,030 --> 00:17:16,160
depending on the exploit there may be a

411
00:17:13,400 --> 00:17:19,070
series of either like stock where

412
00:17:16,160 --> 00:17:21,290
rebasing stack pointers or were we're

413
00:17:19,069 --> 00:17:22,849
using other memory protection operations

414
00:17:21,290 --> 00:17:25,280
to set up the pages so that we can

415
00:17:22,849 --> 00:17:28,369
actually run our exploits and so these

416
00:17:25,280 --> 00:17:29,960
are generally system calls that wouldn't

417
00:17:28,369 --> 00:17:32,360
consider that we wouldn't consider to be

418
00:17:29,960 --> 00:17:33,860
memory or sorry security relevant we may

419
00:17:32,360 --> 00:17:35,360
are depending on the operating system

420
00:17:33,860 --> 00:17:38,360
you may or may not be able to even

421
00:17:35,360 --> 00:17:41,629
produce an audit record for them another

422
00:17:38,360 --> 00:17:43,850
case like snap and snap so these were

423
00:17:41,630 --> 00:17:46,280
controls that were implemented to

424
00:17:43,850 --> 00:17:48,620
prevent user space from accessing memory

425
00:17:46,280 --> 00:17:50,330
in the kernel and prevent users pace

426
00:17:48,620 --> 00:17:52,039
from executing

427
00:17:50,330 --> 00:17:55,399
code that basically resides in the

428
00:17:52,039 --> 00:17:58,158
kernel so in some cases where the kernel

429
00:17:55,399 --> 00:18:00,610
is the attack surface you may see the

430
00:17:58,159 --> 00:18:02,960
exploit start off in the kernel and

431
00:18:00,610 --> 00:18:04,340
disable these functionalities so the

432
00:18:02,960 --> 00:18:06,140
remainder of the exploit can actually

433
00:18:04,340 --> 00:18:08,209
operate within user space which makes it

434
00:18:06,140 --> 00:18:11,029
which makes it a little bit easier to

435
00:18:08,210 --> 00:18:12,620
write so in all these cases as mentioned

436
00:18:11,029 --> 00:18:14,090
they kind of manifest themselves it's

437
00:18:12,620 --> 00:18:17,389
like you know either memory or stack

438
00:18:14,090 --> 00:18:20,000
initialization operations and we don't

439
00:18:17,390 --> 00:18:22,309
necessarily want to have even if we

440
00:18:20,000 --> 00:18:24,350
could audit them we don't there's some

441
00:18:22,309 --> 00:18:29,570
performance implications in terms of

442
00:18:24,350 --> 00:18:32,178
doing this in systems so to make matters

443
00:18:29,570 --> 00:18:33,740
worse so I got a little bit so to make

444
00:18:32,179 --> 00:18:38,120
matters worse if you look at some of the

445
00:18:33,740 --> 00:18:40,039
more recent attacks like some of the

446
00:18:38,120 --> 00:18:41,449
speculative attack or speculative

447
00:18:40,039 --> 00:18:44,570
execution attacks like meltdown

448
00:18:41,450 --> 00:18:47,419
inspector there is no real system call

449
00:18:44,570 --> 00:18:50,570
really per se so meltdown is detectable

450
00:18:47,419 --> 00:18:54,470
by hooking the kernel functions that are

451
00:18:50,570 --> 00:18:56,510
responsible for handling fault

452
00:18:54,470 --> 00:18:57,889
and for seg faults as an example and

453
00:18:56,510 --> 00:19:00,379
then you want to look at the address

454
00:18:57,889 --> 00:19:02,959
associated with that fault and if it's

455
00:19:00,380 --> 00:19:04,399
above a certain range and it's in user

456
00:19:02,960 --> 00:19:06,919
space it could be an indication that

457
00:19:04,399 --> 00:19:09,830
meltdown was being exploited for Specter

458
00:19:06,919 --> 00:19:12,529
there's also pmc like performance

459
00:19:09,830 --> 00:19:14,000
monitor counters and the processors that

460
00:19:12,529 --> 00:19:15,559
kind of will measure things like data

461
00:19:14,000 --> 00:19:17,179
cache misses as an example and if

462
00:19:15,559 --> 00:19:19,519
they're seeing this happened

463
00:19:17,179 --> 00:19:21,980
consistently and you're able to track

464
00:19:19,519 --> 00:19:26,419
those counters and there could be ways

465
00:19:21,980 --> 00:19:28,309
that you can you can identify that so

466
00:19:26,419 --> 00:19:29,870
what do we do we can't really like so

467
00:19:28,309 --> 00:19:32,269
auditors pose some challenges for us

468
00:19:29,870 --> 00:19:33,709
there's got to be alternatives so we

469
00:19:32,269 --> 00:19:35,120
could write a bunch of kernel modules to

470
00:19:33,710 --> 00:19:38,950
hook operations that we were interested

471
00:19:35,120 --> 00:19:41,750
and you know and so we kind of did this

472
00:19:38,950 --> 00:19:43,610
with some K probes the problem with this

473
00:19:41,750 --> 00:19:45,399
mechanism we still needed a way to get

474
00:19:43,610 --> 00:19:47,870
the data from the kernel into user space

475
00:19:45,399 --> 00:19:51,279
which required some sort of

476
00:19:47,870 --> 00:19:54,199
serialization we also needed a way to

477
00:19:51,279 --> 00:19:57,409
have kind of like configuration in terms

478
00:19:54,200 --> 00:19:58,970
of like you know having more control we

479
00:19:57,409 --> 00:20:01,309
don't necessarily want to see exact

480
00:19:58,970 --> 00:20:02,870
operations for at we everything maybe we

481
00:20:01,309 --> 00:20:03,770
want to ignore certain binaries but

482
00:20:02,870 --> 00:20:05,870
means that there was some kind of

483
00:20:03,770 --> 00:20:10,970
configuration interface that was

484
00:20:05,870 --> 00:20:13,010
required so the other areas where we can

485
00:20:10,970 --> 00:20:15,020
get this data or dynamic tracing system

486
00:20:13,010 --> 00:20:17,000
so I mentioned K probes K rep probes

487
00:20:15,020 --> 00:20:19,520
Linux u probes which is kind of the same

488
00:20:17,000 --> 00:20:21,680
thing with in user space that allows you

489
00:20:19,520 --> 00:20:23,090
to arbitrarily hook operations in the

490
00:20:21,680 --> 00:20:26,660
kernel and monitor when they're being

491
00:20:23,090 --> 00:20:29,030
executed different like on BSD Mac OS

492
00:20:26,660 --> 00:20:30,980
Solaris just things like D trace which

493
00:20:29,030 --> 00:20:33,830
kind of is similar but has kind of

494
00:20:30,980 --> 00:20:36,610
domain-specific language more modern

495
00:20:33,830 --> 00:20:39,199
versions that kernel have EBP F which

496
00:20:36,610 --> 00:20:42,500
allows you to basically run code add

497
00:20:39,200 --> 00:20:44,120
trace points but the code goes through

498
00:20:42,500 --> 00:20:45,800
like a validation process to make sure

499
00:20:44,120 --> 00:20:47,510
that it's you know a little bit safer

500
00:20:45,800 --> 00:20:51,379
than something like a k' probe and then

501
00:20:47,510 --> 00:20:59,360
and then there's like the perfect which

502
00:20:51,380 --> 00:21:01,700
is more common okay so what we decided

503
00:20:59,360 --> 00:21:04,280
we decided not to do this and we decided

504
00:21:01,700 --> 00:21:06,110
to use something called capsulate which

505
00:21:04,280 --> 00:21:08,600
is an open source project and it's

506
00:21:06,110 --> 00:21:10,790
written in go and it's a daemon that

507
00:21:08,600 --> 00:21:12,830
allows you to submit subscription

508
00:21:10,790 --> 00:21:14,510
objects it takes those objects

509
00:21:12,830 --> 00:21:17,240
translates them into trace points in the

510
00:21:14,510 --> 00:21:20,990
kernel and waits for certain operations

511
00:21:17,240 --> 00:21:24,760
to execute and then basically we'll

512
00:21:20,990 --> 00:21:27,380
provide a protobuf back to you back to a

513
00:21:24,760 --> 00:21:30,760
monitoring process which is really cool

514
00:21:27,380 --> 00:21:32,870
so again it uses G RPC interface

515
00:21:30,760 --> 00:21:33,590
subscription data specified using

516
00:21:32,870 --> 00:21:36,649
protobufs

517
00:21:33,590 --> 00:21:40,250
and resulting telemetry that comes back

518
00:21:36,650 --> 00:21:42,650
is it also basically it comes back

519
00:21:40,250 --> 00:21:45,200
protobuf format it leverages the perf of

520
00:21:42,650 --> 00:21:48,020
n interface you accomplish this which is

521
00:21:45,200 --> 00:21:51,650
one of those dynamic kind of tracing and

522
00:21:48,020 --> 00:21:53,510
debugging frameworks so the architecture

523
00:21:51,650 --> 00:21:56,030
there's basically three main areas

524
00:21:53,510 --> 00:22:00,170
there's a telemetry service which has an

525
00:21:56,030 --> 00:22:02,260
API that you interface with there's an

526
00:22:00,170 --> 00:22:04,340
kind of like an enrichment layer which

527
00:22:02,260 --> 00:22:06,950
monitors when processes are being

528
00:22:04,340 --> 00:22:08,928
created and that sort of thing looks up

529
00:22:06,950 --> 00:22:11,270
user IDs licks up credentials and then

530
00:22:08,929 --> 00:22:13,040
the interface which basically feeds and

531
00:22:11,270 --> 00:22:16,310
inserts the probes and the kernel

532
00:22:13,040 --> 00:22:19,670
there's some talk about implementing

533
00:22:16,310 --> 00:22:22,700
eebee PF but it was mainly used it was

534
00:22:19,670 --> 00:22:25,220
using perfo meant for basically

535
00:22:22,700 --> 00:22:26,330
compatibility reasons so I won't go into

536
00:22:25,220 --> 00:22:27,080
that just cuz I don't have a whole bunch

537
00:22:26,330 --> 00:22:30,230
of time

538
00:22:27,080 --> 00:22:31,850
so basically when this happens you you

539
00:22:30,230 --> 00:22:33,500
get records that gives you like command

540
00:22:31,850 --> 00:22:35,480
line arguments what was executed the

541
00:22:33,500 --> 00:22:37,130
credentials timestamps and that sort of

542
00:22:35,480 --> 00:22:38,990
thing so this is kind of exactly what we

543
00:22:37,130 --> 00:22:40,460
want and it does this use it because

544
00:22:38,990 --> 00:22:42,110
it's using the perf of an interface we

545
00:22:40,460 --> 00:22:44,830
don't have the same performance penalty

546
00:22:42,110 --> 00:22:48,770
that we would if we were using audit

547
00:22:44,830 --> 00:22:50,750
this also required that we had we had to

548
00:22:48,770 --> 00:22:52,310
write a component which basically

549
00:22:50,750 --> 00:22:54,860
integrates this system into our

550
00:22:52,310 --> 00:22:58,580
environment we're storing the

551
00:22:54,860 --> 00:23:00,560
subscription data in Jason filters kind

552
00:22:58,580 --> 00:23:02,179
of stored in an AST format and our

553
00:23:00,560 --> 00:23:05,120
configuration management system is

554
00:23:02,180 --> 00:23:07,980
basically there to suppress duplicate

555
00:23:05,120 --> 00:23:09,100
messages manage the subscriptions and

556
00:23:07,980 --> 00:23:11,420
[Music]

557
00:23:09,100 --> 00:23:12,830
bind them buying the subscriptions to

558
00:23:11,420 --> 00:23:14,480
different control groups so the

559
00:23:12,830 --> 00:23:16,360
interesting thing with perth is that you

560
00:23:14,480 --> 00:23:18,860
can have multiple control groups and

561
00:23:16,360 --> 00:23:21,320
buying different subscription policies

562
00:23:18,860 --> 00:23:23,149
which allows us to basically safer for

563
00:23:21,320 --> 00:23:24,710
our edge Damons we don't want to see

564
00:23:23,150 --> 00:23:26,750
things like accept or connect but we

565
00:23:24,710 --> 00:23:29,300
want to see accept and connect for user

566
00:23:26,750 --> 00:23:31,250
interactive users so you by the use of

567
00:23:29,300 --> 00:23:37,340
control groups this basically allows us

568
00:23:31,250 --> 00:23:41,180
to accomplish that okay I got one minute

569
00:23:37,340 --> 00:23:43,429
left so I won't talk about this

570
00:23:41,180 --> 00:23:45,200
basically this is a service that allows

571
00:23:43,430 --> 00:23:46,640
you to move processes in between

572
00:23:45,200 --> 00:23:49,700
different control groups on a system

573
00:23:46,640 --> 00:23:53,270
it's called CG rules MD and this is how

574
00:23:49,700 --> 00:23:55,250
we're kind of managing things so

575
00:23:53,270 --> 00:23:57,379
conclusions so dynamic tracing

576
00:23:55,250 --> 00:23:58,940
frameworks actually allow you provide

577
00:23:57,380 --> 00:24:00,320
you with a really rich set of

578
00:23:58,940 --> 00:24:03,740
information that allows you to hook

579
00:24:00,320 --> 00:24:07,129
arbitrary operations within the kernel

580
00:24:03,740 --> 00:24:08,780
to identify attacks the evasions are

581
00:24:07,130 --> 00:24:11,120
concerned because it's not as you know

582
00:24:08,780 --> 00:24:12,590
kind of robust so to speak as a security

583
00:24:11,120 --> 00:24:14,030
event auditing which means if you're

584
00:24:12,590 --> 00:24:17,179
going to use these in the you need smoke

585
00:24:14,030 --> 00:24:19,129
screen detection in place so to identify

586
00:24:17,180 --> 00:24:21,560
situations where people are trying to

587
00:24:19,130 --> 00:24:25,930
overload the systems that to result in

588
00:24:21,560 --> 00:24:27,860
loss to basically confuse things and

589
00:24:25,930 --> 00:24:28,970
logging volume and I think that's

590
00:24:27,860 --> 00:24:30,168
actually yeah I don't know if I have

591
00:24:28,970 --> 00:24:36,200
time for questions it's up to

592
00:24:30,169 --> 00:24:38,059
organizers but no well if anybody has

593
00:24:36,200 --> 00:24:40,780
questions feel free to come talk to me

594
00:24:38,059 --> 00:24:47,569
after afterwards though

595
00:24:40,780 --> 00:24:47,569
[Applause]

