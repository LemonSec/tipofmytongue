1
00:00:08,850 --> 00:00:16,410
[Music]

2
00:00:12,559 --> 00:00:19,320
we will hear a bit about microsoft

3
00:00:16,410 --> 00:00:25,080
domain quirks and how they can be

4
00:00:19,320 --> 00:00:27,290
exploited about this hakuto will tell us

5
00:00:25,080 --> 00:00:27,290
now

6
00:00:27,880 --> 00:00:33,800
[Applause]

7
00:00:34,190 --> 00:00:39,709
so hello everyone welcome to my talk

8
00:00:37,040 --> 00:00:42,110
which is called domain computers have

9
00:00:39,710 --> 00:00:44,840
accounts too and in this talk we will

10
00:00:42,110 --> 00:00:47,269
abuse domain accounts to actually be

11
00:00:44,840 --> 00:00:49,700
able to own some machines through a link

12
00:00:47,270 --> 00:00:52,070
and delegation and we will be abusing

13
00:00:49,700 --> 00:00:55,010
some odd quirks some new quirks and I

14
00:00:52,070 --> 00:00:58,520
hope we will have a lot of fun now I

15
00:00:55,010 --> 00:01:01,460
want to start by having a shout out to

16
00:00:58,520 --> 00:01:04,699
some guys who basically did all the hard

17
00:01:01,460 --> 00:01:07,030
work of figuring out ways to abuse

18
00:01:04,699 --> 00:01:09,170
machine accounts I want to mention

19
00:01:07,030 --> 00:01:12,170
specifically these people which is like

20
00:01:09,170 --> 00:01:15,229
Christensen's will Schroeder Matt Nelson

21
00:01:12,170 --> 00:01:17,150
and Electra Mira and Dugan but there are

22
00:01:15,229 --> 00:01:19,700
a lot of others that basically over the

23
00:01:17,150 --> 00:01:21,560
years spend a lot of time digging into

24
00:01:19,700 --> 00:01:23,840
the Active Directory and Microsoft

25
00:01:21,560 --> 00:01:26,479
domains so everybody else who paved way

26
00:01:23,840 --> 00:01:29,030
for this research you did a great job

27
00:01:26,479 --> 00:01:30,950
and I also want to thank my employer

28
00:01:29,030 --> 00:01:33,050
because it's nice to be able to do your

29
00:01:30,950 --> 00:01:36,950
own research without having to worry

30
00:01:33,050 --> 00:01:40,130
about paying the rent so we will start

31
00:01:36,950 --> 00:01:42,970
with a very old technology that's a part

32
00:01:40,130 --> 00:01:47,300
of Microsoft Active Directory and that's

33
00:01:42,970 --> 00:01:50,030
ntlm NTM stands for new technology land

34
00:01:47,300 --> 00:01:54,619
manager and the NT means it was

35
00:01:50,030 --> 00:01:56,300
introduced in windows NT 4.0 which it

36
00:01:54,619 --> 00:01:58,610
was introduced in 1996 which

37
00:01:56,300 --> 00:02:00,740
incidentally the protocols are older

38
00:01:58,610 --> 00:02:04,100
than I am so it's a pretty ancient stuff

39
00:02:00,740 --> 00:02:05,810
now ntlm is a suit of protocols for

40
00:02:04,100 --> 00:02:08,000
security because there's a lot of

41
00:02:05,810 --> 00:02:11,840
terminology a lot of confusing

42
00:02:08,000 --> 00:02:13,730
terminology when it comes to ntlm and we

43
00:02:11,840 --> 00:02:15,410
will call indium the whole package of

44
00:02:13,730 --> 00:02:17,269
different protocols that are used for

45
00:02:15,410 --> 00:02:19,640
basically everything you need to be able

46
00:02:17,270 --> 00:02:22,130
to communicate on the network securely

47
00:02:19,640 --> 00:02:25,220
so challenge/response authentication

48
00:02:22,130 --> 00:02:29,120
protocols signing protocols to whole

49
00:02:25,220 --> 00:02:32,359
package and NPM is best known for what's

50
00:02:29,120 --> 00:02:34,849
often called the ante on hash which is a

51
00:02:32,360 --> 00:02:36,920
hash of the user password and basically

52
00:02:34,849 --> 00:02:38,720
everybody who used mimikatz

53
00:02:36,920 --> 00:02:41,030
probably dumped their

54
00:02:38,720 --> 00:02:43,130
Indian hash of the password and there's

55
00:02:41,030 --> 00:02:45,590
a lot of talk about pass the hash

56
00:02:43,130 --> 00:02:48,260
attacks but we will not talk about those

57
00:02:45,590 --> 00:02:50,780
because for this talk the the most

58
00:02:48,260 --> 00:02:54,980
important thing from NPRM is the

59
00:02:50,780 --> 00:02:56,510
challenge response protocol so the way

60
00:02:54,980 --> 00:02:59,359
change response protocols work in

61
00:02:56,510 --> 00:03:01,820
general is that there is a shared secret

62
00:02:59,360 --> 00:03:03,470
between the client and the server so

63
00:03:01,820 --> 00:03:06,049
there is something both of them know and

64
00:03:03,470 --> 00:03:07,820
therefore both of them can do a

65
00:03:06,050 --> 00:03:10,160
calculation based on some random

66
00:03:07,820 --> 00:03:12,380
challenge and both of them will get the

67
00:03:10,160 --> 00:03:15,290
same results if they really know the

68
00:03:12,380 --> 00:03:17,000
same secret so the way it works as can

69
00:03:15,290 --> 00:03:18,560
be seen from this from this diagram is

70
00:03:17,000 --> 00:03:20,810
that when the client wants to

71
00:03:18,560 --> 00:03:23,660
authenticate to the server the server

72
00:03:20,810 --> 00:03:25,460
sends back random 42 bit non-number in

73
00:03:23,660 --> 00:03:29,270
this case which is the server challenge

74
00:03:25,460 --> 00:03:31,100
and both of them calculate do the same

75
00:03:29,270 --> 00:03:32,750
calculation with the shared secret which

76
00:03:31,100 --> 00:03:35,660
in this case is the hash of the user's

77
00:03:32,750 --> 00:03:38,000
password and hopefully they will come to

78
00:03:35,660 --> 00:03:39,560
the same result so then the client sends

79
00:03:38,000 --> 00:03:42,370
the answer to the challenge to the

80
00:03:39,560 --> 00:03:46,010
server and the server can verify it and

81
00:03:42,370 --> 00:03:49,130
in version 2 there is also voluntary

82
00:03:46,010 --> 00:03:50,690
client challenge step so also not only

83
00:03:49,130 --> 00:03:53,239
the server can be sure that the client

84
00:03:50,690 --> 00:03:55,100
knows the secret but also the client can

85
00:03:53,239 --> 00:03:57,140
verify that the server knows the secret

86
00:03:55,100 --> 00:04:01,850
as well now throughout this presentation

87
00:03:57,140 --> 00:04:04,429
I will have some footnotes I these are

88
00:04:01,850 --> 00:04:06,320
things that I think are interesting but

89
00:04:04,430 --> 00:04:08,959
our out of the scope for this talk so

90
00:04:06,320 --> 00:04:10,850
it's more like something that you can

91
00:04:08,959 --> 00:04:13,220
later check out when you check the slide

92
00:04:10,850 --> 00:04:16,850
deck or read if if I'm talking about

93
00:04:13,220 --> 00:04:19,010
something you already know so now the

94
00:04:16,850 --> 00:04:21,550
thing about challenge response protocols

95
00:04:19,010 --> 00:04:24,830
is that there's they are often

96
00:04:21,550 --> 00:04:28,640
vulnerable to what's called a brilliant

97
00:04:24,830 --> 00:04:32,840
relaying attack and let and erm is

98
00:04:28,640 --> 00:04:37,099
unfortunately no different so how does

99
00:04:32,840 --> 00:04:39,200
really work what's important from this

100
00:04:37,100 --> 00:04:41,210
diagram is that as you can see the first

101
00:04:39,200 --> 00:04:44,599
thing that actually happens is that the

102
00:04:41,210 --> 00:04:46,460
client attempts to authenticate to the

103
00:04:44,600 --> 00:04:48,740
attacker which is the skull in the

104
00:04:46,460 --> 00:04:50,060
middle so the client goes to the

105
00:04:48,740 --> 00:04:52,630
attacker and says I want to authenticate

106
00:04:50,060 --> 00:04:54,580
to you using net ntr

107
00:04:52,630 --> 00:04:57,850
and the attacker instead of generating a

108
00:04:54,580 --> 00:04:59,680
random challenge instead asks for a

109
00:04:57,850 --> 00:05:01,450
child for the challenge a server it

110
00:04:59,680 --> 00:05:04,870
basically wants to authenticate to

111
00:05:01,450 --> 00:05:07,210
without knowing the shared secret and so

112
00:05:04,870 --> 00:05:09,640
it gets its own server challenge around

113
00:05:07,210 --> 00:05:11,979
them one and then just forwards it to

114
00:05:09,640 --> 00:05:14,289
the client using it as an Oracle for

115
00:05:11,980 --> 00:05:16,840
calculating responses to the challenge

116
00:05:14,290 --> 00:05:17,470
so the client as it wanted to connect to

117
00:05:16,840 --> 00:05:19,750
the attacker

118
00:05:17,470 --> 00:05:21,700
it will help happily comply it will

119
00:05:19,750 --> 00:05:23,890
calculate the answer to the challenge

120
00:05:21,700 --> 00:05:26,760
send it to the attacker and the attacker

121
00:05:23,890 --> 00:05:29,740
can then or forward it to the server now

122
00:05:26,760 --> 00:05:31,570
obviously it can completely even if

123
00:05:29,740 --> 00:05:33,640
there is a random kind challenge it can

124
00:05:31,570 --> 00:05:35,230
completely ignore it that's we as a

125
00:05:33,640 --> 00:05:38,979
attacker don't care whether the server

126
00:05:35,230 --> 00:05:40,960
really knows the secret we just want to

127
00:05:38,980 --> 00:05:42,400
authenticate and we can just happily

128
00:05:40,960 --> 00:05:43,719
kill the connection with the client and

129
00:05:42,400 --> 00:05:47,169
said something went wrong we are

130
00:05:43,720 --> 00:05:48,520
connection reset that so the two

131
00:05:47,170 --> 00:05:52,540
important things to take from this

132
00:05:48,520 --> 00:05:55,630
diagram about relying is that in this

133
00:05:52,540 --> 00:05:59,350
scenario the attacker has absolutely no

134
00:05:55,630 --> 00:06:02,710
knowledge of of the shared secret I mean

135
00:05:59,350 --> 00:06:04,990
if the if the if the challenge challenge

136
00:06:02,710 --> 00:06:07,210
response calculation is vulnerable to

137
00:06:04,990 --> 00:06:09,160
for example brute forcing he can try to

138
00:06:07,210 --> 00:06:13,030
force brute force

139
00:06:09,160 --> 00:06:15,280
the secret but this attack by itself

140
00:06:13,030 --> 00:06:17,859
doesn't give the attacker any knowledge

141
00:06:15,280 --> 00:06:19,929
about the secret and the other important

142
00:06:17,860 --> 00:06:22,330
thing is that as I said earlier the

143
00:06:19,930 --> 00:06:24,520
client has to initiate the connection so

144
00:06:22,330 --> 00:06:27,640
or we have to have another way of

145
00:06:24,520 --> 00:06:28,990
forcing the client to connect to us now

146
00:06:27,640 --> 00:06:31,229
because this is a pretty big deal and

147
00:06:28,990 --> 00:06:34,150
it's been known for for quite a while

148
00:06:31,230 --> 00:06:38,710
there is actually a mitigation in net

149
00:06:34,150 --> 00:06:41,169
ntlm and that is that apart from just

150
00:06:38,710 --> 00:06:44,109
being used to prove that you have a

151
00:06:41,170 --> 00:06:46,120
knowledge of a shared secret net

152
00:06:44,110 --> 00:06:48,610
internal can also derive a session key

153
00:06:46,120 --> 00:06:49,930
from the shared secret so as I said

154
00:06:48,610 --> 00:06:51,490
earlier because the attacker doesn't

155
00:06:49,930 --> 00:06:53,350
know the shared secret

156
00:06:51,490 --> 00:06:55,390
he can't calculate the session key

157
00:06:53,350 --> 00:06:57,700
there's no way he can guess it from the

158
00:06:55,390 --> 00:07:00,490
from the challenge response protocol and

159
00:06:57,700 --> 00:07:02,260
when signing is enforced on signing is

160
00:07:00,490 --> 00:07:04,990
negotiated between the two sides

161
00:07:02,260 --> 00:07:05,940
I have every message going through must

162
00:07:04,990 --> 00:07:09,330
be signed with the

163
00:07:05,940 --> 00:07:11,910
shanky so you can relay authentication

164
00:07:09,330 --> 00:07:14,340
it will work it will go through fine but

165
00:07:11,910 --> 00:07:16,860
after that you can't basically create

166
00:07:14,340 --> 00:07:18,630
your own messages or even tamper with

167
00:07:16,860 --> 00:07:20,940
tempura with messages coming from the

168
00:07:18,630 --> 00:07:22,200
client because you have you don't have

169
00:07:20,940 --> 00:07:25,140
any knowledge of the session key and

170
00:07:22,200 --> 00:07:29,159
therefore you can sign you can sign any

171
00:07:25,140 --> 00:07:31,740
messages however the interesting quirk

172
00:07:29,160 --> 00:07:34,350
is that not all protocols are support

173
00:07:31,740 --> 00:07:37,260
support signing so you can't force

174
00:07:34,350 --> 00:07:39,500
signing for all protocols the most

175
00:07:37,260 --> 00:07:43,590
common protocols that are used with an

176
00:07:39,500 --> 00:07:45,720
authentication which is SMB and LDAP

177
00:07:43,590 --> 00:07:47,729
which is used for accessing the

178
00:07:45,720 --> 00:07:49,890
basically the Active Directory the

179
00:07:47,730 --> 00:07:53,490
properties of objects and user accounts

180
00:07:49,890 --> 00:07:57,479
etc they do support timing but HTTP

181
00:07:53,490 --> 00:07:59,790
doesn't at all so if you somehow force a

182
00:07:57,480 --> 00:08:03,420
client to try to connect to you over

183
00:07:59,790 --> 00:08:05,370
HTTP and authenticate using net ntlm you

184
00:08:03,420 --> 00:08:08,850
can be sure that it won't ever ask for

185
00:08:05,370 --> 00:08:13,230
signing because it doesn't even attempt

186
00:08:08,850 --> 00:08:15,510
to ask for signing over HTTP and another

187
00:08:13,230 --> 00:08:17,669
interesting thing about this is the

188
00:08:15,510 --> 00:08:19,730
first message that's actually sent which

189
00:08:17,669 --> 00:08:22,890
is the negotiation message the ntlmssp

190
00:08:19,730 --> 00:08:25,470
negotiate contains a bit mask of

191
00:08:22,890 --> 00:08:27,840
requested security features it's the way

192
00:08:25,470 --> 00:08:30,000
how the client and server agree on how

193
00:08:27,840 --> 00:08:31,950
strong encryption they will use etc so

194
00:08:30,000 --> 00:08:33,690
it can for example say I don't want to

195
00:08:31,950 --> 00:08:36,718
do signing ever or I want to designing

196
00:08:33,690 --> 00:08:38,640
if you can or I need signing don't even

197
00:08:36,719 --> 00:08:40,919
bother answering if you don't separate

198
00:08:38,640 --> 00:08:43,710
and willingness to use the first version

199
00:08:40,919 --> 00:08:47,130
of nettle tea lemon which is way weaker

200
00:08:43,710 --> 00:08:49,560
than version 2 and the important thing

201
00:08:47,130 --> 00:08:52,170
is this message contains again a

202
00:08:49,560 --> 00:08:53,219
signature signature again based on the

203
00:08:52,170 --> 00:08:55,709
shared secret called

204
00:08:53,220 --> 00:08:58,610
M I see the message integrity code and

205
00:08:55,710 --> 00:09:00,960
therefore cannot be easily temperate and

206
00:08:58,610 --> 00:09:03,990
again say for implementation bugs

207
00:09:00,960 --> 00:09:06,120
because there was recently there was a

208
00:09:03,990 --> 00:09:09,030
drop the mic vulnerability that

209
00:09:06,120 --> 00:09:11,820
basically allows you to completely throw

210
00:09:09,030 --> 00:09:14,640
away the message integrity code but that

211
00:09:11,820 --> 00:09:17,130
was a back and was promptly fixed so it

212
00:09:14,640 --> 00:09:19,210
shouldn't be possible which means you

213
00:09:17,130 --> 00:09:23,080
can't easily downgrade a request for

214
00:09:19,210 --> 00:09:26,290
not only not only when the signing is

215
00:09:23,080 --> 00:09:28,270
enforced but for example if for SMB you

216
00:09:26,290 --> 00:09:29,890
just have a client that says hey if you

217
00:09:28,270 --> 00:09:32,500
can do signing do it please

218
00:09:29,890 --> 00:09:34,780
then you can just you can only relay

219
00:09:32,500 --> 00:09:37,900
this message completely even with this

220
00:09:34,780 --> 00:09:39,730
bit set and therefore if also the server

221
00:09:37,900 --> 00:09:42,220
can do can do signing they will

222
00:09:39,730 --> 00:09:44,860
negotiate it even when you are men in

223
00:09:42,220 --> 00:09:48,130
the middle in their connection so even

224
00:09:44,860 --> 00:09:50,080
if even if the signing is only requested

225
00:09:48,130 --> 00:09:52,170
you are basically screwed and can't

226
00:09:50,080 --> 00:09:55,060
communicate easily which is again why

227
00:09:52,170 --> 00:09:56,920
why the fact that HTTP doesn't support

228
00:09:55,060 --> 00:09:58,810
signing is so important for us because

229
00:09:56,920 --> 00:10:01,329
it gives us a primitive that allows us

230
00:09:58,810 --> 00:10:04,660
to rely easily without having to worry

231
00:10:01,330 --> 00:10:07,450
about negotiation signing and so now

232
00:10:04,660 --> 00:10:09,640
this was a primer on until MN and until

233
00:10:07,450 --> 00:10:11,080
I'm relying and now let's get to the

234
00:10:09,640 --> 00:10:13,530
title of the talk which is domain

235
00:10:11,080 --> 00:10:15,700
computers and accounts - and actually

236
00:10:13,530 --> 00:10:18,810
every machine that's joined to a domain

237
00:10:15,700 --> 00:10:22,300
has its own account in Active Directory

238
00:10:18,810 --> 00:10:24,520
so I will do again the terminology is

239
00:10:22,300 --> 00:10:27,910
kind of kind of awkward here but I will

240
00:10:24,520 --> 00:10:30,880
you be using account to actually refer

241
00:10:27,910 --> 00:10:33,880
to to an item that's actually in the

242
00:10:30,880 --> 00:10:35,890
Active Directory and I will be using

243
00:10:33,880 --> 00:10:37,870
user accounts for accounts that are

244
00:10:35,890 --> 00:10:39,220
actually for users and machine accounts

245
00:10:37,870 --> 00:10:41,830
for accounts that are actually

246
00:10:39,220 --> 00:10:43,750
representing machines and the way you

247
00:10:41,830 --> 00:10:46,900
can recognize these these accounts is

248
00:10:43,750 --> 00:10:48,730
that the name of the account always ends

249
00:10:46,900 --> 00:10:51,449
with a dollar so for example if you have

250
00:10:48,730 --> 00:10:54,310
a desktop 8 k scg bf6

251
00:10:51,450 --> 00:10:56,020
registered in the domain it will have an

252
00:10:54,310 --> 00:11:00,359
account with this name with the dollar

253
00:10:56,020 --> 00:11:02,920
sign at the end now there are not many

254
00:11:00,360 --> 00:11:05,260
differences between user accounts and

255
00:11:02,920 --> 00:11:07,780
machine accounts the most important

256
00:11:05,260 --> 00:11:10,600
difference is that the machine accounts

257
00:11:07,780 --> 00:11:12,670
have very long I think it's like 32

258
00:11:10,600 --> 00:11:15,190
characters randomly generated passwords

259
00:11:12,670 --> 00:11:18,670
which can even contain invalid utf-16

260
00:11:15,190 --> 00:11:22,450
characters so it's basically 64 bytes

261
00:11:18,670 --> 00:11:24,310
random or maybe 42 bytes I'm not really

262
00:11:22,450 --> 00:11:26,410
sure here but the point is it's it's too

263
00:11:24,310 --> 00:11:28,420
long to brute force so guessing machine

264
00:11:26,410 --> 00:11:31,030
account passwords is basically

265
00:11:28,420 --> 00:11:32,890
impossible but apart from that it can do

266
00:11:31,030 --> 00:11:34,900
all the things that

267
00:11:32,890 --> 00:11:37,449
regular accounts can do so it can

268
00:11:34,900 --> 00:11:38,949
authenticate using ntlm it can get

269
00:11:37,450 --> 00:11:42,130
Kerberos tickets which we will talk

270
00:11:38,950 --> 00:11:44,080
about in a minute and it can be a victim

271
00:11:42,130 --> 00:11:46,870
of ntlm relating so it can be a victim

272
00:11:44,080 --> 00:11:49,390
of the attack I showed before so the big

273
00:11:46,870 --> 00:11:51,310
question is can we own a computer by

274
00:11:49,390 --> 00:11:55,090
relying it's machine credentials let's

275
00:11:51,310 --> 00:11:56,920
say we have a way of asking or forcing

276
00:11:55,090 --> 00:11:59,140
the computer to authenticate to us using

277
00:11:56,920 --> 00:12:01,900
its machine credentials and we can relay

278
00:11:59,140 --> 00:12:03,910
it somewhere where do we relate to on

279
00:12:01,900 --> 00:12:06,340
the computer is there even such a way

280
00:12:03,910 --> 00:12:09,400
and this was an open question for a long

281
00:12:06,340 --> 00:12:12,220
time and just recently in last year and

282
00:12:09,400 --> 00:12:14,829
this year we started to see some answers

283
00:12:12,220 --> 00:12:16,540
for it and to be able to answer this

284
00:12:14,830 --> 00:12:20,710
question we have to look at another

285
00:12:16,540 --> 00:12:22,180
authentication or or another security

286
00:12:20,710 --> 00:12:24,940
protocol that's used on Microsoft

287
00:12:22,180 --> 00:12:31,449
domains and that is Kerberos now

288
00:12:24,940 --> 00:12:34,900
Kerberos is is a protocol for

289
00:12:31,450 --> 00:12:37,180
distribution of symmetric keys so it's

290
00:12:34,900 --> 00:12:39,790
it's it's a very complex piece basically

291
00:12:37,180 --> 00:12:41,410
it was designed by in MIT and then

292
00:12:39,790 --> 00:12:44,230
Microsoft I did a lot of its own stuff

293
00:12:41,410 --> 00:12:46,060
to it and it's a very complex Beast so

294
00:12:44,230 --> 00:12:49,510
this is basically the topic that I will

295
00:12:46,060 --> 00:12:52,420
be simplifying the most and we will not

296
00:12:49,510 --> 00:12:55,060
care about distributing any keys etc we

297
00:12:52,420 --> 00:12:58,449
will just care about the authentication

298
00:12:55,060 --> 00:13:01,359
factor of this of this protocol and so

299
00:12:58,450 --> 00:13:03,400
briefly as I try to explain the basics

300
00:13:01,360 --> 00:13:08,560
and I hope I will not end up like Swift

301
00:13:03,400 --> 00:13:11,709
on Swift on security so the first thing

302
00:13:08,560 --> 00:13:14,800
that you need to know about is what TGT

303
00:13:11,710 --> 00:13:16,720
is it's it's a mouthful it's a ticket

304
00:13:14,800 --> 00:13:18,370
granting ticket and it's basically a

305
00:13:16,720 --> 00:13:21,070
proof that you authenticate it that you

306
00:13:18,370 --> 00:13:24,310
can later use to request tickets for for

307
00:13:21,070 --> 00:13:26,320
services so the favorite info technology

308
00:13:24,310 --> 00:13:28,839
here is an analogy with an amusing

309
00:13:26,320 --> 00:13:32,170
amusement park so if you come to an

310
00:13:28,840 --> 00:13:34,840
amusement park and ask for for a ticket

311
00:13:32,170 --> 00:13:36,760
for the whole day for for all the

312
00:13:34,840 --> 00:13:39,280
attractions you can basically buy it and

313
00:13:36,760 --> 00:13:41,110
this is what what is your TGT and later

314
00:13:39,280 --> 00:13:43,000
when you want to get for example coins

315
00:13:41,110 --> 00:13:45,470
for bumper cars or something you just go

316
00:13:43,000 --> 00:13:47,150
to the booth present your

317
00:13:45,470 --> 00:13:49,340
hold a ticket and they will give you

318
00:13:47,150 --> 00:13:51,590
coins for the car right which is the

319
00:13:49,340 --> 00:13:54,290
ticket for the for the for the service

320
00:13:51,590 --> 00:13:56,150
so and basically why I want to use the

321
00:13:54,290 --> 00:13:58,189
TGT is that you can only once

322
00:13:56,150 --> 00:14:00,110
authenticate using your password or

323
00:13:58,190 --> 00:14:01,850
using your password hash etc and then

324
00:14:00,110 --> 00:14:04,100
you have this ticket that doesn't have

325
00:14:01,850 --> 00:14:05,360
any relation to the user's password that

326
00:14:04,100 --> 00:14:08,240
you can just go around and pass to

327
00:14:05,360 --> 00:14:10,970
everybody and your identity only needs

328
00:14:08,240 --> 00:14:12,710
to be checked once so you only need to

329
00:14:10,970 --> 00:14:15,620
authenticate once and all the other

330
00:14:12,710 --> 00:14:18,320
steps can be authorization so only can

331
00:14:15,620 --> 00:14:20,930
can this user access this not is it's

332
00:14:18,320 --> 00:14:23,630
really that user so the way of getting a

333
00:14:20,930 --> 00:14:26,780
TGT is very simple you just ask for a

334
00:14:23,630 --> 00:14:29,270
TGT the Kerberos distribution center

335
00:14:26,780 --> 00:14:33,079
says that you need to pre authenticate

336
00:14:29,270 --> 00:14:35,360
so you again send Center another request

337
00:14:33,080 --> 00:14:36,830
this time sending a password hash or a

338
00:14:35,360 --> 00:14:40,030
key or something that basically can

339
00:14:36,830 --> 00:14:42,860
prove who you are and you get your TGT

340
00:14:40,030 --> 00:14:46,790
now the other part of Kerberos after you

341
00:14:42,860 --> 00:14:48,530
have ot GT our services and don't think

342
00:14:46,790 --> 00:14:50,920
about services as in windows services

343
00:14:48,530 --> 00:14:53,870
which again the terminology sucks but

344
00:14:50,920 --> 00:14:56,360
think about different protocols so for

345
00:14:53,870 --> 00:14:59,510
example LDAP isn't service is a service

346
00:14:56,360 --> 00:15:01,550
HTTP is a service safes which is another

347
00:14:59,510 --> 00:15:05,480
name for SMB file-sharing is a service

348
00:15:01,550 --> 00:15:07,400
and every such service has an SPN or a

349
00:15:05,480 --> 00:15:09,380
service principle name which is

350
00:15:07,400 --> 00:15:13,340
basically a unique identifier used in

351
00:15:09,380 --> 00:15:15,200
the domain for for for this for this

352
00:15:13,340 --> 00:15:17,630
particular service that you want to

353
00:15:15,200 --> 00:15:19,760
authenticate to so some examples of SP

354
00:15:17,630 --> 00:15:21,920
ends are held up size DC domain.com

355
00:15:19,760 --> 00:15:25,040
which is the LDAP service on the domain

356
00:15:21,920 --> 00:15:27,229
controller or safe set fires domain.com

357
00:15:25,040 --> 00:15:30,860
which is basically a file sharing

358
00:15:27,230 --> 00:15:32,210
service on a file sharing server so now

359
00:15:30,860 --> 00:15:34,730
when you already have a tgd

360
00:15:32,210 --> 00:15:36,440
authenticated to a service is simple you

361
00:15:34,730 --> 00:15:38,810
just go to the Kerberos distribution

362
00:15:36,440 --> 00:15:41,000
center ask for a ticket for for example

363
00:15:38,810 --> 00:15:42,020
save slash face domain.com prove

364
00:15:41,000 --> 00:15:44,800
yourself with the TGT

365
00:15:42,020 --> 00:15:46,970
and the Kerberos distribution center

366
00:15:44,800 --> 00:15:49,430
checks your TGT that is basically

367
00:15:46,970 --> 00:15:51,260
correct and gives you back a ticket that

368
00:15:49,430 --> 00:15:52,609
you can use to authenticate to the to

369
00:15:51,260 --> 00:15:56,300
the server to the faster domain.com

370
00:15:52,610 --> 00:15:58,940
server as I said earlier as Kerberos is

371
00:15:56,300 --> 00:16:01,760
more like a key distribution

372
00:15:58,940 --> 00:16:03,290
you also about from the out of the

373
00:16:01,760 --> 00:16:05,360
authentication part you also get the key

374
00:16:03,290 --> 00:16:07,370
that you are supposed to use to encrypt

375
00:16:05,360 --> 00:16:11,120
the communication but but it's not

376
00:16:07,370 --> 00:16:15,410
important for this talk so one thing

377
00:16:11,120 --> 00:16:16,780
that is common to all complex and mature

378
00:16:15,410 --> 00:16:19,189
or I don't know how we want to call it

379
00:16:16,780 --> 00:16:20,930
protocols that take care of

380
00:16:19,190 --> 00:16:24,680
authentication is that they often want

381
00:16:20,930 --> 00:16:26,959
to provide some way of delegation or

382
00:16:24,680 --> 00:16:28,880
impersonation so some some primitive

383
00:16:26,960 --> 00:16:31,010
that allows you to pretend to be someone

384
00:16:28,880 --> 00:16:34,450
you really are not and this is useful

385
00:16:31,010 --> 00:16:37,069
they say it is useful for single sign-on

386
00:16:34,450 --> 00:16:38,840
for single sign-on so for example when

387
00:16:37,070 --> 00:16:41,150
you connect to a server and that server

388
00:16:38,840 --> 00:16:43,160
wants to for example connect to a backup

389
00:16:41,150 --> 00:16:45,890
server and then it can use your

390
00:16:43,160 --> 00:16:48,199
credentials so it seems like if you

391
00:16:45,890 --> 00:16:51,410
directly connect it to it and all of the

392
00:16:48,200 --> 00:16:54,650
all of the authorization all of the ACLs

393
00:16:51,410 --> 00:16:57,680
you have set up basically basically work

394
00:16:54,650 --> 00:17:00,260
and so it's it's something that this

395
00:16:57,680 --> 00:17:01,819
protocols often do and Kerberos or at

396
00:17:00,260 --> 00:17:04,369
least the Microsoft implementation of

397
00:17:01,820 --> 00:17:06,260
Kerberos is no different and the most

398
00:17:04,369 --> 00:17:08,329
powerful delegation is so-called

399
00:17:06,260 --> 00:17:10,970
unconstrained delegation it even had it

400
00:17:08,329 --> 00:17:14,329
in its name and what it basically means

401
00:17:10,970 --> 00:17:16,550
that if you set up a service or set up a

402
00:17:14,329 --> 00:17:18,589
machine there are for all services on

403
00:17:16,550 --> 00:17:20,569
that machine for unconstrained

404
00:17:18,589 --> 00:17:24,619
delegation it means that every ticket

405
00:17:20,569 --> 00:17:27,679
that the KDC generates for for this

406
00:17:24,619 --> 00:17:30,649
machine contains the TGT of the of the

407
00:17:27,680 --> 00:17:33,170
original user such that the service can

408
00:17:30,650 --> 00:17:34,730
decrypt it therefore once you you

409
00:17:33,170 --> 00:17:36,560
actually give this ticket pass this

410
00:17:34,730 --> 00:17:38,870
ticket to to the server you want to

411
00:17:36,560 --> 00:17:40,820
connect to it can decrypt it and it can

412
00:17:38,870 --> 00:17:42,439
do everything it will be able to do as

413
00:17:40,820 --> 00:17:44,149
if it out indicated with a password it

414
00:17:42,440 --> 00:17:45,590
basically has the the master ticket the

415
00:17:44,150 --> 00:17:49,040
ticket granting ticket it basically has

416
00:17:45,590 --> 00:17:51,260
a copy of your of your proof that of

417
00:17:49,040 --> 00:17:53,930
your proof of who you are however and

418
00:17:51,260 --> 00:17:55,520
this is very sensible is that by default

419
00:17:53,930 --> 00:17:57,230
this is something only domain

420
00:17:55,520 --> 00:17:59,300
administrator can set up because

421
00:17:57,230 --> 00:18:02,330
basically when when you compromise a

422
00:17:59,300 --> 00:18:04,730
house that has unconstrained delegation

423
00:18:02,330 --> 00:18:07,399
allowed every time you get somebody to

424
00:18:04,730 --> 00:18:09,860
to authenticate to you you basically

425
00:18:07,400 --> 00:18:11,350
stole their credentials or basically you

426
00:18:09,860 --> 00:18:13,449
can go around and

427
00:18:11,350 --> 00:18:15,159
tell everybody that I am domain

428
00:18:13,450 --> 00:18:18,640
administrator and and they will believe

429
00:18:15,160 --> 00:18:19,510
you so I again prepared a small diagram

430
00:18:18,640 --> 00:18:21,550
how it works

431
00:18:19,510 --> 00:18:24,660
it's almost the same as getting regular

432
00:18:21,550 --> 00:18:28,720
tickets but this time the KDC actually

433
00:18:24,660 --> 00:18:30,820
includes the TGT in the response but as

434
00:18:28,720 --> 00:18:32,950
it's encrypted with a key of the target

435
00:18:30,820 --> 00:18:36,010
you as a client can't really tell

436
00:18:32,950 --> 00:18:38,710
whether it's whether the TGT is in it or

437
00:18:36,010 --> 00:18:40,900
isn't isn't in it you just pass it to

438
00:18:38,710 --> 00:18:44,650
the server and it can see oh he gave me

439
00:18:40,900 --> 00:18:46,600
a TGT that's nice and this is very

440
00:18:44,650 --> 00:18:48,130
powerful but also very dangerous because

441
00:18:46,600 --> 00:18:50,080
basically when you trust somebody for a

442
00:18:48,130 --> 00:18:52,900
constant delegation they can go around

443
00:18:50,080 --> 00:18:55,210
your domain and pretend to be anybody to

444
00:18:52,900 --> 00:18:58,150
everyone else so Microsoft introduced

445
00:18:55,210 --> 00:19:01,780
what they call constraint delegation or

446
00:18:58,150 --> 00:19:03,730
as for you to proxy and this time

447
00:19:01,780 --> 00:19:05,710
actually the trust is not like a global

448
00:19:03,730 --> 00:19:08,650
whole domain thing but the trust is set

449
00:19:05,710 --> 00:19:10,120
up between two to services actually in

450
00:19:08,650 --> 00:19:12,400
the Microsoft implementation it's most

451
00:19:10,120 --> 00:19:14,679
often set between two machines which

452
00:19:12,400 --> 00:19:16,900
basically means that if PCI trusts PCB

453
00:19:14,680 --> 00:19:20,470
then every service on PCA trusts every

454
00:19:16,900 --> 00:19:22,330
service on PCB and it works very

455
00:19:20,470 --> 00:19:24,790
similarly but this time there's no TGT

456
00:19:22,330 --> 00:19:26,860
passing because if you pass your digiti

457
00:19:24,790 --> 00:19:29,500
to somebody there's no way anybody can

458
00:19:26,860 --> 00:19:33,100
limit you on what you can do but this

459
00:19:29,500 --> 00:19:34,840
time if the trusted service gets a four

460
00:19:33,100 --> 00:19:38,020
variable ticket that actually

461
00:19:34,840 --> 00:19:40,870
authenticates user for the photo trusted

462
00:19:38,020 --> 00:19:43,060
service then it can ask the KDC to turn

463
00:19:40,870 --> 00:19:45,969
it into a ticket authenticated the same

464
00:19:43,060 --> 00:19:48,370
user but for the trusty machine so in

465
00:19:45,970 --> 00:19:52,300
the example we had before when user

466
00:19:48,370 --> 00:19:54,040
sends a ticket to shifts at PCB the

467
00:19:52,300 --> 00:19:56,490
service can take this ticket use it as a

468
00:19:54,040 --> 00:19:59,560
proof that the user actually accessed it

469
00:19:56,490 --> 00:20:02,770
go to the caddy KDC and get the ticket

470
00:19:59,560 --> 00:20:05,169
for for her held up at PCA which

471
00:20:02,770 --> 00:20:08,710
basically trusts all tickets from PCB

472
00:20:05,170 --> 00:20:09,700
the way it were it looks like in in a

473
00:20:08,710 --> 00:20:12,100
diagram is that

474
00:20:09,700 --> 00:20:14,860
yeah the ticket exchange is the same as

475
00:20:12,100 --> 00:20:19,480
always but now let's pretend that for

476
00:20:14,860 --> 00:20:21,399
example Pfizer domain.com has has a has

477
00:20:19,480 --> 00:20:23,860
a service that basically allows you to

478
00:20:21,400 --> 00:20:27,010
get an older older version of the file

479
00:20:23,860 --> 00:20:30,309
and it wants to preserve all ACL etc so

480
00:20:27,010 --> 00:20:33,010
the backup the domain.com trusts all

481
00:20:30,309 --> 00:20:35,740
tickets from faster domain.com so the

482
00:20:33,010 --> 00:20:38,020
files then says I have this ticket that

483
00:20:35,740 --> 00:20:39,970
authorizes user to access me please give

484
00:20:38,020 --> 00:20:43,809
me a ticket that authorizes the same

485
00:20:39,970 --> 00:20:46,990
user to access the backup server and as

486
00:20:43,809 --> 00:20:49,000
the constraint delegation is set up the

487
00:20:46,990 --> 00:20:50,620
KDC basically says yeah it's fine okay

488
00:20:49,000 --> 00:20:52,210
here is your ticket and the faster

489
00:20:50,620 --> 00:20:55,899
domain.com can go to the backup

490
00:20:52,210 --> 00:20:59,440
domain.com and basically pretend to be

491
00:20:55,900 --> 00:21:02,140
you and so we've contained allegation

492
00:20:59,440 --> 00:21:04,270
originally we had the same limitation as

493
00:21:02,140 --> 00:21:06,460
with the unconstrained delegation it was

494
00:21:04,270 --> 00:21:09,010
just way more granular and that is the

495
00:21:06,460 --> 00:21:10,809
and only domain administrator can set it

496
00:21:09,010 --> 00:21:13,120
and the old way of setting it up was

497
00:21:10,809 --> 00:21:16,360
that it was set on the trusted machine

498
00:21:13,120 --> 00:21:18,760
site however I don't know when but

499
00:21:16,360 --> 00:21:21,340
recently maybe 2016 or something like

500
00:21:18,760 --> 00:21:23,320
that Microsoft added so called a

501
00:21:21,340 --> 00:21:26,918
resource based constraint delegation

502
00:21:23,320 --> 00:21:29,139
which means that the trustee can now set

503
00:21:26,919 --> 00:21:31,870
constrained allocation for itself so if

504
00:21:29,140 --> 00:21:34,480
I am a victim machine I can basically go

505
00:21:31,870 --> 00:21:36,668
to the load-up server and say hey I want

506
00:21:34,480 --> 00:21:39,010
to trust all tickets that come from the

507
00:21:36,669 --> 00:21:40,450
attacker machine and this is the

508
00:21:39,010 --> 00:21:43,540
important primitive that we will be

509
00:21:40,450 --> 00:21:44,919
using to be able to turn the relaying of

510
00:21:43,540 --> 00:21:47,530
machine accounts into something useful

511
00:21:44,919 --> 00:21:49,570
because once we are able to relay the

512
00:21:47,530 --> 00:21:52,389
authentication of the victim machine

513
00:21:49,570 --> 00:21:55,928
account to the to the domain controller

514
00:21:52,390 --> 00:21:58,840
we can basically then we can basically

515
00:21:55,929 --> 00:22:01,059
set it to trust any other computer in

516
00:21:58,840 --> 00:22:03,549
the domain and there's still a piece

517
00:22:01,059 --> 00:22:06,760
missing which is actually a funny quirk

518
00:22:03,549 --> 00:22:09,340
that at the first side looks innocent

519
00:22:06,760 --> 00:22:11,169
but you will basically allow us to do

520
00:22:09,340 --> 00:22:14,889
anything we want it's that there's

521
00:22:11,169 --> 00:22:17,950
another another it's not delegation as

522
00:22:14,890 --> 00:22:21,130
much as it is a way to to basically do

523
00:22:17,950 --> 00:22:23,049
protocol transition which what basically

524
00:22:21,130 --> 00:22:24,910
it means is that often when you are a

525
00:22:23,049 --> 00:22:26,580
service or you are a machine and you

526
00:22:24,910 --> 00:22:29,350
have a ticket that for example

527
00:22:26,580 --> 00:22:32,820
authenticates to to some bar something

528
00:22:29,350 --> 00:22:35,340
you can just

529
00:22:32,820 --> 00:22:37,770
create a ticket for the user for any

530
00:22:35,340 --> 00:22:39,720
other services you offer from Finnair so

531
00:22:37,770 --> 00:22:41,340
basically the way it works is that when

532
00:22:39,720 --> 00:22:44,580
you are when you are a service you can

533
00:22:41,340 --> 00:22:46,409
always come to the go to the KDC and say

534
00:22:44,580 --> 00:22:49,230
hi I want to create a ticket that

535
00:22:46,410 --> 00:22:52,230
authenticates administrator to myself

536
00:22:49,230 --> 00:22:54,210
and what's more what's more important

537
00:22:52,230 --> 00:22:57,480
for us as this dese tickets work as

538
00:22:54,210 --> 00:22:58,620
proof for us for you to proxy so you can

539
00:22:57,480 --> 00:23:00,240
basically take this ticket that you

540
00:22:58,620 --> 00:23:02,669
generate it out of thin air without any

541
00:23:00,240 --> 00:23:04,380
credentials without any password and say

542
00:23:02,670 --> 00:23:06,480
turn this into a ticket to another

543
00:23:04,380 --> 00:23:08,820
machine that trusts me and it works so

544
00:23:06,480 --> 00:23:11,610
this brings us to our plan of attack

545
00:23:08,820 --> 00:23:13,649
so the plan of attack is we own any

546
00:23:11,610 --> 00:23:15,870
domain joy machine because we need

547
00:23:13,650 --> 00:23:18,000
somebody who can actually use the as for

548
00:23:15,870 --> 00:23:19,830
you to self to to create tickets out of

549
00:23:18,000 --> 00:23:21,600
thin air so we own a machine that has

550
00:23:19,830 --> 00:23:25,230
any service which is basically any

551
00:23:21,600 --> 00:23:27,240
machine and then we find the victim

552
00:23:25,230 --> 00:23:30,480
machine get it to authenticate to us

553
00:23:27,240 --> 00:23:32,940
using ntlm relay this authentication

554
00:23:30,480 --> 00:23:35,460
that it sends us to LDAP and use it to

555
00:23:32,940 --> 00:23:37,350
configure so that the victim trusts all

556
00:23:35,460 --> 00:23:40,110
tickets that come from the attacker and

557
00:23:37,350 --> 00:23:42,389
now as we own the only attacker we can

558
00:23:40,110 --> 00:23:44,669
just get the TGT for the attacker dollar

559
00:23:42,390 --> 00:23:47,790
account the the Machine account we can

560
00:23:44,670 --> 00:23:50,490
use as for you to self to generate an

561
00:23:47,790 --> 00:23:53,790
administrator that allows for for the

562
00:23:50,490 --> 00:23:55,140
attacker machine to that out in the case

563
00:23:53,790 --> 00:23:57,300
administering to the attacking machine

564
00:23:55,140 --> 00:23:59,940
and then we can again go to the KDC and

565
00:23:57,300 --> 00:24:01,560
use as for you to proxy to turn this

566
00:23:59,940 --> 00:24:04,350
into an administrator ticket for the

567
00:24:01,560 --> 00:24:07,200
victim so a single relay and we have

568
00:24:04,350 --> 00:24:09,659
basically we can authenticate as an

569
00:24:07,200 --> 00:24:12,390
administrator to any victim machine now

570
00:24:09,660 --> 00:24:14,340
I talked about the last four four points

571
00:24:12,390 --> 00:24:16,920
a pretty far away so I want to focus now

572
00:24:14,340 --> 00:24:20,280
on the first two points so how can we

573
00:24:16,920 --> 00:24:21,990
own any domain joint machine now there

574
00:24:20,280 --> 00:24:24,060
is a there is a funny thing in the

575
00:24:21,990 --> 00:24:26,850
Active Directory is that by default all

576
00:24:24,060 --> 00:24:28,740
accounts and even machine accounts can

577
00:24:26,850 --> 00:24:31,169
up up to five machines to the domain

578
00:24:28,740 --> 00:24:32,970
with just their credentials so I mean

579
00:24:31,170 --> 00:24:34,950
every sensible administrator disabled

580
00:24:32,970 --> 00:24:36,930
this I have yet to see a production

581
00:24:34,950 --> 00:24:39,300
domain that actually that has this is

582
00:24:36,930 --> 00:24:41,460
still enabled but if you find a domain

583
00:24:39,300 --> 00:24:43,770
with this enabled you can just go to the

584
00:24:41,460 --> 00:24:46,110
domain controller ask it to add a

585
00:24:43,770 --> 00:24:50,580
machine and it will happily do it and

586
00:24:46,110 --> 00:24:52,408
it's everything you need but and the

587
00:24:50,580 --> 00:24:54,720
funny thing is that as I said even

588
00:24:52,409 --> 00:24:56,730
machine accounts can admit machines and

589
00:24:54,720 --> 00:24:59,100
this mission machine accounts can then

590
00:24:56,730 --> 00:24:59,730
add machines so now if you are very

591
00:24:59,100 --> 00:25:01,678
clever

592
00:24:59,730 --> 00:25:03,929
you can basically skip the first step

593
00:25:01,679 --> 00:25:05,370
and when you are in the first third step

594
00:25:03,929 --> 00:25:07,710
and you are realizing the victim killed

595
00:25:05,370 --> 00:25:10,049
in just two held up you can use LDAP to

596
00:25:07,710 --> 00:25:12,480
first create do at a controller machine

597
00:25:10,049 --> 00:25:14,399
generate a new one and then set the

598
00:25:12,480 --> 00:25:16,830
trusting so you can do just one relaying

599
00:25:14,399 --> 00:25:20,129
and basically create a machine and set

600
00:25:16,830 --> 00:25:22,740
it as trust it and the other way is

601
00:25:20,130 --> 00:25:24,840
likely old ways so you find an old

602
00:25:22,740 --> 00:25:27,779
Windows server that is vulnerable to

603
00:25:24,840 --> 00:25:29,668
eternal war you for example boot boot

604
00:25:27,779 --> 00:25:32,789
Kali on a provided workstation and steal

605
00:25:29,669 --> 00:25:34,919
its credentials as long as it's not as

606
00:25:32,789 --> 00:25:39,179
long as it's not encrypted with

607
00:25:34,919 --> 00:25:41,220
BitLocker now so these all these steps

608
00:25:39,179 --> 00:25:43,980
were pretty easy and pretty often they

609
00:25:41,220 --> 00:25:45,750
are they are achievable but the hard

610
00:25:43,980 --> 00:25:47,820
part that remains is getting

611
00:25:45,750 --> 00:25:49,919
authentication from machines which is

612
00:25:47,820 --> 00:25:52,678
which is the part where we still need

613
00:25:49,919 --> 00:25:54,539
more powerful primitives so if you have

614
00:25:52,679 --> 00:25:57,750
any idea how to do this you can

615
00:25:54,539 --> 00:26:01,289
basically you can tell us and we'll be

616
00:25:57,750 --> 00:26:04,139
happy because right now the best way we

617
00:26:01,289 --> 00:26:05,639
have best ways we have our men in the

618
00:26:04,139 --> 00:26:09,029
middle attacks which are kind of quirky

619
00:26:05,639 --> 00:26:10,830
so the best one that always so far

620
00:26:09,029 --> 00:26:13,049
worked for me is a physical man in the

621
00:26:10,830 --> 00:26:14,220
middle where you literally take the

622
00:26:13,049 --> 00:26:16,080
machine when you have physical access to

623
00:26:14,220 --> 00:26:18,899
it and reconnect it to your computer

624
00:26:16,080 --> 00:26:20,908
which runs a DHCP server tells it your

625
00:26:18,899 --> 00:26:23,070
DNS server and resolves every every

626
00:26:20,909 --> 00:26:25,200
single address to your to your attacker

627
00:26:23,070 --> 00:26:27,269
computer and once you reboot the machine

628
00:26:25,200 --> 00:26:30,809
Windows eventually tries to download

629
00:26:27,269 --> 00:26:33,029
something most of fun I've seen some

630
00:26:30,809 --> 00:26:34,620
windows update certificates which for

631
00:26:33,029 --> 00:26:37,799
some reason it thinks it's a good idea

632
00:26:34,620 --> 00:26:39,840
to download using HTTP and authenticates

633
00:26:37,799 --> 00:26:41,490
using machine credentials as after the

634
00:26:39,840 --> 00:26:42,870
reboot there are no other credentials to

635
00:26:41,490 --> 00:26:46,409
use so far so it will happily

636
00:26:42,870 --> 00:26:47,969
authenticate using them another way of

637
00:26:46,409 --> 00:26:50,909
achieving a man-in-the-middle position

638
00:26:47,970 --> 00:26:54,240
in this way is actually remotely not

639
00:26:50,909 --> 00:26:56,039
physically is MIT m6 which is an

640
00:26:54,240 --> 00:26:58,320
interesting project where if the network

641
00:26:56,039 --> 00:27:00,720
where you are doesn't have ipv6 set up

642
00:26:58,320 --> 00:27:02,790
at all you can basically

643
00:27:00,720 --> 00:27:06,540
most of the Windows machines are set up

644
00:27:02,790 --> 00:27:08,460
so they still try to look for ipv6 DHCP

645
00:27:06,540 --> 00:27:11,129
servers so you can just start your own

646
00:27:08,460 --> 00:27:12,930
DHCP six servers and again tell

647
00:27:11,130 --> 00:27:15,870
everybody all the DNS server as NS

648
00:27:12,930 --> 00:27:18,900
windows prefers ipv6 over ipv4 they will

649
00:27:15,870 --> 00:27:21,300
use you they will probably use you

650
00:27:18,900 --> 00:27:23,130
instead of the ipv4 DNS server that is

651
00:27:21,300 --> 00:27:24,350
actually that is actually meant to be

652
00:27:23,130 --> 00:27:27,410
used in the domain

653
00:27:24,350 --> 00:27:29,459
there are also some funny and weird

654
00:27:27,410 --> 00:27:31,230
primitives for getting authentication

655
00:27:29,460 --> 00:27:33,030
from machines one of them is changing

656
00:27:31,230 --> 00:27:36,300
your lockscreen or profile picture

657
00:27:33,030 --> 00:27:37,440
because for some reason when you when

658
00:27:36,300 --> 00:27:39,810
you change your profile picture it's

659
00:27:37,440 --> 00:27:42,090
actually downloaded downloaded using the

660
00:27:39,810 --> 00:27:44,310
machine account and there is a protocol

661
00:27:42,090 --> 00:27:48,530
called daffy which is basically file

662
00:27:44,310 --> 00:27:51,240
access over HTTP so it's real reliable

663
00:27:48,530 --> 00:27:54,660
reliably reliable if you know what I

664
00:27:51,240 --> 00:27:56,400
mean and so you can just send change

665
00:27:54,660 --> 00:27:58,470
your lock screen to something like web

666
00:27:56,400 --> 00:28:00,300
dev right at 80 such folder search Tammy

667
00:27:58,470 --> 00:28:02,040
Tabak and again the machine will try to

668
00:28:00,300 --> 00:28:04,200
authenticate it an Authenticator your

669
00:28:02,040 --> 00:28:07,050
web WI and you can then relate the

670
00:28:04,200 --> 00:28:09,420
credentials now the last thing I want to

671
00:28:07,050 --> 00:28:11,430
talk about is is also I think pretty

672
00:28:09,420 --> 00:28:13,170
interesting and it's the printer back

673
00:28:11,430 --> 00:28:14,970
we're back is in quotes because

674
00:28:13,170 --> 00:28:18,210
Microsoft says that it's by design and

675
00:28:14,970 --> 00:28:21,030
it's a feature it's this there's this

676
00:28:18,210 --> 00:28:23,610
mouthful remote procedure call called

677
00:28:21,030 --> 00:28:27,149
RPC remote fine first printer change

678
00:28:23,610 --> 00:28:29,550
notification X and what this does is

679
00:28:27,150 --> 00:28:32,730
basically it asks the computer to

680
00:28:29,550 --> 00:28:35,490
register yourself as register some other

681
00:28:32,730 --> 00:28:38,070
server as a notification listener so if

682
00:28:35,490 --> 00:28:40,590
anything changes about any printer it

683
00:28:38,070 --> 00:28:42,210
will send you a message and tell you for

684
00:28:40,590 --> 00:28:46,139
example this printer is out of paper

685
00:28:42,210 --> 00:28:48,870
now as this works over as this

686
00:28:46,140 --> 00:28:51,270
notification as this notification goes

687
00:28:48,870 --> 00:28:53,879
over SMB it basically means that when

688
00:28:51,270 --> 00:28:55,740
you register yourself on a remote

689
00:28:53,880 --> 00:28:59,070
machine as a notification handler it

690
00:28:55,740 --> 00:29:03,930
will try to connect with you with you

691
00:28:59,070 --> 00:29:05,520
over SMB using the Machine account so so

692
00:29:03,930 --> 00:29:08,039
if I register my attacker machine as a

693
00:29:05,520 --> 00:29:10,710
notification receiver I will get an SMB

694
00:29:08,039 --> 00:29:13,470
action now most configurations at least

695
00:29:10,710 --> 00:29:16,729
ask for signing dinner negotiation so

696
00:29:13,470 --> 00:29:20,190
it's usually not reliable to held up as

697
00:29:16,729 --> 00:29:22,139
reliable reliable reliable to LDAP which

698
00:29:20,190 --> 00:29:24,330
supports signing so when the Machine

699
00:29:22,139 --> 00:29:26,488
asks for it then the LDAP will happily

700
00:29:24,330 --> 00:29:30,149
want to sign messages and you will not

701
00:29:26,489 --> 00:29:32,729
be able to able to craft your own

702
00:29:30,149 --> 00:29:34,590
messages now I've been looking into the

703
00:29:32,729 --> 00:29:37,259
available exploits and they basically

704
00:29:34,590 --> 00:29:40,580
due to course they do open printer and

705
00:29:37,259 --> 00:29:44,159
they do change notification ragas

706
00:29:40,580 --> 00:29:46,439
registration and the open printer is

707
00:29:44,159 --> 00:29:48,479
basically you need to get a handle first

708
00:29:46,440 --> 00:29:52,139
before you can do the other course and

709
00:29:48,479 --> 00:29:54,840
what it does is that it opens the target

710
00:29:52,139 --> 00:29:56,639
machine as as the printer not not the

711
00:29:54,840 --> 00:29:58,228
only sana which is kind of confusing but

712
00:29:56,639 --> 00:30:00,869
basically the way it works is that if

713
00:29:58,229 --> 00:30:02,970
you want to if you want to get an

714
00:30:00,869 --> 00:30:05,309
authentication from victim you connect

715
00:30:02,970 --> 00:30:07,710
to the victim you open printer the

716
00:30:05,309 --> 00:30:10,019
victim and then you register as a change

717
00:30:07,710 --> 00:30:11,909
notification your old computer your

718
00:30:10,019 --> 00:30:14,639
attacker computer and I've been reading

719
00:30:11,909 --> 00:30:16,739
the air PR and protocol Docs and I found

720
00:30:14,639 --> 00:30:18,508
something interesting which is the the

721
00:30:16,739 --> 00:30:20,340
printer name that the open printer

722
00:30:18,509 --> 00:30:22,559
accept is actually defined as follows

723
00:30:20,340 --> 00:30:24,689
where not only you have the regular

724
00:30:22,559 --> 00:30:26,428
think you would expect is sellable name

725
00:30:24,690 --> 00:30:28,289
and local printer name but there's also

726
00:30:26,429 --> 00:30:31,529
apparently something called a web print

727
00:30:28,289 --> 00:30:33,359
server that works over HTTP so I was

728
00:30:31,529 --> 00:30:35,519
like yeah HTTP is better over SMB I

729
00:30:33,359 --> 00:30:38,580
wonder what happens if I change the open

730
00:30:35,519 --> 00:30:42,419
printer from self to attacker / - Sarang

731
00:30:38,580 --> 00:30:44,189
/ - printer and I've started my rolling

732
00:30:42,419 --> 00:30:46,200
software and this is basically the lock

733
00:30:44,190 --> 00:30:47,789
that it out put it I'm sorry for the

734
00:30:46,200 --> 00:30:49,889
censorship but I wanted just to be

735
00:30:47,789 --> 00:30:53,220
authentic so this is really the first

736
00:30:49,889 --> 00:30:55,859
time I saw it and what I saw here is I

737
00:30:53,220 --> 00:30:58,409
skipped through two lines and I saw like

738
00:30:55,859 --> 00:31:01,168
hey it received a call HTTP connection

739
00:30:58,409 --> 00:31:04,470
and then it tried to here is the

740
00:31:01,169 --> 00:31:06,090
authentication as the machine account so

741
00:31:04,470 --> 00:31:08,249
I was like hey it's authenticating over

742
00:31:06,090 --> 00:31:09,629
HTTP the machine account the relay felt

743
00:31:08,249 --> 00:31:12,809
for some reason but this is huge

744
00:31:09,629 --> 00:31:15,689
so I registered the talk at CCC camp but

745
00:31:12,809 --> 00:31:18,119
it turns out last week I was trying to

746
00:31:15,690 --> 00:31:20,279
reproduce this like crazy over and over

747
00:31:18,119 --> 00:31:21,810
but cuddled and turns out what really

748
00:31:20,279 --> 00:31:23,310
happened is that these two lines

749
00:31:21,810 --> 00:31:27,030
black out here are really what's

750
00:31:23,310 --> 00:31:29,100
important and that that the connection

751
00:31:27,030 --> 00:31:31,410
actually came from the the the

752
00:31:29,100 --> 00:31:35,010
credentials actually came over SMB not

753
00:31:31,410 --> 00:31:36,810
over HTTP so what happened I spent a lot

754
00:31:35,010 --> 00:31:39,450
of time debugging this and it turns out

755
00:31:36,810 --> 00:31:41,370
yeah I was just quickly hiking and I

756
00:31:39,450 --> 00:31:43,710
left a call to the change notification

757
00:31:41,370 --> 00:31:45,870
registration unmodified so the remote

758
00:31:43,710 --> 00:31:48,390
machine really connected over HTTP in

759
00:31:45,870 --> 00:31:50,639
the open printer in the open printer

760
00:31:48,390 --> 00:31:51,870
call but it didn't send any meaningful

761
00:31:50,640 --> 00:31:53,610
credentials over that it basically

762
00:31:51,870 --> 00:31:55,229
authenticated as an early user of a

763
00:31:53,610 --> 00:31:57,479
phone or password which is not really

764
00:31:55,230 --> 00:31:58,800
useful but after that as I didn't change

765
00:31:57,480 --> 00:32:00,840
the printer change notification

766
00:31:58,800 --> 00:32:03,600
registration at all it did

767
00:32:00,840 --> 00:32:05,429
Danone the exploiting regular SMB call

768
00:32:03,600 --> 00:32:07,320
and it sent over its credentials and

769
00:32:05,430 --> 00:32:09,780
that's what I saw interlock so as it was

770
00:32:07,320 --> 00:32:12,870
multi-threaded I wasn't able to connect

771
00:32:09,780 --> 00:32:15,750
it with e to the HTTP or the SMB

772
00:32:12,870 --> 00:32:18,449
connection so unfortunately this looks

773
00:32:15,750 --> 00:32:20,370
to be like a dead end and that we don't

774
00:32:18,450 --> 00:32:22,890
have a remote attack that can actually

775
00:32:20,370 --> 00:32:26,520
make machines authenticated to us using

776
00:32:22,890 --> 00:32:28,380
HTTP so this all sounds great and

777
00:32:26,520 --> 00:32:31,110
theoretical but I actually have a demo

778
00:32:28,380 --> 00:32:34,800
for this so hopefully if the demo gods

779
00:32:31,110 --> 00:32:36,719
approve of it is we will first abuse the

780
00:32:34,800 --> 00:32:39,180
adding machine we will then use the

781
00:32:36,720 --> 00:32:41,430
physical man in the middle to get the

782
00:32:39,180 --> 00:32:43,410
victim to authenticate to our Kali

783
00:32:41,430 --> 00:32:45,060
machine and we will realize these

784
00:32:43,410 --> 00:32:47,880
credentials use them to configure to

785
00:32:45,060 --> 00:32:50,030
trust the machine we just added to the

786
00:32:47,880 --> 00:32:58,770
domain and then do the whole

787
00:32:50,030 --> 00:33:00,930
impersonation delegation attack so what

788
00:32:58,770 --> 00:33:03,930
I have here is a victim machine which is

789
00:33:00,930 --> 00:33:06,780
called desktop eight 3bn FM yeah I know

790
00:33:03,930 --> 00:33:08,400
it's a real name but we all do and I

791
00:33:06,780 --> 00:33:10,560
have a Kali machine that has two network

792
00:33:08,400 --> 00:33:12,780
cards one of them is connected to the

793
00:33:10,560 --> 00:33:16,220
domain and one of them is actually where

794
00:33:12,780 --> 00:33:19,080
I set up the where I set up the DHCP to

795
00:33:16,220 --> 00:33:21,510
give IP addresses and to say I am the

796
00:33:19,080 --> 00:33:24,480
router and I'm the domain name server so

797
00:33:21,510 --> 00:33:26,820
first what I want to do is at the

798
00:33:24,480 --> 00:33:29,400
computer as I've said so I can just use

799
00:33:26,820 --> 00:33:30,870
credentials imagine that I'm for example

800
00:33:29,400 --> 00:33:33,330
in a pen test so I have an unprivileged

801
00:33:30,870 --> 00:33:35,290
I come to log into the domain machine to

802
00:33:33,330 --> 00:33:37,060
the to the DC so

803
00:33:35,290 --> 00:33:40,030
I just say I want to add a to random

804
00:33:37,060 --> 00:33:41,710
computer and it happily because it's

805
00:33:40,030 --> 00:33:43,450
enabled in happily created around them

806
00:33:41,710 --> 00:33:47,050
desktop machine with with this password

807
00:33:43,450 --> 00:33:49,270
which yeah so I so I now have a machine

808
00:33:47,050 --> 00:33:52,139
in domain so what I want to do next is

809
00:33:49,270 --> 00:33:55,870
set up the DNS server I will use

810
00:33:52,140 --> 00:33:58,870
responder for that I only run it as an

811
00:33:55,870 --> 00:34:01,750
DNS server so all the SMB and HTTP

812
00:33:58,870 --> 00:34:05,770
servers are turned off and also I will

813
00:34:01,750 --> 00:34:09,010
start up the entire relay X where I say

814
00:34:05,770 --> 00:34:12,610
I want to I want to rely to held up on

815
00:34:09,010 --> 00:34:15,250
the domain computer I want to and I want

816
00:34:12,610 --> 00:34:17,470
to delegate access to the and here I

817
00:34:15,250 --> 00:34:21,580
need to type the the machine I just add

818
00:34:17,469 --> 00:34:32,020
it so I want to delegate access to this

819
00:34:21,580 --> 00:34:36,429
one so now I just do what I said I will

820
00:34:32,020 --> 00:34:38,350
do I reconnect the machine to the

821
00:34:36,429 --> 00:34:49,660
network where I have set up my DHCP

822
00:34:38,350 --> 00:34:51,429
server and I reboot now there are

823
00:34:49,659 --> 00:34:53,859
already some as you can see there are

824
00:34:51,429 --> 00:34:57,280
some already some windows update HTTP

825
00:34:53,860 --> 00:34:59,230
request which Y in 2019 Windows Update

826
00:34:57,280 --> 00:35:02,080
is happily downloading over HTTP is

827
00:34:59,230 --> 00:35:03,880
beyond me but we have to wait after the

828
00:35:02,080 --> 00:35:08,319
reboot so there's no other account than

829
00:35:03,880 --> 00:35:12,630
the machine account available so we wait

830
00:35:08,320 --> 00:35:12,630
for a while in those boots

831
00:35:17,080 --> 00:35:22,990
yeah and so now as you can see we

832
00:35:19,630 --> 00:35:26,350
already successfully it's somewhere here

833
00:35:22,990 --> 00:35:29,919
we already successfully relate these

834
00:35:26,350 --> 00:35:35,770
credentials as the as the as the target

835
00:35:29,920 --> 00:35:37,950
which is the i-83 bien and we we there

836
00:35:35,770 --> 00:35:40,660
it's us already performed so yeah

837
00:35:37,950 --> 00:35:44,080
somewhere here it in the log there will

838
00:35:40,660 --> 00:35:46,149
be yeah so the desktop is xhp which we

839
00:35:44,080 --> 00:35:48,040
added can now successfully impersonate

840
00:35:46,150 --> 00:35:50,140
users on the target we are as for you to

841
00:35:48,040 --> 00:35:53,290
proxy so this is everything we basically

842
00:35:50,140 --> 00:35:56,980
need to do so now let me just reconnect

843
00:35:53,290 --> 00:35:58,150
the target machine back to the domain so

844
00:35:56,980 --> 00:36:00,460
it sees the domain controller and

845
00:35:58,150 --> 00:36:03,460
actually verify verify that the ticket I

846
00:36:00,460 --> 00:36:05,560
give it is correct and so now there's a

847
00:36:03,460 --> 00:36:08,410
helpful script in in packet that allows

848
00:36:05,560 --> 00:36:10,900
you to do all the TGT and as for you to

849
00:36:08,410 --> 00:36:13,720
self and as for you to proxy and so I

850
00:36:10,900 --> 00:36:16,660
just need to do get s T which I say I

851
00:36:13,720 --> 00:36:19,270
want to take it for safes which is Samba

852
00:36:16,660 --> 00:36:21,069
at the victim desktop which is the 83

853
00:36:19,270 --> 00:36:23,680
bien FM I want to impersonate

854
00:36:21,070 --> 00:36:26,350
administrator and here I basically say

855
00:36:23,680 --> 00:36:29,649
that I want to authenticate as the

856
00:36:26,350 --> 00:36:39,339
machine I I add it again which is which

857
00:36:29,650 --> 00:36:45,880
is this one and this is the password for

858
00:36:39,340 --> 00:36:48,010
the machine and bam I have a ticket that

859
00:36:45,880 --> 00:36:50,890
actually impersonates administrator for

860
00:36:48,010 --> 00:36:52,690
the machine so now I can just do secrets

861
00:36:50,890 --> 00:36:55,359
dump where I just say I want to use this

862
00:36:52,690 --> 00:36:56,830
cash to ticket and I don't want to

863
00:36:55,360 --> 00:37:03,040
authenticate using password and this is

864
00:36:56,830 --> 00:37:10,290
the victim and when I now run it nothing

865
00:37:03,040 --> 00:37:12,340
happens yeah this is probably some oh I

866
00:37:10,290 --> 00:37:14,440
accidently connected the wrong network

867
00:37:12,340 --> 00:37:21,660
this needs to be on women at 7 not women

868
00:37:14,440 --> 00:37:21,660
at 8 which I will quickly fix numbers

869
00:37:23,250 --> 00:37:31,599
and now try again and BAM here are your

870
00:37:28,270 --> 00:37:33,190
credentials so we successfully

871
00:37:31,599 --> 00:37:35,339
impersonated ministration to the target

872
00:37:33,190 --> 00:37:35,339
mesh

873
00:37:35,650 --> 00:37:38,769
[Music]

874
00:37:41,320 --> 00:37:46,490
so yeah this is not good so how can we

875
00:37:44,540 --> 00:37:48,050
mitigate the problem is that most of the

876
00:37:46,490 --> 00:37:51,140
chain is by design it's something that's

877
00:37:48,050 --> 00:37:52,640
in Kerberos it is meant to be in

878
00:37:51,140 --> 00:37:54,770
Kerberos that Microsoft really thinks is

879
00:37:52,640 --> 00:37:57,049
useful and Microsoft would have to

880
00:37:54,770 --> 00:37:58,520
change that for example one one thing I

881
00:37:57,050 --> 00:38:00,710
think would be clever is to somehow

882
00:37:58,520 --> 00:38:03,290
prohibit as for you to sell of tickets

883
00:38:00,710 --> 00:38:05,060
to be used as a proof or as for you to

884
00:38:03,290 --> 00:38:06,770
proxy but Microsoft is currently not

885
00:38:05,060 --> 00:38:08,990
willing to do that so the only real

886
00:38:06,770 --> 00:38:11,120
mitigation is you have not right now

887
00:38:08,990 --> 00:38:13,069
it's preventing relaying so for

888
00:38:11,120 --> 00:38:14,870
assigning for all protocols where it is

889
00:38:13,070 --> 00:38:16,970
available and not only ask for it but

890
00:38:14,870 --> 00:38:18,680
actually force it and ban until my

891
00:38:16,970 --> 00:38:22,580
authorization we're not available so

892
00:38:18,680 --> 00:38:25,040
over HTTP and actually as I said this is

893
00:38:22,580 --> 00:38:27,440
this is very new so last week Microsoft

894
00:38:25,040 --> 00:38:29,360
actually released released an advisory

895
00:38:27,440 --> 00:38:31,670
that recommends that you turn on LDAP

896
00:38:29,360 --> 00:38:35,330
signing specifically to stop these

897
00:38:31,670 --> 00:38:39,170
attacks that were coming out like did

898
00:38:35,330 --> 00:38:40,670
wave coming out right now so and one

899
00:38:39,170 --> 00:38:42,620
thing you can do as a defense in the F

900
00:38:40,670 --> 00:38:45,230
measure is that you can add critical

901
00:38:42,620 --> 00:38:47,000
users to the protected users group or at

902
00:38:45,230 --> 00:38:49,760
least give them user no delegated which

903
00:38:47,000 --> 00:38:54,230
prevents most of the delegation attacks

904
00:38:49,760 --> 00:38:56,000
and so this is the end of the

905
00:38:54,230 --> 00:38:59,390
presentation as you can see a pickerel

906
00:38:56,000 --> 00:39:01,520
happen basically the reason I registered

907
00:38:59,390 --> 00:39:04,129
this talk was that I thought I had an

908
00:39:01,520 --> 00:39:06,710
exploit that I didn't have but such is

909
00:39:04,130 --> 00:39:07,280
life but I'd be more than happy to talk

910
00:39:06,710 --> 00:39:10,790
to you later

911
00:39:07,280 --> 00:39:12,590
here at the CC camp or DME at Twitter I

912
00:39:10,790 --> 00:39:15,860
go to and we are still looking for new

913
00:39:12,590 --> 00:39:17,870
for new ways to force remote machines to

914
00:39:15,860 --> 00:39:19,460
authenticate to us using their machine

915
00:39:17,870 --> 00:39:20,930
credentials and this is the last thing

916
00:39:19,460 --> 00:39:23,900
we are missing to have a really powerful

917
00:39:20,930 --> 00:39:26,779
really potent attack chain so that's it

918
00:39:23,900 --> 00:39:30,030
and have you do have any questions

919
00:39:26,780 --> 00:39:33,819
[Applause]

920
00:39:30,030 --> 00:39:36,569
yeah that's right I would say let's hear

921
00:39:33,819 --> 00:39:38,859
a warm round of applause for this guy

922
00:39:36,569 --> 00:39:41,890
are there any questions we have to

923
00:39:38,859 --> 00:39:44,799
question angels in the middle anybody

924
00:39:41,890 --> 00:39:47,828
can sit up go up there is there a

925
00:39:44,799 --> 00:39:49,750
question from the internet nope no

926
00:39:47,829 --> 00:39:50,579
questions from the internet no questions

927
00:39:49,750 --> 00:40:02,859
from the audience

928
00:39:50,579 --> 00:40:05,170
no one you have three two one yeah I

929
00:40:02,859 --> 00:40:09,089
guess let's have another warm round

930
00:40:05,170 --> 00:40:09,089
Thank You applause

931
00:40:14,580 --> 00:40:18,170
Thank You economy

932
00:40:24,640 --> 00:40:29,239
[Music]

933
00:40:29,710 --> 00:40:31,770
you

