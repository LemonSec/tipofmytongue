1
00:00:10,820 --> 00:00:17,630
the next service point the displayed a

2
00:00:15,110 --> 00:00:21,169
tale of four generations and the

3
00:00:17,630 --> 00:00:23,750
speakers are Peter Suber and Felix

4
00:00:21,170 --> 00:00:32,180
Niklas and give a big applause thank you

5
00:00:23,750 --> 00:00:36,800
thank you thanks for having us

6
00:00:32,180 --> 00:00:41,269
I'm Felix and thus Peter hi

7
00:00:36,800 --> 00:00:45,589
so yeah we're gonna tell you four tales

8
00:00:41,270 --> 00:00:47,960
about the display and the beginning of

9
00:00:45,590 --> 00:00:52,580
the display was that we that one of our

10
00:00:47,960 --> 00:00:54,380
club members bought it on eBay and we

11
00:00:52,580 --> 00:00:56,360
didn't really know what it was used for

12
00:00:54,380 --> 00:00:59,480
before it was done by a metal works

13
00:00:56,360 --> 00:01:01,970
company who had an electric department

14
00:00:59,480 --> 00:01:04,970
that built the electrics for this and

15
00:01:01,970 --> 00:01:10,070
the metal shop they built the hardware

16
00:01:04,970 --> 00:01:11,539
around it the nice frame and they sold

17
00:01:10,070 --> 00:01:17,000
it off I think because it didn't work

18
00:01:11,540 --> 00:01:20,240
out for them so we got it on eBay and it

19
00:01:17,000 --> 00:01:22,880
was at in the beginning very very slow

20
00:01:20,240 --> 00:01:25,850
and at first I wanted to show the

21
00:01:22,880 --> 00:01:30,860
outline this is how it looks inside of

22
00:01:25,850 --> 00:01:32,658
our club it's mounted on the wall so we

23
00:01:30,860 --> 00:01:35,030
got to talk about the hardware about the

24
00:01:32,659 --> 00:01:37,340
first and so the fourth current

25
00:01:35,030 --> 00:01:39,650
generation got to talk about some

26
00:01:37,340 --> 00:01:42,860
software and work that went into its

27
00:01:39,650 --> 00:01:44,900
fonts and to the ring and then about the

28
00:01:42,860 --> 00:01:48,289
API is that we have the GDP and

29
00:01:44,900 --> 00:01:52,250
WebSockets and some fun applications

30
00:01:48,290 --> 00:01:53,750
that we ran on it Peter you want to

31
00:01:52,250 --> 00:01:57,020
start with there all right

32
00:01:53,750 --> 00:02:01,760
so hardware yeah

33
00:01:57,020 --> 00:02:07,240
first generation I was delivered with

34
00:02:01,760 --> 00:02:07,240
the 6502 somehow controller board I

35
00:02:07,269 --> 00:02:13,849
wasn't I wasn't there when that was

36
00:02:11,120 --> 00:02:17,409
being used but some people managed to

37
00:02:13,849 --> 00:02:20,750
get it working and send some some serial

38
00:02:17,409 --> 00:02:24,049
protocol commands to the controller

39
00:02:20,750 --> 00:02:26,690
and were able to watch the characters be

40
00:02:24,050 --> 00:02:29,990
drawn on the display it was as Felix

41
00:02:26,690 --> 00:02:33,740
said really really slow so this is made

42
00:02:29,990 --> 00:02:46,180
up of a whole bunch of these LED matrix

43
00:02:33,740 --> 00:02:46,180
or LED modules 8x8 little LEDs no slides

44
00:02:46,270 --> 00:02:49,940
yeah there we go

45
00:02:48,020 --> 00:02:51,590
thank you so let's get back this is the

46
00:02:49,940 --> 00:02:56,150
controller this is the controller right

47
00:02:51,590 --> 00:03:01,370
the 6502 and these are the 8x8 LED

48
00:02:56,150 --> 00:03:04,310
modules that are on this display and in

49
00:03:01,370 --> 00:03:09,290
total there are twenty twenty rows going

50
00:03:04,310 --> 00:03:11,930
down and fifty six fifty six columns so

51
00:03:09,290 --> 00:03:15,049
that of these LED modules eight by eight

52
00:03:11,930 --> 00:03:17,390
in total that's a thousand hundred

53
00:03:15,050 --> 00:03:19,790
twenty LED modules and with eight by

54
00:03:17,390 --> 00:03:29,208
eight that gets us seventy one thousand

55
00:03:19,790 --> 00:03:31,070
and some LEDs so it's a 71 K display so

56
00:03:29,209 --> 00:03:33,830
that was the first generation and we got

57
00:03:31,070 --> 00:03:40,100
to know the hardware a bit and some some

58
00:03:33,830 --> 00:03:42,500
people in the berlin ccc they made a new

59
00:03:40,100 --> 00:03:45,320
controller for this because the 6502

60
00:03:42,500 --> 00:03:48,110
wasn't wasn't a lot of fun and was was

61
00:03:45,320 --> 00:03:49,430
as we said quite slow and of course it

62
00:03:48,110 --> 00:03:52,130
wasn't on the network so we needed to

63
00:03:49,430 --> 00:03:54,620
get on the network second generation was

64
00:03:52,130 --> 00:03:58,880
an atmel x mega i I'm afraid we don't

65
00:03:54,620 --> 00:04:02,090
have any photos of it yeah

66
00:03:58,880 --> 00:04:05,590
at this time there was also the

67
00:04:02,090 --> 00:04:09,640
beginning of a protocol designed for

68
00:04:05,590 --> 00:04:14,540
sending information to the display it

69
00:04:09,640 --> 00:04:17,899
consists of UDP packets that have a 10

70
00:04:14,540 --> 00:04:19,969
by it header containing five 16-bit

71
00:04:17,899 --> 00:04:23,719
words in network byte order that's

72
00:04:19,970 --> 00:04:25,820
important to us first one is the command

73
00:04:23,720 --> 00:04:28,220
we'll get into those in a little bit and

74
00:04:25,820 --> 00:04:30,590
then there are four parameters that may

75
00:04:28,220 --> 00:04:33,200
or may not contain some value if they're

76
00:04:30,590 --> 00:04:34,679
not used or if one parameter is not used

77
00:04:33,200 --> 00:04:38,039
then the value is just

78
00:04:34,680 --> 00:04:41,160
after these ten bites there may or may

79
00:04:38,040 --> 00:04:48,840
not be some data payload also in the UDP

80
00:04:41,160 --> 00:04:52,680
packet these are the commands in the in

81
00:04:48,840 --> 00:04:53,909
the beginning or the the first the first

82
00:04:52,680 --> 00:04:56,760
yeah the first commands that were

83
00:04:53,910 --> 00:04:59,100
implemented I'm sure there are a few so

84
00:04:56,760 --> 00:05:01,080
you see there are some gaps I I don't

85
00:04:59,100 --> 00:05:04,010
know actually what the commands there

86
00:05:01,080 --> 00:05:07,830
were or the numbers there were anymore

87
00:05:04,010 --> 00:05:13,409
but clear obviously clear screen text

88
00:05:07,830 --> 00:05:17,219
sending code page 437 text because

89
00:05:13,410 --> 00:05:19,880
that's a fun encoding and then we had

90
00:05:17,220 --> 00:05:24,270
some some brightness commands these

91
00:05:19,880 --> 00:05:26,219
these LED modules the 8x8 modules it was

92
00:05:24,270 --> 00:05:32,099
mentioned on the slide behind each of

93
00:05:26,220 --> 00:05:35,040
them is a maxim max 7219 LED driver made

94
00:05:32,100 --> 00:05:38,270
for this kind of matrix LED matrix

95
00:05:35,040 --> 00:05:41,130
display and in this LED driver there's

96
00:05:38,270 --> 00:05:44,159
there's a digital register for setting

97
00:05:41,130 --> 00:05:52,230
the brightness and we expose that using

98
00:05:44,160 --> 00:05:54,260
some some commands just change the

99
00:05:52,230 --> 00:05:57,120
brightness since we can only do 8 by 8

100
00:05:54,260 --> 00:05:59,670
brightness changes we still found a way

101
00:05:57,120 --> 00:06:01,230
to to do a nice and the application of

102
00:05:59,670 --> 00:06:03,150
that because for movies obviously it

103
00:06:01,230 --> 00:06:07,140
doesn't really work to do grayscale or

104
00:06:03,150 --> 00:06:10,739
like color tones on 8 by 8 pixels but in

105
00:06:07,140 --> 00:06:14,099
the end he used 8 by 8 graphics to do

106
00:06:10,740 --> 00:06:16,350
this nice depth map so this to explain

107
00:06:14,100 --> 00:06:19,110
what we're seeing here here the whole

108
00:06:16,350 --> 00:06:21,090
display is filled with plus signs so

109
00:06:19,110 --> 00:06:23,460
every one of these 8 by 8 modules is

110
00:06:21,090 --> 00:06:25,619
showing a plus sign and the only thing

111
00:06:23,460 --> 00:06:28,590
that is changing is the brightness value

112
00:06:25,620 --> 00:06:31,710
or the light intensity of these modules

113
00:06:28,590 --> 00:06:34,109
and that makes for a nice even lower

114
00:06:31,710 --> 00:06:37,159
resolution low resolution effect on the

115
00:06:34,110 --> 00:06:37,160
low resolution display

116
00:06:39,020 --> 00:06:45,330
going back to commands yeah alright so

117
00:06:42,990 --> 00:06:47,520
that was character brightness setting it

118
00:06:45,330 --> 00:06:50,760
on individual modules and brightness for

119
00:06:47,520 --> 00:06:53,549
the full screen in one command just a

120
00:06:50,760 --> 00:06:56,280
reset command because that that helps

121
00:06:53,550 --> 00:07:00,240
sometimes then we had a fade experiment

122
00:06:56,280 --> 00:07:03,500
where the graphics kernel runs over the

123
00:07:00,240 --> 00:07:06,300
display and sort of reduces intensity

124
00:07:03,500 --> 00:07:10,350
which looks like a fade it didn't get

125
00:07:06,300 --> 00:07:12,270
used very much and the main command the

126
00:07:10,350 --> 00:07:17,010
the most important thing yeah the most

127
00:07:12,270 --> 00:07:18,900
important new feature in the in our

128
00:07:17,010 --> 00:07:22,950
development was to support bitmap

129
00:07:18,900 --> 00:07:25,950
transfer so that this this display could

130
00:07:22,950 --> 00:07:31,039
also show arbitrary graphics and the

131
00:07:25,950 --> 00:07:33,840
very first command because it's easier

132
00:07:31,040 --> 00:07:37,130
received the bitmap data in a way that

133
00:07:33,840 --> 00:07:40,830
fits how the hardware was built and

134
00:07:37,130 --> 00:07:43,320
that's not really so intuitive or so

135
00:07:40,830 --> 00:07:47,490
convenient for software developers it

136
00:07:43,320 --> 00:07:50,520
turns out is that here or is it yeah

137
00:07:47,490 --> 00:07:52,950
pixel data in a vertical layout so the

138
00:07:50,520 --> 00:07:58,200
the the bitmap data was send with each

139
00:07:52,950 --> 00:08:02,490
byte being 8 pixels high or tall instead

140
00:07:58,200 --> 00:08:05,510
of 8 pixels across which is what we

141
00:08:02,490 --> 00:08:08,190
usually deal with in in software so

142
00:08:05,510 --> 00:08:09,599
still we could do bitmap we could

143
00:08:08,190 --> 00:08:16,400
display bitmaps there was a lot of fun

144
00:08:09,600 --> 00:08:19,320
and and a good start right and then we

145
00:08:16,400 --> 00:08:25,190
of course we want to go fast right so we

146
00:08:19,320 --> 00:08:28,830
we found out actually the hardware the

147
00:08:25,190 --> 00:08:32,090
factory hardware is is the construction

148
00:08:28,830 --> 00:08:36,000
is quite quite limited or quite slow

149
00:08:32,090 --> 00:08:38,850
because not only because the 6502 is a

150
00:08:36,000 --> 00:08:42,140
relatively slow machine but also because

151
00:08:38,850 --> 00:08:45,990
of how the whole data transfer was

152
00:08:42,140 --> 00:08:48,390
implemented in in this display so as the

153
00:08:45,990 --> 00:08:50,180
arrow shows here the 6502 processor

154
00:08:48,390 --> 00:08:54,860
would

155
00:08:50,180 --> 00:08:59,439
address every single one of these 1120

156
00:08:54,860 --> 00:09:05,750
LED modules at a time and in sequence

157
00:08:59,440 --> 00:09:08,590
meaning that the well the other 1119 LED

158
00:09:05,750 --> 00:09:11,500
modules were just not doing anything

159
00:09:08,590 --> 00:09:15,830
most of the time right there's only one

160
00:09:11,500 --> 00:09:17,390
one module receiving data so this was

161
00:09:15,830 --> 00:09:22,280
changed in generation hardware

162
00:09:17,390 --> 00:09:24,560
generation 2.5 where the so actually we

163
00:09:22,280 --> 00:09:26,540
weren't using the 6502 controller then

164
00:09:24,560 --> 00:09:30,979
anymore but but anyway it's just

165
00:09:26,540 --> 00:09:32,209
representative here the the main the

166
00:09:30,980 --> 00:09:34,640
main controller the master controller

167
00:09:32,210 --> 00:09:38,360
sends data to these new row controllers

168
00:09:34,640 --> 00:09:42,830
that were designed in NCC CB by some

169
00:09:38,360 --> 00:09:47,030
members and they have distributed video

170
00:09:42,830 --> 00:09:48,770
memory so each row has has a video

171
00:09:47,030 --> 00:09:52,880
memory for the contents that is there

172
00:09:48,770 --> 00:09:54,829
and also parallelization the master

173
00:09:52,880 --> 00:09:58,700
controller sends data to all the row

174
00:09:54,830 --> 00:10:00,650
controllers and only to the row

175
00:09:58,700 --> 00:10:03,380
controllers and the row controllers then

176
00:10:00,650 --> 00:10:07,939
take care of sending data out into the

177
00:10:03,380 --> 00:10:13,430
LED modules or the LED driver chips this

178
00:10:07,940 --> 00:10:17,570
is what it looks like there's a bug in

179
00:10:13,430 --> 00:10:20,839
the hardware that we fixed there but

180
00:10:17,570 --> 00:10:25,600
that was that was good that got us some

181
00:10:20,840 --> 00:10:31,130
more frame rate in in the bitmap bitmap

182
00:10:25,600 --> 00:10:32,570
transfer and then we well then that

183
00:10:31,130 --> 00:10:37,250
wasn't enough it was still too slow for

184
00:10:32,570 --> 00:10:39,410
us so we then made an experiment with a

185
00:10:37,250 --> 00:10:39,890
microcontroller that is a bit more

186
00:10:39,410 --> 00:10:43,670
powerful

187
00:10:39,890 --> 00:10:48,260
well fair bit more powerful than the X

188
00:10:43,670 --> 00:10:52,040
Mega cortex m3 arm microcontroller I

189
00:10:48,260 --> 00:10:55,540
believe 96 megahertz and the thing about

190
00:10:52,040 --> 00:10:59,180
these particular ones is that they had

191
00:10:55,540 --> 00:11:00,980
ethernet mac and phy built into the

192
00:10:59,180 --> 00:11:03,099
cortex m3 microcontroller which was

193
00:11:00,980 --> 00:11:09,730
quite unusual but

194
00:11:03,100 --> 00:11:12,459
very suitable for for our project so the

195
00:11:09,730 --> 00:11:13,870
main problem that the graphics the

196
00:11:12,459 --> 00:11:16,029
bitmaps would have to be in this weird

197
00:11:13,870 --> 00:11:21,670
order going up and down instead of how

198
00:11:16,029 --> 00:11:25,660
we used to it from left to right so yeah

199
00:11:21,670 --> 00:11:29,759
so this was this is within one one row

200
00:11:25,660 --> 00:11:33,699
you would have to send these vertical

201
00:11:29,759 --> 00:11:37,360
vertical bytes and that wasn't wasn't

202
00:11:33,699 --> 00:11:40,359
that all fun and we decided to solve

203
00:11:37,360 --> 00:11:43,180
that in in generation three we

204
00:11:40,360 --> 00:11:47,170
implemented a few new commands tuned to

205
00:11:43,180 --> 00:11:51,189
new bitmap transfer commands to support

206
00:11:47,170 --> 00:11:56,709
just the regular linear bitmap transfer

207
00:11:51,190 --> 00:12:00,850
that that is used also in in the in a

208
00:11:56,709 --> 00:12:02,819
regular PC or computer to represent

209
00:12:00,850 --> 00:12:06,250
bitmap data where you send the pixels

210
00:12:02,819 --> 00:12:09,250
after each other vertically horizontally

211
00:12:06,250 --> 00:12:17,620
and then you move to the next scanline

212
00:12:09,250 --> 00:12:21,000
and and so on so there's and also the

213
00:12:17,620 --> 00:12:25,690
this ARM architecture had some nice

214
00:12:21,000 --> 00:12:27,970
instructions to to do this bit this bit

215
00:12:25,690 --> 00:12:32,339
transformation like to rotate 8 by 8

216
00:12:27,970 --> 00:12:37,000
bits was was what was fun and easy and

217
00:12:32,339 --> 00:12:40,329
this the 2.5 g new row controllers they

218
00:12:37,000 --> 00:12:42,760
also they jumping back a bit they made

219
00:12:40,329 --> 00:12:46,239
some optimizations as well to sort of

220
00:12:42,760 --> 00:12:48,760
reduce the data transfer that needed to

221
00:12:46,240 --> 00:12:50,740
go into the rows because we had some

222
00:12:48,760 --> 00:12:55,269
flickering and we didn't have completely

223
00:12:50,740 --> 00:13:00,810
stable data transfer but reducing the

224
00:12:55,269 --> 00:13:06,250
the throughput helped with that that

225
00:13:00,810 --> 00:13:08,829
allowed us to to still update a lot of

226
00:13:06,250 --> 00:13:10,870
changing information but areas that were

227
00:13:08,829 --> 00:13:14,359
all the same they didn't get updated at

228
00:13:10,870 --> 00:13:18,230
all and to save power also

229
00:13:14,360 --> 00:13:20,869
if one of these 8x8 modules were had no

230
00:13:18,230 --> 00:13:23,949
LEDs on then this particular maximum

231
00:13:20,869 --> 00:13:27,319
chip would be set to Power Save mode so

232
00:13:23,949 --> 00:13:30,498
one also wanted to improve efficiency

233
00:13:27,319 --> 00:13:33,339
and reduce power consumption when we

234
00:13:30,499 --> 00:13:37,519
started out with the Gen 1 Hardware we

235
00:13:33,339 --> 00:13:40,189
somehow we have some measurements we

236
00:13:37,519 --> 00:13:44,329
believe that we measured it to be over

237
00:13:40,189 --> 00:13:46,790
one kilowatt with all LEDs on and we've

238
00:13:44,329 --> 00:13:49,339
improved that with each hardware

239
00:13:46,790 --> 00:13:58,040
generation and we'll come back to power

240
00:13:49,339 --> 00:14:00,709
in a little bit yeah so this this bitmap

241
00:13:58,040 --> 00:14:03,079
linear command and the linear windowed

242
00:14:00,709 --> 00:14:04,429
command where you can only update you

243
00:14:03,079 --> 00:14:09,618
cannot choose to update only a portion

244
00:14:04,429 --> 00:14:13,279
of the screen we we had the issues with

245
00:14:09,619 --> 00:14:16,819
this cortex m3 that it did have a

246
00:14:13,279 --> 00:14:18,379
built-in ethernet mac and phy so network

247
00:14:16,819 --> 00:14:21,410
connectivity was easy and there was a

248
00:14:18,379 --> 00:14:25,009
example code for an IP stack and and all

249
00:14:21,410 --> 00:14:28,459
was good but unfortunately the hardware

250
00:14:25,009 --> 00:14:33,799
only had 2 kilobytes of packet buffer

251
00:14:28,459 --> 00:14:36,290
memory so if we if we take these 71

252
00:14:33,799 --> 00:14:38,600
thousand pixels and we want to orbit's

253
00:14:36,290 --> 00:14:40,998
and we want to send those in one packet

254
00:14:38,600 --> 00:14:45,230
we have a bit of a problem because

255
00:14:40,999 --> 00:14:46,669
that's some 9 kilobytes of data and with

256
00:14:45,230 --> 00:14:51,019
this microcontroller only having 2

257
00:14:46,669 --> 00:14:53,600
kilobytes of packet buffer some packets

258
00:14:51,019 --> 00:14:57,860
are gonna get lost so that was a bad

259
00:14:53,600 --> 00:15:00,589
scene and we we worked around it by

260
00:14:57,860 --> 00:15:04,549
instead of then sending one big UDP

261
00:15:00,589 --> 00:15:08,959
packet with a full image data we would

262
00:15:04,549 --> 00:15:11,209
manually do what the IP stack does so

263
00:15:08,959 --> 00:15:14,599
the we send one UDP packet with nine

264
00:15:11,209 --> 00:15:16,729
kilobytes of data the the network stack

265
00:15:14,600 --> 00:15:19,279
divides this up because the network

266
00:15:16,730 --> 00:15:22,569
can't transfer that big packets and it

267
00:15:19,279 --> 00:15:25,939
split split up into six or seven packets

268
00:15:22,569 --> 00:15:27,139
1500 bytes or whatever the MTU is since

269
00:15:25,939 --> 00:15:27,880
that's out of the display but the

270
00:15:27,139 --> 00:15:29,140
display only

271
00:15:27,880 --> 00:15:31,120
see the first and the third and the

272
00:15:29,140 --> 00:15:32,980
fifth because in between it's busy

273
00:15:31,120 --> 00:15:36,100
copying the the packet that it just

274
00:15:32,980 --> 00:15:40,180
received into the into the display

275
00:15:36,100 --> 00:15:44,680
memory so what we did as a workaround

276
00:15:40,180 --> 00:15:47,650
and first while to to overcome this at

277
00:15:44,680 --> 00:15:50,650
first was we did this splitting the

278
00:15:47,650 --> 00:15:53,640
video frame or the the I revealed the

279
00:15:50,650 --> 00:15:56,770
secret now splitting the the image frame

280
00:15:53,640 --> 00:15:59,170
into several packets already on the

281
00:15:56,770 --> 00:16:00,460
sending side not not in the IP stack or

282
00:15:59,170 --> 00:16:03,370
in the network stack but actually in the

283
00:16:00,460 --> 00:16:07,000
application so we made a video or image

284
00:16:03,370 --> 00:16:11,170
transfer application and there we cut up

285
00:16:07,000 --> 00:16:13,570
the the image in little packets and we

286
00:16:11,170 --> 00:16:15,520
built in an artificial delay between the

287
00:16:13,570 --> 00:16:17,980
packets and that really that really hurt

288
00:16:15,520 --> 00:16:25,600
we that was painful we didn't like that

289
00:16:17,980 --> 00:16:27,280
at all not a nice always get more FPS of

290
00:16:25,600 --> 00:16:29,620
course we need to we want to make it go

291
00:16:27,280 --> 00:16:32,199
fast and we want to we want to play I

292
00:16:29,620 --> 00:16:34,360
want to be able to play video on the

293
00:16:32,200 --> 00:16:38,710
thing that was that was always the goal

294
00:16:34,360 --> 00:16:41,440
the second generation had a few FPS like

295
00:16:38,710 --> 00:16:42,940
two or three or so with the bitmap

296
00:16:41,440 --> 00:16:45,910
transfer commands and with the third

297
00:16:42,940 --> 00:16:50,110
generation we we were able to get it up

298
00:16:45,910 --> 00:16:52,780
to some nine ten maybe twelve FPS on a

299
00:16:50,110 --> 00:16:53,920
good day but we weren't happy because

300
00:16:52,780 --> 00:16:57,550
that didn't look so nice

301
00:16:53,920 --> 00:17:01,689
still so then we we took out the

302
00:16:57,550 --> 00:17:04,629
sledgehammer and we decided we'd try to

303
00:17:01,690 --> 00:17:06,280
use a bigger bound black because it has

304
00:17:04,630 --> 00:17:08,819
the PRU

305
00:17:06,280 --> 00:17:11,319
which is the programmable real time unit

306
00:17:08,819 --> 00:17:14,409
so the bigger bomb black many people

307
00:17:11,319 --> 00:17:16,420
know as a Linux Linux port similar to

308
00:17:14,410 --> 00:17:20,589
another fruity board that I won't

309
00:17:16,420 --> 00:17:24,850
mention and it is a Linux board it's

310
00:17:20,589 --> 00:17:27,790
it's a nice roughly gigahertz system on

311
00:17:24,849 --> 00:17:31,750
a chip but inside of this there are also

312
00:17:27,790 --> 00:17:35,260
two coprocessor course so two 200

313
00:17:31,750 --> 00:17:38,860
megahertz little Co processors that are

314
00:17:35,260 --> 00:17:40,340
completely separate from the arm running

315
00:17:38,860 --> 00:17:41,959
the Linux system

316
00:17:40,340 --> 00:17:45,289
and you can write little program

317
00:17:41,960 --> 00:17:48,500
snippets for these and they run they run

318
00:17:45,289 --> 00:17:53,990
quite fast 200 megahertz and they can do

319
00:17:48,500 --> 00:17:58,429
i/o single cycle IO GPIO while writing

320
00:17:53,990 --> 00:18:01,159
and reading and that we figured would be

321
00:17:58,429 --> 00:18:03,409
a very good way to to increase the

322
00:18:01,159 --> 00:18:09,799
performance the the last bit that we

323
00:18:03,409 --> 00:18:12,289
needed and so we had already taken

324
00:18:09,799 --> 00:18:14,990
several steps we'd already optimized the

325
00:18:12,289 --> 00:18:17,390
data transfer going over this the the

326
00:18:14,990 --> 00:18:19,669
the ribbon cable that you can maybe see

327
00:18:17,390 --> 00:18:20,289
through them through the front of the

328
00:18:19,669 --> 00:18:22,909
display

329
00:18:20,289 --> 00:18:25,330
it used to be serial with a very first

330
00:18:22,909 --> 00:18:27,500
hardware with the second-generation

331
00:18:25,330 --> 00:18:30,439
hardware it was still serial with the

332
00:18:27,500 --> 00:18:31,820
2.5 we change it to parallel so one by

333
00:18:30,440 --> 00:18:34,460
it would be transferred at a time

334
00:18:31,820 --> 00:18:35,928
instead of just one bit and the row

335
00:18:34,460 --> 00:18:39,440
controllers would then take care of

336
00:18:35,929 --> 00:18:41,690
sending that that data it's here really

337
00:18:39,440 --> 00:18:43,190
one bit at a time because they have time

338
00:18:41,690 --> 00:18:45,230
one of the other row controllers get

339
00:18:43,190 --> 00:18:47,529
their new data and with the bigger bomb

340
00:18:45,230 --> 00:18:52,580
back we continued that so we write some

341
00:18:47,529 --> 00:18:55,580
pru firmware to talk to the row

342
00:18:52,580 --> 00:18:57,949
controllers and send them out the data

343
00:18:55,580 --> 00:19:01,000
the bigger the the PRU has a shared

344
00:18:57,950 --> 00:19:04,580
memory so the Linux system just receives

345
00:19:01,000 --> 00:19:06,649
bitmap packets or really command packets

346
00:19:04,580 --> 00:19:08,539
looks at the command and does whatever

347
00:19:06,649 --> 00:19:11,809
is necessary and saves the bitmap date

348
00:19:08,539 --> 00:19:14,658
into this shared memory does nothing

349
00:19:11,809 --> 00:19:17,480
else does only that in a loop the PRU is

350
00:19:14,659 --> 00:19:19,970
running independently a farmer that

351
00:19:17,480 --> 00:19:21,860
takes the bitmap date out of this shared

352
00:19:19,970 --> 00:19:24,260
memory and sends it out the bus to the

353
00:19:21,860 --> 00:19:27,350
road controllers so even even more

354
00:19:24,260 --> 00:19:30,289
parallelization and with this we were

355
00:19:27,350 --> 00:19:35,168
able to go all the way up to 40 FPS so

356
00:19:30,289 --> 00:19:38,450
that's yeah mission accomplished somehow

357
00:19:35,169 --> 00:19:41,700
let's show some pictures of the

358
00:19:38,450 --> 00:19:46,020
right so this is the the current state

359
00:19:41,700 --> 00:19:50,429
of things we have the BeagleBone black

360
00:19:46,020 --> 00:19:53,668
up top left with a cape on a bread on a

361
00:19:50,429 --> 00:19:55,260
bread board with I think there's some

362
00:19:53,669 --> 00:19:57,179
level shifters and maybe some i/o

363
00:19:55,260 --> 00:19:58,700
buffers I don't remember anymore exactly

364
00:19:57,179 --> 00:20:03,870
what's all on there

365
00:19:58,700 --> 00:20:06,029
but but yeah - to drive the drive the

366
00:20:03,870 --> 00:20:10,860
bus going down and you can also see the

367
00:20:06,029 --> 00:20:12,929
power supply here this is quite a small

368
00:20:10,860 --> 00:20:14,760
power supply it's not enough for the

369
00:20:12,929 --> 00:20:18,090
whole for the whole display it's only

370
00:20:14,760 --> 00:20:21,240
powering the bigger bound black and this

371
00:20:18,090 --> 00:20:23,809
is part of the the other well the the

372
00:20:21,240 --> 00:20:28,770
real power supply let's say for the LEDs

373
00:20:23,809 --> 00:20:32,250
is there one more actually yeah there -

374
00:20:28,770 --> 00:20:35,668
exactly right the two of these power

375
00:20:32,250 --> 00:20:38,610
supplies are needed to to drive all of

376
00:20:35,669 --> 00:20:40,260
the LEDs I think they are I don't

377
00:20:38,610 --> 00:20:43,740
remember anymore I think they're 500

378
00:20:40,260 --> 00:20:48,120
watts each but we don't we don't

379
00:20:43,740 --> 00:20:50,340
actually need that much and we have to

380
00:20:48,120 --> 00:20:57,809
because there wasn't a single one that

381
00:20:50,340 --> 00:20:59,129
was high-capacity enough and fanless we

382
00:20:57,809 --> 00:21:00,809
did this we've mounted these power

383
00:20:59,130 --> 00:21:03,299
supplies there were other power supplies

384
00:21:00,809 --> 00:21:05,760
before that were really inefficient so

385
00:21:03,299 --> 00:21:10,200
switch switch mode power supplies from

386
00:21:05,760 --> 00:21:16,799
the 1990s were replaced with some some

387
00:21:10,200 --> 00:21:23,100
modern moderns which we did that in CCTV

388
00:21:16,799 --> 00:21:27,270
yeah the red and black and but these

389
00:21:23,100 --> 00:21:29,428
copper copper bars and fuses they were

390
00:21:27,270 --> 00:21:32,720
already there so they they are factory

391
00:21:29,429 --> 00:21:35,820
and this little board in the in the

392
00:21:32,720 --> 00:21:40,140
center there is an ad converter to

393
00:21:35,820 --> 00:21:41,850
monitor the voltage output of these

394
00:21:40,140 --> 00:21:43,890
these power supplies because we wanted

395
00:21:41,850 --> 00:21:46,289
to see okay when we switch on and off

396
00:21:43,890 --> 00:21:48,480
all of the 70,000 LEDs at a time do the

397
00:21:46,289 --> 00:21:50,520
power supplies actually keep up with

398
00:21:48,480 --> 00:21:52,940
that and yes indeed they do then it's as

399
00:21:50,520 --> 00:21:55,620
stable five volt

400
00:21:52,940 --> 00:21:57,419
yeah this is the bottom right corner

401
00:21:55,620 --> 00:22:00,510
where there's the power connection and

402
00:21:57,419 --> 00:22:05,460
the Ethernet connector and there's a

403
00:22:00,510 --> 00:22:10,559
nice engraving showing our yeah we had

404
00:22:05,460 --> 00:22:13,710
to have to tag it okay so let's go over

405
00:22:10,559 --> 00:22:15,720
to software and like as you might

406
00:22:13,710 --> 00:22:17,909
already feel I don't know that much

407
00:22:15,720 --> 00:22:20,549
about the harbor it was always a

408
00:22:17,909 --> 00:22:23,190
pleasure and being in the CCC in getting

409
00:22:20,549 --> 00:22:24,690
like hearing about seeing all that's

410
00:22:23,190 --> 00:22:27,990
being done by the different members of

411
00:22:24,690 --> 00:22:30,059
the club everybody's just pouring their

412
00:22:27,990 --> 00:22:33,330
heart out with where what they were good

413
00:22:30,059 --> 00:22:35,340
in and I do web development so I only

414
00:22:33,330 --> 00:22:38,580
was able to do stuff after they

415
00:22:35,340 --> 00:22:40,918
delivered a web server on it and gave me

416
00:22:38,580 --> 00:22:44,428
WebSocket which we will be talking about

417
00:22:40,919 --> 00:22:50,909
soon first let's quickly talk about the

418
00:22:44,429 --> 00:22:52,919
font so the font system is a CP 437 I am

419
00:22:50,909 --> 00:22:56,789
too young to really know this I think

420
00:22:52,919 --> 00:22:58,830
feeling but I you might also know this

421
00:22:56,789 --> 00:23:01,919
from the boots cream because that's the

422
00:22:58,830 --> 00:23:04,110
same system being used there and and

423
00:23:01,919 --> 00:23:09,900
ms-dos I name is first ever stores use

424
00:23:04,110 --> 00:23:11,760
this I don't know so there's fonts out

425
00:23:09,900 --> 00:23:13,919
there obviously why would we need our

426
00:23:11,760 --> 00:23:18,169
own because we have our own one member

427
00:23:13,919 --> 00:23:22,770
built one the problem is we have 8x8

428
00:23:18,169 --> 00:23:24,270
pixel modules right and there's 8x8

429
00:23:22,770 --> 00:23:26,850
fonts that's one of the standard says

430
00:23:24,270 --> 00:23:29,010
two different types one is higher it's 8

431
00:23:26,850 --> 00:23:30,570
by 16 or something that's obviously

432
00:23:29,010 --> 00:23:32,789
wouldn't fit but eight by eight would

433
00:23:30,570 --> 00:23:36,240
fit perfectly but there's a problem our

434
00:23:32,789 --> 00:23:38,789
modules 1 next to each other and when

435
00:23:36,240 --> 00:23:41,640
you put text on there there's no space

436
00:23:38,789 --> 00:23:44,580
in between so that's there was the needs

437
00:23:41,640 --> 00:23:46,980
that we needed to solve that we have to

438
00:23:44,580 --> 00:23:51,570
have a gap so in the end

439
00:23:46,980 --> 00:23:53,730
a 7x7 pixel version of this very basic

440
00:23:51,570 --> 00:23:57,810
font was created and this is the bitmap

441
00:23:53,730 --> 00:24:01,500
of it this is the basic texture set

442
00:23:57,810 --> 00:24:03,210
that's in there right now and the I

443
00:24:01,500 --> 00:24:06,450
don't know if you see it on the screen

444
00:24:03,210 --> 00:24:09,810
but there's a light gray area on the

445
00:24:06,450 --> 00:24:17,490
right of the seven by seven areas this

446
00:24:09,810 --> 00:24:20,370
is the gap next to it and Mark who was

447
00:24:17,490 --> 00:24:24,840
working on this he created the font I

448
00:24:20,370 --> 00:24:28,199
think in Windows mspaint mspaint he said

449
00:24:24,840 --> 00:24:29,970
like you know in wine I think because

450
00:24:28,200 --> 00:24:31,710
all right he said this is still the best

451
00:24:29,970 --> 00:24:34,140
thing if you want to pixel GIMP is not

452
00:24:31,710 --> 00:24:37,080
good enough for that and then he created

453
00:24:34,140 --> 00:24:39,690
some scripts around to export it and to

454
00:24:37,080 --> 00:24:42,870
on the one hand create a see header that

455
00:24:39,690 --> 00:24:45,840
is being used on the BeagleBone and you

456
00:24:42,870 --> 00:24:48,959
also output it a web font that we were

457
00:24:45,840 --> 00:24:52,379
able to then use in the web editor the

458
00:24:48,960 --> 00:24:56,960
web interface of the display to see

459
00:24:52,380 --> 00:25:01,950
almost the same directly on your browser

460
00:24:56,960 --> 00:25:04,770
and then the next quick thinking was put

461
00:25:01,950 --> 00:25:07,800
into dithering I don't know if you know

462
00:25:04,770 --> 00:25:10,440
the concept but I mean let's say we have

463
00:25:07,800 --> 00:25:12,330
an image frame and it's color obviously

464
00:25:10,440 --> 00:25:16,740
we don't have color in there so we need

465
00:25:12,330 --> 00:25:19,020
to make it into something or I step one

466
00:25:16,740 --> 00:25:21,990
point two four and we need to first

467
00:25:19,020 --> 00:25:23,850
convert it to black and white but then

468
00:25:21,990 --> 00:25:25,410
again I told you before about the

469
00:25:23,850 --> 00:25:29,490
brightness we can only change the

470
00:25:25,410 --> 00:25:33,390
brightness in an 8x8 area so we couldn't

471
00:25:29,490 --> 00:25:37,230
do like a gray and gray in there right

472
00:25:33,390 --> 00:25:39,360
we can only do green or black or nothing

473
00:25:37,230 --> 00:25:43,950
so you need to the ring which is a

474
00:25:39,360 --> 00:25:48,149
technique to create that effect by just

475
00:25:43,950 --> 00:25:51,570
using space by just using less white

476
00:25:48,150 --> 00:25:53,220
well in this case green dots it's the

477
00:25:51,570 --> 00:25:54,870
same technique almost the same that

478
00:25:53,220 --> 00:25:56,059
printers are using because they also

479
00:25:54,870 --> 00:25:59,330
only can print

480
00:25:56,059 --> 00:26:01,969
and not black so let's zoom in a bit to

481
00:25:59,330 --> 00:26:06,859
see maybe see this a bit more this is

482
00:26:01,969 --> 00:26:08,629
like to the image and Mark will put a

483
00:26:06,859 --> 00:26:12,139
lot of love in this he even built like

484
00:26:08,629 --> 00:26:13,998
his own laugh 2d like a lure application

485
00:26:12,139 --> 00:26:16,428
to test a lot of different differing

486
00:26:13,999 --> 00:26:20,059
algorithms there's Floyd Steinberg which

487
00:26:16,429 --> 00:26:22,580
is a very basic one but he quickly saw

488
00:26:20,059 --> 00:26:25,869
that this is not good enough he's not

489
00:26:22,580 --> 00:26:28,999
fitting the high quality standard that

490
00:26:25,869 --> 00:26:31,459
he was aiming for and so this was the

491
00:26:28,999 --> 00:26:34,509
application remote where in the top left

492
00:26:31,460 --> 00:26:36,830
corner is their their original image

493
00:26:34,509 --> 00:26:39,169
it's actually in color and there were

494
00:26:36,830 --> 00:26:41,689
different ones for testing and then he

495
00:26:39,169 --> 00:26:44,839
could compare two different delivering

496
00:26:41,690 --> 00:26:49,639
algorithms in the middle and bottom

497
00:26:44,839 --> 00:26:52,279
picture and in the end he's settled for

498
00:26:49,639 --> 00:26:53,928
I don't have the name here it starting

499
00:26:52,279 --> 00:26:57,229
with O and I think it's a Russian name

500
00:26:53,929 --> 00:27:01,129
or something something as a base

501
00:26:57,229 --> 00:27:04,429
algorithm and then he had also some more

502
00:27:01,129 --> 00:27:07,309
pre-processing and to Eve to improve the

503
00:27:04,429 --> 00:27:10,399
results further he does some blurring in

504
00:27:07,309 --> 00:27:12,499
the beginning because in the end you

505
00:27:10,399 --> 00:27:15,049
won't see all the details with the do

506
00:27:12,499 --> 00:27:16,879
the ring so he blurs out like the

507
00:27:15,049 --> 00:27:18,830
blurring will remove the the details

508
00:27:16,879 --> 00:27:21,908
that won't be shown anyway and then it

509
00:27:18,830 --> 00:27:25,549
has some sharpening afterwards to make

510
00:27:21,909 --> 00:27:29,029
those features that are gonna be shown a

511
00:27:25,549 --> 00:27:31,879
bit sharper and and you see it in the

512
00:27:29,029 --> 00:27:33,710
bottom left it's not a really good

513
00:27:31,879 --> 00:27:36,259
representation because it scales and

514
00:27:33,710 --> 00:27:38,179
when you scale the other stuff then it's

515
00:27:36,259 --> 00:27:40,749
bad but you see the results on the

516
00:27:38,179 --> 00:27:40,749
screen time

517
00:27:41,730 --> 00:27:48,320
heck just or our UDP packets yeah so

518
00:27:48,889 --> 00:27:53,699
nine kilobyte bitmap frames maybe I said

519
00:27:51,870 --> 00:27:55,768
this already let's see what's the next

520
00:27:53,700 --> 00:27:59,220
yeah the UDP port we have to speed up a

521
00:27:55,769 --> 00:28:02,519
bit as well so yeah UDP packet think it

522
00:27:59,220 --> 00:28:13,380
was WebSockets from my partner because I

523
00:28:02,519 --> 00:28:15,630
never do DP before and with WebSockets I

524
00:28:13,380 --> 00:28:17,960
was suddenly able to send pic slits

525
00:28:15,630 --> 00:28:21,809
through this display in the browser

526
00:28:17,960 --> 00:28:24,389
using javascript and the web socket API

527
00:28:21,809 --> 00:28:27,539
is not the full API is it's not the same

528
00:28:24,389 --> 00:28:29,729
as the UDP API it's just for sending

529
00:28:27,539 --> 00:28:32,129
pixels so I was mostly working with it

530
00:28:29,730 --> 00:28:34,350
having a canvas and then just sending

531
00:28:32,130 --> 00:28:39,350
the canvas data there the pure pixel

532
00:28:34,350 --> 00:28:45,809
data directly to the display there's a

533
00:28:39,350 --> 00:28:49,469
simple demo application showing the

534
00:28:45,809 --> 00:28:54,928
WebSocket implementation or how to send

535
00:28:49,470 --> 00:28:56,760
stuff there you know if it's big enough

536
00:28:54,929 --> 00:29:01,730
to see but in the end

537
00:28:56,760 --> 00:29:04,889
WebSockets is I mean it's a two-way

538
00:29:01,730 --> 00:29:06,779
communication based on TCP actually for

539
00:29:04,889 --> 00:29:11,059
the web to to send stuff somewhere and

540
00:29:06,779 --> 00:29:13,260
and you just build up the connection and

541
00:29:11,059 --> 00:29:16,769
say that you were gonna send array

542
00:29:13,260 --> 00:29:19,200
buffer data and you grab the pixels from

543
00:29:16,769 --> 00:29:20,880
the canvas at first I did that before I

544
00:29:19,200 --> 00:29:23,490
drew a rectangle on the canvas in this

545
00:29:20,880 --> 00:29:26,820
case and then go through all the pixels

546
00:29:23,490 --> 00:29:30,419
pack it up in two bytes and just send it

547
00:29:26,820 --> 00:29:32,850
out and it was actually quite simple to

548
00:29:30,419 --> 00:29:35,700
learn applications with that it's a very

549
00:29:32,850 --> 00:29:38,939
simple very simple protocol but it

550
00:29:35,700 --> 00:29:44,159
worked worked fine so let's talk about

551
00:29:38,940 --> 00:29:44,580
applications and the CCC B what we we do

552
00:29:44,159 --> 00:29:47,100
with it

553
00:29:44,580 --> 00:29:49,168
so the basic one it's a welcome screen

554
00:29:47,100 --> 00:29:51,059
it's since it's mounted on the wall

555
00:29:49,169 --> 00:29:53,649
usually whenever we have open days it's

556
00:29:51,059 --> 00:29:56,740
on and this is what it's showing

557
00:29:53,649 --> 00:30:00,279
it's not always on obviously but usually

558
00:29:56,740 --> 00:30:02,889
this loves the boot screen they're one

559
00:30:00,279 --> 00:30:04,539
of the first one of early early

560
00:30:02,889 --> 00:30:06,428
implementations was when we didn't have

561
00:30:04,539 --> 00:30:10,210
the bitmap yet I think correct me if I'm

562
00:30:06,429 --> 00:30:11,470
wrong then we the first movie was a sq

563
00:30:10,210 --> 00:30:12,700
Star Wars movie that's apparently

564
00:30:11,470 --> 00:30:18,370
something where you can tell in it in

565
00:30:12,700 --> 00:30:23,649
and it just sends you this data it was

566
00:30:18,370 --> 00:30:29,320
nice for a beginning but then obviously

567
00:30:23,649 --> 00:30:32,049
which you already see live video mark

568
00:30:29,320 --> 00:30:34,720
built a nice cheese through a plugin so

569
00:30:32,049 --> 00:30:38,110
that you can that takes care of all that

570
00:30:34,720 --> 00:30:40,240
delivering all the processing we were

571
00:30:38,110 --> 00:30:43,449
talking about for you so you could just

572
00:30:40,240 --> 00:30:45,669
send your movie that way and it would

573
00:30:43,450 --> 00:30:47,380
correctly send it to the server there's

574
00:30:45,669 --> 00:30:50,559
one small thing we didn't talk about in

575
00:30:47,380 --> 00:30:53,500
between at one point we optimized also

576
00:30:50,559 --> 00:30:55,629
the the data note by compressing it as

577
00:30:53,500 --> 00:30:58,870
well right that's true if it was between

578
00:30:55,630 --> 00:31:01,330
third or fourth generation that was that

579
00:30:58,870 --> 00:31:05,010
was added into Gen 4 into the fourth

580
00:31:01,330 --> 00:31:07,779
generation so these bitmap commands they

581
00:31:05,010 --> 00:31:09,279
one of them particularly only uses two

582
00:31:07,779 --> 00:31:11,919
of the parameters two of the four

583
00:31:09,279 --> 00:31:15,720
parameters in the UDP protocol and then

584
00:31:11,919 --> 00:31:17,409
we introduced some sub commands

585
00:31:15,720 --> 00:31:21,730
supporting different compression

586
00:31:17,409 --> 00:31:24,250
algorithms there that is was was busy

587
00:31:21,730 --> 00:31:26,919
quite quite some time working through

588
00:31:24,250 --> 00:31:29,049
all the different compression algorithms

589
00:31:26,919 --> 00:31:33,549
that he could could find and settled in

590
00:31:29,049 --> 00:31:35,740
the end on that standard for for for

591
00:31:33,549 --> 00:31:39,629
decompression speed in particular but

592
00:31:35,740 --> 00:31:42,250
still a reasonable compression rate and

593
00:31:39,630 --> 00:31:44,500
also something you might think about is

594
00:31:42,250 --> 00:31:46,210
the lines in between also one of the

595
00:31:44,500 --> 00:31:49,000
steps that of the cheese stream plugin

596
00:31:46,210 --> 00:31:51,940
is to cut out some pictures so that it

597
00:31:49,000 --> 00:31:54,070
doesn't look stretched and in the end so

598
00:31:51,940 --> 00:31:56,590
the way the way that works the gstreamer

599
00:31:54,070 --> 00:31:59,168
plugin says to gstreamer please deliver

600
00:31:56,590 --> 00:32:01,658
grayscale images to me that are actually

601
00:31:59,169 --> 00:32:03,030
that have more pixels than fit on the

602
00:32:01,659 --> 00:32:04,950
display

603
00:32:03,030 --> 00:32:10,230
and in these bitmap transfer commands

604
00:32:04,950 --> 00:32:13,560
then the the gaps where the the metal is

605
00:32:10,230 --> 00:32:15,240
are are copied over so it's it's a

606
00:32:13,560 --> 00:32:20,250
little bit of it's unfortunately not

607
00:32:15,240 --> 00:32:23,070
zero copy but it's not enough data to be

608
00:32:20,250 --> 00:32:28,080
a problem and it looks a lot better than

609
00:32:23,070 --> 00:32:30,720
than just asking for the exact pixel

610
00:32:28,080 --> 00:32:33,929
resolution of the display then the

611
00:32:30,720 --> 00:32:39,840
images is compressed together and not

612
00:32:33,930 --> 00:32:42,390
not really recognizable and then when

613
00:32:39,840 --> 00:32:45,990
you connect to the API and to the IP of

614
00:32:42,390 --> 00:32:49,470
the of the display you would see this

615
00:32:45,990 --> 00:32:51,480
web interface just add a basic text note

616
00:32:49,470 --> 00:32:54,120
where you could it has a basic text node

617
00:32:51,480 --> 00:32:56,370
where you can just type stuff on the

618
00:32:54,120 --> 00:32:57,959
screen and there's a small canvas

619
00:32:56,370 --> 00:33:01,979
drawing application in there as well to

620
00:32:57,960 --> 00:33:05,550
do some drawing on-screen then one of

621
00:33:01,980 --> 00:33:08,340
the fun things so it's a Bitcoin

622
00:33:05,550 --> 00:33:14,850
interest rate so when we tween with life

623
00:33:08,340 --> 00:33:16,949
updates takes the flight schedule I like

624
00:33:14,850 --> 00:33:19,530
this one a lot and there was also one

625
00:33:16,950 --> 00:33:23,070
for the is that one up next for the

626
00:33:19,530 --> 00:33:26,340
other yeah yes this one is really good

627
00:33:23,070 --> 00:33:28,950
so on the open open nights there's the

628
00:33:26,340 --> 00:33:31,949
finished class station right near by the

629
00:33:28,950 --> 00:33:34,320
club and towards the end of the evening

630
00:33:31,950 --> 00:33:36,600
because it's weekday the trains stopped

631
00:33:34,320 --> 00:33:39,240
running at some time and it's very nice

632
00:33:36,600 --> 00:33:40,770
to have this like sort of countdown when

633
00:33:39,240 --> 00:33:41,240
you have to leave to catch the last

634
00:33:40,770 --> 00:33:44,910
train

635
00:33:41,240 --> 00:33:50,580
nice catch of time I just realized too

636
00:33:44,910 --> 00:33:52,710
that not bad and also a really fun

637
00:33:50,580 --> 00:33:54,960
project was a multiplayer tank game

638
00:33:52,710 --> 00:33:57,890
where you would use your phone or your

639
00:33:54,960 --> 00:34:00,090
laptop and you would connect to the IP

640
00:33:57,890 --> 00:34:02,880
where you would get a controller in your

641
00:34:00,090 --> 00:34:05,490
browser and on the phone you could for

642
00:34:02,880 --> 00:34:09,210
example also used you touch movements to

643
00:34:05,490 --> 00:34:12,149
to steer your tank and then shoot each

644
00:34:09,210 --> 00:34:13,350
other and in this multiplayer game and

645
00:34:12,149 --> 00:34:18,389
the display was the

646
00:34:13,350 --> 00:34:20,460
the map and then last up there was a

647
00:34:18,389 --> 00:34:22,799
nice demo application for the iPhone

648
00:34:20,460 --> 00:34:33,990
where you would just stream the camera

649
00:34:22,800 --> 00:34:36,350
to the display and all right so that's

650
00:34:33,989 --> 00:34:38,879
credits thanks to everybody who helped

651
00:34:36,350 --> 00:34:40,409
helped work on this project everybody

652
00:34:38,880 --> 00:34:42,420
who did work on the project it wasn't

653
00:34:40,409 --> 00:34:46,500
just me and and Felix but a whole bunch

654
00:34:42,420 --> 00:34:49,650
of people at a TCC bee and I always had

655
00:34:46,500 --> 00:34:53,130
a lot of fun working together on this

656
00:34:49,650 --> 00:34:55,080
this thing and I I sort of missed that a

657
00:34:53,130 --> 00:34:57,450
little bit it's been a while since since

658
00:34:55,080 --> 00:35:02,430
somebody did something right with it

659
00:34:57,450 --> 00:35:05,540
right and yeah let's hope that that

660
00:35:02,430 --> 00:35:09,750
changes I gotta say I don't miss it

661
00:35:05,540 --> 00:35:11,730
because it's always so dangerous when

662
00:35:09,750 --> 00:35:13,650
they are handling it but the hundreds of

663
00:35:11,730 --> 00:35:18,000
kiddos in the club it's really really

664
00:35:13,650 --> 00:35:20,780
weird so thanks to you too for now do we

665
00:35:18,000 --> 00:35:20,780
have questions

666
00:35:27,720 --> 00:35:35,790
seas and bases lift then pity my

667
00:35:32,220 --> 00:35:37,649
internet right you mentioned that

668
00:35:35,790 --> 00:35:39,990
modules can be dimmed

669
00:35:37,650 --> 00:35:43,290
it's very did your first animation with

670
00:35:39,990 --> 00:35:46,049
this different algorithm also used the

671
00:35:43,290 --> 00:35:50,609
dimming of module or you should just let

672
00:35:46,050 --> 00:35:52,950
on or off the the dithering as far as I

673
00:35:50,609 --> 00:35:55,109
know if the deterring doesn't use the

674
00:35:52,950 --> 00:35:57,509
the intensity light intensity because

675
00:35:55,109 --> 00:36:01,890
that's only possible to be controlled in

676
00:35:57,510 --> 00:36:03,990
8x8 and I mean you you could I think it

677
00:36:01,890 --> 00:36:07,670
was actually attempted but it didn't

678
00:36:03,990 --> 00:36:10,560
really look great because the pixels are

679
00:36:07,670 --> 00:36:13,710
much smaller than the area that you can

680
00:36:10,560 --> 00:36:17,040
control the intensity of and it didn't

681
00:36:13,710 --> 00:36:19,260
look so nice so several packages like

682
00:36:17,040 --> 00:36:21,240
one for the dimming one for the pixels

683
00:36:19,260 --> 00:36:23,430
two different commands I mean we could

684
00:36:21,240 --> 00:36:26,848
have added a command that that's to do

685
00:36:23,430 --> 00:36:32,069
to do both but it didn't didn't look so

686
00:36:26,849 --> 00:36:33,720
great yeah okay we have another question

687
00:36:32,069 --> 00:36:36,480
here in the front please

688
00:36:33,720 --> 00:36:40,259
thanks for a talk maybe you have other

689
00:36:36,480 --> 00:36:44,099
ideas of upgrading other old nice

690
00:36:40,260 --> 00:36:47,220
devices can you share other ideas of

691
00:36:44,099 --> 00:36:51,839
upgrading old devices well do you have a

692
00:36:47,220 --> 00:36:54,270
device I mean the screen is so you

693
00:36:51,839 --> 00:36:56,310
upgrade it it is now much better than

694
00:36:54,270 --> 00:37:02,430
original one yeah and maybe you have

695
00:36:56,310 --> 00:37:04,109
ideas for more projects if we have some

696
00:37:02,430 --> 00:37:06,390
future projects you may write anything

697
00:37:04,109 --> 00:37:10,500
like this yeah okay at the moment no

698
00:37:06,390 --> 00:37:12,210
unfortunately I mean with there's so

699
00:37:10,500 --> 00:37:15,020
there's been some work on on other

700
00:37:12,210 --> 00:37:21,089
display technology some flip top

701
00:37:15,020 --> 00:37:23,339
projects we've done but not so much in

702
00:37:21,089 --> 00:37:25,290
the club and not as a club project more

703
00:37:23,339 --> 00:37:27,890
more that the same people who worked on

704
00:37:25,290 --> 00:37:30,540
this also did some flip not hacking but

705
00:37:27,890 --> 00:37:32,970
not at the moment if you have

706
00:37:30,540 --> 00:37:36,900
suggestions please just send a mail or

707
00:37:32,970 --> 00:37:37,970
yeah do you may buy something send it

708
00:37:36,900 --> 00:37:40,310
away

709
00:37:37,970 --> 00:37:42,020
but but don't send us your waste right

710
00:37:40,310 --> 00:37:44,060
don't send us old waste and we're not

711
00:37:42,020 --> 00:37:46,550
going to do this or do we know we don't

712
00:37:44,060 --> 00:37:49,270
know we have one more question in the

713
00:37:46,550 --> 00:37:56,540
back and that's the last question please

714
00:37:49,270 --> 00:37:58,509
or no more question no question you're

715
00:37:56,540 --> 00:38:02,710
just standing there

716
00:37:58,510 --> 00:38:06,830
Kalen happen okay then thank you so much

717
00:38:02,710 --> 00:38:08,530
and keep it big applause to our speakers

718
00:38:06,830 --> 00:38:09,940
[Applause]

719
00:38:08,530 --> 00:38:15,119
[Music]

720
00:38:09,940 --> 00:38:15,119
[Applause]

721
00:38:20,920 --> 00:38:25,519
[Music]

722
00:38:26,340 --> 00:38:28,400
you

