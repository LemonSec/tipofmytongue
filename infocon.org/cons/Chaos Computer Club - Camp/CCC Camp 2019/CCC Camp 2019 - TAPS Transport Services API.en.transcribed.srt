1
00:00:08,850 --> 00:00:16,890
[Music]

2
00:00:13,670 --> 00:00:19,560
perhaps transportation services API and

3
00:00:16,890 --> 00:00:21,779
how that relates to retiring the BSD

4
00:00:19,560 --> 00:00:24,119
socket API please give him a great round

5
00:00:21,779 --> 00:00:26,270
of applause and I'm welcoming him to the

6
00:00:24,119 --> 00:00:26,270
stage

7
00:00:28,910 --> 00:00:36,720
hi so my name is Phil or Phillip Teasle

8
00:00:33,110 --> 00:00:42,149
and I'm today here to talk about taps

9
00:00:36,720 --> 00:00:44,550
the transferred socket services API all

10
00:00:42,149 --> 00:00:48,570
the work I'm presenting today is work in

11
00:00:44,550 --> 00:00:50,910
progress so it's has become a fairly

12
00:00:48,570 --> 00:00:52,440
large group of people working on that

13
00:00:50,910 --> 00:00:53,910
and it's really awesome how much

14
00:00:52,440 --> 00:00:56,010
traction I've got but it's still

15
00:00:53,910 --> 00:00:59,760
work-in-progress so we have never see it

16
00:00:56,010 --> 00:01:02,280
we are just talking about internet

17
00:00:59,760 --> 00:01:04,979
drafts and preliminary stuff we're doing

18
00:01:02,280 --> 00:01:09,030
for the API but on the other hand we

19
00:01:04,979 --> 00:01:11,460
have already have a few implementations

20
00:01:09,030 --> 00:01:13,200
and it's really nice seeing how much

21
00:01:11,460 --> 00:01:15,960
fractions are scattered but before

22
00:01:13,200 --> 00:01:18,900
talking about why I want we want to

23
00:01:15,960 --> 00:01:19,970
replace the bsd socket API or want to

24
00:01:18,900 --> 00:01:23,520
retire it

25
00:01:19,970 --> 00:01:26,270
let's see what's wrong with that so

26
00:01:23,520 --> 00:01:29,689
looking at the biggest each socket API

27
00:01:26,270 --> 00:01:33,060
we have to go back in its history and

28
00:01:29,689 --> 00:01:37,500
you see the BC socket API originates

29
00:01:33,060 --> 00:01:40,880
from 4.2 BSD from 1983 I was two years

30
00:01:37,500 --> 00:01:40,880
old when this was released

31
00:01:41,570 --> 00:01:50,339
therefore it is become quite old at this

32
00:01:47,549 --> 00:01:54,240
time it was they were really very strong

33
00:01:50,340 --> 00:01:57,149
in their idea of every single file and

34
00:01:54,240 --> 00:02:00,060
as we didn't have virtual file systems

35
00:01:57,149 --> 00:02:03,840
yet in this time that is had ok if we

36
00:02:00,060 --> 00:02:06,570
want to do networking just make it a

37
00:02:03,840 --> 00:02:09,239
file handle and have instead of an open

38
00:02:06,570 --> 00:02:13,230
called the socket call and everything

39
00:02:09,239 --> 00:02:15,180
works like a fara and it was implemented

40
00:02:13,230 --> 00:02:17,910
as an extension for inter-process

41
00:02:15,180 --> 00:02:20,040
communication so instead of doing inter

42
00:02:17,910 --> 00:02:21,980
process communication on a single

43
00:02:20,040 --> 00:02:25,760
machine we're now doing it over the

44
00:02:21,980 --> 00:02:29,660
new shiny Internet which was quite small

45
00:02:25,760 --> 00:02:36,349
at this present time and were yeah as an

46
00:02:29,660 --> 00:02:40,340
experiment and you're they decided to

47
00:02:36,349 --> 00:02:41,690
say we have to two kinds of IP is for

48
00:02:40,340 --> 00:02:44,209
inter-process commendation a message

49
00:02:41,690 --> 00:02:45,260
based you can easily also create a new

50
00:02:44,209 --> 00:02:50,540
experience oh good

51
00:02:45,260 --> 00:02:52,310
and a stream based and for this they

52
00:02:50,540 --> 00:02:56,599
implemented the user Datagram protocol

53
00:02:52,310 --> 00:03:00,099
UDP which is unreliable and the

54
00:02:56,599 --> 00:03:05,630
transport control protocol TCP which is

55
00:03:00,099 --> 00:03:08,780
reliable stream and SS was the first

56
00:03:05,630 --> 00:03:10,549
really not real API that ought to be

57
00:03:08,780 --> 00:03:13,220
usable and it doesn't require to

58
00:03:10,549 --> 00:03:14,900
fiddling with network drivers or putting

59
00:03:13,220 --> 00:03:17,690
assembler code in to come that but

60
00:03:14,900 --> 00:03:20,900
enabled everyone who was able to write a

61
00:03:17,690 --> 00:03:22,120
file to also do network in the process

62
00:03:20,900 --> 00:03:25,700
communication

63
00:03:22,120 --> 00:03:27,799
it became the template of most modern

64
00:03:25,700 --> 00:03:29,450
networking APRs if you look at the bsd

65
00:03:27,799 --> 00:03:32,630
socket API and look at the windows

66
00:03:29,450 --> 00:03:34,459
socket API or other circuit APRs on

67
00:03:32,630 --> 00:03:36,319
embedded platforms they look quite the

68
00:03:34,459 --> 00:03:39,850
same they're all modeled after the

69
00:03:36,319 --> 00:03:46,220
original business over there so let's

70
00:03:39,850 --> 00:03:49,970
see what we need to open a socket this

71
00:03:46,220 --> 00:03:55,810
is the classical example from Stevens at

72
00:03:49,970 --> 00:04:00,739
all UNIX network programming this is

73
00:03:55,810 --> 00:04:04,100
still the reference on how to do this so

74
00:04:00,739 --> 00:04:08,180
you first create an integer variable to

75
00:04:04,100 --> 00:04:10,880
put the socket file descriptor as file

76
00:04:08,180 --> 00:04:17,090
descriptors are integers then the

77
00:04:10,880 --> 00:04:19,719
reserve is struct for that the name

78
00:04:17,089 --> 00:04:24,500
resolution configure it a little bit and

79
00:04:19,720 --> 00:04:28,099
call get error info with all this stuff

80
00:04:24,500 --> 00:04:31,640
and to get the return parameters now you

81
00:04:28,099 --> 00:04:36,200
have a linked list of stuff that allows

82
00:04:31,640 --> 00:04:38,900
you to come to connect and as the result

83
00:04:36,200 --> 00:04:43,880
of the name resolution if you figure to

84
00:04:38,900 --> 00:04:46,099
get an error and then it gets worse you

85
00:04:43,880 --> 00:04:49,070
start a while loop iterating about this

86
00:04:46,099 --> 00:04:52,820
list and trying can i connect the socket

87
00:04:49,070 --> 00:04:57,229
if it works we fine if it doesn't work

88
00:04:52,820 --> 00:04:59,349
try the next one tree try to connect if

89
00:04:57,229 --> 00:05:02,990
it works we're fine if it doesn't work

90
00:04:59,349 --> 00:05:04,610
it blocks its timeouts and we're gonna

91
00:05:02,990 --> 00:05:08,090
do the next row and thread to drive the

92
00:05:04,610 --> 00:05:10,460
next one afterwards we have some fry

93
00:05:08,090 --> 00:05:12,039
descriptor we have a special free that

94
00:05:10,460 --> 00:05:17,450
allows us to free the whole list and

95
00:05:12,039 --> 00:05:21,590
we're done so simple question what's

96
00:05:17,450 --> 00:05:24,610
wrong with that and I'm not thinking

97
00:05:21,590 --> 00:05:27,619
about modern api's but just on what's

98
00:05:24,610 --> 00:05:29,270
wrong if you accept that C is programmed

99
00:05:27,620 --> 00:05:34,159
that way what's still wrong with that

100
00:05:29,270 --> 00:05:37,130
and the question the answer is today's

101
00:05:34,159 --> 00:05:43,520
Internet Transport has changed we're not

102
00:05:37,130 --> 00:05:46,880
in 1983 anymore and therefore a few

103
00:05:43,520 --> 00:05:49,909
things changed first we have much more

104
00:05:46,880 --> 00:05:52,240
many more protocols out there than just

105
00:05:49,909 --> 00:05:55,280
TCP and UDP

106
00:05:52,240 --> 00:06:00,200
at the narrow waist of the Internet we

107
00:05:55,280 --> 00:06:04,849
now have ipv4 and ipv6 and not IP before

108
00:06:00,200 --> 00:06:06,110
anymore at the transport layer we don't

109
00:06:04,849 --> 00:06:08,659
have we have

110
00:06:06,110 --> 00:06:13,729
SCTP as a reliable message based

111
00:06:08,659 --> 00:06:16,700
protocol we will become we will get

112
00:06:13,729 --> 00:06:19,789
quick pretty soon so it's rolled out at

113
00:06:16,700 --> 00:06:22,330
the moment primarily from google but

114
00:06:19,789 --> 00:06:24,979
Akamai's on the way and a lot of other

115
00:06:22,330 --> 00:06:26,890
city and zorkin distribution networks

116
00:06:24,979 --> 00:06:30,190
are on the way to roll out this

117
00:06:26,890 --> 00:06:34,360
so we'll have a second transfer for a

118
00:06:30,190 --> 00:06:38,460
cooperation that is made for replacing

119
00:06:34,360 --> 00:06:42,400
TCP at least if HDPE is on top of that

120
00:06:38,460 --> 00:06:47,140
and probably you want to use this

121
00:06:42,400 --> 00:06:49,510
transparently as the second change we

122
00:06:47,140 --> 00:06:52,419
have devices that have multiple parts

123
00:06:49,510 --> 00:06:56,469
today so if you had the mainframe in

124
00:06:52,420 --> 00:06:58,060
1983 you were really lucky if you had a

125
00:06:56,470 --> 00:07:00,580
permanent connection to the Internet and

126
00:06:58,060 --> 00:07:04,900
we're not dining an app through 300 baud

127
00:07:00,580 --> 00:07:07,479
modem today if you have a cell phone

128
00:07:04,900 --> 00:07:09,460
that has multiple network interfaces at

129
00:07:07,480 --> 00:07:12,460
least one said earlier carry on at least

130
00:07:09,460 --> 00:07:15,909
a Wi-Fi interface probably you can use

131
00:07:12,460 --> 00:07:17,859
multiple at the same time and you might

132
00:07:15,910 --> 00:07:23,470
want to really decide on a personal

133
00:07:17,860 --> 00:07:26,110
basis which path to use and finally you

134
00:07:23,470 --> 00:07:27,970
have multiple endpoints serving the same

135
00:07:26,110 --> 00:07:32,350
data if you're looking if you're talking

136
00:07:27,970 --> 00:07:34,450
to Google or any other CDN you just get

137
00:07:32,350 --> 00:07:40,180
the front end cache and you have several

138
00:07:34,450 --> 00:07:42,820
to choose from and finally last but not

139
00:07:40,180 --> 00:07:44,680
least everything today should be

140
00:07:42,820 --> 00:07:47,050
encrypted at the old days of the

141
00:07:44,680 --> 00:07:48,690
internet everyone was trusted we don't

142
00:07:47,050 --> 00:07:51,880
need to contribute

143
00:07:48,690 --> 00:07:55,330
you can trust the other few hundred guys

144
00:07:51,880 --> 00:07:59,520
on the Internet you'd know them today we

145
00:07:55,330 --> 00:08:02,440
need encryption to save everything and

146
00:07:59,520 --> 00:08:06,010
these are all things that were not

147
00:08:02,440 --> 00:08:13,270
thought of when inventing the BSD

148
00:08:06,010 --> 00:08:17,260
circuit API so let's look how we can fix

149
00:08:13,270 --> 00:08:20,950
that we go to our textbook example again

150
00:08:17,260 --> 00:08:25,599
and have first to look at the name

151
00:08:20,950 --> 00:08:29,860
resolution we want to resolve names over

152
00:08:25,600 --> 00:08:31,750
multiple paths in parallel and to make

153
00:08:29,860 --> 00:08:36,039
things worse if you're talking to CDN

154
00:08:31,750 --> 00:08:39,279
nodes you cannot use the same IP

155
00:08:36,039 --> 00:08:42,248
addresses through all links because you

156
00:08:39,279 --> 00:08:47,920
you have a Wi-Fi from the camp and for

157
00:08:42,249 --> 00:08:50,980
example a t-mobile LTE on the camp those

158
00:08:47,920 --> 00:08:54,610
will most probably deliver you different

159
00:08:50,980 --> 00:08:56,470
e and s results for CDN nodes and you

160
00:08:54,610 --> 00:09:00,779
might not be able to reach the other

161
00:08:56,470 --> 00:09:04,209
city and not at all using the wrong link

162
00:09:00,779 --> 00:09:08,430
so you have to resolve in parallel you

163
00:09:04,209 --> 00:09:08,430
have to keep the results separate and

164
00:09:08,970 --> 00:09:17,110
you have to to use them in the right way

165
00:09:14,639 --> 00:09:19,120
the BC circle API doesn't provide this

166
00:09:17,110 --> 00:09:20,649
feature so if you want to do this in an

167
00:09:19,120 --> 00:09:22,779
application for example the web browser

168
00:09:20,649 --> 00:09:32,470
you have to implement your code in as

169
00:09:22,779 --> 00:09:36,459
yourself welcome second if we have a

170
00:09:32,470 --> 00:09:39,490
results these DNS results contain

171
00:09:36,459 --> 00:09:43,329
information that will be later on useful

172
00:09:39,490 --> 00:09:45,250
for your secure connection setup if you

173
00:09:43,329 --> 00:09:48,638
want to do use features like as an I

174
00:09:45,250 --> 00:09:50,980
encryption that allows that prevents

175
00:09:48,639 --> 00:09:54,040
some observer on the path to see what

176
00:09:50,980 --> 00:09:56,680
hosting you're connecting to you have to

177
00:09:54,040 --> 00:10:00,610
get a key from DNS the current circuit

178
00:09:56,680 --> 00:10:04,599
API doesn't provide you this you will

179
00:10:00,610 --> 00:10:08,740
need and you will implement the in ask

180
00:10:04,600 --> 00:10:11,920
yourself sure thing

181
00:10:08,740 --> 00:10:16,089
if you want to connect users usually

182
00:10:11,920 --> 00:10:18,670
like fast connections if you have to

183
00:10:16,089 --> 00:10:19,329
timeout multiple times if you have to

184
00:10:18,670 --> 00:10:23,920
timeout

185
00:10:19,329 --> 00:10:25,929
90 seconds per connection attempt the

186
00:10:23,920 --> 00:10:28,929
user gets annoyed if you click on the

187
00:10:25,929 --> 00:10:32,290
website unlink and it takes you three or

188
00:10:28,929 --> 00:10:36,069
five minutes to display something he is

189
00:10:32,290 --> 00:10:38,170
really really angry so what you what all

190
00:10:36,069 --> 00:10:40,540
browsers do today or what you have to do

191
00:10:38,170 --> 00:10:43,240
today if you want to be state-of-the-art

192
00:10:40,540 --> 00:10:45,819
you have to try multiple connections in

193
00:10:43,240 --> 00:10:49,029
parallel so you try iving before and

194
00:10:45,819 --> 00:10:50,829
ipv6 it with a small head start Friday

195
00:10:49,029 --> 00:10:53,290
with six

196
00:10:50,830 --> 00:10:55,140
wait which sockets connects first and

197
00:10:53,290 --> 00:11:00,069
use that one

198
00:10:55,140 --> 00:11:05,110
so no loop anymore but a fancy loop

199
00:11:00,070 --> 00:11:08,380
around select who in this audience likes

200
00:11:05,110 --> 00:11:13,720
select or a pole or pole as a

201
00:11:08,380 --> 00:11:20,260
programming concept L we have quite a

202
00:11:13,720 --> 00:11:26,980
few so it really gets ugly to code this

203
00:11:20,260 --> 00:11:28,390
and with things like quick emerging we

204
00:11:26,980 --> 00:11:34,899
will have to do the same for the

205
00:11:28,390 --> 00:11:37,390
protocol so this is ugly then we need to

206
00:11:34,899 --> 00:11:39,700
set up a secure transport so for example

207
00:11:37,390 --> 00:11:43,140
SSL which is not part of this socket API

208
00:11:39,700 --> 00:11:46,450
but this is a separate library you using

209
00:11:43,140 --> 00:11:51,339
and your separately take took care of

210
00:11:46,450 --> 00:11:54,370
that and finally you have to pass the

211
00:11:51,339 --> 00:11:57,760
transport protocol chosen so if you use

212
00:11:54,370 --> 00:11:59,950
TCP a quick or whatever use back to the

213
00:11:57,760 --> 00:12:02,350
application because the socket made have

214
00:11:59,950 --> 00:12:08,800
slightly different semantics whatever he

215
00:12:02,350 --> 00:12:11,230
chose I thought about presenting a code

216
00:12:08,800 --> 00:12:13,209
example of that and we're looking for

217
00:12:11,230 --> 00:12:16,300
something there is no textbook example

218
00:12:13,209 --> 00:12:20,890
there's nothing on Stack Overflow by the

219
00:12:16,300 --> 00:12:24,849
way the nicest and shortest example I

220
00:12:20,890 --> 00:12:26,980
found was in lip curl and it was but tel

221
00:12:24,850 --> 00:12:35,470
through one two thousand two hundred

222
00:12:26,980 --> 00:12:41,860
lines of code okay so how the heck do we

223
00:12:35,470 --> 00:12:44,050
solve that the usual idea of people are

224
00:12:41,860 --> 00:12:46,029
asking that question say oh no way

225
00:12:44,050 --> 00:12:47,329
there's no way of replacing the beastie

226
00:12:46,029 --> 00:12:50,399
socket API

227
00:12:47,330 --> 00:12:52,889
[Music]

228
00:12:50,399 --> 00:12:55,129
don't just don't think about it good

229
00:12:52,889 --> 00:12:55,129
work

230
00:12:55,370 --> 00:13:02,850
several researchers tried that and

231
00:12:58,079 --> 00:13:05,370
failed and I only have one reason why

232
00:13:02,850 --> 00:13:12,149
I'm hoping that this approach might

233
00:13:05,370 --> 00:13:14,579
succeed so I am standing here last year

234
00:13:12,149 --> 00:13:16,529
a bunch of people who got really annoyed

235
00:13:14,579 --> 00:13:19,589
about the BST socket API because they

236
00:13:16,529 --> 00:13:24,209
broke the research code or were really

237
00:13:19,589 --> 00:13:28,050
ugly in the API design met at the taps

238
00:13:24,209 --> 00:13:30,628
working group at the ITF and said oh we

239
00:13:28,050 --> 00:13:33,300
have to do something about this and the

240
00:13:30,629 --> 00:13:35,129
group who initially met was first a

241
00:13:33,300 --> 00:13:39,689
bunch of academics and then a ball joint

242
00:13:35,129 --> 00:13:42,389
and we're saying oh yes we built our new

243
00:13:39,689 --> 00:13:45,180
network API we want to standardize it

244
00:13:42,389 --> 00:13:47,839
here work together with you who all have

245
00:13:45,180 --> 00:13:50,670
worked on different aspects of this

246
00:13:47,839 --> 00:13:53,300
connection setup and of this automatic

247
00:13:50,670 --> 00:13:55,979
probing of different transport options

248
00:13:53,300 --> 00:13:59,519
let's work together and let's build

249
00:13:55,980 --> 00:14:02,579
something new and they really are now

250
00:13:59,519 --> 00:14:06,240
trying to release the socket API or the

251
00:14:02,579 --> 00:14:08,008
new network framework that's basically

252
00:14:06,240 --> 00:14:11,490
what we're currently standardizing at

253
00:14:08,009 --> 00:14:14,910
the ITF ok I talked about the ITF the

254
00:14:11,490 --> 00:14:18,170
ITF what the heck is the ITF and what

255
00:14:14,910 --> 00:14:18,170
the heck is the Thames working group

256
00:14:18,259 --> 00:14:25,589
first the ITF is a standards body that

257
00:14:21,990 --> 00:14:28,249
looks sounds pretty boring so a lot of

258
00:14:25,589 --> 00:14:34,040
people talking about standardization and

259
00:14:28,249 --> 00:14:36,779
how to interoperate with things not

260
00:14:34,040 --> 00:14:40,019
quite because the ITF is a pretty

261
00:14:36,779 --> 00:14:42,179
unusual standard bodies and also if you

262
00:14:40,019 --> 00:14:47,040
visit the meetings you will find out

263
00:14:42,179 --> 00:14:50,220
it's a pretty nerdy place I think these

264
00:14:47,040 --> 00:14:52,889
two quotes characterized the ITF pretty

265
00:14:50,220 --> 00:14:54,660
well so the first is from David Clarke

266
00:14:52,889 --> 00:14:56,639
and saying we will reject Kings

267
00:14:54,660 --> 00:15:00,029
presidents and voting we believe in

268
00:14:56,639 --> 00:15:02,610
rough consensus and running code which

269
00:15:00,029 --> 00:15:03,900
is quite unusual for standards body

270
00:15:02,610 --> 00:15:06,120
because usually out

271
00:15:03,900 --> 00:15:08,810
you either standardized something that

272
00:15:06,120 --> 00:15:11,910
someone else already had as a product or

273
00:15:08,810 --> 00:15:14,339
you're just analyzing something

274
00:15:11,910 --> 00:15:16,020
everyone's agrees on and nobody knows

275
00:15:14,340 --> 00:15:19,680
whether it will ever be implementable

276
00:15:16,020 --> 00:15:22,500
and the second one is becomes a repeat

277
00:15:19,680 --> 00:15:24,540
if in what you send and be liberal and

278
00:15:22,500 --> 00:15:26,850
what you accept so if I want to

279
00:15:24,540 --> 00:15:30,959
interoperate with others I should keep

280
00:15:26,850 --> 00:15:33,590
to the standards as much as possible but

281
00:15:30,960 --> 00:15:38,940
I should be able to tolerate failures

282
00:15:33,590 --> 00:15:41,490
from what the other center and also in

283
00:15:38,940 --> 00:15:43,140
the ways the idea of works you see this

284
00:15:41,490 --> 00:15:45,210
is quite different from other standards

285
00:15:43,140 --> 00:15:47,010
but it's oh there's no voting shares for

286
00:15:45,210 --> 00:15:50,310
different companies but there's

287
00:15:47,010 --> 00:15:52,080
individuals in the room that try to find

288
00:15:50,310 --> 00:15:53,849
consensus and they use will decide

289
00:15:52,080 --> 00:15:57,690
whether they get sick on Samsungs by

290
00:15:53,850 --> 00:15:59,850
humming so instead of saying oh we have

291
00:15:57,690 --> 00:16:02,550
arised our hands to vote there's the

292
00:15:59,850 --> 00:16:04,740
question who's in favor of the following

293
00:16:02,550 --> 00:16:07,140
proposed who please hum now and you just

294
00:16:04,740 --> 00:16:09,060
get a feeling on how much the people

295
00:16:07,140 --> 00:16:11,160
humming in the room and if you're really

296
00:16:09,060 --> 00:16:13,560
interface perfect you can hum loudly and

297
00:16:11,160 --> 00:16:17,520
really for the full voice you seem okay

298
00:16:13,560 --> 00:16:20,369
I can live with that but it's not sooo

299
00:16:17,520 --> 00:16:23,069
convincing you can have a silently and

300
00:16:20,370 --> 00:16:27,420
as it's a very deep voice you can't

301
00:16:23,070 --> 00:16:29,220
really get who's voting for what so it's

302
00:16:27,420 --> 00:16:32,099
in person it's in the room it's easily

303
00:16:29,220 --> 00:16:38,600
verifiable and it's smaller than an

304
00:16:32,100 --> 00:16:41,880
image that's awesome so how's this ITF

305
00:16:38,600 --> 00:16:46,230
organized first it's divided into

306
00:16:41,880 --> 00:16:48,480
several areas so there are applications

307
00:16:46,230 --> 00:16:50,700
in real time or our area is mostly

308
00:16:48,480 --> 00:16:53,310
concerned about application protocols

309
00:16:50,700 --> 00:16:56,790
and on protocols that are doing

310
00:16:53,310 --> 00:17:00,150
real-time transport then there's the

311
00:16:56,790 --> 00:17:01,800
general area which is mostly concerned

312
00:17:00,150 --> 00:17:05,310
with stuff that touches everything else

313
00:17:01,800 --> 00:17:08,520
and doesn't fit instance it's closely in

314
00:17:05,310 --> 00:17:10,290
one area there's the internet area which

315
00:17:08,520 --> 00:17:15,560
is really about the IP protocol version

316
00:17:10,290 --> 00:17:15,560
6 and perhaps looking at what

317
00:17:15,709 --> 00:17:24,189
legacy IP needs four fixes there's of

318
00:17:20,809 --> 00:17:26,660
the operations of management which mean

319
00:17:24,189 --> 00:17:28,760
mostly talking about breakfast practices

320
00:17:26,660 --> 00:17:30,710
how to manage networks the routing error

321
00:17:28,760 --> 00:17:33,010
which is mostly about BGP and other

322
00:17:30,710 --> 00:17:36,620
routing protocols the security area

323
00:17:33,010 --> 00:17:40,400
where things like TLS are IPSec get

324
00:17:36,620 --> 00:17:41,870
standardized and the transport area and

325
00:17:40,400 --> 00:17:43,250
this is the area we are talking about

326
00:17:41,870 --> 00:17:48,260
today because we are talking about

327
00:17:43,250 --> 00:17:51,770
transports like TCP quick SCTP and this

328
00:17:48,260 --> 00:17:54,500
is also the area where taps works so

329
00:17:51,770 --> 00:17:57,770
what's the temps working group so the

330
00:17:54,500 --> 00:17:59,929
types of working group is by the by its

331
00:17:57,770 --> 00:18:03,049
own chartered concerned with transport

332
00:17:59,929 --> 00:18:05,840
services it started off as a group of

333
00:18:03,049 --> 00:18:09,679
people mostly thinking about ways on how

334
00:18:05,840 --> 00:18:13,790
to actually deploy setp and get a city

335
00:18:09,679 --> 00:18:15,860
DP deployment but now with some few

336
00:18:13,790 --> 00:18:18,970
people joining and it's really talking

337
00:18:15,860 --> 00:18:21,409
about methods on how to choose circuits

338
00:18:18,970 --> 00:18:23,360
really on talking about methods how to

339
00:18:21,410 --> 00:18:25,970
use multiple access networks it got a

340
00:18:23,360 --> 00:18:29,689
lot a lot more traction so the name is

341
00:18:25,970 --> 00:18:36,250
it it's a little bit funny because who

342
00:18:29,690 --> 00:18:36,250
knows what taps means for usual American

343
00:18:37,809 --> 00:18:46,820
taps is the melody you usually play when

344
00:18:41,360 --> 00:18:48,530
a soldier on a soldier's funeral which

345
00:18:46,820 --> 00:18:50,480
was something because many Americans

346
00:18:48,530 --> 00:18:53,360
laughed about the taps are of

347
00:18:50,480 --> 00:18:56,660
nervousness but today as we try to

348
00:18:53,360 --> 00:19:01,010
retire the BSD socket API you might get

349
00:18:56,660 --> 00:19:02,660
a different meaning now the idea is to

350
00:19:01,010 --> 00:19:05,540
enable application developers to use

351
00:19:02,660 --> 00:19:07,640
other protocols than TCP and UDP without

352
00:19:05,540 --> 00:19:09,710
too much caring but so you don't want to

353
00:19:07,640 --> 00:19:13,610
rewrite your whole code if you want to

354
00:19:09,710 --> 00:19:16,429
use quick instead of TCP actually if it

355
00:19:13,610 --> 00:19:22,189
works you just would like that works

356
00:19:16,429 --> 00:19:24,669
just the same way you did it before we

357
00:19:22,190 --> 00:19:27,140
want to enable transfer evolution and

358
00:19:24,669 --> 00:19:31,010
describe an API

359
00:19:27,140 --> 00:19:33,080
how to use transversals weight API ITF

360
00:19:31,010 --> 00:19:38,629
is the idea of just standardizing

361
00:19:33,080 --> 00:19:41,030
protocols whiip eyes so that's the

362
00:19:38,630 --> 00:19:46,840
reason why we talk about an abstract ABI

363
00:19:41,030 --> 00:19:46,840
and there's a really really tight

364
00:19:47,020 --> 00:19:54,559
separation of concerns on what the ITF

365
00:19:50,770 --> 00:19:56,389
specifies in terms of protocols the IDF

366
00:19:54,559 --> 00:19:58,428
specifies abstract protocols so

367
00:19:56,390 --> 00:20:02,030
basically what primitives are there what

368
00:19:58,429 --> 00:20:04,370
are the basic interactions and abs for

369
00:20:02,030 --> 00:20:06,918
concrete languages are usually made by

370
00:20:04,370 --> 00:20:09,409
their own standard bodies so for example

371
00:20:06,919 --> 00:20:12,380
if you look at the UNIX capi is done by

372
00:20:09,410 --> 00:20:15,860
POSIX if you look at the Java API

373
00:20:12,380 --> 00:20:20,059
there's the travel community process for

374
00:20:15,860 --> 00:20:23,809
that and therefore what taps is doing as

375
00:20:20,059 --> 00:20:26,120
a pro as specification is just input for

376
00:20:23,809 --> 00:20:28,700
other standards bodies on how could we

377
00:20:26,120 --> 00:20:32,209
implement this in our language and it's

378
00:20:28,700 --> 00:20:35,240
trying to have fairly broad on abstract

379
00:20:32,210 --> 00:20:37,429
concepts there that are usually somehow

380
00:20:35,240 --> 00:20:40,510
able to be mapped and every different

381
00:20:37,429 --> 00:20:43,970
language so the different the APS will

382
00:20:40,510 --> 00:20:45,980
look quite a little bit different and

383
00:20:43,970 --> 00:20:48,020
can meet integrate within the language

384
00:20:45,980 --> 00:20:50,419
while you have still the same rough same

385
00:20:48,020 --> 00:20:53,990
interaction patterns and if you're going

386
00:20:50,419 --> 00:20:57,710
from for example objective-c to Python

387
00:20:53,990 --> 00:21:01,640
you will see a similar ad I but that's

388
00:20:57,710 --> 00:21:03,610
fields objective-c on your iOS device

389
00:21:01,640 --> 00:21:07,340
and feels pattern s code on Python

390
00:21:03,610 --> 00:21:10,939
that's the idea so how does the

391
00:21:07,340 --> 00:21:13,040
standardization stuff work in the IDF so

392
00:21:10,940 --> 00:21:16,580
we start with writing an internet draft

393
00:21:13,040 --> 00:21:19,389
an immigrant draft is for the academics

394
00:21:16,580 --> 00:21:22,870
from you something like a tech report or

395
00:21:19,390 --> 00:21:25,520
something like in archival paper

396
00:21:22,870 --> 00:21:28,189
everyone can submit that everyone can

397
00:21:25,520 --> 00:21:30,650
write that it has to go through the idea

398
00:21:28,190 --> 00:21:35,330
of processing to train and provide this

399
00:21:30,650 --> 00:21:37,790
beautiful Eskie text but otherwise there

400
00:21:35,330 --> 00:21:39,360
are no real limitations for who and what

401
00:21:37,790 --> 00:21:44,190
you can do with an internet rock

402
00:21:39,360 --> 00:21:46,500
and then you want to decide how do I

403
00:21:44,190 --> 00:21:48,780
want to publish it and if it gets

404
00:21:46,500 --> 00:21:51,750
published gets never seen number so how

405
00:21:48,780 --> 00:21:54,030
do we do this you can either say I'm

406
00:21:51,750 --> 00:21:57,420
working want to do this business within

407
00:21:54,030 --> 00:21:58,770
a working group then you carry your

408
00:21:57,420 --> 00:22:01,560
internal draft to the working group and

409
00:21:58,770 --> 00:22:03,600
said oh I have written this draft do we

410
00:22:01,560 --> 00:22:08,129
want to work together on that and adopt

411
00:22:03,600 --> 00:22:09,929
it as a working group item and if the

412
00:22:08,130 --> 00:22:11,580
working group says go away we're not

413
00:22:09,930 --> 00:22:14,940
interested or the working group says oh

414
00:22:11,580 --> 00:22:16,530
yes it's fine and the following five

415
00:22:14,940 --> 00:22:19,140
people also want to join you and working

416
00:22:16,530 --> 00:22:21,750
on that and this is what we did four

417
00:22:19,140 --> 00:22:24,000
times there's also this individual

418
00:22:21,750 --> 00:22:26,880
submission way where individuals can

419
00:22:24,000 --> 00:22:32,010
submit stuff but that's rarely used for

420
00:22:26,880 --> 00:22:38,400
real stuff because mostly you're not

421
00:22:32,010 --> 00:22:40,470
writing errors is low then you get if

422
00:22:38,400 --> 00:22:43,260
you say it's think it's ready and you

423
00:22:40,470 --> 00:22:47,670
ask the related areas that are touching

424
00:22:43,260 --> 00:22:49,140
style your stuff please to review look

425
00:22:47,670 --> 00:22:51,180
whether it works and whether you have

426
00:22:49,140 --> 00:22:56,310
insights that said it's good or it's a

427
00:22:51,180 --> 00:22:58,620
bad idea and then you iterate over till

428
00:22:56,310 --> 00:23:00,600
the other people are lucky so this is

429
00:22:58,620 --> 00:23:02,429
always because this is the blue foul you

430
00:23:00,600 --> 00:23:05,060
iterate another route if someone is

431
00:23:02,430 --> 00:23:09,150
unlucky and if it doesn't find consensus

432
00:23:05,060 --> 00:23:13,260
so usually it gets about five to twenty

433
00:23:09,150 --> 00:23:16,440
five rounds of rewriting a document

434
00:23:13,260 --> 00:23:19,290
before it might get an error see after

435
00:23:16,440 --> 00:23:20,880
this ever after the reviewers from the

436
00:23:19,290 --> 00:23:23,210
other area set is fine the working

437
00:23:20,880 --> 00:23:26,130
besaid is fine

438
00:23:23,210 --> 00:23:28,320
it's sent for the enhance standard

439
00:23:26,130 --> 00:23:32,180
internet Engineering steering group for

440
00:23:28,320 --> 00:23:36,929
review which is again a group of people

441
00:23:32,180 --> 00:23:43,680
who have ATF veterans and are elected by

442
00:23:36,930 --> 00:23:45,270
a very interesting process who say ok we

443
00:23:43,680 --> 00:23:47,070
have an overview about most stuff going

444
00:23:45,270 --> 00:23:49,920
out at the ITF we think it's a good idea

445
00:23:47,070 --> 00:23:51,840
and works or we say oh no you have over

446
00:23:49,920 --> 00:23:53,950
looked something please fix it at the

447
00:23:51,840 --> 00:23:58,909
forum West

448
00:23:53,950 --> 00:24:01,690
after the isg review comes in you send

449
00:23:58,910 --> 00:24:04,580
it to the RC editor for publishing and

450
00:24:01,690 --> 00:24:06,940
they will tweak a little bit the wording

451
00:24:04,580 --> 00:24:11,059
have a little additional rounds with you

452
00:24:06,940 --> 00:24:12,530
on how to fix details and finally if all

453
00:24:11,059 --> 00:24:16,580
references are fixed if everything is

454
00:24:12,530 --> 00:24:18,470
fine it gets published as an RFC so if

455
00:24:16,580 --> 00:24:21,139
you're asking where taps is at the

456
00:24:18,470 --> 00:24:23,000
moment taps is at the moment here we

457
00:24:21,140 --> 00:24:26,030
have it accepted as a working group item

458
00:24:23,000 --> 00:24:27,919
and we are actively working on that and

459
00:24:26,030 --> 00:24:32,149
we'll soon get the first reviews from

460
00:24:27,919 --> 00:24:37,190
other areas so for ITF work it's quite

461
00:24:32,150 --> 00:24:38,990
early in the pipeline so what's the idea

462
00:24:37,190 --> 00:24:41,419
how does it work what are the idea our

463
00:24:38,990 --> 00:24:45,350
principles so first it's enough

464
00:24:41,419 --> 00:24:48,860
event-driven API so modern networking

465
00:24:45,350 --> 00:24:51,530
API or mentoring applications work as

466
00:24:48,860 --> 00:24:53,709
incur honestly you always do select you

467
00:24:51,530 --> 00:24:56,500
always have to look about several

468
00:24:53,710 --> 00:25:00,470
sockets and several connections so you

469
00:24:56,500 --> 00:25:03,890
don't want to block anywhere and taps

470
00:25:00,470 --> 00:25:05,540
has nothing that blocks so everything

471
00:25:03,890 --> 00:25:07,490
you do whether you initiate a connection

472
00:25:05,540 --> 00:25:08,350
you listen for incoming connections read

473
00:25:07,490 --> 00:25:11,450
or write

474
00:25:08,350 --> 00:25:14,240
if something's for you you get an event

475
00:25:11,450 --> 00:25:17,510
and whether the event is implemented as

476
00:25:14,240 --> 00:25:20,360
a callback or as listen a pattern object

477
00:25:17,510 --> 00:25:22,370
or some kind of work you it's totally up

478
00:25:20,360 --> 00:25:23,840
to the specific language implementation

479
00:25:22,370 --> 00:25:26,750
whatever fits into the language would

480
00:25:23,840 --> 00:25:31,639
should be used to implement these kind

481
00:25:26,750 --> 00:25:33,500
of events in addition if you look at

482
00:25:31,640 --> 00:25:35,380
misty socket area it's really really

483
00:25:33,500 --> 00:25:42,530
complicated to get information like

484
00:25:35,380 --> 00:25:45,919
firewall ICMP are simply blocked or ICMP

485
00:25:42,530 --> 00:25:49,428
rejects it's really hard to get this

486
00:25:45,919 --> 00:25:51,260
information and taps is going to make

487
00:25:49,429 --> 00:25:55,400
this information easily available as

488
00:25:51,260 --> 00:25:57,049
events to the application to the second

489
00:25:55,400 --> 00:25:59,600
basic idea here and that's why it's in

490
00:25:57,049 --> 00:26:03,620
the temps working group it should Amba

491
00:25:59,600 --> 00:26:05,840
able protocol evolution so we're

492
00:26:03,620 --> 00:26:07,639
focusing on what the application needs

493
00:26:05,840 --> 00:26:09,799
the application doesn't say I want a TCP

494
00:26:07,640 --> 00:26:13,240
server but there plication says I want

495
00:26:09,799 --> 00:26:16,700
to reliable in order stream socket and

496
00:26:13,240 --> 00:26:20,929
whether this is implemented as TCP or as

497
00:26:16,700 --> 00:26:23,179
quick or as SCTP you don't care you get

498
00:26:20,929 --> 00:26:25,760
the service you're asking for and you

499
00:26:23,179 --> 00:26:28,640
can narrowly define with most properties

500
00:26:25,760 --> 00:26:33,460
what you really need and this system

501
00:26:28,640 --> 00:26:35,779
makes it smart choice for you second you

502
00:26:33,460 --> 00:26:38,539
want to be really flexible to connect

503
00:26:35,779 --> 00:26:39,919
the connection establishment time so you

504
00:26:38,539 --> 00:26:42,770
want to use happy eyeballs for

505
00:26:39,919 --> 00:26:44,390
everything for protocol selection so for

506
00:26:42,770 --> 00:26:46,520
transport protocol to rectify IP

507
00:26:44,390 --> 00:26:52,039
protocol selection maybe also for

508
00:26:46,520 --> 00:26:53,929
endpoint selection and if you have other

509
00:26:52,039 --> 00:26:56,419
preferences so for example you want to

510
00:26:53,929 --> 00:26:58,840
use them the cheapest possible link or

511
00:26:56,419 --> 00:27:02,480
something like that you just code this

512
00:26:58,840 --> 00:27:03,799
into the timeouts or the head start you

513
00:27:02,480 --> 00:27:06,440
give for the different kind of

514
00:27:03,799 --> 00:27:09,340
connections so if you give a 30 minute

515
00:27:06,440 --> 00:27:12,020
second head start for certain link these

516
00:27:09,340 --> 00:27:14,840
connections will establish first and

517
00:27:12,020 --> 00:27:17,389
will be used but if the link is broke

518
00:27:14,840 --> 00:27:20,600
well if something else is broken there

519
00:27:17,390 --> 00:27:23,000
is using the least preferred of the

520
00:27:20,600 --> 00:27:24,980
lesser preferred one that has does net

521
00:27:23,000 --> 00:27:27,260
left the head start still you don't have

522
00:27:24,980 --> 00:27:32,510
to wait for some time out we just get a

523
00:27:27,260 --> 00:27:36,140
connection and it feels fast and the

524
00:27:32,510 --> 00:27:38,299
third idea you want to be flexible after

525
00:27:36,140 --> 00:27:40,789
connection establishment and you want to

526
00:27:38,299 --> 00:27:42,529
use features that modern transport

527
00:27:40,789 --> 00:27:45,169
vehicles bring you like connection

528
00:27:42,529 --> 00:27:48,020
migration if you change your IP address

529
00:27:45,169 --> 00:27:50,990
you don't want to reconnect we just

530
00:27:48,020 --> 00:27:54,620
carry on with your connection what

531
00:27:50,990 --> 00:27:56,840
you'll be able to use multi pass if you

532
00:27:54,620 --> 00:27:59,479
have multiple links and you want to be

533
00:27:56,840 --> 00:28:01,730
able to use multi screaming to save

534
00:27:59,480 --> 00:28:04,340
connection times so your application

535
00:28:01,730 --> 00:28:06,380
shouldn't care about whether you need to

536
00:28:04,340 --> 00:28:09,559
open a second TCP connection if you want

537
00:28:06,380 --> 00:28:12,409
a parallelism oh you open is say an

538
00:28:09,559 --> 00:28:16,639
additional quick stream if you have

539
00:28:12,409 --> 00:28:19,539
quick available and this all should be

540
00:28:16,640 --> 00:28:23,929
glossed over in terms

541
00:28:19,539 --> 00:28:25,580
and as the third main concept we want to

542
00:28:23,929 --> 00:28:28,370
be able to do data transfer using

543
00:28:25,580 --> 00:28:30,320
messages all interactions and model

544
00:28:28,370 --> 00:28:33,918
networking applications are message

545
00:28:30,320 --> 00:28:35,990
based yes you have a TCP so that is

546
00:28:33,919 --> 00:28:38,899
that's the screen but he usually chopped

547
00:28:35,990 --> 00:28:41,929
the screams into pair messages and work

548
00:28:38,899 --> 00:28:44,418
then on those messages and therefore we

549
00:28:41,929 --> 00:28:46,220
want to support framing and the ad

550
00:28:44,419 --> 00:28:48,320
framing for protocol message based

551
00:28:46,220 --> 00:28:50,539
protocols on string transports because

552
00:28:48,320 --> 00:28:53,928
we are not going to change the transfers

553
00:28:50,539 --> 00:28:55,879
but steps we're just providing nicer

554
00:28:53,929 --> 00:28:57,710
interface to the existing one that's

555
00:28:55,880 --> 00:29:00,139
also the reason why a tap system can

556
00:28:57,710 --> 00:29:01,789
without any problem interact to it to

557
00:29:00,139 --> 00:29:03,979
any other system because we're not

558
00:29:01,789 --> 00:29:05,510
changing the protocols we're just

559
00:29:03,980 --> 00:29:10,850
changing the way you're accessing the

560
00:29:05,510 --> 00:29:13,639
protocols it allows to control a lot of

561
00:29:10,850 --> 00:29:15,289
stuff on them individual messages that

562
00:29:13,639 --> 00:29:17,809
are available in the protocols but not

563
00:29:15,289 --> 00:29:21,049
exposed by the socket API today like

564
00:29:17,809 --> 00:29:24,350
deadlines so for example in s 82 you

565
00:29:21,049 --> 00:29:27,500
just might not want to transmit a

566
00:29:24,350 --> 00:29:29,620
message when the receiver isn't hasn't

567
00:29:27,500 --> 00:29:31,580
any use for it anymore so you can

568
00:29:29,620 --> 00:29:33,799
associate the deadline with a message

569
00:29:31,580 --> 00:29:36,740
and it might be dropped from the same

570
00:29:33,799 --> 00:29:39,049
prophet of this deadline is over you

571
00:29:36,740 --> 00:29:41,299
might want to send certain messages

572
00:29:39,049 --> 00:29:43,668
unreliably because you don't care

573
00:29:41,299 --> 00:29:45,379
whether they arrive or don't care too

574
00:29:43,669 --> 00:29:47,510
much about their whether they arrive and

575
00:29:45,380 --> 00:29:50,870
you can all select this on a per message

576
00:29:47,510 --> 00:29:54,889
basis in a nice and suitable way it also

577
00:29:50,870 --> 00:29:56,559
allows you to assign messages to

578
00:29:54,889 --> 00:29:58,699
underlying transport connections from

579
00:29:56,559 --> 00:30:01,100
multi-streaming and for pool connections

580
00:29:58,700 --> 00:30:03,139
so if your today open to have a web

581
00:30:01,100 --> 00:30:05,149
browser that opens the connection to

582
00:30:03,139 --> 00:30:07,070
some CDN node or to some other website

583
00:30:05,149 --> 00:30:10,010
it opens a bunch of connections and

584
00:30:07,070 --> 00:30:13,789
distributes the requests among them we

585
00:30:10,010 --> 00:30:15,279
can do this in the socket API and not

586
00:30:13,789 --> 00:30:20,000
you don't have to implement it yourself

587
00:30:15,279 --> 00:30:22,070
this should be done by a tap system how

588
00:30:20,000 --> 00:30:24,350
do we list this we have two concepts

589
00:30:22,070 --> 00:30:28,720
that are central to do this

590
00:30:24,350 --> 00:30:31,520
the first one is framers framers are

591
00:30:28,720 --> 00:30:33,320
pieces of code that allows you to chop a

592
00:30:31,520 --> 00:30:37,520
screen transport into individual

593
00:30:33,320 --> 00:30:40,270
messages and the nice idea about this is

594
00:30:37,520 --> 00:30:42,710
you can just write a piece of code and

595
00:30:40,270 --> 00:30:44,360
then it integrates with the buffer

596
00:30:42,710 --> 00:30:46,100
management and back pressure management

597
00:30:44,360 --> 00:30:48,050
and you only get a message in your main

598
00:30:46,100 --> 00:30:52,189
application code once a complete message

599
00:30:48,050 --> 00:30:54,530
arrived or a chunk of the message if the

600
00:30:52,190 --> 00:30:56,810
measures are too large but you can

601
00:30:54,530 --> 00:31:00,139
really implement this in a nice and

602
00:30:56,810 --> 00:31:02,179
sensible way I think we should also be

603
00:31:00,140 --> 00:31:06,110
able to offload this for example to

604
00:31:02,180 --> 00:31:07,910
hardware so if you have something be are

605
00:31:06,110 --> 00:31:10,250
able to offload a lot of stuff into your

606
00:31:07,910 --> 00:31:11,690
hardware it might also look for the

607
00:31:10,250 --> 00:31:13,610
message isn't the only send in the

608
00:31:11,690 --> 00:31:15,530
application engine software interrupt

609
00:31:13,610 --> 00:31:17,800
when a whole uptick in message arrived

610
00:31:15,530 --> 00:31:26,060
for it

611
00:31:17,800 --> 00:31:28,250
and finally this concept is mainly for

612
00:31:26,060 --> 00:31:31,250
chopping through stream protocols but we

613
00:31:28,250 --> 00:31:32,900
might tweak it a little bit and we might

614
00:31:31,250 --> 00:31:34,490
be able to implement just simple

615
00:31:32,900 --> 00:31:37,400
protocols also within this training

616
00:31:34,490 --> 00:31:40,340
layer and finally to control all that

617
00:31:37,400 --> 00:31:42,680
stuff we need some mechanism and this

618
00:31:40,340 --> 00:31:46,459
means to configuring our transport

619
00:31:42,680 --> 00:31:47,780
properties so we have selection

620
00:31:46,460 --> 00:31:49,280
properties that influence pattern

621
00:31:47,780 --> 00:31:51,920
protocol selection we have connection

622
00:31:49,280 --> 00:31:53,930
properties that employ in influence per

623
00:31:51,920 --> 00:31:55,430
connection behavior and with message

624
00:31:53,930 --> 00:31:57,860
properties that influence permissions

625
00:31:55,430 --> 00:32:00,830
behavior they just used like in

626
00:31:57,860 --> 00:32:02,929
dictionary and we have well-defined

627
00:32:00,830 --> 00:32:04,760
namespaces so with the default namespace

628
00:32:02,930 --> 00:32:07,130
for all stuff we are currently writing

629
00:32:04,760 --> 00:32:08,870
in this RFC and we have different

630
00:32:07,130 --> 00:32:11,060
namespaces for example for transfer

631
00:32:08,870 --> 00:32:13,820
protocol specific stuff you just write

632
00:32:11,060 --> 00:32:16,010
TCP dot and then the property and you

633
00:32:13,820 --> 00:32:18,350
know this transfer property is only used

634
00:32:16,010 --> 00:32:20,270
if the connection is done using TCP if

635
00:32:18,350 --> 00:32:24,469
it's done using quick this is just

636
00:32:20,270 --> 00:32:28,580
ignored so how does this interaction

637
00:32:24,470 --> 00:32:31,790
work so if we have this on a textual

638
00:32:28,580 --> 00:32:35,419
basis we say I want a connection to

639
00:32:31,790 --> 00:32:37,220
example of using HTTP

640
00:32:35,420 --> 00:32:38,660
I need a reliable transport and please

641
00:32:37,220 --> 00:32:41,090
optimize for logarithms in the type

642
00:32:38,660 --> 00:32:41,520
system says oh yes nice here's the

643
00:32:41,090 --> 00:32:44,669
connection

644
00:32:41,520 --> 00:32:47,010
object now you now consent you don't

645
00:32:44,670 --> 00:32:48,360
receive your messages on this and you

646
00:32:47,010 --> 00:32:51,180
don't have to care about anything else

647
00:32:48,360 --> 00:32:52,979
so it's not thousand to one thousand two

648
00:32:51,180 --> 00:32:55,230
hundred lines of code but it's about

649
00:32:52,980 --> 00:33:00,180
twenty lines of code to could establish

650
00:32:55,230 --> 00:33:04,410
that connection so there's this nice

651
00:33:00,180 --> 00:33:07,260
ASCII art diagram from the acetate from

652
00:33:04,410 --> 00:33:10,140
the current draft that's saying

653
00:33:07,260 --> 00:33:13,050
basically easy ideas so you start over

654
00:33:10,140 --> 00:33:15,140
with the pre connection that's an object

655
00:33:13,050 --> 00:33:17,669
where you do all the connect

656
00:33:15,140 --> 00:33:20,070
configuration on you want to connect it

657
00:33:17,670 --> 00:33:24,120
you specify a local endpoint a remote

658
00:33:20,070 --> 00:33:26,399
endpoint for example a hostname you

659
00:33:24,120 --> 00:33:28,679
specify selection properties and you've

660
00:33:26,400 --> 00:33:30,840
specified defaults for the connection

661
00:33:28,680 --> 00:33:36,720
and message properties so you can for

662
00:33:30,840 --> 00:33:39,240
example say we have if even if I get a

663
00:33:36,720 --> 00:33:43,560
reliable broker I want all my messages

664
00:33:39,240 --> 00:33:47,250
sent a reliable if possible you can

665
00:33:43,560 --> 00:33:49,139
already specify this in this stage then

666
00:33:47,250 --> 00:33:50,370
you go into the pre connection on the

667
00:33:49,140 --> 00:33:51,810
pre connection you can either call

668
00:33:50,370 --> 00:33:54,860
initiate and get a connection object

669
00:33:51,810 --> 00:33:57,210
once the connection is established or

670
00:33:54,860 --> 00:34:00,330
you can call listen on it and get

671
00:33:57,210 --> 00:34:04,110
listener object that is listening for

672
00:34:00,330 --> 00:34:06,600
your connections once this initiation

673
00:34:04,110 --> 00:34:08,750
works you get an event so in this case

674
00:34:06,600 --> 00:34:12,210
it listen that you you get a connect

675
00:34:08,750 --> 00:34:15,090
connect you receive the event or this

676
00:34:12,210 --> 00:34:17,490
case initially completed event and have

677
00:34:15,090 --> 00:34:21,440
a connection object on this you can send

678
00:34:17,489 --> 00:34:24,359
can easily call sent with the message

679
00:34:21,440 --> 00:34:28,290
you receive messages events out of that

680
00:34:24,360 --> 00:34:33,060
and as we close it goes to close

681
00:34:28,290 --> 00:34:36,300
connection very simple so how does this

682
00:34:33,060 --> 00:34:39,449
were look in abstract code so we have

683
00:34:36,300 --> 00:34:42,390
from remote specify say I want a route

684
00:34:39,449 --> 00:34:45,089
specifier with the host no example come

685
00:34:42,389 --> 00:34:49,739
with the service HTTP I want transport

686
00:34:45,090 --> 00:34:51,540
properties reliable in order screen this

687
00:34:49,739 --> 00:34:53,409
is a shorthand you can also specify a

688
00:34:51,540 --> 00:34:56,290
bunch of

689
00:34:53,409 --> 00:34:59,290
properties on that you want reliable

690
00:34:56,290 --> 00:35:02,800
that you wanted in order and so on and

691
00:34:59,290 --> 00:35:05,800
you say I want the capacity profile low

692
00:35:02,800 --> 00:35:08,440
latency added to it that you optimize to

693
00:35:05,800 --> 00:35:12,310
latency then you configure it security

694
00:35:08,440 --> 00:35:15,460
parameters for the encryption and create

695
00:35:12,310 --> 00:35:18,940
a pre connection object with all these

696
00:35:15,460 --> 00:35:20,980
parameters on the Capri connection you

697
00:35:18,940 --> 00:35:23,950
can say I want an HTTP framework that I

698
00:35:20,980 --> 00:35:25,870
just want to be want to get HTTP

699
00:35:23,950 --> 00:35:29,009
requests and responses as messages and

700
00:35:25,870 --> 00:35:32,140
don't want to care about anything else

701
00:35:29,010 --> 00:35:34,030
and then say pre connection initiate and

702
00:35:32,140 --> 00:35:35,680
get your connection object back the

703
00:35:34,030 --> 00:35:38,230
connection objects then sends you an

704
00:35:35,680 --> 00:35:40,450
event saying oh I'm ready the connection

705
00:35:38,230 --> 00:35:43,090
is set up and then you can send you

706
00:35:40,450 --> 00:35:45,310
messages you can read in your message

707
00:35:43,090 --> 00:35:47,200
context configure it you want in my

708
00:35:45,310 --> 00:35:49,840
lifetime 20 milliseconds on TCP low

709
00:35:47,200 --> 00:35:54,569
delay if TCP is used if not you don't

710
00:35:49,840 --> 00:36:03,250
get it and then you have the connection

711
00:35:54,570 --> 00:36:06,700
and can say no further so Teresa who

712
00:36:03,250 --> 00:36:08,650
might be in the room here and a few

713
00:36:06,700 --> 00:36:12,160
students of us and I have written this

714
00:36:08,650 --> 00:36:14,110
Python as an i/o taps as one example

715
00:36:12,160 --> 00:36:16,720
implementation which is still on top of

716
00:36:14,110 --> 00:36:20,290
the BST sort of API to just see whether

717
00:36:16,720 --> 00:36:23,200
this how this fits into person and we

718
00:36:20,290 --> 00:36:25,480
see have this as an example application

719
00:36:23,200 --> 00:36:35,290
that does exactly the same as the two

720
00:36:25,480 --> 00:36:36,700
slides before of pseudo coded so we're

721
00:36:35,290 --> 00:36:40,630
not the only implementation at the

722
00:36:36,700 --> 00:36:44,049
moment there is much more complete as

723
00:36:40,630 --> 00:36:48,130
our tab Python implementation the apple

724
00:36:44,050 --> 00:36:53,170
network framework which is available

725
00:36:48,130 --> 00:36:55,030
since I was 12 or 13 I guess so it's it

726
00:36:53,170 --> 00:36:56,650
was a better and I was 12 and it will

727
00:36:55,030 --> 00:36:58,510
now come and I they were searching as

728
00:36:56,650 --> 00:37:03,430
default Network communication framework

729
00:36:58,510 --> 00:37:05,980
and it's based on the ideas of tabs and

730
00:37:03,430 --> 00:37:08,080
there are also some other projects which

731
00:37:05,980 --> 00:37:11,350
our need and socket intense which were

732
00:37:08,080 --> 00:37:15,250
prerunners that gave input into the

733
00:37:11,350 --> 00:37:17,259
process but you can get some ideas on

734
00:37:15,250 --> 00:37:20,590
what a tap system could do from this

735
00:37:17,260 --> 00:37:23,070
frame from this implementations but

736
00:37:20,590 --> 00:37:25,570
basically if you want to use taps today

737
00:37:23,070 --> 00:37:27,100
and you're programming for iOS you can

738
00:37:25,570 --> 00:37:28,630
trust this network framework and you get

739
00:37:27,100 --> 00:37:34,540
most of the stuff I was talking about

740
00:37:28,630 --> 00:37:37,090
through today just today by using it if

741
00:37:34,540 --> 00:37:41,080
you're interested in more stuff the

742
00:37:37,090 --> 00:37:44,880
documents are in the ITF data tracker so

743
00:37:41,080 --> 00:37:44,880
you can see it if you're interested to

744
00:37:44,910 --> 00:37:50,080
collaborate if you have comments on that

745
00:37:47,400 --> 00:37:51,700
subscribe the tabs mailing list from the

746
00:37:50,080 --> 00:37:54,759
date ITF title track and start

747
00:37:51,700 --> 00:37:58,660
discussing about that stuff we laugh

748
00:37:54,760 --> 00:38:00,430
input we love ideas we love if you see

749
00:37:58,660 --> 00:38:02,549
that there are problems because we

750
00:38:00,430 --> 00:38:06,040
really want to have the next generation

751
00:38:02,550 --> 00:38:09,210
socket API are there and therefore we

752
00:38:06,040 --> 00:38:12,670
need input of where the use cases are

753
00:38:09,210 --> 00:38:15,609
sort of or whether this works nicely and

754
00:38:12,670 --> 00:38:16,690
if you want about the latest version the

755
00:38:15,609 --> 00:38:19,330
latest discussion

756
00:38:16,690 --> 00:38:22,510
there's also github repository where we

757
00:38:19,330 --> 00:38:25,509
also have get up most detailed

758
00:38:22,510 --> 00:38:27,790
discussions as github issues so if you

759
00:38:25,510 --> 00:38:30,040
have a meet or if you found the right

760
00:38:27,790 --> 00:38:31,690
spelling error and the documents just

761
00:38:30,040 --> 00:38:32,440
make a get up at issue and we'll take

762
00:38:31,690 --> 00:38:37,420
care of that

763
00:38:32,440 --> 00:38:42,060
so with this I'm finished with my talk

764
00:38:37,420 --> 00:38:42,060
and I'm happy to take questions

765
00:38:42,800 --> 00:38:52,979
[Applause]

766
00:39:06,790 --> 00:39:12,230
hello hi okay

767
00:39:09,440 --> 00:39:15,710
sorry we just had a technical problem so

768
00:39:12,230 --> 00:39:18,619
thank you so much this was Phil's and we

769
00:39:15,710 --> 00:39:20,780
have a bit time left for questions so

770
00:39:18,619 --> 00:39:23,869
please don't be shy and come to the

771
00:39:20,780 --> 00:39:27,230
microphones and ask away

772
00:39:23,869 --> 00:39:29,660
thank you you mentioned for the new API

773
00:39:27,230 --> 00:39:34,299
is supposed to include deadlines of its

774
00:39:29,660 --> 00:39:39,230
real absolute deadlines or just timeouts

775
00:39:34,299 --> 00:39:41,780
this is a good question so we don't

776
00:39:39,230 --> 00:39:43,940
think that anyone will really implement

777
00:39:41,780 --> 00:39:47,390
a real time networking API because

778
00:39:43,940 --> 00:39:49,309
that's really really hard if someone is

779
00:39:47,390 --> 00:39:50,990
going into the area of deterministic

780
00:39:49,309 --> 00:39:53,690
networking where you can have real

781
00:39:50,990 --> 00:39:56,390
deadlines this might be as expose as

782
00:39:53,690 --> 00:39:59,660
well as a transfer property but the time

783
00:39:56,390 --> 00:40:03,710
of I was seen here are mostly advisory

784
00:39:59,660 --> 00:40:05,960
time outs like your stack we really

785
00:40:03,710 --> 00:40:09,290
don't need to retransmit this packet if

786
00:40:05,960 --> 00:40:12,920
it has lurked for about 300 seconds in

787
00:40:09,290 --> 00:40:14,839
the output buffer so it could be real

788
00:40:12,920 --> 00:40:17,630
deadlines at some point in time but at

789
00:40:14,839 --> 00:40:19,430
the moment we are just or for the actual

790
00:40:17,630 --> 00:40:23,329
implementations today we're thinking

791
00:40:19,430 --> 00:40:26,109
about per message timeouts thank you so

792
00:40:23,329 --> 00:40:31,640
much next question please

793
00:40:26,109 --> 00:40:35,240
so in your Python example you awaited

794
00:40:31,640 --> 00:40:39,470
for send and then registered some sort

795
00:40:35,240 --> 00:40:44,209
of callback on receive after you await

796
00:40:39,470 --> 00:40:48,348
at the send that looked a bit weird for

797
00:40:44,210 --> 00:40:53,000
me why do you need to await the sand if

798
00:40:48,349 --> 00:40:55,040
you use callbacks anyway you don't need

799
00:40:53,000 --> 00:40:57,319
to await it at this point in time it was

800
00:40:55,040 --> 00:41:01,549
just in the example but um you don't

801
00:40:57,319 --> 00:41:05,540
need to await it in this moment and

802
00:41:01,549 --> 00:41:07,549
maybe a related question so what kind of

803
00:41:05,540 --> 00:41:09,009
you said you wanted to be protocol

804
00:41:07,549 --> 00:41:12,060
independent

805
00:41:09,010 --> 00:41:14,320
and obviously there are many

806
00:41:12,060 --> 00:41:18,250
communication patterns that are

807
00:41:14,320 --> 00:41:21,400
interesting beyond just bi-directional

808
00:41:18,250 --> 00:41:24,190
byte streams so do you only plan to

809
00:41:21,400 --> 00:41:27,100
support bi-directional byte streams or

810
00:41:24,190 --> 00:41:31,300
something message oriented broadcasting

811
00:41:27,100 --> 00:41:33,850
what as I already told and in the talk

812
00:41:31,300 --> 00:41:37,600
we are really looking about messages if

813
00:41:33,850 --> 00:41:39,520
it's possible okay so the default

814
00:41:37,600 --> 00:41:43,180
interaction should be messages and we

815
00:41:39,520 --> 00:41:45,850
have the framers to chop despite stream

816
00:41:43,180 --> 00:41:48,370
into messages and that also should allow

817
00:41:45,850 --> 00:41:50,680
you to migrate from stream oriented

818
00:41:48,370 --> 00:41:52,569
transport by TCP to real message

819
00:41:50,680 --> 00:41:54,430
oriented transport once this is

820
00:41:52,570 --> 00:41:57,130
available in your current deployment

821
00:41:54,430 --> 00:41:59,859
scenario if you're not looking about

822
00:41:57,130 --> 00:42:03,100
pointer points we have some people who

823
00:41:59,860 --> 00:42:05,650
joined the taps working group and join

824
00:42:03,100 --> 00:42:10,540
our work that are really looking about

825
00:42:05,650 --> 00:42:12,970
saw specific multicast and we definitely

826
00:42:10,540 --> 00:42:15,850
want full mount multicast support within

827
00:42:12,970 --> 00:42:18,490
this API but that's still at an early

828
00:42:15,850 --> 00:42:21,730
stage that's not in most of the

829
00:42:18,490 --> 00:42:24,250
implementations yet but it's coming so

830
00:42:21,730 --> 00:42:27,310
it's definitely our agenda to include

831
00:42:24,250 --> 00:42:32,020
multicast in a useable and nice way add

832
00:42:27,310 --> 00:42:35,470
in a portable way thank you so much and

833
00:42:32,020 --> 00:42:39,520
I think we have a question left yes

834
00:42:35,470 --> 00:42:42,459
thanks for your talk do you foresee

835
00:42:39,520 --> 00:42:45,370
already how much of the implementations

836
00:42:42,460 --> 00:42:47,230
will be user mode and how many or which

837
00:42:45,370 --> 00:42:49,450
parts of the implementation is a user

838
00:42:47,230 --> 00:42:52,150
mode and which path will be kernel-mode

839
00:42:49,450 --> 00:42:54,580
especially regarding the async parts

840
00:42:52,150 --> 00:42:57,130
which are usually done differently on

841
00:42:54,580 --> 00:43:00,819
different operating systems that's a

842
00:42:57,130 --> 00:43:02,320
very good question if you're looking at

843
00:43:00,820 --> 00:43:05,080
the information that are currently out

844
00:43:02,320 --> 00:43:07,750
there so there's our past information

845
00:43:05,080 --> 00:43:10,360
mostly of repres the need implementation

846
00:43:07,750 --> 00:43:13,120
also is mostly a wrapper around the

847
00:43:10,360 --> 00:43:15,910
socket API the apple implementation is

848
00:43:13,120 --> 00:43:19,270
actually doing most stuff and users mode

849
00:43:15,910 --> 00:43:20,970
and it's just using the kernel mode for

850
00:43:19,270 --> 00:43:23,970
the multiplexing

851
00:43:20,970 --> 00:43:29,040
and I think this is the way it should go

852
00:43:23,970 --> 00:43:31,290
in the next year's so on the other hand

853
00:43:29,040 --> 00:43:33,900
I think seeing that Bose was possible

854
00:43:31,290 --> 00:43:36,089
should also allow an implementation to

855
00:43:33,900 --> 00:43:40,950
change that sound at some point in time

856
00:43:36,089 --> 00:43:44,099
so hopefully it's possible to start with

857
00:43:40,950 --> 00:43:45,750
rapper on the BSD socket API and go to

858
00:43:44,099 --> 00:43:48,150
some user space networking

859
00:43:45,750 --> 00:43:50,369
implementation at this later point in

860
00:43:48,150 --> 00:43:52,829
time without changing the API to the

861
00:43:50,369 --> 00:43:58,740
application that's what we hope to

862
00:43:52,829 --> 00:44:00,270
achieve thank you so much so thank you

863
00:43:58,740 --> 00:44:02,040
so much to Phil sim please give him a

864
00:44:00,270 --> 00:44:13,349
great round of applause

865
00:44:02,040 --> 00:44:13,349
[Applause]

866
00:44:19,500 --> 00:44:24,119
[Music]

867
00:44:25,339 --> 00:44:27,400
you

