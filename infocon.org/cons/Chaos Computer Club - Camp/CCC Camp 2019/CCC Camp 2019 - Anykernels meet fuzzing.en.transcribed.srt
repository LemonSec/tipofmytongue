1
00:00:08,850 --> 00:00:14,320
[Music]

2
00:00:14,770 --> 00:00:21,960
allowing many tasks to be delegated to

3
00:00:18,040 --> 00:00:25,299
user space Bruce Wayne has prepared a

4
00:00:21,960 --> 00:00:29,530
fantastic guided tour on what we can do

5
00:00:25,300 --> 00:00:32,770
with and to that userland please give a

6
00:00:29,530 --> 00:00:40,780
warm fuzzy welcome to our next speaker

7
00:00:32,770 --> 00:00:44,080
Bruce Wayne hello I'm Bruce probably

8
00:00:40,780 --> 00:00:47,589
already you know me but I will introduce

9
00:00:44,080 --> 00:00:50,680
myself so I'm no longer a superhero now

10
00:00:47,589 --> 00:00:54,220
I'm working IIT because I'm working as a

11
00:00:50,680 --> 00:00:57,339
superhero is pretty much you know it's a

12
00:00:54,220 --> 00:01:00,010
hard task and it's easier to work in IT

13
00:00:57,339 --> 00:01:03,400
so by day I am now and pen tester

14
00:01:00,010 --> 00:01:07,539
by night I'm trying to fix some open

15
00:01:03,400 --> 00:01:08,940
source projects including internet PSD

16
00:01:07,540 --> 00:01:13,150
[Music]

17
00:01:08,940 --> 00:01:19,570
so how many net bsd users do we have

18
00:01:13,150 --> 00:01:24,480
here any of you few yeah so for the guys

19
00:01:19,570 --> 00:01:30,190
on a stream it's a full tenth of not BSD

20
00:01:24,480 --> 00:01:33,540
users and I want to also tell that it's

21
00:01:30,190 --> 00:01:38,250
my first camp as you may suspect and

22
00:01:33,540 --> 00:01:44,110
it's super cool I met you so many

23
00:01:38,250 --> 00:01:47,280
friendly people and I'd like to give

24
00:01:44,110 --> 00:01:52,200
applause for organizers and volunteers

25
00:01:47,280 --> 00:01:52,200
and all people that let it happen so

26
00:01:54,330 --> 00:02:00,408
thank you

27
00:01:56,810 --> 00:02:02,420
so didn't PhD so it's like just like any

28
00:02:00,409 --> 00:02:05,720
other operating system but the better

29
00:02:02,420 --> 00:02:08,270
one the BSD so you might think that B

30
00:02:05,720 --> 00:02:13,989
stands for Berkeley but in fact it's a

31
00:02:08,270 --> 00:02:17,720
bad mom it's a not B is these multi

32
00:02:13,989 --> 00:02:21,739
architectural and you can it can be run

33
00:02:17,720 --> 00:02:22,609
on top of many hardware including the

34
00:02:21,739 --> 00:02:25,580
Atari or

35
00:02:22,610 --> 00:02:29,360
Amiga one of the name servers of the 90s

36
00:02:25,580 --> 00:02:31,160
this running on top of Amiga and it's

37
00:02:29,360 --> 00:02:36,650
not just the kernel it's the kernel and

38
00:02:31,160 --> 00:02:40,400
the user land so we are rather cathedra

39
00:02:36,650 --> 00:02:42,050
not the bazaar and I'm going to talk

40
00:02:40,400 --> 00:02:45,220
about ROM kernels which is

41
00:02:42,050 --> 00:02:48,290
implementation of the any kernel idea

42
00:02:45,220 --> 00:02:52,880
because it's my opinion is pretty on the

43
00:02:48,290 --> 00:02:55,459
reddit and NPS the feature and I will

44
00:02:52,880 --> 00:02:59,180
try to convince you that it's super cool

45
00:02:55,459 --> 00:03:03,700
I will show you a few demos even crash

46
00:02:59,180 --> 00:03:09,820
denied PSD degrade and then PSD for you

47
00:03:03,700 --> 00:03:09,820
by using from kernel so sorry

48
00:03:10,120 --> 00:03:16,519
so have you seen early albums from

49
00:03:13,519 --> 00:03:21,440
they'll talk about the BSD last year it

50
00:03:16,519 --> 00:03:24,620
was Def Con and then as CCC in December

51
00:03:21,440 --> 00:03:28,070
I think if he was talking if the old DS

52
00:03:24,620 --> 00:03:32,510
DS are created equally basically it was

53
00:03:28,070 --> 00:03:35,959
a audit of the FreeBSD kernel of the net

54
00:03:32,510 --> 00:03:40,970
bsd kernel and open BSD and in fact he

55
00:03:35,959 --> 00:03:46,459
found like 60 bucks in that BSD for sure

56
00:03:40,970 --> 00:03:49,010
we weren't happy about that but one

57
00:03:46,459 --> 00:03:53,930
developer fixed all those 60 bucks

58
00:03:49,010 --> 00:03:57,030
overnight so it's a pretty pretty good

59
00:03:53,930 --> 00:04:00,359
result but we are not happy about it so

60
00:03:57,030 --> 00:04:03,120
we decided to do some quality

61
00:04:00,359 --> 00:04:06,329
improvements and there are many projects

62
00:04:03,120 --> 00:04:10,250
on going to help us 9 more packs in the

63
00:04:06,329 --> 00:04:16,228
net PSD most of them or some of them

64
00:04:10,250 --> 00:04:20,070
rather are connected with fuzzing we

65
00:04:16,228 --> 00:04:22,979
have a few projects sponsored by google

66
00:04:20,070 --> 00:04:25,050
Summer of Code which includes ASL 3/4

67
00:04:22,979 --> 00:04:29,070
and fancy stuff like that or sis color

68
00:04:25,050 --> 00:04:32,039
but today I'm going to show you how we

69
00:04:29,070 --> 00:04:36,990
can fast the net PSD kernel in the user

70
00:04:32,039 --> 00:04:40,710
space besides that we have also things

71
00:04:36,990 --> 00:04:44,669
that let us to night box in the kernel

72
00:04:40,710 --> 00:04:47,870
space and by using address sign Tizer

73
00:04:44,669 --> 00:04:51,960
on top of kernel or undefined behaviors

74
00:04:47,870 --> 00:04:59,750
scienter sign titer etc etc and in fact

75
00:04:51,960 --> 00:05:05,479
we are now well the most sanitized bsd

76
00:04:59,750 --> 00:05:09,030
in the world so many interesting

77
00:05:05,479 --> 00:05:13,219
projects are ongoing but the question

78
00:05:09,030 --> 00:05:13,219
for you what is the logo of the net PSD

79
00:05:14,210 --> 00:05:23,280
orange flag great so let me also tell

80
00:05:19,650 --> 00:05:29,989
you some trivia facts about mat PSD do

81
00:05:23,280 --> 00:05:35,580
you know who is proof any ideas

82
00:05:29,990 --> 00:05:38,490
so in fact it is Julian Assange he was

83
00:05:35,580 --> 00:05:41,930
10 at least the developer like 20 years

84
00:05:38,490 --> 00:05:46,469
ago and still his code is in the net PSD

85
00:05:41,930 --> 00:05:52,409
so if you are using SSL attached

86
00:05:46,469 --> 00:05:58,500
I think it's yes attached proven program

87
00:05:52,409 --> 00:06:02,550
then you have the Julian's code so the

88
00:05:58,500 --> 00:06:04,949
Nabi is the logo looked like this few

89
00:06:02,550 --> 00:06:06,670
years ago but now it's like this but

90
00:06:04,949 --> 00:06:14,020
we're gonna preach

91
00:06:06,670 --> 00:06:18,460
and like logo looks like this because it

92
00:06:14,020 --> 00:06:22,479
would be easier for me to to let you

93
00:06:18,460 --> 00:06:26,979
know about the RAM now so let's pretend

94
00:06:22,480 --> 00:06:33,670
that this is the net bsd kernel we can

95
00:06:26,980 --> 00:06:38,040
call this demon like maybe Robin so the

96
00:06:33,670 --> 00:06:42,910
ramp stands for the runnable user mehta

97
00:06:38,040 --> 00:06:45,430
programs and i don't really know i have

98
00:06:42,910 --> 00:06:48,250
no idea what it means

99
00:06:45,430 --> 00:06:53,190
so i decided to dig into the

100
00:06:48,250 --> 00:06:58,420
documentation and let you try to

101
00:06:53,190 --> 00:07:01,000
understand it so I created this painting

102
00:06:58,420 --> 00:07:04,270
to let you know how it works so

103
00:07:01,000 --> 00:07:08,170
basically we want to decompose the net

104
00:07:04,270 --> 00:07:11,820
bsd kernel into pieces which can be run

105
00:07:08,170 --> 00:07:15,220
on top of anything and in our case

106
00:07:11,820 --> 00:07:20,530
anything means that we are going to run

107
00:07:15,220 --> 00:07:25,420
it on top of Linux so we can fix the

108
00:07:20,530 --> 00:07:28,299
Linux world with our implementation but

109
00:07:25,420 --> 00:07:31,650
in fact the any kernel means that you

110
00:07:28,300 --> 00:07:35,280
can run these parts of the net BSD

111
00:07:31,650 --> 00:07:37,179
wherever you want to from the

112
00:07:35,280 --> 00:07:42,190
architecture point of view

113
00:07:37,180 --> 00:07:46,260
it looks like this so there is a little

114
00:07:42,190 --> 00:07:49,990
library called ramp which gives the

115
00:07:46,260 --> 00:07:53,020
primitives that let us to run the a

116
00:07:49,990 --> 00:07:55,530
faster for VFS or inet or whatever we

117
00:07:53,020 --> 00:08:02,530
want to and there is some glue between

118
00:07:55,530 --> 00:08:06,159
ramp and something it doesn't matter

119
00:08:02,530 --> 00:08:09,010
right now what it is but for example if

120
00:08:06,160 --> 00:08:13,600
we want to run the netbiz the kernel on

121
00:08:09,010 --> 00:08:16,750
top of the user space then we should

122
00:08:13,600 --> 00:08:18,130
implement the ramp you user

123
00:08:16,750 --> 00:08:21,560
[Music]

124
00:08:18,130 --> 00:08:24,650
to give the primitives from the user

125
00:08:21,560 --> 00:08:27,050
space so we can run a ramp on top of it

126
00:08:24,650 --> 00:08:31,630
for now you can think about the whole

127
00:08:27,050 --> 00:08:35,780
thing that this is just a very light

128
00:08:31,630 --> 00:08:39,260
virtual machine it's not necessarily

129
00:08:35,780 --> 00:08:42,829
true but less or more is like this but

130
00:08:39,260 --> 00:08:47,300
in fact I also told you that it can be

131
00:08:42,830 --> 00:08:49,820
run on top of anything and really it can

132
00:08:47,300 --> 00:08:52,160
be run in kernel space user Express

133
00:08:49,820 --> 00:08:56,480
outer space it really doesn't matter so

134
00:08:52,160 --> 00:09:01,150
wide this is cool so you can ramp so you

135
00:08:56,480 --> 00:09:04,610
can run the TCP stack or file system or

136
00:09:01,150 --> 00:09:06,980
any other part of the of the kernel in

137
00:09:04,610 --> 00:09:09,400
the user space I will show you why this

138
00:09:06,980 --> 00:09:13,010
is cool

139
00:09:09,400 --> 00:09:17,030
later I have a demo and in fact you can

140
00:09:13,010 --> 00:09:20,780
also the debug things in the user space

141
00:09:17,030 --> 00:09:23,600
which is pretty convenient also for a

142
00:09:20,780 --> 00:09:29,630
developer it's a very convenient to run

143
00:09:23,600 --> 00:09:34,850
it in you know if it's a very I can

144
00:09:29,630 --> 00:09:38,650
speed up my development process because

145
00:09:34,850 --> 00:09:44,170
I don't need to reboot my station etc

146
00:09:38,650 --> 00:09:50,630
etc have you ever tried to debug kernel

147
00:09:44,170 --> 00:09:53,270
any of you is it easiest task or rather

148
00:09:50,630 --> 00:09:56,060
or not you have to setup yeah it's a

149
00:09:53,270 --> 00:09:58,010
very complicated stuff so sometimes you

150
00:09:56,060 --> 00:10:02,060
need a serial port and connect to

151
00:09:58,010 --> 00:10:06,939
machines it's it's not that easy and I'm

152
00:10:02,060 --> 00:10:06,939
going to give you

153
00:10:07,050 --> 00:10:14,500
and email that in that in that VSD it's

154
00:10:11,580 --> 00:10:17,430
easy and in fact you can also use the

155
00:10:14,500 --> 00:10:20,860
usual and tools on top of the ramp

156
00:10:17,430 --> 00:10:22,599
kernels and you can use GDP or bulk

157
00:10:20,860 --> 00:10:26,730
winter whatever you want to

158
00:10:22,600 --> 00:10:36,720
so the first demo is to show you the GDP

159
00:10:26,730 --> 00:10:36,720
the debugger so sorry oops

160
00:10:46,470 --> 00:11:06,180
let me scale it so the resolution has

161
00:11:01,120 --> 00:11:10,330
changed and I don't know if you see it

162
00:11:06,180 --> 00:11:16,359
it's okay okay so have you ever try to

163
00:11:10,330 --> 00:11:22,600
use GDB GDB as built-in debugger into

164
00:11:16,360 --> 00:11:28,000
the BSD kernel you can get into by some

165
00:11:22,600 --> 00:11:32,650
magic cheese sequence and now we are

166
00:11:28,000 --> 00:11:37,230
running in kernel space the debugger but

167
00:11:32,650 --> 00:11:41,620
it's pretty simple the bugger much I

168
00:11:37,230 --> 00:11:46,510
mean that many features are not here and

169
00:11:41,620 --> 00:11:51,100
using that it's pretty convenient so I

170
00:11:46,510 --> 00:11:53,140
will run the ramp kernel on top of Linux

171
00:11:51,100 --> 00:11:56,050
and show you how you can debug the net

172
00:11:53,140 --> 00:12:06,040
lease the kernel in userspace

173
00:11:56,050 --> 00:12:10,920
so so I executed the ramp kernel here in

174
00:12:06,040 --> 00:12:14,680
the GE gdb and it is listening for the

175
00:12:10,920 --> 00:12:18,189
connection on port number 10,000 because

176
00:12:14,680 --> 00:12:19,370
the ramp ctrl is just a tiny script

177
00:12:18,190 --> 00:12:25,040
less or more

178
00:12:19,370 --> 00:12:27,589
as ssh connection to romp on server and

179
00:12:25,040 --> 00:12:35,029
let's let's pretend that i want to debug

180
00:12:27,589 --> 00:12:38,240
the ICMP protocol so let's set a

181
00:12:35,029 --> 00:12:43,580
breakpoint for a function ecmp

182
00:12:38,240 --> 00:12:52,490
input do you know what is he a ecmp

183
00:12:43,580 --> 00:12:56,230
input does any ideas no ideas yeah less

184
00:12:52,490 --> 00:12:59,060
or more so let's set a breakpoint

185
00:12:56,230 --> 00:13:06,820
continue a program and what do you think

186
00:12:59,060 --> 00:13:09,469
how I can trigger that breakpoint sorry

187
00:13:06,820 --> 00:13:12,339
you you have to scream because I can

188
00:13:09,470 --> 00:13:16,070
hear you any ideas

189
00:13:12,339 --> 00:13:21,290
pink yeah so we're gonna send pink to

190
00:13:16,070 --> 00:13:26,990
the ramp machine so let's try to do it

191
00:13:21,290 --> 00:13:30,040
oh but first of all I mean did it be

192
00:13:26,990 --> 00:13:37,040
right use all this continuing on here

193
00:13:30,040 --> 00:13:39,380
yes so ramp pink I'm not going to show

194
00:13:37,040 --> 00:13:42,740
you the details and talk about the

195
00:13:39,380 --> 00:13:45,589
details view because I want to just show

196
00:13:42,740 --> 00:13:48,800
you the idea so you can explore things

197
00:13:45,589 --> 00:13:55,360
by yourself so let's send just one

198
00:13:48,800 --> 00:14:00,109
packet and as you can see the breakpoint

199
00:13:55,360 --> 00:14:04,660
was filed and we can in very convenient

200
00:14:00,110 --> 00:14:08,690
way the bug is just like any other the

201
00:14:04,660 --> 00:14:13,040
userland program and we exploit this

202
00:14:08,690 --> 00:14:16,400
fact sorry we exploit this fact to write

203
00:14:13,040 --> 00:14:19,099
tests for denied PSD also I will show

204
00:14:16,400 --> 00:14:22,670
you how it apply so for example in this

205
00:14:19,100 --> 00:14:27,160
test case in user space we are checking

206
00:14:22,670 --> 00:14:31,430
if our network stack is working properly

207
00:14:27,160 --> 00:14:34,969
and we can set up in the user space

208
00:14:31,430 --> 00:14:38,569
program the whole network of the whole

209
00:14:34,970 --> 00:14:42,950
network configuration so it's a really

210
00:14:38,570 --> 00:14:49,700
powerful tool and another another demo

211
00:14:42,950 --> 00:14:53,660
is - sorry yeah another demo is to show

212
00:14:49,700 --> 00:14:59,140
you how to run the tcp/ip stack of the

213
00:14:53,660 --> 00:15:02,060
net bsd on top of the Linux so you can

214
00:14:59,140 --> 00:15:05,600
show to the internet only the net bsd

215
00:15:02,060 --> 00:15:09,979
implementation which is running in user

216
00:15:05,600 --> 00:15:13,940
space and then we we are going to run on

217
00:15:09,980 --> 00:15:22,520
another box httpd which is going to use

218
00:15:13,940 --> 00:15:23,770
that tcp/ip stack on top of linux do you

219
00:15:22,520 --> 00:15:27,290
get it

220
00:15:23,770 --> 00:15:30,650
pretty much yeah so you can ask me why I

221
00:15:27,290 --> 00:15:34,819
want to do it I have no idea but it's

222
00:15:30,650 --> 00:15:38,480
cool so let's try to set it up but first

223
00:15:34,820 --> 00:15:43,070
of all I need to delete my breakpoint so

224
00:15:38,480 --> 00:15:48,980
I want so I don't bring the demo so let

225
00:15:43,070 --> 00:15:54,820
delete all breakpoints yeah where is my

226
00:15:48,980 --> 00:16:00,320
course okay so first of all I need to

227
00:15:54,820 --> 00:16:08,090
configure TCP I tcp/ip stack on top of

228
00:16:00,320 --> 00:16:10,420
the Linux and driver which lets me to do

229
00:16:08,090 --> 00:16:16,100
that to do that is called vilt

230
00:16:10,420 --> 00:16:17,790
which just creates tool and device on

231
00:16:16,100 --> 00:16:23,420
the top of

232
00:16:17,790 --> 00:16:29,329
Deluxe so I can simply configure both

233
00:16:23,420 --> 00:16:29,329
ramp kernel and Linux so let's do it

234
00:16:31,310 --> 00:16:43,649
yeah so we're going to disrupt if config

235
00:16:36,829 --> 00:16:49,349
weird zero create so we created the with

236
00:16:43,649 --> 00:16:54,300
zero device and we have to assign an IP

237
00:16:49,350 --> 00:16:59,180
here so let assign IP like this that

238
00:16:54,300 --> 00:17:07,649
must watch your favorite that must pick

239
00:16:59,180 --> 00:17:12,270
any 24 to watts sorry I hope it won't

240
00:17:07,650 --> 00:17:17,579
break my name of it let's see so it

241
00:17:12,270 --> 00:17:20,490
should be configured let's see yes it is

242
00:17:17,579 --> 00:17:24,510
so we should also set up the Linux part

243
00:17:20,490 --> 00:17:28,470
and there is a crazy program right now

244
00:17:24,510 --> 00:17:31,679
on Linux if count link is no longer an

245
00:17:28,470 --> 00:17:34,020
option so I hope that you will help me

246
00:17:31,679 --> 00:17:37,380
because I'm not the Linux guy there is

247
00:17:34,020 --> 00:17:40,710
IP let's see if the to zero is here to

248
00:17:37,380 --> 00:17:43,580
zero here we have to set it up so IP

249
00:17:40,710 --> 00:17:43,580
addr

250
00:17:44,750 --> 00:17:58,020
the usual 224 death to zero

251
00:17:51,290 --> 00:18:03,000
yeah and I have to set the interface up

252
00:17:58,020 --> 00:18:08,549
and as far as I remember it's IP set

253
00:18:03,000 --> 00:18:11,700
sorry link set to zero up what was wrong

254
00:18:08,549 --> 00:18:17,220
with Isaac country I have no idea but

255
00:18:11,700 --> 00:18:20,530
for some reason now cool kids use the IP

256
00:18:17,220 --> 00:18:25,390
so we had we have

257
00:18:20,530 --> 00:18:31,240
connection I guess let's try to pink use

258
00:18:25,390 --> 00:18:35,260
your one yeah we have so now we created

259
00:18:31,240 --> 00:18:40,830
this part and now we have to run httpd

260
00:18:35,260 --> 00:18:45,190
which will proxied fiscals sockets

261
00:18:40,830 --> 00:18:50,399
physicals from box one box two so httpd

262
00:18:45,190 --> 00:18:56,640
can use the tcp/ip stack of the ramp

263
00:18:50,400 --> 00:19:01,710
server so let's try to do it so this is

264
00:18:56,640 --> 00:19:04,690
another box on the left side I have I

265
00:19:01,710 --> 00:19:10,930
have a box two on the right side I have

266
00:19:04,690 --> 00:19:15,180
a box one as you can see it's it's the

267
00:19:10,930 --> 00:19:21,460
net bsd and 90s this shipped with the

268
00:19:15,180 --> 00:19:28,440
httpd that httpd is called both of httpd

269
00:19:21,460 --> 00:19:33,760
and is pretty simple demon it exact HTTP

270
00:19:28,440 --> 00:19:36,490
there's B - f - e so I'm going to list

271
00:19:33,760 --> 00:19:41,050
in on a part nine nine nine nine nine

272
00:19:36,490 --> 00:19:43,930
nine nine and which directory you want

273
00:19:41,050 --> 00:19:46,419
to save to the Internet through the net

274
00:19:43,930 --> 00:19:49,780
BSD stack who is running contr which is

275
00:19:46,420 --> 00:19:56,140
running and running on top of the loops

276
00:19:49,780 --> 00:20:00,250
a TC yeah we well in it's pretty

277
00:19:56,140 --> 00:20:03,910
standard I believe but we should also do

278
00:20:00,250 --> 00:20:06,940
another thing if we will execute the

279
00:20:03,910 --> 00:20:11,710
HTTP d1 like this it's gonna use the

280
00:20:06,940 --> 00:20:15,900
native IP tcp/ip stack so we have to

281
00:20:11,710 --> 00:20:23,260
preload something which is called

282
00:20:15,900 --> 00:20:29,610
usually Leibrandt hijack so we simply

283
00:20:23,260 --> 00:20:32,950
hijack the socket stuff and proxy to the

284
00:20:29,610 --> 00:20:38,290
other tcp/ip stack

285
00:20:32,950 --> 00:20:44,880
and I wanted to serve the EDC up there

286
00:20:38,290 --> 00:20:44,879
is it easy okay so let's see if it works

287
00:20:46,440 --> 00:20:55,930
links HTTP the usual one was the tcp/ip

288
00:20:53,500 --> 00:20:59,410
stack which we configured port number

289
00:20:55,930 --> 00:21:04,480
nine nine nine nine which file from the

290
00:20:59,410 --> 00:21:08,860
it is you want network file password fun

291
00:21:04,480 --> 00:21:13,450
that's WD shadow won't work on it it's

292
00:21:08,860 --> 00:21:17,379
gonna work but there is no shadow on in

293
00:21:13,450 --> 00:21:21,090
the bsd world what is the file called in

294
00:21:17,380 --> 00:21:21,090
the bsd world any ideas

295
00:21:21,550 --> 00:21:32,740
master dot yes master got WD yeah so it

296
00:21:28,150 --> 00:21:40,030
works so as you can see it's pretty cool

297
00:21:32,740 --> 00:21:44,320
but yeah why why we they did that I have

298
00:21:40,030 --> 00:21:47,680
no idea but I will show you another how

299
00:21:44,320 --> 00:21:49,980
we can apply the ramp kernel another way

300
00:21:47,680 --> 00:21:53,350
so let's get back to the presentation

301
00:21:49,980 --> 00:21:57,460
well the cool thing is that if for

302
00:21:53,350 --> 00:22:03,010
example I am fighting with Joker so if

303
00:21:57,460 --> 00:22:08,170
he want - he wants to exploit my TCP

304
00:22:03,010 --> 00:22:10,780
stack if it's running in user space I

305
00:22:08,170 --> 00:22:15,240
have another

306
00:22:10,780 --> 00:22:20,830
layer of security so maybe that's why we

307
00:22:15,240 --> 00:22:22,960
we did that yeah and about I think I

308
00:22:20,830 --> 00:22:26,020
guess that all of you all of you already

309
00:22:22,960 --> 00:22:31,380
heard about it so I'm going to just

310
00:22:26,020 --> 00:22:37,540
present story of the invention of

311
00:22:31,380 --> 00:22:40,230
fasting so professor Barton Miller in 88

312
00:22:37,540 --> 00:22:43,360
was working from the remote on his

313
00:22:40,230 --> 00:22:46,710
computer and well it was dark and stormy

314
00:22:43,360 --> 00:22:51,310
night and the thunderstorm calls that

315
00:22:46,710 --> 00:22:55,930
his commands were mutated so and he

316
00:22:51,310 --> 00:22:58,960
noticed that that rotations are making

317
00:22:55,930 --> 00:23:02,680
people are making the programs to crash

318
00:22:58,960 --> 00:23:07,870
so he thought that maybe it's a good

319
00:23:02,680 --> 00:23:11,320
idea to use it and see if other programs

320
00:23:07,870 --> 00:23:14,590
behave like that so what would you do if

321
00:23:11,320 --> 00:23:17,530
you were Burton Miller

322
00:23:14,590 --> 00:23:20,649
he made an assignment for his students

323
00:23:17,530 --> 00:23:24,700
to test it and they were able to crush

324
00:23:20,650 --> 00:23:31,380
like 50 percent of the UNIX tools of I

325
00:23:24,700 --> 00:23:35,910
mean existing UNIX tools and 30 years

326
00:23:31,380 --> 00:23:40,000
later the fuzzing went mainstream and

327
00:23:35,910 --> 00:23:42,250
there are many flavors of fuzzing one of

328
00:23:40,000 --> 00:23:45,010
them is dump fast income if you ever

329
00:23:42,250 --> 00:23:48,160
tried fuzzing actually the dump fuzzing

330
00:23:45,010 --> 00:23:52,290
works and if you work for academia then

331
00:23:48,160 --> 00:23:55,600
probably you are trying to use some

332
00:23:52,290 --> 00:23:58,120
feedback driven fuzzing which uses the

333
00:23:55,600 --> 00:24:01,899
SMT stuff or in not theory and things

334
00:23:58,120 --> 00:24:06,449
like that and I have a comic strip for

335
00:24:01,900 --> 00:24:10,990
you about that just get back to me yeah

336
00:24:06,450 --> 00:24:14,110
probably you know that comic strip I

337
00:24:10,990 --> 00:24:18,520
don't know who is the author but it is

338
00:24:14,110 --> 00:24:23,290
so true dump fuzzing usually works

339
00:24:18,520 --> 00:24:23,879
pretty well so don't be scared that you

340
00:24:23,290 --> 00:24:26,129
are

341
00:24:23,880 --> 00:24:34,260
doing simple things because I will show

342
00:24:26,130 --> 00:24:36,270
you that it works yeah so to test not

343
00:24:34,260 --> 00:24:39,270
VSD we created something called food

344
00:24:36,270 --> 00:24:41,970
ramp which is just a fork of built ramp

345
00:24:39,270 --> 00:24:49,200
which lets you to cross compile the ramp

346
00:24:41,970 --> 00:24:52,110
for any POSIX compatible system and in

347
00:24:49,200 --> 00:24:55,309
our case any means that it works on top

348
00:24:52,110 --> 00:24:58,408
of boom - and don't try any other

349
00:24:55,309 --> 00:25:01,230
platform because probably it's not going

350
00:24:58,409 --> 00:25:03,900
to work but if you want to report it

351
00:25:01,230 --> 00:25:09,409
then we will be more than happy

352
00:25:03,900 --> 00:25:15,450
we also realign and the base line from

353
00:25:09,409 --> 00:25:20,250
Lion and that VSD 7 to netbsd 9 which is

354
00:25:15,450 --> 00:25:26,630
going to be released when it's ready but

355
00:25:20,250 --> 00:25:31,710
actually it was branched so we use the

356
00:25:26,630 --> 00:25:34,470
current version food ramp and we have

357
00:25:31,710 --> 00:25:38,210
also an AFL support and I'm going to

358
00:25:34,470 --> 00:25:41,940
show you how it works and what problems

359
00:25:38,210 --> 00:25:47,539
we encountered so in case of alligators

360
00:25:41,940 --> 00:25:51,630
many subsystems in the colonel used

361
00:25:47,539 --> 00:25:56,070
pattern where they were allocating a big

362
00:25:51,630 --> 00:25:59,669
chunk of memory and the problem is that

363
00:25:56,070 --> 00:26:02,990
if you want to use address center then

364
00:25:59,669 --> 00:26:06,059
address sanitizer is not aware what is

365
00:26:02,990 --> 00:26:10,320
happening inside of this big chunk so

366
00:26:06,059 --> 00:26:14,639
instead of allocating one big chunk we

367
00:26:10,320 --> 00:26:19,830
wrote approaches to allocate just the

368
00:26:14,640 --> 00:26:23,490
small ones so we can detect if something

369
00:26:19,830 --> 00:26:28,830
is is happening between those chance and

370
00:26:23,490 --> 00:26:32,640
we rewrote stuff like caiman pool etc

371
00:26:28,830 --> 00:26:33,699
etc and also the problem is the Trump

372
00:26:32,640 --> 00:26:36,040
kernel

373
00:26:33,700 --> 00:26:44,200
if you compile the application which

374
00:26:36,040 --> 00:26:47,530
uses the ramp kernel in order to avoid

375
00:26:44,200 --> 00:26:51,460
the clashes between the lane functions

376
00:26:47,530 --> 00:26:55,000
ramp renames if every function of the

377
00:26:51,460 --> 00:26:57,670
kernel with the prefix ramp and s and

378
00:26:55,000 --> 00:27:01,929
the problem is that address ionizer is

379
00:26:57,670 --> 00:27:06,160
not able to see that ramp and s memset

380
00:27:01,929 --> 00:27:11,770
is in fact memset so we created just the

381
00:27:06,160 --> 00:27:16,809
simple library to expose the memset

382
00:27:11,770 --> 00:27:20,700
instead of Rompin s memset and you using

383
00:27:16,809 --> 00:27:24,610
it is as easy as doing simple all the

384
00:27:20,700 --> 00:27:28,210
reloads so as a scientist I can be happy

385
00:27:24,610 --> 00:27:31,059
again and what to look for well you know

386
00:27:28,210 --> 00:27:35,890
the kernel is a little bit different

387
00:27:31,059 --> 00:27:38,799
than usual and program and I mean that

388
00:27:35,890 --> 00:27:40,720
if we have a leak in a kernel or

389
00:27:38,799 --> 00:27:45,580
something like that and it can be

390
00:27:40,720 --> 00:27:48,880
triggered from the user then probably by

391
00:27:45,580 --> 00:27:54,689
repeating a one leak you can stop the

392
00:27:48,880 --> 00:27:57,970
whole kernel so this is pretty

393
00:27:54,690 --> 00:28:02,020
dangerous and in fact if you use the

394
00:27:57,970 --> 00:28:04,330
ramp you can also use the address

395
00:28:02,020 --> 00:28:10,810
sanitizer feature which is called leaks

396
00:28:04,330 --> 00:28:14,129
sign titer to detect those leaks so I'm

397
00:28:10,810 --> 00:28:18,760
going to show you the dump use case of

398
00:28:14,130 --> 00:28:21,850
rump current now so well I started this

399
00:28:18,760 --> 00:28:24,610
project like two or three years ago and

400
00:28:21,850 --> 00:28:31,080
it was my first approach to fast the

401
00:28:24,610 --> 00:28:35,469
colonel I created a very simple father

402
00:28:31,080 --> 00:28:38,860
which looks like this I'm going to show

403
00:28:35,470 --> 00:28:45,220
you the configuration file of it it is

404
00:28:38,860 --> 00:28:48,459
here so I just provided the prototypes

405
00:28:45,220 --> 00:28:53,380
of the cisco's that we have in the net

406
00:28:48,460 --> 00:28:58,690
PSD and it's it's pretty well easy

407
00:28:53,380 --> 00:29:02,350
because I just copy/paste the prototype

408
00:28:58,690 --> 00:29:06,370
from the codes and and that's it and I

409
00:29:02,350 --> 00:29:10,330
had thanks to Minerva leap father I had

410
00:29:06,370 --> 00:29:16,830
a father in five minutes minutes and you

411
00:29:10,330 --> 00:29:16,830
can execute it like this TCP

412
00:29:18,290 --> 00:29:21,389
[Music]

413
00:29:23,340 --> 00:29:32,500
let's try with ten interations so it

414
00:29:30,070 --> 00:29:37,000
simply calls the random functions with

415
00:29:32,500 --> 00:29:41,950
the random arguments and in fact we were

416
00:29:37,000 --> 00:29:43,600
able to find a lot of bugs you using it

417
00:29:41,950 --> 00:29:46,600
which is quite embarrassing right

418
00:29:43,600 --> 00:29:49,270
because we are rather not supposed to

419
00:29:46,600 --> 00:29:52,570
have bugs like that in in the kernel but

420
00:29:49,270 --> 00:29:55,299
if we can use address ioniser then we

421
00:29:52,570 --> 00:29:57,970
nailed backs which are not necessarily

422
00:29:55,299 --> 00:30:02,139
caused the panic of the kernel of things

423
00:29:57,970 --> 00:30:06,940
like that it was just harmless backs but

424
00:30:02,140 --> 00:30:13,120
in fact they were bugs I have may be

425
00:30:06,940 --> 00:30:16,570
here yeah I have here the example report

426
00:30:13,120 --> 00:30:22,120
from the fuzzing session let's take this

427
00:30:16,570 --> 00:30:27,730
one so we found bugs like two years ago

428
00:30:22,120 --> 00:30:34,209
and it was fixed and then I had a two

429
00:30:27,730 --> 00:30:37,929
years break and I wanted to check if I

430
00:30:34,210 --> 00:30:41,169
can use ASL on top of the round colonel

431
00:30:37,929 --> 00:30:44,640
well it wasn't trivial task support but

432
00:30:41,169 --> 00:30:48,330
we managed to compile

433
00:30:44,640 --> 00:30:51,120
rum using ASL clunk and things like that

434
00:30:48,330 --> 00:30:59,090
and I'm going to show you how easy it is

435
00:30:51,120 --> 00:31:02,159
to to fast then that peace deal with ASL

436
00:30:59,090 --> 00:31:06,629
so if you want to do it you have to

437
00:31:02,160 --> 00:31:09,120
further our clients yes let's well now I

438
00:31:06,630 --> 00:31:15,610
will show you the ffs example which is

439
00:31:09,120 --> 00:31:17,449
just the files system so we have here

440
00:31:15,610 --> 00:31:22,918
[Music]

441
00:31:17,450 --> 00:31:27,000
simply we are mounting the file which is

442
00:31:22,919 --> 00:31:31,169
provided in the arguments of this client

443
00:31:27,000 --> 00:31:37,500
so it's we just wrote 15 lines of code

444
00:31:31,169 --> 00:31:41,040
and we are able to run it in the NFL and

445
00:31:37,500 --> 00:31:45,210
find a box and I'll show you that we in

446
00:31:41,040 --> 00:31:49,740
fact found some parts but let me lock

447
00:31:45,210 --> 00:31:55,130
here well I'll show you the crash we

448
00:31:49,740 --> 00:31:56,520
found recently in X 2 file system yeah

449
00:31:55,130 --> 00:32:06,020
yeah I know

450
00:31:56,520 --> 00:32:10,168
thank you so in order to mount the crash

451
00:32:06,020 --> 00:32:12,970
mg you have to do it this way so it's

452
00:32:10,169 --> 00:32:17,440
some kind of a loop in the

453
00:32:12,970 --> 00:32:24,160
or in the linux world and then we're

454
00:32:17,440 --> 00:32:28,080
going to mount it x2 a fast f70 M&T and

455
00:32:24,160 --> 00:32:32,830
what do you think what's going to happen

456
00:32:28,080 --> 00:32:36,689
rush yeah yeah so it crashed and it was

457
00:32:32,830 --> 00:32:41,560
fun thanks to 15 purse

458
00:32:36,690 --> 00:32:46,000
lines of code in AFL its division by

459
00:32:41,560 --> 00:32:49,419
zero back in the x2 FS but in fact if

460
00:32:46,000 --> 00:32:53,110
you want to exploit that you have to be

461
00:32:49,420 --> 00:32:57,400
a route so it's pretty harmless and

462
00:32:53,110 --> 00:33:02,139
that's why I show it publicly right now

463
00:32:57,400 --> 00:33:05,620
and we also decided that you know the FS

464
00:33:02,140 --> 00:33:08,770
stuff is well it's I I would say that we

465
00:33:05,620 --> 00:33:14,699
expected to find the many bugs in file

466
00:33:08,770 --> 00:33:21,010
systems because if you mount you know

467
00:33:14,700 --> 00:33:25,650
unknown image then you are not

468
00:33:21,010 --> 00:33:29,910
responsible so we thought that fuzzing

469
00:33:25,650 --> 00:33:32,950
network could be more interesting and

470
00:33:29,910 --> 00:33:36,880
our first approach was to use just the

471
00:33:32,950 --> 00:33:39,280
ross sorkin syndrome care no but we had

472
00:33:36,880 --> 00:33:42,490
a problem that we didn't know when the

473
00:33:39,280 --> 00:33:45,570
packet is handled by the kernel because

474
00:33:42,490 --> 00:33:50,530
there is for example if you send the IP

475
00:33:45,570 --> 00:33:54,370
IP packet to the net bsd it's handled by

476
00:33:50,530 --> 00:33:58,720
a soft interrupt and we don't know when

477
00:33:54,370 --> 00:34:01,750
it's going to be fired up so we decided

478
00:33:58,720 --> 00:34:03,820
to well it's another cool feature that

479
00:34:01,750 --> 00:34:09,100
from the point of view of the

480
00:34:03,820 --> 00:34:14,049
application you can call any kernel

481
00:34:09,100 --> 00:34:19,150
function which is cool but well it we

482
00:34:14,050 --> 00:34:23,230
are abusing here our api a little bit so

483
00:34:19,150 --> 00:34:24,960
i'll show you how it apply let's get

484
00:34:23,230 --> 00:34:33,429
back to the

485
00:34:24,960 --> 00:34:38,980
terminals we have here program called

486
00:34:33,429 --> 00:34:44,159
net input that input is a program that

487
00:34:38,980 --> 00:34:48,909
reads packet from the standard input and

488
00:34:44,159 --> 00:34:51,820
simply pushes it to the network stuff we

489
00:34:48,909 --> 00:34:54,310
call here function first ramp IP input

490
00:34:51,820 --> 00:34:56,830
and we implemented that function in our

491
00:34:54,310 --> 00:35:01,930
kernel I will show you the

492
00:34:56,830 --> 00:35:13,380
implementation SRC this Netta internet

493
00:35:01,930 --> 00:35:15,640
IP input so yeah here we have

494
00:35:13,380 --> 00:35:21,760
implementation of the function that fits

495
00:35:15,640 --> 00:35:25,390
the network stuff stock so it just put

496
00:35:21,760 --> 00:35:30,810
the data into the EM bath and pushes it

497
00:35:25,390 --> 00:35:33,910
to the IP input function we also had to

498
00:35:30,810 --> 00:35:36,759
pretend like we are the software input

499
00:35:33,910 --> 00:35:40,270
but it's harmless and what do you think

500
00:35:36,760 --> 00:35:42,670
by using this approach how many bugs we

501
00:35:40,270 --> 00:35:45,820
have found so far and you should ask me

502
00:35:42,670 --> 00:35:49,210
Batman but what about the checksums

503
00:35:45,820 --> 00:35:52,840
and stuff like that if you mutate

504
00:35:49,210 --> 00:35:55,540
packets then you're going to have

505
00:35:52,840 --> 00:35:58,450
invalid packets because of the the

506
00:35:55,540 --> 00:36:01,090
checksums so I show you showed you that

507
00:35:58,450 --> 00:36:04,810
we are feeding the loopback

508
00:36:01,090 --> 00:36:08,340
device and the checksum are turned after

509
00:36:04,810 --> 00:36:10,690
so we don't have to care about it and

510
00:36:08,340 --> 00:36:15,030
how many bugs we have found what do you

511
00:36:10,690 --> 00:36:20,710
think twenty any other ideas

512
00:36:15,030 --> 00:36:23,530
so we have found nothing nothing yet at

513
00:36:20,710 --> 00:36:26,020
least which is both pretty cool

514
00:36:23,530 --> 00:36:28,780
as a developer I am really proud of it

515
00:36:26,020 --> 00:36:35,370
as a background I'm pretty sad about it

516
00:36:28,780 --> 00:36:37,960
but it's not that our efforts is

517
00:36:35,370 --> 00:36:41,350
meaning glass because now we have a

518
00:36:37,960 --> 00:36:44,020
purpose that out of the packets that

519
00:36:41,350 --> 00:36:47,350
covers pretty much of our network style

520
00:36:44,020 --> 00:36:53,590
so we can test every change by running

521
00:36:47,350 --> 00:36:55,509
this corpus if anything is broken and in

522
00:36:53,590 --> 00:36:59,080
fact it wasn't a big surprise because

523
00:36:55,510 --> 00:36:59,740
the network start is pretty well test in

524
00:36:59,080 --> 00:37:01,960
the wild

525
00:36:59,740 --> 00:37:06,209
if you ever connected any box to the

526
00:37:01,960 --> 00:37:10,090
internet you know that a lot of very

527
00:37:06,210 --> 00:37:17,080
special pockets out there everyone is

528
00:37:10,090 --> 00:37:19,420
trying to scan you etc etc so it's not a

529
00:37:17,080 --> 00:37:23,500
big surprise but at least we are not

530
00:37:19,420 --> 00:37:26,050
knobs because we run the net bsd kernel

531
00:37:23,500 --> 00:37:30,220
in the user space we can compile with

532
00:37:26,050 --> 00:37:34,900
the NFL and finally we want to cover

533
00:37:30,220 --> 00:37:37,029
more drivers drivers especially the VC

534
00:37:34,900 --> 00:37:39,520
stack and the blue to start in if you

535
00:37:37,030 --> 00:37:43,710
want to help us you'd be more than happy

536
00:37:39,520 --> 00:37:47,350
to cooperate with you we can also try to

537
00:37:43,710 --> 00:37:50,760
integrate this project with the OSS fast

538
00:37:47,350 --> 00:37:53,560
by Google so we would have

539
00:37:50,760 --> 00:38:00,460
[Music]

540
00:37:53,560 --> 00:38:04,220
we can have reports from them that we

541
00:38:00,460 --> 00:38:07,310
well have a broken kernel sample like

542
00:38:04,220 --> 00:38:10,700
that so I know also that other operating

543
00:38:07,310 --> 00:38:13,880
systems like like like lineups have the

544
00:38:10,700 --> 00:38:16,160
same things as ROM prob I don't know if

545
00:38:13,880 --> 00:38:19,970
it's working or not maybe you'd tell me

546
00:38:16,160 --> 00:38:24,759
for example in Linux there is a live OS

547
00:38:19,970 --> 00:38:27,919
have you ever tried to use it not really

548
00:38:24,760 --> 00:38:39,200
but I think that it's not as advanced as

549
00:38:27,920 --> 00:38:41,750
ROM stuff so maybe you can yeah and I

550
00:38:39,200 --> 00:38:46,480
also want to say big thank you

551
00:38:41,750 --> 00:38:46,480
especially to me how who helped me a lot

552
00:38:47,170 --> 00:38:51,130
do you have any questions

553
00:39:00,360 --> 00:39:04,870
great so if you have questions we have a

554
00:39:02,830 --> 00:39:07,270
microphone angel standing over there we

555
00:39:04,870 --> 00:39:10,480
have a microphone angel standing over

556
00:39:07,270 --> 00:39:13,330
there and we have perhaps some questions

557
00:39:10,480 --> 00:39:15,490
from the internet for Batman no

558
00:39:13,330 --> 00:39:17,049
questions for Batman the internet is

559
00:39:15,490 --> 00:39:19,540
very disappointing this evening but here

560
00:39:17,050 --> 00:39:22,690
we have a question thanks for a nice

561
00:39:19,540 --> 00:39:25,290
talk your work as I understand you

562
00:39:22,690 --> 00:39:29,950
started to your project before C spoiler

563
00:39:25,290 --> 00:39:32,110
started to support B's D right yes the

564
00:39:29,950 --> 00:39:33,819
scholar was implemented last year I

565
00:39:32,110 --> 00:39:38,470
think as a part of the google Summer of

566
00:39:33,820 --> 00:39:41,140
Code I started my project like in 2017

567
00:39:38,470 --> 00:39:46,810
but you know my free time I'm a

568
00:39:41,140 --> 00:39:49,390
superhero so my free time is well I

569
00:39:46,810 --> 00:39:51,850
don't have much free time right but

570
00:39:49,390 --> 00:39:54,129
anyway it is really great thank you

571
00:39:51,850 --> 00:39:57,549
thank you very much and if we compare

572
00:39:54,130 --> 00:40:01,170
your your approach with I would say

573
00:39:57,550 --> 00:40:06,370
native fuzzing inside of virtual machine

574
00:40:01,170 --> 00:40:11,230
do you have any I haven't better things

575
00:40:06,370 --> 00:40:14,589
well currently there was a blog post on

576
00:40:11,230 --> 00:40:18,760
the net BSD blog about fuzzing file

577
00:40:14,590 --> 00:40:23,320
systems using the AFL and take off which

578
00:40:18,760 --> 00:40:27,610
is coverage from kernel there is a

579
00:40:23,320 --> 00:40:31,900
special device in the death tree so you

580
00:40:27,610 --> 00:40:37,100
can run a cisco and see which functions

581
00:40:31,900 --> 00:40:41,610
were triggered and the guy

582
00:40:37,100 --> 00:40:46,049
who wrote this blog I think he was able

583
00:40:41,610 --> 00:40:51,030
to run like 40 executions per second and

584
00:40:46,050 --> 00:40:56,790
using this approach we are we can do few

585
00:40:51,030 --> 00:40:59,580
hundred tests per second like in case of

586
00:40:56,790 --> 00:41:03,060
the network stuff we are able to inject

587
00:40:59,580 --> 00:41:04,980
like 10,000 packets per second and the

588
00:41:03,060 --> 00:41:09,799
problem right now is that you know it's

589
00:41:04,980 --> 00:41:13,590
my hope we project mostly I think that

590
00:41:09,800 --> 00:41:17,220
well you you can use the Jake of stuff

591
00:41:13,590 --> 00:41:22,620
on top of the the ROM kernel so getting

592
00:41:17,220 --> 00:41:27,390
the coverage is pretty easy you can run

593
00:41:22,620 --> 00:41:30,810
the AFL and see which branches are trick

594
00:41:27,390 --> 00:41:35,250
in triggered or not and then you can put

595
00:41:30,810 --> 00:41:39,330
the test cases for that branches inside

596
00:41:35,250 --> 00:41:43,130
your corpus and run the AFL again but

597
00:41:39,330 --> 00:41:47,279
you know it takes time it's not

598
00:41:43,130 --> 00:41:50,360
necessarily exciting task so if you want

599
00:41:47,280 --> 00:41:54,630
to help us we beat them you are more

600
00:41:50,360 --> 00:41:57,270
well I'll be very happy about it and a

601
00:41:54,630 --> 00:42:01,040
small additional question about net so

602
00:41:57,270 --> 00:42:05,009
do you have some descriptions of

603
00:42:01,040 --> 00:42:09,230
protocols Network protocols to have more

604
00:42:05,010 --> 00:42:13,440
efficient fising or you just well I

605
00:42:09,230 --> 00:42:19,740
built my corpus I took the tests from

606
00:42:13,440 --> 00:42:22,560
the Hong fast implemented pretty much

607
00:42:19,740 --> 00:42:25,500
same thing for Linux but it's not

608
00:42:22,560 --> 00:42:29,250
working in the user space but they have

609
00:42:25,500 --> 00:42:33,510
a big corpus of packets and I simply

610
00:42:29,250 --> 00:42:39,660
took it and write how it works with the

611
00:42:33,510 --> 00:42:41,400
the net bsd and sorry last one okay and

612
00:42:39,660 --> 00:42:43,290
then we have to ask the internet if

613
00:42:41,400 --> 00:42:44,670
there's any internet questions so this

614
00:42:43,290 --> 00:42:47,119
is this is your last one

615
00:42:44,670 --> 00:42:51,710
as I understand you fuzz

616
00:42:47,119 --> 00:42:54,789
and the route was superuser yes well it

617
00:42:51,710 --> 00:43:00,230
doesn't matter if it runs route or not

618
00:42:54,789 --> 00:43:02,200
you can run ROM as a normal user but the

619
00:43:00,230 --> 00:43:04,999
thing is that if you want to use super

620
00:43:02,200 --> 00:43:08,740
features like the view interface and

621
00:43:04,999 --> 00:43:13,038
things like that you need a super user

622
00:43:08,740 --> 00:43:15,709
power and maybe I showed you the demos

623
00:43:13,039 --> 00:43:20,809
as a super user because I'm a superhero

624
00:43:15,710 --> 00:43:21,849
so that's it great any last thoughts

625
00:43:20,809 --> 00:43:24,319
from the internet

626
00:43:21,849 --> 00:43:26,509
no last thoughts in the internet then a

627
00:43:24,319 --> 00:43:28,529
last thought from us here for Bruce

628
00:43:26,509 --> 00:43:42,349
Wayne let's hear it

629
00:43:28,530 --> 00:43:42,349
[Applause]

630
00:43:48,700 --> 00:43:53,160
[Music]

631
00:43:54,480 --> 00:43:56,540
you

