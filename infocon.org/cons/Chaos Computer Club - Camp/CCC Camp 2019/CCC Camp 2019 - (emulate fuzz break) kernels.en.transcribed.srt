1
00:00:08,850 --> 00:00:15,450
[Music]

2
00:00:13,250 --> 00:00:18,960
now the right target are already

3
00:00:15,450 --> 00:00:21,390
announced before so I'm really happy to

4
00:00:18,960 --> 00:00:22,860
have here talk which gives more in

5
00:00:21,390 --> 00:00:24,689
technical detail than one which you had

6
00:00:22,860 --> 00:00:28,830
in the morning it's about Emma light

7
00:00:24,689 --> 00:00:30,029
fasten brake kernels so fuzzing is

8
00:00:28,830 --> 00:00:31,799
something of your probes nose since

9
00:00:30,029 --> 00:00:32,910
quite a time but now it's about fuzzing

10
00:00:31,800 --> 00:00:36,600
kernels which is something I'm really

11
00:00:32,910 --> 00:00:39,000
curious about and I'm really happy to

12
00:00:36,600 --> 00:00:40,559
have Dominic here I hope I pronounced it

13
00:00:39,000 --> 00:00:44,250
right you can explain later how is it

14
00:00:40,559 --> 00:00:46,050
correctly and if you have any questions

15
00:00:44,250 --> 00:00:48,989
during the talk please wait until the

16
00:00:46,050 --> 00:00:50,790
end then go to the mic and ask it in

17
00:00:48,989 --> 00:00:52,320
there because if you just type them in

18
00:00:50,790 --> 00:00:53,910
that's okay for here but everybody on

19
00:00:52,320 --> 00:00:56,420
the stream and in the video will have to

20
00:00:53,910 --> 00:00:59,339
play a game of Jeopardy

21
00:00:56,420 --> 00:01:00,809
so guessing which question was when they

22
00:00:59,340 --> 00:01:03,210
just here's the answer so please go to

23
00:01:00,809 --> 00:01:11,369
the mic at the end and for now please

24
00:01:03,210 --> 00:01:15,979
give a big round of applause good

25
00:01:11,369 --> 00:01:19,408
morning everybody I'm Dominic from

26
00:01:15,979 --> 00:01:24,689
tubulin and I'm gonna talk a bit about

27
00:01:19,409 --> 00:01:26,939
kernel fuzzing so we created a little

28
00:01:24,689 --> 00:01:30,000
tool we called it unique or a sweet as

29
00:01:26,939 --> 00:01:34,710
me and Bastion and Benedict it's based

30
00:01:30,000 --> 00:01:37,140
on a lot of other tools right what does

31
00:01:34,710 --> 00:01:40,740
it do so puzzling I think everybody kind

32
00:01:37,140 --> 00:01:44,549
of knows and it'll help you fast the

33
00:01:40,740 --> 00:01:47,759
kernel using a unicorn which is a cool

34
00:01:44,549 --> 00:01:51,119
tool by Nathan Foss and avatar too which

35
00:01:47,759 --> 00:01:53,549
is a nice tool from you recom and it

36
00:01:51,119 --> 00:01:56,670
finds bugs and it works on anything that

37
00:01:53,549 --> 00:01:59,130
you can attach a GDP target like you

38
00:01:56,670 --> 00:02:02,250
know get a gdb step in and it's open

39
00:01:59,130 --> 00:02:04,610
source so yeah kernels you all know what

40
00:02:02,250 --> 00:02:07,469
kernels are kernels are these things

41
00:02:04,610 --> 00:02:09,869
buzzing I think you also all know what

42
00:02:07,469 --> 00:02:12,390
fuzzing is fuzzing is basically you know

43
00:02:09,869 --> 00:02:17,450
shooting at things until they break it's

44
00:02:12,390 --> 00:02:21,208
not that interesting but still I mean

45
00:02:17,450 --> 00:02:22,920
AFL which is the main known coverage I

46
00:02:21,209 --> 00:02:23,640
did father has been around for quite

47
00:02:22,920 --> 00:02:25,829
some you

48
00:02:23,640 --> 00:02:27,779
but we still find loads of bucks like

49
00:02:25,830 --> 00:02:30,360
that doesn't make any sense we shouldn't

50
00:02:27,780 --> 00:02:31,770
have any bucks anymore why why do we

51
00:02:30,360 --> 00:02:34,560
still have bucks even though we have

52
00:02:31,770 --> 00:02:37,319
fuzzing now well lots of code is legacy

53
00:02:34,560 --> 00:02:39,510
code legacy code is not written to be

54
00:02:37,319 --> 00:02:41,280
tested it's pretty hard to test it

55
00:02:39,510 --> 00:02:44,700
depends on all kinds of things like

56
00:02:41,280 --> 00:02:46,830
Global's proper not initialized values

57
00:02:44,700 --> 00:02:50,040
that are hard to fast and all that

58
00:02:46,830 --> 00:02:51,300
things and also it sometimes really hard

59
00:02:50,040 --> 00:02:54,359
to get the right input in the right

60
00:02:51,300 --> 00:02:57,120
position so yeah it's pretty hard to set

61
00:02:54,360 --> 00:03:00,600
up a housing harness and then you know

62
00:02:57,120 --> 00:03:02,850
the kernel is this weird beast that

63
00:03:00,600 --> 00:03:04,530
interacts with everything around it it's

64
00:03:02,850 --> 00:03:07,890
like this monolithic thing at least

65
00:03:04,530 --> 00:03:10,140
Linux dead you know if it crashes it's

66
00:03:07,890 --> 00:03:12,660
just gone you have to restart it or find

67
00:03:10,140 --> 00:03:16,170
a way to respawn it quickly and maybe

68
00:03:12,660 --> 00:03:17,700
you overwrite some memory and it doesn't

69
00:03:16,170 --> 00:03:19,410
crash it's even worse because you found

70
00:03:17,700 --> 00:03:22,738
it back but you will never know about it

71
00:03:19,410 --> 00:03:25,140
because it just runs on so yeah it's

72
00:03:22,739 --> 00:03:26,660
it's even worse and obviously getting

73
00:03:25,140 --> 00:03:29,700
the right state and it currently takes

74
00:03:26,660 --> 00:03:32,640
30 seconds to boot er depends on your

75
00:03:29,700 --> 00:03:34,350
kernel but people are using I mean

76
00:03:32,640 --> 00:03:36,660
people are already buzzing kernel so

77
00:03:34,350 --> 00:03:40,530
there must be a way right so most of

78
00:03:36,660 --> 00:03:42,690
these fathers here prior fascist Trinity

79
00:03:40,530 --> 00:03:44,760
diffuse triforce this Cola and also

80
00:03:42,690 --> 00:03:46,799
sorts they all use Cisco so they have

81
00:03:44,760 --> 00:03:47,310
this API from user land talk to the

82
00:03:46,799 --> 00:03:50,190
colonel

83
00:03:47,310 --> 00:03:51,200
okay eval is a bit different that's

84
00:03:50,190 --> 00:03:55,650
actually pretty good

85
00:03:51,200 --> 00:03:58,380
can also do similar things to us but you

86
00:03:55,650 --> 00:04:02,579
know for example try for say FL which is

87
00:03:58,380 --> 00:04:06,840
a father for Colonel's and it's using

88
00:04:02,579 --> 00:04:08,370
key move to emulate it's really shaky

89
00:04:06,840 --> 00:04:12,180
like it doesn't like if you tried it out

90
00:04:08,370 --> 00:04:14,310
and something Forks first like you emu

91
00:04:12,180 --> 00:04:16,108
is an emulator it emulates the kernel

92
00:04:14,310 --> 00:04:18,120
and so on so forth if something already

93
00:04:16,108 --> 00:04:20,909
had had at this stage then it

94
00:04:18,120 --> 00:04:23,310
would be weird and you would be really

95
00:04:20,910 --> 00:04:25,560
hard-pressed to find the same back again

96
00:04:23,310 --> 00:04:27,750
and so on so forth and it's not really

97
00:04:25,560 --> 00:04:30,240
nobody really cares about the product

98
00:04:27,750 --> 00:04:32,310
anymore sadly the other ones have

99
00:04:30,240 --> 00:04:36,090
different problems you don't get

100
00:04:32,310 --> 00:04:37,440
coverage in the earlier fuzzers and this

101
00:04:36,090 --> 00:04:39,090
caller is pretty good for example

102
00:04:37,440 --> 00:04:42,180
but you have to ride harnesses for that

103
00:04:39,090 --> 00:04:43,859
pretty like they can only use coats and

104
00:04:42,180 --> 00:04:45,210
so on so forth and there's this one guy

105
00:04:43,860 --> 00:04:49,530
Brendan Fork who's doing crazy things

106
00:04:45,210 --> 00:04:51,500
but that's just above my head no so okay

107
00:04:49,530 --> 00:04:54,510
I had this idea like let's rip out

108
00:04:51,500 --> 00:04:57,450
parcels from the kernel and fast them

109
00:04:54,510 --> 00:05:00,480
anywhere else so that sounds like a fun

110
00:04:57,450 --> 00:05:02,130
idea right why why parses well prices

111
00:05:00,480 --> 00:05:04,320
are the main things they take something

112
00:05:02,130 --> 00:05:06,210
they interpret it and they output

113
00:05:04,320 --> 00:05:08,820
something and that's really hard to do

114
00:05:06,210 --> 00:05:12,510
right apparently so that stuff breaks

115
00:05:08,820 --> 00:05:14,670
all the time I have not yet seen a

116
00:05:12,510 --> 00:05:16,909
impact free is in one processor for

117
00:05:14,670 --> 00:05:20,310
example it's just all really hard to do

118
00:05:16,910 --> 00:05:22,740
and they also almost never interact with

119
00:05:20,310 --> 00:05:24,810
anything apart from their little buffer

120
00:05:22,740 --> 00:05:26,400
that they operate on so it's really easy

121
00:05:24,810 --> 00:05:28,260
for us to first we don't have any

122
00:05:26,400 --> 00:05:31,380
hardware that needs to interact and

123
00:05:28,260 --> 00:05:32,760
everything so yeah just copy paste the

124
00:05:31,380 --> 00:05:35,820
whole parts that usually and fuzz it

125
00:05:32,760 --> 00:05:37,860
there right that would be pretty perfect

126
00:05:35,820 --> 00:05:39,570
yeah yeah it would be but then we come

127
00:05:37,860 --> 00:05:42,090
back to the initial slide where I said

128
00:05:39,570 --> 00:05:44,760
it's really hard to set up the correct

129
00:05:42,090 --> 00:05:47,039
state for everything so you would have

130
00:05:44,760 --> 00:05:49,980
the parser sometimes rely on weird

131
00:05:47,040 --> 00:05:52,560
Global's in the kernel or some space

132
00:05:49,980 --> 00:05:54,810
yeah the current list was this land that

133
00:05:52,560 --> 00:05:57,540
nobody went there you may not even be on

134
00:05:54,810 --> 00:05:59,220
on Linux or something why you have to

135
00:05:57,540 --> 00:06:01,950
source or you may be on Linux but you

136
00:05:59,220 --> 00:06:04,130
have a weird blob from some vendor that

137
00:06:01,950 --> 00:06:08,130
it's not open source so what do you do

138
00:06:04,130 --> 00:06:10,980
yeah as I said before we emulate it so

139
00:06:08,130 --> 00:06:13,980
we use the feather the kernel and fuzz

140
00:06:10,980 --> 00:06:16,760
it inside an emulator along comes a full

141
00:06:13,980 --> 00:06:19,919
unicorn by Nathan for us it takes input

142
00:06:16,760 --> 00:06:22,169
it drops it in a test harness and then

143
00:06:19,919 --> 00:06:26,280
it passes it it uses unicorn underneath

144
00:06:22,169 --> 00:06:28,380
unicorn is a fork of qumu that is just

145
00:06:26,280 --> 00:06:31,109
there to be used in like a Python script

146
00:06:28,380 --> 00:06:33,719
or some random scripts and it can

147
00:06:31,110 --> 00:06:35,610
emulate multi-tool of architectures

148
00:06:33,720 --> 00:06:38,970
basically almost everything that Kumu

149
00:06:35,610 --> 00:06:41,130
can do more or less so and then you know

150
00:06:38,970 --> 00:06:43,680
AFL unicorn just adds instrumentation on

151
00:06:41,130 --> 00:06:45,780
top of unicorn so every time you know

152
00:06:43,680 --> 00:06:47,160
Hugh does block for block translation

153
00:06:45,780 --> 00:06:50,099
every time a new block gets translated

154
00:06:47,160 --> 00:06:51,270
it just the jump will be part of the

155
00:06:50,100 --> 00:06:53,190
coverage so it says

156
00:06:51,270 --> 00:06:55,109
oh I found a new blog here new blog is

157
00:06:53,190 --> 00:06:58,349
interesting for the fuzzer let's fuss

158
00:06:55,110 --> 00:07:01,919
from there next time or let's take this

159
00:06:58,349 --> 00:07:06,840
into our seats or harness whatever yeah

160
00:07:01,919 --> 00:07:09,960
so what we do we have a gdb stub that we

161
00:07:06,840 --> 00:07:14,039
can connect to using avatar 2 which is a

162
00:07:09,960 --> 00:07:15,930
Python library that can orchestrate your

163
00:07:14,039 --> 00:07:18,000
runs like it can also interact with

164
00:07:15,930 --> 00:07:20,449
other things in gdb stuff but so far

165
00:07:18,000 --> 00:07:22,650
we've only used 2 DB stuff to implement

166
00:07:20,449 --> 00:07:26,009
and then we have on the other side we

167
00:07:22,650 --> 00:07:28,620
have AF of unicorn and every time you

168
00:07:26,009 --> 00:07:31,979
unicorn finds some memory that is has

169
00:07:28,620 --> 00:07:35,370
not seen before it'll go ahead drop like

170
00:07:31,979 --> 00:07:38,068
a request to the pro prepper as we

171
00:07:35,370 --> 00:07:40,500
called it that will then go on to fetch

172
00:07:38,069 --> 00:07:42,030
the memory from the stub and if it

173
00:07:40,500 --> 00:07:44,190
cannot fetch the memory that means we

174
00:07:42,030 --> 00:07:48,210
found a page that cannot be mapped so

175
00:07:44,190 --> 00:07:50,699
yay we found a bug yeah so the probe

176
00:07:48,210 --> 00:07:53,549
wrapper the one the thing that perhaps

177
00:07:50,699 --> 00:07:55,020
Avatar 2 it'll set a breakpoint the

178
00:07:53,550 --> 00:07:57,719
first time you launch it in the target

179
00:07:55,020 --> 00:07:59,669
and then once the target is hit it dumps

180
00:07:57,719 --> 00:08:00,870
everything that it can already know

181
00:07:59,669 --> 00:08:02,729
about so it doesn't dump the whole

182
00:08:00,870 --> 00:08:05,219
kernel because I would be huge it just

183
00:08:02,729 --> 00:08:07,770
dumps like the current page and the

184
00:08:05,219 --> 00:08:09,810
breakpoints that that we have no break

185
00:08:07,770 --> 00:08:12,990
I'm sorry there param all the registers

186
00:08:09,810 --> 00:08:15,000
that we have and then once the harness

187
00:08:12,990 --> 00:08:17,370
wants something more it still has its

188
00:08:15,000 --> 00:08:19,380
little state in its breakpoint and it'll

189
00:08:17,370 --> 00:08:23,430
just go there and fetch more memory as

190
00:08:19,380 --> 00:08:26,490
we go on on the other side we have the

191
00:08:23,430 --> 00:08:30,090
FL unicorn harness and it'll just you

192
00:08:26,490 --> 00:08:33,419
know fork and fork in Linux is a

193
00:08:30,090 --> 00:08:36,149
copy-on-write things or every page that

194
00:08:33,419 --> 00:08:38,699
we touch that is not changed will just

195
00:08:36,149 --> 00:08:40,828
stay the same so it's pretty quick it's

196
00:08:38,700 --> 00:08:42,240
still a Cisco so it's like still slower

197
00:08:40,828 --> 00:08:44,218
than if you would do something in

198
00:08:42,240 --> 00:08:45,510
process whatever but it's it's actually

199
00:08:44,219 --> 00:08:50,160
pretty pretty quick I'll show you

200
00:08:45,510 --> 00:08:51,959
there's a demo yeah so what would you do

201
00:08:50,160 --> 00:08:53,760
like if you use our tool if you go to

202
00:08:51,959 --> 00:08:57,449
github and download it or first you

203
00:08:53,760 --> 00:08:59,310
download it obviously then you run all

204
00:08:57,450 --> 00:09:01,260
the set of scripts that we have there's

205
00:08:59,310 --> 00:09:03,689
one optional one for debugging and one

206
00:09:01,260 --> 00:09:05,220
optional that you know sets that this

207
00:09:03,690 --> 00:09:08,519
your kernel of

208
00:09:05,220 --> 00:09:10,649
or fuzzing to be quicker and then

209
00:09:08,519 --> 00:09:13,740
there's also some hyper scripts that we

210
00:09:10,649 --> 00:09:16,529
use internally to spawn up a movie aims

211
00:09:13,740 --> 00:09:19,110
to first kernels and then you find a

212
00:09:16,529 --> 00:09:20,790
parser that's like the biggest manual

213
00:09:19,110 --> 00:09:22,649
task there's lots of manual analysis

214
00:09:20,790 --> 00:09:24,599
involved because you don't know where

215
00:09:22,649 --> 00:09:27,089
your parser is it's this huge blob so

216
00:09:24,600 --> 00:09:29,069
you drop this huge kernel into something

217
00:09:27,089 --> 00:09:29,790
and look for something then that looks

218
00:09:29,069 --> 00:09:31,800
like a parser

219
00:09:29,790 --> 00:09:34,920
like it takes input you know where the

220
00:09:31,800 --> 00:09:39,029
input goes to and it like God gets an

221
00:09:34,920 --> 00:09:41,040
output right and then there's a config

222
00:09:39,029 --> 00:09:45,000
for our tool the country needs

223
00:09:41,040 --> 00:09:47,399
where to break and where to stop fuzzing

224
00:09:45,000 --> 00:09:49,740
basically like where the parser are ends

225
00:09:47,399 --> 00:09:51,540
and then there's a function a Python

226
00:09:49,740 --> 00:09:54,870
function that you have to implement that

227
00:09:51,540 --> 00:09:57,149
drops the day the data coming from AFL

228
00:09:54,870 --> 00:09:59,790
into its right position and set the

229
00:09:57,149 --> 00:10:02,459
kernel memory for example for if you

230
00:09:59,790 --> 00:10:05,310
would would first open V switch you

231
00:10:02,459 --> 00:10:08,209
would take the input and then drop it

232
00:10:05,310 --> 00:10:11,040
this is like this really weird setup

233
00:10:08,209 --> 00:10:13,138
because open view switch doesn't take

234
00:10:11,040 --> 00:10:15,000
just a buffer it takes an SK buff which

235
00:10:13,139 --> 00:10:18,660
is an internal Linux kernel structure

236
00:10:15,000 --> 00:10:21,420
for socket buffers and if we would just

237
00:10:18,660 --> 00:10:23,069
drop the input anywhere in this instead

238
00:10:21,420 --> 00:10:24,599
of the SK buff then we would override

239
00:10:23,069 --> 00:10:26,579
all the pointers and they need to be

240
00:10:24,600 --> 00:10:28,800
aligned if we like if we override a

241
00:10:26,579 --> 00:10:30,899
pointer with 0 of course it would crash

242
00:10:28,800 --> 00:10:33,809
but in the real world Linux would never

243
00:10:30,899 --> 00:10:35,430
put a 0 at this pointer address so we

244
00:10:33,809 --> 00:10:38,639
would find loads of false positives so

245
00:10:35,430 --> 00:10:41,069
instead what we do we go and just drop

246
00:10:38,639 --> 00:10:43,529
the data where we actually want to put

247
00:10:41,069 --> 00:10:46,229
use them where the user could also put

248
00:10:43,529 --> 00:10:49,410
data so that we have minimal false

249
00:10:46,230 --> 00:10:52,860
positives and then we start the pro

250
00:10:49,410 --> 00:10:55,139
proper it'll wait it'll set the break

251
00:10:52,860 --> 00:10:57,959
point wait and then once the breakpoint

252
00:10:55,139 --> 00:11:00,449
is hit we can first and then yeah start

253
00:10:57,959 --> 00:11:02,878
a file starts AFL and afterwards we have

254
00:11:00,449 --> 00:11:05,309
a nice debugging setup kind of where you

255
00:11:02,879 --> 00:11:08,009
can and see what happened so let's see

256
00:11:05,309 --> 00:11:10,230
what happened since I just rebooted my

257
00:11:08,009 --> 00:11:12,269
machine let's see if it actually happens

258
00:11:10,230 --> 00:11:16,250
so there's the the virtual machine here

259
00:11:12,269 --> 00:11:16,250
this is inside the virtual machine

260
00:11:16,339 --> 00:11:26,009
it says oh wow it's super small it's a

261
00:11:21,720 --> 00:11:28,889
lot better right I guess sure sorry for

262
00:11:26,009 --> 00:11:32,850
that yep

263
00:11:28,889 --> 00:11:36,720
why is this here I think white

264
00:11:32,850 --> 00:11:40,289
background maybe this one sorry sorry

265
00:11:36,720 --> 00:11:42,509
for that Thanks right so this is a you

266
00:11:40,289 --> 00:11:47,309
know to virtual machine and then this is

267
00:11:42,509 --> 00:11:50,339
still small this is inside our unicorn

268
00:11:47,309 --> 00:11:53,519
thingy and we can look in the config

269
00:11:50,339 --> 00:11:55,229
that we set up so there's you know we

270
00:11:53,519 --> 00:11:58,109
said the architecture we said where the

271
00:11:55,229 --> 00:11:59,729
gdb port lives we just need some

272
00:11:58,109 --> 00:12:01,829
addresses that don't you don't have to

273
00:11:59,729 --> 00:12:03,749
care about these then we set the break

274
00:12:01,829 --> 00:12:06,748
address this is where the harness will

275
00:12:03,749 --> 00:12:09,169
read programmer will break and then we

276
00:12:06,749 --> 00:12:11,429
said where it should stop fuzzing and

277
00:12:09,169 --> 00:12:13,319
then we have an init function that's

278
00:12:11,429 --> 00:12:15,869
called before fuzzing so everything you

279
00:12:13,319 --> 00:12:18,319
can do here is it's called before so

280
00:12:15,869 --> 00:12:21,889
what I did here was I just knocked out

281
00:12:18,319 --> 00:12:30,419
the function at this address which is I

282
00:12:21,889 --> 00:12:32,819
can show you in okay I'll probably that

283
00:12:30,419 --> 00:12:37,289
takes long no well you have to believe

284
00:12:32,819 --> 00:12:38,669
me that this would be K printf so it

285
00:12:37,289 --> 00:12:40,649
just takes forever to just print

286
00:12:38,669 --> 00:12:41,970
something big I don't think it would

287
00:12:40,649 --> 00:12:44,069
ever return because it needs some

288
00:12:41,970 --> 00:12:45,989
console syncing and we don't have

289
00:12:44,069 --> 00:12:49,199
console syncing and in a emulator

290
00:12:45,989 --> 00:12:51,239
there's no interrupts and nothing and

291
00:12:49,199 --> 00:12:54,049
then it this is the place input function

292
00:12:51,239 --> 00:12:57,600
this one is a lot easier this just takes

293
00:12:54,049 --> 00:13:01,499
up to 512 bytes if it's more which is

294
00:12:57,600 --> 00:13:03,509
immediately exit and then we read rd i

295
00:13:01,499 --> 00:13:06,659
which is the parameter that we want to

296
00:13:03,509 --> 00:13:08,399
that's just a buffer and then we map the

297
00:13:06,659 --> 00:13:09,899
page there so we make sure that there's

298
00:13:08,399 --> 00:13:11,909
actually something that we can write to

299
00:13:09,899 --> 00:13:13,499
and then we write the input the input

300
00:13:11,909 --> 00:13:18,269
comes from here and that this is just

301
00:13:13,499 --> 00:13:21,479
called by AFL magic unicorn and then

302
00:13:18,269 --> 00:13:23,519
this is the lengths that we actually

303
00:13:21,479 --> 00:13:26,220
have to set right so the person knows

304
00:13:23,519 --> 00:13:29,399
how much it has to read from that Oh

305
00:13:26,220 --> 00:13:31,610
it'll work pretty well actually did a

306
00:13:29,399 --> 00:13:33,449
copy this

307
00:13:31,610 --> 00:13:36,059
no okay

308
00:13:33,449 --> 00:13:38,998
well it's scarran turf yeah you can I

309
00:13:36,059 --> 00:13:41,999
think it would leave me okay so let's do

310
00:13:38,999 --> 00:13:45,269
the proper this will set a breakpoint

311
00:13:41,999 --> 00:13:51,899
and then we insert this machine we

312
00:13:45,269 --> 00:13:54,689
should start dysfunction and now it just

313
00:13:51,899 --> 00:13:56,819
stops doing things it not it's it's hot

314
00:13:54,689 --> 00:13:59,670
pause now the halted brutal machine and

315
00:13:56,819 --> 00:14:01,349
this guy says okay I'm initially them

316
00:13:59,670 --> 00:14:02,160
complete and listening for requests from

317
00:14:01,350 --> 00:14:06,269
harness pipe

318
00:14:02,160 --> 00:14:08,430
so let's spawn up harness pipe okay

319
00:14:06,269 --> 00:14:10,980
let's spawn up harness pry not this

320
00:14:08,430 --> 00:14:21,540
phone up FL directly let's see what

321
00:14:10,980 --> 00:14:23,220
happens okay so it starts FL and then it

322
00:14:21,540 --> 00:14:25,349
starts buzzing so the I mean some people

323
00:14:23,220 --> 00:14:29,100
may have seen FL before who has seen FL

324
00:14:25,350 --> 00:14:29,730
before sweet so you see that it finds

325
00:14:29,100 --> 00:14:31,649
paths

326
00:14:29,730 --> 00:14:33,990
which means that is actually

327
00:14:31,649 --> 00:14:36,240
instrumented so it did emulator which

328
00:14:33,990 --> 00:14:39,029
reports back if it finds new basic or

329
00:14:36,240 --> 00:14:40,860
jumps between basic box you see that

330
00:14:39,029 --> 00:14:43,379
it's not super fast before I had like

331
00:14:40,860 --> 00:14:47,610
hundreds per second I think we would

332
00:14:43,379 --> 00:14:49,290
broke something or something but you

333
00:14:47,610 --> 00:14:51,360
know it's a really slow laptop that we

334
00:14:49,290 --> 00:14:55,410
face on now and it's probably super hot

335
00:14:51,360 --> 00:14:56,879
out in the Sun it's fine okay so it

336
00:14:55,410 --> 00:15:02,519
starts you know it's crawling it's

337
00:14:56,879 --> 00:15:05,910
looking for new paths and let's see if

338
00:15:02,519 --> 00:15:07,439
it finds something I think it there

339
00:15:05,910 --> 00:15:10,589
should be something to find it's like an

340
00:15:07,439 --> 00:15:12,870
Easter egg hunt but of course it's not

341
00:15:10,589 --> 00:15:15,779
deterministic so it might happen any

342
00:15:12,870 --> 00:15:21,809
time still waiting for me to pass you

343
00:15:15,779 --> 00:15:26,540
know you're in a pass okay new paths

344
00:15:21,809 --> 00:15:26,540
fingers crossed one minute

345
00:15:31,780 --> 00:15:34,900
come on

346
00:15:38,680 --> 00:15:46,430
hmm damn it

347
00:15:42,890 --> 00:15:48,110
oh well that's that's buzzing you know

348
00:15:46,430 --> 00:15:49,790
sometimes you don't find something okay

349
00:15:48,110 --> 00:15:58,400
let's continue as if we would have found

350
00:15:49,790 --> 00:16:07,219
something too bad well I found something

351
00:15:58,400 --> 00:16:10,400
earlier so that's good no that's live

352
00:16:07,220 --> 00:16:12,140
demos okay so um anyway we can continue

353
00:16:10,400 --> 00:16:14,120
as if we would have fun say we would

354
00:16:12,140 --> 00:16:17,810
have found something at this point then

355
00:16:14,120 --> 00:16:22,360
we could do harness prime ministry FL

356
00:16:17,810 --> 00:16:28,280
outputs but see if ant should have reefs

357
00:16:22,360 --> 00:16:31,490
there's no crashes so let's say we

358
00:16:28,280 --> 00:16:34,730
already found something before at the

359
00:16:31,490 --> 00:16:36,650
same plot place and then we can do run

360
00:16:34,730 --> 00:16:39,350
it with minus T which will trace every

361
00:16:36,650 --> 00:16:41,480
single instruction and at the end we

362
00:16:39,350 --> 00:16:43,490
find that it tries to read address zero

363
00:16:41,480 --> 00:16:46,490
and address zero of course cannot be

364
00:16:43,490 --> 00:16:48,110
read so it doesn't work it crashes at

365
00:16:46,490 --> 00:16:49,490
this point which is good which is what

366
00:16:48,110 --> 00:16:51,380
we want that means that Colonel would

367
00:16:49,490 --> 00:16:53,180
also create this place and then we can

368
00:16:51,380 --> 00:16:56,140
do it with minus D which starts the

369
00:16:53,180 --> 00:16:58,550
debugger which is UD debug and it's

370
00:16:56,140 --> 00:17:00,319
specifically written for a unicorn it's

371
00:16:58,550 --> 00:17:02,420
pretty nice it does like all this you

372
00:17:00,320 --> 00:17:04,100
know it looks a bit like like your your

373
00:17:02,420 --> 00:17:05,899
famous favorites

374
00:17:04,099 --> 00:17:07,760
gdb shell you can just step through

375
00:17:05,900 --> 00:17:09,800
every single function and you see all

376
00:17:07,760 --> 00:17:12,950
the registers so if we continue here at

377
00:17:09,800 --> 00:17:15,169
some point it'll show us envelope memory

378
00:17:12,950 --> 00:17:18,620
read you see our redone map so we can

379
00:17:15,170 --> 00:17:22,520
map this thing and we see here the the

380
00:17:18,619 --> 00:17:26,270
function is at this place eight six and

381
00:17:22,520 --> 00:17:30,139
eight six we see there is a move from

382
00:17:26,270 --> 00:17:32,180
the address of array X to EDX and the

383
00:17:30,140 --> 00:17:34,370
address of array X at this place

384
00:17:32,180 --> 00:17:36,920
is zero so there's a null point that it

385
00:17:34,370 --> 00:17:40,159
tries to rebirth so that's a nice bug

386
00:17:36,920 --> 00:17:44,510
that usually if I would have found by

387
00:17:40,160 --> 00:17:46,070
now oh it did nice oh yeah so we just

388
00:17:44,510 --> 00:17:48,770
wait didn't wait long enough so after

389
00:17:46,070 --> 00:17:54,280
two minutes it found the bug again so

390
00:17:48,770 --> 00:17:57,300
that's good cool and then one more thing

391
00:17:54,280 --> 00:18:01,510
just to see that I'm not bullshitting

392
00:17:57,300 --> 00:18:04,180
let's kill this that's the pro Buckeye

393
00:18:01,510 --> 00:18:11,080
so we're back in our little thing here

394
00:18:04,180 --> 00:18:15,460
and now we do this one and and it'll

395
00:18:11,080 --> 00:18:18,340
just reboot and kernel offset it just

396
00:18:15,460 --> 00:18:19,840
panicked so it crashed that's that is

397
00:18:18,340 --> 00:18:22,270
the real Colonel now this is not an

398
00:18:19,840 --> 00:18:25,510
emulator this is just taking the input

399
00:18:22,270 --> 00:18:28,570
from my FL re running it as an actual

400
00:18:25,510 --> 00:18:31,210
net work input to the kernel and then

401
00:18:28,570 --> 00:18:35,710
the kernel crashes at this place cool so

402
00:18:31,210 --> 00:18:37,680
this is your little buck and it works

403
00:18:35,710 --> 00:18:42,700
let's see see you on what else we have

404
00:18:37,680 --> 00:18:44,710
cool so speed as you've seen you all

405
00:18:42,700 --> 00:18:47,620
right ah actually it could be faster

406
00:18:44,710 --> 00:18:49,480
after restart because then the pages are

407
00:18:47,620 --> 00:18:51,850
already there so I'd found a new buck no

408
00:18:49,480 --> 00:18:53,800
it's still only three unique ones this

409
00:18:51,850 --> 00:18:56,050
time it should be fast actually because

410
00:18:53,800 --> 00:18:58,960
the next time around it'll already pre

411
00:18:56,050 --> 00:19:00,870
map before fork all the pages and then

412
00:18:58,960 --> 00:19:02,020
yeah exit speed should be a lot better

413
00:19:00,870 --> 00:19:05,830
okay

414
00:19:02,020 --> 00:19:08,170
now it's like more than four times as as

415
00:19:05,830 --> 00:19:11,980
quick so now we should find the bug in

416
00:19:08,170 --> 00:19:14,290
less than the time anyway yeah we found

417
00:19:11,980 --> 00:19:15,910
isn't one Parsa bug that was an ace in

418
00:19:14,290 --> 00:19:17,470
one part stuff like of course the Linux

419
00:19:15,910 --> 00:19:19,750
says I said one part is also and of

420
00:19:17,470 --> 00:19:24,040
course ice and one is never working so

421
00:19:19,750 --> 00:19:26,230
that broke and yeah the fastest we found

422
00:19:24,040 --> 00:19:29,050
with the proper machine was the fastest

423
00:19:26,230 --> 00:19:31,240
we could was like four times this fast

424
00:19:29,050 --> 00:19:33,820
because my my machine is quick and not

425
00:19:31,240 --> 00:19:36,310
that quick and it's still you know like

426
00:19:33,820 --> 00:19:39,159
ten times slower than proper FL if you

427
00:19:36,310 --> 00:19:40,750
would make report it and then even

428
00:19:39,160 --> 00:19:43,660
slower if you would use something like

429
00:19:40,750 --> 00:19:47,530
lip phaser that would never respawn the

430
00:19:43,660 --> 00:19:49,570
process but it's okay you know problem

431
00:19:47,530 --> 00:19:52,090
is you won't find state-dependent bugs

432
00:19:49,570 --> 00:19:54,490
or something that you need to set up

433
00:19:52,090 --> 00:19:56,169
before you know some sis codes that need

434
00:19:54,490 --> 00:19:58,630
to happen before or something

435
00:19:56,170 --> 00:20:00,790
you won't find these but only under on

436
00:19:58,630 --> 00:20:03,970
the plus side you know there's no timers

437
00:20:00,790 --> 00:20:05,649
race conditions nothing and yeah the

438
00:20:03,970 --> 00:20:06,960
speed could be better and unicorn and

439
00:20:05,650 --> 00:20:10,230
lots of manual harnesses

440
00:20:06,960 --> 00:20:16,590
yeah so unicorn what's where's gia space

441
00:20:10,230 --> 00:20:22,020
stored x86 64 just like a pop quiz to

442
00:20:16,590 --> 00:20:25,980
the crowd anybody yeah cool

443
00:20:22,020 --> 00:20:28,440
so yeah nobody okay so Jesus places the

444
00:20:25,980 --> 00:20:31,590
register and unicorn also doesn't know

445
00:20:28,440 --> 00:20:33,780
or I don't know if they know but you

446
00:20:31,590 --> 00:20:35,070
can't write it directly usually you can

447
00:20:33,780 --> 00:20:36,960
interact pretty well with unicorn in

448
00:20:35,070 --> 00:20:39,659
this case that's why we need to scratch

449
00:20:36,960 --> 00:20:41,310
addresses you need to do a workaround

450
00:20:39,660 --> 00:20:44,150
for everything so there's many things

451
00:20:41,310 --> 00:20:47,399
that unicorn can't do right

452
00:20:44,150 --> 00:20:49,020
hence yeah you know that's also why the

453
00:20:47,400 --> 00:20:51,240
armed target is not done yet because

454
00:20:49,020 --> 00:20:54,000
there's also bugs but it'll happen at

455
00:20:51,240 --> 00:20:56,610
some point the nice things though we can

456
00:20:54,000 --> 00:21:00,930
now first many things that are not

457
00:20:56,610 --> 00:21:03,570
possible easily and we can reproduce the

458
00:21:00,930 --> 00:21:04,620
bugs perfectly because yeah that's

459
00:21:03,570 --> 00:21:06,750
something in Scala

460
00:21:04,620 --> 00:21:09,239
it's kind of hard night they got it now

461
00:21:06,750 --> 00:21:11,610
down but if you have many sis calls and

462
00:21:09,240 --> 00:21:15,150
races and everything it's usually hard

463
00:21:11,610 --> 00:21:19,889
to replay those and it just works now

464
00:21:15,150 --> 00:21:22,350
and then you know future work arm target

465
00:21:19,890 --> 00:21:24,420
myths target and so on so forth also one

466
00:21:22,350 --> 00:21:28,080
thing oh yeah did we find the bug

467
00:21:24,420 --> 00:21:32,160
obviously and one other thing would be

468
00:21:28,080 --> 00:21:34,409
the anger okay it's not in any way if

469
00:21:32,160 --> 00:21:37,200
I'm working on like a symbolic execution

470
00:21:34,410 --> 00:21:40,740
in that thing also that would be nice to

471
00:21:37,200 --> 00:21:42,660
find more paths and so on so forth so it

472
00:21:40,740 --> 00:21:47,010
finds bugs I think I'm already past my

473
00:21:42,660 --> 00:21:51,240
time we did find this denial of service

474
00:21:47,010 --> 00:21:54,480
and summer stuff kernel things speed

475
00:21:51,240 --> 00:21:56,190
could be better could be worse and it's

476
00:21:54,480 --> 00:21:57,990
now open source and you can download it

477
00:21:56,190 --> 00:22:00,940
and run it and try to find your own

478
00:21:57,990 --> 00:22:04,029
kernel bugs so

479
00:22:00,940 --> 00:22:04,029
[Applause]

480
00:22:09,960 --> 00:22:14,559
[Music]

481
00:22:15,470 --> 00:22:17,530
you

