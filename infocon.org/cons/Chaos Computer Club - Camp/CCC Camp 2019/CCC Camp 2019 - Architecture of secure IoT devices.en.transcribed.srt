1
00:00:08,850 --> 00:00:14,320
[Music]

2
00:00:14,450 --> 00:00:22,259
no it's ignorance our next talk is the

3
00:00:19,980 --> 00:00:26,250
title architecture of secure IOT devices

4
00:00:22,259 --> 00:00:27,960
security by design our speaker Freiburg

5
00:00:26,250 --> 00:00:30,140
will talk about all the different steps

6
00:00:27,960 --> 00:00:33,329
technologies and methods that you shall

7
00:00:30,140 --> 00:00:34,980
apply and that will help you to build a

8
00:00:33,329 --> 00:00:41,040
secure by design

9
00:00:34,980 --> 00:00:42,599
device or system Freiburg is a free

10
00:00:41,040 --> 00:00:45,629
dancing software developer

11
00:00:42,600 --> 00:00:49,800
with quite a bit of experience in the

12
00:00:45,629 --> 00:00:52,940
field of security yeah please welcome

13
00:00:49,800 --> 00:00:52,940
the you Tron of applause

14
00:00:58,640 --> 00:01:04,140
hello okay

15
00:01:01,260 --> 00:01:07,860
welcome to everybody to the presentation

16
00:01:04,140 --> 00:01:11,060
architect of secure IOT devices so I've

17
00:01:07,860 --> 00:01:16,740
been introduced already so I skip this

18
00:01:11,060 --> 00:01:19,830
their intended audience is our current

19
00:01:16,740 --> 00:01:22,770
users of Raspberry Pi and who might be

20
00:01:19,830 --> 00:01:26,220
interested in or thinking about how

21
00:01:22,770 --> 00:01:29,910
could I achieve to get a secure IOT

22
00:01:26,220 --> 00:01:33,720
system so what what's necessary to get

23
00:01:29,910 --> 00:01:35,580
to the next level and I've got I'm sorry

24
00:01:33,720 --> 00:01:37,080
to tell you that the first step you've

25
00:01:35,580 --> 00:01:39,690
got to do is to you have got to switch

26
00:01:37,080 --> 00:01:41,910
the hardware because the Raspberry Pi

27
00:01:39,690 --> 00:01:44,369
will not be sufficient or the right

28
00:01:41,910 --> 00:01:46,080
hardware to to implement this

29
00:01:44,369 --> 00:01:49,530
functionality of this architecture I'm

30
00:01:46,080 --> 00:01:53,970
presenting here so what you need is an

31
00:01:49,530 --> 00:01:58,820
XP I make sex or and a new version of

32
00:01:53,970 --> 00:02:02,490
the NXP processor family arm cortex a7

33
00:01:58,820 --> 00:02:05,610
and it has usual features of this this

34
00:02:02,490 --> 00:02:08,579
portal bit over ten or hundred mega

35
00:02:05,610 --> 00:02:13,530
megabits per second Ethernet USB to

36
00:02:08,580 --> 00:02:16,530
serial devices I to see current GPS and

37
00:02:13,530 --> 00:02:19,530
the important factors secure jtech

38
00:02:16,530 --> 00:02:21,930
efuses again so that that's these are

39
00:02:19,530 --> 00:02:26,940
the aspects that allow us to implement a

40
00:02:21,930 --> 00:02:28,950
secure IOT device we will talk later

41
00:02:26,940 --> 00:02:32,300
about what is the security device we

42
00:02:28,950 --> 00:02:35,790
will have a look at a small example and

43
00:02:32,300 --> 00:02:39,090
discuss so what our requirements what

44
00:02:35,790 --> 00:02:40,410
are our what do we want to achieve we

45
00:02:39,090 --> 00:02:43,650
will talk a bit a little bit about the

46
00:02:40,410 --> 00:02:46,920
risk and threats how do we achieve a

47
00:02:43,650 --> 00:02:50,520
secure boot on our I mix encrypted

48
00:02:46,920 --> 00:02:53,940
partitions and additional isolation

49
00:02:50,520 --> 00:02:57,240
checked into techniques to separate

50
00:02:53,940 --> 00:02:58,380
applications from each other we will

51
00:02:57,240 --> 00:03:01,770
talk about a little bit about

52
00:02:58,380 --> 00:03:05,310
organization so if you are in a company

53
00:03:01,770 --> 00:03:10,140
and you start to set up an a secure IT

54
00:03:05,310 --> 00:03:12,900
system first you will start to implement

55
00:03:10,140 --> 00:03:15,239
your PKI and as a development team and

56
00:03:12,900 --> 00:03:17,460
so on and then later you ask yourself ok

57
00:03:15,240 --> 00:03:20,130
who is responsible now for the pika-pika

58
00:03:17,460 --> 00:03:22,560
ice infrastructure so who will manage it

59
00:03:20,130 --> 00:03:26,480
it's not a developer so it should be IT

60
00:03:22,560 --> 00:03:30,690
service in your in your company and this

61
00:03:26,480 --> 00:03:32,790
this so having this thought there are

62
00:03:30,690 --> 00:03:35,520
some organizational aspects you we have

63
00:03:32,790 --> 00:03:38,280
got to talk about so we will have a

64
00:03:35,520 --> 00:03:41,670
short very or simple example we will

65
00:03:38,280 --> 00:03:46,100
have our example as a charging station

66
00:03:41,670 --> 00:03:49,380
and here

67
00:03:46,100 --> 00:03:52,290
that's the charging station and it's

68
00:03:49,380 --> 00:03:57,350
used to charge a car or it can interact

69
00:03:52,290 --> 00:03:59,940
with an RFID card and it's connected to

70
00:03:57,350 --> 00:04:00,870
to the operator to the data center of

71
00:03:59,940 --> 00:04:03,900
the operator

72
00:04:00,870 --> 00:04:06,090
it received system updates it sends it

73
00:04:03,900 --> 00:04:09,630
receives control messages it's sending

74
00:04:06,090 --> 00:04:12,240
up data so the data could be the amount

75
00:04:09,630 --> 00:04:15,299
that has been charged by a car and so on

76
00:04:12,240 --> 00:04:19,950
so important for billing so quite

77
00:04:15,300 --> 00:04:24,180
important data we can split this apart

78
00:04:19,950 --> 00:04:28,520
into four stages send sensor actuators

79
00:04:24,180 --> 00:04:32,850
their Internet gateways oops

80
00:04:28,520 --> 00:04:35,070
Internet gateways we have got a chai tea

81
00:04:32,850 --> 00:04:40,169
in our case we don't have any a chai tea

82
00:04:35,070 --> 00:04:47,400
and the data center cloud this one here

83
00:04:40,169 --> 00:04:49,539
is our device which is connected to the

84
00:04:47,400 --> 00:04:59,200
car using

85
00:04:49,540 --> 00:05:01,620
into sensors and so encrypting the data

86
00:04:59,200 --> 00:05:09,219
and sending it over to the data center

87
00:05:01,620 --> 00:05:11,920
we also have some technician working on

88
00:05:09,220 --> 00:05:14,650
the spot and configuring the system

89
00:05:11,920 --> 00:05:21,120
locally so we need some kind of secure

90
00:05:14,650 --> 00:05:25,150
connection to our device we need secure

91
00:05:21,120 --> 00:05:29,400
system update transport let's assume we

92
00:05:25,150 --> 00:05:32,469
use HTTPS we need a remote control

93
00:05:29,400 --> 00:05:35,950
connection that could be HTTPS or it

94
00:05:32,470 --> 00:05:39,220
could be a SSH and we've gotten data

95
00:05:35,950 --> 00:05:42,430
upload using HTTP but it could be also

96
00:05:39,220 --> 00:05:47,970
kind of VPN network we've got a local

97
00:05:42,430 --> 00:05:51,790
database here storing all local data and

98
00:05:47,970 --> 00:05:55,900
for visualization and being uploaded to

99
00:05:51,790 --> 00:05:59,820
the data center on this side on the data

100
00:05:55,900 --> 00:06:03,630
center side we've got an update service

101
00:05:59,820 --> 00:06:07,900
some facility receiving the data uploads

102
00:06:03,630 --> 00:06:13,900
pka infrastructure some kind of oops

103
00:06:07,900 --> 00:06:16,169
some kind of and kind of DNS so when we

104
00:06:13,900 --> 00:06:21,340
analyze the risk now there are some

105
00:06:16,170 --> 00:06:23,980
methodologies that should be used and so

106
00:06:21,340 --> 00:06:27,219
there was the PSI 100 standard or the

107
00:06:23,980 --> 00:06:34,969
ISO 227

108
00:06:27,219 --> 00:06:39,289
0z 27,000 and so important factors all

109
00:06:34,969 --> 00:06:44,060
so they define a process how you analyze

110
00:06:39,289 --> 00:06:46,789
certain risks and threats and it's also

111
00:06:44,060 --> 00:06:50,090
important so the PSI standard defines

112
00:06:46,789 --> 00:06:53,120
the important point where to shoot speed

113
00:06:50,090 --> 00:06:57,438
of an old theatre confidentiality

114
00:06:53,120 --> 00:07:03,020
integrity and availability so these

115
00:06:57,439 --> 00:07:08,270
three aspects will be our so our targets

116
00:07:03,020 --> 00:07:11,599
we want to achieve here so there was one

117
00:07:08,270 --> 00:07:14,000
mantra so security cannot be increased

118
00:07:11,599 --> 00:07:16,400
an afterthought so we have got to think

119
00:07:14,000 --> 00:07:19,550
about security from the beginning we

120
00:07:16,400 --> 00:07:23,179
cannot develop a system and attach

121
00:07:19,550 --> 00:07:25,909
security later so we have got it sits in

122
00:07:23,180 --> 00:07:29,120
our must be in our system from from the

123
00:07:25,909 --> 00:07:31,969
first start up influences device boot

124
00:07:29,120 --> 00:07:36,110
chimes file system performance firmware

125
00:07:31,969 --> 00:07:42,069
upgrade processes and so if we if we go

126
00:07:36,110 --> 00:07:45,740
back to our example so we have got this

127
00:07:42,069 --> 00:07:49,180
system update being transferred from our

128
00:07:45,740 --> 00:07:52,849
data center or from portal to our device

129
00:07:49,180 --> 00:07:54,770
so in here we would need some usually

130
00:07:52,849 --> 00:07:56,270
abuse or authentication so we need a

131
00:07:54,770 --> 00:08:00,289
client certificate we need the server

132
00:07:56,270 --> 00:08:04,188
certificate talking about remote control

133
00:08:00,289 --> 00:08:06,830
again so we need a client certificate

134
00:08:04,189 --> 00:08:09,409
connecting to the to the target to the

135
00:08:06,830 --> 00:08:12,740
device and we need a server certificate

136
00:08:09,409 --> 00:08:16,669
on the device for data uploads might be

137
00:08:12,740 --> 00:08:18,379
VPN so we needed we need we meet user

138
00:08:16,669 --> 00:08:20,419
authentication we need client

139
00:08:18,379 --> 00:08:23,839
certificates a server sort of the earth

140
00:08:20,419 --> 00:08:27,349
certificates we've got the database so

141
00:08:23,839 --> 00:08:31,000
database should be encrypted and as you

142
00:08:27,349 --> 00:08:36,159
see here so it's full of security and

143
00:08:31,000 --> 00:08:40,539
requirements for cryptographic items

144
00:08:36,159 --> 00:08:40,539
credentials you name it

145
00:08:40,950 --> 00:08:48,850
we will talk about few spits also we

146
00:08:44,620 --> 00:08:54,910
will talk about secure boot and code

147
00:08:48,850 --> 00:09:01,779
signing and maybe some words about DNS

148
00:08:54,910 --> 00:09:04,689
SEC trust anchor so having a look at the

149
00:09:01,779 --> 00:09:08,920
organization of your company so you

150
00:09:04,690 --> 00:09:11,560
might have so it's a bit I did it with

151
00:09:08,920 --> 00:09:14,670
another tool so it's not it's not as far

152
00:09:11,560 --> 00:09:16,930
as it looked before before use computer

153
00:09:14,670 --> 00:09:20,560
so we've got the development department

154
00:09:16,930 --> 00:09:26,709
here developing or implementing some

155
00:09:20,560 --> 00:09:31,239
code and to exit or to to to realize

156
00:09:26,710 --> 00:09:33,970
some kind of secure boot this code must

157
00:09:31,240 --> 00:09:36,490
be signed so we need some mechanism to

158
00:09:33,970 --> 00:09:38,500
sign the code could be used it could be

159
00:09:36,490 --> 00:09:41,650
done within the development center or

160
00:09:38,500 --> 00:09:44,230
development team but if we do so the

161
00:09:41,650 --> 00:09:46,959
development team team is responsible to

162
00:09:44,230 --> 00:09:49,720
keep these data secret and it's the most

163
00:09:46,959 --> 00:09:53,410
important data of the company so if this

164
00:09:49,720 --> 00:09:56,260
data gets lost anybody could compile

165
00:09:53,410 --> 00:09:59,500
code and sign it with those credentials

166
00:09:56,260 --> 00:10:02,470
and deploy it on the hardware so this is

167
00:09:59,500 --> 00:10:05,110
the most important aspect of a secure

168
00:10:02,470 --> 00:10:08,560
system that these credentials are kept

169
00:10:05,110 --> 00:10:10,240
very secret so we knew we should

170
00:10:08,560 --> 00:10:13,410
establish some kind of code signing

171
00:10:10,240 --> 00:10:15,550
service within the company so sending so

172
00:10:13,410 --> 00:10:17,800
authenticate so developers are

173
00:10:15,550 --> 00:10:19,719
authenticating against service maybe

174
00:10:17,800 --> 00:10:22,510
with the username password or maybe with

175
00:10:19,720 --> 00:10:25,270
a some kind of cryptographic credentials

176
00:10:22,510 --> 00:10:30,839
to get access to the code signing a

177
00:10:25,270 --> 00:10:35,230
service so we need we also need

178
00:10:30,839 --> 00:10:38,589
credentials credentials keys that are

179
00:10:35,230 --> 00:10:43,060
stored on the target during when we

180
00:10:38,589 --> 00:10:47,980
during production when we commissioned

181
00:10:43,060 --> 00:10:50,400
the device and send it out for delivery

182
00:10:47,980 --> 00:10:54,280
the Operations Support and incident

183
00:10:50,400 --> 00:10:58,209
response team needs keys to access the

184
00:10:54,280 --> 00:11:00,939
devices so again so it's all around in

185
00:10:58,210 --> 00:11:03,370
your company suddenly a requirement for

186
00:11:00,940 --> 00:11:06,400
security credence to curity items pop up

187
00:11:03,370 --> 00:11:11,200
and you need within your company some

188
00:11:06,400 --> 00:11:16,000
kind of understanding and support to get

189
00:11:11,200 --> 00:11:23,320
this these services delivered by the IT

190
00:11:16,000 --> 00:11:26,800
service department so important steps

191
00:11:23,320 --> 00:11:27,700
also to choose the right hardware so

192
00:11:26,800 --> 00:11:31,089
this case

193
00:11:27,700 --> 00:11:35,260
so if experience with this NXP I am xx

194
00:11:31,090 --> 00:11:40,180
ultralight it's an ARM Cortex it has 250

195
00:11:35,260 --> 00:11:43,000
megabytes its folk ik flash memory it

196
00:11:40,180 --> 00:11:47,530
has an industrial-grade it's operating a

197
00:11:43,000 --> 00:11:50,140
wide range of temperature and so it's

198
00:11:47,530 --> 00:11:53,459
offered by the company cow and this

199
00:11:50,140 --> 00:11:53,460
company also offers

200
00:11:53,709 --> 00:12:01,118
more performant devices but this device

201
00:11:56,439 --> 00:12:05,920
is sufficient for our need as a set that

202
00:12:01,119 --> 00:12:09,970
has usual features internet USB zero

203
00:12:05,920 --> 00:12:12,660
device can GPIO and the important the

204
00:12:09,970 --> 00:12:17,319
important aspects are the secure tech

205
00:12:12,660 --> 00:12:21,610
effuse and this can cryptographic as

206
00:12:17,319 --> 00:12:25,089
accelerator assurance module so let's

207
00:12:21,610 --> 00:12:30,369
have a look how there is these

208
00:12:25,089 --> 00:12:34,480
functionalities work together we want to

209
00:12:30,369 --> 00:12:37,449
establish an secure boot why so we want

210
00:12:34,480 --> 00:12:42,550
to make sure that nobody else will be

211
00:12:37,449 --> 00:12:52,050
able to start code on our device except

212
00:12:42,550 --> 00:12:52,050
our code so to to enforce this we can

213
00:12:53,220 --> 00:13:00,509
set our code some views bits in our in

214
00:12:56,980 --> 00:13:03,670
our processor but these are called

215
00:13:00,509 --> 00:13:06,399
one-time programming so once they are

216
00:13:03,670 --> 00:13:10,870
set you can't modify them anymore they

217
00:13:06,399 --> 00:13:12,999
are burned into into your processor what

218
00:13:10,870 --> 00:13:16,360
you on what is burned into your

219
00:13:12,999 --> 00:13:19,720
processor is the hash value of of your

220
00:13:16,360 --> 00:13:22,420
public key of a public key we'll see

221
00:13:19,720 --> 00:13:24,850
later how it is used but these these

222
00:13:22,420 --> 00:13:27,790
hash values are just how the trust

223
00:13:24,850 --> 00:13:31,240
anchor of your public key and the public

224
00:13:27,790 --> 00:13:35,410
key will be used to verify signature

225
00:13:31,240 --> 00:13:38,740
attached to your code this is the

226
00:13:35,410 --> 00:13:43,240
signature this is the bootloader

227
00:13:38,740 --> 00:13:47,499
and interesting aspect is the public key

228
00:13:43,240 --> 00:13:53,049
is also attached to to your code it will

229
00:13:47,499 --> 00:13:54,990
be the whole image will be loaded by by

230
00:13:53,049 --> 00:13:58,480
the initial bootloader

231
00:13:54,990 --> 00:14:00,910
it will extract the public key it will

232
00:13:58,480 --> 00:14:02,709
hash the public key it will verify that

233
00:14:00,910 --> 00:14:05,740
the properly the head of the public key

234
00:14:02,709 --> 00:14:12,160
matches the hash values burned into the

235
00:14:05,740 --> 00:14:17,019
CPU and if this is fine the public key

236
00:14:12,160 --> 00:14:19,449
will be used to to decrypt the signature

237
00:14:17,019 --> 00:14:24,549
that the decrypted signature will be

238
00:14:19,449 --> 00:14:27,240
compared to a newly computed signature

239
00:14:24,549 --> 00:14:38,610
of the bootloader image a bootloader

240
00:14:27,240 --> 00:14:42,850
execution code executable code T so if

241
00:14:38,610 --> 00:14:47,319
public key or signature do not match the

242
00:14:42,850 --> 00:14:50,319
CPU will not start up this code and will

243
00:14:47,319 --> 00:14:51,870
do so will just freeze nothing will

244
00:14:50,319 --> 00:14:56,860
happen

245
00:14:51,870 --> 00:15:00,149
so the process to create this sign

246
00:14:56,860 --> 00:15:06,579
bootloader is you start with your

247
00:15:00,149 --> 00:15:10,509
bootloader boot you compute the hash you

248
00:15:06,579 --> 00:15:14,199
take a private key and the private key

249
00:15:10,509 --> 00:15:16,360
will sign the hash and the hash and when

250
00:15:14,199 --> 00:15:20,140
you run your ship your software the

251
00:15:16,360 --> 00:15:24,040
signature is attached to the bootloader

252
00:15:20,140 --> 00:15:25,720
so this is how a secure boot or as as

253
00:15:24,040 --> 00:15:30,130
it's called and December of the high

254
00:15:25,720 --> 00:15:34,740
insurance boot it's working so this is a

255
00:15:30,130 --> 00:15:39,310
example how we can make use of this

256
00:15:34,740 --> 00:15:42,490
mechanism to establish a chain of trust

257
00:15:39,310 --> 00:15:47,649
during the if you would face to have got

258
00:15:42,490 --> 00:15:50,440
there the wrong secondary or second

259
00:15:47,649 --> 00:15:53,200
program loader or there are multiple

260
00:15:50,440 --> 00:15:58,600
names for this and the second program

261
00:15:53,200 --> 00:16:00,870
loader is performing exactly the step we

262
00:15:58,600 --> 00:16:04,360
analyzed before we had to look at before

263
00:16:00,870 --> 00:16:06,850
so it's reading reading the boot image

264
00:16:04,360 --> 00:16:09,459
the bootloader and verifying the

265
00:16:06,850 --> 00:16:12,160
signature if the signature is find the

266
00:16:09,459 --> 00:16:16,810
bootloader will be started and the

267
00:16:12,160 --> 00:16:19,779
bootloader itself now Ubud will read the

268
00:16:16,810 --> 00:16:21,760
the kernel image will verify the kernel

269
00:16:19,779 --> 00:16:25,540
in the signature of the kernel image and

270
00:16:21,760 --> 00:16:29,170
it's using the same mechanism the CAAM

271
00:16:25,540 --> 00:16:33,910
mechanism we used before to verify the

272
00:16:29,170 --> 00:16:36,610
blue board this step the keys are locked

273
00:16:33,910 --> 00:16:43,420
so it's not possible to use any other

274
00:16:36,610 --> 00:16:46,360
key no and also once the kernel kernel

275
00:16:43,420 --> 00:16:50,800
has been verified we can also verify the

276
00:16:46,360 --> 00:16:53,620
root filesystem the root filesystem if

277
00:16:50,800 --> 00:16:56,800
you compile it with doctor so it's maybe

278
00:16:53,620 --> 00:17:01,089
10 or 10 min or so minimum size 10 min

279
00:16:56,800 --> 00:17:05,500
10 megabyte if you use a minimum or a

280
00:17:01,089 --> 00:17:10,809
small Debian setup so you can reach 1 on

281
00:17:05,500 --> 00:17:15,910
a 20 megabyte but still so it's it's a

282
00:17:10,809 --> 00:17:20,260
very fast process important note here is

283
00:17:15,910 --> 00:17:23,370
that would support some kind of some

284
00:17:20,260 --> 00:17:23,369
kind of external

285
00:17:24,579 --> 00:17:29,090
elements or items

286
00:17:26,270 --> 00:17:31,970
Ubud has something called environment

287
00:17:29,090 --> 00:17:35,059
the environment is stored on the disk as

288
00:17:31,970 --> 00:17:38,510
a text file it can be read it can be

289
00:17:35,059 --> 00:17:41,149
written so we must make sure that nobody

290
00:17:38,510 --> 00:17:44,809
is able to write something into this

291
00:17:41,150 --> 00:17:50,720
environment text file so and we and we

292
00:17:44,809 --> 00:17:52,670
we make sure by integrating or embedding

293
00:17:50,720 --> 00:17:56,780
this environment file into the Ubud

294
00:17:52,670 --> 00:18:00,080
image also the the the device tree of

295
00:17:56,780 --> 00:18:02,570
linux so usually it's externally it's

296
00:18:00,080 --> 00:18:05,059
stored on the Devon the image so we want

297
00:18:02,570 --> 00:18:09,649
to make sure that nobody is able to

298
00:18:05,059 --> 00:18:13,399
modify this device tree so again we have

299
00:18:09,650 --> 00:18:15,770
got to integrate it into the water the

300
00:18:13,400 --> 00:18:18,260
device tree later will be handed over to

301
00:18:15,770 --> 00:18:21,620
the kernel so the kernel will read a

302
00:18:18,260 --> 00:18:25,129
verified device tree nobody was able to

303
00:18:21,620 --> 00:18:29,360
modify it so this way we get we get a

304
00:18:25,130 --> 00:18:34,220
very you get to trust of chain starting

305
00:18:29,360 --> 00:18:36,320
up our system and nobody will be as long

306
00:18:34,220 --> 00:18:40,100
as nobody gets access to the code

307
00:18:36,320 --> 00:18:42,320
signing keys nobody will be able or

308
00:18:40,100 --> 00:18:46,159
anybody will be able to to start any

309
00:18:42,320 --> 00:18:48,470
code on our device on our hardware this

310
00:18:46,160 --> 00:18:50,900
is important because the next step will

311
00:18:48,470 --> 00:18:54,200
have a look at how we establish some

312
00:18:50,900 --> 00:19:00,140
kind of encrypted file system or on this

313
00:18:54,200 --> 00:19:03,920
target so once we started our system so

314
00:19:00,140 --> 00:19:06,650
we have got to remember the root

315
00:19:03,920 --> 00:19:09,190
filesystem has been signed so we will

316
00:19:06,650 --> 00:19:11,929
not be able or we should never ever

317
00:19:09,190 --> 00:19:14,990
modify our root filesystem because this

318
00:19:11,929 --> 00:19:17,690
would modify the hash value of this root

319
00:19:14,990 --> 00:19:19,640
filesystem so we are not able to store

320
00:19:17,690 --> 00:19:21,290
anything in our root filesystem we've

321
00:19:19,640 --> 00:19:24,440
got to establish some kind of other

322
00:19:21,290 --> 00:19:30,190
mechanism to store data that should

323
00:19:24,440 --> 00:19:33,170
survive a reboot but on the other side

324
00:19:30,190 --> 00:19:36,420
some applications expect that they are

325
00:19:33,170 --> 00:19:39,180
able to write into the /et seed

326
00:19:36,420 --> 00:19:44,280
so for this case we establish some kind

327
00:19:39,180 --> 00:19:48,620
of overlay for orifices for a read-only

328
00:19:44,280 --> 00:19:52,800
file systems so having these overlays

329
00:19:48,620 --> 00:19:56,699
the the applications will be able to

330
00:19:52,800 --> 00:20:01,560
store Paulito data in the in the EGC

331
00:19:56,700 --> 00:20:05,550
directory but on reboot those data will

332
00:20:01,560 --> 00:20:07,919
be lost now we need to establish some

333
00:20:05,550 --> 00:20:11,550
kind of encrypted storage or secure

334
00:20:07,920 --> 00:20:14,040
storage we are able to modify and to to

335
00:20:11,550 --> 00:20:14,669
store a certain configuration data into

336
00:20:14,040 --> 00:20:18,720
sorry

337
00:20:14,670 --> 00:20:23,250
here we use another feature of the imx6

338
00:20:18,720 --> 00:20:27,270
CPU it's called the master keys CA a

339
00:20:23,250 --> 00:20:30,390
master key so here the kernel itself has

340
00:20:27,270 --> 00:20:33,270
an adapter to interact with the CA a

341
00:20:30,390 --> 00:20:37,430
master key and encryption functionality

342
00:20:33,270 --> 00:20:42,180
around this master key so we are able to

343
00:20:37,430 --> 00:20:44,930
recruit a tooth to encrypt and decrypt a

344
00:20:42,180 --> 00:20:49,680
key broke and the key block could be

345
00:20:44,930 --> 00:20:52,910
could be a key storage and this key

346
00:20:49,680 --> 00:20:58,560
storage is used by the disk mapper

347
00:20:52,910 --> 00:20:59,760
device mapper daemon to initialize the

348
00:20:58,560 --> 00:21:00,889
device mapper for an encrypted

349
00:20:59,760 --> 00:21:05,520
filesystem

350
00:21:00,890 --> 00:21:09,930
so I see there are two two important

351
00:21:05,520 --> 00:21:12,360
aspects to establish Qi 3 system its

352
00:21:09,930 --> 00:21:16,140
first of all the the trust of chain of

353
00:21:12,360 --> 00:21:20,100
the bootloader and the encrypted storage

354
00:21:16,140 --> 00:21:29,850
and also the over the overlay file

355
00:21:20,100 --> 00:21:33,419
systems so when so everything everything

356
00:21:29,850 --> 00:21:36,830
starts with with the fuse bits we set in

357
00:21:33,420 --> 00:21:36,830
our CPU

358
00:21:36,940 --> 00:21:43,790
these fuse bits are set in very early

359
00:21:40,180 --> 00:21:46,700
production process so when we order some

360
00:21:43,790 --> 00:21:49,550
boards at carlow these boards are

361
00:21:46,700 --> 00:21:52,790
delivered with those few bits already

362
00:21:49,550 --> 00:21:56,120
set beside fuse bits we all also

363
00:21:52,790 --> 00:21:59,180
deactivate jtech will deactivate other

364
00:21:56,120 --> 00:22:03,409
devices we deactivate booting from

365
00:21:59,180 --> 00:22:07,610
external devices so a lot of fuses has

366
00:22:03,410 --> 00:22:11,000
been set in terms of security and also

367
00:22:07,610 --> 00:22:17,300
these hashes and fuses to to set the

368
00:22:11,000 --> 00:22:19,970
hashes so that that means over the

369
00:22:17,300 --> 00:22:23,680
complete production cycle we are not

370
00:22:19,970 --> 00:22:28,820
able to start any other turn on signed

371
00:22:23,680 --> 00:22:32,260
boot loaders or kernels so for in every

372
00:22:28,820 --> 00:22:36,100
phase we have got to think about

373
00:22:32,260 --> 00:22:36,100
providing providing

374
00:22:36,510 --> 00:22:42,640
the right boot loader for this

375
00:22:39,220 --> 00:22:44,950
production face with the correct or

376
00:22:42,640 --> 00:22:46,810
whether the required functionality in

377
00:22:44,950 --> 00:22:49,650
Colonel the required functionality in

378
00:22:46,810 --> 00:22:53,710
rudaba's so it's not only that we add

379
00:22:49,650 --> 00:22:55,710
security before we ship our product we

380
00:22:53,710 --> 00:23:00,730
have got to deal with security issues

381
00:22:55,710 --> 00:23:02,410
during the complete production cycle so

382
00:23:00,730 --> 00:23:05,920
from starting from manufacturing the

383
00:23:02,410 --> 00:23:10,150
module assembly putting together all the

384
00:23:05,920 --> 00:23:15,340
parts at attaching the battery attaching

385
00:23:10,150 --> 00:23:18,460
sensors commissioned face so setting the

386
00:23:15,340 --> 00:23:22,780
serial number and then delivering and

387
00:23:18,460 --> 00:23:26,200
setting up on the spot and during

388
00:23:22,780 --> 00:23:30,700
operations it's also important to talk

389
00:23:26,200 --> 00:23:34,720
about the software updates so it's not

390
00:23:30,700 --> 00:23:37,930
possible to to to use any functionality

391
00:23:34,720 --> 00:23:39,970
like apt Debian Debian Debian package

392
00:23:37,930 --> 00:23:44,580
updates or whatever so we've got to

393
00:23:39,970 --> 00:23:44,580
update our images completely

394
00:23:47,360 --> 00:23:50,399
[Music]

395
00:23:51,470 --> 00:23:54,039
yeah

396
00:23:58,480 --> 00:24:06,930
I talked about I talked about the

397
00:24:02,070 --> 00:24:13,810
requirement for PKI credentials that

398
00:24:06,930 --> 00:24:17,110
will cover the code signing with remote

399
00:24:13,810 --> 00:24:23,050
control update services signing update

400
00:24:17,110 --> 00:24:25,600
packages so for all these features and

401
00:24:23,050 --> 00:24:31,960
tasks we need some kind of credentials

402
00:24:25,600 --> 00:24:35,020
the guy credentials and so there are

403
00:24:31,960 --> 00:24:39,070
multiple choices you could do to

404
00:24:35,020 --> 00:24:41,830
establish a CA or Peter infrastructure

405
00:24:39,070 --> 00:24:46,600
in your company so you could use let's

406
00:24:41,830 --> 00:24:50,760
encrypt for example but let's encrypt

407
00:24:46,600 --> 00:24:58,899
does not cover code signing certificates

408
00:24:50,760 --> 00:25:02,550
and those code signing is its if you

409
00:24:58,900 --> 00:25:08,250
look into into this into the scripts and

410
00:25:02,550 --> 00:25:12,190
some of those code signing tools they

411
00:25:08,250 --> 00:25:16,090
generate keys using open cell but

412
00:25:12,190 --> 00:25:19,419
afterwards they modified and they are

413
00:25:16,090 --> 00:25:21,100
bundled together and so they they

414
00:25:19,419 --> 00:25:22,809
require certain structure so let's

415
00:25:21,100 --> 00:25:26,199
encrypt will not cover this

416
00:25:22,809 --> 00:25:29,289
functionality also let's encrypt will

417
00:25:26,200 --> 00:25:33,970
not be the right choice if you have got

418
00:25:29,289 --> 00:25:36,370
IOT devices located in some kind of home

419
00:25:33,970 --> 00:25:40,330
area networks let's encrypt will never

420
00:25:36,370 --> 00:25:43,979
issue a certificate to you for for

421
00:25:40,330 --> 00:25:47,049
device located in homeland network

422
00:25:43,980 --> 00:25:55,750
assume either some fritz box or whatever

423
00:25:47,049 --> 00:25:57,760
some DSL router badly managed and so the

424
00:25:55,750 --> 00:26:00,399
let's encrypt would not be able to

425
00:25:57,760 --> 00:26:04,779
verify if this domain belongs to this

426
00:26:00,399 --> 00:26:07,120
user so it's it's only of limited use

427
00:26:04,779 --> 00:26:11,770
let's encrypt so you could use self

428
00:26:07,120 --> 00:26:14,969
hosted cryptid PGI PPI so with a few so

429
00:26:11,770 --> 00:26:18,700
optimizes L is able to generate and to

430
00:26:14,970 --> 00:26:21,340
generate certificates keys and create

431
00:26:18,700 --> 00:26:26,230
certificates services it could be used

432
00:26:21,340 --> 00:26:31,779
to realize complete LCA in hosted in

433
00:26:26,230 --> 00:26:33,700
your company so but it requires a some

434
00:26:31,779 --> 00:26:37,750
kind of understanding what the process

435
00:26:33,700 --> 00:26:39,159
is doing what is good for and it will

436
00:26:37,750 --> 00:26:43,500
cross a lot of knowledge

437
00:26:39,159 --> 00:26:46,720
most companies might not have internally

438
00:26:43,500 --> 00:26:49,419
so you could use a self host to PK I

439
00:26:46,720 --> 00:26:52,659
being managed by some professional

440
00:26:49,419 --> 00:26:56,200
service provider like MSM a Server and

441
00:26:52,659 --> 00:26:59,290
Microsoft server but this this is a very

442
00:26:56,200 --> 00:27:01,990
costly solution so

443
00:26:59,290 --> 00:27:05,520
in this case every every Microsoft

444
00:27:01,990 --> 00:27:10,450
server can deal only with a single CA

445
00:27:05,520 --> 00:27:12,429
that's and so if you need a number of

446
00:27:10,450 --> 00:27:14,020
CAS you end up with a lot of Microsoft

447
00:27:12,429 --> 00:27:18,820
servers you've got to manage your hosts

448
00:27:14,020 --> 00:27:26,790
and so it's then you have got to deal

449
00:27:18,820 --> 00:27:30,250
with online certificate status protocol

450
00:27:26,790 --> 00:27:32,860
services and so on so it's quite complex

451
00:27:30,250 --> 00:27:35,440
so what's interesting is so what I came

452
00:27:32,860 --> 00:27:38,559
across recently as some kind of service

453
00:27:35,440 --> 00:27:40,169
PKS service offered by a nexus group I'm

454
00:27:38,559 --> 00:27:47,610
not sure they they offered already

455
00:27:40,169 --> 00:27:51,429
publicly but this is I think it's a good

456
00:27:47,610 --> 00:27:55,418
it's in between so it's you you

457
00:27:51,429 --> 00:27:57,429
outsource the management of the PKI but

458
00:27:55,419 --> 00:27:59,530
you still you've got full control of

459
00:27:57,429 --> 00:28:02,919
your PGI and can do whatever you want

460
00:27:59,530 --> 00:28:07,780
and issue certificates for forever for

461
00:28:02,919 --> 00:28:11,230
any region you want talking about

462
00:28:07,780 --> 00:28:13,418
picasso's you need OCS peel on and

463
00:28:11,230 --> 00:28:17,140
certificates out of protocol that's used

464
00:28:13,419 --> 00:28:20,140
by or will be used by your IOT device to

465
00:28:17,140 --> 00:28:23,049
verify if any certificate is still valid

466
00:28:20,140 --> 00:28:24,549
or has been revoked you might use how it

467
00:28:23,049 --> 00:28:27,418
might have need for certificate

468
00:28:24,549 --> 00:28:30,070
revocation lists important and important

469
00:28:27,419 --> 00:28:32,980
service certificate enrollment protocols

470
00:28:30,070 --> 00:28:36,090
so there is EST and wrong protocol and

471
00:28:32,980 --> 00:28:39,790
there is a modification of this EST

472
00:28:36,090 --> 00:28:44,590
based on constrained application

473
00:28:39,790 --> 00:28:47,200
protocols and a more ancient a simple

474
00:28:44,590 --> 00:28:55,409
certificate enrollment protocol formerly

475
00:28:47,200 --> 00:28:58,210
known as cisco enrollment protocol so

476
00:28:55,410 --> 00:29:01,390
beside beside all these PKI services

477
00:28:58,210 --> 00:29:03,730
we've got also to talk about the the

478
00:29:01,390 --> 00:29:06,280
update service and i think that's one of

479
00:29:03,730 --> 00:29:08,650
the most important services on our

480
00:29:06,280 --> 00:29:09,970
device so whenever we want to change

481
00:29:08,650 --> 00:29:12,580
anything

482
00:29:09,970 --> 00:29:14,500
we might want to update the system and

483
00:29:12,580 --> 00:29:17,379
an update update or changing the code is

484
00:29:14,500 --> 00:29:22,570
always a risk that attacker might might

485
00:29:17,380 --> 00:29:26,110
interfere so we have got Update service

486
00:29:22,570 --> 00:29:31,200
and we have got to move or ship our our

487
00:29:26,110 --> 00:29:31,199
package update package to our target and

488
00:29:31,470 --> 00:29:36,580
often so what I see sometimes is that

489
00:29:34,660 --> 00:29:41,070
people are doing it the wrong way

490
00:29:36,580 --> 00:29:45,070
so they create some kind of tar file

491
00:29:41,070 --> 00:29:49,689
containing the images containing some

492
00:29:45,070 --> 00:29:52,689
kind of signature and then they start to

493
00:29:49,690 --> 00:29:54,970
enter this this package and afterwards

494
00:29:52,690 --> 00:29:58,270
they verify the signature so that's the

495
00:29:54,970 --> 00:30:00,790
wrong way you should first steps always

496
00:29:58,270 --> 00:30:04,330
if you receive any data verify the

497
00:30:00,790 --> 00:30:06,940
signature of this data otherwise if you

498
00:30:04,330 --> 00:30:10,530
start to enter this package it might be

499
00:30:06,940 --> 00:30:13,530
tower zip bomb or whatever so it might

500
00:30:10,530 --> 00:30:13,530
might

501
00:30:13,970 --> 00:30:21,139
might be a denial-of-service attack - to

502
00:30:16,879 --> 00:30:24,320
kick your system out so first first step

503
00:30:21,139 --> 00:30:33,340
always having an dealing with update

504
00:30:24,320 --> 00:30:36,408
packages verify the signature once you

505
00:30:33,340 --> 00:30:41,899
want you you you received an update

506
00:30:36,409 --> 00:30:46,299
package you want to to replace an

507
00:30:41,899 --> 00:30:46,299
existing system with new images and

508
00:30:46,509 --> 00:30:52,340
going back a few slides the I was

509
00:30:50,419 --> 00:30:55,490
talking about confidentiality integrity

510
00:30:52,340 --> 00:30:59,959
and availability so we must make sure

511
00:30:55,490 --> 00:31:02,299
that any kind of update mechanism even

512
00:30:59,960 --> 00:31:05,659
if it fails of some someone pulls the

513
00:31:02,299 --> 00:31:08,149
plug or if it's Soviet the update

514
00:31:05,659 --> 00:31:11,210
process is interrupted it should never

515
00:31:08,149 --> 00:31:13,729
be any system of the system crew should

516
00:31:11,210 --> 00:31:17,659
not be bricked should always be possible

517
00:31:13,730 --> 00:31:23,539
a fade safe mode possible so the system

518
00:31:17,659 --> 00:31:26,240
will realize that the the act the active

519
00:31:23,539 --> 00:31:28,210
image is not working and should fall

520
00:31:26,240 --> 00:31:32,080
back and should fall back to the

521
00:31:28,210 --> 00:31:38,360
recovery system or the previous image

522
00:31:32,080 --> 00:31:42,740
that ran before properly yeah

523
00:31:38,360 --> 00:31:45,529
so I had a look at a port and I think

524
00:31:42,740 --> 00:31:47,630
evening with so I didn't

525
00:31:45,529 --> 00:31:49,549
so I analyzed it a little bit and I

526
00:31:47,630 --> 00:31:53,840
think it would be possible even before

527
00:31:49,549 --> 00:31:58,610
to create such such mechanism so I know

528
00:31:53,840 --> 00:32:03,080
it works with the drop but drop is not

529
00:31:58,610 --> 00:32:06,500
in our focus right now so but I think it

530
00:32:03,080 --> 00:32:10,279
would be possible to to implement a port

531
00:32:06,500 --> 00:32:13,419
to an order to configure over the way

532
00:32:10,279 --> 00:32:19,809
that we've got some kind of phase safe

533
00:32:13,419 --> 00:32:24,980
boot process of course you see here a

534
00:32:19,809 --> 00:32:28,240
variable active so active is the zero

535
00:32:24,980 --> 00:32:32,809
system shall be the active one of course

536
00:32:28,240 --> 00:32:36,769
this would or would be necessary to sign

537
00:32:32,809 --> 00:32:40,820
this data as well so we would juggle

538
00:32:36,769 --> 00:32:43,880
with kind of scripting in Ubud those

539
00:32:40,820 --> 00:32:47,200
scripts being signed itself and just

540
00:32:43,880 --> 00:32:50,690
replacing one script or an other script

541
00:32:47,200 --> 00:32:52,789
so maybe if you've got experience with

542
00:32:50,690 --> 00:32:57,200
those scripting you can tell me later if

543
00:32:52,789 --> 00:32:59,929
it's working as I think but so so

544
00:32:57,200 --> 00:33:03,860
additional features so I've got to speed

545
00:32:59,929 --> 00:33:05,750
up now you should remove any interpreter

546
00:33:03,860 --> 00:33:10,189
from your from your device no bears no

547
00:33:05,750 --> 00:33:13,730
piasa no no Jay no GS so focus onto a

548
00:33:10,190 --> 00:33:18,110
single deepest or similar senior IPC

549
00:33:13,730 --> 00:33:22,990
mechanism think about isolating access

550
00:33:18,110 --> 00:33:25,158
to GPRS or other hardware devices define

551
00:33:22,990 --> 00:33:27,200
what is the well what are the allowed

552
00:33:25,159 --> 00:33:29,149
message flow between devices who's

553
00:33:27,200 --> 00:33:33,409
allowed to write files who's allowed to

554
00:33:29,149 --> 00:33:35,489
read files so the simple tasks do we

555
00:33:33,409 --> 00:33:38,520
need a firewall

556
00:33:35,490 --> 00:33:46,170
doing it isolations unboxing of the

557
00:33:38,520 --> 00:33:49,590
basement of the for the cellphone USB 3

558
00:33:46,170 --> 00:33:52,770
nowadays is using DMA some USB 2 in the

559
00:33:49,590 --> 00:33:56,100
past did not use direct memory access

560
00:33:52,770 --> 00:33:58,860
so with USB 3 is using direct memory

561
00:33:56,100 --> 00:34:02,040
access so once you attach a USB 3 device

562
00:33:58,860 --> 00:34:04,740
it might happen that it directly

563
00:34:02,040 --> 00:34:06,020
transfers data physical from one

564
00:34:04,740 --> 00:34:09,540
physical region to another region

565
00:34:06,020 --> 00:34:13,679
reading your data Firewise the same

566
00:34:09,540 --> 00:34:17,029
problem so anything with DMA is is evil

567
00:34:13,679 --> 00:34:21,649
so avoid any any any device using DMA

568
00:34:17,030 --> 00:34:24,570
underneath so there are multiple

569
00:34:21,649 --> 00:34:27,500
mechanisms you could partition or

570
00:34:24,570 --> 00:34:32,550
isolate your systems you could use the

571
00:34:27,500 --> 00:34:36,750
UNIX groups you could use some cgroups

572
00:34:32,550 --> 00:34:39,510
SLE knobs names establish namespaces on

573
00:34:36,750 --> 00:34:42,360
you could use kernel virtual machine

574
00:34:39,510 --> 00:34:47,879
docker VirtualBox you could use a trust

575
00:34:42,360 --> 00:34:53,129
zone by a feature called opti or elf or

576
00:34:47,879 --> 00:34:56,040
micro Coulomb so so usually UNIX groups

577
00:34:53,129 --> 00:35:00,509
so this is this unique system so we will

578
00:34:56,040 --> 00:35:03,000
skip this the next step would be using

579
00:35:00,510 --> 00:35:05,580
cgroups namespaces so good good way to

580
00:35:03,000 --> 00:35:07,590
ice or to establish or manage C groups

581
00:35:05,580 --> 00:35:09,960
is using system D on your on your on

582
00:35:07,590 --> 00:35:13,830
your system so system D makes it very

583
00:35:09,960 --> 00:35:17,610
easy to to define C groups to define

584
00:35:13,830 --> 00:35:20,279
access to certain network devices to

585
00:35:17,610 --> 00:35:25,770
restrict memory usage and so on so it's

586
00:35:20,280 --> 00:35:28,520
it's very handy KVM or docker somehow

587
00:35:25,770 --> 00:35:30,960
they make use of C groups and other

588
00:35:28,520 --> 00:35:33,360
namespaces and other functionality this

589
00:35:30,960 --> 00:35:36,870
would be the next level to isolate your

590
00:35:33,360 --> 00:35:39,330
sister to isolate certain tasks but it's

591
00:35:36,870 --> 00:35:41,549
not sufficient to isolate teammate DMA

592
00:35:39,330 --> 00:35:44,150
so it's still running on top on top of

593
00:35:41,550 --> 00:35:48,830
your operating system Linux and Linux

594
00:35:44,150 --> 00:35:51,750
has a of 60 millions lines of code so

595
00:35:48,830 --> 00:35:54,540
it's quite a big system and it's not

596
00:35:51,750 --> 00:36:00,830
possible to verify if if then if there

597
00:35:54,540 --> 00:36:04,170
might if to verify the system op TSM

598
00:36:00,830 --> 00:36:07,279
would be the next level in regarding

599
00:36:04,170 --> 00:36:12,900
complexity and security so opti is

600
00:36:07,280 --> 00:36:17,970
something like a microkernel running a

601
00:36:12,900 --> 00:36:21,930
site in a call trust zone and the rich

602
00:36:17,970 --> 00:36:24,899
operating or opera the rich OS rich

603
00:36:21,930 --> 00:36:29,270
operating system it's triggering a call

604
00:36:24,900 --> 00:36:32,790
into this trust zone executing certain

605
00:36:29,270 --> 00:36:37,490
secure and cryptographic operations and

606
00:36:32,790 --> 00:36:41,009
you get back the result so this this is

607
00:36:37,490 --> 00:36:45,020
well established mechanism it's possible

608
00:36:41,010 --> 00:36:48,870
to integrate this into the boot process

609
00:36:45,020 --> 00:36:53,130
what would be even better would be if

610
00:36:48,870 --> 00:36:56,430
the hardware would be designed for this

611
00:36:53,130 --> 00:36:59,010
so for example certain devices should

612
00:36:56,430 --> 00:37:02,549
only or GPIO should only be accessible

613
00:36:59,010 --> 00:37:06,120
from within the trust zone running

614
00:37:02,550 --> 00:37:09,930
within the opti the trust execution

615
00:37:06,120 --> 00:37:13,920
environment so at most hardware nowadays

616
00:37:09,930 --> 00:37:18,149
does not have this wire ring on the

617
00:37:13,920 --> 00:37:21,180
board so that would be nice feature but

618
00:37:18,150 --> 00:37:24,530
in most cases it's not realized so

619
00:37:21,180 --> 00:37:28,529
hardware's not it's not supporting this

620
00:37:24,530 --> 00:37:31,200
so there was just a few ways you could

621
00:37:28,530 --> 00:37:35,580
use boot into the OP team a trusted

622
00:37:31,200 --> 00:37:40,350
environment another very interesting way

623
00:37:35,580 --> 00:37:43,590
to isolate tasks and application is

624
00:37:40,350 --> 00:37:46,110
using an elf phone microkernel it's a

625
00:37:43,590 --> 00:37:48,940
family of micro kernels so I worked with

626
00:37:46,110 --> 00:37:54,210
out for Rio fiasco

627
00:37:48,940 --> 00:37:56,740
so it's capability-based runtime and

628
00:37:54,210 --> 00:37:59,589
during start-up you define who is

629
00:37:56,740 --> 00:38:04,598
allowed to send message to which to

630
00:37:59,589 --> 00:38:11,710
which application so you might have so

631
00:38:04,599 --> 00:38:13,660
you've got the microkernel here and so

632
00:38:11,710 --> 00:38:15,160
this microkernel has only sixty thousand

633
00:38:13,660 --> 00:38:18,730
lines of code so it's much easier to

634
00:38:15,160 --> 00:38:22,440
verify this code and the capability

635
00:38:18,730 --> 00:38:25,980
system allows you to define

636
00:38:22,440 --> 00:38:28,299
communication patterns between tasks and

637
00:38:25,980 --> 00:38:31,150
the interesting point is that those

638
00:38:28,299 --> 00:38:34,390
capabilities can be handed over from one

639
00:38:31,150 --> 00:38:36,700
task to another task if there are

640
00:38:34,390 --> 00:38:40,868
permissions so it's in this way it's

641
00:38:36,700 --> 00:38:42,970
very easy to establish communication

642
00:38:40,869 --> 00:38:46,240
channels between tasks but also

643
00:38:42,970 --> 00:38:49,259
dynamically extent those channels so if

644
00:38:46,240 --> 00:38:53,140
you start dynamically a Linux kernel

645
00:38:49,259 --> 00:38:55,359
this Linux kernel might get might

646
00:38:53,140 --> 00:38:58,140
receive certain capabilities and being

647
00:38:55,359 --> 00:39:02,470
able to access memory to access certain

648
00:38:58,140 --> 00:39:04,720
USB devices and so on so l4 would be the

649
00:39:02,470 --> 00:39:08,339
right choice if you want to restrict

650
00:39:04,720 --> 00:39:14,319
access to certain devices the problem is

651
00:39:08,339 --> 00:39:16,690
that this kernel is is tailored

652
00:39:14,319 --> 00:39:18,400
especially for your hardware so if you

653
00:39:16,690 --> 00:39:22,230
change the hardware later you start

654
00:39:18,400 --> 00:39:22,230
again from the from scratch and

655
00:39:22,459 --> 00:39:28,890
upon bringing bringing l4 and your

656
00:39:26,160 --> 00:39:31,288
system up on a new hardware problem is

657
00:39:28,890 --> 00:39:33,839
also if you've got the chip or hardware

658
00:39:31,289 --> 00:39:36,539
which has a single interrupt but serving

659
00:39:33,839 --> 00:39:39,959
two functionalities who is be and maybe

660
00:39:36,539 --> 00:39:41,999
modem so then it's very hard to separate

661
00:39:39,959 --> 00:39:46,678
those those two functionality from each

662
00:39:41,999 --> 00:39:50,999
other what we did another other project

663
00:39:46,679 --> 00:39:59,339
was we had with the need to do some kind

664
00:39:50,999 --> 00:40:03,678
of 3d 3d acceleration and so some guy

665
00:39:59,339 --> 00:40:09,479
managed to implement a governor and two

666
00:40:03,679 --> 00:40:13,319
for the 3d accelerator so allowing two

667
00:40:09,479 --> 00:40:17,459
two tasks or two partitions on our

668
00:40:13,319 --> 00:40:23,538
system to use to make use of this of

669
00:40:17,459 --> 00:40:23,538
this 3d accelerator that was really cool

670
00:40:24,890 --> 00:40:37,759
so that's almost the end so we talked

671
00:40:28,559 --> 00:40:40,739
about we talked about we talked about a

672
00:40:37,759 --> 00:40:44,830
charging station located on on on a

673
00:40:40,739 --> 00:40:48,520
parking lot having being accessible

674
00:40:44,830 --> 00:40:51,910
over public IP fully qualified domain

675
00:40:48,520 --> 00:40:54,369
name is can be resolved and can access

676
00:40:51,910 --> 00:40:57,970
the device so what will change if we

677
00:40:54,369 --> 00:41:01,570
move our charging station now into our

678
00:40:57,970 --> 00:41:04,299
house into our home area network so

679
00:41:01,570 --> 00:41:07,000
suddenly we've got a problem I mentioned

680
00:41:04,300 --> 00:41:14,470
with let's encrypt so we will not be

681
00:41:07,000 --> 00:41:20,710
able to get any no public CA will issue

682
00:41:14,470 --> 00:41:24,060
a certificate for our device and that's

683
00:41:20,710 --> 00:41:26,970
a problem if we if we have some kind of

684
00:41:24,060 --> 00:41:31,000
graphical user interface for the user

685
00:41:26,970 --> 00:41:33,520
who bought this charging station and he

686
00:41:31,000 --> 00:41:39,070
wants to manage this this charging

687
00:41:33,520 --> 00:41:44,770
station and but so he this user has has

688
00:41:39,070 --> 00:41:47,650
the choice between entering a user and

689
00:41:44,770 --> 00:41:51,780
password either a web page in plain text

690
00:41:47,650 --> 00:41:51,780
and transferring a plain text or

691
00:41:51,810 --> 00:41:56,560
accepting some kind of self-signed

692
00:41:54,040 --> 00:41:59,680
certificates being deployed on the

693
00:41:56,560 --> 00:42:02,650
target but if you do so the user will

694
00:41:59,680 --> 00:42:05,649
also always see a warning so once he

695
00:42:02,650 --> 00:42:10,030
tries to to access this device with

696
00:42:05,650 --> 00:42:12,220
HTTPS the browser will always warn him

697
00:42:10,030 --> 00:42:15,910
that this is an unsecure connection a

698
00:42:12,220 --> 00:42:18,450
self-signed connection untrusted he

699
00:42:15,910 --> 00:42:22,990
should store

700
00:42:18,450 --> 00:42:24,520
asking if you trust this this server so

701
00:42:22,990 --> 00:42:27,580
it's very annoying

702
00:42:24,520 --> 00:42:34,350
this this if you you know so if you try

703
00:42:27,580 --> 00:42:37,120
to establish some kind of security for

704
00:42:34,350 --> 00:42:41,620
IOT device located in the home arrow

705
00:42:37,120 --> 00:42:42,670
Network this you have got to struggle

706
00:42:41,620 --> 00:42:46,480
with this problem

707
00:42:42,670 --> 00:42:49,090
another problem is if you move your IOT

708
00:42:46,480 --> 00:42:50,980
device into your home error network some

709
00:42:49,090 --> 00:42:52,900
services might not be usable so you

710
00:42:50,980 --> 00:42:53,680
might not be able to used in a sec

711
00:42:52,900 --> 00:42:55,570
anymore

712
00:42:53,680 --> 00:42:58,029
might be blocked by the router of the

713
00:42:55,570 --> 00:43:02,200
user you might not be able to use

714
00:42:58,030 --> 00:43:07,110
certain kinds of voyeur of VPN

715
00:43:02,200 --> 00:43:11,350
connections so it's a lot of limitations

716
00:43:07,110 --> 00:43:13,750
in your home internet work and regarding

717
00:43:11,350 --> 00:43:16,140
this HTTP problem and self-signed

718
00:43:13,750 --> 00:43:19,840
certificates I asked some guys from

719
00:43:16,140 --> 00:43:23,560
Chrome and they told me that they don't

720
00:43:19,840 --> 00:43:25,930
have any solution for this so and so

721
00:43:23,560 --> 00:43:28,600
it's a bit annoying because no web page

722
00:43:25,930 --> 00:43:31,859
would be is a nice the access or user

723
00:43:28,600 --> 00:43:35,799
interface to manage your IT device and

724
00:43:31,860 --> 00:43:39,240
if there is any solution so on I would

725
00:43:35,800 --> 00:43:42,190
be happy to get to know about it so

726
00:43:39,240 --> 00:43:44,290
that's the end of my presentation so we

727
00:43:42,190 --> 00:43:47,770
had to look at their architecture of

728
00:43:44,290 --> 00:43:50,290
security device we talked about secure

729
00:43:47,770 --> 00:43:53,590
boot how the functionality of the

730
00:43:50,290 --> 00:43:57,360
underlying hardware is used to establish

731
00:43:53,590 --> 00:44:01,530
a chain of trust during the boot phase

732
00:43:57,360 --> 00:44:03,910
once we are booted how we establish

733
00:44:01,530 --> 00:44:12,490
encrypted storage how we deal with the

734
00:44:03,910 --> 00:44:15,750
read-only partitions we booted from yes

735
00:44:12,490 --> 00:44:15,750
so I thank you

736
00:44:16,460 --> 00:44:29,440
[Applause]

737
00:44:25,800 --> 00:44:31,660
thank you for your work for your talk if

738
00:44:29,440 --> 00:44:35,320
you happen to have any questions we have

739
00:44:31,660 --> 00:44:38,339
about two minutes left if you would like

740
00:44:35,320 --> 00:44:40,240
to ask a question please find any of the

741
00:44:38,340 --> 00:44:43,930
yeah go ahead

742
00:44:40,240 --> 00:44:48,790
Michael thanks for a talk first of all

743
00:44:43,930 --> 00:44:53,680
small remark maybe it is useful to pay

744
00:44:48,790 --> 00:44:57,190
attention to kernel hardening measures

745
00:44:53,680 --> 00:45:01,149
and user space protection measures how

746
00:44:57,190 --> 00:45:04,780
you build your software using your tool

747
00:45:01,150 --> 00:45:09,460
chain which is further used on your

748
00:45:04,780 --> 00:45:13,920
device and a small question I didn't

749
00:45:09,460 --> 00:45:17,470
understand how this encryption container

750
00:45:13,920 --> 00:45:25,000
helps in your attack model could you

751
00:45:17,470 --> 00:45:29,799
describe a please which one there was

752
00:45:25,000 --> 00:45:38,490
slight the last kernel the last slide if

753
00:45:29,800 --> 00:45:45,190
you showed so this one no theater no no

754
00:45:38,490 --> 00:45:48,759
it was a recap yeah yes so you have this

755
00:45:45,190 --> 00:45:52,990
encrypted storage and how it helps you

756
00:45:48,760 --> 00:45:54,880
and what what is the purpose of it so

757
00:45:52,990 --> 00:45:58,240
encrypted storage is encrypted file

758
00:45:54,880 --> 00:46:00,820
system as the other file systems are

759
00:45:58,240 --> 00:46:04,359
read-only we have no way to store any

760
00:46:00,820 --> 00:46:08,070
data so if if the IP address is

761
00:46:04,360 --> 00:46:11,890
configured or username or some kind of

762
00:46:08,070 --> 00:46:14,230
for us identify some functionality

763
00:46:11,890 --> 00:46:16,870
configuration so we've got to store it

764
00:46:14,230 --> 00:46:20,170
somewhere so the encrypted source is

765
00:46:16,870 --> 00:46:23,319
intended for this and the way might be

766
00:46:20,170 --> 00:46:26,800
using the HTTP or no fixed static IP

767
00:46:23,320 --> 00:46:31,869
address what a 13's server and so on and

768
00:46:26,800 --> 00:46:36,529
why encrypt that but not stirring it

769
00:46:31,869 --> 00:46:40,430
unencrypted so what do you protect if

770
00:46:36,529 --> 00:46:42,170
the devices attacker guys accessed it

771
00:46:40,430 --> 00:46:45,019
it's not only that IP address you

772
00:46:42,170 --> 00:46:50,450
alright so it's it's it's also it's we

773
00:46:45,019 --> 00:46:54,410
talked about a lot of HTTP trillion HTTP

774
00:46:50,450 --> 00:46:57,019
credentials public so client client

775
00:46:54,410 --> 00:46:57,980
server client key client certificate or

776
00:46:57,019 --> 00:47:02,299
self client key

777
00:46:57,980 --> 00:47:05,269
VPNs keys maybe to open a VPN session

778
00:47:02,299 --> 00:47:09,740
and so on this should not be so they

779
00:47:05,269 --> 00:47:15,709
should be configurable they should not

780
00:47:09,740 --> 00:47:19,339
be the file systems are read only but

781
00:47:15,710 --> 00:47:21,650
readable they are just signed so this

782
00:47:19,339 --> 00:47:24,859
extent of three the encrypted storage is

783
00:47:21,650 --> 00:47:26,900
to protect also those credentials that

784
00:47:24,859 --> 00:47:30,049
should not be readable accessible by

785
00:47:26,900 --> 00:47:35,119
anybody else getting access to the flash

786
00:47:30,049 --> 00:47:37,309
memory yeah sorry so I didn't put it

787
00:47:35,119 --> 00:47:40,190
into the slides thank you for your

788
00:47:37,309 --> 00:47:42,950
answer and I'm afraid we're out of time

789
00:47:40,190 --> 00:47:44,350
please sound plus a free bag for giving

790
00:47:42,950 --> 00:47:51,638
this talk

791
00:47:44,350 --> 00:47:51,639
[Applause]

792
00:47:57,480 --> 00:48:02,079
[Music]

793
00:48:02,990 --> 00:48:05,049
you

