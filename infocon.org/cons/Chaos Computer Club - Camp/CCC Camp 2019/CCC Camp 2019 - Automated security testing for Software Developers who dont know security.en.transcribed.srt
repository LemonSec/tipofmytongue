1
00:00:08,850 --> 00:00:16,270
[Music]

2
00:00:14,250 --> 00:00:20,890
testing for software developers who

3
00:00:16,270 --> 00:00:23,100
don't know security at all so this is a

4
00:00:20,890 --> 00:00:26,320
very interesting topic that has been

5
00:00:23,100 --> 00:00:28,690
wildly popular the last couple of months

6
00:00:26,320 --> 00:00:31,869
and I'm personally very interested in

7
00:00:28,690 --> 00:00:34,480
this topic too so I'm curious to see

8
00:00:31,869 --> 00:00:36,400
what he's going to tell us today and how

9
00:00:34,480 --> 00:00:37,000
all of you can make your projects more

10
00:00:36,400 --> 00:00:47,500
secure

11
00:00:37,000 --> 00:00:52,059
so please welcome sigh thanks ok

12
00:00:47,500 --> 00:00:54,309
it's I can't really see you guys but it

13
00:00:52,059 --> 00:00:58,589
looks like it filled up pretty good for

14
00:00:54,309 --> 00:01:00,909
like 2 p.m. talk buy some Java stuff I

15
00:00:58,589 --> 00:01:04,209
will just give you a quick introduction

16
00:01:00,909 --> 00:01:07,150
to me or myself and we can show you why

17
00:01:04,209 --> 00:01:10,380
and what and how we can do all this

18
00:01:07,150 --> 00:01:16,270
fancy automated security testing stuff

19
00:01:10,380 --> 00:01:18,759
it's not necessary this order if you

20
00:01:16,270 --> 00:01:20,259
have questions maybe you can raise your

21
00:01:18,760 --> 00:01:24,180
hands and maybe I will see them but

22
00:01:20,260 --> 00:01:25,900
probably not or you can scream at me and

23
00:01:24,180 --> 00:01:29,710
let's give it a go

24
00:01:25,900 --> 00:01:31,870
I'm Chris I'm a system developer I do a

25
00:01:29,710 --> 00:01:33,640
Java back-end stuff mostly I do

26
00:01:31,870 --> 00:01:37,720
kubernetes and cloud stuff and I'm

27
00:01:33,640 --> 00:01:40,900
trying to get into security I am also a

28
00:01:37,720 --> 00:01:41,330
co-organizer of the cards were DevOps

29
00:01:40,900 --> 00:01:42,610
Meetup

30
00:01:41,330 --> 00:01:45,240
[Music]

31
00:01:42,610 --> 00:01:49,570
I work for cynics just a quick shout out

32
00:01:45,240 --> 00:01:53,020
we do mostly Java development for our

33
00:01:49,570 --> 00:01:56,110
customers with therefore this special

34
00:01:53,020 --> 00:02:00,460
needs and stuff our slogan is code with

35
00:01:56,110 --> 00:02:03,159
attitude so we try not to work for arms

36
00:02:00,460 --> 00:02:06,250
dealers or people who do nuclear energy

37
00:02:03,159 --> 00:02:08,289
stuff yeah

38
00:02:06,250 --> 00:02:11,019
you also can be also do consulting and

39
00:02:08,288 --> 00:02:13,149
we have glitter shirts and they paid for

40
00:02:11,019 --> 00:02:15,660
our camp tickets so just a quick shout

41
00:02:13,150 --> 00:02:20,730
out if you ever in southern

42
00:02:15,660 --> 00:02:23,370
and you're looking for a job so thank

43
00:02:20,730 --> 00:02:26,579
you for listening any questions no I got

44
00:02:23,370 --> 00:02:28,950
questions is any of you directly

45
00:02:26,580 --> 00:02:33,320
involved with a software product

46
00:02:28,950 --> 00:02:33,320
developing it running it maintaining it

47
00:02:33,440 --> 00:02:47,280
surprised who of you uses Java okay

48
00:02:43,050 --> 00:02:51,000
the talk will our first part will run

49
00:02:47,280 --> 00:02:53,010
mainly with maven context so I hope it's

50
00:02:51,000 --> 00:02:55,830
not too far-fetched for people who

51
00:02:53,010 --> 00:03:00,510
haven't seen this I think it's quite

52
00:02:55,830 --> 00:03:04,290
self-explanatory who've you use a

53
00:03:00,510 --> 00:03:09,000
stalker or kubernetes or something

54
00:03:04,290 --> 00:03:12,060
container in production okay

55
00:03:09,000 --> 00:03:13,740
who view scans your software regularly

56
00:03:12,060 --> 00:03:18,960
for security problems or known

57
00:03:13,740 --> 00:03:20,900
vulnerabilities who of you runs software

58
00:03:18,960 --> 00:03:27,600
in production where they know they have

59
00:03:20,900 --> 00:03:31,490
known security vulnerabilities okay I

60
00:03:27,600 --> 00:03:33,690
think we get back to this later on ok so

61
00:03:31,490 --> 00:03:35,840
what's the problem with software

62
00:03:33,690 --> 00:03:39,060
security issues what could go wrong with

63
00:03:35,840 --> 00:03:40,740
software that has not only technical

64
00:03:39,060 --> 00:03:42,209
issues but also security stuff where

65
00:03:40,740 --> 00:03:46,080
people could break in and do bad stuff

66
00:03:42,209 --> 00:03:47,910
well you could use your lose your

67
00:03:46,080 --> 00:03:51,060
business data or your customers business

68
00:03:47,910 --> 00:03:53,880
data you could also use your actual end

69
00:03:51,060 --> 00:03:57,930
customer data which is like very hard

70
00:03:53,880 --> 00:04:00,090
topic I think it has been quite

71
00:03:57,930 --> 00:04:04,680
interesting in Germany in like forever

72
00:04:00,090 --> 00:04:07,440
but since 2018 the GDP are kicked in in

73
00:04:04,680 --> 00:04:09,330
Europe and apparently a lot of companies

74
00:04:07,440 --> 00:04:12,930
have never thought about securing their

75
00:04:09,330 --> 00:04:17,130
users or customers personal later I have

76
00:04:12,930 --> 00:04:18,840
an example about this later on security

77
00:04:17,130 --> 00:04:23,669
issues could cause service interruptions

78
00:04:18,839 --> 00:04:25,289
like somebody is trying to attack your

79
00:04:23,669 --> 00:04:27,960
web server if your web server goes down

80
00:04:25,289 --> 00:04:28,930
your business is you can serve

81
00:04:27,960 --> 00:04:33,008
the customers

82
00:04:28,930 --> 00:04:35,259
make money yeah well anyone can think

83
00:04:33,009 --> 00:04:38,440
about what happens you could use so you

84
00:04:35,259 --> 00:04:40,470
could have industry malfunction we have

85
00:04:38,440 --> 00:04:47,590
the prettiest infrastructure in Germany

86
00:04:40,470 --> 00:04:50,800
where we it's or its infrastructure

87
00:04:47,590 --> 00:04:53,820
that's used for your daily life and

88
00:04:50,800 --> 00:04:56,860
that's absolutely necessary like sewage

89
00:04:53,820 --> 00:04:59,530
cleaning stuff and the electricity and

90
00:04:56,860 --> 00:05:03,960
stuff like that and maybe you've heard

91
00:04:59,530 --> 00:05:09,008
about deaths that actually happened

92
00:05:03,960 --> 00:05:11,219
because automated cars drove over

93
00:05:09,009 --> 00:05:14,830
someone because they thought it was like

94
00:05:11,220 --> 00:05:17,590
some kind of paper bag flying over the

95
00:05:14,830 --> 00:05:20,198
street that's a technical error but this

96
00:05:17,590 --> 00:05:21,698
could also possibly be used by a hacker

97
00:05:20,199 --> 00:05:25,000
if you have a security issue in your

98
00:05:21,699 --> 00:05:27,000
automated car that or people have shown

99
00:05:25,000 --> 00:05:32,849
that they could remote these stop cars

100
00:05:27,000 --> 00:05:38,740
start the ignition brakes and whatever

101
00:05:32,849 --> 00:05:41,169
okay does anyone know about Equifax it's

102
00:05:38,740 --> 00:05:45,849
like the German Ruffa they do credit

103
00:05:41,169 --> 00:05:48,789
monitoring for their consumers so if you

104
00:05:45,849 --> 00:05:49,719
apply for credit if you have trouble

105
00:05:48,789 --> 00:05:53,740
paying your bills

106
00:05:49,720 --> 00:05:57,840
it will could happen that if you live in

107
00:05:53,740 --> 00:06:03,099
the u.s. you show up in their databases

108
00:05:57,840 --> 00:06:04,960
in 2017 they were hacked they hackers

109
00:06:03,099 --> 00:06:07,389
some hackers breached their web server

110
00:06:04,960 --> 00:06:09,820
through a vulnerability in Apache struts

111
00:06:07,389 --> 00:06:13,870
it's an open source project where you

112
00:06:09,820 --> 00:06:18,070
can build web views turns out that

113
00:06:13,870 --> 00:06:19,690
stretch was or had been patched there

114
00:06:18,070 --> 00:06:22,330
was an official patch for struts for

115
00:06:19,690 --> 00:06:24,580
like four weeks and apparently Equifax

116
00:06:22,330 --> 00:06:31,150
didn't know about this or nobody cared

117
00:06:24,580 --> 00:06:33,909
and people were able to infiltrate their

118
00:06:31,150 --> 00:06:39,070
servers and take out a lot of personal

119
00:06:33,909 --> 00:06:40,340
data like I think 134 43 million social

120
00:06:39,070 --> 00:06:42,290
security numbers

121
00:06:40,340 --> 00:06:44,750
and if you know about the US Social

122
00:06:42,290 --> 00:06:46,520
Security system it's a number that you

123
00:06:44,750 --> 00:06:48,530
get assigned by birth and you can never

124
00:06:46,520 --> 00:06:51,169
change that and there's a lot of

125
00:06:48,530 --> 00:06:53,270
services where you can like change your

126
00:06:51,169 --> 00:06:55,430
passwords you call them on the phone and

127
00:06:53,270 --> 00:06:57,560
you have to give them the last four

128
00:06:55,430 --> 00:06:59,889
digits of your social security number

129
00:06:57,560 --> 00:07:03,350
and that's their authentication for you

130
00:06:59,889 --> 00:07:06,080
so this is pretty bad there was also a

131
00:07:03,350 --> 00:07:08,240
lot of credit card numbers involved and

132
00:07:06,080 --> 00:07:10,448
well you can think about what happens

133
00:07:08,240 --> 00:07:10,449
next

134
00:07:11,229 --> 00:07:17,300
vulnerabilities can also happen in the

135
00:07:13,400 --> 00:07:22,039
platform that you use your to run your

136
00:07:17,300 --> 00:07:24,229
servers Germans might know this under

137
00:07:22,040 --> 00:07:28,130
the name Panama papers or maybe everyone

138
00:07:24,229 --> 00:07:30,229
I don't think we have time for this but

139
00:07:28,130 --> 00:07:32,180
they had a bad drupal version they did

140
00:07:30,229 --> 00:07:35,900
not upgrade this for their web servers

141
00:07:32,180 --> 00:07:40,520
and well that turned out not so good for

142
00:07:35,900 --> 00:07:41,210
them so why would you not patch your

143
00:07:40,520 --> 00:07:45,049
software

144
00:07:41,210 --> 00:07:47,030
well there's negligence so you just like

145
00:07:45,050 --> 00:07:51,889
you don't care you don't have the time

146
00:07:47,030 --> 00:07:54,130
it's priority problem your product

147
00:07:51,889 --> 00:07:58,580
managers like no we need to feature

148
00:07:54,130 --> 00:08:00,770
maybe you might be preoccupied by doing

149
00:07:58,580 --> 00:08:04,400
performance tests or something that you

150
00:08:00,770 --> 00:08:06,139
purge has higher it could happen you

151
00:08:04,400 --> 00:08:09,169
might not have the training like when I

152
00:08:06,139 --> 00:08:12,130
started interesting myself in this whole

153
00:08:09,169 --> 00:08:15,409
security thing I had no idea what to do

154
00:08:12,130 --> 00:08:17,630
I'm not even I've been doing this for

155
00:08:15,410 --> 00:08:20,060
like two years now and I'm far from

156
00:08:17,630 --> 00:08:23,630
being an expert in software security

157
00:08:20,060 --> 00:08:26,990
I've more like the average basic

158
00:08:23,630 --> 00:08:28,880
knowledge so you might like the inside

159
00:08:26,990 --> 00:08:29,570
or you could just say security it's not

160
00:08:28,880 --> 00:08:33,080
my department

161
00:08:29,570 --> 00:08:35,000
I've seen people at customers that claim

162
00:08:33,080 --> 00:08:38,000
that they are software developers and

163
00:08:35,000 --> 00:08:39,860
the company has a security team a pen

164
00:08:38,000 --> 00:08:42,740
testing team they have a test

165
00:08:39,860 --> 00:08:45,500
engineering team and yeah people that

166
00:08:42,740 --> 00:08:50,930
change your diapers in the morning I

167
00:08:45,500 --> 00:08:52,700
don't know okay and there's the to

168
00:08:50,930 --> 00:08:54,050
tackle all these problems there's the

169
00:08:52,700 --> 00:08:57,410
open web applications

170
00:08:54,050 --> 00:09:01,160
your project it's a I think it's a

171
00:08:57,410 --> 00:09:04,819
nonprofit organization and they give out

172
00:09:01,160 --> 00:09:09,170
the top ten list of application security

173
00:09:04,820 --> 00:09:12,850
risks and sometimes they renew it so I

174
00:09:09,170 --> 00:09:15,290
think the last one was from 2017 and

175
00:09:12,850 --> 00:09:19,880
what we are trying to tackle today is

176
00:09:15,290 --> 00:09:22,969
the top nine it's about using components

177
00:09:19,880 --> 00:09:25,430
with known vulnerabilities so this is

178
00:09:22,970 --> 00:09:28,700
like somebody has found a vulnerability

179
00:09:25,430 --> 00:09:30,890
and like struts and they report it to

180
00:09:28,700 --> 00:09:34,519
someone at sea patchy or at the struts

181
00:09:30,890 --> 00:09:37,040
project and they would the report is

182
00:09:34,519 --> 00:09:39,079
publicly available so everyone can see

183
00:09:37,040 --> 00:09:44,319
it and everyone can also write a scanner

184
00:09:39,079 --> 00:09:47,689
for this you might ask the question why

185
00:09:44,320 --> 00:09:51,470
do we start with a nine and not with the

186
00:09:47,690 --> 00:09:53,209
top one problems well you can have all

187
00:09:51,470 --> 00:09:58,190
the top eight problems and many many

188
00:09:53,209 --> 00:10:01,670
more inside third-party libraries that

189
00:09:58,190 --> 00:10:05,720
you use and so we try to get the easiest

190
00:10:01,670 --> 00:10:12,439
way to tackle this problem and it's also

191
00:10:05,720 --> 00:10:15,920
you can learn a lot by this okay so what

192
00:10:12,440 --> 00:10:18,140
can we do to address the problem we can

193
00:10:15,920 --> 00:10:20,810
search for known vulnerabilities there's

194
00:10:18,140 --> 00:10:22,779
public databases where we can everyone

195
00:10:20,810 --> 00:10:26,000
also the bad guys but also the good guys

196
00:10:22,779 --> 00:10:28,550
can look for vulnerabilities and fix

197
00:10:26,000 --> 00:10:31,930
them and see what what they have to do

198
00:10:28,550 --> 00:10:35,209
what versions they have to patch to

199
00:10:31,930 --> 00:10:38,089
that's pretty easy technically because

200
00:10:35,209 --> 00:10:40,699
there's two linked for this we have to

201
00:10:38,089 --> 00:10:44,570
implement a process to fix it you know

202
00:10:40,699 --> 00:10:46,790
like you find a vulnerability but you

203
00:10:44,570 --> 00:10:48,980
need the time to fix it desperate he is

204
00:10:46,790 --> 00:10:53,149
there's features to do there's other

205
00:10:48,980 --> 00:10:56,269
stuff to to address and you have to find

206
00:10:53,149 --> 00:10:58,880
a way who is going to fix or to patch or

207
00:10:56,269 --> 00:11:00,410
to delete vulnerable software and I

208
00:10:58,880 --> 00:11:05,300
think that's the hardest part for a

209
00:11:00,410 --> 00:11:07,100
company and I personally will also treat

210
00:11:05,300 --> 00:11:09,260
security issues like technical debt

211
00:11:07,100 --> 00:11:11,960
like the longer it takes you to patch

212
00:11:09,260 --> 00:11:13,939
this the harder it is to upgrade or to

213
00:11:11,960 --> 00:11:15,170
patch because there will be new

214
00:11:13,940 --> 00:11:16,910
vulnerabilities there will be new

215
00:11:15,170 --> 00:11:20,300
features every one of you knows this

216
00:11:16,910 --> 00:11:22,839
like if you if you wait for weeks

217
00:11:20,300 --> 00:11:25,490
to patch software technical issues

218
00:11:22,840 --> 00:11:28,490
vulnerabilities whatever and the

219
00:11:25,490 --> 00:11:32,420
software progresses it's much harder to

220
00:11:28,490 --> 00:11:35,900
fix it and to update it so and also well

221
00:11:32,420 --> 00:11:38,270
I think the best thing is also always to

222
00:11:35,900 --> 00:11:40,069
automate everything so I don't I don't

223
00:11:38,270 --> 00:11:42,230
want to know like it's Monday morning

224
00:11:40,070 --> 00:11:45,080
10:00 a.m. I have to run a vulnerability

225
00:11:42,230 --> 00:11:48,050
test no it should be automatically you

226
00:11:45,080 --> 00:11:51,320
know like I don't know it's it's the

227
00:11:48,050 --> 00:11:54,319
same as with unit tests integration

228
00:11:51,320 --> 00:11:56,930
tests performance tests this software it

229
00:11:54,320 --> 00:11:58,700
changes so it should be automatically

230
00:11:56,930 --> 00:12:02,449
built it should be automatically test it

231
00:11:58,700 --> 00:12:08,360
and it should be automatically scanned

232
00:12:02,450 --> 00:12:10,820
for security issues okay so let's check

233
00:12:08,360 --> 00:12:12,740
this out how we can find dependency in

234
00:12:10,820 --> 00:12:18,020
third-party libraries I've chosen to

235
00:12:12,740 --> 00:12:19,520
make a quick maven project I hope if you

236
00:12:18,020 --> 00:12:23,140
haven't used maven or Java before you

237
00:12:19,520 --> 00:12:26,990
still get the message we will scan for

238
00:12:23,140 --> 00:12:29,390
components in docker images because like

239
00:12:26,990 --> 00:12:31,730
stuff like Drupal could be packaged into

240
00:12:29,390 --> 00:12:33,949
a darker image where you put your actual

241
00:12:31,730 --> 00:12:38,360
web server or website web software or

242
00:12:33,950 --> 00:12:40,430
website in and if you've got time we can

243
00:12:38,360 --> 00:12:47,630
also scan or API later on because we are

244
00:12:40,430 --> 00:12:49,640
doing a Web API or web app okay and well

245
00:12:47,630 --> 00:12:52,760
I said we want to automate it so I try

246
00:12:49,640 --> 00:12:54,350
to show you something that could be in a

247
00:12:52,760 --> 00:12:56,630
continuous delivery pipeline right now

248
00:12:54,350 --> 00:12:59,540
so this is from the Jenkins blue ocean

249
00:12:56,630 --> 00:13:01,430
plugin it's an open source tool every

250
00:12:59,540 --> 00:13:05,630
Java developer probably has used it

251
00:13:01,430 --> 00:13:10,520
before and these are steps that I think

252
00:13:05,630 --> 00:13:13,880
are in some respect necessary for modern

253
00:13:10,520 --> 00:13:17,180
software development like you you want

254
00:13:13,880 --> 00:13:18,860
to unit test your stuff you need to

255
00:13:17,180 --> 00:13:21,189
package your new software so you can use

256
00:13:18,860 --> 00:13:24,610
it you need to upload this RFA

257
00:13:21,190 --> 00:13:27,970
so it's safe for later you run a docker

258
00:13:24,610 --> 00:13:29,800
build if you use docker and push the

259
00:13:27,970 --> 00:13:33,120
docker image to the docker registry so

260
00:13:29,800 --> 00:13:35,620
it can be deployed to some servers and

261
00:13:33,120 --> 00:13:38,500
this is just a demo project obviously

262
00:13:35,620 --> 00:13:41,379
usually you would add more tests and

263
00:13:38,500 --> 00:13:45,509
maybe it would be deployed to production

264
00:13:41,379 --> 00:13:51,519
or to test systems automatically in this

265
00:13:45,509 --> 00:13:54,730
pipeline so we could add additional

266
00:13:51,519 --> 00:13:57,639
steps to this pipeline and increase the

267
00:13:54,730 --> 00:14:02,139
steps and improve our software security

268
00:13:57,639 --> 00:14:05,790
scanning part I have added three demo

269
00:14:02,139 --> 00:14:08,470
steps one is running a dependency check

270
00:14:05,790 --> 00:14:11,199
one is running a container security scan

271
00:14:08,470 --> 00:14:18,550
and one would be running an API security

272
00:14:11,199 --> 00:14:20,589
test it could also look like this yellow

273
00:14:18,550 --> 00:14:23,019
usually means in Jenkins that the build

274
00:14:20,589 --> 00:14:27,189
has been unstable so it has been built

275
00:14:23,019 --> 00:14:28,899
and there's no major breaking point but

276
00:14:27,189 --> 00:14:33,670
something's fishy so you have to look

277
00:14:28,899 --> 00:14:34,089
into the build I'll show you this later

278
00:14:33,670 --> 00:14:37,689
on

279
00:14:34,089 --> 00:14:41,199
I think the build should always build

280
00:14:37,689 --> 00:14:43,660
there's people who say if you have a

281
00:14:41,199 --> 00:14:45,729
vulnerability or if you have bad tests

282
00:14:43,660 --> 00:14:48,910
well test should break the build in my

283
00:14:45,730 --> 00:14:51,430
in my opinion but vulnerabilities are a

284
00:14:48,910 --> 00:14:54,100
little tricky because it might you might

285
00:14:51,430 --> 00:14:58,540
have to fix two vulnerabilities at once

286
00:14:54,100 --> 00:15:00,610
but you don't you can do both at a time

287
00:14:58,540 --> 00:15:02,259
sometimes like maybe there's one of them

288
00:15:00,610 --> 00:15:03,880
is missing a patch but you still want to

289
00:15:02,259 --> 00:15:07,300
fix the other one so your build has to

290
00:15:03,880 --> 00:15:09,670
run so in my opinion you should have

291
00:15:07,300 --> 00:15:13,149
some visual or some alert that the built

292
00:15:09,670 --> 00:15:15,819
has not fully or the pipeline has not

293
00:15:13,149 --> 00:15:20,319
fully run like by setting it on to

294
00:15:15,819 --> 00:15:23,649
unstable and at the teams I usually work

295
00:15:20,319 --> 00:15:26,589
at we have big dashboards for our

296
00:15:23,649 --> 00:15:33,010
development processing and we usually

297
00:15:26,589 --> 00:15:36,610
show like traffic lights so dashboards

298
00:15:33,010 --> 00:15:39,610
that will show by color if the builds on

299
00:15:36,610 --> 00:15:43,630
the most most needed branches like NASA

300
00:15:39,610 --> 00:15:46,930
branch or any stage systems were fully

301
00:15:43,630 --> 00:15:49,389
built and so it would you would directly

302
00:15:46,930 --> 00:15:51,729
get a visual feedback if something has

303
00:15:49,389 --> 00:15:53,500
happened by the automatic build process

304
00:15:51,730 --> 00:15:57,399
so you don't have to necessarily check

305
00:15:53,500 --> 00:16:01,079
every build but rather you you get a

306
00:15:57,399 --> 00:16:04,269
visual alert if something went wrong and

307
00:16:01,079 --> 00:16:06,939
then you have to like implement this

308
00:16:04,269 --> 00:16:12,720
process how to actually fix this problem

309
00:16:06,940 --> 00:16:16,360
or address the problem okay so what's a

310
00:16:12,720 --> 00:16:18,670
vulnerability vulnerability Wikipedia's

311
00:16:16,360 --> 00:16:20,470
has the quality or state of being

312
00:16:18,670 --> 00:16:22,449
exposed to the possibility of being

313
00:16:20,470 --> 00:16:28,570
attacked or harmed either physically or

314
00:16:22,449 --> 00:16:31,329
emotionally so something might happen to

315
00:16:28,570 --> 00:16:33,279
your software and it's in third-party

316
00:16:31,329 --> 00:16:35,410
libraries the problem is that it might

317
00:16:33,279 --> 00:16:39,670
be publicly known because you haven't

318
00:16:35,410 --> 00:16:44,260
touched the software and well how would

319
00:16:39,670 --> 00:16:48,760
you know this there's a public reference

320
00:16:44,260 --> 00:16:51,939
database our multiple ones that lists

321
00:16:48,760 --> 00:16:55,480
common vulnerabilities and exposures or

322
00:16:51,940 --> 00:16:57,579
well a CVE common vulnerabilities and

323
00:16:55,480 --> 00:17:01,930
exposures is actually a description for

324
00:16:57,579 --> 00:17:05,829
a vulnerability so I've taken the

325
00:17:01,930 --> 00:17:09,549
Equifax example with Apache struts so

326
00:17:05,829 --> 00:17:11,709
you see there is the one of this or this

327
00:17:09,549 --> 00:17:13,540
is the vulnerability description for the

328
00:17:11,709 --> 00:17:16,540
Apache struts problem in this particular

329
00:17:13,540 --> 00:17:19,480
version you see there's on the left

330
00:17:16,540 --> 00:17:21,639
lower left side there's a base score

331
00:17:19,480 --> 00:17:24,040
that says something critical something

332
00:17:21,640 --> 00:17:26,650
and you don't have to be a security

333
00:17:24,040 --> 00:17:30,428
expert to know that you should probably

334
00:17:26,650 --> 00:17:32,830
address this problem and it has some

335
00:17:30,429 --> 00:17:35,260
information and you get infos about

336
00:17:32,830 --> 00:17:39,449
what's the actual problem in this struts

337
00:17:35,260 --> 00:17:42,190
version like there's something content

338
00:17:39,450 --> 00:17:44,919
crafted package you could send to this

339
00:17:42,190 --> 00:17:47,159
thing to run code on somebody else's web

340
00:17:44,919 --> 00:17:47,159
server

341
00:17:47,960 --> 00:17:54,170
and there's also some scoring and some

342
00:17:51,440 --> 00:17:55,640
exploitability z-scores and this much

343
00:17:54,170 --> 00:17:57,549
information that you don't actually need

344
00:17:55,640 --> 00:18:00,940
at the first place when you get started

345
00:17:57,549 --> 00:18:09,710
it's more like an in-depth information

346
00:18:00,940 --> 00:18:13,070
thing later on okay I'll jump into the

347
00:18:09,710 --> 00:18:15,559
Maven and dependency part and this is

348
00:18:13,070 --> 00:18:17,750
just an example how many dependencies in

349
00:18:15,559 --> 00:18:23,750
a modern java application what you look

350
00:18:17,750 --> 00:18:29,480
like I have written or actually I have

351
00:18:23,750 --> 00:18:34,580
just are generated a maven project and I

352
00:18:29,480 --> 00:18:37,630
have added some some dependencies and

353
00:18:34,580 --> 00:18:41,090
third-party libraries that I think are

354
00:18:37,630 --> 00:18:42,169
the minimum that I would use in every

355
00:18:41,090 --> 00:18:44,659
new Java

356
00:18:42,169 --> 00:18:51,260
Springwood application that also runs

357
00:18:44,660 --> 00:18:53,270
something web service so we have the I'm

358
00:18:51,260 --> 00:18:55,340
sorry we have this spring boot starter

359
00:18:53,270 --> 00:18:57,679
spring boot is a framework on top of

360
00:18:55,340 --> 00:19:00,080
Java that actually does a lot for you so

361
00:18:57,679 --> 00:19:02,390
you don't have to program everything and

362
00:19:00,080 --> 00:19:04,879
just can focus on your business case and

363
00:19:02,390 --> 00:19:08,750
don't have to do the Java basics and

364
00:19:04,880 --> 00:19:13,850
it's the most common Java framework

365
00:19:08,750 --> 00:19:16,460
right now so you can add these starters

366
00:19:13,850 --> 00:19:20,469
to this that's third-party libraries

367
00:19:16,460 --> 00:19:23,330
that bring certain functionality like

368
00:19:20,470 --> 00:19:25,130
obviously we make an API so we have to

369
00:19:23,330 --> 00:19:27,649
secure it so we need a starter for

370
00:19:25,130 --> 00:19:31,100
security that does authorization and

371
00:19:27,650 --> 00:19:32,990
authentication stuff out of the box so

372
00:19:31,100 --> 00:19:35,689
you can just add little snippets into

373
00:19:32,990 --> 00:19:39,350
your code and Springwood will actually

374
00:19:35,690 --> 00:19:44,450
have this all programmed out we want to

375
00:19:39,350 --> 00:19:48,580
do an API so we need a web starter to

376
00:19:44,450 --> 00:19:51,620
run a web server actuator can give you

377
00:19:48,580 --> 00:19:55,309
runtime metrics and information about

378
00:19:51,620 --> 00:19:57,409
the health of your application I think

379
00:19:55,309 --> 00:19:58,908
this one is absolutely necessary if you

380
00:19:57,410 --> 00:20:01,580
want to monitor your

381
00:19:58,909 --> 00:20:04,220
application later on and then we have a

382
00:20:01,580 --> 00:20:07,039
test scope so this will not actually run

383
00:20:04,220 --> 00:20:10,509
in the production compilation of the

384
00:20:07,039 --> 00:20:13,908
software where we can test the actual

385
00:20:10,509 --> 00:20:16,309
spring boot framework and also this

386
00:20:13,909 --> 00:20:20,840
spring security that comes with spring

387
00:20:16,309 --> 00:20:23,210
boot security starter and it's not you

388
00:20:20,840 --> 00:20:25,488
don't have to necessarily understand all

389
00:20:23,210 --> 00:20:27,379
the parts of this and and and become a

390
00:20:25,489 --> 00:20:30,229
Java developer to actually use this I

391
00:20:27,379 --> 00:20:32,059
think every language has that has a

392
00:20:30,229 --> 00:20:32,989
dependency management framework can do

393
00:20:32,059 --> 00:20:36,529
stuff like this

394
00:20:32,989 --> 00:20:39,889
oh and obviously we added the vulnerable

395
00:20:36,529 --> 00:20:41,809
Apache stratts version so we can find

396
00:20:39,889 --> 00:20:43,758
something that we actually want to fix

397
00:20:41,809 --> 00:20:47,720
or whitelist

398
00:20:43,759 --> 00:20:53,289
maybe okay and the problem is right now

399
00:20:47,720 --> 00:20:55,700
that these six or seven dependencies

400
00:20:53,289 --> 00:20:57,529
bloat the stuff you see them on the left

401
00:20:55,700 --> 00:21:00,799
side and they block the software and

402
00:20:57,529 --> 00:21:03,619
they download like 80 more dependencies

403
00:21:00,799 --> 00:21:05,690
themselves and they're called transient

404
00:21:03,619 --> 00:21:10,129
dependencies so every dependency brings

405
00:21:05,690 --> 00:21:12,289
more libraries and they bring more

406
00:21:10,129 --> 00:21:16,789
libraries and so on so it's a big

407
00:21:12,289 --> 00:21:19,519
bloated library and well I wanted to say

408
00:21:16,789 --> 00:21:21,440
 up but it's depending on what

409
00:21:19,519 --> 00:21:25,220
you're actually using Springwood is very

410
00:21:21,440 --> 00:21:28,249
very well maintained and they are have a

411
00:21:25,220 --> 00:21:32,539
quite quick reaction time if they find

412
00:21:28,249 --> 00:21:34,359
something okay after set this six maven

413
00:21:32,539 --> 00:21:38,269
dependencies you can find this on github

414
00:21:34,359 --> 00:21:41,449
and I will tell you something more about

415
00:21:38,269 --> 00:21:43,220
it later on and almost 80 transitive or

416
00:21:41,450 --> 00:21:44,809
70 transitive dependencies so it's like

417
00:21:43,220 --> 00:21:47,779
80 overall and they can all have

418
00:21:44,809 --> 00:21:49,849
vulnerabilities and you want to at least

419
00:21:47,779 --> 00:21:55,239
patch the ones that are publicly known

420
00:21:49,849 --> 00:21:58,460
for having security issues so it's like

421
00:21:55,239 --> 00:22:01,729
low-hanging fruit and everyone can find

422
00:21:58,460 --> 00:22:04,489
this and you should too so what can we

423
00:22:01,729 --> 00:22:06,559
do to find vulnerable dependencies or

424
00:22:04,489 --> 00:22:08,599
third-party libraries there's tooling

425
00:22:06,559 --> 00:22:11,700
for this and this is a really big hype

426
00:22:08,599 --> 00:22:14,220
right now in the software industry

427
00:22:11,700 --> 00:22:19,350
this quite a lot of vendors who add

428
00:22:14,220 --> 00:22:22,320
products for this github I'm not big on

429
00:22:19,350 --> 00:22:25,110
advertising for paid services but github

430
00:22:22,320 --> 00:22:27,750
does this for open source public

431
00:22:25,110 --> 00:22:30,570
software so if you have created github

432
00:22:27,750 --> 00:22:33,360
repository as the owner you will see

433
00:22:30,570 --> 00:22:37,620
when github finds a vulnerability in

434
00:22:33,360 --> 00:22:43,020
your dependency system if you use one of

435
00:22:37,620 --> 00:22:45,629
the big programming frameworks and they

436
00:22:43,020 --> 00:22:47,639
will show you an order and alert for

437
00:22:45,630 --> 00:22:49,560
this and if you set the correct

438
00:22:47,640 --> 00:22:52,230
notification settings you would also get

439
00:22:49,560 --> 00:22:55,169
an email for this this is pretty nice

440
00:22:52,230 --> 00:22:56,910
and a couple months ago they added a

441
00:22:55,170 --> 00:22:58,530
system that can also patch your

442
00:22:56,910 --> 00:23:03,300
vulnerabilities or patch your

443
00:22:58,530 --> 00:23:05,460
third-party libraries and well you might

444
00:23:03,300 --> 00:23:08,460
think if the owner sees one of the

445
00:23:05,460 --> 00:23:10,410
problems that's ok because it's still

446
00:23:08,460 --> 00:23:12,420
hidden nobody else sees it but if

447
00:23:10,410 --> 00:23:14,190
someone Fox your repository they are the

448
00:23:12,420 --> 00:23:16,440
owner of the fork so they will get a

449
00:23:14,190 --> 00:23:20,760
notification if github finds the same

450
00:23:16,440 --> 00:23:22,980
vulnerability in their repo for the demo

451
00:23:20,760 --> 00:23:24,360
and for this whole talk I'm using

452
00:23:22,980 --> 00:23:29,160
dependency check because it's an open

453
00:23:24,360 --> 00:23:31,139
source tool it's in in the open web

454
00:23:29,160 --> 00:23:34,650
application security project so if you

455
00:23:31,140 --> 00:23:37,670
contribute or if you donate money to the

456
00:23:34,650 --> 00:23:40,080
OS project some of it will allow the

457
00:23:37,670 --> 00:23:42,150
maintainer of dependency check to make

458
00:23:40,080 --> 00:23:42,750
the software better and it's really well

459
00:23:42,150 --> 00:23:46,620
maintained

460
00:23:42,750 --> 00:23:48,720
they have quick they react quickly if

461
00:23:46,620 --> 00:23:50,989
you ask them something or if you setup a

462
00:23:48,720 --> 00:23:56,310
full request or something like that

463
00:23:50,990 --> 00:23:59,670
ok how does it work this this database

464
00:23:56,310 --> 00:24:03,060
is run by a an American government

465
00:23:59,670 --> 00:24:06,300
organization publicly where you can get

466
00:24:03,060 --> 00:24:07,800
the CVE data so that's the database with

467
00:24:06,300 --> 00:24:10,970
the actual vulnerabilities and their

468
00:24:07,800 --> 00:24:13,230
descriptions and scoring our health and

469
00:24:10,970 --> 00:24:16,320
dependency check downloads this into a

470
00:24:13,230 --> 00:24:20,280
local database and then you can run a

471
00:24:16,320 --> 00:24:22,110
dependency check in maven you can also

472
00:24:20,280 --> 00:24:24,930
use docker if you are not using maven

473
00:24:22,110 --> 00:24:25,520
you can use a command line client to

474
00:24:24,930 --> 00:24:30,410
check your

475
00:24:25,520 --> 00:24:33,080
fair I think for maven or Gradle that's

476
00:24:30,410 --> 00:24:35,210
the same for Java suffer it's really

477
00:24:33,080 --> 00:24:37,730
easy to use it this way but it's up to

478
00:24:35,210 --> 00:24:40,430
you in the end you should check this in

479
00:24:37,730 --> 00:24:44,720
anyway it's not necessarily necessarily

480
00:24:40,430 --> 00:24:49,220
the best one okay let's just see how

481
00:24:44,720 --> 00:24:52,210
this works out okay so I have for the

482
00:24:49,220 --> 00:24:55,430
guys who know Java and maven I have

483
00:24:52,210 --> 00:24:58,970
programmed a maven goal for this oops

484
00:24:55,430 --> 00:25:00,620
and let's just run this check and see

485
00:24:58,970 --> 00:25:03,470
what it tells us and it takes a couple

486
00:25:00,620 --> 00:25:07,729
seconds and the demo repo I have

487
00:25:03,470 --> 00:25:09,170
disabled the automatic update so if you

488
00:25:07,730 --> 00:25:10,700
run this for if you check this out and

489
00:25:09,170 --> 00:25:14,480
if you haven't never used dependency

490
00:25:10,700 --> 00:25:18,230
check before you will be told to update

491
00:25:14,480 --> 00:25:20,240
your database beforehand so some

492
00:25:18,230 --> 00:25:28,520
vulnerabilities were found so our build

493
00:25:20,240 --> 00:25:28,970
broke so this will end in a exit code

494
00:25:28,520 --> 00:25:31,730
one

495
00:25:28,970 --> 00:25:35,690
so anything different from zero is bad

496
00:25:31,730 --> 00:25:37,340
and here you can see the vulnerabilities

497
00:25:35,690 --> 00:25:42,590
that were actually found so we have

498
00:25:37,340 --> 00:25:47,050
Jackson data bind this is the can you

499
00:25:42,590 --> 00:25:51,199
read this in the back thumbs up okay

500
00:25:47,050 --> 00:25:54,620
it's it's a jsonparser that you can use

501
00:25:51,200 --> 00:25:55,910
to for for your application it's pretty

502
00:25:54,620 --> 00:25:57,620
well known and this is one of the

503
00:25:55,910 --> 00:26:01,250
transient dependencies I have not

504
00:25:57,620 --> 00:26:03,860
actually chosen to use this but it comes

505
00:26:01,250 --> 00:26:06,770
with one of the spring boot dependencies

506
00:26:03,860 --> 00:26:09,429
then their spring security and actually

507
00:26:06,770 --> 00:26:12,590
this is an actual vulnerability and

508
00:26:09,430 --> 00:26:16,670
there is a patch for this in two nine

509
00:26:12,590 --> 00:26:19,399
nine one hotfix but the spring boot

510
00:26:16,670 --> 00:26:22,160
version that actually brings this

511
00:26:19,400 --> 00:26:26,780
dependency has not yet been upgraded for

512
00:26:22,160 --> 00:26:28,550
this so this is a if you if you have a

513
00:26:26,780 --> 00:26:31,100
process for fixing this you could

514
00:26:28,550 --> 00:26:33,889
manually upgrade this to two nine nine

515
00:26:31,100 --> 00:26:36,139
one for example and then this should

516
00:26:33,890 --> 00:26:37,350
work out if we have time later on or if

517
00:26:36,140 --> 00:26:39,269
you join my workshop

518
00:26:37,350 --> 00:26:42,928
tomorrow you we can we can play around

519
00:26:39,269 --> 00:26:44,669
with this the spring security core this

520
00:26:42,929 --> 00:26:48,000
is actually a false positive

521
00:26:44,669 --> 00:26:50,700
so spring security core has a or has had

522
00:26:48,000 --> 00:26:53,519
a problem in five zero something and

523
00:26:50,700 --> 00:26:57,330
they have fixed it but somehow this is

524
00:26:53,519 --> 00:26:58,919
still in the vulnerability database so

525
00:26:57,330 --> 00:27:00,299
the vulnerability database will still

526
00:26:58,919 --> 00:27:04,190
have the information that this is

527
00:27:00,299 --> 00:27:07,250
actually problematic and this is for

528
00:27:04,190 --> 00:27:10,590
authentication stuff and authorization

529
00:27:07,250 --> 00:27:15,419
so if this was still an issue and you're

530
00:27:10,590 --> 00:27:19,110
using authorization annotations in Java

531
00:27:15,419 --> 00:27:21,299
you should probably upgrade this and

532
00:27:19,110 --> 00:27:23,789
then there's our good struts

533
00:27:21,299 --> 00:27:25,769
vulnerability which has like ten

534
00:27:23,789 --> 00:27:29,158
vulnerabilities and it's really old it's

535
00:27:25,769 --> 00:27:30,480
from 2017 and the comments file upload

536
00:27:29,159 --> 00:27:34,879
is just another one that comes with

537
00:27:30,480 --> 00:27:34,879
strats so we won't care about this

538
00:27:35,389 --> 00:27:39,600
what's the cool thing about dependency

539
00:27:37,740 --> 00:27:43,529
check I forgot

540
00:27:39,600 --> 00:27:45,059
the app itself does nothing it doesn't

541
00:27:43,529 --> 00:27:46,679
even have a world it's just this is the

542
00:27:45,059 --> 00:27:49,620
basic what you get if you use these

543
00:27:46,679 --> 00:27:52,559
dependencies use you get a web a web

544
00:27:49,620 --> 00:27:54,149
server you get a login screen because we

545
00:27:52,559 --> 00:27:55,950
use security and you could never login

546
00:27:54,149 --> 00:28:00,539
because you have nowhere to find any

547
00:27:55,950 --> 00:28:02,940
user data okay

548
00:28:00,539 --> 00:28:05,850
dependency check not also gives you the

549
00:28:02,940 --> 00:28:08,490
command line references but also

550
00:28:05,850 --> 00:28:12,330
generates an HTML report that you can

551
00:28:08,490 --> 00:28:16,529
use for other stuff and if you like

552
00:28:12,330 --> 00:28:20,158
search for the struts problem whoops

553
00:28:16,529 --> 00:28:22,710
there you go you find a description

554
00:28:20,159 --> 00:28:24,809
what's the actual problem here this is

555
00:28:22,710 --> 00:28:28,620
this one is passed from this CV about

556
00:28:24,809 --> 00:28:31,860
struts and there's some more information

557
00:28:28,620 --> 00:28:33,000
about what happens here and then they

558
00:28:31,860 --> 00:28:39,080
have a list of all the vulnerabilities

559
00:28:33,000 --> 00:28:41,730
found and there's a very good

560
00:28:39,080 --> 00:28:44,250
description what's up actually happening

561
00:28:41,730 --> 00:28:46,260
here and some scoring and this is the

562
00:28:44,250 --> 00:28:48,210
point where you can actually learn just

563
00:28:46,260 --> 00:28:50,299
by by using this dependency check and

564
00:28:48,210 --> 00:28:51,979
checking out the the HTML report

565
00:28:50,299 --> 00:28:54,200
you will find these vulnerable

566
00:28:51,979 --> 00:28:56,059
third-party libraries and the report

567
00:28:54,200 --> 00:29:00,889
will also tell you what what could

568
00:28:56,059 --> 00:29:09,200
potentially happen here and sometimes

569
00:29:00,889 --> 00:29:12,320
there is also a link to exploit DB so

570
00:29:09,200 --> 00:29:16,820
exploit this is the big the big one the

571
00:29:12,320 --> 00:29:20,379
critical 10 zero password thing that I

572
00:29:16,820 --> 00:29:23,539
mentioned earlier and you can also find

573
00:29:20,379 --> 00:29:28,070
working exploits that you can use to

574
00:29:23,539 --> 00:29:32,149
test please only your own servers nobody

575
00:29:28,070 --> 00:29:34,279
else's and usually this is a very good

576
00:29:32,149 --> 00:29:36,248
way to learn about vulnerabilities if

577
00:29:34,279 --> 00:29:39,229
you find them if you have no idea how to

578
00:29:36,249 --> 00:29:41,539
actually what the problem is you look

579
00:29:39,229 --> 00:29:43,070
for in the report for exploit the

580
00:29:41,539 --> 00:29:45,349
Billings or check some of the other

581
00:29:43,070 --> 00:29:51,339
descriptions and some of them are very

582
00:29:45,349 --> 00:29:53,089
very helpful in understanding this stuff

583
00:29:51,339 --> 00:29:57,619
want one more thing

584
00:29:53,089 --> 00:30:00,168
the report also lets you has a prepared

585
00:29:57,619 --> 00:30:10,418
xml statement that you can use to

586
00:30:00,169 --> 00:30:16,190
whitelist false positives string

587
00:30:10,419 --> 00:30:17,570
security there you go so we can we want

588
00:30:16,190 --> 00:30:20,539
to watch your spring security core

589
00:30:17,570 --> 00:30:22,849
because we have read reports that this

590
00:30:20,539 --> 00:30:27,739
is actually false positive so we go to

591
00:30:22,849 --> 00:30:31,450
the suppression button and if the CSS is

592
00:30:27,739 --> 00:30:34,309
working which ayah that is we get some

593
00:30:31,450 --> 00:30:37,339
XML data that we can use for a

594
00:30:34,309 --> 00:30:41,599
configuration file and we can just copy

595
00:30:37,339 --> 00:30:44,418
this and add this to the I think I've

596
00:30:41,599 --> 00:30:46,158
opened it before to a suppressions file

597
00:30:44,419 --> 00:30:48,950
that we have configured in our Java file

598
00:30:46,159 --> 00:30:56,899
and now this CVE

599
00:30:48,950 --> 00:30:59,509
that I have suppressed here so this one

600
00:30:56,899 --> 00:31:01,209
will no longer show up because the

601
00:30:59,509 --> 00:31:03,290
dependency check will now whitelist it

602
00:31:01,210 --> 00:31:13,640
because I've configured this

603
00:31:03,290 --> 00:31:19,340
xml file - before whitelisting or

604
00:31:13,640 --> 00:31:24,950
something how I miss something that okay

605
00:31:19,340 --> 00:31:27,620
I did an upgrade of the dependency check

606
00:31:24,950 --> 00:31:30,200
plugin earlier to prepare for the talk

607
00:31:27,620 --> 00:31:33,229
and apparently something in the XML

608
00:31:30,200 --> 00:31:34,940
description changed so you just have to

609
00:31:33,230 --> 00:31:37,270
trust me that this will would actually

610
00:31:34,940 --> 00:31:44,000
have whitelist of the false positive

611
00:31:37,270 --> 00:31:52,580
okay let's go on with some more fun

612
00:31:44,000 --> 00:31:57,410
stuff okay you can also use the report

613
00:31:52,580 --> 00:31:59,120
to run some report and other reporting

614
00:31:57,410 --> 00:32:01,880
oddity to use it in other reporting

615
00:31:59,120 --> 00:32:04,219
tools like this is sonar a code quality

616
00:32:01,880 --> 00:32:07,429
plug code quality tool that shows you

617
00:32:04,220 --> 00:32:09,559
trends and stuff and we don't have time

618
00:32:07,429 --> 00:32:11,900
for this so docker

619
00:32:09,559 --> 00:32:16,160
who in here has actually scanned their

620
00:32:11,900 --> 00:32:23,059
docker containers for problems three

621
00:32:16,160 --> 00:32:24,710
people very good docker is well you use

622
00:32:23,059 --> 00:32:26,570
you stock review so you know how it

623
00:32:24,710 --> 00:32:28,400
works you pull some container is like

624
00:32:26,570 --> 00:32:32,120
that someone on the internet has built

625
00:32:28,400 --> 00:32:38,720
for you and this is like the euro style

626
00:32:32,120 --> 00:32:41,299
of running software and there's also a

627
00:32:38,720 --> 00:32:44,750
scanner it's called Claire it's has been

628
00:32:41,299 --> 00:32:49,090
written by core OS now owned by Red Hat

629
00:32:44,750 --> 00:32:51,799
now owned by IBM I think they do

630
00:32:49,090 --> 00:32:53,659
container stuff in kubernetes stuff and

631
00:32:51,799 --> 00:32:57,410
so apparently they needed some

632
00:32:53,660 --> 00:33:00,980
containers scanning utilities and it

633
00:32:57,410 --> 00:33:04,580
works similarly they also query the NIST

634
00:33:00,980 --> 00:33:06,500
database but they host the vulnerable

635
00:33:04,580 --> 00:33:09,409
one durability data in a another

636
00:33:06,500 --> 00:33:12,049
database on your local servers and they

637
00:33:09,410 --> 00:33:15,710
run a Claire server and you can run a

638
00:33:12,049 --> 00:33:17,900
client that actually feeds your daughter

639
00:33:15,710 --> 00:33:20,330
to the server and the server will scan

640
00:33:17,900 --> 00:33:24,670
all the doctor layers and tell you

641
00:33:20,330 --> 00:33:24,669
what's happening okay

642
00:33:27,310 --> 00:33:35,149
so I have started a class server and a

643
00:33:31,460 --> 00:33:38,240
database on my on my machine usually you

644
00:33:35,150 --> 00:33:41,480
would have to run these servers in your

645
00:33:38,240 --> 00:33:43,700
infrastructure somewhere and I have

646
00:33:41,480 --> 00:33:54,920
packaged this app that we wrote earlier

647
00:33:43,700 --> 00:33:57,530
into a container and I have used there

648
00:33:54,920 --> 00:33:59,470
you go I've used a basic java image for

649
00:33:57,530 --> 00:34:04,970
Java eight it's one of the official

650
00:33:59,470 --> 00:34:11,179
images from open JDK and let's see what

651
00:34:04,970 --> 00:34:16,490
happens to this so this takes a couple

652
00:34:11,179 --> 00:34:18,679
of seconds so the and we're pretty late

653
00:34:16,489 --> 00:34:22,819
so we'll just go to the you see a lot of

654
00:34:18,679 --> 00:34:25,159
red and earlier I ran this test and it

655
00:34:22,820 --> 00:34:27,590
found that these are the image content

656
00:34:25,159 --> 00:34:30,409
ninety-six vulnerabilities and they are

657
00:34:27,590 --> 00:34:32,660
all already in the base image so this

658
00:34:30,409 --> 00:34:34,520
has no none of the vulnerabilities that

659
00:34:32,659 --> 00:34:36,710
we found in the java application

660
00:34:34,520 --> 00:34:39,500
this is everything you get when you

661
00:34:36,710 --> 00:34:42,830
download a new open JDK package and this

662
00:34:39,500 --> 00:34:45,139
is the slim one so it's not loaded

663
00:34:42,830 --> 00:34:48,529
and there's fun stuff like gee lip see

664
00:34:45,139 --> 00:34:53,080
obviously and util-linux and you can

665
00:34:48,530 --> 00:34:57,740
actually also whitelist false positives

666
00:34:53,080 --> 00:35:02,360
or you can also whitelist stuff that you

667
00:34:57,740 --> 00:35:05,000
know that are not not applying to your

668
00:35:02,360 --> 00:35:07,250
software like if you have a problem with

669
00:35:05,000 --> 00:35:09,860
the SSH daemon you someone could

670
00:35:07,250 --> 00:35:11,840
probably break into your server but in

671
00:35:09,860 --> 00:35:16,760
darker you usually don't open the port

672
00:35:11,840 --> 00:35:23,570
so it should not be so hard to just not

673
00:35:16,760 --> 00:35:26,090
scan for it anymore and then you can you

674
00:35:23,570 --> 00:35:28,190
can also set thresholds I will not show

675
00:35:26,090 --> 00:35:31,910
the examples now because

676
00:35:28,190 --> 00:35:35,180
little behind so you could choose only

677
00:35:31,910 --> 00:35:36,980
to see a high or critical or medium

678
00:35:35,180 --> 00:35:40,970
vulnerabilities and upwards and

679
00:35:36,980 --> 00:35:42,920
everything else is Auto approved and to

680
00:35:40,970 --> 00:35:48,160
run this in continuous integration you

681
00:35:42,920 --> 00:35:51,280
might have to add some more fun stuff

682
00:35:48,160 --> 00:35:54,500
typically if you run stuff in modern

683
00:35:51,280 --> 00:35:56,990
build tools like git lab CI github

684
00:35:54,500 --> 00:36:01,490
automated tools you won't necessarily

685
00:35:56,990 --> 00:36:03,439
have the power or the the time to set up

686
00:36:01,490 --> 00:36:05,660
infrastructure and you don't need it so

687
00:36:03,440 --> 00:36:07,250
you maybe don't want to run a class

688
00:36:05,660 --> 00:36:09,140
server that you have to care for all the

689
00:36:07,250 --> 00:36:13,210
time you don't want to manage another

690
00:36:09,140 --> 00:36:15,980
Postgres database so what you can do is

691
00:36:13,210 --> 00:36:18,050
inside continuous integration just

692
00:36:15,980 --> 00:36:22,730
before the scan the actual scan happens

693
00:36:18,050 --> 00:36:25,550
you can start a database container and a

694
00:36:22,730 --> 00:36:28,190
clear scanner container and this guy our

695
00:36:25,550 --> 00:36:29,690
mean C is something I can indeed as a

696
00:36:28,190 --> 00:36:33,680
French sounding name and I can pronounce

697
00:36:29,690 --> 00:36:35,690
it you can find his repos on github he

698
00:36:33,680 --> 00:36:37,730
actually came up with this solution so

699
00:36:35,690 --> 00:36:40,430
just before you run the scan you start

700
00:36:37,730 --> 00:36:46,700
those docker containers and after the

701
00:36:40,430 --> 00:36:48,290
scan you just stop them again and I've

702
00:36:46,700 --> 00:36:50,029
obviously just started them on my

703
00:36:48,290 --> 00:36:54,109
machine so after the scan I would just

704
00:36:50,030 --> 00:36:56,480
stop them the demo repo contains a

705
00:36:54,109 --> 00:37:00,890
Jenkins file so if you used Jenkins you

706
00:36:56,480 --> 00:37:02,020
can also run all these tests you might

707
00:37:00,890 --> 00:37:10,220
have to play around with little

708
00:37:02,020 --> 00:37:12,920
injections with the credentials of the

709
00:37:10,220 --> 00:37:17,299
Jenkins user and the permissions that

710
00:37:12,920 --> 00:37:20,359
they have there's also public

711
00:37:17,300 --> 00:37:23,450
repositories that do the scan for you

712
00:37:20,359 --> 00:37:25,910
like clay is an alternative to docker

713
00:37:23,450 --> 00:37:27,799
hub so you can choose to host your

714
00:37:25,910 --> 00:37:29,210
repositories with Quay and they will do

715
00:37:27,800 --> 00:37:33,950
a scan for you

716
00:37:29,210 --> 00:37:36,410
github or get lab offers a a method to

717
00:37:33,950 --> 00:37:40,419
scan your container for you and give you

718
00:37:36,410 --> 00:37:40,420
a hint about broken stuff

719
00:37:41,270 --> 00:37:49,820
okay and I think we have some more time

720
00:37:44,090 --> 00:37:51,460
to do a quick quick API scan as I

721
00:37:49,820 --> 00:37:54,710
mentioned earlier I've started the

722
00:37:51,460 --> 00:38:03,250
application on my local machine and I

723
00:37:54,710 --> 00:38:06,770
could now run a zap I'm so sorry

724
00:38:03,250 --> 00:38:10,970
okay so let's start over

725
00:38:06,770 --> 00:38:12,970
sorry we can use another almost tool

726
00:38:10,970 --> 00:38:16,189
it's called that attack proxy to

727
00:38:12,970 --> 00:38:19,700
actually attack our API and dynamically

728
00:38:16,190 --> 00:38:22,790
scan it to find actual vulnerabilities

729
00:38:19,700 --> 00:38:25,040
that it's serving like stuff like that

730
00:38:22,790 --> 00:38:30,020
offers SQL injection or cross-site

731
00:38:25,040 --> 00:38:32,810
scripting and what we is not important

732
00:38:30,020 --> 00:38:34,340
what we do here is just use docker again

733
00:38:32,810 --> 00:38:39,440
because we've great docker and container

734
00:38:34,340 --> 00:38:41,480
fans so we can download a docker

735
00:38:39,440 --> 00:38:43,430
container that they provide that

736
00:38:41,480 --> 00:38:44,870
actually has the scanner built in and

737
00:38:43,430 --> 00:38:50,839
then you can just run it against your

738
00:38:44,870 --> 00:38:53,390
website and I will just show you the

739
00:38:50,840 --> 00:38:56,060
report that is actually coming out of

740
00:38:53,390 --> 00:38:57,529
this and I've taken the liberty a couple

741
00:38:56,060 --> 00:39:02,180
of weeks ago just scanned this annex

742
00:38:57,530 --> 00:39:04,760
website so please don't hack us and the

743
00:39:02,180 --> 00:39:09,020
scanner shows and this is very very cool

744
00:39:04,760 --> 00:39:11,300
about this tool also a great description

745
00:39:09,020 --> 00:39:14,060
about the actual vulnerabilities because

746
00:39:11,300 --> 00:39:18,310
like I have no idea of what the X frame

747
00:39:14,060 --> 00:39:21,950
method option header is does any of you

748
00:39:18,310 --> 00:39:24,410
another two people very good but it

749
00:39:21,950 --> 00:39:26,419
actually it's is I think in this

750
00:39:24,410 --> 00:39:28,910
solution there is always a description

751
00:39:26,420 --> 00:39:30,950
what the actual problem here is and what

752
00:39:28,910 --> 00:39:34,520
you can do to fix it and there's also

753
00:39:30,950 --> 00:39:36,259
references where this is where there's

754
00:39:34,520 --> 00:39:42,500
the description for this and where you

755
00:39:36,260 --> 00:39:46,970
can find are you okay good where you can

756
00:39:42,500 --> 00:39:50,630
find more options what you can do I will

757
00:39:46,970 --> 00:39:55,730
run one more

758
00:39:50,630 --> 00:39:57,380
attack I think yeah this also takes some

759
00:39:55,730 --> 00:40:01,610
time so I've already done this before

760
00:39:57,380 --> 00:40:02,810
for you and if you run the the this

761
00:40:01,610 --> 00:40:05,570
against the cynic side

762
00:40:02,810 --> 00:40:08,930
nowadays we run WordPress so you will

763
00:40:05,570 --> 00:40:12,830
find a lot of warnings that might or

764
00:40:08,930 --> 00:40:16,549
might not be critical we have a company

765
00:40:12,830 --> 00:40:20,029
that does the page for us so maybe we

766
00:40:16,550 --> 00:40:23,390
should address them with this and then

767
00:40:20,030 --> 00:40:27,040
again this is just a spider so this one

768
00:40:23,390 --> 00:40:34,150
this attack will go to I think I

769
00:40:27,040 --> 00:40:38,240
configured Zune XD somewhere there and

770
00:40:34,150 --> 00:40:40,190
this will start at a landing page that

771
00:40:38,240 --> 00:40:42,049
you configure at a target and we it will

772
00:40:40,190 --> 00:40:44,390
just spider all the links inside this

773
00:40:42,050 --> 00:40:47,990
page and just Traverse into deeper into

774
00:40:44,390 --> 00:40:50,870
the into the page you give it you can

775
00:40:47,990 --> 00:40:55,279
also run this and feed it an open API

776
00:40:50,870 --> 00:40:58,700
spec so if you develop an your own

777
00:40:55,280 --> 00:41:01,940
application you usually know which API

778
00:40:58,700 --> 00:41:04,189
endpoints you are serving you might

779
00:41:01,940 --> 00:41:06,890
generate this using tools like swagger

780
00:41:04,190 --> 00:41:10,460
if you know this but let's say you have

781
00:41:06,890 --> 00:41:14,240
like three endpoints like login or I

782
00:41:10,460 --> 00:41:19,090
don't know shop and web page something

783
00:41:14,240 --> 00:41:22,520
like that you might tell the tool which

784
00:41:19,090 --> 00:41:25,370
which API endpoints or which URLs to

785
00:41:22,520 --> 00:41:27,230
look for so you save the time that it

786
00:41:25,370 --> 00:41:29,720
would use to spider all these links and

787
00:41:27,230 --> 00:41:38,060
the longer it runs obviously the more

788
00:41:29,720 --> 00:41:41,540
it's able to find okay I'm a little

789
00:41:38,060 --> 00:41:45,700
sorry that I had to rush to the end if

790
00:41:41,540 --> 00:41:48,860
you want to try this more in-depth

791
00:41:45,700 --> 00:41:51,939
Daniel and I are hosting a two hour

792
00:41:48,860 --> 00:41:55,820
workshop about this where we will show

793
00:41:51,940 --> 00:41:58,130
you more the usage of the tools and you

794
00:41:55,820 --> 00:42:00,910
can ask questions and might just get

795
00:41:58,130 --> 00:42:05,140
your hands dirty and try this yourself

796
00:42:00,910 --> 00:42:07,390
tomorrow I think it's 3:15 p.m. it has

797
00:42:05,140 --> 00:42:11,589
been rescheduled for a couple times so

798
00:42:07,390 --> 00:42:13,930
you may 3 headed monkeys are scheduled I

799
00:42:11,590 --> 00:42:16,240
guess if you don't heck if you can make

800
00:42:13,930 --> 00:42:20,680
it you can also stop by our village

801
00:42:16,240 --> 00:42:27,569
vacant business world and ask your

802
00:42:20,680 --> 00:42:29,980
questions and well usually I would

803
00:42:27,570 --> 00:42:32,110
discuss this in the end this is like

804
00:42:29,980 --> 00:42:35,410
this is about the process what can you

805
00:42:32,110 --> 00:42:37,990
do maybe one sentence about this in my

806
00:42:35,410 --> 00:42:40,810
current team if if a vulnerability is

807
00:42:37,990 --> 00:42:43,089
found the creator of the current pull

808
00:42:40,810 --> 00:42:47,560
request is also responsible to fix this

809
00:42:43,090 --> 00:42:51,790
as soon as possible we have a zero

810
00:42:47,560 --> 00:42:56,580
vulnerabilities policy so anything that

811
00:42:51,790 --> 00:42:59,910
is found has to be fixed immediately if

812
00:42:56,580 --> 00:43:04,390
we found something on our production

813
00:42:59,910 --> 00:43:07,990
code we will also have a job that's

814
00:43:04,390 --> 00:43:09,819
against this nightly and the first one

815
00:43:07,990 --> 00:43:12,279
to be in the office or the one on call

816
00:43:09,820 --> 00:43:15,010
also is a responsibility to responsible

817
00:43:12,280 --> 00:43:16,540
to at least look into the issue so they

818
00:43:15,010 --> 00:43:17,050
could find out rights it's a false

819
00:43:16,540 --> 00:43:19,300
positive

820
00:43:17,050 --> 00:43:22,420
they might just suppress it they could

821
00:43:19,300 --> 00:43:26,950
find out that it's a horrible horrible

822
00:43:22,420 --> 00:43:29,500
bad possibility to bring your own your

823
00:43:26,950 --> 00:43:32,649
own enterprise down so they might want

824
00:43:29,500 --> 00:43:34,720
to patch it immediately but this is

825
00:43:32,650 --> 00:43:36,940
mainly up to you and I think as I

826
00:43:34,720 --> 00:43:40,089
mentioned earlier this is like the most

827
00:43:36,940 --> 00:43:44,850
interesting part for a company and a

828
00:43:40,090 --> 00:43:44,850
development team thank you

829
00:43:50,849 --> 00:43:55,420
all right we have a couple of minutes

830
00:43:53,319 --> 00:43:57,069
left for questions so if you want to ask

831
00:43:55,420 --> 00:43:58,660
a question please come to one of the

832
00:43:57,069 --> 00:44:04,950
microphones in the front or in the back

833
00:43:58,660 --> 00:44:04,950
and ask your question

834
00:44:15,780 --> 00:44:22,500
all right I don't see any questions at

835
00:44:18,870 --> 00:44:26,359
the moment so if you well there is one

836
00:44:22,500 --> 00:44:30,330
please go well I thank you for the talk

837
00:44:26,360 --> 00:44:33,150
my question is about handling false

838
00:44:30,330 --> 00:44:36,509
positives again you already showed an

839
00:44:33,150 --> 00:44:38,100
example and especially dealing with

840
00:44:36,510 --> 00:44:40,230
something like zap you get a lot of

841
00:44:38,100 --> 00:44:42,799
false positive

842
00:44:40,230 --> 00:44:45,720
but sometimes doors are pretty hard like

843
00:44:42,800 --> 00:44:49,680
stuff in libraries which you actually

844
00:44:45,720 --> 00:44:52,890
don't use right so if you use AP is that

845
00:44:49,680 --> 00:44:55,109
are not vulnerable and I mean talking to

846
00:44:52,890 --> 00:44:56,910
development teams I know that they spend

847
00:44:55,110 --> 00:45:00,840
most of their time handling exceptions

848
00:44:56,910 --> 00:45:02,580
do you have some general recommendation

849
00:45:00,840 --> 00:45:07,740
or could you share some experience

850
00:45:02,580 --> 00:45:11,370
regarding that especially in dynamic

851
00:45:07,740 --> 00:45:13,259
scanning with URLs or api's or web

852
00:45:11,370 --> 00:45:18,330
servers this is like really

853
00:45:13,260 --> 00:45:20,970
time-consuming I can maybe share example

854
00:45:18,330 --> 00:45:21,840
that I've seen in a team of a friend of

855
00:45:20,970 --> 00:45:24,419
mine

856
00:45:21,840 --> 00:45:27,000
they run API tests every night and when

857
00:45:24,420 --> 00:45:29,760
they started this they just sat down for

858
00:45:27,000 --> 00:45:31,530
a couple of days actually and because

859
00:45:29,760 --> 00:45:34,200
they have a very big application that

860
00:45:31,530 --> 00:45:41,910
has grown over the years with a big big

861
00:45:34,200 --> 00:45:44,040
API and they scanned this and with with

862
00:45:41,910 --> 00:45:46,589
the open eyes open API specification

863
00:45:44,040 --> 00:45:49,050
that they had generated earlier they

864
00:45:46,590 --> 00:45:52,440
scanned their app and then they actually

865
00:45:49,050 --> 00:45:56,040
sat down and checked every vulnerability

866
00:45:52,440 --> 00:45:57,930
that zaps bad out so and and I think

867
00:45:56,040 --> 00:46:00,210
that's the only way to do it you have to

868
00:45:57,930 --> 00:46:03,419
take the time and and get all of those

869
00:46:00,210 --> 00:46:06,180
and sorry if you're at a point where you

870
00:46:03,420 --> 00:46:08,580
have zero new vulnerabilities or zero

871
00:46:06,180 --> 00:46:12,839
vulnerabilities found that you think are

872
00:46:08,580 --> 00:46:15,240
worth fixing then you can do for example

873
00:46:12,840 --> 00:46:18,330
a weekly task or a nightly build that

874
00:46:15,240 --> 00:46:21,359
checks your API and if something new is

875
00:46:18,330 --> 00:46:24,450
found you have to fix it according to

876
00:46:21,360 --> 00:46:28,280
your policy but I don't think there's a

877
00:46:24,450 --> 00:46:31,399
good way to do this differently

878
00:46:28,280 --> 00:46:34,220
well you can you can always if you have

879
00:46:31,400 --> 00:46:36,350
like libraries that are vulnerable in

880
00:46:34,220 --> 00:46:38,600
and that you don't really need I'm a

881
00:46:36,350 --> 00:46:41,980
biggest the biggest fan of deleting your

882
00:46:38,600 --> 00:46:45,170
code if you don't need it or deleting or

883
00:46:41,980 --> 00:46:49,670
black holing api's that you don't need

884
00:46:45,170 --> 00:46:52,390
so I think it's it's not if you are if

885
00:46:49,670 --> 00:46:55,010
you're new to this you should always

886
00:46:52,390 --> 00:46:56,569
maybe talk to your security team or if

887
00:46:55,010 --> 00:46:57,830
you're not sure to the networking team

888
00:46:56,570 --> 00:47:00,140
or if you're the networking team

889
00:46:57,830 --> 00:47:02,529
yourself you should probably think about

890
00:47:00,140 --> 00:47:05,359
your firewall rules and stuff like that

891
00:47:02,530 --> 00:47:09,800
but I think you have to address every

892
00:47:05,360 --> 00:47:10,700
vulnerability that is found that's

893
00:47:09,800 --> 00:47:12,980
painful

894
00:47:10,700 --> 00:47:15,589
alright then maybe let's do one last

895
00:47:12,980 --> 00:47:17,450
question from the back okay thank you

896
00:47:15,590 --> 00:47:20,390
for your talk do you have any we have

897
00:47:17,450 --> 00:47:23,149
any experience with growl VM or Krakow's

898
00:47:20,390 --> 00:47:24,830
because if you have all this bloat in

899
00:47:23,150 --> 00:47:28,300
your containers it's easy to get

900
00:47:24,830 --> 00:47:32,330
confused and to run the bare necessities

901
00:47:28,300 --> 00:47:35,300
it could be interesting to have XY

902
00:47:32,330 --> 00:47:38,330
experiences with Maul as bare metal I

903
00:47:35,300 --> 00:47:42,650
will bear coat containers without any

904
00:47:38,330 --> 00:47:45,590
operating system or I think it's it's a

905
00:47:42,650 --> 00:47:48,230
general rule to use as as little

906
00:47:45,590 --> 00:47:50,000
suffered to run your code on as as you

907
00:47:48,230 --> 00:47:54,080
do itself away one of the darker best

908
00:47:50,000 --> 00:47:56,510
practices I think in Dockery you can use

909
00:47:54,080 --> 00:47:59,360
the official like in Java you can use

910
00:47:56,510 --> 00:48:01,520
the open JDK official Alpine images and

911
00:47:59,360 --> 00:48:04,330
they come if you download them right now

912
00:48:01,520 --> 00:48:07,610
they won't come with any vulnerabilities

913
00:48:04,330 --> 00:48:11,120
the a little problem with the with the

914
00:48:07,610 --> 00:48:13,310
scanners that I have used is that stuff

915
00:48:11,120 --> 00:48:15,770
like growl DM doesn't have a container

916
00:48:13,310 --> 00:48:18,860
or its stuff that Google provides if you

917
00:48:15,770 --> 00:48:21,920
use gyp if you know this one it will

918
00:48:18,860 --> 00:48:24,440
dynamically create containers and they

919
00:48:21,920 --> 00:48:28,250
are not really containers in the darker

920
00:48:24,440 --> 00:48:34,280
sense so the scanner can actually scan

921
00:48:28,250 --> 00:48:38,120
them I think these are projects that you

922
00:48:34,280 --> 00:48:40,640
have to rely on the maintainer to find

923
00:48:38,120 --> 00:48:42,109
vulnerabilities and fix it but it's also

924
00:48:40,640 --> 00:48:43,430
it's also more easily

925
00:48:42,110 --> 00:48:45,410
to handle it because you can just

926
00:48:43,430 --> 00:48:47,299
upgrade your running systems like

927
00:48:45,410 --> 00:48:52,190
nightly or something like that or every

928
00:48:47,300 --> 00:48:55,660
week every hour alright we're out of

929
00:48:52,190 --> 00:49:04,590
time so thanks so much Sai for the talk

930
00:48:55,660 --> 00:49:04,589
[Applause]

931
00:49:12,200 --> 00:49:16,799
[Music]

932
00:49:17,970 --> 00:49:20,029
you

