1
00:00:06,799 --> 00:00:08,400
hey guys welcome back

2
00:00:08,400 --> 00:00:11,120
uh our next speaker eternal paradox is a

3
00:00:11,120 --> 00:00:12,480
lovely person and he's

4
00:00:12,480 --> 00:00:14,320
actually one of our community members so

5
00:00:14,320 --> 00:00:15,599
i'm gonna go ahead and pass it over to

6
00:00:15,599 --> 00:00:16,079
him now

7
00:00:16,079 --> 00:00:19,439
to present his presentation

8
00:00:21,520 --> 00:00:23,279
all right well my name is eternal

9
00:00:23,279 --> 00:00:25,119
paradox and today we're gonna talk about

10
00:00:25,119 --> 00:00:26,240
capabilities

11
00:00:26,240 --> 00:00:28,160
that one vulnerability vector we don't

12
00:00:28,160 --> 00:00:30,400
realize exists

13
00:00:30,400 --> 00:00:33,040
so who am i well i must have a security

14
00:00:33,040 --> 00:00:33,760
enthusiast

15
00:00:33,760 --> 00:00:35,760
i've always loved things like hacking

16
00:00:35,760 --> 00:00:38,239
cyber security cryptography

17
00:00:38,239 --> 00:00:40,239
it's basically a never-ending puzzle

18
00:00:40,239 --> 00:00:41,680
solving

19
00:00:41,680 --> 00:00:44,079
what are my hobbies again i love hacking

20
00:00:44,079 --> 00:00:45,920
i love going to a gym i love watching

21
00:00:45,920 --> 00:00:47,200
anime

22
00:00:47,200 --> 00:00:49,120
my recent accomplishments have been well

23
00:00:49,120 --> 00:00:51,120
my most proud proudest accomplishments

24
00:00:51,120 --> 00:00:51,680
have been

25
00:00:51,680 --> 00:00:55,280
vhl and my oscp so why am i here why am

26
00:00:55,280 --> 00:00:56,640
i presenting all of you

27
00:00:56,640 --> 00:00:59,680
this well on my ocp in order to study i

28
00:00:59,680 --> 00:01:00,719
had to learn something called

29
00:01:00,719 --> 00:01:01,760
capabilities

30
00:01:01,760 --> 00:01:03,520
and in one of the labs you had to do

31
00:01:03,520 --> 00:01:04,879
privilege escalation

32
00:01:04,879 --> 00:01:06,080
but the cool thing of this privilege

33
00:01:06,080 --> 00:01:07,680
escalation was that it was supposed to

34
00:01:07,680 --> 00:01:09,680
be via kernel exploitation

35
00:01:09,680 --> 00:01:11,200
now that's another technique that i'm

36
00:01:11,200 --> 00:01:13,119
not going to discuss today but the cool

37
00:01:13,119 --> 00:01:14,640
thing is that i noticed that there were

38
00:01:14,640 --> 00:01:16,560
capabilities running on that lab

39
00:01:16,560 --> 00:01:18,240
and i was able to pawn it in a different

40
00:01:18,240 --> 00:01:20,479
way so hopefully after this presentation

41
00:01:20,479 --> 00:01:22,479
you guys can do the same

42
00:01:22,479 --> 00:01:24,400
so this is more or less the index of all

43
00:01:24,400 --> 00:01:25,280
the points that we're going to be

44
00:01:25,280 --> 00:01:26,080
talking about

45
00:01:26,080 --> 00:01:27,680
we're going to specify what our

46
00:01:27,680 --> 00:01:29,520
capabilities we're going to explain what

47
00:01:29,520 --> 00:01:30,560
our next be

48
00:01:30,560 --> 00:01:33,759
what our sets what's the usage examples

49
00:01:33,759 --> 00:01:34,720
then we're going to go into the

50
00:01:34,720 --> 00:01:36,320
practical stuff so actually scenarios

51
00:01:36,320 --> 00:01:37,439
where we're actually

52
00:01:37,439 --> 00:01:39,840
exploiting privilege escalation we're

53
00:01:39,840 --> 00:01:40,880
going to go to questions

54
00:01:40,880 --> 00:01:43,119
and find it to the end all right so what

55
00:01:43,119 --> 00:01:44,799
are capabilities

56
00:01:44,799 --> 00:01:46,960
well i could present you by you reading

57
00:01:46,960 --> 00:01:47,840
all this manual

58
00:01:47,840 --> 00:01:49,360
but it gets really hefty so let me

59
00:01:49,360 --> 00:01:50,960
explain it in a better way

60
00:01:50,960 --> 00:01:53,360
capabilities are attributes that we give

61
00:01:53,360 --> 00:01:54,000
a binary

62
00:01:54,000 --> 00:01:56,159
in order to bypass some things what does

63
00:01:56,159 --> 00:01:57,119
that mean

64
00:01:57,119 --> 00:01:59,360
all right so we know that linux works

65
00:01:59,360 --> 00:02:00,719
with different privileges

66
00:02:00,719 --> 00:02:03,840
for example i if i if i was eternal

67
00:02:03,840 --> 00:02:05,759
i cannot do things that root can or the

68
00:02:05,759 --> 00:02:07,360
administrator can

69
00:02:07,360 --> 00:02:09,440
but here's the catch say for example you

70
00:02:09,440 --> 00:02:11,200
want to read itsy shadow right it's a

71
00:02:11,200 --> 00:02:13,280
shadow is basically a file where all the

72
00:02:13,280 --> 00:02:14,000
passwords

73
00:02:14,000 --> 00:02:17,280
contained all the hatches are contained

74
00:02:17,280 --> 00:02:19,680
but what happens when you run carry to

75
00:02:19,680 --> 00:02:21,120
shadow as eternal it's going to give me

76
00:02:21,120 --> 00:02:22,000
permission denied

77
00:02:22,000 --> 00:02:23,760
because i don't have the sufficient user

78
00:02:23,760 --> 00:02:26,160
privilege so instead i need to become

79
00:02:26,160 --> 00:02:27,200
root

80
00:02:27,200 --> 00:02:29,440
but with capabilities if we apply for

81
00:02:29,440 --> 00:02:31,519
example a capability to cut

82
00:02:31,519 --> 00:02:34,160
that would allow to bypass the reading

83
00:02:34,160 --> 00:02:35,360
permissions

84
00:02:35,360 --> 00:02:37,040
then even though i'm eternal i would

85
00:02:37,040 --> 00:02:38,800
still be able to read

86
00:02:38,800 --> 00:02:42,000
root level root level files

87
00:02:42,000 --> 00:02:43,599
all right so two new concepts that we

88
00:02:43,599 --> 00:02:45,280
need to understand before we really dive

89
00:02:45,280 --> 00:02:47,120
deep into capabilities

90
00:02:47,120 --> 00:02:50,879
what is exactly well exactly or also

91
00:02:50,879 --> 00:02:53,280
um named this executor program it's

92
00:02:53,280 --> 00:02:54,000
essentially

93
00:02:54,000 --> 00:02:57,519
a little um executable which we're gonna

94
00:02:57,519 --> 00:02:58,159
run

95
00:02:58,159 --> 00:03:00,720
and it its main purpose is to run a

96
00:03:00,720 --> 00:03:02,720
specific program where we set up

97
00:03:02,720 --> 00:03:05,840
as a argument it's path name why is this

98
00:03:05,840 --> 00:03:06,959
important

99
00:03:06,959 --> 00:03:10,080
because um on at least on c

100
00:03:10,080 --> 00:03:11,599
before you can run something it's not

101
00:03:11,599 --> 00:03:14,400
like bash where you can just say bash.h

102
00:03:14,400 --> 00:03:16,080
you need to actually compile something

103
00:03:16,080 --> 00:03:18,000
and then run it for example

104
00:03:18,000 --> 00:03:20,239
on my left i did a really quick script i

105
00:03:20,239 --> 00:03:21,440
said include stb

106
00:03:21,440 --> 00:03:25,280
library um initiate the function xxv

107
00:03:25,280 --> 00:03:27,599
use the function main and then run xxv

108
00:03:27,599 --> 00:03:29,840
with slash pin slash sh

109
00:03:29,840 --> 00:03:31,519
now don't worry about the zeros this is

110
00:03:31,519 --> 00:03:33,120
just specifying what argument i need to

111
00:03:33,120 --> 00:03:34,080
run on the shell

112
00:03:34,080 --> 00:03:36,080
but because it's just one command it's

113
00:03:36,080 --> 00:03:37,120
all zeros

114
00:03:37,120 --> 00:03:39,200
then on my left i actually compile

115
00:03:39,200 --> 00:03:40,400
exactly

116
00:03:40,400 --> 00:03:42,080
and as you can see when compiled it runs

117
00:03:42,080 --> 00:03:44,000
as a shell so why was this part

118
00:03:44,000 --> 00:03:44,799
important

119
00:03:44,799 --> 00:03:46,640
well the reason behind it is because

120
00:03:46,640 --> 00:03:47,920
capabilities use

121
00:03:47,920 --> 00:03:50,959
xxv kinda behavior meaning that when

122
00:03:50,959 --> 00:03:52,159
they run they're gonna run

123
00:03:52,159 --> 00:03:55,680
always as suid of root so

124
00:03:55,680 --> 00:03:58,959
that means that well suid or the user id

125
00:03:58,959 --> 00:04:01,680
is basically what identifies to you as

126
00:04:01,680 --> 00:04:02,239
in

127
00:04:02,239 --> 00:04:04,239
linux privilege for example eternal

128
00:04:04,239 --> 00:04:06,480
might have a uid of 54

129
00:04:06,480 --> 00:04:08,640
but root will always have a uid of zero

130
00:04:08,640 --> 00:04:10,319
and capabilities will always run

131
00:04:10,319 --> 00:04:14,959
a uid of zero right so what are sets

132
00:04:14,959 --> 00:04:17,120
now we talked about capabilities but the

133
00:04:17,120 --> 00:04:18,399
problem with capabilities

134
00:04:18,399 --> 00:04:20,320
is that they're really dangerous in in

135
00:04:20,320 --> 00:04:22,240
its own nature so there needs to be

136
00:04:22,240 --> 00:04:23,840
a way of controlling them and that's

137
00:04:23,840 --> 00:04:25,680
where sets come into play

138
00:04:25,680 --> 00:04:27,280
there's two different types we can

139
00:04:27,280 --> 00:04:29,040
distinguish here

140
00:04:29,040 --> 00:04:30,560
there's four threads and there's four

141
00:04:30,560 --> 00:04:32,720
files now each one of them have

142
00:04:32,720 --> 00:04:34,240
different type of sets

143
00:04:34,240 --> 00:04:36,400
so in terms of files we have permitted

144
00:04:36,400 --> 00:04:38,320
inheritable effective pounding and

145
00:04:38,320 --> 00:04:39,120
ambient

146
00:04:39,120 --> 00:04:40,880
and in thread we have every single one

147
00:04:40,880 --> 00:04:43,120
of them except bounding and ambient

148
00:04:43,120 --> 00:04:45,280
so what are they well permitted is

149
00:04:45,280 --> 00:04:46,639
basically hey

150
00:04:46,639 --> 00:04:48,560
do i have permission to use this

151
00:04:48,560 --> 00:04:49,840
capability

152
00:04:49,840 --> 00:04:51,840
and if so what is the best way that i

153
00:04:51,840 --> 00:04:53,600
can run it inheritable

154
00:04:53,600 --> 00:04:56,960
is hey i noticed that my sub process

155
00:04:56,960 --> 00:04:58,880
is also running on the process that

156
00:04:58,880 --> 00:05:00,720
means that because that process is part

157
00:05:00,720 --> 00:05:01,759
of the subprocess

158
00:05:01,759 --> 00:05:04,800
it will inherit that capability effect

159
00:05:04,800 --> 00:05:05,759
effective

160
00:05:05,759 --> 00:05:08,080
means all right cool this capability

161
00:05:08,080 --> 00:05:08,880
works

162
00:05:08,880 --> 00:05:12,080
but how many capabilities can i um map

163
00:05:12,080 --> 00:05:14,960
into a different binary bounding is a

164
00:05:14,960 --> 00:05:16,720
combination of two for example permitted

165
00:05:16,720 --> 00:05:17,360
and effective

166
00:05:17,360 --> 00:05:19,360
inheritable and permitted and ambient

167
00:05:19,360 --> 00:05:20,479
which is really cool

168
00:05:20,479 --> 00:05:22,560
it's the later version and what it does

169
00:05:22,560 --> 00:05:24,080
it dynamically checks

170
00:05:24,080 --> 00:05:26,240
what is the best capability for that um

171
00:05:26,240 --> 00:05:27,360
binary

172
00:05:27,360 --> 00:05:28,720
now it is really important to understand

173
00:05:28,720 --> 00:05:30,720
that usually binaries because of the way

174
00:05:30,720 --> 00:05:32,160
they're made

175
00:05:32,160 --> 00:05:34,160
um they need to be they there has to be

176
00:05:34,160 --> 00:05:35,840
a combo like a bounding combo of

177
00:05:35,840 --> 00:05:37,440
effective and permitted which we will

178
00:05:37,440 --> 00:05:38,479
see later

179
00:05:38,479 --> 00:05:41,120
and on my left this is a bit too this is

180
00:05:41,120 --> 00:05:42,639
advanced to the scope but i just want to

181
00:05:42,639 --> 00:05:44,080
show you how it works

182
00:05:44,080 --> 00:05:46,400
essentially it's mapping every single

183
00:05:46,400 --> 00:05:47,440
set

184
00:05:47,440 --> 00:05:49,919
with other sets like combination of both

185
00:05:49,919 --> 00:05:53,039
we're using or and and logic gate

186
00:05:53,039 --> 00:05:54,880
and it's always doing it before and

187
00:05:54,880 --> 00:05:56,080
after the exact pe

188
00:05:56,080 --> 00:05:57,199
that's like the only important thing

189
00:05:57,199 --> 00:05:59,280
that you guys need to to know also

190
00:05:59,280 --> 00:06:00,479
really important i always leave

191
00:06:00,479 --> 00:06:02,319
reference just in case you guys want to

192
00:06:02,319 --> 00:06:05,919
continue with me right so usage

193
00:06:05,919 --> 00:06:07,600
we understand better how capabilities

194
00:06:07,600 --> 00:06:10,400
work but how do we actually use them

195
00:06:10,400 --> 00:06:13,680
all right so if you see on my top left i

196
00:06:13,680 --> 00:06:15,759
do a little copy which get kind of

197
00:06:15,759 --> 00:06:16,880
modified what does this mean

198
00:06:16,880 --> 00:06:18,960
well first i use the dollar sign to say

199
00:06:18,960 --> 00:06:20,479
that this is a command running

200
00:06:20,479 --> 00:06:21,919
so i'm going to say hey i want to know

201
00:06:21,919 --> 00:06:24,160
the path of cat then i'm going to copy

202
00:06:24,160 --> 00:06:26,000
this path and i'm going to modify it to

203
00:06:26,000 --> 00:06:27,440
cut modified

204
00:06:27,440 --> 00:06:29,280
then i'm going to use get cap cad

205
00:06:29,280 --> 00:06:30,800
modified so what is get cap

206
00:06:30,800 --> 00:06:33,120
well get cap stands for get capabilities

207
00:06:33,120 --> 00:06:34,319
and it's the tool that's going to let

208
00:06:34,319 --> 00:06:34,960
you show

209
00:06:34,960 --> 00:06:37,520
what capabilities are already put or

210
00:06:37,520 --> 00:06:39,919
given to that binary

211
00:06:39,919 --> 00:06:41,520
so right now because we didn't add any

212
00:06:41,520 --> 00:06:43,680
capability we get no output

213
00:06:43,680 --> 00:06:45,199
so what how do we actually set the

214
00:06:45,199 --> 00:06:47,680
capability well we use set cap

215
00:06:47,680 --> 00:06:49,840
and this is interesting so we say set

216
00:06:49,840 --> 00:06:52,800
cap cap set uid plus cp cut modified

217
00:06:52,800 --> 00:06:54,880
so what is cap set uid we'll see a bit

218
00:06:54,880 --> 00:06:55,919
later but

219
00:06:55,919 --> 00:06:57,919
important part the plus means hey i'm

220
00:06:57,919 --> 00:06:59,360
going to append set

221
00:06:59,360 --> 00:07:01,919
and ep means effective and permitted and

222
00:07:01,919 --> 00:07:03,039
usually that's what you're going to see

223
00:07:03,039 --> 00:07:04,639
you're always going to see a capability

224
00:07:04,639 --> 00:07:05,039
plus

225
00:07:05,039 --> 00:07:07,360
effective and permitted so now when we

226
00:07:07,360 --> 00:07:08,479
do get cap again

227
00:07:08,479 --> 00:07:11,120
we see that this cad modified now has

228
00:07:11,120 --> 00:07:12,400
the attribute of cat

229
00:07:12,400 --> 00:07:15,759
cap set uid all right let's say i want

230
00:07:15,759 --> 00:07:17,440
to remove it well it's as simple as just

231
00:07:17,440 --> 00:07:18,880
saying set cap minus r

232
00:07:18,880 --> 00:07:21,199
on cut modified so now when i get cup

233
00:07:21,199 --> 00:07:22,880
again there's nothing

234
00:07:22,880 --> 00:07:24,960
all right so what is my thing on the top

235
00:07:24,960 --> 00:07:26,560
left no top right

236
00:07:26,560 --> 00:07:28,960
so that's cap sage print and what does

237
00:07:28,960 --> 00:07:30,800
it do well this is a really cool tool

238
00:07:30,800 --> 00:07:32,400
essentially it kind of debugs your

239
00:07:32,400 --> 00:07:34,479
capabilities for you and it checks your

240
00:07:34,479 --> 00:07:36,319
privilege mode for example if it's root

241
00:07:36,319 --> 00:07:37,599
it's going to tell you okay these are

242
00:07:37,599 --> 00:07:39,360
all the capabilities that i'm allowed to

243
00:07:39,360 --> 00:07:40,479
use

244
00:07:40,479 --> 00:07:42,639
if you're eternal oh you might not be

245
00:07:42,639 --> 00:07:44,080
able to use this one

246
00:07:44,080 --> 00:07:45,280
and another thing that is pretty

247
00:07:45,280 --> 00:07:47,120
interesting it also tells you what sets

248
00:07:47,120 --> 00:07:49,199
you have currently

249
00:07:49,199 --> 00:07:51,680
in your entire system now this is a

250
00:07:51,680 --> 00:07:52,400
really cool

251
00:07:52,400 --> 00:07:55,120
cool trick which is on my bottom and

252
00:07:55,120 --> 00:07:56,160
it's essentially

253
00:07:56,160 --> 00:07:58,240
we know that cap gets a capability but

254
00:07:58,240 --> 00:08:00,080
the the problem is that

255
00:08:00,080 --> 00:08:02,160
um the problem is that it only has one

256
00:08:02,160 --> 00:08:03,599
path so like if i say

257
00:08:03,599 --> 00:08:06,080
get cap as cad modified it will only get

258
00:08:06,080 --> 00:08:06,879
one

259
00:08:06,879 --> 00:08:08,800
but if you do minus r and that doesn't

260
00:08:08,800 --> 00:08:10,160
stand for remove but actually for

261
00:08:10,160 --> 00:08:10,960
recursive

262
00:08:10,960 --> 00:08:12,160
so what's going to do it's going to

263
00:08:12,160 --> 00:08:14,560
recursively check for every single

264
00:08:14,560 --> 00:08:15,919
part of your system and it's going to

265
00:08:15,919 --> 00:08:18,160
try and get all the capabilities

266
00:08:18,160 --> 00:08:20,160
now why did i do this weird two triangle

267
00:08:20,160 --> 00:08:21,440
definite what is this

268
00:08:21,440 --> 00:08:23,120
well we need to understand what two

269
00:08:23,120 --> 00:08:25,120
triangle is that's standard error

270
00:08:25,120 --> 00:08:26,960
and that's things like hey permission is

271
00:08:26,960 --> 00:08:29,599
denied you're not allowed to be here

272
00:08:29,599 --> 00:08:31,759
by redirecting this to dev no meaning

273
00:08:31,759 --> 00:08:33,360
ambition this to nothing

274
00:08:33,360 --> 00:08:35,200
therefore i'm not going to see any

275
00:08:35,200 --> 00:08:36,559
errors china

276
00:08:36,559 --> 00:08:38,240
so it's a way of bypassing all this

277
00:08:38,240 --> 00:08:39,440
permission that i have permission then i

278
00:08:39,440 --> 00:08:40,640
had permission tonight when i run the

279
00:08:40,640 --> 00:08:41,919
command

280
00:08:41,919 --> 00:08:45,120
all right so examples

281
00:08:45,120 --> 00:08:48,399
um remember this this was the capset uid

282
00:08:48,399 --> 00:08:49,519
plus cp

283
00:08:49,519 --> 00:08:52,080
so what is all this okay well this is

284
00:08:52,080 --> 00:08:53,600
the actual capabilities

285
00:08:53,600 --> 00:08:55,920
we and there's many more which you can

286
00:08:55,920 --> 00:08:57,360
see on the reference page later

287
00:08:57,360 --> 00:08:59,040
if you want but these are for me the

288
00:08:59,040 --> 00:09:00,800
most important ones and for me

289
00:09:00,800 --> 00:09:04,640
the most fun in a sense so capsid uid

290
00:09:04,640 --> 00:09:07,279
capsid uid is a capability that permits

291
00:09:07,279 --> 00:09:09,040
you to modify or bypass

292
00:09:09,040 --> 00:09:10,880
set your id permissions what does this

293
00:09:10,880 --> 00:09:12,880
mean well we talked before about uid

294
00:09:12,880 --> 00:09:14,320
right we talked about how

295
00:09:14,320 --> 00:09:16,399
eternal may not have the same uid as

296
00:09:16,399 --> 00:09:17,680
root

297
00:09:17,680 --> 00:09:20,800
but set uid is a let's say a function

298
00:09:20,800 --> 00:09:22,240
i guess that's the best way of saying it

299
00:09:22,240 --> 00:09:24,080
that lets you change that uid

300
00:09:24,080 --> 00:09:25,600
but of course i may sell the journal

301
00:09:25,600 --> 00:09:27,360
cannot do something like set uid

302
00:09:27,360 --> 00:09:29,680
to root because i don't have permissions

303
00:09:29,680 --> 00:09:30,880
i'm not administrator

304
00:09:30,880 --> 00:09:34,000
unless i use a binary right

305
00:09:34,000 --> 00:09:36,320
that then would have this capability

306
00:09:36,320 --> 00:09:37,839
which you will see later

307
00:09:37,839 --> 00:09:39,440
all right so that's the first one second

308
00:09:39,440 --> 00:09:41,680
one cat deck read search

309
00:09:41,680 --> 00:09:44,560
also um short for domain access control

310
00:09:44,560 --> 00:09:45,920
research bypass

311
00:09:45,920 --> 00:09:48,320
so this capability works the following

312
00:09:48,320 --> 00:09:49,040
way

313
00:09:49,040 --> 00:09:51,120
and as i said before we cannot read cad

314
00:09:51,120 --> 00:09:52,080
itchy shadow

315
00:09:52,080 --> 00:09:54,000
as root but if we were to put for

316
00:09:54,000 --> 00:09:56,000
example a capability such as cap tech

317
00:09:56,000 --> 00:09:57,279
research on cat

318
00:09:57,279 --> 00:09:58,800
we would be able to bypass read

319
00:09:58,800 --> 00:10:00,880
permissions or even write permissions

320
00:10:00,880 --> 00:10:02,880
therefore the exact moment that we're

321
00:10:02,880 --> 00:10:04,079
running cat

322
00:10:04,079 --> 00:10:06,800
well this modified cat sorry then we

323
00:10:06,800 --> 00:10:08,079
will be able to actually reduce the

324
00:10:08,079 --> 00:10:10,640
shadow with low privileged user

325
00:10:10,640 --> 00:10:13,120
and finally cap f owner this is one of

326
00:10:13,120 --> 00:10:14,240
my favorites

327
00:10:14,240 --> 00:10:15,920
basically bypasses permissions of

328
00:10:15,920 --> 00:10:17,440
changing owners

329
00:10:17,440 --> 00:10:20,000
so what what is an owner well when i run

330
00:10:20,000 --> 00:10:20,880
a file

331
00:10:20,880 --> 00:10:23,120
that file well when i make a file that

332
00:10:23,120 --> 00:10:25,279
file is the one that has my contacts for

333
00:10:25,279 --> 00:10:26,079
example if i

334
00:10:26,079 --> 00:10:29,040
if i make a hello.txt eternal is going

335
00:10:29,040 --> 00:10:30,720
to be the owner of the file

336
00:10:30,720 --> 00:10:32,880
if root makes a root.txt root is going

337
00:10:32,880 --> 00:10:35,200
to be the owner of that file

338
00:10:35,200 --> 00:10:38,720
now we can use things like chon or chmod

339
00:10:38,720 --> 00:10:40,880
to modify permissions or ownership of a

340
00:10:40,880 --> 00:10:42,000
file

341
00:10:42,000 --> 00:10:44,640
but here's the cool thing again i

342
00:10:44,640 --> 00:10:46,560
eternal cannot use ch motor c

343
00:10:46,560 --> 00:10:50,079
or ch owner to root because i'm not root

344
00:10:50,079 --> 00:10:52,480
but let's say i for example made ch

345
00:10:52,480 --> 00:10:54,720
owner ch mod with the capability of cap

346
00:10:54,720 --> 00:10:55,279
toner

347
00:10:55,279 --> 00:10:58,240
then i might be able to bypass that all

348
00:10:58,240 --> 00:10:59,680
right

349
00:10:59,680 --> 00:11:02,560
so this is an important part before we

350
00:11:02,560 --> 00:11:05,040
start with the labs

351
00:11:05,040 --> 00:11:08,160
assumptions before scenarios so number

352
00:11:08,160 --> 00:11:09,040
one

353
00:11:09,040 --> 00:11:11,200
we assume that in every single scenario

354
00:11:11,200 --> 00:11:12,560
we're going to use get gap to see what

355
00:11:12,560 --> 00:11:14,160
capabilities the binary has

356
00:11:14,160 --> 00:11:17,360
let me expand on this and this is just a

357
00:11:17,360 --> 00:11:18,880
lab that i'm doing right so

358
00:11:18,880 --> 00:11:20,320
i'm setting everything up but we need to

359
00:11:20,320 --> 00:11:21,760
understand that we need to look this up

360
00:11:21,760 --> 00:11:23,760
in a pen test point of view

361
00:11:23,760 --> 00:11:26,399
meaning that everything is going to be

362
00:11:26,399 --> 00:11:27,519
completely well

363
00:11:27,519 --> 00:11:28,560
it's going to be entire system you're

364
00:11:28,560 --> 00:11:29,440
going to be in the system where you

365
00:11:29,440 --> 00:11:31,360
don't know any single binary at all

366
00:11:31,360 --> 00:11:33,440
so you need to run get cap to make sure

367
00:11:33,440 --> 00:11:34,800
you see what capabilities that

368
00:11:34,800 --> 00:11:38,240
run second we assume that these

369
00:11:38,240 --> 00:11:39,760
scenarios work because root has

370
00:11:39,760 --> 00:11:40,560
accidentally

371
00:11:40,560 --> 00:11:42,160
written capabilities to binaries it

372
00:11:42,160 --> 00:11:43,680
wasn't supposed to

373
00:11:43,680 --> 00:11:45,600
all right so you will notice on my on my

374
00:11:45,600 --> 00:11:47,440
labs that i always say something like

375
00:11:47,440 --> 00:11:47,760
cat

376
00:11:47,760 --> 00:11:50,560
modified a csmo modified tire modified

377
00:11:50,560 --> 00:11:52,160
the reason is because i don't say

378
00:11:52,160 --> 00:11:53,680
because i put the modified is because if

379
00:11:53,680 --> 00:11:55,440
i were to put the original one

380
00:11:55,440 --> 00:11:57,360
then i would basically up my entire

381
00:11:57,360 --> 00:11:59,680
system so yeah but let's assume that

382
00:11:59,680 --> 00:12:01,519
they're all original

383
00:12:01,519 --> 00:12:03,279
third in every scenario on my left

384
00:12:03,279 --> 00:12:05,519
terminal we find the user who is root

385
00:12:05,519 --> 00:12:07,279
meaning it has all privileges and on my

386
00:12:07,279 --> 00:12:09,040
right terminal we find a low privileged

387
00:12:09,040 --> 00:12:09,440
user

388
00:12:09,440 --> 00:12:11,760
who has low level of privileges now

389
00:12:11,760 --> 00:12:12,560
number four

390
00:12:12,560 --> 00:12:14,560
we assume that despite in the demos it's

391
00:12:14,560 --> 00:12:15,839
always binary kept is what i was

392
00:12:15,839 --> 00:12:17,360
explaining this is done to not actually

393
00:12:17,360 --> 00:12:18,800
overwrite the original binaries

394
00:12:18,800 --> 00:12:20,240
we can actually make them seem like they

395
00:12:20,240 --> 00:12:21,920
were the original ones

396
00:12:21,920 --> 00:12:24,880
alright so everything is good we can now

397
00:12:24,880 --> 00:12:25,680
start

398
00:12:25,680 --> 00:12:29,120
so scenario one python when we think of

399
00:12:29,120 --> 00:12:31,120
python we think of coding right i think

400
00:12:31,120 --> 00:12:32,639
of oh yeah i'm just gonna make a python

401
00:12:32,639 --> 00:12:33,200
script

402
00:12:33,200 --> 00:12:35,279
but python is really cool and the reason

403
00:12:35,279 --> 00:12:36,880
behind this because there's two ways of

404
00:12:36,880 --> 00:12:37,519
working

405
00:12:37,519 --> 00:12:40,639
you have terminal and context so you

406
00:12:40,639 --> 00:12:41,519
will see now

407
00:12:41,519 --> 00:12:43,600
first i do a little id to show you guys

408
00:12:43,600 --> 00:12:44,720
my privileges

409
00:12:44,720 --> 00:12:47,839
on the left we have root with uid 0 and

410
00:12:47,839 --> 00:12:49,600
on my right we have low proof with uid

411
00:12:49,600 --> 00:12:51,680
1003

412
00:12:51,680 --> 00:12:54,800
all right so

413
00:12:54,800 --> 00:12:56,480
bet you guys didn't know how to do this

414
00:12:56,480 --> 00:12:58,720
so there's a os system library that we

415
00:12:58,720 --> 00:13:00,560
can run in context of python

416
00:13:00,560 --> 00:13:04,560
which will let us invoke a bash shell

417
00:13:05,680 --> 00:13:07,279
now i'm going to post this to explain

418
00:13:07,279 --> 00:13:09,920
this in a minute

419
00:13:12,000 --> 00:13:14,320
whoops

420
00:13:16,480 --> 00:13:20,240
all right yeah so uh import os

421
00:13:20,240 --> 00:13:22,079
that's the os module which lets you

422
00:13:22,079 --> 00:13:24,079
bring system level functions

423
00:13:24,079 --> 00:13:27,440
then os.uid0 will basically set your uid

424
00:13:27,440 --> 00:13:28,720
to zero meaning that

425
00:13:28,720 --> 00:13:31,360
low priv will not be anymore 1003 he

426
00:13:31,360 --> 00:13:32,480
will be root

427
00:13:32,480 --> 00:13:34,639
but here's a problem we cannot do that

428
00:13:34,639 --> 00:13:36,240
we are not allowed to do that as a

429
00:13:36,240 --> 00:13:38,800
matter of fact

430
00:13:39,600 --> 00:13:42,800
so when we run bin bash oops typo there

431
00:13:42,800 --> 00:13:45,199
my bad

432
00:13:45,760 --> 00:13:49,519
operation not permitted

433
00:13:49,519 --> 00:13:52,480
so before i hit play i want you guys to

434
00:13:52,480 --> 00:13:52,959
think

435
00:13:52,959 --> 00:13:55,760
what capability would root up in

436
00:13:55,760 --> 00:13:57,600
order to be able to bypass this thing

437
00:13:57,600 --> 00:14:00,160
remember we have capsid uid which lets

438
00:14:00,160 --> 00:14:01,600
you change set to id permissions

439
00:14:01,600 --> 00:14:03,760
we have cap tag research that's you

440
00:14:03,760 --> 00:14:05,040
bypass read permissions

441
00:14:05,040 --> 00:14:06,720
and we have captive owner which lets you

442
00:14:06,720 --> 00:14:09,600
change ownership

443
00:14:09,760 --> 00:14:14,000
well a little hint here i did os.uid0

444
00:14:14,000 --> 00:14:17,279
so let's say oh root modified python

445
00:14:17,279 --> 00:14:21,120
three and now it's python three modified

446
00:14:22,079 --> 00:14:23,920
and now we're gonna set the cap of what

447
00:14:23,920 --> 00:14:26,719
capsiduay

448
00:14:27,680 --> 00:14:30,880
we do that we run get cap always to make

449
00:14:30,880 --> 00:14:32,160
sure that it's correct

450
00:14:32,160 --> 00:14:35,040
all right let's set it up we run the

451
00:14:35,040 --> 00:14:37,600
command again

452
00:14:37,600 --> 00:14:40,560
and when we do so

453
00:14:41,360 --> 00:14:43,040
because we've bypassed said uid

454
00:14:43,040 --> 00:14:45,839
permissions

455
00:14:48,800 --> 00:14:51,920
bingo we are root

456
00:14:51,920 --> 00:14:53,440
now this is a really important concept

457
00:14:53,440 --> 00:14:55,360
because you will notice that my gid and

458
00:14:55,360 --> 00:14:56,560
my groups are not

459
00:14:56,560 --> 00:14:58,320
zero in fact they're low proof they're

460
00:14:58,320 --> 00:15:00,480
still low graph what does this mean

461
00:15:00,480 --> 00:15:03,680
well said uid only changes uid now group

462
00:15:03,680 --> 00:15:04,959
id is basically

463
00:15:04,959 --> 00:15:07,519
what group i'm allowed to in the files

464
00:15:07,519 --> 00:15:09,199
and groups is basically what groups are

465
00:15:09,199 --> 00:15:09,760
there

466
00:15:09,760 --> 00:15:12,800
but the most important part is your uid

467
00:15:12,800 --> 00:15:14,000
that's what basically is going to

468
00:15:14,000 --> 00:15:16,000
dictate in what context you can run

469
00:15:16,000 --> 00:15:17,279
things

470
00:15:17,279 --> 00:15:21,920
all right awesome so scenario 2 robbie

471
00:15:24,720 --> 00:15:26,480
now i made basically i'm going to show

472
00:15:26,480 --> 00:15:28,399
you guys three examples of the same

473
00:15:28,399 --> 00:15:29,920
capability so you see

474
00:15:29,920 --> 00:15:32,880
different ways of exploiting it but yeah

475
00:15:32,880 --> 00:15:34,000
i really had a lot of fun

476
00:15:34,000 --> 00:15:36,240
doing this because it's just having

477
00:15:36,240 --> 00:15:37,920
trying to figure out your imagination to

478
00:15:37,920 --> 00:15:38,639
do everything

479
00:15:38,639 --> 00:15:40,320
and then try and find the best way to

480
00:15:40,320 --> 00:15:42,240
exploit something

481
00:15:42,240 --> 00:15:45,120
so we can use process in order to use n

482
00:15:45,120 --> 00:15:47,199
in order to invoke a system

483
00:15:47,199 --> 00:15:50,160
with set uid and then run an sh but

484
00:15:50,160 --> 00:15:51,600
here's a problem when we run the s8 cell

485
00:15:51,600 --> 00:15:54,240
we get operation not permitted so what

486
00:15:54,240 --> 00:15:55,519
do we do

487
00:15:55,519 --> 00:15:59,440
same process uh we copy the binary ruby

488
00:15:59,440 --> 00:16:01,040
file right we assume that root has

489
00:16:01,040 --> 00:16:03,360
misconfigured this

490
00:16:03,360 --> 00:16:05,519
and that he has led by accident a robbie

491
00:16:05,519 --> 00:16:09,199
cap with capsid uid on it

492
00:16:09,199 --> 00:16:12,560
so now when we run it again

493
00:16:17,360 --> 00:16:19,839
clip a bit

494
00:16:21,040 --> 00:16:25,759
there we go root same thing

495
00:16:25,759 --> 00:16:29,040
all right and finally for the same one

496
00:16:29,040 --> 00:16:31,599
php

497
00:16:32,320 --> 00:16:33,759
now then you found really cool how

498
00:16:33,759 --> 00:16:35,279
different programming languages let you

499
00:16:35,279 --> 00:16:37,360
invoke cells just like that

500
00:16:37,360 --> 00:16:38,800
i mean imagine the power that we would

501
00:16:38,800 --> 00:16:40,959
have with discover capabilities

502
00:16:40,959 --> 00:16:43,920
of this type of level all right so here

503
00:16:43,920 --> 00:16:47,199
i'm just going to invoke a normal shell

504
00:16:47,199 --> 00:16:48,800
and then after this i'm going to ask an

505
00:16:48,800 --> 00:16:50,320
interesting question for you guys to

506
00:16:50,320 --> 00:16:52,560
think

507
00:16:52,639 --> 00:16:55,759
so we run system command

508
00:16:55,759 --> 00:16:58,399
id oh we run the shell the shell worked

509
00:16:58,399 --> 00:17:00,480
but we're still low press

510
00:17:00,480 --> 00:17:05,839
so same process

511
00:17:06,319 --> 00:17:09,359
we copy the binary

512
00:17:09,359 --> 00:17:11,439
we append capsaid ready as a matter of

513
00:17:11,439 --> 00:17:13,520
fact always plus cp because we want

514
00:17:13,520 --> 00:17:15,760
effective unpermitted

515
00:17:15,760 --> 00:17:17,520
we do a get cap always to check what

516
00:17:17,520 --> 00:17:19,199
capability has

517
00:17:19,199 --> 00:17:21,919
and we run it

518
00:17:28,720 --> 00:17:31,520
bingo alright so here comes a question

519
00:17:31,520 --> 00:17:32,720
for you guys to think

520
00:17:32,720 --> 00:17:34,720
now let's say that instead of me running

521
00:17:34,720 --> 00:17:37,760
php minus our posix said uid system cmd

522
00:17:37,760 --> 00:17:41,280
i only did php minus r system cmd

523
00:17:41,280 --> 00:17:42,799
would i get low proof or would i get

524
00:17:42,799 --> 00:17:45,120
root

525
00:17:45,440 --> 00:17:48,640
i may give two minutes all right well

526
00:17:48,640 --> 00:17:50,480
actually you will not get root

527
00:17:50,480 --> 00:17:52,240
and the reason behind it is because the

528
00:17:52,240 --> 00:17:53,679
important part here is that i'm always

529
00:17:53,679 --> 00:17:56,559
doing set uid 0 before it

530
00:17:56,559 --> 00:17:58,799
it's basically bypassing the checks of

531
00:17:58,799 --> 00:17:59,600
said uid

532
00:17:59,600 --> 00:18:00,960
this is why it works this is why the

533
00:18:00,960 --> 00:18:02,640
capability in itself is called

534
00:18:02,640 --> 00:18:04,559
said uid if i were to only run the

535
00:18:04,559 --> 00:18:06,480
basket it would say hey what the heck

536
00:18:06,480 --> 00:18:10,640
you're not allowed to do this all right

537
00:18:10,640 --> 00:18:15,120
next one cat did a little foreshadowing

538
00:18:15,120 --> 00:18:16,640
on my start of the presentation so you

539
00:18:16,640 --> 00:18:17,360
guys should know

540
00:18:17,360 --> 00:18:19,760
what this is going to be about so we try

541
00:18:19,760 --> 00:18:21,600
to read curriculum but we're not allowed

542
00:18:21,600 --> 00:18:22,000
to

543
00:18:22,000 --> 00:18:24,880
as a matter of fact

544
00:18:25,039 --> 00:18:27,360
so again what capability should we be

545
00:18:27,360 --> 00:18:28,720
able to use

546
00:18:28,720 --> 00:18:31,679
once root misconfigures modified cat

547
00:18:31,679 --> 00:18:33,200
let's think we want to have read

548
00:18:33,200 --> 00:18:34,160
permissions

549
00:18:34,160 --> 00:18:36,960
bypassed right so we want cap tag quick

550
00:18:36,960 --> 00:18:39,280
search

551
00:18:39,600 --> 00:18:43,840
so plus cp on it

552
00:18:45,440 --> 00:18:48,240
do a kedcap

553
00:18:50,240 --> 00:18:52,880
run it again

554
00:18:54,480 --> 00:18:57,200
and there we go now interesting story in

555
00:18:57,200 --> 00:18:57,760
this

556
00:18:57,760 --> 00:19:00,240
um some of this i got them from get the

557
00:19:00,240 --> 00:19:01,120
 out bins

558
00:19:01,120 --> 00:19:02,720
which is basically a really cool website

559
00:19:02,720 --> 00:19:04,480
that i'll show later on my resource page

560
00:19:04,480 --> 00:19:06,240
where you can see all the capabilities

561
00:19:06,240 --> 00:19:08,000
but this one for example was a

562
00:19:08,000 --> 00:19:10,000
zero day quote-unquote that i made and

563
00:19:10,000 --> 00:19:12,000
the reason behind it is because you

564
00:19:12,000 --> 00:19:13,919
it's it's really out-of-the-box thinking

565
00:19:13,919 --> 00:19:15,280
so you do think okay what does this

566
00:19:15,280 --> 00:19:16,080
binary do

567
00:19:16,080 --> 00:19:18,320
what capabilities can i use and then how

568
00:19:18,320 --> 00:19:20,640
can i exploit it

569
00:19:20,640 --> 00:19:24,080
yeah all right so scenario five tar

570
00:19:24,080 --> 00:19:27,919
whoops i'm gonna add this okay

571
00:19:27,919 --> 00:19:29,840
what is star well tire is kind of like a

572
00:19:29,840 --> 00:19:31,679
kind of zip file where you can like tar

573
00:19:31,679 --> 00:19:33,600
things or entire things

574
00:19:33,600 --> 00:19:35,039
and it's a really cool trick which is

575
00:19:35,039 --> 00:19:37,520
you can try and well this is just me in

576
00:19:37,520 --> 00:19:39,440
order to make my life easier i copy each

577
00:19:39,440 --> 00:19:41,039
shadow on shadow file

578
00:19:41,039 --> 00:19:44,080
so then we have it here so before i i'm

579
00:19:44,080 --> 00:19:45,679
going to post this real quick so see the

580
00:19:45,679 --> 00:19:46,559
root root

581
00:19:46,559 --> 00:19:47,840
the first route is basically my

582
00:19:47,840 --> 00:19:49,679
ownership and then root the other route

583
00:19:49,679 --> 00:19:50,559
is groups

584
00:19:50,559 --> 00:19:51,760
now they just tell me hey i am

585
00:19:51,760 --> 00:19:53,200
blow-proof therefore i cannot read

586
00:19:53,200 --> 00:19:55,039
shadowfall because i don't i'm not the

587
00:19:55,039 --> 00:19:55,600
owner

588
00:19:55,600 --> 00:19:58,879
nor i have any permissions

589
00:19:59,600 --> 00:20:01,200
so i'm going to try and tie this right

590
00:20:01,200 --> 00:20:03,039
there's a little cool

591
00:20:03,039 --> 00:20:04,559
exploit in a sense which is that if you

592
00:20:04,559 --> 00:20:06,880
try entire etsy shadow you might be able

593
00:20:06,880 --> 00:20:07,360
to grab

594
00:20:07,360 --> 00:20:11,120
shadow as the other user but we will see

595
00:20:11,120 --> 00:20:13,039
as imagined that we still will still

596
00:20:13,039 --> 00:20:14,400
have permission tonight as a matter of

597
00:20:14,400 --> 00:20:15,200
fact it says

598
00:20:15,200 --> 00:20:18,320
permission denied so

599
00:20:18,320 --> 00:20:21,120
what can we use here because we're

600
00:20:21,120 --> 00:20:22,400
telling you not waiting right

601
00:20:22,400 --> 00:20:24,159
we're not actually reading tire is just

602
00:20:24,159 --> 00:20:27,440
compressing and uncompressing

603
00:20:27,600 --> 00:20:30,559
well before i actually show you guys the

604
00:20:30,559 --> 00:20:31,679
solution oops

605
00:20:31,679 --> 00:20:33,120
before i show you guys actually the

606
00:20:33,120 --> 00:20:34,720
solution i want to make you think

607
00:20:34,720 --> 00:20:36,080
something

608
00:20:36,080 --> 00:20:37,679
how tire works is basically it writes

609
00:20:37,679 --> 00:20:39,919
things on the file while it's being

610
00:20:39,919 --> 00:20:42,240
tired or entire so the only thing that

611
00:20:42,240 --> 00:20:43,440
can bypass

612
00:20:43,440 --> 00:20:46,480
written permissions is in fact captain

613
00:20:46,480 --> 00:20:48,799
creed search

614
00:20:48,799 --> 00:20:53,760
so when we get to get cap and we notice

615
00:20:53,760 --> 00:20:56,559
that it has cap deck with search on it

616
00:20:56,559 --> 00:21:01,120
when we do it again by doing xvf on it

617
00:21:01,120 --> 00:21:03,840
yep

618
00:21:05,120 --> 00:21:06,320
we see that now it doesn't say

619
00:21:06,320 --> 00:21:07,520
permission tonight as a matter of fact

620
00:21:07,520 --> 00:21:10,320
but it says it's a shadow

621
00:21:10,320 --> 00:21:13,360
what does this mean this means that

622
00:21:13,360 --> 00:21:16,320
now see this shadow file.tar it was able

623
00:21:16,320 --> 00:21:17,679
to beat hard but

624
00:21:17,679 --> 00:21:19,280
look at the interesting part of here the

625
00:21:19,280 --> 00:21:20,960
shadowfall doterra does not contain any

626
00:21:20,960 --> 00:21:21,919
more root root

627
00:21:21,919 --> 00:21:25,520
it contains low proven low pref

628
00:21:27,679 --> 00:21:31,200
so now once we unpair this

629
00:21:31,200 --> 00:21:33,440
and this is for me like to be fair i

630
00:21:33,440 --> 00:21:34,320
love this

631
00:21:34,320 --> 00:21:38,159
when we when we enter this by using xvf

632
00:21:38,159 --> 00:21:40,480
we will notice that this new hc shadow

633
00:21:40,480 --> 00:21:41,440
directory

634
00:21:41,440 --> 00:21:44,400
is not root anymore it's me therefore i

635
00:21:44,400 --> 00:21:46,240
can just read it

636
00:21:46,240 --> 00:21:49,360
and i find that honestly amazing

637
00:21:49,360 --> 00:21:51,760
yeah capabilities are really cool man

638
00:21:51,760 --> 00:21:53,200
all right so scenario six

639
00:21:53,200 --> 00:21:55,760
chmod now we've talked about many

640
00:21:55,760 --> 00:21:57,600
capabilities except one

641
00:21:57,600 --> 00:22:00,080
copy phoner so let's look at this this

642
00:22:00,080 --> 00:22:02,000
is a bit ctfv right let's say that

643
00:22:02,000 --> 00:22:04,880
the root decides to do something as oh

644
00:22:04,880 --> 00:22:08,000
only root can see this file

645
00:22:08,000 --> 00:22:10,480
right now we append it to world.txt and

646
00:22:10,480 --> 00:22:12,400
just for measures we do chmod zero zero

647
00:22:12,400 --> 00:22:13,919
zero which means hey i don't wanna write

648
00:22:13,919 --> 00:22:15,200
written or executed permissions of

649
00:22:15,200 --> 00:22:18,080
nobody except root

650
00:22:18,080 --> 00:22:20,400
therefore root is gonna try of course it

651
00:22:20,400 --> 00:22:22,000
can read it because it's the owner but

652
00:22:22,000 --> 00:22:25,120
i won't be able to right so

653
00:22:25,120 --> 00:22:28,720
what can i do well i could use cat again

654
00:22:28,720 --> 00:22:31,039
set read search and probably bypass it

655
00:22:31,039 --> 00:22:33,039
again but i want to do a different way

656
00:22:33,039 --> 00:22:35,039
so chmo will basically want to change

657
00:22:35,039 --> 00:22:36,799
permissions so you can read everything

658
00:22:36,799 --> 00:22:38,320
777 means hey i'm going to be able to

659
00:22:38,320 --> 00:22:39,679
read execute i want to do everything

660
00:22:39,679 --> 00:22:41,440
with this file

661
00:22:41,440 --> 00:22:44,799
but we can't just print our booth so

662
00:22:44,799 --> 00:22:48,400
what could we use well we can use

663
00:22:48,400 --> 00:22:51,600
as you might imagine a phoner

664
00:22:51,600 --> 00:22:53,600
because we're basically bypassing this

665
00:22:53,600 --> 00:22:56,719
owner change privilege

666
00:22:59,039 --> 00:23:08,320
so once we run it again

667
00:23:08,320 --> 00:23:12,240
you will notice that when we see h177 as

668
00:23:12,240 --> 00:23:14,080
the modified one

669
00:23:14,080 --> 00:23:15,360
boom first of all didn't give us

670
00:23:15,360 --> 00:23:17,280
permission tonight and second of all

671
00:23:17,280 --> 00:23:19,360
even though it's still owned by root we

672
00:23:19,360 --> 00:23:20,960
have all permissions

673
00:23:20,960 --> 00:23:24,000
so the first rwx means hey and the owner

674
00:23:24,000 --> 00:23:25,840
can read write execute the second one is

675
00:23:25,840 --> 00:23:27,600
others can read while execute

676
00:23:27,600 --> 00:23:29,120
and the third one is groups can be

677
00:23:29,120 --> 00:23:30,640
relaxing good because everything is

678
00:23:30,640 --> 00:23:31,919
required execute

679
00:23:31,919 --> 00:23:37,039
i myself now can actually read the file

680
00:23:37,039 --> 00:23:39,440
yeah this is not super interesting

681
00:23:39,440 --> 00:23:40,559
because it's just a file but let's say

682
00:23:40,559 --> 00:23:42,159
for example private ssh keys

683
00:23:42,159 --> 00:23:43,840
your hc shadow file there's so many

684
00:23:43,840 --> 00:23:45,360
different ways and creative ways you can

685
00:23:45,360 --> 00:23:46,960
exploit all this

686
00:23:46,960 --> 00:23:48,640
all right so this is just a little

687
00:23:48,640 --> 00:23:50,240
question that i made to myself so

688
00:23:50,240 --> 00:23:52,240
i understood the teach that capabilities

689
00:23:52,240 --> 00:23:53,279
run as rude right

690
00:23:53,279 --> 00:23:55,520
but i was asking myself hold up a minute

691
00:23:55,520 --> 00:23:57,440
what if i make a suit away a survey is

692
00:23:57,440 --> 00:23:58,720
basically a person who could run pseudo

693
00:23:58,720 --> 00:23:59,360
privileges

694
00:23:59,360 --> 00:24:01,279
and is equivalent of an administrator so

695
00:24:01,279 --> 00:24:03,200
i was like okay what happens if i try to

696
00:24:03,200 --> 00:24:04,559
exploit a capability with

697
00:24:04,559 --> 00:24:07,120
with sudo right with servers well

698
00:24:07,120 --> 00:24:08,480
interestingly enough i can't

699
00:24:08,480 --> 00:24:10,320
and the reason behind it after checking

700
00:24:10,320 --> 00:24:12,159
and learning is that capabilities will

701
00:24:12,159 --> 00:24:14,320
only run in context of root or uid of

702
00:24:14,320 --> 00:24:14,799
zero

703
00:24:14,799 --> 00:24:16,159
therefore i tried doing things here as

704
00:24:16,159 --> 00:24:18,159
you can see as creating a file

705
00:24:18,159 --> 00:24:20,400
setting a file even modifying a file of

706
00:24:20,400 --> 00:24:22,000
that specific user but i'll never be

707
00:24:22,000 --> 00:24:23,200
able to

708
00:24:23,200 --> 00:24:24,960
so whether it's like the conclusion of

709
00:24:24,960 --> 00:24:26,720
this pseudor experiment

710
00:24:26,720 --> 00:24:28,080
basically that you will never be able to

711
00:24:28,080 --> 00:24:30,400
private laterally you will only be able

712
00:24:30,400 --> 00:24:32,159
to previous to boot

713
00:24:32,159 --> 00:24:34,000
all right so this is my conclusion this

714
00:24:34,000 --> 00:24:35,360
is what guys

715
00:24:35,360 --> 00:24:37,200
i want you to understand i want you to

716
00:24:37,200 --> 00:24:39,919
think first what does that binary do

717
00:24:39,919 --> 00:24:41,600
second what can you do with a binary

718
00:24:41,600 --> 00:24:43,279
third what capabilities you can

719
00:24:43,279 --> 00:24:45,440
attempt to that binary and fourth use

720
00:24:45,440 --> 00:24:46,960
all those previous steps to

721
00:24:46,960 --> 00:24:48,640
exploit the out of it and have fun

722
00:24:48,640 --> 00:24:50,240
to be fine

723
00:24:50,240 --> 00:24:52,159
all right so resources these are all the

724
00:24:52,159 --> 00:24:53,360
resources and

725
00:24:53,360 --> 00:24:55,039
basically everything that have helped i

726
00:24:55,039 --> 00:24:56,480
also want to give credit

727
00:24:56,480 --> 00:24:58,960
to tj null who was one of my mentors and

728
00:24:58,960 --> 00:25:00,080
man he's the best

729
00:25:00,080 --> 00:25:01,840
like super cool guy community and

730
00:25:01,840 --> 00:25:03,679
offensive security avenue security is

731
00:25:03,679 --> 00:25:04,240
amazing

732
00:25:04,240 --> 00:25:06,960
they've taught me a lot and yeah that's

733
00:25:06,960 --> 00:25:07,600
all

734
00:25:07,600 --> 00:25:10,000
questions

735
00:25:11,120 --> 00:25:14,799
we have a few all right i'm here for it

736
00:25:14,799 --> 00:25:16,240
then

737
00:25:16,240 --> 00:25:19,760
um so j function uh asked us a pretty

738
00:25:19,760 --> 00:25:20,559
interesting uh

739
00:25:20,559 --> 00:25:24,640
question um so if you type unshare dash

740
00:25:24,640 --> 00:25:25,120
r

741
00:25:25,120 --> 00:25:27,919
uh you can impersonate roots similar to

742
00:25:27,919 --> 00:25:28,240
what

743
00:25:28,240 --> 00:25:31,200
you just did with ruby or php or python

744
00:25:31,200 --> 00:25:32,080
uh

745
00:25:32,080 --> 00:25:34,720
the the id will be zero is this doing

746
00:25:34,720 --> 00:25:35,600
the the

747
00:25:35,600 --> 00:25:37,600
the same process or is it doing

748
00:25:37,600 --> 00:25:38,799
something magical

749
00:25:38,799 --> 00:25:41,120
and rad no it is actually doing the same

750
00:25:41,120 --> 00:25:43,120
process so what it's doing behind it

751
00:25:43,120 --> 00:25:45,440
is that it's seduiting to zero before it

752
00:25:45,440 --> 00:25:46,159
runs

753
00:25:46,159 --> 00:25:47,600
therefore it's running as a context of

754
00:25:47,600 --> 00:25:49,760
root instead of the user that it was

755
00:25:49,760 --> 00:25:52,320
holding at

756
00:25:53,120 --> 00:25:56,159
alrighty and then the second question is

757
00:25:56,159 --> 00:25:57,679
how often are capabilities used in

758
00:25:57,679 --> 00:25:59,440
professional pen testing slash everyday

759
00:25:59,440 --> 00:26:00,080
hacking

760
00:26:00,080 --> 00:26:01,520
all right that is a really good question

761
00:26:01,520 --> 00:26:03,760
so i myself i'm not really sure

762
00:26:03,760 --> 00:26:05,919
but i think that this is more of a kind

763
00:26:05,919 --> 00:26:07,910
of opportunity-wise type of

764
00:26:07,910 --> 00:26:09,279
[Music]

765
00:26:09,279 --> 00:26:11,679
attack so like if you see a binary that

766
00:26:11,679 --> 00:26:13,200
has this type of capability because root

767
00:26:13,200 --> 00:26:14,320
has misconfigured it

768
00:26:14,320 --> 00:26:17,760
go ahead and exploit the heck out of it

769
00:26:17,760 --> 00:26:21,360
alrighty awesome awesome um

770
00:26:21,360 --> 00:26:23,600
is it in your experience something that

771
00:26:23,600 --> 00:26:25,360
can happen by accident or is it

772
00:26:25,360 --> 00:26:27,120
something that is a human error

773
00:26:27,120 --> 00:26:27,919
basically

774
00:26:27,919 --> 00:26:30,720
it has happened to me twice and i myself

775
00:26:30,720 --> 00:26:32,960
modified a capability by accident so i'm

776
00:26:32,960 --> 00:26:33,600
also

777
00:26:33,600 --> 00:26:36,960
a victim of it okay so basically this is

778
00:26:36,960 --> 00:26:38,880
a great warning to all the systems out

779
00:26:38,880 --> 00:26:40,960
there

780
00:26:40,960 --> 00:26:42,640
run dead cap and make sure that all

781
00:26:42,640 --> 00:26:44,480
capabilities work another cool thing for

782
00:26:44,480 --> 00:26:45,200
mitigating it

783
00:26:45,200 --> 00:26:47,120
is you can grab another system another

784
00:26:47,120 --> 00:26:48,640
computer and check all the binaries

785
00:26:48,640 --> 00:26:49,520
capabilities

786
00:26:49,520 --> 00:26:51,360
and see which one doesn't you know like

787
00:26:51,360 --> 00:26:53,600
fit in

788
00:26:53,600 --> 00:26:56,640
awesome yeah thank you so much for that

789
00:26:56,640 --> 00:26:58,400
that was really fantastic really

790
00:26:58,400 --> 00:26:59,760
engaging presentation

791
00:26:59,760 --> 00:27:02,480
so not even worried i love doing this i

792
00:27:02,480 --> 00:27:04,400
hope everyone has learned a lot and next

793
00:27:04,400 --> 00:27:05,919
time when they see capabilities they can

794
00:27:05,919 --> 00:27:06,880
exploit them

795
00:27:06,880 --> 00:27:09,840
and get elevated access thank you so

796
00:27:09,840 --> 00:27:11,360
much

797
00:27:11,360 --> 00:27:17,520
thanks for being here

