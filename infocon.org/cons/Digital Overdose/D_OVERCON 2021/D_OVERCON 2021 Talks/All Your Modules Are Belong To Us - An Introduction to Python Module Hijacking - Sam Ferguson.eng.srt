1
00:00:06,640 --> 00:00:09,200
all right i guess we are good to go

2
00:00:09,200 --> 00:00:11,519
good afternoon morning or evening

3
00:00:11,519 --> 00:00:12,559
everyone uh

4
00:00:12,559 --> 00:00:13,840
hope you guys are enjoying digital

5
00:00:13,840 --> 00:00:16,079
overdose con uh it's a nice

6
00:00:16,079 --> 00:00:17,840
saturday morning here in the united

7
00:00:17,840 --> 00:00:19,119
states of america and

8
00:00:19,119 --> 00:00:22,320
welcome to my presentation all

9
00:00:22,320 --> 00:00:25,519
your modules are belong to us just a

10
00:00:25,519 --> 00:00:26,160
breakdown

11
00:00:26,160 --> 00:00:28,960
of python module hijacking i'm really

12
00:00:28,960 --> 00:00:30,320
excited to give this talk i hope you

13
00:00:30,320 --> 00:00:31,519
guys are excited we're going to get

14
00:00:31,519 --> 00:00:33,120
technical we're going to dive deep into

15
00:00:33,120 --> 00:00:33,600
things

16
00:00:33,600 --> 00:00:35,040
it's going to be a really really fun

17
00:00:35,040 --> 00:00:37,760
time uh so i hope you enjoy the ride

18
00:00:37,760 --> 00:00:39,360
but first of all you got to be like wait

19
00:00:39,360 --> 00:00:41,040
who's this random dude talking to me

20
00:00:41,040 --> 00:00:42,239
about all this information security

21
00:00:42,239 --> 00:00:44,000
stuff why should i trust him well let me

22
00:00:44,000 --> 00:00:45,600
tell you a bit about myself

23
00:00:45,600 --> 00:00:48,000
my name is sam ferguson you may also

24
00:00:48,000 --> 00:00:48,719
know me as

25
00:00:48,719 --> 00:00:50,960
a find security if you know me on

26
00:00:50,960 --> 00:00:52,079
twitter or

27
00:00:52,079 --> 00:00:55,120
on discord i am currently a senior

28
00:00:55,120 --> 00:00:57,280
at ball state university in muncie

29
00:00:57,280 --> 00:00:58,960
indiana in the u.s

30
00:00:58,960 --> 00:01:01,359
for all you non-american people that's

31
00:01:01,359 --> 00:01:02,399
fourth year i don't know if it's

32
00:01:02,399 --> 00:01:03,199
different elsewhere

33
00:01:03,199 --> 00:01:06,000
anyway uh i study computer technology so

34
00:01:06,000 --> 00:01:06,880
a lot of my focus

35
00:01:06,880 --> 00:01:08,560
is on system administration network

36
00:01:08,560 --> 00:01:10,479
administration that's most of what my

37
00:01:10,479 --> 00:01:12,080
background is

38
00:01:12,080 --> 00:01:13,920
i'm also going to be an i.t leadership

39
00:01:13,920 --> 00:01:15,600
development professional

40
00:01:15,600 --> 00:01:18,080
at cvs health which is a healthcare

41
00:01:18,080 --> 00:01:19,200
company in the united states

42
00:01:19,200 --> 00:01:20,720
really excited about that because i'm

43
00:01:20,720 --> 00:01:22,240
get to get to focus

44
00:01:22,240 --> 00:01:25,439
on security because i love security i'm

45
00:01:25,439 --> 00:01:27,439
an aspiring ethical hacker

46
00:01:27,439 --> 00:01:30,320
pen tester red teamer all of those

47
00:01:30,320 --> 00:01:32,000
things i love the offensive side of

48
00:01:32,000 --> 00:01:33,759
security got love from a blue team

49
00:01:33,759 --> 00:01:36,400
but big fan of the offensive side of

50
00:01:36,400 --> 00:01:37,200
things

51
00:01:37,200 --> 00:01:39,439
and i'm a ctf enthusiast i like doing a

52
00:01:39,439 --> 00:01:41,280
lot of cts getting involved things like

53
00:01:41,280 --> 00:01:43,200
try hack me do the hack the box one next

54
00:01:43,200 --> 00:01:44,960
weekend it's gonna be a lot of fun

55
00:01:44,960 --> 00:01:46,320
but that's not what you came here for

56
00:01:46,320 --> 00:01:47,439
you don't really care about the random

57
00:01:47,439 --> 00:01:48,799
guy up in the corner you care about this

58
00:01:48,799 --> 00:01:49,759
presentation

59
00:01:49,759 --> 00:01:53,840
this talk about python module

60
00:01:53,840 --> 00:01:54,960
quick disclaimer though before we go

61
00:01:54,960 --> 00:01:56,960
into that this presentation does not

62
00:01:56,960 --> 00:01:58,560
represent the views of any of my past

63
00:01:58,560 --> 00:02:00,000
present or future employers all the

64
00:02:00,000 --> 00:02:01,280
views are my own get that out of the way

65
00:02:01,280 --> 00:02:01,920
just so

66
00:02:01,920 --> 00:02:04,640
someone doesn't come for me so today's

67
00:02:04,640 --> 00:02:05,280
agenda

68
00:02:05,280 --> 00:02:07,280
we got some great topics to talk about

69
00:02:07,280 --> 00:02:08,720
we're going to be talking about

70
00:02:08,720 --> 00:02:11,760
what python modules are how python

71
00:02:11,760 --> 00:02:12,640
modules

72
00:02:12,640 --> 00:02:16,000
work how we find python modules

73
00:02:16,000 --> 00:02:18,480
well how python finds it how does python

74
00:02:18,480 --> 00:02:20,319
module hijacking work

75
00:02:20,319 --> 00:02:23,440
and how we can automate this now i'm not

76
00:02:23,440 --> 00:02:24,800
going to give you all of the answers to

77
00:02:24,800 --> 00:02:26,560
everything right away and that's where a

78
00:02:26,560 --> 00:02:28,239
little challenge for all of you

79
00:02:28,239 --> 00:02:31,280
comes in i want you to put on your

80
00:02:31,280 --> 00:02:33,280
hacker hat put on your black hoodie get

81
00:02:33,280 --> 00:02:35,360
out your laptop boot up your cali linux

82
00:02:35,360 --> 00:02:36,640
whatever it is

83
00:02:36,640 --> 00:02:39,280
and i want you to think through my

84
00:02:39,280 --> 00:02:40,800
explanations because i'm going to break

85
00:02:40,800 --> 00:02:42,560
down just from a technical perspective

86
00:02:42,560 --> 00:02:44,640
what python module hijacking really

87
00:02:44,640 --> 00:02:45,680
entails

88
00:02:45,680 --> 00:02:47,519
and i want you guys to see if you can

89
00:02:47,519 --> 00:02:50,640
figure out how to exploit it before i

90
00:02:50,640 --> 00:02:51,599
explain

91
00:02:51,599 --> 00:02:53,599
if you figure it out that's great if you

92
00:02:53,599 --> 00:02:54,879
get the technical details you know

93
00:02:54,879 --> 00:02:56,080
exactly what commands you can pull up

94
00:02:56,080 --> 00:02:56,640
your

95
00:02:56,640 --> 00:02:58,879
terminal right now and run it awesome if

96
00:02:58,879 --> 00:03:00,480
you get a general idea of what to do

97
00:03:00,480 --> 00:03:01,519
that's great too

98
00:03:01,519 --> 00:03:03,360
don't figure it out it's okay you're

99
00:03:03,360 --> 00:03:04,800
gonna learn either way

100
00:03:04,800 --> 00:03:06,879
i want you to be thinking to try and

101
00:03:06,879 --> 00:03:08,560
figure out how exactly am i gonna hack

102
00:03:08,560 --> 00:03:10,720
into the machine how am i gonna break in

103
00:03:10,720 --> 00:03:14,080
as i explain things sound good all right

104
00:03:14,080 --> 00:03:15,040
sounds good

105
00:03:15,040 --> 00:03:18,000
let's get into it so first off what the

106
00:03:18,000 --> 00:03:20,319
heck are python modules

107
00:03:20,319 --> 00:03:23,599
well python modules are simply files

108
00:03:23,599 --> 00:03:24,959
and they're files containing two

109
00:03:24,959 --> 00:03:26,720
different types of things

110
00:03:26,720 --> 00:03:28,959
python function definitions and

111
00:03:28,959 --> 00:03:30,319
executable statements

112
00:03:30,319 --> 00:03:32,319
you may be like hold on sam this is code

113
00:03:32,319 --> 00:03:34,000
i don't know code i don't know code

114
00:03:34,000 --> 00:03:35,760
either don't worry you don't have to be

115
00:03:35,760 --> 00:03:36,400
a coder

116
00:03:36,400 --> 00:03:37,519
in order to figure out how all this

117
00:03:37,519 --> 00:03:39,280
stuff works you really don't you just

118
00:03:39,280 --> 00:03:40,319
need to understand

119
00:03:40,319 --> 00:03:41,920
some basic logic and be able to read

120
00:03:41,920 --> 00:03:43,519
things so if you can do that you should

121
00:03:43,519 --> 00:03:44,799
be good

122
00:03:44,799 --> 00:03:46,879
so i've got a quick example here this is

123
00:03:46,879 --> 00:03:48,239
from a python module called

124
00:03:48,239 --> 00:03:49,840
os if you work with python you're

125
00:03:49,840 --> 00:03:52,400
probably familiar with it if not

126
00:03:52,400 --> 00:03:54,640
explain some things within it so at the

127
00:03:54,640 --> 00:03:56,080
top right here where you see

128
00:03:56,080 --> 00:03:58,319
def underscore get underscore exports

129
00:03:58,319 --> 00:03:59,439
underscore list

130
00:03:59,439 --> 00:04:01,439
that's an example of a function

131
00:04:01,439 --> 00:04:04,159
definition that def there is defining a

132
00:04:04,159 --> 00:04:05,760
particular function

133
00:04:05,760 --> 00:04:08,080
and these are little snippets of code

134
00:04:08,080 --> 00:04:09,040
that can basically

135
00:04:09,040 --> 00:04:13,120
be called when a particular

136
00:04:13,120 --> 00:04:14,480
when the script wants to do something in

137
00:04:14,480 --> 00:04:16,320
particular so instead of running

138
00:04:16,320 --> 00:04:18,399
everything all at once you can have

139
00:04:18,399 --> 00:04:19,918
these definitions to run

140
00:04:19,918 --> 00:04:23,919
various specific sections of code

141
00:04:23,919 --> 00:04:26,560
at a time it's really really useful and

142
00:04:26,560 --> 00:04:28,000
then down here you have just your

143
00:04:28,000 --> 00:04:28,800
standard

144
00:04:28,800 --> 00:04:30,400
executable statements which are going to

145
00:04:30,400 --> 00:04:32,320
get run when the module itself

146
00:04:32,320 --> 00:04:34,479
loads so this one here we can see if

147
00:04:34,479 --> 00:04:36,080
posix in names

148
00:04:36,080 --> 00:04:38,960
so in the os one os obviously the name

149
00:04:38,960 --> 00:04:39,440
implies

150
00:04:39,440 --> 00:04:42,080
works with operating system level items

151
00:04:42,080 --> 00:04:43,759
and so this is just kind of checking to

152
00:04:43,759 --> 00:04:45,040
see if we're running a

153
00:04:45,040 --> 00:04:48,080
posix system so think mac or linux

154
00:04:48,080 --> 00:04:50,160
or we're running later down it checks

155
00:04:50,160 --> 00:04:51,520
for nt systems

156
00:04:51,520 --> 00:04:54,080
so something windows based so those are

157
00:04:54,080 --> 00:04:55,680
really the two things that python

158
00:04:55,680 --> 00:04:57,120
modules do

159
00:04:57,120 --> 00:04:59,600
and you might also wonder why exactly we

160
00:04:59,600 --> 00:05:01,759
would use these python modules

161
00:05:01,759 --> 00:05:04,320
well think of it like this if i was

162
00:05:04,320 --> 00:05:06,080
writing code and i wanted to

163
00:05:06,080 --> 00:05:08,560
run a program and define exactly what

164
00:05:08,560 --> 00:05:10,080
time

165
00:05:10,080 --> 00:05:12,560
it that program ran at i don't want to

166
00:05:12,560 --> 00:05:14,000
have to manually copy paste someone

167
00:05:14,000 --> 00:05:16,000
else's code to get the current time

168
00:05:16,000 --> 00:05:18,160
and to run a program into my giant

169
00:05:18,160 --> 00:05:19,440
script

170
00:05:19,440 --> 00:05:21,520
instead i can just use modules that are

171
00:05:21,520 --> 00:05:22,880
pre-built and use a

172
00:05:22,880 --> 00:05:26,320
simple single line entry in my code

173
00:05:26,320 --> 00:05:28,720
to get those modules to run what is that

174
00:05:28,720 --> 00:05:30,800
single line entry

175
00:05:30,800 --> 00:05:33,919
that is the import function that python

176
00:05:33,919 --> 00:05:35,440
modules have

177
00:05:35,440 --> 00:05:38,479
so modules can be imported into a python

178
00:05:38,479 --> 00:05:39,440
script

179
00:05:39,440 --> 00:05:42,639
in two different ways they can either be

180
00:05:42,639 --> 00:05:44,400
imported with a standard import

181
00:05:44,400 --> 00:05:45,600
statement

182
00:05:45,600 --> 00:05:47,680
or with the double underscore import

183
00:05:47,680 --> 00:05:49,680
double underscore

184
00:05:49,680 --> 00:05:53,120
and imports do two different things

185
00:05:53,120 --> 00:05:56,160
they searched for a named module that's

186
00:05:56,160 --> 00:05:58,080
defined

187
00:05:58,080 --> 00:06:00,000
and it binds the discovered name to the

188
00:06:00,000 --> 00:06:01,360
local script that is

189
00:06:01,360 --> 00:06:04,720
import only now if you don't know what

190
00:06:04,720 --> 00:06:06,080
exactly that means don't worry we're

191
00:06:06,080 --> 00:06:08,000
gonna break it down right now

192
00:06:08,000 --> 00:06:10,560
so here's a quick example on my left

193
00:06:10,560 --> 00:06:12,319
here you're gonna see that i've ran

194
00:06:12,319 --> 00:06:15,919
python just in my terminal and i've done

195
00:06:15,919 --> 00:06:19,280
import os import that operating system

196
00:06:19,280 --> 00:06:22,240
module that i talked about and as you

197
00:06:22,240 --> 00:06:23,120
can see here

198
00:06:23,120 --> 00:06:26,160
i can run os dot get

199
00:06:26,160 --> 00:06:29,840
cwd and it will get the current working

200
00:06:29,840 --> 00:06:31,520
directory that i'm in

201
00:06:31,520 --> 00:06:33,600
and i can run that again as many times

202
00:06:33,600 --> 00:06:34,639
as i want

203
00:06:34,639 --> 00:06:37,120
because it has imported all the items

204
00:06:37,120 --> 00:06:37,919
within os

205
00:06:37,919 --> 00:06:40,400
all those definitions of functions and

206
00:06:40,400 --> 00:06:41,280
executable

207
00:06:41,280 --> 00:06:44,240
options and it's running the ones that i

208
00:06:44,240 --> 00:06:46,479
want

209
00:06:46,479 --> 00:06:48,319
now if you look over here on the right i

210
00:06:48,319 --> 00:06:50,639
use the double underscore import method

211
00:06:50,639 --> 00:06:53,680
a little underscore and then os in a

212
00:06:53,680 --> 00:06:55,440
string so i've got these little

213
00:06:55,440 --> 00:07:00,560
uh quotes around it and then dot get cwd

214
00:07:00,560 --> 00:07:03,120
and i run it and it imports the current

215
00:07:03,120 --> 00:07:04,080
working directory

216
00:07:04,080 --> 00:07:06,080
gets my information but if i run it

217
00:07:06,080 --> 00:07:08,240
again we'll see that we get a traceback

218
00:07:08,240 --> 00:07:10,240
error because the name os isn't defined

219
00:07:10,240 --> 00:07:11,680
and this is the difference this is the

220
00:07:11,680 --> 00:07:14,000
defining the linking to the local

221
00:07:14,000 --> 00:07:16,160
namespace that i was talking about

222
00:07:16,160 --> 00:07:19,120
when i do import os that name os is now

223
00:07:19,120 --> 00:07:20,560
linked to that module

224
00:07:20,560 --> 00:07:22,639
no matter where in the script i use it

225
00:07:22,639 --> 00:07:24,319
it will always be linked to it

226
00:07:24,319 --> 00:07:26,160
but using the double underscore method

227
00:07:26,160 --> 00:07:27,440
only imports that for

228
00:07:27,440 --> 00:07:30,560
just the execution of that command

229
00:07:30,560 --> 00:07:32,960
so if i try to do os later it doesn't

230
00:07:32,960 --> 00:07:34,479
know what it is because it's not been

231
00:07:34,479 --> 00:07:36,800
linked to the local space so if you only

232
00:07:36,800 --> 00:07:37,759
want to use a module

233
00:07:37,759 --> 00:07:39,120
one time in your script for whatever

234
00:07:39,120 --> 00:07:40,639
reason you use the double underscore

235
00:07:40,639 --> 00:07:41,199
method

236
00:07:41,199 --> 00:07:43,759
but if it's defined multiple times you

237
00:07:43,759 --> 00:07:46,000
would use the import os function

238
00:07:46,000 --> 00:07:48,960
and that's pretty much how exactly they

239
00:07:48,960 --> 00:07:51,039
work

240
00:07:51,039 --> 00:07:54,240
now there's also two different types of

241
00:07:54,240 --> 00:07:56,720
modules in python that is important to

242
00:07:56,720 --> 00:07:57,680
note

243
00:07:57,680 --> 00:07:59,520
because importing can come from various

244
00:07:59,520 --> 00:08:02,240
places and the two types are built in

245
00:08:02,240 --> 00:08:05,440
and from files so built-in as the name

246
00:08:05,440 --> 00:08:06,160
implies

247
00:08:06,160 --> 00:08:08,240
is built into python it's something

248
00:08:08,240 --> 00:08:09,360
that's just built

249
00:08:09,360 --> 00:08:12,479
into the program itself but i will tell

250
00:08:12,479 --> 00:08:13,120
you right now

251
00:08:13,120 --> 00:08:14,319
just so you don't go down and rabbit

252
00:08:14,319 --> 00:08:15,680
holes they're not vulnerable to module

253
00:08:15,680 --> 00:08:16,960
hijacking there's not really a way that

254
00:08:16,960 --> 00:08:17,680
we can

255
00:08:17,680 --> 00:08:19,599
modify the python binary itself or at

256
00:08:19,599 --> 00:08:21,360
least that's way above my head

257
00:08:21,360 --> 00:08:25,199
too smart for me so the one will

258
00:08:25,199 --> 00:08:27,919
mostly be focusing on is from files and

259
00:08:27,919 --> 00:08:29,360
modules are stored

260
00:08:29,360 --> 00:08:32,240
in just a standard python file they're

261
00:08:32,240 --> 00:08:33,279
for

262
00:08:33,279 --> 00:08:35,519
a really simple generalization pretty

263
00:08:35,519 --> 00:08:37,200
much like any other python script that

264
00:08:37,200 --> 00:08:38,799
you might create

265
00:08:38,799 --> 00:08:40,479
and they're also usually stored in a

266
00:08:40,479 --> 00:08:42,080
specific path and let me

267
00:08:42,080 --> 00:08:43,839
show you kind of how you can figure this

268
00:08:43,839 --> 00:08:45,440
out

269
00:08:45,440 --> 00:08:47,519
so here i've got another quick little

270
00:08:47,519 --> 00:08:50,399
screenshot ransom python 3

271
00:08:50,399 --> 00:08:51,920
and i've imported two different modules

272
00:08:51,920 --> 00:08:54,240
i've imported the module called sys

273
00:08:54,240 --> 00:08:57,120
in the module called os so now if i just

274
00:08:57,120 --> 00:08:58,800
run those module names on their own i

275
00:08:58,800 --> 00:09:00,320
can actually find out some information

276
00:09:00,320 --> 00:09:01,519
about them

277
00:09:01,519 --> 00:09:03,279
and the module cis we can see is defined

278
00:09:03,279 --> 00:09:04,720
as built in so this is one of those

279
00:09:04,720 --> 00:09:06,240
built-in functions i was talking about

280
00:09:06,240 --> 00:09:07,920
within python it's just within the

281
00:09:07,920 --> 00:09:09,440
program

282
00:09:09,440 --> 00:09:12,000
but if you look at os when i run os we

283
00:09:12,000 --> 00:09:12,640
see that

284
00:09:12,640 --> 00:09:16,160
module os is from usr

285
00:09:16,160 --> 00:09:20,640
slash lib python 3.9 slash os dot pi

286
00:09:20,640 --> 00:09:22,160
so we're actually getting it from a

287
00:09:22,160 --> 00:09:24,720
specific python file

288
00:09:24,720 --> 00:09:26,800
within our operating system within our

289
00:09:26,800 --> 00:09:28,800
file structure

290
00:09:28,800 --> 00:09:30,320
you might be asking sam how does python

291
00:09:30,320 --> 00:09:31,839
know where to look how does it

292
00:09:31,839 --> 00:09:33,040
figure it out does it pull it out of

293
00:09:33,040 --> 00:09:34,880
thin air does it do abracadabra alexa

294
00:09:34,880 --> 00:09:35,600
exam alexander just

295
00:09:35,600 --> 00:09:37,839
picks one does it play any media mindy

296
00:09:37,839 --> 00:09:40,080
mo to figure out which module to use

297
00:09:40,080 --> 00:09:42,320
no it's a computer there's some logic to

298
00:09:42,320 --> 00:09:43,200
it

299
00:09:43,200 --> 00:09:45,839
and python finds modules using something

300
00:09:45,839 --> 00:09:48,240
called the python path

301
00:09:48,240 --> 00:09:50,240
and python path is nothing more than an

302
00:09:50,240 --> 00:09:51,680
environment variable

303
00:09:51,680 --> 00:09:53,440
if you're not familiar with environment

304
00:09:53,440 --> 00:09:55,519
variables they are just

305
00:09:55,519 --> 00:09:58,000
variables that are used at an operating

306
00:09:58,000 --> 00:09:58,959
system level

307
00:09:58,959 --> 00:10:01,600
for programs to pull information from

308
00:10:01,600 --> 00:10:02,480
they can define

309
00:10:02,480 --> 00:10:04,640
things like what kind of terminal you're

310
00:10:04,640 --> 00:10:06,560
using you know are using

311
00:10:06,560 --> 00:10:09,839
x term 256 color terminal or what kind

312
00:10:09,839 --> 00:10:11,120
of shell are you using maybe you're

313
00:10:11,120 --> 00:10:11,600
using

314
00:10:11,600 --> 00:10:14,640
bin bash maybe you're using bin zsh

315
00:10:14,640 --> 00:10:17,040
maybe you're using bin fish and this is

316
00:10:17,040 --> 00:10:18,640
information that applications want to

317
00:10:18,640 --> 00:10:20,399
know about it can be really useful

318
00:10:20,399 --> 00:10:22,480
and python is no exception it uses the

319
00:10:22,480 --> 00:10:24,480
python path

320
00:10:24,480 --> 00:10:26,480
and so python path lists directories

321
00:10:26,480 --> 00:10:29,200
that python will search for modules in

322
00:10:29,200 --> 00:10:32,000
and if you know about the normal just

323
00:10:32,000 --> 00:10:33,360
path directory on

324
00:10:33,360 --> 00:10:35,519
nik systems or really on windows systems

325
00:10:35,519 --> 00:10:36,640
as well

326
00:10:36,640 --> 00:10:38,240
it's basically the same concept but for

327
00:10:38,240 --> 00:10:40,880
python but if not i'll explain it in a

328
00:10:40,880 --> 00:10:42,079
moment

329
00:10:42,079 --> 00:10:44,480
and let's look at here this output so

330
00:10:44,480 --> 00:10:45,680
i've imports this

331
00:10:45,680 --> 00:10:47,680
four ions this path print i this is just

332
00:10:47,680 --> 00:10:49,279
to make the output look nice you could

333
00:10:49,279 --> 00:10:49,600
run

334
00:10:49,600 --> 00:10:51,040
just sys.path and you get this

335
00:10:51,040 --> 00:10:54,240
information so we can see here we've got

336
00:10:54,240 --> 00:10:58,000
lib python39.zip python 3.9

337
00:10:58,000 --> 00:11:01,680
3.9 lib dyn load and python 3.9

338
00:11:01,680 --> 00:11:04,800
site packages that's really cool

339
00:11:04,800 --> 00:11:07,040
it's helpful and stuff but the one thing

340
00:11:07,040 --> 00:11:07,839
that's you

341
00:11:07,839 --> 00:11:09,920
really want to note is this here this

342
00:11:09,920 --> 00:11:11,279
blank space you see

343
00:11:11,279 --> 00:11:13,600
between the dot dot and the first dot

344
00:11:13,600 --> 00:11:15,519
zip entry

345
00:11:15,519 --> 00:11:18,160
that is blank but actually means the

346
00:11:18,160 --> 00:11:20,160
directory that that script is being run

347
00:11:20,160 --> 00:11:22,800
from so python will first look for your

348
00:11:22,800 --> 00:11:23,839
current directory

349
00:11:23,839 --> 00:11:25,519
where that's where your script is being

350
00:11:25,519 --> 00:11:27,279
run or your python program is being run

351
00:11:27,279 --> 00:11:29,040
try to find a module there and then move

352
00:11:29,040 --> 00:11:30,240
on to the rest of the items in the

353
00:11:30,240 --> 00:11:31,200
python path

354
00:11:31,200 --> 00:11:34,399
very important to note and with that

355
00:11:34,399 --> 00:11:35,839
we're done with the technical breakdown

356
00:11:35,839 --> 00:11:37,519
of python uh

357
00:11:37,519 --> 00:11:40,240
module hijacking so did you figure it

358
00:11:40,240 --> 00:11:40,640
out

359
00:11:40,640 --> 00:11:41,920
did you figure out how to hack the

360
00:11:41,920 --> 00:11:44,240
system do you know how to

361
00:11:44,240 --> 00:11:46,000
do module hijacking at this moment take

362
00:11:46,000 --> 00:11:48,640
a minute think about it

363
00:11:48,640 --> 00:11:50,399
see if you got it last minute

364
00:11:50,399 --> 00:11:53,920
computation last minute processing

365
00:11:53,920 --> 00:11:56,480
and if not that's okay let's dive into

366
00:11:56,480 --> 00:11:58,160
it and figure out how it works

367
00:11:58,160 --> 00:12:01,279
so python python module hijacking

368
00:12:01,279 --> 00:12:03,440
there are three main options for module

369
00:12:03,440 --> 00:12:04,399
hijacking

370
00:12:04,399 --> 00:12:06,959
which is incorrect permissions writable

371
00:12:06,959 --> 00:12:08,160
python path

372
00:12:08,160 --> 00:12:11,279
and end keep plus equals python path

373
00:12:11,279 --> 00:12:14,160
so let's look at all three of these so

374
00:12:14,160 --> 00:12:16,000
incorrect permissions

375
00:12:16,000 --> 00:12:17,839
basically means if there's a writable

376
00:12:17,839 --> 00:12:20,240
module that script is using

377
00:12:20,240 --> 00:12:22,399
it's vulnerable and i will note that the

378
00:12:22,399 --> 00:12:24,320
code must be placed in an area that is

379
00:12:24,320 --> 00:12:25,040
run

380
00:12:25,040 --> 00:12:27,040
not all modules are going to run every

381
00:12:27,040 --> 00:12:28,800
single thing on start

382
00:12:28,800 --> 00:12:30,560
there's only certain items that they

383
00:12:30,560 --> 00:12:31,440
might have thrown so you might have to

384
00:12:31,440 --> 00:12:33,040
do a little code analysis a little trial

385
00:12:33,040 --> 00:12:34,880
and error to see what will work

386
00:12:34,880 --> 00:12:36,560
and your goal here is to modify a

387
00:12:36,560 --> 00:12:38,240
vulnerable python module

388
00:12:38,240 --> 00:12:40,480
so find writable modules insert

389
00:12:40,480 --> 00:12:41,519
malicious code

390
00:12:41,519 --> 00:12:44,639
and execute the original script now this

391
00:12:44,639 --> 00:12:46,079
is great an explanation

392
00:12:46,079 --> 00:12:47,519
but what if we actually got to see this

393
00:12:47,519 --> 00:12:50,240
in action yes dear viewer i have made my

394
00:12:50,240 --> 00:12:52,160
sacrifices to the demo gods for this

395
00:12:52,160 --> 00:12:53,200
presentation

396
00:12:53,200 --> 00:12:56,160
and we have a demo and it's gonna work i

397
00:12:56,160 --> 00:12:56,639
hope

398
00:12:56,639 --> 00:13:00,639
fingers crossed let's go all right so

399
00:13:00,639 --> 00:13:02,480
d overcon one we're here on our first

400
00:13:02,480 --> 00:13:04,720
user let's take a little look

401
00:13:04,720 --> 00:13:06,320
there's an interesting directory here

402
00:13:06,320 --> 00:13:08,480
called hashgen and we'll note that the

403
00:13:08,480 --> 00:13:10,079
privileges showed that it's owned by a

404
00:13:10,079 --> 00:13:11,519
user called the overcon2

405
00:13:11,519 --> 00:13:13,839
so we already know we can't write to it

406
00:13:13,839 --> 00:13:15,920
whatever not a problem here

407
00:13:15,920 --> 00:13:18,560
so we'll go to hashgen and if we look

408
00:13:18,560 --> 00:13:19,440
here

409
00:13:19,440 --> 00:13:21,120
we're gonna see that we've got a couple

410
00:13:21,120 --> 00:13:22,959
python files in here well one

411
00:13:22,959 --> 00:13:25,920
python file hash generator.pie so let's

412
00:13:25,920 --> 00:13:28,000
read hashgenerator and see what modules

413
00:13:28,000 --> 00:13:29,600
it's importing

414
00:13:29,600 --> 00:13:32,560
so we've got three here we've got os

415
00:13:32,560 --> 00:13:33,760
we've got cis

416
00:13:33,760 --> 00:13:36,399
and we've got hash lib now i'll tell you

417
00:13:36,399 --> 00:13:36,959
this is

418
00:13:36,959 --> 00:13:38,880
a built-in as we know so we can't really

419
00:13:38,880 --> 00:13:40,160
use that

420
00:13:40,160 --> 00:13:43,680
os is weird and just doesn't like

421
00:13:43,680 --> 00:13:45,839
being injected at all for whatever

422
00:13:45,839 --> 00:13:48,320
reason i really don't know why

423
00:13:48,320 --> 00:13:51,920
uh but whatever we're gonna ignore it

424
00:13:51,920 --> 00:13:53,279
hash lib's the one that we're gonna

425
00:13:53,279 --> 00:13:55,760
be interested in for now so let's go

426
00:13:55,760 --> 00:13:57,519
check out hash lib's permissions so

427
00:13:57,519 --> 00:13:59,120
we're gonna go to

428
00:13:59,120 --> 00:14:00,560
well first of all what directory we're

429
00:14:00,560 --> 00:14:01,920
gonna go to let's check our python

430
00:14:01,920 --> 00:14:04,880
version python tag v

431
00:14:04,880 --> 00:14:08,079
i have python 3. smiley

432
00:14:08,079 --> 00:14:10,720
python 3. so python 3.8 so we're going

433
00:14:10,720 --> 00:14:11,760
to go to

434
00:14:11,760 --> 00:14:15,279
lstec l usr lib

435
00:14:15,279 --> 00:14:18,639
three point eight slash

436
00:14:18,639 --> 00:14:20,320
and let's just go directly to hash flip

437
00:14:20,320 --> 00:14:21,920
dot pi which is in there let's check our

438
00:14:21,920 --> 00:14:24,240
permissions

439
00:14:24,240 --> 00:14:27,440
oh well that's interesting

440
00:14:27,440 --> 00:14:30,639
the dovercon1 group can write

441
00:14:30,639 --> 00:14:34,399
to this file evil laughter

442
00:14:34,399 --> 00:14:37,040
insert it here it's time to exploit so

443
00:14:37,040 --> 00:14:38,160
we are going to go to

444
00:14:38,160 --> 00:14:41,519
vim usr lib python

445
00:14:41,519 --> 00:14:45,440
3.8 hash lib dot pi

446
00:14:45,440 --> 00:14:47,839
we're going to ignore this giant wall of

447
00:14:47,839 --> 00:14:48,959
comment that is here

448
00:14:48,959 --> 00:14:50,959
because python and we're gonna do a

449
00:14:50,959 --> 00:14:52,560
little thing here which

450
00:14:52,560 --> 00:14:55,519
if you've done python exploitation and

451
00:14:55,519 --> 00:14:56,399
pen testing at

452
00:14:56,399 --> 00:14:58,720
all uh you probably know what i'm about

453
00:14:58,720 --> 00:14:59,680
to do here

454
00:14:59,680 --> 00:15:03,040
but it's the classic import pty pty dot

455
00:15:03,040 --> 00:15:04,079
spawn

456
00:15:04,079 --> 00:15:07,120
slash bin bash which is simply a really

457
00:15:07,120 --> 00:15:08,399
easy way to import

458
00:15:08,399 --> 00:15:11,519
the pty module and spawn a new

459
00:15:11,519 --> 00:15:14,480
terminal session all right that's cool

460
00:15:14,480 --> 00:15:15,120
and all

461
00:15:15,120 --> 00:15:16,959
but the second part of this exploit

462
00:15:16,959 --> 00:15:19,199
actually comes from pseudo privileges

463
00:15:19,199 --> 00:15:20,399
now there's a couple ways that we can

464
00:15:20,399 --> 00:15:22,639
exploit python

465
00:15:22,639 --> 00:15:24,320
module hijacking i'll go over those

466
00:15:24,320 --> 00:15:26,079
later but effectively one of the ways is

467
00:15:26,079 --> 00:15:27,360
being able to run a program

468
00:15:27,360 --> 00:15:29,279
as another user so we're going to do

469
00:15:29,279 --> 00:15:31,519
that now you can see here as d over con

470
00:15:31,519 --> 00:15:33,839
2 i can run things as a different u i

471
00:15:33,839 --> 00:15:34,560
can run

472
00:15:34,560 --> 00:15:36,639
a program as the over contu so let's do

473
00:15:36,639 --> 00:15:37,759
pseudo tac u

474
00:15:37,759 --> 00:15:41,920
d over con 2 and we're gonna copy and

475
00:15:41,920 --> 00:15:42,880
paste this because

476
00:15:42,880 --> 00:15:44,800
i didn't type it out beforehand like i

477
00:15:44,800 --> 00:15:46,240
should have

478
00:15:46,240 --> 00:15:48,240
and then we're going to copy the rest of

479
00:15:48,240 --> 00:15:50,560
it it's really long but

480
00:15:50,560 --> 00:15:54,079
i promise it's for a reason boom

481
00:15:54,079 --> 00:15:57,199
look at that we are d over con 2

482
00:15:57,199 --> 00:15:59,120
because when python looked up in the

483
00:15:59,120 --> 00:16:01,199
python path it found hash lib

484
00:16:01,199 --> 00:16:03,199
it ran the module but our little

485
00:16:03,199 --> 00:16:04,720
nefarious evil script

486
00:16:04,720 --> 00:16:07,519
ran and we are officially the next user

487
00:16:07,519 --> 00:16:08,480
so that's

488
00:16:08,480 --> 00:16:11,199
awesome all right back to the powerpoint

489
00:16:11,199 --> 00:16:12,959
let's move on to our next

490
00:16:12,959 --> 00:16:16,720
exploit so python module hijacking part

491
00:16:16,720 --> 00:16:17,279
two

492
00:16:17,279 --> 00:16:19,440
writable python path now you may hear

493
00:16:19,440 --> 00:16:20,560
this referred to

494
00:16:20,560 --> 00:16:23,680
as python module poisoning it's another

495
00:16:23,680 --> 00:16:25,040
name that i might mention

496
00:16:25,040 --> 00:16:26,959
but writable python path module

497
00:16:26,959 --> 00:16:29,120
poisoning they're the same thing

498
00:16:29,120 --> 00:16:32,560
so as i mentioned earlier python path

499
00:16:32,560 --> 00:16:34,160
python will look through the path first

500
00:16:34,160 --> 00:16:37,040
to find any modules

501
00:16:37,040 --> 00:16:40,639
and if anything in the path is writable

502
00:16:40,639 --> 00:16:42,880
for example the directory that script is

503
00:16:42,880 --> 00:16:44,000
run from

504
00:16:44,000 --> 00:16:46,480
we could make a malicious poisonous

505
00:16:46,480 --> 00:16:47,519
module there

506
00:16:47,519 --> 00:16:49,680
and have python import it directly from

507
00:16:49,680 --> 00:16:50,560
there

508
00:16:50,560 --> 00:16:52,399
so our goal is of course to create a

509
00:16:52,399 --> 00:16:53,920
malicious python

510
00:16:53,920 --> 00:16:56,399
module so first you want to find a

511
00:16:56,399 --> 00:16:58,000
writable directory

512
00:16:58,000 --> 00:17:00,079
that script is running from second we're

513
00:17:00,079 --> 00:17:02,240
going to create our malicious module

514
00:17:02,240 --> 00:17:04,000
and third we're going to execute the

515
00:17:04,000 --> 00:17:06,319
script so let's go on our wonderful d

516
00:17:06,319 --> 00:17:08,959
overcon2 and we can see here we've got a

517
00:17:08,959 --> 00:17:09,919
module called these

518
00:17:09,919 --> 00:17:12,559
a python script called b64 generator

519
00:17:12,559 --> 00:17:14,000
that's cool

520
00:17:14,000 --> 00:17:17,760
let's read b64 generator okay it imports

521
00:17:17,760 --> 00:17:19,439
base64

522
00:17:19,439 --> 00:17:22,640
gotcha we're also in the home directory

523
00:17:22,640 --> 00:17:24,959
for d over contour so let's check rate

524
00:17:24,959 --> 00:17:28,319
quick aha d over contour as expected

525
00:17:28,319 --> 00:17:31,760
is writable by the user d over con 2.

526
00:17:31,760 --> 00:17:35,120
so let's do vim bass 64

527
00:17:35,120 --> 00:17:38,160
dot pi i import p

528
00:17:38,160 --> 00:17:41,760
t y v t u i dot spawn spin bash you're

529
00:17:41,760 --> 00:17:42,960
going to be used to this by the end of

530
00:17:42,960 --> 00:17:44,320
this presentation

531
00:17:44,320 --> 00:17:47,520
so we've got that we'll quickly make

532
00:17:47,520 --> 00:17:48,799
that executable

533
00:17:48,799 --> 00:17:51,919
just in case and clear that

534
00:17:51,919 --> 00:17:54,799
so now we've got our base 64 module here

535
00:17:54,799 --> 00:17:55,360
and again

536
00:17:55,360 --> 00:17:57,039
if we look at our pseudo privileges we

537
00:17:57,039 --> 00:17:58,480
can run this as d

538
00:17:58,480 --> 00:18:01,440
over con three that's pretty sick so

539
00:18:01,440 --> 00:18:02,480
let's do sudo

540
00:18:02,480 --> 00:18:06,640
attack u d over con three

541
00:18:06,640 --> 00:18:09,280
and we're going to paste this in here

542
00:18:09,280 --> 00:18:10,080
and run it

543
00:18:10,080 --> 00:18:12,960
and voila ladies and gentlemen we are in

544
00:18:12,960 --> 00:18:13,280
d

545
00:18:13,280 --> 00:18:16,480
over con 3 we are now that user so

546
00:18:16,480 --> 00:18:19,360
as we saw we made that malicious python

547
00:18:19,360 --> 00:18:20,000
module

548
00:18:20,000 --> 00:18:21,840
in the directory the scripts being run

549
00:18:21,840 --> 00:18:24,320
from because of python path it looked

550
00:18:24,320 --> 00:18:24,640
there

551
00:18:24,640 --> 00:18:27,600
first imported our base64 and ran our

552
00:18:27,600 --> 00:18:29,600
program and we are officially in d

553
00:18:29,600 --> 00:18:32,160
over con 3. we are one step away from

554
00:18:32,160 --> 00:18:34,000
officially rooting this box

555
00:18:34,000 --> 00:18:37,039
which is awesome

556
00:18:37,120 --> 00:18:40,720
now the third option is really cool

557
00:18:40,720 --> 00:18:43,200
it's end of a keep plus equals python

558
00:18:43,200 --> 00:18:44,400
path

559
00:18:44,400 --> 00:18:46,240
so this works with the environment

560
00:18:46,240 --> 00:18:48,559
variable python path itself and python

561
00:18:48,559 --> 00:18:50,320
environment variables are definable

562
00:18:50,320 --> 00:18:52,000
really easily in linux you can do

563
00:18:52,000 --> 00:18:53,039
something like

564
00:18:53,039 --> 00:18:56,160
export python path equals whatever

565
00:18:56,160 --> 00:18:57,679
but it really only works for that

566
00:18:57,679 --> 00:18:59,840
particular session

567
00:18:59,840 --> 00:19:01,840
and that's an issue if we're trying to

568
00:19:01,840 --> 00:19:03,360
do something like sudo

569
00:19:03,360 --> 00:19:05,919
or make it work for a different user

570
00:19:05,919 --> 00:19:07,200
because python will

571
00:19:07,200 --> 00:19:09,600
or linux rather we'll just ignore that

572
00:19:09,600 --> 00:19:11,039
it'll say no you can't pass this

573
00:19:11,039 --> 00:19:12,480
environment variable it's only for this

574
00:19:12,480 --> 00:19:13,760
session

575
00:19:13,760 --> 00:19:16,720
but if the end keep option is defined it

576
00:19:16,720 --> 00:19:17,679
means that we can

577
00:19:17,679 --> 00:19:19,919
keep that environment variable when

578
00:19:19,919 --> 00:19:21,039
running a program

579
00:19:21,039 --> 00:19:23,600
as a different user so our goal here

580
00:19:23,600 --> 00:19:25,919
again is to create another malicious

581
00:19:25,919 --> 00:19:28,559
python module so we can find any

582
00:19:28,559 --> 00:19:30,480
writable directory

583
00:19:30,480 --> 00:19:32,160
execute the command and set the

584
00:19:32,160 --> 00:19:34,000
environment variable in that command now

585
00:19:34,000 --> 00:19:35,760
this one makes a lot

586
00:19:35,760 --> 00:19:38,080
less sense explaining it so it's better

587
00:19:38,080 --> 00:19:39,120
to just show it

588
00:19:39,120 --> 00:19:41,039
so let's look here let's tack out we've

589
00:19:41,039 --> 00:19:42,240
got a folder owned by

590
00:19:42,240 --> 00:19:44,720
root okay so we can't write to it we

591
00:19:44,720 --> 00:19:45,919
already know that

592
00:19:45,919 --> 00:19:49,120
that's sucks all right lstec l okay

593
00:19:49,120 --> 00:19:51,200
we've got testing dot pi

594
00:19:51,200 --> 00:19:53,120
now if i run pseudotech l here really

595
00:19:53,120 --> 00:19:54,799
quick you're going to see that i have

596
00:19:54,799 --> 00:19:55,120
the

597
00:19:55,120 --> 00:19:58,960
end key plus equals python path in here

598
00:19:58,960 --> 00:20:01,440
so that's very interesting so let's cat

599
00:20:01,440 --> 00:20:03,360
testing.pi really quick

600
00:20:03,360 --> 00:20:06,000
you see that it imports the module date

601
00:20:06,000 --> 00:20:06,559
time

602
00:20:06,559 --> 00:20:09,360
now you might also see this uh from date

603
00:20:09,360 --> 00:20:09,840
time

604
00:20:09,840 --> 00:20:12,080
import date time that's basically

605
00:20:12,080 --> 00:20:13,840
sometimes modules will have

606
00:20:13,840 --> 00:20:15,919
sub modules so to speak and you can

607
00:20:15,919 --> 00:20:17,520
import just one part

608
00:20:17,520 --> 00:20:20,480
of that module which is really nice but

609
00:20:20,480 --> 00:20:21,600
regardless

610
00:20:21,600 --> 00:20:24,000
i'm going to make a malicious file in

611
00:20:24,000 --> 00:20:26,320
wherever i want and a classic one is

612
00:20:26,320 --> 00:20:27,600
slash tnp it's

613
00:20:27,600 --> 00:20:29,760
usually writable so we'll make one

614
00:20:29,760 --> 00:20:31,919
called datetime.pi

615
00:20:31,919 --> 00:20:35,520
i import pty say it with me all

616
00:20:35,520 --> 00:20:38,559
p t y dot spawn slash bin

617
00:20:38,559 --> 00:20:41,600
slash bash there we go very nice siege

618
00:20:41,600 --> 00:20:44,720
mod plus x make that thing executable

619
00:20:44,720 --> 00:20:48,159
woohoo all right very cool so again

620
00:20:48,159 --> 00:20:48,880
pseudo attack

621
00:20:48,880 --> 00:20:52,080
l whoops of course pseudo attack l

622
00:20:52,080 --> 00:20:54,799
and we can run this as root so again you

623
00:20:54,799 --> 00:20:55,760
can run this as

624
00:20:55,760 --> 00:20:58,000
root so we're going to do sudo like here

625
00:20:58,000 --> 00:20:58,960
we're going to pass

626
00:20:58,960 --> 00:21:01,600
our python path environment variable and

627
00:21:01,600 --> 00:21:03,120
make it slash tmp

628
00:21:03,120 --> 00:21:05,600
so instead of that output of sys.path i

629
00:21:05,600 --> 00:21:06,799
showed you where was the current

630
00:21:06,799 --> 00:21:07,679
directory

631
00:21:07,679 --> 00:21:10,640
and then lib and all that stuff it's

632
00:21:10,640 --> 00:21:12,320
only going to look in tmp

633
00:21:12,320 --> 00:21:13,919
which is where our malicious module

634
00:21:13,919 --> 00:21:16,159
resides so we're going to paste in this

635
00:21:16,159 --> 00:21:18,159
command

636
00:21:18,159 --> 00:21:20,080
and ladies and gentlemen we have

637
00:21:20,080 --> 00:21:22,080
achieved root access we are

638
00:21:22,080 --> 00:21:24,400
in the machine so awesome we've

639
00:21:24,400 --> 00:21:25,679
successfully rooted

640
00:21:25,679 --> 00:21:28,960
using python module hijacking and i know

641
00:21:28,960 --> 00:21:30,559
some of you might be out there be like

642
00:21:30,559 --> 00:21:33,200
sam you had to type so many commands to

643
00:21:33,200 --> 00:21:34,559
figure that out

644
00:21:34,559 --> 00:21:36,320
i hate manually finding everything

645
00:21:36,320 --> 00:21:38,960
manual enumeration sucks and dear viewer

646
00:21:38,960 --> 00:21:41,280
i hate it too which is why i made your

647
00:21:41,280 --> 00:21:42,320
life easier

648
00:21:42,320 --> 00:21:45,520
by making a script called pie snatch

649
00:21:45,520 --> 00:21:47,679
which is a module hijacking script that

650
00:21:47,679 --> 00:21:50,000
covers all three exploitations

651
00:21:50,000 --> 00:21:51,919
and you can put it on any machine and

652
00:21:51,919 --> 00:21:53,520
very easily figure out

653
00:21:53,520 --> 00:21:56,400
what modules are injectable or

654
00:21:56,400 --> 00:21:57,280
exploitable

655
00:21:57,280 --> 00:21:58,720
without needing to install anything

656
00:21:58,720 --> 00:22:00,720
extra so i'm going to exit really

657
00:22:00,720 --> 00:22:02,880
quick here we're going to go back see

658
00:22:02,880 --> 00:22:04,320
all the failures from things which is

659
00:22:04,320 --> 00:22:05,919
annoying okay whatever cool

660
00:22:05,919 --> 00:22:07,600
yeah i didn't do it error checking all

661
00:22:07,600 --> 00:22:09,360
the scripts that's fine doesn't matter

662
00:22:09,360 --> 00:22:11,919
so i'm going to go to over con 2 here

663
00:22:11,919 --> 00:22:13,200
really quick

664
00:22:13,200 --> 00:22:16,559
and i have a hidden directory called pi

665
00:22:16,559 --> 00:22:18,080
snatch so we're going to cd

666
00:22:18,080 --> 00:22:21,120
to dot pi snatch and we're going to run

667
00:22:21,120 --> 00:22:21,919
dot slash

668
00:22:21,919 --> 00:22:25,600
pi snatch dot slash base 64 generator

669
00:22:25,600 --> 00:22:28,158
really quick

670
00:22:28,480 --> 00:22:31,120
and we've got our little output here so

671
00:22:31,120 --> 00:22:32,080
as per usual

672
00:22:32,080 --> 00:22:33,919
infosec gotta have some kulaski art

673
00:22:33,919 --> 00:22:35,200
start

674
00:22:35,200 --> 00:22:37,360
so first of all it will check if our

675
00:22:37,360 --> 00:22:39,120
home directory is writable

676
00:22:39,120 --> 00:22:41,360
and it says awesome it is writable and

677
00:22:41,360 --> 00:22:43,679
there's an awesome module python called

678
00:22:43,679 --> 00:22:47,200
uh what is it now it's called

679
00:22:47,200 --> 00:22:49,360
uh module finder and module finder will

680
00:22:49,360 --> 00:22:51,039
find all of your modules

681
00:22:51,039 --> 00:22:53,600
that are useful that are used by that

682
00:22:53,600 --> 00:22:54,720
script and so here's

683
00:22:54,720 --> 00:22:55,760
every single one that you could

684
00:22:55,760 --> 00:22:58,240
potentially exploit and also do some

685
00:22:58,240 --> 00:22:59,200
quick checks if

686
00:22:59,200 --> 00:23:01,760
imported modules are writable and pseudo

687
00:23:01,760 --> 00:23:03,440
attack ltx which aren't applicable here

688
00:23:03,440 --> 00:23:05,039
but yeah it's a really sick script i was

689
00:23:05,039 --> 00:23:06,000
pretty happy with it

690
00:23:06,000 --> 00:23:08,400
does some cool stuff and with that guys

691
00:23:08,400 --> 00:23:09,919
that is going to bring me to the closing

692
00:23:09,919 --> 00:23:11,679
of this presentation i know nika was

693
00:23:11,679 --> 00:23:13,039
looking questionably at me like come on

694
00:23:13,039 --> 00:23:15,200
dude hurry it up hurry up get it done

695
00:23:15,200 --> 00:23:17,280
so if you guys want to connect with me

696
00:23:17,280 --> 00:23:19,280
reach out to me on twitter at a fine

697
00:23:19,280 --> 00:23:20,840
security

698
00:23:20,840 --> 00:23:23,200
linkedin find security or discord

699
00:23:23,200 --> 00:23:26,400
find 6730 i'm more than happy to talk

700
00:23:26,400 --> 00:23:27,760
with anyone who's passionate about

701
00:23:27,760 --> 00:23:29,360
information security red tamer blue team

702
00:23:29,360 --> 00:23:30,799
i love talking to everybody it's an

703
00:23:30,799 --> 00:23:31,679
awesome time

704
00:23:31,679 --> 00:23:34,840
please check out my blog a

705
00:23:34,840 --> 00:23:36,000
findsecurity.gitlab.io

706
00:23:36,000 --> 00:23:38,320
it's a fun blog i try to post there when

707
00:23:38,320 --> 00:23:39,760
i can mostly write ups and other

708
00:23:39,760 --> 00:23:40,640
information

709
00:23:40,640 --> 00:23:42,240
and you can check out pi snatch here

710
00:23:42,240 --> 00:23:43,600
actually i'm gonna go to this really

711
00:23:43,600 --> 00:23:44,159
quick

712
00:23:44,159 --> 00:23:46,480
uh i'll drop this in youtube chat really

713
00:23:46,480 --> 00:23:47,679
quick um

714
00:23:47,679 --> 00:23:49,919
throw that down there so there's git lab

715
00:23:49,919 --> 00:23:51,840
there's my link to pi snatch you can

716
00:23:51,840 --> 00:23:52,640
check it out

717
00:23:52,640 --> 00:23:54,480
uh pretty basic but if you want to use

718
00:23:54,480 --> 00:23:56,480
it be sure to test it out and

719
00:23:56,480 --> 00:23:57,919
that's pretty much all i got so i'll

720
00:23:57,919 --> 00:23:59,760
hand it over to uh questions any

721
00:23:59,760 --> 00:24:01,760
questions that we've got

722
00:24:01,760 --> 00:24:03,679
hey sam thank you so much for that

723
00:24:03,679 --> 00:24:05,120
fantastic presentation

724
00:24:05,120 --> 00:24:08,240
you do have a couple questions um atomic

725
00:24:08,240 --> 00:24:09,360
would you like to start us off or do you

726
00:24:09,360 --> 00:24:10,720
want me to start yeah uh

727
00:24:10,720 --> 00:24:12,799
i'll start it off since it was what my

728
00:24:12,799 --> 00:24:14,240
question um

729
00:24:14,240 --> 00:24:18,799
i so a few languages let's say

730
00:24:18,799 --> 00:24:21,200
for example javascript i know some a lot

731
00:24:21,200 --> 00:24:22,559
of people hate on javascript

732
00:24:22,559 --> 00:24:25,279
uh when you import a script of your html

733
00:24:25,279 --> 00:24:26,799
you can add something

734
00:24:26,799 --> 00:24:30,960
um something called yeah a uh

735
00:24:30,960 --> 00:24:34,000
integrity um flag right

736
00:24:34,000 --> 00:24:36,640
which basically cross checks the your

737
00:24:36,640 --> 00:24:37,520
integrity hash

738
00:24:37,520 --> 00:24:39,840
versus your file does something in

739
00:24:39,840 --> 00:24:41,279
python like that exist

740
00:24:41,279 --> 00:24:43,440
that could potentially uh stop module

741
00:24:43,440 --> 00:24:44,480
hijacking

742
00:24:44,480 --> 00:24:46,480
that's a great question um i haven't

743
00:24:46,480 --> 00:24:48,000
really looked into the

744
00:24:48,000 --> 00:24:50,640
uh countermeasures for it to be honest

745
00:24:50,640 --> 00:24:52,720
and from my just rudimentary research of

746
00:24:52,720 --> 00:24:54,559
module hijacking i haven't seen

747
00:24:54,559 --> 00:24:56,480
anything particularly mentioned that's

748
00:24:56,480 --> 00:24:58,080
like hey you shouldn't

749
00:24:58,080 --> 00:25:00,320
you know you shouldn't be injectable but

750
00:25:00,320 --> 00:25:01,679
a lot of the security counter measures

751
00:25:01,679 --> 00:25:03,840
that you can do are relatively simple

752
00:25:03,840 --> 00:25:05,679
make sure that the modules themselves

753
00:25:05,679 --> 00:25:07,360
are only writable by roots

754
00:25:07,360 --> 00:25:08,960
you know make sure if the script is

755
00:25:08,960 --> 00:25:10,880
being run in a certain directory that

756
00:25:10,880 --> 00:25:13,200
proper permissions are set so you can't

757
00:25:13,200 --> 00:25:16,880
get access to that other user account um

758
00:25:16,880 --> 00:25:18,480
and then make sure pseudo permissions

759
00:25:18,480 --> 00:25:20,640
and such as the end keep stuff and just

760
00:25:20,640 --> 00:25:21,679
running the program

761
00:25:21,679 --> 00:25:23,360
uh are in place so there's things you

762
00:25:23,360 --> 00:25:24,640
can do from that perspective but i'm not

763
00:25:24,640 --> 00:25:26,159
sure if python has anything built in

764
00:25:26,159 --> 00:25:29,120
that will solve that issue

765
00:25:29,120 --> 00:25:33,200
alrighty and then follow-up question

766
00:25:33,200 --> 00:25:34,799
uh let me actually get to the question

767
00:25:34,799 --> 00:25:37,440
area that probably be helpful

768
00:25:37,440 --> 00:25:39,600
uh have you ever applied this outside of

769
00:25:39,600 --> 00:25:40,960
the live demo like have you ever had to

770
00:25:40,960 --> 00:25:42,000
do this uh

771
00:25:42,000 --> 00:25:45,039
in your day-to-day work or etc

772
00:25:45,039 --> 00:25:47,200
so i actually found out about this from

773
00:25:47,200 --> 00:25:49,279
doing a ctf on tryhackme

774
00:25:49,279 --> 00:25:50,799
uh if you're interested in trying it

775
00:25:50,799 --> 00:25:52,960
it's called the wonderland box it's a

776
00:25:52,960 --> 00:25:53,919
real challenge

777
00:25:53,919 --> 00:25:55,760
but that's where i was first introduced

778
00:25:55,760 --> 00:25:58,000
to it so it's really interesting

779
00:25:58,000 --> 00:26:00,480
as far as practical applications um i'm

780
00:26:00,480 --> 00:26:02,240
not a pen tester by trade i'm just a

781
00:26:02,240 --> 00:26:03,760
student so i haven't done too much of it

782
00:26:03,760 --> 00:26:05,200
from a work perspective

783
00:26:05,200 --> 00:26:07,919
uh but i mean it's it's potential you

784
00:26:07,919 --> 00:26:08,480
never know

785
00:26:08,480 --> 00:26:09,840
a lot of people i mean from a student

786
00:26:09,840 --> 00:26:11,279
perspective you're like oh how could

787
00:26:11,279 --> 00:26:12,640
this possibly ever exist

788
00:26:12,640 --> 00:26:14,080
and then you talk to a pet there's like

789
00:26:14,080 --> 00:26:15,679
yeah i've seen this like five times or

790
00:26:15,679 --> 00:26:16,640
whatever so

791
00:26:16,640 --> 00:26:18,720
i mean i personally haven't seen it or

792
00:26:18,720 --> 00:26:20,159
heard of it in a pen testing scenario

793
00:26:20,159 --> 00:26:20,640
but

794
00:26:20,640 --> 00:26:22,960
you never know you've seen crazier

795
00:26:22,960 --> 00:26:25,840
things happen in a real live environment

796
00:26:25,840 --> 00:26:29,760
makes sense and there's a final question

797
00:26:29,760 --> 00:26:32,000
how to use environment variables i don't

798
00:26:32,000 --> 00:26:33,760
understand the concept

799
00:26:33,760 --> 00:26:35,760
yeah okay so let me see if i can go to

800
00:26:35,760 --> 00:26:37,279
determine here so

801
00:26:37,279 --> 00:26:39,120
let's go really quick and i'm going to

802
00:26:39,120 --> 00:26:40,559
run n so

803
00:26:40,559 --> 00:26:42,880
this is all of the environment variables

804
00:26:42,880 --> 00:26:44,640
and they're basically like i mentioned

805
00:26:44,640 --> 00:26:46,640
storing information about

806
00:26:46,640 --> 00:26:48,960
uh about the system so you can see i've

807
00:26:48,960 --> 00:26:50,559
got my shell here

808
00:26:50,559 --> 00:26:53,279
i've got things like my present working

809
00:26:53,279 --> 00:26:54,480
directory

810
00:26:54,480 --> 00:26:56,480
log name home directory language and

811
00:26:56,480 --> 00:26:57,840
stuff and so basically

812
00:26:57,840 --> 00:26:59,840
the system will store a bunch of

813
00:26:59,840 --> 00:27:01,360
information uh

814
00:27:01,360 --> 00:27:03,279
about your current session and you might

815
00:27:03,279 --> 00:27:04,799
see environment variables used for

816
00:27:04,799 --> 00:27:06,480
various reasons

817
00:27:06,480 --> 00:27:08,320
sometimes for example proxies if you

818
00:27:08,320 --> 00:27:10,240
have a proxy at your work

819
00:27:10,240 --> 00:27:13,200
that you need to access you might store

820
00:27:13,200 --> 00:27:14,640
the proxy url

821
00:27:14,640 --> 00:27:16,559
in an environment variable called http

822
00:27:16,559 --> 00:27:17,679
underscore proxy

823
00:27:17,679 --> 00:27:19,039
it's really useful a lot of programs

824
00:27:19,039 --> 00:27:21,120
will check for that um and a quick

825
00:27:21,120 --> 00:27:22,640
example like if i wanted to

826
00:27:22,640 --> 00:27:26,000
export uh this should uh if i do

827
00:27:26,000 --> 00:27:29,679
export shell equals

828
00:27:29,679 --> 00:27:33,200
slash bin sh if i do end again

829
00:27:33,200 --> 00:27:34,559
it should show up yeah so we can see

830
00:27:34,559 --> 00:27:36,240
that my shell is now changed to bin sh

831
00:27:36,240 --> 00:27:37,760
so that's an example of export

832
00:27:37,760 --> 00:27:40,000
to modify things so generally speaking

833
00:27:40,000 --> 00:27:41,840
you'll use environment variables you

834
00:27:41,840 --> 00:27:43,440
might not touch them at all you might

835
00:27:43,440 --> 00:27:45,520
add things like proxies or sometimes

836
00:27:45,520 --> 00:27:46,480
people do do

837
00:27:46,480 --> 00:27:47,840
account credentials if they're running

838
00:27:47,840 --> 00:27:49,120
in a local machine and they need to pull

839
00:27:49,120 --> 00:27:50,720
credentials down for accessing things

840
00:27:50,720 --> 00:27:52,320
that does happen sometimes

841
00:27:52,320 --> 00:27:55,120
uh but basically all it is is it's a

842
00:27:55,120 --> 00:27:56,559
variable at an operating system level

843
00:27:56,559 --> 00:27:58,240
that anything can access

844
00:27:58,240 --> 00:28:01,039
and can be used for just defining useful

845
00:28:01,039 --> 00:28:02,559
information that programs want to know

846
00:28:02,559 --> 00:28:03,600
hopefully that answers your question

847
00:28:03,600 --> 00:28:05,520
kind of long-winded

848
00:28:05,520 --> 00:28:07,520
good job thank you i have one last

849
00:28:07,520 --> 00:28:09,360
question for you

850
00:28:09,360 --> 00:28:11,440
is this some machine with uh you know

851
00:28:11,440 --> 00:28:12,799
multiple escalations

852
00:28:12,799 --> 00:28:15,200
of yem that you've built yeah this is a

853
00:28:15,200 --> 00:28:16,320
vm that i built myself

854
00:28:16,320 --> 00:28:19,440
so uh do you mind releasing it

855
00:28:19,440 --> 00:28:21,679
yeah i'll see if i can get uh ov if it's

856
00:28:21,679 --> 00:28:23,279
saved i have some snapshots at work but

857
00:28:23,279 --> 00:28:23,600
i'll

858
00:28:23,600 --> 00:28:25,440
i'll get in touch with you guys so yeah

859
00:28:25,440 --> 00:28:26,559
look out for that you can mess around

860
00:28:26,559 --> 00:28:28,320
with python module hijacking the fun

861
00:28:28,320 --> 00:28:29,120
time

862
00:28:29,120 --> 00:28:31,760
awesome thank you so much again sam that

863
00:28:31,760 --> 00:28:33,760
was fantastic and we appreciate having

864
00:28:33,760 --> 00:28:35,760
you uh here to present for us

865
00:28:35,760 --> 00:28:37,200
yeah thanks for having me guys i hope

866
00:28:37,200 --> 00:28:38,480
everyone else enjoys the rest of digital

867
00:28:38,480 --> 00:28:38,960
over

868
00:28:38,960 --> 00:28:40,799
dose con i'll be around say hi enjoy the

869
00:28:40,799 --> 00:28:42,080
other speakers it's gonna be awesome bye

870
00:28:42,080 --> 00:28:43,120
guys

871
00:28:43,120 --> 00:28:45,840
bye

