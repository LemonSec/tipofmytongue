1
00:00:03,120 --> 00:00:05,040
hi everyone my name is doug crass and i

2
00:00:05,040 --> 00:00:06,480
want to welcome you to the digital

3
00:00:06,480 --> 00:00:09,360
overdose conference 2. today we're going

4
00:00:09,360 --> 00:00:11,280
to be talking about the adventures of

5
00:00:11,280 --> 00:00:14,920
iot hacking

6
00:00:16,400 --> 00:00:18,640
so first off let's start out with who am

7
00:00:18,640 --> 00:00:19,279
i

8
00:00:19,279 --> 00:00:21,760
i am a hacker i'm a continual learner

9
00:00:21,760 --> 00:00:24,000
and i'm a mega cooper i'm always trying

10
00:00:24,000 --> 00:00:26,240
to learn something new whether it's

11
00:00:26,240 --> 00:00:28,720
hacking or additional skills that help

12
00:00:28,720 --> 00:00:32,560
me be a better pen tester

13
00:00:33,280 --> 00:00:35,360
so what is iot everyone

14
00:00:35,360 --> 00:00:38,079
talks about these iot devices so let's

15
00:00:38,079 --> 00:00:40,239
kind of define what they are they could

16
00:00:40,239 --> 00:00:43,120
be a router it could be a thermostat a

17
00:00:43,120 --> 00:00:46,800
sensor a smart fridge

18
00:00:46,960 --> 00:00:48,879
but where do you start if you want to

19
00:00:48,879 --> 00:00:51,360
start hacking on some of these devices

20
00:00:51,360 --> 00:00:52,239
there's

21
00:00:52,239 --> 00:00:54,640
multiple ways to gain access

22
00:00:54,640 --> 00:00:56,399
to the devices whether it's through

23
00:00:56,399 --> 00:00:59,440
hardware through network services or you

24
00:00:59,440 --> 00:01:01,359
can look at the firmware

25
00:01:01,359 --> 00:01:03,760
to find other possible paths of

26
00:01:03,760 --> 00:01:05,680
exploitation

27
00:01:05,680 --> 00:01:08,479
so first let's talk about some of these

28
00:01:08,479 --> 00:01:12,920
examples that we see all the time

29
00:01:12,960 --> 00:01:15,360
we have

30
00:01:15,360 --> 00:01:17,759
temperature sensors security cameras

31
00:01:17,759 --> 00:01:20,159
washers dryers fridges

32
00:01:20,159 --> 00:01:22,640
really anything that's online that's not

33
00:01:22,640 --> 00:01:24,960
a computer and a lot of times these

34
00:01:24,960 --> 00:01:26,479
devices don't always have the best

35
00:01:26,479 --> 00:01:29,040
security maybe they don't get

36
00:01:29,040 --> 00:01:31,439
pen tested properly or

37
00:01:31,439 --> 00:01:32,880
the company just doesn't think they're

38
00:01:32,880 --> 00:01:35,119
worth pen testing because this requires

39
00:01:35,119 --> 00:01:38,400
a special skill set and iot pen testers

40
00:01:38,400 --> 00:01:41,840
can be hard to come by

41
00:01:43,119 --> 00:01:45,040
so why do we want to hack these devices

42
00:01:45,040 --> 00:01:47,680
well typically they're less secure

43
00:01:47,680 --> 00:01:50,079
they may not get security tested like we

44
00:01:50,079 --> 00:01:53,200
just talked about it's a lot of fun

45
00:01:53,200 --> 00:01:54,479
you see a lot of really cool

46
00:01:54,479 --> 00:01:58,000
vulnerabilities and some weird issues

47
00:01:58,000 --> 00:02:00,399
and there's various attack surfaces and

48
00:02:00,399 --> 00:02:02,000
once you learn the skill you can make

49
00:02:02,000 --> 00:02:03,759
yourself more marketable because there

50
00:02:03,759 --> 00:02:05,280
are firms that are creating these

51
00:02:05,280 --> 00:02:07,680
devices that are looking for

52
00:02:07,680 --> 00:02:10,080
people with iot

53
00:02:10,080 --> 00:02:12,560
skills

54
00:02:14,879 --> 00:02:16,480
so let's talk about

55
00:02:16,480 --> 00:02:18,319
what kind of skills you might need for

56
00:02:18,319 --> 00:02:20,160
iot pen testing

57
00:02:20,160 --> 00:02:22,400
you should understand the basic level of

58
00:02:22,400 --> 00:02:25,120
electronics and how they function

59
00:02:25,120 --> 00:02:27,200
learning how to use a multimeter will

60
00:02:27,200 --> 00:02:30,400
greatly help your journey

61
00:02:30,400 --> 00:02:32,640
some devices are really nice and they

62
00:02:32,640 --> 00:02:33,599
label

63
00:02:33,599 --> 00:02:35,360
different hardware protocols directly on

64
00:02:35,360 --> 00:02:36,800
the board

65
00:02:36,800 --> 00:02:38,400
otherwise we can identify these

66
00:02:38,400 --> 00:02:39,920
protocols

67
00:02:39,920 --> 00:02:42,800
by looking at the

68
00:02:42,800 --> 00:02:45,680
processor models and then googling out

69
00:02:45,680 --> 00:02:48,000
the pins and figuring out what pens do

70
00:02:48,000 --> 00:02:50,239
what on the device

71
00:02:50,239 --> 00:02:52,319
reverse engineering is a skill i use all

72
00:02:52,319 --> 00:02:53,360
the time

73
00:02:53,360 --> 00:02:56,080
you don't necessarily need to be a crazy

74
00:02:56,080 --> 00:02:58,080
coder and oh i've had 20 years

75
00:02:58,080 --> 00:02:59,920
experience in this language or i can

76
00:02:59,920 --> 00:03:02,480
write seven different

77
00:03:02,480 --> 00:03:04,560
various codes

78
00:03:04,560 --> 00:03:06,800
you just need to be able to google and

79
00:03:06,800 --> 00:03:08,800
kind of figure out what you think a

80
00:03:08,800 --> 00:03:09,960
function might do

81
00:03:09,960 --> 00:03:12,080
[Music]

82
00:03:12,080 --> 00:03:14,400
when you open up different parts of the

83
00:03:14,400 --> 00:03:17,120
firmware you can open them in tools like

84
00:03:17,120 --> 00:03:18,319
hedra

85
00:03:18,319 --> 00:03:20,560
which is a decompiler and i'll give you

86
00:03:20,560 --> 00:03:22,400
cdc code

87
00:03:22,400 --> 00:03:25,200
when i started iot pen testing i had no

88
00:03:25,200 --> 00:03:27,200
knowledge of c code but i can still look

89
00:03:27,200 --> 00:03:29,360
at it and find one

90
00:03:29,360 --> 00:03:31,440
it's really just trying to figure out

91
00:03:31,440 --> 00:03:34,080
what the developer was thinking and how

92
00:03:34,080 --> 00:03:36,159
you could abuse the function

93
00:03:36,159 --> 00:03:37,840
in a way that they did

94
00:03:37,840 --> 00:03:40,400
and expect

95
00:03:40,400 --> 00:03:42,159
and then you should have some kind of

96
00:03:42,159 --> 00:03:44,159
soldering experience it's pretty easy to

97
00:03:44,159 --> 00:03:46,319
get this experience get a soldering iron

98
00:03:46,319 --> 00:03:49,120
a fan to pull the fumes away

99
00:03:49,120 --> 00:03:52,159
some lead free solder and then just get

100
00:03:52,159 --> 00:03:54,799
projects online like different badges

101
00:03:54,799 --> 00:03:56,640
are really easy to solder and it's a lot

102
00:03:56,640 --> 00:03:58,319
of fun

103
00:03:58,319 --> 00:03:59,920
and finally you just need a sense of

104
00:03:59,920 --> 00:04:01,519
adventure so you need to be able to

105
00:04:01,519 --> 00:04:02,720
think about

106
00:04:02,720 --> 00:04:04,159
different ways to interact with the

107
00:04:04,159 --> 00:04:06,720
device and oh what happens if i do this

108
00:04:06,720 --> 00:04:08,799
create your theories and then go

109
00:04:08,799 --> 00:04:12,080
test out those theories

110
00:04:12,879 --> 00:04:14,640
so what kind of attack surfaces do we

111
00:04:14,640 --> 00:04:16,880
have well we have uart

112
00:04:16,880 --> 00:04:18,880
jtag and spy which are some hardware

113
00:04:18,880 --> 00:04:20,160
protocols

114
00:04:20,160 --> 00:04:22,560
that we'll get into a little later

115
00:04:22,560 --> 00:04:24,479
and then there's also usually network

116
00:04:24,479 --> 00:04:28,479
services on these devices so http https

117
00:04:28,479 --> 00:04:29,919
servers

118
00:04:29,919 --> 00:04:34,080
mqtt and mqtts which is a publish

119
00:04:34,080 --> 00:04:37,120
subscribe network protocol so

120
00:04:37,120 --> 00:04:39,520
you might subscribe to a temperature

121
00:04:39,520 --> 00:04:42,080
sensor reading and the device might push

122
00:04:42,080 --> 00:04:43,840
every five seconds

123
00:04:43,840 --> 00:04:46,479
the temperature is this degree in this

124
00:04:46,479 --> 00:04:48,080
degree and then

125
00:04:48,080 --> 00:04:52,080
your device might alert based on how

126
00:04:52,080 --> 00:04:54,080
that temperature changes so suddenly

127
00:04:54,080 --> 00:04:54,800
it's

128
00:04:54,800 --> 00:04:56,560
plus 30 degrees

129
00:04:56,560 --> 00:04:58,400
maybe your fridge is broken and you have

130
00:04:58,400 --> 00:05:00,960
some kind of issue

131
00:05:00,960 --> 00:05:03,199
you can also look at how the firmware

132
00:05:03,199 --> 00:05:04,720
upgrade

133
00:05:04,720 --> 00:05:08,080
mechanisms can be attacked so is the

134
00:05:08,080 --> 00:05:10,000
device hashing the firmware and checking

135
00:05:10,000 --> 00:05:12,639
it against a specific signature is it

136
00:05:12,639 --> 00:05:14,639
encrypting the firmware or does it just

137
00:05:14,639 --> 00:05:17,039
accept any firmware you give it

138
00:05:17,039 --> 00:05:18,960
so you could make modifications to the

139
00:05:18,960 --> 00:05:21,360
firmware zip it up send it to the device

140
00:05:21,360 --> 00:05:24,240
and maybe backdoor the device and then

141
00:05:24,240 --> 00:05:26,160
you also have the bluetooth

142
00:05:26,160 --> 00:05:28,880
attack surface on some devices you could

143
00:05:28,880 --> 00:05:31,199
maybe sniff bluetooth traffic you could

144
00:05:31,199 --> 00:05:33,600
sniff a firmware upgrade maybe coming

145
00:05:33,600 --> 00:05:36,560
from like a mobile application to

146
00:05:36,560 --> 00:05:38,639
pushing the firmware on the device

147
00:05:38,639 --> 00:05:40,800
changing device settings

148
00:05:40,800 --> 00:05:44,000
various methods there

149
00:05:44,400 --> 00:05:46,000
so let's talk about disassembling

150
00:05:46,000 --> 00:05:47,360
devices

151
00:05:47,360 --> 00:05:49,280
you want to open them very carefully it

152
00:05:49,280 --> 00:05:51,840
is very easy to snap some of the

153
00:05:51,840 --> 00:05:54,080
connector pins on like the outside of

154
00:05:54,080 --> 00:05:55,600
the case which

155
00:05:55,600 --> 00:05:57,840
may not be super important if you're

156
00:05:57,840 --> 00:05:59,840
just hacking away at home but when

157
00:05:59,840 --> 00:06:02,639
you're hacking enterprise devices

158
00:06:02,639 --> 00:06:06,080
you want to be really careful and if you

159
00:06:06,080 --> 00:06:07,680
were to

160
00:06:07,680 --> 00:06:08,639
try to

161
00:06:08,639 --> 00:06:10,000
prove a point that you could send a

162
00:06:10,000 --> 00:06:13,199
malicious device into

163
00:06:13,199 --> 00:06:15,840
production then you might want to not

164
00:06:15,840 --> 00:06:18,880
have a totally destroyed device

165
00:06:18,880 --> 00:06:21,199
always have the power disconnected when

166
00:06:21,199 --> 00:06:23,280
you're opening these devices because at

167
00:06:23,280 --> 00:06:24,960
first you don't know how it functions

168
00:06:24,960 --> 00:06:26,960
see there's a risk of being shocked

169
00:06:26,960 --> 00:06:27,840
there

170
00:06:27,840 --> 00:06:29,360
and then you can look at the different

171
00:06:29,360 --> 00:06:31,680
components like on this board we have

172
00:06:31,680 --> 00:06:33,600
this wind band ship

173
00:06:33,600 --> 00:06:36,160
and you can google that chip and what

174
00:06:36,160 --> 00:06:38,240
it'll tell you is this is a ram chip

175
00:06:38,240 --> 00:06:40,800
it's maybe not super interesting

176
00:06:40,800 --> 00:06:43,280
but then if you looked at this broadcom

177
00:06:43,280 --> 00:06:44,960
chip you'll find out that's actually the

178
00:06:44,960 --> 00:06:46,080
processor

179
00:06:46,080 --> 00:06:47,680
so you can figure out what hardware

180
00:06:47,680 --> 00:06:51,120
protocols you could interact with on the

181
00:06:51,120 --> 00:06:53,919
processor and how to potentially hack

182
00:06:53,919 --> 00:06:55,199
through

183
00:06:55,199 --> 00:06:57,440
some

184
00:06:57,599 --> 00:06:59,440
security

185
00:06:59,440 --> 00:07:00,880
protections put in place or maybe

186
00:07:00,880 --> 00:07:02,800
there's no security protections and you

187
00:07:02,800 --> 00:07:06,240
can just hack right in

188
00:07:06,800 --> 00:07:08,319
so how do we communicate with these

189
00:07:08,319 --> 00:07:10,080
devices well we normally start out by

190
00:07:10,080 --> 00:07:12,720
using a multimeter what i use this for

191
00:07:12,720 --> 00:07:15,680
is to measure voltage and trace out pins

192
00:07:15,680 --> 00:07:16,639
so

193
00:07:16,639 --> 00:07:18,319
maybe i know that

194
00:07:18,319 --> 00:07:21,120
there's a receive pin on the processor

195
00:07:21,120 --> 00:07:22,800
but i want to know does that go anywhere

196
00:07:22,800 --> 00:07:25,039
on the board because a lot of times

197
00:07:25,039 --> 00:07:26,080
there'll be

198
00:07:26,080 --> 00:07:27,520
pins on the board that you can just

199
00:07:27,520 --> 00:07:29,440
solder to instead of trying to solder to

200
00:07:29,440 --> 00:07:31,520
the processor because that's really

201
00:07:31,520 --> 00:07:32,880
really difficult

202
00:07:32,880 --> 00:07:36,240
and nothing that i've ever attempted

203
00:07:36,240 --> 00:07:37,440
you also

204
00:07:37,440 --> 00:07:40,000
want a usb to serial adapter so what

205
00:07:40,000 --> 00:07:41,919
this does is it lets you communicate

206
00:07:41,919 --> 00:07:43,919
over some of these protocols like you

207
00:07:43,919 --> 00:07:44,720
are

208
00:07:44,720 --> 00:07:48,319
and you can pull up a terminal and putty

209
00:07:48,319 --> 00:07:51,440
and you can watch the device boom

210
00:07:51,440 --> 00:07:53,440
and you can also get logic analyzers

211
00:07:53,440 --> 00:07:54,639
where you can

212
00:07:54,639 --> 00:07:56,800
view the signal coming across

213
00:07:56,800 --> 00:07:59,360
the different pins and that some of the

214
00:07:59,360 --> 00:08:01,520
software will try to decode that for you

215
00:08:01,520 --> 00:08:03,120
or you can kind of

216
00:08:03,120 --> 00:08:06,319
understand okay data travels on this

217
00:08:06,319 --> 00:08:08,000
line first and then it goes to a

218
00:08:08,000 --> 00:08:10,240
different pin and i can help you attack

219
00:08:10,240 --> 00:08:13,840
these devices as well

220
00:08:19,280 --> 00:08:21,199
so let's talk about how you would go

221
00:08:21,199 --> 00:08:23,840
about maybe attacking some hardware so

222
00:08:23,840 --> 00:08:25,759
you would connect to

223
00:08:25,759 --> 00:08:27,199
uart

224
00:08:27,199 --> 00:08:30,080
and you can watch the boot process

225
00:08:30,080 --> 00:08:31,599
and this might tell you okay the

226
00:08:31,599 --> 00:08:33,599
firmware's loaded at these various

227
00:08:33,599 --> 00:08:35,120
memory addresses and these are the

228
00:08:35,120 --> 00:08:37,279
different parts of the firmware

229
00:08:37,279 --> 00:08:39,599
and maybe something happens that's

230
00:08:39,599 --> 00:08:41,679
interesting maybe you can interrupt it

231
00:08:41,679 --> 00:08:44,640
using something like just ctrl c

232
00:08:44,640 --> 00:08:47,839
some things are more difficult so the

233
00:08:47,839 --> 00:08:50,320
firmware is usually stored on a flash

234
00:08:50,320 --> 00:08:53,440
chip but if you short that flash chip

235
00:08:53,440 --> 00:08:55,600
the processor can't read the firmware

236
00:08:55,600 --> 00:08:57,360
from the flash and a lot of times it'll

237
00:08:57,360 --> 00:08:59,920
fall into like a debug mode

238
00:08:59,920 --> 00:09:03,279
um which is usually a uart shell or like

239
00:09:03,279 --> 00:09:06,000
a cfe shell which is a common firmware

240
00:09:06,000 --> 00:09:07,360
emulator

241
00:09:07,360 --> 00:09:09,360
bootloader

242
00:09:09,360 --> 00:09:11,440
so then once we're in the bootloader we

243
00:09:11,440 --> 00:09:13,760
can modify how the device boots up so

244
00:09:13,760 --> 00:09:15,839
typically it'll you know load a couple

245
00:09:15,839 --> 00:09:17,760
different things load some firmware into

246
00:09:17,760 --> 00:09:20,000
memory and then boot the firmware

247
00:09:20,000 --> 00:09:22,000
but if at the end of that you could

248
00:09:22,000 --> 00:09:23,680
modify it say yeah go ahead and boot the

249
00:09:23,680 --> 00:09:26,399
firmware and also just do init equals

250
00:09:26,399 --> 00:09:30,160
bin shell so your initialize

251
00:09:30,160 --> 00:09:31,440
variable

252
00:09:31,440 --> 00:09:33,519
starts a shell so it loads up your whole

253
00:09:33,519 --> 00:09:35,839
firmware then you get a shell when the

254
00:09:35,839 --> 00:09:38,160
device reboots and

255
00:09:38,160 --> 00:09:40,399
you win

256
00:09:40,399 --> 00:09:42,000
and then from there you can pull off

257
00:09:42,000 --> 00:09:44,800
firmware or do other various

258
00:09:44,800 --> 00:09:47,519
things so you can discover

259
00:09:47,519 --> 00:09:50,760
more vulnerabilities

260
00:09:53,360 --> 00:09:56,000
so let's look at what a uart connection

261
00:09:56,000 --> 00:09:58,000
might let you do we kind of covered it

262
00:09:58,000 --> 00:10:00,720
there but you can see here that we can

263
00:10:00,720 --> 00:10:02,240
get you know the common from our

264
00:10:02,240 --> 00:10:05,279
emulator version so maybe there's some

265
00:10:05,279 --> 00:10:07,839
vulnerabilities here in this version

266
00:10:07,839 --> 00:10:09,519
where you can look and see okay we're

267
00:10:09,519 --> 00:10:11,040
loading this

268
00:10:11,040 --> 00:10:13,440
memory address here this confirm

269
00:10:13,440 --> 00:10:16,480
contains the cfe memory

270
00:10:16,480 --> 00:10:19,040
so maybe that's not super interesting

271
00:10:19,040 --> 00:10:21,200
but the data might be interesting maybe

272
00:10:21,200 --> 00:10:23,760
the firmware's in there

273
00:10:23,760 --> 00:10:26,640
and then you can see these pins here a

274
00:10:26,640 --> 00:10:27,839
lot of times when you're looking for

275
00:10:27,839 --> 00:10:30,480
uart there's a four pin setup

276
00:10:30,480 --> 00:10:32,720
and you can find all four pins on the

277
00:10:32,720 --> 00:10:34,880
board and then put solder to those and

278
00:10:34,880 --> 00:10:38,000
connect them to your usb to serial

279
00:10:38,000 --> 00:10:40,079
connection and then

280
00:10:40,079 --> 00:10:45,160
that lets you watch this boot up process

281
00:10:48,480 --> 00:10:51,839
so what's some software that we need for

282
00:10:51,839 --> 00:10:54,800
iot pen testing i use linux a lot things

283
00:10:54,800 --> 00:10:56,399
like screen so you could watch that

284
00:10:56,399 --> 00:10:57,839
buddha process

285
00:10:57,839 --> 00:10:58,880
um

286
00:10:58,880 --> 00:11:01,839
nm bin walk so nm lets you look at

287
00:11:01,839 --> 00:11:03,839
function tables and binaries and then

288
00:11:03,839 --> 00:11:06,320
you can pull out certain keywords like

289
00:11:06,320 --> 00:11:09,040
exec or system calls

290
00:11:09,040 --> 00:11:10,959
that you can

291
00:11:10,959 --> 00:11:13,760
then use to go find dangerous functions

292
00:11:13,760 --> 00:11:15,600
and find vulnerabilities

293
00:11:15,600 --> 00:11:17,760
i use bin walk all the time this is a

294
00:11:17,760 --> 00:11:20,000
great tool for extracting firmware and

295
00:11:20,000 --> 00:11:22,320
it does it by identifying various magic

296
00:11:22,320 --> 00:11:25,440
bytes in a firmware image and then it'll

297
00:11:25,440 --> 00:11:27,760
rip out those various parts and it'll

298
00:11:27,760 --> 00:11:29,440
attract it all for you

299
00:11:29,440 --> 00:11:33,279
hopefully at the end you get a

300
00:11:33,360 --> 00:11:35,600
linux file system or something so that

301
00:11:35,600 --> 00:11:36,720
you can

302
00:11:36,720 --> 00:11:40,160
further look at the device

303
00:11:40,160 --> 00:11:43,200
on windows you can use things like putty

304
00:11:43,200 --> 00:11:43,920
or

305
00:11:43,920 --> 00:11:46,880
ghidra for reverse engineering a lot of

306
00:11:46,880 --> 00:11:49,040
people use ida pro it's very expensive

307
00:11:49,040 --> 00:11:51,680
so i use edra

308
00:11:51,680 --> 00:11:53,839
windows subsystem for linux as well so

309
00:11:53,839 --> 00:11:55,760
you're not maybe jumping between virtual

310
00:11:55,760 --> 00:11:58,079
machines but also use virtual machines

311
00:11:58,079 --> 00:12:00,320
to do things like your fuzz testing and

312
00:12:00,320 --> 00:12:04,880
other interactions with the device

313
00:12:09,519 --> 00:12:10,880
so how do we

314
00:12:10,880 --> 00:12:12,639
interact with

315
00:12:12,639 --> 00:12:14,480
the

316
00:12:14,480 --> 00:12:15,279
uh

317
00:12:15,279 --> 00:12:17,120
firmware and how do you kind of learn

318
00:12:17,120 --> 00:12:18,959
about firmware

319
00:12:18,959 --> 00:12:21,680
you can go online you can just download

320
00:12:21,680 --> 00:12:24,000
a lot of different firmware so i

321
00:12:24,000 --> 00:12:26,320
recommend starting with the link below

322
00:12:26,320 --> 00:12:28,240
there's a great blog post on this and

323
00:12:28,240 --> 00:12:30,639
you could download that same firmware

324
00:12:30,639 --> 00:12:32,079
walk through

325
00:12:32,079 --> 00:12:33,360
the

326
00:12:33,360 --> 00:12:36,839
process that they followed find their

327
00:12:36,839 --> 00:12:40,560
um command injection and just download

328
00:12:40,560 --> 00:12:43,440
random firmware it'll get you used to

329
00:12:43,440 --> 00:12:45,680
the reverse engineering the extracting

330
00:12:45,680 --> 00:12:47,680
kind of the methodology

331
00:12:47,680 --> 00:12:49,440
so you may not find a bunch of

332
00:12:49,440 --> 00:12:51,360
vulnerabilities in the firmware that

333
00:12:51,360 --> 00:12:52,959
you're reverse engineering or that

334
00:12:52,959 --> 00:12:55,200
specific binary but you can start

335
00:12:55,200 --> 00:12:57,279
looking at some of that cdc code and get

336
00:12:57,279 --> 00:12:59,279
used to okay this is what this looks

337
00:12:59,279 --> 00:13:01,200
like and here's how i kind of build out

338
00:13:01,200 --> 00:13:02,800
my methodology

339
00:13:02,800 --> 00:13:07,160
for quickly finding vulnerabilities

340
00:13:08,240 --> 00:13:10,320
so let's look at extracting the firmware

341
00:13:10,320 --> 00:13:11,839
so we use bin walk to extract the

342
00:13:11,839 --> 00:13:14,480
firmware so go download some firmware on

343
00:13:14,480 --> 00:13:16,240
a vendor site

344
00:13:16,240 --> 00:13:18,480
if bin walks not installed

345
00:13:18,480 --> 00:13:21,839
you can google it and find out how to

346
00:13:21,839 --> 00:13:24,320
install it off github

347
00:13:24,320 --> 00:13:26,240
and then once you

348
00:13:26,240 --> 00:13:28,240
extract the firmware you're looking for

349
00:13:28,240 --> 00:13:29,360
something that looks kind of like a

350
00:13:29,360 --> 00:13:31,440
linux file system so if you look here we

351
00:13:31,440 --> 00:13:36,000
have user var www root s pen this looks

352
00:13:36,000 --> 00:13:38,240
like a file system to me

353
00:13:38,240 --> 00:13:41,040
and once you get there you can start

354
00:13:41,040 --> 00:13:43,839
extracting the firmware

355
00:13:43,839 --> 00:13:45,440
or you've already extracted firmware at

356
00:13:45,440 --> 00:13:47,120
this point so this is what extracting

357
00:13:47,120 --> 00:13:49,279
the firmware would look like so bin walk

358
00:13:49,279 --> 00:13:51,760
has gone ahead and pulled out

359
00:13:51,760 --> 00:13:53,600
some different magic bites for things

360
00:13:53,600 --> 00:13:54,920
that it thinks are

361
00:13:54,920 --> 00:13:56,240
[Music]

362
00:13:56,240 --> 00:13:58,560
extractable from that firmware image and

363
00:13:58,560 --> 00:13:59,519
then

364
00:13:59,519 --> 00:14:01,120
it'll tell you all this information

365
00:14:01,120 --> 00:14:02,639
eventually you'll get

366
00:14:02,639 --> 00:14:05,279
your linux file system

367
00:14:05,279 --> 00:14:07,440
so go through this start looking for

368
00:14:07,440 --> 00:14:10,320
binaries that might be interesting

369
00:14:10,320 --> 00:14:13,199
if you're doing iot pen testing for like

370
00:14:13,199 --> 00:14:15,760
an organization and say start looking at

371
00:14:15,760 --> 00:14:17,440
binaries that you know that your

372
00:14:17,440 --> 00:14:19,680
developers wrote because yeah you might

373
00:14:19,680 --> 00:14:21,680
find something in like an open source

374
00:14:21,680 --> 00:14:23,519
binary so you can submit that to the

375
00:14:23,519 --> 00:14:25,040
package

376
00:14:25,040 --> 00:14:26,880
maintainers and say hey i found an issue

377
00:14:26,880 --> 00:14:29,120
you can fix it

378
00:14:29,120 --> 00:14:31,120
but a lot of times

379
00:14:31,120 --> 00:14:32,800
it's better just to focus on what your

380
00:14:32,800 --> 00:14:35,199
developers wrote because a lot of other

381
00:14:35,199 --> 00:14:36,800
people have looked at those binaries so

382
00:14:36,800 --> 00:14:41,240
hopefully they're secure enough

383
00:14:44,240 --> 00:14:46,000
so how do we go about finding some of

384
00:14:46,000 --> 00:14:48,320
these vulnerabilities well you can do

385
00:14:48,320 --> 00:14:51,120
fuzz testing so sending random random

386
00:14:51,120 --> 00:14:53,600
data into services maybe a network

387
00:14:53,600 --> 00:14:54,880
socket or

388
00:14:54,880 --> 00:14:56,880
you know you have a username supposed to

389
00:14:56,880 --> 00:14:58,880
only be eight characters well what if

390
00:14:58,880 --> 00:15:01,199
you sent nine or what if you sent nine

391
00:15:01,199 --> 00:15:02,480
thousand

392
00:15:02,480 --> 00:15:06,000
or what if the user names only uh

393
00:15:06,000 --> 00:15:08,399
letters but you send a bunch of symbols

394
00:15:08,399 --> 00:15:10,800
or a bunch of

395
00:15:10,800 --> 00:15:12,399
letters from a different language and

396
00:15:12,399 --> 00:15:14,320
it's supposed to be only accepting u.s

397
00:15:14,320 --> 00:15:16,320
language doesn't cause a crash does it

398
00:15:16,320 --> 00:15:18,800
overflow a buffer what happens

399
00:15:18,800 --> 00:15:20,240
so you just kind of start testing these

400
00:15:20,240 --> 00:15:22,399
theories and go okay

401
00:15:22,399 --> 00:15:24,160
this happens and you can automate a lot

402
00:15:24,160 --> 00:15:26,320
of this using various fuzzers so you

403
00:15:26,320 --> 00:15:29,040
don't have to sit there oh i entered 100

404
00:15:29,040 --> 00:15:30,639
and nothing happened i

405
00:15:30,639 --> 00:15:33,440
300 nothing happened i had 500 days

406
00:15:33,440 --> 00:15:35,120
nothing happened

407
00:15:35,120 --> 00:15:36,560
um

408
00:15:36,560 --> 00:15:38,399
and then the whole reverse engineering

409
00:15:38,399 --> 00:15:40,639
part so look at your binary see what's

410
00:15:40,639 --> 00:15:42,639
listening on network sockets is where i

411
00:15:42,639 --> 00:15:43,920
normally start

412
00:15:43,920 --> 00:15:45,920
because those are going to be remotely

413
00:15:45,920 --> 00:15:47,680
attackable those are higher

414
00:15:47,680 --> 00:15:49,120
vulnerabilities

415
00:15:49,120 --> 00:15:51,040
than something that you know you can

416
00:15:51,040 --> 00:15:52,880
only access once you have a shell on the

417
00:15:52,880 --> 00:15:56,959
device that's not as critical

418
00:15:56,959 --> 00:15:58,959
and then figure out kind of where your

419
00:15:58,959 --> 00:16:01,279
user inputs are what happens so is there

420
00:16:01,279 --> 00:16:03,360
a login field what happens when you

421
00:16:03,360 --> 00:16:05,839
enter a username on the backend does

422
00:16:05,839 --> 00:16:07,839
that username get piped into some of the

423
00:16:07,839 --> 00:16:09,920
next command can you escape out of that

424
00:16:09,920 --> 00:16:12,800
command and run your own command

425
00:16:12,800 --> 00:16:14,720
things to kind of look for and then test

426
00:16:14,720 --> 00:16:17,759
as you get into it

427
00:16:18,880 --> 00:16:20,399
so what are some vulnerabilities that we

428
00:16:20,399 --> 00:16:22,800
find in the field we find a lot of

429
00:16:22,800 --> 00:16:24,720
remote code execution

430
00:16:24,720 --> 00:16:27,440
there's a lot of buffer overflows where

431
00:16:27,440 --> 00:16:28,399
you

432
00:16:28,399 --> 00:16:30,320
say the username can only be eight

433
00:16:30,320 --> 00:16:34,560
characters you put in nine so that

434
00:16:34,560 --> 00:16:36,800
the ninth character ends up in some

435
00:16:36,800 --> 00:16:39,279
other memory space and then that can

436
00:16:39,279 --> 00:16:41,519
cause all sorts of issues

437
00:16:41,519 --> 00:16:42,320
um

438
00:16:42,320 --> 00:16:44,399
from command injection to memory

439
00:16:44,399 --> 00:16:47,199
corruption and other things

440
00:16:47,199 --> 00:16:48,639
there's also the

441
00:16:48,639 --> 00:16:51,120
malicious firmware update mechanism so

442
00:16:51,120 --> 00:16:53,120
maybe i can just push a

443
00:16:53,120 --> 00:16:55,279
firmware with my

444
00:16:55,279 --> 00:16:57,120
backdoor binary in there and it just

445
00:16:57,120 --> 00:16:59,199
accepts it so it's not doing any kind of

446
00:16:59,199 --> 00:17:00,399
checking

447
00:17:00,399 --> 00:17:02,800
you can get access through the hardware

448
00:17:02,800 --> 00:17:05,679
leftover debug interfaces like the uarts

449
00:17:05,679 --> 00:17:08,000
and the jtag

450
00:17:08,000 --> 00:17:10,400
you could cause denial of service where

451
00:17:10,400 --> 00:17:12,959
you send a specific

452
00:17:12,959 --> 00:17:15,359
thing to the device like a string or

453
00:17:15,359 --> 00:17:17,280
something and it crashes the service or

454
00:17:17,280 --> 00:17:20,079
the whole device device reboots

455
00:17:20,079 --> 00:17:22,000
and then there's a lot of unencrypted

456
00:17:22,000 --> 00:17:24,799
communication so there's not good

457
00:17:24,799 --> 00:17:27,599
ssl and tls because managing

458
00:17:27,599 --> 00:17:31,679
certificates on devices can be hard

459
00:17:31,679 --> 00:17:33,200
and a lot of them just

460
00:17:33,200 --> 00:17:36,960
go over http anyway

461
00:17:40,400 --> 00:17:42,240
so let's look at

462
00:17:42,240 --> 00:17:44,240
going ahead and looking for command

463
00:17:44,240 --> 00:17:46,240
injection

464
00:17:46,240 --> 00:17:47,760
so what we have here

465
00:17:47,760 --> 00:17:50,640
is we have the start of a c function

466
00:17:50,640 --> 00:17:52,960
we're declaring some variables we have

467
00:17:52,960 --> 00:17:56,160
this command that is going to be fit a

468
00:17:56,160 --> 00:17:58,400
max of 50

469
00:17:58,400 --> 00:18:03,440
characters and it takes user bin cat

470
00:18:03,440 --> 00:18:05,520
now what we're doing here

471
00:18:05,520 --> 00:18:07,760
is we're putting in

472
00:18:07,760 --> 00:18:11,120
um argument one which is going to be the

473
00:18:11,120 --> 00:18:13,440
user input so when you run something

474
00:18:13,440 --> 00:18:16,320
like cat test dot text

475
00:18:16,320 --> 00:18:18,320
argument one in that scenario would be

476
00:18:18,320 --> 00:18:20,320
test.text

477
00:18:20,320 --> 00:18:23,360
so arc v1 is controlled there is a

478
00:18:23,360 --> 00:18:26,559
system call here to the command

479
00:18:26,559 --> 00:18:29,360
so we are going to be able to

480
00:18:29,360 --> 00:18:32,479
do command injection

481
00:18:33,280 --> 00:18:36,000
so let's look at the stir cat function

482
00:18:36,000 --> 00:18:37,440
that was used

483
00:18:37,440 --> 00:18:39,440
you can just google this and it will

484
00:18:39,440 --> 00:18:41,440
tell you all this information which is

485
00:18:41,440 --> 00:18:44,240
really nice about c it's all very well

486
00:18:44,240 --> 00:18:46,240
documented

487
00:18:46,240 --> 00:18:47,840
so we have

488
00:18:47,840 --> 00:18:50,240
a destination so this is a pointer to

489
00:18:50,240 --> 00:18:52,720
the destination array this will contain

490
00:18:52,720 --> 00:18:54,240
a c string

491
00:18:54,240 --> 00:18:57,200
the source is going to be string to be

492
00:18:57,200 --> 00:19:00,000
appended and then it returns a pointer

493
00:19:00,000 --> 00:19:01,520
to

494
00:19:01,520 --> 00:19:02,559
that

495
00:19:02,559 --> 00:19:03,760
string

496
00:19:03,760 --> 00:19:05,280
so

497
00:19:05,280 --> 00:19:07,679
at the end of this we're going to point

498
00:19:07,679 --> 00:19:08,880
to

499
00:19:08,880 --> 00:19:12,080
somewhere in memory that is user bin cat

500
00:19:12,080 --> 00:19:13,360
and my

501
00:19:13,360 --> 00:19:16,000
attacker argument so in this case maybe

502
00:19:16,000 --> 00:19:17,840
it's test.text

503
00:19:17,840 --> 00:19:21,439
if you are not being malicious

504
00:19:22,720 --> 00:19:23,600
so

505
00:19:23,600 --> 00:19:26,320
we can add additional arguments to this

506
00:19:26,320 --> 00:19:29,679
so what if we did cat test.text

507
00:19:29,679 --> 00:19:32,559
semicolon so now run a new command

508
00:19:32,559 --> 00:19:37,120
bin netcat listen on port quad 7s

509
00:19:37,120 --> 00:19:39,120
well now we're running the second

510
00:19:39,120 --> 00:19:40,960
command and now we have listener on the

511
00:19:40,960 --> 00:19:43,679
device so we could go and

512
00:19:43,679 --> 00:19:45,520
connect directly to the device we've

513
00:19:45,520 --> 00:19:47,360
broken out of the command

514
00:19:47,360 --> 00:19:49,200
and now we can access the system

515
00:19:49,200 --> 00:19:50,880
remotely and

516
00:19:50,880 --> 00:19:52,640
a lot of people don't

517
00:19:52,640 --> 00:19:55,120
monitor iot devices

518
00:19:55,120 --> 00:19:57,600
so you may be able to put in your back

519
00:19:57,600 --> 00:20:01,360
door and nobody will ever find it

520
00:20:02,799 --> 00:20:05,280
so let's look at some decompiled code

521
00:20:05,280 --> 00:20:08,559
here this is off a blog post from cisco

522
00:20:08,559 --> 00:20:11,039
talos i recommend reading

523
00:20:11,039 --> 00:20:12,880
any blogs that they put out they're all

524
00:20:12,880 --> 00:20:14,480
fantastic

525
00:20:14,480 --> 00:20:15,600
and we're going to look at a cool

526
00:20:15,600 --> 00:20:18,880
example they found of command injection

527
00:20:18,880 --> 00:20:20,640
so if you look up here this is some of

528
00:20:20,640 --> 00:20:24,559
the cdc code that was reverse engineered

529
00:20:24,559 --> 00:20:26,640
and that basically what we have is this

530
00:20:26,640 --> 00:20:27,840
command

531
00:20:27,840 --> 00:20:30,640
and we got this long command here this

532
00:20:30,640 --> 00:20:33,600
wpa cli command

533
00:20:33,600 --> 00:20:35,360
and it does

534
00:20:35,360 --> 00:20:37,440
different things to kind of sanitize the

535
00:20:37,440 --> 00:20:40,000
command get the variables that you want

536
00:20:40,000 --> 00:20:40,799
um

537
00:20:40,799 --> 00:20:43,039
but then at the end you have this ssid

538
00:20:43,039 --> 00:20:45,919
and this ssid is a user controlled

539
00:20:45,919 --> 00:20:47,600
variable so you're putting in like hey

540
00:20:47,600 --> 00:20:50,799
connect to my network

541
00:20:50,799 --> 00:20:53,520
so your request to update this would be

542
00:20:53,520 --> 00:20:55,840
a post request because you're putting

543
00:20:55,840 --> 00:20:58,480
data on the device in this case it was

544
00:20:58,480 --> 00:21:00,159
an ajax call

545
00:21:00,159 --> 00:21:01,760
and you could put in some of the

546
00:21:01,760 --> 00:21:04,320
parameters but then you put in a single

547
00:21:04,320 --> 00:21:05,360
quote

548
00:21:05,360 --> 00:21:07,760
which this single quote escapes this

549
00:21:07,760 --> 00:21:10,080
single quote here

550
00:21:10,080 --> 00:21:12,240
then you put in a double quote

551
00:21:12,240 --> 00:21:13,679
which

552
00:21:13,679 --> 00:21:16,720
escapes the double quote up here then

553
00:21:16,720 --> 00:21:18,880
that semicolon to say hey we've actually

554
00:21:18,880 --> 00:21:21,360
finished this wpa

555
00:21:21,360 --> 00:21:24,080
cli command and go ahead and let's run

556
00:21:24,080 --> 00:21:25,039
and do

557
00:21:25,039 --> 00:21:27,520
and then in this case it was just rain

558
00:21:27,520 --> 00:21:28,840
who am i

559
00:21:28,840 --> 00:21:31,280
and the

560
00:21:31,280 --> 00:21:34,480
pound sign at the end is to comment out

561
00:21:34,480 --> 00:21:36,400
any additional code so sometimes you

562
00:21:36,400 --> 00:21:38,640
don't break out at the end so you want

563
00:21:38,640 --> 00:21:40,480
to comment the rest of it out so you

564
00:21:40,480 --> 00:21:42,799
don't end up breaking

565
00:21:42,799 --> 00:21:44,880
the device as you're doing this command

566
00:21:44,880 --> 00:21:46,720
or causing a crash or something because

567
00:21:46,720 --> 00:21:48,240
we want to keep

568
00:21:48,240 --> 00:21:51,360
attacking the device

569
00:21:52,640 --> 00:21:56,400
so we can just google that sm printf

570
00:21:56,400 --> 00:21:58,799
function it'll tell us some things like

571
00:21:58,799 --> 00:22:00,720
it takes a character

572
00:22:00,720 --> 00:22:02,320
pointer to string

573
00:22:02,320 --> 00:22:03,679
uh size

574
00:22:03,679 --> 00:22:06,240
format etc

575
00:22:06,240 --> 00:22:08,000
so the format is going to be the c

576
00:22:08,000 --> 00:22:10,480
format size is the max number of bytes

577
00:22:10,480 --> 00:22:12,960
you could write so if that was

578
00:22:12,960 --> 00:22:14,880
five bytes you'd have to get creative

579
00:22:14,880 --> 00:22:18,000
with your command but if it's 200 bytes

580
00:22:18,000 --> 00:22:21,360
you have a lot of room to play with

581
00:22:21,840 --> 00:22:24,240
and so the percent s field was

582
00:22:24,240 --> 00:22:27,039
injectable so just break out of it with

583
00:22:27,039 --> 00:22:29,840
the semicolon run our command command

584
00:22:29,840 --> 00:22:32,320
out the end so it doesn't run additional

585
00:22:32,320 --> 00:22:34,639
code

586
00:22:34,960 --> 00:22:36,880
so here we can run any command we want

587
00:22:36,880 --> 00:22:38,960
on linux assuming the binaries on that

588
00:22:38,960 --> 00:22:41,200
device right so if netcat is on there we

589
00:22:41,200 --> 00:22:42,960
could get a reverse shell and that cat's

590
00:22:42,960 --> 00:22:45,039
not on there you can't so you might do

591
00:22:45,039 --> 00:22:46,400
something like

592
00:22:46,400 --> 00:22:49,600
cat out the etsy shadow file assuming

593
00:22:49,600 --> 00:22:52,400
it's running as root and then put that

594
00:22:52,400 --> 00:22:55,039
the contents of that into a directory

595
00:22:55,039 --> 00:22:57,039
that's accessible by the web server so

596
00:22:57,039 --> 00:22:59,200
we can view it later as the attacker

597
00:22:59,200 --> 00:23:01,039
cracks and passwords

598
00:23:01,039 --> 00:23:02,880
things like that where you just get

599
00:23:02,880 --> 00:23:04,720
really creative right netcat's not on

600
00:23:04,720 --> 00:23:06,080
there python

601
00:23:06,080 --> 00:23:08,320
or you know various other methods

602
00:23:08,320 --> 00:23:10,080
there's tons of different opportunities

603
00:23:10,080 --> 00:23:12,000
here you basically are sitting on the

604
00:23:12,000 --> 00:23:13,360
device

605
00:23:13,360 --> 00:23:16,080
running commands so get creative and you

606
00:23:16,080 --> 00:23:16,880
can

607
00:23:16,880 --> 00:23:19,919
definitely figure some fun things out

608
00:23:19,919 --> 00:23:23,120
so how do we get started um go out and

609
00:23:23,120 --> 00:23:25,120
buy an old router right these are not

610
00:23:25,120 --> 00:23:28,240
super expensive 10 20 bucks

611
00:23:28,240 --> 00:23:30,000
get a multimeter

612
00:23:30,000 --> 00:23:31,840
these aren't crazy expensive they can

613
00:23:31,840 --> 00:23:33,280
range i mean from

614
00:23:33,280 --> 00:23:35,520
probably 30 bucks you can probably find

615
00:23:35,520 --> 00:23:37,679
some you know for 500 you don't need the

616
00:23:37,679 --> 00:23:40,960
500 for getting started

617
00:23:40,960 --> 00:23:43,600
and then a usb to tty cable this will

618
00:23:43,600 --> 00:23:45,600
let you communicate over that uart

619
00:23:45,600 --> 00:23:46,880
protocol

620
00:23:46,880 --> 00:23:48,720
which is really nice and then you just

621
00:23:48,720 --> 00:23:50,720
pull it up and putty

622
00:23:50,720 --> 00:23:54,159
get a soldering iron some small cables

623
00:23:54,159 --> 00:23:56,880
look for like a decent soldering iron i

624
00:23:56,880 --> 00:23:59,039
know i bought a really cheap one and

625
00:23:59,039 --> 00:24:00,480
then after

626
00:24:00,480 --> 00:24:02,559
a year of use the tip melted off so

627
00:24:02,559 --> 00:24:05,039
that's not great

628
00:24:05,039 --> 00:24:07,039
and then go download firmware if you

629
00:24:07,039 --> 00:24:08,559
don't get any of the other tools you

630
00:24:08,559 --> 00:24:09,919
just download the firmware and start

631
00:24:09,919 --> 00:24:11,679
reverse engineering looking at the

632
00:24:11,679 --> 00:24:13,440
functions looking for that command

633
00:24:13,440 --> 00:24:14,880
injection

634
00:24:14,880 --> 00:24:16,640
buffer overflows things like that just

635
00:24:16,640 --> 00:24:20,159
get used to kind of what decompiled sudo

636
00:24:20,159 --> 00:24:23,279
c code looks like

637
00:24:24,480 --> 00:24:27,039
so we secure these devices well we can

638
00:24:27,039 --> 00:24:29,120
encrypt the from the firm the companies

639
00:24:29,120 --> 00:24:32,080
can encrypt this on their site so i

640
00:24:32,080 --> 00:24:34,000
can't just download it reverse engineer

641
00:24:34,000 --> 00:24:36,480
and find vulnerabilities

642
00:24:36,480 --> 00:24:38,480
right secure code teacher developers

643
00:24:38,480 --> 00:24:40,720
what it's like to write bad code so you

644
00:24:40,720 --> 00:24:43,120
know how they know how to avoid it so

645
00:24:43,120 --> 00:24:46,080
that they don't put that into production

646
00:24:46,080 --> 00:24:48,400
you can disable some of these hardware

647
00:24:48,400 --> 00:24:50,640
interfaces so that you

648
00:24:50,640 --> 00:24:55,039
can't get direct access to the firmware

649
00:24:55,120 --> 00:24:57,039
through like the hardware method and

650
00:24:57,039 --> 00:24:59,120
then you encrypt your firmware

651
00:24:59,120 --> 00:25:01,679
on the sites maybe it's harder for me to

652
00:25:01,679 --> 00:25:05,919
get access to that firmware as a hacker

653
00:25:05,919 --> 00:25:07,600
hack these devices before you put them

654
00:25:07,600 --> 00:25:10,480
into production so you don't want to

655
00:25:10,480 --> 00:25:12,720
you know just make iot devices throw

656
00:25:12,720 --> 00:25:13,840
them out there and then somebody's

657
00:25:13,840 --> 00:25:15,600
coming out with a critical suddenly you

658
00:25:15,600 --> 00:25:17,200
have to figure out how to update it as a

659
00:25:17,200 --> 00:25:20,480
company and get all your clients updated

660
00:25:20,480 --> 00:25:22,240
and you can do firmware signatures as

661
00:25:22,240 --> 00:25:24,880
well so that the device only trusts

662
00:25:24,880 --> 00:25:27,840
signed firmware and that way i can't

663
00:25:27,840 --> 00:25:31,039
just backdoor firmware and

664
00:25:31,039 --> 00:25:33,840
put in my own stuff and move on have

665
00:25:33,840 --> 00:25:36,400
access to the device

666
00:25:36,400 --> 00:25:38,080
some closing thoughts

667
00:25:38,080 --> 00:25:40,000
it's a wide variety of devices you can

668
00:25:40,000 --> 00:25:41,919
hack some of this knowledge can help you

669
00:25:41,919 --> 00:25:46,000
hack on cars refrigerators tvs routers

670
00:25:46,000 --> 00:25:47,760
temperature sensors you name it there's

671
00:25:47,760 --> 00:25:50,559
a lot of really cool stuff

672
00:25:50,559 --> 00:25:52,400
there's a lot of really fun findings

673
00:25:52,400 --> 00:25:53,919
that you can find as you reverse

674
00:25:53,919 --> 00:25:56,240
engineer a lot of this firmware and

675
00:25:56,240 --> 00:25:58,480
finally i want to say go ahead and hack

676
00:25:58,480 --> 00:26:00,159
all the things

677
00:26:00,159 --> 00:26:02,400
hope you learned some good information

678
00:26:02,400 --> 00:26:04,159
from this talk and i hope to see you

679
00:26:04,159 --> 00:26:08,039
hacking iot devices

