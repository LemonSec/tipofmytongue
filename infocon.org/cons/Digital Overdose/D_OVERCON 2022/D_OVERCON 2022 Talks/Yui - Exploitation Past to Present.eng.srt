1
00:00:02,560 --> 00:00:05,920
hello my name is robin and um

2
00:00:05,920 --> 00:00:08,880
also known as uectf on twitter and other

3
00:00:08,880 --> 00:00:11,519
social media spaces i actually wasn't

4
00:00:11,519 --> 00:00:14,240
always into technology i transitioned

5
00:00:14,240 --> 00:00:16,720
into a career in infosec after working

6
00:00:16,720 --> 00:00:18,240
as a floor fitter

7
00:00:18,240 --> 00:00:20,080
working in manual labor for a very long

8
00:00:20,080 --> 00:00:21,920
time since i was 16

9
00:00:21,920 --> 00:00:24,480
and i never considered it maybe possible

10
00:00:24,480 --> 00:00:26,880
to get into tech but

11
00:00:26,880 --> 00:00:27,840
you know

12
00:00:27,840 --> 00:00:30,480
i'm here now so uh i've worked in a lot

13
00:00:30,480 --> 00:00:33,360
of different fields and i'm just really

14
00:00:33,360 --> 00:00:37,040
happy to sort of work in tech now so

15
00:00:37,040 --> 00:00:39,360
yeah and this talk is going to be

16
00:00:39,360 --> 00:00:42,000
discussing old vulnerabilities that

17
00:00:42,000 --> 00:00:44,480
obviously software vendors have made

18
00:00:44,480 --> 00:00:47,280
defunct now due to mitigation updates

19
00:00:47,280 --> 00:00:48,719
made by software vendors we'll also be

20
00:00:48,719 --> 00:00:49,920
looking at

21
00:00:49,920 --> 00:00:52,640
on frameworks from vendors of doing to

22
00:00:52,640 --> 00:00:54,719
mitigate real world vulnerabilities that

23
00:00:54,719 --> 00:00:56,480
are coming across

24
00:00:56,480 --> 00:00:58,879
uh in everyday applications

25
00:00:58,879 --> 00:01:01,199
and we also demonstrate them in code

26
00:01:01,199 --> 00:01:03,760
samples and discuss them in depth

27
00:01:03,760 --> 00:01:05,840
a little bit of fundamental knowledge is

28
00:01:05,840 --> 00:01:08,080
assumed but not too much

29
00:01:08,080 --> 00:01:09,920
and i'll be breaking deep things down

30
00:01:09,920 --> 00:01:11,200
for you

31
00:01:11,200 --> 00:01:13,520
as much as i can just to make things

32
00:01:13,520 --> 00:01:15,200
just easier so

33
00:01:15,200 --> 00:01:16,159
and

34
00:01:16,159 --> 00:01:17,680
if you couldn't tell already this is my

35
00:01:17,680 --> 00:01:19,280
first talk so

36
00:01:19,280 --> 00:01:21,600
any pointers or anything on twitter if

37
00:01:21,600 --> 00:01:24,000
you my twitter is uh earlier in the

38
00:01:24,000 --> 00:01:26,080
slide if you find anything wrong with it

39
00:01:26,080 --> 00:01:27,439
or anything just

40
00:01:27,439 --> 00:01:29,200
let me know and you know

41
00:01:29,200 --> 00:01:33,520
i appreciate it in advance thank you

42
00:01:33,840 --> 00:01:36,799
okay so um

43
00:01:36,799 --> 00:01:39,200
web security obviously it's a very big

44
00:01:39,200 --> 00:01:42,000
area it's to be honest

45
00:01:42,000 --> 00:01:44,000
a lot of people have spoken to have said

46
00:01:44,000 --> 00:01:45,439
web security

47
00:01:45,439 --> 00:01:47,040
wasn't so big back in the day everything

48
00:01:47,040 --> 00:01:48,000
was um

49
00:01:48,000 --> 00:01:50,079
low-level exploitation however there's

50
00:01:50,079 --> 00:01:52,000
been a lot of change since then we've

51
00:01:52,000 --> 00:01:54,159
come a very long way in the what in the

52
00:01:54,159 --> 00:01:56,640
sense that there's a lot of open source

53
00:01:56,640 --> 00:01:58,240
projects now

54
00:01:58,240 --> 00:02:01,280
that are um regularly contributed to on

55
00:02:01,280 --> 00:02:03,840
sites such as github and things like

56
00:02:03,840 --> 00:02:05,680
that and um

57
00:02:05,680 --> 00:02:08,399
there's so many different changes now

58
00:02:08,399 --> 00:02:10,080
such as

59
00:02:10,080 --> 00:02:12,720
say 20 to 25 years ago

60
00:02:12,720 --> 00:02:13,840
we wouldn't have thought that there'll

61
00:02:13,840 --> 00:02:16,160
be bug bounties and hacked the pentagon

62
00:02:16,160 --> 00:02:18,400
wouldn't have happened you know like

63
00:02:18,400 --> 00:02:20,640
it's just it's just crazy there's been

64
00:02:20,640 --> 00:02:24,319
so many changes but um

65
00:02:24,319 --> 00:02:27,280
yeah the government as well the uh

66
00:02:27,280 --> 00:02:30,640
us digital service has um made their own

67
00:02:30,640 --> 00:02:33,280
black valley programs for researchers to

68
00:02:33,280 --> 00:02:34,959
earn money from

69
00:02:34,959 --> 00:02:37,200
and things like that and um

70
00:02:37,200 --> 00:02:39,280
there was actually over seven thousand

71
00:02:39,280 --> 00:02:41,519
found and disc discovered

72
00:02:41,519 --> 00:02:44,959
uh disclosed by 600 different people

73
00:02:44,959 --> 00:02:47,599
participating in 15 different bounties

74
00:02:47,599 --> 00:02:50,800
across 15 of the programs and a lot of

75
00:02:50,800 --> 00:02:52,640
those researchers found their first ever

76
00:02:52,640 --> 00:02:53,840
bug

77
00:02:53,840 --> 00:02:55,040
and it was just

78
00:02:55,040 --> 00:02:57,680
a really good moment for them and

79
00:02:57,680 --> 00:03:00,640
it's really good although people have

80
00:03:00,640 --> 00:03:02,400
obviously their concerns regarding bug

81
00:03:02,400 --> 00:03:05,280
bounties i do believe that we have come

82
00:03:05,280 --> 00:03:06,879
a very long way

83
00:03:06,879 --> 00:03:08,480
in um

84
00:03:08,480 --> 00:03:10,159
in general to make sure that people can

85
00:03:10,159 --> 00:03:12,480
actually get paid for disclosing

86
00:03:12,480 --> 00:03:14,959
vulnerabilities to the companies now

87
00:03:14,959 --> 00:03:16,720
you know whereas

88
00:03:16,720 --> 00:03:18,560
20 25 years ago i'm not sure if that

89
00:03:18,560 --> 00:03:20,239
would have been a thing

90
00:03:20,239 --> 00:03:21,599
or if i don't want to thought of it be a

91
00:03:21,599 --> 00:03:24,640
thing you know so uh yeah

92
00:03:24,640 --> 00:03:26,560
the first web technology i've started

93
00:03:26,560 --> 00:03:29,599
with is actually php

94
00:03:29,599 --> 00:03:31,360
uh php

95
00:03:31,360 --> 00:03:34,879
very very popular it's been used as of

96
00:03:34,879 --> 00:03:36,640
the last time i checked

97
00:03:36,640 --> 00:03:40,000
79 of all websites on the internet

98
00:03:40,000 --> 00:03:41,040
and

99
00:03:41,040 --> 00:03:43,120
it didn't actually mean

100
00:03:43,120 --> 00:03:44,799
um

101
00:03:44,799 --> 00:03:46,879
what it means now it originally used to

102
00:03:46,879 --> 00:03:48,879
mean a personal home page

103
00:03:48,879 --> 00:03:50,400
and it wasn't actually intended to be a

104
00:03:50,400 --> 00:03:51,760
server-side

105
00:03:51,760 --> 00:03:52,879
language

106
00:03:52,879 --> 00:03:54,239
and

107
00:03:54,239 --> 00:03:56,239
it's uh it's growing into a huge thing

108
00:03:56,239 --> 00:03:58,480
over the last two three decades

109
00:03:58,480 --> 00:04:02,000
since 1996 i believe and um

110
00:04:02,000 --> 00:04:04,720
obviously within the security field

111
00:04:04,720 --> 00:04:07,200
it is no secret that obviously

112
00:04:07,200 --> 00:04:09,840
there is a lot a lot of different bugs

113
00:04:09,840 --> 00:04:11,920
within php

114
00:04:11,920 --> 00:04:13,040
and

115
00:04:13,040 --> 00:04:14,799
such as today on top of my head type

116
00:04:14,799 --> 00:04:16,959
juggling

117
00:04:16,959 --> 00:04:18,798
local file inclusion remote code

118
00:04:18,798 --> 00:04:21,358
execution there's so many different bugs

119
00:04:21,358 --> 00:04:22,240
and

120
00:04:22,240 --> 00:04:24,880
there's been an episode for many of them

121
00:04:24,880 --> 00:04:27,600
and uh some of them you might not know

122
00:04:27,600 --> 00:04:29,600
if you're relatively new to the security

123
00:04:29,600 --> 00:04:30,639
field

124
00:04:30,639 --> 00:04:33,360
because php did their part to make them

125
00:04:33,360 --> 00:04:35,280
defunct now

126
00:04:35,280 --> 00:04:36,240
well

127
00:04:36,240 --> 00:04:38,240
the reason i did this talk is to discuss

128
00:04:38,240 --> 00:04:39,600
those things

129
00:04:39,600 --> 00:04:41,280
to discuss the things that you might not

130
00:04:41,280 --> 00:04:43,680
know about if you're new to new to tech

131
00:04:43,680 --> 00:04:45,759
or security in general

132
00:04:45,759 --> 00:04:47,360
because um

133
00:04:47,360 --> 00:04:49,440
obviously

134
00:04:49,440 --> 00:04:51,520
like php has done

135
00:04:51,520 --> 00:04:53,199
a lot of things to patch certain

136
00:04:53,199 --> 00:04:56,639
vulnerabilities like let's say a file

137
00:04:56,639 --> 00:04:58,000
inclusion

138
00:04:58,000 --> 00:05:00,160
a remote file inclusion

139
00:05:00,160 --> 00:05:02,320
this is a class of a flying clutch

140
00:05:02,320 --> 00:05:04,160
vulnerability which occurs when the euro

141
00:05:04,160 --> 00:05:06,240
of a file is located on different

142
00:05:06,240 --> 00:05:08,639
servers passed as a parameter

143
00:05:08,639 --> 00:05:10,720
some of the following functions

144
00:05:10,720 --> 00:05:13,600
include include once require or require

145
00:05:13,600 --> 00:05:15,840
once now there is obviously

146
00:05:15,840 --> 00:05:17,919
a few more there but um which were

147
00:05:17,919 --> 00:05:20,240
defunct in php

148
00:05:20,240 --> 00:05:21,199
five

149
00:05:21,199 --> 00:05:24,800
such as uh registered globals and there

150
00:05:24,800 --> 00:05:27,280
was a few more after that such as allow

151
00:05:27,280 --> 00:05:31,039
your euro include lr url what once your

152
00:05:31,039 --> 00:05:32,880
allow url f open

153
00:05:32,880 --> 00:05:34,400
you know there's a lot of functions

154
00:05:34,400 --> 00:05:36,880
which makes it possible to

155
00:05:36,880 --> 00:05:38,400
exploit the vulnerability in old

156
00:05:38,400 --> 00:05:40,800
versions of php

157
00:05:40,800 --> 00:05:42,080
and um

158
00:05:42,080 --> 00:05:44,960
there are there is a difference between

159
00:05:44,960 --> 00:05:45,919
um

160
00:05:45,919 --> 00:05:47,520
because i see a lot of people

161
00:05:47,520 --> 00:05:49,280
funnily enough asking what is the

162
00:05:49,280 --> 00:05:50,960
difference between local inclusion and

163
00:05:50,960 --> 00:05:53,280
remote file inclusion

164
00:05:53,280 --> 00:05:55,440
and my answer is just

165
00:05:55,440 --> 00:05:58,000
remote file inclusion is inclusion a

166
00:05:58,000 --> 00:06:00,880
remote file on a different web server to

167
00:06:00,880 --> 00:06:03,280
the target sites whereas

168
00:06:03,280 --> 00:06:04,880
the local file inclusion is the

169
00:06:04,880 --> 00:06:06,240
inclusion of a local file on the web

170
00:06:06,240 --> 00:06:08,319
directory of the target website

171
00:06:08,319 --> 00:06:09,199
and

172
00:06:09,199 --> 00:06:12,000
both of them can be achieved like um

173
00:06:12,000 --> 00:06:13,919
welcome can be used to achieve rock code

174
00:06:13,919 --> 00:06:16,240
execution

175
00:06:16,240 --> 00:06:17,600
albeit through different methods of

176
00:06:17,600 --> 00:06:19,360
course of course with local file

177
00:06:19,360 --> 00:06:20,479
inclusion

178
00:06:20,479 --> 00:06:24,080
there are ways to gain code execution

179
00:06:24,080 --> 00:06:25,360
that um

180
00:06:25,360 --> 00:06:26,800
like in the modern world and everything

181
00:06:26,800 --> 00:06:27,759
but

182
00:06:27,759 --> 00:06:29,360
you know they are different there are a

183
00:06:29,360 --> 00:06:31,759
little difference so um

184
00:06:31,759 --> 00:06:34,240
i'll reproduce some steps here which

185
00:06:34,240 --> 00:06:36,160
shows how it works

186
00:06:36,160 --> 00:06:37,759
so step one

187
00:06:37,759 --> 00:06:40,720
you're obviously going to get the url

188
00:06:40,720 --> 00:06:43,680
and inject into the web application

189
00:06:43,680 --> 00:06:46,639
so let's say

190
00:06:46,840 --> 00:06:49,199
uh and then step two

191
00:06:49,199 --> 00:06:50,960
you're gonna

192
00:06:50,960 --> 00:06:52,880
malicious script is executed from the

193
00:06:52,880 --> 00:06:54,880
attacker's website

194
00:06:54,880 --> 00:06:58,160
and um this vulnerability is very simple

195
00:06:58,160 --> 00:07:00,880
which was made which made it much worse

196
00:07:00,880 --> 00:07:02,720
it was a very very very bad one because

197
00:07:02,720 --> 00:07:04,639
it was so simple to exploit and it was

198
00:07:04,639 --> 00:07:06,319
everywhere on the internet during the

199
00:07:06,319 --> 00:07:07,759
mid 2000s

200
00:07:07,759 --> 00:07:08,720
which

201
00:07:08,720 --> 00:07:10,720
it's crazy to think about her

202
00:07:10,720 --> 00:07:12,240
and um

203
00:07:12,240 --> 00:07:13,520
step four

204
00:07:13,520 --> 00:07:15,759
you an attacker gains control over the

205
00:07:15,759 --> 00:07:17,280
web application

206
00:07:17,280 --> 00:07:18,400
so

207
00:07:18,400 --> 00:07:20,240
say you want to

208
00:07:20,240 --> 00:07:22,800
upload a file let's say

209
00:07:22,800 --> 00:07:25,199
payload file php

210
00:07:25,199 --> 00:07:27,039
through those steps

211
00:07:27,039 --> 00:07:29,680
you could gain a shell very easily and

212
00:07:29,680 --> 00:07:31,520
execute your payload

213
00:07:31,520 --> 00:07:35,280
on that target server it's very easy

214
00:07:35,280 --> 00:07:37,440
very easy to explain

215
00:07:37,440 --> 00:07:39,680
and

216
00:07:39,759 --> 00:07:42,160
thankfully it hasn't been a thing for

217
00:07:42,160 --> 00:07:44,319
the better part of nearly 10 years now i

218
00:07:44,319 --> 00:07:45,759
believe

219
00:07:45,759 --> 00:07:48,080
and um

220
00:07:48,080 --> 00:07:50,080
your chances of finding one in the wild

221
00:07:50,080 --> 00:07:51,680
now or any

222
00:07:51,680 --> 00:07:54,240
bug bounty program are very very low

223
00:07:54,240 --> 00:07:55,440
very low

224
00:07:55,440 --> 00:07:57,360
like not even

225
00:07:57,360 --> 00:08:00,160
just very very low statistic

226
00:08:00,160 --> 00:08:03,599
so um yeah i'm gonna jump on to a more

227
00:08:03,599 --> 00:08:06,000
commonly found one now which

228
00:08:06,000 --> 00:08:07,199
was

229
00:08:07,199 --> 00:08:09,680
found in around 2009 i believe for the

230
00:08:09,680 --> 00:08:10,879
first time

231
00:08:10,879 --> 00:08:13,039
let's find it so

232
00:08:13,039 --> 00:08:17,280
this one is php insecure deserialization

233
00:08:17,280 --> 00:08:18,960
so

234
00:08:18,960 --> 00:08:20,080
you might not

235
00:08:20,080 --> 00:08:21,759
like you know you might think of it as

236
00:08:21,759 --> 00:08:22,879
you know

237
00:08:22,879 --> 00:08:24,400
like what is it so i'm going to explain

238
00:08:24,400 --> 00:08:26,319
to you why it what the process is of

239
00:08:26,319 --> 00:08:29,039
insecure serialization

240
00:08:29,039 --> 00:08:32,159
and it's basically when untrusted data

241
00:08:32,159 --> 00:08:33,679
is used to abuse the logic of an

242
00:08:33,679 --> 00:08:35,279
application

243
00:08:35,279 --> 00:08:36,880
what you are doing doing effectively

244
00:08:36,880 --> 00:08:38,799
replacing the data will be processed by

245
00:08:38,799 --> 00:08:41,519
the application with malicious code that

246
00:08:41,519 --> 00:08:44,159
you can allow to escalate to remote code

247
00:08:44,159 --> 00:08:45,760
execution

248
00:08:45,760 --> 00:08:47,440
if this isn't possible though if you

249
00:08:47,440 --> 00:08:49,120
cannot get remote code execution the

250
00:08:49,120 --> 00:08:51,440
target application you're still able to

251
00:08:51,440 --> 00:08:52,959
get things such as

252
00:08:52,959 --> 00:08:54,399
denier service

253
00:08:54,399 --> 00:08:56,399
arbitrary file read

254
00:08:56,399 --> 00:08:58,640
and privileged escalation

255
00:08:58,640 --> 00:09:00,240
and

256
00:09:00,240 --> 00:09:01,920
it's a very very

257
00:09:01,920 --> 00:09:03,920
one of my favorite vulnerabilities as a

258
00:09:03,920 --> 00:09:05,440
matter of fact because i've loved

259
00:09:05,440 --> 00:09:06,880
researching it

260
00:09:06,880 --> 00:09:09,519
and um

261
00:09:09,519 --> 00:09:11,760
there's obviously a different type of

262
00:09:11,760 --> 00:09:13,600
insecure serialization which i was going

263
00:09:13,600 --> 00:09:15,360
to cover in this talk but

264
00:09:15,360 --> 00:09:17,120
i would have been here for hours but

265
00:09:17,120 --> 00:09:18,800
which is called far deserialization

266
00:09:18,800 --> 00:09:20,399
vulnerabilities

267
00:09:20,399 --> 00:09:24,880
which is with php wrappers so um

268
00:09:24,959 --> 00:09:26,880
i'm often asked as well

269
00:09:26,880 --> 00:09:28,800
there's difference between serialization

270
00:09:28,800 --> 00:09:30,300
serialization so

271
00:09:30,300 --> 00:09:32,000
[Music]

272
00:09:32,000 --> 00:09:34,160
serialization is the process of

273
00:09:34,160 --> 00:09:36,560
converting data types such as objects to

274
00:09:36,560 --> 00:09:39,040
a flatter format that can be sent as a

275
00:09:39,040 --> 00:09:42,399
sequence sequential set of bytes

276
00:09:42,399 --> 00:09:44,320
meanwhile the serialization is the

277
00:09:44,320 --> 00:09:46,160
reverse the process

278
00:09:46,160 --> 00:09:47,600
it's just the process of converting a

279
00:09:47,600 --> 00:09:50,080
byte sequence back into a replica of a

280
00:09:50,080 --> 00:09:51,680
the original object before it was

281
00:09:51,680 --> 00:09:53,839
serialized serialized

282
00:09:53,839 --> 00:09:56,480
and although as you can see

283
00:09:56,480 --> 00:09:59,120
there is an example of a php user object

284
00:09:59,120 --> 00:10:01,200
that i've made and i've listed all the

285
00:10:01,200 --> 00:10:03,680
different data types it has so

286
00:10:03,680 --> 00:10:06,079
obviously

287
00:10:06,079 --> 00:10:07,680
and

288
00:10:07,680 --> 00:10:08,480
and

289
00:10:08,480 --> 00:10:10,320
this is when it's serialized

290
00:10:10,320 --> 00:10:13,040
so we're going to look here is

291
00:10:13,040 --> 00:10:15,360
um

292
00:10:15,760 --> 00:10:18,959
this is where serialized so php uses

293
00:10:18,959 --> 00:10:21,279
letters to represent data types numbers

294
00:10:21,279 --> 00:10:23,839
as length as of entry it's understood as

295
00:10:23,839 --> 00:10:26,000
follows so as you can see

296
00:10:26,000 --> 00:10:27,279
it's a

297
00:10:27,279 --> 00:10:29,360
four letters it's user

298
00:10:29,360 --> 00:10:32,480
and the number two so the object has two

299
00:10:32,480 --> 00:10:33,920
attributes

300
00:10:33,920 --> 00:10:35,040
and

301
00:10:35,040 --> 00:10:37,839
this one's a string character so there's

302
00:10:37,839 --> 00:10:39,279
a string here

303
00:10:39,279 --> 00:10:40,880
and this is four letters long so the

304
00:10:40,880 --> 00:10:42,720
four character string with

305
00:10:42,720 --> 00:10:43,920
name

306
00:10:43,920 --> 00:10:47,600
and string five my name robin

307
00:10:47,600 --> 00:10:49,519
the value of the first attribute is the

308
00:10:49,519 --> 00:10:52,480
five character string robin

309
00:10:52,480 --> 00:10:54,079
uh string 10

310
00:10:54,079 --> 00:10:55,519
is logged in

311
00:10:55,519 --> 00:10:56,399
and

312
00:10:56,399 --> 00:10:58,240
this part here

313
00:10:58,240 --> 00:11:00,399
is 10 character string obviously

314
00:11:00,399 --> 00:11:02,399
and this is the boolean value

315
00:11:02,399 --> 00:11:03,839
and whenever he is at a boolean value of

316
00:11:03,839 --> 00:11:04,720
one

317
00:11:04,720 --> 00:11:07,680
it's a uh means true list second

318
00:11:07,680 --> 00:11:08,880
attribute

319
00:11:08,880 --> 00:11:10,320
of the uh

320
00:11:10,320 --> 00:11:11,760
object

321
00:11:11,760 --> 00:11:14,800
so um i feel like that covers the basics

322
00:11:14,800 --> 00:11:17,120
of serialization a little while and next

323
00:11:17,120 --> 00:11:19,200
i'm going to show a um

324
00:11:19,200 --> 00:11:21,839
a practical well not so practical more

325
00:11:21,839 --> 00:11:25,760
of a scenario in which it could happen

326
00:11:25,760 --> 00:11:29,920
so it's the second part so php secured

327
00:11:29,920 --> 00:11:32,079
deserialization part two

328
00:11:32,079 --> 00:11:32,959
now

329
00:11:32,959 --> 00:11:34,640
let's say we

330
00:11:34,640 --> 00:11:38,240
have a bug bounty and whatever reasons

331
00:11:38,240 --> 00:11:40,640
um

332
00:11:40,720 --> 00:11:42,720
my mistake so

333
00:11:42,720 --> 00:11:44,880
i suppose hypothetically that we would

334
00:11:44,880 --> 00:11:46,560
like to escalate privileges on this on

335
00:11:46,560 --> 00:11:48,880
the service we want to get to admin

336
00:11:48,880 --> 00:11:49,839
accounts

337
00:11:49,839 --> 00:11:53,200
if we can preserve a serialized object

338
00:11:53,200 --> 00:11:54,720
then we'll be able to create an object

339
00:11:54,720 --> 00:11:56,320
on the server side of the service

340
00:11:56,320 --> 00:11:58,959
modified attributes of values

341
00:11:58,959 --> 00:12:00,639
so hypothetically

342
00:12:00,639 --> 00:12:03,120
this is like very like not a very common

343
00:12:03,120 --> 00:12:05,519
uh situation but i feel like it's the

344
00:12:05,519 --> 00:12:06,880
perfect situation to explain how

345
00:12:06,880 --> 00:12:10,480
deserialization works so hypothetically

346
00:12:10,480 --> 00:12:12,800
the server uses a serialized user object

347
00:12:12,800 --> 00:12:14,560
to store data about

348
00:12:14,560 --> 00:12:15,920
user sessions

349
00:12:15,920 --> 00:12:17,200
in a cookie

350
00:12:17,200 --> 00:12:19,120
if an attacker spotted the serialized

351
00:12:19,120 --> 00:12:21,600
object in a http request they might

352
00:12:21,600 --> 00:12:23,120
decode it to find the following fight

353
00:12:23,120 --> 00:12:24,480
stream

354
00:12:24,480 --> 00:12:26,880
so as you can see here

355
00:12:26,880 --> 00:12:28,480
this is object

356
00:12:28,480 --> 00:12:30,800
four character characters

357
00:12:30,800 --> 00:12:32,320
user

358
00:12:32,320 --> 00:12:33,519
and

359
00:12:33,519 --> 00:12:34,880
string

360
00:12:34,880 --> 00:12:37,120
a character's username strength like

361
00:12:37,120 --> 00:12:40,480
robin and is admin bully and false now

362
00:12:40,480 --> 00:12:42,560
when it says bullying false

363
00:12:42,560 --> 00:12:44,240
when it gets sent to us it means that

364
00:12:44,240 --> 00:12:46,480
we're not an admin

365
00:12:46,480 --> 00:12:48,240
we're not an admin currently so as you

366
00:12:48,240 --> 00:12:49,200
can see

367
00:12:49,200 --> 00:12:51,839
we notice there isn't is admin attribute

368
00:12:51,839 --> 00:12:53,040
at the end we're going to change the

369
00:12:53,040 --> 00:12:54,800
boolean at value

370
00:12:54,800 --> 00:12:59,200
to if it is administer one which is true

371
00:12:59,200 --> 00:13:01,680
uh recode the object and overwrite the

372
00:13:01,680 --> 00:13:03,760
website administrator's cookie value

373
00:13:03,760 --> 00:13:06,480
with this new modifier value it's not

374
00:13:06,480 --> 00:13:09,040
much effect unless

375
00:13:09,040 --> 00:13:10,480
the website uses the cookie it does

376
00:13:10,480 --> 00:13:12,959
check to use as admin functionality

377
00:13:12,959 --> 00:13:14,800
so below is some

378
00:13:14,800 --> 00:13:16,480
php code

379
00:13:16,480 --> 00:13:19,279
and um what this does is

380
00:13:19,279 --> 00:13:21,279
this is checking out the user admin

381
00:13:21,279 --> 00:13:22,800
functionality

382
00:13:22,800 --> 00:13:24,160
and um

383
00:13:24,160 --> 00:13:26,800
if we set set our um

384
00:13:26,800 --> 00:13:27,920
objects

385
00:13:27,920 --> 00:13:30,260
to true then it would allow us to

386
00:13:30,260 --> 00:13:32,720
[Music]

387
00:13:32,720 --> 00:13:34,560
send that object and obviously we

388
00:13:34,560 --> 00:13:38,719
visited we have admin functionality

389
00:13:39,279 --> 00:13:40,800
and um

390
00:13:40,800 --> 00:13:43,040
we'd easily be able to gain uh app and

391
00:13:43,040 --> 00:13:46,399
privileges on the service

392
00:13:46,399 --> 00:13:49,040
and uh isn't that easy though supposing

393
00:13:49,040 --> 00:13:51,600
there's no checks ran on

394
00:13:51,600 --> 00:13:53,440
the objects or anything

395
00:13:53,440 --> 00:13:55,440
just see if there's uh anything that's

396
00:13:55,440 --> 00:13:57,680
not supposed to be there any serialized

397
00:13:57,680 --> 00:13:58,800
objects

398
00:13:58,800 --> 00:14:01,040
then it would work

399
00:14:01,040 --> 00:14:03,040
this isn't very practical but it feels

400
00:14:03,040 --> 00:14:05,360
like a good way to intro insecure

401
00:14:05,360 --> 00:14:07,360
serialization

402
00:14:07,360 --> 00:14:08,959
and

403
00:14:08,959 --> 00:14:10,399
the next part

404
00:14:10,399 --> 00:14:11,600
is uh

405
00:14:11,600 --> 00:14:13,440
well i'm not i'm not very good at but

406
00:14:13,440 --> 00:14:15,199
you know sometimes i'd like to talk

407
00:14:15,199 --> 00:14:18,880
about it's uh binary exploitation

408
00:14:18,880 --> 00:14:20,240
great

409
00:14:20,240 --> 00:14:22,720
five don't ignore that

410
00:14:22,720 --> 00:14:25,760
so uh one exploitation it's a wide area

411
00:14:25,760 --> 00:14:27,519
covering many different attack surfaces

412
00:14:27,519 --> 00:14:30,079
she couldn't fit into a 20-minute talk i

413
00:14:30,079 --> 00:14:32,560
will give a brief introduction

414
00:14:32,560 --> 00:14:34,480
to it and reproduce the timeline the

415
00:14:34,480 --> 00:14:36,320
different mitigations against attack

416
00:14:36,320 --> 00:14:37,519
vectors

417
00:14:37,519 --> 00:14:40,560
which have been implanted over the years

418
00:14:40,560 --> 00:14:42,240
put it simply binary exploitation

419
00:14:42,240 --> 00:14:44,880
involves exploiting a binary to cause

420
00:14:44,880 --> 00:14:47,199
unintended behavior by giving

421
00:14:47,199 --> 00:14:48,639
malicious input

422
00:14:48,639 --> 00:14:49,839
which say

423
00:14:49,839 --> 00:14:51,839
you want to spawn a shell or disclose

424
00:14:51,839 --> 00:14:53,760
internal information or

425
00:14:53,760 --> 00:14:56,160
get some sort of information disclosure

426
00:14:56,160 --> 00:14:57,279
so um

427
00:14:57,279 --> 00:14:58,320
before you get into the sites of

428
00:14:58,320 --> 00:15:00,800
vulnerability it is important

429
00:15:00,800 --> 00:15:03,199
to understand how they work and give a

430
00:15:03,199 --> 00:15:05,360
brief overview on how the stack works

431
00:15:05,360 --> 00:15:07,120
what was include the heap

432
00:15:07,120 --> 00:15:07,839
and

433
00:15:07,839 --> 00:15:10,240
the heat i'm not very good at

434
00:15:10,240 --> 00:15:12,399
however i've included it and i've

435
00:15:12,399 --> 00:15:14,480
explained what it means so

436
00:15:14,480 --> 00:15:15,760
where's a stack

437
00:15:15,760 --> 00:15:16,560
so

438
00:15:16,560 --> 00:15:19,839
a stack is a linear data structure which

439
00:15:19,839 --> 00:15:21,040
in memory

440
00:15:21,040 --> 00:15:22,959
which is used to store data in a last in

441
00:15:22,959 --> 00:15:24,639
first out manner

442
00:15:24,639 --> 00:15:26,800
this means the item that was last placed

443
00:15:26,800 --> 00:15:29,040
on top of the stack will always be the

444
00:15:29,040 --> 00:15:31,040
first to get removed now there's two

445
00:15:31,040 --> 00:15:32,720
basic operators when it comes to the

446
00:15:32,720 --> 00:15:33,600
stack

447
00:15:33,600 --> 00:15:35,199
and that is the push and the pop

448
00:15:35,199 --> 00:15:36,639
operators

449
00:15:36,639 --> 00:15:38,399
which are two base operators that allow

450
00:15:38,399 --> 00:15:40,240
us to add an item to the top of the

451
00:15:40,240 --> 00:15:42,079
stack or remove an item from the top of

452
00:15:42,079 --> 00:15:43,279
the stack

453
00:15:43,279 --> 00:15:45,040
and

454
00:15:45,040 --> 00:15:48,160
push use to add an item to the top

455
00:15:48,160 --> 00:15:49,440
while

456
00:15:49,440 --> 00:15:52,000
pop is to remove it

457
00:15:52,000 --> 00:15:53,600
so

458
00:15:53,600 --> 00:15:55,360
you may also notice which there is a

459
00:15:55,360 --> 00:15:56,880
stack pointer here

460
00:15:56,880 --> 00:15:58,399
and the sample was always used to

461
00:15:58,399 --> 00:16:00,000
indicate the top out of the stack

462
00:16:00,000 --> 00:16:02,959
remains the last byte but is entered on

463
00:16:02,959 --> 00:16:04,560
the stack

464
00:16:04,560 --> 00:16:06,880
now there's the heap

465
00:16:06,880 --> 00:16:08,639
uh what is the heat

466
00:16:08,639 --> 00:16:10,639
the heap is a memory structure which is

467
00:16:10,639 --> 00:16:12,079
used to manage dynamic memory

468
00:16:12,079 --> 00:16:13,360
allocations

469
00:16:13,360 --> 00:16:15,839
it is often used to allocate memory

470
00:16:15,839 --> 00:16:18,240
whose size are known at the time

471
00:16:18,240 --> 00:16:19,360
and

472
00:16:19,360 --> 00:16:21,680
at the time of compilation well the

473
00:16:21,680 --> 00:16:23,759
volume of memory is required is so big

474
00:16:23,759 --> 00:16:26,560
it can't fit onto the stack

475
00:16:26,560 --> 00:16:29,600
so next should should cover some of the

476
00:16:29,600 --> 00:16:32,639
uh some vulnerabilities now

477
00:16:32,639 --> 00:16:34,959
so these are just two of them

478
00:16:34,959 --> 00:16:37,120
i wanted to include a lot more but i was

479
00:16:37,120 --> 00:16:38,240
on a

480
00:16:38,240 --> 00:16:39,310
time crunch so

481
00:16:39,310 --> 00:16:40,720
[Music]

482
00:16:40,720 --> 00:16:42,480
types of vulnerabilities so

483
00:16:42,480 --> 00:16:44,480
stack based buffer overflows occur when

484
00:16:44,480 --> 00:16:47,519
the buffer is being overwritten

485
00:16:47,519 --> 00:16:50,240
is allocated onto the stack a buffer is

486
00:16:50,240 --> 00:16:52,160
a temporary store

487
00:16:52,160 --> 00:16:54,320
storage or extremely and sending data

488
00:16:54,320 --> 00:16:55,680
from the stack

489
00:16:55,680 --> 00:16:57,519
if they program places more data than

490
00:16:57,519 --> 00:17:00,240
originally allocated the extras can leak

491
00:17:00,240 --> 00:17:02,959
onto other buffers which will corrupt

492
00:17:02,959 --> 00:17:05,280
the data they were holding now this

493
00:17:05,280 --> 00:17:07,439
class of vulnerability is

494
00:17:07,439 --> 00:17:09,919
uh has been common for decades for a big

495
00:17:09,919 --> 00:17:12,720
rise of vulnerabilities being disclosed

496
00:17:12,720 --> 00:17:13,520
in

497
00:17:13,520 --> 00:17:15,280
the early 90s

498
00:17:15,280 --> 00:17:17,039
i even say that

499
00:17:17,039 --> 00:17:18,760
during

500
00:17:18,760 --> 00:17:21,439
1972 when the first ever

501
00:17:21,439 --> 00:17:23,839
buffer overflow was actually detected

502
00:17:23,839 --> 00:17:25,199
off-road laws were actually well

503
00:17:25,199 --> 00:17:27,280
documented but it was a very big rise in

504
00:17:27,280 --> 00:17:29,360
the 1990s

505
00:17:29,360 --> 00:17:32,360
so

506
00:17:32,799 --> 00:17:35,200
it was also a very very good

507
00:17:35,200 --> 00:17:38,000
uh article at released which i always

508
00:17:38,000 --> 00:17:39,679
refer to

509
00:17:39,679 --> 00:17:41,840
and whenever i wanna help someone

510
00:17:41,840 --> 00:17:44,160
understand how smashing the stack works

511
00:17:44,160 --> 00:17:47,039
as the term goes and it's called

512
00:17:47,039 --> 00:17:49,440
smashing the stack of fun and profits

513
00:17:49,440 --> 00:17:51,280
which gives a great insight into the

514
00:17:51,280 --> 00:17:53,360
attack factor which rather to this day i

515
00:17:53,360 --> 00:17:54,400
mean

516
00:17:54,400 --> 00:17:56,559
i know people who talk about this kind

517
00:17:56,559 --> 00:17:57,919
of thing all day and

518
00:17:57,919 --> 00:18:01,039
if i if you ask them for an issue or not

519
00:18:01,039 --> 00:18:02,880
like about a certain vulnerability

520
00:18:02,880 --> 00:18:05,760
within uh that sort of realm

521
00:18:05,760 --> 00:18:07,600
it's likely they're afraid to smash into

522
00:18:07,600 --> 00:18:09,120
stuff for fun and profit

523
00:18:09,120 --> 00:18:10,640
because it's such

524
00:18:10,640 --> 00:18:13,360
a good introduction and just such a good

525
00:18:13,360 --> 00:18:15,600
thing to to read

526
00:18:15,600 --> 00:18:18,480
i i do love rack it's a very good place

527
00:18:18,480 --> 00:18:20,720
for learning so

528
00:18:20,720 --> 00:18:22,320
obviously

529
00:18:22,320 --> 00:18:24,640
that was very severe bugs were being

530
00:18:24,640 --> 00:18:26,160
released at this time

531
00:18:26,160 --> 00:18:27,440
and

532
00:18:27,440 --> 00:18:30,160
referral flows are very bad

533
00:18:30,160 --> 00:18:32,880
it's not like today whereas there's um

534
00:18:32,880 --> 00:18:35,600
aslr or stack canaries and things like

535
00:18:35,600 --> 00:18:36,799
that

536
00:18:36,799 --> 00:18:38,080
at this time

537
00:18:38,080 --> 00:18:39,760
there wasn't many mitigations against

538
00:18:39,760 --> 00:18:40,960
this bug

539
00:18:40,960 --> 00:18:43,760
however there was a workaround

540
00:18:43,760 --> 00:18:45,760
which released called non-executable

541
00:18:45,760 --> 00:18:46,640
stack

542
00:18:46,640 --> 00:18:48,480
which allows for a pool of memory to be

543
00:18:48,480 --> 00:18:50,960
non-executable on stack so

544
00:18:50,960 --> 00:18:54,240
a standard stack cannot be executed

545
00:18:54,240 --> 00:18:58,400
and um it's very interesting however

546
00:18:58,400 --> 00:19:00,559
despite how good this sounded not an

547
00:19:00,559 --> 00:19:02,799
excusable stack it came with his own

548
00:19:02,799 --> 00:19:04,080
problems

549
00:19:04,080 --> 00:19:06,880
and that same following year

550
00:19:06,880 --> 00:19:08,840
a new attack vector was discovered and

551
00:19:08,840 --> 00:19:11,760
disclosed called return to library c or

552
00:19:11,760 --> 00:19:13,039
c library

553
00:19:13,039 --> 00:19:14,400
and

554
00:19:14,400 --> 00:19:15,440
this

555
00:19:15,440 --> 00:19:17,840
uh new method was so innovative didn't

556
00:19:17,840 --> 00:19:19,679
even require you to put custom shell

557
00:19:19,679 --> 00:19:21,200
code on the stack

558
00:19:21,200 --> 00:19:22,960
as it requires some pre-existing

559
00:19:22,960 --> 00:19:25,600
functions so

560
00:19:25,600 --> 00:19:28,400
a very interesting attack method

561
00:19:28,400 --> 00:19:30,000
and so

562
00:19:30,000 --> 00:19:32,080
there's also the heap overflow not very

563
00:19:32,080 --> 00:19:34,000
good at these but

564
00:19:34,000 --> 00:19:36,320
they're also very much more difficult

565
00:19:36,320 --> 00:19:39,039
area so a heap overflow

566
00:19:39,039 --> 00:19:40,720
is a type of buffer overflow but instead

567
00:19:40,720 --> 00:19:42,880
of stack it occurs in the heap area of

568
00:19:42,880 --> 00:19:44,240
memory

569
00:19:44,240 --> 00:19:46,400
the buffer that can be overwritten is

570
00:19:46,400 --> 00:19:48,160
allocating the heat area of memory the

571
00:19:48,160 --> 00:19:50,799
heap is used by applications

572
00:19:50,799 --> 00:19:53,200
to dynamic allocate buffers of varying

573
00:19:53,200 --> 00:19:55,919
sizes these buffers are susceptible to

574
00:19:55,919 --> 00:19:58,400
overflows supposing there's no check

575
00:19:58,400 --> 00:20:00,880
checks to see what the data is

576
00:20:00,880 --> 00:20:02,960
and things like that so

577
00:20:02,960 --> 00:20:06,400
you can do a lot of things you can um

578
00:20:06,400 --> 00:20:09,360
disclose information you can overwrite

579
00:20:09,360 --> 00:20:11,360
other values onto the heap

580
00:20:11,360 --> 00:20:12,880
and

581
00:20:12,880 --> 00:20:15,360
it's a it's a much trickier attack

582
00:20:15,360 --> 00:20:18,080
factor but i find it interesting still

583
00:20:18,080 --> 00:20:21,120
and i do want to learn more about it so

584
00:20:21,120 --> 00:20:24,000
there is also another frac art school i

585
00:20:24,000 --> 00:20:27,440
like to refer to in the event that

586
00:20:27,440 --> 00:20:30,000
oh i like to uh read about heap

587
00:20:30,000 --> 00:20:33,039
exploitation and that is

588
00:20:33,039 --> 00:20:36,000
uh let's see the art of exploitation

589
00:20:36,000 --> 00:20:40,640
microsoft iis 7.5 remote heap overflow

590
00:20:40,640 --> 00:20:44,000
and this is a walkthrough of a park

591
00:20:44,000 --> 00:20:46,720
in of a vulnerability a remote heap

592
00:20:46,720 --> 00:20:50,720
overflow in microsoft iis web server in

593
00:20:50,720 --> 00:20:54,799
uh 7.5 and it's very good very good

594
00:20:54,799 --> 00:20:56,240
and

595
00:20:56,240 --> 00:20:59,919
very good walkthrough so

596
00:20:59,919 --> 00:21:02,640
if you would ever like a a good

597
00:21:02,640 --> 00:21:04,000
walkthrough on something that's real

598
00:21:04,000 --> 00:21:05,760
wild and

599
00:21:05,760 --> 00:21:07,200
it's just

600
00:21:07,200 --> 00:21:09,660
i recommend it i really do so

601
00:21:09,660 --> 00:21:11,280
[Music]

602
00:21:11,280 --> 00:21:13,120
next is a final slide it's just my

603
00:21:13,120 --> 00:21:15,120
closing statements as well as a few

604
00:21:15,120 --> 00:21:16,720
things that

605
00:21:16,720 --> 00:21:20,159
i um i i kept in the back of my mind and

606
00:21:20,159 --> 00:21:23,120
i find uh quite uh noticeable

607
00:21:23,120 --> 00:21:26,880
and it's just a release of front

608
00:21:26,880 --> 00:21:28,720
um you know

609
00:21:28,720 --> 00:21:30,880
there's a few things that

610
00:21:30,880 --> 00:21:33,360
i want to include as well but

611
00:21:33,360 --> 00:21:35,440
this is the conclusion so the reason i

612
00:21:35,440 --> 00:21:38,240
made this talk is to understand

613
00:21:38,240 --> 00:21:39,280
better

614
00:21:39,280 --> 00:21:41,760
like how applications work so i share my

615
00:21:41,760 --> 00:21:43,039
interest in what is being done within

616
00:21:43,039 --> 00:21:44,799
the last few decades

617
00:21:44,799 --> 00:21:46,720
by attackers and vendors to make the

618
00:21:46,720 --> 00:21:49,200
attacks i was either bigger or smaller

619
00:21:49,200 --> 00:21:50,880
the research i've done been fascinating

620
00:21:50,880 --> 00:21:52,400
for me

621
00:21:52,400 --> 00:21:55,520
and um there's so many and it taught me

622
00:21:55,520 --> 00:21:57,919
that say i'm in a ctf or something it

623
00:21:57,919 --> 00:21:59,840
told me i had to think out of the box a

624
00:21:59,840 --> 00:22:00,720
lot

625
00:22:00,720 --> 00:22:02,480
after doing a lot of ctf and a lot of

626
00:22:02,480 --> 00:22:04,799
reading it made me turn to

627
00:22:04,799 --> 00:22:06,000
methods i would have considered

628
00:22:06,000 --> 00:22:07,840
unconventional before

629
00:22:07,840 --> 00:22:10,240
and then it works and i'm thinking to

630
00:22:10,240 --> 00:22:11,440
myself

631
00:22:11,440 --> 00:22:13,840
you know it's crazy that that works

632
00:22:13,840 --> 00:22:15,840
there's always sort of

633
00:22:15,840 --> 00:22:17,520
a way you know there's

634
00:22:17,520 --> 00:22:20,080
with ctfs or whatever you're trying to

635
00:22:20,080 --> 00:22:21,679
find all the vulnerabilities of your own

636
00:22:21,679 --> 00:22:24,080
there's always a way because last 30 or

637
00:22:24,080 --> 00:22:25,520
40

638
00:22:25,520 --> 00:22:28,000
us how creative attackers can be in

639
00:22:28,000 --> 00:22:30,480
finding new vulnerabilities

640
00:22:30,480 --> 00:22:32,320
say for example

641
00:22:32,320 --> 00:22:34,799
like we said earlier with php insecure

642
00:22:34,799 --> 00:22:36,880
deterioration

643
00:22:36,880 --> 00:22:39,200
that bug was discovered in

644
00:22:39,200 --> 00:22:42,960
2009 i believe and in 2018 there was a

645
00:22:42,960 --> 00:22:44,960
black cat conference

646
00:22:44,960 --> 00:22:47,039
uh by sam thomas

647
00:22:47,039 --> 00:22:49,600
who made a talk on php insecurities

648
00:22:49,600 --> 00:22:50,960
serialization

649
00:22:50,960 --> 00:22:52,880
but he introduced it in a completely new

650
00:22:52,880 --> 00:22:55,679
light expanding the attack surface

651
00:22:55,679 --> 00:22:57,679
that's just one example i can name

652
00:22:57,679 --> 00:22:58,720
where

653
00:22:58,720 --> 00:23:00,720
there's been an attack vector

654
00:23:00,720 --> 00:23:02,880
but a researcher has just took it to the

655
00:23:02,880 --> 00:23:04,159
new level

656
00:23:04,159 --> 00:23:06,400
and just introduced so many different

657
00:23:06,400 --> 00:23:08,159
possibilities

658
00:23:08,159 --> 00:23:10,159
it's really really it really is

659
00:23:10,159 --> 00:23:11,919
inspiring to me

660
00:23:11,919 --> 00:23:13,440
when i see things like that when i see

661
00:23:13,440 --> 00:23:15,200
conferences

662
00:23:15,200 --> 00:23:17,679
that just teach me so much about

663
00:23:17,679 --> 00:23:19,679
different possibilities of exploiting a

664
00:23:19,679 --> 00:23:20,880
bug

665
00:23:20,880 --> 00:23:23,120
so uh yeah

666
00:23:23,120 --> 00:23:25,600
i learned that

667
00:23:25,600 --> 00:23:27,520
uh what's it called i

668
00:23:27,520 --> 00:23:30,480
want to put i put my mind to it it isn't

669
00:23:30,480 --> 00:23:33,039
hard it isn't hard to just sort of keep

670
00:23:33,039 --> 00:23:35,840
learning keep learning obviously

671
00:23:35,840 --> 00:23:39,200
there it isn't like um a cakewalk or a

672
00:23:39,200 --> 00:23:41,679
book a walk in the park but

673
00:23:41,679 --> 00:23:43,039
it's um

674
00:23:43,039 --> 00:23:45,279
it's a little less harder once you're

675
00:23:45,279 --> 00:23:47,120
you know fully engaged and you're having

676
00:23:47,120 --> 00:23:48,960
conversations with people

677
00:23:48,960 --> 00:23:50,000
and you're

678
00:23:50,000 --> 00:23:51,520
just gaining a better understanding of

679
00:23:51,520 --> 00:23:53,279
how things work

680
00:23:53,279 --> 00:23:54,559
and uh

681
00:23:54,559 --> 00:23:55,919
yeah

682
00:23:55,919 --> 00:23:57,279
that's uh

683
00:23:57,279 --> 00:23:59,840
that's my talk so um

684
00:23:59,840 --> 00:24:02,960
anyone have any questions

685
00:24:02,960 --> 00:24:05,440
yes people do have questions

686
00:24:05,440 --> 00:24:07,360
do you want to take the first ones kelly

687
00:24:07,360 --> 00:24:09,760
sure thing by the way this was such a

688
00:24:09,760 --> 00:24:12,240
nice talk it was so full of information

689
00:24:12,240 --> 00:24:13,760
there was so much to

690
00:24:13,760 --> 00:24:16,640
to learn and and now you have by the way

691
00:24:16,640 --> 00:24:18,159
tons of people who want to pick your

692
00:24:18,159 --> 00:24:21,440
brain to know more about your topic so

693
00:24:21,440 --> 00:24:23,520
um hopefully you don't get jumped after

694
00:24:23,520 --> 00:24:25,039
this but there's a couple people that

695
00:24:25,039 --> 00:24:26,400
are definitely interested in hearing

696
00:24:26,400 --> 00:24:28,080
what you have to say more on this and

697
00:24:28,080 --> 00:24:29,679
some people are upset about some php

698
00:24:29,679 --> 00:24:32,799
comments but that's for another day

699
00:24:32,799 --> 00:24:33,679
all right

700
00:24:33,679 --> 00:24:36,559
first question you ready

701
00:24:36,559 --> 00:24:37,760
yeah sure

702
00:24:37,760 --> 00:24:38,559
okay

703
00:24:38,559 --> 00:24:40,720
so you say php has improved lots over

704
00:24:40,720 --> 00:24:42,400
the years are there any specific classes

705
00:24:42,400 --> 00:24:44,000
of vulnerability that you still see in

706
00:24:44,000 --> 00:24:46,000
more recent developments or deployments

707
00:24:46,000 --> 00:24:47,200
sorry

708
00:24:47,200 --> 00:24:48,799
um

709
00:24:48,799 --> 00:24:50,400
to be honest

710
00:24:50,400 --> 00:24:52,799
when i say it's improved over the years

711
00:24:52,799 --> 00:24:54,400
i mean there's some vulnerabilities

712
00:24:54,400 --> 00:24:56,559
which are really bad obviously which is

713
00:24:56,559 --> 00:24:58,840
completely gone now and obviously

714
00:24:58,840 --> 00:25:02,000
php when i talk to people in like

715
00:25:02,000 --> 00:25:04,559
communities they always say oh php php

716
00:25:04,559 --> 00:25:05,520
but

717
00:25:05,520 --> 00:25:07,760
honestly there are some vulnerabilities

718
00:25:07,760 --> 00:25:08,880
which

719
00:25:08,880 --> 00:25:11,440
existed 15 years ago which don't exist

720
00:25:11,440 --> 00:25:14,480
now at all because of what php do so

721
00:25:14,480 --> 00:25:16,559
i don't really

722
00:25:16,559 --> 00:25:19,039
see that much in engagements

723
00:25:19,039 --> 00:25:21,919
obviously um when i'm doing engagements

724
00:25:21,919 --> 00:25:25,200
a lot of it's just um

725
00:25:25,200 --> 00:25:27,679
very sort of real world and you know

726
00:25:27,679 --> 00:25:29,600
it's not like ctfs or anything and

727
00:25:29,600 --> 00:25:32,080
there's just very new kind of

728
00:25:32,080 --> 00:25:34,640
kind of bugs and things like that

729
00:25:34,640 --> 00:25:37,360
so uh yeah

730
00:25:37,520 --> 00:25:39,120
awesome nikos would you like to do the

731
00:25:39,120 --> 00:25:40,720
second question

732
00:25:40,720 --> 00:25:42,559
yes uh so there was a question from

733
00:25:42,559 --> 00:25:43,520
twitter

734
00:25:43,520 --> 00:25:46,240
uh do you have any good tips for working

735
00:25:46,240 --> 00:25:49,440
through and coping with migraines

736
00:25:49,440 --> 00:25:51,360
oh man this is a

737
00:25:51,360 --> 00:25:53,200
i'm the worst person to ask

738
00:25:53,200 --> 00:25:54,720
i've had migraines for the last two

739
00:25:54,720 --> 00:25:56,559
weeks

740
00:25:56,559 --> 00:25:58,000
i've had migraines for the last two

741
00:25:58,000 --> 00:26:01,120
weeks you know so

742
00:26:01,760 --> 00:26:03,279
yeah i mean

743
00:26:03,279 --> 00:26:06,000
i guess just turning the screens off and

744
00:26:06,000 --> 00:26:08,480
just sort of having enough water taking

745
00:26:08,480 --> 00:26:10,480
sort of uh

746
00:26:10,480 --> 00:26:12,799
just taking just taking some time away

747
00:26:12,799 --> 00:26:14,400
from the screens definitely helped

748
00:26:14,400 --> 00:26:15,840
because

749
00:26:15,840 --> 00:26:17,279
when i was

750
00:26:17,279 --> 00:26:18,960
moving because i was moving a lot of the

751
00:26:18,960 --> 00:26:20,559
times making this talk

752
00:26:20,559 --> 00:26:23,200
and i would spend every waking moment a

753
00:26:23,200 --> 00:26:24,880
day when i moved on

754
00:26:24,880 --> 00:26:27,520
on um different projects but

755
00:26:27,520 --> 00:26:29,440
and i get a lot of migraines so when i

756
00:26:29,440 --> 00:26:31,760
took some time away from the screens and

757
00:26:31,760 --> 00:26:34,400
i went outside for a walk and had enough

758
00:26:34,400 --> 00:26:36,720
water and things like that then

759
00:26:36,720 --> 00:26:39,360
it helped a lot you know it did help a

760
00:26:39,360 --> 00:26:41,360
lot just getting away from the screens a

761
00:26:41,360 --> 00:26:42,720
little bit instead of spending every

762
00:26:42,720 --> 00:26:45,279
waking moment a day on them

763
00:26:45,279 --> 00:26:48,400
yeah yeah

