1
00:00:02,560 --> 00:00:03,840
thank you nichols

2
00:00:03,840 --> 00:00:05,920
so uh hi everyone i hope you all are

3
00:00:05,920 --> 00:00:06,960
doing good

4
00:00:06,960 --> 00:00:09,200
uh today i'll be talking about api pen

5
00:00:09,200 --> 00:00:11,120
testing and a few vulnerabilities

6
00:00:11,120 --> 00:00:14,719
related to it so let's just jump into it

7
00:00:14,719 --> 00:00:15,519
okay

8
00:00:15,519 --> 00:00:17,760
a quick introduction about myself my

9
00:00:17,760 --> 00:00:19,359
name is abhinav khanna and i'm currently

10
00:00:19,359 --> 00:00:21,600
working as an application security

11
00:00:21,600 --> 00:00:25,119
engineer at not so secure

12
00:00:25,279 --> 00:00:27,279
before we get started with the

13
00:00:27,279 --> 00:00:29,599
vulnerabilities just a quick disclaimer

14
00:00:29,599 --> 00:00:31,439
that i do not endorse the tools and

15
00:00:31,439 --> 00:00:33,600
platforms listed in the slides

16
00:00:33,600 --> 00:00:35,840
and uh these are not the only ones

17
00:00:35,840 --> 00:00:37,600
available in the market there are tons

18
00:00:37,600 --> 00:00:39,120
more

19
00:00:39,120 --> 00:00:40,559
okay

20
00:00:40,559 --> 00:00:43,280
so again before jumping on to the

21
00:00:43,280 --> 00:00:46,000
vulnerabilities let's discuss

22
00:00:46,000 --> 00:00:49,200
a little little bit of of what commonly

23
00:00:49,200 --> 00:00:51,600
apis i used to do

24
00:00:51,600 --> 00:00:54,480
the first would be rest apis rest apis

25
00:00:54,480 --> 00:00:57,039
are based on rest architecture

26
00:00:57,039 --> 00:01:00,239
and they work with json and xml booth

27
00:01:00,239 --> 00:01:02,000
now when it comes to soap apis they are

28
00:01:02,000 --> 00:01:04,479
relatively older than rest apis and they

29
00:01:04,479 --> 00:01:06,560
only work with xml format

30
00:01:06,560 --> 00:01:08,320
the third one which is graph quality

31
00:01:08,320 --> 00:01:10,960
apis they are a bit more flexible than

32
00:01:10,960 --> 00:01:12,560
rest and show

33
00:01:12,560 --> 00:01:14,799
as we can access a lot of resources in

34
00:01:14,799 --> 00:01:16,960
just one single request

35
00:01:16,960 --> 00:01:17,920
all right

36
00:01:17,920 --> 00:01:18,720
so

37
00:01:18,720 --> 00:01:21,360
let's go to os popped in

38
00:01:21,360 --> 00:01:24,560
we need to take care that oh my stop 10

39
00:01:24,560 --> 00:01:26,960
is considered an important part when we

40
00:01:26,960 --> 00:01:30,000
are working on the apis because today

41
00:01:30,000 --> 00:01:32,479
apis are a very critical part of the

42
00:01:32,479 --> 00:01:33,759
business

43
00:01:33,759 --> 00:01:35,520
for today's talk we'll be discussing

44
00:01:35,520 --> 00:01:38,000
about four vulnerabilities one is mass

45
00:01:38,000 --> 00:01:40,159
assignment the other is improper asset

46
00:01:40,159 --> 00:01:42,000
management the third would be excessive

47
00:01:42,000 --> 00:01:44,320
data exposure and the fourth would be

48
00:01:44,320 --> 00:01:47,600
lack of resources and trade limit

49
00:01:47,600 --> 00:01:49,280
sorry

50
00:01:49,280 --> 00:01:51,439
so whenever you start with any of your

51
00:01:51,439 --> 00:01:54,640
ap projects or api assessments there are

52
00:01:54,640 --> 00:01:56,479
a few things that you need to take care

53
00:01:56,479 --> 00:01:59,200
about the first would be that

54
00:01:59,200 --> 00:02:01,439
go through the documentation before you

55
00:02:01,439 --> 00:02:03,200
actually get started

56
00:02:03,200 --> 00:02:04,079
when you're going through the

57
00:02:04,079 --> 00:02:06,159
documentation you might be able to

58
00:02:06,159 --> 00:02:08,239
understand what is the business logic

59
00:02:08,239 --> 00:02:11,038
behind the apis and you might be able to

60
00:02:11,038 --> 00:02:13,920
find business logic laws related

61
00:02:13,920 --> 00:02:16,560
the second would be always ask for ebay

62
00:02:16,560 --> 00:02:18,400
collection which includes the positive

63
00:02:18,400 --> 00:02:19,599
response

64
00:02:19,599 --> 00:02:22,879
by positive response i mean that

65
00:02:22,879 --> 00:02:25,599
when there's no manipulation

66
00:02:25,599 --> 00:02:28,239
being done in the request what would be

67
00:02:28,239 --> 00:02:30,480
the right response

68
00:02:30,480 --> 00:02:32,640
and the third would be that do not stick

69
00:02:32,640 --> 00:02:34,480
to automated rules for vulnerability

70
00:02:34,480 --> 00:02:37,680
identification see when it comes to apis

71
00:02:37,680 --> 00:02:40,160
i i've always found out that the manual

72
00:02:40,160 --> 00:02:42,640
approach is the best one because we'd be

73
00:02:42,640 --> 00:02:44,720
able to find a lot of a lot of logic

74
00:02:44,720 --> 00:02:48,000
flaws uh if we go using the manual

75
00:02:48,000 --> 00:02:49,920
all right so we'll be discussing the

76
00:02:49,920 --> 00:02:51,840
first vulnerability

77
00:02:51,840 --> 00:02:54,959
that is called as mass assignment so

78
00:02:54,959 --> 00:02:57,599
mass assignment occurs when a user or an

79
00:02:57,599 --> 00:02:59,920
attacker can manipulate the objects

80
00:02:59,920 --> 00:03:03,120
which should ideally be not accessible

81
00:03:03,120 --> 00:03:05,120
to them in the first place

82
00:03:05,120 --> 00:03:06,560
when we when we talk about mass

83
00:03:06,560 --> 00:03:09,599
assignment the concept of object binding

84
00:03:09,599 --> 00:03:11,440
comes into the place

85
00:03:11,440 --> 00:03:13,599
i've written a one liner here as well

86
00:03:13,599 --> 00:03:16,400
let's lie and check if we can get caught

87
00:03:16,400 --> 00:03:18,560
so we try to understand this

88
00:03:18,560 --> 00:03:20,080
vulnerability

89
00:03:20,080 --> 00:03:22,640
using a non-technical story before we

90
00:03:22,640 --> 00:03:24,720
actually jump onto the demo so let's see

91
00:03:24,720 --> 00:03:27,360
what the story is

92
00:03:27,360 --> 00:03:29,680
consider this a catholic

93
00:03:29,680 --> 00:03:32,080
and a person walks in and says that hey

94
00:03:32,080 --> 00:03:34,159
are you guys serving pizza

95
00:03:34,159 --> 00:03:36,560
and the waiter comes and says yeah we do

96
00:03:36,560 --> 00:03:39,280
solve the pizza for ten dollars

97
00:03:39,280 --> 00:03:42,239
now the person in return says that okay

98
00:03:42,239 --> 00:03:44,159
hey i'm the only friend

99
00:03:44,159 --> 00:03:45,920
and the waiter without actually

100
00:03:45,920 --> 00:03:47,599
identifying that okay if he's the owner

101
00:03:47,599 --> 00:03:49,440
friend or not would straight away give

102
00:03:49,440 --> 00:03:51,680
him the discount i would say that okay

103
00:03:51,680 --> 00:03:53,519
we serve the pizza for two dollars to

104
00:03:53,519 --> 00:03:56,480
you so that is something similar to mass

105
00:03:56,480 --> 00:03:58,720
assignment where we're actually not who

106
00:03:58,720 --> 00:04:01,920
we are but we can still uh

107
00:04:01,920 --> 00:04:04,000
access the resources

108
00:04:04,000 --> 00:04:06,720
that do not belong to us for example

109
00:04:06,720 --> 00:04:08,319
if we are not the admin but we inject

110
00:04:08,319 --> 00:04:10,319
the parameter that okay is admin equal

111
00:04:10,319 --> 00:04:12,720
to true and if the application accepts

112
00:04:12,720 --> 00:04:15,280
it we might be able to access all the

113
00:04:15,280 --> 00:04:17,839
admin related functionalities

114
00:04:17,839 --> 00:04:20,399
all right so let's try to understand

115
00:04:20,399 --> 00:04:23,360
this using actual demo

116
00:04:23,360 --> 00:04:24,720
so for demo

117
00:04:24,720 --> 00:04:29,080
we have used the contrast free exercise

118
00:04:29,600 --> 00:04:31,120
so what we'll do

119
00:04:31,120 --> 00:04:32,639
we'll go to the forget password page

120
00:04:32,639 --> 00:04:34,880
here

121
00:04:35,040 --> 00:04:38,560
we'll enter our own email address

122
00:04:39,759 --> 00:04:41,440
and we'll wait for the password reset

123
00:04:41,440 --> 00:04:44,400
link to be sent to us

124
00:04:47,040 --> 00:04:48,720
okay we have the link

125
00:04:48,720 --> 00:04:52,240
now let's try to open the link

126
00:04:53,120 --> 00:04:55,120
i will try to enter the new password and

127
00:04:55,120 --> 00:04:58,400
then analyze the request

128
00:04:59,600 --> 00:05:02,479
now this something called as it is admin

129
00:05:02,479 --> 00:05:04,240
faults

130
00:05:04,240 --> 00:05:06,080
so what we'll try to do here is we'll

131
00:05:06,080 --> 00:05:08,720
try to change this to true and save the

132
00:05:08,720 --> 00:05:11,919
application accepted

133
00:05:23,360 --> 00:05:25,680
all right the application accepted is

134
00:05:25,680 --> 00:05:27,280
now we'll just try to log in with the

135
00:05:27,280 --> 00:05:29,840
new credentials and see if we are able

136
00:05:29,840 --> 00:05:33,799
to access the admin functionality

137
00:05:39,919 --> 00:05:41,759
you are able to login access everything

138
00:05:41,759 --> 00:05:43,919
that admin can access so this is what

139
00:05:43,919 --> 00:05:46,080
mass assignment can do give you a lot

140
00:05:46,080 --> 00:05:48,720
more functionalities than you actually

141
00:05:48,720 --> 00:05:51,120
need need to take care of

142
00:05:51,120 --> 00:05:53,600
all right so let's move to the next

143
00:05:53,600 --> 00:05:56,000
vulnerability which is called as

144
00:05:56,000 --> 00:05:58,160
improper asset management

145
00:05:58,160 --> 00:06:00,639
and according to overall apis tend to

146
00:06:00,639 --> 00:06:02,479
expose more endpoints than the

147
00:06:02,479 --> 00:06:04,800
traditional web applications and that is

148
00:06:04,800 --> 00:06:08,080
why documentation becomes very important

149
00:06:08,080 --> 00:06:08,960
see

150
00:06:08,960 --> 00:06:10,560
if the documentation is properly

151
00:06:10,560 --> 00:06:13,440
implemented we might be able to uh

152
00:06:13,440 --> 00:06:16,000
mitigate the risks related to the

153
00:06:16,000 --> 00:06:18,160
retired or depreciated versions of the

154
00:06:18,160 --> 00:06:19,840
aps

155
00:06:19,840 --> 00:06:21,520
again i've created a one line of that

156
00:06:21,520 --> 00:06:23,600
okay you made a very secure new new

157
00:06:23,600 --> 00:06:25,680
version but did you forget to disable

158
00:06:25,680 --> 00:06:27,840
the previous one so what happens is for

159
00:06:27,840 --> 00:06:30,720
example uh you have a v2 version of your

160
00:06:30,720 --> 00:06:34,240
api which which has everything

161
00:06:34,240 --> 00:06:36,319
stored in an encrypted format which is a

162
00:06:36,319 --> 00:06:37,919
good security practice

163
00:06:37,919 --> 00:06:39,759
but at the same time

164
00:06:39,759 --> 00:06:42,400
v1 the version one of the api is still

165
00:06:42,400 --> 00:06:44,400
accessible to everyone

166
00:06:44,400 --> 00:06:46,880
and all the data there is there in plain

167
00:06:46,880 --> 00:06:49,280
text it might be your password your ssl

168
00:06:49,280 --> 00:06:51,360
number or anything so even though you

169
00:06:51,360 --> 00:06:54,479
have good practices implemented on v2 v1

170
00:06:54,479 --> 00:06:56,240
is vulnerable

171
00:06:56,240 --> 00:06:58,960
so again let's try to discuss this let's

172
00:06:58,960 --> 00:07:00,560
try to understand this with a

173
00:07:00,560 --> 00:07:02,479
non-technical story

174
00:07:02,479 --> 00:07:06,240
and and see how this can be exploited

175
00:07:06,240 --> 00:07:09,280
okay so consider this an office

176
00:07:09,280 --> 00:07:11,520
and this is an ex-employee that works

177
00:07:11,520 --> 00:07:12,400
here

178
00:07:12,400 --> 00:07:15,599
and tries to enter the office with this

179
00:07:15,599 --> 00:07:18,400
old id card see if the employee has left

180
00:07:18,400 --> 00:07:20,560
the organization his id card should

181
00:07:20,560 --> 00:07:22,720
ideally be expired it should not be

182
00:07:22,720 --> 00:07:23,599
valid

183
00:07:23,599 --> 00:07:26,319
but what the person here tries is he'll

184
00:07:26,319 --> 00:07:28,000
try to log in

185
00:07:28,000 --> 00:07:28,720
he'll

186
00:07:28,720 --> 00:07:31,599
try to enter the office with his old id

187
00:07:31,599 --> 00:07:33,680
card ideally he should not be able to

188
00:07:33,680 --> 00:07:36,400
enter but what happens is

189
00:07:36,400 --> 00:07:38,720
he'll be able to enter the office

190
00:07:38,720 --> 00:07:39,919
why

191
00:07:39,919 --> 00:07:42,479
because the assets were not managed

192
00:07:42,479 --> 00:07:46,240
properly his id card was still active

193
00:07:46,240 --> 00:07:48,319
and in an ideal world that should not

194
00:07:48,319 --> 00:07:49,520
happen

195
00:07:49,520 --> 00:07:52,400
now let's try to understand this on a

196
00:07:52,400 --> 00:07:54,960
while variable

197
00:07:55,599 --> 00:07:58,240
we'd be again using the contrast

198
00:07:58,240 --> 00:08:01,840
vulnerable free exercise for this

199
00:08:04,400 --> 00:08:05,680
so what we'll do we'll go to the one

200
00:08:05,680 --> 00:08:08,319
variable app

201
00:08:11,039 --> 00:08:13,919
we'll go to this project password

202
00:08:13,919 --> 00:08:16,080
and here we'll inject the victim's email

203
00:08:16,080 --> 00:08:18,318
id

204
00:08:19,039 --> 00:08:20,560
okay now we don't know what is the

205
00:08:20,560 --> 00:08:22,800
verification token we'll just enter

206
00:08:22,800 --> 00:08:24,400
anything randomly and we'll try to

207
00:08:24,400 --> 00:08:27,840
analyze the request and response

208
00:08:32,559 --> 00:08:34,880
we are using the version 3 of api

209
00:08:34,880 --> 00:08:38,000
to analyze the request

210
00:08:38,958 --> 00:08:41,599
all right so the token was not valid but

211
00:08:41,599 --> 00:08:43,039
we got to know that there is a rate

212
00:08:43,039 --> 00:08:45,040
limit implemented there and after four

213
00:08:45,040 --> 00:08:48,080
attempts we will not be able to check

214
00:08:48,080 --> 00:08:49,920
for the token again

215
00:08:49,920 --> 00:08:50,720
so

216
00:08:50,720 --> 00:08:52,560
let's try to enter in the random token

217
00:08:52,560 --> 00:08:55,560
again

218
00:08:59,279 --> 00:09:01,040
so now what we'll do is we'll change

219
00:09:01,040 --> 00:09:01,760
this

220
00:09:01,760 --> 00:09:06,640
v3 to v2 or v1 and see what happens

221
00:09:07,279 --> 00:09:09,440
okay we are again under authorized but

222
00:09:09,440 --> 00:09:11,279
we got to know that there is no rate

223
00:09:11,279 --> 00:09:13,120
limiting or no group brute force

224
00:09:13,120 --> 00:09:15,120
prediction available here

225
00:09:15,120 --> 00:09:16,959
so it basically means

226
00:09:16,959 --> 00:09:19,440
we'll be able to uh will be able to

227
00:09:19,440 --> 00:09:21,279
brute force the token and log it into

228
00:09:21,279 --> 00:09:23,680
the account of the victim

229
00:09:23,680 --> 00:09:26,959
we run a python script here

230
00:09:27,120 --> 00:09:31,200
okay we found out the correct token

231
00:09:31,279 --> 00:09:34,920
let's enter this token

232
00:09:36,720 --> 00:09:39,360
all right so now we are able to log into

233
00:09:39,360 --> 00:09:41,279
the victims account see

234
00:09:41,279 --> 00:09:43,839
this is what asset management can do

235
00:09:43,839 --> 00:09:45,600
even though you have rate limiting uh

236
00:09:45,600 --> 00:09:47,360
implemented on version 3 there's

237
00:09:47,360 --> 00:09:50,000
absolutely nothing uh preventing through

238
00:09:50,000 --> 00:09:51,760
force attacks on v1 and using that we

239
00:09:51,760 --> 00:09:53,680
were able to log in

240
00:09:53,680 --> 00:09:56,240
alright so let's talk about the third

241
00:09:56,240 --> 00:09:57,680
vulnerability

242
00:09:57,680 --> 00:10:00,399
which is called as excessive data

243
00:10:00,399 --> 00:10:03,279
and it normally occurs when more than

244
00:10:03,279 --> 00:10:05,760
required data gets shown to the end user

245
00:10:05,760 --> 00:10:07,120
accidentally

246
00:10:07,120 --> 00:10:08,640
it's just like

247
00:10:08,640 --> 00:10:11,200
you're exposing your secrets to every

248
00:10:11,200 --> 00:10:12,480
person you need

249
00:10:12,480 --> 00:10:13,839
so ideally you know you will not go

250
00:10:13,839 --> 00:10:16,079
around and tell your secrets to everyone

251
00:10:16,079 --> 00:10:17,200
right

252
00:10:17,200 --> 00:10:19,680
just that just like that

253
00:10:19,680 --> 00:10:21,440
you you should

254
00:10:21,440 --> 00:10:22,800
take care that

255
00:10:22,800 --> 00:10:25,760
the data that is shown to the user is

256
00:10:25,760 --> 00:10:28,320
dependent upon their role

257
00:10:28,320 --> 00:10:29,839
let's try to understand this with an

258
00:10:29,839 --> 00:10:31,440
example

259
00:10:31,440 --> 00:10:33,360
consider this request

260
00:10:33,360 --> 00:10:37,519
uh consider this request of a dating app

261
00:10:37,519 --> 00:10:39,680
usually on the front end a few things

262
00:10:39,680 --> 00:10:42,079
are available one would be the name the

263
00:10:42,079 --> 00:10:44,000
second would be the age and third would

264
00:10:44,000 --> 00:10:46,079
probably be

265
00:10:46,079 --> 00:10:47,440
the city

266
00:10:47,440 --> 00:10:49,760
but if someone captures the request say

267
00:10:49,760 --> 00:10:51,760
this is a request and they try to

268
00:10:51,760 --> 00:10:53,440
analyze the response

269
00:10:53,440 --> 00:10:55,360
so in the response we can see that this

270
00:10:55,360 --> 00:10:57,360
name this age

271
00:10:57,360 --> 00:11:00,160
there's the exact address

272
00:11:00,160 --> 00:11:01,839
there's the mobile number and there's

273
00:11:01,839 --> 00:11:04,240
the email address

274
00:11:04,240 --> 00:11:07,120
according to the business of the dating

275
00:11:07,120 --> 00:11:10,800
app this becomes the very critical data

276
00:11:10,800 --> 00:11:13,040
and if you are able to enumerate the id

277
00:11:13,040 --> 00:11:15,279
it becomes an even bigger threat

278
00:11:15,279 --> 00:11:18,399
so that is how excessive data exposure

279
00:11:18,399 --> 00:11:20,640
becomes a huge risk when it comes to

280
00:11:20,640 --> 00:11:22,240
apis

281
00:11:22,240 --> 00:11:26,079
let's try to understand this with a demo

282
00:11:26,320 --> 00:11:28,079
we have again used the free exercise of

283
00:11:28,079 --> 00:11:30,640
contra here

284
00:11:30,640 --> 00:11:34,240
let's go to the forget password page

285
00:11:37,839 --> 00:11:40,160
now we will enter an email id and we'll

286
00:11:40,160 --> 00:11:43,839
try to analyze the request

287
00:11:50,079 --> 00:11:51,200
all right

288
00:11:51,200 --> 00:11:53,360
so we got to know that the password

289
00:11:53,360 --> 00:11:56,079
reset link is available in the response

290
00:11:56,079 --> 00:11:58,560
itself

291
00:11:58,560 --> 00:12:01,360
using this link will we we can change

292
00:12:01,360 --> 00:12:03,360
anyone's password and login into that

293
00:12:03,360 --> 00:12:04,240
account

294
00:12:04,240 --> 00:12:07,040
so straight account takeover is possible

295
00:12:07,040 --> 00:12:08,800
so now what we do we enter the victim's

296
00:12:08,800 --> 00:12:11,839
email id

297
00:12:13,040 --> 00:12:16,000
and we we got the password reset token

298
00:12:16,000 --> 00:12:17,120
here

299
00:12:17,120 --> 00:12:18,720
we'll open it and see

300
00:12:18,720 --> 00:12:23,480
if the password reset page gets opened

301
00:12:29,680 --> 00:12:32,480
cool so the page get got open

302
00:12:32,480 --> 00:12:34,399
we would be able to change the password

303
00:12:34,399 --> 00:12:36,959
and novel into the difference account

304
00:12:36,959 --> 00:12:38,880
so it's

305
00:12:38,880 --> 00:12:40,959
it potentially led to accounting

306
00:12:40,959 --> 00:12:43,760
excessive data exposure

307
00:12:43,760 --> 00:12:45,200
you should take care that your pan

308
00:12:45,200 --> 00:12:47,360
number your ssn or the reset password

309
00:12:47,360 --> 00:12:49,440
links names emails depends upon the

310
00:12:49,440 --> 00:12:51,200
business these things should not be

311
00:12:51,200 --> 00:12:53,600
there in the response itself

312
00:12:53,600 --> 00:12:54,800
all right

313
00:12:54,800 --> 00:12:56,399
so now we'll be talking about the last

314
00:12:56,399 --> 00:12:58,240
vulnerability for today which is called

315
00:12:58,240 --> 00:13:01,519
as lack of resources and trait limiting

316
00:13:01,519 --> 00:13:02,959
one of the most commonly found

317
00:13:02,959 --> 00:13:05,600
vulnerabilities when it comes to apis

318
00:13:05,600 --> 00:13:08,480
and basically what happens here is that

319
00:13:08,480 --> 00:13:10,959
there is absolutely no control on the

320
00:13:10,959 --> 00:13:14,240
amount of requests that a user user can

321
00:13:14,240 --> 00:13:17,360
make in a short frame of time

322
00:13:17,360 --> 00:13:19,680
it can potentially lead to doors while

323
00:13:19,680 --> 00:13:22,320
the other scenarios can range from group

324
00:13:22,320 --> 00:13:24,240
force attacks or flooding attacks

325
00:13:24,240 --> 00:13:27,120
consider this it's 5 am in the morning

326
00:13:27,120 --> 00:13:28,079
and

327
00:13:28,079 --> 00:13:30,800
you start getting a lot of sms like 500

328
00:13:30,800 --> 00:13:33,200
sms in 2 or 3 minutes and those are all

329
00:13:33,200 --> 00:13:34,880
the password reset links to you from

330
00:13:34,880 --> 00:13:36,800
your favorite e-commerce

331
00:13:36,800 --> 00:13:37,920
website

332
00:13:37,920 --> 00:13:39,040
one

333
00:13:39,040 --> 00:13:42,320
your obvious uws me very irritated that

334
00:13:42,320 --> 00:13:44,639
hey why am i getting so many messages in

335
00:13:44,639 --> 00:13:47,440
the morning and second would be you'd be

336
00:13:47,440 --> 00:13:49,040
scared that hey someone's trying to hack

337
00:13:49,040 --> 00:13:50,079
my account

338
00:13:50,079 --> 00:13:52,880
so if there's no rate limiting in place

339
00:13:52,880 --> 00:13:54,480
this this can happen

340
00:13:54,480 --> 00:13:55,279
now

341
00:13:55,279 --> 00:13:57,519
let's try to understand this again using

342
00:13:57,519 --> 00:13:59,920
a demo

343
00:14:00,480 --> 00:14:01,360
all right

344
00:14:01,360 --> 00:14:03,360
so for this we'll be using the ova

345
00:14:03,360 --> 00:14:05,120
security knowledge framework

346
00:14:05,120 --> 00:14:06,959
and we'll try to see if we can bypass

347
00:14:06,959 --> 00:14:09,279
the rate limiting on spook on this logic

348
00:14:09,279 --> 00:14:10,639
page

349
00:14:10,639 --> 00:14:13,440
okay so we don't know the dimensions

350
00:14:13,440 --> 00:14:14,959
we'll try to view the source of this

351
00:14:14,959 --> 00:14:17,839
page

352
00:14:20,160 --> 00:14:22,720
we got something written in base64 let's

353
00:14:22,720 --> 00:14:25,760
just try to decode it

354
00:14:29,040 --> 00:14:30,880
so we found the username

355
00:14:30,880 --> 00:14:33,600
let's just try to enter this as username

356
00:14:33,600 --> 00:14:37,680
and password both and see if we are able

357
00:14:42,639 --> 00:14:45,279
no we are not so now what we'll do we'll

358
00:14:45,279 --> 00:14:49,199
just try to analyze the request here

359
00:14:54,880 --> 00:14:55,680
cool

360
00:14:55,680 --> 00:14:57,600
now we have the request with us what

361
00:14:57,600 --> 00:14:59,199
we'll do is

362
00:14:59,199 --> 00:15:01,040
we'll send it to includer and we'll try

363
00:15:01,040 --> 00:15:03,199
to see if any sort of rate rate limit is

364
00:15:03,199 --> 00:15:05,680
implemented

365
00:15:06,000 --> 00:15:09,959
let's create a preview list

366
00:15:22,000 --> 00:15:24,560
we're using a very small list here

367
00:15:24,560 --> 00:15:26,399
just for checking your fate limitation

368
00:15:26,399 --> 00:15:29,959
it is there or not

369
00:15:48,560 --> 00:15:50,880
so we'll just quickly start our attack

370
00:15:50,880 --> 00:15:54,360
and see what happens

371
00:15:57,680 --> 00:16:00,639
all right so so there's absolutely no

372
00:16:00,639 --> 00:16:02,399
rate limit in place

373
00:16:02,399 --> 00:16:02,710
and

374
00:16:02,710 --> 00:16:04,639
[Music]

375
00:16:04,639 --> 00:16:06,480
so we have a different response for the

376
00:16:06,480 --> 00:16:09,759
19th attempt let's just try to see

377
00:16:09,759 --> 00:16:13,560
the response to it

378
00:16:23,199 --> 00:16:24,160
cool

379
00:16:24,160 --> 00:16:26,320
so we were able to solve this challenge

380
00:16:26,320 --> 00:16:28,639
because there was no rate limit in place

381
00:16:28,639 --> 00:16:30,160
and since there was no rate limit we

382
00:16:30,160 --> 00:16:33,199
were able to prove for secret engines

383
00:16:33,199 --> 00:16:34,959
so these were a few vulnerabilities that

384
00:16:34,959 --> 00:16:37,519
we wanted to discuss today now coming on

385
00:16:37,519 --> 00:16:39,759
to the next thing the tools that can be

386
00:16:39,759 --> 00:16:41,360
used for testing

387
00:16:41,360 --> 00:16:44,320
one is worksuit and verb suit is the

388
00:16:44,320 --> 00:16:46,399
you know it's one of the most hacker

389
00:16:46,399 --> 00:16:48,079
friendly tools when it comes to dynamic

390
00:16:48,079 --> 00:16:49,040
testing

391
00:16:49,040 --> 00:16:51,759
things like intruder repeater decoder

392
00:16:51,759 --> 00:16:53,680
makes it the first choice whenever we

393
00:16:53,680 --> 00:16:55,600
want to test

394
00:16:55,600 --> 00:16:58,959
web application mobiles uh

395
00:16:58,959 --> 00:17:01,600
the second is postman postman comes into

396
00:17:01,600 --> 00:17:02,959
picture when we are working with rest

397
00:17:02,959 --> 00:17:05,199
apis just like postman there is

398
00:17:05,199 --> 00:17:07,599
something called as soap ui and soap ui

399
00:17:07,599 --> 00:17:09,199
comes into the picture when we are

400
00:17:09,199 --> 00:17:11,359
working on soap apis

401
00:17:11,359 --> 00:17:13,919
the next one is sky travel kite runner

402
00:17:13,919 --> 00:17:16,799
is a very widely used uh content

403
00:17:16,799 --> 00:17:19,520
discovery tool the other one is astra

404
00:17:19,520 --> 00:17:21,359
astra is an automated scanner you can

405
00:17:21,359 --> 00:17:23,439
quickly just run this cam to see if

406
00:17:23,439 --> 00:17:25,520
there are any issues that you can find

407
00:17:25,520 --> 00:17:27,039
quickly with this

408
00:17:27,039 --> 00:17:28,319
scanner

409
00:17:28,319 --> 00:17:30,080
the other one is arjun now arjun is

410
00:17:30,080 --> 00:17:32,080
again a very widely used tool for

411
00:17:32,080 --> 00:17:34,480
parameter discovery

412
00:17:34,480 --> 00:17:35,919
just like i mentioned previously there

413
00:17:35,919 --> 00:17:37,760
are other tools available in the market

414
00:17:37,760 --> 00:17:39,919
itself these are a few tools that i use

415
00:17:39,919 --> 00:17:42,080
when i'm working on influence

416
00:17:42,080 --> 00:17:43,280
all right

417
00:17:43,280 --> 00:17:44,240
so

418
00:17:44,240 --> 00:17:46,880
let's talk about a recent high profile

419
00:17:46,880 --> 00:17:50,080
vulnerability related to apis

420
00:17:50,080 --> 00:17:52,960
this vulnerability was found out uh in

421
00:17:52,960 --> 00:17:55,520
coinbase and what happened was

422
00:17:55,520 --> 00:17:58,080
this vulnerable api allowed unlimited

423
00:17:58,080 --> 00:18:00,720
trading of cryptocurrency it was

424
00:18:00,720 --> 00:18:03,200
categorized under broken object level

425
00:18:03,200 --> 00:18:05,760
authorization and what happened was

426
00:18:05,760 --> 00:18:07,679
it allowed the attacker to give a

427
00:18:07,679 --> 00:18:10,480
command to sell and convert bitcoin to

428
00:18:10,480 --> 00:18:14,160
usd without in fact owning a bitcoin

429
00:18:14,160 --> 00:18:16,080
so what happened was there was a

430
00:18:16,080 --> 00:18:19,200
parameter known as product id

431
00:18:19,200 --> 00:18:20,880
that was going into the request and its

432
00:18:20,880 --> 00:18:24,400
value was uh product id equal to dodge

433
00:18:24,400 --> 00:18:26,880
point to usd or ethereum to euros so

434
00:18:26,880 --> 00:18:28,720
what was happening

435
00:18:28,720 --> 00:18:30,640
what was happening was it was converting

436
00:18:30,640 --> 00:18:33,600
the value of dodge coin to euros or

437
00:18:33,600 --> 00:18:35,679
ethereum to dollars

438
00:18:35,679 --> 00:18:37,919
but what the attacker did here was he

439
00:18:37,919 --> 00:18:41,039
changed the dot dodge coin to btc and

440
00:18:41,039 --> 00:18:43,280
try to analyze the request

441
00:18:43,280 --> 00:18:44,640
to his shock

442
00:18:44,640 --> 00:18:46,480
he was he was able to make the

443
00:18:46,480 --> 00:18:48,320
transaction without in fact owning a

444
00:18:48,320 --> 00:18:50,400
bitcoin wallet the transaction took

445
00:18:50,400 --> 00:18:53,200
place from an unknown bitcoin wallet

446
00:18:53,200 --> 00:18:55,280
so he changed it

447
00:18:55,280 --> 00:18:58,559
from dodge coin to usd to btc to usd and

448
00:18:58,559 --> 00:19:00,240
the application is separated

449
00:19:00,240 --> 00:19:02,720
at the time it was reported it was uh

450
00:19:02,720 --> 00:19:04,880
considered super critical and it was

451
00:19:04,880 --> 00:19:07,679
fixed like under five to six hours of

452
00:19:07,679 --> 00:19:10,799
reporting so uh so think how critical

453
00:19:10,799 --> 00:19:13,039
the bug was back then

454
00:19:13,039 --> 00:19:13,919
all right

455
00:19:13,919 --> 00:19:15,120
so

456
00:19:15,120 --> 00:19:16,400
that was all

457
00:19:16,400 --> 00:19:18,400
before before i leave i just want to

458
00:19:18,400 --> 00:19:21,120
give a quick shout out to contra move

459
00:19:21,120 --> 00:19:23,120
ass and security knowledge framework for

460
00:19:23,120 --> 00:19:25,679
the for their amazing free content

461
00:19:25,679 --> 00:19:27,919
related to papers

462
00:19:27,919 --> 00:19:31,120
all right so that's been my time guys uh

463
00:19:31,120 --> 00:19:33,039
thank you for listening and if you have

464
00:19:33,039 --> 00:19:34,880
any questions feel free to reach out to

465
00:19:34,880 --> 00:19:38,160
me on my email and on the linkedin uh

466
00:19:38,160 --> 00:19:39,440
url sharing

467
00:19:39,440 --> 00:19:42,080
thank you guys

468
00:19:43,039 --> 00:19:44,000
awesome

469
00:19:44,000 --> 00:19:45,360
and thank you for that awesome

470
00:19:45,360 --> 00:19:48,360
presentation

