1
00:00:03,520 --> 00:00:06,700
[Music]

2
00:00:16,900 --> 00:00:20,270
[Music]

3
00:00:21,320 --> 00:00:23,610
so is this but eluded to my name is

4
00:00:23,610 --> 00:00:25,740
Jonathan Pulsifer I'm going to talk you

5
00:00:25,740 --> 00:00:28,080
a little bit about how we do what I've

6
00:00:28,080 --> 00:00:31,320
coined infrastructure security 2.0 at

7
00:00:31,320 --> 00:00:35,489
Shopify so a little bit about me I'm an

8
00:00:35,489 --> 00:00:37,170
infrastructure security engineer at

9
00:00:37,170 --> 00:00:39,710
Shopify a certified kubernetes

10
00:00:39,710 --> 00:00:41,790
administrator and I'd like to do some

11
00:00:41,790 --> 00:00:45,480
social things so please expect at least

12
00:00:45,480 --> 00:00:47,670
no less than five Twitter followers

13
00:00:47,670 --> 00:00:50,250
after this talk I was joking previously

14
00:00:50,250 --> 00:00:51,839
I was a team leader at the Canadian

15
00:00:51,839 --> 00:00:54,000
Forces Network Operations Center I was a

16
00:00:54,000 --> 00:00:55,470
network defense instructor at the

17
00:00:55,470 --> 00:00:57,030
Canadian Forces school of communications

18
00:00:57,030 --> 00:00:59,400
and electronics and I did some work for

19
00:00:59,400 --> 00:01:02,280
sands for a little bit before jumping

20
00:01:02,280 --> 00:01:09,979
ship and going to Shopify so containers

21
00:01:09,979 --> 00:01:12,659
who here knows or has heard of docker

22
00:01:12,659 --> 00:01:15,810
hands up please that's a that's a good

23
00:01:15,810 --> 00:01:18,119
portion of the audience who here runs

24
00:01:18,119 --> 00:01:22,200
docker or containers in production Hey

25
00:01:22,200 --> 00:01:24,570
look at that maybe like five ten people

26
00:01:24,570 --> 00:01:28,679
right so the cloud and these core cloud

27
00:01:28,679 --> 00:01:30,719
concepts containers being sort of one of

28
00:01:30,719 --> 00:01:34,740
those is really new to industry so

29
00:01:34,740 --> 00:01:36,350
hopefully I'm going to be able to

30
00:01:36,350 --> 00:01:38,729
demystify some of these some of these

31
00:01:38,729 --> 00:01:41,999
core cloud concepts so for those of you

32
00:01:41,999 --> 00:01:43,979
who have heard of docker and they're

33
00:01:43,979 --> 00:01:47,390
running containers in production who can

34
00:01:47,390 --> 00:01:52,490
tell me explicitly what a container is

35
00:01:52,490 --> 00:01:55,619
very few hands will will go up as this

36
00:01:55,619 --> 00:01:59,030
technology is sort of misunderstood

37
00:01:59,179 --> 00:02:01,560
firstly it's probably easier for me to

38
00:02:01,560 --> 00:02:04,429
talk about what containers are not

39
00:02:04,429 --> 00:02:07,979
containers are not first class citizens

40
00:02:07,979 --> 00:02:09,449
are first class concepts when it comes

41
00:02:09,449 --> 00:02:12,300
to UNIX and Linux operating systems they

42
00:02:12,300 --> 00:02:15,540
are not Solaris zones they are not BSD

43
00:02:15,540 --> 00:02:19,740
jails they're not virtual machines more

44
00:02:19,740 --> 00:02:23,069
importantly they are not real containers

45
00:02:23,069 --> 00:02:24,750
are real but you just said that hands

46
00:02:24,750 --> 00:02:26,850
are out there we know a docker is

47
00:02:26,850 --> 00:02:30,120
what does this actually mean what's a

48
00:02:30,120 --> 00:02:32,570
container can somebody tell me what

49
00:02:32,570 --> 00:02:35,160
containers are made up of rhetorical

50
00:02:35,160 --> 00:02:38,880
question I'm going to tell you so

51
00:02:38,880 --> 00:02:43,470
containers long story short is OS level

52
00:02:43,470 --> 00:02:46,440
virtualization containers are made up of

53
00:02:46,440 --> 00:02:49,500
a few different pieces but before we can

54
00:02:49,500 --> 00:02:51,180
talk about these pieces it's important

55
00:02:51,180 --> 00:02:54,000
to understand what makes up these

56
00:02:54,000 --> 00:02:54,990
container so you can see on the right

57
00:02:54,990 --> 00:02:57,120
hand side we have a graphic here

58
00:02:57,120 --> 00:02:59,520
detailing from from docker what a

59
00:02:59,520 --> 00:03:01,620
container is versus what a virtual

60
00:03:01,620 --> 00:03:03,180
machine is and you can see the the

61
00:03:03,180 --> 00:03:06,420
primary difference here is that the the

62
00:03:06,420 --> 00:03:08,520
virtual machines rely on something

63
00:03:08,520 --> 00:03:10,830
called the hypervisor underneath so a

64
00:03:10,830 --> 00:03:12,980
hypervisor I'm not going to get into

65
00:03:12,980 --> 00:03:15,270
hypervisor theory or any of this but

66
00:03:15,270 --> 00:03:18,120
TLDR a type 1 hypervisor would be like

67
00:03:18,120 --> 00:03:20,970
your your ESXi your vSphere your

68
00:03:20,970 --> 00:03:23,490
enterprise offerings from from vendors a

69
00:03:23,490 --> 00:03:26,340
Zen server for example this really thin

70
00:03:26,340 --> 00:03:28,260
layer of the abstraction to help you

71
00:03:28,260 --> 00:03:30,030
virtualize the underlying hardware on a

72
00:03:30,030 --> 00:03:32,520
given blade or in the case of a type 2

73
00:03:32,520 --> 00:03:34,740
hypervisor your VMware Workstation

74
00:03:34,740 --> 00:03:38,070
VMware fusion these things are type 2

75
00:03:38,070 --> 00:03:39,810
hypervisors and they really live it

76
00:03:39,810 --> 00:03:41,460
relies not with a thin layer of

77
00:03:41,460 --> 00:03:43,920
operating system with a full or the full

78
00:03:43,920 --> 00:03:45,780
stack so like what this means is that

79
00:03:45,780 --> 00:03:47,280
you're running VMware Workstation on

80
00:03:47,280 --> 00:03:48,930
your Windows computer you have

81
00:03:48,930 --> 00:03:50,520
virtualized the hardware through that

82
00:03:50,520 --> 00:03:53,010
through that entire operating system you

83
00:03:53,010 --> 00:03:55,460
know it's kernel include so with

84
00:03:55,460 --> 00:03:59,550
containers we take away that hypervisor

85
00:03:59,550 --> 00:04:01,440
and all the applications that are

86
00:04:01,440 --> 00:04:02,940
running inside of a given container are

87
00:04:02,940 --> 00:04:05,640
using the same kernel they're sharing

88
00:04:05,640 --> 00:04:07,680
the kernel of the underlying host and

89
00:04:07,680 --> 00:04:10,950
this is where we get to play with some

90
00:04:10,950 --> 00:04:14,910
really fun abstractions and really get

91
00:04:14,910 --> 00:04:16,890
to increase security posture and we're

92
00:04:16,890 --> 00:04:18,510
going to talk a little bit about how

93
00:04:18,510 --> 00:04:19,200
that works today

94
00:04:19,200 --> 00:04:21,810
so containers are made up of two

95
00:04:21,810 --> 00:04:25,770
distinct pieces essentially namespaces

96
00:04:25,770 --> 00:04:28,350
Linux namespaces and can control groups

97
00:04:28,350 --> 00:04:30,420
or RC groups and we're going to step

98
00:04:30,420 --> 00:04:33,360
through some of these namespaces and

99
00:04:33,360 --> 00:04:35,100
control groups and trying to identify

100
00:04:35,100 --> 00:04:38,249
which which threats we can then

101
00:04:38,249 --> 00:04:42,059
no mediate while we employ these so

102
00:04:42,059 --> 00:04:44,609
every time you spin a PUD container what

103
00:04:44,609 --> 00:04:47,249
you're doing if you're familiar with the

104
00:04:47,249 --> 00:04:49,229
UNIX or Linux command line tool called

105
00:04:49,229 --> 00:04:52,409
unshare we're creating this this this

106
00:04:52,409 --> 00:04:56,759
isolated what's called a namespace in in

107
00:04:56,759 --> 00:04:59,279
Linux and a namespace is really the idea

108
00:04:59,279 --> 00:05:04,649
that you that an application will think

109
00:05:04,649 --> 00:05:06,599
that they are in their own their own

110
00:05:06,599 --> 00:05:08,159
little operating system so what we're

111
00:05:08,159 --> 00:05:11,849
really doing is we are we are taking a

112
00:05:11,849 --> 00:05:15,299
global resource like like a network

113
00:05:15,299 --> 00:05:19,889
driver or your user user ID maps and

114
00:05:19,889 --> 00:05:22,319
we're making them virtualized we're

115
00:05:22,319 --> 00:05:23,759
virtualizing the operating system in

116
00:05:23,759 --> 00:05:25,409
that's the source level virtualization

117
00:05:25,409 --> 00:05:28,709
so here's a number of linux namespaces

118
00:05:28,709 --> 00:05:31,439
by which we can then isolate a process

119
00:05:31,439 --> 00:05:32,969
or a number of processes inside of a

120
00:05:32,969 --> 00:05:35,459
container so one of the easiest ones to

121
00:05:35,459 --> 00:05:38,669
understand is the user username space

122
00:05:38,669 --> 00:05:40,949
which isolates your user and group IDs

123
00:05:40,949 --> 00:05:46,259
so what does this mean if you were on a

124
00:05:46,259 --> 00:05:49,379
Linux workstation or a server and your

125
00:05:49,379 --> 00:05:50,249
UID 0

126
00:05:50,249 --> 00:05:52,799
right you are root you are god mode if

127
00:05:52,799 --> 00:05:56,039
your UID 0 inside of a container what

128
00:05:56,039 --> 00:05:57,419
actually happened when we shared when we

129
00:05:57,419 --> 00:05:59,399
broke this down into namespaces is that

130
00:05:59,399 --> 00:06:01,679
we've mapped an ephemeral user ID so

131
00:06:01,679 --> 00:06:04,319
user ID 1 2 3 4 5 is going to then be

132
00:06:04,319 --> 00:06:06,689
user root inside of the container so on

133
00:06:06,689 --> 00:06:08,579
your actual host the host operating

134
00:06:08,579 --> 00:06:09,989
system that your container is running on

135
00:06:09,989 --> 00:06:13,199
we have UID 1 2 3 4 5 is actually what's

136
00:06:13,199 --> 00:06:14,459
gonna be running the underlying process

137
00:06:14,459 --> 00:06:16,469
whereas in the container you're going to

138
00:06:16,469 --> 00:06:18,989
be assuming that your root and we can do

139
00:06:18,989 --> 00:06:20,159
this with a number of the different

140
00:06:20,159 --> 00:06:22,349
namespaces so we can really isolate what

141
00:06:22,349 --> 00:06:24,239
a process can see and that's really what

142
00:06:24,239 --> 00:06:26,999
a namespace a namespace is is sort of

143
00:06:26,999 --> 00:06:29,459
described as what can my processes are

144
00:06:29,459 --> 00:06:32,279
walk in my container see so if we can

145
00:06:32,279 --> 00:06:35,459
isolate these primitives we can also

146
00:06:35,459 --> 00:06:37,529
isolate them with control groups what

147
00:06:37,529 --> 00:06:39,959
these processes can do so this is where

148
00:06:39,959 --> 00:06:42,659
we have access to our CPU scheduler we

149
00:06:42,659 --> 00:06:44,669
have our block IO we have our process ID

150
00:06:44,669 --> 00:06:46,649
Leslie oh what speed 1 in a container is

151
00:06:46,649 --> 00:06:49,409
a whole other talk on a talk in itself

152
00:06:49,409 --> 00:06:52,020
but with control groups

153
00:06:52,020 --> 00:06:55,380
along with namespaces we can provide

154
00:06:55,380 --> 00:06:58,050
sort of pseudo level pseudo services of

155
00:06:58,050 --> 00:06:59,370
our own contacts talking about Linux but

156
00:06:59,370 --> 00:07:02,220
you provide these these isolation

157
00:07:02,220 --> 00:07:03,390
primitives around a number of

158
00:07:03,390 --> 00:07:07,650
applications these are first class

159
00:07:07,650 --> 00:07:09,540
concepts these are concepts that are

160
00:07:09,540 --> 00:07:12,510
understood and and provide direct access

161
00:07:12,510 --> 00:07:14,820
to given resources inside of your Linux

162
00:07:14,820 --> 00:07:18,150
operating system and that really is what

163
00:07:18,150 --> 00:07:20,780
makes up a container we've talked about

164
00:07:20,780 --> 00:07:24,420
docker a little bit and it's important

165
00:07:24,420 --> 00:07:28,140
for you to know that docker is as much a

166
00:07:28,140 --> 00:07:31,110
technology or capability as they are a

167
00:07:31,110 --> 00:07:33,600
vendor so the the docker container

168
00:07:33,600 --> 00:07:36,030
format is probably the most understood

169
00:07:36,030 --> 00:07:37,980
and widely used container format they

170
00:07:37,980 --> 00:07:39,540
provide you a nice little interface to

171
00:07:39,540 --> 00:07:42,210
package up your applications and deploy

172
00:07:42,210 --> 00:07:44,040
them so what we're going to do is talk

173
00:07:44,040 --> 00:07:46,620
about how we can build docker containers

174
00:07:46,620 --> 00:07:50,070
securely so the mission here is as

175
00:07:50,070 --> 00:07:53,670
Shopify moves away from the traditional

176
00:07:53,670 --> 00:07:56,310
data center model into public cloud

177
00:07:56,310 --> 00:08:00,020
these are the concepts that we have to

178
00:08:00,020 --> 00:08:03,240
be good at in order to succeed in the

179
00:08:03,240 --> 00:08:04,320
public cloud world and there are

180
00:08:04,320 --> 00:08:05,730
challenges there we're going to talk

181
00:08:05,730 --> 00:08:07,350
about a few of those a little bit later

182
00:08:07,350 --> 00:08:09,720
on but firstly we need to talk about how

183
00:08:09,720 --> 00:08:12,780
we take that shared server approach and

184
00:08:12,780 --> 00:08:15,930
really break down our applications into

185
00:08:15,930 --> 00:08:17,250
we're gonna throw some buzz words out

186
00:08:17,250 --> 00:08:19,800
there into micro services and we start

187
00:08:19,800 --> 00:08:26,100
with containers to do this so when

188
00:08:26,100 --> 00:08:27,780
you're starting off in the docker land

189
00:08:27,780 --> 00:08:30,600
you have a number of what we call base

190
00:08:30,600 --> 00:08:32,100
images that you can build your

191
00:08:32,100 --> 00:08:33,659
applications on top of and these some of

192
00:08:33,659 --> 00:08:35,309
these should be familiar to you the

193
00:08:35,309 --> 00:08:38,460
debian the thus NOS the the Ubuntu these

194
00:08:38,460 --> 00:08:41,309
are based images typically provided by

195
00:08:41,309 --> 00:08:42,960
the vendor by like canonical would

196
00:08:42,960 --> 00:08:45,600
provide Ubuntu for example a minimal a

197
00:08:45,600 --> 00:08:48,030
minimal base install of libraries and

198
00:08:48,030 --> 00:08:50,550
folders that that would give you a

199
00:08:50,550 --> 00:08:56,430
really traditional feel I guess if you

200
00:08:56,430 --> 00:08:59,010
are if you're working in industry and

201
00:08:59,010 --> 00:09:01,110
and your primary operating system on

202
00:09:01,110 --> 00:09:04,590
your shared servers is Red Hat I would

203
00:09:04,590 --> 00:09:06,720
not suggest to you that you start off

204
00:09:06,720 --> 00:09:08,400
building with you bunch of containers

205
00:09:08,400 --> 00:09:09,420
because those are not going to be

206
00:09:09,420 --> 00:09:11,040
familiar to you the file system is going

207
00:09:11,040 --> 00:09:12,150
to be later a little bit differently

208
00:09:12,150 --> 00:09:13,410
than what you're used to you'd probably

209
00:09:13,410 --> 00:09:15,720
want to start off with cen OS right

210
00:09:15,720 --> 00:09:17,070
where it's as close as close enough to

211
00:09:17,070 --> 00:09:19,950
Red Hat something to to note about this

212
00:09:19,950 --> 00:09:22,560
though is the image size typically you

213
00:09:22,560 --> 00:09:24,360
know in in security operations right

214
00:09:24,360 --> 00:09:25,770
green is good red is bad

215
00:09:25,770 --> 00:09:27,690
CentOS isn't bad in this case it's just

216
00:09:27,690 --> 00:09:29,700
the contrast in color but it just so

217
00:09:29,700 --> 00:09:31,380
happens to be the largest container of

218
00:09:31,380 --> 00:09:33,540
the of the bunch so if you start off

219
00:09:33,540 --> 00:09:35,880
building a Senate West container you're

220
00:09:35,880 --> 00:09:37,650
gonna be immediately sharing with 197

221
00:09:37,650 --> 00:09:39,870
megabytes of package dependencies and

222
00:09:39,870 --> 00:09:42,000
applications whereas if you start off

223
00:09:42,000 --> 00:09:43,500
with an Alpine you're looking at about

224
00:09:43,500 --> 00:09:45,570
four megabytes which is a huge

225
00:09:45,570 --> 00:09:47,730
difference when it comes to network

226
00:09:47,730 --> 00:09:48,990
network throughput when you start

227
00:09:48,990 --> 00:09:50,400
pushing and pulling these images it

228
00:09:50,400 --> 00:09:53,880
becomes important I would not recommend

229
00:09:53,880 --> 00:09:56,790
starting with a busy box if you're new

230
00:09:56,790 --> 00:09:58,410
to containers because you'll find that a

231
00:09:58,410 --> 00:10:00,720
lot of your binaries are not there and

232
00:10:00,720 --> 00:10:02,490
this is will give you some extra

233
00:10:02,490 --> 00:10:08,430
headaches this is probably the most

234
00:10:08,430 --> 00:10:11,490
simple docker file that I could build so

235
00:10:11,490 --> 00:10:15,450
when we build docker containers we are

236
00:10:15,450 --> 00:10:18,840
given these directives on the left hand

237
00:10:18,840 --> 00:10:22,740
side from run and entry point to run

238
00:10:22,740 --> 00:10:24,240
these commands against a docker

239
00:10:24,240 --> 00:10:26,070
container and you can see what i'm doing

240
00:10:26,070 --> 00:10:28,800
here is from alpine 3 6 we're going to

241
00:10:28,800 --> 00:10:31,440
run APK APK is the alpine package

242
00:10:31,440 --> 00:10:33,330
manager and we're gonna add the snort

243
00:10:33,330 --> 00:10:35,580
package and when we interact with this

244
00:10:35,580 --> 00:10:37,950
container we're going to interact with

245
00:10:37,950 --> 00:10:40,950
the entry point pointing to in snort so

246
00:10:40,950 --> 00:10:42,120
every time that you run this container

247
00:10:42,120 --> 00:10:44,670
of this package of dependencies and

248
00:10:44,670 --> 00:10:46,700
applications the first pid' the first

249
00:10:46,700 --> 00:10:48,060
application that we're going to

250
00:10:48,060 --> 00:10:51,840
interface with it's gonna be snort are

251
00:10:51,840 --> 00:10:54,870
we done is this is this if we just

252
00:10:54,870 --> 00:10:57,990
deployed IDs across all of our cloud is

253
00:10:57,990 --> 00:10:59,190
there infrastructure with this one

254
00:10:59,190 --> 00:11:03,780
docker file no so just because it's easy

255
00:11:03,780 --> 00:11:08,130
to install applications in docker we

256
00:11:08,130 --> 00:11:11,370
should not avoid best practice and this

257
00:11:11,370 --> 00:11:13,980
is probably the most important takeaway

258
00:11:13,980 --> 00:11:18,000
as end users to containers that I have

259
00:11:18,000 --> 00:11:18,460
for you to

260
00:11:18,460 --> 00:11:21,610
des is just because you have this new

261
00:11:21,610 --> 00:11:22,960
technology afforded to you and you say

262
00:11:22,960 --> 00:11:25,270
Oh join like my application is isolated

263
00:11:25,270 --> 00:11:27,130
due to namespaces and control groups you

264
00:11:27,130 --> 00:11:28,570
told me this right it's super secure

265
00:11:28,570 --> 00:11:31,660
wrong what we have to do is still

266
00:11:31,660 --> 00:11:33,970
perform best practice and you can see

267
00:11:33,970 --> 00:11:36,700
here the differences between what I

268
00:11:36,700 --> 00:11:38,950
would consider a bad docker file versus

269
00:11:38,950 --> 00:11:40,000
a good docker file an we're going to

270
00:11:40,000 --> 00:11:41,920
talk a little bit about this this good

271
00:11:41,920 --> 00:11:43,960
one so what you've noticed that I've

272
00:11:43,960 --> 00:11:46,530
done at the beginning is I've added my

273
00:11:46,530 --> 00:11:49,330
users and groups so that when we run our

274
00:11:49,330 --> 00:11:50,860
applications we can appropriately drop

275
00:11:50,860 --> 00:11:53,950
privileges so that we're not running as

276
00:11:53,950 --> 00:11:55,540
the root user anymore even though

277
00:11:55,540 --> 00:11:58,180
remember that it's not true brute we're

278
00:11:58,180 --> 00:11:59,800
root inside of a container which is UID

279
00:11:59,800 --> 00:12:02,820
one two three four five on the outside

280
00:12:02,820 --> 00:12:05,440
the second largest piece I mean we're at

281
00:12:05,440 --> 00:12:07,090
a security conference right security is

282
00:12:07,090 --> 00:12:07,780
important

283
00:12:07,780 --> 00:12:10,510
run apk upgrade no cache we need to make

284
00:12:10,510 --> 00:12:11,980
sure that our packages are always

285
00:12:11,980 --> 00:12:13,620
staying up to date right security

286
00:12:13,620 --> 00:12:17,080
patching is important so because of this

287
00:12:17,080 --> 00:12:19,360
you can see that the docker file has

288
00:12:19,360 --> 00:12:27,550
grown from from three lines into a few

289
00:12:27,550 --> 00:12:29,530
and this is probably the easiest example

290
00:12:29,530 --> 00:12:31,840
that I can give you of these of these

291
00:12:31,840 --> 00:12:34,090
docker files at Shopify when we build a

292
00:12:34,090 --> 00:12:36,010
large container that supports like a

293
00:12:36,010 --> 00:12:39,340
Ruby on Rails application for example it

294
00:12:39,340 --> 00:12:41,470
is not five or six lines it ends up

295
00:12:41,470 --> 00:12:44,050
being some sometimes up to a hundred to

296
00:12:44,050 --> 00:12:45,250
install all of your dependencies and

297
00:12:45,250 --> 00:12:52,060
stuff appropriately we build a lot of

298
00:12:52,060 --> 00:12:55,480
containers at Shopify when I pull the

299
00:12:55,480 --> 00:12:57,460
numbers for this talk we were building

300
00:12:57,460 --> 00:12:59,320
about six thousand containers per day

301
00:12:59,320 --> 00:13:02,620
through our automated CI process and we

302
00:13:02,620 --> 00:13:03,850
have about three hundred and thirty

303
00:13:03,850 --> 00:13:05,740
thousand images inside of our primary

304
00:13:05,740 --> 00:13:11,680
docker repository so me as part of a six

305
00:13:11,680 --> 00:13:15,670
seven six man and woman security team

306
00:13:15,670 --> 00:13:18,400
how do we then stay on top of this

307
00:13:18,400 --> 00:13:20,500
security posture with with such scale

308
00:13:20,500 --> 00:13:23,170
and this is we're going to introduce our

309
00:13:23,170 --> 00:13:26,650
builder and this is this is the name

310
00:13:26,650 --> 00:13:28,300
that we view in our builder it's called

311
00:13:28,300 --> 00:13:32,290
PIPA and PIPA is a docker in dock

312
00:13:32,290 --> 00:13:34,570
a builder that's written in golang

313
00:13:34,570 --> 00:13:36,880
that's deployed on build kite for anyone

314
00:13:36,880 --> 00:13:39,070
who speaks portuguese Peapod means kite

315
00:13:39,070 --> 00:13:41,199
in portuguese and it runs a built kite

316
00:13:41,199 --> 00:13:42,600
so that's where that name comes from

317
00:13:42,600 --> 00:13:46,660
what we can do with our builder is is a

318
00:13:46,660 --> 00:13:47,769
couple of fun things but this is where

319
00:13:47,769 --> 00:13:49,630
security automation really comes into

320
00:13:49,630 --> 00:13:55,540
play so as a developer should you be

321
00:13:55,540 --> 00:13:59,079
responsible for provisioning underlying

322
00:13:59,079 --> 00:14:02,620
infrastructure arguably now should you

323
00:14:02,620 --> 00:14:06,399
be expected to understand Linux security

324
00:14:06,399 --> 00:14:09,370
primitives like capabilities for example

325
00:14:09,370 --> 00:14:12,009
or syscalls that's that if you're gonna

326
00:14:12,009 --> 00:14:14,589
push out this application that I don't

327
00:14:14,589 --> 00:14:17,170
know checks the levels of the beer taps

328
00:14:17,170 --> 00:14:20,160
inside the cafeteria which has been done

329
00:14:20,160 --> 00:14:22,240
are you expected to know these things

330
00:14:22,240 --> 00:14:24,759
arguably no so what we can do on the

331
00:14:24,759 --> 00:14:27,160
security team is enforce these sane

332
00:14:27,160 --> 00:14:29,740
secure defaults at Build time to really

333
00:14:29,740 --> 00:14:32,889
ensure that our our containers are

334
00:14:32,889 --> 00:14:35,019
running at an appropriate what we would

335
00:14:35,019 --> 00:14:38,769
call a security posture so with PIPA it

336
00:14:38,769 --> 00:14:40,870
will take a repository and it will look

337
00:14:40,870 --> 00:14:42,279
at all the files and it will make its

338
00:14:42,279 --> 00:14:43,899
best guess as to what type of container

339
00:14:43,899 --> 00:14:45,490
that you need on the other end so if it

340
00:14:45,490 --> 00:14:47,470
sees a gem file it probably need a ruby

341
00:14:47,470 --> 00:14:49,630
container if it finds like a package

342
00:14:49,630 --> 00:14:51,220
Jason for example we need some like

343
00:14:51,220 --> 00:14:53,980
nodejs if you if you provide a docker

344
00:14:53,980 --> 00:14:55,839
file we will skip all that guessing and

345
00:14:55,839 --> 00:14:56,949
just build the docker file that you have

346
00:14:56,949 --> 00:14:58,600
provided and this is sort of automation

347
00:14:58,600 --> 00:15:00,459
that we get over here on the right-hand

348
00:15:00,459 --> 00:15:02,709
side is just the just the GUI for our

349
00:15:02,709 --> 00:15:08,889
builder but at Build time is probably

350
00:15:08,889 --> 00:15:13,060
the time where we have the most context

351
00:15:13,060 --> 00:15:16,089
into what is running or being installed

352
00:15:16,089 --> 00:15:19,149
inside of a given container and with

353
00:15:19,149 --> 00:15:21,399
this then we can audit and start

354
00:15:21,399 --> 00:15:23,290
creating these checks that will allow us

355
00:15:23,290 --> 00:15:25,720
to automate our lives away and we're

356
00:15:25,720 --> 00:15:27,339
gonna talk a little bit about those so

357
00:15:27,339 --> 00:15:28,689
what we can do at container build time

358
00:15:28,689 --> 00:15:30,819
is we can check for the presence of a

359
00:15:30,819 --> 00:15:33,759
user directive if you remembered my bad

360
00:15:33,759 --> 00:15:35,829
versus good docker file example I

361
00:15:35,829 --> 00:15:39,399
specified the user and what we can do is

362
00:15:39,399 --> 00:15:41,250
check for that to ensure that the

363
00:15:41,250 --> 00:15:43,180
container is not running his route

364
00:15:43,180 --> 00:15:45,470
because I would consider that bad

365
00:15:45,470 --> 00:15:46,640
if we can check for this a build time

366
00:15:46,640 --> 00:15:49,490
what better time to then alert the

367
00:15:49,490 --> 00:15:51,860
developer that something that they're

368
00:15:51,860 --> 00:15:54,620
doing maybe not secure we can check to

369
00:15:54,620 --> 00:15:57,080
see if this container has any vulnerable

370
00:15:57,080 --> 00:16:00,590
packages and make other Atta stations so

371
00:16:00,590 --> 00:16:04,640
acto stations are really fun so when

372
00:16:04,640 --> 00:16:07,850
we're building a container we can attest

373
00:16:07,850 --> 00:16:10,760
then that this container has been built

374
00:16:10,760 --> 00:16:13,370
by us we can attest that it does not run

375
00:16:13,370 --> 00:16:16,010
as root since we keep all of our

376
00:16:16,010 --> 00:16:18,290
configuration inside of the source

377
00:16:18,290 --> 00:16:20,840
repository for an application we can

378
00:16:20,840 --> 00:16:23,690
then audit the the kubernetes runtime we

379
00:16:23,690 --> 00:16:25,910
can check their manifest and see how is

380
00:16:25,910 --> 00:16:26,990
this container going to be deployed

381
00:16:26,990 --> 00:16:28,460
we're going to talk about an introduced

382
00:16:28,460 --> 00:16:30,200
kubernetes in a little bit but we can

383
00:16:30,200 --> 00:16:31,100
ensure that then there are no

384
00:16:31,100 --> 00:16:32,750
regressions and any runtime security

385
00:16:32,750 --> 00:16:35,690
control so we can attest this and this

386
00:16:35,690 --> 00:16:37,630
is where we introduce graph a as' and

387
00:16:37,630 --> 00:16:40,700
creedy's so Griffis

388
00:16:40,700 --> 00:16:44,960
is an open source software component

389
00:16:44,960 --> 00:16:48,260
metadata API string a bunch of buzzwords

390
00:16:48,260 --> 00:16:50,420
together and everybody understands so

391
00:16:50,420 --> 00:16:54,500
what this means is that we have this the

392
00:16:54,500 --> 00:16:56,390
specular a P I that is our central

393
00:16:56,390 --> 00:16:59,170
source for software component metadata I

394
00:16:59,170 --> 00:17:02,420
don't say container metadata because it

395
00:17:02,420 --> 00:17:03,740
is so much more than that

396
00:17:03,740 --> 00:17:06,650
but a container is just another piece of

397
00:17:06,650 --> 00:17:08,780
software that we can then generate and

398
00:17:08,780 --> 00:17:11,839
store this metadata with and it's done

399
00:17:11,839 --> 00:17:14,329
by a key so you have my registry or GC

400
00:17:14,329 --> 00:17:17,060
art at i/o or your docker hub image shut

401
00:17:17,060 --> 00:17:21,170
256 so we have this this digest of this

402
00:17:21,170 --> 00:17:22,670
container that means this is a unique

403
00:17:22,670 --> 00:17:26,390
container and then we can provide a list

404
00:17:26,390 --> 00:17:28,040
of things like what packages are

405
00:17:28,040 --> 00:17:29,600
installed and push us up to a central

406
00:17:29,600 --> 00:17:33,640
metadata server this is Griffis and then

407
00:17:33,640 --> 00:17:36,890
from that we have this tool called

408
00:17:36,890 --> 00:17:40,970
creedy's and creedy's is the governance

409
00:17:40,970 --> 00:17:43,580
engine behind Griffis it allows us to

410
00:17:43,580 --> 00:17:47,540
build a full full story of a container

411
00:17:47,540 --> 00:17:49,450
with metadata as it runs through our

412
00:17:49,450 --> 00:17:52,250
build and deploy pipelines and we can

413
00:17:52,250 --> 00:17:54,980
then enforce based on the metadata

414
00:17:54,980 --> 00:17:56,810
stored in Griffis whether or not a

415
00:17:56,810 --> 00:17:58,160
container is allowed to be deployed to

416
00:17:58,160 --> 00:17:59,149
our

417
00:17:59,149 --> 00:18:03,210
and this is really powerful because for

418
00:18:03,210 --> 00:18:06,179
once now finally we can ensure that

419
00:18:06,179 --> 00:18:08,580
every container that's run on Shopify's

420
00:18:08,580 --> 00:18:11,909
cloud infrastructure has in fact been

421
00:18:11,909 --> 00:18:14,250
built by us which is really really

422
00:18:14,250 --> 00:18:16,890
unique so as you know as an adversary

423
00:18:16,890 --> 00:18:20,370
coming into this cloud native ecosystem

424
00:18:20,370 --> 00:18:21,809
you know you find yourself on a

425
00:18:21,809 --> 00:18:24,029
kubernetes box and you get access to the

426
00:18:24,029 --> 00:18:27,210
API somehow and you know say I want to

427
00:18:27,210 --> 00:18:28,799
start a new container with my bad tools

428
00:18:28,799 --> 00:18:30,809
in it let's pull down the Kali VM or the

429
00:18:30,809 --> 00:18:33,630
Kali container right for funsies and if

430
00:18:33,630 --> 00:18:37,679
we can take that away it really reduces

431
00:18:37,679 --> 00:18:42,149
our our threat model there and saying

432
00:18:42,149 --> 00:18:44,909
that no one can spin up a container that

433
00:18:44,909 --> 00:18:46,500
can contain any arbitrary applications

434
00:18:46,500 --> 00:18:48,179
no one can pull in an untrusted

435
00:18:48,179 --> 00:18:50,600
container every container that we built

436
00:18:50,600 --> 00:18:53,639
has to be trusted because we've secured

437
00:18:53,639 --> 00:18:55,080
it during the build now that's a little

438
00:18:55,080 --> 00:18:56,460
bit scary right this talk about like

439
00:18:56,460 --> 00:18:58,950
supply chain attacks earlier and you

440
00:18:58,950 --> 00:19:00,090
know we have to be a little bit more

441
00:19:00,090 --> 00:19:01,909
prudent with our internal security

442
00:19:01,909 --> 00:19:04,230
controls to make sure that a developer

443
00:19:04,230 --> 00:19:06,149
could not inject some bad into a

444
00:19:06,149 --> 00:19:07,830
container therefore then it is trusted

445
00:19:07,830 --> 00:19:09,450
but it comes at the other end but this

446
00:19:09,450 --> 00:19:11,460
is the power of of what we can do with

447
00:19:11,460 --> 00:19:13,559
these Atta stations on the right hand

448
00:19:13,559 --> 00:19:16,139
side here this is a Jason blob

449
00:19:16,139 --> 00:19:17,850
everything is is Jason and yeah mol I

450
00:19:17,850 --> 00:19:19,500
call myself a Hamel engineer now working

451
00:19:19,500 --> 00:19:20,760
with kubernetes and you'll find out why

452
00:19:20,760 --> 00:19:23,850
soon but with this vulnerability

453
00:19:23,850 --> 00:19:25,980
information we have a vulnerable package

454
00:19:25,980 --> 00:19:28,230
TCP down TCP dump had a vulnerability in

455
00:19:28,230 --> 00:19:30,029
for and I know it's actually fixed in

456
00:19:30,029 --> 00:19:35,100
490 you can see on line 25 since we have

457
00:19:35,100 --> 00:19:36,870
this CVE information stored in graffia

458
00:19:36,870 --> 00:19:39,630
sui and we understand what packages have

459
00:19:39,630 --> 00:19:41,250
been installed on our docker containers

460
00:19:41,250 --> 00:19:43,230
at build time we can actually go through

461
00:19:43,230 --> 00:19:45,409
and and create what's called an

462
00:19:45,409 --> 00:19:48,570
occurrence of a vulnerability that's

463
00:19:48,570 --> 00:19:50,130
found in the container so we can react a

464
00:19:50,130 --> 00:19:52,649
little bit more appropriately to it so

465
00:19:52,649 --> 00:19:54,870
this really makes up a large piece of

466
00:19:54,870 --> 00:19:57,480
our container enforcement and governance

467
00:19:57,480 --> 00:19:59,639
and check out the Shopify engineering

468
00:19:59,639 --> 00:20:01,620
blog over at a technical blog on how

469
00:20:01,620 --> 00:20:04,470
this actually works and we released it

470
00:20:04,470 --> 00:20:06,179
with with Google a couple Thursday's ago

471
00:20:06,179 --> 00:20:07,529
so that's pretty cool they also have a

472
00:20:07,529 --> 00:20:11,429
blog if you want to learn more so how do

473
00:20:11,429 --> 00:20:12,310
we

474
00:20:12,310 --> 00:20:15,580
deploy containers we know how to build

475
00:20:15,580 --> 00:20:18,340
them we know what they are but deploying

476
00:20:18,340 --> 00:20:20,320
them is that is that last piece to the

477
00:20:20,320 --> 00:20:22,090
puzzle and this is where I get to

478
00:20:22,090 --> 00:20:24,310
introduce kubernetes so I'm not wearing

479
00:20:24,310 --> 00:20:26,260
my kubernetes shirt every now where am i

480
00:20:26,260 --> 00:20:27,580
this is fine shirt there's typically

481
00:20:27,580 --> 00:20:29,200
everything's on fire but we're all okay

482
00:20:29,200 --> 00:20:32,620
and I have my sword with me today though

483
00:20:32,620 --> 00:20:36,570
so kubernetes is an open-source

484
00:20:36,570 --> 00:20:40,300
enterprise grade container Orchestrator

485
00:20:40,300 --> 00:20:43,360
container scheduler it's it makes sure

486
00:20:43,360 --> 00:20:45,070
that our containers run where we want

487
00:20:45,070 --> 00:20:47,170
them to run how we want them to be run

488
00:20:47,170 --> 00:20:49,480
and and lets us do that in a declarative

489
00:20:49,480 --> 00:20:52,510
way and we're gonna talk about a little

490
00:20:52,510 --> 00:20:54,460
bit of kubernetes architecture and how

491
00:20:54,460 --> 00:20:58,150
that works so we have lots of servers at

492
00:20:58,150 --> 00:21:01,690
Shopify I think our I think our

493
00:21:01,690 --> 00:21:05,200
production is 15 15,000 CPUs or

494
00:21:05,200 --> 00:21:06,370
something like this running in the cloud

495
00:21:06,370 --> 00:21:09,070
right now today we have two data centers

496
00:21:09,070 --> 00:21:12,400
that are still very much hot active but

497
00:21:12,400 --> 00:21:14,110
we are in the move to a public cloud we

498
00:21:14,110 --> 00:21:15,430
do have a bunch of different operating

499
00:21:15,430 --> 00:21:16,840
environments but I'm going to talk about

500
00:21:16,840 --> 00:21:18,970
our new gke at Cooper Nettie's

501
00:21:18,970 --> 00:21:20,320
environment today because this is where

502
00:21:20,320 --> 00:21:22,630
all of the hype is this is where all of

503
00:21:22,630 --> 00:21:25,510
the security conformance and governance

504
00:21:25,510 --> 00:21:27,820
exists so we need to understand how this

505
00:21:27,820 --> 00:21:32,230
works so kubernetes on gke specifically

506
00:21:32,230 --> 00:21:35,010
is made up of a number of distinct

507
00:21:35,010 --> 00:21:38,650
components we have the master and then

508
00:21:38,650 --> 00:21:41,170
we have the nodes nodes are sometimes

509
00:21:41,170 --> 00:21:44,710
called workers minions slaves but we're

510
00:21:44,710 --> 00:21:46,030
gonna we're going to keep referencing

511
00:21:46,030 --> 00:21:48,160
them as nodes for these diagrams and all

512
00:21:48,160 --> 00:21:50,230
these diagrams came from the kubernetes

513
00:21:50,230 --> 00:21:52,060
basics and we're just gonna walk through

514
00:21:52,060 --> 00:21:56,440
it so this kubernetes master is teal

515
00:21:56,440 --> 00:21:58,270
they are an API server that accepts

516
00:21:58,270 --> 00:22:00,220
commands and will do things based on the

517
00:22:00,220 --> 00:22:02,730
commands that you that you send it the

518
00:22:02,730 --> 00:22:05,860
master has a few distinct components the

519
00:22:05,860 --> 00:22:08,290
API server the controller manager which

520
00:22:08,290 --> 00:22:09,430
just sits in like a loop and make sure

521
00:22:09,430 --> 00:22:10,960
that things are in a good state or the

522
00:22:10,960 --> 00:22:12,270
state that you want them to be in and

523
00:22:12,270 --> 00:22:15,340
the scheduler which will determine which

524
00:22:15,340 --> 00:22:17,110
of these nodes to put your containerized

525
00:22:17,110 --> 00:22:18,550
workloads on to based on a bunch of

526
00:22:18,550 --> 00:22:24,659
given primitives as we

527
00:22:24,659 --> 00:22:27,989
move into the abstractions made

528
00:22:27,989 --> 00:22:29,789
available to us a kubernetes we have

529
00:22:29,789 --> 00:22:30,840
something that's called the deployment

530
00:22:30,840 --> 00:22:32,970
and a deployment specification is where

531
00:22:32,970 --> 00:22:35,970
we can say hey kubernetes run my docker

532
00:22:35,970 --> 00:22:38,669
container in this way and this is sort

533
00:22:38,669 --> 00:22:40,200
of what that looks like you see that the

534
00:22:40,200 --> 00:22:42,330
deployment the the resource is actually

535
00:22:42,330 --> 00:22:44,190
held in the center which is the master

536
00:22:44,190 --> 00:22:45,690
it's held in the API server again in

537
00:22:45,690 --> 00:22:48,029
this declarative way we spit them out we

538
00:22:48,029 --> 00:22:49,830
spit them a JSON blob and it's it stores

539
00:22:49,830 --> 00:22:51,929
that net CD and reconciles against that

540
00:22:51,929 --> 00:22:54,029
and what it's actually done the

541
00:22:54,029 --> 00:22:56,429
scheduler has picked a given node to run

542
00:22:56,429 --> 00:22:58,080
this containerized application on and

543
00:22:58,080 --> 00:22:59,700
this is what it looks like and this is

544
00:22:59,700 --> 00:23:02,909
familiarizing yourself with the with

545
00:23:02,909 --> 00:23:07,080
some of the the shapes and an

546
00:23:07,080 --> 00:23:09,509
architecture here so as we drive into a

547
00:23:09,509 --> 00:23:11,429
node there are a couple key processes

548
00:23:11,429 --> 00:23:14,309
that run on each of the nodes and that's

549
00:23:14,309 --> 00:23:16,349
the the cubelet and the couplet what

550
00:23:16,349 --> 00:23:18,840
that does is that it accepts these

551
00:23:18,840 --> 00:23:21,299
commands from the API server and and and

552
00:23:21,299 --> 00:23:23,279
will do something based on that like hey

553
00:23:23,279 --> 00:23:26,190
say for example the kubernetes api

554
00:23:26,190 --> 00:23:27,899
server would say hey couplet on this

555
00:23:27,899 --> 00:23:29,879
node run this workload it says ok and it

556
00:23:29,879 --> 00:23:32,249
does the thing each node is also running

557
00:23:32,249 --> 00:23:33,960
docker there are a number of different

558
00:23:33,960 --> 00:23:36,479
container runtimes available but for for

559
00:23:36,479 --> 00:23:38,129
the sake of this talk we're just going

560
00:23:38,129 --> 00:23:42,090
to choose docker so this is this is an

561
00:23:42,090 --> 00:23:45,179
example of kubernetes pods what a great

562
00:23:45,179 --> 00:23:48,599
time to step back and remember our

563
00:23:48,599 --> 00:23:51,720
container basics and to talk about these

564
00:23:51,720 --> 00:23:54,269
namespace and control group isolation

565
00:23:54,269 --> 00:23:57,029
techniques so we have up here a bunch of

566
00:23:57,029 --> 00:24:00,299
kubernetes pods because we're doing

567
00:24:00,299 --> 00:24:02,159
shared kernel OS level virtualization

568
00:24:02,159 --> 00:24:04,789
and are using namespaces we have this

569
00:24:04,789 --> 00:24:07,710
cool technology available to us that

570
00:24:07,710 --> 00:24:09,960
lets us share namespaces so you can see

571
00:24:09,960 --> 00:24:12,809
in ten to ten for the largest of the

572
00:24:12,809 --> 00:24:15,330
pods here we have a number of volumes

573
00:24:15,330 --> 00:24:17,340
and we have a number of containerized

574
00:24:17,340 --> 00:24:19,649
applications and it's all sharing the

575
00:24:19,649 --> 00:24:22,649
same IP address of ten ten ten four so

576
00:24:22,649 --> 00:24:25,979
this is using the underlying Linux

577
00:24:25,979 --> 00:24:28,979
primitives your namespaces to run a

578
00:24:28,979 --> 00:24:31,440
number of containers in the same

579
00:24:31,440 --> 00:24:32,639
namespace that they both have the same

580
00:24:32,639 --> 00:24:34,710
IP address and in this case if you're

581
00:24:34,710 --> 00:24:36,239
familiar with docker this is where

582
00:24:36,239 --> 00:24:37,470
you're specifying the network if you do

583
00:24:37,470 --> 00:24:38,429
docker run

584
00:24:38,429 --> 00:24:40,350
tactic net and I'm one of my containers

585
00:24:40,350 --> 00:24:41,730
are talking the same Network this is

586
00:24:41,730 --> 00:24:44,789
what kubernetes is doing for us and this

587
00:24:44,789 --> 00:24:48,269
is the basic work load of kubernetes

588
00:24:48,269 --> 00:24:50,669
they're called pods and a pod is made up

589
00:24:50,669 --> 00:24:53,070
of one or more containers and one or

590
00:24:53,070 --> 00:24:55,559
more volumes underneath the same Linux

591
00:24:55,559 --> 00:24:57,779
namespace and this is what this looks

592
00:24:57,779 --> 00:25:03,179
like the power of kubernetes really

593
00:25:03,179 --> 00:25:07,200
shines with its labels and selectors so

594
00:25:07,200 --> 00:25:09,749
what we can do now is if we have a

595
00:25:09,749 --> 00:25:11,850
number of given workloads on kubernetes

596
00:25:11,850 --> 00:25:14,909
we can then set a few labels let's say

597
00:25:14,909 --> 00:25:17,789
maybe my environment is staging maybe my

598
00:25:17,789 --> 00:25:21,720
apps name is nginx in this case we have

599
00:25:21,720 --> 00:25:24,029
two different services running service a

600
00:25:24,029 --> 00:25:26,460
and service B and they're both labeled

601
00:25:26,460 --> 00:25:31,139
and we can then select those labels with

602
00:25:31,139 --> 00:25:33,450
selectors label selectors and then

603
00:25:33,450 --> 00:25:36,059
provide or do something with the result

604
00:25:36,059 --> 00:25:38,039
of that and what this means is that up

605
00:25:38,039 --> 00:25:40,169
at the very top you see this this green

606
00:25:40,169 --> 00:25:44,129
outline this is the label selector for

607
00:25:44,129 --> 00:25:46,710
app equals B so it's selecting every

608
00:25:46,710 --> 00:25:48,350
container every workload every pod

609
00:25:48,350 --> 00:25:50,789
that's running with the label B and

610
00:25:50,789 --> 00:25:55,279
because of this we can then expose them

611
00:25:55,909 --> 00:25:57,720
so we're gonna step into this a little

612
00:25:57,720 --> 00:25:59,730
bit more right we're what are containers

613
00:25:59,730 --> 00:26:02,399
oh you know here's kubernetes oh how do

614
00:26:02,399 --> 00:26:05,759
we tie it all together so here's an

615
00:26:05,759 --> 00:26:08,399
example of a really really poor docker

616
00:26:08,399 --> 00:26:11,610
file and I say poor because it's an

617
00:26:11,610 --> 00:26:14,460
anti-pattern because containers are

618
00:26:14,460 --> 00:26:16,379
amitabh 'l that is once they are built

619
00:26:16,379 --> 00:26:18,059
there's your here's your check sum of

620
00:26:18,059 --> 00:26:19,619
the filesystem you know this is this is

621
00:26:19,619 --> 00:26:26,240
it it's it's not ok to do things like

622
00:26:26,240 --> 00:26:30,960
run ssh inside of a container run sudo

623
00:26:30,960 --> 00:26:33,539
inside of a container because this is we

624
00:26:33,539 --> 00:26:34,889
don't need to do this given the

625
00:26:34,889 --> 00:26:37,559
abstractions provided to us with

626
00:26:37,559 --> 00:26:39,919
kubernetes and docker we should not be

627
00:26:39,919 --> 00:26:43,860
inviting persistence into an immutable

628
00:26:43,860 --> 00:26:47,460
cloud native infrastructure but you know

629
00:26:47,460 --> 00:26:49,950
do is do as I say don't do as I do one

630
00:26:49,950 --> 00:26:51,419
of the easiest examples for me to

631
00:26:51,419 --> 00:26:51,980
provide to you

632
00:26:51,980 --> 00:26:53,480
about these container security

633
00:26:53,480 --> 00:26:55,160
abstractions is to give you a docker

634
00:26:55,160 --> 00:26:57,440
file like this so I built a docker file

635
00:26:57,440 --> 00:26:59,900
or I built the docker container based on

636
00:26:59,900 --> 00:27:01,490
Debian stretch and what I've done is

637
00:27:01,490 --> 00:27:04,250
I've added myself a user and I've done

638
00:27:04,250 --> 00:27:06,169
my due diligence I've done my updates

639
00:27:06,169 --> 00:27:08,870
and upgrades I installed sudo and then I

640
00:27:08,870 --> 00:27:10,910
added myself very securely to the

641
00:27:10,910 --> 00:27:13,220
suitors file inside this debian

642
00:27:13,220 --> 00:27:15,860
container if you haven't figured out my

643
00:27:15,860 --> 00:27:18,200
password is in fact password and I drop

644
00:27:18,200 --> 00:27:19,460
privileges just because that's the

645
00:27:19,460 --> 00:27:21,830
prudent thing to do but I'm going to

646
00:27:21,830 --> 00:27:24,110
show you what we can do then with

647
00:27:24,110 --> 00:27:28,540
kubernetes security controls to really

648
00:27:28,540 --> 00:27:31,040
take advantage of these abstractions

649
00:27:31,040 --> 00:27:33,669
today so here's your first introduction

650
00:27:33,669 --> 00:27:37,250
to a kubernetes manifest we talked about

651
00:27:37,250 --> 00:27:40,190
kubernetes this minion versus node how

652
00:27:40,190 --> 00:27:41,750
do workloads get scheduled the nodes the

653
00:27:41,750 --> 00:27:44,450
tripods and what a pod is this is how

654
00:27:44,450 --> 00:27:47,530
you define a pod in its most simple form

655
00:27:47,530 --> 00:27:50,750
so this is why I call myself a Hamel

656
00:27:50,750 --> 00:27:52,910
engineer working inside kubernetes for

657
00:27:52,910 --> 00:27:55,370
the last year and a bit I've seen a lot

658
00:27:55,370 --> 00:27:57,049
of these manifests and most of my work

659
00:27:57,049 --> 00:28:01,010
is involved in maintaining or securing

660
00:28:01,010 --> 00:28:03,650
these manifests so this is where we say

661
00:28:03,650 --> 00:28:06,320
here's a pod it's name is pseudo its

662
00:28:06,320 --> 00:28:08,540
environmental some labels that I

663
00:28:08,540 --> 00:28:09,770
mentioned before and why they're

664
00:28:09,770 --> 00:28:12,260
important inside of this pod we're going

665
00:28:12,260 --> 00:28:14,840
to run a container and there's where we

666
00:28:14,840 --> 00:28:16,940
get the container from my docker hub and

667
00:28:16,940 --> 00:28:18,830
this is the command that we're gonna run

668
00:28:18,830 --> 00:28:21,410
against this container so we take a step

669
00:28:21,410 --> 00:28:23,320
back and see that I didn't provide any

670
00:28:23,320 --> 00:28:25,610
any entry point of this container no

671
00:28:25,610 --> 00:28:29,750
process to to to run my arguments

672
00:28:29,750 --> 00:28:32,570
against what it would do is inherit from

673
00:28:32,570 --> 00:28:34,429
the parent image so I pulled from Debi

674
00:28:34,429 --> 00:28:36,590
and stretch so it's going to use the

675
00:28:36,590 --> 00:28:38,390
entry point of Debian stretch which is

676
00:28:38,390 --> 00:28:40,400
just the shell and we're gonna tail F

677
00:28:40,400 --> 00:28:43,010
Devon all that means the container will

678
00:28:43,010 --> 00:28:45,679
stay up forever until I turn it until I

679
00:28:45,679 --> 00:28:49,580
turn it off the piece that matters the

680
00:28:49,580 --> 00:28:51,530
most is highlighted in yellow at the

681
00:28:51,530 --> 00:28:53,559
bottom and this is the security context

682
00:28:53,559 --> 00:28:56,330
the security context and kubernetes

683
00:28:56,330 --> 00:29:00,220
allows us to further explore these

684
00:29:00,220 --> 00:29:02,210
isolation primitives that I mentioned at

685
00:29:02,210 --> 00:29:04,810
the beginning of the talk and

686
00:29:04,810 --> 00:29:07,000
we're gonna talk about how they work so

687
00:29:07,000 --> 00:29:08,710
in this case allow privilege escalation

688
00:29:08,710 --> 00:29:10,540
is set to false a lot of privilege

689
00:29:10,540 --> 00:29:17,320
escalation is a is a new knob to turn in

690
00:29:17,320 --> 00:29:21,010
kubernetes 1.8 which essentially for

691
00:29:21,010 --> 00:29:22,180
those who are familiar with Linux and

692
00:29:22,180 --> 00:29:26,320
UNIX applies the no new prims allowed on

693
00:29:26,320 --> 00:29:28,870
your on your workloads so what this

694
00:29:28,870 --> 00:29:31,240
means is that setting this to false when

695
00:29:31,240 --> 00:29:33,250
Cooper do these runs runs this it will

696
00:29:33,250 --> 00:29:35,050
it will apply the known to privileges

697
00:29:35,050 --> 00:29:37,720
flag so when you try to do something

698
00:29:37,720 --> 00:29:40,510
like I don't know su do inside of your

699
00:29:40,510 --> 00:29:43,360
container you get a sad face so here's

700
00:29:43,360 --> 00:29:45,400
just an example of how we would deploy

701
00:29:45,400 --> 00:29:47,650
an application on kubernetes using this

702
00:29:47,650 --> 00:29:50,620
manifest they died just that for a

703
00:29:50,620 --> 00:29:58,720
second take a step back we have this pod

704
00:29:58,720 --> 00:30:02,350
Amal and we're going to create it

705
00:30:02,350 --> 00:30:03,730
against our kubernetes so I'm talking to

706
00:30:03,730 --> 00:30:05,290
the API server on the master says I'm

707
00:30:05,290 --> 00:30:06,430
going to create this workload do the

708
00:30:06,430 --> 00:30:09,640
thing then I made sure to get the pods

709
00:30:09,640 --> 00:30:11,050
and give me a list of all the pods that

710
00:30:11,050 --> 00:30:12,040
are running and please show me their

711
00:30:12,040 --> 00:30:13,840
labels that's what I did in the second

712
00:30:13,840 --> 00:30:15,250
command you can see that apps to do I

713
00:30:15,250 --> 00:30:19,540
have ARMA staging and then I entered the

714
00:30:19,540 --> 00:30:22,990
pod and I did I you name a just to show

715
00:30:22,990 --> 00:30:24,130
you that look there's the kernel that

716
00:30:24,130 --> 00:30:26,200
I'm running on there's you see my name

717
00:30:26,200 --> 00:30:28,000
at sudo implying that privileges are

718
00:30:28,000 --> 00:30:30,280
dropped I tried to run it and I get this

719
00:30:30,280 --> 00:30:33,040
gross error message the only reason that

720
00:30:33,040 --> 00:30:34,600
this gross error message occurs and that

721
00:30:34,600 --> 00:30:38,230
I cannot switch to UID 0 is because of

722
00:30:38,230 --> 00:30:40,030
that allow privilege escalation

723
00:30:40,030 --> 00:30:43,900
false-flag have I precluded and not

724
00:30:43,900 --> 00:30:46,270
included that that directive I would be

725
00:30:46,270 --> 00:30:47,740
able to get root inside of my container

726
00:30:47,740 --> 00:30:48,730
using the sudo command

727
00:30:48,730 --> 00:30:51,840
but this is where we start defining

728
00:30:51,840 --> 00:30:56,770
security posture in the cloud this is

729
00:30:56,770 --> 00:30:59,320
called a pod security policy a pop

730
00:30:59,320 --> 00:31:01,570
security policy in kubernetes is a

731
00:31:01,570 --> 00:31:03,220
cluster level of resource that allows us

732
00:31:03,220 --> 00:31:07,240
to define our security controls in the

733
00:31:07,240 --> 00:31:11,710
cloud and there are a lot of options

734
00:31:11,710 --> 00:31:13,780
available to us I don't need to step

735
00:31:13,780 --> 00:31:15,220
through them all hopefully a lot of them

736
00:31:15,220 --> 00:31:17,530
make sense but I will highlight the

737
00:31:17,530 --> 00:31:18,610
hosts IPC

738
00:31:18,610 --> 00:31:21,519
host network and host Pibb these are

739
00:31:21,519 --> 00:31:24,460
these these namespaces that you can

740
00:31:24,460 --> 00:31:26,860
share with the host and you have to you

741
00:31:26,860 --> 00:31:30,669
have to think that if your if your host

742
00:31:30,669 --> 00:31:33,549
your Linux blade running an arbitrary

743
00:31:33,549 --> 00:31:34,929
kernel and hosting a bunch of kubernetes

744
00:31:34,929 --> 00:31:38,500
containers all the workloads running on

745
00:31:38,500 --> 00:31:40,690
that host are using that same kernel

746
00:31:40,690 --> 00:31:44,940
right so you have to be very careful

747
00:31:44,940 --> 00:31:48,220
running any sort of multi-tenancy inside

748
00:31:48,220 --> 00:31:49,480
of your kubernetes clusters today

749
00:31:49,480 --> 00:31:52,450
because if a developer for example

750
00:31:52,450 --> 00:31:55,600
switches the host network flag to true

751
00:31:55,600 --> 00:31:57,730
and starts using the the underlying host

752
00:31:57,730 --> 00:31:59,500
network of your node I think you

753
00:31:59,500 --> 00:32:01,090
potentially open up some ports do some

754
00:32:01,090 --> 00:32:02,799
bad things do some network level attacks

755
00:32:02,799 --> 00:32:06,039
capture your traffic if we supply a pod

756
00:32:06,039 --> 00:32:08,799
security policy such as this they would

757
00:32:08,799 --> 00:32:10,090
not be able to do that and then we can

758
00:32:10,090 --> 00:32:12,580
therefore ensure the security of our

759
00:32:12,580 --> 00:32:17,049
underlying nodes we've been on the cloud

760
00:32:17,049 --> 00:32:19,750
security team playing a lot with

761
00:32:19,750 --> 00:32:26,909
capabilities over the last year or so

762
00:32:28,049 --> 00:32:33,340
so capabilities are your UID 0 on a

763
00:32:33,340 --> 00:32:34,840
Linux workstation you can do all the

764
00:32:34,840 --> 00:32:37,419
things right you are route and like

765
00:32:37,419 --> 00:32:39,909
Linux 2 6 or something like this they've

766
00:32:39,909 --> 00:32:43,960
they've created the ability to break

767
00:32:43,960 --> 00:32:45,880
down the privileges that route has

768
00:32:45,880 --> 00:32:47,679
available to it into what's called

769
00:32:47,679 --> 00:32:49,570
capabilities and then because of the

770
00:32:49,570 --> 00:32:51,519
abstractions that are provided to us

771
00:32:51,519 --> 00:32:53,860
through docker and kubernetes we can

772
00:32:53,860 --> 00:32:57,159
then drop specific capabilities it's

773
00:32:57,159 --> 00:33:00,909
important to note that docker doesn't do

774
00:33:00,909 --> 00:33:03,970
all this by default defaults are not ok

775
00:33:03,970 --> 00:33:06,370
so these are the capabilities that are

776
00:33:06,370 --> 00:33:08,110
actually allowed by default in docker

777
00:33:08,110 --> 00:33:09,309
containers so if you run a docker

778
00:33:09,309 --> 00:33:11,049
container right now and you set your

779
00:33:11,049 --> 00:33:13,450
your net to your hosts those sharing the

780
00:33:13,450 --> 00:33:16,149
the same namespace as your hosts and you

781
00:33:16,149 --> 00:33:18,159
leave the net rock heap ability on then

782
00:33:18,159 --> 00:33:19,539
that means that you could do things like

783
00:33:19,539 --> 00:33:21,549
run TCP dump and you'll start doing

784
00:33:21,549 --> 00:33:23,080
Network level attacks and these sorts of

785
00:33:23,080 --> 00:33:25,090
things there other capabilities that are

786
00:33:25,090 --> 00:33:28,210
important like override for example dock

787
00:33:28,210 --> 00:33:32,230
override is discretionary access control

788
00:33:32,230 --> 00:33:34,510
on unix and what this means is that if

789
00:33:34,510 --> 00:33:38,649
we take this capability away the root

790
00:33:38,649 --> 00:33:41,710
user in a docker container can no longer

791
00:33:41,710 --> 00:33:44,320
make arbitrary changes to the access

792
00:33:44,320 --> 00:33:46,210
control models like the route can then

793
00:33:46,210 --> 00:33:47,620
not enter your home directory for

794
00:33:47,620 --> 00:33:49,809
example if DAC override if the DAC

795
00:33:49,809 --> 00:33:51,460
override capability is taken away it has

796
00:33:51,460 --> 00:33:53,380
to then respect those those access

797
00:33:53,380 --> 00:33:56,200
controls if we drop all these

798
00:33:56,200 --> 00:33:58,000
capabilities over here on the right hand

799
00:33:58,000 --> 00:34:00,309
side your root user and your docker

800
00:34:00,309 --> 00:34:02,529
container can't even pink right they

801
00:34:02,529 --> 00:34:04,659
can't open a port they can't bind a

802
00:34:04,659 --> 00:34:07,679
service they can't interact with special

803
00:34:07,679 --> 00:34:11,320
devices or files they can't shown

804
00:34:11,320 --> 00:34:13,418
anything you know like there you've

805
00:34:13,418 --> 00:34:15,849
really hamstrung route here right so

806
00:34:15,849 --> 00:34:21,550
think about this as an adversary you're

807
00:34:21,550 --> 00:34:25,449
prodding a system you find that this

808
00:34:25,449 --> 00:34:27,070
server as you think it's a server is

809
00:34:27,070 --> 00:34:28,599
running a vulnerable version of Apache

810
00:34:28,599 --> 00:34:33,460
for funsies and you do your Metasploit

811
00:34:33,460 --> 00:34:35,530
wizardry and you craft an exploit any

812
00:34:35,530 --> 00:34:37,179
and you bust into that container and you

813
00:34:37,179 --> 00:34:40,869
and you get a shell and your user Apache

814
00:34:40,869 --> 00:34:43,020
or WW on this box

815
00:34:43,020 --> 00:34:47,079
you then have to somehow escalate

816
00:34:47,079 --> 00:34:48,550
privileges to root right to maintain

817
00:34:48,550 --> 00:34:53,230
persistence just say that you could do

818
00:34:53,230 --> 00:34:54,460
that just say that you could escalate

819
00:34:54,460 --> 00:34:56,199
privileges from root inside of this host

820
00:34:56,199 --> 00:34:59,680
or - brute and side of this host but

821
00:34:59,680 --> 00:35:00,520
then you realize that you're in a

822
00:35:00,520 --> 00:35:02,849
container running on kubernetes

823
00:35:02,849 --> 00:35:05,200
that has all these capabilities taken

824
00:35:05,200 --> 00:35:09,339
away for it what can you do right as an

825
00:35:09,339 --> 00:35:11,920
adversary if we're if we're running with

826
00:35:11,920 --> 00:35:13,990
read-only root filesystem true I mean

827
00:35:13,990 --> 00:35:16,420
then you can't even download your tools

828
00:35:16,420 --> 00:35:18,430
into the temporary directory right if

829
00:35:18,430 --> 00:35:21,280
you can't open a socket if you can't do

830
00:35:21,280 --> 00:35:22,960
anything that you'd expect that you

831
00:35:22,960 --> 00:35:26,140
could do as an adversary kind of Sol

832
00:35:26,140 --> 00:35:29,020
right I mean in in this case you can't

833
00:35:29,020 --> 00:35:30,760
do much so you just leave and you know

834
00:35:30,760 --> 00:35:33,960
in in the case of docker and kubernetes

835
00:35:33,960 --> 00:35:36,040
maintaining persistence is very hard

836
00:35:36,040 --> 00:35:38,890
because nodes have problems nodes go

837
00:35:38,890 --> 00:35:40,270
down coober neighs reschedules the

838
00:35:40,270 --> 00:35:44,680
workload and persistence is

839
00:35:44,680 --> 00:35:46,850
sort of handled already by kubernetes

840
00:35:46,850 --> 00:35:48,520
what we can do is actually introduce

841
00:35:48,520 --> 00:35:51,560
other ways of mitigating this risk like

842
00:35:51,560 --> 00:35:54,110
if anyone has heard of chaos engineering

843
00:35:54,110 --> 00:35:55,820
from Netflix this is something that we

844
00:35:55,820 --> 00:35:58,490
do also at Shopify where that we will

845
00:35:58,490 --> 00:35:59,960
take a container that has been up say

846
00:35:59,960 --> 00:36:02,150
longer than a day and will kill it

847
00:36:02,150 --> 00:36:05,690
why reasons right it's to maintain it's

848
00:36:05,690 --> 00:36:07,220
to get rid of that that threat of

849
00:36:07,220 --> 00:36:09,680
persistence right if if an adversary has

850
00:36:09,680 --> 00:36:11,030
maintained persistence on a docker

851
00:36:11,030 --> 00:36:12,890
container if we kill all of our

852
00:36:12,890 --> 00:36:14,270
containers every day then we don't

853
00:36:14,270 --> 00:36:15,620
really have to worry about that every

854
00:36:15,620 --> 00:36:17,930
day is sort of arbitrary right but you

855
00:36:17,930 --> 00:36:20,630
get the point we can do this with not

856
00:36:20,630 --> 00:36:22,370
only containers but their underlying

857
00:36:22,370 --> 00:36:24,350
nodes as well because we're on the cloud

858
00:36:24,350 --> 00:36:25,790
we have these things called

859
00:36:25,790 --> 00:36:27,920
managed instance groups that will make

860
00:36:27,920 --> 00:36:30,080
sure that I say if you have five servers

861
00:36:30,080 --> 00:36:31,610
of the same likeness if you delete one

862
00:36:31,610 --> 00:36:32,870
one goes down it'll bring it back up

863
00:36:32,870 --> 00:36:35,470
right so this is this is the kind of

864
00:36:35,470 --> 00:36:38,660
these engineering wins really reduce

865
00:36:38,660 --> 00:36:40,880
overhead and allow us to really unlock

866
00:36:40,880 --> 00:36:43,670
our velocity and and solve problems in a

867
00:36:43,670 --> 00:36:46,250
different way and using methods like

868
00:36:46,250 --> 00:36:49,090
this and some some chaos engineering

869
00:36:49,090 --> 00:36:52,520
really affords us some some big wins

870
00:36:52,520 --> 00:36:57,650
here aside from all of this right we've

871
00:36:57,650 --> 00:36:59,720
taken away the capabilities from the

872
00:36:59,720 --> 00:37:03,230
root user we've we've taken care of the

873
00:37:03,230 --> 00:37:05,960
persistence aspect what else then can we

874
00:37:05,960 --> 00:37:08,960
do well we can still use some Linux

875
00:37:08,960 --> 00:37:10,400
security modules that are built into the

876
00:37:10,400 --> 00:37:13,460
kernel to help us further restrict the

877
00:37:13,460 --> 00:37:15,320
operations that can be done instead of a

878
00:37:15,320 --> 00:37:17,240
container and this is an example of an

879
00:37:17,240 --> 00:37:19,820
app armour policy and we have we're

880
00:37:19,820 --> 00:37:21,770
running a primer on all of our nodes in

881
00:37:21,770 --> 00:37:23,690
the cloud today and this is an example

882
00:37:23,690 --> 00:37:26,330
policy that will deny all all file

883
00:37:26,330 --> 00:37:28,940
rights so you couldn't write to any

884
00:37:28,940 --> 00:37:30,950
files even if you wanted to and this

885
00:37:30,950 --> 00:37:32,000
combined with the read-only root

886
00:37:32,000 --> 00:37:34,490
filesystem you know there's we have

887
00:37:34,490 --> 00:37:37,040
great trust that nobody can do bad

888
00:37:37,040 --> 00:37:39,920
things inside of our containers and what

889
00:37:39,920 --> 00:37:41,330
you would do here when you have this

890
00:37:41,330 --> 00:37:44,240
policy is you would apply it in the same

891
00:37:44,240 --> 00:37:45,920
fashion using a kubernetes manifest as

892
00:37:45,920 --> 00:37:48,200
you see here today so we have an

893
00:37:48,200 --> 00:37:49,520
annotation it's a little bit different

894
00:37:49,520 --> 00:37:51,530
than a label ever really go into it but

895
00:37:51,530 --> 00:37:53,180
it says please apply this a primer

896
00:37:53,180 --> 00:37:55,430
policy to the container name sleeper and

897
00:37:55,430 --> 00:37:58,040
the container name sleeper is just

898
00:37:58,040 --> 00:37:59,510
busybox container that's gonna sleep for

899
00:37:59,510 --> 00:38:01,760
an hour then die they're just proving an

900
00:38:01,760 --> 00:38:04,580
example that we can take this a primer

901
00:38:04,580 --> 00:38:09,170
policy and apply to container further to

902
00:38:09,170 --> 00:38:11,150
this we have second bore secure

903
00:38:11,150 --> 00:38:12,860
computing mode it's the idea that you

904
00:38:12,860 --> 00:38:16,220
can take an application and it will it

905
00:38:16,220 --> 00:38:19,190
will enter this secure state and it

906
00:38:19,190 --> 00:38:21,440
won't be able to make any any syscalls

907
00:38:21,440 --> 00:38:22,850
less a few that are that have been

908
00:38:22,850 --> 00:38:24,290
whitelisted against already open file

909
00:38:24,290 --> 00:38:27,800
descriptors TLDR we can take away sis

910
00:38:27,800 --> 00:38:30,290
calls from applications to so along with

911
00:38:30,290 --> 00:38:32,750
like application level a primer stuff we

912
00:38:32,750 --> 00:38:34,910
can take away of the system calls that

913
00:38:34,910 --> 00:38:37,369
this container can make it's important

914
00:38:37,369 --> 00:38:41,690
to note that the default kubernetes

915
00:38:41,690 --> 00:38:43,700
runtime for a sec comm is actually

916
00:38:43,700 --> 00:38:45,050
unconfined so we're not actually

917
00:38:45,050 --> 00:38:47,150
restricting any sis calls inside of

918
00:38:47,150 --> 00:38:48,980
kubernetes workloads by default unless

919
00:38:48,980 --> 00:38:51,080
we do something like this this is a very

920
00:38:51,080 --> 00:38:52,280
short example you know brevity is

921
00:38:52,280 --> 00:38:54,890
important for slides like this and in

922
00:38:54,890 --> 00:38:56,750
this case we're taking away the ability

923
00:38:56,750 --> 00:38:58,130
to get the current working directory and

924
00:38:58,130 --> 00:39:01,400
schmod so inside of a container if you

925
00:39:01,400 --> 00:39:03,290
can't Chum you can't schmod you can't

926
00:39:03,290 --> 00:39:04,790
access directories that you're not

927
00:39:04,790 --> 00:39:06,980
allowed to you know you can't you can't

928
00:39:06,980 --> 00:39:08,780
write to the file system you can't open

929
00:39:08,780 --> 00:39:10,430
a socket you know these sorts of things

930
00:39:10,430 --> 00:39:13,369
you kind of get the idea that the

931
00:39:13,369 --> 00:39:19,580
posture is actually pretty good in Aleks

932
00:39:19,580 --> 00:39:21,200
Arendt's presentation this morning he

933
00:39:21,200 --> 00:39:24,380
made a little reference to our MRF slash

934
00:39:24,380 --> 00:39:27,560
on the file system they delete all the

935
00:39:27,560 --> 00:39:33,250
things if if we didn't have containers

936
00:39:33,250 --> 00:39:36,350
we would have to consider this but

937
00:39:36,350 --> 00:39:39,080
because we have containers now we don't

938
00:39:39,080 --> 00:39:41,780
and because containers are immutable if

939
00:39:41,780 --> 00:39:44,450
we can provide say a health check to

940
00:39:44,450 --> 00:39:46,460
make sure that a given file is present

941
00:39:46,460 --> 00:39:48,740
on a container or the container is

942
00:39:48,740 --> 00:39:50,150
responding to pings or something

943
00:39:50,150 --> 00:39:51,950
what kubernetes would do if i went in

944
00:39:51,950 --> 00:39:53,300
there and fat-finger deleted everything

945
00:39:53,300 --> 00:39:55,850
on the container file system it would

946
00:39:55,850 --> 00:39:57,260
then kubernetes would then recognize

947
00:39:57,260 --> 00:39:59,690
this and create a new container with the

948
00:39:59,690 --> 00:40:01,880
same file system as before so we don't

949
00:40:01,880 --> 00:40:03,770
have to worry about these problems given

950
00:40:03,770 --> 00:40:05,420
read-only root filesystem

951
00:40:05,420 --> 00:40:07,700
I can't even our Amaris laugh I wanted

952
00:40:07,700 --> 00:40:09,500
to write so this is this is pretty cool

953
00:40:09,500 --> 00:40:10,710
this is where the winds are coming

954
00:40:10,710 --> 00:40:14,550
and this is how you would apply the same

955
00:40:14,550 --> 00:40:17,040
second profile to another running

956
00:40:17,040 --> 00:40:21,300
container you see I'm running this

957
00:40:21,300 --> 00:40:23,070
against a container named persistence

958
00:40:23,070 --> 00:40:24,630
and persistence is running tail left

959
00:40:24,630 --> 00:40:29,450
ethanol it's important that a container

960
00:40:29,450 --> 00:40:36,290
stays up and if you don't provide a

961
00:40:36,290 --> 00:40:38,700
directive or some arguments to then

962
00:40:38,700 --> 00:40:40,500
ensure they've container stays up either

963
00:40:40,500 --> 00:40:42,720
with teh left f null or preferably some

964
00:40:42,720 --> 00:40:44,550
sort of foreground workload like an

965
00:40:44,550 --> 00:40:46,110
engine ax or a rail server or something

966
00:40:46,110 --> 00:40:49,200
like this if the if the applicant

967
00:40:49,200 --> 00:40:50,460
underlying application exits your

968
00:40:50,460 --> 00:40:51,930
container will also exit enter this loop

969
00:40:51,930 --> 00:40:53,610
and it's a it's a bad thing and this is

970
00:40:53,610 --> 00:41:00,660
fine so what Shopify has grown a lot in

971
00:41:00,660 --> 00:41:04,320
the last number of years I joined in

972
00:41:04,320 --> 00:41:08,670
January 2016 after I left the army and I

973
00:41:08,670 --> 00:41:13,050
think 70 70 to 73 percent for the entire

974
00:41:13,050 --> 00:41:15,840
company has since joined after me a

975
00:41:15,840 --> 00:41:18,090
member of a six or seven band security

976
00:41:18,090 --> 00:41:20,400
team or sorry a person security team we

977
00:41:20,400 --> 00:41:22,920
have two rock star women on the team now

978
00:41:22,920 --> 00:41:28,380
which is awesome so what so what about

979
00:41:28,380 --> 00:41:29,190
containers

980
00:41:29,190 --> 00:41:34,380
what is this cloud hype all about you

981
00:41:34,380 --> 00:41:37,370
have to take a step back and realize

982
00:41:37,370 --> 00:41:40,710
what you have to be good at to run a

983
00:41:40,710 --> 00:41:41,570
business

984
00:41:41,570 --> 00:41:45,510
so because Shopify is over 500 thousand

985
00:41:45,510 --> 00:41:46,890
merchants and we do a lot of

986
00:41:46,890 --> 00:41:48,630
transactions a lot of money flows

987
00:41:48,630 --> 00:41:51,480
through should we be good at securing

988
00:41:51,480 --> 00:41:55,410
your infrastructure yes right what would

989
00:41:55,410 --> 00:41:56,670
anybody then trust us

990
00:41:56,670 --> 00:41:57,960
to be able to handle their credit card

991
00:41:57,960 --> 00:41:59,760
information if we were not good at

992
00:41:59,760 --> 00:42:04,190
security no they would not trust us I

993
00:42:04,310 --> 00:42:07,010
would consider that a core competency of

994
00:42:07,010 --> 00:42:09,840
Shopify being good at securing

995
00:42:09,840 --> 00:42:11,490
infrastructure being good at securing

996
00:42:11,490 --> 00:42:16,050
applications can the same be said about

997
00:42:16,050 --> 00:42:19,620
running a data center is running a data

998
00:42:19,620 --> 00:42:23,220
center a core competency at Shopify

999
00:42:23,220 --> 00:42:25,170
should it be

1000
00:42:25,170 --> 00:42:29,950
arguably no as we move to the public

1001
00:42:29,950 --> 00:42:34,270
cloud it's it's implied that we found

1002
00:42:34,270 --> 00:42:36,790
somebody else who's better at running

1003
00:42:36,790 --> 00:42:40,599
data centers than we are because of this

1004
00:42:40,599 --> 00:42:42,880
we can take advantage of their

1005
00:42:42,880 --> 00:42:46,359
engineering and their products and allow

1006
00:42:46,359 --> 00:42:50,400
ourselves a little bit more freedom to

1007
00:42:50,400 --> 00:42:54,070
develop these new technologies and and

1008
00:42:54,070 --> 00:42:57,490
new ways of solving security problems in

1009
00:42:57,490 --> 00:43:01,210
the cloud and this is the idea that I

1010
00:43:01,210 --> 00:43:02,560
want to that I want to pitch for you

1011
00:43:02,560 --> 00:43:09,460
today that containers are not new

1012
00:43:09,460 --> 00:43:12,130
they've been around see groups control

1013
00:43:12,130 --> 00:43:13,320
groups have been in the kernel since

1014
00:43:13,320 --> 00:43:16,390
2006 I think a couple Google engineers

1015
00:43:16,390 --> 00:43:18,130
put the control groups in there which is

1016
00:43:18,130 --> 00:43:20,800
super cool containers alexei for example

1017
00:43:20,800 --> 00:43:22,780
it has been around for years and and

1018
00:43:22,780 --> 00:43:25,869
docker is not unlike alexei but because

1019
00:43:25,869 --> 00:43:28,450
of these it's like it's like a paradigm

1020
00:43:28,450 --> 00:43:29,740
shift and computing again right the

1021
00:43:29,740 --> 00:43:31,570
virtualization was a thing everyone said

1022
00:43:31,570 --> 00:43:33,160
oh man you run to the shared servers

1023
00:43:33,160 --> 00:43:34,420
let's put everything virtualized and

1024
00:43:34,420 --> 00:43:35,500
it's gonna be awesome we have this

1025
00:43:35,500 --> 00:43:37,720
isolation turns out like it's pretty

1026
00:43:37,720 --> 00:43:39,760
blody right and it's almost like your

1027
00:43:39,760 --> 00:43:41,589
regression to OS level virtualization I

1028
00:43:41,589 --> 00:43:45,040
find but but leveraging these

1029
00:43:45,040 --> 00:43:46,780
abstractions really allows us allows us

1030
00:43:46,780 --> 00:43:48,540
to solve problems in a different way and

1031
00:43:48,540 --> 00:43:53,140
and this is what I'm pitching so here's

1032
00:43:53,140 --> 00:43:53,680
an idea

1033
00:43:53,680 --> 00:43:57,810
of the cloud platform at Shopify we have

1034
00:43:57,810 --> 00:44:00,910
a service which you interact with called

1035
00:44:00,910 --> 00:44:03,099
services DB which you say here's my repo

1036
00:44:03,099 --> 00:44:05,020
and this contains all of my source code

1037
00:44:05,020 --> 00:44:07,599
for my given service and we say the next

1038
00:44:07,599 --> 00:44:09,550
next next you get an automated pull

1039
00:44:09,550 --> 00:44:11,200
request into your repository that says

1040
00:44:11,200 --> 00:44:12,700
hey you want to join the cloud here are

1041
00:44:12,700 --> 00:44:14,440
your kubernetes manifests that allow you

1042
00:44:14,440 --> 00:44:15,970
to run your workloads on our servers

1043
00:44:15,970 --> 00:44:18,390
which is awesome and they contain the

1044
00:44:18,390 --> 00:44:20,770
the capability drops the security

1045
00:44:20,770 --> 00:44:22,270
context stuff that we all saw a little

1046
00:44:22,270 --> 00:44:25,330
bit a little bit earlier we do we build

1047
00:44:25,330 --> 00:44:27,310
the container with our builder named P

1048
00:44:27,310 --> 00:44:28,540
Posse up at the very top there's a

1049
00:44:28,540 --> 00:44:31,540
little build kite and docker we store

1050
00:44:31,540 --> 00:44:34,150
that in our container registry on Google

1051
00:44:34,150 --> 00:44:36,490
and when we deploy we have an open

1052
00:44:36,490 --> 00:44:38,170
source deployment tool called ship it

1053
00:44:38,170 --> 00:44:42,640
and it's just like Shopify we're big

1054
00:44:42,640 --> 00:44:45,069
Ruby shop right Shopify the core

1055
00:44:45,069 --> 00:44:48,130
application is Ruby on Rails so and we

1056
00:44:48,130 --> 00:44:51,099
like we've gotten into the habit of

1057
00:44:51,099 --> 00:44:52,960
wrapping everything in Ruby because

1058
00:44:52,960 --> 00:44:57,640
reasons so cube ctlr cube kubernetes

1059
00:44:57,640 --> 00:44:59,980
deploy is a ruby wrapper for cube CTL

1060
00:44:59,980 --> 00:45:02,500
that gives us a lot of automation winds

1061
00:45:02,500 --> 00:45:04,390
and prettiness sort of deploying

1062
00:45:04,390 --> 00:45:06,250
applications to Cooper Nettie's clear

1063
00:45:06,250 --> 00:45:08,410
pass/fail results doom detection

1064
00:45:08,410 --> 00:45:10,480
exposing of the correct logs so we've

1065
00:45:10,480 --> 00:45:13,210
really tried to do is and that's the

1066
00:45:13,210 --> 00:45:14,319
mission of Production Engineering at

1067
00:45:14,319 --> 00:45:19,269
Shopify to provide resilient scalable

1068
00:45:19,269 --> 00:45:21,309
secure infrastructure for developers to

1069
00:45:21,309 --> 00:45:22,630
deploy their applications to and this is

1070
00:45:22,630 --> 00:45:24,309
what the this is what it all comes down

1071
00:45:24,309 --> 00:45:26,799
to so after we deploy to kubernetes we

1072
00:45:26,799 --> 00:45:29,920
have some some other automation the

1073
00:45:29,920 --> 00:45:32,140
kicks in let me talk to some other GCP

1074
00:45:32,140 --> 00:45:35,140
services this is a whole nother talk in

1075
00:45:35,140 --> 00:45:37,119
itself if anyone's going to sector next

1076
00:45:37,119 --> 00:45:38,410
week I'm actually giving that talk

1077
00:45:38,410 --> 00:45:40,839
they're giving it also a cube con in

1078
00:45:40,839 --> 00:45:42,789
December so if you want to catch that

1079
00:45:42,789 --> 00:45:45,220
both the cloud platform more automation

1080
00:45:45,220 --> 00:45:50,549
that's that's coming up but that's it

1081
00:45:50,549 --> 00:45:53,290
welcome any questions Thanks

1082
00:45:53,290 --> 00:45:56,750
[Music]

