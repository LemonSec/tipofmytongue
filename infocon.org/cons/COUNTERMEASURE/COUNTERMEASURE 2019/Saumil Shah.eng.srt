1
00:00:00,230 --> 00:00:02,299
[Music]

2
00:00:05,810 --> 00:00:08,550
I've been working on rmx for a few years

3
00:00:08,550 --> 00:00:11,280
now this talk is all about what it is

4
00:00:11,280 --> 00:00:13,950
what my intentions were and what I

5
00:00:13,950 --> 00:00:16,289
intend to do with it in the future

6
00:00:16,289 --> 00:00:18,619
my name is Sami I have been

7
00:00:18,619 --> 00:00:20,850
fantastically introduced like never

8
00:00:20,850 --> 00:00:22,710
before so I'm going to skip this one

9
00:00:22,710 --> 00:00:26,789
and let's just get on to what our mix is

10
00:00:26,789 --> 00:00:29,429
I have been playing around with embedded

11
00:00:29,429 --> 00:00:31,759
devices for a while and I've also been

12
00:00:31,759 --> 00:00:34,530
teaching offensive security explorer

13
00:00:34,530 --> 00:00:37,500
development switched over from x86 to

14
00:00:37,500 --> 00:00:39,390
ARM based systems because I needed to

15
00:00:39,390 --> 00:00:41,790
learn ARM based systems and what better

16
00:00:41,790 --> 00:00:43,440
way to learn than forcing yourself to

17
00:00:43,440 --> 00:00:46,800
teach it soon discovered that it's not

18
00:00:46,800 --> 00:00:49,469
very easy to put together a class which

19
00:00:49,469 --> 00:00:52,320
skills when there's quite a few students

20
00:00:52,320 --> 00:00:54,030
and everybody needs their own test

21
00:00:54,030 --> 00:00:57,239
system cs20 raspberry PI's is kind of

22
00:00:57,239 --> 00:01:00,059
okay but not very optimal and a

23
00:01:00,059 --> 00:01:01,230
Raspberry Pi is not really

24
00:01:01,230 --> 00:01:03,300
representative of a typical IOT device

25
00:01:03,300 --> 00:01:06,659
so my question was how do i virtualize

26
00:01:06,659 --> 00:01:08,610
an IOT device that's what the whole

27
00:01:08,610 --> 00:01:11,729
thought process started when are you

28
00:01:11,729 --> 00:01:13,590
thinking about virtualizing anything

29
00:01:13,590 --> 00:01:15,659
other than x86 you always think about

30
00:01:15,659 --> 00:01:18,840
QEMU so everybody starts with qemu and

31
00:01:18,840 --> 00:01:21,570
then you get all excited because QAM you

32
00:01:21,570 --> 00:01:23,490
couldn't do anything and then you read

33
00:01:23,490 --> 00:01:25,110
the documentation and you start this

34
00:01:25,110 --> 00:01:28,159
painful journey of suffering and

35
00:01:28,159 --> 00:01:30,049
excruciating

36
00:01:30,049 --> 00:01:32,070
intricacies with with command-line

37
00:01:32,070 --> 00:01:33,060
options and

38
00:01:33,060 --> 00:01:35,549
config files until you know a lot of

39
00:01:35,549 --> 00:01:37,259
time despair sets in and you just give

40
00:01:37,259 --> 00:01:39,990
it up but I've been despairing over this

41
00:01:39,990 --> 00:01:42,479
for almost four years and what I have

42
00:01:42,479 --> 00:01:47,070
now is something around qemu which I now

43
00:01:47,070 --> 00:01:49,439
call as an arm firmware emulation

44
00:01:49,439 --> 00:01:52,049
framework the word framework is very

45
00:01:52,049 --> 00:01:53,939
carefully chosen because frameworks

46
00:01:53,939 --> 00:01:57,960
never get finished but it is released

47
00:01:57,960 --> 00:02:00,750
the framework is out there already and I

48
00:02:00,750 --> 00:02:02,600
very much intend to keep it going until

49
00:02:02,600 --> 00:02:06,060
it either graduates or something else

50
00:02:06,060 --> 00:02:08,128
happens to it I don't know the ultimate

51
00:02:08,128 --> 00:02:12,510
goal was to create an IOT VM so that's

52
00:02:12,510 --> 00:02:13,590
my goal

53
00:02:13,590 --> 00:02:16,709
I'm kind of not there yet but what we

54
00:02:16,709 --> 00:02:19,500
have is something very close as close as

55
00:02:19,500 --> 00:02:23,569
you get to a device virtual machine and

56
00:02:23,569 --> 00:02:26,670
why why do we new why do we need to do

57
00:02:26,670 --> 00:02:28,350
this like why don't we work on real

58
00:02:28,350 --> 00:02:30,569
devices well sometimes the real device

59
00:02:30,569 --> 00:02:33,569
is hard to get if it's like a blood

60
00:02:33,569 --> 00:02:35,760
transfusion system you know gonna be

61
00:02:35,760 --> 00:02:37,770
able to play with those by buying it off

62
00:02:37,770 --> 00:02:41,730
fries or wherever you can and and it's

63
00:02:41,730 --> 00:02:44,610
just like how many of you of these can

64
00:02:44,610 --> 00:02:47,280
you have if you will get bricked you

65
00:02:47,280 --> 00:02:49,410
need to have like a large lab supply of

66
00:02:49,410 --> 00:02:52,790
devices so for most common tasks

67
00:02:52,790 --> 00:02:55,950
virtualization is fairly convenient lets

68
00:02:55,950 --> 00:02:58,709
you do very good runtime analysis static

69
00:02:58,709 --> 00:03:00,330
and dynamic stuff you can reverse

70
00:03:00,330 --> 00:03:02,700
engineer it load your own tools on it

71
00:03:02,700 --> 00:03:05,550
fuzzy exploits and now I'm told it's

72
00:03:05,550 --> 00:03:07,590
also very good for running CT apps on

73
00:03:07,590 --> 00:03:09,360
devices actually a few of them are

74
00:03:09,360 --> 00:03:12,830
starting to use our mix force ETFs and

75
00:03:12,830 --> 00:03:15,989
what I gained out of this was like some

76
00:03:15,989 --> 00:03:18,720
fantastic insight on embedded hardware

77
00:03:18,720 --> 00:03:20,880
by trying to emulate it you have to

78
00:03:20,880 --> 00:03:24,900
learn it yourself so I'm going to give

79
00:03:24,900 --> 00:03:27,060
you a demo of our mix but I'm just gonna

80
00:03:27,060 --> 00:03:29,970
first give you a tour of the system what

81
00:03:29,970 --> 00:03:32,340
it does and then we'll do is we'll do

82
00:03:32,340 --> 00:03:34,380
some demos and in the talk with question

83
00:03:34,380 --> 00:03:37,829
and answers so our max is released as

84
00:03:37,829 --> 00:03:39,570
source on github

85
00:03:39,570 --> 00:03:41,970
and I also created a preview virtual

86
00:03:41,970 --> 00:03:43,500
machine which you can download and play

87
00:03:43,500 --> 00:03:46,290
look something like this when you start

88
00:03:46,290 --> 00:03:49,769
up our mix you get a nice menu every

89
00:03:49,769 --> 00:03:52,859
device sets emulated appears as a menu

90
00:03:52,859 --> 00:03:55,850
item you can add your own devices

91
00:03:55,850 --> 00:03:58,049
provided you have the firmware for it

92
00:03:58,049 --> 00:03:59,519
you have the kernel for it you have the

93
00:03:59,519 --> 00:04:02,310
config settings for it and I'll take you

94
00:04:02,310 --> 00:04:04,850
to a tour of this but before we get into

95
00:04:04,850 --> 00:04:07,410
understanding how each of these devices

96
00:04:07,410 --> 00:04:10,320
works let's first look inside what a

97
00:04:10,320 --> 00:04:14,760
device is it's typically any connected

98
00:04:14,760 --> 00:04:18,510
system internally it's quite similar to

99
00:04:18,510 --> 00:04:20,220
what you're used to in the desktop

100
00:04:20,220 --> 00:04:22,320
computing environment but slightly

101
00:04:22,320 --> 00:04:24,469
different

102
00:04:25,260 --> 00:04:26,970
you of course have your native CPU and

103
00:04:26,970 --> 00:04:28,800
hardware is all implemented as a system

104
00:04:28,800 --> 00:04:33,570
on chip the file system kernel all these

105
00:04:33,570 --> 00:04:35,610
things live in firmware they don't live

106
00:04:35,610 --> 00:04:38,660
on spinning disk and then you have your

107
00:04:38,660 --> 00:04:41,730
userland processes system services

108
00:04:41,730 --> 00:04:45,030
custom applications exposes a user

109
00:04:45,030 --> 00:04:48,690
interface and whatever functionality it

110
00:04:48,690 --> 00:04:50,250
provides this is typically how

111
00:04:50,250 --> 00:04:54,090
everything looks like there are several

112
00:04:54,090 --> 00:04:56,400
little differences between a desktop

113
00:04:56,400 --> 00:04:59,760
environment or a or block based

114
00:04:59,760 --> 00:05:03,030
computing environment and an IOT device

115
00:05:03,030 --> 00:05:07,170
in the sense that there's no persistent

116
00:05:07,170 --> 00:05:09,240
storage as you might find on a typical

117
00:05:09,240 --> 00:05:11,640
disk you can read and write to a disk

118
00:05:11,640 --> 00:05:13,920
but here on devices everything is in

119
00:05:13,920 --> 00:05:16,590
flash memory more or less it's read or

120
00:05:16,590 --> 00:05:19,530
flash you can like write individual

121
00:05:19,530 --> 00:05:23,340
stuff all your persistence typically

122
00:05:23,340 --> 00:05:24,720
happens through what's called

123
00:05:24,720 --> 00:05:27,600
non-volatile Ram you have a section of

124
00:05:27,600 --> 00:05:30,390
flash memory which you can write to but

125
00:05:30,390 --> 00:05:33,090
it's small it's tiny and it only stores

126
00:05:33,090 --> 00:05:34,830
the most essential setting I mean this

127
00:05:34,830 --> 00:05:36,270
is what you can typically find in a

128
00:05:36,270 --> 00:05:39,030
router there are I peek cameras or IP

129
00:05:39,030 --> 00:05:41,160
phones or or whatever device that you're

130
00:05:41,160 --> 00:05:46,730
using so what happens when you power up

131
00:05:46,730 --> 00:05:49,110
let's say for example you power up a

132
00:05:49,110 --> 00:05:56,660
router first CPU gets powered up it

133
00:05:56,660 --> 00:05:58,890
finds where the firmware is the firmware

134
00:05:58,890 --> 00:06:01,470
exists in flash memory like giving you a

135
00:06:01,470 --> 00:06:03,930
very simplistic overview of things and

136
00:06:03,930 --> 00:06:06,930
the CPU goes and looks for where the

137
00:06:06,930 --> 00:06:09,390
bootloader is transfers control to the

138
00:06:09,390 --> 00:06:12,060
bootloader the bootloader kicks in the

139
00:06:12,060 --> 00:06:13,890
bootloader is configured where to find

140
00:06:13,890 --> 00:06:17,280
the kernel in the flash memory it finds

141
00:06:17,280 --> 00:06:19,890
the kernel and the kernel kicks in and

142
00:06:19,890 --> 00:06:22,800
it needs to find where the file system

143
00:06:22,800 --> 00:06:24,420
is now this is where some of the

144
00:06:24,420 --> 00:06:26,730
fundamental differences begin file

145
00:06:26,730 --> 00:06:28,740
systems they don't live as like blocks

146
00:06:28,740 --> 00:06:31,560
and inodes on a disk on a device

147
00:06:31,560 --> 00:06:33,960
everything space is a big premium so

148
00:06:33,960 --> 00:06:36,450
everything is compressed and your file

149
00:06:36,450 --> 00:06:38,340
system is also compressed it either

150
00:06:38,340 --> 00:06:39,240
exists as

151
00:06:39,240 --> 00:06:41,190
or chef s or a cram F s or something

152
00:06:41,190 --> 00:06:45,569
like that the colonel then uncompress is

153
00:06:45,569 --> 00:06:48,240
the filesystem as a ram disk and mounts

154
00:06:48,240 --> 00:06:51,030
everything in RAM everything that

155
00:06:51,030 --> 00:06:54,360
happens above this layer is all in

156
00:06:54,360 --> 00:06:55,050
memory

157
00:06:55,050 --> 00:06:57,360
there is nothing persisting on storage

158
00:06:57,360 --> 00:07:00,690
and eventually the kernel transfers

159
00:07:00,690 --> 00:07:03,960
control to user leg the user land is a

160
00:07:03,960 --> 00:07:06,389
very messy affair on IOT devices it

161
00:07:06,389 --> 00:07:08,970
basically consists of a spaghetti of

162
00:07:08,970 --> 00:07:11,270
startup scripts something that

163
00:07:11,270 --> 00:07:14,340
initializes your hardware subsystems

164
00:07:14,340 --> 00:07:17,069
your networks your USB devices your

165
00:07:17,069 --> 00:07:19,740
blinky lights on the router all those

166
00:07:19,740 --> 00:07:22,139
things so you see like these weird

167
00:07:22,139 --> 00:07:23,880
messages go up some of them are even

168
00:07:23,880 --> 00:07:27,120
generating errors but every River every

169
00:07:27,120 --> 00:07:29,819
vendor has implemented their own custom

170
00:07:29,819 --> 00:07:32,699
startup code and once these scripts

171
00:07:32,699 --> 00:07:36,330
start up what they do is they end up

172
00:07:36,330 --> 00:07:41,039
pulling variables from NVRAM stuff like

173
00:07:41,039 --> 00:07:44,039
your IP address your password your DNS

174
00:07:44,039 --> 00:07:47,669
server network share all these

175
00:07:47,669 --> 00:07:49,979
configuration details are stored in nvm

176
00:07:49,979 --> 00:07:53,370
they get pulled up and all your device

177
00:07:53,370 --> 00:07:56,400
configuration files are written on the

178
00:07:56,400 --> 00:07:59,969
fly so all your configs are built up in

179
00:07:59,969 --> 00:08:01,740
the RAM disk every time you power up

180
00:08:01,740 --> 00:08:04,889
stuff like network config DNS mask Samba

181
00:08:04,889 --> 00:08:07,469
config Wi-Fi supplicants all these are

182
00:08:07,469 --> 00:08:10,349
written on the fly by these clumsy

183
00:08:10,349 --> 00:08:13,349
scripts and then it is time for your

184
00:08:13,349 --> 00:08:15,840
services to start so then HTTP restarts

185
00:08:15,840 --> 00:08:18,449
amber services start video driver starts

186
00:08:18,449 --> 00:08:20,669
whatever whatever you may have and on

187
00:08:20,669 --> 00:08:22,319
top of this you have your applications

188
00:08:22,319 --> 00:08:26,069
and then the device is booted up and

189
00:08:26,069 --> 00:08:29,039
it's ready when we're dealing with

190
00:08:29,039 --> 00:08:31,889
something like this the question is how

191
00:08:31,889 --> 00:08:34,789
do we go about emulating this process

192
00:08:34,789 --> 00:08:37,078
there are a few goals that are needed to

193
00:08:37,078 --> 00:08:39,390
match I wanted to keep the emulation as

194
00:08:39,390 --> 00:08:41,099
faithful to the actual device as

195
00:08:41,099 --> 00:08:45,329
possible emulating IOT devices is not

196
00:08:45,329 --> 00:08:47,190
unknown several people have tried to do

197
00:08:47,190 --> 00:08:49,670
that before in several different ways

198
00:08:49,670 --> 00:08:53,190
the most simplistic approaches to MU

199
00:08:53,190 --> 00:08:55,350
single binary like you want to test a

200
00:08:55,350 --> 00:08:57,660
web server on a router you can use a

201
00:08:57,660 --> 00:09:01,530
QEMU user user environment just load an

202
00:09:01,530 --> 00:09:03,780
arm binary in your regular x86

203
00:09:03,780 --> 00:09:06,600
environment emulated you can test it you

204
00:09:06,600 --> 00:09:08,070
can get you can get pretty lucky with

205
00:09:08,070 --> 00:09:11,070
that except when you try to exploit it

206
00:09:11,070 --> 00:09:13,770
on real Hardware things may be very

207
00:09:13,770 --> 00:09:14,430
different

208
00:09:14,430 --> 00:09:15,800
your offsets will be different

209
00:09:15,800 --> 00:09:17,970
assumptions will be different the CPU

210
00:09:17,970 --> 00:09:20,550
architecture will be different most of

211
00:09:20,550 --> 00:09:23,190
these attacks won't work outside of your

212
00:09:23,190 --> 00:09:25,460
qmu and when when you try on a regular

213
00:09:25,460 --> 00:09:29,280
regular hardware so my goal was I should

214
00:09:29,280 --> 00:09:31,290
keep this as faithful to the regular

215
00:09:31,290 --> 00:09:34,290
hardware as possible which means I need

216
00:09:34,290 --> 00:09:36,660
to emulate the CPU as closely as

217
00:09:36,660 --> 00:09:40,980
possible the kernel as as best as

218
00:09:40,980 --> 00:09:44,670
possible and then not try to fake the

219
00:09:44,670 --> 00:09:46,590
user land environment but literally try

220
00:09:46,590 --> 00:09:50,130
to boot the entire userland code in the

221
00:09:50,130 --> 00:09:52,350
emulated environment as is without

222
00:09:52,350 --> 00:09:56,490
making a single change so the next slide

223
00:09:56,490 --> 00:09:58,110
I'll just outline some of the goals and

224
00:09:58,110 --> 00:10:00,420
challenges with the emulation approach

225
00:10:00,420 --> 00:10:04,250
and then we'll see how I did this

226
00:10:04,250 --> 00:10:06,990
instead of the CPU I am now going to use

227
00:10:06,990 --> 00:10:10,830
a qemu environment with a matching QEMU

228
00:10:10,830 --> 00:10:13,860
board currently the emulation exists

229
00:10:13,860 --> 00:10:16,680
only for armed devices I've got arm v5

230
00:10:16,680 --> 00:10:20,100
and v6 and and b7 emulated I'm working

231
00:10:20,100 --> 00:10:22,110
on mips and other such devices but

232
00:10:22,110 --> 00:10:24,120
that's going to be like probably early

233
00:10:24,120 --> 00:10:25,280
next year

234
00:10:25,280 --> 00:10:27,840
NVRAM was a big bottleneck they were

235
00:10:27,840 --> 00:10:30,540
there's no clear documentation on how to

236
00:10:30,540 --> 00:10:33,300
emulate NVRAM until I finally got it

237
00:10:33,300 --> 00:10:35,070
going through some custom build route

238
00:10:35,070 --> 00:10:38,490
stuff which was pretty nice to do so far

239
00:10:38,490 --> 00:10:40,530
amulet NVRAM has been emulated by

240
00:10:40,530 --> 00:10:44,190
hooking it you essentially patch liban

241
00:10:44,190 --> 00:10:46,730
VRAM you insert an LD preload hook

242
00:10:46,730 --> 00:10:48,930
intercept the functions and fake it

243
00:10:48,930 --> 00:10:51,330
through an inny file there's I think

244
00:10:51,330 --> 00:10:53,940
that cut ellipse project on it and a few

245
00:10:53,940 --> 00:10:56,280
others have successfully done in vm

246
00:10:56,280 --> 00:10:58,740
emulation I instead I mean nvm

247
00:10:58,740 --> 00:11:00,960
interception I instead short cut the

248
00:11:00,960 --> 00:11:03,180
whole thing out and let the device use

249
00:11:03,180 --> 00:11:05,820
its native lemon V RAM and just pull it

250
00:11:05,820 --> 00:11:07,080
out as if it's

251
00:11:07,080 --> 00:11:10,200
interacting with an nvm device shared

252
00:11:10,200 --> 00:11:13,110
memory comes to rescue over here which

253
00:11:13,110 --> 00:11:17,970
was a neat little thing so for me the

254
00:11:17,970 --> 00:11:19,980
emulation challenges were to try and

255
00:11:19,980 --> 00:11:21,780
emulate as much of the hardware as

256
00:11:21,780 --> 00:11:24,120
possible sometimes I can't emulate all

257
00:11:24,120 --> 00:11:26,220
the hardware like if I'm doing an IP

258
00:11:26,220 --> 00:11:28,830
camera I don't have a frame buffer so I

259
00:11:28,830 --> 00:11:31,530
don't have a video device all your video

260
00:11:31,530 --> 00:11:33,870
IO will be blank but everything else

261
00:11:33,870 --> 00:11:35,460
will be working so I can test the

262
00:11:35,460 --> 00:11:37,980
file-sharing subsystem I can test the

263
00:11:37,980 --> 00:11:40,200
admin interface I can test all the

264
00:11:40,200 --> 00:11:42,180
streaming protocols I just can't test

265
00:11:42,180 --> 00:11:44,190
the video driver so you're not going to

266
00:11:44,190 --> 00:11:47,250
get 100% equal to the actual device but

267
00:11:47,250 --> 00:11:49,470
as close as possible so some of the

268
00:11:49,470 --> 00:11:51,690
drivers may fail some of the devices may

269
00:11:51,690 --> 00:11:54,020
fail but the rest of the stuff will work

270
00:11:54,020 --> 00:12:01,500
as far as a firmware goes I can extract

271
00:12:01,500 --> 00:12:03,510
the firmware from the device I can also

272
00:12:03,510 --> 00:12:07,320
get it from several other sources but I

273
00:12:07,320 --> 00:12:10,440
cannot use the kernel that I extract

274
00:12:10,440 --> 00:12:12,960
from the device directly this is because

275
00:12:12,960 --> 00:12:14,760
the kernel is built for a certain type

276
00:12:14,760 --> 00:12:16,410
of a circuit board which does not

277
00:12:16,410 --> 00:12:19,800
necessarily match with QEMU so one of

278
00:12:19,800 --> 00:12:22,200
the current of bypasses that I've got

279
00:12:22,200 --> 00:12:24,510
going on is I just recompile the same

280
00:12:24,510 --> 00:12:27,360
kernel as far as possible with the same

281
00:12:27,360 --> 00:12:32,250
version and get equal to the kernel

282
00:12:32,250 --> 00:12:34,350
config that is present on the device

283
00:12:34,350 --> 00:12:37,500
either by trial and error or sometimes I

284
00:12:37,500 --> 00:12:39,630
get lucky if I get proc config dot GZ I

285
00:12:39,630 --> 00:12:41,400
get all the config parameters and I just

286
00:12:41,400 --> 00:12:44,580
build the kernel the way it is and once

287
00:12:44,580 --> 00:12:47,460
you have a matching kernel that works on

288
00:12:47,460 --> 00:12:51,120
qemu it can run the entire userland

289
00:12:51,120 --> 00:12:55,380
portion of the device as is so I want to

290
00:12:55,380 --> 00:12:56,940
make I want the kernel to match with the

291
00:12:56,940 --> 00:13:00,450
CPU architecture and as far as possible

292
00:13:00,450 --> 00:13:04,620
all the config settings then comes the

293
00:13:04,620 --> 00:13:07,110
file system the file system on the

294
00:13:07,110 --> 00:13:09,980
device exists in a compressed format

295
00:13:09,980 --> 00:13:12,480
what I do is I just uncompressed the

296
00:13:12,480 --> 00:13:14,430
file system and leave it in a normal

297
00:13:14,430 --> 00:13:18,450
workable state because during testing I

298
00:13:18,450 --> 00:13:19,980
want to manipulate this file system

299
00:13:19,980 --> 00:13:20,970
fairly easily

300
00:13:20,970 --> 00:13:22,709
I want to be able to add my own tools I

301
00:13:22,709 --> 00:13:24,810
want to be able to modify things on the

302
00:13:24,810 --> 00:13:25,230
fly

303
00:13:25,230 --> 00:13:29,899
I don't need to reflash it every time so

304
00:13:29,899 --> 00:13:32,699
some of some times I also need to look

305
00:13:32,699 --> 00:13:35,730
through the default configuration files

306
00:13:35,730 --> 00:13:37,920
on the file system where the factory

307
00:13:37,920 --> 00:13:40,139
settings are stored and I need to tweak

308
00:13:40,139 --> 00:13:42,420
some of these configs to match the QEMU

309
00:13:42,420 --> 00:13:44,579
environment especially for IP addresses

310
00:13:44,579 --> 00:13:48,829
and default interfaces and such

311
00:13:48,829 --> 00:13:51,149
eventually I also want the emulated

312
00:13:51,149 --> 00:13:53,639
device to be able to mean network

313
00:13:53,639 --> 00:13:55,350
reachable so you can fuzz it remotely

314
00:13:55,350 --> 00:13:57,990
attack it remotely all sorts of fun

315
00:13:57,990 --> 00:14:02,910
stuff the entire userland emulation

316
00:14:02,910 --> 00:14:06,360
happens in a Cerruti environment which

317
00:14:06,360 --> 00:14:09,930
runs on top of the kernel so and then

318
00:14:09,930 --> 00:14:12,000
once you get once you you have to do a

319
00:14:12,000 --> 00:14:14,970
lot of troubleshooting for this once you

320
00:14:14,970 --> 00:14:16,680
get a new device be prepared to spend

321
00:14:16,680 --> 00:14:19,050
about a week of trial and error looking

322
00:14:19,050 --> 00:14:20,399
through all the scripts and trying to

323
00:14:20,399 --> 00:14:21,899
duct-tape little things as far as

324
00:14:21,899 --> 00:14:22,529
possible

325
00:14:22,529 --> 00:14:24,930
until after a week or so of immense

326
00:14:24,930 --> 00:14:27,689
frustration you finally get that golden

327
00:14:27,689 --> 00:14:30,240
light and the UI will pop up and things

328
00:14:30,240 --> 00:14:32,610
will actually start working and behaving

329
00:14:32,610 --> 00:14:33,930
and this is where you can actually now

330
00:14:33,930 --> 00:14:35,250
start testing and playing with the

331
00:14:35,250 --> 00:14:40,170
device so some of it will work like over

332
00:14:40,170 --> 00:14:42,059
here if you try and look at the video

333
00:14:42,059 --> 00:14:44,160
stream you'll just get X's in there some

334
00:14:44,160 --> 00:14:45,990
of the components are just not emulated

335
00:14:45,990 --> 00:14:48,990
I mean we can play with video for Linux

336
00:14:48,990 --> 00:14:50,670
drivers and fake those as well but

337
00:14:50,670 --> 00:14:52,860
that's like an ongoing process I don't

338
00:14:52,860 --> 00:14:55,470
have that ready yet how does the whole

339
00:14:55,470 --> 00:14:57,029
thing come together let me give you a

340
00:14:57,029 --> 00:14:59,519
quick tour of our mix it's a wrapper

341
00:14:59,519 --> 00:15:05,879
around qemu there's a main shared

342
00:15:05,879 --> 00:15:08,040
directory called our mix which hosts all

343
00:15:08,040 --> 00:15:10,259
the device definitions the templates the

344
00:15:10,259 --> 00:15:12,540
configurations and the firmware

345
00:15:12,540 --> 00:15:15,980
extracted images in this entire tree

346
00:15:15,980 --> 00:15:19,199
this directory is available on the hosts

347
00:15:19,199 --> 00:15:23,970
as well as it is shared using NFS inside

348
00:15:23,970 --> 00:15:25,939
the qemu guest as well

349
00:15:25,939 --> 00:15:29,880
the qemu guest will boot up the custom

350
00:15:29,880 --> 00:15:32,490
kernel which is populated for the device

351
00:15:32,490 --> 00:15:35,959
the matching kernel

352
00:15:35,959 --> 00:15:39,629
the guests will first boot up its own

353
00:15:39,629 --> 00:15:42,180
default file system which is standard

354
00:15:42,180 --> 00:15:44,910
which has all the tools and scripts to

355
00:15:44,910 --> 00:15:47,040
launch other things on it and this is

356
00:15:47,040 --> 00:15:49,829
generated by Bill root it has a tap

357
00:15:49,829 --> 00:15:52,110
interface the host is always hard coded

358
00:15:52,110 --> 00:15:55,769
to 100.1 the guest is 100 dot - I mean

359
00:15:55,769 --> 00:15:57,899
these are configurable but at some point

360
00:15:57,899 --> 00:16:01,529
I'll make it nice and editable and once

361
00:16:01,529 --> 00:16:05,040
this qmu guest has booted up into its

362
00:16:05,040 --> 00:16:08,430
default file system it mounts the entire

363
00:16:08,430 --> 00:16:13,259
rmx tree using NFS and then selects the

364
00:16:13,259 --> 00:16:14,309
root filesystem

365
00:16:14,309 --> 00:16:17,009
of the extracted device and boots it up

366
00:16:17,009 --> 00:16:21,600
from within this lot more details on the

367
00:16:21,600 --> 00:16:25,499
web page so I know it's a little

368
00:16:25,499 --> 00:16:27,569
confusing it was confusing for me as I

369
00:16:27,569 --> 00:16:29,189
was drawing these diagrams I got lost

370
00:16:29,189 --> 00:16:35,009
myself the entire thing I've just tried

371
00:16:35,009 --> 00:16:36,240
to keep it as simple as possible

372
00:16:36,240 --> 00:16:38,220
everything is a nice hierarchical

373
00:16:38,220 --> 00:16:41,399
directory tree the main database is

374
00:16:41,399 --> 00:16:43,559
called devices where you can create and

375
00:16:43,559 --> 00:16:45,930
add your own devices these are some

376
00:16:45,930 --> 00:16:47,879
scripts which just stay static in the

377
00:16:47,879 --> 00:16:50,519
run directory the host file system is

378
00:16:50,519 --> 00:16:52,889
also fixed you just generate it once and

379
00:16:52,889 --> 00:16:55,709
let it live that has all the tools for

380
00:16:55,709 --> 00:16:57,990
the user land stuff and then all your

381
00:16:57,990 --> 00:17:01,980
new devices will be created under its

382
00:17:01,980 --> 00:17:03,839
own template you can copy a template and

383
00:17:03,839 --> 00:17:06,148
just create a device each device has its

384
00:17:06,148 --> 00:17:09,059
own config its own copy of NVRAM which

385
00:17:09,059 --> 00:17:10,919
gets populated before the device moves

386
00:17:10,919 --> 00:17:13,829
up a kernel which is generated using

387
00:17:13,829 --> 00:17:16,890
build root and the root filesystem which

388
00:17:16,890 --> 00:17:18,890
is extracted straight from the device

389
00:17:18,890 --> 00:17:23,579
how does this all work well first you

390
00:17:23,579 --> 00:17:27,059
have a launcher the launcher will parse

391
00:17:27,059 --> 00:17:31,130
the device database give you a menu and

392
00:17:31,130 --> 00:17:33,450
let you choose which one you want to

393
00:17:33,450 --> 00:17:37,770
boot up then once you've selected what

394
00:17:37,770 --> 00:17:40,740
you want to boot up the launcher will

395
00:17:40,740 --> 00:17:44,010
then move the kernel inside qmu this is

396
00:17:44,010 --> 00:17:45,570
the matching kernel that has been

397
00:17:45,570 --> 00:17:48,060
generated for the device

398
00:17:48,060 --> 00:17:50,580
the colonel will then activate the tap

399
00:17:50,580 --> 00:17:53,490
interfaces and load the hosts file

400
00:17:53,490 --> 00:17:56,550
system and get ready to launch the

401
00:17:56,550 --> 00:17:59,370
userland scripts the userland scripts

402
00:17:59,370 --> 00:18:01,440
are available on the NFS share so that

403
00:18:01,440 --> 00:18:03,990
share gets automatically mounted under

404
00:18:03,990 --> 00:18:07,080
the same directory path actually NFS was

405
00:18:07,080 --> 00:18:09,420
a big lifesaver I was really struggling

406
00:18:09,420 --> 00:18:11,730
to figure out how to share stuff between

407
00:18:11,730 --> 00:18:15,300
gasp a host and qmu guest and then old

408
00:18:15,300 --> 00:18:17,280
Solaris NFS comes to the rescue

409
00:18:17,280 --> 00:18:19,950
NFS is never never gonna die it's

410
00:18:19,950 --> 00:18:20,690
beautiful

411
00:18:20,690 --> 00:18:23,040
highly vulnerable to but that's a

412
00:18:23,040 --> 00:18:25,080
different story

413
00:18:25,080 --> 00:18:29,970
so once the once the QEMU boots up you

414
00:18:29,970 --> 00:18:31,860
get a console with the kernel and the

415
00:18:31,860 --> 00:18:34,440
host FS booted up and it looks something

416
00:18:34,440 --> 00:18:39,810
like this and at this point the kernel

417
00:18:39,810 --> 00:18:43,680
is ready host file system is mounted the

418
00:18:43,680 --> 00:18:47,070
NFS tree is mounted and now we are ready

419
00:18:47,070 --> 00:18:51,180
to kick off the user land scripts how

420
00:18:51,180 --> 00:18:54,720
does a user land stuff work so for that

421
00:18:54,720 --> 00:19:00,000
you just log in to the host FS you can

422
00:19:00,000 --> 00:19:03,560
SSH in and by default you'll get a menu

423
00:19:03,560 --> 00:19:05,880
it allows you to do two things either

424
00:19:05,880 --> 00:19:07,980
boot the user land portion of the device

425
00:19:07,980 --> 00:19:10,770
or you can get dropped into a debug

426
00:19:10,770 --> 00:19:12,390
shell if you want to do something before

427
00:19:12,390 --> 00:19:16,320
booting up the user land scripts when

428
00:19:16,320 --> 00:19:19,650
you boot up the scripts these are all

429
00:19:19,650 --> 00:19:22,650
the scripts that are from the extracted

430
00:19:22,650 --> 00:19:25,260
file system of the device the default

431
00:19:25,260 --> 00:19:27,960
init scripts you just tell the shell

432
00:19:27,960 --> 00:19:31,170
which script to kick off and the scripts

433
00:19:31,170 --> 00:19:34,320
will kick off you may have to spend some

434
00:19:34,320 --> 00:19:36,240
time duct-taping some of these scripts

435
00:19:36,240 --> 00:19:39,210
together for example in the IP camera it

436
00:19:39,210 --> 00:19:42,060
looks for a hard-coded slash dev slash

437
00:19:42,060 --> 00:19:44,640
video device and this device doesn't

438
00:19:44,640 --> 00:19:47,400
exist so yeah you just fake it using a

439
00:19:47,400 --> 00:19:50,010
touch command touch a device it will not

440
00:19:50,010 --> 00:19:51,960
ill complain but it somehow go through

441
00:19:51,960 --> 00:19:53,610
you just want to push the cart through

442
00:19:53,610 --> 00:19:56,280
until it loads everything once it loads

443
00:19:56,280 --> 00:19:58,560
up then you can play with it so a little

444
00:19:58,560 --> 00:20:00,570
bit of R&D is required for this phase

445
00:20:00,570 --> 00:20:01,830
once you get it all down

446
00:20:01,830 --> 00:20:04,080
you can script it up and define it in

447
00:20:04,080 --> 00:20:07,769
the config and then then it scripts will

448
00:20:07,769 --> 00:20:10,230
run all the envy damn stuff will work as

449
00:20:10,230 --> 00:20:12,799
is config files get created and

450
00:20:12,799 --> 00:20:15,299
eventually when the device boots up you

451
00:20:15,299 --> 00:20:18,120
actually get a shell on the emulated

452
00:20:18,120 --> 00:20:20,970
device as if it's it's a real emulated

453
00:20:20,970 --> 00:20:24,539
device all the init scripts have run all

454
00:20:24,539 --> 00:20:26,850
the applications are running and now if

455
00:20:26,850 --> 00:20:29,370
you connect using a browser you'll be

456
00:20:29,370 --> 00:20:30,720
able to play with the device in its

457
00:20:30,720 --> 00:20:33,510
entirety so this is a demo I'm going to

458
00:20:33,510 --> 00:20:35,279
give you I'm also going to show you what

459
00:20:35,279 --> 00:20:38,519
the debug shell does the debug shell is

460
00:20:38,519 --> 00:20:40,529
interesting because once you boot up the

461
00:20:40,529 --> 00:20:43,080
device you want to obviously test it you

462
00:20:43,080 --> 00:20:44,549
want to fuzz it you want to debug it you

463
00:20:44,549 --> 00:20:46,679
want to break it so the debug shell

464
00:20:46,679 --> 00:20:49,710
hosts a lot of utilities you get your

465
00:20:49,710 --> 00:20:52,309
usual GDB GDB server

466
00:20:52,309 --> 00:20:55,620
you also get el trace s trace and any

467
00:20:55,620 --> 00:20:56,970
other utility that you want to throw on

468
00:20:56,970 --> 00:21:00,539
that's all a part of the host FS in the

469
00:21:00,539 --> 00:21:02,490
build route these tools are already

470
00:21:02,490 --> 00:21:06,389
pre-loaded so you can now launch a debug

471
00:21:06,389 --> 00:21:10,830
shell attach a gdb server to a process

472
00:21:10,830 --> 00:21:13,460
running in this IOT environment and

473
00:21:13,460 --> 00:21:17,610
remotely launch a gdb connect to the

474
00:21:17,610 --> 00:21:18,779
remote gdb server

475
00:21:18,779 --> 00:21:22,440
debug it crash it play with it fuzz it

476
00:21:22,440 --> 00:21:28,320
whatever you want to do so let's see a

477
00:21:28,320 --> 00:21:30,990
demo let me show you how this whole

478
00:21:30,990 --> 00:21:34,200
thing works then we will talk about how

479
00:21:34,200 --> 00:21:36,330
to add a new device to it give you

480
00:21:36,330 --> 00:21:39,200
another tour of firmware and

481
00:21:39,200 --> 00:21:45,480
everything's good so here's a here's our

482
00:21:45,480 --> 00:21:51,870
mix this is just the default desktop you

483
00:21:51,870 --> 00:21:54,210
get an icon to click it will give you

484
00:21:54,210 --> 00:21:58,289
this nice little menu and you can select

485
00:21:58,289 --> 00:22:01,620
which device you want to load up all

486
00:22:01,620 --> 00:22:06,779
these devices are listed in the device

487
00:22:06,779 --> 00:22:09,380
database

488
00:22:13,410 --> 00:22:15,970
the device database is over here

489
00:22:15,970 --> 00:22:20,100
this just exists as a little text file

490
00:22:20,100 --> 00:22:26,110
and each each line is a device

491
00:22:26,110 --> 00:22:29,020
definition all this gobbledygook is qemu

492
00:22:29,020 --> 00:22:32,770
stuff so for example the IP camera which

493
00:22:32,770 --> 00:22:34,960
is the last one defined you need to

494
00:22:34,960 --> 00:22:37,030
emulate it using a versatile prototype

495
00:22:37,030 --> 00:22:39,550
board which is the default mode for rv5

496
00:22:39,550 --> 00:22:42,460
chips in qmu you find that out using

497
00:22:42,460 --> 00:22:45,100
much pain and suffering and then you

498
00:22:45,100 --> 00:22:46,929
figure out how much ram you want to give

499
00:22:46,929 --> 00:22:50,080
here's the kernel image the Z image 2 6

500
00:22:50,080 --> 00:22:53,860
3 4 the versatile board and also

501
00:22:53,860 --> 00:22:55,809
discovered that this kernel does not

502
00:22:55,809 --> 00:22:59,559
like some binaries so I have compiled it

503
00:22:59,559 --> 00:23:01,720
without thumb binaries to match the

504
00:23:01,720 --> 00:23:04,750
actual IP camera all this happens using

505
00:23:04,750 --> 00:23:07,210
build route and custom kernel stuff

506
00:23:07,210 --> 00:23:10,360
these are the storage interfaces for

507
00:23:10,360 --> 00:23:14,170
QEMU it fakes an SD card and all the

508
00:23:14,170 --> 00:23:17,290
images the the filesystem appears as a

509
00:23:17,290 --> 00:23:21,640
fake SD card these are some of the boot

510
00:23:21,640 --> 00:23:24,370
arguments so this is where your console

511
00:23:24,370 --> 00:23:27,460
is bound to the serial port I just left

512
00:23:27,460 --> 00:23:30,550
it as is from the actual device you

513
00:23:30,550 --> 00:23:32,380
emulate a network interface card and

514
00:23:32,380 --> 00:23:35,140
this is the descriptive text so each

515
00:23:35,140 --> 00:23:38,770
entry in this device corresponds to one

516
00:23:38,770 --> 00:23:41,620
emulated environment let me show you

517
00:23:41,620 --> 00:23:47,410
what exists in there each device gets

518
00:23:47,410 --> 00:23:51,880
its own directory the host FS by the way

519
00:23:51,880 --> 00:23:56,020
is always just one there's only one host

520
00:23:56,020 --> 00:23:58,600
FS and there's an ext to file which has

521
00:23:58,600 --> 00:24:01,750
all the tools all the scripts are in the

522
00:24:01,750 --> 00:24:03,429
run directory let me go to the device

523
00:24:03,429 --> 00:24:08,460
directory though the device directory

524
00:24:08,460 --> 00:24:11,980
always has four or five components the

525
00:24:11,980 --> 00:24:17,320
the default file is a config file config

526
00:24:17,320 --> 00:24:19,570
is rather simple tells you what device

527
00:24:19,570 --> 00:24:22,750
ID it is whether it uses NVRAM or not

528
00:24:22,750 --> 00:24:25,179
this IP camera doesn't use nvm

529
00:24:25,179 --> 00:24:27,549
where the root filesystem is extracted

530
00:24:27,549 --> 00:24:30,219
that's in the root FS directory the

531
00:24:30,219 --> 00:24:32,609
kernel the Z image lives over here

532
00:24:32,609 --> 00:24:36,489
whether you want a SLR on or off and

533
00:24:36,489 --> 00:24:38,349
these are the init commands these are

534
00:24:38,349 --> 00:24:40,299
the commands to invoke when the kernel

535
00:24:40,299 --> 00:24:42,460
has booted up so what should the user

536
00:24:42,460 --> 00:24:45,009
land scripts be this is where I was

537
00:24:45,009 --> 00:24:46,869
telling you I'm faking the video device

538
00:24:46,869 --> 00:24:48,969
I'm just doing a touch command creating

539
00:24:48,969 --> 00:24:52,749
a fake video driver and then in it yeah

540
00:24:52,749 --> 00:24:55,179
RC dot sis in it are seen it three and

541
00:24:55,179 --> 00:24:57,909
then drop a shell and then there are

542
00:24:57,909 --> 00:25:00,190
some helper scripts like run in it like

543
00:25:00,190 --> 00:25:03,119
running it always remains the same it

544
00:25:03,119 --> 00:25:08,499
loads the config file it loads NVRAM if

545
00:25:08,499 --> 00:25:10,599
there is any and then it runs the

546
00:25:10,599 --> 00:25:12,249
userland scripts and iterated

547
00:25:12,249 --> 00:25:16,749
environment the kernel it's just one z

548
00:25:16,749 --> 00:25:19,479
image you compile it in build root drop

549
00:25:19,479 --> 00:25:23,649
it over here with all the configs root

550
00:25:23,649 --> 00:25:28,479
FS here are all the extracted files from

551
00:25:28,479 --> 00:25:30,690
the compressed file system on the device

552
00:25:30,690 --> 00:25:33,609
so this contains all the binaries all

553
00:25:33,609 --> 00:25:36,519
the device trees everything over here

554
00:25:36,519 --> 00:25:39,729
all the applications are in this this

555
00:25:39,729 --> 00:25:42,759
environment and this lives in its own

556
00:25:42,759 --> 00:25:46,179
directory let me show you what happens

557
00:25:46,179 --> 00:25:50,320
when you started so you start it here it

558
00:25:50,320 --> 00:25:54,399
goes and compresses the kernel boots it

559
00:25:54,399 --> 00:25:56,859
up and then drops you into this our mix

560
00:25:56,859 --> 00:26:00,820
prompt at this point the kernel is

561
00:26:00,820 --> 00:26:05,200
booted the host FS is loaded and now we

562
00:26:05,200 --> 00:26:10,089
can try and get into the shell shell is

563
00:26:10,089 --> 00:26:14,259
one click away you basically get either

564
00:26:14,259 --> 00:26:16,690
a default bin shell which is the debug

565
00:26:16,690 --> 00:26:21,070
shell or you can go and start the

566
00:26:21,070 --> 00:26:23,739
userland scripts when you start the

567
00:26:23,739 --> 00:26:25,749
userland scripts it's loads the nvram

568
00:26:25,749 --> 00:26:30,179
here there's no NVRAM and it waits to

569
00:26:30,960 --> 00:26:35,679
notice I started actually yes that the

570
00:26:35,679 --> 00:26:38,269
IP camera or what no I didn't

571
00:26:38,269 --> 00:26:45,379
my error honest start an IP camera kill

572
00:26:45,379 --> 00:26:47,708
everything

573
00:26:50,410 --> 00:26:53,140
sorry yeah I started the tiny sploit

574
00:26:53,140 --> 00:26:55,420
first which which was not intending to

575
00:26:55,420 --> 00:26:59,700
do I want to start this guy much better

576
00:26:59,700 --> 00:27:03,900
so wondering why is it looking different

577
00:27:04,350 --> 00:27:06,670
now I can see it's very easy to just

578
00:27:06,670 --> 00:27:08,770
shut one off and turn on turn another on

579
00:27:08,770 --> 00:27:12,670
at will and thats that makes for a lot

580
00:27:12,670 --> 00:27:17,850
of flexibility let's start the IP cam

581
00:27:17,850 --> 00:27:20,670
now here are the init scripts running

582
00:27:20,670 --> 00:27:23,020
you can also see some errors being

583
00:27:23,020 --> 00:27:24,910
thrown on the consoles like some drivers

584
00:27:24,910 --> 00:27:27,040
are failing that's okay we just have to

585
00:27:27,040 --> 00:27:31,570
be brave and suffer these errors and at

586
00:27:31,570 --> 00:27:34,030
this point all your applications are

587
00:27:34,030 --> 00:27:37,960
running if you actually do a PS on your

588
00:27:37,960 --> 00:27:41,260
prompt all your you you have a web

589
00:27:41,260 --> 00:27:43,300
server running you have storage drivers

590
00:27:43,300 --> 00:27:48,370
running HTTP client the video streaming

591
00:27:48,370 --> 00:27:53,170
server's IP cam daemons and at this

592
00:27:53,170 --> 00:27:55,150
juncture you can actually pop up on a

593
00:27:55,150 --> 00:28:03,610
browser and pull up the web interface of

594
00:28:03,610 --> 00:28:05,080
the IP camera

595
00:28:05,080 --> 00:28:09,100
this is lets you do everything that the

596
00:28:09,100 --> 00:28:11,230
regular IP camera does except it doesn't

597
00:28:11,230 --> 00:28:13,930
show you a video you can play with

598
00:28:13,930 --> 00:28:19,090
settings network settings at this point

599
00:28:19,090 --> 00:28:21,130
if you use burp suite you can fuzz this

600
00:28:21,130 --> 00:28:23,130
web interface you can find all sorts of

601
00:28:23,130 --> 00:28:25,480
web hacking bugs directory traversal

602
00:28:25,480 --> 00:28:28,270
bugs go for a ticket the device is ready

603
00:28:28,270 --> 00:28:31,050
for attack exploration exploitation

604
00:28:31,050 --> 00:28:35,170
whatever it is you may have and it will

605
00:28:35,170 --> 00:28:37,870
it will react to all your not normal

606
00:28:37,870 --> 00:28:45,730
interactions ok let me show the debug

607
00:28:45,730 --> 00:28:54,760
shell here is a debug shell the the

608
00:28:54,760 --> 00:28:57,340
debug shell lets you interact with

609
00:28:57,340 --> 00:29:00,400
processes and you can attack gdb server

610
00:29:00,400 --> 00:29:04,350
to say a running process

611
00:29:06,740 --> 00:29:09,480
let me attach to the web server process

612
00:29:09,480 --> 00:29:13,280
which is this one over here called webs

613
00:29:24,290 --> 00:29:26,889
yep

614
00:29:26,930 --> 00:29:29,750
and the gdb server was attached and now

615
00:29:29,750 --> 00:29:33,820
I can remotely debug this guy I can

616
00:29:33,820 --> 00:29:44,420
attach a gdb and the gdb server is

617
00:29:44,420 --> 00:29:48,950
attached I've got my gdb prompt I can

618
00:29:48,950 --> 00:29:50,930
look at the binaries that are loaded or

619
00:29:50,930 --> 00:29:54,200
the the virtual memory map and I can

620
00:29:54,200 --> 00:29:56,600
play with this I can now fuzz it or test

621
00:29:56,600 --> 00:30:02,900
it and well yeah let's see what we can

622
00:30:02,900 --> 00:30:05,080
do with it let me get back to the slides

623
00:30:05,080 --> 00:30:08,720
discuss some more about the devices and

624
00:30:08,720 --> 00:30:12,200
then we'll do a little demo wrap up so

625
00:30:12,200 --> 00:30:13,700
what you just saw was this whole thing

626
00:30:13,700 --> 00:30:19,670
in motion the kernel is over here this

627
00:30:19,670 --> 00:30:22,640
gets loaded up so if you want to create

628
00:30:22,640 --> 00:30:25,250
a new device you go to create a new

629
00:30:25,250 --> 00:30:29,180
template the the config files and some

630
00:30:29,180 --> 00:30:31,550
NVRAM pfizer will already be present so

631
00:30:31,550 --> 00:30:35,960
you can use those straightaway you need

632
00:30:35,960 --> 00:30:39,590
to obtain three things first you need to

633
00:30:39,590 --> 00:30:43,280
get the kernel the kernel you compile

634
00:30:43,280 --> 00:30:46,400
yourself using build route then you need

635
00:30:46,400 --> 00:30:49,190
to get the root filesystem and a copy of

636
00:30:49,190 --> 00:30:52,100
the env ramp if it is needed the way you

637
00:30:52,100 --> 00:30:55,250
obtain these are by firmware extraction

638
00:30:55,250 --> 00:30:58,190
in there's three ways you can extract

639
00:30:58,190 --> 00:31:03,950
firmware the first and the easiest way

640
00:31:03,950 --> 00:31:07,270
is look up the manufacturers website

641
00:31:07,270 --> 00:31:10,610
usually get a cd-rom well these days who

642
00:31:10,610 --> 00:31:13,490
has CD ROMs anyways but you get a bin

643
00:31:13,490 --> 00:31:15,200
file you could have the bin file you at

644
00:31:15,200 --> 00:31:16,430
least get the filesystem

645
00:31:16,430 --> 00:31:19,460
you won't get the NVRAM though the nvm

646
00:31:19,460 --> 00:31:21,530
is only available at run time but at

647
00:31:21,530 --> 00:31:23,330
least you'll get the root filesystem and

648
00:31:23,330 --> 00:31:25,670
you can start playing with this the

649
00:31:25,670 --> 00:31:28,130
second and the more preferred way is by

650
00:31:28,130 --> 00:31:30,490
getting a serial console onto the device

651
00:31:30,490 --> 00:31:32,900
you run the risk of breaking the device

652
00:31:32,900 --> 00:31:35,450
but it's worth doing it so you go open

653
00:31:35,450 --> 00:31:37,850
it up you find where the UART is if

654
00:31:37,850 --> 00:31:40,520
there is one and sometimes the

655
00:31:40,520 --> 00:31:41,180
manufacturer

656
00:31:41,180 --> 00:31:43,190
leave the shell available on the UART

657
00:31:43,190 --> 00:31:45,380
you figure out where the pins are you

658
00:31:45,380 --> 00:31:47,630
solder them hopefully the manufacturer

659
00:31:47,630 --> 00:31:50,120
hasn't broken some of the tracks and you

660
00:31:50,120 --> 00:31:52,910
get a serial console if you get a serial

661
00:31:52,910 --> 00:31:54,980
console that's great either your to

662
00:31:54,980 --> 00:31:56,990
brute-force a password or you luckily

663
00:31:56,990 --> 00:31:59,540
get dropped into a root shell in that

664
00:31:59,540 --> 00:32:03,680
case you can simply dump the firmware

665
00:32:03,680 --> 00:32:07,910
using DD and just dump the MTD blocks

666
00:32:07,910 --> 00:32:10,310
these are the partitions and extract

667
00:32:10,310 --> 00:32:12,140
them you can you can get the you boot

668
00:32:12,140 --> 00:32:14,030
you can get the kernel NVRAM root

669
00:32:14,030 --> 00:32:17,420
filesystem whatever you may have this

670
00:32:17,420 --> 00:32:19,910
technique works rather well on several

671
00:32:19,910 --> 00:32:22,850
devices now if the device does not

672
00:32:22,850 --> 00:32:25,040
expose a serial interface or if they've

673
00:32:25,040 --> 00:32:27,680
broken the tracks or something the only

674
00:32:27,680 --> 00:32:29,600
other ways you have to take it directly

675
00:32:29,600 --> 00:32:34,730
from the chip you clip something on the

676
00:32:34,730 --> 00:32:36,500
flash memory and suck it out

677
00:32:36,500 --> 00:32:39,650
right off the chip there are some jenkki

678
00:32:39,650 --> 00:32:41,510
ways of doing it you can use a bus

679
00:32:41,510 --> 00:32:43,490
pirate or if you're Joe Fitzpatrick you

680
00:32:43,490 --> 00:32:45,440
can simply which whisper to the chip and

681
00:32:45,440 --> 00:32:48,260
it'll give you all the bits fix can do

682
00:32:48,260 --> 00:32:52,370
that I am NOT the figs so if you really

683
00:32:52,370 --> 00:32:55,670
want to do it the best $200 you spend is

684
00:32:55,670 --> 00:32:59,060
on this thing called the a 640 it's the

685
00:32:59,060 --> 00:33:01,400
rolls-royce of chip suckers it's as

686
00:33:01,400 --> 00:33:03,620
close as you get into a click clicking

687
00:33:03,620 --> 00:33:07,190
it defining what chip it is pressing a

688
00:33:07,190 --> 00:33:10,270
button 15 seconds the image is extracted

689
00:33:10,270 --> 00:33:14,150
it's it's really really good be sure to

690
00:33:14,150 --> 00:33:16,040
wire these things correctly otherwise

691
00:33:16,040 --> 00:33:19,550
something will burn either your device

692
00:33:19,550 --> 00:33:23,120
or the forte or both and you don't want

693
00:33:23,120 --> 00:33:26,660
that happening so but it works it works

694
00:33:26,660 --> 00:33:29,840
really well so I will give you some

695
00:33:29,840 --> 00:33:32,510
demos of an exploit on the IP cam and

696
00:33:32,510 --> 00:33:38,650
then I should bring us to wrapping it up

697
00:33:40,870 --> 00:33:43,400
so here we go the debugger is working

698
00:33:43,400 --> 00:33:47,180
and well there's some vulnerabilities in

699
00:33:47,180 --> 00:33:49,070
the IP cam of course I there have to be

700
00:33:49,070 --> 00:33:51,230
by the way you can download this preview

701
00:33:51,230 --> 00:33:54,260
VM it's available online already at rmx

702
00:33:54,260 --> 00:33:55,010
not exploit

703
00:33:55,010 --> 00:33:57,140
laughs dotnet their dresses are in the

704
00:33:57,140 --> 00:33:59,810
slides and the VM comes ready with this

705
00:33:59,810 --> 00:34:01,610
IP cam for you to play with it's it's

706
00:34:01,610 --> 00:34:03,620
not a fake image it's a real device

707
00:34:03,620 --> 00:34:06,500
emulated I've opened it up as a CTF if

708
00:34:06,500 --> 00:34:09,679
you if you manage to crack this there's

709
00:34:09,679 --> 00:34:12,560
a special deck of cards which I will

710
00:34:12,560 --> 00:34:15,980
give you as a price it's yeah just mail

711
00:34:15,980 --> 00:34:21,880
in the results okay so oh that's awesome

712
00:34:21,880 --> 00:34:24,020
I'm gonna announce it I'm gonna tweet

713
00:34:24,020 --> 00:34:28,940
that okay exploit lab dotnet yeah it's

714
00:34:28,940 --> 00:34:30,380
serious in the slides and I will be

715
00:34:30,380 --> 00:34:34,389
publishing it okay where was I that

716
00:34:34,389 --> 00:34:37,040
countermeasure freebie got me all of

717
00:34:37,040 --> 00:34:39,560
melons and very giddy now I have some

718
00:34:39,560 --> 00:34:41,770
water

719
00:34:52,739 --> 00:35:00,250
okay AP chem so there's some there's

720
00:35:00,250 --> 00:35:02,650
some exploit scripts I mean I've tested

721
00:35:02,650 --> 00:35:04,830
this device and know where the bugs are

722
00:35:04,830 --> 00:35:07,420
there's a nice little info leak on here

723
00:35:07,420 --> 00:35:09,660
which is kind of interesting

724
00:35:09,660 --> 00:35:12,940
make sure the info leak is a Forbes

725
00:35:12,940 --> 00:35:18,280
format string bug found by fuzzy your

726
00:35:18,280 --> 00:35:20,860
info leak it you get all these addresses

727
00:35:20,860 --> 00:35:23,350
you get some library addresses and stack

728
00:35:23,350 --> 00:35:25,240
addresses everything leaked out I

729
00:35:25,240 --> 00:35:29,050
initially use the info leak because the

730
00:35:29,050 --> 00:35:30,640
web server on this device is a

731
00:35:30,640 --> 00:35:32,590
single-threaded server so you can't

732
00:35:32,590 --> 00:35:34,000
attack it repeatedly you can't

733
00:35:34,000 --> 00:35:36,070
brute-force it and I thought like damn

734
00:35:36,070 --> 00:35:39,250
if a SLR is running on the device we

735
00:35:39,250 --> 00:35:40,750
need to info leak it to be able to get a

736
00:35:40,750 --> 00:35:43,240
stable that I going well it turns out

737
00:35:43,240 --> 00:35:46,300
that every time I booted the device on

738
00:35:46,300 --> 00:35:48,610
the actual hardware it gave me the same

739
00:35:48,610 --> 00:35:50,920
addresses then I bought another IP

740
00:35:50,920 --> 00:35:54,790
camera same addresses and there is no a

741
00:35:54,790 --> 00:35:58,630
SLR like at at that kernel level 2.6 128

742
00:35:58,630 --> 00:36:01,510
it did not do a SLR so this whole bug

743
00:36:01,510 --> 00:36:03,610
was wasted like three days in finding

744
00:36:03,610 --> 00:36:07,750
and in folic only never to use it here's

745
00:36:07,750 --> 00:36:10,450
the actual bug there's actually two bugs

746
00:36:10,450 --> 00:36:12,310
this one was submitted by my student

747
00:36:12,310 --> 00:36:14,350
which is much much better bug than I

748
00:36:14,350 --> 00:36:17,100
found you of course send it a very large

749
00:36:17,100 --> 00:36:20,920
URL of all sorts several CGI parameters

750
00:36:20,920 --> 00:36:23,470
are vulnerable like this big block of

751
00:36:23,470 --> 00:36:26,230
a's will essentially cause a stack

752
00:36:26,230 --> 00:36:29,080
overflow and when we hit it against the

753
00:36:29,080 --> 00:36:34,360
actual device you'll actually see the

754
00:36:34,360 --> 00:36:37,090
crash occur in the debugger and you get

755
00:36:37,090 --> 00:36:41,560
this nice array of 41 41 41 40 you

756
00:36:41,560 --> 00:36:44,020
control your program counter and this

757
00:36:44,020 --> 00:36:48,880
crash is beautifully exploitable once

758
00:36:48,880 --> 00:36:52,630
you get this going I need to restart the

759
00:36:52,630 --> 00:36:55,330
web server on here I can do that rather

760
00:36:55,330 --> 00:37:01,360
easily from the shell we started I of

761
00:37:01,360 --> 00:37:03,280
course have a full working exploit for

762
00:37:03,280 --> 00:37:04,520
this as well which I

763
00:37:04,520 --> 00:37:09,800
show you it launches a reversal back to

764
00:37:09,800 --> 00:37:11,980
me

765
00:37:17,470 --> 00:37:19,869
and this is pretty much the exploit so

766
00:37:19,869 --> 00:37:21,609
the base address is your River shell

767
00:37:21,609 --> 00:37:31,030
shell code and usual stuff frame and I

768
00:37:31,030 --> 00:37:37,140
hit it against target if all goes well

769
00:37:37,140 --> 00:37:42,670
we have a shell shells always get the

770
00:37:42,670 --> 00:37:46,540
claps man yeah you can see here's a CPU

771
00:37:46,540 --> 00:37:49,210
is an armory five CPUs pretty much the

772
00:37:49,210 --> 00:37:51,310
same as what you find on the actual IP

773
00:37:51,310 --> 00:37:53,470
cam I forgot to bring my pick and with

774
00:37:53,470 --> 00:37:54,760
me otherwise I'll show you the same

775
00:37:54,760 --> 00:37:57,400
exploit working on the IEP can before

776
00:37:57,400 --> 00:37:59,020
right if you find a used model of this

777
00:37:59,020 --> 00:38:01,240
try vision cam on ebay try it the same

778
00:38:01,240 --> 00:38:04,270
exploit works not only on the try vision

779
00:38:04,270 --> 00:38:06,130
it works on you cam it works on like

780
00:38:06,130 --> 00:38:08,470
five different brands of vendors they

781
00:38:08,470 --> 00:38:11,200
all use the same OAM software just

782
00:38:11,200 --> 00:38:14,500
change the logos and they have no

783
00:38:14,500 --> 00:38:18,700
intentions of fixing these bugs so

784
00:38:18,700 --> 00:38:24,880
there's a shell right what else do we

785
00:38:24,880 --> 00:38:28,569
have time for that is a little bit of a

786
00:38:28,569 --> 00:38:31,900
demo I'm forgetting something else I

787
00:38:31,900 --> 00:38:34,720
wanted to show oh yeah let me show you

788
00:38:34,720 --> 00:38:37,150
another router which uses NVRAM for

789
00:38:37,150 --> 00:38:39,220
example this one was a very simplistic

790
00:38:39,220 --> 00:38:43,690
one let's see a more complex device I'm

791
00:38:43,690 --> 00:38:45,010
not going to be able to show exploits

792
00:38:45,010 --> 00:38:48,280
for that or anything but at least let me

793
00:38:48,280 --> 00:38:51,940
show how this works so I'm going to stop

794
00:38:51,940 --> 00:38:58,569
this one and we will see a more complex

795
00:38:58,569 --> 00:39:02,440
device like the Netgear router the

796
00:39:02,440 --> 00:39:05,140
Netgear is a pain to emulate Netgear

797
00:39:05,140 --> 00:39:09,130
uses everything in NVRAM and getting

798
00:39:09,130 --> 00:39:12,960
this going was was a huge challenge

799
00:39:13,980 --> 00:39:17,470
exploiting this was also a pain but you

800
00:39:17,470 --> 00:39:21,690
boot up the Netgear router the kernel

801
00:39:21,690 --> 00:39:27,420
I'll show you the nvram contents of it

802
00:39:34,110 --> 00:39:36,090
the config file for the net gear router

803
00:39:36,090 --> 00:39:38,880
is defined like this so all the NVRAM

804
00:39:38,880 --> 00:39:41,820
contents are in this NVRAM dot ini' the

805
00:39:41,820 --> 00:39:46,070
root file system is in route FS and some

806
00:39:46,070 --> 00:39:48,750
some libraries I have to inject because

807
00:39:48,750 --> 00:39:53,030
otherwise the nighthawk tools don't run

808
00:39:53,390 --> 00:39:56,880
this is the nvram any file you can see

809
00:39:56,880 --> 00:39:59,640
all the user names passwords backdoor

810
00:39:59,640 --> 00:40:02,250
Netgear passwords everything in here by

811
00:40:02,250 --> 00:40:03,660
the way the default password to any

812
00:40:03,660 --> 00:40:06,890
Netgear device is gear guy and gear dog

813
00:40:06,890 --> 00:40:10,410
these are these are built-in and that

814
00:40:10,410 --> 00:40:11,820
you find out when you extract the

815
00:40:11,820 --> 00:40:14,510
firmware from the chip it's all in here

816
00:40:14,510 --> 00:40:19,610
so put stuff em with it

817
00:40:19,610 --> 00:40:22,860
maintenance mode man there's is a reason

818
00:40:22,860 --> 00:40:27,180
for that okay let's start the Netgear

819
00:40:27,180 --> 00:40:30,000
router when you click it it first loads

820
00:40:30,000 --> 00:40:33,330
all the NVRAM into the shared memory so

821
00:40:33,330 --> 00:40:36,120
this populates the dev nvram device

822
00:40:36,120 --> 00:40:39,000
which the kernel will then use in the

823
00:40:39,000 --> 00:40:41,250
router will then pick up all the nvm

824
00:40:41,250 --> 00:40:44,460
settings from here it takes a few

825
00:40:44,460 --> 00:40:46,830
seconds to load I'm just trying to you

826
00:40:46,830 --> 00:40:48,510
know have some optimization to do it

827
00:40:48,510 --> 00:40:51,000
faster this is as fast as I can get it

828
00:40:51,000 --> 00:40:52,740
going there's a lot of nvm entries

829
00:40:52,740 --> 00:40:56,370
though and once these nvm entries are

830
00:40:56,370 --> 00:41:03,540
loaded you get a prompt which says press

831
00:41:03,540 --> 00:41:07,740
ENTER to start you press Enter you now

832
00:41:07,740 --> 00:41:11,610
see all sorts of error messages start

833
00:41:11,610 --> 00:41:14,280
popping up on these devices on the

834
00:41:14,280 --> 00:41:17,370
console and sometimes you also see them

835
00:41:17,370 --> 00:41:20,970
on the shell environment takes a while

836
00:41:20,970 --> 00:41:23,600
to get it going

837
00:41:28,019 --> 00:41:31,019
think

838
00:41:39,069 --> 00:41:42,660
by now to start it up

839
00:41:51,340 --> 00:42:00,130
I'm sure enough here this is the actual

840
00:42:00,130 --> 00:42:03,580
Netgear router it even uses all the

841
00:42:03,580 --> 00:42:08,670
settings from the NVRAM dynamically and

842
00:42:08,670 --> 00:42:11,890
it functions just like a normal Netgear

843
00:42:11,890 --> 00:42:14,560
router you can again you can exploit it

844
00:42:14,560 --> 00:42:17,320
and do whatever you want with it so even

845
00:42:17,320 --> 00:42:20,920
for complex devices our mix works rather

846
00:42:20,920 --> 00:42:23,520
well ok

847
00:42:23,520 --> 00:42:26,770
future directions so I'm trying to

848
00:42:26,770 --> 00:42:29,350
automate some of the debugging tools I'm

849
00:42:29,350 --> 00:42:31,150
going to try and put some fuzzers into

850
00:42:31,150 --> 00:42:33,990
it especially work on the host FS region

851
00:42:33,990 --> 00:42:38,470
for for analysis static and dynamic all

852
00:42:38,470 --> 00:42:42,010
the goods these are the URLs are MX dot

853
00:42:42,010 --> 00:42:45,310
exploit lab dotnet has been announced in

854
00:42:45,310 --> 00:42:46,840
all new updates on my Twitter account

855
00:42:46,840 --> 00:42:49,540
should you wish to follow me my account

856
00:42:49,540 --> 00:42:54,400
is the real sawmill and if you want to

857
00:42:54,400 --> 00:42:57,160
take the IP camera CTF challenge there's

858
00:42:57,160 --> 00:42:59,440
a blog post up on blog not exploit lab

859
00:42:59,440 --> 00:43:04,430
dotnet with that I conclude my talk

860
00:43:04,430 --> 00:43:04,520
[Applause]

861
00:43:04,520 --> 00:43:19,920
[Music]

