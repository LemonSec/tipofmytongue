1
00:00:00,230 --> 00:00:02,299
[Music]

2
00:00:06,259 --> 00:00:08,760
today yeah

3
00:00:08,760 --> 00:00:11,340
my name is Aldo here today to talk a bit

4
00:00:11,340 --> 00:00:14,730
about network monitoring software or

5
00:00:14,730 --> 00:00:17,090
attacking network monitoring software

6
00:00:17,090 --> 00:00:21,000
it's a bit of a mix between the theory

7
00:00:21,000 --> 00:00:22,650
or I suppose what makes network

8
00:00:22,650 --> 00:00:25,439
monitoring a valuable target for

9
00:00:25,439 --> 00:00:28,529
attackers but it's mostly about a

10
00:00:28,529 --> 00:00:32,329
journey that I went on while doing some

11
00:00:32,329 --> 00:00:36,500
research on network monitoring software

12
00:00:36,500 --> 00:00:40,230
so some of it might be a little bit

13
00:00:40,230 --> 00:00:43,800
technical in into weeds but I sort of

14
00:00:43,800 --> 00:00:45,450
try to highlight the bits that are

15
00:00:45,450 --> 00:00:47,340
important and if you don't get the code

16
00:00:47,340 --> 00:00:49,620
bit just skip ahead stay with me till

17
00:00:49,620 --> 00:00:53,930
the end and it should all make sense so

18
00:00:53,930 --> 00:00:55,920
start by talking a little bit about

19
00:00:55,920 --> 00:01:01,170
myself I'm a lead security researcher

20
00:01:01,170 --> 00:01:05,309
with the Senate labs I started my career

21
00:01:05,309 --> 00:01:08,250
as a developer I did security

22
00:01:08,250 --> 00:01:09,930
administrator system administration for

23
00:01:09,930 --> 00:01:13,020
a while before I moved on to penetration

24
00:01:13,020 --> 00:01:16,049
testing red teaming and currently a

25
00:01:16,049 --> 00:01:19,409
security researcher full-time I also do

26
00:01:19,409 --> 00:01:22,100
training at conferences where I teach

27
00:01:22,100 --> 00:01:25,470
the theory were broad introduction to

28
00:01:25,470 --> 00:01:27,479
how to hunt for vulnerabilities in

29
00:01:27,479 --> 00:01:33,210
software now network monitoring software

30
00:01:33,210 --> 00:01:35,790
for those who don't know is essentially

31
00:01:35,790 --> 00:01:39,540
a central Alert monitoring solution for

32
00:01:39,540 --> 00:01:42,119
your network it'll analyze things like

33
00:01:42,119 --> 00:01:47,250
traffic or host service levels and give

34
00:01:47,250 --> 00:01:48,840
you alerts when something goes down

35
00:01:48,840 --> 00:01:50,729
lighting isn't working you're running

36
00:01:50,729 --> 00:01:53,939
out of disk space etc they're generally

37
00:01:53,939 --> 00:01:56,280
very complex systems because they have

38
00:01:56,280 --> 00:01:58,740
to deal with things like local resources

39
00:01:58,740 --> 00:02:00,990
on systems they have to deal with all

40
00:02:00,990 --> 00:02:02,969
manner of different devices or manner of

41
00:02:02,969 --> 00:02:06,090
different protocols the users are

42
00:02:06,090 --> 00:02:07,770
typically your networking or your system

43
00:02:07,770 --> 00:02:10,288
administrators so it's a privileged user

44
00:02:10,288 --> 00:02:12,240
base you know

45
00:02:12,240 --> 00:02:15,500
which is the primary reason why it's a

46
00:02:15,500 --> 00:02:19,650
juicy target if you hack the admin you

47
00:02:19,650 --> 00:02:21,210
have typically full access to the

48
00:02:21,210 --> 00:02:24,000
network or the systems active directory

49
00:02:24,000 --> 00:02:27,510
etc because it's an ongoing system

50
00:02:27,510 --> 00:02:29,310
that's usually active sessions that'll

51
00:02:29,310 --> 00:02:32,280
last for forever all right so the the

52
00:02:32,280 --> 00:02:34,680
admin will have the network monitoring

53
00:02:34,680 --> 00:02:37,320
system either in like a big screen in in

54
00:02:37,320 --> 00:02:38,940
a network operation central security

55
00:02:38,940 --> 00:02:42,150
operations center or they'll have a tab

56
00:02:42,150 --> 00:02:44,310
always open in the browser so that they

57
00:02:44,310 --> 00:02:46,830
can quickly switch to it do whatever

58
00:02:46,830 --> 00:02:49,890
activity needs to be done and the other

59
00:02:49,890 --> 00:02:51,750
thing is it has broad connectivity so

60
00:02:51,750 --> 00:02:53,730
usually it's located somewhere central

61
00:02:53,730 --> 00:02:55,680
in your network piece it needs to

62
00:02:55,680 --> 00:02:58,590
monitor resources across your network or

63
00:02:58,590 --> 00:03:00,870
at least integral in to connectivity

64
00:03:00,870 --> 00:03:04,400
between various parts of your network so

65
00:03:04,400 --> 00:03:06,900
you put all of those things together and

66
00:03:06,900 --> 00:03:10,950
you have a pretty valuable target for an

67
00:03:10,950 --> 00:03:14,340
attacker to go after the other thing is

68
00:03:14,340 --> 00:03:15,990
if you do compromised the network

69
00:03:15,990 --> 00:03:18,930
monitoring system itself you can do

70
00:03:18,930 --> 00:03:21,870
things like ongoing key logging to catch

71
00:03:21,870 --> 00:03:23,640
admin passwords as they're logging in

72
00:03:23,640 --> 00:03:25,410
you know hopefully they use two-factor

73
00:03:25,410 --> 00:03:27,840
authentication unique passwords for the

74
00:03:27,840 --> 00:03:31,350
NMS system etc in reality that may not

75
00:03:31,350 --> 00:03:34,830
be the case even if you can't do that

76
00:03:34,830 --> 00:03:38,070
you can usually leverage other things

77
00:03:38,070 --> 00:03:41,160
such as nails plugins to potentially

78
00:03:41,160 --> 00:03:43,980
execute commands Abdur commands on the

79
00:03:43,980 --> 00:03:46,020
system that's being managed but a

80
00:03:46,020 --> 00:03:48,630
network monitoring solution you might be

81
00:03:48,630 --> 00:03:51,000
able to silence an alarm as you're

82
00:03:51,000 --> 00:03:52,980
installing a rootkit and rebooting your

83
00:03:52,980 --> 00:03:56,550
server you know so this there's a lot of

84
00:03:56,550 --> 00:03:59,580
value for an attacker to persist on a

85
00:03:59,580 --> 00:04:03,600
network monitoring system specifically

86
00:04:03,600 --> 00:04:05,510
today we are talking about Libre NMS

87
00:04:05,510 --> 00:04:08,550
Libre NMS is an open source network

88
00:04:08,550 --> 00:04:11,160
monitoring solution written in PHP it

89
00:04:11,160 --> 00:04:15,470
has a lot of functionality a lot of

90
00:04:15,470 --> 00:04:20,579
extensibility it's relatively popular I

91
00:04:20,579 --> 00:04:22,019
would say

92
00:04:22,019 --> 00:04:24,900
very active development pretty polished

93
00:04:24,900 --> 00:04:29,310
and mature piece of software and it

94
00:04:29,310 --> 00:04:33,180
supports all manner of devices as well

95
00:04:33,180 --> 00:04:38,039
as local resource monitoring on on the

96
00:04:38,039 --> 00:04:40,500
actual devices it has a bunch of stuff

97
00:04:40,500 --> 00:04:41,610
that I've never looked at like the

98
00:04:41,610 --> 00:04:43,970
native iPhone app native Android apps

99
00:04:43,970 --> 00:04:48,810
has billing support so you can generate

100
00:04:48,810 --> 00:04:52,409
bills for the network based on usage and

101
00:04:52,409 --> 00:04:55,800
transfer etc I've really only looked at

102
00:04:55,800 --> 00:04:58,560
it from code quality perspective and

103
00:04:58,560 --> 00:05:01,400
then leverage that further on into

104
00:05:01,400 --> 00:05:05,370
vulnerabilities and it runs in your

105
00:05:05,370 --> 00:05:08,220
browser it looks like this it has a

106
00:05:08,220 --> 00:05:11,310
bunch of devices registered within its

107
00:05:11,310 --> 00:05:13,740
configuration and then it tracks things

108
00:05:13,740 --> 00:05:16,229
like you know available CPU available

109
00:05:16,229 --> 00:05:19,500
memory disk space transfer rates between

110
00:05:19,500 --> 00:05:22,379
the devices etc and it can capture this

111
00:05:22,379 --> 00:05:24,330
a number of different ways you know

112
00:05:24,330 --> 00:05:29,120
Nagios I mentioned before SNMP or

113
00:05:29,120 --> 00:05:32,159
collect either I actually don't know all

114
00:05:32,159 --> 00:05:35,940
the ways you can collect data but the

115
00:05:35,940 --> 00:05:37,319
end of the day it just generates this

116
00:05:37,319 --> 00:05:38,969
type of graph and then you know the

117
00:05:38,969 --> 00:05:40,319
sysadmin can come and look at that and

118
00:05:40,319 --> 00:05:42,860
go oh what give me this too much color

119
00:05:42,860 --> 00:05:48,960
here this is bad and react to it so in

120
00:05:48,960 --> 00:05:50,819
the past I have also looked at libra

121
00:05:50,819 --> 00:05:55,979
animus in three years ago I guess 2016 I

122
00:05:55,979 --> 00:05:59,340
found some vulnerabilities tentacled SQL

123
00:05:59,340 --> 00:06:03,029
injection and information disclosure the

124
00:06:03,029 --> 00:06:04,469
information of this cursor is actually

125
00:06:04,469 --> 00:06:07,050
somewhat mislabeled it's actually

126
00:06:07,050 --> 00:06:11,210
command-line argument injection but the

127
00:06:11,210 --> 00:06:13,740
commands that you can inject arguments

128
00:06:13,740 --> 00:06:16,169
to don't have any useful arguments that

129
00:06:16,169 --> 00:06:18,449
you can leverage for code execution so

130
00:06:18,449 --> 00:06:20,849
you can just do - - position and get the

131
00:06:20,849 --> 00:06:22,319
relative version for the software which

132
00:06:22,319 --> 00:06:24,360
may then give you offset or information

133
00:06:24,360 --> 00:06:29,039
about the operating system hardening

134
00:06:29,039 --> 00:06:32,639
version etc altogether have also in the

135
00:06:32,639 --> 00:06:34,560
past looked at cacti which is a

136
00:06:34,560 --> 00:06:36,420
competing platform

137
00:06:36,420 --> 00:06:39,960
where we found remote code execution via

138
00:06:39,960 --> 00:06:42,470
SQL injections that sort of second-order

139
00:06:42,470 --> 00:06:46,890
local file include I suppose also a

140
00:06:46,890 --> 00:06:49,710
pretty fun bug in addition to that and

141
00:06:49,710 --> 00:06:50,610
it's not covered in this presentation

142
00:06:50,610 --> 00:06:53,460
you know I've looked at IP space

143
00:06:53,460 --> 00:06:58,100
management software DNS control panels

144
00:06:58,100 --> 00:07:01,170
very stuff no software I quite enjoy

145
00:07:01,170 --> 00:07:04,340
looking at the sort of sysadmin tools

146
00:07:04,340 --> 00:07:07,560
because they seem not to have the

147
00:07:07,560 --> 00:07:09,390
security posture that you would expect

148
00:07:09,390 --> 00:07:12,150
so and they're highly valuable from an

149
00:07:12,150 --> 00:07:14,820
attacker attackers perspective so if I

150
00:07:14,820 --> 00:07:17,520
can you know research some stuff there

151
00:07:17,520 --> 00:07:19,530
deal with the vendor get the bags patch

152
00:07:19,530 --> 00:07:22,080
then make everyone more secure than you

153
00:07:22,080 --> 00:07:24,390
know that's good and I get to have some

154
00:07:24,390 --> 00:07:29,040
fun along the way so testing this sort

155
00:07:29,040 --> 00:07:32,760
of stuff so when you're looking at some

156
00:07:32,760 --> 00:07:34,320
software that you don't necessarily have

157
00:07:34,320 --> 00:07:37,590
in-house or you run all the time you

158
00:07:37,590 --> 00:07:39,690
typically want to have a running system

159
00:07:39,690 --> 00:07:43,410
to valuate and verify that whatever you

160
00:07:43,410 --> 00:07:47,340
find is actually explodable in the past

161
00:07:47,340 --> 00:07:50,370
the installation of Libre an MS was not

162
00:07:50,370 --> 00:07:53,030
trivial there's a lot of prerequisites

163
00:07:53,030 --> 00:07:55,260
because it's a complex piece of software

164
00:07:55,260 --> 00:07:58,590
I never meant bothered going through the

165
00:07:58,590 --> 00:08:01,740
full installation so the old bugs I

166
00:08:01,740 --> 00:08:03,360
found in the code and then I went to the

167
00:08:03,360 --> 00:08:05,880
demo they had an online demo site and I

168
00:08:05,880 --> 00:08:07,320
just verified the vulnerabilities there

169
00:08:07,320 --> 00:08:12,450
because most of my research before I

170
00:08:12,450 --> 00:08:14,100
became a full-time security researcher

171
00:08:14,100 --> 00:08:16,860
when I was a pen tester was done on my

172
00:08:16,860 --> 00:08:18,990
commute to and from work I had an hour

173
00:08:18,990 --> 00:08:22,250
under train and that's where I did it so

174
00:08:22,250 --> 00:08:25,320
connectivity my work was occasionally a

175
00:08:25,320 --> 00:08:26,669
problem because the train is moving in

176
00:08:26,669 --> 00:08:29,490
your 3d connection drops and time was

177
00:08:29,490 --> 00:08:32,039
obviously limited so I wouldn't spend

178
00:08:32,039 --> 00:08:35,130
you know several hours installing

179
00:08:35,130 --> 00:08:38,549
software with download dependencies so I

180
00:08:38,549 --> 00:08:40,799
would basically just skip the software

181
00:08:40,799 --> 00:08:43,080
if that was the requirement in order to

182
00:08:43,080 --> 00:08:44,730
validate the stuff

183
00:08:44,730 --> 00:08:48,680
however they now have VMs available

184
00:08:48,680 --> 00:08:50,480
they have multiple VMs published for

185
00:08:50,480 --> 00:08:53,329
every release that they do that means

186
00:08:53,329 --> 00:08:54,529
that testing across different versions

187
00:08:54,529 --> 00:08:56,720
is easier you just download the VM just

188
00:08:56,720 --> 00:08:59,290
spin it up and you can start testing um

189
00:08:59,290 --> 00:09:01,639
it also means that production systems

190
00:09:01,639 --> 00:09:03,920
are likely to be VMs because why go

191
00:09:03,920 --> 00:09:05,329
through the hassle of installing when

192
00:09:05,329 --> 00:09:07,399
you can just download the image expand

193
00:09:07,399 --> 00:09:09,649
the disk give it some more RAM more

194
00:09:09,649 --> 00:09:10,899
coarse off you go

195
00:09:10,899 --> 00:09:13,160
and that of course means that the

196
00:09:13,160 --> 00:09:15,199
default passwords of the VM if you don't

197
00:09:15,199 --> 00:09:17,899
change that nothing I say this talked in

198
00:09:17,899 --> 00:09:19,809
terms of like the vulnerabilities matter

199
00:09:19,809 --> 00:09:22,939
people can just log in as root right

200
00:09:22,939 --> 00:09:25,249
just don't do that please

201
00:09:25,249 --> 00:09:28,059
default passwords are bad we know this

202
00:09:28,059 --> 00:09:31,490
so that's really the the broad overview

203
00:09:31,490 --> 00:09:33,319
of network monitoring systems and and

204
00:09:33,319 --> 00:09:36,920
why attackers look at them and we'll

205
00:09:36,920 --> 00:09:40,759
really just talk about what I found what

206
00:09:40,759 --> 00:09:42,980
I did with how I did it etc this a bit

207
00:09:42,980 --> 00:09:46,699
of a bit of struggle but hopefully

208
00:09:46,699 --> 00:09:49,819
you'll be able to follow this along so a

209
00:09:49,819 --> 00:09:52,129
long time ago more than 10 years ago I

210
00:09:52,129 --> 00:09:56,089
was working as I said mean I had to

211
00:09:56,089 --> 00:09:58,420
maintain some code bases that we had

212
00:09:58,420 --> 00:10:01,730
that I didn't write and I was concerned

213
00:10:01,730 --> 00:10:03,620
about the code quality of the ongoing

214
00:10:03,620 --> 00:10:06,559
development so wrote a very simple

215
00:10:06,559 --> 00:10:08,839
script that use some regular expressions

216
00:10:08,839 --> 00:10:12,290
and it would look at get their of

217
00:10:12,290 --> 00:10:14,449
subversion in those days we run as a

218
00:10:14,449 --> 00:10:16,670
subversion hook and then just look for

219
00:10:16,670 --> 00:10:19,370
certain types of like oh no you really

220
00:10:19,370 --> 00:10:21,639
shouldn't do this so it very very simple

221
00:10:21,639 --> 00:10:24,589
and then over the years I have built on

222
00:10:24,589 --> 00:10:26,629
this based on other tools detection

223
00:10:26,629 --> 00:10:31,399
capability my own experience etc so like

224
00:10:31,399 --> 00:10:33,879
I said I used to do research on the

225
00:10:33,879 --> 00:10:36,679
under train so I would sit on a train I

226
00:10:36,679 --> 00:10:39,110
have a code base you know I'd find

227
00:10:39,110 --> 00:10:41,569
something I'd update the rules and then

228
00:10:41,569 --> 00:10:43,459
the next day when I was looking at or

229
00:10:43,459 --> 00:10:44,569
next week or whatever when I'm looking

230
00:10:44,569 --> 00:10:46,850
at a different piece of software I would

231
00:10:46,850 --> 00:10:49,730
then apply the learnings previously and

232
00:10:49,730 --> 00:10:52,749
over the years Grodd has improved a lot

233
00:10:52,749 --> 00:10:55,329
it is an endless source of

234
00:10:55,329 --> 00:10:57,529
vulnerabilities for me it's not like a

235
00:10:57,529 --> 00:10:59,809
complete source code review tool at all

236
00:10:59,809 --> 00:11:02,800
but it's a pretty good starting point

237
00:11:02,800 --> 00:11:06,830
so not so long ago back before mitre hit

238
00:11:06,830 --> 00:11:12,410
the initial 10,000 CVID numbers I was

239
00:11:12,410 --> 00:11:15,410
kind of pushed pushing to try to reach

240
00:11:15,410 --> 00:11:18,830
that number so I figured I would I would

241
00:11:18,830 --> 00:11:20,620
try to increase the rate at which

242
00:11:20,620 --> 00:11:25,130
identified vulnerabilities so I took the

243
00:11:25,130 --> 00:11:26,360
knowledge that I hadn't groped it and I

244
00:11:26,360 --> 00:11:29,000
made a new rule set that was really

245
00:11:29,000 --> 00:11:30,740
aimed at Hank finding really like the

246
00:11:30,740 --> 00:11:33,050
low-hanging fruit I wrote a simple taint

247
00:11:33,050 --> 00:11:37,250
analysis engine based on the initial

248
00:11:37,250 --> 00:11:39,920
sort of it's a a tech scrap feed scrape

249
00:11:39,920 --> 00:11:42,110
through Perl and back into grep for very

250
00:11:42,110 --> 00:11:45,830
basic Tate analysis and we've just

251
00:11:45,830 --> 00:11:48,350
focused primarily on like higher value

252
00:11:48,350 --> 00:11:50,530
bugs SQL injection remote code execution

253
00:11:50,530 --> 00:11:55,280
no cross-site scripting no CSRs no

254
00:11:55,280 --> 00:11:56,930
information disclosure it it would just

255
00:11:56,930 --> 00:12:01,180
sort of high-value bugs and then I wrote

256
00:12:01,180 --> 00:12:04,100
another script that would crawl github

257
00:12:04,100 --> 00:12:06,230
and find like the most recently updated

258
00:12:06,230 --> 00:12:08,960
repos the most popular repos and then

259
00:12:08,960 --> 00:12:11,180
overnight it would clone and scan that

260
00:12:11,180 --> 00:12:13,510
code generate a report and then

261
00:12:13,510 --> 00:12:16,250
depending on how busy I was I reviewed

262
00:12:16,250 --> 00:12:20,000
at some some stage during the week so I

263
00:12:20,000 --> 00:12:22,910
call this flat line from the flat line

264
00:12:22,910 --> 00:12:27,110
construct from Neuromancer I'm not sure

265
00:12:27,110 --> 00:12:29,500
if it's really up to up to the standard

266
00:12:29,500 --> 00:12:32,300
but you know I left just running for two

267
00:12:32,300 --> 00:12:35,360
years since I've github bucked me and it

268
00:12:35,360 --> 00:12:36,830
found more bugs than I had the

269
00:12:36,830 --> 00:12:40,550
capability to to review so I did the

270
00:12:40,550 --> 00:12:42,380
numbers and this not too long ago and

271
00:12:42,380 --> 00:12:46,240
over that two-year period it found but

272
00:12:46,240 --> 00:12:49,700
94,000 runner ability candidates in the

273
00:12:49,700 --> 00:12:52,040
code basis that it scanned now a lot of

274
00:12:52,040 --> 00:12:54,770
those were valuable bugs it's you know

275
00:12:54,770 --> 00:12:57,410
people's homework or whatever or it's a

276
00:12:57,410 --> 00:13:01,190
it's a CMS system that has two users and

277
00:13:01,190 --> 00:13:03,530
a lot of them are duplicates because and

278
00:13:03,530 --> 00:13:05,750
actively after that repo might get

279
00:13:05,750 --> 00:13:08,810
scanned every day for a whole week so

280
00:13:08,810 --> 00:13:11,570
it's not a it's just a number or

281
00:13:11,570 --> 00:13:13,379
counting vulnerabilities is necessary

282
00:13:13,379 --> 00:13:17,429
a good metric but it sort of goes to

283
00:13:17,429 --> 00:13:19,470
show that this was me doing it for fun I

284
00:13:19,470 --> 00:13:21,529
can guarantee you that people that have

285
00:13:21,529 --> 00:13:24,929
financial interests in hacking software

286
00:13:24,929 --> 00:13:27,239
they're absolutely doing this probably a

287
00:13:27,239 --> 00:13:31,949
far larger scale than what I do so it's

288
00:13:31,949 --> 00:13:34,169
sort of important to remember that you

289
00:13:34,169 --> 00:13:35,549
can't just think that you're selling

290
00:13:35,549 --> 00:13:36,720
yourself insourcing because something

291
00:13:36,720 --> 00:13:38,220
hasn't had a vulnerability in the past

292
00:13:38,220 --> 00:13:41,489
that it it won't be look at that

293
00:13:41,489 --> 00:13:44,189
so I also recently released a new

294
00:13:44,189 --> 00:13:47,099
version of abroad it and because I

295
00:13:47,099 --> 00:13:49,139
couldn't be bothered updating the the

296
00:13:49,139 --> 00:13:50,639
framework to do this again

297
00:13:50,639 --> 00:13:53,099
I just threw the the flatline code in

298
00:13:53,099 --> 00:13:55,499
brought it it would need a little bit of

299
00:13:55,499 --> 00:13:56,909
elbow grease if you wanted to set it up

300
00:13:56,909 --> 00:13:59,759
yourself if you do do that don't do what

301
00:13:59,759 --> 00:14:02,849
I did and scrape github user API so you

302
00:14:02,849 --> 00:14:09,899
don't get RP bent just anyway so like I

303
00:14:09,899 --> 00:14:11,849
said in 2016 I looked at Lieber and a

304
00:14:11,849 --> 00:14:14,189
mess and then in 2018 it showed up again

305
00:14:14,189 --> 00:14:19,859
in my automated scanner in February now

306
00:14:19,859 --> 00:14:22,339
these two lines of code in particular I

307
00:14:22,339 --> 00:14:24,329
remembered from the first time when I

308
00:14:24,329 --> 00:14:25,559
looked at it and I know that these are

309
00:14:25,559 --> 00:14:27,869
both false positives so the first one

310
00:14:27,869 --> 00:14:30,839
that's in red the line above it verifies

311
00:14:30,839 --> 00:14:33,809
that it's actually a numeric value so

312
00:14:33,809 --> 00:14:37,949
you can well you could say to insecure

313
00:14:37,949 --> 00:14:39,959
direct object reference but it's not

314
00:14:39,959 --> 00:14:42,809
particularly useful in this case and the

315
00:14:42,809 --> 00:14:45,179
other one actually uses a whitelist so

316
00:14:45,179 --> 00:14:48,479
even though it's doing super global user

317
00:14:48,479 --> 00:14:51,959
controlled variable concatenated with in

318
00:14:51,959 --> 00:14:56,279
a process cool it's actually safe it's

319
00:14:56,279 --> 00:14:58,699
bad practice but it's safe

320
00:14:58,699 --> 00:15:03,059
so anyway it's sure okay it's been a

321
00:15:03,059 --> 00:15:04,529
while there's probably new code in here

322
00:15:04,529 --> 00:15:06,689
that might have new functionality or

323
00:15:06,689 --> 00:15:08,039
maybe a miss sighting last time I should

324
00:15:08,039 --> 00:15:09,629
I should ordered this again so I put it

325
00:15:09,629 --> 00:15:13,049
on my to-do list but that period of my

326
00:15:13,049 --> 00:15:15,269
life I was I was far too busy to to go

327
00:15:15,269 --> 00:15:18,749
back and revisit a large code base so I

328
00:15:18,749 --> 00:15:22,709
kinda just left it and then earlier in

329
00:15:22,709 --> 00:15:27,120
this year I had an opportunity to

330
00:15:27,120 --> 00:15:28,920
go back and revisit it I've been

331
00:15:28,920 --> 00:15:31,980
wrangling with a particular annoying

332
00:15:31,980 --> 00:15:35,220
custom pool implementation in c and I

333
00:15:35,220 --> 00:15:36,960
needed a break and something different

334
00:15:36,960 --> 00:15:43,520
so I went back to PHP and admin tools so

335
00:15:43,520 --> 00:15:47,190
at this point I started just grab I

336
00:15:47,190 --> 00:15:48,900
grabbed a copy of it and I started

337
00:15:48,900 --> 00:15:52,500
reviewing the code not just for the

338
00:15:52,500 --> 00:15:54,120
really low hanging fruit but more

339
00:15:54,120 --> 00:15:56,130
overall for things that are potentially

340
00:15:56,130 --> 00:15:59,580
interesting and this one caught my mind

341
00:15:59,580 --> 00:16:03,450
well my rights it's a shell xx at the

342
00:16:03,450 --> 00:16:06,029
running a command and the command is our

343
00:16:06,029 --> 00:16:09,720
our D command okay

344
00:16:09,720 --> 00:16:11,370
so typically when you find something

345
00:16:11,370 --> 00:16:13,770
like this where it's just a variable it

346
00:16:13,770 --> 00:16:15,870
means that they're doing a bunch of

347
00:16:15,870 --> 00:16:18,300
string concatenation to make this

348
00:16:18,300 --> 00:16:20,550
variable contain a larger command and

349
00:16:20,550 --> 00:16:23,070
then running it so we need to work out

350
00:16:23,070 --> 00:16:28,230
how is this command constructed and so

351
00:16:28,230 --> 00:16:32,040
we go and look at this file which isn't

352
00:16:32,040 --> 00:16:34,410
include files it's not a direct PHP

353
00:16:34,410 --> 00:16:37,380
scripting in itself and we see this a

354
00:16:37,380 --> 00:16:39,270
couple of things your first up is it

355
00:16:39,270 --> 00:16:41,970
takes all these variables that come from

356
00:16:41,970 --> 00:16:44,160
the Euro right which is the the get

357
00:16:44,160 --> 00:16:48,200
variables and then it turns that into

358
00:16:48,200 --> 00:16:53,730
its own array and then it sets some

359
00:16:53,730 --> 00:16:57,150
default things in obviously there's an

360
00:16:57,150 --> 00:16:58,770
interesting fixed me remove these I'm

361
00:16:58,770 --> 00:17:01,230
not entirely sure but that could be an

362
00:17:01,230 --> 00:17:03,029
indicator that this is like legacy code

363
00:17:03,029 --> 00:17:04,770
and we we probably want to see where

364
00:17:04,770 --> 00:17:07,500
this ends up so we take note of those

365
00:17:07,500 --> 00:17:09,390
okay we get essentially at this point we

366
00:17:09,390 --> 00:17:11,550
know that user controlled variables or

367
00:17:11,550 --> 00:17:13,250
user control input is going into these

368
00:17:13,250 --> 00:17:18,569
properties and and then we jump down and

369
00:17:18,569 --> 00:17:21,959
we actually find the code that we saw in

370
00:17:21,959 --> 00:17:25,290
the in the initial scan and we see here

371
00:17:25,290 --> 00:17:27,990
that there's a call to our ID tall grass

372
00:17:27,990 --> 00:17:31,190
and then if the height is bigger than 99

373
00:17:31,190 --> 00:17:34,140
then it runs to command and at this

374
00:17:34,140 --> 00:17:36,210
point I sort of make jump to the

375
00:17:36,210 --> 00:17:39,680
conclusion that the r detalle graph

376
00:17:39,680 --> 00:17:44,330
function constructs the command as a

377
00:17:44,330 --> 00:17:47,420
global rather than as a return value and

378
00:17:47,420 --> 00:17:49,040
it's just probably just more bad

379
00:17:49,040 --> 00:17:53,870
development practice so most likely this

380
00:17:53,870 --> 00:17:56,360
thing is it's it's when we want to

381
00:17:56,360 --> 00:18:02,180
generate a graph and we will take some

382
00:18:02,180 --> 00:18:02,870
options

383
00:18:02,870 --> 00:18:04,310
these options are probably the

384
00:18:04,310 --> 00:18:05,780
properties for the graph that we saw

385
00:18:05,780 --> 00:18:07,340
earlier things like the the width and

386
00:18:07,340 --> 00:18:09,340
the height which are used to controlled

387
00:18:09,340 --> 00:18:12,110
values and then running a command that

388
00:18:12,110 --> 00:18:14,690
seems like a very good candidate for

389
00:18:14,690 --> 00:18:17,330
command injection so this one I I

390
00:18:17,330 --> 00:18:19,280
stopped reading the code and we just

391
00:18:19,280 --> 00:18:20,990
jump straight into the web interface to

392
00:18:20,990 --> 00:18:23,390
see whether or not you know this is

393
00:18:23,390 --> 00:18:26,180
something feasible and we see at the top

394
00:18:26,180 --> 00:18:28,850
here we have this type of user

395
00:18:28,850 --> 00:18:32,860
controlled values the device from two

396
00:18:32,860 --> 00:18:37,670
graph type etc so that seems like a very

397
00:18:37,670 --> 00:18:41,120
likely mapping that the graph values or

398
00:18:41,120 --> 00:18:43,340
the the variables that we saw kind of

399
00:18:43,340 --> 00:18:45,860
corresponds with what we're seeing in

400
00:18:45,860 --> 00:18:48,110
your eye and we also see that in this

401
00:18:48,110 --> 00:18:50,390
case it's not actually using traditional

402
00:18:50,390 --> 00:18:52,850
get variables would like the ampersand

403
00:18:52,850 --> 00:18:55,760
but rather a slash so we know it has its

404
00:18:55,760 --> 00:18:58,640
own handler for dealing with user input

405
00:18:58,640 --> 00:19:01,280
in this particular way and the code that

406
00:19:01,280 --> 00:19:05,180
we saw earlier is if in case in cases

407
00:19:05,180 --> 00:19:07,910
where the URL doesn't follow this format

408
00:19:07,910 --> 00:19:10,490
it will convert it internally into the

409
00:19:10,490 --> 00:19:13,100
same representation and then that way

410
00:19:13,100 --> 00:19:16,160
the developers can keep consistent

411
00:19:16,160 --> 00:19:20,240
interface in their code but how do we

412
00:19:20,240 --> 00:19:22,630
actually know what what's going on here

413
00:19:22,630 --> 00:19:25,430
but luckily the developers have left

414
00:19:25,430 --> 00:19:27,200
debug function now will be available

415
00:19:27,200 --> 00:19:29,210
literally throughout all of New York

416
00:19:29,210 --> 00:19:31,910
Libre NMS so you can either like this

417
00:19:31,910 --> 00:19:33,830
typically be a button to say a show

418
00:19:33,830 --> 00:19:35,630
what's going on in the background or you

419
00:19:35,630 --> 00:19:39,560
can enable debug just by adding debug to

420
00:19:39,560 --> 00:19:43,910
the Euro so when we then go and look at

421
00:19:43,910 --> 00:19:46,100
the commands mob we see here oh it's

422
00:19:46,100 --> 00:19:48,860
calling our ID tool with the graph and

423
00:19:48,860 --> 00:19:52,030
there's a whole bunch of data being

424
00:19:52,030 --> 00:19:55,370
provided and it also shows the output of

425
00:19:55,370 --> 00:19:58,310
the tool so this this will probably let

426
00:19:58,310 --> 00:20:01,250
us very quickly determine whether or not

427
00:20:01,250 --> 00:20:03,710
you know if we put a command in here we

428
00:20:03,710 --> 00:20:06,410
should be able to see both that the

429
00:20:06,410 --> 00:20:07,850
command is being injected but also

430
00:20:07,850 --> 00:20:09,620
hopefully the output should give us the

431
00:20:09,620 --> 00:20:11,210
output of the command and you know

432
00:20:11,210 --> 00:20:17,300
that's it we can go home so I jump into

433
00:20:17,300 --> 00:20:21,380
a bit which gives me a lower layer view

434
00:20:21,380 --> 00:20:25,070
of what's going on I add one of the

435
00:20:25,070 --> 00:20:28,880
variables that I had from the code that

436
00:20:28,880 --> 00:20:31,630
seems friendly so I take tightly because

437
00:20:31,630 --> 00:20:34,010
title is something that usually wouldn't

438
00:20:34,010 --> 00:20:38,690
be filtered to hardly write it's not

439
00:20:38,690 --> 00:20:40,750
going to be converted to an integer or

440
00:20:40,750 --> 00:20:43,640
necessarily restricted for all sorts of

441
00:20:43,640 --> 00:20:45,590
characters that are considered bad or

442
00:20:45,590 --> 00:20:49,900
illegal so I add that and I notice that

443
00:20:49,900 --> 00:20:53,240
the the title like I gave it it's not in

444
00:20:53,240 --> 00:20:58,010
the rrdtool command okay so it didn't

445
00:20:58,010 --> 00:21:01,220
get injected but also notice that it

446
00:21:01,220 --> 00:21:04,070
does get injected as a parameter to a

447
00:21:04,070 --> 00:21:05,990
different viewer i which is graphed at

448
00:21:05,990 --> 00:21:10,040
PHP so maybe this more than one type of

449
00:21:10,040 --> 00:21:13,820
graph in this thing so let's go see what

450
00:21:13,820 --> 00:21:17,120
graph PHP does and it generates the

451
00:21:17,120 --> 00:21:18,860
actual image I just followed the URI I'm

452
00:21:18,860 --> 00:21:20,870
not manipulating anything at this point

453
00:21:20,870 --> 00:21:26,150
we see we get a PNG back okay but I

454
00:21:26,150 --> 00:21:27,140
would like to know what's actually

455
00:21:27,140 --> 00:21:30,220
happening here and like I said luckily

456
00:21:30,220 --> 00:21:32,510
it has the feature we can just add

457
00:21:32,510 --> 00:21:36,650
debugging you throw debug into URI he's

458
00:21:36,650 --> 00:21:38,570
all the debug stuff it shows stuff

459
00:21:38,570 --> 00:21:40,100
that's not related like you know

460
00:21:40,100 --> 00:21:42,890
querying the database and we can see

461
00:21:42,890 --> 00:21:44,990
that all of the parameter of the queries

462
00:21:44,990 --> 00:21:46,940
are parameter a so we couldn't do SQL

463
00:21:46,940 --> 00:21:49,760
injection which is also handy to know

464
00:21:49,760 --> 00:21:51,020
that we don't have to go down that

465
00:21:51,020 --> 00:21:54,110
rabbit hole and then we see the command

466
00:21:54,110 --> 00:21:57,350
that it's running okay

467
00:21:57,350 --> 00:22:02,160
that's good but we see that here it's

468
00:22:02,160 --> 00:22:04,920
it's searching but it's not showing up

469
00:22:04,920 --> 00:22:08,160
the title that we gave it so again the

470
00:22:08,160 --> 00:22:09,920
title that's not being injected

471
00:22:09,920 --> 00:22:13,260
okay let's before we before we go back

472
00:22:13,260 --> 00:22:15,390
and try to work out why title isn't

473
00:22:15,390 --> 00:22:18,480
being injected or included because I'm

474
00:22:18,480 --> 00:22:19,500
pretty sure that was one of the

475
00:22:19,500 --> 00:22:20,310
variables

476
00:22:20,310 --> 00:22:22,980
let's try one of the other variables

477
00:22:22,980 --> 00:22:29,310
instead yeah okay so this one I didn't

478
00:22:29,310 --> 00:22:32,820
put there we see we we add semicolon ID

479
00:22:32,820 --> 00:22:36,570
to height it shows up here and we get

480
00:22:36,570 --> 00:22:41,190
some output all right now you can see

481
00:22:41,190 --> 00:22:43,830
triple w dot I just said did maybe we

482
00:22:43,830 --> 00:22:48,690
had an injection here but I would

483
00:22:48,690 --> 00:22:55,260
imagine that if we had an injection this

484
00:22:55,260 --> 00:22:57,600
the the remaining bit of code here

485
00:22:57,600 --> 00:23:00,060
should have cost an error and we didn't

486
00:23:00,060 --> 00:23:03,090
get an error so probably didn't do a

487
00:23:03,090 --> 00:23:05,010
successful injection also we'll see that

488
00:23:05,010 --> 00:23:08,130
on closer inspection the the triple W

489
00:23:08,130 --> 00:23:09,930
data it's actually the file and group

490
00:23:09,930 --> 00:23:15,210
ownership of the file it's it's not it's

491
00:23:15,210 --> 00:23:19,020
not the output of the ID command so we

492
00:23:19,020 --> 00:23:21,120
didn't have a successful command

493
00:23:21,120 --> 00:23:24,000
injection so let's let's do the usual

494
00:23:24,000 --> 00:23:26,460
brute force as you do as a pen tester

495
00:23:26,460 --> 00:23:28,350
you're like all right well maybe some

496
00:23:28,350 --> 00:23:31,620
are : this is filtered and it semicolon

497
00:23:31,620 --> 00:23:33,390
or it's a my Colin got escaped and so

498
00:23:33,390 --> 00:23:35,660
didn't work so let's try pipe character

499
00:23:35,660 --> 00:23:38,370
ampersand back takes Forks environment

500
00:23:38,370 --> 00:23:41,010
variables newline command line injection

501
00:23:41,010 --> 00:23:43,860
arguments etc just run through the whole

502
00:23:43,860 --> 00:23:45,900
thing and then sort of you know one by

503
00:23:45,900 --> 00:23:47,610
one see what the output is true maybe

504
00:23:47,610 --> 00:23:50,220
try combining multiple in case there is

505
00:23:50,220 --> 00:23:53,310
like a white list and then I notice this

506
00:23:53,310 --> 00:23:56,700
thing here where if we do newline LS

507
00:23:56,700 --> 00:24:00,600
newline it seems to have worked we see

508
00:24:00,600 --> 00:24:03,090
LS gets injected there's a new line

509
00:24:03,090 --> 00:24:05,520
being injected here and another new line

510
00:24:05,520 --> 00:24:09,960
there we see what appears to be

511
00:24:09,960 --> 00:24:14,070
directories being listed

512
00:24:14,070 --> 00:24:19,710
and we see an error from the XS - see

513
00:24:19,710 --> 00:24:24,600
here so that kinda seems like it worked

514
00:24:24,600 --> 00:24:28,800
but also at the same time it's

515
00:24:28,800 --> 00:24:31,500
complaining about unknown function - see

516
00:24:31,500 --> 00:24:33,930
where as if this was command injection I

517
00:24:33,930 --> 00:24:36,780
would have expected invalid command or

518
00:24:36,780 --> 00:24:41,070
command not found not function so

519
00:24:41,070 --> 00:24:43,560
obviously at this point we can say well

520
00:24:43,560 --> 00:24:45,810
it behaves as if it's a command

521
00:24:45,810 --> 00:24:48,540
injection in the code it kind of look

522
00:24:48,540 --> 00:24:51,870
like a command injection but it's

523
00:24:51,870 --> 00:24:55,290
definitely not command injection so I

524
00:24:55,290 --> 00:24:58,650
guess I miss classified this bug at this

525
00:24:58,650 --> 00:25:02,010
point we need to go deeper and the only

526
00:25:02,010 --> 00:25:04,080
thing to do is to start reading more

527
00:25:04,080 --> 00:25:09,630
code so we can go back and we can see

528
00:25:09,630 --> 00:25:12,030
well the initial call was to our detour

529
00:25:12,030 --> 00:25:14,430
graph before it then would call the

530
00:25:14,430 --> 00:25:18,450
command and we'll see at this point it's

531
00:25:18,450 --> 00:25:21,450
actually doing something else and that

532
00:25:21,450 --> 00:25:24,120
is we see here first of all it has the

533
00:25:24,120 --> 00:25:26,280
debug source to command a command return

534
00:25:26,280 --> 00:25:29,220
okay well that's that's great I thought

535
00:25:29,220 --> 00:25:31,320
that came from somewhere else but it's

536
00:25:31,320 --> 00:25:33,710
not the other thing we can see here is

537
00:25:33,710 --> 00:25:39,500
it does a initialize and a build command

538
00:25:39,500 --> 00:25:43,170
graph graph file and we saw a graph in

539
00:25:43,170 --> 00:25:47,310
the in the output from the debug so this

540
00:25:47,310 --> 00:25:50,130
might really be where we are and then

541
00:25:50,130 --> 00:25:53,450
it's doing an implode send command CMD

542
00:25:53,450 --> 00:25:57,780
which is this but of course the variable

543
00:25:57,780 --> 00:26:02,190
is CMD it's not CR Rd CMD which is the

544
00:26:02,190 --> 00:26:04,790
one that we thought we were injecting to

545
00:26:04,790 --> 00:26:08,310
so we got to go deeper still and so we

546
00:26:08,310 --> 00:26:10,470
can look at the ER ID tool initialize

547
00:26:10,470 --> 00:26:16,410
and we see okay first it defines a bunch

548
00:26:16,410 --> 00:26:18,540
of pipe standard in standard our

549
00:26:18,540 --> 00:26:20,970
standard error and then we can see

550
00:26:20,970 --> 00:26:24,530
actually spawns a process

551
00:26:24,679 --> 00:26:29,200
it's doing asynchronous or synchronous

552
00:26:29,200 --> 00:26:34,039
processing so at this point it's like

553
00:26:34,039 --> 00:26:36,049
okay well it looks like it is spawning

554
00:26:36,049 --> 00:26:39,230
maybe a demon for the Rd tool and then

555
00:26:39,230 --> 00:26:45,200
it's using pipes to communicate as we

556
00:26:45,200 --> 00:26:47,629
also see it looks like it's running the

557
00:26:47,629 --> 00:26:50,480
command our D tool would stand it in as

558
00:26:50,480 --> 00:26:52,940
the input it looks like it's it's

559
00:26:52,940 --> 00:26:54,950
communicating through pipes to this

560
00:26:54,950 --> 00:26:57,409
thing and it's not necessarily running

561
00:26:57,409 --> 00:27:00,429
the commands directly from the shell

562
00:27:00,429 --> 00:27:05,059
okay well at that point we aren't

563
00:27:05,059 --> 00:27:06,980
actually running commands at all we are

564
00:27:06,980 --> 00:27:09,049
feeding commands or feeding data into a

565
00:27:09,049 --> 00:27:13,369
command but it ran LS that means

566
00:27:13,369 --> 00:27:16,789
something inside rrdtool decided that

567
00:27:16,789 --> 00:27:21,490
I'm going to execute LS or I'm going to

568
00:27:21,490 --> 00:27:25,009
do slightly equivalent of LS and then

569
00:27:25,009 --> 00:27:28,159
feed you back the data so in order to

570
00:27:28,159 --> 00:27:29,929
understand what's going on here we need

571
00:27:29,929 --> 00:27:32,990
to we need to shift sideways so we can

572
00:27:32,990 --> 00:27:35,840
now look at our addy tool an RD tool is

573
00:27:35,840 --> 00:27:38,240
surround robin and database toolset it's

574
00:27:38,240 --> 00:27:40,490
essentially just used to generate the

575
00:27:40,490 --> 00:27:43,220
fancy grass which you might have seen

576
00:27:43,220 --> 00:27:45,679
something similar in the libre NMS

577
00:27:45,679 --> 00:27:50,119
screenshot that i showed now Aarthi tool

578
00:27:50,119 --> 00:27:54,460
is also very complex it has a lot of

579
00:27:54,460 --> 00:27:59,600
different functions it said that - see

580
00:27:59,600 --> 00:28:01,100
it's not a valid function yeah I think

581
00:28:01,100 --> 00:28:03,649
we're onto something here and graph

582
00:28:03,649 --> 00:28:06,590
where we saw a graph also we can see

583
00:28:06,590 --> 00:28:11,929
that it does support bindings from Perl

584
00:28:11,929 --> 00:28:16,129
Python t-cell PHP and it has remote

585
00:28:16,129 --> 00:28:19,759
control through a set of pipes okay that

586
00:28:19,759 --> 00:28:24,259
sounds exactly like what's happening so

587
00:28:24,259 --> 00:28:25,999
this point I started reading all of the

588
00:28:25,999 --> 00:28:29,210
documentation for our D tool I didn't

589
00:28:29,210 --> 00:28:31,669
actually dwelve into any of the code all

590
00:28:31,669 --> 00:28:34,039
of the documentation was sufficient so

591
00:28:34,039 --> 00:28:35,330
we have identified a couple of things

592
00:28:35,330 --> 00:28:37,730
here 100 is the

593
00:28:37,730 --> 00:28:40,850
one of the lists we are calling

594
00:28:40,850 --> 00:28:42,830
functions so we said we saw a graph we

595
00:28:42,830 --> 00:28:45,680
saw - C being complained us like not a

596
00:28:45,680 --> 00:28:47,810
function but we're also seeing command

597
00:28:47,810 --> 00:28:50,390
line or function arguments like - C as

598
00:28:50,390 --> 00:28:52,970
an argument so we can look at both the

599
00:28:52,970 --> 00:28:55,850
functions as well as the arguments to

600
00:28:55,850 --> 00:28:58,730
the individual functions and I developed

601
00:28:58,730 --> 00:29:00,380
a whole set of different exploit

602
00:29:00,380 --> 00:29:03,050
primitives so you can inject a function

603
00:29:03,050 --> 00:29:04,700
that will do information disclosure you

604
00:29:04,700 --> 00:29:05,990
can inject a function that will do

605
00:29:05,990 --> 00:29:08,780
directory traversal cross that scripting

606
00:29:08,780 --> 00:29:10,490
service odd request forgery or

607
00:29:10,490 --> 00:29:15,670
server-side cross-site fourth port

608
00:29:15,670 --> 00:29:19,820
enumeration a directory read directory

609
00:29:19,820 --> 00:29:23,180
write file read file right so these are

610
00:29:23,180 --> 00:29:27,260
all just generic things that already

611
00:29:27,260 --> 00:29:31,660
tool can be convinced to do without

612
00:29:31,660 --> 00:29:34,450
necessarily being tied to a specific

613
00:29:34,450 --> 00:29:37,190
vulnerability it's a bit like the notion

614
00:29:37,190 --> 00:29:40,610
of Papa Bret and SH based but for

615
00:29:40,610 --> 00:29:42,440
overflow it's it's like a standard

616
00:29:42,440 --> 00:29:46,100
technique so just quickly run through

617
00:29:46,100 --> 00:29:48,560
the the various ones that I found so

618
00:29:48,560 --> 00:29:51,740
info it basically just dumps the version

619
00:29:51,740 --> 00:29:55,070
and so switch tool functions are

620
00:29:55,070 --> 00:29:57,440
available as well as The Ballad remote

621
00:29:57,440 --> 00:29:58,490
commands and we'll see here there's

622
00:29:58,490 --> 00:30:00,830
available remote command LS so while

623
00:30:00,830 --> 00:30:02,810
that's not a function technically within

624
00:30:02,810 --> 00:30:05,060
our ad tool itself it is a function

625
00:30:05,060 --> 00:30:07,970
through the remote control interface

626
00:30:07,970 --> 00:30:12,260
that lets you do other things so we have

627
00:30:12,260 --> 00:30:16,400
LS CD Mac directory parent working

628
00:30:16,400 --> 00:30:17,030
directory

629
00:30:17,030 --> 00:30:19,630
quit quit it's not particularly useful

630
00:30:19,630 --> 00:30:21,710
you can't run

631
00:30:21,710 --> 00:30:23,510
in this case you can't remem DOS because

632
00:30:23,510 --> 00:30:26,060
it would spawn the process again the

633
00:30:26,060 --> 00:30:29,500
next time you try to do anything with it

634
00:30:29,500 --> 00:30:33,260
directory traversal essentially you can

635
00:30:33,260 --> 00:30:35,180
because it supports CD you can just do

636
00:30:35,180 --> 00:30:42,350
CD CD CD etc as one of the functions and

637
00:30:42,350 --> 00:30:43,640
we can stack function so you can have

638
00:30:43,640 --> 00:30:45,560
multiple functions just separated by new

639
00:30:45,560 --> 00:30:48,200
lines so we can combine multiple of

640
00:30:48,200 --> 00:30:50,350
these

641
00:30:50,390 --> 00:30:54,990
cross-site scripting so we can do - f4 -

642
00:30:54,990 --> 00:30:58,470
- image info give it a string the string

643
00:30:58,470 --> 00:31:01,110
has to have percentage as percentage Lu

644
00:31:01,110 --> 00:31:05,670
percentage Lu but you can just instead

645
00:31:05,670 --> 00:31:08,040
of doing image source you just do script

646
00:31:08,040 --> 00:31:12,570
tags whatever and it will execute or

647
00:31:12,570 --> 00:31:17,940
generate cross-site scripting or tags in

648
00:31:17,940 --> 00:31:22,650
in the tool output service our request

649
00:31:22,650 --> 00:31:25,500
forgery so you can specify a demon

650
00:31:25,500 --> 00:31:27,810
address both as the UNIX socket but also

651
00:31:27,810 --> 00:31:30,930
as like an IP port pair you can connect

652
00:31:30,930 --> 00:31:33,690
to it I haven't looked at whether or not

653
00:31:33,690 --> 00:31:37,200
you could potentially make this connect

654
00:31:37,200 --> 00:31:38,670
to yourself and then feed it some

655
00:31:38,670 --> 00:31:42,210
interesting data to manipulate what the

656
00:31:42,210 --> 00:31:43,980
tool does based on what's in the

657
00:31:43,980 --> 00:31:48,450
database I think that might be an

658
00:31:48,450 --> 00:31:50,790
interesting thing to look at I will talk

659
00:31:50,790 --> 00:31:53,310
a little bit about what few future

660
00:31:53,310 --> 00:31:57,570
research at the end directory read so we

661
00:31:57,570 --> 00:32:00,930
already saw LS works now LS doesn't take

662
00:32:00,930 --> 00:32:02,400
any arguments so you have to combine it

663
00:32:02,400 --> 00:32:06,180
with CD to go to wherever you want or

664
00:32:06,180 --> 00:32:09,270
you can do lists list will let you give

665
00:32:09,270 --> 00:32:11,490
an argument but it only lists

666
00:32:11,490 --> 00:32:15,750
directories and rrd databases in that

667
00:32:15,750 --> 00:32:17,220
directory so it doesn't list all of the

668
00:32:17,220 --> 00:32:24,420
files right directory right just comes

669
00:32:24,420 --> 00:32:26,340
back to the standard remote control

670
00:32:26,340 --> 00:32:30,330
function like CD and LS we have Mac

671
00:32:30,330 --> 00:32:32,820
directory so we can just create a

672
00:32:32,820 --> 00:32:35,430
directory and then enter into that

673
00:32:35,430 --> 00:32:39,150
directory file read I have that in

674
00:32:39,150 --> 00:32:43,200
quotes because what happens is you give

675
00:32:43,200 --> 00:32:46,740
it a restore functions you say restore

676
00:32:46,740 --> 00:32:51,570
space source file which is supposed to

677
00:32:51,570 --> 00:32:56,630
be an XML file and then output file and

678
00:32:56,630 --> 00:32:58,710
so what will happen it will read like if

679
00:32:58,710 --> 00:33:00,420
you give it eat C password it'll read it

680
00:33:00,420 --> 00:33:02,040
C password and then it'll complain that

681
00:33:02,040 --> 00:33:02,980
there's no exit

682
00:33:02,980 --> 00:33:05,289
the first line of each C password and

683
00:33:05,289 --> 00:33:07,149
I'll just spit the first line back to

684
00:33:07,149 --> 00:33:12,010
you so you don't get the full file

685
00:33:12,010 --> 00:33:13,539
information now having checked whether

686
00:33:13,539 --> 00:33:15,490
or not you can do you typical XML

687
00:33:15,490 --> 00:33:19,899
attacks like external entities which

688
00:33:19,899 --> 00:33:26,399
might be useful and in order to to

689
00:33:26,399 --> 00:33:28,269
extract more information could

690
00:33:28,269 --> 00:33:33,669
potentially be used with the remote

691
00:33:33,669 --> 00:33:37,990
debug demon or the - demon cross SS RF

692
00:33:37,990 --> 00:33:41,019
variable to potentially manipulate the r

693
00:33:41,019 --> 00:33:46,059
ID format that way far right that's

694
00:33:46,059 --> 00:33:48,760
really the only one that that I we care

695
00:33:48,760 --> 00:33:50,529
about that's the one that'll get you

696
00:33:50,529 --> 00:33:55,389
remote code execution so this at least

697
00:33:55,389 --> 00:33:57,600
three ways enough in order to create

698
00:33:57,600 --> 00:34:01,600
files the create one will generate a

699
00:34:01,600 --> 00:34:03,220
binary file but you can use that to

700
00:34:03,220 --> 00:34:04,480
potentially like corrupt the

701
00:34:04,480 --> 00:34:07,330
installation or config file to allow you

702
00:34:07,330 --> 00:34:09,969
to reinstall particular piece of

703
00:34:09,969 --> 00:34:12,668
software like WordPress if WordPress

704
00:34:12,668 --> 00:34:17,168
used RD tool but the but graph is the

705
00:34:17,168 --> 00:34:18,489
one that we care about yes that will let

706
00:34:18,489 --> 00:34:21,010
us control both the file but also the

707
00:34:21,010 --> 00:34:23,469
content and we can generate a polyglot

708
00:34:23,469 --> 00:34:28,418
file that is also a PHP shell like so so

709
00:34:28,418 --> 00:34:30,250
where you would inject new line graph

710
00:34:30,250 --> 00:34:32,589
TMP test which is the file that's

711
00:34:32,589 --> 00:34:35,980
writing to give it a title of T it

712
00:34:35,980 --> 00:34:38,440
doesn't matter then give it a line

713
00:34:38,440 --> 00:34:41,409
definition put some PHP in that line

714
00:34:41,409 --> 00:34:43,989
definition and export it as a CSV file

715
00:34:43,989 --> 00:34:48,639
and then new line at the end and that

716
00:34:48,639 --> 00:34:52,179
will let you write PHP file on the drive

717
00:34:52,179 --> 00:34:55,210
and if you can write a PHP file on the

718
00:34:55,210 --> 00:34:58,290
drive either inside the web root you can

719
00:34:58,290 --> 00:35:00,490
execute it directly from the web root if

720
00:35:00,490 --> 00:35:01,030
you can't

721
00:35:01,030 --> 00:35:03,480
in this case like we're right into /tmp

722
00:35:03,480 --> 00:35:05,800
maybe you can find a local file include

723
00:35:05,800 --> 00:35:08,670
or some other bug that will let you

724
00:35:08,670 --> 00:35:13,200
elevate the card from that location

725
00:35:13,200 --> 00:35:16,140
so when I was reviewing this I also

726
00:35:16,140 --> 00:35:18,630
identified a number of other bugs so

727
00:35:18,630 --> 00:35:20,849
we'll find SQL injection local file

728
00:35:20,849 --> 00:35:23,970
include but it's a very restricted local

729
00:35:23,970 --> 00:35:26,299
file included it has to meet a certain

730
00:35:26,299 --> 00:35:31,650
convoluted file name but luckily we can

731
00:35:31,650 --> 00:35:34,319
control that file name so it's not a

732
00:35:34,319 --> 00:35:35,819
particular problem for us in this case

733
00:35:35,819 --> 00:35:37,440
cross-site scripting information

734
00:35:37,440 --> 00:35:40,079
disclosure authentication authenticated

735
00:35:40,079 --> 00:35:43,880
command injection authentication bypass

736
00:35:45,020 --> 00:35:47,430
so now that we have some primitives we

737
00:35:47,430 --> 00:35:49,650
have a sequence of different bugs that

738
00:35:49,650 --> 00:35:53,040
are useful we can then combine them as

739
00:35:53,040 --> 00:35:54,089
you can take the unless indicated

740
00:35:54,089 --> 00:35:57,089
already tool syntax injection combine

741
00:35:57,089 --> 00:36:00,119
that with a file write primitive to

742
00:36:00,119 --> 00:36:03,089
write a particularly named file which we

743
00:36:03,089 --> 00:36:05,160
can then leverage in the local file

744
00:36:05,160 --> 00:36:07,349
include by directory traversal which

745
00:36:07,349 --> 00:36:10,230
gives us pre-attentive headed remote

746
00:36:10,230 --> 00:36:13,890
code execution and it's simply just

747
00:36:13,890 --> 00:36:16,589
hitting a URL in fact you could also do

748
00:36:16,589 --> 00:36:19,170
this not just by directly speaking to

749
00:36:19,170 --> 00:36:21,000
the Liebherr and a mess system but

750
00:36:21,000 --> 00:36:23,730
through cross-site request forgery so

751
00:36:23,730 --> 00:36:27,329
like I said the someone on the other

752
00:36:27,329 --> 00:36:30,210
network will have this open in a tab and

753
00:36:30,210 --> 00:36:33,359
you can just do it like a watering hole

754
00:36:33,359 --> 00:36:36,569
attack your a phishing email someone

755
00:36:36,569 --> 00:36:39,299
clicks on a link and you have code

756
00:36:39,299 --> 00:36:42,240
running on their NMS system so we'll

757
00:36:42,240 --> 00:36:50,309
quickly do a demo of this attack and so

758
00:36:50,309 --> 00:36:57,470
I have a script here I'll push this to

759
00:36:57,470 --> 00:37:02,940
github later today so you just give it

760
00:37:02,940 --> 00:37:07,140
the URL of the of the Libre NMS I have

761
00:37:07,140 --> 00:37:09,270
that running here not logged in I don't

762
00:37:09,270 --> 00:37:12,809
have any active user sessions etc the

763
00:37:12,809 --> 00:37:15,270
only the only caveat with the way I've

764
00:37:15,270 --> 00:37:20,609
written this this expert is you need a

765
00:37:20,609 --> 00:37:23,069
user to have logged in at least once for

766
00:37:23,069 --> 00:37:25,079
the cache directory where I'm storing

767
00:37:25,079 --> 00:37:26,310
the page

768
00:37:26,310 --> 00:37:29,160
script to be written that's not a

769
00:37:29,160 --> 00:37:31,260
problem you could just write to /tmp

770
00:37:31,260 --> 00:37:34,770
instead but this is this system at word

771
00:37:34,770 --> 00:37:35,520
that I did it

772
00:37:35,520 --> 00:37:38,550
so just text a URL and what it does is

773
00:37:38,550 --> 00:37:41,160
it'll do a combination of different bugs

774
00:37:41,160 --> 00:37:44,190
this could be a lot simpler but I wrote

775
00:37:44,190 --> 00:37:46,920
this to submit to the developers so they

776
00:37:46,920 --> 00:37:49,410
could see how the entire bug chain and

777
00:37:49,410 --> 00:37:51,600
the the different bugs interacts it does

778
00:37:51,600 --> 00:37:53,610
information disclosure to find the the

779
00:37:53,610 --> 00:37:57,360
local path on the drive where Libra

780
00:37:57,360 --> 00:37:59,400
animus is installed so if you didn't use

781
00:37:59,400 --> 00:38:01,200
the VM and wasn't necessarily installed

782
00:38:01,200 --> 00:38:03,810
in /o libra NMS but rather by

783
00:38:03,810 --> 00:38:06,180
triple-double you are saying they would

784
00:38:06,180 --> 00:38:09,030
always find the correct path so it would

785
00:38:09,030 --> 00:38:11,010
always inject it into the cache

786
00:38:11,010 --> 00:38:14,430
directory and then it does the command

787
00:38:14,430 --> 00:38:16,530
injection or the syntax injection to

788
00:38:16,530 --> 00:38:18,720
write the file primitive and then it

789
00:38:18,720 --> 00:38:20,760
does the local file include to access it

790
00:38:20,760 --> 00:38:24,210
as if it was a web shell so we simply

791
00:38:24,210 --> 00:38:30,530
run this and we can see the output here

792
00:38:31,760 --> 00:38:35,340
we see the time is that's that's part of

793
00:38:35,340 --> 00:38:40,290
the C's CSV value so tag and rid of that

794
00:38:40,290 --> 00:38:42,540
but it's essentially a because it's a

795
00:38:42,540 --> 00:38:48,750
polyglot so we can then just copy paste

796
00:38:48,750 --> 00:38:53,400
this URL pretty simply and we can hit

797
00:38:53,400 --> 00:38:58,680
that through curl and instead of ID will

798
00:38:58,680 --> 00:39:03,950
run you name - a

799
00:39:07,620 --> 00:39:12,850
thank you and you see the apathy so very

800
00:39:12,850 --> 00:39:18,070
simple command execution through local

801
00:39:18,070 --> 00:39:23,190
fun including all right

802
00:39:24,870 --> 00:39:28,180
but that's running commands as the web

803
00:39:28,180 --> 00:39:32,800
user which is it's good but it's it

804
00:39:32,800 --> 00:39:35,680
could be better so we look at privilege

805
00:39:35,680 --> 00:39:38,020
escalation and this is not part of the

806
00:39:38,020 --> 00:39:40,840
exploit because it requires you to wait

807
00:39:40,840 --> 00:39:44,440
overnight so essentially the trifid w

808
00:39:44,440 --> 00:39:47,170
data of the web user belongs to the

809
00:39:47,170 --> 00:39:51,370
Libre and MS user group and the Libre

810
00:39:51,370 --> 00:39:55,210
NMS group has write permission on the

811
00:39:55,210 --> 00:39:57,990
file optilead random s daily dot s age

812
00:39:57,990 --> 00:40:00,970
now that's a script that's executed from

813
00:40:00,970 --> 00:40:03,820
crontab daily if you go and look at the

814
00:40:03,820 --> 00:40:06,160
chrome tab it's a some big letters do

815
00:40:06,160 --> 00:40:09,580
not disable this script I don't actually

816
00:40:09,580 --> 00:40:13,080
know what will happen if you do but

817
00:40:13,080 --> 00:40:16,450
anyway that runs as the user Libra and

818
00:40:16,450 --> 00:40:19,060
MS and the use of Libra animus has sued

819
00:40:19,060 --> 00:40:20,920
a permission to run any command s route

820
00:40:20,920 --> 00:40:24,340
without password but like I said if you

821
00:40:24,340 --> 00:40:25,750
didn't change the default passwords for

822
00:40:25,750 --> 00:40:28,450
them from the VM you can just SS a gin

823
00:40:28,450 --> 00:40:30,250
and and run commands this route anyway

824
00:40:30,250 --> 00:40:32,350
so you don't have to go through all of

825
00:40:32,350 --> 00:40:38,500
the convoluted steps and then sort of to

826
00:40:38,500 --> 00:40:41,320
wrap it up a bit the disclosure process

827
00:40:41,320 --> 00:40:44,170
I reached that to a personal connection

828
00:40:44,170 --> 00:40:46,510
so hi Paul if you if you watch this on

829
00:40:46,510 --> 00:40:50,500
youtube thanks he walked me through sort

830
00:40:50,500 --> 00:40:52,240
of the the correct process for

831
00:40:52,240 --> 00:40:53,980
contacting the team correct email

832
00:40:53,980 --> 00:40:57,970
address PGP key etc Libra LMS responded

833
00:40:57,970 --> 00:40:59,560
well like they did the first time as

834
00:40:59,560 --> 00:41:02,650
well due to some of the complexity of

835
00:41:02,650 --> 00:41:08,500
the Rd tool syntax injection and in some

836
00:41:08,500 --> 00:41:12,610
cases the patching didn't always cover

837
00:41:12,610 --> 00:41:15,580
100% of the use cases Sarah I think we

838
00:41:15,580 --> 00:41:17,380
went through three rounds of patching

839
00:41:17,380 --> 00:41:18,710
before the the

840
00:41:18,710 --> 00:41:21,640
version was released that that's safe

841
00:41:21,640 --> 00:41:25,010
they also requested a 30 day grace

842
00:41:25,010 --> 00:41:28,700
period after the patch had been

843
00:41:28,700 --> 00:41:32,990
available which we agreed to I don't

844
00:41:32,990 --> 00:41:35,390
think it actually adds any value it's an

845
00:41:35,390 --> 00:41:38,510
open-source product if someone sees the

846
00:41:38,510 --> 00:41:41,180
patch they can go and reverse-engineer

847
00:41:41,180 --> 00:41:44,960
it and write the expert which of course

848
00:41:44,960 --> 00:41:50,330
somebody did this Metasploit module this

849
00:41:50,330 --> 00:41:53,000
is for the collecti command injection it

850
00:41:53,000 --> 00:41:55,849
said this is the authenticated command

851
00:41:55,849 --> 00:42:00,950
injection it's not the present for file

852
00:42:00,950 --> 00:42:06,830
create primitive so yeah if you if you

853
00:42:06,830 --> 00:42:08,960
hadn't but again this is the sort of

854
00:42:08,960 --> 00:42:11,420
stuff that can be attacked through an

855
00:42:11,420 --> 00:42:15,470
active user having the browser open so

856
00:42:15,470 --> 00:42:18,070
if you run libre NMS or cacti on ms

857
00:42:18,070 --> 00:42:20,330
please keep up to date on patches

858
00:42:20,330 --> 00:42:22,820
actually Libre LMS supports update

859
00:42:22,820 --> 00:42:24,800
automatic patching which is which is

860
00:42:24,800 --> 00:42:26,740
really good

861
00:42:26,740 --> 00:42:29,510
unfortunately most web software don't do

862
00:42:29,510 --> 00:42:30,520
this

863
00:42:30,520 --> 00:42:34,240
also we get some upcoming cacti bugs

864
00:42:34,240 --> 00:42:36,680
there's some SQL injection and safety

865
00:42:36,680 --> 00:42:38,390
civilization the dead learn and this

866
00:42:38,390 --> 00:42:40,400
actually expired yesterday but the patch

867
00:42:40,400 --> 00:42:44,530
isn't out yet so withholding the details

868
00:42:44,530 --> 00:42:47,570
for now yeah there will be some

869
00:42:47,570 --> 00:42:50,020
advisories coming out for this

870
00:42:50,020 --> 00:42:52,700
they're both authenticated though so

871
00:42:52,700 --> 00:42:54,830
it's it's you know unless it's ISA

872
00:42:54,830 --> 00:42:58,910
referable they're not so critical and

873
00:42:58,910 --> 00:43:03,520
Nico dropped this a while back its

874
00:43:03,520 --> 00:43:06,650
typecast authentication bypass in

875
00:43:06,650 --> 00:43:09,609
Centurion which is another PHP based

876
00:43:09,609 --> 00:43:17,319
network monitoring solution so yeah

877
00:43:18,040 --> 00:43:21,080
there should be another set of bugs

878
00:43:21,080 --> 00:43:23,510
coming I had a whole bunch of bug in

879
00:43:23,510 --> 00:43:26,300
sentry on but unfortunately the file

880
00:43:26,300 --> 00:43:27,150
corrupted

881
00:43:27,150 --> 00:43:30,200
I'm gonna have to redo that work but

882
00:43:30,200 --> 00:43:32,430
unless they patched it there should be

883
00:43:32,430 --> 00:43:34,790
some deep bugs there as well

884
00:43:34,790 --> 00:43:37,890
further research so I gotta go back here

885
00:43:37,890 --> 00:43:40,950
I got a reduced sentry on I'd like to

886
00:43:40,950 --> 00:43:43,950
look a bit deeper at our D tool to see

887
00:43:43,950 --> 00:43:47,280
you know could you potentially abuse

888
00:43:47,280 --> 00:43:49,170
that through things like memory

889
00:43:49,170 --> 00:43:51,420
corruption through a spoofed SNMP

890
00:43:51,420 --> 00:43:54,090
packets or something but it's a pretty

891
00:43:54,090 --> 00:43:58,050
big beast so I think the complexity tend

892
00:43:58,050 --> 00:44:01,590
to breed vulnerabilities and then

893
00:44:01,590 --> 00:44:02,940
there's a whole bunch of other tools

894
00:44:02,940 --> 00:44:06,990
that you can integrate with like Libre

895
00:44:06,990 --> 00:44:09,750
NMS or generally being used for this

896
00:44:09,750 --> 00:44:12,930
type of network monitoring activity so

897
00:44:12,930 --> 00:44:16,050
when I have some more spare time I'll

898
00:44:16,050 --> 00:44:20,220
probably eventually dig into those so

899
00:44:20,220 --> 00:44:22,890
yeah in conclusion a system in

900
00:44:22,890 --> 00:44:24,150
administration software generally

901
00:44:24,150 --> 00:44:27,060
represents a very juicy target they may

902
00:44:27,060 --> 00:44:28,890
not have the secure code base they

903
00:44:28,890 --> 00:44:33,570
appear to have in general it's not

904
00:44:33,570 --> 00:44:35,580
end-user software so it doesn't get

905
00:44:35,580 --> 00:44:37,680
battle-hardened the same way as

906
00:44:37,680 --> 00:44:40,200
Microsoft Word would or even the Windows

907
00:44:40,200 --> 00:44:44,070
kernel always assume that people are

908
00:44:44,070 --> 00:44:47,340
researching high-value targets the cost

909
00:44:47,340 --> 00:44:51,600
to finding thoroughness is often

910
00:44:51,600 --> 00:44:53,940
substantially less than people think if

911
00:44:53,940 --> 00:44:56,550
you do that scale like I did with with

912
00:44:56,550 --> 00:44:59,370
grep you can find a large number of

913
00:44:59,370 --> 00:45:02,760
ceará days and with relatively little

914
00:45:02,760 --> 00:45:05,970
effort bug hunting can be fun it's also

915
00:45:05,970 --> 00:45:08,010
very frustrating but always very

916
00:45:08,010 --> 00:45:10,160
rewarding

917
00:45:10,160 --> 00:45:12,730
so thank you

918
00:45:12,730 --> 00:45:14,520
you

919
00:45:14,520 --> 00:45:28,619
[Music]

