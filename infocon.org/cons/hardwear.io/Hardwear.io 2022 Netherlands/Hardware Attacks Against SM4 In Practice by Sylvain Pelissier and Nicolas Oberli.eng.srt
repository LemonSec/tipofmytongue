1
00:00:04,279 --> 00:00:07,319
thank you sorry for the delay um so yeah

2
00:00:07,319 --> 00:00:09,300
we wanted to present you uh some

3
00:00:09,300 --> 00:00:11,219
research with the hardware attack

4
00:00:11,219 --> 00:00:13,019
against sm4

5
00:00:13,019 --> 00:00:16,199
and first of all I'm Sim I'm a security

6
00:00:16,199 --> 00:00:19,500
researcher at pdfc security I'm mostly

7
00:00:19,500 --> 00:00:21,900
work on a bright cryptography project I

8
00:00:21,900 --> 00:00:23,820
used to do Hardware attacks in the past

9
00:00:23,820 --> 00:00:27,240
and I'm occasionally a CTF player and I

10
00:00:27,240 --> 00:00:29,519
had a lot of fun playing this CCF here

11
00:00:29,519 --> 00:00:32,098
at Harvard Ohio and if you have any

12
00:00:32,098 --> 00:00:33,960
question you will be able to ask at the

13
00:00:33,960 --> 00:00:35,820
end of the code but if you want to reach

14
00:00:35,820 --> 00:00:38,040
me you can do it on Twitter this is my

15
00:00:38,040 --> 00:00:40,860
number and I will let Nicola introduce

16
00:00:40,860 --> 00:00:43,160
himself

17
00:00:43,800 --> 00:00:47,640
so hello everybody it's me again uh as

18
00:00:47,640 --> 00:00:50,219
yesterday uh still work in a minute

19
00:00:50,219 --> 00:00:52,140
system evaluation security evaluations

20
00:00:52,140 --> 00:00:54,420
doing Hardware attacks

21
00:00:54,420 --> 00:00:56,879
in my spare time I also organized a

22
00:00:56,879 --> 00:00:58,260
conference in Switzerland called black

23
00:00:58,260 --> 00:01:02,520
amps so feel free to try to come it will

24
00:01:02,520 --> 00:01:04,140
be that will be great

25
00:01:04,140 --> 00:01:06,540
I'm also working on an open source

26
00:01:06,540 --> 00:01:08,640
projects called Idol bus which is an

27
00:01:08,640 --> 00:01:10,680
interface to communicate with a various

28
00:01:10,680 --> 00:01:12,900
different Hardware protocols and we have

29
00:01:12,900 --> 00:01:14,580
my Twitter handle

30
00:01:14,580 --> 00:01:17,820
foreign so several months ago I was

31
00:01:17,820 --> 00:01:20,159
discussing with the rajama was talking

32
00:01:20,159 --> 00:01:22,439
with me yesterday and he got very

33
00:01:22,439 --> 00:01:24,780
excited with a new chip which is a

34
00:01:24,780 --> 00:01:27,540
microcontroller with a risk 5 4 with

35
00:01:27,540 --> 00:01:29,880
lots of various high-speed peripherals

36
00:01:29,880 --> 00:01:30,780
Etc

37
00:01:30,780 --> 00:01:34,020
and I think that triggered me was the

38
00:01:34,020 --> 00:01:36,860
red box on the lower level

39
00:01:36,860 --> 00:01:41,100
right which was first AES and something

40
00:01:41,100 --> 00:01:43,920
that was called sn4 never heard about

41
00:01:43,920 --> 00:01:44,880
this

42
00:01:44,880 --> 00:01:48,600
so first thing to do is Google Voice you

43
00:01:48,600 --> 00:01:51,360
find the Wikipedia page which just tells

44
00:01:51,360 --> 00:01:53,340
me okay it's a block Cipher I use the

45
00:01:53,340 --> 00:01:56,159
Chinese National Standard blah blah blah

46
00:01:56,159 --> 00:01:58,680
I have no information about this so I

47
00:01:58,680 --> 00:02:02,340
found the document some documentation uh

48
00:02:02,340 --> 00:02:04,860
some reference implementations

49
00:02:04,860 --> 00:02:08,098
and some papers about attacks on this

50
00:02:08,098 --> 00:02:11,400
Cipher but no apparent tool or anything

51
00:02:11,400 --> 00:02:14,120
published

52
00:02:14,459 --> 00:02:16,980
so I'm not really good at crypto so when

53
00:02:16,980 --> 00:02:19,440
I read papers usually when there's maths

54
00:02:19,440 --> 00:02:21,900
looks kind of Chinese to me and

55
00:02:21,900 --> 00:02:24,540
unfortunately most of the papers for sm4

56
00:02:24,540 --> 00:02:26,459
are written in Chinese so it's even

57
00:02:26,459 --> 00:02:29,280
worse for me

58
00:02:29,280 --> 00:02:31,260
um so all the implementation I basically

59
00:02:31,260 --> 00:02:33,720
did the research on the c or python

60
00:02:33,720 --> 00:02:35,700
implementation of sm4 that you can find

61
00:02:35,700 --> 00:02:38,940
but to do the actual attacks what I

62
00:02:38,940 --> 00:02:41,280
would really need is somebody that knows

63
00:02:41,280 --> 00:02:43,200
crypto way better than me and that's why

64
00:02:43,200 --> 00:02:47,480
I asked Siva to participate with this

65
00:02:49,140 --> 00:02:53,459
so I volunteer to to do this part I

66
00:02:53,459 --> 00:02:55,500
didn't know this black Cipher as well

67
00:02:55,500 --> 00:02:58,200
before this product I figure out that it

68
00:02:58,200 --> 00:03:00,780
was a standout for from People's

69
00:03:00,780 --> 00:03:02,040
Republic of China

70
00:03:02,040 --> 00:03:04,440
the freezer is a drafter ETF available

71
00:03:04,440 --> 00:03:06,300
in English which is really helpful to

72
00:03:06,300 --> 00:03:09,300
understand how the organisms work so

73
00:03:09,300 --> 00:03:11,519
basically if you use a g size and

74
00:03:11,519 --> 00:03:14,580
backside of final 128 bits it works on

75
00:03:14,580 --> 00:03:18,000
32 runs most of the operation operates

76
00:03:18,000 --> 00:03:20,280
on 32-bits world

77
00:03:20,280 --> 00:03:22,560
and to this point we figure out that

78
00:03:22,560 --> 00:03:24,300
it's interesting to study this Blood

79
00:03:24,300 --> 00:03:27,120
Cipher because it's used more and more

80
00:03:27,120 --> 00:03:31,379
in the field for example in a rm64 since

81
00:03:31,379 --> 00:03:34,140
version 8.4 you have Hardware

82
00:03:34,140 --> 00:03:36,599
instruction dedicated to this encryption

83
00:03:36,599 --> 00:03:40,319
as well as risk 5 now and if you want to

84
00:03:40,319 --> 00:03:42,599
deploy some project in China now you may

85
00:03:42,599 --> 00:03:46,379
need to implement this algorithm it may

86
00:03:46,379 --> 00:03:48,900
be mandatory so here we figure out that

87
00:03:48,900 --> 00:03:51,720
it's interesting to evolution

88
00:03:51,720 --> 00:03:53,760
so let's look how it works in practice

89
00:03:53,760 --> 00:03:56,879
so like as there is a key schedule uh

90
00:03:56,879 --> 00:03:58,019
invertible

91
00:03:58,019 --> 00:04:02,459
It produced 36 run keys so 32 bit world

92
00:04:02,459 --> 00:04:06,360
called arcade and they are completed

93
00:04:06,360 --> 00:04:08,400
from the secret key store with another

94
00:04:08,400 --> 00:04:11,760
constant each time in the standard

95
00:04:11,760 --> 00:04:13,560
we don't know from where you come from

96
00:04:13,560 --> 00:04:15,239
and

97
00:04:15,239 --> 00:04:18,720
um and like yes if you have a memory

98
00:04:18,720 --> 00:04:20,639
them of the key schedule the

99
00:04:20,639 --> 00:04:22,079
resurrection between the wrong key so

100
00:04:22,079 --> 00:04:24,540
you can identify them in an in-memory I

101
00:04:24,540 --> 00:04:27,419
will come back to that later

102
00:04:27,419 --> 00:04:30,600
so this is one round of the schedule uh

103
00:04:30,600 --> 00:04:33,600
all the capital uh cases later are

104
00:04:33,600 --> 00:04:35,520
worlds

105
00:04:35,520 --> 00:04:38,699
so it's quite simple at each one only

106
00:04:38,699 --> 00:04:42,000
one one key one neuron key is produced

107
00:04:42,000 --> 00:04:44,580
should produce here those one are just

108
00:04:44,580 --> 00:04:47,340
shifted on the left

109
00:04:47,340 --> 00:04:51,180
then we have the sl4 Run themselves so

110
00:04:51,180 --> 00:04:55,080
uh it works on 120 bit States separated

111
00:04:55,080 --> 00:04:58,259
in four words the initial stage is a

112
00:04:58,259 --> 00:05:02,100
plain text itself and

113
00:05:02,100 --> 00:05:04,320
one one thing is that the encryption and

114
00:05:04,320 --> 00:05:07,380
decryption are identical only one keys

115
00:05:07,380 --> 00:05:10,500
are taken into the Riverside

116
00:05:10,500 --> 00:05:13,620
this is how it looks uh sm4 run so it's

117
00:05:13,620 --> 00:05:16,580
quite similar as a as a key schedule

118
00:05:16,580 --> 00:05:19,560
except here the G function is slightly

119
00:05:19,560 --> 00:05:21,840
different than the key schedule and now

120
00:05:21,840 --> 00:05:23,820
we have the state of the algorithm which

121
00:05:23,820 --> 00:05:26,699
is uh given as input and again we

122
00:05:26,699 --> 00:05:29,820
produce at each one of one world of new

123
00:05:29,820 --> 00:05:32,280
States

124
00:05:32,280 --> 00:05:36,120
now the G function itself so I speak to

125
00:05:36,120 --> 00:05:38,940
the world into lowercase to its right

126
00:05:38,940 --> 00:05:42,120
lower case later on rights and each byte

127
00:05:42,120 --> 00:05:44,759
is external one key byte then it goes to

128
00:05:44,759 --> 00:05:47,880
the s-box then the L function and we

129
00:05:47,880 --> 00:05:49,020
have the out

130
00:05:49,020 --> 00:05:52,020
so it's not that complicated

131
00:05:52,020 --> 00:05:54,240
um L is a linear transformation I use

132
00:05:54,240 --> 00:05:56,039
mainly for diffusion to spread the

133
00:05:56,039 --> 00:05:59,639
modification among rights we have Xbox

134
00:05:59,639 --> 00:06:02,880
we have a very similar construction as a

135
00:06:02,880 --> 00:06:05,759
yes based on inversion of in

136
00:06:05,759 --> 00:06:07,320
transformation

137
00:06:07,320 --> 00:06:09,840
and one important thing and not that

138
00:06:09,840 --> 00:06:11,820
important but at the end of the

139
00:06:11,820 --> 00:06:15,600
algorithm the output is reverse it does

140
00:06:15,600 --> 00:06:18,240
not change anything to our attack but it

141
00:06:18,240 --> 00:06:19,979
can make you lose a lot of time during

142
00:06:19,979 --> 00:06:21,600
your implementation and debugging

143
00:06:21,600 --> 00:06:25,199
sessions let's keep that in mind

144
00:06:25,199 --> 00:06:27,360
so the first thing we did on this

145
00:06:27,360 --> 00:06:29,520
algorithm we implemented the Yahoo rule

146
00:06:29,520 --> 00:06:31,259
because when you have a firmware you

147
00:06:31,259 --> 00:06:33,180
want to know if sm4 is inside this

148
00:06:33,180 --> 00:06:35,580
camera or not So based on the constant

149
00:06:35,580 --> 00:06:37,500
and the s-backs which are usually

150
00:06:37,500 --> 00:06:40,440
penalty will be recaptable we can detect

151
00:06:40,440 --> 00:06:44,280
if a self-risingly firmware on that

152
00:06:44,280 --> 00:06:46,440
and there's another thing I speak about

153
00:06:46,440 --> 00:06:48,120
is a key schedule so if you have a

154
00:06:48,120 --> 00:06:50,880
memorandum of your key schedule you can

155
00:06:50,880 --> 00:06:53,580
search that either now with a command we

156
00:06:53,580 --> 00:06:56,400
have implemented into a Hada too it was

157
00:06:56,400 --> 00:06:58,500
already done for AES and we just added

158
00:06:58,500 --> 00:07:01,380
this relation for SL for any interest

159
00:07:01,380 --> 00:07:04,199
used for the identification phase of

160
00:07:04,199 --> 00:07:07,020
your of your project

161
00:07:07,020 --> 00:07:10,199
now let's go to harder attacks

162
00:07:10,199 --> 00:07:11,400
so

163
00:07:11,400 --> 00:07:14,100
usually except for Hardware reverse

164
00:07:14,100 --> 00:07:15,419
we've seen before but usually in

165
00:07:15,419 --> 00:07:17,280
Hardware you have to approach a

166
00:07:17,280 --> 00:07:20,280
sectional or fold and we run two so we

167
00:07:20,280 --> 00:07:22,319
splitted the work like that so we

168
00:07:22,319 --> 00:07:24,180
collect to the side Channel

169
00:07:24,180 --> 00:07:27,660
and we started with a software

170
00:07:27,660 --> 00:07:30,419
implementation just try our attack and

171
00:07:30,419 --> 00:07:32,520
then we move to Hardware implementation

172
00:07:32,520 --> 00:07:36,060
part of accelerate so now we'll just let

173
00:07:36,060 --> 00:07:39,259
equal represent this up

174
00:07:39,860 --> 00:07:43,440
all right so the section and Analysis uh

175
00:07:43,440 --> 00:07:46,680
website channel is is a way to recover

176
00:07:46,680 --> 00:07:48,900
the secret key by looking at some

177
00:07:48,900 --> 00:07:51,900
leakage information while the key is

178
00:07:51,900 --> 00:07:54,419
used to produce the central text

179
00:07:54,419 --> 00:07:56,880
so there are different ways to get this

180
00:07:56,880 --> 00:07:58,139
kind of leakage you have the power

181
00:07:58,139 --> 00:08:00,900
consumption electromagnetic condition or

182
00:08:00,900 --> 00:08:03,180
timing intervals

183
00:08:03,180 --> 00:08:06,599
again there are a lot of implementation

184
00:08:06,599 --> 00:08:09,300
of sectional analysis or power analysis

185
00:08:09,300 --> 00:08:11,639
or AES this is

186
00:08:11,639 --> 00:08:13,800
everybody knows that there's a yes but

187
00:08:13,800 --> 00:08:16,440
for sn4 unfortunately uh I'll write some

188
00:08:16,440 --> 00:08:19,560
papers mostly in Chinese there's no tool

189
00:08:19,560 --> 00:08:21,060
for this so

190
00:08:21,060 --> 00:08:25,400
what we will do first is get some traces

191
00:08:25,400 --> 00:08:28,020
recognize the slide it's the same as

192
00:08:28,020 --> 00:08:30,419
yesterday because I use the same choices

193
00:08:30,419 --> 00:08:33,360
I did last time so I took an sm4

194
00:08:33,360 --> 00:08:36,179
implementation C then

195
00:08:36,179 --> 00:08:39,360
you can make it run on an esp32

196
00:08:39,360 --> 00:08:42,299
and collected power traces using the

197
00:08:42,299 --> 00:08:45,180
listener and a lot of various Trace I

198
00:08:45,180 --> 00:08:47,220
took about 50

199
00:08:47,220 --> 00:08:50,339
000 average traces so again every Trace

200
00:08:50,339 --> 00:08:53,459
is a mean of 1000 encryption with the

201
00:08:53,459 --> 00:08:56,700
same index the principles about 15

202
00:08:56,700 --> 00:09:01,260
million encryptions to get increases

203
00:09:01,260 --> 00:09:04,260
the traces look like this so you can see

204
00:09:04,260 --> 00:09:08,519
that there is 32 same patterns and just

205
00:09:08,519 --> 00:09:11,399
for the ease I showed the first three

206
00:09:11,399 --> 00:09:13,920
right the first four rounds and the last

207
00:09:13,920 --> 00:09:16,680
one you can see in yellow here this is

208
00:09:16,680 --> 00:09:20,060
the first round here

209
00:09:21,839 --> 00:09:24,540
now that we have those traces how do we

210
00:09:24,540 --> 00:09:27,300
process them and what kind of tools

211
00:09:27,300 --> 00:09:30,839
you can use so instead of creating a new

212
00:09:30,839 --> 00:09:33,480
library what I did is I took an existing

213
00:09:33,480 --> 00:09:36,240
one and just implemented the sm-4 module

214
00:09:36,240 --> 00:09:37,920
for this Library

215
00:09:37,920 --> 00:09:41,279
I chose cats made by ishan because it's

216
00:09:41,279 --> 00:09:43,800
open source the code is quite clean uh

217
00:09:43,800 --> 00:09:46,260
and it's in Python so it's easier for me

218
00:09:46,260 --> 00:09:48,720
to to implement everything with this

219
00:09:48,720 --> 00:09:51,899
so I started first by looking at how the

220
00:09:51,899 --> 00:09:54,000
library was using which kind of data it

221
00:09:54,000 --> 00:09:56,839
was required as an input and output Etc

222
00:09:56,839 --> 00:10:01,019
we implemented sn4 uh just for this

223
00:10:01,019 --> 00:10:03,420
Library so every function of this info

224
00:10:03,420 --> 00:10:05,820
is implemented I also added more helper

225
00:10:05,820 --> 00:10:08,339
functions so ways to calculate the round

226
00:10:08,339 --> 00:10:10,560
forwards the wrong backwards the key

227
00:10:10,560 --> 00:10:12,779
schedule you can go forward backwards

228
00:10:12,779 --> 00:10:14,459
Etc

229
00:10:14,459 --> 00:10:17,820
and with all this python what I need

230
00:10:17,820 --> 00:10:22,200
then is a way to detect when the key is

231
00:10:22,200 --> 00:10:24,300
used in this Trace right what we want to

232
00:10:24,300 --> 00:10:25,980
find is the key

233
00:10:25,980 --> 00:10:28,440
so to do this you have to implement what

234
00:10:28,440 --> 00:10:30,180
they call selection functions which is

235
00:10:30,180 --> 00:10:33,420
basically you given hypothesis so and my

236
00:10:33,420 --> 00:10:35,580
guess is that the key light is let's say

237
00:10:35,580 --> 00:10:39,420
0 1 and you try to find some correlation

238
00:10:39,420 --> 00:10:43,500
on the expected output value and try to

239
00:10:43,500 --> 00:10:46,800
make it work on the traces

240
00:10:46,800 --> 00:10:49,099
foreign

241
00:10:49,820 --> 00:10:52,560
I'm using the s-box as a selection

242
00:10:52,560 --> 00:10:53,880
function

243
00:10:53,880 --> 00:10:56,040
Works quite well with the correlation

244
00:10:56,040 --> 00:10:57,680
core analysis

245
00:10:57,680 --> 00:11:03,480
so for the first round of sn4 uh the

246
00:11:03,480 --> 00:11:05,540
paint text is directly

247
00:11:05,540 --> 00:11:08,459
mixed with the key so you have the plain

248
00:11:08,459 --> 00:11:09,839
text here

249
00:11:09,839 --> 00:11:11,160
that we input

250
00:11:11,160 --> 00:11:14,100
the key that we don't know and this

251
00:11:14,100 --> 00:11:16,560
value is those two values so together

252
00:11:16,560 --> 00:11:19,380
are then switched to a different value

253
00:11:19,380 --> 00:11:21,779
using this Xbox

254
00:11:21,779 --> 00:11:24,240
so what we can do now is that since we

255
00:11:24,240 --> 00:11:27,240
know the plain text we can say okay

256
00:11:27,240 --> 00:11:30,000
my guess is that k0 for instance is

257
00:11:30,000 --> 00:11:33,959
equal to 0 by G is U so I will calculate

258
00:11:33,959 --> 00:11:36,120
the output of the X Box which will be

259
00:11:36,120 --> 00:11:39,480
some value then try to find the Hamming

260
00:11:39,480 --> 00:11:43,860
weights of this output value and try to

261
00:11:43,860 --> 00:11:47,660
match it with all the traces I collected

262
00:11:47,660 --> 00:11:51,660
so far so good so here you have uh on

263
00:11:51,660 --> 00:11:54,959
the top right you have the python codes

264
00:11:54,959 --> 00:11:58,079
using the scan Library the function that

265
00:11:58,079 --> 00:12:01,140
I implemented is this one so it will

266
00:12:01,140 --> 00:12:03,660
directly search for the first Xbox

267
00:12:03,660 --> 00:12:05,339
output

268
00:12:05,339 --> 00:12:08,339
you tell the library to look for the

269
00:12:08,339 --> 00:12:12,540
Hamming weight in the traces and display

270
00:12:12,540 --> 00:12:14,820
the results and here you can see that in

271
00:12:14,820 --> 00:12:18,540
my traces I have for one key byte one

272
00:12:18,540 --> 00:12:20,940
value that is really Rising above all

273
00:12:20,940 --> 00:12:22,200
the others that means that the

274
00:12:22,200 --> 00:12:25,800
correlation for this key guess looks

275
00:12:25,800 --> 00:12:28,459
quite okay

276
00:12:29,399 --> 00:12:31,980
so now we can do the same for the for

277
00:12:31,980 --> 00:12:34,019
the first four key lines because

278
00:12:34,019 --> 00:12:36,779
remember we are only working with 32 bit

279
00:12:36,779 --> 00:12:39,300
words so for the first one it will only

280
00:12:39,300 --> 00:12:42,899
encrypt the first 32 bits then we'll do

281
00:12:42,899 --> 00:12:46,680
the next round with 32 more bits

282
00:12:46,680 --> 00:12:49,620
thing is as this season said to recover

283
00:12:49,620 --> 00:12:52,320
the master key for sm4 you need at least

284
00:12:52,320 --> 00:12:54,779
four consecutive round keys with just

285
00:12:54,779 --> 00:12:57,360
one round key you cannot do anything so

286
00:12:57,360 --> 00:13:00,180
because we only have now the first round

287
00:13:00,180 --> 00:13:04,079
key what we can do is calculate using

288
00:13:04,079 --> 00:13:07,459
the functions that I implemented ask

289
00:13:07,459 --> 00:13:10,800
python to take your plain text say okay

290
00:13:10,800 --> 00:13:14,160
so just one rounds with the key that we

291
00:13:14,160 --> 00:13:15,720
discovered

292
00:13:15,720 --> 00:13:18,360
so then you can do basically the same

293
00:13:18,360 --> 00:13:21,060
attack using the Xbox but on the second

294
00:13:21,060 --> 00:13:22,320
round

295
00:13:22,320 --> 00:13:26,040
this will give you mute 32 units of key

296
00:13:26,040 --> 00:13:28,740
and then you have to do the same third

297
00:13:28,740 --> 00:13:30,779
time for the third rounds and then a

298
00:13:30,779 --> 00:13:33,240
fourth time for the fourth round and

299
00:13:33,240 --> 00:13:36,180
then you will have four words of the

300
00:13:36,180 --> 00:13:39,779
schedule that way you can go back in the

301
00:13:39,779 --> 00:13:43,279
schedule to recover domestic

302
00:13:44,579 --> 00:13:46,860
once you have this master key again you

303
00:13:46,860 --> 00:13:49,980
have to remember that on sn4 you have to

304
00:13:49,980 --> 00:13:54,120
apply absorb mask with a predefined uh

305
00:13:54,120 --> 00:13:57,240
value which is in the standard and if

306
00:13:57,240 --> 00:13:59,519
you do this correctly you should get

307
00:13:59,519 --> 00:14:03,019
back to your masters

308
00:14:04,680 --> 00:14:07,320
then the second one I implemented was

309
00:14:07,320 --> 00:14:09,839
the same thing but from the last one so

310
00:14:09,839 --> 00:14:13,380
let's pretend that in your Acquisitions

311
00:14:13,380 --> 00:14:15,600
you also know the paint text but you can

312
00:14:15,600 --> 00:14:18,420
you know the cipher text so the outputs

313
00:14:18,420 --> 00:14:19,860
of your encryption

314
00:14:19,860 --> 00:14:22,380
you can do exactly the same so from the

315
00:14:22,380 --> 00:14:24,060
ciphertext you try to go one round

316
00:14:24,060 --> 00:14:26,399
backwards so you try to get the output

317
00:14:26,399 --> 00:14:29,279
of the Xbox data on the opposite way try

318
00:14:29,279 --> 00:14:32,160
to recover the last round the last round

319
00:14:32,160 --> 00:14:33,920
key

320
00:14:33,920 --> 00:14:38,479
main problem is that after

321
00:14:38,519 --> 00:14:41,339
trying that for I think two or three

322
00:14:41,339 --> 00:14:43,500
days I was still not getting any

323
00:14:43,500 --> 00:14:45,779
correlation I spent a lot of time a lot

324
00:14:45,779 --> 00:14:47,880
of time and if you remember what Silva

325
00:14:47,880 --> 00:14:50,579
says the outputs of the ciphertext is

326
00:14:50,579 --> 00:14:53,880
Switched so once I just start this

327
00:14:53,880 --> 00:14:58,019
function so keeping the the ciphertext

328
00:14:58,019 --> 00:14:59,940
backwards

329
00:14:59,940 --> 00:15:02,519
works exactly the same as with the first

330
00:15:02,519 --> 00:15:04,620
round keys and it worked perfectly fine

331
00:15:04,620 --> 00:15:07,320
we were able to recover the kids

332
00:15:07,320 --> 00:15:11,120
so let me show that

333
00:15:13,260 --> 00:15:16,380
he will prepare the networks

334
00:15:16,380 --> 00:15:19,860
stop moving the traces

335
00:15:19,860 --> 00:15:22,079
the choices are here it's the same one

336
00:15:22,079 --> 00:15:24,779
I'll show you in the slides

337
00:15:24,779 --> 00:15:25,980
here

338
00:15:25,980 --> 00:15:28,980
we will tell the library to try to find

339
00:15:28,980 --> 00:15:33,240
the first uh the first round key

340
00:15:33,240 --> 00:15:36,899
I uh especially uh

341
00:15:36,899 --> 00:15:39,779
shrinks the the window size for the CPA

342
00:15:39,779 --> 00:15:42,180
just to go faster so basically I'm just

343
00:15:42,180 --> 00:15:44,820
looking at not the whole Trace that's

344
00:15:44,820 --> 00:15:47,820
only the Yellow Part here

345
00:15:47,820 --> 00:15:50,160
and then that

346
00:15:50,160 --> 00:15:53,459
should show the correlation and you will

347
00:15:53,459 --> 00:15:55,800
see that you have a correlation for the

348
00:15:55,800 --> 00:15:58,620
first round key you have one value which

349
00:15:58,620 --> 00:16:01,199
rises above the rest

350
00:16:01,199 --> 00:16:03,480
for the next two bytes it's exactly the

351
00:16:03,480 --> 00:16:05,880
same with the third round two guys the

352
00:16:05,880 --> 00:16:08,760
same fourth part right same and you will

353
00:16:08,760 --> 00:16:10,740
get

354
00:16:10,740 --> 00:16:12,660
the first donkey

355
00:16:12,660 --> 00:16:14,820
that you can do the same so you apply

356
00:16:14,820 --> 00:16:17,220
the around four words to ask for the

357
00:16:17,220 --> 00:16:19,980
outputs on the Xbox One the next round

358
00:16:19,980 --> 00:16:23,399
etc etc into the full demo if you want I

359
00:16:23,399 --> 00:16:26,120
can show that

360
00:16:36,540 --> 00:16:39,660
okay so now let's move to the other part

361
00:16:39,660 --> 00:16:42,000
so it's called analyzes so now we're

362
00:16:42,000 --> 00:16:45,120
trying to subject forward to the cipher

363
00:16:45,120 --> 00:16:48,660
so uh there are some academic paper but

364
00:16:48,660 --> 00:16:51,360
for the attack against sm4 the first one

365
00:16:51,360 --> 00:16:55,139
was introducing in 2006 which is in

366
00:16:55,139 --> 00:16:57,120
Chinese again but this attack is really

367
00:16:57,120 --> 00:16:59,339
the building block for all uh further

368
00:16:59,339 --> 00:17:01,800
attacks which was explained again in uh

369
00:17:01,800 --> 00:17:03,779
other people in English

370
00:17:03,779 --> 00:17:06,439
in order the paper iPhone uh there was

371
00:17:06,439 --> 00:17:08,880
there were a performance analysis

372
00:17:08,880 --> 00:17:11,280
chapters that the code was not given so

373
00:17:11,280 --> 00:17:13,980
it was really painful to verify the the

374
00:17:13,980 --> 00:17:15,959
claims in the paper I could just find

375
00:17:15,959 --> 00:17:20,160
one guitar repository applying this flux

376
00:17:20,160 --> 00:17:21,780
for the attack so I started from the

377
00:17:21,780 --> 00:17:23,459
from that

378
00:17:23,459 --> 00:17:25,799
uh the idea of this attack is quite

379
00:17:25,799 --> 00:17:28,860
simple you fold a world at the last

380
00:17:28,860 --> 00:17:32,940
round right is rightful and if you are

381
00:17:32,940 --> 00:17:34,860
the last one you will observe directly

382
00:17:34,860 --> 00:17:37,440
the full as a at the output because the

383
00:17:37,440 --> 00:17:39,900
world is not changing except if you

384
00:17:39,900 --> 00:17:43,440
inject food here in this one as well and

385
00:17:43,440 --> 00:17:46,020
then the fortune inject will go through

386
00:17:46,020 --> 00:17:49,860
this G function go out and disturb with

387
00:17:49,860 --> 00:17:52,020
the iffusion the full world and we'll

388
00:17:52,020 --> 00:17:55,380
also observe the output in yourself in

389
00:17:55,380 --> 00:17:57,600
your 4G cycle

390
00:17:57,600 --> 00:17:59,760
this is nice because when you collect

391
00:17:59,760 --> 00:18:02,820
foods from a practical uh Hardware or

392
00:18:02,820 --> 00:18:05,940
software implementation if you solve the

393
00:18:05,940 --> 00:18:08,039
correct cyphotech with the 40 ciphertext

394
00:18:08,039 --> 00:18:10,500
you'll see a nice pattern so one bytes

395
00:18:10,500 --> 00:18:12,179
modification and a full world

396
00:18:12,179 --> 00:18:14,520
modification so you can easily say okay

397
00:18:14,520 --> 00:18:16,500
I'm injected the correct support model

398
00:18:16,500 --> 00:18:18,960
I'm expecting so this is nice

399
00:18:18,960 --> 00:18:21,960
now let's see how this attack worker in

400
00:18:21,960 --> 00:18:24,780
in practice so it's a differential

401
00:18:24,780 --> 00:18:28,020
attack basically you're injecting a byte

402
00:18:28,020 --> 00:18:31,260
board so if you saw the output of the 2s

403
00:18:31,260 --> 00:18:35,160
box you will have the input byte so all

404
00:18:35,160 --> 00:18:36,960
together with the key slide you don't

405
00:18:36,960 --> 00:18:39,299
know and on the other side you will have

406
00:18:39,299 --> 00:18:42,299
the 40 bytes so with the correct input

407
00:18:42,299 --> 00:18:45,299
and the key byte as well if we rewrite

408
00:18:45,299 --> 00:18:47,340
that with X we don't know because it

409
00:18:47,340 --> 00:18:49,740
depends on the Divide we'll have this

410
00:18:49,740 --> 00:18:53,940
nice equation s of X so s of X so Alpha

411
00:18:53,940 --> 00:18:55,740
and then we can go the other way around

412
00:18:55,740 --> 00:18:59,220
from the output of the of the of the G

413
00:18:59,220 --> 00:19:01,919
function so we can take the word uh the

414
00:19:01,919 --> 00:19:04,820
other word we can throw them together

415
00:19:04,820 --> 00:19:08,820
apply the inverse function and function

416
00:19:08,820 --> 00:19:13,320
and we'll obtain uh a word we which is

417
00:19:13,320 --> 00:19:15,360
all zero except for one byte which is

418
00:19:15,360 --> 00:19:18,179
the byte we have 40. so now the problem

419
00:19:18,179 --> 00:19:21,780
we are looking to solve is to find the X

420
00:19:21,780 --> 00:19:24,660
which depends on the T byte which

421
00:19:24,660 --> 00:19:26,760
satisfies this equation an alpha and

422
00:19:26,760 --> 00:19:28,620
beta window because we can collect the

423
00:19:28,620 --> 00:19:31,080
14 side photos

424
00:19:31,080 --> 00:19:35,460
so then we did a static table and for

425
00:19:35,460 --> 00:19:38,220
index Alpha and beta we will store in

426
00:19:38,220 --> 00:19:41,460
this table uh all the X satisfying this

427
00:19:41,460 --> 00:19:44,220
equation and if you run this is to build

428
00:19:44,220 --> 00:19:46,740
this table for sn4 you will notice that

429
00:19:46,740 --> 00:19:50,059
on average you will only have 2X in each

430
00:19:50,059 --> 00:19:53,100
at each index so this is nice because

431
00:19:53,100 --> 00:19:55,620
now we can collect 40 side protects we

432
00:19:55,620 --> 00:19:57,360
should add some data

433
00:19:57,360 --> 00:20:00,179
you know how to compute them look into

434
00:20:00,179 --> 00:20:01,440
this table

435
00:20:01,440 --> 00:20:05,039
uh and then we'll have a list of key

436
00:20:05,039 --> 00:20:07,740
byte candidates and an average two so

437
00:20:07,740 --> 00:20:11,160
then if we do that for another uh 40 40

438
00:20:11,160 --> 00:20:14,220
type of text and we intersect the two

439
00:20:14,220 --> 00:20:16,260
set of needed we'll hopefully have only

440
00:20:16,260 --> 00:20:19,320
one key byte remaining which is uh the

441
00:20:19,320 --> 00:20:22,320
the one key byte we are looking for

442
00:20:22,320 --> 00:20:25,080
so then we do that for all the bytes of

443
00:20:25,080 --> 00:20:26,820
the wrong key and we have the first one

444
00:20:26,820 --> 00:20:28,919
and as for side Channel

445
00:20:28,919 --> 00:20:33,600
then we reverse the the last one with

446
00:20:33,600 --> 00:20:35,760
the one key we apply this prototype

447
00:20:35,760 --> 00:20:39,840
again we cover four one key iteratively

448
00:20:39,840 --> 00:20:41,700
and we can reverse the key schedule

449
00:20:41,700 --> 00:20:44,460
again and recover the secret

450
00:20:44,460 --> 00:20:48,000
so on average we would need uh eight

451
00:20:48,000 --> 00:20:51,539
foot per round key times for uh one key

452
00:20:51,539 --> 00:20:54,480
it will give such 240.

453
00:20:54,480 --> 00:20:56,460
so this is nice

454
00:20:56,460 --> 00:20:59,640
we wanted to try uh this attack so first

455
00:20:59,640 --> 00:21:02,160
we we started with simulated food which

456
00:21:02,160 --> 00:21:03,900
are perfect that is the foot mode that

457
00:21:03,900 --> 00:21:06,000
we are looking for and then also we

458
00:21:06,000 --> 00:21:08,940
built a firmware implementation

459
00:21:08,940 --> 00:21:11,460
efficient for again and we tried on the

460
00:21:11,460 --> 00:21:15,419
tool we already released in 2020 which

461
00:21:15,419 --> 00:21:18,480
is called the details of 3000 and you

462
00:21:18,480 --> 00:21:20,640
can see relate port on your firmware

463
00:21:20,640 --> 00:21:23,580
it's based on hadap 2 and what we we are

464
00:21:23,580 --> 00:21:25,020
doing is we are skipping some

465
00:21:25,020 --> 00:21:26,760
instruction during the execution of the

466
00:21:26,760 --> 00:21:27,840
channel

467
00:21:27,840 --> 00:21:30,120
and we did that for a fixed key on the

468
00:21:30,120 --> 00:21:31,440
fixed standard

469
00:21:31,440 --> 00:21:34,020
so if you run this tool on this

470
00:21:34,020 --> 00:21:36,539
implementation so here you have the add

471
00:21:36,539 --> 00:21:39,000
the instruction which was skipped and

472
00:21:39,000 --> 00:21:42,539
the corresponding 40th output at the end

473
00:21:42,539 --> 00:21:45,240
so let's look how

474
00:21:45,240 --> 00:21:49,200
well in practice so here I have some

475
00:21:49,200 --> 00:21:51,720
food which are perfect because I'm

476
00:21:51,720 --> 00:21:54,299
simulated so they are nice I have this

477
00:21:54,299 --> 00:21:57,780
nice pattern on the info and if I apply

478
00:21:57,780 --> 00:21:58,940
my

479
00:21:58,940 --> 00:22:02,520
third attack on this set of four

480
00:22:02,520 --> 00:22:06,720
it's it's recovering by byte per byte

481
00:22:06,720 --> 00:22:09,120
Zone key and again I have the full one

482
00:22:09,120 --> 00:22:12,360
key I'm trying to rewrite the world and

483
00:22:12,360 --> 00:22:14,760
apply the GF again but I think have more

484
00:22:14,760 --> 00:22:17,240
folds for the um

485
00:22:17,240 --> 00:22:20,940
but it's working perfectly

486
00:22:20,940 --> 00:22:24,120
but then on foot I got from the my arm

487
00:22:24,120 --> 00:22:27,960
camera if I look at the pattern I have

488
00:22:27,960 --> 00:22:29,580
something else something different

489
00:22:29,580 --> 00:22:32,700
and I cannot apply directly my full data

490
00:22:32,700 --> 00:22:35,280
type on this kind of it does not work so

491
00:22:35,280 --> 00:22:38,539
I need to do something else

492
00:22:41,159 --> 00:22:43,559
so

493
00:22:43,559 --> 00:22:46,980
I continue my reading

494
00:22:46,980 --> 00:22:49,620
and I I feel that there is more paper

495
00:22:49,620 --> 00:22:51,919
about for Attack on sn4

496
00:22:51,919 --> 00:22:55,200
one of them extend the attack I

497
00:22:55,200 --> 00:22:57,780
presented by explaining that if you

498
00:22:57,780 --> 00:23:00,240
apply the code to 100 home audio it will

499
00:23:00,240 --> 00:23:02,159
correct the full world at the last one

500
00:23:02,159 --> 00:23:03,960
and then you can apply the attack

501
00:23:03,960 --> 00:23:05,640
alternative to you before but in

502
00:23:05,640 --> 00:23:09,299
parallel so you will recover all the one

503
00:23:09,299 --> 00:23:14,520
key by with only two phones and you know

504
00:23:14,520 --> 00:23:15,960
it's nice because it transform your

505
00:23:15,960 --> 00:23:18,059
right foot model into a world's third

506
00:23:18,059 --> 00:23:19,740
model meaning that if you for the full

507
00:23:19,740 --> 00:23:23,340
world now you can still apply an attack

508
00:23:23,340 --> 00:23:26,700
and Recovery

509
00:23:26,700 --> 00:23:30,539
so this is how it works in practice now

510
00:23:30,539 --> 00:23:32,580
we introduce it for here one from

511
00:23:32,580 --> 00:23:35,780
earlier still we can observe the output

512
00:23:35,780 --> 00:23:38,940
we will Disturb This full worm here

513
00:23:38,940 --> 00:23:42,000
which will be injected as an input of

514
00:23:42,000 --> 00:23:43,919
the last one but now this is the full

515
00:23:43,919 --> 00:23:47,460
one so and again we have the output of

516
00:23:47,460 --> 00:23:49,020
this code and

517
00:23:49,020 --> 00:23:52,020
uh the input of the sort and the output

518
00:23:52,020 --> 00:23:55,380
so we can still apply the idea I

519
00:23:55,380 --> 00:23:58,159
presented before

520
00:23:58,260 --> 00:24:00,240
and in fact if the papers are going even

521
00:24:00,240 --> 00:24:01,860
a bit further

522
00:24:01,860 --> 00:24:04,320
saying that if you put a wonderful

523
00:24:04,320 --> 00:24:07,140
earlier you can still get uh you can

524
00:24:07,140 --> 00:24:09,659
still recover the last one key and the

525
00:24:09,659 --> 00:24:11,159
wrong key before so this is really

526
00:24:11,159 --> 00:24:13,740
powerful because now you just need a

527
00:24:13,740 --> 00:24:16,080
four-fold in total to recover the

528
00:24:16,080 --> 00:24:17,700
spreadsheet quantity because of the

529
00:24:17,700 --> 00:24:22,020
school for one keys so it's really nice

530
00:24:22,020 --> 00:24:25,200
and still uh if you have this kind of

531
00:24:25,200 --> 00:24:27,360
working practice you have a nice pattern

532
00:24:27,360 --> 00:24:30,360
if you saw the correct Cipher text with

533
00:24:30,360 --> 00:24:33,360
the 14 Cipher text so you can still

534
00:24:33,360 --> 00:24:35,940
identify them and it's really practical

535
00:24:35,940 --> 00:24:39,179
for your product

536
00:24:39,179 --> 00:24:41,480
however there is one limitation

537
00:24:41,480 --> 00:24:44,940
the problem is if you for this one x i

538
00:24:44,940 --> 00:24:47,100
plus one then you won't be able to

539
00:24:47,100 --> 00:24:48,840
observe the output because it will be

540
00:24:48,840 --> 00:24:51,059
solved by value which has been changed

541
00:24:51,059 --> 00:24:56,299
by itself there is one one limitation

542
00:24:57,840 --> 00:25:01,020
uh by reading a more paper I figure that

543
00:25:01,020 --> 00:25:03,179
there is uh even another paper going

544
00:25:03,179 --> 00:25:06,960
even further one of them further so now

545
00:25:06,960 --> 00:25:09,659
you only need a single record and you

546
00:25:09,659 --> 00:25:12,059
will recover the full Secret

547
00:25:12,059 --> 00:25:14,400
so it looks nice but it's a kind of a

548
00:25:14,400 --> 00:25:16,559
good form so there are brute forcing the

549
00:25:16,559 --> 00:25:18,480
attack I present so it takes a

550
00:25:18,480 --> 00:25:21,200
computation and also the pattern now

551
00:25:21,200 --> 00:25:24,059
looks completely random so if you have a

552
00:25:24,059 --> 00:25:25,320
lot of code you need to apply this

553
00:25:25,320 --> 00:25:28,140
attack on all of the 37 text uh you have

554
00:25:28,140 --> 00:25:30,600
we got knowing that there is a hope to

555
00:25:30,600 --> 00:25:31,919
get the key

556
00:25:31,919 --> 00:25:35,340
so it can be useful for when few points

557
00:25:35,340 --> 00:25:36,240
are available

558
00:25:36,240 --> 00:25:38,460
but we didn't implement this attack we

559
00:25:38,460 --> 00:25:42,480
saw that it's uh useful for product but

560
00:25:42,480 --> 00:25:45,299
maybe you would need that for

561
00:25:45,299 --> 00:25:50,720
for some yeah some some music project

562
00:25:50,880 --> 00:25:53,700
but still we figure out that uh

563
00:25:53,700 --> 00:25:55,919
the front attack can be improved

564
00:25:55,919 --> 00:25:58,340
especially for if this world is forget

565
00:25:58,340 --> 00:26:02,100
in fact if you have a light fold here

566
00:26:02,100 --> 00:26:04,860
you can still go back from the output

567
00:26:04,860 --> 00:26:07,919
apply the inverse air function here and

568
00:26:07,919 --> 00:26:10,140
identify at each position you have to

569
00:26:10,140 --> 00:26:13,020
hold and then you just have to refer 256

570
00:26:13,020 --> 00:26:13,980
value

571
00:26:13,980 --> 00:26:17,640
during your GFA to apply so it's not

572
00:26:17,640 --> 00:26:20,220
that big and each works are quite fun

573
00:26:20,220 --> 00:26:24,000
and also what we found during evaluation

574
00:26:24,000 --> 00:26:25,740
is that maybe you want to change this

575
00:26:25,740 --> 00:26:28,140
one which will change the computation of

576
00:26:28,140 --> 00:26:30,419
this function in the hardware then it

577
00:26:30,419 --> 00:26:32,940
means that you have introduced a low

578
00:26:32,940 --> 00:26:35,340
error in the right Branch here so the

579
00:26:35,340 --> 00:26:37,880
text still works you can still

580
00:26:37,880 --> 00:26:40,799
exploit for it happening here so it's

581
00:26:40,799 --> 00:26:43,559
really nice because you you can take

582
00:26:43,559 --> 00:26:45,960
advantage of code you could not uh with

583
00:26:45,960 --> 00:26:49,500
the attack pattern to do the paper

584
00:26:49,500 --> 00:26:53,059
so at the end uh I implemented the two

585
00:26:53,059 --> 00:26:55,559
gflg I combined them because you can

586
00:26:55,559 --> 00:26:57,120
combine them so it's really nice you can

587
00:26:57,120 --> 00:26:59,520
keep track of your key candidate I am

588
00:26:59,520 --> 00:27:01,620
placed as an improvement as well I

589
00:27:01,620 --> 00:27:02,539
explained

590
00:27:02,539 --> 00:27:06,179
and again like for sectional we didn't

591
00:27:06,179 --> 00:27:08,820
want to reinvent the wheel so we created

592
00:27:08,820 --> 00:27:11,700
a tool which is uh which look really

593
00:27:11,700 --> 00:27:14,039
similar to Phoenix AAS I don't know if

594
00:27:14,039 --> 00:27:16,740
you know this tool it's uh it's to

595
00:27:16,740 --> 00:27:19,140
perform foot attack against AES it's a

596
00:27:19,140 --> 00:27:21,900
part of the Great side Channel markers

597
00:27:21,900 --> 00:27:24,600
which is really really nice and it

598
00:27:24,600 --> 00:27:27,240
should be included soon in the in this

599
00:27:27,240 --> 00:27:29,220
Repository

600
00:27:29,220 --> 00:27:33,480
so now let's look how it's performed on

601
00:27:33,480 --> 00:27:36,240
the simulated fault so still I have this

602
00:27:36,240 --> 00:27:39,480
fold so I have only five of them uh

603
00:27:39,480 --> 00:27:43,320
which looks nice I apply my fold attack

604
00:27:43,320 --> 00:27:46,320
so now you see the school run key is

605
00:27:46,320 --> 00:27:49,080
recovered at each step not one by so

606
00:27:49,080 --> 00:27:52,159
it's really going fast and then I rewind

607
00:27:52,159 --> 00:27:55,080
one round I apply the GF again and again

608
00:27:55,080 --> 00:27:56,220
again

609
00:27:56,220 --> 00:27:59,220
then I inverse the key schedule and I

610
00:27:59,220 --> 00:28:02,940
recover the master key so it works uh

611
00:28:02,940 --> 00:28:05,520
perfectly fine which the first four four

612
00:28:05,520 --> 00:28:09,418
data was not working this

613
00:28:14,940 --> 00:28:18,360
so we were happy with this attack and

614
00:28:18,360 --> 00:28:20,340
now I will let Nicola explain how we

615
00:28:20,340 --> 00:28:22,260
apply this attack on Hardware

616
00:28:22,260 --> 00:28:25,039
implementation

617
00:28:25,980 --> 00:28:30,840
right so uh while we were working on the

618
00:28:30,840 --> 00:28:32,720
software implementation

619
00:28:32,720 --> 00:28:37,260
is this nice board which has the the

620
00:28:37,260 --> 00:28:39,120
chip that we were discussing at the

621
00:28:39,120 --> 00:28:41,159
beginning of the project so it's a

622
00:28:41,159 --> 00:28:43,260
riskified microcontroller and it has a

623
00:28:43,260 --> 00:28:47,400
hardware sm-4 accelerator so we got some

624
00:28:47,400 --> 00:28:50,460
and now it's time to apply the same

625
00:28:50,460 --> 00:28:53,220
things that we discovered and try to

626
00:28:53,220 --> 00:28:56,640
make it work on the real Hardware device

627
00:28:56,640 --> 00:29:00,480
so what I did is a simple CPM which

628
00:29:00,480 --> 00:29:02,159
reads as

629
00:29:02,159 --> 00:29:03,539
text

630
00:29:03,539 --> 00:29:07,080
GPA Razer gpio for synchronization then

631
00:29:07,080 --> 00:29:10,559
ask the sm4 hardware to do the

632
00:29:10,559 --> 00:29:12,600
computation and then write the results

633
00:29:12,600 --> 00:29:16,820
back to the uart

634
00:29:16,919 --> 00:29:19,559
so for the first part I try to do some

635
00:29:19,559 --> 00:29:22,500
side Channel analysis on that so I spent

636
00:29:22,500 --> 00:29:24,539
a lot of time getting a lot of different

637
00:29:24,539 --> 00:29:27,299
traces I tried correlation and plain

638
00:29:27,299 --> 00:29:30,000
text and ciphertext I got some

639
00:29:30,000 --> 00:29:32,039
correlation but I think it's more the

640
00:29:32,039 --> 00:29:33,840
memory transfers between the hardware

641
00:29:33,840 --> 00:29:38,220
and the hardware sn4 and the CPU memory

642
00:29:38,220 --> 00:29:40,380
that I have absolutely nothing in

643
00:29:40,380 --> 00:29:42,360
between so I did some g-tests I didn't

644
00:29:42,360 --> 00:29:44,460
see anything so at least like power

645
00:29:44,460 --> 00:29:46,799
consumption I was unfortunately not able

646
00:29:46,799 --> 00:29:50,159
to to get any leakage from the hardware

647
00:29:50,159 --> 00:29:51,659
ID

648
00:29:51,659 --> 00:29:55,380
uh I did some uh some tries with uh some

649
00:29:55,380 --> 00:29:58,320
em probes uh mostly like the magic ones

650
00:29:58,320 --> 00:30:00,299
that you saw yesterday

651
00:30:00,299 --> 00:30:02,940
and unfortunately I have lots of really

652
00:30:02,940 --> 00:30:05,039
good results but again I was doing this

653
00:30:05,039 --> 00:30:07,440
with my own oscilloscope which is not

654
00:30:07,440 --> 00:30:10,320
that fast so I need to take the big guns

655
00:30:10,320 --> 00:30:13,500
bigger oscilloscopes better materials so

656
00:30:13,500 --> 00:30:16,380
I'm still working on this it's not uh

657
00:30:16,380 --> 00:30:17,820
done yet

658
00:30:17,820 --> 00:30:21,679
but from the fault injection perspective

659
00:30:21,679 --> 00:30:24,840
we place the boards uh just below a

660
00:30:24,840 --> 00:30:27,720
cheap Shelter From a new a so if you

661
00:30:27,720 --> 00:30:30,120
don't know this is a tool to perform an

662
00:30:30,120 --> 00:30:32,460
electromagnetic fault injection

663
00:30:32,460 --> 00:30:35,520
so I spent some time uh looking on the

664
00:30:35,520 --> 00:30:37,799
on the chip placing the probe at several

665
00:30:37,799 --> 00:30:40,500
location uh trying different voltages

666
00:30:40,500 --> 00:30:44,399
different pulses and wireless coils just

667
00:30:44,399 --> 00:30:47,159
to have the better results so spent a

668
00:30:47,159 --> 00:30:50,880
lot of time uh collected a lot of traces

669
00:30:50,880 --> 00:30:53,640
and after some time we got

670
00:30:53,640 --> 00:30:55,860
the faulted ciphertexts and now let's

671
00:30:55,860 --> 00:30:58,639
see if I can relax

672
00:30:58,919 --> 00:31:03,200
yeah so we collected uh yeah 1400 foot

673
00:31:03,200 --> 00:31:06,720
uh to I mean in the 300 of them are

674
00:31:06,720 --> 00:31:11,159
unique and we run a GPA tool on them and

675
00:31:11,159 --> 00:31:13,200
hopefully it was working as before for

676
00:31:13,200 --> 00:31:15,360
the software implementation so we were

677
00:31:15,360 --> 00:31:17,039
happy because it means that Hardware

678
00:31:17,039 --> 00:31:19,460
accelerator on this chip is vulnerable

679
00:31:19,460 --> 00:31:22,500
it's not uh and it's a secret equipment

680
00:31:22,500 --> 00:31:24,960
it's just vm30 direction that means that

681
00:31:24,960 --> 00:31:28,980
we verify that it works in practice

682
00:31:28,980 --> 00:31:31,799
so that's it for us we think that it's

683
00:31:31,799 --> 00:31:34,140
interesting to see the sn4 because it

684
00:31:34,140 --> 00:31:36,059
should be more and more deprived in

685
00:31:36,059 --> 00:31:36,980
practice

686
00:31:36,980 --> 00:31:39,360
we've opened Source or we will open

687
00:31:39,360 --> 00:31:41,820
source all the tool we've done for this

688
00:31:41,820 --> 00:31:45,419
project so it should be easy for you if

689
00:31:45,419 --> 00:31:48,360
you if you need to perform sort of

690
00:31:48,360 --> 00:31:51,960
attack on sn4 to use those tools uh so

691
00:31:51,960 --> 00:31:54,960
we have a key schedule finder in other

692
00:31:54,960 --> 00:31:57,860
two we have the product analysis library

693
00:31:57,860 --> 00:32:02,760
in scaled the Phoenix sn4 we should be

694
00:32:02,760 --> 00:32:05,340
included in the sectional model so feel

695
00:32:05,340 --> 00:32:07,080
free to use them and if you have any

696
00:32:07,080 --> 00:32:09,480
remote here I would be happy to take

697
00:32:09,480 --> 00:32:11,220
them and if you you think that this

698
00:32:11,220 --> 00:32:12,899
toolk was useless and you don't want to

699
00:32:12,899 --> 00:32:15,179
see this kind of code in the future it's

700
00:32:15,179 --> 00:32:17,039
easy to prevent that just keep the

701
00:32:17,039 --> 00:32:18,539
shortcut if you have a new attack it

702
00:32:18,539 --> 00:32:20,880
will be easier for people to just test

703
00:32:20,880 --> 00:32:22,799
your claims

704
00:32:22,799 --> 00:32:24,419
so thank you and if you have any

705
00:32:24,419 --> 00:32:26,720
questions

