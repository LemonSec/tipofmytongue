1
00:00:02,820 --> 00:00:06,299
that design cool right so yes who am I

2
00:00:06,299 --> 00:00:09,540
uh my name is Ilia I am the senior

3
00:00:09,540 --> 00:00:11,639
director of operative system security at

4
00:00:11,639 --> 00:00:13,380
Iowa active

5
00:00:13,380 --> 00:00:15,000
um I mostly specialize in the court

6
00:00:15,000 --> 00:00:17,400
review as well but

7
00:00:17,400 --> 00:00:19,800
I like low-level security stuff uh

8
00:00:19,800 --> 00:00:23,160
mostly CC plus plus 70 in recent years

9
00:00:23,160 --> 00:00:26,760
uh that has been supplemented by Russ

10
00:00:26,760 --> 00:00:28,740
and a little bit ago

11
00:00:28,740 --> 00:00:30,560
um I like operating systems I like

12
00:00:30,560 --> 00:00:33,059
drivers hypervisors

13
00:00:33,059 --> 00:00:35,760
root loaders and ups and then have them

14
00:00:35,760 --> 00:00:39,420
benefit stuff which I'm sure is shared

15
00:00:39,420 --> 00:00:40,559
by many here

16
00:00:40,559 --> 00:00:42,730
um because it is

17
00:00:42,730 --> 00:00:45,059
[Music]

18
00:00:45,059 --> 00:00:47,520
um up like this awesome thank you okay

19
00:00:47,520 --> 00:00:49,680
so the audience I'm sure I have the

20
00:00:49,680 --> 00:00:52,260
right audience but uh just to make sure

21
00:00:52,260 --> 00:00:54,000
um if you're interested in embedded

22
00:00:54,000 --> 00:00:55,739
stuff you have recent firmware if you're

23
00:00:55,739 --> 00:00:57,719
interested in boot loaders and boot ROMs

24
00:00:57,719 --> 00:00:59,399
and bios UV

25
00:00:59,399 --> 00:01:03,359
this talk may be for you more broadly if

26
00:01:03,359 --> 00:01:04,559
you are generally interested in

27
00:01:04,559 --> 00:01:07,439
low-level security you might like this I

28
00:01:07,439 --> 00:01:09,659
have a little rusting at the end

29
00:01:09,659 --> 00:01:11,580
um so if you're a rust nerd there's a

30
00:01:11,580 --> 00:01:13,380
little surprise at the end

31
00:01:13,380 --> 00:01:15,780
um or if you're just generally securely

32
00:01:15,780 --> 00:01:17,820
curious or Tech curious uh there might

33
00:01:17,820 --> 00:01:20,700
be some nuggets here for you too

34
00:01:20,700 --> 00:01:21,840
um before I move on I kind of want to

35
00:01:21,840 --> 00:01:22,799
acknowledge

36
00:01:22,799 --> 00:01:24,600
um sort of the I don't do this in the

37
00:01:24,600 --> 00:01:26,939
vacuum I've learned an awful lot from

38
00:01:26,939 --> 00:01:29,460
these people and more uh some of them

39
00:01:29,460 --> 00:01:31,500
are well for some of them may even be in

40
00:01:31,500 --> 00:01:32,759
this room

41
00:01:32,759 --> 00:01:35,759
um this is through papers and research

42
00:01:35,759 --> 00:01:39,119
and tweets and videos and trainings and

43
00:01:39,119 --> 00:01:42,360
conversations and DMS and so on

44
00:01:42,360 --> 00:01:44,159
um and I'm sure I've left out many many

45
00:01:44,159 --> 00:01:46,259
more but I just wanted to acknowledge

46
00:01:46,259 --> 00:01:48,720
that um this isn't just me this is I've

47
00:01:48,720 --> 00:01:50,880
built upon work done by many many many

48
00:01:50,880 --> 00:01:53,939
people over uh probably about a decade

49
00:01:53,939 --> 00:01:56,460
and a half two decades

50
00:01:56,460 --> 00:01:58,259
uh right so what's the agenda I'll

51
00:01:58,259 --> 00:02:00,119
basically quickly go into the what and

52
00:02:00,119 --> 00:02:02,820
why of things and then I'll quickly talk

53
00:02:02,820 --> 00:02:03,840
about

54
00:02:03,840 --> 00:02:05,579
um some of the history and sort of where

55
00:02:05,579 --> 00:02:07,320
we currently are

56
00:02:07,320 --> 00:02:09,479
um and then I will dive into the review

57
00:02:09,479 --> 00:02:11,760
of one particular one it was earlier

58
00:02:11,760 --> 00:02:13,680
mentioned it's the one that Microsoft

59
00:02:13,680 --> 00:02:15,180
has created

60
00:02:15,180 --> 00:02:17,640
um I'll talk about the review I did the

61
00:02:17,640 --> 00:02:19,020
timeline

62
00:02:19,020 --> 00:02:19,860
um

63
00:02:19,860 --> 00:02:24,180
the back and forth uh with them and then

64
00:02:24,180 --> 00:02:26,160
I'll dive into some of the Discover

65
00:02:26,160 --> 00:02:29,400
issues uh and uh once we run through

66
00:02:29,400 --> 00:02:30,300
that

67
00:02:30,300 --> 00:02:32,040
um we'll be more than halfway through

68
00:02:32,040 --> 00:02:36,180
I'll talk about uh observations uh a

69
00:02:36,180 --> 00:02:38,760
call to action and uh hopefully I'll

70
00:02:38,760 --> 00:02:40,319
have a little bit of time left over and

71
00:02:40,319 --> 00:02:42,540
if you have questions I'll try my best

72
00:02:42,540 --> 00:02:46,080
to answer them but I make no guarantees

73
00:02:46,080 --> 00:02:46,739
um

74
00:02:46,739 --> 00:02:49,620
right so what is Nissan uh supervisor

75
00:02:49,620 --> 00:02:51,180
well before you can answer that is like

76
00:02:51,180 --> 00:02:54,000
what is SNM uh I'm guessing most people

77
00:02:54,000 --> 00:02:56,120
know what it is but

78
00:02:56,120 --> 00:02:59,280
roughly at a 50 000 feet view is it's

79
00:02:59,280 --> 00:03:00,920
this thing called system management mode

80
00:03:00,920 --> 00:03:04,819
which is this very uh privileged mode

81
00:03:04,819 --> 00:03:09,060
that uh most software runs has no clue

82
00:03:09,060 --> 00:03:11,819
it's there it runs underneath them uh

83
00:03:11,819 --> 00:03:14,099
it's kind of transparent sometimes it

84
00:03:14,099 --> 00:03:17,099
isn't some handful of pieces you know

85
00:03:17,099 --> 00:03:20,040
it's there but generally and certainly

86
00:03:20,040 --> 00:03:22,319
in the past if you go back

87
00:03:22,319 --> 00:03:25,140
10 51 years it was certainly distinct

88
00:03:25,140 --> 00:03:26,580
that nobody knew about

89
00:03:26,580 --> 00:03:28,379
um it's got a lot more school these days

90
00:03:28,379 --> 00:03:30,480
because

91
00:03:30,480 --> 00:03:31,920
udk has been open sourced and there's

92
00:03:31,920 --> 00:03:33,959
been a lot of security research

93
00:03:33,959 --> 00:03:35,640
um but and the thing is that thing is

94
00:03:35,640 --> 00:03:37,739
unbelievably powerful it has access to

95
00:03:37,739 --> 00:03:39,180
everything

96
00:03:39,180 --> 00:03:41,220
um and that also gets us to why what's

97
00:03:41,220 --> 00:03:43,739
the supervisor well because it is so

98
00:03:43,739 --> 00:03:46,920
powerful it gets attacked all the time

99
00:03:46,920 --> 00:03:49,620
um and there is an endless stream of

100
00:03:49,620 --> 00:03:51,299
incident for abilities that have come

101
00:03:51,299 --> 00:03:53,700
out in the last decade or so

102
00:03:53,700 --> 00:03:55,920
um and so we need a way to de-privise

103
00:03:55,920 --> 00:03:59,760
this stuff isolated measure it and then

104
00:03:59,760 --> 00:04:02,159
apply policy to it and this is a little

105
00:04:02,159 --> 00:04:04,440
blurp at the end which is this is I

106
00:04:04,440 --> 00:04:05,819
think from a blog post by the Andy

107
00:04:05,819 --> 00:04:07,739
Phillips that sort of roughly described

108
00:04:07,739 --> 00:04:10,500
which are uh supervisor is

109
00:04:10,500 --> 00:04:11,700
um I won't go into all of it but

110
00:04:11,700 --> 00:04:13,739
essentially it says

111
00:04:13,739 --> 00:04:17,160
um it it's uh it doesn't it basically

112
00:04:17,160 --> 00:04:19,440
takes system Handler's stuff's

113
00:04:19,440 --> 00:04:21,600
delivering three puts a little ring zero

114
00:04:21,600 --> 00:04:23,759
kernel at the bottom creates a Cisco on

115
00:04:23,759 --> 00:04:25,860
the face and then uh all of the

116
00:04:25,860 --> 00:04:28,680
privileged things such as IO chords uh

117
00:04:28,680 --> 00:04:33,000
msrs provision instructions uh certain

118
00:04:33,000 --> 00:04:35,340
pieces of memory

119
00:04:35,340 --> 00:04:37,740
um if it won't allow accidentals anymore

120
00:04:37,740 --> 00:04:39,660
so it stops Out quote that touches those

121
00:04:39,660 --> 00:04:42,960
and replaces it uh with a syscall and

122
00:04:42,960 --> 00:04:44,580
then it goes into

123
00:04:44,580 --> 00:04:46,259
um this little private scroll at the

124
00:04:46,259 --> 00:04:48,360
bottom that runs in ring zero and

125
00:04:48,360 --> 00:04:49,860
basically ring three equals three zero

126
00:04:49,860 --> 00:04:51,419
and says hey can you go do this for me

127
00:04:51,419 --> 00:04:54,000
and uh ring zero goes I don't know maybe

128
00:04:54,000 --> 00:04:55,860
uh let me check the policy in this

129
00:04:55,860 --> 00:04:57,300
policy says okay yeah you're allowed to

130
00:04:57,300 --> 00:04:59,520
do this I'll go do this on your behalf

131
00:04:59,520 --> 00:05:04,280
or it looks deposit and says hell no

132
00:05:04,740 --> 00:05:05,940
so

133
00:05:05,940 --> 00:05:08,580
um that's kind of the what

134
00:05:08,580 --> 00:05:10,919
the why is that's there's I mean there's

135
00:05:10,919 --> 00:05:12,419
history here right this goes back a

136
00:05:12,419 --> 00:05:13,979
decade and change

137
00:05:13,979 --> 00:05:18,660
um sort of around 2009 there was this

138
00:05:18,660 --> 00:05:20,820
really interesting research by uh Joanna

139
00:05:20,820 --> 00:05:24,240
and Rafal uh on uh the first exclusion

140
00:05:24,240 --> 00:05:27,479
technology which is the Intel about how

141
00:05:27,479 --> 00:05:31,380
to do like all these kind of things

142
00:05:31,380 --> 00:05:33,120
um and they looked at it and they kind

143
00:05:33,120 --> 00:05:37,259
of they said well okay uh if if you if

144
00:05:37,259 --> 00:05:39,600
your SM Hills a compromise this whole

145
00:05:39,600 --> 00:05:41,160
thing falls apart

146
00:05:41,160 --> 00:05:45,000
uh and Intel said yeah you have a point

147
00:05:45,000 --> 00:05:46,440
but here's what we're gonna do we're

148
00:05:46,440 --> 00:05:47,460
gonna come up with this thing called

149
00:05:47,460 --> 00:05:50,180
Miss TM which is an smm transfer mode

150
00:05:50,180 --> 00:05:52,380
and we're gonna use a bunch of

151
00:05:52,380 --> 00:05:54,360
virtualization stuff and we're gonna

152
00:05:54,360 --> 00:05:56,820
basically use that to kind of isolate

153
00:05:56,820 --> 00:05:58,800
the privilege the incident handlers and

154
00:05:58,800 --> 00:06:00,479
it's going to be beautiful and that's

155
00:06:00,479 --> 00:06:02,639
going to solve this problem

156
00:06:02,639 --> 00:06:04,740
um and when this paper was released uh

157
00:06:04,740 --> 00:06:09,419
in 2009 STM was a theoretical concept

158
00:06:09,419 --> 00:06:11,220
wasn't created

159
00:06:11,220 --> 00:06:14,780
um but they were going to buildings

160
00:06:14,820 --> 00:06:15,900
um

161
00:06:15,900 --> 00:06:17,699
and uh they did eventually and we'll get

162
00:06:17,699 --> 00:06:18,539
to that

163
00:06:18,539 --> 00:06:20,340
um what was interesting is that uh at

164
00:06:20,340 --> 00:06:23,039
least for me that paper was sort of be

165
00:06:23,039 --> 00:06:25,500
the floodgates as to yeah we need to

166
00:06:25,500 --> 00:06:28,440
look at SNM and people did and in the

167
00:06:28,440 --> 00:06:31,020
past five or ten years or so

168
00:06:31,020 --> 00:06:33,419
um there has been like a steady stream

169
00:06:33,419 --> 00:06:36,479
of like estimate another one another one

170
00:06:36,479 --> 00:06:39,180
another one it's just it it goes on and

171
00:06:39,180 --> 00:06:40,380
on and on

172
00:06:40,380 --> 00:06:42,539
and the reason why is as I said

173
00:06:42,539 --> 00:06:44,280
previously yesterday is really really

174
00:06:44,280 --> 00:06:45,840
powerful

175
00:06:45,840 --> 00:06:47,880
um it is called ring minus two for a

176
00:06:47,880 --> 00:06:49,740
reason right and I'm assuming most

177
00:06:49,740 --> 00:06:51,240
people who know what drinks are but if

178
00:06:51,240 --> 00:06:53,220
you don't there's this concept that

179
00:06:53,220 --> 00:06:55,139
Intel has that it didn't really come up

180
00:06:55,139 --> 00:06:57,900
with it people kind of had the similar

181
00:06:57,900 --> 00:06:59,699
system before but Intel basically said

182
00:06:59,699 --> 00:07:02,220
we're gonna have four uh rings of

183
00:07:02,220 --> 00:07:04,020
privilege the least previous one is

184
00:07:04,020 --> 00:07:06,060
between three and then I just ring two

185
00:07:06,060 --> 00:07:09,120
and ring one which uh nobody really uses

186
00:07:09,120 --> 00:07:10,680
and then there's ring zero which is

187
00:07:10,680 --> 00:07:12,539
where your OS and your kernel lives and

188
00:07:12,539 --> 00:07:14,639
that's very privileged

189
00:07:14,639 --> 00:07:17,100
um and then they kind of um added some

190
00:07:17,100 --> 00:07:18,780
things on they create s m and they

191
00:07:18,780 --> 00:07:20,880
created extensive virtualization so you

192
00:07:20,880 --> 00:07:22,680
got these negative Rings which is -1

193
00:07:22,680 --> 00:07:25,199
which is hypervisor they got minus two

194
00:07:25,199 --> 00:07:27,660
which is this thing S and M and then

195
00:07:27,660 --> 00:07:29,160
there's also the quote-unquote ring

196
00:07:29,160 --> 00:07:31,139
three minus three which is the

197
00:07:31,139 --> 00:07:33,180
management engine uh but that is not

198
00:07:33,180 --> 00:07:34,500
something you'll be talking about in

199
00:07:34,500 --> 00:07:36,900
this presentation but it's very

200
00:07:36,900 --> 00:07:38,220
interesting

201
00:07:38,220 --> 00:07:39,780
um so anyway it's it's ring minus two

202
00:07:39,780 --> 00:07:42,419
it's real all the way at the bottom

203
00:07:42,419 --> 00:07:44,699
almost it has unbelievable amount of

204
00:07:44,699 --> 00:07:47,759
access this is powerful stuff this is

205
00:07:47,759 --> 00:07:50,699
stuff that uh um nation states attack

206
00:07:50,699 --> 00:07:53,340
because they want to have boot kits and

207
00:07:53,340 --> 00:07:54,960
root kits that are virtually acceptable

208
00:07:54,960 --> 00:07:56,759
and you can't get rid of and use audio

209
00:07:56,759 --> 00:07:58,919
Western are still there but this stuff

210
00:07:58,919 --> 00:08:02,400
gets attacked by some very very powerful

211
00:08:02,400 --> 00:08:05,039
uh adversaries

212
00:08:05,039 --> 00:08:08,039
um and the other thing is uh I mean dxt

213
00:08:08,039 --> 00:08:09,840
was one way but it turns out there are

214
00:08:09,840 --> 00:08:11,580
other reasons why you want to attack uh

215
00:08:11,580 --> 00:08:14,280
smm uh one of the interesting ones that

216
00:08:14,280 --> 00:08:16,080
was presented I don't know maybe a

217
00:08:16,080 --> 00:08:18,240
decade at this point was

218
00:08:18,240 --> 00:08:20,039
um and this has since been kind of sort

219
00:08:20,039 --> 00:08:22,440
of fixed is then uh but was this thing

220
00:08:22,440 --> 00:08:24,120
where if you if you can basically talk

221
00:08:24,120 --> 00:08:26,819
to this then handle from dos and say oh

222
00:08:26,819 --> 00:08:28,560
hey will you write to this piece of

223
00:08:28,560 --> 00:08:29,879
memory

224
00:08:29,879 --> 00:08:32,219
um which is not SM Ram so SM goes like

225
00:08:32,219 --> 00:08:33,779
yeah it's not it's on purpose from my

226
00:08:33,779 --> 00:08:35,760
point of view uh but that's owned by the

227
00:08:35,760 --> 00:08:38,099
hypervisor so there were these attacks

228
00:08:38,099 --> 00:08:40,860
where you could leverage s m for like a

229
00:08:40,860 --> 00:08:43,020
break out of the OS to the hypervisor

230
00:08:43,020 --> 00:08:44,940
and that's just one of many left there

231
00:08:44,940 --> 00:08:47,760
are a number of ways in which attack SM

232
00:08:47,760 --> 00:08:51,300
is very very interesting right

233
00:08:51,300 --> 00:08:54,540
um and so if you I went to the cve

234
00:08:54,540 --> 00:08:57,720
website uh this morning and if you

235
00:08:57,720 --> 00:08:59,760
notice that these are just CVS from this

236
00:08:59,760 --> 00:09:00,660
year

237
00:09:00,660 --> 00:09:02,339
uh and this is not all of them there's

238
00:09:02,339 --> 00:09:05,220
more of this here right the list is very

239
00:09:05,220 --> 00:09:06,240
long

240
00:09:06,240 --> 00:09:09,300
and it's it's it's Dell and it's the

241
00:09:09,300 --> 00:09:11,399
nofo and it's Emi and it's inside and

242
00:09:11,399 --> 00:09:13,920
it's Intel work and it's did everyone

243
00:09:13,920 --> 00:09:16,620
basically everyone that builds software

244
00:09:16,620 --> 00:09:18,300
would you feed creates a lot of them

245
00:09:18,300 --> 00:09:19,560
handlers they're gonna have more

246
00:09:19,560 --> 00:09:21,480
abilities and people are finding them

247
00:09:21,480 --> 00:09:24,240
like quite a truckloads right

248
00:09:24,240 --> 00:09:25,560
um and this time this stuff is really

249
00:09:25,560 --> 00:09:27,240
powerful right

250
00:09:27,240 --> 00:09:30,440
um so this is this is terrified

251
00:09:32,480 --> 00:09:35,220
this list goes back 10 15 years right

252
00:09:35,220 --> 00:09:37,500
it's it's long

253
00:09:37,500 --> 00:09:40,860
um anyway so the why of this is yeah

254
00:09:40,860 --> 00:09:42,899
um we we need something to control this

255
00:09:42,899 --> 00:09:45,720
because uh it's it's it's bad

256
00:09:45,720 --> 00:09:47,519
um good news is there have been a number

257
00:09:47,519 --> 00:09:49,920
of steps uh even before the assembly

258
00:09:49,920 --> 00:09:51,839
requirements that have been taken right

259
00:09:51,839 --> 00:09:54,120
um from when people start in technician

260
00:09:54,120 --> 00:09:56,399
handles we learned a lot it turns out

261
00:09:56,399 --> 00:09:57,660
these instrument handles were doing

262
00:09:57,660 --> 00:09:59,700
really really dumb things because if

263
00:09:59,700 --> 00:10:00,839
you're living off in a quarter and

264
00:10:00,839 --> 00:10:02,399
nobody's paying attention to you you can

265
00:10:02,399 --> 00:10:03,779
get away with doing really dumb things

266
00:10:03,779 --> 00:10:06,240
but once somebody starts looking like

267
00:10:06,240 --> 00:10:08,100
you like stop doing that right don't

268
00:10:08,100 --> 00:10:09,959
don't put your fingers in you know the

269
00:10:09,959 --> 00:10:12,000
the power output right that kind of

270
00:10:12,000 --> 00:10:14,100
stuff they were like doing stuff like

271
00:10:14,100 --> 00:10:15,720
taking pointers and storing them in

272
00:10:15,720 --> 00:10:17,519
non-volotile memory and stuff like that

273
00:10:17,519 --> 00:10:19,380
so the us could go in and override those

274
00:10:19,380 --> 00:10:21,779
quarters and snicks in for some point

275
00:10:21,779 --> 00:10:23,640
and he said great disappointers isn't

276
00:10:23,640 --> 00:10:25,320
what I'm what I put there previously

277
00:10:25,320 --> 00:10:27,660
memory Crush that kind of stuff

278
00:10:27,660 --> 00:10:30,420
we've learned not to do this

279
00:10:30,420 --> 00:10:32,760
um the developers aware of this uh

280
00:10:32,760 --> 00:10:34,920
people have locked down page tables so

281
00:10:34,920 --> 00:10:37,140
you can't do things like oh hey I'm the

282
00:10:37,140 --> 00:10:39,320
OS but can you please write to uh

283
00:10:39,320 --> 00:10:42,540
hypervisor that doesn't work anymore a

284
00:10:42,540 --> 00:10:44,220
whole bunch of things have been done on

285
00:10:44,220 --> 00:10:46,560
top of that uh we

286
00:10:46,560 --> 00:10:48,180
've come up with at least somewhat of a

287
00:10:48,180 --> 00:10:50,160
list of viewers stupid things you can do

288
00:10:50,160 --> 00:10:52,260
as if you're an Instagram developer and

289
00:10:52,260 --> 00:10:53,540
by and large people have started

290
00:10:53,540 --> 00:10:56,279
appliancing and learning things and SM

291
00:10:56,279 --> 00:10:58,140
code would be today is certainly a lot

292
00:10:58,140 --> 00:11:00,540
better than this report that was 10 or

293
00:11:00,540 --> 00:11:02,700
15 years ago although as you can see

294
00:11:02,700 --> 00:11:06,180
from the previous list it's not perfect

295
00:11:06,180 --> 00:11:09,300
by a long shot there's plenty of bugs in

296
00:11:09,300 --> 00:11:11,100
this and then handlers

297
00:11:11,100 --> 00:11:13,260
um and so the the even though it's

298
00:11:13,260 --> 00:11:15,420
better now than it used to be uh it's

299
00:11:15,420 --> 00:11:17,040
it's not good enough right and that's

300
00:11:17,040 --> 00:11:19,019
because this stuff is just too so

301
00:11:19,019 --> 00:11:20,700
powerful

302
00:11:20,700 --> 00:11:22,260
um everyone wants everyone wants to

303
00:11:22,260 --> 00:11:24,720
attack it

304
00:11:24,720 --> 00:11:27,720
um the other side of that is that um do

305
00:11:27,720 --> 00:11:29,100
it being a hardware firmware developer

306
00:11:29,100 --> 00:11:31,680
uh certainly for SNM uh if you're like

307
00:11:31,680 --> 00:11:33,180
that last Model kind of guy where like

308
00:11:33,180 --> 00:11:34,680
you've got to ship this thing out but

309
00:11:34,680 --> 00:11:37,140
we've got this Hardware problem you've

310
00:11:37,140 --> 00:11:38,779
got a week to make like a distance

311
00:11:38,779 --> 00:11:41,279
Handler to work around Hardware thing

312
00:11:41,279 --> 00:11:43,079
security is the last thing in your mind

313
00:11:43,079 --> 00:11:45,000
because you have to ship an actual piece

314
00:11:45,000 --> 00:11:46,320
of Hardware right

315
00:11:46,320 --> 00:11:47,940
um so that's part of the reason why this

316
00:11:47,940 --> 00:11:49,980
stuff happens uh thankless jobs there

317
00:11:49,980 --> 00:11:52,200
people doing unbelievably amazing work

318
00:11:52,200 --> 00:11:54,660
uh but in some of those cases security

319
00:11:54,660 --> 00:11:57,420
is kind of like the last like it's a

320
00:11:57,420 --> 00:11:59,220
priority but it's like priority 500

321
00:11:59,220 --> 00:12:01,440
because priority zero and one is like we

322
00:12:01,440 --> 00:12:03,420
need to ship this stuff or we take you

323
00:12:03,420 --> 00:12:05,339
know millions of dollars of loss this

324
00:12:05,339 --> 00:12:07,320
year right

325
00:12:07,320 --> 00:12:09,779
um so that's not good it sort of It kind

326
00:12:09,779 --> 00:12:11,880
of explains some of this

327
00:12:11,880 --> 00:12:13,560
um but ultimately what this means is we

328
00:12:13,560 --> 00:12:15,959
we need more and we need better

329
00:12:15,959 --> 00:12:17,700
um uh and this is where the system

330
00:12:17,700 --> 00:12:19,860
supervisor comes in right the idea is

331
00:12:19,860 --> 00:12:22,279
that you create a minimized system TCB

332
00:12:22,279 --> 00:12:24,660
uh and you basically de-privilege

333
00:12:24,660 --> 00:12:27,240
isolate measure and apply policy to all

334
00:12:27,240 --> 00:12:29,160
these systems and smm handlers and if

335
00:12:29,160 --> 00:12:30,660
you do that and you go back to these

336
00:12:30,660 --> 00:12:32,760
lists vulnerabilities will still be

337
00:12:32,760 --> 00:12:34,560
there that these estimate panels will go

338
00:12:34,560 --> 00:12:35,399
over

339
00:12:35,399 --> 00:12:37,740
um have the access they previously had

340
00:12:37,740 --> 00:12:40,140
right they would have very very narrowly

341
00:12:40,140 --> 00:12:43,260
defined by policy explicitly assigned

342
00:12:43,260 --> 00:12:44,820
and verified list of things they would

343
00:12:44,820 --> 00:12:47,000
do

344
00:12:47,760 --> 00:12:49,380
um right so now let's talk about current

345
00:12:49,380 --> 00:12:50,639
implementations

346
00:12:50,639 --> 00:12:51,899
this is actually not quite current but

347
00:12:51,899 --> 00:12:52,980
this is the SDM I was talking about

348
00:12:52,980 --> 00:12:55,560
earlier uh where Intel in 2009 said oh

349
00:12:55,560 --> 00:12:57,480
we're going to do this and then it was

350
00:12:57,480 --> 00:12:59,339
this abstract concept

351
00:12:59,339 --> 00:13:02,100
they ultimately did create an STM

352
00:13:02,100 --> 00:13:04,380
notation and it was open seriously it

353
00:13:04,380 --> 00:13:06,300
was put on GitHub

354
00:13:06,300 --> 00:13:07,800
um and then they said we're not actually

355
00:13:07,800 --> 00:13:09,120
going to use it like we build it but

356
00:13:09,120 --> 00:13:11,100
we're not going to use this

357
00:13:11,100 --> 00:13:13,740
um and then they uh the thing they they

358
00:13:13,740 --> 00:13:16,200
did build and use uh we're talking about

359
00:13:16,200 --> 00:13:20,040
next slide this is a a a few paragraphs

360
00:13:20,040 --> 00:13:22,320
from that paper and these paragraphs

361
00:13:22,320 --> 00:13:24,720
talk about the the history of the STM

362
00:13:24,720 --> 00:13:26,040
and they talk about like the

363
00:13:26,040 --> 00:13:27,120
capabilities and what it's supposed to

364
00:13:27,120 --> 00:13:28,680
do and then all the way at the end

365
00:13:28,680 --> 00:13:30,620
highlighted stuff basically says um

366
00:13:30,620 --> 00:13:33,180
architecturally this uh was complete

367
00:13:33,180 --> 00:13:35,639
regarding the requirements that was in

368
00:13:35,639 --> 00:13:38,639
the last three paragraphs about that but

369
00:13:38,639 --> 00:13:40,860
it turns out STM phase many

370
00:13:40,860 --> 00:13:42,420
implementation and deployment challenges

371
00:13:42,420 --> 00:13:44,160
stemming from inherent complexity

372
00:13:44,160 --> 00:13:46,500
because it turns out building a little

373
00:13:46,500 --> 00:13:51,300
micro hypervisor is really really hard

374
00:13:51,300 --> 00:13:53,220
um so they're like bad idea let's get

375
00:13:53,220 --> 00:13:54,360
rid of that

376
00:13:54,360 --> 00:13:56,339
um so the paper I'm talking about is the

377
00:13:56,339 --> 00:13:58,139
um distinct uh Intel Hardware Shield

378
00:13:58,139 --> 00:14:02,100
trustworthy s m on Intel vicro platform

379
00:14:02,100 --> 00:14:03,660
um it's it's a it's a it's an awesome

380
00:14:03,660 --> 00:14:05,820
paper it's only six or seven pages if

381
00:14:05,820 --> 00:14:07,579
you haven't read it I recommend you do

382
00:14:07,579 --> 00:14:10,980
uh it's action-packed like it's dense it

383
00:14:10,980 --> 00:14:12,720
take a weekend to read that stuff and go

384
00:14:12,720 --> 00:14:14,399
through carefully because there's a lot

385
00:14:14,399 --> 00:14:16,399
in there and read it a couple of times

386
00:14:16,399 --> 00:14:19,260
uh but essentially it talks about a mix

387
00:14:19,260 --> 00:14:22,139
of technologies that aren't quite an SM

388
00:14:22,139 --> 00:14:25,740
supervisor but have lots of parallels

389
00:14:25,740 --> 00:14:27,779
um and in in and I'm I'm summarizing

390
00:14:27,779 --> 00:14:29,160
here there's a lot to impact here for

391
00:14:29,160 --> 00:14:30,899
which I have no time but essentially

392
00:14:30,899 --> 00:14:33,060
these three Technologies Intel has uh

393
00:14:33,060 --> 00:14:35,760
named them uh runtime bias resilience uh

394
00:14:35,760 --> 00:14:37,440
system security report and uh assistant

395
00:14:37,440 --> 00:14:40,620
resource defense and from a very high

396
00:14:40,620 --> 00:14:42,660
level point of view basically uh runtime

397
00:14:42,660 --> 00:14:44,699
buyers resilience is this thing where it

398
00:14:44,699 --> 00:14:46,260
had a locked down a bunch of the the

399
00:14:46,260 --> 00:14:49,019
page tables and um uh make use of

400
00:14:49,019 --> 00:14:50,579
similar security properties on the

401
00:14:50,579 --> 00:14:53,399
memory uh uh the memory paging provides

402
00:14:53,399 --> 00:14:57,180
and then they made a few uh uh Hardware

403
00:14:57,180 --> 00:14:59,519
tweaks and features that are very very

404
00:14:59,519 --> 00:15:01,500
Intel specific that allow you to lock

405
00:15:01,500 --> 00:15:04,260
certain registers so that if you apply

406
00:15:04,260 --> 00:15:05,160
this

407
00:15:05,160 --> 00:15:09,000
um to smm then even if smm runs it can't

408
00:15:09,000 --> 00:15:11,760
modify cr0 or CR three is in a bunch of

409
00:15:11,760 --> 00:15:13,800
other registers

410
00:15:13,800 --> 00:15:14,699
um

411
00:15:14,699 --> 00:15:17,100
is the part of Intel

412
00:15:17,100 --> 00:15:18,839
generation eight

413
00:15:18,839 --> 00:15:21,540
security report is part of Intel

414
00:15:21,540 --> 00:15:23,399
generation 9.

415
00:15:23,399 --> 00:15:24,779
um there's it was kind of a phased

416
00:15:24,779 --> 00:15:27,120
approach when this came out and this is

417
00:15:27,120 --> 00:15:29,339
basically this facility is attestation

418
00:15:29,339 --> 00:15:33,360
for these highly privileged s m handlers

419
00:15:33,360 --> 00:15:36,060
um and basically it was built in a way

420
00:15:36,060 --> 00:15:39,779
that it could safely attest as the

421
00:15:39,779 --> 00:15:41,760
handlers even if these super powerful

422
00:15:41,760 --> 00:15:44,220
system inhalers are complements right uh

423
00:15:44,220 --> 00:15:46,620
not not an easy thing to do

424
00:15:46,620 --> 00:15:48,540
um and it's definitely something I want

425
00:15:48,540 --> 00:15:50,279
to poke at at some point but I haven't

426
00:15:50,279 --> 00:15:51,899
yet

427
00:15:51,899 --> 00:15:53,699
um and the last thing they added and now

428
00:15:53,699 --> 00:15:58,500
we get into uh um uh Intel gen 10.

429
00:15:58,500 --> 00:15:59,820
um this is where they actually did the

430
00:15:59,820 --> 00:16:01,560
approval of separation and so they have

431
00:16:01,560 --> 00:16:04,320
this thing called SM entry or SM uh

432
00:16:04,320 --> 00:16:06,060
Fires at some point the first thing

433
00:16:06,060 --> 00:16:08,279
happens yes energy comes in that runs at

434
00:16:08,279 --> 00:16:10,260
ring zero it sets up the right

435
00:16:10,260 --> 00:16:12,120
environment based on the policy and so

436
00:16:12,120 --> 00:16:14,339
on and then it basically uh goes during

437
00:16:14,339 --> 00:16:17,040
three and uh starts extruding a 7 Edge

438
00:16:17,040 --> 00:16:19,500
so at this point the S7 handles run in

439
00:16:19,500 --> 00:16:21,420
ring three and they're fairly

440
00:16:21,420 --> 00:16:24,079
unprivileged

441
00:16:25,019 --> 00:16:28,740
um that's Intel's uh so intels isn't

442
00:16:28,740 --> 00:16:31,740
quite a supervisor but it's

443
00:16:31,740 --> 00:16:34,079
similar ish there's parallels there they

444
00:16:34,079 --> 00:16:36,660
try to achieve the same things uh AMD

445
00:16:36,660 --> 00:16:39,360
actually build a full-on uh supervisor

446
00:16:39,360 --> 00:16:40,980
um that's what AMD did is they looked at

447
00:16:40,980 --> 00:16:44,759
the SDM that uh Intel uh proposed in

448
00:16:44,759 --> 00:16:46,380
2009 and they said we're going to do

449
00:16:46,380 --> 00:16:49,019
that but they realized like let's not

450
00:16:49,019 --> 00:16:50,220
use virtualization for this because it's

451
00:16:50,220 --> 00:16:52,380
going to be a huge pain in the ass uh

452
00:16:52,380 --> 00:16:54,839
we'll just do sort of the classic uh

453
00:16:54,839 --> 00:16:57,480
user kernel we'll create a little uh

454
00:16:57,480 --> 00:16:59,579
secure kernel run into ring zero and

455
00:16:59,579 --> 00:17:01,500
then emotional distance between three

456
00:17:01,500 --> 00:17:03,120
and that's exactly what they did right

457
00:17:03,120 --> 00:17:05,220
so the idea is ring three enforces

458
00:17:05,220 --> 00:17:08,400
policy for MSR IO memory regions

459
00:17:08,400 --> 00:17:12,359
privilege disruptions and so on

460
00:17:12,359 --> 00:17:14,339
um that is the current sort of state of

461
00:17:14,339 --> 00:17:16,020
where we are

462
00:17:16,020 --> 00:17:17,579
um there are as I said there are various

463
00:17:17,579 --> 00:17:20,339
levels of documentation uh Intel once

464
00:17:20,339 --> 00:17:22,319
has that six percent uh page paper which

465
00:17:22,319 --> 00:17:24,839
is I would definitely recommend uh there

466
00:17:24,839 --> 00:17:26,699
is also a bunch of patent filings from

467
00:17:26,699 --> 00:17:29,580
Intel that cover this to great great

468
00:17:29,580 --> 00:17:31,740
detail even more detail than the 67 page

469
00:17:31,740 --> 00:17:33,960
paper uh the problem with those is it's

470
00:17:33,960 --> 00:17:37,200
all written in lawyeries Mr patents

471
00:17:37,200 --> 00:17:39,000
um they're not pleasant to read

472
00:17:39,000 --> 00:17:41,820
um but they give you an a huge huge

473
00:17:41,820 --> 00:17:43,740
amount of detail

474
00:17:43,740 --> 00:17:45,660
um the AMD one it's it's a bit of a

475
00:17:45,660 --> 00:17:47,940
sassive Affairs because we only have

476
00:17:47,940 --> 00:17:50,340
like a handful of paragraphs in a blog

477
00:17:50,340 --> 00:17:51,299
post

478
00:17:51,299 --> 00:17:54,240
fairly high level handful paragraphs in

479
00:17:54,240 --> 00:17:56,760
a paper they put out also fairly high

480
00:17:56,760 --> 00:17:58,919
level and then a couple of paragraphs in

481
00:17:58,919 --> 00:18:01,799
a blog post on Microsoft also relatively

482
00:18:01,799 --> 00:18:04,020
high level I wish we had more detail on

483
00:18:04,020 --> 00:18:05,460
this

484
00:18:05,460 --> 00:18:07,620
um so the problem is is none of this

485
00:18:07,620 --> 00:18:09,080
stuff is open source right it's all

486
00:18:09,080 --> 00:18:12,299
there's a little bit of the GNH stuff of

487
00:18:12,299 --> 00:18:14,160
the bias resilience that the main into

488
00:18:14,160 --> 00:18:16,380
but everything else is flow sewers and

489
00:18:16,380 --> 00:18:18,000
we don't get to actually see it we just

490
00:18:18,000 --> 00:18:20,100
have to take the word for it so that

491
00:18:20,100 --> 00:18:22,679
makes it so my I like to get dig in and

492
00:18:22,679 --> 00:18:24,600
see what steam really does makes it

493
00:18:24,600 --> 00:18:26,039
really hard to get a real sense how

494
00:18:26,039 --> 00:18:28,440
things work under the hood right that it

495
00:18:28,440 --> 00:18:30,360
forces us to do you know pretty

496
00:18:30,360 --> 00:18:32,460
intensive versus engineering and testing

497
00:18:32,460 --> 00:18:33,780
and fuzzing

498
00:18:33,780 --> 00:18:36,480
um and I'd love to do that I but I also

499
00:18:36,480 --> 00:18:39,240
have a day job and this is multi-month

500
00:18:39,240 --> 00:18:41,600
efforts

501
00:18:42,179 --> 00:18:44,220
um so this is where the story gets and

502
00:18:44,220 --> 00:18:45,480
this is I've been kind of looking at

503
00:18:45,480 --> 00:18:47,280
this as some supervisor type stuff since

504
00:18:47,280 --> 00:18:50,640
late 2019 early 2020 and so for the past

505
00:18:50,640 --> 00:18:52,860
two years or so I've been like I want to

506
00:18:52,860 --> 00:18:55,620
I want to see what this does

507
00:18:55,620 --> 00:18:57,120
um and then here Microsoft comes around

508
00:18:57,120 --> 00:18:59,520
and says oh well we'll just build one

509
00:18:59,520 --> 00:19:01,440
and we'll open sources

510
00:19:01,440 --> 00:19:02,760
um and that's what they did and it's

511
00:19:02,760 --> 00:19:04,919
it's available on GitHub

512
00:19:04,919 --> 00:19:07,020
um it's part of their project view which

513
00:19:07,020 --> 00:19:08,280
is the sort of

514
00:19:08,280 --> 00:19:11,160
module adaptation of adk2 I think they

515
00:19:11,160 --> 00:19:14,340
followed by firmware as a service which

516
00:19:14,340 --> 00:19:15,840
um I'm sure is applied for their

517
00:19:15,840 --> 00:19:17,400
Hardware but I'm sure I'll just gonna

518
00:19:17,400 --> 00:19:19,559
make use of it too uh it's it's meant

519
00:19:19,559 --> 00:19:22,980
for a way to easily manage uh features

520
00:19:22,980 --> 00:19:24,900
including security and patches and

521
00:19:24,900 --> 00:19:26,760
security patches although the security

522
00:19:26,760 --> 00:19:28,740
patches are trying to update it

523
00:19:28,740 --> 00:19:30,720
um so you know I don't want to see them

524
00:19:30,720 --> 00:19:33,299
and some people but I don't uh until

525
00:19:33,299 --> 00:19:36,059
they get published but apk2 security

526
00:19:36,059 --> 00:19:37,260
publishing

527
00:19:37,260 --> 00:19:39,840
there's usually big timelines and

528
00:19:39,840 --> 00:19:41,640
sometimes things get lost in a few years

529
00:19:41,640 --> 00:19:43,740
before it goes public so I'm sure

530
00:19:43,740 --> 00:19:44,820
there's plenty of stuff I haven't seen

531
00:19:44,820 --> 00:19:46,980
yet that that's been fixed but anyway

532
00:19:46,980 --> 00:19:49,260
that's a different story

533
00:19:49,260 --> 00:19:51,720
um the good thing is the invent the SM

534
00:19:51,720 --> 00:19:53,640
supervisor Prime Microsoft is here it's

535
00:19:53,640 --> 00:19:55,860
publicly available and it's documented

536
00:19:55,860 --> 00:19:57,299
and the documentation is really really

537
00:19:57,299 --> 00:19:58,200
nice

538
00:19:58,200 --> 00:20:00,480
the high level work here from the good

539
00:20:00,480 --> 00:20:03,179
people basically says uh this is the

540
00:20:03,179 --> 00:20:05,460
Supreme module for Standalone instead of

541
00:20:05,460 --> 00:20:08,940
hiring in x64 it's refactored Tiano core

542
00:20:08,940 --> 00:20:11,400
common module and public portions of AMD

543
00:20:11,400 --> 00:20:13,980
s m supervisor module I don't know what

544
00:20:13,980 --> 00:20:15,539
that means because there is no public

545
00:20:15,539 --> 00:20:18,120
portion of AMD SF supervisor module as

546
00:20:18,120 --> 00:20:20,520
far as I know when I looked

547
00:20:20,520 --> 00:20:22,740
um what's interesting though is

548
00:20:22,740 --> 00:20:26,220
um they there's a link to the uh AMD SNM

549
00:20:26,220 --> 00:20:29,700
supervisor repo on the Microsoft GitHub

550
00:20:29,700 --> 00:20:32,100
page but if you click on it you get a

551
00:20:32,100 --> 00:20:35,760
401 unauthorized so it may be because

552
00:20:35,760 --> 00:20:37,440
I'm sure it's just Folks at Microsoft

553
00:20:37,440 --> 00:20:39,720
but it's not accessible to me

554
00:20:39,720 --> 00:20:41,640
um but I don't really care because their

555
00:20:41,640 --> 00:20:43,020
code is accessible to me is that's what

556
00:20:43,020 --> 00:20:44,940
I looked at

557
00:20:44,940 --> 00:20:45,840
um

558
00:20:45,840 --> 00:20:47,640
and what's interesting is that this code

559
00:20:47,640 --> 00:20:49,940
actually does reference

560
00:20:49,940 --> 00:20:53,220
sorry this code actually does reference

561
00:20:53,220 --> 00:20:56,820
um a bunch of AMD in several ways so a

562
00:20:56,820 --> 00:20:58,440
number of the comments in the files will

563
00:20:58,440 --> 00:21:01,740
say uh you know copyright so AMD

564
00:21:01,740 --> 00:21:03,240
um and so there's that one blurb at

565
00:21:03,240 --> 00:21:04,860
least AMD

566
00:21:04,860 --> 00:21:07,260
um I I don't know to what extent AMD was

567
00:21:07,260 --> 00:21:08,460
involved in this I don't know if this

568
00:21:08,460 --> 00:21:10,500
was like a port of the AMD code and like

569
00:21:10,500 --> 00:21:12,660
Microsoft eyes or something or if it was

570
00:21:12,660 --> 00:21:14,400
Microsoft basically

571
00:21:14,400 --> 00:21:16,620
um not using their code but simply like

572
00:21:16,620 --> 00:21:19,679
being inspired either uh um supervisor

573
00:21:19,679 --> 00:21:21,179
it would be nice to get some kind of

574
00:21:21,179 --> 00:21:23,520
clarity about exactly the Wolves button

575
00:21:23,520 --> 00:21:26,039
there uh but ultimately I don't really

576
00:21:26,039 --> 00:21:27,660
care that much because the code's there

577
00:21:27,660 --> 00:21:30,000
and I can look at it

578
00:21:30,000 --> 00:21:31,140
um and so this is part of their

579
00:21:31,140 --> 00:21:32,460
documentation from the high level point

580
00:21:32,460 --> 00:21:33,840
of view

581
00:21:33,840 --> 00:21:37,500
um the sort of stuff on the left here is

582
00:21:37,500 --> 00:21:39,059
what it used to be and the stuff on the

583
00:21:39,059 --> 00:21:40,740
right here is the

584
00:21:40,740 --> 00:21:43,440
stuff that was changed that the

585
00:21:43,440 --> 00:21:45,480
Microsoft does right a particularly

586
00:21:45,480 --> 00:21:49,260
right here uh you'll see this is the the

587
00:21:49,260 --> 00:21:51,539
little new secure kernel that gets

588
00:21:51,539 --> 00:21:54,059
installed fairly early in boot and then

589
00:21:54,059 --> 00:21:55,860
these are the overall majority of

590
00:21:55,860 --> 00:21:57,720
discipline handlers uh all the green

591
00:21:57,720 --> 00:21:59,460
stuff is pushed to usually and it's deep

592
00:21:59,460 --> 00:22:00,900
privileged and it's running in ring

593
00:22:00,900 --> 00:22:02,640
three right so that's that's really

594
00:22:02,640 --> 00:22:03,720
really nice

595
00:22:03,720 --> 00:22:05,100
um and I Look to code and that this is

596
00:22:05,100 --> 00:22:07,020
exactly what they do it's it's nice it's

597
00:22:07,020 --> 00:22:09,260
beautiful

598
00:22:09,480 --> 00:22:10,620
um so

599
00:22:10,620 --> 00:22:13,740
um yeah basically my assumption was

600
00:22:13,740 --> 00:22:16,860
looking at this and basically saying my

601
00:22:16,860 --> 00:22:19,440
I'm I'm coming at this assuming I have a

602
00:22:19,440 --> 00:22:21,059
compromise this in hand

603
00:22:21,059 --> 00:22:24,960
how do I attack the the supervisor how

604
00:22:24,960 --> 00:22:27,720
do I break it how do I get in right and

605
00:22:27,720 --> 00:22:31,200
so the entry points uh or the the low

606
00:22:31,200 --> 00:22:32,640
hang fruit entry points that I looked at

607
00:22:32,640 --> 00:22:34,260
was basically well they keep talking

608
00:22:34,260 --> 00:22:36,000
about these CIS files let's go find

609
00:22:36,000 --> 00:22:37,799
these ciscalls and sure enough there's a

610
00:22:37,799 --> 00:22:40,620
Cisco entry dot NASA which is the

611
00:22:40,620 --> 00:22:43,559
the kind of when the Cisco comes in like

612
00:22:43,559 --> 00:22:46,039
literally electrician starts

613
00:22:46,039 --> 00:22:49,559
right here and then it saves a bunch of

614
00:22:49,559 --> 00:22:54,419
registers and then uh yeah hold here it

615
00:22:54,419 --> 00:22:56,640
calls it and then off the slide it

616
00:22:56,640 --> 00:22:58,679
restores the Richer and then jumps jumps

617
00:22:58,679 --> 00:23:00,299
back

618
00:23:00,299 --> 00:23:03,600
um to user but that is essentially

619
00:23:03,600 --> 00:23:06,020
um that is essentially the the the

620
00:23:06,020 --> 00:23:08,760
like very low level assembly part of the

621
00:23:08,760 --> 00:23:11,460
Cisco Handler and then like this guy is

622
00:23:11,460 --> 00:23:14,039
the is the actual C code uh which is

623
00:23:14,039 --> 00:23:17,460
this guy so this is like your your uh

624
00:23:17,460 --> 00:23:19,500
um assist call dispatcher

625
00:23:19,500 --> 00:23:21,960
and then uh yeah there's vlogging but

626
00:23:21,960 --> 00:23:24,240
then basically here starts a relatively

627
00:23:24,240 --> 00:23:26,520
in like opposite runs off the screen but

628
00:23:26,520 --> 00:23:28,440
here it starts this relatively large

629
00:23:28,440 --> 00:23:31,320
switch statement of you know uh syscall

630
00:23:31,320 --> 00:23:35,400
for Io ports and ciscoll for msrs this

631
00:23:35,400 --> 00:23:37,260
is false to get Pages this as well three

632
00:23:37,260 --> 00:23:40,200
pages and so on and so forth

633
00:23:40,200 --> 00:23:41,940
um so that that was really interesting

634
00:23:41,940 --> 00:23:45,539
um so I looked at that for uh about two

635
00:23:45,539 --> 00:23:47,340
weeks or so

636
00:23:47,340 --> 00:23:49,020
um very interesting code

637
00:23:49,020 --> 00:23:51,600
um and I'll have I'll talk about some of

638
00:23:51,600 --> 00:23:54,960
the observations later on uh but um

639
00:23:54,960 --> 00:23:57,600
basically the my end result was I had I

640
00:23:57,600 --> 00:23:59,220
found about nine issues in there right

641
00:23:59,220 --> 00:24:01,140
and this was

642
00:24:01,140 --> 00:24:03,480
um if you if you know about I mean if

643
00:24:03,480 --> 00:24:05,220
you look at standard sequel this is like

644
00:24:05,220 --> 00:24:06,539
all the stuff that we've seen before

645
00:24:06,539 --> 00:24:09,179
it's initial flows and race conditions

646
00:24:09,179 --> 00:24:11,640
and missing LinkedIn index validation

647
00:24:11,640 --> 00:24:14,880
missing input validation

648
00:24:14,880 --> 00:24:17,880
um uh Missing actual ish check should we

649
00:24:17,880 --> 00:24:19,799
talked about that in a little while uh

650
00:24:19,799 --> 00:24:23,280
the Brokenness is false stuff too

651
00:24:23,280 --> 00:24:25,020
um more Missing Link checks or

652
00:24:25,020 --> 00:24:27,000
inconsistent link checks

653
00:24:27,000 --> 00:24:28,200
um and then a really really interesting

654
00:24:28,200 --> 00:24:30,659
kind of sort of logic book ish with a

655
00:24:30,659 --> 00:24:32,580
proper cleanup

656
00:24:32,580 --> 00:24:34,260
um the good news is and this is uh this

657
00:24:34,260 --> 00:24:37,020
is all it's all of some issues

658
00:24:37,020 --> 00:24:38,700
um all of these things require to

659
00:24:38,700 --> 00:24:40,860
microexoft they fixed them

660
00:24:40,860 --> 00:24:42,539
um except for one

661
00:24:42,539 --> 00:24:45,600
um which is I think it's the

662
00:24:45,600 --> 00:24:47,820
missing device validation which is not

663
00:24:47,820 --> 00:24:51,659
fixed uh but it is public it's it's in

664
00:24:51,659 --> 00:24:54,240
if you look at uh those two open one of

665
00:24:54,240 --> 00:24:57,299
them is the device validation one

666
00:24:57,299 --> 00:25:00,120
um and uh

667
00:25:00,120 --> 00:25:01,799
uh basically

668
00:25:01,799 --> 00:25:03,419
um that one isn't fixed and the reason

669
00:25:03,419 --> 00:25:05,400
why is because a would be an awful lot

670
00:25:05,400 --> 00:25:07,020
of work to fix that particular one and B

671
00:25:07,020 --> 00:25:09,120
that is the profile code which you're

672
00:25:09,120 --> 00:25:10,620
not supposed to ship in the debug only

673
00:25:10,620 --> 00:25:14,340
so it's kind of okay uh the problem

674
00:25:14,340 --> 00:25:15,659
there of course is it creates technical

675
00:25:15,659 --> 00:25:18,000
debt if you don't fix bugs and of course

676
00:25:18,000 --> 00:25:19,620
sooner or later someone's going to ship

677
00:25:19,620 --> 00:25:22,320
this thing with this thing on in the bug

678
00:25:22,320 --> 00:25:24,900
anyway so hopefully someday this will

679
00:25:24,900 --> 00:25:27,120
get fixed uh but at the present time

680
00:25:27,120 --> 00:25:30,539
it's not and it's kind of sort of okay

681
00:25:30,539 --> 00:25:33,480
um so uh I just look at the time I'll

682
00:25:33,480 --> 00:25:36,059
run this to talk about some of these

683
00:25:36,059 --> 00:25:37,140
um but I don't think I'll have time to

684
00:25:37,140 --> 00:25:38,580
do all of these because I do want to get

685
00:25:38,580 --> 00:25:41,940
to my uh observations and call to action

686
00:25:41,940 --> 00:25:42,539
um

687
00:25:42,539 --> 00:25:45,360
but uh before I dive into details uh the

688
00:25:45,360 --> 00:25:47,520
timeline here was essentially

689
00:25:47,520 --> 00:25:49,860
um I did most of this work mid to late

690
00:25:49,860 --> 00:25:53,760
May uh up until very early June and

691
00:25:53,760 --> 00:25:56,279
um did a proper write-up with a bunch of

692
00:25:56,279 --> 00:25:58,620
details send it off to Microsoft and

693
00:25:58,620 --> 00:26:00,120
then the folks at Microsoft same day

694
00:26:00,120 --> 00:26:02,640
came back and said this is this is

695
00:26:02,640 --> 00:26:05,400
really cool we appreciate it uh here's

696
00:26:05,400 --> 00:26:07,460
what we're gonna do for the layout plan

697
00:26:07,460 --> 00:26:10,799
uh they send me another email about a

698
00:26:10,799 --> 00:26:13,440
week later uh providing updates saying

699
00:26:13,440 --> 00:26:15,960
we are actively reviewing this and then

700
00:26:15,960 --> 00:26:17,460
talk about some of the administrative

701
00:26:17,460 --> 00:26:20,940
stuff like credit should we do CDs kind

702
00:26:20,940 --> 00:26:22,919
of boring stuff

703
00:26:22,919 --> 00:26:25,440
um sorry responsibly saying cool awesome

704
00:26:25,440 --> 00:26:27,120
knowledge

705
00:26:27,120 --> 00:26:29,640
um some time goes by I didn't hear from

706
00:26:29,640 --> 00:26:32,340
you for a month of change so I go let's

707
00:26:32,340 --> 00:26:33,960
ping them see what's up

708
00:26:33,960 --> 00:26:36,659
yeah so hey did you forget about me

709
00:26:36,659 --> 00:26:39,480
um and so uh we

710
00:26:39,480 --> 00:26:41,340
each and a half later email back and

711
00:26:41,340 --> 00:26:42,419
they go

712
00:26:42,419 --> 00:26:43,860
so sorry

713
00:26:43,860 --> 00:26:45,539
um by the way I did not this was not

714
00:26:45,539 --> 00:26:47,159
msrc

715
00:26:47,159 --> 00:26:48,299
um because I

716
00:26:48,299 --> 00:26:50,340
if you reports of msrc and if it's

717
00:26:50,340 --> 00:26:52,799
windows or it's office it's great they

718
00:26:52,799 --> 00:26:55,140
deal it they deal with it if it's uh a

719
00:26:55,140 --> 00:26:57,440
micro project in GitHub

720
00:26:57,440 --> 00:26:59,760
response isn't always that good I've had

721
00:26:59,760 --> 00:27:01,980
terrible responses there so in those

722
00:27:01,980 --> 00:27:03,900
situations I tend to just look at like

723
00:27:03,900 --> 00:27:06,120
who's the guy Community called

724
00:27:06,120 --> 00:27:07,320
um oh it's got an email address great

725
00:27:07,320 --> 00:27:09,179
I'm just you know that guy there as

726
00:27:09,179 --> 00:27:11,580
that's what I did here and so uh when

727
00:27:11,580 --> 00:27:13,200
they were when I say Ms gives an update

728
00:27:13,200 --> 00:27:15,000
I'm talking about like a developer that

729
00:27:15,000 --> 00:27:17,760
works there that uh owns this that owns

730
00:27:17,760 --> 00:27:19,559
this code

731
00:27:19,559 --> 00:27:22,200
uh so it's a little bit of a distinction

732
00:27:22,200 --> 00:27:24,179
um but essentially the guy was like uh

733
00:27:24,179 --> 00:27:26,340
oh I'm sorry for the response but I was

734
00:27:26,340 --> 00:27:28,559
on vacation and I got quote those are

735
00:27:28,559 --> 00:27:30,840
two good excuses right uh and then he

736
00:27:30,840 --> 00:27:33,059
goes says here's the good news all the

737
00:27:33,059 --> 00:27:35,340
bugs are fixed internally

738
00:27:35,340 --> 00:27:38,400
um uh so he said uh what next steps

739
00:27:38,400 --> 00:27:40,380
basically how do we make this public how

740
00:27:40,380 --> 00:27:41,700
do we publish this how do we document

741
00:27:41,700 --> 00:27:43,799
this so we got back into should we get

742
00:27:43,799 --> 00:27:46,080
CDs you're not going to see these uh

743
00:27:46,080 --> 00:27:48,779
ultimately we're like well Hardware

744
00:27:48,779 --> 00:27:50,820
hasn't shipped with this yet

745
00:27:50,820 --> 00:27:52,860
so there's maybe not much important to

746
00:27:52,860 --> 00:27:55,020
get a CD for this

747
00:27:55,020 --> 00:27:56,640
um so we're like I'll start with a CV

748
00:27:56,640 --> 00:27:58,260
because it's administrative it's an

749
00:27:58,260 --> 00:28:00,000
administrative hassle I've had to do it

750
00:28:00,000 --> 00:28:03,240
before myself I'd rather not so I was

751
00:28:03,240 --> 00:28:05,700
like let's let's skip that step uh but

752
00:28:05,700 --> 00:28:07,980
let's make sure this is uh uh public and

753
00:28:07,980 --> 00:28:09,539
it was

754
00:28:09,539 --> 00:28:11,400
um they um and then basically and they

755
00:28:11,400 --> 00:28:13,500
gave me a list of suggestions and I said

756
00:28:13,500 --> 00:28:15,360
all of these look up to me whatever

757
00:28:15,360 --> 00:28:18,600
works for you and uh yeah about two

758
00:28:18,600 --> 00:28:20,039
three weeks later

759
00:28:20,039 --> 00:28:22,020
um all this stuff got they pushed to

760
00:28:22,020 --> 00:28:22,980
GitHub

761
00:28:22,980 --> 00:28:24,659
they created issues for it and then they

762
00:28:24,659 --> 00:28:26,100
created fixes for their own issues and

763
00:28:26,100 --> 00:28:27,240
then they resolved the issues because

764
00:28:27,240 --> 00:28:29,159
the fix is very committed by them

765
00:28:29,159 --> 00:28:30,960
and it worked beautifully and I looked

766
00:28:30,960 --> 00:28:33,659
at them and yeah they're good

767
00:28:33,659 --> 00:28:36,419
so with that um I'll jump into a couple

768
00:28:36,419 --> 00:28:38,460
of these uh

769
00:28:38,460 --> 00:28:40,380
uh probably not all of them but uh this

770
00:28:40,380 --> 00:28:42,059
is the first one this is the inner draw

771
00:28:42,059 --> 00:28:44,659
flow and this is this gets into the

772
00:28:44,659 --> 00:28:47,700
validation and so this is yeah it's

773
00:28:47,700 --> 00:28:52,140
called Uh this IO read write aloud and

774
00:28:52,140 --> 00:28:53,940
essentially like it looks a policy that

775
00:28:53,940 --> 00:28:56,279
roommates policies and goes oh is this

776
00:28:56,279 --> 00:28:58,620
the i o Port okay and then it does like

777
00:28:58,620 --> 00:29:02,100
okay here's the i o ports plus size

778
00:29:02,100 --> 00:29:03,900
within the range

779
00:29:03,900 --> 00:29:07,140
of in my policy it's got to be bigger

780
00:29:07,140 --> 00:29:08,640
than the beginning and smaller than the

781
00:29:08,640 --> 00:29:11,760
end when you define a range and if it is

782
00:29:11,760 --> 00:29:13,620
then it's allowed otherwise if it's not

783
00:29:13,620 --> 00:29:15,240
in a policy then it's not allowed

784
00:29:15,240 --> 00:29:18,720
problem is here because the address and

785
00:29:18,720 --> 00:29:20,220
well the size kind of comes it's

786
00:29:20,220 --> 00:29:22,140
translated here but the address comes

787
00:29:22,140 --> 00:29:25,140
from undressed usually and so you see i

788
00:29:25,140 --> 00:29:27,840
o address right here is equal 32 and

789
00:29:27,840 --> 00:29:29,460
zero into our two that's your entire two

790
00:29:29,460 --> 00:29:32,159
if I give you a really large address

791
00:29:32,159 --> 00:29:33,960
then you add a little size to it that's

792
00:29:33,960 --> 00:29:35,399
going to overflow right so it's really

793
00:29:35,399 --> 00:29:37,260
really big like four Gates and change it

794
00:29:37,260 --> 00:29:39,720
overflows it goes back to zero right

795
00:29:39,720 --> 00:29:42,120
um that's the problem right

796
00:29:42,120 --> 00:29:44,399
um in particular the problem is if you

797
00:29:44,399 --> 00:29:46,620
have a policy that says you are allowed

798
00:29:46,620 --> 00:29:49,860
to write to this a very low address then

799
00:29:49,860 --> 00:29:52,260
I give you a very high address that

800
00:29:52,260 --> 00:29:54,059
you're not allowed a few validation goes

801
00:29:54,059 --> 00:29:56,700
oh it's a low address great

802
00:29:56,700 --> 00:29:58,860
um and so that I end up being able to uh

803
00:29:58,860 --> 00:30:00,960
I will be allowed to write to high ports

804
00:30:00,960 --> 00:30:02,940
when there's a policy that only says you

805
00:30:02,940 --> 00:30:06,299
can you can write this very low

806
00:30:06,299 --> 00:30:08,100
um that is a very specific set of

807
00:30:08,100 --> 00:30:11,279
circumstances uh it highly depends on

808
00:30:11,279 --> 00:30:13,799
specific policy but it is definitely

809
00:30:13,799 --> 00:30:15,120
above

810
00:30:15,120 --> 00:30:17,460
um and it was fixed

811
00:30:17,460 --> 00:30:19,679
that's one the other one is this race

812
00:30:19,679 --> 00:30:21,240
condition which is kind of cute

813
00:30:21,240 --> 00:30:23,760
so there's this uh Handler guide which

814
00:30:23,760 --> 00:30:27,000
references something and this pointer

815
00:30:27,000 --> 00:30:28,799
points to use land it's been rain

816
00:30:28,799 --> 00:30:30,419
checked before so it's in range it's

817
00:30:30,419 --> 00:30:33,000
valid uh but it points to use it which

818
00:30:33,000 --> 00:30:35,159
means this can be asynchronously changed

819
00:30:35,159 --> 00:30:37,200
right you could do if you think that

820
00:30:37,200 --> 00:30:39,240
you're racing DNA or something

821
00:30:39,240 --> 00:30:40,679
um and you can get these things to

822
00:30:40,679 --> 00:30:41,880
change

823
00:30:41,880 --> 00:30:43,200
um and so there's this cool thing here

824
00:30:43,200 --> 00:30:45,539
where they go okay comparators go into

825
00:30:45,539 --> 00:30:47,460
something and if like if it's this guy

826
00:30:47,460 --> 00:30:50,220
then do this if it's that guy listen to

827
00:30:50,220 --> 00:30:52,440
it and then this and then all the way at

828
00:30:52,440 --> 00:30:53,580
the end there's some cleanup where they

829
00:30:53,580 --> 00:30:56,220
say okay if it's this particular goo it

830
00:30:56,220 --> 00:30:58,620
then free this context that was created

831
00:30:58,620 --> 00:31:00,240
right here

832
00:31:00,240 --> 00:31:02,760
um the race here is basically

833
00:31:02,760 --> 00:31:06,120
that when it Compares here I can have it

834
00:31:06,120 --> 00:31:08,580
not match and when it Compares here I

835
00:31:08,580 --> 00:31:10,679
can have it match and what that means is

836
00:31:10,679 --> 00:31:13,140
I am now freeing this thing that was

837
00:31:13,140 --> 00:31:15,720
created here except this code pad never

838
00:31:15,720 --> 00:31:17,580
happened because at this point let's go

839
00:31:17,580 --> 00:31:19,740
with didn't match so you are now freeing

840
00:31:19,740 --> 00:31:23,220
uh a context torture that doesn't point

841
00:31:23,220 --> 00:31:26,340
the Heat uh which obviously is a bad

842
00:31:26,340 --> 00:31:28,320
idea this is a classic title check time

843
00:31:28,320 --> 00:31:31,140
of use uh the results basically yeah

844
00:31:31,140 --> 00:31:33,080
you're freeing a resource that

845
00:31:33,080 --> 00:31:37,080
isn't necessarily on the Heap which can

846
00:31:37,080 --> 00:31:40,340
have really bad consequences

847
00:31:40,440 --> 00:31:41,520
um

848
00:31:41,520 --> 00:31:43,260
yeah there's another one where there's

849
00:31:43,260 --> 00:31:45,179
another this is a trivial one which is

850
00:31:45,179 --> 00:31:48,480
um so that this uh context eclectic size

851
00:31:48,480 --> 00:31:51,419
are defined by user but user can say

852
00:31:51,419 --> 00:31:54,000
here's one byte versus 100 bytes

853
00:31:54,000 --> 00:31:55,740
um what you'll see is there's an assert

854
00:31:55,740 --> 00:31:58,620
that says I I assert that it must be

855
00:31:58,620 --> 00:32:01,260
this size the thing would be search is

856
00:32:01,260 --> 00:32:03,299
that they are developers right this is

857
00:32:03,299 --> 00:32:05,700
not shipped and release those so this

858
00:32:05,700 --> 00:32:08,760
sort of goes away and yet it touches a

859
00:32:08,760 --> 00:32:11,039
bunch of stuff where it goes like Oh it

860
00:32:11,039 --> 00:32:13,380
must be there except if this assert is

861
00:32:13,380 --> 00:32:14,940
no longer there there's no blank check

862
00:32:14,940 --> 00:32:17,700
and so this would point out of bounds it

863
00:32:17,700 --> 00:32:19,919
could crash you could end up watching uh

864
00:32:19,919 --> 00:32:21,480
kernel page

865
00:32:21,480 --> 00:32:23,760
um you may be able to induce what's on

866
00:32:23,760 --> 00:32:25,320
there so that they give you some that

867
00:32:25,320 --> 00:32:27,659
information linkage

868
00:32:27,659 --> 00:32:28,320
um

869
00:32:28,320 --> 00:32:29,820
what's interesting is that whoever wrote

870
00:32:29,820 --> 00:32:31,320
the sport was like you should have

871
00:32:31,320 --> 00:32:33,299
searched for this but didn't go actually

872
00:32:33,299 --> 00:32:35,700
we should we shouldn't make an absurd it

873
00:32:35,700 --> 00:32:37,500
should be something that is is also

874
00:32:37,500 --> 00:32:38,600
there

875
00:32:38,600 --> 00:32:41,640
it's when you uh one of these pet peeves

876
00:32:41,640 --> 00:32:43,559
for me which is doing biotechs in the

877
00:32:43,559 --> 00:32:45,600
search is something that is

878
00:32:45,600 --> 00:32:48,419
doing uh bound checks and services is uh

879
00:32:48,419 --> 00:32:49,860
one of these weird things that I see way

880
00:32:49,860 --> 00:32:52,200
too often

881
00:32:52,200 --> 00:32:52,980
um

882
00:32:52,980 --> 00:32:55,320
yeah this one isn't sure well this is so

883
00:32:55,320 --> 00:32:56,820
we go straight up in the uh fiscal

884
00:32:56,820 --> 00:32:58,919
Handler and have you see this argument

885
00:32:58,919 --> 00:33:02,279
too and that basically the CPU index and

886
00:33:02,279 --> 00:33:03,659
the index between the array and they

887
00:33:03,659 --> 00:33:06,000
write stuff to it uh obviously a bad

888
00:33:06,000 --> 00:33:08,279
idea because it's not validated uh that

889
00:33:08,279 --> 00:33:09,840
is straight up memory corruption and it

890
00:33:09,840 --> 00:33:12,480
is one of these uh you know write

891
00:33:12,480 --> 00:33:14,460
anything anywhere from it right almost

892
00:33:14,460 --> 00:33:15,960
anything almost every anywhere

893
00:33:15,960 --> 00:33:19,260
Primitives um so this is this is bad um

894
00:33:19,260 --> 00:33:21,539
I I highly suspect this is this is going

895
00:33:21,539 --> 00:33:24,299
to be very exploitable

896
00:33:24,299 --> 00:33:25,980
um and I'm not going to tell me all this

897
00:33:25,980 --> 00:33:28,440
but the problem here is that uh so this

898
00:33:28,440 --> 00:33:30,059
is the next issue

899
00:33:30,059 --> 00:33:32,100
um this device is provided by the

900
00:33:32,100 --> 00:33:34,320
content is provided by user land and

901
00:33:34,320 --> 00:33:35,700
it's actually if you dig into this

902
00:33:35,700 --> 00:33:37,140
function it's a really complicated

903
00:33:37,140 --> 00:33:39,539
structure that has like four references

904
00:33:39,539 --> 00:33:41,940
with a bunch of lengths and there's

905
00:33:41,940 --> 00:33:43,140
other content in there they can be

906
00:33:43,140 --> 00:33:44,940
validated and this function basically

907
00:33:44,940 --> 00:33:46,860
just assumes that the content is has

908
00:33:46,860 --> 00:33:49,500
already been validated and it hasn't

909
00:33:49,500 --> 00:33:51,299
um so all sorts of Graphics happen and

910
00:33:51,299 --> 00:33:52,440
this is the one bug that hasn't been

911
00:33:52,440 --> 00:33:53,580
fixed by the way

912
00:33:53,580 --> 00:33:55,440
um the the fix here would be basically

913
00:33:55,440 --> 00:33:57,600
re-implemented this thing and add a

914
00:33:57,600 --> 00:33:58,860
whole bunch of battleships it gets

915
00:33:58,860 --> 00:34:00,779
pretty complicated

916
00:34:00,779 --> 00:34:02,399
um which I suspect is the reason why

917
00:34:02,399 --> 00:34:03,720
they didn't fix it because it's so much

918
00:34:03,720 --> 00:34:07,880
work and it ends up that that one is

919
00:34:08,099 --> 00:34:10,220
um

920
00:34:10,280 --> 00:34:13,260
uh yeah the Retro is interesting so

921
00:34:13,260 --> 00:34:15,480
there's uh two system calls one is to

922
00:34:15,480 --> 00:34:17,040
register another rest of my Handler use

923
00:34:17,040 --> 00:34:19,020
land and the other one is to unregister

924
00:34:19,020 --> 00:34:20,580
and it's in my Handler

925
00:34:20,580 --> 00:34:22,320
um the thing is even with the SMS the SM

926
00:34:22,320 --> 00:34:25,199
supervisor it is still possible to have

927
00:34:25,199 --> 00:34:28,020
an SMI Handler infernal they're just

928
00:34:28,020 --> 00:34:30,179
very rare

929
00:34:30,179 --> 00:34:32,339
um probably for some system ones but if

930
00:34:32,339 --> 00:34:35,159
it's like if it's like uh one or like

931
00:34:35,159 --> 00:34:37,020
not one part not one that's part of the

932
00:34:37,020 --> 00:34:40,020
DK2 uh it should be used

933
00:34:40,020 --> 00:34:41,760
um what's interesting about this one is

934
00:34:41,760 --> 00:34:43,918
when you look at the registration

935
00:34:43,918 --> 00:34:45,480
um you see this false flag that's set

936
00:34:45,480 --> 00:34:48,719
and that basically this uh is supervisor

937
00:34:48,719 --> 00:34:52,320
Handler flag and that means uh or uh so

938
00:34:52,320 --> 00:34:54,060
it'll be not it won't just absolutely

939
00:34:54,060 --> 00:34:56,399
false which is anytime user registers

940
00:34:56,399 --> 00:34:58,200
and it's my Handler it's for it's

941
00:34:58,200 --> 00:35:02,220
explicitly marked as not a supervisor

942
00:35:02,220 --> 00:35:05,820
um problem is uh when you unregister one

943
00:35:05,820 --> 00:35:07,380
because you get a handle back with this

944
00:35:07,380 --> 00:35:11,700
registered handle when you unregister it

945
00:35:11,700 --> 00:35:13,380
um it looks it goes through its table

946
00:35:13,380 --> 00:35:15,839
with handlers and it says oh the handle

947
00:35:15,839 --> 00:35:17,760
you the ID you gave me for this Handler

948
00:35:17,760 --> 00:35:19,920
is there it's in the list I'll go and

949
00:35:19,920 --> 00:35:22,800
register it uh there's no check to see

950
00:35:22,800 --> 00:35:26,579
if um if this comes to use lands and if

951
00:35:26,579 --> 00:35:28,680
if it comes used land then it shouldn't

952
00:35:28,680 --> 00:35:31,380
be allowed to unregister uh colonel s my

953
00:35:31,380 --> 00:35:32,760
handles right

954
00:35:32,760 --> 00:35:35,760
um except that check is not here so just

955
00:35:35,760 --> 00:35:37,200
like to just go like oh you know those

956
00:35:37,200 --> 00:35:39,180
two highly permissions my handles that

957
00:35:39,180 --> 00:35:40,260
are still in kernel yeah I'm going to

958
00:35:40,260 --> 00:35:42,680
unregister

959
00:35:44,640 --> 00:35:45,839
um

960
00:35:45,839 --> 00:35:49,140
yeah okay I'm gonna uh skip uh I'll do

961
00:35:49,140 --> 00:35:51,720
this one else get through the rest

962
00:35:51,720 --> 00:35:53,520
this one's this one I think is

963
00:35:53,520 --> 00:35:54,839
interesting this is one of those classic

964
00:35:54,839 --> 00:35:56,880
ones so this is the assembly I showed

965
00:35:56,880 --> 00:35:57,780
earlier

966
00:35:57,780 --> 00:36:00,060
um that basically does the actual uh

967
00:36:00,060 --> 00:36:03,060
Cisco uh Cisco Handler this is the stuff

968
00:36:03,060 --> 00:36:04,680
that gets called immediately even before

969
00:36:04,680 --> 00:36:06,240
the sequel

970
00:36:06,240 --> 00:36:09,660
um and what you'll see is the this sits

971
00:36:09,660 --> 00:36:12,119
saves the user registers and then

972
00:36:12,119 --> 00:36:13,500
because curl is going to use these

973
00:36:13,500 --> 00:36:15,359
specials you have to save them and then

974
00:36:15,359 --> 00:36:16,740
once you're done you have to restore

975
00:36:16,740 --> 00:36:18,780
them because otherwise the user gets to

976
00:36:18,780 --> 00:36:22,619
see the pro which just were uh and even

977
00:36:22,619 --> 00:36:24,859
disregarding the security Consequence

978
00:36:24,859 --> 00:36:27,480
the your user caller kind of has the

979
00:36:27,480 --> 00:36:28,980
probably as a dependency on these things

980
00:36:28,980 --> 00:36:31,500
so you have to respond right

981
00:36:31,500 --> 00:36:33,000
um that makes sense

982
00:36:33,000 --> 00:36:35,820
except oh there are more registers in

983
00:36:35,820 --> 00:36:37,880
Intel than just these

984
00:36:37,880 --> 00:36:40,920
that's a problem

985
00:36:40,920 --> 00:36:45,480
um in particular uh MMX SSC FPU and

986
00:36:45,480 --> 00:36:46,920
there aren't I didn't really see any of

987
00:36:46,920 --> 00:36:49,440
you uh instructions being used so FPU is

988
00:36:49,440 --> 00:36:52,200
probably not that big of a deal

989
00:36:52,200 --> 00:36:54,180
um but especially like the assembly

990
00:36:54,180 --> 00:36:57,180
instructions um optimizing compilers

991
00:36:57,180 --> 00:36:58,800
tend to use those to like optimize

992
00:36:58,800 --> 00:37:01,380
things like and then copy and so on so

993
00:37:01,380 --> 00:37:03,000
there's a chance that there's an end

994
00:37:03,000 --> 00:37:04,560
property app there's somewhere in kernel

995
00:37:04,560 --> 00:37:06,960
to copybox data around that's some of

996
00:37:06,960 --> 00:37:08,880
that content ends up lingering in one of

997
00:37:08,880 --> 00:37:10,680
these one of these registers

998
00:37:10,680 --> 00:37:12,420
uh and that then ends up in the future

999
00:37:12,420 --> 00:37:16,200
user which obviously is a bad idea

1000
00:37:16,200 --> 00:37:17,940
um anyway yeah I'm gonna skip through a

1001
00:37:17,940 --> 00:37:20,099
bunch of these because I have about five

1002
00:37:20,099 --> 00:37:22,619
or six minutes there you go

1003
00:37:22,619 --> 00:37:24,020
um

1004
00:37:24,020 --> 00:37:28,619
okay there we go observations right so

1005
00:37:28,619 --> 00:37:30,180
um I think we ran through maybe two

1006
00:37:30,180 --> 00:37:32,220
thirds of them uh but essentially um

1007
00:37:32,220 --> 00:37:34,560
this code is written by very very

1008
00:37:34,560 --> 00:37:37,020
experienced very senior developers if

1009
00:37:37,020 --> 00:37:38,700
you look at the code you see it's high

1010
00:37:38,700 --> 00:37:40,380
quality

1011
00:37:40,380 --> 00:37:42,140
um the if you look at the documentation

1012
00:37:42,140 --> 00:37:44,220
you will see that this is written by

1013
00:37:44,220 --> 00:37:46,020
people know what they're doing like

1014
00:37:46,020 --> 00:37:47,220
they're doing the right things they're

1015
00:37:47,220 --> 00:37:49,020
highlighting the right things they

1016
00:37:49,020 --> 00:37:50,460
understand their texture they understand

1017
00:37:50,460 --> 00:37:53,339
the risks they know what they're doing

1018
00:37:53,339 --> 00:37:55,260
um all the issues I just covered and

1019
00:37:55,260 --> 00:37:56,760
those I didn't

1020
00:37:56,760 --> 00:37:58,619
um they're one-offs they're not systemic

1021
00:37:58,619 --> 00:38:00,660
right for like like I had one missing

1022
00:38:00,660 --> 00:38:02,460
index in there all the other indexes

1023
00:38:02,460 --> 00:38:04,260
workshops right

1024
00:38:04,260 --> 00:38:05,640
um so it was literally just like it

1025
00:38:05,640 --> 00:38:06,780
oversized

1026
00:38:06,780 --> 00:38:08,880
um but yet these nine pups did happen

1027
00:38:08,880 --> 00:38:12,660
right why right drum rolls because it's

1028
00:38:12,660 --> 00:38:15,300
written in Siege

1029
00:38:15,300 --> 00:38:17,820
um uh it's just I mean we've had 50

1030
00:38:17,820 --> 00:38:19,800
years of it it's been very useful to us

1031
00:38:19,800 --> 00:38:22,320
but it's led to

1032
00:38:22,320 --> 00:38:25,140
tens of thousands of security bugs

1033
00:38:25,140 --> 00:38:27,060
um the community is not right

1034
00:38:27,060 --> 00:38:28,260
um so I had a little Twitter exchange

1035
00:38:28,260 --> 00:38:30,780
with uh David Weston at Microsoft where

1036
00:38:30,780 --> 00:38:33,079
he commented on something saying well

1037
00:38:33,079 --> 00:38:35,700
writing perfect is an importancy is a

1038
00:38:35,700 --> 00:38:37,200
good goal but probably not attainable

1039
00:38:37,200 --> 00:38:39,060
and so one of the things you should do

1040
00:38:39,060 --> 00:38:41,640
is sandbox this and then uh um handlers

1041
00:38:41,640 --> 00:38:43,859
uh to contain vulnerabilities like this

1042
00:38:43,859 --> 00:38:46,800
and I tweeted document said writing

1043
00:38:46,800 --> 00:38:49,079
perfect sandbox system currency is a

1044
00:38:49,079 --> 00:38:50,579
good goal but probably not attainable

1045
00:38:50,579 --> 00:38:52,700
impractical uh

1046
00:38:52,700 --> 00:38:55,380
it's you know it wasn't

1047
00:38:55,380 --> 00:38:56,640
um

1048
00:38:56,640 --> 00:39:00,060
so uh basically and this gets into my

1049
00:39:00,060 --> 00:39:01,260
call to action right

1050
00:39:01,260 --> 00:39:04,560
um I I think as I said Cesar does very

1051
00:39:04,560 --> 00:39:06,540
well for 50 years but it's time for it

1052
00:39:06,540 --> 00:39:09,420
to go and die right

1053
00:39:09,420 --> 00:39:12,000
um it's I'm not joking I'm not joking

1054
00:39:12,000 --> 00:39:14,460
like it's okay for legacy I don't expect

1055
00:39:14,460 --> 00:39:17,040
all sequel to be actually reported to to

1056
00:39:17,040 --> 00:39:19,380
rust or something else uh that's an

1057
00:39:19,380 --> 00:39:21,240
impossible task

1058
00:39:21,240 --> 00:39:23,640
um but if you're writing new quote I'll

1059
00:39:23,640 --> 00:39:25,740
write it into your C plus plus please

1060
00:39:25,740 --> 00:39:26,820
don't

1061
00:39:26,820 --> 00:39:29,460
uh we have better Alternatives now

1062
00:39:29,460 --> 00:39:31,680
um I like rust that seems to be the

1063
00:39:31,680 --> 00:39:33,480
trend you don't have to do in Rust

1064
00:39:33,480 --> 00:39:35,820
there's other languages uh I mean V

1065
00:39:35,820 --> 00:39:37,560
looks very interesting to me

1066
00:39:37,560 --> 00:39:39,240
um you can do so many stuff and go if

1067
00:39:39,240 --> 00:39:41,160
you really want to but the runtime gets

1068
00:39:41,160 --> 00:39:44,040
in your way uh anyway Russ seems to be

1069
00:39:44,040 --> 00:39:45,540
kind of the trend we're going to and I

1070
00:39:45,540 --> 00:39:47,220
kind of like it

1071
00:39:47,220 --> 00:39:48,780
um the good news there is if you're

1072
00:39:48,780 --> 00:39:52,560
doing uh writing stuff for yuffie that

1073
00:39:52,560 --> 00:39:54,000
is starting to kind of happen a little

1074
00:39:54,000 --> 00:39:55,680
bit it's still early days though but

1075
00:39:55,680 --> 00:39:58,380
there are some Rust implementations for

1076
00:39:58,380 --> 00:40:00,839
the UK uh in UC

1077
00:40:00,839 --> 00:40:03,540
um the the thing is edk2 itself doesn't

1078
00:40:03,540 --> 00:40:05,579
currently have bindings for this I hope

1079
00:40:05,579 --> 00:40:06,900
they do

1080
00:40:06,900 --> 00:40:10,500
um there's uh so this this guy whoops uh

1081
00:40:10,500 --> 00:40:12,180
Intel any different presentation about

1082
00:40:12,180 --> 00:40:13,800
this two or three years ago and this is

1083
00:40:13,800 --> 00:40:16,380
kind of his full of concept uh so it

1084
00:40:16,380 --> 00:40:18,119
could be done those findings are there

1085
00:40:18,119 --> 00:40:20,880
in this staging tree the problem is the

1086
00:40:20,880 --> 00:40:22,140
tasting food has been touched in three

1087
00:40:22,140 --> 00:40:25,200
years and it's still it's not 80k2 so I

1088
00:40:25,200 --> 00:40:26,700
would really like to see some movement

1089
00:40:26,700 --> 00:40:27,900
like this

1090
00:40:27,900 --> 00:40:30,359
especially given that the Linux rule is

1091
00:40:30,359 --> 00:40:34,320
about rust uh the right stuff in Windows

1092
00:40:34,320 --> 00:40:36,300
was just ordered through us like this

1093
00:40:36,300 --> 00:40:37,920
stuff is happening and I want to see

1094
00:40:37,920 --> 00:40:40,680
this happen uh in in yuffie as well

1095
00:40:40,680 --> 00:40:42,359
right and if it's in UV that means our

1096
00:40:42,359 --> 00:40:46,520
supervisors to make use of it too

1097
00:40:46,619 --> 00:40:49,260
um and the problem is Right chances are

1098
00:40:49,260 --> 00:40:51,900
if we if we don't do this if we keep

1099
00:40:51,900 --> 00:40:54,119
doing this in CNC plus plus

1100
00:40:54,119 --> 00:40:55,680
um there's this it's not going to end

1101
00:40:55,680 --> 00:40:56,700
these knives there's going to be more

1102
00:40:56,700 --> 00:40:58,020
right

1103
00:40:58,020 --> 00:41:00,420
um so uh one last Point here is that

1104
00:41:00,420 --> 00:41:03,660
rust is not a silver bullet you can have

1105
00:41:03,660 --> 00:41:04,980
security bugs and rust and there have

1106
00:41:04,980 --> 00:41:07,560
been screen bugs in Roscoe what it will

1107
00:41:07,560 --> 00:41:10,020
do is it will drastically reduce the

1108
00:41:10,020 --> 00:41:12,240
number of security issues of this kind

1109
00:41:12,240 --> 00:41:14,160
if you're riding in the rust some of the

1110
00:41:14,160 --> 00:41:15,900
bugs I cover here would definitely be

1111
00:41:15,900 --> 00:41:17,400
caught by Russ

1112
00:41:17,400 --> 00:41:19,800
um the unvalid index of Russian part of

1113
00:41:19,800 --> 00:41:22,800
some bucks it probably wouldn't have uh

1114
00:41:22,800 --> 00:41:24,180
this gets more than like The Logical

1115
00:41:24,180 --> 00:41:25,680
side of things but it would have

1116
00:41:25,680 --> 00:41:28,320
drastically reduced the number of plugs

1117
00:41:28,320 --> 00:41:30,060
uh last fall actually this is my last

1118
00:41:30,060 --> 00:41:33,540
slide I think we have time

1119
00:41:33,540 --> 00:41:36,240
uh I got two minutes great

1120
00:41:36,240 --> 00:41:38,579
um so basically the other call to action

1121
00:41:38,579 --> 00:41:39,720
um which I haven't even talked about in

1122
00:41:39,720 --> 00:41:41,579
this presentation but this is something

1123
00:41:41,579 --> 00:41:43,859
I suspect is going to become a problem

1124
00:41:43,859 --> 00:41:46,260
is the policy right the the actual

1125
00:41:46,260 --> 00:41:48,180
policy that gets enforced gets set or

1126
00:41:48,180 --> 00:41:50,280
will be set by the actual heart Revenge

1127
00:41:50,280 --> 00:41:53,220
right the the individual bias vendors uh

1128
00:41:53,220 --> 00:41:57,359
HP Lenovo Dell Ami inside Intel so on

1129
00:41:57,359 --> 00:41:59,460
they're going to set these problems my

1130
00:41:59,460 --> 00:42:01,140
guess is the first set of policies we're

1131
00:42:01,140 --> 00:42:02,760
going to see is either going to be a

1132
00:42:02,760 --> 00:42:05,160
very very small denialis or an

1133
00:42:05,160 --> 00:42:08,579
unbelievably large allowance right which

1134
00:42:08,579 --> 00:42:10,440
is allows that allows everything at

1135
00:42:10,440 --> 00:42:12,800
which point

1136
00:42:14,760 --> 00:42:17,099
um so towards the future I think the

1137
00:42:17,099 --> 00:42:19,140
policies are going to be a thing we have

1138
00:42:19,140 --> 00:42:20,339
to look at we're going to have to audit

1139
00:42:20,339 --> 00:42:21,540
responses and we're going to make sure

1140
00:42:21,540 --> 00:42:23,579
that they are restricted to trust what

1141
00:42:23,579 --> 00:42:26,900
you want to allow or nothing else

1142
00:42:27,060 --> 00:42:29,400
um and with that yeah that's uh my uh

1143
00:42:29,400 --> 00:42:33,119
presentation uh I I uh thank you so much

1144
00:42:33,119 --> 00:42:34,859
for listening um

1145
00:42:34,859 --> 00:42:36,359
any chance we have time for like one

1146
00:42:36,359 --> 00:42:38,579
question or something yes first big

1147
00:42:38,579 --> 00:42:41,780
round of applause to Elia

1148
00:42:43,800 --> 00:42:46,980
and I think we can sacrifice one minute

1149
00:42:46,980 --> 00:42:48,960
of coffee break for one question right

1150
00:42:48,960 --> 00:42:51,920
we have one

1151
00:42:54,740 --> 00:42:57,300
so thanks for the presentation

1152
00:42:57,300 --> 00:43:00,300
um how did Static analysis did in your

1153
00:43:00,300 --> 00:43:01,380
discussions with Microsoft how does

1154
00:43:01,380 --> 00:43:03,119
static analysis figure into this whole

1155
00:43:03,119 --> 00:43:05,579
thing good question uh it didn't in this

1156
00:43:05,579 --> 00:43:07,260
case because I was a whole manual quoted

1157
00:43:07,260 --> 00:43:09,300
you uh in general I am a big fan of

1158
00:43:09,300 --> 00:43:11,040
static analysis I think it would have

1159
00:43:11,040 --> 00:43:12,720
been helpful here

1160
00:43:12,720 --> 00:43:14,460
um I I didn't think of it because I was

1161
00:43:14,460 --> 00:43:15,839
it's you know we're kind of in the zone

1162
00:43:15,839 --> 00:43:17,339
when you're like focus and stuff I was

1163
00:43:17,339 --> 00:43:19,079
just reading code

1164
00:43:19,079 --> 00:43:21,780
um if this was a a more intense more

1165
00:43:21,780 --> 00:43:24,420
thorough full review I would have

1166
00:43:24,420 --> 00:43:27,599
absolutely applied technology big fan I

1167
00:43:27,599 --> 00:43:30,800
just didn't happen in this video

1168
00:43:31,440 --> 00:43:35,400
okay perfect thanks everyone another big

1169
00:43:35,400 --> 00:43:37,140
round of applause to Leah thank you for

1170
00:43:37,140 --> 00:43:39,379
listening

