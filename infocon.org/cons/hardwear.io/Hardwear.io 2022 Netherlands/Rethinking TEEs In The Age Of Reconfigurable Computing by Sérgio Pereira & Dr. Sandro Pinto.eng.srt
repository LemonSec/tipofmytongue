1
00:00:02,820 --> 00:00:04,740
well I would like to think the audience

2
00:00:04,740 --> 00:00:06,299
for taking the time and the interests

3
00:00:06,299 --> 00:00:09,139
with our child my name is

4
00:00:09,139 --> 00:00:11,400
research advisor at the University of

5
00:00:11,400 --> 00:00:14,160
like in Portugal and today with me I

6
00:00:14,160 --> 00:00:16,680
have Sergio which is currently doing his

7
00:00:16,680 --> 00:00:19,260
PhD in advance for me

8
00:00:19,260 --> 00:00:21,660
for the tall is rethinking transition

9
00:00:21,660 --> 00:00:24,660
environments in the age of your computer

10
00:00:24,660 --> 00:00:27,779
and without any further delay I will

11
00:00:27,779 --> 00:00:29,820
just add five minutes of your time

12
00:00:29,820 --> 00:00:31,859
because the idea is I will share five

13
00:00:31,859 --> 00:00:34,140
slides just that work as a kind of

14
00:00:34,140 --> 00:00:36,780
preview or trailer for for the talk

15
00:00:36,780 --> 00:00:38,820
ideas to capture your attention and get

16
00:00:38,820 --> 00:00:41,700
you to understand the big feature of all

17
00:00:41,700 --> 00:00:42,899
of his work

18
00:00:42,899 --> 00:00:45,719
okay

19
00:00:45,719 --> 00:00:48,600
so over the last two decades the cheese

20
00:00:48,600 --> 00:00:50,399
or Precision environment that has been

21
00:00:50,399 --> 00:00:53,039
established as the technology to process

22
00:00:53,039 --> 00:00:54,480
and compact security critical

23
00:00:54,480 --> 00:00:57,600
applications in a wide spectrum of

24
00:00:57,600 --> 00:01:00,360
domains on one side of the spectrum we

25
00:01:00,360 --> 00:01:02,460
have like the cloud applications and the

26
00:01:02,460 --> 00:01:05,040
servers with Intel scx and on the other

27
00:01:05,040 --> 00:01:07,260
side we have like mobile animated device

28
00:01:07,260 --> 00:01:09,380
that use first song

29
00:01:09,380 --> 00:01:12,659
so probably most of you are not fully

30
00:01:12,659 --> 00:01:15,540
aware but every single way you suggest

31
00:01:15,540 --> 00:01:18,180
billions of people worldwide rely on

32
00:01:18,180 --> 00:01:21,619
Keys based on person to for example

33
00:01:21,619 --> 00:01:25,380
process the online bank payments or even

34
00:01:25,380 --> 00:01:27,479
for biometric authentication on your

35
00:01:27,479 --> 00:01:29,580
phone or simply when you are just

36
00:01:29,580 --> 00:01:32,159
watching Netflix that levers on DRM

37
00:01:32,159 --> 00:01:33,720
service to our libraries into a position

38
00:01:33,720 --> 00:01:35,400
one

39
00:01:35,400 --> 00:01:38,159
well one of the most common key approach

40
00:01:38,159 --> 00:01:41,159
to implement GES is group of school

41
00:01:41,159 --> 00:01:42,240
precise

42
00:01:42,240 --> 00:01:44,640
yeah the mainstream technology as I said

43
00:01:44,640 --> 00:01:48,780
is guitar sdx and Armstrong and despite

44
00:01:48,780 --> 00:01:50,579
the difference of old technology in

45
00:01:50,579 --> 00:01:52,439
terms of realization at the low level

46
00:01:52,439 --> 00:01:54,420
they typically provide one secure

47
00:01:54,420 --> 00:01:56,220
execution environment in your main

48
00:01:56,220 --> 00:01:58,500
application process

49
00:01:58,500 --> 00:02:01,320
the problem with these Technologies is

50
00:02:01,320 --> 00:02:04,320
that well they are struggling in their

51
00:02:04,320 --> 00:02:06,119
own security problem it should be

52
00:02:06,119 --> 00:02:09,840
probably aware of those hundreds or

53
00:02:09,840 --> 00:02:12,300
thousands of papers to list either an

54
00:02:12,300 --> 00:02:14,520
academic conference or at some

55
00:02:14,520 --> 00:02:16,560
Industrial

56
00:02:16,560 --> 00:02:19,379
well another uh Well Service key

57
00:02:19,379 --> 00:02:21,540
approach rely on dedicated external

58
00:02:21,540 --> 00:02:23,520
secure elements that you mount offshit

59
00:02:23,520 --> 00:02:26,700
but still next to your main processor uh

60
00:02:26,700 --> 00:02:29,700
uh some examples are uh Apple C2 or

61
00:02:29,700 --> 00:02:31,560
Google Titan but the problem is still

62
00:02:31,560 --> 00:02:33,900
these off-shift communication fabric is

63
00:02:33,900 --> 00:02:36,720
exposed to an attacker which means it

64
00:02:36,720 --> 00:02:40,620
can form some kind of probing attacks

65
00:02:40,620 --> 00:02:42,500
these are more or less

66
00:02:42,500 --> 00:02:47,340
so with our work uh we try to come out

67
00:02:47,340 --> 00:02:50,459
with a new enriching way of implementing

68
00:02:50,459 --> 00:02:52,680
these that parts from the observation

69
00:02:52,680 --> 00:02:55,140
that nowadays in Industry UF is

70
00:02:55,140 --> 00:02:57,599
so-called Associated pgas where you

71
00:02:57,599 --> 00:02:59,459
don't have only the art processing

72
00:02:59,459 --> 00:03:01,379
systems like dual core platform

73
00:03:01,379 --> 00:03:04,080
processors like in 7000 but you still

74
00:03:04,080 --> 00:03:07,560
have your fpga technology that typically

75
00:03:07,560 --> 00:03:10,080
is embedded in these socs for

76
00:03:10,080 --> 00:03:12,420
acceleration flexibility and all of that

77
00:03:12,420 --> 00:03:15,000
couples and the idea was basically to

78
00:03:15,000 --> 00:03:17,360
leverage these fpga technology

79
00:03:17,360 --> 00:03:19,560
to provide additional security

80
00:03:19,560 --> 00:03:21,000
warranties

81
00:03:21,000 --> 00:03:24,060
on on a different model of these

82
00:03:24,060 --> 00:03:26,819
well we call this model COV this

83
00:03:26,819 --> 00:03:29,480
environments on

84
00:03:32,760 --> 00:03:36,540
later in detail but the idea is to get a

85
00:03:36,540 --> 00:03:39,360
bit right off these vehicle precise and

86
00:03:39,360 --> 00:03:42,720
Leverage The fpga to instantiate uh soft

87
00:03:42,720 --> 00:03:45,959
cores or soft precise that creates a

88
00:03:45,959 --> 00:03:49,920
dedicated enclaves to run a fully

89
00:03:49,920 --> 00:03:53,280
isolated uh trusted applications in the

90
00:03:53,280 --> 00:03:55,799
sense that we do not Shine the same

91
00:03:55,799 --> 00:03:57,840
processor we did not share software

92
00:03:57,840 --> 00:04:01,500
process and basically we do these on a

93
00:04:01,500 --> 00:04:03,780
pad application and prepare demand base

94
00:04:03,780 --> 00:04:06,299
in the sense of flexibility that DJ

95
00:04:06,299 --> 00:04:08,519
provides

96
00:04:08,519 --> 00:04:10,920
at this point I think you got more or

97
00:04:10,920 --> 00:04:14,879
less the idea of of our work uh we will

98
00:04:14,879 --> 00:04:17,880
now dive into the details I will start

99
00:04:17,880 --> 00:04:20,220
with the motivation and goals and try

100
00:04:20,220 --> 00:04:23,940
models then Sergio which basically was

101
00:04:23,940 --> 00:04:26,160
the student doing the ability part of

102
00:04:26,160 --> 00:04:27,960
this work will explain design

103
00:04:27,960 --> 00:04:30,360
implementation evaluation and the use

104
00:04:30,360 --> 00:04:32,699
case with a Bitcoin wallet and I will

105
00:04:32,699 --> 00:04:34,440
jump back at the end of the presentation

106
00:04:34,440 --> 00:04:39,020
just share some some kind of thoughts

107
00:04:39,180 --> 00:04:41,280
well start from the beginning I will

108
00:04:41,280 --> 00:04:44,759
start all of this story with this flame

109
00:04:44,759 --> 00:04:46,680
which is Mainframe operating system

110
00:04:46,680 --> 00:04:48,120
cannot be

111
00:04:48,120 --> 00:04:50,639
I have like Security Experts here in

112
00:04:50,639 --> 00:04:52,440
front of me you probably agree with me

113
00:04:52,440 --> 00:04:54,120
but I will reason a little bit more

114
00:04:54,120 --> 00:04:56,520
about me and my mainstream operating

115
00:04:56,520 --> 00:04:59,040
systems I'm talking about the big

116
00:04:59,040 --> 00:05:01,020
monolithic piece of software that

117
00:05:01,020 --> 00:05:03,300
typically power our computer laptops and

118
00:05:03,300 --> 00:05:05,220
mobile device I'm talking about Windows

119
00:05:05,220 --> 00:05:06,840
Linux or Android

120
00:05:06,840 --> 00:05:09,180
and the reason to not trust them it's

121
00:05:09,180 --> 00:05:12,720
all about math and study I mean he is a

122
00:05:12,720 --> 00:05:15,060
piece of software as mailing offline

123
00:05:15,060 --> 00:05:16,919
group and

124
00:05:16,919 --> 00:05:19,020
the cleanest advice for example to

125
00:05:19,020 --> 00:05:22,080
explain he sent us is this one large is

126
00:05:22,080 --> 00:05:24,660
your code base more complex it is

127
00:05:24,660 --> 00:05:27,180
probably worth about the spaghettical

128
00:05:27,180 --> 00:05:30,960
thing uh more likely you will find bugs

129
00:05:30,960 --> 00:05:33,900
effects and vulnerabilities on your goal

130
00:05:33,900 --> 00:05:36,660
and a very nice exercise

131
00:05:36,660 --> 00:05:39,360
with my students is the fall let's

132
00:05:39,360 --> 00:05:42,060
imagine let's

133
00:05:42,060 --> 00:05:44,280
imagine because you can do it let's take

134
00:05:44,280 --> 00:05:46,919
Linux as a Target let's use one of those

135
00:05:46,919 --> 00:05:49,139
softwares that is still up basically

136
00:05:49,139 --> 00:05:50,940
comes number of software lines of code

137
00:05:50,940 --> 00:05:52,680
that you have in Linux

138
00:05:52,680 --> 00:05:55,880
I Target just for arms

139
00:05:55,880 --> 00:05:57,800
64.35

140
00:05:57,800 --> 00:06:01,259
that is I exclude a bunch of stuff

141
00:06:01,259 --> 00:06:04,259
kind of language that doesn't

142
00:06:04,259 --> 00:06:07,620
a lot and we end up with these numbers

143
00:06:07,620 --> 00:06:09,660
and basically you can see like the

144
00:06:09,660 --> 00:06:12,300
number of C files either files assembly

145
00:06:12,300 --> 00:06:14,940
files the other files are that I try to

146
00:06:14,940 --> 00:06:16,560
explore that but I mean this story is

147
00:06:16,560 --> 00:06:18,419
open source is not perfect but it still

148
00:06:18,419 --> 00:06:20,520
translates to the idea that I wanted to

149
00:06:20,520 --> 00:06:23,580
complete which is on your right side at

150
00:06:23,580 --> 00:06:26,220
the bottom you you see more than 20

151
00:06:26,220 --> 00:06:28,440
million lines of code and this is

152
00:06:28,440 --> 00:06:31,979
basically uh how big Linux is another

153
00:06:31,979 --> 00:06:34,259
interesting thing in industry is one

154
00:06:34,259 --> 00:06:36,240
method that we have that is considered

155
00:06:36,240 --> 00:06:39,419
the defect rate defect ratio that it

156
00:06:39,419 --> 00:06:43,160
stands for the number of bugs expected

157
00:06:43,160 --> 00:06:46,319
thousand lines of code typically in

158
00:06:46,319 --> 00:06:49,560
pre-production systems you have one uh

159
00:06:49,560 --> 00:06:51,539
defect ratio is one which means where

160
00:06:51,539 --> 00:06:53,940
you have one work per thousand lines of

161
00:06:53,940 --> 00:06:56,039
code when you ship your product standard

162
00:06:56,039 --> 00:07:00,960
from industry 0.55 but let's take one

163
00:07:00,960 --> 00:07:04,199
very positive defect ratio of zero point

164
00:07:04,199 --> 00:07:07,259
1 which means you have 0.1 Works per

165
00:07:07,259 --> 00:07:09,120
thousand miles of course which if you

166
00:07:09,120 --> 00:07:11,580
multiply by between P1 million lines of

167
00:07:11,580 --> 00:07:13,139
cloves of Linus

168
00:07:13,139 --> 00:07:16,680
well there are more than 2 000 disasters

169
00:07:16,680 --> 00:07:18,780
waiting to work and I mean the relation

170
00:07:18,780 --> 00:07:21,300
is not exactly like this but I think

171
00:07:21,300 --> 00:07:23,460
this is more or less supports the idea

172
00:07:23,460 --> 00:07:25,560
or conveys the idea that I'm trying to

173
00:07:25,560 --> 00:07:29,099
explain is the software or software

174
00:07:29,099 --> 00:07:31,380
cannot be addressed

175
00:07:31,380 --> 00:07:34,319
well in this sense Industries start to

176
00:07:34,319 --> 00:07:36,300
look into alternative ways to provide

177
00:07:36,300 --> 00:07:38,460
like additional security Wireless and

178
00:07:38,460 --> 00:07:40,860
the antes will start to be introduce a

179
00:07:40,860 --> 00:07:43,500
couple of decades ago in particular We

180
00:07:43,500 --> 00:07:46,319
Trust Zone in 2004 uh start to gain

181
00:07:46,319 --> 00:07:49,740
fraction among veins but for those not

182
00:07:49,740 --> 00:07:52,199
completely familiar with keys or

183
00:07:52,199 --> 00:07:55,080
persistution environments should be what

184
00:07:55,080 --> 00:07:58,319
is a key well I would say that the

185
00:07:58,319 --> 00:08:00,599
definition of t has been evolving over

186
00:08:00,599 --> 00:08:02,340
the years and there are more people in

187
00:08:02,340 --> 00:08:04,259
the literature too but I will pick just

188
00:08:04,259 --> 00:08:06,780
the one that is used for one of

189
00:08:06,780 --> 00:08:09,360
those organizations working towards the

190
00:08:09,360 --> 00:08:11,340
standardization of keys in mobile device

191
00:08:11,340 --> 00:08:13,319
which is global platform

192
00:08:13,319 --> 00:08:16,380
and the global platform defines the e as

193
00:08:16,380 --> 00:08:18,419
a secure area of the main processor of a

194
00:08:18,419 --> 00:08:20,460
connected device that issues sensitive

195
00:08:20,460 --> 00:08:23,699
data is stored process and protect in an

196
00:08:23,699 --> 00:08:25,620
isolated environment

197
00:08:25,620 --> 00:08:28,080
more or less this image without being

198
00:08:28,080 --> 00:08:30,060
packed to one particular technology

199
00:08:30,060 --> 00:08:33,539
translates that ID on the left side is

200
00:08:33,539 --> 00:08:36,479
your left yeah on the left side is the

201
00:08:36,479 --> 00:08:39,179
normal state where you run your normal

202
00:08:39,179 --> 00:08:42,299
or non-critical applications and in the

203
00:08:42,299 --> 00:08:44,099
main processor you have some way some

204
00:08:44,099 --> 00:08:45,899
sort of Hardware technology that you can

205
00:08:45,899 --> 00:08:48,120
create a secure State when you process

206
00:08:48,120 --> 00:08:52,200
your security critical applications

207
00:08:52,200 --> 00:08:55,140
okay one of the most used Technologies

208
00:08:55,140 --> 00:08:58,320
here to implement is is I'm interesting

209
00:08:58,320 --> 00:09:01,940
thing okay our message registers

210
00:09:01,940 --> 00:09:05,220
almost two decades ago and the treason

211
00:09:05,220 --> 00:09:07,260
is centered around the concept of two

212
00:09:07,260 --> 00:09:09,839
protection domain on one side you have

213
00:09:09,839 --> 00:09:12,000
the secure world that you typically ship

214
00:09:12,000 --> 00:09:14,580
a crystal kernel and we put a top

215
00:09:14,580 --> 00:09:17,820
different applications uh

216
00:09:17,820 --> 00:09:20,519
on on the left side you have the normal

217
00:09:20,519 --> 00:09:22,320
world where you typically run a rich

218
00:09:22,320 --> 00:09:23,880
education environment in mobile device

219
00:09:23,880 --> 00:09:26,519
Android for example and you run a couple

220
00:09:26,519 --> 00:09:28,019
of these registration environment the

221
00:09:28,019 --> 00:09:29,940
client application that typically

222
00:09:29,940 --> 00:09:32,580
requires service from the secure World

223
00:09:32,580 --> 00:09:34,980
from the gas and everything is

224
00:09:34,980 --> 00:09:36,839
interfaced through a previous layer of

225
00:09:36,839 --> 00:09:39,899
software called Skillman

226
00:09:39,899 --> 00:09:42,300
well on my research group we have a

227
00:09:42,300 --> 00:09:44,160
strong line of research around for us so

228
00:09:44,160 --> 00:09:47,100
and intrigued by the fact that we have

229
00:09:47,100 --> 00:09:49,399
been witnessing over over the years

230
00:09:49,399 --> 00:09:52,500
several vulnerabilities affecting cross

231
00:09:52,500 --> 00:09:53,640
Zone

232
00:09:53,640 --> 00:09:57,360
in 2018 we decided to to start working

233
00:09:57,360 --> 00:10:00,180
towards one paper that was published in

234
00:10:00,180 --> 00:10:04,140
2020 at the sap Auckland which is the

235
00:10:04,140 --> 00:10:06,180
conference in the academy on the

236
00:10:06,180 --> 00:10:09,180
Academia for forces and security uh

237
00:10:09,180 --> 00:10:10,740
where we basically provide a

238
00:10:10,740 --> 00:10:12,720
comprehensive picture about the

239
00:10:12,720 --> 00:10:15,540
memorabilities affecting trusts on a CCD

240
00:10:15,540 --> 00:10:18,240
and for that we analyzed hundreds of CVS

241
00:10:18,240 --> 00:10:20,279
and we reverse engineered the most

242
00:10:20,279 --> 00:10:25,459
popular Keys it was a thrustonic Huawei

243
00:10:25,459 --> 00:10:28,680
or OPG and all of that stuff

244
00:10:28,680 --> 00:10:32,580
uh and from this story We grouped the

245
00:10:32,580 --> 00:10:35,100
different vulnerabilities in in three

246
00:10:35,100 --> 00:10:37,980
categories ones are the archetypes of

247
00:10:37,980 --> 00:10:40,080
problems or that as well issues the

248
00:10:40,080 --> 00:10:42,240
other ones are the bug implemented the

249
00:10:42,240 --> 00:10:44,519
implementation works in different

250
00:10:44,519 --> 00:10:47,220
components on the secure side and the

251
00:10:47,220 --> 00:10:48,720
other ones are the underlooking

252
00:10:48,720 --> 00:10:51,600
probabilities of that but a nice and

253
00:10:51,600 --> 00:10:53,640
interesting observation coming from this

254
00:10:53,640 --> 00:10:56,100
study was that there were a particular

255
00:10:56,100 --> 00:10:58,500
architectural flow but together with the

256
00:10:58,500 --> 00:11:01,200
number of bugs in the in the

257
00:11:01,200 --> 00:11:02,579
implementation of The Secret World

258
00:11:02,579 --> 00:11:05,700
software uh make it practical to

259
00:11:05,700 --> 00:11:07,800
basically create privileged escalation

260
00:11:07,800 --> 00:11:10,800
attacks on trusts

261
00:11:10,800 --> 00:11:13,320
there was a particular guy whose name

262
00:11:13,320 --> 00:11:14,820
may sound familiar among the audience

263
00:11:14,820 --> 00:11:16,980
which is balbanyamini that you could

264
00:11:16,980 --> 00:11:19,019
find this guy everything here in Vegas

265
00:11:19,019 --> 00:11:21,300
basically in a black guy demonstrating

266
00:11:21,300 --> 00:11:24,300
how he found a new way to basically

267
00:11:24,300 --> 00:11:27,200
exploit welcome G

268
00:11:27,200 --> 00:11:31,200
and more or less the idea is that you

269
00:11:31,200 --> 00:11:34,320
run a malware on the unprivileged level

270
00:11:34,320 --> 00:11:37,019
on the normal World side and of course

271
00:11:37,019 --> 00:11:40,200
by basically freaking and exploiting

272
00:11:40,200 --> 00:11:43,860
about in a TA you can basically create a

273
00:11:43,860 --> 00:11:45,720
privileged installation attack and you

274
00:11:45,720 --> 00:11:48,440
are able to jump in the festival

275
00:11:48,440 --> 00:11:50,820
and once you control of the threshold

276
00:11:50,820 --> 00:11:52,920
panel because of his architectural flaw

277
00:11:52,920 --> 00:11:55,140
in terms of the thrust on architecture

278
00:11:55,140 --> 00:11:58,260
you can access everything I mean you can

279
00:11:58,260 --> 00:12:00,360
access the Android system you can access

280
00:12:00,360 --> 00:12:02,459
other Tas and you can bring the full

281
00:12:02,459 --> 00:12:04,800
system down by basically writing zeros

282
00:12:04,800 --> 00:12:07,440
in skill money

283
00:12:07,440 --> 00:12:09,839
um and this is quite practical and there

284
00:12:09,839 --> 00:12:13,320
are a couple of CVS that support all of

285
00:12:13,320 --> 00:12:14,700
these

286
00:12:14,700 --> 00:12:17,820
well another interesting uh observation

287
00:12:17,820 --> 00:12:21,060
coming out of of his study was that

288
00:12:21,060 --> 00:12:24,180
micro uh that microarchitecture outside

289
00:12:24,180 --> 00:12:26,459
China's attack on the phone are not

290
00:12:26,459 --> 00:12:30,180
surprised in the sense that uh basically

291
00:12:30,180 --> 00:12:32,459
you have a shared cache between Both

292
00:12:32,459 --> 00:12:34,140
Worlds and despite the fact that the

293
00:12:34,140 --> 00:12:35,700
richest Fusion environment cannot

294
00:12:35,700 --> 00:12:38,100
directly access the dash lines of the

295
00:12:38,100 --> 00:12:40,920
trusted World it still can compete for

296
00:12:40,920 --> 00:12:43,019
those lines in the sense that he can

297
00:12:43,019 --> 00:12:45,660
evict can create intention and at the

298
00:12:45,660 --> 00:12:47,579
end of the they can create timing

299
00:12:47,579 --> 00:12:49,860
difference which is uh the the most

300
00:12:49,860 --> 00:12:51,180
important thing

301
00:12:51,180 --> 00:12:53,399
to basically create attacks such as one

302
00:12:53,399 --> 00:12:55,620
as Armageddon disclosed by the people at

303
00:12:55,620 --> 00:12:57,720
grass

304
00:12:57,720 --> 00:13:01,160
and more or less yeah uh it's it's

305
00:13:01,160 --> 00:13:03,720
demonstrated that on the micro

306
00:13:03,720 --> 00:13:05,579
architectural side it's also a problem

307
00:13:05,579 --> 00:13:08,279
for this kind of keys I just speak two

308
00:13:08,279 --> 00:13:10,560
examples if you go to the to the paper

309
00:13:10,560 --> 00:13:13,320
that you have publish you'll find a lot

310
00:13:13,320 --> 00:13:15,600
of different stuff and the idea is just

311
00:13:15,600 --> 00:13:18,839
to explain uh and provide a bit of

312
00:13:18,839 --> 00:13:21,120
context to understand how the

313
00:13:21,120 --> 00:13:24,240
drasonances is can be compromised or are

314
00:13:24,240 --> 00:13:25,440
flow

315
00:13:25,440 --> 00:13:28,380
well departing from a different

316
00:13:28,380 --> 00:13:31,200
perspective which is uh this ongoing

317
00:13:31,200 --> 00:13:34,200
friend in the Silicon industry uh for

318
00:13:34,200 --> 00:13:38,100
this SOC fpgas which basically they

319
00:13:38,100 --> 00:13:40,980
decide okay let's now embed in the same

320
00:13:40,980 --> 00:13:44,399
SOC not only the the large processors

321
00:13:44,399 --> 00:13:46,380
that you as a programmer typically

322
00:13:46,380 --> 00:13:48,839
Implement C or C plus plus programs that

323
00:13:48,839 --> 00:13:51,060
translate in assembly those assemblies

324
00:13:51,060 --> 00:13:53,399
represent of goals that are compliant

325
00:13:53,399 --> 00:13:56,100
with instruction set architect uh but

326
00:13:56,100 --> 00:13:58,440
for different reasons in terms of the

327
00:13:58,440 --> 00:14:00,420
trend of specialization needed for

328
00:14:00,420 --> 00:14:03,540
performance and flexibility fpga and for

329
00:14:03,540 --> 00:14:05,100
those of you

330
00:14:05,100 --> 00:14:07,639
know the technology is kind of

331
00:14:07,639 --> 00:14:10,380
liquid Hardware in the sense that you

332
00:14:10,380 --> 00:14:11,820
don't program

333
00:14:11,820 --> 00:14:15,500
at the iso level but you have language

334
00:14:15,500 --> 00:14:19,139
HDL language like vhdl or system very

335
00:14:19,139 --> 00:14:22,380
long where you can program but at the

336
00:14:22,380 --> 00:14:26,279
logic level or the flip-flop lab and is

337
00:14:26,279 --> 00:14:28,980
of course uh is much better in terms of

338
00:14:28,980 --> 00:14:31,079
performance parallelization and all of

339
00:14:31,079 --> 00:14:34,680
that stuff and the violence creating is

340
00:14:34,680 --> 00:14:38,100
is Trend in 2011 with the with the

341
00:14:38,100 --> 00:14:40,560
release of the zinc 7000 in the meantime

342
00:14:40,560 --> 00:14:42,380
they have released the

343
00:14:42,380 --> 00:14:45,240
ultrascale plus uh and these all of this

344
00:14:45,240 --> 00:14:46,680
has eliminated with the recent

345
00:14:46,680 --> 00:14:50,519
acquisition from uh xialins by AMV with

346
00:14:50,519 --> 00:14:53,399
the modest and humble amount of 15

347
00:14:53,399 --> 00:14:55,800
billion dollars

348
00:14:55,800 --> 00:14:58,560
and this is basically the trend uh

349
00:14:58,560 --> 00:15:01,019
ongoing in the Silicon is

350
00:15:01,019 --> 00:15:04,620
well departing from these problems on

351
00:15:04,620 --> 00:15:06,180
person and these expertise that we gain

352
00:15:06,180 --> 00:15:08,880
with that word coupling together with

353
00:15:08,880 --> 00:15:11,820
with this training between the Silicon

354
00:15:11,820 --> 00:15:14,339
industry we prototypes that if it would

355
00:15:14,339 --> 00:15:16,620
be possible to create a model where we

356
00:15:16,620 --> 00:15:18,480
leverage the configurable capabilities

357
00:15:18,480 --> 00:15:20,639
of these modern socs in particular they

358
00:15:20,639 --> 00:15:22,440
are AGI technology

359
00:15:22,440 --> 00:15:24,959
basically uh rethink the way we are

360
00:15:24,959 --> 00:15:29,339
currently building and implementing GES

361
00:15:29,339 --> 00:15:32,579
well and based on that we decide to

362
00:15:32,579 --> 00:15:35,399
specify the gov or trust Distribution on

363
00:15:35,399 --> 00:15:38,220
demand model that

364
00:15:38,220 --> 00:15:42,779
as kind of Crews first one is well when

365
00:15:42,779 --> 00:15:45,000
we are kids we are thought that sharing

366
00:15:45,000 --> 00:15:47,579
is caring but the Security Experts we

367
00:15:47,579 --> 00:15:49,139
know that sharing is not definitely

368
00:15:49,139 --> 00:15:51,360
caring and this is the first rule

369
00:15:51,360 --> 00:15:53,339
sharing is not caring for sure because

370
00:15:53,339 --> 00:15:56,579
as we saw if we share software uh Stacks

371
00:15:56,579 --> 00:15:59,880
if you share otherwise structures at the

372
00:15:59,880 --> 00:16:02,160
end of the day it will be the end game

373
00:16:02,160 --> 00:16:04,440
so the first rule is sharing is not that

374
00:16:04,440 --> 00:16:06,720
and the second rule is about the

375
00:16:06,720 --> 00:16:09,360
principle of this trip which basically

376
00:16:09,360 --> 00:16:12,060
dictates that each component should be

377
00:16:12,060 --> 00:16:14,339
given just the privilege that it needs

378
00:16:14,339 --> 00:16:16,920
and assigned with the components that it

379
00:16:16,920 --> 00:16:18,839
needs to perform the function and

380
00:16:18,839 --> 00:16:20,279
nothing more

381
00:16:20,279 --> 00:16:23,820
well and we departed from this trust

382
00:16:23,820 --> 00:16:26,459
zone model uh with the secure an award

383
00:16:26,459 --> 00:16:31,139
and we basically uh read out of the

384
00:16:31,139 --> 00:16:33,120
secure state in the sense that is not

385
00:16:33,120 --> 00:16:35,820
shared by the vehicle process but we

386
00:16:35,820 --> 00:16:38,459
Leverage The fpga is still in the same

387
00:16:38,459 --> 00:16:41,779
SOC but not in the art processing system

388
00:16:41,779 --> 00:16:46,320
uh basically instantiates one Enclave

389
00:16:46,320 --> 00:16:48,920
that in practice is a kind of soft

390
00:16:48,920 --> 00:16:52,320
microprocessor or microcontroller where

391
00:16:52,320 --> 00:16:55,920
we run one and only one trusted

392
00:16:55,920 --> 00:16:59,820
application on the top we with these we

393
00:16:59,820 --> 00:17:01,399
basically read out about the first

394
00:17:01,399 --> 00:17:04,319
kernel without of the security monitor

395
00:17:04,319 --> 00:17:06,720
in terms of personalities for this and

396
00:17:06,720 --> 00:17:08,819
at the end of the day itching wave is

397
00:17:08,819 --> 00:17:10,799
given just a specific amount of memory

398
00:17:10,799 --> 00:17:13,199
and the right privilege to just access

399
00:17:13,199 --> 00:17:16,199
the right components at the end of the

400
00:17:16,199 --> 00:17:19,500
day each ta just access the the small

401
00:17:19,500 --> 00:17:22,280
type of memory and a bunch of

402
00:17:22,280 --> 00:17:24,959
shared memory to communicate the other

403
00:17:24,959 --> 00:17:27,119
side and nothing more and each wave

404
00:17:27,119 --> 00:17:28,980
cannot affect the other enclaves neither

405
00:17:28,980 --> 00:17:31,559
access the reach operating system this

406
00:17:31,559 --> 00:17:34,260
is compartmentalization at the West

407
00:17:34,260 --> 00:17:35,340
uh

408
00:17:35,340 --> 00:17:37,980
uh and with that we Define a set of

409
00:17:37,980 --> 00:17:41,640
design goals which stands for provided

410
00:17:41,640 --> 00:17:44,940
physician environment for HCA provides

411
00:17:44,940 --> 00:17:46,440
the concurrent distribution environments

412
00:17:46,440 --> 00:17:47,960
which means multiple

413
00:17:47,960 --> 00:17:50,780
provides physical isolation from the

414
00:17:50,780 --> 00:17:53,039
resistant environment from the other Tas

415
00:17:53,039 --> 00:17:54,840
basically since we are not sharing the

416
00:17:54,840 --> 00:17:57,419
same processing system we are still in

417
00:17:57,419 --> 00:18:00,720
the same SOC but in on the EGA side

418
00:18:00,720 --> 00:18:04,620
which uh basically gives advantage in

419
00:18:04,620 --> 00:18:06,240
terms of not including inside Channel

420
00:18:06,240 --> 00:18:08,280
attacks on the processing system that we

421
00:18:08,280 --> 00:18:11,340
have seen that are practical uh reduce

422
00:18:11,340 --> 00:18:13,380
the privilege of es because at this

423
00:18:13,380 --> 00:18:16,620
point in the Asian just run in in one

424
00:18:16,620 --> 00:18:19,320
specific web and just as access resource

425
00:18:19,320 --> 00:18:20,640
that you need

426
00:18:20,640 --> 00:18:22,919
depend on the main minimal and this

427
00:18:22,919 --> 00:18:24,840
centralized trusted Computing base at

428
00:18:24,840 --> 00:18:26,520
the end of the day for security defense

429
00:18:26,520 --> 00:18:28,980
Computing basically is easily

430
00:18:28,980 --> 00:18:32,100
and last but not least to maintain the

431
00:18:32,100 --> 00:18:34,700
software profitability in particular

432
00:18:34,700 --> 00:18:38,240
compliance with these Global platform

433
00:18:38,240 --> 00:18:41,280
standard I mean if you develop a model

434
00:18:41,280 --> 00:18:43,620
that is too exotic at the end of the day

435
00:18:43,620 --> 00:18:46,500
no one will use and however was from the

436
00:18:46,500 --> 00:18:49,260
beginning to be able to work very same

437
00:18:49,260 --> 00:18:51,600
trusted applications that you run for

438
00:18:51,600 --> 00:18:53,760
example in nope te that is an e or e

439
00:18:53,760 --> 00:18:57,179
open source based on transform also in

440
00:18:57,179 --> 00:18:59,160
our mod

441
00:18:59,160 --> 00:19:02,340
with that we Define our thread model for

442
00:19:02,340 --> 00:19:05,340
by which TLD should comply with and we

443
00:19:05,340 --> 00:19:07,440
don't trust which operating system of

444
00:19:07,440 --> 00:19:10,440
course we can be compromise Linux has

445
00:19:10,440 --> 00:19:13,080
millions of lines of code we don't trust

446
00:19:13,080 --> 00:19:15,600
in the processing system in the sense

447
00:19:15,600 --> 00:19:18,179
that it can issue all issues requests

448
00:19:18,179 --> 00:19:21,720
for the fpga side and suffer from macro

449
00:19:21,720 --> 00:19:24,860
title size channels

450
00:19:27,559 --> 00:19:31,200
at the end of the day so we don't trust

451
00:19:31,200 --> 00:19:35,700
them we do trust the fpga bit stream of

452
00:19:35,700 --> 00:19:37,620
course we do trust the implementation of

453
00:19:37,620 --> 00:19:39,600
the soft microprocessors that will power

454
00:19:39,600 --> 00:19:43,020
the enclaves and we do trust that there

455
00:19:43,020 --> 00:19:44,820
is a secret book in place to make sure

456
00:19:44,820 --> 00:19:46,559
that the bit stream that is programmed

457
00:19:46,559 --> 00:19:47,820
on the fpga

458
00:19:47,820 --> 00:19:49,500
stress

459
00:19:49,500 --> 00:19:51,960
we consider out of the scope I mean we

460
00:19:51,960 --> 00:19:54,059
try we need to minimize a little bit the

461
00:19:54,059 --> 00:19:57,600
extent of our problem uh we consider out

462
00:19:57,600 --> 00:19:59,280
of the scope physical attacks in

463
00:19:59,280 --> 00:20:01,039
particular for each action

464
00:20:01,039 --> 00:20:03,960
we consider out of the scope activity

465
00:20:03,960 --> 00:20:07,140
outside channels on their PGA is

466
00:20:07,140 --> 00:20:09,360
something that we are pursuing but I

467
00:20:09,360 --> 00:20:11,160
mean we need to start from from

468
00:20:11,160 --> 00:20:14,120
something and

469
00:20:17,340 --> 00:20:19,879
well I

470
00:20:21,600 --> 00:20:24,600
continue with design implementation and

471
00:20:24,600 --> 00:20:26,940
evaluation use case and I will get back

472
00:20:26,940 --> 00:20:30,080
at the end

473
00:20:30,419 --> 00:20:32,880
thank you Sandra and thank you all for

474
00:20:32,880 --> 00:20:35,039
coming in uh it's pleasure to be here

475
00:20:35,039 --> 00:20:38,760
it's the first time uh now uh going back

476
00:20:38,760 --> 00:20:41,900
to the TRD now that we have design goals

477
00:20:41,900 --> 00:20:45,840
and the thread model how can we designed

478
00:20:45,840 --> 00:20:48,660
from that

479
00:20:48,660 --> 00:20:49,860
so

480
00:20:49,860 --> 00:20:52,559
but before that let me just verify some

481
00:20:52,559 --> 00:20:57,360
terms that we are using uh this will be

482
00:20:57,360 --> 00:20:59,580
basically the same terms as Global

483
00:20:59,580 --> 00:21:03,360
platform uses uh we use the term of

484
00:21:03,360 --> 00:21:06,660
trusted applications Tas that is the

485
00:21:06,660 --> 00:21:08,760
application that runs a security

486
00:21:08,760 --> 00:21:11,820
sensitive applications functionalities

487
00:21:11,820 --> 00:21:14,100
then we have the address is crucial

488
00:21:14,100 --> 00:21:17,039
environment OS that only provides the

489
00:21:17,039 --> 00:21:19,919
basic OS Primitives for scheduling and

490
00:21:19,919 --> 00:21:22,740
managing the tis then we have the client

491
00:21:22,740 --> 00:21:26,179
application that is the ca

492
00:21:26,179 --> 00:21:30,059
that are just an ordinary applications

493
00:21:30,059 --> 00:21:33,500
that whenever they need uh security

494
00:21:33,500 --> 00:21:36,900
sensitive functionality to run as it's

495
00:21:36,900 --> 00:21:40,919
for the uh for it to the team and then

496
00:21:40,919 --> 00:21:42,539
we have the rich situation environment

497
00:21:42,539 --> 00:21:46,740
that is the mainstream OS that we all

498
00:21:46,740 --> 00:21:48,600
know about

499
00:21:48,600 --> 00:21:49,799
so

500
00:21:49,799 --> 00:21:54,240
with no further Ado uh in our design

501
00:21:54,240 --> 00:21:59,340
we we stated that the our employees are

502
00:21:59,340 --> 00:22:04,020
soft core processors that has a

503
00:22:04,020 --> 00:22:06,720
isolated then dedicated on ship memory

504
00:22:06,720 --> 00:22:09,120
and also the necessary cripples for

505
00:22:09,120 --> 00:22:11,000
their execution

506
00:22:11,000 --> 00:22:14,640
we stated that the EEG software

507
00:22:14,640 --> 00:22:16,799
processors but we could think about

508
00:22:16,799 --> 00:22:21,120
customer simulator in Hardware but since

509
00:22:21,120 --> 00:22:23,400
we are aiming to maintain the

510
00:22:23,400 --> 00:22:26,940
portability and since we have went out

511
00:22:26,940 --> 00:22:30,200
from the industry and from the academic

512
00:22:30,200 --> 00:22:33,179
that we have a range of software

513
00:22:33,179 --> 00:22:35,400
processors available from the cool

514
00:22:35,400 --> 00:22:38,280
customized to the fully ready to use and

515
00:22:38,280 --> 00:22:41,400
from the low line to the higher ends

516
00:22:41,400 --> 00:22:45,179
so back into the design uh in the

517
00:22:45,179 --> 00:22:48,120
software side running on top of that

518
00:22:48,120 --> 00:22:51,539
software processor we have the TI and a

519
00:22:51,539 --> 00:22:54,360
little firmware just provided the the

520
00:22:54,360 --> 00:22:57,000
necessary uh interaction with the

521
00:22:57,000 --> 00:22:58,559
hardware

522
00:22:58,559 --> 00:23:02,280
and then we have the Coe agents that

523
00:23:02,280 --> 00:23:06,059
provides the main screen the the upload

524
00:23:06,059 --> 00:23:09,120
service the communication interface to

525
00:23:09,120 --> 00:23:12,000
between the tis and the rich especution

526
00:23:12,000 --> 00:23:13,820
environment

527
00:23:13,820 --> 00:23:17,880
then we have the which description uh

528
00:23:17,880 --> 00:23:19,679
components that is the client

529
00:23:19,679 --> 00:23:22,140
applications the rich OS and the driver

530
00:23:22,140 --> 00:23:25,500
to allow communication

531
00:23:25,500 --> 00:23:29,220
so how we can convert this design to a

532
00:23:29,220 --> 00:23:31,799
real implementation we choose to

533
00:23:31,799 --> 00:23:35,220
demonstrate our design on the dialing

534
00:23:35,220 --> 00:23:38,840
superscale bus uh that model

535
00:23:38,840 --> 00:23:41,580
has the processing system that has the

536
00:23:41,580 --> 00:23:44,400
main course and the main static hardware

537
00:23:44,400 --> 00:23:46,440
and then we have the programmable logic

538
00:23:46,440 --> 00:23:50,100
that is a VGA and on the fbj we

539
00:23:50,100 --> 00:23:55,140
instantiate the those employees as uh as

540
00:23:55,140 --> 00:23:59,280
the user wants and in each include we

541
00:23:59,280 --> 00:24:01,140
have the the

542
00:24:01,140 --> 00:24:03,240
on the software side we have the

543
00:24:03,240 --> 00:24:06,000
firmware in the TI and also the the

544
00:24:06,000 --> 00:24:09,120
internal core API that is from the

545
00:24:09,120 --> 00:24:11,460
global platform specification

546
00:24:11,460 --> 00:24:13,140
minimal interface

547
00:24:13,140 --> 00:24:16,260
to the to the te components like the

548
00:24:16,260 --> 00:24:19,020
Secure Storage the shared memory

549
00:24:19,020 --> 00:24:21,360
and then we have the the communication

550
00:24:21,360 --> 00:24:24,900
relation provides the the communication

551
00:24:24,900 --> 00:24:27,720
between uh that employers and the

552
00:24:27,720 --> 00:24:30,059
richest Christian environments then we

553
00:24:30,059 --> 00:24:33,299
have the team manager agent that keeps

554
00:24:33,299 --> 00:24:35,460
track of water enclaves are available

555
00:24:35,460 --> 00:24:39,360
what what ti is running on what the heat

556
00:24:39,360 --> 00:24:42,360
wave and commands of the loader whenever

557
00:24:42,360 --> 00:24:45,360
he needs to move a new TI

558
00:24:45,360 --> 00:24:48,020
to an empty angle

559
00:24:48,020 --> 00:24:51,539
and on the richest Christian environment

560
00:24:51,539 --> 00:24:53,640
we have the three supplicant that is a

561
00:24:53,640 --> 00:24:55,860
demon that only provides the necessary

562
00:24:55,860 --> 00:24:57,840
information of the location of the DI

563
00:24:57,840 --> 00:25:02,418
whenever the de manager agent needs

564
00:25:02,700 --> 00:25:04,740
so

565
00:25:04,740 --> 00:25:06,299
uh

566
00:25:06,299 --> 00:25:09,659
now now let's take a look at our

567
00:25:09,659 --> 00:25:13,080
evaluation and we will we have evaluated

568
00:25:13,080 --> 00:25:15,720
our prototype in terms of resource

569
00:25:15,720 --> 00:25:19,020
utilization and round trip

570
00:25:19,020 --> 00:25:20,419
execution

571
00:25:20,419 --> 00:25:23,220
we choose to

572
00:25:23,220 --> 00:25:26,760
to developers on the Avenue router 96

573
00:25:26,760 --> 00:25:28,559
version 2.

574
00:25:28,559 --> 00:25:31,700
that is

575
00:25:32,360 --> 00:25:35,760
that we choose obviously the GLD has 3D

576
00:25:35,760 --> 00:25:40,679
and for the which is especially

577
00:25:40,799 --> 00:25:43,640
so evaluating the resource utilization

578
00:25:43,640 --> 00:25:48,120
we we perform 4K studies at the dod with

579
00:25:48,120 --> 00:25:51,320
one two three and four in place

580
00:25:51,320 --> 00:25:54,240
accordingly if we have an arm cortex M1

581
00:25:54,240 --> 00:25:57,080
and soft processor we have

582
00:25:57,080 --> 00:26:02,880
64 kilobytes of eram as a gold memory

583
00:26:02,880 --> 00:26:06,240
then we have 8 kilobytes of pure Ms

584
00:26:06,240 --> 00:26:09,179
shared memory and we set up the clock to

585
00:26:09,179 --> 00:26:11,340
100 megahertz

586
00:26:11,340 --> 00:26:14,400
so this is the the design Hardware

587
00:26:14,400 --> 00:26:19,380
design view from debug of the cod with

588
00:26:19,380 --> 00:26:23,120
one only one inside that Enclave is the

589
00:26:23,120 --> 00:26:27,539
reward-wise uh connected to it it's

590
00:26:27,539 --> 00:26:32,159
dedicated so if he is represented that

591
00:26:32,159 --> 00:26:36,840
through IDs uh as Usain black and the

592
00:26:36,840 --> 00:26:42,120
rest is strongly busy is the cataliness

593
00:26:42,120 --> 00:26:44,640
so taking a look of the synthesis

594
00:26:44,640 --> 00:26:48,360
results we have here the footprints of

595
00:26:48,360 --> 00:26:51,840
the of the different Farm cases in green

596
00:26:51,840 --> 00:26:54,539
we have the three of the agents on the

597
00:26:54,539 --> 00:26:57,900
enclaves and on the yellow of the 80s

598
00:26:57,900 --> 00:26:59,220
hands

599
00:26:59,220 --> 00:27:02,460
so taking a closer look of the resource

600
00:27:02,460 --> 00:27:06,299
utilization you can see that we have

601
00:27:06,299 --> 00:27:06,900
um

602
00:27:06,900 --> 00:27:10,220
a very resource

603
00:27:10,220 --> 00:27:15,000
use on e-ramps these two become a bottom

604
00:27:15,000 --> 00:27:18,900
act in terms of scalability of our

605
00:27:18,900 --> 00:27:22,500
design but since it's it's able to run

606
00:27:22,500 --> 00:27:26,220
up to Party Place uh it complies with

607
00:27:26,220 --> 00:27:28,620
the global platform specification which

608
00:27:28,620 --> 00:27:32,340
is to utilize at the same time

609
00:27:32,340 --> 00:27:35,100
so they can now look of the performance

610
00:27:35,100 --> 00:27:37,559
analysis we secured a round trip

611
00:27:37,559 --> 00:27:40,740
execution performance we what we mean by

612
00:27:40,740 --> 00:27:43,740
that is the time they took from the

613
00:27:43,740 --> 00:27:45,240
client application

614
00:27:45,240 --> 00:27:49,200
so uh commands an execution of a toy

615
00:27:49,200 --> 00:27:53,220
operation in the TA side so because for

616
00:27:53,220 --> 00:27:56,039
example the Open Session One uh then

617
00:27:56,039 --> 00:27:59,159
goes goes goes goes inside of the TA to

618
00:27:59,159 --> 00:28:01,799
run the Open Session entry point that is

619
00:28:01,799 --> 00:28:05,039
empty and then come back

620
00:28:05,039 --> 00:28:11,000
so we have executed uh these four

621
00:28:11,419 --> 00:28:18,000
five five operations uh if but we repeat

622
00:28:18,000 --> 00:28:20,520
one of them that is the Open Session to

623
00:28:20,520 --> 00:28:23,340
compare it with a TA already loaded and

624
00:28:23,340 --> 00:28:26,580
uh and the AI that was not available we

625
00:28:26,580 --> 00:28:28,440
will see more detail

626
00:28:28,440 --> 00:28:31,080
and then we will compare it with top te

627
00:28:31,080 --> 00:28:34,080
that is an open source Test Zone advisor

628
00:28:34,080 --> 00:28:35,159
t

629
00:28:35,159 --> 00:28:37,620
that is also complied with the global

630
00:28:37,620 --> 00:28:39,840
specification

631
00:28:39,840 --> 00:28:43,860
so I want also to take a look of the

632
00:28:43,860 --> 00:28:46,440
workflow and how the things are

633
00:28:46,440 --> 00:28:49,500
executing so in Open Session operation

634
00:28:49,500 --> 00:28:51,480
we started from the client application

635
00:28:51,480 --> 00:28:54,720
that issues the to the dod driver

636
00:28:54,720 --> 00:28:57,900
through the client API the Open Session

637
00:28:57,900 --> 00:29:00,539
operation then it communicates to the

638
00:29:00,539 --> 00:29:03,360
communication agent that there is a new

639
00:29:03,360 --> 00:29:06,840
a new operation to that specific TI

640
00:29:06,840 --> 00:29:10,500
and so he asks to the manager agent okay

641
00:29:10,500 --> 00:29:13,260
so where is The Enclave that he's

642
00:29:13,260 --> 00:29:17,940
hosting that uh uh that's TI and since

643
00:29:17,940 --> 00:29:20,880
we never run this command before he then

644
00:29:20,880 --> 00:29:23,899
returns to uh to ask him to the

645
00:29:23,899 --> 00:29:27,240
recipient for the location of the GI

646
00:29:27,240 --> 00:29:30,659
binary so we can uh demands that he or

647
00:29:30,659 --> 00:29:33,539
the order to hold the STI to an

648
00:29:33,539 --> 00:29:35,360
available angle

649
00:29:35,360 --> 00:29:38,640
once once it's done you can reset that

650
00:29:38,640 --> 00:29:40,740
soft score and then the duplication

651
00:29:40,740 --> 00:29:43,559
agent can send it to the mailbox then

652
00:29:43,559 --> 00:29:45,440
we'll uh

653
00:29:45,440 --> 00:29:50,039
issue the the di2 is a good state of

654
00:29:50,039 --> 00:29:51,600
command

655
00:29:51,600 --> 00:29:56,279
so this this whole process has to uh

656
00:29:56,279 --> 00:30:00,299
fear approximately uh 50 milliseconds 20

657
00:30:00,299 --> 00:30:04,080
milliseconds a quicker than a deep

658
00:30:04,080 --> 00:30:06,000
comparison without the

659
00:30:06,000 --> 00:30:09,360
so then we we repeat the same command

660
00:30:09,360 --> 00:30:12,659
but since the ti was already loaded we

661
00:30:12,659 --> 00:30:15,120
could skip the part of the team manager

662
00:30:15,120 --> 00:30:18,960
uh we need to load it so it runs a lot

663
00:30:18,960 --> 00:30:21,919
faster uh

664
00:30:21,919 --> 00:30:25,679
and also is run

665
00:30:25,679 --> 00:30:30,059
so then we run the evoke map but for the

666
00:30:30,059 --> 00:30:33,899
sense of the the Tod the it's the same

667
00:30:33,899 --> 00:30:37,039
behavior so it's expected that it's the

668
00:30:37,039 --> 00:30:39,419
performance results will be

669
00:30:39,419 --> 00:30:42,299
approximately the same then we run the

670
00:30:42,299 --> 00:30:45,419
closed session what what we need to do

671
00:30:45,419 --> 00:30:48,120
is kind of the same object Manning needs

672
00:30:48,120 --> 00:30:50,460
to call the GI to execute the final

673
00:30:50,460 --> 00:30:53,940
operations to close it but then we need

674
00:30:53,940 --> 00:30:57,360
to erase the memory but since we are in

675
00:30:57,360 --> 00:30:59,880
the fpga we can take advantage of the

676
00:30:59,880 --> 00:31:03,600
parallelism and so we can give back to

677
00:31:03,600 --> 00:31:05,039
the richest Christian environment that

678
00:31:05,039 --> 00:31:07,500
operation has done while we are still

679
00:31:07,500 --> 00:31:10,500
erasing the memory and cleaning the the

680
00:31:10,500 --> 00:31:13,860
macro architectural artifacts so that's

681
00:31:13,860 --> 00:31:16,980
why in our theory is running a lot

682
00:31:16,980 --> 00:31:18,120
faster

683
00:31:18,120 --> 00:31:21,299
so summing up all these

684
00:31:21,299 --> 00:31:23,940
these results I didn't take a look of

685
00:31:23,940 --> 00:31:25,980
the Indian context and finalize context

686
00:31:25,980 --> 00:31:29,279
because uh it's only to initialize the

687
00:31:29,279 --> 00:31:33,659
dod driver and it doesn't have uh it's

688
00:31:33,659 --> 00:31:37,080
not so interesting to show and the

689
00:31:37,080 --> 00:31:39,299
performance is relatively the same but

690
00:31:39,299 --> 00:31:42,419
as we can see it's here in this graph

691
00:31:42,419 --> 00:31:45,960
it's a relative performance uh we adopt

692
00:31:45,960 --> 00:31:49,020
is represented by one a performance unit

693
00:31:49,020 --> 00:31:52,158
and the

694
00:31:55,520 --> 00:31:59,760
so we can see that as performant much

695
00:31:59,760 --> 00:32:01,500
better what

696
00:32:01,500 --> 00:32:03,000
because

697
00:32:03,000 --> 00:32:07,620
we are running on the PGA so now uh this

698
00:32:07,620 --> 00:32:10,940
this was only running uh Toy operations

699
00:32:10,940 --> 00:32:15,179
uh how let's now take a look of a real

700
00:32:15,179 --> 00:32:17,940
world application we choose to to show

701
00:32:17,940 --> 00:32:20,340
it the Bitcoin World application that

702
00:32:20,340 --> 00:32:24,539
was originally developed for the opt

703
00:32:24,539 --> 00:32:27,659
and we just needed to parted spot our

704
00:32:27,659 --> 00:32:31,080
own so this application consists of two

705
00:32:31,080 --> 00:32:33,539
uh the the client application and

706
00:32:33,539 --> 00:32:36,179
address authen application we have six

707
00:32:36,179 --> 00:32:38,640
functionalities available you can check

708
00:32:38,640 --> 00:32:41,880
if a master key uh was already generated

709
00:32:41,880 --> 00:32:44,940
we can generate a new master key or we

710
00:32:44,940 --> 00:32:46,740
can generate a new master key from a

711
00:32:46,740 --> 00:32:48,120
given mnemonic

712
00:32:48,120 --> 00:32:51,360
or we can delete the master key also we

713
00:32:51,360 --> 00:32:53,220
can sign up about transaction that's

714
00:32:53,220 --> 00:32:55,620
what we want and also get a white

715
00:32:55,620 --> 00:32:58,320
Bitcoin wallet address

716
00:32:58,320 --> 00:33:00,600
to perform a any of these

717
00:33:00,600 --> 00:33:04,559
functionalities we we run this command

718
00:33:04,559 --> 00:33:07,020
start the four digit PIN

719
00:33:07,020 --> 00:33:10,919
and in whenever the command VR issued

720
00:33:10,919 --> 00:33:13,980
the operation has the same behind it

721
00:33:13,980 --> 00:33:16,080
opens the session it works the command

722
00:33:16,080 --> 00:33:19,519
and then close the session

723
00:33:19,559 --> 00:33:22,620
so the setup was the same as we have

724
00:33:22,620 --> 00:33:24,779
revolvated but with a little difference

725
00:33:24,779 --> 00:33:28,200
that we have increased the memory so we

726
00:33:28,200 --> 00:33:31,440
can involve that the ti

727
00:33:31,440 --> 00:33:34,620
and we we put a dedicated peripheral so

728
00:33:34,620 --> 00:33:38,159
we can now see what is executing on the

729
00:33:38,159 --> 00:33:41,640
uh application

730
00:33:41,940 --> 00:33:46,919
so uh on the left side we have the the

731
00:33:46,919 --> 00:33:49,320
load pulls from the Zealand space winds

732
00:33:49,320 --> 00:33:53,700
and from the right side we have the Tod

733
00:33:53,700 --> 00:33:57,000
so before starting the demo uh we have

734
00:33:57,000 --> 00:34:00,120
already run it the check if there is a

735
00:34:00,120 --> 00:34:03,779
master key there is none so we run it uh

736
00:34:03,779 --> 00:34:07,860
the demand to uh to generate a new

737
00:34:07,860 --> 00:34:11,639
master key now we will

738
00:34:11,639 --> 00:34:14,179
pieces

739
00:34:14,460 --> 00:34:17,580
okay now we are running uh the the

740
00:34:17,580 --> 00:34:20,040
wallet read the commentary that is

741
00:34:20,040 --> 00:34:22,379
generating a new master key from our

742
00:34:22,379 --> 00:34:25,219
morning

743
00:34:46,080 --> 00:34:48,259
thank you

744
00:34:50,239 --> 00:34:54,618
it's just a second sorry

745
00:35:24,180 --> 00:35:28,740
so as I said uh we are running the to

746
00:35:28,740 --> 00:35:30,780
generate a new master key now we are

747
00:35:30,780 --> 00:35:32,880
asking to sign a transaction this will

748
00:35:32,880 --> 00:35:35,820
take a little while

749
00:35:35,820 --> 00:35:38,220
okay that's the the transaction was

750
00:35:38,220 --> 00:35:40,680
successfully signed as we see here from

751
00:35:40,680 --> 00:35:43,500
the gisi and now we are asking for the

752
00:35:43,500 --> 00:35:46,400
Bitcoin address

753
00:35:46,680 --> 00:35:51,140
and erasing the master key

754
00:36:01,560 --> 00:36:04,440
okay now I will pass the word to Central

755
00:36:04,440 --> 00:36:08,240
for the final thoughts thank you

756
00:36:09,540 --> 00:36:11,579
okay just to wrap up and share some

757
00:36:11,579 --> 00:36:16,079
final thoughts uh well uh with this word

758
00:36:16,079 --> 00:36:18,480
we basically demonstrate that we can

759
00:36:18,480 --> 00:36:21,780
come from building money in those modern

760
00:36:21,780 --> 00:36:25,619
socs can be leveraged to provide a new

761
00:36:25,619 --> 00:36:29,940
and uh refined he approaches and enables

762
00:36:29,940 --> 00:36:32,520
an enabler to provide additional

763
00:36:32,520 --> 00:36:35,400
security guarantees for 40

764
00:36:35,400 --> 00:36:39,240
and as a side note with his work we want

765
00:36:39,240 --> 00:36:42,300
designing Supernatural contest as the PC

766
00:36:42,300 --> 00:36:44,280
category and we have the chance to

767
00:36:44,280 --> 00:36:47,040
basically present this Innovative idea

768
00:36:47,040 --> 00:36:49,700
to the CTO of of sale

769
00:36:49,700 --> 00:36:53,420
uh just final takeaways

770
00:36:53,420 --> 00:36:56,220
guarantees in particular we focus more

771
00:36:56,220 --> 00:36:58,680
on trust Zone because we have these

772
00:36:58,680 --> 00:36:59,599
activities

773
00:36:59,599 --> 00:37:02,880
uh implementations have numerals of

774
00:37:02,880 --> 00:37:04,980
flows in particular the architectural

775
00:37:04,980 --> 00:37:08,579
ones uh with that we propose decision

776
00:37:08,579 --> 00:37:10,800
environment on demand as a novelty

777
00:37:10,800 --> 00:37:13,500
design that leveraged these fpga

778
00:37:13,500 --> 00:37:15,240
Technologies or the programmable logic

779
00:37:15,240 --> 00:37:18,420
available in these modern socs to to

780
00:37:18,420 --> 00:37:22,020
provide the keys on a pad application in

781
00:37:22,020 --> 00:37:25,980
their new basis and quite important we

782
00:37:25,980 --> 00:37:28,800
have demonstrated that goal that we

783
00:37:28,800 --> 00:37:30,540
propose which was compliance and

784
00:37:30,540 --> 00:37:32,940
compatibility with ICC interested

785
00:37:32,940 --> 00:37:36,000
applications and with the Bitcoin

786
00:37:36,000 --> 00:37:39,359
wallets we don't we actually didn't

787
00:37:39,359 --> 00:37:41,700
change any line of goal of the trusted

788
00:37:41,700 --> 00:37:44,760
application and we were able to run on

789
00:37:44,760 --> 00:37:47,780
on our model we which which basically

790
00:37:47,780 --> 00:37:50,520
demonstrates that he's practical and

791
00:37:50,520 --> 00:37:53,960
this is why and yeah

792
00:37:53,960 --> 00:37:56,579
with that Bitcoin wallet at the end of

793
00:37:56,579 --> 00:37:58,619
the presentation you can also share your

794
00:37:58,619 --> 00:38:01,619
beat points we will see if you want

795
00:38:01,619 --> 00:38:03,839
okay thank you for your time I hope you

796
00:38:03,839 --> 00:38:05,280
have enjoyed the presentation and we

797
00:38:05,280 --> 00:38:06,660
will Lively

798
00:38:06,660 --> 00:38:08,339
address some

799
00:38:08,339 --> 00:38:10,200
of them thank you guys

800
00:38:10,200 --> 00:38:12,540
big rounds up for close to Sergio and

801
00:38:12,540 --> 00:38:13,740
Sandra

802
00:38:13,740 --> 00:38:16,380
and we have a couple minutes to ask

803
00:38:16,380 --> 00:38:19,700
questions if you have some

804
00:38:20,700 --> 00:38:22,440
at least that's because I will power

805
00:38:22,440 --> 00:38:24,859
Society

806
00:38:32,520 --> 00:38:34,800
yeah maybe I missed something but I'm

807
00:38:34,800 --> 00:38:36,240
trying to understand

808
00:38:36,240 --> 00:38:36,839
um

809
00:38:36,839 --> 00:38:39,720
the your Bitcoin private key

810
00:38:39,720 --> 00:38:41,339
okay does do you need some kind of

811
00:38:41,339 --> 00:38:43,920
secret key that's in the fpga or in the

812
00:38:43,920 --> 00:38:46,800
soc in order to have your Secure Storage

813
00:38:46,800 --> 00:38:48,180
and if so you need some kind of Key

814
00:38:48,180 --> 00:38:51,119
Management to give it to the trusted

815
00:38:51,119 --> 00:38:52,800
application to each secure Enclave as

816
00:38:52,800 --> 00:38:55,440
you boot it up is I guess what I'm

817
00:38:55,440 --> 00:38:57,720
asking is what kind of identity

818
00:38:57,720 --> 00:38:59,820
attached to the secure Enclave into each

819
00:38:59,820 --> 00:39:04,140
ta okay uh that scene is a question

820
00:39:04,140 --> 00:39:06,060
because

821
00:39:06,060 --> 00:39:09,119
so I didn't develop this Bitcoin world

822
00:39:09,119 --> 00:39:13,260
it was originally already done so I

823
00:39:13,260 --> 00:39:17,599
didn't get so much deeper but

824
00:39:17,599 --> 00:39:20,520
the private key was already embedded on

825
00:39:20,520 --> 00:39:21,720
the application

826
00:39:21,720 --> 00:39:27,359
so I so in my perspective was not so

827
00:39:27,359 --> 00:39:30,480
much on the development on how the

828
00:39:30,480 --> 00:39:32,640
Bitcoin was was working was more okay

829
00:39:32,640 --> 00:39:35,640
how can I provide the execution uh trust

830
00:39:35,640 --> 00:39:39,598
to create

831
00:39:41,780 --> 00:39:44,280
but the whole idea was just to

832
00:39:44,280 --> 00:39:46,500
demonstrate the portability we abstract

833
00:39:46,500 --> 00:39:48,540
from the details in the sense that okay

834
00:39:48,540 --> 00:39:50,820
a private key is needed private key

835
00:39:50,820 --> 00:39:52,440
needs to be packed with some sort of

836
00:39:52,440 --> 00:39:55,380
Secure Storage but we do assume that

837
00:39:55,380 --> 00:39:59,940
that he is already invitable in the rpga

838
00:39:59,940 --> 00:40:02,339
long story short we abstracted a bit on

839
00:40:02,339 --> 00:40:05,220
those details but we are fully aware of

840
00:40:05,220 --> 00:40:06,420
the need

841
00:40:06,420 --> 00:40:08,960
for this

842
00:40:08,960 --> 00:40:12,420
thank you any other questions

843
00:40:12,420 --> 00:40:15,079
foreign

844
00:40:16,140 --> 00:40:19,408
[Music]

845
00:40:27,599 --> 00:40:30,900
what would be the next steps now

846
00:40:30,900 --> 00:40:32,400
um for this project

847
00:40:32,400 --> 00:40:34,680
um maybe it was a vendor at home and

848
00:40:34,680 --> 00:40:37,320
thinking now how many logical elements

849
00:40:37,320 --> 00:40:40,440
over Constitution what happens when we

850
00:40:40,440 --> 00:40:43,440
have the mitigations against such

851
00:40:43,440 --> 00:40:45,119
General attacks and

852
00:40:45,119 --> 00:40:46,579
uh

853
00:40:46,579 --> 00:40:51,020
PLC attacks things like this

854
00:40:51,020 --> 00:40:52,880
that's

855
00:40:52,880 --> 00:40:56,640
as Central as stated we need an

856
00:40:56,640 --> 00:41:01,380
infrastructure to now see the next uh

857
00:41:01,380 --> 00:41:04,920
to The Next Step which is right uh right

858
00:41:04,920 --> 00:41:08,400
on track as you said so now we can

859
00:41:08,400 --> 00:41:10,920
evaluate because we are now having a new

860
00:41:10,920 --> 00:41:13,500
variable in mind here we have the fpga

861
00:41:13,500 --> 00:41:17,220
that we are trusting and we can

862
00:41:17,220 --> 00:41:21,060
you can then uh see a lot of okay how

863
00:41:21,060 --> 00:41:24,900
how well this will perform and on the

864
00:41:24,900 --> 00:41:30,060
real real use scenario and what are the

865
00:41:30,060 --> 00:41:32,720
the surface attack that we are

866
00:41:32,720 --> 00:41:36,900
creating on this type of approach is is

867
00:41:36,900 --> 00:41:40,020
our next tool we will be around that is

868
00:41:40,020 --> 00:41:43,079
okay we now have the infrastructure but

869
00:41:43,079 --> 00:41:47,160
we now want to to know how or difficult

870
00:41:47,160 --> 00:41:50,700
to increase to theory about

871
00:41:50,700 --> 00:41:52,440
yeah

872
00:41:52,440 --> 00:41:53,180
yeah

873
00:41:53,180 --> 00:41:55,560
here we present like the resources

874
00:41:55,560 --> 00:41:57,060
estimation consumption for different

875
00:41:57,060 --> 00:41:58,500
instantiations of the number of

876
00:41:58,500 --> 00:42:00,480
employees it gives you already an IDE

877
00:42:00,480 --> 00:42:02,940
the point is that this fpga is quite

878
00:42:02,940 --> 00:42:05,579
small among the selling super scale line

879
00:42:05,579 --> 00:42:08,160
which invites the sum of resource World

880
00:42:08,160 --> 00:42:10,740
already almost two with foreign claims

881
00:42:10,740 --> 00:42:13,440
but this is a very teeny timing at PGA

882
00:42:13,440 --> 00:42:16,920
in that sense uh we are as next steps we

883
00:42:16,920 --> 00:42:19,320
are planning about how we address

884
00:42:19,320 --> 00:42:21,359
scalability in terms of the drams

885
00:42:21,359 --> 00:42:23,339
resource that is one that is put in the

886
00:42:23,339 --> 00:42:25,320
button like and we have already some

887
00:42:25,320 --> 00:42:28,200
ideas how we can basically while we are

888
00:42:28,200 --> 00:42:31,380
not using the enclaves basically in the

889
00:42:31,380 --> 00:42:33,660
ram but completely encrypted because we

890
00:42:33,660 --> 00:42:35,339
have like the fpga we can instantiate

891
00:42:35,339 --> 00:42:37,140
some cryptos but it is basically

892
00:42:37,140 --> 00:42:39,540
alleviate the complexity online our

893
00:42:39,540 --> 00:42:41,760
consumption is a another very

894
00:42:41,760 --> 00:42:43,560
interesting metric that we didn't take

895
00:42:43,560 --> 00:42:45,359
into account I mean

896
00:42:45,359 --> 00:42:48,839
we have a POC you took a a significant

897
00:42:48,839 --> 00:42:51,480
amount of time to reach here but still

898
00:42:51,480 --> 00:42:54,420
there are some open points that we will

899
00:42:54,420 --> 00:42:57,180
widely address depending on the

900
00:42:57,180 --> 00:42:59,220
perspectives that we have in terms of

901
00:42:59,220 --> 00:43:02,040
funding in terms of Interest yeah it's

902
00:43:02,040 --> 00:43:04,020
more or less like like that

903
00:43:04,020 --> 00:43:05,300
okay

904
00:43:05,300 --> 00:43:07,500
thank you guys

905
00:43:07,500 --> 00:43:10,079
another round for of a close to Sergio

906
00:43:10,079 --> 00:43:12,980
and Sandro

