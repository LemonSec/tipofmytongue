1
00:00:03,899 --> 00:00:06,420
so welcome to this talk about how to

2
00:00:06,420 --> 00:00:09,960
train your robot I'm Jessica and well hi

3
00:00:09,960 --> 00:00:11,160
I'm Fabian

4
00:00:11,160 --> 00:00:13,500
and we'll show you a little bit around

5
00:00:13,500 --> 00:00:16,800
uh our journey of liberating some vacuum

6
00:00:16,800 --> 00:00:19,220
robots

7
00:00:20,460 --> 00:00:23,900
so some sometimes I have

8
00:00:24,480 --> 00:00:27,240
the quite a while that I just yeah lying

9
00:00:27,240 --> 00:00:29,820
somewhere on my height disk and uh

10
00:00:29,820 --> 00:00:32,700
people just ask me questions and often

11
00:00:32,700 --> 00:00:34,620
those questions are like a fully

12
00:00:34,620 --> 00:00:36,660
separate project or like really out of

13
00:00:36,660 --> 00:00:39,000
scope but this question was like pretty

14
00:00:39,000 --> 00:00:41,579
good it was about the needle robots I

15
00:00:41,579 --> 00:00:42,379
had

16
00:00:42,379 --> 00:00:45,200
analyzed back in

17
00:00:45,200 --> 00:00:48,420
2018-19 and the person was asking me can

18
00:00:48,420 --> 00:00:50,940
you help me reconfiguring and repairing

19
00:00:50,940 --> 00:00:54,120
one of the robots that I have like was

20
00:00:54,120 --> 00:00:56,039
just exchanging some components and

21
00:00:56,039 --> 00:00:58,620
needed some help there

22
00:00:58,620 --> 00:01:01,860
so to answer this well yes I was saying

23
00:01:01,860 --> 00:01:03,059
thinking about like to understand

24
00:01:03,059 --> 00:01:04,739
everything that happens here I have to

25
00:01:04,739 --> 00:01:06,600
tell you how a robot is born well

26
00:01:06,600 --> 00:01:09,840
there's a factory it uh comes outside of

27
00:01:09,840 --> 00:01:13,080
factory and the factory side has a

28
00:01:13,080 --> 00:01:15,900
notification number and the robot itself

29
00:01:15,900 --> 00:01:18,479
also has then continued the name with

30
00:01:18,479 --> 00:01:20,220
the manufacturing date

31
00:01:20,220 --> 00:01:22,140
and then there's of course multiple

32
00:01:22,140 --> 00:01:24,540
robots born on the same date so they all

33
00:01:24,540 --> 00:01:26,759
have the same name but they are still

34
00:01:26,759 --> 00:01:29,820
you can yeah differentiate them because

35
00:01:29,820 --> 00:01:33,840
they also get a unique Mac address

36
00:01:33,840 --> 00:01:37,380
so this makes the robots unique next

37
00:01:37,380 --> 00:01:40,200
step is you it's Christmas yeah you you

38
00:01:40,200 --> 00:01:42,119
get your robot

39
00:01:42,119 --> 00:01:46,280
um and well what do you do

40
00:01:48,000 --> 00:01:50,100
okay yeah anyway so yeah it's Christmas

41
00:01:50,100 --> 00:01:52,140
you get your robot you unpack it first

42
00:01:52,140 --> 00:01:54,899
thing it's it says it opens Wi-Fi and

43
00:01:54,899 --> 00:01:56,880
it's uh with this Mac address so that's

44
00:01:56,880 --> 00:02:00,060
the the Wi-Fi it opens and now you have

45
00:02:00,060 --> 00:02:04,340
to pair it uh with an app

46
00:02:06,060 --> 00:02:08,160
not yet it did not yet break the robot

47
00:02:08,160 --> 00:02:10,919
only the animation all right so um you

48
00:02:10,919 --> 00:02:13,260
have the Wi-Fi and you need the needle

49
00:02:13,260 --> 00:02:16,260
app so that your robot can join the

50
00:02:16,260 --> 00:02:19,500
Wi-Fi and this is the very first step so

51
00:02:19,500 --> 00:02:21,720
you can use the app to write it directly

52
00:02:21,720 --> 00:02:24,060
talk to the robot but it's super limited

53
00:02:24,060 --> 00:02:25,800
so

54
00:02:25,800 --> 00:02:27,840
um the only thing that it does is to set

55
00:02:27,840 --> 00:02:29,520
up but afterwards everything happens

56
00:02:29,520 --> 00:02:33,120
over a cloud or basically it's even two

57
00:02:33,120 --> 00:02:35,400
clouds so there's different servers

58
00:02:35,400 --> 00:02:37,680
either for accounts versus commands sent

59
00:02:37,680 --> 00:02:39,120
to the robot but let's simplify that

60
00:02:39,120 --> 00:02:42,120
it's like some clothes stuff

61
00:02:42,120 --> 00:02:44,640
um and this means that now yeah the

62
00:02:44,640 --> 00:02:46,920
whole robot is it's found all the

63
00:02:46,920 --> 00:02:48,720
communication is found to the needle

64
00:02:48,720 --> 00:02:52,200
cloud and all your data like the the

65
00:02:52,200 --> 00:02:53,819
floor plan and stuff it's communicated

66
00:02:53,819 --> 00:02:56,879
to the app via the cloud and it's

67
00:02:56,879 --> 00:02:58,560
nothing that you get directly from it

68
00:02:58,560 --> 00:03:00,660
all of this is already locked in Factory

69
00:03:00,660 --> 00:03:04,379
so during the manufacturing process the

70
00:03:04,379 --> 00:03:06,780
robot also has a certificate stored

71
00:03:06,780 --> 00:03:09,120
there this makes it kind of secure right

72
00:03:09,120 --> 00:03:11,280
you can only talk to the middle class so

73
00:03:11,280 --> 00:03:14,340
to nobody else only with the correct

74
00:03:14,340 --> 00:03:16,379
certificates and only to exactly their

75
00:03:16,379 --> 00:03:17,760
servers

76
00:03:17,760 --> 00:03:20,580
and when your robot breaks I don't know

77
00:03:20,580 --> 00:03:22,739
yeah like five years of cleaning it

78
00:03:22,739 --> 00:03:24,780
decides to retire

79
00:03:24,780 --> 00:03:27,060
um and or maybe earlier it has problem

80
00:03:27,060 --> 00:03:29,760
then well what do you do you have to

81
00:03:29,760 --> 00:03:32,099
pack it in a box and then leave it alone

82
00:03:32,099 --> 00:03:37,200
send it back uh to a repair site and of

83
00:03:37,200 --> 00:03:39,599
of course the repair side is uh yeah

84
00:03:39,599 --> 00:03:41,760
it's diagnosing the robot

85
00:03:41,760 --> 00:03:43,140
University

86
00:03:43,140 --> 00:03:45,780
yes okay so it's diagnosing the robots

87
00:03:45,780 --> 00:03:47,760
yeah they check what what's with the

88
00:03:47,760 --> 00:03:49,680
robot but it's nothing that you do

89
00:03:49,680 --> 00:03:51,840
yourself so this happens

90
00:03:51,840 --> 00:03:54,480
um only by little again

91
00:03:54,480 --> 00:03:58,260
so this again just blocked by the vendor

92
00:03:58,260 --> 00:04:00,180
and they are of course authorized to do

93
00:04:00,180 --> 00:04:02,280
this and they only do the right stuff to

94
00:04:02,280 --> 00:04:06,239
your robot okay so how do you how do you

95
00:04:06,239 --> 00:04:09,060
uh now tame the robot

96
00:04:09,060 --> 00:04:10,680
um so there have been some projects

97
00:04:10,680 --> 00:04:13,140
before but yeah so there's pretty bold

98
00:04:13,140 --> 00:04:15,480
guidance so first of all your robot it

99
00:04:15,480 --> 00:04:17,699
only talks to the needle cloud and only

100
00:04:17,699 --> 00:04:20,459
Nero can like help you to to repair it

101
00:04:20,459 --> 00:04:24,600
uh so it has a Serial interface and this

102
00:04:24,600 --> 00:04:27,240
allows you some control even on the very

103
00:04:27,240 --> 00:04:29,580
early non-connected series for the very

104
00:04:29,580 --> 00:04:31,320
early series they had some documentation

105
00:04:31,320 --> 00:04:33,720
for this even and you can turn on I

106
00:04:33,720 --> 00:04:35,759
don't know some test mode and then tell

107
00:04:35,759 --> 00:04:38,400
it to clean and so on and some people on

108
00:04:38,400 --> 00:04:40,740
internet had a really cool idea so they

109
00:04:40,740 --> 00:04:41,580
said

110
00:04:41,580 --> 00:04:43,500
well first of all yeah so that's the

111
00:04:43,500 --> 00:04:45,180
command line to see it

112
00:04:45,180 --> 00:04:46,380
as

113
00:04:46,380 --> 00:04:51,080
it's not so loud right can I

114
00:04:54,720 --> 00:04:57,840
it makes some sense yeah so this is just

115
00:04:57,840 --> 00:05:01,199
an example of the serial interface and

116
00:05:01,199 --> 00:05:03,060
some people on the internet had the nice

117
00:05:03,060 --> 00:05:05,220
idea that even for the non-connected

118
00:05:05,220 --> 00:05:06,840
models that don't have any Cloud

119
00:05:06,840 --> 00:05:08,940
connection you can make them connected

120
00:05:08,940 --> 00:05:11,340
to your own home iot

121
00:05:11,340 --> 00:05:13,560
and they have this cool project here on

122
00:05:13,560 --> 00:05:15,979
GitHub where you just Soldier on an

123
00:05:15,979 --> 00:05:19,320
esp32 to your robot and then connect it

124
00:05:19,320 --> 00:05:22,520
to your home Wi-Fi and your home iot

125
00:05:22,520 --> 00:05:24,960
directly on your own control with all

126
00:05:24,960 --> 00:05:26,400
your own scripts and send it to those

127
00:05:26,400 --> 00:05:28,020
commands and with this you can already

128
00:05:28,020 --> 00:05:30,419
do the very basic stuff like you can

129
00:05:30,419 --> 00:05:34,580
start a cleaning cycle for example

130
00:05:34,919 --> 00:05:38,220
uh so it does not only talk to neato's

131
00:05:38,220 --> 00:05:40,080
cloud and I mean you can also do this of

132
00:05:40,080 --> 00:05:42,539
course to the more modern ones that talk

133
00:05:42,539 --> 00:05:44,520
to the cloud you could still use the

134
00:05:44,520 --> 00:05:46,560
serial interface and block out the other

135
00:05:46,560 --> 00:05:47,940
Cloud

136
00:05:47,940 --> 00:05:50,880
um but yeah it's still quite limited and

137
00:05:50,880 --> 00:05:53,820
there is a lot of commands that are

138
00:05:53,820 --> 00:05:56,160
still locked because only a needle can

139
00:05:56,160 --> 00:05:58,440
do the diagnose and repair part and that

140
00:05:58,440 --> 00:06:00,419
stuff that by default cannot be

141
00:06:00,419 --> 00:06:01,639
configured

142
00:06:01,639 --> 00:06:04,680
and these are authorized commands and

143
00:06:04,680 --> 00:06:06,840
those authorized commands they are like

144
00:06:06,840 --> 00:06:08,639
there's a help menu but they are hidden

145
00:06:08,639 --> 00:06:11,220
from The Help menu even so even if you

146
00:06:11,220 --> 00:06:13,680
have a newer robot then you would get

147
00:06:13,680 --> 00:06:15,539
commands but it's not the full command

148
00:06:15,539 --> 00:06:16,820
list

149
00:06:16,820 --> 00:06:21,180
even when you like randomly guess a

150
00:06:21,180 --> 00:06:24,780
command yeah then it would say no I need

151
00:06:24,780 --> 00:06:26,819
a valid key or maybe it's just there's

152
00:06:26,819 --> 00:06:28,740
nothing that depends it's like

153
00:06:28,740 --> 00:06:31,740
handcrafted depending on the uh

154
00:06:31,740 --> 00:06:34,979
um command and then after five failed

155
00:06:34,979 --> 00:06:37,440
attempts even if you would give it the

156
00:06:37,440 --> 00:06:39,960
correct key uh it would just say it was

157
00:06:39,960 --> 00:06:42,000
incorrect so it kind of locks that you

158
00:06:42,000 --> 00:06:44,220
have to reboot then this is reset but it

159
00:06:44,220 --> 00:06:47,699
prevents a bit of the brute forcing

160
00:06:47,699 --> 00:06:50,759
um yeah so I was like okay how can we

161
00:06:50,759 --> 00:06:53,340
look into that well as I said in

162
00:06:53,340 --> 00:06:54,960
previous research

163
00:06:54,960 --> 00:06:58,620
um there was a bypass that I found so

164
00:06:58,620 --> 00:07:03,660
the robot has a bootloader that is so

165
00:07:03,660 --> 00:07:06,360
usually what should happen is that there

166
00:07:06,360 --> 00:07:09,539
is a secure Boot and some certificate

167
00:07:09,539 --> 00:07:11,160
storage somewhere that decrypts the

168
00:07:11,160 --> 00:07:13,380
firmware and then only this firmware can

169
00:07:13,380 --> 00:07:16,259
boot but before there is a bootloader

170
00:07:16,259 --> 00:07:19,740
and in this bootloader you can also at

171
00:07:19,740 --> 00:07:22,500
least in the old one upload your own

172
00:07:22,500 --> 00:07:25,139
film there and this is the included from

173
00:07:25,139 --> 00:07:27,840
RAM and what I did was I sent another

174
00:07:27,840 --> 00:07:30,000
firmware image that is just loaded to

175
00:07:30,000 --> 00:07:31,620
another address in memory as the

176
00:07:31,620 --> 00:07:34,080
original film there and I just rebooted

177
00:07:34,080 --> 00:07:36,120
it and the ram is not reset so you can

178
00:07:36,120 --> 00:07:38,280
just reboot and then read from the other

179
00:07:38,280 --> 00:07:40,319
memory range what is still there from

180
00:07:40,319 --> 00:07:42,780
the booted image it doesn't give you

181
00:07:42,780 --> 00:07:45,120
exactly an image that will still be good

182
00:07:45,120 --> 00:07:46,740
because there's some Flex that

183
00:07:46,740 --> 00:07:48,419
differently after booting in the image

184
00:07:48,419 --> 00:07:50,460
but it is sufficient to unpack all the

185
00:07:50,460 --> 00:07:54,479
files on it and so I had the firmware uh

186
00:07:54,479 --> 00:07:57,120
lying around just from this attack

187
00:07:57,120 --> 00:07:59,460
and yeah that's enough to then look into

188
00:07:59,460 --> 00:08:02,780
the key commands

189
00:08:02,940 --> 00:08:05,580
and basically this is where I came in

190
00:08:05,580 --> 00:08:07,800
and I started looking at this firmware

191
00:08:07,800 --> 00:08:10,500
and trying to figure out what those keys

192
00:08:10,500 --> 00:08:13,500
are just as was uh just ask me like hey

193
00:08:13,500 --> 00:08:15,180
how does that work

194
00:08:15,180 --> 00:08:16,620
um what's what's happening behind the

195
00:08:16,620 --> 00:08:18,599
scenes there and I I can't keep my hands

196
00:08:18,599 --> 00:08:21,840
off some firmware so I started loading

197
00:08:21,840 --> 00:08:24,919
it up in my favorite disassembler and

198
00:08:24,919 --> 00:08:28,139
starting to take a look so I'll just

199
00:08:28,139 --> 00:08:29,639
guide you through some of the steps that

200
00:08:29,639 --> 00:08:31,139
I did there

201
00:08:31,139 --> 00:08:33,360
um just live right now here so and

202
00:08:33,360 --> 00:08:35,640
explain some of my process like as I go

203
00:08:35,640 --> 00:08:37,200
along

204
00:08:37,200 --> 00:08:39,120
please

205
00:08:39,120 --> 00:08:41,039
so

206
00:08:41,039 --> 00:08:43,860
we'll start out just by the the blank

207
00:08:43,860 --> 00:08:45,660
firmware no reverse engineering done on

208
00:08:45,660 --> 00:08:47,399
this before here

209
00:08:47,399 --> 00:08:49,320
um there are some things that are

210
00:08:49,320 --> 00:08:50,940
changed in here just so that we don't

211
00:08:50,940 --> 00:08:52,980
make any key material

212
00:08:52,980 --> 00:08:55,620
um but apart from that it's pretty much

213
00:08:55,620 --> 00:08:58,680
just what we thought of the robot

214
00:08:58,680 --> 00:09:00,839
so we'll start out by just opening this

215
00:09:00,839 --> 00:09:04,680
in in binary ninja if we open it it'll

216
00:09:04,680 --> 00:09:07,260
just help us put us and it'll take a

217
00:09:07,260 --> 00:09:09,360
second to analyze and maybe you remember

218
00:09:09,360 --> 00:09:12,300
that we talked about there was a

219
00:09:12,300 --> 00:09:15,079
message

220
00:09:17,580 --> 00:09:19,620
is you you probably can't can't read

221
00:09:19,620 --> 00:09:20,880
this right

222
00:09:20,880 --> 00:09:24,380
so yeah I can

223
00:09:28,080 --> 00:09:31,320
okay I'll just one one second

224
00:09:31,320 --> 00:09:34,100
use scale

225
00:09:42,720 --> 00:09:45,420
there you go

226
00:09:45,420 --> 00:09:47,899
please

227
00:09:56,519 --> 00:09:59,160
so maybe maybe this is more readable for

228
00:09:59,160 --> 00:10:02,300
everyone here is that better

229
00:10:03,540 --> 00:10:06,500
there it is

230
00:10:07,560 --> 00:10:10,740
wonderful okay so maybe you remembered

231
00:10:10,740 --> 00:10:12,899
uh there was an error message that was

232
00:10:12,899 --> 00:10:14,700
uh that was displayed that was created

233
00:10:14,700 --> 00:10:17,279
by the robot when you type in an invalid

234
00:10:17,279 --> 00:10:19,500
security key you just hit invalid

235
00:10:19,500 --> 00:10:21,660
security key so that's a really good

236
00:10:21,660 --> 00:10:24,000
starting point because

237
00:10:24,000 --> 00:10:25,980
well if we figure out where that's

238
00:10:25,980 --> 00:10:27,779
printed we'll figure out where the

239
00:10:27,779 --> 00:10:29,700
security key is checked so I'll just

240
00:10:29,700 --> 00:10:32,160
type search in the strings invalid

241
00:10:32,160 --> 00:10:35,640
security key I'll find that and I'll

242
00:10:35,640 --> 00:10:37,800
find a memory here I'll cross reference

243
00:10:37,800 --> 00:10:40,140
where that's being used and if I look

244
00:10:40,140 --> 00:10:42,480
where that's being used I can see here

245
00:10:42,480 --> 00:10:44,339
this seems to be printing invalid

246
00:10:44,339 --> 00:10:46,560
security key so let's follow up where

247
00:10:46,560 --> 00:10:47,940
that's being printed that's being

248
00:10:47,940 --> 00:10:50,519
printed here to an r0

249
00:10:50,519 --> 00:10:52,560
and our zero the return value of this

250
00:10:52,560 --> 00:10:53,880
function

251
00:10:53,880 --> 00:10:55,079
so

252
00:10:55,079 --> 00:10:56,880
this function obviously is something

253
00:10:56,880 --> 00:10:59,940
like check secure it I can can't see

254
00:10:59,940 --> 00:11:01,920
underneath my the microphone so smooth

255
00:11:01,920 --> 00:11:03,660
just like this I hope you can still hear

256
00:11:03,660 --> 00:11:05,160
me well

257
00:11:05,160 --> 00:11:08,760
I'll just call this check security key

258
00:11:08,760 --> 00:11:10,980
yeah perfect

259
00:11:10,980 --> 00:11:13,560
um so like this we can already find the

260
00:11:13,560 --> 00:11:15,120
interesting functionality and when we

261
00:11:15,120 --> 00:11:16,920
look in there this thing is pretty

262
00:11:16,920 --> 00:11:19,500
interesting we have a loop here and that

263
00:11:19,500 --> 00:11:22,620
Loop here does some string comparisons

264
00:11:22,620 --> 00:11:25,440
this first string comparison seems to be

265
00:11:25,440 --> 00:11:27,480
looking at a structure that's of size OS

266
00:11:27,480 --> 00:11:30,060
24 because we increase that every time

267
00:11:30,060 --> 00:11:31,620
we iterate through the loop and there is

268
00:11:31,620 --> 00:11:34,380
a loop counter here that exits when we

269
00:11:34,380 --> 00:11:36,420
hit five so we seem to have five

270
00:11:36,420 --> 00:11:38,820
different structures here that are half

271
00:11:38,820 --> 00:11:41,640
size of x24 so let's look at go ahead

272
00:11:41,640 --> 00:11:43,440
and look at where this comes from

273
00:11:43,440 --> 00:11:45,779
if we go here

274
00:11:45,779 --> 00:11:48,300
we can start seeing there's apparently

275
00:11:48,300 --> 00:11:50,579
some data here so let's investigate that

276
00:11:50,579 --> 00:11:52,620
we'll start out by defining the

277
00:11:52,620 --> 00:11:54,839
structure and calling saying okay we

278
00:11:54,839 --> 00:11:57,720
know it's always 24 big

279
00:11:57,720 --> 00:12:01,140
and then we can also just tell binary

280
00:12:01,140 --> 00:12:03,180
ninja that the data here is of that

281
00:12:03,180 --> 00:12:05,100
structure and then we have five of them

282
00:12:05,100 --> 00:12:07,560
so I'll just say that and then with the

283
00:12:07,560 --> 00:12:09,300
next thing you can see is there seem to

284
00:12:09,300 --> 00:12:10,980
be two things at the beginning of the

285
00:12:10,980 --> 00:12:13,560
structures that look like launchers

286
00:12:13,560 --> 00:12:15,720
so I'll start out with telling I mean

287
00:12:15,720 --> 00:12:17,880
hey there's a pointer here and when I do

288
00:12:17,880 --> 00:12:20,040
that it dereferences it and we can see

289
00:12:20,040 --> 00:12:22,440
there is some string data here so let's

290
00:12:22,440 --> 00:12:25,440
go ahead and say okay this is a

291
00:12:25,440 --> 00:12:28,339
sharp pointer

292
00:12:29,040 --> 00:12:31,440
and the next thing just assuming that's

293
00:12:31,440 --> 00:12:33,779
also going to be the chart pointer so

294
00:12:33,779 --> 00:12:36,120
I'll just also call this a chart pointer

295
00:12:36,120 --> 00:12:38,459
and then there's also some other string

296
00:12:38,459 --> 00:12:40,200
data at that address

297
00:12:40,200 --> 00:12:41,760
the rest of the interesting the

298
00:12:41,760 --> 00:12:43,800
interesting data doesn't look that uh

299
00:12:43,800 --> 00:12:46,079
interesting here for us but this already

300
00:12:46,079 --> 00:12:48,540
helps us understand a bit okay we only

301
00:12:48,540 --> 00:12:51,420
have these five things they have some

302
00:12:51,420 --> 00:12:53,279
some things at the beginning called

303
00:12:53,279 --> 00:12:57,300
looking like default ID set QA State set

304
00:12:57,300 --> 00:12:59,880
manufacturing code command line service

305
00:12:59,880 --> 00:13:03,060
or manual Drive view so these these

306
00:13:03,060 --> 00:13:04,380
identifiers seem to be something that

307
00:13:04,380 --> 00:13:06,320
are that are important or maybe

308
00:13:06,320 --> 00:13:08,760
categories of keys that we can use for

309
00:13:08,760 --> 00:13:11,279
different functionality

310
00:13:11,279 --> 00:13:14,220
so looking further down we can see that

311
00:13:14,220 --> 00:13:15,660
there are two different cases that which

312
00:13:15,660 --> 00:13:17,519
this function could return remember this

313
00:13:17,519 --> 00:13:18,839
is the function that checks the security

314
00:13:18,839 --> 00:13:21,839
key and it will return zero

315
00:13:21,839 --> 00:13:26,519
we will be printing that error message

316
00:13:26,519 --> 00:13:29,040
so we don't want to return zero so there

317
00:13:29,040 --> 00:13:31,860
is a branch here in which case we will

318
00:13:31,860 --> 00:13:32,959
not be

319
00:13:32,959 --> 00:13:36,319
sending zero

320
00:13:36,420 --> 00:13:39,899
so this is so this this is conditional

321
00:13:39,899 --> 00:13:42,600
on another string comparison

322
00:13:42,600 --> 00:13:46,680
again here hit different syntax left

323
00:13:46,680 --> 00:13:48,540
shift by two that's a multiplication by

324
00:13:48,540 --> 00:13:49,380
four

325
00:13:49,380 --> 00:13:50,880
and then there's another multiplication

326
00:13:50,880 --> 00:13:53,279
by nine if we do four times nine we get

327
00:13:53,279 --> 00:13:56,760
oh it's 24 and X so again we're looking

328
00:13:56,760 --> 00:13:58,500
at the structure and if we look at where

329
00:13:58,500 --> 00:14:01,019
this address points that just points us

330
00:14:01,019 --> 00:14:02,100
into the

331
00:14:02,100 --> 00:14:04,139
into these zero bytes that we have in

332
00:14:04,139 --> 00:14:06,120
our structures so we're comparing the

333
00:14:06,120 --> 00:14:09,180
data that is at these zero bytes here

334
00:14:09,180 --> 00:14:12,600
to Something That We're inputting

335
00:14:12,600 --> 00:14:14,399
and we're doing a case insensitive

336
00:14:14,399 --> 00:14:17,519
comparison so for some reason this looks

337
00:14:17,519 --> 00:14:18,800
a lot like

338
00:14:18,800 --> 00:14:21,420
this area in memory is what we'll be

339
00:14:21,420 --> 00:14:23,279
building our key the key that we will

340
00:14:23,279 --> 00:14:24,420
check against

341
00:14:24,420 --> 00:14:26,279
so

342
00:14:26,279 --> 00:14:28,440
when I saw this I thought like well that

343
00:14:28,440 --> 00:14:30,540
can't be right I mean the keys can't all

344
00:14:30,540 --> 00:14:34,079
just be zeros and crying that out yeah

345
00:14:34,079 --> 00:14:36,779
it didn't work so something must be

346
00:14:36,779 --> 00:14:38,760
writing to that memory to make sure to

347
00:14:38,760 --> 00:14:41,339
tell us you know this is what the key

348
00:14:41,339 --> 00:14:43,380
where is this key calculated when is it

349
00:14:43,380 --> 00:14:45,360
puts into memory and this is this is

350
00:14:45,360 --> 00:14:47,459
what we'll look at now

351
00:14:47,459 --> 00:14:50,040
so again we're going to just look at

352
00:14:50,040 --> 00:14:52,079
what else is accessing this memory and

353
00:14:52,079 --> 00:14:54,180
there's a couple of other places

354
00:14:54,180 --> 00:14:57,120
one of them is this place and

355
00:14:57,120 --> 00:14:59,579
this place is just digging down some

356
00:14:59,579 --> 00:15:02,279
some further functions we can go up here

357
00:15:02,279 --> 00:15:05,459
again we see some we see a loop

358
00:15:05,459 --> 00:15:08,220
with a times nine and the left just by

359
00:15:08,220 --> 00:15:09,120
two

360
00:15:09,120 --> 00:15:12,660
accessing this memory so again we are

361
00:15:12,660 --> 00:15:14,820
we're creating we're accessing each of

362
00:15:14,820 --> 00:15:17,040
these structures and accessing the the

363
00:15:17,040 --> 00:15:19,199
empty space in each of those structures

364
00:15:19,199 --> 00:15:20,699
and then we're calling a function on

365
00:15:20,699 --> 00:15:22,199
that and if we look in that function

366
00:15:22,199 --> 00:15:24,060
that has some really interesting print

367
00:15:24,060 --> 00:15:26,000
uh log Prince message

368
00:15:26,000 --> 00:15:29,220
here it says do encryption so this is

369
00:15:29,220 --> 00:15:30,300
the juicy bit

370
00:15:30,300 --> 00:15:33,060
so just by going on and following the

371
00:15:33,060 --> 00:15:36,600
data flow from our error message all the

372
00:15:36,600 --> 00:15:39,300
way to what else is accessing that

373
00:15:39,300 --> 00:15:41,880
memory we can figure out this is the

374
00:15:41,880 --> 00:15:43,500
juicy bit this is where the cryptography

375
00:15:43,500 --> 00:15:46,320
happens and this is what we want to

376
00:15:46,320 --> 00:15:48,500
understand

377
00:15:49,680 --> 00:15:52,199
and looking further we can see that

378
00:15:52,199 --> 00:15:54,180
there is a debug print which prints a

379
00:15:54,180 --> 00:15:56,100
robot serial number and if you look at

380
00:15:56,100 --> 00:15:57,959
the logs through the serial number

381
00:15:57,959 --> 00:15:59,399
you'll see that the serial number is

382
00:15:59,399 --> 00:16:00,839
actually in the MAC address

383
00:16:00,839 --> 00:16:01,860
that

384
00:16:01,860 --> 00:16:04,260
pointed out is different for every robot

385
00:16:04,260 --> 00:16:06,480
that's so they're reusing the MAC

386
00:16:06,480 --> 00:16:08,160
address here and this macro address is

387
00:16:08,160 --> 00:16:10,500
being put in is somehow being used in

388
00:16:10,500 --> 00:16:13,519
this cryptography

389
00:16:14,459 --> 00:16:16,139
going further we see two different

390
00:16:16,139 --> 00:16:18,060
functions that which we we didn't don't

391
00:16:18,060 --> 00:16:19,980
understand yet and then there's an S

392
00:16:19,980 --> 00:16:23,760
printf which is targeting the output

393
00:16:23,760 --> 00:16:25,620
it's the following following the the

394
00:16:25,620 --> 00:16:27,120
arguments that are put into this

395
00:16:27,120 --> 00:16:30,120
function you can see this has printf

396
00:16:30,120 --> 00:16:31,399
is

397
00:16:31,399 --> 00:16:34,199
hex printing something

398
00:16:34,199 --> 00:16:37,139
and it's xorring something here

399
00:16:37,139 --> 00:16:39,000
and it's excellent and the thing that is

400
00:16:39,000 --> 00:16:41,459
xoring so let's just check out what it

401
00:16:41,459 --> 00:16:43,079
could be xoring this is the serial

402
00:16:43,079 --> 00:16:45,120
number

403
00:16:45,120 --> 00:16:47,699
and just following that okay it's

404
00:16:47,699 --> 00:16:51,360
xorring the serial number at

405
00:16:51,360 --> 00:16:55,199
some of some offset I or some

406
00:16:55,199 --> 00:16:57,180
the The Ice character of each serial

407
00:16:57,180 --> 00:16:59,600
number is xoring that puts something

408
00:16:59,600 --> 00:17:03,620
that we have on the stack here

409
00:17:04,079 --> 00:17:06,720
and this is this is just a decompilation

410
00:17:06,720 --> 00:17:09,119
error what we will see in the end is

411
00:17:09,119 --> 00:17:12,780
this is basically this variable which is

412
00:17:12,780 --> 00:17:14,699
on the stack which is calculated by

413
00:17:14,699 --> 00:17:17,160
these two these two functions

414
00:17:17,160 --> 00:17:20,099
so basically we're doing some some setup

415
00:17:20,099 --> 00:17:22,559
and we're xoring that with the robot's

416
00:17:22,559 --> 00:17:25,319
Mac address and then we're printing that

417
00:17:25,319 --> 00:17:28,260
out as hex and then finally

418
00:17:28,260 --> 00:17:30,299
we're also appending a specific

419
00:17:30,299 --> 00:17:32,460
character just to the end

420
00:17:32,460 --> 00:17:34,620
maybe I could check some so this is some

421
00:17:34,620 --> 00:17:36,660
end rolls and roll stuff that we're just

422
00:17:36,660 --> 00:17:38,280
looking at here

423
00:17:38,280 --> 00:17:41,580
so looking looking further down

424
00:17:41,580 --> 00:17:43,440
we just kept all these two functions so

425
00:17:43,440 --> 00:17:46,940
let's let's take a closer look at those

426
00:17:48,660 --> 00:17:51,539
so the first one basically has some Loop

427
00:17:51,539 --> 00:17:54,419
it has it does it does some just some

428
00:17:54,419 --> 00:17:56,220
division

429
00:17:56,220 --> 00:17:59,220
um if we would requesting the review

430
00:17:59,220 --> 00:18:02,340
that further we would see that as a as a

431
00:18:02,340 --> 00:18:05,160
modulo and the other one

432
00:18:05,160 --> 00:18:07,980
to go in there that basically also has

433
00:18:07,980 --> 00:18:09,480
two Loops that

434
00:18:09,480 --> 00:18:12,179
or after each other I'm not going to go

435
00:18:12,179 --> 00:18:13,559
into too much detail because I'll

436
00:18:13,559 --> 00:18:16,620
explain that these functions closely but

437
00:18:16,620 --> 00:18:18,360
right now I'm looking at these and I say

438
00:18:18,360 --> 00:18:20,460
like what the hell is this I I have no

439
00:18:20,460 --> 00:18:21,419
clue I

440
00:18:21,419 --> 00:18:23,880
photographer I don't even recognize most

441
00:18:23,880 --> 00:18:25,380
crypto when I'm reverse engineering

442
00:18:25,380 --> 00:18:27,240
things because I have signatures that

443
00:18:27,240 --> 00:18:31,340
tell me this sometimes so

444
00:18:31,440 --> 00:18:33,000
I'm confused

445
00:18:33,000 --> 00:18:36,240
and with that I decide that well this is

446
00:18:36,240 --> 00:18:37,740
where the logic is I know what's going

447
00:18:37,740 --> 00:18:39,840
into it I know it's the MAC address

448
00:18:39,840 --> 00:18:42,480
that's going into it and it's the key or

449
00:18:42,480 --> 00:18:44,640
it's the the other parts following that

450
00:18:44,640 --> 00:18:46,440
following that that's going into this

451
00:18:46,440 --> 00:18:49,020
function the other information is coming

452
00:18:49,020 --> 00:18:50,160
from

453
00:18:50,160 --> 00:18:53,460
this second feels which is apparently

454
00:18:53,460 --> 00:18:56,100
some some initialization data that goes

455
00:18:56,100 --> 00:18:58,020
into so I know the input the only inputs

456
00:18:58,020 --> 00:19:00,059
I'm looking at is some static data

457
00:19:00,059 --> 00:19:02,520
that's in this binary right now here

458
00:19:02,520 --> 00:19:04,020
I've replaced that with a few other

459
00:19:04,020 --> 00:19:07,140
values just to go not like that

460
00:19:07,140 --> 00:19:09,299
um and there's some other information

461
00:19:09,299 --> 00:19:11,520
which is the MAC address these are the

462
00:19:11,520 --> 00:19:13,140
only two inputs that are going into this

463
00:19:13,140 --> 00:19:16,020
cryptography and then out of that I'm

464
00:19:16,020 --> 00:19:18,539
getting some some key that is string

465
00:19:18,539 --> 00:19:19,860
compared against

466
00:19:19,860 --> 00:19:22,140
so with that I don't know

467
00:19:22,140 --> 00:19:25,380
let's let's try to build a key gen and

468
00:19:25,380 --> 00:19:27,360
try to figure out how we can find those

469
00:19:27,360 --> 00:19:30,120
secure keys

470
00:19:30,120 --> 00:19:32,719
so

471
00:19:33,720 --> 00:19:35,580
one the first thing that comes to mind

472
00:19:35,580 --> 00:19:36,900
when looking at firmware and there's

473
00:19:36,900 --> 00:19:39,000
some interesting functionality that you

474
00:19:39,000 --> 00:19:41,460
know you can trigger is how about we can

475
00:19:41,460 --> 00:19:43,320
run it in an emulator

476
00:19:43,320 --> 00:19:44,340
and

477
00:19:44,340 --> 00:19:46,740
um so one thing about me is I'm lazy I

478
00:19:46,740 --> 00:19:48,780
don't like implementing emulators all

479
00:19:48,780 --> 00:19:50,280
over again when I'm just looking at a

480
00:19:50,280 --> 00:19:52,700
small thing it's tedious you have to

481
00:19:52,700 --> 00:19:55,700
sometimes Implement memory mapping

482
00:19:55,700 --> 00:19:58,020
implements all kinds of implemental

483
00:19:58,020 --> 00:19:59,760
loader all that all those kinds of

484
00:19:59,760 --> 00:20:01,380
things and I was feeling lazy I didn't

485
00:20:01,380 --> 00:20:03,480
want to do that so I'm not going to

486
00:20:03,480 --> 00:20:05,880
improvis an emulator today how about I

487
00:20:05,880 --> 00:20:07,200
just re-implement the whole thing I take

488
00:20:07,200 --> 00:20:10,320
the the lifted

489
00:20:10,320 --> 00:20:11,600
um

490
00:20:11,600 --> 00:20:14,220
decompulation and just take that and

491
00:20:14,220 --> 00:20:16,260
rewrite it in Python

492
00:20:16,260 --> 00:20:17,820
I did that

493
00:20:17,820 --> 00:20:20,940
didn't work was gave me wrong results so

494
00:20:20,940 --> 00:20:22,559
I did something wrong apparently there

495
00:20:22,559 --> 00:20:23,520
as well

496
00:20:23,520 --> 00:20:24,660
so

497
00:20:24,660 --> 00:20:27,419
and I sat down and felt like well

498
00:20:27,419 --> 00:20:30,299
what can I do now and then you know what

499
00:20:30,299 --> 00:20:33,059
how about I do a bit of both

500
00:20:33,059 --> 00:20:36,480
I'll run it in an emulator

501
00:20:36,480 --> 00:20:39,059
um and but only the bits that I'm

502
00:20:39,059 --> 00:20:40,740
interested in I'm not gonna I care about

503
00:20:40,740 --> 00:20:42,000
all the rest

504
00:20:42,000 --> 00:20:43,380
so

505
00:20:43,380 --> 00:20:46,020
lazy me said you know what I'll just

506
00:20:46,020 --> 00:20:48,240
copy paste the disassembly into a file

507
00:20:48,240 --> 00:20:50,940
like this I'll rename the functions and

508
00:20:50,940 --> 00:20:52,500
I by the time I understood that one

509
00:20:52,500 --> 00:20:54,299
function that starts swapping the pros

510
00:20:54,299 --> 00:20:56,820
in some table

511
00:20:56,820 --> 00:20:59,039
and I just copy pasted it I changed the

512
00:20:59,039 --> 00:21:02,100
loop targets and the label and made the

513
00:21:02,100 --> 00:21:03,539
labels in here

514
00:21:03,539 --> 00:21:05,940
copy the other function that was doing

515
00:21:05,940 --> 00:21:08,039
something that looked like shuffling I

516
00:21:08,039 --> 00:21:09,900
didn't know what it does so

517
00:21:09,900 --> 00:21:12,720
yeah again I just changed the things

518
00:21:12,720 --> 00:21:15,240
that look like jumps to not have

519
00:21:15,240 --> 00:21:17,820
addresses but labels in there

520
00:21:17,820 --> 00:21:20,400
and then I wrote some C code

521
00:21:20,400 --> 00:21:22,799
and the C code basically does this is

522
00:21:22,799 --> 00:21:25,380
just uh do encryption function has um

523
00:21:25,380 --> 00:21:28,320
some of the table up there

524
00:21:28,320 --> 00:21:30,960
it takes the MAC address from standard

525
00:21:30,960 --> 00:21:33,840
from as an argument

526
00:21:33,840 --> 00:21:35,460
and then I just call these two functions

527
00:21:35,460 --> 00:21:39,070
after each other I do the

528
00:21:39,070 --> 00:21:41,820
[Music]

529
00:21:41,820 --> 00:21:43,919
copy over the last of that bite at that

530
00:21:43,919 --> 00:21:46,320
at that point and end it

531
00:21:46,320 --> 00:21:48,960
and then you know what this works I

532
00:21:48,960 --> 00:21:50,820
compiled this together I linked it these

533
00:21:50,820 --> 00:21:52,799
two files together I ran it on an arm

534
00:21:52,799 --> 00:21:55,440
machine it just works I ran it under qmu

535
00:21:55,440 --> 00:21:59,400
user mode it works so I had my I had my

536
00:21:59,400 --> 00:22:01,020
functioning heater

537
00:22:01,020 --> 00:22:03,179
but I just still didn't understand what

538
00:22:03,179 --> 00:22:04,799
these functions are

539
00:22:04,799 --> 00:22:06,720
still actually confused

540
00:22:06,720 --> 00:22:09,900
and then I thought like hmm

541
00:22:09,900 --> 00:22:13,380
I could start debugging this code yeah

542
00:22:13,380 --> 00:22:15,480
yeah I'm not I'm too lazy to attach to

543
00:22:15,480 --> 00:22:16,919
the Parker I'm just going to put print

544
00:22:16,919 --> 00:22:19,820
up all over the place

545
00:22:20,880 --> 00:22:22,559
and I wrote these two little functions

546
00:22:22,559 --> 00:22:24,360
which are basically princess that I can

547
00:22:24,360 --> 00:22:26,640
call and call from from the from the

548
00:22:26,640 --> 00:22:28,860
assembly and I put them in there and I

549
00:22:28,860 --> 00:22:29,940
compared it with my python

550
00:22:29,940 --> 00:22:31,460
implementation

551
00:22:31,460 --> 00:22:34,799
and I tweaked that until I got the same

552
00:22:34,799 --> 00:22:37,679
thing in every iteration

553
00:22:37,679 --> 00:22:39,720
um just I guess maybe just using a

554
00:22:39,720 --> 00:22:42,240
debugger would have been faster but um

555
00:22:42,240 --> 00:22:45,179
this was crazy

556
00:22:45,179 --> 00:22:48,179
and then in the end I had a pure python

557
00:22:48,179 --> 00:22:50,100
implementation of the cryptography just

558
00:22:50,100 --> 00:22:53,340
a function that gave me the same results

559
00:22:53,340 --> 00:22:55,320
and I thought like well

560
00:22:55,320 --> 00:22:58,320
they kind of invented this right

561
00:22:58,320 --> 00:23:00,780
I didn't recognize it I'd have no I had

562
00:23:00,780 --> 00:23:04,260
no clue what what it was so

563
00:23:04,260 --> 00:23:07,740
maybe some some other people do

564
00:23:07,740 --> 00:23:10,520
have some friends

565
00:23:12,600 --> 00:23:17,360
she said yeah they said this somewhere

566
00:23:19,140 --> 00:23:23,120
yeah does anyone recognize this

567
00:23:23,820 --> 00:23:26,960
okay a couple of you

568
00:23:28,620 --> 00:23:31,380
type this into IRC paste it

569
00:23:31,380 --> 00:23:34,020
um does anyone recognize that crypto

570
00:23:34,020 --> 00:23:35,280
so

571
00:23:35,280 --> 00:23:37,140
oh yeah didn't take long someone

572
00:23:37,140 --> 00:23:39,600
answered that's rc4

573
00:23:39,600 --> 00:23:40,260
um

574
00:23:40,260 --> 00:23:43,440
said yeah thanks okay I guess I reverse

575
00:23:43,440 --> 00:23:46,559
engineered and re-implemented rcc4

576
00:23:46,559 --> 00:23:50,520
me then yeah well uh other people did

577
00:23:50,520 --> 00:23:52,799
that as well apparently lots of times

578
00:23:52,799 --> 00:23:55,799
and then yeah then then the star pointed

579
00:23:55,799 --> 00:23:58,799
out well that happens all the time

580
00:23:58,799 --> 00:24:00,900
um yeah and that was basically okay

581
00:24:00,900 --> 00:24:04,380
figured out okay there's rc4 static key

582
00:24:04,380 --> 00:24:07,140
just extorted with the MAC address

583
00:24:07,140 --> 00:24:09,059
and that's how we how we figured out

584
00:24:09,059 --> 00:24:11,220
that's how to find those keys so pretty

585
00:24:11,220 --> 00:24:13,080
straightforward from there on so with

586
00:24:13,080 --> 00:24:17,059
that what can we do with this now

587
00:24:20,340 --> 00:24:22,620
so yeah the idea is have to have all

588
00:24:22,620 --> 00:24:24,240
right yeah

589
00:24:24,240 --> 00:24:26,780
yes

590
00:24:27,360 --> 00:24:31,559
awesome yeah so uh to to no longer have

591
00:24:31,559 --> 00:24:33,720
these wall Gardens because you now can

592
00:24:33,720 --> 00:24:37,820
run like all the commands on the robot

593
00:24:37,820 --> 00:24:40,679
and the first thing I have to tell you

594
00:24:40,679 --> 00:24:42,840
is better have a backup

595
00:24:42,840 --> 00:24:46,559
because like first thing I did was not

596
00:24:46,559 --> 00:24:49,500
making it back up but I still had a few

597
00:24:49,500 --> 00:24:52,440
things up back in my console that helped

598
00:24:52,440 --> 00:24:54,240
me to rescue the robot after changing

599
00:24:54,240 --> 00:24:55,080
settings

600
00:24:55,080 --> 00:24:58,620
uh so if you want to play with this uh

601
00:24:58,620 --> 00:25:02,400
really back up all the settings and uh

602
00:25:02,400 --> 00:25:05,159
maybe don't depend too much on your

603
00:25:05,159 --> 00:25:07,520
robot

604
00:25:08,700 --> 00:25:09,600
um

605
00:25:09,600 --> 00:25:12,480
so yeah there is really all the settings

606
00:25:12,480 --> 00:25:15,539
all the calibration values in there and

607
00:25:15,539 --> 00:25:18,679
it could reset them

608
00:25:19,260 --> 00:25:21,179
oh

609
00:25:21,179 --> 00:25:23,640
then the next thing is

610
00:25:23,640 --> 00:25:25,980
um you can get the Wi-Fi settings and

611
00:25:25,980 --> 00:25:28,559
yeah not too interesting but uh

612
00:25:28,559 --> 00:25:30,360
apparently the

613
00:25:30,360 --> 00:25:33,659
the person who implemented Wi-Fi also

614
00:25:33,659 --> 00:25:35,520
was struggling a lot with setting up

615
00:25:35,520 --> 00:25:39,120
Wi-Fi and so the get Wi-Fi status does

616
00:25:39,120 --> 00:25:43,260
not only have this WPA config but it

617
00:25:43,260 --> 00:25:45,659
also has access to the whole system

618
00:25:45,659 --> 00:25:47,820
so you can see the whole system locked

619
00:25:47,820 --> 00:25:50,640
with the s-lock info command

620
00:25:50,640 --> 00:25:53,760
um but only the last few lines but what

621
00:25:53,760 --> 00:25:55,559
you can do there is it also has a filter

622
00:25:55,559 --> 00:25:57,419
command so you can filter for certain

623
00:25:57,419 --> 00:26:00,059
strings in there and it's really helpful

624
00:26:00,059 --> 00:26:02,580
with debugging so when I mess some

625
00:26:02,580 --> 00:26:05,100
settings up to see where my robot hangs

626
00:26:05,100 --> 00:26:08,418
now this was super helpful

627
00:26:08,940 --> 00:26:13,020
what is okay so this is how the system

628
00:26:13,020 --> 00:26:14,820
locks looks like in the beginning it

629
00:26:14,820 --> 00:26:17,039
does not even have a time when it sets

630
00:26:17,039 --> 00:26:19,440
the time then you can see it connects to

631
00:26:19,440 --> 00:26:21,480
the cloud and so on and in all those

632
00:26:21,480 --> 00:26:23,940
steps if some settings were wrong and it

633
00:26:23,940 --> 00:26:27,600
failed you would like see it directly

634
00:26:27,600 --> 00:26:30,539
and uh yeah so the First Command I tried

635
00:26:30,539 --> 00:26:32,820
was yeah I just reset the settings

636
00:26:32,820 --> 00:26:34,799
because I mean I didn't care about my

637
00:26:34,799 --> 00:26:36,539
cloud connections I was like that can't

638
00:26:36,539 --> 00:26:39,419
break we said oh yeah and

639
00:26:39,419 --> 00:26:41,580
so what do you think happened it just

640
00:26:41,580 --> 00:26:44,520
sets all the values to minus one so not

641
00:26:44,520 --> 00:26:47,760
a default value but -1 and this also

642
00:26:47,760 --> 00:26:49,919
means that the crash now does no longer

643
00:26:49,919 --> 00:26:51,500
go with uh

644
00:26:51,500 --> 00:26:57,120
1400 RPM but it now goes with -1 RPM

645
00:26:57,120 --> 00:26:59,400
which just means it doesn't start

646
00:26:59,400 --> 00:27:01,679
anymore the robot does not even clean

647
00:27:01,679 --> 00:27:04,440
when you say reset all and this is how

648
00:27:04,440 --> 00:27:07,620
you can screw up the robot and um so I

649
00:27:07,620 --> 00:27:11,159
had a get version somewhere back in my

650
00:27:11,159 --> 00:27:13,799
history and also the several of settings

651
00:27:13,799 --> 00:27:16,320
in the database and it was sufficient to

652
00:27:16,320 --> 00:27:18,059
restore the settings to make it clean

653
00:27:18,059 --> 00:27:20,760
again but it was like yes I hacked it oh

654
00:27:20,760 --> 00:27:24,260
no I picked it yeah

655
00:27:24,659 --> 00:27:26,520
um also something that you can do so

656
00:27:26,520 --> 00:27:29,039
there is a different models of the robot

657
00:27:29,039 --> 00:27:32,400
and they also differ in what the

658
00:27:32,400 --> 00:27:34,140
cleaning settings are and like one of

659
00:27:34,140 --> 00:27:35,940
those settings is how much energy is

660
00:27:35,940 --> 00:27:39,240
used for the vacuum power like what is

661
00:27:39,240 --> 00:27:41,340
in the Echo mode what is in the turbo

662
00:27:41,340 --> 00:27:43,380
mods so Echo mode might also just be 50

663
00:27:43,380 --> 00:27:46,320
for example and in the app you can only

664
00:27:46,320 --> 00:27:48,179
set these two settings but not a

665
00:27:48,179 --> 00:27:50,520
percentage of the the cleaning power so

666
00:27:50,520 --> 00:27:52,740
you can change that for example on the

667
00:27:52,740 --> 00:27:55,159
command line

668
00:27:55,559 --> 00:28:00,240
and also something is this animated

669
00:28:00,240 --> 00:28:02,400
why is it

670
00:28:02,400 --> 00:28:03,600
okay anyway

671
00:28:03,600 --> 00:28:05,460
yeah it doesn't matter so there should

672
00:28:05,460 --> 00:28:07,080
be not just a Green Dot button animation

673
00:28:07,080 --> 00:28:09,659
anyway so if you uh you can configure

674
00:28:09,659 --> 00:28:11,580
the Wi-Fi and the best thing about

675
00:28:11,580 --> 00:28:13,620
configuring the Wi-Fi is you can fully

676
00:28:13,620 --> 00:28:16,440
disable the Wi-Fi which also means uh

677
00:28:16,440 --> 00:28:19,260
when your robot reboots and the Wi-Fi is

678
00:28:19,260 --> 00:28:21,179
not set then for half an hour it would

679
00:28:21,179 --> 00:28:23,460
say yeah I'm a needle can you please is

680
00:28:23,460 --> 00:28:26,520
there an app help me and this like just

681
00:28:26,520 --> 00:28:29,820
disabling Wi-Fi is a cool thing

682
00:28:29,820 --> 00:28:32,340
um and also something that I think again

683
00:28:32,340 --> 00:28:33,960
the person who implemented Wi-Fi was

684
00:28:33,960 --> 00:28:35,520
really struggling it has a talented

685
00:28:35,520 --> 00:28:39,179
option and this really means it starts

686
00:28:39,179 --> 00:28:41,640
eternity demon but on Port 23 and I

687
00:28:41,640 --> 00:28:43,559
think on the version of the robot that I

688
00:28:43,559 --> 00:28:46,380
have uh there is no permission to start

689
00:28:46,380 --> 00:28:48,240
something on Port 23 it's no longer

690
00:28:48,240 --> 00:28:50,220
running a suit or something so it didn't

691
00:28:50,220 --> 00:28:53,340
work for me but it might work on some

692
00:28:53,340 --> 00:28:55,860
very old models that haven't seen an

693
00:28:55,860 --> 00:28:58,740
update for a long time I guess uh so

694
00:28:58,740 --> 00:29:01,679
someone had kind of a backdoor to first

695
00:29:01,679 --> 00:29:03,720
of all get Austin's luck with the get

696
00:29:03,720 --> 00:29:05,940
Wi-Fi config and then also do everything

697
00:29:05,940 --> 00:29:10,100
on a shell with the set Wi-Fi

698
00:29:10,380 --> 00:29:12,600
and yeah then there's the next thing

699
00:29:12,600 --> 00:29:14,640
like yeah super fun you can recalibrate

700
00:29:14,640 --> 00:29:16,200
the sensors

701
00:29:16,200 --> 00:29:18,240
um but you should recalibrate the

702
00:29:18,240 --> 00:29:20,760
sensors while the robot is like in a

703
00:29:20,760 --> 00:29:23,340
special box like with special headers

704
00:29:23,340 --> 00:29:25,919
and special distances and if you do this

705
00:29:25,919 --> 00:29:28,980
wrong then your robot pause sensor and

706
00:29:28,980 --> 00:29:30,659
stuff might no longer work it means it

707
00:29:30,659 --> 00:29:33,360
could fall on a person uh but then again

708
00:29:33,360 --> 00:29:35,940
if you do repairs on your robot and do

709
00:29:35,940 --> 00:29:37,799
something on the sensors you might have

710
00:29:37,799 --> 00:29:40,380
to recalibrate them so this this whole

711
00:29:40,380 --> 00:29:41,760
procedure of how you really kind of

712
00:29:41,760 --> 00:29:43,919
created what you need is not documented

713
00:29:43,919 --> 00:29:46,500
and it essentially prevents people from

714
00:29:46,500 --> 00:29:49,440
really repairing the robot so I mean I

715
00:29:49,440 --> 00:29:51,360
now have my calibration values from the

716
00:29:51,360 --> 00:29:53,880
config database and I could probably set

717
00:29:53,880 --> 00:29:57,539
something in that range if it breaks but

718
00:29:57,539 --> 00:29:58,860
it would be nice if there would be

719
00:29:58,860 --> 00:30:01,799
documentation for this whole part of how

720
00:30:01,799 --> 00:30:03,419
to calibrate the sensor on a broken

721
00:30:03,419 --> 00:30:05,880
robot and what is a valid sensor range

722
00:30:05,880 --> 00:30:08,880
for certain sensors

723
00:30:08,880 --> 00:30:11,880
and yeah you can tune your robot you can

724
00:30:11,880 --> 00:30:13,919
just say yes I uh just bought it

725
00:30:13,919 --> 00:30:15,240
yesterday

726
00:30:15,240 --> 00:30:18,960
um so it looks young again

727
00:30:18,960 --> 00:30:19,980
um

728
00:30:19,980 --> 00:30:23,760
and also yeah you can also say we have a

729
00:30:23,760 --> 00:30:25,679
new battery so you might actually leave

730
00:30:25,679 --> 00:30:29,640
it when you put in a new battery or but

731
00:30:29,640 --> 00:30:31,860
yeah you could also say it would have

732
00:30:31,860 --> 00:30:34,799
one I don't know what happens there then

733
00:30:34,799 --> 00:30:37,200
so there's a couple of lessons learned

734
00:30:37,200 --> 00:30:38,760
because software this was just heavy

735
00:30:38,760 --> 00:30:41,299
reverse it we hacked it we set some

736
00:30:41,299 --> 00:30:43,559
conflict stuff but what can we learn

737
00:30:43,559 --> 00:30:47,580
from this so first of all uh modern iot

738
00:30:47,580 --> 00:30:49,500
devices you can still get them under

739
00:30:49,500 --> 00:30:51,539
your control it's just so it's possible

740
00:30:51,539 --> 00:30:54,059
it's just a lot more work

741
00:30:54,059 --> 00:30:55,559
um and

742
00:30:55,559 --> 00:30:58,919
I think I spent more time Unbreaking the

743
00:30:58,919 --> 00:31:01,440
robot than the whole like how do we set

744
00:31:01,440 --> 00:31:04,740
a key so because like it's not working

745
00:31:04,740 --> 00:31:06,659
it's not working and yeah you're just

746
00:31:06,659 --> 00:31:08,460
like you cannot look at anything and

747
00:31:08,460 --> 00:31:11,159
it's just it doesn't start again

748
00:31:11,159 --> 00:31:13,260
um I think on the reset it was not just

749
00:31:13,260 --> 00:31:15,059
the brushes we set but also the whole

750
00:31:15,059 --> 00:31:17,220
manufacturing ID was reset and I don't

751
00:31:17,220 --> 00:31:18,779
know what I I really need to figure out

752
00:31:18,779 --> 00:31:20,880
all the settings and how they go into

753
00:31:20,880 --> 00:31:23,460
the robot and go for the good luck

754
00:31:23,460 --> 00:31:24,059
um

755
00:31:24,059 --> 00:31:27,659
and yeah so Nero says the the buyer

756
00:31:27,659 --> 00:31:29,580
quite high so first of all this connects

757
00:31:29,580 --> 00:31:31,380
I mean it can be secure not so secure

758
00:31:31,380 --> 00:31:32,460
that depends on if your next

759
00:31:32,460 --> 00:31:34,679
configuration but it's a weird operating

760
00:31:34,679 --> 00:31:38,640
system uh not many people know it uh

761
00:31:38,640 --> 00:31:41,340
they protected the interfaces with some

762
00:31:41,340 --> 00:31:43,260
key mechanism everything they have

763
00:31:43,260 --> 00:31:44,880
individual encryption keys for the

764
00:31:44,880 --> 00:31:47,220
robots that I could not just send in my

765
00:31:47,220 --> 00:31:49,440
robot with a fake firmware and stay

766
00:31:49,440 --> 00:31:51,600
connected or I don't know a key logger

767
00:31:51,600 --> 00:31:54,299
or something it wouldn't work so there

768
00:31:54,299 --> 00:31:56,340
is a lot of thoughts in the process of

769
00:31:56,340 --> 00:31:59,539
what they built about it

770
00:31:59,720 --> 00:32:01,880
uh there's also safety Implement

771
00:32:01,880 --> 00:32:04,620
implications so this whole sensor

772
00:32:04,620 --> 00:32:06,659
regular pressure can be really dangerous

773
00:32:06,659 --> 00:32:08,399
if the robot pass on a person for

774
00:32:08,399 --> 00:32:11,159
example but then again it would also be

775
00:32:11,159 --> 00:32:14,100
nice to have precise instructions how to

776
00:32:14,100 --> 00:32:17,279
do the calibration in order to be able

777
00:32:17,279 --> 00:32:20,960
to repair it without needle

778
00:32:21,240 --> 00:32:24,179
and yeah how do we mitigate this I think

779
00:32:24,179 --> 00:32:26,640
a lot of this is common in a lot of iot

780
00:32:26,640 --> 00:32:31,080
products because the security is only

781
00:32:31,080 --> 00:32:34,740
implemented inside the robot so all the

782
00:32:34,740 --> 00:32:36,960
checks like if this is an authorized

783
00:32:36,960 --> 00:32:40,500
command it's only on robot side and yes

784
00:32:40,500 --> 00:32:44,220
the SQL prevents from attacks if you

785
00:32:44,220 --> 00:32:46,320
assume that the firmware

786
00:32:46,320 --> 00:32:49,740
on the devices never ever extracted but

787
00:32:49,740 --> 00:32:52,380
once like even if dating an update or

788
00:32:52,380 --> 00:32:55,200
something let's say there is a qnx Wi-Fi

789
00:32:55,200 --> 00:32:57,179
remote code execution back and someone

790
00:32:57,179 --> 00:32:59,340
gets into the robot gets into the film

791
00:32:59,340 --> 00:33:02,340
there then the same problem could happen

792
00:33:02,340 --> 00:33:04,140
again of course you can put more

793
00:33:04,140 --> 00:33:06,600
obfuscation into it more attacks

794
00:33:06,600 --> 00:33:09,899
stronger crypto but as long as the the

795
00:33:09,899 --> 00:33:12,360
check is only client side you would

796
00:33:12,360 --> 00:33:14,100
always end up with the problem that's

797
00:33:14,100 --> 00:33:15,659
like not just like you need a problem

798
00:33:15,659 --> 00:33:19,799
that's really very general iot device

799
00:33:19,799 --> 00:33:22,320
problem because if you want to make this

800
00:33:22,320 --> 00:33:24,059
secure then you have to build in

801
00:33:24,059 --> 00:33:25,860
something where you store certain

802
00:33:25,860 --> 00:33:27,960
Syndicate certificates and keys and

803
00:33:27,960 --> 00:33:31,019
something like in HSM and then you have

804
00:33:31,019 --> 00:33:33,000
some authorization and then you have

805
00:33:33,000 --> 00:33:36,419
this also on the server side like I

806
00:33:36,419 --> 00:33:37,620
don't know there's server that

807
00:33:37,620 --> 00:33:39,659
authorizes all of this that is going on

808
00:33:39,659 --> 00:33:42,419
uh to really check nothing happens to

809
00:33:42,419 --> 00:33:44,700
the device without the content of the

810
00:33:44,700 --> 00:33:47,460
manufacturer and this is a very big

811
00:33:47,460 --> 00:33:49,860
overhead that is usually not in scope of

812
00:33:49,860 --> 00:33:52,639
an iot product

813
00:33:53,820 --> 00:33:56,460
and yeah so next question is like when

814
00:33:56,460 --> 00:33:58,799
is there the key generator so you saw

815
00:33:58,799 --> 00:34:00,659
those nice things Never Gonna Give You

816
00:34:00,659 --> 00:34:03,120
Up but that's not the real secret stored

817
00:34:03,120 --> 00:34:06,600
in the firmware uh there is others and

818
00:34:06,600 --> 00:34:08,399
uh so the thing is that Neato still

819
00:34:08,399 --> 00:34:10,918
needs to fix this so they also have to

820
00:34:10,918 --> 00:34:13,139
not just roll out and use member but

821
00:34:13,139 --> 00:34:15,359
also all the repair sites need to get

822
00:34:15,359 --> 00:34:18,540
now a new key generator there's new

823
00:34:18,540 --> 00:34:21,119
stuff in there and this is why it might

824
00:34:21,119 --> 00:34:22,739
take I don't know probably three months

825
00:34:22,739 --> 00:34:25,080
maybe a bit more and once they are done

826
00:34:25,080 --> 00:34:27,960
with this we will be able to yeah push

827
00:34:27,960 --> 00:34:30,000
out something that you can generate the

828
00:34:30,000 --> 00:34:32,580
keys that you are willing to stay on an

829
00:34:32,580 --> 00:34:34,859
insecure or somewhere and don't connect

830
00:34:34,859 --> 00:34:37,619
your robots to the cloud so stay tuned

831
00:34:37,619 --> 00:34:39,780
for this uh if you want to hack your

832
00:34:39,780 --> 00:34:42,139
robots

833
00:34:43,440 --> 00:34:45,719
what uh yeah no no there is a special

834
00:34:45,719 --> 00:34:46,800
thanks

835
00:34:46,800 --> 00:34:49,199
page uh so first of all Anita was really

836
00:34:49,199 --> 00:34:51,060
nice during the disclosure and asked a

837
00:34:51,060 --> 00:34:52,800
special like all the stuff that we need

838
00:34:52,800 --> 00:34:56,520
from all the pictures then uh persons on

839
00:34:56,520 --> 00:34:58,680
the internet like the person asking me

840
00:34:58,680 --> 00:35:00,300
like how does this very guy want to

841
00:35:00,300 --> 00:35:02,820
repair my robot and also

842
00:35:02,820 --> 00:35:05,160
and yeah thanks Big thanks to um for

843
00:35:05,160 --> 00:35:07,200
just pointing out a that's rc4 I

844
00:35:07,200 --> 00:35:10,020
wouldn't have guessed that

845
00:35:10,020 --> 00:35:12,300
and I think with that uh we're at the

846
00:35:12,300 --> 00:35:13,500
end of our talk

847
00:35:13,500 --> 00:35:15,960
um and um in case you have any questions

848
00:35:15,960 --> 00:35:17,760
we take

849
00:35:17,760 --> 00:35:20,660
thanks guys

850
00:35:22,320 --> 00:35:25,380
we actually I think first time today we

851
00:35:25,380 --> 00:35:27,359
have about five minutes of questions if

852
00:35:27,359 --> 00:35:29,400
someone has some

853
00:35:29,400 --> 00:35:31,940
yes

854
00:35:38,099 --> 00:35:39,839
and is it possible to run a custom

855
00:35:39,839 --> 00:35:44,180
firmware on the device after you act it

856
00:35:44,420 --> 00:35:48,300
so with the old wooden order patch I

857
00:35:48,300 --> 00:35:51,800
ordered the bootloader Hector like that

858
00:35:54,920 --> 00:35:58,140
so if the uh with the old bootloader

859
00:35:58,140 --> 00:36:00,839
hack that I had yes I'm not sure because

860
00:36:00,839 --> 00:36:04,440
for the new one like the secure boot is

861
00:36:04,440 --> 00:36:07,680
something in that ship so I think you

862
00:36:07,680 --> 00:36:09,660
would have to hack the secure boot of

863
00:36:09,660 --> 00:36:11,400
the ship

864
00:36:11,400 --> 00:36:12,900
um

865
00:36:12,900 --> 00:36:15,060
yeah

866
00:36:15,060 --> 00:36:18,480
maybe if you manage to downgrade to an

867
00:36:18,480 --> 00:36:20,099
older firmware version or something like

868
00:36:20,099 --> 00:36:22,280
that

869
00:36:22,619 --> 00:36:25,619
foreign

870
00:36:30,500 --> 00:36:34,079
yes I'm not I'm not sure if it applies

871
00:36:34,079 --> 00:36:37,140
to this but I think the

872
00:36:37,140 --> 00:36:40,140
um file system you're booted into it's

873
00:36:40,140 --> 00:36:41,820
like read right so if you get code

874
00:36:41,820 --> 00:36:43,500
execution I mean the the command line

875
00:36:43,500 --> 00:36:45,000
interface is more called execution on

876
00:36:45,000 --> 00:36:46,980
the road but it's only the interface but

877
00:36:46,980 --> 00:36:49,680
if you get code execution you can swap

878
00:36:49,680 --> 00:36:51,000
files I think

879
00:36:51,000 --> 00:36:54,060
um yeah it's kind of getting your own

880
00:36:54,060 --> 00:36:55,680
fingers

881
00:36:55,680 --> 00:36:58,320
and yeah just to note none of the um

882
00:36:58,320 --> 00:37:00,300
commands that are available using those

883
00:37:00,300 --> 00:37:01,920
security Keys

884
00:37:01,920 --> 00:37:03,780
um allow you to repeat your own firmware

885
00:37:03,780 --> 00:37:06,420
so those commands that that are

886
00:37:06,420 --> 00:37:09,180
protected like that they as far as we

887
00:37:09,180 --> 00:37:10,200
can see

888
00:37:10,200 --> 00:37:12,960
um they're just for manufacturing and uh

889
00:37:12,960 --> 00:37:15,060
and debugging purposes or repair

890
00:37:15,060 --> 00:37:17,339
purposes so they don't allow you to do

891
00:37:17,339 --> 00:37:18,420
that

892
00:37:18,420 --> 00:37:20,760
so there's like there is a command to

893
00:37:20,760 --> 00:37:22,500
put new firmware onto it but it will

894
00:37:22,500 --> 00:37:24,359
still get checked so this thing you can

895
00:37:24,359 --> 00:37:26,700
like the the firmware made by needto you

896
00:37:26,700 --> 00:37:29,040
can install it

897
00:37:29,040 --> 00:37:31,380
still have a question

898
00:37:31,380 --> 00:37:33,540
do we have any other questions today

899
00:37:33,540 --> 00:37:37,640
okay on the background

900
00:37:45,680 --> 00:37:49,020
given that the c key is actually with

901
00:37:49,020 --> 00:37:51,660
the MAC address the MAC address is

902
00:37:51,660 --> 00:37:55,500
publicly you can decide on the network

903
00:37:55,500 --> 00:37:59,220
um doesn't that mean once you have one

904
00:37:59,220 --> 00:38:01,800
device that means essentially you can

905
00:38:01,800 --> 00:38:04,140
discover you have the secret key you

906
00:38:04,140 --> 00:38:05,880
could get the secret key for any device

907
00:38:05,880 --> 00:38:08,579
at all yes just being by on the same

908
00:38:08,579 --> 00:38:11,520
network as that of us yes uh if you had

909
00:38:11,520 --> 00:38:14,040
a valid secret key then yes you could do

910
00:38:14,040 --> 00:38:16,140
that you could discover the

911
00:38:16,140 --> 00:38:19,859
the value that the host rc4

912
00:38:19,859 --> 00:38:22,200
right and then you could just ignore

913
00:38:22,200 --> 00:38:24,060
that and you would you would be able to

914
00:38:24,060 --> 00:38:24,960
find

915
00:38:24,960 --> 00:38:27,060
um the constant secret which is the same

916
00:38:27,060 --> 00:38:29,280
for all robots yes but the the issue is

917
00:38:29,280 --> 00:38:31,800
here there's um those uh secret keys

918
00:38:31,800 --> 00:38:34,140
aren't given out to anyone so let me do

919
00:38:34,140 --> 00:38:37,879
the pressure stocks have those in you

920
00:38:38,839 --> 00:38:41,520
and also all the secret keys are going

921
00:38:41,520 --> 00:38:43,859
to be related because the IEEE hands out

922
00:38:43,859 --> 00:38:45,960
the manufacturing code to Nido and so

923
00:38:45,960 --> 00:38:48,119
small only the bottom bikes are going to

924
00:38:48,119 --> 00:38:50,720
change yeah

925
00:38:53,300 --> 00:38:55,800
last question

926
00:38:55,800 --> 00:38:58,140
is this

927
00:38:58,140 --> 00:39:03,060
yeah was there were signed or somehow

928
00:39:03,060 --> 00:39:03,960
it's

929
00:39:03,960 --> 00:39:06,359
checklist checks yes so yeah the

930
00:39:06,359 --> 00:39:08,280
firmware blog is signed and encrypted so

931
00:39:08,280 --> 00:39:10,020
from the firmware blog itself you cannot

932
00:39:10,020 --> 00:39:12,420
get anything there is I think some web

933
00:39:12,420 --> 00:39:13,859
blobs on the internet because you can

934
00:39:13,859 --> 00:39:15,839
intercept the URL and the app updates

935
00:39:15,839 --> 00:39:17,579
the robot

936
00:39:17,579 --> 00:39:21,420
um but they are encrypted for the key in

937
00:39:21,420 --> 00:39:25,339
the security group so for the foreign

938
00:39:26,359 --> 00:39:28,500
and that's why you need an attack like

939
00:39:28,500 --> 00:39:30,540
the one that I said in the bootloader

940
00:39:30,540 --> 00:39:32,060
that you have something

941
00:39:32,060 --> 00:39:36,720
and while you were debugging the rc4 you

942
00:39:36,720 --> 00:39:40,079
said that you put some print apps inside

943
00:39:40,079 --> 00:39:42,900
yes so how you did the did you patch the

944
00:39:42,900 --> 00:39:45,900
firmware it was no uh again I copied and

945
00:39:45,900 --> 00:39:49,680
pasted the disassembly from that into a

946
00:39:49,680 --> 00:39:52,500
into an assembly file and I ran this on

947
00:39:52,500 --> 00:39:55,020
my computer or well I ran it on an armed

948
00:39:55,020 --> 00:39:57,119
computer which isn't fine right now but

949
00:39:57,119 --> 00:40:00,540
yes so I so I guess this is a cheap

950
00:40:00,540 --> 00:40:03,420
re-hosting by just copy pasting the code

951
00:40:03,420 --> 00:40:05,940
okay

952
00:40:05,940 --> 00:40:08,820
okay thank you guys uh give it a warm

953
00:40:08,820 --> 00:40:11,960
rounds of clothes to juice

