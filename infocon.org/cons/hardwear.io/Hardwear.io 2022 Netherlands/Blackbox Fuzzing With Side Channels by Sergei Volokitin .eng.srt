1
00:00:05,400 --> 00:00:07,680
um thank you uh very nice to see all of

2
00:00:07,680 --> 00:00:10,260
you here today uh so what I would like

3
00:00:10,260 --> 00:00:13,440
to talk is about uh using side channel

4
00:00:13,440 --> 00:00:17,039
for Blackboard starting this work uh was

5
00:00:17,039 --> 00:00:20,400
done as part of X-Files project

6
00:00:20,400 --> 00:00:22,560
this is European project for forensic

7
00:00:22,560 --> 00:00:24,180
research

8
00:00:24,180 --> 00:00:26,220
um

9
00:00:26,220 --> 00:00:31,340
pausing part it was mostly done by risk

10
00:00:31,679 --> 00:00:34,680
so what's the idea uh for this topic

11
00:00:34,680 --> 00:00:37,140
when we are in a white box setting and

12
00:00:37,140 --> 00:00:39,239
we want to do vulnerability research we

13
00:00:39,239 --> 00:00:41,879
want to find some uh marks in the

14
00:00:41,879 --> 00:00:43,500
product there is a lot of different

15
00:00:43,500 --> 00:00:45,239
methods and you probably use a lot of

16
00:00:45,239 --> 00:00:48,420
them for example if you have source code

17
00:00:48,420 --> 00:00:50,160
we can do source code review

18
00:00:50,160 --> 00:00:53,039
it will have binaries we drop them into

19
00:00:53,039 --> 00:00:55,260
our favorite tool we can do reverse

20
00:00:55,260 --> 00:00:56,940
engineering and understand how it works

21
00:00:56,940 --> 00:00:58,559
behind the box

22
00:00:58,559 --> 00:01:01,440
maybe we can do debug for example if it

23
00:01:01,440 --> 00:01:03,180
is software you can just connect with

24
00:01:03,180 --> 00:01:04,680
your debugger if it is Hardware maybe

25
00:01:04,680 --> 00:01:06,840
you have jpeg or something so you can

26
00:01:06,840 --> 00:01:09,360
always try to find a way to make it

27
00:01:09,360 --> 00:01:11,400
easier to understand how the product

28
00:01:11,400 --> 00:01:12,900
works

29
00:01:12,900 --> 00:01:16,380
where other bars and how to explore them

30
00:01:16,380 --> 00:01:18,540
you can do advising yeah

31
00:01:18,540 --> 00:01:21,780
pause maybe it's some binary for a

32
00:01:21,780 --> 00:01:24,600
specific platform you emulate all of

33
00:01:24,600 --> 00:01:26,600
these there's quite a few methods there

34
00:01:26,600 --> 00:01:30,240
but what if we are in a lack of setting

35
00:01:30,240 --> 00:01:32,220
so we have some sort of device and we

36
00:01:32,220 --> 00:01:34,259
really want to try to understand how it

37
00:01:34,259 --> 00:01:35,579
works

38
00:01:35,579 --> 00:01:38,340
we probably don't have any stress we

39
00:01:38,340 --> 00:01:41,040
don't have the implementation we don't

40
00:01:41,040 --> 00:01:42,659
know how it's supposed to work what's

41
00:01:42,659 --> 00:01:45,479
the design of the product we don't have

42
00:01:45,479 --> 00:01:46,619
the source code

43
00:01:46,619 --> 00:01:49,140
we don't have the binder if there are

44
00:01:49,140 --> 00:01:52,380
OTA HD probably updated we cannot just

45
00:01:52,380 --> 00:01:54,840
get the binders from updates as well the

46
00:01:54,840 --> 00:01:56,700
memory is protected maybe it is the

47
00:01:56,700 --> 00:01:59,399
small equipment so nothing really

48
00:01:59,399 --> 00:02:01,740
in this case it is much more difficult

49
00:02:01,740 --> 00:02:04,740
so indeed the product plan for you is a

50
00:02:04,740 --> 00:02:07,158
black box

51
00:02:07,560 --> 00:02:10,500
so can we use pausing in this case to

52
00:02:10,500 --> 00:02:14,840
try to help us to explore the target

53
00:02:15,180 --> 00:02:17,400
even that we have it in our heads so

54
00:02:17,400 --> 00:02:19,260
that's one of the things we try to

55
00:02:19,260 --> 00:02:21,840
leverage because we have a device we and

56
00:02:21,840 --> 00:02:23,580
all this we can connect all kinds of

57
00:02:23,580 --> 00:02:26,640
equipment to it uh and we can try to

58
00:02:26,640 --> 00:02:28,680
understand what it does based on the

59
00:02:28,680 --> 00:02:32,220
side channels it leaks so that's just

60
00:02:32,220 --> 00:02:34,140
that word for example what kind of side

61
00:02:34,140 --> 00:02:36,540
channels can we talk about

62
00:02:36,540 --> 00:02:39,000
uh so the classic one when we talk about

63
00:02:39,000 --> 00:02:41,160
side channel in general we have a power

64
00:02:41,160 --> 00:02:44,040
choice or em Trace

65
00:02:44,040 --> 00:02:47,280
and that's used a lot uh in attacking

66
00:02:47,280 --> 00:02:48,660
devices mostly for technical

67
00:02:48,660 --> 00:02:50,819
cryptographic Secrets but here we can

68
00:02:50,819 --> 00:02:52,800
try to use the same information the

69
00:02:52,800 --> 00:02:55,560
traces the equation traces to understand

70
00:02:55,560 --> 00:03:00,120
uh what kind of code is

71
00:03:00,120 --> 00:03:03,060
maybe there is a flash memory and if we

72
00:03:03,060 --> 00:03:06,720
try to see if a specific code tries to

73
00:03:06,720 --> 00:03:08,519
access flash and just all the

74
00:03:08,519 --> 00:03:11,819
flashlights or we can see the USB if

75
00:03:11,819 --> 00:03:14,940
it's used here in the specific execution

76
00:03:14,940 --> 00:03:18,239
uh DDR memory the gpios even LEDs all

77
00:03:18,239 --> 00:03:20,040
this information

78
00:03:20,040 --> 00:03:21,780
if you can collect it and process

79
00:03:21,780 --> 00:03:24,959
appropriately you can try to use to

80
00:03:24,959 --> 00:03:25,860
understand

81
00:03:25,860 --> 00:03:30,500
uh what the target actually does and

82
00:03:30,840 --> 00:03:32,099
so

83
00:03:32,099 --> 00:03:35,400
today's simple approach we have our

84
00:03:35,400 --> 00:03:38,340
python engine this is quite standard if

85
00:03:38,340 --> 00:03:39,659
you have your software is the same you

86
00:03:39,659 --> 00:03:41,819
have a custom engine we use AFL in this

87
00:03:41,819 --> 00:03:44,720
case we'll make it more complex

88
00:03:44,720 --> 00:03:47,760
because an engine can produce us the

89
00:03:47,760 --> 00:03:49,319
data which we're going to use for

90
00:03:49,319 --> 00:03:54,140
projects or the requests are coming from

91
00:03:56,640 --> 00:03:58,260
requests here coming from the attention

92
00:03:58,260 --> 00:04:01,019
or whatever it tells us we have sort the

93
00:04:01,019 --> 00:04:04,200
harness to first we need to send this

94
00:04:04,200 --> 00:04:06,720
data so ideally when we talk about

95
00:04:06,720 --> 00:04:08,819
Blackboard flashing it's still not agree

96
00:04:08,819 --> 00:04:10,799
there is some sort of interface

97
00:04:10,799 --> 00:04:12,480
for example if you have a smartphone

98
00:04:12,480 --> 00:04:15,380
there's maybe a proprietary coverage

99
00:04:15,380 --> 00:04:18,779
patient about there's no information

100
00:04:18,779 --> 00:04:20,459
you can still send something once maybe

101
00:04:20,459 --> 00:04:22,800
get something

102
00:04:22,800 --> 00:04:25,080
to try to understand what it does

103
00:04:25,080 --> 00:04:28,860
so the hardness can send the requests we

104
00:04:28,860 --> 00:04:30,780
hopefully get some responses maybe the

105
00:04:30,780 --> 00:04:32,340
target is silent and gives us nothing

106
00:04:32,340 --> 00:04:34,860
back but you just try to see if there's

107
00:04:34,860 --> 00:04:36,000
any data

108
00:04:36,000 --> 00:04:37,860
and we can get a bunch of different size

109
00:04:37,860 --> 00:04:38,320
channels

110
00:04:38,320 --> 00:04:39,720
[Music]

111
00:04:39,720 --> 00:04:41,580
so for example if you talk about em

112
00:04:41,580 --> 00:04:44,699
Trace we will connect

113
00:04:44,699 --> 00:04:46,139
em

114
00:04:46,139 --> 00:04:48,680
if

115
00:04:48,780 --> 00:04:52,320
gpio the same way we can just see if the

116
00:04:52,320 --> 00:04:53,759
signal changes there and all these

117
00:04:53,759 --> 00:04:58,580
traces somehow in our harness we have

118
00:05:00,540 --> 00:05:02,639
the coordination

119
00:05:02,639 --> 00:05:06,240
even the request it wants to tell us it

120
00:05:06,240 --> 00:05:08,460
wants us to tell if this was the same

121
00:05:08,460 --> 00:05:12,180
path foreign

122
00:05:19,680 --> 00:05:22,500
so the idea is quite simple

123
00:05:22,500 --> 00:05:24,000
um just merging these two approaches

124
00:05:24,000 --> 00:05:26,880
together for implementation there is

125
00:05:26,880 --> 00:05:28,680
quite a bit of different details so

126
00:05:28,680 --> 00:05:30,000
first of all

127
00:05:30,000 --> 00:05:33,180
uh responses uh that part so I needed

128
00:05:33,180 --> 00:05:35,419
you can get new response

129
00:05:35,419 --> 00:05:39,539
you can deduct that we'll see you have

130
00:05:39,539 --> 00:05:41,820
uh the same with timing if you cook

131
00:05:41,820 --> 00:05:43,800
different time lightly at different

132
00:05:43,800 --> 00:05:45,060
executions

133
00:05:45,060 --> 00:05:46,620
foreign

134
00:05:46,620 --> 00:05:50,160
and so on the only problem there is we

135
00:05:50,160 --> 00:05:51,479
don't just have these different

136
00:05:51,479 --> 00:05:54,539
responses independently all of them all

137
00:05:54,539 --> 00:05:56,340
that collected different side channels

138
00:05:56,340 --> 00:06:00,180
or each execution uh path needs to be

139
00:06:00,180 --> 00:06:02,759
processed together so what we have here

140
00:06:02,759 --> 00:06:06,660
is a here of different site channels for

141
00:06:06,660 --> 00:06:08,900
example if you got different responses

142
00:06:08,900 --> 00:06:11,940
it matters for us more that they're

143
00:06:11,940 --> 00:06:14,100
different than that of the same timings

144
00:06:14,100 --> 00:06:16,139
so we don't say about the same timing it

145
00:06:16,139 --> 00:06:18,539
is the same path say the responses were

146
00:06:18,539 --> 00:06:21,600
different that means it has more High

147
00:06:21,600 --> 00:06:23,580
precedence than some

148
00:06:23,580 --> 00:06:26,580
so we have to Define for ourselves there

149
00:06:26,580 --> 00:06:30,440
uh which ones are more important

150
00:06:31,620 --> 00:06:34,139
uh that's kind of how it looks in a

151
00:06:34,139 --> 00:06:36,000
simple case for example imagine you have

152
00:06:36,000 --> 00:06:39,300
only two uh sources you have responses

153
00:06:39,300 --> 00:06:41,699
the day to get back and you have time

154
00:06:41,699 --> 00:06:44,580
and you try to come up with a unique

155
00:06:44,580 --> 00:06:46,319
label so

156
00:06:46,319 --> 00:06:48,539
the nice thing is this is extendable so

157
00:06:48,539 --> 00:06:50,580
we can always add another layer of

158
00:06:50,580 --> 00:06:52,620
different side channels so here we can

159
00:06:52,620 --> 00:06:57,419
put for example uh em trace or command

160
00:06:57,419 --> 00:07:00,240
line of the flash memory let's see there

161
00:07:00,240 --> 00:07:02,280
is a new command

162
00:07:02,280 --> 00:07:04,560
but for these layers you see we got

163
00:07:04,560 --> 00:07:06,300
different response and go into sub

164
00:07:06,300 --> 00:07:08,400
branches and for example for the

165
00:07:08,400 --> 00:07:10,500
response one the timing one we get label

166
00:07:10,500 --> 00:07:12,180
one at the same time in one for the

167
00:07:12,180 --> 00:07:14,759
response to we get different label label

168
00:07:14,759 --> 00:07:17,940
four and that approach that's quite

169
00:07:17,940 --> 00:07:20,039
easily create this graph of all

170
00:07:20,039 --> 00:07:23,720
different labels and

171
00:07:23,720 --> 00:07:26,460
you can just check the tree go here

172
00:07:26,460 --> 00:07:29,280
check if the response is present this is

173
00:07:29,280 --> 00:07:33,059
quite simple foreign

174
00:07:37,020 --> 00:07:39,240
with timing it starts to be tiny bit

175
00:07:39,240 --> 00:07:42,300
more difficult still uh not because of

176
00:07:42,300 --> 00:07:44,160
course we have Jitter and that's always

177
00:07:44,160 --> 00:07:46,139
to be the problem

178
00:07:46,139 --> 00:07:48,900
uh so the traces are noisy the time is

179
00:07:48,900 --> 00:07:52,139
never precise uh for that still you can

180
00:07:52,139 --> 00:07:53,880
tackle quite easily by having like

181
00:07:53,880 --> 00:07:57,060
Pockets saying we have timing plus minus

182
00:07:57,060 --> 00:07:59,340
some percentage and that's the same one

183
00:07:59,340 --> 00:08:03,360
if it's much different than even

184
00:08:03,360 --> 00:08:06,360
uh but the moment we go to Power traces

185
00:08:06,360 --> 00:08:08,280
it becomes even more difficult so it's

186
00:08:08,280 --> 00:08:11,220
not uh one-dimensional anymore uh the

187
00:08:11,220 --> 00:08:13,560
traces are a two-dimensional we have

188
00:08:13,560 --> 00:08:15,479
Jitter on the traces as well so we're

189
00:08:15,479 --> 00:08:17,580
gonna have some noise there this is just

190
00:08:17,580 --> 00:08:19,860
for my smart card you can see that the

191
00:08:19,860 --> 00:08:22,800
start of the command there is a bit of

192
00:08:22,800 --> 00:08:24,960
different operation happening

193
00:08:24,960 --> 00:08:28,219
it has never precisely done

194
00:08:28,280 --> 00:08:31,020
and the thing is when we process it we

195
00:08:31,020 --> 00:08:33,479
also need for the traces uh tackle this

196
00:08:33,479 --> 00:08:36,539
problem with noise so uh what did we do

197
00:08:36,539 --> 00:08:38,940
so the idea is simple as well we we do

198
00:08:38,940 --> 00:08:41,640
faster we have different choices I want

199
00:08:41,640 --> 00:08:43,860
to say is it the same label if so that's

200
00:08:43,860 --> 00:08:46,700
the clustering classic

201
00:08:47,420 --> 00:08:51,360
although data is noisy we on top of that

202
00:08:51,360 --> 00:08:54,959
extra problem for us we have to Cluster

203
00:08:54,959 --> 00:08:56,940
them randomly so we get the new Trace

204
00:08:56,940 --> 00:08:58,920
one morning Trade Center we have to say

205
00:08:58,920 --> 00:09:01,019
it doesn't belong to these clusters and

206
00:09:01,019 --> 00:09:02,459
if it's not we have to recluster

207
00:09:02,459 --> 00:09:04,860
everything again so we can add this new

208
00:09:04,860 --> 00:09:06,240
path

209
00:09:06,240 --> 00:09:08,880
and unfortunately not a lot of

210
00:09:08,880 --> 00:09:10,920
algorithms are implemented in my

211
00:09:10,920 --> 00:09:12,060
classroom

212
00:09:12,060 --> 00:09:15,060
foreign

213
00:09:39,180 --> 00:09:43,140
with um devices we have one setup maybe

214
00:09:43,140 --> 00:09:45,000
two or three but you cannot just say I'm

215
00:09:45,000 --> 00:09:46,680
gonna have hundred thousand setups and

216
00:09:46,680 --> 00:09:49,440
relatively variable the

217
00:09:49,440 --> 00:09:51,360
much effort to

218
00:09:51,360 --> 00:09:53,100
handle

219
00:09:53,100 --> 00:09:55,680
so and of course we talked to the Target

220
00:09:55,680 --> 00:09:57,720
on the device single executions and

221
00:09:57,720 --> 00:10:00,959
maybe we have uh joints maybe 30 maybe

222
00:10:00,959 --> 00:10:03,180
just few executions per second depending

223
00:10:03,180 --> 00:10:05,220
how fast the target is and we don't

224
00:10:05,220 --> 00:10:07,440
really want to slow down on top by doing

225
00:10:07,440 --> 00:10:10,980
our cluster so we need to have some kind

226
00:10:10,980 --> 00:10:13,040
of

227
00:10:13,980 --> 00:10:17,060
so with that we went to try to explore

228
00:10:17,060 --> 00:10:20,580
how we can do a clustering so we've got

229
00:10:20,580 --> 00:10:22,740
some traces of a smart card just to

230
00:10:22,740 --> 00:10:25,200
start a story these are actual traces we

231
00:10:25,200 --> 00:10:27,600
added some noise artificially and

232
00:10:27,600 --> 00:10:29,180
applied it to different

233
00:10:29,180 --> 00:10:32,580
so hdb scan is one of the two candidates

234
00:10:32,580 --> 00:10:34,380
which we're considering for clustering

235
00:10:34,380 --> 00:10:36,360
you can see here

236
00:10:36,360 --> 00:10:38,459
uh there are actually five different

237
00:10:38,459 --> 00:10:41,399
commands in this uh

238
00:10:41,399 --> 00:10:43,920
based on the trace only it can

239
00:10:43,920 --> 00:10:45,839
distinguish two different classes and

240
00:10:45,839 --> 00:10:47,579
they're quite separate so one of the

241
00:10:47,579 --> 00:10:49,560
traces was different than others all the

242
00:10:49,560 --> 00:10:51,420
others are similar enough so you can

243
00:10:51,420 --> 00:10:53,339
actually do that

244
00:10:53,339 --> 00:10:55,860
the problem is the moment we have more

245
00:10:55,860 --> 00:10:58,079
noise which work you should add here we

246
00:10:58,079 --> 00:11:00,120
got more mistakable traces and that's

247
00:11:00,120 --> 00:11:01,800
something we really don't want to have

248
00:11:01,800 --> 00:11:04,380
in our case in some place uh cases when

249
00:11:04,380 --> 00:11:06,120
we do clustering in general

250
00:11:06,120 --> 00:11:09,000
it can be all right here if we mislabel

251
00:11:09,000 --> 00:11:10,440
the trace for example we have the same

252
00:11:10,440 --> 00:11:13,140
cost but our custom algorithm tells us

253
00:11:13,140 --> 00:11:15,720
that was A New Path we will tell the

254
00:11:15,720 --> 00:11:18,420
father it was the new execution path and

255
00:11:18,420 --> 00:11:22,079
will create a new favorite execution uh

256
00:11:22,079 --> 00:11:26,040
adding to the set of data and that will

257
00:11:26,040 --> 00:11:28,140
reduce the effectiveness of the project

258
00:11:28,140 --> 00:11:32,100
so if we will create a lot of uh false

259
00:11:32,100 --> 00:11:34,260
positives it will just slow down and

260
00:11:34,260 --> 00:11:37,740
render out the addition of other users

261
00:11:37,740 --> 00:11:39,120
[Music]

262
00:11:39,120 --> 00:11:40,500
so

263
00:11:40,500 --> 00:11:43,560
um what I eventually uh ended up using

264
00:11:43,560 --> 00:11:47,760
is Yuma uh just for passion because uh

265
00:11:47,760 --> 00:11:49,500
two benefits of it it does damage

266
00:11:49,500 --> 00:11:51,959
allergy reduction so we can get rid of a

267
00:11:51,959 --> 00:11:53,220
lot of noise just focusing on the

268
00:11:53,220 --> 00:11:55,920
important parts and it handles noise

269
00:11:55,920 --> 00:11:59,339
quite well due to that reason as well

270
00:11:59,339 --> 00:12:02,160
even before a lot of noise

271
00:12:02,160 --> 00:12:04,140
you can see it's still attacks

272
00:12:04,140 --> 00:12:07,980
classes properly and it displays just in

273
00:12:07,980 --> 00:12:11,640
this case one percent of the traces we

274
00:12:11,640 --> 00:12:13,560
can live with that this is never a

275
00:12:13,560 --> 00:12:17,100
problem it is never gonna ruin entirely

276
00:12:17,100 --> 00:12:18,839
our project can be where these labels

277
00:12:18,839 --> 00:12:23,300
addresses but we'll try to avoid it as

278
00:12:24,060 --> 00:12:26,399
and of course on top of that

279
00:12:26,399 --> 00:12:28,320
um it is not a Magic Bullet you still

280
00:12:28,320 --> 00:12:31,440
need to have very good signal so we

281
00:12:31,440 --> 00:12:33,600
cannot just say we got any Targets we

282
00:12:33,600 --> 00:12:35,640
connect this mode somehow to random

283
00:12:35,640 --> 00:12:39,120
capacitor and see

284
00:12:39,120 --> 00:12:41,519
there is a lot of uh processing which

285
00:12:41,519 --> 00:12:44,820
needs to be done here

286
00:12:44,820 --> 00:12:48,000
if they have Amo Power Trace to explore

287
00:12:48,000 --> 00:12:49,980
the world of different combinations of

288
00:12:49,980 --> 00:12:53,060
using filtering uh maybe problems

289
00:12:53,060 --> 00:12:56,820
frequency domain using free access form

290
00:12:56,820 --> 00:12:59,639
that was actually quite a useful uh

291
00:12:59,639 --> 00:13:02,100
method for some targets if there is

292
00:13:02,100 --> 00:13:04,139
different leakage in the time domain in

293
00:13:04,139 --> 00:13:07,620
the frequency domain then we don't

294
00:13:07,620 --> 00:13:10,139
really care about zero damage jader will

295
00:13:10,139 --> 00:13:13,019
not be shown on the transport frequency

296
00:13:13,019 --> 00:13:16,320
phases so that helps us to kind of avoid

297
00:13:16,320 --> 00:13:20,600
the whole misalignment noise Market

298
00:13:21,240 --> 00:13:23,940
leakage of course it only works if

299
00:13:23,940 --> 00:13:25,079
you're different paths different

300
00:13:25,079 --> 00:13:26,880
execution paths will link in the

301
00:13:26,880 --> 00:13:28,800
frequency Center they all kind of have

302
00:13:28,800 --> 00:13:30,839
the same frequencies it's not going to

303
00:13:30,839 --> 00:13:31,360
give away

304
00:13:31,360 --> 00:13:33,500
[Music]

305
00:13:33,500 --> 00:13:36,300
uh with all these things together so

306
00:13:36,300 --> 00:13:39,720
having the labeler having uh the message

307
00:13:39,720 --> 00:13:43,079
for uh clustering the traces uh labeling

308
00:13:43,079 --> 00:13:46,139
the timings and the data all together we

309
00:13:46,139 --> 00:13:48,180
could actually go and explore how

310
00:13:48,180 --> 00:13:49,740
efficient is

311
00:13:49,740 --> 00:13:52,680
an actual targets

312
00:13:52,680 --> 00:13:55,620
so we tried a few use cases uh the first

313
00:13:55,620 --> 00:13:58,920
one uh simple smart card use case so we

314
00:13:58,920 --> 00:14:00,540
had

315
00:14:00,540 --> 00:14:03,540
uh Java cards we put some Outlet on it

316
00:14:03,540 --> 00:14:07,500
uh we wrote that with ourselves just uh

317
00:14:07,500 --> 00:14:11,639
so we can use this applet to understand

318
00:14:11,639 --> 00:14:14,279
how efficient with others of course we

319
00:14:14,279 --> 00:14:15,839
don't use this knowledge or whatever the

320
00:14:15,839 --> 00:14:17,579
commands are or anything for their

321
00:14:17,579 --> 00:14:21,600
passing itself we didn't give any Corpus

322
00:14:21,600 --> 00:14:24,300
empty

323
00:14:24,300 --> 00:14:26,880
and to make it even more difficult we

324
00:14:26,880 --> 00:14:31,200
did not give any data responses from

325
00:14:31,200 --> 00:14:32,820
different commands all the responses are

326
00:14:32,820 --> 00:14:35,639
the same sport is

327
00:14:35,639 --> 00:14:39,959
always 90. so uh in this case father can

328
00:14:39,959 --> 00:14:42,000
actually rely too much on the data it

329
00:14:42,000 --> 00:14:44,100
has to rely on the sidechain

330
00:14:44,100 --> 00:14:46,139
just to see how it is

331
00:14:46,139 --> 00:14:48,019
so that's more or less

332
00:14:48,019 --> 00:14:51,360
code you can see here

333
00:14:51,360 --> 00:14:54,120
uh so all these series return the same

334
00:14:54,120 --> 00:14:56,579
uh status code there are some different

335
00:14:56,579 --> 00:14:58,199
amounts or for example one of them will

336
00:14:58,199 --> 00:15:00,000
feel their right Instagram

337
00:15:00,000 --> 00:15:01,980
right another one would use the user

338
00:15:01,980 --> 00:15:04,680
provided value and that many bytes and

339
00:15:04,680 --> 00:15:06,959
so on so it is quite simple but it just

340
00:15:06,959 --> 00:15:09,660
does a bit of different uh usual uh

341
00:15:09,660 --> 00:15:13,139
operations but a lot of products

342
00:15:13,139 --> 00:15:15,180
if we just get the traces with a scope

343
00:15:15,180 --> 00:15:16,560
just to see how it looks like you

344
00:15:16,560 --> 00:15:19,380
already see uh that there is a potential

345
00:15:19,380 --> 00:15:21,600
for using these traces or distinguished

346
00:15:21,600 --> 00:15:23,579
ones you can see these are all different

347
00:15:23,579 --> 00:15:25,079
commands

348
00:15:25,079 --> 00:15:28,079
and uh that traces to human already look

349
00:15:28,079 --> 00:15:30,360
quite different so the uh cluster

350
00:15:30,360 --> 00:15:31,560
algorithm you shouldn't have too much

351
00:15:31,560 --> 00:15:33,959
trouble and the timing for the traces

352
00:15:33,959 --> 00:15:35,160
also

353
00:15:35,160 --> 00:15:37,440
so uh in this case having like a small

354
00:15:37,440 --> 00:15:40,260
Target which is not too fast and often

355
00:15:40,260 --> 00:15:42,060
smart cards are

356
00:15:42,060 --> 00:15:43,800
black boxes so you don't even have to

357
00:15:43,800 --> 00:15:45,779
source code so for this use case it is

358
00:15:45,779 --> 00:15:48,240
quite actually it can be useful to apply

359
00:15:48,240 --> 00:15:51,120
these method to explore

360
00:15:51,120 --> 00:15:53,699
and yeah that's the results so for the

361
00:15:53,699 --> 00:15:56,880
Benchmark we compared it to just sending

362
00:15:56,880 --> 00:15:58,560
randomly

363
00:15:58,560 --> 00:16:01,260
without any feedback just throw the data

364
00:16:01,260 --> 00:16:04,440
at it and see what kind of costs you can

365
00:16:04,440 --> 00:16:06,420
cover you can see that the random

366
00:16:06,420 --> 00:16:08,519
approach is not really going to explore

367
00:16:08,519 --> 00:16:11,040
in depth because the moment you cover

368
00:16:11,040 --> 00:16:14,220
all your basic uh inputs uh you have to

369
00:16:14,220 --> 00:16:17,100
move towards values entirely and then

370
00:16:17,100 --> 00:16:18,420
you don't have the average situation

371
00:16:18,420 --> 00:16:21,360
also it will just Flatline for very long

372
00:16:21,360 --> 00:16:23,579
time sometime later you might pump just

373
00:16:23,579 --> 00:16:25,500
by accident reversing some constant

374
00:16:25,500 --> 00:16:27,720
which have to go uh we'll get a deep

375
00:16:27,720 --> 00:16:30,600
coverage but for most of it it will be

376
00:16:30,600 --> 00:16:34,019
users or they're passing approach you

377
00:16:34,019 --> 00:16:35,579
can see there's already quite a bit of a

378
00:16:35,579 --> 00:16:39,000
tiny bit of difference on the first 20

379
00:16:39,000 --> 00:16:41,339
000 executions these are the number of

380
00:16:41,339 --> 00:16:42,720
executions and this is the average

381
00:16:42,720 --> 00:16:44,160
percentage

382
00:16:44,160 --> 00:16:45,500
and

383
00:16:45,500 --> 00:16:50,959
eventually it also slows down

384
00:16:51,120 --> 00:16:55,880
further executions uh the study takes

385
00:16:56,240 --> 00:16:59,279
but still eventually you would expect to

386
00:16:59,279 --> 00:17:02,000
yeah

387
00:17:02,100 --> 00:17:04,859
so that was already uh nice of course we

388
00:17:04,859 --> 00:17:06,900
wrote this code ourselves so it is not

389
00:17:06,900 --> 00:17:08,160
too much of a challenge for the

390
00:17:08,160 --> 00:17:11,400
Blackboard scenario

391
00:17:11,400 --> 00:17:13,740
we were considering trying to do it on

392
00:17:13,740 --> 00:17:15,839
some kind of lack of targets the only

393
00:17:15,839 --> 00:17:17,939
problem is it is quite difficult process

394
00:17:17,939 --> 00:17:20,640
the results so to see how capable the

395
00:17:20,640 --> 00:17:22,619
record uh did we find something useful

396
00:17:22,619 --> 00:17:24,540
or was it customized so for this

397
00:17:24,540 --> 00:17:26,480
presentation we

398
00:17:26,480 --> 00:17:31,500
tried to use a real life uh ish Target

399
00:17:31,500 --> 00:17:35,100
so this is a pine cone uh it is open

400
00:17:35,100 --> 00:17:37,440
sourceful it has

401
00:17:37,440 --> 00:17:40,020
the code is available it has used as one

402
00:17:40,020 --> 00:17:44,220
double stages so we try to use it uh for

403
00:17:44,220 --> 00:17:47,400
assessing all the visual Studio

404
00:17:47,400 --> 00:17:50,460
and we the nice thing is it has the

405
00:17:50,460 --> 00:17:53,100
Dapper the pine64 has the same socs

406
00:17:53,100 --> 00:17:56,340
phone itself so we can run the code on

407
00:17:56,340 --> 00:17:58,200
the dashboard and try to explore it

408
00:17:58,200 --> 00:18:02,400
there see how it can be useful in a more

409
00:18:02,400 --> 00:18:04,140
realistic scenario

410
00:18:04,140 --> 00:18:06,059
and having the source code in the specs

411
00:18:06,059 --> 00:18:08,280
can help us to understand what we found

412
00:18:08,280 --> 00:18:09,980
with the buzzer was an actual

413
00:18:09,980 --> 00:18:12,539
differences in the code or was it just

414
00:18:12,539 --> 00:18:14,900
uh

415
00:18:15,840 --> 00:18:19,140
so yeah we have the source code and it

416
00:18:19,140 --> 00:18:21,660
is real life but it's not necessarily

417
00:18:21,660 --> 00:18:24,360
superval so so you will see later this

418
00:18:24,360 --> 00:18:25,860
uh

419
00:18:25,860 --> 00:18:28,820
you both implementation is

420
00:18:28,820 --> 00:18:31,620
this phone doesn't have security so it's

421
00:18:31,620 --> 00:18:34,080
just you would uh

422
00:18:34,080 --> 00:18:37,580
using that for

423
00:18:38,280 --> 00:18:41,460
um that's how the setup looks uh quite

424
00:18:41,460 --> 00:18:43,980
simple and elegant

425
00:18:43,980 --> 00:18:45,980
um if I say so

426
00:18:45,980 --> 00:18:49,980
uh it uh these three main components

427
00:18:49,980 --> 00:18:53,640
while the scope uh we have a few uh

428
00:18:53,640 --> 00:18:56,460
serial interfaces here on top you can

429
00:18:56,460 --> 00:18:58,260
see there is relay board

430
00:18:58,260 --> 00:19:00,720
targets sometimes it will crash

431
00:19:00,720 --> 00:19:04,080
hopefully or it will hunt so we need to

432
00:19:04,080 --> 00:19:05,340
reset it so

433
00:19:05,340 --> 00:19:08,820
continue watching and we have the target

434
00:19:08,820 --> 00:19:11,160
here with a

435
00:19:11,160 --> 00:19:12,840
yeah

436
00:19:12,840 --> 00:19:14,640
and you see contrasting here because I

437
00:19:14,640 --> 00:19:16,760
use

438
00:19:17,340 --> 00:19:20,280
to hold the rules

439
00:19:20,280 --> 00:19:23,700
um so with that we can do our attempt in

440
00:19:23,700 --> 00:19:26,100
passing the target

441
00:19:26,100 --> 00:19:26,880
um

442
00:19:26,880 --> 00:19:30,000
this is some of the results we've got

443
00:19:30,000 --> 00:19:32,700
yes and too much time in it but first we

444
00:19:32,700 --> 00:19:34,440
started with no purpose at all so we

445
00:19:34,440 --> 00:19:35,760
didn't tell the buzzer whatever the

446
00:19:35,760 --> 00:19:38,700
commands are uh gave the embassy Corpus

447
00:19:38,700 --> 00:19:40,980
and it starts to explore and just after

448
00:19:40,980 --> 00:19:44,160
a few hours it we already find 16

449
00:19:44,160 --> 00:19:45,780
different formats

450
00:19:45,780 --> 00:19:47,700
placed the

451
00:19:47,700 --> 00:19:50,280
only responses from the Target and the

452
00:19:50,280 --> 00:19:53,880
timing so in use traces uh powertraces

453
00:19:53,880 --> 00:19:56,340
here because the target is much noisier

454
00:19:56,340 --> 00:19:58,440
with a smart card use case we see very

455
00:19:58,440 --> 00:20:01,740
distinct traces here the EM trace of the

456
00:20:01,740 --> 00:20:04,500
saw is not really useful what could be

457
00:20:04,500 --> 00:20:06,960
useful here is using some other sites

458
00:20:06,960 --> 00:20:08,280
and for example

459
00:20:08,280 --> 00:20:09,440
um

460
00:20:09,440 --> 00:20:12,360
lines to the flesh so if you connect to

461
00:20:12,360 --> 00:20:13,740
the command line of The Flash you can

462
00:20:13,740 --> 00:20:15,360
see if there are more commands and

463
00:20:15,360 --> 00:20:17,400
because there are some paths in your

464
00:20:17,400 --> 00:20:19,200
boot which will trigger or using some

465
00:20:19,200 --> 00:20:21,720
other side Channel while using the em in

466
00:20:21,720 --> 00:20:23,900
general

467
00:20:26,220 --> 00:20:28,740
and yeah execution is not super fast we

468
00:20:28,740 --> 00:20:32,360
get six attempts per second on average

469
00:20:32,360 --> 00:20:37,459
which is not amazing but

470
00:20:39,720 --> 00:20:42,179
and yeah that's how it looks not really

471
00:20:42,179 --> 00:20:46,039
anything new to you I guess

472
00:20:48,299 --> 00:20:50,280
it's a bit of a special game but for the

473
00:20:50,280 --> 00:20:51,840
rest it does

474
00:20:51,840 --> 00:20:54,000
he doesn't really have one of the things

475
00:20:54,000 --> 00:20:56,400
which actually struggle a lot is

476
00:20:56,400 --> 00:20:59,340
stability so normally when you have

477
00:20:59,340 --> 00:21:01,320
traditional clothing unless you have

478
00:21:01,320 --> 00:21:04,320
some weird code like the Mystic or

479
00:21:04,320 --> 00:21:06,000
random stuff you're coming from Target

480
00:21:06,000 --> 00:21:09,559
you'll probably care about stability

481
00:21:09,860 --> 00:21:13,320
for us even that we have traces and it's

482
00:21:13,320 --> 00:21:16,080
all a bit of a delivery noise and stuff

483
00:21:16,080 --> 00:21:20,220
uh you can see if we are not careful in

484
00:21:20,220 --> 00:21:22,919
the processing it can drop almost to

485
00:21:22,919 --> 00:21:25,919
zero so nice probably useless that's

486
00:21:25,919 --> 00:21:28,340
something you

487
00:21:28,440 --> 00:21:31,260
will see how useful your section of data

488
00:21:31,260 --> 00:21:33,299
if specific side channel is not useful

489
00:21:33,299 --> 00:21:35,220
you can always swap with another

490
00:21:35,220 --> 00:21:36,240
sections

491
00:21:36,240 --> 00:21:38,159
if

492
00:21:38,159 --> 00:21:40,080
em doesn't give me any additional

493
00:21:40,080 --> 00:21:42,179
information

494
00:21:42,179 --> 00:21:44,580
maybe just like we did here for some

495
00:21:44,580 --> 00:21:47,820
time you know which was useful

496
00:21:47,820 --> 00:21:51,240
uh another time to try it is to do it

497
00:21:51,240 --> 00:21:53,460
with all the available commands you

498
00:21:53,460 --> 00:21:55,080
would it's not too difficult to guess

499
00:21:55,080 --> 00:21:56,220
what the commands are going to be so we

500
00:21:56,220 --> 00:21:58,440
gave it to the mother let it run for a

501
00:21:58,440 --> 00:22:00,720
little while and see how well it will

502
00:22:00,720 --> 00:22:01,799
score

503
00:22:01,799 --> 00:22:02,700
um

504
00:22:02,700 --> 00:22:05,340
it could find a bit more things uh

505
00:22:05,340 --> 00:22:08,220
that's uh nice and uh the best part well

506
00:22:08,220 --> 00:22:11,580
of course eventually the bloodlines

507
00:22:11,580 --> 00:22:15,179
so here it is not long execution only uh

508
00:22:15,179 --> 00:22:16,380
few hours

509
00:22:16,380 --> 00:22:18,539
and given the speed of course as good as

510
00:22:18,539 --> 00:22:19,940
per second

511
00:22:19,940 --> 00:22:23,400
like ideally run it for a few weeks and

512
00:22:23,400 --> 00:22:25,500
see how far you have to actually get

513
00:22:25,500 --> 00:22:28,080
some Industries but as I mentioned

514
00:22:28,080 --> 00:22:30,000
before this is not really very secure

515
00:22:30,000 --> 00:22:32,460
protected Target so even after a few

516
00:22:32,460 --> 00:22:35,100
hours you can see that and that is

517
00:22:35,100 --> 00:22:36,480
actually very nice so if you're familiar

518
00:22:36,480 --> 00:22:38,340
with your boots this is the command

519
00:22:38,340 --> 00:22:41,820
puzzles and this MD memory display

520
00:22:41,820 --> 00:22:44,159
which will supposed to print some data

521
00:22:44,159 --> 00:22:46,280
but

522
00:22:47,419 --> 00:22:49,919
is actually

523
00:22:49,919 --> 00:22:52,760
thieves

524
00:22:52,930 --> 00:22:53,580
[Music]

525
00:22:53,580 --> 00:22:55,580
um

526
00:22:55,919 --> 00:22:58,559
what nice about this target is that we

527
00:22:58,559 --> 00:23:01,260
got these crash tops and that's a great

528
00:23:01,260 --> 00:23:02,520
thing we didn't know the purpose a lot

529
00:23:02,520 --> 00:23:04,260
in this research on handling their

530
00:23:04,260 --> 00:23:06,000
crashes which is the whole different

531
00:23:06,000 --> 00:23:09,539
problem in generic level of scenario

532
00:23:09,539 --> 00:23:11,280
when you have just for example no

533
00:23:11,280 --> 00:23:13,260
information and only the trace and you

534
00:23:13,260 --> 00:23:16,140
try to understand if the target crash

535
00:23:16,140 --> 00:23:18,720
but that would be uh all different story

536
00:23:18,720 --> 00:23:21,419
to figure it out ideally for this use

537
00:23:21,419 --> 00:23:23,700
case it is very simple every time we get

538
00:23:23,700 --> 00:23:26,100
the crash we got a beautiful down and

539
00:23:26,100 --> 00:23:28,980
you don't have to worry about

540
00:23:28,980 --> 00:23:32,100
so that was nice uh we could see that it

541
00:23:32,100 --> 00:23:34,020
actually works of two different targets

542
00:23:34,020 --> 00:23:36,780
uh being very happy about ourselves and

543
00:23:36,780 --> 00:23:39,179
then looking at the

544
00:23:39,179 --> 00:23:42,299
one of the runs of the father we found

545
00:23:42,299 --> 00:23:44,220
something interesting that we already

546
00:23:44,220 --> 00:23:46,799
believe her so this is your signal and

547
00:23:46,799 --> 00:23:49,200
other commanders that's the CRC of the

548
00:23:49,200 --> 00:23:50,640
memory for whatever

549
00:23:50,640 --> 00:23:52,200
that's probably not something you want

550
00:23:52,200 --> 00:23:54,380
to have

551
00:23:55,140 --> 00:23:59,100
uh this index is simple you have uh

552
00:23:59,100 --> 00:24:01,559
CRC commands you give it the address and

553
00:24:01,559 --> 00:24:03,659
links and it will compute source and no

554
00:24:03,659 --> 00:24:04,679
surprise you've got a few different

555
00:24:04,679 --> 00:24:08,299
parts because the data required

556
00:24:10,080 --> 00:24:12,120
but what we've also found that the time

557
00:24:12,120 --> 00:24:15,780
to execute these commands is also

558
00:24:15,780 --> 00:24:17,400
and that was a bit unexpected because

559
00:24:17,400 --> 00:24:19,500
you wouldn't expect CRC really be time

560
00:24:19,500 --> 00:24:22,200
dependent on the date itself much you

561
00:24:22,200 --> 00:24:25,860
would expect the lengths

562
00:24:25,860 --> 00:24:28,500
again a lot but even the same length

563
00:24:28,500 --> 00:24:31,559
length of CRC you would expect close

564
00:24:31,559 --> 00:24:32,940
enough times

565
00:24:32,940 --> 00:24:36,419
so we explored it more Run for the CRC

566
00:24:36,419 --> 00:24:38,340
come on only this is just a few hours of

567
00:24:38,340 --> 00:24:40,740
execution but a lot of different ones

568
00:24:40,740 --> 00:24:43,440
and if we plot the timings we work from

569
00:24:43,440 --> 00:24:46,679
the buzzer that's how it looks like and

570
00:24:46,679 --> 00:24:48,780
you see this is not really complete you

571
00:24:48,780 --> 00:24:51,120
have to run it for a few more hours but

572
00:24:51,120 --> 00:24:52,860
you see there's some artifacts you would

573
00:24:52,860 --> 00:24:55,679
expect from the closer this line is a

574
00:24:55,679 --> 00:24:57,480
lot of different lots of a lot of

575
00:24:57,480 --> 00:24:59,580
different attempts with other food on

576
00:24:59,580 --> 00:25:01,799
this line so this is actually where the

577
00:25:01,799 --> 00:25:04,500
timings increase on the bottom we have

578
00:25:04,500 --> 00:25:07,039
the addresses

579
00:25:07,700 --> 00:25:10,919
normally it takes just about uh just

580
00:25:10,919 --> 00:25:14,760
below a milliseconds to you compute CRC

581
00:25:14,760 --> 00:25:18,900
of 4000 X bytes and

582
00:25:18,900 --> 00:25:21,780
for some addresses it takes much longer

583
00:25:21,780 --> 00:25:24,720
so it looks somewhat like this and this

584
00:25:24,720 --> 00:25:28,159
is not really the behavior we expect

585
00:25:28,159 --> 00:25:30,059
but

586
00:25:30,059 --> 00:25:33,299
we run it for longer and one of the

587
00:25:33,299 --> 00:25:35,159
benefits of this target we've got the

588
00:25:35,159 --> 00:25:37,320
data sheet of this target

589
00:25:37,320 --> 00:25:38,820
what we can see there are different

590
00:25:38,820 --> 00:25:41,658
members at this

591
00:25:43,080 --> 00:25:46,159
so for example we have uh

592
00:25:46,159 --> 00:25:50,279
or we have different srams or later on

593
00:25:50,279 --> 00:25:54,059
we have DDR and although CRC computation

594
00:25:54,059 --> 00:25:57,900
itself is close enough for different

595
00:25:57,900 --> 00:25:59,059
data

596
00:25:59,059 --> 00:26:01,559
we get the different timings just

597
00:26:01,559 --> 00:26:04,820
because the hardware underneath is uh

598
00:26:04,820 --> 00:26:07,799
for example here as well we see at least

599
00:26:07,799 --> 00:26:10,200
address somewhere at 41 000 we start to

600
00:26:10,200 --> 00:26:11,940
get two different timing this is not

601
00:26:11,940 --> 00:26:14,279
even in the memory map but uh exploring

602
00:26:14,279 --> 00:26:16,860
a bit more there is some peripherals

603
00:26:16,860 --> 00:26:19,080
some control registers we can still

604
00:26:19,080 --> 00:26:21,299
compute CRC of this memory you can just

605
00:26:21,299 --> 00:26:23,760
see that it takes longer than when we do

606
00:26:23,760 --> 00:26:25,559
it

607
00:26:25,559 --> 00:26:28,140
and that was uh one unexpected result

608
00:26:28,140 --> 00:26:33,000
from this uh research we were planning

609
00:26:33,000 --> 00:26:36,000
to try to use side channel for getting

610
00:26:36,000 --> 00:26:37,740
information about software which runs on

611
00:26:37,740 --> 00:26:40,020
the market but we also could see the

612
00:26:40,020 --> 00:26:41,700
differences in actual Hardware

613
00:26:41,700 --> 00:26:44,940
underneath and that was

614
00:26:44,940 --> 00:26:47,520
nice service

615
00:26:47,520 --> 00:26:49,500
um and yeah just gonna uh to see how

616
00:26:49,500 --> 00:26:51,120
actually different it is you can do it

617
00:26:51,120 --> 00:26:55,080
separate later and check how much the

618
00:26:55,080 --> 00:26:58,799
difference or different memory uh

619
00:26:58,799 --> 00:27:01,200
uh difficult different physical numbers

620
00:27:01,200 --> 00:27:02,820
so for example you can see there are

621
00:27:02,820 --> 00:27:05,100
some SRM which is much faster than

622
00:27:05,100 --> 00:27:07,860
another restaurant or EDR of course is

623
00:27:07,860 --> 00:27:10,640
much much faster than any other battery

624
00:27:10,640 --> 00:27:13,500
and this information actually can help

625
00:27:13,500 --> 00:27:14,760
you explore and you can see the

626
00:27:14,760 --> 00:27:16,799
difference is quite big so you can

627
00:27:16,799 --> 00:27:17,700
actually

628
00:27:17,700 --> 00:27:21,600
rely on the timing information we are

629
00:27:21,600 --> 00:27:22,860
quite

630
00:27:22,860 --> 00:27:25,380
like

631
00:27:25,380 --> 00:27:27,720
and that's uh most of the presentation

632
00:27:27,720 --> 00:27:30,900
so a few takeaways

633
00:27:30,900 --> 00:27:33,480
will try to do and apply coverage guided

634
00:27:33,480 --> 00:27:36,240
buzzing to blackbox targets it works for

635
00:27:36,240 --> 00:27:37,919
multiple different targets not all the

636
00:27:37,919 --> 00:27:39,600
side channels are equally useful for

637
00:27:39,600 --> 00:27:42,539
different ones but uh with enough of

638
00:27:42,539 --> 00:27:46,440
manual exploration there can be used if

639
00:27:46,440 --> 00:27:48,539
you have to explore Target about which

640
00:27:48,539 --> 00:27:50,520
you don't know anything

641
00:27:50,520 --> 00:27:52,260
um

642
00:27:52,260 --> 00:27:54,720
The Crossing is very slow that's very

643
00:27:54,720 --> 00:27:57,480
important you know so if you have if you

644
00:27:57,480 --> 00:27:59,460
can help the Corpus make it better and

645
00:27:59,460 --> 00:28:01,260
give like useful things for the other to

646
00:28:01,260 --> 00:28:04,320
start that helps a lot and the syntax is

647
00:28:04,320 --> 00:28:07,559
also a big thing so if you get illegal

648
00:28:07,559 --> 00:28:09,960
syntax uh like for complex commands and

649
00:28:09,960 --> 00:28:11,940
you can help deposit with the syntax

650
00:28:11,940 --> 00:28:14,279
that can also improve your performance a

651
00:28:14,279 --> 00:28:17,220
lot and sometimes the software you don't

652
00:28:17,220 --> 00:28:19,140
really have to care you can ignore the

653
00:28:19,140 --> 00:28:21,659
Throne of course or away could be longer

654
00:28:21,659 --> 00:28:23,940
here you would have to wait long long

655
00:28:23,940 --> 00:28:25,980
time if you have wrong signals so if you

656
00:28:25,980 --> 00:28:29,100
can help that uh make it last black box

657
00:28:29,100 --> 00:28:32,279
of the father that always helps

658
00:28:32,279 --> 00:28:34,559
and finally something we didn't even

659
00:28:34,559 --> 00:28:37,500
expect so we don't only detect software

660
00:28:37,500 --> 00:28:39,539
differences with this approach but also

661
00:28:39,539 --> 00:28:43,440
the hardware devices which is a nice

662
00:28:43,440 --> 00:28:45,600
thank you very much that's what I

663
00:28:45,600 --> 00:28:47,460
represent today and if you have any

664
00:28:47,460 --> 00:28:49,640
questions

665
00:28:55,140 --> 00:28:58,500
thanks Sergey uh do we have questions to

666
00:28:58,500 --> 00:29:01,440
Sergey from the audience

667
00:29:01,440 --> 00:29:04,279
this video

668
00:29:04,799 --> 00:29:06,799
thank you very much

669
00:29:06,799 --> 00:29:09,900
I found this a very fascinating approach

670
00:29:09,900 --> 00:29:11,940
and the reason is that

671
00:29:11,940 --> 00:29:15,480
uh software fuzzy we associate the idea

672
00:29:15,480 --> 00:29:18,299
of coverage to look through the coverage

673
00:29:18,299 --> 00:29:21,080
of software

674
00:29:21,299 --> 00:29:24,059
so that's basically the spaces we're

675
00:29:24,059 --> 00:29:26,580
exploring and we assign this to the

676
00:29:26,580 --> 00:29:28,740
meaning of we are going through the

677
00:29:28,740 --> 00:29:31,679
different software branches and

678
00:29:31,679 --> 00:29:33,899
exploring it for fuzzy what we are

679
00:29:33,899 --> 00:29:35,520
exploring here is something a different

680
00:29:35,520 --> 00:29:37,080
space

681
00:29:37,080 --> 00:29:40,440
the Eastern Dimension is the dimension

682
00:29:40,440 --> 00:29:42,539
of the difference we can perceive to say

683
00:29:42,539 --> 00:29:45,179
challenge so for example if you actually

684
00:29:45,179 --> 00:29:47,340
hit two different software Parts in the

685
00:29:47,340 --> 00:29:48,360
code

686
00:29:48,360 --> 00:29:51,419
that actually at the same timing and the

687
00:29:51,419 --> 00:29:54,659
same such unknown response they would

688
00:29:54,659 --> 00:29:57,600
not be distinguishable in what you see

689
00:29:57,600 --> 00:29:59,779
is this correct you want to say yes yes

690
00:29:59,779 --> 00:30:02,059
so the question sorry

691
00:30:02,059 --> 00:30:04,679
how do you think this could relate so

692
00:30:04,679 --> 00:30:07,460
this because the real version codes

693
00:30:07,460 --> 00:30:10,919
while the Leo is fuzzing to information

694
00:30:10,919 --> 00:30:14,580
that may be not exactly related to the

695
00:30:14,580 --> 00:30:17,760
actual the code College uh how do you

696
00:30:17,760 --> 00:30:19,919
think this which direction will bring us

697
00:30:19,919 --> 00:30:20,880
because I think this is between

698
00:30:20,880 --> 00:30:23,520
something very interesting there's

699
00:30:23,520 --> 00:30:25,039
something quite different

700
00:30:25,039 --> 00:30:28,760
about these two Notions of coverage

701
00:30:28,760 --> 00:30:33,539
matches already done okay yeah so indeed

702
00:30:33,539 --> 00:30:36,120
a wireless software will most focus on

703
00:30:36,120 --> 00:30:38,100
this uh separate blocks like separate

704
00:30:38,100 --> 00:30:40,140
execution blocks here we focused on the

705
00:30:40,140 --> 00:30:42,360
whole execution Trace so it was a bit of

706
00:30:42,360 --> 00:30:44,940
a different approach what one thing we

707
00:30:44,940 --> 00:30:46,980
could uh borrow from software so

708
00:30:46,980 --> 00:30:48,480
normally you focus in separate blocks

709
00:30:48,480 --> 00:30:50,640
here we take the whole Trace we can also

710
00:30:50,640 --> 00:30:53,039
subsplit different uh traces like side

711
00:30:53,039 --> 00:30:56,520
Channel and also focus on parts of it to

712
00:30:56,520 --> 00:30:58,380
see if there is more information we can

713
00:30:58,380 --> 00:31:00,059
recovery so it can get a bit more from

714
00:31:00,059 --> 00:31:02,700
software like rolling for basic blocks

715
00:31:02,700 --> 00:31:04,919
of uh if we can detect this information

716
00:31:04,919 --> 00:31:07,260
inside chat also timing you can also

717
00:31:07,260 --> 00:31:09,779
just how long it takes but maybe for a

718
00:31:09,779 --> 00:31:12,419
trace you can see uh you know there is

719
00:31:12,419 --> 00:31:14,399
access to flash in the first millisecond

720
00:31:14,399 --> 00:31:16,260
and there is access to USB in the next

721
00:31:16,260 --> 00:31:18,539
in a second and that will give us the

722
00:31:18,539 --> 00:31:20,580
notion of basic blocks like in software

723
00:31:20,580 --> 00:31:24,860
and that would be maybe one nice thing

724
00:31:25,880 --> 00:31:28,799
just saying is that

725
00:31:28,799 --> 00:31:30,659
implements instead of rather than

726
00:31:30,659 --> 00:31:33,840
clustering traces let's say clustering

727
00:31:33,840 --> 00:31:36,480
soft blocks in order to say this looks

728
00:31:36,480 --> 00:31:38,580
similar in general and this would be a

729
00:31:38,580 --> 00:31:42,000
problem would it be visible well visible

730
00:31:42,000 --> 00:31:43,440
part is a difficult question we consider

731
00:31:43,440 --> 00:31:46,740
that the problem is uh we start to get a

732
00:31:46,740 --> 00:31:49,200
lot of noise very quickly so if we

733
00:31:49,200 --> 00:31:51,380
substitute it a lot it's gonna

734
00:31:51,380 --> 00:31:53,700
put more pressure on us to be very

735
00:31:53,700 --> 00:31:56,820
precise for each of them but indeed if

736
00:31:56,820 --> 00:31:59,279
there is a target which doesn't give us

737
00:31:59,279 --> 00:32:00,720
too much trouble with side channels

738
00:32:00,720 --> 00:32:02,520
that's something we could do like if you

739
00:32:02,520 --> 00:32:05,460
see is separate very clear parts of that

740
00:32:05,460 --> 00:32:07,860
we can subsplit traces and try to

741
00:32:07,860 --> 00:32:11,178
Cluster them separate we will get more

742
00:32:11,580 --> 00:32:13,980
but do we have any other questions from

743
00:32:13,980 --> 00:32:16,460
the audience

744
00:32:19,020 --> 00:32:22,260
we lost okay uh another round of

745
00:32:22,260 --> 00:32:25,399
applause to Sergey

