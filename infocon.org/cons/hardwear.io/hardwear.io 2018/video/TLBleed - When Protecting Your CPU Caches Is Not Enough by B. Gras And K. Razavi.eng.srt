1
00:00:03,830 --> 00:00:09,540
<font color="#CCCCCC">hey everyone thank you for coming my</font>

2
00:00:06,690 --> 00:00:11,610
name is Ben<font color="#CCCCCC"> and I'm Colin</font><font color="#E5E5E5"> and today we</font>

3
00:00:09,540 --> 00:00:13,379
would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to talk</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> you about this new</font>

4
00:00:11,610 --> 00:00:15,509
<font color="#CCCCCC">site and check side channel attack that</font>

5
00:00:13,380 --> 00:00:18,180
we have called<font color="#E5E5E5"> TL bleeds so we're gonna</font>

6
00:00:15,509 --> 00:00:20,970
<font color="#E5E5E5">use the TLB to leak some secrets and</font>

7
00:00:18,180 --> 00:00:22,529
<font color="#CCCCCC">cavae can introduce to you now</font><font color="#E5E5E5"> through</font>

8
00:00:20,970 --> 00:00:24,029
<font color="#E5E5E5">the landscape of cache attacks cache</font>

9
00:00:22,529 --> 00:00:26,300
defenses<font color="#E5E5E5"> and</font><font color="#CCCCCC"> uh</font><font color="#E5E5E5"> later on tell you about</font>

10
00:00:24,029 --> 00:00:27,660
how<font color="#E5E5E5"> to bleed fits into that landscape</font>

11
00:00:26,300 --> 00:00:31,410
<font color="#CCCCCC">thanks man</font>

12
00:00:27,660 --> 00:00:34,260
so who<font color="#E5E5E5"> are we</font><font color="#CCCCCC"> you're part of food sack</font>

13
00:00:31,410 --> 00:00:36,690
<font color="#E5E5E5">so you might have heard of us you're the</font>

14
00:00:34,260 --> 00:00:39,899
security research group at full

15
00:00:36,690 --> 00:00:43,559
<font color="#E5E5E5">university in Amsterdam</font><font color="#CCCCCC"> so we do</font>

16
00:00:39,899 --> 00:00:44,910
research on software<font color="#E5E5E5"> security but so and</font>

17
00:00:43,559 --> 00:00:47,280
then we do<font color="#E5E5E5"> software hardening</font>

18
00:00:44,910 --> 00:00:49,648
exploitation but they also do<font color="#E5E5E5"> hardware</font>

19
00:00:47,280 --> 00:00:50,730
attacks<font color="#E5E5E5"> and side channels and this is</font>

20
00:00:49,649 --> 00:00:53,399
going<font color="#CCCCCC"> to be what we're</font><font color="#E5E5E5"> going to talk</font>

21
00:00:50,730 --> 00:00:56,879
<font color="#CCCCCC">about today and here you can see been</font>

22
00:00:53,399 --> 00:01:00,270
holding his pwnage<font color="#E5E5E5"> plug and you will</font>

23
00:00:56,879 --> 00:01:02,699
soon see why<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so this is the</font>

24
00:01:00,270 --> 00:01:05,189
overview of the talk I'm gonna quickly

25
00:01:02,699 --> 00:01:07,080
talk about<font color="#E5E5E5"> cache attacks for those of</font>

26
00:01:05,188 --> 00:01:09,570
you who are not familiar with<font color="#CCCCCC"> them and</font>

27
00:01:07,080 --> 00:01:11,100
then a<font color="#CCCCCC"> little bit about defenses that</font><font color="#E5E5E5"> we</font>

28
00:01:09,570 --> 00:01:14,970
are deploying these days against<font color="#CCCCCC"> this</font>

29
00:01:11,100 --> 00:01:16,710
cache attacks and then Ben is going<font color="#E5E5E5"> to</font>

30
00:01:14,970 --> 00:01:19,500
tell you why all of<font color="#E5E5E5"> these defenses are</font>

31
00:01:16,710 --> 00:01:21,479
broken and then we're going<font color="#CCCCCC"> to tell</font><font color="#E5E5E5"> you</font>

32
00:01:19,500 --> 00:01:23,909
how effective<font color="#CCCCCC"> this new attack is and</font>

33
00:01:21,479 --> 00:01:25,920
then you're<font color="#E5E5E5"> also going to talk</font><font color="#CCCCCC"> about a</font>

34
00:01:23,909 --> 00:01:28,530
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit about the reception</font><font color="#CCCCCC"> how</font>

35
00:01:25,920 --> 00:01:31,890
people basically reacted to the

36
00:01:28,530 --> 00:01:33,630
discovery of the TL bleed attack<font color="#CCCCCC"> all</font>

37
00:01:31,890 --> 00:01:39,329
<font color="#CCCCCC">right so what are cache attacks</font>

38
00:01:33,630 --> 00:01:41,009
so to understand cache attacks you first

39
00:01:39,329 --> 00:01:43,679
need to understand what side channels

40
00:01:41,009 --> 00:01:45,390
are and so if I want<font color="#E5E5E5"> to basically</font>

41
00:01:43,680 --> 00:01:48,360
introduce<font color="#E5E5E5"> it</font><font color="#CCCCCC"> I would say like it is</font>

42
00:01:45,390 --> 00:01:50,909
basically<font color="#CCCCCC"> something some mechanism that</font>

43
00:01:48,360 --> 00:01:52,770
allows you<font color="#CCCCCC"> to leak some secret</font>

44
00:01:50,909 --> 00:01:56,909
information<font color="#CCCCCC"> without you directly asking</font>

45
00:01:52,770 --> 00:01:59,039
for it<font color="#E5E5E5"> and basically to make it more to</font>

46
00:01:56,909 --> 00:02:02,280
give a more<font color="#CCCCCC"> real-life</font><font color="#E5E5E5"> example we always</font>

47
00:01:59,040 --> 00:02:05,460
<font color="#E5E5E5">use this this</font><font color="#CCCCCC"> teeth was trying to steal</font>

48
00:02:02,280 --> 00:02:06,869
something<font color="#E5E5E5"> from this safe and this person</font>

49
00:02:05,460 --> 00:02:10,500
<font color="#CCCCCC">was</font><font color="#E5E5E5"> basically wearing a stethoscope</font>

50
00:02:06,869 --> 00:02:13,410
<font color="#CCCCCC">trying to listen</font><font color="#E5E5E5"> to how the the lock is</font>

51
00:02:10,500 --> 00:02:15,030
sounding whenever you try to<font color="#E5E5E5"> basically</font>

52
00:02:13,410 --> 00:02:16,620
figure<font color="#E5E5E5"> out the combination now if you</font>

53
00:02:15,030 --> 00:02:17,460
want to go through the real<font color="#E5E5E5"> channel</font>

54
00:02:16,620 --> 00:02:18,900
<font color="#E5E5E5">right</font>

55
00:02:17,460 --> 00:02:22,230
you have to<font color="#CCCCCC"> brute-force it right and it</font>

56
00:02:18,900 --> 00:02:24,480
would take maybe days if not years right

57
00:02:22,230 --> 00:02:27,810
and<font color="#E5E5E5"> then of course the burglar doesn't</font>

58
00:02:24,480 --> 00:02:30,600
<font color="#E5E5E5">have this</font><font color="#CCCCCC"> much time</font><font color="#E5E5E5"> so basically</font><font color="#CCCCCC"> by just</font>

59
00:02:27,810 --> 00:02:32,910
listening<font color="#E5E5E5"> through the the</font><font color="#CCCCCC"> mechanism in</font>

60
00:02:30,600 --> 00:02:35,460
the lock<font color="#E5E5E5"> the the burglar could figure</font>

61
00:02:32,910 --> 00:02:37,650
out<font color="#E5E5E5"> what the combination</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> and there is</font>

62
00:02:35,460 --> 00:02:40,610
a<font color="#CCCCCC"> share</font><font color="#E5E5E5"> channel between the burglar and</font>

63
00:02:37,650 --> 00:02:42,990
<font color="#E5E5E5">this mechanism in</font><font color="#CCCCCC"> which the the select</font>

64
00:02:40,610 --> 00:02:44,550
the secret is being leaked<font color="#CCCCCC"> the secret</font>

65
00:02:42,990 --> 00:02:47,580
being this combination and<font color="#E5E5E5"> this share</font>

66
00:02:44,550 --> 00:02:49,200
channel is the air<font color="#E5E5E5"> right so it's a sound</font>

67
00:02:47,580 --> 00:02:50,700
<font color="#E5E5E5">right and then there is this air which</font>

68
00:02:49,200 --> 00:02:52,200
is shared and<font color="#E5E5E5"> then this basically</font>

69
00:02:50,700 --> 00:02:53,880
<font color="#E5E5E5">through this air the sound basically</font>

70
00:02:52,200 --> 00:02:57,149
gets leaked and then suddenly you can

71
00:02:53,880 --> 00:02:59,940
<font color="#E5E5E5">figure</font><font color="#CCCCCC"> out what what the secret is so</font>

72
00:02:57,150 --> 00:03:03,030
this is in a<font color="#CCCCCC"> real world</font><font color="#E5E5E5"> but okay so what</font>

73
00:02:59,940 --> 00:03:04,350
happens inside the CPU and for that we

74
00:03:03,030 --> 00:03:06,270
need<font color="#CCCCCC"> to understand what is being</font><font color="#E5E5E5"> shared</font>

75
00:03:04,350 --> 00:03:08,400
right<font color="#E5E5E5"> so if you now go and buy an Intel</font>

76
00:03:06,270 --> 00:03:10,020
CPU<font color="#CCCCCC"> or an AMD CPU well this one is</font>

77
00:03:08,400 --> 00:03:12,690
specifically an architecture<font color="#E5E5E5"> of an Intel</font>

78
00:03:10,020 --> 00:03:14,160
CPU so if you buy one<font color="#E5E5E5"> and you basically</font>

79
00:03:12,690 --> 00:03:16,079
try<font color="#E5E5E5"> to understand to look at the</font>

80
00:03:14,160 --> 00:03:18,630
<font color="#CCCCCC">architecture</font><font color="#E5E5E5"> diagram you you find out</font>

81
00:03:16,080 --> 00:03:21,150
that it<font color="#E5E5E5"> basically is architected in such</font>

82
00:03:18,630 --> 00:03:25,170
a way that<font color="#E5E5E5"> you have multiple cores right</font>

83
00:03:21,150 --> 00:03:26,880
and these CPUs these days<font color="#E5E5E5"> or on are all</font>

84
00:03:25,170 --> 00:03:29,160
based on<font color="#E5E5E5"> the one Neumann architecture</font>

85
00:03:26,880 --> 00:03:30,900
which means that you<font color="#E5E5E5"> have memory which</font>

86
00:03:29,160 --> 00:03:32,850
is<font color="#E5E5E5"> far away from the CPU but</font><font color="#CCCCCC"> it is very</font>

87
00:03:30,900 --> 00:03:36,960
<font color="#E5E5E5">slow so to make it fast you start having</font>

88
00:03:32,850 --> 00:03:39,690
caches right it needs<font color="#E5E5E5"> me and the faster</font>

89
00:03:36,960 --> 00:03:41,340
the closer<font color="#E5E5E5"> to the CPU the faster you</font>

90
00:03:39,690 --> 00:03:42,870
<font color="#E5E5E5">want these caches</font><font color="#CCCCCC"> to be which means that</font>

91
00:03:41,340 --> 00:03:44,640
they<font color="#E5E5E5"> have to</font><font color="#CCCCCC"> be smaller so this is like</font>

92
00:03:42,870 --> 00:03:46,380
basically the<font color="#CCCCCC"> fundamental way in</font><font color="#E5E5E5"> which</font>

93
00:03:44,640 --> 00:03:48,779
caches are designed if you want them<font color="#E5E5E5"> to</font>

94
00:03:46,380 --> 00:03:50,190
be fast they have to be a small<font color="#E5E5E5"> but as</font>

95
00:03:48,780 --> 00:03:53,220
you start<font color="#E5E5E5"> like</font><font color="#CCCCCC"> going further</font><font color="#E5E5E5"> away from</font>

96
00:03:50,190 --> 00:03:56,550
from the the course you start to share

97
00:03:53,220 --> 00:03:58,650
more<font color="#E5E5E5"> and more so for example at the the</font>

98
00:03:56,550 --> 00:04:01,260
lowest<font color="#CCCCCC"> level the the last level you have</font>

99
00:03:58,650 --> 00:04:04,710
a cache<font color="#CCCCCC"> that is shared</font><font color="#E5E5E5"> in between course</font>

100
00:04:01,260 --> 00:04:07,140
<font color="#E5E5E5">so basically</font><font color="#CCCCCC"> a core could</font><font color="#E5E5E5"> use some part</font>

101
00:04:04,710 --> 00:04:08,400
of the l3<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> also used by another</font>

102
00:04:07,140 --> 00:04:10,679
core in the system so<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> being</font>

103
00:04:08,400 --> 00:04:12,240
shared between<font color="#E5E5E5"> these cores and from my</font>

104
00:04:10,680 --> 00:04:13,590
previous examples now you immediately

105
00:04:12,240 --> 00:04:16,680
can see that this could<font color="#E5E5E5"> lead</font><font color="#CCCCCC"> to some</font>

106
00:04:13,590 --> 00:04:18,149
problems<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so and you might also</font>

107
00:04:16,680 --> 00:04:19,739
wonder<font color="#E5E5E5"> like at the upper levels for</font>

108
00:04:18,149 --> 00:04:22,140
<font color="#CCCCCC">example if you look</font><font color="#E5E5E5"> at this l2 what else</font>

109
00:04:19,738 --> 00:04:23,549
could be shared<font color="#CCCCCC"> so if you look at</font><font color="#E5E5E5"> the</font>

110
00:04:22,140 --> 00:04:25,500
core so this is not<font color="#CCCCCC"> just a single</font>

111
00:04:23,550 --> 00:04:27,210
<font color="#E5E5E5">execution context oftentimes you have</font>

112
00:04:25,500 --> 00:04:28,860
<font color="#CCCCCC">now threads in Hardware</font>

113
00:04:27,210 --> 00:04:30,330
<font color="#E5E5E5">you have these things that are info</font>

114
00:04:28,860 --> 00:04:32,910
<font color="#CCCCCC">Kazem hyper threats right that are</font>

115
00:04:30,330 --> 00:04:36,120
basically<font color="#CCCCCC"> sharing these</font><font color="#E5E5E5"> upper level</font><font color="#CCCCCC"> cash</font>

116
00:04:32,910 --> 00:04:38,880
is like l1 and l2<font color="#E5E5E5"> all right</font>

117
00:04:36,120 --> 00:04:42,150
so and you use these shared resources to

118
00:04:38,880 --> 00:04:44,310
build side channel attacks so it is not

119
00:04:42,150 --> 00:04:46,169
<font color="#E5E5E5">just the CPU caches that I just told you</font>

120
00:04:44,310 --> 00:04:49,139
about<font color="#E5E5E5"> but also your memory is shared</font>

121
00:04:46,169 --> 00:04:53,490
between<font color="#E5E5E5"> different execution contexts</font>

122
00:04:49,139 --> 00:04:54,960
your your TLD<font color="#E5E5E5"> is also shared this is</font>

123
00:04:53,490 --> 00:04:57,479
which<font color="#E5E5E5"> is a different cache which we will</font>

124
00:04:54,960 --> 00:04:59,340
get<font color="#E5E5E5"> into soon</font><font color="#CCCCCC"> and using all of these</font>

125
00:04:57,479 --> 00:05:02,070
shared resources basically you can leak

126
00:04:59,340 --> 00:05:03,210
information<font color="#E5E5E5"> but it's not always the</font><font color="#CCCCCC"> case</font>

127
00:05:02,070 --> 00:05:05,039
<font color="#E5E5E5">that you want to leak something</font>

128
00:05:03,210 --> 00:05:06,810
<font color="#E5E5E5">sometimes you don't want to allow two</font>

129
00:05:05,039 --> 00:05:09,030
different<font color="#CCCCCC"> processors for example to</font>

130
00:05:06,810 --> 00:05:11,669
<font color="#E5E5E5">communicate with each other directly</font><font color="#CCCCCC"> but</font>

131
00:05:09,030 --> 00:05:13,229
by using this shared medium they could

132
00:05:11,669 --> 00:05:15,030
indirectly communicate with each other

133
00:05:13,229 --> 00:05:18,060
<font color="#E5E5E5">so if there is a shared medium and I</font>

134
00:05:15,030 --> 00:05:19,619
start to<font color="#CCCCCC"> use it then</font><font color="#E5E5E5"> the other entity</font>

135
00:05:18,060 --> 00:05:21,360
that<font color="#CCCCCC"> wants to</font><font color="#E5E5E5"> use this wouldn't be</font><font color="#CCCCCC"> able</font>

136
00:05:19,620 --> 00:05:23,580
<font color="#CCCCCC">to</font><font color="#E5E5E5"> use it as fast for example</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this</font>

137
00:05:21,360 --> 00:05:25,050
could<font color="#E5E5E5"> be this</font><font color="#CCCCCC"> principle could</font><font color="#E5E5E5"> be used</font><font color="#CCCCCC"> to</font>

138
00:05:23,580 --> 00:05:27,330
build a<font color="#E5E5E5"> communication channel so</font>

139
00:05:25,050 --> 00:05:28,979
whenever I want<font color="#E5E5E5"> to send a</font><font color="#CCCCCC"> 1-bit</font><font color="#E5E5E5"> I start</font>

140
00:05:27,330 --> 00:05:30,539
using it and<font color="#E5E5E5"> then the other the other</font>

141
00:05:28,979 --> 00:05:32,550
entity will know<font color="#CCCCCC"> that I'm using it</font><font color="#E5E5E5"> and</font>

142
00:05:30,539 --> 00:05:36,389
this means<font color="#E5E5E5"> that I'm sending</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> one bit</font>

143
00:05:32,550 --> 00:05:37,940
<font color="#E5E5E5">right and so but sometimes so this is</font>

144
00:05:36,389 --> 00:05:40,110
fine<font color="#CCCCCC"> it means that</font><font color="#E5E5E5"> both</font><font color="#CCCCCC"> of these</font>

145
00:05:37,940 --> 00:05:42,330
processes<font color="#E5E5E5"> are cooperating</font><font color="#CCCCCC"> with each</font>

146
00:05:40,110 --> 00:05:44,340
other<font color="#E5E5E5"> but the more</font><font color="#CCCCCC"> interesting case is</font>

147
00:05:42,330 --> 00:05:46,229
when one<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> processes</font><font color="#E5E5E5"> is just a</font>

148
00:05:44,340 --> 00:05:48,239
<font color="#E5E5E5">victim that doesn't know what is</font>

149
00:05:46,229 --> 00:05:49,859
happening<font color="#E5E5E5"> and then the other process</font>

150
00:05:48,240 --> 00:05:52,259
tries to understand what<font color="#E5E5E5"> this victim</font>

151
00:05:49,860 --> 00:05:54,840
process is<font color="#E5E5E5"> doing and this is what is</font>

152
00:05:52,259 --> 00:05:57,060
known<font color="#CCCCCC"> as the side</font><font color="#E5E5E5"> channel attack so</font>

153
00:05:54,840 --> 00:05:58,919
basically allows the add one entity<font color="#E5E5E5"> at</font>

154
00:05:57,060 --> 00:06:04,590
<font color="#E5E5E5">the attacker entity to spy on the other</font>

155
00:05:58,919 --> 00:06:06,508
entity so to basically make this a

156
00:06:04,590 --> 00:06:08,489
<font color="#CCCCCC">little bit more concrete I will give you</font>

157
00:06:06,509 --> 00:06:10,800
an<font color="#E5E5E5"> example a very</font><font color="#CCCCCC"> famous example which</font>

158
00:06:08,490 --> 00:06:14,009
is called a flush<font color="#E5E5E5"> and reload attack this</font>

159
00:06:10,800 --> 00:06:16,740
work has been<font color="#E5E5E5"> published by you well and</font>

160
00:06:14,009 --> 00:06:19,280
Katrina<font color="#E5E5E5"> and I</font><font color="#CCCCCC"> explained how this works</font>

161
00:06:16,740 --> 00:06:22,469
so<font color="#E5E5E5"> here on top we</font><font color="#CCCCCC"> have an attacker</font>

162
00:06:19,280 --> 00:06:24,150
<font color="#E5E5E5">process and a victim process and then</font>

163
00:06:22,469 --> 00:06:26,550
the attacker is doing a bunch of

164
00:06:24,150 --> 00:06:28,500
operations<font color="#CCCCCC"> to</font><font color="#E5E5E5"> figure out whether the</font>

165
00:06:26,550 --> 00:06:30,840
victim is<font color="#E5E5E5"> doing a</font><font color="#CCCCCC"> certain memory access</font>

166
00:06:28,500 --> 00:06:33,900
or not<font color="#E5E5E5"> right and then later I will</font>

167
00:06:30,840 --> 00:06:35,159
basically show<font color="#CCCCCC"> you why</font><font color="#E5E5E5"> this detection of</font>

168
00:06:33,900 --> 00:06:37,409
whether the victim is<font color="#E5E5E5"> doing a memory</font>

169
00:06:35,159 --> 00:06:39,330
<font color="#E5E5E5">access is good enough for</font><font color="#CCCCCC"> the attacker</font>

170
00:06:37,409 --> 00:06:40,469
<font color="#E5E5E5">to figure out basically a cryptographic</font>

171
00:06:39,330 --> 00:06:43,740
key

172
00:06:40,470 --> 00:06:46,050
so<font color="#E5E5E5"> here is what the attacker will do so</font>

173
00:06:43,740 --> 00:06:48,150
the attacker will flush a certain part

174
00:06:46,050 --> 00:06:50,130
of the<font color="#CCCCCC"> cache</font><font color="#E5E5E5"> right one part of the cache</font>

175
00:06:48,150 --> 00:06:53,099
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> the attacker waits for</font><font color="#E5E5E5"> a while</font>

176
00:06:50,130 --> 00:06:55,560
<font color="#E5E5E5">right another attacker tries to</font><font color="#CCCCCC"> access</font>

177
00:06:53,100 --> 00:06:58,200
that location<font color="#E5E5E5"> in the cache</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> now</font>

178
00:06:55,560 --> 00:07:01,020
<font color="#E5E5E5">because the attacker has flushed this</font>

179
00:06:58,200 --> 00:07:03,360
location<font color="#CCCCCC"> if the location is still</font>

180
00:07:01,020 --> 00:07:06,479
flushed<font color="#E5E5E5"> the access is going to be a slow</font>

181
00:07:03,360 --> 00:07:08,280
<font color="#E5E5E5">and so in this case the victim is</font><font color="#CCCCCC"> doing</font>

182
00:07:06,480 --> 00:07:09,540
something<font color="#E5E5E5"> else</font><font color="#CCCCCC"> is not doing access at</font>

183
00:07:08,280 --> 00:07:10,770
that memory<font color="#CCCCCC"> location which</font><font color="#E5E5E5"> would mean</font>

184
00:07:09,540 --> 00:07:13,800
that<font color="#E5E5E5"> basically the access has not</font>

185
00:07:10,770 --> 00:07:15,840
happened<font color="#E5E5E5"> right</font><font color="#CCCCCC"> in the second case</font><font color="#E5E5E5"> right</font>

186
00:07:13,800 --> 00:07:18,240
the attacker does the same thing<font color="#CCCCCC"> it</font>

187
00:07:15,840 --> 00:07:20,010
flushes the cache<font color="#E5E5E5"> but in the meantime</font>

188
00:07:18,240 --> 00:07:21,600
the victim<font color="#E5E5E5"> doesn't memory access this</font>

189
00:07:20,010 --> 00:07:24,690
time<font color="#CCCCCC"> now this would</font><font color="#E5E5E5"> mean</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this</font>

190
00:07:21,600 --> 00:07:26,970
location<font color="#CCCCCC"> is now cached</font><font color="#E5E5E5"> right and then</font>

191
00:07:24,690 --> 00:07:29,070
the attacker tries to check whether this

192
00:07:26,970 --> 00:07:31,500
location is cached<font color="#E5E5E5"> or not and this time</font>

193
00:07:29,070 --> 00:07:33,330
because this the the memory location<font color="#E5E5E5"> is</font>

194
00:07:31,500 --> 00:07:35,700
now in the cache this operation happens

195
00:07:33,330 --> 00:07:38,669
faster<font color="#E5E5E5"> and now the attacker could detect</font>

196
00:07:35,700 --> 00:07:41,820
that<font color="#CCCCCC"> basically the victim has performed</font>

197
00:07:38,670 --> 00:07:44,760
a memory access<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> use this too as</font>

198
00:07:41,820 --> 00:07:47,969
I said attack<font color="#CCCCCC"> eclipta graphic</font>

199
00:07:44,760 --> 00:07:50,370
implementation here<font color="#E5E5E5"> for example assuming</font>

200
00:07:47,970 --> 00:07:52,860
an<font color="#CCCCCC"> aes implementation that uses t-table</font>

201
00:07:50,370 --> 00:07:55,080
<font color="#CCCCCC">I'm using a lot of</font><font color="#E5E5E5"> words</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you may</font>

202
00:07:52,860 --> 00:07:56,940
not understand but<font color="#CCCCCC"> the thing that</font><font color="#E5E5E5"> you</font>

203
00:07:55,080 --> 00:07:58,770
<font color="#E5E5E5">you the only</font><font color="#CCCCCC"> thing that you need to</font>

204
00:07:56,940 --> 00:08:00,510
<font color="#E5E5E5">understand is that the attacker just</font>

205
00:07:58,770 --> 00:08:03,539
<font color="#E5E5E5">tries to understand whether this table</font>

206
00:08:00,510 --> 00:08:05,969
has<font color="#CCCCCC"> been accessed or not so here you</font>

207
00:08:03,540 --> 00:08:08,010
have a table<font color="#E5E5E5"> and basically the the</font>

208
00:08:05,970 --> 00:08:10,940
<font color="#E5E5E5">location in which table which</font><font color="#CCCCCC"> is getting</font>

209
00:08:08,010 --> 00:08:14,190
<font color="#E5E5E5">access every time you know this this AES</font>

210
00:08:10,940 --> 00:08:17,219
operation is happening<font color="#CCCCCC"> depends on the</font>

211
00:08:14,190 --> 00:08:18,690
secret key<font color="#E5E5E5"> and the input</font><font color="#CCCCCC"> that the</font>

212
00:08:17,220 --> 00:08:21,660
attacker could provide so you give a

213
00:08:18,690 --> 00:08:23,910
plaintext and then depending on<font color="#E5E5E5"> the veto</font>

214
00:08:21,660 --> 00:08:25,860
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the key some location in this table</font>

215
00:08:23,910 --> 00:08:27,060
<font color="#E5E5E5">gets</font><font color="#CCCCCC"> accessed and now using the</font>

216
00:08:25,860 --> 00:08:28,770
<font color="#E5E5E5">primitives that I just told you about</font>

217
00:08:27,060 --> 00:08:30,060
the<font color="#CCCCCC"> attacker could</font><font color="#E5E5E5"> figure out basically</font>

218
00:08:28,770 --> 00:08:32,640
visual occasion in<font color="#E5E5E5"> this table is</font>

219
00:08:30,060 --> 00:08:34,349
<font color="#E5E5E5">accessed and since the attacker we</font>

220
00:08:32,640 --> 00:08:36,240
<font color="#CCCCCC">assumed that knows also</font><font color="#E5E5E5"> the plaintext</font>

221
00:08:34,349 --> 00:08:41,729
it could basically figure out the secret

222
00:08:36,240 --> 00:08:43,080
bit<font color="#E5E5E5"> so the secrets are by this by the</font>

223
00:08:41,729 --> 00:08:46,290
<font color="#CCCCCC">virtue of</font><font color="#E5E5E5"> these memory access the</font>

224
00:08:43,080 --> 00:08:48,630
secrets are being betrayed and by

225
00:08:46,290 --> 00:08:49,860
<font color="#E5E5E5">controlling the plaintiff plaintext and</font>

226
00:08:48,630 --> 00:08:52,170
looking at the<font color="#E5E5E5"> memory access you</font><font color="#CCCCCC"> can</font>

227
00:08:49,860 --> 00:08:53,820
recover<font color="#E5E5E5"> the key so you might wonder</font><font color="#CCCCCC"> how</font>

228
00:08:52,170 --> 00:08:55,890
this looks like<font color="#E5E5E5"> and he</font>

229
00:08:53,820 --> 00:08:57,780
for example the<font color="#E5E5E5"> attacker could detect</font>

230
00:08:55,890 --> 00:08:59,370
these these<font color="#CCCCCC"> bites this</font><font color="#E5E5E5"> so like this</font>

231
00:08:57,780 --> 00:09:01,800
these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> the latency measurements</font><font color="#E5E5E5"> and</font>

232
00:08:59,370 --> 00:09:03,720
like if it is<font color="#E5E5E5"> black it</font><font color="#CCCCCC"> means that</font>

233
00:09:01,800 --> 00:09:05,880
<font color="#CCCCCC">basically it was quite a fast operation</font>

234
00:09:03,720 --> 00:09:07,230
and basically<font color="#E5E5E5"> doing by</font><font color="#CCCCCC"> doing these</font>

235
00:09:05,880 --> 00:09:10,140
measurements we can<font color="#E5E5E5"> figure</font><font color="#CCCCCC"> out basically</font>

236
00:09:07,230 --> 00:09:11,970
<font color="#E5E5E5">that</font><font color="#CCCCCC"> given the plain text which cache</font>

237
00:09:10,140 --> 00:09:16,290
line was<font color="#E5E5E5"> accessed and this allows you to</font>

238
00:09:11,970 --> 00:09:18,210
lick the the secret secret value and so

239
00:09:16,290 --> 00:09:20,250
we have another example<font color="#CCCCCC"> for you where we</font>

240
00:09:18,210 --> 00:09:23,400
visualize these<font color="#E5E5E5"> so like accesses in the</font>

241
00:09:20,250 --> 00:09:23,840
cache<font color="#CCCCCC"> so and this example uses the Lib G</font>

242
00:09:23,400 --> 00:09:26,069
crypt

243
00:09:23,840 --> 00:09:29,240
<font color="#CCCCCC">ECC point multiplication which is</font>

244
00:09:26,070 --> 00:09:31,380
another cryptographic routine and

245
00:09:29,240 --> 00:09:33,480
basically it works<font color="#E5E5E5"> like that so don't</font>

246
00:09:31,380 --> 00:09:34,740
look<font color="#E5E5E5"> at all these so like code that is</font>

247
00:09:33,480 --> 00:09:36,840
<font color="#E5E5E5">there the only</font><font color="#CCCCCC"> thing that you need to</font>

248
00:09:34,740 --> 00:09:39,830
<font color="#E5E5E5">worry</font><font color="#CCCCCC"> about is this basically routine</font>

249
00:09:36,840 --> 00:09:42,930
that gets basically<font color="#E5E5E5"> execute execute</font>

250
00:09:39,830 --> 00:09:45,270
executed and it depends<font color="#E5E5E5"> on this scalar</font>

251
00:09:42,930 --> 00:09:48,839
which comes from<font color="#E5E5E5"> your</font><font color="#CCCCCC"> cue to graphic key</font>

252
00:09:45,270 --> 00:09:51,000
and if<font color="#E5E5E5"> this bit is set then basically</font>

253
00:09:48,840 --> 00:09:53,520
there<font color="#E5E5E5"> is an addition operation that that</font>

254
00:09:51,000 --> 00:09:54,990
happens right so if we can<font color="#E5E5E5"> detect</font>

255
00:09:53,520 --> 00:09:57,270
whether<font color="#E5E5E5"> this addition operation is</font>

256
00:09:54,990 --> 00:10:00,750
happening it means that this this<font color="#E5E5E5"> bit</font>

257
00:09:57,270 --> 00:10:02,250
location is<font color="#CCCCCC"> 1 and otherwise</font><font color="#E5E5E5"> is 0 so</font>

258
00:10:00,750 --> 00:10:03,780
let's look<font color="#E5E5E5"> at basically when we give an</font>

259
00:10:02,250 --> 00:10:05,490
input<font color="#E5E5E5"> to this function how does it look</font>

260
00:10:03,780 --> 00:10:10,439
<font color="#E5E5E5">like it</font><font color="#CCCCCC"> looks</font><font color="#E5E5E5"> like from the point of the</font>

261
00:10:05,490 --> 00:10:13,080
<font color="#E5E5E5">cache so this is how it looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> so</font>

262
00:10:10,440 --> 00:10:15,270
the blue<font color="#CCCCCC"> one is</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> the key if the key</font>

263
00:10:13,080 --> 00:10:18,050
bit is<font color="#E5E5E5"> 0 and the green one if it is</font><font color="#CCCCCC"> 1</font>

264
00:10:15,270 --> 00:10:23,610
obviously you can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> that whenever the</font>

265
00:10:18,050 --> 00:10:26,370
<font color="#E5E5E5">the bit is 0 the operation is shorter</font>

266
00:10:23,610 --> 00:10:28,590
<font color="#E5E5E5">but</font><font color="#CCCCCC"> more importantly whenever the bit is</font>

267
00:10:26,370 --> 00:10:30,000
1<font color="#CCCCCC"> it</font><font color="#E5E5E5"> also the type of access patterns</font>

268
00:10:28,590 --> 00:10:32,310
that happen is a little bit more

269
00:10:30,000 --> 00:10:33,780
different<font color="#CCCCCC"> and to actually understand</font>

270
00:10:32,310 --> 00:10:35,760
<font color="#E5E5E5">this a</font><font color="#CCCCCC"> little bit better we have tried</font>

271
00:10:33,780 --> 00:10:37,380
to<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> put them back to back to</font>

272
00:10:35,760 --> 00:10:39,689
see how they look like<font color="#E5E5E5"> and they look</font>

273
00:10:37,380 --> 00:10:41,640
<font color="#CCCCCC">like this</font><font color="#E5E5E5"> by the way the upper part is</font>

274
00:10:39,690 --> 00:10:43,650
data I<font color="#CCCCCC"> think and the lower part is</font>

275
00:10:41,640 --> 00:10:46,920
caught<font color="#E5E5E5"> so here for example you can see</font>

276
00:10:43,650 --> 00:10:49,500
<font color="#E5E5E5">that the blue part is basically when the</font>

277
00:10:46,920 --> 00:10:51,449
bit is 0 and the green part<font color="#E5E5E5"> is when the</font>

278
00:10:49,500 --> 00:10:53,790
bit is 1 so operation takes longer now

279
00:10:51,450 --> 00:10:57,000
it<font color="#E5E5E5"> might not immediately be obvious for</font>

280
00:10:53,790 --> 00:10:58,740
<font color="#E5E5E5">you what the difference into this so so</font>

281
00:10:57,000 --> 00:11:01,020
you need to do some statistical analysis

282
00:10:58,740 --> 00:11:02,760
<font color="#E5E5E5">and then gives an example of</font><font color="#CCCCCC"> this</font>

283
00:11:01,020 --> 00:11:04,920
statistical analysis when he talks about

284
00:11:02,760 --> 00:11:07,350
his TL<font color="#E5E5E5"> delete attack the</font><font color="#CCCCCC"> only thing that</font>

285
00:11:04,920 --> 00:11:07,649
you need to believe<font color="#E5E5E5"> me</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> is that there</font>

286
00:11:07,350 --> 00:11:11,670
is a

287
00:11:07,649 --> 00:11:14,610
friends between<font color="#E5E5E5"> these two</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> okay</font>

288
00:11:11,670 --> 00:11:16,050
<font color="#E5E5E5">so now let's look at so people of course</font>

289
00:11:14,610 --> 00:11:18,360
realize that this is a problem<font color="#CCCCCC"> and let's</font>

290
00:11:16,050 --> 00:11:20,550
fix this<font color="#E5E5E5"> right so they try to change the</font>

291
00:11:18,360 --> 00:11:24,179
cryptographic function to make it more

292
00:11:20,550 --> 00:11:26,248
constant time<font color="#E5E5E5"> and so when we execute the</font>

293
00:11:24,179 --> 00:11:28,199
one that is<font color="#E5E5E5"> actually safe the accesses</font>

294
00:11:26,249 --> 00:11:29,970
all look like this<font color="#E5E5E5"> right so it looks</font>

295
00:11:28,199 --> 00:11:32,729
<font color="#CCCCCC">like they're</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> the same</font><font color="#E5E5E5"> and we would</font>

296
00:11:29,970 --> 00:11:35,100
<font color="#E5E5E5">not</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to actually see the</font><font color="#CCCCCC"> signal</font>

297
00:11:32,730 --> 00:11:36,959
from this<font color="#E5E5E5"> bit key that is one but</font>

298
00:11:35,100 --> 00:11:38,910
actually<font color="#E5E5E5"> what they do is that they do</font>

299
00:11:36,959 --> 00:11:41,040
all<font color="#E5E5E5"> this operation as if you know</font>

300
00:11:38,910 --> 00:11:43,079
<font color="#CCCCCC">regardless of the bit in the keyboard</font><font color="#E5E5E5"> at</font>

301
00:11:41,040 --> 00:11:45,959
the<font color="#E5E5E5"> very end they only commit the</font>

302
00:11:43,079 --> 00:11:48,449
results if the bit is<font color="#CCCCCC"> one</font><font color="#E5E5E5"> all right so</font>

303
00:11:45,959 --> 00:11:50,550
instead<font color="#CCCCCC"> of using</font><font color="#E5E5E5"> all this lock operation</font>

304
00:11:48,449 --> 00:11:53,969
<font color="#E5E5E5">all the time you see it at the</font><font color="#CCCCCC"> very end</font>

305
00:11:50,550 --> 00:11:56,219
<font color="#CCCCCC">so</font><font color="#E5E5E5"> if they keep the bit of the key is</font>

306
00:11:53,970 --> 00:11:58,350
one there<font color="#E5E5E5"> is some little operation here</font>

307
00:11:56,220 --> 00:12:00,569
<font color="#CCCCCC">that happens that is</font><font color="#E5E5E5"> a little</font><font color="#CCCCCC"> bit</font>

308
00:11:58,350 --> 00:12:02,129
different<font color="#CCCCCC"> and using this at the</font><font color="#E5E5E5"> very end</font>

309
00:12:00,569 --> 00:12:04,979
instead of happening all the<font color="#E5E5E5"> time we</font>

310
00:12:02,129 --> 00:12:08,490
could still figure<font color="#CCCCCC"> out that the key bit</font>

311
00:12:04,980 --> 00:12:11,490
is 1 or 0<font color="#CCCCCC"> and so the the select the</font>

312
00:12:08,490 --> 00:12:12,749
<font color="#CCCCCC">result of</font><font color="#E5E5E5"> this story is that the moral</font>

313
00:12:11,490 --> 00:12:16,410
<font color="#CCCCCC">of the story is that this is</font><font color="#E5E5E5"> actually</font>

314
00:12:12,749 --> 00:12:19,410
<font color="#E5E5E5">not so easy to build constant time</font><font color="#CCCCCC"> cash</font>

315
00:12:16,410 --> 00:12:21,480
implementations<font color="#E5E5E5"> so we have realized this</font>

316
00:12:19,410 --> 00:12:24,089
and<font color="#E5E5E5"> we have started like coming up with</font>

317
00:12:21,480 --> 00:12:26,160
<font color="#E5E5E5">more protections against this so forget</font>

318
00:12:24,089 --> 00:12:28,559
<font color="#CCCCCC">that like the software could not do this</font>

319
00:12:26,160 --> 00:12:31,079
in a safe way well if we could build

320
00:12:28,559 --> 00:12:33,779
some<font color="#CCCCCC"> protections in which if</font><font color="#E5E5E5"> we run some</font>

321
00:12:31,079 --> 00:12:35,519
software some piece<font color="#CCCCCC"> of code then</font><font color="#E5E5E5"> it will</font>

322
00:12:33,779 --> 00:12:37,079
<font color="#CCCCCC">always be side-channel</font><font color="#E5E5E5"> free so</font>

323
00:12:35,519 --> 00:12:38,519
<font color="#CCCCCC">regardless</font><font color="#E5E5E5"> of what the software is</font><font color="#CCCCCC"> doing</font>

324
00:12:37,079 --> 00:12:40,410
could we make it<font color="#E5E5E5"> in a way that</font><font color="#CCCCCC"> it will</font>

325
00:12:38,519 --> 00:12:42,839
<font color="#E5E5E5">be protected</font><font color="#CCCCCC"> against this cash</font><font color="#E5E5E5"> attacks</font>

326
00:12:40,410 --> 00:12:44,339
so that's what the defense<font color="#E5E5E5"> is coming to</font>

327
00:12:42,839 --> 00:12:45,689
play<font color="#E5E5E5"> well the defense is coming</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> play</font>

328
00:12:44,339 --> 00:12:48,839
and I'm<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to tell you a bunch of</font>

329
00:12:45,689 --> 00:12:51,719
<font color="#E5E5E5">these examples of these</font><font color="#CCCCCC"> cash defenses so</font>

330
00:12:48,839 --> 00:12:55,769
the first one<font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> tries to</font>

331
00:12:51,720 --> 00:12:58,139
partition<font color="#E5E5E5"> the cash here you can see the</font>

332
00:12:55,769 --> 00:13:00,660
first<font color="#E5E5E5"> diagram that I showed you</font><font color="#CCCCCC"> earlier</font>

333
00:12:58,139 --> 00:13:02,549
and here you<font color="#E5E5E5"> can see that the l3 is is</font>

334
00:13:00,660 --> 00:13:05,309
shared<font color="#E5E5E5"> within this course so assume that</font>

335
00:13:02,549 --> 00:13:07,259
<font color="#CCCCCC">I want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> protect the first code from</font>

336
00:13:05,309 --> 00:13:10,679
<font color="#E5E5E5">the second code what I can do is I can</font>

337
00:13:07,259 --> 00:13:13,410
partition<font color="#E5E5E5"> my</font><font color="#CCCCCC"> cache</font><font color="#E5E5E5"> in a way that core</font><font color="#CCCCCC"> 0</font>

338
00:13:10,679 --> 00:13:15,870
does<font color="#E5E5E5"> not have</font><font color="#CCCCCC"> access for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> to the</font>

339
00:13:13,410 --> 00:13:17,910
part of the cache<font color="#CCCCCC"> that core 1 could</font>

340
00:13:15,870 --> 00:13:19,589
access so if I make<font color="#E5E5E5"> this perfect</font>

341
00:13:17,910 --> 00:13:21,550
isolation<font color="#E5E5E5"> between these</font><font color="#CCCCCC"> two then I</font>

342
00:13:19,589 --> 00:13:23,740
cannot do a cache attack through l3 for

343
00:13:21,550 --> 00:13:25,910
<font color="#E5E5E5">let's see how this is</font><font color="#CCCCCC"> done in practice</font>

344
00:13:23,740 --> 00:13:30,069
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is by the way</font><font color="#CCCCCC"> a technique that</font><font color="#E5E5E5"> is</font>

345
00:13:25,910 --> 00:13:32,480
most commonly<font color="#CCCCCC"> known as</font><font color="#E5E5E5"> cash coloring and</font>

346
00:13:30,069 --> 00:13:34,189
the reason why they're called color is

347
00:13:32,480 --> 00:13:37,310
so<font color="#CCCCCC"> elect to make it easier to understand</font>

348
00:13:34,190 --> 00:13:40,009
<font color="#E5E5E5">what you want to figure</font><font color="#CCCCCC"> out is</font><font color="#E5E5E5"> how your</font>

349
00:13:37,310 --> 00:13:42,680
memory<font color="#E5E5E5"> addresses are mapped</font><font color="#CCCCCC"> to cache</font>

350
00:13:40,009 --> 00:13:44,569
locations and since there<font color="#CCCCCC"> are</font><font color="#E5E5E5"> a limited</font>

351
00:13:42,680 --> 00:13:46,638
<font color="#E5E5E5">number of cache locations you could</font>

352
00:13:44,569 --> 00:13:48,680
attach a tag to it and call it<font color="#CCCCCC"> a color</font>

353
00:13:46,639 --> 00:13:50,750
so you could say<font color="#E5E5E5"> like okay I have</font><font color="#CCCCCC"> a</font>

354
00:13:48,680 --> 00:13:52,279
color blue and all these memory

355
00:13:50,750 --> 00:13:55,610
addresses in the system would<font color="#E5E5E5"> map</font><font color="#CCCCCC"> to</font>

356
00:13:52,279 --> 00:13:57,019
color blue right and this<font color="#E5E5E5"> is how it</font>

357
00:13:55,610 --> 00:13:59,029
<font color="#E5E5E5">would look</font><font color="#CCCCCC"> like so if you can</font><font color="#E5E5E5"> figure out</font>

358
00:13:57,019 --> 00:14:01,129
this mapping<font color="#E5E5E5"> between your memory</font>

359
00:13:59,029 --> 00:14:03,620
addresses to cache locations<font color="#CCCCCC"> you could</font>

360
00:14:01,129 --> 00:14:05,629
basically partition the system by giving

361
00:14:03,620 --> 00:14:07,399
<font color="#CCCCCC">different processes</font><font color="#E5E5E5"> different memory</font>

362
00:14:05,629 --> 00:14:09,980
addresses so they would map<font color="#CCCCCC"> to different</font>

363
00:14:07,399 --> 00:14:15,829
parts of<font color="#E5E5E5"> the cache and then if you do</font>

364
00:14:09,980 --> 00:14:19,459
this then<font color="#E5E5E5"> say if one process only has</font>

365
00:14:15,829 --> 00:14:21,050
<font color="#E5E5E5">access to color blue then basically the</font>

366
00:14:19,459 --> 00:14:23,000
red process would<font color="#CCCCCC"> not be able to</font>

367
00:14:21,050 --> 00:14:25,880
interact with the part of<font color="#E5E5E5"> the cache that</font>

368
00:14:23,000 --> 00:14:28,250
<font color="#CCCCCC">is allocated to to</font><font color="#E5E5E5"> process that is blue</font>

369
00:14:25,880 --> 00:14:30,430
<font color="#E5E5E5">and this basically prevents this sharing</font>

370
00:14:28,250 --> 00:14:34,069
of<font color="#E5E5E5"> resources between these two processes</font>

371
00:14:30,430 --> 00:14:36,319
<font color="#CCCCCC">now this could stop cache attacks</font><font color="#E5E5E5"> but</font>

372
00:14:34,069 --> 00:14:38,089
the problem is that<font color="#CCCCCC"> now you have</font><font color="#E5E5E5"> so like</font>

373
00:14:36,319 --> 00:14:40,130
some limitation in<font color="#CCCCCC"> terms of how your</font>

374
00:14:38,089 --> 00:14:42,290
kernel or your operating<font color="#CCCCCC"> system</font><font color="#E5E5E5"> could</font>

375
00:14:40,130 --> 00:14:45,199
<font color="#E5E5E5">allocate memory to different processes</font>

376
00:14:42,290 --> 00:14:47,029
in<font color="#E5E5E5"> the system</font><font color="#CCCCCC"> and so</font><font color="#E5E5E5"> this this</font>

377
00:14:45,199 --> 00:14:48,410
limitation basically makes it quite

378
00:14:47,029 --> 00:14:50,269
complicated<font color="#E5E5E5"> to write memory management</font>

379
00:14:48,410 --> 00:14:52,399
code<font color="#CCCCCC"> I don't know how many of you</font><font color="#E5E5E5"> have</font>

380
00:14:50,269 --> 00:14:54,829
tried<font color="#CCCCCC"> to understand or fiddle</font><font color="#E5E5E5"> with</font>

381
00:14:52,399 --> 00:14:56,509
memory management<font color="#E5E5E5"> code if you have you</font>

382
00:14:54,829 --> 00:14:58,040
<font color="#E5E5E5">know that it is quite already as</font><font color="#CCCCCC"> it is</font>

383
00:14:56,509 --> 00:14:59,480
it's quite complicated so<font color="#E5E5E5"> if you want to</font>

384
00:14:58,040 --> 00:15:01,639
add more constraints to it it<font color="#E5E5E5"> becomes</font>

385
00:14:59,480 --> 00:15:03,699
certainly much much more<font color="#CCCCCC"> complicated so</font>

386
00:15:01,639 --> 00:15:05,540
people typically don't<font color="#E5E5E5"> like to do this</font>

387
00:15:03,699 --> 00:15:07,880
just<font color="#E5E5E5"> to give you a little bit more</font>

388
00:15:05,540 --> 00:15:09,829
<font color="#CCCCCC">information so that when</font><font color="#E5E5E5"> when Ben starts</font>

389
00:15:07,880 --> 00:15:11,870
introducing TLB you would understand<font color="#E5E5E5"> the</font>

390
00:15:09,829 --> 00:15:14,388
attack a little<font color="#CCCCCC"> bit better I will try to</font>

391
00:15:11,870 --> 00:15:16,899
<font color="#E5E5E5">explain how</font><font color="#CCCCCC"> these mapping between</font><font color="#E5E5E5"> memory</font>

392
00:15:14,389 --> 00:15:19,790
<font color="#E5E5E5">locations to cache locations happen so</font>

393
00:15:16,899 --> 00:15:22,759
basically your caches<font color="#E5E5E5"> are partitioned in</font>

394
00:15:19,790 --> 00:15:25,670
what we call sets<font color="#E5E5E5"> so here we are</font>

395
00:15:22,759 --> 00:15:29,870
basically showing different sets as this

396
00:15:25,670 --> 00:15:31,670
so like basically<font color="#E5E5E5"> horizontal boxes so</font>

397
00:15:29,870 --> 00:15:34,189
here is one set here<font color="#E5E5E5"> is the second set</font>

398
00:15:31,670 --> 00:15:35,329
<font color="#CCCCCC">and so on and each set</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> have some</font>

399
00:15:34,189 --> 00:15:37,009
<font color="#CCCCCC">spaces</font><font color="#E5E5E5"> so</font>

400
00:15:35,329 --> 00:15:38,899
<font color="#CCCCCC">summer space</font><font color="#E5E5E5"> it has a size in which</font>

401
00:15:37,009 --> 00:15:41,299
number<font color="#E5E5E5"> of entries could go to this set</font>

402
00:15:38,899 --> 00:15:43,249
and if you access more memory locations

403
00:15:41,299 --> 00:15:45,439
to that map<font color="#CCCCCC"> this</font><font color="#E5E5E5"> set you need to kick</font>

404
00:15:43,249 --> 00:15:46,790
out<font color="#CCCCCC"> some other entries from</font><font color="#E5E5E5"> this set to</font>

405
00:15:45,439 --> 00:15:49,009
make sure<font color="#E5E5E5"> that there is a space</font><font color="#CCCCCC"> for the</font>

406
00:15:46,790 --> 00:15:51,829
other one<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is known as ways</font><font color="#CCCCCC"> so</font>

407
00:15:49,009 --> 00:15:53,569
if<font color="#CCCCCC"> you're if you have say eight cache</font>

408
00:15:51,829 --> 00:15:55,399
sets with two ways<font color="#E5E5E5"> it would mean that</font>

409
00:15:53,569 --> 00:15:57,949
<font color="#E5E5E5">your memory address</font><font color="#CCCCCC"> address could go to</font>

410
00:15:55,399 --> 00:15:59,989
any<font color="#E5E5E5"> of these cache eight cache sets but</font>

411
00:15:57,949 --> 00:16:01,459
not more<font color="#CCCCCC"> than three of these memory</font>

412
00:15:59,989 --> 00:16:03,499
locations<font color="#E5E5E5"> that map</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> same cache</font>

413
00:16:01,459 --> 00:16:04,998
that could could<font color="#CCCCCC"> basically remain in the</font>

414
00:16:03,499 --> 00:16:06,559
cache no more than two so if you have a

415
00:16:04,999 --> 00:16:09,739
third one wanting to access<font color="#E5E5E5"> the same guy</font>

416
00:16:06,559 --> 00:16:11,899
<font color="#CCCCCC">set you have to</font><font color="#E5E5E5"> buy by construction</font>

417
00:16:09,739 --> 00:16:13,399
remove one of<font color="#E5E5E5"> those previous elements</font>

418
00:16:11,899 --> 00:16:15,499
and<font color="#CCCCCC"> this is something that is known as</font>

419
00:16:13,399 --> 00:16:17,029
cache eviction<font color="#E5E5E5"> when</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> talk about</font>

420
00:16:15,499 --> 00:16:20,839
<font color="#E5E5E5">this a little bit more so this is how</font>

421
00:16:17,029 --> 00:16:23,569
cache<font color="#CCCCCC"> coloring voids and</font><font color="#E5E5E5"> yeah by the</font>

422
00:16:20,839 --> 00:16:25,549
virtue of<font color="#CCCCCC"> this</font><font color="#E5E5E5"> separation</font><font color="#CCCCCC"> then the</font>

423
00:16:23,569 --> 00:16:28,610
process the different processes would

424
00:16:25,549 --> 00:16:35,980
not be able<font color="#E5E5E5"> to look at each other this</font>

425
00:16:28,610 --> 00:16:38,420
<font color="#CCCCCC">is not</font><font color="#E5E5E5"> working so</font><font color="#CCCCCC"> the other protection</font>

426
00:16:35,980 --> 00:16:40,970
so as I said like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> something that</font>

427
00:16:38,420 --> 00:16:43,309
<font color="#E5E5E5">is difficult to do you need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> change</font>

428
00:16:40,970 --> 00:16:45,919
your<font color="#E5E5E5"> the core of your operating system</font>

429
00:16:43,309 --> 00:16:47,449
which is<font color="#E5E5E5"> not</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> easy</font><font color="#CCCCCC"> so and</font>

430
00:16:45,919 --> 00:16:49,549
<font color="#CCCCCC">people have tried to</font><font color="#E5E5E5"> solve this</font><font color="#CCCCCC"> problem</font>

431
00:16:47,449 --> 00:16:51,258
right<font color="#CCCCCC"> and they how do you solve</font><font color="#E5E5E5"> this</font>

432
00:16:49,549 --> 00:16:52,939
problem<font color="#CCCCCC"> you rely on your</font><font color="#E5E5E5"> hardware to</font>

433
00:16:51,259 --> 00:16:56,360
basically provide you with the same same

434
00:16:52,939 --> 00:16:58,040
support<font color="#E5E5E5"> and so there is this technology</font>

435
00:16:56,360 --> 00:17:00,439
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is called cache allocation</font>

436
00:16:58,040 --> 00:17:03,049
technology that<font color="#E5E5E5"> isn't an extension by</font>

437
00:17:00,439 --> 00:17:04,938
recent Intel processors and if your CPU

438
00:17:03,049 --> 00:17:08,510
has<font color="#E5E5E5"> this support you could use it to do</font>

439
00:17:04,939 --> 00:17:10,519
partitioning of your cache and<font color="#E5E5E5"> so this</font>

440
00:17:08,510 --> 00:17:12,289
was<font color="#CCCCCC"> originally introduced</font><font color="#E5E5E5"> by Intel so</font>

441
00:17:10,519 --> 00:17:14,569
that we could provide<font color="#E5E5E5"> quality of service</font>

442
00:17:12,289 --> 00:17:16,309
to your<font color="#CCCCCC"> virtual machines in the cloud so</font>

443
00:17:14,569 --> 00:17:18,260
if you run<font color="#CCCCCC"> virtual machines and</font><font color="#E5E5E5"> s only</font>

444
00:17:16,309 --> 00:17:20,809
<font color="#E5E5E5">like one virtual machine could basically</font>

445
00:17:18,260 --> 00:17:22,189
occupy the entire cache get all the

446
00:17:20,809 --> 00:17:23,898
performance and then the other virtual

447
00:17:22,189 --> 00:17:25,760
machine would basically have<font color="#E5E5E5"> very little</font>

448
00:17:23,898 --> 00:17:26,918
performance bad performance right<font color="#E5E5E5"> you</font>

449
00:17:25,760 --> 00:17:29,450
don't<font color="#E5E5E5"> want this to happen</font>

450
00:17:26,919 --> 00:17:31,159
Intel came<font color="#E5E5E5"> up with this technology to</font>

451
00:17:29,450 --> 00:17:32,690
make<font color="#CCCCCC"> sure that you a statically</font>

452
00:17:31,159 --> 00:17:35,269
partition your<font color="#E5E5E5"> cache so that this</font>

453
00:17:32,690 --> 00:17:37,159
wouldn't happen and now basically what

454
00:17:35,269 --> 00:17:39,350
you could you could do we could<font color="#E5E5E5"> use this</font>

455
00:17:37,159 --> 00:17:42,700
technology<font color="#E5E5E5"> to also provide some security</font>

456
00:17:39,350 --> 00:17:45,020
<font color="#CCCCCC">rather than basically</font><font color="#E5E5E5"> just isolation so</font>

457
00:17:42,700 --> 00:17:47,299
it is basically a hardware feature that

458
00:17:45,020 --> 00:17:48,860
you rely on<font color="#E5E5E5"> so assuming that this is</font>

459
00:17:47,299 --> 00:17:51,500
your cache<font color="#E5E5E5"> again</font>

460
00:17:48,860 --> 00:17:53,419
and you have your basically two

461
00:17:51,500 --> 00:17:55,550
processes<font color="#CCCCCC"> that you have in the</font><font color="#E5E5E5"> system</font>

462
00:17:53,420 --> 00:17:57,140
<font color="#CCCCCC">what you could do is that you could</font>

463
00:17:55,550 --> 00:17:58,879
partition your system<font color="#E5E5E5"> using</font><font color="#CCCCCC"> cat</font>

464
00:17:57,140 --> 00:18:01,010
<font color="#E5E5E5">partition your cat using the number of</font>

465
00:17:58,880 --> 00:18:03,140
ways<font color="#CCCCCC"> so here in this example we have two</font>

466
00:18:01,010 --> 00:18:05,240
ways<font color="#E5E5E5"> which means that we could partition</font>

467
00:18:03,140 --> 00:18:07,550
only two processes in the system<font color="#CCCCCC"> right</font>

468
00:18:05,240 --> 00:18:11,150
<font color="#CCCCCC">in</font><font color="#E5E5E5"> reality the number of</font><font color="#CCCCCC"> ways is a</font>

469
00:18:07,550 --> 00:18:13,010
<font color="#E5E5E5">little bit more it's for example if you</font>

470
00:18:11,150 --> 00:18:16,100
have a normal<font color="#E5E5E5"> l3 system is often times</font>

471
00:18:13,010 --> 00:18:18,860
<font color="#CCCCCC">twelve or or</font><font color="#E5E5E5"> sixteen</font><font color="#CCCCCC"> so here now all</font>

472
00:18:16,100 --> 00:18:21,409
each process<font color="#CCCCCC"> so it could access</font><font color="#E5E5E5"> any</font>

473
00:18:18,860 --> 00:18:22,790
where in<font color="#E5E5E5"> the memory but basically the</font>

474
00:18:21,410 --> 00:18:25,640
partitioning happening at the<font color="#CCCCCC"> add</font>

475
00:18:22,790 --> 00:18:27,590
available but it could<font color="#CCCCCC"> only host one of</font>

476
00:18:25,640 --> 00:18:29,690
<font color="#E5E5E5">these entries in the cache sets so now</font>

477
00:18:27,590 --> 00:18:33,050
<font color="#CCCCCC">using</font><font color="#E5E5E5"> these not one process cannot</font>

478
00:18:29,690 --> 00:18:36,770
aspire other but this<font color="#E5E5E5"> would mean</font><font color="#CCCCCC"> that</font>

479
00:18:33,050 --> 00:18:37,940
now<font color="#E5E5E5"> even</font><font color="#CCCCCC"> though if there are so even</font>

480
00:18:36,770 --> 00:18:40,010
though you<font color="#E5E5E5"> have like different</font><font color="#CCCCCC"> number of</font>

481
00:18:37,940 --> 00:18:41,900
<font color="#E5E5E5">days</font><font color="#CCCCCC"> you can only access a</font><font color="#E5E5E5"> certain</font>

482
00:18:40,010 --> 00:18:43,610
limited<font color="#CCCCCC"> number of phase right</font><font color="#E5E5E5"> and since</font>

483
00:18:41,900 --> 00:18:44,450
<font color="#E5E5E5">you have a limited</font><font color="#CCCCCC"> number of</font><font color="#E5E5E5"> ways</font><font color="#CCCCCC"> it</font>

484
00:18:43,610 --> 00:18:46,729
would<font color="#E5E5E5"> mean</font><font color="#CCCCCC"> that since you're</font>

485
00:18:44,450 --> 00:18:48,740
partitioning your<font color="#E5E5E5"> cache in a very coarse</font>

486
00:18:46,730 --> 00:18:50,360
way<font color="#E5E5E5"> your performance is also gonna be</font>

487
00:18:48,740 --> 00:18:52,760
<font color="#E5E5E5">bad and this is</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> something that</font><font color="#CCCCCC"> you</font>

488
00:18:50,360 --> 00:18:54,860
may<font color="#E5E5E5"> not want the other thing is that the</font>

489
00:18:52,760 --> 00:18:56,930
<font color="#E5E5E5">number of these ways in your system is</font>

490
00:18:54,860 --> 00:18:58,969
kind<font color="#E5E5E5"> of limited right it's like 12 or 16</font>

491
00:18:56,930 --> 00:19:01,370
<font color="#E5E5E5">so it means</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you could only have 12</font>

492
00:18:58,970 --> 00:19:03,170
security context<font color="#E5E5E5"> in your system this may</font>

493
00:19:01,370 --> 00:19:05,449
also be a<font color="#E5E5E5"> limitation that you may not</font>

494
00:19:03,170 --> 00:19:11,560
<font color="#E5E5E5">want so people have realized this and</font>

495
00:19:05,450 --> 00:19:15,490
they have come up with<font color="#E5E5E5"> a second</font>

496
00:19:11,560 --> 00:19:19,040
technology<font color="#E5E5E5"> that is called</font><font color="#CCCCCC"> the tsx</font><font color="#E5E5E5"> and</font>

497
00:19:15,490 --> 00:19:21,890
what is<font color="#CCCCCC"> tsx is another extension by</font>

498
00:19:19,040 --> 00:19:26,720
<font color="#CCCCCC">intel that provides support for</font><font color="#E5E5E5"> hardware</font>

499
00:19:21,890 --> 00:19:29,990
transactions so and how<font color="#E5E5E5"> would this</font><font color="#CCCCCC"> work</font>

500
00:19:26,720 --> 00:19:31,490
so typically you want<font color="#E5E5E5"> to have support so</font>

501
00:19:29,990 --> 00:19:33,560
sometimes you<font color="#E5E5E5"> want so you've written</font>

502
00:19:31,490 --> 00:19:36,290
some piece of<font color="#E5E5E5"> code and you always want</font>

503
00:19:33,560 --> 00:19:38,810
this piece<font color="#E5E5E5"> of code to</font><font color="#CCCCCC"> execute</font><font color="#E5E5E5"> it in its</font>

504
00:19:36,290 --> 00:19:40,100
entirety<font color="#CCCCCC"> so if you're executing some</font>

505
00:19:38,810 --> 00:19:41,270
piece of code<font color="#E5E5E5"> and at some point you</font>

506
00:19:40,100 --> 00:19:43,580
realize<font color="#CCCCCC"> that</font><font color="#E5E5E5"> something has gone wrong</font>

507
00:19:41,270 --> 00:19:44,900
<font color="#CCCCCC">you want to roll back</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of this</font>

508
00:19:43,580 --> 00:19:47,120
<font color="#CCCCCC">computation to the point that you</font>

509
00:19:44,900 --> 00:19:48,650
started the transaction<font color="#E5E5E5"> so those of you</font>

510
00:19:47,120 --> 00:19:50,000
<font color="#E5E5E5">who have written banking</font><font color="#CCCCCC"> software for</font>

511
00:19:48,650 --> 00:19:51,920
example<font color="#CCCCCC"> you know that this is something</font>

512
00:19:50,000 --> 00:19:54,560
that<font color="#E5E5E5"> is very useful right you don't</font><font color="#CCCCCC"> want</font>

513
00:19:51,920 --> 00:19:56,060
a transaction of<font color="#E5E5E5"> a customer to abort at</font>

514
00:19:54,560 --> 00:19:57,919
some point and<font color="#CCCCCC"> until you have</font><font color="#E5E5E5"> deducted</font>

515
00:19:56,060 --> 00:19:59,840
<font color="#CCCCCC">the money</font><font color="#E5E5E5"> without that person having</font>

516
00:19:57,920 --> 00:20:01,760
<font color="#E5E5E5">gotten the money from the ATM for</font>

517
00:19:59,840 --> 00:20:02,629
example right<font color="#E5E5E5"> so we want this operation</font>

518
00:20:01,760 --> 00:20:05,180
<font color="#E5E5E5">to happen in</font>

519
00:20:02,630 --> 00:20:07,160
entirety<font color="#E5E5E5"> either I withdraw</font><font color="#CCCCCC"> the money or</font>

520
00:20:05,180 --> 00:20:10,130
I<font color="#CCCCCC"> don't the value in my bank account</font>

521
00:20:07,160 --> 00:20:12,290
shouldn't change if I don't<font color="#CCCCCC"> right</font><font color="#E5E5E5"> and so</font>

522
00:20:10,130 --> 00:20:14,770
this is how<font color="#CCCCCC"> Intel tries to provide</font>

523
00:20:12,290 --> 00:20:18,080
support for these kind of operations<font color="#CCCCCC"> and</font>

524
00:20:14,770 --> 00:20:20,330
<font color="#E5E5E5">the idea is</font><font color="#CCCCCC"> that the Select since this</font>

525
00:20:18,080 --> 00:20:23,030
whole thing<font color="#E5E5E5"> happens inside the CPU you</font>

526
00:20:20,330 --> 00:20:24,740
want to make<font color="#CCCCCC"> sure that all the writes</font>

527
00:20:23,030 --> 00:20:28,070
and reads that your transactions are

528
00:20:24,740 --> 00:20:29,630
doing happen remain in the CPU<font color="#E5E5E5"> cache</font><font color="#CCCCCC"> and</font>

529
00:20:28,070 --> 00:20:32,720
this is what is called the transaction

530
00:20:29,630 --> 00:20:35,660
working set and if this transaction

531
00:20:32,720 --> 00:20:39,170
working set<font color="#E5E5E5"> basically you</font><font color="#CCCCCC"> all you go</font>

532
00:20:35,660 --> 00:20:40,940
over the<font color="#E5E5E5"> amount of cash</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have</font>

533
00:20:39,170 --> 00:20:42,440
available<font color="#CCCCCC"> automatically</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> will get an</font>

534
00:20:40,940 --> 00:20:46,220
abort because<font color="#CCCCCC"> the processor can no</font>

535
00:20:42,440 --> 00:20:48,260
longer ensure that your code runs in a

536
00:20:46,220 --> 00:20:49,790
transaction logic and you could also<font color="#E5E5E5"> use</font>

537
00:20:48,260 --> 00:20:51,800
this principle<font color="#CCCCCC"> to build your defense</font>

538
00:20:49,790 --> 00:20:53,480
right because the attacker remember

539
00:20:51,800 --> 00:20:55,700
needs to basically<font color="#E5E5E5"> flush parts of your</font>

540
00:20:53,480 --> 00:20:57,530
<font color="#E5E5E5">cache right and if you see that</font><font color="#CCCCCC"> you're</font>

541
00:20:55,700 --> 00:20:59,630
<font color="#CCCCCC">getting an abort</font><font color="#E5E5E5"> because of this then</font>

542
00:20:57,530 --> 00:21:01,580
<font color="#E5E5E5">you could so this signals that there may</font>

543
00:20:59,630 --> 00:21:04,100
be<font color="#E5E5E5"> something fishy</font><font color="#CCCCCC"> going on so you could</font>

544
00:21:01,580 --> 00:21:05,780
use this to<font color="#E5E5E5"> detect that there is an</font>

545
00:21:04,100 --> 00:21:09,770
ongoing attack<font color="#E5E5E5"> so we can use this as a</font>

546
00:21:05,780 --> 00:21:12,230
defense<font color="#E5E5E5"> and yeah</font><font color="#CCCCCC"> so people</font><font color="#E5E5E5"> have done</font>

547
00:21:09,770 --> 00:21:13,820
<font color="#E5E5E5">this and</font><font color="#CCCCCC"> so this is the the same</font><font color="#E5E5E5"> figure</font>

548
00:21:12,230 --> 00:21:18,230
that<font color="#CCCCCC"> I showed you earlier and if you</font>

549
00:21:13,820 --> 00:21:19,700
actually<font color="#E5E5E5"> run it inside a tsx transaction</font>

550
00:21:18,230 --> 00:21:22,390
you can<font color="#CCCCCC"> see that the</font><font color="#E5E5E5"> signal gets diluted</font>

551
00:21:19,700 --> 00:21:25,070
<font color="#E5E5E5">quite heavily and then you can no longer</font>

552
00:21:22,390 --> 00:21:27,620
<font color="#E5E5E5">detect that there was a soul I can</font>

553
00:21:25,070 --> 00:21:32,120
access<font color="#E5E5E5"> inside a certain location in your</font>

554
00:21:27,620 --> 00:21:33,830
<font color="#E5E5E5">tea table so know that I've basically</font>

555
00:21:32,120 --> 00:21:37,520
<font color="#E5E5E5">told you about</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> cache defenses so</font>

556
00:21:33,830 --> 00:21:39,199
this is where we started last<font color="#CCCCCC"> year when</font>

557
00:21:37,520 --> 00:21:40,790
we start<font color="#CCCCCC"> thinking</font><font color="#E5E5E5"> about okay are we</font><font color="#CCCCCC"> done</font>

558
00:21:39,200 --> 00:21:43,310
have you<font color="#CCCCCC"> fixed</font><font color="#E5E5E5"> all of these</font><font color="#CCCCCC"> problems</font>

559
00:21:40,790 --> 00:21:45,260
with with cache attacks right<font color="#E5E5E5"> and then</font>

560
00:21:43,310 --> 00:21:47,570
<font color="#E5E5E5">there so we were looking at the</font>

561
00:21:45,260 --> 00:21:49,400
instruction manual<font color="#E5E5E5"> of Intel and then</font>

562
00:21:47,570 --> 00:21:52,580
there we<font color="#CCCCCC"> realized that okay there is a</font>

563
00:21:49,400 --> 00:21:54,530
TLB<font color="#CCCCCC"> right that is also shared between a</font>

564
00:21:52,580 --> 00:21:56,750
<font color="#E5E5E5">different execution context actually</font><font color="#CCCCCC"> be</font>

565
00:21:54,530 --> 00:21:59,540
in<font color="#E5E5E5"> different hyper tress which Ben is</font>

566
00:21:56,750 --> 00:22:00,890
going to talk<font color="#E5E5E5"> about and the</font><font color="#CCCCCC"> thing that</font>

567
00:21:59,540 --> 00:22:02,270
<font color="#CCCCCC">you</font><font color="#E5E5E5"> immediately think about when you</font>

568
00:22:00,890 --> 00:22:04,370
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> about this</font><font color="#E5E5E5"> attacks is</font><font color="#CCCCCC"> that</font>

569
00:22:02,270 --> 00:22:06,110
how<font color="#CCCCCC"> many sets are there are there</font>

570
00:22:04,370 --> 00:22:08,149
<font color="#E5E5E5">actually sets in the</font><font color="#CCCCCC"> TLD so this is the</font>

571
00:22:06,110 --> 00:22:09,979
first thing<font color="#E5E5E5"> that we basically come</font><font color="#CCCCCC"> to</font>

572
00:22:08,150 --> 00:22:12,080
your mind then looking at the

573
00:22:09,980 --> 00:22:13,220
instruction manual<font color="#CCCCCC"> it was it basically</font>

574
00:22:12,080 --> 00:22:14,990
<font color="#E5E5E5">was written there that there are</font>

575
00:22:13,220 --> 00:22:16,210
actually sets<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we know that</font><font color="#E5E5E5"> we are</font>

576
00:22:14,990 --> 00:22:18,129
<font color="#CCCCCC">onto something right</font>

577
00:22:16,210 --> 00:22:19,779
so if<font color="#CCCCCC"> we started this journey that would</font>

578
00:22:18,129 --> 00:22:22,059
look<font color="#CCCCCC"> that would lead to</font><font color="#E5E5E5"> this discovery</font>

579
00:22:19,779 --> 00:22:24,100
<font color="#CCCCCC">of</font><font color="#E5E5E5"> this new attack and during this</font>

580
00:22:22,059 --> 00:22:25,840
journey<font color="#CCCCCC"> the thing</font><font color="#E5E5E5"> that we discovered</font><font color="#CCCCCC"> is</font>

581
00:22:24,100 --> 00:22:28,269
that<font color="#E5E5E5"> actually the sets don't matter</font>

582
00:22:25,840 --> 00:22:29,740
<font color="#CCCCCC">right so so</font><font color="#E5E5E5"> we had to do to the</font>

583
00:22:28,269 --> 00:22:32,049
limitations that<font color="#E5E5E5"> we had we had to come</font>

584
00:22:29,740 --> 00:22:33,759
up<font color="#CCCCCC"> with a new attack that would not</font>

585
00:22:32,049 --> 00:22:37,899
matter whether you<font color="#CCCCCC"> had you have</font><font color="#E5E5E5"> set in</font>

586
00:22:33,759 --> 00:22:39,490
<font color="#E5E5E5">your TLB or TLB or not and I know</font><font color="#CCCCCC"> hand</font>

587
00:22:37,899 --> 00:22:41,678
<font color="#E5E5E5">over the presentation</font><font color="#CCCCCC"> tube and to</font>

588
00:22:39,490 --> 00:22:43,960
explain the new attack that<font color="#E5E5E5"> we had he</font>

589
00:22:41,679 --> 00:22:46,629
had to come up<font color="#CCCCCC"> with to actually</font><font color="#E5E5E5"> be able</font>

590
00:22:43,960 --> 00:22:48,309
<font color="#E5E5E5">to</font><font color="#CCCCCC"> lead your stuff</font><font color="#E5E5E5"> even though you have</font>

591
00:22:46,629 --> 00:22:55,809
only a single set that you could lead

592
00:22:48,309 --> 00:22:58,658
your data from great thank you coming

593
00:22:55,809 --> 00:23:01,480
<font color="#E5E5E5">all</font><font color="#CCCCCC"> right so let's</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about this TLB</font>

594
00:22:58,659 --> 00:23:03,610
business<font color="#CCCCCC"> so as Kavi explained there are</font>

595
00:23:01,480 --> 00:23:05,350
many shared resources in a system we

596
00:23:03,610 --> 00:23:06,758
have the RAM with the cache<font color="#CCCCCC"> and whenever</font>

597
00:23:05,350 --> 00:23:09,399
you ever shared resource there's<font color="#E5E5E5"> this</font>

598
00:23:06,759 --> 00:23:10,659
risk of<font color="#E5E5E5"> a signal leaking from one</font>

599
00:23:09,399 --> 00:23:12,189
<font color="#E5E5E5">protection domain to another which is</font>

600
00:23:10,659 --> 00:23:14,830
<font color="#E5E5E5">supposed to</font><font color="#CCCCCC"> be impossible right there's</font>

601
00:23:12,190 --> 00:23:15,759
supposed to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> this perfect abstractions</font>

602
00:23:14,830 --> 00:23:17,439
but<font color="#E5E5E5"> because of all these shared</font>

603
00:23:15,759 --> 00:23:21,970
resources we realize these abstractions

604
00:23:17,440 --> 00:23:23,889
are actually quite porous it would be

605
00:23:21,970 --> 00:23:26,200
<font color="#E5E5E5">very nice if using these generic cache</font>

606
00:23:23,889 --> 00:23:30,399
defenses these<font color="#CCCCCC"> cache side channels would</font>

607
00:23:26,200 --> 00:23:32,259
<font color="#E5E5E5">be gone but and and then to to a large</font>

608
00:23:30,399 --> 00:23:34,029
degree<font color="#E5E5E5"> that is true for cache attacks</font>

609
00:23:32,259 --> 00:23:36,460
but turns out that if you<font color="#CCCCCC"> use different</font>

610
00:23:34,029 --> 00:23:38,379
shared resources this<font color="#E5E5E5"> problem returns</font>

611
00:23:36,460 --> 00:23:42,269
<font color="#E5E5E5">even with deployed cache defenses and we</font>

612
00:23:38,379 --> 00:23:45,850
can exploit the TLB to also leak secrets

613
00:23:42,269 --> 00:23:50,590
<font color="#CCCCCC">okay so let's see how this works so by a</font>

614
00:23:45,850 --> 00:23:56,350
show of hands who<font color="#CCCCCC"> here knows about</font><font color="#E5E5E5"> how</font>

615
00:23:50,590 --> 00:23:58,119
page tables work great<font color="#CCCCCC"> okay I can</font><font color="#E5E5E5"> see</font>

616
00:23:56,350 --> 00:24:00,129
we're in<font color="#E5E5E5"> a room of experts</font><font color="#CCCCCC"> okay so let's</font>

617
00:23:58,119 --> 00:24:04,658
<font color="#E5E5E5">just go</font><font color="#CCCCCC"> over quickly</font><font color="#E5E5E5"> about this idea of</font>

618
00:24:00,129 --> 00:24:06,309
page tables so CPUs constantly handle

619
00:24:04,659 --> 00:24:07,779
addresses<font color="#E5E5E5"> executing from</font><font color="#CCCCCC"> particular</font>

620
00:24:06,309 --> 00:24:08,980
address<font color="#CCCCCC"> they're loading data from an</font>

621
00:24:07,779 --> 00:24:10,659
address<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> throwing the internet</font>

622
00:24:08,980 --> 00:24:12,820
dress and all of these addresses<font color="#E5E5E5"> are</font>

623
00:24:10,659 --> 00:24:14,950
what we call virtual addresses<font color="#E5E5E5"> that's</font>

624
00:24:12,820 --> 00:24:18,070
the point<font color="#E5E5E5"> of virtual address</font><font color="#CCCCCC"> is to give</font>

625
00:24:14,950 --> 00:24:20,289
every process the<font color="#E5E5E5"> pleasant illusion that</font>

626
00:24:18,070 --> 00:24:22,090
they have a<font color="#CCCCCC"> 64-bit</font><font color="#E5E5E5"> this huge 64-bit</font>

627
00:24:20,289 --> 00:24:23,710
address space completely<font color="#E5E5E5"> private to them</font>

628
00:24:22,090 --> 00:24:25,539
alone<font color="#CCCCCC"> no one</font><font color="#E5E5E5"> else no</font><font color="#CCCCCC"> one else's memory</font>

629
00:24:23,710 --> 00:24:27,190
is in there and your own memory unless

630
00:24:25,539 --> 00:24:28,690
<font color="#CCCCCC">you</font><font color="#E5E5E5"> want it to be is not anyone anyone</font>

631
00:24:27,190 --> 00:24:29,770
<font color="#CCCCCC">else's address</font><font color="#E5E5E5"> space so</font><font color="#CCCCCC"> you kind of have</font>

632
00:24:28,690 --> 00:24:31,539
this illusion<font color="#E5E5E5"> of</font>

633
00:24:29,770 --> 00:24:34,360
the<font color="#E5E5E5"> machine to yourself hence the idea</font>

634
00:24:31,539 --> 00:24:37,270
of virtual this<font color="#E5E5E5"> abstraction is created</font>

635
00:24:34,360 --> 00:24:39,039
by the operating<font color="#CCCCCC"> system which assembles</font>

636
00:24:37,270 --> 00:24:41,020
<font color="#E5E5E5">a data structure called page tables</font>

637
00:24:39,039 --> 00:24:43,149
which is<font color="#E5E5E5"> this which is</font><font color="#CCCCCC"> a mapping from</font>

638
00:24:41,020 --> 00:24:45,789
this huge sparse virtual address space

639
00:24:43,149 --> 00:24:47,529
<font color="#E5E5E5">to the real physical address space</font><font color="#CCCCCC"> which</font>

640
00:24:45,789 --> 00:24:49,809
is not sparse it's just you know on RAM

641
00:24:47,529 --> 00:24:51,190
chips<font color="#E5E5E5"> and it changed and mapping</font>

642
00:24:49,809 --> 00:24:53,740
whenever the process<font color="#CCCCCC"> changes</font><font color="#E5E5E5"> this</font>

643
00:24:51,190 --> 00:24:55,779
mapping changes also the operating

644
00:24:53,740 --> 00:24:57,940
<font color="#E5E5E5">system takes</font><font color="#CCCCCC"> care of this now this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

645
00:24:55,779 --> 00:25:00,730
beautiful<font color="#E5E5E5"> mechanism it has very powerful</font>

646
00:24:57,940 --> 00:25:03,340
properties<font color="#E5E5E5"> but it's also if you have to</font>

647
00:25:00,730 --> 00:25:04,750
look up<font color="#E5E5E5"> this translation every single</font>

648
00:25:03,340 --> 00:25:07,959
time you<font color="#E5E5E5"> handle an address which</font><font color="#CCCCCC"> is all</font>

649
00:25:04,750 --> 00:25:10,029
the<font color="#E5E5E5"> time it would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> very very slow so</font>

650
00:25:07,960 --> 00:25:12,760
<font color="#E5E5E5">therefore all these translations are</font>

651
00:25:10,029 --> 00:25:16,230
<font color="#E5E5E5">constantly are cached very aggressively</font>

652
00:25:12,760 --> 00:25:18,940
<font color="#E5E5E5">in this caching structure called the TLB</font>

653
00:25:16,230 --> 00:25:21,159
<font color="#E5E5E5">Tilby is short for translation lookaside</font>

654
00:25:18,940 --> 00:25:22,990
buffer so the<font color="#E5E5E5"> CPU is constantly</font>

655
00:25:21,159 --> 00:25:25,270
accessing the<font color="#E5E5E5"> Tilby because it</font>

656
00:25:22,990 --> 00:25:28,559
constantly needs to<font color="#CCCCCC"> translate from</font>

657
00:25:25,270 --> 00:25:32,830
virtual addresses to physical addresses

658
00:25:28,559 --> 00:25:35,529
so what if the TLB were shared between

659
00:25:32,830 --> 00:25:39,250
<font color="#E5E5E5">CPUs maybe between cores or between</font>

660
00:25:35,529 --> 00:25:41,679
hyper threads<font color="#E5E5E5"> if that's true then the</font>

661
00:25:39,250 --> 00:25:44,590
activity of<font color="#CCCCCC"> one</font><font color="#E5E5E5"> thread would be visible</font>

662
00:25:41,679 --> 00:25:46,149
<font color="#E5E5E5">to</font><font color="#CCCCCC"> another thread just because of the</font>

663
00:25:44,590 --> 00:25:48,100
fact<font color="#E5E5E5"> that the Shankill</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> is in exactly</font>

664
00:25:46,149 --> 00:25:50,649
the<font color="#E5E5E5"> same way as we can</font><font color="#CCCCCC"> lick actively</font>

665
00:25:48,100 --> 00:25:53,379
through the cache<font color="#E5E5E5"> so what we know is</font>

666
00:25:50,649 --> 00:25:55,000
<font color="#E5E5E5">that so let's try and find out about</font>

667
00:25:53,380 --> 00:25:56,770
this what we know is that<font color="#E5E5E5"> Tilby has two</font>

668
00:25:55,000 --> 00:25:58,659
levels level<font color="#CCCCCC"> one and that's in the</font>

669
00:25:56,770 --> 00:26:00,668
documentation right so we have just<font color="#E5E5E5"> like</font>

670
00:25:58,659 --> 00:26:03,490
<font color="#E5E5E5">the caches</font><font color="#CCCCCC"> have levels</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> tlbs</font><font color="#E5E5E5"> levels</font>

671
00:26:00,669 --> 00:26:05,919
which is a faster level one split in

672
00:26:03,490 --> 00:26:08,559
instructions and data translations of

673
00:26:05,919 --> 00:26:09,760
course and level two which is<font color="#E5E5E5"> much</font>

674
00:26:08,559 --> 00:26:12,490
larger<font color="#CCCCCC"> and a little bit</font><font color="#E5E5E5"> slower and</font>

675
00:26:09,760 --> 00:26:15,549
<font color="#E5E5E5">shares instructions</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> data and in</font>

676
00:26:12,490 --> 00:26:18,039
<font color="#CCCCCC">exactly the same way as caches have our</font>

677
00:26:15,549 --> 00:26:20,970
<font color="#CCCCCC">partitions in two sets which have a set</font>

678
00:26:18,039 --> 00:26:23,830
size called the number<font color="#CCCCCC"> of ways</font><font color="#E5E5E5"> the TLB</font>

679
00:26:20,970 --> 00:26:25,659
we expect is partitioned<font color="#E5E5E5"> in a very</font>

680
00:26:23,830 --> 00:26:27,039
<font color="#CCCCCC">similar</font><font color="#E5E5E5"> kind of way but</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> no idea</font>

681
00:26:25,659 --> 00:26:30,039
what the structure is<font color="#E5E5E5"> because it's not</font>

682
00:26:27,039 --> 00:26:32,379
<font color="#CCCCCC">documented by</font><font color="#E5E5E5"> the structure we mean if I</font>

683
00:26:30,039 --> 00:26:34,840
take a<font color="#E5E5E5"> particular look up into which set</font>

684
00:26:32,380 --> 00:26:36,460
or slot<font color="#E5E5E5"> into which set is this going to</font>

685
00:26:34,840 --> 00:26:38,678
go into the into the TLB in other words

686
00:26:36,460 --> 00:26:40,570
I<font color="#E5E5E5"> want to be able to predict when I get</font>

687
00:26:38,679 --> 00:26:42,610
when I<font color="#E5E5E5"> acts as a set of addresses</font><font color="#CCCCCC"> which</font>

688
00:26:40,570 --> 00:26:43,539
can i cached at the same time and which

689
00:26:42,610 --> 00:26:45,008
<font color="#CCCCCC">can I not</font>

690
00:26:43,539 --> 00:26:47,109
at the same time<font color="#E5E5E5"> because the set that</font>

691
00:26:45,009 --> 00:26:49,289
they go into overflows<font color="#E5E5E5"> that's what I</font>

692
00:26:47,109 --> 00:26:52,210
have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> know to monitor</font><font color="#E5E5E5"> Tilby activity</font>

693
00:26:49,289 --> 00:26:53,710
so let's look at<font color="#E5E5E5"> the</font><font color="#CCCCCC"> steal</font><font color="#E5E5E5"> be as just</font>

694
00:26:52,210 --> 00:26:56,379
another cache and as<font color="#CCCCCC"> Kara was saying</font>

695
00:26:53,710 --> 00:26:58,509
this is<font color="#CCCCCC"> the representation of</font><font color="#E5E5E5"> how a</font>

696
00:26:56,379 --> 00:27:00,609
cache might be structured so<font color="#E5E5E5"> if you</font>

697
00:26:58,509 --> 00:27:02,830
imagine<font color="#E5E5E5"> that all of these things are Ram</font>

698
00:27:00,609 --> 00:27:06,249
cache lines right there's this these<font color="#E5E5E5"> Ram</font>

699
00:27:02,830 --> 00:27:08,109
blocks can go down for billions in<font color="#E5E5E5"> the</font>

700
00:27:06,249 --> 00:27:11,950
downwards direction<font color="#E5E5E5"> but there's only a</font>

701
00:27:08,109 --> 00:27:13,779
limited<font color="#E5E5E5"> number of cache cells that these</font>

702
00:27:11,950 --> 00:27:15,489
<font color="#E5E5E5">items can</font><font color="#CCCCCC"> be cached</font><font color="#E5E5E5"> into they all have</font>

703
00:27:13,779 --> 00:27:17,649
to stay in the same column because this

704
00:27:15,489 --> 00:27:25,960
is the first blue<font color="#E5E5E5"> oops sorry</font>

705
00:27:17,649 --> 00:27:27,428
this is the first blue cache<font color="#E5E5E5"> set this is</font>

706
00:27:25,960 --> 00:27:28,869
<font color="#E5E5E5">the first blue cache yet the second blue</font>

707
00:27:27,429 --> 00:27:30,369
cache at third blue cache it and you

708
00:27:28,869 --> 00:27:31,779
can't go from here to<font color="#CCCCCC"> here you</font><font color="#E5E5E5"> have to</font>

709
00:27:30,369 --> 00:27:34,330
stay in<font color="#CCCCCC"> your</font><font color="#E5E5E5"> own column that's just</font>

710
00:27:31,779 --> 00:27:35,679
limitation of the hardware<font color="#E5E5E5"> and any of</font>

711
00:27:34,330 --> 00:27:38,499
this column<font color="#E5E5E5"> will ask Allah was saying</font>

712
00:27:35,679 --> 00:27:41,830
has<font color="#CCCCCC"> 8 or 16 or so entries the way Innis</font>

713
00:27:38,499 --> 00:27:43,899
<font color="#CCCCCC">the number of ways that we</font><font color="#E5E5E5"> have so as</font>

714
00:27:41,830 --> 00:27:45,009
you can<font color="#CCCCCC"> see this structure so that what</font>

715
00:27:43,899 --> 00:27:48,820
<font color="#E5E5E5">do you mean by the structure is that</font>

716
00:27:45,009 --> 00:27:53,789
<font color="#E5E5E5">this column if I if I</font><font color="#CCCCCC"> take any of these</font>

717
00:27:48,820 --> 00:27:57,210
blocks how do<font color="#CCCCCC"> I - which set is it mapped</font>

718
00:27:53,789 --> 00:27:59,919
so let's try and find<font color="#E5E5E5"> out about that so</font>

719
00:27:57,210 --> 00:28:01,929
let's<font color="#E5E5E5"> just</font><font color="#CCCCCC"> assume that</font><font color="#E5E5E5"> the mapping is</font>

720
00:27:59,919 --> 00:28:03,190
linear just as we saw<font color="#CCCCCC"> that just now</font><font color="#E5E5E5"> like</font>

721
00:28:01,929 --> 00:28:04,690
the<font color="#CCCCCC"> first column goes in the</font><font color="#E5E5E5"> first set</font>

722
00:28:03,190 --> 00:28:08,080
second<font color="#CCCCCC"> Congress and the second set and</font>

723
00:28:04,690 --> 00:28:09,220
so on and that and<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> physical</font>

724
00:28:08,080 --> 00:28:11,080
<font color="#CCCCCC">addresses were laid</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> two three</font>

725
00:28:09,220 --> 00:28:12,700
<font color="#E5E5E5">four five six eight</font><font color="#CCCCCC"> nine</font><font color="#E5E5E5"> just in this</font>

726
00:28:11,080 --> 00:28:14,739
linear<font color="#E5E5E5"> mapping and that goes into these</font>

727
00:28:12,700 --> 00:28:16,299
sets in car<font color="#E5E5E5"> this nice round robin</font>

728
00:28:14,739 --> 00:28:19,479
<font color="#E5E5E5">fashion doesn't</font><font color="#CCCCCC"> have to be that way but</font>

729
00:28:16,299 --> 00:28:21,009
<font color="#CCCCCC">let's assume</font><font color="#E5E5E5"> that's the case and see if</font>

730
00:28:19,479 --> 00:28:24,970
the curve that an<font color="#E5E5E5"> experiment that we can</font>

731
00:28:21,009 --> 00:28:28,599
make bears out this hypothesis<font color="#E5E5E5"> so let's</font>

732
00:28:24,970 --> 00:28:31,210
try and find for this<font color="#E5E5E5"> for the l1 detail</font>

733
00:28:28,599 --> 00:28:33,070
<font color="#CCCCCC">be how</font><font color="#E5E5E5"> many sets do we have and how</font><font color="#CCCCCC"> many</font>

734
00:28:31,210 --> 00:28:36,299
ways<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> what do we have</font><font color="#E5E5E5"> under the</font>

735
00:28:33,070 --> 00:28:39,759
<font color="#E5E5E5">assumption that we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> a linear mapping</font>

736
00:28:36,299 --> 00:28:42,070
so we try many possible combinations<font color="#E5E5E5"> of</font>

737
00:28:39,759 --> 00:28:44,529
how many sets do we have from<font color="#CCCCCC"> 0 to 80</font>

738
00:28:42,070 --> 00:28:47,289
how many ways<font color="#E5E5E5"> do we have what is the set</font>

739
00:28:44,529 --> 00:28:48,999
size from 0 to 20 and we try<font color="#CCCCCC"> and we</font>

740
00:28:47,289 --> 00:28:51,639
assemble eviction<font color="#E5E5E5"> sets that would fit</font>

741
00:28:48,999 --> 00:28:53,830
perfectly into this TLB if it were that

742
00:28:51,639 --> 00:28:55,418
size for<font color="#CCCCCC"> all these combinations access</font>

743
00:28:53,830 --> 00:28:56,990
them over and<font color="#CCCCCC"> over</font><font color="#E5E5E5"> and over</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> and</font>

744
00:28:55,419 --> 00:28:59,330
using performance counters we

745
00:28:56,990 --> 00:29:01,850
well do we get it<font color="#E5E5E5"> he'll be hit or</font><font color="#CCCCCC"> til be</font>

746
00:28:59,330 --> 00:29:03,050
<font color="#E5E5E5">miss and what we expect to see is</font><font color="#CCCCCC"> that</font>

747
00:29:01,850 --> 00:29:07,580
when we have<font color="#CCCCCC"> the exact</font><font color="#E5E5E5"> right</font>

748
00:29:03,050 --> 00:29:09,320
<font color="#CCCCCC">configuration we see no</font><font color="#E5E5E5"> misses but when</font>

749
00:29:07,580 --> 00:29:09,949
we go one<font color="#CCCCCC"> over then we start to see</font>

750
00:29:09,320 --> 00:29:12,860
<font color="#E5E5E5">misses</font>

751
00:29:09,950 --> 00:29:16,670
so what we see is that the smallest<font color="#E5E5E5"> set</font>

752
00:29:12,860 --> 00:29:21,110
size where we can see any misses

753
00:29:16,670 --> 00:29:23,120
whatsoever is<font color="#CCCCCC"> four that's here and</font><font color="#E5E5E5"> the</font>

754
00:29:21,110 --> 00:29:25,550
smallest<font color="#CCCCCC"> number of sets corresponding to</font>

755
00:29:23,120 --> 00:29:27,919
these misses is<font color="#E5E5E5"> 16</font><font color="#CCCCCC"> so what we see here</font>

756
00:29:25,550 --> 00:29:31,159
<font color="#CCCCCC">is that</font><font color="#E5E5E5"> our policies of they are one</font>

757
00:29:27,920 --> 00:29:33,530
<font color="#E5E5E5">detail be having</font><font color="#CCCCCC"> linear mapping with 16</font>

758
00:29:31,160 --> 00:29:36,500
sets and<font color="#CCCCCC"> 4 ways each is the one that</font>

759
00:29:33,530 --> 00:29:38,530
holds so using experiments like this

760
00:29:36,500 --> 00:29:41,360
cream we can<font color="#CCCCCC"> reverse-engineer the</font>

761
00:29:38,530 --> 00:29:42,950
structure of the<font color="#CCCCCC"> a</font><font color="#E5E5E5"> one detail</font><font color="#CCCCCC"> bi</font><font color="#E5E5E5"> kill B</font>

762
00:29:41,360 --> 00:29:44,479
and with slightly<font color="#E5E5E5"> more complicated</font>

763
00:29:42,950 --> 00:29:46,400
experiments we can<font color="#E5E5E5"> reverse</font><font color="#CCCCCC"> engineer the</font>

764
00:29:44,480 --> 00:29:50,059
structure of the<font color="#E5E5E5"> L to</font><font color="#CCCCCC"> kill B as well</font>

765
00:29:46,400 --> 00:29:51,110
because<font color="#E5E5E5"> sometimes it's</font><font color="#CCCCCC"> not linear</font><font color="#E5E5E5"> what</font>

766
00:29:50,059 --> 00:29:53,270
we find is that<font color="#E5E5E5"> starting</font><font color="#CCCCCC"> with the</font>

767
00:29:51,110 --> 00:29:54,590
Skydeck microarchitecture we have to<font color="#E5E5E5"> we</font>

768
00:29:53,270 --> 00:29:58,220
<font color="#E5E5E5">take the page number because it's all</font>

769
00:29:54,590 --> 00:30:00,290
<font color="#E5E5E5">about pages right and we have to</font><font color="#CCCCCC"> exhort</font>

770
00:29:58,220 --> 00:30:03,200
the lowest<font color="#E5E5E5"> 7 bits of the page number</font>

771
00:30:00,290 --> 00:30:06,730
with the next upper 7 bits<font color="#E5E5E5"> we ignore</font>

772
00:30:03,200 --> 00:30:11,030
<font color="#E5E5E5">them together to get a 7 bit number</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> 0</font>

773
00:30:06,730 --> 00:30:14,510
227<font color="#CCCCCC"> to get the slot number</font><font color="#E5E5E5"> so it's not</font>

774
00:30:11,030 --> 00:30:20,720
linear<font color="#E5E5E5"> but it's sort</font><font color="#CCCCCC"> of a simple simple</font>

775
00:30:14,510 --> 00:30:22,240
approximation so this is if you were<font color="#E5E5E5"> to</font>

776
00:30:20,720 --> 00:30:26,270
use modular<font color="#E5E5E5"> 2 arithmetic and you</font>

777
00:30:22,240 --> 00:30:30,140
<font color="#E5E5E5">multiply</font><font color="#CCCCCC"> the page number by this matrix</font>

778
00:30:26,270 --> 00:30:31,400
then<font color="#E5E5E5"> you would get that output board</font>

779
00:30:30,140 --> 00:30:33,679
well does wear something very<font color="#E5E5E5"> similar</font>

780
00:30:31,400 --> 00:30:34,850
<font color="#CCCCCC">but it then uses 8 bits instead</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> 7</font>

781
00:30:33,679 --> 00:30:35,330
<font color="#E5E5E5">base tubes or together</font><font color="#CCCCCC"> and get the</font>

782
00:30:34,850 --> 00:30:38,780
<font color="#E5E5E5">result</font>

783
00:30:35,330 --> 00:30:41,030
so using these techniques we find lots

784
00:30:38,780 --> 00:30:44,240
of<font color="#CCCCCC"> different</font><font color="#E5E5E5"> properties of</font><font color="#CCCCCC"> the TLB what</font>

785
00:30:41,030 --> 00:30:46,490
we want to know in<font color="#E5E5E5"> order to be able to</font>

786
00:30:44,240 --> 00:30:48,710
do anything<font color="#E5E5E5"> at all</font><font color="#CCCCCC"> is are these high</font>

787
00:30:46,490 --> 00:30:51,679
till be shared at all between hyper

788
00:30:48,710 --> 00:30:53,390
threads but now that we<font color="#CCCCCC"> know how</font><font color="#E5E5E5"> to</font>

789
00:30:51,679 --> 00:30:56,050
reverse<font color="#CCCCCC"> engineer the structure</font><font color="#E5E5E5"> we do</font>

790
00:30:53,390 --> 00:30:59,510
<font color="#E5E5E5">this experiment where we where we access</font>

791
00:30:56,050 --> 00:31:02,899
completely access set<font color="#CCCCCC"> zero on one hyper</font>

792
00:30:59,510 --> 00:31:05,390
thread and set<font color="#CCCCCC"> zero on the other and see</font>

793
00:31:02,900 --> 00:31:08,510
if we<font color="#E5E5E5"> get any evictions if you see any</font>

794
00:31:05,390 --> 00:31:10,669
misses and we try all<font color="#CCCCCC"> combinations</font><font color="#E5E5E5"> from</font>

795
00:31:08,510 --> 00:31:12,259
<font color="#E5E5E5">0 to 15 on one thread 0 to</font><font color="#CCCCCC"> 1500</font>

796
00:31:10,669 --> 00:31:16,249
<font color="#CCCCCC">threat and</font><font color="#E5E5E5"> what we expect if we</font><font color="#CCCCCC"> see</font>

797
00:31:12,259 --> 00:31:17,629
sharing that<font color="#E5E5E5"> where we see mrs. depends</font>

798
00:31:16,249 --> 00:31:19,249
on what the<font color="#CCCCCC"> other threat is doing and we</font>

799
00:31:17,629 --> 00:31:21,619
find for the<font color="#CCCCCC"> other one detail</font><font color="#E5E5E5"> be yeah we</font>

800
00:31:19,249 --> 00:31:24,289
see exactly<font color="#E5E5E5"> what we were hoping which is</font>

801
00:31:21,619 --> 00:31:25,908
that<font color="#E5E5E5"> zero interferes with zero zero on</font>

802
00:31:24,289 --> 00:31:28,309
one<font color="#CCCCCC"> threat interferes with zero</font><font color="#E5E5E5"> on the</font>

803
00:31:25,909 --> 00:31:29,600
<font color="#E5E5E5">other thread and set fifteen and one</font>

804
00:31:28,309 --> 00:31:32,809
threat interferes with<font color="#E5E5E5"> fifteen on the</font>

805
00:31:29,600 --> 00:31:34,998
other thread we<font color="#CCCCCC"> tried exactly the same</font>

806
00:31:32,809 --> 00:31:37,668
thing on the<font color="#E5E5E5"> eye</font><font color="#CCCCCC"> TLB and we see no such</font>

807
00:31:34,999 --> 00:31:39,679
<font color="#CCCCCC">sherry</font><font color="#E5E5E5"> so we don't not we do not see any</font>

808
00:31:37,669 --> 00:31:40,669
<font color="#CCCCCC">activity on</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> thread that depends</font><font color="#E5E5E5"> on</font>

809
00:31:39,679 --> 00:31:42,679
activity and the other<font color="#CCCCCC"> thread</font>

810
00:31:40,669 --> 00:31:46,340
unfortunately so you know on l1<font color="#CCCCCC"> duty</font>

811
00:31:42,679 --> 00:31:47,419
<font color="#E5E5E5">ITIL</font><font color="#CCCCCC"> B we see no sharing for LT would</font>

812
00:31:46,340 --> 00:31:49,399
you see sharing but we see this<font color="#CCCCCC"> a</font>

813
00:31:47,419 --> 00:31:52,609
interesting little shift so we<font color="#E5E5E5"> find that</font>

814
00:31:49,399 --> 00:31:53,748
<font color="#CCCCCC">said</font><font color="#E5E5E5"> zero on</font><font color="#CCCCCC"> one thread</font><font color="#E5E5E5"> does not</font>

815
00:31:52,609 --> 00:31:55,340
interfere<font color="#E5E5E5"> with sincere on the other</font>

816
00:31:53,749 --> 00:31:57,230
thread but<font color="#CCCCCC"> with said sixty-four so</font>

817
00:31:55,340 --> 00:32:00,439
there's this kind of<font color="#E5E5E5"> apparently in the</font>

818
00:31:57,230 --> 00:32:02,960
hash function it seems like maybe we

819
00:32:00,440 --> 00:32:06,710
include the hyper thread thread ID in

820
00:32:02,960 --> 00:32:08,480
this hash function therefore<font color="#E5E5E5"> slot zero</font>

821
00:32:06,710 --> 00:32:10,549
interferes<font color="#E5E5E5"> on one thread interface with</font>

822
00:32:08,480 --> 00:32:13,070
<font color="#CCCCCC">slot 64 on the</font><font color="#E5E5E5"> other thread</font><font color="#CCCCCC"> I don't</font>

823
00:32:10,549 --> 00:32:14,720
exactly know<font color="#E5E5E5"> why this happens but what</font>

824
00:32:13,070 --> 00:32:19,580
<font color="#E5E5E5">we think that might be</font><font color="#CCCCCC"> the case is that</font>

825
00:32:14,720 --> 00:32:21,080
this evens out<font color="#CCCCCC"> the TLB activity from</font><font color="#E5E5E5"> one</font>

826
00:32:19,580 --> 00:32:22,658
in the other if it sort of<font color="#E5E5E5"> might spread</font>

827
00:32:21,080 --> 00:32:24,859
it out more<font color="#CCCCCC"> over the whole</font><font color="#E5E5E5"> TLB</font>

828
00:32:22,659 --> 00:32:26,509
you might get more contention otherwise

829
00:32:24,859 --> 00:32:30,379
that that seems<font color="#E5E5E5"> to be the purpose of</font>

830
00:32:26,509 --> 00:32:33,320
these unusual hash functions<font color="#E5E5E5"> okay so</font>

831
00:32:30,379 --> 00:32:35,149
using<font color="#E5E5E5"> experiments like these we reverse</font>

832
00:32:33,320 --> 00:32:38,119
reverse<font color="#E5E5E5"> engineered many properties of</font>

833
00:32:35,149 --> 00:32:40,820
the TLB so we have here a list of

834
00:32:38,119 --> 00:32:42,049
microarchitectures and we find well how

835
00:32:40,820 --> 00:32:43,700
<font color="#E5E5E5">many sets do we have how many ways we</font>

836
00:32:42,049 --> 00:32:47,690
<font color="#CCCCCC">have we</font><font color="#E5E5E5"> find that for the</font><font color="#CCCCCC"> detailed beam</font>

837
00:32:43,700 --> 00:32:49,070
it's always 16 sets<font color="#E5E5E5"> and</font><font color="#CCCCCC"> four ways hash</font>

838
00:32:47,690 --> 00:32:51,739
functions<font color="#E5E5E5"> always linear and it's always</font>

839
00:32:49,070 --> 00:32:53,869
<font color="#E5E5E5">shares</font><font color="#CCCCCC"> so that'll be we find that</font>

840
00:32:51,739 --> 00:32:57,619
<font color="#E5E5E5">associativity as we call has gone up so</font>

841
00:32:53,869 --> 00:33:00,980
we used to have a way a<font color="#CCCCCC"> 4-way 16 set</font>

842
00:32:57,619 --> 00:33:03,168
cache and it's gone up to<font color="#CCCCCC"> an eight way</font>

843
00:33:00,980 --> 00:33:04,789
<font color="#E5E5E5">eight set cash which is better we have</font>

844
00:33:03,169 --> 00:33:06,649
the<font color="#E5E5E5"> same number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> entries is</font><font color="#CCCCCC"> both 64</font>

845
00:33:04,789 --> 00:33:08,059
but because the associativity is<font color="#CCCCCC"> higher</font>

846
00:33:06,649 --> 00:33:11,119
we<font color="#E5E5E5"> will see under the same workloads</font>

847
00:33:08,059 --> 00:33:14,749
fewer<font color="#E5E5E5"> evictions because the partitioning</font>

848
00:33:11,119 --> 00:33:15,799
is the partition<font color="#CCCCCC"> is larger and</font><font color="#E5E5E5"> we find</font>

849
00:33:14,749 --> 00:33:18,289
<font color="#E5E5E5">that for the l2</font>

850
00:33:15,799 --> 00:33:18,889
TLB we have this weird Zor function<font color="#E5E5E5"> that</font>

851
00:33:18,289 --> 00:33:21,590
started with<font color="#E5E5E5"> a scar like</font>

852
00:33:18,889 --> 00:33:24,080
<font color="#E5E5E5">microarchitecture</font><font color="#CCCCCC"> and before that was</font>

853
00:33:21,590 --> 00:33:26,209
linear as well<font color="#E5E5E5"> okay</font>

854
00:33:24,080 --> 00:33:28,280
so that's<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we know we know</font>

855
00:33:26,210 --> 00:33:30,920
that<font color="#E5E5E5"> we understand the structure we know</font>

856
00:33:28,280 --> 00:33:34,820
there is sharing to a degree<font color="#CCCCCC"> what you</font>

857
00:33:30,920 --> 00:33:37,130
have to<font color="#E5E5E5"> find out now</font><font color="#CCCCCC"> is how can we</font><font color="#E5E5E5"> do</font>

858
00:33:34,820 --> 00:33:38,990
how can<font color="#E5E5E5"> we observe this signal without</font>

859
00:33:37,130 --> 00:33:40,400
performance counters because<font color="#CCCCCC"> performance</font>

860
00:33:38,990 --> 00:33:42,050
counters we can't use<font color="#CCCCCC"> because we need a</font>

861
00:33:40,400 --> 00:33:45,830
<font color="#E5E5E5">system call that they're too slow and</font>

862
00:33:42,050 --> 00:33:47,810
<font color="#E5E5E5">they're privileged so we assemble</font>

863
00:33:45,830 --> 00:33:52,100
eviction<font color="#CCCCCC"> sets that</font><font color="#E5E5E5"> exactly cover the l1d</font>

864
00:33:47,810 --> 00:33:53,300
<font color="#E5E5E5">Tilby and the altitude</font><font color="#CCCCCC"> till B and</font><font color="#E5E5E5"> miss</font>

865
00:33:52,100 --> 00:33:55,340
them<font color="#E5E5E5"> all together so these three</font>

866
00:33:53,300 --> 00:33:57,610
versions<font color="#E5E5E5"> and we want to see just by</font>

867
00:33:55,340 --> 00:34:00,679
<font color="#E5E5E5">timing the access agencies whether</font>

868
00:33:57,610 --> 00:34:02,179
whether we if we hit one<font color="#E5E5E5"> or the other or</font>

869
00:34:00,680 --> 00:34:04,550
<font color="#E5E5E5">missed altogether which means we have to</font>

870
00:34:02,180 --> 00:34:06,200
do a page table walk and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> Weatherly</font>

871
00:34:04,550 --> 00:34:11,330
measure the<font color="#CCCCCC"> lenses can we distinguish</font>

872
00:34:06,200 --> 00:34:14,389
one from the other and<font color="#CCCCCC"> what we find is</font>

873
00:34:11,330 --> 00:34:15,860
<font color="#CCCCCC">that yeah it seems like from</font><font color="#E5E5E5"> the timing</font>

874
00:34:14,389 --> 00:34:17,870
<font color="#CCCCCC">latency we can tell the difference</font>

875
00:34:15,860 --> 00:34:20,890
between<font color="#CCCCCC"> the hit enemies in the l1</font><font color="#E5E5E5"> detail</font>

876
00:34:17,870 --> 00:34:23,089
<font color="#CCCCCC">B so we can</font><font color="#E5E5E5"> use that one</font><font color="#CCCCCC"> D TLB as a</font>

877
00:34:20,889 --> 00:34:24,949
method to<font color="#E5E5E5"> observe activity on the other</font>

878
00:34:23,090 --> 00:34:27,850
<font color="#E5E5E5">hypothet so that's interesting</font><font color="#CCCCCC"> so let's</font>

879
00:34:24,949 --> 00:34:31,279
<font color="#CCCCCC">go back to this</font><font color="#E5E5E5"> case study of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> CCC</font>

880
00:34:27,850 --> 00:34:32,690
<font color="#E5E5E5">multiplication function when we</font><font color="#CCCCCC"> can use</font>

881
00:34:31,280 --> 00:34:34,370
this as a case study<font color="#E5E5E5"> to see if we can</font>

882
00:34:32,690 --> 00:34:35,780
leak the secret<font color="#CCCCCC"> bits that</font><font color="#E5E5E5"> were</font>

883
00:34:34,370 --> 00:34:38,239
<font color="#E5E5E5">purchasing the secret bit being in the</font>

884
00:34:35,780 --> 00:34:40,160
scalar<font color="#E5E5E5"> function this is an</font><font color="#CCCCCC"> on site</font><font color="#E5E5E5"> proof</font>

885
00:34:38,239 --> 00:34:41,389
version<font color="#E5E5E5"> but as we've talked about if</font>

886
00:34:40,159 --> 00:34:43,399
<font color="#CCCCCC">there</font><font color="#E5E5E5"> were generic cache defense</font>

887
00:34:41,389 --> 00:34:45,109
deployed this would still be<font color="#E5E5E5"> safe so</font>

888
00:34:43,400 --> 00:34:47,150
let's<font color="#E5E5E5"> see if a generic cache defense is</font>

889
00:34:45,110 --> 00:34:48,650
deployed<font color="#E5E5E5"> and you run this code can we</font>

890
00:34:47,150 --> 00:34:50,750
still leak this data to the till B or

891
00:34:48,650 --> 00:34:54,410
<font color="#E5E5E5">not so let's see what that would look</font>

892
00:34:50,750 --> 00:34:57,350
like we can<font color="#E5E5E5"> only use the data access as</font>

893
00:34:54,409 --> 00:35:02,960
<font color="#CCCCCC">the distinguisher so a</font><font color="#E5E5E5"> simulation of</font><font color="#CCCCCC"> how</font>

894
00:34:57,350 --> 00:35:06,710
this might<font color="#CCCCCC"> look like</font><font color="#E5E5E5"> is this so if we</font>

895
00:35:02,960 --> 00:35:10,160
look at the<font color="#E5E5E5"> the background shade is if</font>

896
00:35:06,710 --> 00:35:12,500
the secret bit is 0 or<font color="#CCCCCC"> 1 and the</font>

897
00:35:10,160 --> 00:35:14,509
activity is now instead<font color="#CCCCCC"> of using the</font>

898
00:35:12,500 --> 00:35:20,450
cache we look at the TLB<font color="#E5E5E5"> side activity</font>

899
00:35:14,510 --> 00:35:22,010
<font color="#E5E5E5">so what we see is that there you can see</font>

900
00:35:20,450 --> 00:35:24,169
some<font color="#E5E5E5"> kind of difference but it seems</font>

901
00:35:22,010 --> 00:35:26,120
like<font color="#E5E5E5"> that every set is active either all</font>

902
00:35:24,170 --> 00:35:29,510
the time<font color="#CCCCCC"> all the way throughout green</font>

903
00:35:26,120 --> 00:35:32,089
and blue or neither<font color="#E5E5E5"> nor a green nor blue</font>

904
00:35:29,510 --> 00:35:33,770
so there's no easy distinguishing

905
00:35:32,090 --> 00:35:36,170
feature here<font color="#CCCCCC"> that would let</font><font color="#E5E5E5"> us see one</font>

906
00:35:33,770 --> 00:35:38,440
or the other<font color="#E5E5E5"> so let's see a simulation</font>

907
00:35:36,170 --> 00:35:38,440
of that

908
00:35:38,589 --> 00:35:49,578
let's see better<font color="#CCCCCC"> simulation</font><font color="#E5E5E5"> that yeah so</font>

909
00:35:47,450 --> 00:35:50,749
this<font color="#E5E5E5"> is a cash trace similar to the one</font>

910
00:35:49,579 --> 00:35:53,150
<font color="#E5E5E5">Caudill was showing you but instead</font><font color="#CCCCCC"> of</font>

911
00:35:50,749 --> 00:35:54,738
the cash trace it observe it shows you

912
00:35:53,150 --> 00:35:59,269
the<font color="#E5E5E5"> activity in teal be</font><font color="#CCCCCC"> set so that</font>

913
00:35:54,739 --> 00:36:01,160
means there<font color="#E5E5E5"> are fewer</font><font color="#CCCCCC"> of them and the</font>

914
00:35:59,269 --> 00:36:03,049
granular the<font color="#E5E5E5"> spatial granularity is much</font>

915
00:36:01,160 --> 00:36:05,180
lower<font color="#E5E5E5"> because we're talking</font><font color="#CCCCCC"> about in the</font>

916
00:36:03,049 --> 00:36:08,538
<font color="#CCCCCC">cache</font><font color="#E5E5E5"> we have 64 byte cache lines but</font>

917
00:36:05,180 --> 00:36:09,950
these are<font color="#CCCCCC"> 4 K pages so</font><font color="#E5E5E5"> we have much less</font>

918
00:36:08,539 --> 00:36:11,630
<font color="#CCCCCC">information going</font><font color="#E5E5E5"> for us</font>

919
00:36:09,950 --> 00:36:13,788
so I<font color="#E5E5E5"> don't know about you but if I look</font>

920
00:36:11,630 --> 00:36:19,400
at this<font color="#CCCCCC"> I can't</font><font color="#E5E5E5"> really tell the</font>

921
00:36:13,789 --> 00:36:20,960
<font color="#CCCCCC">difference</font><font color="#E5E5E5"> much in in blue or green yeah</font>

922
00:36:19,400 --> 00:36:21,950
I<font color="#E5E5E5"> can tell</font><font color="#CCCCCC"> green is longer of</font><font color="#E5E5E5"> course but</font>

923
00:36:20,960 --> 00:36:24,170
we can't really<font color="#E5E5E5"> use their information</font>

924
00:36:21,950 --> 00:36:27,739
<font color="#E5E5E5">because as an attacker we can't see</font>

925
00:36:24,170 --> 00:36:30,230
<font color="#E5E5E5">length we could only see patterns so</font>

926
00:36:27,739 --> 00:36:31,819
this is part tricky so we want to be

927
00:36:30,230 --> 00:36:36,680
able<font color="#E5E5E5"> to distinguish green from blue</font>

928
00:36:31,819 --> 00:36:38,359
<font color="#E5E5E5">using just a signal like</font><font color="#CCCCCC"> this ok so</font>

929
00:36:36,680 --> 00:36:42,109
<font color="#CCCCCC">let's try</font><font color="#E5E5E5"> and do this even though it</font>

930
00:36:38,359 --> 00:36:44,089
looks hard what we can see if<font color="#CCCCCC"> now it</font>

931
00:36:42,109 --> 00:36:46,069
looks hard<font color="#E5E5E5"> is that patterns like these</font>

932
00:36:44,089 --> 00:36:47,869
are different right<font color="#CCCCCC"> they're a little</font><font color="#E5E5E5"> bit</font>

933
00:36:46,069 --> 00:36:50,599
different<font color="#CCCCCC"> in time so I see this axis</font>

934
00:36:47,869 --> 00:36:52,819
pattern when it's green always<font color="#CCCCCC"> and this</font>

935
00:36:50,599 --> 00:36:57,140
access pattern which is<font color="#CCCCCC"> you know fewer</font>

936
00:36:52,819 --> 00:36:59,509
dots together<font color="#E5E5E5"> when it's blue</font><font color="#CCCCCC"> so can we</font>

937
00:36:57,140 --> 00:37:00,819
maybe exploit<font color="#E5E5E5"> this temporal signal in an</font>

938
00:36:59,509 --> 00:37:03,890
attack

939
00:37:00,819 --> 00:37:06,769
so let's<font color="#E5E5E5"> monitor a single teal be set</font>

940
00:37:03,890 --> 00:37:08,359
and use this temporal information<font color="#CCCCCC"> we'll</font>

941
00:37:06,769 --> 00:37:10,848
try and use a simple<font color="#CCCCCC"> information to</font>

942
00:37:08,359 --> 00:37:13,369
recognize are we in a groove<font color="#E5E5E5"> sorry</font>

943
00:37:10,849 --> 00:37:14,809
are<font color="#E5E5E5"> we in a blue area</font><font color="#CCCCCC"> blue shady area or</font>

944
00:37:13,369 --> 00:37:16,480
in a green<font color="#CCCCCC"> shed</font><font color="#E5E5E5"> area which corresponds</font>

945
00:37:14,809 --> 00:37:18,739
<font color="#E5E5E5">to the secret</font><font color="#CCCCCC"> key pit don't forget</font>

946
00:37:16,480 --> 00:37:23,509
so can we distinguish here from one

947
00:37:18,739 --> 00:37:25,940
using<font color="#E5E5E5"> this using this technique so this</font>

948
00:37:23,509 --> 00:37:27,680
is so<font color="#E5E5E5"> this is a real attack scenario so</font>

949
00:37:25,940 --> 00:37:29,239
we<font color="#E5E5E5"> have a spying process which monitors</font>

950
00:37:27,680 --> 00:37:31,098
one particular teal boosted<font color="#E5E5E5"> over and</font>

951
00:37:29,239 --> 00:37:34,460
over and<font color="#CCCCCC"> over again and the latency</font><font color="#E5E5E5"> will</font>

952
00:37:31,099 --> 00:37:35,839
be low always unless the victim<font color="#CCCCCC"> is doing</font>

953
00:37:34,460 --> 00:37:37,309
something<font color="#E5E5E5"> there as soon as the victim</font>

954
00:37:35,839 --> 00:37:39,140
does something<font color="#CCCCCC"> their lane see will go up</font>

955
00:37:37,309 --> 00:37:39,940
because<font color="#E5E5E5"> it means our own Tilby entry is</font>

956
00:37:39,140 --> 00:37:42,049
gone

957
00:37:39,940 --> 00:37:44,980
so this is what it looks<font color="#E5E5E5"> like so we have</font>

958
00:37:42,049 --> 00:37:47,630
negative give the<font color="#E5E5E5"> ping so this is the</font>

959
00:37:44,980 --> 00:37:49,579
victim does something<font color="#E5E5E5"> nothing</font><font color="#CCCCCC"> looking</font>

960
00:37:47,630 --> 00:37:51,440
<font color="#E5E5E5">for something</font><font color="#CCCCCC"> nothing and so on so this</font>

961
00:37:49,579 --> 00:37:52,910
looks quite<font color="#E5E5E5"> noisy so I can't read</font>

962
00:37:51,440 --> 00:37:54,740
tell the difference<font color="#E5E5E5"> between blue and</font>

963
00:37:52,910 --> 00:37:56,779
green<font color="#E5E5E5"> but if you</font><font color="#CCCCCC"> take a moving average</font>

964
00:37:54,740 --> 00:38:00,049
<font color="#E5E5E5">just to make it kind</font><font color="#CCCCCC"> of easier on our</font>

965
00:37:56,780 --> 00:38:02,030
human eyes then we can start to see some

966
00:38:00,050 --> 00:38:05,060
regularity there is certainly for<font color="#E5E5E5"> the</font>

967
00:38:02,030 --> 00:38:08,060
blue case and we<font color="#E5E5E5"> can kind of tell</font><font color="#CCCCCC"> that</font>

968
00:38:05,060 --> 00:38:09,890
the green case is at least<font color="#E5E5E5"> different in</font>

969
00:38:08,060 --> 00:38:12,319
some way we seems like we could<font color="#E5E5E5"> have a</font>

970
00:38:09,890 --> 00:38:13,609
chance to distinguish these signals as

971
00:38:12,319 --> 00:38:15,259
long as we don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to do it by hand</font>

972
00:38:13,609 --> 00:38:17,810
<font color="#CCCCCC">so</font><font color="#E5E5E5"> let's try and train this using</font>

973
00:38:15,260 --> 00:38:20,990
machine learning<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> take this</font><font color="#E5E5E5"> SVM</font>

974
00:38:17,810 --> 00:38:23,119
classifier<font color="#CCCCCC"> called the support</font><font color="#E5E5E5"> vector</font>

975
00:38:20,990 --> 00:38:26,209
machine I was briefly show you how this

976
00:38:23,119 --> 00:38:29,510
what this looks like<font color="#E5E5E5"> so this SVM machine</font>

977
00:38:26,210 --> 00:38:31,430
learning classifier we can train by so

978
00:38:29,510 --> 00:38:33,680
it tries to<font color="#E5E5E5"> distinguish training samples</font>

979
00:38:31,430 --> 00:38:35,089
<font color="#E5E5E5">and this is the training face you showed</font>

980
00:38:33,680 --> 00:38:37,879
a bunch<font color="#E5E5E5"> of green dots a bunch of blue</font>

981
00:38:35,089 --> 00:38:39,680
dots<font color="#E5E5E5"> and features</font><font color="#CCCCCC"> then it happened you</font>

982
00:38:37,880 --> 00:38:41,300
tell them<font color="#CCCCCC"> ok I</font><font color="#E5E5E5"> want you want you to tell</font>

983
00:38:39,680 --> 00:38:46,098
me in the future<font color="#E5E5E5"> is this green or is it</font>

984
00:38:41,300 --> 00:38:48,050
<font color="#E5E5E5">red and</font><font color="#CCCCCC"> the this this algorithm will try</font>

985
00:38:46,099 --> 00:38:50,150
and find<font color="#E5E5E5"> the</font><font color="#CCCCCC"> best separating line or</font>

986
00:38:48,050 --> 00:38:51,950
<font color="#CCCCCC">plane</font><font color="#E5E5E5"> if there are multiple features or</font>

987
00:38:50,150 --> 00:38:53,569
a hyperplane if it's if<font color="#E5E5E5"> it's even more</font>

988
00:38:51,950 --> 00:38:54,740
<font color="#CCCCCC">features</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is an example with only</font>

989
00:38:53,569 --> 00:38:56,690
two features we're going to give<font color="#E5E5E5"> it a</font>

990
00:38:54,740 --> 00:38:58,540
sample with hundreds of measurements

991
00:38:56,690 --> 00:39:00,829
it's going to be a<font color="#E5E5E5"> hundred dimensional</font>

992
00:38:58,540 --> 00:39:02,060
<font color="#E5E5E5">vector space</font><font color="#CCCCCC"> doesn't matter</font><font color="#E5E5E5"> the same</font>

993
00:39:00,829 --> 00:39:04,819
<font color="#E5E5E5">constant replies we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> try and</font>

994
00:39:02,060 --> 00:39:07,640
separate it linearly using this to be

995
00:39:04,819 --> 00:39:09,700
found hyperplane<font color="#E5E5E5"> given a training set so</font>

996
00:39:07,640 --> 00:39:12,680
can we do<font color="#E5E5E5"> that</font>

997
00:39:09,700 --> 00:39:14,598
this<font color="#E5E5E5"> is the output that we get so we see</font>

998
00:39:12,680 --> 00:39:17,000
<font color="#E5E5E5">this classifier is able to distinguish</font>

999
00:39:14,599 --> 00:39:19,760
extremely well given some training

1000
00:39:17,000 --> 00:39:21,410
examples<font color="#E5E5E5"> start of blue start of blue</font>

1001
00:39:19,760 --> 00:39:23,510
start of green start of blue<font color="#CCCCCC"> so</font><font color="#E5E5E5"> every</font>

1002
00:39:21,410 --> 00:39:25,549
<font color="#E5E5E5">set</font><font color="#CCCCCC"> of green which exactly corresponds</font>

1003
00:39:23,510 --> 00:39:30,410
to the secret key bits so that<font color="#E5E5E5"> looks</font>

1004
00:39:25,550 --> 00:39:34,450
very very<font color="#CCCCCC"> promising</font><font color="#E5E5E5"> can you tell me how</font>

1005
00:39:30,410 --> 00:39:34,450
well this thing<font color="#E5E5E5"> works yes of course</font>

1006
00:39:35,319 --> 00:39:43,819
all right<font color="#E5E5E5"> so how well does it work so</font>

1007
00:39:41,990 --> 00:39:45,529
this was like we went on and implemented

1008
00:39:43,819 --> 00:39:47,300
all these attacks<font color="#E5E5E5"> and remember all those</font>

1009
00:39:45,530 --> 00:39:49,250
defenses that<font color="#E5E5E5"> that we talked about</font>

1010
00:39:47,300 --> 00:39:50,480
software defenses and also<font color="#E5E5E5"> hardware</font>

1011
00:39:49,250 --> 00:39:52,940
defenses so we wanted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> whether</font>

1012
00:39:50,480 --> 00:39:56,359
she'll bleed<font color="#E5E5E5"> you know bypasses all these</font>

1013
00:39:52,940 --> 00:39:58,579
defenses so the first<font color="#CCCCCC"> experiment that</font><font color="#E5E5E5"> we</font>

1014
00:39:56,359 --> 00:40:00,440
<font color="#CCCCCC">rerun is basically just</font><font color="#E5E5E5"> we picked a</font>

1015
00:39:58,579 --> 00:40:02,380
bunch<font color="#E5E5E5"> of CPUs with different</font>

1016
00:40:00,440 --> 00:40:04,430
microarchitectures right and then we

1017
00:40:02,380 --> 00:40:05,010
generated a number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different</font>

1018
00:40:04,430 --> 00:40:07,350
<font color="#CCCCCC">cryptogram</font>

1019
00:40:05,010 --> 00:40:09,660
the keys and then we wanted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> see if we</font>

1020
00:40:07,350 --> 00:40:12,450
do that he'll be<font color="#CCCCCC"> TL bleeped attack on</font>

1021
00:40:09,660 --> 00:40:14,490
<font color="#E5E5E5">this</font><font color="#CCCCCC"> lip decrypt function that we</font>

1022
00:40:12,450 --> 00:40:16,290
earlier showed you how many out of<font color="#CCCCCC"> how</font>

1023
00:40:14,490 --> 00:40:18,390
<font color="#E5E5E5">many times could we actually leak leak</font>

1024
00:40:16,290 --> 00:40:20,520
the key<font color="#E5E5E5"> and so remember</font><font color="#CCCCCC"> that this is</font>

1025
00:40:18,390 --> 00:40:22,470
like a statistical analysis so sometimes

1026
00:40:20,520 --> 00:40:24,360
you don't<font color="#E5E5E5"> exactly get it right so but</font>

1027
00:40:22,470 --> 00:40:26,310
then most of<font color="#E5E5E5"> times you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to like</font>

1028
00:40:24,360 --> 00:40:28,470
either repeat<font color="#E5E5E5"> or you have to boot poor</font>

1029
00:40:26,310 --> 00:40:29,850
brute force<font color="#E5E5E5"> a large number of potential</font>

1030
00:40:28,470 --> 00:40:32,399
bits that<font color="#E5E5E5"> you have actually</font>

1031
00:40:29,850 --> 00:40:34,080
<font color="#CCCCCC">misclassified right but it turned out</font>

1032
00:40:32,400 --> 00:40:35,790
<font color="#CCCCCC">that this attack is actually</font><font color="#E5E5E5"> has a very</font>

1033
00:40:34,080 --> 00:40:39,210
very high<font color="#E5E5E5"> success rate</font><font color="#CCCCCC"> so here for</font>

1034
00:40:35,790 --> 00:40:40,680
<font color="#E5E5E5">example</font><font color="#CCCCCC"> you can see</font><font color="#E5E5E5"> that out of like you</font>

1035
00:40:39,210 --> 00:40:43,860
<font color="#CCCCCC">know a thousand cases we could</font>

1036
00:40:40,680 --> 00:40:46,560
successfully<font color="#E5E5E5"> identify the key in the</font>

1037
00:40:43,860 --> 00:40:49,410
bits of<font color="#E5E5E5"> the key in like nine</font><font color="#CCCCCC"> nine</font>

1038
00:40:46,560 --> 00:40:52,020
<font color="#CCCCCC">hundred nineteen</font><font color="#E5E5E5"> eight of the cases and</font>

1039
00:40:49,410 --> 00:40:53,279
so this basically<font color="#CCCCCC"> was quite quite a good</font>

1040
00:40:52,020 --> 00:40:55,170
<font color="#CCCCCC">resource and sometimes of course the</font>

1041
00:40:53,280 --> 00:40:57,300
keys<font color="#E5E5E5"> we some bits of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> key we</font>

1042
00:40:55,170 --> 00:40:59,130
misclassify so the questions<font color="#E5E5E5"> that can be</font>

1043
00:40:57,300 --> 00:41:02,250
brute force for<font color="#CCCCCC"> therefore the actual</font><font color="#E5E5E5"> key</font>

1044
00:40:59,130 --> 00:41:05,190
and here is basically on the right side

1045
00:41:02,250 --> 00:41:06,660
is like<font color="#E5E5E5"> the median so like on</font><font color="#CCCCCC"> average</font>

1046
00:41:05,190 --> 00:41:08,400
how many<font color="#E5E5E5"> of the bits is still required</font>

1047
00:41:06,660 --> 00:41:10,290
<font color="#CCCCCC">brute forcing and you can see that it's</font>

1048
00:41:08,400 --> 00:41:11,880
<font color="#CCCCCC">actually on average quite a low number</font>

1049
00:41:10,290 --> 00:41:15,360
<font color="#CCCCCC">of bits that that we have</font><font color="#E5E5E5"> to brute force</font>

1050
00:41:11,880 --> 00:41:16,920
<font color="#CCCCCC">and so all of these only</font><font color="#E5E5E5"> happens quite</font>

1051
00:41:15,360 --> 00:41:18,660
quickly<font color="#CCCCCC"> actually so one millisecond</font>

1052
00:41:16,920 --> 00:41:21,570
<font color="#CCCCCC">right so if you can</font><font color="#E5E5E5"> just get</font><font color="#CCCCCC"> a capture</font>

1053
00:41:18,660 --> 00:41:23,220
<font color="#CCCCCC">of one millisecond</font><font color="#E5E5E5"> out of your operation</font>

1054
00:41:21,570 --> 00:41:26,130
your cryptographic operation this is

1055
00:41:23,220 --> 00:41:27,839
<font color="#CCCCCC">enough for us to do</font><font color="#E5E5E5"> about a 17 seconds</font>

1056
00:41:26,130 --> 00:41:29,040
of analysis to actually<font color="#CCCCCC"> figure out the</font>

1057
00:41:27,840 --> 00:41:30,990
key so which<font color="#E5E5E5"> means that this is quite a</font>

1058
00:41:29,040 --> 00:41:32,070
practical attack right so most some of

1059
00:41:30,990 --> 00:41:33,569
<font color="#CCCCCC">the</font><font color="#E5E5E5"> attacks</font><font color="#CCCCCC"> that you see in the</font>

1060
00:41:32,070 --> 00:41:36,330
<font color="#CCCCCC">literature I</font><font color="#E5E5E5"> sometimes would take like</font>

1061
00:41:33,570 --> 00:41:37,800
hours or days<font color="#E5E5E5"> of analysis or we require</font>

1062
00:41:36,330 --> 00:41:39,299
you to get<font color="#E5E5E5"> a trace out of you know</font>

1063
00:41:37,800 --> 00:41:41,190
<font color="#CCCCCC">fifteen thousand cryptographic</font>

1064
00:41:39,300 --> 00:41:43,290
operations here we just<font color="#E5E5E5"> need</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> one</font>

1065
00:41:41,190 --> 00:41:47,310
millisecond<font color="#CCCCCC"> of operation</font><font color="#E5E5E5"> to be able</font><font color="#CCCCCC"> to</font>

1066
00:41:43,290 --> 00:41:48,570
actually<font color="#E5E5E5"> identify the key and so the</font>

1067
00:41:47,310 --> 00:41:50,549
number of<font color="#E5E5E5"> brute force so this is the</font>

1068
00:41:48,570 --> 00:41:53,700
median<font color="#CCCCCC"> you might you might wonder like</font>

1069
00:41:50,550 --> 00:41:55,800
how many attempts you may need so in

1070
00:41:53,700 --> 00:41:57,540
most cases<font color="#E5E5E5"> as you can see and as this</font>

1071
00:41:55,800 --> 00:41:59,790
<font color="#CCCCCC">number shows it's actually quite low</font>

1072
00:41:57,540 --> 00:42:02,130
sometimes<font color="#E5E5E5"> we need to like brute force</font>

1073
00:41:59,790 --> 00:42:04,259
about<font color="#E5E5E5"> four billion so when it is</font><font color="#CCCCCC"> like</font>

1074
00:42:02,130 --> 00:42:05,640
tell<font color="#CCCCCC"> two bits</font><font color="#E5E5E5"> out of like a large key</font>

1075
00:42:04,260 --> 00:42:07,290
that we don't know<font color="#E5E5E5"> we need to brute</font>

1076
00:42:05,640 --> 00:42:09,299
force quite a bit but this is<font color="#E5E5E5"> still</font>

1077
00:42:07,290 --> 00:42:11,490
quite<font color="#E5E5E5"> doable so it would take</font><font color="#CCCCCC"> us maybe</font>

1078
00:42:09,300 --> 00:42:13,020
like I don't<font color="#E5E5E5"> know the largest the</font>

1079
00:42:11,490 --> 00:42:14,490
longest case report<font color="#E5E5E5"> what it would be in</font>

1080
00:42:13,020 --> 00:42:15,930
a matter of minutes that<font color="#CCCCCC"> would would</font>

1081
00:42:14,490 --> 00:42:19,410
allow us<font color="#CCCCCC"> to actually do the brute force</font>

1082
00:42:15,930 --> 00:42:21,270
successfully now<font color="#E5E5E5"> I I talked about like</font>

1083
00:42:19,410 --> 00:42:24,390
<font color="#CCCCCC">hardware defenses that people have</font>

1084
00:42:21,270 --> 00:42:26,190
deployed and here is one<font color="#E5E5E5"> example the cat</font>

1085
00:42:24,390 --> 00:42:28,259
remember<font color="#CCCCCC"> cash allocation technology and</font>

1086
00:42:26,190 --> 00:42:30,450
here it shows<font color="#CCCCCC"> that it basically still</font>

1087
00:42:28,260 --> 00:42:31,980
successfully covers the key<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> more</font>

1088
00:42:30,450 --> 00:42:34,828
experiments against these so like

1089
00:42:31,980 --> 00:42:37,589
protections<font color="#E5E5E5"> both cash coloring and also</font>

1090
00:42:34,829 --> 00:42:38,819
<font color="#E5E5E5">TSX if you want to know more please go</font>

1091
00:42:37,589 --> 00:42:41,839
ahead and read our paper all<font color="#CCCCCC"> the</font>

1092
00:42:38,819 --> 00:42:47,099
experiment results are<font color="#E5E5E5"> there alright so</font>

1093
00:42:41,839 --> 00:42:49,049
how did people<font color="#E5E5E5"> react to TL</font><font color="#CCCCCC"> bleed so this</font>

1094
00:42:47,099 --> 00:42:51,390
<font color="#CCCCCC">end is</font><font color="#E5E5E5"> a file the advisory with Intel</font>

1095
00:42:49,049 --> 00:42:52,740
saying hey look we<font color="#E5E5E5"> found this new side</font>

1096
00:42:51,390 --> 00:42:55,379
channel that would allow us<font color="#CCCCCC"> to leaking</font>

1097
00:42:52,740 --> 00:42:57,270
<font color="#E5E5E5">leak information so and</font><font color="#CCCCCC"> it'll took like</font>

1098
00:42:55,380 --> 00:42:59,520
<font color="#E5E5E5">two</font><font color="#CCCCCC"> months or so to come back to us</font><font color="#E5E5E5"> and</font>

1099
00:42:57,270 --> 00:43:01,319
say this<font color="#E5E5E5"> has the same power as a</font><font color="#CCCCCC"> cash</font>

1100
00:42:59,520 --> 00:43:02,759
attack and<font color="#E5E5E5"> since they haven't solved</font>

1101
00:43:01,319 --> 00:43:04,410
<font color="#E5E5E5">cache attacks it doesn't matter that</font><font color="#CCCCCC"> you</font>

1102
00:43:02,760 --> 00:43:07,859
could also do this with<font color="#CCCCCC"> the TLB so this</font>

1103
00:43:04,410 --> 00:43:09,480
was the<font color="#E5E5E5"> response that Intel gave so but</font>

1104
00:43:07,859 --> 00:43:11,098
some people who took maybe<font color="#E5E5E5"> take</font>

1105
00:43:09,480 --> 00:43:13,650
seriously<font color="#E5E5E5"> a little bit more seriously</font>

1106
00:43:11,099 --> 00:43:15,660
like<font color="#E5E5E5"> open BSD like so we're</font><font color="#CCCCCC"> in van was</font>

1107
00:43:13,650 --> 00:43:18,359
<font color="#CCCCCC">in contact with Theo de Raadt so like</font>

1108
00:43:15,660 --> 00:43:20,520
main<font color="#CCCCCC"> commuter of</font><font color="#E5E5E5"> open BSD and he decided</font>

1109
00:43:18,359 --> 00:43:22,890
that<font color="#E5E5E5"> basically Tillett has enough impact</font>

1110
00:43:20,520 --> 00:43:25,740
<font color="#E5E5E5">for a for it to justify to disable hyper</font>

1111
00:43:22,890 --> 00:43:27,720
<font color="#E5E5E5">trading by default on open BSD platform</font>

1112
00:43:25,740 --> 00:43:29,729
and we were<font color="#E5E5E5"> also talking with Red Hat</font>

1113
00:43:27,720 --> 00:43:31,049
and<font color="#E5E5E5"> also because</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the discussions with</font>

1114
00:43:29,730 --> 00:43:32,549
Red Hat they<font color="#E5E5E5"> decided</font><font color="#CCCCCC"> to provide</font><font color="#E5E5E5"> this</font>

1115
00:43:31,049 --> 00:43:36,240
<font color="#E5E5E5">option so</font><font color="#CCCCCC"> that we could automatically</font>

1116
00:43:32,549 --> 00:43:37,799
disable hyper trading if you like so we

1117
00:43:36,240 --> 00:43:40,859
<font color="#E5E5E5">thought</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this is was a quite a good</font>

1118
00:43:37,799 --> 00:43:42,450
academic<font color="#E5E5E5"> exercise but yes so the media</font>

1119
00:43:40,859 --> 00:43:44,549
thought that this<font color="#E5E5E5"> is more than an</font>

1120
00:43:42,450 --> 00:43:46,980
<font color="#CCCCCC">academic exercise I think</font><font color="#E5E5E5"> especially</font>

1121
00:43:44,549 --> 00:43:48,720
<font color="#E5E5E5">because open BSD</font><font color="#CCCCCC"> disable hyper</font><font color="#E5E5E5"> trading</font>

1122
00:43:46,980 --> 00:43:50,549
so they<font color="#E5E5E5"> start like you</font><font color="#CCCCCC"> know getting</font><font color="#E5E5E5"> in</font>

1123
00:43:48,720 --> 00:43:52,828
touch with<font color="#CCCCCC"> us and asking basically what</font>

1124
00:43:50,549 --> 00:43:55,650
is<font color="#CCCCCC"> the impact of this</font><font color="#E5E5E5"> so there were lots</font>

1125
00:43:52,829 --> 00:43:57,390
<font color="#E5E5E5">of communication to the media and so we</font>

1126
00:43:55,650 --> 00:44:00,059
don't usually create logos for<font color="#E5E5E5"> our</font>

1127
00:43:57,390 --> 00:44:01,470
attacks but so the<font color="#E5E5E5"> register was so this</font>

1128
00:44:00,059 --> 00:44:02,910
was a communication<font color="#E5E5E5"> with</font><font color="#CCCCCC"> albums</font><font color="#E5E5E5"> it was</font>

1129
00:44:01,470 --> 00:44:05,399
nice enough to<font color="#E5E5E5"> actually create a logo</font>

1130
00:44:02,910 --> 00:44:08,460
<font color="#CCCCCC">for us so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the logo of CL</font><font color="#E5E5E5"> delete</font>

1131
00:44:05,400 --> 00:44:14,579
just<font color="#CCCCCC"> two hearts</font><font color="#E5E5E5"> with some blood leaking</font>

1132
00:44:08,460 --> 00:44:17,450
and and yeah somebody went through<font color="#CCCCCC"> the</font>

1133
00:44:14,579 --> 00:44:26,039
hassle of creating a<font color="#E5E5E5"> wiki</font><font color="#CCCCCC"> whoops</font>

1134
00:44:17,450 --> 00:44:30,058
Wikipedia<font color="#E5E5E5"> entry for us yeah so to</font>

1135
00:44:26,039 --> 00:44:33,090
conclude<font color="#E5E5E5"> we present it to you</font><font color="#CCCCCC"> TL bleed</font>

1136
00:44:30,059 --> 00:44:34,980
which is a practical reliable and

1137
00:44:33,090 --> 00:44:37,020
<font color="#CCCCCC">high resolution side channel attack more</font>

1138
00:44:34,980 --> 00:44:38,790
<font color="#E5E5E5">than any that has been known before so</font>

1139
00:44:37,020 --> 00:44:40,800
we could get<font color="#E5E5E5"> quite a lot</font><font color="#CCCCCC"> of samples</font>

1140
00:44:38,790 --> 00:44:44,670
that's why Ben could do this like

1141
00:44:40,800 --> 00:44:46,740
temporal attack<font color="#CCCCCC"> they bypass these t</font>

1142
00:44:44,670 --> 00:44:49,260
<font color="#E5E5E5">elite attacks bypass all existing known</font>

1143
00:44:46,740 --> 00:44:51,270
cache defenses<font color="#E5E5E5"> and yeah so if you</font><font color="#CCCCCC"> want</font>

1144
00:44:49,260 --> 00:44:52,560
<font color="#CCCCCC">to</font><font color="#E5E5E5"> know more about this attack and</font>

1145
00:44:51,270 --> 00:44:53,970
generally discussed our channels you<font color="#CCCCCC"> can</font>

1146
00:44:52,560 --> 00:44:56,400
find us on<font color="#E5E5E5"> Twitter this is our</font><font color="#CCCCCC"> twitter</font>

1147
00:44:53,970 --> 00:44:58,259
<font color="#E5E5E5">handle and if you want to reach the</font>

1148
00:44:56,400 --> 00:45:00,150
<font color="#CCCCCC">wider group</font><font color="#E5E5E5"> you could also use our group</font>

1149
00:44:58,260 --> 00:45:02,670
handle and this is the<font color="#CCCCCC"> website in which</font>

1150
00:45:00,150 --> 00:45:04,710
<font color="#E5E5E5">we public may be publicly</font><font color="#CCCCCC"> publish all</font>

1151
00:45:02,670 --> 00:45:06,900
the<font color="#E5E5E5"> attacks that we</font><font color="#CCCCCC"> do so this</font><font color="#E5E5E5"> is it</font>

1152
00:45:04,710 --> 00:45:08,430
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is a talk this</font><font color="#CCCCCC"> is a TL bleed so and</font>

1153
00:45:06,900 --> 00:45:17,430
<font color="#CCCCCC">we're happy</font><font color="#E5E5E5"> to take questions if there</font>

1154
00:45:08,430 --> 00:45:20,009
are<font color="#E5E5E5"> any thank</font><font color="#CCCCCC"> you hello</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font>

1155
00:45:17,430 --> 00:45:21,810
much I think we have<font color="#E5E5E5"> time for a quick</font>

1156
00:45:20,010 --> 00:45:38,550
<font color="#CCCCCC">question</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then we</font><font color="#E5E5E5"> can move into the</font>

1157
00:45:21,810 --> 00:45:40,590
panel<font color="#CCCCCC"> anyone since a question yeah</font>

1158
00:45:38,550 --> 00:45:45,570
<font color="#E5E5E5">that's a very</font><font color="#CCCCCC"> good question</font>

1159
00:45:40,590 --> 00:45:49,290
it's tricky because the teal<font color="#E5E5E5"> B is so if</font>

1160
00:45:45,570 --> 00:45:50,850
you allow<font color="#E5E5E5"> this sharing</font><font color="#CCCCCC"> its if you allow</font>

1161
00:45:49,290 --> 00:45:55,230
the sharing unlimited<font color="#E5E5E5"> dance then it's</font>

1162
00:45:50,850 --> 00:45:57,270
basically<font color="#CCCCCC"> impossible because if you were</font>

1163
00:45:55,230 --> 00:45:58,590
to try to do isolation in software it

1164
00:45:57,270 --> 00:46:01,890
would restrict<font color="#E5E5E5"> the virtual address space</font>

1165
00:45:58,590 --> 00:46:03,600
of<font color="#E5E5E5"> the person that's</font><font color="#CCCCCC"> running too much so</font>

1166
00:46:01,890 --> 00:46:05,339
that won't<font color="#E5E5E5"> work</font><font color="#CCCCCC"> so what you would</font><font color="#E5E5E5"> have</font>

1167
00:46:03,600 --> 00:46:06,660
<font color="#E5E5E5">to</font><font color="#CCCCCC"> do is either play tricks to</font>

1168
00:46:05,340 --> 00:46:09,270
<font color="#E5E5E5">scheduling so that you don't allow these</font>

1169
00:46:06,660 --> 00:46:11,330
<font color="#E5E5E5">concurrent access by two mutually</font>

1170
00:46:09,270 --> 00:46:15,120
distrusting process at the same time

1171
00:46:11,330 --> 00:46:18,870
<font color="#E5E5E5">maybe you could introduce a system level</font>

1172
00:46:15,120 --> 00:46:22,890
<font color="#CCCCCC">a system</font><font color="#E5E5E5"> call level</font><font color="#CCCCCC"> facility that</font><font color="#E5E5E5"> would</font>

1173
00:46:18,870 --> 00:46:25,020
temporarily<font color="#E5E5E5"> inhibit the scheduling of</font>

1174
00:46:22,890 --> 00:46:27,480
other<font color="#E5E5E5"> processes on the on assembling</font>

1175
00:46:25,020 --> 00:46:32,580
<font color="#E5E5E5">hyper thread that something like that</font>

1176
00:46:27,480 --> 00:46:34,140
would work<font color="#E5E5E5"> and of course a very heavy</font>

1177
00:46:32,580 --> 00:46:36,600
measured with<font color="#E5E5E5"> disable hyper-threading</font>

1178
00:46:34,140 --> 00:46:38,129
which has significant robux because

1179
00:46:36,600 --> 00:46:40,279
hyper threading does allow much higher

1180
00:46:38,130 --> 00:46:43,520
utilization of<font color="#E5E5E5"> silicon ultimately then</font>

1181
00:46:40,280 --> 00:46:45,360
then without

1182
00:46:43,520 --> 00:46:46,980
[Music]

1183
00:46:45,360 --> 00:46:49,200
what the<font color="#E5E5E5"> most realistic attack scenario</font>

1184
00:46:46,980 --> 00:46:50,700
is probably<font color="#CCCCCC"> that of</font><font color="#E5E5E5"> cloud provider so if</font>

1185
00:46:49,200 --> 00:46:53,339
<font color="#E5E5E5">there if multiple VMs on the same</font>

1186
00:46:50,700 --> 00:46:54,750
machine<font color="#E5E5E5"> and that that that's the most</font>

1187
00:46:53,340 --> 00:46:58,980
realistic scenario<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> that will</font>

1188
00:46:54,750 --> 00:47:01,680
allow two different parties on the same

1189
00:46:58,980 --> 00:47:04,050
<font color="#E5E5E5">CPU at the same time what what should</font>

1190
00:47:01,680 --> 00:47:05,490
happen in<font color="#E5E5E5"> that</font><font color="#CCCCCC"> case is that they should</font>

1191
00:47:04,050 --> 00:47:07,320
<font color="#CCCCCC">all be scheduled</font><font color="#E5E5E5"> the same CPU at the</font>

1192
00:47:05,490 --> 00:47:12,060
same time and I<font color="#E5E5E5"> think</font><font color="#CCCCCC"> that is</font><font color="#E5E5E5"> the most</font>

1193
00:47:07,320 --> 00:47:16,140
realistic<font color="#CCCCCC"> balance to strike do you</font><font color="#E5E5E5"> think</font>

1194
00:47:12,060 --> 00:47:18,120
that's a complete answer yeah disable it

1195
00:47:16,140 --> 00:47:20,129
if you don't care<font color="#CCCCCC"> about performance</font><font color="#E5E5E5"> that</font>

1196
00:47:18,120 --> 00:47:22,680
much<font color="#E5E5E5"> or try to do your scheduling right</font>

1197
00:47:20,130 --> 00:47:34,470
so I guess does<font color="#CCCCCC"> that answer your</font>

1198
00:47:22,680 --> 00:47:36,500
question it's it's<font color="#E5E5E5"> one of these things I</font>

1199
00:47:34,470 --> 00:47:39,029
<font color="#CCCCCC">think that you have to choose between</font>

1200
00:47:36,500 --> 00:47:45,300
<font color="#E5E5E5">sharing performance or not sharing for</font>

1201
00:47:39,030 --> 00:47:48,230
security and<font color="#CCCCCC"> it depends</font><font color="#E5E5E5"> on situation all</font>

1202
00:47:45,300 --> 00:47:50,670
<font color="#E5E5E5">right thank you</font><font color="#CCCCCC"> very much we talked and</font>

1203
00:47:48,230 --> 00:47:52,200
we'll have a short<font color="#CCCCCC"> break because we need</font>

1204
00:47:50,670 --> 00:47:56,490
to<font color="#E5E5E5"> set</font><font color="#CCCCCC"> up the chairs for</font><font color="#E5E5E5"> the panel so</font>

1205
00:47:52,200 --> 00:47:58,259
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can sit here or breathe thank you</font>

1206
00:47:56,490 --> 00:47:59,879
for questions please<font color="#CCCCCC"> come to us</font><font color="#E5E5E5"> sorry</font>

1207
00:47:58,260 --> 00:48:04,019
<font color="#CCCCCC">yeah yeah thanks</font>

1208
00:47:59,880 --> 00:48:04,019
[Applause]

