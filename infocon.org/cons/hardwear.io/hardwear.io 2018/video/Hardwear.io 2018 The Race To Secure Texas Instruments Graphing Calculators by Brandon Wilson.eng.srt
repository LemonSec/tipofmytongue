1
00:00:03,740 --> 00:00:10,110
hello<font color="#E5E5E5"> everybody</font><font color="#CCCCCC"> so how many</font><font color="#E5E5E5"> people here</font>

2
00:00:08,940 --> 00:00:12,509
are familiar with Texas Instruments

3
00:00:10,110 --> 00:00:14,969
<font color="#CCCCCC">graphing calculators a whole</font><font color="#E5E5E5"> bunch of</font>

4
00:00:12,509 --> 00:00:18,779
people<font color="#E5E5E5"> familiar like you used them</font>

5
00:00:14,969 --> 00:00:20,039
before<font color="#E5E5E5"> like</font><font color="#CCCCCC"> in math class</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I think a</font>

6
00:00:18,779 --> 00:00:21,930
lot of people are probably<font color="#E5E5E5"> familiar with</font>

7
00:00:20,039 --> 00:00:23,760
<font color="#E5E5E5">them from school</font><font color="#CCCCCC"> they're very expensive</font>

8
00:00:21,930 --> 00:00:26,789
or<font color="#CCCCCC"> over priced devices and schools</font>

9
00:00:23,760 --> 00:00:28,410
require<font color="#E5E5E5"> you to buy or use for math class</font>

10
00:00:26,789 --> 00:00:30,449
some people are also probably<font color="#E5E5E5"> familiar</font>

11
00:00:28,410 --> 00:00:31,890
with<font color="#E5E5E5"> the fact</font><font color="#CCCCCC"> that you can that they're</font>

12
00:00:30,449 --> 00:00:33,719
programmable<font color="#E5E5E5"> you can write</font><font color="#CCCCCC"> programs for</font>

13
00:00:31,890 --> 00:00:36,390
<font color="#CCCCCC">them you can make</font><font color="#E5E5E5"> them do all sorts of</font>

14
00:00:33,719 --> 00:00:38,520
<font color="#E5E5E5">things from helping</font><font color="#CCCCCC"> with math</font>

15
00:00:36,390 --> 00:00:41,670
assignments to taking notes for science

16
00:00:38,520 --> 00:00:45,539
and other classes<font color="#E5E5E5"> and playing games of</font>

17
00:00:41,670 --> 00:00:46,829
<font color="#E5E5E5">course</font><font color="#CCCCCC"> but what people outside</font><font color="#E5E5E5"> of the</font>

18
00:00:45,539 --> 00:00:48,000
calculator community might not know is

19
00:00:46,829 --> 00:00:49,530
that<font color="#E5E5E5"> these devices are great learning</font>

20
00:00:48,000 --> 00:00:52,680
tools for getting<font color="#E5E5E5"> into programming and</font>

21
00:00:49,530 --> 00:00:53,610
even reverse<font color="#E5E5E5"> engineering because</font><font color="#CCCCCC"> a big</font>

22
00:00:52,680 --> 00:00:55,440
chunk of<font color="#E5E5E5"> what we know</font><font color="#CCCCCC"> about programming</font>

23
00:00:53,610 --> 00:00:57,390
<font color="#E5E5E5">graphing calculators we know because we</font>

24
00:00:55,440 --> 00:00:58,858
figured it out ourselves<font color="#E5E5E5"> we wrote code</font>

25
00:00:57,390 --> 00:01:00,359
not<font color="#E5E5E5"> knowing what would happen we'd run</font>

26
00:00:58,859 --> 00:01:02,219
<font color="#E5E5E5">tests we'd experiment with the hardware</font>

27
00:01:00,359 --> 00:01:05,460
you know what the hardware<font color="#CCCCCC"> would do and</font>

28
00:01:02,219 --> 00:01:07,140
so on<font color="#E5E5E5"> so that's that's never more true</font>

29
00:01:05,459 --> 00:01:09,689
<font color="#CCCCCC">than with trying</font><font color="#E5E5E5"> to break the</font><font color="#CCCCCC"> security</font>

30
00:01:07,140 --> 00:01:12,090
built into<font color="#CCCCCC"> these</font><font color="#E5E5E5"> things and</font><font color="#CCCCCC"> why would we</font>

31
00:01:09,689 --> 00:01:15,000
<font color="#CCCCCC">want to do that well I'm gonna get into</font>

32
00:01:12,090 --> 00:01:16,770
<font color="#CCCCCC">that my goal with</font><font color="#E5E5E5"> this talk is to</font>

33
00:01:15,000 --> 00:01:17,970
<font color="#E5E5E5">provide a personal and historical</font>

34
00:01:16,770 --> 00:01:19,890
overview of<font color="#E5E5E5"> what the calculator</font>

35
00:01:17,970 --> 00:01:21,330
community is how it started the major

36
00:01:19,890 --> 00:01:23,070
things that<font color="#E5E5E5"> have happened in it where</font>

37
00:01:21,330 --> 00:01:25,200
we're<font color="#E5E5E5"> at now and hopefully</font><font color="#CCCCCC"> where we're</font>

38
00:01:23,070 --> 00:01:27,059
going with<font color="#CCCCCC"> it it's</font><font color="#E5E5E5"> very technical</font><font color="#CCCCCC"> and I</font>

39
00:01:25,200 --> 00:01:28,350
have a whole lot<font color="#CCCCCC"> to get through and not</font>

40
00:01:27,060 --> 00:01:30,170
a lot<font color="#CCCCCC"> of time to do it so I may</font><font color="#E5E5E5"> be</font>

41
00:01:28,350 --> 00:01:32,189
<font color="#E5E5E5">speaking kind of fast</font><font color="#CCCCCC"> sorry about that</font>

42
00:01:30,170 --> 00:01:34,340
<font color="#E5E5E5">but if you have a question or</font>

43
00:01:32,189 --> 00:01:40,820
observation just yell at me<font color="#CCCCCC"> and</font><font color="#E5E5E5"> earth me</font>

44
00:01:34,340 --> 00:01:43,259
<font color="#CCCCCC">so it started so Who am I</font>

45
00:01:40,820 --> 00:01:45,029
I'm nobody I'm just<font color="#CCCCCC"> the guy</font><font color="#E5E5E5"> with that</font>

46
00:01:43,259 --> 00:01:47,700
<font color="#E5E5E5">has a lot of calculators way too many of</font>

47
00:01:45,030 --> 00:01:48,930
them<font color="#CCCCCC"> they</font><font color="#E5E5E5"> are what got me</font><font color="#CCCCCC"> started in</font><font color="#E5E5E5"> the</font>

48
00:01:47,700 --> 00:01:51,240
software<font color="#CCCCCC"> development industry and</font>

49
00:01:48,930 --> 00:01:54,240
because of<font color="#E5E5E5"> them I'm now in the security</font>

50
00:01:51,240 --> 00:01:56,250
industry these<font color="#E5E5E5"> are not complete pictures</font>

51
00:01:54,240 --> 00:01:58,170
because I do have<font color="#CCCCCC"> more than what you</font><font color="#E5E5E5"> see</font>

52
00:01:56,250 --> 00:01:59,130
<font color="#CCCCCC">here but this</font><font color="#E5E5E5"> is as far</font><font color="#CCCCCC"> as I know the</font>

53
00:01:58,170 --> 00:02:01,229
world's largest collection of

54
00:01:59,130 --> 00:02:02,729
calculators Ti calculators and

55
00:02:01,229 --> 00:02:05,009
accessories and when I say<font color="#E5E5E5"> that I mean</font>

56
00:02:02,729 --> 00:02:06,060
in<font color="#E5E5E5"> terms of variation I know there are</font>

57
00:02:05,009 --> 00:02:07,829
at least a couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> people who</font><font color="#CCCCCC"> have</font>

58
00:02:06,060 --> 00:02:11,069
more than<font color="#CCCCCC"> me</font><font color="#E5E5E5"> just in terms of numbers</font>

59
00:02:07,829 --> 00:02:12,170
but this is at<font color="#CCCCCC"> least one of every</font><font color="#E5E5E5"> every</font>

60
00:02:11,068 --> 00:02:13,769
model that's ever been<font color="#E5E5E5"> mass-produced</font>

61
00:02:12,170 --> 00:02:15,450
<font color="#CCCCCC">from all over</font><font color="#E5E5E5"> the world</font>

62
00:02:13,770 --> 00:02:16,860
every harder revision every color

63
00:02:15,450 --> 00:02:19,049
variant except for one model because

64
00:02:16,860 --> 00:02:19,830
there's just<font color="#E5E5E5"> so darn many of them every</font>

65
00:02:19,050 --> 00:02:21,630
view<font color="#E5E5E5"> screen</font>

66
00:02:19,830 --> 00:02:24,240
our teachers<font color="#CCCCCC"> edition</font><font color="#E5E5E5"> every easy spot</font>

67
00:02:21,630 --> 00:02:26,760
yellow school<font color="#CCCCCC"> version some of them were</font>

68
00:02:24,240 --> 00:02:28,860
<font color="#E5E5E5">stolen from schools as well</font><font color="#CCCCCC"> as a</font><font color="#E5E5E5"> number</font>

69
00:02:26,760 --> 00:02:34,470
of<font color="#CCCCCC"> one-of-a-kind or near one-of-a-kind</font>

70
00:02:28,860 --> 00:02:36,210
<font color="#E5E5E5">prototypes and engineering samples so I</font>

71
00:02:34,470 --> 00:02:38,790
grew up with these<font color="#E5E5E5"> things they gave me</font>

72
00:02:36,210 --> 00:02:40,200
my<font color="#E5E5E5"> career and</font><font color="#CCCCCC"> my life</font><font color="#E5E5E5"> I love them and I</font>

73
00:02:38,790 --> 00:02:41,519
<font color="#CCCCCC">want to make it so they can do</font>

74
00:02:40,200 --> 00:02:44,160
absolutely everything<font color="#CCCCCC"> that they're</font>

75
00:02:41,520 --> 00:02:45,510
<font color="#E5E5E5">capable of and then some</font><font color="#CCCCCC"> and make</font><font color="#E5E5E5"> sure</font>

76
00:02:44,160 --> 00:02:47,310
that everybody else can<font color="#CCCCCC"> too because I'm</font>

77
00:02:45,510 --> 00:02:48,600
<font color="#E5E5E5">not the only one the these things have</font>

78
00:02:47,310 --> 00:02:49,800
jump-started<font color="#E5E5E5"> a lot of careers and</font>

79
00:02:48,600 --> 00:02:51,720
<font color="#E5E5E5">knowledge about low-level programming</font>

80
00:02:49,800 --> 00:02:54,630
embedded devices software<font color="#E5E5E5"> engineering</font>

81
00:02:51,720 --> 00:02:55,980
<font color="#E5E5E5">and hardware and</font><font color="#CCCCCC"> software</font><font color="#E5E5E5"> acting so my</font>

82
00:02:54,630 --> 00:02:57,240
hope is that<font color="#E5E5E5"> I could share</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> you a</font>

83
00:02:55,980 --> 00:02:59,730
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> journey with</font><font color="#E5E5E5"> these</font>

84
00:02:57,240 --> 00:03:00,810
<font color="#E5E5E5">devices how far they've come and maybe</font>

85
00:02:59,730 --> 00:03:05,190
learn a little something<font color="#CCCCCC"> or be</font>

86
00:03:00,810 --> 00:03:06,840
entertained<font color="#CCCCCC"> along the way so what is it</font>

87
00:03:05,190 --> 00:03:09,240
<font color="#CCCCCC">Rock</font><font color="#E5E5E5"> what is a</font><font color="#CCCCCC"> graphing calculator well</font>

88
00:03:06,840 --> 00:03:10,800
first and foremost<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> a calculator</font>

89
00:03:09,240 --> 00:03:12,180
<font color="#E5E5E5">it's capable of doing everything</font><font color="#CCCCCC"> the</font>

90
00:03:10,800 --> 00:03:13,980
scientific<font color="#CCCCCC"> calculator can do but it also</font>

91
00:03:12,180 --> 00:03:15,810
has a large<font color="#E5E5E5"> screen enabling the graphing</font>

92
00:03:13,980 --> 00:03:18,290
<font color="#E5E5E5">of equations or tracing solutions along</font>

93
00:03:15,810 --> 00:03:21,570
<font color="#E5E5E5">the graph or drawing on it and so on</font>

94
00:03:18,290 --> 00:03:24,510
they<font color="#E5E5E5"> have a 2.5 millimeter a serial i/o</font>

95
00:03:21,570 --> 00:03:26,130
port<font color="#E5E5E5"> and in some cases some models they</font>

96
00:03:24,510 --> 00:03:27,570
have<font color="#E5E5E5"> USB as well so you can share</font>

97
00:03:26,130 --> 00:03:29,280
variables and programs between

98
00:03:27,570 --> 00:03:31,880
calculators or<font color="#E5E5E5"> connect it to a</font><font color="#CCCCCC"> computer</font>

99
00:03:29,280 --> 00:03:34,110
<font color="#E5E5E5">and share them with anybody in</font><font color="#CCCCCC"> the world</font>

100
00:03:31,880 --> 00:03:35,280
they are<font color="#E5E5E5"> programmable</font><font color="#CCCCCC"> which means you</font>

101
00:03:34,110 --> 00:03:36,959
can create programs to<font color="#CCCCCC"> help</font><font color="#E5E5E5"> you solve</font>

102
00:03:35,280 --> 00:03:39,090
math or<font color="#CCCCCC"> engineering problems</font><font color="#E5E5E5"> using a</font>

103
00:03:36,959 --> 00:03:39,600
basic<font color="#E5E5E5"> like language the</font><font color="#CCCCCC"> ti invented</font>

104
00:03:39,090 --> 00:03:42,390
<font color="#CCCCCC">called</font>

105
00:03:39,600 --> 00:03:44,160
<font color="#CCCCCC">TI basic it does have some very basic</font>

106
00:03:42,390 --> 00:03:46,920
commands for programming games<font color="#E5E5E5"> such</font><font color="#CCCCCC"> as</font>

107
00:03:44,160 --> 00:03:48,270
gathering key press<font color="#CCCCCC"> input but</font><font color="#E5E5E5"> yeah basic</font>

108
00:03:46,920 --> 00:03:50,429
is just way too slow to really utilize

109
00:03:48,270 --> 00:03:53,040
the hardware to its<font color="#E5E5E5"> maximum potential so</font>

110
00:03:50,430 --> 00:03:54,780
for that we<font color="#E5E5E5"> have assembly language now</font>

111
00:03:53,040 --> 00:03:57,840
one<font color="#E5E5E5"> former one form or another every</font>

112
00:03:54,780 --> 00:03:59,430
model with the exception of the<font color="#E5E5E5"> ti-84</font>

113
00:03:57,840 --> 00:04:01,890
working on it is<font color="#CCCCCC"> capable</font><font color="#E5E5E5"> of running</font>

114
00:03:59,430 --> 00:04:03,570
arbitrary native code<font color="#CCCCCC"> and some of these</font>

115
00:04:01,890 --> 00:04:05,730
have this capability built into<font color="#E5E5E5"> them and</font>

116
00:04:03,570 --> 00:04:10,530
some<font color="#E5E5E5"> of them had to</font><font color="#CCCCCC"> be hacked first by</font>

117
00:04:05,730 --> 00:04:12,810
the user community the models that<font color="#CCCCCC"> came</font>

118
00:04:10,530 --> 00:04:14,430
<font color="#E5E5E5">first for the Z log models</font><font color="#CCCCCC"> now the</font>

119
00:04:12,810 --> 00:04:16,890
entire life my<font color="#E5E5E5"> entire life I've said</font>

120
00:04:14,430 --> 00:04:18,810
<font color="#CCCCCC">zilog or</font><font color="#E5E5E5"> Z log not dialogue I know</font><font color="#CCCCCC"> I</font>

121
00:04:16,890 --> 00:04:20,579
<font color="#CCCCCC">know</font><font color="#E5E5E5"> dialogues probably right but you're</font>

122
00:04:18,810 --> 00:04:21,899
<font color="#E5E5E5">gonna have to forgive me I I just</font><font color="#CCCCCC"> say</font>

123
00:04:20,579 --> 00:04:25,919
<font color="#CCCCCC">Zila or Z</font><font color="#E5E5E5"> log without even thinking</font>

124
00:04:21,899 --> 00:04:27,690
about<font color="#E5E5E5"> except now</font><font color="#CCCCCC"> Sang's I log but yeah I</font>

125
00:04:25,919 --> 00:04:30,659
do say Z log<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> you have to forget</font>

126
00:04:27,690 --> 00:04:32,820
but so these<font color="#E5E5E5"> models use the z80</font>

127
00:04:30,660 --> 00:04:34,940
processor which is<font color="#CCCCCC"> a very old processor</font>

128
00:04:32,820 --> 00:04:36,930
used in<font color="#E5E5E5"> a number of devices old and new</font>

129
00:04:34,940 --> 00:04:38,219
<font color="#CCCCCC">because it's actually pretty nice it's</font>

130
00:04:36,930 --> 00:04:41,100
<font color="#CCCCCC">very versatile</font><font color="#E5E5E5"> to be using a lot of</font>

131
00:04:38,220 --> 00:04:44,700
<font color="#E5E5E5">different</font><font color="#CCCCCC"> applications</font><font color="#E5E5E5"> it's six</font>

132
00:04:41,100 --> 00:04:45,900
megahertz<font color="#CCCCCC"> on this model and</font><font color="#E5E5E5"> or on these</font>

133
00:04:44,700 --> 00:04:48,320
calculators for<font color="#E5E5E5"> the most part but some</font>

134
00:04:45,900 --> 00:04:50,190
<font color="#E5E5E5">models have a</font><font color="#CCCCCC"> fifteen megahertz</font>

135
00:04:48,320 --> 00:04:52,590
<font color="#E5E5E5">version they could switch between six</font>

136
00:04:50,190 --> 00:04:55,200
and<font color="#E5E5E5"> fifteen megahertz it's an 8-bit CPU</font>

137
00:04:52,590 --> 00:04:57,060
<font color="#E5E5E5">it has 16-bit addressing meaning you can</font>

138
00:04:55,200 --> 00:04:59,219
access a maximum of 64 kilobytes of

139
00:04:57,060 --> 00:05:01,350
memory at any<font color="#CCCCCC"> one time and it has an</font>

140
00:04:59,220 --> 00:05:02,820
8-bit i/o port interface<font color="#E5E5E5"> so you can</font>

141
00:05:01,350 --> 00:05:06,000
interact<font color="#CCCCCC"> with the hardware by outputting</font>

142
00:05:02,820 --> 00:05:09,090
or inputting from one of up to 256

143
00:05:06,000 --> 00:05:10,710
<font color="#E5E5E5">logical ports they have anywhere</font><font color="#CCCCCC"> from 32</font>

144
00:05:09,090 --> 00:05:13,710
kilobytes of RAM all the way up to 128

145
00:05:10,710 --> 00:05:15,090
<font color="#E5E5E5">this is quite a lot</font><font color="#CCCCCC"> some of them the</font>

146
00:05:13,710 --> 00:05:16,680
most<font color="#E5E5E5"> interesting ones have flash memory</font>

147
00:05:15,090 --> 00:05:21,479
<font color="#E5E5E5">which ranges anywhere from one megabyte</font>

148
00:05:16,680 --> 00:05:22,680
<font color="#E5E5E5">all the way up to four megabytes now</font><font color="#CCCCCC"> the</font>

149
00:05:21,480 --> 00:05:25,200
first model<font color="#CCCCCC"> capable of running</font><font color="#E5E5E5"> native</font>

150
00:05:22,680 --> 00:05:27,230
assembly programs was the<font color="#CCCCCC"> tid 5 it's a</font>

151
00:05:25,200 --> 00:05:29,490
very<font color="#E5E5E5"> old model you don't see</font><font color="#CCCCCC"> very often</font>

152
00:05:27,230 --> 00:05:30,930
<font color="#CCCCCC">rumor has it that the I employees</font>

153
00:05:29,490 --> 00:05:32,310
actually<font color="#CCCCCC"> had a bet internally as to</font>

154
00:05:30,930 --> 00:05:34,140
whether we<font color="#CCCCCC"> would figure out</font><font color="#E5E5E5"> a way to run</font>

155
00:05:32,310 --> 00:05:35,550
<font color="#E5E5E5">native assembly programs on this</font>

156
00:05:34,140 --> 00:05:36,990
<font color="#E5E5E5">calculator and</font><font color="#CCCCCC"> that was a safe bet</font>

157
00:05:35,550 --> 00:05:38,580
because<font color="#E5E5E5"> the community did figure out</font><font color="#CCCCCC"> a</font>

158
00:05:36,990 --> 00:05:41,100
way and<font color="#CCCCCC"> that was through something</font>

159
00:05:38,580 --> 00:05:42,510
called<font color="#E5E5E5"> Z show and to explain how these</font>

160
00:05:41,100 --> 00:05:44,700
show works I<font color="#E5E5E5"> have to elaborate a little</font>

161
00:05:42,510 --> 00:05:46,469
bit on a particular feature<font color="#E5E5E5"> that these</font>

162
00:05:44,700 --> 00:05:49,979
all models have<font color="#E5E5E5"> and that is to transfer</font>

163
00:05:46,470 --> 00:05:51,450
backups we via the TI graphing<font color="#CCCCCC"> IO cable</font>

164
00:05:49,980 --> 00:05:54,000
which is<font color="#E5E5E5"> what connects these old</font>

165
00:05:51,450 --> 00:05:55,950
calculators to<font color="#CCCCCC"> a computer these backups</font>

166
00:05:54,000 --> 00:05:59,160
<font color="#E5E5E5">as it were are actually just dumps of</font>

167
00:05:55,950 --> 00:06:00,930
the entire<font color="#CCCCCC"> RAM not just</font><font color="#E5E5E5"> for variables of</font>

168
00:05:59,160 --> 00:06:03,419
store but the system's<font color="#E5E5E5"> Ram as well at</font>

169
00:06:00,930 --> 00:06:04,650
the OS uses so the calculators operating

170
00:06:03,419 --> 00:06:06,780
system<font color="#E5E5E5"> also</font><font color="#CCCCCC"> supports</font><font color="#E5E5E5"> something called a</font>

171
00:06:04,650 --> 00:06:11,460
<font color="#E5E5E5">custom menu which is that rare that what</font>

172
00:06:06,780 --> 00:06:13,289
that<font color="#CCCCCC"> red arrow is pointing to it you</font>

173
00:06:11,460 --> 00:06:14,340
could<font color="#E5E5E5"> add</font><font color="#CCCCCC"> your most commonly</font><font color="#E5E5E5"> used</font><font color="#CCCCCC"> oh s</font>

174
00:06:13,290 --> 00:06:16,919
commands in there and then be able<font color="#E5E5E5"> to</font>

175
00:06:14,340 --> 00:06:18,479
<font color="#CCCCCC">access</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> easily</font><font color="#E5E5E5"> and interestingly the</font>

176
00:06:16,919 --> 00:06:20,370
way the OS stores things<font color="#E5E5E5"> in this menu is</font>

177
00:06:18,480 --> 00:06:22,080
<font color="#CCCCCC">just by keeping track of the address of</font>

178
00:06:20,370 --> 00:06:24,360
the code<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would handle</font><font color="#CCCCCC"> that command</font>

179
00:06:22,080 --> 00:06:26,550
<font color="#CCCCCC">and it keeps track of this in system ram</font>

180
00:06:24,360 --> 00:06:28,290
<font color="#E5E5E5">which is included in</font><font color="#CCCCCC"> that memory backup</font>

181
00:06:26,550 --> 00:06:29,940
that's transferred to a<font color="#CCCCCC"> computer so that</font>

182
00:06:28,290 --> 00:06:31,169
<font color="#E5E5E5">means all we have to do is change the</font>

183
00:06:29,940 --> 00:06:32,460
<font color="#E5E5E5">address of one of these</font><font color="#CCCCCC"> custom menu</font>

184
00:06:31,169 --> 00:06:35,250
introduced to point the code that we

185
00:06:32,460 --> 00:06:37,500
also<font color="#E5E5E5"> embed in the</font><font color="#CCCCCC"> Ram backup</font><font color="#E5E5E5"> and that's</font>

186
00:06:35,250 --> 00:06:38,729
<font color="#CCCCCC">and you got</font><font color="#E5E5E5"> code execution that's what</font><font color="#CCCCCC"> Z</font>

187
00:06:37,500 --> 00:06:40,200
shell is it's just<font color="#E5E5E5"> a small program</font><font color="#CCCCCC"> that</font>

188
00:06:38,729 --> 00:06:41,409
lets you<font color="#E5E5E5"> run other programs that you can</font>

189
00:06:40,200 --> 00:06:45,998
write and store in the calculator

190
00:06:41,409 --> 00:06:47,979
in the form of<font color="#E5E5E5"> string variables then the</font>

191
00:06:45,999 --> 00:06:49,899
<font color="#CCCCCC">TI you too came along</font><font color="#E5E5E5"> and it also had to</font>

192
00:06:47,979 --> 00:06:52,748
<font color="#CCCCCC">be hacked in order to enable executing</font>

193
00:06:49,899 --> 00:06:54,550
assembly code<font color="#CCCCCC"> unfortunately though the</font>

194
00:06:52,749 --> 00:06:56,649
<font color="#E5E5E5">TI</font><font color="#CCCCCC"> you - has no custom menu so another</font>

195
00:06:54,550 --> 00:06:58,239
method<font color="#E5E5E5"> had to be found</font><font color="#CCCCCC"> it does have</font>

196
00:06:56,649 --> 00:06:59,739
memory<font color="#CCCCCC"> backup so so we start taking a</font>

197
00:06:58,239 --> 00:07:04,209
<font color="#E5E5E5">look at other things that are stored in</font>

198
00:06:59,739 --> 00:07:06,128
system<font color="#CCCCCC"> RAM in that backup now the TI OS</font>

199
00:07:04,209 --> 00:07:07,330
is essentially just<font color="#E5E5E5"> a series of what</font><font color="#CCCCCC"> are</font>

200
00:07:06,129 --> 00:07:09,129
called context which are kind of like

201
00:07:07,330 --> 00:07:10,688
<font color="#CCCCCC">built-in</font><font color="#E5E5E5"> applications with things like</font>

202
00:07:09,129 --> 00:07:13,119
<font color="#E5E5E5">the home screen the equation editor the</font>

203
00:07:10,689 --> 00:07:14,889
graph<font color="#CCCCCC"> screen there's like</font><font color="#E5E5E5"> little</font>

204
00:07:13,119 --> 00:07:17,019
built-in applications<font color="#CCCCCC"> insight in the in</font>

205
00:07:14,889 --> 00:07:18,639
the OS and each context has a<font color="#E5E5E5"> table of</font>

206
00:07:17,019 --> 00:07:20,079
addresses<font color="#E5E5E5"> that point to handlers for</font>

207
00:07:18,639 --> 00:07:21,399
different things such as what<font color="#E5E5E5"> happens</font>

208
00:07:20,079 --> 00:07:23,050
when you<font color="#E5E5E5"> press the key what happens when</font>

209
00:07:21,399 --> 00:07:25,079
you try to<font color="#E5E5E5"> close</font><font color="#CCCCCC"> the application or</font>

210
00:07:23,050 --> 00:07:27,610
switch to<font color="#CCCCCC"> another one things</font><font color="#E5E5E5"> like that</font>

211
00:07:25,079 --> 00:07:29,229
<font color="#CCCCCC">and the key pressed handler is</font><font color="#E5E5E5"> called</font>

212
00:07:27,610 --> 00:07:31,479
the CX main handler because<font color="#E5E5E5"> it's the</font>

213
00:07:29,229 --> 00:07:33,818
main most important<font color="#E5E5E5"> handler and whenever</font>

214
00:07:31,479 --> 00:07:35,289
<font color="#E5E5E5">you switch to a new context these</font>

215
00:07:33,819 --> 00:07:39,159
handler addresses are<font color="#CCCCCC"> stored in system</font>

216
00:07:35,289 --> 00:07:40,239
<font color="#CCCCCC">RAM</font><font color="#E5E5E5"> so if we can overwrite</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> then all</font>

217
00:07:39,159 --> 00:07:42,069
you have<font color="#E5E5E5"> to do is press the key the next</font>

218
00:07:40,239 --> 00:07:44,138
<font color="#E5E5E5">ninety four so key it runs that code and</font>

219
00:07:42,069 --> 00:07:46,419
there you go<font color="#E5E5E5"> so our goal is</font><font color="#CCCCCC"> to find</font><font color="#E5E5E5"> a</font>

220
00:07:44,139 --> 00:07:48,639
way at runtime<font color="#E5E5E5"> to overwrite that's the</font><font color="#CCCCCC"> X</font>

221
00:07:46,419 --> 00:07:50,438
main<font color="#E5E5E5"> I'd</font><font color="#CCCCCC"> learn system</font><font color="#E5E5E5"> Ram and that's</font>

222
00:07:48,639 --> 00:07:51,729
done<font color="#E5E5E5"> by another piece of</font><font color="#CCCCCC"> functionality</font>

223
00:07:50,439 --> 00:07:52,839
that<font color="#CCCCCC"> you might be familiar</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> have you</font>

224
00:07:51,729 --> 00:07:55,240
<font color="#E5E5E5">ever</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> these things and that is</font>

225
00:07:52,839 --> 00:07:57,999
storing<font color="#E5E5E5"> values to variables like</font><font color="#CCCCCC"> Story 1</font>

226
00:07:55,240 --> 00:07:59,860
<font color="#E5E5E5">to X like real variables which is just</font>

227
00:07:57,999 --> 00:08:02,740
real<font color="#E5E5E5"> isn't not complex but real</font>

228
00:07:59,860 --> 00:08:04,990
variables are numbers<font color="#CCCCCC"> and they</font><font color="#E5E5E5"> are</font>

229
00:08:02,740 --> 00:08:06,610
stored in RAM is 9 bytes<font color="#E5E5E5"> and when you</font>

230
00:08:04,990 --> 00:08:08,349
copy one variable to<font color="#E5E5E5"> another those</font><font color="#CCCCCC"> nine</font>

231
00:08:06,610 --> 00:08:09,999
bytes are just copied<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> source</font>

232
00:08:08,349 --> 00:08:12,998
variable to wherever the<font color="#CCCCCC"> data for the</font>

233
00:08:09,999 --> 00:08:14,079
second<font color="#CCCCCC"> variable</font><font color="#E5E5E5"> is so and all these</font>

234
00:08:12,999 --> 00:08:16,329
<font color="#E5E5E5">thing all these variables are stored in</font>

235
00:08:14,079 --> 00:08:18,189
that memory<font color="#CCCCCC"> backup so if we modify one</font>

236
00:08:16,329 --> 00:08:19,599
real variable like X with the bytes that

237
00:08:18,189 --> 00:08:21,550
<font color="#E5E5E5">we want like the address of the code</font>

238
00:08:19,599 --> 00:08:23,860
<font color="#CCCCCC">that we embed in the memory</font><font color="#E5E5E5"> backup and</font>

239
00:08:21,550 --> 00:08:26,169
then modify the location<font color="#E5E5E5"> the location of</font>

240
00:08:23,860 --> 00:08:28,769
a second real variable like<font color="#E5E5E5"> Y so point</font>

241
00:08:26,169 --> 00:08:31,119
to<font color="#E5E5E5"> that CX main handler in system</font><font color="#CCCCCC"> RAM</font>

242
00:08:28,769 --> 00:08:32,828
instead<font color="#E5E5E5"> of where the variable data</font>

243
00:08:31,119 --> 00:08:35,229
actually is<font color="#E5E5E5"> then we can</font><font color="#CCCCCC"> override</font><font color="#E5E5E5"> CX main</font>

244
00:08:32,828 --> 00:08:35,828
by just storing X to Y<font color="#CCCCCC"> so once you do</font>

245
00:08:35,229 --> 00:08:37,779
that

246
00:08:35,828 --> 00:08:40,838
CX main is overwritten<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the next time</font>

247
00:08:37,779 --> 00:08:42,789
<font color="#E5E5E5">you</font><font color="#CCCCCC"> force a</font><font color="#E5E5E5"> key your code is running so</font>

248
00:08:40,839 --> 00:08:45,490
that<font color="#CCCCCC"> gets it's a shell with which to run</font>

249
00:08:42,789 --> 00:08:46,720
<font color="#E5E5E5">other programs just</font><font color="#CCCCCC"> like the 85 they</font>

250
00:08:45,490 --> 00:08:47,980
don't call the C<font color="#E5E5E5"> shell on that one they</font>

251
00:08:46,720 --> 00:08:52,589
call it the<font color="#CCCCCC"> there's section several ways</font>

252
00:08:47,980 --> 00:08:52,589
<font color="#CCCCCC">ash crash and a few others</font>

253
00:08:52,620 --> 00:08:56,580
then came<font color="#CCCCCC"> along with TIG three except</font>

254
00:08:54,300 --> 00:08:59,069
this model actually<font color="#CCCCCC"> has a</font><font color="#E5E5E5"> back door in</font>

255
00:08:56,580 --> 00:09:00,240
it<font color="#E5E5E5"> put there by</font><font color="#CCCCCC"> TI which allows directly</font>

256
00:08:59,070 --> 00:09:02,490
running assembly programs that are

257
00:09:00,240 --> 00:09:04,740
stored<font color="#E5E5E5"> in RAM and this back</font><font color="#CCCCCC"> door is</font>

258
00:09:02,490 --> 00:09:06,060
hidden in the send<font color="#CCCCCC"> command which is</font>

259
00:09:04,740 --> 00:09:07,260
<font color="#E5E5E5">normally used for transferring variables</font>

260
00:09:06,060 --> 00:09:09,630
from<font color="#E5E5E5"> one calculator to another using</font>

261
00:09:07,260 --> 00:09:12,270
<font color="#CCCCCC">that 2.5 millimeter</font><font color="#E5E5E5"> IO port but if you</font>

262
00:09:09,630 --> 00:09:13,890
put a<font color="#E5E5E5"> nine right</font><font color="#CCCCCC"> right after the command</font>

263
00:09:12,270 --> 00:09:15,689
<font color="#E5E5E5">it won't transfer the variable</font><font color="#CCCCCC"> it'll</font>

264
00:09:13,890 --> 00:09:17,640
instead execute that program has<font color="#CCCCCC"> native</font>

265
00:09:15,690 --> 00:09:18,930
<font color="#E5E5E5">code and the tae threes in first</font>

266
00:09:17,640 --> 00:09:19,860
<font color="#E5E5E5">calculate over had so this is right</font>

267
00:09:18,930 --> 00:09:23,189
<font color="#E5E5E5">around the time I came</font><font color="#CCCCCC"> into the</font>

268
00:09:19,860 --> 00:09:24,900
<font color="#CCCCCC">community</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> T I saw that there was a</font>

269
00:09:23,190 --> 00:09:26,220
big booming interest in assembly

270
00:09:24,900 --> 00:09:27,569
<font color="#E5E5E5">programming through this</font><font color="#CCCCCC"> backdoor they</font>

271
00:09:26,220 --> 00:09:29,250
just thought<font color="#CCCCCC"> I decided to add</font><font color="#E5E5E5"> a really</font>

272
00:09:27,570 --> 00:09:31,140
really nice assembly support to the<font color="#CCCCCC"> TIG</font>

273
00:09:29,250 --> 00:09:33,480
<font color="#CCCCCC">six which is</font><font color="#E5E5E5"> just the new and improved</font>

274
00:09:31,140 --> 00:09:36,270
<font color="#CCCCCC">285 and this calculator has</font><font color="#E5E5E5"> a brand new</font>

275
00:09:33,480 --> 00:09:37,410
command<font color="#CCCCCC"> called ASM</font><font color="#E5E5E5"> intended</font><font color="#CCCCCC"> for running</font>

276
00:09:36,270 --> 00:09:39,390
assembly programs right from the

277
00:09:37,410 --> 00:09:40,860
beginning<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> Ti not</font><font color="#E5E5E5"> only provided</font>

278
00:09:39,390 --> 00:09:43,290
some basic<font color="#E5E5E5"> documentation for how to use</font>

279
00:09:40,860 --> 00:09:45,180
or how they use system<font color="#CCCCCC"> RAM and how user</font>

280
00:09:43,290 --> 00:09:47,670
<font color="#CCCCCC">ram is laid out</font><font color="#E5E5E5"> they even included OS</font>

281
00:09:45,180 --> 00:09:49,140
hooks<font color="#E5E5E5"> so we could expand or integrate</font>

282
00:09:47,670 --> 00:09:51,449
with the OS and<font color="#E5E5E5"> expand its functionality</font>

283
00:09:49,140 --> 00:09:56,189
which is really<font color="#E5E5E5"> quite nice as for its</font>

284
00:09:51,450 --> 00:09:58,500
time<font color="#E5E5E5"> and then came</font><font color="#CCCCCC"> along flash</font>

285
00:09:56,190 --> 00:10:00,180
<font color="#E5E5E5">technology</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> to me</font><font color="#CCCCCC"> are the most</font>

286
00:09:58,500 --> 00:10:01,590
interesting models because and<font color="#E5E5E5"> by far</font>

287
00:10:00,180 --> 00:10:03,239
the<font color="#CCCCCC"> most common now because they're</font>

288
00:10:01,590 --> 00:10:05,910
<font color="#E5E5E5">upgradeable</font><font color="#CCCCCC"> in terms of OS upgrades</font>

289
00:10:03,240 --> 00:10:07,170
<font color="#E5E5E5">flash applications which have tighter</font><font color="#CCCCCC"> OS</font>

290
00:10:05,910 --> 00:10:11,520
<font color="#CCCCCC">integration and are stored in flash</font>

291
00:10:07,170 --> 00:10:12,780
<font color="#E5E5E5">instead of</font><font color="#CCCCCC"> Ram USB ports</font><font color="#E5E5E5"> and security</font>

292
00:10:11,520 --> 00:10:15,000
implementations to protect some<font color="#E5E5E5"> of this</font>

293
00:10:12,780 --> 00:10:16,110
<font color="#E5E5E5">functionality and whenever something</font><font color="#CCCCCC"> is</font>

294
00:10:15,000 --> 00:10:19,200
<font color="#CCCCCC">designed explicit to keep doing</font>

295
00:10:16,110 --> 00:10:23,790
<font color="#CCCCCC">something it's fun to break</font><font color="#E5E5E5"> it so we'll</font>

296
00:10:19,200 --> 00:10:25,590
<font color="#E5E5E5">get into that just to note in Europe</font>

297
00:10:23,790 --> 00:10:26,849
they make these model numbers<font color="#CCCCCC"> really</font>

298
00:10:25,590 --> 00:10:30,960
confusing<font color="#E5E5E5"> it makes it really difficult</font>

299
00:10:26,850 --> 00:10:32,580
<font color="#E5E5E5">to collect them so they made the</font><font color="#CCCCCC"> ti-83</font>

300
00:10:30,960 --> 00:10:34,410
<font color="#CCCCCC">and then they made the kt+ but they</font>

301
00:10:32,580 --> 00:10:36,150
never and then<font color="#E5E5E5"> they made the ti-84 plus</font>

302
00:10:34,410 --> 00:10:38,819
but they never<font color="#E5E5E5"> actually made a plain old</font>

303
00:10:36,150 --> 00:10:39,780
<font color="#E5E5E5">ti-84</font><font color="#CCCCCC"> non-plus so cuz that would</font><font color="#E5E5E5"> be</font>

304
00:10:38,820 --> 00:10:40,890
confusing<font color="#CCCCCC"> because that would make</font><font color="#E5E5E5"> you</font>

305
00:10:39,780 --> 00:10:42,000
<font color="#CCCCCC">think it does</font><font color="#E5E5E5"> because the sense it</font>

306
00:10:40,890 --> 00:10:44,760
<font color="#E5E5E5">doesn't have plus</font><font color="#CCCCCC"> the name it might have</font>

307
00:10:42,000 --> 00:10:46,950
a flash memory<font color="#CCCCCC"> but it does so but of</font>

308
00:10:44,760 --> 00:10:48,810
course<font color="#CCCCCC"> TI did make one</font><font color="#E5E5E5"> model called the</font>

309
00:10:46,950 --> 00:10:50,700
<font color="#CCCCCC">DAT for Pocket fr which doesn't have</font>

310
00:10:48,810 --> 00:10:51,900
plus<font color="#E5E5E5"> in the name but it is just it's</font>

311
00:10:50,700 --> 00:10:54,570
<font color="#CCCCCC">just a physically small</font><font color="#E5E5E5"> AR TI</font><font color="#CCCCCC"> d 4 +</font>

312
00:10:51,900 --> 00:10:57,150
identical in every<font color="#E5E5E5"> way and even worse</font>

313
00:10:54,570 --> 00:10:58,980
they made a<font color="#CCCCCC"> TIA 4 TI 84</font><font color="#E5E5E5"> plus pocket SC</font>

314
00:10:57,150 --> 00:11:00,959
which is it's<font color="#CCCCCC"> just a physically smaller</font>

315
00:10:58,980 --> 00:11:02,610
<font color="#CCCCCC">t 84 plus silver</font><font color="#E5E5E5"> edition but they did</font>

316
00:11:00,960 --> 00:11:03,640
<font color="#CCCCCC">put pocket in the name or the differed +</font>

317
00:11:02,610 --> 00:11:05,740
in the name so

318
00:11:03,640 --> 00:11:06,819
there's all sorts<font color="#CCCCCC"> of duplicates of the</font>

319
00:11:05,740 --> 00:11:07,810
exact<font color="#E5E5E5"> same calculator</font><font color="#CCCCCC"> just with a</font>

320
00:11:06,820 --> 00:11:09,670
different<font color="#CCCCCC"> name on it's like it seems</font>

321
00:11:07,810 --> 00:11:10,689
<font color="#CCCCCC">like every year</font><font color="#E5E5E5"> they really</font><font color="#CCCCCC"> release the</font>

322
00:11:09,670 --> 00:11:14,829
exact same thing with a different<font color="#CCCCCC"> model</font>

323
00:11:10,690 --> 00:11:16,600
number<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> kg stats and</font><font color="#E5E5E5"> th2</font>

324
00:11:14,830 --> 00:11:18,520
<font color="#CCCCCC">Stata afar which</font><font color="#E5E5E5"> it really just</font><font color="#CCCCCC"> t threes</font>

325
00:11:16,600 --> 00:11:19,480
<font color="#E5E5E5">yeah the TA 3 plus</font><font color="#CCCCCC"> that air 4 which</font>

326
00:11:18,520 --> 00:11:22,150
actually<font color="#E5E5E5"> could be referring to two</font>

327
00:11:19,480 --> 00:11:23,200
different calculators<font color="#E5E5E5"> one is just really</font>

328
00:11:22,150 --> 00:11:25,000
<font color="#E5E5E5">just the T 3 plus and the</font><font color="#CCCCCC"> other is a</font>

329
00:11:23,200 --> 00:11:26,860
<font color="#E5E5E5">Teta 4 plus of perdition and then you</font>

330
00:11:25,000 --> 00:11:30,940
have the<font color="#CCCCCC"> tid 2 plus which is</font><font color="#E5E5E5"> just an 83</font>

331
00:11:26,860 --> 00:11:33,130
<font color="#E5E5E5">plus y and then</font><font color="#CCCCCC"> you have the ti-83</font>

332
00:11:30,940 --> 00:11:36,430
<font color="#E5E5E5">premium</font><font color="#CCCCCC"> C which is just the same</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> the</font>

333
00:11:33,130 --> 00:11:38,410
TV 4 plus C and then<font color="#E5E5E5"> the</font><font color="#CCCCCC"> 80 84 plus t t4</font>

334
00:11:36,430 --> 00:11:39,939
<font color="#E5E5E5">test but that's actually just to tell</font>

335
00:11:38,410 --> 00:11:41,860
<font color="#E5E5E5">you four pluses</font><font color="#CCCCCC"> over addition</font><font color="#E5E5E5"> so there's</font>

336
00:11:39,940 --> 00:11:43,270
only only four there's the TV<font color="#CCCCCC"> three plus</font>

337
00:11:41,860 --> 00:11:46,210
<font color="#E5E5E5">it's here the post over</font><font color="#CCCCCC"> Edition ti-84</font>

338
00:11:43,270 --> 00:11:51,160
plus and<font color="#CCCCCC"> here four pluses of addition so</font>

339
00:11:46,210 --> 00:11:52,840
just just frustrating<font color="#E5E5E5"> but anyway well</font>

340
00:11:51,160 --> 00:11:53,980
the<font color="#CCCCCC"> z80 models are by far my favorite</font>

341
00:11:52,840 --> 00:11:56,080
<font color="#CCCCCC">we're on the most knowledgeable there</font>

342
00:11:53,980 --> 00:11:58,240
are of course others such as<font color="#E5E5E5"> the</font>

343
00:11:56,080 --> 00:12:00,040
<font color="#CCCCCC">Motorola</font><font color="#E5E5E5"> 6800 Dalls these started with</font>

344
00:11:58,240 --> 00:12:02,350
<font color="#E5E5E5">TI 92 which came out around the</font><font color="#CCCCCC"> same</font>

345
00:12:00,040 --> 00:12:04,300
time<font color="#E5E5E5"> this 85 did but it has a QWERTY</font>

346
00:12:02,350 --> 00:12:05,710
<font color="#E5E5E5">keyboard which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> cool but it</font>

347
00:12:04,300 --> 00:12:07,030
unfortunately gets<font color="#E5E5E5"> abandoned</font><font color="#CCCCCC"> most</font>

348
00:12:05,710 --> 00:12:08,320
standardized tests because if it has a

349
00:12:07,030 --> 00:12:10,530
QWERTY keyboard is technically computer

350
00:12:08,320 --> 00:12:12,460
and you can't have those on those tests

351
00:12:10,530 --> 00:12:13,839
one thing that's<font color="#CCCCCC"> unique about this model</font>

352
00:12:12,460 --> 00:12:14,590
is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it has an expansion port on the</font>

353
00:12:13,840 --> 00:12:16,900
back<font color="#E5E5E5"> of</font><font color="#CCCCCC"> it in the battery compartment</font>

354
00:12:14,590 --> 00:12:18,520
<font color="#E5E5E5">which would let you add features or turn</font>

355
00:12:16,900 --> 00:12:20,319
it into a different<font color="#E5E5E5"> model entirely and</font>

356
00:12:18,520 --> 00:12:22,329
these<font color="#E5E5E5"> models are these</font><font color="#CCCCCC"> modules actually</font>

357
00:12:20,320 --> 00:12:24,670
<font color="#E5E5E5">really rare</font><font color="#CCCCCC"> there's the die 92 module</font>

358
00:12:22,330 --> 00:12:26,680
<font color="#CCCCCC">TNI</font><font color="#E5E5E5"> to 2 module and Ti into e module II</font>

359
00:12:24,670 --> 00:12:29,079
for Europe and<font color="#CCCCCC"> that's that simply</font><font color="#E5E5E5"> just</font>

360
00:12:26,680 --> 00:12:30,579
<font color="#E5E5E5">added more ram and language options then</font>

361
00:12:29,080 --> 00:12:32,350
there's the TI<font color="#E5E5E5"> n2 + module which is</font>

362
00:12:30,580 --> 00:12:34,870
equally as rare but way more<font color="#E5E5E5"> interesting</font>

363
00:12:32,350 --> 00:12:36,460
is it turns out it<font color="#CCCCCC"> has a flash chip</font><font color="#E5E5E5"> in</font>

364
00:12:34,870 --> 00:12:39,010
and it<font color="#CCCCCC"> basically turns</font><font color="#E5E5E5"> it into a TI 92</font>

365
00:12:36,460 --> 00:12:40,240
<font color="#CCCCCC">plus which makes it uh gradable and that</font>

366
00:12:39,010 --> 00:12:41,950
model<font color="#E5E5E5"> is</font><font color="#CCCCCC"> basically the same</font><font color="#E5E5E5"> as the TI 89</font>

367
00:12:40,240 --> 00:12:43,570
<font color="#E5E5E5">except the TI 9 doesn't have a QWERTY</font>

368
00:12:41,950 --> 00:12:45,910
keyboard so I much<font color="#E5E5E5"> prefer missing with</font>

369
00:12:43,570 --> 00:12:47,680
89 and then came the<font color="#CCCCCC"> TI nine titanium</font>

370
00:12:45,910 --> 00:12:51,459
<font color="#CCCCCC">which has some minor hardware changes</font>

371
00:12:47,680 --> 00:12:53,020
and<font color="#E5E5E5"> most out</font><font color="#CCCCCC"> of most notably a USB port</font>

372
00:12:51,460 --> 00:12:56,290
which can<font color="#E5E5E5"> be useful</font><font color="#CCCCCC"> for a number of</font>

373
00:12:53,020 --> 00:12:58,590
<font color="#E5E5E5">things which we'll get into there's also</font>

374
00:12:56,290 --> 00:13:02,589
the<font color="#E5E5E5"> TI Nspire models which are ARM based</font>

375
00:12:58,590 --> 00:13:04,480
<font color="#CCCCCC">I hate these</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> they're they're big</font>

376
00:13:02,590 --> 00:13:05,920
and they're bulky and<font color="#CCCCCC"> they aren't really</font>

377
00:13:04,480 --> 00:13:07,480
<font color="#E5E5E5">useful for math or more educational</font>

378
00:13:05,920 --> 00:13:07,900
tools<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just don't find</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> really</font>

379
00:13:07,480 --> 00:13:10,120
practical

380
00:13:07,900 --> 00:13:11,410
but they do<font color="#E5E5E5"> have swappable keyboards you</font>

381
00:13:10,120 --> 00:13:12,370
can I just walk to<font color="#E5E5E5"> movie remove the</font>

382
00:13:11,410 --> 00:13:14,380
keyboard put a<font color="#CCCCCC"> different</font><font color="#E5E5E5"> one in its</font>

383
00:13:12,370 --> 00:13:16,480
place<font color="#E5E5E5"> and probably the most significant</font>

384
00:13:14,380 --> 00:13:17,350
one of those is the<font color="#E5E5E5"> TI</font><font color="#CCCCCC"> 84</font><font color="#E5E5E5"> plus keypad</font>

385
00:13:16,480 --> 00:13:20,110
which if you snapped

386
00:13:17,350 --> 00:13:22,600
causes it to emulate a<font color="#E5E5E5"> ti-84 plus which</font>

387
00:13:20,110 --> 00:13:24,550
makes it sort<font color="#E5E5E5"> of useful again</font><font color="#CCCCCC"> and then</font>

388
00:13:22,600 --> 00:13:26,560
there<font color="#CCCCCC"> are versions</font><font color="#E5E5E5"> that don't have a</font>

389
00:13:24,550 --> 00:13:28,839
cast and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> versions that do cast</font>

390
00:13:26,560 --> 00:13:31,989
meaning computer algebra system<font color="#E5E5E5"> and then</font>

391
00:13:28,840 --> 00:13:34,360
came the ti-nspire<font color="#E5E5E5"> CX models again both</font>

392
00:13:31,990 --> 00:13:36,340
cast and<font color="#E5E5E5"> non cast versions</font><font color="#CCCCCC"> these have</font>

393
00:13:34,360 --> 00:13:38,170
color LCDs and are redesigned to be<font color="#CCCCCC"> a</font>

394
00:13:36,340 --> 00:13:41,320
little sleeker so they're all right I

395
00:13:38,170 --> 00:13:44,709
guess<font color="#CCCCCC"> another big</font><font color="#E5E5E5"> reason to hate these</font>

396
00:13:41,320 --> 00:13:47,140
guys<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> they are completely</font><font color="#E5E5E5"> 100%</font>

397
00:13:44,710 --> 00:13:50,470
<font color="#CCCCCC">can</font><font color="#E5E5E5"> you guys</font><font color="#CCCCCC"> tell</font><font color="#E5E5E5"> her okay</font>

398
00:13:47,140 --> 00:13:52,270
they're completely 100% completely a

399
00:13:50,470 --> 00:13:53,950
hundred percent<font color="#CCCCCC"> locked down</font>

400
00:13:52,270 --> 00:13:55,990
there's no way to execute native code at

401
00:13:53,950 --> 00:13:57,880
all unless you<font color="#E5E5E5"> use something called</font>

402
00:13:55,990 --> 00:14:00,490
endless<font color="#CCCCCC"> which is for lack of a better</font>

403
00:13:57,880 --> 00:14:03,100
<font color="#CCCCCC">term it's a jailbreaking utility along</font>

404
00:14:00,490 --> 00:14:05,170
the lines of<font color="#CCCCCC"> Z show for some reason TI</font>

405
00:14:03,100 --> 00:14:06,670
fights this<font color="#E5E5E5"> really hard they fix</font>

406
00:14:05,170 --> 00:14:08,560
vulnerabilities<font color="#E5E5E5"> that endless uses as</font>

407
00:14:06,670 --> 00:14:09,969
soon as they can<font color="#E5E5E5"> so way more than the</font>

408
00:14:08,560 --> 00:14:11,949
<font color="#CCCCCC">other models</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is unfortunate</font>

409
00:14:09,970 --> 00:14:15,910
<font color="#E5E5E5">because it's probably it is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> most</font>

410
00:14:11,950 --> 00:14:18,880
powerful one or group<font color="#CCCCCC"> of ones and then</font>

411
00:14:15,910 --> 00:14:20,020
finally we have the<font color="#CCCCCC"> EZ 80 models these</font>

412
00:14:18,880 --> 00:14:23,110
<font color="#E5E5E5">are the newest models that have color</font>

413
00:14:20,020 --> 00:14:26,410
LCDs unlike these the 80 models these

414
00:14:23,110 --> 00:14:29,560
have what's called an<font color="#E5E5E5"> EZ 84 enhanced I</font>

415
00:14:26,410 --> 00:14:30,640
guess<font color="#E5E5E5"> this CPU supports 24-bit</font>

416
00:14:29,560 --> 00:14:34,359
addressing and it has backwards

417
00:14:30,640 --> 00:14:36,370
compatibility<font color="#CCCCCC"> with z80 code</font><font color="#E5E5E5"> the ASIC and</font>

418
00:14:34,360 --> 00:14:38,380
the hardware interface is completely<font color="#E5E5E5"> new</font>

419
00:14:36,370 --> 00:14:40,870
totally redesigned<font color="#E5E5E5"> with security in</font><font color="#CCCCCC"> mind</font>

420
00:14:38,380 --> 00:14:43,180
which<font color="#CCCCCC"> is kind of a</font><font color="#E5E5E5"> joke which will again</font>

421
00:14:40,870 --> 00:14:44,530
we'll<font color="#E5E5E5"> get into unlike the z80 models</font>

422
00:14:43,180 --> 00:14:46,540
which use a paging or<font color="#CCCCCC"> Bank switching</font>

423
00:14:44,530 --> 00:14:48,160
<font color="#CCCCCC">system because they can</font><font color="#E5E5E5"> only access 64</font>

424
00:14:46,540 --> 00:14:50,230
kilobytes the<font color="#CCCCCC"> eza models have a flat</font>

425
00:14:48,160 --> 00:14:54,520
memory model which<font color="#E5E5E5"> will be interesting</font>

426
00:14:50,230 --> 00:14:56,560
later on<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have the premium C II which</font>

427
00:14:54,520 --> 00:14:58,840
<font color="#CCCCCC">hardware wise is identical</font><font color="#E5E5E5"> but it has a</font>

428
00:14:56,560 --> 00:15:00,310
different<font color="#CCCCCC"> OS on it which includes an</font>

429
00:14:58,840 --> 00:15:03,580
exact math engine and it's only sold<font color="#E5E5E5"> in</font>

430
00:15:00,310 --> 00:15:05,709
<font color="#E5E5E5">Europe</font><font color="#CCCCCC"> TI really wants to</font><font color="#E5E5E5"> prevent being</font>

431
00:15:03,580 --> 00:15:07,450
<font color="#E5E5E5">able to run this nice</font><font color="#CCCCCC"> ro us on beat 84</font><font color="#E5E5E5"> +</font>

432
00:15:05,710 --> 00:15:09,670
<font color="#CCCCCC">C</font><font color="#E5E5E5"> II but as we'll see they're not going</font>

433
00:15:07,450 --> 00:15:11,500
to<font color="#CCCCCC"> succeed with that and then finally</font>

434
00:15:09,670 --> 00:15:14,760
the<font color="#CCCCCC"> ti-84 plus c ET which is simply</font><font color="#E5E5E5"> the</font>

435
00:15:11,500 --> 00:15:17,350
<font color="#CCCCCC">European version of the</font><font color="#E5E5E5"> G 84 plus C II</font>

436
00:15:14,760 --> 00:15:19,630
so<font color="#CCCCCC"> having</font><font color="#E5E5E5"> gone over the basics we can</font>

437
00:15:17,350 --> 00:15:20,860
get into the<font color="#E5E5E5"> good stuff</font><font color="#CCCCCC"> having said all</font>

438
00:15:19,630 --> 00:15:22,300
that<font color="#E5E5E5"> there are some</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> some really</font>

439
00:15:20,860 --> 00:15:24,510
<font color="#E5E5E5">cool things you</font><font color="#CCCCCC"> can do</font><font color="#E5E5E5"> they have nothing</font>

440
00:15:22,300 --> 00:15:26,920
<font color="#CCCCCC">to do with calculators</font><font color="#E5E5E5"> or math or school</font>

441
00:15:24,510 --> 00:15:28,930
since some<font color="#CCCCCC"> of these models</font><font color="#E5E5E5"> have on the</font>

442
00:15:26,920 --> 00:15:30,219
go USB ports or controllers<font color="#E5E5E5"> that it is</font>

443
00:15:28,930 --> 00:15:31,130
possible to connect any number of USB

444
00:15:30,220 --> 00:15:33,830
peripherals to<font color="#E5E5E5"> it</font>

445
00:15:31,130 --> 00:15:35,420
anything<font color="#E5E5E5"> from Bluetooth and Wi-Fi USB</font>

446
00:15:33,830 --> 00:15:37,370
<font color="#E5E5E5">adapters so calculators can communicate</font>

447
00:15:35,420 --> 00:15:40,310
wirelessly with each other<font color="#CCCCCC"> two serial</font>

448
00:15:37,370 --> 00:15:41,990
adapters<font color="#E5E5E5"> two USB keyboards USB mice even</font>

449
00:15:40,310 --> 00:15:45,170
USB flash drives hard drives floppy

450
00:15:41,990 --> 00:15:46,340
<font color="#E5E5E5">drives all of</font><font color="#CCCCCC"> which exists except for</font>

451
00:15:45,170 --> 00:15:48,829
the Wi-Fi one no one's<font color="#CCCCCC"> actually done</font>

452
00:15:46,340 --> 00:15:52,490
<font color="#E5E5E5">that yet but there are applications the</font>

453
00:15:48,830 --> 00:15:54,290
<font color="#E5E5E5">for all the other devices these copters</font>

454
00:15:52,490 --> 00:15:55,550
have a very unique<font color="#E5E5E5"> on-the-go USB</font>

455
00:15:54,290 --> 00:15:56,689
controller in them<font color="#E5E5E5"> one that's</font><font color="#CCCCCC"> very</font>

456
00:15:55,550 --> 00:15:57,920
flexible<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that allows you to</font><font color="#E5E5E5"> do</font>

457
00:15:56,690 --> 00:16:00,770
things<font color="#E5E5E5"> you really should not</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to</font>

458
00:15:57,920 --> 00:16:02,089
<font color="#E5E5E5">do real abuses of the protocol probably</font>

459
00:16:00,770 --> 00:16:04,010
the<font color="#E5E5E5"> best</font><font color="#CCCCCC"> example of that</font><font color="#E5E5E5"> is when the</font>

460
00:16:02,090 --> 00:16:06,230
PlayStation 3 jailbreak first came<font color="#E5E5E5"> out</font>

461
00:16:04,010 --> 00:16:08,360
<font color="#E5E5E5">shortly after other OS was taken away</font>

462
00:16:06,230 --> 00:16:09,130
another thing buddy remembers<font color="#E5E5E5"> that many</font>

463
00:16:08,360 --> 00:16:11,420
years<font color="#CCCCCC"> ago</font>

464
00:16:09,130 --> 00:16:13,280
well anyway long story<font color="#E5E5E5"> short it was a</font>

465
00:16:11,420 --> 00:16:14,719
USB based exploit that<font color="#CCCCCC"> required</font>

466
00:16:13,280 --> 00:16:16,430
connecting a teensy or a similar<font color="#E5E5E5"> device</font>

467
00:16:14,720 --> 00:16:18,950
to<font color="#E5E5E5"> your ps3 to enable unsigned code</font>

468
00:16:16,430 --> 00:16:21,500
<font color="#CCCCCC">execution but</font><font color="#E5E5E5"> when it came out of course</font>

469
00:16:18,950 --> 00:16:23,060
<font color="#E5E5E5">teensy is all over the world sold out</font><font color="#CCCCCC"> so</font>

470
00:16:21,500 --> 00:16:24,620
and<font color="#E5E5E5"> they were backordered and people</font>

471
00:16:23,060 --> 00:16:25,849
<font color="#E5E5E5">needed a way to trigger the exploit and</font>

472
00:16:24,620 --> 00:16:28,400
but nobody could<font color="#E5E5E5"> get a teensy in order</font>

473
00:16:25,850 --> 00:16:29,810
to do it so<font color="#E5E5E5"> I looked into how it worked</font>

474
00:16:28,400 --> 00:16:31,880
I realized that it's essentially

475
00:16:29,810 --> 00:16:33,709
simulating<font color="#E5E5E5"> a USB hub</font><font color="#CCCCCC"> and it virtually</font>

476
00:16:31,880 --> 00:16:35,900
<font color="#E5E5E5">attaches and detaches a bunch of fake</font>

477
00:16:33,710 --> 00:16:38,180
devices in order<font color="#E5E5E5"> to trigger trigger that</font>

478
00:16:35,900 --> 00:16:39,800
exploit memory corruption exploit well

479
00:16:38,180 --> 00:16:41,660
in<font color="#E5E5E5"> order to have to work the USB</font>

480
00:16:39,800 --> 00:16:43,520
peripherals got to be able to pretend to

481
00:16:41,660 --> 00:16:45,380
<font color="#CCCCCC">be other USB devices by changing its own</font>

482
00:16:43,520 --> 00:16:47,150
device address and through software<font color="#E5E5E5"> and</font>

483
00:16:45,380 --> 00:16:49,580
that<font color="#E5E5E5"> is something calculators are able</font>

484
00:16:47,150 --> 00:16:51,290
<font color="#CCCCCC">to do a lot of devices cannot</font><font color="#E5E5E5"> so I</font>

485
00:16:49,580 --> 00:16:53,150
implemented it<font color="#E5E5E5"> and people were able to</font>

486
00:16:51,290 --> 00:16:54,920
<font color="#CCCCCC">use</font><font color="#E5E5E5"> or people were able to use the</font>

487
00:16:53,150 --> 00:16:58,449
graphing calculator<font color="#CCCCCC"> to jailbreak their</font>

488
00:16:54,920 --> 00:17:01,189
ps3 which is nuts

489
00:16:58,450 --> 00:17:03,200
<font color="#E5E5E5">then of course</font><font color="#CCCCCC"> you could simulate other</font>

490
00:17:01,190 --> 00:17:05,060
USB<font color="#E5E5E5"> devices as well such as the USB</font>

491
00:17:03,200 --> 00:17:06,770
<font color="#E5E5E5">portal that's used with RFID video games</font>

492
00:17:05,060 --> 00:17:09,260
like<font color="#E5E5E5"> Skylanders this is infinity Lego</font>

493
00:17:06,770 --> 00:17:10,430
dimensions you can boot it a PC off<font color="#CCCCCC"> the</font>

494
00:17:09,260 --> 00:17:12,439
calculator by having<font color="#CCCCCC"> it pretend to be a</font>

495
00:17:10,430 --> 00:17:14,089
bootable USB flash<font color="#E5E5E5"> drive and then of</font>

496
00:17:12,439 --> 00:17:16,130
<font color="#CCCCCC">course you can</font><font color="#E5E5E5"> use it as a portable USB</font>

497
00:17:14,089 --> 00:17:20,329
keyboard or<font color="#E5E5E5"> mouse or other</font><font color="#CCCCCC"> simple</font><font color="#E5E5E5"> USB</font>

498
00:17:16,130 --> 00:17:21,230
device something<font color="#CCCCCC"> like Y have security in</font>

499
00:17:20,329 --> 00:17:23,419
<font color="#CCCCCC">calculators</font>

500
00:17:21,230 --> 00:17:25,370
well when flash memory first came into

501
00:17:23,420 --> 00:17:27,350
the calculator world<font color="#CCCCCC"> C I actually sold</font>

502
00:17:25,369 --> 00:17:29,270
flash applications for seven and<font color="#E5E5E5"> fifteen</font>

503
00:17:27,349 --> 00:17:30,679
dollars<font color="#CCCCCC"> a piece</font><font color="#E5E5E5"> and these applications</font>

504
00:17:29,270 --> 00:17:32,300
would range anywhere from pocket

505
00:17:30,680 --> 00:17:34,130
organizers to<font color="#E5E5E5"> spreadsheet applications</font>

506
00:17:32,300 --> 00:17:35,750
to periodic table applications to

507
00:17:34,130 --> 00:17:39,200
enhancing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> built-in math capabilities</font>

508
00:17:35,750 --> 00:17:40,670
<font color="#E5E5E5">they even sold</font><font color="#CCCCCC"> a game or two they would</font>

509
00:17:39,200 --> 00:17:42,320
<font color="#E5E5E5">provide an</font><font color="#CCCCCC"> SDK for free but</font><font color="#E5E5E5"> then they</font>

510
00:17:40,670 --> 00:17:44,000
would<font color="#E5E5E5"> charge $99 for the right to</font>

511
00:17:42,320 --> 00:17:44,399
release three flash applications and

512
00:17:44,000 --> 00:17:46,530
<font color="#CCCCCC">they're on</font>

513
00:17:44,400 --> 00:17:47,630
store or for free so you can<font color="#CCCCCC"> I</font><font color="#E5E5E5"> dollars</font>

514
00:17:46,530 --> 00:17:49,170
<font color="#CCCCCC">released</font><font color="#E5E5E5"> something for free</font>

515
00:17:47,630 --> 00:17:50,760
naturally they wouldn't want<font color="#CCCCCC"> these</font>

516
00:17:49,170 --> 00:17:52,200
applications to<font color="#E5E5E5"> be pirated so they had</font>

517
00:17:50,760 --> 00:17:53,340
to restrict how and where<font color="#E5E5E5"> these</font>

518
00:17:52,200 --> 00:17:57,180
applications<font color="#CCCCCC"> get installed on the</font>

519
00:17:53,340 --> 00:17:58,260
calculator<font color="#E5E5E5"> so that's one reason and they</font>

520
00:17:57,180 --> 00:18:00,060
also want to<font color="#E5E5E5"> prevent cheating in the</font>

521
00:17:58,260 --> 00:18:01,320
classroom<font color="#E5E5E5"> so you can't have students</font>

522
00:18:00,060 --> 00:18:02,790
<font color="#E5E5E5">accessing notes they typed in our</font>

523
00:18:01,320 --> 00:18:04,439
programs that would solve the problems

524
00:18:02,790 --> 00:18:05,399
for them<font color="#E5E5E5"> during tests so they want the</font>

525
00:18:04,440 --> 00:18:07,710
calculators to be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> enter a</font>

526
00:18:05,400 --> 00:18:09,720
restricted<font color="#E5E5E5"> mode for the</font><font color="#CCCCCC"> duration of that</font>

527
00:18:07,710 --> 00:18:13,350
<font color="#E5E5E5">test or exam</font><font color="#CCCCCC"> where you can't run or even</font>

528
00:18:09,720 --> 00:18:14,310
<font color="#E5E5E5">view the</font><font color="#CCCCCC"> source of programs</font><font color="#E5E5E5"> then they</font>

529
00:18:13,350 --> 00:18:15,419
want<font color="#E5E5E5"> to prevent tampering of the</font>

530
00:18:14,310 --> 00:18:17,070
<font color="#CCCCCC">operating system where we</font><font color="#E5E5E5"> could easily</font>

531
00:18:15,420 --> 00:18:19,800
disable<font color="#E5E5E5"> or defeat these security</font>

532
00:18:17,070 --> 00:18:21,510
mechanisms in fact I'm I'm certain we

533
00:18:19,800 --> 00:18:24,800
<font color="#E5E5E5">could make a better OS in terms of math</font>

534
00:18:21,510 --> 00:18:27,450
and math capabilities and performance<font color="#E5E5E5"> so</font>

535
00:18:24,800 --> 00:18:29,430
lots of reasons<font color="#CCCCCC"> that</font><font color="#E5E5E5"> they would want</font><font color="#CCCCCC"> to</font>

536
00:18:27,450 --> 00:18:31,290
<font color="#E5E5E5">protect against that and lots of reasons</font>

537
00:18:29,430 --> 00:18:33,870
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we would want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do what we want</font>

538
00:18:31,290 --> 00:18:35,399
with<font color="#CCCCCC"> it it's not really that ti wants to</font>

539
00:18:33,870 --> 00:18:36,870
enforce all these protections<font color="#E5E5E5"> it really</font>

540
00:18:35,400 --> 00:18:39,780
<font color="#E5E5E5">just amounts the pressure from educators</font>

541
00:18:36,870 --> 00:18:42,060
and schools and<font color="#E5E5E5"> teachers types of people</font>

542
00:18:39,780 --> 00:18:43,350
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> are forced to create</font>

543
00:18:42,060 --> 00:18:44,850
anti-cheating applications like<font color="#E5E5E5"> test</font>

544
00:18:43,350 --> 00:18:46,590
<font color="#CCCCCC">guard</font><font color="#E5E5E5"> which is an application that</font><font color="#CCCCCC"> can</font>

545
00:18:44,850 --> 00:18:48,540
remotely delete or disable programs<font color="#CCCCCC"> for</font>

546
00:18:46,590 --> 00:18:50,429
<font color="#E5E5E5">applications on another calculator or</font>

547
00:18:48,540 --> 00:18:51,930
press the test which is an OS it's a

548
00:18:50,430 --> 00:18:53,640
<font color="#CCCCCC">built-in</font><font color="#E5E5E5"> OS feature where you can hold a</font>

549
00:18:51,930 --> 00:18:55,530
key combination<font color="#CCCCCC"> and enter a restricted</font>

550
00:18:53,640 --> 00:18:59,460
<font color="#E5E5E5">mode where you can't run programs</font><font color="#CCCCCC"> review</font>

551
00:18:55,530 --> 00:19:00,930
them or use certain<font color="#E5E5E5"> functionality but</font>

552
00:18:59,460 --> 00:19:01,920
then of course<font color="#E5E5E5"> there's the user</font>

553
00:19:00,930 --> 00:19:03,900
<font color="#CCCCCC">community wants to maintain maintain</font>

554
00:19:01,920 --> 00:19:06,180
<font color="#E5E5E5">control over</font><font color="#CCCCCC"> this overpriced hardware</font>

555
00:19:03,900 --> 00:19:07,710
that we're<font color="#E5E5E5"> forced to buy</font><font color="#CCCCCC"> there are</font>

556
00:19:06,180 --> 00:19:09,030
countless numbers<font color="#CCCCCC"> of</font><font color="#E5E5E5"> things we can</font><font color="#CCCCCC"> make</font>

557
00:19:07,710 --> 00:19:10,350
<font color="#E5E5E5">these devices</font><font color="#CCCCCC"> do which not only helped</font>

558
00:19:09,030 --> 00:19:14,310
the character community but other things

559
00:19:10,350 --> 00:19:15,389
like<font color="#E5E5E5"> game consoles like the s3s so now</font>

560
00:19:14,310 --> 00:19:16,500
that<font color="#E5E5E5"> we know</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit about who the</font>

561
00:19:15,390 --> 00:19:18,210
players are<font color="#CCCCCC"> we'll start</font><font color="#E5E5E5"> getting</font>

562
00:19:16,500 --> 00:19:19,650
<font color="#E5E5E5">technical about how</font><font color="#CCCCCC"> these calculators</font>

563
00:19:18,210 --> 00:19:21,930
work how the<font color="#E5E5E5"> Security's implemented them</font>

564
00:19:19,650 --> 00:19:26,910
in them and how<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can have and</font><font color="#CCCCCC"> we'll</font>

565
00:19:21,930 --> 00:19:28,290
<font color="#E5E5E5">continue to break it down so at a</font>

566
00:19:26,910 --> 00:19:29,640
hardware<font color="#CCCCCC"> level the z80 models really</font>

567
00:19:28,290 --> 00:19:32,220
<font color="#CCCCCC">consist</font><font color="#E5E5E5"> of three things you have ASIC</font>

568
00:19:29,640 --> 00:19:33,090
you<font color="#E5E5E5"> had the flash tip then you have all</font>

569
00:19:32,220 --> 00:19:34,620
the other<font color="#E5E5E5"> hardware that they stick</font>

570
00:19:33,090 --> 00:19:36,300
interacts with such as the<font color="#E5E5E5"> LCD</font><font color="#CCCCCC"> display</font>

571
00:19:34,620 --> 00:19:37,709
the USB<font color="#E5E5E5"> and serial i/o ports the</font>

572
00:19:36,300 --> 00:19:40,169
keyboard<font color="#E5E5E5"> all that sort of stuff</font>

573
00:19:37,710 --> 00:19:41,100
<font color="#E5E5E5">this is not undr percent accurate as the</font>

574
00:19:40,170 --> 00:19:42,870
<font color="#E5E5E5">hardware has changed over the decades</font>

575
00:19:41,100 --> 00:19:44,490
<font color="#CCCCCC">like</font><font color="#E5E5E5"> for example the RAM wasn't always</font>

576
00:19:42,870 --> 00:19:46,770
internal to the<font color="#E5E5E5"> ASIC and neither was the</font>

577
00:19:44,490 --> 00:19:47,850
CPU for that matter<font color="#CCCCCC"> but</font><font color="#E5E5E5"> this is a this</font>

578
00:19:46,770 --> 00:19:52,290
<font color="#CCCCCC">is the most</font><font color="#E5E5E5"> common</font><font color="#CCCCCC"> configuration you</font>

579
00:19:47,850 --> 00:19:53,909
would likely come across so as I

580
00:19:52,290 --> 00:19:55,560
mentioned the z80 is a<font color="#E5E5E5"> six</font><font color="#CCCCCC"> mega</font><font color="#E5E5E5"> CPU</font>

581
00:19:53,910 --> 00:19:57,510
16-bit addressing so it can<font color="#E5E5E5"> only access</font>

582
00:19:55,560 --> 00:19:58,450
64 kilobytes of memory at one time so

583
00:19:57,510 --> 00:19:59,950
they utilize<font color="#E5E5E5"> something</font>

584
00:19:58,450 --> 00:20:01,629
the<font color="#E5E5E5"> bank switching where the 64</font>

585
00:19:59,950 --> 00:20:06,940
kilobytes is split up<font color="#E5E5E5"> into logically</font>

586
00:20:01,629 --> 00:20:09,009
into 4 16 kilobyte pages which are<font color="#CCCCCC"> their</font>

587
00:20:06,940 --> 00:20:11,559
<font color="#E5E5E5">like banks of a bucket simmering</font><font color="#CCCCCC"> eh</font>

588
00:20:09,009 --> 00:20:13,509
these banks can hold<font color="#E5E5E5"> 60 any 16 kilobyte</font>

589
00:20:11,559 --> 00:20:15,820
region of memory<font color="#E5E5E5"> that you want from</font><font color="#CCCCCC"> RAM</font>

590
00:20:13,509 --> 00:20:17,169
or flash so if what you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to access</font>

591
00:20:15,820 --> 00:20:18,939
isn't<font color="#E5E5E5"> currently swapped into one of the</font>

592
00:20:17,169 --> 00:20:20,499
<font color="#E5E5E5">banks you just reconfigure that Bank to</font>

593
00:20:18,940 --> 00:20:23,799
point to the 16 kilobytes that you want

594
00:20:20,499 --> 00:20:25,149
to build access<font color="#E5E5E5"> and there you go as far</font>

595
00:20:23,799 --> 00:20:27,190
<font color="#E5E5E5">as accessing the hardware the z80 has</font>

596
00:20:25,149 --> 00:20:29,709
8-bit IO addressing so there's a maximum

597
00:20:27,190 --> 00:20:30,999
<font color="#CCCCCC">of 256 IO ports it can</font><font color="#E5E5E5"> talk to the</font>

598
00:20:29,710 --> 00:20:32,619
purpose<font color="#E5E5E5"> of each i/o port is different</font>

599
00:20:30,999 --> 00:20:33,639
for<font color="#CCCCCC"> each model of course but the flash</font>

600
00:20:32,619 --> 00:20:35,289
model is all follow the same basic

601
00:20:33,639 --> 00:20:37,738
pattern which is<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> from port 0</font>

602
00:20:35,289 --> 00:20:39,580
all the<font color="#CCCCCC"> way</font><font color="#E5E5E5"> up to AF so quite a lot</font>

603
00:20:37,739 --> 00:20:41,559
<font color="#CCCCCC">these dudes everything from basic</font>

604
00:20:39,580 --> 00:20:45,820
<font color="#E5E5E5">configuration LCD access keyboard and</font>

605
00:20:41,559 --> 00:20:48,070
<font color="#E5E5E5">full USB control all</font><font color="#CCCCCC"> the source</font><font color="#E5E5E5"> stuff so</font>

606
00:20:45,820 --> 00:20:49,509
there are a few<font color="#E5E5E5"> rules about how the</font><font color="#CCCCCC"> Bank</font>

607
00:20:48,070 --> 00:20:51,158
switching works in the<font color="#E5E5E5"> a3 plus an 84</font>

608
00:20:49,509 --> 00:20:54,039
plus series<font color="#CCCCCC"> as I said</font><font color="#E5E5E5"> it's split up</font><font color="#CCCCCC"> into</font>

609
00:20:51,159 --> 00:20:56,230
<font color="#CCCCCC">4 banks 16 kilobytes</font><font color="#E5E5E5"> starting at 0 four</font>

610
00:20:54,039 --> 00:20:59,019
thousand eight thousand<font color="#E5E5E5"> and C</font><font color="#CCCCCC"> zero zero</font>

611
00:20:56,230 --> 00:21:01,480
<font color="#CCCCCC">zero the first Bank</font><font color="#E5E5E5"> except for some</font>

612
00:20:59,019 --> 00:21:02,980
<font color="#CCCCCC">weirdness</font><font color="#E5E5E5"> when it's first booting always</font>

613
00:21:01,480 --> 00:21:05,529
has<font color="#E5E5E5"> ROM page zero in it which</font><font color="#CCCCCC"> is where</font>

614
00:21:02,980 --> 00:21:08,919
the start<font color="#E5E5E5"> of the OS is and the flash to</font>

615
00:21:05,529 --> 00:21:10,450
<font color="#E5E5E5">the second</font><font color="#CCCCCC"> Bank is constantly being used</font>

616
00:21:08,919 --> 00:21:13,149
to swap<font color="#E5E5E5"> in different chunks of the OS as</font>

617
00:21:10,450 --> 00:21:14,710
it's running<font color="#CCCCCC"> which is the OS itself</font><font color="#E5E5E5"> is</font>

618
00:21:13,149 --> 00:21:16,178
way bigger<font color="#E5E5E5"> than 64 kilobytes so has to</font>

619
00:21:14,710 --> 00:21:18,369
<font color="#E5E5E5">constantly swap in what it needs when it</font>

620
00:21:16,179 --> 00:21:19,809
needs it<font color="#E5E5E5"> and the third and fourth banks</font>

621
00:21:18,369 --> 00:21:21,549
<font color="#E5E5E5">typically have rampages swapped in</font>

622
00:21:19,809 --> 00:21:23,678
meaning there's usually 32 kilobytes of

623
00:21:21,549 --> 00:21:26,529
RAM that's accessible<font color="#CCCCCC"> to the OS any</font>

624
00:21:23,679 --> 00:21:28,419
given time<font color="#E5E5E5"> so some of that is user</font><font color="#CCCCCC"> ram</font>

625
00:21:26,529 --> 00:21:29,980
and some of that is<font color="#E5E5E5"> the hardware stack</font>

626
00:21:28,419 --> 00:21:33,489
and then the rest<font color="#E5E5E5"> of that is system ram</font>

627
00:21:29,980 --> 00:21:35,340
at the OS uses internally as you can see

628
00:21:33,489 --> 00:21:37,359
the last<font color="#E5E5E5"> three banks all have i/o ports</font>

629
00:21:35,340 --> 00:21:38,980
<font color="#E5E5E5">that control what</font><font color="#CCCCCC"> pages</font><font color="#E5E5E5"> swapped into</font>

630
00:21:37,359 --> 00:21:40,899
them<font color="#E5E5E5"> so if you want to swap ROM page</font><font color="#CCCCCC"> one</font>

631
00:21:38,980 --> 00:21:43,779
for example<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the second bank you</font>

632
00:21:40,899 --> 00:21:45,668
would write a<font color="#CCCCCC"> one</font><font color="#E5E5E5"> to i/o port</font><font color="#CCCCCC"> 6 or if</font>

633
00:21:43,779 --> 00:21:48,389
you want to swap<font color="#E5E5E5"> rampage 81 into the</font>

634
00:21:45,669 --> 00:21:54,399
third bank then you would write<font color="#CCCCCC"> 81</font><font color="#E5E5E5"> to 47</font>

635
00:21:48,389 --> 00:21:56,590
<font color="#E5E5E5">pretty nice now</font>

636
00:21:54,399 --> 00:21:58,029
the most important I<font color="#CCCCCC"> Oh port</font><font color="#E5E5E5"> in the</font>

637
00:21:56,590 --> 00:22:01,119
whole thing in the entire ASIC is port

638
00:21:58,029 --> 00:22:03,159
14 which controls flash unlocking and

639
00:22:01,119 --> 00:22:04,689
relocking<font color="#CCCCCC"> whenever the flash tip is</font>

640
00:22:03,159 --> 00:22:07,149
locked<font color="#E5E5E5"> which is almost always the case</font>

641
00:22:04,690 --> 00:22:08,499
<font color="#E5E5E5">it always runs with it locked right</font><font color="#CCCCCC"> and</font>

642
00:22:07,149 --> 00:22:09,219
erase commands to<font color="#CCCCCC"> the flash tip are</font>

643
00:22:08,499 --> 00:22:11,289
ignored

644
00:22:09,220 --> 00:22:13,599
so essentially you cannot modify<font color="#E5E5E5"> flash</font>

645
00:22:11,289 --> 00:22:15,249
<font color="#CCCCCC">into the unlock at first it also</font>

646
00:22:13,599 --> 00:22:17,830
controls<font color="#E5E5E5"> whether certain IO port values</font>

647
00:22:15,249 --> 00:22:20,139
can<font color="#CCCCCC"> be written to</font><font color="#E5E5E5"> or be modified and</font><font color="#CCCCCC"> we</font>

648
00:22:17,830 --> 00:22:21,428
call<font color="#CCCCCC"> that a privileged IO port because</font>

649
00:22:20,139 --> 00:22:22,389
flash has to be unlocked before<font color="#E5E5E5"> you can</font>

650
00:22:21,429 --> 00:22:24,669
write to<font color="#E5E5E5"> it yet they have those</font>

651
00:22:22,389 --> 00:22:27,519
privileges so it doesn't deal<font color="#E5E5E5"> with just</font>

652
00:22:24,669 --> 00:22:29,139
flash<font color="#E5E5E5"> that just is what it's come to be</font>

653
00:22:27,519 --> 00:22:30,759
known by we<font color="#E5E5E5"> just call it flash unlocking</font>

654
00:22:29,139 --> 00:22:34,959
but really it it's really<font color="#E5E5E5"> the core of</font>

655
00:22:30,759 --> 00:22:36,309
the<font color="#E5E5E5"> entire security daesik how it works</font>

656
00:22:34,960 --> 00:22:37,980
is<font color="#CCCCCC"> very simple</font><font color="#E5E5E5"> you write a</font><font color="#CCCCCC"> 1 to unlock</font>

657
00:22:36,309 --> 00:22:41,200
it or<font color="#E5E5E5"> you write a 0 to lock it back</font>

658
00:22:37,980 --> 00:22:44,109
<font color="#CCCCCC">what's not simple though is when you can</font>

659
00:22:41,200 --> 00:22:46,330
write to<font color="#CCCCCC"> that board</font><font color="#E5E5E5"> a special sequence</font>

660
00:22:44,109 --> 00:22:50,649
of z80 instructions<font color="#CCCCCC"> knock-knock</font><font color="#E5E5E5"> I am one</font>

661
00:22:46,330 --> 00:22:52,210
day<font color="#E5E5E5"> I out a 2 port 14 has to be fetched</font>

662
00:22:50,649 --> 00:22:54,820
<font color="#E5E5E5">and executed from a privileged page</font>

663
00:22:52,210 --> 00:22:56,799
before writes to port 14 will stick and

664
00:22:54,820 --> 00:22:58,840
it's no coincidence<font color="#E5E5E5"> that that unlock</font>

665
00:22:56,799 --> 00:23:01,269
sequence contains instructions<font color="#E5E5E5"> like I am</font>

666
00:22:58,840 --> 00:23:03,129
<font color="#E5E5E5">one which sets in</font><font color="#CCCCCC"> at mode</font><font color="#E5E5E5"> 1 or di which</font>

667
00:23:01,269 --> 00:23:04,720
disables interrupts<font color="#E5E5E5"> to explicitly</font>

668
00:23:03,129 --> 00:23:07,238
prevent interrupts from interfering with

669
00:23:04,720 --> 00:23:09,129
this process or stealing control after

670
00:23:07,239 --> 00:23:12,190
the<font color="#E5E5E5"> chip or after the OS is</font><font color="#CCCCCC"> unlocked the</font>

671
00:23:09,129 --> 00:23:14,469
chip the<font color="#E5E5E5"> privileged page ranges are</font>

672
00:23:12,190 --> 00:23:15,940
mentioned there<font color="#E5E5E5"> but as you can</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> the</font>

673
00:23:14,470 --> 00:23:19,269
only<font color="#E5E5E5"> page is allowed to</font><font color="#CCCCCC"> modify</font><font color="#E5E5E5"> flash are</font>

674
00:23:15,940 --> 00:23:21,129
the OS and<font color="#E5E5E5"> the boot pages so you can't</font>

675
00:23:19,269 --> 00:23:23,200
modify the OS unless you are the OS or

676
00:23:21,129 --> 00:23:25,149
the boot<font color="#E5E5E5"> code so that</font><font color="#CCCCCC"> leaves us out</font><font color="#E5E5E5"> of</font>

677
00:23:23,200 --> 00:23:28,840
luck<font color="#E5E5E5"> for</font><font color="#CCCCCC"> unlocking it ourselves unless</font>

678
00:23:25,149 --> 00:23:30,699
<font color="#E5E5E5">we do something different</font><font color="#CCCCCC"> so to give an</font>

679
00:23:28,840 --> 00:23:33,158
example<font color="#E5E5E5"> with how Ti uses this protection</font>

680
00:23:30,700 --> 00:23:35,529
here's the<font color="#CCCCCC"> logic behind</font><font color="#E5E5E5"> receiving and</font>

681
00:23:33,159 --> 00:23:37,840
installing<font color="#E5E5E5"> an OS upgrade in a loop the</font>

682
00:23:35,529 --> 00:23:39,009
<font color="#E5E5E5">oh the boot code will one receive a</font>

683
00:23:37,840 --> 00:23:41,559
chunk of OS data where it<font color="#E5E5E5"> should be</font>

684
00:23:39,009 --> 00:23:43,149
written<font color="#E5E5E5"> to on the flash tip to unlock</font>

685
00:23:41,559 --> 00:23:45,279
flash using that<font color="#CCCCCC"> privileged sequence and</font>

686
00:23:43,149 --> 00:23:46,479
writing<font color="#CCCCCC"> one two four fourteen</font><font color="#E5E5E5"> and then</font>

687
00:23:45,279 --> 00:23:47,889
<font color="#E5E5E5">checks for a bunch of tricks</font><font color="#CCCCCC"> that we</font>

688
00:23:46,480 --> 00:23:49,929
might<font color="#CCCCCC"> use to steal control away</font><font color="#E5E5E5"> while</font>

689
00:23:47,889 --> 00:23:51,789
it's unlocked<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> three rights that</font>

690
00:23:49,929 --> 00:23:54,609
OS data to the specified area of the

691
00:23:51,789 --> 00:23:56,080
flash<font color="#E5E5E5"> chip and finally for it relax</font>

692
00:23:54,609 --> 00:23:57,460
<font color="#CCCCCC">flashback using</font><font color="#E5E5E5"> that same privilege</font>

693
00:23:56,080 --> 00:24:00,309
sequence as before<font color="#CCCCCC"> it set the</font><font color="#E5E5E5"> rights of</font>

694
00:23:57,460 --> 00:24:01,480
<font color="#E5E5E5">zero instead of</font><font color="#CCCCCC"> a 1 to lock it</font><font color="#E5E5E5"> back any</font>

695
00:24:00,309 --> 00:24:03,158
<font color="#E5E5E5">time the OS does something involving</font>

696
00:24:01,480 --> 00:24:04,629
modifying flash<font color="#E5E5E5"> it will unlock it it</font>

697
00:24:03,159 --> 00:24:05,889
will perform<font color="#E5E5E5"> some simple operation as</font>

698
00:24:04,629 --> 00:24:08,439
quickly as<font color="#CCCCCC"> it possibly can then relock</font>

699
00:24:05,889 --> 00:24:11,080
<font color="#E5E5E5">flashback to minimize the chance of</font>

700
00:24:08,440 --> 00:24:12,580
finding<font color="#E5E5E5"> a vulnerability</font>

701
00:24:11,080 --> 00:24:15,939
now I mentioned this it checks for

702
00:24:12,580 --> 00:24:17,619
trickery<font color="#E5E5E5"> specifically it</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> it checks to</font>

703
00:24:15,940 --> 00:24:20,710
<font color="#CCCCCC">make sure that s P which is the stack</font>

704
00:24:17,619 --> 00:24:23,059
pointer<font color="#E5E5E5"> lies between C 0 0 0 and FF FF 8</font>

705
00:24:20,710 --> 00:24:24,620
it's in the last<font color="#E5E5E5"> Bank</font>

706
00:24:23,059 --> 00:24:25,999
it does this to make sure SP is went

707
00:24:24,620 --> 00:24:27,229
into somewhere<font color="#E5E5E5"> in RAM so that when it</font>

708
00:24:25,999 --> 00:24:28,669
returns<font color="#CCCCCC"> back to the caller it can get</font>

709
00:24:27,230 --> 00:24:32,299
what it assumes would be a valid return

710
00:24:28,669 --> 00:24:33,740
<font color="#E5E5E5">address</font><font color="#CCCCCC"> from the stack to a check the</font>

711
00:24:32,299 --> 00:24:34,879
mixture<font color="#E5E5E5"> port</font><font color="#CCCCCC"> six contains a privileged</font>

712
00:24:33,740 --> 00:24:36,049
flash page because<font color="#E5E5E5"> that's where any</font>

713
00:24:34,879 --> 00:24:38,509
flash<font color="#CCCCCC"> unlocking</font><font color="#E5E5E5"> code will be running</font>

714
00:24:36,049 --> 00:24:40,700
<font color="#CCCCCC">from</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> just can't do it</font><font color="#E5E5E5"> from RAM or</font>

715
00:24:38,509 --> 00:24:42,470
some other page<font color="#E5E5E5"> checks for seven to make</font>

716
00:24:40,700 --> 00:24:43,909
sure that<font color="#E5E5E5"> it contains</font><font color="#CCCCCC"> rampage</font><font color="#E5E5E5"> one which</font>

717
00:24:42,470 --> 00:24:47,860
is where system<font color="#CCCCCC"> RAM is and that's what</font>

718
00:24:43,909 --> 00:24:50,450
<font color="#CCCCCC">the OS considers the normal scenario</font><font color="#E5E5E5"> and</font>

719
00:24:47,860 --> 00:24:52,129
<font color="#E5E5E5">for it complements the bytes at</font><font color="#CCCCCC"> 8,000</font>

720
00:24:50,450 --> 00:24:54,409
and<font color="#CCCCCC"> sees</font><font color="#E5E5E5"> ears are zero and</font><font color="#CCCCCC"> they're</font>

721
00:24:52,129 --> 00:24:55,759
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> complement it twice it modifies</font>

722
00:24:54,409 --> 00:24:58,220
it then restores back to its original

723
00:24:55,759 --> 00:24:59,869
<font color="#E5E5E5">value</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> confirms that the third and</font>

724
00:24:58,220 --> 00:25:02,809
fourth banks contain writable rampages

725
00:24:59,869 --> 00:25:05,199
<font color="#E5E5E5">and I'll attempt to illustrate why it</font>

726
00:25:02,809 --> 00:25:05,200
does that

727
00:25:06,100 --> 00:25:12,469
why would<font color="#CCCCCC"> Ti care if we point</font><font color="#E5E5E5"> SB the</font>

728
00:25:09,169 --> 00:25:14,749
<font color="#CCCCCC">stack corner to an area flash well let's</font>

729
00:25:12,470 --> 00:25:15,950
display<font color="#CCCCCC"> this ah for starters modifying</font>

730
00:25:14,749 --> 00:25:17,299
<font color="#E5E5E5">flash is complicated it's</font><font color="#CCCCCC"> not as simple</font>

731
00:25:15,950 --> 00:25:19,789
<font color="#CCCCCC">as just</font><font color="#E5E5E5"> loading a register value to a</font>

732
00:25:17,299 --> 00:25:21,499
memory address<font color="#CCCCCC"> it requires a sequence of</font>

733
00:25:19,789 --> 00:25:23,749
memory<font color="#CCCCCC"> Maps commands commands like get</font>

734
00:25:21,499 --> 00:25:25,639
<font color="#CCCCCC">ship ID</font><font color="#E5E5E5"> your race sector program by you</font>

735
00:25:23,749 --> 00:25:27,470
know things like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so if we point as</font>

736
00:25:25,639 --> 00:25:29,990
P to a<font color="#E5E5E5"> location that's definitely in ROM</font>

737
00:25:27,470 --> 00:25:33,470
such as like<font color="#CCCCCC"> 1,000 there which is deep</font>

738
00:25:29,990 --> 00:25:35,179
in ROM page<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> in the OS and then jump</font>

739
00:25:33,470 --> 00:25:37,820
<font color="#E5E5E5">into some code</font><font color="#CCCCCC"> that unlocks flash</font><font color="#E5E5E5"> and</font>

740
00:25:35,179 --> 00:25:39,409
calls a subroutine<font color="#E5E5E5"> then something</font>

741
00:25:37,820 --> 00:25:40,668
interesting happens<font color="#E5E5E5"> that call</font>

742
00:25:39,409 --> 00:25:42,740
instruction<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to attempt to write</font>

743
00:25:40,669 --> 00:25:44,419
the<font color="#E5E5E5"> return address to the location</font>

744
00:25:42,740 --> 00:25:45,379
points you buy<font color="#CCCCCC"> SP so it</font><font color="#E5E5E5"> pushes there</font>

745
00:25:44,419 --> 00:25:47,330
<font color="#E5E5E5">it's gonna try to push the return</font>

746
00:25:45,379 --> 00:25:49,428
address<font color="#E5E5E5"> to that location but because</font>

747
00:25:47,330 --> 00:25:52,309
<font color="#CCCCCC">espies points wrong which here is just a</font>

748
00:25:49,429 --> 00:25:54,049
bunch of 80 bytes<font color="#E5E5E5"> in this example those</font>

749
00:25:52,309 --> 00:25:55,009
rights<font color="#E5E5E5"> are</font><font color="#CCCCCC"> going to be ignored so when</font>

750
00:25:54,049 --> 00:25:56,389
it<font color="#CCCCCC"> finally encounters a return</font>

751
00:25:55,009 --> 00:25:58,850
instruction<font color="#CCCCCC"> it will read the two bytes</font>

752
00:25:56,389 --> 00:26:01,639
point to buy SP well it<font color="#E5E5E5"> will modify it</font>

753
00:25:58,850 --> 00:26:04,639
will increase SP or<font color="#CCCCCC"> sorry decrease SP</font>

754
00:26:01,639 --> 00:26:06,559
<font color="#E5E5E5">but when it goes</font><font color="#CCCCCC"> to read the two bytes</font>

755
00:26:04,639 --> 00:26:07,939
<font color="#E5E5E5">to get the return address it's not going</font>

756
00:26:06,559 --> 00:26:09,980
to read what it wrote before<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> gonna</font>

757
00:26:07,940 --> 00:26:13,220
read 80 and 80<font color="#E5E5E5"> so it's gonna jump there</font>

758
00:26:09,980 --> 00:26:14,659
it's<font color="#E5E5E5"> gonna jump to address 8080 not at</font>

759
00:26:13,220 --> 00:26:15,889
all what's the code<font color="#E5E5E5"> incident to do but</font>

760
00:26:14,659 --> 00:26:18,499
<font color="#E5E5E5">because we messed with</font><font color="#CCCCCC"> those P that's</font>

761
00:26:15,889 --> 00:26:19,668
<font color="#E5E5E5">exactly what happens so this would be a</font>

762
00:26:18,499 --> 00:26:21,499
really<font color="#CCCCCC"> cool way to still control away</font>

763
00:26:19,669 --> 00:26:26,049
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the OS boot code but they did think</font>

764
00:26:21,499 --> 00:26:26,049
<font color="#CCCCCC">of</font><font color="#E5E5E5"> that so what do we do</font>

765
00:26:27,499 --> 00:26:30,619
well through experimentation we

766
00:26:29,600 --> 00:26:31,879
eventually<font color="#CCCCCC"> learned at the</font><font color="#E5E5E5"> privileged</font>

767
00:26:30,619 --> 00:26:33,259
sequence of instructions only<font color="#E5E5E5"> needs to</font>

768
00:26:31,879 --> 00:26:34,549
<font color="#E5E5E5">be read from</font><font color="#CCCCCC"> the privileged page it</font>

769
00:26:33,259 --> 00:26:36,409
doesn't<font color="#E5E5E5"> necessarily have to be executed</font>

770
00:26:34,549 --> 00:26:37,190
from<font color="#E5E5E5"> the privileged page so this</font>

771
00:26:36,409 --> 00:26:38,270
<font color="#CCCCCC">requires thinking</font><font color="#E5E5E5"> about what</font>

772
00:26:37,190 --> 00:26:40,490
she happens on the date of<font color="#E5E5E5"> us when</font>

773
00:26:38,270 --> 00:26:42,470
instructions are being executed<font color="#CCCCCC"> when it</font>

774
00:26:40,490 --> 00:26:43,700
goes<font color="#CCCCCC"> to execute the RLC the rotate</font><font color="#E5E5E5"> left</font>

775
00:26:42,470 --> 00:26:45,200
<font color="#E5E5E5">for</font><font color="#CCCCCC"> carry instruction</font><font color="#E5E5E5"> it first has to</font>

776
00:26:43,700 --> 00:26:47,240
<font color="#E5E5E5">read the</font><font color="#CCCCCC"> bytes or</font><font color="#E5E5E5"> the opcodes that make</font>

777
00:26:45,200 --> 00:26:49,490
up that instruction and because it<font color="#E5E5E5"> uses</font>

778
00:26:47,240 --> 00:26:51,590
<font color="#E5E5E5">index register</font><font color="#CCCCCC"> IX</font><font color="#E5E5E5"> that's for byte</font>

779
00:26:49,490 --> 00:26:54,380
<font color="#E5E5E5">instructions so it reads</font><font color="#CCCCCC"> DD CV 0 0 serve</font>

780
00:26:51,590 --> 00:26:55,459
<font color="#E5E5E5">0 from that privileged page and then it</font>

781
00:26:54,380 --> 00:26:57,320
has to actually<font color="#E5E5E5"> execute that instruction</font>

782
00:26:55,460 --> 00:27:00,500
and to do that it has<font color="#CCCCCC"> to</font><font color="#E5E5E5"> read</font><font color="#CCCCCC"> the bite</font>

783
00:26:57,320 --> 00:27:02,360
at IX at offset zero and that<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> e d</font>

784
00:27:00,500 --> 00:27:04,190
<font color="#E5E5E5">bite from the privileged page and then</font>

785
00:27:02,360 --> 00:27:08,209
<font color="#E5E5E5">it goes to execute the load</font><font color="#CCCCCC"> h l on the d</font>

786
00:27:04,190 --> 00:27:09,560
instruction<font color="#CCCCCC"> which means it</font><font color="#E5E5E5"> has to read</font>

787
00:27:08,210 --> 00:27:11,300
that opcode which is 56 from<font color="#E5E5E5"> the</font>

788
00:27:09,560 --> 00:27:12,530
<font color="#E5E5E5">privileged page and then it actually</font>

789
00:27:11,300 --> 00:27:15,050
executes sit which means it has<font color="#CCCCCC"> to read</font>

790
00:27:12,530 --> 00:27:17,360
that<font color="#E5E5E5"> F 3</font><font color="#CCCCCC"> byte from from the privileged</font>

791
00:27:15,050 --> 00:27:20,000
page<font color="#E5E5E5"> and the C equivalent of all those</font>

792
00:27:17,360 --> 00:27:24,260
bytes<font color="#E5E5E5"> is coincidentally not not by</font><font color="#CCCCCC"> M 1</font>

793
00:27:20,000 --> 00:27:25,280
di<font color="#E5E5E5"> which is the unlock sequence</font><font color="#CCCCCC"> the big</font>

794
00:27:24,260 --> 00:27:27,860
advantage<font color="#CCCCCC"> here is that this does not</font>

795
00:27:25,280 --> 00:27:30,139
<font color="#E5E5E5">require actually executing the DI</font><font color="#CCCCCC"> or I</font>

796
00:27:27,860 --> 00:27:32,479
am one instructions<font color="#E5E5E5"> which means we could</font>

797
00:27:30,140 --> 00:27:35,900
use and I<font color="#E5E5E5"> am in turn mode to interrupt</font>

798
00:27:32,480 --> 00:27:37,340
to steal away control<font color="#CCCCCC"> but from this</font><font color="#E5E5E5"> code</font>

799
00:27:35,900 --> 00:27:38,630
so all we need<font color="#CCCCCC"> to do is find these</font>

800
00:27:37,340 --> 00:27:42,379
instructions the ones that are in yellow

801
00:27:38,630 --> 00:27:44,600
<font color="#E5E5E5">on a privileged page</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> unfortunately</font>

802
00:27:42,380 --> 00:27:45,470
they are not<font color="#E5E5E5"> there with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> coincidentally</font>

803
00:27:44,600 --> 00:27:47,330
they might be there<font color="#E5E5E5"> but they're not</font>

804
00:27:45,470 --> 00:27:50,110
<font color="#E5E5E5">there</font><font color="#CCCCCC"> so it was awesome</font><font color="#E5E5E5"> as this finding</font>

805
00:27:47,330 --> 00:27:52,429
is we can't do anything with it

806
00:27:50,110 --> 00:27:55,100
well then comes along the ti-83 plus

807
00:27:52,430 --> 00:27:56,450
Silver Edition which is<font color="#E5E5E5"> an enhanced</font>

808
00:27:55,100 --> 00:27:59,179
version<font color="#E5E5E5"> of the ti-83 plus that's the</font>

809
00:27:56,450 --> 00:28:00,620
original<font color="#E5E5E5"> flash one it has 128 kilobytes</font>

810
00:27:59,180 --> 00:28:03,440
of RAM instead<font color="#E5E5E5"> of just 32 kilobytes</font>

811
00:28:00,620 --> 00:28:05,959
which is<font color="#CCCCCC"> 2 rampages so hundred twenty K</font>

812
00:28:03,440 --> 00:28:07,880
<font color="#CCCCCC">wise</font><font color="#E5E5E5"> is actually</font><font color="#CCCCCC"> Ram eight</font><font color="#E5E5E5"> rampages it</font>

813
00:28:05,960 --> 00:28:09,710
has a flash chip<font color="#E5E5E5"> twice as large and</font><font color="#CCCCCC"> it's</font>

814
00:28:07,880 --> 00:28:12,410
<font color="#E5E5E5">CPU is capable</font><font color="#CCCCCC"> of switching between six</font>

815
00:28:09,710 --> 00:28:14,870
megahertz and<font color="#CCCCCC"> 15 records it takes it got</font>

816
00:28:12,410 --> 00:28:16,910
a few<font color="#E5E5E5"> upgrades as</font><font color="#CCCCCC"> well namely i/o port</font><font color="#E5E5E5"> 5</font>

817
00:28:14,870 --> 00:28:18,949
and this i/o port<font color="#CCCCCC"> actually allows</font>

818
00:28:16,910 --> 00:28:20,180
controlling the<font color="#E5E5E5"> rampage swapped into the</font>

819
00:28:18,950 --> 00:28:22,460
last<font color="#CCCCCC"> Bank</font><font color="#E5E5E5"> something that couldn't be</font>

820
00:28:20,180 --> 00:28:25,180
done<font color="#E5E5E5"> on the original anything plus the</font>

821
00:28:22,460 --> 00:28:27,650
thing is though<font color="#E5E5E5"> the I didn't actually</font>

822
00:28:25,180 --> 00:28:29,840
update their trickery flash<font color="#CCCCCC"> shall</font><font color="#E5E5E5"> not</font>

823
00:28:27,650 --> 00:28:31,820
<font color="#CCCCCC">trickery checks to also validate that</font>

824
00:28:29,840 --> 00:28:36,320
the value of<font color="#CCCCCC"> 4</font><font color="#E5E5E5"> 5 makes sense so this can</font>

825
00:28:31,820 --> 00:28:37,939
<font color="#CCCCCC">be</font><font color="#E5E5E5"> used to our advantage the OS always</font>

826
00:28:36,320 --> 00:28:40,370
expects rampage 1 to be in a third bank

827
00:28:37,940 --> 00:28:42,590
and it<font color="#CCCCCC"> always expects rampage 0 to be in</font>

828
00:28:40,370 --> 00:28:45,110
the<font color="#CCCCCC"> fourth</font><font color="#E5E5E5"> mink but what happens if we</font>

829
00:28:42,590 --> 00:28:47,840
swap the same rampage<font color="#E5E5E5"> into the last two</font>

830
00:28:45,110 --> 00:28:50,090
banks<font color="#E5E5E5"> but now things are all kinds of</font>

831
00:28:47,840 --> 00:28:50,840
screwed<font color="#E5E5E5"> up so even though SP the stack</font>

832
00:28:50,090 --> 00:28:52,459
pointer<font color="#CCCCCC"> is</font>

833
00:28:50,840 --> 00:28:53,629
still pointing to the<font color="#E5E5E5"> last</font><font color="#CCCCCC"> bank</font><font color="#E5E5E5"> the</font>

834
00:28:52,460 --> 00:28:55,160
stack is most certainly not there

835
00:28:53,630 --> 00:28:56,300
anymore<font color="#CCCCCC"> now you've got the</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> from</font>

836
00:28:55,160 --> 00:28:58,520
rampage<font color="#CCCCCC"> one at the end</font>

837
00:28:56,300 --> 00:29:01,040
so in<font color="#E5E5E5"> fact we</font><font color="#CCCCCC"> had</font><font color="#E5E5E5"> the same page swapped</font>

838
00:28:58,520 --> 00:29:02,750
<font color="#E5E5E5">into two banks at the exact same time</font><font color="#CCCCCC"> so</font>

839
00:29:01,040 --> 00:29:05,060
if<font color="#E5E5E5"> I were to</font><font color="#CCCCCC"> write a value to</font><font color="#E5E5E5"> the first</font>

840
00:29:02,750 --> 00:29:06,500
byte of<font color="#CCCCCC"> the third</font><font color="#E5E5E5"> bank to address</font><font color="#CCCCCC"> 8,000</font>

841
00:29:05,060 --> 00:29:08,690
I would<font color="#CCCCCC"> actually be</font><font color="#E5E5E5"> able to read it from</font>

842
00:29:06,500 --> 00:29:11,150
<font color="#CCCCCC">the first</font><font color="#E5E5E5"> byte of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> fourth</font><font color="#CCCCCC"> bank so</font>

843
00:29:08,690 --> 00:29:13,700
that<font color="#CCCCCC"> will confuse the heck out of their</font>

844
00:29:11,150 --> 00:29:15,320
code<font color="#E5E5E5"> so what we need is</font><font color="#CCCCCC"> to find a</font>

845
00:29:13,700 --> 00:29:17,480
<font color="#CCCCCC">section of the OS or the boot code that</font>

846
00:29:15,320 --> 00:29:19,700
unlocks flash<font color="#CCCCCC"> writes a value to</font><font color="#E5E5E5"> that</font>

847
00:29:17,480 --> 00:29:21,260
third bank and then attempts to relock

848
00:29:19,700 --> 00:29:22,730
<font color="#E5E5E5">flashback and as luck would have it</font>

849
00:29:21,260 --> 00:29:25,370
there<font color="#E5E5E5"> is a very convenient block of code</font>

850
00:29:22,730 --> 00:29:26,720
does that there is a particular bit and

851
00:29:25,370 --> 00:29:28,399
then<font color="#E5E5E5"> it's fact it's an entire byte of</font>

852
00:29:26,720 --> 00:29:29,960
the<font color="#E5E5E5"> certificate region of flash</font><font color="#CCCCCC"> that</font>

853
00:29:28,400 --> 00:29:33,260
holds<font color="#E5E5E5"> whether the OS</font><font color="#CCCCCC"> is considered valid</font>

854
00:29:29,960 --> 00:29:34,400
or<font color="#CCCCCC"> not if it's valid as it usually is if</font>

855
00:29:33,260 --> 00:29:36,590
you're running code on<font color="#CCCCCC"> it then the value</font>

856
00:29:34,400 --> 00:29:39,020
will<font color="#CCCCCC"> be 0</font><font color="#E5E5E5"> and if it's invalid</font><font color="#CCCCCC"> at</font>

857
00:29:36,590 --> 00:29:40,520
something<font color="#E5E5E5"> else so what we can do is jump</font>

858
00:29:39,020 --> 00:29:41,960
directly into<font color="#CCCCCC"> the boot code at the point</font>

859
00:29:40,520 --> 00:29:44,720
that it<font color="#CCCCCC"> unlocks flash just</font><font color="#E5E5E5"> before it</font>

860
00:29:41,960 --> 00:29:46,100
reads<font color="#E5E5E5"> this byte from the certificate</font><font color="#CCCCCC"> it</font>

861
00:29:44,720 --> 00:29:48,530
will read<font color="#CCCCCC"> it and</font><font color="#E5E5E5"> then it will store it</font>

862
00:29:46,100 --> 00:29:50,090
to an area<font color="#CCCCCC"> of system Ram</font><font color="#E5E5E5"> called op1</font>

863
00:29:48,530 --> 00:29:53,330
which is in the<font color="#E5E5E5"> third bank because it's</font>

864
00:29:50,090 --> 00:29:55,189
<font color="#E5E5E5">that address 84-78 and since we've</font><font color="#CCCCCC"> just</font>

865
00:29:53,330 --> 00:29:57,199
<font color="#CCCCCC">used i/o port 5 to swap brand page 1</font>

866
00:29:55,190 --> 00:30:00,740
<font color="#CCCCCC">into both</font><font color="#E5E5E5"> of the last two banks writing</font>

867
00:29:57,200 --> 00:30:03,830
a<font color="#CCCCCC"> 0 to 84-78</font><font color="#E5E5E5"> will also write a 0 to</font><font color="#CCCCCC"> C</font>

868
00:30:00,740 --> 00:30:05,990
<font color="#CCCCCC">478 which is exactly 16 kilobytes</font><font color="#E5E5E5"> ahead</font>

869
00:30:03,830 --> 00:30:07,699
<font color="#E5E5E5">in that fourth Bank so if we</font><font color="#CCCCCC"> craft</font>

870
00:30:05,990 --> 00:30:09,290
<font color="#E5E5E5">things just right we can set SP so that</font>

871
00:30:07,700 --> 00:30:13,070
by the<font color="#E5E5E5"> time</font><font color="#CCCCCC"> it gets to</font><font color="#E5E5E5"> the right</font><font color="#CCCCCC"> to</font>

872
00:30:09,290 --> 00:30:14,690
84-78<font color="#E5E5E5"> SP will be pointing to 84-78 so</font>

873
00:30:13,070 --> 00:30:16,310
when it performs<font color="#E5E5E5"> that that right of that</font>

874
00:30:14,690 --> 00:30:18,500
<font color="#CCCCCC">zero byte it will corrupt the return</font>

875
00:30:16,310 --> 00:30:20,620
address that SP is pointing to so the

876
00:30:18,500 --> 00:30:23,090
return address used to be like<font color="#E5E5E5"> 40 61</font>

877
00:30:20,620 --> 00:30:25,189
writing<font color="#E5E5E5"> that</font><font color="#CCCCCC"> zero will change it</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> 0-0</font>

878
00:30:23,090 --> 00:30:26,659
<font color="#CCCCCC">you want so as soon as</font><font color="#E5E5E5"> the code hits the</font>

879
00:30:25,190 --> 00:30:28,730
next return instruction it's going to

880
00:30:26,660 --> 00:30:29,840
return to the it's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> return to</font>

881
00:30:28,730 --> 00:30:30,680
the boot code it's<font color="#E5E5E5"> not gonna return it's</font>

882
00:30:29,840 --> 00:30:32,300
not going to<font color="#E5E5E5"> return to the boot code</font>

883
00:30:30,680 --> 00:30:35,240
it's gonna return<font color="#CCCCCC"> to 8</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> e one instead</font>

884
00:30:32,300 --> 00:30:38,330
<font color="#E5E5E5">which is deep in the OS interrupts in</font>

885
00:30:35,240 --> 00:30:39,970
ROM page<font color="#CCCCCC"> zero and there is something</font>

886
00:30:38,330 --> 00:30:42,020
<font color="#CCCCCC">called a cursor hook that</font><font color="#E5E5E5"> the OS</font>

887
00:30:39,970 --> 00:30:44,480
supports<font color="#E5E5E5"> that will allow me to still</font>

888
00:30:42,020 --> 00:30:45,590
control<font color="#CCCCCC"> away at that address</font><font color="#E5E5E5"> I thought</font>

889
00:30:44,480 --> 00:30:47,990
so at<font color="#CCCCCC"> that point we</font><font color="#E5E5E5"> can clean up the</font>

890
00:30:45,590 --> 00:30:49,610
<font color="#E5E5E5">stack</font><font color="#CCCCCC"> restore the value port</font><font color="#E5E5E5"> 5 and we</font>

891
00:30:47,990 --> 00:30:51,710
still have flash unlocked<font color="#CCCCCC"> ready for us</font>

892
00:30:49,610 --> 00:30:54,300
to use<font color="#CCCCCC"> and do whatever we</font><font color="#E5E5E5"> want whatever</font>

893
00:30:51,710 --> 00:30:57,460
we want with<font color="#E5E5E5"> to the flash chip</font>

894
00:30:54,300 --> 00:30:59,500
so that's great null but this port<font color="#CCCCCC"> five</font>

895
00:30:57,460 --> 00:31:01,450
thing only<font color="#E5E5E5"> works</font><font color="#CCCCCC"> on the TIG</font><font color="#E5E5E5"> boss</font><font color="#CCCCCC"> silver</font>

896
00:30:59,500 --> 00:31:03,130
<font color="#CCCCCC">edition</font><font color="#E5E5E5"> and and up hey we didn't work on</font>

897
00:31:01,450 --> 00:31:05,620
<font color="#E5E5E5">the original</font><font color="#CCCCCC"> 80-plus because it has no</font>

898
00:31:03,130 --> 00:31:07,660
port<font color="#E5E5E5"> five and even worse we had to use</font>

899
00:31:05,620 --> 00:31:09,280
an OS hook<font color="#CCCCCC"> his still control back</font><font color="#E5E5E5"> so we</font>

900
00:31:07,660 --> 00:31:10,870
had to wait to<font color="#E5E5E5"> hard-code the value of SP</font>

901
00:31:09,280 --> 00:31:12,399
based on the call stack<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> had to</font>

902
00:31:10,870 --> 00:31:14,199
kind<font color="#CCCCCC"> of futz with it to</font><font color="#E5E5E5"> get it where it</font>

903
00:31:12,400 --> 00:31:17,170
<font color="#CCCCCC">needs to be</font><font color="#E5E5E5"> and we hired the hard code a</font>

904
00:31:14,200 --> 00:31:18,640
return address that starts with<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> all</font>

905
00:31:17,170 --> 00:31:20,170
of<font color="#E5E5E5"> which could change</font><font color="#CCCCCC"> from OS version to</font>

906
00:31:18,640 --> 00:31:21,970
OS version or boot code version<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font>

907
00:31:20,170 --> 00:31:23,110
<font color="#E5E5E5">code version so what would be really</font>

908
00:31:21,970 --> 00:31:24,910
nice<font color="#E5E5E5"> is if we had something</font><font color="#CCCCCC"> that worked</font>

909
00:31:23,110 --> 00:31:25,990
on every model<font color="#E5E5E5"> every OS version every</font>

910
00:31:24,910 --> 00:31:29,320
boot code<font color="#E5E5E5"> version every hardware</font>

911
00:31:25,990 --> 00:31:30,670
revision<font color="#E5E5E5"> so to do</font><font color="#CCCCCC"> that we're gonna have</font>

912
00:31:29,320 --> 00:31:33,159
<font color="#E5E5E5">to attack functionality that not</font><font color="#CCCCCC"> only</font>

913
00:31:30,670 --> 00:31:36,580
<font color="#E5E5E5">exists on all models</font><font color="#CCCCCC"> but isn't likely or</font>

914
00:31:33,160 --> 00:31:38,350
even able to<font color="#E5E5E5"> be changed easily</font><font color="#CCCCCC"> and one</font>

915
00:31:36,580 --> 00:31:40,270
such<font color="#E5E5E5"> feature is the OSS ability to</font>

916
00:31:38,350 --> 00:31:41,889
receive<font color="#CCCCCC"> flash applications from a</font>

917
00:31:40,270 --> 00:31:44,260
connected<font color="#E5E5E5"> computer or another calculator</font>

918
00:31:41,890 --> 00:31:46,240
<font color="#E5E5E5">and since flash applications are fixed</font>

919
00:31:44,260 --> 00:31:47,800
multiples of 16 kilobytes in size<font color="#E5E5E5"> even</font>

920
00:31:46,240 --> 00:31:48,880
the smallest<font color="#CCCCCC"> fire application can't fit</font>

921
00:31:47,800 --> 00:31:51,340
and<font color="#CCCCCC"> Ram them all at once</font>

922
00:31:48,880 --> 00:31:53,230
<font color="#E5E5E5">so that means the OS has to in a loop</font>

923
00:31:51,340 --> 00:31:55,149
receive a chunk of<font color="#E5E5E5"> flash</font><font color="#CCCCCC"> obligation data</font>

924
00:31:53,230 --> 00:31:56,740
<font color="#E5E5E5">unlocked flash write that chunk to Ann</font>

925
00:31:55,150 --> 00:31:58,630
Arbor<font color="#CCCCCC"> Kay arbitrary location in flash in</font>

926
00:31:56,740 --> 00:32:00,280
the<font color="#E5E5E5"> relock flash back over and over</font>

927
00:31:58,630 --> 00:32:02,710
again until<font color="#E5E5E5"> the entire application is</font>

928
00:32:00,280 --> 00:32:04,030
received<font color="#E5E5E5"> and written to flash this</font>

929
00:32:02,710 --> 00:32:05,200
function<font color="#CCCCCC"> on has existed</font><font color="#E5E5E5"> in every OS</font>

930
00:32:04,030 --> 00:32:06,700
version for every<font color="#E5E5E5"> model since at the</font>

931
00:32:05,200 --> 00:32:08,800
very beginning and they cannot take it

932
00:32:06,700 --> 00:32:12,790
out so if possible<font color="#E5E5E5"> it would be the</font>

933
00:32:08,800 --> 00:32:15,040
perfect<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> to attack before</font><font color="#CCCCCC"> jumping</font>

934
00:32:12,790 --> 00:32:16,810
into the OS code that unlocks<font color="#E5E5E5"> flash and</font>

935
00:32:15,040 --> 00:32:18,460
writes data<font color="#E5E5E5"> to an arbitrary destination</font>

936
00:32:16,810 --> 00:32:20,800
we know we have control over<font color="#E5E5E5"> the</font>

937
00:32:18,460 --> 00:32:21,910
destination flash page and address the

938
00:32:20,800 --> 00:32:24,010
<font color="#CCCCCC">number</font><font color="#E5E5E5"> of bytes that it's going to write</font>

939
00:32:21,910 --> 00:32:25,840
and the bytes that<font color="#E5E5E5"> are to be written but</font>

940
00:32:24,010 --> 00:32:28,300
<font color="#E5E5E5">what we don't have is control over</font><font color="#CCCCCC"> the</font>

941
00:32:25,840 --> 00:32:29,439
<font color="#E5E5E5">source address which is in RAM</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> uses</font>

942
00:32:28,300 --> 00:32:31,629
the very beginning of RAM to<font color="#CCCCCC"> do that</font>

943
00:32:29,440 --> 00:32:33,610
which<font color="#CCCCCC"> is will be in the last</font><font color="#E5E5E5"> two banks</font>

944
00:32:31,630 --> 00:32:37,180
which means it'll<font color="#E5E5E5"> be at address</font><font color="#CCCCCC"> 8000 or</font>

945
00:32:33,610 --> 00:32:39,129
higher so<font color="#CCCCCC"> that means that bits 7 of H</font>

946
00:32:37,180 --> 00:32:41,560
will always be set and bit 1 and

947
00:32:39,130 --> 00:32:45,310
<font color="#E5E5E5">according to that code will by y plus 25</font>

948
00:32:41,560 --> 00:32:47,679
will always remain<font color="#CCCCCC"> reset if we could set</font>

949
00:32:45,310 --> 00:32:49,030
<font color="#CCCCCC">it then the code that wraps</font><font color="#E5E5E5"> that red box</font>

950
00:32:47,680 --> 00:32:51,130
there<font color="#CCCCCC"> that code</font><font color="#E5E5E5"> that wraps the</font><font color="#CCCCCC"> e from</font>

951
00:32:49,030 --> 00:32:53,770
<font color="#CCCCCC">8000 back around to 4,000 will not run</font>

952
00:32:51,130 --> 00:32:55,420
and instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> instead of wrapping</font>

953
00:32:53,770 --> 00:32:57,730
around<font color="#CCCCCC"> at 4,000 it'll actually write</font>

954
00:32:55,420 --> 00:33:00,250
data to<font color="#CCCCCC"> an address</font><font color="#E5E5E5"> above</font><font color="#CCCCCC"> 8,000</font><font color="#E5E5E5"> which is</font>

955
00:32:57,730 --> 00:33:02,470
all<font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> so that's good</font><font color="#CCCCCC"> that would</font>

956
00:33:00,250 --> 00:33:04,090
effectively turn this command that's

957
00:33:02,470 --> 00:33:04,870
supposed<font color="#E5E5E5"> to just write the flash into a</font>

958
00:33:04,090 --> 00:33:06,860
RAM - Ram

959
00:33:04,870 --> 00:33:09,860
<font color="#E5E5E5">copier</font>

960
00:33:06,860 --> 00:33:13,039
and we can use that<font color="#CCCCCC"> to overwrite the</font>

961
00:33:09,860 --> 00:33:15,889
<font color="#CCCCCC">data</font><font color="#E5E5E5"> near SP the stack pointer to all</font>

962
00:33:13,039 --> 00:33:17,539
the same value such as<font color="#CCCCCC"> 8080</font><font color="#E5E5E5"> so when this</font>

963
00:33:15,890 --> 00:33:19,760
<font color="#E5E5E5">return in this routine</font><font color="#CCCCCC"> hits a return</font>

964
00:33:17,539 --> 00:33:21,500
<font color="#CCCCCC">instruction</font><font color="#E5E5E5"> it will jump to 8080 instead</font>

965
00:33:19,760 --> 00:33:25,580
where we take<font color="#CCCCCC"> control clean up the stack</font>

966
00:33:21,500 --> 00:33:27,380
and return with flash<font color="#CCCCCC"> styling</font><font color="#E5E5E5"> on so how</font>

967
00:33:25,580 --> 00:33:29,240
can we<font color="#E5E5E5"> ensure bit one of</font><font color="#CCCCCC"> our Y plus 25</font>

968
00:33:27,380 --> 00:33:31,549
is set<font color="#E5E5E5"> even when this routine will start</font>

969
00:33:29,240 --> 00:33:36,669
out by<font color="#E5E5E5"> resetting it and we'll go down a</font>

970
00:33:31,549 --> 00:33:41,690
path that<font color="#E5E5E5"> will not set it we can do that</font>

971
00:33:36,669 --> 00:33:43,519
<font color="#CCCCCC">like so on</font><font color="#E5E5E5"> if we point I</font><font color="#CCCCCC"> Y</font><font color="#E5E5E5"> minus 25 to a</font>

972
00:33:41,690 --> 00:33:45,529
point in flash instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> RAM we point</font>

973
00:33:43,519 --> 00:33:47,720
it<font color="#E5E5E5"> in to a point in flash where bit</font><font color="#CCCCCC"> one</font>

974
00:33:45,529 --> 00:33:50,149
is coincidentally set then the boot

975
00:33:47,720 --> 00:33:52,010
codes<font color="#E5E5E5"> attempt to reset it with that</font><font color="#CCCCCC"> our</font>

976
00:33:50,149 --> 00:33:53,389
<font color="#CCCCCC">es</font><font color="#E5E5E5"> that reset</font><font color="#CCCCCC"> bitten z80 instruction</font>

977
00:33:52,010 --> 00:33:55,158
will work<font color="#E5E5E5"> because if you remembered</font>

978
00:33:53,389 --> 00:33:57,529
modifying flash involves<font color="#E5E5E5"> memory-mapped</font>

979
00:33:55,159 --> 00:33:59,690
commands<font color="#E5E5E5"> the program</font><font color="#CCCCCC"> bites</font><font color="#E5E5E5"> right one at</font>

980
00:33:57,529 --> 00:34:00,919
a time or<font color="#E5E5E5"> erase sectors so instead reset</font>

981
00:33:59,690 --> 00:34:04,190
instructions<font color="#E5E5E5"> won't have any effect on</font>

982
00:34:00,919 --> 00:34:06,590
<font color="#CCCCCC">that bit in flash now this is all</font>

983
00:34:04,190 --> 00:34:08,810
entirely dependent on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> fact that they</font>

984
00:34:06,590 --> 00:34:10,489
never set<font color="#E5E5E5"> I why after flash is unlocked</font>

985
00:34:08,810 --> 00:34:12,980
so<font color="#E5E5E5"> it's it's fixed easily enough in the</font>

986
00:34:10,489 --> 00:34:14,239
OS but similar functionality does exist

987
00:34:12,980 --> 00:34:16,010
in the<font color="#E5E5E5"> boot code and that can't easily</font>

988
00:34:14,239 --> 00:34:18,859
be<font color="#E5E5E5"> fixed certainly not on existing</font>

989
00:34:16,010 --> 00:34:19,970
<font color="#CCCCCC">hardware any what they did fix</font><font color="#E5E5E5"> it there</font>

990
00:34:18,859 --> 00:34:22,399
are a<font color="#CCCCCC"> number of</font><font color="#E5E5E5"> other flash unlock</font>

991
00:34:19,969 --> 00:34:24,469
exploits<font color="#CCCCCC"> that could be used</font><font color="#E5E5E5"> I've got</font>

992
00:34:22,399 --> 00:34:26,388
about a<font color="#CCCCCC"> dozen different</font><font color="#E5E5E5"> methods</font><font color="#CCCCCC"> that I'm</font>

993
00:34:24,469 --> 00:34:28,368
not gonna disclose just in case<font color="#CCCCCC"> TI ever</font>

994
00:34:26,389 --> 00:34:31,220
fixes this but they don't seem<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be too</font>

995
00:34:28,369 --> 00:34:35,359
aggressive<font color="#E5E5E5"> about</font><font color="#CCCCCC"> it so that's pretty</font>

996
00:34:31,219 --> 00:34:37,040
nice<font color="#CCCCCC"> being able to unlock flash and</font>

997
00:34:35,359 --> 00:34:38,509
modify it<font color="#CCCCCC"> ourselves is nice but</font><font color="#E5E5E5"> if we</font>

998
00:34:37,040 --> 00:34:40,969
wanted to<font color="#E5E5E5"> write our own OS we'd have to</font>

999
00:34:38,510 --> 00:34:43,849
rely on some custom OS receiver or<font color="#E5E5E5"> OS</font>

1000
00:34:40,969 --> 00:34:45,859
cinder which is<font color="#E5E5E5"> platform dependent</font><font color="#CCCCCC"> error</font>

1001
00:34:43,849 --> 00:34:47,780
<font color="#CCCCCC">prone and it's just troublesome to mess</font>

1002
00:34:45,859 --> 00:34:49,339
with so it would be<font color="#E5E5E5"> nice if</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> could</font>

1003
00:34:47,780 --> 00:34:52,490
<font color="#CCCCCC">just patch the OS and Reese I knit</font>

1004
00:34:49,339 --> 00:34:55,940
ourselves with or write our own OS<font color="#E5E5E5"> and</font>

1005
00:34:52,489 --> 00:34:57,138
sign it with T is RSA private key<font color="#E5E5E5"> but of</font>

1006
00:34:55,940 --> 00:34:58,760
course they're not<font color="#E5E5E5"> gonna just hand that</font>

1007
00:34:57,139 --> 00:35:01,160
<font color="#CCCCCC">over to us</font>

1008
00:34:58,760 --> 00:35:03,020
flash<font color="#CCCCCC"> upgradable</font><font color="#E5E5E5"> z80 models started</font>

1009
00:35:01,160 --> 00:35:05,509
around the<font color="#E5E5E5"> time</font><font color="#CCCCCC"> at the TI 73 came out</font>

1010
00:35:03,020 --> 00:35:07,130
and that<font color="#CCCCCC"> was around 1987 and in 1997</font>

1011
00:35:05,510 --> 00:35:08,630
<font color="#E5E5E5">fight</font><font color="#CCCCCC"> ole bit RSA keys we're looking</font>

1012
00:35:07,130 --> 00:35:09,980
<font color="#E5E5E5">pretty secure</font>

1013
00:35:08,630 --> 00:35:12,619
if you don't know<font color="#E5E5E5"> are as</font><font color="#CCCCCC"> they strength</font>

1014
00:35:09,980 --> 00:35:15,350
is in<font color="#CCCCCC"> the inability to factor the public</font>

1015
00:35:12,619 --> 00:35:17,090
key which is an<font color="#E5E5E5"> extremely large number</font>

1016
00:35:15,350 --> 00:35:19,279
it it's very very<font color="#CCCCCC"> hard</font><font color="#E5E5E5"> to factor that</font>

1017
00:35:17,090 --> 00:35:20,630
into two primes<font color="#E5E5E5"> and computer powering</font>

1018
00:35:19,280 --> 00:35:22,610
computer power not being what it is

1019
00:35:20,630 --> 00:35:25,160
<font color="#E5E5E5">today that was considered impossible at</font>

1020
00:35:22,610 --> 00:35:27,050
the<font color="#CCCCCC"> time but flash-forward ten</font><font color="#E5E5E5"> years or</font>

1021
00:35:25,160 --> 00:35:28,549
so<font color="#E5E5E5"> and one person who shall remain</font>

1022
00:35:27,050 --> 00:35:31,040
<font color="#E5E5E5">nameless decided to give it a shot</font>

1023
00:35:28,550 --> 00:35:32,300
<font color="#CCCCCC">anyway on his computer he used something</font>

1024
00:35:31,040 --> 00:35:34,100
<font color="#CCCCCC">called the journal number field sieve</font>

1025
00:35:32,300 --> 00:35:36,440
which at least<font color="#E5E5E5"> at the time and maybe it</font>

1026
00:35:34,100 --> 00:35:37,880
<font color="#E5E5E5">still is is the considered the fastest</font>

1027
00:35:36,440 --> 00:35:40,640
and the<font color="#E5E5E5"> most efficient known method of</font>

1028
00:35:37,880 --> 00:35:42,080
factoring<font color="#E5E5E5"> numbers into primes so we</font>

1029
00:35:40,640 --> 00:35:44,509
kicked<font color="#E5E5E5"> off that process for the 83 plus</font>

1030
00:35:42,080 --> 00:35:46,610
OS signing<font color="#CCCCCC"> G</font><font color="#E5E5E5"> and he let it run</font><font color="#CCCCCC"> on his</font>

1031
00:35:44,510 --> 00:35:48,619
computer for<font color="#E5E5E5"> about two</font><font color="#CCCCCC"> months</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> it</font>

1032
00:35:46,610 --> 00:35:51,590
actually<font color="#E5E5E5"> finished and it spit out the</font>

1033
00:35:48,619 --> 00:35:53,480
primes so he had actually proven what

1034
00:35:51,590 --> 00:35:55,490
was long disregarded that<font color="#E5E5E5"> it actually is</font>

1035
00:35:53,480 --> 00:35:57,560
possible<font color="#E5E5E5"> to factor these keys</font><font color="#CCCCCC"> so he</font>

1036
00:35:55,490 --> 00:36:01,879
posted<font color="#E5E5E5"> about it online and very shortly</font>

1037
00:35:57,560 --> 00:36:04,070
after<font color="#CCCCCC"> TI silenced him they they actually</font>

1038
00:36:01,880 --> 00:36:05,840
<font color="#CCCCCC">sent someone to his home to his house to</font>

1039
00:36:04,070 --> 00:36:07,910
talk<font color="#CCCCCC"> to him and</font><font color="#E5E5E5"> strongly encouraged him</font>

1040
00:36:05,840 --> 00:36:08,390
not to work on<font color="#E5E5E5"> this</font><font color="#CCCCCC"> anymore or talk</font>

1041
00:36:07,910 --> 00:36:10,220
about<font color="#CCCCCC"> it</font>

1042
00:36:08,390 --> 00:36:13,118
which as<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> imagine scared the crap</font>

1043
00:36:10,220 --> 00:36:15,589
out of<font color="#CCCCCC"> them but the</font><font color="#E5E5E5"> damage was</font><font color="#CCCCCC"> done</font>

1044
00:36:13,119 --> 00:36:17,900
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> community knew it was possible so</font>

1045
00:36:15,590 --> 00:36:19,850
they took the<font color="#E5E5E5"> remaining 13 public keys</font>

1046
00:36:17,900 --> 00:36:21,590
and started a point distributed

1047
00:36:19,850 --> 00:36:25,310
computing project<font color="#E5E5E5"> to factor the rest of</font>

1048
00:36:21,590 --> 00:36:26,690
them<font color="#CCCCCC"> so we had hundreds maybe thousands</font>

1049
00:36:25,310 --> 00:36:28,160
of people<font color="#E5E5E5"> all helping to factor the keys</font>

1050
00:36:26,690 --> 00:36:30,290
as quickly as<font color="#CCCCCC"> possible and</font><font color="#E5E5E5"> before we</font>

1051
00:36:28,160 --> 00:36:32,960
knew it we<font color="#CCCCCC"> had all 13 all 13 of</font><font color="#E5E5E5"> them</font>

1052
00:36:30,290 --> 00:36:35,690
factored in just one month<font color="#CCCCCC"> all under</font>

1053
00:36:32,960 --> 00:36:41,060
<font color="#E5E5E5">TI's knows and they did not know about</font>

1054
00:36:35,690 --> 00:36:42,440
<font color="#CCCCCC">it since</font><font color="#E5E5E5"> no one ever had the</font><font color="#CCCCCC"> O s keys or</font>

1055
00:36:41,060 --> 00:36:44,630
even application<font color="#E5E5E5"> keys on most models</font>

1056
00:36:42,440 --> 00:36:46,520
<font color="#E5E5E5">there were no tools to sign modified OSS</font>

1057
00:36:44,630 --> 00:36:48,470
or applications<font color="#E5E5E5"> because why</font><font color="#CCCCCC"> would you</font>

1058
00:36:46,520 --> 00:36:49,130
<font color="#E5E5E5">need</font><font color="#CCCCCC"> that up to this</font><font color="#E5E5E5"> point so I threw</font>

1059
00:36:48,470 --> 00:36:51,290
some<font color="#E5E5E5"> together</font>

1060
00:36:49,130 --> 00:36:53,090
<font color="#E5E5E5">I've validated that every single key was</font>

1061
00:36:51,290 --> 00:36:54,560
correct and could produce<font color="#CCCCCC"> os's and flash</font>

1062
00:36:53,090 --> 00:36:56,630
applications<font color="#E5E5E5"> that each calculator would</font>

1063
00:36:54,560 --> 00:36:59,680
accept and<font color="#E5E5E5"> publish those tools along</font>

1064
00:36:56,630 --> 00:37:02,630
with the key files needed to use them

1065
00:36:59,680 --> 00:37:06,020
<font color="#E5E5E5">that seemed to</font><font color="#CCCCCC"> be the final</font><font color="#E5E5E5"> straw</font><font color="#CCCCCC"> for TI</font>

1066
00:37:02,630 --> 00:37:09,170
because they sent me a DMCA takedown

1067
00:37:06,020 --> 00:37:10,609
takedown notice the<font color="#CCCCCC"> mca is</font><font color="#E5E5E5"> stands for</font>

1068
00:37:09,170 --> 00:37:13,430
Digital Millennium Copyright Act which

1069
00:37:10,609 --> 00:37:14,750
is a US<font color="#CCCCCC"> law that</font><font color="#E5E5E5"> states that if you feel</font>

1070
00:37:13,430 --> 00:37:16,399
your copy rights being violated you can

1071
00:37:14,750 --> 00:37:18,500
send a takedown<font color="#E5E5E5"> notice to the offender</font>

1072
00:37:16,400 --> 00:37:20,030
and<font color="#CCCCCC"> that</font><font color="#E5E5E5"> person has 24 hours</font><font color="#CCCCCC"> to remove</font>

1073
00:37:18,500 --> 00:37:22,310
<font color="#CCCCCC">the offending</font><font color="#E5E5E5"> material and if they don't</font>

1074
00:37:20,030 --> 00:37:25,820
they<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> right to sue</font><font color="#CCCCCC"> that person</font>

1075
00:37:22,310 --> 00:37:27,740
so we're it not for the<font color="#CCCCCC"> EF F the</font>

1076
00:37:25,820 --> 00:37:28,640
Electronic Frontier Foundation<font color="#E5E5E5"> stepping</font>

1077
00:37:27,740 --> 00:37:31,009
in<font color="#E5E5E5"> and offering to</font>

1078
00:37:28,640 --> 00:37:32,390
<font color="#E5E5E5">and me legally against those threats</font><font color="#CCCCCC"> I</font>

1079
00:37:31,010 --> 00:37:35,329
would have been forced<font color="#CCCCCC"> to comply</font><font color="#E5E5E5"> with it</font>

1080
00:37:32,390 --> 00:37:36,470
but the<font color="#CCCCCC"> ffs sent a letter to Texas</font>

1081
00:37:35,329 --> 00:37:38,420
Instrument stating<font color="#E5E5E5"> that it's not</font>

1082
00:37:36,470 --> 00:37:40,430
possible<font color="#E5E5E5"> to</font><font color="#CCCCCC"> cooperate</font><font color="#E5E5E5"> a number which is</font>

1083
00:37:38,420 --> 00:37:42,109
essentially<font color="#E5E5E5"> what I published and that</font>

1084
00:37:40,430 --> 00:37:43,720
they should just<font color="#E5E5E5"> leave me alone because</font>

1085
00:37:42,109 --> 00:37:46,130
it's not worth destroying<font color="#E5E5E5"> a person over</font>

1086
00:37:43,720 --> 00:37:48,259
<font color="#CCCCCC">t I did not respond to that letter</font><font color="#E5E5E5"> so</font>

1087
00:37:46,130 --> 00:37:51,579
the matter was<font color="#CCCCCC"> dropped and I'm still</font>

1088
00:37:48,260 --> 00:37:53,660
hosting these 512-bit keys to this day

1089
00:37:51,579 --> 00:37:55,160
but knowing<font color="#CCCCCC"> that they had lost this</font>

1090
00:37:53,660 --> 00:37:58,009
<font color="#E5E5E5">particular battle</font><font color="#CCCCCC"> T I started using</font>

1091
00:37:55,160 --> 00:38:00,589
impossible to factor<font color="#CCCCCC"> 2048-bit RSA keys</font>

1092
00:37:58,010 --> 00:38:04,039
<font color="#E5E5E5">and newly manufactured models of the 84</font>

1093
00:38:00,589 --> 00:38:05,359
plus<font color="#CCCCCC"> an 84 plus</font><font color="#E5E5E5"> silver edition</font><font color="#CCCCCC"> since the</font>

1094
00:38:04,039 --> 00:38:08,559
hardware was never designed<font color="#E5E5E5"> to validate</font>

1095
00:38:05,359 --> 00:38:11,299
such a large signature<font color="#E5E5E5"> it's 15</font><font color="#CCCCCC"> records</font>

1096
00:38:08,559 --> 00:38:13,339
<font color="#E5E5E5">validating the OS now takes</font><font color="#CCCCCC"> six</font><font color="#E5E5E5"> minutes</font>

1097
00:38:11,299 --> 00:38:16,099
<font color="#E5E5E5">where before it was nearly instantaneous</font>

1098
00:38:13,339 --> 00:38:17,839
and that is<font color="#E5E5E5"> just unacceptable so we're</font>

1099
00:38:16,099 --> 00:38:22,880
gonna go<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to flash analog exploits</font>

1100
00:38:17,839 --> 00:38:24,470
to<font color="#E5E5E5"> undo this travesty so to get rid of</font>

1101
00:38:22,880 --> 00:38:25,940
this six minute validation<font color="#E5E5E5"> we have to</font>

1102
00:38:24,470 --> 00:38:28,519
understand how the calculator boots and

1103
00:38:25,940 --> 00:38:30,019
how OS upgrades work<font color="#E5E5E5"> when first turn in</font>

1104
00:38:28,519 --> 00:38:32,149
the calculator<font color="#CCCCCC"> on the boot</font><font color="#E5E5E5"> code is the</font>

1105
00:38:30,019 --> 00:38:33,410
first thing to<font color="#E5E5E5"> get control it does some</font>

1106
00:38:32,150 --> 00:38:35,420
basic<font color="#E5E5E5"> hardware initialization and then</font>

1107
00:38:33,410 --> 00:38:37,730
it<font color="#E5E5E5"> checks the OS valid markers stored on</font>

1108
00:38:35,420 --> 00:38:39,500
sector<font color="#E5E5E5"> zero of the flash chip and if</font>

1109
00:38:37,730 --> 00:38:41,569
that marker<font color="#E5E5E5"> is valid it jumps into the</font>

1110
00:38:39,500 --> 00:38:43,369
<font color="#E5E5E5">OS and</font><font color="#CCCCCC"> the calculator starts normally</font><font color="#E5E5E5"> it</font>

1111
00:38:41,569 --> 00:38:45,920
but if<font color="#E5E5E5"> that marker is not valid then it</font>

1112
00:38:43,369 --> 00:38:49,519
waits<font color="#CCCCCC"> to receive a new valid</font><font color="#E5E5E5"> OS over one</font>

1113
00:38:45,920 --> 00:38:51,200
of the link ports or<font color="#E5E5E5"> USB ports</font><font color="#CCCCCC"> for a</font>

1114
00:38:49,519 --> 00:38:53,598
typical<font color="#E5E5E5"> OS transfer the first thing the</font>

1115
00:38:51,200 --> 00:38:55,189
boot<font color="#CCCCCC"> code</font><font color="#E5E5E5"> will do is invalidate the OS</font>

1116
00:38:53,599 --> 00:38:57,289
both in the<font color="#CCCCCC"> certificate and by erasing</font>

1117
00:38:55,190 --> 00:39:00,079
<font color="#E5E5E5">flash sector</font><font color="#CCCCCC"> zero which will reset the</font>

1118
00:38:57,289 --> 00:39:01,430
OS fallowed marker and then similar to

1119
00:39:00,079 --> 00:39:03,140
how it received flash of how the OS<font color="#CCCCCC"> is</font>

1120
00:39:01,430 --> 00:39:04,848
<font color="#CCCCCC">used</font><font color="#E5E5E5"> function application in a loop</font><font color="#CCCCCC"> over</font>

1121
00:39:03,140 --> 00:39:07,098
<font color="#E5E5E5">and over it will receive small chunks of</font>

1122
00:39:04,849 --> 00:39:08,720
the OS<font color="#E5E5E5"> into</font><font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> and then unlock flash</font>

1123
00:39:07,099 --> 00:39:11,380
write that to its<font color="#CCCCCC"> destination and</font><font color="#E5E5E5"> then</font>

1124
00:39:08,720 --> 00:39:13,459
relock<font color="#CCCCCC"> it back</font><font color="#E5E5E5"> and once all that's done</font>

1125
00:39:11,380 --> 00:39:15,500
<font color="#E5E5E5">it's time for the boot code to validate</font>

1126
00:39:13,460 --> 00:39:17,150
<font color="#CCCCCC">that 512 bit signature in the OS which</font>

1127
00:39:15,500 --> 00:39:18,319
is<font color="#E5E5E5"> effectively useless now because we</font>

1128
00:39:17,150 --> 00:39:20,779
<font color="#CCCCCC">can generate</font><font color="#E5E5E5"> that signature ourselves</font>

1129
00:39:18,319 --> 00:39:23,150
and then once it's<font color="#CCCCCC"> done that it goes</font><font color="#E5E5E5"> to</font>

1130
00:39:20,779 --> 00:39:24,859
validate the<font color="#CCCCCC"> 2048 bit signature and then</font>

1131
00:39:23,150 --> 00:39:28,369
<font color="#CCCCCC">if</font><font color="#E5E5E5"> all those checks pass it marks</font><font color="#CCCCCC"> the OS</font>

1132
00:39:24,859 --> 00:39:30,170
is<font color="#E5E5E5"> valid</font><font color="#CCCCCC"> in flash and the certificate</font>

1133
00:39:28,369 --> 00:39:34,400
<font color="#E5E5E5">and then it jumps into the OS starts</font>

1134
00:39:30,170 --> 00:39:37,160
executing so digging in a<font color="#E5E5E5"> little further</font>

1135
00:39:34,400 --> 00:39:39,710
we look<font color="#E5E5E5"> at how it validates this 2048</font>

1136
00:39:37,160 --> 00:39:41,089
<font color="#E5E5E5">bit signature unlike the original 512</font>

1137
00:39:39,710 --> 00:39:41,990
bit signature this new one is<font color="#E5E5E5"> stored</font>

1138
00:39:41,089 --> 00:39:43,880
<font color="#E5E5E5">length in</font><font color="#CCCCCC"> deck</font>

1139
00:39:41,990 --> 00:39:45,470
which means that there's a word at the

1140
00:39:43,880 --> 00:39:48,170
beginning<font color="#E5E5E5"> indicates indicating that it's</font>

1141
00:39:45,470 --> 00:39:49,490
<font color="#E5E5E5">200</font><font color="#CCCCCC"> t6 bytes</font><font color="#E5E5E5"> and but you know if you</font>

1142
00:39:48,170 --> 00:39:51,260
know this<font color="#CCCCCC"> thing's just if you know that</font>

1143
00:39:49,490 --> 00:39:52,399
<font color="#E5E5E5">the signatures 2048-bit or two</font><font color="#CCCCCC"> numbers</font>

1144
00:39:51,260 --> 00:39:54,349
<font color="#CCCCCC">of six bytes why do you need stored</font>

1145
00:39:52,400 --> 00:39:55,790
<font color="#CCCCCC">length</font><font color="#E5E5E5"> it all it does is open up the</font>

1146
00:39:54,349 --> 00:39:57,349
possibility<font color="#CCCCCC"> that it could be</font><font color="#E5E5E5"> exploited</font>

1147
00:39:55,790 --> 00:39:59,210
<font color="#E5E5E5">and as it turns out that's exactly what</font>

1148
00:39:57,349 --> 00:40:00,920
happened we we can't exploit that<font color="#E5E5E5"> they</font>

1149
00:39:59,210 --> 00:40:02,300
don't do bounds checking on that length

1150
00:40:00,920 --> 00:40:03,500
so we<font color="#E5E5E5"> can take advantage</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that we can</font>

1151
00:40:02,300 --> 00:40:06,830
set<font color="#E5E5E5"> it to</font><font color="#CCCCCC"> something really huge and</font>

1152
00:40:03,500 --> 00:40:09,130
<font color="#CCCCCC">screw things up we can embed</font><font color="#E5E5E5"> a really</font>

1153
00:40:06,830 --> 00:40:11,089
large signature into the OS update and

1154
00:40:09,130 --> 00:40:12,680
because the boot code<font color="#CCCCCC"> doesn't check that</font>

1155
00:40:11,089 --> 00:40:15,670
it's the same<font color="#E5E5E5"> value it will blindly copy</font>

1156
00:40:12,680 --> 00:40:20,540
that signature<font color="#CCCCCC"> to the start of Ram</font><font color="#E5E5E5"> at</font>

1157
00:40:15,670 --> 00:40:23,260
<font color="#CCCCCC">8,000</font><font color="#E5E5E5"> so we can store 80 just the the 80</font>

1158
00:40:20,540 --> 00:40:26,210
<font color="#E5E5E5">by it over and over of</font><font color="#CCCCCC"> just garbage and</font>

1159
00:40:23,260 --> 00:40:29,420
then store<font color="#CCCCCC"> 80 jump instruction which is</font>

1160
00:40:26,210 --> 00:40:31,849
opcode<font color="#CCCCCC"> c3 and then the address</font><font color="#E5E5E5"> that we</font>

1161
00:40:29,420 --> 00:40:34,040
of our<font color="#CCCCCC"> of our payload</font><font color="#E5E5E5"> that we</font><font color="#CCCCCC"> want to</font>

1162
00:40:31,849 --> 00:40:37,910
execute so then we put<font color="#CCCCCC"> lots</font><font color="#E5E5E5"> and lots and</font>

1163
00:40:34,040 --> 00:40:39,560
<font color="#CCCCCC">lots and lots of Hades all</font><font color="#E5E5E5"> over that</font>

1164
00:40:37,910 --> 00:40:41,118
<font color="#E5E5E5">signature which will eventually when it</font>

1165
00:40:39,560 --> 00:40:44,359
goes<font color="#CCCCCC"> to write it to</font><font color="#E5E5E5"> ram it will</font>

1166
00:40:41,119 --> 00:40:45,650
eventually<font color="#E5E5E5"> overwrite the entire stack so</font>

1167
00:40:44,359 --> 00:40:47,330
the next time the code tries to return

1168
00:40:45,650 --> 00:40:49,550
<font color="#E5E5E5">it's going to</font><font color="#CCCCCC"> return to address 8080</font>

1169
00:40:47,330 --> 00:40:51,529
<font color="#E5E5E5">where we have a jump to where</font><font color="#CCCCCC"> our</font>

1170
00:40:49,550 --> 00:40:54,980
payload will we have calculated will be

1171
00:40:51,530 --> 00:40:57,020
at so once we get control<font color="#E5E5E5"> we can do some</font>

1172
00:40:54,980 --> 00:40:59,359
<font color="#E5E5E5">cleanup</font><font color="#CCCCCC"> such as marking the LS is valid</font>

1173
00:40:57,020 --> 00:41:02,089
both<font color="#E5E5E5"> on</font><font color="#CCCCCC"> slash</font><font color="#E5E5E5"> sector 0 and in the</font>

1174
00:40:59,359 --> 00:41:03,859
certificate<font color="#E5E5E5"> and then just jump to</font><font color="#CCCCCC"> the</font>

1175
00:41:02,089 --> 00:41:05,839
start<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> us the nice</font><font color="#E5E5E5"> thing about</font>

1176
00:41:03,859 --> 00:41:08,359
this is<font color="#CCCCCC"> that no custom OS</font><font color="#E5E5E5"> transfer tools</font>

1177
00:41:05,839 --> 00:41:10,070
are required<font color="#E5E5E5"> we just create especially a</font>

1178
00:41:08,359 --> 00:41:14,540
crafted OS upgrade file with this

1179
00:41:10,070 --> 00:41:17,300
malicious signature<font color="#E5E5E5"> and this also this</font>

1180
00:41:14,540 --> 00:41:18,859
exploits the read-only boot code so all

1181
00:41:17,300 --> 00:41:23,320
models manufactured<font color="#E5E5E5"> after this point are</font>

1182
00:41:18,859 --> 00:41:23,319
vulnerable so they screwed up<font color="#CCCCCC"> again</font>

1183
00:41:24,430 --> 00:41:28,730
another this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> nuts another big</font>

1184
00:41:27,440 --> 00:41:30,170
discovering the community and another

1185
00:41:28,730 --> 00:41:32,359
nail<font color="#CCCCCC"> in the coffin on</font><font color="#E5E5E5"> the security of</font>

1186
00:41:30,170 --> 00:41:34,480
<font color="#E5E5E5">these things has</font><font color="#CCCCCC"> to do with modifying</font>

1187
00:41:32,359 --> 00:41:37,009
what should be<font color="#CCCCCC"> read-only boot sectors</font>

1188
00:41:34,480 --> 00:41:38,780
one thing I noticed is that the<font color="#CCCCCC"> K for</font>

1189
00:41:37,010 --> 00:41:40,820
<font color="#CCCCCC">plus and he</font><font color="#E5E5E5"> a for plus</font><font color="#CCCCCC"> over addition</font>

1190
00:41:38,780 --> 00:41:43,460
<font color="#E5E5E5">those boot sectors are the code in the</font>

1191
00:41:40,820 --> 00:41:45,349
boot sectors are almost identical<font color="#CCCCCC"> and in</font>

1192
00:41:43,460 --> 00:41:47,060
fact other<font color="#CCCCCC"> than the fact</font><font color="#E5E5E5"> that the</font><font color="#CCCCCC"> Tia</font>

1193
00:41:45,349 --> 00:41:48,290
<font color="#CCCCCC">for</font><font color="#E5E5E5"> plus is a one megabyte flash tip and</font>

1194
00:41:47,060 --> 00:41:49,490
the<font color="#CCCCCC"> Silver Edition is a two megabyte</font>

1195
00:41:48,290 --> 00:41:51,349
flash tip they<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right Anna Cole</font>

1196
00:41:49,490 --> 00:41:53,839
calculators in every way except<font color="#CCCCCC"> for one</font>

1197
00:41:51,349 --> 00:41:55,950
thing<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that IO port</font><font color="#CCCCCC"> right</font>

1198
00:41:53,839 --> 00:41:57,570
work 21

1199
00:41:55,950 --> 00:41:59,609
when the calculators first booting<font color="#E5E5E5"> and</font>

1200
00:41:57,570 --> 00:42:04,320
initializing hardware and<font color="#CCCCCC"> IO</font><font color="#E5E5E5"> it writes</font>

1201
00:41:59,609 --> 00:42:08,160
<font color="#E5E5E5">either a 0 or a 1 there</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> 2104 they</font>

1202
00:42:04,320 --> 00:42:09,330
<font color="#CCCCCC">t4 +</font><font color="#E5E5E5"> +</font><font color="#CCCCCC"> 1 for</font><font color="#E5E5E5"> the silver ition now this</font>

1203
00:42:08,160 --> 00:42:12,660
is a protected port you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> the</font>

1204
00:42:09,330 --> 00:42:15,330
unlock sequence there but both

1205
00:42:12,660 --> 00:42:17,339
calculators run exactly the same OS so

1206
00:42:15,330 --> 00:42:20,700
the OS actually reads the value of 421

1207
00:42:17,339 --> 00:42:22,200
<font color="#E5E5E5">or bit specifically</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> 0 to determine</font>

1208
00:42:20,700 --> 00:42:24,330
which model that it's running<font color="#CCCCCC"> on</font><font color="#E5E5E5"> and</font>

1209
00:42:22,200 --> 00:42:26,848
it's critical<font color="#CCCCCC"> that it knows</font><font color="#E5E5E5"> this for a</font>

1210
00:42:24,330 --> 00:42:29,040
very important reason and<font color="#CCCCCC"> that is that</font>

1211
00:42:26,849 --> 00:42:33,330
<font color="#CCCCCC">the OS is</font><font color="#E5E5E5"> actually organized into two</font>

1212
00:42:29,040 --> 00:42:34,859
sections or two halves so to illustrate

1213
00:42:33,330 --> 00:42:36,540
<font color="#E5E5E5">that here's the flash layout for the</font>

1214
00:42:34,859 --> 00:42:37,710
t-84<font color="#CCCCCC"> + not the</font><font color="#E5E5E5"> Silver Edition this is</font>

1215
00:42:36,540 --> 00:42:41,369
just the regular<font color="#E5E5E5"> e4 plus the</font><font color="#CCCCCC"> one</font>

1216
00:42:37,710 --> 00:42:44,910
megabyte<font color="#E5E5E5"> flash chip it has 40 flash</font>

1217
00:42:41,369 --> 00:42:46,140
pages the first<font color="#E5E5E5"> OS section is at the</font>

1218
00:42:44,910 --> 00:42:49,589
very beginning of the flash chip<font color="#CCCCCC"> at</font>

1219
00:42:46,140 --> 00:42:52,470
sector<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> and it runs from</font><font color="#E5E5E5"> flashback 0 up</font>

1220
00:42:49,589 --> 00:42:54,119
to flash page 8 and then near the<font color="#CCCCCC"> end of</font>

1221
00:42:52,470 --> 00:42:55,919
the flash<font color="#E5E5E5"> tip</font><font color="#CCCCCC"> in green here is the</font>

1222
00:42:54,119 --> 00:42:59,160
<font color="#E5E5E5">second part</font><font color="#CCCCCC"> of the OS</font><font color="#E5E5E5"> and these are</font>

1223
00:42:55,920 --> 00:43:01,530
privileged pages those page numbers are

1224
00:42:59,160 --> 00:43:02,670
fixed that's that's why<font color="#CCCCCC"> they</font><font color="#E5E5E5"> you have to</font>

1225
00:43:01,530 --> 00:43:04,440
split<font color="#E5E5E5"> it in the</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> so they have the</font>

1226
00:43:02,670 --> 00:43:06,030
most<font color="#E5E5E5"> of the OS at the beginning and they</font>

1227
00:43:04,440 --> 00:43:10,470
have the<font color="#CCCCCC"> privileged stuff at the end in</font>

1228
00:43:06,030 --> 00:43:12,300
this fixed location now both the upper

1229
00:43:10,470 --> 00:43:14,368
OS<font color="#CCCCCC"> fade range which is</font><font color="#E5E5E5"> in green</font><font color="#CCCCCC"> and the</font>

1230
00:43:12,300 --> 00:43:16,530
boot page which is in red<font color="#CCCCCC"> are privileged</font>

1231
00:43:14,369 --> 00:43:19,530
but the boot page is supposedly

1232
00:43:16,530 --> 00:43:21,390
read-only and then of<font color="#CCCCCC"> course in between</font>

1233
00:43:19,530 --> 00:43:22,740
the OS sections is the user archive

1234
00:43:21,390 --> 00:43:24,509
which<font color="#E5E5E5"> is where flash applications</font>

1235
00:43:22,740 --> 00:43:28,709
archive variables that kind<font color="#CCCCCC"> of stuff is</font>

1236
00:43:24,510 --> 00:43:29,849
stored and so here is the flash layout

1237
00:43:28,710 --> 00:43:33,780
for the TV<font color="#CCCCCC"> for plus a Silver Edition</font>

1238
00:43:29,849 --> 00:43:35,490
<font color="#CCCCCC">it's basically the</font><font color="#E5E5E5"> same just wider</font><font color="#CCCCCC"> it</font>

1239
00:43:33,780 --> 00:43:40,200
has a<font color="#CCCCCC"> two megabyte flash chip instead</font><font color="#E5E5E5"> of</font>

1240
00:43:35,490 --> 00:43:43,709
a<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> megabyte flash chip so there are now</font>

1241
00:43:40,200 --> 00:43:47,160
80 flash page instead<font color="#CCCCCC"> of 40 the boot</font>

1242
00:43:43,710 --> 00:43:50,640
page is now at<font color="#E5E5E5"> 7f instead of</font><font color="#CCCCCC"> 3f and the</font>

1243
00:43:47,160 --> 00:43:55,500
upper OS page range is at<font color="#CCCCCC"> 7c</font><font color="#E5E5E5"> and 7d</font>

1244
00:43:50,640 --> 00:43:57,240
instead of<font color="#E5E5E5"> 3</font><font color="#CCCCCC"> C in 3d</font><font color="#E5E5E5"> so that's why the</font>

1245
00:43:55,500 --> 00:43:59,700
OSS<font color="#E5E5E5"> is</font><font color="#CCCCCC"> check port 21</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> it has to</font>

1246
00:43:57,240 --> 00:44:01,470
know where the second half of the<font color="#CCCCCC"> OS</font><font color="#E5E5E5"> is</font>

1247
00:43:59,700 --> 00:44:04,049
is it<font color="#CCCCCC"> 3c or is it 7</font><font color="#E5E5E5"> C it's got to look</font>

1248
00:44:01,470 --> 00:44:06,230
at that port to know which flash page to

1249
00:44:04,050 --> 00:44:06,230
use

1250
00:44:06,990 --> 00:44:11,830
so the boot code<font color="#E5E5E5"> initially sets the</font>

1251
00:44:09,850 --> 00:44:14,200
value of<font color="#CCCCCC"> i/o port 21</font><font color="#E5E5E5"> indicating which</font>

1252
00:44:11,830 --> 00:44:16,240
model it is but what would happen<font color="#E5E5E5"> if we</font>

1253
00:44:14,200 --> 00:44:17,799
<font color="#E5E5E5">unlock flash and then just modified</font><font color="#CCCCCC"> it</font>

1254
00:44:16,240 --> 00:44:20,620
ourselves<font color="#E5E5E5"> because</font><font color="#CCCCCC"> if the</font><font color="#E5E5E5"> buco does it we</font>

1255
00:44:17,800 --> 00:44:23,710
can do it if a<font color="#E5E5E5"> TV</font><font color="#CCCCCC"> 4 plus Silver Edition</font>

1256
00:44:20,620 --> 00:44:25,480
<font color="#E5E5E5">writes a</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> to port 21 instead of a</font>

1257
00:44:23,710 --> 00:44:27,010
<font color="#E5E5E5">one like it's supposed to then the OS</font>

1258
00:44:25,480 --> 00:44:31,690
would believe it's actually<font color="#CCCCCC"> a ti-84</font><font color="#E5E5E5"> plus</font>

1259
00:44:27,010 --> 00:44:33,190
<font color="#E5E5E5">non</font><font color="#CCCCCC"> silver edition</font><font color="#E5E5E5"> and vice versa</font>

1260
00:44:31,690 --> 00:44:34,390
now normally this would just<font color="#E5E5E5"> crash</font><font color="#CCCCCC"> the</font>

1261
00:44:33,190 --> 00:44:36,160
calculator<font color="#CCCCCC"> because it would suddenly be</font>

1262
00:44:34,390 --> 00:44:39,910
looking at page<font color="#E5E5E5"> three see in the middle</font>

1263
00:44:36,160 --> 00:44:42,549
there<font color="#CCCCCC"> for when</font><font color="#E5E5E5"> it really wants you know</font>

1264
00:44:39,910 --> 00:44:44,259
<font color="#E5E5E5">70 in the green region but I had an</font><font color="#CCCCCC"> idea</font>

1265
00:44:42,550 --> 00:44:46,900
that<font color="#E5E5E5"> I</font><font color="#CCCCCC"> could just</font><font color="#E5E5E5"> copy the upper OS</font>

1266
00:44:44,260 --> 00:44:48,970
pages and the and<font color="#CCCCCC"> aboot page so the</font>

1267
00:44:46,900 --> 00:44:50,640
green<font color="#CCCCCC"> of red</font><font color="#E5E5E5"> areas to the middle of the</font>

1268
00:44:48,970 --> 00:44:54,100
flash<font color="#CCCCCC"> chip in the second light orange</font>

1269
00:44:50,640 --> 00:44:56,020
area so<font color="#E5E5E5"> that when the OS went to look</font>

1270
00:44:54,100 --> 00:44:57,850
for page<font color="#CCCCCC"> 3c it would actually</font><font color="#E5E5E5"> find it at</font>

1271
00:44:56,020 --> 00:44:59,620
<font color="#E5E5E5">page</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> C and</font><font color="#CCCCCC"> it because I need to</font>

1272
00:44:57,850 --> 00:45:01,690
function<font color="#CCCCCC"> normally</font>

1273
00:44:59,620 --> 00:45:04,720
the thing is though<font color="#E5E5E5"> instead of the dark</font>

1274
00:45:01,690 --> 00:45:07,060
orange area in the middle it would only

1275
00:45:04,720 --> 00:45:09,520
consider that<font color="#E5E5E5"> first dark orange box as</font>

1276
00:45:07,060 --> 00:45:12,190
the user archive<font color="#E5E5E5"> so that effectively</font>

1277
00:45:09,520 --> 00:45:13,540
<font color="#CCCCCC">cuts the user archive in half</font><font color="#E5E5E5"> so that</font>

1278
00:45:12,190 --> 00:45:14,950
<font color="#CCCCCC">was my thought</font><font color="#E5E5E5"> I thought I could force</font>

1279
00:45:13,540 --> 00:45:17,020
the OS to only<font color="#E5E5E5"> think half</font><font color="#CCCCCC"> the user</font>

1280
00:45:14,950 --> 00:45:18,129
archive was there<font color="#E5E5E5"> because it's a</font><font color="#CCCCCC"> good</font>

1281
00:45:17,020 --> 00:45:19,330
<font color="#CCCCCC">way to mess with</font><font color="#E5E5E5"> people I was actually</font>

1282
00:45:18,130 --> 00:45:20,980
thinking of<font color="#E5E5E5"> making like a little</font><font color="#CCCCCC"> virus</font>

1283
00:45:19,330 --> 00:45:22,180
<font color="#E5E5E5">so you could run it and it would someone</font>

1284
00:45:20,980 --> 00:45:24,040
would have like a silver edition<font color="#E5E5E5"> with</font>

1285
00:45:22,180 --> 00:45:25,660
<font color="#E5E5E5">two megabytes and flash and then you'd</font>

1286
00:45:24,040 --> 00:45:26,620
<font color="#E5E5E5">run this and then all of a sudden now</font>

1287
00:45:25,660 --> 00:45:28,600
you have one<font color="#E5E5E5"> and there's nothing you can</font>

1288
00:45:26,620 --> 00:45:30,850
do about<font color="#E5E5E5"> it so I thought I would</font><font color="#CCCCCC"> just</font>

1289
00:45:28,600 --> 00:45:32,950
just thought it<font color="#E5E5E5"> was a nice thought</font><font color="#CCCCCC"> but</font>

1290
00:45:30,850 --> 00:45:34,660
<font color="#CCCCCC">when I tried to put this in the practice</font>

1291
00:45:32,950 --> 00:45:36,819
by changing I was actually gonna release

1292
00:45:34,660 --> 00:45:38,379
<font color="#E5E5E5">that by the way but when I tried to put</font>

1293
00:45:36,820 --> 00:45:41,020
this into practice by changing port 21

1294
00:45:38,380 --> 00:45:45,240
<font color="#E5E5E5">and copying pages</font><font color="#CCCCCC"> seven</font><font color="#E5E5E5"> C through seven</font>

1295
00:45:41,020 --> 00:45:48,220
F<font color="#CCCCCC"> 2</font><font color="#E5E5E5"> 3 C and 3 F the copy wouldn't work</font><font color="#CCCCCC"> I</font>

1296
00:45:45,240 --> 00:45:49,629
it's<font color="#E5E5E5"> like it just</font><font color="#CCCCCC"> didn't happen</font><font color="#E5E5E5"> and as</font>

1297
00:45:48,220 --> 00:45:51,669
it turns out there's<font color="#CCCCCC"> actually a very</font>

1298
00:45:49,630 --> 00:45:54,850
<font color="#E5E5E5">good reason</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> that you're ready to</font>

1299
00:45:51,670 --> 00:45:57,160
have your mind blown<font color="#E5E5E5"> the red area</font>

1300
00:45:54,850 --> 00:45:57,549
changed<font color="#E5E5E5"> so when I changed the value port</font>

1301
00:45:57,160 --> 00:46:00,310
21

1302
00:45:57,550 --> 00:46:01,750
I changed which range was read-only so

1303
00:46:00,310 --> 00:46:04,810
this is the<font color="#CCCCCC"> Silver Edition so it's got</font>

1304
00:46:01,750 --> 00:46:06,160
<font color="#E5E5E5">two megabytes</font><font color="#CCCCCC"> of flash</font><font color="#E5E5E5"> there normally</font>

1305
00:46:04,810 --> 00:46:07,450
<font color="#E5E5E5">that normally</font><font color="#CCCCCC"> that region is protected</font>

1306
00:46:06,160 --> 00:46:08,770
<font color="#E5E5E5">but now that region is protect is</font>

1307
00:46:07,450 --> 00:46:10,029
protected because<font color="#CCCCCC"> it</font><font color="#E5E5E5"> think it</font><font color="#CCCCCC"> thinks</font>

1308
00:46:08,770 --> 00:46:10,390
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> 84</font><font color="#E5E5E5"> plus that have a still</font>

1309
00:46:10,030 --> 00:46:13,660
radition

1310
00:46:10,390 --> 00:46:15,100
so by changing<font color="#CCCCCC"> the port value port 21</font><font color="#E5E5E5"> I</font>

1311
00:46:13,660 --> 00:46:17,529
actually<font color="#E5E5E5"> change the protection from one</font>

1312
00:46:15,100 --> 00:46:18,759
region to another<font color="#E5E5E5"> so all this time we</font>

1313
00:46:17,530 --> 00:46:19,970
thought<font color="#CCCCCC"> that the flash tip itself</font><font color="#E5E5E5"> was</font>

1314
00:46:18,760 --> 00:46:23,210
<font color="#CCCCCC">that it locked</font><font color="#E5E5E5"> on the boot</font>

1315
00:46:19,970 --> 00:46:25,220
sector but no it's the<font color="#CCCCCC"> a6 port 21</font><font color="#E5E5E5"> that's</font>

1316
00:46:23,210 --> 00:46:27,050
keeping<font color="#CCCCCC"> that it logged so by temporarily</font>

1317
00:46:25,220 --> 00:46:28,339
flipping the value of<font color="#E5E5E5"> port 21 from what</font>

1318
00:46:27,050 --> 00:46:32,960
it's supposed to<font color="#E5E5E5"> be we can</font><font color="#CCCCCC"> actually</font>

1319
00:46:28,340 --> 00:46:34,250
modify<font color="#CCCCCC"> the boot code and there's</font>

1320
00:46:32,960 --> 00:46:35,780
everything<font color="#E5E5E5"> I just said making it</font>

1321
00:46:34,250 --> 00:46:39,530
possible to<font color="#E5E5E5"> modify the boot code and</font>

1322
00:46:35,780 --> 00:46:41,480
modify<font color="#CCCCCC"> it we did we made diagnostic</font>

1323
00:46:39,530 --> 00:46:42,920
utilities and bedded them in the boot

1324
00:46:41,480 --> 00:46:44,990
sector so that<font color="#CCCCCC"> it was</font><font color="#E5E5E5"> impossible to</font>

1325
00:46:42,920 --> 00:46:47,210
permanently<font color="#CCCCCC"> brick it</font><font color="#E5E5E5"> and most</font>

1326
00:46:44,990 --> 00:46:51,560
<font color="#E5E5E5">importantly we can simply patch out the</font>

1327
00:46:47,210 --> 00:46:52,520
<font color="#CCCCCC">2048 bit signature check so naturally</font>

1328
00:46:51,560 --> 00:46:53,630
when they figured out<font color="#E5E5E5"> we</font><font color="#CCCCCC"> could do this</font>

1329
00:46:52,520 --> 00:46:55,040
they'd change the way that the

1330
00:46:53,630 --> 00:46:56,600
calculators are manufactured they now

1331
00:46:55,040 --> 00:46:58,910
edit lock the boot sector on<font color="#CCCCCC"> the flash</font>

1332
00:46:56,600 --> 00:47:01,540
<font color="#E5E5E5">chip in hardware so the AC protection is</font>

1333
00:46:58,910 --> 00:47:01,540
redundant

1334
00:47:02,020 --> 00:47:06,440
here's the really<font color="#CCCCCC"> fun part this is</font><font color="#E5E5E5"> my</font>

1335
00:47:04,070 --> 00:47:08,420
<font color="#E5E5E5">favorite part shortly after</font><font color="#CCCCCC"> TI came out</font>

1336
00:47:06,440 --> 00:47:09,920
with their<font color="#E5E5E5"> first and only</font><font color="#CCCCCC"> z80 calculator</font>

1337
00:47:08,420 --> 00:47:12,770
to have a color LCD<font color="#E5E5E5"> called the ti-84</font>

1338
00:47:09,920 --> 00:47:14,450
<font color="#E5E5E5">plus C Silver Edition not only did it</font>

1339
00:47:12,770 --> 00:47:16,100
have<font color="#E5E5E5"> a color LCD but it had a</font><font color="#CCCCCC"> four</font>

1340
00:47:14,450 --> 00:47:17,660
megabyte flash<font color="#E5E5E5"> chip instead of</font><font color="#CCCCCC"> two</font>

1341
00:47:16,100 --> 00:47:21,380
megabytes<font color="#CCCCCC"> so it's twice as big as</font><font color="#E5E5E5"> the</font>

1342
00:47:17,660 --> 00:47:23,450
biggest<font color="#E5E5E5"> one up to that point the</font><font color="#CCCCCC"> C in</font>

1343
00:47:21,380 --> 00:47:26,300
sub<font color="#CCCCCC"> Edition means a</font><font color="#E5E5E5"> Gen 4 plus C so</font>

1344
00:47:23,450 --> 00:47:29,330
<font color="#CCCCCC">edition means color</font><font color="#E5E5E5"> the only difference</font>

1345
00:47:26,300 --> 00:47:30,590
between it and<font color="#E5E5E5"> the older models is</font><font color="#CCCCCC"> that</font>

1346
00:47:29,330 --> 00:47:34,850
<font color="#CCCCCC">four megabyte flash chip and the color</font>

1347
00:47:30,590 --> 00:47:35,990
LCD<font color="#E5E5E5"> they used exactly the same ASIC</font><font color="#CCCCCC"> even</font>

1348
00:47:34,850 --> 00:47:37,279
though it wasn't<font color="#CCCCCC"> designed to</font><font color="#E5E5E5"> work with</font><font color="#CCCCCC"> a</font>

1349
00:47:35,990 --> 00:47:38,689
<font color="#E5E5E5">flash to</font><font color="#CCCCCC"> beyond 2 megabytes it was</font>

1350
00:47:37,280 --> 00:47:42,080
designed to<font color="#E5E5E5"> work with either 1 or 2</font>

1351
00:47:38,690 --> 00:47:43,730
megabytes<font color="#E5E5E5"> not that big of a deal except</font>

1352
00:47:42,080 --> 00:47:45,440
the<font color="#E5E5E5"> problem is the</font><font color="#CCCCCC"> 4 megabyte flash chip</font>

1353
00:47:43,730 --> 00:47:47,240
has a different sector layout<font color="#E5E5E5"> compared</font>

1354
00:47:45,440 --> 00:47:49,790
to<font color="#CCCCCC"> the 1 megabyte</font><font color="#E5E5E5"> and 2 megabyte chips</font>

1355
00:47:47,240 --> 00:47:51,470
used in the earlier models<font color="#E5E5E5"> so the</font>

1356
00:47:49,790 --> 00:47:53,150
supposedly read-only boot pages at the

1357
00:47:51,470 --> 00:47:54,649
<font color="#CCCCCC">end of the 2 megabyte flash chip are now</font>

1358
00:47:53,150 --> 00:47:56,000
in the middle<font color="#CCCCCC"> of the 4 megabyte flash</font>

1359
00:47:54,650 --> 00:47:59,300
<font color="#E5E5E5">chip which is part of the new</font>

1360
00:47:56,000 --> 00:48:01,220
calculators<font color="#E5E5E5"> super big user archive so</font>

1361
00:47:59,300 --> 00:48:03,050
and<font color="#E5E5E5"> obviously the eye needs people to</font>

1362
00:48:01,220 --> 00:48:04,220
<font color="#E5E5E5">modify these archives so then they now</font>

1363
00:48:03,050 --> 00:48:05,750
need<font color="#CCCCCC"> to be able to write to</font><font color="#E5E5E5"> the pages</font>

1364
00:48:04,220 --> 00:48:07,959
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ASIC that their own ASIC is</font>

1365
00:48:05,750 --> 00:48:10,910
designed to<font color="#CCCCCC"> protect so what do they do</font>

1366
00:48:07,960 --> 00:48:12,320
they use their worker so they

1367
00:48:10,910 --> 00:48:13,370
temporarily toggle which region is

1368
00:48:12,320 --> 00:48:15,770
protected because<font color="#E5E5E5"> they can't just turn</font>

1369
00:48:13,370 --> 00:48:17,750
<font color="#E5E5E5">it off all they can do is miss configure</font>

1370
00:48:15,770 --> 00:48:19,759
it a different way do their rights<font color="#E5E5E5"> and</font>

1371
00:48:17,750 --> 00:48:21,800
then<font color="#CCCCCC"> toggle the back if they get the</font>

1372
00:48:19,760 --> 00:48:23,690
idea<font color="#CCCCCC"> from us I don't know who can say</font>

1373
00:48:21,800 --> 00:48:28,970
but I choose to<font color="#CCCCCC"> believe timing is a</font>

1374
00:48:23,690 --> 00:48:31,400
little<font color="#E5E5E5"> convenient so the cost of</font>

1375
00:48:28,970 --> 00:48:32,600
toggling<font color="#E5E5E5"> a port 21 actually slows the</font>

1376
00:48:31,400 --> 00:48:33,170
calculator down<font color="#E5E5E5"> to the point that the</font>

1377
00:48:32,600 --> 00:48:34,368
performance

1378
00:48:33,170 --> 00:48:36,049
really isn't<font color="#E5E5E5"> that great</font><font color="#CCCCCC"> so they ditched</font>

1379
00:48:34,369 --> 00:48:38,599
the data for apostasy<font color="#E5E5E5"> silver edition in</font>

1380
00:48:36,049 --> 00:48:41,329
favor of the<font color="#E5E5E5"> ti-84 plus C II which</font><font color="#CCCCCC"> is a</font>

1381
00:48:38,599 --> 00:48:43,609
brand new calculator with the<font color="#CCCCCC"> EZ</font><font color="#E5E5E5"> 80 CPU</font>

1382
00:48:41,329 --> 00:48:45,770
which sports the<font color="#E5E5E5"> ad backwards</font>

1383
00:48:43,609 --> 00:48:47,509
compatibility so it can run<font color="#E5E5E5"> regular old</font>

1384
00:48:45,770 --> 00:48:50,299
z80 instructions in addition to the new

1385
00:48:47,510 --> 00:48:52,460
easy<font color="#CCCCCC"> 80</font><font color="#E5E5E5"> ones which supports 24-bit</font>

1386
00:48:50,299 --> 00:48:56,900
addressing on a 16-bit<font color="#E5E5E5"> i/o port range</font>

1387
00:48:52,460 --> 00:48:58,640
<font color="#E5E5E5">instead of just an 8-bit one sorry since</font>

1388
00:48:56,900 --> 00:48:59,930
they have 24 24 bit addressing now they

1389
00:48:58,640 --> 00:49:01,940
<font color="#CCCCCC">ditch</font><font color="#E5E5E5"> the paging and Bank switching</font>

1390
00:48:59,930 --> 00:49:02,598
<font color="#E5E5E5">model because it's they don't</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> that</font>

1391
00:49:01,940 --> 00:49:05,559
<font color="#E5E5E5">they don't need to deal with</font><font color="#CCCCCC"> that</font>

1392
00:49:02,599 --> 00:49:08,180
<font color="#CCCCCC">anymore</font><font color="#E5E5E5"> in favor of a flat memory model</font>

1393
00:49:05,559 --> 00:49:09,829
they also revamped the port<font color="#CCCCCC"> protections</font>

1394
00:49:08,180 --> 00:49:12,890
so since there are no privileged pages

1395
00:49:09,829 --> 00:49:15,500
anymore<font color="#CCCCCC"> so now certain address ranges</font>

1396
00:49:12,890 --> 00:49:18,140
are considered privileged and certain

1397
00:49:15,500 --> 00:49:20,900
i/o ports<font color="#E5E5E5"> mainly</font><font color="#CCCCCC"> anywhere the</font><font color="#E5E5E5"> high</font><font color="#CCCCCC"> by is</font>

1398
00:49:18,140 --> 00:49:23,480
<font color="#CCCCCC">zero are</font><font color="#E5E5E5"> considered</font><font color="#CCCCCC"> protected and can</font>

1399
00:49:20,900 --> 00:49:26,480
only be<font color="#E5E5E5"> written to from a privileged</font>

1400
00:49:23,480 --> 00:49:28,880
address range which would<font color="#E5E5E5"> be that you've</font>

1401
00:49:26,480 --> 00:49:32,030
read boot region or the light orange

1402
00:49:28,880 --> 00:49:33,200
<font color="#E5E5E5">region where the OS is so the boot</font>

1403
00:49:32,030 --> 00:49:34,220
region you know is<font color="#CCCCCC"> the start at the</font>

1404
00:49:33,200 --> 00:49:36,348
start of<font color="#E5E5E5"> the flash tip it's read-only</font>

1405
00:49:34,220 --> 00:49:39,020
<font color="#E5E5E5">it's always privileged and then the</font>

1406
00:49:36,349 --> 00:49:40,069
variable sized<font color="#E5E5E5"> OS follows it and then</font>

1407
00:49:39,020 --> 00:49:43,190
the rest<font color="#E5E5E5"> of that is</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> the user</font>

1408
00:49:40,069 --> 00:49:45,529
<font color="#CCCCCC">archive so since the size of the OS can</font>

1409
00:49:43,190 --> 00:49:46,880
vary from version to version<font color="#E5E5E5"> the ASIC</font>

1410
00:49:45,530 --> 00:49:48,650
has<font color="#E5E5E5"> to be configured some house that it</font>

1411
00:49:46,880 --> 00:49:50,660
knows which parts<font color="#E5E5E5"> of the flash tip to</font>

1412
00:49:48,650 --> 00:49:53,630
consider privileged and<font color="#E5E5E5"> that privilege</font>

1413
00:49:50,660 --> 00:49:57,500
<font color="#E5E5E5">range is configured via protected IO</font>

1414
00:49:53,630 --> 00:49:58,849
ports<font color="#E5E5E5"> one D through one F which</font><font color="#CCCCCC"> truly</font>

1415
00:49:57,500 --> 00:50:00,020
can only be modified<font color="#E5E5E5"> by code in the</font>

1416
00:49:58,849 --> 00:50:02,569
privileged<font color="#CCCCCC"> reasons just like the old</font>

1417
00:50:00,020 --> 00:50:06,020
protection so how do the protected<font color="#CCCCCC"> i/o</font>

1418
00:50:02,569 --> 00:50:07,970
ports work well with any privileged<font color="#E5E5E5"> io</font>

1419
00:50:06,020 --> 00:50:08,990
port<font color="#E5E5E5"> right t I must load a constant</font>

1420
00:50:07,970 --> 00:50:10,790
value into a register

1421
00:50:08,990 --> 00:50:12,290
this is stupid load a constant value

1422
00:50:10,790 --> 00:50:14,058
into register<font color="#E5E5E5"> write that register value</font>

1423
00:50:12,290 --> 00:50:15,440
to the protected<font color="#CCCCCC"> i/o port</font><font color="#E5E5E5"> and then</font>

1424
00:50:14,059 --> 00:50:17,059
immediately verify that the register

1425
00:50:15,440 --> 00:50:19,220
contains the same constant value<font color="#E5E5E5"> that</font>

1426
00:50:17,059 --> 00:50:20,839
they just<font color="#E5E5E5"> loaded</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> it and the reason</font>

1427
00:50:19,220 --> 00:50:22,279
they have<font color="#E5E5E5"> to do that is because we could</font>

1428
00:50:20,839 --> 00:50:24,020
just<font color="#CCCCCC"> jump into the boot</font><font color="#E5E5E5"> code right</font>

1429
00:50:22,280 --> 00:50:25,549
<font color="#E5E5E5">before the port right</font><font color="#CCCCCC"> happens but</font><font color="#E5E5E5"> with</font>

1430
00:50:24,020 --> 00:50:28,220
our own value<font color="#E5E5E5"> so we could write whatever</font>

1431
00:50:25,549 --> 00:50:29,509
<font color="#E5E5E5">we wanted that's really tedious but</font>

1432
00:50:28,220 --> 00:50:31,609
they've got a bunch of macros<font color="#E5E5E5"> to</font><font color="#CCCCCC"> this</font>

1433
00:50:29,510 --> 00:50:33,200
kind of stuff for<font color="#E5E5E5"> them</font><font color="#CCCCCC"> the problem</font>

1434
00:50:31,609 --> 00:50:34,520
though is<font color="#CCCCCC"> that the OS</font><font color="#E5E5E5"> is you know it's</font>

1435
00:50:33,200 --> 00:50:35,899
variable<font color="#E5E5E5"> it's not constant it's not</font>

1436
00:50:34,520 --> 00:50:38,390
something<font color="#CCCCCC"> that they can hard code the</font>

1437
00:50:35,900 --> 00:50:39,680
the right supports one day<font color="#CCCCCC"> third</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> up</font>

1438
00:50:38,390 --> 00:50:41,420
it's not something they can hard code<font color="#E5E5E5"> so</font>

1439
00:50:39,680 --> 00:50:42,890
we set<font color="#E5E5E5"> our own</font><font color="#CCCCCC"> register value and</font><font color="#E5E5E5"> just</font>

1440
00:50:41,420 --> 00:50:45,980
jump<font color="#E5E5E5"> into the boot code right before the</font>

1441
00:50:42,890 --> 00:50:47,150
port 1<font color="#CCCCCC"> D IO right and then after that</font>

1442
00:50:45,980 --> 00:50:49,220
<font color="#E5E5E5">still control away through</font>

1443
00:50:47,150 --> 00:50:51,860
variety of means you<font color="#CCCCCC"> know interrupts</font>

1444
00:50:49,220 --> 00:50:56,899
whatever there is<font color="#CCCCCC"> a method that's</font><font color="#E5E5E5"> even</font>

1445
00:50:51,860 --> 00:50:58,160
dumber though<font color="#CCCCCC"> the easy eighty</font><font color="#E5E5E5"> as I said</font>

1446
00:50:56,900 --> 00:50:59,870
is backwards compatibility<font color="#E5E5E5"> for running</font>

1447
00:50:58,160 --> 00:51:02,779
codons<font color="#CCCCCC"> eighty mode</font><font color="#E5E5E5"> the easy eighty mode</font>

1448
00:50:59,870 --> 00:51:04,069
<font color="#E5E5E5">is called</font><font color="#CCCCCC"> a DL mode</font><font color="#E5E5E5"> and even better any</font>

1449
00:51:02,780 --> 00:51:06,440
individual struction come on<font color="#CCCCCC"> in</font><font color="#E5E5E5"> a DI</font>

1450
00:51:04,070 --> 00:51:07,820
mode or in<font color="#E5E5E5"> z80 mode and</font><font color="#CCCCCC"> in ADL mode you</font>

1451
00:51:06,440 --> 00:51:10,100
can call a subroutine<font color="#E5E5E5"> that runs in CA</font>

1452
00:51:07,820 --> 00:51:12,440
<font color="#E5E5E5">mode and then have that return back</font><font color="#CCCCCC"> into</font>

1453
00:51:10,100 --> 00:51:13,850
a<font color="#E5E5E5"> DL mode and even better than</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> if</font>

1454
00:51:12,440 --> 00:51:15,290
when<font color="#E5E5E5"> you're in that</font><font color="#CCCCCC"> zne mode subroutine</font>

1455
00:51:13,850 --> 00:51:19,390
you can have<font color="#CCCCCC"> eighty</font><font color="#E5E5E5"> instructions such as</font>

1456
00:51:15,290 --> 00:51:21,560
<font color="#E5E5E5">the 16-bit i/o port</font><font color="#CCCCCC"> in-and-out rights</font><font color="#E5E5E5"> so</font>

1457
00:51:19,390 --> 00:51:23,299
surely worth of protection on these

1458
00:51:21,560 --> 00:51:26,870
<font color="#CCCCCC">privilege these protected I</font><font color="#E5E5E5"> Oh ports</font>

1459
00:51:23,300 --> 00:51:30,160
works in both<font color="#CCCCCC"> ADL mode and z80 mode or</font>

1460
00:51:26,870 --> 00:51:36,200
<font color="#E5E5E5">you would think but no no it does not</font>

1461
00:51:30,160 --> 00:51:39,200
so all you have<font color="#CCCCCC"> to do - all you have to</font>

1462
00:51:36,200 --> 00:51:40,430
do is just switch temporarily<font color="#E5E5E5"> nauseating</font>

1463
00:51:39,200 --> 00:51:46,069
boat and do the right<font color="#CCCCCC"> all you have</font><font color="#E5E5E5"> to do</font>

1464
00:51:40,430 --> 00:51:47,750
so it<font color="#E5E5E5"> just calls a GED code that is on</font>

1465
00:51:46,070 --> 00:51:50,480
line 31<font color="#E5E5E5"> does the right and then returns</font>

1466
00:51:47,750 --> 00:51:51,920
<font color="#E5E5E5">back to</font><font color="#CCCCCC"> ADL mode so to effectively</font>

1467
00:51:50,480 --> 00:51:54,110
negate the protection we just write a

1468
00:51:51,920 --> 00:51:56,300
really really high upper bound to the

1469
00:51:54,110 --> 00:51:57,640
privileged range<font color="#E5E5E5"> or fourth as</font><font color="#CCCCCC"> the</font>

1470
00:51:56,300 --> 00:52:01,130
<font color="#E5E5E5">privileged range something like</font><font color="#CCCCCC"> efi</font>

1471
00:51:57,640 --> 00:52:03,799
whatever and<font color="#E5E5E5"> that effectively turns it</font>

1472
00:52:01,130 --> 00:52:05,240
off<font color="#E5E5E5"> someone really ought</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be fired</font>

1473
00:52:03,800 --> 00:52:06,890
over<font color="#CCCCCC"> that because</font><font color="#E5E5E5"> that's such a huge</font>

1474
00:52:05,240 --> 00:52:10,759
oversight I just I can't<font color="#CCCCCC"> even I can't</font>

1475
00:52:06,890 --> 00:52:12,350
even<font color="#E5E5E5"> these models are</font><font color="#CCCCCC"> actually less</font>

1476
00:52:10,760 --> 00:52:14,450
secure than<font color="#CCCCCC"> the ones from 20 years ago</font>

1477
00:52:12,350 --> 00:52:17,660
<font color="#E5E5E5">and they</font><font color="#CCCCCC"> were actually</font><font color="#E5E5E5"> trying to improve</font>

1478
00:52:14,450 --> 00:52:19,879
upon<font color="#E5E5E5"> the security you</font><font color="#CCCCCC"> know my</font><font color="#E5E5E5"> opinion</font>

1479
00:52:17,660 --> 00:52:21,830
the original unlock protection<font color="#CCCCCC"> used on</font>

1480
00:52:19,880 --> 00:52:23,150
the 83 plus<font color="#E5E5E5"> and 84 plus series is</font>

1481
00:52:21,830 --> 00:52:25,069
actually<font color="#CCCCCC"> perfect as</font><font color="#E5E5E5"> long as they were to</font>

1482
00:52:23,150 --> 00:52:27,710
stay on top of code related exploits

1483
00:52:25,070 --> 00:52:30,740
with but they didn't do<font color="#CCCCCC"> that so we have</font>

1484
00:52:27,710 --> 00:52:32,960
the exploits<font color="#E5E5E5"> that we have as</font><font color="#CCCCCC"> far as this</font>

1485
00:52:30,740 --> 00:52:35,479
<font color="#CCCCCC">protection of the i/o port protection is</font>

1486
00:52:32,960 --> 00:52:37,550
<font color="#E5E5E5">likely in the ASIC just like before</font><font color="#CCCCCC"> and</font>

1487
00:52:35,480 --> 00:52:40,640
can't be<font color="#E5E5E5"> fixed through software updates</font>

1488
00:52:37,550 --> 00:52:42,650
<font color="#CCCCCC">and the fact that they actually reuse</font>

1489
00:52:40,640 --> 00:52:44,960
the original<font color="#CCCCCC"> Asetek to</font><font color="#E5E5E5"> make the</font><font color="#CCCCCC"> TDA</font><font color="#E5E5E5"> 4</font><font color="#CCCCCC"> +</font>

1490
00:52:42,650 --> 00:52:46,310
C Silver Edition<font color="#E5E5E5"> and use that crazy port</font>

1491
00:52:44,960 --> 00:52:48,440
21 workaround which slows it down

1492
00:52:46,310 --> 00:52:49,940
instead<font color="#CCCCCC"> of simply disabling it or making</font>

1493
00:52:48,440 --> 00:52:51,950
a minor tweak<font color="#E5E5E5"> today stick to disable it</font>

1494
00:52:49,940 --> 00:52:53,690
<font color="#E5E5E5">that leads</font><font color="#CCCCCC"> me to</font><font color="#E5E5E5"> believe</font><font color="#CCCCCC"> that making</font>

1495
00:52:51,950 --> 00:52:56,299
<font color="#E5E5E5">even minor changes to the ASIC is cost</font>

1496
00:52:53,690 --> 00:52:57,950
<font color="#CCCCCC">prohibitive so this is</font><font color="#E5E5E5"> really dumb</font>

1497
00:52:56,300 --> 00:52:59,810
exploits probably going to stay for a

1498
00:52:57,950 --> 00:53:00,399
long time but<font color="#CCCCCC"> just in case</font><font color="#E5E5E5"> it's not</font>

1499
00:52:59,810 --> 00:53:04,119
there<font color="#E5E5E5"> are</font>

1500
00:53:00,400 --> 00:53:07,180
other ways<font color="#E5E5E5"> I really like this way</font><font color="#CCCCCC"> to</font>

1501
00:53:04,119 --> 00:53:09,579
<font color="#CCCCCC">hope</font><font color="#E5E5E5"> to keep it and just</font><font color="#CCCCCC"> to bring things</font>

1502
00:53:07,180 --> 00:53:11,019
full circle<font color="#E5E5E5"> there is one new model</font>

1503
00:53:09,579 --> 00:53:12,849
called<font color="#CCCCCC"> the TIG too advanced which is</font>

1504
00:53:11,019 --> 00:53:15,848
really<font color="#CCCCCC"> just</font><font color="#E5E5E5"> a ti-84 plus non silver</font>

1505
00:53:12,849 --> 00:53:19,509
<font color="#CCCCCC">edition without the 2.5</font><font color="#E5E5E5"> millimeter</font><font color="#CCCCCC"> i/o</font>

1506
00:53:15,849 --> 00:53:21,220
port<font color="#CCCCCC"> I</font><font color="#E5E5E5"> took that port off this model is</font>

1507
00:53:19,509 --> 00:53:22,180
European only and<font color="#E5E5E5"> very locked down</font>

1508
00:53:21,220 --> 00:53:24,160
compared to<font color="#E5E5E5"> the others</font>

1509
00:53:22,180 --> 00:53:25,538
so no more assembly program execution no

1510
00:53:24,160 --> 00:53:28,089
more flash applications transferred<font color="#E5E5E5"> via</font>

1511
00:53:25,539 --> 00:53:29,920
PC<font color="#CCCCCC"> you know you can</font><font color="#E5E5E5"> only have</font>

1512
00:53:28,089 --> 00:53:32,828
applications<font color="#E5E5E5"> built into the OS and they</font>

1513
00:53:29,920 --> 00:53:34,180
put<font color="#E5E5E5"> in an LED that</font><font color="#CCCCCC"> blinks during tests</font>

1514
00:53:32,829 --> 00:53:36,369
or exams<font color="#CCCCCC"> so you know it's in that</font>

1515
00:53:34,180 --> 00:53:38,140
restricted mode<font color="#E5E5E5"> they put that in place</font>

1516
00:53:36,369 --> 00:53:42,789
<font color="#CCCCCC">of the two point five millimeter IO port</font>

1517
00:53:38,140 --> 00:53:44,529
so how do we hack this<font color="#CCCCCC"> thing well the</font>

1518
00:53:42,789 --> 00:53:45,660
obvious<font color="#E5E5E5"> thing is to resort to the</font>

1519
00:53:44,529 --> 00:53:48,730
original<font color="#CCCCCC"> tid 2 hex</font>

1520
00:53:45,660 --> 00:53:52,480
<font color="#CCCCCC">wear whose OS even after all these years</font>

1521
00:53:48,730 --> 00:53:55,630
still<font color="#CCCCCC"> pretty similar</font><font color="#E5E5E5"> to this one so we</font>

1522
00:53:52,480 --> 00:53:57,670
look<font color="#E5E5E5"> at ran backups that's normally</font>

1523
00:53:55,630 --> 00:53:59,079
<font color="#E5E5E5">something that happens over the 2.5</font>

1524
00:53:57,670 --> 00:54:02,680
millimeter<font color="#E5E5E5"> i/o port which we no longer</font>

1525
00:53:59,079 --> 00:54:04,569
have on this<font color="#CCCCCC"> model but unbeknownst</font><font color="#E5E5E5"> the</font>

1526
00:54:02,680 --> 00:54:09,129
most people<font color="#E5E5E5"> ran backups actually do work</font>

1527
00:54:04,569 --> 00:54:10,480
over USB<font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> no link software</font>

1528
00:54:09,130 --> 00:54:11,529
<font color="#E5E5E5">supports it because we never really</font>

1529
00:54:10,480 --> 00:54:13,420
bothered<font color="#CCCCCC"> to look nobody knew it was</font>

1530
00:54:11,529 --> 00:54:15,730
<font color="#CCCCCC">there but the codes been</font><font color="#E5E5E5"> there it is</font>

1531
00:54:13,420 --> 00:54:18,779
<font color="#E5E5E5">there it to handle it it's been there a</font>

1532
00:54:15,730 --> 00:54:20,589
long time<font color="#E5E5E5"> and we just</font><font color="#CCCCCC"> never knew it so I</font>

1533
00:54:18,779 --> 00:54:22,509
did come<font color="#E5E5E5"> up</font><font color="#CCCCCC"> with a specially crafted</font>

1534
00:54:20,589 --> 00:54:24,640
<font color="#E5E5E5">memory back up with corrupted real</font>

1535
00:54:22,509 --> 00:54:25,960
variables just<font color="#CCCCCC"> like 282</font><font color="#E5E5E5"> as well as a</font>

1536
00:54:24,640 --> 00:54:28,239
script<font color="#CCCCCC"> to</font><font color="#E5E5E5"> transfer this memory</font><font color="#CCCCCC"> backup</font>

1537
00:54:25,960 --> 00:54:29,589
from<font color="#E5E5E5"> a PC and it does work you can get</font>

1538
00:54:28,239 --> 00:54:32,650
code execution<font color="#E5E5E5"> on you can even unlock</font>

1539
00:54:29,589 --> 00:54:34,569
flash<font color="#E5E5E5"> but then they wouldn't released</font>

1540
00:54:32,650 --> 00:54:36,220
another model yet another<font color="#E5E5E5"> model</font><font color="#CCCCCC"> called</font>

1541
00:54:34,569 --> 00:54:38,109
the<font color="#CCCCCC"> ti-84 plus T which is just the</font>

1542
00:54:36,220 --> 00:54:40,238
Silver Edition version<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> t2</font>

1543
00:54:38,109 --> 00:54:42,549
advanced except they removed the backup

1544
00:54:40,239 --> 00:54:44,380
functionality from<font color="#E5E5E5"> it so that</font>

1545
00:54:42,549 --> 00:54:46,809
<font color="#E5E5E5">functionality is probably gonna</font>

1546
00:54:44,380 --> 00:54:57,190
disappear<font color="#E5E5E5"> soon from</font><font color="#CCCCCC"> the T</font><font color="#E5E5E5"> ie to</font><font color="#CCCCCC"> advanced</font>

1547
00:54:46,809 --> 00:54:59,650
as well thank you sorry so overall<font color="#E5E5E5"> where</font>

1548
00:54:57,190 --> 00:55:01,779
do we go from here<font color="#E5E5E5"> well there's still</font>

1549
00:54:59,650 --> 00:55:03,519
<font color="#E5E5E5">plenty of exploits to release endless</font>

1550
00:55:01,779 --> 00:55:05,559
for the<font color="#CCCCCC"> ti-nspire is constantly being</font>

1551
00:55:03,519 --> 00:55:07,569
fought by<font color="#CCCCCC"> Ti</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> help is</font><font color="#E5E5E5"> always</font>

1552
00:55:05,559 --> 00:55:09,009
appreciated there and as I<font color="#E5E5E5"> just went</font>

1553
00:55:07,569 --> 00:55:11,079
over<font color="#E5E5E5"> we need a mess the privilege code</font>

1554
00:55:09,009 --> 00:55:12,999
execution for the<font color="#CCCCCC"> tid to</font><font color="#E5E5E5"> advance</font><font color="#CCCCCC"> in ta 4</font>

1555
00:55:11,079 --> 00:55:14,559
<font color="#E5E5E5">plus T that's kind of an old-school</font>

1556
00:55:12,999 --> 00:55:16,390
challenge that's still outstanding<font color="#CCCCCC"> I</font>

1557
00:55:14,559 --> 00:55:17,769
still get emails from people really

1558
00:55:16,390 --> 00:55:19,720
wanting code execution on<font color="#CCCCCC"> that thing and</font>

1559
00:55:17,769 --> 00:55:21,430
it's<font color="#CCCCCC"> not a particularly complex problem</font>

1560
00:55:19,720 --> 00:55:23,859
to<font color="#E5E5E5"> solve so somebody just needs to do it</font>

1561
00:55:21,430 --> 00:55:26,919
<font color="#CCCCCC">I I don't really</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> all the time these</font>

1562
00:55:23,859 --> 00:55:29,109
<font color="#CCCCCC">days so maybe when you can do it and</font>

1563
00:55:26,920 --> 00:55:31,390
then of<font color="#CCCCCC"> course there's the TI u 4 plus C</font>

1564
00:55:29,109 --> 00:55:33,160
<font color="#CCCCCC">e family</font><font color="#E5E5E5"> where we need to stay</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> top of</font>

1565
00:55:31,390 --> 00:55:34,868
<font color="#E5E5E5">new developments new hardware revisions</font>

1566
00:55:33,160 --> 00:55:36,609
new OS<font color="#E5E5E5"> versions new ASIC versions</font>

1567
00:55:34,869 --> 00:55:38,109
because<font color="#E5E5E5"> you never know when CI is going</font>

1568
00:55:36,609 --> 00:55:39,489
to make a manufacturing change or an OS

1569
00:55:38,109 --> 00:55:41,739
update<font color="#E5E5E5"> it's gonna have a big</font><font color="#CCCCCC"> impact</font><font color="#E5E5E5"> on</font>

1570
00:55:39,489 --> 00:55:43,210
the community<font color="#E5E5E5"> and more than once I've</font>

1571
00:55:41,739 --> 00:55:45,579
seen<font color="#E5E5E5"> them release OS updates that have</font>

1572
00:55:43,210 --> 00:55:46,720
very serious bugs in them<font color="#E5E5E5"> that mess up</font>

1573
00:55:45,579 --> 00:55:48,700
programs that have<font color="#CCCCCC"> been around and</font>

1574
00:55:46,720 --> 00:55:49,868
<font color="#E5E5E5">working fine</font><font color="#CCCCCC"> for decades</font><font color="#E5E5E5"> so if we don't</font>

1575
00:55:48,700 --> 00:55:51,308
<font color="#CCCCCC">let</font><font color="#E5E5E5"> them know about</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> things and the</font>

1576
00:55:49,869 --> 00:55:55,589
technical details about<font color="#E5E5E5"> what went wrong</font>

1577
00:55:51,309 --> 00:56:00,099
<font color="#CCCCCC">and how to fix</font><font color="#E5E5E5"> it you</font><font color="#CCCCCC"> know who else will</font>

1578
00:55:55,589 --> 00:56:01,930
so in conclusion<font color="#E5E5E5"> hopefully you've seen</font>

1579
00:56:00,099 --> 00:56:04,029
<font color="#CCCCCC">out calculators can be good</font><font color="#E5E5E5"> educational</font>

1580
00:56:01,930 --> 00:56:05,230
tools they there's<font color="#E5E5E5"> simple devices</font><font color="#CCCCCC"> on the</font>

1581
00:56:04,029 --> 00:56:06,700
surface but<font color="#E5E5E5"> they're actually</font><font color="#CCCCCC"> incredibly</font>

1582
00:56:05,230 --> 00:56:09,099
complex and<font color="#CCCCCC"> they have a really rich</font>

1583
00:56:06,700 --> 00:56:10,390
history behind them they show up early

1584
00:56:09,099 --> 00:56:11,680
in people's lives like<font color="#E5E5E5"> high school or</font>

1585
00:56:10,390 --> 00:56:13,328
sometimes even earlier for me was middle

1586
00:56:11,680 --> 00:56:15,038
<font color="#CCCCCC">school</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> communities surrounding</font>

1587
00:56:13,329 --> 00:56:16,499
<font color="#E5E5E5">them</font><font color="#CCCCCC"> I have to deal with the same issues</font>

1588
00:56:15,039 --> 00:56:19,450
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> see in other communities like</font>

1589
00:56:16,499 --> 00:56:20,828
things like exploit research<font color="#E5E5E5"> legal and</font>

1590
00:56:19,450 --> 00:56:22,598
ethical issues<font color="#E5E5E5"> surrounding what you work</font>

1591
00:56:20,829 --> 00:56:24,730
on and<font color="#CCCCCC"> what's your release</font><font color="#E5E5E5"> and when and</font>

1592
00:56:22,599 --> 00:56:27,220
why<font color="#CCCCCC"> and you learn an awful lot about</font>

1593
00:56:24,730 --> 00:56:28,630
embedded devices<font color="#E5E5E5"> both high</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> low level</font>

1594
00:56:27,220 --> 00:56:30,549
programming<font color="#CCCCCC"> reverse</font><font color="#E5E5E5"> engineering game</font>

1595
00:56:28,630 --> 00:56:31,029
<font color="#E5E5E5">programming you know just a little bit</font>

1596
00:56:30,549 --> 00:56:33,059
of everything

1597
00:56:31,029 --> 00:56:35,230
I really cannot recommend<font color="#E5E5E5"> them</font><font color="#CCCCCC"> enough</font>

1598
00:56:33,059 --> 00:56:36,700
<font color="#E5E5E5">they</font><font color="#CCCCCC"> get a lot</font><font color="#E5E5E5"> of people started in</font>

1599
00:56:35,230 --> 00:56:38,230
programming and<font color="#E5E5E5"> reverse engineering</font>

1600
00:56:36,700 --> 00:56:39,640
<font color="#CCCCCC">including me</font><font color="#E5E5E5"> so whether you're</font><font color="#CCCCCC"> just</font>

1601
00:56:38,230 --> 00:56:40,599
<font color="#CCCCCC">starting</font><font color="#E5E5E5"> out or you just want to dig</font>

1602
00:56:39,640 --> 00:56:45,009
<font color="#CCCCCC">deeper</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> this kind</font><font color="#E5E5E5"> of thing</font>

1603
00:56:40,599 --> 00:56:46,269
I definitely<font color="#CCCCCC"> recommend it</font><font color="#E5E5E5"> also don't let</font>

1604
00:56:45,009 --> 00:56:47,319
<font color="#E5E5E5">legal threats intimidate you</font>

1605
00:56:46,269 --> 00:56:48,779
you know if you're pissing somebody off

1606
00:56:47,319 --> 00:56:51,009
you're<font color="#CCCCCC"> probably doing</font><font color="#E5E5E5"> something right</font>

1607
00:56:48,779 --> 00:56:53,349
standing<font color="#E5E5E5"> up</font><font color="#CCCCCC"> to that kind of intimidation</font>

1608
00:56:51,009 --> 00:56:54,910
is how real change<font color="#E5E5E5"> happens and</font><font color="#CCCCCC"> how you</font>

1609
00:56:53,349 --> 00:56:55,299
can<font color="#E5E5E5"> make a difference so</font><font color="#CCCCCC"> if you're</font>

1610
00:56:54,910 --> 00:56:57,670
scared

1611
00:56:55,299 --> 00:56:59,799
<font color="#E5E5E5">reach out ask somebody to</font><font color="#CCCCCC"> get help</font>

1612
00:56:57,670 --> 00:57:01,269
people like the<font color="#CCCCCC"> e</font><font color="#E5E5E5"> FF actually want to</font>

1613
00:56:59,799 --> 00:57:02,710
<font color="#CCCCCC">help you there are</font><font color="#E5E5E5"> people out</font><font color="#CCCCCC"> there like</font>

1614
00:57:01,269 --> 00:57:04,959
<font color="#E5E5E5">that can and will</font><font color="#CCCCCC"> help you if you need</font>

1615
00:57:02,710 --> 00:57:07,119
<font color="#CCCCCC">it but first you have to</font><font color="#E5E5E5"> do something</font>

1616
00:57:04,960 --> 00:57:08,680
<font color="#E5E5E5">that requires that you get help so don't</font>

1617
00:57:07,119 --> 00:57:10,539
<font color="#E5E5E5">fret don't put something</font><font color="#CCCCCC"> off because of</font>

1618
00:57:08,680 --> 00:57:12,069
what might happen just<font color="#CCCCCC"> do it and</font><font color="#E5E5E5"> then</font>

1619
00:57:10,539 --> 00:57:14,259
see what happens<font color="#CCCCCC"> what you can do with it</font>

1620
00:57:12,069 --> 00:57:15,940
<font color="#E5E5E5">from there</font>

1621
00:57:14,259 --> 00:57:17,319
we've squashed a lot of problems in the

1622
00:57:15,940 --> 00:57:20,440
calculator community over<font color="#CCCCCC"> the</font><font color="#E5E5E5"> years but</font>

1623
00:57:17,319 --> 00:57:22,150
it's it's<font color="#CCCCCC"> never over the community</font><font color="#E5E5E5"> needs</font>

1624
00:57:20,440 --> 00:57:24,400
your help or your kids help or your

1625
00:57:22,150 --> 00:57:25,630
students help or your<font color="#E5E5E5"> neighbors or</font>

1626
00:57:24,400 --> 00:57:26,770
whatever the case<font color="#E5E5E5"> may be what your</font>

1627
00:57:25,630 --> 00:57:28,600
friends

1628
00:57:26,770 --> 00:57:30,040
there's always<font color="#E5E5E5"> something more</font><font color="#CCCCCC"> to do and</font>

1629
00:57:28,600 --> 00:57:31,299
even<font color="#E5E5E5"> in this talk I've mentioned some of</font>

1630
00:57:30,040 --> 00:57:33,820
<font color="#E5E5E5">the security related things that still</font>

1631
00:57:31,300 --> 00:57:34,840
<font color="#CCCCCC">need to be done</font><font color="#E5E5E5"> it's really important</font>

1632
00:57:33,820 --> 00:57:36,520
that<font color="#E5E5E5"> this kind of research to continue</font>

1633
00:57:34,840 --> 00:57:38,470
<font color="#CCCCCC">not just in this</font><font color="#E5E5E5"> community but</font><font color="#CCCCCC"> just</font>

1634
00:57:36,520 --> 00:57:39,280
speaking<font color="#E5E5E5"> generally</font><font color="#CCCCCC"> so you know</font><font color="#E5E5E5"> if you</font>

1635
00:57:38,470 --> 00:57:43,060
like this kind<font color="#CCCCCC"> of thing</font>

1636
00:57:39,280 --> 00:57:45,100
stick with<font color="#E5E5E5"> it I my contact information</font>

1637
00:57:43,060 --> 00:57:47,350
on the<font color="#CCCCCC"> screen there</font><font color="#E5E5E5"> if you're interested</font>

1638
00:57:45,100 --> 00:57:49,240
<font color="#E5E5E5">I'd love to talk to you</font><font color="#CCCCCC"> or hear from</font><font color="#E5E5E5"> you</font>

1639
00:57:47,350 --> 00:57:52,620
whether it's about<font color="#CCCCCC"> anything I discussed</font>

1640
00:57:49,240 --> 00:57:56,939
here or just<font color="#E5E5E5"> something unrelated so</font>

1641
00:57:52,620 --> 00:57:56,940
thanks for your<font color="#E5E5E5"> time that's it</font>

1642
00:58:01,290 --> 00:58:04,210
thank you

1643
00:58:02,650 --> 00:58:10,890
well who<font color="#CCCCCC"> wants</font><font color="#E5E5E5"> to start</font><font color="#CCCCCC"> with the first</font>

1644
00:58:04,210 --> 00:58:10,890
question<font color="#CCCCCC"> you don't have to be shy and</font>

1645
00:58:19,950 --> 00:58:24,129
<font color="#CCCCCC">with disclosure how have you tried</font>

1646
00:58:22,420 --> 00:58:26,260
disclosing this to TI are you just

1647
00:58:24,130 --> 00:58:28,150
dropping them<font color="#CCCCCC"> is zero days or</font><font color="#E5E5E5"> are you</font>

1648
00:58:26,260 --> 00:58:29,680
try and responsible disclosure<font color="#CCCCCC"> if it has</font>

1649
00:58:28,150 --> 00:58:31,480
to do<font color="#E5E5E5"> with actual OS bugs</font><font color="#CCCCCC"> I'd telling</font>

1650
00:58:29,680 --> 00:58:32,290
<font color="#E5E5E5">them about it because I don't because</font>

1651
00:58:31,480 --> 00:58:33,610
you know<font color="#CCCCCC"> thank you</font>

1652
00:58:32,290 --> 00:58:35,800
who wants to write code<font color="#CCCCCC"> for something</font>

1653
00:58:33,610 --> 00:58:36,970
that's you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> constantly breaking so</font>

1654
00:58:35,800 --> 00:58:38,440
if it's something like that<font color="#E5E5E5"> I'll tell</font>

1655
00:58:36,970 --> 00:58:40,000
<font color="#E5E5E5">them if it has to do</font><font color="#CCCCCC"> with unlock</font>

1656
00:58:38,440 --> 00:58:44,230
exploits I don't tell them because<font color="#E5E5E5"> I</font>

1657
00:58:40,000 --> 00:58:45,250
don't<font color="#E5E5E5"> want them to fix it</font><font color="#CCCCCC"> they it's got</font>

1658
00:58:44,230 --> 00:58:47,020
you know<font color="#E5E5E5"> it's calling the console</font>

1659
00:58:45,250 --> 00:58:48,280
community or<font color="#CCCCCC"> anything</font><font color="#E5E5E5"> else there they</font>

1660
00:58:47,020 --> 00:58:49,990
have their<font color="#CCCCCC"> own interests</font><font color="#E5E5E5"> they have their</font>

1661
00:58:48,280 --> 00:58:52,240
own responsibilities<font color="#E5E5E5"> they need to lock</font>

1662
00:58:49,990 --> 00:58:53,560
it down<font color="#E5E5E5"> in a certain way and but we want</font>

1663
00:58:52,240 --> 00:58:55,540
to be able to<font color="#E5E5E5"> do what we want with</font><font color="#CCCCCC"> it we</font>

1664
00:58:53,560 --> 00:58:57,880
want<font color="#CCCCCC"> to be able to write our own OSS I</font>

1665
00:58:55,540 --> 00:58:59,860
mean just think<font color="#E5E5E5"> of the things people</font>

1666
00:58:57,880 --> 00:59:01,150
<font color="#E5E5E5">have learned just</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> just from being</font>

1667
00:58:59,860 --> 00:59:03,160
able to write an OS for this thing just

1668
00:59:01,150 --> 00:59:05,770
some really good concepts you know I've

1669
00:59:03,160 --> 00:59:07,029
<font color="#E5E5E5">written</font><font color="#CCCCCC"> OSS for it I've written ones</font>

1670
00:59:05,770 --> 00:59:08,680
that are<font color="#E5E5E5"> actually you can actually dual</font>

1671
00:59:07,030 --> 00:59:10,750
<font color="#E5E5E5">boot the TI OS and you know in the other</font>

1672
00:59:08,680 --> 00:59:13,240
OS<font color="#E5E5E5"> there's all sorts of things you can</font>

1673
00:59:10,750 --> 00:59:15,580
do and<font color="#E5E5E5"> learn from and you</font><font color="#CCCCCC"> can use these</font>

1674
00:59:13,240 --> 00:59:18,069
calculators<font color="#E5E5E5"> in all sorts of other all</font>

1675
00:59:15,580 --> 00:59:19,360
sorts of other environments<font color="#CCCCCC"> in</font><font color="#E5E5E5"> fact I</font>

1676
00:59:18,070 --> 00:59:20,920
have a project<font color="#CCCCCC"> coming up USP related</font>

1677
00:59:19,360 --> 00:59:22,120
project coming<font color="#E5E5E5"> up I'm going to use the</font>

1678
00:59:20,920 --> 00:59:23,620
<font color="#E5E5E5">calculator</font><font color="#CCCCCC"> for because I just</font><font color="#E5E5E5"> don't</font>

1679
00:59:22,120 --> 00:59:24,790
<font color="#CCCCCC">trust the computer</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> communicate with</font>

1680
00:59:23,620 --> 00:59:27,819
the device I<font color="#CCCCCC"> will cook it up</font><font color="#E5E5E5"> to a</font>

1681
00:59:24,790 --> 00:59:30,610
<font color="#E5E5E5">calculator</font><font color="#CCCCCC"> because it's much simpler</font><font color="#E5E5E5"> so</font>

1682
00:59:27,820 --> 00:59:33,130
um<font color="#E5E5E5"> I think the benefits of being able to</font>

1683
00:59:30,610 --> 00:59:35,890
do this<font color="#CCCCCC"> the far outweighs their</font>

1684
00:59:33,130 --> 00:59:38,590
<font color="#E5E5E5">interests so I just don't care they when</font>

1685
00:59:35,890 --> 00:59:39,759
<font color="#E5E5E5">you disclose them to them do they when</font>

1686
00:59:38,590 --> 00:59:41,170
they release new

1687
00:59:39,760 --> 00:59:42,940
operating systems and<font color="#E5E5E5"> things like that</font>

1688
00:59:41,170 --> 00:59:44,530
<font color="#E5E5E5">do</font><font color="#CCCCCC"> they actually honestly document there</font>

1689
00:59:42,940 --> 00:59:48,550
were security<font color="#E5E5E5"> vulnerabilities or is it</font>

1690
00:59:44,530 --> 00:59:49,720
just<font color="#E5E5E5"> bug fixes</font><font color="#CCCCCC"> they consider it</font><font color="#E5E5E5"> I'm not</font>

1691
00:59:48,550 --> 00:59:50,740
sure what they consider I<font color="#E5E5E5"> don't think</font>

1692
00:59:49,720 --> 00:59:52,569
it's every bug fixes or an actual

1693
00:59:50,740 --> 00:59:55,990
<font color="#E5E5E5">security issue</font><font color="#CCCCCC"> I never actually you know</font>

1694
00:59:52,570 --> 00:59:57,310
I don't I don't<font color="#E5E5E5"> you know I don't blog</font>

1695
00:59:55,990 --> 00:59:59,109
about<font color="#E5E5E5"> it or anything I just released the</font>

1696
00:59:57,310 --> 01:00:00,009
code<font color="#E5E5E5"> they find out about it</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> they</font>

1697
00:59:59,109 --> 01:00:02,619
look<font color="#E5E5E5"> at the code and</font><font color="#CCCCCC"> the reverse</font>

1698
01:00:00,010 --> 01:00:04,450
engineer it<font color="#E5E5E5"> so you know it's it's not</font>

1699
01:00:02,619 --> 01:00:05,980
<font color="#CCCCCC">something that</font><font color="#E5E5E5"> it's not something</font>

1700
01:00:04,450 --> 01:00:07,270
anybody goes to<font color="#CCCCCC"> them and says hey hey</font>

1701
01:00:05,980 --> 01:00:08,380
just so you<font color="#CCCCCC"> know we did</font><font color="#E5E5E5"> this we're gonna</font>

1702
01:00:07,270 --> 01:00:10,450
<font color="#E5E5E5">keep using it until you do</font><font color="#CCCCCC"> something</font>

1703
01:00:08,380 --> 01:00:12,310
about<font color="#E5E5E5"> it it's not like that so I don't</font>

1704
01:00:10,450 --> 01:00:21,310
<font color="#CCCCCC">know if that answers your yeah yeah it</font>

1705
01:00:12,310 --> 01:00:22,660
does<font color="#E5E5E5"> cool things other question okay one</font>

1706
01:00:21,310 --> 01:00:30,279
last<font color="#E5E5E5"> question and then we're gonna close</font>

1707
01:00:22,660 --> 01:00:32,020
this<font color="#CCCCCC"> door comments another</font><font color="#E5E5E5"> question you</font>

1708
01:00:30,280 --> 01:00:33,820
<font color="#CCCCCC">you put in there that</font><font color="#E5E5E5"> somebody had to</font><font color="#CCCCCC"> be</font>

1709
01:00:32,020 --> 01:00:35,740
fired for<font color="#E5E5E5"> doing some kind of stuff</font><font color="#CCCCCC"> I</font>

1710
01:00:33,820 --> 01:00:37,810
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> think anybody should</font><font color="#E5E5E5"> be fired for</font>

1711
01:00:35,740 --> 01:00:39,490
<font color="#CCCCCC">making mistake</font><font color="#E5E5E5"> yeah that's true that's</font>

1712
01:00:37,810 --> 01:00:40,720
true<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> kind of I was kind of</font><font color="#CCCCCC"> it's</font>

1713
01:00:39,490 --> 01:00:42,250
<font color="#E5E5E5">kind of a tongue-in-cheek thing</font><font color="#CCCCCC"> I nobody</font>

1714
01:00:40,720 --> 01:00:44,100
<font color="#E5E5E5">actually has been fired and I'm not</font>

1715
01:00:42,250 --> 01:00:50,560
referring<font color="#CCCCCC"> to anybody in particular</font><font color="#E5E5E5"> so</font>

1716
01:00:44,100 --> 01:00:52,509
yeah but I agree but they they<font color="#CCCCCC"> really</font>

1717
01:00:50,560 --> 01:00:56,369
it's something<font color="#E5E5E5"> that they really should</font>

1718
01:00:52,510 --> 01:00:58,480
<font color="#E5E5E5">have thought</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> it's it's something so I</font>

1719
01:00:56,369 --> 01:01:00,520
could<font color="#CCCCCC"> get into the specifics about the</font>

1720
01:00:58,480 --> 01:01:01,840
about<font color="#E5E5E5"> the security</font><font color="#CCCCCC"> on it but they they</font>

1721
01:01:00,520 --> 01:01:04,420
<font color="#CCCCCC">really just made some mistakes</font><font color="#E5E5E5"> with that</font>

1722
01:01:01,840 --> 01:01:06,430
not only<font color="#E5E5E5"> did they not even bother</font><font color="#CCCCCC"> to</font>

1723
01:01:04,420 --> 01:01:10,030
have the<font color="#CCCCCC"> protection work in that</font><font color="#E5E5E5"> z80</font>

1724
01:01:06,430 --> 01:01:11,290
mode<font color="#E5E5E5"> but they their whole making their</font>

1725
01:01:10,030 --> 01:01:12,670
whole their whole scheme for dealing

1726
01:01:11,290 --> 01:01:14,920
<font color="#E5E5E5">with</font><font color="#CCCCCC"> IO port rights is just completely</font>

1727
01:01:12,670 --> 01:01:16,240
wrong it's completely<font color="#CCCCCC"> wrong</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> you</font>

1728
01:01:14,920 --> 01:01:17,530
know like<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mentioned that you could</font>

1729
01:01:16,240 --> 01:01:19,118
<font color="#CCCCCC">just</font><font color="#E5E5E5"> jump right into the boot code after</font>

1730
01:01:17,530 --> 01:01:21,880
they do one<font color="#E5E5E5"> of those rights that's just</font>

1731
01:01:19,119 --> 01:01:23,470
that's just<font color="#E5E5E5"> wrong you know as I said</font>

1732
01:01:21,880 --> 01:01:25,630
<font color="#E5E5E5">before the protection before the earlier</font>

1733
01:01:23,470 --> 01:01:26,618
protection even now and<font color="#E5E5E5"> they use</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and</font>

1734
01:01:25,630 --> 01:01:28,359
<font color="#E5E5E5">they actually use</font><font color="#CCCCCC"> that protection</font><font color="#E5E5E5"> on the</font>

1735
01:01:26,619 --> 01:01:31,000
<font color="#E5E5E5">t-80 to advance two to four plus</font><font color="#CCCCCC"> T it</font>

1736
01:01:28,359 --> 01:01:33,819
actually is it actually<font color="#E5E5E5"> is perfect and</font>

1737
01:01:31,000 --> 01:01:35,140
<font color="#E5E5E5">if they would would stick</font><font color="#CCCCCC"> with it they</font>

1738
01:01:33,820 --> 01:01:36,640
would actually it would actually be

1739
01:01:35,140 --> 01:01:38,740
<font color="#CCCCCC">hundred percent secure their flaw was</font>

1740
01:01:36,640 --> 01:01:40,720
<font color="#CCCCCC">that they went to</font><font color="#E5E5E5"> that flat memory model</font>

1741
01:01:38,740 --> 01:01:43,359
<font color="#E5E5E5">and they just didn't they just didn't</font>

1742
01:01:40,720 --> 01:01:46,569
think<font color="#E5E5E5"> through all</font><font color="#CCCCCC"> those</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> so but</font>

1743
01:01:43,359 --> 01:01:47,380
yes I do agree I'm not serious<font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't</font>

1744
01:01:46,570 --> 01:01:49,810
<font color="#E5E5E5">think</font><font color="#CCCCCC"> anyone should</font><font color="#E5E5E5"> be fired</font>

1745
01:01:47,380 --> 01:01:51,290
since watching this later<font color="#E5E5E5"> please I don't</font>

1746
01:01:49,810 --> 01:01:53,370
want anybody fired

1747
01:01:51,290 --> 01:01:55,520
<font color="#E5E5E5">all right thank you</font><font color="#CCCCCC"> very much</font><font color="#E5E5E5"> for your</font>

1748
01:01:53,370 --> 01:02:00,020
talk<font color="#CCCCCC"> and let's</font><font color="#E5E5E5"> move on</font><font color="#CCCCCC"> to next</font>

1749
01:01:55,520 --> 01:02:00,020
[Applause]

