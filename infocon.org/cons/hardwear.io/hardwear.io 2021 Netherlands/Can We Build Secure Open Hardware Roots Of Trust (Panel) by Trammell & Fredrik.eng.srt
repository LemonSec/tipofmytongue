1
00:00:03,120 --> 00:00:04,240
all right

2
00:00:04,240 --> 00:00:05,680
well i hope you all have enjoyed the

3
00:00:05,680 --> 00:00:08,960
first day of hardware io it's been

4
00:00:08,960 --> 00:00:10,480
fun to be back in the in person

5
00:00:10,480 --> 00:00:12,160
conference um

6
00:00:12,160 --> 00:00:14,240
so i'm charminal hudson with the lower

7
00:00:14,240 --> 00:00:17,760
layer labs and i am not an expert in

8
00:00:17,760 --> 00:00:20,480
hardware or security but i

9
00:00:20,480 --> 00:00:23,439
uh i pretend to be and i really enjoy

10
00:00:23,439 --> 00:00:25,199
thinking about

11
00:00:25,199 --> 00:00:28,160
secure things and how to build

12
00:00:28,160 --> 00:00:30,160
things that are open and you know good

13
00:00:30,160 --> 00:00:32,479
for the user and with me today is uh

14
00:00:32,479 --> 00:00:33,920
frederick strom

15
00:00:33,920 --> 00:00:37,840
uh stromberg from um uh mobad vpn

16
00:00:37,840 --> 00:00:39,680
and we're gonna be talking about

17
00:00:39,680 --> 00:00:42,000
can we build uh

18
00:00:42,000 --> 00:00:43,760
what's it can we build secure open

19
00:00:43,760 --> 00:00:46,399
hardware routes of trust

20
00:00:46,399 --> 00:00:49,120
so before we try to get a yes or no

21
00:00:49,120 --> 00:00:52,559
answer to that um i think we have to ask

22
00:00:52,559 --> 00:00:54,559
sort of a bigger question which is

23
00:00:54,559 --> 00:00:56,000
when we say secure

24
00:00:56,000 --> 00:00:57,840
we always have to ask under what threat

25
00:00:57,840 --> 00:01:00,239
model you know what are the uh the

26
00:01:00,239 --> 00:01:01,840
attackers going after what are we trying

27
00:01:01,840 --> 00:01:03,199
to protect

28
00:01:03,199 --> 00:01:05,119
uh we also have to ask um what do we

29
00:01:05,119 --> 00:01:06,400
mean by open

30
00:01:06,400 --> 00:01:09,119
you know is it open if it's uh using

31
00:01:09,119 --> 00:01:12,000
some proprietary uh asic

32
00:01:12,000 --> 00:01:15,280
cell library is it open if it has some

33
00:01:15,280 --> 00:01:17,600
hardware blobs is it open if the data

34
00:01:17,600 --> 00:01:19,600
sheet for the microcontroller is in

35
00:01:19,600 --> 00:01:21,840
de-aid

36
00:01:21,840 --> 00:01:23,520
we also have to ask

37
00:01:23,520 --> 00:01:24,840
questions about what do we mean by

38
00:01:24,840 --> 00:01:27,200
hardware you know asic is a type of

39
00:01:27,200 --> 00:01:30,400
hardware fpgas are types of hardware

40
00:01:30,400 --> 00:01:33,040
for doing a microcontroller with some

41
00:01:33,040 --> 00:01:35,200
secure element or are we trying to build

42
00:01:35,200 --> 00:01:38,960
something with an x86 and a tpm

43
00:01:38,960 --> 00:01:40,320
we also need to think about what do we

44
00:01:40,320 --> 00:01:41,759
mean by build

45
00:01:41,759 --> 00:01:43,040
you know is this something where we're

46
00:01:43,040 --> 00:01:45,439
writing code is this something where we

47
00:01:45,439 --> 00:01:46,320
are

48
00:01:46,320 --> 00:01:48,799
uh writing verilog is this something

49
00:01:48,799 --> 00:01:50,960
where we're designing pcbs

50
00:01:50,960 --> 00:01:52,720
are we fabbing chips

51
00:01:52,720 --> 00:01:56,960
and how do we verify the results of it

52
00:01:58,240 --> 00:02:00,560
i guess we also need to ask who is we

53
00:02:00,560 --> 00:02:01,680
you know

54
00:02:01,680 --> 00:02:04,240
is it the hobbyist community is it

55
00:02:04,240 --> 00:02:07,280
security researchers is it intel is it

56
00:02:07,280 --> 00:02:09,840
tsmc

57
00:02:10,560 --> 00:02:13,040
we should probably think about uh

58
00:02:13,040 --> 00:02:15,680
you know can for what cost did we stop

59
00:02:15,680 --> 00:02:17,520
to think if we should

60
00:02:17,520 --> 00:02:19,120
and since we're questioning everything

61
00:02:19,120 --> 00:02:20,160
up there

62
00:02:20,160 --> 00:02:22,560
we should also ask what is a root of

63
00:02:22,560 --> 00:02:25,280
trust anyway and why should we care

64
00:02:25,280 --> 00:02:28,000
and so i'd love to ask uh frederick that

65
00:02:28,000 --> 00:02:29,680
question what is a root of trust and why

66
00:02:29,680 --> 00:02:31,840
do you care

67
00:02:31,840 --> 00:02:34,560
what is trust and why do i care

68
00:02:34,560 --> 00:02:36,640
um is that what's the other question or

69
00:02:36,640 --> 00:02:38,080
what is the root of trust oh what's the

70
00:02:38,080 --> 00:02:40,080
druid trust um

71
00:02:40,080 --> 00:02:41,120
i mean

72
00:02:41,120 --> 00:02:43,040
for starters what is trust i think that

73
00:02:43,040 --> 00:02:46,959
trust implies some type of vulnerability

74
00:02:46,959 --> 00:02:50,080
there's an expectation that

75
00:02:50,080 --> 00:02:53,360
a system or an organization or

76
00:02:53,360 --> 00:02:55,840
a piece of software

77
00:02:55,840 --> 00:02:58,640
you are exposing yourself to that

78
00:02:58,640 --> 00:03:01,120
entity and relying on it to act in your

79
00:03:01,120 --> 00:03:02,879
interests going forward

80
00:03:02,879 --> 00:03:06,319
and so um and that connects to like

81
00:03:06,319 --> 00:03:07,680
trustworthiness

82
00:03:07,680 --> 00:03:08,560
how

83
00:03:08,560 --> 00:03:11,760
is something worthy of my trust and what

84
00:03:11,760 --> 00:03:14,319
is the nature of the vulnerability i'm

85
00:03:14,319 --> 00:03:16,480
exposing is it my personal information

86
00:03:16,480 --> 00:03:20,799
is it the security of uh

87
00:03:21,120 --> 00:03:24,879
a door is it yeah and um root of trust

88
00:03:24,879 --> 00:03:26,400
is sort of

89
00:03:26,400 --> 00:03:27,519
this

90
00:03:27,519 --> 00:03:29,760
uh

91
00:03:30,480 --> 00:03:33,519
axiom or

92
00:03:33,519 --> 00:03:36,560
root of the the tree of things that were

93
00:03:36,560 --> 00:03:38,000
need to trust and

94
00:03:38,000 --> 00:03:39,440
by having a

95
00:03:39,440 --> 00:03:41,440
a very trustworthy

96
00:03:41,440 --> 00:03:42,720
trust anchor

97
00:03:42,720 --> 00:03:45,760
uh we can then build upon that and then

98
00:03:45,760 --> 00:03:48,879
sort of expand the tcb in more

99
00:03:48,879 --> 00:03:50,879
trustworthy ways that's how i think

100
00:03:50,879 --> 00:03:52,799
about it

101
00:03:52,799 --> 00:03:54,480
so if we want to bring that back to

102
00:03:54,480 --> 00:03:56,000
practicality

103
00:03:56,000 --> 00:03:57,280
uh

104
00:03:57,280 --> 00:04:00,959
why is it why is it important that we

105
00:04:00,959 --> 00:04:02,879
have roots of trust and why is it

106
00:04:02,879 --> 00:04:05,040
important that they be open

107
00:04:05,040 --> 00:04:07,360
well i i think that privacy relies on

108
00:04:07,360 --> 00:04:09,360
the trustworthiness of our digital

109
00:04:09,360 --> 00:04:10,400
systems

110
00:04:10,400 --> 00:04:12,720
and

111
00:04:12,879 --> 00:04:15,519
trust is facilitated by security so to

112
00:04:15,519 --> 00:04:17,440
some extent i think that security

113
00:04:17,440 --> 00:04:19,440
systems security technologies exist to

114
00:04:19,440 --> 00:04:22,000
facilitate trust so reproducible builds

115
00:04:22,000 --> 00:04:23,120
for instance

116
00:04:23,120 --> 00:04:25,919
uh is a wonderful concept that allows us

117
00:04:25,919 --> 00:04:28,400
to sort of distrust in the sense of

118
00:04:28,400 --> 00:04:29,520
requiring

119
00:04:29,520 --> 00:04:31,520
less trust in the build system because

120
00:04:31,520 --> 00:04:33,280
we can have multiple build systems then

121
00:04:33,280 --> 00:04:34,800
as long as they all come to the same

122
00:04:34,800 --> 00:04:37,040
conclusion regarding the checksum of the

123
00:04:37,040 --> 00:04:39,040
artifact we just built

124
00:04:39,040 --> 00:04:40,639
even if an individual system has been

125
00:04:40,639 --> 00:04:42,560
compromised

126
00:04:42,560 --> 00:04:44,639
they are less uh

127
00:04:44,639 --> 00:04:46,400
they're more trustworthy in a sense but

128
00:04:46,400 --> 00:04:49,600
they we are less exposed to them because

129
00:04:49,600 --> 00:04:51,360
a compromise can be more easily

130
00:04:51,360 --> 00:04:54,000
discovered and i think there are tons of

131
00:04:54,000 --> 00:04:55,600
these

132
00:04:55,600 --> 00:04:56,400
technologies

133
00:04:56,400 --> 00:04:57,520
and and

134
00:04:57,520 --> 00:04:59,919
especially to make it a little

135
00:04:59,919 --> 00:05:02,560
more philosophical perhaps especially as

136
00:05:02,560 --> 00:05:03,840
uh

137
00:05:03,840 --> 00:05:05,680
computers are becoming extensions of our

138
00:05:05,680 --> 00:05:07,680
minds uh

139
00:05:07,680 --> 00:05:10,000
how do we

140
00:05:10,000 --> 00:05:13,600
how can we use security to facilitate

141
00:05:13,600 --> 00:05:16,479
trust and how can we

142
00:05:16,479 --> 00:05:18,240
entities that are very powerful how can

143
00:05:18,240 --> 00:05:20,639
we increase the

144
00:05:20,639 --> 00:05:22,400
transparency and accountability of those

145
00:05:22,400 --> 00:05:23,520
systems

146
00:05:23,520 --> 00:05:26,719
and perhaps

147
00:05:27,039 --> 00:05:30,000
distribute the power or decrease the our

148
00:05:30,000 --> 00:05:31,919
exposure to those systems

149
00:05:31,919 --> 00:05:34,479
that sounds nice to me

150
00:05:34,479 --> 00:05:36,720
so i know molvad has been

151
00:05:36,720 --> 00:05:38,560
sponsoring quite a few

152
00:05:38,560 --> 00:05:40,000
firmware projects

153
00:05:40,000 --> 00:05:42,960
around building uh open firmware for

154
00:05:42,960 --> 00:05:45,199
servers and

155
00:05:45,199 --> 00:05:48,720
you know as a way to try to bring

156
00:05:48,720 --> 00:05:53,039
trustability and accountability um uh

157
00:05:53,039 --> 00:05:54,960
you know for the services that that you

158
00:05:54,960 --> 00:05:57,120
all run um

159
00:05:57,120 --> 00:05:57,919
and

160
00:05:57,919 --> 00:05:59,840
do you think that that is

161
00:05:59,840 --> 00:06:01,039
uh

162
00:06:01,039 --> 00:06:03,680
that having that sort of transparency

163
00:06:03,680 --> 00:06:06,000
is going to

164
00:06:06,000 --> 00:06:07,759
be more important

165
00:06:07,759 --> 00:06:10,639
is is that going to require openness or

166
00:06:10,639 --> 00:06:11,840
do you think that this is going to be

167
00:06:11,840 --> 00:06:14,400
something feasible to do with um

168
00:06:14,400 --> 00:06:16,319
with closed systems

169
00:06:16,319 --> 00:06:19,280
i think that there is a tension to some

170
00:06:19,280 --> 00:06:21,039
i mean first of all

171
00:06:21,039 --> 00:06:23,520
uh i would love for all infrastructure

172
00:06:23,520 --> 00:06:27,199
to be transparent uh i would love to be

173
00:06:27,199 --> 00:06:29,520
able to reduce the state of the system

174
00:06:29,520 --> 00:06:31,919
or the cryptographic identity and

175
00:06:31,919 --> 00:06:35,199
authentication of a system to some

176
00:06:35,199 --> 00:06:38,000
checksum that represents uh i mean not

177
00:06:38,000 --> 00:06:39,919
the hardware obviously because

178
00:06:39,919 --> 00:06:42,479
that's well of course you can take the

179
00:06:42,479 --> 00:06:44,880
rtl and you can hatch it then

180
00:06:44,880 --> 00:06:46,960
if you run it on fpga but ultimately

181
00:06:46,960 --> 00:06:48,639
there's an asic summer

182
00:06:48,639 --> 00:06:50,000
and and you don't know anything about

183
00:06:50,000 --> 00:06:52,240
the doping or the electro-crystal

184
00:06:52,240 --> 00:06:53,360
migration

185
00:06:53,360 --> 00:06:56,080
stuff for yeah but if we just look at

186
00:06:56,080 --> 00:06:57,759
the software uh

187
00:06:57,759 --> 00:06:59,599
you can reduce the entire state of the

188
00:06:59,599 --> 00:07:02,000
system and the possible state

189
00:07:02,000 --> 00:07:04,319
transitions of that system to to some

190
00:07:04,319 --> 00:07:06,800
kind of statement and i think that's

191
00:07:06,800 --> 00:07:11,199
something we should aspire to do um yeah

192
00:07:11,199 --> 00:07:14,240
yeah bunny had a wonderful quote uh

193
00:07:14,240 --> 00:07:16,319
in his talk about building open source

194
00:07:16,319 --> 00:07:18,800
secure hardware that uh you can't hash

195
00:07:18,800 --> 00:07:21,120
hardware which is

196
00:07:21,120 --> 00:07:23,360
really unfortunate it's really hard to

197
00:07:23,360 --> 00:07:25,520
know what are we running and this gets

198
00:07:25,520 --> 00:07:26,960
to the question about when we build

199
00:07:26,960 --> 00:07:28,160
something

200
00:07:28,160 --> 00:07:31,280
how do we know that it's uh

201
00:07:31,280 --> 00:07:35,440
what we what we think it is that um

202
00:07:35,520 --> 00:07:38,720
you mentioned reproducible builds as a

203
00:07:38,720 --> 00:07:40,800
important part of our software supply

204
00:07:40,800 --> 00:07:41,599
chain

205
00:07:41,599 --> 00:07:43,039
um

206
00:07:43,039 --> 00:07:45,520
but in terms of the hardware

207
00:07:45,520 --> 00:07:48,160
it it seems that um

208
00:07:48,160 --> 00:07:50,160
it really seems to me that if we don't

209
00:07:50,160 --> 00:07:51,759
have that openness

210
00:07:51,759 --> 00:07:54,319
uh we're not going to be able to know

211
00:07:54,319 --> 00:07:57,280
uh you know how much we can trust it so

212
00:07:57,280 --> 00:07:58,960
you know where we get a

213
00:07:58,960 --> 00:08:00,560
uh

214
00:08:00,560 --> 00:08:02,080
you know a certificate from a vendor

215
00:08:02,080 --> 00:08:04,000
that says that they have uh they have

216
00:08:04,000 --> 00:08:05,360
signed this cert

217
00:08:05,360 --> 00:08:06,960
you know that that tells us really

218
00:08:06,960 --> 00:08:08,240
nothing about the state of the hardware

219
00:08:08,240 --> 00:08:09,680
that's underneath it

220
00:08:09,680 --> 00:08:11,360
um

221
00:08:11,360 --> 00:08:14,080
and i'm also really uh

222
00:08:14,080 --> 00:08:16,160
you know curious about uh

223
00:08:16,160 --> 00:08:17,840
your views on

224
00:08:17,840 --> 00:08:20,560
you know where we draw the line on what

225
00:08:20,560 --> 00:08:22,960
is hardware you know

226
00:08:22,960 --> 00:08:27,199
in terms of the asic to fpga to pcb to

227
00:08:27,199 --> 00:08:30,080
you know uh server running open firmware

228
00:08:30,080 --> 00:08:32,399
where do you think the hardware line is

229
00:08:32,399 --> 00:08:33,360
uh

230
00:08:33,360 --> 00:08:34,559
trick question

231
00:08:34,559 --> 00:08:37,279
i don't know but uh but i think that we

232
00:08:37,279 --> 00:08:38,559
can certainly

233
00:08:38,559 --> 00:08:40,479
uh

234
00:08:40,479 --> 00:08:42,719
to some extent okay let's say that

235
00:08:42,719 --> 00:08:44,080
there's a piece of hardware there's some

236
00:08:44,080 --> 00:08:46,880
sock you have to trust

237
00:08:46,880 --> 00:08:48,959
and maybe you don't really know

238
00:08:48,959 --> 00:08:49,920
or can't

239
00:08:49,920 --> 00:08:51,920
look at what the logic case actually

240
00:08:51,920 --> 00:08:54,959
implement but but at least if if the

241
00:08:54,959 --> 00:08:57,360
specification is open you can reason

242
00:08:57,360 --> 00:08:58,560
about its

243
00:08:58,560 --> 00:09:00,640
security properties which is definitely

244
00:09:00,640 --> 00:09:02,560
better than not being able to do that

245
00:09:02,560 --> 00:09:03,920
and

246
00:09:03,920 --> 00:09:05,680
i think that

247
00:09:05,680 --> 00:09:07,680
getting away from the idea that

248
00:09:07,680 --> 00:09:10,640
or or fully embracing the idea that our

249
00:09:10,640 --> 00:09:13,200
socks and main boards are already

250
00:09:13,200 --> 00:09:15,920
distributed systems of computers

251
00:09:15,920 --> 00:09:19,279
and uh just saying okay great

252
00:09:19,279 --> 00:09:20,959
how can we do this better

253
00:09:20,959 --> 00:09:22,800
well for starters maybe we shouldn't do

254
00:09:22,800 --> 00:09:24,720
the any uh

255
00:09:24,720 --> 00:09:26,160
private key

256
00:09:26,160 --> 00:09:31,200
ssl stuff calculations in the x86 core

257
00:09:31,200 --> 00:09:32,560
maybe we should do that in a separate

258
00:09:32,560 --> 00:09:34,399
core and then just have a signing oracle

259
00:09:34,399 --> 00:09:37,760
so at least if the attacker gains root

260
00:09:37,760 --> 00:09:39,279
they can't get the private key they can

261
00:09:39,279 --> 00:09:40,640
only do

262
00:09:40,640 --> 00:09:42,720
infinite signing operations which is

263
00:09:42,720 --> 00:09:44,480
slightly better

264
00:09:44,480 --> 00:09:45,760
maybe we should put an audit log in

265
00:09:45,760 --> 00:09:47,519
there too so we have an audit log of all

266
00:09:47,519 --> 00:09:48,880
the

267
00:09:48,880 --> 00:09:50,480
signing operations that have been done

268
00:09:50,480 --> 00:09:52,720
uh and and even and when it comes to the

269
00:09:52,720 --> 00:09:55,279
specs of the asic of course

270
00:09:55,279 --> 00:09:57,440
uh there are different things you can

271
00:09:57,440 --> 00:09:59,279
choose to trust and not trust like if

272
00:09:59,279 --> 00:10:01,519
you say oh we're gonna use a puff a

273
00:10:01,519 --> 00:10:03,680
physically unclonable function

274
00:10:03,680 --> 00:10:04,399
to

275
00:10:04,399 --> 00:10:05,760
have a

276
00:10:05,760 --> 00:10:07,920
use that for the key iteration for some

277
00:10:07,920 --> 00:10:09,200
cryptographic identity and

278
00:10:09,200 --> 00:10:11,680
authentication of a particular chip yeah

279
00:10:11,680 --> 00:10:14,079
then you have to rely on the

280
00:10:14,079 --> 00:10:14,959
the

281
00:10:14,959 --> 00:10:15,760
the

282
00:10:15,760 --> 00:10:18,959
impurities or the the entropy effects in

283
00:10:18,959 --> 00:10:21,440
the the foundry whereas if you instead

284
00:10:21,440 --> 00:10:24,959
say okay we're not going to use a

285
00:10:25,519 --> 00:10:28,079
puff that relies on analog

286
00:10:28,079 --> 00:10:31,120
weird stuff in the process

287
00:10:31,120 --> 00:10:32,720
where instead we're gonna use ring

288
00:10:32,720 --> 00:10:35,040
oscillators and just uh

289
00:10:35,040 --> 00:10:37,680
have fuses uh

290
00:10:37,680 --> 00:10:38,959
that are triggered the first time we

291
00:10:38,959 --> 00:10:41,279
turn the chip on so i think that's

292
00:10:41,279 --> 00:10:45,200
one example of how you can trust less

293
00:10:45,200 --> 00:10:47,839
i really like that example of the

294
00:10:47,839 --> 00:10:50,640
computers being distributed systems um

295
00:10:50,640 --> 00:10:53,200
and there was a point that i made uh uh

296
00:10:53,200 --> 00:10:54,480
when i was complaining about bmc

297
00:10:54,480 --> 00:10:56,480
security that where we have all of these

298
00:10:56,480 --> 00:10:58,079
sort of interconnected pieces that are

299
00:10:58,079 --> 00:10:59,120
talking

300
00:10:59,120 --> 00:11:01,680
and perhaps foolishly trusting each

301
00:11:01,680 --> 00:11:03,519
other

302
00:11:03,519 --> 00:11:06,000
there's been proposals like the uh the

303
00:11:06,000 --> 00:11:08,079
the dice

304
00:11:08,079 --> 00:11:11,200
key derivation system to as a form of

305
00:11:11,200 --> 00:11:14,000
hierarchical roots of trust

306
00:11:14,000 --> 00:11:16,640
or hierarchical trees of trust where

307
00:11:16,640 --> 00:11:18,800
each device attests

308
00:11:18,800 --> 00:11:21,040
to the devices that it's connected to

309
00:11:21,040 --> 00:11:22,560
and all the way up the chain and then

310
00:11:22,560 --> 00:11:25,360
you can form a compound sort of

311
00:11:25,360 --> 00:11:26,720
attestation about the state of the

312
00:11:26,720 --> 00:11:29,839
entire system

313
00:11:30,000 --> 00:11:33,920
and it seems like that uh

314
00:11:34,079 --> 00:11:36,399
that's a really good way of capturing

315
00:11:36,399 --> 00:11:38,560
not just has the

316
00:11:38,560 --> 00:11:40,320
uh what's in the system but also has

317
00:11:40,320 --> 00:11:43,839
anything changed in the system

318
00:11:44,079 --> 00:11:45,360
dice does a really cool thing where it

319
00:11:45,360 --> 00:11:46,720
computes a

320
00:11:46,720 --> 00:11:48,079
a key based on the firmware in the

321
00:11:48,079 --> 00:11:51,680
device so any malicious changes should

322
00:11:51,680 --> 00:11:54,320
change that attestation

323
00:11:54,320 --> 00:11:56,639
do you think that that is

324
00:11:56,639 --> 00:11:57,519
uh

325
00:11:57,519 --> 00:11:59,600
something that we're going to see in

326
00:11:59,600 --> 00:12:02,560
commodity systems anytime soon

327
00:12:02,560 --> 00:12:05,440
i sure hope so i mean the

328
00:12:05,440 --> 00:12:07,519
you know my opinions on oh we have the

329
00:12:07,519 --> 00:12:09,279
same opinion some measure versus

330
00:12:09,279 --> 00:12:11,040
verified boot and where it's needed and

331
00:12:11,040 --> 00:12:13,760
so on but i think i think that i that is

332
00:12:13,760 --> 00:12:15,680
a core idea i think is

333
00:12:15,680 --> 00:12:18,720
really great if you can if your

334
00:12:18,720 --> 00:12:21,040
sock or if your die

335
00:12:21,040 --> 00:12:24,240
has a boot rom in it and the boot rom uh

336
00:12:24,240 --> 00:12:25,760
does the measured boot thing where it

337
00:12:25,760 --> 00:12:27,839
says okay i'm now going to load some

338
00:12:27,839 --> 00:12:29,040
firmware from

339
00:12:29,040 --> 00:12:30,639
spy flash

340
00:12:30,639 --> 00:12:31,519
i

341
00:12:31,519 --> 00:12:34,959
load it into memory hash it

342
00:12:34,959 --> 00:12:36,480
ideally commit that hash to some

343
00:12:36,480 --> 00:12:38,560
separate hardware domain that is only

344
00:12:38,560 --> 00:12:41,200
reset on hard reset of the platform

345
00:12:41,200 --> 00:12:42,399
uh

346
00:12:42,399 --> 00:12:45,279
and and and then you sort of extend the

347
00:12:45,279 --> 00:12:46,160
state

348
00:12:46,160 --> 00:12:47,760
from there so if you

349
00:12:47,760 --> 00:12:48,639
if you

350
00:12:48,639 --> 00:12:50,880
i mean a tpm is completely detached from

351
00:12:50,880 --> 00:12:53,200
the boot chain you it you're relying on

352
00:12:53,200 --> 00:12:56,079
the firmware to actually talk to the tpm

353
00:12:56,079 --> 00:12:58,560
but if so if you can if you have that

354
00:12:58,560 --> 00:13:01,200
measurement uh if you have the measured

355
00:13:01,200 --> 00:13:03,360
boot more sort of it's more

356
00:13:03,360 --> 00:13:06,639
unconditional if it's in the

357
00:13:06,639 --> 00:13:09,519
die in the dai boutron that that might

358
00:13:09,519 --> 00:13:11,440
certainly make things better and as you

359
00:13:11,440 --> 00:13:13,760
said like dice i think that's a that's a

360
00:13:13,760 --> 00:13:15,600
great example where you

361
00:13:15,600 --> 00:13:18,839
you have some unique bird chip

362
00:13:18,839 --> 00:13:21,360
secret uh and you take the hash of the

363
00:13:21,360 --> 00:13:23,519
first stage of the whatever software

364
00:13:23,519 --> 00:13:24,800
you're executing

365
00:13:24,800 --> 00:13:27,360
and that in turn can then hash the next

366
00:13:27,360 --> 00:13:28,959
statements on

367
00:13:28,959 --> 00:13:31,360
and at every stage you

368
00:13:31,360 --> 00:13:35,279
use uh that per or the first stage you

369
00:13:35,279 --> 00:13:38,160
use the chip per chip unique secret

370
00:13:38,160 --> 00:13:40,800
and the hash of the the the first stage

371
00:13:40,800 --> 00:13:42,639
of the firmware uh

372
00:13:42,639 --> 00:13:44,560
in a key duration function to derive the

373
00:13:44,560 --> 00:13:46,959
cryptographic identity or private key

374
00:13:46,959 --> 00:13:48,959
for authentication i think that's

375
00:13:48,959 --> 00:13:52,079
totally the right approach

376
00:13:53,440 --> 00:13:55,360
it seems like a really good balance

377
00:13:55,360 --> 00:13:57,519
between the the user freedom of being

378
00:13:57,519 --> 00:13:59,519
able to update the firmware while also

379
00:13:59,519 --> 00:14:00,639
preserving

380
00:14:00,639 --> 00:14:03,519
the ability to protect secrets

381
00:14:03,519 --> 00:14:05,040
and the really nice thing about that is

382
00:14:05,040 --> 00:14:07,120
it it the size of the secret that you

383
00:14:07,120 --> 00:14:09,760
have to protect is that small on dye

384
00:14:09,760 --> 00:14:12,079
piece

385
00:14:12,320 --> 00:14:15,440
so it becomes more feasible to sort of

386
00:14:15,440 --> 00:14:17,279
you know actually design it into the

387
00:14:17,279 --> 00:14:20,560
system in some way

388
00:14:20,800 --> 00:14:24,160
either with a puff which

389
00:14:24,160 --> 00:14:26,240
you know seems like a promising

390
00:14:26,240 --> 00:14:28,399
capability although

391
00:14:28,399 --> 00:14:30,079
i'm not sure where the patents are right

392
00:14:30,079 --> 00:14:32,240
now as well as some of the research on

393
00:14:32,240 --> 00:14:34,079
them um

394
00:14:34,079 --> 00:14:35,120
uh

395
00:14:35,120 --> 00:14:38,399
but a lot of it also starts to uh run

396
00:14:38,399 --> 00:14:40,240
into the threat model where you know if

397
00:14:40,240 --> 00:14:42,800
you have fuses uh and your adversary has

398
00:14:42,800 --> 00:14:46,240
a uh electron microscope

399
00:14:46,240 --> 00:14:48,000
you know that's uh

400
00:14:48,000 --> 00:14:49,600
that's not wonderful

401
00:14:49,600 --> 00:14:51,040
um

402
00:14:51,040 --> 00:14:53,920
unless you use uh uh electro crystal

403
00:14:53,920 --> 00:14:55,040
migration

404
00:14:55,040 --> 00:14:57,279
right you know some of the phase change

405
00:14:57,279 --> 00:14:59,680
sort of things um definitely can help

406
00:14:59,680 --> 00:15:00,800
um

407
00:15:00,800 --> 00:15:01,920
so

408
00:15:01,920 --> 00:15:03,600
uh

409
00:15:03,600 --> 00:15:04,720
the the other place where the threat

410
00:15:04,720 --> 00:15:06,160
model starts to come into where this

411
00:15:06,160 --> 00:15:08,399
sort of segues into is what is a

412
00:15:08,399 --> 00:15:10,480
what does physical access mean

413
00:15:10,480 --> 00:15:13,519
that um you know where uh if the threat

414
00:15:13,519 --> 00:15:15,279
model you know includes an adversary who

415
00:15:15,279 --> 00:15:17,519
has hands on the device it seems there's

416
00:15:17,519 --> 00:15:18,880
a lot of different scales you know just

417
00:15:18,880 --> 00:15:21,760
here today we've we've had folks um uh

418
00:15:21,760 --> 00:15:23,920
carving the tops off the titan chips to

419
00:15:23,920 --> 00:15:26,959
uh put a probe on them which is a really

420
00:15:26,959 --> 00:15:28,480
cool attack

421
00:15:28,480 --> 00:15:30,079
but as they pointed out

422
00:15:30,079 --> 00:15:31,440
it's a little beyond sort of the

423
00:15:31,440 --> 00:15:34,480
ordinary threat model

424
00:15:35,600 --> 00:15:36,720
are you

425
00:15:36,720 --> 00:15:38,800
optimistic that we can we can protect

426
00:15:38,800 --> 00:15:42,160
against uh uh lesser attacks than that

427
00:15:42,160 --> 00:15:44,240
lesser attacks than which one yeah than

428
00:15:44,240 --> 00:15:46,720
uh decapping and uh listening for side

429
00:15:46,720 --> 00:15:49,120
channels yeah i think so but i mean uh

430
00:15:49,120 --> 00:15:50,959
that's not my field of expertise but i

431
00:15:50,959 --> 00:15:53,519
definitely see a a tension

432
00:15:53,519 --> 00:15:54,639
between

433
00:15:54,639 --> 00:15:57,440
the openness and trans or how open

434
00:15:57,440 --> 00:15:59,839
source something is and

435
00:15:59,839 --> 00:16:02,320
physical security because if you

436
00:16:02,320 --> 00:16:03,680
if you um

437
00:16:03,680 --> 00:16:06,639
i mean on the one extreme it's uh

438
00:16:06,639 --> 00:16:08,880
okay say you want to make an asic that

439
00:16:08,880 --> 00:16:11,279
has both passive and active tempered

440
00:16:11,279 --> 00:16:13,040
detection measures and does serious

441
00:16:13,040 --> 00:16:16,480
asian of some key memory based on uh a

442
00:16:16,480 --> 00:16:18,399
sensor triggering

443
00:16:18,399 --> 00:16:19,680
at that point

444
00:16:19,680 --> 00:16:21,279
you definitely don't want to tell the

445
00:16:21,279 --> 00:16:24,000
attacker oh oh over here on the die is

446
00:16:24,000 --> 00:16:25,839
where the sensors are so make sure your

447
00:16:25,839 --> 00:16:27,680
probes are between them

448
00:16:27,680 --> 00:16:28,639
uh

449
00:16:28,639 --> 00:16:31,279
and and uh but

450
00:16:31,279 --> 00:16:32,800
if if we're going for that kind of

451
00:16:32,800 --> 00:16:34,720
design then yeah it's

452
00:16:34,720 --> 00:16:35,839
we're not going to be able to reason

453
00:16:35,839 --> 00:16:36,800
about it

454
00:16:36,800 --> 00:16:40,320
as much uh which is unfortunate so

455
00:16:40,320 --> 00:16:43,040
obviously i mean i i

456
00:16:43,040 --> 00:16:44,560
love the i think

457
00:16:44,560 --> 00:16:46,800
there's a lot

458
00:16:46,800 --> 00:16:48,160
to me

459
00:16:48,160 --> 00:16:50,399
trustworthiness is uh facilitated a lot

460
00:16:50,399 --> 00:16:52,320
by understandability and being able to

461
00:16:52,320 --> 00:16:54,320
reason about the design and if if the

462
00:16:54,320 --> 00:16:56,639
design is not open then you can't and

463
00:16:56,639 --> 00:16:57,839
maybe

464
00:16:57,839 --> 00:16:59,519
the fact that it has

465
00:16:59,519 --> 00:17:02,680
a less stress an open system has

466
00:17:02,680 --> 00:17:05,280
a weaker

467
00:17:05,280 --> 00:17:08,720
threat model for physical threats

468
00:17:08,720 --> 00:17:11,199
maybe we should accept that and say well

469
00:17:11,199 --> 00:17:14,480
the security system should be

470
00:17:14,480 --> 00:17:17,280
consist of a bunch of devices and if

471
00:17:17,280 --> 00:17:19,119
any single device is compromised it

472
00:17:19,119 --> 00:17:21,119
doesn't matter similar to reproducible

473
00:17:21,119 --> 00:17:22,720
bills in the

474
00:17:22,720 --> 00:17:25,679
so in the reproducible scenario we can

475
00:17:25,679 --> 00:17:28,960
detect uh and mitigate the

476
00:17:28,960 --> 00:17:30,080
i mean

477
00:17:30,080 --> 00:17:31,520
a single build system being compromised

478
00:17:31,520 --> 00:17:32,720
doesn't matter

479
00:17:32,720 --> 00:17:35,280
which is nice

480
00:17:35,600 --> 00:17:37,360
yeah your mention of active counter

481
00:17:37,360 --> 00:17:38,320
measures

482
00:17:38,320 --> 00:17:40,320
reminds me of the ibm white paper on

483
00:17:40,320 --> 00:17:44,160
their crypto cards where they have the

484
00:17:44,160 --> 00:17:46,720
battery in the card

485
00:17:46,720 --> 00:17:48,640
that's been surrounded by all sorts of

486
00:17:48,640 --> 00:17:51,280
shielding and temperature sensors and

487
00:17:51,280 --> 00:17:54,480
motion sensors and basically if you if

488
00:17:54,480 --> 00:17:56,480
you look at it wrong it will zeroize the

489
00:17:56,480 --> 00:17:59,120
keys and erase itself

490
00:17:59,120 --> 00:18:02,000
which is perhaps good for

491
00:18:02,000 --> 00:18:04,640
the security but is

492
00:18:04,640 --> 00:18:06,640
absolutely detrimental to sort of the

493
00:18:06,640 --> 00:18:10,080
user modifiability um and

494
00:18:10,080 --> 00:18:12,320
uh

495
00:18:13,120 --> 00:18:15,919
i i don't i have a lot of trouble seeing

496
00:18:15,919 --> 00:18:17,760
good ways to build

497
00:18:17,760 --> 00:18:19,919
systems that have that level of security

498
00:18:19,919 --> 00:18:21,440
while also

499
00:18:21,440 --> 00:18:25,200
uh keeping them open um

500
00:18:25,200 --> 00:18:26,400
and

501
00:18:26,400 --> 00:18:29,039
unless uh much like a bunny is a

502
00:18:29,039 --> 00:18:31,120
precursor it's something where the end

503
00:18:31,120 --> 00:18:33,679
user builds it and seals it themselves

504
00:18:33,679 --> 00:18:34,960
um

505
00:18:34,960 --> 00:18:36,160
uh

506
00:18:36,160 --> 00:18:37,039
and

507
00:18:37,039 --> 00:18:39,360
you know in in that sort of case

508
00:18:39,360 --> 00:18:41,440
uh this ships a lot of responsibility

509
00:18:41,440 --> 00:18:43,039
onto the end user

510
00:18:43,039 --> 00:18:45,280
and i wonder if that's inescapable part

511
00:18:45,280 --> 00:18:48,400
of of openness

512
00:18:48,400 --> 00:18:51,280
i mean there are

513
00:18:51,919 --> 00:18:54,320
i think the the potential to improve the

514
00:18:54,320 --> 00:18:56,400
trustworthiness of our systems is

515
00:18:56,400 --> 00:18:57,440
immense

516
00:18:57,440 --> 00:19:00,080
uh there are tons of opportunities and

517
00:19:00,080 --> 00:19:02,320
and some of them are unrelated to

518
00:19:02,320 --> 00:19:04,799
hardware uh like maybe

519
00:19:04,799 --> 00:19:08,080
let's say you have a device

520
00:19:08,240 --> 00:19:09,679
i don't know

521
00:19:09,679 --> 00:19:10,799
you're

522
00:19:10,799 --> 00:19:13,039
you you have a gpg signing key or

523
00:19:13,039 --> 00:19:14,480
something um

524
00:19:14,480 --> 00:19:17,679
for um software releases uh

525
00:19:17,679 --> 00:19:19,760
and you say well we really really need

526
00:19:19,760 --> 00:19:21,440
to protect this private key

527
00:19:21,440 --> 00:19:24,640
and then you say well are you

528
00:19:24,640 --> 00:19:25,600
are you

529
00:19:25,600 --> 00:19:29,439
actually interested in detecting

530
00:19:30,640 --> 00:19:32,240
usage of the key are you actually

531
00:19:32,240 --> 00:19:35,440
interested in having a a tamper-evident

532
00:19:35,440 --> 00:19:37,600
verifiable audit log of all the

533
00:19:37,600 --> 00:19:40,960
signatures because maybe your attackers

534
00:19:40,960 --> 00:19:42,559
won't attack you if they know that it's

535
00:19:42,559 --> 00:19:44,640
going to be discovered immediately and

536
00:19:44,640 --> 00:19:45,520
that

537
00:19:45,520 --> 00:19:48,240
is why another reason why i really like

538
00:19:48,240 --> 00:19:50,880
transparency logs because

539
00:19:50,880 --> 00:19:52,400
that's a way to

540
00:19:52,400 --> 00:19:55,919
to get transparency around for instance

541
00:19:55,919 --> 00:19:57,840
what are the ssl certificates that have

542
00:19:57,840 --> 00:20:00,720
been created from a particular ca and we

543
00:20:00,720 --> 00:20:03,440
can use that in in software releases as

544
00:20:03,440 --> 00:20:05,840
well of course

545
00:20:05,840 --> 00:20:07,520
in that case it's about shortening the

546
00:20:07,520 --> 00:20:08,720
time from

547
00:20:08,720 --> 00:20:12,000
uh compromise to detection yeah yeah and

548
00:20:12,000 --> 00:20:13,760
that there was a point brought up in the

549
00:20:13,760 --> 00:20:16,799
um uh in the titan talk this morning

550
00:20:16,799 --> 00:20:20,559
that uh the fido counters could be used

551
00:20:20,559 --> 00:20:23,039
to detect

552
00:20:23,039 --> 00:20:25,679
an adversary that has

553
00:20:25,679 --> 00:20:28,240
cloned a chip

554
00:20:28,240 --> 00:20:30,320
it might give them one chance to use it

555
00:20:30,320 --> 00:20:31,919
but it would

556
00:20:31,919 --> 00:20:34,159
at least let you know that something has

557
00:20:34,159 --> 00:20:36,320
has gone wrong

558
00:20:36,320 --> 00:20:38,240
it's also i think interesting how many

559
00:20:38,240 --> 00:20:40,559
of the the talks here

560
00:20:40,559 --> 00:20:42,880
uh have not necessarily been hardware

561
00:20:42,880 --> 00:20:46,400
failures that the titan one with em is

562
00:20:46,400 --> 00:20:50,159
is hardware but the airtag one um

563
00:20:50,159 --> 00:20:51,360
uh

564
00:20:51,360 --> 00:20:52,240
uh

565
00:20:52,240 --> 00:20:54,480
it was glitching software running in the

566
00:20:54,480 --> 00:20:55,520
system

567
00:20:55,520 --> 00:20:56,880
um the

568
00:20:56,880 --> 00:20:58,799
uh the

569
00:20:58,799 --> 00:21:02,400
the medical pump one was a

570
00:21:02,400 --> 00:21:06,240
you know a json parsing error

571
00:21:07,840 --> 00:21:10,320
are we focusing

572
00:21:10,320 --> 00:21:12,400
too much thought on

573
00:21:12,400 --> 00:21:15,039
hardware-based threat models when our

574
00:21:15,039 --> 00:21:16,880
software house is

575
00:21:16,880 --> 00:21:19,760
in such a disarray or built out of such

576
00:21:19,760 --> 00:21:22,158
straw

577
00:21:23,120 --> 00:21:24,559
i don't know it depends on your threat

578
00:21:24,559 --> 00:21:26,879
model

579
00:21:27,120 --> 00:21:30,159
but that is the evergreen answer every

580
00:21:30,159 --> 00:21:32,400
question

581
00:21:32,400 --> 00:21:34,559
i mean

582
00:21:34,559 --> 00:21:35,919
i don't know i think i think yeah we

583
00:21:35,919 --> 00:21:38,080
definitely need a multifaceted approach

584
00:21:38,080 --> 00:21:40,320
uh i think that

585
00:21:40,320 --> 00:21:41,600
if we look at

586
00:21:41,600 --> 00:21:44,490
sorry creativity as a

587
00:21:44,490 --> 00:21:45,760
[Music]

588
00:21:45,760 --> 00:21:47,679
abstract concept it's really just

589
00:21:47,679 --> 00:21:50,960
combining two or more existing things

590
00:21:50,960 --> 00:21:53,120
in new ways and i think

591
00:21:53,120 --> 00:21:54,960
if we

592
00:21:54,960 --> 00:21:57,120
i certainly

593
00:21:57,120 --> 00:21:58,559
my eyes were

594
00:21:58,559 --> 00:22:00,879
uh

595
00:22:01,039 --> 00:22:01,840
like

596
00:22:01,840 --> 00:22:04,640
i got immense insight from reading just

597
00:22:04,640 --> 00:22:05,840
books like

598
00:22:05,840 --> 00:22:09,200
code by petzl and then

599
00:22:09,200 --> 00:22:11,440
computer organization and design

600
00:22:11,440 --> 00:22:14,080
by patterson and hennessy and realizing

601
00:22:14,080 --> 00:22:16,799
wow this is how hardware works and then

602
00:22:16,799 --> 00:22:18,720
just sort of doing away with the idea

603
00:22:18,720 --> 00:22:20,000
that oh we need to execute all the

604
00:22:20,000 --> 00:22:22,080
hardware on this general purpose thing

605
00:22:22,080 --> 00:22:24,400
over here and then what if we just tear

606
00:22:24,400 --> 00:22:27,120
this idea apart and then put things over

607
00:22:27,120 --> 00:22:29,039
here things over here and then you can

608
00:22:29,039 --> 00:22:31,120
just play with how you use the different

609
00:22:31,120 --> 00:22:32,400
cryptographic primitives or

610
00:22:32,400 --> 00:22:34,880
constructions and and you gain new and

611
00:22:34,880 --> 00:22:36,880
interesting security properties

612
00:22:36,880 --> 00:22:38,960
and um

613
00:22:38,960 --> 00:22:40,480
yeah of course i think that a physical

614
00:22:40,480 --> 00:22:42,400
attack is way less likely than a purely

615
00:22:42,400 --> 00:22:43,919
digital attacker

616
00:22:43,919 --> 00:22:45,120
um

617
00:22:45,120 --> 00:22:48,720
but um yeah i i would say in general

618
00:22:48,720 --> 00:22:49,840
um

619
00:22:49,840 --> 00:22:52,159
probably folk i would definitely focus

620
00:22:52,159 --> 00:22:54,400
on mostly on the

621
00:22:54,400 --> 00:22:58,720
purely digital attacker uh yeah

622
00:22:58,960 --> 00:23:00,960
yeah i joke that uh i don't actually

623
00:23:00,960 --> 00:23:02,240
know what people do with computers

624
00:23:02,240 --> 00:23:04,159
because i basically just look at boot

625
00:23:04,159 --> 00:23:05,760
time security so i'm always rebooting

626
00:23:05,760 --> 00:23:09,039
them and digging through firmware um

627
00:23:09,039 --> 00:23:12,960
so my my view as a sort of uh uh

628
00:23:12,960 --> 00:23:15,440
security cosplayer is you know very very

629
00:23:15,440 --> 00:23:18,080
focused on um sort of the low level

630
00:23:18,080 --> 00:23:21,039
attacks and things and

631
00:23:21,039 --> 00:23:22,000
you know

632
00:23:22,000 --> 00:23:24,799
my personal opinion is that uh

633
00:23:24,799 --> 00:23:27,360
as a community we can we can

634
00:23:27,360 --> 00:23:29,200
we can build the best systems that we

635
00:23:29,200 --> 00:23:30,159
can

636
00:23:30,159 --> 00:23:31,919
uh and then hope that the people who

637
00:23:31,919 --> 00:23:33,520
build the operating systems and the

638
00:23:33,520 --> 00:23:35,840
applications on it do a good job of

639
00:23:35,840 --> 00:23:38,080
taking that uh

640
00:23:38,080 --> 00:23:40,240
that uh that that root of trust

641
00:23:40,240 --> 00:23:42,880
uh that we've we've provided and be able

642
00:23:42,880 --> 00:23:44,559
to you know carry the chain of trust

643
00:23:44,559 --> 00:23:46,559
forward um

644
00:23:46,559 --> 00:23:48,080
although at some point yeah we do have

645
00:23:48,080 --> 00:23:49,919
to uh recognize it's it's out of our

646
00:23:49,919 --> 00:23:51,919
hands yeah the i mean the wonderful

647
00:23:51,919 --> 00:23:53,520
thing about computers is that they do

648
00:23:53,520 --> 00:23:55,440
exactly what we tell them to do

649
00:23:55,440 --> 00:23:56,799
unfortunately

650
00:23:56,799 --> 00:23:59,200
uh our ability to just accurately

651
00:23:59,200 --> 00:24:01,200
describe our intentions is an entirely

652
00:24:01,200 --> 00:24:02,400
different matter

653
00:24:02,400 --> 00:24:05,200
and uh but uh the wonderful thing

654
00:24:05,200 --> 00:24:07,679
another wonderful thing is that hey uh

655
00:24:07,679 --> 00:24:08,720
modern

656
00:24:08,720 --> 00:24:10,640
um

657
00:24:10,640 --> 00:24:13,760
programming languages uh they help us

658
00:24:13,760 --> 00:24:16,240
protect memory and

659
00:24:16,240 --> 00:24:19,279
uh compilers like the rust compiler

660
00:24:19,279 --> 00:24:20,960
helps us detect all kinds of errors

661
00:24:20,960 --> 00:24:23,120
before we commit them to

662
00:24:23,120 --> 00:24:25,600
production so um

663
00:24:25,600 --> 00:24:26,640
yeah i mean

664
00:24:26,640 --> 00:24:28,240
on some level it's about managing

665
00:24:28,240 --> 00:24:29,360
complexity and

666
00:24:29,360 --> 00:24:30,840
[Music]

667
00:24:30,840 --> 00:24:33,679
uh yeah i think

668
00:24:33,679 --> 00:24:35,600
uh

669
00:24:35,600 --> 00:24:37,279
things are definitely improving

670
00:24:37,279 --> 00:24:38,640
uh

671
00:24:38,640 --> 00:24:41,279
and the fun thing with the uh

672
00:24:41,279 --> 00:24:44,159
if we decide that fpgas are hardware uh

673
00:24:44,159 --> 00:24:45,840
you know it gives us the flexibility to

674
00:24:45,840 --> 00:24:48,080
move things you know from one level to

675
00:24:48,080 --> 00:24:49,039
the other

676
00:24:49,039 --> 00:24:50,000
um

677
00:24:50,000 --> 00:24:52,559
uh occasionally it does feel uh that

678
00:24:52,559 --> 00:24:54,000
writing verilog we're still somewhat in

679
00:24:54,000 --> 00:24:55,600
the dark ages especially compared to

680
00:24:55,600 --> 00:24:58,159
like the rust compiler that you know is

681
00:24:58,159 --> 00:24:59,919
making sure that we don't do dangerous

682
00:24:59,919 --> 00:25:01,760
things and helping and giving us good

683
00:25:01,760 --> 00:25:04,080
error messages um

684
00:25:04,080 --> 00:25:05,039
uh

685
00:25:05,039 --> 00:25:07,600
but the the that sort of flexibility to

686
00:25:07,600 --> 00:25:10,480
uh to move things around seems like

687
00:25:10,480 --> 00:25:12,400
uh we can

688
00:25:12,400 --> 00:25:15,039
improve the security properties on these

689
00:25:15,039 --> 00:25:17,919
uh on these systems um

690
00:25:17,919 --> 00:25:18,960
and in

691
00:25:18,960 --> 00:25:21,679
uh again my view on the openness is that

692
00:25:21,679 --> 00:25:23,360
uh with the open system we can choose

693
00:25:23,360 --> 00:25:25,200
where we put those where we put those

694
00:25:25,200 --> 00:25:27,120
resources and where we put those um

695
00:25:27,120 --> 00:25:28,880
those capabilities

696
00:25:28,880 --> 00:25:30,640
uh

697
00:25:30,640 --> 00:25:32,000
uh

698
00:25:32,000 --> 00:25:33,200
and

699
00:25:33,200 --> 00:25:34,799
have you uh

700
00:25:34,799 --> 00:25:36,559
have you considered uh trying to do

701
00:25:36,559 --> 00:25:38,640
anything on the um uh the the

702
00:25:38,640 --> 00:25:40,240
do-it-yourself basic

703
00:25:40,240 --> 00:25:42,000
side of things sorry well this question

704
00:25:42,000 --> 00:25:44,960
the um uh moving beyond the fpgas and

705
00:25:44,960 --> 00:25:45,840
actually

706
00:25:45,840 --> 00:25:48,159
putting it into asics

707
00:25:48,159 --> 00:25:50,480
i don't

708
00:25:50,480 --> 00:25:52,559
i mean the the problem

709
00:25:52,559 --> 00:25:54,640
what i love about

710
00:25:54,640 --> 00:25:57,440
the idea of open source uh tool chains

711
00:25:57,440 --> 00:26:00,640
for for fpgas is that well then you

712
00:26:00,640 --> 00:26:01,840
the um

713
00:26:01,840 --> 00:26:03,440
uh

714
00:26:03,440 --> 00:26:06,720
as bonnie says like the or in his talk

715
00:26:06,720 --> 00:26:09,279
about that that the

716
00:26:09,279 --> 00:26:10,799
the

717
00:26:10,799 --> 00:26:12,799
what are they gonna attack uh it's it's

718
00:26:12,799 --> 00:26:14,240
much harder

719
00:26:14,240 --> 00:26:15,520
um

720
00:26:15,520 --> 00:26:18,480
if you have a small series asic uh that

721
00:26:18,480 --> 00:26:20,320
can be attacked in all kinds of ways

722
00:26:20,320 --> 00:26:23,200
whereas if you rely on an ice 40 or an

723
00:26:23,200 --> 00:26:26,240
ecp 5 from lattice or or you rely on

724
00:26:26,240 --> 00:26:28,240
something from silence

725
00:26:28,240 --> 00:26:29,679
and then as you said you move the

726
00:26:29,679 --> 00:26:31,279
hardware around and

727
00:26:31,279 --> 00:26:32,240
uh

728
00:26:32,240 --> 00:26:34,720
was it bunny who said called it hardware

729
00:26:34,720 --> 00:26:36,080
aslr

730
00:26:36,080 --> 00:26:38,240
basically it's not clear to me what

731
00:26:38,240 --> 00:26:40,799
their goal what what the attacker how

732
00:26:40,799 --> 00:26:42,159
the attacker is going to attack it i

733
00:26:42,159 --> 00:26:44,159
mean of course if it's a

734
00:26:44,159 --> 00:26:45,760
an attacker that's physically present

735
00:26:45,760 --> 00:26:49,360
maybe they've compromised the

736
00:26:49,360 --> 00:26:52,080
foundry process or the some part of the

737
00:26:52,080 --> 00:26:54,080
design and say oh i can dump your bit

738
00:26:54,080 --> 00:26:55,039
stream

739
00:26:55,039 --> 00:26:57,760
if i use these pins okay but but if the

740
00:26:57,760 --> 00:27:00,400
attacker is purely digital and there's a

741
00:27:00,400 --> 00:27:02,320
let's say a trng in there or some

742
00:27:02,320 --> 00:27:03,760
signing operation

743
00:27:03,760 --> 00:27:05,120
how does

744
00:27:05,120 --> 00:27:07,679
the the logic has to be really complex

745
00:27:07,679 --> 00:27:10,400
to say oh this is clearly a trnd over

746
00:27:10,400 --> 00:27:12,720
here and i'm going to influence this

747
00:27:12,720 --> 00:27:13,679
somehow

748
00:27:13,679 --> 00:27:16,240
so i think that's nice

749
00:27:16,240 --> 00:27:17,600
yeah i really

750
00:27:17,600 --> 00:27:19,760
love that quote about yeah the fpgas or

751
00:27:19,760 --> 00:27:22,159
the aslr for hardware because it really

752
00:27:22,159 --> 00:27:23,120
does

753
00:27:23,120 --> 00:27:24,480
uh

754
00:27:24,480 --> 00:27:26,799
when he gave the talk at ccc i was

755
00:27:26,799 --> 00:27:28,080
initially

756
00:27:28,080 --> 00:27:28,960
uh

757
00:27:28,960 --> 00:27:30,159
skeptical

758
00:27:30,159 --> 00:27:32,799
that that fpgas could be better for

759
00:27:32,799 --> 00:27:36,080
security than asex um

760
00:27:36,080 --> 00:27:38,640
uh although after after thinking about

761
00:27:38,640 --> 00:27:39,919
it for

762
00:27:39,919 --> 00:27:42,000
some time i'm i'm coming around to his

763
00:27:42,000 --> 00:27:43,200
view

764
00:27:43,200 --> 00:27:45,760
yeah i mean it's it's not it's not uh

765
00:27:45,760 --> 00:27:47,919
it's so apples and oranges a little bit

766
00:27:47,919 --> 00:27:49,039
because the

767
00:27:49,039 --> 00:27:49,840
uh

768
00:27:49,840 --> 00:27:53,039
the physical attacker model is weaker

769
00:27:53,039 --> 00:27:54,880
uh as compared to let's say active

770
00:27:54,880 --> 00:27:56,720
temper evident or temper detection

771
00:27:56,720 --> 00:27:59,600
measures in an asic but but it's yeah

772
00:27:59,600 --> 00:28:00,840
it's different

773
00:28:00,840 --> 00:28:04,159
than if you can architect your system in

774
00:28:04,159 --> 00:28:05,840
a way to

775
00:28:05,840 --> 00:28:07,120
to

776
00:28:07,120 --> 00:28:08,559
get around those

777
00:28:08,559 --> 00:28:11,840
weaker parts then i think that's

778
00:28:11,840 --> 00:28:13,279
that that's definitely what i would

779
00:28:13,279 --> 00:28:15,520
prefer then again i'm

780
00:28:15,520 --> 00:28:19,600
i really like open source so

781
00:28:21,120 --> 00:28:21,840
so

782
00:28:21,840 --> 00:28:23,679
what else what other topics have we not

783
00:28:23,679 --> 00:28:26,640
covered um

784
00:28:32,860 --> 00:28:39,520
[Music]

785
00:28:40,399 --> 00:28:43,279
i don't understand the fpgas at all

786
00:28:43,279 --> 00:28:46,880
so i maybe have a very simple question

787
00:28:46,880 --> 00:28:49,039
question is isn't it possible to have

788
00:28:49,039 --> 00:28:53,200
active tamper measures in fpgas as well

789
00:28:55,440 --> 00:28:58,159
one of bunny's arguments is that the

790
00:28:58,159 --> 00:29:00,720
structure of fpgas makes them a lot

791
00:29:00,720 --> 00:29:02,000
harder to

792
00:29:02,000 --> 00:29:04,240
um

793
00:29:04,320 --> 00:29:06,320
a lot harder to decap successfully

794
00:29:06,320 --> 00:29:07,520
because it

795
00:29:07,520 --> 00:29:09,200
and he had a bunch of photos in his

796
00:29:09,200 --> 00:29:11,679
presentation showing sort of

797
00:29:11,679 --> 00:29:14,240
that the the when they talk about fabric

798
00:29:14,240 --> 00:29:16,960
uh for the interconnect it it's very

799
00:29:16,960 --> 00:29:20,000
stringy and decapinate does lead to

800
00:29:20,000 --> 00:29:21,039
weirdness

801
00:29:21,039 --> 00:29:23,520
the other difference is that all of the

802
00:29:23,520 --> 00:29:26,320
the runtime state is stored in uh in

803
00:29:26,320 --> 00:29:27,679
sram

804
00:29:27,679 --> 00:29:28,480
uh

805
00:29:28,480 --> 00:29:29,279
so

806
00:29:29,279 --> 00:29:31,039
in order to

807
00:29:31,039 --> 00:29:31,919
uh

808
00:29:31,919 --> 00:29:34,000
so you you can't just take photos of the

809
00:29:34,000 --> 00:29:36,000
dye and deduce what's happening you have

810
00:29:36,000 --> 00:29:38,799
to actively measure what is in those in

811
00:29:38,799 --> 00:29:43,120
those um in those cells

812
00:29:44,320 --> 00:29:45,760
and if you

813
00:29:45,760 --> 00:29:48,559
while you're decaping if you if you um

814
00:29:48,559 --> 00:29:51,600
short the fabric you potentially

815
00:29:51,600 --> 00:29:55,840
can disrupt the the power supply to them

816
00:29:55,919 --> 00:29:57,440
do you have any

817
00:29:57,440 --> 00:30:00,080
yeah i mean maybe say that

818
00:30:00,080 --> 00:30:03,440
ultimately an fpga is also it's a very

819
00:30:03,440 --> 00:30:04,880
heterogeneous

820
00:30:04,880 --> 00:30:05,760
chip

821
00:30:05,760 --> 00:30:08,000
you have the zinc for instance which is

822
00:30:08,000 --> 00:30:09,760
a there's an arm hardcore and then

823
00:30:09,760 --> 00:30:12,799
there's fpga fabric but then

824
00:30:12,799 --> 00:30:15,440
fpga fabric itself is contains uh

825
00:30:15,440 --> 00:30:18,000
consists of logic cells and

826
00:30:18,000 --> 00:30:20,880
cells for that are dedicated for memory

827
00:30:20,880 --> 00:30:23,440
and maybe you have some hard blocks

828
00:30:23,440 --> 00:30:24,480
for

829
00:30:24,480 --> 00:30:26,720
acceleration of various things and of

830
00:30:26,720 --> 00:30:28,640
course some of those you have to look at

831
00:30:28,640 --> 00:30:30,880
the specific chip to say well i'm not

832
00:30:30,880 --> 00:30:31,840
sure but

833
00:30:31,840 --> 00:30:34,320
i would assume some of the

834
00:30:34,320 --> 00:30:36,640
more expensive ones from xilinx perhaps

835
00:30:36,640 --> 00:30:39,760
contains um

836
00:30:40,480 --> 00:30:42,640
active tamper detection but then again

837
00:30:42,640 --> 00:30:45,919
that's not in the fpga

838
00:30:45,919 --> 00:30:48,240
substrate that's

839
00:30:48,240 --> 00:30:51,120
but of course you could have a sensor

840
00:30:51,120 --> 00:30:53,200
connected to a pin which is connected to

841
00:30:53,200 --> 00:30:53,919
your

842
00:30:53,919 --> 00:30:55,440
your uh

843
00:30:55,440 --> 00:30:58,080
your fpga logic um

844
00:30:58,080 --> 00:30:59,519
but um

845
00:30:59,519 --> 00:31:04,200
yeah that's that's what i would say

846
00:31:06,240 --> 00:31:07,279
yeah hi

847
00:31:07,279 --> 00:31:08,640
um

848
00:31:08,640 --> 00:31:11,360
i was thinking what are your thoughts on

849
00:31:11,360 --> 00:31:13,120
certification of

850
00:31:13,120 --> 00:31:15,919
open open open source hardware

851
00:31:15,919 --> 00:31:19,039
so something like a device like this i

852
00:31:19,039 --> 00:31:20,559
think it would be nice to have something

853
00:31:20,559 --> 00:31:23,679
like this certified

854
00:31:23,679 --> 00:31:25,519
well i i think the the open source

855
00:31:25,519 --> 00:31:27,679
hardware foundation for instance there

856
00:31:27,679 --> 00:31:30,480
are some certifications i think that are

857
00:31:30,480 --> 00:31:32,480
that are like uh

858
00:31:32,480 --> 00:31:35,200
making some type of uh stamp of approval

859
00:31:35,200 --> 00:31:37,679
on the open source hardwareins of a

860
00:31:37,679 --> 00:31:39,200
given product

861
00:31:39,200 --> 00:31:40,960
um

862
00:31:40,960 --> 00:31:42,480
when it comes to certification of the

863
00:31:42,480 --> 00:31:44,840
security properties

864
00:31:44,840 --> 00:31:47,279
um uh

865
00:31:47,279 --> 00:31:49,360
i don't know i think i think uh

866
00:31:49,360 --> 00:31:51,440
if we can if we can if you look at

867
00:31:51,440 --> 00:31:53,519
security protocols like uh network

868
00:31:53,519 --> 00:31:55,279
protocols like wireguard

869
00:31:55,279 --> 00:31:57,760
uh or other network protocols i think

870
00:31:57,760 --> 00:31:59,919
the really good ones they have

871
00:31:59,919 --> 00:32:01,760
well-defined state machines and the

872
00:32:01,760 --> 00:32:03,039
cryptographic primitives or

873
00:32:03,039 --> 00:32:04,640
cryptographic constructions are

874
00:32:04,640 --> 00:32:06,399
intertwined in such a way that it makes

875
00:32:06,399 --> 00:32:08,559
it really easy to reason about

876
00:32:08,559 --> 00:32:11,200
the state changes you can say oh this is

877
00:32:11,200 --> 00:32:13,760
like it's 400 4 thousand lines of code

878
00:32:13,760 --> 00:32:15,840
versus let's say half a million lines of

879
00:32:15,840 --> 00:32:17,039
code

880
00:32:17,039 --> 00:32:19,200
there his here's the flow of the how the

881
00:32:19,200 --> 00:32:21,519
things are like the

882
00:32:21,519 --> 00:32:23,760
key derivation function and the

883
00:32:23,760 --> 00:32:25,919
uh cryptographic checksum how they are

884
00:32:25,919 --> 00:32:27,039
interlinked

885
00:32:27,039 --> 00:32:30,000
and and i think the same goes for

886
00:32:30,000 --> 00:32:32,559
uh hardware if we if we have a hardware

887
00:32:32,559 --> 00:32:35,200
design where for instance the the the

888
00:32:35,200 --> 00:32:36,480
measurement

889
00:32:36,480 --> 00:32:38,159
uh of the

890
00:32:38,159 --> 00:32:40,640
firmware that is loaded after hard reset

891
00:32:40,640 --> 00:32:43,600
if that's if that measurement is

892
00:32:43,600 --> 00:32:47,120
unconditional because it's in the die

893
00:32:47,120 --> 00:32:48,399
that is a

894
00:32:48,399 --> 00:32:50,240
way better

895
00:32:50,240 --> 00:32:52,720
situation than if we have to

896
00:32:52,720 --> 00:32:55,679
you know trust that measurement happens

897
00:32:55,679 --> 00:32:57,840
in in the firmware that happens to be on

898
00:32:57,840 --> 00:33:00,159
a spy flash

899
00:33:00,159 --> 00:33:01,600
the other issue that you start to run

900
00:33:01,600 --> 00:33:03,440
into with um with things like the fip

901
00:33:03,440 --> 00:33:06,240
certification is a it costs money which

902
00:33:06,240 --> 00:33:08,240
a lot of open hardware doesn't have and

903
00:33:08,240 --> 00:33:09,360
b

904
00:33:09,360 --> 00:33:11,440
you can end up

905
00:33:11,440 --> 00:33:14,080
having to maintain bugs in order to

906
00:33:14,080 --> 00:33:16,320
maintain compliance

907
00:33:16,320 --> 00:33:18,640
that most tpm

908
00:33:18,640 --> 00:33:20,720
have a fips mode

909
00:33:20,720 --> 00:33:23,440
that everyone says do not use because it

910
00:33:23,440 --> 00:33:25,840
has insecure padding and some other

911
00:33:25,840 --> 00:33:27,600
problems but that was the mode that it

912
00:33:27,600 --> 00:33:30,240
was certified in

913
00:33:30,240 --> 00:33:32,399
so

914
00:33:32,640 --> 00:33:34,399
i think as you move up to the higher

915
00:33:34,399 --> 00:33:36,640
fips levels

916
00:33:36,640 --> 00:33:38,559
that do take into account tamper

917
00:33:38,559 --> 00:33:40,720
resistance and active tamper counter

918
00:33:40,720 --> 00:33:42,720
measures um

919
00:33:42,720 --> 00:33:45,039
uh there's really there's just not a lot

920
00:33:45,039 --> 00:33:46,960
of products at all that are implementing

921
00:33:46,960 --> 00:33:48,640
those um

922
00:33:48,640 --> 00:33:50,720
you know ibm cells uh crypto

923
00:33:50,720 --> 00:33:53,519
accelerators and line cards that have it

924
00:33:53,519 --> 00:33:54,480
and

925
00:33:54,480 --> 00:33:58,399
they are as big as a gpu and you know

926
00:33:58,399 --> 00:34:00,559
contain a small power pc sort of

927
00:34:00,559 --> 00:34:01,840
processor

928
00:34:01,840 --> 00:34:04,880
um surrounded by meshes and batteries

929
00:34:04,880 --> 00:34:07,519
and things

930
00:34:07,519 --> 00:34:08,639
so

931
00:34:08,639 --> 00:34:09,440
uh

932
00:34:09,440 --> 00:34:14,159
i'm not sure if if any of the um

933
00:34:14,800 --> 00:34:18,079
if there's a huge push yet for

934
00:34:18,079 --> 00:34:20,239
that sort of commercial certification of

935
00:34:20,239 --> 00:34:22,639
open hardware um

936
00:34:22,639 --> 00:34:24,399
but there's nothing that says as a

937
00:34:24,399 --> 00:34:26,239
community we couldn't come up with our

938
00:34:26,239 --> 00:34:28,079
own sets of standards you know there's

939
00:34:28,079 --> 00:34:29,359
no reason we necessarily have to

940
00:34:29,359 --> 00:34:33,918
implement uh fips and the tcg uh specs

941
00:34:33,918 --> 00:34:35,599
especially if there are things that are

942
00:34:35,599 --> 00:34:38,320
better suited for the operating systems

943
00:34:38,320 --> 00:34:40,320
and the applications that that we want

944
00:34:40,320 --> 00:34:43,280
to run on top of them

945
00:34:45,760 --> 00:34:48,480
i mean i have a comment as well so uh i

946
00:34:48,480 --> 00:34:51,679
get that large organizations uh really

947
00:34:51,679 --> 00:34:52,480
want

948
00:34:52,480 --> 00:34:55,040
certifications or or uh some way of

949
00:34:55,040 --> 00:34:56,719
saying okay we can buy this but we can't

950
00:34:56,719 --> 00:34:58,560
buy that but if you look at if you

951
00:34:58,560 --> 00:35:00,160
simply look it's if you don't care about

952
00:35:00,160 --> 00:35:01,440
that then you simply look at state of

953
00:35:01,440 --> 00:35:02,400
the art

954
00:35:02,400 --> 00:35:03,760
uh

955
00:35:03,760 --> 00:35:05,280
across the board of security

956
00:35:05,280 --> 00:35:07,920
technologies uh i think that it's it's

957
00:35:07,920 --> 00:35:10,720
developing so rapidly that that uh we

958
00:35:10,720 --> 00:35:12,320
should just like

959
00:35:12,320 --> 00:35:14,640
iterate on them and uh and make better

960
00:35:14,640 --> 00:35:16,320
and better things uh

961
00:35:16,320 --> 00:35:19,040
like um i mean one one example from the

962
00:35:19,040 --> 00:35:21,359
90s and early 2000s is the discussion

963
00:35:21,359 --> 00:35:23,440
around should we encrypt and then mac or

964
00:35:23,440 --> 00:35:25,440
should we mac and then encrypt and i

965
00:35:25,440 --> 00:35:26,880
think that discussion has now been

966
00:35:26,880 --> 00:35:28,560
settled but there are still protocols

967
00:35:28,560 --> 00:35:30,400
that do the wrong thing

968
00:35:30,400 --> 00:35:32,800
um

969
00:35:32,800 --> 00:35:33,520
where

970
00:35:33,520 --> 00:35:37,520
and the same goes with with

971
00:35:37,520 --> 00:35:40,079
these like trust anchors or the roots of

972
00:35:40,079 --> 00:35:42,960
trust and how do we do measured boot

973
00:35:42,960 --> 00:35:46,880
and uh i understand that um asic

974
00:35:46,880 --> 00:35:49,760
designers and

975
00:35:50,240 --> 00:35:51,359
they

976
00:35:51,359 --> 00:35:52,400
um

977
00:35:52,400 --> 00:35:54,160
i think i mean intel has definitely been

978
00:35:54,160 --> 00:35:56,320
saved a bunch of saved a bunch of times

979
00:35:56,320 --> 00:36:00,480
by the flexibility of their microcode

980
00:36:00,480 --> 00:36:01,920
but but

981
00:36:01,920 --> 00:36:04,400
at the same time of course that that

982
00:36:04,400 --> 00:36:06,160
means more complexity and potential for

983
00:36:06,160 --> 00:36:08,720
vulnerabilities but if we can i think

984
00:36:08,720 --> 00:36:11,520
that we're approaching a time where we

985
00:36:11,520 --> 00:36:13,520
can say okay this is a good way to boot

986
00:36:13,520 --> 00:36:16,880
a system from hard reset and upwards and

987
00:36:16,880 --> 00:36:20,320
asic designers will start to introduce

988
00:36:20,320 --> 00:36:23,040
stuff like more unconditional

989
00:36:23,040 --> 00:36:25,040
measured boot eventually i hope so at

990
00:36:25,040 --> 00:36:28,560
least it's not it doesn't seem that hard

991
00:36:28,560 --> 00:36:31,359
famous last words

992
00:36:37,040 --> 00:36:39,520
hello thanks for the informative talk so

993
00:36:39,520 --> 00:36:42,240
i just have just quick question about

994
00:36:42,240 --> 00:36:45,280
the randomization to rng sometimes there

995
00:36:45,280 --> 00:36:48,480
is an ics like standalone trng and some

996
00:36:48,480 --> 00:36:50,160
microcontrollers that have the

997
00:36:50,160 --> 00:36:52,960
capability of the trng so if you would

998
00:36:52,960 --> 00:36:55,760
to choose which one i can rely on which

999
00:36:55,760 --> 00:36:58,320
one i can trust the standalone ic or

1000
00:36:58,320 --> 00:36:59,200
just

1001
00:36:59,200 --> 00:37:01,680
how how good is the microcontroller

1002
00:37:01,680 --> 00:37:05,040
capabilities trngs

1003
00:37:05,040 --> 00:37:06,640
i think in unison we should say it

1004
00:37:06,640 --> 00:37:09,839
depends on your threat model

1005
00:37:10,400 --> 00:37:12,480
the

1006
00:37:12,480 --> 00:37:14,320
one issue i've seen with a lot of the

1007
00:37:14,320 --> 00:37:16,560
microcontroller

1008
00:37:16,560 --> 00:37:17,920
the security aspects of different

1009
00:37:17,920 --> 00:37:20,400
microcontrollers is they

1010
00:37:20,400 --> 00:37:21,680
a lot of times the data sheets are in

1011
00:37:21,680 --> 00:37:24,079
d-aid so you may not be able to find out

1012
00:37:24,079 --> 00:37:25,359
all the information you want to know

1013
00:37:25,359 --> 00:37:27,759
about it

1014
00:37:28,320 --> 00:37:31,040
but the in terms of the threat model

1015
00:37:31,040 --> 00:37:32,720
having anything external means that you

1016
00:37:32,720 --> 00:37:34,720
now have an external bus that you're

1017
00:37:34,720 --> 00:37:37,839
talking to so if you have uh physical

1018
00:37:37,839 --> 00:37:40,560
security or supply chain security uh

1019
00:37:40,560 --> 00:37:42,720
concerns you know that that's a bust

1020
00:37:42,720 --> 00:37:45,040
that an attacker can potentially be

1021
00:37:45,040 --> 00:37:47,119
uh feeding malicious data into your

1022
00:37:47,119 --> 00:37:48,079
system

1023
00:37:48,079 --> 00:37:51,520
having more stuff on dye uh or

1024
00:37:51,520 --> 00:37:52,800
in the package

1025
00:37:52,800 --> 00:37:55,599
raises the difficulty of that attack um

1026
00:37:55,599 --> 00:37:58,560
although again as we saw from uh earlier

1027
00:37:58,560 --> 00:38:01,200
today it doesn't eliminate the attack

1028
00:38:01,200 --> 00:38:02,800
but it does make it a lot more

1029
00:38:02,800 --> 00:38:05,800
challenging

1030
00:38:06,160 --> 00:38:07,760
okay i think we pretty much run out of

1031
00:38:07,760 --> 00:38:09,599
time that was a really great panel a

1032
00:38:09,599 --> 00:38:12,000
really interesting uh

1033
00:38:12,000 --> 00:38:14,000
getting my mind spinning

1034
00:38:14,000 --> 00:38:17,720
so thank you for that

