1
00:00:02,960 --> 00:00:04,960
thank you

2
00:00:04,960 --> 00:00:06,480
all right well we're uh we're super

3
00:00:06,480 --> 00:00:08,080
excited to be here today to get a chance

4
00:00:08,080 --> 00:00:10,480
to talk at a hardware io and as you said

5
00:00:10,480 --> 00:00:11,599
we're going to talk about a medical

6
00:00:11,599 --> 00:00:13,440
device hack that we did over the last

7
00:00:13,440 --> 00:00:14,880
year

8
00:00:14,880 --> 00:00:16,720
real quickly who we are sum it up we're

9
00:00:16,720 --> 00:00:18,400
a bunch of hackers that work for mcafee

10
00:00:18,400 --> 00:00:19,840
enterprises advanced threat research

11
00:00:19,840 --> 00:00:21,760
team uh we've been doing this for a few

12
00:00:21,760 --> 00:00:24,000
years and you can follow us on social

13
00:00:24,000 --> 00:00:25,359
media if you want to look at any of our

14
00:00:25,359 --> 00:00:26,480
past or

15
00:00:26,480 --> 00:00:28,720
or future research

16
00:00:28,720 --> 00:00:30,560
so what are we here to talk about

17
00:00:30,560 --> 00:00:32,159
uh well we decided to look into a

18
00:00:32,159 --> 00:00:34,320
medical device uh called a bee brom

19
00:00:34,320 --> 00:00:36,800
infusion pump or fusion mat which is an

20
00:00:36,800 --> 00:00:38,800
infusion pump if you don't know those

21
00:00:38,800 --> 00:00:40,879
are medical devices used to provide

22
00:00:40,879 --> 00:00:43,360
either medication or fluids to a patient

23
00:00:43,360 --> 00:00:44,719
through an iv

24
00:00:44,719 --> 00:00:46,399
if you've ever been to an er before or

25
00:00:46,399 --> 00:00:47,920
an operating room you've likely been

26
00:00:47,920 --> 00:00:50,320
hooked up to one at some point in time

27
00:00:50,320 --> 00:00:53,039
this ecosystem has two main components

28
00:00:53,039 --> 00:00:54,960
it has the pump itself which is on the

29
00:00:54,960 --> 00:00:56,879
right hand side of the screen and it has

30
00:00:56,879 --> 00:00:58,640
what's called the space station which is

31
00:00:58,640 --> 00:01:00,879
really just a fancy word for docking

32
00:01:00,879 --> 00:01:04,000
station uh the that device holds usually

33
00:01:04,000 --> 00:01:07,600
about four pumps at any given time

34
00:01:07,600 --> 00:01:09,360
and for this uh for this project we

35
00:01:09,360 --> 00:01:10,880
worked on the device that was or these

36
00:01:10,880 --> 00:01:13,680
devices that were released in 2017

37
00:01:13,680 --> 00:01:15,360
and that might provide some red flags

38
00:01:15,360 --> 00:01:17,040
for some as vulnerable research hey you

39
00:01:17,040 --> 00:01:18,400
should be looking at you know brand new

40
00:01:18,400 --> 00:01:20,880
stuff this is a little on the old side

41
00:01:20,880 --> 00:01:22,720
well we on atl we always consult

42
00:01:22,720 --> 00:01:24,400
industry experts before we look at a

43
00:01:24,400 --> 00:01:26,080
device to make sure that it's relevant

44
00:01:26,080 --> 00:01:28,560
and it turns out that this is this is

45
00:01:28,560 --> 00:01:30,159
one of the standards in the medical

46
00:01:30,159 --> 00:01:33,040
field today is this device from 2017

47
00:01:33,040 --> 00:01:34,960
so that makes it uh relevant for the

48
00:01:34,960 --> 00:01:36,880
research

49
00:01:36,880 --> 00:01:39,119
we are we are not the first people to

50
00:01:39,119 --> 00:01:41,119
look at these type of devices there's

51
00:01:41,119 --> 00:01:42,320
been quite a bit of research in the

52
00:01:42,320 --> 00:01:44,240
medical field before i'm going to

53
00:01:44,240 --> 00:01:46,000
highlight two that are probably the most

54
00:01:46,000 --> 00:01:49,119
important uh the first uh mannymed is a

55
00:01:49,119 --> 00:01:50,880
research team out of germany that in

56
00:01:50,880 --> 00:01:53,920
2020 released an overview of security

57
00:01:53,920 --> 00:01:55,840
and medical devices they released a very

58
00:01:55,840 --> 00:01:58,320
large report on a bunch of devices and

59
00:01:58,320 --> 00:01:59,680
the device we're looking at is actually

60
00:01:59,680 --> 00:02:01,360
in that report and i will touch on that

61
00:02:01,360 --> 00:02:03,119
later in the presentation

62
00:02:03,119 --> 00:02:05,119
and then also the the talk that kind of

63
00:02:05,119 --> 00:02:07,040
started it all at least i think so in

64
00:02:07,040 --> 00:02:08,878
the medical field for vulnerability

65
00:02:08,878 --> 00:02:11,360
research was billy rayos and jonathan

66
00:02:11,360 --> 00:02:13,680
butts in 2018 at black hat they released

67
00:02:13,680 --> 00:02:15,680
their work on pacemakers and insulin

68
00:02:15,680 --> 00:02:16,560
pump

69
00:02:16,560 --> 00:02:19,360
this actually drove

70
00:02:19,360 --> 00:02:22,400
the fda to create a cybermed security

71
00:02:22,400 --> 00:02:24,480
expert analysis board we haven't seen a

72
00:02:24,480 --> 00:02:26,000
ton of movement on that since then but

73
00:02:26,000 --> 00:02:29,120
it definitely created that movement

74
00:02:29,120 --> 00:02:31,599
all right so uh on to the fun stuff so

75
00:02:31,599 --> 00:02:33,840
to get started we have to talk about the

76
00:02:33,840 --> 00:02:36,400
the system architecture of of these two

77
00:02:36,400 --> 00:02:37,599
devices

78
00:02:37,599 --> 00:02:38,959
and of course being at a hardware

79
00:02:38,959 --> 00:02:40,640
conference and hardware hackers we'll

80
00:02:40,640 --> 00:02:43,280
start with tear down of these devices

81
00:02:43,280 --> 00:02:45,200
we actually looked at quite a few of

82
00:02:45,200 --> 00:02:47,120
these and took them apart they're not

83
00:02:47,120 --> 00:02:48,720
all identical but they're

84
00:02:48,720 --> 00:02:52,319
very similar just to highlight a few key

85
00:02:52,319 --> 00:02:55,519
components of this device it has an m32c

86
00:02:55,519 --> 00:02:57,360
processor uh which felipe's going to

87
00:02:57,360 --> 00:03:00,239
talk about uh in depth here momentarily

88
00:03:00,239 --> 00:03:02,000
uh they have flash chips where the

89
00:03:02,000 --> 00:03:03,680
firmware is stored

90
00:03:03,680 --> 00:03:05,360
they're different depending on which one

91
00:03:05,360 --> 00:03:07,120
you take apart you'll get a t-stop chip

92
00:03:07,120 --> 00:03:09,280
or you'll get a bga chip

93
00:03:09,280 --> 00:03:10,959
and then something unique to these

94
00:03:10,959 --> 00:03:12,879
devices are what they kind of look like

95
00:03:12,879 --> 00:03:14,560
dongles off the back they're they're not

96
00:03:14,560 --> 00:03:16,800
actually dongles but it's a proprietary

97
00:03:16,800 --> 00:03:19,920
connection that's used for power first

98
00:03:19,920 --> 00:03:22,319
and foremost but also it is a direct

99
00:03:22,319 --> 00:03:24,480
connection to the can bus and this is

100
00:03:24,480 --> 00:03:25,680
used

101
00:03:25,680 --> 00:03:28,400
for system maintenance so for example a

102
00:03:28,400 --> 00:03:30,080
technician would come in with a laptop

103
00:03:30,080 --> 00:03:32,640
and there's a usb to this proprietary

104
00:03:32,640 --> 00:03:34,640
connector conversion and that's how they

105
00:03:34,640 --> 00:03:38,000
perform maintenance on the device

106
00:03:38,000 --> 00:03:40,319
looking at this holistically from now on

107
00:03:40,319 --> 00:03:42,000
when i talk about the system what i'm

108
00:03:42,000 --> 00:03:45,120
talking about is a singular pump docked

109
00:03:45,120 --> 00:03:47,280
inside the docking station and that's

110
00:03:47,280 --> 00:03:50,080
what this uh this diagram represents so

111
00:03:50,080 --> 00:03:51,840
we have uh

112
00:03:51,840 --> 00:03:53,760
one infusion map pump on the left hand

113
00:03:53,760 --> 00:03:55,519
side of the screen and it's docked

114
00:03:55,519 --> 00:03:56,799
inside the space station that's the

115
00:03:56,799 --> 00:03:58,640
larger bubble and the first thing i'm

116
00:03:58,640 --> 00:03:59,439
gonna

117
00:03:59,439 --> 00:04:01,120
highlight here is we actually had to

118
00:04:01,120 --> 00:04:03,120
work with three different distinct

119
00:04:03,120 --> 00:04:05,760
architectures so we had the m32c

120
00:04:05,760 --> 00:04:07,519
architecture which is the critical which

121
00:04:07,519 --> 00:04:09,439
runs the critical rtos with the critical

122
00:04:09,439 --> 00:04:11,519
firmware of the device

123
00:04:11,519 --> 00:04:14,159
and then we have the power pc processor

124
00:04:14,159 --> 00:04:16,238
which is running what's called space com

125
00:04:16,238 --> 00:04:18,320
or the embedded linux on the space

126
00:04:18,320 --> 00:04:20,000
station device

127
00:04:20,000 --> 00:04:21,839
and then last but not least the there's

128
00:04:21,839 --> 00:04:24,960
a wi-fi card that's uh docked inside of

129
00:04:24,960 --> 00:04:26,479
the space station and that's running an

130
00:04:26,479 --> 00:04:28,479
arm cpu so we had to interact with all

131
00:04:28,479 --> 00:04:30,320
three of those throughout the throughout

132
00:04:30,320 --> 00:04:32,479
the research process

133
00:04:32,479 --> 00:04:34,800
and then another critical component here

134
00:04:34,800 --> 00:04:36,880
is the can bus that connects

135
00:04:36,880 --> 00:04:37,919
the

136
00:04:37,919 --> 00:04:41,040
the space station spacecom system to the

137
00:04:41,040 --> 00:04:42,960
critical rtos system and we'll dive into

138
00:04:42,960 --> 00:04:44,800
that much more extensively

139
00:04:44,800 --> 00:04:46,960
now when we look at applications there's

140
00:04:46,960 --> 00:04:48,400
a lot of different things running on

141
00:04:48,400 --> 00:04:49,919
these devices

142
00:04:49,919 --> 00:04:51,360
we don't have time to get into all of

143
00:04:51,360 --> 00:04:52,800
them but we did take a look at just

144
00:04:52,800 --> 00:04:54,320
about all of them i'm going to highlight

145
00:04:54,320 --> 00:04:56,000
two of the most important ones for this

146
00:04:56,000 --> 00:04:57,360
presentation

147
00:04:57,360 --> 00:04:59,840
and so the first one is called the json

148
00:04:59,840 --> 00:05:01,440
dbus bridge

149
00:05:01,440 --> 00:05:04,000
and this this application sits on space

150
00:05:04,000 --> 00:05:07,039
com mostly for wi-fi configuration

151
00:05:07,039 --> 00:05:09,680
uh it is an open source application and

152
00:05:09,680 --> 00:05:12,479
it listens on port 80 and 443

153
00:05:12,479 --> 00:05:15,360
the next is called the pcs binary i'm

154
00:05:15,360 --> 00:05:17,199
not quite sure what that stands for to

155
00:05:17,199 --> 00:05:18,720
be honest but i can tell you what it

156
00:05:18,720 --> 00:05:21,199
does is it processes commands over the

157
00:05:21,199 --> 00:05:22,240
network

158
00:05:22,240 --> 00:05:24,240
these are this is a proprietary protocol

159
00:05:24,240 --> 00:05:25,919
the commands are used for management of

160
00:05:25,919 --> 00:05:28,320
the device uh they're set in clear text

161
00:05:28,320 --> 00:05:30,240
we'll get back to that later

162
00:05:30,240 --> 00:05:31,280
and then

163
00:05:31,280 --> 00:05:32,800
they're used mostly for to update the

164
00:05:32,800 --> 00:05:34,960
drug library calibration data and pump

165
00:05:34,960 --> 00:05:36,639
settings which we'll dive into more as

166
00:05:36,639 --> 00:05:38,160
well

167
00:05:38,160 --> 00:05:40,880
so as you as you can see the pump has

168
00:05:40,880 --> 00:05:43,280
two main uh components to it we've got

169
00:05:43,280 --> 00:05:45,360
the the critical firmware on the pump

170
00:05:45,360 --> 00:05:47,199
itself and we've got the spacecon system

171
00:05:47,199 --> 00:05:49,039
that's on the docking station if you

172
00:05:49,039 --> 00:05:50,479
haven't figured it out yet felipe and i

173
00:05:50,479 --> 00:05:51,600
are from two different parts of the

174
00:05:51,600 --> 00:05:52,479
world

175
00:05:52,479 --> 00:05:54,720
i work in the u.s and texas and philippe

176
00:05:54,720 --> 00:05:57,120
works in in france and due to the

177
00:05:57,120 --> 00:05:58,560
pandemic you know we didn't have access

178
00:05:58,560 --> 00:06:00,000
to a lot of labs and stuff we had to

179
00:06:00,000 --> 00:06:03,199
figure out how to work on this remotely

180
00:06:03,199 --> 00:06:04,639
so what we did is we split it in those

181
00:06:04,639 --> 00:06:07,039
two logical components so i focused uh

182
00:06:07,039 --> 00:06:08,720
primarily on the space comp system and

183
00:06:08,720 --> 00:06:11,120
philippe focused on their critical rtos

184
00:06:11,120 --> 00:06:12,560
and we put that all together to see if

185
00:06:12,560 --> 00:06:14,000
we could find an interesting attack

186
00:06:14,000 --> 00:06:16,160
vector to attack this device so i'm

187
00:06:16,160 --> 00:06:17,360
going to turn this over to philippe to

188
00:06:17,360 --> 00:06:19,840
dive into the pump firmware

189
00:06:19,840 --> 00:06:22,479
you um so yeah

190
00:06:22,479 --> 00:06:25,039
my part was to uh start looking at the

191
00:06:25,039 --> 00:06:27,360
perfumers doug just said and i'm going

192
00:06:27,360 --> 00:06:28,720
to split that in like kind of three

193
00:06:28,720 --> 00:06:30,560
sections one is just like how do you get

194
00:06:30,560 --> 00:06:32,080
started with that then like when you're

195
00:06:32,080 --> 00:06:33,919
more comfortable like what

196
00:06:33,919 --> 00:06:35,759
can you look around and what do you see

197
00:06:35,759 --> 00:06:37,039
and finally like take a little more

198
00:06:37,039 --> 00:06:38,720
abstraction and figure like what can we

199
00:06:38,720 --> 00:06:40,560
put in that

200
00:06:40,560 --> 00:06:42,160
so for getting started like it's kind of

201
00:06:42,160 --> 00:06:44,639
like the usual um you know you can

202
00:06:44,639 --> 00:06:46,319
recover like a bunch of documentation to

203
00:06:46,319 --> 00:06:48,160
get a sense of you know like the the

204
00:06:48,160 --> 00:06:49,440
chip and stuff

205
00:06:49,440 --> 00:06:50,880
and then you also want to like dump a

206
00:06:50,880 --> 00:06:52,960
firmware like important in either like

207
00:06:52,960 --> 00:06:54,560
the usual

208
00:06:54,560 --> 00:06:56,800
so on the left side uh we have like the

209
00:06:56,800 --> 00:06:58,639
motherboard of the the pump like outside

210
00:06:58,639 --> 00:06:59,840
of the device

211
00:06:59,840 --> 00:07:02,000
and on the right side we have uh the

212
00:07:02,000 --> 00:07:04,080
same but getting like all like warm in

213
00:07:04,080 --> 00:07:07,039
the vga rework station to uh remove the

214
00:07:07,039 --> 00:07:09,039
flash chip if you don't have that at

215
00:07:09,039 --> 00:07:11,120
home uh you can always use like a heat

216
00:07:11,120 --> 00:07:14,400
gun to do the work that was just fine

217
00:07:14,400 --> 00:07:16,000
and here's like the chip has been

218
00:07:16,000 --> 00:07:17,840
removed it's all like

219
00:07:17,840 --> 00:07:20,000
just not cooked that's good

220
00:07:20,000 --> 00:07:21,039
um

221
00:07:21,039 --> 00:07:23,039
and we can see on the right side like a

222
00:07:23,039 --> 00:07:24,319
firmware dump

223
00:07:24,319 --> 00:07:27,520
um and when we did that first uh dog was

224
00:07:27,520 --> 00:07:29,039
like do you think there is code on it

225
00:07:29,039 --> 00:07:30,880
because we weren't really sure what was

226
00:07:30,880 --> 00:07:32,479
on it at all you know

227
00:07:32,479 --> 00:07:34,319
but we can see uh

228
00:07:34,319 --> 00:07:35,919
in the bottom like a string that says

229
00:07:35,919 --> 00:07:37,440
like a null pointer and something like

230
00:07:37,440 --> 00:07:39,919
yeah luckily there is code on it

231
00:07:39,919 --> 00:07:41,520
so the normal next step is we want to

232
00:07:41,520 --> 00:07:43,840
import that in either

233
00:07:43,840 --> 00:07:46,879
so it turns out either supports uh m32c

234
00:07:46,879 --> 00:07:50,479
80 architecture uh we have like a 3283

235
00:07:50,479 --> 00:07:52,240
uh that's the same assembly language

236
00:07:52,240 --> 00:07:53,599
it's just different peripherals and that

237
00:07:53,599 --> 00:07:55,440
kind of stuff but for purposes like

238
00:07:55,440 --> 00:07:57,280
close enough

239
00:07:57,280 --> 00:07:58,960
ida likes to ask you know pointed

240
00:07:58,960 --> 00:08:00,639
question which is like what's the load

241
00:08:00,639 --> 00:08:02,639
address of your firmware

242
00:08:02,639 --> 00:08:03,919
so you know like if you are loading like

243
00:08:03,919 --> 00:08:05,599
an elf binary uh like the help folder

244
00:08:05,599 --> 00:08:07,520
would do that for you but here we need

245
00:08:07,520 --> 00:08:09,599
to provide that answer so usually the

246
00:08:09,599 --> 00:08:11,199
common way to go about that is you know

247
00:08:11,199 --> 00:08:12,479
you're going to look for strings and

248
00:08:12,479 --> 00:08:14,400
pointers and anything that could have

249
00:08:14,400 --> 00:08:16,800
like an absolute address so that you can

250
00:08:16,800 --> 00:08:18,800
then guess what would be like the best

251
00:08:18,800 --> 00:08:21,039
likelihood of what would be the best

252
00:08:21,039 --> 00:08:23,759
loading address possible most likely

253
00:08:23,759 --> 00:08:26,319
but here we can shift cheat a little

254
00:08:26,319 --> 00:08:27,919
because we do have access to the

255
00:08:27,919 --> 00:08:29,759
datasheet we know we did our homework

256
00:08:29,759 --> 00:08:31,520
and we get all the documentation so we

257
00:08:31,520 --> 00:08:32,880
can look into that

258
00:08:32,880 --> 00:08:34,719
so just to give you an id

259
00:08:34,719 --> 00:08:36,559
we have like the datasheet on the left

260
00:08:36,559 --> 00:08:37,760
on the center we have the software

261
00:08:37,760 --> 00:08:40,559
manual that tells us about all the m32

262
00:08:40,559 --> 00:08:42,159
instruction that we wanted to learn

263
00:08:42,159 --> 00:08:43,039
about

264
00:08:43,039 --> 00:08:45,040
and on the right side uh we have the

265
00:08:45,040 --> 00:08:46,720
hardware manual that goes more into

266
00:08:46,720 --> 00:08:49,600
details about like registers and timings

267
00:08:49,600 --> 00:08:51,360
and that kind of stuff

268
00:08:51,360 --> 00:08:54,080
and one of the content of this hardware

269
00:08:54,080 --> 00:08:55,680
manual is this page that shows like all

270
00:08:55,680 --> 00:08:57,680
the different modes of operation of the

271
00:08:57,680 --> 00:08:59,200
microcontroller

272
00:08:59,200 --> 00:09:01,600
and all the values like memory mappings

273
00:09:01,600 --> 00:09:03,200
so at this point we want to really show

274
00:09:03,200 --> 00:09:05,120
uh you know what was the mode of a

275
00:09:05,120 --> 00:09:07,200
processor because it both depends on you

276
00:09:07,200 --> 00:09:08,720
know like internal settings that are

277
00:09:08,720 --> 00:09:10,959
like set at boot time and potentially

278
00:09:10,959 --> 00:09:13,360
like some pins on the board but that

279
00:09:13,360 --> 00:09:15,360
doesn't quite matter because overall we

280
00:09:15,360 --> 00:09:16,160
just

281
00:09:16,160 --> 00:09:18,560
highlighted like a few um

282
00:09:18,560 --> 00:09:20,720
addresses in red

283
00:09:20,720 --> 00:09:23,040
that are actually um you know likely

284
00:09:23,040 --> 00:09:25,279
like the best candidates because they

285
00:09:25,279 --> 00:09:27,279
describe the beginning and ends of

286
00:09:27,279 --> 00:09:29,279
external spaces which would be basically

287
00:09:29,279 --> 00:09:30,560
where like a flash module would be

288
00:09:30,560 --> 00:09:32,560
mapped

289
00:09:32,560 --> 00:09:34,640
and furthermore we got this extra

290
00:09:34,640 --> 00:09:36,480
information from the data sheet that at

291
00:09:36,480 --> 00:09:38,480
the bottom of the memory map we expect

292
00:09:38,480 --> 00:09:41,040
to find like some interrupt table

293
00:09:41,040 --> 00:09:42,320
and therefore we would find like

294
00:09:42,320 --> 00:09:43,760
function pointers at the end of that

295
00:09:43,760 --> 00:09:45,040
memory map

296
00:09:45,040 --> 00:09:46,480
so what happened if we try to load the

297
00:09:46,480 --> 00:09:47,920
firmware at

298
00:09:47,920 --> 00:09:50,560
e000 which was one of the address i've

299
00:09:50,560 --> 00:09:53,279
highlighted previously and if we look at

300
00:09:53,279 --> 00:09:55,040
the end of the memory map we see a bunch

301
00:09:55,040 --> 00:09:57,519
of function pointers um so i named them

302
00:09:57,519 --> 00:10:00,160
like too much the data sheets

303
00:10:00,160 --> 00:10:01,839
but really like if we click on them it's

304
00:10:01,839 --> 00:10:03,600
it's actual function so we know we find

305
00:10:03,600 --> 00:10:05,519
like the right loading address

306
00:10:05,519 --> 00:10:07,360
and on top of that on the bottom right

307
00:10:07,360 --> 00:10:09,440
of the slide uh as well in the firmware

308
00:10:09,440 --> 00:10:11,040
we can see a bunch of references to like

309
00:10:11,040 --> 00:10:12,959
this zero range which kind of confirm

310
00:10:12,959 --> 00:10:14,320
like there's like interesting stuff over

311
00:10:14,320 --> 00:10:16,560
there

312
00:10:16,560 --> 00:10:18,480
and we can sum up all of that uh looking

313
00:10:18,480 --> 00:10:20,160
at the memory mapping either so the

314
00:10:20,160 --> 00:10:23,040
whole left side from e0 to f0 something

315
00:10:23,040 --> 00:10:26,160
is data and that would be more um you

316
00:10:26,160 --> 00:10:28,560
know uh fonts for the

317
00:10:28,560 --> 00:10:30,399
screen of the pump uh calibration

318
00:10:30,399 --> 00:10:32,800
information all over the data for the

319
00:10:32,800 --> 00:10:34,800
the functioning of the pump meanwhile on

320
00:10:34,800 --> 00:10:37,600
the right side um everything is blue

321
00:10:37,600 --> 00:10:39,279
uh except for like there's like a little

322
00:10:39,279 --> 00:10:40,800
gap that i've highlighted with this

323
00:10:40,800 --> 00:10:43,120
purple arrow and it turns out it's like

324
00:10:43,120 --> 00:10:44,560
you have like actually two sections of

325
00:10:44,560 --> 00:10:46,399
code the main application which is the

326
00:10:46,399 --> 00:10:49,360
biggest blob and just a little chunk of

327
00:10:49,360 --> 00:10:51,760
bootloader and monitor code

328
00:10:51,760 --> 00:10:53,200
and i think it's pretty interesting that

329
00:10:53,200 --> 00:10:55,920
by just looking at the memory map we can

330
00:10:55,920 --> 00:10:57,279
see there's something interesting like

331
00:10:57,279 --> 00:10:59,519
you know extension in the code

332
00:10:59,519 --> 00:11:01,920
and i've also added uh the segments in

333
00:11:01,920 --> 00:11:04,720
ida uh the sfr register is one of the

334
00:11:04,720 --> 00:11:06,560
most interesting and it's already there

335
00:11:06,560 --> 00:11:08,560
um and it's actually like

336
00:11:08,560 --> 00:11:10,399
linked to the mapping of like memory

337
00:11:10,399 --> 00:11:12,959
special function registers

338
00:11:12,959 --> 00:11:15,279
and that's provided by ida because it's

339
00:11:15,279 --> 00:11:17,760
reports like m32c80

340
00:11:17,760 --> 00:11:21,360
um so that's interesting and um

341
00:11:21,360 --> 00:11:22,560
like the other one that's important is

342
00:11:22,560 --> 00:11:24,560
the one i named like global memory um

343
00:11:24,560 --> 00:11:26,880
which i had to create and it's used for

344
00:11:26,880 --> 00:11:30,240
storing like a lot of global variables

345
00:11:30,240 --> 00:11:32,640
and so by creating that segment then you

346
00:11:32,640 --> 00:11:34,079
can cross-reference all of those

347
00:11:34,079 --> 00:11:35,600
variables name them so it's really

348
00:11:35,600 --> 00:11:37,760
important for the reversing

349
00:11:37,760 --> 00:11:40,160
process

350
00:11:40,880 --> 00:11:42,640
anyway so uh

351
00:11:42,640 --> 00:11:44,000
now that we have like this stuff in

352
00:11:44,000 --> 00:11:45,760
either we want to start looking around

353
00:11:45,760 --> 00:11:47,040
and figure out like how the firmware

354
00:11:47,040 --> 00:11:49,440
works so there is two angles for that uh

355
00:11:49,440 --> 00:11:50,880
that i considered like one is we can

356
00:11:50,880 --> 00:11:52,079
focus specifically on all the

357
00:11:52,079 --> 00:11:54,560
peripherals of the microcontroller

358
00:11:54,560 --> 00:11:56,320
and then we can just like dig around in

359
00:11:56,320 --> 00:11:58,399
ida and look for interesting stuff i'm

360
00:11:58,399 --> 00:12:00,399
going to start with the peripherals

361
00:12:00,399 --> 00:12:02,399
uh the question you could ask is why do

362
00:12:02,399 --> 00:12:04,079
we care about those

363
00:12:04,079 --> 00:12:06,399
and it's interesting because um that's

364
00:12:06,399 --> 00:12:07,920
how the firmware communicates with the

365
00:12:07,920 --> 00:12:09,839
rest of the world so you have like your

366
00:12:09,839 --> 00:12:11,360
art you have a canvas you have like lots

367
00:12:11,360 --> 00:12:14,079
of ios you have like a analog to digital

368
00:12:14,079 --> 00:12:16,399
and digital to analog converters

369
00:12:16,399 --> 00:12:18,880
uh so that's all really interesting but

370
00:12:18,880 --> 00:12:20,800
how do you find in the in the firmware

371
00:12:20,800 --> 00:12:24,000
like the code responsible for do stuff

372
00:12:24,000 --> 00:12:26,240
so i've highlighted two ways one is

373
00:12:26,240 --> 00:12:28,399
following the special function registers

374
00:12:28,399 --> 00:12:29,839
and the other one is looking at

375
00:12:29,839 --> 00:12:32,480
interrupt handlers

376
00:12:32,480 --> 00:12:34,399
so the special functional registers as i

377
00:12:34,399 --> 00:12:36,399
said is this weird memory range from 0

378
00:12:36,399 --> 00:12:37,680
to 400

379
00:12:37,680 --> 00:12:40,079
and basically um

380
00:12:40,079 --> 00:12:41,519
it's like

381
00:12:41,519 --> 00:12:42,959
normal it's it's a memory that when you

382
00:12:42,959 --> 00:12:44,560
write it to it's going to proxy those

383
00:12:44,560 --> 00:12:46,079
read and writes to like the actual

384
00:12:46,079 --> 00:12:48,880
peripherals and you can use that to uh

385
00:12:48,880 --> 00:12:50,399
either like read or write or configure

386
00:12:50,399 --> 00:12:53,360
like some devices um so for example for

387
00:12:53,360 --> 00:12:55,200
like a u-wart you'd have like one

388
00:12:55,200 --> 00:12:58,160
special function register for reading um

389
00:12:58,160 --> 00:13:00,320
data from the if you read it from that

390
00:13:00,320 --> 00:13:01,680
register you would retrieve like one

391
00:13:01,680 --> 00:13:03,440
byte of incense

392
00:13:03,440 --> 00:13:05,920
on the uart and in the same way like

393
00:13:05,920 --> 00:13:07,519
there's another one that if you write to

394
00:13:07,519 --> 00:13:09,440
it it's going to send one byte and

395
00:13:09,440 --> 00:13:10,880
likely there is another one where you

396
00:13:10,880 --> 00:13:13,040
can change the baud rate or something

397
00:13:13,040 --> 00:13:14,320
and that's nice because you can

398
00:13:14,320 --> 00:13:16,560
cross-reference all of those and find

399
00:13:16,560 --> 00:13:18,800
the code responsible for that

400
00:13:18,800 --> 00:13:21,360
and secondly we also have the interrupt

401
00:13:21,360 --> 00:13:24,079
handlers which are um the address of the

402
00:13:24,079 --> 00:13:25,519
interpretand lloyd starting the into b

403
00:13:25,519 --> 00:13:28,880
register of the m32c controller

404
00:13:28,880 --> 00:13:30,959
and it's because the interrupt table can

405
00:13:30,959 --> 00:13:33,360
be relocated in different location

406
00:13:33,360 --> 00:13:35,040
and that actually happens during the

407
00:13:35,040 --> 00:13:37,120
boot process and whatnot

408
00:13:37,120 --> 00:13:39,920
and those are interesting because uh

409
00:13:39,920 --> 00:13:41,760
it's it's basically a list of function

410
00:13:41,760 --> 00:13:42,959
pointers that get triggered when

411
00:13:42,959 --> 00:13:44,880
something could happen so like something

412
00:13:44,880 --> 00:13:47,279
on the uart on the can etc

413
00:13:47,279 --> 00:13:49,040
just to give an idea i don't know if you

414
00:13:49,040 --> 00:13:51,279
can see but there's like a lot of them

415
00:13:51,279 --> 00:13:54,079
and that's pretty confusing but um

416
00:13:54,079 --> 00:13:56,079
if we focus on the actual implementation

417
00:13:56,079 --> 00:13:57,680
in the firmware we can see that not all

418
00:13:57,680 --> 00:14:00,160
of them are implemented but those that

419
00:14:00,160 --> 00:14:01,600
are actually implemented are all really

420
00:14:01,600 --> 00:14:03,279
interesting because first we know what

421
00:14:03,279 --> 00:14:05,680
they linked to and it's like interesting

422
00:14:05,680 --> 00:14:08,240
entry point in the code

423
00:14:08,240 --> 00:14:10,480
so just to give an example back to the

424
00:14:10,480 --> 00:14:12,639
uart we can see that it's checking like

425
00:14:12,639 --> 00:14:14,480
a global variable to see if it's

426
00:14:14,480 --> 00:14:16,639
expecting you know

427
00:14:16,639 --> 00:14:19,279
data and if so it's going to read data

428
00:14:19,279 --> 00:14:20,720
from the special function register like

429
00:14:20,720 --> 00:14:24,399
highlighted in yellow and save that into

430
00:14:24,399 --> 00:14:26,320
like a global buffer

431
00:14:26,320 --> 00:14:28,320
which brings

432
00:14:28,320 --> 00:14:30,000
another point that's important is you

433
00:14:30,000 --> 00:14:30,959
know you don't want to spend too much

434
00:14:30,959 --> 00:14:32,320
time in your interrupt handler and so

435
00:14:32,320 --> 00:14:33,920
you're going to have like buffering code

436
00:14:33,920 --> 00:14:35,120
and other like

437
00:14:35,120 --> 00:14:36,560
data structures

438
00:14:36,560 --> 00:14:38,480
so if you want to find like the highest

439
00:14:38,480 --> 00:14:40,399
level function that's for like the main

440
00:14:40,399 --> 00:14:41,680
application is

441
00:14:41,680 --> 00:14:43,680
you know read one byte on the on the

442
00:14:43,680 --> 00:14:45,120
serial or something

443
00:14:45,120 --> 00:14:47,680
it's more uh those associated data

444
00:14:47,680 --> 00:14:48,639
structure that you want to

445
00:14:48,639 --> 00:14:50,240
cross-reference

446
00:14:50,240 --> 00:14:51,760
so it's important to keep that in mind

447
00:14:51,760 --> 00:14:54,720
while performing the reversing

448
00:14:54,720 --> 00:14:57,440
um but yeah so overall we know we've

449
00:14:57,440 --> 00:14:59,120
identified like a bunch of peripherals

450
00:14:59,120 --> 00:15:00,480
like i put a few like that were

451
00:15:00,480 --> 00:15:02,639
interesting on the on the graphic

452
00:15:02,639 --> 00:15:04,480
uh but then we can also as i said just

453
00:15:04,480 --> 00:15:06,560
dig around in ida and look for other

454
00:15:06,560 --> 00:15:08,480
interesting stuff that are business

455
00:15:08,480 --> 00:15:10,800
logic more specific

456
00:15:10,800 --> 00:15:13,040
and uh one of the most interesting one

457
00:15:13,040 --> 00:15:15,120
that i found was this like crazy uh

458
00:15:15,120 --> 00:15:16,720
internal database

459
00:15:16,720 --> 00:15:19,120
um so it's both used to like store and

460
00:15:19,120 --> 00:15:21,519
retrieve data but also trigger action so

461
00:15:21,519 --> 00:15:23,120
they're like special keys that if you

462
00:15:23,120 --> 00:15:24,560
just write to them it's going to trigger

463
00:15:24,560 --> 00:15:27,519
an action and i think it's it's there

464
00:15:27,519 --> 00:15:29,759
like something like x 600 keys so it's

465
00:15:29,759 --> 00:15:32,000
like a lot of them

466
00:15:32,000 --> 00:15:34,399
and uh something really fun is is

467
00:15:34,399 --> 00:15:36,800
actually exposed on the canvas

468
00:15:36,800 --> 00:15:38,480
so you can

469
00:15:38,480 --> 00:15:40,880
you know externally from the from like a

470
00:15:40,880 --> 00:15:42,399
firmware perspective you can you know

471
00:15:42,399 --> 00:15:44,399
reach those values and these are like

472
00:15:44,399 --> 00:15:45,920
right or read to them

473
00:15:45,920 --> 00:15:47,839
uh but it's also used internally like

474
00:15:47,839 --> 00:15:50,160
throughout the firmware

475
00:15:50,160 --> 00:15:51,040
um

476
00:15:51,040 --> 00:15:53,199
so for instance um

477
00:15:53,199 --> 00:15:54,800
you know if the lcd

478
00:15:54,800 --> 00:15:57,120
screen wants to print the patient's name

479
00:15:57,120 --> 00:15:59,279
it's actually going to retrieve using

480
00:15:59,279 --> 00:16:01,600
the internal apis like the key the key

481
00:16:01,600 --> 00:16:02,959
associated with the patient name and

482
00:16:02,959 --> 00:16:04,720
display on screen

483
00:16:04,720 --> 00:16:06,639
and those key names can also be

484
00:16:06,639 --> 00:16:07,759
recovered

485
00:16:07,759 --> 00:16:09,680
interestingly like in binaries like the

486
00:16:09,680 --> 00:16:11,360
pcs binary that doug mentioned

487
00:16:11,360 --> 00:16:12,639
previously

488
00:16:12,639 --> 00:16:14,320
is there like all the key names

489
00:16:14,320 --> 00:16:16,639
associated with actual like like a key

490
00:16:16,639 --> 00:16:18,399
id which would just be like a short or

491
00:16:18,399 --> 00:16:19,839
something

492
00:16:19,839 --> 00:16:22,399
so by recovering the key names from pcs

493
00:16:22,399 --> 00:16:24,079
we can you know

494
00:16:24,079 --> 00:16:25,920
apply that in either and then that

495
00:16:25,920 --> 00:16:28,240
tremendously help for the reversing

496
00:16:28,240 --> 00:16:30,320
because now like when

497
00:16:30,320 --> 00:16:31,920
those like apis are used for doing

498
00:16:31,920 --> 00:16:33,759
anything we know directly like which

499
00:16:33,759 --> 00:16:36,480
variables are trying to recover

500
00:16:36,480 --> 00:16:38,240
and overall like this data structure is

501
00:16:38,240 --> 00:16:39,680
pretty complex and you can find like

502
00:16:39,680 --> 00:16:41,360
different types of data different range

503
00:16:41,360 --> 00:16:44,240
that are allowed for those variables

504
00:16:44,240 --> 00:16:48,839
uh callback functions etc so bunch of

505
00:16:48,839 --> 00:16:52,079
stuff um so there was like one example

506
00:16:52,079 --> 00:16:53,759
of around in either uh there's

507
00:16:53,759 --> 00:16:55,279
like a few more like things that are

508
00:16:55,279 --> 00:16:56,399
really interesting but we don't have

509
00:16:56,399 --> 00:16:58,639
quite the time for that uh looking at

510
00:16:58,639 --> 00:16:59,759
the bootloader would be obviously

511
00:16:59,759 --> 00:17:01,279
interesting it does a bunch of stuff

512
00:17:01,279 --> 00:17:02,959
that are important

513
00:17:02,959 --> 00:17:04,959
uh there's also like a lot of crcs like

514
00:17:04,959 --> 00:17:07,359
throughout the um the firmware that will

515
00:17:07,359 --> 00:17:09,520
like verify the integrity of the data

516
00:17:09,520 --> 00:17:11,439
and also using custom css so that's

517
00:17:11,439 --> 00:17:13,919
pretty pretty use reverse but

518
00:17:13,919 --> 00:17:15,760
it's important as well to mention

519
00:17:15,760 --> 00:17:17,520
and there's also the drug library that

520
00:17:17,520 --> 00:17:20,319
we i will talk about like in uh

521
00:17:20,319 --> 00:17:22,240
10 minutes

522
00:17:22,240 --> 00:17:23,599
but overall like now that we have an

523
00:17:23,599 --> 00:17:24,480
idea

524
00:17:24,480 --> 00:17:26,640
of you know what what's there like we

525
00:17:26,640 --> 00:17:29,039
can take one step back and consider like

526
00:17:29,039 --> 00:17:31,360
how can we bond that

527
00:17:31,360 --> 00:17:33,039
when i was thinking about it i had like

528
00:17:33,039 --> 00:17:35,360
kind of like three angles one was like

529
00:17:35,360 --> 00:17:36,880
maybe just found like vulnerabilities in

530
00:17:36,880 --> 00:17:39,280
the ios so like in the uart or the can

531
00:17:39,280 --> 00:17:42,799
but by paying attention it seems like um

532
00:17:42,799 --> 00:17:44,160
the firmware is doing a really good job

533
00:17:44,160 --> 00:17:45,600
at you know verifying that you don't

534
00:17:45,600 --> 00:17:48,080
have you know sending too much data data

535
00:17:48,080 --> 00:17:50,000
out of order and things like that so

536
00:17:50,000 --> 00:17:51,520
actually through like static analysis

537
00:17:51,520 --> 00:17:53,679
nothing obvious like sticked out

538
00:17:53,679 --> 00:17:56,080
um another approach could be just trying

539
00:17:56,080 --> 00:17:57,520
to find like the firmware update

540
00:17:57,520 --> 00:17:59,039
function and maybe we could just trigger

541
00:17:59,039 --> 00:18:00,799
like a rogue like firmware updates you

542
00:18:00,799 --> 00:18:02,799
don't need to point anything if you can

543
00:18:02,799 --> 00:18:04,240
just you know

544
00:18:04,240 --> 00:18:06,160
hack it to the firmware directly

545
00:18:06,160 --> 00:18:08,640
turns out that the application itself

546
00:18:08,640 --> 00:18:10,960
cannot refresh itself

547
00:18:10,960 --> 00:18:12,640
only the bootloader can refresh the

548
00:18:12,640 --> 00:18:14,240
stuff but that would be absolutely like

549
00:18:14,240 --> 00:18:15,760
an angle to consider just you know

550
00:18:15,760 --> 00:18:17,840
rebooting bootloader mode and try to

551
00:18:17,840 --> 00:18:20,880
flash a raw firmware but instead of

552
00:18:20,880 --> 00:18:22,720
going that word we were just like well

553
00:18:22,720 --> 00:18:24,160
you know we have a bunch of critical

554
00:18:24,160 --> 00:18:25,600
data so you know like the drug library

555
00:18:25,600 --> 00:18:27,760
that we'll see in a minute and all this

556
00:18:27,760 --> 00:18:29,520
database stuff that are like exposed on

557
00:18:29,520 --> 00:18:32,080
the canvas so that's really interesting

558
00:18:32,080 --> 00:18:34,960
uh and that's the the the path forward

559
00:18:34,960 --> 00:18:36,240
um

560
00:18:36,240 --> 00:18:38,320
and so but one question remain is like

561
00:18:38,320 --> 00:18:40,480
how do we send canned messages to the

562
00:18:40,480 --> 00:18:42,720
pump and that's how like dogs come back

563
00:18:42,720 --> 00:18:44,320
and explain uh

564
00:18:44,320 --> 00:18:47,200
how we go about that

565
00:18:48,720 --> 00:18:50,160
all right so felipe did all this awesome

566
00:18:50,160 --> 00:18:52,000
work on on understanding what the

567
00:18:52,000 --> 00:18:53,919
internals of the pump looks like but as

568
00:18:53,919 --> 00:18:55,360
it is it's internal and that's not

569
00:18:55,360 --> 00:18:57,360
accessible on the network so in order

570
00:18:57,360 --> 00:18:59,440
for us to get at the internal database

571
00:18:59,440 --> 00:19:00,960
that he talks about or the can bus we

572
00:19:00,960 --> 00:19:02,799
have to find a way to access the pump

573
00:19:02,799 --> 00:19:05,120
through the spacecom operating system

574
00:19:05,120 --> 00:19:06,960
so as part of the the vulnerability

575
00:19:06,960 --> 00:19:08,480
research process just like philippe

576
00:19:08,480 --> 00:19:10,080
talked about too we have to start doing

577
00:19:10,080 --> 00:19:12,720
recon of the spacecom device and look

578
00:19:12,720 --> 00:19:14,880
for any bugs that may let us get there

579
00:19:14,880 --> 00:19:17,280
and part of that is looking at that json

580
00:19:17,280 --> 00:19:19,600
dbus bridge application and since that

581
00:19:19,600 --> 00:19:21,919
application is open source we get a lot

582
00:19:21,919 --> 00:19:23,760
of information just from its source code

583
00:19:23,760 --> 00:19:25,840
and from github well

584
00:19:25,840 --> 00:19:28,000
through uh through perusing the github

585
00:19:28,000 --> 00:19:29,840
commit messages we went across this one

586
00:19:29,840 --> 00:19:32,320
up on the screen that says fix sending

587
00:19:32,320 --> 00:19:35,200
json containing percent characters now

588
00:19:35,200 --> 00:19:36,960
if you've done exploitation or

589
00:19:36,960 --> 00:19:39,039
vulnerability research before some flag

590
00:19:39,039 --> 00:19:40,480
goes off in your head when you hear

591
00:19:40,480 --> 00:19:42,640
sending percent characters and that has

592
00:19:42,640 --> 00:19:43,919
to do around a format string

593
00:19:43,919 --> 00:19:46,240
vulnerability and and sure enough if you

594
00:19:46,240 --> 00:19:47,840
look a little bit further down and at

595
00:19:47,840 --> 00:19:50,000
the actual commit what they're doing is

596
00:19:50,000 --> 00:19:51,919
they're replacing a printf which is

597
00:19:51,919 --> 00:19:54,720
taking unsanitized json from the network

598
00:19:54,720 --> 00:19:56,240
and putting it right into a variable

599
00:19:56,240 --> 00:19:58,080
they're replacing with the puts to fix

600
00:19:58,080 --> 00:20:00,559
that vulnerability now if you notice

601
00:20:00,559 --> 00:20:03,120
this commit message is from 2015 and i

602
00:20:03,120 --> 00:20:04,559
had mentioned that the devices were

603
00:20:04,559 --> 00:20:07,280
looking at from 2017 so this

604
00:20:07,280 --> 00:20:08,880
vulnerability should definitely not

605
00:20:08,880 --> 00:20:10,799
exist in this software because the

606
00:20:10,799 --> 00:20:12,720
vendor should be using the most current

607
00:20:12,720 --> 00:20:13,679
version

608
00:20:13,679 --> 00:20:15,679
but we've learned from past experiences

609
00:20:15,679 --> 00:20:17,760
we should always double check this right

610
00:20:17,760 --> 00:20:19,200
just to make sure

611
00:20:19,200 --> 00:20:21,360
and so this is actually very easy to to

612
00:20:21,360 --> 00:20:23,440
check really quickly we just send a curl

613
00:20:23,440 --> 00:20:26,799
message to the device looking for

614
00:20:26,799 --> 00:20:29,280
the json dbus bridge and we add a few uh

615
00:20:29,280 --> 00:20:31,280
format string conditionals into the

616
00:20:31,280 --> 00:20:33,440
statement and lo and behold if you look

617
00:20:33,440 --> 00:20:35,120
back we get an error message but that

618
00:20:35,120 --> 00:20:36,720
error message contains a few more

619
00:20:36,720 --> 00:20:38,480
interesting characters than it normally

620
00:20:38,480 --> 00:20:40,880
does uh and those actually are memory

621
00:20:40,880 --> 00:20:42,000
addresses

622
00:20:42,000 --> 00:20:43,679
now do the pandemic and us working

623
00:20:43,679 --> 00:20:45,760
halfway around the world we always had

624
00:20:45,760 --> 00:20:48,240
to work on things like slack and zoom so

625
00:20:48,240 --> 00:20:50,159
with video conferencing but fortunately

626
00:20:50,159 --> 00:20:51,600
enough for you i was able to take a

627
00:20:51,600 --> 00:20:53,760
screenshot of philippe's face when we

628
00:20:53,760 --> 00:20:55,760
actually discovered this and he was

629
00:20:55,760 --> 00:20:57,440
pretty excited about the whole ordeal

630
00:20:57,440 --> 00:20:59,039
and and the reason for that is we had

631
00:20:59,039 --> 00:21:01,360
found an initial access point right now

632
00:21:01,360 --> 00:21:03,280
all we had to do was leverage that

633
00:21:03,280 --> 00:21:06,480
format string vulnerability in some way

634
00:21:06,480 --> 00:21:08,480
now this this proved to be a little bit

635
00:21:08,480 --> 00:21:09,760
more difficult than we initially

636
00:21:09,760 --> 00:21:12,000
anticipated but we were able to write a

637
00:21:12,000 --> 00:21:14,320
working exploit for this uh format

638
00:21:14,320 --> 00:21:16,400
string vulnerability and just to sum it

639
00:21:16,400 --> 00:21:18,640
up we did this by leaking a lot of

640
00:21:18,640 --> 00:21:21,039
memory using the percent x

641
00:21:21,039 --> 00:21:23,440
format string identifier and then we use

642
00:21:23,440 --> 00:21:26,080
the percent n identifier to overwrite an

643
00:21:26,080 --> 00:21:28,080
address in the plt remember on a power

644
00:21:28,080 --> 00:21:30,400
pc processor at this point and we'd

645
00:21:30,400 --> 00:21:32,559
ended up doing a classic return lib c

646
00:21:32,559 --> 00:21:33,440
attack

647
00:21:33,440 --> 00:21:35,280
and that was all exciting when it worked

648
00:21:35,280 --> 00:21:36,960
until we were slightly disappointed that

649
00:21:36,960 --> 00:21:39,679
all that got us was user level access

650
00:21:39,679 --> 00:21:41,440
which did not provide us a lot of access

651
00:21:41,440 --> 00:21:42,720
to the device

652
00:21:42,720 --> 00:21:44,559
so of course the next logical step in

653
00:21:44,559 --> 00:21:46,000
this progression is well i guess we're

654
00:21:46,000 --> 00:21:47,360
going to keep looking for a way to get

655
00:21:47,360 --> 00:21:48,240
root

656
00:21:48,240 --> 00:21:50,640
how do we escalate our privileges

657
00:21:50,640 --> 00:21:52,080
because that's going to give us the most

658
00:21:52,080 --> 00:21:53,840
ability to again get over to that

659
00:21:53,840 --> 00:21:55,840
critical operating system

660
00:21:55,840 --> 00:21:57,280
so a little bit more background about

661
00:21:57,280 --> 00:21:59,200
the device through the web interface it

662
00:21:59,200 --> 00:22:02,000
has a component that allows you to

663
00:22:02,000 --> 00:22:03,919
backup and restore settings of that

664
00:22:03,919 --> 00:22:05,440
device they call they call it their

665
00:22:05,440 --> 00:22:08,159
config export and import operations

666
00:22:08,159 --> 00:22:08,880
and

667
00:22:08,880 --> 00:22:10,799
during that the way that process works

668
00:22:10,799 --> 00:22:12,880
is it tars up all the settings on the

669
00:22:12,880 --> 00:22:15,520
device allows the user to download them

670
00:22:15,520 --> 00:22:17,280
and then when you want to restore that

671
00:22:17,280 --> 00:22:19,120
it takes that tar and untards it and

672
00:22:19,120 --> 00:22:21,360
replace the settings on the device

673
00:22:21,360 --> 00:22:23,520
conveniently that tar directory

674
00:22:23,520 --> 00:22:26,559
maintains all the permissions of the the

675
00:22:26,559 --> 00:22:28,640
binaries and the folders that it's given

676
00:22:28,640 --> 00:22:31,440
on that tar directory so for example if

677
00:22:31,440 --> 00:22:33,679
we were to set a binary with the set uid

678
00:22:33,679 --> 00:22:35,679
bit and load it up in that tar folder it

679
00:22:35,679 --> 00:22:38,240
maintains that that permission

680
00:22:38,240 --> 00:22:41,520
even better it during the process it has

681
00:22:41,520 --> 00:22:43,919
a binary called the config export binary

682
00:22:43,919 --> 00:22:46,559
which is exact being a bash script

683
00:22:46,559 --> 00:22:49,120
and so we simply patched the binary that

684
00:22:49,120 --> 00:22:50,720
they're already using to call an

685
00:22:50,720 --> 00:22:53,039
attacker controlled script and leverage

686
00:22:53,039 --> 00:22:55,200
this import export of settings to obtain

687
00:22:55,200 --> 00:22:57,200
root access on the device

688
00:22:57,200 --> 00:22:58,640
now i have to call out and give credit

689
00:22:58,640 --> 00:23:00,640
to manumed here as i said they published

690
00:23:00,640 --> 00:23:01,840
a report

691
00:23:01,840 --> 00:23:03,600
that also included this device and they

692
00:23:03,600 --> 00:23:05,600
had this vulnerability in that device as

693
00:23:05,600 --> 00:23:07,520
well looking at the publication dates we

694
00:23:07,520 --> 00:23:09,280
were probably looking at it at almost

695
00:23:09,280 --> 00:23:11,039
the exact same time

696
00:23:11,039 --> 00:23:12,799
but kudos go out to them and this

697
00:23:12,799 --> 00:23:14,480
vulnerability was instrumental in us

698
00:23:14,480 --> 00:23:18,000
moving forward in this in this project

699
00:23:18,000 --> 00:23:19,760
all right so we got root right we can

700
00:23:19,760 --> 00:23:22,559
pack up and go home uh that should

701
00:23:22,559 --> 00:23:24,320
that's not usually our style we're

702
00:23:24,320 --> 00:23:25,440
looking to

703
00:23:25,440 --> 00:23:27,919
to come up with a realistic attack

704
00:23:27,919 --> 00:23:30,080
scenario and when we talk about embedded

705
00:23:30,080 --> 00:23:32,080
devices or medical devices

706
00:23:32,080 --> 00:23:34,159
root actually isn't where it ends it's

707
00:23:34,159 --> 00:23:36,720
almost where it begins and so the

708
00:23:36,720 --> 00:23:39,520
question become can how can we control

709
00:23:39,520 --> 00:23:40,960
the critical operating system that

710
00:23:40,960 --> 00:23:43,360
philippe was working on with root access

711
00:23:43,360 --> 00:23:45,919
on space com device and an extra

712
00:23:45,919 --> 00:23:47,840
challenge for us is the vendor told us

713
00:23:47,840 --> 00:23:49,360
that's not possible that there's

714
00:23:49,360 --> 00:23:51,200
segmentation and that doesn't allow it

715
00:23:51,200 --> 00:23:53,279
doesn't allow for that to occur so we

716
00:23:53,279 --> 00:23:55,200
sought out to answer that question is

717
00:23:55,200 --> 00:23:57,279
there a way that we can actually hack

718
00:23:57,279 --> 00:23:59,200
the patient

719
00:23:59,200 --> 00:24:00,320
so

720
00:24:00,320 --> 00:24:02,080
there's a couple ways to approach this

721
00:24:02,080 --> 00:24:04,159
we could continue to look for another

722
00:24:04,159 --> 00:24:06,799
vulnerability or another zero day as a

723
00:24:06,799 --> 00:24:08,559
way to progress into the critical

724
00:24:08,559 --> 00:24:10,240
operating system

725
00:24:10,240 --> 00:24:11,840
but we like to do what we call living

726
00:24:11,840 --> 00:24:14,400
off the land which is once we have roots

727
00:24:14,400 --> 00:24:16,640
how can we use what's already on the

728
00:24:16,640 --> 00:24:19,440
system maybe in an unintended way or an

729
00:24:19,440 --> 00:24:21,600
intended way to get the

730
00:24:21,600 --> 00:24:23,360
outcome that we're looking for

731
00:24:23,360 --> 00:24:25,279
so if you've been paying attention you

732
00:24:25,279 --> 00:24:26,480
might be saying to yourself well you've

733
00:24:26,480 --> 00:24:28,000
got root access you know there's a can

734
00:24:28,000 --> 00:24:30,400
bus just right to the can bus and that's

735
00:24:30,400 --> 00:24:32,080
absolutely correct we could do that but

736
00:24:32,080 --> 00:24:33,600
there are several challenges in doing

737
00:24:33,600 --> 00:24:35,600
that it that way we have to understand

738
00:24:35,600 --> 00:24:37,440
the format of the can messages we have

739
00:24:37,440 --> 00:24:39,200
to understand what the conversation the

740
00:24:39,200 --> 00:24:41,279
call and response looks like and that's

741
00:24:41,279 --> 00:24:43,919
doable but it's very difficult or more

742
00:24:43,919 --> 00:24:46,400
difficult we're lazy hackers like most

743
00:24:46,400 --> 00:24:47,279
so

744
00:24:47,279 --> 00:24:49,520
we know that the system already has

745
00:24:49,520 --> 00:24:52,159
binaries that do this right the pcs

746
00:24:52,159 --> 00:24:54,240
binary being one of them if it's going

747
00:24:54,240 --> 00:24:56,080
to talk to the other side well it must

748
00:24:56,080 --> 00:24:58,320
create those canned messages and it must

749
00:24:58,320 --> 00:25:00,880
execute those commands why not leverage

750
00:25:00,880 --> 00:25:02,720
what already exists

751
00:25:02,720 --> 00:25:04,640
so i thought i sought out to dig into

752
00:25:04,640 --> 00:25:06,559
that pcs binary

753
00:25:06,559 --> 00:25:08,559
i had my job was a little bit easier

754
00:25:08,559 --> 00:25:10,080
than philippe and the fact that i didn't

755
00:25:10,080 --> 00:25:11,760
have symbols but i had a lot of

756
00:25:11,760 --> 00:25:13,440
debugging information that was still

757
00:25:13,440 --> 00:25:16,400
inside of pcs this is just one example

758
00:25:16,400 --> 00:25:18,080
there were a lot of debugging messages

759
00:25:18,080 --> 00:25:20,720
that also also contained function names

760
00:25:20,720 --> 00:25:22,880
and function names as some may know can

761
00:25:22,880 --> 00:25:24,480
sometimes be a rosetta stone to what

762
00:25:24,480 --> 00:25:26,720
each function is supposed to do so we

763
00:25:26,720 --> 00:25:28,559
utilized a lot i used a lot as a lot of

764
00:25:28,559 --> 00:25:31,200
the function names and then additionally

765
00:25:31,200 --> 00:25:33,760
it had c plus plus type information now

766
00:25:33,760 --> 00:25:35,679
we're looking for functions that talk on

767
00:25:35,679 --> 00:25:37,440
the can bus and i ran across these

768
00:25:37,440 --> 00:25:40,400
objects called uh can operators there's

769
00:25:40,400 --> 00:25:42,240
three different ones of them and then

770
00:25:42,240 --> 00:25:43,760
using that and combining with function

771
00:25:43,760 --> 00:25:45,600
names we can actually almost flush out

772
00:25:45,600 --> 00:25:48,240
the entire vtable lookup on the screen

773
00:25:48,240 --> 00:25:49,679
above as well

774
00:25:49,679 --> 00:25:52,240
and last but not least we know that the

775
00:25:52,240 --> 00:25:53,279
function

776
00:25:53,279 --> 00:25:55,200
this binary's purpose is to ingest

777
00:25:55,200 --> 00:25:57,360
commands from the network so if we take

778
00:25:57,360 --> 00:25:59,120
a look at the case statement in the

779
00:25:59,120 --> 00:26:01,440
binary and we've obviously cleaned it up

780
00:26:01,440 --> 00:26:02,880
the fun the variable names and

781
00:26:02,880 --> 00:26:03,840
everything

782
00:26:03,840 --> 00:26:04,880
uh

783
00:26:04,880 --> 00:26:06,640
if we if we look at that function we can

784
00:26:06,640 --> 00:26:08,799
get a good clue of what's going on and

785
00:26:08,799 --> 00:26:11,279
we can break these commands into two

786
00:26:11,279 --> 00:26:13,600
major categories there's download

787
00:26:13,600 --> 00:26:15,440
commands and upload commands for the

788
00:26:15,440 --> 00:26:16,960
most part

789
00:26:16,960 --> 00:26:18,559
now upload commands are interesting

790
00:26:18,559 --> 00:26:19,840
because it would allow us to upload

791
00:26:19,840 --> 00:26:21,919
something to the pump however again that

792
00:26:21,919 --> 00:26:23,679
requires an extra step we have to

793
00:26:23,679 --> 00:26:25,760
understand what is it expecting for that

794
00:26:25,760 --> 00:26:28,320
upload what is the format of those files

795
00:26:28,320 --> 00:26:29,919
what any integrity checking that goes

796
00:26:29,919 --> 00:26:31,200
along with that

797
00:26:31,200 --> 00:26:33,120
where if our main purpose is just to

798
00:26:33,120 --> 00:26:35,440
talk over the can bus or to get a hold

799
00:26:35,440 --> 00:26:37,840
of that process the download commands

800
00:26:37,840 --> 00:26:40,480
also talk across the can bus to the

801
00:26:40,480 --> 00:26:41,840
critical operating system but they don't

802
00:26:41,840 --> 00:26:43,919
require any additional information

803
00:26:43,919 --> 00:26:46,000
they're the read functions

804
00:26:46,000 --> 00:26:47,039
so

805
00:26:47,039 --> 00:26:50,240
if if we put all and also the i'm sorry

806
00:26:50,240 --> 00:26:51,840
the command that is highlighted here is

807
00:26:51,840 --> 00:26:54,559
the download pump config command well we

808
00:26:54,559 --> 00:26:56,400
saw that there is a can operator called

809
00:26:56,400 --> 00:26:58,960
the pump config can operator so there's

810
00:26:58,960 --> 00:27:01,039
a good chance that the download pump

811
00:27:01,039 --> 00:27:04,080
config command builds a pump can config

812
00:27:04,080 --> 00:27:05,840
operator which we know talks on the

813
00:27:05,840 --> 00:27:09,039
canvas or at least suspect it does

814
00:27:09,039 --> 00:27:11,039
so if we use all of these components we

815
00:27:11,039 --> 00:27:12,480
can actually through a lot more item

816
00:27:12,480 --> 00:27:14,000
reversing that i don't have time to get

817
00:27:14,000 --> 00:27:16,880
into we can construct the call chain of

818
00:27:16,880 --> 00:27:19,039
what it takes to actually send a message

819
00:27:19,039 --> 00:27:21,919
from spacecom with root access over to

820
00:27:21,919 --> 00:27:24,159
the critical operating system side

821
00:27:24,159 --> 00:27:26,159
first thing we have to do is we have to

822
00:27:26,159 --> 00:27:27,919
activate what's called service mode and

823
00:27:27,919 --> 00:27:29,600
this just puts the pump in a mode that

824
00:27:29,600 --> 00:27:31,440
it's expecting commands

825
00:27:31,440 --> 00:27:32,960
and then we have to disable flash

826
00:27:32,960 --> 00:27:35,760
protection we have to trigger that

827
00:27:35,760 --> 00:27:38,000
the construction of that pump config can

828
00:27:38,000 --> 00:27:40,080
operator we can do that using the

829
00:27:40,080 --> 00:27:42,320
download pump config command we have to

830
00:27:42,320 --> 00:27:43,840
actually write the data there's a

831
00:27:43,840 --> 00:27:45,520
function called service that service

832
00:27:45,520 --> 00:27:47,440
data which accomplishes that and then we

833
00:27:47,440 --> 00:27:48,720
have to reverse

834
00:27:48,720 --> 00:27:50,880
reverse the process re-enable the flash

835
00:27:50,880 --> 00:27:53,600
protection and disable service mode

836
00:27:53,600 --> 00:27:56,080
so great now we understand what it takes

837
00:27:56,080 --> 00:27:58,320
to make a change now we need to actually

838
00:27:58,320 --> 00:28:00,880
with that root access make a change and

839
00:28:00,880 --> 00:28:02,480
typically if you were a malicious actor

840
00:28:02,480 --> 00:28:03,760
at this point this is where you would

841
00:28:03,760 --> 00:28:05,760
write your custom malware

842
00:28:05,760 --> 00:28:07,520
and again that's a great a long and

843
00:28:07,520 --> 00:28:09,200
lengthy process and so we wanted to

844
00:28:09,200 --> 00:28:10,799
shortcut a little bit since we're not

845
00:28:10,799 --> 00:28:12,880
actually malicious actors

846
00:28:12,880 --> 00:28:15,120
looking to weaponize this and we can do

847
00:28:15,120 --> 00:28:17,760
that use through using gdb i don't

848
00:28:17,760 --> 00:28:19,279
probably may have never thought of gdp

849
00:28:19,279 --> 00:28:20,799
this way but it kind of mimics a lot of

850
00:28:20,799 --> 00:28:22,640
what malware does right it can it can

851
00:28:22,640 --> 00:28:25,120
hook a process it can send commands and

852
00:28:25,120 --> 00:28:27,279
so what we did is we you we're using gdb

853
00:28:27,279 --> 00:28:30,159
server to attach to pcs we put a break

854
00:28:30,159 --> 00:28:32,080
point to grab that pump config can

855
00:28:32,080 --> 00:28:34,159
operator when uh

856
00:28:34,159 --> 00:28:35,919
when that download pump config command

857
00:28:35,919 --> 00:28:37,919
is sent across the wire so now we have

858
00:28:37,919 --> 00:28:40,159
the data structure required to send

859
00:28:40,159 --> 00:28:42,159
messages and then we can execute

860
00:28:42,159 --> 00:28:44,240
function call chain with that operator

861
00:28:44,240 --> 00:28:45,279
in hand

862
00:28:45,279 --> 00:28:46,799
great except for now we need to know

863
00:28:46,799 --> 00:28:48,720
what the heck we need to change it's

864
00:28:48,720 --> 00:28:50,480
kind of like an exploitation you get a

865
00:28:50,480 --> 00:28:52,080
got override or something you're like

866
00:28:52,080 --> 00:28:53,520
okay i can write anything anywhere i

867
00:28:53,520 --> 00:28:55,760
want but what do i want to write well

868
00:28:55,760 --> 00:28:57,360
this is a medical device so in order to

869
00:28:57,360 --> 00:28:58,880
do that we have to understand in the

870
00:28:58,880 --> 00:29:01,120
context of the medical device what makes

871
00:29:01,120 --> 00:29:03,279
a meaningful meaningful change what is

872
00:29:03,279 --> 00:29:05,200
the critical data on the on the pump and

873
00:29:05,200 --> 00:29:06,240
for that i'm going to hand this back

874
00:29:06,240 --> 00:29:08,080
over to philippe to explain the critical

875
00:29:08,080 --> 00:29:09,200
data

876
00:29:09,200 --> 00:29:11,279
thank you

877
00:29:11,279 --> 00:29:13,919
so yeah um we want to mess with critical

878
00:29:13,919 --> 00:29:15,600
data and basically answer the question

879
00:29:15,600 --> 00:29:18,320
like what what can we mess with and have

880
00:29:18,320 --> 00:29:20,559
interesting impact

881
00:29:20,559 --> 00:29:21,600
so

882
00:29:21,600 --> 00:29:23,440
there's a logarithm like two angles we

883
00:29:23,440 --> 00:29:25,600
considered uh one was going after the

884
00:29:25,600 --> 00:29:27,679
drug library which is basically what

885
00:29:27,679 --> 00:29:29,440
gives like the smart pump like it's

886
00:29:29,440 --> 00:29:31,279
smarts it's uh it's kind of like a

887
00:29:31,279 --> 00:29:34,159
safety net that prevents like improper

888
00:29:34,159 --> 00:29:35,919
um

889
00:29:35,919 --> 00:29:38,799
drug settings like for for patients

890
00:29:38,799 --> 00:29:40,320
uh and you know like default uh

891
00:29:40,320 --> 00:29:41,760
concentration of drugs and that kind of

892
00:29:41,760 --> 00:29:43,279
stuff

893
00:29:43,279 --> 00:29:46,960
so uh the idea is um

894
00:29:46,960 --> 00:29:48,559
the you know like it's to prevent the

895
00:29:48,559 --> 00:29:49,919
situation more like for instance like a

896
00:29:49,919 --> 00:29:51,360
nurse or a doctor would accidentally

897
00:29:51,360 --> 00:29:53,200
like pick the wrong concentration or

898
00:29:53,200 --> 00:29:55,840
like had one extra zero on the thing it

899
00:29:55,840 --> 00:29:57,279
would like deep and be like that's not

900
00:29:57,279 --> 00:29:58,320
good

901
00:29:58,320 --> 00:30:00,960
so the problem with that is in in terms

902
00:30:00,960 --> 00:30:02,799
of impact is in

903
00:30:02,799 --> 00:30:05,200
most likely all likelihood um

904
00:30:05,200 --> 00:30:07,200
everything we could modify there

905
00:30:07,200 --> 00:30:08,720
will likely be also printed on the

906
00:30:08,720 --> 00:30:09,600
screen

907
00:30:09,600 --> 00:30:11,600
of the pump and the nurse or the doctor

908
00:30:11,600 --> 00:30:13,200
are like also expected to double check

909
00:30:13,200 --> 00:30:13,840
if

910
00:30:13,840 --> 00:30:15,279
everything is okay

911
00:30:15,279 --> 00:30:17,360
and because of that at most we could you

912
00:30:17,360 --> 00:30:18,880
know

913
00:30:18,880 --> 00:30:20,880
remove like safety limitation but i

914
00:30:20,880 --> 00:30:22,960
would still rely on other people making

915
00:30:22,960 --> 00:30:24,640
mistakes to have an actual like serious

916
00:30:24,640 --> 00:30:26,559
impact

917
00:30:26,559 --> 00:30:28,080
and for that reason we consider

918
00:30:28,080 --> 00:30:29,840
something else as well which is messing

919
00:30:29,840 --> 00:30:32,480
with calibration and disposable data

920
00:30:32,480 --> 00:30:34,320
which is more like internal parameters

921
00:30:34,320 --> 00:30:36,799
that govern how the pump functions and

922
00:30:36,799 --> 00:30:38,880
those are not exposed to end users so

923
00:30:38,880 --> 00:30:40,559
it's not exposed to the doctor or the

924
00:30:40,559 --> 00:30:42,640
nurse and instead it's more like for

925
00:30:42,640 --> 00:30:44,000
servicing and that's more like the

926
00:30:44,000 --> 00:30:46,159
technician when they maintain the device

927
00:30:46,159 --> 00:30:48,480
with like mess with that so if we tamper

928
00:30:48,480 --> 00:30:50,240
with that it's most likely going to end

929
00:30:50,240 --> 00:30:52,880
back under the radar

930
00:30:52,880 --> 00:30:54,640
so just to give you an idea uh here's

931
00:30:54,640 --> 00:30:57,279
like kaitai which is like a whatever

932
00:30:57,279 --> 00:31:00,000
software to help like passing data and i

933
00:31:00,000 --> 00:31:02,720
was working on reversing

934
00:31:02,720 --> 00:31:05,600
the drug library format so that's a on

935
00:31:05,600 --> 00:31:07,600
top left is you know like the

936
00:31:07,600 --> 00:31:09,360
description i was writing and it's

937
00:31:09,360 --> 00:31:11,760
really nice because you can um it passes

938
00:31:11,760 --> 00:31:13,919
automatically and so it helps for like

939
00:31:13,919 --> 00:31:15,679
visualizing the data and making sure you

940
00:31:15,679 --> 00:31:17,279
understand you like when you're

941
00:31:17,279 --> 00:31:19,679
reversing the um

942
00:31:19,679 --> 00:31:21,360
the code in the firmware you can make

943
00:31:21,360 --> 00:31:23,360
sure that it makes sense like by looking

944
00:31:23,360 --> 00:31:24,480
at the data

945
00:31:24,480 --> 00:31:26,240
so and here it was just like reversing

946
00:31:26,240 --> 00:31:27,840
like some strings

947
00:31:27,840 --> 00:31:29,440
unfortunately like when i was doing that

948
00:31:29,440 --> 00:31:31,600
i was hoping i might find you know one

949
00:31:31,600 --> 00:31:33,120
settings that actually don't show up on

950
00:31:33,120 --> 00:31:34,960
screen but i didn't find anything

951
00:31:34,960 --> 00:31:37,600
interesting in that regard so uh the

952
00:31:37,600 --> 00:31:39,919
best we got was this one where we were

953
00:31:39,919 --> 00:31:41,919
like able to modify the name of like a

954
00:31:41,919 --> 00:31:44,000
word to put like our team names in it

955
00:31:44,000 --> 00:31:46,399
and the idea was we're able to retrieve

956
00:31:46,399 --> 00:31:48,960
the drug library from the pump modify it

957
00:31:48,960 --> 00:31:51,600
patch everything fix all the css push it

958
00:31:51,600 --> 00:31:53,039
back to the pump and verify it was

959
00:31:53,039 --> 00:31:55,039
accepted which shows we're able to

960
00:31:55,039 --> 00:31:57,519
tamper with the drug library which has

961
00:31:57,519 --> 00:31:59,519
already like important impact

962
00:31:59,519 --> 00:32:02,399
but not as critical as this one which is

963
00:32:02,399 --> 00:32:04,480
messing with disposable data

964
00:32:04,480 --> 00:32:07,519
and basically the idea is like um

965
00:32:07,519 --> 00:32:09,600
the pump needs to know uh physical

966
00:32:09,600 --> 00:32:11,600
properties of the tubes that it's being

967
00:32:11,600 --> 00:32:14,159
used like infusion and the same way as a

968
00:32:14,159 --> 00:32:15,600
printer can use like different type of

969
00:32:15,600 --> 00:32:17,919
cartridges or paper or whatever

970
00:32:17,919 --> 00:32:19,519
the pump can use different type of tubes

971
00:32:19,519 --> 00:32:21,440
and that's why you need to specify the

972
00:32:21,440 --> 00:32:24,159
physical properties so on the left side

973
00:32:24,159 --> 00:32:26,159
of the slide you can see like a bunch of

974
00:32:26,159 --> 00:32:27,919
these properties and actually all of

975
00:32:27,919 --> 00:32:29,919
them are like keys in the database i was

976
00:32:29,919 --> 00:32:32,000
talking uh previously about

977
00:32:32,000 --> 00:32:34,000
and the one that uh struck my attention

978
00:32:34,000 --> 00:32:36,480
was the tuber head volume because that

979
00:32:36,480 --> 00:32:38,799
one is actually for the pump kind of

980
00:32:38,799 --> 00:32:41,600
like the volume of the tube inside the

981
00:32:41,600 --> 00:32:44,000
pump itself and basically every time the

982
00:32:44,000 --> 00:32:45,679
pump is pumping that's the amount of

983
00:32:45,679 --> 00:32:47,679
drug that's pushed on the line

984
00:32:47,679 --> 00:32:50,080
and so for the pump to knows how much

985
00:32:50,080 --> 00:32:52,080
drug is being pushed it needs that value

986
00:32:52,080 --> 00:32:53,440
and so if you tamper with it like the

987
00:32:53,440 --> 00:32:54,960
pump is just going to do like the math

988
00:32:54,960 --> 00:32:57,120
wrong and completely like misestimate

989
00:32:57,120 --> 00:32:58,799
the amount of drug going through and

990
00:32:58,799 --> 00:33:01,840
that leads to either like under um under

991
00:33:01,840 --> 00:33:04,880
those edge or like over um overdose

992
00:33:04,880 --> 00:33:07,200
and i put like a little uh in red some

993
00:33:07,200 --> 00:33:09,200
of the math being done but just for like

994
00:33:09,200 --> 00:33:11,120
illustration purposes

995
00:33:11,120 --> 00:33:12,159
um

996
00:33:12,159 --> 00:33:14,399
so here's like dog are already ready to

997
00:33:14,399 --> 00:33:15,840
like hack the patient

998
00:33:15,840 --> 00:33:17,679
uh but just to like summer summer plug

999
00:33:17,679 --> 00:33:18,960
the whole stuff

1000
00:33:18,960 --> 00:33:22,240
we're going to modify the two bed volume

1001
00:33:22,240 --> 00:33:23,760
and for that we're going to mess with

1002
00:33:23,760 --> 00:33:25,279
the internal database and that's going

1003
00:33:25,279 --> 00:33:27,039
to be stored in the flash memory and to

1004
00:33:27,039 --> 00:33:29,360
do that are we going to rely on pcs this

1005
00:33:29,360 --> 00:33:31,600
instrument is with gdb to call the set

1006
00:33:31,600 --> 00:33:34,000
service data uh that's going to issue

1007
00:33:34,000 --> 00:33:36,000
all the kind messages we need and for

1008
00:33:36,000 --> 00:33:38,640
that to be successful um we had to

1009
00:33:38,640 --> 00:33:40,480
figure like multiple css and i was like

1010
00:33:40,480 --> 00:33:42,240
created just because we didn't figure

1011
00:33:42,240 --> 00:33:45,360
out the proper like memory map memory

1012
00:33:45,360 --> 00:33:48,559
layout of those data fields and

1013
00:33:48,559 --> 00:33:50,640
they're also using custom css so that

1014
00:33:50,640 --> 00:33:54,000
was annoying and on top of that uh we

1015
00:33:54,000 --> 00:33:56,640
also need to erase the um

1016
00:33:56,640 --> 00:33:58,559
the disposable data that's on the pump

1017
00:33:58,559 --> 00:34:00,159
because they're literally just exposing

1018
00:34:00,159 --> 00:34:03,440
the right to flash function and it's a

1019
00:34:03,440 --> 00:34:05,120
it's a kind of situation like if you're

1020
00:34:05,120 --> 00:34:07,039
right and you don't erase it overlaps

1021
00:34:07,039 --> 00:34:08,159
the data

1022
00:34:08,159 --> 00:34:11,440
and everything gets like up um

1023
00:34:11,440 --> 00:34:13,280
and we realized that too late and i

1024
00:34:13,280 --> 00:34:15,359
think we break like one or two pumps and

1025
00:34:15,359 --> 00:34:17,119
we are pretty sad about it but

1026
00:34:17,119 --> 00:34:18,399
eventually we understood what was the

1027
00:34:18,399 --> 00:34:21,119
problem uh and we moved on

1028
00:34:21,119 --> 00:34:22,800
and i guess with that like dog is going

1029
00:34:22,800 --> 00:34:26,240
to show you like the results

1030
00:34:27,760 --> 00:34:29,520
so now now we knew what we need to

1031
00:34:29,520 --> 00:34:31,679
modify so just kind of recap so we know

1032
00:34:31,679 --> 00:34:33,679
how we can get access to the device over

1033
00:34:33,679 --> 00:34:35,359
the network we know how we can get root

1034
00:34:35,359 --> 00:34:37,440
access using that device we know what

1035
00:34:37,440 --> 00:34:39,520
data we need to modify and understand

1036
00:34:39,520 --> 00:34:41,040
the call chain in which it takes to

1037
00:34:41,040 --> 00:34:43,520
modify that data so let's go ahead and

1038
00:34:43,520 --> 00:34:46,000
see what that process would look like in

1039
00:34:46,000 --> 00:34:47,520
in real life

1040
00:34:47,520 --> 00:34:49,040
so here we have a space station with a

1041
00:34:49,040 --> 00:34:51,440
pump installed with 50 milliliters of

1042
00:34:51,440 --> 00:34:53,760
drug or in our case water in the in the

1043
00:34:53,760 --> 00:34:55,679
holding chamber and we're going to be

1044
00:34:55,679 --> 00:34:57,680
good scientists and first do a basic use

1045
00:34:57,680 --> 00:35:00,079
case and and just run the pump as

1046
00:35:00,079 --> 00:35:02,560
designed with no modifications so this

1047
00:35:02,560 --> 00:35:05,520
is just following the sop of the manual

1048
00:35:05,520 --> 00:35:07,599
and doing exactly what's prescribed so

1049
00:35:07,599 --> 00:35:09,280
we're going to load it with a basic

1050
00:35:09,280 --> 00:35:11,440
infusion we're going to use a hundred

1051
00:35:11,440 --> 00:35:12,720
milliliters

1052
00:35:12,720 --> 00:35:15,119
an hour with a thousand vtbi which

1053
00:35:15,119 --> 00:35:17,200
stands for volume to be infused again

1054
00:35:17,200 --> 00:35:18,560
this is what was recommended by our

1055
00:35:18,560 --> 00:35:20,320
industry partners and what we would

1056
00:35:20,320 --> 00:35:23,040
expect to see is in a normal use case

1057
00:35:23,040 --> 00:35:26,240
the amount of drugs that is being

1058
00:35:26,240 --> 00:35:28,400
dispensed to the patient should match

1059
00:35:28,400 --> 00:35:29,920
what the pump believes is being

1060
00:35:29,920 --> 00:35:31,920
dispensed so here on the screen in

1061
00:35:31,920 --> 00:35:33,760
approximately three ish minutes so we

1062
00:35:33,760 --> 00:35:35,760
did a time lapse to speed it up you'll

1063
00:35:35,760 --> 00:35:37,359
see that there's approximately five

1064
00:35:37,359 --> 00:35:39,040
milliliters being reported as being

1065
00:35:39,040 --> 00:35:40,880
dispensed and it's visually apparent as

1066
00:35:40,880 --> 00:35:43,680
well if you look at the uh they can

1067
00:35:43,680 --> 00:35:44,110
the tube

1068
00:35:44,110 --> 00:35:45,280
[Music]

1069
00:35:45,280 --> 00:35:46,560
so now we're going to go ahead and

1070
00:35:46,560 --> 00:35:47,920
leverage that attack chain that we've

1071
00:35:47,920 --> 00:35:49,359
been explaining to you so we're going to

1072
00:35:49,359 --> 00:35:50,640
leverage that format string

1073
00:35:50,640 --> 00:35:52,640
vulnerability using a python script

1074
00:35:52,640 --> 00:35:54,880
escalate our privileges using the tar

1075
00:35:54,880 --> 00:35:56,640
the tar feature we're going to upload

1076
00:35:56,640 --> 00:35:58,720
our tools being gdb server to the device

1077
00:35:58,720 --> 00:36:01,520
we're going to hook the pcs binary and

1078
00:36:01,520 --> 00:36:04,320
then we're going to send that download

1079
00:36:04,320 --> 00:36:06,720
pump config command because it accepts

1080
00:36:06,720 --> 00:36:09,359
unauthentic commands over the network in

1081
00:36:09,359 --> 00:36:11,760
clear text to get that can config

1082
00:36:11,760 --> 00:36:14,079
operator now here we're reading a value

1083
00:36:14,079 --> 00:36:15,599
from the database to see what it was

1084
00:36:15,599 --> 00:36:17,440
originally set to that's the tube head

1085
00:36:17,440 --> 00:36:19,359
volume that philippe talked about and

1086
00:36:19,359 --> 00:36:21,760
it's set to 15c in hex

1087
00:36:21,760 --> 00:36:23,440
now the attacker is going to go ahead

1088
00:36:23,440 --> 00:36:25,680
and do that erase and rewrite of that

1089
00:36:25,680 --> 00:36:28,240
internal database you'll notice that the

1090
00:36:28,240 --> 00:36:30,160
lights on the pump are flashing and

1091
00:36:30,160 --> 00:36:31,760
that's because we've put the pump in

1092
00:36:31,760 --> 00:36:33,680
service mode which the vendor says is

1093
00:36:33,680 --> 00:36:36,800
not feasible to do remotely

1094
00:36:36,800 --> 00:36:39,599
so as the as the database is

1095
00:36:39,599 --> 00:36:41,839
erasing and then rewriting

1096
00:36:41,839 --> 00:36:43,440
this is this is going to rewrite every

1097
00:36:43,440 --> 00:36:44,960
single value in that database to what

1098
00:36:44,960 --> 00:36:47,359
the attacker wants and you can we're

1099
00:36:47,359 --> 00:36:50,000
then going to reboot the pump and this

1100
00:36:50,000 --> 00:36:52,079
accomplishes a couple things

1101
00:36:52,079 --> 00:36:54,000
one it ensures that our settings take

1102
00:36:54,000 --> 00:36:55,839
place and two it clears any

1103
00:36:55,839 --> 00:36:57,839
notifications that are generated so that

1104
00:36:57,839 --> 00:36:59,440
the end user is unaware that those

1105
00:36:59,440 --> 00:37:01,520
changes have take place now we need to

1106
00:37:01,520 --> 00:37:03,200
check that database make sure that our

1107
00:37:03,200 --> 00:37:04,880
changes took effect so we're checking

1108
00:37:04,880 --> 00:37:06,960
the tube head volume key

1109
00:37:06,960 --> 00:37:08,720
and what you'll see is it's now set to

1110
00:37:08,720 --> 00:37:12,720
0ae which in hex is half of 1 5c so what

1111
00:37:12,720 --> 00:37:14,400
effect does that have on the pump just

1112
00:37:14,400 --> 00:37:16,960
changing one value in memory well we're

1113
00:37:16,960 --> 00:37:18,880
going to run our exact same test case

1114
00:37:18,880 --> 00:37:21,520
again to see if it's had any effect so

1115
00:37:21,520 --> 00:37:23,839
again we have 50 milliliters loaded into

1116
00:37:23,839 --> 00:37:25,839
the into the tube

1117
00:37:25,839 --> 00:37:28,480
of water in our case and we're going to

1118
00:37:28,480 --> 00:37:30,400
set up another infusion following the

1119
00:37:30,400 --> 00:37:32,720
exact same process as described by the

1120
00:37:32,720 --> 00:37:34,800
vendor and the documents

1121
00:37:34,800 --> 00:37:36,640
and we're gonna again use a basic

1122
00:37:36,640 --> 00:37:38,560
infusion of a hundred milliliters to a

1123
00:37:38,560 --> 00:37:41,359
thousand btpi now we would expect to get

1124
00:37:41,359 --> 00:37:43,440
the same results as last time unless

1125
00:37:43,440 --> 00:37:45,359
changing that key in value had some type

1126
00:37:45,359 --> 00:37:47,440
of impact we're gonna run it for again

1127
00:37:47,440 --> 00:37:49,520
approximately three minutes and you can

1128
00:37:49,520 --> 00:37:51,280
very quickly start to see that

1129
00:37:51,280 --> 00:37:53,599
something's not right and when you get

1130
00:37:53,599 --> 00:37:56,320
to a pr over three minutes here the pump

1131
00:37:56,320 --> 00:37:57,920
is once again going to report that it

1132
00:37:57,920 --> 00:38:00,160
dispensed five milliliters of liquid but

1133
00:38:00,160 --> 00:38:02,480
it's very quickly apparent visually that

1134
00:38:02,480 --> 00:38:04,320
it dispensed a lot more than five

1135
00:38:04,320 --> 00:38:06,079
milliliters of liquid in fact it

1136
00:38:06,079 --> 00:38:09,920
dispensed on exactly twice as much

1137
00:38:09,920 --> 00:38:12,160
so with that said

1138
00:38:12,160 --> 00:38:14,320
what does that matter does is there a

1139
00:38:14,320 --> 00:38:17,040
big impact here well philippe and i are

1140
00:38:17,040 --> 00:38:18,800
not doctors of any kind so we make sure

1141
00:38:18,800 --> 00:38:20,480
to consult again the people in the

1142
00:38:20,480 --> 00:38:22,720
industry and it turns out that making

1143
00:38:22,720 --> 00:38:25,359
any modification for a patient even if

1144
00:38:25,359 --> 00:38:27,119
it's a routine

1145
00:38:27,119 --> 00:38:29,359
routine medication can have quite a big

1146
00:38:29,359 --> 00:38:30,880
effect on a patient

1147
00:38:30,880 --> 00:38:33,280
so obviously there's that impact

1148
00:38:33,280 --> 00:38:35,200
additionally you know having root access

1149
00:38:35,200 --> 00:38:37,119
on space com not even messing with the

1150
00:38:37,119 --> 00:38:39,200
rest of the attack chain would allow an

1151
00:38:39,200 --> 00:38:41,119
end user to install malware like we've

1152
00:38:41,119 --> 00:38:43,119
seen and of course the malware of the

1153
00:38:43,119 --> 00:38:45,520
day is ransomware and that was is very

1154
00:38:45,520 --> 00:38:48,000
prevalent in the medical industry uh and

1155
00:38:48,000 --> 00:38:50,960
and we see example of this in 2020 where

1156
00:38:50,960 --> 00:38:53,680
a ransomware attack took out a hospital

1157
00:38:53,680 --> 00:38:55,599
in vermont and prevented them from

1158
00:38:55,599 --> 00:38:57,760
giving therapy to 75 of their

1159
00:38:57,760 --> 00:39:00,960
chemotherapy patients

1160
00:39:00,960 --> 00:39:01,839
so

1161
00:39:01,839 --> 00:39:03,200
we've done

1162
00:39:03,200 --> 00:39:04,720
on atr we've done research across

1163
00:39:04,720 --> 00:39:06,320
multiple denture industries and we've

1164
00:39:06,320 --> 00:39:08,560
done medical research before and

1165
00:39:08,560 --> 00:39:10,720
we try to put together common threads or

1166
00:39:10,720 --> 00:39:12,800
common themes we see when we do the same

1167
00:39:12,800 --> 00:39:14,400
type of industry research

1168
00:39:14,400 --> 00:39:16,480
and just a couple

1169
00:39:16,480 --> 00:39:17,839
to highlight i'm not going to talk about

1170
00:39:17,839 --> 00:39:19,680
all these but you know as i mentioned

1171
00:39:19,680 --> 00:39:22,160
this device is from 2017 and it's still

1172
00:39:22,160 --> 00:39:24,079
currently heavily used in the medical

1173
00:39:24,079 --> 00:39:26,640
industry and that allows it to have

1174
00:39:26,640 --> 00:39:28,160
older vulnerabilities that are still

1175
00:39:28,160 --> 00:39:30,240
apparent on it

1176
00:39:30,240 --> 00:39:32,480
and therefore accessible to a hackers

1177
00:39:32,480 --> 00:39:34,240
and then on top of that one of the

1178
00:39:34,240 --> 00:39:36,640
reasons why that is the case is patching

1179
00:39:36,640 --> 00:39:39,680
for these devices is is extremely costly

1180
00:39:39,680 --> 00:39:41,359
and what i mean by that this isn't like

1181
00:39:41,359 --> 00:39:43,119
updating your windows 10 machine where

1182
00:39:43,119 --> 00:39:44,960
every tuesday you get a patch from patch

1183
00:39:44,960 --> 00:39:47,760
tuesday these devices often require

1184
00:39:47,760 --> 00:39:49,359
sending them back to the vendor to get

1185
00:39:49,359 --> 00:39:51,040
past or a technician coming in and

1186
00:39:51,040 --> 00:39:53,359
there's down time for that

1187
00:39:53,359 --> 00:39:55,040
and it can cost a hot according to our

1188
00:39:55,040 --> 00:39:56,400
sources it can cost the hospital

1189
00:39:56,400 --> 00:39:58,480
anywhere from 10 to 20 million dollars

1190
00:39:58,480 --> 00:40:00,800
just to patch these devices which puts a

1191
00:40:00,800 --> 00:40:02,000
lot of

1192
00:40:02,000 --> 00:40:03,599
a lot of difficulty on hospitals

1193
00:40:03,599 --> 00:40:05,280
administrators like do i spend that

1194
00:40:05,280 --> 00:40:06,880
money on patient care or do i spend it

1195
00:40:06,880 --> 00:40:08,839
on updating my devices

1196
00:40:08,839 --> 00:40:10,400
so

1197
00:40:10,400 --> 00:40:12,000
we get we threw a lot of information at

1198
00:40:12,000 --> 00:40:13,760
you in a short time so in case you fell

1199
00:40:13,760 --> 00:40:15,359
asleep i wouldn't blame you but just to

1200
00:40:15,359 --> 00:40:17,040
catch you back up if you've woken back

1201
00:40:17,040 --> 00:40:19,920
up we discovered five uh cves and the b

1202
00:40:19,920 --> 00:40:22,160
brom infusion pump which allows us to

1203
00:40:22,160 --> 00:40:24,480
remotely compromise that pump and in

1204
00:40:24,480 --> 00:40:26,480
doing so exploitation leads to

1205
00:40:26,480 --> 00:40:29,040
overdosing or under-dosing a patient

1206
00:40:29,040 --> 00:40:30,880
infusion pumps are extremely popular

1207
00:40:30,880 --> 00:40:33,119
today it's a 54 billion dollar a year

1208
00:40:33,119 --> 00:40:35,040
market worldwide

1209
00:40:35,040 --> 00:40:37,599
mitigations for medical devices are hard

1210
00:40:37,599 --> 00:40:39,440
but of course most importantly hacking

1211
00:40:39,440 --> 00:40:40,960
with your friends across the globe is a

1212
00:40:40,960 --> 00:40:42,160
lot of fun

1213
00:40:42,160 --> 00:40:44,319
so i hope you enjoyed our talk today if

1214
00:40:44,319 --> 00:40:45,839
you have any questions i think we have a

1215
00:40:45,839 --> 00:40:47,280
few minutes left we'll be happy to

1216
00:40:47,280 --> 00:40:49,119
answer them or reach out to us either

1217
00:40:49,119 --> 00:40:50,640
during the conference or

1218
00:40:50,640 --> 00:40:53,839
on social media thank you

1219
00:40:58,000 --> 00:41:00,000
great love great talk thank you any

1220
00:41:00,000 --> 00:41:01,359
questions

1221
00:41:01,359 --> 00:41:03,598
yeah

1222
00:41:03,839 --> 00:41:05,839
hi i was wondering uh could you get the

1223
00:41:05,839 --> 00:41:07,839
pump running again over the network as

1224
00:41:07,839 --> 00:41:10,000
well did you and look at that

1225
00:41:10,000 --> 00:41:11,119
say that again whether you could get the

1226
00:41:11,119 --> 00:41:12,640
pump running again over the network i

1227
00:41:12,640 --> 00:41:15,200
saw you had to manually reset it would

1228
00:41:15,200 --> 00:41:16,880
it would it be able to be possible to

1229
00:41:16,880 --> 00:41:19,200
run it or did you investigate that we

1230
00:41:19,200 --> 00:41:21,119
didn't have to manually reset the pump

1231
00:41:21,119 --> 00:41:23,520
we we we uh reset it over the network

1232
00:41:23,520 --> 00:41:24,960
don't you talk about that no no no no

1233
00:41:24,960 --> 00:41:26,319
but i mean

1234
00:41:26,319 --> 00:41:28,000
to get it to get it running again so you

1235
00:41:28,000 --> 00:41:29,520
showed us in the video that the second

1236
00:41:29,520 --> 00:41:31,119
time you you're right

1237
00:41:31,119 --> 00:41:32,800
you've typed it all in but would that be

1238
00:41:32,800 --> 00:41:34,000
do you would you be able to automate

1239
00:41:34,000 --> 00:41:36,079
that as well so yeah so the management

1240
00:41:36,079 --> 00:41:37,760
software allows that to be done remotely

1241
00:41:37,760 --> 00:41:39,280
as well we wanted to make sure we

1242
00:41:39,280 --> 00:41:41,119
followed the exact same process for both

1243
00:41:41,119 --> 00:41:42,640
test cases so that there wouldn't be any

1244
00:41:42,640 --> 00:41:45,760
discrepancy in our tests but uh and for

1245
00:41:45,760 --> 00:41:47,359
the most part

1246
00:41:47,359 --> 00:41:49,760
in hospitals those pumps are manually

1247
00:41:49,760 --> 00:41:51,200
reconfigured to pump and different for

1248
00:41:51,200 --> 00:41:53,200
each patient one thing i didn't mention

1249
00:41:53,200 --> 00:41:54,079
is

1250
00:41:54,079 --> 00:41:56,079
even though our attack is

1251
00:41:56,079 --> 00:41:58,640
a remote attack and feasible that way

1252
00:41:58,640 --> 00:42:00,480
it can't be done while the pump is

1253
00:42:00,480 --> 00:42:02,079
running it has to be while the pump is

1254
00:42:02,079 --> 00:42:03,599
in what's called standby mode or turned

1255
00:42:03,599 --> 00:42:04,880
off so we can't do it while it's

1256
00:42:04,880 --> 00:42:06,640
connected to a patient so that's another

1257
00:42:06,640 --> 00:42:08,240
reason why in the video we started again

1258
00:42:08,240 --> 00:42:10,000
from ground zero because the entire

1259
00:42:10,000 --> 00:42:11,599
scenario would be like you know they

1260
00:42:11,599 --> 00:42:13,040
disconnected from a patient put it in a

1261
00:42:13,040 --> 00:42:14,720
closet attacker remotely attacks the

1262
00:42:14,720 --> 00:42:16,480
pump because there's never any true off

1263
00:42:16,480 --> 00:42:18,079
with those pumps

1264
00:42:18,079 --> 00:42:21,599
and then they pull the pump back out

1265
00:42:22,560 --> 00:42:24,240
thanks for the great talk

1266
00:42:24,240 --> 00:42:26,079
you mentioned that you got this device

1267
00:42:26,079 --> 00:42:27,680
through a partner

1268
00:42:27,680 --> 00:42:29,440
so the question is

1269
00:42:29,440 --> 00:42:31,280
how do you see collaboration between the

1270
00:42:31,280 --> 00:42:32,640
security industry and the medical

1271
00:42:32,640 --> 00:42:34,720
industry happening and

1272
00:42:34,720 --> 00:42:36,319
yeah for security researchers how do

1273
00:42:36,319 --> 00:42:38,240
they get hands on medical devices to

1274
00:42:38,240 --> 00:42:41,680
find more vulnerabilities like this

1275
00:42:41,760 --> 00:42:44,000
yeah so our team as a whole is is always

1276
00:42:44,000 --> 00:42:45,359
looking for people that are willing to

1277
00:42:45,359 --> 00:42:47,440
collaborate even though we work we work

1278
00:42:47,440 --> 00:42:49,440
for mcafee we are not a service to

1279
00:42:49,440 --> 00:42:52,800
purchase we're not a product right um

1280
00:42:52,800 --> 00:42:54,720
this one's this project specifically

1281
00:42:54,720 --> 00:42:56,720
came from someone that had seen our last

1282
00:42:56,720 --> 00:42:58,319
research in the medical field and was

1283
00:42:58,319 --> 00:42:59,760
interested to see

1284
00:42:59,760 --> 00:43:01,680
if this device had vulnerabilities as

1285
00:43:01,680 --> 00:43:02,480
well

1286
00:43:02,480 --> 00:43:04,480
and we commonly also reach out to other

1287
00:43:04,480 --> 00:43:07,040
industries and say hey like we what

1288
00:43:07,040 --> 00:43:09,760
would be scary if we were able to hack

1289
00:43:09,760 --> 00:43:12,319
our team is really focused on

1290
00:43:12,319 --> 00:43:14,000
researching devices that have a large

1291
00:43:14,000 --> 00:43:17,119
impact and we also don't want to we

1292
00:43:17,119 --> 00:43:18,880
truly want to move the forward and the

1293
00:43:18,880 --> 00:43:20,640
the needle forward in security which

1294
00:43:20,640 --> 00:43:22,160
also requires that we're not looking at

1295
00:43:22,160 --> 00:43:24,079
some stuff that everyone else is looking

1296
00:43:24,079 --> 00:43:26,000
at so those are kind of partly like how

1297
00:43:26,000 --> 00:43:28,160
we go what we're looking for and how we

1298
00:43:28,160 --> 00:43:29,920
select our partners and we just kind of

1299
00:43:29,920 --> 00:43:31,920
keep in customers of mcafee a lot of

1300
00:43:31,920 --> 00:43:33,200
times end up becoming partners just

1301
00:43:33,200 --> 00:43:34,480
because we already have a relationship

1302
00:43:34,480 --> 00:43:37,040
with them but if anyone's has research

1303
00:43:37,040 --> 00:43:38,560
they'd like to collaborate with please

1304
00:43:38,560 --> 00:43:40,880
reach out

1305
00:43:40,880 --> 00:43:42,800
i myself have a question as well okay

1306
00:43:42,800 --> 00:43:45,359
you said you break two devices

1307
00:43:45,359 --> 00:43:49,280
how much does one device cost

1308
00:43:49,280 --> 00:43:52,640
i don't know what they retail for

1309
00:43:52,640 --> 00:43:55,119
to be honest i know it was costing us

1310
00:43:55,119 --> 00:43:57,280
around three grand of device

1311
00:43:57,280 --> 00:43:59,040
uh but i don't i don't know what they

1312
00:43:59,040 --> 00:44:01,200
retail for did you manage to unbreak it

1313
00:44:01,200 --> 00:44:02,720
after finding out how it works no we

1314
00:44:02,720 --> 00:44:04,800
still have a pile of pumps that are

1315
00:44:04,800 --> 00:44:07,040
destroyed

1316
00:44:07,040 --> 00:44:09,839
anyone else with a question

1317
00:44:10,000 --> 00:44:11,680
no okay thank you very much thank you

1318
00:44:11,680 --> 00:44:15,879
sit tight because right now

