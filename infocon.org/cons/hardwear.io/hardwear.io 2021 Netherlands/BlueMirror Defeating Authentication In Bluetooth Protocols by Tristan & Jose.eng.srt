1
00:00:04,319 --> 00:00:06,480
hi thanks for coming

2
00:00:06,480 --> 00:00:09,200
so my name is tristan clarie and i will

3
00:00:09,200 --> 00:00:11,759
discuss the work we did with jose little

4
00:00:11,759 --> 00:00:13,519
pestivest right there

5
00:00:13,519 --> 00:00:17,279
on the security of bluetooth protocols

6
00:00:17,279 --> 00:00:19,199
and this presentation will tackle

7
00:00:19,199 --> 00:00:21,359
different bluetooth technologies will

8
00:00:21,359 --> 00:00:24,320
explain what authentication is in the

9
00:00:24,320 --> 00:00:26,720
context of bluetooth protocols

10
00:00:26,720 --> 00:00:28,960
and we'll explain a few security

11
00:00:28,960 --> 00:00:32,399
problems we found on these

12
00:00:32,399 --> 00:00:34,399
so let me

13
00:00:34,399 --> 00:00:35,520
yeah

14
00:00:35,520 --> 00:00:38,079
jose and i work for the

15
00:00:38,079 --> 00:00:41,600
national cyber security agency of france

16
00:00:41,600 --> 00:00:44,079
the nc in the wireless security

17
00:00:44,079 --> 00:00:47,280
laboratory so we're dealing with

18
00:00:47,280 --> 00:00:49,680
wireless protocol security

19
00:00:49,680 --> 00:00:51,840
we're dealing with electromagnetic

20
00:00:51,840 --> 00:00:54,320
security and we also do some signal

21
00:00:54,320 --> 00:00:57,600
processing and embedded security as for

22
00:00:57,600 --> 00:01:00,000
me i'm more specialized on wireless

23
00:01:00,000 --> 00:01:01,680
protocol security

24
00:01:01,680 --> 00:01:04,799
and on my spare time i also enjoy ctfs

25
00:01:04,799 --> 00:01:07,920
or software defined radio

26
00:01:07,920 --> 00:01:09,439
so this is the outline of the

27
00:01:09,439 --> 00:01:12,400
presentation first we'll see what

28
00:01:12,400 --> 00:01:14,560
bluetooth technologies are so we have

29
00:01:14,560 --> 00:01:15,840
three of them

30
00:01:15,840 --> 00:01:18,400
we'll explain what authentication is how

31
00:01:18,400 --> 00:01:19,759
it's provided

32
00:01:19,759 --> 00:01:23,920
and then we'll proceed on the results

33
00:01:24,479 --> 00:01:28,400
so first bluetooth uh it's a very

34
00:01:28,400 --> 00:01:30,799
well-known trademark but what it is in

35
00:01:30,799 --> 00:01:32,479
fact you have three different

36
00:01:32,479 --> 00:01:33,920
technologies

37
00:01:33,920 --> 00:01:36,240
if we're talking about bluetooth classic

38
00:01:36,240 --> 00:01:39,360
bt and bluetooth low energy ble

39
00:01:39,360 --> 00:01:41,840
those two are communication protocols

40
00:01:41,840 --> 00:01:43,759
the goal is to have two device which

41
00:01:43,759 --> 00:01:45,759
communicate together

42
00:01:45,759 --> 00:01:48,720
if we look at bluetooth mesh it's a bit

43
00:01:48,720 --> 00:01:51,280
of a different protocol because

44
00:01:51,280 --> 00:01:54,720
it creates a network of devices out of

45
00:01:54,720 --> 00:01:58,320
single and unprotected ble links

46
00:01:58,320 --> 00:02:01,520
and the idea of bluetooth mesh is to

47
00:02:01,520 --> 00:02:03,759
have several devices which represent

48
00:02:03,759 --> 00:02:06,880
applications in a network

49
00:02:06,880 --> 00:02:10,318
bluetooth mesh applications is typically

50
00:02:10,318 --> 00:02:13,280
connected homes

51
00:02:13,440 --> 00:02:16,560
so what about the security in those well

52
00:02:16,560 --> 00:02:19,280
if we look at bluetooth and ble it's

53
00:02:19,280 --> 00:02:21,040
rather easy

54
00:02:21,040 --> 00:02:23,520
they want to provide confidentiality

55
00:02:23,520 --> 00:02:25,440
integrity and authenticity of the

56
00:02:25,440 --> 00:02:27,200
communications

57
00:02:27,200 --> 00:02:29,440
if we look at bluetooth mesh we also

58
00:02:29,440 --> 00:02:31,280
have the three properties

59
00:02:31,280 --> 00:02:34,640
confidentiality integrity authenticity

60
00:02:34,640 --> 00:02:36,319
but because it's a more complex

61
00:02:36,319 --> 00:02:38,879
protocols it actually creates a network

62
00:02:38,879 --> 00:02:42,239
we want some additional properties like

63
00:02:42,239 --> 00:02:44,879
uh we do not want any device on the

64
00:02:44,879 --> 00:02:47,280
network to be able to communicate to

65
00:02:47,280 --> 00:02:49,599
every application on the network

66
00:02:49,599 --> 00:02:52,080
so we have some kind of isolation in

67
00:02:52,080 --> 00:02:53,680
mesh networks

68
00:02:53,680 --> 00:02:56,000
if we look at how those properties are

69
00:02:56,000 --> 00:02:58,720
guaranteed it's always the same thing

70
00:02:58,720 --> 00:03:01,840
in bt and ble it uses a symmetric secret

71
00:03:01,840 --> 00:03:04,640
which is kind of the encryption key

72
00:03:04,640 --> 00:03:06,720
which is used to encrypt communications

73
00:03:06,720 --> 00:03:08,640
between two devices

74
00:03:08,640 --> 00:03:10,400
if we look at bluetooth mesh we have a

75
00:03:10,400 --> 00:03:12,560
bit more keys it's still always

76
00:03:12,560 --> 00:03:14,720
symmetric cryptography

77
00:03:14,720 --> 00:03:17,519
and we have a key to access the network

78
00:03:17,519 --> 00:03:19,680
we have a key to access

79
00:03:19,680 --> 00:03:21,040
applications

80
00:03:21,040 --> 00:03:23,760
and we have a key to perform privileged

81
00:03:23,760 --> 00:03:27,440
operation on devices

82
00:03:27,440 --> 00:03:28,560
so

83
00:03:28,560 --> 00:03:30,959
this is the role of key agreement

84
00:03:30,959 --> 00:03:33,280
protocols in bluetooth circuit agreement

85
00:03:33,280 --> 00:03:35,680
is meant to exchange those symmetric

86
00:03:35,680 --> 00:03:36,799
secrets

87
00:03:36,799 --> 00:03:39,920
so that devices may communicate

88
00:03:39,920 --> 00:03:42,080
if we look at bt and ble the key

89
00:03:42,080 --> 00:03:44,640
agreement protocol is called pairing so

90
00:03:44,640 --> 00:03:46,319
you have two devices which want to

91
00:03:46,319 --> 00:03:48,720
communicate securely together they do

92
00:03:48,720 --> 00:03:51,440
this kind of magic pairing procedure

93
00:03:51,440 --> 00:03:53,920
and they have a short secret they use to

94
00:03:53,920 --> 00:03:55,840
encrypt communications

95
00:03:55,840 --> 00:03:57,680
if we look at bluetooth mesh it's the

96
00:03:57,680 --> 00:03:59,599
same thing the key agreement is called

97
00:03:59,599 --> 00:04:00,879
provisioning

98
00:04:00,879 --> 00:04:02,879
when a device wants to join the mesh

99
00:04:02,879 --> 00:04:06,000
network it announces itself

100
00:04:06,000 --> 00:04:08,319
then the provisioner which is kind of

101
00:04:08,319 --> 00:04:10,959
the master of the network

102
00:04:10,959 --> 00:04:12,560
performs the provisioning with the

103
00:04:12,560 --> 00:04:13,680
device

104
00:04:13,680 --> 00:04:16,478
they create a temporary encryption key

105
00:04:16,478 --> 00:04:19,358
and the provisioner sends the network

106
00:04:19,358 --> 00:04:23,759
key encrypted with this temporary key

107
00:04:23,759 --> 00:04:24,720
so

108
00:04:24,720 --> 00:04:27,919
if we stay at a high level

109
00:04:27,919 --> 00:04:31,040
pairing always works this way so two

110
00:04:31,040 --> 00:04:34,080
devices exchange their capabilities what

111
00:04:34,080 --> 00:04:36,320
version of the protocol they support

112
00:04:36,320 --> 00:04:38,400
what cryptographic other than the

113
00:04:38,400 --> 00:04:41,680
support and this is used to select a

114
00:04:41,680 --> 00:04:43,280
pairing method

115
00:04:43,280 --> 00:04:46,400
now they exchange a key and they may

116
00:04:46,400 --> 00:04:48,479
authenticate this key

117
00:04:48,479 --> 00:04:50,720
if we look at provisioning it's the same

118
00:04:50,720 --> 00:04:51,680
thing

119
00:04:51,680 --> 00:04:53,600
we still have feature exchange key

120
00:04:53,600 --> 00:04:55,600
exchange

121
00:04:55,600 --> 00:04:57,600
the only difference is that the

122
00:04:57,600 --> 00:04:59,759
provisioner sends the network key to the

123
00:04:59,759 --> 00:05:00,800
device

124
00:05:00,800 --> 00:05:02,400
in a step that is called key

125
00:05:02,400 --> 00:05:04,800
distribution

126
00:05:04,800 --> 00:05:05,759
now

127
00:05:05,759 --> 00:05:07,520
things start to get a bit more

128
00:05:07,520 --> 00:05:09,520
complicated when we look at what's

129
00:05:09,520 --> 00:05:10,880
inside because

130
00:05:10,880 --> 00:05:13,680
in bt and ble there are many pairing

131
00:05:13,680 --> 00:05:15,120
protocols but

132
00:05:15,120 --> 00:05:17,600
there are three elements that are used

133
00:05:17,600 --> 00:05:20,000
to distinguish a pairing protocol

134
00:05:20,000 --> 00:05:23,680
first the technology btr ble

135
00:05:23,680 --> 00:05:27,280
second is it a legacy protocol or is it

136
00:05:27,280 --> 00:05:29,520
a secure protocol

137
00:05:29,520 --> 00:05:33,360
and three the user interaction which is

138
00:05:33,360 --> 00:05:36,080
required to complete the protocol

139
00:05:36,080 --> 00:05:37,360
so

140
00:05:37,360 --> 00:05:40,320
you see that we have a total of 12

141
00:05:40,320 --> 00:05:42,800
different pairing protocols

142
00:05:42,800 --> 00:05:45,680
and there is a catch here because if you

143
00:05:45,680 --> 00:05:48,400
look at the ble side you see that the

144
00:05:48,400 --> 00:05:50,240
names have been reused

145
00:05:50,240 --> 00:05:52,960
but the pairing protocols are different

146
00:05:52,960 --> 00:05:56,160
between legacy and secure so legacy just

147
00:05:56,160 --> 00:05:59,039
works is very different from secure just

148
00:05:59,039 --> 00:06:00,240
works

149
00:06:00,240 --> 00:06:02,400
if you look at

150
00:06:02,400 --> 00:06:05,520
bt and ble you have a second catch

151
00:06:05,520 --> 00:06:08,400
because secure simple pairing protocols

152
00:06:08,400 --> 00:06:10,639
are the same as ali secure pairing

153
00:06:10,639 --> 00:06:12,080
protocols so

154
00:06:12,080 --> 00:06:14,960
ssp just works is actually the same

155
00:06:14,960 --> 00:06:19,600
protocol as leasp just works

156
00:06:19,600 --> 00:06:21,840
now for provisioning

157
00:06:21,840 --> 00:06:24,400
we also have different protocols

158
00:06:24,400 --> 00:06:26,319
basically there are two differences

159
00:06:26,319 --> 00:06:28,720
between protocols how the key exchange

160
00:06:28,720 --> 00:06:30,560
is performed so it's a defilement key

161
00:06:30,560 --> 00:06:31,680
exchange

162
00:06:31,680 --> 00:06:34,160
is it performed on the ble channel or

163
00:06:34,160 --> 00:06:36,319
outside the ble channel and how

164
00:06:36,319 --> 00:06:38,800
authentication data is exchanged

165
00:06:38,800 --> 00:06:40,960
you've got two possibilities for the key

166
00:06:40,960 --> 00:06:42,720
exchange four possibilities for

167
00:06:42,720 --> 00:06:44,400
authentication data

168
00:06:44,400 --> 00:06:46,080
two times four eight different

169
00:06:46,080 --> 00:06:48,479
provisioning protocols

170
00:06:48,479 --> 00:06:49,280
now

171
00:06:49,280 --> 00:06:51,680
if we stay at a high level we can

172
00:06:51,680 --> 00:06:54,880
actually notice that all those protocols

173
00:06:54,880 --> 00:06:57,599
they belong to one in three categories

174
00:06:57,599 --> 00:07:00,800
so we have a total of 20 calgarians

175
00:07:00,800 --> 00:07:03,599
but if we look close enough we only have

176
00:07:03,599 --> 00:07:05,280
three kinds of them

177
00:07:05,280 --> 00:07:07,199
first we have unauthenticated key

178
00:07:07,199 --> 00:07:09,120
agreements which don't provide

179
00:07:09,120 --> 00:07:10,639
authentication

180
00:07:10,639 --> 00:07:12,160
then we have authenticated key

181
00:07:12,160 --> 00:07:14,800
agreements which provide authentication

182
00:07:14,800 --> 00:07:17,039
and finally we've got out of bank

183
00:07:17,039 --> 00:07:20,000
agreements which um

184
00:07:20,000 --> 00:07:22,000
the security properties of out of bank

185
00:07:22,000 --> 00:07:24,080
agreement usually depends on the

186
00:07:24,080 --> 00:07:27,280
security of an unspecified communication

187
00:07:27,280 --> 00:07:29,840
channel of the out-of-bound channel

188
00:07:29,840 --> 00:07:31,599
therefore by just looking at the

189
00:07:31,599 --> 00:07:35,520
specification we may not be able to

190
00:07:35,520 --> 00:07:38,720
completely analyze their security

191
00:07:38,720 --> 00:07:41,599
so that was for a short introduction to

192
00:07:41,599 --> 00:07:43,680
key agreements in bluetooth

193
00:07:43,680 --> 00:07:44,639
now

194
00:07:44,639 --> 00:07:46,960
we are studying authentication in

195
00:07:46,960 --> 00:07:48,319
bluetooth so

196
00:07:48,319 --> 00:07:51,919
first question is how is authentication

197
00:07:51,919 --> 00:07:54,319
defined in the specification

198
00:07:54,319 --> 00:07:56,560
if we look at the bt and bli

199
00:07:56,560 --> 00:07:58,720
specification there is no formal

200
00:07:58,720 --> 00:08:01,440
definition of authentication

201
00:08:01,440 --> 00:08:04,720
and we have a kind of lose goal which is

202
00:08:04,720 --> 00:08:06,639
defined which is that

203
00:08:06,639 --> 00:08:08,639
an attacker should not be able to

204
00:08:08,639 --> 00:08:10,879
complete a successful money machine in

205
00:08:10,879 --> 00:08:13,120
the middle with more than one in a

206
00:08:13,120 --> 00:08:15,280
million chances

207
00:08:15,280 --> 00:08:17,440
and for bluetooth mesh

208
00:08:17,440 --> 00:08:19,599
we don't have any

209
00:08:19,599 --> 00:08:21,599
authentication definition

210
00:08:21,599 --> 00:08:23,280
we don't have any security goal

211
00:08:23,280 --> 00:08:25,840
definition a security goal for

212
00:08:25,840 --> 00:08:27,919
authentication sorry

213
00:08:27,919 --> 00:08:29,599
but we do have some misleading

214
00:08:29,599 --> 00:08:31,840
statements like all messages are

215
00:08:31,840 --> 00:08:34,320
encrypted and authenticated which is not

216
00:08:34,320 --> 00:08:36,479
true

217
00:08:36,479 --> 00:08:37,360
so

218
00:08:37,360 --> 00:08:39,440
because we don't have a clear definition

219
00:08:39,440 --> 00:08:41,919
of what it is we need to actually take a

220
00:08:41,919 --> 00:08:44,959
step back what do we want to protect

221
00:08:44,959 --> 00:08:48,399
in bt and ble devices they expose

222
00:08:48,399 --> 00:08:50,720
services if we take the case of your

223
00:08:50,720 --> 00:08:53,200
smartphone whether it's iphone or

224
00:08:53,200 --> 00:08:54,800
android phone

225
00:08:54,800 --> 00:08:57,040
you have several bluetooth services

226
00:08:57,040 --> 00:08:58,480
which are

227
00:08:58,480 --> 00:09:00,240
up and running when your bluetooth

228
00:09:00,240 --> 00:09:01,920
interface is up

229
00:09:01,920 --> 00:09:04,480
those services for example those are

230
00:09:04,480 --> 00:09:07,920
exchange of contacts or

231
00:09:07,920 --> 00:09:10,720
the access to your messages

232
00:09:10,720 --> 00:09:13,680
we have other funny services like the

233
00:09:13,680 --> 00:09:16,320
sim access profile to send apdus to your

234
00:09:16,320 --> 00:09:17,680
sim card

235
00:09:17,680 --> 00:09:20,640
if we look at bluetooth mesh

236
00:09:20,640 --> 00:09:21,760
again

237
00:09:21,760 --> 00:09:24,320
we don't necessarily want to protect the

238
00:09:24,320 --> 00:09:27,279
communications between the provisioner

239
00:09:27,279 --> 00:09:29,519
and the device only actually in

240
00:09:29,519 --> 00:09:31,680
bluetooth mesh we more likely want to

241
00:09:31,680 --> 00:09:34,320
protect the access to a mesh network

242
00:09:34,320 --> 00:09:36,720
and to the applications on the mesh

243
00:09:36,720 --> 00:09:37,920
network

244
00:09:37,920 --> 00:09:39,760
and those elements

245
00:09:39,760 --> 00:09:41,519
well it means that

246
00:09:41,519 --> 00:09:44,000
machining the model is relevant but it's

247
00:09:44,000 --> 00:09:46,880
not the only way we can attack bluetooth

248
00:09:46,880 --> 00:09:49,040
device and therefore it's not the only

249
00:09:49,040 --> 00:09:51,600
model in which

250
00:09:51,600 --> 00:09:54,160
we want to protect devices

251
00:09:54,160 --> 00:09:58,000
so we actually include impersonations

252
00:09:58,000 --> 00:10:00,959
and they need to be taken care of

253
00:10:00,959 --> 00:10:02,880
even though the specification doesn't

254
00:10:02,880 --> 00:10:04,399
mention them

255
00:10:04,399 --> 00:10:05,120
so

256
00:10:05,120 --> 00:10:08,320
in this study we chose a slightly

257
00:10:08,320 --> 00:10:11,040
different model from the specification

258
00:10:11,040 --> 00:10:13,279
which is that

259
00:10:13,279 --> 00:10:16,000
an attacker should not be able to

260
00:10:16,000 --> 00:10:17,760
complete an authenticated care

261
00:10:17,760 --> 00:10:19,519
government with more than one in a

262
00:10:19,519 --> 00:10:21,279
million chances

263
00:10:21,279 --> 00:10:22,640
what it means

264
00:10:22,640 --> 00:10:23,440
so

265
00:10:23,440 --> 00:10:26,160
here take this

266
00:10:26,160 --> 00:10:28,480
little image imagine you've got devices

267
00:10:28,480 --> 00:10:31,440
a and b the performance key agreement

268
00:10:31,440 --> 00:10:32,720
they

269
00:10:32,720 --> 00:10:34,240
perform an

270
00:10:34,240 --> 00:10:36,160
an authenticated one

271
00:10:36,160 --> 00:10:39,120
and the attacker somehow finds a problem

272
00:10:39,120 --> 00:10:41,760
in it performs a successful attack

273
00:10:41,760 --> 00:10:44,880
at the end both aab and the attacker

274
00:10:44,880 --> 00:10:46,560
have the encryption key

275
00:10:46,560 --> 00:10:49,040
the specification will consider it's a

276
00:10:49,040 --> 00:10:52,000
valid attack and the model in the study

277
00:10:52,000 --> 00:10:54,480
will consider it's a valid attack

278
00:10:54,480 --> 00:10:57,600
but you have a slightly different model

279
00:10:57,600 --> 00:11:00,640
imagine the attacker completes an attack

280
00:11:00,640 --> 00:11:04,399
it's able to impersonate b towards a

281
00:11:04,399 --> 00:11:06,959
but b can't complete the key agreement

282
00:11:06,959 --> 00:11:09,839
the specification technically says it's

283
00:11:09,839 --> 00:11:11,839
invalid and

284
00:11:11,839 --> 00:11:14,640
you shouldn't be protected against that

285
00:11:14,640 --> 00:11:17,760
in our study we consider it's relevant

286
00:11:17,760 --> 00:11:20,130
and we've got another

287
00:11:20,130 --> 00:11:21,279
[Music]

288
00:11:21,279 --> 00:11:23,839
slight modification sometimes you may be

289
00:11:23,839 --> 00:11:26,480
able to complete an impersonation

290
00:11:26,480 --> 00:11:29,279
but you do not get the encryption key

291
00:11:29,279 --> 00:11:30,320
um

292
00:11:30,320 --> 00:11:32,399
it's much less powerful than the other

293
00:11:32,399 --> 00:11:34,959
two but a good protocol should be immune

294
00:11:34,959 --> 00:11:36,480
to that

295
00:11:36,480 --> 00:11:37,279
now

296
00:11:37,279 --> 00:11:40,160
bluetooth has

297
00:11:40,160 --> 00:11:42,000
not really old technology but it has

298
00:11:42,000 --> 00:11:43,680
more than 20 years

299
00:11:43,680 --> 00:11:45,920
so it has already been extensively

300
00:11:45,920 --> 00:11:48,800
studied by other researchers

301
00:11:48,800 --> 00:11:51,760
and so we looked at all the literature

302
00:11:51,760 --> 00:11:56,160
and we tried to see what were the common

303
00:11:56,160 --> 00:11:59,600
weaknesses on bluetooth agreement so

304
00:11:59,600 --> 00:12:02,480
we have a kind of summary table the

305
00:12:02,480 --> 00:12:04,959
weaknesses identified are above the

306
00:12:04,959 --> 00:12:08,639
different key agreements are on the left

307
00:12:08,639 --> 00:12:12,240
and the most problematic thing is that

308
00:12:12,240 --> 00:12:14,639
bluetooth has many different security

309
00:12:14,639 --> 00:12:17,200
modes some authenticated some not

310
00:12:17,200 --> 00:12:18,639
authenticated

311
00:12:18,639 --> 00:12:20,320
which means that you

312
00:12:20,320 --> 00:12:23,519
usually have possible downgrade attacks

313
00:12:23,519 --> 00:12:24,560
from

314
00:12:24,560 --> 00:12:27,519
secure mode to less secure ones

315
00:12:27,519 --> 00:12:30,959
you have also legacy modes which are

316
00:12:30,959 --> 00:12:33,600
vulnerable to passive key recovery

317
00:12:33,600 --> 00:12:36,079
you've got to challenge well you there

318
00:12:36,079 --> 00:12:38,320
was a challenge on that at the quark

319
00:12:38,320 --> 00:12:40,240
slab ctf

320
00:12:40,240 --> 00:12:41,680
um

321
00:12:41,680 --> 00:12:44,560
we have some problems already with

322
00:12:44,560 --> 00:12:46,800
authentication because usually

323
00:12:46,800 --> 00:12:48,800
authentication secret can be brute

324
00:12:48,800 --> 00:12:51,040
forced offline

325
00:12:51,040 --> 00:12:54,399
we've had problems with key size because

326
00:12:54,399 --> 00:12:57,440
due to export regulation bluetooth sets

327
00:12:57,440 --> 00:13:01,600
a minimum encryption key size to 56 bits

328
00:13:01,600 --> 00:13:02,399
and

329
00:13:02,399 --> 00:13:05,360
we've had a problem on some ecdh

330
00:13:05,360 --> 00:13:07,040
implementations

331
00:13:07,040 --> 00:13:08,880
and we have something which is called

332
00:13:08,880 --> 00:13:10,720
malleable commitment which we'll see a

333
00:13:10,720 --> 00:13:13,279
bit more later so this is a complete

334
00:13:13,279 --> 00:13:16,399
table for reference

335
00:13:16,800 --> 00:13:17,680
now

336
00:13:17,680 --> 00:13:18,480
so

337
00:13:18,480 --> 00:13:20,880
in this study we study well all

338
00:13:20,880 --> 00:13:22,959
bluetooth protocols but more likely

339
00:13:22,959 --> 00:13:25,440
authenticated ones there is a supporting

340
00:13:25,440 --> 00:13:26,480
paper

341
00:13:26,480 --> 00:13:28,240
but

342
00:13:28,240 --> 00:13:31,200
what we did was basically we looked at

343
00:13:31,200 --> 00:13:33,760
every protocol and we tried something

344
00:13:33,760 --> 00:13:36,320
which is called reflection tech on those

345
00:13:36,320 --> 00:13:37,200
and

346
00:13:37,200 --> 00:13:39,680
as you can see we found many problems on

347
00:13:39,680 --> 00:13:41,920
all the different technologies

348
00:13:41,920 --> 00:13:45,120
so first we'll see what problems were

349
00:13:45,120 --> 00:13:47,680
found on the legacy protocols then we'll

350
00:13:47,680 --> 00:13:50,800
see a problem on secure protocols

351
00:13:50,800 --> 00:13:52,959
and then we'll see

352
00:13:52,959 --> 00:13:57,040
the vulnerabilities in bluetooth mesh

353
00:13:58,959 --> 00:13:59,839
first

354
00:13:59,839 --> 00:14:02,560
so we mentioned reflection attack our

355
00:14:02,560 --> 00:14:05,199
reflection attack are literally decades

356
00:14:05,199 --> 00:14:06,399
old

357
00:14:06,399 --> 00:14:09,600
so the idea of a reflection attack

358
00:14:09,600 --> 00:14:12,399
a device sends you a message you send

359
00:14:12,399 --> 00:14:14,800
this message back to the device you do

360
00:14:14,800 --> 00:14:18,399
not modify it you just reflect it

361
00:14:18,399 --> 00:14:21,920
this has usually two goals

362
00:14:21,920 --> 00:14:23,519
the main goal is to complete the

363
00:14:23,519 --> 00:14:25,440
authentication protocol

364
00:14:25,440 --> 00:14:28,480
but sometimes you may be able to recover

365
00:14:28,480 --> 00:14:30,560
the encryption key after your reflection

366
00:14:30,560 --> 00:14:33,199
attack and sometimes you may not be able

367
00:14:33,199 --> 00:14:34,720
to do that

368
00:14:34,720 --> 00:14:37,600
even recently in the literature we found

369
00:14:37,600 --> 00:14:39,839
some examples of reflection tags so

370
00:14:39,839 --> 00:14:43,040
there was one problem on tls 1.3 psk

371
00:14:43,040 --> 00:14:45,360
mode and

372
00:14:45,360 --> 00:14:47,519
there was one problem in another

373
00:14:47,519 --> 00:14:49,839
bluetooth security protocol

374
00:14:49,839 --> 00:14:52,079
uh it's not included in the state of the

375
00:14:52,079 --> 00:14:54,000
art because it's technically not a key

376
00:14:54,000 --> 00:14:57,360
agreement protocol that was attacked

377
00:14:57,360 --> 00:15:00,000
in both those cases the encryption key

378
00:15:00,000 --> 00:15:02,720
was not recovered at the end

379
00:15:02,720 --> 00:15:03,680
so

380
00:15:03,680 --> 00:15:06,160
first protocol bluetooth

381
00:15:06,160 --> 00:15:08,639
legacy pin pairing is literally the

382
00:15:08,639 --> 00:15:11,600
oldest bluetooth key agreement the idea

383
00:15:11,600 --> 00:15:14,399
is that the user will exchange a pin

384
00:15:14,399 --> 00:15:16,480
between two devices

385
00:15:16,480 --> 00:15:18,720
this pin is used to derive a temporary

386
00:15:18,720 --> 00:15:19,600
key

387
00:15:19,600 --> 00:15:22,480
this key is used to

388
00:15:22,480 --> 00:15:24,639
encrypt some nonsense so you've got it

389
00:15:24,639 --> 00:15:26,959
here temporary key is k init

390
00:15:26,959 --> 00:15:30,480
you xor it with some random values

391
00:15:30,480 --> 00:15:32,480
and after that

392
00:15:32,480 --> 00:15:34,959
well technically pairing is successful

393
00:15:34,959 --> 00:15:36,959
so you have your encryption key

394
00:15:36,959 --> 00:15:38,959
and there is a final mutual

395
00:15:38,959 --> 00:15:41,839
authentication step

396
00:15:42,480 --> 00:15:45,519
the problem here is in the key

397
00:15:45,519 --> 00:15:47,759
derivation function so

398
00:15:47,759 --> 00:15:50,240
it relies on an internal function which

399
00:15:50,240 --> 00:15:52,800
is called d21 it's specified in the

400
00:15:52,800 --> 00:15:54,959
bluetooth specification

401
00:15:54,959 --> 00:15:57,279
and you see that the key derivation is

402
00:15:57,279 --> 00:15:59,199
basically luxor

403
00:15:59,199 --> 00:16:03,040
so in fact if as an attacker you manage

404
00:16:03,040 --> 00:16:05,519
to spoof the address of one of the

405
00:16:05,519 --> 00:16:06,959
devices

406
00:16:06,959 --> 00:16:10,399
you may be able to force the derivation

407
00:16:10,399 --> 00:16:13,519
of an or zero key so the attack works

408
00:16:13,519 --> 00:16:15,839
basically like this

409
00:16:15,839 --> 00:16:17,839
you as an attacker you spool the

410
00:16:17,839 --> 00:16:20,839
identity idi of the

411
00:16:20,839 --> 00:16:24,160
initiator you get the random number you

412
00:16:24,160 --> 00:16:26,399
don't do anything with it you don't know

413
00:16:26,399 --> 00:16:29,199
the pin so you can't

414
00:16:29,199 --> 00:16:31,920
get the temporary key k in it

415
00:16:31,920 --> 00:16:34,959
and then you just reflect the nonce

416
00:16:34,959 --> 00:16:37,360
you just reflect the message

417
00:16:37,360 --> 00:16:39,839
and doing so you will trigger the corner

418
00:16:39,839 --> 00:16:42,800
case the initiator will derive an author

419
00:16:42,800 --> 00:16:43,680
key

420
00:16:43,680 --> 00:16:44,720
and

421
00:16:44,720 --> 00:16:46,639
that means you got the encryption key so

422
00:16:46,639 --> 00:16:49,600
you are now able to communicate with the

423
00:16:49,600 --> 00:16:52,160
the device

424
00:16:52,160 --> 00:16:54,240
so basically the problem in this

425
00:16:54,240 --> 00:16:57,040
protocol is that there is a corner case

426
00:16:57,040 --> 00:17:00,000
in the key deviation function

427
00:17:00,000 --> 00:17:02,959
it's more of a funny result really

428
00:17:02,959 --> 00:17:06,240
because the main problem in bt legacy

429
00:17:06,240 --> 00:17:08,559
pin pairing is that there is no proper

430
00:17:08,559 --> 00:17:10,799
key exchange so if you actually sniff

431
00:17:10,799 --> 00:17:12,480
the communications

432
00:17:12,480 --> 00:17:15,439
you can try to brute force the pin and

433
00:17:15,439 --> 00:17:17,439
retrieve the encryption key

434
00:17:17,439 --> 00:17:20,240
still it's rather interesting to see a

435
00:17:20,240 --> 00:17:22,079
different kind of failure from the

436
00:17:22,079 --> 00:17:24,079
bluetooth specification

437
00:17:24,079 --> 00:17:27,119
and we tested that and we verified if

438
00:17:27,119 --> 00:17:30,240
devices accepted connection with other

439
00:17:30,240 --> 00:17:32,480
devices with the same

440
00:17:32,480 --> 00:17:34,320
address as them

441
00:17:34,320 --> 00:17:36,960
in all our testers

442
00:17:36,960 --> 00:17:39,200
it worked and we were actually able to

443
00:17:39,200 --> 00:17:40,799
complete pairing between those two

444
00:17:40,799 --> 00:17:42,799
devices

445
00:17:42,799 --> 00:17:45,280
but implementations failed at the upper

446
00:17:45,280 --> 00:17:48,000
layer so when we started trying to use

447
00:17:48,000 --> 00:17:49,919
services

448
00:17:49,919 --> 00:17:52,799
it failed for various reasons and in

449
00:17:52,799 --> 00:17:57,600
ways that depended on the implementation

450
00:17:57,600 --> 00:17:59,440
now

451
00:17:59,440 --> 00:18:01,280
legacy paint pairing was kind of an

452
00:18:01,280 --> 00:18:04,080
outlier all the subsequent bluetooth

453
00:18:04,080 --> 00:18:06,240
agreement i've used a very common

454
00:18:06,240 --> 00:18:07,840
building block which is called a

455
00:18:07,840 --> 00:18:09,679
commitment protocol

456
00:18:09,679 --> 00:18:11,360
this is an example of commitment

457
00:18:11,360 --> 00:18:12,799
protocol so

458
00:18:12,799 --> 00:18:15,760
in bluetooth you've got your two devices

459
00:18:15,760 --> 00:18:18,400
and commitment is made for

460
00:18:18,400 --> 00:18:20,880
authentication so

461
00:18:20,880 --> 00:18:23,760
here imagine initiator and responder

462
00:18:23,760 --> 00:18:26,320
share an authentication secret

463
00:18:26,320 --> 00:18:29,120
the initiator draws a random value it

464
00:18:29,120 --> 00:18:31,919
computes what is called a commitment or

465
00:18:31,919 --> 00:18:34,000
confirmation value

466
00:18:34,000 --> 00:18:36,880
and it sends this confirmation value to

467
00:18:36,880 --> 00:18:40,240
the responder responder does the same

468
00:18:40,240 --> 00:18:42,799
and this confirmation value is computed

469
00:18:42,799 --> 00:18:45,840
from the random value and maybe the

470
00:18:45,840 --> 00:18:48,400
authentication secret maybe the address

471
00:18:48,400 --> 00:18:49,919
of the devices

472
00:18:49,919 --> 00:18:52,559
maybe well basically anything they want

473
00:18:52,559 --> 00:18:54,320
to authenticate

474
00:18:54,320 --> 00:18:57,280
and then the initiator sends the nonce

475
00:18:57,280 --> 00:18:59,600
the responder does the same

476
00:18:59,600 --> 00:19:02,559
and if the nonsense received match the

477
00:19:02,559 --> 00:19:04,960
commitment received

478
00:19:04,960 --> 00:19:07,520
the two devices have mutually

479
00:19:07,520 --> 00:19:09,440
authenticated

480
00:19:09,440 --> 00:19:12,480
what is a reflection attack on that

481
00:19:12,480 --> 00:19:14,960
well as an attacker imagine you get a

482
00:19:14,960 --> 00:19:17,120
confirmation you reflect that you get

483
00:19:17,120 --> 00:19:19,280
the nonce you reflect that

484
00:19:19,280 --> 00:19:21,120
we'll see why it's interesting in

485
00:19:21,120 --> 00:19:22,960
bluetooth protocols

486
00:19:22,960 --> 00:19:26,240
so again legacy protocols are

487
00:19:26,240 --> 00:19:28,720
ble legacy pairing

488
00:19:28,720 --> 00:19:30,240
so

489
00:19:30,240 --> 00:19:31,600
in the table

490
00:19:31,600 --> 00:19:33,840
in legacy pairing you actually have

491
00:19:33,840 --> 00:19:36,160
three different protocols just works

492
00:19:36,160 --> 00:19:38,640
pesky entry outer band

493
00:19:38,640 --> 00:19:41,039
but it's really the same thing the

494
00:19:41,039 --> 00:19:44,480
protocol is used to exchange a temporary

495
00:19:44,480 --> 00:19:45,440
key

496
00:19:45,440 --> 00:19:47,520
this temporary key is used in a

497
00:19:47,520 --> 00:19:50,000
commitment protocol and at the end both

498
00:19:50,000 --> 00:19:51,600
devices

499
00:19:51,600 --> 00:19:54,080
share an encryption key

500
00:19:54,080 --> 00:19:56,640
so this is the anterior pairing protocol

501
00:19:56,640 --> 00:19:58,640
in bialy legacy pairing

502
00:19:58,640 --> 00:20:01,120
so it's basically the female from the

503
00:20:01,120 --> 00:20:04,159
slide before it's just that the function

504
00:20:04,159 --> 00:20:06,720
is called c1 is specified

505
00:20:06,720 --> 00:20:08,799
there is a

506
00:20:08,799 --> 00:20:11,919
very easy reflection attack in that

507
00:20:11,919 --> 00:20:14,480
because

508
00:20:14,480 --> 00:20:16,880
both the initiator and the responder

509
00:20:16,880 --> 00:20:20,320
perform the same computation so if you

510
00:20:20,320 --> 00:20:22,320
just do a straightforward reflection tag

511
00:20:22,320 --> 00:20:24,559
you complete the pairing

512
00:20:24,559 --> 00:20:27,039
but you don't know the encryption key

513
00:20:27,039 --> 00:20:30,320
again it's more of a funny result

514
00:20:30,320 --> 00:20:32,799
because the most impactful attack on

515
00:20:32,799 --> 00:20:34,960
legacy pairing is that

516
00:20:34,960 --> 00:20:37,280
there is still no proper key exchange

517
00:20:37,280 --> 00:20:39,679
like the filmman and therefore

518
00:20:39,679 --> 00:20:41,919
if you just sniff the communication you

519
00:20:41,919 --> 00:20:44,080
may be able to retrieve the encryption

520
00:20:44,080 --> 00:20:46,320
key

521
00:20:46,320 --> 00:20:47,280
so

522
00:20:47,280 --> 00:20:50,080
this was kind of a warm-up and we'll get

523
00:20:50,080 --> 00:20:53,120
to secure pairing

524
00:20:53,120 --> 00:20:55,120
secure pairing there are four different

525
00:20:55,120 --> 00:20:58,240
protocols and those protocols are

526
00:20:58,240 --> 00:21:00,240
actually the same between bluetooth

527
00:21:00,240 --> 00:21:02,400
classic and ble so

528
00:21:02,400 --> 00:21:04,880
they are there

529
00:21:04,880 --> 00:21:09,520
we'll just focus on pesky entry

530
00:21:09,600 --> 00:21:12,799
this is the pesky entry protocol it

531
00:21:12,799 --> 00:21:15,760
works this way so you've got the

532
00:21:15,760 --> 00:21:19,039
one from a user's perspective there is

533
00:21:19,039 --> 00:21:21,520
one device which displays a pass key

534
00:21:21,520 --> 00:21:24,480
it's a numeric code it has six digits

535
00:21:24,480 --> 00:21:27,200
and the user inputs it on the other

536
00:21:27,200 --> 00:21:28,400
device

537
00:21:28,400 --> 00:21:31,679
and both devices will use this path key

538
00:21:31,679 --> 00:21:35,120
to authenticate to each other

539
00:21:35,120 --> 00:21:37,520
you've got the feature exchange step so

540
00:21:37,520 --> 00:21:41,200
they choose to use a secure pesky entry

541
00:21:41,200 --> 00:21:43,120
then they perform a

542
00:21:43,120 --> 00:21:45,200
mind key exchange

543
00:21:45,200 --> 00:21:47,919
then they perform a commitment protocol

544
00:21:47,919 --> 00:21:51,520
but each commitment uses only one bit of

545
00:21:51,520 --> 00:21:53,600
the pass key so

546
00:21:53,600 --> 00:21:55,600
they basically authenticate their public

547
00:21:55,600 --> 00:21:57,600
key with one bit of the pesky at the

548
00:21:57,600 --> 00:21:59,039
time

549
00:21:59,039 --> 00:22:01,760
and because they've only used one bit of

550
00:22:01,760 --> 00:22:04,240
the pass key and it's 20 bits long they

551
00:22:04,240 --> 00:22:07,360
do this 20 times and there is a final

552
00:22:07,360 --> 00:22:09,360
key confirmation step

553
00:22:09,360 --> 00:22:12,000
at the end of which both devices are

554
00:22:12,000 --> 00:22:14,559
successfully paired and they share an

555
00:22:14,559 --> 00:22:17,039
encryption key

556
00:22:17,039 --> 00:22:21,039
so let's look a bit more closely at the

557
00:22:21,039 --> 00:22:24,000
commitment protocol it's used it's based

558
00:22:24,000 --> 00:22:25,760
on different functions depending on the

559
00:22:25,760 --> 00:22:27,440
technology but

560
00:22:27,440 --> 00:22:30,320
they have the same flows

561
00:22:30,320 --> 00:22:31,200
so

562
00:22:31,200 --> 00:22:34,960
this is the commitment protocol in ble

563
00:22:34,960 --> 00:22:38,720
basically the function is aes in cmac

564
00:22:38,720 --> 00:22:42,559
mode using the nonce as the key

565
00:22:42,559 --> 00:22:45,520
and what's not authenticated inside the

566
00:22:45,520 --> 00:22:49,120
initiator takes the x-coordinate of its

567
00:22:49,120 --> 00:22:51,520
public key concatenated

568
00:22:51,520 --> 00:22:53,840
with the x-coordinate of the responders

569
00:22:53,840 --> 00:22:55,120
public key

570
00:22:55,120 --> 00:22:58,240
concatenated with the value of the bit

571
00:22:58,240 --> 00:22:59,679
of the pesky

572
00:22:59,679 --> 00:23:03,039
and the responded at the same but

573
00:23:03,039 --> 00:23:08,039
the public keys have been swapped

574
00:23:10,159 --> 00:23:11,120
if

575
00:23:11,120 --> 00:23:13,280
we look at non-problems on these

576
00:23:13,280 --> 00:23:15,790
commitment protocols we have two

577
00:23:15,790 --> 00:23:17,039
[Music]

578
00:23:17,039 --> 00:23:19,840
in 2008 there was a black hat conference

579
00:23:19,840 --> 00:23:22,400
where lindell said that

580
00:23:22,400 --> 00:23:24,880
it actually did not protect the value of

581
00:23:24,880 --> 00:23:26,960
the pesky

582
00:23:26,960 --> 00:23:29,600
basically if you just nif the entire

583
00:23:29,600 --> 00:23:30,720
protocol

584
00:23:30,720 --> 00:23:33,200
you are able to recover the pesky that

585
00:23:33,200 --> 00:23:34,480
was used

586
00:23:34,480 --> 00:23:37,760
and the second problem is that only the

587
00:23:37,760 --> 00:23:40,240
x-coordinate of the public key is used

588
00:23:40,240 --> 00:23:41,200
so

589
00:23:41,200 --> 00:23:43,840
only the x-coordinate of the public key

590
00:23:43,840 --> 00:23:46,959
is authenticated

591
00:23:47,279 --> 00:23:50,880
because the coordinates are swapped so

592
00:23:50,880 --> 00:23:53,600
first initiator responder then responder

593
00:23:53,600 --> 00:23:54,880
initiator

594
00:23:54,880 --> 00:23:56,960
if you don't know the pass key you can't

595
00:23:56,960 --> 00:24:00,320
actually do a simple reflection attack

596
00:24:00,320 --> 00:24:03,840
but what if your x-coordinates are

597
00:24:03,840 --> 00:24:05,760
identical

598
00:24:05,760 --> 00:24:08,559
in that case you are able to mount an

599
00:24:08,559 --> 00:24:11,360
attack and you can actually

600
00:24:11,360 --> 00:24:13,039
mount an impersonator

601
00:24:13,039 --> 00:24:15,600
impersonation on this protocol

602
00:24:15,600 --> 00:24:19,840
this is an example so imagine initiator

603
00:24:19,840 --> 00:24:23,120
and responder want to pair and as an

604
00:24:23,120 --> 00:24:25,440
attacker you've performed the machine in

605
00:24:25,440 --> 00:24:27,039
the middle

606
00:24:27,039 --> 00:24:28,000
so

607
00:24:28,000 --> 00:24:31,520
the user inputs the pass key from the

608
00:24:31,520 --> 00:24:34,240
initiator into the responder and as an

609
00:24:34,240 --> 00:24:36,960
attacker you don't have access to it

610
00:24:36,960 --> 00:24:39,360
the initiator sends you its public key

611
00:24:39,360 --> 00:24:42,559
you just reflect it

612
00:24:42,559 --> 00:24:45,279
then because you reflected it you are

613
00:24:45,279 --> 00:24:47,760
able to reflect all the commitments

614
00:24:47,760 --> 00:24:51,200
because the x-coordinate is the same

615
00:24:51,200 --> 00:24:52,960
between the two

616
00:24:52,960 --> 00:24:55,200
public keys

617
00:24:55,200 --> 00:24:56,799
and

618
00:24:56,799 --> 00:24:59,760
because you know the confirmation value

619
00:24:59,760 --> 00:25:02,480
and the nonce you are able to retrieve

620
00:25:02,480 --> 00:25:04,640
the first bit of the pass key in the

621
00:25:04,640 --> 00:25:07,840
first commitment round

622
00:25:07,840 --> 00:25:11,840
and because of that you can in fact just

623
00:25:11,840 --> 00:25:14,400
exchange your own public key with the

624
00:25:14,400 --> 00:25:15,679
responder

625
00:25:15,679 --> 00:25:19,039
use the pesky that you recover to

626
00:25:19,039 --> 00:25:21,200
authenticate to the responder

627
00:25:21,200 --> 00:25:23,600
and therefore you are able to complete

628
00:25:23,600 --> 00:25:25,840
the pairing with the responder

629
00:25:25,840 --> 00:25:29,600
the idea is use reflection attack with

630
00:25:29,600 --> 00:25:32,640
the initiator to recover the pesky

631
00:25:32,640 --> 00:25:35,039
use the pass key to authenticate

632
00:25:35,039 --> 00:25:37,200
yourself in the same instance of the

633
00:25:37,200 --> 00:25:40,799
protocol to the responder

634
00:25:41,360 --> 00:25:42,640
so this

635
00:25:42,640 --> 00:25:45,520
ends with attacker as impersonated the

636
00:25:45,520 --> 00:25:48,799
responder it has an encryption key with

637
00:25:48,799 --> 00:25:52,000
the responder and this works in both

638
00:25:52,000 --> 00:25:54,640
bluetooth classic and ble at the end the

639
00:25:54,640 --> 00:25:58,320
initiator has failed pairing

640
00:26:00,400 --> 00:26:03,200
the problems here is that

641
00:26:03,200 --> 00:26:05,279
there are two faults first you can

642
00:26:05,279 --> 00:26:06,559
actually

643
00:26:06,559 --> 00:26:08,480
reflect the commitment protocol and

644
00:26:08,480 --> 00:26:11,120
complete the pairing on most of the

645
00:26:11,120 --> 00:26:13,279
pairing with the initiator

646
00:26:13,279 --> 00:26:16,400
and you can

647
00:26:16,400 --> 00:26:20,320
recover the pesky from the protocol

648
00:26:20,320 --> 00:26:22,640
so we tested that again we tested that

649
00:26:22,640 --> 00:26:26,640
on ble and on common implementations

650
00:26:26,640 --> 00:26:30,000
it works we used the framework mirage we

651
00:26:30,000 --> 00:26:32,240
re-implemented the secure pesky entry

652
00:26:32,240 --> 00:26:33,520
protocol

653
00:26:33,520 --> 00:26:35,440
and this is

654
00:26:35,440 --> 00:26:37,600
the test we made

655
00:26:37,600 --> 00:26:39,520
what it means for bluetooth security

656
00:26:39,520 --> 00:26:42,720
well it affects the two technologies

657
00:26:42,720 --> 00:26:43,760
and

658
00:26:43,760 --> 00:26:46,559
in fact it also affect one of the secure

659
00:26:46,559 --> 00:26:48,880
pairing protocols without relying on a

660
00:26:48,880 --> 00:26:50,000
downgrade

661
00:26:50,000 --> 00:26:53,360
which is something that very rarely

662
00:26:53,360 --> 00:26:55,279
happen

663
00:26:55,279 --> 00:26:56,880
hopefully it's patchable in

664
00:26:56,880 --> 00:26:59,520
implementations because you can see that

665
00:26:59,520 --> 00:27:02,080
the value you have is just something

666
00:27:02,080 --> 00:27:04,480
that was reflected

667
00:27:04,480 --> 00:27:05,600
now

668
00:27:05,600 --> 00:27:07,200
we'll look at

669
00:27:07,200 --> 00:27:09,840
mesh provisioning security

670
00:27:09,840 --> 00:27:13,200
what is bluetooth mesh again so the idea

671
00:27:13,200 --> 00:27:15,039
you have many devices

672
00:27:15,039 --> 00:27:16,880
which communicate together in a mesh

673
00:27:16,880 --> 00:27:18,000
network

674
00:27:18,000 --> 00:27:20,480
and to communicate they rely on three

675
00:27:20,480 --> 00:27:23,039
different encryption key network key

676
00:27:23,039 --> 00:27:25,360
application key device key

677
00:27:25,360 --> 00:27:28,240
the provisioning is used to exchange the

678
00:27:28,240 --> 00:27:30,640
symmetric secrets and to provide the

679
00:27:30,640 --> 00:27:32,720
devices with the needed symmetric

680
00:27:32,720 --> 00:27:36,480
secrets to communicate on the network

681
00:27:36,480 --> 00:27:38,960
if we look at the provisioning protocol

682
00:27:38,960 --> 00:27:41,360
it's very similar to what was seen

683
00:27:41,360 --> 00:27:43,360
before you've got the feature exchange

684
00:27:43,360 --> 00:27:44,480
step

685
00:27:44,480 --> 00:27:47,120
you've got dcl monkey exchange and

686
00:27:47,120 --> 00:27:49,360
you've got a commitment protocol for

687
00:27:49,360 --> 00:27:50,880
authentication

688
00:27:50,880 --> 00:27:52,880
and then the provisioner sends the

689
00:27:52,880 --> 00:27:55,760
network key to the device

690
00:27:55,760 --> 00:27:58,799
authentication depends on the type of

691
00:27:58,799 --> 00:28:01,600
thing but usually you've got

692
00:28:01,600 --> 00:28:04,799
same as for past country one device

693
00:28:04,799 --> 00:28:07,840
displays or sends an authentication

694
00:28:07,840 --> 00:28:08,799
value

695
00:28:08,799 --> 00:28:11,200
and the user inputs it on the other

696
00:28:11,200 --> 00:28:12,720
device

697
00:28:12,720 --> 00:28:17,440
if we look a bit more closely we notice

698
00:28:17,440 --> 00:28:19,679
a very important thing

699
00:28:19,679 --> 00:28:22,720
the authentication data is padded into a

700
00:28:22,720 --> 00:28:25,919
field that is called odd value and odd

701
00:28:25,919 --> 00:28:28,880
value the nonsense and the confirmation

702
00:28:28,880 --> 00:28:33,120
values they are always 16 bytes long

703
00:28:33,120 --> 00:28:35,120
that's the specification that mandates

704
00:28:35,120 --> 00:28:35,919
it

705
00:28:35,919 --> 00:28:38,000
if we look at the commitment protocol

706
00:28:38,000 --> 00:28:40,799
first both device derive a confirmation

707
00:28:40,799 --> 00:28:41,840
key

708
00:28:41,840 --> 00:28:44,880
then they use this confirmation key in

709
00:28:44,880 --> 00:28:48,080
an aes in cmac mode with the norms

710
00:28:48,080 --> 00:28:52,159
concatenated to authentication value

711
00:28:52,159 --> 00:28:54,240
well we've seen that before there is a

712
00:28:54,240 --> 00:28:57,600
very simple reflection tag if you as an

713
00:28:57,600 --> 00:29:01,200
attacker manage to spoof a device

714
00:29:01,200 --> 00:29:04,000
you can actually complete the

715
00:29:04,000 --> 00:29:06,480
authentication protocol and because you

716
00:29:06,480 --> 00:29:08,640
complete the authentication protocol you

717
00:29:08,640 --> 00:29:11,200
actually get the network key

718
00:29:11,200 --> 00:29:13,600
so as an attacker you are able to

719
00:29:13,600 --> 00:29:16,399
legitimately join the network

720
00:29:16,399 --> 00:29:18,720
you've got a variant of that

721
00:29:18,720 --> 00:29:21,679
if the key exchange is not performed in

722
00:29:21,679 --> 00:29:24,080
band in which case you can still

723
00:29:24,080 --> 00:29:26,640
complete the provisioning but you're not

724
00:29:26,640 --> 00:29:29,360
able to join the network

725
00:29:29,360 --> 00:29:30,559
um

726
00:29:30,559 --> 00:29:32,559
again well we've seen examples of

727
00:29:32,559 --> 00:29:35,520
perfection texts

728
00:29:35,600 --> 00:29:38,640
but there are more problems in the

729
00:29:38,640 --> 00:29:40,559
provisioning protocols

730
00:29:40,559 --> 00:29:43,360
first there's still a problem with the

731
00:29:43,360 --> 00:29:45,919
authentication secret that can be brute

732
00:29:45,919 --> 00:29:47,200
force but

733
00:29:47,200 --> 00:29:49,919
as we've seen it actually affects all

734
00:29:49,919 --> 00:29:52,399
technologies so it's not a really new

735
00:29:52,399 --> 00:29:54,240
problem it's just applied to a different

736
00:29:54,240 --> 00:29:55,600
technology

737
00:29:55,600 --> 00:29:57,360
more importantly there is a

738
00:29:57,360 --> 00:29:58,880
cryptographic problem in their

739
00:29:58,880 --> 00:30:00,720
commitment protocol

740
00:30:00,720 --> 00:30:04,240
so i said that all the values they were

741
00:30:04,240 --> 00:30:06,960
16 bytes long and the commitment

742
00:30:06,960 --> 00:30:10,240
protocol is aes in cmac mode

743
00:30:10,240 --> 00:30:13,120
well aes in cmac mode is not pretty much

744
00:30:13,120 --> 00:30:15,440
resistant so in fact

745
00:30:15,440 --> 00:30:17,840
when you use it if you know the key and

746
00:30:17,840 --> 00:30:19,679
the proper information

747
00:30:19,679 --> 00:30:22,080
you may retrieve up to one block of

748
00:30:22,080 --> 00:30:23,600
plain text

749
00:30:23,600 --> 00:30:27,120
this means that we have those two

750
00:30:27,120 --> 00:30:29,039
intermediate results

751
00:30:29,039 --> 00:30:31,919
if we know the confirmation key a nonce

752
00:30:31,919 --> 00:30:34,720
and a confirmation value we may recover

753
00:30:34,720 --> 00:30:36,880
the authentication value

754
00:30:36,880 --> 00:30:37,600
and

755
00:30:37,600 --> 00:30:39,600
if we know the confirmation key

756
00:30:39,600 --> 00:30:42,960
authentication value and a confirmation

757
00:30:42,960 --> 00:30:46,640
we may recover unknowns

758
00:30:46,640 --> 00:30:48,720
we'll see how to combine them

759
00:30:48,720 --> 00:30:49,679
so

760
00:30:49,679 --> 00:30:52,559
here is the idea of the attack you you

761
00:30:52,559 --> 00:30:54,159
send your own public key to the

762
00:30:54,159 --> 00:30:55,760
provisioner

763
00:30:55,760 --> 00:30:58,000
the provisioner sends a confirmation

764
00:30:58,000 --> 00:31:00,480
value as an attacker you send a

765
00:31:00,480 --> 00:31:02,840
completely random confirmation value you

766
00:31:02,840 --> 00:31:06,159
don't you don't care what it is

767
00:31:06,159 --> 00:31:09,360
the provisioner sends its nonce and

768
00:31:09,360 --> 00:31:10,399
there

769
00:31:10,399 --> 00:31:13,600
you can use the first result to recover

770
00:31:13,600 --> 00:31:16,720
the authentication value that was used

771
00:31:16,720 --> 00:31:19,600
and then you can use the second result

772
00:31:19,600 --> 00:31:21,600
to find the nonce

773
00:31:21,600 --> 00:31:24,399
which makes the provisioner believe that

774
00:31:24,399 --> 00:31:26,559
you knew the authentication value all

775
00:31:26,559 --> 00:31:28,000
along

776
00:31:28,000 --> 00:31:31,039
and you send that to the provisioner

777
00:31:31,039 --> 00:31:32,880
and that's it

778
00:31:32,880 --> 00:31:35,600
because the provisioner says oh

779
00:31:35,600 --> 00:31:38,240
he knew how odd value so is properly

780
00:31:38,240 --> 00:31:41,279
authenticated so i will just send the

781
00:31:41,279 --> 00:31:43,679
device the network key

782
00:31:43,679 --> 00:31:44,720
and

783
00:31:44,720 --> 00:31:47,279
in fact we can also upgrade that to a

784
00:31:47,279 --> 00:31:49,200
complete machine in the middle between

785
00:31:49,200 --> 00:31:51,760
the provisioner and the device

786
00:31:51,760 --> 00:31:55,679
and therefore in this attack

787
00:31:55,679 --> 00:31:58,480
the device thinks is connected to the

788
00:31:58,480 --> 00:32:00,559
real mesh network that is really

789
00:32:00,559 --> 00:32:02,960
connected to our mesh network and the

790
00:32:02,960 --> 00:32:05,519
provisioner thinks the device is also

791
00:32:05,519 --> 00:32:07,440
connected to the network

792
00:32:07,440 --> 00:32:08,320
so

793
00:32:08,320 --> 00:32:10,480
from a user's point of view you don't

794
00:32:10,480 --> 00:32:12,080
see a problem here

795
00:32:12,080 --> 00:32:14,720
and from either the provisioner or the

796
00:32:14,720 --> 00:32:15,919
device

797
00:32:15,919 --> 00:32:18,480
there were no red flags so you'd it's

798
00:32:18,480 --> 00:32:20,080
not like a reflection attack when you

799
00:32:20,080 --> 00:32:22,880
see the message you receive is weird

800
00:32:22,880 --> 00:32:25,200
here you you don't see the problem

801
00:32:25,200 --> 00:32:28,000
and this means that it's not patchable

802
00:32:28,000 --> 00:32:30,960
in implementations and it actually

803
00:32:30,960 --> 00:32:33,600
requires a specification update

804
00:32:33,600 --> 00:32:34,720
to do

805
00:32:34,720 --> 00:32:38,240
to test that so we used um

806
00:32:38,240 --> 00:32:41,279
legitimate provisioner which is an

807
00:32:41,279 --> 00:32:43,440
android phone with the nrf mesh

808
00:32:43,440 --> 00:32:44,880
application

809
00:32:44,880 --> 00:32:48,320
and as the attacker device we used a red

810
00:32:48,320 --> 00:32:50,559
bear ble nano 2

811
00:32:50,559 --> 00:32:54,320
we use the apache menu operating system

812
00:32:54,320 --> 00:32:57,600
and we use the

813
00:32:57,600 --> 00:33:00,080
ble and bluetooth mesh stack which comes

814
00:33:00,080 --> 00:33:03,039
with apache manual which is called limbo

815
00:33:03,039 --> 00:33:06,000
and we modify the mesh stack to

816
00:33:06,000 --> 00:33:08,080
implement the attack on the provisioning

817
00:33:08,080 --> 00:33:10,480
so we actually implemented all the

818
00:33:10,480 --> 00:33:12,080
cryptographic attack on the provisioning

819
00:33:12,080 --> 00:33:14,720
to verify that they worked

820
00:33:14,720 --> 00:33:17,679
and we used again a minute application

821
00:33:17,679 --> 00:33:19,840
which is called bt mesh and this is the

822
00:33:19,840 --> 00:33:21,519
setup you have

823
00:33:21,519 --> 00:33:24,640
a usb to serial converter you've got the

824
00:33:24,640 --> 00:33:25,840
nano 2

825
00:33:25,840 --> 00:33:27,200
you've got a

826
00:33:27,200 --> 00:33:29,519
very quick board for wiring and you've

827
00:33:29,519 --> 00:33:32,480
got the assembled device

828
00:33:32,480 --> 00:33:33,279
so

829
00:33:33,279 --> 00:33:37,960
it's rather small it's um this

830
00:33:38,720 --> 00:33:41,840
short demonstration

831
00:33:45,840 --> 00:33:50,159
so we are on the laptop and um

832
00:33:50,159 --> 00:33:53,440
this is the nrf mesh application

833
00:33:53,440 --> 00:33:56,399
this is the connection to the device and

834
00:33:56,399 --> 00:33:59,279
the laptop sends a command to the device

835
00:33:59,279 --> 00:34:02,399
the idea is that the device spoofs a

836
00:34:02,399 --> 00:34:03,679
legitimate

837
00:34:03,679 --> 00:34:06,960
node but it's really an attacker device

838
00:34:06,960 --> 00:34:08,159
and

839
00:34:08,159 --> 00:34:10,800
the user will try to provision this

840
00:34:10,800 --> 00:34:11,839
device

841
00:34:11,839 --> 00:34:14,719
and will use a long authentication

842
00:34:14,719 --> 00:34:18,959
secret which cannot be brute forced

843
00:34:19,760 --> 00:34:20,800
let's

844
00:34:20,800 --> 00:34:24,159
start it from the beginning

845
00:34:29,440 --> 00:34:30,960
we start the demo so just the

846
00:34:30,960 --> 00:34:32,480
communication

847
00:34:32,480 --> 00:34:34,960
we try to add a new node to our mesh

848
00:34:34,960 --> 00:34:38,000
network we see the device

849
00:34:38,000 --> 00:34:40,239
and we see it's not provisioned so we

850
00:34:40,239 --> 00:34:42,560
actually need to provision it

851
00:34:42,560 --> 00:34:44,079
so we

852
00:34:44,079 --> 00:34:46,159
change its address

853
00:34:46,159 --> 00:34:48,399
we select static out of bound because we

854
00:34:48,399 --> 00:34:50,639
can actually put a very very long

855
00:34:50,639 --> 00:34:52,800
authentication value in it

856
00:34:52,800 --> 00:34:55,199
it's not random but the point is that

857
00:34:55,199 --> 00:34:57,919
it's very long

858
00:34:58,160 --> 00:34:59,520
um

859
00:34:59,520 --> 00:35:02,240
confirm and here we see above we'll see

860
00:35:02,240 --> 00:35:05,359
a bit later on that actually the attack

861
00:35:05,359 --> 00:35:08,240
is completed the device has joined the

862
00:35:08,240 --> 00:35:09,760
mesh network

863
00:35:09,760 --> 00:35:12,079
and this is just the provisioner doing

864
00:35:12,079 --> 00:35:13,200
some

865
00:35:13,200 --> 00:35:15,760
additional configuration stuff

866
00:35:15,760 --> 00:35:16,640
to

867
00:35:16,640 --> 00:35:18,720
provide the device with the relevant

868
00:35:18,720 --> 00:35:21,680
keys so if we verify we've got device

869
00:35:21,680 --> 00:35:24,160
key network key application key

870
00:35:24,160 --> 00:35:26,560
and we can verify that

871
00:35:26,560 --> 00:35:29,520
the attacker has probably gotten all the

872
00:35:29,520 --> 00:35:33,839
relevant keys to the network

873
00:35:43,680 --> 00:35:46,320
this is the wire track capture of what

874
00:35:46,320 --> 00:35:47,920
just happened

875
00:35:47,920 --> 00:35:50,960
you see the public key exchange you see

876
00:35:50,960 --> 00:35:54,640
the privilege sending its confirmation

877
00:35:54,640 --> 00:35:56,640
you see the confirmation of the device

878
00:35:56,640 --> 00:36:00,160
which is all zeros so technically we can

879
00:36:00,160 --> 00:36:03,119
put any random confirmation

880
00:36:03,119 --> 00:36:05,599
but with all zeros

881
00:36:05,599 --> 00:36:07,520
you can actually see that it's not

882
00:36:07,520 --> 00:36:09,119
supposed to happen and you're not

883
00:36:09,119 --> 00:36:10,960
supposed to still be able to complete

884
00:36:10,960 --> 00:36:13,920
the protocol and then provisioner sent a

885
00:36:13,920 --> 00:36:16,640
nonce and the device sent the nonce that

886
00:36:16,640 --> 00:36:18,880
was crafted after recovering the

887
00:36:18,880 --> 00:36:22,000
authentication value

888
00:36:22,119 --> 00:36:25,599
a summary on the provisioning protocol

889
00:36:25,599 --> 00:36:27,839
so we've not really well we've just

890
00:36:27,839 --> 00:36:30,320
mentioned it we have problems on the

891
00:36:30,320 --> 00:36:32,800
secrecy of the authentication value

892
00:36:32,800 --> 00:36:35,119
but more importantly we have

893
00:36:35,119 --> 00:36:37,920
what we just saw which is called the

894
00:36:37,920 --> 00:36:41,119
malleable commitment vulnerability

895
00:36:41,119 --> 00:36:44,000
where we can actually commit well send

896
00:36:44,000 --> 00:36:45,760
something

897
00:36:45,760 --> 00:36:46,800
anything

898
00:36:46,800 --> 00:36:48,640
and after

899
00:36:48,640 --> 00:36:51,440
say oh we had actually committed to

900
00:36:51,440 --> 00:36:53,599
something and this something in that

901
00:36:53,599 --> 00:36:56,320
case is

902
00:36:56,320 --> 00:36:57,520
we

903
00:36:57,520 --> 00:37:00,079
well you think that we knew all along

904
00:37:00,079 --> 00:37:03,200
the authentication value

905
00:37:03,200 --> 00:37:06,320
so quick conclusion uh

906
00:37:06,320 --> 00:37:10,000
we found this in 2020 we performed a

907
00:37:10,000 --> 00:37:12,160
responsible disclosure to the bluetooth

908
00:37:12,160 --> 00:37:13,520
sig

909
00:37:13,520 --> 00:37:15,280
and

910
00:37:15,280 --> 00:37:18,079
we had verified that on proper

911
00:37:18,079 --> 00:37:20,000
implementations

912
00:37:20,000 --> 00:37:24,560
and so the sig assigned to us uh six cvs

913
00:37:24,560 --> 00:37:27,359
on the specification so you have a table

914
00:37:27,359 --> 00:37:28,720
of uh

915
00:37:28,720 --> 00:37:30,560
kind of resume of

916
00:37:30,560 --> 00:37:32,079
what was there

917
00:37:32,079 --> 00:37:34,960
if we take our table with the 20

918
00:37:34,960 --> 00:37:38,560
kilograms so we have our key agreements

919
00:37:38,560 --> 00:37:41,359
in blue are the authenticated kerguments

920
00:37:41,359 --> 00:37:44,160
in black circles are the kegelments that

921
00:37:44,160 --> 00:37:46,640
are considered secure according to the

922
00:37:46,640 --> 00:37:48,400
specification

923
00:37:48,400 --> 00:37:51,040
and in red are the keygrounds that were

924
00:37:51,040 --> 00:37:54,000
successfully attacked in this study

925
00:37:54,000 --> 00:37:56,400
if we take our

926
00:37:56,400 --> 00:37:59,119
more complex table

927
00:37:59,119 --> 00:38:01,040
we've added the colon

928
00:38:01,040 --> 00:38:03,920
reflection tags because in fact we found

929
00:38:03,920 --> 00:38:06,320
reflection text on literally all

930
00:38:06,320 --> 00:38:08,480
bluetooth technologies

931
00:38:08,480 --> 00:38:09,599
all

932
00:38:09,599 --> 00:38:11,040
modes

933
00:38:11,040 --> 00:38:12,880
and

934
00:38:12,880 --> 00:38:15,280
so we've added the commitment function

935
00:38:15,280 --> 00:38:17,359
in bluetooth mesh which is malleable and

936
00:38:17,359 --> 00:38:20,480
the secrecy problems in

937
00:38:20,480 --> 00:38:23,200
bluetooth mesh 2.

938
00:38:23,200 --> 00:38:26,720
as a conclusion to this talk

939
00:38:26,720 --> 00:38:28,810
in this study we've had

940
00:38:28,810 --> 00:38:30,000
[Music]

941
00:38:30,000 --> 00:38:32,560
we've seen very informative examples of

942
00:38:32,560 --> 00:38:34,400
reflection in text

943
00:38:34,400 --> 00:38:35,280
on

944
00:38:35,280 --> 00:38:36,400
real world

945
00:38:36,400 --> 00:38:38,720
protocols usually reflection text is

946
00:38:38,720 --> 00:38:41,920
something that you find in papers

947
00:38:41,920 --> 00:38:44,640
and that has no real impact because

948
00:38:44,640 --> 00:38:46,320
you're not able to recover the

949
00:38:46,320 --> 00:38:47,920
encryption key

950
00:38:47,920 --> 00:38:50,960
here we've seen on uh

951
00:38:50,960 --> 00:38:52,560
four reflections four different

952
00:38:52,560 --> 00:38:54,960
reflection texts and in three of them

953
00:38:54,960 --> 00:38:56,880
we are actually able to retrieve the

954
00:38:56,880 --> 00:38:59,280
unclip the encryption key due to some

955
00:38:59,280 --> 00:39:02,480
quirks in the bluetooth specification

956
00:39:02,480 --> 00:39:04,960
we've seen that well a numeric

957
00:39:04,960 --> 00:39:07,040
comparison which is a secure protocol

958
00:39:07,040 --> 00:39:09,520
could not be successfully attacked and

959
00:39:09,520 --> 00:39:12,400
actually there is no

960
00:39:12,400 --> 00:39:16,720
major flows in that protocol yet

961
00:39:16,720 --> 00:39:19,200
hopefully most of the problems we found

962
00:39:19,200 --> 00:39:20,000
were

963
00:39:20,000 --> 00:39:22,400
reflection types hence they can be

964
00:39:22,400 --> 00:39:25,119
patched in implementations

965
00:39:25,119 --> 00:39:26,240
and

966
00:39:26,240 --> 00:39:29,200
full bluetooth mesh while we kind of

967
00:39:29,200 --> 00:39:30,320
show

968
00:39:30,320 --> 00:39:31,560
that the

969
00:39:31,560 --> 00:39:34,640
authentication of bluetooth mesh

970
00:39:34,640 --> 00:39:36,000
is broken

971
00:39:36,000 --> 00:39:38,480
and therefore it will require a

972
00:39:38,480 --> 00:39:41,760
specification update to modify that

973
00:39:41,760 --> 00:39:42,640
so

974
00:39:42,640 --> 00:39:44,640
looking forward we'll see how the

975
00:39:44,640 --> 00:39:47,200
specification evolves we don't have it

976
00:39:47,200 --> 00:39:48,320
yet

977
00:39:48,320 --> 00:39:50,400
maybe they will keep rotor compatibility

978
00:39:50,400 --> 00:39:52,400
maybe they will not it will depend on

979
00:39:52,400 --> 00:39:54,480
what the bluetooth sig wants to do with

980
00:39:54,480 --> 00:39:57,760
bluetooth mesh basically don't rely on

981
00:39:57,760 --> 00:40:00,079
bluetooth built-in security

982
00:40:00,079 --> 00:40:03,280
and if you really have to try to pair

983
00:40:03,280 --> 00:40:05,839
and provision your devices in controlled

984
00:40:05,839 --> 00:40:08,240
environments

985
00:40:08,240 --> 00:40:10,930
thank you for your attention

986
00:40:10,930 --> 00:40:17,989
[Applause]

987
00:40:20,640 --> 00:40:21,920
yes it is

988
00:40:21,920 --> 00:40:25,160
any questions

989
00:40:32,880 --> 00:40:35,040
i heard you used the word hopefully

990
00:40:35,040 --> 00:40:36,880
twice when you were talking about

991
00:40:36,880 --> 00:40:38,720
vendors patching it

992
00:40:38,720 --> 00:40:39,680
so

993
00:40:39,680 --> 00:40:42,640
do you have a sense of which vendors are

994
00:40:42,640 --> 00:40:44,240
actually vulnerable and which vendors

995
00:40:44,240 --> 00:40:46,240
have patched it

996
00:40:46,240 --> 00:40:49,680
um i think there is a

997
00:40:49,680 --> 00:40:53,839
well i'm sure there was a

998
00:40:54,319 --> 00:40:57,280
vulnerability paid from the

999
00:40:57,280 --> 00:41:00,400
third canadian melon so you can actually

1000
00:41:00,400 --> 00:41:02,480
well there are all the cvs all the

1001
00:41:02,480 --> 00:41:05,119
public statements and all the vendors

1002
00:41:05,119 --> 00:41:07,839
which were affected which were not

1003
00:41:07,839 --> 00:41:10,160
and i don't know if you see which are

1004
00:41:10,160 --> 00:41:11,680
patched but

1005
00:41:11,680 --> 00:41:14,480
in any case it was more than a year ago

1006
00:41:14,480 --> 00:41:15,599
so

1007
00:41:15,599 --> 00:41:17,599
bluetooth c

1008
00:41:17,599 --> 00:41:20,480
coordinated the patch for the different

1009
00:41:20,480 --> 00:41:23,040
vendors so normally it should be patched

1010
00:41:23,040 --> 00:41:25,599
yeah so i have some experience with cert

1011
00:41:25,599 --> 00:41:27,440
coordinating the disclosures and they'll

1012
00:41:27,440 --> 00:41:28,720
tell everyone like here's a

1013
00:41:28,720 --> 00:41:31,440
vulnerability and sig does the same way

1014
00:41:31,440 --> 00:41:32,160
but

1015
00:41:32,160 --> 00:41:34,880
like for the implementations that you

1016
00:41:34,880 --> 00:41:37,520
tested did you go confirm anyone had

1017
00:41:37,520 --> 00:41:40,560
actually patched it successfully

1018
00:41:40,560 --> 00:41:42,400
um

1019
00:41:42,400 --> 00:41:46,400
i saw some patches uh

1020
00:41:46,480 --> 00:41:49,839
i won't tell more

1021
00:41:51,440 --> 00:41:53,119
nice

1022
00:41:53,119 --> 00:41:55,920
any more questions

1023
00:41:57,119 --> 00:41:59,200
okay that was it

1024
00:41:59,200 --> 00:42:02,000
not a question but an observation when i

1025
00:42:02,000 --> 00:42:04,880
was doing bluetooth security testing

1026
00:42:04,880 --> 00:42:06,400
a while ago

1027
00:42:06,400 --> 00:42:08,640
we found you mentioned there that one of

1028
00:42:08,640 --> 00:42:11,440
the mitigations you can provide locally

1029
00:42:11,440 --> 00:42:13,200
is to pair

1030
00:42:13,200 --> 00:42:17,119
in a faraday cage right

1031
00:42:17,119 --> 00:42:19,839
what we found was if you can

1032
00:42:19,839 --> 00:42:21,760
spoof an address

1033
00:42:21,760 --> 00:42:24,400
you can connect to the target

1034
00:42:24,400 --> 00:42:27,200
request a new key it will then dump the

1035
00:42:27,200 --> 00:42:28,480
key

1036
00:42:28,480 --> 00:42:30,000
and then when the real target comes

1037
00:42:30,000 --> 00:42:32,160
along it's forced to do a repairing so

1038
00:42:32,160 --> 00:42:33,920
you get to witness

1039
00:42:33,920 --> 00:42:36,560
the device repairing as soon as it comes

1040
00:42:36,560 --> 00:42:39,279
within range

1041
00:42:39,839 --> 00:42:42,079
so if i understand correctly you say

1042
00:42:42,079 --> 00:42:42,880
that

1043
00:42:42,880 --> 00:42:46,160
from your tests on real implementations

1044
00:42:46,160 --> 00:42:48,560
even though device were already paired

1045
00:42:48,560 --> 00:42:50,240
you were actually

1046
00:42:50,240 --> 00:42:52,480
actually able to make them forget they

1047
00:42:52,480 --> 00:42:53,760
were paired

1048
00:42:53,760 --> 00:42:56,560
and actually to make one of them forget

1049
00:42:56,560 --> 00:42:57,520
and then

1050
00:42:57,520 --> 00:42:58,800
of course because they don't have a

1051
00:42:58,800 --> 00:43:00,640
symmetric key anymore the connection

1052
00:43:00,640 --> 00:43:02,160
will fail the next time they try and

1053
00:43:02,160 --> 00:43:04,160
talk yeah it's uh

1054
00:43:04,160 --> 00:43:05,440
yeah it's a

1055
00:43:05,440 --> 00:43:07,599
problem in the specification because

1056
00:43:07,599 --> 00:43:10,400
your messages saying hey i forgotten the

1057
00:43:10,400 --> 00:43:13,760
key try to repair to me

1058
00:43:13,760 --> 00:43:17,839
it's definitely a problem and it's why

1059
00:43:17,839 --> 00:43:20,640
even though you have paired your devices

1060
00:43:20,640 --> 00:43:22,560
in a faraday cage

1061
00:43:22,560 --> 00:43:25,760
you may still have an attacker trying to

1062
00:43:25,760 --> 00:43:27,839
spoof your device

1063
00:43:27,839 --> 00:43:30,960
unfortunately i don't know if there is

1064
00:43:30,960 --> 00:43:34,079
any patch for that but the basic idea is

1065
00:43:34,079 --> 00:43:35,920
that as a user

1066
00:43:35,920 --> 00:43:38,720
if you notice that there is a device

1067
00:43:38,720 --> 00:43:41,680
which you were already paired to

1068
00:43:41,680 --> 00:43:43,760
which is trying to actually repair to

1069
00:43:43,760 --> 00:43:46,319
you you can notice there's a problem i

1070
00:43:46,319 --> 00:43:49,119
agree that it's not sufficient that it's

1071
00:43:49,119 --> 00:43:51,280
not really satisfactory

1072
00:43:51,280 --> 00:43:52,640
but

1073
00:43:52,640 --> 00:43:57,599
you somehow got get the information

1074
00:43:57,599 --> 00:43:58,560
yeah

1075
00:43:58,560 --> 00:44:00,400
i just wondered if anyone had mitigated

1076
00:44:00,400 --> 00:44:02,640
that problem no i i don't have any

1077
00:44:02,640 --> 00:44:05,599
solution to that and every year we see

1078
00:44:05,599 --> 00:44:08,000
more publications saying that actually

1079
00:44:08,000 --> 00:44:11,920
we can also do that on bluetooth

1080
00:44:12,720 --> 00:44:15,680
if there are no more questions

1081
00:44:15,680 --> 00:44:18,540
thank you again great tool

1082
00:44:18,540 --> 00:44:21,610
[Applause]

