1
00:00:04,560 --> 00:00:06,560
yeah i i can hear you

2
00:00:06,560 --> 00:00:09,120
okay uh can you can you guys hear me at

3
00:00:09,120 --> 00:00:11,280
the back the audio as well

4
00:00:11,280 --> 00:00:14,160
yeah okay great so then plunder me you

5
00:00:14,160 --> 00:00:15,519
can start uh

6
00:00:15,519 --> 00:00:17,440
if there are any questions i will unmute

7
00:00:17,440 --> 00:00:19,119
and ask the audience to let you know and

8
00:00:19,119 --> 00:00:20,960
i can read the questions uh

9
00:00:20,960 --> 00:00:23,039
related them to you

10
00:00:23,039 --> 00:00:24,800
okay

11
00:00:24,800 --> 00:00:25,840
so

12
00:00:25,840 --> 00:00:28,000
uh hello guys my name is vladimir

13
00:00:28,000 --> 00:00:30,720
kononovich and today i would like to

14
00:00:30,720 --> 00:00:33,120
tell you about a very interesting story

15
00:00:33,120 --> 00:00:36,960
that has happened in the end of 2017

16
00:00:36,960 --> 00:00:40,160
with a well-known atm vendor

17
00:00:40,160 --> 00:00:46,480
uh yeah i know three years already

18
00:00:46,879 --> 00:00:47,760
gone

19
00:00:47,760 --> 00:00:52,079
and you can ask me one question why

20
00:00:52,079 --> 00:00:53,039
just

21
00:00:53,039 --> 00:00:54,879
after three years

22
00:00:54,879 --> 00:00:56,000
but

23
00:00:56,000 --> 00:00:56,879
it's

24
00:00:56,879 --> 00:01:00,320
an atm so everything depends on vendors

25
00:01:00,320 --> 00:01:04,319
and those of you who were here uh i mean

26
00:01:04,319 --> 00:01:06,240
in uh hug

27
00:01:06,240 --> 00:01:09,840
in at this conference in 2018 can

28
00:01:09,840 --> 00:01:12,400
remember another story with another

29
00:01:12,400 --> 00:01:15,439
vendor ncr

30
00:01:15,439 --> 00:01:18,320
but this time it will be much more

31
00:01:18,320 --> 00:01:22,639
interesting so let's start

32
00:01:23,840 --> 00:01:25,510
so

33
00:01:25,510 --> 00:01:28,769
[Music]

34
00:01:31,119 --> 00:01:32,159
yeah

35
00:01:32,159 --> 00:01:32,960
so

36
00:01:32,960 --> 00:01:34,320
who i am

37
00:01:34,320 --> 00:01:35,200
uh

38
00:01:35,200 --> 00:01:37,759
i work in positive technologies and my

39
00:01:37,759 --> 00:01:40,880
hobby and my job is reverse engineering

40
00:01:40,880 --> 00:01:43,200
at work i'm finding vulnerabilities in

41
00:01:43,200 --> 00:01:47,759
different plcs atms iot devices at home

42
00:01:47,759 --> 00:01:49,840
i'm doing reverse engineering old school

43
00:01:49,840 --> 00:01:52,320
tv games writing different

44
00:01:52,320 --> 00:01:54,960
compression decompression tools

45
00:01:54,960 --> 00:01:58,640
level editors and so on uh also

46
00:01:58,640 --> 00:02:01,600
i'm creating plugins for ida and jaydra

47
00:02:01,600 --> 00:02:04,240
to make different reverse engineering

48
00:02:04,240 --> 00:02:06,960
processes easier

49
00:02:06,960 --> 00:02:10,160
uh also i want to say that this project

50
00:02:10,160 --> 00:02:12,160
would not be possible without the second

51
00:02:12,160 --> 00:02:14,640
guy alexey stanikov

52
00:02:14,640 --> 00:02:17,280
uh and unfortunately he wasn't able to

53
00:02:17,280 --> 00:02:18,800
be here so

54
00:02:18,800 --> 00:02:22,160
let me introduce him to

55
00:02:22,160 --> 00:02:25,360
alexis denikov is a hardware expert all

56
00:02:25,360 --> 00:02:28,160
hardware related stuff in this project

57
00:02:28,160 --> 00:02:29,680
is his job

58
00:02:29,680 --> 00:02:34,000
also he is an awesome atm post security

59
00:02:34,000 --> 00:02:36,319
researcher

60
00:02:36,319 --> 00:02:39,680
and before start the story first i

61
00:02:39,680 --> 00:02:41,920
should tell you about atm hardware

62
00:02:41,920 --> 00:02:44,640
internals

63
00:02:44,959 --> 00:02:46,879
for the current speech it's enough to

64
00:02:46,879 --> 00:02:50,959
say that an atm consists of two parts

65
00:02:50,959 --> 00:02:53,519
upper less secure part

66
00:02:53,519 --> 00:02:55,920
which is usable usually attackable by

67
00:02:55,920 --> 00:02:59,440
malware writers and the second part

68
00:02:59,440 --> 00:03:01,599
it's a safe zone

69
00:03:01,599 --> 00:03:06,159
this zone is locked by physical key has

70
00:03:06,159 --> 00:03:09,120
usually has a strong protection against

71
00:03:09,120 --> 00:03:12,400
different physical forces and so on

72
00:03:12,400 --> 00:03:15,040
and the only connection between the

73
00:03:15,040 --> 00:03:17,840
upper and lower parts of

74
00:03:17,840 --> 00:03:20,000
usb cables

75
00:03:20,000 --> 00:03:21,120
so

76
00:03:21,120 --> 00:03:23,040
if you don't want to have any connection

77
00:03:23,040 --> 00:03:25,440
with the malware stuff

78
00:03:25,440 --> 00:03:29,599
you can make a hole but don't do this in

79
00:03:29,599 --> 00:03:31,840
this yellow

80
00:03:31,840 --> 00:03:33,519
plastic shell

81
00:03:33,519 --> 00:03:36,879
log out the required usb cable and plug

82
00:03:36,879 --> 00:03:39,680
in it into your laptop and run the

83
00:03:39,680 --> 00:03:41,360
script

84
00:03:41,360 --> 00:03:44,480
also this method can hide an attacker

85
00:03:44,480 --> 00:03:46,879
from what he actually did at the

86
00:03:46,879 --> 00:03:49,200
specific atm

87
00:03:49,200 --> 00:03:51,680
there will be no logs no executed

88
00:03:51,680 --> 00:03:56,239
comments leave somewhere just uh

89
00:03:56,239 --> 00:04:00,920
record about the usb dispenser

90
00:04:01,360 --> 00:04:04,000
there and this is what is usually called

91
00:04:04,000 --> 00:04:06,080
black box attack

92
00:04:06,080 --> 00:04:08,640
you can apply it to any atm of the

93
00:04:08,640 --> 00:04:11,840
specific model and you have to don't

94
00:04:11,840 --> 00:04:14,879
have to deal with the usb rolling and

95
00:04:14,879 --> 00:04:17,839
session keys

96
00:04:17,918 --> 00:04:20,160
so to be sure you have all the

97
00:04:20,160 --> 00:04:23,120
information about atm internals

98
00:04:23,120 --> 00:04:25,680
different atm attack types and what is

99
00:04:25,680 --> 00:04:26,960
black box

100
00:04:26,960 --> 00:04:30,639
i'd also recommend you open this video

101
00:04:30,639 --> 00:04:33,919
there me and elixir already covered most

102
00:04:33,919 --> 00:04:38,320
of these topics uh and this video also

103
00:04:38,320 --> 00:04:41,040
includes uh an awesome speech

104
00:04:41,040 --> 00:04:42,639
about one

105
00:04:42,639 --> 00:04:45,680
ncr dispenser vulnerability

106
00:04:45,680 --> 00:04:46,720
and

107
00:04:46,720 --> 00:04:50,240
you can also find this link at the

108
00:04:50,240 --> 00:04:51,520
organizers

109
00:04:51,520 --> 00:04:54,160
of this conference website

110
00:04:54,160 --> 00:04:57,280
so before we'll begin let me show you

111
00:04:57,280 --> 00:04:58,880
two funny pictures

112
00:04:58,880 --> 00:04:59,759
with

113
00:04:59,759 --> 00:05:03,440
some extra top secret stuff

114
00:05:03,440 --> 00:05:05,120
uh here is it

115
00:05:05,120 --> 00:05:07,039
and uh

116
00:05:07,039 --> 00:05:09,360
yeah actually we have a problem

117
00:05:09,360 --> 00:05:10,960
and the

118
00:05:10,960 --> 00:05:12,080
problem

119
00:05:12,080 --> 00:05:15,600
not only one but we have five of them

120
00:05:15,600 --> 00:05:17,840
and

121
00:05:18,080 --> 00:05:20,160
this is actually what i'm going to tell

122
00:05:20,160 --> 00:05:22,160
you about in my speech

123
00:05:22,160 --> 00:05:23,039
so

124
00:05:23,039 --> 00:05:26,000
first item in this list is an ability to

125
00:05:26,000 --> 00:05:28,479
perform a firmware downgrade it is

126
00:05:28,479 --> 00:05:30,479
actually related

127
00:05:30,479 --> 00:05:32,400
to the second item

128
00:05:32,400 --> 00:05:34,880
uploading of any from where you want to

129
00:05:34,880 --> 00:05:36,840
be at the current

130
00:05:36,840 --> 00:05:41,520
atm the next item is a smart card denial

131
00:05:41,520 --> 00:05:42,880
of service

132
00:05:42,880 --> 00:05:43,840
which

133
00:05:43,840 --> 00:05:48,240
can be called the smart card feature

134
00:05:48,240 --> 00:05:50,000
i will tell you about

135
00:05:50,000 --> 00:05:52,400
it a little bit later

136
00:05:52,400 --> 00:05:53,680
so

137
00:05:53,680 --> 00:05:56,240
also because all the usb traffic is

138
00:05:56,240 --> 00:05:58,960
actually encrypted one of the profits of

139
00:05:58,960 --> 00:06:01,919
two first items in this list

140
00:06:01,919 --> 00:06:05,680
is actually bypassing that encryption

141
00:06:05,680 --> 00:06:06,560
and

142
00:06:06,560 --> 00:06:10,639
as a result of all of the previous steps

143
00:06:10,639 --> 00:06:12,160
we can make

144
00:06:12,160 --> 00:06:15,039
money withdrawal

145
00:06:15,759 --> 00:06:17,440
so

146
00:06:17,440 --> 00:06:20,639
it was a project in one bank where we

147
00:06:20,639 --> 00:06:22,400
got two files

148
00:06:22,400 --> 00:06:25,600
one had the btr extension which is

149
00:06:25,600 --> 00:06:29,120
bootloader and the next one was

150
00:06:29,120 --> 00:06:31,680
head fram extension

151
00:06:31,680 --> 00:06:34,880
which is firmware and after opening them

152
00:06:34,880 --> 00:06:38,160
in any hex editor you will see something

153
00:06:38,160 --> 00:06:39,840
like that

154
00:06:39,840 --> 00:06:42,080
like this slide

155
00:06:42,080 --> 00:06:44,639
as you can see at the left image

156
00:06:44,639 --> 00:06:48,720
it has some size marked yellow and after

157
00:06:48,720 --> 00:06:49,680
it

158
00:06:49,680 --> 00:06:53,199
goes some stream that can be a name of

159
00:06:53,199 --> 00:06:54,319
this

160
00:06:54,319 --> 00:06:56,400
firmware file

161
00:06:56,400 --> 00:06:59,039
and after it

162
00:06:59,039 --> 00:07:01,520
you have some random white stuff which

163
00:07:01,520 --> 00:07:04,400
is which are known for now

164
00:07:04,400 --> 00:07:07,599
and then the end of their firmware

165
00:07:07,599 --> 00:07:10,240
right side of the slide

166
00:07:10,240 --> 00:07:12,720
you can you have a structure that can be

167
00:07:12,720 --> 00:07:15,599
actually parsed manually just by looking

168
00:07:15,599 --> 00:07:17,039
at it

169
00:07:17,039 --> 00:07:20,720
it includes device id pid

170
00:07:20,720 --> 00:07:24,800
vendor id some unknown bytes

171
00:07:24,800 --> 00:07:26,160
and

172
00:07:26,160 --> 00:07:30,400
it also includes ufd tag which is

173
00:07:30,400 --> 00:07:34,160
actually dpu maybe you know a device

174
00:07:34,160 --> 00:07:36,080
from where upgrade

175
00:07:36,080 --> 00:07:39,039
it's on a it's a protocol

176
00:07:39,039 --> 00:07:40,800
well well known

177
00:07:40,800 --> 00:07:43,759
so at this moment it was everything we

178
00:07:43,759 --> 00:07:47,599
had and trying to unpack decrypt and do

179
00:07:47,599 --> 00:07:50,800
other things with that random bites had

180
00:07:50,800 --> 00:07:53,360
have no success so

181
00:07:53,360 --> 00:07:56,800
this project could not be unfinished

182
00:07:56,800 --> 00:07:59,360
and uh actually it could not

183
00:07:59,360 --> 00:08:02,240
because we asked debate to help us

184
00:08:02,240 --> 00:08:05,039
uh alexa dot that dispensers control the

185
00:08:05,039 --> 00:08:06,400
main board

186
00:08:06,400 --> 00:08:07,360
so

187
00:08:07,360 --> 00:08:09,840
it was our hope to continue

188
00:08:09,840 --> 00:08:13,759
also i had this pcb right here let me

189
00:08:13,759 --> 00:08:14,430
show you

190
00:08:14,430 --> 00:08:18,819
[Music]

191
00:08:19,039 --> 00:08:20,080
yeah

192
00:08:20,080 --> 00:08:22,560
like that

193
00:08:24,840 --> 00:08:29,280
and let me show you one funny video

194
00:08:29,280 --> 00:08:32,559
using this pcb

195
00:08:32,590 --> 00:08:35,909
[Music]

196
00:08:41,200 --> 00:08:44,240
uh it's an astronomia

197
00:08:44,240 --> 00:08:47,200
and this video actually demonstrates an

198
00:08:47,200 --> 00:08:49,440
exploitation of the firmware encryption

199
00:08:49,440 --> 00:08:51,839
by passing vulnerability

200
00:08:51,839 --> 00:08:55,279
which is the topic of my speech

201
00:08:55,279 --> 00:08:57,760
and here i send the speaker playing

202
00:08:57,760 --> 00:09:03,800
commands via encrypted usb protocol

203
00:09:07,020 --> 00:09:16,549
[Music]

204
00:09:19,279 --> 00:09:21,279
i hope copyrights

205
00:09:21,279 --> 00:09:22,230
are okay here

206
00:09:22,230 --> 00:09:24,240
[Music]

207
00:09:24,240 --> 00:09:26,920
i mean about this song

208
00:09:26,920 --> 00:09:30,120
[Music]

209
00:09:40,880 --> 00:09:42,800
yeah like that

210
00:09:42,800 --> 00:09:43,920
so

211
00:09:43,920 --> 00:09:47,360
after we had the pcb alexa started

212
00:09:47,360 --> 00:09:50,480
to look for any debugging things that it

213
00:09:50,480 --> 00:09:52,640
and here is

214
00:09:52,640 --> 00:09:55,920
the result which typing out

215
00:09:55,920 --> 00:09:58,880
and as you can see it is just placed

216
00:09:58,880 --> 00:10:02,240
near the main cpu

217
00:10:02,640 --> 00:10:05,279
so another interesting stuff at this

218
00:10:05,279 --> 00:10:08,160
point is a smart card

219
00:10:08,160 --> 00:10:11,600
and it's responsible for many things

220
00:10:11,600 --> 00:10:12,880
here like

221
00:10:12,880 --> 00:10:15,600
usb traffic keys generation session

222
00:10:15,600 --> 00:10:19,519
numbers checking and other counters

223
00:10:19,519 --> 00:10:23,120
it also stores a few certificates and

224
00:10:23,120 --> 00:10:25,680
all of these will be covered a little

225
00:10:25,680 --> 00:10:27,600
bit later

226
00:10:27,600 --> 00:10:28,959
and

227
00:10:28,959 --> 00:10:30,800
as you can see at this slide using a

228
00:10:30,800 --> 00:10:33,440
smart car someone can make the whole

229
00:10:33,440 --> 00:10:38,079
system unusable by its one feature

230
00:10:38,079 --> 00:10:39,040
but

231
00:10:39,040 --> 00:10:41,040
it's easy to restore

232
00:10:41,040 --> 00:10:45,040
the system by just or initializing that

233
00:10:45,040 --> 00:10:47,360
java applet

234
00:10:47,360 --> 00:10:49,680
sure it requires

235
00:10:49,680 --> 00:10:51,440
manufacturing keys

236
00:10:51,440 --> 00:10:52,800
which are

237
00:10:52,800 --> 00:10:56,480
only known to the vendor

238
00:10:56,480 --> 00:10:58,800
so

239
00:10:58,800 --> 00:11:01,360
there was a possibility also that

240
00:11:01,360 --> 00:11:04,240
something could be broken in this pcb

241
00:11:04,240 --> 00:11:07,600
so only a power in it on and connecting

242
00:11:07,600 --> 00:11:09,760
via usb can tell us

243
00:11:09,760 --> 00:11:11,200
the truth

244
00:11:11,200 --> 00:11:11,930
so

245
00:11:11,930 --> 00:11:13,519
[Music]

246
00:11:13,519 --> 00:11:15,519
the first powering was actually

247
00:11:15,519 --> 00:11:17,279
successful

248
00:11:17,279 --> 00:11:18,959
and

249
00:11:18,959 --> 00:11:22,560
then we decided to check the board with

250
00:11:22,560 --> 00:11:25,440
the vendor software

251
00:11:25,440 --> 00:11:29,120
and it's written in java so it was

252
00:11:29,120 --> 00:11:32,560
very easy to decompile it find the

253
00:11:32,560 --> 00:11:33,600
different

254
00:11:33,600 --> 00:11:36,240
self-testing stuff and just check it

255
00:11:36,240 --> 00:11:38,399
against our pcb

256
00:11:38,399 --> 00:11:39,920
and

257
00:11:39,920 --> 00:11:43,440
here we also had the success

258
00:11:43,440 --> 00:11:46,480
so it means this part is actually works

259
00:11:46,480 --> 00:11:48,720
perfect

260
00:11:48,720 --> 00:11:49,839
but

261
00:11:49,839 --> 00:11:51,360
one

262
00:11:51,360 --> 00:11:53,360
question can appear

263
00:11:53,360 --> 00:11:58,160
how this board uh appeared at ebay

264
00:11:58,160 --> 00:11:59,279
and the

265
00:11:59,279 --> 00:12:02,480
answer is actually

266
00:12:02,480 --> 00:12:04,160
simple if

267
00:12:04,160 --> 00:12:07,279
something doesn't work in any part of

268
00:12:07,279 --> 00:12:10,399
the whole atm dispenser

269
00:12:10,399 --> 00:12:13,519
uh usually nobody checks for the actual

270
00:12:13,519 --> 00:12:15,279
problem and they

271
00:12:15,279 --> 00:12:18,240
they will just buy a new dispenser

272
00:12:18,240 --> 00:12:21,279
and the old ones all parts of the

273
00:12:21,279 --> 00:12:25,120
dispenser sometimes appear at different

274
00:12:25,120 --> 00:12:28,000
marketplaces

275
00:12:28,800 --> 00:12:30,079
so

276
00:12:30,079 --> 00:12:33,200
what are the internals of the dispenser

277
00:12:33,200 --> 00:12:34,399
controller

278
00:12:34,399 --> 00:12:36,000
in our case

279
00:12:36,000 --> 00:12:39,360
it has three stm cpus

280
00:12:39,360 --> 00:12:42,639
and it was easy to find the

281
00:12:42,639 --> 00:12:45,519
data sheets and dump all the required

282
00:12:45,519 --> 00:12:47,200
regions

283
00:12:47,200 --> 00:12:50,000
two other cpus were dumped

284
00:12:50,000 --> 00:12:50,839
too

285
00:12:50,839 --> 00:12:54,560
but all the interesting stuff was only

286
00:12:54,560 --> 00:12:57,760
is the in the main scheme

287
00:12:57,760 --> 00:12:59,279
and

288
00:12:59,279 --> 00:13:02,800
the first thing that we were looking for

289
00:13:02,800 --> 00:13:05,839
was a firmware decryption code because

290
00:13:05,839 --> 00:13:09,519
as i told you before our files were

291
00:13:09,519 --> 00:13:11,120
encrypted

292
00:13:11,120 --> 00:13:11,920
so

293
00:13:11,920 --> 00:13:15,440
i loaded the dump into either and after

294
00:13:15,440 --> 00:13:18,240
some time i found this

295
00:13:18,240 --> 00:13:20,639
this code

296
00:13:20,639 --> 00:13:23,440
not actually code but this information

297
00:13:23,440 --> 00:13:24,959
uh

298
00:13:24,959 --> 00:13:27,519
this is an actual firmware decryption

299
00:13:27,519 --> 00:13:29,120
algorithm

300
00:13:29,120 --> 00:13:33,279
as you can see it is based on the xta

301
00:13:33,279 --> 00:13:35,200
modification

302
00:13:35,200 --> 00:13:38,160
and the only modification is a different

303
00:13:38,160 --> 00:13:40,399
delta constant

304
00:13:40,399 --> 00:13:42,720
which is

305
00:13:42,720 --> 00:13:46,240
seems to be random and cannot be googled

306
00:13:46,240 --> 00:13:50,639
so we cannot be sure it is safely

307
00:13:50,639 --> 00:13:53,040
generated or not

308
00:13:53,040 --> 00:13:54,720
so uh

309
00:13:54,720 --> 00:13:58,399
to make the xda initial state that from

310
00:13:58,399 --> 00:13:59,920
where its

311
00:13:59,920 --> 00:14:04,000
first five words just after the firmware

312
00:14:04,000 --> 00:14:05,920
name stream

313
00:14:05,920 --> 00:14:07,839
and applies

314
00:14:07,839 --> 00:14:10,399
the following magic

315
00:14:10,399 --> 00:14:14,480
in these three items

316
00:14:14,480 --> 00:14:18,959
using two external arrays key 0 which is

317
00:14:18,959 --> 00:14:20,320
marked blue

318
00:14:20,320 --> 00:14:22,800
and q1 which is

319
00:14:22,800 --> 00:14:24,959
green here

320
00:14:24,959 --> 00:14:27,040
these names are

321
00:14:27,040 --> 00:14:30,720
my names so maybe vendor has different

322
00:14:30,720 --> 00:14:32,160
things

323
00:14:32,160 --> 00:14:35,120
so it was initializing step and the next

324
00:14:35,120 --> 00:14:39,120
step is actual decryption

325
00:14:40,240 --> 00:14:43,120
here the firmware just uses previously

326
00:14:43,120 --> 00:14:46,480
initialized key and data things

327
00:14:46,480 --> 00:14:48,000
in

328
00:14:48,000 --> 00:14:48,870
let me show you

329
00:14:48,870 --> 00:14:51,120
[Music]

330
00:14:51,120 --> 00:14:53,680
third item

331
00:14:53,680 --> 00:14:54,880
and second

332
00:14:54,880 --> 00:14:56,000
yeah

333
00:14:56,000 --> 00:14:57,839
and

334
00:14:57,839 --> 00:15:02,240
this is just a typical mass for the xda

335
00:15:02,240 --> 00:15:03,680
algorithm

336
00:15:03,680 --> 00:15:09,199
and uh also the firmware checks for the

337
00:15:09,199 --> 00:15:10,240
full

338
00:15:10,240 --> 00:15:12,880
ff'd words in the end

339
00:15:12,880 --> 00:15:14,880
uh as the mark of the

340
00:15:14,880 --> 00:15:19,279
decryption process end so that's it but

341
00:15:19,279 --> 00:15:21,680
it is not the end of the decryption

342
00:15:21,680 --> 00:15:24,880
process itself

343
00:15:25,040 --> 00:15:28,639
the last part is a deliberate packing

344
00:15:28,639 --> 00:15:30,399
the firmware has

345
00:15:30,399 --> 00:15:33,839
many sequentially philippe blocks

346
00:15:33,839 --> 00:15:34,720
and

347
00:15:34,720 --> 00:15:38,639
the last one is marked as a full one

348
00:15:38,639 --> 00:15:41,839
full effect word

349
00:15:42,000 --> 00:15:44,959
to tell the firmware where to stop to

350
00:15:44,959 --> 00:15:46,399
unpack

351
00:15:46,399 --> 00:15:49,040
and now uh we have

352
00:15:49,040 --> 00:15:52,560
all there from where code

353
00:15:52,639 --> 00:15:55,759
you have to just join unpacked epilep

354
00:15:55,759 --> 00:15:58,079
blocks and have the

355
00:15:58,079 --> 00:16:00,079
full firmware

356
00:16:00,079 --> 00:16:04,240
that you can actually load it right and

357
00:16:04,240 --> 00:16:05,920
analyze

358
00:16:05,920 --> 00:16:07,199
so

359
00:16:07,199 --> 00:16:10,160
the only question here is where

360
00:16:10,160 --> 00:16:14,399
i got this key 0 and q1 constants to

361
00:16:14,399 --> 00:16:17,040
decrypt something

362
00:16:17,040 --> 00:16:19,920
let's take a look

363
00:16:20,639 --> 00:16:23,199
during the program analysis we found

364
00:16:23,199 --> 00:16:24,800
that it reads

365
00:16:24,800 --> 00:16:29,279
those keys from the 64 hex region

366
00:16:29,279 --> 00:16:31,440
and at the right side you can see its

367
00:16:31,440 --> 00:16:32,639
content

368
00:16:32,639 --> 00:16:33,600
and

369
00:16:33,600 --> 00:16:38,000
two parts marked with different color

370
00:16:38,000 --> 00:16:41,360
actual p0 and q1

371
00:16:41,360 --> 00:16:46,079
and the left part of the slide you can

372
00:16:46,079 --> 00:16:48,560
see the chord that gets into account

373
00:16:48,560 --> 00:16:51,519
these keys and uses them

374
00:16:51,519 --> 00:16:55,199
there is also a strange dead

375
00:16:55,199 --> 00:16:57,600
signature that tag

376
00:16:57,600 --> 00:17:02,639
but it will be covered a little bit late

377
00:17:02,839 --> 00:17:06,959
so we almost have everything to make our

378
00:17:06,959 --> 00:17:09,039
own firmware files for now

379
00:17:09,039 --> 00:17:10,799
and the next part i want to tell you

380
00:17:10,799 --> 00:17:13,520
about is forward signing

381
00:17:13,520 --> 00:17:16,160
because we try to modify something like

382
00:17:16,160 --> 00:17:20,160
strings and upload neutral where but got

383
00:17:20,160 --> 00:17:21,439
an error

384
00:17:21,439 --> 00:17:23,679
so

385
00:17:23,839 --> 00:17:26,559
signing here is self signing which is

386
00:17:26,559 --> 00:17:28,480
really bad practice

387
00:17:28,480 --> 00:17:30,000
and

388
00:17:30,000 --> 00:17:32,880
i would not recommend it to use because

389
00:17:32,880 --> 00:17:34,880
the only usage of it is checking for

390
00:17:34,880 --> 00:17:37,440
consistency but not for protecting

391
00:17:37,440 --> 00:17:38,960
something

392
00:17:38,960 --> 00:17:42,080
the firmware has a signature part which

393
00:17:42,080 --> 00:17:43,919
is marked green

394
00:17:43,919 --> 00:17:46,720
and an rsa models part which is marked

395
00:17:46,720 --> 00:17:47,679
blue

396
00:17:47,679 --> 00:17:49,600
and

397
00:17:49,600 --> 00:17:52,080
they are actually integers and their

398
00:17:52,080 --> 00:17:56,080
lens is specified as the 30 bits

399
00:17:56,080 --> 00:17:57,840
tokens count

400
00:17:57,840 --> 00:17:58,720
so

401
00:17:58,720 --> 00:18:02,160
as a result you can use rsa keys of any

402
00:18:02,160 --> 00:18:03,280
lens

403
00:18:03,280 --> 00:18:05,679
that can be placed in these

404
00:18:05,679 --> 00:18:06,880
offsets

405
00:18:06,880 --> 00:18:08,000
listed

406
00:18:08,000 --> 00:18:10,080
the left side

407
00:18:10,080 --> 00:18:12,880
this picture we used our small customer

408
00:18:12,880 --> 00:18:18,559
say 512 bits kill lens

409
00:18:18,799 --> 00:18:20,400
so

410
00:18:20,400 --> 00:18:22,160
for now we have

411
00:18:22,160 --> 00:18:25,360
everything resigned re-encrypted

412
00:18:25,360 --> 00:18:27,919
repacked from where in the last step is

413
00:18:27,919 --> 00:18:31,840
to upload it into the device

414
00:18:31,840 --> 00:18:33,520
so

415
00:18:33,520 --> 00:18:36,799
if you remember i told you about ufd or

416
00:18:36,799 --> 00:18:38,320
defu tag

417
00:18:38,320 --> 00:18:39,120
and

418
00:18:39,120 --> 00:18:44,080
here is that device and how it looks in

419
00:18:44,080 --> 00:18:46,240
the device manager

420
00:18:46,240 --> 00:18:49,200
it's speed uh product id is actually a

421
00:18:49,200 --> 00:18:52,960
normal pid with uh the most significant

422
00:18:52,960 --> 00:18:54,240
bit set

423
00:18:54,240 --> 00:18:56,400
so here is

424
00:18:56,400 --> 00:18:58,720
uh 4101

425
00:18:58,720 --> 00:19:00,000
and the

426
00:19:00,000 --> 00:19:02,520
defu device has

427
00:19:02,520 --> 00:19:04,240
c101

428
00:19:04,240 --> 00:19:06,240
uh product 80.

429
00:19:06,240 --> 00:19:09,360
so the vendor software sends the diffuse

430
00:19:09,360 --> 00:19:12,960
detach command and then executes the usb

431
00:19:12,960 --> 00:19:14,960
cycle part command

432
00:19:14,960 --> 00:19:18,160
it disables these two devices

433
00:19:18,160 --> 00:19:19,600
which are

434
00:19:19,600 --> 00:19:21,840
below here

435
00:19:21,840 --> 00:19:24,880
and instead of them one diffuse device

436
00:19:24,880 --> 00:19:27,440
appears

437
00:19:27,600 --> 00:19:28,720
so

438
00:19:28,720 --> 00:19:30,799
after we successfully uploaded our

439
00:19:30,799 --> 00:19:33,039
firmware and before the withdrawal

440
00:19:33,039 --> 00:19:34,480
process

441
00:19:34,480 --> 00:19:36,799
i would like to tell you about that

442
00:19:36,799 --> 00:19:38,320
dead

443
00:19:38,320 --> 00:19:40,720
checking stuff

444
00:19:40,720 --> 00:19:43,679
just after a file name in the header and

445
00:19:43,679 --> 00:19:44,960
after those

446
00:19:44,960 --> 00:19:48,320
five words headed works the firmware

447
00:19:48,320 --> 00:19:51,120
looks for a special dead deck which may

448
00:19:51,120 --> 00:19:54,480
contain an offset to the key 0 and

449
00:19:54,480 --> 00:19:57,120
corresponding q1

450
00:19:57,120 --> 00:20:00,959
let me show you that screenshot again

451
00:20:01,360 --> 00:20:03,120
as you can see

452
00:20:03,120 --> 00:20:06,960
the dump contains a lot of zeroed areas

453
00:20:06,960 --> 00:20:09,039
they are red

454
00:20:09,039 --> 00:20:09,919
and

455
00:20:09,919 --> 00:20:11,520
we can point

456
00:20:11,520 --> 00:20:16,799
at them by this dead feature

457
00:20:16,799 --> 00:20:21,120
so we think that this stuff was added

458
00:20:21,120 --> 00:20:24,080
to check for old or other keys

459
00:20:24,080 --> 00:20:26,960
and we can use the subset to encrypt our

460
00:20:26,960 --> 00:20:29,679
firmware without the knowledge of actual

461
00:20:29,679 --> 00:20:32,640
p0 and q1

462
00:20:32,640 --> 00:20:34,880
so we also created a

463
00:20:34,880 --> 00:20:36,799
brute force

464
00:20:36,799 --> 00:20:38,320
esc script

465
00:20:38,320 --> 00:20:42,000
that allowed us to find an exact zero

466
00:20:42,000 --> 00:20:45,120
area offset

467
00:20:46,159 --> 00:20:48,559
so now let's summarize what we already

468
00:20:48,559 --> 00:20:51,760
know from all the previous slides

469
00:20:51,760 --> 00:20:53,679
uh this list

470
00:20:53,679 --> 00:20:55,919
actually means that we have everything

471
00:20:55,919 --> 00:20:59,280
to change and apply it in original but

472
00:20:59,280 --> 00:21:01,440
fixed firmware

473
00:21:01,440 --> 00:21:03,840
and in the next part of the speech i

474
00:21:03,840 --> 00:21:05,919
would like to talk

475
00:21:05,919 --> 00:21:09,120
about the smart cards and its role in

476
00:21:09,120 --> 00:21:10,320
bing

477
00:21:10,320 --> 00:21:14,240
debugging of dispensers like ram 3 and

478
00:21:14,240 --> 00:21:16,880
cmd v5

479
00:21:16,880 --> 00:21:19,440
and everything i will talk about will

480
00:21:19,440 --> 00:21:22,880
just mean only one thing

481
00:21:22,880 --> 00:21:26,159
their anti-black box protection is

482
00:21:26,159 --> 00:21:27,679
really awesome

483
00:21:27,679 --> 00:21:29,280
i really like it

484
00:21:29,280 --> 00:21:33,360
so nobody can just sniff and repeat atm

485
00:21:33,360 --> 00:21:38,720
operations traffic to take any money

486
00:21:38,720 --> 00:21:41,679
so the only usage of the smart card in

487
00:21:41,679 --> 00:21:44,960
these dispensers models

488
00:21:44,960 --> 00:21:48,799
is usb communications so we use

489
00:21:48,799 --> 00:21:50,720
atm pc which

490
00:21:50,720 --> 00:21:52,799
in the upper part

491
00:21:52,799 --> 00:21:56,720
so and its contain consists of three

492
00:21:56,720 --> 00:21:58,400
following items

493
00:21:58,400 --> 00:22:01,280
first one is base key initialization

494
00:22:01,280 --> 00:22:04,559
it is required when all session keys or

495
00:22:04,559 --> 00:22:07,520
a base key was leaked or lost

496
00:22:07,520 --> 00:22:09,039
somehow

497
00:22:09,039 --> 00:22:12,480
next item is new session keys generation

498
00:22:12,480 --> 00:22:15,039
this step i can call

499
00:22:15,039 --> 00:22:18,960
rolling keys at their maximum

500
00:22:18,960 --> 00:22:20,400
and

501
00:22:20,400 --> 00:22:23,120
the next item is session counters

502
00:22:23,120 --> 00:22:26,080
synchronizing

503
00:22:26,080 --> 00:22:28,640
i will talk about it

504
00:22:28,640 --> 00:22:30,080
in the

505
00:22:30,080 --> 00:22:32,000
next slides

506
00:22:32,000 --> 00:22:35,440
so let's talk about the first item

507
00:22:35,440 --> 00:22:38,240
basically to drive a base key you need

508
00:22:38,240 --> 00:22:40,400
all of these certificates

509
00:22:40,400 --> 00:22:42,080
to be uploaded

510
00:22:42,080 --> 00:22:45,678
into a smart card

511
00:22:45,840 --> 00:22:48,159
the exact process is much harder

512
00:22:48,159 --> 00:22:49,200
includes

513
00:22:49,200 --> 00:22:50,960
tpm usage

514
00:22:50,960 --> 00:22:53,520
storage stuff and other pc related

515
00:22:53,520 --> 00:22:54,640
things

516
00:22:54,640 --> 00:22:57,760
so we as a possible attacker don't have

517
00:22:57,760 --> 00:22:59,280
them and

518
00:22:59,280 --> 00:23:00,940
actually don't need

519
00:23:00,940 --> 00:23:02,480
[Music]

520
00:23:02,480 --> 00:23:05,039
but i must say that i really love

521
00:23:05,039 --> 00:23:09,080
what and how they implemented

522
00:23:09,679 --> 00:23:10,559
so

523
00:23:10,559 --> 00:23:12,000
the next step

524
00:23:12,000 --> 00:23:14,720
is a new session keys generation

525
00:23:14,720 --> 00:23:17,120
it requires previously generated base

526
00:23:17,120 --> 00:23:20,720
key and can be performed for every four

527
00:23:20,720 --> 00:23:22,320
directions

528
00:23:22,320 --> 00:23:25,600
which are listed below

529
00:23:25,600 --> 00:23:27,919
as you can see at this slide the

530
00:23:27,919 --> 00:23:30,240
firmware and the pc can get a new

531
00:23:30,240 --> 00:23:34,880
session key using their own ways

532
00:23:34,880 --> 00:23:37,280
this happens because the smart car

533
00:23:37,280 --> 00:23:40,480
doesn't know anything about the base key

534
00:23:40,480 --> 00:23:42,159
and because

535
00:23:42,159 --> 00:23:43,440
tpm

536
00:23:43,440 --> 00:23:45,120
chip is only

537
00:23:45,120 --> 00:23:48,640
at the pc motherboard

538
00:23:48,640 --> 00:23:51,679
so cannot be accessed

539
00:23:51,679 --> 00:23:54,640
by firmware

540
00:23:55,039 --> 00:23:58,240
the next step is session counters

541
00:23:58,240 --> 00:24:00,480
synchronizing

542
00:24:00,480 --> 00:24:01,360
and

543
00:24:01,360 --> 00:24:04,159
it may be required if the pc and the

544
00:24:04,159 --> 00:24:08,480
smart card counters are different

545
00:24:08,480 --> 00:24:11,360
so the whole scheme is presented at this

546
00:24:11,360 --> 00:24:13,760
slide

547
00:24:17,919 --> 00:24:20,640
like that

548
00:24:20,799 --> 00:24:22,720
so

549
00:24:22,720 --> 00:24:25,520
regarding the denial of service

550
00:24:25,520 --> 00:24:28,000
there is an ability to ask a smart car

551
00:24:28,000 --> 00:24:30,480
to generate a new session key for a

552
00:24:30,480 --> 00:24:32,960
specific session counter

553
00:24:32,960 --> 00:24:36,000
that must not must not be less or equal

554
00:24:36,000 --> 00:24:38,559
than previous one

555
00:24:38,559 --> 00:24:39,360
so

556
00:24:39,360 --> 00:24:42,799
then we decided to check what can happen

557
00:24:42,799 --> 00:24:45,440
if we ask the smart card to generate a

558
00:24:45,440 --> 00:24:48,400
new key for a session that is equal to

559
00:24:48,400 --> 00:24:51,039
the maximum integer

560
00:24:51,039 --> 00:24:52,080
and

561
00:24:52,080 --> 00:24:54,159
the answer is

562
00:24:54,159 --> 00:24:56,320
actually nothing good

563
00:24:56,320 --> 00:24:57,440
because

564
00:24:57,440 --> 00:25:00,159
that key was actually generated but

565
00:25:00,159 --> 00:25:02,880
after we asked the smart card to give us

566
00:25:02,880 --> 00:25:04,559
a new key

567
00:25:04,559 --> 00:25:06,960
it's returned the status about

568
00:25:06,960 --> 00:25:09,039
duplicate session number

569
00:25:09,039 --> 00:25:10,159
which means

570
00:25:10,159 --> 00:25:12,840
the same session usage

571
00:25:12,840 --> 00:25:16,159
so and the problem is that we can't

572
00:25:16,159 --> 00:25:19,600
increment this maximum integer

573
00:25:19,600 --> 00:25:20,720
that's it

574
00:25:20,720 --> 00:25:23,120
but as i told you before

575
00:25:23,120 --> 00:25:24,240
this

576
00:25:24,240 --> 00:25:27,039
can be easily fixed so

577
00:25:27,039 --> 00:25:30,080
is not a vulnerability but

578
00:25:30,080 --> 00:25:32,240
feature

579
00:25:32,240 --> 00:25:34,640
so before the final step

580
00:25:34,640 --> 00:25:37,840
let's summarize what we know about the

581
00:25:37,840 --> 00:25:40,559
usb communications between the dispenser

582
00:25:40,559 --> 00:25:42,960
and the pc

583
00:25:42,960 --> 00:25:44,159
and

584
00:25:44,159 --> 00:25:47,440
as a conclusion i can say that this

585
00:25:47,440 --> 00:25:50,000
implementation is the strongest one i've

586
00:25:50,000 --> 00:25:52,960
ever seen yeah that's

587
00:25:52,960 --> 00:25:54,570
true

588
00:25:54,570 --> 00:25:56,240
[Music]

589
00:25:56,240 --> 00:26:00,000
and this one feature which is number

590
00:26:00,000 --> 00:26:03,679
five cannot change it

591
00:26:03,679 --> 00:26:04,799
so

592
00:26:04,799 --> 00:26:07,840
uh to perform a final step a money

593
00:26:07,840 --> 00:26:10,240
withdrawal we had to do some

594
00:26:10,240 --> 00:26:12,400
preparations

595
00:26:12,400 --> 00:26:14,720
as we can change and upload our custom

596
00:26:14,720 --> 00:26:18,960
firmware we can punch it to not ask the

597
00:26:18,960 --> 00:26:21,679
smart card for a new session key

598
00:26:21,679 --> 00:26:24,480
but just use some dummy array

599
00:26:24,480 --> 00:26:27,200
like filled with zeros

600
00:26:27,200 --> 00:26:30,480
and then upload this from where

601
00:26:30,480 --> 00:26:32,159
to the device

602
00:26:32,159 --> 00:26:34,640
the next step was to find the same place

603
00:26:34,640 --> 00:26:35,760
in the

604
00:26:35,760 --> 00:26:40,559
java code and use the same demi array

605
00:26:40,559 --> 00:26:43,200
there too

606
00:26:44,080 --> 00:26:48,159
also we had to fix two functions which

607
00:26:48,159 --> 00:26:50,840
named kashin and cash out

608
00:26:50,840 --> 00:26:52,400
uh

609
00:26:52,400 --> 00:26:54,320
because they check

610
00:26:54,320 --> 00:26:57,200
checked for some configurations which

611
00:26:57,200 --> 00:27:00,799
are not required actually

612
00:27:01,120 --> 00:27:04,960
then we synchronize section counters

613
00:27:04,960 --> 00:27:09,600
between our laptop and the smartcard

614
00:27:09,600 --> 00:27:11,279
this was made

615
00:27:11,279 --> 00:27:13,520
because

616
00:27:13,520 --> 00:27:15,840
we didn't want to

617
00:27:15,840 --> 00:27:19,279
comment or change a lot of

618
00:27:19,279 --> 00:27:21,679
java code

619
00:27:21,679 --> 00:27:23,679
just to check

620
00:27:23,679 --> 00:27:25,760
withdrawal possibility

621
00:27:25,760 --> 00:27:28,399
so the next step is to upload new

622
00:27:28,399 --> 00:27:30,640
cassettes configurations

623
00:27:30,640 --> 00:27:33,279
to the dispenser to tell it

624
00:27:33,279 --> 00:27:36,399
where we that we have some amount

625
00:27:36,399 --> 00:27:37,279
of

626
00:27:37,279 --> 00:27:41,360
banknotes in specific sets

627
00:27:41,360 --> 00:27:43,760
and then we call the function prepare

628
00:27:43,760 --> 00:27:44,880
cash out

629
00:27:44,880 --> 00:27:47,919
and then called cash out with specific

630
00:27:47,919 --> 00:27:50,159
values like a cassette number and

631
00:27:50,159 --> 00:27:53,440
banknotes amount

632
00:27:53,520 --> 00:27:56,399
then we got

633
00:27:56,480 --> 00:27:59,520
dispenser that started to pass

634
00:27:59,520 --> 00:28:00,320
so

635
00:28:00,320 --> 00:28:04,320
after some time uh we called uh

636
00:28:04,320 --> 00:28:07,520
open method for a short object

637
00:28:07,520 --> 00:28:10,320
shutter object can be accessed

638
00:28:10,320 --> 00:28:13,360
via usb command tool

639
00:28:13,360 --> 00:28:14,720
and

640
00:28:14,720 --> 00:28:15,600
at

641
00:28:15,600 --> 00:28:19,679
our first try we forgot to open the

642
00:28:19,679 --> 00:28:21,120
shutter

643
00:28:21,120 --> 00:28:24,159
so after cash out we got uh

644
00:28:24,159 --> 00:28:25,919
the banknotes

645
00:28:25,919 --> 00:28:27,440
were closed

646
00:28:27,440 --> 00:28:31,279
by it so then we called

647
00:28:31,279 --> 00:28:34,080
shutter open got the money

648
00:28:34,080 --> 00:28:38,399
uh and just closed the shutter back

649
00:28:38,399 --> 00:28:40,559
that's it

650
00:28:40,559 --> 00:28:42,720
and

651
00:28:42,720 --> 00:28:45,840
this is a short history of these

652
00:28:45,840 --> 00:28:49,039
vulnerabilities uh

653
00:28:49,039 --> 00:28:52,159
one for a single device like aroma3 and

654
00:28:52,159 --> 00:28:53,840
cmd5

655
00:28:53,840 --> 00:28:56,320
findings testings

656
00:28:56,320 --> 00:28:59,440
testing and confirming process

657
00:28:59,440 --> 00:29:00,880
regarding

658
00:29:00,880 --> 00:29:02,640
cves

659
00:29:02,640 --> 00:29:05,279
status changing from registered to

660
00:29:05,279 --> 00:29:08,320
released yeah it's in progress for now

661
00:29:08,320 --> 00:29:09,919
so

662
00:29:09,919 --> 00:29:13,200
for now we have russian mitra

663
00:29:13,200 --> 00:29:16,799
variant ids

664
00:29:17,919 --> 00:29:20,240
that's it

665
00:29:20,240 --> 00:29:21,440
so

666
00:29:21,440 --> 00:29:24,960
thank you for watching for listening if

667
00:29:24,960 --> 00:29:27,320
you have any questions

668
00:29:27,320 --> 00:29:30,000
[Music]

669
00:29:30,000 --> 00:29:32,320
yeah if you have any questions

670
00:29:32,320 --> 00:29:35,120
feel free to ask or send me them

671
00:29:35,120 --> 00:29:35,919
at

672
00:29:35,919 --> 00:29:38,559
my mail

673
00:29:38,559 --> 00:29:41,440
that's it

674
00:29:41,440 --> 00:29:45,559
yeah thank you vladimir

