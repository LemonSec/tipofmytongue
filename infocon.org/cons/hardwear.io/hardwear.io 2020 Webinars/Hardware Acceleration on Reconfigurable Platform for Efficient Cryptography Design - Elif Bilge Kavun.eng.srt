1
00:00:12,490 --> 00:00:13,679
[Music]

2
00:00:13,679 --> 00:00:15,040
hi everyone

3
00:00:15,040 --> 00:00:17,039
thank you for joining us on this tuesday

4
00:00:17,039 --> 00:00:19,600
evening i hope you're all doing well

5
00:00:19,600 --> 00:00:21,680
before we start the webinar i'd like to

6
00:00:21,680 --> 00:00:23,840
share some hardware io projects that

7
00:00:23,840 --> 00:00:25,680
we've been working on in the past couple

8
00:00:25,680 --> 00:00:27,840
of weeks

9
00:00:27,840 --> 00:00:30,160
first of all we open the registration

10
00:00:30,160 --> 00:00:32,238
for our berlin online trainings which

11
00:00:32,238 --> 00:00:35,280
will take place in january 2021

12
00:00:35,280 --> 00:00:36,800
we have announced four hands and

13
00:00:36,800 --> 00:00:38,640
trainings which can now be checked out

14
00:00:38,640 --> 00:00:41,200
on our website

15
00:00:41,200 --> 00:00:43,520
also this year we are providing

16
00:00:43,520 --> 00:00:46,079
organizational support for iot security

17
00:00:46,079 --> 00:00:48,160
foundation's virtual conference as a

18
00:00:48,160 --> 00:00:49,520
gold sponsor

19
00:00:49,520 --> 00:00:51,120
which will take place at the beginning

20
00:00:51,120 --> 00:00:52,559
of december

21
00:00:52,559 --> 00:00:54,960
please keep an eye on our social media

22
00:00:54,960 --> 00:00:56,879
platforms because we are giving away

23
00:00:56,879 --> 00:01:00,879
some free passes to this conference

24
00:01:00,879 --> 00:01:03,840
moreover since our fix-up was very

25
00:01:03,840 --> 00:01:05,600
successful during our netherlands

26
00:01:05,600 --> 00:01:07,439
conference we will run it's for

27
00:01:07,439 --> 00:01:10,479
two other conferences as well pain and

28
00:01:10,479 --> 00:01:11,520
space

29
00:01:11,520 --> 00:01:13,360
if you're interested in professional

30
00:01:13,360 --> 00:01:15,920
networking please sign up to fix up

31
00:01:15,920 --> 00:01:18,000
links can be found on our social media

32
00:01:18,000 --> 00:01:19,280
platforms and

33
00:01:19,280 --> 00:01:22,080
on our website

34
00:01:23,360 --> 00:01:25,759
coming back to our webinar today we have

35
00:01:25,759 --> 00:01:27,920
ellis assistant professor at pasau

36
00:01:27,920 --> 00:01:29,119
university with us

37
00:01:29,119 --> 00:01:31,119
who will present her research on

38
00:01:31,119 --> 00:01:33,680
hardware acceleration on reconfigurable

39
00:01:33,680 --> 00:01:35,759
platform for efficient cryptography

40
00:01:35,759 --> 00:01:37,200
design

41
00:01:37,200 --> 00:01:39,840
as usually today's webinar will consist

42
00:01:39,840 --> 00:01:42,000
of a 30-minute technical talk followed

43
00:01:42,000 --> 00:01:44,399
by a 10-minute q1 day

44
00:01:44,399 --> 00:01:46,640
if you have any questions please send

45
00:01:46,640 --> 00:01:48,159
them across the zoom chat

46
00:01:48,159 --> 00:01:49,840
and we will answer them after the

47
00:01:49,840 --> 00:01:52,560
presentation is complete

48
00:01:52,560 --> 00:01:54,640
without further delay i would like to

49
00:01:54,640 --> 00:01:56,399
invite you alif to start your

50
00:01:56,399 --> 00:01:58,719
presentation

51
00:01:58,719 --> 00:02:02,240
thank you very much for introduction

52
00:02:02,240 --> 00:02:09,840
share my

53
00:02:13,680 --> 00:02:18,160
you can see it right

54
00:02:19,120 --> 00:02:24,080
okay great um good yeah so

55
00:02:24,080 --> 00:02:27,200
everyone who's online and also probably

56
00:02:27,200 --> 00:02:29,440
later watching

57
00:02:29,440 --> 00:02:32,319
uh to attend my talk today uh which will

58
00:02:32,319 --> 00:02:34,160
be on hardware acceleration on

59
00:02:34,160 --> 00:02:36,239
reconfigurable platforms for efficient

60
00:02:36,239 --> 00:02:37,760
crypto

61
00:02:37,760 --> 00:02:41,120
so it will be uh i will go

62
00:02:41,120 --> 00:02:43,760
over the details of it later uh it will

63
00:02:43,760 --> 00:02:44,720
be a bit of

64
00:02:44,720 --> 00:02:47,440
basics it would be boring for some at

65
00:02:47,440 --> 00:02:47,760
the

66
00:02:47,760 --> 00:02:52,319
beginning but later i will focus on some

67
00:02:52,879 --> 00:02:55,200
different design i'll be other

68
00:02:55,200 --> 00:02:56,319
exploration

69
00:02:56,319 --> 00:02:59,440
on fpgas

70
00:03:02,080 --> 00:03:05,040
but first i'd like to give some personal

71
00:03:05,040 --> 00:03:06,879
back

72
00:03:06,879 --> 00:03:10,879
to explain like why

73
00:03:12,159 --> 00:03:15,360
or how i'm like placed with this

74
00:03:15,360 --> 00:03:18,879
i typical engineering especially digital

75
00:03:18,879 --> 00:03:22,000
design for hardware design

76
00:03:22,000 --> 00:03:25,200
um and also later masters in

77
00:03:25,200 --> 00:03:26,080
cryptography

78
00:03:26,080 --> 00:03:29,200
so i actually from that point on

79
00:03:29,200 --> 00:03:30,480
combined both

80
00:03:30,480 --> 00:03:34,239
so i focus mostly on design

81
00:03:34,239 --> 00:03:37,680
uh exactly on crypt further

82
00:03:37,680 --> 00:03:41,040
i did my phd in gohan it was resourceful

83
00:03:41,040 --> 00:03:41,920
each other's

84
00:03:41,920 --> 00:03:43,840
mostly known name is lightweight

85
00:03:43,840 --> 00:03:45,840
cryptography

86
00:03:45,840 --> 00:03:48,080
and following my research at the

87
00:03:48,080 --> 00:03:49,840
university for my phd

88
00:03:49,840 --> 00:03:52,959
i switched england and also during my

89
00:03:52,959 --> 00:03:55,360
study

90
00:03:55,360 --> 00:03:58,720
from consultancy and later at infineon i

91
00:03:58,720 --> 00:04:00,239
was mostly focusing on

92
00:04:00,239 --> 00:04:02,879
design and evolution of uh thank you to

93
00:04:02,879 --> 00:04:05,439
my crypto course

94
00:04:05,439 --> 00:04:08,560
later i decided to go back to research

95
00:04:08,560 --> 00:04:09,920
so i switched to

96
00:04:09,920 --> 00:04:13,040
the university of kefir and after my

97
00:04:13,040 --> 00:04:13,519
time in

98
00:04:13,519 --> 00:04:16,079
sheffield just recently i switched back

99
00:04:16,079 --> 00:04:18,320
to germany

100
00:04:18,320 --> 00:04:21,358
thank you intelligent system

101
00:04:21,358 --> 00:04:24,400
i am uh mostly uh interested in

102
00:04:24,400 --> 00:04:26,320
design and implementation of crypto

103
00:04:26,320 --> 00:04:28,639
primitives like

104
00:04:28,639 --> 00:04:31,280
birth city years life-based cryptography

105
00:04:31,280 --> 00:04:32,720
hardware security

106
00:04:32,720 --> 00:04:35,040
especially from my time at infineon side

107
00:04:35,040 --> 00:04:36,960
channel attacks on

108
00:04:36,960 --> 00:04:40,320
security and nowadays security of

109
00:04:40,320 --> 00:04:42,800
intelligence systems using ai machine

110
00:04:42,800 --> 00:04:46,080
learning applications for security

111
00:04:46,080 --> 00:04:49,280
okay so uh today's talk

112
00:04:49,280 --> 00:04:53,120
as i told it will include some basic

113
00:04:53,120 --> 00:04:55,600
information about hardware exploration

114
00:04:55,600 --> 00:04:58,000
and reconfigurable platforms and later

115
00:04:58,000 --> 00:05:00,880
some research details on how we uh

116
00:05:00,880 --> 00:05:02,160
approached or how

117
00:05:02,160 --> 00:05:05,360
these platforms work

118
00:05:05,360 --> 00:05:07,759
uh initially i will give some hardware

119
00:05:07,759 --> 00:05:10,080
exploration details when we use them

120
00:05:10,080 --> 00:05:13,520
and then uh why reconfigurable platforms

121
00:05:13,520 --> 00:05:15,280
are actually interesting

122
00:05:15,280 --> 00:05:18,800
for us research and

123
00:05:18,800 --> 00:05:21,919
i will talk about the need

124
00:05:21,919 --> 00:05:23,680
for this cryptographic book by for

125
00:05:23,680 --> 00:05:26,000
design and actually

126
00:05:26,000 --> 00:05:28,240
the efficiency metrics related to this

127
00:05:28,240 --> 00:05:29,759
example and that i'm going to

128
00:05:29,759 --> 00:05:33,360
give okay firstly

129
00:05:33,360 --> 00:05:35,919
if we focus on the need for hardware

130
00:05:35,919 --> 00:05:37,440
acceleration

131
00:05:37,440 --> 00:05:40,960
uh in general we can generalize that

132
00:05:40,960 --> 00:05:43,120
any computation operation can be

133
00:05:43,120 --> 00:05:45,759
calculated

134
00:05:46,560 --> 00:05:48,800
sorry could you get a little bit closer

135
00:05:48,800 --> 00:05:51,440
to the microphone because you're okay

136
00:05:51,440 --> 00:05:54,240
i i'm also hearing some or like seeing

137
00:05:54,240 --> 00:05:56,080
some notifications about my internet

138
00:05:56,080 --> 00:05:56,800
connections

139
00:05:56,800 --> 00:05:59,680
unstable so it may be related but as

140
00:05:59,680 --> 00:06:01,680
well so sorry for that

141
00:06:01,680 --> 00:06:04,960
okay thank you is that better now

142
00:06:04,960 --> 00:06:09,039
yes okay perfect uh so yeah

143
00:06:09,039 --> 00:06:11,280
again starting from the beginning of the

144
00:06:11,280 --> 00:06:12,080
slide

145
00:06:12,080 --> 00:06:15,440
um so if we talk about the need for

146
00:06:15,440 --> 00:06:16,960
hardware acceleration

147
00:06:16,960 --> 00:06:19,120
we can generalize that any computational

148
00:06:19,120 --> 00:06:21,199
operation can be calculated fully in

149
00:06:21,199 --> 00:06:21,840
software

150
00:06:21,840 --> 00:06:25,360
on cpu that's mostly done it can also be

151
00:06:25,360 --> 00:06:28,639
fully run in custom hardware or it can

152
00:06:28,639 --> 00:06:30,560
be a combination of both where we use

153
00:06:30,560 --> 00:06:33,199
like with the extraction set extensions

154
00:06:33,199 --> 00:06:34,080
where we combine

155
00:06:34,080 --> 00:06:37,919
the best of hardware and software

156
00:06:38,800 --> 00:06:42,000
specifically try to define what hardware

157
00:06:42,000 --> 00:06:45,759
acceleration is especially in the

158
00:06:46,160 --> 00:06:49,599
code design approach it's using

159
00:06:49,599 --> 00:06:51,840
computing hardware especially tailored

160
00:06:51,840 --> 00:06:52,880
to perform from

161
00:06:52,880 --> 00:06:56,720
earth on function efficiently than it

162
00:06:56,720 --> 00:06:57,199
would be

163
00:06:57,199 --> 00:07:00,880
in software cpu and

164
00:07:00,880 --> 00:07:02,479
when we want to use hardware

165
00:07:02,479 --> 00:07:05,440
accelerations is actually especially for

166
00:07:05,440 --> 00:07:09,520
computationally heavy applications

167
00:07:09,520 --> 00:07:12,319
and if you want to compare advantages

168
00:07:12,319 --> 00:07:13,759
and disadvantages of

169
00:07:13,759 --> 00:07:17,840
a hardware and software approach here

170
00:07:18,240 --> 00:07:20,240
of course this depends like what we

171
00:07:20,240 --> 00:07:23,120
select is depends if it depends a bit on

172
00:07:23,120 --> 00:07:23,440
our

173
00:07:23,440 --> 00:07:26,639
application or our need if we need

174
00:07:26,639 --> 00:07:29,680
some rapid developments lower

175
00:07:29,680 --> 00:07:32,720
non-recurring engineering costs or

176
00:07:32,720 --> 00:07:38,000
easy update or patching potential

177
00:07:38,560 --> 00:07:41,280
if you start to talk about a heavy

178
00:07:41,280 --> 00:07:43,039
computation

179
00:07:43,039 --> 00:07:45,440
we need better performance faster

180
00:07:45,440 --> 00:07:46,879
computation time

181
00:07:46,879 --> 00:07:51,680
uh low power consumption and

182
00:07:51,680 --> 00:07:54,240
like figured before before that

183
00:07:54,240 --> 00:07:55,280
application

184
00:07:55,280 --> 00:07:57,520
with maybe even increased parallelism

185
00:07:57,520 --> 00:07:58,800
then

186
00:07:58,800 --> 00:08:00,960
software start starts to have some

187
00:08:00,960 --> 00:08:02,800
disadvantages

188
00:08:02,800 --> 00:08:05,199
hardware platforms start to be more

189
00:08:05,199 --> 00:08:06,080
advantageous

190
00:08:06,080 --> 00:08:09,280
in french cases uh

191
00:08:09,280 --> 00:08:13,120
so some applications

192
00:08:13,120 --> 00:08:15,280
that is like interesting for hardware

193
00:08:15,280 --> 00:08:16,160
platforms or

194
00:08:16,160 --> 00:08:18,800
acceleration hardware platform are

195
00:08:18,800 --> 00:08:20,000
computer graphics

196
00:08:20,000 --> 00:08:23,840
especially the gamers with more

197
00:08:23,840 --> 00:08:26,319
processing applications recently

198
00:08:26,319 --> 00:08:27,199
especially

199
00:08:27,199 --> 00:08:30,800
artificial intelligence applications and

200
00:08:30,800 --> 00:08:33,279
for a long time used in cryptographic

201
00:08:33,279 --> 00:08:34,719
applications

202
00:08:34,719 --> 00:08:38,839
and such platforms so for example as

203
00:08:38,839 --> 00:08:41,599
hardware gpu is graphic processing

204
00:08:41,599 --> 00:08:43,120
but it doesn't mean that it's just used

205
00:08:43,120 --> 00:08:44,959
for computer graphics

206
00:08:44,959 --> 00:08:47,279
but for example there are certain

207
00:08:47,279 --> 00:08:48,880
cryptographic applications

208
00:08:48,880 --> 00:08:51,120
for example person attacks which can be

209
00:08:51,120 --> 00:08:52,720
performed on gdp

210
00:08:52,720 --> 00:08:55,839
or certain dsp blocks on

211
00:08:55,839 --> 00:08:58,480
hardware can be used again for some

212
00:08:58,480 --> 00:09:00,480
cryptography operations

213
00:09:00,480 --> 00:09:03,600
uh but here today uh i'm going to talk

214
00:09:03,600 --> 00:09:05,519
more about like azig

215
00:09:05,519 --> 00:09:08,959
or fpga parts and just the fpgas

216
00:09:08,959 --> 00:09:12,640
and because asic is quite

217
00:09:13,600 --> 00:09:16,880
reconfigured later

218
00:09:16,880 --> 00:09:20,880
but field program data is a

219
00:09:20,880 --> 00:09:23,680
terms where we can actually later

220
00:09:23,680 --> 00:09:25,760
program

221
00:09:25,760 --> 00:09:28,959
uh but before going into that

222
00:09:28,959 --> 00:09:31,120
um i would like to focus a bit on the

223
00:09:31,120 --> 00:09:32,080
cryptology

224
00:09:32,080 --> 00:09:35,200
uh applications again so as i told you

225
00:09:35,200 --> 00:09:36,480
there are different

226
00:09:36,480 --> 00:09:38,720
applications cryptology or cryptography

227
00:09:38,720 --> 00:09:41,279
one of them

228
00:09:41,360 --> 00:09:43,120
cryptology there is like a cryptography

229
00:09:43,120 --> 00:09:45,040
side and cryptalization

230
00:09:45,040 --> 00:09:47,120
these two different applications areas

231
00:09:47,120 --> 00:09:49,040
are actually interesting for hardware

232
00:09:49,040 --> 00:09:51,200
platforms on cryptography side

233
00:09:51,200 --> 00:09:54,480
it would be implementing so yeah

234
00:09:54,480 --> 00:09:58,720
but encrypt hardware based encryption

235
00:09:58,720 --> 00:10:01,040
and also implementing certain

236
00:10:01,040 --> 00:10:02,000
cryptography

237
00:10:02,000 --> 00:10:04,399
applications or algorithms as

238
00:10:04,399 --> 00:10:06,480
accelerators

239
00:10:06,480 --> 00:10:08,800
for processors or instruction set

240
00:10:08,800 --> 00:10:09,600
extensions

241
00:10:09,600 --> 00:10:13,440
for processors here

242
00:10:14,000 --> 00:10:16,240
transit extension with the commercial

243
00:10:16,240 --> 00:10:17,440
example

244
00:10:17,440 --> 00:10:19,200
there can also be secure crypto

245
00:10:19,200 --> 00:10:21,200
protesters where processor

246
00:10:21,200 --> 00:10:23,839
unit itself is also secure through

247
00:10:23,839 --> 00:10:24,959
general

248
00:10:24,959 --> 00:10:27,600
and also some uh other hardware blocks

249
00:10:27,600 --> 00:10:29,360
like

250
00:10:29,360 --> 00:10:31,600
or for team generation could be possible

251
00:10:31,600 --> 00:10:32,880
et cetera

252
00:10:32,880 --> 00:10:35,680
and for the cryptanalysis part actually

253
00:10:35,680 --> 00:10:39,200
we will talk more about the custom

254
00:10:39,200 --> 00:10:41,600
algorithms and implementations of these

255
00:10:41,600 --> 00:10:43,120
cryptographic algorithms

256
00:10:43,120 --> 00:10:46,959
for example i can go home

257
00:10:46,959 --> 00:10:49,920
at a time there was a coca-cola engine

258
00:10:49,920 --> 00:10:51,279
which was used to break

259
00:10:51,279 --> 00:10:54,320
this algorithm uh on

260
00:10:54,320 --> 00:10:57,519
like with a very deep uh budget i think

261
00:10:57,519 --> 00:10:58,320
it put

262
00:10:58,320 --> 00:11:01,600
around thousand or something i'm not

263
00:11:01,600 --> 00:11:04,440
confident about the formation

264
00:11:04,440 --> 00:11:06,640
[Music]

265
00:11:06,640 --> 00:11:09,680
and its successor was reverend so

266
00:11:09,680 --> 00:11:14,000
this was a special platform uh

267
00:11:14,000 --> 00:11:18,480
you because you attack algorithms

268
00:11:18,560 --> 00:11:21,360
uh but there is also a third application

269
00:11:21,360 --> 00:11:22,160
area which is

270
00:11:22,160 --> 00:11:24,959
less explored or less used uh and in

271
00:11:24,959 --> 00:11:26,480
this talk i would like to talk a little

272
00:11:26,480 --> 00:11:28,640
bit on that side actually

273
00:11:28,640 --> 00:11:32,959
uh this one is hardware architecture

274
00:11:32,959 --> 00:11:36,959
to help designing it what does this mean

275
00:11:36,959 --> 00:11:39,200
this is not necessarily about

276
00:11:39,200 --> 00:11:41,040
implementing this is

277
00:11:41,040 --> 00:11:42,800
really designing the crypto algorithm

278
00:11:42,800 --> 00:11:44,640
itself

279
00:11:44,640 --> 00:11:48,320
and uh for this part of application

280
00:11:48,320 --> 00:11:50,639
we would actually need flexibility in

281
00:11:50,639 --> 00:11:52,320
design why

282
00:11:52,320 --> 00:11:55,360
because generally when you

283
00:11:55,360 --> 00:11:58,000
let's sort of cut some hardware it would

284
00:11:58,000 --> 00:11:58,399
mean

285
00:11:58,399 --> 00:12:01,519
looking for some sort of

286
00:12:01,519 --> 00:12:04,000
cryptographic algorithm that's why we

287
00:12:04,000 --> 00:12:04,639
might it

288
00:12:04,639 --> 00:12:06,959
may need to change or try different

289
00:12:06,959 --> 00:12:08,000
parameters

290
00:12:08,000 --> 00:12:11,200
in this search architecture uh

291
00:12:11,200 --> 00:12:14,000
we may have some search con constraints

292
00:12:14,000 --> 00:12:14,480
so we

293
00:12:14,480 --> 00:12:16,160
may need to update these constraints

294
00:12:16,160 --> 00:12:17,839
depending on the context

295
00:12:17,839 --> 00:12:21,920
of first or the design

296
00:12:21,920 --> 00:12:25,600
we may need to update the elimination

297
00:12:25,600 --> 00:12:27,680
so if we are looking for a certain

298
00:12:27,680 --> 00:12:30,480
photographic building block we

299
00:12:30,480 --> 00:12:34,160
check its quality for security

300
00:12:34,160 --> 00:12:37,680
and then we may need to eliminate uh

301
00:12:37,680 --> 00:12:38,720
quality

302
00:12:38,720 --> 00:12:40,959
change the elimination and quality

303
00:12:40,959 --> 00:12:42,800
constraint according or we may need to

304
00:12:42,800 --> 00:12:43,200
add

305
00:12:43,200 --> 00:12:46,800
some more constraints uh but

306
00:12:46,800 --> 00:12:49,519
in general recall figure about

307
00:12:49,519 --> 00:12:51,200
reconfigurability and i said like

308
00:12:51,200 --> 00:12:52,000
software is

309
00:12:52,000 --> 00:12:54,160
easier for that but we still need

310
00:12:54,160 --> 00:12:55,600
hardware acceleration

311
00:12:55,600 --> 00:12:59,040
and even rapid development in front of

312
00:12:59,040 --> 00:13:00,480
project

313
00:13:00,480 --> 00:13:03,040
uh tail or it's not good enough so you

314
00:13:03,040 --> 00:13:04,399
buy a new search

315
00:13:04,399 --> 00:13:06,800
constraint again but that's why we would

316
00:13:06,800 --> 00:13:07,519
still need

317
00:13:07,519 --> 00:13:09,519
uh to be fast that's why we need

318
00:13:09,519 --> 00:13:10,880
hardware

319
00:13:10,880 --> 00:13:14,399
and this is the reason i'm sorry

320
00:13:14,399 --> 00:13:17,200
it's the reason why we would opt for a

321
00:13:17,200 --> 00:13:20,240
reconfigurable hardware platform

322
00:13:20,240 --> 00:13:23,839
is fpga efficiently

323
00:13:24,240 --> 00:13:27,040
um and in this cryptography design they

324
00:13:27,040 --> 00:13:28,560
i will

325
00:13:28,560 --> 00:13:31,120
put on block ciphers and metric

326
00:13:31,120 --> 00:13:32,480
cryptography because

327
00:13:32,480 --> 00:13:36,079
this is a example we have at hand i also

328
00:13:36,079 --> 00:13:38,399
mostly focus on symmetric cryptography

329
00:13:38,399 --> 00:13:39,680
in my carrier so

330
00:13:39,680 --> 00:13:42,800
we will look into the block side so

331
00:13:42,800 --> 00:13:45,199
uh before starting just to give some

332
00:13:45,199 --> 00:13:46,240
details about

333
00:13:46,240 --> 00:13:49,760
block ciphers like very short

334
00:13:49,760 --> 00:13:53,600
fulls of block site that's especially

335
00:13:53,600 --> 00:13:54,959
aes here

336
00:13:54,959 --> 00:13:58,320
in the figure um it has

337
00:13:58,320 --> 00:14:03,279
like different uh 128 bits data size

338
00:14:03,279 --> 00:14:05,519
with different key sizes

339
00:14:05,519 --> 00:14:08,959
um there is also this which is still

340
00:14:08,959 --> 00:14:13,199
used in certain settings but not from

341
00:14:13,360 --> 00:14:17,199
standard but edes is still

342
00:14:17,199 --> 00:14:21,279
used in some some applications in in

343
00:14:21,279 --> 00:14:26,639
certain like political people out there

344
00:14:26,639 --> 00:14:29,279
for example for glock ciphers they are

345
00:14:29,279 --> 00:14:30,079
quite

346
00:14:30,079 --> 00:14:34,240
popular as an embedded application

347
00:14:34,240 --> 00:14:37,920
get more and more pervasive uh present

348
00:14:37,920 --> 00:14:38,639
clefia

349
00:14:38,639 --> 00:14:43,920
prince and krypton are some examples

350
00:14:43,920 --> 00:14:44,720
note that the

351
00:14:44,720 --> 00:14:46,880
metrics about being blind faith or

352
00:14:46,880 --> 00:14:48,959
resource efficient here are

353
00:14:48,959 --> 00:14:51,360
what sort of uh metrics we're talking

354
00:14:51,360 --> 00:14:52,240
about

355
00:14:52,240 --> 00:14:54,560
we may talk about long sleeping area

356
00:14:54,560 --> 00:14:55,440
especially

357
00:14:55,440 --> 00:14:58,480
targeting hardware applications

358
00:14:58,480 --> 00:15:01,760
uh so a smaller area smaller silicon

359
00:15:01,760 --> 00:15:02,959
areas

360
00:15:02,959 --> 00:15:05,360
like targeted here it could be low

361
00:15:05,360 --> 00:15:06,160
latency

362
00:15:06,160 --> 00:15:09,040
so um computing the result the

363
00:15:09,040 --> 00:15:10,480
encryption result as

364
00:15:10,480 --> 00:15:13,199
soon as possible maybe even one clock

365
00:15:13,199 --> 00:15:13,920
cycle

366
00:15:13,920 --> 00:15:17,120
depends on high performance low energy

367
00:15:17,120 --> 00:15:18,320
and power especially

368
00:15:18,320 --> 00:15:20,800
low energy if we talk about some

369
00:15:20,800 --> 00:15:22,639
ambitious applications where battery

370
00:15:22,639 --> 00:15:23,279
power is

371
00:15:23,279 --> 00:15:26,000
important so we would like to stay there

372
00:15:26,000 --> 00:15:27,760
and also if you talk about software

373
00:15:27,760 --> 00:15:28,800
implementations

374
00:15:28,800 --> 00:15:31,839
you may need to have log instruction

375
00:15:31,839 --> 00:15:36,240
and like in current title account

376
00:15:36,240 --> 00:15:38,399
uh so coming back to blockchain first

377
00:15:38,399 --> 00:15:40,000
there are different design approaches

378
00:15:40,000 --> 00:15:43,040
actually to defeat the target

379
00:15:43,040 --> 00:15:46,639
come up with a nice hyper design uh

380
00:15:46,639 --> 00:15:48,880
it could be blocked as a substitution

381
00:15:48,880 --> 00:15:50,240
permutation network

382
00:15:50,240 --> 00:15:53,839
from espn or faisal network or

383
00:15:53,839 --> 00:15:57,120
additional rotation exhaust approach

384
00:15:57,120 --> 00:16:00,320
so here like the aes figure for example

385
00:16:00,320 --> 00:16:00,720
here

386
00:16:00,720 --> 00:16:03,040
is the substitution permutation that

387
00:16:03,040 --> 00:16:06,240
we're getting an advisable

388
00:16:06,240 --> 00:16:09,279
permutation approach a

389
00:16:09,279 --> 00:16:12,000
different way but here you can see in

390
00:16:12,000 --> 00:16:12,720
the figure

391
00:16:12,720 --> 00:16:15,759
substitute bytes the step is actually

392
00:16:15,759 --> 00:16:16,560
performing

393
00:16:16,560 --> 00:16:19,040
the substitution because the nonlinear

394
00:16:19,040 --> 00:16:20,079
operation

395
00:16:20,079 --> 00:16:23,519
introducing the confusion algorithm

396
00:16:23,519 --> 00:16:25,839
uh this is actually the interesting bit

397
00:16:25,839 --> 00:16:27,839
for hardware

398
00:16:27,839 --> 00:16:30,399
targeting algorithms because this can be

399
00:16:30,399 --> 00:16:31,600
the heavier part

400
00:16:31,600 --> 00:16:34,560
so that's why generally low area

401
00:16:34,560 --> 00:16:36,800
targeting cyphers would try to

402
00:16:36,800 --> 00:16:40,160
give this part keep its part as small as

403
00:16:40,160 --> 00:16:41,120
possible

404
00:16:41,120 --> 00:16:45,199
while still keeping the security correct

405
00:16:45,759 --> 00:16:50,160
uh in so here shift rows mix columns

406
00:16:50,160 --> 00:16:52,560
are especially but these are uh

407
00:16:52,560 --> 00:16:53,440
introducing

408
00:16:53,440 --> 00:16:57,040
permutation which is linear layer

409
00:16:57,040 --> 00:16:59,680
and this is bringing the diffusion the

410
00:16:59,680 --> 00:17:00,720
algorithm

411
00:17:00,720 --> 00:17:03,600
and this part may be heavier ford

412
00:17:03,600 --> 00:17:06,160
software of course like

413
00:17:06,160 --> 00:17:08,640
it can be difficult for software as well

414
00:17:08,640 --> 00:17:12,079
but still as lookup tables

415
00:17:12,079 --> 00:17:15,919
we can easier implement this one but

416
00:17:15,919 --> 00:17:18,319
permutation can really be heavy for

417
00:17:18,319 --> 00:17:19,039
software

418
00:17:19,039 --> 00:17:22,319
for example uh if we look at lightweight

419
00:17:22,319 --> 00:17:24,160
present cipher which is very good at

420
00:17:24,160 --> 00:17:26,240
hardware

421
00:17:26,240 --> 00:17:29,919
so it's a low area low cost piper

422
00:17:29,919 --> 00:17:31,679
but if we want to implement this in

423
00:17:31,679 --> 00:17:33,440
software it's a

424
00:17:33,440 --> 00:17:36,919
permutation layer cost for one round

425
00:17:36,919 --> 00:17:39,919
144 clock cycles this is

426
00:17:39,919 --> 00:17:43,039
on 8-bit atmel 80 mega 8a

427
00:17:43,039 --> 00:17:46,240
microprocessor so it's quite uh

428
00:17:46,240 --> 00:17:48,240
closely in software but that would

429
00:17:48,240 --> 00:17:52,080
actually be just wiring in hardware

430
00:17:52,160 --> 00:17:54,720
so uh that's why we should try a

431
00:17:54,720 --> 00:17:56,080
different approach for

432
00:17:56,080 --> 00:18:00,799
better design and implementation of

433
00:18:02,400 --> 00:18:05,039
and that's why here we will focus on low

434
00:18:05,039 --> 00:18:06,080
instruction

435
00:18:06,080 --> 00:18:09,120
and inherent height.com in our research

436
00:18:09,120 --> 00:18:11,280
problem

437
00:18:11,280 --> 00:18:14,320
okay uh so as given in the present

438
00:18:14,320 --> 00:18:15,120
example

439
00:18:15,120 --> 00:18:18,320
uh our targets so we will

440
00:18:18,320 --> 00:18:21,600
we will use uh atmega8a as a

441
00:18:21,600 --> 00:18:23,679
microprocessor platform here

442
00:18:23,679 --> 00:18:26,720
and our target is to achieve the lowest

443
00:18:26,720 --> 00:18:28,080
possible infraction

444
00:18:28,080 --> 00:18:31,039
or cycle count in the in our block fiber

445
00:18:31,039 --> 00:18:32,240
design

446
00:18:32,240 --> 00:18:36,160
and uh this actually the cipher that we

447
00:18:36,160 --> 00:18:36,799
designed

448
00:18:36,799 --> 00:18:40,160
in the application uh it's named pride i

449
00:18:40,160 --> 00:18:43,679
have heard that which is specifically

450
00:18:43,679 --> 00:18:47,520
targeting software implementation

451
00:18:47,840 --> 00:18:51,120
uh in pride as we are targeting software

452
00:18:51,120 --> 00:18:52,160
implementations

453
00:18:52,160 --> 00:18:55,760
uh we in the overall design we targeted

454
00:18:55,760 --> 00:18:58,880
or we took pixelizing into account so we

455
00:18:58,880 --> 00:19:00,000
adopted

456
00:19:00,000 --> 00:19:02,880
a bit slicing for efficient software

457
00:19:02,880 --> 00:19:04,240
implementation

458
00:19:04,240 --> 00:19:08,080
and if you look here at the figure so

459
00:19:08,080 --> 00:19:11,520
the l here would define our

460
00:19:11,520 --> 00:19:14,720
linear layer mathematically and it's

461
00:19:14,720 --> 00:19:17,200
called block interleaving construction

462
00:19:17,200 --> 00:19:19,760
mathematically and you you see p and p

463
00:19:19,760 --> 00:19:21,039
inverse particle

464
00:19:21,039 --> 00:19:23,679
needs additional permutations are coming

465
00:19:23,679 --> 00:19:24,480
for example

466
00:19:24,480 --> 00:19:27,760
from lysine park so just how we uh

467
00:19:27,760 --> 00:19:30,879
put our uh

468
00:19:31,440 --> 00:19:35,679
in registers brings us some additional

469
00:19:35,679 --> 00:19:38,799
permutation at bar design

470
00:19:38,799 --> 00:19:41,679
and uh what's interesting here for the

471
00:19:41,679 --> 00:19:42,799
rest of the blog is

472
00:19:42,799 --> 00:19:47,600
actually the metric part the l1 the lk

473
00:19:47,600 --> 00:19:52,559
for a quite large metric that you here

474
00:19:52,559 --> 00:19:56,320
how we implement l is actually

475
00:19:56,320 --> 00:20:00,000
done in four matrices

476
00:20:00,000 --> 00:20:02,400
uh so we defined a linear layer as a

477
00:20:02,400 --> 00:20:04,480
matrix multiplication

478
00:20:04,480 --> 00:20:07,600
a linear operation as well and as the

479
00:20:07,600 --> 00:20:08,320
state

480
00:20:08,320 --> 00:20:11,360
in pride is 64 bits we

481
00:20:11,360 --> 00:20:16,720
we talk about four different 16 by 16

482
00:20:16,720 --> 00:20:20,320
matrices linear matrix multiplication

483
00:20:20,320 --> 00:20:23,919
matrices here and it would be

484
00:20:23,919 --> 00:20:27,520
used to multiply so for example

485
00:20:27,520 --> 00:20:30,640
l0 would be used to multiply r0 and

486
00:20:30,640 --> 00:20:34,559
r1 registers like

487
00:20:34,559 --> 00:20:38,080
similarly r2 and r3 are used for l1

488
00:20:38,080 --> 00:20:41,600
and l2 l3 so on but we would

489
00:20:41,600 --> 00:20:44,320
have a matrix multiplication like in

490
00:20:44,320 --> 00:20:45,039
four

491
00:20:45,039 --> 00:20:48,240
constant operations to perform the whole

492
00:20:48,240 --> 00:20:51,520
linear layer operation uh

493
00:20:51,520 --> 00:20:54,559
so here what's important is in how many

494
00:20:54,559 --> 00:20:56,400
instructions we perform these

495
00:20:56,400 --> 00:21:01,760
uh l zero through l three multiplication

496
00:21:01,760 --> 00:21:03,679
and this was a research quest question

497
00:21:03,679 --> 00:21:04,960
for us we

498
00:21:04,960 --> 00:21:06,720
decided to look for efficiently

499
00:21:06,720 --> 00:21:09,600
implementable li

500
00:21:09,600 --> 00:21:12,640
uh but the question is uh the question

501
00:21:12,640 --> 00:21:14,159
is looking for the efficient

502
00:21:14,159 --> 00:21:16,799
uh linear layer or the people that

503
00:21:16,799 --> 00:21:19,679
implement a good implementation of a

504
00:21:19,679 --> 00:21:22,320
layer but should we look for the

505
00:21:22,320 --> 00:21:22,960
cheapest

506
00:21:22,960 --> 00:21:25,360
implementation of the given linear layer

507
00:21:25,360 --> 00:21:26,640
l

508
00:21:26,640 --> 00:21:30,400
or if we should focus on

509
00:21:30,400 --> 00:21:32,960
some certain number of instructions and

510
00:21:32,960 --> 00:21:33,840
then we check

511
00:21:33,840 --> 00:21:36,960
if the linear layer being produced at

512
00:21:36,960 --> 00:21:37,679
the end of the

513
00:21:37,679 --> 00:21:40,880
operation is good or not

514
00:21:40,880 --> 00:21:43,360
so that was actually a better approach

515
00:21:43,360 --> 00:21:44,559
to cover

516
00:21:44,559 --> 00:21:46,480
a better source face so we don't

517
00:21:46,480 --> 00:21:48,159
actually miss any good

518
00:21:48,159 --> 00:21:52,240
linear layers like to our best

519
00:21:52,240 --> 00:21:54,159
because we of course have to restrict

520
00:21:54,159 --> 00:21:55,760
some parts

521
00:21:55,760 --> 00:21:58,720
but the result of this or the answer of

522
00:21:58,720 --> 00:22:00,960
this question gives us also the number

523
00:22:00,960 --> 00:22:02,159
of clock cycles

524
00:22:02,159 --> 00:22:05,120
for speed and number of bytes for the

525
00:22:05,120 --> 00:22:07,678
code class

526
00:22:08,000 --> 00:22:11,280
um in order to perform this

527
00:22:11,280 --> 00:22:14,320
search as i say we have to restrict some

528
00:22:14,320 --> 00:22:15,840
parts so that's why we say it's a

529
00:22:15,840 --> 00:22:16,480
limited

530
00:22:16,480 --> 00:22:19,679
route for search for these efficient

531
00:22:19,679 --> 00:22:22,720
permutation mattresses uh we decided

532
00:22:22,720 --> 00:22:23,760
we'll form

533
00:22:23,760 --> 00:22:26,799
the 16 by 16 binary permutation or

534
00:22:26,799 --> 00:22:28,159
linear mattresses

535
00:22:28,159 --> 00:22:31,520
four of them we need four different uh

536
00:22:31,520 --> 00:22:35,039
not repeating each other and this search

537
00:22:35,039 --> 00:22:36,799
was actually inspired by the

538
00:22:36,799 --> 00:22:41,120
s box the substitution layer uh

539
00:22:44,720 --> 00:22:48,000
10 years ago uh in their case they

540
00:22:48,000 --> 00:22:50,240
actually performed the third

541
00:22:50,240 --> 00:22:54,320
on cpu so their first phase was not

542
00:22:54,320 --> 00:22:57,440
uh so large

543
00:22:57,440 --> 00:23:00,000
and it also it was taking more time so

544
00:23:00,000 --> 00:23:01,760
in order to have a faster search and a

545
00:23:01,760 --> 00:23:03,200
larger source space

546
00:23:03,200 --> 00:23:05,840
and this time targeting the linear layer

547
00:23:05,840 --> 00:23:07,440
we opened for the fb

548
00:23:07,440 --> 00:23:11,360
platform um

549
00:23:11,360 --> 00:23:14,400
so we want to perform the search

550
00:23:14,400 --> 00:23:16,799
for the 16 by 16 matrices but our

551
00:23:16,799 --> 00:23:18,720
initial

552
00:23:18,720 --> 00:23:22,159
search effort feel the fact that 16 by

553
00:23:22,159 --> 00:23:23,280
16 was also

554
00:23:23,280 --> 00:23:26,799
uh quite large yeah so that's why we

555
00:23:26,799 --> 00:23:30,080
actually had to think the 16 by 16

556
00:23:30,080 --> 00:23:33,840
uh mattresses in eight by eight form

557
00:23:33,840 --> 00:23:36,720
so we would look we would uh look for

558
00:23:36,720 --> 00:23:37,760
eight by eight

559
00:23:37,760 --> 00:23:41,120
even instead of 16 by 16. we would

560
00:23:41,120 --> 00:23:41,919
combine

561
00:23:41,919 --> 00:23:46,159
four different abcd namely abcd8 by

562
00:23:46,159 --> 00:23:47,200
eight

563
00:23:47,200 --> 00:23:50,400
mattresses to make up one

564
00:23:50,400 --> 00:23:53,760
16 by 16 matrix and then we would also

565
00:23:53,760 --> 00:23:56,799
have another 65 okay so

566
00:23:56,799 --> 00:24:00,000
we are looking for many uh eight by

567
00:24:00,000 --> 00:24:00,960
eight mattresses

568
00:24:00,960 --> 00:24:04,240
first to build a good 16 by 16 matrix

569
00:24:04,240 --> 00:24:07,840
and then from there we

570
00:24:07,840 --> 00:24:11,440
reach to the main 64 by 64

571
00:24:11,440 --> 00:24:14,559
linear layer large matrix

572
00:24:14,559 --> 00:24:17,600
so here the idea was to uh

573
00:24:17,600 --> 00:24:19,760
you remember the research question we

574
00:24:19,760 --> 00:24:21,520
want to answer like

575
00:24:21,520 --> 00:24:24,159
in how many instructions we can achieve

576
00:24:24,159 --> 00:24:24,799
a nice

577
00:24:24,799 --> 00:24:28,799
a good uh linear metric

578
00:24:28,799 --> 00:24:32,320
and that's why we had this sort of uh

579
00:24:32,320 --> 00:24:35,120
like flow where we first have an input

580
00:24:35,120 --> 00:24:36,320
and then

581
00:24:36,320 --> 00:24:40,080
we perform the first instruction

582
00:24:40,080 --> 00:24:43,200
it generates a metric and

583
00:24:43,200 --> 00:24:45,919
it proceeds so this result proceeds to

584
00:24:45,919 --> 00:24:46,640
the next

585
00:24:46,640 --> 00:24:50,159
instruction and then the matrix is

586
00:24:50,159 --> 00:24:51,440
updated there

587
00:24:51,440 --> 00:24:54,000
and it continues here's the example

588
00:24:54,000 --> 00:24:54,559
given

589
00:24:54,559 --> 00:24:58,000
until eight attraction so at the very

590
00:24:58,000 --> 00:24:59,440
end

591
00:24:59,440 --> 00:25:01,919
so in this example it's the eighth

592
00:25:01,919 --> 00:25:04,000
interactive interaction

593
00:25:04,000 --> 00:25:07,120
uh at the end of this parametric

594
00:25:07,120 --> 00:25:09,039
number of interactions we will take the

595
00:25:09,039 --> 00:25:10,320
quality of the

596
00:25:10,320 --> 00:25:13,200
metrics you will see in the next slides

597
00:25:13,200 --> 00:25:14,000
what i mean by

598
00:25:14,000 --> 00:25:17,520
quality and then if this is good for us

599
00:25:17,520 --> 00:25:20,320
then we store this uh and then look for

600
00:25:20,320 --> 00:25:21,440
others

601
00:25:21,440 --> 00:25:24,960
uh and later bc if the combination of

602
00:25:24,960 --> 00:25:30,159
or eight by eight matrices for 16

603
00:25:30,320 --> 00:25:33,760
uh in our constraining what we

604
00:25:33,760 --> 00:25:36,480
actually focus on of course we have to

605
00:25:36,480 --> 00:25:38,640
limit number of possible instructions

606
00:25:38,640 --> 00:25:42,320
yeah so we have to perform a combination

607
00:25:42,320 --> 00:25:43,679
of everything

608
00:25:43,679 --> 00:25:46,480
but of course not all of uh instructions

609
00:25:46,480 --> 00:25:48,000
are relevant for us

610
00:25:48,000 --> 00:25:51,360
so for example here in the able to see

611
00:25:51,360 --> 00:25:53,039
like the definitions of

612
00:25:53,039 --> 00:25:55,919
avr instructions which even includes the

613
00:25:55,919 --> 00:25:57,440
end operation but

614
00:25:57,440 --> 00:26:00,000
for our linear layer search even though

615
00:26:00,000 --> 00:26:01,520
our our architecture

616
00:26:01,520 --> 00:26:05,279
like also support and

617
00:26:05,279 --> 00:26:08,000
we did not include it in the number of

618
00:26:08,000 --> 00:26:09,840
possible

619
00:26:09,840 --> 00:26:12,400
so we focus mostly on instructions

620
00:26:12,400 --> 00:26:12,960
giving

621
00:26:12,960 --> 00:26:16,240
some linear output yeah and here if you

622
00:26:16,240 --> 00:26:16,880
look at

623
00:26:16,880 --> 00:26:19,520
uh for example slab it's the easiest

624
00:26:19,520 --> 00:26:20,880
operation to

625
00:26:20,880 --> 00:26:24,400
see like what we're trying to achieve uh

626
00:26:24,400 --> 00:26:27,679
so you can see the operation uh

627
00:26:27,679 --> 00:26:30,960
that we are trying to swap the

628
00:26:30,960 --> 00:26:34,799
levels of the bite yeah so the the

629
00:26:34,799 --> 00:26:37,120
least significant nibble and most

630
00:26:37,120 --> 00:26:38,640
significant nibble

631
00:26:38,640 --> 00:26:40,960
would change places and if you have a

632
00:26:40,960 --> 00:26:42,799
look at the input output part here

633
00:26:42,799 --> 00:26:44,480
you'll see what it means in terms of

634
00:26:44,480 --> 00:26:44,960
life

635
00:26:44,960 --> 00:26:48,159
if we have uh eight bits bytes like from

636
00:26:48,159 --> 00:26:51,360
x7 to x0 you see that

637
00:26:51,360 --> 00:26:55,200
the actual change so our implements

638
00:26:55,200 --> 00:26:57,919
from x7 to 0 and then the output would

639
00:26:57,919 --> 00:26:58,480
be

640
00:26:58,480 --> 00:27:04,240
x3 to x0 followed by 87 of x4

641
00:27:05,679 --> 00:27:09,039
and uh in general to show like how this

642
00:27:09,039 --> 00:27:09,520
looks

643
00:27:09,520 --> 00:27:12,000
in interaction metrics we were talking

644
00:27:12,000 --> 00:27:14,000
about slap so let's have a look at that

645
00:27:14,000 --> 00:27:15,120
one

646
00:27:15,120 --> 00:27:18,240
uh you can see here i don't know if i

647
00:27:18,240 --> 00:27:19,440
will be able to

648
00:27:19,440 --> 00:27:22,640
show this but here you see

649
00:27:22,640 --> 00:27:25,760
that we have a four by four

650
00:27:25,760 --> 00:27:28,320
block which is all zeros and then

651
00:27:28,320 --> 00:27:30,480
another four by four block which is also

652
00:27:30,480 --> 00:27:34,559
as well normally uh before the swept

653
00:27:34,559 --> 00:27:37,679
the original uh operation original

654
00:27:37,679 --> 00:27:38,159
metric

655
00:27:38,159 --> 00:27:40,720
would look original matrix part would be

656
00:27:40,720 --> 00:27:41,679
here so

657
00:27:41,679 --> 00:27:44,320
this part is four by four with plug it's

658
00:27:44,320 --> 00:27:44,720
fact

659
00:27:44,720 --> 00:27:47,760
with this one and then this one

660
00:27:47,760 --> 00:27:50,080
the left one that left lower one is

661
00:27:50,080 --> 00:27:50,960
switched with

662
00:27:50,960 --> 00:27:53,200
the other one so normally we would have

663
00:27:53,200 --> 00:27:54,320
the diagonal of

664
00:27:54,320 --> 00:27:57,600
one here but as we change the

665
00:27:57,600 --> 00:28:01,440
nibbles it's uh now here

666
00:28:01,440 --> 00:28:04,000
and here yeah so that we can have our

667
00:28:04,000 --> 00:28:05,840
massive multiplication

668
00:28:05,840 --> 00:28:09,679
correctly given the x cube x3 to x0

669
00:28:09,679 --> 00:28:14,080
and x7 to x4 result

670
00:28:14,880 --> 00:28:18,159
okay well here um like

671
00:28:18,159 --> 00:28:21,120
further constraining involves limiting

672
00:28:21,120 --> 00:28:23,600
the number of used registers as well

673
00:28:23,600 --> 00:28:27,520
so we limited the number of use

674
00:28:27,520 --> 00:28:28,799
registers to

675
00:28:28,799 --> 00:28:30,720
two state registers and four

676
00:28:30,720 --> 00:28:32,080
temperatures because

677
00:28:32,080 --> 00:28:33,919
there is no end that one can include

678
00:28:33,919 --> 00:28:36,000
this one more which would increase the

679
00:28:36,000 --> 00:28:39,600
complexity of but we limited this

680
00:28:39,600 --> 00:28:42,240
uh from our experiment based on our

681
00:28:42,240 --> 00:28:43,360
experience

682
00:28:43,360 --> 00:28:46,480
from the experiment at the two state and

683
00:28:46,480 --> 00:28:48,240
four temporary registers

684
00:28:48,240 --> 00:28:50,880
and then also taking into account the

685
00:28:50,880 --> 00:28:52,960
attractions i've given you before

686
00:28:52,960 --> 00:28:54,880
be tried all possible combinations of

687
00:28:54,880 --> 00:28:57,039
these attractions and registers

688
00:28:57,039 --> 00:29:00,159
save the generated mattresses

689
00:29:00,159 --> 00:29:02,880
like which are providing an appropriate

690
00:29:02,880 --> 00:29:03,600
code

691
00:29:03,600 --> 00:29:06,799
and then in the last step we checked

692
00:29:06,799 --> 00:29:08,399
which ones are actually

693
00:29:08,399 --> 00:29:11,120
giving the least number of interactions

694
00:29:11,120 --> 00:29:12,880
so here like when i

695
00:29:12,880 --> 00:29:15,440
say when i say we use a limited number

696
00:29:15,440 --> 00:29:16,640
of registers

697
00:29:16,640 --> 00:29:19,039
before the first instruction we actually

698
00:29:19,039 --> 00:29:20,000
even use just

699
00:29:20,000 --> 00:29:23,840
one register because there is no need to

700
00:29:23,840 --> 00:29:25,919
use other ones but it's not possible

701
00:29:25,919 --> 00:29:26,960
yeah so you don't

702
00:29:26,960 --> 00:29:29,600
have any any other use here and at the

703
00:29:29,600 --> 00:29:31,360
end of the first instruction

704
00:29:31,360 --> 00:29:34,399
there can be like two more

705
00:29:34,399 --> 00:29:38,159
so it's growing like by instruction

706
00:29:38,159 --> 00:29:40,159
and at the end of third instruction

707
00:29:40,159 --> 00:29:41,200
actually all

708
00:29:41,200 --> 00:29:43,120
four temporal registers are possible so

709
00:29:43,120 --> 00:29:45,600
that's why we reached a maximum here and

710
00:29:45,600 --> 00:29:49,200
until the end or one before the end

711
00:29:49,200 --> 00:29:50,960
we continue with four temporary

712
00:29:50,960 --> 00:29:53,440
registers and in the last instruction we

713
00:29:53,440 --> 00:29:55,200
again have four temperatures

714
00:29:55,200 --> 00:29:58,399
as input but uh the last

715
00:29:58,399 --> 00:30:01,360
one would be just one output so again so

716
00:30:01,360 --> 00:30:02,000
we have

717
00:30:02,000 --> 00:30:05,039
one two three uh four and

718
00:30:05,039 --> 00:30:07,840
five different structures you can see

719
00:30:07,840 --> 00:30:09,360
here

720
00:30:09,360 --> 00:30:12,159
the possible instructions include like

721
00:30:12,159 --> 00:30:13,520
for the first instruction

722
00:30:13,520 --> 00:30:16,880
for example we have move clap

723
00:30:16,880 --> 00:30:20,720
shift and i think because

724
00:30:20,720 --> 00:30:23,840
this is another operation i think was it

725
00:30:23,840 --> 00:30:27,440
i think uh and in the first one we are

726
00:30:27,440 --> 00:30:28,240
vomiting

727
00:30:28,240 --> 00:30:31,360
rotate because in this case

728
00:30:31,360 --> 00:30:36,320
a colon the shift operation uh

729
00:30:36,320 --> 00:30:39,200
so we have six possibilities with one

730
00:30:39,200 --> 00:30:40,000
eight and

731
00:30:40,000 --> 00:30:42,640
uh sorry one source and one destination

732
00:30:42,640 --> 00:30:44,159
register

733
00:30:44,159 --> 00:30:46,559
and then in the second one we have 18

734
00:30:46,559 --> 00:30:47,440
plus one

735
00:30:47,440 --> 00:30:50,559
plus one being here the clear

736
00:30:50,559 --> 00:30:53,679
interaction and we would have to do

737
00:30:53,679 --> 00:30:57,519
force and uh two i think here there's a

738
00:30:57,519 --> 00:30:58,159
title

739
00:30:58,159 --> 00:31:01,279
for that two destination registers

740
00:31:01,279 --> 00:31:03,840
and in the third instruction it grows

741
00:31:03,840 --> 00:31:05,760
like the number of instructions grow and

742
00:31:05,760 --> 00:31:06,320
also

743
00:31:06,320 --> 00:31:09,679
like the force registers growth

744
00:31:09,679 --> 00:31:13,200
as well as nation and we have 33

745
00:31:13,200 --> 00:31:16,880
plus one and the one before

746
00:31:16,880 --> 00:31:20,320
uh last would be uh

747
00:31:20,320 --> 00:31:23,919
like like fourth uh source registers in

748
00:31:23,919 --> 00:31:24,480
the

749
00:31:24,480 --> 00:31:27,279
case of exo it would be like and

750
00:31:27,279 --> 00:31:29,360
destination registers also change so we

751
00:31:29,360 --> 00:31:29,760
have

752
00:31:29,760 --> 00:31:32,720
48 plus one possibilities here of

753
00:31:32,720 --> 00:31:33,840
combination

754
00:31:33,840 --> 00:31:35,760
and in the last one as you remember we

755
00:31:35,760 --> 00:31:37,600
have one destination

756
00:31:37,600 --> 00:31:41,360
and a certain number of uh

757
00:31:41,360 --> 00:31:44,559
meaningful expressions

758
00:31:44,559 --> 00:31:48,320
okay so having a general look at the uh

759
00:31:48,320 --> 00:31:51,120
or in computation time and resulting

760
00:31:51,120 --> 00:31:52,480
matrices

761
00:31:52,480 --> 00:31:55,919
uh if we have if we look at an example

762
00:31:55,919 --> 00:31:59,919
of fixed abstraction like computation or

763
00:31:59,919 --> 00:32:01,039
search

764
00:32:01,039 --> 00:32:03,120
uh for the first one we have six

765
00:32:03,120 --> 00:32:05,440
possibilities then 19 34

766
00:32:05,440 --> 00:32:08,480
49 49 like twice repeating

767
00:32:08,480 --> 00:32:11,840
or fourth and fifth one and then we have

768
00:32:11,840 --> 00:32:12,240
the

769
00:32:12,240 --> 00:32:15,600
seventh one yeah this would actually

770
00:32:15,600 --> 00:32:18,880
give us uh like approximately two to the

771
00:32:18,880 --> 00:32:19,519
power of

772
00:32:19,519 --> 00:32:23,120
26 like complexity

773
00:32:23,120 --> 00:32:25,039
so this is actually doable but you have

774
00:32:25,039 --> 00:32:27,600
to remember that

775
00:32:27,600 --> 00:32:29,600
is actually just for one so we are

776
00:32:29,600 --> 00:32:31,360
repeating this number

777
00:32:31,360 --> 00:32:34,080
like four many different files yeah so

778
00:32:34,080 --> 00:32:35,600
we are repeating the same

779
00:32:35,600 --> 00:32:37,679
and i'm checking if it's good and then

780
00:32:37,679 --> 00:32:40,480
storing or not storing according to the

781
00:32:40,480 --> 00:32:42,799
quality check and here you can see like

782
00:32:42,799 --> 00:32:44,640
what i mean so we are following

783
00:32:44,640 --> 00:32:48,080
the number of attractions quality matrix

784
00:32:48,080 --> 00:32:51,679
would be if the determinant is

785
00:32:51,679 --> 00:32:53,440
fine yeah so we are taking the

786
00:32:53,440 --> 00:32:55,519
determinant of the matrix

787
00:32:55,519 --> 00:32:57,360
we are checking the linear and

788
00:32:57,360 --> 00:32:58,720
differential branch number

789
00:32:58,720 --> 00:33:02,240
of cryptographic characteristics

790
00:33:02,240 --> 00:33:05,440
and there are also like other small

791
00:33:05,440 --> 00:33:07,679
like constraints here but these are the

792
00:33:07,679 --> 00:33:09,440
most important ones

793
00:33:09,440 --> 00:33:12,720
and we think if everything's okay

794
00:33:12,720 --> 00:33:17,120
and then according to results we also

795
00:33:17,120 --> 00:33:19,360
have the count of the number of

796
00:33:19,360 --> 00:33:20,159
meaningful

797
00:33:20,159 --> 00:33:23,519
matrices we found so these four are

798
00:33:23,519 --> 00:33:26,320
nice uh mattresses here and also we

799
00:33:26,320 --> 00:33:27,600
store account

800
00:33:27,600 --> 00:33:30,799
of how many of them we actually in order

801
00:33:30,799 --> 00:33:32,720
to perform the search we used

802
00:33:32,720 --> 00:33:37,840
two different uh xylic vertical

803
00:33:37,840 --> 00:33:40,960
available ones at our hand but of course

804
00:33:40,960 --> 00:33:41,360
now

805
00:33:41,360 --> 00:33:43,360
uh vertical and organizing like

806
00:33:43,360 --> 00:33:46,720
different fpgas are available for this

807
00:33:46,720 --> 00:33:50,240
uh and finally we ended up with 36

808
00:33:50,240 --> 00:33:51,760
instructions to implement the whole

809
00:33:51,760 --> 00:33:53,279
linear layer

810
00:33:53,279 --> 00:33:56,960
remember 144 instructions and compare it

811
00:33:56,960 --> 00:33:58,480
to the 36

812
00:33:58,480 --> 00:34:01,919
fractions so it's quite a saving and

813
00:34:01,919 --> 00:34:05,200
actually so this l01 to 3r for

814
00:34:05,200 --> 00:34:08,960
16 by 16 like e

815
00:34:08,960 --> 00:34:11,839
and you can imagine that when i talk

816
00:34:11,839 --> 00:34:12,239
about

817
00:34:12,239 --> 00:34:14,639
seven instructions to build a 16 by 16

818
00:34:14,639 --> 00:34:16,320
matrix i'm actually talking about

819
00:34:16,320 --> 00:34:17,839
combining

820
00:34:17,839 --> 00:34:21,440
four eight by eight matrices uh a b

821
00:34:21,440 --> 00:34:25,199
c d is making up the seven here yeah

822
00:34:25,199 --> 00:34:27,520
and inverses are also calculated so we

823
00:34:27,520 --> 00:34:29,520
also uh

824
00:34:29,520 --> 00:34:32,839
cost of inverse as a metric in our

825
00:34:32,839 --> 00:34:34,639
church

826
00:34:34,639 --> 00:34:38,480
okay uh the general results for pride

827
00:34:38,480 --> 00:34:41,359
as i say the linear layer would be 36

828
00:34:41,359 --> 00:34:42,159
instructions

829
00:34:42,159 --> 00:34:44,719
xbox was also quite cheap with like 20

830
00:34:44,719 --> 00:34:46,480
attractions per round

831
00:34:46,480 --> 00:34:50,239
and regularly update an addition

832
00:34:50,239 --> 00:34:53,679
so we have 68 instructions for one round

833
00:34:53,679 --> 00:34:54,560
of

834
00:34:54,560 --> 00:34:57,200
right so as you see it's again way

835
00:34:57,200 --> 00:34:58,480
better than

836
00:34:58,480 --> 00:35:00,400
the linear layer called the form round

837
00:35:00,400 --> 00:35:01,599
of present

838
00:35:01,599 --> 00:35:03,200
and the cold size would be double the

839
00:35:03,200 --> 00:35:06,640
thighs because it's like

840
00:35:06,880 --> 00:35:09,920
a stupid and

841
00:35:09,920 --> 00:35:13,200
if we compare private other ciphers

842
00:35:13,200 --> 00:35:16,800
actually the best one would be

843
00:35:16,800 --> 00:35:20,560
stake here because uh it's also specific

844
00:35:20,560 --> 00:35:23,119
for proper implementation using the same

845
00:35:23,119 --> 00:35:25,200
microcontroller platform

846
00:35:25,200 --> 00:35:27,599
and it follows a different impact

847
00:35:27,599 --> 00:35:28,880
contraction which is

848
00:35:28,880 --> 00:35:32,320
addition rotation xor so in that sense

849
00:35:32,320 --> 00:35:35,440
we are close to that in the

850
00:35:35,440 --> 00:35:38,720
traditional design because substitution

851
00:35:38,720 --> 00:35:40,880
permutation

852
00:35:40,880 --> 00:35:43,920
so this was the specific

853
00:35:43,920 --> 00:35:46,079
cipher like right it was specific for

854
00:35:46,079 --> 00:35:47,520
eight platforms but

855
00:35:47,520 --> 00:35:50,400
uh current work uh and also like from

856
00:35:50,400 --> 00:35:52,079
future directions

857
00:35:52,079 --> 00:35:55,359
that uh involves uh

858
00:35:55,359 --> 00:35:57,760
pivot platform because 8-bit platform is

859
00:35:57,760 --> 00:36:00,079
not very realistic anymore

860
00:36:00,079 --> 00:36:03,839
so nowadays uh i'm i mean

861
00:36:03,839 --> 00:36:06,880
it might be actually looking at

862
00:36:06,880 --> 00:36:10,000
searching for efficient players which

863
00:36:10,000 --> 00:36:12,079
are targeting implementations on

864
00:36:12,079 --> 00:36:16,160
curriculum platform and as open first

865
00:36:16,160 --> 00:36:17,280
platforms are

866
00:36:17,280 --> 00:36:20,320
more attractive especially five uh

867
00:36:20,320 --> 00:36:23,599
read private interaction set is

868
00:36:23,599 --> 00:36:26,480
our target initially uh but of course

869
00:36:26,480 --> 00:36:27,760
32-bit third

870
00:36:27,760 --> 00:36:29,119
is quite difficult even on

871
00:36:29,119 --> 00:36:31,200
reconfigurable hardware so

872
00:36:31,200 --> 00:36:33,440
a good starting point actually to look

873
00:36:33,440 --> 00:36:35,119
for nice mattresses would be

874
00:36:35,119 --> 00:36:38,839
uh maybe looking at what's good

875
00:36:38,839 --> 00:36:41,280
cryptographic which

876
00:36:41,280 --> 00:36:43,359
mattress constructions have good

877
00:36:43,359 --> 00:36:45,200
cryptography characteristic

878
00:36:45,200 --> 00:36:48,640
and start with them for the

879
00:36:48,640 --> 00:36:52,000
search so that you you limit

880
00:36:52,000 --> 00:36:56,960
the space in a meaningful way

881
00:36:56,960 --> 00:37:00,000
so uh that would be all i think

882
00:37:00,000 --> 00:37:03,280
i'm nearly on time so i thank everyone

883
00:37:03,280 --> 00:37:04,240
for the attention

884
00:37:04,240 --> 00:37:08,640
and is there any question or any remark

885
00:37:09,680 --> 00:37:11,920
there are three questions let me read

886
00:37:11,920 --> 00:37:14,640
them out for you

887
00:37:16,160 --> 00:37:19,839
is it that along the main atmega cpu

888
00:37:19,839 --> 00:37:22,640
you used fpga for achieving this

889
00:37:22,640 --> 00:37:24,480
accelerator

890
00:37:24,480 --> 00:37:27,680
actually we used mostly fpga

891
00:37:27,680 --> 00:37:31,040
and so at mega was

892
00:37:31,040 --> 00:37:34,160
the targeted platform so

893
00:37:34,160 --> 00:37:37,440
we did not uh even like put the

894
00:37:37,440 --> 00:37:41,200
implementation on the uh mega chip yeah

895
00:37:41,200 --> 00:37:44,320
it was so we use the

896
00:37:44,320 --> 00:37:47,760
design uh platform for that so we

897
00:37:47,760 --> 00:37:50,800
wrote our assembly code we simulated

898
00:37:50,800 --> 00:37:55,200
we ran we took our numbers but the main

899
00:37:55,200 --> 00:37:57,280
target for the main hardware we really

900
00:37:57,280 --> 00:37:59,119
at hand was actually

901
00:37:59,119 --> 00:38:02,400
fpga vertex

902
00:38:03,040 --> 00:38:06,320
all right uh there's another question uh

903
00:38:06,320 --> 00:38:08,400
in the hardware acceleration platform

904
00:38:08,400 --> 00:38:09,359
you mentioned

905
00:38:09,359 --> 00:38:12,800
asic and fpga what matrix you use to

906
00:38:12,800 --> 00:38:14,560
choose out of these

907
00:38:14,560 --> 00:38:17,680
for example if it's reconfigurable

908
00:38:17,680 --> 00:38:20,960
we do go with fpga any other metric you

909
00:38:20,960 --> 00:38:21,760
look for

910
00:38:21,760 --> 00:38:26,000
and how things differ in case of puff

911
00:38:26,000 --> 00:38:28,640
so um of course i mean it changes

912
00:38:28,640 --> 00:38:30,000
according to design but

913
00:38:30,000 --> 00:38:33,359
let's say they are really uh going for a

914
00:38:33,359 --> 00:38:35,520
low power design

915
00:38:35,520 --> 00:38:38,640
or or if we know that

916
00:38:38,640 --> 00:38:41,280
it's not a search uh architecture or if

917
00:38:41,280 --> 00:38:43,040
the search architecture

918
00:38:43,040 --> 00:38:44,880
if it's you know that it's not gonna

919
00:38:44,880 --> 00:38:47,040
change ac could be actually a better

920
00:38:47,040 --> 00:38:47,760
idea but

921
00:38:47,760 --> 00:38:50,560
it would take a long time to get the

922
00:38:50,560 --> 00:38:52,880
silicon so you have to plan very well

923
00:38:52,880 --> 00:38:53,520
yeah

924
00:38:53,520 --> 00:38:56,960
so generally it would be the cost

925
00:38:56,960 --> 00:38:59,359
it would be the like power and area

926
00:38:59,359 --> 00:39:00,079
budget

927
00:39:00,079 --> 00:39:03,599
and how fixed you want

928
00:39:04,640 --> 00:39:06,400
all right there's one question from

929
00:39:06,400 --> 00:39:08,960
david what was the utilization

930
00:39:08,960 --> 00:39:12,000
uh percentage of vertex six

931
00:39:12,000 --> 00:39:15,359
clbs for the accelerator

932
00:39:15,359 --> 00:39:19,520
it's a very good question uh it was not

933
00:39:19,520 --> 00:39:22,800
so bad so we could actually fit uh

934
00:39:22,800 --> 00:39:24,400
like a few of them i don't remember the

935
00:39:24,400 --> 00:39:26,480
number i need to take the

936
00:39:26,480 --> 00:39:29,440
paper for that uh i can also point you

937
00:39:29,440 --> 00:39:31,040
to that later

938
00:39:31,040 --> 00:39:34,160
uh but we were able to fit like

939
00:39:34,160 --> 00:39:37,359
if i'm not wrong like

940
00:39:37,359 --> 00:39:39,520
two of them and then we also used two

941
00:39:39,520 --> 00:39:41,040
different platforms

942
00:39:41,040 --> 00:39:43,599
go to different vertex board but we were

943
00:39:43,599 --> 00:39:45,599
able to actually fit as much as possible

944
00:39:45,599 --> 00:39:47,599
from this bus the utilization was also

945
00:39:47,599 --> 00:39:48,800
another metric

946
00:39:48,800 --> 00:39:52,000
in order to make the search as fast as

947
00:39:52,000 --> 00:39:52,800
possible

948
00:39:52,800 --> 00:39:56,000
we also tried to make many

949
00:39:56,000 --> 00:40:00,160
third chords uh like

950
00:40:00,160 --> 00:40:02,400
as small as possible so that we fit more

951
00:40:02,400 --> 00:40:03,200
of them

952
00:40:03,200 --> 00:40:06,560
one fpj and then we can uh maybe

953
00:40:06,560 --> 00:40:08,800
run stuff in parallel yeah so this was

954
00:40:08,800 --> 00:40:10,400
one of the metrics

955
00:40:10,400 --> 00:40:14,000
thanks for the question for reminding us

956
00:40:14,000 --> 00:40:15,680
it would be also nice if you could point

957
00:40:15,680 --> 00:40:17,200
us to the paper

958
00:40:17,200 --> 00:40:21,920
link or documentation yeah actually

959
00:40:21,920 --> 00:40:23,920
i don't know i don't know where where is

960
00:40:23,920 --> 00:40:25,119
the best uh

961
00:40:25,119 --> 00:40:28,079
to share this but it would be the the

962
00:40:28,079 --> 00:40:28,720
paper

963
00:40:28,720 --> 00:40:32,480
having all the architecture details is

964
00:40:32,480 --> 00:40:36,880
in a reconfig conference because

965
00:40:36,880 --> 00:40:39,359
focusing on fpgas like configurable

966
00:40:39,359 --> 00:40:40,319
computing

967
00:40:40,319 --> 00:40:43,920
back in 2013 if i'm not wrong

968
00:40:43,920 --> 00:40:47,280
uh the bright cypher paper

969
00:40:47,280 --> 00:40:50,000
is actually taking the results and

970
00:40:50,000 --> 00:40:50,640
presenting

971
00:40:50,640 --> 00:40:54,079
cipher design and how to implement that

972
00:40:54,079 --> 00:40:56,880
but architectural details were given in

973
00:40:56,880 --> 00:40:58,000
that reconvic

974
00:40:58,000 --> 00:41:01,680
reconfig paper in 2013

975
00:41:01,680 --> 00:41:04,800
and if i'm not i mean

976
00:41:04,800 --> 00:41:07,920
if i'm not from probably these details

977
00:41:07,920 --> 00:41:10,800
i haven't uh mentioned anywhere else so

978
00:41:10,800 --> 00:41:12,800
far so this is the

979
00:41:12,800 --> 00:41:14,960
first place i talk about that it's

980
00:41:14,960 --> 00:41:16,640
generally i present pride and the

981
00:41:16,640 --> 00:41:17,839
results but

982
00:41:17,839 --> 00:41:20,640
the architectural details are generally

983
00:41:20,640 --> 00:41:20,960
like

984
00:41:20,960 --> 00:41:24,400
omitted so it was a nice platform to

985
00:41:24,400 --> 00:41:26,560
actually share all these details

986
00:41:26,560 --> 00:41:29,680
and hope it was clear because it's

987
00:41:29,680 --> 00:41:31,760
quite interesting generally for people

988
00:41:31,760 --> 00:41:33,040
to hear like okay

989
00:41:33,040 --> 00:41:35,680
so this is for software implementations

990
00:41:35,680 --> 00:41:37,440
but you're using a hardware platform

991
00:41:37,440 --> 00:41:39,040
you're performing your third so

992
00:41:39,040 --> 00:41:42,319
it's complicated to explain maybe i hope

993
00:41:42,319 --> 00:41:44,640
it was

994
00:41:46,560 --> 00:41:49,040
absolutely it was amazing to have you

995
00:41:49,040 --> 00:41:50,319
present your research

996
00:41:50,319 --> 00:41:54,720
uh and maybe what we could do is uh

997
00:41:54,720 --> 00:41:56,720
over email we could exchange those links

998
00:41:56,720 --> 00:41:58,400
and then when we upload this

999
00:41:58,400 --> 00:42:00,319
webinar on our youtube channel we can in

1000
00:42:00,319 --> 00:42:02,160
the description have the links uh

1001
00:42:02,160 --> 00:42:05,040
reference as well so for people to

1002
00:42:05,040 --> 00:42:07,920
you know read it later yeah but uh thank

1003
00:42:07,920 --> 00:42:10,000
you so much uh elf for this amazing

1004
00:42:10,000 --> 00:42:10,960
presentation

1005
00:42:10,960 --> 00:42:13,440
and thank you all the participants who

1006
00:42:13,440 --> 00:42:15,839
joined us today

1007
00:42:15,839 --> 00:42:18,160
if you have any feedback do let us know

1008
00:42:18,160 --> 00:42:20,319
where our feedback form and

1009
00:42:20,319 --> 00:42:22,880
please give a shout out to our speaker

1010
00:42:22,880 --> 00:42:24,640
for this amazing presentation

1011
00:42:24,640 --> 00:42:27,520
on social media if you like it yeah so

1012
00:42:27,520 --> 00:42:28,960
thank you so much everybody very much

1013
00:42:28,960 --> 00:42:30,160
also for inviting me

1014
00:42:30,160 --> 00:42:32,720
uh everyone for joining and also for the

1015
00:42:32,720 --> 00:42:35,040
questions if there's any feedback i am

1016
00:42:35,040 --> 00:42:38,240
more than happy to answer like offline

1017
00:42:38,240 --> 00:42:38,880
online

1018
00:42:38,880 --> 00:42:42,079
however you like for sure thank you

1019
00:42:42,079 --> 00:42:45,359
for sure uh andrea uh had some technical

1020
00:42:45,359 --> 00:42:47,119
difficulties so she

1021
00:42:47,119 --> 00:42:49,839
had she just disappeared also i'm just

1022
00:42:49,839 --> 00:42:50,560
replacing

1023
00:42:50,560 --> 00:42:54,599
her okay all right thank you so much

1024
00:42:54,599 --> 00:42:57,599
bye

