1
00:00:12,490 --> 00:00:13,599
[Music]

2
00:00:13,599 --> 00:00:14,880
hey everyone

3
00:00:14,880 --> 00:00:17,920
welcome to hardware.io webinar i know

4
00:00:17,920 --> 00:00:20,000
it's a friday evening but thank you so

5
00:00:20,000 --> 00:00:21,520
much for joining us today

6
00:00:21,520 --> 00:00:23,199
i'm sure this webinar is going to be

7
00:00:23,199 --> 00:00:25,599
very insightful for you all

8
00:00:25,599 --> 00:00:28,320
before we start some quick announcement

9
00:00:28,320 --> 00:00:30,240
we have announced our speakers for the

10
00:00:30,240 --> 00:00:32,479
upcoming heartbeat.io conference which

11
00:00:32,479 --> 00:00:33,360
is scheduled

12
00:00:33,360 --> 00:00:36,960
on the first and second of october

13
00:00:36,960 --> 00:00:39,120
i'll be sharing the link in the zoom

14
00:00:39,120 --> 00:00:40,160
chat later

15
00:00:40,160 --> 00:00:42,800
please do join us we have some really

16
00:00:42,800 --> 00:00:45,200
cool new research being presented which

17
00:00:45,200 --> 00:00:46,480
has not been published

18
00:00:46,480 --> 00:00:49,440
before open source hardware design is

19
00:00:49,440 --> 00:00:50,640
growing popularity

20
00:00:50,640 --> 00:00:53,600
and in some cases it's the future of iot

21
00:00:53,600 --> 00:00:54,559
world

22
00:00:54,559 --> 00:00:57,760
today we have dhruv utsuni who is a

23
00:00:57,760 --> 00:00:58,879
hardware designer

24
00:00:58,879 --> 00:01:02,079
and embedded lux developer he's on the

25
00:01:02,079 --> 00:01:02,719
board of

26
00:01:02,719 --> 00:01:05,360
open source hardware association and

27
00:01:05,360 --> 00:01:07,439
beagleboard foundation

28
00:01:07,439 --> 00:01:10,240
dhruv being an ambassador for s5 is

29
00:01:10,240 --> 00:01:11,040
going to talk

30
00:01:11,040 --> 00:01:13,840
to us today about the way forward to

31
00:01:13,840 --> 00:01:15,360
build a more transparent

32
00:01:15,360 --> 00:01:18,799
and trustworthy root of trust chips

33
00:01:18,799 --> 00:01:22,400
and other security projects that benefit

34
00:01:22,400 --> 00:01:26,080
the open source design at chip level for

35
00:01:26,080 --> 00:01:28,159
those who are new to hardware dot

36
00:01:28,159 --> 00:01:31,040
io webinar if you have any questions for

37
00:01:31,040 --> 00:01:32,000
the speaker

38
00:01:32,000 --> 00:01:34,159
please do send it across via the zoom

39
00:01:34,159 --> 00:01:36,479
chat they will be answered

40
00:01:36,479 --> 00:01:39,439
after drew finishes his presentation so

41
00:01:39,439 --> 00:01:41,040
without any further delay

42
00:01:41,040 --> 00:01:44,159
let's welcome drew to present his

43
00:01:44,159 --> 00:01:48,320
session hello to you

44
00:01:48,320 --> 00:01:52,840
yep all right let me share my screen

45
00:01:52,840 --> 00:01:55,840
here

46
00:01:56,719 --> 00:01:58,479
okay you can see the screen perfect

47
00:01:58,479 --> 00:02:01,119
awesome cool let me minimize the

48
00:02:01,119 --> 00:02:03,920
zoom window here um all right yeah so um

49
00:02:03,920 --> 00:02:05,439
my name's drew fastini

50
00:02:05,439 --> 00:02:07,840
um i already had a bit of an intro there

51
00:02:07,840 --> 00:02:08,639
real quick i

52
00:02:08,639 --> 00:02:11,440
pasted this in the chat um so you can

53
00:02:11,440 --> 00:02:12,319
click on it there

54
00:02:12,319 --> 00:02:14,800
if not if you want to take a screenshot

55
00:02:14,800 --> 00:02:16,480
or try and write that down real quick

56
00:02:16,480 --> 00:02:17,200
that's the

57
00:02:17,200 --> 00:02:20,400
tiny url takes you to these their google

58
00:02:20,400 --> 00:02:22,080
slides so you click on that url you'll

59
00:02:22,080 --> 00:02:23,920
be able to pull up the slides because

60
00:02:23,920 --> 00:02:24,640
there's

61
00:02:24,640 --> 00:02:27,200
a various hyperlinks in the slide so

62
00:02:27,200 --> 00:02:28,640
you'll be able to uh

63
00:02:28,640 --> 00:02:30,319
click on all the links as i go through

64
00:02:30,319 --> 00:02:33,200
the presentation

65
00:02:33,200 --> 00:02:34,400
so i already had a bit of an

66
00:02:34,400 --> 00:02:36,239
introduction there but um

67
00:02:36,239 --> 00:02:38,879
just to give a little overview i'm an

68
00:02:38,879 --> 00:02:40,959
open source hardware designer um

69
00:02:40,959 --> 00:02:43,920
for ash park we're a pce manufacturing

70
00:02:43,920 --> 00:02:46,319
service based in the us

71
00:02:46,319 --> 00:02:48,400
also part of the beagleboard org

72
00:02:48,400 --> 00:02:49,599
foundation so

73
00:02:49,599 --> 00:02:50,720
some of you may have heard of the

74
00:02:50,720 --> 00:02:52,640
beaglebone it's a small open source

75
00:02:52,640 --> 00:02:53,360
hardware

76
00:02:53,360 --> 00:02:56,800
linux computer i'm also part of the open

77
00:02:56,800 --> 00:02:58,800
source hardware association

78
00:02:58,800 --> 00:03:01,200
or oshawa and one of the things you

79
00:03:01,200 --> 00:03:02,640
might want to check out is we have a

80
00:03:02,640 --> 00:03:04,560
certification program for open source

81
00:03:04,560 --> 00:03:06,400
hardware so you can go to that url

82
00:03:06,400 --> 00:03:09,280
there and you can fill out just a little

83
00:03:09,280 --> 00:03:10,800
bit of information about your project

84
00:03:10,800 --> 00:03:12,959
like where your documentation is

85
00:03:12,959 --> 00:03:14,800
what your license is and you can get a

86
00:03:14,800 --> 00:03:16,959
little number back that represents uh

87
00:03:16,959 --> 00:03:18,400
that you've been certified

88
00:03:18,400 --> 00:03:20,879
as open source hardware um and i'm also

89
00:03:20,879 --> 00:03:22,080
an ambassador for

90
00:03:22,080 --> 00:03:24,080
um the risk five international which is

91
00:03:24,080 --> 00:03:25,440
a not-for-profit

92
00:03:25,440 --> 00:03:26,959
um you can click on that link there to

93
00:03:26,959 --> 00:03:28,640
find out more about the risk five

94
00:03:28,640 --> 00:03:30,640
ambassadors and also how to

95
00:03:30,640 --> 00:03:33,040
basically it's just people in the ris5

96
00:03:33,040 --> 00:03:34,560
community that are really passionate

97
00:03:34,560 --> 00:03:35,120
about

98
00:03:35,120 --> 00:03:38,000
the technology

99
00:03:38,159 --> 00:03:40,080
so there are a bunch of risk five

100
00:03:40,080 --> 00:03:41,440
meetups around the world

101
00:03:41,440 --> 00:03:44,879
um due to uh the pandemic they're all

102
00:03:44,879 --> 00:03:46,000
virtual right now but

103
00:03:46,000 --> 00:03:47,120
at some point they'll probably start

104
00:03:47,120 --> 00:03:49,120
meeting in person again so the

105
00:03:49,120 --> 00:03:50,959
upside to all being virtual is you can

106
00:03:50,959 --> 00:03:52,640
pretty much attend anyone that you want

107
00:03:52,640 --> 00:03:53,280
to

108
00:03:53,280 --> 00:03:54,560
um so some of the ones that i've

109
00:03:54,560 --> 00:03:56,480
attended so far this year were munich

110
00:03:56,480 --> 00:03:59,120
in bay area so if you click on that link

111
00:03:59,120 --> 00:03:59,519
there

112
00:03:59,519 --> 00:04:02,959
um risk5.org local you'll see there's a

113
00:04:02,959 --> 00:04:04,239
bunch of different ones or you could

114
00:04:04,239 --> 00:04:04,959
just search for

115
00:04:04,959 --> 00:04:08,159
risk5 on meetup.com

116
00:04:08,159 --> 00:04:10,080
and one of the big events that's coming

117
00:04:10,080 --> 00:04:11,680
up is in december

118
00:04:11,680 --> 00:04:14,159
it's the annual risk five summit so this

119
00:04:14,159 --> 00:04:15,360
is like the big

120
00:04:15,360 --> 00:04:18,238
risk five event for the year um you can

121
00:04:18,238 --> 00:04:19,279
get more information is about

122
00:04:19,279 --> 00:04:21,199
registering on there

123
00:04:21,199 --> 00:04:22,720
and because of the pandemic it's gonna

124
00:04:22,720 --> 00:04:24,960
be virtual it was gonna be in california

125
00:04:24,960 --> 00:04:25,520
but now

126
00:04:25,520 --> 00:04:27,919
anyone that wants to can attend it from

127
00:04:27,919 --> 00:04:30,560
around the world

128
00:04:30,880 --> 00:04:33,520
so um talking about risk five um and

129
00:04:33,520 --> 00:04:34,240
risk five

130
00:04:34,240 --> 00:04:36,800
is an instruction set architecture isa

131
00:04:36,800 --> 00:04:37,360
so

132
00:04:37,360 --> 00:04:39,360
um what is that so an isa is the

133
00:04:39,360 --> 00:04:41,440
interface between hardware and software

134
00:04:41,440 --> 00:04:43,840
so for example we have if we have a c

135
00:04:43,840 --> 00:04:46,960
c plus plus program um we

136
00:04:46,960 --> 00:04:49,280
get that compiled into instructions for

137
00:04:49,280 --> 00:04:52,000
the microprocessor or cpu to execute but

138
00:04:52,000 --> 00:04:54,240
how does the c plus plus compiler know

139
00:04:54,240 --> 00:04:56,000
what instructions the cpu will

140
00:04:56,000 --> 00:04:56,800
understand

141
00:04:56,800 --> 00:04:58,639
that's defined by the instruction set

142
00:04:58,639 --> 00:05:01,759
architecture the isa is a standard

143
00:05:01,759 --> 00:05:04,320
our specification so it's a set of rules

144
00:05:04,320 --> 00:05:05,759
that defines the tasks

145
00:05:05,759 --> 00:05:07,520
at a really low level that the processor

146
00:05:07,520 --> 00:05:08,960
can perform

147
00:05:08,960 --> 00:05:11,199
so some isas you've probably heard of or

148
00:05:11,199 --> 00:05:12,160
x86

149
00:05:12,160 --> 00:05:16,320
which intel and amd use or arm

150
00:05:16,320 --> 00:05:18,240
so you're probably familiar with these

151
00:05:18,240 --> 00:05:20,160
different isas

152
00:05:20,160 --> 00:05:22,960
but both of those require commercial

153
00:05:22,960 --> 00:05:25,039
licensing so if you want to use them

154
00:05:25,039 --> 00:05:27,680
you need to um get a license from one of

155
00:05:27,680 --> 00:05:29,600
those companies to use it

156
00:05:29,600 --> 00:05:32,880
and that can be kind of complicated and

157
00:05:32,880 --> 00:05:37,120
expensive so risk 5 is a free and open

158
00:05:37,120 --> 00:05:40,880
isa it started about 10 years ago

159
00:05:40,880 --> 00:05:43,759
a group of computer researchers computer

160
00:05:43,759 --> 00:05:46,800
architecture researchers at uc berkeley

161
00:05:46,800 --> 00:05:49,680
were doing research into new types of

162
00:05:49,680 --> 00:05:51,919
computer architecture and accelerators

163
00:05:51,919 --> 00:05:53,280
and they wanted to have an instruction

164
00:05:53,280 --> 00:05:55,600
set to base their research around

165
00:05:55,600 --> 00:05:57,280
and they didn't want to go through the

166
00:05:57,280 --> 00:05:58,880
cost in in

167
00:05:58,880 --> 00:06:00,639
length that it takes to to get a

168
00:06:00,639 --> 00:06:03,039
commercial isa license like arm or

169
00:06:03,039 --> 00:06:04,479
something like that so they decided to

170
00:06:04,479 --> 00:06:05,039
just

171
00:06:05,039 --> 00:06:08,319
do their own design uh if you want to

172
00:06:08,319 --> 00:06:09,039
learn out like

173
00:06:09,039 --> 00:06:10,800
more about the history and some of the

174
00:06:10,800 --> 00:06:12,960
more details about behind

175
00:06:12,960 --> 00:06:15,360
the risk five instruction set um kirst

176
00:06:15,360 --> 00:06:16,400
asanovich is

177
00:06:16,400 --> 00:06:18,880
the professor that started the project

178
00:06:18,880 --> 00:06:19,440
um

179
00:06:19,440 --> 00:06:21,280
in every year he gives the state of the

180
00:06:21,280 --> 00:06:23,120
union so there's a link to the most

181
00:06:23,120 --> 00:06:24,479
recent one in there

182
00:06:24,479 --> 00:06:26,560
um and i've talked about risk five a

183
00:06:26,560 --> 00:06:27,520
couple times and

184
00:06:27,520 --> 00:06:29,360
in other times i get the question what's

185
00:06:29,360 --> 00:06:31,120
the five so real quick first

186
00:06:31,120 --> 00:06:33,280
the risk means reduced instruction set

187
00:06:33,280 --> 00:06:34,479
computer

188
00:06:34,479 --> 00:06:35,840
that just means that the the

189
00:06:35,840 --> 00:06:38,000
instructions that the processor executes

190
00:06:38,000 --> 00:06:38,319
are

191
00:06:38,319 --> 00:06:40,960
relatively simple um that we push the

192
00:06:40,960 --> 00:06:43,199
complexity into the compiler

193
00:06:43,199 --> 00:06:46,560
the most commonly uh well-known opposite

194
00:06:46,560 --> 00:06:48,160
to that which is complex instructions

195
00:06:48,160 --> 00:06:49,440
for computer is what

196
00:06:49,440 --> 00:06:52,560
uh the x86 instruction set is so um

197
00:06:52,560 --> 00:06:54,560
not really super relevant these days but

198
00:06:54,560 --> 00:06:56,960
um that is what risk stands for

199
00:06:56,960 --> 00:06:59,360
and then the v is actually a five from a

200
00:06:59,360 --> 00:07:00,080
numeral

201
00:07:00,080 --> 00:07:02,240
because it's the fifth risk instruction

202
00:07:02,240 --> 00:07:03,199
set um

203
00:07:03,199 --> 00:07:05,759
to come out of uc berkeley um and then

204
00:07:05,759 --> 00:07:07,360
why do i say it's free and open

205
00:07:07,360 --> 00:07:09,440
that's because the specification is

206
00:07:09,440 --> 00:07:11,120
actually licensed under a creative

207
00:07:11,120 --> 00:07:12,479
commons attribution

208
00:07:12,479 --> 00:07:14,960
um international license which means

209
00:07:14,960 --> 00:07:16,560
that anyone that wants to

210
00:07:16,560 --> 00:07:18,639
can download this specification and use

211
00:07:18,639 --> 00:07:20,800
it

212
00:07:21,280 --> 00:07:22,880
so what's different about risk five it's

213
00:07:22,880 --> 00:07:24,960
not the first open

214
00:07:24,960 --> 00:07:26,880
instruction set um there's other ones

215
00:07:26,880 --> 00:07:28,720
such as open risk and

216
00:07:28,720 --> 00:07:32,000
other ones before that um but what what

217
00:07:32,000 --> 00:07:33,520
makes kind of risk fights special

218
00:07:33,520 --> 00:07:35,599
and why is it seen this large growth

219
00:07:35,599 --> 00:07:38,160
over the last uh several years

220
00:07:38,160 --> 00:07:40,800
to start off it's simple um it if you

221
00:07:40,800 --> 00:07:42,319
compare it to something like

222
00:07:42,319 --> 00:07:46,319
x86 x86 has this massive amount of um

223
00:07:46,319 --> 00:07:49,599
uh legacy instructions in there um

224
00:07:49,599 --> 00:07:51,680
so it's you know i've heard the people

225
00:07:51,680 --> 00:07:53,599
joke like no one person actually knows

226
00:07:53,599 --> 00:07:54,160
all the

227
00:07:54,160 --> 00:07:57,120
x86 instructions so um it's really

228
00:07:57,120 --> 00:07:58,080
complicated and

229
00:07:58,080 --> 00:08:00,800
complex um so if you're wanting to do um

230
00:08:00,800 --> 00:08:01,280
like

231
00:08:01,280 --> 00:08:03,199
specific research into processor design

232
00:08:03,199 --> 00:08:04,639
you don't need all that

233
00:08:04,639 --> 00:08:07,680
overhead of a legacy instruction set

234
00:08:07,680 --> 00:08:10,560
um and you know this is the fifth

235
00:08:10,560 --> 00:08:12,080
instruction set out of berkeley

236
00:08:12,080 --> 00:08:14,800
and they took the insights that they'd

237
00:08:14,800 --> 00:08:16,319
gained from the previous generations

238
00:08:16,319 --> 00:08:18,319
over the decades and

239
00:08:18,319 --> 00:08:21,280
took that to do a clean design so they

240
00:08:21,280 --> 00:08:23,039
didn't have to worry about any sort of

241
00:08:23,039 --> 00:08:26,000
legacy support so they just did a clean

242
00:08:26,000 --> 00:08:26,479
and a

243
00:08:26,479 --> 00:08:30,080
clean separation between um the

244
00:08:30,080 --> 00:08:32,880
privileged and unprivileged isa um and

245
00:08:32,880 --> 00:08:34,240
the other important thing that they did

246
00:08:34,240 --> 00:08:34,799
was

247
00:08:34,799 --> 00:08:37,599
it's just about the instruction set it's

248
00:08:37,599 --> 00:08:40,000
not defining micro architecture

249
00:08:40,000 --> 00:08:43,120
or specific technology so uh

250
00:08:43,120 --> 00:08:45,200
take that out of the specification of

251
00:08:45,200 --> 00:08:46,959
the instructions that means that as

252
00:08:46,959 --> 00:08:48,080
micro architectures

253
00:08:48,080 --> 00:08:51,120
change and technology change um that's

254
00:08:51,120 --> 00:08:51,600
not

255
00:08:51,600 --> 00:08:55,120
entwined into the instruction set itself

256
00:08:55,120 --> 00:08:56,880
so one of the ways is it does this is by

257
00:08:56,880 --> 00:08:58,160
being extensible

258
00:08:58,160 --> 00:09:02,080
um through extensions to the instruction

259
00:09:02,080 --> 00:09:03,279
set

260
00:09:03,279 --> 00:09:05,760
so the idea here is it goes from

261
00:09:05,760 --> 00:09:08,000
everything from like small 32-bit um

262
00:09:08,000 --> 00:09:09,920
processors all the way up to

263
00:09:09,920 --> 00:09:13,360
64-bit or 128-bit um processors in the

264
00:09:13,360 --> 00:09:14,320
future

265
00:09:14,320 --> 00:09:18,160
um but a key thing here is that the

266
00:09:18,160 --> 00:09:21,360
stable base isas are frozen so if you

267
00:09:21,360 --> 00:09:22,320
write a

268
00:09:22,320 --> 00:09:24,800
um base if you write a program for the

269
00:09:24,800 --> 00:09:26,959
base 32-bit instruction set

270
00:09:26,959 --> 00:09:29,360
um it'll still work on whatever fancy

271
00:09:29,360 --> 00:09:31,519
risk 5 supercomputer there is like 30

272
00:09:31,519 --> 00:09:33,600
years from now

273
00:09:33,600 --> 00:09:35,760
and then additional features are added

274
00:09:35,760 --> 00:09:37,519
through optional extensions

275
00:09:37,519 --> 00:09:39,760
um but it's not changing the original

276
00:09:39,760 --> 00:09:41,600
base so we aren't going to end up with

277
00:09:41,600 --> 00:09:42,959
like you know

278
00:09:42,959 --> 00:09:46,480
risk risk five b and c

279
00:09:46,480 --> 00:09:49,120
um the the base stays the same but then

280
00:09:49,120 --> 00:09:50,720
there's extensions that go along with

281
00:09:50,720 --> 00:09:51,760
that

282
00:09:51,760 --> 00:09:53,120
and the other important thing here is

283
00:09:53,120 --> 00:09:54,880
that it's community design so

284
00:09:54,880 --> 00:09:57,120
um well i started at berkeley there's

285
00:09:57,120 --> 00:09:59,120
now people from many other universities

286
00:09:59,120 --> 00:09:59,360
and

287
00:09:59,360 --> 00:10:01,839
in different companies and people from

288
00:10:01,839 --> 00:10:03,120
different organizations around the world

289
00:10:03,120 --> 00:10:04,160
that are all

290
00:10:04,160 --> 00:10:07,440
involved now if you want to learn more

291
00:10:07,440 --> 00:10:08,480
about risk five

292
00:10:08,480 --> 00:10:10,079
um like the instruction said and all the

293
00:10:10,079 --> 00:10:11,279
details because there's all these

294
00:10:11,279 --> 00:10:12,640
different extensions

295
00:10:12,640 --> 00:10:14,320
um this is a really great way to get up

296
00:10:14,320 --> 00:10:16,079
to speed the book's only about like 100

297
00:10:16,079 --> 00:10:17,680
pages so you can get through it um

298
00:10:17,680 --> 00:10:18,000
pretty

299
00:10:18,000 --> 00:10:20,480
quick um if you go to that url there

300
00:10:20,480 --> 00:10:22,000
risk five book.com

301
00:10:22,000 --> 00:10:23,760
um there's different translations into

302
00:10:23,760 --> 00:10:26,959
different languages as well

303
00:10:26,959 --> 00:10:29,760
so risk finding industry is probably so

304
00:10:29,760 --> 00:10:30,480
industry

305
00:10:30,480 --> 00:10:31,920
um is where we've seen kind of the

306
00:10:31,920 --> 00:10:33,440
biggest growth with risk five over the

307
00:10:33,440 --> 00:10:34,399
last few years

308
00:10:34,399 --> 00:10:37,040
a lot of companies are embracing it um

309
00:10:37,040 --> 00:10:37,519
and

310
00:10:37,519 --> 00:10:39,040
i was talking about how it's modular and

311
00:10:39,040 --> 00:10:41,360
extensible so the idea here is that it's

312
00:10:41,360 --> 00:10:42,880
the one instruction set that you'll need

313
00:10:42,880 --> 00:10:44,880
for everything from a microcontroller to

314
00:10:44,880 --> 00:10:46,160
a super computer

315
00:10:46,160 --> 00:10:48,079
um and as i was saying the base

316
00:10:48,079 --> 00:10:49,200
instruction sets

317
00:10:49,200 --> 00:10:51,680
um are defined for 32-bit 64-bit and

318
00:10:51,680 --> 00:10:54,160
even 128-bit

319
00:10:54,160 --> 00:10:55,600
um which seems kind of a little bit

320
00:10:55,600 --> 00:10:57,279
silly now but

321
00:10:57,279 --> 00:10:59,680
um we're looking at potentially having

322
00:10:59,680 --> 00:11:01,360
massive amounts of persistent storage

323
00:11:01,360 --> 00:11:03,519
that's bite addressable in the future

324
00:11:03,519 --> 00:11:06,240
um also 128-bit might be useful for

325
00:11:06,240 --> 00:11:07,760
certain security research

326
00:11:07,760 --> 00:11:09,839
where we use higher bits in the address

327
00:11:09,839 --> 00:11:12,000
space to encode different security

328
00:11:12,000 --> 00:11:13,040
properties

329
00:11:13,040 --> 00:11:14,800
um and then there's extensions for

330
00:11:14,800 --> 00:11:16,560
everything from small embedded

331
00:11:16,560 --> 00:11:17,920
processors that are low power

332
00:11:17,920 --> 00:11:20,000
all the way up to like super computers

333
00:11:20,000 --> 00:11:22,560
with this new vector

334
00:11:22,560 --> 00:11:24,079
extension that's going to make it much

335
00:11:24,079 --> 00:11:25,760
more efficient to do higher end

336
00:11:25,760 --> 00:11:27,680
calculations

337
00:11:27,680 --> 00:11:29,200
and while it was started at berkeley

338
00:11:29,200 --> 00:11:30,880
it's now controlled by an organization

339
00:11:30,880 --> 00:11:31,200
called

340
00:11:31,200 --> 00:11:33,279
risk five international which is a

341
00:11:33,279 --> 00:11:34,640
nonprofit organization

342
00:11:34,640 --> 00:11:37,279
and there's over 690 members it's always

343
00:11:37,279 --> 00:11:39,760
growing right now from 50 countries

344
00:11:39,760 --> 00:11:41,519
so this is different companies

345
00:11:41,519 --> 00:11:43,360
universities and other types of

346
00:11:43,360 --> 00:11:44,560
organizations

347
00:11:44,560 --> 00:11:47,120
and also individuals so if you want to

348
00:11:47,120 --> 00:11:47,600
um

349
00:11:47,600 --> 00:11:49,600
you can join risk live international as

350
00:11:49,600 --> 00:11:51,680
an individual for free of cost

351
00:11:51,680 --> 00:11:53,600
and nonprofits can also join free of

352
00:11:53,600 --> 00:11:55,519
cost and if you're a

353
00:11:55,519 --> 00:11:57,440
corporation there's different levels of

354
00:11:57,440 --> 00:11:58,720
of membership

355
00:11:58,720 --> 00:12:00,399
um one of the ways i've learned a lot

356
00:12:00,399 --> 00:12:02,079
about risk five over over the last

357
00:12:02,079 --> 00:12:02,880
couple years

358
00:12:02,880 --> 00:12:04,959
is from their youtube channel um they

359
00:12:04,959 --> 00:12:06,399
have um

360
00:12:06,399 --> 00:12:08,240
all the talks from previous events like

361
00:12:08,240 --> 00:12:10,240
the risk five summit so there's a lot of

362
00:12:10,240 --> 00:12:11,600
a lot of great talks in there that you

363
00:12:11,600 --> 00:12:13,760
can learn more

364
00:12:13,760 --> 00:12:16,480
so one of the things i'm quite excited

365
00:12:16,480 --> 00:12:18,480
about is companies are going to be

366
00:12:18,480 --> 00:12:20,079
shipping devices

367
00:12:20,079 --> 00:12:22,560
with risk 5 cores in them so nvidia

368
00:12:22,560 --> 00:12:24,160
actually already is shipping

369
00:12:24,160 --> 00:12:27,360
risk five cores in their gpus um

370
00:12:27,360 --> 00:12:30,480
now it's not doing the um graphics part

371
00:12:30,480 --> 00:12:31,920
but it's in there for doing things like

372
00:12:31,920 --> 00:12:33,360
system management

373
00:12:33,360 --> 00:12:35,680
um so they already are shipping risk

374
00:12:35,680 --> 00:12:36,480
cores and

375
00:12:36,480 --> 00:12:39,120
products in western digital um is

376
00:12:39,120 --> 00:12:40,399
planning to roll out

377
00:12:40,399 --> 00:12:42,560
um risk 5 controllers and all of its

378
00:12:42,560 --> 00:12:43,600
storage project

379
00:12:43,600 --> 00:12:46,480
products so there'll be millions of

380
00:12:46,480 --> 00:12:47,920
western digital project

381
00:12:47,920 --> 00:12:52,079
products with risk 5 cores in them soon

382
00:12:52,079 --> 00:12:53,279
one of the reasons companies are

383
00:12:53,279 --> 00:12:55,360
interested in risk five is

384
00:12:55,360 --> 00:12:57,680
it allows them to avoid the licensing

385
00:12:57,680 --> 00:13:00,320
fees and realty fees that

386
00:13:00,320 --> 00:13:02,000
they have to pay when it comes to a

387
00:13:02,000 --> 00:13:05,600
proprietary instruction set like arm

388
00:13:05,600 --> 00:13:07,920
you know in addition to just the the

389
00:13:07,920 --> 00:13:09,920
licensing fees there's also legal costs

390
00:13:09,920 --> 00:13:10,480
and also

391
00:13:10,480 --> 00:13:12,639
long delays it takes quite a long time

392
00:13:12,639 --> 00:13:14,639
to to do these licensing agreements with

393
00:13:14,639 --> 00:13:16,240
companies like arms so

394
00:13:16,240 --> 00:13:19,120
um it adds more delay into the process

395
00:13:19,120 --> 00:13:19,519
so

396
00:13:19,519 --> 00:13:22,160
risk 5 is an alternative where you don't

397
00:13:22,160 --> 00:13:22,800
have to

398
00:13:22,800 --> 00:13:25,200
have the cost or the delays due to all

399
00:13:25,200 --> 00:13:26,480
that

400
00:13:26,480 --> 00:13:29,279
licensing agreements it also gives you

401
00:13:29,279 --> 00:13:30,720
the freedom to choose how you want to

402
00:13:30,720 --> 00:13:32,959
implement the instruction set so risk 5

403
00:13:32,959 --> 00:13:33,519
is just

404
00:13:33,519 --> 00:13:36,160
an instruction set um but how you

405
00:13:36,160 --> 00:13:38,000
implement a processor that runs those

406
00:13:38,000 --> 00:13:38,720
instructions

407
00:13:38,720 --> 00:13:41,199
is up to you so that's the micro

408
00:13:41,199 --> 00:13:42,880
architecture implementation

409
00:13:42,880 --> 00:13:44,240
when it comes to arm only a few

410
00:13:44,240 --> 00:13:46,639
companies like apple and samsung and

411
00:13:46,639 --> 00:13:49,600
qualcomm have arm architecture licenses

412
00:13:49,600 --> 00:13:51,279
that allow them to do their own custom

413
00:13:51,279 --> 00:13:52,880
implementation otherwise everyone else

414
00:13:52,880 --> 00:13:55,519
is just licensing the same armed cores

415
00:13:55,519 --> 00:13:58,639
that all of their competitors are

416
00:13:58,639 --> 00:14:00,399
and in addition to being able to

417
00:14:00,399 --> 00:14:02,000
implement your own microarchitecture

418
00:14:02,000 --> 00:14:04,079
there's already several open source

419
00:14:04,079 --> 00:14:05,760
implementations of risc-5

420
00:14:05,760 --> 00:14:08,880
processors that you can use so from

421
00:14:08,880 --> 00:14:11,920
berkeley to eta zurich

422
00:14:11,920 --> 00:14:14,320
has some very popular ones and also

423
00:14:14,320 --> 00:14:15,440
western digital has

424
00:14:15,440 --> 00:14:18,079
open sourced up their cores as well so

425
00:14:18,079 --> 00:14:18,560
there's

426
00:14:18,560 --> 00:14:21,120
a large number of uh open source

427
00:14:21,120 --> 00:14:23,040
implementations that um

428
00:14:23,040 --> 00:14:26,079
companies can use um and probably one of

429
00:14:26,079 --> 00:14:27,600
the most important things here

430
00:14:27,600 --> 00:14:30,720
is that risk 5 has a critical mass of

431
00:14:30,720 --> 00:14:32,639
software support now

432
00:14:32,639 --> 00:14:34,880
one of the biggest drawbacks to

433
00:14:34,880 --> 00:14:36,480
introducing a new instruction set is

434
00:14:36,480 --> 00:14:38,320
that you need to have support in all the

435
00:14:38,320 --> 00:14:39,839
software that you care about

436
00:14:39,839 --> 00:14:44,079
um so linux and freebsd supports it

437
00:14:44,079 --> 00:14:47,920
gcc glibc um llvm

438
00:14:47,920 --> 00:14:51,680
clang free rtos zephyr which is another

439
00:14:51,680 --> 00:14:52,959
real-time operating system for

440
00:14:52,959 --> 00:14:55,839
microcontrollers and also qemu so you

441
00:14:55,839 --> 00:14:56,240
can

442
00:14:56,240 --> 00:14:58,000
actually simulate all of this if you

443
00:14:58,000 --> 00:15:00,639
don't have hardware yet

444
00:15:00,639 --> 00:15:02,560
if you want to find out the latest of

445
00:15:02,560 --> 00:15:04,160
whatever programming language or

446
00:15:04,160 --> 00:15:04,800
whatever

447
00:15:04,800 --> 00:15:06,320
certain piece of software and if it's

448
00:15:06,320 --> 00:15:07,920
supported on risk 5

449
00:15:07,920 --> 00:15:09,920
you can click on that link there and it

450
00:15:09,920 --> 00:15:11,760
takes you to on

451
00:15:11,760 --> 00:15:13,920
the risk 5 github account they have a

452
00:15:13,920 --> 00:15:15,600
list that they keep of all the current

453
00:15:15,600 --> 00:15:18,480
software support

454
00:15:18,800 --> 00:15:20,639
another important things with verse 5 is

455
00:15:20,639 --> 00:15:22,560
is that it's being embraced um you know

456
00:15:22,560 --> 00:15:23,680
not just in

457
00:15:23,680 --> 00:15:25,440
the us or in europe but it's being

458
00:15:25,440 --> 00:15:28,000
embraced all around the world

459
00:15:28,000 --> 00:15:30,560
and earlier this year so originally

460
00:15:30,560 --> 00:15:32,639
there was the ris v foundation

461
00:15:32,639 --> 00:15:34,880
so it moved from berkeley to the risk

462
00:15:34,880 --> 00:15:36,320
fight foundation but there is five

463
00:15:36,320 --> 00:15:38,320
foundations based in the u.s

464
00:15:38,320 --> 00:15:41,440
there was some concerns around u.s

465
00:15:41,440 --> 00:15:43,120
politics and how that would impact some

466
00:15:43,120 --> 00:15:44,800
of the international members of

467
00:15:44,800 --> 00:15:47,279
of the foundation so earlier this year

468
00:15:47,279 --> 00:15:48,720
they moved it to switzerland

469
00:15:48,720 --> 00:15:50,240
and it's now called the risk five

470
00:15:50,240 --> 00:15:51,839
international so

471
00:15:51,839 --> 00:15:53,519
same idea as the race five foundation

472
00:15:53,519 --> 00:15:54,959
has just been reincorporated in

473
00:15:54,959 --> 00:15:57,040
switzerland to remove any sort of

474
00:15:57,040 --> 00:15:59,839
political issues another thing that's

475
00:15:59,839 --> 00:16:01,600
important to note about risk 5 is

476
00:16:01,600 --> 00:16:02,160
there's

477
00:16:02,160 --> 00:16:06,320
several countries or nations like india

478
00:16:06,320 --> 00:16:08,399
that have decided that they're going to

479
00:16:08,399 --> 00:16:11,040
have initiatives to build um processors

480
00:16:11,040 --> 00:16:12,079
based on risk five

481
00:16:12,079 --> 00:16:14,720
um in their in their nation um and i

482
00:16:14,720 --> 00:16:16,000
think there's a desire here

483
00:16:16,000 --> 00:16:19,519
um for countries to have sovereign

484
00:16:19,519 --> 00:16:22,160
control over their technology um

485
00:16:22,160 --> 00:16:24,480
you know in have processor that is

486
00:16:24,480 --> 00:16:25,680
they're designed

487
00:16:25,680 --> 00:16:28,560
uh domestically and manufactured

488
00:16:28,560 --> 00:16:30,320
domestically

489
00:16:30,320 --> 00:16:33,600
and then another big place where there's

490
00:16:33,600 --> 00:16:34,639
a lot of interest

491
00:16:34,639 --> 00:16:38,000
in risk five is china and i think one of

492
00:16:38,000 --> 00:16:42,079
the big motivations here is is last year

493
00:16:42,160 --> 00:16:43,759
u.s companies were barred from doing

494
00:16:43,759 --> 00:16:47,199
business with huawei which is a huge

495
00:16:47,199 --> 00:16:50,560
producer of technology equipment

496
00:16:50,560 --> 00:16:53,600
um in china and

497
00:16:53,600 --> 00:16:55,199
you know that's that's a big problem for

498
00:16:55,199 --> 00:16:57,680
them so they're highly motivated to seek

499
00:16:57,680 --> 00:16:59,120
out their own solutions

500
00:16:59,120 --> 00:17:01,120
and risk 5 gives them a good foundation

501
00:17:01,120 --> 00:17:02,160
to

502
00:17:02,160 --> 00:17:05,039
start designing their own ships around

503
00:17:05,039 --> 00:17:07,119
ultimately arm was deemed that they were

504
00:17:07,119 --> 00:17:09,280
uk based so they could continue doing

505
00:17:09,280 --> 00:17:11,359
a business in huawei but how long will

506
00:17:11,359 --> 00:17:12,799
that last so i think

507
00:17:12,799 --> 00:17:15,919
if you look at um companies in china you

508
00:17:15,919 --> 00:17:17,280
know it's very much in their interest

509
00:17:17,280 --> 00:17:18,160
for them to

510
00:17:18,160 --> 00:17:20,799
develop their own uh implementations uh

511
00:17:20,799 --> 00:17:22,319
based around an open

512
00:17:22,319 --> 00:17:26,319
uh i say like risk five

513
00:17:26,959 --> 00:17:28,960
so sometimes i see people just

514
00:17:28,960 --> 00:17:31,039
conflating risk fi with open source and

515
00:17:31,039 --> 00:17:32,000
i think it's important

516
00:17:32,000 --> 00:17:34,160
to make kind of a distinction here so

517
00:17:34,160 --> 00:17:36,200
risk 5 itself is just a set of

518
00:17:36,200 --> 00:17:40,000
specifications a set of instruction set

519
00:17:40,000 --> 00:17:41,919
specifications that's published in an

520
00:17:41,919 --> 00:17:44,160
open source license

521
00:17:44,160 --> 00:17:46,240
but the risk five implementations

522
00:17:46,240 --> 00:17:47,679
themselves so like the

523
00:17:47,679 --> 00:17:49,840
processors that implement the risk five

524
00:17:49,840 --> 00:17:51,039
instruction set

525
00:17:51,039 --> 00:17:52,480
they could be open source or they could

526
00:17:52,480 --> 00:17:54,400
be proprietary there's there's both out

527
00:17:54,400 --> 00:17:55,039
there

528
00:17:55,039 --> 00:17:58,960
um so you know if it says risk five

529
00:17:58,960 --> 00:18:01,039
doesn't just mean as open source

530
00:18:01,039 --> 00:18:02,400
you know you kind of have to look into

531
00:18:02,400 --> 00:18:04,080
it a little more detailed

532
00:18:04,080 --> 00:18:06,480
but one important thing to note is we

533
00:18:06,480 --> 00:18:08,080
need open specifications

534
00:18:08,080 --> 00:18:09,840
in order to have open source

535
00:18:09,840 --> 00:18:11,760
implementations so

536
00:18:11,760 --> 00:18:14,080
while risk 5 doesn't mean open source we

537
00:18:14,080 --> 00:18:16,000
can't have open source chips without an

538
00:18:16,000 --> 00:18:17,840
open isa

539
00:18:17,840 --> 00:18:20,400
so you can't go and make an open source

540
00:18:20,400 --> 00:18:22,960
processor based on intel or arm because

541
00:18:22,960 --> 00:18:24,799
those are proprietary instruction sets

542
00:18:24,799 --> 00:18:26,840
and you wouldn't be allowed to do that

543
00:18:26,840 --> 00:18:29,200
legally

544
00:18:29,200 --> 00:18:30,400
so the risk five international

545
00:18:30,400 --> 00:18:32,640
organization which is the non-profit

546
00:18:32,640 --> 00:18:33,360
that that

547
00:18:33,360 --> 00:18:36,000
governs the specs they do have a

548
00:18:36,000 --> 00:18:38,000
security standing committee

549
00:18:38,000 --> 00:18:40,880
that was set up i think two years ago i

550
00:18:40,880 --> 00:18:42,160
think around the time of

551
00:18:42,160 --> 00:18:44,160
spectre and meltdown and there's

552
00:18:44,160 --> 00:18:45,600
currently two working groups that are

553
00:18:45,600 --> 00:18:47,840
working on extensions to the instruction

554
00:18:47,840 --> 00:18:48,480
set

555
00:18:48,480 --> 00:18:50,960
um so one is cryptographic extension so

556
00:18:50,960 --> 00:18:52,240
the idea here is

557
00:18:52,240 --> 00:18:54,480
um implementing the the common

558
00:18:54,480 --> 00:18:56,240
operations that you need for

559
00:18:56,240 --> 00:18:58,480
various cryptographic routines in

560
00:18:58,480 --> 00:18:59,520
hardware

561
00:18:59,520 --> 00:19:01,520
and then also the trusted execution

562
00:19:01,520 --> 00:19:02,799
environment so

563
00:19:02,799 --> 00:19:04,960
that this idea of like an enclave which

564
00:19:04,960 --> 00:19:06,799
is inside of the processor that allows

565
00:19:06,799 --> 00:19:07,600
you to hold

566
00:19:07,600 --> 00:19:10,160
certain sensitive information um so

567
00:19:10,160 --> 00:19:11,039
these are both

568
00:19:11,039 --> 00:19:14,080
working on creating specs specifications

569
00:19:14,080 --> 00:19:15,760
for extensions to the isa

570
00:19:15,760 --> 00:19:17,280
now that's just the specification it's

571
00:19:17,280 --> 00:19:19,200
not the implementation so there are

572
00:19:19,200 --> 00:19:21,200
um other projects that are working on

573
00:19:21,200 --> 00:19:22,400
implementing those

574
00:19:22,400 --> 00:19:25,840
extensions as well

575
00:19:25,840 --> 00:19:29,200
so one concrete example i wanted to give

576
00:19:29,200 --> 00:19:32,240
is there is interest right now in doing

577
00:19:32,240 --> 00:19:33,280
security research

578
00:19:33,280 --> 00:19:36,240
into how to mitigate timing attacks so

579
00:19:36,240 --> 00:19:36,720
like

580
00:19:36,720 --> 00:19:38,400
with spectre i think it was two years

581
00:19:38,400 --> 00:19:41,600
ago um with with intel processors having

582
00:19:41,600 --> 00:19:42,320
the

583
00:19:42,320 --> 00:19:45,360
uh the issue of branch prediction uh

584
00:19:45,360 --> 00:19:48,480
and being able to leak out information

585
00:19:48,480 --> 00:19:49,200
that

586
00:19:49,200 --> 00:19:51,600
you shouldn't have access to um has

587
00:19:51,600 --> 00:19:53,280
become a big problem so

588
00:19:53,280 --> 00:19:56,320
at berkeley um they one of the things

589
00:19:56,320 --> 00:19:58,080
that they created was called boom which

590
00:19:58,080 --> 00:19:59,679
was berkeley out of order machine so

591
00:19:59,679 --> 00:20:01,919
this is an implementation of a risk five

592
00:20:01,919 --> 00:20:03,120
processor

593
00:20:03,120 --> 00:20:05,760
um and this is a recent paper that they

594
00:20:05,760 --> 00:20:07,760
wrote about their latest generation

595
00:20:07,760 --> 00:20:09,440
they talk about how the deployment of

596
00:20:09,440 --> 00:20:11,360
high performance super scalar out of

597
00:20:11,360 --> 00:20:12,480
order cores

598
00:20:12,480 --> 00:20:14,240
um which are the things that are

599
00:20:14,240 --> 00:20:16,240
susceptible to these timing attacks

600
00:20:16,240 --> 00:20:18,240
has expanded a lot so it's not just

601
00:20:18,240 --> 00:20:20,240
high-end servers and

602
00:20:20,240 --> 00:20:22,480
desktops that's in mobile devices and

603
00:20:22,480 --> 00:20:24,880
edge devices as well

604
00:20:24,880 --> 00:20:28,159
so the concern over these

605
00:20:28,159 --> 00:20:30,159
micro architecture timing attacks you

606
00:20:30,159 --> 00:20:32,320
know has increased a lot like

607
00:20:32,320 --> 00:20:34,000
you hear probably every every couple

608
00:20:34,000 --> 00:20:35,760
weeks there's a new paper on some sort

609
00:20:35,760 --> 00:20:36,960
of um you know

610
00:20:36,960 --> 00:20:39,760
timing attack uh so one of the

611
00:20:39,760 --> 00:20:40,720
advantages

612
00:20:40,720 --> 00:20:42,640
that comes about from open source

613
00:20:42,640 --> 00:20:44,640
hardware is that we can implement these

614
00:20:44,640 --> 00:20:48,400
sorts of cores um and then study them uh

615
00:20:48,400 --> 00:20:50,080
you know this would be very difficult to

616
00:20:50,080 --> 00:20:52,960
do um with a proprietary isa you know

617
00:20:52,960 --> 00:20:53,600
you wouldn't

618
00:20:53,600 --> 00:20:55,039
you wouldn't be able to probably share

619
00:20:55,039 --> 00:20:56,880
all the details of it so

620
00:20:56,880 --> 00:20:58,880
by having the open instruction set

621
00:20:58,880 --> 00:21:00,960
allows allows these researchers to

622
00:21:00,960 --> 00:21:03,520
to do research into how to hopefully

623
00:21:03,520 --> 00:21:04,159
mitigate

624
00:21:04,159 --> 00:21:05,679
and study and mitigate some of these

625
00:21:05,679 --> 00:21:08,400
timing attacks

626
00:21:09,280 --> 00:21:11,120
another project that's done in some

627
00:21:11,120 --> 00:21:13,039
headlines is open titan so

628
00:21:13,039 --> 00:21:15,520
this is called a silicon root of trust

629
00:21:15,520 --> 00:21:16,799
or rot

630
00:21:16,799 --> 00:21:18,960
um some of you may have heard of titan

631
00:21:18,960 --> 00:21:20,159
which is

632
00:21:20,159 --> 00:21:23,039
a chip that google makes for some of

633
00:21:23,039 --> 00:21:24,080
their um

634
00:21:24,080 --> 00:21:26,320
products and servers that helps with

635
00:21:26,320 --> 00:21:28,559
some security aspects so this is kind of

636
00:21:28,559 --> 00:21:31,120
a attempt to take that and then build

637
00:21:31,120 --> 00:21:33,039
upon it with with a more open source

638
00:21:33,039 --> 00:21:35,440
foundation

639
00:21:35,440 --> 00:21:38,080
so the idea here is there's different

640
00:21:38,080 --> 00:21:39,039
organizations

641
00:21:39,039 --> 00:21:41,120
google low risk which is enough for prop

642
00:21:41,120 --> 00:21:43,200
in the uk they're all working together

643
00:21:43,200 --> 00:21:46,480
to how to implement a root of trust chip

644
00:21:46,480 --> 00:21:49,039
with open source tools so an open source

645
00:21:49,039 --> 00:21:50,799
design both on the chip level

646
00:21:50,799 --> 00:21:52,640
and also in terms of the firmware and

647
00:21:52,640 --> 00:21:54,720
software that goes along with it

648
00:21:54,720 --> 00:21:56,320
so this sort of thing can be used for

649
00:21:56,320 --> 00:21:58,000
for pretty much any sort of device so

650
00:21:58,000 --> 00:22:00,559
servers routers laptops you know your

651
00:22:00,559 --> 00:22:01,840
smartphone

652
00:22:01,840 --> 00:22:04,559
these new types of iot devices they're

653
00:22:04,559 --> 00:22:05,440
everywhere now

654
00:22:05,440 --> 00:22:08,000
um so one one thing it can provide is

655
00:22:08,000 --> 00:22:09,120
the ability to

656
00:22:09,120 --> 00:22:10,960
be able to make sure you're booting the

657
00:22:10,960 --> 00:22:13,120
correct firmware and then it hasn't been

658
00:22:13,120 --> 00:22:16,000
template tampered with um you know

659
00:22:16,000 --> 00:22:17,200
another

660
00:22:17,200 --> 00:22:20,480
possibility is to be able to make sure

661
00:22:20,480 --> 00:22:21,679
that a device

662
00:22:21,679 --> 00:22:24,320
is legitimate um that is it's not some

663
00:22:24,320 --> 00:22:26,880
sort of rogue device uh

664
00:22:26,880 --> 00:22:28,880
also the ability to protect encryption

665
00:22:28,880 --> 00:22:30,799
encryption keys um you know one of the

666
00:22:30,799 --> 00:22:32,240
big problems is where you store the

667
00:22:32,240 --> 00:22:34,320
encryption key so the idea here is that

668
00:22:34,320 --> 00:22:36,320
you could um store the encryption keys

669
00:22:36,320 --> 00:22:37,520
inside of an uh

670
00:22:37,520 --> 00:22:40,320
uh open titan um chip and it would allow

671
00:22:40,320 --> 00:22:42,000
you to have some confidence there

672
00:22:42,000 --> 00:22:44,720
that it couldn't be tampered with or

673
00:22:44,720 --> 00:22:45,840
extracted

674
00:22:45,840 --> 00:22:50,400
um and then provide authoritative

675
00:22:50,400 --> 00:22:53,120
tamper evident records of what's what's

676
00:22:53,120 --> 00:22:54,799
happened um during the run time of the

677
00:22:54,799 --> 00:22:56,640
chip

678
00:22:56,640 --> 00:22:59,120
so this is a kind of a nice example here

679
00:22:59,120 --> 00:22:59,840
um

680
00:22:59,840 --> 00:23:02,159
from their documentation of how open

681
00:23:02,159 --> 00:23:04,000
titan differs from the

682
00:23:04,000 --> 00:23:05,840
current root of cross chips that are out

683
00:23:05,840 --> 00:23:08,960
there like the google titan chip

684
00:23:08,960 --> 00:23:10,720
and the big thing here that you see is

685
00:23:10,720 --> 00:23:12,720
that the um

686
00:23:12,720 --> 00:23:16,000
the p the chip design um which is

687
00:23:16,000 --> 00:23:18,159
sometimes referred to art is rtl or

688
00:23:18,159 --> 00:23:20,240
register transfer logic

689
00:23:20,240 --> 00:23:22,720
that's all open source so the the chip

690
00:23:22,720 --> 00:23:23,679
level designs all

691
00:23:23,679 --> 00:23:26,640
open source um and the packaging so

692
00:23:26,640 --> 00:23:27,200
they've

693
00:23:27,200 --> 00:23:29,120
created a situation where they can keep

694
00:23:29,120 --> 00:23:31,919
track and and have transparency

695
00:23:31,919 --> 00:23:34,240
at the board level at the chip packaging

696
00:23:34,240 --> 00:23:36,159
level at the chip design level

697
00:23:36,159 --> 00:23:37,440
the only thing that's not covered by

698
00:23:37,440 --> 00:23:39,360
this is at the actual

699
00:23:39,360 --> 00:23:42,559
um silicon fab there are certain parts

700
00:23:42,559 --> 00:23:43,679
there that are not open

701
00:23:43,679 --> 00:23:45,440
but as you can see this is a big

702
00:23:45,440 --> 00:23:47,520
improvement over where things are right

703
00:23:47,520 --> 00:23:51,760
now with root of crust chips

704
00:23:51,760 --> 00:23:53,760
one of the things i wanted to talk about

705
00:23:53,760 --> 00:23:55,200
too was

706
00:23:55,200 --> 00:23:58,240
fpgas and the exciting developments that

707
00:23:58,240 --> 00:24:00,000
we've seen in terms of open source tool

708
00:24:00,000 --> 00:24:01,200
chains for fpgas

709
00:24:01,200 --> 00:24:04,799
and how that relates to risk five

710
00:24:04,799 --> 00:24:06,880
so if you're not familiar with an fpga

711
00:24:06,880 --> 00:24:09,279
it's a field programmable gate array

712
00:24:09,279 --> 00:24:12,159
the idea here is you have a chip where

713
00:24:12,159 --> 00:24:12,799
it's just

714
00:24:12,799 --> 00:24:15,760
um a seer ocean of these logic elements

715
00:24:15,760 --> 00:24:17,200
that can be programmed so

716
00:24:17,200 --> 00:24:19,440
the chip itself doesn't do anything but

717
00:24:19,440 --> 00:24:20,559
by loading a

718
00:24:20,559 --> 00:24:23,039
design into it it then reconfigures

719
00:24:23,039 --> 00:24:23,919
itself to be

720
00:24:23,919 --> 00:24:26,240
the hardware that you've designed

721
00:24:26,240 --> 00:24:28,559
including a processor core so we can

722
00:24:28,559 --> 00:24:29,520
actually

723
00:24:29,520 --> 00:24:32,240
load in the design of a like a risk five

724
00:24:32,240 --> 00:24:32,720
core

725
00:24:32,720 --> 00:24:35,600
and the fpga will reconfigure itself to

726
00:24:35,600 --> 00:24:36,400
actually be

727
00:24:36,400 --> 00:24:39,679
that um digital design

728
00:24:39,679 --> 00:24:41,760
and if you want to learn more about it a

729
00:24:41,760 --> 00:24:43,840
really great talk from last year was

730
00:24:43,840 --> 00:24:46,240
uh from megan locks at the hackaday

731
00:24:46,240 --> 00:24:47,840
super conference there's a link in the

732
00:24:47,840 --> 00:24:50,000
slides to it there

733
00:24:50,000 --> 00:24:53,919
um so kind of analogy to software

734
00:24:53,919 --> 00:24:55,360
you know when you write a when you write

735
00:24:55,360 --> 00:24:58,000
source code you use a compiler

736
00:24:58,000 --> 00:25:00,320
to produce the the binary that you use

737
00:25:00,320 --> 00:25:02,240
to execute in fpga world

738
00:25:02,240 --> 00:25:04,640
you have your hardware definition a

739
00:25:04,640 --> 00:25:05,440
language so

740
00:25:05,440 --> 00:25:08,960
verilog or vhdl um and that gets uh

741
00:25:08,960 --> 00:25:12,880
synthesized by an fpga software tool

742
00:25:12,880 --> 00:25:14,799
and then finally transformed by a place

743
00:25:14,799 --> 00:25:16,720
and write place and route tool

744
00:25:16,720 --> 00:25:18,799
into a bitstream that's what gets loaded

745
00:25:18,799 --> 00:25:20,720
into the fpga

746
00:25:20,720 --> 00:25:23,200
so typically these tools were all

747
00:25:23,200 --> 00:25:24,799
proprietary and they would come from the

748
00:25:24,799 --> 00:25:26,080
fpga vendor

749
00:25:26,080 --> 00:25:29,200
they'd be massive pieces of um

750
00:25:29,200 --> 00:25:31,360
proprietary software like the one from

751
00:25:31,360 --> 00:25:33,679
xilinx is like 40 gigabytes to install

752
00:25:33,679 --> 00:25:36,559
it's crazy so a few years ago um some

753
00:25:36,559 --> 00:25:37,760
really talented

754
00:25:37,760 --> 00:25:40,400
hackers including claire wolf started

755
00:25:40,400 --> 00:25:42,000
pioneering the ability to be able to

756
00:25:42,000 --> 00:25:45,840
use open source tools to program fpga so

757
00:25:45,840 --> 00:25:47,840
it started off with this smaller fpga

758
00:25:47,840 --> 00:25:50,480
called the lattice ice40

759
00:25:50,480 --> 00:25:52,159
which was really exciting at the time

760
00:25:52,159 --> 00:25:54,159
but it's it's a smaller fpga so it

761
00:25:54,159 --> 00:25:55,840
limits the things that you can do with

762
00:25:55,840 --> 00:25:57,200
it

763
00:25:57,200 --> 00:25:59,760
uh then the bigger one from lattice ecp

764
00:25:59,760 --> 00:26:01,600
five was supported with a project

765
00:26:01,600 --> 00:26:04,159
with a effort called project trellis um

766
00:26:04,159 --> 00:26:05,360
from dave shaw

767
00:26:05,360 --> 00:26:07,039
um so yeah some of the people who have

768
00:26:07,039 --> 00:26:08,640
been involved with this are dave shaw

769
00:26:08,640 --> 00:26:10,880
and claire wolf and a bunch of other

770
00:26:10,880 --> 00:26:12,240
people there's there's a really awesome

771
00:26:12,240 --> 00:26:14,559
community of like open fpga people

772
00:26:14,559 --> 00:26:16,559
um definitely recommend following them

773
00:26:16,559 --> 00:26:19,039
on twitter um so the ecb5

774
00:26:19,039 --> 00:26:21,279
and the ice 40 both you can put

775
00:26:21,279 --> 00:26:23,279
different implementations of a risc-v

776
00:26:23,279 --> 00:26:25,840
corn to them um but they are somewhat

777
00:26:25,840 --> 00:26:26,880
limited they

778
00:26:26,880 --> 00:26:28,960
they don't have all the capabilities um

779
00:26:28,960 --> 00:26:30,960
for higher speed peripherals

780
00:26:30,960 --> 00:26:33,600
that you may want um and that's what we

781
00:26:33,600 --> 00:26:34,400
find in

782
00:26:34,400 --> 00:26:37,200
fpgas from xilinx so xilinx is like the

783
00:26:37,200 --> 00:26:38,159
market leader

784
00:26:38,159 --> 00:26:41,840
in fpgas so there's a bit of a gap there

785
00:26:41,840 --> 00:26:43,919
where the east v5 and is40 are nice but

786
00:26:43,919 --> 00:26:44,640
they don't cover

787
00:26:44,640 --> 00:26:46,480
all the sorts of high-speed use use

788
00:26:46,480 --> 00:26:48,640
cases that you might want to do

789
00:26:48,640 --> 00:26:51,760
so another project called simpleflow and

790
00:26:51,760 --> 00:26:54,080
project x-ray has put a lot of effort

791
00:26:54,080 --> 00:26:54,880
into

792
00:26:54,880 --> 00:26:58,080
supporting a portion of the xylex fpgas

793
00:26:58,080 --> 00:27:00,320
called series seven

794
00:27:00,320 --> 00:27:02,159
and the support is almost there with

795
00:27:02,159 --> 00:27:04,159
these tools to be able to

796
00:27:04,159 --> 00:27:06,080
go from your your source like your

797
00:27:06,080 --> 00:27:08,080
verilog or vhdl

798
00:27:08,080 --> 00:27:09,679
all the way through to the bitstream

799
00:27:09,679 --> 00:27:11,440
that you live onto the fpga with just

800
00:27:11,440 --> 00:27:14,320
open source tools um one of the big

801
00:27:14,320 --> 00:27:15,440
champions behind this

802
00:27:15,440 --> 00:27:17,919
is is tam ansel and he he likes to say

803
00:27:17,919 --> 00:27:20,000
it's the gcc of fpga

804
00:27:20,000 --> 00:27:22,159
so kind of the parallel to how you use

805
00:27:22,159 --> 00:27:23,360
your open source

806
00:27:23,360 --> 00:27:26,480
tools to build programs this is the

807
00:27:26,480 --> 00:27:30,799
kind of analogy but for fpgas

808
00:27:30,799 --> 00:27:33,360
so this then becomes important if we

809
00:27:33,360 --> 00:27:34,159
want to

810
00:27:34,159 --> 00:27:38,159
build a trustable system using an fpga

811
00:27:38,159 --> 00:27:41,600
so at ccc last december

812
00:27:41,600 --> 00:27:45,039
bunny gave it awesome talk about

813
00:27:45,039 --> 00:27:47,760
him and zobs were trying to build a

814
00:27:47,760 --> 00:27:49,760
device a communication device where you

815
00:27:49,760 --> 00:27:50,399
could

816
00:27:50,399 --> 00:27:52,799
do some simple things like send text

817
00:27:52,799 --> 00:27:53,919
messages

818
00:27:53,919 --> 00:27:57,120
or potentially like sign

819
00:27:57,120 --> 00:27:59,919
do cryptographic signatures with it so

820
00:27:59,919 --> 00:28:01,919
kind of a constrained set of features

821
00:28:01,919 --> 00:28:02,960
but they wanted to build

822
00:28:02,960 --> 00:28:06,559
a piece of hardware that was trustable

823
00:28:06,559 --> 00:28:08,320
and one of the big one of the big issues

824
00:28:08,320 --> 00:28:10,080
here that bunny identified was the issue

825
00:28:10,080 --> 00:28:12,080
of time of check time of use like

826
00:28:12,080 --> 00:28:14,960
um while you may be able to you know in

827
00:28:14,960 --> 00:28:16,880
a special lab be able to verify that the

828
00:28:16,880 --> 00:28:18,720
chip is what you think it is

829
00:28:18,720 --> 00:28:20,159
um by the time it's actually in the

830
00:28:20,159 --> 00:28:22,000
user's hand there's very little way for

831
00:28:22,000 --> 00:28:23,600
them to verify that

832
00:28:23,600 --> 00:28:27,120
it is what has been uh authenticated to

833
00:28:27,120 --> 00:28:28,720
be because there's lots of

834
00:28:28,720 --> 00:28:30,880
places in between that that can change

835
00:28:30,880 --> 00:28:32,640
um and he had a

836
00:28:32,640 --> 00:28:35,200
nice diagram in his uh presentation

837
00:28:35,200 --> 00:28:36,960
there of like all the different places

838
00:28:36,960 --> 00:28:37,600
where

839
00:28:37,600 --> 00:28:41,039
um bad things can happen um so in in all

840
00:28:41,039 --> 00:28:42,480
the way up to like let's say you have

841
00:28:42,480 --> 00:28:43,039
the

842
00:28:43,039 --> 00:28:45,200
you know you have the ic the the chip

843
00:28:45,200 --> 00:28:47,279
and you go inspect it with some

844
00:28:47,279 --> 00:28:49,440
electron microscope and but then you

845
00:28:49,440 --> 00:28:51,200
still have to send it back to the user

846
00:28:51,200 --> 00:28:52,640
and it could be interdicted at that

847
00:28:52,640 --> 00:28:54,880
point so so how do we get

848
00:28:54,880 --> 00:28:56,960
that time of check time of use gap

849
00:28:56,960 --> 00:28:58,640
closed when it comes to hardware

850
00:28:58,640 --> 00:29:00,240
you know the software is easy we can

851
00:29:00,240 --> 00:29:02,240
just do a hash and then we know that

852
00:29:02,240 --> 00:29:04,240
it's the same the binary is the same

853
00:29:04,240 --> 00:29:06,000
thing as from the build server

854
00:29:06,000 --> 00:29:07,600
but it's much more difficult when it

855
00:29:07,600 --> 00:29:09,440
comes to hardware

856
00:29:09,440 --> 00:29:11,120
so one idea is here and what they're

857
00:29:11,120 --> 00:29:12,880
using in this project called be

858
00:29:12,880 --> 00:29:16,559
trusted is an fpga um with a soft risk 5

859
00:29:16,559 --> 00:29:18,960
core on it so when i say soft core that

860
00:29:18,960 --> 00:29:19,840
means a

861
00:29:19,840 --> 00:29:21,919
processor core design that's loaded into

862
00:29:21,919 --> 00:29:23,200
an fpga

863
00:29:23,200 --> 00:29:24,960
instead of you know etched through

864
00:29:24,960 --> 00:29:29,120
lithography onto a silicon chip

865
00:29:29,760 --> 00:29:31,840
and the nice thing here is if we're

866
00:29:31,840 --> 00:29:33,360
using an fpga

867
00:29:33,360 --> 00:29:36,159
then what the design of our processor is

868
00:29:36,159 --> 00:29:36,720
just

869
00:29:36,720 --> 00:29:38,799
essentially source code it's that hdl

870
00:29:38,799 --> 00:29:40,399
like verilog um

871
00:29:40,399 --> 00:29:43,600
so you can more easily you know

872
00:29:43,600 --> 00:29:45,360
synthesize that verilog

873
00:29:45,360 --> 00:29:46,799
and have it closer to the user where

874
00:29:46,799 --> 00:29:49,120
they can have some greater level of

875
00:29:49,120 --> 00:29:49,679
trust that

876
00:29:49,679 --> 00:29:51,679
that it is what what what they think it

877
00:29:51,679 --> 00:29:53,039
should be

878
00:29:53,039 --> 00:29:55,200
and the two routes right now are using

879
00:29:55,200 --> 00:29:57,840
the ecp five from lattice or the

880
00:29:57,840 --> 00:30:01,919
series seven um xylix fpgas

881
00:30:01,919 --> 00:30:03,520
and i was talking about before that pga

882
00:30:03,520 --> 00:30:05,200
is kind of this sea of gates that we can

883
00:30:05,200 --> 00:30:07,279
configure to be what we want including

884
00:30:07,279 --> 00:30:10,559
a soft first five core and one of these

885
00:30:10,559 --> 00:30:12,000
things that bunny talked about here

886
00:30:12,000 --> 00:30:15,039
is so the fpga is a pretty uniform

887
00:30:15,039 --> 00:30:17,840
uh series of gates and it's something

888
00:30:17,840 --> 00:30:19,039
that

889
00:30:19,039 --> 00:30:20,960
it would be very difficult for a

890
00:30:20,960 --> 00:30:23,120
malicious actor like at the fab to know

891
00:30:23,120 --> 00:30:25,200
what part of the fpga to mess with

892
00:30:25,200 --> 00:30:25,760
because

893
00:30:25,760 --> 00:30:28,399
they don't know exactly what our design

894
00:30:28,399 --> 00:30:28,799
is

895
00:30:28,799 --> 00:30:30,080
and even if they didn't know what our

896
00:30:30,080 --> 00:30:32,880
design was these fpga tools have the

897
00:30:32,880 --> 00:30:34,799
ability to randomize

898
00:30:34,799 --> 00:30:37,120
what parts of the processor get put

899
00:30:37,120 --> 00:30:38,240
where in this

900
00:30:38,240 --> 00:30:40,559
grid of gates um so that makes it even

901
00:30:40,559 --> 00:30:42,320
more difficult for someone at the front

902
00:30:42,320 --> 00:30:44,159
the silicon foundry level to to know

903
00:30:44,159 --> 00:30:45,279
what part of the

904
00:30:45,279 --> 00:30:48,399
of the dynamess with

905
00:30:48,399 --> 00:30:50,880
so that's one of the ways that you can

906
00:30:50,880 --> 00:30:52,720
make it much more difficult for someone

907
00:30:52,720 --> 00:30:53,600
to be able to

908
00:30:53,600 --> 00:30:56,960
do a silicon level attack

909
00:30:56,960 --> 00:30:59,519
and because we're using the softcore

910
00:30:59,519 --> 00:31:00,399
that's

911
00:31:00,399 --> 00:31:04,000
done in hdl like verilog and we're using

912
00:31:04,000 --> 00:31:06,559
open source fpga tool chain we actually

913
00:31:06,559 --> 00:31:07,360
can have

914
00:31:07,360 --> 00:31:09,279
much better confidence that the bid

915
00:31:09,279 --> 00:31:11,440
stream that we're loading into fpga

916
00:31:11,440 --> 00:31:14,640
is what we think it is

917
00:31:15,039 --> 00:31:18,000
um so one of the kind of like the to

918
00:31:18,000 --> 00:31:19,360
leave you with um

919
00:31:19,360 --> 00:31:21,360
one of the really exciting projects

920
00:31:21,360 --> 00:31:23,279
that's a little bit mind twisting i

921
00:31:23,279 --> 00:31:24,720
think is the idea of

922
00:31:24,720 --> 00:31:27,600
a trustworthy self-hosted computer um so

923
00:31:27,600 --> 00:31:28,799
there's this researcher named

924
00:31:28,799 --> 00:31:32,399
uh gabriel um samlo and he

925
00:31:32,399 --> 00:31:35,279
has a blog where he talks about his

926
00:31:35,279 --> 00:31:37,279
efforts to make a trustworthy free

927
00:31:37,279 --> 00:31:40,320
linux capable self-hosting 64-bit

928
00:31:40,320 --> 00:31:42,080
wrist five computer so what does this

929
00:31:42,080 --> 00:31:44,320
mean the idea here is that you have a

930
00:31:44,320 --> 00:31:45,200
system

931
00:31:45,200 --> 00:31:48,559
with an fpga and

932
00:31:48,559 --> 00:31:52,799
you run the fpga tools on that system so

933
00:31:52,799 --> 00:31:55,760
we load a risk five soft core into that

934
00:31:55,760 --> 00:31:57,039
fpga

935
00:31:57,039 --> 00:31:59,679
then we have linux running on the rs5

936
00:31:59,679 --> 00:32:01,840
softcore and then we have the

937
00:32:01,840 --> 00:32:05,120
open source fpga tools running inside of

938
00:32:05,120 --> 00:32:05,760
linux

939
00:32:05,760 --> 00:32:08,080
on top of that software is five core in

940
00:32:08,080 --> 00:32:09,120
fpga

941
00:32:09,120 --> 00:32:11,600
so we can regenerate the whole system

942
00:32:11,600 --> 00:32:13,679
using the system

943
00:32:13,679 --> 00:32:16,159
so he has goes through some of the steps

944
00:32:16,159 --> 00:32:17,919
that he's gone through so far

945
00:32:17,919 --> 00:32:20,640
um and as the support for some of those

946
00:32:20,640 --> 00:32:23,679
higher-end fpgas improves with

947
00:32:23,679 --> 00:32:25,519
that project called simbaflow we'll be

948
00:32:25,519 --> 00:32:27,919
able to target even higher-end fpgas

949
00:32:27,919 --> 00:32:30,960
with these open source tools

950
00:32:30,960 --> 00:32:33,360
and ultimately we're left here his his

951
00:32:33,360 --> 00:32:35,679
example that he's done so far is he uses

952
00:32:35,679 --> 00:32:37,519
one open source project called lidex

953
00:32:37,519 --> 00:32:39,519
that lets you build system on chips in

954
00:32:39,519 --> 00:32:40,159
fbj

955
00:32:40,159 --> 00:32:43,039
and rocket which is a 64-bit open source

956
00:32:43,039 --> 00:32:44,000
implementation

957
00:32:44,000 --> 00:32:46,320
of a risc-v processor and this allows

958
00:32:46,320 --> 00:32:47,519
him to build a system

959
00:32:47,519 --> 00:32:51,279
um that runs linux and is self-hosting

960
00:32:51,279 --> 00:32:52,000
so it's

961
00:32:52,000 --> 00:32:54,320
kind of an interesting thing there where

962
00:32:54,320 --> 00:32:55,120
you

963
00:32:55,120 --> 00:32:56,799
the only thing you need to trust is is

964
00:32:56,799 --> 00:32:58,399
this one system and it can rebuild

965
00:32:58,399 --> 00:33:00,159
itself which is quite interesting i

966
00:33:00,159 --> 00:33:01,120
think so

967
00:33:01,120 --> 00:33:03,039
um that's all i have i don't know if

968
00:33:03,039 --> 00:33:04,880
there's any questions i mean let me

969
00:33:04,880 --> 00:33:06,799
pop back one thing i can't see here is

970
00:33:06,799 --> 00:33:08,000
if there's any

971
00:33:08,000 --> 00:33:11,279
questions in the chat

972
00:33:11,279 --> 00:33:12,960
there was one question regarding your

973
00:33:12,960 --> 00:33:15,279
slides and then you said that yes

974
00:33:15,279 --> 00:33:17,519
you know they would be made available

975
00:33:17,519 --> 00:33:19,200
later on as well

976
00:33:19,200 --> 00:33:20,799
yeah let me go back there so if anyone

977
00:33:20,799 --> 00:33:23,120
wants to that that tiny url right there

978
00:33:23,120 --> 00:33:26,080
that will link to these google slides

979
00:33:26,080 --> 00:33:28,320
here

980
00:33:31,360 --> 00:33:34,000
so friends if you have any questions

981
00:33:34,000 --> 00:33:36,840
please send them across via the zoom

982
00:33:36,840 --> 00:33:39,840
chat

983
00:33:48,399 --> 00:33:52,240
drew okay how risk 5 could reduce timing

984
00:33:52,240 --> 00:33:52,720
attacks

985
00:33:52,720 --> 00:33:54,399
can it mitigate attacks like side

986
00:33:54,399 --> 00:33:56,080
channel

987
00:33:56,080 --> 00:33:58,960
well i think um so risk file itself

988
00:33:58,960 --> 00:34:00,159
can't because risk 5

989
00:34:00,159 --> 00:34:02,240
is is simply just a standard for the

990
00:34:02,240 --> 00:34:03,760
instructions that the processor

991
00:34:03,760 --> 00:34:04,559
implements

992
00:34:04,559 --> 00:34:06,559
um but the important thing here is

993
00:34:06,559 --> 00:34:07,840
because it's an open

994
00:34:07,840 --> 00:34:10,719
standard anyone that wants to can do

995
00:34:10,719 --> 00:34:11,918
their own implementation

996
00:34:11,918 --> 00:34:13,918
so like these researchers at berkeley

997
00:34:13,918 --> 00:34:15,520
were able to do

998
00:34:15,520 --> 00:34:17,760
sonic boom which is a risk five

999
00:34:17,760 --> 00:34:19,040
implementation

1000
00:34:19,040 --> 00:34:22,239
um and it's a out of order super scalar

1001
00:34:22,239 --> 00:34:22,960
processor

1002
00:34:22,960 --> 00:34:24,639
which means it is potentially

1003
00:34:24,639 --> 00:34:26,079
susceptible to these

1004
00:34:26,079 --> 00:34:29,440
timing attacks with speculation so um

1005
00:34:29,440 --> 00:34:32,239
the important thing here was a lot of

1006
00:34:32,239 --> 00:34:34,639
research you know they they use

1007
00:34:34,639 --> 00:34:36,879
less complicated processors like inorder

1008
00:34:36,879 --> 00:34:38,079
processors and those are not

1009
00:34:38,079 --> 00:34:40,320
susceptible to these types of attacks so

1010
00:34:40,320 --> 00:34:42,399
having a super scalar out of order core

1011
00:34:42,399 --> 00:34:43,040
means

1012
00:34:43,040 --> 00:34:45,040
you know potentially it could be

1013
00:34:45,040 --> 00:34:46,560
susceptible to this and they can do

1014
00:34:46,560 --> 00:34:48,239
research around that

1015
00:34:48,239 --> 00:34:49,359
the other one that i didn't include in

1016
00:34:49,359 --> 00:34:51,359
the slides um but

1017
00:34:51,359 --> 00:34:53,760
if you check out the risk 5

1018
00:34:53,760 --> 00:34:55,679
international they have the security

1019
00:34:55,679 --> 00:34:56,800
working group

1020
00:34:56,800 --> 00:34:58,560
and they have monthly meetings and there

1021
00:34:58,560 --> 00:35:00,320
was a meeting i think it was last week

1022
00:35:00,320 --> 00:35:01,520
that had a really interesting

1023
00:35:01,520 --> 00:35:02,160
presentation

1024
00:35:02,160 --> 00:35:04,880
from some researchers that were doing uh

1025
00:35:04,880 --> 00:35:07,200
processor design to help mitigate um

1026
00:35:07,200 --> 00:35:10,240
side channel power analysis um which

1027
00:35:10,240 --> 00:35:13,520
you've probably seen from colin and

1028
00:35:13,520 --> 00:35:15,839
the chip whisperer pretty pretty neat

1029
00:35:15,839 --> 00:35:16,880
stuff there so

1030
00:35:16,880 --> 00:35:19,119
they're actually doing research into how

1031
00:35:19,119 --> 00:35:20,640
to design a processor that's

1032
00:35:20,640 --> 00:35:23,599
less susceptible to that uh and i asked

1033
00:35:23,599 --> 00:35:24,480
them

1034
00:35:24,480 --> 00:35:26,640
how does risk 5 help you with this and

1035
00:35:26,640 --> 00:35:28,079
they said it was really important for

1036
00:35:28,079 --> 00:35:29,040
them to have

1037
00:35:29,040 --> 00:35:32,240
an open uh isa so that they could do the

1038
00:35:32,240 --> 00:35:33,200
implementation

1039
00:35:33,200 --> 00:35:36,640
however they wanted um so i think

1040
00:35:36,640 --> 00:35:38,160
risk fight itself doesn't do anything

1041
00:35:38,160 --> 00:35:40,000
but risk five enables

1042
00:35:40,000 --> 00:35:41,920
more research than than you would have

1043
00:35:41,920 --> 00:35:45,839
with commercial isas

1044
00:35:46,240 --> 00:35:49,680
all right is there any other question

1045
00:35:49,680 --> 00:35:59,839
from the audience

1046
00:36:02,800 --> 00:36:04,880
so well drew i don't think there are any

1047
00:36:04,880 --> 00:36:07,200
more questions okay

1048
00:36:07,200 --> 00:36:10,839
thank you so much for sharing uh the

1049
00:36:10,839 --> 00:36:13,839
isa of risk five and i'm sure a lot of

1050
00:36:13,839 --> 00:36:14,720
people would

1051
00:36:14,720 --> 00:36:18,240
definitely use it uh so yeah thank you

1052
00:36:18,240 --> 00:36:22,000
again drew yeah thank you bye

1053
00:36:22,000 --> 00:36:24,720
thank you everybody else uh we would be

1054
00:36:24,720 --> 00:36:26,640
recording this webinar and uploading it

1055
00:36:26,640 --> 00:36:28,079
on our youtube channel for

1056
00:36:28,079 --> 00:36:30,480
future view so thank you so much

1057
00:36:30,480 --> 00:36:32,800
everybody and do join us for our

1058
00:36:32,800 --> 00:36:34,480
hardware or io conference which is

1059
00:36:34,480 --> 00:36:35,760
scheduled on the first

1060
00:36:35,760 --> 00:36:38,160
and second of october thank you

1061
00:36:38,160 --> 00:36:39,040
everybody

1062
00:36:39,040 --> 00:36:41,839
bye

