1
00:00:12,490 --> 00:00:14,400
[Music]

2
00:00:14,400 --> 00:00:15,519
hey everyone

3
00:00:15,519 --> 00:00:16,880
thank you so much for joining us for

4
00:00:16,880 --> 00:00:19,119
today's hardware dot io webinar

5
00:00:19,119 --> 00:00:21,439
my name is andrik and i'm part of the

6
00:00:21,439 --> 00:00:23,760
hardware dot io team

7
00:00:23,760 --> 00:00:25,519
we have been running hardware dot io

8
00:00:25,519 --> 00:00:26,880
conference and trainings

9
00:00:26,880 --> 00:00:30,240
since 2015. the conference also had a

10
00:00:30,240 --> 00:00:31,359
successful event

11
00:00:31,359 --> 00:00:34,160
last year in the us and due to the

12
00:00:34,160 --> 00:00:34,880
pandemic

13
00:00:34,880 --> 00:00:36,880
situation we have switched to the online

14
00:00:36,880 --> 00:00:38,559
mode now

15
00:00:38,559 --> 00:00:40,320
the objective of the conference revolves

16
00:00:40,320 --> 00:00:42,840
around key concerns related to

17
00:00:42,840 --> 00:00:47,280
hardware firmware and rated protocols

18
00:00:47,280 --> 00:00:49,120
we are trying to create a continuous

19
00:00:49,120 --> 00:00:50,719
learning engagement

20
00:00:50,719 --> 00:00:53,280
with our hardware community hence

21
00:00:53,280 --> 00:00:54,160
webinar

22
00:00:54,160 --> 00:00:55,920
are always interesting to learn and

23
00:00:55,920 --> 00:00:58,399
share knowledge

24
00:00:58,399 --> 00:01:02,399
additionally we have also uh started our

25
00:01:02,399 --> 00:01:04,559
hardware dot io online trainings which

26
00:01:04,559 --> 00:01:06,640
is going to be scheduled in the month of

27
00:01:06,640 --> 00:01:09,200
september so please feel free to have a

28
00:01:09,200 --> 00:01:10,560
look at the links

29
00:01:10,560 --> 00:01:13,040
uh sent to you on the chat and if you

30
00:01:13,040 --> 00:01:15,200
are interested to join please feel free

31
00:01:15,200 --> 00:01:17,040
we have some amazing trainings lined up

32
00:01:17,040 --> 00:01:18,720
for all of you

33
00:01:18,720 --> 00:01:21,759
today we have matthew who is a software

34
00:01:21,759 --> 00:01:23,680
engineer with quarks lab

35
00:01:23,680 --> 00:01:26,479
he has his interest in cryptography he

36
00:01:26,479 --> 00:01:28,240
is regularly doing research

37
00:01:28,240 --> 00:01:30,079
and development with regards to software

38
00:01:30,079 --> 00:01:32,000
protection engineering

39
00:01:32,000 --> 00:01:34,479
matthew would deliver today a talk on

40
00:01:34,479 --> 00:01:36,079
building white box

41
00:01:36,079 --> 00:01:38,320
attack and defenses with his colleague

42
00:01:38,320 --> 00:01:40,159
philip and adrian

43
00:01:40,159 --> 00:01:43,119
a quick announcement the format of

44
00:01:43,119 --> 00:01:44,399
today's webinar would be

45
00:01:44,399 --> 00:01:46,720
30 minutes of presentation by matthew

46
00:01:46,720 --> 00:01:48,240
and 10 minutes for q

47
00:01:48,240 --> 00:01:50,640
a those who have questions and would

48
00:01:50,640 --> 00:01:52,399
like matthew to answer them

49
00:01:52,399 --> 00:01:54,159
please type in your questions in the

50
00:01:54,159 --> 00:01:55,600
zoom chat option

51
00:01:55,600 --> 00:01:57,600
and matthew would answer them with his

52
00:01:57,600 --> 00:02:00,640
team after his presentation

53
00:02:00,640 --> 00:02:03,119
we will also send out feedback links to

54
00:02:03,119 --> 00:02:03,759
all of you

55
00:02:03,759 --> 00:02:06,719
so please help us improve our webinars

56
00:02:06,719 --> 00:02:08,239
for future and if you would like to

57
00:02:08,239 --> 00:02:08,878
present

58
00:02:08,878 --> 00:02:10,959
in our upcoming webinars that will also

59
00:02:10,959 --> 00:02:12,480
let us know about it

60
00:02:12,480 --> 00:02:15,360
so now matthew the stage is yours i

61
00:02:15,360 --> 00:02:16,000
would stop

62
00:02:16,000 --> 00:02:20,000
sharing my screen and it's all okay

63
00:02:20,000 --> 00:02:23,920
you i guess i will start sharing mine

64
00:02:23,920 --> 00:02:27,040
is it like um

65
00:02:27,040 --> 00:02:30,959
i'm going to pick okay

66
00:02:30,959 --> 00:02:35,440
it's working i guess no okay so

67
00:02:35,440 --> 00:02:39,040
hello my name is matthew dumas

68
00:02:39,040 --> 00:02:40,879
i've been working on this webinar with

69
00:02:40,879 --> 00:02:43,360
adrian ginny and philip

70
00:02:43,360 --> 00:02:45,680
here at wax lab we have some history

71
00:02:45,680 --> 00:02:47,360
doing security audits and now

72
00:02:47,360 --> 00:02:49,599
building software protections and white

73
00:02:49,599 --> 00:02:51,040
boxes

74
00:02:51,040 --> 00:02:53,280
philip is known in the white box

75
00:02:53,280 --> 00:02:55,040
community to have contributed to several

76
00:02:55,040 --> 00:02:56,160
publications

77
00:02:56,160 --> 00:02:59,680
on attacks on the ies white boxes

78
00:02:59,680 --> 00:03:02,959
and adriana is a lead

79
00:03:02,959 --> 00:03:05,680
tech on these problematics around

80
00:03:05,680 --> 00:03:08,000
software protection and white boxes

81
00:03:08,000 --> 00:03:10,800
and i've been working with adrian on a

82
00:03:10,800 --> 00:03:11,440
defense

83
00:03:11,440 --> 00:03:14,080
and phillip on attacks so the title of

84
00:03:14,080 --> 00:03:14,560
the

85
00:03:14,560 --> 00:03:17,680
talk today is like building white boxes

86
00:03:17,680 --> 00:03:19,680
attacks and defense we have the both

87
00:03:19,680 --> 00:03:21,760
side behind

88
00:03:21,760 --> 00:03:24,560
this presentation

89
00:03:24,959 --> 00:03:28,080
so let's start the content today we'll

90
00:03:28,080 --> 00:03:28,879
start with

91
00:03:28,879 --> 00:03:31,200
a quick overview on white boxes like an

92
00:03:31,200 --> 00:03:32,159
introduction

93
00:03:32,159 --> 00:03:33,840
and then we switch to attacks and

94
00:03:33,840 --> 00:03:35,440
defense

95
00:03:35,440 --> 00:03:37,760
with we'll start with high level attacks

96
00:03:37,760 --> 00:03:39,200
then go

97
00:03:39,200 --> 00:03:41,040
a bit more into the details and then

98
00:03:41,040 --> 00:03:43,519
we're going to have a quick conclusion

99
00:03:43,519 --> 00:03:46,080
then switch to the questions i'll be the

100
00:03:46,080 --> 00:03:47,440
only one talking

101
00:03:47,440 --> 00:03:49,680
during the the presentation but during

102
00:03:49,680 --> 00:03:50,799
the question both

103
00:03:50,799 --> 00:03:53,200
adrian philip and me will answer the

104
00:03:53,200 --> 00:03:54,720
questions

105
00:03:54,720 --> 00:03:57,280
so a quick introduction on white boxes

106
00:03:57,280 --> 00:03:59,680
often white boxes are introduced

107
00:03:59,680 --> 00:04:01,920
when the problematic is like please

108
00:04:01,920 --> 00:04:04,720
protect my cryptographic implementation

109
00:04:04,720 --> 00:04:07,599
when we say that what do we mean often

110
00:04:07,599 --> 00:04:08,239
it's about

111
00:04:08,239 --> 00:04:11,360
the keys the data and sometimes

112
00:04:11,360 --> 00:04:14,000
other kinds of abuse more complex

113
00:04:14,000 --> 00:04:15,040
scenarios

114
00:04:15,040 --> 00:04:17,519
and what we see here is like when

115
00:04:17,519 --> 00:04:18,320
working with

116
00:04:18,320 --> 00:04:21,120
white boxes it's important to define our

117
00:04:21,120 --> 00:04:21,918
context

118
00:04:21,918 --> 00:04:25,040
and also to define or attack our model

119
00:04:25,040 --> 00:04:28,160
the term white boxes comes from the

120
00:04:28,160 --> 00:04:29,120
attacker model

121
00:04:29,120 --> 00:04:32,080
is like we work in the worst case in

122
00:04:32,080 --> 00:04:33,360
some ways

123
00:04:33,360 --> 00:04:36,080
our implementation can be read or

124
00:04:36,080 --> 00:04:37,440
written by the attacker

125
00:04:37,440 --> 00:04:40,320
is like a white box a box that can be

126
00:04:40,320 --> 00:04:41,520
opened

127
00:04:41,520 --> 00:04:44,400
and the attacker has full control on the

128
00:04:44,400 --> 00:04:45,600
operating system

129
00:04:45,600 --> 00:04:48,639
and the hardware and the attacker also

130
00:04:48,639 --> 00:04:51,520
the application runs with the least

131
00:04:51,520 --> 00:04:52,880
possible privilege

132
00:04:52,880 --> 00:04:55,199
so what you see here is like we are

133
00:04:55,199 --> 00:04:57,360
really in the worst possible situation

134
00:04:57,360 --> 00:04:59,759
in some ways if you ask yourself can the

135
00:04:59,759 --> 00:05:00,720
attacker do that

136
00:05:00,720 --> 00:05:02,400
can the attacker change the operating

137
00:05:02,400 --> 00:05:04,000
system or do x

138
00:05:04,000 --> 00:05:07,600
do why the it's often yes

139
00:05:07,600 --> 00:05:09,680
the answer is often yes the attacker can

140
00:05:09,680 --> 00:05:11,120
do that

141
00:05:11,120 --> 00:05:14,479
so in a nutshell what we what we are

142
00:05:14,479 --> 00:05:16,560
talking about when we say white boxes

143
00:05:16,560 --> 00:05:18,960
often is like here we have a regular

144
00:05:18,960 --> 00:05:20,320
implementation

145
00:05:20,320 --> 00:05:23,680
uh is gets a key and then is can

146
00:05:23,680 --> 00:05:26,479
encrypt something and when you are going

147
00:05:26,479 --> 00:05:28,639
to work with white boxes often we are

148
00:05:28,639 --> 00:05:29,120
like

149
00:05:29,120 --> 00:05:32,560
white box i guess it's not getting a key

150
00:05:32,560 --> 00:05:33,759
the key is hidden

151
00:05:33,759 --> 00:05:36,720
inside the white box the key is not

152
00:05:36,720 --> 00:05:37,680
explicit

153
00:05:37,680 --> 00:05:40,880
to the attacker or the people building

154
00:05:40,880 --> 00:05:44,080
the the application in some ways and

155
00:05:44,080 --> 00:05:44,639
after

156
00:05:44,639 --> 00:05:48,240
afterwards the the white box can encrypt

157
00:05:48,240 --> 00:05:51,680
things and for example here the attacker

158
00:05:51,680 --> 00:05:54,720
can't extract the key we we built the

159
00:05:54,720 --> 00:05:56,240
white box in a way that

160
00:05:56,240 --> 00:05:58,639
this task is hard and for example the

161
00:05:58,639 --> 00:06:00,800
attacker can't extract the key for to

162
00:06:00,800 --> 00:06:01,600
decrypt

163
00:06:01,600 --> 00:06:04,479
data with the same with the same key for

164
00:06:04,479 --> 00:06:05,600
example

165
00:06:05,600 --> 00:06:09,199
so the general idea about white boxes is

166
00:06:09,199 --> 00:06:10,639
we are going to take

167
00:06:10,639 --> 00:06:13,520
a standard algorithm ones that already

168
00:06:13,520 --> 00:06:14,240
exist

169
00:06:14,240 --> 00:06:15,360
and we are going to build an

170
00:06:15,360 --> 00:06:17,759
implementation that is like kind of

171
00:06:17,759 --> 00:06:18,639
black box

172
00:06:18,639 --> 00:06:21,520
but white from which the attacker can't

173
00:06:21,520 --> 00:06:22,800
extract the key

174
00:06:22,800 --> 00:06:25,759
and can do fancy stuff like changing how

175
00:06:25,759 --> 00:06:28,479
the white box is used in the application

176
00:06:28,479 --> 00:06:32,319
and in practice building such kind of

177
00:06:32,319 --> 00:06:35,919
boxes is like kind of hard because

178
00:06:35,919 --> 00:06:39,039
theory is not working with us here so in

179
00:06:39,039 --> 00:06:40,960
practice this is a compromise

180
00:06:40,960 --> 00:06:44,400
a compromise between mathematics

181
00:06:44,400 --> 00:06:46,840
and obviously obfuscation software

182
00:06:46,840 --> 00:06:50,240
protections so what you need to

183
00:06:50,240 --> 00:06:52,960
to understand from this summary is like

184
00:06:52,960 --> 00:06:54,960
when we build white boxes when we build

185
00:06:54,960 --> 00:06:56,000
this kind of

186
00:06:56,000 --> 00:06:59,120
software protection for cryptography is

187
00:06:59,120 --> 00:07:01,280
about making the attackers work hard

188
00:07:01,280 --> 00:07:02,000
enough

189
00:07:02,000 --> 00:07:06,160
it's not about age of the universe hard

190
00:07:06,160 --> 00:07:09,039
it's more about having an attacker

191
00:07:09,039 --> 00:07:11,360
pouring tons of resources and tons of

192
00:07:11,360 --> 00:07:11,919
knowledge

193
00:07:11,919 --> 00:07:14,560
in order to to do little things with a

194
00:07:14,560 --> 00:07:15,440
white box

195
00:07:15,440 --> 00:07:17,440
and we don't want to be easy to break

196
00:07:17,440 --> 00:07:19,520
but we want to be hard enough

197
00:07:19,520 --> 00:07:21,360
and it's a compromise at the end of the

198
00:07:21,360 --> 00:07:23,039
day

199
00:07:23,039 --> 00:07:26,479
so let's start also on how to build a

200
00:07:26,479 --> 00:07:27,199
white box

201
00:07:27,199 --> 00:07:31,039
a very high level um way of thinking

202
00:07:31,039 --> 00:07:31,919
what happens

203
00:07:31,919 --> 00:07:34,800
into these these magic implementations

204
00:07:34,800 --> 00:07:36,639
for example here we have a cryptographic

205
00:07:36,639 --> 00:07:38,000
function

206
00:07:38,000 --> 00:07:40,560
that gets a key data and outputs for

207
00:07:40,560 --> 00:07:42,080
example a plain text

208
00:07:42,080 --> 00:07:44,240
and we are going to replace this

209
00:07:44,240 --> 00:07:47,039
cryptographic function with a table

210
00:07:47,039 --> 00:07:49,199
here we have the same function but

211
00:07:49,199 --> 00:07:50,160
pre-computed

212
00:07:50,160 --> 00:07:53,840
in a large table and then the input data

213
00:07:53,840 --> 00:07:54,720
will index

214
00:07:54,720 --> 00:07:56,960
this this table and we'll get the right

215
00:07:56,960 --> 00:07:58,400
output but

216
00:07:58,400 --> 00:08:01,680
as we have inside uh this pre-compute

217
00:08:01,680 --> 00:08:04,080
table only the results it's it will be

218
00:08:04,080 --> 00:08:05,840
really hard for an attacker to extract

219
00:08:05,840 --> 00:08:06,720
the key

220
00:08:06,720 --> 00:08:09,120
in this kind of white boxes the key is

221
00:08:09,120 --> 00:08:10,800
really implicit and the attacker

222
00:08:10,800 --> 00:08:13,680
has like a lot of difficulty to extract

223
00:08:13,680 --> 00:08:14,479
the key

224
00:08:14,479 --> 00:08:17,440
but in practice we don't do that for

225
00:08:17,440 --> 00:08:21,280
large functions for example for is 128

226
00:08:21,280 --> 00:08:23,680
it's like petabytes tables so it's not

227
00:08:23,680 --> 00:08:24,800
very practical

228
00:08:24,800 --> 00:08:26,720
so what we like to do when we are

229
00:08:26,720 --> 00:08:28,879
working for example with is

230
00:08:28,879 --> 00:08:31,759
is like we are going to split the

231
00:08:31,759 --> 00:08:32,479
algorithm

232
00:08:32,479 --> 00:08:34,559
into smaller operations and we are going

233
00:08:34,559 --> 00:08:35,919
to work on

234
00:08:35,919 --> 00:08:39,279
intermediary states internal states

235
00:08:39,279 --> 00:08:40,880
and we are going to have way more

236
00:08:40,880 --> 00:08:42,559
practical white boxes

237
00:08:42,559 --> 00:08:45,680
here and what we can do when we work

238
00:08:45,680 --> 00:08:46,399
with that

239
00:08:46,399 --> 00:08:49,680
is even having the key

240
00:08:49,680 --> 00:08:52,080
as a secondary input of some tables for

241
00:08:52,080 --> 00:08:53,760
example or having the key

242
00:08:53,760 --> 00:08:56,160
modifying the tables and if we protect

243
00:08:56,160 --> 00:08:57,600
the key in some ways

244
00:08:57,600 --> 00:09:00,560
we can have a dynamic white box like an

245
00:09:00,560 --> 00:09:01,040
ais

246
00:09:01,040 --> 00:09:02,959
white box from which we can change the

247
00:09:02,959 --> 00:09:04,399
key and

248
00:09:04,399 --> 00:09:06,399
here we have a protected key from which

249
00:09:06,399 --> 00:09:08,000
we can't extract the key so there is

250
00:09:08,000 --> 00:09:08,399
like

251
00:09:08,399 --> 00:09:10,959
compromise and things we can do to play

252
00:09:10,959 --> 00:09:12,399
with so

253
00:09:12,399 --> 00:09:15,040
this is how we build white boxes to sum

254
00:09:15,040 --> 00:09:15,680
up uh

255
00:09:15,680 --> 00:09:18,399
this example we are working often when

256
00:09:18,399 --> 00:09:19,200
we

257
00:09:19,200 --> 00:09:20,800
work with white boxes with uncoded

258
00:09:20,800 --> 00:09:22,399
internal states

259
00:09:22,399 --> 00:09:24,320
we tabulate small operations to process

260
00:09:24,320 --> 00:09:27,040
these states and this gives a lot of

261
00:09:27,040 --> 00:09:28,880
margin to the attacker to change our

262
00:09:28,880 --> 00:09:32,399
white box so often we need to protect

263
00:09:32,399 --> 00:09:34,720
our internal operations and how the

264
00:09:34,720 --> 00:09:37,200
states are processed with

265
00:09:37,200 --> 00:09:39,440
obfuscation and mathematics and things

266
00:09:39,440 --> 00:09:41,120
like that

267
00:09:41,120 --> 00:09:44,000
what i what i want you to understand

268
00:09:44,000 --> 00:09:44,959
here is like

269
00:09:44,959 --> 00:09:47,360
uh it's a security size performance

270
00:09:47,360 --> 00:09:48,640
compromise because we've

271
00:09:48,640 --> 00:09:51,120
we've seen like kind of perfect white

272
00:09:51,120 --> 00:09:51,760
box with

273
00:09:51,760 --> 00:09:54,480
unpractical size like petabytes table

274
00:09:54,480 --> 00:09:56,240
and on the other side there is like the

275
00:09:56,240 --> 00:09:57,200
fastest

276
00:09:57,200 --> 00:09:59,920
implementation we can find like open ssl

277
00:09:59,920 --> 00:10:00,480
is like

278
00:10:00,480 --> 00:10:02,480
very very good implementation in terms

279
00:10:02,480 --> 00:10:04,320
of size and performance

280
00:10:04,320 --> 00:10:07,440
but the the end user wants kind of a

281
00:10:07,440 --> 00:10:08,320
trade-off

282
00:10:08,320 --> 00:10:11,120
between these two extremes and a good

283
00:10:11,120 --> 00:10:12,640
way to understand

284
00:10:12,640 --> 00:10:15,360
why and what is this kind of trade-off

285
00:10:15,360 --> 00:10:16,880
is to take an example

286
00:10:16,880 --> 00:10:20,640
with digital white management uh digital

287
00:10:20,640 --> 00:10:22,320
white management

288
00:10:22,320 --> 00:10:24,560
really likes white boxes and here for

289
00:10:24,560 --> 00:10:26,399
example in the third line

290
00:10:26,399 --> 00:10:28,320
you see there is some data like a movie

291
00:10:28,320 --> 00:10:30,079
for example that is encrypted by the

292
00:10:30,079 --> 00:10:32,320
server and sent to a client

293
00:10:32,320 --> 00:10:34,240
so when you decreate a movie with a

294
00:10:34,240 --> 00:10:36,160
white box you need

295
00:10:36,160 --> 00:10:37,519
really good performances because the

296
00:10:37,519 --> 00:10:40,320
movie is really big but for example the

297
00:10:40,320 --> 00:10:43,519
several stage on the top in range and

298
00:10:43,519 --> 00:10:44,240
red

299
00:10:44,240 --> 00:10:46,720
that gets the key to decrypt the movie

300
00:10:46,720 --> 00:10:48,320
for example only process

301
00:10:48,320 --> 00:10:51,200
a very few bytes of data so you can have

302
00:10:51,200 --> 00:10:51,920
you can have

303
00:10:51,920 --> 00:10:54,800
a strong sense of security here and have

304
00:10:54,800 --> 00:10:56,640
a different trade of

305
00:10:56,640 --> 00:10:59,360
more more big white boxes for example or

306
00:10:59,360 --> 00:11:01,040
white boxes with more counter measure

307
00:11:01,040 --> 00:11:03,200
more slow

308
00:11:03,200 --> 00:11:06,959
so this was everything i had to say

309
00:11:06,959 --> 00:11:08,959
uh during the introduction now you know

310
00:11:08,959 --> 00:11:10,160
about

311
00:11:10,160 --> 00:11:13,279
what a white box is a quick way how to

312
00:11:13,279 --> 00:11:14,800
build white boxes and what

313
00:11:14,800 --> 00:11:17,120
are the trade-offs we want to do and now

314
00:11:17,120 --> 00:11:18,800
we are going to switch to attacking

315
00:11:18,800 --> 00:11:21,040
and defense on white boxes and we are

316
00:11:21,040 --> 00:11:22,079
going to start with

317
00:11:22,079 --> 00:11:24,959
high level attacks that works on all

318
00:11:24,959 --> 00:11:26,160
kinds of white boxes

319
00:11:26,160 --> 00:11:28,800
then switch to some algorithm we are

320
00:11:28,800 --> 00:11:30,480
going to start with code lifting

321
00:11:30,480 --> 00:11:34,000
code lifting uh is is a really nice

322
00:11:34,000 --> 00:11:35,040
attacks

323
00:11:35,040 --> 00:11:37,600
a really nice attack imagine you you

324
00:11:37,600 --> 00:11:39,519
want to steal a movie again

325
00:11:39,519 --> 00:11:41,519
you have a very complex white box that

326
00:11:41,519 --> 00:11:43,279
equips the media stream

327
00:11:43,279 --> 00:11:45,760
and you are an attacker but a lazy

328
00:11:45,760 --> 00:11:47,600
attacker and

329
00:11:47,600 --> 00:11:49,680
you don't want to understand the content

330
00:11:49,680 --> 00:11:51,360
of the white box but this is like no

331
00:11:51,360 --> 00:11:52,480
problem

332
00:11:52,480 --> 00:11:55,600
you put a curtain on your white box and

333
00:11:55,600 --> 00:11:58,959
you're like no i can still steal the

334
00:11:58,959 --> 00:12:00,639
movie because i have

335
00:12:00,639 --> 00:12:03,839
some kind of big big big black box in

336
00:12:03,839 --> 00:12:06,320
which there is like some small white box

337
00:12:06,320 --> 00:12:09,440
and from this white black box i i

338
00:12:09,440 --> 00:12:12,079
i get a decrypted movie and at the end

339
00:12:12,079 --> 00:12:13,519
you perform the attack

340
00:12:13,519 --> 00:12:15,440
like stealing the movie but without

341
00:12:15,440 --> 00:12:16,639
extracting the key

342
00:12:16,639 --> 00:12:19,519
but do you need the key here no you have

343
00:12:19,519 --> 00:12:21,200
the movie so it's fine

344
00:12:21,200 --> 00:12:23,040
and in practice code lifting is this

345
00:12:23,040 --> 00:12:24,320
kind of stuff where

346
00:12:24,320 --> 00:12:26,880
we extract useful high-level primitives

347
00:12:26,880 --> 00:12:28,399
from the white box

348
00:12:28,399 --> 00:12:32,160
and then we use these primitives as

349
00:12:32,160 --> 00:12:34,160
to achieve the desired result here

350
00:12:34,160 --> 00:12:35,519
stealing a movie

351
00:12:35,519 --> 00:12:38,480
and in practice this kind of attacks uh

352
00:12:38,480 --> 00:12:39,519
often

353
00:12:39,519 --> 00:12:42,240
attacks that even with a good quality

354
00:12:42,240 --> 00:12:43,440
white box

355
00:12:43,440 --> 00:12:46,320
uh the attacker without too much

356
00:12:46,320 --> 00:12:48,399
in-depth analysis can instrument your

357
00:12:48,399 --> 00:12:49,040
white box

358
00:12:49,040 --> 00:12:52,240
and do things he wants it to do

359
00:12:52,240 --> 00:12:54,800
and the countermeasure here is like when

360
00:12:54,800 --> 00:12:56,480
we extract the white box

361
00:12:56,480 --> 00:12:58,959
we want it to be bonded to its

362
00:12:58,959 --> 00:13:00,560
environment

363
00:13:00,560 --> 00:13:03,600
and the code it's executing in

364
00:13:03,600 --> 00:13:05,839
in order to like when we extract it it

365
00:13:05,839 --> 00:13:07,680
changes its behavior

366
00:13:07,680 --> 00:13:10,560
um often when you have a white box you

367
00:13:10,560 --> 00:13:10,959
must

368
00:13:10,959 --> 00:13:13,360
ask yourself explicitly is your white

369
00:13:13,360 --> 00:13:14,079
box

370
00:13:14,079 --> 00:13:16,800
protected against code lifting because

371
00:13:16,800 --> 00:13:18,720
this kind of protection are not trivial

372
00:13:18,720 --> 00:13:20,639
to implement so if you have

373
00:13:20,639 --> 00:13:22,320
if you don't have the feeling of taking

374
00:13:22,320 --> 00:13:24,160
action to prevent

375
00:13:24,160 --> 00:13:26,240
this kind of attacks maybe you need to

376
00:13:26,240 --> 00:13:27,360
ask yourself

377
00:13:27,360 --> 00:13:30,480
i am am i protected and

378
00:13:30,480 --> 00:13:33,120
now we'll switch to to data flow in

379
00:13:33,120 --> 00:13:34,079
white boxes

380
00:13:34,079 --> 00:13:37,440
it's kind of code lifting on steroids

381
00:13:37,440 --> 00:13:39,519
often when we whitebox stuff we have

382
00:13:39,519 --> 00:13:40,720
world protocols

383
00:13:40,720 --> 00:13:43,279
we are working with with more than one

384
00:13:43,279 --> 00:13:44,240
primitives

385
00:13:44,240 --> 00:13:46,839
sometimes digital signatures key

386
00:13:46,839 --> 00:13:49,120
exchanges complex key derivation

387
00:13:49,120 --> 00:13:49,920
processes

388
00:13:49,920 --> 00:13:52,560
these are are very very common in in

389
00:13:52,560 --> 00:13:53,600
white boxes

390
00:13:53,600 --> 00:13:56,560
white boxes teams schemes and the

391
00:13:56,560 --> 00:13:57,199
example

392
00:13:57,199 --> 00:13:59,680
is again a digital right management for

393
00:13:59,680 --> 00:14:01,279
example we have here

394
00:14:01,279 --> 00:14:03,279
both the server and the client sharing a

395
00:14:03,279 --> 00:14:04,399
master key

396
00:14:04,399 --> 00:14:07,920
the master key is used

397
00:14:07,920 --> 00:14:10,959
to decrypt and protect a pair client key

398
00:14:10,959 --> 00:14:12,880
and then the pair client key is used to

399
00:14:12,880 --> 00:14:14,720
decrypt and protect a pair

400
00:14:14,720 --> 00:14:18,320
content key a per movie key and

401
00:14:18,320 --> 00:14:20,959
now the movie key is used to decrypt the

402
00:14:20,959 --> 00:14:21,920
plain text data

403
00:14:21,920 --> 00:14:24,560
and here the attack an attacker can do

404
00:14:24,560 --> 00:14:25,040
is

405
00:14:25,040 --> 00:14:26,959
the attacker comes looks at your white

406
00:14:26,959 --> 00:14:28,959
box see there's like two functions

407
00:14:28,959 --> 00:14:31,279
one then decrypt and protect for example

408
00:14:31,279 --> 00:14:33,040
is and other things

409
00:14:33,040 --> 00:14:36,560
and the other one that decrypt the movie

410
00:14:36,560 --> 00:14:39,040
just doing is and then giving a plain

411
00:14:39,040 --> 00:14:39,600
text

412
00:14:39,600 --> 00:14:41,440
a movie that you can play on tv for

413
00:14:41,440 --> 00:14:43,199
example and here the attacker will

414
00:14:43,199 --> 00:14:44,000
modify the data

415
00:14:44,000 --> 00:14:46,959
flow to extract an unprotected copy of

416
00:14:46,959 --> 00:14:49,199
the client key for example

417
00:14:49,199 --> 00:14:51,600
by using the second function instead of

418
00:14:51,600 --> 00:14:52,720
the first function

419
00:14:52,720 --> 00:14:56,079
in the in the order of operation for

420
00:14:56,079 --> 00:14:57,199
example

421
00:14:57,199 --> 00:15:00,639
and uh the solution to that uh sometimes

422
00:15:00,639 --> 00:15:03,360
cod lifting protections help but these

423
00:15:03,360 --> 00:15:04,800
are not

424
00:15:04,800 --> 00:15:06,880
only mitigate the problem the problem in

425
00:15:06,880 --> 00:15:07,920
some ways

426
00:15:07,920 --> 00:15:09,839
and what you really need to do is like

427
00:15:09,839 --> 00:15:11,760
tweaking how which

428
00:15:11,760 --> 00:15:14,480
each key is unwrapped how each key is

429
00:15:14,480 --> 00:15:15,600
protected

430
00:15:15,600 --> 00:15:18,959
in order to enforce the data flow

431
00:15:18,959 --> 00:15:22,079
enforce the order of operations

432
00:15:22,079 --> 00:15:25,120
and the at the end of the day you must

433
00:15:25,120 --> 00:15:26,160
ask yourself

434
00:15:26,160 --> 00:15:28,800
a similar question is my white box data

435
00:15:28,800 --> 00:15:30,320
flow properly enforced

436
00:15:30,320 --> 00:15:33,440
because if if it's not popular enforced

437
00:15:33,440 --> 00:15:35,279
you can have a lot of math

438
00:15:35,279 --> 00:15:38,320
mathematics inside your white box but it

439
00:15:38,320 --> 00:15:40,560
won't be protected against this kind of

440
00:15:40,560 --> 00:15:43,519
manipulations from a lazy attacker

441
00:15:43,519 --> 00:15:46,240
and now we are we are going to switch uh

442
00:15:46,240 --> 00:15:46,560
to

443
00:15:46,560 --> 00:15:50,880
ies whitebox uh the gis whitebox

444
00:15:50,880 --> 00:15:53,040
is kind of interesting because there is

445
00:15:53,040 --> 00:15:55,120
like a long history of literature

446
00:15:55,120 --> 00:15:56,800
published on ies

447
00:15:56,800 --> 00:16:00,000
white boxes has been started with is nds

448
00:16:00,000 --> 00:16:03,120
and now we have for example 20 years

449
00:16:03,120 --> 00:16:06,800
of people publishing designs of

450
00:16:06,800 --> 00:16:10,000
ies white boxes and although we have 20

451
00:16:10,000 --> 00:16:12,480
years of people breaking all the designs

452
00:16:12,480 --> 00:16:15,360
and often it's like let's take a look to

453
00:16:15,360 --> 00:16:16,560
the

454
00:16:16,560 --> 00:16:19,279
the operations we are going to the table

455
00:16:19,279 --> 00:16:20,720
we in the tables

456
00:16:20,720 --> 00:16:22,560
let's take a look to the internal state

457
00:16:22,560 --> 00:16:24,959
and then do maths do mathematics

458
00:16:24,959 --> 00:16:27,759
in order to extract the key for example

459
00:16:27,759 --> 00:16:30,240
this kind of attacks

460
00:16:30,240 --> 00:16:32,639
often need to first reverse all

461
00:16:32,639 --> 00:16:34,240
obfuscation layers

462
00:16:34,240 --> 00:16:36,639
to access the underlying design to

463
00:16:36,639 --> 00:16:38,399
access the underlying tables

464
00:16:38,399 --> 00:16:41,759
of of the white box then you need to

465
00:16:41,759 --> 00:16:43,920
understand and implement the

466
00:16:43,920 --> 00:16:45,600
corresponding academic papers

467
00:16:45,600 --> 00:16:48,240
it's like people publish paper papers

468
00:16:48,240 --> 00:16:49,600
about how to break

469
00:16:49,600 --> 00:16:51,440
this design for example but they didn't

470
00:16:51,440 --> 00:16:52,959
publish the tool

471
00:16:52,959 --> 00:16:55,440
and now you need to tweak the attack in

472
00:16:55,440 --> 00:16:56,320
order

473
00:16:56,320 --> 00:16:59,040
to fit the specific the specificities of

474
00:16:59,040 --> 00:16:59,920
your design

475
00:16:59,920 --> 00:17:01,839
of the design you the of the white box

476
00:17:01,839 --> 00:17:02,959
you're attacking

477
00:17:02,959 --> 00:17:06,400
because often vendors like put their own

478
00:17:06,400 --> 00:17:08,559
spices into their array box and do

479
00:17:08,559 --> 00:17:09,520
tweaks

480
00:17:09,520 --> 00:17:12,480
so it won't work in the first on the

481
00:17:12,480 --> 00:17:13,919
first try

482
00:17:13,919 --> 00:17:15,919
but at the end of the day you can still

483
00:17:15,919 --> 00:17:17,919
do algebraic attacks mathematical

484
00:17:17,919 --> 00:17:18,799
attacks

485
00:17:18,799 --> 00:17:21,199
but these are time consuming as these

486
00:17:21,199 --> 00:17:22,480
are not off the shelf

487
00:17:22,480 --> 00:17:24,559
and require a large effort or reference

488
00:17:24,559 --> 00:17:25,760
engineering

489
00:17:25,760 --> 00:17:29,039
so as an attacker i don't want a

490
00:17:29,039 --> 00:17:31,440
hard enough whitebox that requires a lot

491
00:17:31,440 --> 00:17:32,720
of reverse engineering

492
00:17:32,720 --> 00:17:35,360
a lot of mathematics i want a cheaper

493
00:17:35,360 --> 00:17:35,919
attack

494
00:17:35,919 --> 00:17:37,760
and can we do cheaper in terms of

495
00:17:37,760 --> 00:17:40,640
attacks on ies and the answer is yes

496
00:17:40,640 --> 00:17:43,280
and the answer will be often yes on all

497
00:17:43,280 --> 00:17:45,679
kinds of white boxes and the trick here

498
00:17:45,679 --> 00:17:47,760
is to inspire yourself from the hardware

499
00:17:47,760 --> 00:17:48,720
world

500
00:17:48,720 --> 00:17:51,440
it's like we we know how to attack white

501
00:17:51,440 --> 00:17:53,600
boxes by observing for example the power

502
00:17:53,600 --> 00:17:55,200
consumption of a ship

503
00:17:55,200 --> 00:17:58,320
uh we are we know how to attack like

504
00:17:58,320 --> 00:18:01,840
hardware implementation of is

505
00:18:01,840 --> 00:18:03,919
by perturbing their behavior like

506
00:18:03,919 --> 00:18:05,120
shooting lasers

507
00:18:05,120 --> 00:18:08,480
at is computing ships and

508
00:18:08,480 --> 00:18:11,840
from this attacks known in the hardware

509
00:18:11,840 --> 00:18:12,480
world

510
00:18:12,480 --> 00:18:15,760
we want to build a white box attacks

511
00:18:15,760 --> 00:18:16,240
because

512
00:18:16,240 --> 00:18:19,280
these have very few assumptions on the

513
00:18:19,280 --> 00:18:21,280
targets it's like as long as

514
00:18:21,280 --> 00:18:22,960
this piece of code is computing some

515
00:18:22,960 --> 00:18:25,760
kind of is we can attack this kind of

516
00:18:25,760 --> 00:18:28,960
piece of code and it also enables

517
00:18:28,960 --> 00:18:31,200
some automation and as an attacker a

518
00:18:31,200 --> 00:18:32,880
lazy attacker i really like

519
00:18:32,880 --> 00:18:35,600
automation and we see for example by

520
00:18:35,600 --> 00:18:36,559
looking at

521
00:18:36,559 --> 00:18:39,679
tracing an attack

522
00:18:39,679 --> 00:18:42,640
that has been introduced in 2015 by some

523
00:18:42,640 --> 00:18:43,840
names

524
00:18:43,840 --> 00:18:45,520
on the screen that is called

525
00:18:45,520 --> 00:18:47,280
differential computation analysis

526
00:18:47,280 --> 00:18:49,679
and this is like exactly the concept we

527
00:18:49,679 --> 00:18:51,440
exposed in the previous slides

528
00:18:51,440 --> 00:18:54,960
the previous slide is like

529
00:18:54,960 --> 00:18:56,640
we have a classical attack on the

530
00:18:56,640 --> 00:18:58,880
hardware implementation of ies

531
00:18:58,880 --> 00:19:01,360
it's called differential power analysis

532
00:19:01,360 --> 00:19:02,559
we are going to trace

533
00:19:02,559 --> 00:19:05,760
the power of a chip

534
00:19:05,760 --> 00:19:08,799
and going to extract the key from the

535
00:19:08,799 --> 00:19:10,480
implementation and here

536
00:19:10,480 --> 00:19:14,400
we can't trace the power of white box

537
00:19:14,400 --> 00:19:16,400
but we can trace the execution and then

538
00:19:16,400 --> 00:19:18,000
transform the distress

539
00:19:18,000 --> 00:19:21,039
uh by serializing the bits in order to

540
00:19:21,039 --> 00:19:22,559
get something that looks like

541
00:19:22,559 --> 00:19:25,200
a power analysis and we can apply the

542
00:19:25,200 --> 00:19:27,120
same tools we we had before in the

543
00:19:27,120 --> 00:19:28,240
hardware world

544
00:19:28,240 --> 00:19:31,919
in order to break uh is implementation

545
00:19:31,919 --> 00:19:32,640
so

546
00:19:32,640 --> 00:19:35,919
and here we broke whitebox successfully

547
00:19:35,919 --> 00:19:38,960
and this kind of attack don't require

548
00:19:38,960 --> 00:19:41,840
uh understanding the complex design here

549
00:19:41,840 --> 00:19:43,440
and don't require big reverse

550
00:19:43,440 --> 00:19:44,880
engineering

551
00:19:44,880 --> 00:19:48,160
so the really nice thing today with dca

552
00:19:48,160 --> 00:19:50,000
is like we started with this kind of

553
00:19:50,000 --> 00:19:51,280
empirical results

554
00:19:51,280 --> 00:19:54,160
and now this has been completed by a lot

555
00:19:54,160 --> 00:19:54,480
of

556
00:19:54,480 --> 00:19:56,000
papers that brought mathematical

557
00:19:56,000 --> 00:19:57,679
foundation generalization

558
00:19:57,679 --> 00:20:00,799
optimization and now we have many

559
00:20:00,799 --> 00:20:02,799
open source tools tools like side

560
00:20:02,799 --> 00:20:05,520
channel marvels and others

561
00:20:05,520 --> 00:20:08,880
to automate this kind of attack and

562
00:20:08,880 --> 00:20:10,640
know that we automated this kind of

563
00:20:10,640 --> 00:20:11,919
attacks we took

564
00:20:11,919 --> 00:20:14,799
this very hard to break break kind of

565
00:20:14,799 --> 00:20:15,760
white boxes

566
00:20:15,760 --> 00:20:18,559
and we brought it down to a skip kitty

567
00:20:18,559 --> 00:20:19,280
level

568
00:20:19,280 --> 00:20:22,480
like let's download the tool and

569
00:20:22,480 --> 00:20:25,600
let's tweak the tool until it works

570
00:20:25,600 --> 00:20:27,520
uh and it's very interesting from the

571
00:20:27,520 --> 00:20:29,520
attacking side and there are like

572
00:20:29,520 --> 00:20:31,520
other kind of attacks we can do in the

573
00:20:31,520 --> 00:20:32,880
in a similar fashion

574
00:20:32,880 --> 00:20:35,760
for example we have fault injection on

575
00:20:35,760 --> 00:20:38,559
iis we like to fold

576
00:20:38,559 --> 00:20:40,720
on the last front of the function

577
00:20:40,720 --> 00:20:42,799
statically by modifying the

578
00:20:42,799 --> 00:20:45,280
by the the tables we have in the white

579
00:20:45,280 --> 00:20:47,200
box or dynamically

580
00:20:47,200 --> 00:20:49,280
with some kind of instrumentation and

581
00:20:49,280 --> 00:20:51,200
from that we can work over the key

582
00:20:51,200 --> 00:20:54,640
and today like five years later

583
00:20:54,640 --> 00:20:56,880
we have a lot of optimization and also a

584
00:20:56,880 --> 00:20:58,000
lot of tooling

585
00:20:58,000 --> 00:20:59,919
and this kind of attack can be also

586
00:20:59,919 --> 00:21:02,720
automated blindly and

587
00:21:02,720 --> 00:21:04,640
at the end of the day it's like the same

588
00:21:04,640 --> 00:21:06,000
the same thing

589
00:21:06,000 --> 00:21:08,640
is like we we open the gates to script

590
00:21:08,640 --> 00:21:09,200
kiddies

591
00:21:09,200 --> 00:21:11,039
because we have good tooling and good

592
00:21:11,039 --> 00:21:12,720
generic attacks and we don't need to

593
00:21:12,720 --> 00:21:14,720
understand the underlying design

594
00:21:14,720 --> 00:21:18,240
so here like it's like midway conclusion

595
00:21:18,240 --> 00:21:21,280
on on this i uh this building white box

596
00:21:21,280 --> 00:21:24,080
uh part attacking and defense when you

597
00:21:24,080 --> 00:21:25,200
use the white box

598
00:21:25,200 --> 00:21:27,360
uh when you build one uh you you need to

599
00:21:27,360 --> 00:21:29,520
have some kind of ask your chef

600
00:21:29,520 --> 00:21:32,960
ask yourself checklist this ask yourself

601
00:21:32,960 --> 00:21:35,679
checklist has already in it is my red

602
00:21:35,679 --> 00:21:36,720
box protected

603
00:21:36,720 --> 00:21:39,919
against cod lifting is my red box

604
00:21:39,919 --> 00:21:42,720
data flow properly enforced and now we

605
00:21:42,720 --> 00:21:43,440
have like

606
00:21:43,440 --> 00:21:46,559
pair algorithm questions like my is

607
00:21:46,559 --> 00:21:47,280
white box

608
00:21:47,280 --> 00:21:49,760
is it protected against dca is it

609
00:21:49,760 --> 00:21:50,799
protecting

610
00:21:50,799 --> 00:21:53,840
against dfa and if you have several

611
00:21:53,840 --> 00:21:55,919
algorithms or several techniques you use

612
00:21:55,919 --> 00:21:56,720
in your box

613
00:21:56,720 --> 00:21:58,880
often you you you need to to have your

614
00:21:58,880 --> 00:22:00,000
own list

615
00:22:00,000 --> 00:22:02,320
and so feel free to add your own items

616
00:22:02,320 --> 00:22:03,120
to this list

617
00:22:03,120 --> 00:22:05,760
and feel free to inspire yourself from

618
00:22:05,760 --> 00:22:06,880
the standards

619
00:22:06,880 --> 00:22:09,840
like having obfuscation or breaking the

620
00:22:09,840 --> 00:22:11,200
attackers tools

621
00:22:11,200 --> 00:22:13,840
and what you need to understand is like

622
00:22:13,840 --> 00:22:15,120
if you don't protect

623
00:22:15,120 --> 00:22:17,919
explicitly against this kind of attacks

624
00:22:17,919 --> 00:22:18,880
code lifting

625
00:22:18,880 --> 00:22:22,400
data flow dci dfa your white box

626
00:22:22,400 --> 00:22:25,440
will be will likely be an easy break

627
00:22:25,440 --> 00:22:27,840
and this is sad because we want strong

628
00:22:27,840 --> 00:22:29,280
white box

629
00:22:29,280 --> 00:22:31,360
and now we are going to switch to

630
00:22:31,360 --> 00:22:32,320
another car

631
00:22:32,320 --> 00:22:35,360
another kind of algorithm a more exotic

632
00:22:35,360 --> 00:22:38,799
exotic one ecdsa

633
00:22:38,799 --> 00:22:41,600
is ecgse is a bit more exotic in the

634
00:22:41,600 --> 00:22:42,640
white box field

635
00:22:42,640 --> 00:22:45,760
because we don't find it

636
00:22:45,760 --> 00:22:49,120
in in all white box we

637
00:22:49,120 --> 00:22:52,240
we talked about decrypting movies maybe

638
00:22:52,240 --> 00:22:54,640
encrypting payloads but why

639
00:22:54,640 --> 00:22:58,799
signaling stuff in a white box and here

640
00:22:58,799 --> 00:23:01,200
this kind of algorithm we put into white

641
00:23:01,200 --> 00:23:02,000
boxes

642
00:23:02,000 --> 00:23:05,520
are often from the need of end-to-end

643
00:23:05,520 --> 00:23:06,720
white box

644
00:23:06,720 --> 00:23:09,520
is like the user don't pick the protocol

645
00:23:09,520 --> 00:23:09,919
it's

646
00:23:09,919 --> 00:23:12,640
he's implementing and uh so the user

647
00:23:12,640 --> 00:23:14,240
need to protect his cryptographic

648
00:23:14,240 --> 00:23:15,440
implementation

649
00:23:15,440 --> 00:23:18,640
and he if the protection is like only on

650
00:23:18,640 --> 00:23:19,760
is

651
00:23:19,760 --> 00:23:22,159
the rest of the protocol will be broken

652
00:23:22,159 --> 00:23:24,480
so we often need end-to-end white boxes

653
00:23:24,480 --> 00:23:24,960
and

654
00:23:24,960 --> 00:23:27,200
sometimes especially in the banking

655
00:23:27,200 --> 00:23:28,080
industry

656
00:23:28,080 --> 00:23:31,440
we get ecdsa sometimes inside

657
00:23:31,440 --> 00:23:34,720
and how to build an ecdsa white box

658
00:23:34,720 --> 00:23:37,120
it's a good question you can try to take

659
00:23:37,120 --> 00:23:38,960
a look at the literature but you see

660
00:23:38,960 --> 00:23:39,360
that

661
00:23:39,360 --> 00:23:42,320
a few people publish designs like no one

662
00:23:42,320 --> 00:23:42,880
but

663
00:23:42,880 --> 00:23:44,799
there are still commercially available

664
00:23:44,799 --> 00:23:47,120
ones so

665
00:23:47,120 --> 00:23:48,880
you don't know how to build a white box

666
00:23:48,880 --> 00:23:50,159
but maybe you can

667
00:23:50,159 --> 00:23:53,840
know how to attack an sdi say white box

668
00:23:53,840 --> 00:23:56,480
you don't know how how the design is

669
00:23:56,480 --> 00:23:57,600
made but maybe

670
00:23:57,600 --> 00:23:59,919
by inspiring yourself from hardware

671
00:23:59,919 --> 00:24:00,799
attacks

672
00:24:00,799 --> 00:24:02,799
without knowing how you can build an

673
00:24:02,799 --> 00:24:04,240
hcsa whitebox

674
00:24:04,240 --> 00:24:06,799
you can attack maybe the cdsa whitebox

675
00:24:06,799 --> 00:24:07,520
so

676
00:24:07,520 --> 00:24:10,080
we'll go into that after a small crash

677
00:24:10,080 --> 00:24:11,760
course on ecgsa

678
00:24:11,760 --> 00:24:14,720
so ecdsa is it's a signature algorithm

679
00:24:14,720 --> 00:24:15,840
we have a message

680
00:24:15,840 --> 00:24:19,200
we want to sign this message

681
00:24:19,200 --> 00:24:22,480
with a private key and

682
00:24:22,480 --> 00:24:24,640
before doing the signature we are going

683
00:24:24,640 --> 00:24:25,840
to pick

684
00:24:25,840 --> 00:24:29,279
a randomizer a secret a secret unique

685
00:24:29,279 --> 00:24:32,000
random k and we are going to produ to

686
00:24:32,000 --> 00:24:32,720
compute

687
00:24:32,720 --> 00:24:35,919
um an exponentiation a

688
00:24:35,919 --> 00:24:38,000
analytic curve exponentiation kind of

689
00:24:38,000 --> 00:24:40,240
thing there are like double ends

690
00:24:40,240 --> 00:24:42,640
and things inside but we are not going

691
00:24:42,640 --> 00:24:44,799
into the details of the mathematics

692
00:24:44,799 --> 00:24:47,279
just know that that there is this this

693
00:24:47,279 --> 00:24:48,159
randomizer

694
00:24:48,159 --> 00:24:51,279
and this randomizer needs to be a secret

695
00:24:51,279 --> 00:24:54,400
and needs to be unique per message

696
00:24:54,400 --> 00:24:56,159
and now we are going to compute the

697
00:24:56,159 --> 00:24:58,559
signature and the signature is computed

698
00:24:58,559 --> 00:25:00,320
from the randomizer and the message

699
00:25:00,320 --> 00:25:03,279
and at the end of the day you publish

700
00:25:03,279 --> 00:25:03,840
the

701
00:25:03,840 --> 00:25:07,200
deleter the result of the exponential

702
00:25:07,200 --> 00:25:08,640
and the signature

703
00:25:08,640 --> 00:25:10,960
and we are not going into the details of

704
00:25:10,960 --> 00:25:12,640
the validation and everything else

705
00:25:12,640 --> 00:25:13,200
because

706
00:25:13,200 --> 00:25:16,400
only knowing that this randomizer exists

707
00:25:16,400 --> 00:25:18,960
and that we need to compute signatures

708
00:25:18,960 --> 00:25:20,799
here

709
00:25:20,799 --> 00:25:24,240
we can break ecsi white boxes

710
00:25:24,240 --> 00:25:26,799
just by reading a bit of literature on

711
00:25:26,799 --> 00:25:28,799
ecgsa hardware attacks

712
00:25:28,799 --> 00:25:31,520
and when i say literature is often just

713
00:25:31,520 --> 00:25:32,960
open the wikipedia page

714
00:25:32,960 --> 00:25:35,360
and you see that the textbook fault

715
00:25:35,360 --> 00:25:36,000
injection

716
00:25:36,000 --> 00:25:42,400
you can do on ecdsa is like shooting

717
00:25:42,400 --> 00:25:44,720
what do i mean by shooting lasers is

718
00:25:44,720 --> 00:25:47,120
like from wikipedia you need a regular

719
00:25:47,120 --> 00:25:47,760
signature

720
00:25:47,760 --> 00:25:50,240
computed like with the real message and

721
00:25:50,240 --> 00:25:51,279
you need

722
00:25:51,279 --> 00:25:53,520
another signature of faulted signature

723
00:25:53,520 --> 00:25:56,240
with like a fault on the message and

724
00:25:56,240 --> 00:25:58,640
the attack will work will enable you to

725
00:25:58,640 --> 00:26:01,039
extract the private key from these two

726
00:26:01,039 --> 00:26:03,919
signatures these two public values if

727
00:26:03,919 --> 00:26:05,679
and only if they use

728
00:26:05,679 --> 00:26:09,440
the same k and the same randomizer but

729
00:26:09,440 --> 00:26:12,480
different messages like m and n prime

730
00:26:12,480 --> 00:26:14,880
and here we can just stop and before

731
00:26:14,880 --> 00:26:16,559
shooting laser before attacking the

732
00:26:16,559 --> 00:26:17,919
white box

733
00:26:17,919 --> 00:26:21,200
we can uh try to understand how someone

734
00:26:21,200 --> 00:26:22,799
building a white box

735
00:26:22,799 --> 00:26:25,360
will pick something at random because

736
00:26:25,360 --> 00:26:26,799
the randomizer

737
00:26:26,799 --> 00:26:29,520
car k is something that we picked at

738
00:26:29,520 --> 00:26:30,400
honda but

739
00:26:30,400 --> 00:26:32,880
maybe the people building the white box

740
00:26:32,880 --> 00:26:34,240
just opened

741
00:26:34,240 --> 00:26:37,039
the view random just read some entropy

742
00:26:37,039 --> 00:26:38,000
from the system and

743
00:26:38,000 --> 00:26:41,279
then picked k from that so maybe

744
00:26:41,279 --> 00:26:43,039
you are you're the attacker you control

745
00:26:43,039 --> 00:26:44,720
the hardware you control the

746
00:26:44,720 --> 00:26:48,080
the expect the the system so maybe you

747
00:26:48,080 --> 00:26:49,279
will try to remove

748
00:26:49,279 --> 00:26:51,760
all the entropy and now you will have

749
00:26:51,760 --> 00:26:53,760
your white box using the same randomizer

750
00:26:53,760 --> 00:26:55,760
for all the messages you give it to

751
00:26:55,760 --> 00:26:58,640
to the white box so you don't even need

752
00:26:58,640 --> 00:26:59,760
to perform a fault

753
00:26:59,760 --> 00:27:02,400
and a fault injection maybe it will work

754
00:27:02,400 --> 00:27:04,480
even before doing a fault injection just

755
00:27:04,480 --> 00:27:07,840
by removing the entropy source

756
00:27:07,840 --> 00:27:09,919
let's close this parenthesis and now we

757
00:27:09,919 --> 00:27:11,679
are going to move on on uh

758
00:27:11,679 --> 00:27:15,279
porting this textbook fault injection

759
00:27:15,279 --> 00:27:17,440
that works on real edward

760
00:27:17,440 --> 00:27:19,360
by shooting lasers and now we are going

761
00:27:19,360 --> 00:27:20,880
to do the equivalent

762
00:27:20,880 --> 00:27:23,600
of shooting lasers onto white boxes but

763
00:27:23,600 --> 00:27:24,880
what we can do

764
00:27:24,880 --> 00:27:27,279
onto

765
00:27:28,159 --> 00:27:30,080
white boxes is like we can clone the

766
00:27:30,080 --> 00:27:31,679
state of the application before

767
00:27:31,679 --> 00:27:34,320
computing the signatures and

768
00:27:34,320 --> 00:27:36,399
then we can from this clone we can

769
00:27:36,399 --> 00:27:38,159
compute the signature once

770
00:27:38,159 --> 00:27:40,559
without a fault and then we can compute

771
00:27:40,559 --> 00:27:42,480
tons of signatures

772
00:27:42,480 --> 00:27:46,320
just with flipping while flipping bits

773
00:27:46,320 --> 00:27:48,640
somewhere and then we are going to to

774
00:27:48,640 --> 00:27:49,440
continue

775
00:27:49,440 --> 00:27:53,279
uh producing bit flipped signatures

776
00:27:53,279 --> 00:27:54,159
until we get

777
00:27:54,159 --> 00:27:57,200
uh a faulty signature s prime

778
00:27:57,200 --> 00:27:59,600
that enable us to perform the attack and

779
00:27:59,600 --> 00:28:00,640
what we observe

780
00:28:00,640 --> 00:28:02,799
on the field is that this very basic

781
00:28:02,799 --> 00:28:03,919
attack we

782
00:28:03,919 --> 00:28:07,600
we got inspiration from the textbook

783
00:28:07,600 --> 00:28:10,480
hardware attack on ecdsa that we read

784
00:28:10,480 --> 00:28:11,679
from wikipedia

785
00:28:11,679 --> 00:28:14,240
but this kind of attacks already work on

786
00:28:14,240 --> 00:28:14,720
some

787
00:28:14,720 --> 00:28:17,440
commercially available white boxes so

788
00:28:17,440 --> 00:28:19,360
what you can see here is like we don't

789
00:28:19,360 --> 00:28:21,279
we still don't know how to build ecgsi

790
00:28:21,279 --> 00:28:22,880
white boxes

791
00:28:22,880 --> 00:28:26,159
but we can still break some ecgsi white

792
00:28:26,159 --> 00:28:27,120
boxes

793
00:28:27,120 --> 00:28:29,039
and on this topic there is like another

794
00:28:29,039 --> 00:28:31,039
approach that we've seen is like doing

795
00:28:31,039 --> 00:28:34,399
tracing on uh on white boxes and here on

796
00:28:34,399 --> 00:28:35,200
ecgsa

797
00:28:35,200 --> 00:28:38,399
it also works uh as an attack because

798
00:28:38,399 --> 00:28:41,600
as we told as we

799
00:28:41,600 --> 00:28:44,880
as we saw earlier we have this k

800
00:28:44,880 --> 00:28:48,080
randomizer that must be kept secret

801
00:28:48,080 --> 00:28:50,720
and now what about doing some tracing

802
00:28:50,720 --> 00:28:51,360
what about

803
00:28:51,360 --> 00:28:54,640
leaking k and what you see is like often

804
00:28:54,640 --> 00:28:57,360
in the most naive implementation of ecsa

805
00:28:57,360 --> 00:28:58,080
we use

806
00:28:58,080 --> 00:29:00,480
for this exponentiation something called

807
00:29:00,480 --> 00:29:01,200
double node

808
00:29:01,200 --> 00:29:03,600
it's similar to square multiply the

809
00:29:03,600 --> 00:29:05,120
square multiply we do in

810
00:29:05,120 --> 00:29:08,240
rsa and this kind of algorithm

811
00:29:08,240 --> 00:29:11,279
leaks k in into the execution traces of

812
00:29:11,279 --> 00:29:12,559
the white box

813
00:29:12,559 --> 00:29:15,600
and what we observe is like taking the

814
00:29:15,600 --> 00:29:17,440
classical confirmers 0 we see

815
00:29:17,440 --> 00:29:19,760
in the hardware world and applying them

816
00:29:19,760 --> 00:29:21,840
to the white box world

817
00:29:21,840 --> 00:29:24,799
often don't work out of the box because

818
00:29:24,799 --> 00:29:26,080
of the white box context

819
00:29:26,080 --> 00:29:28,720
uh for example windowing doesn't work

820
00:29:28,720 --> 00:29:29,919
because we can still

821
00:29:29,919 --> 00:29:31,840
uh do interesting tracing on the white

822
00:29:31,840 --> 00:29:33,200
box and

823
00:29:33,200 --> 00:29:35,679
what you need to understand here is like

824
00:29:35,679 --> 00:29:37,360
often we have the same

825
00:29:37,360 --> 00:29:40,960
side channels as hardware

826
00:29:40,960 --> 00:29:44,399
implementation but in white box context

827
00:29:44,399 --> 00:29:47,360
and in the white box context these side

828
00:29:47,360 --> 00:29:49,520
channels are harder to mitigate

829
00:29:49,520 --> 00:29:51,919
so at this point we've seen how to

830
00:29:51,919 --> 00:29:55,200
attack the ecsa whitebox

831
00:29:55,200 --> 00:29:58,960
and now we may go into

832
00:29:58,960 --> 00:30:02,159
building this ecdsa whitebox because you

833
00:30:02,159 --> 00:30:03,279
can build some

834
00:30:03,279 --> 00:30:05,679
because you can have protection

835
00:30:05,679 --> 00:30:07,120
countermeasures again

836
00:30:07,120 --> 00:30:09,200
falls against basic tracing that could

837
00:30:09,200 --> 00:30:11,120
you can explicitly

838
00:30:11,120 --> 00:30:14,080
put but instead of that we are going to

839
00:30:14,080 --> 00:30:14,799
see

840
00:30:14,799 --> 00:30:17,039
kind of generic methodology how to build

841
00:30:17,039 --> 00:30:19,360
a white box of anything

842
00:30:19,360 --> 00:30:22,000
as we saw we need to start by learning

843
00:30:22,000 --> 00:30:23,679
everything about attacks

844
00:30:23,679 --> 00:30:26,720
doing faults onto an algorithm doing

845
00:30:26,720 --> 00:30:30,559
tracing also go read the literature

846
00:30:30,559 --> 00:30:31,840
about

847
00:30:31,840 --> 00:30:34,640
hardware attacks on this algorithm

848
00:30:34,640 --> 00:30:36,000
classical attacks but

849
00:30:36,000 --> 00:30:37,679
also if there is like white box

850
00:30:37,679 --> 00:30:40,000
literature on it go eat

851
00:30:40,000 --> 00:30:42,799
the papers and the second step is like

852
00:30:42,799 --> 00:30:44,480
asking yourself the question

853
00:30:44,480 --> 00:30:47,279
is this algorithm a good idea to be put

854
00:30:47,279 --> 00:30:48,559
into a white box

855
00:30:48,559 --> 00:30:51,279
in the first place because all not all

856
00:30:51,279 --> 00:30:52,799
algorithms are created equal

857
00:30:52,799 --> 00:30:57,120
for example ecdsa is easier uh

858
00:30:57,120 --> 00:31:00,399
to build a white box out of uh than lsa

859
00:31:00,399 --> 00:31:03,120
but before that you don't you don't know

860
00:31:03,120 --> 00:31:04,240
because there is like

861
00:31:04,240 --> 00:31:06,240
very little public literature published

862
00:31:06,240 --> 00:31:07,440
on how to build

863
00:31:07,440 --> 00:31:10,080
this kind of exotic white boxes and what

864
00:31:10,080 --> 00:31:10,480
you

865
00:31:10,480 --> 00:31:12,399
see is like you work with limited

866
00:31:12,399 --> 00:31:14,480
knowledge you you don't know

867
00:31:14,480 --> 00:31:17,120
about the ecdsa tricks before finding

868
00:31:17,120 --> 00:31:18,399
them for example

869
00:31:18,399 --> 00:31:20,399
you don't know about the lsa tricks

870
00:31:20,399 --> 00:31:22,799
before finding them maybe other vendors

871
00:31:22,799 --> 00:31:24,880
found out about these tweaks

872
00:31:24,880 --> 00:31:27,279
and maybe the attacker found out about

873
00:31:27,279 --> 00:31:28,080
these tricks

874
00:31:28,080 --> 00:31:30,480
but maybe not so in the competition

875
00:31:30,480 --> 00:31:32,640
between building the white box different

876
00:31:32,640 --> 00:31:35,760
defenses and attacking there is like

877
00:31:35,760 --> 00:31:39,200
you must stay ahead so you must

878
00:31:39,200 --> 00:31:41,440
pour a lot of research and development

879
00:31:41,440 --> 00:31:42,960
in it you must have

880
00:31:42,960 --> 00:31:45,919
good white box foo trickery and at the

881
00:31:45,919 --> 00:31:46,880
end of the day

882
00:31:46,880 --> 00:31:48,720
the attacker won't give you a good

883
00:31:48,720 --> 00:31:50,320
feedback like won't give you

884
00:31:50,320 --> 00:31:53,279
okay here here here good tricks but here

885
00:31:53,279 --> 00:31:54,720
you have a hole

886
00:31:54,720 --> 00:31:57,919
so what you need to do uh

887
00:31:57,919 --> 00:32:00,080
and it's the same conclusion as before

888
00:32:00,080 --> 00:32:01,200
you need

889
00:32:01,200 --> 00:32:03,840
to care about protecting the thing that

890
00:32:03,840 --> 00:32:05,440
protects your secrets

891
00:32:05,440 --> 00:32:07,600
you need to protect your white box

892
00:32:07,600 --> 00:32:08,559
against

893
00:32:08,559 --> 00:32:12,159
attackers with software protections

894
00:32:12,159 --> 00:32:14,399
with things like that because you work

895
00:32:14,399 --> 00:32:16,080
with limited knowledge you're not

896
00:32:16,080 --> 00:32:16,640
perfect

897
00:32:16,640 --> 00:32:18,559
your white box is a compromise and if

898
00:32:18,559 --> 00:32:19,679
you want to get

899
00:32:19,679 --> 00:32:22,720
a good trade-off between performance and

900
00:32:22,720 --> 00:32:23,679
security

901
00:32:23,679 --> 00:32:26,559
you need to be more creative than just

902
00:32:26,559 --> 00:32:28,480
doing mathematics these

903
00:32:28,480 --> 00:32:31,200
kind of mathematics are a must have to

904
00:32:31,200 --> 00:32:32,960
have good counter measures

905
00:32:32,960 --> 00:32:36,000
but these must also be mixed with

906
00:32:36,000 --> 00:32:37,440
software protections

907
00:32:37,440 --> 00:32:41,679
so let's jump to the final conclusion

908
00:32:41,679 --> 00:32:45,039
white box cryptography as we saw uh

909
00:32:45,039 --> 00:32:47,840
there there is like lot of licks we have

910
00:32:47,840 --> 00:32:48,240
like

911
00:32:48,240 --> 00:32:51,120
attacks we can do uh on hardware that we

912
00:32:51,120 --> 00:32:52,880
can do on white boxes

913
00:32:52,880 --> 00:32:55,919
and what we saw is like we need software

914
00:32:55,919 --> 00:32:57,120
protection

915
00:32:57,120 --> 00:32:59,840
and today uh we are not the only ones

916
00:32:59,840 --> 00:33:00,559
that that

917
00:33:00,559 --> 00:33:02,799
made this kind of reflection we have

918
00:33:02,799 --> 00:33:05,840
like 20 years of white boxes behind us

919
00:33:05,840 --> 00:33:08,320
so today we have multiple industrial

920
00:33:08,320 --> 00:33:10,399
ready solutions

921
00:33:10,399 --> 00:33:13,440
these are individual already to the

922
00:33:13,440 --> 00:33:13,919
point

923
00:33:13,919 --> 00:33:16,480
that they are starting to appear in

924
00:33:16,480 --> 00:33:17,519
global standards

925
00:33:17,519 --> 00:33:20,320
for example the banking industry has pcs

926
00:33:20,320 --> 00:33:21,200
spock

927
00:33:21,200 --> 00:33:24,320
this is an interesting read if you want

928
00:33:24,320 --> 00:33:27,120
there is like almost all the ask

929
00:33:27,120 --> 00:33:27,760
yourself

930
00:33:27,760 --> 00:33:30,480
checklist we we had in this presentation

931
00:33:30,480 --> 00:33:31,120
they have

932
00:33:31,120 --> 00:33:33,600
their own ask yourself and it's very

933
00:33:33,600 --> 00:33:35,600
long and very interesting

934
00:33:35,600 --> 00:33:38,240
and you must ask yourself the right

935
00:33:38,240 --> 00:33:39,039
questions

936
00:33:39,039 --> 00:33:41,679
uh often vendors will tell you like

937
00:33:41,679 --> 00:33:42,159
trust

938
00:33:42,159 --> 00:33:45,519
us but you need to to say like okay

939
00:33:45,519 --> 00:33:48,320
uh what about cop lifting what about

940
00:33:48,320 --> 00:33:51,039
data flow what about dca what about dfa

941
00:33:51,039 --> 00:33:51,519
because

942
00:33:51,519 --> 00:33:53,679
if these white boxes are not protected

943
00:33:53,679 --> 00:33:55,360
explicitly

944
00:33:55,360 --> 00:33:57,519
you need to find out and you need to

945
00:33:57,519 --> 00:33:59,279
play this kind of cat and mouse game you

946
00:33:59,279 --> 00:34:00,159
need to audit

947
00:34:00,159 --> 00:34:01,360
the white box you need to have

948
00:34:01,360 --> 00:34:03,600
independent editors specialize

949
00:34:03,600 --> 00:34:05,840
on the topic you need to break your

950
00:34:05,840 --> 00:34:07,519
white box you need to break the design

951
00:34:07,519 --> 00:34:08,879
you are building

952
00:34:08,879 --> 00:34:10,719
and then you need to fix it and that

953
00:34:10,719 --> 00:34:13,199
then you need to repeat this loop

954
00:34:13,199 --> 00:34:16,320
and now uh white boxes work as

955
00:34:16,320 --> 00:34:19,359
a cryptographic uh protection

956
00:34:19,359 --> 00:34:21,119
as a protection for cryptographic

957
00:34:21,119 --> 00:34:22,399
implementation

958
00:34:22,399 --> 00:34:24,800
and but there is also like hardware

959
00:34:24,800 --> 00:34:25,599
security

960
00:34:25,599 --> 00:34:27,520
uh more and more we see in the mobile

961
00:34:27,520 --> 00:34:28,800
space for example

962
00:34:28,800 --> 00:34:31,199
secure elements and twistlets that

963
00:34:31,199 --> 00:34:32,960
provide hardware resolution for

964
00:34:32,960 --> 00:34:34,560
cryptographic operation

965
00:34:34,560 --> 00:34:36,960
but this has often some fragmentation

966
00:34:36,960 --> 00:34:38,239
between devices

967
00:34:38,239 --> 00:34:42,000
and what we observe in the real world is

968
00:34:42,000 --> 00:34:42,399
that

969
00:34:42,399 --> 00:34:45,199
these are often put behind closed doors

970
00:34:45,199 --> 00:34:46,800
for security reasons

971
00:34:46,800 --> 00:34:49,280
and often when you are a small editor or

972
00:34:49,280 --> 00:34:50,239
a small bank

973
00:34:50,239 --> 00:34:53,520
or a small company you can just access

974
00:34:53,520 --> 00:34:54,719
the secure element or

975
00:34:54,719 --> 00:34:56,879
you can't just like have your own

976
00:34:56,879 --> 00:34:58,160
trustlet uh

977
00:34:58,160 --> 00:35:01,359
in the treason so white boxes are still

978
00:35:01,359 --> 00:35:01,680
uh

979
00:35:01,680 --> 00:35:04,880
very helpful and uh

980
00:35:04,880 --> 00:35:07,280
in both car in both case you need to

981
00:35:07,280 --> 00:35:08,640
protect the thing that protects your

982
00:35:08,640 --> 00:35:09,599
secrets

983
00:35:09,599 --> 00:35:13,680
but if as long as if

984
00:35:13,680 --> 00:35:16,079
as soon as the secret data leave your

985
00:35:16,079 --> 00:35:18,400
white box for example as as or as soon

986
00:35:18,400 --> 00:35:18,880
as

987
00:35:18,880 --> 00:35:21,599
your movie leaves your rpg your

988
00:35:21,599 --> 00:35:23,200
cryptographic component

989
00:35:23,200 --> 00:35:26,880
the attacker is able to to steal them uh

990
00:35:26,880 --> 00:35:29,760
it's bad so what you do overall

991
00:35:29,760 --> 00:35:31,359
conclusion of this presentation

992
00:35:31,359 --> 00:35:34,480
is like applications are best protected

993
00:35:34,480 --> 00:35:36,720
as a whole hardware security and white

994
00:35:36,720 --> 00:35:38,079
boxes are part

995
00:35:38,079 --> 00:35:41,119
of application protection but there is

996
00:35:41,119 --> 00:35:41,440
like

997
00:35:41,440 --> 00:35:43,520
many other parts on application

998
00:35:43,520 --> 00:35:44,560
protection and

999
00:35:44,560 --> 00:35:47,119
uh yeah it's not the topic of today's

1000
00:35:47,119 --> 00:35:47,920
present

1001
00:35:47,920 --> 00:35:49,920
webinar but this is the overall

1002
00:35:49,920 --> 00:35:51,359
conclusion on

1003
00:35:51,359 --> 00:35:52,880
building white boxes attacks and

1004
00:35:52,880 --> 00:35:55,119
defenses and now we'll

1005
00:35:55,119 --> 00:35:58,240
we'll switch we'll switch to questions i

1006
00:35:58,240 --> 00:35:58,720
think

1007
00:35:58,720 --> 00:36:02,480
we are going to have some into the

1008
00:36:02,480 --> 00:36:06,079
zoom chat i guess

1009
00:36:06,079 --> 00:36:09,119
yes there is one question uh

1010
00:36:09,119 --> 00:36:13,040
from shreya he's one he wants to get

1011
00:36:13,040 --> 00:36:13,520
into

1012
00:36:13,520 --> 00:36:16,160
cryptography and he has some pretty

1013
00:36:16,160 --> 00:36:18,240
basic questions not related to white box

1014
00:36:18,240 --> 00:36:19,520
crypto but

1015
00:36:19,520 --> 00:36:22,400
uh i think you or philip would like to

1016
00:36:22,400 --> 00:36:24,880
answer

1017
00:36:25,040 --> 00:36:28,640
okay i still trying to figure out

1018
00:36:28,640 --> 00:36:31,680
how i can access the question myself

1019
00:36:31,680 --> 00:36:40,560
in the zoom interface okay yes

1020
00:36:40,560 --> 00:36:43,760
i found out there is like chat yeah

1021
00:36:43,760 --> 00:36:47,359
i have chat uh so

1022
00:36:47,359 --> 00:36:49,119
i am completing you towards quick

1023
00:36:49,119 --> 00:36:51,040
cryptography and network security

1024
00:36:51,040 --> 00:36:53,599
interested in cryptography science quite

1025
00:36:53,599 --> 00:36:54,640
a time

1026
00:36:54,640 --> 00:36:57,680
how should i start what are the priority

1027
00:36:57,680 --> 00:36:58,480
results

1028
00:36:58,480 --> 00:37:01,520
i should consider can you suggest any

1029
00:37:01,520 --> 00:37:02,800
free and up-to-date

1030
00:37:02,800 --> 00:37:04,960
resources for beginner how can i pursue

1031
00:37:04,960 --> 00:37:06,560
cryptography as a career please

1032
00:37:06,560 --> 00:37:09,599
join me sir okay

1033
00:37:09,599 --> 00:37:12,720
so i'm a junior in cryptography i've

1034
00:37:12,720 --> 00:37:13,920
just started my career

1035
00:37:13,920 --> 00:37:18,240
my career in some ways

1036
00:37:18,240 --> 00:37:21,680
and there is like good books written by

1037
00:37:21,680 --> 00:37:24,880
by researchers i can quote

1038
00:37:24,880 --> 00:37:27,680
an introduction to cryptography by nigel

1039
00:37:27,680 --> 00:37:28,800
smart

1040
00:37:28,800 --> 00:37:32,720
this gives a good overview of

1041
00:37:32,720 --> 00:37:36,079
all the basic things we do in

1042
00:37:36,079 --> 00:37:37,440
cryptography

1043
00:37:37,440 --> 00:37:41,200
there is also um the course

1044
00:37:41,200 --> 00:37:45,280
that uh danbone gay give on coursera

1045
00:37:45,280 --> 00:37:48,400
there is like crypto one and crypto two

1046
00:37:48,400 --> 00:37:50,480
given by dan bonnet that uh that is

1047
00:37:50,480 --> 00:37:51,520
quite famous

1048
00:37:51,520 --> 00:37:54,640
and these two are quite the basics you

1049
00:37:54,640 --> 00:37:56,000
can do by yourself

1050
00:37:56,000 --> 00:37:58,560
with resources on the internet and then

1051
00:37:58,560 --> 00:37:59,119
for the

1052
00:37:59,119 --> 00:38:02,720
more specialized stuff and complicated

1053
00:38:02,720 --> 00:38:03,200
stuff

1054
00:38:03,200 --> 00:38:05,920
i'll say is more like finding the good

1055
00:38:05,920 --> 00:38:06,720
people

1056
00:38:06,720 --> 00:38:09,680
uh the good people to hack with uh to

1057
00:38:09,680 --> 00:38:10,640
practice

1058
00:38:10,640 --> 00:38:14,000
code attack uh implement and

1059
00:38:14,000 --> 00:38:16,480
it's a loop getting better from the

1060
00:38:16,480 --> 00:38:17,119
basics

1061
00:38:17,119 --> 00:38:20,240
you you get by reading this

1062
00:38:20,240 --> 00:38:23,760
kind of resources so i guess good luck

1063
00:38:23,760 --> 00:38:26,960
i have not more things to to add but

1064
00:38:26,960 --> 00:38:28,400
maybe my colleagues

1065
00:38:28,400 --> 00:38:32,640
do but yeah i'm happy with my answer

1066
00:38:32,640 --> 00:38:35,200
anybody else has any questions to ask

1067
00:38:35,200 --> 00:38:36,000
matthew

1068
00:38:36,000 --> 00:38:39,520
uh you can put write down your question

1069
00:38:39,520 --> 00:38:40,320
in the chat

1070
00:38:40,320 --> 00:38:43,040
but meanwhile let me ask uh matthew one

1071
00:38:43,040 --> 00:38:43,920
question

1072
00:38:43,920 --> 00:38:46,240
uh you mentioned there is pci as a

1073
00:38:46,240 --> 00:38:46,960
standard

1074
00:38:46,960 --> 00:38:49,520
for white box right or they have a

1075
00:38:49,520 --> 00:38:50,320
standard

1076
00:38:50,320 --> 00:38:53,040
are there any industry bodies apart from

1077
00:38:53,040 --> 00:38:54,079
pci that

1078
00:38:54,079 --> 00:38:57,440
have standards or recommendations for

1079
00:38:57,440 --> 00:39:01,839
uh white box crypto

1080
00:39:02,320 --> 00:39:05,440
yeah there's the

1081
00:39:05,440 --> 00:39:08,640
emv code it's in the bank payment is

1082
00:39:08,640 --> 00:39:11,839
true but in records what some

1083
00:39:11,839 --> 00:39:14,079
audits they do on white boxes and they

1084
00:39:14,079 --> 00:39:15,040
have twitter

1085
00:39:15,040 --> 00:39:19,599
they check like things that matthew

1086
00:39:19,599 --> 00:39:23,680
said in this presentation so it's also

1087
00:39:23,680 --> 00:39:27,359
one of the audits people let's say that

1088
00:39:27,359 --> 00:39:28,880
starts to

1089
00:39:28,880 --> 00:39:32,480
standardize the term things okay

1090
00:39:32,480 --> 00:39:35,599
uh i have another question uh i

1091
00:39:35,599 --> 00:39:38,079
remember in the some of the beginning

1092
00:39:38,079 --> 00:39:38,960
slides

1093
00:39:38,960 --> 00:39:41,599
uh matthew you mentioned that

1094
00:39:41,599 --> 00:39:42,720
implementing

1095
00:39:42,720 --> 00:39:45,839
whitebox crypto could be expensive so

1096
00:39:45,839 --> 00:39:48,400
how does you know a small iot

1097
00:39:48,400 --> 00:39:50,560
manufacturer what do they do

1098
00:39:50,560 --> 00:39:53,599
do you have you seen you know small iot

1099
00:39:53,599 --> 00:39:56,000
manufacturers oems using whitebox

1100
00:39:56,000 --> 00:39:59,440
crypto as a solution because it probably

1101
00:39:59,440 --> 00:40:00,720
is expensive and they don't have a lot

1102
00:40:00,720 --> 00:40:02,320
of budget for it

1103
00:40:02,320 --> 00:40:05,680
yeah implementing from scratch

1104
00:40:05,680 --> 00:40:08,839
a white box is not

1105
00:40:08,839 --> 00:40:13,520
easy in some ways because often the

1106
00:40:13,520 --> 00:40:16,960
the the ones that you will find

1107
00:40:16,960 --> 00:40:19,680
published on the internet has been

1108
00:40:19,680 --> 00:40:20,800
documented

1109
00:40:20,800 --> 00:40:23,839
as broken by someone with a nice

1110
00:40:23,839 --> 00:40:24,480
write-up

1111
00:40:24,480 --> 00:40:27,760
how to break this kind of

1112
00:40:27,760 --> 00:40:30,400
this way this white box in particular so

1113
00:40:30,400 --> 00:40:31,680
often you need to

1114
00:40:31,680 --> 00:40:34,720
to start your own implementation

1115
00:40:34,720 --> 00:40:38,880
and you have good knowledge about

1116
00:40:38,880 --> 00:40:40,960
the counter measures and how to

1117
00:40:40,960 --> 00:40:42,319
implement the white box in the first

1118
00:40:42,319 --> 00:40:43,280
place

1119
00:40:43,280 --> 00:40:46,400
and then you have a lot of issues

1120
00:40:46,400 --> 00:40:49,839
to work out like code lifting data flow

1121
00:40:49,839 --> 00:40:54,160
and this has good and bad solutions

1122
00:40:54,160 --> 00:40:58,480
but good solutions are mostly what

1123
00:40:58,480 --> 00:41:01,680
are selling vendors white box vendors

1124
00:41:01,680 --> 00:41:05,119
so you can if you are good at building

1125
00:41:05,119 --> 00:41:05,520
your

1126
00:41:05,520 --> 00:41:08,560
own white box you may consider

1127
00:41:08,560 --> 00:41:11,680
like selling your own

1128
00:41:11,680 --> 00:41:14,560
research and development because not a

1129
00:41:14,560 --> 00:41:15,280
lot of people

1130
00:41:15,280 --> 00:41:18,560
know how about building those

1131
00:41:18,560 --> 00:41:22,640
and building good ones but there is like

1132
00:41:22,640 --> 00:41:25,920
as as a small for example iot

1133
00:41:25,920 --> 00:41:28,960
uh person building your own little

1134
00:41:28,960 --> 00:41:30,480
product

1135
00:41:30,480 --> 00:41:33,280
you can find resources in the field in

1136
00:41:33,280 --> 00:41:35,359
order like when you are for example

1137
00:41:35,359 --> 00:41:38,640
trying to buy a license not

1138
00:41:38,640 --> 00:41:41,520
just picking someone that will tell you

1139
00:41:41,520 --> 00:41:42,079
like

1140
00:41:42,079 --> 00:41:45,200
this is secure you can like

1141
00:41:45,200 --> 00:41:48,640
ask yourself is my code lifting problem

1142
00:41:48,640 --> 00:41:49,359
fixed

1143
00:41:49,359 --> 00:41:52,160
in iot is kind of different because

1144
00:41:52,160 --> 00:41:52,960
there are

1145
00:41:52,960 --> 00:41:55,359
other things you can do like having your

1146
00:41:55,359 --> 00:41:56,560
own secure elements

1147
00:41:56,560 --> 00:42:00,839
if you can spare the change

1148
00:42:00,839 --> 00:42:03,520
um and but yeah

1149
00:42:03,520 --> 00:42:06,079
you having the the right words and the

1150
00:42:06,079 --> 00:42:06,640
right

1151
00:42:06,640 --> 00:42:09,760
question will enable you to

1152
00:42:09,760 --> 00:42:13,760
to not make basic mistakes um

1153
00:42:13,760 --> 00:42:16,960
and uh often when you

1154
00:42:16,960 --> 00:42:19,760
start thinking about your protocol

1155
00:42:19,760 --> 00:42:21,280
before making choices

1156
00:42:21,280 --> 00:42:24,319
if you want to have white boxes you can

1157
00:42:24,319 --> 00:42:26,960
have other constraints that comes into

1158
00:42:26,960 --> 00:42:28,839
play

1159
00:42:28,839 --> 00:42:31,920
so yeah it's uh

1160
00:42:31,920 --> 00:42:34,480
i don't have an exact answer to that but

1161
00:42:34,480 --> 00:42:35,680
uh

1162
00:42:35,680 --> 00:42:38,880
yeah come work with us i guess but

1163
00:42:38,880 --> 00:42:45,359
uh yeah so those are the yeah

1164
00:42:45,359 --> 00:42:47,280
uh but uh i think you have one more

1165
00:42:47,280 --> 00:42:49,119
question uh

1166
00:42:49,119 --> 00:42:52,079
matthew in the chat

1167
00:42:52,800 --> 00:42:55,760
can somebody find ec dsa white box

1168
00:42:55,760 --> 00:42:57,520
somewhere in order to test them and are

1169
00:42:57,520 --> 00:42:58,319
they public

1170
00:42:58,319 --> 00:43:01,680
are there any public examples

1171
00:43:04,800 --> 00:43:08,400
i'm personally i'm not aware of

1172
00:43:08,400 --> 00:43:11,119
public examples we have samples but we

1173
00:43:11,119 --> 00:43:14,160
can't make them public

1174
00:43:14,160 --> 00:43:18,480
but maybe adrian or philip will know

1175
00:43:18,480 --> 00:43:19,440
about

1176
00:43:19,440 --> 00:43:22,960
samples no and totally

1177
00:43:22,960 --> 00:43:26,480
with many many as examples

1178
00:43:26,480 --> 00:43:29,839
but nothing asymmetric actually even rsa

1179
00:43:29,839 --> 00:43:32,319
i think there is no

1180
00:43:32,319 --> 00:43:34,800
no public example typically you find

1181
00:43:34,800 --> 00:43:38,000
this kind of stuff in ctfs for example

1182
00:43:38,000 --> 00:43:41,680
or there was this reeboks competition

1183
00:43:41,680 --> 00:43:44,240
for ies white box but there is no

1184
00:43:44,240 --> 00:43:45,119
competition yet

1185
00:43:45,119 --> 00:43:48,400
for assimilator crypto

1186
00:43:48,400 --> 00:43:52,240
maybe it will come coming years

1187
00:43:53,200 --> 00:43:56,240
yeah all right

1188
00:43:56,240 --> 00:43:58,640
uh uh i don't think we have any more

1189
00:43:58,640 --> 00:43:59,359
questions

1190
00:43:59,359 --> 00:44:02,480
uh so thank you so much matthew phillip

1191
00:44:02,480 --> 00:44:05,359
and adrian for this amazing session i'm

1192
00:44:05,359 --> 00:44:06,880
sure philip will come up with a

1193
00:44:06,880 --> 00:44:09,680
ctf for this in the future it's because

1194
00:44:09,680 --> 00:44:12,799
there is nothing available

1195
00:44:13,119 --> 00:44:16,800
so yeah uh guys thank you so much for

1196
00:44:16,800 --> 00:44:17,920
joining us today

1197
00:44:17,920 --> 00:44:20,560
uh if please share your feedback with us

1198
00:44:20,560 --> 00:44:22,079
i have shared the link and if you are

1199
00:44:22,079 --> 00:44:24,240
also interested to join our trainings

1200
00:44:24,240 --> 00:44:26,160
which are coming up in september i've

1201
00:44:26,160 --> 00:44:27,599
shared the link with you all

1202
00:44:27,599 --> 00:44:30,400
so thank you so much and stay safe and

1203
00:44:30,400 --> 00:44:31,119
matthew

1204
00:44:31,119 --> 00:44:33,839
please take care of your feet uh maybe i

1205
00:44:33,839 --> 00:44:34,480
can

1206
00:44:34,480 --> 00:44:37,599
i can give my my email or my company's

1207
00:44:37,599 --> 00:44:38,880
mail see people

1208
00:44:38,880 --> 00:44:42,560
or if people are have more questions

1209
00:44:42,560 --> 00:44:44,720
so

1210
00:44:48,839 --> 00:44:52,319
like so

1211
00:44:52,480 --> 00:44:55,920
yes if you contact the the generic

1212
00:44:55,920 --> 00:44:57,680
contact link people will

1213
00:44:57,680 --> 00:45:00,000
will forward your your questions to to

1214
00:45:00,000 --> 00:45:02,079
me adriana phillip

1215
00:45:02,079 --> 00:45:04,319
so feel free to send a mail on contact

1216
00:45:04,319 --> 00:45:05,440
workslab.com

1217
00:45:05,440 --> 00:45:09,119
and uh if you have more questions uh and

1218
00:45:09,119 --> 00:45:12,319
we will the slide can we make the slide

1219
00:45:12,319 --> 00:45:13,920
available somewhere

1220
00:45:13,920 --> 00:45:16,960
so i will the webinar is recorded right

1221
00:45:16,960 --> 00:45:18,400
so we'll be uploading the

1222
00:45:18,400 --> 00:45:20,640
edited version on our youtube channel

1223
00:45:20,640 --> 00:45:22,079
which is publicly

1224
00:45:22,079 --> 00:45:24,640
available for everybody to view so they

1225
00:45:24,640 --> 00:45:25,359
will have

1226
00:45:25,359 --> 00:45:28,079
uh the slides they can see it and also

1227
00:45:28,079 --> 00:45:29,920
okay i'll mention your contact details

1228
00:45:29,920 --> 00:45:31,200
over there if they want to

1229
00:45:31,200 --> 00:45:32,960
contact you for any questions or any

1230
00:45:32,960 --> 00:45:35,200
assistance or any guidance in the future

1231
00:45:35,200 --> 00:45:38,319
okay so fantastic uh

1232
00:45:38,319 --> 00:45:40,800
have a nice day i guess yeah thank you

1233
00:45:40,800 --> 00:45:42,200
so much everybody

1234
00:45:42,200 --> 00:45:45,200
bye

