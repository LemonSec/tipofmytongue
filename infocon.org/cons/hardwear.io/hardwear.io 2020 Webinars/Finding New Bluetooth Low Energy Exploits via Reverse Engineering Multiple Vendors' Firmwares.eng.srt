1
00:00:12,490 --> 00:00:14,160
[Music]

2
00:00:14,160 --> 00:00:15,280
hello everyone

3
00:00:15,280 --> 00:00:17,920
we are back with another cool talk for

4
00:00:17,920 --> 00:00:20,080
hardware dot io webinar

5
00:00:20,080 --> 00:00:22,400
friends we have announced six of our

6
00:00:22,400 --> 00:00:23,119
speakers

7
00:00:23,119 --> 00:00:25,039
who will be presenting innovative new

8
00:00:25,039 --> 00:00:27,599
research related to hardware security

9
00:00:27,599 --> 00:00:29,920
for our upcoming hardware dot io

10
00:00:29,920 --> 00:00:30,640
conference

11
00:00:30,640 --> 00:00:33,360
which is scheduled on the 1st and 2nd of

12
00:00:33,360 --> 00:00:34,800
october

13
00:00:34,800 --> 00:00:36,880
do check them out and if you are

14
00:00:36,880 --> 00:00:39,120
interested in any of our upcoming

15
00:00:39,120 --> 00:00:39,920
trainings

16
00:00:39,920 --> 00:00:42,399
please do register i will be posting the

17
00:00:42,399 --> 00:00:43,040
link

18
00:00:43,040 --> 00:00:46,320
later in the zoom chat today

19
00:00:46,320 --> 00:00:49,360
we have veronica kovac who did her

20
00:00:49,360 --> 00:00:51,840
masters in computer science with the

21
00:00:51,840 --> 00:00:54,420
focus on cryptography and security

22
00:00:54,420 --> 00:00:55,760
[Music]

23
00:00:55,760 --> 00:00:58,320
previously she worked with companies

24
00:00:58,320 --> 00:00:59,440
like tesla

25
00:00:59,440 --> 00:01:03,920
mitre sourcefire and also with the nsa

26
00:01:03,920 --> 00:01:06,400
she now runs her own security consulting

27
00:01:06,400 --> 00:01:09,520
firm called dark mentor llc

28
00:01:09,520 --> 00:01:11,439
veronica is going to talk to us today

29
00:01:11,439 --> 00:01:12,720
about finding

30
00:01:12,720 --> 00:01:15,520
new bluetooth low energy exploits via

31
00:01:15,520 --> 00:01:16,799
reverse engineering

32
00:01:16,799 --> 00:01:20,080
multiple vendor firmwares for those

33
00:01:20,080 --> 00:01:22,960
who are new to hardware dot io webinar

34
00:01:22,960 --> 00:01:24,720
if you have any questions

35
00:01:24,720 --> 00:01:27,520
please use the zoom chat window to send

36
00:01:27,520 --> 00:01:28,960
them across

37
00:01:28,960 --> 00:01:32,320
after the presentation veronica would

38
00:01:32,320 --> 00:01:34,159
answer them

39
00:01:34,159 --> 00:01:36,720
so without any delay let's welcome

40
00:01:36,720 --> 00:01:37,600
veronica

41
00:01:37,600 --> 00:01:41,839
to begin her presentation

42
00:01:43,040 --> 00:01:46,079
thank you ant for the introduction and

43
00:01:46,079 --> 00:01:46,560
let's

44
00:01:46,560 --> 00:01:55,840
share my screen here

45
00:01:56,079 --> 00:01:59,040
all right can you see my screen all

46
00:01:59,040 --> 00:01:59,520
right

47
00:01:59,520 --> 00:02:03,119
yes good thank you hi i'm veronica so i

48
00:02:03,119 --> 00:02:04,880
don't need to further introduce myself

49
00:02:04,880 --> 00:02:05,759
but

50
00:02:05,759 --> 00:02:08,720
uh fans interest me very well that the

51
00:02:08,720 --> 00:02:10,000
information i need to

52
00:02:10,000 --> 00:02:13,200
share about me let's see

53
00:02:13,200 --> 00:02:16,720
and now i'll focus on the uh the content

54
00:02:16,720 --> 00:02:17,920
so

55
00:02:17,920 --> 00:02:21,440
for the next 40 minutes uh let me start

56
00:02:21,440 --> 00:02:24,800
so two years ago i really wanted to

57
00:02:24,800 --> 00:02:26,959
do something new that i had not been

58
00:02:26,959 --> 00:02:28,480
worked on before

59
00:02:28,480 --> 00:02:31,360
so uh two years ago i started

60
00:02:31,360 --> 00:02:33,840
researching the bluetooth

61
00:02:33,840 --> 00:02:36,480
and the for the next 40 minutes i will

62
00:02:36,480 --> 00:02:37,840
share my story

63
00:02:37,840 --> 00:02:39,599
from knowing almost nothing about the

64
00:02:39,599 --> 00:02:41,599
bluetooth to finding remote

65
00:02:41,599 --> 00:02:44,959
execution vulnerabilities

66
00:02:48,160 --> 00:02:51,200
all right so let's see what does it take

67
00:02:51,200 --> 00:02:55,280
to start from the scratch to researching

68
00:02:55,280 --> 00:02:58,319
in a new area like bluetooth so at the

69
00:02:58,319 --> 00:02:59,599
very first

70
00:02:59,599 --> 00:03:02,319
i start with researching the related

71
00:03:02,319 --> 00:03:03,920
bluetooth

72
00:03:03,920 --> 00:03:05,920
security researches from like different

73
00:03:05,920 --> 00:03:07,519
conferences

74
00:03:07,519 --> 00:03:09,440
then i read i started reading the

75
00:03:09,440 --> 00:03:11,840
bluetooth specification

76
00:03:11,840 --> 00:03:13,760
and as many of you already know this

77
00:03:13,760 --> 00:03:15,680
really large specification that

78
00:03:15,680 --> 00:03:18,959
has more than 3000 pages but i didn't

79
00:03:18,959 --> 00:03:19,840
need to

80
00:03:19,840 --> 00:03:22,959
read all of it but i mainly focusing

81
00:03:22,959 --> 00:03:26,480
on the like protocol parts that

82
00:03:26,480 --> 00:03:29,599
programmers often likely make

83
00:03:29,599 --> 00:03:33,040
mistake while they are implementing it

84
00:03:33,040 --> 00:03:34,959
at the very beginning i start with the

85
00:03:34,959 --> 00:03:37,040
uh looking at the bluetooth classic but

86
00:03:37,040 --> 00:03:38,319
then

87
00:03:38,319 --> 00:03:41,200
there was like a mid 2018 but at the

88
00:03:41,200 --> 00:03:42,560
beginning beginning of

89
00:03:42,560 --> 00:03:45,599
2019 i was focusing on the bluetooth low

90
00:03:45,599 --> 00:03:46,560
energy

91
00:03:46,560 --> 00:03:51,280
and this talk we're focusing on this ble

92
00:03:51,280 --> 00:03:55,040
field only and

93
00:03:55,040 --> 00:03:57,680
why i was looking the specification in

94
00:03:57,680 --> 00:03:59,760
just like any other specification

95
00:03:59,760 --> 00:04:03,280
in many cases the words are not

96
00:04:03,280 --> 00:04:06,799
clear enough so i look for the uh

97
00:04:06,799 --> 00:04:10,000
open source implementation and for the

98
00:04:10,000 --> 00:04:12,400
bluetooth classic i couldn't find any

99
00:04:12,400 --> 00:04:15,439
but for the ble i found zephyr and

100
00:04:15,439 --> 00:04:18,798
apache my new nimble

101
00:04:22,800 --> 00:04:25,840
all right and here are

102
00:04:25,840 --> 00:04:28,720
the many protocols the bluetooth

103
00:04:28,720 --> 00:04:30,800
specification defines

104
00:04:30,800 --> 00:04:34,000
multiple protocols like here and these

105
00:04:34,000 --> 00:04:34,800
protocols

106
00:04:34,800 --> 00:04:37,520
can be divided into two layers the

107
00:04:37,520 --> 00:04:38,320
protocols

108
00:04:38,320 --> 00:04:41,759
that belong to the host which is you can

109
00:04:41,759 --> 00:04:42,000
think

110
00:04:42,000 --> 00:04:45,360
as you know smartphone or the uh

111
00:04:45,360 --> 00:04:49,840
pc these protocols always uh

112
00:04:49,840 --> 00:04:52,880
reside on the course

113
00:04:52,880 --> 00:04:55,840
platform but on the other hand there's a

114
00:04:55,840 --> 00:04:58,320
this link layer protocol and then d5

115
00:04:58,320 --> 00:05:02,160
layer is always end up residing on the

116
00:05:02,160 --> 00:05:04,880
controller device itself for uh

117
00:05:04,880 --> 00:05:07,120
performance reasons

118
00:05:07,120 --> 00:05:09,280
and the spec also defined this host

119
00:05:09,280 --> 00:05:11,360
controller interface so it

120
00:05:11,360 --> 00:05:13,440
specification defines how this hci

121
00:05:13,440 --> 00:05:14,960
should be implemented

122
00:05:14,960 --> 00:05:17,520
in order to communicate between the host

123
00:05:17,520 --> 00:05:20,800
and then controller here

124
00:05:20,800 --> 00:05:23,440
and this case is for the actual duochie

125
00:05:23,440 --> 00:05:24,160
configuration

126
00:05:24,160 --> 00:05:26,960
as you see there is a host chip and then

127
00:05:26,960 --> 00:05:30,159
there is a controller chip

128
00:05:33,759 --> 00:05:36,080
all right for help on the other hand for

129
00:05:36,080 --> 00:05:37,280
the single chip

130
00:05:37,280 --> 00:05:39,360
configuration that you can often see on

131
00:05:39,360 --> 00:05:41,199
the iot device

132
00:05:41,199 --> 00:05:44,720
the entire these protocols end up

133
00:05:44,720 --> 00:05:48,240
are located inside the controller

134
00:05:48,240 --> 00:05:51,520
device itself and in this case the

135
00:05:51,520 --> 00:05:53,520
specification actually didn't define how

136
00:05:53,520 --> 00:05:54,479
this ht

137
00:05:54,479 --> 00:05:57,120
ci has to be implemented so it is really

138
00:05:57,120 --> 00:05:58,160
up to the

139
00:05:58,160 --> 00:06:00,639
implementers so implementer can choose

140
00:06:00,639 --> 00:06:02,479
they can use either memory queue or they

141
00:06:02,479 --> 00:06:03,840
can choose just not to

142
00:06:03,840 --> 00:06:08,638
have explicit hci layer

143
00:06:11,039 --> 00:06:12,639
all right when i started uh this

144
00:06:12,639 --> 00:06:14,720
bluetooth research in mid

145
00:06:14,720 --> 00:06:18,840
2018 there was there was like

146
00:06:18,840 --> 00:06:21,120
around an hour around here i actually

147
00:06:21,120 --> 00:06:23,600
counted when i based on the public cv id

148
00:06:23,600 --> 00:06:24,400
account

149
00:06:24,400 --> 00:06:28,319
there were 132 cv ids that

150
00:06:28,319 --> 00:06:31,039
the vulnerability has found on the uh

151
00:06:31,039 --> 00:06:32,639
upper layer protocols

152
00:06:32,639 --> 00:06:35,120
but they were literally zero

153
00:06:35,120 --> 00:06:36,960
vulnerability has been found

154
00:06:36,960 --> 00:06:41,359
for the controller specific layer

155
00:06:42,800 --> 00:06:45,680
but right now actually this uh slide

156
00:06:45,680 --> 00:06:46,479
step

157
00:06:46,479 --> 00:06:50,000
was made two months ago but i checked uh

158
00:06:50,000 --> 00:06:53,599
two days ago i count the cv ids again

159
00:06:53,599 --> 00:06:57,440
so there are two more cv ids has been

160
00:06:57,440 --> 00:06:58,319
published but

161
00:06:58,319 --> 00:07:00,240
i just didn't change this slide just

162
00:07:00,240 --> 00:07:03,280
because the fact that

163
00:07:03,280 --> 00:07:07,199
i uh the fact that there is only three

164
00:07:07,199 --> 00:07:10,240
proven ble rc vulnerabilities are out

165
00:07:10,240 --> 00:07:11,039
there

166
00:07:11,039 --> 00:07:13,919
here what i mean by the uh proven is

167
00:07:13,919 --> 00:07:15,520
whether or not our researcher

168
00:07:15,520 --> 00:07:17,759
actually has published the proof of

169
00:07:17,759 --> 00:07:19,360
concept that

170
00:07:19,360 --> 00:07:22,479
can overwrite program counter with an

171
00:07:22,479 --> 00:07:24,400
attacker controlled value

172
00:07:24,400 --> 00:07:27,919
so there are vulnerabilities in this

173
00:07:27,919 --> 00:07:30,400
controller layer got 14 this one is

174
00:07:30,400 --> 00:07:30,960
included

175
00:07:30,960 --> 00:07:32,880
in the bluetooth classic and then ble

176
00:07:32,880 --> 00:07:35,759
but there's only three out there

177
00:07:35,759 --> 00:07:38,000
and one is a bleeding bit maybe some of

178
00:07:38,000 --> 00:07:39,039
you already

179
00:07:39,039 --> 00:07:42,000
have hero which is army's armies uh the

180
00:07:42,000 --> 00:07:44,720
company armies founded and

181
00:07:44,720 --> 00:07:47,360
two other the proven rc vulnerabilities

182
00:07:47,360 --> 00:07:49,199
are the ones

183
00:07:49,199 --> 00:07:51,039
the one the ones that i'm going to talk

184
00:07:51,039 --> 00:07:53,680
about today

185
00:07:55,599 --> 00:07:58,240
all right so now why on the attacker is

186
00:07:58,240 --> 00:08:00,160
interested in this you know below

187
00:08:00,160 --> 00:08:04,000
hci layer protocols

188
00:08:04,000 --> 00:08:05,759
let's say on or take a phone there are

189
00:08:05,759 --> 00:08:07,840
always specific vulnerabilities

190
00:08:07,840 --> 00:08:09,840
in the bluetooth stack but then what

191
00:08:09,840 --> 00:08:11,120
article can do is

192
00:08:11,120 --> 00:08:14,240
he can only target a particular class of

193
00:08:14,240 --> 00:08:15,280
the devices

194
00:08:15,280 --> 00:08:17,520
right if you find the on the pc he

195
00:08:17,520 --> 00:08:19,039
cannot move on to the other mac

196
00:08:19,039 --> 00:08:22,000
because the mac os is different from the

197
00:08:22,000 --> 00:08:23,919
pc

198
00:08:23,919 --> 00:08:26,800
but what about iphone or takeoff on the

199
00:08:26,800 --> 00:08:28,720
vulnerability in the controller layer

200
00:08:28,720 --> 00:08:32,000
the attacker can then now attack

201
00:08:32,000 --> 00:08:34,240
different classes of devices it can be

202
00:08:34,240 --> 00:08:36,799
car it can be those pc or the medical

203
00:08:36,799 --> 00:08:39,279
device or even it can be on iot devices

204
00:08:39,279 --> 00:08:44,080
so it actually it's it's attend the

205
00:08:44,080 --> 00:08:47,680
devices the attacker can attack and then

206
00:08:47,680 --> 00:08:50,240
do further more dangerous in operation

207
00:08:50,240 --> 00:08:52,800
afterward

208
00:08:53,360 --> 00:08:55,279
and today i'm going to talk about the

209
00:08:55,279 --> 00:08:56,880
full vulnerabilities but i'm not going

210
00:08:56,880 --> 00:08:58,480
to very detail about

211
00:08:58,480 --> 00:09:00,560
all of the vulnerabilities doesn't

212
00:09:00,560 --> 00:09:02,720
require any authentication or the

213
00:09:02,720 --> 00:09:04,000
pairing

214
00:09:04,000 --> 00:09:07,440
so it is actually hardening at this very

215
00:09:07,440 --> 00:09:09,279
upfront the protocol is actually quite

216
00:09:09,279 --> 00:09:12,480
important and i prepared two uh

217
00:09:12,480 --> 00:09:16,000
demos for the two uh rc

218
00:09:16,000 --> 00:09:19,040
box now

219
00:09:19,040 --> 00:09:22,800
let's take a look at how i actually even

220
00:09:22,800 --> 00:09:25,440
ended up finding this vulnerability so

221
00:09:25,440 --> 00:09:26,320
as i mentioned

222
00:09:26,320 --> 00:09:27,600
i didn't know anything about the

223
00:09:27,600 --> 00:09:30,720
bluetooth so first was i need to set up

224
00:09:30,720 --> 00:09:32,720
my lab

225
00:09:32,720 --> 00:09:36,160
and here there's a two development

226
00:09:36,160 --> 00:09:37,519
boards here

227
00:09:37,519 --> 00:09:40,000
and in my lab i have more than a dozen

228
00:09:40,000 --> 00:09:42,000
actually development boards but

229
00:09:42,000 --> 00:09:43,839
these are the only two uh development

230
00:09:43,839 --> 00:09:47,200
board that i'm going to talk about today

231
00:09:47,200 --> 00:09:50,320
and while i'm working on working with

232
00:09:50,320 --> 00:09:52,560
the development board instead of the end

233
00:09:52,560 --> 00:09:55,680
product is because

234
00:09:55,680 --> 00:09:58,959
it is easier to uh actually debug

235
00:09:58,959 --> 00:10:02,880
and in the developer actually there is

236
00:10:02,880 --> 00:10:05,120
no like a security mechanism has been

237
00:10:05,120 --> 00:10:06,720
implemented onto it yet

238
00:10:06,720 --> 00:10:09,839
so it is easier to work on

239
00:10:09,839 --> 00:10:12,000
however at the same time this uh

240
00:10:12,000 --> 00:10:14,399
development board is very representative

241
00:10:14,399 --> 00:10:15,120
to the end

242
00:10:15,120 --> 00:10:18,160
product and i will show you like here i

243
00:10:18,160 --> 00:10:20,720
found a vulnerability in the rom code

244
00:10:20,720 --> 00:10:22,959
that means any product we're going to be

245
00:10:22,959 --> 00:10:24,079
have the same

246
00:10:24,079 --> 00:10:26,399
code

247
00:10:27,440 --> 00:10:29,440
and now this is just sharing that it

248
00:10:29,440 --> 00:10:31,040
will be very handy to

249
00:10:31,040 --> 00:10:34,399
for you to have in your lab is

250
00:10:34,399 --> 00:10:35,839
uh when you are familiar with the

251
00:10:35,839 --> 00:10:37,920
software development the easiest way to

252
00:10:37,920 --> 00:10:39,200
debug is a print app

253
00:10:39,200 --> 00:10:41,200
just like that when you work on the the

254
00:10:41,200 --> 00:10:42,399
hardware code

255
00:10:42,399 --> 00:10:45,519
like the firmware then this you diesel

256
00:10:45,519 --> 00:10:47,920
you basically print

257
00:10:47,920 --> 00:10:50,399
and you will need the usb tools serial

258
00:10:50,399 --> 00:10:52,560
converters and i do recommend

259
00:10:52,560 --> 00:10:55,760
to have one that has the cts rts line

260
00:10:55,760 --> 00:11:01,360
this will save you time a lot

261
00:11:01,360 --> 00:11:03,839
right and then you will want to have the

262
00:11:03,839 --> 00:11:04,880
hardware debugger

263
00:11:04,880 --> 00:11:09,360
again here there's openocd i have it

264
00:11:09,360 --> 00:11:11,680
and there's a jailing but this one this

265
00:11:11,680 --> 00:11:13,839
case this one is education

266
00:11:13,839 --> 00:11:16,560
education license one so if you are

267
00:11:16,560 --> 00:11:19,359
working on this

268
00:11:19,440 --> 00:11:21,360
device directly if you are also doing it

269
00:11:21,360 --> 00:11:23,600
as either hobbyist

270
00:11:23,600 --> 00:11:25,200
or you are a student you can use this

271
00:11:25,200 --> 00:11:27,040
education license however you are doing

272
00:11:27,040 --> 00:11:28,720
it for profit but make sure that you get

273
00:11:28,720 --> 00:11:30,959
your commercial license

274
00:11:30,959 --> 00:11:34,640
and i tend to use zlink more than the

275
00:11:34,640 --> 00:11:36,480
open ocd just because

276
00:11:36,480 --> 00:11:38,959
it just it requires a slight more work

277
00:11:38,959 --> 00:11:40,000
to have

278
00:11:40,000 --> 00:11:43,680
uh openocd work at the very beginning

279
00:11:43,680 --> 00:11:44,160
but

280
00:11:44,160 --> 00:11:45,519
if you're familiar with this and then

281
00:11:45,519 --> 00:11:47,760
there is no difference

282
00:11:47,760 --> 00:11:51,279
well like me as a hardware developing

283
00:11:51,279 --> 00:11:53,440
hardware hacking it's not naturally a

284
00:11:53,440 --> 00:11:54,800
hardware hacker but

285
00:11:54,800 --> 00:11:57,519
i have not done it this low layer then

286
00:11:57,519 --> 00:11:59,279
just it's easier to start

287
00:11:59,279 --> 00:12:02,639
with the j-link uh now

288
00:12:02,639 --> 00:12:05,760
next is the uh the usb controller

289
00:12:05,760 --> 00:12:10,240
i think i have a uh folder

290
00:12:10,240 --> 00:12:13,360
uh and when you're running the filter

291
00:12:13,360 --> 00:12:15,040
there should be a way over

292
00:12:15,040 --> 00:12:17,600
uh soft uh way of power cycling with the

293
00:12:17,600 --> 00:12:18,480
software

294
00:12:18,480 --> 00:12:21,200
so i have it this way here and i use the

295
00:12:21,200 --> 00:12:23,200
uh controller when you when uh check out

296
00:12:23,200 --> 00:12:25,120
the github it

297
00:12:25,120 --> 00:12:27,839
has a list of what kind of usb help this

298
00:12:27,839 --> 00:12:29,680
you know software supports

299
00:12:29,680 --> 00:12:32,720
and another one is this over here this

300
00:12:32,720 --> 00:12:34,320
is another controller with a manual

301
00:12:34,320 --> 00:12:34,959
button

302
00:12:34,959 --> 00:12:37,519
this one actually very handy to have in

303
00:12:37,519 --> 00:12:40,000
your lap

304
00:12:40,399 --> 00:12:43,600
next so now when

305
00:12:43,600 --> 00:12:45,839
working with this uh wireless actually i

306
00:12:45,839 --> 00:12:47,519
found very interesting because you know

307
00:12:47,519 --> 00:12:49,360
when you send some stuff but you don't

308
00:12:49,360 --> 00:12:51,120
know whether you actually send me any

309
00:12:51,120 --> 00:12:53,279
packets or not so you do want to have

310
00:12:53,279 --> 00:12:54,240
some sniff or

311
00:12:54,240 --> 00:12:56,880
a way of to see actual packet has been

312
00:12:56,880 --> 00:12:58,240
sent on us

313
00:12:58,240 --> 00:13:02,079
and i used uber tools and sniffle

314
00:13:02,079 --> 00:13:05,680
but there are many sniffers so

315
00:13:05,680 --> 00:13:07,839
you can you know i'm not just doing

316
00:13:07,839 --> 00:13:08,720
surveys because

317
00:13:08,720 --> 00:13:10,399
i'm saying that there's a lot of

318
00:13:10,399 --> 00:13:12,079
sniffers but these are just the only one

319
00:13:12,079 --> 00:13:13,360
that i use

320
00:13:13,360 --> 00:13:16,000
for my work and ubertus is very easy to

321
00:13:16,000 --> 00:13:17,519
use and have a good

322
00:13:17,519 --> 00:13:20,079
console display however this software

323
00:13:20,079 --> 00:13:21,360
has not been updated

324
00:13:21,360 --> 00:13:24,560
so you can use this one but if you

325
00:13:24,560 --> 00:13:26,079
don't have any of this i actually

326
00:13:26,079 --> 00:13:28,320
recommend to have this board

327
00:13:28,320 --> 00:13:30,959
and use a sniffle and actually sniff was

328
00:13:30,959 --> 00:13:32,240
introduced

329
00:13:32,240 --> 00:13:33,920
at the end of last year at the hardy

330
00:13:33,920 --> 00:13:35,760
order i o i really appreciate that one

331
00:13:35,760 --> 00:13:37,680
because because of that one i found

332
00:13:37,680 --> 00:13:40,320
a bug in my father and i could actually

333
00:13:40,320 --> 00:13:41,040
fix it and

334
00:13:41,040 --> 00:13:45,120
i could verify it was working and

335
00:13:45,120 --> 00:13:47,519
his acting was a con and he literally

336
00:13:47,519 --> 00:13:48,399
was interested

337
00:13:48,399 --> 00:13:51,920
last year all right

338
00:13:51,920 --> 00:13:55,519
next all right and for the actual

339
00:13:55,519 --> 00:13:56,800
package generation

340
00:13:56,800 --> 00:14:03,839
i use the this nordic device here

341
00:14:05,680 --> 00:14:08,160
device here and i at the beginning i

342
00:14:08,160 --> 00:14:09,199
start with the

343
00:14:09,199 --> 00:14:13,600
nrf 52a32 that is just because when i

344
00:14:13,600 --> 00:14:14,800
check on this zephyr

345
00:14:14,800 --> 00:14:16,959
and minute i found that there was a lot

346
00:14:16,959 --> 00:14:18,880
of documentation there using this

347
00:14:18,880 --> 00:14:22,000
hardware but guess what this because

348
00:14:22,000 --> 00:14:23,920
this one is an older device that's why

349
00:14:23,920 --> 00:14:24,399
you know

350
00:14:24,399 --> 00:14:26,000
always documentation works this way

351
00:14:26,000 --> 00:14:27,680
right when they write the code then data

352
00:14:27,680 --> 00:14:28,160
micro

353
00:14:28,160 --> 00:14:31,519
documentation and then usually unless

354
00:14:31,519 --> 00:14:33,120
something dramatically changes the

355
00:14:33,120 --> 00:14:34,880
documentation is there so

356
00:14:34,880 --> 00:14:37,120
that's why there was just more

357
00:14:37,120 --> 00:14:38,880
documentation about this board

358
00:14:38,880 --> 00:14:42,320
however when you use this uh board

359
00:14:42,320 --> 00:14:45,279
you have to basically uh connect this

360
00:14:45,279 --> 00:14:47,120
usb to serial converter into this you

361
00:14:47,120 --> 00:14:48,720
know single pins here

362
00:14:48,720 --> 00:14:50,800
so later on you'll find that it is very

363
00:14:50,800 --> 00:14:52,800
cumbersome to move it around this in a

364
00:14:52,800 --> 00:14:54,399
board with attached tools in

365
00:14:54,399 --> 00:14:58,160
many lines so i later on i found that

366
00:14:58,160 --> 00:15:01,279
if i use this another 50 to

367
00:15:01,279 --> 00:15:05,600
840 i didn't uh i didn't need for this

368
00:15:05,600 --> 00:15:08,160
wire with a single pin and because there

369
00:15:08,160 --> 00:15:08,959
is a

370
00:15:08,959 --> 00:15:11,120
this board supports a virtual comport so

371
00:15:11,120 --> 00:15:13,680
i could use just usb cable one cable and

372
00:15:13,680 --> 00:15:15,199
you can see the uart you know debug

373
00:15:15,199 --> 00:15:16,320
messages so

374
00:15:16,320 --> 00:15:19,120
it was way more simple so again if you

375
00:15:19,120 --> 00:15:20,959
do not have

376
00:15:20,959 --> 00:15:23,920
oh actually this code i don't want to

377
00:15:23,920 --> 00:15:24,560
say

378
00:15:24,560 --> 00:15:27,959
i would recommend you to have this yeah

379
00:15:27,959 --> 00:15:29,680
5284

380
00:15:29,680 --> 00:15:32,720
that is because hold on a second

381
00:15:32,720 --> 00:15:36,320
uh and do you see this like a line

382
00:15:36,320 --> 00:15:39,519
i see something yes i can see the green

383
00:15:39,519 --> 00:15:42,880
okay how can i remove this one

384
00:15:42,880 --> 00:15:46,079
uh that should be in your

385
00:15:46,079 --> 00:15:50,560
anecdote uh with an eraser or something

386
00:15:50,560 --> 00:15:51,450
you should have that

387
00:15:51,450 --> 00:15:53,600
[Music]

388
00:15:53,600 --> 00:15:56,560
in this one here oh on the tape yeah

389
00:15:56,560 --> 00:15:57,440
let's see

390
00:15:57,440 --> 00:16:00,560
erase okay all right

391
00:16:00,560 --> 00:16:03,519
so let's see okay should try not to then

392
00:16:03,519 --> 00:16:04,639
touch here

393
00:16:04,639 --> 00:16:08,000
all right all right so now it's already

394
00:16:08,000 --> 00:16:09,440
right okay because i was thinking

395
00:16:09,440 --> 00:16:13,440
okay so since it wasn't removed good um

396
00:16:13,440 --> 00:16:16,399
so i just talked about the hardware now

397
00:16:16,399 --> 00:16:17,360
you will

398
00:16:17,360 --> 00:16:19,600
need a software right to actually

399
00:16:19,600 --> 00:16:21,440
generate the packets

400
00:16:21,440 --> 00:16:25,199
and i already released this jp nimble

401
00:16:25,199 --> 00:16:28,639
which is uh a modification of

402
00:16:28,639 --> 00:16:31,759
apache minor nimble i made a slight uh

403
00:16:31,759 --> 00:16:35,279
modification is because apache nimbo

404
00:16:35,279 --> 00:16:38,000
is supposed to be follow the

405
00:16:38,000 --> 00:16:39,040
specification

406
00:16:39,040 --> 00:16:40,800
and he's doing great job of following

407
00:16:40,800 --> 00:16:42,399
the specification but as a

408
00:16:42,399 --> 00:16:43,519
you know we are looking for the

409
00:16:43,519 --> 00:16:45,680
vulnerability it means we want to

410
00:16:45,680 --> 00:16:48,079
generate the package that doesn't comply

411
00:16:48,079 --> 00:16:50,240
with the specification so i had to

412
00:16:50,240 --> 00:16:53,519
make some modification so at the moment

413
00:16:53,519 --> 00:16:55,040
i released the

414
00:16:55,040 --> 00:16:57,440
this code is actually just a i extracted

415
00:16:57,440 --> 00:16:59,279
some code from my father

416
00:16:59,279 --> 00:17:02,320
so at the moment it uh the one that i

417
00:17:02,320 --> 00:17:04,400
under github has

418
00:17:04,400 --> 00:17:07,760
a way to generate arbitrary packets

419
00:17:07,760 --> 00:17:11,359
for the advertisement channels

420
00:17:11,359 --> 00:17:14,640
but for the data channel packets i will

421
00:17:14,640 --> 00:17:16,160
release at some point but

422
00:17:16,160 --> 00:17:18,799
just it's not there yet but i will lose

423
00:17:18,799 --> 00:17:19,599
at some point

424
00:17:19,599 --> 00:17:22,720
so let's see yeah

425
00:17:22,720 --> 00:17:26,319
so and for this one how it works is

426
00:17:26,319 --> 00:17:28,960
it comes with the two parts one is the

427
00:17:28,960 --> 00:17:30,240
at the formula that is

428
00:17:30,240 --> 00:17:33,120
as i mentioned is a apache nimbus modif

429
00:17:33,120 --> 00:17:34,080
modified of

430
00:17:34,080 --> 00:17:38,400
code and i added some custom hci command

431
00:17:38,400 --> 00:17:41,919
here so and i have a there is a host

432
00:17:41,919 --> 00:17:44,559
code which is written in python so what

433
00:17:44,559 --> 00:17:45,039
happens

434
00:17:45,039 --> 00:17:48,320
is when you generate the uh arbitrary

435
00:17:48,320 --> 00:17:50,400
packets using this python code it

436
00:17:50,400 --> 00:17:52,480
comments to this formula has sent this

437
00:17:52,480 --> 00:17:53,600
firmware

438
00:17:53,600 --> 00:17:56,720
send this packet to the victim

439
00:17:56,720 --> 00:18:00,720
this is how it works

440
00:18:00,720 --> 00:18:03,039
now we are done with the other setup

441
00:18:03,039 --> 00:18:04,640
let's check

442
00:18:04,640 --> 00:18:07,840
the our victims the first one is a texas

443
00:18:07,840 --> 00:18:09,640
instrument

444
00:18:09,640 --> 00:18:12,160
wl1835 mod so

445
00:18:12,160 --> 00:18:15,200
this board was it was the very my first

446
00:18:15,200 --> 00:18:18,720
development board i i got this supports

447
00:18:18,720 --> 00:18:21,039
in boost classic and the ble

448
00:18:21,039 --> 00:18:25,280
and if this board is a development board

449
00:18:25,280 --> 00:18:28,799
however it does not have any jtag or

450
00:18:28,799 --> 00:18:31,919
the serial white or the

451
00:18:31,919 --> 00:18:34,960
swd uh pins are not

452
00:18:34,960 --> 00:18:37,840
exposed so means there is no easy way to

453
00:18:37,840 --> 00:18:38,640
debug

454
00:18:38,640 --> 00:18:40,720
but however i found a way to develop and

455
00:18:40,720 --> 00:18:42,559
i will introduce

456
00:18:42,559 --> 00:18:46,080
in the following slide and

457
00:18:46,080 --> 00:18:48,880
this particular board actually for this

458
00:18:48,880 --> 00:18:50,080
one i couldn't find

459
00:18:50,080 --> 00:18:53,280
uh it's called former easily so i

460
00:18:53,280 --> 00:18:56,320
end up later dumping it the memory from

461
00:18:56,320 --> 00:18:56,720
this

462
00:18:56,720 --> 00:19:00,480
rom and uh by using actually this uh

463
00:19:00,480 --> 00:19:02,160
there is a

464
00:19:02,160 --> 00:19:04,480
wl link wireless tool that is given by

465
00:19:04,480 --> 00:19:07,039
the ti

466
00:19:07,039 --> 00:19:09,520
and you can download this one from the

467
00:19:09,520 --> 00:19:10,880
uh ti website

468
00:19:10,880 --> 00:19:13,440
and it comes with many utilities but i

469
00:19:13,440 --> 00:19:14,080
use the

470
00:19:14,080 --> 00:19:17,440
the hci tester and then the lower the

471
00:19:17,440 --> 00:19:19,200
most

472
00:19:19,200 --> 00:19:22,160
and i will show you in the following

473
00:19:22,160 --> 00:19:23,200
slide

474
00:19:23,200 --> 00:19:26,640
and this case of this ti device

475
00:19:26,640 --> 00:19:29,039
it actually belongs to this duology

476
00:19:29,039 --> 00:19:29,919
configuration

477
00:19:29,919 --> 00:19:33,200
so under this device itself it has only

478
00:19:33,200 --> 00:19:35,280
these low layer protocols

479
00:19:35,280 --> 00:19:38,000
and you can think of this one you can

480
00:19:38,000 --> 00:19:39,760
this low layer is you can think as

481
00:19:39,760 --> 00:19:42,559
blue z in the ubuntu so and they are

482
00:19:42,559 --> 00:19:43,919
communicating through the

483
00:19:43,919 --> 00:19:47,280
hdi layer here

484
00:19:47,760 --> 00:19:50,799
and as i mentioned i could

485
00:19:50,799 --> 00:19:52,799
i didn't have any formula with this

486
00:19:52,799 --> 00:19:54,160
device so how i did

487
00:19:54,160 --> 00:19:57,039
i dumped the memory was there is a

488
00:19:57,039 --> 00:19:58,559
vendor specific

489
00:19:58,559 --> 00:20:01,360
uh command there's a hci vendor specific

490
00:20:01,360 --> 00:20:02,799
read memory

491
00:20:02,799 --> 00:20:05,039
so i could see this one in the ti

492
00:20:05,039 --> 00:20:06,159
documentation

493
00:20:06,159 --> 00:20:08,640
and i could see the uh what this actual

494
00:20:08,640 --> 00:20:09,600
code is

495
00:20:09,600 --> 00:20:12,080
in there one of the supporting files so

496
00:20:12,080 --> 00:20:13,120
i use this uh

497
00:20:13,120 --> 00:20:15,520
command on my ubuntu and actually dump

498
00:20:15,520 --> 00:20:17,760
the entire memory so i now got the

499
00:20:17,760 --> 00:20:20,320
firmware

500
00:20:21,120 --> 00:20:25,679
handy and i analyzed using the uh

501
00:20:25,679 --> 00:20:29,280
ida pro and

502
00:20:29,280 --> 00:20:31,039
okay rather than reading this one i will

503
00:20:31,039 --> 00:20:32,400
show you the one of the

504
00:20:32,400 --> 00:20:34,240
as i mentioned this you know the ti

505
00:20:34,240 --> 00:20:36,559
device does not have any jpeg so

506
00:20:36,559 --> 00:20:39,120
the very key moment i could actually

507
00:20:39,120 --> 00:20:40,159
understand this

508
00:20:40,159 --> 00:20:42,240
cut in the context of the the wrong

509
00:20:42,240 --> 00:20:44,000
content was i actually identified i

510
00:20:44,000 --> 00:20:44,400
could

511
00:20:44,400 --> 00:20:47,200
identify these log functions and there's

512
00:20:47,200 --> 00:20:48,960
a one load function and there's a lot of

513
00:20:48,960 --> 00:20:49,919
wrappers

514
00:20:49,919 --> 00:20:53,120
which i will show you here

515
00:20:53,200 --> 00:20:55,760
and uh the details about how i found

516
00:20:55,760 --> 00:20:57,679
this low function is in the white paper

517
00:20:57,679 --> 00:20:59,360
because if i go through it it takes too

518
00:20:59,360 --> 00:21:01,039
much of a time but let's say i

519
00:21:01,039 --> 00:21:03,120
identify this low function so when you

520
00:21:03,120 --> 00:21:04,720
open this you know just

521
00:21:04,720 --> 00:21:07,280
uh memory dom in the ida you'll see

522
00:21:07,280 --> 00:21:09,039
nothing because there's no symbols at

523
00:21:09,039 --> 00:21:09,600
all

524
00:21:09,600 --> 00:21:13,360
so once i identify identified here

525
00:21:13,360 --> 00:21:16,640
here i could basically

526
00:21:16,640 --> 00:21:19,039
rename this one this is one of the log

527
00:21:19,039 --> 00:21:20,559
wrappers basically there's one

528
00:21:20,559 --> 00:21:22,400
again load function and there's a bunch

529
00:21:22,400 --> 00:21:25,440
of wrapper functions

530
00:21:25,600 --> 00:21:28,080
and after i identify this one that this

531
00:21:28,080 --> 00:21:28,880
low function

532
00:21:28,880 --> 00:21:31,039
turns out to be basically whenever this

533
00:21:31,039 --> 00:21:32,080
low function is called

534
00:21:32,080 --> 00:21:34,240
it will set the level there's a normal

535
00:21:34,240 --> 00:21:36,480
log level there's from one to six for

536
00:21:36,480 --> 00:21:38,480
this particular ti case

537
00:21:38,480 --> 00:21:42,000
and when you receive this uh log id

538
00:21:42,000 --> 00:21:46,240
here r0 is yellow id

539
00:21:46,559 --> 00:21:49,679
and then it adds 30 text 32

540
00:21:49,679 --> 00:21:53,840
to 35 80.

541
00:21:53,840 --> 00:21:56,320
it adds these values inside this wrapper

542
00:21:56,320 --> 00:21:57,120
function

543
00:21:57,120 --> 00:21:59,840
and expect two uh parameters for this

544
00:21:59,840 --> 00:22:00,720
format string

545
00:22:00,720 --> 00:22:03,600
as you see here how i identify it what

546
00:22:03,600 --> 00:22:05,440
is right now i know the low function

547
00:22:05,440 --> 00:22:10,400
and there is like a il i5 i believe yeah

548
00:22:10,400 --> 00:22:13,440
there is a list of strings you can see

549
00:22:13,440 --> 00:22:14,720
this what strings

550
00:22:14,720 --> 00:22:16,960
is based on this number by adding these

551
00:22:16,960 --> 00:22:18,159
two numbers

552
00:22:18,159 --> 00:22:21,440
then now based on these numbers now i

553
00:22:21,440 --> 00:22:22,159
see

554
00:22:22,159 --> 00:22:24,320
which string is being used and i made a

555
00:22:24,320 --> 00:22:25,600
item

556
00:22:25,600 --> 00:22:28,799
python script and i labeled it this one

557
00:22:28,799 --> 00:22:30,320
in this entire format

558
00:22:30,320 --> 00:22:33,360
um not entire just places that i'm

559
00:22:33,360 --> 00:22:34,320
interested in

560
00:22:34,320 --> 00:22:37,440
so based on this i know this string log

561
00:22:37,440 --> 00:22:38,159
information

562
00:22:38,159 --> 00:22:41,360
now i get ah this function is

563
00:22:41,360 --> 00:22:44,400
you know lm true um perform command

564
00:22:44,400 --> 00:22:45,280
function name

565
00:22:45,280 --> 00:22:47,520
by just you know repeating this process

566
00:22:47,520 --> 00:22:49,919
i could understand this you know

567
00:22:49,919 --> 00:22:53,120
uh what rom is actually doing here

568
00:22:53,120 --> 00:22:56,559
all right so basically okay

569
00:22:56,559 --> 00:23:00,559
all right now as you usually when you do

570
00:23:00,559 --> 00:23:00,880
this

571
00:23:00,880 --> 00:23:03,440
this abundance research static analysis

572
00:23:03,440 --> 00:23:03,919
is

573
00:23:03,919 --> 00:23:07,679
make some many times not enough because

574
00:23:07,679 --> 00:23:09,600
by just reading the code is hard to

575
00:23:09,600 --> 00:23:11,679
understand or it is

576
00:23:11,679 --> 00:23:13,440
sometimes it's unclear whether you know

577
00:23:13,440 --> 00:23:15,440
you can reach the

578
00:23:15,440 --> 00:23:18,640
code path so i made the folder

579
00:23:18,640 --> 00:23:22,960
and i could actually generate an

580
00:23:22,960 --> 00:23:25,520
arbitrary code and i could actually

581
00:23:25,520 --> 00:23:28,320
uh see my code has been executed in the

582
00:23:28,320 --> 00:23:28,960
uh

583
00:23:28,960 --> 00:23:33,120
rom code by by patching the

584
00:23:33,120 --> 00:23:36,880
uh this binary and i'll give you a

585
00:23:36,880 --> 00:23:38,400
little bit more detail let's see

586
00:23:38,400 --> 00:23:41,279
okay let me introduce you this one first

587
00:23:41,279 --> 00:23:43,360
as i mentioned this uh

588
00:23:43,360 --> 00:23:46,640
uh bluetooth low layer protocols

589
00:23:46,640 --> 00:23:50,000
uh is located in the rom but there

590
00:23:50,000 --> 00:23:52,559
is a way you can patch it and if you

591
00:23:52,559 --> 00:23:53,279
want you can

592
00:23:53,279 --> 00:23:57,200
uh look at the cortex m3 manual

593
00:23:57,200 --> 00:24:00,000
and there is a section called a flash

594
00:24:00,000 --> 00:24:00,640
patch

595
00:24:00,640 --> 00:24:03,760
and breakpoint unit and you will explain

596
00:24:03,760 --> 00:24:05,200
in very detail how you can

597
00:24:05,200 --> 00:24:08,559
patch this in a rom card and by

598
00:24:08,559 --> 00:24:11,840
uh patching the rom i could see you know

599
00:24:11,840 --> 00:24:15,440
what kind of register you know values

600
00:24:15,440 --> 00:24:17,600
are at the moment in some code when some

601
00:24:17,600 --> 00:24:19,919
code i executed

602
00:24:19,919 --> 00:24:23,360
let me get some water

603
00:24:26,159 --> 00:24:29,600
okay and another thing i found is

604
00:24:29,600 --> 00:24:32,240
while dynamically analyzing this rom

605
00:24:32,240 --> 00:24:33,120
there is a

606
00:24:33,120 --> 00:24:36,000
actually it's easier to show you the

607
00:24:36,000 --> 00:24:36,960
photo

608
00:24:36,960 --> 00:24:40,000
so this one actually show when you hear

609
00:24:40,000 --> 00:24:41,760
this is the one that i actually making

610
00:24:41,760 --> 00:24:44,159
the proof of the concept called

611
00:24:44,159 --> 00:24:46,880
so there here is that the pc value has

612
00:24:46,880 --> 00:24:48,880
been overwritten to 40 on 40 and 41.

613
00:24:48,880 --> 00:24:49,520
this is a

614
00:24:49,520 --> 00:24:52,559
thumb mode and if somebody uh

615
00:24:52,559 --> 00:24:55,039
some of you are familiar with this on i

616
00:24:55,039 --> 00:24:56,799
actually overwrite this one to 40 on

617
00:24:56,799 --> 00:24:59,840
korean 41 but because in some mode

618
00:24:59,840 --> 00:25:02,240
actually the program counter becomes an

619
00:25:02,240 --> 00:25:03,919
even number

620
00:25:03,919 --> 00:25:06,240
right and when you see when i didn't

621
00:25:06,240 --> 00:25:08,720
patch or then i didn't manipulate this

622
00:25:08,720 --> 00:25:09,600
in the rom

623
00:25:09,600 --> 00:25:11,840
this is the output you see in the lower

624
00:25:11,840 --> 00:25:12,960
this is a ti's

625
00:25:12,960 --> 00:25:16,320
utility chest utility

626
00:25:16,320 --> 00:25:18,799
and here you don't see that much of

627
00:25:18,799 --> 00:25:19,440
context

628
00:25:19,440 --> 00:25:22,720
what's the status of this board

629
00:25:22,720 --> 00:25:26,240
at the moment of crash but as i hear

630
00:25:26,240 --> 00:25:28,720
mention i actually the reverse engine

631
00:25:28,720 --> 00:25:30,320
default handler

632
00:25:30,320 --> 00:25:34,399
and i found that i can

633
00:25:34,559 --> 00:25:36,640
oh um okay i could see sorry it was just

634
00:25:36,640 --> 00:25:37,919
too big too small

635
00:25:37,919 --> 00:25:40,400
previously again i made it the bigger as

636
00:25:40,400 --> 00:25:43,679
you see this one's again a foreign 41.

637
00:25:43,679 --> 00:25:48,799
and i found that this one here memory

638
00:25:49,279 --> 00:25:52,559
okay let's go back let me explain about

639
00:25:52,559 --> 00:25:54,240
the uh

640
00:25:54,240 --> 00:25:58,240
the patch one first okay here

641
00:25:58,240 --> 00:26:01,440
as before this logo didn't show that

642
00:26:01,440 --> 00:26:01,840
much

643
00:26:01,840 --> 00:26:04,559
except this one is a 4141 but i patched

644
00:26:04,559 --> 00:26:06,159
this wrong card

645
00:26:06,159 --> 00:26:08,720
so the actual vulnerability is in the

646
00:26:08,720 --> 00:26:11,840
mem copy so just before it hit the

647
00:26:11,840 --> 00:26:14,320
you know the code they caught just

648
00:26:14,320 --> 00:26:16,559
before it

649
00:26:16,559 --> 00:26:19,919
could execute the uh mem copy i actually

650
00:26:19,919 --> 00:26:20,320
the

651
00:26:20,320 --> 00:26:23,360
hook the memory

652
00:26:23,360 --> 00:26:26,480
so i can see what's the source address

653
00:26:26,480 --> 00:26:27,919
and then what's the length that is

654
00:26:27,919 --> 00:26:30,000
fitting into the main copy

655
00:26:30,000 --> 00:26:32,159
and this one is showing the uh this is a

656
00:26:32,159 --> 00:26:34,400
source address and the second one here

657
00:26:34,400 --> 00:26:37,679
this is the length actually been fitting

658
00:26:37,679 --> 00:26:38,000
into

659
00:26:38,000 --> 00:26:41,520
the uh mem copy and i will explain a bit

660
00:26:41,520 --> 00:26:44,320
more uh the disassembled assembly code

661
00:26:44,320 --> 00:26:45,039
in the uh

662
00:26:45,039 --> 00:26:48,080
soon but let's see

663
00:26:48,080 --> 00:26:51,039
next one is the one about the fourth

664
00:26:51,039 --> 00:26:52,400
that i just mentioned

665
00:26:52,400 --> 00:26:56,400
without uh changing this kind of flag

666
00:26:56,400 --> 00:26:58,799
you don't see any detailed information

667
00:26:58,799 --> 00:27:00,559
at the moment of crash but

668
00:27:00,559 --> 00:27:03,200
now i know this and the fort handler

669
00:27:03,200 --> 00:27:04,720
checking some in a flag

670
00:27:04,720 --> 00:27:06,880
and if this flag is set then you will

671
00:27:06,880 --> 00:27:08,480
dump all the register

672
00:27:08,480 --> 00:27:11,760
in the register information

673
00:27:11,760 --> 00:27:14,559
informations and then stack and if this

674
00:27:14,559 --> 00:27:16,000
photo doesn't show that but there's a

675
00:27:16,000 --> 00:27:17,840
you know hip

676
00:27:17,840 --> 00:27:21,840
contents as well in the following

677
00:27:21,840 --> 00:27:24,320
now let's talk about the uh the

678
00:27:24,320 --> 00:27:25,520
vulnerability

679
00:27:25,520 --> 00:27:28,799
and in details and actually i found

680
00:27:28,799 --> 00:27:29,279
these

681
00:27:29,279 --> 00:27:31,360
vulnerabilities probably at the end of

682
00:27:31,360 --> 00:27:32,960
the 2018 but

683
00:27:32,960 --> 00:27:35,760
as i said i was just studying it so i

684
00:27:35,760 --> 00:27:36,960
found it because

685
00:27:36,960 --> 00:27:38,080
i'm familiar with the reverse

686
00:27:38,080 --> 00:27:39,760
engineering but just i didn't know how

687
00:27:39,760 --> 00:27:40,640
to you know

688
00:27:40,640 --> 00:27:42,080
deal with this in the develop a

689
00:27:42,080 --> 00:27:44,159
bluetooth development board so

690
00:27:44,159 --> 00:27:47,440
at the time i found the main copy

691
00:27:47,440 --> 00:27:48,960
the other main copy there's an integer

692
00:27:48,960 --> 00:27:50,720
on the floor but i didn't know how to

693
00:27:50,720 --> 00:27:53,919
reach that code and

694
00:27:53,919 --> 00:27:58,240
later on i found i made a photo

695
00:27:58,240 --> 00:28:00,240
then found that oh there's a crash oh

696
00:28:00,240 --> 00:28:02,559
and did the crash actually end up

697
00:28:02,559 --> 00:28:05,039
then i know integer on the floor that i

698
00:28:05,039 --> 00:28:06,720
found a while ago

699
00:28:06,720 --> 00:28:09,520
when actually at the time i was uh doing

700
00:28:09,520 --> 00:28:11,039
the bluetooth classic

701
00:28:11,039 --> 00:28:14,159
research rather than the bld but

702
00:28:14,159 --> 00:28:17,520
anyhow but it turns out the packet

703
00:28:17,520 --> 00:28:19,840
that i generate was exactly the same as

704
00:28:19,840 --> 00:28:21,120
a bleeding bit

705
00:28:21,120 --> 00:28:23,679
and i it's maybe some people say oh i

706
00:28:23,679 --> 00:28:25,200
read about the bleeding bed

707
00:28:25,200 --> 00:28:28,559
and this was exactly the same field

708
00:28:28,559 --> 00:28:31,279
however the code is different in the in

709
00:28:31,279 --> 00:28:32,720
the case of a bleeding bit

710
00:28:32,720 --> 00:28:35,200
uh vulnerability was a hip overflow but

711
00:28:35,200 --> 00:28:37,360
mine is a step overflow which means as

712
00:28:37,360 --> 00:28:38,399
you uh

713
00:28:38,399 --> 00:28:40,799
know step overflow is more dangerous

714
00:28:40,799 --> 00:28:41,760
because you can

715
00:28:41,760 --> 00:28:46,080
attack it more reliably than the ship

716
00:28:46,080 --> 00:28:50,879
and i report this one may 22 20 uh

717
00:28:51,080 --> 00:28:56,080
2019 and it was fixed in november 12th

718
00:28:56,080 --> 00:28:59,279
and let's see when the attack happens so

719
00:28:59,279 --> 00:29:01,440
when our device start looking for what

720
00:29:01,440 --> 00:29:02,640
is it where uh

721
00:29:02,640 --> 00:29:05,120
what kind of nearby devices are there

722
00:29:05,120 --> 00:29:06,320
then oteco just said

723
00:29:06,320 --> 00:29:08,399
here's the advertisement this is it

724
00:29:08,399 --> 00:29:10,320
basically as you see there's

725
00:29:10,320 --> 00:29:13,840
no other no traffic is any uh

726
00:29:13,840 --> 00:29:16,640
any uh transaction is required before

727
00:29:16,640 --> 00:29:17,120
attack

728
00:29:17,120 --> 00:29:20,640
basically just a victim needs uh

729
00:29:20,640 --> 00:29:22,880
need to uh which is the only

730
00:29:22,880 --> 00:29:24,159
precondition is

731
00:29:24,159 --> 00:29:26,640
big victim should be in the state is

732
00:29:26,640 --> 00:29:27,520
scanning

733
00:29:27,520 --> 00:29:29,520
looking for some other you know

734
00:29:29,520 --> 00:29:31,440
bluetooth devices you can think as you

735
00:29:31,440 --> 00:29:33,919
you know you open your your smart phone

736
00:29:33,919 --> 00:29:36,159
and then you just search in the you know

737
00:29:36,159 --> 00:29:38,159
headphone that's it then i'll take a

738
00:29:38,159 --> 00:29:41,440
send a malicious packet

739
00:29:41,440 --> 00:29:44,480
and now let's look at the

740
00:29:44,480 --> 00:29:49,520
assembly here a bit so the first here

741
00:29:50,159 --> 00:29:53,440
uh stack the

742
00:29:53,440 --> 00:29:55,600
code here just locate the stack memory

743
00:29:55,600 --> 00:29:56,640
space as a

744
00:29:56,640 --> 00:30:00,159
tool hex to see which is do you remember

745
00:30:00,159 --> 00:30:03,279
in the one of the previous

746
00:30:03,279 --> 00:30:08,159
slides okay maybe that's a good idea

747
00:30:08,159 --> 00:30:11,200
it was a i overwrote the length as fc

748
00:30:11,200 --> 00:30:13,279
which is fc is you know greater than the

749
00:30:13,279 --> 00:30:15,120
2c so i was actually overriding the

750
00:30:15,120 --> 00:30:15,919
other

751
00:30:15,919 --> 00:30:20,960
stack memory and

752
00:30:20,960 --> 00:30:22,799
actually vulnerability as you see here

753
00:30:22,799 --> 00:30:25,520
is the one here

754
00:30:25,520 --> 00:30:29,279
r6 has the uh a packet length

755
00:30:29,279 --> 00:30:31,600
it is a packet length field and i can

756
00:30:31,600 --> 00:30:32,880
and there is a

757
00:30:32,880 --> 00:30:36,320
no condition before this uh sub

758
00:30:36,320 --> 00:30:39,440
subtraction here so when r6

759
00:30:39,440 --> 00:30:41,919
value is basically uh smaller than six

760
00:30:41,919 --> 00:30:43,360
then there's an integer on the floor

761
00:30:43,360 --> 00:30:45,360
which means this r6 becomes really big

762
00:30:45,360 --> 00:30:48,399
number as an ffff

763
00:30:48,399 --> 00:30:51,600
in the next uh instruction tool is

764
00:30:51,600 --> 00:30:53,840
it actually do it by extension what it

765
00:30:53,840 --> 00:30:55,200
means is it

766
00:30:55,200 --> 00:30:58,480
make zero uh make zero into data into

767
00:30:58,480 --> 00:31:01,279
the three most significant bytes and

768
00:31:01,279 --> 00:31:03,440
leave the only the least

769
00:31:03,440 --> 00:31:05,840
combined as it is which becomes like a

770
00:31:05,840 --> 00:31:08,159
hex fc

771
00:31:08,159 --> 00:31:10,960
and based on this and calling convention

772
00:31:10,960 --> 00:31:12,320
the main copy

773
00:31:12,320 --> 00:31:15,279
expect is length either as a r2 and

774
00:31:15,279 --> 00:31:15,919
source is

775
00:31:15,919 --> 00:31:19,519
r1 which is a hip address

776
00:31:19,519 --> 00:31:22,880
and our zero as you see here

777
00:31:22,880 --> 00:31:26,320
is a stack memory uh address

778
00:31:26,320 --> 00:31:28,640
so this one end up basically inches on

779
00:31:28,640 --> 00:31:30,640
the floor

780
00:31:30,640 --> 00:31:34,080
leading to the step of overflow

781
00:31:34,080 --> 00:31:38,159
and this is an on uh packet

782
00:31:38,159 --> 00:31:40,799
information here an autek attacker can

783
00:31:40,799 --> 00:31:42,320
basically

784
00:31:42,320 --> 00:31:44,960
set the header type of zero and the

785
00:31:44,960 --> 00:31:45,360
length

786
00:31:45,360 --> 00:31:48,640
field is a true and simple is that

787
00:31:48,640 --> 00:31:51,120
right and then just put you know what

788
00:31:51,120 --> 00:31:53,679
whatever the payload two bytes

789
00:31:53,679 --> 00:31:55,360
and why this is happened i mentioned

790
00:31:55,360 --> 00:31:57,200
this when i was looking for particular

791
00:31:57,200 --> 00:31:58,880
places where the developer we're gonna

792
00:31:58,880 --> 00:32:00,080
make a mistake

793
00:32:00,080 --> 00:32:03,279
based on the bluetooth specification

794
00:32:03,279 --> 00:32:05,840
all the advertisement packets expect at

795
00:32:05,840 --> 00:32:06,399
least

796
00:32:06,399 --> 00:32:09,039
six bytes right so developer may think

797
00:32:09,039 --> 00:32:09,519
okay

798
00:32:09,519 --> 00:32:12,000
there should be six bytes and based on

799
00:32:12,000 --> 00:32:12,640
that you know

800
00:32:12,640 --> 00:32:14,559
assumption they made a call and then

801
00:32:14,559 --> 00:32:18,480
this kind of mistake uh can happen

802
00:32:18,640 --> 00:32:20,559
i mean which i should not have provided

803
00:32:20,559 --> 00:32:22,240
more but you know it happened

804
00:32:22,240 --> 00:32:25,760
so i made the proof of concept and then

805
00:32:25,760 --> 00:32:27,519
overriding the program counter

806
00:32:27,519 --> 00:32:30,080
with the podium 41 actually was easy but

807
00:32:30,080 --> 00:32:31,200
when i actually made

808
00:32:31,200 --> 00:32:33,600
uh try to make uh actually exploit it

809
00:32:33,600 --> 00:32:35,919
was hard because of the uh

810
00:32:35,919 --> 00:32:39,039
existing background about ble

811
00:32:39,039 --> 00:32:41,679
traffic so i come up with an attack

812
00:32:41,679 --> 00:32:42,399
scenario

813
00:32:42,399 --> 00:32:44,799
is a quiet place because of too many you

814
00:32:44,799 --> 00:32:45,919
know background

815
00:32:45,919 --> 00:32:49,519
uh traffic i could not reliably

816
00:32:49,519 --> 00:32:52,720
uh make the exploit working so what it

817
00:32:52,720 --> 00:32:53,760
means is

818
00:32:53,760 --> 00:32:57,679
i can toss all the nearby devices

819
00:32:57,679 --> 00:33:01,360
and there's a lot of more those uh

820
00:33:01,360 --> 00:33:04,320
box than the actually rc box or even the

821
00:33:04,320 --> 00:33:06,559
failed rc box can be used as a

822
00:33:06,559 --> 00:33:10,159
you know those attack so what i mean is

823
00:33:10,159 --> 00:33:12,880
this attacker here want to attack this

824
00:33:12,880 --> 00:33:14,240
device here

825
00:33:14,240 --> 00:33:17,200
but there are so many you know nearby

826
00:33:17,200 --> 00:33:18,480
devices

827
00:33:18,480 --> 00:33:20,960
what you can do is you can just toss all

828
00:33:20,960 --> 00:33:22,640
of them

829
00:33:22,640 --> 00:33:26,640
and send the attack payload

830
00:33:26,640 --> 00:33:29,840
however i'm not on a rear attacker and i

831
00:33:29,840 --> 00:33:32,000
cannot kill all my neighbors

832
00:33:32,000 --> 00:33:34,720
bluetooth devices so what i come up with

833
00:33:34,720 --> 00:33:35,519
is

834
00:33:35,519 --> 00:33:38,399
i have a bucket and specifically i had a

835
00:33:38,399 --> 00:33:39,679
paint pocket

836
00:33:39,679 --> 00:33:42,640
so i made i just uh you know further

837
00:33:42,640 --> 00:33:43,440
cage

838
00:33:43,440 --> 00:33:45,840
out of this paint bucket and you see it

839
00:33:45,840 --> 00:33:47,679
was not enough i couldn't end them you

840
00:33:47,679 --> 00:33:48,559
know team 40

841
00:33:48,559 --> 00:33:51,440
wrapping it and here's my devices which

842
00:33:51,440 --> 00:33:52,000
is a wrap

843
00:33:52,000 --> 00:33:55,200
media paper and tinfoil and this fabric

844
00:33:55,200 --> 00:33:57,120
is artificial fabric

845
00:33:57,120 --> 00:33:59,679
so by just wrapping it up a lot i could

846
00:33:59,679 --> 00:34:02,960
control the background noise

847
00:34:02,960 --> 00:34:06,159
and i will show you the actual demo here

848
00:34:06,159 --> 00:34:09,040
and what happens is now i have a two

849
00:34:09,040 --> 00:34:10,480
actually different machines

850
00:34:10,480 --> 00:34:13,839
and i set up my jackpin in both and

851
00:34:13,839 --> 00:34:16,159
i send the attack from you know over the

852
00:34:16,159 --> 00:34:17,599
air

853
00:34:17,599 --> 00:34:20,239
and now let's see and if you cannot hear

854
00:34:20,239 --> 00:34:23,520
the audio please let me know

855
00:34:24,719 --> 00:34:27,520
and oh this video already have the audio

856
00:34:27,520 --> 00:34:29,679
included so i'll be actually i'll stop

857
00:34:29,679 --> 00:34:30,480
talking while

858
00:34:30,480 --> 00:34:35,839
i'm playing this video

859
00:34:39,199 --> 00:34:41,040
before launching an attack i'm going to

860
00:34:41,040 --> 00:34:45,359
show you nearby ble devices

861
00:34:45,359 --> 00:34:47,119
and you don't see anything with the name

862
00:34:47,119 --> 00:34:48,879
pond on my

863
00:34:48,879 --> 00:34:52,639
neighbor has a smart refrigerator

864
00:34:53,520 --> 00:34:57,119
and i'm going to use btmin to show hci

865
00:34:57,119 --> 00:35:00,720
command and this event to

866
00:35:00,720 --> 00:35:04,240
see the states of the victim

867
00:35:04,720 --> 00:35:06,240
and i'm going to attach the victim

868
00:35:06,240 --> 00:35:09,520
device to this host

869
00:35:10,400 --> 00:35:12,960
and here as you see the host use old

870
00:35:12,960 --> 00:35:13,440
patch

871
00:35:13,440 --> 00:35:15,119
in order to initialize the victim so

872
00:35:15,119 --> 00:35:18,800
this a device still vulnerable

873
00:35:26,480 --> 00:35:29,760
now i'm going to comment for

874
00:35:29,760 --> 00:35:33,359
the victim to start scanning using the

875
00:35:33,359 --> 00:35:37,119
hcl tool here and launching the

876
00:35:37,119 --> 00:35:40,400
attack over the air from actually

877
00:35:40,400 --> 00:35:44,000
different machines

878
00:35:44,000 --> 00:35:46,720
oh now you see there are some hci event

879
00:35:46,720 --> 00:35:48,320
and it actually just uh

880
00:35:48,320 --> 00:35:50,240
reporting the received package to the

881
00:35:50,240 --> 00:35:52,000
host

882
00:35:52,000 --> 00:35:54,880
and uh the author actually succeeded

883
00:35:54,880 --> 00:35:55,599
because

884
00:35:55,599 --> 00:35:59,440
when i scan nearby device again

885
00:35:59,440 --> 00:36:01,520
you see pawn but this victim supposed to

886
00:36:01,520 --> 00:36:04,480
be scanning only

887
00:36:07,200 --> 00:36:11,680
all right i hope you enjoyed the demo

888
00:36:11,680 --> 00:36:13,280
okay next one since i don't have enough

889
00:36:13,280 --> 00:36:15,440
time i was going to skip this of

890
00:36:15,440 --> 00:36:18,240
vulnerabilities

891
00:36:18,880 --> 00:36:20,160
there's a slightly different but if you

892
00:36:20,160 --> 00:36:21,440
want to know the details please check

893
00:36:21,440 --> 00:36:22,240
out my

894
00:36:22,240 --> 00:36:26,000
paper and now let's see the next

895
00:36:26,000 --> 00:36:29,040
target which is the silicon labs

896
00:36:29,040 --> 00:36:32,640
ef uh efr 32mg 21.

897
00:36:32,640 --> 00:36:35,520
i picked this development board because

898
00:36:35,520 --> 00:36:36,000
this

899
00:36:36,000 --> 00:36:38,880
board supports the extended advertising

900
00:36:38,880 --> 00:36:40,960
packets because i wanted to actually

901
00:36:40,960 --> 00:36:44,000
extend my forger and i

902
00:36:44,000 --> 00:36:46,640
needed a victim basically so but this

903
00:36:46,640 --> 00:36:47,680
board is actually

904
00:36:47,680 --> 00:36:50,400
good to debug because it has a data

905
00:36:50,400 --> 00:36:51,200
enabled

906
00:36:51,200 --> 00:36:53,359
you can actually use the gdb to debug

907
00:36:53,359 --> 00:36:54,560
this device

908
00:36:54,560 --> 00:36:57,119
and the bluetooth statistic comes as a

909
00:36:57,119 --> 00:36:57,760
library

910
00:36:57,760 --> 00:37:00,240
and very good thing is it has a symbols

911
00:37:00,240 --> 00:37:02,160
so it's easy to

912
00:37:02,160 --> 00:37:04,640
not easy to say but you know it's easier

913
00:37:04,640 --> 00:37:06,240
to debug

914
00:37:06,240 --> 00:37:08,880
but bad side is you know there isn't

915
00:37:08,880 --> 00:37:09,680
going to be any

916
00:37:09,680 --> 00:37:12,240
novel reversal engineering tactics for

917
00:37:12,240 --> 00:37:13,760
this particular device

918
00:37:13,760 --> 00:37:15,760
and this device belongs to this

919
00:37:15,760 --> 00:37:17,599
dimension the single chip configuration

920
00:37:17,599 --> 00:37:20,160
so entire this protocol resides on the

921
00:37:20,160 --> 00:37:24,560
controller device and

922
00:37:24,560 --> 00:37:27,839
when i uh extend the uh make the

923
00:37:27,839 --> 00:37:28,560
extended

924
00:37:28,560 --> 00:37:31,599
advertisement packet uh fuzzing i had to

925
00:37:31,599 --> 00:37:32,800
actually change the

926
00:37:32,800 --> 00:37:35,119
uh change the my photo lag from

927
00:37:35,119 --> 00:37:36,400
especially because the

928
00:37:36,400 --> 00:37:38,800
at the time i was using the zephyr but

929
00:37:38,800 --> 00:37:41,520
zeppel didn't uh

930
00:37:41,520 --> 00:37:44,480
support the extended advertising

931
00:37:44,480 --> 00:37:46,560
advertisement so i switch it from zephyr

932
00:37:46,560 --> 00:37:48,480
to nimble

933
00:37:48,480 --> 00:37:50,400
and i would start pointing it and

934
00:37:50,400 --> 00:37:52,560
actually find the ghost ball in almost

935
00:37:52,560 --> 00:37:53,680
immediately

936
00:37:53,680 --> 00:37:55,920
and i was in some more days but there

937
00:37:55,920 --> 00:37:57,119
was nothing

938
00:37:57,119 --> 00:37:59,520
that's happening so at the time i think

939
00:37:59,520 --> 00:38:01,599
it's then you know really maybe

940
00:38:01,599 --> 00:38:05,200
the the science code is very good

941
00:38:05,200 --> 00:38:08,560
or my frozen is wrong right so as i

942
00:38:08,560 --> 00:38:09,200
mentioned

943
00:38:09,200 --> 00:38:12,560
at the time i was using the uber tools

944
00:38:12,560 --> 00:38:14,160
but i could not see whether

945
00:38:14,160 --> 00:38:16,320
my package which is really has a really

946
00:38:16,320 --> 00:38:17,359
large package

947
00:38:17,359 --> 00:38:18,960
i couldn't see whether it is valid or

948
00:38:18,960 --> 00:38:21,359
not but i was very lucky that the sniff

949
00:38:21,359 --> 00:38:24,640
was uh introduced at the time at the end

950
00:38:24,640 --> 00:38:26,160
of the 2019 so

951
00:38:26,160 --> 00:38:28,240
i used a c4 and then i could actually

952
00:38:28,240 --> 00:38:30,000
see that when i make really

953
00:38:30,000 --> 00:38:32,320
large advertisement packet it was not

954
00:38:32,320 --> 00:38:34,240
actually being sent

955
00:38:34,240 --> 00:38:36,640
and because of that i could actually

956
00:38:36,640 --> 00:38:37,920
have to debunk the

957
00:38:37,920 --> 00:38:40,320
nimble and it found that i had to

958
00:38:40,320 --> 00:38:42,400
actually arbitrarily increase the

959
00:38:42,400 --> 00:38:45,119
uh scheduler so that the large packet

960
00:38:45,119 --> 00:38:46,720
can actually be sent

961
00:38:46,720 --> 00:38:49,839
so i changed nimble code and

962
00:38:49,839 --> 00:38:53,839
i found the crash right after that

963
00:38:53,920 --> 00:38:57,040
and here i mentioned there's two

964
00:38:57,040 --> 00:38:59,839
vulnerabilities in the design lab

965
00:38:59,839 --> 00:39:00,400
whatever

966
00:39:00,400 --> 00:39:03,680
uh center board the first one is it was

967
00:39:03,680 --> 00:39:04,079
a

968
00:39:04,079 --> 00:39:06,320
dosbox and i'll show you what this is a

969
00:39:06,320 --> 00:39:07,119
memory before

970
00:39:07,119 --> 00:39:10,400
floor i'll go very briefly

971
00:39:10,400 --> 00:39:13,440
there's an image on the floor and i can

972
00:39:13,440 --> 00:39:14,000
make this

973
00:39:14,000 --> 00:39:16,320
r2 value which is a length value really

974
00:39:16,320 --> 00:39:17,200
large

975
00:39:17,200 --> 00:39:19,200
but i couldn't actually make it as rc

976
00:39:19,200 --> 00:39:20,400
that is because

977
00:39:20,400 --> 00:39:23,440
when you see here this r2 value

978
00:39:23,440 --> 00:39:25,520
there is no changes until it fit into

979
00:39:25,520 --> 00:39:27,119
the main move

980
00:39:27,119 --> 00:39:30,640
and before actually the device crashes

981
00:39:30,640 --> 00:39:33,200
i could not have actually uh have a you

982
00:39:33,200 --> 00:39:34,800
know control this on the program

983
00:39:34,800 --> 00:39:36,720
encounters value that means

984
00:39:36,720 --> 00:39:39,040
this is not going to be the uh rc bug

985
00:39:39,040 --> 00:39:40,480
but the dos block

986
00:39:40,480 --> 00:39:42,320
the difference i was just pointed here

987
00:39:42,320 --> 00:39:44,960
uh quick is this one is that the ti code

988
00:39:44,960 --> 00:39:47,040
there was in case of a ti code there was

989
00:39:47,040 --> 00:39:50,079
a unsigned body extension so before

990
00:39:50,079 --> 00:39:53,200
the the chip actually crashes i can have

991
00:39:53,200 --> 00:39:55,280
a little bit of control

992
00:39:55,280 --> 00:39:57,760
but put this outside this case this memo

993
00:39:57,760 --> 00:39:59,200
i couldn't so it one is

994
00:39:59,200 --> 00:40:01,200
those but the other there is

995
00:40:01,200 --> 00:40:03,520
another bug that is a capable overflow

996
00:40:03,520 --> 00:40:05,040
that

997
00:40:05,040 --> 00:40:07,920
and as you you know hip overflow is

998
00:40:07,920 --> 00:40:10,319
often complex so i'll go very high level

999
00:40:10,319 --> 00:40:11,359
briefly

1000
00:40:11,359 --> 00:40:14,400
so when this developer received a really

1001
00:40:14,400 --> 00:40:16,800
large packet it actually

1002
00:40:16,800 --> 00:40:19,119
fragmented into the smaller of the

1003
00:40:19,119 --> 00:40:20,000
buffers

1004
00:40:20,000 --> 00:40:22,400
and buffer size the hex 49 which is a

1005
00:40:22,400 --> 00:40:23,520
weird value

1006
00:40:23,520 --> 00:40:26,000
to have you know the actual size of the

1007
00:40:26,000 --> 00:40:27,200
uh

1008
00:40:27,200 --> 00:40:30,240
memory chunks but anyway the

1009
00:40:30,240 --> 00:40:33,119
they manage this in a large uh packet

1010
00:40:33,119 --> 00:40:34,640
into the smaller

1011
00:40:34,640 --> 00:40:38,160
chained memory uh memory uh chained

1012
00:40:38,160 --> 00:40:39,440
memory link

1013
00:40:39,440 --> 00:40:41,200
and while they are doing it they made

1014
00:40:41,200 --> 00:40:43,359
some mistakes so i end up could

1015
00:40:43,359 --> 00:40:45,839
uh override uh well from one memory

1016
00:40:45,839 --> 00:40:47,599
chunk to the next memory chunks

1017
00:40:47,599 --> 00:40:50,480
metadata and i could overwrite the over

1018
00:40:50,480 --> 00:40:51,760
idea

1019
00:40:51,760 --> 00:40:55,760
or memory pointer and this is uh

1020
00:40:55,760 --> 00:40:58,800
how this packet looks like is uh i put

1021
00:40:58,800 --> 00:40:59,200
it as

1022
00:40:59,200 --> 00:41:01,520
this is the extended uh advertisement

1023
00:41:01,520 --> 00:41:02,960
and this uh there is

1024
00:41:02,960 --> 00:41:05,680
included extended advertisement there is

1025
00:41:05,680 --> 00:41:06,480
a

1026
00:41:06,480 --> 00:41:09,359
nested extended header inside this

1027
00:41:09,359 --> 00:41:10,160
payload

1028
00:41:10,160 --> 00:41:13,440
and i could set the value as a 3c that

1029
00:41:13,440 --> 00:41:15,599
ends up as a crash

1030
00:41:15,599 --> 00:41:18,560
and without the detail however i will

1031
00:41:18,560 --> 00:41:20,240
show you the cool demo that

1032
00:41:20,240 --> 00:41:22,720
i explored this you know that board and

1033
00:41:22,720 --> 00:41:23,599
i make the

1034
00:41:23,599 --> 00:41:26,560
persistent payload and let's take a look

1035
00:41:26,560 --> 00:41:28,000
at this one

1036
00:41:28,000 --> 00:41:31,119
so for this uh particular demo case i'm

1037
00:41:31,119 --> 00:41:33,119
attacking from the different machine

1038
00:41:33,119 --> 00:41:35,680
but there is a controller well i just

1039
00:41:35,680 --> 00:41:36,319
put the

1040
00:41:36,319 --> 00:41:38,560
debugger attached to the device as i

1041
00:41:38,560 --> 00:41:40,640
said this is a single chip configuration

1042
00:41:40,640 --> 00:41:44,079
entire protocol is residing on this uh

1043
00:41:44,079 --> 00:41:47,359
board but i just connecting to the gdp

1044
00:41:47,359 --> 00:41:48,560
just to check the

1045
00:41:48,560 --> 00:41:51,440
status of the device and here i'm

1046
00:41:51,440 --> 00:41:52,480
remotely

1047
00:41:52,480 --> 00:41:55,119
attacking the device and persist by

1048
00:41:55,119 --> 00:41:56,560
building the house

1049
00:41:56,560 --> 00:41:58,560
so i'll show you the actually how the

1050
00:41:58,560 --> 00:42:03,839
persistent work in the demo

1051
00:42:05,839 --> 00:42:08,880
i'm going to connect gdb to the victim

1052
00:42:08,880 --> 00:42:11,040
device in order to just see the state of

1053
00:42:11,040 --> 00:42:16,319
the device

1054
00:42:16,319 --> 00:42:18,319
and the client is connected to the gdp

1055
00:42:18,319 --> 00:42:20,160
server and i'm starting the

1056
00:42:20,160 --> 00:42:25,359
uber tools to see the bld traffic

1057
00:42:27,760 --> 00:42:29,599
and i'm starting generating the

1058
00:42:29,599 --> 00:42:31,680
molecules packets over the air from the

1059
00:42:31,680 --> 00:42:34,399
different machine

1060
00:42:39,119 --> 00:42:42,079
and you hear you see they're still here

1061
00:42:42,079 --> 00:42:43,119
advertisement

1062
00:42:43,119 --> 00:42:44,880
this victim is supposed to be scanning

1063
00:42:44,880 --> 00:42:46,560
only

1064
00:42:46,560 --> 00:42:49,119
and this share code what it does is once

1065
00:42:49,119 --> 00:42:50,640
it uh

1066
00:42:50,640 --> 00:42:59,839
exploit the device it reset the device

1067
00:43:00,240 --> 00:43:04,560
now i'm going to turn off this victim

1068
00:43:10,839 --> 00:43:13,839
device

1069
00:43:16,240 --> 00:43:17,920
and it's a little bit slow because i was

1070
00:43:17,920 --> 00:43:21,760
recording and i was typing as well

1071
00:43:23,440 --> 00:43:27,119
now i'm going to clear this left lower

1072
00:43:27,119 --> 00:43:30,560
screen in order to show that

1073
00:43:30,560 --> 00:43:32,880
when the victim device is off you will

1074
00:43:32,880 --> 00:43:35,119
not see any advertisement traffic

1075
00:43:35,119 --> 00:43:38,640
coming out of the victim device

1076
00:43:39,440 --> 00:43:43,520
i'm restarting the uh overtooth

1077
00:43:43,680 --> 00:43:45,680
and the one you just see is just a

1078
00:43:45,680 --> 00:43:46,960
render background

1079
00:43:46,960 --> 00:43:50,720
traffic and i'm going to

1080
00:43:50,720 --> 00:43:55,839
turn on the device again

1081
00:43:57,119 --> 00:43:59,680
now you still see this advertisement

1082
00:43:59,680 --> 00:44:00,720
packet

1083
00:44:00,720 --> 00:44:03,680
that proves that the exploits persist on

1084
00:44:03,680 --> 00:44:09,839
the device

1085
00:44:09,920 --> 00:44:11,599
all right i'm going to wrap up with the

1086
00:44:11,599 --> 00:44:13,200
uh uh

1087
00:44:13,200 --> 00:44:16,160
secret bluetooth security challenges so

1088
00:44:16,160 --> 00:44:16,720
they

1089
00:44:16,720 --> 00:44:19,839
all the uh low layer device i have

1090
00:44:19,839 --> 00:44:22,400
looked at so far i never haven't seen

1091
00:44:22,400 --> 00:44:22,880
any

1092
00:44:22,880 --> 00:44:24,960
and actually low layer protocols have

1093
00:44:24,960 --> 00:44:27,200
any of these mitigation

1094
00:44:27,200 --> 00:44:30,640
techniques implemented on it and another

1095
00:44:30,640 --> 00:44:34,160
thing is as i show in the demo

1096
00:44:34,160 --> 00:44:37,280
uh if on end product didn't

1097
00:44:37,280 --> 00:44:40,400
uh enable this a secure board an

1098
00:44:40,400 --> 00:44:43,359
attack car can persist on the device and

1099
00:44:43,359 --> 00:44:43,920
in the

1100
00:44:43,920 --> 00:44:47,040
in case of many chips out there it is

1101
00:44:47,040 --> 00:44:48,960
frequently indicated you know either it

1102
00:44:48,960 --> 00:44:50,000
does not have a secure

1103
00:44:50,000 --> 00:44:53,040
book implement it at all or

1104
00:44:53,040 --> 00:44:54,160
this you know and the product

1105
00:44:54,160 --> 00:44:56,000
manufacturer didn't have it enabled so

1106
00:44:56,000 --> 00:44:57,200
either

1107
00:44:57,200 --> 00:45:00,400
didn't have enabled it at all so

1108
00:45:00,400 --> 00:45:03,839
it is uh but i see the more newer chips

1109
00:45:03,839 --> 00:45:05,359
actually have the secure button the

1110
00:45:05,359 --> 00:45:06,560
security set but

1111
00:45:06,560 --> 00:45:10,079
still there's a lot of uh way to go

1112
00:45:10,079 --> 00:45:12,079
and another thing is now i found this rc

1113
00:45:12,079 --> 00:45:13,440
box but then

1114
00:45:13,440 --> 00:45:15,760
what does that mean i was trying to

1115
00:45:15,760 --> 00:45:16,640
assess the actual

1116
00:45:16,640 --> 00:45:18,640
impact of it but it was very hard

1117
00:45:18,640 --> 00:45:20,800
because i don't know whether this

1118
00:45:20,800 --> 00:45:22,400
what kind of end product using these

1119
00:45:22,400 --> 00:45:24,079
particular chips

1120
00:45:24,079 --> 00:45:27,040
and it can be just simple as a bulbs or

1121
00:45:27,040 --> 00:45:28,400
it can be a medical device if it's a

1122
00:45:28,400 --> 00:45:29,520
medical device

1123
00:45:29,520 --> 00:45:31,119
then even those having those

1124
00:45:31,119 --> 00:45:33,040
vulnerability services can be very

1125
00:45:33,040 --> 00:45:34,880
dangerous

1126
00:45:34,880 --> 00:45:38,960
and often in a case of the customer list

1127
00:45:38,960 --> 00:45:40,560
the event is not going to share it

1128
00:45:40,560 --> 00:45:42,560
because that's the company's

1129
00:45:42,560 --> 00:45:46,079
secret and by looking at just web

1130
00:45:46,079 --> 00:45:46,960
searching

1131
00:45:46,960 --> 00:45:48,800
it's very limited that you know you

1132
00:45:48,800 --> 00:45:50,160
cannot actually see the

1133
00:45:50,160 --> 00:45:52,880
whole you know complete picture of what

1134
00:45:52,880 --> 00:45:54,079
kind of end product

1135
00:45:54,079 --> 00:45:56,800
right using what kind of chips you know

1136
00:45:56,800 --> 00:45:58,000
out there so

1137
00:45:58,000 --> 00:46:01,359
this is a big challenge we need to

1138
00:46:01,359 --> 00:46:04,800
solve somehow but yeah you are going to

1139
00:46:04,800 --> 00:46:06,160
require very you know

1140
00:46:06,160 --> 00:46:08,240
or cheap vendors and any other you know

1141
00:46:08,240 --> 00:46:10,000
bluetooth device manufacturers and

1142
00:46:10,000 --> 00:46:13,680
their help and you can find here more

1143
00:46:13,680 --> 00:46:14,800
information

1144
00:46:14,800 --> 00:46:17,599
in this github address here and thank

1145
00:46:17,599 --> 00:46:18,240
you for

1146
00:46:18,240 --> 00:46:21,279
listening to my talk

1147
00:46:22,560 --> 00:46:26,000
thank you veronica uh i like those two

1148
00:46:26,000 --> 00:46:29,839
cute puppies in the last slide

1149
00:46:29,920 --> 00:46:32,319
uh yeah it's time for questions and

1150
00:46:32,319 --> 00:46:34,400
answers uh

1151
00:46:34,400 --> 00:46:37,359
we have a few questions uh let me read

1152
00:46:37,359 --> 00:46:38,800
them out for you

1153
00:46:38,800 --> 00:46:41,839
what what what is the tool which

1154
00:46:41,839 --> 00:46:43,680
displayed all the

1155
00:46:43,680 --> 00:46:46,720
bluetooth logs that you used

1156
00:46:46,720 --> 00:46:50,319
oh the at the ti case

1157
00:46:50,319 --> 00:46:52,400
right i believe so this was in the

1158
00:46:52,400 --> 00:46:54,160
middle of the prosecution yeah

1159
00:46:54,160 --> 00:46:57,119
okay that was the uh the when you go to

1160
00:46:57,119 --> 00:46:57,440
the

1161
00:46:57,440 --> 00:47:02,640
ti website and or you can search for the

1162
00:47:02,640 --> 00:47:06,560
uh there is a wireless tools for you

1163
00:47:06,560 --> 00:47:07,520
know wl

1164
00:47:07,520 --> 00:47:10,720
18 you know modules basically

1165
00:47:10,720 --> 00:47:13,839
it is a texas instruments uh provided

1166
00:47:13,839 --> 00:47:14,400
tool

1167
00:47:14,400 --> 00:47:15,920
so you need to actually register and

1168
00:47:15,920 --> 00:47:17,520
then download from their

1169
00:47:17,520 --> 00:47:20,960
website all right uh what kind of

1170
00:47:20,960 --> 00:47:22,640
mutation did you use

1171
00:47:22,640 --> 00:47:25,760
for fuzzing the packets

1172
00:47:25,760 --> 00:47:28,880
mutation i actually do kind of very uh

1173
00:47:28,880 --> 00:47:30,160
kind of kind of easily it's still

1174
00:47:30,160 --> 00:47:32,720
effective as i i use the uh

1175
00:47:32,720 --> 00:47:35,599
enumeration rather than just any i know

1176
00:47:35,599 --> 00:47:38,800
specific algorithm without using it

1177
00:47:38,800 --> 00:47:41,839
but i was focusing on the at the forcing

1178
00:47:41,839 --> 00:47:43,359
the field that

1179
00:47:43,359 --> 00:47:46,160
you know developer could probably gonna

1180
00:47:46,160 --> 00:47:49,040
make a mistake so don't be the first

1181
00:47:49,040 --> 00:47:52,000
all right uh can you share the link of

1182
00:47:52,000 --> 00:47:54,319
the white paper

1183
00:47:54,319 --> 00:47:58,319
okay picture or listen

1184
00:47:58,319 --> 00:48:01,440
when you go here okay

1185
00:48:01,440 --> 00:48:04,800
it's on the github.com on the github

1186
00:48:04,800 --> 00:48:09,359
and there's a publication report

1187
00:48:09,359 --> 00:48:12,559
all right yep uh so yeah uh

1188
00:48:12,559 --> 00:48:14,319
i think that's it for the question and

1189
00:48:14,319 --> 00:48:16,640
answers uh thank you so much

1190
00:48:16,640 --> 00:48:18,800
uh veronica and thank you so much

1191
00:48:18,800 --> 00:48:21,040
audience for being part of this webinar

1192
00:48:21,040 --> 00:48:23,119
we will be recording this and uploading

1193
00:48:23,119 --> 00:48:24,960
it on our youtube channel for future

1194
00:48:24,960 --> 00:48:26,000
references

1195
00:48:26,000 --> 00:48:29,920
uh so yeah thank you everybody

1196
00:48:29,920 --> 00:48:33,599
thank you have a good day

