1
00:00:02,170 --> 00:00:11,369
[Music]

2
00:00:11,420 --> 00:00:16,079
and actually on this webinar we will be

3
00:00:16,079 --> 00:00:18,539
talking about it when citrate evolution

4
00:00:18,539 --> 00:00:21,150
and why the continued v Ferber implants

5
00:00:21,150 --> 00:00:25,140
is important and before we start I want

6
00:00:25,140 --> 00:00:28,470
actually to make a quick introduction

7
00:00:28,470 --> 00:00:31,439
about the training so actually my

8
00:00:31,439 --> 00:00:34,109
introduction already happens I will skip

9
00:00:34,109 --> 00:00:38,609
it and so how we got this idea with my

10
00:00:38,609 --> 00:00:40,889
friend Alex Gazette to create the

11
00:00:40,889 --> 00:00:43,469
training about evolution of persistence

12
00:00:43,469 --> 00:00:46,350
technique and actually how can't you fi

13
00:00:46,350 --> 00:00:48,899
firmware implants basically was doing

14
00:00:48,899 --> 00:00:51,120
both of us was doing research and we

15
00:00:51,120 --> 00:00:52,979
fight for more space quite a while and

16
00:00:52,979 --> 00:00:56,519
we see a lot of gaps in the tread

17
00:00:56,519 --> 00:01:00,079
modeling and understanding of reality

18
00:01:00,079 --> 00:01:06,270
how this kind of threat is in fact in

19
00:01:06,270 --> 00:01:09,420
infrastructure and how security products

20
00:01:09,420 --> 00:01:13,100
currently exist on the market actually

21
00:01:13,100 --> 00:01:16,470
can't detect it and don't gain any

22
00:01:16,470 --> 00:01:18,800
visibility on this kind of problems and

23
00:01:18,800 --> 00:01:23,780
even some of antivirus products try to

24
00:01:23,780 --> 00:01:26,370
claim they can dump and analyze the

25
00:01:26,370 --> 00:01:28,860
buyers problem is without any hardware

26
00:01:28,860 --> 00:01:32,970
background and firmware background it's

27
00:01:32,970 --> 00:01:35,520
hard to analyze correctly and even if

28
00:01:35,520 --> 00:01:37,680
you have a lot of data it doesn't help

29
00:01:37,680 --> 00:01:41,340
much so our training try to fill these

30
00:01:41,340 --> 00:01:43,560
gaps and be starting actually with some

31
00:01:43,560 --> 00:01:47,790
of the things working on the boot

32
00:01:47,790 --> 00:01:50,310
sequences we will be talking about the

33
00:01:50,310 --> 00:01:52,409
boot loaders on a prating system like

34
00:01:52,409 --> 00:01:56,070
Linux and Windows 10 rats and builds we

35
00:01:56,070 --> 00:02:00,240
will be a bit cover the legacy threads

36
00:02:00,240 --> 00:02:04,340
like a boot kids and kids infecting

37
00:02:04,340 --> 00:02:06,659
Master Boot Record and volume Boot

38
00:02:06,659 --> 00:02:09,959
Record and also we will be transferred

39
00:02:09,959 --> 00:02:11,879
to you

40
00:02:11,879 --> 00:02:14,100
thread

41
00:02:14,100 --> 00:02:16,230
talk vectors which is affecting the

42
00:02:16,230 --> 00:02:18,030
secure boot we will be talking about

43
00:02:18,030 --> 00:02:20,400
multiple components across the platform

44
00:02:20,400 --> 00:02:25,140
like a TPM BMC and embedded controller

45
00:02:25,140 --> 00:02:28,140
and of course virus so what is a

46
00:02:28,140 --> 00:02:31,740
difference between our class and others

47
00:02:31,740 --> 00:02:34,380
we actually will be focused a lot on the

48
00:02:34,380 --> 00:02:37,550
reverse engineering parts how you can

49
00:02:37,550 --> 00:02:40,680
try to understand where is the malicious

50
00:02:40,680 --> 00:02:44,970
code where is not and actually also the

51
00:02:44,970 --> 00:02:54,740
will be focus on will be focused on

52
00:02:55,980 --> 00:03:00,520
how you can reconstruct your I DB how

53
00:03:00,520 --> 00:03:03,660
you can basically add in your a DB

54
00:03:03,660 --> 00:03:07,030
information regarding you fight

55
00:03:07,030 --> 00:03:09,970
specifics and how you can make your code

56
00:03:09,970 --> 00:03:10,900
more readable

57
00:03:10,900 --> 00:03:15,660
okay let's start a bit wise important so

58
00:03:15,660 --> 00:03:19,900
actually the trend to landscape which we

59
00:03:19,900 --> 00:03:22,720
see in right now it's pretty much looks

60
00:03:22,720 --> 00:03:26,110
like an iceberg so the top level of the

61
00:03:26,110 --> 00:03:28,930
tread like what treads which is

62
00:03:28,930 --> 00:03:32,320
operating on operating system-level

63
00:03:32,320 --> 00:03:35,980
we see pretty much well because it is a

64
00:03:35,980 --> 00:03:39,640
lot of years the security products

65
00:03:39,640 --> 00:03:41,920
walked on this direction and they do

66
00:03:41,920 --> 00:03:45,490
their job well but we have also

67
00:03:45,490 --> 00:03:49,720
underwater part of iceberg and I would

68
00:03:49,720 --> 00:03:52,360
say it's about modern persistent

69
00:03:52,360 --> 00:03:54,550
techniques which is tied to the hardware

70
00:03:54,550 --> 00:03:58,540
and the firmware parts and nobody or

71
00:03:58,540 --> 00:04:02,920
like very rare when security products

72
00:04:02,920 --> 00:04:07,450
can check this kind of parts correctly

73
00:04:07,450 --> 00:04:11,440
and even if you have the agent on the

74
00:04:11,440 --> 00:04:13,660
operating system levels that doesn't

75
00:04:13,660 --> 00:04:17,019
mean you will be cache the thread

76
00:04:17,019 --> 00:04:20,370
because if the thread inside your

77
00:04:20,370 --> 00:04:23,940
firmware it can fake a lot of things and

78
00:04:23,940 --> 00:04:27,100
even disable the agent which will be not

79
00:04:27,100 --> 00:04:30,810
able to dump or like get any information

80
00:04:30,810 --> 00:04:33,970
regarding malicious content inside the

81
00:04:33,970 --> 00:04:36,940
bias so let's talk about the evolution

82
00:04:36,940 --> 00:04:39,160
of persistent technique and you know

83
00:04:39,160 --> 00:04:42,460
actually we in nowadays we have a lot of

84
00:04:42,460 --> 00:04:46,240
mitigations against persistence on the

85
00:04:46,240 --> 00:04:48,670
boot process I mean like we have a

86
00:04:48,670 --> 00:04:52,450
secure boot we have like major at boot

87
00:04:52,450 --> 00:04:55,870
we have a DRG I am CRT I'm a lot of

88
00:04:55,870 --> 00:05:00,150
features built by vendors like Intel and

89
00:05:00,150 --> 00:05:05,470
AMD and others but mitigations actually

90
00:05:05,470 --> 00:05:08,810
gains a mobile phase persistence

91
00:05:08,810 --> 00:05:12,110
mostly raising the bar of complexity in

92
00:05:12,110 --> 00:05:14,690
the way when it's covered only the

93
00:05:14,690 --> 00:05:18,800
common ones but not cover more advanced

94
00:05:18,800 --> 00:05:21,500
ones because it's not very visible with

95
00:05:21,500 --> 00:05:25,900
modern security products

96
00:05:26,050 --> 00:05:30,039
and if we look how the rootkits

97
00:05:30,039 --> 00:05:32,259
evolution happens

98
00:05:32,259 --> 00:05:36,069
it was always basically tied to the

99
00:05:36,069 --> 00:05:38,800
harbour so route kids on operating

100
00:05:38,800 --> 00:05:46,120
system mostly being mostly been gone to

101
00:05:46,120 --> 00:05:47,830
the boot kids when the code signing

102
00:05:47,830 --> 00:05:49,900
policy for the drivers on Windows

103
00:05:49,900 --> 00:05:55,000
operating system appears and when secure

104
00:05:55,000 --> 00:05:58,979
boot being introduced in Windows 8

105
00:05:58,979 --> 00:06:04,090
mostly boot kids been gone to the BIOS

106
00:06:04,090 --> 00:06:07,479
implants direction but of course the

107
00:06:07,479 --> 00:06:10,449
people not be great in immediately to a

108
00:06:10,449 --> 00:06:12,669
new version of operating systems and

109
00:06:12,669 --> 00:06:15,099
let's take a while and I would say the

110
00:06:15,099 --> 00:06:17,050
boot kids it's still relevant relevant

111
00:06:17,050 --> 00:06:18,699
for many things

112
00:06:18,699 --> 00:06:20,620
includes some of the critical

113
00:06:20,620 --> 00:06:22,300
infrastructure parts which we still use

114
00:06:22,300 --> 00:06:26,009
all operating systems or like still use

115
00:06:26,009 --> 00:06:33,400
MBR and VBR for for boot process and we

116
00:06:33,400 --> 00:06:36,069
will be covering all the three parts on

117
00:06:36,069 --> 00:06:38,169
our training we will be talking a bit of

118
00:06:38,169 --> 00:06:39,969
route kids and boot kids type to the

119
00:06:39,969 --> 00:06:43,389
legacy stuff but our main focus on the

120
00:06:43,389 --> 00:06:46,930
BIOS implants and some other things like

121
00:06:46,930 --> 00:06:51,630
TPM and beam citrus

122
00:06:52,940 --> 00:06:56,300
so let's talk about the type of

123
00:06:56,300 --> 00:07:00,450
persistence and you know actually we

124
00:07:00,450 --> 00:07:03,050
have pretty good visibility with modern

125
00:07:03,050 --> 00:07:05,910
security products like antivirus end

126
00:07:05,910 --> 00:07:11,220
points or EDR solutions but think about

127
00:07:11,220 --> 00:07:13,860
we have a different kind of persistence

128
00:07:13,860 --> 00:07:16,140
on the hardware and firmware level and

129
00:07:16,140 --> 00:07:19,620
this kind of persistence doesn't cover

130
00:07:19,620 --> 00:07:25,170
much by this product and it's exactly

131
00:07:25,170 --> 00:07:28,470
why we create the training or basically

132
00:07:28,470 --> 00:07:32,780
teach you how find the threads

133
00:07:32,780 --> 00:07:36,450
how build the right thread model and for

134
00:07:36,450 --> 00:07:39,630
the hardware to basically acquire new

135
00:07:39,630 --> 00:07:42,510
hardware for your data center or for

136
00:07:42,510 --> 00:07:46,650
something else and how basically for big

137
00:07:46,650 --> 00:07:48,780
organizations with thousands of

138
00:07:48,780 --> 00:07:54,180
computers understand where is a risk can

139
00:07:54,180 --> 00:07:59,900
be on this side of trade landscape

140
00:07:59,960 --> 00:08:07,580
and if we talk about information of

141
00:08:09,050 --> 00:08:12,460
by a simple and reverse engineering or

142
00:08:12,460 --> 00:08:16,190
bias implants hunting it's not much and

143
00:08:16,190 --> 00:08:19,490
actually when we been writing this book

144
00:08:19,490 --> 00:08:21,620
rootkits and book boot kids with my

145
00:08:21,620 --> 00:08:24,349
colleagues eugene rodionov answer dear

146
00:08:24,349 --> 00:08:27,470
brothers mostly we've been thinking

147
00:08:27,470 --> 00:08:30,590
about how this evolution of the

148
00:08:30,590 --> 00:08:32,990
persistence threads happens and of

149
00:08:32,990 --> 00:08:34,820
course we have some hardcover in the

150
00:08:34,820 --> 00:08:38,450
BIOS implants and when we was thinking

151
00:08:38,450 --> 00:08:41,270
about the cover concept was thinking oh

152
00:08:41,270 --> 00:08:46,700
actually usual malware analyst or like

153
00:08:46,700 --> 00:08:50,170
security analyst and IT security will be

154
00:08:50,170 --> 00:08:54,290
have zero tools for this kind of treads

155
00:08:54,290 --> 00:08:58,060
and mostly it will be not feasible and

156
00:08:58,060 --> 00:09:01,279
this our knowledge of is crackin came

157
00:09:01,279 --> 00:09:05,000
exactly in this direction because we see

158
00:09:05,000 --> 00:09:08,180
on this picture just some really really

159
00:09:08,180 --> 00:09:12,500
both top of crackin but it is underwater

160
00:09:12,500 --> 00:09:16,930
part which is not visible yeah and

161
00:09:16,930 --> 00:09:21,050
actually it is analog analogy which we

162
00:09:21,050 --> 00:09:25,180
try to percy on this over

163
00:09:25,890 --> 00:09:28,050
if you talk about the Golden Age of

164
00:09:28,050 --> 00:09:31,950
route kids it happens like back while

165
00:09:31,950 --> 00:09:35,160
ago and most of the drivers of this

166
00:09:35,160 --> 00:09:37,950
persistence being a cybercrime when the

167
00:09:37,950 --> 00:09:40,530
actors try to persist on the user

168
00:09:40,530 --> 00:09:44,400
machine as much as I can because they

169
00:09:44,400 --> 00:09:48,680
need distribute spam or like use

170
00:09:48,680 --> 00:09:51,780
infected machine as a DDoS board and

171
00:09:51,780 --> 00:09:55,440
it's exactly why the route kids became

172
00:09:55,440 --> 00:09:59,250
very popular at the time but as we

173
00:09:59,250 --> 00:10:01,560
mentioned before when the operating

174
00:10:01,560 --> 00:10:03,570
systems start implementing some

175
00:10:03,570 --> 00:10:06,990
mitigations a development for the route

176
00:10:06,990 --> 00:10:10,590
kids get more expensive and a titled

177
00:10:10,590 --> 00:10:14,430
shift down on the stack and when

178
00:10:14,430 --> 00:10:18,810
basically boot kids became on more

179
00:10:18,810 --> 00:10:22,650
feasible on this end it's actually 2011

180
00:10:22,650 --> 00:10:27,800
and I would say mostly in 2015 it's been

181
00:10:27,800 --> 00:10:33,690
gone and it was no actually many

182
00:10:33,690 --> 00:10:37,380
machines infected such as tread so but

183
00:10:37,380 --> 00:10:39,840
also we always should keep in mind about

184
00:10:39,840 --> 00:10:42,270
the state-sponsored actors which is

185
00:10:42,270 --> 00:10:46,350
persistent goals is different and it's

186
00:10:46,350 --> 00:10:49,890
can see it on your machine for some time

187
00:10:49,890 --> 00:10:53,190
for when it will be activated and it's

188
00:10:53,190 --> 00:10:56,760
exactly the the thing which is can be

189
00:10:56,760 --> 00:10:59,880
used for firmware implants because it's

190
00:10:59,880 --> 00:11:02,580
not visible you can change your hard

191
00:11:02,580 --> 00:11:04,770
drive you can change your operating

192
00:11:04,770 --> 00:11:08,850
system and malicious code still will be

193
00:11:08,850 --> 00:11:12,060
inside here's few links you can find

194
00:11:12,060 --> 00:11:15,300
some samples of malicious rootkit boot

195
00:11:15,300 --> 00:11:18,000
kits and implants on the github with the

196
00:11:18,000 --> 00:11:22,560
samples from the book but actually I can

197
00:11:22,560 --> 00:11:24,480
say golden age of the firmware and

198
00:11:24,480 --> 00:11:26,430
hardware plans it's happening right now

199
00:11:26,430 --> 00:11:31,140
and it's happening exactly because not a

200
00:11:31,140 --> 00:11:37,310
lot of people can understand and get

201
00:11:37,779 --> 00:11:39,430
the visibility on these threads and

202
00:11:39,430 --> 00:11:41,850
actually not a lot of tools and actually

203
00:11:41,850 --> 00:11:46,029
mostly it is zero tools for can't

204
00:11:46,029 --> 00:11:49,420
confirm where implants and on our

205
00:11:49,420 --> 00:11:52,060
actually training we will be talk about

206
00:11:52,060 --> 00:11:54,519
how we can use the common scenarios and

207
00:11:54,519 --> 00:11:57,370
tools which is available to combine in

208
00:11:57,370 --> 00:12:01,089
some of analysis tool set which has

209
00:12:01,089 --> 00:12:04,389
helped you turn arise and catch this

210
00:12:04,389 --> 00:12:07,480
kind of treads but if you look on the

211
00:12:07,480 --> 00:12:09,939
retrospective on citizens with the bias

212
00:12:09,939 --> 00:12:14,620
implants it was multiple and probably

213
00:12:14,620 --> 00:12:18,279
most recent it's a low Jack's which is

214
00:12:18,279 --> 00:12:24,490
happens last year so maybe happens not

215
00:12:24,490 --> 00:12:26,680
the last year but was the tech that last

216
00:12:26,680 --> 00:12:29,620
year but by antivirus company name it he

217
00:12:29,620 --> 00:12:32,589
said and it's actually was very

218
00:12:32,589 --> 00:12:34,269
interesting and we'll be covering

219
00:12:34,269 --> 00:12:37,509
details in our training most interesting

220
00:12:37,509 --> 00:12:39,610
part and how you can reverse engineer is

221
00:12:39,610 --> 00:12:42,430
one but if you look on this timeline you

222
00:12:42,430 --> 00:12:45,850
can see two different ways of evolution

223
00:12:45,850 --> 00:12:48,759
one way when the researchers basically

224
00:12:48,759 --> 00:12:52,959
developed new techniques and detect some

225
00:12:52,959 --> 00:12:56,139
ways of persistent and present on the

226
00:12:56,139 --> 00:12:58,779
conferences and we can see a lot of

227
00:12:58,779 --> 00:13:03,550
research happens during the time but

228
00:13:03,550 --> 00:13:07,680
also we can see very rare incidence

229
00:13:07,680 --> 00:13:11,230
which is basically happens with a real

230
00:13:11,230 --> 00:13:14,559
wall where implants tied to the firmware

231
00:13:14,559 --> 00:13:23,009
and mostly it's because we don't have

232
00:13:23,009 --> 00:13:29,819
tools and knowledge to catch it so

233
00:13:29,819 --> 00:13:32,949
actually every year number of incidence

234
00:13:32,949 --> 00:13:38,160
is increasing and not only based on

235
00:13:38,160 --> 00:13:39,639
rivet Oggs

236
00:13:39,639 --> 00:13:41,499
it's also based on the research with

237
00:13:41,499 --> 00:13:44,470
researchers presenting and we can see

238
00:13:44,470 --> 00:13:48,670
clearly this year and last year board

239
00:13:48,670 --> 00:13:51,340
management controller for the servers

240
00:13:51,340 --> 00:13:55,500
it's been really really one of the top

241
00:13:55,500 --> 00:14:00,610
target and in our class will also be

242
00:14:00,610 --> 00:14:05,860
will be covering this part this picture

243
00:14:05,860 --> 00:14:08,980
it's actually statistics from national

244
00:14:08,980 --> 00:14:13,900
vulnerability database and we can see we

245
00:14:13,900 --> 00:14:17,350
have a lot of firmer vulnerabilities

246
00:14:17,350 --> 00:14:20,980
every year but also I don't think every

247
00:14:20,980 --> 00:14:24,310
vendor or all of them being reported and

248
00:14:24,310 --> 00:14:28,530
I believe these numbers is much bigger

249
00:14:29,340 --> 00:14:33,690
so basically we don't have much

250
00:14:33,690 --> 00:14:37,290
mitigations which we talked it about and

251
00:14:37,290 --> 00:14:41,820
if we look on this picture you can see

252
00:14:41,820 --> 00:14:45,520
OS kernel mode have a posh guard on

253
00:14:45,520 --> 00:14:49,000
Windows operating system part guard code

254
00:14:49,000 --> 00:14:52,690
signing and also for prevention it's

255
00:14:52,690 --> 00:14:56,650
multiple endpoints working on there on

256
00:14:56,650 --> 00:15:00,960
the boot code it's also can detected by

257
00:15:00,960 --> 00:15:04,110
antivirus vendors and endpoints and

258
00:15:04,110 --> 00:15:07,030
secure and magically boot and the boot

259
00:15:07,030 --> 00:15:09,670
guard try to take care of this part and

260
00:15:09,670 --> 00:15:12,420
our Marines a secure boot boot process

261
00:15:12,420 --> 00:15:16,540
but on the bias and ufi we have

262
00:15:16,540 --> 00:15:20,560
literally zero and it's actually no way

263
00:15:20,560 --> 00:15:23,890
for the vendor without any integration

264
00:15:23,890 --> 00:15:27,160
with Hardware on the firmer side to gain

265
00:15:27,160 --> 00:15:31,360
any visibility or behavioral analysis in

266
00:15:31,360 --> 00:15:36,450
run time some of the vendors like Apple

267
00:15:36,450 --> 00:15:41,020
integrate some kind of sanity checks for

268
00:15:41,020 --> 00:15:45,430
integrity and if you see this if I check

269
00:15:45,430 --> 00:15:48,250
warning on your Apple machine it can

270
00:15:48,250 --> 00:15:53,820
actually say something with your

271
00:15:53,820 --> 00:16:00,910
firmware is wrong and problem here it's

272
00:16:00,910 --> 00:16:03,390
check only integrity failures and some

273
00:16:03,390 --> 00:16:08,050
known failures in supply chain but it

274
00:16:08,050 --> 00:16:12,010
doesn't say much about what is the

275
00:16:12,010 --> 00:16:17,590
impact are same thing with modern anti

276
00:16:17,590 --> 00:16:20,710
viruses once they catch the threat they

277
00:16:20,710 --> 00:16:23,410
say the tread is found but you don't

278
00:16:23,410 --> 00:16:27,130
understand what tread is about and what

279
00:16:27,130 --> 00:16:30,000
is actually this malicious code is doing

280
00:16:30,000 --> 00:16:31,810
we will try to

281
00:16:31,810 --> 00:16:36,400
fill this gap later in January 2020 so

282
00:16:36,400 --> 00:16:39,490
but what is actually most of the bias

283
00:16:39,490 --> 00:16:43,240
changes challenges for anti-virus and

284
00:16:43,240 --> 00:16:46,080
portman solutions

285
00:16:46,680 --> 00:16:49,980
of all everything can be faked

286
00:16:49,980 --> 00:16:53,160
after operating system is booted if you

287
00:16:53,160 --> 00:16:56,880
have powerful implant inside and the

288
00:16:56,880 --> 00:17:00,270
attacker spend enough time for analyze

289
00:17:00,270 --> 00:17:05,910
the platform and build some malicious

290
00:17:05,910 --> 00:17:09,630
capabilities it can fake mostly

291
00:17:09,630 --> 00:17:13,800
everything boyss rootkits and implants

292
00:17:13,800 --> 00:17:16,829
can disable any antivirus and porn

293
00:17:16,829 --> 00:17:21,199
solution even before it will be actually

294
00:17:21,199 --> 00:17:24,630
executed on the operating system level

295
00:17:24,630 --> 00:17:29,730
if someone can just remove parse file

296
00:17:29,730 --> 00:17:32,840
system before operating system boots

297
00:17:32,840 --> 00:17:37,860
remove the components of endpoint also

298
00:17:37,860 --> 00:17:41,190
BIOS updates can be reinfected during

299
00:17:41,190 --> 00:17:44,190
installation process bias updates

300
00:17:44,190 --> 00:17:45,870
actually is tricky and we will talk

301
00:17:45,870 --> 00:17:46,950
about this later

302
00:17:46,950 --> 00:17:50,250
because what happens usually you

303
00:17:50,250 --> 00:17:54,720
download your update on by agent on the

304
00:17:54,720 --> 00:17:57,960
operating system so or you already have

305
00:17:57,960 --> 00:18:01,860
the update and try to try with vendor

306
00:18:01,860 --> 00:18:04,110
tool install this update on your machine

307
00:18:04,110 --> 00:18:08,580
but this update weapon on some memory

308
00:18:08,580 --> 00:18:13,110
region when after reboot its readed by

309
00:18:13,110 --> 00:18:15,360
update code inside the firmware and

310
00:18:15,360 --> 00:18:18,840
actually flare to your spy flash chip on

311
00:18:18,840 --> 00:18:22,920
the platform I think about if you have

312
00:18:22,920 --> 00:18:28,740
malicious implant do we can actually

313
00:18:28,740 --> 00:18:31,770
catch this event when the platform

314
00:18:31,770 --> 00:18:35,490
updating and fake it it was updated and

315
00:18:35,490 --> 00:18:41,760
not really I believe so and one more

316
00:18:41,760 --> 00:18:46,260
point it is no trusted path between any

317
00:18:46,260 --> 00:18:49,410
end point solution and you file firmware

318
00:18:49,410 --> 00:18:52,390
exists it's

319
00:18:52,390 --> 00:18:56,350
would only cooperation between firmware

320
00:18:56,350 --> 00:18:59,500
and antivirus or like endpoint can help

321
00:18:59,500 --> 00:19:05,200
to protect users in reality because it's

322
00:19:05,200 --> 00:19:08,679
all the mitigations and all the things

323
00:19:08,679 --> 00:19:11,380
which is happens in forever it's not

324
00:19:11,380 --> 00:19:13,470
feasible for antivirus solution

325
00:19:13,470 --> 00:19:16,809
basically what happens and to virus or

326
00:19:16,809 --> 00:19:19,149
end point or EDR whatever agent on

327
00:19:19,149 --> 00:19:21,640
operating system-level is execute its

328
00:19:21,640 --> 00:19:24,610
can damn the buyers upload to the cloud

329
00:19:24,610 --> 00:19:27,580
or analyze inside the operating system

330
00:19:27,580 --> 00:19:32,049
with some pre checks or rules but it's

331
00:19:32,049 --> 00:19:35,320
only static so without deep code

332
00:19:35,320 --> 00:19:38,470
analysis or without run time behavioral

333
00:19:38,470 --> 00:19:42,850
things it doesn't say much only mostly

334
00:19:42,850 --> 00:19:46,269
about the supply chain problems question

335
00:19:46,269 --> 00:19:48,399
you fight drivers or spy Flashdance

336
00:19:48,399 --> 00:19:50,889
doesn't guarantee much because even if

337
00:19:50,889 --> 00:19:55,990
you found the integrity problem you

338
00:19:55,990 --> 00:19:58,450
don't understand the impact so ok we

339
00:19:58,450 --> 00:20:00,340
have integrity problem because the

340
00:20:00,340 --> 00:20:04,320
vendor forgot to update the driver and

341
00:20:04,320 --> 00:20:07,899
on some platforms it's updated some was

342
00:20:07,899 --> 00:20:10,990
not so in 91 cloud you have a collision

343
00:20:10,990 --> 00:20:14,080
because part of the update on the

344
00:20:14,080 --> 00:20:15,519
platform from the vendor have a

345
00:20:15,519 --> 00:20:19,630
different driver part one other part of

346
00:20:19,630 --> 00:20:22,000
the platform's have an older driver so

347
00:20:22,000 --> 00:20:26,049
the integrity can fails inside the cloud

348
00:20:26,049 --> 00:20:28,630
because basically same update with the

349
00:20:28,630 --> 00:20:32,250
same version of American Medical

350
00:20:33,480 --> 00:20:36,700
Examiner but if you just look on the

351
00:20:36,700 --> 00:20:39,279
same platform integrity yes it will be

352
00:20:39,279 --> 00:20:42,970
actually don't show don't raise a flag

353
00:20:42,970 --> 00:20:45,789
who current is the BIOS updates from the

354
00:20:45,789 --> 00:20:48,070
card where hurdler is not infected right

355
00:20:48,070 --> 00:20:52,690
so because it came from the website it

356
00:20:52,690 --> 00:20:55,539
came from of the PC or you have a legend

357
00:20:55,539 --> 00:20:59,080
which is basically it says when the

358
00:20:59,080 --> 00:21:03,010
updates appear on them and says you need

359
00:21:03,010 --> 00:21:06,070
to update your files right so

360
00:21:06,070 --> 00:21:10,480
and if the vendor cocked like shadow

361
00:21:10,480 --> 00:21:13,180
creamer operation which we'll cover a

362
00:21:13,180 --> 00:21:17,920
bit later so then you don't have any

363
00:21:17,920 --> 00:21:20,800
guarantee this update came from the

364
00:21:20,800 --> 00:21:25,830
bender right and the big blind spot

365
00:21:25,830 --> 00:21:28,330
nowadays its supply chain attacks

366
00:21:28,330 --> 00:21:32,310
because with the physical access no

367
00:21:32,310 --> 00:21:35,200
physical access mostly it's not in scope

368
00:21:35,200 --> 00:21:40,150
of the security features or tread

369
00:21:40,150 --> 00:21:44,770
modeling or it's not in scope in many

370
00:21:44,770 --> 00:21:47,890
even companies because think about the

371
00:21:47,890 --> 00:21:51,280
way how you get the hardware it's not

372
00:21:51,280 --> 00:21:54,040
like you buy on Amazon and Amazon

373
00:21:54,040 --> 00:21:56,770
deliver to you it can be multiple

374
00:21:56,770 --> 00:21:59,830
multiple third parties involved in the

375
00:21:59,830 --> 00:22:02,380
process of acquiring the hardware even

376
00:22:02,380 --> 00:22:06,460
for your home office but for data center

377
00:22:06,460 --> 00:22:12,610
it's much much more complex so other

378
00:22:12,610 --> 00:22:15,510
problems in supply chain so its

379
00:22:15,510 --> 00:22:18,520
microarchitecture attacks because think

380
00:22:18,520 --> 00:22:20,650
about even if you have the passions of

381
00:22:20,650 --> 00:22:23,320
side michael code it doesn't mean your

382
00:22:23,320 --> 00:22:26,410
hardware vendor deliver you the rare the

383
00:22:26,410 --> 00:22:32,880
most recent michael code update so

384
00:22:33,130 --> 00:22:37,570
if you have a lot of components across

385
00:22:37,570 --> 00:22:40,840
your hardware like USB control your BMC

386
00:22:40,840 --> 00:22:43,840
it can be different vendors and firmware

387
00:22:43,840 --> 00:22:46,409
is everywhere

388
00:22:47,260 --> 00:22:51,040
called and not only virus became kind of

389
00:22:51,040 --> 00:22:53,290
like a foundation and it can be broken

390
00:22:53,290 --> 00:22:56,470
then multiple things inside the cloud

391
00:22:56,470 --> 00:22:59,950
can be attacked from the bias and it's

392
00:22:59,950 --> 00:23:03,630
also tied a lot on the configuration and

393
00:23:03,630 --> 00:23:08,470
what kind of memory encryption solutions

394
00:23:08,470 --> 00:23:10,750
you use it's a lot of a lot of things

395
00:23:10,750 --> 00:23:14,220
involved but engineer in general case

396
00:23:14,220 --> 00:23:19,740
bias very very dangerous for the cloud

397
00:23:19,740 --> 00:23:24,910
and supply chains actually became a

398
00:23:24,910 --> 00:23:29,110
mainstream and we can see it a lot so

399
00:23:29,110 --> 00:23:32,919
this actually lambda concept built kind

400
00:23:32,919 --> 00:23:35,110
of like a prototype of the PC screamer

401
00:23:35,110 --> 00:23:37,270
board kind of a while I would I believe

402
00:23:37,270 --> 00:23:40,870
it's about two and a half years ago it's

403
00:23:40,870 --> 00:23:43,809
a piece a board with Arctic 7 FPGA which

404
00:23:43,809 --> 00:23:47,860
is can be used for D my attacks but

405
00:23:47,860 --> 00:23:51,160
nowadays we have much smaller boards

406
00:23:51,160 --> 00:23:55,360
with many PC which is used the same

407
00:23:55,360 --> 00:23:58,330
artic 7 and actually became more

408
00:23:58,330 --> 00:24:00,669
dangerous because because sports this

409
00:24:00,669 --> 00:24:06,480
one much harder in your heart setup

410
00:24:06,480 --> 00:24:10,840
also the Medtronic Seuk show very

411
00:24:10,840 --> 00:24:15,640
interesting attack vector on from the

412
00:24:15,640 --> 00:24:20,190
system management actually from a DMA to

413
00:24:20,190 --> 00:24:24,720
get in and elevate the privileges over

414
00:24:24,720 --> 00:24:27,760
execute code execution inside the system

415
00:24:27,760 --> 00:24:32,230
management mode over DMA because it is a

416
00:24:32,230 --> 00:24:35,080
lot of it's actually have some time

417
00:24:35,080 --> 00:24:38,950
window to do so and this is design issue

418
00:24:38,950 --> 00:24:42,039
and in many many platforms it's not

419
00:24:42,039 --> 00:24:49,169
fixed because it is design issue so

420
00:24:49,169 --> 00:24:52,630
Microsoft develop very interesting

421
00:24:52,630 --> 00:24:58,059
concept of device security and also

422
00:24:58,059 --> 00:25:01,710
interesting because on

423
00:25:02,290 --> 00:25:04,900
firmware level they have a visibility

424
00:25:04,900 --> 00:25:08,260
action they have you can see here you

425
00:25:08,260 --> 00:25:10,720
say have a three different Dixie drivers

426
00:25:10,720 --> 00:25:12,850
which is interested silicon dixie

427
00:25:12,850 --> 00:25:15,930
platform dicks and without eggs

428
00:25:15,930 --> 00:25:19,610
there is actually

429
00:25:19,610 --> 00:25:21,549
[Music]

430
00:25:21,549 --> 00:25:24,639
check the different things and first one

431
00:25:24,639 --> 00:25:27,460
check secure boot and sign it updates

432
00:25:27,460 --> 00:25:30,039
problems another one

433
00:25:30,039 --> 00:25:33,519
check the DMA is the walk and I am your

434
00:25:33,519 --> 00:25:35,950
mum you is enable it they also check

435
00:25:35,950 --> 00:25:40,950
their robot protection its enable it and

436
00:25:40,950 --> 00:25:43,659
without Dixit just collect this

437
00:25:43,659 --> 00:25:46,330
information in pack and some telemetry

438
00:25:46,330 --> 00:25:50,889
data so device guard

439
00:25:50,889 --> 00:25:54,039
DXE it's another one have a direct

440
00:25:54,039 --> 00:25:56,980
feedback loop with operating system

441
00:25:56,980 --> 00:25:59,320
device guard companion to run time check

442
00:25:59,320 --> 00:26:01,450
the security features and dependences

443
00:26:01,450 --> 00:26:05,409
it's very interesting but it have a very

444
00:26:05,409 --> 00:26:09,129
limited way to detect malicious implants

445
00:26:09,129 --> 00:26:12,279
because if it's already inside this

446
00:26:12,279 --> 00:26:16,450
don't tell your March and if it's

447
00:26:16,450 --> 00:26:19,179
already inside your firmware secure boot

448
00:26:19,179 --> 00:26:21,129
will be working correctly but it's

449
00:26:21,129 --> 00:26:23,230
broken because somebody can execute

450
00:26:23,230 --> 00:26:26,049
earlier on like fake the secure boot

451
00:26:26,049 --> 00:26:29,590
enable it it's multiple ways and we will

452
00:26:29,590 --> 00:26:33,789
be cover everything in general some of

453
00:26:33,789 --> 00:26:37,960
the vendors like gigabyte asustor msi as

454
00:26:37,960 --> 00:26:40,600
frog and samsung can actually many

455
00:26:40,600 --> 00:26:43,090
others mostly which is don't really

456
00:26:43,090 --> 00:26:47,559
target in the enterprise sector they

457
00:26:47,559 --> 00:26:50,019
just don't care about the virus security

458
00:26:50,019 --> 00:26:53,009
and most of the even primitive

459
00:26:53,009 --> 00:26:56,440
mitigations like BIOS lock or bias right

460
00:26:56,440 --> 00:27:00,340
enable beat it's it's just not

461
00:27:00,340 --> 00:27:02,649
configured correctly basically what

462
00:27:02,649 --> 00:27:05,350
that's mean even like from a puritan

463
00:27:05,350 --> 00:27:10,019
system level you can just install with

464
00:27:10,019 --> 00:27:13,720
sim like same update to what the vendors

465
00:27:13,720 --> 00:27:18,450
use some malicious code inside

466
00:27:18,570 --> 00:27:22,450
another site we talk a lot on the

467
00:27:22,450 --> 00:27:25,690
beginning about what is the treads are

468
00:27:25,690 --> 00:27:31,090
right but what a broad tools and how we

469
00:27:31,090 --> 00:27:34,269
can detect them and honestly we have

470
00:27:34,269 --> 00:27:38,289
really a lot of limitations how we can

471
00:27:38,289 --> 00:27:40,630
analyze the platform and catch something

472
00:27:40,630 --> 00:27:43,870
and run time but let's talk about what

473
00:27:43,870 --> 00:27:47,529
we have so this example if you catch

474
00:27:47,529 --> 00:27:49,659
malicious implant and you need like a

475
00:27:49,659 --> 00:27:52,149
dynamic analysis you have few ways how

476
00:27:52,149 --> 00:27:55,210
you can do it first of all if you like

477
00:27:55,210 --> 00:27:57,460
enough and you're working for Intel and

478
00:27:57,460 --> 00:28:00,039
you have like a model for simi XC mix

479
00:28:00,039 --> 00:28:03,480
it's like a silicon simulator for

480
00:28:03,480 --> 00:28:09,250
hardware so you can basically simulate

481
00:28:09,250 --> 00:28:12,850
everything inside the SIMEX and pretty

482
00:28:12,850 --> 00:28:16,980
much get the same execution flow as a

483
00:28:16,980 --> 00:28:20,380
cardboard but of course if it's

484
00:28:20,380 --> 00:28:22,889
commercial hardware you can have

485
00:28:22,889 --> 00:28:26,409
limitations of EFI protocols which is

486
00:28:26,409 --> 00:28:28,870
used and some of them can be not

487
00:28:28,870 --> 00:28:31,990
available on the SIMEX simulator pretty

488
00:28:31,990 --> 00:28:34,510
similar problem on qem on Camille you

489
00:28:34,510 --> 00:28:38,760
can try to boot the Dixie driver and

490
00:28:39,840 --> 00:28:41,380
actually when I

491
00:28:41,380 --> 00:28:43,450
to reverse some of the Dixie drivers

492
00:28:43,450 --> 00:28:46,060
sometimes for security research I try to

493
00:28:46,060 --> 00:28:48,370
make the stops inside the code - don't

494
00:28:48,370 --> 00:28:52,720
call unknown protocols or stop them for

495
00:28:52,720 --> 00:28:56,770
gain execution a bit further to

496
00:28:56,770 --> 00:28:58,780
understand the behavioral of the code

497
00:28:58,780 --> 00:29:01,930
but it's limited right you can get a

498
00:29:01,930 --> 00:29:04,030
limited coverage because you don't have

499
00:29:04,030 --> 00:29:05,830
some parts of the code which is not

500
00:29:05,830 --> 00:29:08,890
available and qmo and or you don't know

501
00:29:08,890 --> 00:29:12,160
how the protocol working correctly and

502
00:29:12,160 --> 00:29:14,980
can't create the right environment for

503
00:29:14,980 --> 00:29:18,910
execution so but it will be helpful

504
00:29:18,910 --> 00:29:21,580
still helpful in many cases and it's

505
00:29:21,580 --> 00:29:23,650
open source you can do a lot of

506
00:29:23,650 --> 00:29:27,940
different things to create a pretty good

507
00:29:27,940 --> 00:29:31,020
environment for reverse engineering

508
00:29:31,020 --> 00:29:34,000
hardware level debugging like endo DCI

509
00:29:34,000 --> 00:29:38,230
it's available but the most of the

510
00:29:38,230 --> 00:29:41,730
enterprise platforms it's locking for

511
00:29:41,730 --> 00:29:42,910
production

512
00:29:42,910 --> 00:29:44,950
you can try to reverse-engineer them and

513
00:29:44,950 --> 00:29:48,490
unlock no doubt but it's not always easy

514
00:29:48,490 --> 00:29:52,960
way and executing Dixie driver on non

515
00:29:52,960 --> 00:29:55,480
native hardware it's create some

516
00:29:55,480 --> 00:29:57,420
limitations the same as a Berto

517
00:29:57,420 --> 00:30:03,250
environmental simulation bar for the

518
00:30:03,250 --> 00:30:06,460
boot process actually and we will cover

519
00:30:06,460 --> 00:30:08,560
this on the training class because we

520
00:30:08,560 --> 00:30:11,470
have visited train some agreement for

521
00:30:11,470 --> 00:30:16,270
work with their platform to analyze the

522
00:30:16,270 --> 00:30:19,600
boot sequence after right after the

523
00:30:19,600 --> 00:30:21,760
Dixie stage is locked it's still a lot

524
00:30:21,760 --> 00:30:24,580
of interactions with you five former and

525
00:30:24,580 --> 00:30:28,180
boot loaders like VIN load if I and

526
00:30:28,180 --> 00:30:31,390
others from the operating system level

527
00:30:31,390 --> 00:30:35,650
to you fi when its operating system with

528
00:30:35,650 --> 00:30:38,530
boots and can see a lot even when some

529
00:30:38,530 --> 00:30:43,120
parts for a you mM view on the late

530
00:30:43,120 --> 00:30:45,790
stages happens for the operating system

531
00:30:45,790 --> 00:30:51,310
when memory isolation over device guard

532
00:30:51,310 --> 00:30:53,980
is enabled or like secure kernel is

533
00:30:53,980 --> 00:30:55,240
initialized

534
00:30:55,240 --> 00:31:00,100
and it's it's fun but also limitations

535
00:31:00,100 --> 00:31:05,320
are we just see very very late stage of

536
00:31:05,320 --> 00:31:07,480
the boot process and mostly the

537
00:31:07,480 --> 00:31:10,779
operating system welcome to the brave

538
00:31:10,779 --> 00:31:16,679
new world and actually let's talk about

539
00:31:16,679 --> 00:31:20,860
reverse engineering talks here is you

540
00:31:20,860 --> 00:31:24,730
can see some just general dixie driver

541
00:31:24,730 --> 00:31:29,890
open in the Giga so if you open in the

542
00:31:29,890 --> 00:31:32,620
Ghidorah you don't see much because you

543
00:31:32,620 --> 00:31:35,770
don't have a pre-analysis and actually

544
00:31:35,770 --> 00:31:40,720
it's done sport any kind of like context

545
00:31:40,720 --> 00:31:48,880
from UEFI in Ida Pro it's built some pre

546
00:31:48,880 --> 00:31:51,730
analysis features which is actually

547
00:31:51,730 --> 00:31:56,620
provide you some EFI system table and if

548
00:31:56,620 --> 00:32:00,039
I handles and a lot of some known

549
00:32:00,039 --> 00:32:04,720
generic structures and analyzing in idea

550
00:32:04,720 --> 00:32:07,539
it's much actually

551
00:32:07,539 --> 00:32:10,610
natural and easier for the Dixie drivers

552
00:32:10,610 --> 00:32:13,700
another ufi stuff will be actually

553
00:32:13,700 --> 00:32:16,640
talked about the both in our class

554
00:32:16,640 --> 00:32:18,799
you'll be talk about how you can use

555
00:32:18,799 --> 00:32:22,309
gidran but how where is the challenge is

556
00:32:22,309 --> 00:32:27,140
how you can partially solve it and how

557
00:32:27,140 --> 00:32:30,140
you can automate an idea and make your

558
00:32:30,140 --> 00:32:32,750
analysis more productive and if we talk

559
00:32:32,750 --> 00:32:35,929
about the decompilation you can see here

560
00:32:35,929 --> 00:32:38,419
is a comparison between ida and hydra

561
00:32:38,419 --> 00:32:41,200
and

562
00:32:41,770 --> 00:32:45,160
in either code is much more readable and

563
00:32:45,160 --> 00:32:48,130
understandable from the beginning

564
00:32:48,130 --> 00:32:52,210
because these pre analysis in Deidre you

565
00:32:52,210 --> 00:32:55,840
have pretty much similar flow so if you

566
00:32:55,840 --> 00:32:58,059
just analyzing the code and you

567
00:32:58,059 --> 00:33:00,220
understand what is going on and you

568
00:33:00,220 --> 00:33:04,840
already have your point of analysis it's

569
00:33:04,840 --> 00:33:07,710
pretty much enough so it's not like

570
00:33:07,710 --> 00:33:11,710
Deidre is Wars and either it just about

571
00:33:11,710 --> 00:33:14,590
the context which tools providing you

572
00:33:14,590 --> 00:33:18,490
and I hope someday Guidry will behave

573
00:33:18,490 --> 00:33:21,190
the same pre-analysis Ida and then

574
00:33:21,190 --> 00:33:25,920
problem solved but unfortunately not yet

575
00:33:28,570 --> 00:33:31,389
let's talk about you fire update process

576
00:33:31,389 --> 00:33:35,620
and actually it was a lot of

577
00:33:35,620 --> 00:33:39,759
publications regarding the staff you can

578
00:33:39,759 --> 00:33:43,990
see the links below the picture but in

579
00:33:43,990 --> 00:33:46,509
the update process it's multiple parties

580
00:33:46,509 --> 00:33:49,330
involved as I mentioned before we have

581
00:33:49,330 --> 00:33:51,850
that rating system application we have

582
00:33:51,850 --> 00:33:54,460
the driver browser application which is

583
00:33:54,460 --> 00:33:56,919
try to map in the specific memory

584
00:33:56,919 --> 00:33:59,649
regions update the image and also try to

585
00:33:59,649 --> 00:34:02,980
trigger trigger SMI handler responsible

586
00:34:02,980 --> 00:34:06,200
for update process

587
00:34:06,200 --> 00:34:08,260
you

588
00:34:09,070 --> 00:34:12,280
on this level of updates we have a bias

589
00:34:12,280 --> 00:34:15,340
guard which is basically tried to armor

590
00:34:15,340 --> 00:34:17,800
the update process and we actually cover

591
00:34:17,800 --> 00:34:20,080
this one because on our black hat talk

592
00:34:20,080 --> 00:34:25,168
this year we found multiple problems and

593
00:34:25,168 --> 00:34:27,190
reverse-engineer it most of the flaws

594
00:34:27,190 --> 00:34:31,120
regarding the bias guard armor in the

595
00:34:31,120 --> 00:34:33,489
spy flash but even on this picture from

596
00:34:33,489 --> 00:34:36,399
window you can see we have only covered

597
00:34:36,399 --> 00:34:38,739
some of the regions of the spy flash not

598
00:34:38,739 --> 00:34:40,750
all of them and it is a limitation of

599
00:34:40,750 --> 00:34:43,090
the bias guard because they don't have

600
00:34:43,090 --> 00:34:47,800
much secure slots for protecting regions

601
00:34:47,800 --> 00:34:50,620
in spy flash and they can't just protect

602
00:34:50,620 --> 00:34:53,860
all the range for spy flash memory by

603
00:34:53,860 --> 00:35:00,040
the reason sometimes we have a supply

604
00:35:00,040 --> 00:35:03,940
chain problem and when you need to

605
00:35:03,940 --> 00:35:06,340
update on thousands on machine or

606
00:35:06,340 --> 00:35:09,580
creature enterprise network the bias you

607
00:35:09,580 --> 00:35:11,920
need to disable the boot guard and of

608
00:35:11,920 --> 00:35:14,170
course you can't go for each machine and

609
00:35:14,170 --> 00:35:16,870
do it manually right so you need some

610
00:35:16,870 --> 00:35:22,060
features build it in your firmware but

611
00:35:22,060 --> 00:35:24,430
trigger it from a puritan system to

612
00:35:24,430 --> 00:35:26,500
disable the boot guard and actually

613
00:35:26,500 --> 00:35:29,040
secure boot

614
00:35:29,180 --> 00:35:34,279
so we talked about this once - let's

615
00:35:34,279 --> 00:35:36,890
talk about some automation of firmware

616
00:35:36,890 --> 00:35:42,010
updates and my curve Microsoft actually

617
00:35:42,010 --> 00:35:45,710
introduced pretty while ago CFI concept

618
00:35:45,710 --> 00:35:52,299
for general deliver general updates for

619
00:35:52,299 --> 00:35:56,839
wires and other firmwares for the

620
00:35:56,839 --> 00:35:59,359
hardware components like a touchpad like

621
00:35:59,359 --> 00:36:03,799
embedded controller and others problem

622
00:36:03,799 --> 00:36:09,650
is if you look on there is decay on the

623
00:36:09,650 --> 00:36:13,039
github even in the comments a not

624
00:36:13,039 --> 00:36:17,210
mandatory require firmware update so to

625
00:36:17,210 --> 00:36:21,730
be sign it and the platform doesn't

626
00:36:21,730 --> 00:36:25,760
doesn't check or authenticate the update

627
00:36:25,760 --> 00:36:27,890
it's just responsible for the delivery

628
00:36:27,890 --> 00:36:31,220
and firmware or what hardware itself

629
00:36:31,220 --> 00:36:34,880
should be responsible for example which

630
00:36:34,880 --> 00:36:36,839
is make some

631
00:36:36,839 --> 00:36:40,349
gabs and also not all the vendors the

632
00:36:40,349 --> 00:36:43,099
same right some of them care about

633
00:36:43,099 --> 00:36:45,569
security some of them not which is

634
00:36:45,569 --> 00:36:48,569
create huge supply chain problem and

635
00:36:48,569 --> 00:36:52,739
even unified update process doesn't

636
00:36:52,739 --> 00:36:57,710
solve it another very interesting

637
00:36:57,710 --> 00:37:00,210
project it's Linux wonder firmware

638
00:37:00,210 --> 00:37:01,920
service I'll be fast

639
00:37:01,920 --> 00:37:04,710
which is responsible for pretty much the

640
00:37:04,710 --> 00:37:08,249
same thing and it's fully open source it

641
00:37:08,249 --> 00:37:12,859
and more about delivery than

642
00:37:12,859 --> 00:37:16,680
identification and recently they start

643
00:37:16,680 --> 00:37:18,719
actually doing some supply chain checks

644
00:37:18,719 --> 00:37:23,359
which is I think right direction to go

645
00:37:23,359 --> 00:37:27,839
but let's talk about how many steps you

646
00:37:27,839 --> 00:37:30,390
need to gain persistence on the bios and

647
00:37:30,390 --> 00:37:34,109
actually it's not easy it's certainly

648
00:37:34,109 --> 00:37:36,599
two ways how you can do it you can do it

649
00:37:36,599 --> 00:37:38,819
as a supply chain with the physical

650
00:37:38,819 --> 00:37:41,009
access if you have a physical access to

651
00:37:41,009 --> 00:37:45,200
the spy flash and if like in some

652
00:37:45,200 --> 00:37:49,289
environment it can be work some not you

653
00:37:49,289 --> 00:37:51,869
can just like update the spy flash

654
00:37:51,869 --> 00:37:54,869
memories and you bias and then it can

655
00:37:54,869 --> 00:37:59,660
boot with malicious stuff inside but of

656
00:37:59,660 --> 00:38:02,609
course if you have some mitigations like

657
00:38:02,609 --> 00:38:04,950
boot guard and BIOS guard in a but it

658
00:38:04,950 --> 00:38:08,549
can be make the way a bit more prettier

659
00:38:08,549 --> 00:38:09,930
but really depends on the particular

660
00:38:09,930 --> 00:38:14,339
hard work but if you want not like if a

661
00:38:14,339 --> 00:38:18,840
tiger want remote

662
00:38:18,840 --> 00:38:23,070
way to exploit and install the lunar

663
00:38:23,070 --> 00:38:25,500
ability or install the implant inside

664
00:38:25,500 --> 00:38:29,960
and gain persistent it can be multiple

665
00:38:29,960 --> 00:38:33,390
levels and stages and changing your

666
00:38:33,390 --> 00:38:37,470
exploit and more so it's start from user

667
00:38:37,470 --> 00:38:39,600
mode probably attacking some of the

668
00:38:39,600 --> 00:38:42,540
browser or like Microsoft Office

669
00:38:42,540 --> 00:38:46,230
whatever but main thing which is

670
00:38:46,230 --> 00:38:50,160
pursuing this way it is about or s

671
00:38:50,160 --> 00:38:52,790
kernel mode

672
00:38:53,910 --> 00:39:00,390
so actually I'm when the driver is

673
00:39:00,390 --> 00:39:03,820
inside the kernel mode its need to talk

674
00:39:03,820 --> 00:39:08,500
with over the house or directly with you

675
00:39:08,500 --> 00:39:11,020
fire services and then it's probably

676
00:39:11,020 --> 00:39:14,350
cannot taksim SMI handlers in some well

677
00:39:14,350 --> 00:39:17,890
and if Teicher lucky enough and found

678
00:39:17,890 --> 00:39:20,950
the vulnerability which is allow him to

679
00:39:20,950 --> 00:39:24,360
gain access over the code execution on

680
00:39:24,360 --> 00:39:28,480
some some other direction to assume ram

681
00:39:28,480 --> 00:39:32,680
and deliver the payload on SML it's in

682
00:39:32,680 --> 00:39:36,910
some ways it's can have direct spy flash

683
00:39:36,910 --> 00:39:40,270
access but it's also multiple ways even

684
00:39:40,270 --> 00:39:43,240
if you don't have enough permissions

685
00:39:43,240 --> 00:39:46,690
from SMM to attacks by flash which we're

686
00:39:46,690 --> 00:39:49,950
talking about our class

687
00:39:50,810 --> 00:39:56,490
also don't forget we don't reboot our

688
00:39:56,490 --> 00:40:00,120
machines every day right or shoot down

689
00:40:00,120 --> 00:40:01,200
them every day

690
00:40:01,200 --> 00:40:06,180
most of them working in up time before

691
00:40:06,180 --> 00:40:09,630
you updates coming so literally it's

692
00:40:09,630 --> 00:40:14,400
about a month and even if malicious

693
00:40:14,400 --> 00:40:16,740
implant don't have the ways to gain

694
00:40:16,740 --> 00:40:20,070
persistence on the spy flash chip it can

695
00:40:20,070 --> 00:40:23,340
be persist on SMM runtime for quite a

696
00:40:23,340 --> 00:40:36,270
while so it's exactly why the Golden Age

697
00:40:36,270 --> 00:40:38,850
of firmware and hardware plans is

698
00:40:38,850 --> 00:40:41,160
happening right now because you can see

699
00:40:41,160 --> 00:40:44,690
the problem is quite big

700
00:40:45,029 --> 00:40:47,089
you

701
00:40:48,090 --> 00:40:53,580
and why the firmware is a new big vector

702
00:40:53,580 --> 00:40:57,930
for the potential attacker because

703
00:40:57,930 --> 00:41:00,840
in many cases firmware was not

704
00:41:00,840 --> 00:41:03,150
considered as a critical security asset

705
00:41:03,150 --> 00:41:06,870
for a long time and firmer is possible

706
00:41:06,870 --> 00:41:09,750
which is mean for the hardware vendor

707
00:41:09,750 --> 00:41:12,840
they can fix what all the time right

708
00:41:12,840 --> 00:41:15,900
so the cost for the firmware update it's

709
00:41:15,900 --> 00:41:18,690
much lower than hardware and it's

710
00:41:18,690 --> 00:41:21,150
exactly why in most of the cases

711
00:41:21,150 --> 00:41:24,350
hardware vendor will be focusing on

712
00:41:24,350 --> 00:41:27,690
hardware bugs and problems first and

713
00:41:27,690 --> 00:41:29,910
then they actually care about the

714
00:41:29,910 --> 00:41:31,280
firmware

715
00:41:31,280 --> 00:41:34,710
during Breen gap for the new hardware is

716
00:41:34,710 --> 00:41:37,290
very hard basically when you try to boot

717
00:41:37,290 --> 00:41:39,770
new hardware the first time after

718
00:41:39,770 --> 00:41:43,890
manufacturing many vendors do the

719
00:41:43,890 --> 00:41:46,860
mistakes in miss configuration because

720
00:41:46,860 --> 00:41:50,460
the biggest part they care it's boots a

721
00:41:50,460 --> 00:41:55,440
platform and sometimes also they forgot

722
00:41:55,440 --> 00:41:58,800
to configure security features back and

723
00:41:58,800 --> 00:42:03,860
the production stage soon

724
00:42:03,880 --> 00:42:06,310
another problem everything goes to the

725
00:42:06,310 --> 00:42:08,200
cloud and includes firmware and hardware

726
00:42:08,200 --> 00:42:12,100
it's most cases called providers don't

727
00:42:12,100 --> 00:42:14,230
control firmware and cardboard so supply

728
00:42:14,230 --> 00:42:18,430
chains attacks became a huge huge vector

729
00:42:18,430 --> 00:42:22,060
for modern attacker even as a weighted

730
00:42:22,060 --> 00:42:24,570
VM instances can be attacked too and

731
00:42:24,570 --> 00:42:28,270
your systems in the ghast instances can

732
00:42:28,270 --> 00:42:31,950
be happens with the virtual bias

733
00:42:32,269 --> 00:42:34,890
let's talk a bit about the ufi

734
00:42:34,890 --> 00:42:38,339
persistence classification and we have

735
00:42:38,339 --> 00:42:42,390
actually two major ways how malicious

736
00:42:42,390 --> 00:42:44,819
code can persist without of exploitation

737
00:42:44,819 --> 00:42:50,279
and compromising supply chain both of

738
00:42:50,279 --> 00:42:53,220
them it's very big vectors and in a lot

739
00:42:53,220 --> 00:42:58,859
of problems for security and scissors

740
00:42:58,859 --> 00:43:02,369
inside the companies mostly because as

741
00:43:02,369 --> 00:43:05,430
we can see it's many different ways how

742
00:43:05,430 --> 00:43:08,609
you can gain basically how you can

743
00:43:08,609 --> 00:43:13,829
execute implant on the platform but I

744
00:43:13,829 --> 00:43:17,130
would focus for now more on the supplier

745
00:43:17,130 --> 00:43:19,309
cheating problem and look on it not all

746
00:43:19,309 --> 00:43:22,170
the hardware vendors even have a

747
00:43:22,170 --> 00:43:25,829
notification for the Box updates and if

748
00:43:25,829 --> 00:43:30,170
we talk about firmware update it's

749
00:43:30,170 --> 00:43:33,720
multiple farmers on your platform and in

750
00:43:33,720 --> 00:43:36,599
many cases I seen when as example

751
00:43:36,599 --> 00:43:38,759
embedded controller just flashed

752
00:43:38,759 --> 00:43:41,150
directly to the ship and not about

753
00:43:41,150 --> 00:43:44,039
authenticated at all so all of these

754
00:43:44,039 --> 00:43:46,890
vectors will be covered on the clasp and

755
00:43:46,890 --> 00:43:50,579
we talk on the these details and

756
00:43:50,579 --> 00:43:54,450
examples and do some labs on many of

757
00:43:54,450 --> 00:44:03,319
them another problem is because one day

758
00:44:03,319 --> 00:44:06,480
vulnerability lifetime inside the from

759
00:44:06,480 --> 00:44:10,170
where it's very very long because

760
00:44:10,170 --> 00:44:12,359
average time of vulnerability disclosure

761
00:44:12,359 --> 00:44:16,289
in firmware it's took literally - a year

762
00:44:16,289 --> 00:44:24,170
till one or like more here so

763
00:44:24,640 --> 00:44:29,019
what happens because when you talk with

764
00:44:29,019 --> 00:44:32,740
a vendor about the new vulnerability in

765
00:44:32,740 --> 00:44:35,769
the firmware it's not only regarding the

766
00:44:35,769 --> 00:44:38,529
physics it's also the update it cycles

767
00:44:38,529 --> 00:44:41,440
appears and many other things and if you

768
00:44:41,440 --> 00:44:43,180
think about the firmware update cycle

769
00:44:43,180 --> 00:44:46,089
it's not happens frequently most of them

770
00:44:46,089 --> 00:44:51,220
it happens like from one to four times

771
00:44:51,220 --> 00:44:56,260
per year right so and first of all your

772
00:44:56,260 --> 00:44:59,319
fix for vulnerability should fit to

773
00:44:59,319 --> 00:45:01,809
update cycle and it's create really kind

774
00:45:01,809 --> 00:45:05,589
of like a not natural but supply chain

775
00:45:05,589 --> 00:45:10,660
problem because vendors created the

776
00:45:10,660 --> 00:45:13,930
timeline and environment where the

777
00:45:13,930 --> 00:45:17,019
melanda vulnerabilities lifetime is like

778
00:45:17,019 --> 00:45:22,450
very very high another side the

779
00:45:22,450 --> 00:45:26,669
challenges of passion is not easy and

780
00:45:27,480 --> 00:45:30,050
creating the right mitigations and

781
00:45:30,050 --> 00:45:33,630
creating the right fix for the

782
00:45:33,630 --> 00:45:35,550
vulnerability need to mindset and

783
00:45:35,550 --> 00:45:38,550
thinking differently as a hiker and not

784
00:45:38,550 --> 00:45:41,670
architect it's why actually many large

785
00:45:41,670 --> 00:45:44,580
enterprise companies nowadays and Humber

786
00:45:44,580 --> 00:45:46,680
vendors try to create offensive research

787
00:45:46,680 --> 00:45:48,690
internally because they try to cover

788
00:45:48,690 --> 00:45:55,290
this gap and meet reality for architects

789
00:45:55,290 --> 00:45:57,750
and firmware engineers and hardware

790
00:45:57,750 --> 00:46:00,200
engineers

791
00:46:02,610 --> 00:46:10,080
so this connection between reality and

792
00:46:10,080 --> 00:46:13,270
your product GM is very important

793
00:46:13,270 --> 00:46:16,320
because it's even on design phase and

794
00:46:16,320 --> 00:46:20,200
development phase can reduce a lot of

795
00:46:20,200 --> 00:46:23,890
risks of potential vulnerabilities in

796
00:46:23,890 --> 00:46:27,400
future and create the mitigations more

797
00:46:27,400 --> 00:46:33,130
meaningful in the nature way so yeah

798
00:46:33,130 --> 00:46:36,640
this kind of like a picture show if the

799
00:46:36,640 --> 00:46:39,130
hardware is compromised basically you

800
00:46:39,130 --> 00:46:41,680
have everything is compromised if the

801
00:46:41,680 --> 00:46:44,290
firmware is compromised it can

802
00:46:44,290 --> 00:46:48,010
compromise everything higher step of

803
00:46:48,010 --> 00:46:50,620
course it's very very simplified picture

804
00:46:50,620 --> 00:46:56,260
and we need to talk more on it during

805
00:46:56,260 --> 00:47:01,860
our class but for now I want to say

806
00:47:02,470 --> 00:47:06,339
it's still relevant and from the system

807
00:47:06,339 --> 00:47:08,650
firmware even if you can't attack

808
00:47:08,650 --> 00:47:10,510
directly the virtual machines you can

809
00:47:10,510 --> 00:47:12,579
attack some of the devices on the

810
00:47:12,579 --> 00:47:15,849
platform and try basically attack from

811
00:47:15,849 --> 00:47:18,040
them and think about you have a lot of

812
00:47:18,040 --> 00:47:20,410
them modern servers you have even

813
00:47:20,410 --> 00:47:24,869
building FPGAs and if you cannot hog the

814
00:47:24,869 --> 00:47:30,849
bitstream on the FPGA or like flesh your

815
00:47:30,849 --> 00:47:33,010
oven bitstream program your oven beam

816
00:47:33,010 --> 00:47:36,880
stream on FPGA it's gained a lot of

817
00:47:36,880 --> 00:47:43,380
power across the platform beam see is a

818
00:47:43,380 --> 00:47:46,930
K from datacenter really I would say

819
00:47:46,930 --> 00:47:50,440
based management controller base board

820
00:47:50,440 --> 00:47:54,069
management controller known as BMC is

821
00:47:54,069 --> 00:47:57,280
literally very old concept and it's

822
00:47:57,280 --> 00:48:01,890
still working the same way for years and

823
00:48:01,890 --> 00:48:05,440
basically in many cases BMC is

824
00:48:05,440 --> 00:48:07,589
responsible for the virus update

825
00:48:07,589 --> 00:48:12,069
remotely so basically if you gain access

826
00:48:12,069 --> 00:48:16,089
to BMC you can attack the BIOS literally

827
00:48:16,089 --> 00:48:19,150
and it's been showing on the research

828
00:48:19,150 --> 00:48:21,280
which is alex gazette and geoffrey

829
00:48:21,280 --> 00:48:25,329
journey did on beams in the last year

830
00:48:25,329 --> 00:48:28,410
presented at multiple conferences and

831
00:48:28,410 --> 00:48:32,079
say what they did they basically attack

832
00:48:32,079 --> 00:48:34,960
the BMC and from the BMC attacks abayas

833
00:48:34,960 --> 00:48:38,020
it's very interesting and we will be

834
00:48:38,020 --> 00:48:40,660
talk about this and actually will be do

835
00:48:40,660 --> 00:48:43,690
some forensics exercises and labs and

836
00:48:43,690 --> 00:48:47,160
BMC during our class

837
00:48:47,800 --> 00:48:50,380
supply chain attacks on hardware and

838
00:48:50,380 --> 00:48:52,900
firmware it's growing problems think

839
00:48:52,900 --> 00:48:55,570
about the attack surface is huge because

840
00:48:55,570 --> 00:48:58,630
like as I mentioned before you not get

841
00:48:58,630 --> 00:49:01,570
from one place of the card where to your

842
00:49:01,570 --> 00:49:08,920
data center and this very very nice

843
00:49:08,920 --> 00:49:11,680
picture from Bonnie's presentation on

844
00:49:11,680 --> 00:49:17,650
the last blue hut in israel its shows in

845
00:49:17,650 --> 00:49:21,820
very natural way how the problems can

846
00:49:21,820 --> 00:49:26,770
appear and you have multiple parties

847
00:49:26,770 --> 00:49:28,960
involved which is basically have access

848
00:49:28,960 --> 00:49:31,270
to your card where before it gets to

849
00:49:31,270 --> 00:49:33,640
your data center you have multiple

850
00:49:33,640 --> 00:49:36,280
watches which is can actually open the

851
00:49:36,280 --> 00:49:40,270
boxes and check as example custom and

852
00:49:40,270 --> 00:49:43,000
it's not about custom your country it's

853
00:49:43,000 --> 00:49:45,130
about like

854
00:49:45,130 --> 00:49:48,519
customs which is passed before its gets

855
00:49:48,519 --> 00:49:50,769
to the destination

856
00:49:50,769 --> 00:49:57,569
it reads can be multiple I really like

857
00:49:57,569 --> 00:50:02,730
Thomas Dooley inhaler flake poems about

858
00:50:02,730 --> 00:50:09,539
signing think about you don't have

859
00:50:09,539 --> 00:50:13,150
understanding about what is good what is

860
00:50:13,150 --> 00:50:17,880
bad and if I write from right and

861
00:50:17,880 --> 00:50:20,190
basically

862
00:50:20,190 --> 00:50:23,030
if physical attack you have a control

863
00:50:23,030 --> 00:50:25,020
it's pretty much it

864
00:50:25,020 --> 00:50:28,170
it's about supply chain but also another

865
00:50:28,170 --> 00:50:30,270
thing which I want to pay attention we

866
00:50:30,270 --> 00:50:33,390
can check the firmware region right so

867
00:50:33,390 --> 00:50:36,930
because what you trust you trust

868
00:50:36,930 --> 00:50:39,299
basically what the vendor provide you on

869
00:50:39,299 --> 00:50:43,470
website you trust what is downloaded

870
00:50:43,470 --> 00:50:45,780
from the vendor or deliver it from the

871
00:50:45,780 --> 00:50:49,920
vendor but you really don't know how it

872
00:50:49,920 --> 00:50:57,359
is malicious or not right and in many

873
00:50:57,359 --> 00:51:00,599
cases for the hardware vendors security

874
00:51:00,599 --> 00:51:02,400
unfortunately not in the first place

875
00:51:02,400 --> 00:51:04,470
we're not talking about the big vendors

876
00:51:04,470 --> 00:51:06,599
we're talking about like the vendors

877
00:51:06,599 --> 00:51:08,789
which has produced some small parts like

878
00:51:08,789 --> 00:51:11,539
we use big controllers and others or way

879
00:51:11,539 --> 00:51:14,460
sometimes it's regarding like embedded

880
00:51:14,460 --> 00:51:19,440
controllers because it's no vendor who

881
00:51:19,440 --> 00:51:22,049
build all the hardware on the platform

882
00:51:22,049 --> 00:51:24,779
themselves its cooperation between

883
00:51:24,779 --> 00:51:30,260
different third parties and

884
00:51:31,670 --> 00:51:34,130
as example with hardware root of trust

885
00:51:34,130 --> 00:51:36,799
can be misconfigured because it's very

886
00:51:36,799 --> 00:51:40,069
difficult to configure it correctly or

887
00:51:40,069 --> 00:51:43,240
like don't

888
00:51:43,760 --> 00:51:47,030
save some way for like recovering the

889
00:51:47,030 --> 00:51:52,580
point form and think about really like

890
00:51:52,580 --> 00:51:55,640
if you configure your card the route of

891
00:51:55,640 --> 00:51:56,980
trust

892
00:51:56,980 --> 00:52:00,770
ideally it will be every platform which

893
00:52:00,770 --> 00:52:03,310
is breaks it will be unrecoverable and

894
00:52:03,310 --> 00:52:07,430
you just like call to the vendor and

895
00:52:07,430 --> 00:52:09,770
they can't recover they need to give you

896
00:52:09,770 --> 00:52:13,430
a new laptop or a new machine and it's a

897
00:52:13,430 --> 00:52:18,230
lot of tied to money risks which is not

898
00:52:18,230 --> 00:52:20,660
acceptable but by many hardware vendors

899
00:52:20,660 --> 00:52:22,970
and they try to create the way how they

900
00:52:22,970 --> 00:52:26,900
can create some meaningful way to

901
00:52:26,900 --> 00:52:29,060
recover the platform and it's really

902
00:52:29,060 --> 00:52:35,650
tied to miss configuration sometimes

903
00:52:35,650 --> 00:52:40,250
also very cool attack been shown by

904
00:52:40,250 --> 00:52:44,390
Travis on this year it's a time to use

905
00:52:44,390 --> 00:52:47,210
time to check race condition on the spy

906
00:52:47,210 --> 00:52:51,080
flash chip think about you have read

907
00:52:51,080 --> 00:52:54,010
cycles from the spy first ship which is

908
00:52:54,010 --> 00:52:58,910
really different phases read during the

909
00:52:58,910 --> 00:53:01,190
boot different phases can read the spy

910
00:53:01,190 --> 00:53:04,700
flash chip for some of the assets as

911
00:53:04,700 --> 00:53:09,890
example ACMs but sometimes they do it

912
00:53:09,890 --> 00:53:14,120
just once and not check it during other

913
00:53:14,120 --> 00:53:17,390
boots phases basically we're talking

914
00:53:17,390 --> 00:53:17,810
about

915
00:53:17,810 --> 00:53:21,350
if authenticated ones that's mean don't

916
00:53:21,350 --> 00:53:25,520
not trust it forever and as example on

917
00:53:25,520 --> 00:53:28,850
if you check on the very early stage and

918
00:53:28,850 --> 00:53:31,880
then don't check and just trust on the

919
00:53:31,880 --> 00:53:37,250
later phases of the boot process it can

920
00:53:37,250 --> 00:53:40,220
be faked and we'll be cover this part

921
00:53:40,220 --> 00:53:44,900
too and into a CM said micro cut down

922
00:53:44,900 --> 00:53:47,960
great and actually also a big problem on

923
00:53:47,960 --> 00:53:52,810
x86 because it's boots very early and

924
00:53:52,810 --> 00:53:56,090
some of the parts of root of trust for

925
00:53:56,090 --> 00:53:59,360
boot guard and bios guard it's tied to a

926
00:53:59,360 --> 00:54:02,800
CMS it's not covered by boot we are and

927
00:54:02,800 --> 00:54:06,110
some of the old platforms have really

928
00:54:06,110 --> 00:54:09,700
easy way to downgrade

929
00:54:10,580 --> 00:54:13,530
so yeah we have this discussion on the

930
00:54:13,530 --> 00:54:16,290
Twitter about the ACMs and microcode

931
00:54:16,290 --> 00:54:18,390
down great with Alex yermolov who

932
00:54:18,390 --> 00:54:23,100
actually found some cool stuff on micro

933
00:54:23,100 --> 00:54:24,410
toward the hungry

934
00:54:24,410 --> 00:54:29,730
and Intel a wake advisory about this

935
00:54:29,730 --> 00:54:35,220
vulnerability so one more thing from

936
00:54:35,220 --> 00:54:39,090
however it's about the signing problem

937
00:54:39,090 --> 00:54:42,090
because think about the current approach

938
00:54:42,090 --> 00:54:44,900
for for thermal securities based on

939
00:54:44,900 --> 00:54:50,210
trust to code sign and

940
00:54:50,860 --> 00:54:54,109
if you think about

941
00:54:54,109 --> 00:54:56,180
happens in the past antivirus industry

942
00:54:56,180 --> 00:55:00,769
was really trust every binary literally

943
00:55:00,769 --> 00:55:01,670
which is silent

944
00:55:01,670 --> 00:55:06,650
but after Stuxnet and after multiple

945
00:55:06,650 --> 00:55:09,470
incidents heavens with Likud sign at

946
00:55:09,470 --> 00:55:12,579
keys with stolen sign at keys so they

947
00:55:12,579 --> 00:55:16,069
change their opinions and ways how

948
00:55:16,069 --> 00:55:18,769
detect and classify them our files or

949
00:55:18,769 --> 00:55:24,289
like good files why you think it can't

950
00:55:24,289 --> 00:55:27,069
happens in the firmware world I think

951
00:55:27,069 --> 00:55:29,989
it's really a scenarios which is

952
00:55:29,989 --> 00:55:34,119
happening right now but nobody we see

953
00:55:35,710 --> 00:55:38,450
third-party components is a part of

954
00:55:38,450 --> 00:55:40,519
supply chain hell and we already talked

955
00:55:40,519 --> 00:55:43,549
about that because supply chain attacks

956
00:55:43,549 --> 00:55:46,160
vectors extend attack surface which has

957
00:55:46,160 --> 00:55:48,230
always been out of scope forever

958
00:55:48,230 --> 00:55:51,440
hardware and firmware vendors think

959
00:55:51,440 --> 00:55:52,789
about the TPM

960
00:55:52,789 --> 00:55:55,660
so trauma shows how we can basically

961
00:55:55,660 --> 00:56:00,430
just solder in on LPC bus or GPIO on TPM

962
00:56:00,430 --> 00:56:05,720
chip and try to intercept or fake the

963
00:56:05,720 --> 00:56:09,769
signals from Jeremy Boone with TPM genie

964
00:56:09,769 --> 00:56:13,609
shows away how we can create interposer

965
00:56:13,609 --> 00:56:17,079
with very simple components

966
00:56:17,079 --> 00:56:20,349
so we will recover the TPM parts in our

967
00:56:20,349 --> 00:56:24,009
training and we will talk about the

968
00:56:24,009 --> 00:56:27,789
tread modeling on TPM how we can make

969
00:56:27,789 --> 00:56:30,599
some audit on TPM configuration on

970
00:56:30,599 --> 00:56:38,559
platform number days major vendors cloud

971
00:56:38,559 --> 00:56:41,709
vendors and hardware vendors like Apple

972
00:56:41,709 --> 00:56:45,719
trying to fix the root of problems

973
00:56:45,719 --> 00:56:49,299
basically try to gain more trust to the

974
00:56:49,299 --> 00:56:51,999
platform easier on chips Google have

975
00:56:51,999 --> 00:56:54,880
tightened Apple cavity to Microsoft

976
00:56:54,880 --> 00:56:58,599
develop Cerberus Amazon Greengrass but

977
00:56:58,599 --> 00:57:02,619
also think about yes its additional

978
00:57:02,619 --> 00:57:05,079
check but in most of the cases it's very

979
00:57:05,079 --> 00:57:08,619
simple shapes and these simple chips

980
00:57:08,619 --> 00:57:13,289
have a very simple code inside and

981
00:57:13,289 --> 00:57:16,749
sometimes the code can be not simple

982
00:57:16,749 --> 00:57:18,849
sorry boot ROM is simple inside these

983
00:57:18,849 --> 00:57:21,849
chips and sometimes boot ROM can have an

984
00:57:21,849 --> 00:57:24,399
issues what that's mean most of the

985
00:57:24,399 --> 00:57:27,549
cases when it's no memories relations on

986
00:57:27,549 --> 00:57:29,649
this chip basically any code execution

987
00:57:29,649 --> 00:57:31,779
on the chip can allow you to develop

988
00:57:31,779 --> 00:57:34,289
some

989
00:57:34,400 --> 00:57:37,610
at counter to dump multiple secrets and

990
00:57:37,610 --> 00:57:40,100
Fink's which is stored inside this chip

991
00:57:40,100 --> 00:57:43,490
yeah think about that it's not really

992
00:57:43,490 --> 00:57:46,490
the case maybe for Google and Titan but

993
00:57:46,490 --> 00:57:49,130
it's in many cases it can apply on the

994
00:57:49,130 --> 00:57:51,320
chips which is used for route of trance

995
00:57:51,320 --> 00:57:54,130
on the platform

996
00:57:56,710 --> 00:58:00,830
and I will be one more time it's not

997
00:58:00,830 --> 00:58:04,900
know any hardware vendors it's no

998
00:58:04,900 --> 00:58:08,090
actually hardware vendors exist we just

999
00:58:08,090 --> 00:58:10,300
have a full control and supply chain

1000
00:58:10,300 --> 00:58:15,520
wishes actually gained very very serious

1001
00:58:15,520 --> 00:58:21,920
concerns on the supply chain problems so

1002
00:58:21,920 --> 00:58:23,990
operating shadow high mirror we mention

1003
00:58:23,990 --> 00:58:28,550
it it's talk about different think it

1004
00:58:28,550 --> 00:58:32,270
was no known information or like public

1005
00:58:32,270 --> 00:58:33,980
information regarding regarding

1006
00:58:33,980 --> 00:58:36,140
compromised firmware updates but think

1007
00:58:36,140 --> 00:58:38,810
about the same tool also stack life

1008
00:58:38,810 --> 00:58:41,180
update was delivering the firmware

1009
00:58:41,180 --> 00:58:44,270
updates and basically the possibility

1010
00:58:44,270 --> 00:58:46,430
being exist for the attackers and we

1011
00:58:46,430 --> 00:58:49,180
really don't know about they use it for

1012
00:58:49,180 --> 00:58:53,150
deliver malicious stuff on some of the

1013
00:58:53,150 --> 00:58:57,320
users was targeting or not but it's very

1014
00:58:57,320 --> 00:58:59,980
interesting case to keep in mind and

1015
00:58:59,980 --> 00:59:03,100
demonstrate the power of updating tools

1016
00:59:03,100 --> 00:59:06,920
which is basically execute as an engines

1017
00:59:06,920 --> 00:59:09,260
and persist on the platform and in many

1018
00:59:09,260 --> 00:59:11,330
cases maybe I will be recommend for IT

1019
00:59:11,330 --> 00:59:14,300
security don't use persistent engine for

1020
00:59:14,300 --> 00:59:18,110
the update and use on them on tools to

1021
00:59:18,110 --> 00:59:20,330
update the platform what you want and

1022
00:59:20,330 --> 00:59:25,210
reduce that actual face for your network

1023
00:59:25,600 --> 00:59:29,090
so registered to our training and learn

1024
00:59:29,090 --> 00:59:31,700
more how can't and reverse engineering

1025
00:59:31,700 --> 00:59:36,700
firmware implants thank you very much

1026
00:59:36,990 --> 00:59:39,049
you

1027
00:59:42,720 --> 00:59:46,129
[Music]

