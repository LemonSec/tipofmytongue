1
00:00:12,490 --> 00:00:13,759
[Music]

2
00:00:13,759 --> 00:00:14,799
hello all

3
00:00:14,799 --> 00:00:16,800
and welcome again for another hardware

4
00:00:16,800 --> 00:00:18,480
dot io webinar

5
00:00:18,480 --> 00:00:20,800
my name is andrish and i'm part of the

6
00:00:20,800 --> 00:00:22,720
hardware dot io team

7
00:00:22,720 --> 00:00:24,320
friends we have been running hardware

8
00:00:24,320 --> 00:00:26,160
dot io security conference and training

9
00:00:26,160 --> 00:00:28,080
in the netherlands and us for a while

10
00:00:28,080 --> 00:00:29,039
now

11
00:00:29,039 --> 00:00:31,199
if you are interested in some cool

12
00:00:31,199 --> 00:00:32,159
hands-on

13
00:00:32,159 --> 00:00:34,640
hardware security trainings please do

14
00:00:34,640 --> 00:00:36,239
check our website

15
00:00:36,239 --> 00:00:39,040
for our upcoming trainings next month we

16
00:00:39,040 --> 00:00:39,680
have

17
00:00:39,680 --> 00:00:43,840
four days of hands-on trainings for you

18
00:00:43,840 --> 00:00:47,840
for today's webinar we have alex matosov

19
00:00:47,840 --> 00:00:50,960
who is a well-known security researcher

20
00:00:50,960 --> 00:00:53,520
in the hardware and malware analysis

21
00:00:53,520 --> 00:00:54,640
space

22
00:00:54,640 --> 00:00:58,239
he has two decades of experience reverse

23
00:00:58,239 --> 00:00:59,199
engineering

24
00:00:59,199 --> 00:01:01,280
malware analysis and exploitation

25
00:01:01,280 --> 00:01:02,879
techniques

26
00:01:02,879 --> 00:01:05,280
he leads the offensive security research

27
00:01:05,280 --> 00:01:06,640
team at nvidia

28
00:01:06,640 --> 00:01:10,240
and is also our hardware dot io trainer

29
00:01:10,240 --> 00:01:11,680
as most of the common reverse

30
00:01:11,680 --> 00:01:13,600
engineering tools are focused on

31
00:01:13,600 --> 00:01:16,080
simplifying some reconstruction routines

32
00:01:16,080 --> 00:01:18,400
but not rebuilding the full picture

33
00:01:18,400 --> 00:01:20,560
based on firmware images

34
00:01:20,560 --> 00:01:23,759
today alex is going to share with us how

35
00:01:23,759 --> 00:01:26,720
epfi explorer is helping to solve

36
00:01:26,720 --> 00:01:28,400
various challenges in reverse

37
00:01:28,400 --> 00:01:29,439
engineering of

38
00:01:29,439 --> 00:01:32,960
uefi firmware so let's welcome alex

39
00:01:32,960 --> 00:01:35,759
to deliver his presentation the format

40
00:01:35,759 --> 00:01:36,960
for today's

41
00:01:36,960 --> 00:01:39,439
webinar would be 30 minutes of alex's

42
00:01:39,439 --> 00:01:40,560
presentation

43
00:01:40,560 --> 00:01:42,399
followed by which we'll have 10 minutes

44
00:01:42,399 --> 00:01:44,000
for question and answers

45
00:01:44,000 --> 00:01:45,840
if you have any questions that you would

46
00:01:45,840 --> 00:01:47,600
like alex to answer

47
00:01:47,600 --> 00:01:50,479
please send it across over the zoom chat

48
00:01:50,479 --> 00:01:50,880
and

49
00:01:50,880 --> 00:01:53,840
after alex finishes this presentation we

50
00:01:53,840 --> 00:01:55,520
would answer them

51
00:01:55,520 --> 00:02:01,520
so alex the stage is just

52
00:02:01,520 --> 00:02:04,640
sounds good okay good morning everyone

53
00:02:04,640 --> 00:02:08,080
so i'm wasting pacific time zone because

54
00:02:08,080 --> 00:02:11,520
and it's actually not the early morning

55
00:02:11,520 --> 00:02:13,760
but it's still a morning 10 a.m

56
00:02:13,760 --> 00:02:16,959
and uh good evening for participants who

57
00:02:16,959 --> 00:02:17,840
join it from

58
00:02:17,840 --> 00:02:20,959
european time zone so um i will start

59
00:02:20,959 --> 00:02:22,000
presenting

60
00:02:22,000 --> 00:02:25,360
my screen uh actually

61
00:02:25,360 --> 00:02:28,319
let me do it

62
00:02:28,800 --> 00:02:31,120
okay

63
00:02:34,840 --> 00:02:37,840
and

64
00:02:37,840 --> 00:02:40,959
okay so uh today we will talk about how

65
00:02:40,959 --> 00:02:42,160
we if i explore

66
00:02:42,160 --> 00:02:44,720
plugging helping to solve challenges in

67
00:02:44,720 --> 00:02:46,640
reverse engineering of uefi

68
00:02:46,640 --> 00:02:50,800
firmwares and i'm alex matrozov and

69
00:02:50,800 --> 00:02:52,959
thanks sanchez for the quick intro

70
00:02:52,959 --> 00:02:56,239
so probably i will save the time for uh

71
00:02:56,239 --> 00:02:57,440
sharing more stuff

72
00:02:57,440 --> 00:03:00,879
on my bio and probably just can google

73
00:03:00,879 --> 00:03:04,080
myself and google remember better my

74
00:03:04,080 --> 00:03:05,840
research from the boss than myself

75
00:03:05,840 --> 00:03:06,400
because

76
00:03:06,400 --> 00:03:10,400
it's just been done a lot so uh and um

77
00:03:10,400 --> 00:03:12,400
unfortunately i was cancelling my

78
00:03:12,400 --> 00:03:14,640
previous uh

79
00:03:14,640 --> 00:03:18,879
webinar which was focused on the topics

80
00:03:18,879 --> 00:03:22,000
about how hardware

81
00:03:22,000 --> 00:03:25,680
uh security boundaries define platform

82
00:03:25,680 --> 00:03:28,000
security and why hardware security

83
00:03:28,000 --> 00:03:31,519
is very hard topic nowadays but

84
00:03:31,519 --> 00:03:34,720
the good news is uh all the recording is

85
00:03:34,720 --> 00:03:37,200
available online and it was one of the

86
00:03:37,200 --> 00:03:39,280
reasons why i cancelled because

87
00:03:39,280 --> 00:03:41,599
it is no reason to give the third time

88
00:03:41,599 --> 00:03:42,799
the same talk

89
00:03:42,799 --> 00:03:45,599
but actually the root uh invited talk

90
00:03:45,599 --> 00:03:46,239
and the

91
00:03:46,239 --> 00:03:48,959
hackensack box lockdown knot are

92
00:03:48,959 --> 00:03:51,840
different so i recommend to see the both

93
00:03:51,840 --> 00:03:53,760
recordings if you interested on the

94
00:03:53,760 --> 00:03:54,959
topic

95
00:03:54,959 --> 00:03:56,400
here is the links all the stuff

96
00:03:56,400 --> 00:03:58,159
available

97
00:03:58,159 --> 00:04:01,040
so and uh let's let's start from the

98
00:04:01,040 --> 00:04:01,599
beginning

99
00:04:01,599 --> 00:04:04,480
actually why you need to dig into u5

100
00:04:04,480 --> 00:04:05,280
firmware

101
00:04:05,280 --> 00:04:07,680
we have like a lot of different hardware

102
00:04:07,680 --> 00:04:10,159
based on x86 architecture

103
00:04:10,159 --> 00:04:14,799
and we have modern ufi or we have a

104
00:04:14,799 --> 00:04:15,599
modern

105
00:04:15,599 --> 00:04:18,399
endpoint solutions which is just start

106
00:04:18,399 --> 00:04:19,040
shifting

107
00:04:19,040 --> 00:04:22,400
to u5 world recently windows defender

108
00:04:22,400 --> 00:04:25,120
announced that support for extracting

109
00:04:25,120 --> 00:04:28,000
uefi firmware images and try to detect

110
00:04:28,000 --> 00:04:30,800
the firmware threads on that level also

111
00:04:30,800 --> 00:04:32,320
we have a carbon black

112
00:04:32,320 --> 00:04:35,600
and dell recently announced uh shifting

113
00:04:35,600 --> 00:04:39,919
uh to this space more seriously and uh

114
00:04:39,919 --> 00:04:43,199
as we can see uh modern uh endpoint

115
00:04:43,199 --> 00:04:44,560
solution and

116
00:04:44,560 --> 00:04:48,000
uh incident response tools and also

117
00:04:48,000 --> 00:04:51,280
um edr solutions uh

118
00:04:51,280 --> 00:04:54,400
start digging that space but uh

119
00:04:54,400 --> 00:04:57,120
honestly why is that happening because

120
00:04:57,120 --> 00:04:59,440
we have a long time where the security

121
00:04:59,440 --> 00:05:01,680
industry visibility point was just on

122
00:05:01,680 --> 00:05:03,280
the tip of the iceberg

123
00:05:03,280 --> 00:05:05,280
and we have a lot of modern persistence

124
00:05:05,280 --> 00:05:06,720
techniques which has been

125
00:05:06,720 --> 00:05:09,759
broadly discovered by researchers

126
00:05:09,759 --> 00:05:13,840
for years and no one

127
00:05:13,840 --> 00:05:16,960
from endpoint space was able to detect

128
00:05:16,960 --> 00:05:17,360
it

129
00:05:17,360 --> 00:05:20,560
we have some shift left in

130
00:05:20,560 --> 00:05:23,120
just happening recently i would say for

131
00:05:23,120 --> 00:05:25,120
a couple of years

132
00:05:25,120 --> 00:05:29,280
and still it is a lot of space

133
00:05:29,280 --> 00:05:33,759
for for uh attackers to persist

134
00:05:33,759 --> 00:05:37,680
on modern hardware so and actually

135
00:05:37,680 --> 00:05:40,639
why uh we need to dig in ufi firmware

136
00:05:40,639 --> 00:05:41,840
because the industry

137
00:05:41,840 --> 00:05:44,639
and the digital forensic guidances and

138
00:05:44,639 --> 00:05:46,720
playbooks usually ignore the firmware

139
00:05:46,720 --> 00:05:48,080
attack surface

140
00:05:48,080 --> 00:05:50,800
uh not particularly just because it was

141
00:05:50,800 --> 00:05:52,080
in scope for the long

142
00:05:52,080 --> 00:05:54,720
time it's not because they are ignoring

143
00:05:54,720 --> 00:05:55,680
by the reason

144
00:05:55,680 --> 00:05:59,039
no just because it's like uh firmware

145
00:05:59,039 --> 00:06:00,800
threats uh not

146
00:06:00,800 --> 00:06:05,440
been a broadly common and they try to

147
00:06:05,440 --> 00:06:08,400
focus on the most spreaded threats on

148
00:06:08,400 --> 00:06:09,039
the

149
00:06:09,039 --> 00:06:11,440
on the operating system level also we

150
00:06:11,440 --> 00:06:13,759
have a lot of new standards recently

151
00:06:13,759 --> 00:06:14,560
related that

152
00:06:14,560 --> 00:06:18,160
with the guidance about adopting

153
00:06:18,160 --> 00:06:21,199
a more secure ways for

154
00:06:21,199 --> 00:06:24,479
uh uh for the platform resilience and

155
00:06:24,479 --> 00:06:27,120
uh uh basically guides the at security

156
00:06:27,120 --> 00:06:28,479
and internal security

157
00:06:28,479 --> 00:06:31,360
uh teams and it's very important for

158
00:06:31,360 --> 00:06:34,080
large enterprise companies nowadays and

159
00:06:34,080 --> 00:06:37,280
also i would say for the data centers so

160
00:06:37,280 --> 00:06:39,840
but vendors still shipping in secure

161
00:06:39,840 --> 00:06:40,880
systems

162
00:06:40,880 --> 00:06:43,759
and most just don't have dedicated

163
00:06:43,759 --> 00:06:45,120
security teams

164
00:06:45,120 --> 00:06:48,080
i would not say the vendors names but

165
00:06:48,080 --> 00:06:48,880
probably

166
00:06:48,880 --> 00:06:51,840
you know most of these uh vendors which

167
00:06:51,840 --> 00:06:53,520
is focused on the gaming

168
00:06:53,520 --> 00:06:57,520
uh industry and uh providing um

169
00:06:57,520 --> 00:07:01,199
the hardware for the gamers they just

170
00:07:01,199 --> 00:07:04,319
many cases not sign firmware at all but

171
00:07:04,319 --> 00:07:05,360
the same

172
00:07:05,360 --> 00:07:07,759
boxes use it on enterprise

173
00:07:07,759 --> 00:07:08,880
infrastructure

174
00:07:08,880 --> 00:07:11,919
and it's created a lot of a lot of

175
00:07:11,919 --> 00:07:15,440
possibilities for the attacker

176
00:07:15,440 --> 00:07:18,800
also uh average time for vulnerability

177
00:07:18,800 --> 00:07:20,560
responsible disclosure it's about

178
00:07:20,560 --> 00:07:22,880
six uh nine months based on my

179
00:07:22,880 --> 00:07:23,759
experience

180
00:07:23,759 --> 00:07:25,759
when you report the issue and when

181
00:07:25,759 --> 00:07:28,400
basically the vendor released the patch

182
00:07:28,400 --> 00:07:30,880
and it's actually a long time right so

183
00:07:30,880 --> 00:07:31,599
basically

184
00:07:31,599 --> 00:07:34,639
even six months if we go with the lower

185
00:07:34,639 --> 00:07:36,560
boundary it's a half and a year

186
00:07:36,560 --> 00:07:40,479
so and uh basically uh for releasing the

187
00:07:40,479 --> 00:07:42,240
patch that doesn't mean

188
00:07:42,240 --> 00:07:44,720
all the systems get immediately patched

189
00:07:44,720 --> 00:07:45,280
right

190
00:07:45,280 --> 00:07:48,639
so it's all uh

191
00:07:48,639 --> 00:07:51,840
the points why we need to have more

192
00:07:51,840 --> 00:07:54,560
visibility on ufi firmware on the binary

193
00:07:54,560 --> 00:07:55,199
level

194
00:07:55,199 --> 00:07:58,240
and also get more

195
00:07:58,240 --> 00:08:03,120
traction with uh firmware introspection

196
00:08:03,120 --> 00:08:06,400
so uh historically if we have

197
00:08:06,400 --> 00:08:09,520
uh a lot of complexity on one

198
00:08:09,520 --> 00:08:13,520
level uh of uh system abstraction

199
00:08:13,520 --> 00:08:17,280
uh usually uh complex threats

200
00:08:17,280 --> 00:08:20,400
uh which is need like persist uh for the

201
00:08:20,400 --> 00:08:21,280
long time

202
00:08:21,280 --> 00:08:23,440
and need to hide their malicious

203
00:08:23,440 --> 00:08:24,639
capability

204
00:08:24,639 --> 00:08:27,759
uh more uh complex way

205
00:08:27,759 --> 00:08:31,199
they go uh on deeper levels of

206
00:08:31,199 --> 00:08:34,240
uh of the systems uh it's a good

207
00:08:34,240 --> 00:08:35,760
examples like

208
00:08:35,760 --> 00:08:38,799
root kits uh get gone by a

209
00:08:38,799 --> 00:08:41,919
secure boot uh oh code signing policy on

210
00:08:41,919 --> 00:08:43,919
the windows kernel mode and the page

211
00:08:43,919 --> 00:08:46,640
guard but it still actually exists right

212
00:08:46,640 --> 00:08:49,920
but uh rare because it's very complex to

213
00:08:49,920 --> 00:08:52,839
develop modern root kits that way

214
00:08:52,839 --> 00:08:56,000
and it's why actually boot kits

215
00:08:56,000 --> 00:08:58,560
came up on the radars because it was

216
00:08:58,560 --> 00:08:59,680
much easier

217
00:08:59,680 --> 00:09:03,440
to attack uh operating system kernel

218
00:09:03,440 --> 00:09:06,640
before actually it will be boots

219
00:09:06,640 --> 00:09:10,880
and get a control so

220
00:09:10,880 --> 00:09:14,320
also secure boot basically being uh able

221
00:09:14,320 --> 00:09:17,360
to remove most of the boot kits from the

222
00:09:17,360 --> 00:09:18,160
rudders

223
00:09:18,160 --> 00:09:20,800
and it's why bias implants get more

224
00:09:20,800 --> 00:09:22,399
traction in nowadays

225
00:09:22,399 --> 00:09:24,640
and now we have a hardware implants

226
00:09:24,640 --> 00:09:25,839
which is actually

227
00:09:25,839 --> 00:09:30,320
also getting radars quite a while ago

228
00:09:30,320 --> 00:09:33,680
so uh just pay attention on this picture

229
00:09:33,680 --> 00:09:36,000
i already i know i mentioned it many

230
00:09:36,000 --> 00:09:37,760
times but you find vulnerability

231
00:09:37,760 --> 00:09:39,120
classification based on

232
00:09:39,120 --> 00:09:41,839
impact it is important for our speech

233
00:09:41,839 --> 00:09:42,720
today

234
00:09:42,720 --> 00:09:47,279
and actually most of these

235
00:09:47,279 --> 00:09:50,080
problems uh can classify on the two

236
00:09:50,080 --> 00:09:51,360
different ways

237
00:09:51,360 --> 00:09:54,080
one is result of exploitation and one

238
00:09:54,080 --> 00:09:55,200
one is compromised

239
00:09:55,200 --> 00:09:57,920
supply chain in the both cases we need

240
00:09:57,920 --> 00:09:59,040
to understand

241
00:09:59,040 --> 00:10:02,160
what happens and what the impact are

242
00:10:02,160 --> 00:10:05,680
and basically if you catch uh

243
00:10:05,680 --> 00:10:08,640
the implant uh you need to understand

244
00:10:08,640 --> 00:10:09,200
what this

245
00:10:09,200 --> 00:10:12,959
implant doing to uh develop the next

246
00:10:12,959 --> 00:10:15,360
steps for your forensic team

247
00:10:15,360 --> 00:10:18,000
to understand what kind of risks for

248
00:10:18,000 --> 00:10:19,680
your organization

249
00:10:19,680 --> 00:10:23,120
this uh malicious uh code is

250
00:10:23,120 --> 00:10:26,640
uh gain uh and how long it was persist

251
00:10:26,640 --> 00:10:28,720
in your infrastructure

252
00:10:28,720 --> 00:10:30,959
on the supply chain it's a different as

253
00:10:30,959 --> 00:10:32,880
example if you want to acquire

254
00:10:32,880 --> 00:10:35,760
the large batch of some systems for your

255
00:10:35,760 --> 00:10:36,720
organization

256
00:10:36,720 --> 00:10:38,560
probably you need to understand how the

257
00:10:38,560 --> 00:10:40,240
systems is secure

258
00:10:40,240 --> 00:10:43,839
and how these configurations uh

259
00:10:43,839 --> 00:10:47,519
will be protect your uh organization

260
00:10:47,519 --> 00:10:50,720
from broad threads is secure boot

261
00:10:50,720 --> 00:10:52,320
configured correctly

262
00:10:52,320 --> 00:10:55,040
it is a most threats and firmware on the

263
00:10:55,040 --> 00:10:55,600
ship at

264
00:10:55,600 --> 00:10:59,120
uh hardware and etc it's a lot of things

265
00:10:59,120 --> 00:11:02,399
can be go wrong there

266
00:11:02,399 --> 00:11:05,120
so let's focus on the firmware implants

267
00:11:05,120 --> 00:11:05,760
and actually

268
00:11:05,760 --> 00:11:07,760
firmware implants it's very interesting

269
00:11:07,760 --> 00:11:09,040
topics because

270
00:11:09,040 --> 00:11:10,959
we don't have a lot of examples

271
00:11:10,959 --> 00:11:13,120
discovered on the public

272
00:11:13,120 --> 00:11:15,519
but everybody was talking on the

273
00:11:15,519 --> 00:11:17,680
conference quite a while not everybody

274
00:11:17,680 --> 00:11:19,760
but a lot of people a lot of researchers

275
00:11:19,760 --> 00:11:20,320
being

276
00:11:20,320 --> 00:11:22,640
uh discover these problems developing

277
00:11:22,640 --> 00:11:24,720
the proof of concepts and the topic it's

278
00:11:24,720 --> 00:11:25,519
not new at

279
00:11:25,519 --> 00:11:28,959
all but we still don't have uh

280
00:11:28,959 --> 00:11:32,480
uh a lot of examples which is being

281
00:11:32,480 --> 00:11:34,240
detected on the public

282
00:11:34,240 --> 00:11:36,880
or detected in the wild but presented on

283
00:11:36,880 --> 00:11:38,000
the public

284
00:11:38,000 --> 00:11:42,480
so uh one of the good examples

285
00:11:42,480 --> 00:11:45,279
it's probably will be a low jax root kit

286
00:11:45,279 --> 00:11:47,040
and another one a hacking team

287
00:11:47,040 --> 00:11:51,040
both have very uh simple techniques

288
00:11:51,040 --> 00:11:54,320
and low jacks is more complex

289
00:11:54,320 --> 00:11:58,160
but uh logic's low jacks actually used

290
00:11:58,160 --> 00:12:01,680
very old tricks and uh it's

291
00:12:01,680 --> 00:12:05,519
not uh the way probably how the modern

292
00:12:05,519 --> 00:12:06,800
firmware implants

293
00:12:06,800 --> 00:12:10,480
will be exist on the infrastructure

294
00:12:10,480 --> 00:12:14,079
and what uh what actually

295
00:12:14,079 --> 00:12:17,120
uh why we need to dig into the firmware

296
00:12:17,120 --> 00:12:19,920
in the case if researching the firmware

297
00:12:19,920 --> 00:12:20,959
implant

298
00:12:20,959 --> 00:12:24,480
current tools and practices practices uh

299
00:12:24,480 --> 00:12:27,600
in many cases not address the firmware

300
00:12:27,600 --> 00:12:30,959
and basically it's cane

301
00:12:30,959 --> 00:12:34,240
uh the broken firmware

302
00:12:34,240 --> 00:12:36,720
in terms of supply chain or implanted

303
00:12:36,720 --> 00:12:38,000
firmware uh

304
00:12:38,000 --> 00:12:41,279
can stay for a while right so

305
00:12:41,279 --> 00:12:44,079
and um if you're talking about the

306
00:12:44,079 --> 00:12:45,680
broken supply chain

307
00:12:45,680 --> 00:12:49,040
like uh as example i mean configuration

308
00:12:49,040 --> 00:12:52,800
is uh the system is misconfigured

309
00:12:52,800 --> 00:12:55,920
so basically what happens uh

310
00:12:55,920 --> 00:12:57,920
it is a possibility for the attacker

311
00:12:57,920 --> 00:12:59,279
it's not mean

312
00:12:59,279 --> 00:13:02,720
you already have uh somebody persist on

313
00:13:02,720 --> 00:13:04,240
your system

314
00:13:04,240 --> 00:13:05,839
but in many cases it's just a

315
00:13:05,839 --> 00:13:07,600
possibility so

316
00:13:07,600 --> 00:13:11,040
but uh this possibility create a risk

317
00:13:11,040 --> 00:13:14,320
which large companies large enterprises

318
00:13:14,320 --> 00:13:16,560
and especially data centers critical

319
00:13:16,560 --> 00:13:17,600
infrastructure

320
00:13:17,600 --> 00:13:19,680
and other organizations need to

321
00:13:19,680 --> 00:13:21,760
understand and mitigate

322
00:13:21,760 --> 00:13:24,800
before something bad can happen right

323
00:13:24,800 --> 00:13:27,439
so and

324
00:13:27,920 --> 00:13:30,399
about regarding the persistence even if

325
00:13:30,399 --> 00:13:31,200
we detect

326
00:13:31,200 --> 00:13:34,079
something uh in the in in your

327
00:13:34,079 --> 00:13:35,279
infrastructure

328
00:13:35,279 --> 00:13:39,040
or like uh uh in supply chain we need to

329
00:13:39,040 --> 00:13:40,800
understand the risk right so

330
00:13:40,800 --> 00:13:42,959
and basically we need to understand what

331
00:13:42,959 --> 00:13:44,800
kind of impact

332
00:13:44,800 --> 00:13:48,160
being created by uh

333
00:13:48,160 --> 00:13:51,360
this uh malicious code uh how long

334
00:13:51,360 --> 00:13:54,639
it was persist in this place or

335
00:13:54,639 --> 00:13:57,920
uh how broadly it's been spread

336
00:13:57,920 --> 00:14:01,279
inside the organization and what

337
00:14:01,279 --> 00:14:05,040
actually the payloads are and what

338
00:14:05,040 --> 00:14:08,480
been happening and how uh correctly uh

339
00:14:08,480 --> 00:14:11,680
we need to do the next steps and actions

340
00:14:11,680 --> 00:14:14,000
to investigate this incident

341
00:14:14,000 --> 00:14:17,760
so um the best way we need to automated

342
00:14:17,760 --> 00:14:18,720
approach right

343
00:14:18,720 --> 00:14:21,600
but not a lot of tools actually exist on

344
00:14:21,600 --> 00:14:22,320
public

345
00:14:22,320 --> 00:14:25,360
and broadly available and i would say

346
00:14:25,360 --> 00:14:28,480
it is no tools for uh

347
00:14:28,480 --> 00:14:31,279
really focusing on reverse engineering

348
00:14:31,279 --> 00:14:31,680
uh

349
00:14:31,680 --> 00:14:34,560
for uh gathering implants and understand

350
00:14:34,560 --> 00:14:36,639
their behavioral

351
00:14:36,639 --> 00:14:39,839
i mean firmware implants so uh and i

352
00:14:39,839 --> 00:14:41,040
will tell you why

353
00:14:41,040 --> 00:14:44,399
uh on the next slide so most of the

354
00:14:44,399 --> 00:14:47,120
cases also we have a lack of knowledge

355
00:14:47,120 --> 00:14:50,240
when firmware and hardware

356
00:14:50,240 --> 00:14:53,600
threats are investigated incorrectly

357
00:14:53,600 --> 00:14:54,380
because

358
00:14:54,380 --> 00:14:57,529
[Music]

359
00:14:57,680 --> 00:15:00,959
because like it is no uh

360
00:15:00,959 --> 00:15:03,920
a lot of sources of this knowledge and

361
00:15:03,920 --> 00:15:05,600
systematic approach

362
00:15:05,600 --> 00:15:07,519
to learn this kind of knowledge to

363
00:15:07,519 --> 00:15:10,000
understand how the forensics teams

364
00:15:10,000 --> 00:15:13,199
i.t security and actually system

365
00:15:13,199 --> 00:15:14,240
architects

366
00:15:14,240 --> 00:15:17,279
need to uh to uh

367
00:15:17,279 --> 00:15:19,360
reduce this kind of risk in different

368
00:15:19,360 --> 00:15:21,360
ways

369
00:15:21,360 --> 00:15:24,320
so we can talk about how many steps you

370
00:15:24,320 --> 00:15:26,880
need to

371
00:15:27,440 --> 00:15:30,720
need to basically for persist on the spy

372
00:15:30,720 --> 00:15:31,279
flash

373
00:15:31,279 --> 00:15:33,360
but of course it is a lot of mitigations

374
00:15:33,360 --> 00:15:35,199
exist and nowadays

375
00:15:35,199 --> 00:15:38,079
but uh we still have a lot of systems

376
00:15:38,079 --> 00:15:40,560
which is use the cheap configuration

377
00:15:40,560 --> 00:15:43,600
and unfortunately uh

378
00:15:43,600 --> 00:15:46,639
it is exist also in the places like

379
00:15:46,639 --> 00:15:49,839
uh industrial controllers and critical

380
00:15:49,839 --> 00:15:52,079
infrastructure which i would say

381
00:15:52,079 --> 00:15:55,279
it's need to be more secure places for

382
00:15:55,279 --> 00:15:58,399
protect us right and

383
00:15:58,399 --> 00:16:01,680
this picture demonstrates uh how uh

384
00:16:01,680 --> 00:16:04,720
we can shift with uh exploit on

385
00:16:04,720 --> 00:16:05,360
different

386
00:16:05,360 --> 00:16:08,240
layers and persist on the spy flash i

387
00:16:08,240 --> 00:16:10,560
will not focus to describe these layers

388
00:16:10,560 --> 00:16:11,759
because it was done

389
00:16:11,759 --> 00:16:13,920
uh by my different presentation in the

390
00:16:13,920 --> 00:16:16,240
past but what i want to say

391
00:16:16,240 --> 00:16:20,079
we in this picture we focus from the top

392
00:16:20,079 --> 00:16:22,639
to the down uh to persist on the spy

393
00:16:22,639 --> 00:16:23,279
flash

394
00:16:23,279 --> 00:16:25,920
but if you're talking on supply chain

395
00:16:25,920 --> 00:16:26,959
actually this

396
00:16:26,959 --> 00:16:29,920
a little chip with this ply flash memory

397
00:16:29,920 --> 00:16:31,839
can be programmed directly

398
00:16:31,839 --> 00:16:34,880
and as example if somebody will be ship

399
00:16:34,880 --> 00:16:36,560
bunch of the systems to your

400
00:16:36,560 --> 00:16:39,279
organization and you just blindly

401
00:16:39,279 --> 00:16:42,800
use uh and install this system

402
00:16:42,800 --> 00:16:45,839
uh in your organization you don't know

403
00:16:45,839 --> 00:16:49,839
if it is nobody being actually

404
00:16:49,839 --> 00:16:52,720
reprograms his firmware and did

405
00:16:52,720 --> 00:16:54,399
something bad there because

406
00:16:54,399 --> 00:16:56,240
with the physical access it's a

407
00:16:56,240 --> 00:16:57,920
different angle

408
00:16:57,920 --> 00:17:01,040
for the attacker to persist and

409
00:17:01,040 --> 00:17:04,000
also with the physical access it's a lot

410
00:17:04,000 --> 00:17:06,799
of security boundaries just get broken

411
00:17:06,799 --> 00:17:10,799
so and it's i would say uh

412
00:17:10,799 --> 00:17:13,199
this attack like from the down to the

413
00:17:13,199 --> 00:17:14,000
top

414
00:17:14,000 --> 00:17:17,439
it's also not a rare thing and for

415
00:17:17,439 --> 00:17:19,760
most of the organizations it's very

416
00:17:19,760 --> 00:17:21,439
important to make it

417
00:17:21,439 --> 00:17:23,919
at the station and provisioning of the

418
00:17:23,919 --> 00:17:26,000
system which is coming for the secure

419
00:17:26,000 --> 00:17:26,880
perimeter

420
00:17:26,880 --> 00:17:29,760
or you ship to your employees in remote

421
00:17:29,760 --> 00:17:30,640
environment

422
00:17:30,640 --> 00:17:34,000
because uh currently we have

423
00:17:34,000 --> 00:17:38,320
um a lot of uh remote workers

424
00:17:38,320 --> 00:17:40,960
in this complete situation available and

425
00:17:40,960 --> 00:17:42,000
enable it

426
00:17:42,000 --> 00:17:46,880
it's create and also in many cases

427
00:17:47,039 --> 00:17:49,760
remote workers able to use their own

428
00:17:49,760 --> 00:17:50,720
hardware

429
00:17:50,720 --> 00:17:53,919
for uh for uh job needs

430
00:17:53,919 --> 00:17:56,640
it creates a lot of opportunities for

431
00:17:56,640 --> 00:17:56,960
the

432
00:17:56,960 --> 00:17:59,600
tracker and actually it's a lack of

433
00:17:59,600 --> 00:18:02,000
provisioning and attestation

434
00:18:02,000 --> 00:18:05,120
create a huge room

435
00:18:05,120 --> 00:18:08,720
uh in the firmware space

436
00:18:08,720 --> 00:18:11,360
so uh let's talk about the low jacks

437
00:18:11,360 --> 00:18:13,120
implant i will not focus

438
00:18:13,120 --> 00:18:16,160
uh a lot on it but uh it was uh

439
00:18:16,160 --> 00:18:19,679
discovered in 2018 by eset antivirus

440
00:18:19,679 --> 00:18:20,400
company

441
00:18:20,400 --> 00:18:22,960
i spent the years there for leading the

442
00:18:22,960 --> 00:18:25,039
threat intelligence teams for advanced

443
00:18:25,039 --> 00:18:26,000
threats

444
00:18:26,000 --> 00:18:29,840
and in this company and uh

445
00:18:29,840 --> 00:18:33,679
in the past uh i switched to

446
00:18:33,679 --> 00:18:37,280
intel in 2013 and

447
00:18:37,280 --> 00:18:41,200
actually um it's very interesting

448
00:18:41,200 --> 00:18:43,440
they've been able to discover one of the

449
00:18:43,440 --> 00:18:44,799
first threats

450
00:18:44,799 --> 00:18:48,080
uh uh which has been widely not widely

451
00:18:48,080 --> 00:18:49,120
but

452
00:18:49,120 --> 00:18:52,400
spread in the wild and if you're talking

453
00:18:52,400 --> 00:18:55,440
uh in the hacking team implant

454
00:18:55,440 --> 00:18:59,360
it was a cause of the leak so it was not

455
00:18:59,360 --> 00:19:02,320
discovered in the wild it has been

456
00:19:02,320 --> 00:19:04,880
discovered because of the leak

457
00:19:04,880 --> 00:19:08,000
from the internal source of the company

458
00:19:08,000 --> 00:19:10,640
who basically developed this root kit

459
00:19:10,640 --> 00:19:13,360
but if you're talking about lojects it

460
00:19:13,360 --> 00:19:14,960
is a different case

461
00:19:14,960 --> 00:19:19,200
where this root kit being discovered in

462
00:19:19,200 --> 00:19:22,160
the wild and if you look on this picture

463
00:19:22,160 --> 00:19:25,760
how basically it's gain uh

464
00:19:25,760 --> 00:19:28,400
access to the operating system level we

465
00:19:28,400 --> 00:19:29,760
have a dixie

466
00:19:29,760 --> 00:19:33,360
driver implant on a ufi firmware

467
00:19:33,360 --> 00:19:36,160
which is basically injecting the payload

468
00:19:36,160 --> 00:19:36,880
to

469
00:19:36,880 --> 00:19:40,240
a component of computrace which is able

470
00:19:40,240 --> 00:19:42,160
to install a service

471
00:19:42,160 --> 00:19:45,679
and this uh service injects uh

472
00:19:45,679 --> 00:19:49,760
more payloads on operating system level

473
00:19:49,760 --> 00:19:52,720
and the problem was because in many

474
00:19:52,720 --> 00:19:53,600
cases

475
00:19:53,600 --> 00:19:57,280
uh this service and this payload's been

476
00:19:57,280 --> 00:19:58,559
white listed

477
00:19:58,559 --> 00:20:01,919
because uh computrace

478
00:20:01,919 --> 00:20:06,080
uh lowjack uh

479
00:20:06,080 --> 00:20:09,679
broadly used as anti-theft uh system

480
00:20:09,679 --> 00:20:13,600
so uh it was kind of like a conflict

481
00:20:13,600 --> 00:20:14,080
with

482
00:20:14,080 --> 00:20:17,760
uh some of um endpoint solutions

483
00:20:17,760 --> 00:20:20,640
but uh in the end it's gain the room for

484
00:20:20,640 --> 00:20:21,840
the attacker

485
00:20:21,840 --> 00:20:25,840
and always remember uh we trust too much

486
00:20:25,840 --> 00:20:28,720
everything which is coming from the sign

487
00:20:28,720 --> 00:20:30,400
from the trusted source

488
00:20:30,400 --> 00:20:33,520
or assign it so we need to really pay

489
00:20:33,520 --> 00:20:36,799
much more attention on uh

490
00:20:36,799 --> 00:20:40,320
on actually if sign it doesn't

491
00:20:40,320 --> 00:20:43,760
mean trusted we need to double check

492
00:20:43,760 --> 00:20:46,840
it doesn't con contain anything

493
00:20:46,840 --> 00:20:48,159
malicious and

494
00:20:48,159 --> 00:20:51,039
in the case in this case actually uh

495
00:20:51,039 --> 00:20:51,760
dixie

496
00:20:51,760 --> 00:20:54,799
this um chain uh very

497
00:20:54,799 --> 00:20:58,640
uh very uh similar what the hiking

498
00:20:58,640 --> 00:21:02,080
team implant did in the hiking team

499
00:21:02,080 --> 00:21:05,760
uh implant uh dixie

500
00:21:05,760 --> 00:21:09,280
uh driver uh was also

501
00:21:09,280 --> 00:21:12,960
catching uh ready to boot event to

502
00:21:12,960 --> 00:21:16,400
uh make a direct right

503
00:21:16,400 --> 00:21:19,280
to zapper to the operating system file

504
00:21:19,280 --> 00:21:20,320
system

505
00:21:20,320 --> 00:21:23,360
and then basically uh

506
00:21:23,360 --> 00:21:27,280
activate it over outrun uh

507
00:21:27,280 --> 00:21:30,480
folder so basically uh here what's

508
00:21:30,480 --> 00:21:31,200
happening

509
00:21:31,200 --> 00:21:33,440
we also have a dixie level implant but

510
00:21:33,440 --> 00:21:35,200
it's not writing directly to the

511
00:21:35,200 --> 00:21:36,720
operating system

512
00:21:36,720 --> 00:21:39,840
uh it is injecting the service which is

513
00:21:39,840 --> 00:21:40,880
already has

514
00:21:40,880 --> 00:21:44,960
a path of installation over computrace

515
00:21:44,960 --> 00:21:48,720
uh component and in both cases

516
00:21:48,720 --> 00:21:52,720
uh dixie like uh firmware implant

517
00:21:52,720 --> 00:21:56,559
adjusted trampoline to to basically

518
00:21:56,559 --> 00:22:00,000
uh came in the operating system world

519
00:22:00,000 --> 00:22:03,120
why it is uh interesting because

520
00:22:03,120 --> 00:22:06,159
i would say develop something which is

521
00:22:06,159 --> 00:22:06,720
will be

522
00:22:06,720 --> 00:22:09,840
only active on the firmware level

523
00:22:09,840 --> 00:22:12,480
it is hard it's very hard to make it

524
00:22:12,480 --> 00:22:13,520
stable

525
00:22:13,520 --> 00:22:17,120
and i would say for the attacker

526
00:22:17,120 --> 00:22:20,240
it will be more interesting to create

527
00:22:20,240 --> 00:22:21,520
some trampoline

528
00:22:21,520 --> 00:22:24,559
to persist on the operating system level

529
00:22:24,559 --> 00:22:27,120
inside the memory without basically any

530
00:22:27,120 --> 00:22:28,960
signs on the file system

531
00:22:28,960 --> 00:22:31,200
just probably some shell code in the

532
00:22:31,200 --> 00:22:33,039
kernel or something else

533
00:22:33,039 --> 00:22:36,000
it's why in the both cases hiking team

534
00:22:36,000 --> 00:22:38,559
implant and low jacks we have an impact

535
00:22:38,559 --> 00:22:41,360
uh probably possible to detect on

536
00:22:41,360 --> 00:22:44,879
operating system level 2.

537
00:22:45,760 --> 00:22:50,159
but also we have multiple ways to

538
00:22:50,159 --> 00:22:53,600
to modify the bootloaders and

539
00:22:53,600 --> 00:22:56,960
it's just a fun uh fun

540
00:22:56,960 --> 00:22:59,600
proof of concept called efi guard which

541
00:22:59,600 --> 00:23:01,440
is i've been

542
00:23:01,440 --> 00:23:04,480
overlooked and recently discovered so

543
00:23:04,480 --> 00:23:08,480
basically uh we think secure boot killed

544
00:23:08,480 --> 00:23:10,000
of the boot kits right

545
00:23:10,000 --> 00:23:13,280
but it's not really true uh secure boot

546
00:23:13,280 --> 00:23:14,320
on the beginning

547
00:23:14,320 --> 00:23:17,440
was very weak and uh currently we have a

548
00:23:17,440 --> 00:23:18,720
lot of forks

549
00:23:18,720 --> 00:23:20,960
and a lot of different ways to implement

550
00:23:20,960 --> 00:23:22,559
the secure boot i would say

551
00:23:22,559 --> 00:23:25,440
modern x86 system with the fancy

552
00:23:25,440 --> 00:23:27,919
approaches like a drtm

553
00:23:27,919 --> 00:23:31,200
uh create a lot of blockers

554
00:23:31,200 --> 00:23:34,320
and i would say it's still a room

555
00:23:34,320 --> 00:23:36,400
if you have vulnerability inside the

556
00:23:36,400 --> 00:23:37,760
firmware manage

557
00:23:37,760 --> 00:23:40,640
system management mode but it's less and

558
00:23:40,640 --> 00:23:41,200
less

559
00:23:41,200 --> 00:23:44,640
with the years uh you can break secure

560
00:23:44,640 --> 00:23:45,279
boot

561
00:23:45,279 --> 00:23:47,120
in the ways how it's been done in the

562
00:23:47,120 --> 00:23:48,880
past but

563
00:23:48,880 --> 00:23:50,799
anyway we still have some windows

564
00:23:50,799 --> 00:23:53,600
systems windows 7 systems available

565
00:23:53,600 --> 00:23:56,720
and some outdated old boxes

566
00:23:56,720 --> 00:24:00,480
in the different uh perimeters

567
00:24:00,480 --> 00:24:03,760
and if i guard actually what is it doing

568
00:24:03,760 --> 00:24:05,760
it's creating hook on the firewood

569
00:24:05,760 --> 00:24:06,799
services

570
00:24:06,799 --> 00:24:09,919
patch uh boot manager and

571
00:24:09,919 --> 00:24:12,880
basically try to uh influence on the

572
00:24:12,880 --> 00:24:14,000
pudge guard

573
00:24:14,000 --> 00:24:16,960
uh try to basically create a room for

574
00:24:16,960 --> 00:24:18,000
the attacker

575
00:24:18,000 --> 00:24:21,039
to not be detected by the bodyguard it's

576
00:24:21,039 --> 00:24:21,440
fun

577
00:24:21,440 --> 00:24:23,120
i would say it's not working really

578
00:24:23,120 --> 00:24:25,679
stable but it's fun

579
00:24:25,679 --> 00:24:29,440
proof of concept to have a look

580
00:24:31,120 --> 00:24:34,960
another way uh why we need uh to detect

581
00:24:34,960 --> 00:24:38,000
uh and understand uh problems is supply

582
00:24:38,000 --> 00:24:39,679
chain vulnerabilities

583
00:24:39,679 --> 00:24:43,840
and here i would make an example which i

584
00:24:43,840 --> 00:24:44,640
presented

585
00:24:44,640 --> 00:24:47,279
on the beginning of 2019 on offensive

586
00:24:47,279 --> 00:24:47,679
con

587
00:24:47,679 --> 00:24:50,799
when boot guard uh which is basically

588
00:24:50,799 --> 00:24:54,159
armor and the secure boot and try to

589
00:24:54,159 --> 00:24:56,799
create root of trust bake it inside the

590
00:24:56,799 --> 00:24:57,520
hardware

591
00:24:57,520 --> 00:25:01,279
i mean intel boot guard technology

592
00:25:01,279 --> 00:25:05,520
and make secure boot much more proof

593
00:25:05,520 --> 00:25:08,320
to uh to the threads coming from the

594
00:25:08,320 --> 00:25:09,200
firmware

595
00:25:09,200 --> 00:25:12,799
but because uh we need some way

596
00:25:12,799 --> 00:25:16,559
for updating firmware remotely or

597
00:25:16,559 --> 00:25:20,320
some uh in larger organizations i.t

598
00:25:20,320 --> 00:25:22,400
security need to basically

599
00:25:22,400 --> 00:25:24,880
influence on the hardware over remote

600
00:25:24,880 --> 00:25:25,679
console

601
00:25:25,679 --> 00:25:29,440
so it was very interesting lenovo pcd in

602
00:25:29,440 --> 00:25:29,760
it

603
00:25:29,760 --> 00:25:32,559
uh it's not really backdoor let's say it

604
00:25:32,559 --> 00:25:34,960
is a possibility to disable

605
00:25:34,960 --> 00:25:38,080
the boot guard in the in in the software

606
00:25:38,080 --> 00:25:38,559
way

607
00:25:38,559 --> 00:25:41,679
it is already patched but uh it was

608
00:25:41,679 --> 00:25:42,480
actually

609
00:25:42,480 --> 00:25:45,279
quite a long on the thinkpad systems

610
00:25:45,279 --> 00:25:45,760
when

611
00:25:45,760 --> 00:25:50,080
uh just one uh big change on platform

612
00:25:50,080 --> 00:25:51,440
configuration

613
00:25:51,440 --> 00:25:54,880
data was causing fully disabled like

614
00:25:54,880 --> 00:25:57,760
it was not disabling boot guard but the

615
00:25:57,760 --> 00:25:58,640
dixie

616
00:25:58,640 --> 00:26:02,000
uh dxca volume was not verified by boot

617
00:26:02,000 --> 00:26:02,640
guard

618
00:26:02,640 --> 00:26:04,400
and basically even if you inject

619
00:26:04,400 --> 00:26:05,919
something malicious there

620
00:26:05,919 --> 00:26:09,840
it will be not raise any uh signs of

621
00:26:09,840 --> 00:26:12,799
of compromise

622
00:26:14,159 --> 00:26:17,039
and why uh vendors leave this kind of

623
00:26:17,039 --> 00:26:17,919
possibility

624
00:26:17,919 --> 00:26:21,200
is because uh i would say manage

625
00:26:21,200 --> 00:26:23,760
five thousands machining enterprise uh

626
00:26:23,760 --> 00:26:25,679
enterprise ecosystem

627
00:26:25,679 --> 00:26:29,520
it's very hard you need like uh uh

628
00:26:29,520 --> 00:26:31,840
delivers the bios updates but in the

629
00:26:31,840 --> 00:26:32,799
same case

630
00:26:32,799 --> 00:26:35,440
the bias updates can be broken or as

631
00:26:35,440 --> 00:26:36,400
example

632
00:26:36,400 --> 00:26:39,440
somebody start programming their update

633
00:26:39,440 --> 00:26:43,440
and the system gets out of energy or

634
00:26:43,440 --> 00:26:47,360
uh it is uh suddenly reboots

635
00:26:47,360 --> 00:26:50,799
and bias updates not been finished in

636
00:26:50,799 --> 00:26:53,360
this in the system get broken so

637
00:26:53,360 --> 00:26:55,520
you need somehow to influence on this

638
00:26:55,520 --> 00:26:58,080
system but in this case probably remote

639
00:26:58,080 --> 00:26:59,600
access will be

640
00:26:59,600 --> 00:27:02,960
not not the case but

641
00:27:02,960 --> 00:27:05,200
anyway you need the way for recovering

642
00:27:05,200 --> 00:27:06,400
it

643
00:27:06,400 --> 00:27:09,200
because uh if it will be no way to

644
00:27:09,200 --> 00:27:09,919
recover

645
00:27:09,919 --> 00:27:13,200
it will be a really huge extra cost

646
00:27:13,200 --> 00:27:15,279
for for the vendors who produce this

647
00:27:15,279 --> 00:27:16,880
kind of platforms

648
00:27:16,880 --> 00:27:20,000
and also living backdoors

649
00:27:20,000 --> 00:27:22,640
always create another problems uh even

650
00:27:22,640 --> 00:27:24,080
more serious because

651
00:27:24,080 --> 00:27:27,120
it's like two sides of the prop two

652
00:27:27,120 --> 00:27:28,159
sides of this

653
00:27:28,159 --> 00:27:31,520
possibility one in the good fight when

654
00:27:31,520 --> 00:27:34,720
uh i.t security have uh more

655
00:27:34,720 --> 00:27:37,360
uh more visibility and more

656
00:27:37,360 --> 00:27:39,760
possibilities to recover the systems

657
00:27:39,760 --> 00:27:43,279
another it is attacker can

658
00:27:43,279 --> 00:27:46,640
abuse this way for persist

659
00:27:46,640 --> 00:27:49,679
or create something bad

660
00:27:49,679 --> 00:27:54,159
and yeah in many cases enterprise market

661
00:27:54,159 --> 00:27:56,480
uh will be not survived without stable

662
00:27:56,480 --> 00:27:58,559
solution for recovery

663
00:27:58,559 --> 00:28:01,520
recover default configuration for

664
00:28:01,520 --> 00:28:02,240
recovery

665
00:28:02,240 --> 00:28:06,000
systems but also replace blocking

666
00:28:06,000 --> 00:28:09,440
hardware it is really expensive and

667
00:28:09,440 --> 00:28:13,520
even if you able to send some

668
00:28:13,520 --> 00:28:16,399
broken hardware to the vendor so the

669
00:28:16,399 --> 00:28:18,000
vendor in many cases

670
00:28:18,000 --> 00:28:21,360
uh have the tools and the ways for

671
00:28:21,360 --> 00:28:24,080
uh for recover the systems if it's just

672
00:28:24,080 --> 00:28:25,279
a software

673
00:28:25,279 --> 00:28:29,440
uh failure uh and if it is a patchable

674
00:28:29,440 --> 00:28:30,399
or

675
00:28:30,399 --> 00:28:33,840
if it is accessible to reprogram

676
00:28:33,840 --> 00:28:37,199
uh the firmware chip

677
00:28:37,679 --> 00:28:40,480
but in the same way we have a room for

678
00:28:40,480 --> 00:28:40,799
the

679
00:28:40,799 --> 00:28:42,480
calculator which is getting actually

680
00:28:42,480 --> 00:28:44,960
bigger with the times

681
00:28:44,960 --> 00:28:49,279
so uh on our uh

682
00:28:49,279 --> 00:28:52,399
focus uh today it will be mostly dixie

683
00:28:52,399 --> 00:28:53,200
drivers

684
00:28:53,200 --> 00:28:56,240
which i mentioned and just for

685
00:28:56,240 --> 00:28:58,640
people who not very familiar what the

686
00:28:58,640 --> 00:29:00,480
dixie drivers mean

687
00:29:00,480 --> 00:29:02,880
so basically we have a different stages

688
00:29:02,880 --> 00:29:03,919
of the boot

689
00:29:03,919 --> 00:29:08,159
on modern x86 hardware with

690
00:29:08,159 --> 00:29:12,320
ufi firmware so we have a previous

691
00:29:12,320 --> 00:29:14,640
initialization which is named platform

692
00:29:14,640 --> 00:29:16,240
initialization stage

693
00:29:16,240 --> 00:29:19,840
pi uh and then basically we have an

694
00:29:19,840 --> 00:29:22,000
utilization for the dixie core

695
00:29:22,000 --> 00:29:25,200
which is able to uh set up boot

696
00:29:25,200 --> 00:29:27,679
services and runtime services which is

697
00:29:27,679 --> 00:29:29,679
will be broadly used by the dixie

698
00:29:29,679 --> 00:29:32,159
drivers and the dixie dispatcher

699
00:29:32,159 --> 00:29:35,279
uh uh which actually set up

700
00:29:35,279 --> 00:29:39,520
by uh dixie core uh will be able to

701
00:29:39,520 --> 00:29:44,000
load uh the drivers and

702
00:29:44,000 --> 00:29:47,360
the boot manager uh actually able to

703
00:29:47,360 --> 00:29:49,840
load some of the ufi uh application

704
00:29:49,840 --> 00:29:50,720
drivers

705
00:29:50,720 --> 00:29:54,880
but uh dixie dispatcher also have

706
00:29:54,880 --> 00:29:57,840
different different types of dxe drivers

707
00:29:57,840 --> 00:30:00,000
one of them with system management mode

708
00:30:00,000 --> 00:30:02,720
which is one of the privileges

709
00:30:02,720 --> 00:30:05,520
privileged mods on the x86 systems and

710
00:30:05,520 --> 00:30:06,720
probably

711
00:30:06,720 --> 00:30:08,640
most interesting in terms of the dixie

712
00:30:08,640 --> 00:30:09,760
drivers for

713
00:30:09,760 --> 00:30:12,799
uh for placing implants or uh

714
00:30:12,799 --> 00:30:16,240
or some shell codes there

715
00:30:16,240 --> 00:30:19,520
so and uh yeah after that we have os

716
00:30:19,520 --> 00:30:20,159
loader

717
00:30:20,159 --> 00:30:23,360
okay so let's just

718
00:30:23,360 --> 00:30:26,720
try to discover some truths uh with uh

719
00:30:26,720 --> 00:30:29,279
with the tools uh which is exist for

720
00:30:29,279 --> 00:30:32,320
automating reverse engineering of ufi

721
00:30:32,320 --> 00:30:35,600
so um what kind of uh ufi

722
00:30:35,600 --> 00:30:38,720
reverse engineering plugins we do have

723
00:30:38,720 --> 00:30:41,840
nova days actually i would i want to

724
00:30:41,840 --> 00:30:42,480
address

725
00:30:42,480 --> 00:30:45,520
one of the first and it was a snare uh

726
00:30:45,520 --> 00:30:49,840
which is developed ufi scripts for ida

727
00:30:49,840 --> 00:30:53,120
and efi tools python with bunch of

728
00:30:53,120 --> 00:30:56,480
guides recovery was known for the years

729
00:30:56,480 --> 00:31:00,320
and uh it was one of the first probably

730
00:31:00,320 --> 00:31:03,440
automations uh came for

731
00:31:03,440 --> 00:31:05,840
for the public for reverse engineering

732
00:31:05,840 --> 00:31:07,519
of ufi firmwares

733
00:31:07,519 --> 00:31:10,240
and also been used researchers for a

734
00:31:10,240 --> 00:31:10,960
while

735
00:31:10,960 --> 00:31:14,320
as main uh main tool make it

736
00:31:14,320 --> 00:31:17,519
uh process of uh reverse engineering

737
00:31:17,519 --> 00:31:20,799
dixie drivers uh more robust and

738
00:31:20,799 --> 00:31:23,200
easier

739
00:31:23,840 --> 00:31:27,360
another one it is a e5

740
00:31:27,360 --> 00:31:30,559
swiss knife project by

741
00:31:30,559 --> 00:31:34,960
pedro villaca also known as o6 reverser

742
00:31:34,960 --> 00:31:38,480
which is actually make a bit more

743
00:31:38,480 --> 00:31:41,760
step further it is not

744
00:31:41,760 --> 00:31:44,320
only focused on dixie it also recovers

745
00:31:44,320 --> 00:31:44,799
some

746
00:31:44,799 --> 00:31:48,720
pi tables and make

747
00:31:48,720 --> 00:31:52,159
some outer recognition of uh uh

748
00:31:52,159 --> 00:31:55,039
boot services and uh other useful

749
00:31:55,039 --> 00:31:55,600
product

750
00:31:55,600 --> 00:31:58,320
things uh for reverse engineering q5

751
00:31:58,320 --> 00:31:59,200
firmwares

752
00:31:59,200 --> 00:32:03,840
inside the code of ida pro and

753
00:32:03,840 --> 00:32:06,080
both of these plugins it's out of

754
00:32:06,080 --> 00:32:06,960
support

755
00:32:06,960 --> 00:32:10,320
but still useful are good ones uh

756
00:32:10,320 --> 00:32:14,320
but i want to focus on once which is uh

757
00:32:14,320 --> 00:32:18,080
more uh probably

758
00:32:19,440 --> 00:32:22,960
out up up to date and

759
00:32:22,960 --> 00:32:25,279
gain more possibilities actually just

760
00:32:25,279 --> 00:32:27,120
want to make a spin on

761
00:32:27,120 --> 00:32:31,120
a jig simulation process i would

762
00:32:31,120 --> 00:32:34,720
full dixie and

763
00:32:34,720 --> 00:32:37,120
firmware emulation in the case of uefi

764
00:32:37,120 --> 00:32:38,880
firmware it's very hard

765
00:32:38,880 --> 00:32:43,279
i would say it's not not possible

766
00:32:43,279 --> 00:32:46,320
not impossible but it is really hard

767
00:32:46,320 --> 00:32:46,960
because

768
00:32:46,960 --> 00:32:49,360
it is a lot of environment things which

769
00:32:49,360 --> 00:32:50,559
you need to stop

770
00:32:50,559 --> 00:32:54,159
or you need to emulate and

771
00:32:54,159 --> 00:32:58,399
in real case uh it it is really hard to

772
00:32:58,399 --> 00:33:00,320
create with as example

773
00:33:00,320 --> 00:33:04,159
uh unicorn or any other environment

774
00:33:04,159 --> 00:33:06,960
it is of course exist uh tools uh like

775
00:33:06,960 --> 00:33:07,840
cmx

776
00:33:07,840 --> 00:33:11,120
which is silicon level simulation tool

777
00:33:11,120 --> 00:33:13,919
which is can basically behave as a real

778
00:33:13,919 --> 00:33:14,720
hardware

779
00:33:14,720 --> 00:33:17,760
and in this case you can do that but

780
00:33:17,760 --> 00:33:20,640
we're talking about uh just a small

781
00:33:20,640 --> 00:33:22,559
helper emulation tools

782
00:33:22,559 --> 00:33:25,200
for reverse engineering which is create

783
00:33:25,200 --> 00:33:26,480
a lot of

784
00:33:26,480 --> 00:33:30,080
a lot of bottlenecks there for for

785
00:33:30,080 --> 00:33:33,200
recover full environment but anyway if i

786
00:33:33,200 --> 00:33:34,480
dick simulator

787
00:33:34,480 --> 00:33:38,000
uh exist and thanks padre for that

788
00:33:38,000 --> 00:33:42,960
i believe it's one of the first uh uh

789
00:33:43,039 --> 00:33:45,840
robust dick simulators for reverse

790
00:33:45,840 --> 00:33:49,200
engineering being created

791
00:33:49,200 --> 00:33:53,679
and actually uh

792
00:33:53,679 --> 00:33:58,000
the next step after uh

793
00:33:58,000 --> 00:34:01,519
pedro's tool uh dick simulator it was a

794
00:34:01,519 --> 00:34:02,320
cueing

795
00:34:02,320 --> 00:34:06,000
a framework for uh emulation and it is

796
00:34:06,000 --> 00:34:09,040
basically not based on unicorn it

797
00:34:09,040 --> 00:34:12,320
is uh fully rewritten from scratch and i

798
00:34:12,320 --> 00:34:14,719
would say very robust python framework

799
00:34:14,719 --> 00:34:16,239
for emulation

800
00:34:16,239 --> 00:34:19,520
and recently they start supporting efi

801
00:34:19,520 --> 00:34:22,800
and dixie's and

802
00:34:22,800 --> 00:34:25,918
they do have some uh possibilities to

803
00:34:25,918 --> 00:34:28,159
creating an auto generated

804
00:34:28,159 --> 00:34:31,040
stops and a lot of stuff so i highly

805
00:34:31,040 --> 00:34:33,119
recommend to all the people who

806
00:34:33,119 --> 00:34:34,399
interested on uefi

807
00:34:34,399 --> 00:34:37,280
reverse engineering to look on this uh

808
00:34:37,280 --> 00:34:38,480
emulator

809
00:34:38,480 --> 00:34:42,239
and thanks for asaf carlos but

810
00:34:42,239 --> 00:34:45,440
actually who once uh been initial

811
00:34:45,440 --> 00:34:48,079
committer for this dixie possibility to

812
00:34:48,079 --> 00:34:49,760
cooling framework

813
00:34:49,760 --> 00:34:52,960
and uh work in progress

814
00:34:52,960 --> 00:34:55,599
actually it's still a lot of things need

815
00:34:55,599 --> 00:34:56,639
to be done

816
00:34:56,639 --> 00:35:00,079
uh as example uh platform configuration

817
00:35:00,079 --> 00:35:00,960
data

818
00:35:00,960 --> 00:35:04,480
and in vrm it still needs a lot of work

819
00:35:04,480 --> 00:35:07,760
on it and but as we can see work in

820
00:35:07,760 --> 00:35:08,560
progress

821
00:35:08,560 --> 00:35:12,079
and if you're interested on

822
00:35:12,079 --> 00:35:15,680
dick simulation and have some time

823
00:35:15,680 --> 00:35:17,760
and experience on reverse engineering

824
00:35:17,760 --> 00:35:18,720
ufi

825
00:35:18,720 --> 00:35:20,640
please contribute to this project

826
00:35:20,640 --> 00:35:22,720
because i believe it's very important to

827
00:35:22,720 --> 00:35:24,560
gain more possibilities

828
00:35:24,560 --> 00:35:27,839
for uh for emulating

829
00:35:27,839 --> 00:35:30,000
and introspection of the firmware

830
00:35:30,000 --> 00:35:31,680
drivers

831
00:35:31,680 --> 00:35:35,280
also uh one of the tools which is not

832
00:35:35,280 --> 00:35:39,119
uh emulation uh like it's

833
00:35:39,119 --> 00:35:42,800
more complex too it is raven framework

834
00:35:42,800 --> 00:35:46,000
uh and i would say raven framework able

835
00:35:46,000 --> 00:35:46,640
to

836
00:35:46,640 --> 00:35:50,640
uh boot uh operating system basically if

837
00:35:50,640 --> 00:35:50,960
you

838
00:35:50,960 --> 00:35:53,599
can inject the malicious driver on some

839
00:35:53,599 --> 00:35:55,280
qm or firmware

840
00:35:55,280 --> 00:35:59,200
you basically able uh to recreate this

841
00:35:59,200 --> 00:36:00,960
full chain of the boot

842
00:36:00,960 --> 00:36:04,480
uh under a raven framework

843
00:36:04,480 --> 00:36:08,560
and uh try to reconstruct

844
00:36:08,560 --> 00:36:12,880
the more details how

845
00:36:12,880 --> 00:36:15,040
the implant behave on higher level of

846
00:36:15,040 --> 00:36:16,160
the stacks

847
00:36:16,160 --> 00:36:18,800
as example if it will be modify some

848
00:36:18,800 --> 00:36:20,000
boot services

849
00:36:20,000 --> 00:36:25,280
and systems runtime services it will be

850
00:36:25,280 --> 00:36:28,480
visible uh under uh

851
00:36:28,480 --> 00:36:31,680
under this kind of emulation

852
00:36:31,680 --> 00:36:34,160
so but let's focus on the static

853
00:36:34,160 --> 00:36:35,280
analysis because

854
00:36:35,280 --> 00:36:38,640
i believe it's most of the researchers

855
00:36:38,640 --> 00:36:39,440
doing for

856
00:36:39,440 --> 00:36:41,839
for the firmware and that's in many

857
00:36:41,839 --> 00:36:42,880
cases

858
00:36:42,880 --> 00:36:46,079
uh you can discover a lot of things with

859
00:36:46,079 --> 00:36:48,240
these aesthetic analysis i would start

860
00:36:48,240 --> 00:36:50,640
with gidra and githu it's a great tool

861
00:36:50,640 --> 00:36:53,359
especially because it's uh like open

862
00:36:53,359 --> 00:36:54,160
source

863
00:36:54,160 --> 00:36:56,960
at least uh a huge part of the guide

864
00:36:56,960 --> 00:36:58,640
open source on public

865
00:36:58,640 --> 00:37:02,640
and it is a it has a compiler on it

866
00:37:02,640 --> 00:37:06,480
and also uh it is uh

867
00:37:06,480 --> 00:37:09,440
actually very cool tool and have a lot

868
00:37:09,440 --> 00:37:11,280
of possibilities to develop the plugins

869
00:37:11,280 --> 00:37:12,960
and automation

870
00:37:12,960 --> 00:37:16,079
uh personally i prefer ida but

871
00:37:16,079 --> 00:37:17,920
probably just because i started too

872
00:37:17,920 --> 00:37:20,480
early using it and

873
00:37:20,480 --> 00:37:24,640
it's hard to break your uh your uh

874
00:37:24,640 --> 00:37:26,800
your uh addiction of the tool and

875
00:37:26,800 --> 00:37:28,560
behavioral which you basically been

876
00:37:28,560 --> 00:37:29,200
using for

877
00:37:29,200 --> 00:37:33,280
years right so but uh look on the screen

878
00:37:33,280 --> 00:37:36,880
so basically here is default analysis of

879
00:37:36,880 --> 00:37:37,680
the guidera

880
00:37:37,680 --> 00:37:41,200
of one of the

881
00:37:41,200 --> 00:37:44,720
dixie drivers proof of concept which has

882
00:37:44,720 --> 00:37:46,320
been actually created for d

883
00:37:46,320 --> 00:37:49,520
may attack by dmitry alexuk and we can

884
00:37:49,520 --> 00:37:50,480
see here

885
00:37:50,480 --> 00:37:53,440
it is basically most of the cases just

886
00:37:53,440 --> 00:37:54,000
blind

887
00:37:54,000 --> 00:37:57,359
we have if i uh loaded image protocol

888
00:37:57,359 --> 00:38:00,400
discovered but just because the symbols

889
00:38:00,400 --> 00:38:03,119
from this ufi driver was not removed

890
00:38:03,119 --> 00:38:06,079
if symbols will be removed it will be

891
00:38:06,079 --> 00:38:06,880
something

892
00:38:06,880 --> 00:38:10,000
uh not that understandable but also we

893
00:38:10,000 --> 00:38:11,200
can see here

894
00:38:11,200 --> 00:38:14,960
it is no uh good services and runtime

895
00:38:14,960 --> 00:38:17,359
services initialized we don't see any

896
00:38:17,359 --> 00:38:18,720
locate protocol

897
00:38:18,720 --> 00:38:22,320
we just basically see some calls

898
00:38:22,320 --> 00:38:26,640
and it's hard to read this code

899
00:38:27,920 --> 00:38:30,079
one of the robust plugins which being

900
00:38:30,079 --> 00:38:31,359
actually very helpful

901
00:38:31,359 --> 00:38:33,599
and exist for the gear i would say it's

902
00:38:33,599 --> 00:38:34,640
first plug-in

903
00:38:34,640 --> 00:38:37,760
which has been focused on on uefi for

904
00:38:37,760 --> 00:38:38,560
the gydra

905
00:38:38,560 --> 00:38:42,720
it is gidra u5 firmware tools

906
00:38:42,800 --> 00:38:46,320
so and it's providing a few different

907
00:38:46,320 --> 00:38:49,599
options for reverse engineering so

908
00:38:49,599 --> 00:38:53,119
it is can load the option roms it can

909
00:38:53,119 --> 00:38:53,920
load the

910
00:38:53,920 --> 00:38:57,040
firmware image actually yes sure cool

911
00:38:57,040 --> 00:38:59,359
firmware image to the gitra and you can

912
00:38:59,359 --> 00:39:00,560
navigate

913
00:39:00,560 --> 00:39:03,359
on firmware volumes and directly reverse

914
00:39:03,359 --> 00:39:04,000
engineer

915
00:39:04,000 --> 00:39:06,960
any driver from from the firmware image

916
00:39:06,960 --> 00:39:10,320
not extracting it before

917
00:39:12,320 --> 00:39:15,680
also it it adds to the ghidra

918
00:39:15,680 --> 00:39:18,720
towards executable loader and

919
00:39:18,720 --> 00:39:21,599
it has some ufi helper script which is

920
00:39:21,599 --> 00:39:23,040
basically

921
00:39:23,040 --> 00:39:26,320
try to provide some uh data type

922
00:39:26,320 --> 00:39:27,280
libraries

923
00:39:27,280 --> 00:39:31,040
for uh u5 based types inside the gitra

924
00:39:31,040 --> 00:39:32,240
type system

925
00:39:32,240 --> 00:39:34,800
also fix some signatures of entry point

926
00:39:34,800 --> 00:39:36,480
functions for

927
00:39:36,480 --> 00:39:40,880
speed ufi specifics and also

928
00:39:40,880 --> 00:39:45,280
define known goods for the protocols

929
00:39:45,280 --> 00:39:48,320
and actually if you're not aware about

930
00:39:48,320 --> 00:39:49,680
the protocols

931
00:39:49,680 --> 00:39:52,720
and interested what that swing basically

932
00:39:52,720 --> 00:39:54,960
on the operating system level

933
00:39:54,960 --> 00:39:58,079
you have import and export tables on the

934
00:39:58,079 --> 00:39:58,400
p

935
00:39:58,400 --> 00:40:01,839
images in ufi world

936
00:40:01,839 --> 00:40:05,040
uh and in the firmware world uh

937
00:40:05,040 --> 00:40:07,520
import and export tables will be hard to

938
00:40:07,520 --> 00:40:08,720
create because

939
00:40:08,720 --> 00:40:11,200
it's you need to have kind of like a

940
00:40:11,200 --> 00:40:13,440
operating system loader

941
00:40:13,440 --> 00:40:17,280
and uh you also have uh different

942
00:40:17,280 --> 00:40:18,480
dependencies for

943
00:40:18,480 --> 00:40:21,599
third-party things and it's why uh

944
00:40:21,599 --> 00:40:25,040
it's overhead for the firmware so for

945
00:40:25,040 --> 00:40:28,160
protocols uh it's pretty straightforward

946
00:40:28,160 --> 00:40:31,200
uh you have like uh

947
00:40:31,200 --> 00:40:35,839
uh the function which is locate protocol

948
00:40:35,839 --> 00:40:39,599
and it has its

949
00:40:39,599 --> 00:40:42,800
get a good of the protocol which you

950
00:40:42,800 --> 00:40:44,079
want to load

951
00:40:44,079 --> 00:40:47,200
and in the same case you have a list on

952
00:40:47,200 --> 00:40:50,319
a runtime of the supported protocols

953
00:40:50,319 --> 00:40:53,760
and based on goods uh you will be

954
00:40:53,760 --> 00:40:56,400
basically provided this uh interface to

955
00:40:56,400 --> 00:40:57,680
the dixie driver

956
00:40:57,680 --> 00:41:01,599
to call particular uh implementation of

957
00:41:01,599 --> 00:41:02,800
the protocol

958
00:41:02,800 --> 00:41:06,240
from your driver to

959
00:41:06,240 --> 00:41:09,680
different driver uh where

960
00:41:09,680 --> 00:41:12,000
actually protocol is implemented but

961
00:41:12,000 --> 00:41:13,040
also

962
00:41:13,040 --> 00:41:15,760
what i just described it is a great very

963
00:41:15,760 --> 00:41:16,960
interesting thing

964
00:41:16,960 --> 00:41:20,000
we have firmware image which is calling

965
00:41:20,000 --> 00:41:21,520
a lot of protocols

966
00:41:21,520 --> 00:41:23,680
which is has implementation in different

967
00:41:23,680 --> 00:41:24,640
models

968
00:41:24,640 --> 00:41:27,599
and it's not exist in your model and

969
00:41:27,599 --> 00:41:28,319
basically

970
00:41:28,319 --> 00:41:33,040
make this reverse engineering uh

971
00:41:33,520 --> 00:41:35,520
to discover the full picture and

972
00:41:35,520 --> 00:41:37,440
understand if this protocol has been

973
00:41:37,440 --> 00:41:39,040
hooked or modified

974
00:41:39,040 --> 00:41:41,599
you also need to go and understand how

975
00:41:41,599 --> 00:41:43,760
this protocols is implemented

976
00:41:43,760 --> 00:41:47,200
and i would say i don't know

977
00:41:47,200 --> 00:41:50,160
any tools which is actually reconstruct

978
00:41:50,160 --> 00:41:50,960
this kind of

979
00:41:50,960 --> 00:41:54,240
references and dependencies uh

980
00:41:54,240 --> 00:41:57,440
automatically so guide firmware

981
00:41:57,440 --> 00:42:00,960
uh utilities great plugin i would say

982
00:42:00,960 --> 00:42:04,319
it's like move gear much more further

983
00:42:04,319 --> 00:42:07,440
for uh u5 firmware reverse engineering

984
00:42:07,440 --> 00:42:10,560
but uh it's still a lot of things

985
00:42:10,560 --> 00:42:13,599
uh need to be done to make it uh more

986
00:42:13,599 --> 00:42:15,280
robust and useful

987
00:42:15,280 --> 00:42:18,319
so but thanks alex james for supporting

988
00:42:18,319 --> 00:42:18,640
the

989
00:42:18,640 --> 00:42:21,440
thermal utilities and let's focus

990
00:42:21,440 --> 00:42:22,400
another one

991
00:42:22,400 --> 00:42:25,680
recently been released if i seek

992
00:42:25,680 --> 00:42:29,119
which is actually doing

993
00:42:29,119 --> 00:42:32,319
uh some complementary things to you if i

994
00:42:32,319 --> 00:42:35,440
uh for uh did refirmer tools

995
00:42:35,440 --> 00:42:38,720
so it is uh focusing more on

996
00:42:38,720 --> 00:42:42,000
a better uh definition of protocols

997
00:42:42,000 --> 00:42:43,280
inside the code

998
00:42:43,280 --> 00:42:46,400
and also try to classify

999
00:42:46,400 --> 00:42:49,440
different protocols by usage and also

1000
00:42:49,440 --> 00:42:50,160
different

1001
00:42:50,160 --> 00:42:51,440
[Music]

1002
00:42:51,440 --> 00:42:54,640
different calls inside

1003
00:42:54,640 --> 00:42:57,119
the uefi firmware driver if you look on

1004
00:42:57,119 --> 00:42:58,480
these screenshots

1005
00:42:58,480 --> 00:43:02,319
uh from the ufi sql again on uh

1006
00:43:02,319 --> 00:43:05,040
on the left side you see you can see the

1007
00:43:05,040 --> 00:43:05,520
tree

1008
00:43:05,520 --> 00:43:09,040
and it is exactly how uh different

1009
00:43:09,040 --> 00:43:12,240
uh interrupts and different things being

1010
00:43:12,240 --> 00:43:14,880
classified by efi sig plugin as example

1011
00:43:14,880 --> 00:43:15,839
you can see

1012
00:43:15,839 --> 00:43:18,560
uh pay core uh and you can find the

1013
00:43:18,560 --> 00:43:19,440
references

1014
00:43:19,440 --> 00:43:22,800
in uh for epic or in in the code you can

1015
00:43:22,800 --> 00:43:25,839
see dixie dependency expressions and

1016
00:43:25,839 --> 00:43:26,880
drivers

1017
00:43:26,880 --> 00:43:30,000
so also uh here is a list on the right

1018
00:43:30,000 --> 00:43:30,640
side

1019
00:43:30,640 --> 00:43:33,440
with protocols which has been recognized

1020
00:43:33,440 --> 00:43:33,839
and

1021
00:43:33,839 --> 00:43:37,440
on the bottom you can see how the code

1022
00:43:37,440 --> 00:43:40,880
being looks different after

1023
00:43:40,880 --> 00:43:44,079
we use uh e56 plugin

1024
00:43:44,079 --> 00:43:46,240
because probably you remember on the my

1025
00:43:46,240 --> 00:43:47,440
first uh

1026
00:43:47,440 --> 00:43:50,560
screen on the guitar section

1027
00:43:50,560 --> 00:43:53,680
where the code was basically

1028
00:43:53,680 --> 00:43:56,640
not really looks like a ufi code here is

1029
00:43:56,640 --> 00:43:59,119
how the uefi code usually looks like in

1030
00:43:59,119 --> 00:44:02,480
the compiler of gitra

1031
00:44:02,800 --> 00:44:06,800
but let's talk about the x-rays and uh

1032
00:44:06,800 --> 00:44:09,280
basically what kind of plugins for uh

1033
00:44:09,280 --> 00:44:10,160
ida pro

1034
00:44:10,160 --> 00:44:14,400
uh is exist uh alex i just wanted to

1035
00:44:14,400 --> 00:44:16,480
interrupt you that you know yeah you

1036
00:44:16,480 --> 00:44:18,000
have much less time

1037
00:44:18,000 --> 00:44:21,200
so you may want to speed up a little bit

1038
00:44:21,200 --> 00:44:24,079
uh okay uh how many time i do have

1039
00:44:24,079 --> 00:44:24,720
because

1040
00:44:24,720 --> 00:44:27,520
like uh do we have any limitations for

1041
00:44:27,520 --> 00:44:28,640
willingness time

1042
00:44:28,640 --> 00:44:31,520
we don't have a limitation but uh just

1043
00:44:31,520 --> 00:44:32,880
wanted to

1044
00:44:32,880 --> 00:44:36,079
keep uh okay i i will keep it

1045
00:44:36,079 --> 00:44:40,000
short but informative okay thank you

1046
00:44:40,000 --> 00:44:43,440
uh so uh

1047
00:44:43,440 --> 00:44:46,720
and yeah same thing why uh

1048
00:44:46,720 --> 00:44:50,079
default analysis is not enough uh is

1049
00:44:50,079 --> 00:44:50,720
because

1050
00:44:50,720 --> 00:44:53,760
uh we have a lot of things just missed

1051
00:44:53,760 --> 00:44:55,680
in the code we not understand

1052
00:44:55,680 --> 00:44:59,599
really a nature of the flow and also how

1053
00:44:59,599 --> 00:45:03,599
how um uh

1054
00:45:04,079 --> 00:45:08,000
how many uh ufi specifics been defined

1055
00:45:08,000 --> 00:45:09,839
of course we can do it all this

1056
00:45:09,839 --> 00:45:11,440
reconstruction manually

1057
00:45:11,440 --> 00:45:13,920
but it will be take a lot of time and

1058
00:45:13,920 --> 00:45:15,680
actually create an overhead and it's

1059
00:45:15,680 --> 00:45:16,880
easy to automate

1060
00:45:16,880 --> 00:45:20,800
but anyway it is default analysis by

1061
00:45:20,800 --> 00:45:23,920
uh ida and you can see here some

1062
00:45:23,920 --> 00:45:26,319
things been automatically discovered as

1063
00:45:26,319 --> 00:45:28,720
example system table pointer to boot

1064
00:45:28,720 --> 00:45:31,359
services

1065
00:45:31,520 --> 00:45:35,119
and other things either has some

1066
00:45:35,119 --> 00:45:38,000
uh automation for ufi firmware reverse

1067
00:45:38,000 --> 00:45:38,960
engineering

1068
00:45:38,960 --> 00:45:42,319
uh but it is very limited and

1069
00:45:42,319 --> 00:45:45,359
i i think it was kind of like uh

1070
00:45:45,359 --> 00:45:48,960
support some very core core uh

1071
00:45:48,960 --> 00:45:52,240
features nothing extra

1072
00:45:52,240 --> 00:45:56,079
here uh you can see how basically code

1073
00:45:56,079 --> 00:45:59,440
looks like after we use uh efi explorer

1074
00:45:59,440 --> 00:46:00,560
plugin

1075
00:46:00,560 --> 00:46:04,560
and the difference are we can see

1076
00:46:04,560 --> 00:46:08,720
basically uh yeah i just switched back

1077
00:46:08,720 --> 00:46:10,880
on the screen without analysis and this

1078
00:46:10,880 --> 00:46:11,599
analysis

1079
00:46:11,599 --> 00:46:14,880
you should see how uh what what

1080
00:46:14,880 --> 00:46:17,440
what's the change we have uh even an

1081
00:46:17,440 --> 00:46:18,960
assembly code we have

1082
00:46:18,960 --> 00:46:22,079
our comments about u5 system table ufi

1083
00:46:22,079 --> 00:46:25,280
booter services define it we have a

1084
00:46:25,280 --> 00:46:28,480
multiple protocols is available we have

1085
00:46:28,480 --> 00:46:30,160
a particular

1086
00:46:30,160 --> 00:46:32,480
types as example you can see boot

1087
00:46:32,480 --> 00:46:33,280
services

1088
00:46:33,280 --> 00:46:36,319
allocate pages get named and

1089
00:46:36,319 --> 00:46:39,599
also a lot of other things

1090
00:46:39,599 --> 00:46:42,720
actually if i explorer it is a ida pro

1091
00:46:42,720 --> 00:46:43,599
plugin

1092
00:46:43,599 --> 00:46:46,480
uh which is being recently released on

1093
00:46:46,480 --> 00:46:47,520
the public

1094
00:46:47,520 --> 00:46:50,720
and core team it is uh igor visilianka

1095
00:46:50,720 --> 00:46:52,640
philipp landiv andrey labunets and

1096
00:46:52,640 --> 00:46:53,680
myself

1097
00:46:53,680 --> 00:46:56,160
and but i also want to special thanks

1098
00:46:56,160 --> 00:46:57,520
rob flores for

1099
00:46:57,520 --> 00:46:59,760
his great ideas around hex race the

1100
00:46:59,760 --> 00:47:01,680
compiler automation for

1101
00:47:01,680 --> 00:47:05,359
uh if i uh type out recovery

1102
00:47:05,359 --> 00:47:08,800
and we do have some uh ideas how we can

1103
00:47:08,800 --> 00:47:10,000
use it for

1104
00:47:10,000 --> 00:47:13,359
a new version of efi explorer so

1105
00:47:13,359 --> 00:47:16,000
what actually uh the first version of fi

1106
00:47:16,000 --> 00:47:17,359
explorer does

1107
00:47:17,359 --> 00:47:20,720
we have uh ida pro plugin which is

1108
00:47:20,720 --> 00:47:24,240
basically identify boot services runtime

1109
00:47:24,240 --> 00:47:24,960
services

1110
00:47:24,960 --> 00:47:28,000
smm services and recognize

1111
00:47:28,000 --> 00:47:30,880
uh e5 protocols automatically based on

1112
00:47:30,880 --> 00:47:31,440
grid

1113
00:47:31,440 --> 00:47:35,280
and the place where uh locate protocol

1114
00:47:35,280 --> 00:47:36,000
functions

1115
00:47:36,000 --> 00:47:39,200
appears also

1116
00:47:39,200 --> 00:47:41,119
we do have a lot of ideas for

1117
00:47:41,119 --> 00:47:43,119
improvements and actually new releases

1118
00:47:43,119 --> 00:47:44,319
coming

1119
00:47:44,319 --> 00:47:48,000
but let's look on on the plugin itself

1120
00:47:48,000 --> 00:47:53,599
so uh actually uh does my either visible

1121
00:47:53,599 --> 00:47:56,880
for you guys okay

1122
00:47:56,880 --> 00:47:59,839
good uh so uh it is the presentation but

1123
00:47:59,839 --> 00:48:01,119
i i don't see

1124
00:48:01,119 --> 00:48:06,079
uh the ida pro on ah okay let me uh

1125
00:48:06,079 --> 00:48:09,359
share probably okay

1126
00:48:09,359 --> 00:48:13,200
it is about the sharing options

1127
00:48:16,000 --> 00:48:19,599
now it's visible yes

1128
00:48:19,599 --> 00:48:22,880
okay perfect so uh

1129
00:48:22,880 --> 00:48:26,480
let's look on the idopro on this uh

1130
00:48:26,480 --> 00:48:31,359
screen so basically it is a

1131
00:48:32,400 --> 00:48:36,000
same binary which is uh being uh

1132
00:48:36,000 --> 00:48:39,040
analyzed by guidra and for

1133
00:48:39,040 --> 00:48:41,200
going to the entry point we can go to

1134
00:48:41,200 --> 00:48:43,839
the uh

1135
00:48:43,839 --> 00:48:46,720
model entry point and basically you can

1136
00:48:46,720 --> 00:48:47,040
see

1137
00:48:47,040 --> 00:48:50,240
all these fancy comments created by efi

1138
00:48:50,240 --> 00:48:51,599
explorer plugins

1139
00:48:51,599 --> 00:48:55,359
but in the same case uh so if you

1140
00:48:55,359 --> 00:48:58,640
just copy the binary on your gitra uh

1141
00:48:58,640 --> 00:49:02,000
or github either a plugin folder

1142
00:49:02,000 --> 00:49:05,680
so uh and also you need a gui json file

1143
00:49:05,680 --> 00:49:08,720
so you do see this uh efi explorer

1144
00:49:08,720 --> 00:49:11,839
uh on your plugin folder so when you run

1145
00:49:11,839 --> 00:49:13,040
efi explorer

1146
00:49:13,040 --> 00:49:15,520
it will be three different windows

1147
00:49:15,520 --> 00:49:16,640
appears

1148
00:49:16,640 --> 00:49:19,680
boot services efi protocols and

1149
00:49:19,680 --> 00:49:23,280
if i explore goods so it is exactly

1150
00:49:23,280 --> 00:49:25,839
guides which is get recognized and used

1151
00:49:25,839 --> 00:49:26,880
on this

1152
00:49:26,880 --> 00:49:31,119
in this firmware driver and

1153
00:49:31,119 --> 00:49:34,800
here's the protocols and

1154
00:49:35,119 --> 00:49:38,400
here's a boot services so

1155
00:49:38,400 --> 00:49:42,160
uh basically what happens

1156
00:49:42,160 --> 00:49:45,520
uh it is really uh make it

1157
00:49:45,520 --> 00:49:49,599
uh more beautiful to read also on uh

1158
00:49:49,599 --> 00:49:53,520
the compiler level but um pay attention

1159
00:49:53,520 --> 00:49:56,559
i would highly recommend uh you guys

1160
00:49:56,559 --> 00:50:00,319
if you try to use public plugins

1161
00:50:00,319 --> 00:50:03,920
even mine don't take the binaries

1162
00:50:03,920 --> 00:50:06,960
take the code compile it yourself

1163
00:50:06,960 --> 00:50:10,480
and be confident uh your binaries

1164
00:50:10,480 --> 00:50:12,640
it is basically been created from the

1165
00:50:12,640 --> 00:50:13,680
source code

1166
00:50:13,680 --> 00:50:16,559
it is better because everything which is

1167
00:50:16,559 --> 00:50:18,480
come from the public services

1168
00:50:18,480 --> 00:50:21,839
you don't really know uh maybe

1169
00:50:21,839 --> 00:50:25,359
somebody will be like hug the account

1170
00:50:25,359 --> 00:50:27,119
and change the binaries there or

1171
00:50:27,119 --> 00:50:28,559
whatever so

1172
00:50:28,559 --> 00:50:30,559
i would recommend compile all the

1173
00:50:30,559 --> 00:50:32,160
plugins yourself

1174
00:50:32,160 --> 00:50:36,319
what i'm actually doing and

1175
00:50:36,319 --> 00:50:40,319
it's and look let's look on this uh

1176
00:50:40,319 --> 00:50:44,400
firmware uh firmware uh

1177
00:50:44,400 --> 00:50:47,520
driver so first of all uh we have a lot

1178
00:50:47,520 --> 00:50:47,839
of

1179
00:50:47,839 --> 00:50:49,839
uh fancy strings which is of course

1180
00:50:49,839 --> 00:50:51,040
helpful and

1181
00:50:51,040 --> 00:50:54,079
actually if you look on uh strings

1182
00:50:54,079 --> 00:50:57,119
uh it's already understandable

1183
00:50:57,119 --> 00:50:59,200
it is really interesting driver to make

1184
00:50:59,200 --> 00:51:00,720
a deeper analysis

1185
00:51:00,720 --> 00:51:03,599
but if you go on the model entry point

1186
00:51:03,599 --> 00:51:04,960
you can see here

1187
00:51:04,960 --> 00:51:08,880
basically uh you have something going on

1188
00:51:08,880 --> 00:51:11,920
and something is loading

1189
00:51:11,920 --> 00:51:15,520
from a separate section of the binary

1190
00:51:15,520 --> 00:51:18,640
image so if you can see uh

1191
00:51:18,640 --> 00:51:22,079
here uh it is a person

1192
00:51:22,079 --> 00:51:25,839
of uh of uh uh

1193
00:51:25,839 --> 00:51:28,800
binary image of the driver itself and

1194
00:51:28,800 --> 00:51:30,800
probably it is a possibility to inject

1195
00:51:30,800 --> 00:51:31,680
something

1196
00:51:31,680 --> 00:51:35,520
so in this case let's look on um

1197
00:51:35,520 --> 00:51:38,720
on the sections uh segments

1198
00:51:38,720 --> 00:51:41,839
which is actually uh and it is a

1199
00:51:41,839 --> 00:51:44,160
sections on this driver what is exist

1200
00:51:44,160 --> 00:51:45,520
and we can see

1201
00:51:45,520 --> 00:51:48,720
uh it is not usual

1202
00:51:48,720 --> 00:51:52,400
uh section list for dixie driver we have

1203
00:51:52,400 --> 00:51:53,040
much more

1204
00:51:53,040 --> 00:51:56,720
sections available and we have uh really

1205
00:51:56,720 --> 00:52:00,720
uh like rare sections for dixie drivers

1206
00:52:00,720 --> 00:52:03,839
like a relocation table or

1207
00:52:03,839 --> 00:52:08,640
i would say i mostly never seen that

1208
00:52:08,640 --> 00:52:11,680
only on some something weird and

1209
00:52:11,680 --> 00:52:15,599
also uh x data segment

1210
00:52:15,599 --> 00:52:19,040
it's not a usual name so only just

1211
00:52:19,040 --> 00:52:21,599
looking on this kind of artifacts you

1212
00:52:21,599 --> 00:52:22,880
can gain some

1213
00:52:22,880 --> 00:52:26,640
uh some basic level of confidence it is

1214
00:52:26,640 --> 00:52:29,520
interesting driver to have a deeper uh

1215
00:52:29,520 --> 00:52:30,400
analysis

1216
00:52:30,400 --> 00:52:32,240
and this driver actually been developed

1217
00:52:32,240 --> 00:52:34,000
by crash betrayalic silk it

1218
00:52:34,000 --> 00:52:37,200
is very interesting proof of concept for

1219
00:52:37,200 --> 00:52:40,480
uh attacking uh dma by

1220
00:52:40,480 --> 00:52:43,760
injecting uh uh before dixie core is

1221
00:52:43,760 --> 00:52:44,480
loaded

1222
00:52:44,480 --> 00:52:47,119
or just on the initial stage of loading

1223
00:52:47,119 --> 00:52:48,000
dixie core

1224
00:52:48,000 --> 00:52:51,359
some malicious uh dixie driver so it is

1225
00:52:51,359 --> 00:52:54,240
great poc i highly recommend you go over

1226
00:52:54,240 --> 00:52:55,440
it and it's

1227
00:52:55,440 --> 00:52:57,200
public with the source code on the

1228
00:52:57,200 --> 00:53:00,160
github but it's more fun to look on

1229
00:53:00,160 --> 00:53:03,598
on the binary level too

1230
00:53:04,960 --> 00:53:09,440
let's back to our slides so

1231
00:53:10,079 --> 00:53:15,760
uh it's slices visible now

1232
00:53:15,760 --> 00:53:19,040
no i can see ida okay

1233
00:53:19,040 --> 00:53:22,400
i always like to see the ida but let me

1234
00:53:22,400 --> 00:53:23,200
switch on the

1235
00:53:23,200 --> 00:53:26,319
slides so uh

1236
00:53:26,319 --> 00:53:28,960
yeah so basically here is like some

1237
00:53:28,960 --> 00:53:30,319
screenshots which is

1238
00:53:30,319 --> 00:53:32,800
uh provide you some uh some

1239
00:53:32,800 --> 00:53:34,000
understanding

1240
00:53:34,000 --> 00:53:37,359
of what kind of um level

1241
00:53:37,359 --> 00:53:40,480
what what what is uh happening on either

1242
00:53:40,480 --> 00:53:42,319
level for uh

1243
00:53:42,319 --> 00:53:44,960
for make uh reverse engineering more

1244
00:53:44,960 --> 00:53:46,800
smooth and understandable

1245
00:53:46,800 --> 00:53:50,800
and it is basically uh

1246
00:53:50,800 --> 00:53:53,680
how the protocols get recognized and

1247
00:53:53,680 --> 00:53:54,800
renamed

1248
00:53:54,800 --> 00:54:00,079
on on on the idle level

1249
00:54:00,079 --> 00:54:03,280
also uh you just seen these screens with

1250
00:54:03,280 --> 00:54:06,400
protocols boot services and guides on my

1251
00:54:06,400 --> 00:54:10,240
uh on my id pro instance but

1252
00:54:10,240 --> 00:54:13,359
here how this looks like on uh more

1253
00:54:13,359 --> 00:54:15,119
bigger dixie driver

1254
00:54:15,119 --> 00:54:18,160
with a visa proper uh

1255
00:54:18,160 --> 00:54:20,640
purpose not just a backdoor like

1256
00:54:20,640 --> 00:54:21,760
previous one

1257
00:54:21,760 --> 00:54:24,880
okay few words about uh efi explorer

1258
00:54:24,880 --> 00:54:26,480
architecture the plugin

1259
00:54:26,480 --> 00:54:30,319
developed on c plus plus and we try

1260
00:54:30,319 --> 00:54:33,760
to make it really fast and because we've

1261
00:54:33,760 --> 00:54:36,960
been thinking about uh more feature

1262
00:54:36,960 --> 00:54:40,400
uh adding uh in future uh it's well it's

1263
00:54:40,400 --> 00:54:41,359
why we focus

1264
00:54:41,359 --> 00:54:45,040
on c plus plus and also because

1265
00:54:45,040 --> 00:54:47,440
uh some of the features tied to x-rays

1266
00:54:47,440 --> 00:54:49,280
the compiler as example for

1267
00:54:49,280 --> 00:54:52,319
uh more deeper ac analysis based on c

1268
00:54:52,319 --> 00:54:53,040
trees

1269
00:54:53,040 --> 00:54:56,319
and probably some type recognition

1270
00:54:56,319 --> 00:54:59,599
on citrix and microcode level so

1271
00:54:59,599 --> 00:55:02,640
we keep it on c plus plus because

1272
00:55:02,640 --> 00:55:06,079
uh i would say on x-rays developing

1273
00:55:06,079 --> 00:55:09,119
the large plugins uh

1274
00:55:09,119 --> 00:55:11,200
it's better on c plus plus because you

1275
00:55:11,200 --> 00:55:12,400
can see more

1276
00:55:12,400 --> 00:55:14,720
you can use the more stable way to

1277
00:55:14,720 --> 00:55:15,839
access for

1278
00:55:15,839 --> 00:55:19,119
all the apis on the python level not

1279
00:55:19,119 --> 00:55:22,319
all the api is available but also

1280
00:55:22,319 --> 00:55:24,799
in some cases the plug-ins less stable

1281
00:55:24,799 --> 00:55:25,920
and i would say

1282
00:55:25,920 --> 00:55:28,319
python either python is like for the

1283
00:55:28,319 --> 00:55:29,599
hexagon compiler

1284
00:55:29,599 --> 00:55:32,079
it's better for prototyping but in my

1285
00:55:32,079 --> 00:55:33,280
opinion simple

1286
00:55:33,280 --> 00:55:35,839
plus plus plugins make it more stable

1287
00:55:35,839 --> 00:55:37,680
and

1288
00:55:37,680 --> 00:55:40,880
don't uh corrupt my idbs before i finish

1289
00:55:40,880 --> 00:55:42,160
my analysis

1290
00:55:42,160 --> 00:55:45,680
so uh we have a

1291
00:55:45,680 --> 00:55:48,799
few different things available on

1292
00:55:48,799 --> 00:55:52,000
uh on uh if i explore architecture we

1293
00:55:52,000 --> 00:55:52,880
have a

1294
00:55:52,880 --> 00:55:55,920
efi analyzer which is actually a

1295
00:55:55,920 --> 00:55:59,119
huge part of the plugin which is

1296
00:55:59,119 --> 00:56:02,400
try to find uh and analyze

1297
00:56:02,400 --> 00:56:05,520
and basically add some comments and

1298
00:56:05,520 --> 00:56:09,200
make a proper uh beautifying

1299
00:56:09,200 --> 00:56:12,319
the code on the ida pro level and we

1300
00:56:12,319 --> 00:56:12,799
have

1301
00:56:12,799 --> 00:56:16,160
uh some of the things uh

1302
00:56:16,160 --> 00:56:19,440
which is basically try to inject the

1303
00:56:19,440 --> 00:56:20,160
comments

1304
00:56:20,160 --> 00:56:24,240
and also uh add some some uh additional

1305
00:56:24,240 --> 00:56:27,599
uh functionality but uh also

1306
00:56:27,599 --> 00:56:30,079
uh i want to announce something which is

1307
00:56:30,079 --> 00:56:31,440
coming pretty soon

1308
00:56:31,440 --> 00:56:34,559
it is efi explorer version 2.0

1309
00:56:34,559 --> 00:56:37,119
in the beginning was thinking 2.0 it's

1310
00:56:37,119 --> 00:56:37,839
probably

1311
00:56:37,839 --> 00:56:40,960
after point 1.0

1312
00:56:40,960 --> 00:56:44,240
it's like huge jump but it is huge jump

1313
00:56:44,240 --> 00:56:46,400
because we add a lot of new stuff

1314
00:56:46,400 --> 00:56:49,680
so basically we improve a lot uh

1315
00:56:49,680 --> 00:56:52,480
system management mode services analysis

1316
00:56:52,480 --> 00:56:52,880
we

1317
00:56:52,880 --> 00:56:55,599
support uh we will support platform

1318
00:56:55,599 --> 00:56:57,119
initialization analysis

1319
00:56:57,119 --> 00:57:00,240
and ppi interfaces for reconstruction in

1320
00:57:00,240 --> 00:57:01,200
the same way

1321
00:57:01,200 --> 00:57:04,480
how we're doing for uh protocols

1322
00:57:04,480 --> 00:57:06,000
also it will improve the type

1323
00:57:06,000 --> 00:57:08,000
information import for

1324
00:57:08,000 --> 00:57:11,280
idb files and uh basically

1325
00:57:11,280 --> 00:57:14,640
uh the local type uh information

1326
00:57:14,640 --> 00:57:17,520
inside inside the ida pro internally

1327
00:57:17,520 --> 00:57:19,040
will be available

1328
00:57:19,040 --> 00:57:22,559
also automated reconstruction for

1329
00:57:22,559 --> 00:57:23,599
protocols

1330
00:57:23,599 --> 00:57:26,960
uh references uh dependencies between

1331
00:57:26,960 --> 00:57:28,799
different firmware images

1332
00:57:28,799 --> 00:57:31,839
uh uh between different

1333
00:57:31,839 --> 00:57:34,000
driver images on the firmware image

1334
00:57:34,000 --> 00:57:35,920
level will be available

1335
00:57:35,920 --> 00:57:38,640
and this actually huge huge work have

1336
00:57:38,640 --> 00:57:39,680
been done

1337
00:57:39,680 --> 00:57:42,720
because think about

1338
00:57:42,720 --> 00:57:46,240
you need to load uh

1339
00:57:46,240 --> 00:57:49,040
the whole image to idebro but in the

1340
00:57:49,040 --> 00:57:51,520
same way you need to process

1341
00:57:51,520 --> 00:57:54,319
each driver separately and rebuild all

1342
00:57:54,319 --> 00:57:56,160
these dependencies back

1343
00:57:56,160 --> 00:57:58,960
so it is a lot of things been done there

1344
00:57:58,960 --> 00:57:59,920
and we also

1345
00:57:59,920 --> 00:58:03,040
try to implement kind of like protocol

1346
00:58:03,040 --> 00:58:06,480
call graph uh visualization

1347
00:58:06,480 --> 00:58:09,920
because if you uh go into model entry

1348
00:58:09,920 --> 00:58:10,799
point

1349
00:58:10,799 --> 00:58:13,920
and you can see uh these protocols and

1350
00:58:13,920 --> 00:58:15,359
this example if you

1351
00:58:15,359 --> 00:58:18,240
uh visualize as a call graph it will be

1352
00:58:18,240 --> 00:58:20,000
much more understandable

1353
00:58:20,000 --> 00:58:22,720
uh what this functionality of the driver

1354
00:58:22,720 --> 00:58:23,839
does

1355
00:58:23,839 --> 00:58:26,640
and it will be some x-ray secret sauce

1356
00:58:26,640 --> 00:58:28,640
to improve type recognition

1357
00:58:28,640 --> 00:58:31,760
and analysis so stay tuned some cool

1358
00:58:31,760 --> 00:58:33,440
stuff coming

1359
00:58:33,440 --> 00:58:37,200
and i think it's pretty much it so i can

1360
00:58:37,200 --> 00:58:39,920
answer some questions and i would love

1361
00:58:39,920 --> 00:58:40,720
to discuss

1362
00:58:40,720 --> 00:58:43,200
more about ufi reverse engineering and

1363
00:58:43,200 --> 00:58:45,200
the tools which you are prefer

1364
00:58:45,200 --> 00:58:49,040
to do so thank you very much

1365
00:58:49,040 --> 00:58:51,760
thank you alex uh audience if you have

1366
00:58:51,760 --> 00:58:54,079
any questions please send it across

1367
00:58:54,079 --> 00:58:57,920
on the zoom chat uh

1368
00:59:01,119 --> 00:59:04,079
okay uh alex you've asked you've

1369
00:59:04,079 --> 00:59:05,839
mentioned about a lot of tools

1370
00:59:05,839 --> 00:59:08,960
uh and comparison uh do you have

1371
00:59:08,960 --> 00:59:12,240
any uh experience or do you how good

1372
00:59:12,240 --> 00:59:16,559
is chipset uh for uefi analysis

1373
00:59:16,559 --> 00:59:19,040
so chipset is a great tool but uh you

1374
00:59:19,040 --> 00:59:20,079
know chipset

1375
00:59:20,079 --> 00:59:23,440
it is about uh finding uh the problems

1376
00:59:23,440 --> 00:59:24,799
in the configurations

1377
00:59:24,799 --> 00:59:27,359
it's not about reverse engineering it is

1378
00:59:27,359 --> 00:59:29,760
a different tool for different approach

1379
00:59:29,760 --> 00:59:32,960
so yeah

1380
00:59:32,960 --> 00:59:36,960
all right so i would say uh chipset

1381
00:59:36,960 --> 00:59:41,119
uh and other tools like ufi uh

1382
00:59:41,119 --> 00:59:45,119
ufi tool uh it is good for uh as example

1383
00:59:45,119 --> 00:59:47,440
uh gain some visibility or unpacking

1384
00:59:47,440 --> 00:59:49,440
firmware image to understand what is

1385
00:59:49,440 --> 00:59:50,319
inside

1386
00:59:50,319 --> 00:59:52,400
but you are need to understand what is

1387
00:59:52,400 --> 00:59:54,960
inside the binaries inside the firmware

1388
00:59:54,960 --> 00:59:55,440
image

1389
00:59:55,440 --> 00:59:58,000
and uh this tool's not been created for

1390
00:59:58,000 --> 00:59:59,040
that

1391
00:59:59,040 --> 01:00:03,359
understood all right uh

1392
01:00:03,359 --> 01:00:06,720
audience any questions

1393
01:00:10,000 --> 01:00:12,480
well alex i don't see any questions

1394
01:00:12,480 --> 01:00:14,319
coming up in the zoom chat

1395
01:00:14,319 --> 01:00:17,119
uh but yeah thank you so much alex uh it

1396
01:00:17,119 --> 01:00:19,359
was great having you and for a detailed

1397
01:00:19,359 --> 01:00:22,319
uh presentation uh for the audience if

1398
01:00:22,319 --> 01:00:22,720
you

1399
01:00:22,720 --> 01:00:25,440
would like to attend alex's training uh

1400
01:00:25,440 --> 01:00:27,040
it's coming up next month

1401
01:00:27,040 --> 01:00:29,920
uh please register and we also really

1402
01:00:29,920 --> 01:00:32,000
appreciate if you can send this feedback

1403
01:00:32,000 --> 01:00:33,760
about today's webinar what you liked

1404
01:00:33,760 --> 01:00:35,119
what you didn't uh

1405
01:00:35,119 --> 01:00:36,960
if you would like to give a presentation

1406
01:00:36,960 --> 01:00:38,559
uh next time

1407
01:00:38,559 --> 01:00:41,760
let us know so yeah thank you so much

1408
01:00:41,760 --> 01:00:43,440
thank you everybody thank you alex

1409
01:00:43,440 --> 01:00:48,079
uh and stay safe

1410
01:00:48,559 --> 01:00:50,079
thank you very much everybody for

1411
01:00:50,079 --> 01:00:51,839
attending and uh

1412
01:00:51,839 --> 01:00:55,200
have a good evening on uh in europe and

1413
01:00:55,200 --> 01:00:58,480
also great day in in the us in pacific

1414
01:00:58,480 --> 01:00:59,280
time zone

1415
01:00:59,280 --> 01:01:04,400
thanks all bye now all right alex bye

