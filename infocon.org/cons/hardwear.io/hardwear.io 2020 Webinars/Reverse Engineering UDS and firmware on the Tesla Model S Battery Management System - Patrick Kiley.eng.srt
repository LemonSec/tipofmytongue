1
00:00:12,490 --> 00:00:13,679
[Music]

2
00:00:13,679 --> 00:00:15,599
hi everyone welcome to another

3
00:00:15,599 --> 00:00:18,080
harvard iowa webinar and thank you for

4
00:00:18,080 --> 00:00:19,119
joining us on

5
00:00:19,119 --> 00:00:21,439
this tuesday evening we have just

6
00:00:21,439 --> 00:00:22,320
finished

7
00:00:22,320 --> 00:00:24,480
our hardware io training and conference

8
00:00:24,480 --> 00:00:26,000
netherlands edition

9
00:00:26,000 --> 00:00:30,080
virtually it was a great success we

10
00:00:30,080 --> 00:00:30,800
believe

11
00:00:30,800 --> 00:00:33,360
with more than 300 attendees of coming

12
00:00:33,360 --> 00:00:35,760
from 60 different countries

13
00:00:35,760 --> 00:00:38,320
and today we have a very special guest

14
00:00:38,320 --> 00:00:39,120
with us

15
00:00:39,120 --> 00:00:42,800
patrick kylie patrick has more than

16
00:00:42,800 --> 00:00:45,120
nearly two decades of experience in the

17
00:00:45,120 --> 00:00:47,840
information security industry

18
00:00:47,840 --> 00:00:50,480
and today he will talk about reverse

19
00:00:50,480 --> 00:00:51,760
engineering uh

20
00:00:51,760 --> 00:00:54,640
uds and firmware on the tesla model as

21
00:00:54,640 --> 00:00:57,120
battery management system

22
00:00:57,120 --> 00:00:59,680
you probably already know the format of

23
00:00:59,680 --> 00:01:01,120
the webinar

24
00:01:01,120 --> 00:01:03,199
there will be a 30-minute presentation

25
00:01:03,199 --> 00:01:05,519
followed by a 10-minute q a

26
00:01:05,519 --> 00:01:08,240
i would like everyone to write their

27
00:01:08,240 --> 00:01:09,040
questions

28
00:01:09,040 --> 00:01:14,080
in the zoom chat box and

29
00:01:14,080 --> 00:01:16,640
so without any further delay uh let me

30
00:01:16,640 --> 00:01:20,080
invite patrick to start his

31
00:01:24,840 --> 00:01:27,840
presentation

32
00:01:33,439 --> 00:01:35,920
okay hello there let me get this uh

33
00:01:35,920 --> 00:01:41,840
presentation going

34
00:02:00,320 --> 00:02:09,840
okay excellent

35
00:02:20,080 --> 00:02:22,879
hey bear with me one second here so i

36
00:02:22,879 --> 00:02:37,360
can move these around

37
00:02:37,360 --> 00:02:40,800
okay great so uh this is a

38
00:02:40,800 --> 00:02:44,239
project that i started um

39
00:02:44,239 --> 00:02:47,599
well over a year ago um i was interested

40
00:02:47,599 --> 00:02:50,400
in just trying to figure out how the

41
00:02:50,400 --> 00:02:52,319
battery management system worked on a

42
00:02:52,319 --> 00:02:54,239
tesla model s i was fortunate enough to

43
00:02:54,239 --> 00:02:55,280
have

44
00:02:55,280 --> 00:02:57,680
access to one that i could tinker with

45
00:02:57,680 --> 00:02:59,120
and um

46
00:02:59,120 --> 00:03:01,680
had root access already so i could peer

47
00:03:01,680 --> 00:03:03,519
quite a bit underneath the hood of it so

48
00:03:03,519 --> 00:03:05,040
it was uh

49
00:03:05,040 --> 00:03:06,480
of all the things that i've worked on

50
00:03:06,480 --> 00:03:08,000
and reverse engineered it was definitely

51
00:03:08,000 --> 00:03:09,920
the most complicated but um i learned

52
00:03:09,920 --> 00:03:11,760
quite a bit

53
00:03:11,760 --> 00:03:15,280
was able to figure out

54
00:03:15,280 --> 00:03:18,480
a lot of hardware components as well as

55
00:03:18,480 --> 00:03:21,840
both firmware and software so it was uh

56
00:03:21,840 --> 00:03:23,440
several different kind of domains and

57
00:03:23,440 --> 00:03:25,040
areas that i had to work on and figure

58
00:03:25,040 --> 00:03:26,159
out

59
00:03:26,159 --> 00:03:27,599
but it was pretty rewarding because in

60
00:03:27,599 --> 00:03:33,839
the end it made the car faster

61
00:03:34,720 --> 00:03:37,280
so a little bit about me um i'm uh

62
00:03:37,280 --> 00:03:38,879
patrick kiley principal securi

63
00:03:38,879 --> 00:03:41,599
security consultant at rapid7 i'm a

64
00:03:41,599 --> 00:03:44,000
member of the penetration testing team

65
00:03:44,000 --> 00:03:46,080
uh previously i've released some

66
00:03:46,080 --> 00:03:48,319
research in avionics security

67
00:03:48,319 --> 00:03:50,319
um obviously like the tesla model s i've

68
00:03:50,319 --> 00:03:51,760
done research in internet connected

69
00:03:51,760 --> 00:03:53,599
transportation platforms

70
00:03:53,599 --> 00:03:55,599
um and then you know hardware hacking

71
00:03:55,599 --> 00:03:57,599
internet of things

72
00:03:57,599 --> 00:04:00,560
uh can bus a lot of the the subjects

73
00:04:00,560 --> 00:04:01,280
that i've

74
00:04:01,280 --> 00:04:02,959
done research on and that i'm interested

75
00:04:02,959 --> 00:04:04,400
in

76
00:04:04,400 --> 00:04:07,519
so uh kind of the topics this is a brief

77
00:04:07,519 --> 00:04:08,400
overview of

78
00:04:08,400 --> 00:04:10,879
of what we're going to go over today i'm

79
00:04:10,879 --> 00:04:12,080
going to go over the architecture of the

80
00:04:12,080 --> 00:04:14,319
model s

81
00:04:14,319 --> 00:04:15,840
the the performance in ludicrous

82
00:04:15,840 --> 00:04:17,199
timeline it's it's important to

83
00:04:17,199 --> 00:04:18,639
understand that uh

84
00:04:18,639 --> 00:04:21,519
ludicrous was announced after uh the

85
00:04:21,519 --> 00:04:23,840
performance models were released and

86
00:04:23,840 --> 00:04:26,000
it's critical to some of the uh

87
00:04:26,000 --> 00:04:27,520
components that i was able to reverse

88
00:04:27,520 --> 00:04:28,000
engineer

89
00:04:28,000 --> 00:04:29,840
if it was done in the opposite order

90
00:04:29,840 --> 00:04:31,919
it's it's likely that

91
00:04:31,919 --> 00:04:33,440
it never would have been successful just

92
00:04:33,440 --> 00:04:34,639
because there wouldn't have been as much

93
00:04:34,639 --> 00:04:36,240
information

94
00:04:36,240 --> 00:04:39,280
out there some of the data that's stored

95
00:04:39,280 --> 00:04:41,840
in toolbox which is tesla's diagnostic

96
00:04:41,840 --> 00:04:42,479
application

97
00:04:42,479 --> 00:04:44,080
used in their service centers and by

98
00:04:44,080 --> 00:04:45,759
body shops

99
00:04:45,759 --> 00:04:48,800
how he's able to extract firmware um

100
00:04:48,800 --> 00:04:51,280
the uds and odx routines those are all

101
00:04:51,280 --> 00:04:52,479
can bus

102
00:04:52,479 --> 00:04:54,880
type protocols that's on top of can bus

103
00:04:54,880 --> 00:04:56,560
and and work

104
00:04:56,560 --> 00:04:59,440
and allow you to really aid in reverse

105
00:04:59,440 --> 00:05:00,880
engineering what's actually going on

106
00:05:00,880 --> 00:05:01,520
when you're

107
00:05:01,520 --> 00:05:04,320
inspecting the canvas modification of

108
00:05:04,320 --> 00:05:06,160
the current shunt

109
00:05:06,160 --> 00:05:08,160
the then some additional firmware

110
00:05:08,160 --> 00:05:09,440
analysis and

111
00:05:09,440 --> 00:05:10,639
where i can take it from here some

112
00:05:10,639 --> 00:05:14,080
additional next steps so

113
00:05:14,080 --> 00:05:15,759
i and then one of the things that i'm

114
00:05:15,759 --> 00:05:17,120
going to really add to this presentation

115
00:05:17,120 --> 00:05:18,880
for those of you who actually saw

116
00:05:18,880 --> 00:05:20,400
some similar work that i've released in

117
00:05:20,400 --> 00:05:21,919
the past i'm going to talk a little bit

118
00:05:21,919 --> 00:05:24,639
more about the security implications

119
00:05:24,639 --> 00:05:27,280
of many of these various features that

120
00:05:27,280 --> 00:05:28,560
we go over

121
00:05:28,560 --> 00:05:31,039
but a little bit about the model s this

122
00:05:31,039 --> 00:05:31,680
is the

123
00:05:31,680 --> 00:05:34,240
model list that i was uh inspecting the

124
00:05:34,240 --> 00:05:35,759
the newer ones that are run

125
00:05:35,759 --> 00:05:37,680
running autopilot 2 and later have a

126
00:05:37,680 --> 00:05:39,600
little bit different architecture

127
00:05:39,600 --> 00:05:42,960
but overall the um the basic layout is

128
00:05:42,960 --> 00:05:44,080
the same

129
00:05:44,080 --> 00:05:46,639
so we have the central information

130
00:05:46,639 --> 00:05:47,680
display

131
00:05:47,680 --> 00:05:49,199
which is also what connects to the

132
00:05:49,199 --> 00:05:50,560
internet and then we have the instrument

133
00:05:50,560 --> 00:05:51,600
cluster

134
00:05:51,600 --> 00:05:54,320
those are running the same version of

135
00:05:54,320 --> 00:05:55,759
firmware but they're just they have

136
00:05:55,759 --> 00:05:57,039
slightly different versions

137
00:05:57,039 --> 00:05:59,520
different versions of hardware on them

138
00:05:59,520 --> 00:06:01,600
but the firmware that sits on them is

139
00:06:01,600 --> 00:06:04,800
otherwise identical those both connect

140
00:06:04,800 --> 00:06:08,000
via usb ethernet internally to uh

141
00:06:08,000 --> 00:06:10,080
an ethernet cable that connects between

142
00:06:10,080 --> 00:06:11,360
the two

143
00:06:11,360 --> 00:06:13,600
um that's really critical for those who

144
00:06:13,600 --> 00:06:15,600
have actually hacked the the vehicles

145
00:06:15,600 --> 00:06:16,880
the fact that there's an exposed

146
00:06:16,880 --> 00:06:17,919
ethernet connection

147
00:06:17,919 --> 00:06:20,560
that they can tap into and inspect the

148
00:06:20,560 --> 00:06:23,680
data going back and forth

149
00:06:23,680 --> 00:06:27,680
the both of those connect to an internal

150
00:06:27,680 --> 00:06:29,360
ethernet switch that's on that central

151
00:06:29,360 --> 00:06:30,800
display of the model s

152
00:06:30,800 --> 00:06:33,919
and those connect to a security gateway

153
00:06:33,919 --> 00:06:34,240
so

154
00:06:34,240 --> 00:06:36,160
uh the security gateway is a lot like a

155
00:06:36,160 --> 00:06:37,520
vehicle firewall

156
00:06:37,520 --> 00:06:40,080
it's not as intelligent in the file it's

157
00:06:40,080 --> 00:06:42,160
more like a packet filter but an ad does

158
00:06:42,160 --> 00:06:44,400
act as a security device

159
00:06:44,400 --> 00:06:47,680
that sits between the vehicles can buses

160
00:06:47,680 --> 00:06:50,880
and the uh the infotainment and um

161
00:06:50,880 --> 00:06:52,319
basically internet connected parts of

162
00:06:52,319 --> 00:06:54,639
the vehicle itself um and then

163
00:06:54,639 --> 00:06:56,400
from there we have the various can buses

164
00:06:56,400 --> 00:06:58,240
there's the um

165
00:06:58,240 --> 00:07:00,000
other can buses for like the chassis and

166
00:07:00,000 --> 00:07:02,319
the body and a few other

167
00:07:02,319 --> 00:07:04,400
private can buses but the one we're

168
00:07:04,400 --> 00:07:05,680
really interested in for the reverse

169
00:07:05,680 --> 00:07:06,960
engineering of this project is the

170
00:07:06,960 --> 00:07:09,759
powertrain canvas that's called pt

171
00:07:09,759 --> 00:07:11,440
um mccain contains the battery

172
00:07:11,440 --> 00:07:13,599
management system the drive units which

173
00:07:13,599 --> 00:07:14,880
are basically like the motors on an

174
00:07:14,880 --> 00:07:16,479
electric car

175
00:07:16,479 --> 00:07:18,639
thermal controllers and other powertrain

176
00:07:18,639 --> 00:07:19,680
related

177
00:07:19,680 --> 00:07:21,280
charging anything that's related to the

178
00:07:21,280 --> 00:07:22,319
powertrain is connected to the

179
00:07:22,319 --> 00:07:24,479
powertrain canvas

180
00:07:24,479 --> 00:07:28,479
it's a standard bosch

181
00:07:28,479 --> 00:07:30,479
standardized can bus that runs at 500

182
00:07:30,479 --> 00:07:31,919
kilobits per second

183
00:07:31,919 --> 00:07:34,240
um uses differential signal signaling

184
00:07:34,240 --> 00:07:36,800
11-bit arbitration ids

185
00:07:36,800 --> 00:07:38,880
and does support uds that's uh really

186
00:07:38,880 --> 00:07:40,319
critical for some stuff that we're going

187
00:07:40,319 --> 00:07:41,520
to

188
00:07:41,520 --> 00:07:44,639
talk about later so uh here's some notes

189
00:07:44,639 --> 00:07:46,160
about this so this is a really good

190
00:07:46,160 --> 00:07:47,840
architecture

191
00:07:47,840 --> 00:07:50,160
if you if you follow any of the modern

192
00:07:50,160 --> 00:07:50,960
automotive

193
00:07:50,960 --> 00:07:53,360
platforms you'll know that a lot of them

194
00:07:53,360 --> 00:07:55,039
are actually implementing this

195
00:07:55,039 --> 00:07:56,720
idea of actually having a security

196
00:07:56,720 --> 00:07:59,520
gateway a security device that sits

197
00:07:59,520 --> 00:08:01,440
between the obd port the infotainment

198
00:08:01,440 --> 00:08:02,160
system

199
00:08:02,160 --> 00:08:04,080
and the various vehicle can buses this

200
00:08:04,080 --> 00:08:05,840
is uh because of some of the

201
00:08:05,840 --> 00:08:08,160
well-publicized hacks

202
00:08:08,160 --> 00:08:10,080
against vehicles where they've been

203
00:08:10,080 --> 00:08:12,000
compromised remotely over the air and

204
00:08:12,000 --> 00:08:14,160
then controlled by sending

205
00:08:14,160 --> 00:08:17,599
signals onto the can bus the security

206
00:08:17,599 --> 00:08:20,080
gateway is basically part of a

207
00:08:20,080 --> 00:08:23,440
defense in-depth strategy to

208
00:08:23,440 --> 00:08:25,520
prevent some of these attacks from from

209
00:08:25,520 --> 00:08:28,319
actually happening it acts as a

210
00:08:28,319 --> 00:08:30,240
filter between these so you cannot

211
00:08:30,240 --> 00:08:32,479
basically

212
00:08:32,479 --> 00:08:34,240
do some commands unless you're

213
00:08:34,240 --> 00:08:36,159
physically on the exact canvas that you

214
00:08:36,159 --> 00:08:37,519
need to be

215
00:08:37,519 --> 00:08:40,880
so it's a really good design but some of

216
00:08:40,880 --> 00:08:43,679
the other stuff had some issues so uh

217
00:08:43,679 --> 00:08:47,120
the tegra 4 actually had a hardware

218
00:08:47,120 --> 00:08:48,080
level flaw

219
00:08:48,080 --> 00:08:50,000
in the bootloader that was publicized

220
00:08:50,000 --> 00:08:51,600
well with a nintendo switch it's the

221
00:08:51,600 --> 00:08:52,880
exact same

222
00:08:52,880 --> 00:08:57,120
type of device so they actually switched

223
00:08:57,120 --> 00:08:59,279
a couple years ago over to an intel

224
00:08:59,279 --> 00:09:00,160
atom-based

225
00:09:00,160 --> 00:09:02,160
system and then the model 3s is

226
00:09:02,160 --> 00:09:03,680
something totally different the model 3

227
00:09:03,680 --> 00:09:04,959
uses

228
00:09:04,959 --> 00:09:06,640
intel atom and it doesn't actually have

229
00:09:06,640 --> 00:09:10,880
those uh separate devices between the um

230
00:09:10,880 --> 00:09:13,440
the the main screen and the uh the

231
00:09:13,440 --> 00:09:14,480
instrument cluster of course there's no

232
00:09:14,480 --> 00:09:16,160
instrument cluster on model 3 but on the

233
00:09:16,160 --> 00:09:18,320
newer versions of the model s

234
00:09:18,320 --> 00:09:20,399
the instrument cluster is just a display

235
00:09:20,399 --> 00:09:21,760
from the main computer it's not a

236
00:09:21,760 --> 00:09:22,560
separate

237
00:09:22,560 --> 00:09:25,680
computer entirely so there's that uh

238
00:09:25,680 --> 00:09:28,480
ethernet's no longer exposed but the the

239
00:09:28,480 --> 00:09:30,000
good advantage for that tesla has on

240
00:09:30,000 --> 00:09:30,399
this

241
00:09:30,399 --> 00:09:31,839
architecture is they can patch it over

242
00:09:31,839 --> 00:09:33,760
the air and you'll see that when someone

243
00:09:33,760 --> 00:09:36,240
has actually identifies a flaw

244
00:09:36,240 --> 00:09:38,800
you'll see the the revisions in later

245
00:09:38,800 --> 00:09:40,640
software actually take care of that

246
00:09:40,640 --> 00:09:42,399
and in some of the more recent ones

247
00:09:42,399 --> 00:09:43,680
they've actually started to do things

248
00:09:43,680 --> 00:09:44,000
like

249
00:09:44,000 --> 00:09:47,279
implement hardware encryption and

250
00:09:47,279 --> 00:09:49,760
some other capabilities that actually

251
00:09:49,760 --> 00:09:50,720
make hacking

252
00:09:50,720 --> 00:09:52,720
the the underlying linux operating

253
00:09:52,720 --> 00:09:55,519
system much more difficult

254
00:09:55,519 --> 00:09:58,880
so uh this is the hardware component of

255
00:09:58,880 --> 00:10:00,320
the battery management system this

256
00:10:00,320 --> 00:10:01,680
actually sits

257
00:10:01,680 --> 00:10:05,279
inside the battery pack on a tesla model

258
00:10:05,279 --> 00:10:06,000
s

259
00:10:06,000 --> 00:10:08,000
model three actually has this inside

260
00:10:08,000 --> 00:10:09,760
what they call the penthouse but it's

261
00:10:09,760 --> 00:10:10,480
also

262
00:10:10,480 --> 00:10:12,079
kind of inside the high voltage

263
00:10:12,079 --> 00:10:14,160
component of the of the model

264
00:10:14,160 --> 00:10:17,360
3 and it's the model 3 is also tms 320

265
00:10:17,360 --> 00:10:19,120
base but

266
00:10:19,120 --> 00:10:21,200
it's it's a little different in how they

267
00:10:21,200 --> 00:10:22,640
actually laid out their architecture

268
00:10:22,640 --> 00:10:26,399
so the main processor on this is a texas

269
00:10:26,399 --> 00:10:27,519
instruments

270
00:10:27,519 --> 00:10:30,720
dsp digital signal processor

271
00:10:30,720 --> 00:10:33,920
called the tms 320 c2809 you can see it

272
00:10:33,920 --> 00:10:36,160
is the smaller chip in this um

273
00:10:36,160 --> 00:10:37,839
sample board that i have down here that

274
00:10:37,839 --> 00:10:40,000
i got off of the salvage unit

275
00:10:40,000 --> 00:10:41,839
uh but there's also a hardware backup

276
00:10:41,839 --> 00:10:43,680
the hardware backups and altera

277
00:10:43,680 --> 00:10:47,519
come cpld complex programmable logic

278
00:10:47,519 --> 00:10:48,240
device

279
00:10:48,240 --> 00:10:49,680
it basically acts in case there's some

280
00:10:49,680 --> 00:10:51,360
type of software flaw

281
00:10:51,360 --> 00:10:53,200
that you won't have unsafe conditions

282
00:10:53,200 --> 00:10:55,120
that exist inside that battery pack so

283
00:10:55,120 --> 00:10:55,600
that

284
00:10:55,600 --> 00:10:58,640
the cpl dx is a backup and

285
00:10:58,640 --> 00:11:00,800
you'll also notice that um there's

286
00:11:00,800 --> 00:11:03,200
expose jtag that was um

287
00:11:03,200 --> 00:11:04,399
pretty interesting it's something i've

288
00:11:04,399 --> 00:11:06,399
been looking at uh it's uh

289
00:11:06,399 --> 00:11:08,399
this particular version has the jtag

290
00:11:08,399 --> 00:11:10,480
headers that i've actually attached

291
00:11:10,480 --> 00:11:13,920
but it uses a standard uh

292
00:11:13,920 --> 00:11:17,440
texas instrument style jtag connector

293
00:11:17,440 --> 00:11:20,560
which is is useful and i'll kind of

294
00:11:20,560 --> 00:11:22,480
cover that in a little bit

295
00:11:22,480 --> 00:11:23,920
but a couple of the other really

296
00:11:23,920 --> 00:11:25,040
important components of the battery

297
00:11:25,040 --> 00:11:26,320
management system

298
00:11:26,320 --> 00:11:28,079
there's a current chunk the current

299
00:11:28,079 --> 00:11:30,800
shunt is a really critical component

300
00:11:30,800 --> 00:11:32,000
that i'll kind of show you in the next

301
00:11:32,000 --> 00:11:33,839
screen that's this device

302
00:11:33,839 --> 00:11:36,160
um a shunt is used to measure current by

303
00:11:36,160 --> 00:11:37,920
uh having a known resistance and

304
00:11:37,920 --> 00:11:39,680
measuring a voltage drop across these

305
00:11:39,680 --> 00:11:40,720
two uh

306
00:11:40,720 --> 00:11:42,399
terminals that you see next to the

307
00:11:42,399 --> 00:11:44,160
contactors that

308
00:11:44,160 --> 00:11:47,120
current shunt is something that has to

309
00:11:47,120 --> 00:11:48,560
be modified for this uh

310
00:11:48,560 --> 00:11:50,959
reverse engineering work there's a

311
00:11:50,959 --> 00:11:53,200
pre-charge resistors the way it works is

312
00:11:53,200 --> 00:11:55,839
one side of the contactors opens up the

313
00:11:55,839 --> 00:11:58,320
pre-charge resistor

314
00:11:58,320 --> 00:11:59,920
slowly normalizes the voltage so we

315
00:11:59,920 --> 00:12:01,519
don't have inrush current and

316
00:12:01,519 --> 00:12:03,200
some damage from that and then the

317
00:12:03,200 --> 00:12:05,680
second side of the contactors is opened

318
00:12:05,680 --> 00:12:08,160
once the voltage is normalized across

319
00:12:08,160 --> 00:12:09,279
those

320
00:12:09,279 --> 00:12:12,240
two terminals of the contactor and then

321
00:12:12,240 --> 00:12:12,800
we have

322
00:12:12,800 --> 00:12:14,560
all these uh battery management boards

323
00:12:14,560 --> 00:12:17,200
that are uh in each of the 16

324
00:12:17,200 --> 00:12:19,680
battery modules these have lead

325
00:12:19,680 --> 00:12:22,000
resistors so that the um

326
00:12:22,000 --> 00:12:24,320
the batteries themselves the individual

327
00:12:24,320 --> 00:12:26,000
series packs of

328
00:12:26,000 --> 00:12:28,720
of batteries can be normalized and you

329
00:12:28,720 --> 00:12:30,560
can have a pretty even voltage across

330
00:12:30,560 --> 00:12:33,040
it i'm monitoring the model s it does a

331
00:12:33,040 --> 00:12:36,079
really good job of actually managing

332
00:12:36,079 --> 00:12:39,279
the the battery voltage and and keeping

333
00:12:39,279 --> 00:12:40,880
it consistent um i've

334
00:12:40,880 --> 00:12:44,959
seen at most like a tenth um one tenth

335
00:12:44,959 --> 00:12:48,240
uh sorry a .01 volts

336
00:12:48,240 --> 00:12:49,519
uh difference between any of the

337
00:12:49,519 --> 00:12:51,519
batteries it does a really good job of

338
00:12:51,519 --> 00:12:52,880
actually maintaining the

339
00:12:52,880 --> 00:12:56,320
level to keep it consistent

340
00:12:56,959 --> 00:13:00,720
so um a little bit more about the bms

341
00:13:00,720 --> 00:13:05,120
again tms 320 uses a ti created language

342
00:13:05,120 --> 00:13:06,079
it doesn't use linux

343
00:13:06,079 --> 00:13:07,680
it doesn't use anything that's that's

344
00:13:07,680 --> 00:13:09,680
basically familiar to uh

345
00:13:09,680 --> 00:13:11,360
you know someone who's hacked any other

346
00:13:11,360 --> 00:13:13,200
various operating systems it's its own

347
00:13:13,200 --> 00:13:14,480
language

348
00:13:14,480 --> 00:13:16,880
the development environment that's used

349
00:13:16,880 --> 00:13:18,560
to develop it unless you're using your

350
00:13:18,560 --> 00:13:18,880
own

351
00:13:18,880 --> 00:13:21,600
tools it's called code composer studio

352
00:13:21,600 --> 00:13:23,440
it is a free download from texas

353
00:13:23,440 --> 00:13:24,720
instruments

354
00:13:24,720 --> 00:13:26,480
and then it does have like i showed

355
00:13:26,480 --> 00:13:28,079
earlier it does have jtag

356
00:13:28,079 --> 00:13:30,160
that jtag however is protected by a

357
00:13:30,160 --> 00:13:31,680
128-bit

358
00:13:31,680 --> 00:13:33,600
code security password so you have to

359
00:13:33,600 --> 00:13:36,079
have that code security password to read

360
00:13:36,079 --> 00:13:38,000
protected areas of memory to do any of

361
00:13:38,000 --> 00:13:40,160
the other various jtag related

362
00:13:40,160 --> 00:13:43,040
functions on the unit um but the

363
00:13:43,040 --> 00:13:44,880
firmware itself is not encrypted

364
00:13:44,880 --> 00:13:46,240
it is pretty well stripped though i

365
00:13:46,240 --> 00:13:47,920
couldn't find anything useful in the

366
00:13:47,920 --> 00:13:48,560
other

367
00:13:48,560 --> 00:13:52,000
firmware hex files um but

368
00:13:52,000 --> 00:13:53,279
some people have actually been

369
00:13:53,279 --> 00:13:56,720
successful at modifying it there are

370
00:13:56,720 --> 00:13:58,399
stories out there about how people have

371
00:13:58,399 --> 00:14:00,480
increased the power on the model 3

372
00:14:00,480 --> 00:14:03,199
and then turned around and sold it uh so

373
00:14:03,199 --> 00:14:04,639
some people have actually figured this

374
00:14:04,639 --> 00:14:04,959
out

375
00:14:04,959 --> 00:14:07,360
um not on the model s the work that i

376
00:14:07,360 --> 00:14:09,040
did used

377
00:14:09,040 --> 00:14:11,279
capabilities that tesla tesla already

378
00:14:11,279 --> 00:14:13,440
did um i just managed to reverse it out

379
00:14:13,440 --> 00:14:13,839
of

380
00:14:13,839 --> 00:14:14,959
some of the other stuff that i'm gonna

381
00:14:14,959 --> 00:14:17,440
go over in a minute

382
00:14:17,440 --> 00:14:19,040
and then of course the the data sheets

383
00:14:19,040 --> 00:14:20,639
for this device they do show the layout

384
00:14:20,639 --> 00:14:22,399
in the memory map so that there's quite

385
00:14:22,399 --> 00:14:23,440
a bit of information

386
00:14:23,440 --> 00:14:25,279
you can actually get about how the

387
00:14:25,279 --> 00:14:26,720
internals of this uh

388
00:14:26,720 --> 00:14:30,000
this system work

389
00:14:30,000 --> 00:14:33,920
so a little bit about ludicrous um

390
00:14:34,399 --> 00:14:37,440
the performance model 85d was released

391
00:14:37,440 --> 00:14:38,000
uh

392
00:14:38,000 --> 00:14:41,279
in the end of 2014 but ludicrous was not

393
00:14:41,279 --> 00:14:43,120
amount announced until about six months

394
00:14:43,120 --> 00:14:44,079
later

395
00:14:44,079 --> 00:14:45,680
so they had the hardware they had it

396
00:14:45,680 --> 00:14:47,680
well out into the industry for about six

397
00:14:47,680 --> 00:14:48,480
months

398
00:14:48,480 --> 00:14:51,120
before ludacris came out and this is

399
00:14:51,120 --> 00:14:52,399
important because it actually involves

400
00:14:52,399 --> 00:14:54,000
some hardware changes

401
00:14:54,000 --> 00:14:55,839
you had to replace some contactors

402
00:14:55,839 --> 00:14:57,360
inside the battery pack that i kind of

403
00:14:57,360 --> 00:14:58,240
showed you

404
00:14:58,240 --> 00:14:59,680
in the previous screen and you had to

405
00:14:59,680 --> 00:15:02,320
replace uh the fuse for the battery pack

406
00:15:02,320 --> 00:15:03,920
itself with uh

407
00:15:03,920 --> 00:15:05,760
one that actually could fire more

408
00:15:05,760 --> 00:15:09,600
quickly they call it a pyro fuse it's um

409
00:15:09,600 --> 00:15:11,519
a component that can handle higher

410
00:15:11,519 --> 00:15:13,360
current and then separate

411
00:15:13,360 --> 00:15:15,440
the two halves of the battery more much

412
00:15:15,440 --> 00:15:17,680
more quickly

413
00:15:17,680 --> 00:15:19,279
but the really the important thing to

414
00:15:19,279 --> 00:15:20,720
notice here is ludicrous are released

415
00:15:20,720 --> 00:15:22,560
after the vehicle is released

416
00:15:22,560 --> 00:15:25,600
um and then the uh the p85d and the

417
00:15:25,600 --> 00:15:28,160
a few p99 90ds the only vehicles that

418
00:15:28,160 --> 00:15:30,800
really required hardware changes

419
00:15:30,800 --> 00:15:32,800
all the other vehicles uh to add

420
00:15:32,800 --> 00:15:34,320
ludicrous they were controlled by a

421
00:15:34,320 --> 00:15:35,360
single line

422
00:15:35,360 --> 00:15:38,399
stored on the security gateway all you

423
00:15:38,399 --> 00:15:39,279
had to do

424
00:15:39,279 --> 00:15:41,920
was you had to add the line performance

425
00:15:41,920 --> 00:15:43,040
add-on

426
00:15:43,040 --> 00:15:47,120
1 to the file internal dot dad

427
00:15:47,120 --> 00:15:51,279
then reboot the gateway and you have

428
00:15:51,279 --> 00:15:52,880
ludicrous

429
00:15:52,880 --> 00:15:55,440
there's there's no signature uh no

430
00:15:55,440 --> 00:15:57,120
encryption it's incred controlled

431
00:15:57,120 --> 00:15:58,959
entirely client-side

432
00:15:58,959 --> 00:16:01,199
um but i have been told i haven't

433
00:16:01,199 --> 00:16:02,480
observed this directly because i haven't

434
00:16:02,480 --> 00:16:04,720
really hacked on a model 3 or the

435
00:16:04,720 --> 00:16:07,839
mcu version 2 of the model s that

436
00:16:07,839 --> 00:16:08,240
they're

437
00:16:08,240 --> 00:16:10,240
using signed configurations now so this

438
00:16:10,240 --> 00:16:11,680
is no longer possible on the newer

439
00:16:11,680 --> 00:16:12,560
models

440
00:16:12,560 --> 00:16:16,079
um but on the older model s's all the

441
00:16:16,079 --> 00:16:17,920
configuration of the car is controlled

442
00:16:17,920 --> 00:16:19,440
entirely client-side

443
00:16:19,440 --> 00:16:21,120
now that's not to say that tesla doesn't

444
00:16:21,120 --> 00:16:23,279
know when you make a change

445
00:16:23,279 --> 00:16:25,199
this configuration file does get

446
00:16:25,199 --> 00:16:27,680
uploaded to tesla on a regular basis

447
00:16:27,680 --> 00:16:30,160
and i've also heard from some people

448
00:16:30,160 --> 00:16:32,160
i've spoken to

449
00:16:32,160 --> 00:16:34,880
at tesla that they get alerts when

450
00:16:34,880 --> 00:16:36,480
people change

451
00:16:36,480 --> 00:16:38,720
their

452
00:16:39,600 --> 00:16:42,639
internal dat files and they don't

453
00:16:42,639 --> 00:16:44,720
line up with what they are expecting on

454
00:16:44,720 --> 00:16:46,560
their on what they call the mothership

455
00:16:46,560 --> 00:16:48,320
side

456
00:16:48,320 --> 00:16:51,759
so uh what about the upgrade um

457
00:16:51,759 --> 00:16:53,519
the older vehicles obviously it's quite

458
00:16:53,519 --> 00:16:54,800
a bit more complicated

459
00:16:54,800 --> 00:16:56,079
you have to do hardware you have to

460
00:16:56,079 --> 00:16:58,160
modify the current shunt you have to

461
00:16:58,160 --> 00:17:00,079
re-flash firmware

462
00:17:00,079 --> 00:17:02,320
um and then finally you reconfigure the

463
00:17:02,320 --> 00:17:04,640
car at the security gateway

464
00:17:04,640 --> 00:17:06,400
so i did this on a donor vehicle this is

465
00:17:06,400 --> 00:17:08,720
the the donor vehicle up on a lift

466
00:17:08,720 --> 00:17:10,160
you can see the battery pack right in

467
00:17:10,160 --> 00:17:11,919
front of the the tires and the

468
00:17:11,919 --> 00:17:15,439
rear subframe this is the battery pack

469
00:17:15,439 --> 00:17:16,319
removed

470
00:17:16,319 --> 00:17:19,599
from the vehicle and this is the uh pyro

471
00:17:19,599 --> 00:17:21,439
fuse you see up here on the left

472
00:17:21,439 --> 00:17:24,400
and the uh the uh module with the

473
00:17:24,400 --> 00:17:27,599
battery management system on the right

474
00:17:27,599 --> 00:17:29,600
see the uh the fuse that's in the car

475
00:17:29,600 --> 00:17:31,200
right now that you see in this picture

476
00:17:31,200 --> 00:17:32,000
is actually older

477
00:17:32,000 --> 00:17:34,080
fuse before it's been removed just where

478
00:17:34,080 --> 00:17:36,720
the protective cover has been removed

479
00:17:36,720 --> 00:17:39,840
where you see the tools right there next

480
00:17:39,840 --> 00:17:40,400
we have

481
00:17:40,400 --> 00:17:44,080
a close-up of one of the contactors

482
00:17:44,080 --> 00:17:45,760
and the current shunt this is the the

483
00:17:45,760 --> 00:17:48,000
new contactor after it's been installed

484
00:17:48,000 --> 00:17:49,440
and then you can see the current shunt

485
00:17:49,440 --> 00:17:51,120
it connects right between the contactor

486
00:17:51,120 --> 00:17:51,520
and the

487
00:17:51,520 --> 00:17:54,880
the rest of the vehicle uh close up of

488
00:17:54,880 --> 00:17:57,360
the bms a little blurry apologize

489
00:17:57,360 --> 00:18:00,559
um and you can see the uh the

490
00:18:00,559 --> 00:18:02,240
headers right there for the jtag are on

491
00:18:02,240 --> 00:18:05,120
that one uh already as well

492
00:18:05,120 --> 00:18:07,280
so uh what about firmware so we've got

493
00:18:07,280 --> 00:18:09,039
the the hardware so we've got the uh

494
00:18:09,039 --> 00:18:12,240
contactors there uh we've got the the

495
00:18:12,240 --> 00:18:14,080
pyrofuse is placed here

496
00:18:14,080 --> 00:18:15,600
now we need to talk about how to do the

497
00:18:15,600 --> 00:18:17,280
firmware so

498
00:18:17,280 --> 00:18:19,600
tesla makes a diagnostic tool called

499
00:18:19,600 --> 00:18:21,200
toolbox

500
00:18:21,200 --> 00:18:25,600
toolbox is a python written

501
00:18:25,600 --> 00:18:29,120
executable that runs on windows um

502
00:18:29,120 --> 00:18:31,840
the important files within toolbox are

503
00:18:31,840 --> 00:18:33,440
contained in these

504
00:18:33,440 --> 00:18:35,440
uh files you see on the right called

505
00:18:35,440 --> 00:18:37,919
scrambles these are encrypted

506
00:18:37,919 --> 00:18:42,400
plug-ins they have the dot scramblings

507
00:18:42,400 --> 00:18:46,160
extension excuse me they're

508
00:18:46,160 --> 00:18:48,000
encrypted rest and then as they're

509
00:18:48,000 --> 00:18:49,280
needed they're decrypted as the

510
00:18:49,280 --> 00:18:51,039
application loads

511
00:18:51,039 --> 00:18:52,799
and the toolbox application was designed

512
00:18:52,799 --> 00:18:54,080
to operate standalone without a

513
00:18:54,080 --> 00:18:56,480
connection to the internet

514
00:18:56,480 --> 00:18:58,320
therefore you can reason reasonably

515
00:18:58,320 --> 00:19:00,160
believe that everything someone needs to

516
00:19:00,160 --> 00:19:02,160
decrypt these files would be contained

517
00:19:02,160 --> 00:19:03,919
on a laptop with the functioning toolbox

518
00:19:03,919 --> 00:19:05,760
executable

519
00:19:05,760 --> 00:19:06,880
you know getting the scrambles

520
00:19:06,880 --> 00:19:08,799
themselves wouldn't help you but getting

521
00:19:08,799 --> 00:19:12,160
a full image of a laptop running toolbox

522
00:19:12,160 --> 00:19:14,880
should be able to figure this out and it

523
00:19:14,880 --> 00:19:15,760
turns out it was

524
00:19:15,760 --> 00:19:18,320
relatively easy someone else actually

525
00:19:18,320 --> 00:19:19,600
did this work they just

526
00:19:19,600 --> 00:19:22,720
shared with me how to do it and then i

527
00:19:22,720 --> 00:19:24,080
proceeded to look at the individual

528
00:19:24,080 --> 00:19:26,799
files so once you decrypt the files you

529
00:19:26,799 --> 00:19:27,280
can then

530
00:19:27,280 --> 00:19:30,720
uh run a python module called uncompile

531
00:19:30,720 --> 00:19:33,440
um here is uncompile six and you

532
00:19:33,440 --> 00:19:36,000
actually see the full source code

533
00:19:36,000 --> 00:19:38,240
with full comments of the author

534
00:19:38,240 --> 00:19:39,919
absolutely everything

535
00:19:39,919 --> 00:19:42,880
um everything that you need to actually

536
00:19:42,880 --> 00:19:43,200
see

537
00:19:43,200 --> 00:19:45,280
the and follow through the various

538
00:19:45,280 --> 00:19:47,520
routines

539
00:19:47,520 --> 00:19:49,440
here we can see that here's uh some

540
00:19:49,440 --> 00:19:51,360
source code comments that actually tell

541
00:19:51,360 --> 00:19:52,000
you

542
00:19:52,000 --> 00:19:55,520
how it works tells you okay

543
00:19:55,520 --> 00:19:57,520
the first verify the vehicle can be

544
00:19:57,520 --> 00:19:59,760
configured for the desired config

545
00:19:59,760 --> 00:20:01,520
for ludicrous mode the vehicle needs to

546
00:20:01,520 --> 00:20:03,360
be all-wheel drive and have a battery

547
00:20:03,360 --> 00:20:04,080
pack config

548
00:20:04,080 --> 00:20:07,360
supports 1500 amps plus current

549
00:20:07,360 --> 00:20:09,120
discharge

550
00:20:09,120 --> 00:20:11,360
so this is actually the routine to

551
00:20:11,360 --> 00:20:12,799
change the performance add-on

552
00:20:12,799 --> 00:20:14,559
instead of doing it manually at the file

553
00:20:14,559 --> 00:20:17,760
it's a toolbox routine to change it

554
00:20:17,760 --> 00:20:20,000
but within these toolbox files there are

555
00:20:20,000 --> 00:20:22,240
also all these variables so you can see

556
00:20:22,240 --> 00:20:25,840
their qt resources

557
00:20:25,840 --> 00:20:28,720
data name and structure you can extract

558
00:20:28,720 --> 00:20:29,919
these out

559
00:20:29,919 --> 00:20:32,000
and then from there run bin walk against

560
00:20:32,000 --> 00:20:33,280
them

561
00:20:33,280 --> 00:20:36,960
once you do that you can actually

562
00:20:36,960 --> 00:20:40,960
take that binary data and extract

563
00:20:40,960 --> 00:20:43,600
even more information including firmware

564
00:20:43,600 --> 00:20:45,679
so the firmware itself

565
00:20:45,679 --> 00:20:48,960
for all the information that you need

566
00:20:48,960 --> 00:20:51,280
was actually stored within the toolbox

567
00:20:51,280 --> 00:20:53,200
executable

568
00:20:53,200 --> 00:20:56,000
and this is uh so hw id that's the

569
00:20:56,000 --> 00:20:58,640
battery pack id from 57 to 70

570
00:20:58,640 --> 00:21:01,120
this right here tells you how to change

571
00:21:01,120 --> 00:21:02,799
a battery pack to support ludicrous

572
00:21:02,799 --> 00:21:04,159
power

573
00:21:04,159 --> 00:21:06,080
you need these three files and it tells

574
00:21:06,080 --> 00:21:08,480
you exactly where they are

575
00:21:08,480 --> 00:21:10,720
you need this gateway application to

576
00:21:10,720 --> 00:21:12,400
calibrate the shunt

577
00:21:12,400 --> 00:21:16,720
you need a bootloader updater file and

578
00:21:16,720 --> 00:21:18,240
then you need the bootloader itself with

579
00:21:18,240 --> 00:21:20,400
the new hardware id

580
00:21:20,400 --> 00:21:21,760
and the source code comments told me

581
00:21:21,760 --> 00:21:24,720
exactly what i needed

582
00:21:24,799 --> 00:21:27,440
so um a little bit about this obviously

583
00:21:27,440 --> 00:21:29,679
leaving source code comments in place

584
00:21:29,679 --> 00:21:32,159
and then compiling uh there's a security

585
00:21:32,159 --> 00:21:34,000
flaw there

586
00:21:34,000 --> 00:21:35,760
leaving the bootloader firmware embedded

587
00:21:35,760 --> 00:21:38,080
in the uh executables that was probably

588
00:21:38,080 --> 00:21:39,679
something they had to do very quickly

589
00:21:39,679 --> 00:21:40,400
and

590
00:21:40,400 --> 00:21:41,840
didn't necessarily get the chance to do

591
00:21:41,840 --> 00:21:43,679
security review on i don't know i wasn't

592
00:21:43,679 --> 00:21:45,120
uh

593
00:21:45,120 --> 00:21:46,880
privy to those conversations but i

594
00:21:46,880 --> 00:21:48,480
imagine that there's there's a better

595
00:21:48,480 --> 00:21:49,679
way to do this

596
00:21:49,679 --> 00:21:52,559
rather than leaving every single copy of

597
00:21:52,559 --> 00:21:54,320
toolbox out there

598
00:21:54,320 --> 00:21:55,840
but some other stuff that's included in

599
00:21:55,840 --> 00:21:57,919
the toolbox the full dbc files so

600
00:21:57,919 --> 00:21:59,679
database can files

601
00:21:59,679 --> 00:22:01,520
were included within all these toolbox

602
00:22:01,520 --> 00:22:04,799
files as well as all the uds routines

603
00:22:04,799 --> 00:22:06,240
and then another thing that they could

604
00:22:06,240 --> 00:22:09,280
have done is using a

605
00:22:09,600 --> 00:22:12,960
application language that was something

606
00:22:12,960 --> 00:22:14,640
different than python python's very

607
00:22:14,640 --> 00:22:17,520
easily reversible if they used something

608
00:22:17,520 --> 00:22:18,000
that

609
00:22:18,000 --> 00:22:21,039
could be more easily obfuscated and then

610
00:22:21,039 --> 00:22:23,120
had stripped everything out with this

611
00:22:23,120 --> 00:22:24,400
reversing effort would have been much

612
00:22:24,400 --> 00:22:25,440
more difficult

613
00:22:25,440 --> 00:22:26,720
up to the point that it's not something

614
00:22:26,720 --> 00:22:29,760
that i would have attempted

615
00:22:30,240 --> 00:22:33,039
so uh all the instructions to actually

616
00:22:33,039 --> 00:22:35,679
upgrade this process were stored in this

617
00:22:35,679 --> 00:22:39,039
here we can actually see what's

618
00:22:39,039 --> 00:22:41,200
the pickle file that actually has the

619
00:22:41,200 --> 00:22:42,640
database can files

620
00:22:42,640 --> 00:22:44,880
there are also odx files that define how

621
00:22:44,880 --> 00:22:46,400
to calibrate the shunt

622
00:22:46,400 --> 00:22:50,240
odx is a uds format for storing

623
00:22:50,240 --> 00:22:52,880
diagnostic routines

624
00:22:52,880 --> 00:22:54,480
there were files that actually stored

625
00:22:54,480 --> 00:22:56,080
all the calibration data needed

626
00:22:56,080 --> 00:22:59,280
uh for the firmware and it was just in a

627
00:22:59,280 --> 00:23:00,720
python pickle format

628
00:23:00,720 --> 00:23:02,559
then of course there's all the uh the

629
00:23:02,559 --> 00:23:04,240
text comments and data structures that

630
00:23:04,240 --> 00:23:06,159
offer clues to the process so

631
00:23:06,159 --> 00:23:09,039
just by following the python executables

632
00:23:09,039 --> 00:23:11,200
finding the appropriate modules and

633
00:23:11,200 --> 00:23:14,480
uh reading the source code comments

634
00:23:14,480 --> 00:23:17,600
we were able to figure this out

635
00:23:17,760 --> 00:23:20,880
so for those that aren't aware of

636
00:23:20,880 --> 00:23:23,919
how can and uds work there's the can

637
00:23:23,919 --> 00:23:25,200
protocol which is like the network

638
00:23:25,200 --> 00:23:26,480
protocol itself

639
00:23:26,480 --> 00:23:29,520
but on top of can so it's actually human

640
00:23:29,520 --> 00:23:31,120
readable there's a descriptor file

641
00:23:31,120 --> 00:23:32,880
called dbc

642
00:23:32,880 --> 00:23:35,120
and then for the diagnostic routines

643
00:23:35,120 --> 00:23:36,159
there's a uh

644
00:23:36,159 --> 00:23:40,159
a scripting file in um

645
00:23:40,159 --> 00:23:45,279
h in xml sorry called odx or gmd

646
00:23:45,279 --> 00:23:46,960
so i used a commercial tool that we had

647
00:23:46,960 --> 00:23:49,120
a license for called vehicle spy

648
00:23:49,120 --> 00:23:52,000
to assist in this research identified

649
00:23:52,000 --> 00:23:54,400
that these arbitration ids 7

650
00:23:54,400 --> 00:23:57,840
echo 2 and 202 from the bms

651
00:23:57,840 --> 00:23:59,679
identify the max current as a static

652
00:23:59,679 --> 00:24:00,880
value

653
00:24:00,880 --> 00:24:04,880
and then there's uh these other ones 232

654
00:24:04,880 --> 00:24:06,480
two from the drive inverters they

655
00:24:06,480 --> 00:24:08,400
identify the max power which is a

656
00:24:08,400 --> 00:24:09,279
variable

657
00:24:09,279 --> 00:24:11,039
and it's based on state of charge

658
00:24:11,039 --> 00:24:12,480
temperature and uh

659
00:24:12,480 --> 00:24:14,080
how much power was used recently by the

660
00:24:14,080 --> 00:24:16,320
vehicle um

661
00:24:16,320 --> 00:24:19,039
this is these are some of the uh dbc

662
00:24:19,039 --> 00:24:20,480
files after they've been imported into

663
00:24:20,480 --> 00:24:22,080
vehicle spy and actually

664
00:24:22,080 --> 00:24:23,919
listening to the vehicle you can see

665
00:24:23,919 --> 00:24:25,679
where they actually take the uh

666
00:24:25,679 --> 00:24:28,960
hex values and decode them so we can see

667
00:24:28,960 --> 00:24:32,000
uh within this how how much torque how

668
00:24:32,000 --> 00:24:33,279
much motor rpm

669
00:24:33,279 --> 00:24:35,760
this is from the uh front drive inverter

670
00:24:35,760 --> 00:24:36,960
with a little bit from the uh

671
00:24:36,960 --> 00:24:38,720
the rear drive inverter di is the rear

672
00:24:38,720 --> 00:24:40,559
drive inverter gis

673
00:24:40,559 --> 00:24:43,919
is the front drive member and uh

674
00:24:43,919 --> 00:24:45,840
from these uh you just import them

675
00:24:45,840 --> 00:24:47,440
directly into vehicle spy

676
00:24:47,440 --> 00:24:49,039
if you need to edit them because you're

677
00:24:49,039 --> 00:24:51,120
uh wanting to to pair them down you can

678
00:24:51,120 --> 00:24:53,279
use a free tool called javascript or dvc

679
00:24:53,279 --> 00:24:54,799
editor

680
00:24:54,799 --> 00:24:56,799
but what dbc does is it turns this this

681
00:24:56,799 --> 00:24:58,480
is just the raw hex

682
00:24:58,480 --> 00:25:00,159
into something we can actually see and

683
00:25:00,159 --> 00:25:03,120
you can see right here uh 232

684
00:25:03,120 --> 00:25:05,919
um max regen power max discharge power

685
00:25:05,919 --> 00:25:07,440
this is before the uh

686
00:25:07,440 --> 00:25:09,360
driving mirrors are engaged this is just

687
00:25:09,360 --> 00:25:10,480
uh standing

688
00:25:10,480 --> 00:25:13,760
power 18 kilowatts but you can see how

689
00:25:13,760 --> 00:25:14,080
much

690
00:25:14,080 --> 00:25:15,760
more easier it makes to understand

691
00:25:15,760 --> 00:25:17,200
what's going on when you actually have

692
00:25:17,200 --> 00:25:18,000
these dbc

693
00:25:18,000 --> 00:25:21,520
files uh in place

694
00:25:21,520 --> 00:25:25,200
here's the dms power

695
00:25:25,200 --> 00:25:28,000
decoded this is after the upgrade was

696
00:25:28,000 --> 00:25:29,120
completed you can see

697
00:25:29,120 --> 00:25:33,120
15 16 amps 1516 amps

698
00:25:33,120 --> 00:25:35,919
and uh drive power max 200 front drive

699
00:25:35,919 --> 00:25:39,840
power max 297 kilowatts

700
00:25:41,200 --> 00:25:44,480
um this is a interesting note that i

701
00:25:44,480 --> 00:25:45,360
made

702
00:25:45,360 --> 00:25:47,840
that uh when you select ludicrous plus

703
00:25:47,840 --> 00:25:50,240
which engages the battery heating

704
00:25:50,240 --> 00:25:51,760
you can see that actually tells you that

705
00:25:51,760 --> 00:25:53,760
it's engaged the the direct signal and

706
00:25:53,760 --> 00:25:55,039
battery heating

707
00:25:55,039 --> 00:25:58,120
that immediately the power went from uh

708
00:25:58,120 --> 00:26:01,919
439 kilowatts to 452 kilowatts

709
00:26:01,919 --> 00:26:04,000
um this was just seconds after one

710
00:26:04,000 --> 00:26:05,520
another so it wasn't uh any other

711
00:26:05,520 --> 00:26:07,360
variables the the pack temperature was

712
00:26:07,360 --> 00:26:08,400
the same

713
00:26:08,400 --> 00:26:11,279
22 degrees celsius same state of charge

714
00:26:11,279 --> 00:26:12,880
uh just immediately there's more power

715
00:26:12,880 --> 00:26:14,400
available

716
00:26:14,400 --> 00:26:18,400
uh this is a uh p90 dl

717
00:26:18,400 --> 00:26:21,120
uh was just uh examining it for uh

718
00:26:21,120 --> 00:26:23,120
differences i had a friend who had one

719
00:26:23,120 --> 00:26:24,159
so we

720
00:26:24,159 --> 00:26:25,679
plugged into the can bus on that and

721
00:26:25,679 --> 00:26:27,279
just looked at how that one was a little

722
00:26:27,279 --> 00:26:30,720
bit different and we saw the same thing

723
00:26:30,720 --> 00:26:32,240
now the stated charge on this one went

724
00:26:32,240 --> 00:26:34,080
down but as the battery was heating up

725
00:26:34,080 --> 00:26:35,679
we saw that more power is available this

726
00:26:35,679 --> 00:26:38,640
one went all the way up to 480 kilowatts

727
00:26:38,640 --> 00:26:41,279
uh for the the max discharge power and

728
00:26:41,279 --> 00:26:42,640
that was at 31

729
00:26:42,640 --> 00:26:45,840
celsius from uh 22. so between 22 and 31

730
00:26:45,840 --> 00:26:47,120
celsius

731
00:26:47,120 --> 00:26:50,720
power went from 454 to 480 and even

732
00:26:50,720 --> 00:26:52,000
state of charge went down about two

733
00:26:52,000 --> 00:26:53,679
percent

734
00:26:53,679 --> 00:26:58,240
okay so uh earlier i talked about odx

735
00:26:58,240 --> 00:27:01,039
odx is the diagnostic routines and this

736
00:27:01,039 --> 00:27:01,760
particular

737
00:27:01,760 --> 00:27:05,200
uh one is what is needed to calibrate

738
00:27:05,200 --> 00:27:06,400
the shunt as well as

739
00:27:06,400 --> 00:27:10,880
do some of the other capabilities

740
00:27:10,880 --> 00:27:14,799
the ot odx routines define things like

741
00:27:14,799 --> 00:27:18,080
security access so

742
00:27:18,080 --> 00:27:19,760
one of the things that we noticed right

743
00:27:19,760 --> 00:27:21,760
away is that

744
00:27:21,760 --> 00:27:24,480
all tesla modules use a static seed and

745
00:27:24,480 --> 00:27:26,320
key for security access

746
00:27:26,320 --> 00:27:30,960
this is a a big flaw

747
00:27:31,120 --> 00:27:32,960
and actually have a little bit of a typo

748
00:27:32,960 --> 00:27:34,640
here it's actually the vehicle sends

749
00:27:34,640 --> 00:27:37,679
zero zero zero one um and then the key

750
00:27:37,679 --> 00:27:42,880
the answer to that is actually the xord

751
00:27:43,039 --> 00:27:46,720
hex 35 response to that but

752
00:27:46,720 --> 00:27:50,000
every module always sends the same seed

753
00:27:50,000 --> 00:27:52,640
it's zero one zero zero zero one all the

754
00:27:52,640 --> 00:27:55,760
way up through zero f it's it's a static

755
00:27:55,760 --> 00:27:57,600
seed and then the response is always the

756
00:27:57,600 --> 00:27:59,919
same so all you have to do is program in

757
00:27:59,919 --> 00:28:02,960
static response to the ascend

758
00:28:02,960 --> 00:28:05,200
and you are granted security access and

759
00:28:05,200 --> 00:28:07,120
you can actually see

760
00:28:07,120 --> 00:28:08,960
with the key you get a good response

761
00:28:08,960 --> 00:28:13,600
back 6706 it actually grants access

762
00:28:13,600 --> 00:28:15,760
so using vehicle spy it was actually

763
00:28:15,760 --> 00:28:17,039
trivial to set this up

764
00:28:17,039 --> 00:28:19,919
um all i did was uh set it up the

765
00:28:19,919 --> 00:28:22,559
request to send say give me a security c

766
00:28:22,559 --> 00:28:23,919
because you need to actually request the

767
00:28:23,919 --> 00:28:27,520
seed and then respond with the

768
00:28:27,520 --> 00:28:31,840
the static key

769
00:28:31,919 --> 00:28:33,600
i'm going to skip this demo right now

770
00:28:33,600 --> 00:28:35,200
because we're running kind of

771
00:28:35,200 --> 00:28:38,320
skip close on time but if you check the

772
00:28:38,320 --> 00:28:41,120
the car hacking village videos you'll be

773
00:28:41,120 --> 00:28:42,559
able to see this exact same

774
00:28:42,559 --> 00:28:45,039
routine run all i did is i imported it

775
00:28:45,039 --> 00:28:46,720
from that

776
00:28:46,720 --> 00:28:48,559
so this is just a video of that i'm

777
00:28:48,559 --> 00:28:51,440
going to skip over it

778
00:28:51,520 --> 00:28:54,880
so having a static seed

779
00:28:54,880 --> 00:28:56,960
key is the lowest possible security

780
00:28:56,960 --> 00:28:59,440
protections you can put on a component

781
00:28:59,440 --> 00:29:00,960
theoretically the module should send

782
00:29:00,960 --> 00:29:02,960
rotating seeds and then you perform some

783
00:29:02,960 --> 00:29:04,559
algorithm against it

784
00:29:04,559 --> 00:29:07,440
but in practice the seed was constant it

785
00:29:07,440 --> 00:29:10,080
was always the zero zero zero one

786
00:29:10,080 --> 00:29:12,159
and you can see that the key is just

787
00:29:12,159 --> 00:29:14,000
simply an xor operation with uh

788
00:29:14,000 --> 00:29:18,399
x35 um so zero zero zero one becomes 35

789
00:29:18,399 --> 00:29:19,440
34

790
00:29:19,440 --> 00:29:21,039
uh et cetera going all the way up

791
00:29:21,039 --> 00:29:22,480
through um

792
00:29:22,480 --> 00:29:24,799
zero f either way it's a very weak

793
00:29:24,799 --> 00:29:26,240
protective mechanism

794
00:29:26,240 --> 00:29:28,000
ideally there should be some crypto

795
00:29:28,000 --> 00:29:29,440
involved here

796
00:29:29,440 --> 00:29:31,760
involved in the module that makes this

797
00:29:31,760 --> 00:29:33,520
much more difficult

798
00:29:33,520 --> 00:29:37,120
but it's not it's static

799
00:29:37,120 --> 00:29:39,120
so uh the other thing that we had to do

800
00:29:39,120 --> 00:29:40,960
this uh the current shot itself had to

801
00:29:40,960 --> 00:29:42,559
be modified

802
00:29:42,559 --> 00:29:45,840
um there's a wire that

803
00:29:45,840 --> 00:29:49,279
connects from the shunt to the

804
00:29:49,279 --> 00:29:50,640
the backup device if you remember

805
00:29:50,640 --> 00:29:53,039
earlier i talked about the cpld

806
00:29:53,039 --> 00:29:55,360
if this wire will remain connected after

807
00:29:55,360 --> 00:29:57,120
the firmware update then the bms would

808
00:29:57,120 --> 00:29:58,480
generate alert and refuse to close the

809
00:29:58,480 --> 00:30:01,919
contactor so the car would be dead

810
00:30:02,399 --> 00:30:04,000
i found this out by running through the

811
00:30:04,000 --> 00:30:06,159
upgrade process on a bench version i got

812
00:30:06,159 --> 00:30:08,320
a bench bms i got a bench

813
00:30:08,320 --> 00:30:11,440
central display connected everything up

814
00:30:11,440 --> 00:30:13,360
ran through the firmware upgrade several

815
00:30:13,360 --> 00:30:14,720
times and then just

816
00:30:14,720 --> 00:30:16,960
monitored using the dbc files for the

817
00:30:16,960 --> 00:30:19,520
for various errors that i would see

818
00:30:19,520 --> 00:30:21,360
but what this also meant that is that

819
00:30:21,360 --> 00:30:22,880
once the car was up on that lift and

820
00:30:22,880 --> 00:30:25,120
those new components were put in there

821
00:30:25,120 --> 00:30:27,679
um the hardware and firmware had to be

822
00:30:27,679 --> 00:30:30,480
done at the same time

823
00:30:31,120 --> 00:30:32,880
and here is the how the shunt

824
00:30:32,880 --> 00:30:34,399
calibration itself works so we had to

825
00:30:34,399 --> 00:30:35,279
cut the wire

826
00:30:35,279 --> 00:30:36,559
then we actually had to calibrate the

827
00:30:36,559 --> 00:30:39,039
shine and

828
00:30:39,039 --> 00:30:41,840
this is the uds routine for that so we

829
00:30:41,840 --> 00:30:43,919
read data by identifier

830
00:30:43,919 --> 00:30:48,080
um and then from that we actually get

831
00:30:48,080 --> 00:30:50,799
these values we get the hardware id cgi

832
00:30:50,799 --> 00:30:51,919
1 ciu1

833
00:30:51,919 --> 00:30:54,880
the crc value and serial number then

834
00:30:54,880 --> 00:30:55,600
what happens

835
00:30:55,600 --> 00:30:58,960
is that serial number is

836
00:30:58,960 --> 00:31:02,320
red from the pickle file and

837
00:31:02,320 --> 00:31:05,440
the cgi 1 cau 1 values are replaced

838
00:31:05,440 --> 00:31:07,279
along with the new crc

839
00:31:07,279 --> 00:31:11,039
and it actually writes that data

840
00:31:11,039 --> 00:31:15,279
to as a routine control as a

841
00:31:15,279 --> 00:31:20,320
31 uds response so uh after that's done

842
00:31:20,320 --> 00:31:22,880
um it's written like the shunt's been

843
00:31:22,880 --> 00:31:24,799
recalibrated from there

844
00:31:24,799 --> 00:31:27,039
the firmware can be reprogrammed uh

845
00:31:27,039 --> 00:31:27,840
again

846
00:31:27,840 --> 00:31:29,760
i'm gonna skip over this one uh car

847
00:31:29,760 --> 00:31:31,120
hacking village video

848
00:31:31,120 --> 00:31:33,600
i'll make sure that we link that at the

849
00:31:33,600 --> 00:31:34,799
end of this chat

850
00:31:34,799 --> 00:31:38,799
actually has this uh same video running

851
00:31:39,200 --> 00:31:43,039
so just to give an example here are a

852
00:31:43,039 --> 00:31:44,640
bunch of the other

853
00:31:44,640 --> 00:31:46,080
odx routines that we were able to

854
00:31:46,080 --> 00:31:48,080
extract out i only needed those two i

855
00:31:48,080 --> 00:31:49,840
need the security access

856
00:31:49,840 --> 00:31:53,440
read shunt and calibrate shunt but

857
00:31:53,440 --> 00:31:56,399
there are a ton for pretty much every

858
00:31:56,399 --> 00:31:57,760
other single routine that you can

859
00:31:57,760 --> 00:31:59,760
actually run on a model s

860
00:31:59,760 --> 00:32:01,679
these are just the ones for the bms

861
00:32:01,679 --> 00:32:03,120
there are a bunch for all the other

862
00:32:03,120 --> 00:32:04,480
modules as well

863
00:32:04,480 --> 00:32:06,480
uh things from like calibrating the air

864
00:32:06,480 --> 00:32:08,640
suspension to

865
00:32:08,640 --> 00:32:12,480
um you know making modifications to

866
00:32:12,480 --> 00:32:13,679
other components that i wouldn't even

867
00:32:13,679 --> 00:32:15,360
want to contemplate unless i

868
00:32:15,360 --> 00:32:17,279
really dug into it but they were all

869
00:32:17,279 --> 00:32:19,519
stored in these odx routines

870
00:32:19,519 --> 00:32:22,000
um on the vehicle along with descriptors

871
00:32:22,000 --> 00:32:24,640
on what they were for

872
00:32:24,640 --> 00:32:29,120
uh so here uh i actually

873
00:32:29,120 --> 00:32:31,120
looked at how the uds firmware was a

874
00:32:31,120 --> 00:32:32,320
little bit different

875
00:32:32,320 --> 00:32:33,840
um yeah we got a little bit of time for

876
00:32:33,840 --> 00:32:35,919
this so we'll go ahead and cover this

877
00:32:35,919 --> 00:32:38,960
um the firmware updates are stored on

878
00:32:38,960 --> 00:32:39,919
the model s

879
00:32:39,919 --> 00:32:41,840
in a directory called deploy seed

880
00:32:41,840 --> 00:32:43,679
artifacts version two so

881
00:32:43,679 --> 00:32:45,840
a module be like dms and then id would

882
00:32:45,840 --> 00:32:48,000
be the the bms id

883
00:32:48,000 --> 00:32:50,000
and then this file right here version

884
00:32:50,000 --> 00:32:51,679
map to tsv and

885
00:32:51,679 --> 00:32:55,360
identifies the firmware file for the car

886
00:32:55,360 --> 00:32:57,200
they're all stored in hex format this is

887
00:32:57,200 --> 00:32:58,799
kind of a breakdown of how

888
00:32:58,799 --> 00:33:02,320
hex format works so we have the size and

889
00:33:02,320 --> 00:33:02,960
hex

890
00:33:02,960 --> 00:33:05,279
the address of where it goes in memory

891
00:33:05,279 --> 00:33:06,640
uh the record type

892
00:33:06,640 --> 00:33:11,840
the data and then a small checksum

893
00:33:12,960 --> 00:33:14,799
from this i was actually able to import

894
00:33:14,799 --> 00:33:16,000
it into uh

895
00:33:16,000 --> 00:33:18,960
ida pro so from this i you can actually

896
00:33:18,960 --> 00:33:19,760
see

897
00:33:19,760 --> 00:33:22,960
the address where it actually sits in

898
00:33:22,960 --> 00:33:25,760
the memory map off of the bms

899
00:33:25,760 --> 00:33:28,000
and from there i was actually able to

900
00:33:28,000 --> 00:33:30,000
import this into ida and start to look

901
00:33:30,000 --> 00:33:31,200
at it i haven't gotten very far with

902
00:33:31,200 --> 00:33:31,760
this yet

903
00:33:31,760 --> 00:33:33,679
because it uses its own assembly

904
00:33:33,679 --> 00:33:35,200
language and i'm not

905
00:33:35,200 --> 00:33:38,080
that great with assembly but it's enough

906
00:33:38,080 --> 00:33:39,679
that you can actually see the code entry

907
00:33:39,679 --> 00:33:40,159
point

908
00:33:40,159 --> 00:33:41,840
and you can actually see what's data

909
00:33:41,840 --> 00:33:44,159
versus what's code

910
00:33:44,159 --> 00:33:45,919
uh this section where it says data it's

911
00:33:45,919 --> 00:33:47,360
because memory is dual map this is

912
00:33:47,360 --> 00:33:48,159
actually

913
00:33:48,159 --> 00:33:51,200
executable code um sorry let's get back

914
00:33:51,200 --> 00:33:52,000
over this uh

915
00:33:52,000 --> 00:33:53,360
so that's not actually data that's

916
00:33:53,360 --> 00:33:55,120
executable code you can see some of the

917
00:33:55,120 --> 00:33:56,159
uh

918
00:33:56,159 --> 00:34:00,080
jumps here uh but

919
00:34:00,080 --> 00:34:02,480
one of the things i was able to notice

920
00:34:02,480 --> 00:34:03,360
is that

921
00:34:03,360 --> 00:34:06,640
in the various versions of the firmware

922
00:34:06,640 --> 00:34:09,599
there weren't that many changes this is

923
00:34:09,599 --> 00:34:10,239
uh

924
00:34:10,239 --> 00:34:12,480
two different versions of the model 70

925
00:34:12,480 --> 00:34:13,280
bms

926
00:34:13,280 --> 00:34:16,480
firmware and you can see uh just

927
00:34:16,480 --> 00:34:17,918
comparing the two

928
00:34:17,918 --> 00:34:20,879
the changes were minimal um same thing

929
00:34:20,879 --> 00:34:22,560
about the bootloader

930
00:34:22,560 --> 00:34:24,879
we have a bootloader for 57 versus the

931
00:34:24,879 --> 00:34:26,560
bootloader for 70.

932
00:34:26,560 --> 00:34:30,239
the crc changed but um

933
00:34:30,239 --> 00:34:31,760
beyond that it was just a few hex

934
00:34:31,760 --> 00:34:33,520
characters that identified

935
00:34:33,520 --> 00:34:35,599
one bootloader from another one so it's

936
00:34:35,599 --> 00:34:37,599
really really small

937
00:34:37,599 --> 00:34:39,760
amount of changes to the firmware itself

938
00:34:39,760 --> 00:34:43,119
from the various pack ids

939
00:34:43,440 --> 00:34:45,040
one of the other things i found out is

940
00:34:45,040 --> 00:34:46,560
you could take these various versions

941
00:34:46,560 --> 00:34:48,000
and actually find out where they

942
00:34:48,000 --> 00:34:51,040
sat within ida pro

943
00:34:51,040 --> 00:34:53,119
so once you basically took the hex files

944
00:34:53,119 --> 00:34:54,719
imported them in

945
00:34:54,719 --> 00:34:56,320
found the code entry point you can

946
00:34:56,320 --> 00:34:58,720
actually see where the data sat

947
00:34:58,720 --> 00:35:00,720
so i'm making some progress i just don't

948
00:35:00,720 --> 00:35:03,760
have it fully reversed yet

949
00:35:03,760 --> 00:35:07,440
um so we did the upgrade process

950
00:35:07,440 --> 00:35:09,920
flashed the bms updated the internal

951
00:35:09,920 --> 00:35:11,200
that

952
00:35:11,200 --> 00:35:14,560
redeployed the the firmware um and then

953
00:35:14,560 --> 00:35:16,880
uh drive away right no that's not what

954
00:35:16,880 --> 00:35:18,720
happened i actually had

955
00:35:18,720 --> 00:35:22,320
to tow the vehicle from

956
00:35:22,320 --> 00:35:24,320
so after we did everything it failed it

957
00:35:24,320 --> 00:35:26,400
wouldn't accept the uh the new firmware

958
00:35:26,400 --> 00:35:28,400
it started giving me errors from the bms

959
00:35:28,400 --> 00:35:30,560
had to tow the vehicle from california

960
00:35:30,560 --> 00:35:34,160
to nevada where i actually did the work

961
00:35:34,160 --> 00:35:36,640
uh wasn't terribly expensive but it

962
00:35:36,640 --> 00:35:37,920
still was painful and

963
00:35:37,920 --> 00:35:41,119
and nerve-wracking

964
00:35:41,119 --> 00:35:43,280
but we're able to get it done but what i

965
00:35:43,280 --> 00:35:45,280
figured out is that

966
00:35:45,280 --> 00:35:48,079
the gateway itself has a secondary file

967
00:35:48,079 --> 00:35:50,320
that it uses for validation

968
00:35:50,320 --> 00:35:53,520
this uh file is called firmware.rc

969
00:35:53,520 --> 00:35:55,920
i'm assuming rca is not short for crc

970
00:35:55,920 --> 00:35:56,640
because it's

971
00:35:56,640 --> 00:35:59,680
filled with csd values and the gateway

972
00:35:59,680 --> 00:36:01,520
uses this as a validation check for the

973
00:36:01,520 --> 00:36:03,359
components so if you go in

974
00:36:03,359 --> 00:36:06,079
and you put in a new drive unit that's

975
00:36:06,079 --> 00:36:07,520
running the different software the

976
00:36:07,520 --> 00:36:09,359
gateway is not going to allow the car to

977
00:36:09,359 --> 00:36:10,240
turn on

978
00:36:10,240 --> 00:36:13,359
because the firmware broadcast from that

979
00:36:13,359 --> 00:36:15,040
drive unit is going to indicate a

980
00:36:15,040 --> 00:36:17,680
different crc from what it expects

981
00:36:17,680 --> 00:36:20,720
um found some references to

982
00:36:20,720 --> 00:36:24,160
to this file in the error logs

983
00:36:24,160 --> 00:36:26,000
so i went to the gateway and i requested

984
00:36:26,000 --> 00:36:28,240
this file i noticed it

985
00:36:28,240 --> 00:36:30,960
saw the bms you can see line five here

986
00:36:30,960 --> 00:36:32,240
says the bms

987
00:36:32,240 --> 00:36:34,400
was wrong for what the actual firmware

988
00:36:34,400 --> 00:36:36,079
should have been for the vehicle

989
00:36:36,079 --> 00:36:38,320
uh so all i had to do was go in here

990
00:36:38,320 --> 00:36:41,359
replace the bms line

991
00:36:41,359 --> 00:36:46,000
recalculate the crc which is a jmc rc32

992
00:36:46,000 --> 00:36:47,760
then put the file back on the gateway

993
00:36:47,760 --> 00:36:49,920
after i did that the car woke up

994
00:36:49,920 --> 00:36:53,119
the errors cleared and we now had a

995
00:36:53,119 --> 00:36:55,440
ludicrous vehicle

996
00:36:55,440 --> 00:36:57,920
so uh here are some notes i made that's

997
00:36:57,920 --> 00:36:59,119
the power

998
00:36:59,119 --> 00:37:00,960
before and after the upgrade before it

999
00:37:00,960 --> 00:37:03,599
was 1305 amps that were available

1000
00:37:03,599 --> 00:37:06,640
after it was uh 1516.

1001
00:37:06,640 --> 00:37:08,320
for some reason uh after several

1002
00:37:08,320 --> 00:37:09,920
firmware updates it dropped down to

1003
00:37:09,920 --> 00:37:11,440
1492.

1004
00:37:11,440 --> 00:37:14,000
i i don't know why still trying to

1005
00:37:14,000 --> 00:37:15,599
figure that out i've seen other vehicles

1006
00:37:15,599 --> 00:37:17,200
that don't have that uh

1007
00:37:17,200 --> 00:37:22,400
extra you know 24 amps missing but uh

1008
00:37:22,400 --> 00:37:24,320
still it was quite a bit of an increase

1009
00:37:24,320 --> 00:37:26,320
over 1305.

1010
00:37:26,320 --> 00:37:28,720
um so it does seem possible to increase

1011
00:37:28,720 --> 00:37:30,160
speed beyond low request that's kind of

1012
00:37:30,160 --> 00:37:31,280
like the

1013
00:37:31,280 --> 00:37:33,040
the goal of the other stuff not sure

1014
00:37:33,040 --> 00:37:34,960
i'll ever actually do it on a vehicle i

1015
00:37:34,960 --> 00:37:36,880
just want to see if it can be done

1016
00:37:36,880 --> 00:37:39,280
but there's a guy out there who's

1017
00:37:39,280 --> 00:37:41,680
actually taken a rear-wheel drive p85

1018
00:37:41,680 --> 00:37:45,280
and really increased the speed uh beyond

1019
00:37:45,280 --> 00:37:47,839
what it what it should be we just need

1020
00:37:47,839 --> 00:37:49,359
to find those variables within the

1021
00:37:49,359 --> 00:37:52,720
firmware up them jump them up a bit

1022
00:37:52,720 --> 00:37:55,839
modify the crc values the problem is

1023
00:37:55,839 --> 00:37:57,920
it can be really dangerous to do so

1024
00:37:57,920 --> 00:37:59,440
these battery packs they run about

1025
00:37:59,440 --> 00:38:01,200
twenty thousand dollars

1026
00:38:01,200 --> 00:38:03,119
uh we're already dealing with pretty

1027
00:38:03,119 --> 00:38:04,720
high current drain

1028
00:38:04,720 --> 00:38:06,560
um you could end up burning up the drive

1029
00:38:06,560 --> 00:38:09,280
units igpt's which

1030
00:38:09,280 --> 00:38:11,119
is really bad you could pop cells in the

1031
00:38:11,119 --> 00:38:13,920
battery pack or worse cause a fire

1032
00:38:13,920 --> 00:38:15,200
the other thing i want to understand is

1033
00:38:15,200 --> 00:38:17,119
what those shunt parameters actually

1034
00:38:17,119 --> 00:38:20,880
do i i think cgi is something to gain

1035
00:38:20,880 --> 00:38:22,240
but i have no idea what the other one

1036
00:38:22,240 --> 00:38:24,000
does

1037
00:38:24,000 --> 00:38:27,440
uh here's some the reference material

1038
00:38:27,440 --> 00:38:28,960
some of the acknowledgements

1039
00:38:28,960 --> 00:38:31,440
uh bitbuster he allowed me to use his

1040
00:38:31,440 --> 00:38:32,400
garage

1041
00:38:32,400 --> 00:38:34,000
in rancho cucamong to actually do the

1042
00:38:34,000 --> 00:38:36,000
work and uh

1043
00:38:36,000 --> 00:38:38,800
any other information beyond that i want

1044
00:38:38,800 --> 00:38:39,920
to say thank you for

1045
00:38:39,920 --> 00:38:43,119
listening to this presentation so i know

1046
00:38:43,119 --> 00:38:44,880
we've gone over about five minutes but

1047
00:38:44,880 --> 00:38:46,720
uh

1048
00:38:46,720 --> 00:38:48,480
at this point i think we want to open it

1049
00:38:48,480 --> 00:38:51,200
up to questions

1050
00:38:51,920 --> 00:38:54,720
um hi yes thank you first for your

1051
00:38:54,720 --> 00:38:56,320
presentation

1052
00:38:56,320 --> 00:38:59,520
um we have one question asking

1053
00:38:59,520 --> 00:39:01,599
the firmware was not encrypted and not

1054
00:39:01,599 --> 00:39:04,480
digitally signed

1055
00:39:04,480 --> 00:39:08,079
uh so the firmware that's that's kind of

1056
00:39:08,079 --> 00:39:09,760
a rough question i'll try and answer

1057
00:39:09,760 --> 00:39:11,119
that in the various sections

1058
00:39:11,119 --> 00:39:13,040
the firmware for the car itself the

1059
00:39:13,040 --> 00:39:15,119
entire max firmware for the car

1060
00:39:15,119 --> 00:39:18,160
there is a signature process for that

1061
00:39:18,160 --> 00:39:20,000
there's an updater process called cid

1062
00:39:20,000 --> 00:39:22,400
updater the way it works is

1063
00:39:22,400 --> 00:39:25,280
um it checks with the tesla mothership

1064
00:39:25,280 --> 00:39:27,839
it downloads firmware onto the vehicle

1065
00:39:27,839 --> 00:39:29,359
and then it does go through a signature

1066
00:39:29,359 --> 00:39:31,200
validation

1067
00:39:31,200 --> 00:39:34,400
on older versions of the vehicle there

1068
00:39:34,400 --> 00:39:37,440
are ways around that

1069
00:39:37,520 --> 00:39:39,920
but it does actually do a signature

1070
00:39:39,920 --> 00:39:41,040
check on that

1071
00:39:41,040 --> 00:39:42,960
for the rest of it it appears to just

1072
00:39:42,960 --> 00:39:44,800
use the crc value i'm not actually

1073
00:39:44,800 --> 00:39:45,520
seeing

1074
00:39:45,520 --> 00:39:47,839
anywhere where it indicates the actual

1075
00:39:47,839 --> 00:39:49,599
like drive unit firmware

1076
00:39:49,599 --> 00:39:52,000
or bms firmware has any type of

1077
00:39:52,000 --> 00:39:52,960
signature

1078
00:39:52,960 --> 00:39:54,880
beyond the crt check that i kind of

1079
00:39:54,880 --> 00:39:56,880
covered uh near the end of the

1080
00:39:56,880 --> 00:40:00,240
presentation the gateway itself uh

1081
00:40:00,240 --> 00:40:02,000
does appear to have some checks and i

1082
00:40:02,000 --> 00:40:04,000
think newer versions of the vehicle

1083
00:40:04,000 --> 00:40:06,800
have moved towards both encrypted and

1084
00:40:06,800 --> 00:40:07,920
signed firmware

1085
00:40:07,920 --> 00:40:11,200
uh but i know unless mcu one

1086
00:40:11,200 --> 00:40:13,520
versions of the model s there's still a

1087
00:40:13,520 --> 00:40:15,119
lot of hacking that can be done there's

1088
00:40:15,119 --> 00:40:17,040
a lot of

1089
00:40:17,040 --> 00:40:18,560
ways around the various security

1090
00:40:18,560 --> 00:40:19,920
protections that are that are on the

1091
00:40:19,920 --> 00:40:22,240
vehicle

1092
00:40:23,520 --> 00:40:26,400
okay thank you are there any more

1093
00:40:26,400 --> 00:40:28,960
questions

1094
00:40:32,240 --> 00:40:35,200
okay i don't see hey let me um if i

1095
00:40:35,200 --> 00:40:36,319
could let me uh

1096
00:40:36,319 --> 00:40:38,240
get that car hacking village video real

1097
00:40:38,240 --> 00:40:39,920
quick okay sure

1098
00:40:39,920 --> 00:40:43,520
so we can include that in the chat

1099
00:40:50,839 --> 00:40:53,839
value

1100
00:40:58,720 --> 00:41:00,640
sorry i should have this book marked but

1101
00:41:00,640 --> 00:41:03,359
i don't

1102
00:41:04,839 --> 00:41:07,440
okay

1103
00:41:07,440 --> 00:41:09,920
okay

1104
00:41:11,119 --> 00:41:14,480
okay so there we go

1105
00:41:14,480 --> 00:41:17,040
that's the uh the the deep dive that

1106
00:41:17,040 --> 00:41:18,560
actually shows those exact

1107
00:41:18,560 --> 00:41:21,040
videos that are recorded of the the two

1108
00:41:21,040 --> 00:41:21,920
various um

1109
00:41:21,920 --> 00:41:24,319
uds routines actually running on a bench

1110
00:41:24,319 --> 00:41:26,720
version of the battery management system

1111
00:41:26,720 --> 00:41:29,520
so you can see those

1112
00:41:32,480 --> 00:41:34,400
okay thank you for sharing the link with

1113
00:41:34,400 --> 00:41:36,240
us yeah

1114
00:41:36,240 --> 00:41:39,759
are there any more questions

1115
00:41:41,359 --> 00:41:44,960
no i don't think so oh yeah

1116
00:41:44,960 --> 00:41:46,880
can you please explain how were you able

1117
00:41:46,880 --> 00:41:48,160
to make out

1118
00:41:48,160 --> 00:41:51,520
the uds routines

1119
00:41:52,000 --> 00:41:55,760
so how i was able to decode them

1120
00:41:56,079 --> 00:41:58,160
the uds routines were actually stored in

1121
00:41:58,160 --> 00:42:01,200
odx files within the toolbox firmware

1122
00:42:01,200 --> 00:42:03,280
those odx files could be imported into

1123
00:42:03,280 --> 00:42:04,400
vehicle spy

1124
00:42:04,400 --> 00:42:05,920
or you could if you're really good at

1125
00:42:05,920 --> 00:42:07,760
reading xml you could just decode them

1126
00:42:07,760 --> 00:42:08,640
yourself but

1127
00:42:08,640 --> 00:42:10,880
it was just a simple matter of importing

1128
00:42:10,880 --> 00:42:13,520
those odx routines into vehicle spy

1129
00:42:13,520 --> 00:42:14,960
and you can see everything you can see

1130
00:42:14,960 --> 00:42:17,280
what all the routines meant and

1131
00:42:17,280 --> 00:42:18,880
what they were meant for as well as all

1132
00:42:18,880 --> 00:42:20,880
the descriptors but they're really just

1133
00:42:20,880 --> 00:42:22,720
xml files so

1134
00:42:22,720 --> 00:42:24,240
you can kind of poke around them

1135
00:42:24,240 --> 00:42:25,760
yourself they're just

1136
00:42:25,760 --> 00:42:27,359
not as easy to read as if you import

1137
00:42:27,359 --> 00:42:29,040
them into a commercial tool that's

1138
00:42:29,040 --> 00:42:32,800
designed to run odx routines

1139
00:42:32,800 --> 00:42:35,920
does that answer your question

1140
00:42:40,880 --> 00:42:45,839
all right excellent okay

1141
00:42:46,800 --> 00:42:49,520
if there are no more questions then i

1142
00:42:49,520 --> 00:42:51,359
would like to say thank you for

1143
00:42:51,359 --> 00:42:54,720
uh having this uh webinar

1144
00:42:54,720 --> 00:42:56,720
and guys if you liked today's webinar

1145
00:42:56,720 --> 00:42:57,839
please

1146
00:42:57,839 --> 00:42:59,599
leave a feedback for us i have shared

1147
00:42:59,599 --> 00:43:01,440
the link

1148
00:43:01,440 --> 00:43:05,200
above for the or the feedback form

1149
00:43:05,200 --> 00:43:07,760
and also if you are interested in a

1150
00:43:07,760 --> 00:43:09,760
social networking session please

1151
00:43:09,760 --> 00:43:13,839
sign up for a hardware i o fix up

1152
00:43:13,839 --> 00:43:19,759
okay thank you all thank you

