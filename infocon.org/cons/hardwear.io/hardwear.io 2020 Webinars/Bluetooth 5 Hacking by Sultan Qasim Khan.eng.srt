1
00:00:02,350 --> 00:00:07,490
[Music]

2
00:00:09,380 --> 00:00:13,019
this presentation I'll be talking to you

3
00:00:13,019 --> 00:00:17,330
about changes in Bluetooth slides

4
00:00:17,330 --> 00:00:20,640
challenges that they pose to security

5
00:00:20,640 --> 00:00:24,420
researchers and I'll provide some

6
00:00:24,420 --> 00:00:27,630
guidance on examining the security of

7
00:00:27,630 --> 00:00:31,439
Bluetooth 5 devices and just developing

8
00:00:31,439 --> 00:00:34,829
security of my devices and ink as part

9
00:00:34,829 --> 00:00:38,100
of that I will also discuss previously

10
00:00:38,100 --> 00:00:41,160
developed attacks against such user

11
00:00:41,160 --> 00:00:48,750
devices so to start for those who are

12
00:00:48,750 --> 00:00:51,210
not too familiar with the different

13
00:00:51,210 --> 00:00:55,219
forms of Bluetooth Bluetooth classic and

14
00:00:55,219 --> 00:00:59,460
Bluetooth Low Energy are very distinct

15
00:00:59,460 --> 00:01:01,559
protocols that don't have a very much in

16
00:01:01,559 --> 00:01:03,930
common except for some layers the middle

17
00:01:03,930 --> 00:01:06,420
of the stack such as the host controller

18
00:01:06,420 --> 00:01:10,229
interface and l2 cap the link layer

19
00:01:10,229 --> 00:01:13,619
controlled an app tation protocol what's

20
00:01:13,619 --> 00:01:15,330
similar between the two is that they're

21
00:01:15,330 --> 00:01:18,030
both frequency hopping asbestos red

22
00:01:18,030 --> 00:01:20,640
spectrum verticals and they operate in

23
00:01:20,640 --> 00:01:23,520
the unlicensed 2.4 gigahertz band

24
00:01:23,520 --> 00:01:26,310
however the physical air is different

25
00:01:26,310 --> 00:01:29,659
they have different modulation schemes

26
00:01:29,659 --> 00:01:32,640
different bit rates different channel

27
00:01:32,640 --> 00:01:35,490
hopping schemes so the actual way that

28
00:01:35,490 --> 00:01:36,840
they are transmitted over there is

29
00:01:36,840 --> 00:01:40,290
different and also at higher layers of

30
00:01:40,290 --> 00:01:41,970
the stack off of the stack you use

31
00:01:41,970 --> 00:01:44,759
different profiles in Bluetooth le

32
00:01:44,759 --> 00:01:50,579
versus Bluetooth classic classic is most

33
00:01:50,579 --> 00:01:53,040
commonly used nowadays for audio

34
00:01:53,040 --> 00:01:56,070
streaming as well as hands-free calling

35
00:01:56,070 --> 00:02:00,829
and in automotive applications whereas

36
00:02:00,829 --> 00:02:06,000
most IOT devices make use of Bluetooth

37
00:02:06,000 --> 00:02:12,090
le both the le and classic protocols are

38
00:02:12,090 --> 00:02:14,550
part of the Bluetooth 5 standards

39
00:02:14,550 --> 00:02:17,070
both are technically maintained however

40
00:02:17,070 --> 00:02:20,580
in recent years in Bluetooth 4.1 4.2 and

41
00:02:20,580 --> 00:02:25,340
5 most of the changes have been to the

42
00:02:25,340 --> 00:02:29,700
low-energy stylus specification and as a

43
00:02:29,700 --> 00:02:33,780
result when you usually when you hear

44
00:02:33,780 --> 00:02:35,970
the term Bluetooth 5 its refers to the

45
00:02:35,970 --> 00:02:38,360
low-energy part of the specification as

46
00:02:38,360 --> 00:02:46,620
classic is largely unchanged so the

47
00:02:46,620 --> 00:02:48,660
low-energy form of Bluetooth was

48
00:02:48,660 --> 00:02:51,260
originally introduced in 2010 and

49
00:02:51,260 --> 00:02:54,090
originally it was meant as a low powered

50
00:02:54,090 --> 00:02:56,660
protocol for devices that do not need to

51
00:02:56,660 --> 00:03:00,630
transmit a large amount of data it

52
00:03:00,630 --> 00:03:03,300
divides the 2.4 gigahertz spectrum the

53
00:03:03,300 --> 00:03:05,990
approximately 100 megahertz wideband

54
00:03:05,990 --> 00:03:09,990
into 40 channels of which channel 0 to

55
00:03:09,990 --> 00:03:14,340
36 are for data and channels 37 38 and

56
00:03:14,340 --> 00:03:18,540
39 are for advertising one thing to note

57
00:03:18,540 --> 00:03:21,420
is that the actual sequence of the

58
00:03:21,420 --> 00:03:23,810
channels is not as they're numbered

59
00:03:23,810 --> 00:03:26,520
channel 37 is the lowest frequency

60
00:03:26,520 --> 00:03:29,760
Channel then you have data channels for

61
00:03:29,760 --> 00:03:32,550
remember correctly 0 to 12 then in the

62
00:03:32,550 --> 00:03:34,530
middle you have channel 38 for

63
00:03:34,530 --> 00:03:38,390
advertising and then you have channels

64
00:03:38,390 --> 00:03:42,570
13 to 30 6 and finally 39 is the highest

65
00:03:42,570 --> 00:03:46,709
frequency they just grouped the channel

66
00:03:46,709 --> 00:03:49,220
numbers based on their usage for

67
00:03:49,220 --> 00:03:53,250
convenience in this specification at

68
00:03:53,250 --> 00:03:55,680
upper layers of the stack communications

69
00:03:55,680 --> 00:03:59,540
are built on the gap protocol which is a

70
00:03:59,540 --> 00:04:03,600
generic attribute protocol and in GATT a

71
00:04:03,600 --> 00:04:07,290
GATT server will define a number of

72
00:04:07,290 --> 00:04:10,170
characteristics that a GATT client can

73
00:04:10,170 --> 00:04:13,350
read/write to or also subscribe to

74
00:04:13,350 --> 00:04:19,640
notifications on changes in Bluetooth

75
00:04:19,640 --> 00:04:20,910
4.0

76
00:04:20,910 --> 00:04:23,790
for point one the pairing process was

77
00:04:23,790 --> 00:04:27,660
rather weak you know used symmetric key

78
00:04:27,660 --> 00:04:30,750
exchange for establishing the long term

79
00:04:30,750 --> 00:04:32,760
key and there were been attacks

80
00:04:32,760 --> 00:04:34,320
published against it which I'll discuss

81
00:04:34,320 --> 00:04:39,660
later in Bluetooth 4.2 there was a new

82
00:04:39,660 --> 00:04:43,140
more secure parry process based on the

83
00:04:43,140 --> 00:04:45,810
elective elliptic curve diffie-hellman

84
00:04:45,810 --> 00:04:51,240
key exchange and this prevented the old

85
00:04:51,240 --> 00:04:53,630
attacks that a passive sniffer could do

86
00:04:53,630 --> 00:04:59,060
in Bluetooth 4.2 they also added a

87
00:04:59,060 --> 00:05:02,250
feature known as data length extension

88
00:05:02,250 --> 00:05:07,520
which extended the maximum size of

89
00:05:07,520 --> 00:05:11,550
message over the air from I remember 30

90
00:05:11,550 --> 00:05:17,040
bytes now to the full 255 or 256 bytes I

91
00:05:17,040 --> 00:05:21,240
think it's 255 so this greatly improved

92
00:05:21,240 --> 00:05:23,010
the efficiency and throughput of the

93
00:05:23,010 --> 00:05:26,610
protocol and then in Bluetooth 5 they

94
00:05:26,610 --> 00:05:28,980
added a number of new 5 modes including

95
00:05:28,980 --> 00:05:31,740
a 2 megabit Phi and this 2 megabyte

96
00:05:31,740 --> 00:05:33,780
fight together with day like length

97
00:05:33,780 --> 00:05:36,660
extension has greatly increased the

98
00:05:36,660 --> 00:05:40,440
throughput of Bluetooth le compared to

99
00:05:40,440 --> 00:05:42,780
what it was when was originally released

100
00:05:42,780 --> 00:05:48,180
and another reason why people often

101
00:05:48,180 --> 00:05:50,880
refer to bluetooth 5 when omit the word

102
00:05:50,880 --> 00:05:53,070
slow energy is that it's no longer

103
00:05:53,070 --> 00:05:56,130
restricted to low power low throughput

104
00:05:56,130 --> 00:06:00,080
applications the throughput of Bluetooth

105
00:06:00,080 --> 00:06:04,800
5 the low energy version is pretty

106
00:06:04,800 --> 00:06:07,680
comparable to Bluetooth classic now so

107
00:06:07,680 --> 00:06:11,430
you can use it largely for anything it's

108
00:06:11,430 --> 00:06:15,300
the only reason that the classic

109
00:06:15,300 --> 00:06:18,560
profiles are used for audio

110
00:06:18,560 --> 00:06:21,270
communications is that there's there's a

111
00:06:21,270 --> 00:06:22,950
huge number of existing devices that

112
00:06:22,950 --> 00:06:25,169
make use of them and they suppose I did

113
00:06:25,169 --> 00:06:28,729
not want to reinvent the wheel

114
00:06:30,889 --> 00:06:33,509
so most of the changes in the Bluetooth

115
00:06:33,509 --> 00:06:35,610
5 spec as I mentioned earlier are in the

116
00:06:35,610 --> 00:06:37,729
low-energy science so this presentation

117
00:06:37,729 --> 00:06:41,429
will focus on the low-energy side of the

118
00:06:41,429 --> 00:06:45,239
spec so one of the headline changes in

119
00:06:45,239 --> 00:06:50,849
Bluetooth 5 are the new 5 modes so 1 the

120
00:06:50,849 --> 00:06:53,909
2 megabit per second mode allows much

121
00:06:53,909 --> 00:06:58,079
higher throughput and there are also two

122
00:06:58,079 --> 00:07:03,029
new 5 modes that make use of the same 1

123
00:07:03,029 --> 00:07:04,860
megabit per second modulation as

124
00:07:04,860 --> 00:07:07,829
original but they add in forward error

125
00:07:07,829 --> 00:07:11,459
correcting codes so one variant of the

126
00:07:11,459 --> 00:07:15,360
code uses 8 times as many bits as the

127
00:07:15,360 --> 00:07:17,789
amount of data for the maximum

128
00:07:17,789 --> 00:07:19,499
redundancy so that if there are slight

129
00:07:19,499 --> 00:07:22,139
corruption of the data over the errors

130
00:07:22,139 --> 00:07:23,789
its transmitted over a long distance you

131
00:07:23,789 --> 00:07:27,449
can recover the original data and less

132
00:07:27,449 --> 00:07:30,389
heavily error corrected version is used

133
00:07:30,389 --> 00:07:32,399
approximately well it uses double the

134
00:07:32,399 --> 00:07:37,399
bits and that's the 500k coated fie

135
00:07:37,399 --> 00:07:41,039
another significant change is a new

136
00:07:41,039 --> 00:07:44,269
channel hopping algorithm in Bluetooth

137
00:07:44,269 --> 00:07:49,709
for the channel hopping and low energy

138
00:07:49,709 --> 00:07:53,699
was based on a hot increment so the next

139
00:07:53,699 --> 00:07:55,919
channel would be the previous channel

140
00:07:55,919 --> 00:07:58,889
number plus the hop increment modulo the

141
00:07:58,889 --> 00:08:01,860
number of channels in the new hopping

142
00:08:01,860 --> 00:08:04,129
algorithm introduced in Bluetooth 5

143
00:08:04,129 --> 00:08:06,659
there's a pseudo-random number generator

144
00:08:06,659 --> 00:08:08,849
that's used to compute the channel

145
00:08:08,849 --> 00:08:12,929
hopping sequence one of the biggest

146
00:08:12,929 --> 00:08:17,879
changes in Bluetooth 5 is the is a huge

147
00:08:17,879 --> 00:08:20,849
number of extensions to advertising so

148
00:08:20,849 --> 00:08:22,979
for those who don't know advertising is

149
00:08:22,979 --> 00:08:27,719
advertising is the transmission of

150
00:08:27,719 --> 00:08:31,499
unsolicited messages on advertising

151
00:08:31,499 --> 00:08:34,250
channels that

152
00:08:34,850 --> 00:08:39,890
indicate that there are that advice is

153
00:08:39,890 --> 00:08:42,500
available or that it has some

154
00:08:42,500 --> 00:08:43,580
information to share

155
00:08:43,580 --> 00:08:46,070
there are also forms of advertising that

156
00:08:46,070 --> 00:08:48,800
are directed at particular target as

157
00:08:48,800 --> 00:08:52,400
well as scan responses that can be sent

158
00:08:52,400 --> 00:08:56,330
in advertising channels but the main key

159
00:08:56,330 --> 00:08:58,310
if advertising that advertising does not

160
00:08:58,310 --> 00:09:01,190
require the establishment of a

161
00:09:01,190 --> 00:09:03,650
connection so what's new in the

162
00:09:03,650 --> 00:09:07,270
Bluetooth 5 advertising is that

163
00:09:07,270 --> 00:09:10,790
advertisements can be sent on the so

164
00:09:10,790 --> 00:09:12,650
called secondary advertising channels

165
00:09:12,650 --> 00:09:15,020
which are effectively the data channels

166
00:09:15,020 --> 00:09:20,110
and by using additional channels you can

167
00:09:20,110 --> 00:09:22,820
transmit far more data without hogging

168
00:09:22,820 --> 00:09:24,910
the three primary advertising channels

169
00:09:24,910 --> 00:09:27,820
there is also a new feature called

170
00:09:27,820 --> 00:09:31,240
periodic advertising which allows

171
00:09:31,240 --> 00:09:35,620
streaming data to a number of recipients

172
00:09:35,620 --> 00:09:39,550
without having to establish connection

173
00:09:39,550 --> 00:09:44,360
in Bluetooth 5.1 which just came out

174
00:09:44,360 --> 00:09:46,400
this year there were a few more minor

175
00:09:46,400 --> 00:09:50,840
additions most notable is known as angle

176
00:09:50,840 --> 00:09:53,390
of arrival and angle of departure

177
00:09:53,390 --> 00:09:56,570
so these either look at phase

178
00:09:56,570 --> 00:09:59,960
differences between receives messages on

179
00:09:59,960 --> 00:10:03,790
an array of antennas or you can have an

180
00:10:03,790 --> 00:10:07,850
array of antennas transmitting packets

181
00:10:07,850 --> 00:10:09,830
over the air and then the receiving

182
00:10:09,830 --> 00:10:11,300
antenna will receive the same message

183
00:10:11,300 --> 00:10:15,200
with an offset with different phases and

184
00:10:15,200 --> 00:10:19,250
from these phase offsets you can compute

185
00:10:19,250 --> 00:10:22,730
the direction in which the data came

186
00:10:22,730 --> 00:10:24,560
from so the idea behind this is that it

187
00:10:24,560 --> 00:10:27,440
can be used to improve indoor location

188
00:10:27,440 --> 00:10:30,440
the security impacts of this are fairly

189
00:10:30,440 --> 00:10:32,870
low though I suppose the data could be

190
00:10:32,870 --> 00:10:35,270
used for some privacy infringing

191
00:10:35,270 --> 00:10:38,110
applications

192
00:10:38,990 --> 00:10:42,250
the other notable change in Bluetooth

193
00:10:42,250 --> 00:10:45,470
5.1 is that they remove the requirement

194
00:10:45,470 --> 00:10:49,940
that all advertisements on the primary

195
00:10:49,940 --> 00:10:52,970
channels be sent in order of 36 37

196
00:10:52,970 --> 00:10:57,560
I started 37 38 and 39 in 5.1 the spec

197
00:10:57,560 --> 00:11:02,300
permits randomizing that order one thing

198
00:11:02,300 --> 00:11:04,220
to note is that all the changes I

199
00:11:04,220 --> 00:11:07,130
described above they are all optional in

200
00:11:07,130 --> 00:11:09,890
the Bluetooth 5 specification so it is

201
00:11:09,890 --> 00:11:13,370
possible to make a conformance Bluetooth

202
00:11:13,370 --> 00:11:15,890
5 device that supports none of these new

203
00:11:15,890 --> 00:11:19,160
features and some vendors are doing this

204
00:11:19,160 --> 00:11:20,690
just so they can say their device

205
00:11:20,690 --> 00:11:22,720
supports Bluetooth 5 even though it

206
00:11:22,720 --> 00:11:24,980
doesn't really include any of the new

207
00:11:24,980 --> 00:11:31,490
features the new Raspberry Pi force will

208
00:11:31,490 --> 00:11:33,350
do the radiance of this nature it says

209
00:11:33,350 --> 00:11:35,510
it supports Luci 5 but it supports

210
00:11:35,510 --> 00:11:41,090
hardly any of the new features so

211
00:11:41,090 --> 00:11:43,370
there's been a lot of research against

212
00:11:43,370 --> 00:11:46,760
Bluetooth low-energy over the years one

213
00:11:46,760 --> 00:11:49,010
of the most common issues you see is

214
00:11:49,010 --> 00:11:52,460
just devices and use unencrypted

215
00:11:52,460 --> 00:11:55,310
communications and if anything sensitive

216
00:11:55,310 --> 00:11:58,370
is sent unencrypted or Bluetooth then

217
00:11:58,370 --> 00:12:03,370
you can sniff it and abuse that info

218
00:12:03,370 --> 00:12:06,670
they've also been attacks against the

219
00:12:06,670 --> 00:12:09,560
legacy pairing protocol for introduced

220
00:12:09,560 --> 00:12:15,410
in Bluetooth 4.0 and 4.1 mike ryan had

221
00:12:15,410 --> 00:12:17,840
published an attack against this and

222
00:12:17,840 --> 00:12:21,970
published a tool called crackle that can

223
00:12:21,970 --> 00:12:25,700
crack the long term key when the pairing

224
00:12:25,700 --> 00:12:29,510
process has been sniffed another

225
00:12:29,510 --> 00:12:33,250
phosphate axe is the discovery and

226
00:12:33,250 --> 00:12:36,380
jamming of existing connections so this

227
00:12:36,380 --> 00:12:38,300
was originally demonstrated with the

228
00:12:38,300 --> 00:12:42,200
uber tooth and my friend Damian Koki

229
00:12:42,200 --> 00:12:47,030
also demonstrated a similar attack using

230
00:12:47,030 --> 00:12:50,920
his beetle Jack utility last year

231
00:12:50,920 --> 00:12:52,440
another attack

232
00:12:52,440 --> 00:12:55,800
they mean demonstrate last year was the

233
00:12:55,800 --> 00:12:59,610
hijacking of existing connections so in

234
00:12:59,610 --> 00:13:01,740
Bluetooth Low Energy you have a master

235
00:13:01,740 --> 00:13:03,899
that established the connection and a

236
00:13:03,899 --> 00:13:07,410
slave that was connected to and what

237
00:13:07,410 --> 00:13:09,480
beat the hijacking attacked and my

238
00:13:09,480 --> 00:13:15,240
Beatle Jack does is that it jams the

239
00:13:15,240 --> 00:13:19,069
response the slave sends to the master

240
00:13:19,069 --> 00:13:22,139
but allows the masters message to go

241
00:13:22,139 --> 00:13:24,990
through to the slave what happens when

242
00:13:24,990 --> 00:13:28,699
he does this is that the master device

243
00:13:28,699 --> 00:13:32,519
thinks it lost connection with the slave

244
00:13:32,519 --> 00:13:35,339
and the master will drop off but the

245
00:13:35,339 --> 00:13:37,259
slave thinks the master is still active

246
00:13:37,259 --> 00:13:38,490
because it kept receiving all the

247
00:13:38,490 --> 00:13:40,949
messages from the master when that

248
00:13:40,949 --> 00:13:44,430
happens and thus master drops off then

249
00:13:44,430 --> 00:13:46,230
the Beatle Jack device can impersonate

250
00:13:46,230 --> 00:13:48,360
the master and start sending its own

251
00:13:48,360 --> 00:13:52,199
messages to the slave if the connection

252
00:13:52,199 --> 00:13:54,470
is unencrypted then the map and the

253
00:13:54,470 --> 00:13:57,269
hijacking master can then send arbitrary

254
00:13:57,269 --> 00:14:02,519
messages to the slave and cause it to do

255
00:14:02,519 --> 00:14:06,360
whatever the master wants apart from

256
00:14:06,360 --> 00:14:08,459
these attacks there have also been a

257
00:14:08,459 --> 00:14:11,730
number of software flaws in looted

258
00:14:11,730 --> 00:14:15,660
stacks so one of the most high-profile

259
00:14:15,660 --> 00:14:19,740
recent years was the so-called Blue Boar

260
00:14:19,740 --> 00:14:22,769
and vulnerability this affected mainly

261
00:14:22,769 --> 00:14:24,810
Bluetooth classic but how there have

262
00:14:24,810 --> 00:14:28,259
been bugs found in in stacks like bluesy

263
00:14:28,259 --> 00:14:31,560
blue droid and or fluoride in recent

264
00:14:31,560 --> 00:14:34,350
years affecting low energy as well both

265
00:14:34,350 --> 00:14:38,360
at the l2 cat-lair as well as in the

266
00:14:38,360 --> 00:14:41,100
attribute for a call and sometimes an

267
00:14:41,100 --> 00:14:44,959
advertisement parsing as well

268
00:14:45,199 --> 00:14:48,779
finally for there are a huge number of

269
00:14:48,779 --> 00:14:50,970
devices that make use of Bluetooth Low

270
00:14:50,970 --> 00:14:53,639
Energy and sometimes they do complex

271
00:14:53,639 --> 00:14:59,009
parsing if data sent over I got so it's

272
00:14:59,009 --> 00:15:01,620
often possible we've often seen issues

273
00:15:01,620 --> 00:15:05,750
of this nature as you see of

274
00:15:06,270 --> 00:15:08,700
vulnerable parsing of data sent over

275
00:15:08,700 --> 00:15:15,630
ghat at the application layer so if you

276
00:15:15,630 --> 00:15:17,700
want to build a secure Bluetooth le

277
00:15:17,700 --> 00:15:20,150
device one thing you should do is

278
00:15:20,150 --> 00:15:23,670
require that low-energy secure

279
00:15:23,670 --> 00:15:26,190
connections are used so that the

280
00:15:26,190 --> 00:15:28,550
diffie-hellman pairing is enforced and

281
00:15:28,550 --> 00:15:31,970
then use it to encryption authentication

282
00:15:31,970 --> 00:15:35,820
communications this should be done

283
00:15:35,820 --> 00:15:39,780
unless your device has no significant

284
00:15:39,780 --> 00:15:41,750
security significance and what it does

285
00:15:41,750 --> 00:15:45,180
also one attack people don't often think

286
00:15:45,180 --> 00:15:50,340
of is that on one Bluetooth pairings are

287
00:15:50,340 --> 00:15:53,250
between devices not between applications

288
00:15:53,250 --> 00:15:56,310
so if you have a mobile phone and you're

289
00:15:56,310 --> 00:15:59,250
a product developer and your user on

290
00:15:59,250 --> 00:16:01,050
your mobile phone installed your

291
00:16:01,050 --> 00:16:03,780
legitimate app and then set up your

292
00:16:03,780 --> 00:16:05,580
device to communicate with your

293
00:16:05,580 --> 00:16:08,640
legitimate app if the user also installs

294
00:16:08,640 --> 00:16:11,160
unwittingly a malicious app that wishes

295
00:16:11,160 --> 00:16:13,620
to communicate with your device the

296
00:16:13,620 --> 00:16:15,300
malicious app would be able to do so

297
00:16:15,300 --> 00:16:16,860
since the Bluetooth pairings are

298
00:16:16,860 --> 00:16:20,100
available to all devices so if this is a

299
00:16:20,100 --> 00:16:22,590
concern of what you can do is implement

300
00:16:22,590 --> 00:16:24,960
an additional layer of encryption and

301
00:16:24,960 --> 00:16:28,350
authentication overtop of Bluetooth le

302
00:16:28,350 --> 00:16:31,620
using a key that's only available to

303
00:16:31,620 --> 00:16:37,250
your own mobile application sometimes

304
00:16:37,250 --> 00:16:43,440
we've seen many clients just use their

305
00:16:43,440 --> 00:16:46,200
own encryption overtop of Bluetooth le

306
00:16:46,200 --> 00:16:49,350
and not use bluetooths

307
00:16:49,350 --> 00:16:53,220
own encryption and this could be okay if

308
00:16:53,220 --> 00:16:54,900
they arteries implement it

309
00:16:54,900 --> 00:16:57,540
correctly but that isn't always the case

310
00:16:57,540 --> 00:17:00,510
so you need to be careful with that and

311
00:17:00,510 --> 00:17:03,960
if you want to be safest you could use

312
00:17:03,960 --> 00:17:07,440
both layers of encryption another

313
00:17:07,440 --> 00:17:10,680
important thing is patching every now

314
00:17:10,680 --> 00:17:13,160
and then mulder abilities are found in

315
00:17:13,160 --> 00:17:17,579
Bluetooth stacks both on central devices

316
00:17:17,579 --> 00:17:20,069
like mobile phones or computers

317
00:17:20,069 --> 00:17:23,430
as well as on embedded devices most of

318
00:17:23,430 --> 00:17:27,930
the mainstream Bluetooth stocks have had

319
00:17:27,930 --> 00:17:29,730
vulnerabilities found in the past few

320
00:17:29,730 --> 00:17:32,790
years to be they Nordic or TI or any of

321
00:17:32,790 --> 00:17:35,570
the other vendors so it's important to

322
00:17:35,570 --> 00:17:38,430
regularly catch your firmware when

323
00:17:38,430 --> 00:17:39,990
vulnerabilities are found in the

324
00:17:39,990 --> 00:17:45,810
Bluetooth stack you use and finally at

325
00:17:45,810 --> 00:17:49,050
the application layer whenever possible

326
00:17:49,050 --> 00:17:53,820
avoid complex parsing avoid complicated

327
00:17:53,820 --> 00:17:56,670
data structures if you can particularly

328
00:17:56,670 --> 00:17:58,590
if the parsing has to be done on an

329
00:17:58,590 --> 00:18:03,180
embedded device native C code as we've

330
00:18:03,180 --> 00:18:07,980
all seen vulnerable parsers in C and the

331
00:18:07,980 --> 00:18:09,990
less person you have to do the better in

332
00:18:09,990 --> 00:18:16,350
general and finally it's good to have a

333
00:18:16,350 --> 00:18:19,380
third party perspective on your own

334
00:18:19,380 --> 00:18:23,730
devices just to think of new attacks

335
00:18:23,730 --> 00:18:25,920
that you may not think of it's good to

336
00:18:25,920 --> 00:18:27,090
get a third party on it

337
00:18:27,090 --> 00:18:29,610
we nzc do these kind of audits all the

338
00:18:29,610 --> 00:18:32,580
time and it's good to examine not only

339
00:18:32,580 --> 00:18:34,980
your usage of Bluetooth but what the

340
00:18:34,980 --> 00:18:37,860
overall product does the architecture of

341
00:18:37,860 --> 00:18:40,650
fit communications with the back end how

342
00:18:40,650 --> 00:18:43,860
the what the mobile application does we

343
00:18:43,860 --> 00:18:47,250
do all of that and if you're developing

344
00:18:47,250 --> 00:18:49,350
a product it's it's just a good idea to

345
00:18:49,350 --> 00:18:51,360
get some extra is on its look at the

346
00:18:51,360 --> 00:18:58,170
security so moving on to challenges that

347
00:18:58,170 --> 00:19:01,770
Bluetooth 5 presents to people doing

348
00:19:01,770 --> 00:19:06,150
security research or attacks the new 5

349
00:19:06,150 --> 00:19:08,850
modes in Bluetooth 5 require hardware

350
00:19:08,850 --> 00:19:11,880
support existing tooling doesn't support

351
00:19:11,880 --> 00:19:16,320
the nude 5 modes also the new channel

352
00:19:16,320 --> 00:19:18,600
selection algorithm requires software

353
00:19:18,600 --> 00:19:21,960
support and sniffers and also it makes

354
00:19:21,960 --> 00:19:24,420
it more difficult to determine where you

355
00:19:24,420 --> 00:19:28,650
are or the hop sequence in the old hop

356
00:19:28,650 --> 00:19:30,690
sequence where it was just full channel

357
00:19:30,690 --> 00:19:32,310
plus hop increment module

358
00:19:32,310 --> 00:19:34,650
of channels it was trivial to figure out

359
00:19:34,650 --> 00:19:36,480
what would be the next channel but in a

360
00:19:36,480 --> 00:19:38,520
pseudo-random number generator it's less

361
00:19:38,520 --> 00:19:43,640
obvious what issue that's

362
00:19:43,640 --> 00:19:45,680
blade sniffer since the very beginning

363
00:19:45,680 --> 00:19:48,890
of Bluetooth five is that connection

364
00:19:48,890 --> 00:19:51,440
establishment detection is unreliable if

365
00:19:51,440 --> 00:19:53,900
you're listening and only one of the

366
00:19:53,900 --> 00:19:56,870
three primary advertising channels well

367
00:19:56,870 --> 00:20:00,020
this is why first belt sniffing with

368
00:20:00,020 --> 00:20:02,890
sniffers like the old TI sniffing or the

369
00:20:02,890 --> 00:20:07,040
Adafruit Nordic sniffer or beetle Jack

370
00:20:07,040 --> 00:20:09,200
or most of those that are on the market

371
00:20:09,200 --> 00:20:11,690
has been frustrating because these

372
00:20:11,690 --> 00:20:14,510
sniffers only support being one channel

373
00:20:14,510 --> 00:20:16,700
at a time there are some high-end

374
00:20:16,700 --> 00:20:20,090
sniffers like the alysus ones that do

375
00:20:20,090 --> 00:20:21,950
support sniffing all three channels

376
00:20:21,950 --> 00:20:23,750
simultaneously using software-defined

377
00:20:23,750 --> 00:20:26,960
radio however those are extremely

378
00:20:26,960 --> 00:20:28,970
expensive costing tens of thousands of

379
00:20:28,970 --> 00:20:34,130
dollars this is further complicated in

380
00:20:34,130 --> 00:20:37,520
Bluetooth five by the advertising

381
00:20:37,520 --> 00:20:40,180
extension so with auxiliary

382
00:20:40,180 --> 00:20:43,010
advertisements in Bluetooth 5 it's now

383
00:20:43,010 --> 00:20:46,730
possible to establish connections on the

384
00:20:46,730 --> 00:20:48,830
auxiliary channels which are the data

385
00:20:48,830 --> 00:20:52,550
channels and because of this you have to

386
00:20:52,550 --> 00:20:54,890
have a channel hopping sniffer to be

387
00:20:54,890 --> 00:20:56,690
able to capture these connection

388
00:20:56,690 --> 00:21:00,520
establishments on the data channels

389
00:21:03,140 --> 00:21:07,500
so to solve these issues first with the

390
00:21:07,500 --> 00:21:10,290
new fly modes answer is just using newer

391
00:21:10,290 --> 00:21:14,910
more capable hardware among Bluetooth

392
00:21:14,910 --> 00:21:17,490
microcontrollers the most popular brands

393
00:21:17,490 --> 00:21:20,160
are our Texas Instruments in Nordic so

394
00:21:20,160 --> 00:21:25,080
the new TI CC 13 x2 line and CC 26 x2

395
00:21:25,080 --> 00:21:28,620
line both fully support all the new five

396
00:21:28,620 --> 00:21:32,850
modes in Bluetooth 5 also the Nordic NRF

397
00:21:32,850 --> 00:21:36,660
50 to 840 supports the new 5 modes one

398
00:21:36,660 --> 00:21:41,490
thing to note is the NRF 50 to 832 which

399
00:21:41,490 --> 00:21:43,560
is a cheaper variant and also calls

400
00:21:43,560 --> 00:21:45,840
itself a Bluetooth 5 device which is

401
00:21:45,840 --> 00:21:49,050
technically true the lower models of

402
00:21:49,050 --> 00:21:52,170
Nordic like the 832 do not support the

403
00:21:52,170 --> 00:21:54,150
need 5 mode so if you were to use Nordic

404
00:21:54,150 --> 00:21:55,470
you would have to use the

405
00:21:55,470 --> 00:21:59,640
top-of-the-line 50 - 844 TI older

406
00:21:59,640 --> 00:22:01,530
Bluetooth 5 products support the new 5

407
00:22:01,530 --> 00:22:05,430
modes so sniffle which is my bluetooth

408
00:22:05,430 --> 00:22:07,230
sniffer that I'll be introducing next

409
00:22:07,230 --> 00:22:10,970
month in hardware io uses any of the ti

410
00:22:10,970 --> 00:22:14,760
microcontrollers listed about to do

411
00:22:14,760 --> 00:22:17,310
sniffing on any of the Bluetooth 5 5

412
00:22:17,310 --> 00:22:21,050
modes and sniffle can be run on low cost

413
00:22:21,050 --> 00:22:23,670
TI and Launchpad boards that are about

414
00:22:23,670 --> 00:22:30,240
40 US dollars for dealing with the new

415
00:22:30,240 --> 00:22:31,970
channel selection algorithm I

416
00:22:31,970 --> 00:22:34,710
implemented it sniffle and sniffle can

417
00:22:34,710 --> 00:22:38,550
automatically detect which channel

418
00:22:38,550 --> 00:22:40,260
hopping algorithm will be used depending

419
00:22:40,260 --> 00:22:42,740
on the relevant bits in the

420
00:22:42,740 --> 00:22:46,020
advertisement headers but one other

421
00:22:46,020 --> 00:22:48,600
challenge that the algorithm presents it

422
00:22:48,600 --> 00:22:50,970
because its pseudo-random it's non

423
00:22:50,970 --> 00:22:52,890
obvious where you are on the hopping

424
00:22:52,890 --> 00:22:56,160
sequence that made jamming or connection

425
00:22:56,160 --> 00:23:03,810
hijacking more difficult so to deal with

426
00:23:03,810 --> 00:23:06,660
this Damien coqui presented an approach

427
00:23:06,660 --> 00:23:11,790
at Def Con last week and it relies in

428
00:23:11,790 --> 00:23:14,140
the fact that the

429
00:23:14,140 --> 00:23:19,200
hoppin sequins generation it uses the

430
00:23:19,920 --> 00:23:24,310
access address of the connection to seed

431
00:23:24,310 --> 00:23:29,860
the rent RNG and then it has 60 L a

432
00:23:29,860 --> 00:23:33,160
16-bit counter that is the input to the

433
00:23:33,160 --> 00:23:37,750
RNG and as a result of this the hot

434
00:23:37,750 --> 00:23:42,240
sequence repeats after 65 526 hops

435
00:23:42,240 --> 00:23:45,040
so what Damien demoed last year was

436
00:23:45,040 --> 00:23:48,400
Nicole last week was an approach to just

437
00:23:48,400 --> 00:23:50,260
capture a bunch of measurements of

438
00:23:50,260 --> 00:23:53,230
timing between channel hops so just pick

439
00:23:53,230 --> 00:23:54,790
one channel hop to another check and

440
00:23:54,790 --> 00:23:56,530
then hop to no channel and see how long

441
00:23:56,530 --> 00:23:58,060
it takes to receive a package from one

442
00:23:58,060 --> 00:24:00,370
to the other repeat such measurements

443
00:24:00,370 --> 00:24:05,650
bunch of times and then by process of

444
00:24:05,650 --> 00:24:08,170
elimination figure out where the hop

445
00:24:08,170 --> 00:24:12,210
sequence you are and he implemented this

446
00:24:12,210 --> 00:24:15,100
approach in his beetle Jack to tool

447
00:24:15,100 --> 00:24:19,840
released last week and used it to jam

448
00:24:19,840 --> 00:24:23,590
and hijack Bluetooth 5 connections that

449
00:24:23,590 --> 00:24:26,370
are using the one megabit fight since

450
00:24:26,370 --> 00:24:30,250
his Obi Jack still operates on the old

451
00:24:30,250 --> 00:24:34,180
Nordic and r51 Harbor does not support

452
00:24:34,180 --> 00:24:40,030
the new 5 modes for dealing with the

453
00:24:40,030 --> 00:24:43,270
difficulty in connection established

454
00:24:43,270 --> 00:24:47,740
from detection sniffle hops along with

455
00:24:47,740 --> 00:24:48,610
Chandler

456
00:24:48,610 --> 00:24:51,550
along with advertisers so that they can

457
00:24:51,550 --> 00:24:53,650
detect connection establishment in any

458
00:24:53,650 --> 00:24:55,480
of the three primary advertising

459
00:24:55,480 --> 00:24:59,140
channels and that makes it nearly three

460
00:24:59,140 --> 00:25:01,480
times more reliable at connection

461
00:25:01,480 --> 00:25:04,750
detection than ordinary sniffers like

462
00:25:04,750 --> 00:25:09,180
the Adafruit sniffer or the uber tooth

463
00:25:09,180 --> 00:25:13,150
but sniffle connection detection

464
00:25:13,150 --> 00:25:15,220
reliability has gone from less than 30

465
00:25:15,220 --> 00:25:18,190
percent in these sniffers to above 90%

466
00:25:18,190 --> 00:25:21,460
so that makes sniffing much less

467
00:25:21,460 --> 00:25:24,880
frustrating the alternative to a channel

468
00:25:24,880 --> 00:25:27,550
hopping sniffer is just using

469
00:25:27,550 --> 00:25:29,200
three sniffers one on each of these

470
00:25:29,200 --> 00:25:32,890
primary advertising channels but this

471
00:25:32,890 --> 00:25:35,590
still doesn't address connection

472
00:25:35,590 --> 00:25:38,100
establishment on the auxiliary

473
00:25:38,100 --> 00:25:40,150
advertising channels that there's

474
00:25:40,150 --> 00:25:42,610
possible bluetooth five so if you want

475
00:25:42,610 --> 00:25:43,930
to capture these connection

476
00:25:43,930 --> 00:25:46,180
establishment some Bluetooth five your

477
00:25:46,180 --> 00:25:49,120
sniffer has to do channel hopping now

478
00:25:49,120 --> 00:25:51,550
one complicating factor is that in

479
00:25:51,550 --> 00:25:54,960
Bluetooth five since it permits

480
00:25:54,960 --> 00:25:57,010
randomizing the sequence in which

481
00:25:57,010 --> 00:25:58,690
advertising is done

482
00:25:58,690 --> 00:26:03,010
this makes predicting the hopping

483
00:26:03,010 --> 00:26:07,200
sequence of an advertiser possibly

484
00:26:07,200 --> 00:26:08,890
impossible depending on how its

485
00:26:08,890 --> 00:26:12,730
implemented there are no Bluetooth 5.1

486
00:26:12,730 --> 00:26:15,100
devices on the market currently and I

487
00:26:15,100 --> 00:26:17,230
don't know what vendors will do the

488
00:26:17,230 --> 00:26:19,240
randomization is optional so I don't

489
00:26:19,240 --> 00:26:21,160
know if any will actually randomize the

490
00:26:21,160 --> 00:26:24,220
order in which advertising is done but

491
00:26:24,220 --> 00:26:25,630
when that happens in the future

492
00:26:25,630 --> 00:26:28,330
we can deal with it or as a worst case

493
00:26:28,330 --> 00:26:30,100
scenario we could have three sniffers

494
00:26:30,100 --> 00:26:32,500
and button also do channel hopping for

495
00:26:32,500 --> 00:26:39,730
the auxiliary channels so supporting

496
00:26:39,730 --> 00:26:42,040
these new auxiliary advertising channels

497
00:26:42,040 --> 00:26:44,530
is also a little bit challenging because

498
00:26:44,530 --> 00:26:48,220
it requires complex channel hopping

499
00:26:48,220 --> 00:26:52,450
scheduling an advertiser doesn't just

500
00:26:52,450 --> 00:26:54,550
stay on the three primary channels or

501
00:26:54,550 --> 00:26:57,310
just the auxiliary channels advertisers

502
00:26:57,310 --> 00:26:59,800
will be transmitting advertisements on

503
00:26:59,800 --> 00:27:02,350
the primary channels and then that will

504
00:27:02,350 --> 00:27:04,450
be interleaved between advertisements

505
00:27:04,450 --> 00:27:07,960
and various channels on the

506
00:27:07,960 --> 00:27:12,970
auxiliary so because of this the precise

507
00:27:12,970 --> 00:27:15,130
timing needed and the complex scheduling

508
00:27:15,130 --> 00:27:17,380
it's non-trivial to implement

509
00:27:17,380 --> 00:27:20,500
I have not encountered any real devices

510
00:27:20,500 --> 00:27:23,260
that make use of these extended

511
00:27:23,260 --> 00:27:25,360
auxiliary advertising features in

512
00:27:25,360 --> 00:27:28,300
Bluetooth 5 however these such devices

513
00:27:28,300 --> 00:27:30,820
will probably come into existence over

514
00:27:30,820 --> 00:27:33,850
the next year or two so I'm working an

515
00:27:33,850 --> 00:27:35,950
implementing support for this in sniffle

516
00:27:35,950 --> 00:27:38,080
I may or may not have it ready for

517
00:27:38,080 --> 00:27:40,930
Hardware dire IO next month but it

518
00:27:40,930 --> 00:27:43,030
should hopefully be in sniffle not too

519
00:27:43,030 --> 00:27:49,030
long so for those who want to do some

520
00:27:49,030 --> 00:27:51,370
research from Bluetooth 5 or Bluetooth 5

521
00:27:51,370 --> 00:27:56,740
devices to capture communications HCI

522
00:27:56,740 --> 00:27:58,990
and logging is the most reliable and

523
00:27:58,990 --> 00:28:02,970
convenient approach where it's available

524
00:28:02,970 --> 00:28:05,350
this guarantees you'll capture

525
00:28:05,350 --> 00:28:06,910
everything there's no risk of missing

526
00:28:06,910 --> 00:28:10,840
connections however when you're looking

527
00:28:10,840 --> 00:28:16,870
at HDI logs be aware that the Bluetooth

528
00:28:16,870 --> 00:28:18,970
controller does some transformations

529
00:28:18,970 --> 00:28:21,730
such as encryption of the data that will

530
00:28:21,730 --> 00:28:25,300
not be seen in the HDI logs you will see

531
00:28:25,300 --> 00:28:28,810
configuration updates of the controller

532
00:28:28,810 --> 00:28:31,090
that given keys Intelli to enable

533
00:28:31,090 --> 00:28:33,400
encryption about the actual encrypted

534
00:28:33,400 --> 00:28:35,260
data you may not seen the HDI logs

535
00:28:35,260 --> 00:28:38,410
unless there's apart from an additional

536
00:28:38,410 --> 00:28:44,050
application layer decryption also if

537
00:28:44,050 --> 00:28:46,540
you're dealing with a buggy Bluetooth

538
00:28:46,540 --> 00:28:48,130
controller or just trying to

539
00:28:48,130 --> 00:28:50,650
troubleshoot a Bluetooth stack the most

540
00:28:50,650 --> 00:28:52,780
reliable way to see what actually goes

541
00:28:52,780 --> 00:28:55,570
over the air is to use it's never so if

542
00:28:55,570 --> 00:28:59,560
you want to be sure that what's going

543
00:28:59,560 --> 00:29:01,360
over the air is what you're seeing you

544
00:29:01,360 --> 00:29:03,700
should use a sniffer like sniffle also

545
00:29:03,700 --> 00:29:06,220
if you're dealing with devices or you

546
00:29:06,220 --> 00:29:07,930
don't have the ability to pull its

547
00:29:07,930 --> 00:29:09,670
dialogues and sniffers they're your only

548
00:29:09,670 --> 00:29:13,390
option and sniffle makes sniffing a lot

549
00:29:13,390 --> 00:29:17,920
less frustrating one class of

550
00:29:17,920 --> 00:29:19,420
vulnerabilities that are under

551
00:29:19,420 --> 00:29:21,790
researched our bugs in Bluetooth

552
00:29:21,790 --> 00:29:26,680
controllers it would be very interesting

553
00:29:26,680 --> 00:29:28,570
to attack a Bluetooth controller both

554
00:29:28,570 --> 00:29:32,290
from the HC CI side and the over-the-air

555
00:29:32,290 --> 00:29:37,450
side and then use that to hide malware

556
00:29:37,450 --> 00:29:40,510
for example this type of research can be

557
00:29:40,510 --> 00:29:44,140
a bit challenging because most Bluetooth

558
00:29:44,140 --> 00:29:46,510
controller firmware is proprietary and

559
00:29:46,510 --> 00:29:47,890
require quite a bit of reverse

560
00:29:47,890 --> 00:29:52,000
engineering for finding bugs and blue

561
00:29:52,000 --> 00:29:54,820
good stacks fuzzing and code review has

562
00:29:54,820 --> 00:30:00,070
been effective for years and new bugs

563
00:30:00,070 --> 00:30:02,560
are likely to continue to be found

564
00:30:02,560 --> 00:30:04,870
particularly as these stacks keep

565
00:30:04,870 --> 00:30:06,850
changing new features keep getting added

566
00:30:06,850 --> 00:30:10,600
to them bluesy and fluoride on Linux and

567
00:30:10,600 --> 00:30:13,510
Android have undergone less scrutiny

568
00:30:13,510 --> 00:30:15,700
that doesn't mean they're still no bugs

569
00:30:15,700 --> 00:30:18,760
in them but they at least had a lot of

570
00:30:18,760 --> 00:30:20,950
attention from researchers there are

571
00:30:20,950 --> 00:30:23,550
also a lot of under scrutiny stacks

572
00:30:23,550 --> 00:30:27,130
mainly those on embedded devices be the

573
00:30:27,130 --> 00:30:30,610
stacks of TIA and Nordic and Toshiba and

574
00:30:30,610 --> 00:30:34,750
brands like that as well as stacks view

575
00:30:34,750 --> 00:30:37,720
say by automotive vendors these haven't

576
00:30:37,720 --> 00:30:41,080
had enough research so there's a high

577
00:30:41,080 --> 00:30:43,510
chance that they're being bugs in them

578
00:30:43,510 --> 00:30:45,580
and some bugs have been found them but

579
00:30:45,580 --> 00:30:49,350
more research we'll probably find more

580
00:30:49,920 --> 00:30:52,150
when you're looking at Bluetooth devices

581
00:30:52,150 --> 00:30:54,460
you'll find that a huge number of

582
00:30:54,460 --> 00:30:57,610
devices just use no encryption at all

583
00:30:57,610 --> 00:30:59,890
and decide whether or not that's an

584
00:30:59,890 --> 00:31:02,140
issue you need to consider the threat

585
00:31:02,140 --> 00:31:04,720
model the device when you have an

586
00:31:04,720 --> 00:31:07,060
encrypted link the device is vulnerable

587
00:31:07,060 --> 00:31:09,880
to impersonation it's also possible to

588
00:31:09,880 --> 00:31:12,850
hijack connections and modify data sent

589
00:31:12,850 --> 00:31:15,010
to the devices so you need to think

590
00:31:15,010 --> 00:31:16,780
about what risks these pose to the

591
00:31:16,780 --> 00:31:19,780
target to decide if encryption is

592
00:31:19,780 --> 00:31:26,440
necessary custom crypto protocols

593
00:31:26,440 --> 00:31:29,260
implemented over pili commonly have

594
00:31:29,260 --> 00:31:32,050
issues we've seen many of these when you

595
00:31:32,050 --> 00:31:34,540
encounter a custom crypt implementation

596
00:31:34,540 --> 00:31:35,690
always be

597
00:31:35,690 --> 00:31:38,120
and also be careful if you're

598
00:31:38,120 --> 00:31:42,740
implementing your own it's also common

599
00:31:42,740 --> 00:31:47,769
to see insecure firmware OTA mechanisms

600
00:31:47,769 --> 00:31:50,240
used in Bluetooth Low Energy

601
00:31:50,240 --> 00:31:52,669
often these OTA mechanisms we've seen

602
00:31:52,669 --> 00:31:55,669
have no signature verification for the

603
00:31:55,669 --> 00:31:58,399
firmware at all so anyone could transmit

604
00:31:58,399 --> 00:32:01,779
malicious firmware to a ble device

605
00:32:01,779 --> 00:32:04,159
over-the-air and take control of it

606
00:32:04,159 --> 00:32:07,970
which is obviously quite bad we've also

607
00:32:07,970 --> 00:32:11,230
seen unsafe parsing of GAAP

608
00:32:11,230 --> 00:32:13,580
characteristic values at the application

609
00:32:13,580 --> 00:32:16,429
layer as well as in safe unsafe parsing

610
00:32:16,429 --> 00:32:18,850
of advertisement data and scan responses

611
00:32:18,850 --> 00:32:22,370
be careful with parsers and buzzing can

612
00:32:22,370 --> 00:32:26,480
also be a good approach to find bugs in

613
00:32:26,480 --> 00:32:28,399
Bluetooth devices when you don't have

614
00:32:28,399 --> 00:32:33,710
code available so are there any

615
00:32:33,710 --> 00:32:36,010
questions

616
00:32:36,010 --> 00:32:36,630
you

617
00:32:36,630 --> 00:32:39,880
[Music]

