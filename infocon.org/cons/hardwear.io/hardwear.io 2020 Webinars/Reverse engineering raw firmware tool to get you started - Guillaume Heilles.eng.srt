1
00:00:00,930 --> 00:00:07,180
[Music]

2
00:00:09,620 --> 00:00:13,460
welcome everyone to hardware our webinar

3
00:00:13,460 --> 00:00:16,500
today we have Guillaume who's joining us

4
00:00:16,500 --> 00:00:19,830
for the webinar Guillaume is a security

5
00:00:19,830 --> 00:00:22,140
engineer at quarks lab which is a French

6
00:00:22,140 --> 00:00:24,300
company specialized in information

7
00:00:24,300 --> 00:00:25,830
security research and development

8
00:00:25,830 --> 00:00:29,099
consulting and software development he's

9
00:00:29,099 --> 00:00:31,529
mostly focused on hardware attacks on IT

10
00:00:31,529 --> 00:00:33,870
devices but also on reverse engineering

11
00:00:33,870 --> 00:00:35,070
and exploitation

12
00:00:35,070 --> 00:00:37,770
he and his team at quarks trial has

13
00:00:37,770 --> 00:00:39,629
organized the hardware CTF at Hardware

14
00:00:39,629 --> 00:00:43,440
BIOS in 2017 and he's also a trainer of

15
00:00:43,440 --> 00:00:46,289
car hacking training which was happening

16
00:00:46,289 --> 00:00:48,180
at Hardware are your Netherlands and

17
00:00:48,180 --> 00:00:51,090
Germany for the past few years and today

18
00:00:51,090 --> 00:00:53,219
Guillaume is going to talk about a tool

19
00:00:53,219 --> 00:00:55,020
which is designed to reverse-engineer

20
00:00:55,020 --> 00:00:58,920
raw binary firmware called bin bloom so

21
00:00:58,920 --> 00:01:01,410
the presentation will take around 30 to

22
00:01:01,410 --> 00:01:03,600
40 minutes and you can ask your

23
00:01:03,600 --> 00:01:05,670
questions - ji-yong after the

24
00:01:05,670 --> 00:01:08,340
presentation for this please send your

25
00:01:08,340 --> 00:01:11,970
questions in the chat either publicly

26
00:01:11,970 --> 00:01:13,619
for everyone or you can also send the

27
00:01:13,619 --> 00:01:17,040
Guillaume chat messages privately with

28
00:01:17,040 --> 00:01:18,840
the questions and he will answer them

29
00:01:18,840 --> 00:01:23,729
after his presentation is over so be on

30
00:01:23,729 --> 00:01:24,659
the stage is yours

31
00:01:24,659 --> 00:01:31,070
please okay I'm gonna talk about

32
00:01:31,070 --> 00:01:37,290
automating your analysis today I just

33
00:01:37,290 --> 00:01:39,930
would like to share a part of my work

34
00:01:39,930 --> 00:01:43,799
and I will explain you why so my name is

35
00:01:43,799 --> 00:01:47,030
Guillaume I'm a cool head of the

36
00:01:47,030 --> 00:01:50,759
cryptographic and NBA team in quarks lab

37
00:01:50,759 --> 00:01:54,450
and I spy thought my job as a part of my

38
00:01:54,450 --> 00:02:00,950
job I do security evaluations and I

39
00:02:00,950 --> 00:02:05,040
especially work on ECU easy use which

40
00:02:05,040 --> 00:02:08,250
are computers and believe in

41
00:02:08,250 --> 00:02:13,540
in cars and as part of this job I'm even

42
00:02:13,540 --> 00:02:15,820
had the problem of analyzing robaix

43
00:02:15,820 --> 00:02:21,160
nourishing ones okay so the first time I

44
00:02:21,160 --> 00:02:24,160
had this kind of stuff to do I was I was

45
00:02:24,160 --> 00:02:25,870
just attacked like I think everybody

46
00:02:25,870 --> 00:02:29,800
else and then I learned how to do it and

47
00:02:29,800 --> 00:02:33,880
I see many people were still stuck by

48
00:02:33,880 --> 00:02:35,680
doing this kind of scene so I thought

49
00:02:35,680 --> 00:02:37,840
maybe it would be nice to share a few

50
00:02:37,840 --> 00:02:43,090
IDs to work on this kind of humans so by

51
00:02:43,090 --> 00:02:46,900
my I mean every single piece of code and

52
00:02:46,900 --> 00:02:49,120
data which you can find in a big devices

53
00:02:49,120 --> 00:02:49,870
okay

54
00:02:49,870 --> 00:02:53,920
it can be whatever it wants IP cameras

55
00:02:53,920 --> 00:02:57,820
car medical devices whatever than a MIDI

56
00:02:57,820 --> 00:03:00,880
device so okay so far the oddly enough

57
00:03:00,880 --> 00:03:03,580
today I will explain the difference

58
00:03:03,580 --> 00:03:06,280
between reversing a row binary Fame

59
00:03:06,280 --> 00:03:09,190
where and other kind of Famers know like

60
00:03:09,190 --> 00:03:10,840
the kind of few more as you can find in

61
00:03:10,840 --> 00:03:16,209
the Linux systems with F programs and ok

62
00:03:16,209 --> 00:03:17,500
so there is a big difference when you

63
00:03:17,500 --> 00:03:20,350
want to reverse row by notion and then I

64
00:03:20,350 --> 00:03:22,450
will explain tools I use and I've been

65
00:03:22,450 --> 00:03:26,370
using in specific missions for clients

66
00:03:26,370 --> 00:03:29,680
in which I do an automatic pointer

67
00:03:29,680 --> 00:03:33,220
analysis and it really helps and we'll

68
00:03:33,220 --> 00:03:38,019
use this tool to do several things the

69
00:03:38,019 --> 00:03:40,810
first and the main thing is to find the

70
00:03:40,810 --> 00:03:44,500
lower address of the row by Hardware you

71
00:03:44,500 --> 00:03:46,510
can also find a base address and you can

72
00:03:46,510 --> 00:03:48,850
find other little things like the Indian

73
00:03:48,850 --> 00:03:52,900
s of the femur which is always good good

74
00:03:52,900 --> 00:03:56,860
to know and if you are lucky to work on

75
00:03:56,860 --> 00:04:00,489
a film were coming from an ECU I was I

76
00:04:00,489 --> 00:04:04,829
will I would like to share with you a

77
00:04:04,829 --> 00:04:08,739
way I used to start working on this you

78
00:04:08,739 --> 00:04:14,290
famous okay the the training I give for

79
00:04:14,290 --> 00:04:17,289
hardware that are you about Caracara

80
00:04:17,289 --> 00:04:19,839
keying and connected car

81
00:04:19,839 --> 00:04:23,110
I go into more details about loading the

82
00:04:23,110 --> 00:04:25,450
Shamwari and finding finding this kind

83
00:04:25,450 --> 00:04:28,470
of information but I wanted to present

84
00:04:28,470 --> 00:04:33,310
this world during the webinar okay so

85
00:04:33,310 --> 00:04:34,440
[Music]

86
00:04:34,440 --> 00:04:38,080
sometimes we also called raw binary if

87
00:04:38,080 --> 00:04:40,360
you may also call them bare metal fume

88
00:04:40,360 --> 00:04:42,280
where it's approximately the same thing

89
00:04:42,280 --> 00:04:46,900
and so after at first I thought how can

90
00:04:46,900 --> 00:04:49,510
this be I mean just reversing with

91
00:04:49,510 --> 00:04:53,290
earlier reversing a nail for whatever

92
00:04:53,290 --> 00:04:55,930
your world binary mark just still

93
00:04:55,930 --> 00:04:58,810
rehearsing okay so but no in fact I was

94
00:04:58,810 --> 00:05:02,470
very wrong it's very different to to do

95
00:05:02,470 --> 00:05:04,020
that

96
00:05:04,020 --> 00:05:07,630
speaking about ECU's do is use I have a

97
00:05:07,630 --> 00:05:10,090
row binary where the answer is most of

98
00:05:10,090 --> 00:05:12,370
the time yes they do have row binder

99
00:05:12,370 --> 00:05:16,090
sham where most of utilities use like

100
00:05:16,090 --> 00:05:20,380
connected ECU if you use most of the bus

101
00:05:20,380 --> 00:05:22,860
split in two in two parts

102
00:05:22,860 --> 00:05:25,930
you have a legacy part which contains or

103
00:05:25,930 --> 00:05:29,070
a row by inertia and you have a more

104
00:05:29,070 --> 00:05:32,200
modern part with more quickie which in

105
00:05:32,200 --> 00:05:34,390
fact is most of the time immediately

106
00:05:34,390 --> 00:05:38,470
- so connect lease use have books okay

107
00:05:38,470 --> 00:05:40,720
so you see most of the time at least

108
00:05:40,720 --> 00:05:44,830
nice you use your world by version you

109
00:05:44,830 --> 00:05:47,500
know that devices like IP cameras most

110
00:05:47,500 --> 00:05:49,450
of the time you have a very linux's

111
00:05:49,450 --> 00:05:54,250
systems but you know just loading being

112
00:05:54,250 --> 00:05:57,880
able to load a few more in idea is not

113
00:05:57,880 --> 00:06:00,010
enough because our job is to find

114
00:06:00,010 --> 00:06:01,540
vulnerabilities and to do security

115
00:06:01,540 --> 00:06:04,540
assessments on them and once you've

116
00:06:04,540 --> 00:06:06,340
finished you have to start all over

117
00:06:06,340 --> 00:06:09,040
again on different ECU different few

118
00:06:09,040 --> 00:06:12,520
more lessons for so Hugh spends many

119
00:06:12,520 --> 00:06:14,170
days just trying to figure out how to

120
00:06:14,170 --> 00:06:16,780
load your firmware in either well it's

121
00:06:16,780 --> 00:06:21,850
not very effective so let's speak about

122
00:06:21,850 --> 00:06:25,930
the Linux systems first okay you can

123
00:06:25,930 --> 00:06:29,020
consider basically just like a PC in

124
00:06:29,020 --> 00:06:31,389
fact you have a microcontroller here

125
00:06:31,389 --> 00:06:33,490
which is the equivalent of your CPU you

126
00:06:33,490 --> 00:06:37,090
have a flash memory which is one to your

127
00:06:37,090 --> 00:06:40,750
SSD hard drive you have I don't know if

128
00:06:40,750 --> 00:06:42,879
the strip is RAM memory sometimes the

129
00:06:42,879 --> 00:06:45,550
RAM memory is inside you mentioned but

130
00:06:45,550 --> 00:06:47,349
well you have to make the same main

131
00:06:47,349 --> 00:06:49,569
components and as for the inputs and

132
00:06:49,569 --> 00:06:51,849
outputs you have the same thing yeah I

133
00:06:51,849 --> 00:06:54,280
mean you have a power supply you with

134
00:06:54,280 --> 00:06:57,340
the ports Ethernet ports and this is

135
00:06:57,340 --> 00:06:59,770
specific to a MIDI devices yeah you can

136
00:06:59,770 --> 00:07:03,069
have GPI euros spi bus or like that but

137
00:07:03,069 --> 00:07:07,000
globally just like a PC so what happens

138
00:07:07,000 --> 00:07:12,180
when you want to reverse a program from

139
00:07:12,180 --> 00:07:15,819
from a nobody like system it's very

140
00:07:15,819 --> 00:07:17,680
similar to doing reverse engineering on

141
00:07:17,680 --> 00:07:23,710
PC okay because the program's here I'm a

142
00:07:23,710 --> 00:07:25,930
specific format which we call the elf

143
00:07:25,930 --> 00:07:29,469
formats and in an old format you have

144
00:07:29,469 --> 00:07:31,979
many meta data and meta information

145
00:07:31,979 --> 00:07:36,159
which describe the program inside okay

146
00:07:36,159 --> 00:07:39,039
so what is the loading address what are

147
00:07:39,039 --> 00:07:43,449
the exported and imported symbols this

148
00:07:43,449 --> 00:07:48,849
kind of stuff okay and as it's directly

149
00:07:48,849 --> 00:07:51,940
to big systems you will find also debug

150
00:07:51,940 --> 00:07:54,819
symbols strings and stuff like that so

151
00:07:54,819 --> 00:07:58,029
I'll just show you so this is what you

152
00:07:58,029 --> 00:08:00,699
get an idea in the end when you load an

153
00:08:00,699 --> 00:08:05,740
elf and in fact I just loaded the binary

154
00:08:05,740 --> 00:08:08,500
from genome to the tool I'm going to

155
00:08:08,500 --> 00:08:10,960
present today and you can find here that

156
00:08:10,960 --> 00:08:14,529
Ida has been able to find many many

157
00:08:14,529 --> 00:08:17,650
function names like the main function or

158
00:08:17,650 --> 00:08:19,990
here to locate Candida but a basal

159
00:08:19,990 --> 00:08:23,409
function and here on the right pane you

160
00:08:23,409 --> 00:08:25,270
can see the disassembly of the main

161
00:08:25,270 --> 00:08:27,550
function okay so you just have to start

162
00:08:27,550 --> 00:08:30,159
your work here yo you have the entry

163
00:08:30,159 --> 00:08:32,019
points and so on so it's pretty easy I

164
00:08:32,019 --> 00:08:33,279
will just try to show you a

165
00:08:33,279 --> 00:08:39,029
demonstration if it is working correctly

166
00:08:39,029 --> 00:08:41,299
so

167
00:08:41,299 --> 00:08:50,450
yes I'll just close that program okay so

168
00:08:50,450 --> 00:08:52,850
when you start reversing a new program

169
00:08:52,850 --> 00:08:56,150
which is packed in elf formats which is

170
00:08:56,150 --> 00:08:59,090
prepared in the ad formats you just load

171
00:08:59,090 --> 00:09:01,790
it and either tells you about it's an

172
00:09:01,790 --> 00:09:06,740
elf 64 bits and it's probably almost of

173
00:09:06,740 --> 00:09:08,990
like that it will do everything by

174
00:09:08,990 --> 00:09:11,270
yourself and tada

175
00:09:11,270 --> 00:09:13,760
that's all okay and you can see your

176
00:09:13,760 --> 00:09:15,650
functions here you can find the main

177
00:09:15,650 --> 00:09:19,220
function double click on it and here I'm

178
00:09:19,220 --> 00:09:21,140
in the main function and I can start

179
00:09:21,140 --> 00:09:23,510
with reverse engineering this function

180
00:09:23,510 --> 00:09:25,640
and so on okay so you see it's pretty

181
00:09:25,640 --> 00:09:30,560
straightforward so just for the

182
00:09:30,560 --> 00:09:33,500
comparison and I will going to defer

183
00:09:33,500 --> 00:09:35,950
details afterwards when you try to load

184
00:09:35,950 --> 00:09:38,300
robaix narration well this is what

185
00:09:38,300 --> 00:09:44,270
happens you say well that's all okay I

186
00:09:44,270 --> 00:09:46,280
that tells you I don't know what it is

187
00:09:46,280 --> 00:09:48,530
because it's not well format we have no

188
00:09:48,530 --> 00:09:51,950
make a data to describe it okay so I

189
00:09:51,950 --> 00:09:54,590
will go into further details afterwards

190
00:09:54,590 --> 00:09:56,540
but you can see were stacked right from

191
00:09:56,540 --> 00:09:59,960
the beginning we have to choose many

192
00:09:59,960 --> 00:10:01,700
information like what is the

193
00:10:01,700 --> 00:10:04,010
architecture I'll just show you if we

194
00:10:04,010 --> 00:10:10,910
select PowerPC with the Union and then

195
00:10:10,910 --> 00:10:13,640
you are prompted with more information

196
00:10:13,640 --> 00:10:16,430
which are typically presents in the elf

197
00:10:16,430 --> 00:10:18,650
header like the start address the

198
00:10:18,650 --> 00:10:20,750
resection address the loading address

199
00:10:20,750 --> 00:10:23,030
and so on so I'll just consult the demo

200
00:10:23,030 --> 00:10:24,950
here okay just to show you it's pretty

201
00:10:24,950 --> 00:10:27,680
difference okay so back to the

202
00:10:27,680 --> 00:10:34,520
presentation okay one want to start this

203
00:10:34,520 --> 00:10:36,290
kind of work you have to know the

204
00:10:36,290 --> 00:10:38,090
architecture because as I showed you

205
00:10:38,090 --> 00:10:40,130
either does not know the architecture

206
00:10:40,130 --> 00:10:42,620
it's not in the header so you have to

207
00:10:42,620 --> 00:10:44,930
guess it by yourself so we left small

208
00:10:44,930 --> 00:10:47,240
cases is the earlier physical access to

209
00:10:47,240 --> 00:10:47,870
your device

210
00:10:47,870 --> 00:10:51,530
and I really advise you to just look at

211
00:10:51,530 --> 00:10:53,220
the two

212
00:10:53,220 --> 00:10:55,980
when your box or your device and look at

213
00:10:55,980 --> 00:10:59,009
the writings on your recipe okay if you

214
00:10:59,009 --> 00:11:00,870
can do that most of the time you will

215
00:11:00,870 --> 00:11:02,699
know the architecture if you can't do

216
00:11:02,699 --> 00:11:05,120
that there are several tools you can use

217
00:11:05,120 --> 00:11:11,819
like CPU reg you can use CPU right you

218
00:11:11,819 --> 00:11:14,129
can use bean watch to try and identify

219
00:11:14,129 --> 00:11:17,939
the kind of assembly instructions you

220
00:11:17,939 --> 00:11:18,899
will have in your film

221
00:11:18,899 --> 00:11:22,860
ok so here are morning CPU right this

222
00:11:22,860 --> 00:11:26,550
fumarole this file and it tells you it's

223
00:11:26,550 --> 00:11:31,199
super H as super H architecture so s H

224
00:11:31,199 --> 00:11:39,029
minus H 2 H 3 if you should stop being

225
00:11:39,029 --> 00:11:41,670
woken up with a binary it will tell you

226
00:11:41,670 --> 00:11:47,689
all these binaries and programming mode

227
00:11:47,720 --> 00:11:50,759
and this is a bad guess because as you

228
00:11:50,759 --> 00:11:52,290
can see in the name of the file I

229
00:11:52,290 --> 00:11:53,129
renamed it

230
00:11:53,129 --> 00:11:55,800
in fact it's every necessity I can make

231
00:11:55,800 --> 00:11:59,730
more than 50 architecture so you should

232
00:11:59,730 --> 00:12:02,160
be careful with these tools that's why I

233
00:12:02,160 --> 00:12:04,439
say it's better just to with the the

234
00:12:04,439 --> 00:12:08,939
markings on on CPU so yeah it works but

235
00:12:08,939 --> 00:12:13,139
sometimes it lessens ok so back to

236
00:12:13,139 --> 00:12:14,610
either you have to select the

237
00:12:14,610 --> 00:12:16,559
architecture you just guessed or read on

238
00:12:16,559 --> 00:12:19,319
your on your chip and you can select it

239
00:12:19,319 --> 00:12:22,339
if possible I said if possible because

240
00:12:22,339 --> 00:12:27,480
I'd up is the tool I know of which is

241
00:12:27,480 --> 00:12:31,860
about to load the most aki who knows the

242
00:12:31,860 --> 00:12:33,660
most architectures ok

243
00:12:33,660 --> 00:12:37,410
I mean there are other programs out

244
00:12:37,410 --> 00:12:40,430
there to do we were solution ring like

245
00:12:40,430 --> 00:12:47,059
Hydra copper Panama ninja many others

246
00:12:47,059 --> 00:12:53,430
but Ida is the most powerful for these

247
00:12:53,430 --> 00:12:57,779
devices okay this is why I use it but

248
00:12:57,779 --> 00:12:59,069
you can use basically and it hasn't

249
00:12:59,069 --> 00:12:59,970
grown as you prefer

250
00:12:59,970 --> 00:13:04,740
ok so here I select SH - either because

251
00:13:04,740 --> 00:13:06,279
I know my program is this one this

252
00:13:06,279 --> 00:13:10,300
Kotetsu and then that's where the bad

253
00:13:10,300 --> 00:13:12,430
news begin in fact because I just

254
00:13:12,430 --> 00:13:14,199
telling you you have been looting a

255
00:13:14,199 --> 00:13:17,079
binary file and I don't know the three

256
00:13:17,079 --> 00:13:19,360
points because there is no header and so

257
00:13:19,360 --> 00:13:21,220
you have to figure them out by yourself

258
00:13:21,220 --> 00:13:24,579
is so you have to put the cursor where

259
00:13:24,579 --> 00:13:26,290
you think there are code you're rescued

260
00:13:26,290 --> 00:13:28,959
and proceed you start your enemies the

261
00:13:28,959 --> 00:13:30,970
bad news is basically you don't know

262
00:13:30,970 --> 00:13:33,129
where code is and this is the whole

263
00:13:33,129 --> 00:13:35,170
thing about this presentation how to

264
00:13:35,170 --> 00:13:38,920
find a code if you continue and and

265
00:13:38,920 --> 00:13:41,829
where and press ok I will just try to

266
00:13:41,829 --> 00:13:44,350
find you goodbye myself you are at

267
00:13:44,350 --> 00:13:47,139
frontier with that I mean just a row a

268
00:13:47,139 --> 00:13:51,069
big list of bytes here and you have to

269
00:13:51,069 --> 00:13:53,559
figure by yourself work early sometimes

270
00:13:53,559 --> 00:13:57,279
just cool sometimes just data you really

271
00:13:57,279 --> 00:14:02,189
don't know so this is not really fun ok

272
00:14:02,189 --> 00:14:06,999
I'm going to just do a quick demo which

273
00:14:06,999 --> 00:14:09,100
is basically the rest of the previous

274
00:14:09,100 --> 00:14:12,430
one ok so I will just select a binary

275
00:14:12,430 --> 00:14:17,529
here and I know it's PowerPC big engines

276
00:14:17,529 --> 00:14:21,189
ok because either it's written on it or

277
00:14:21,189 --> 00:14:24,129
a friend for me or I've been using sepia

278
00:14:24,129 --> 00:14:27,550
records that by that silks PowerPC a big

279
00:14:27,550 --> 00:14:33,220
engine it's here set the CPU here and I

280
00:14:33,220 --> 00:14:34,870
don't know the loading address I will

281
00:14:34,870 --> 00:14:37,089
have to figure that out later so just

282
00:14:37,089 --> 00:14:39,639
say zero for the minutes then eyeglasses

283
00:14:39,639 --> 00:14:42,100
ok your nice words you see there can be

284
00:14:42,100 --> 00:14:44,410
many microcontrollers which one do you

285
00:14:44,410 --> 00:14:46,269
want here I don't know what you say

286
00:14:46,269 --> 00:14:50,860
obviously I just it's able to find many

287
00:14:50,860 --> 00:14:53,379
many things like IO memory at least one

288
00:14:53,379 --> 00:14:55,870
so this is good news here were from to

289
00:14:55,870 --> 00:14:57,779
the game with another question do I want

290
00:14:57,779 --> 00:15:01,120
32-bit either only you only your mix of

291
00:15:01,120 --> 00:15:03,309
both if you don't know you have to try

292
00:15:03,309 --> 00:15:09,839
and yes ok here we'll say 32 bits and

293
00:15:09,839 --> 00:15:12,999
here's the the message I really don't

294
00:15:12,999 --> 00:15:15,759
like you just let it binary file you out

295
00:15:15,759 --> 00:15:17,520
by yourself for a curry

296
00:15:17,520 --> 00:15:21,570
good luck and as you can see you just

297
00:15:21,570 --> 00:15:24,480
have many many bags here okay

298
00:15:24,480 --> 00:15:27,420
just dig little bite so if you don't

299
00:15:27,420 --> 00:15:31,440
know where the code is you can you

300
00:15:31,440 --> 00:15:33,060
cannot work on that so I will just do

301
00:15:33,060 --> 00:15:35,670
what I just said I will place my cursor

302
00:15:35,670 --> 00:15:38,220
somewhere and press C and you see

303
00:15:38,220 --> 00:15:41,400
eyeglasses make on failures

304
00:15:41,400 --> 00:15:43,770
it means here it's it's not of course

305
00:15:43,770 --> 00:15:45,780
not possible to do this on one of these

306
00:15:45,780 --> 00:15:48,420
bites so you can try again

307
00:15:48,420 --> 00:15:51,660
somewhere else and still doesn't work

308
00:15:51,660 --> 00:15:53,640
here it works okay

309
00:15:53,640 --> 00:15:55,830
maybe I was lucky maybe not I don't know

310
00:15:55,830 --> 00:15:58,830
it looks like good okay it's nice but

311
00:15:58,830 --> 00:16:01,320
really it's not worth working and as you

312
00:16:01,320 --> 00:16:04,050
can see later on still some bites okay

313
00:16:04,050 --> 00:16:06,120
so do we have to start all over again I

314
00:16:06,120 --> 00:16:09,090
can put my cursor here oh it works okay

315
00:16:09,090 --> 00:16:10,890
so really not way of working like that

316
00:16:10,890 --> 00:16:13,740
okay so what you must have the most of

317
00:16:13,740 --> 00:16:19,050
us do is that the user scripts Python is

318
00:16:19,050 --> 00:16:21,600
creates to tag everything is cool so I

319
00:16:21,600 --> 00:16:25,710
will just do that right now go to script

320
00:16:25,710 --> 00:16:29,850
file and say tag code okay and here if I

321
00:16:29,850 --> 00:16:32,610
do that I will just load the function

322
00:16:32,610 --> 00:16:36,540
which is called tag code and this is

323
00:16:36,540 --> 00:16:39,360
kind of a brute-force approach in which

324
00:16:39,360 --> 00:16:41,370
the script will go through every point

325
00:16:41,370 --> 00:16:44,070
and say oh this is maybe some code and

326
00:16:44,070 --> 00:16:46,200
please create a function okay this is

327
00:16:46,200 --> 00:16:49,670
what most of most of what most people do

328
00:16:49,670 --> 00:16:52,800
this is what I do so from time to time

329
00:16:52,800 --> 00:16:54,810
but I really don't like this approach

330
00:16:54,810 --> 00:17:00,900
because there is no it's not very clever

331
00:17:00,900 --> 00:17:02,910
to do that there is no meaning you

332
00:17:02,910 --> 00:17:04,530
really don't know if the the thing you

333
00:17:04,530 --> 00:17:07,260
are trying to decode as a fusion is good

334
00:17:07,260 --> 00:17:11,640
or is is data okay either will try its

335
00:17:11,640 --> 00:17:14,880
best but really doesn't work okay

336
00:17:14,880 --> 00:17:19,890
another thing we like to do because it's

337
00:17:19,890 --> 00:17:22,589
optional either you go the adoption menu

338
00:17:22,589 --> 00:17:25,949
in the analysis menu you click on color

339
00:17:25,949 --> 00:17:29,580
options and click on make final analysis

340
00:17:29,580 --> 00:17:30,280
pass

341
00:17:30,280 --> 00:17:32,710
okay you check this option then we click

342
00:17:32,710 --> 00:17:33,910
on the button yeah

343
00:17:33,910 --> 00:17:37,360
I will try and use many your sticks you

344
00:17:37,360 --> 00:17:39,190
can see it's working yeah I can see the

345
00:17:39,190 --> 00:17:43,060
cursor progressing and here Ida is just

346
00:17:43,060 --> 00:17:45,370
trying to use heuristics to determine

347
00:17:45,370 --> 00:17:48,310
what is good and what is data okay so

348
00:17:48,310 --> 00:17:50,710
it's a bit more clever than the script I

349
00:17:50,710 --> 00:17:52,930
just used before but sometimes it

350
00:17:52,930 --> 00:17:56,370
doesn't work why because the guys look I

351
00:17:56,370 --> 00:17:59,050
do not do what those heuristics for all

352
00:17:59,050 --> 00:18:01,210
the architectures okay if you try to

353
00:18:01,210 --> 00:18:04,450
become a character like L or many

354
00:18:04,450 --> 00:18:06,400
powerpc stuff like that

355
00:18:06,400 --> 00:18:09,400
change the channel your chances that it

356
00:18:09,400 --> 00:18:13,030
will work but for mugs I think I picture

357
00:18:13,030 --> 00:18:17,800
like the 1850s stuff you find in in

358
00:18:17,800 --> 00:18:21,520
automotive most of the time it doesn't

359
00:18:21,520 --> 00:18:22,870
work so you have to use this kind of

360
00:18:22,870 --> 00:18:25,330
script so okay fine I've been able to

361
00:18:25,330 --> 00:18:28,620
load my program but I'm not really sure

362
00:18:28,620 --> 00:18:31,960
the functions I found here are really

363
00:18:31,960 --> 00:18:34,000
meaningful or not I mean I just found

364
00:18:34,000 --> 00:18:36,730
them by brute forcing so I'm not really

365
00:18:36,730 --> 00:18:39,010
happy with that okay so that's the end

366
00:18:39,010 --> 00:18:41,610
for this demo

367
00:18:43,540 --> 00:18:46,840
back to the presentation what do we do

368
00:18:46,840 --> 00:18:48,370
when we want to start reverse

369
00:18:48,370 --> 00:18:50,320
engineering other such and such for

370
00:18:50,320 --> 00:18:53,320
binary few more there are common ways to

371
00:18:53,320 --> 00:18:56,920
do that work and you have basically two

372
00:18:56,920 --> 00:18:58,540
ways of doing that you you can use a

373
00:18:58,540 --> 00:19:01,530
tactile approach or bottom-up approach

374
00:19:01,530 --> 00:19:04,180
but if you use bottom-up approach you

375
00:19:04,180 --> 00:19:07,600
will you will base your analysis on very

376
00:19:07,600 --> 00:19:10,660
low little facts and try to go apparent

377
00:19:10,660 --> 00:19:14,260
upper and the kernel and the middleware

378
00:19:14,260 --> 00:19:17,200
and application layers and so on so for

379
00:19:17,200 --> 00:19:18,790
example the things you can use our

380
00:19:18,790 --> 00:19:21,130
interrupted costs engine will use very

381
00:19:21,130 --> 00:19:23,890
often like the restrictor can reception

382
00:19:23,890 --> 00:19:26,470
liquor and so on what are those victors

383
00:19:26,470 --> 00:19:29,230
those are interim vectors which are

384
00:19:29,230 --> 00:19:31,450
automatically called in case of an

385
00:19:31,450 --> 00:19:34,060
external events for example if you visit

386
00:19:34,060 --> 00:19:36,730
your microcontroller it will start its

387
00:19:36,730 --> 00:19:40,750
execution over again from the results

388
00:19:40,750 --> 00:19:44,980
which is fixed or specified 32-bits

389
00:19:44,980 --> 00:19:48,400
values are you if you will see the

390
00:19:48,400 --> 00:19:53,020
canvas age your microcontroller get

391
00:19:53,020 --> 00:19:54,880
interrupts and will start exhibiting

392
00:19:54,880 --> 00:19:58,000
recorded at another specific address if

393
00:19:58,000 --> 00:20:00,190
you notice address you can start reverse

394
00:20:00,190 --> 00:20:02,500
engineering your firmware by saying okay

395
00:20:02,500 --> 00:20:04,060
what happens when I receive a can

396
00:20:04,060 --> 00:20:07,330
message I go there so this must be

397
00:20:07,330 --> 00:20:09,520
somewhere in the can driver and from

398
00:20:09,520 --> 00:20:12,100
there from the L you can go and you can

399
00:20:12,100 --> 00:20:14,830
fully cross references and go to the

400
00:20:14,830 --> 00:20:17,230
kernel for example or to the on the

401
00:20:17,230 --> 00:20:20,700
operating system and from there you can

402
00:20:20,700 --> 00:20:22,600
analyze the middleware and application

403
00:20:22,600 --> 00:20:25,330
and so on it's a huge work it's not the

404
00:20:25,330 --> 00:20:28,120
thing I prefer to you okay Allen thing

405
00:20:28,120 --> 00:20:30,310
you can do and this one is a bottom-up

406
00:20:30,310 --> 00:20:32,320
approach is to use high level features

407
00:20:32,320 --> 00:20:35,320
like strings you can be our messages it

408
00:20:35,320 --> 00:20:37,570
can be information can be many many

409
00:20:37,570 --> 00:20:42,250
things you can also ask yourself about

410
00:20:42,250 --> 00:20:44,110
the known features of your firmware

411
00:20:44,110 --> 00:20:45,820
because I mean if your reverse

412
00:20:45,820 --> 00:20:48,430
engineering if you are from the car it

413
00:20:48,430 --> 00:20:51,100
will not behave in the same way as a few

414
00:20:51,100 --> 00:20:52,630
more from let's say a washing machine

415
00:20:52,630 --> 00:20:55,480
they don't do the same job so what is

416
00:20:55,480 --> 00:20:57,460
the job exactly Evans you you can ask

417
00:20:57,460 --> 00:21:00,730
yourself this question and from there

418
00:21:00,730 --> 00:21:05,200
you can find out specific behaviors all

419
00:21:05,200 --> 00:21:07,240
communication protocols all stuff like

420
00:21:07,240 --> 00:21:09,970
that so this is the top-down approach

421
00:21:09,970 --> 00:21:13,810
which I will prefer for the bottom-up

422
00:21:13,810 --> 00:21:18,420
approach this is the I wanted represents

423
00:21:18,420 --> 00:21:21,520
what I use here is based on the memory

424
00:21:21,520 --> 00:21:23,770
map so what is the memory lap for

425
00:21:23,770 --> 00:21:26,190
microcontroller it's the fact that

426
00:21:26,190 --> 00:21:28,990
everything is organized in the same at

427
00:21:28,990 --> 00:21:32,140
aerospace so uncertain bit

428
00:21:32,140 --> 00:21:35,050
microcontrollers the address space is 40

429
00:21:35,050 --> 00:21:38,020
bytes which is pretty much in fact you

430
00:21:38,020 --> 00:21:39,690
don't have four terabytes of memory

431
00:21:39,690 --> 00:21:42,490
inside a microcontroller you have human

432
00:21:42,490 --> 00:21:45,250
rights of flash memory a few kilobytes

433
00:21:45,250 --> 00:21:48,940
of RAM and other stuff for iOS ok so

434
00:21:48,940 --> 00:21:51,910
here you can see on the schematic and

435
00:21:51,910 --> 00:21:53,630
I've taken from the

436
00:21:53,630 --> 00:21:57,510
that's the internal Rome area is located

437
00:21:57,510 --> 00:22:02,160
heating here from 0 from 0 0 to 0 0 F F

438
00:22:02,160 --> 00:22:03,630
F F okay

439
00:22:03,630 --> 00:22:10,980
the run is located here from so from 0 3

440
00:22:10,980 --> 00:22:15,270
FF the reservoirs Row 2 is Row 3 FF so

441
00:22:15,270 --> 00:22:16,530
what does it means well

442
00:22:16,530 --> 00:22:18,300
when you read an absolute value an

443
00:22:18,300 --> 00:22:20,460
absolute bunch are just looking at the

444
00:22:20,460 --> 00:22:21,990
beginning of the pointer is enough to

445
00:22:21,990 --> 00:22:23,100
tell you if it's a point you have to be

446
00:22:23,100 --> 00:22:25,740
flashed your on ok and this is exactly

447
00:22:25,740 --> 00:22:34,440
what I use here I will the two I'm gonna

448
00:22:34,440 --> 00:22:36,680
present today is called in bloom and

449
00:22:36,680 --> 00:22:40,470
bloom in fact what I do it just reading

450
00:22:40,470 --> 00:22:43,170
the whole Shamwari memory and it was

451
00:22:43,170 --> 00:22:45,330
it's according to the size of the frame

452
00:22:45,330 --> 00:22:50,310
where it was it's each 32 bits value

453
00:22:50,310 --> 00:22:53,190
inside two parts prefix parts which is

454
00:22:53,190 --> 00:22:55,320
supposed to be constants and a suffix

455
00:22:55,320 --> 00:22:57,300
part which is specific for each pointer

456
00:22:57,300 --> 00:23:01,380
ok so what does it mean if your memory

457
00:23:01,380 --> 00:23:05,390
space is 40 64 kilobytes 64 is

458
00:23:05,390 --> 00:23:09,060
represented on 16 beats right so if you

459
00:23:09,060 --> 00:23:12,230
have a 32 value the prefix is 32 minus

460
00:23:12,230 --> 00:23:17,340
16 so it's 16 ok so if your memory space

461
00:23:17,340 --> 00:23:21,300
is if your femur size is 64 kilobytes

462
00:23:21,300 --> 00:23:25,680
you can expect to have 16 bits which are

463
00:23:25,680 --> 00:23:29,510
always constants for the flash memory ok

464
00:23:29,510 --> 00:23:32,430
if your firmware is wondering about you

465
00:23:32,430 --> 00:23:35,130
need 20 bits so the remaining our bits

466
00:23:35,130 --> 00:23:38,100
are 12 bits so you can expect you have 3

467
00:23:38,100 --> 00:23:40,980
digits which are which is the same as 12

468
00:23:40,980 --> 00:23:45,240
bits for the graphics okay it means just

469
00:23:45,240 --> 00:23:46,830
by knowing the size of the frame while

470
00:23:46,830 --> 00:23:48,690
you can determine the size of the prefix

471
00:23:48,690 --> 00:23:50,730
and if you know the size of the projects

472
00:23:50,730 --> 00:23:53,760
you can root for all possible 32 bit

473
00:23:53,760 --> 00:23:56,280
values in your frame wire and put them

474
00:23:56,280 --> 00:23:58,740
in the right buckets okay if you're you

475
00:23:58,740 --> 00:24:00,420
you you just look at the first digits

476
00:24:00,420 --> 00:24:02,370
you can't read the book let's put the

477
00:24:02,370 --> 00:24:04,250
rest into these buckets

478
00:24:04,250 --> 00:24:07,909
so just basic statistics so what's the

479
00:24:07,909 --> 00:24:11,570
result from that the result is that if

480
00:24:11,570 --> 00:24:14,750
you analyze a few more like that and you

481
00:24:14,750 --> 00:24:17,360
count the number of unitypoint you

482
00:24:17,360 --> 00:24:19,490
inside each pockets you will see that

483
00:24:19,490 --> 00:24:21,440
somebody gets continue more values than

484
00:24:21,440 --> 00:24:24,049
other pockets here for example the first

485
00:24:24,049 --> 00:24:25,960
bucket starting with zero zero zero

486
00:24:25,960 --> 00:24:29,240
contains at sixteen hundred values okay

487
00:24:29,240 --> 00:24:31,490
this is other bucket starting with zero

488
00:24:31,490 --> 00:24:34,820
before contains 2,100 hundred values and

489
00:24:34,820 --> 00:24:37,370
the last bucket starting with F F F

490
00:24:37,370 --> 00:24:40,820
contains twenty nine hundred values all

491
00:24:40,820 --> 00:24:42,710
the others continuous values so what

492
00:24:42,710 --> 00:24:44,330
does it mean it's not is it's not by

493
00:24:44,330 --> 00:24:46,400
chance I mean it's really in something

494
00:24:46,400 --> 00:24:49,159
what does it mean it means that you have

495
00:24:49,159 --> 00:24:51,530
many value starting with the same prefix

496
00:24:51,530 --> 00:24:54,140
obviously but we still don't know if

497
00:24:54,140 --> 00:24:57,200
it's how it's usable okay so this is

498
00:24:57,200 --> 00:24:58,850
what I'm going to show right here

499
00:24:58,850 --> 00:25:01,940
offense side effect is that just doing

500
00:25:01,940 --> 00:25:04,880
the statistic analysis I was well the

501
00:25:04,880 --> 00:25:07,400
program was able to find other areas in

502
00:25:07,400 --> 00:25:09,679
memory I do not know if most of the time

503
00:25:09,679 --> 00:25:11,510
I'm most interested in the flash memory

504
00:25:11,510 --> 00:25:15,409
but this program showed me other areas

505
00:25:15,409 --> 00:25:18,080
of interest like EEPROM RAM peripherals

506
00:25:18,080 --> 00:25:20,960
and so on so it was it will just want

507
00:25:20,960 --> 00:25:25,370
you to see that as side effects it's not

508
00:25:25,370 --> 00:25:27,860
directly usable like that you can you

509
00:25:27,860 --> 00:25:29,720
will get information but it's not enough

510
00:25:29,720 --> 00:25:31,039
to to be very useful

511
00:25:31,039 --> 00:25:34,370
okay so what do you know I'm using this

512
00:25:34,370 --> 00:25:36,230
program for example to make the first

513
00:25:36,230 --> 00:25:38,570
honor this which is analysis of the NDMS

514
00:25:38,570 --> 00:25:40,370
of the microcontroller what is the

515
00:25:40,370 --> 00:25:42,260
engineers is that we just thought big

516
00:25:42,260 --> 00:25:45,440
values and through a series of bytes the

517
00:25:45,440 --> 00:25:46,940
memory inside a microcontroller is

518
00:25:46,940 --> 00:25:49,130
basically a series of bytes but if you

519
00:25:49,130 --> 00:25:51,230
want to store 32-bit values which

520
00:25:51,230 --> 00:25:53,809
contains four bytes you will have two

521
00:25:53,809 --> 00:25:56,840
ways of storing it in the natural order

522
00:25:56,840 --> 00:25:59,809
and then if you 32-bit value is what is

523
00:25:59,809 --> 00:26:02,690
before you can store it like that what

524
00:26:02,690 --> 00:26:04,520
is before it's what we call the big

525
00:26:04,520 --> 00:26:06,679
engine mode but you can also store it in

526
00:26:06,679 --> 00:26:08,360
a river so there are like four three two

527
00:26:08,360 --> 00:26:13,880
one it's a little chain one so if you

528
00:26:13,880 --> 00:26:15,710
remember I said the projects would be

529
00:26:15,710 --> 00:26:17,049
common amongst all the

530
00:26:17,049 --> 00:26:22,779
proteus because of the memory map okay

531
00:26:22,779 --> 00:26:24,730
because the way it's organized so if you

532
00:26:24,730 --> 00:26:26,230
start the same where is this in

533
00:26:26,230 --> 00:26:29,049
beginning mode and you know which is by

534
00:26:29,049 --> 00:26:32,019
just by changing the way 32-bit values

535
00:26:32,019 --> 00:26:33,999
are reading memory you will get

536
00:26:33,999 --> 00:26:37,029
different efficient buckets okay so if I

537
00:26:37,029 --> 00:26:39,009
do that for example one specific few

538
00:26:39,009 --> 00:26:43,899
more you can see if I read passage to

539
00:26:43,899 --> 00:26:47,470
bit values as big endian you will see we

540
00:26:47,470 --> 00:26:50,289
have just true here main buckets in

541
00:26:50,289 --> 00:26:53,230
which we have high number of unique

542
00:26:53,230 --> 00:26:55,929
pointers okay if I do the same analysis

543
00:26:55,929 --> 00:26:57,700
the little engine will have completely

544
00:26:57,700 --> 00:27:00,789
different numbers here okay

545
00:27:00,789 --> 00:27:04,210
Aya's are your sticks I introduced in

546
00:27:04,210 --> 00:27:08,230
this tool is not only the number of unit

547
00:27:08,230 --> 00:27:12,429
pointers but also the number of pointer

548
00:27:12,429 --> 00:27:14,499
which has which are presented as

549
00:27:14,499 --> 00:27:17,499
elements in an array okay why is that

550
00:27:17,499 --> 00:27:18,940
because I was looking for more

551
00:27:18,940 --> 00:27:21,340
information more specific information

552
00:27:21,340 --> 00:27:24,279
and just taking random random 32-bit

553
00:27:24,279 --> 00:27:27,369
values here and there your firmware was

554
00:27:27,369 --> 00:27:29,350
not really meaningful I thought maybe it

555
00:27:29,350 --> 00:27:31,269
would be more meaningful if I have a

556
00:27:31,269 --> 00:27:34,629
succession of many 32-bit value starting

557
00:27:34,629 --> 00:27:37,179
all with the same prefix it cannot be by

558
00:27:37,179 --> 00:27:40,629
chance they all threw them set up in the

559
00:27:40,629 --> 00:27:42,009
same order and they all have the same

560
00:27:42,009 --> 00:27:46,299
prefix it must must mean something so it

561
00:27:46,299 --> 00:27:48,850
can still be data a function about your

562
00:27:48,850 --> 00:27:52,629
function board whatever you want but

563
00:27:52,629 --> 00:27:54,639
it's more meaningful okay so this is

564
00:27:54,639 --> 00:27:57,309
what I did here and you can see if you

565
00:27:57,309 --> 00:28:00,070
make a cell so we won't consider here

566
00:28:00,070 --> 00:28:02,200
the number of u8 bunkers we just

567
00:28:02,200 --> 00:28:03,789
consider the number of elements in

568
00:28:03,789 --> 00:28:06,580
potential arrays okay and if you make

569
00:28:06,580 --> 00:28:08,470
the sum of all those elements you have

570
00:28:08,470 --> 00:28:11,259
your son right here and right here you

571
00:28:11,259 --> 00:28:14,340
can see here we have like 800 thousands

572
00:28:14,340 --> 00:28:17,409
potential array elements and here we

573
00:28:17,409 --> 00:28:20,769
have four million millions potential

574
00:28:20,769 --> 00:28:22,480
array elements so it's a clear

575
00:28:22,480 --> 00:28:24,909
indication that we found much more a

576
00:28:24,909 --> 00:28:27,879
bigger coalition in the prefix is when

577
00:28:27,879 --> 00:28:29,619
using the little engine mode so we'll

578
00:28:29,619 --> 00:28:30,530
say

579
00:28:30,530 --> 00:28:35,840
easily vision right okay but is it

580
00:28:35,840 --> 00:28:41,260
really useful I mean we know we have

581
00:28:41,260 --> 00:28:43,730
sequence of values with the same prefix

582
00:28:43,730 --> 00:28:46,280
that's fine but how do you distinguish

583
00:28:46,280 --> 00:28:50,780
between raw data and functions and

584
00:28:50,780 --> 00:28:52,880
pointer to know the functions of point

585
00:28:52,880 --> 00:28:55,040
your data well you don't know because

586
00:28:55,040 --> 00:28:59,330
there is no information as to what is

587
00:28:59,330 --> 00:29:02,240
what each 32-bit value corresponds to

588
00:29:02,240 --> 00:29:04,880
okay so is it you have to find the row

589
00:29:04,880 --> 00:29:07,820
base address yes it is because you can

590
00:29:07,820 --> 00:29:12,200
just check the pockets with a high count

591
00:29:12,200 --> 00:29:14,840
of elements for example here the K

592
00:29:14,840 --> 00:29:16,730
starting with zero zero zero is a good

593
00:29:16,730 --> 00:29:18,620
candidate maybe it's a false positive

594
00:29:18,620 --> 00:29:21,380
because most of the time the road each

595
00:29:21,380 --> 00:29:24,560
are on such a bit lower than 32 yet so

596
00:29:24,560 --> 00:29:26,390
they all start with zero zero zero so be

597
00:29:26,390 --> 00:29:28,430
careful with the bit starting with zero

598
00:29:28,430 --> 00:29:30,230
zero zero sometimes it's a false

599
00:29:30,230 --> 00:29:32,330
positive so you have to look for the

600
00:29:32,330 --> 00:29:34,100
other ones so here this one is also

601
00:29:34,100 --> 00:29:36,020
interesting and maybe the base address

602
00:29:36,020 --> 00:29:39,020
is something looking like that so f88

603
00:29:39,020 --> 00:29:42,590
okay and zeros room but is it also

604
00:29:42,590 --> 00:29:44,990
defined proceed at the precise loading

605
00:29:44,990 --> 00:29:47,390
address no it's not because doing that

606
00:29:47,390 --> 00:29:49,550
is just raw statistics you basically

607
00:29:49,550 --> 00:29:53,900
know where your code is located but you

608
00:29:53,900 --> 00:29:55,550
don't know much what's the difference

609
00:29:55,550 --> 00:29:58,040
between a business and the loading

610
00:29:58,040 --> 00:30:01,910
address difference is that if you get

611
00:30:01,910 --> 00:30:04,760
the film were here maybe you don't know

612
00:30:04,760 --> 00:30:06,110
maybe there is something else just

613
00:30:06,110 --> 00:30:08,600
before so for example if your beta grace

614
00:30:08,600 --> 00:30:10,730
is zero I mean you could start at zero

615
00:30:10,730 --> 00:30:13,760
the flash start at zero maybe you have a

616
00:30:13,760 --> 00:30:15,470
bootloader first or something else you

617
00:30:15,470 --> 00:30:19,060
don't know and then you shall start a

618
00:30:19,060 --> 00:30:23,570
higher address so here the loading areas

619
00:30:23,570 --> 00:30:25,940
would be this value the size and the

620
00:30:25,940 --> 00:30:28,910
base which would be that's are these

621
00:30:28,910 --> 00:30:30,710
heuristics enough to determine the

622
00:30:30,710 --> 00:30:32,630
loading address no and it's sad because

623
00:30:32,630 --> 00:30:34,040
this is exactly what I want

624
00:30:34,040 --> 00:30:37,400
so what should we do basically in an

625
00:30:37,400 --> 00:30:40,430
ideal world we wouldn't know the address

626
00:30:40,430 --> 00:30:41,240
the diffusions

627
00:30:41,240 --> 00:30:42,370
okay

628
00:30:42,370 --> 00:30:44,670
if we know the address of each function

629
00:30:44,670 --> 00:30:49,740
we are also able to look for 32-bits

630
00:30:49,740 --> 00:30:52,990
values inside arrays inside your

631
00:30:52,990 --> 00:30:55,330
firmware and do a correlation between

632
00:30:55,330 --> 00:30:59,440
those two okay it's it's a bit of a

633
00:30:59,440 --> 00:31:01,559
chicken and egg problem because you

634
00:31:01,559 --> 00:31:04,120
obviously to load the femur at the

635
00:31:04,120 --> 00:31:05,470
correct address you have this

636
00:31:05,470 --> 00:31:07,150
representation at the correct address

637
00:31:07,150 --> 00:31:11,770
you have to know the volume address so

638
00:31:11,770 --> 00:31:13,030
if you don't know the loading at rest

639
00:31:13,030 --> 00:31:15,309
you can't forget the precise the rest of

640
00:31:15,309 --> 00:31:17,440
the functions and you can't make any

641
00:31:17,440 --> 00:31:20,590
correlation between the 32-bit values

642
00:31:20,590 --> 00:31:22,960
here inside your femur and to address of

643
00:31:22,960 --> 00:31:24,340
the functions because you don't know the

644
00:31:24,340 --> 00:31:26,950
address of the function so one way of

645
00:31:26,950 --> 00:31:30,610
breaking is a chicken and egg problem is

646
00:31:30,610 --> 00:31:33,160
to consider that you will force the

647
00:31:33,160 --> 00:31:35,410
loading of your femur I think was zero

648
00:31:35,410 --> 00:31:38,020
and then what can you do you can just

649
00:31:38,020 --> 00:31:41,230
look at the offset of the other of the

650
00:31:41,230 --> 00:31:44,500
functions yeah and say okay if I

651
00:31:44,500 --> 00:31:47,590
consider maybe this search should be

652
00:31:47,590 --> 00:31:51,100
devalue it corresponds to any possible

653
00:31:51,100 --> 00:31:52,840
functions that matter up cell 0

654
00:31:52,840 --> 00:31:55,090
ok let's say both fronts to this one so

655
00:31:55,090 --> 00:31:56,679
let's forget about the agent well here

656
00:31:56,679 --> 00:31:58,990
it correspond to this value if you do

657
00:31:58,990 --> 00:32:01,809
that you will confuse enough sets which

658
00:32:01,809 --> 00:32:03,790
isn't like the loading address and if

659
00:32:03,790 --> 00:32:06,429
you do that and you make you make an

660
00:32:06,429 --> 00:32:08,500
assumption on the loading address based

661
00:32:08,500 --> 00:32:11,830
just on one couple of 32-bit value and a

662
00:32:11,830 --> 00:32:14,620
specific solution inside your firmware

663
00:32:14,620 --> 00:32:17,170
you can check if you find correlation

664
00:32:17,170 --> 00:32:20,140
for the all audio other such two-bit

665
00:32:20,140 --> 00:32:23,170
values of your array okay so it's based

666
00:32:23,170 --> 00:32:26,230
on an assumption and a correlation so

667
00:32:26,230 --> 00:32:29,170
basics that stick all over again so what

668
00:32:29,170 --> 00:32:33,010
do we do we need to get the list of

669
00:32:33,010 --> 00:32:36,790
printers potential functions and this is

670
00:32:36,790 --> 00:32:39,220
something we know how to do this is

671
00:32:39,220 --> 00:32:40,900
exactly what I did in the previous

672
00:32:40,900 --> 00:32:43,090
demonstration just by loading the favor

673
00:32:43,090 --> 00:32:45,580
in either at address 0 using the tag

674
00:32:45,580 --> 00:32:48,520
code function to analyze all possible

675
00:32:48,520 --> 00:32:50,890
function with possible false positive

676
00:32:50,890 --> 00:32:53,440
but we all clear basically and we'll say

677
00:32:53,440 --> 00:32:54,780
that to a file

678
00:32:54,780 --> 00:32:57,390
and that we will use balloon to make the

679
00:32:57,390 --> 00:33:00,920
correlation between those possible

680
00:33:00,920 --> 00:33:04,440
finishing addresses and all possible

681
00:33:04,440 --> 00:33:07,080
areas containing function pointers okay

682
00:33:07,080 --> 00:33:09,420
so obviously it's a lot of computation

683
00:33:09,420 --> 00:33:12,840
takes a lot of time but it works here is

684
00:33:12,840 --> 00:33:17,310
the results on this room where the room

685
00:33:17,310 --> 00:33:20,780
has been able to find a correlation on

686
00:33:20,780 --> 00:33:24,570
968 functions based on the assumption

687
00:33:24,570 --> 00:33:26,190
that the film where was loaded at this

688
00:33:26,190 --> 00:33:30,450
position address 9 F 0 0 0 0 ok so it's

689
00:33:30,450 --> 00:33:33,150
pretty high number of function cannot be

690
00:33:33,150 --> 00:33:36,210
by chance and it means this is the

691
00:33:36,210 --> 00:33:37,980
loading address and if you use the

692
00:33:37,980 --> 00:33:41,070
service either everything will just

693
00:33:41,070 --> 00:33:50,910
match ok then bin blue is just exporting

694
00:33:50,910 --> 00:33:55,490
to address of all reporters and of the

695
00:33:55,490 --> 00:33:58,470
968 efficient it has been able to

696
00:33:58,470 --> 00:34:01,290
discover and you remember when Ida was

697
00:34:01,290 --> 00:34:02,820
saying please put your cursor in a

698
00:34:02,820 --> 00:34:05,130
specific place and press C well then

699
00:34:05,130 --> 00:34:10,320
there is one script here to import all

700
00:34:10,320 --> 00:34:13,460
this in fact what we will do is use the

701
00:34:13,460 --> 00:34:19,830
968 locations to start an analysis and

702
00:34:19,830 --> 00:34:21,719
not just on so the results are much

703
00:34:21,719 --> 00:34:24,600
better I will do a demonstration just

704
00:34:24,600 --> 00:34:30,600
after because and I think I'm running a

705
00:34:30,600 --> 00:34:32,639
little bit out of time and I would

706
00:34:32,639 --> 00:34:36,510
replace the demo afterwards right so the

707
00:34:36,510 --> 00:34:38,610
last part of being bloom is the the

708
00:34:38,610 --> 00:34:42,149
Patridge which is specific to the ECU's

709
00:34:42,149 --> 00:34:47,550
ok as you see my obviously has to

710
00:34:47,550 --> 00:34:49,199
contain specific information about the

711
00:34:49,199 --> 00:34:51,870
behavior of the ECU and most of the time

712
00:34:51,870 --> 00:34:56,070
I use speak communication protocol on

713
00:34:56,070 --> 00:34:59,130
the canvas it can be UDS or kwp to

714
00:34:59,130 --> 00:35:01,710
thousands can be different kind of

715
00:35:01,710 --> 00:35:03,240
competition protocols here I will take

716
00:35:03,240 --> 00:35:05,640
the example of Ullaeus of the UDS

717
00:35:05,640 --> 00:35:08,520
protocol basically really

718
00:35:08,520 --> 00:35:12,089
you use communication contains a service

719
00:35:12,089 --> 00:35:14,010
identifier which is basically a comment

720
00:35:14,010 --> 00:35:19,400
number and and and that's all and

721
00:35:19,400 --> 00:35:22,320
parameters but basically the most

722
00:35:22,320 --> 00:35:25,109
important part is the studies identified

723
00:35:25,109 --> 00:35:31,140
so what happens for example when you go

724
00:35:31,140 --> 00:35:36,990
to the car mechanics it will just it

725
00:35:36,990 --> 00:35:41,369
will just send a command to read the dtc

726
00:35:41,369 --> 00:35:42,990
information did you see the Japanese tip

727
00:35:42,990 --> 00:35:45,690
trouble code and which which is in fact

728
00:35:45,690 --> 00:35:49,500
the arrows which are stolen Dez what I

729
00:35:49,500 --> 00:35:53,849
mean that means that he sends the value

730
00:35:53,849 --> 00:35:57,720
19 actually see you yes you will respond

731
00:35:57,720 --> 00:36:01,859
with the result actual defaults okay so

732
00:36:01,859 --> 00:36:03,450
there must be some place in the code

733
00:36:03,450 --> 00:36:05,730
where this list of values is a

734
00:36:05,730 --> 00:36:06,599
hard-coded

735
00:36:06,599 --> 00:36:09,930
okay if you look for is an array

736
00:36:09,930 --> 00:36:12,150
containing these values you will get

737
00:36:12,150 --> 00:36:14,820
good surprise you will get something

738
00:36:14,820 --> 00:36:17,150
like this this is what Blimpo is doing

739
00:36:17,150 --> 00:36:20,099
for the second part scanning for what we

740
00:36:20,099 --> 00:36:23,099
call a UTS database it will look for

741
00:36:23,099 --> 00:36:27,420
arrays in memory in which the first

742
00:36:27,420 --> 00:36:31,470
column is only UTS values Julius

743
00:36:31,470 --> 00:36:33,630
commands if you do that it's very

744
00:36:33,630 --> 00:36:36,210
powerful because most of the time if

745
00:36:36,210 --> 00:36:39,089
you're lucky you will find also a

746
00:36:39,089 --> 00:36:42,780
function pointer right behind it okay so

747
00:36:42,780 --> 00:36:44,430
what does it mean it means that to

748
00:36:44,430 --> 00:36:48,630
execute the commands number 10 yes the

749
00:36:48,630 --> 00:36:51,240
code will just jump to this address if

750
00:36:51,240 --> 00:36:52,320
you want to exit route

751
00:36:52,320 --> 00:36:55,260
c'mon 27 the cold widget will jump to

752
00:36:55,260 --> 00:36:57,480
this address why is it interesting

753
00:36:57,480 --> 00:37:00,330
because if you are doing security

754
00:37:00,330 --> 00:37:05,099
evaluations on easy news you want to

755
00:37:05,099 --> 00:37:09,480
look for specific information like the

756
00:37:09,480 --> 00:37:12,869
function is a function 27 which is

757
00:37:12,869 --> 00:37:18,750
called due to security access okay the

758
00:37:18,750 --> 00:37:21,930
situation is is the main entry point

759
00:37:21,930 --> 00:37:23,250
in case you want to download it from

760
00:37:23,250 --> 00:37:26,430
where uploaded film where you add them

761
00:37:26,430 --> 00:37:27,359
stuff okay

762
00:37:27,359 --> 00:37:29,369
so this is a good target for hackers and

763
00:37:29,369 --> 00:37:31,380
so when you lose it written your

764
00:37:31,380 --> 00:37:34,140
addition we want to release fusion so

765
00:37:34,140 --> 00:37:37,400
your options either use that you use a

766
00:37:37,400 --> 00:37:39,900
bottom-up approach starting from the can

767
00:37:39,900 --> 00:37:44,040
Erik's interrupt vector and work your

768
00:37:44,040 --> 00:37:46,710
way up to this function are you able to

769
00:37:46,710 --> 00:37:49,349
find this function directly okay he used

770
00:37:49,349 --> 00:37:51,180
in bloom and you are lucky enough to

771
00:37:51,180 --> 00:37:53,640
find it UDL database you can directly

772
00:37:53,640 --> 00:37:57,030
have the address of the UTS functional

773
00:37:57,030 --> 00:38:01,500
responsible for the $0.27 okay which is

774
00:38:01,500 --> 00:38:03,180
protein twisting so let's do that

775
00:38:03,180 --> 00:38:05,339
you see the address here zero eight

776
00:38:05,339 --> 00:38:09,300
eight eight a EC so we go there in

777
00:38:09,300 --> 00:38:12,780
middle and we name this function as a

778
00:38:12,780 --> 00:38:13,589
video service

779
00:38:13,589 --> 00:38:17,819
Celestin service number ten okay if you

780
00:38:17,819 --> 00:38:19,950
go back to the next one you see the

781
00:38:19,950 --> 00:38:22,670
address is the one I said just before

782
00:38:22,670 --> 00:38:27,599
zero a eight a easy so you go there

783
00:38:27,599 --> 00:38:31,260
either again and you see there is no

784
00:38:31,260 --> 00:38:33,359
current students it's right where the

785
00:38:33,359 --> 00:38:36,299
problem solution stopped because either

786
00:38:36,299 --> 00:38:39,000
was not able to continue is decently so

787
00:38:39,000 --> 00:38:43,140
you go there and you press C here and it

788
00:38:43,140 --> 00:38:45,059
will continue and is assembled

789
00:38:45,059 --> 00:38:47,150
assumption and you can just rename its

790
00:38:47,150 --> 00:38:50,099
service 27 okay

791
00:38:50,099 --> 00:38:56,119
so just by doing that you either produce

792
00:38:56,119 --> 00:38:59,160
mode of importing all the discovered

793
00:38:59,160 --> 00:39:02,130
functions or just by looking for the

794
00:39:02,130 --> 00:39:05,250
role can database utilize database

795
00:39:05,250 --> 00:39:07,200
already you can find the main entry

796
00:39:07,200 --> 00:39:10,020
points okay so I will just do a

797
00:39:10,020 --> 00:39:12,450
demonstration to to finish this

798
00:39:12,450 --> 00:39:16,290
presentation I'm currently finishing the

799
00:39:16,290 --> 00:39:17,880
open sourcing of being balloon I've been

800
00:39:17,880 --> 00:39:21,299
enhancing it since a few a few months

801
00:39:21,299 --> 00:39:24,630
now I had to fix a few bugs and why the

802
00:39:24,630 --> 00:39:27,630
documentation and so on so I still have

803
00:39:27,630 --> 00:39:29,190
to write a few information in the

804
00:39:29,190 --> 00:39:30,960
documentation but basically it's done

805
00:39:30,960 --> 00:39:32,970
the coding scheme so I expect your

806
00:39:32,970 --> 00:39:34,270
controls

807
00:39:34,270 --> 00:39:37,360
next week I will make an announcement on

808
00:39:37,360 --> 00:39:39,760
on Twitter so you can phone which ones

809
00:39:39,760 --> 00:39:46,869
to get that's okay as a country before

810
00:39:46,869 --> 00:39:50,920
the for the demonstration just loading

811
00:39:50,920 --> 00:39:52,720
your binary from where I can be very

812
00:39:52,720 --> 00:39:55,030
time consuming tasks and it's really

813
00:39:55,030 --> 00:39:57,760
important to be able to out my automates

814
00:39:57,760 --> 00:40:01,570
this process I've been asked very often

815
00:40:01,570 --> 00:40:03,550
this kind of analysis this is why I

816
00:40:03,550 --> 00:40:05,440
watch this tool and I wanted to share it

817
00:40:05,440 --> 00:40:07,420
with you because there are many other

818
00:40:07,420 --> 00:40:10,480
tools which helped me like being wall

819
00:40:10,480 --> 00:40:13,630
core CPI and so on I just wanted to be

820
00:40:13,630 --> 00:40:17,830
part of that if you have any feedback or

821
00:40:17,830 --> 00:40:19,750
whatever please don't hesitate to share

822
00:40:19,750 --> 00:40:22,000
it with me okay thank you

823
00:40:22,000 --> 00:40:25,810
I will just do a demonstration every

824
00:40:25,810 --> 00:40:30,490
time I will do two to kind of demo one

825
00:40:30,490 --> 00:40:34,119
in a working case I want to do this one

826
00:40:34,119 --> 00:40:36,190
because it's pretty long but I have the

827
00:40:36,190 --> 00:40:37,540
log I can't reach the lock if you're

828
00:40:37,540 --> 00:40:39,900
interested and I will show you also in

829
00:40:39,900 --> 00:40:42,790
non-working case because as I explained

830
00:40:42,790 --> 00:40:44,080
before being boom is based on heuristics

831
00:40:44,080 --> 00:40:47,290
and your things don't work all the time

832
00:40:47,290 --> 00:40:50,020
okay for example for this specific shim

833
00:40:50,020 --> 00:40:52,150
where I suspect there is a computation

834
00:40:52,150 --> 00:40:54,690
option which makes sure that there is no

835
00:40:54,690 --> 00:40:57,430
search to bits pointer to functions

836
00:40:57,430 --> 00:41:00,609
okay or maybe the camera is a multi-part

837
00:41:00,609 --> 00:41:03,100
firmware and I just have a look okay I

838
00:41:03,100 --> 00:41:05,680
can just easily inspect a very small

839
00:41:05,680 --> 00:41:08,680
portion of it or maybe you use you have

840
00:41:08,680 --> 00:41:11,770
something we also have sometimes in the

841
00:41:11,770 --> 00:41:14,440
world which we which is called mirror

842
00:41:14,440 --> 00:41:18,160
segments and and the prefix that can be

843
00:41:18,160 --> 00:41:19,450
different but the content is the same

844
00:41:19,450 --> 00:41:22,960
anyway something that works sometimes

845
00:41:22,960 --> 00:41:25,060
work it works very well sometimes you

846
00:41:25,060 --> 00:41:26,859
can find the UTS database and times you

847
00:41:26,859 --> 00:41:31,030
don't but I'm reading this program this

848
00:41:31,030 --> 00:41:33,040
program because well more sometimes

849
00:41:33,040 --> 00:41:36,940
works so I think it's worth sharing

850
00:41:36,940 --> 00:41:41,500
I'll just do a small demo right now for

851
00:41:41,500 --> 00:41:46,090
or next week mrs. V 850 each you film

852
00:41:46,090 --> 00:41:50,560
while I get from friends so you can see

853
00:41:50,560 --> 00:41:53,980
that's using CPU rack CPU relic is

854
00:41:53,980 --> 00:41:55,750
making an educated guess

855
00:41:55,750 --> 00:41:58,270
I mean it's current so you can just

856
00:41:58,270 --> 00:42:00,970
start idea and say okay well we'll just

857
00:42:00,970 --> 00:42:03,480
look at this this memory right now

858
00:42:03,480 --> 00:42:10,060
okay so necronus is blah blah blah it's

859
00:42:10,060 --> 00:42:12,220
this one here you have to select the

860
00:42:12,220 --> 00:42:18,880
correct architecture next n detriment if

861
00:42:18,880 --> 00:42:22,060
to eat you can see this one here which

862
00:42:22,060 --> 00:42:23,920
is the joystick right choose the correct

863
00:42:23,920 --> 00:42:26,290
microcontroller and as I explained

864
00:42:26,290 --> 00:42:27,880
before you don't know the loading

865
00:42:27,880 --> 00:42:29,680
address at first so you will just like

866
00:42:29,680 --> 00:42:35,800
zero as the loading address warnings and

867
00:42:35,800 --> 00:42:38,349
go find yourself the starting points

868
00:42:38,349 --> 00:42:40,810
thank you and here you are

869
00:42:40,810 --> 00:42:43,180
okay you see here everything is brown

870
00:42:43,180 --> 00:42:45,940
means everything is just flow data okay

871
00:42:45,940 --> 00:42:51,550
so we just thought us create tag code it

872
00:42:51,550 --> 00:42:53,650
will take a few seconds it's not too

873
00:42:53,650 --> 00:42:58,810
long we'll wait for the end of the

874
00:42:58,810 --> 00:43:01,810
autumn Ellis's and after that the script

875
00:43:01,810 --> 00:43:04,720
will save all the function functions it

876
00:43:04,720 --> 00:43:07,300
has been able to find right here okay so

877
00:43:07,300 --> 00:43:10,589
you don't need to do anything else here

878
00:43:10,589 --> 00:43:16,180
just close this is database and don't

879
00:43:16,180 --> 00:43:18,550
save it because I know the loading

880
00:43:18,550 --> 00:43:20,320
address is not correct not sometimes not

881
00:43:20,320 --> 00:43:24,990
right so now we can just leave them and

882
00:43:24,990 --> 00:43:28,839
we will specify this framework and ask

883
00:43:28,839 --> 00:43:31,089
for you can ask for several things you

884
00:43:31,089 --> 00:43:34,330
can ask for an endogenous analysis with

885
00:43:34,330 --> 00:43:38,320
the - option and it will use your sticks

886
00:43:38,320 --> 00:43:43,000
in big in general and ok so here you can

887
00:43:43,000 --> 00:43:43,290
see

888
00:43:43,290 --> 00:43:45,730
[Music]

889
00:43:45,730 --> 00:43:48,250
but with low counts okay but in big

890
00:43:48,250 --> 00:43:53,350
endian sorry yeah a higher counts for

891
00:43:53,350 --> 00:43:55,150
just one wicket okay these high accounts

892
00:43:55,150 --> 00:43:57,790
means that this was the correct option

893
00:43:57,790 --> 00:44:00,310
so lindbloom is telling us this program

894
00:44:00,310 --> 00:44:03,160
is in fact a little engine program now I

895
00:44:03,160 --> 00:44:06,460
will use the - beat you ask for analysis

896
00:44:06,460 --> 00:44:09,700
an analysis of the data of the loading

897
00:44:09,700 --> 00:44:13,330
address on the basicness it will start

898
00:44:13,330 --> 00:44:15,130
again by doing the Indian s analysis

899
00:44:15,130 --> 00:44:19,110
because the antennas analysis is needed

900
00:44:19,110 --> 00:44:23,130
in order to be able to compute

901
00:44:23,130 --> 00:44:26,140
meaningful candidates for the holidays a

902
00:44:26,140 --> 00:44:28,930
reason for the loading errors so here

903
00:44:28,930 --> 00:44:32,140
what is doing it's just trying to find

904
00:44:32,140 --> 00:44:34,960
all possible areas containing 32-bit

905
00:44:34,960 --> 00:44:40,720
values and in an array you affect come

906
00:44:40,720 --> 00:44:49,450
back here you can see here there are

907
00:44:49,450 --> 00:44:51,870
many bytes in between two consecutive

908
00:44:51,870 --> 00:44:55,030
pointers here okay you have four here

909
00:44:55,030 --> 00:44:57,040
and four here so here are destroyed

910
00:44:57,040 --> 00:44:58,600
would be 12

911
00:44:58,600 --> 00:45:01,900
okay if you consider the can us can

912
00:45:01,900 --> 00:45:02,560
database

913
00:45:02,560 --> 00:45:05,350
it means the sprite is number of matches

914
00:45:05,350 --> 00:45:07,060
to skip between three DDS conservative

915
00:45:07,060 --> 00:45:10,480
values and it's 12 years but if you just

916
00:45:10,480 --> 00:45:13,570
consider the pointers and the strength

917
00:45:13,570 --> 00:45:17,350
is is 8 so then one cannot know the

918
00:45:17,350 --> 00:45:21,190
possible Strad before this analysis so

919
00:45:21,190 --> 00:45:24,880
it has to try all of them ok so this is

920
00:45:24,880 --> 00:45:27,370
what what we do here between the stride

921
00:45:27,370 --> 00:45:31,690
of four and stride of 16 and boom it

922
00:45:31,690 --> 00:45:34,780
works so wind room has been able to find

923
00:45:34,780 --> 00:45:36,880
here the loading address the base

924
00:45:36,880 --> 00:45:44,640
address and amongst the a6000 functions

925
00:45:44,640 --> 00:45:47,770
we found by brute forcing the the frame

926
00:45:47,770 --> 00:45:50,370
where with either

927
00:45:50,730 --> 00:45:54,010
1200 of them where matched with specific

928
00:45:54,010 --> 00:45:56,650
locations in the fume where okay so it's

929
00:45:56,650 --> 00:45:59,350
pretty good results in facts

930
00:45:59,350 --> 00:46:03,100
so once the visa race is known in bloom

931
00:46:03,100 --> 00:46:05,740
is doing the analysis over again but in

932
00:46:05,740 --> 00:46:08,080
a different way just by seeing do the

933
00:46:08,080 --> 00:46:09,100
same work please

934
00:46:09,100 --> 00:46:12,880
but each time you find a function for

935
00:46:12,880 --> 00:46:14,200
which the loading areas would be this

936
00:46:14,200 --> 00:46:17,230
one please just save it in failure okay

937
00:46:17,230 --> 00:46:19,510
and this is the file I'm just gonna use

938
00:46:19,510 --> 00:46:21,790
right now you see in room is just

939
00:46:21,790 --> 00:46:25,330
finishing its analysis so I will load

940
00:46:25,330 --> 00:46:28,210
the binary again the dish and we're

941
00:46:28,210 --> 00:46:39,820
again using so we say it was neck okay

942
00:46:39,820 --> 00:46:43,300
but now we know the loading address okay

943
00:46:43,300 --> 00:46:49,450
it's it's this one it's e where three

944
00:46:49,450 --> 00:46:54,730
zeros behind okay and if I do that

945
00:46:54,730 --> 00:46:59,130
between being finished creating the

946
00:46:59,130 --> 00:47:03,310
export files and we can just use another

947
00:47:03,310 --> 00:47:06,100
Python script to include those entry

948
00:47:06,100 --> 00:47:09,190
points I will go to the crowd filter and

949
00:47:09,190 --> 00:47:15,550
it was neck rest was this one and for

950
00:47:15,550 --> 00:47:18,790
the pointers themselves use the beauty

951
00:47:18,790 --> 00:47:24,010
file and you see yeah this does in my

952
00:47:24,010 --> 00:47:26,500
eyes been able to find most of the

953
00:47:26,500 --> 00:47:28,540
functions I mean we have instead of

954
00:47:28,540 --> 00:47:31,240
having just one entry point we have 1200

955
00:47:31,240 --> 00:47:34,270
entry points now which gives a much

956
00:47:34,270 --> 00:47:36,160
better result and if you want to finish

957
00:47:36,160 --> 00:47:39,370
work just go through options general

958
00:47:39,370 --> 00:47:42,610
analysis check that this make fire with

959
00:47:42,610 --> 00:47:45,840
this pass you analyze the program and

960
00:47:45,840 --> 00:47:48,910
here either will use those new functions

961
00:47:48,910 --> 00:47:51,730
as entry points and starts the analysis

962
00:47:51,730 --> 00:47:53,980
all over again and find all possible

963
00:47:53,980 --> 00:47:56,740
cool okay it's not completely finished

964
00:47:56,740 --> 00:48:00,370
but most of the work is done and you can

965
00:48:00,370 --> 00:48:02,860
really start working on that I said it's

966
00:48:02,860 --> 00:48:05,200
not completely unit because as you can

967
00:48:05,200 --> 00:48:07,600
see in some places you have code which

968
00:48:07,600 --> 00:48:10,000
is not tied as functions you can do that

969
00:48:10,000 --> 00:48:10,510
but

970
00:48:10,510 --> 00:48:13,900
you see here you have no CrossRef you as

971
00:48:13,900 --> 00:48:16,660
you have no cross fresh you can you can

972
00:48:16,660 --> 00:48:18,850
say it's a function or not you know

973
00:48:18,850 --> 00:48:19,630
don't care

974
00:48:19,630 --> 00:48:21,610
well that's all for this demonstration

975
00:48:21,610 --> 00:48:25,960
thank you for staying today to this

976
00:48:25,960 --> 00:48:28,660
webinar for and I hope it was

977
00:48:28,660 --> 00:48:30,400
interesting for you I will just look at

978
00:48:30,400 --> 00:48:32,370
the questions now I should have some

979
00:48:32,370 --> 00:48:34,990
Thank You um for your presentation

980
00:48:34,990 --> 00:48:37,420
yeah please everyone send your questions

981
00:48:37,420 --> 00:48:39,940
to giong he will answer them now we have

982
00:48:39,940 --> 00:48:42,760
a little time left so let's say two

983
00:48:42,760 --> 00:48:47,020
three questions young can answer you can

984
00:48:47,020 --> 00:48:49,680
check in a chat

985
00:48:53,769 --> 00:48:55,310
I'm just

986
00:48:55,310 --> 00:48:58,550
the first one our about publishing the

987
00:48:58,550 --> 00:49:03,590
webinar and each job whenever with it

988
00:49:03,590 --> 00:49:04,940
will be available so it will be

989
00:49:04,940 --> 00:49:07,550
published on the github of my company

990
00:49:07,550 --> 00:49:12,800
which is Cox lab and for when I expect

991
00:49:12,800 --> 00:49:14,330
you to be published on next week because

992
00:49:14,330 --> 00:49:17,060
I can see that it could be almost

993
00:49:17,060 --> 00:49:20,140
presentable so it should be should be ok

994
00:49:20,140 --> 00:49:24,710
so next week on quarks labs github and

995
00:49:24,710 --> 00:49:27,080
if you want you can I will make an

996
00:49:27,080 --> 00:49:31,820
announcement on on Twitter which

997
00:49:31,820 --> 00:49:33,320
architecture that supports it's very

998
00:49:33,320 --> 00:49:38,150
good question and basically it's

999
00:49:38,150 --> 00:49:41,180
completely architecture agnostic I mean

1000
00:49:41,180 --> 00:49:43,250
it can support an architecture because

1001
00:49:43,250 --> 00:49:46,840
just doing statistics on the robot hurry

1002
00:49:46,840 --> 00:49:50,930
for specific features like UDS database

1003
00:49:50,930 --> 00:49:53,480
it's completely architecture agnostics

1004
00:49:53,480 --> 00:49:58,540
agnostic for other functions like

1005
00:49:58,540 --> 00:50:02,240
finding the loading address as I showed

1006
00:50:02,240 --> 00:50:05,120
you have to create a list of versions of

1007
00:50:05,120 --> 00:50:08,630
possible functions you can do it with

1008
00:50:08,630 --> 00:50:12,460
any tool in fact just a file containing

1009
00:50:12,460 --> 00:50:15,410
of set of functions in Exodus mode so

1010
00:50:15,410 --> 00:50:18,620
very very easy to produce and you can

1011
00:50:18,620 --> 00:50:21,140
you can use any reverse engineering tool

1012
00:50:21,140 --> 00:50:24,130
to do that so I would say lindbloom

1013
00:50:24,130 --> 00:50:27,980
supports any any reverse engineering

1014
00:50:27,980 --> 00:50:30,320
tool able to produce the listed

1015
00:50:30,320 --> 00:50:33,620
functions of potential function for for

1016
00:50:33,620 --> 00:50:36,009
fumer

1017
00:50:38,589 --> 00:50:41,990
so the next question is what are the

1018
00:50:41,990 --> 00:50:43,609
heuristics that you input for your

1019
00:50:43,609 --> 00:50:52,420
program the heuristics are just checking

1020
00:50:52,420 --> 00:50:55,940
if a 32-bit value has the same prefix of

1021
00:50:55,940 --> 00:50:59,119
another one okay and starting from that

1022
00:50:59,119 --> 00:51:02,420
you start making correlations between Q

1023
00:51:02,420 --> 00:51:05,150
32-bit values and say oh those 32-bit

1024
00:51:05,150 --> 00:51:07,760
values have the same prefix and they a

1025
00:51:07,760 --> 00:51:11,329
spaced by let's say a bytes and let's

1026
00:51:11,329 --> 00:51:14,240
look a bit further and if a byte further

1027
00:51:14,240 --> 00:51:17,329
you have another 32-bit value which has

1028
00:51:17,329 --> 00:51:19,790
the same prefix well it does means

1029
00:51:19,790 --> 00:51:24,290
something was written so this is the

1030
00:51:24,290 --> 00:51:28,869
only heuristic I'm using for the UDS

1031
00:51:28,869 --> 00:51:31,310
database analysis for the Indian s

1032
00:51:31,310 --> 00:51:35,089
analysis and for the loading address

1033
00:51:35,089 --> 00:51:39,220
analysis I'm also using the fact that

1034
00:51:39,220 --> 00:51:42,200
you must have this kind of correlation

1035
00:51:42,200 --> 00:51:44,660
and you it must also correspond to other

1036
00:51:44,660 --> 00:51:47,119
functions which are specified in the

1037
00:51:47,119 --> 00:51:51,160
external file the functions file

1038
00:51:55,110 --> 00:51:58,270
okay we have a say one more question and

1039
00:51:58,270 --> 00:52:00,040
one more question

1040
00:52:00,040 --> 00:52:02,290
what do you do if there is no support

1041
00:52:02,290 --> 00:52:05,640
for the few marquee t-shirt in Idaho

1042
00:52:05,640 --> 00:52:09,310
well that's a good question

1043
00:52:09,310 --> 00:52:13,210
you can check online on github or other

1044
00:52:13,210 --> 00:52:16,390
software repository because I dug

1045
00:52:16,390 --> 00:52:20,650
through or for that matter Hydra or

1046
00:52:20,650 --> 00:52:23,320
probably other tools are able to support

1047
00:52:23,320 --> 00:52:25,870
other architecture for example yet last

1048
00:52:25,870 --> 00:52:28,690
year I had to make a security analysis

1049
00:52:28,690 --> 00:52:32,890
for V 850 ECU and at that time this

1050
00:52:32,890 --> 00:52:34,650
architecture was not supported in either

1051
00:52:34,650 --> 00:52:38,260
but luckily enough a guy I don't

1052
00:52:38,260 --> 00:52:41,200
remember his name but this guy made a

1053
00:52:41,200 --> 00:52:45,520
plug-in called necromancer that pew I to

1054
00:52:45,520 --> 00:52:50,200
analyze he equivalent 50 humor so I

1055
00:52:50,200 --> 00:52:53,560
would advise you to look online if there

1056
00:52:53,560 --> 00:52:56,770
is a plugin for either a for Hydra to

1057
00:52:56,770 --> 00:53:00,300
reverse the cadet you want to use and

1058
00:53:00,300 --> 00:53:02,980
honestly if you if you have no support

1059
00:53:02,980 --> 00:53:06,820
for this architecture in any any tool

1060
00:53:06,820 --> 00:53:09,940
you can start writing your own plugin I

1061
00:53:09,940 --> 00:53:11,830
was saying it was not so hard but I

1062
00:53:11,830 --> 00:53:13,930
never did it myself and I consider it

1063
00:53:13,930 --> 00:53:16,870
maybe not so trivial to do it but it's

1064
00:53:16,870 --> 00:53:19,300
easy in fact your last chance to work on

1065
00:53:19,300 --> 00:53:21,040
an architecture which is not supported

1066
00:53:21,040 --> 00:53:27,760
by those tools okay thank you very much

1067
00:53:27,760 --> 00:53:30,070
Ian for your presentation coming to the

1068
00:53:30,070 --> 00:53:33,220
webinar and oh it's nice to have you at

1069
00:53:33,220 --> 00:53:37,870
hardwired and few announcements before

1070
00:53:37,870 --> 00:53:41,980
we finish from outside next webinar will

1071
00:53:41,980 --> 00:53:46,660
happen on 11 June on Thursday same time

1072
00:53:46,660 --> 00:53:50,740
at 3 p.m. and not sure we'll speak about

1073
00:53:50,740 --> 00:53:53,350
analyzing embedded systems the smart way

1074
00:53:53,350 --> 00:53:56,770
there is a link in the chat now that you

1075
00:53:56,770 --> 00:53:58,980
can register for the next webinar and

1076
00:53:58,980 --> 00:54:01,510
thank you everyone for joining

1077
00:54:01,510 --> 00:54:04,679
[Music]

