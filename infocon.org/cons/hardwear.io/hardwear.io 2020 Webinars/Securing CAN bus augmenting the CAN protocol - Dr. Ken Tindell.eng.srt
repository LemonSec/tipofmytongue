1
00:00:12,490 --> 00:00:13,759
[Music]

2
00:00:13,759 --> 00:00:15,360
hello and welcome again

3
00:00:15,360 --> 00:00:17,840
for another hardware auto webinar

4
00:00:17,840 --> 00:00:18,640
friends

5
00:00:18,640 --> 00:00:21,039
we run one of the only hardware security

6
00:00:21,039 --> 00:00:23,199
conference in the netherlands and usa

7
00:00:23,199 --> 00:00:26,800
called hardware.io we have some really

8
00:00:26,800 --> 00:00:27,920
cool hands-on

9
00:00:27,920 --> 00:00:30,320
live hardware trainings coming up for

10
00:00:30,320 --> 00:00:32,479
you in the month of september

11
00:00:32,479 --> 00:00:34,160
if you are interested please do check

12
00:00:34,160 --> 00:00:36,960
our website for more information

13
00:00:36,960 --> 00:00:39,200
my name is anthrax and i would be your

14
00:00:39,200 --> 00:00:41,760
host for the day

15
00:00:41,760 --> 00:00:44,480
well we all have seen various news

16
00:00:44,480 --> 00:00:46,000
articles and stories about

17
00:00:46,000 --> 00:00:48,239
car hacking and how someone can take

18
00:00:48,239 --> 00:00:49,760
control over your vehicle

19
00:00:49,760 --> 00:00:52,480
over the internet vehicles use a

20
00:00:52,480 --> 00:00:54,480
protocol called can bus

21
00:00:54,480 --> 00:00:56,840
to communicate between devices and its

22
00:00:56,840 --> 00:00:58,800
microcontrollers

23
00:00:58,800 --> 00:01:01,280
can is not only used in automotive and

24
00:01:01,280 --> 00:01:02,399
railway systems

25
00:01:02,399 --> 00:01:04,879
but also in healthcare elevators

26
00:01:04,879 --> 00:01:06,320
industrial automation

27
00:01:06,320 --> 00:01:10,080
devices can is a very old protocol being

28
00:01:10,080 --> 00:01:10,479
used

29
00:01:10,479 --> 00:01:13,520
since 1980s and there have been multiple

30
00:01:13,520 --> 00:01:15,520
ways where researchers have found

31
00:01:15,520 --> 00:01:18,880
how to sniff and stiff the communication

32
00:01:18,880 --> 00:01:22,159
and cause issues in the systems using it

33
00:01:22,159 --> 00:01:24,880
let's invite dr ken from canis

34
00:01:24,880 --> 00:01:26,400
automotive labs

35
00:01:26,400 --> 00:01:28,240
on how we can directly address the

36
00:01:28,240 --> 00:01:29,439
security of

37
00:01:29,439 --> 00:01:32,479
can like anti-spoofing and protection

38
00:01:32,479 --> 00:01:35,600
against denial of service attacks dr

39
00:01:35,600 --> 00:01:38,320
ken developed the deadline monotonic

40
00:01:38,320 --> 00:01:39,439
analysis

41
00:01:39,439 --> 00:01:42,720
for the can bus and also an automotive

42
00:01:42,720 --> 00:01:44,159
real-time operating system

43
00:01:44,159 --> 00:01:46,960
called live devices which was later

44
00:01:46,960 --> 00:01:47,680
acquired

45
00:01:47,680 --> 00:01:51,520
by bosch so let's welcome dr ken to

46
00:01:51,520 --> 00:01:55,840
deliver his presentation

47
00:01:55,840 --> 00:02:01,600
hi nice to see everybody

48
00:02:02,479 --> 00:02:04,399
ken do you want to start sharing your

49
00:02:04,399 --> 00:02:05,600
screen i'll

50
00:02:05,600 --> 00:02:09,038
just share my screen all right

51
00:02:09,038 --> 00:02:11,360
one quick information friends if you

52
00:02:11,360 --> 00:02:12,879
have any questions

53
00:02:12,879 --> 00:02:15,760
please type it in the zoom chat dr ken

54
00:02:15,760 --> 00:02:16,879
would answer them

55
00:02:16,879 --> 00:02:20,720
after this presentation is complete

56
00:02:21,120 --> 00:02:25,120
order again okay so i'm going to talk uh

57
00:02:25,120 --> 00:02:27,599
uh here about uh very briefly about uh

58
00:02:27,599 --> 00:02:29,360
some of the canned security issues

59
00:02:29,360 --> 00:02:32,000
and then uh talking about how to secure

60
00:02:32,000 --> 00:02:32,800
can bus

61
00:02:32,800 --> 00:02:35,840
against those attacks by uh augmenting

62
00:02:35,840 --> 00:02:37,840
the can protocol itself with uh with

63
00:02:37,840 --> 00:02:40,319
additional hardware

64
00:02:40,319 --> 00:02:43,599
so just a quick intro to can uh it's a

65
00:02:43,599 --> 00:02:45,519
really really useful uh networking

66
00:02:45,519 --> 00:02:47,280
protocol um

67
00:02:47,280 --> 00:02:49,040
it's got really important properties for

68
00:02:49,040 --> 00:02:50,319
embedded systems

69
00:02:50,319 --> 00:02:52,720
um so for example uh the message even

70
00:02:52,720 --> 00:02:54,080
though the bandwidth is low it has very

71
00:02:54,080 --> 00:02:55,760
very short message latencies

72
00:02:55,760 --> 00:02:59,040
um it's atomic broadcast so that when a

73
00:02:59,040 --> 00:03:00,080
message has been sent

74
00:03:00,080 --> 00:03:02,080
uh everybody on the bus has got that

75
00:03:02,080 --> 00:03:04,159
message and no one's missed it

76
00:03:04,159 --> 00:03:07,519
so it's really well designed but it's uh

77
00:03:07,519 --> 00:03:10,720
it's pretty old um and we see today

78
00:03:10,720 --> 00:03:13,040
ethernet's got 100 times the bandwidth

79
00:03:13,040 --> 00:03:14,400
but ethernet struggles to replicate

80
00:03:14,400 --> 00:03:16,080
those facilities of can

81
00:03:16,080 --> 00:03:19,440
so even though can is old 30 years

82
00:03:19,440 --> 00:03:21,440
uh uh and more it's uh it's going to be

83
00:03:21,440 --> 00:03:22,480
with us for for

84
00:03:22,480 --> 00:03:25,519
uh for many years to come i think um

85
00:03:25,519 --> 00:03:27,680
but the big problem because it's so old

86
00:03:27,680 --> 00:03:29,519
is it doesn't have any security because

87
00:03:29,519 --> 00:03:31,200
it was conceived in the 1980s before

88
00:03:31,200 --> 00:03:32,720
there were connected cars

89
00:03:32,720 --> 00:03:35,680
or an internet for them to connect to um

90
00:03:35,680 --> 00:03:36,080
so

91
00:03:36,080 --> 00:03:37,440
it didn't cross anyone's mind that

92
00:03:37,440 --> 00:03:39,280
security would be an issue

93
00:03:39,280 --> 00:03:41,040
but we now need to address this for can

94
00:03:41,040 --> 00:03:42,720
because can is where all the vital

95
00:03:42,720 --> 00:03:44,400
actuators are controlled you can you can

96
00:03:44,400 --> 00:03:46,640
definitely add bags uh by cam messages

97
00:03:46,640 --> 00:03:48,560
you can open doors you can

98
00:03:48,560 --> 00:03:50,799
uh screw up all kinds of mechanical

99
00:03:50,799 --> 00:03:51,840
things by

100
00:03:51,840 --> 00:03:55,120
getting control of the can bus

101
00:03:55,120 --> 00:03:57,439
so how do people get control of the

102
00:03:57,439 --> 00:03:58,959
canvas

103
00:03:58,959 --> 00:04:01,280
one is physical wiring you find a part

104
00:04:01,280 --> 00:04:02,720
of the system where where the bus has

105
00:04:02,720 --> 00:04:04,640
been exposed so so criminals know that

106
00:04:04,640 --> 00:04:06,080
under a particular wheel arch maybe

107
00:04:06,080 --> 00:04:06,959
there's uh

108
00:04:06,959 --> 00:04:10,319
uh sensors uh for uh for

109
00:04:10,319 --> 00:04:12,640
some kind of steering system or abs and

110
00:04:12,640 --> 00:04:14,560
you find the wires and you cut them and

111
00:04:14,560 --> 00:04:16,880
splice in a device directly onto the bus

112
00:04:16,880 --> 00:04:19,839
or you might just use an obd2 uh dongle

113
00:04:19,839 --> 00:04:21,680
that you've plugged in

114
00:04:21,680 --> 00:04:22,880
lots of third-party tracker and

115
00:04:22,880 --> 00:04:24,960
immobilizers use these dongles for

116
00:04:24,960 --> 00:04:26,479
providing their services so if you hack

117
00:04:26,479 --> 00:04:28,160
their services you can hack onto the can

118
00:04:28,160 --> 00:04:28,479
bus

119
00:04:28,479 --> 00:04:30,880
through their devices and some people

120
00:04:30,880 --> 00:04:31,600
are

121
00:04:31,600 --> 00:04:33,199
even putting emissions cheat devices in

122
00:04:33,199 --> 00:04:34,720
you can buy um

123
00:04:34,720 --> 00:04:36,479
boxes that pretend that there's plenty

124
00:04:36,479 --> 00:04:38,560
of ad blue uh system in your in your

125
00:04:38,560 --> 00:04:38,960
truck

126
00:04:38,960 --> 00:04:41,199
and in fact you're just spewing uh nasty

127
00:04:41,199 --> 00:04:42,000
emissions everywhere

128
00:04:42,000 --> 00:04:43,440
and you're using that to cut the cost of

129
00:04:43,440 --> 00:04:45,280
that blue by cheating the emission

130
00:04:45,280 --> 00:04:46,320
system

131
00:04:46,320 --> 00:04:48,400
so basically you can get on by by

132
00:04:48,400 --> 00:04:50,560
physically attacking the vehicle

133
00:04:50,560 --> 00:04:53,280
um or you can hijack an existing device

134
00:04:53,280 --> 00:04:54,639
connected

135
00:04:54,639 --> 00:04:57,120
so if you can exploit a vulnerability in

136
00:04:57,120 --> 00:04:57,919
a piece of

137
00:04:57,919 --> 00:05:00,720
ecu software you can push malware in

138
00:05:00,720 --> 00:05:02,320
take over that device and now you've got

139
00:05:02,320 --> 00:05:04,080
access to ken through that device

140
00:05:04,080 --> 00:05:06,320
so car infotainment for example is a

141
00:05:06,320 --> 00:05:08,479
classic these are the ones we always see

142
00:05:08,479 --> 00:05:10,320
um people are hanking car entertainment

143
00:05:10,320 --> 00:05:12,320
because it's uh big bloated pieces of

144
00:05:12,320 --> 00:05:12,880
software

145
00:05:12,880 --> 00:05:15,600
that are not kept up to date but things

146
00:05:15,600 --> 00:05:15,919
like

147
00:05:15,919 --> 00:05:17,600
insurance companies now push out uh

148
00:05:17,600 --> 00:05:20,400
dongles to customers to plug into obd2

149
00:05:20,400 --> 00:05:21,840
uh and then the insurance company is

150
00:05:21,840 --> 00:05:23,680
talking to its own dongle and listening

151
00:05:23,680 --> 00:05:24,880
to can frames

152
00:05:24,880 --> 00:05:28,000
um so the entire chain now from the app

153
00:05:28,000 --> 00:05:29,600
to the insurance company the insurance

154
00:05:29,600 --> 00:05:31,199
companies back end systems

155
00:05:31,199 --> 00:05:33,840
all the way through if that's hacked a

156
00:05:33,840 --> 00:05:34,800
particular place

157
00:05:34,800 --> 00:05:37,120
you could get access to canvas that way

158
00:05:37,120 --> 00:05:38,320
we've seen we've seen actually

159
00:05:38,320 --> 00:05:40,000
proof of proven concepts of hacking a

160
00:05:40,000 --> 00:05:41,600
telematics unit was done back

161
00:05:41,600 --> 00:05:43,840
almost 10 years ago um by stephen

162
00:05:43,840 --> 00:05:44,639
checkaway's

163
00:05:44,639 --> 00:05:47,600
group where they used a telematics and

164
00:05:47,600 --> 00:05:48,240
an actual

165
00:05:48,240 --> 00:05:51,440
dialogue modem radio modem in those days

166
00:05:51,440 --> 00:05:53,199
and we're able to get access to cannes

167
00:05:53,199 --> 00:05:56,479
so it's been a problem for a while now

168
00:05:56,479 --> 00:05:59,840
um but it's not just big systems

169
00:05:59,840 --> 00:06:02,800
like uh infotainment uh also little tiny

170
00:06:02,800 --> 00:06:04,560
uh embedded firmware systems so for

171
00:06:04,560 --> 00:06:05,520
example we've seen

172
00:06:05,520 --> 00:06:08,479
uh tire pressure monitoring systems uh

173
00:06:08,479 --> 00:06:10,319
have been crashed by uh fuzzing the

174
00:06:10,319 --> 00:06:11,039
sensors

175
00:06:11,039 --> 00:06:13,039
the radio sensors from the tyres you can

176
00:06:13,039 --> 00:06:14,319
just step in and pretend that and of

177
00:06:14,319 --> 00:06:15,120
course

178
00:06:15,120 --> 00:06:16,400
once you can cause the system to crash

179
00:06:16,400 --> 00:06:18,000
that's normally an indication the stack

180
00:06:18,000 --> 00:06:19,600
has got uh screwed up in some way or

181
00:06:19,600 --> 00:06:20,720
there's a buffer overflow

182
00:06:20,720 --> 00:06:22,800
and that's the first step to a remote

183
00:06:22,800 --> 00:06:24,800
execution vulnerability

184
00:06:24,800 --> 00:06:26,319
um and then we've seen libraries so if

185
00:06:26,319 --> 00:06:28,319
you've got a diagnostics rip and you're

186
00:06:28,319 --> 00:06:28,960
using that

187
00:06:28,960 --> 00:06:32,160
trek tcpip suite uh huge

188
00:06:32,160 --> 00:06:33,919
remote execution vulnerabilities have

189
00:06:33,919 --> 00:06:37,120
been discovered in that uh recently

190
00:06:37,120 --> 00:06:38,880
um now there are a couple of types of

191
00:06:38,880 --> 00:06:40,319
attack i've tried to categorize this

192
00:06:40,319 --> 00:06:42,000
here

193
00:06:42,000 --> 00:06:44,800
with with can one is frame attacks which

194
00:06:44,800 --> 00:06:46,720
you make via a can controller

195
00:06:46,720 --> 00:06:48,639
so the frames sent on the bus comply

196
00:06:48,639 --> 00:06:49,840
with the cam protocol because they're

197
00:06:49,840 --> 00:06:51,680
coming out of a can controller so

198
00:06:51,680 --> 00:06:54,720
an obt-2 dongle uh connected via say

199
00:06:54,720 --> 00:06:56,080
bluetooth to a laptop

200
00:06:56,080 --> 00:06:58,080
um the dongle itself is it's got a cam

201
00:06:58,080 --> 00:06:59,120
controller on it

202
00:06:59,120 --> 00:07:01,360
and it's the the hacking is by say the

203
00:07:01,360 --> 00:07:02,400
laptop

204
00:07:02,400 --> 00:07:04,560
so it's just frames and a hacked

205
00:07:04,560 --> 00:07:05,599
infotainment system

206
00:07:05,599 --> 00:07:08,400
and you use the linux socket can api

207
00:07:08,400 --> 00:07:10,560
you're sending out cam frames

208
00:07:10,560 --> 00:07:12,800
the other approach is with protocol

209
00:07:12,800 --> 00:07:13,680
attacks

210
00:07:13,680 --> 00:07:15,680
and that's where you hijack the uh the

211
00:07:15,680 --> 00:07:16,720
can transmit

212
00:07:16,720 --> 00:07:18,880
pin on the cam transceiver and then you

213
00:07:18,880 --> 00:07:20,240
don't have to follow the cameras you can

214
00:07:20,240 --> 00:07:21,840
send any pattern on the bus

215
00:07:21,840 --> 00:07:23,599
and you can craft special attacks that

216
00:07:23,599 --> 00:07:25,520
exploit features of the cam protocol

217
00:07:25,520 --> 00:07:26,960
so you wouldn't be able to get access to

218
00:07:26,960 --> 00:07:29,599
these if you set them as frames from can

219
00:07:29,599 --> 00:07:31,919
controller but if you can if you can

220
00:07:31,919 --> 00:07:33,120
take control of that pin you can do all

221
00:07:33,120 --> 00:07:34,160
kinds of things

222
00:07:34,160 --> 00:07:38,080
um and i wrote a um uh

223
00:07:38,080 --> 00:07:40,560
a library the can hack library it's uh

224
00:07:40,560 --> 00:07:41,919
i'll put a link on here

225
00:07:41,919 --> 00:07:43,680
you can play with it in github just to

226
00:07:43,680 --> 00:07:45,120
prove the kind of things you can do just

227
00:07:45,120 --> 00:07:47,360
by uh taking control of that pin

228
00:07:47,360 --> 00:07:51,680
um and bit banging uh can protocol

229
00:07:51,759 --> 00:07:53,599
uh so on frame attack side the number

230
00:07:53,599 --> 00:07:55,120
one uh attack on can

231
00:07:55,120 --> 00:07:57,199
is this is what everyone is showing is a

232
00:07:57,199 --> 00:07:58,879
framed spoofing attack

233
00:07:58,879 --> 00:07:59,919
that's really easy to do with the can

234
00:07:59,919 --> 00:08:01,759
controller it's what i call an

235
00:08:01,759 --> 00:08:02,960
authentication attack

236
00:08:02,960 --> 00:08:04,800
you get the receivers to accept the can

237
00:08:04,800 --> 00:08:07,599
frame uh as legitimate

238
00:08:07,599 --> 00:08:11,039
um but uh

239
00:08:11,039 --> 00:08:12,560
that's that's pretty easy to do you just

240
00:08:12,560 --> 00:08:13,919
push the cam frame on the bus and when

241
00:08:13,919 --> 00:08:15,199
the receiver sees it they just

242
00:08:15,199 --> 00:08:18,560
assume it's come from the right place um

243
00:08:18,560 --> 00:08:20,879
another example is a bus plot attack so

244
00:08:20,879 --> 00:08:22,960
you send frames that aren't boost they

245
00:08:22,960 --> 00:08:24,560
are coming from the right place

246
00:08:24,560 --> 00:08:26,479
um but they're more often in the land so

247
00:08:26,479 --> 00:08:27,759
so maybe you'd send something

248
00:08:27,759 --> 00:08:31,199
um uh through um infotainment that's

249
00:08:31,199 --> 00:08:32,559
allowed to come out

250
00:08:32,559 --> 00:08:34,958
um but uh you flood the bus so maybe the

251
00:08:34,958 --> 00:08:36,799
infotainment is is lighting up a

252
00:08:36,799 --> 00:08:38,399
a light on the dash when something

253
00:08:38,399 --> 00:08:40,080
happens and you flood the uh the bus

254
00:08:40,080 --> 00:08:41,679
with frames off that and all the frames

255
00:08:41,679 --> 00:08:43,120
with lower priority

256
00:08:43,120 --> 00:08:45,600
um basically getting jammed off the bus

257
00:08:45,600 --> 00:08:47,279
and they exceed all the latencies

258
00:08:47,279 --> 00:08:49,920
and then that causes timeouts and stuff

259
00:08:49,920 --> 00:08:51,279
and the timeouts and loss frames are

260
00:08:51,279 --> 00:08:52,399
occurring in

261
00:08:52,399 --> 00:08:53,839
different ecu's than say the

262
00:08:53,839 --> 00:08:55,360
infotainment so you it's actually quite

263
00:08:55,360 --> 00:08:56,720
hard to work out where where the attack

264
00:08:56,720 --> 00:08:58,160
came from

265
00:08:58,160 --> 00:09:01,600
and that's a denial of service attack um

266
00:09:01,600 --> 00:09:03,279
so on the protocol attacks it's just

267
00:09:03,279 --> 00:09:05,200
very simple here you reconfigure the i o

268
00:09:05,200 --> 00:09:05,760
port

269
00:09:05,760 --> 00:09:07,279
um if you've got an on-chip

270
00:09:07,279 --> 00:09:09,440
microcontroller uh with an on-chip can

271
00:09:09,440 --> 00:09:10,560
controller on it

272
00:09:10,560 --> 00:09:13,680
uh you just re-uh you tell the

273
00:09:13,680 --> 00:09:14,720
microcontroller to

274
00:09:14,720 --> 00:09:16,240
turn that cantx pin on your

275
00:09:16,240 --> 00:09:18,560
microcontroller into a gpio pin

276
00:09:18,560 --> 00:09:20,839
and then bitbang software to drive that

277
00:09:20,839 --> 00:09:23,200
pin um

278
00:09:23,200 --> 00:09:25,920
and once you've got control of that of

279
00:09:25,920 --> 00:09:28,399
that pin

280
00:09:29,839 --> 00:09:31,839
that is complete control of the bus i

281
00:09:31,839 --> 00:09:33,200
mean you could just

282
00:09:33,200 --> 00:09:34,800
send a zero to that pin and that would

283
00:09:34,800 --> 00:09:35,839
lock everyone off the bus and

284
00:09:35,839 --> 00:09:37,519
permanently kill the bus

285
00:09:37,519 --> 00:09:40,560
um that's the easiest denial of service

286
00:09:40,560 --> 00:09:42,399
attack when you handle uh

287
00:09:42,399 --> 00:09:45,839
bit banging um so here is uh uh just a

288
00:09:45,839 --> 00:09:46,959
link if you if you wanna have a look

289
00:09:46,959 --> 00:09:48,959
i've got a um

290
00:09:48,959 --> 00:09:50,240
a little website in the description of

291
00:09:50,240 --> 00:09:52,560
that and there's a youtube video showing

292
00:09:52,560 --> 00:09:54,160
uh a bunch of those attacks

293
00:09:54,160 --> 00:09:56,399
and how uh um how we can how they can

294
00:09:56,399 --> 00:09:57,519
take place they can do all kinds of

295
00:09:57,519 --> 00:09:57,920
things

296
00:09:57,920 --> 00:09:59,279
uh i won't go into details because

297
00:09:59,279 --> 00:10:01,200
there's not time but uh

298
00:10:01,200 --> 00:10:02,320
there's a big youtube video there

299
00:10:02,320 --> 00:10:03,680
showing them all actually happening for

300
00:10:03,680 --> 00:10:05,519
real

301
00:10:05,519 --> 00:10:07,120
so those are the kind of attacks we see

302
00:10:07,120 --> 00:10:08,800
on can frame and

303
00:10:08,800 --> 00:10:11,120
protocol attacks denial of service and

304
00:10:11,120 --> 00:10:12,480
authentication

305
00:10:12,480 --> 00:10:14,240
uh so how do we how do we mitigate that

306
00:10:14,240 --> 00:10:16,320
well and the the normal uh approach is

307
00:10:16,320 --> 00:10:16,640
uh

308
00:10:16,640 --> 00:10:18,800
you start to take all your info infosec

309
00:10:18,800 --> 00:10:20,480
stuff from the main ice stream it world

310
00:10:20,480 --> 00:10:21,680
and yeah yeah let's have a

311
00:10:21,680 --> 00:10:24,399
intrusion detection system um so you

312
00:10:24,399 --> 00:10:25,440
basically have a look at traffic

313
00:10:25,440 --> 00:10:26,480
patterns on the bus

314
00:10:26,480 --> 00:10:28,560
and see if there's something a bit odd

315
00:10:28,560 --> 00:10:30,399
about it so if an extra frame comes in

316
00:10:30,399 --> 00:10:32,160
more often expected it might be a spoof

317
00:10:32,160 --> 00:10:33,200
because it might have come from an

318
00:10:33,200 --> 00:10:34,800
attacker

319
00:10:34,800 --> 00:10:36,480
but there's a problem that that there

320
00:10:36,480 --> 00:10:38,079
are false positive negatives so you spot

321
00:10:38,079 --> 00:10:39,360
some extra frames have come through

322
00:10:39,360 --> 00:10:41,360
which is you're pretty sure spoof frames

323
00:10:41,360 --> 00:10:42,720
but you don't know which ones are the

324
00:10:42,720 --> 00:10:45,120
spoof and which ones are the real ones

325
00:10:45,120 --> 00:10:48,160
and any decision you make um the malware

326
00:10:48,160 --> 00:10:49,200
could merely uh

327
00:10:49,200 --> 00:10:50,959
make sure its frame came before or after

328
00:10:50,959 --> 00:10:52,399
the way you thought it was

329
00:10:52,399 --> 00:10:54,959
and break your your algorithm so you

330
00:10:54,959 --> 00:10:56,640
can't you can detect there's some kind

331
00:10:56,640 --> 00:10:57,920
of weird thing going on but you can't

332
00:10:57,920 --> 00:10:59,600
actually stop it

333
00:10:59,600 --> 00:11:01,120
now maybe that's okay for certain

334
00:11:01,120 --> 00:11:03,279
applications but uh it's not okay for

335
00:11:03,279 --> 00:11:05,680
for others if if you're worried about

336
00:11:05,680 --> 00:11:09,120
the actuators being controlled from can

337
00:11:09,120 --> 00:11:12,079
uh so the the second level of mitigation

338
00:11:12,079 --> 00:11:13,680
is a security gateway

339
00:11:13,680 --> 00:11:15,920
so you put all the high-risk devices

340
00:11:15,920 --> 00:11:17,680
behind the gateway and then you firewall

341
00:11:17,680 --> 00:11:18,240
it

342
00:11:18,240 --> 00:11:20,959
um uh to the main bus so you don't send

343
00:11:20,959 --> 00:11:21,680
through frames

344
00:11:21,680 --> 00:11:23,279
except the ones on the list and you

345
00:11:23,279 --> 00:11:25,040
don't send back frames back

346
00:11:25,040 --> 00:11:26,880
unless there's a need to know them so

347
00:11:26,880 --> 00:11:29,519
obd2 uh ports should be behind a

348
00:11:29,519 --> 00:11:31,200
a firewall so that they can't see the

349
00:11:31,200 --> 00:11:32,880
cam dust directly and then you can't

350
00:11:32,880 --> 00:11:34,560
sniff it directly

351
00:11:34,560 --> 00:11:36,560
but there's uh a ton of problems with

352
00:11:36,560 --> 00:11:38,000
this one is that it doesn't actually

353
00:11:38,000 --> 00:11:38,720
stop you

354
00:11:38,720 --> 00:11:42,079
hijacking um uh

355
00:11:42,079 --> 00:11:44,079
uh a device if you can do that via

356
00:11:44,079 --> 00:11:45,600
legitimate traffic so if you can send a

357
00:11:45,600 --> 00:11:48,240
diagnostic uh set of diagnostic commands

358
00:11:48,240 --> 00:11:51,600
and they um they cause a stack overflow

359
00:11:51,600 --> 00:11:52,560
bug or something

360
00:11:52,560 --> 00:11:54,560
um they can go through obd2 because it's

361
00:11:54,560 --> 00:11:56,160
supposed to pass through diagnostic

362
00:11:56,160 --> 00:11:56,800
commands

363
00:11:56,800 --> 00:11:58,079
and there's a bunch of implementation

364
00:11:58,079 --> 00:12:00,800
issues um again get in touch with me if

365
00:12:00,800 --> 00:12:01,920
you want to talk about priority

366
00:12:01,920 --> 00:12:04,079
inversion in frame queuing i've got a

367
00:12:04,079 --> 00:12:05,360
little video explaining

368
00:12:05,360 --> 00:12:07,120
how that problem is and then there's

369
00:12:07,120 --> 00:12:08,560
problems of securely updating the

370
00:12:08,560 --> 00:12:09,839
firmware securely programming the

371
00:12:09,839 --> 00:12:10,639
filtering rules

372
00:12:10,639 --> 00:12:12,880
um itself the security gateway could

373
00:12:12,880 --> 00:12:13,839
could be vulnerable to

374
00:12:13,839 --> 00:12:17,279
its own um security issues

375
00:12:17,279 --> 00:12:18,720
and then there's encryption that

376
00:12:18,720 --> 00:12:20,639
everyone proposes and if you have a

377
00:12:20,639 --> 00:12:22,160
crypto hammer

378
00:12:22,160 --> 00:12:24,160
every security problem is a nail you

379
00:12:24,160 --> 00:12:25,920
will apply crypto crypto crypto crypto

380
00:12:25,920 --> 00:12:27,279
crypto and hammer every problem with

381
00:12:27,279 --> 00:12:28,639
cryptography

382
00:12:28,639 --> 00:12:31,279
but it's not actually that great

383
00:12:31,279 --> 00:12:32,160
solution in the end

384
00:12:32,160 --> 00:12:34,079
uh so it provides authentication you add

385
00:12:34,079 --> 00:12:36,160
an authentication code to every message

386
00:12:36,160 --> 00:12:38,000
to prove that it came from not the

387
00:12:38,000 --> 00:12:39,360
entertainment but the engine management

388
00:12:39,360 --> 00:12:40,399
system

389
00:12:40,399 --> 00:12:42,560
but there's a ton of issues with this

390
00:12:42,560 --> 00:12:44,079
and i know this because i built a crypto

391
00:12:44,079 --> 00:12:45,200
system again

392
00:12:45,200 --> 00:12:46,639
so first of all it doesn't address

393
00:12:46,639 --> 00:12:48,480
denial of service attacks at all

394
00:12:48,480 --> 00:12:51,120
um or can protocol attacks um because

395
00:12:51,120 --> 00:12:52,000
it's above the layer

396
00:12:52,000 --> 00:12:54,480
of the cam protocol there's all kinds of

397
00:12:54,480 --> 00:12:55,839
issues with key management because you

398
00:12:55,839 --> 00:12:57,360
need secure key distribution and then

399
00:12:57,360 --> 00:12:58,320
you need to make sure you can't roll

400
00:12:58,320 --> 00:12:58,959
them back

401
00:12:58,959 --> 00:13:01,200
and all kinds of stuff like that that's

402
00:13:01,200 --> 00:13:02,560
that's a whole lot of problems

403
00:13:02,560 --> 00:13:03,920
and there's implementation problems

404
00:13:03,920 --> 00:13:06,160
there's high cpu overheads there's

405
00:13:06,160 --> 00:13:07,440
you've doubled all the bandwidth if you

406
00:13:07,440 --> 00:13:09,680
want to put 64-bit keys on every camera

407
00:13:09,680 --> 00:13:10,160
frame

408
00:13:10,160 --> 00:13:11,839
there's an issue with how you start how

409
00:13:11,839 --> 00:13:13,360
you synchronize devices in

410
00:13:13,360 --> 00:13:16,399
into a system there's no um

411
00:13:16,399 --> 00:13:18,800
there's no most most crypto systems have

412
00:13:18,800 --> 00:13:20,079
like key exchange

413
00:13:20,079 --> 00:13:21,600
but if you've gone through a watchdog

414
00:13:21,600 --> 00:13:23,440
reset you've now lost a whole bunch of

415
00:13:23,440 --> 00:13:24,399
your

416
00:13:24,399 --> 00:13:25,920
session keys for example and they've got

417
00:13:25,920 --> 00:13:27,920
to bring them back on and you can't talk

418
00:13:27,920 --> 00:13:31,040
uh securely until you can get back in so

419
00:13:31,040 --> 00:13:32,079
that's a big problem

420
00:13:32,079 --> 00:13:33,360
replay attacks is a problem if you

421
00:13:33,360 --> 00:13:34,560
replay a message that's got an

422
00:13:34,560 --> 00:13:35,440
authenticated

423
00:13:35,440 --> 00:13:38,720
code with it so you just store a copy of

424
00:13:38,720 --> 00:13:40,079
please unlock the doors

425
00:13:40,079 --> 00:13:41,839
and then replay that later on when you

426
00:13:41,839 --> 00:13:43,279
want the doors to be unlocked when when

427
00:13:43,279 --> 00:13:44,240
the owner

428
00:13:44,240 --> 00:13:47,199
has gone away so fixing that brings a

429
00:13:47,199 --> 00:13:48,079
whole lot of problems

430
00:13:48,079 --> 00:13:49,600
and then the worst of them is uh there's

431
00:13:49,600 --> 00:13:51,040
actually no deniability for a lot of

432
00:13:51,040 --> 00:13:52,880
this encryption systems uh because uh

433
00:13:52,880 --> 00:13:53,519
there's they're

434
00:13:53,519 --> 00:13:56,480
um uh symmetric with shared keys if you

435
00:13:56,480 --> 00:13:58,480
hijack a node that's got the shared key

436
00:13:58,480 --> 00:13:59,839
that everyone is using to authenticate

437
00:13:59,839 --> 00:14:00,720
all their messages

438
00:14:00,720 --> 00:14:03,440
then you can generate legitimate

439
00:14:03,440 --> 00:14:04,079
messages

440
00:14:04,079 --> 00:14:05,440
that appear to come from somebody else

441
00:14:05,440 --> 00:14:06,639
because you've got the same key that's

442
00:14:06,639 --> 00:14:08,000
being used to authenticate that

443
00:14:08,000 --> 00:14:11,120
so you can still spoof frames

444
00:14:11,120 --> 00:14:13,519
so you've gone around all of this stuff

445
00:14:13,519 --> 00:14:14,880
and in the end encryption has bought you

446
00:14:14,880 --> 00:14:16,240
almost

447
00:14:16,240 --> 00:14:19,040
nothing in terms of uh protection from

448
00:14:19,040 --> 00:14:20,079
authentication

449
00:14:20,079 --> 00:14:22,000
denial of service and all the things

450
00:14:22,000 --> 00:14:23,920
we've been talking about

451
00:14:23,920 --> 00:14:26,000
so we should take a step back what do we

452
00:14:26,000 --> 00:14:28,240
actually need from can security

453
00:14:28,240 --> 00:14:30,959
firstly we must authenticate cam frames

454
00:14:30,959 --> 00:14:31,839
so that

455
00:14:31,839 --> 00:14:35,199
uh only frames from the legitimate

456
00:14:35,199 --> 00:14:37,680
sender get delivered to the receivers

457
00:14:37,680 --> 00:14:39,760
that's a pretty simple requirement and

458
00:14:39,760 --> 00:14:41,040
we must have denial of service

459
00:14:41,040 --> 00:14:41,680
protection

460
00:14:41,680 --> 00:14:42,839
so you shouldn't be able to flood the

461
00:14:42,839 --> 00:14:45,440
bus um you shouldn't be able to even

462
00:14:45,440 --> 00:14:47,040
flood in a you know like a

463
00:14:47,040 --> 00:14:49,120
a small a small dampening or a little

464
00:14:49,120 --> 00:14:51,120
rain shower just as a frame is supposed

465
00:14:51,120 --> 00:14:52,320
to be turning up

466
00:14:52,320 --> 00:14:54,160
if you just flood for a little bit you

467
00:14:54,160 --> 00:14:56,639
could cause that frame to miss a

468
00:14:56,639 --> 00:14:57,440
deadline

469
00:14:57,440 --> 00:14:58,959
and if it misses a deadline it causes a

470
00:14:58,959 --> 00:15:01,600
timeout which causes a fault

471
00:15:01,600 --> 00:15:03,360
system to be triggered you shouldn't

472
00:15:03,360 --> 00:15:05,040
even be able to flood for a little bit

473
00:15:05,040 --> 00:15:07,040
of the bus so we need we need complete

474
00:15:07,040 --> 00:15:08,320
protection of the can bus

475
00:15:08,320 --> 00:15:10,160
because it's got to be able to operate

476
00:15:10,160 --> 00:15:11,440
in all circumstances

477
00:15:11,440 --> 00:15:14,560
and resist the attacks and we want it to

478
00:15:14,560 --> 00:15:16,000
work any security system we want it to

479
00:15:16,000 --> 00:15:18,240
work with existing can networks

480
00:15:18,240 --> 00:15:19,920
obviously we don't have to rewire an

481
00:15:19,920 --> 00:15:21,519
entire architecture and change

482
00:15:21,519 --> 00:15:22,399
everything just

483
00:15:22,399 --> 00:15:25,199
for uh trying to secure it and ideally

484
00:15:25,199 --> 00:15:26,000
we wouldn't

485
00:15:26,000 --> 00:15:27,680
need anyone to change any software

486
00:15:27,680 --> 00:15:29,120
because changing software when you've

487
00:15:29,120 --> 00:15:29,839
got

488
00:15:29,839 --> 00:15:31,199
tons and tons and tons of reusable

489
00:15:31,199 --> 00:15:32,880
components with fixed apis

490
00:15:32,880 --> 00:15:36,240
is a real nightmare so

491
00:15:36,240 --> 00:15:40,240
the solution uh is that we use hardware

492
00:15:40,240 --> 00:15:42,240
but hardware at the can protocol level

493
00:15:42,240 --> 00:15:43,920
and uh to do these things

494
00:15:43,920 --> 00:15:46,320
in hardware uh and let's see if we can

495
00:15:46,320 --> 00:15:47,680
step out of the way of the

496
00:15:47,680 --> 00:15:51,199
the software so the the first guys to

497
00:15:51,199 --> 00:15:54,240
uh to address this that i've seen is um

498
00:15:54,240 --> 00:15:57,519
nxp they've got a secure can transceiver

499
00:15:57,519 --> 00:16:00,079
um and inside the can transceiver itself

500
00:16:00,079 --> 00:16:01,519
they've got uh

501
00:16:01,519 --> 00:16:04,399
uh a list of frames that are allowed to

502
00:16:04,399 --> 00:16:05,839
go and a list of frames that

503
00:16:05,839 --> 00:16:08,660
aren't allowed to be seen

504
00:16:08,660 --> 00:16:10,560
[Music]

505
00:16:10,560 --> 00:16:12,399
and what happens is if you uh for

506
00:16:12,399 --> 00:16:14,399
example if you send a frame

507
00:16:14,399 --> 00:16:17,440
um from a host and the

508
00:16:17,440 --> 00:16:21,519
id is not on the outgoing allow list

509
00:16:21,519 --> 00:16:23,120
then that's an attempt to spoof because

510
00:16:23,120 --> 00:16:24,880
you've got all the list your frame ids

511
00:16:24,880 --> 00:16:25,920
you're allowed to send and you're

512
00:16:25,920 --> 00:16:26,480
sending one

513
00:16:26,480 --> 00:16:28,240
on the list that's a spoof so the

514
00:16:28,240 --> 00:16:30,000
transceiver actually steps in and

515
00:16:30,000 --> 00:16:31,839
destroys the uh the cam frame with an

516
00:16:31,839 --> 00:16:32,800
error

517
00:16:32,800 --> 00:16:36,160
um and then it doesn't get through

518
00:16:36,160 --> 00:16:38,959
and any frame that you see on the bus

519
00:16:38,959 --> 00:16:40,399
that has an id

520
00:16:40,399 --> 00:16:44,160
that matches uh one on your list

521
00:16:44,160 --> 00:16:46,480
then somebody else is trying to spoof

522
00:16:46,480 --> 00:16:48,000
one of your hosts

523
00:16:48,000 --> 00:16:51,600
uh frames and so that is also a spoof

524
00:16:51,600 --> 00:16:52,720
and destroyed

525
00:16:52,720 --> 00:16:54,720
um so that list if you like is these uh

526
00:16:54,720 --> 00:16:56,320
the security logic

527
00:16:56,320 --> 00:16:57,839
uh for outgoing frames and incoming

528
00:16:57,839 --> 00:17:00,959
frames which is okay

529
00:17:00,959 --> 00:17:03,199
um and then there's a kind of uh

530
00:17:03,199 --> 00:17:04,720
anti-denial of service attack feature

531
00:17:04,720 --> 00:17:06,160
where they have a leaky bucket algorithm

532
00:17:06,160 --> 00:17:07,039
to limit

533
00:17:07,039 --> 00:17:09,039
the rate the frames go out so they can't

534
00:17:09,039 --> 00:17:11,760
be completely flooded

535
00:17:11,760 --> 00:17:14,160
um there's a couple of issues that have

536
00:17:14,160 --> 00:17:15,599
to be sold for this kind of technique to

537
00:17:15,599 --> 00:17:16,319
work

538
00:17:16,319 --> 00:17:18,240
one of which is the programming of those

539
00:17:18,240 --> 00:17:20,559
idealists that has to be secure

540
00:17:20,559 --> 00:17:23,679
um because uh

541
00:17:23,679 --> 00:17:26,559
if if you physically can't get to a box

542
00:17:26,559 --> 00:17:28,480
once you've installed an ecu deep inside

543
00:17:28,480 --> 00:17:29,280
a vehicle

544
00:17:29,280 --> 00:17:30,640
you can't get to it to take it out put

545
00:17:30,640 --> 00:17:32,320
on the bench and reprogram it so that

546
00:17:32,320 --> 00:17:33,600
has to be programmable

547
00:17:33,600 --> 00:17:35,919
over the can bus and it has to be an

548
00:17:35,919 --> 00:17:37,200
atomic system with some kind of

549
00:17:37,200 --> 00:17:38,480
transaction so that

550
00:17:38,480 --> 00:17:40,960
the same lists are consistently applied

551
00:17:40,960 --> 00:17:41,840
everywhere

552
00:17:41,840 --> 00:17:43,440
and it has to be a secure method to

553
00:17:43,440 --> 00:17:45,039
authenticate the messages doing the

554
00:17:45,039 --> 00:17:46,720
programming of the lists because

555
00:17:46,720 --> 00:17:48,080
otherwise malware could just

556
00:17:48,080 --> 00:17:50,480
rewrite the lists so now you are

557
00:17:50,480 --> 00:17:52,000
bringing back all this requirement

558
00:17:52,000 --> 00:17:53,919
for in order for this authentication

559
00:17:53,919 --> 00:17:55,280
system to work it has to have an

560
00:17:55,280 --> 00:17:57,520
authentication system

561
00:17:57,520 --> 00:17:59,520
interesting and then the leaky bucket

562
00:17:59,520 --> 00:18:01,200
algorithm is actually weak protection

563
00:18:01,200 --> 00:18:02,640
against the nile of service

564
00:18:02,640 --> 00:18:04,640
bus flood is a crude attack but you can

565
00:18:04,640 --> 00:18:06,480
get a subtle bus flow attack which just

566
00:18:06,480 --> 00:18:09,600
causes four fry frames for example in

567
00:18:09,600 --> 00:18:10,960
just the wrong place

568
00:18:10,960 --> 00:18:13,280
to cause a targeted frame latency to be

569
00:18:13,280 --> 00:18:14,080
exceeded

570
00:18:14,080 --> 00:18:15,679
then it takes a timeout and then you've

571
00:18:15,679 --> 00:18:17,120
got your timeout response that you may

572
00:18:17,120 --> 00:18:17,919
be needing

573
00:18:17,919 --> 00:18:20,720
elsewhere um and we've also got to

574
00:18:20,720 --> 00:18:22,559
protect against canned protocol attacks

575
00:18:22,559 --> 00:18:22,880
and

576
00:18:22,880 --> 00:18:24,880
it's it's not really clear which ones of

577
00:18:24,880 --> 00:18:26,000
these uh

578
00:18:26,000 --> 00:18:27,760
the bus off attack is a famous one but

579
00:18:27,760 --> 00:18:29,039
there's lots of other attacks

580
00:18:29,039 --> 00:18:31,440
the janus attack is one i came up with

581
00:18:31,440 --> 00:18:32,480
where you can actually have

582
00:18:32,480 --> 00:18:35,039
multiple payloads inside a single cam

583
00:18:35,039 --> 00:18:35,760
frame

584
00:18:35,760 --> 00:18:37,760
um and different devices see different

585
00:18:37,760 --> 00:18:39,200
different payloads so you can see that

586
00:18:39,200 --> 00:18:40,840
on my camhack

587
00:18:40,840 --> 00:18:44,720
website uh so let's come to canhg which

588
00:18:44,720 --> 00:18:47,520
is what uh what my company's working on

589
00:18:47,520 --> 00:18:50,720
it's basically we augment standard can

590
00:18:50,720 --> 00:18:52,799
and the hd is for high speed with

591
00:18:52,799 --> 00:18:55,440
security features to guard the bus

592
00:18:55,440 --> 00:18:57,120
and what we do is we put out of band

593
00:18:57,120 --> 00:18:59,679
data inside a cam frame

594
00:18:59,679 --> 00:19:01,280
and that data is invisible to cam

595
00:19:01,280 --> 00:19:02,880
controllers um

596
00:19:02,880 --> 00:19:04,240
so therefore it's fully compatible with

597
00:19:04,240 --> 00:19:05,919
can it still can there can

598
00:19:05,919 --> 00:19:08,480
frames uh devices that don't have the

599
00:19:08,480 --> 00:19:09,760
hardware um

600
00:19:09,760 --> 00:19:13,039
don't see uh any of the outer band data

601
00:19:13,039 --> 00:19:14,720
so you can use existing canon

602
00:19:14,720 --> 00:19:16,000
controllers you can use all the same

603
00:19:16,000 --> 00:19:17,360
wiring topology

604
00:19:17,360 --> 00:19:19,919
uh and you can fully mix canon can hd on

605
00:19:19,919 --> 00:19:21,120
on the same bus because

606
00:19:21,120 --> 00:19:24,240
it is can uh and the way we do it

607
00:19:24,240 --> 00:19:26,720
is um this is a can frame uh here's a

608
00:19:26,720 --> 00:19:27,679
couple can bits

609
00:19:27,679 --> 00:19:30,799
so at 500 kilobits that's

610
00:19:30,799 --> 00:19:34,559
2 000 nanoseconds long um

611
00:19:34,559 --> 00:19:38,000
and uh with can there's a uh you have

612
00:19:38,000 --> 00:19:39,679
the bit time is is allowed for sort of

613
00:19:39,679 --> 00:19:41,200
propagation delays and so on

614
00:19:41,200 --> 00:19:43,120
and then for for the way it does

615
00:19:43,120 --> 00:19:45,120
arbitration and then there's a window

616
00:19:45,120 --> 00:19:47,039
in which uh all the devices have to take

617
00:19:47,039 --> 00:19:49,200
their samples of the can bit

618
00:19:49,200 --> 00:19:52,160
but after a arbitration that window is

619
00:19:52,160 --> 00:19:53,360
unnecessary

620
00:19:53,360 --> 00:19:56,400
um so what you can do

621
00:19:56,400 --> 00:19:58,400
is you can inject extra high speed

622
00:19:58,400 --> 00:20:00,160
little bits in the gaps between the

623
00:20:00,160 --> 00:20:01,600
sample points under certain uh

624
00:20:01,600 --> 00:20:03,440
conditions

625
00:20:03,440 --> 00:20:06,480
and those bits run a lot faster

626
00:20:06,480 --> 00:20:09,520
these are 104 nanoseconds and we come in

627
00:20:09,520 --> 00:20:10,880
and go slower if necessary

628
00:20:10,880 --> 00:20:13,919
and that's 10 megabits and we call those

629
00:20:13,919 --> 00:20:17,280
fast bits because they go fast

630
00:20:17,280 --> 00:20:19,760
so that's how we encode the data and

631
00:20:19,760 --> 00:20:21,360
then the basic concept for the security

632
00:20:21,360 --> 00:20:23,039
is the outer band data encodes a

633
00:20:23,039 --> 00:20:25,200
hardware source address of where the can

634
00:20:25,200 --> 00:20:26,720
frame came from

635
00:20:26,720 --> 00:20:28,240
so as the camera frame goes out we find

636
00:20:28,240 --> 00:20:30,640
a place to inject this uh this

637
00:20:30,640 --> 00:20:32,640
knhg header which contains the source

638
00:20:32,640 --> 00:20:33,919
address

639
00:20:33,919 --> 00:20:36,400
and that basically tags uh in hardware

640
00:20:36,400 --> 00:20:37,840
where the uh where the cam frame is

641
00:20:37,840 --> 00:20:38,559
coming from

642
00:20:38,559 --> 00:20:39,840
and there's no software required to

643
00:20:39,840 --> 00:20:41,919
drive that there's no no configuration

644
00:20:41,919 --> 00:20:43,760
required you just need to

645
00:20:43,760 --> 00:20:46,720
burn in or on a pcb define the the

646
00:20:46,720 --> 00:20:49,360
hardware address of the device

647
00:20:49,360 --> 00:20:51,440
and then a centralized uh intrusion

648
00:20:51,440 --> 00:20:53,039
detection in trees and prevention

649
00:20:53,039 --> 00:20:55,919
itps um has hardware to take that uh

650
00:20:55,919 --> 00:20:57,280
source address out

651
00:20:57,280 --> 00:20:59,440
decode the out-of-band data um as the

652
00:20:59,440 --> 00:21:00,799
cam frame is received

653
00:21:00,799 --> 00:21:04,240
and then use the can id and the expected

654
00:21:04,240 --> 00:21:07,280
source address check where it came from

655
00:21:07,280 --> 00:21:08,880
what it's sending and then you can

656
00:21:08,880 --> 00:21:10,960
decide if that's a spoof frame or not

657
00:21:10,960 --> 00:21:12,559
and that's crucially that's all happens

658
00:21:12,559 --> 00:21:14,240
before the frame is finished so the idp

659
00:21:14,240 --> 00:21:15,120
software

660
00:21:15,120 --> 00:21:17,679
idps software gets a an interrupt from

661
00:21:17,679 --> 00:21:19,280
uh from from the hardware module with

662
00:21:19,280 --> 00:21:20,480
the information

663
00:21:20,480 --> 00:21:24,240
tells the can hardware uh um

664
00:21:24,240 --> 00:21:25,840
the khd hardware to generate an error

665
00:21:25,840 --> 00:21:28,799
frame and then that destroys the frame

666
00:21:28,799 --> 00:21:31,440
and that provides uh authentication uh

667
00:21:31,440 --> 00:21:33,200
so if a frame has been received

668
00:21:33,200 --> 00:21:34,799
it was never destroyed and if it wasn't

669
00:21:34,799 --> 00:21:36,640
it was uh if it was never destroyed then

670
00:21:36,640 --> 00:21:37,919
the idps

671
00:21:37,919 --> 00:21:40,480
let it go through and so there's many

672
00:21:40,480 --> 00:21:42,080
further software on the

673
00:21:42,080 --> 00:21:45,200
on the host to do anything um

674
00:21:45,200 --> 00:21:47,760
so here here is how you would do what we

675
00:21:47,760 --> 00:21:49,919
call the guardian hardware

676
00:21:49,919 --> 00:21:53,200
so that sends normal can bits out

677
00:21:53,200 --> 00:21:56,240
and then as they go through

678
00:21:56,720 --> 00:21:59,919
the system they get augmented with

679
00:21:59,919 --> 00:22:03,280
extra fast bits uh injected in um

680
00:22:03,280 --> 00:22:04,799
that come basically from the source

681
00:22:04,799 --> 00:22:06,960
address through the hardware

682
00:22:06,960 --> 00:22:08,080
and then that's what goes out through

683
00:22:08,080 --> 00:22:11,600
the transceiver onto the canvas

684
00:22:11,600 --> 00:22:13,760
uh and then uh the other end of this is

685
00:22:13,760 --> 00:22:16,080
there's an idps somewhere in the system

686
00:22:16,080 --> 00:22:19,840
and this gets er er out of band data

687
00:22:19,840 --> 00:22:22,320
back out again uh from the cam frame so

688
00:22:22,320 --> 00:22:24,400
that gets uh the data

689
00:22:24,400 --> 00:22:27,600
but it also gets events so

690
00:22:27,600 --> 00:22:30,080
like now we have the can id here is your

691
00:22:30,080 --> 00:22:30,880
the header

692
00:22:30,880 --> 00:22:32,240
and this happens before the end of the

693
00:22:32,240 --> 00:22:35,039
cam frame and then this system can uh

694
00:22:35,039 --> 00:22:37,120
can tell this uh eye if it decides the

695
00:22:37,120 --> 00:22:39,360
frame is not allowed in this context

696
00:22:39,360 --> 00:22:42,000
to destroy it

697
00:22:42,880 --> 00:22:46,000
so this is how it kind of works so you

698
00:22:46,000 --> 00:22:47,280
have an id

699
00:22:47,280 --> 00:22:50,400
a body and an eof of a cam frame so the

700
00:22:50,400 --> 00:22:52,000
id goes out

701
00:22:52,000 --> 00:22:53,919
and then we get an event at the idps

702
00:22:53,919 --> 00:22:55,760
that says here's the id

703
00:22:55,760 --> 00:22:58,960
um then as the body uh the payload and

704
00:22:58,960 --> 00:23:00,960
dlc fields and someone go through

705
00:23:00,960 --> 00:23:04,400
um it gets tagged with uh the header

706
00:23:04,400 --> 00:23:07,280
which is an event generated and then the

707
00:23:07,280 --> 00:23:09,039
idps has time to make a decision

708
00:23:09,039 --> 00:23:11,919
and then can decide to kill the can

709
00:23:11,919 --> 00:23:12,640
frame

710
00:23:12,640 --> 00:23:16,159
so it pushes an error frame on the can

711
00:23:16,159 --> 00:23:17,440
bus and the canned protocol

712
00:23:17,440 --> 00:23:19,919
destroys that frame and then the system

713
00:23:19,919 --> 00:23:20,720
recovers

714
00:23:20,720 --> 00:23:23,840
as normal

715
00:23:23,919 --> 00:23:27,120
um now destroying that spoof frame

716
00:23:27,120 --> 00:23:29,200
is only the first layer of protection so

717
00:23:29,200 --> 00:23:31,679
it stops anyone receiving a spoof frame

718
00:23:31,679 --> 00:23:34,000
but the sending can controller will just

719
00:23:34,000 --> 00:23:35,679
retransmit that frame typically if it's

720
00:23:35,679 --> 00:23:37,200
coming from a can controller

721
00:23:37,200 --> 00:23:39,600
um because the can protocol requires a

722
00:23:39,600 --> 00:23:40,640
re-transmission

723
00:23:40,640 --> 00:23:42,880
um in fact you want that because that's

724
00:23:42,880 --> 00:23:45,360
what gives atomic broadcast

725
00:23:45,360 --> 00:23:47,679
um and then the idps will destroy the

726
00:23:47,679 --> 00:23:49,279
frame again

727
00:23:49,279 --> 00:23:50,880
and so that'll go around in the loop and

728
00:23:50,880 --> 00:23:52,480
loop and loop until the ascending

729
00:23:52,480 --> 00:23:54,640
controller goes bus off and if the

730
00:23:54,640 --> 00:23:55,600
sending can control

731
00:23:55,600 --> 00:23:57,840
his idea was to destroy the bus traffic

732
00:23:57,840 --> 00:23:59,360
it would just reset the game controller

733
00:23:59,360 --> 00:24:00,960
and try again and carry on

734
00:24:00,960 --> 00:24:02,640
and the bus is now full up with all

735
00:24:02,640 --> 00:24:04,159
these error frames

736
00:24:04,159 --> 00:24:05,919
so without denial of service attack

737
00:24:05,919 --> 00:24:07,600
prevention that spoof attack just

738
00:24:07,600 --> 00:24:08,960
becomes a

739
00:24:08,960 --> 00:24:10,559
transformed into a denial of service

740
00:24:10,559 --> 00:24:12,480
attack in effect we're doing

741
00:24:12,480 --> 00:24:14,799
like a bus off attack ourselves against

742
00:24:14,799 --> 00:24:16,480
the attacker

743
00:24:16,480 --> 00:24:18,960
so that's no good so in the guardian

744
00:24:18,960 --> 00:24:21,520
hardware there's also denial of service

745
00:24:21,520 --> 00:24:25,039
protection uh so the way that works is

746
00:24:25,039 --> 00:24:27,279
the idps can send commands on can

747
00:24:27,279 --> 00:24:29,919
with an id of zero um and then the bus

748
00:24:29,919 --> 00:24:32,240
guardian hardware listens to these uh

749
00:24:32,240 --> 00:24:34,000
these special commands and then acts on

750
00:24:34,000 --> 00:24:34,880
them and there's a whole bunch of

751
00:24:34,880 --> 00:24:35,840
commands

752
00:24:35,840 --> 00:24:37,120
but one of them is to tell the bus

753
00:24:37,120 --> 00:24:40,000
guardian hardware to disconnect the host

754
00:24:40,000 --> 00:24:41,840
um and then the disconnected host can't

755
00:24:41,840 --> 00:24:43,679
now retransmit because it's been taken

756
00:24:43,679 --> 00:24:44,159
off that

757
00:24:44,159 --> 00:24:46,159
so this stops this doom loop of

758
00:24:46,159 --> 00:24:47,200
re-transmissions

759
00:24:47,200 --> 00:24:49,760
and the idps can later uh send a command

760
00:24:49,760 --> 00:24:51,200
to to readmit the host

761
00:24:51,200 --> 00:24:54,240
uh back in again um all kinds of uh

762
00:24:54,240 --> 00:24:55,919
options the whole idea is to be flexible

763
00:24:55,919 --> 00:24:58,080
here and uh

764
00:24:58,080 --> 00:24:59,600
the bus guardian hardware is uh

765
00:24:59,600 --> 00:25:01,760
disconnects um

766
00:25:01,760 --> 00:25:04,400
disconnects the host using um can

767
00:25:04,400 --> 00:25:05,360
overload frames

768
00:25:05,360 --> 00:25:07,760
that's a legacy feature of can um

769
00:25:07,760 --> 00:25:09,760
overload frames were invented in the 80s

770
00:25:09,760 --> 00:25:13,039
early part of the protocol for because

771
00:25:13,039 --> 00:25:14,480
back in the 80s the hardware couldn't

772
00:25:14,480 --> 00:25:16,159
keep up with um

773
00:25:16,159 --> 00:25:19,039
um uh the full speed of a cam protocol

774
00:25:19,039 --> 00:25:20,799
so it had a

775
00:25:20,799 --> 00:25:22,559
kind of exxon xr flow control kind of

776
00:25:22,559 --> 00:25:24,080
feature and

777
00:25:24,080 --> 00:25:25,919
an overload frame they never generate

778
00:25:25,919 --> 00:25:27,279
anymore because all the silicone's fast

779
00:25:27,279 --> 00:25:30,159
enough um but we let it we use that

780
00:25:30,159 --> 00:25:32,480
and basically use that to uh to freeze

781
00:25:32,480 --> 00:25:34,000
the host's can controller

782
00:25:34,000 --> 00:25:35,440
so instead of sending it bus off it

783
00:25:35,440 --> 00:25:37,520
doesn't know that it's been disconnected

784
00:25:37,520 --> 00:25:38,799
it's just everything appears to be going

785
00:25:38,799 --> 00:25:41,039
really really really slow

786
00:25:41,039 --> 00:25:42,960
uh so if the host had reset itself in

787
00:25:42,960 --> 00:25:44,960
some way it's a transient attack

788
00:25:44,960 --> 00:25:48,480
um um then um you can bring it back

789
00:25:48,480 --> 00:25:49,760
online without needing to

790
00:25:49,760 --> 00:25:53,279
to get it to recover from bus off

791
00:25:53,279 --> 00:25:56,240
so i can demonstrate this now um with a

792
00:25:56,240 --> 00:25:56,880
little uh

793
00:25:56,880 --> 00:26:00,159
demo system uh it's basically some of

794
00:26:00,159 --> 00:26:00,480
our

795
00:26:00,480 --> 00:26:03,120
we use uh micro python boards um in our

796
00:26:03,120 --> 00:26:03,679
lab

797
00:26:03,679 --> 00:26:06,159
um with python firmware micropython

798
00:26:06,159 --> 00:26:07,360
firmware and then we interface that to

799
00:26:07,360 --> 00:26:08,400
the embedded software because it's a

800
00:26:08,400 --> 00:26:10,559
really nice framework for um for running

801
00:26:10,559 --> 00:26:13,200
up tests and scripts in python

802
00:26:13,200 --> 00:26:16,400
um so we have a a can bus

803
00:26:16,400 --> 00:26:20,720
adapter uh we have a microcontroller

804
00:26:20,720 --> 00:26:23,840
board i just showed here then there's an

805
00:26:23,840 --> 00:26:25,360
fpga uh rig that

806
00:26:25,360 --> 00:26:27,039
uh connects that uh through to the

807
00:26:27,039 --> 00:26:29,120
canned transceivers uh in these uh these

808
00:26:29,120 --> 00:26:30,640
rack cards that we've got for doing

809
00:26:30,640 --> 00:26:31,600
experiments

810
00:26:31,600 --> 00:26:33,760
and then uh we just use a logic analyzer

811
00:26:33,760 --> 00:26:36,720
to to see the whole thing

812
00:26:36,720 --> 00:26:38,640
so here's the the logical structure here

813
00:26:38,640 --> 00:26:40,159
we have um

814
00:26:40,159 --> 00:26:43,360
centralized intrusion protection system

815
00:26:43,360 --> 00:26:46,000
uh with our canada in it uh we have a

816
00:26:46,000 --> 00:26:48,320
node here

817
00:26:48,320 --> 00:26:50,480
which is also got a bus guardian and

818
00:26:50,480 --> 00:26:52,000
it's going to be a spoofing attack node

819
00:26:52,000 --> 00:26:53,679
and then we have another node here that

820
00:26:53,679 --> 00:26:55,679
uh doesn't have any uh special hardware

821
00:26:55,679 --> 00:26:56,799
and it doesn't have

822
00:26:56,799 --> 00:27:00,159
uh a source address um

823
00:27:00,159 --> 00:27:02,720
so we're going to attack from a a

824
00:27:02,720 --> 00:27:04,080
guarded system and attack

825
00:27:04,080 --> 00:27:05,679
a frame that would normally come from

826
00:27:05,679 --> 00:27:06,880
and try and spoof a frame that would

827
00:27:06,880 --> 00:27:09,679
normally come from b

828
00:27:10,320 --> 00:27:14,720
so uh these three here are

829
00:27:14,720 --> 00:27:16,880
these are our terminal windows onto

830
00:27:16,880 --> 00:27:19,360
three different microcontroller boards

831
00:27:19,360 --> 00:27:22,480
so the idps is here with address one and

832
00:27:22,480 --> 00:27:24,000
then a is rest two

833
00:27:24,000 --> 00:27:28,399
and then b we don't have an address

834
00:27:28,720 --> 00:27:31,200
uh so in our little python framework we

835
00:27:31,200 --> 00:27:33,039
make it easy to type in the command line

836
00:27:33,039 --> 00:27:33,520
and

837
00:27:33,520 --> 00:27:37,520
set this up so we use a we bind a can id

838
00:27:37,520 --> 00:27:42,320
of one two three uh to address two

839
00:27:44,399 --> 00:27:48,000
and then we bind one to four

840
00:27:48,000 --> 00:27:51,039
uh to no header saying that it doesn't

841
00:27:51,039 --> 00:27:52,320
come from anything with uh

842
00:27:52,320 --> 00:27:55,360
with the canon hd header

843
00:27:55,360 --> 00:27:56,880
so we can just send some frames on that

844
00:27:56,880 --> 00:27:58,880
just check that it works so

845
00:27:58,880 --> 00:28:02,000
uh there we go frame one two three

846
00:28:02,000 --> 00:28:04,080
with our cafe food payload comes out in

847
00:28:04,080 --> 00:28:06,880
our can bus analyzer tool

848
00:28:06,880 --> 00:28:10,080
one two three food

849
00:28:10,080 --> 00:28:12,960
so that's all working fine and then we

850
00:28:12,960 --> 00:28:14,640
have one two four

851
00:28:14,640 --> 00:28:17,279
with our famous dead beef and here we

852
00:28:17,279 --> 00:28:18,720
are one two four

853
00:28:18,720 --> 00:28:21,840
and dead beef uh so

854
00:28:21,840 --> 00:28:23,840
let's try uh spoofing now so here we are

855
00:28:23,840 --> 00:28:26,879
at uh a

856
00:28:27,360 --> 00:28:29,440
uh and we're gonna create a uh spoof

857
00:28:29,440 --> 00:28:30,399
frame

858
00:28:30,399 --> 00:28:32,720
which is id124 to do the spoof and it

859
00:28:32,720 --> 00:28:33,600
has

860
00:28:33,600 --> 00:28:37,039
fibbed as the payload

861
00:28:37,360 --> 00:28:40,159
so if we get the logic analyzer going we

862
00:28:40,159 --> 00:28:41,679
can see what happens

863
00:28:41,679 --> 00:28:46,159
when we send it so omnilogic analyzer

864
00:28:49,840 --> 00:28:53,919
and we send the frame spoof okay

865
00:28:53,919 --> 00:28:56,320
so there's a little tiny glitch what

866
00:28:56,320 --> 00:28:57,840
looks like there and if we zoom in we'll

867
00:28:57,840 --> 00:28:58,799
find that's a whole

868
00:28:58,799 --> 00:29:01,360
can frame

869
00:29:01,919 --> 00:29:05,520
so zoom in and in

870
00:29:07,039 --> 00:29:10,480
okay so here this is the uh

871
00:29:10,480 --> 00:29:12,559
this is the knhg header with our fast

872
00:29:12,559 --> 00:29:14,640
bits so these are the slow

873
00:29:14,640 --> 00:29:17,840
can bits you can see here

874
00:29:18,080 --> 00:29:22,000
and then that's the header

875
00:29:22,000 --> 00:29:23,600
so that comes through and the idps has

876
00:29:23,600 --> 00:29:25,120
been told about it here it knows it's

877
00:29:25,120 --> 00:29:25,760
the

878
00:29:25,760 --> 00:29:28,960
header and then by here

879
00:29:28,960 --> 00:29:31,919
it's made a decision uh to inject an

880
00:29:31,919 --> 00:29:32,559
error frame

881
00:29:32,559 --> 00:29:35,600
uh and kill it because id124 shouldn't

882
00:29:35,600 --> 00:29:36,720
come from

883
00:29:36,720 --> 00:29:38,960
a device that even has a header alone

884
00:29:38,960 --> 00:29:41,840
the wrong address

885
00:29:46,159 --> 00:29:49,120
so that's the error frame which is uh

886
00:29:49,120 --> 00:29:51,200
six bits

887
00:29:51,200 --> 00:29:53,679
of zeros six dominant bits and then six

888
00:29:53,679 --> 00:29:55,679
resistors so that's the error flag

889
00:29:55,679 --> 00:29:57,120
and that's the error delimiter that's

890
00:29:57,120 --> 00:29:59,440
the standard can protocol so here

891
00:29:59,440 --> 00:30:03,039
is where we finished and now we are um

892
00:30:03,039 --> 00:30:05,360
uh sending a new cam frame and that's

893
00:30:05,360 --> 00:30:07,919
can id 0 that's come from the idps and

894
00:30:07,919 --> 00:30:09,200
we can tell because it's got its own

895
00:30:09,200 --> 00:30:09,919
header

896
00:30:09,919 --> 00:30:12,559
the source address on it and then this

897
00:30:12,559 --> 00:30:13,919
payload here is

898
00:30:13,919 --> 00:30:15,840
basically a coded instruction to tell

899
00:30:15,840 --> 00:30:18,240
the uh

900
00:30:18,880 --> 00:30:21,840
the guardian device to turn turn off and

901
00:30:21,840 --> 00:30:22,960
so you can see that here here are the

902
00:30:22,960 --> 00:30:23,440
two

903
00:30:23,440 --> 00:30:25,360
frames that went through legitimately

904
00:30:25,360 --> 00:30:29,039
here is the error frame that we just saw

905
00:30:29,039 --> 00:30:32,480
uh here is the please shut up and tell

906
00:30:32,480 --> 00:30:33,520
your host to

907
00:30:33,520 --> 00:30:35,919
disconnect and then that's it there are

908
00:30:35,919 --> 00:30:37,520
none of these uh we would expect

909
00:30:37,520 --> 00:30:38,320
normally we can

910
00:30:38,320 --> 00:30:42,320
a repeat of this in a loop for 32 times

911
00:30:42,320 --> 00:30:44,080
uh before it went bust off but none of

912
00:30:44,080 --> 00:30:46,320
that has uh has happened here

913
00:30:46,320 --> 00:30:49,440
so we've we've shut the device down

914
00:30:49,440 --> 00:30:50,960
and that's stopped the denial of service

915
00:30:50,960 --> 00:30:53,200
attack

916
00:30:55,440 --> 00:30:58,080
so i think it's important to take a

917
00:30:58,080 --> 00:30:59,039
perspective of what

918
00:30:59,039 --> 00:31:01,039
what's going on here there's no security

919
00:31:01,039 --> 00:31:02,880
policy in the bus guardian hardware so

920
00:31:02,880 --> 00:31:03,519
there's no

921
00:31:03,519 --> 00:31:06,159
there's no lists of frames there's no id

922
00:31:06,159 --> 00:31:06,799
lists

923
00:31:06,799 --> 00:31:09,200
there's no configuration other than just

924
00:31:09,200 --> 00:31:10,960
the hardware address source

925
00:31:10,960 --> 00:31:14,559
address tag and all of the logic

926
00:31:14,559 --> 00:31:17,279
and policy is all done in the central

927
00:31:17,279 --> 00:31:18,000
idps

928
00:31:18,000 --> 00:31:20,240
and that's all done in software so the

929
00:31:20,240 --> 00:31:21,440
software

930
00:31:21,440 --> 00:31:24,720
um is deciding uh what to do

931
00:31:24,720 --> 00:31:26,559
and then is using the mechanisms and

932
00:31:26,559 --> 00:31:28,480
hardware because if we try to put

933
00:31:28,480 --> 00:31:30,159
policy into hardware we're bound to get

934
00:31:30,159 --> 00:31:31,360
the wrong policy for somebody's

935
00:31:31,360 --> 00:31:32,880
application

936
00:31:32,880 --> 00:31:35,679
so it's using a bunch of mechanisms one

937
00:31:35,679 --> 00:31:36,960
of the mechanisms we have in the bus

938
00:31:36,960 --> 00:31:37,600
guardian

939
00:31:37,600 --> 00:31:40,080
is a security error counter so if it

940
00:31:40,080 --> 00:31:41,760
detects some of these protocol attacks i

941
00:31:41,760 --> 00:31:42,480
talked about

942
00:31:42,480 --> 00:31:44,960
like uh spirit error frame that's a part

943
00:31:44,960 --> 00:31:46,159
of the bus off

944
00:31:46,159 --> 00:31:48,480
attack or if we're glitching can bits

945
00:31:48,480 --> 00:31:50,159
for example that's how the janus attack

946
00:31:50,159 --> 00:31:51,440
works

947
00:31:51,440 --> 00:31:53,360
those are detected and then an error

948
00:31:53,360 --> 00:31:55,039
counter is

949
00:31:55,039 --> 00:31:57,039
implemented and the detection of those

950
00:31:57,039 --> 00:31:58,880
also results in an airframe to make sure

951
00:31:58,880 --> 00:32:01,279
that the bus has been cleaned of

952
00:32:01,279 --> 00:32:05,279
the attack um and then there are other

953
00:32:05,279 --> 00:32:06,960
protections like uh address protection

954
00:32:06,960 --> 00:32:08,559
so if the bus guardian hardware detects

955
00:32:08,559 --> 00:32:10,320
its own source address

956
00:32:10,320 --> 00:32:13,519
being used by uh another can

957
00:32:13,519 --> 00:32:17,200
frame that could be a a forged

958
00:32:17,200 --> 00:32:19,519
cam frame with with a canhd header so

959
00:32:19,519 --> 00:32:21,279
someone connects up

960
00:32:21,279 --> 00:32:22,880
their own piece of hardware to the bus

961
00:32:22,880 --> 00:32:24,640
and they inject a fake

962
00:32:24,640 --> 00:32:27,200
header they still can't spoof the device

963
00:32:27,200 --> 00:32:29,279
because the device being spoofed will

964
00:32:29,279 --> 00:32:30,240
see its own

965
00:32:30,240 --> 00:32:32,480
its own source address being used so the

966
00:32:32,480 --> 00:32:34,000
the bus guardian

967
00:32:34,000 --> 00:32:37,519
um hardware has has some logic for uh

968
00:32:37,519 --> 00:32:39,279
for security mechanisms but they aren't

969
00:32:39,279 --> 00:32:41,919
part of security policies of how how

970
00:32:41,919 --> 00:32:44,399
that would work

971
00:32:44,399 --> 00:32:46,320
so in terms of how you would deploy this

972
00:32:46,320 --> 00:32:49,519
you need at least one idps on a can bus

973
00:32:49,519 --> 00:32:52,080
and then can guardian hardware in all

974
00:32:52,080 --> 00:32:53,760
the ecu's that you have

975
00:32:53,760 --> 00:32:56,799
security issues with so um you don't

976
00:32:56,799 --> 00:32:57,840
need to deploy the guardian hardware

977
00:32:57,840 --> 00:32:58,320
everywhere

978
00:32:58,320 --> 00:32:59,919
it depends on risk assessment so you

979
00:32:59,919 --> 00:33:01,840
would put it on ecu's that

980
00:33:01,840 --> 00:33:04,399
uh are most at risk of being hijacked

981
00:33:04,399 --> 00:33:05,919
and being the attacker

982
00:33:05,919 --> 00:33:08,240
so you can identify um where where the

983
00:33:08,240 --> 00:33:10,240
attack frames are coming from or

984
00:33:10,240 --> 00:33:12,000
you put them on the ones most at risk of

985
00:33:12,000 --> 00:33:13,210
being spoofed

986
00:33:13,210 --> 00:33:14,399
[Music]

987
00:33:14,399 --> 00:33:16,640
so so in the example we showed the

988
00:33:16,640 --> 00:33:18,640
formula where

989
00:33:18,640 --> 00:33:22,480
ecua had had the hardware and b didn't

990
00:33:22,480 --> 00:33:24,000
but you might if you wanted to make sure

991
00:33:24,000 --> 00:33:25,600
for example uh locking or security

992
00:33:25,600 --> 00:33:26,320
commands

993
00:33:26,320 --> 00:33:28,960
uh for door locks and stuff uh you might

994
00:33:28,960 --> 00:33:30,000
put them on that

995
00:33:30,000 --> 00:33:31,039
not because they're a risk of being

996
00:33:31,039 --> 00:33:33,120
hijacked but because their risk of

997
00:33:33,120 --> 00:33:34,880
uh someone hijacking their frames and

998
00:33:34,880 --> 00:33:36,640
therefore you want to prove it didn't

999
00:33:36,640 --> 00:33:38,960
come from that

1000
00:33:38,960 --> 00:33:42,480
um and then the high volume

1001
00:33:42,480 --> 00:33:45,279
deployment of this um basically the the

1002
00:33:45,279 --> 00:33:46,480
guardian hardware

1003
00:33:46,480 --> 00:33:47,760
has been designed to have an absolute

1004
00:33:47,760 --> 00:33:49,760
minimum number of gates and be

1005
00:33:49,760 --> 00:33:50,799
integrated into

1006
00:33:50,799 --> 00:33:53,679
account transceiver um and the reason we

1007
00:33:53,679 --> 00:33:54,880
can put it in the can transceiver so

1008
00:33:54,880 --> 00:33:55,600
easily is

1009
00:33:55,600 --> 00:33:57,279
the gate count is small but there's also

1010
00:33:57,279 --> 00:33:58,880
no requirement for non-volatile memory

1011
00:33:58,880 --> 00:34:00,480
so we don't need flash we don't need

1012
00:34:00,480 --> 00:34:02,720
eeprom uh so it means that the silicon

1013
00:34:02,720 --> 00:34:04,559
process for power electronics for can

1014
00:34:04,559 --> 00:34:06,000
transceivers

1015
00:34:06,000 --> 00:34:08,480
is compatible with with the logic gates

1016
00:34:08,480 --> 00:34:10,159
that we use

1017
00:34:10,159 --> 00:34:13,520
um and then the idps

1018
00:34:13,520 --> 00:34:15,960
that could be on a standalone device

1019
00:34:15,960 --> 00:34:17,520
[Music]

1020
00:34:17,520 --> 00:34:20,560
a centralized idps one of the common um

1021
00:34:20,560 --> 00:34:22,639
deployments of this is the idps sits on

1022
00:34:22,639 --> 00:34:23,679
multiple buses

1023
00:34:23,679 --> 00:34:26,000
um so there's kind of a monitors four or

1024
00:34:26,000 --> 00:34:26,960
five can buses

1025
00:34:26,960 --> 00:34:28,560
and it's also the gateway between the k

1026
00:34:28,560 --> 00:34:30,719
buses and stuff so there's maybe an ecu

1027
00:34:30,719 --> 00:34:33,199
that's a centralized gateway could be a

1028
00:34:33,199 --> 00:34:35,040
place to put this or it could be

1029
00:34:35,040 --> 00:34:37,280
integrated into an application soc so if

1030
00:34:37,280 --> 00:34:38,639
you're actually doing a custom

1031
00:34:38,639 --> 00:34:41,359
sse for an ecu you could throw some more

1032
00:34:41,359 --> 00:34:42,079
gates

1033
00:34:42,079 --> 00:34:45,119
in there and put a parallel idps

1034
00:34:45,119 --> 00:34:47,918
module into the soc that runs

1035
00:34:47,918 --> 00:34:49,119
independently of the

1036
00:34:49,119 --> 00:34:51,199
of the application processor depending

1037
00:34:51,199 --> 00:34:52,159
on on um

1038
00:34:52,159 --> 00:34:54,719
where the ecu is going to be wired up uh

1039
00:34:54,719 --> 00:34:55,679
and we have a we have a

1040
00:34:55,679 --> 00:34:58,880
partnership with uh ultrasoc um where we

1041
00:34:58,880 --> 00:35:02,240
are uh working with them to put the uh

1042
00:35:02,240 --> 00:35:06,000
the canon hg idps hardware inside their

1043
00:35:06,000 --> 00:35:07,599
uh wider security solutions they've got

1044
00:35:07,599 --> 00:35:10,079
a whole load of um uh security sentinel

1045
00:35:10,079 --> 00:35:11,440
uh stuff for monitoring things like the

1046
00:35:11,440 --> 00:35:13,440
axibus to see if the host software is

1047
00:35:13,440 --> 00:35:14,400
misbehaving

1048
00:35:14,400 --> 00:35:17,359
um but also monitoring the canvas and

1049
00:35:17,359 --> 00:35:18,320
talking over can

1050
00:35:18,320 --> 00:35:21,440
to to their sentinels

1051
00:35:22,480 --> 00:35:25,440
low volume deployments um we can go to

1052
00:35:25,440 --> 00:35:27,280
market with fpgas

1053
00:35:27,280 --> 00:35:29,359
because it's a tiny number of gates the

1054
00:35:29,359 --> 00:35:30,560
bus guardian will actually fit into

1055
00:35:30,560 --> 00:35:31,200
these

1056
00:35:31,200 --> 00:35:33,200
literally tiny three square millimeters

1057
00:35:33,200 --> 00:35:35,280
from three

1058
00:35:35,280 --> 00:35:39,680
uh fpgas um so you can run that down on

1059
00:35:39,680 --> 00:35:42,800
on most ecu hardware um and then the

1060
00:35:42,800 --> 00:35:45,119
idps can run on fpga

1061
00:35:45,119 --> 00:35:48,320
um with an integrated cortex m3 uh so

1062
00:35:48,320 --> 00:35:49,040
that's what we're working on at the

1063
00:35:49,040 --> 00:35:49,599
moment

1064
00:35:49,599 --> 00:35:54,480
um is a standalone fpga idps

1065
00:35:54,560 --> 00:35:58,079
um and alright we have idps software uh

1066
00:35:58,079 --> 00:35:59,839
obviously that's not necessary to for

1067
00:35:59,839 --> 00:36:01,280
the concept to have the same

1068
00:36:01,280 --> 00:36:03,760
to have our software um but it provides

1069
00:36:03,760 --> 00:36:05,040
authentication and denial of service

1070
00:36:05,040 --> 00:36:06,400
attack prevent

1071
00:36:06,400 --> 00:36:09,680
protections so it has global settings

1072
00:36:09,680 --> 00:36:12,079
uh for things like uh do you want to ban

1073
00:36:12,079 --> 00:36:15,200
all remote frames or um

1074
00:36:15,200 --> 00:36:17,119
unknown frames are allowed or not

1075
00:36:17,119 --> 00:36:19,359
allowed um and it's got the allow deny

1076
00:36:19,359 --> 00:36:21,119
list for um for each uh

1077
00:36:21,119 --> 00:36:23,920
ecu but it also has modes so in

1078
00:36:23,920 --> 00:36:25,839
different modes different frames may be

1079
00:36:25,839 --> 00:36:27,680
legal or not legal so for example

1080
00:36:27,680 --> 00:36:30,240
uh ota over there firmware download

1081
00:36:30,240 --> 00:36:30,960
frames

1082
00:36:30,960 --> 00:36:33,040
may be legal only if you're doing

1083
00:36:33,040 --> 00:36:34,160
over-the-air download

1084
00:36:34,160 --> 00:36:37,359
and outside of that anyone sending over

1085
00:36:37,359 --> 00:36:39,599
the airframes

1086
00:36:39,599 --> 00:36:43,440
is a hack so in the uh when the idps

1087
00:36:43,440 --> 00:36:44,960
knows about the um over the f

1088
00:36:44,960 --> 00:36:47,440
uh mode it switches and says these

1089
00:36:47,440 --> 00:36:48,560
things shouldn't be seen and these

1090
00:36:48,560 --> 00:36:49,760
things should and then when you're in an

1091
00:36:49,760 --> 00:36:51,359
operating mode or in the vehicle station

1092
00:36:51,359 --> 00:36:52,480
the vehicle's moving

1093
00:36:52,480 --> 00:36:54,320
what kinds of logic you can apply here

1094
00:36:54,320 --> 00:36:55,839
and this is what i mean by this policy

1095
00:36:55,839 --> 00:36:56,960
is the

1096
00:36:56,960 --> 00:36:59,119
the policies are very very specific to

1097
00:36:59,119 --> 00:37:01,760
um any particular oem or any particular

1098
00:37:01,760 --> 00:37:03,119
vehicle platform

1099
00:37:03,119 --> 00:37:04,240
um and you don't put that in the

1100
00:37:04,240 --> 00:37:05,599
hardware so that's why this is in

1101
00:37:05,599 --> 00:37:07,040
software

1102
00:37:07,040 --> 00:37:08,800
it also provides real-time uh

1103
00:37:08,800 --> 00:37:10,560
protections um

1104
00:37:10,560 --> 00:37:13,599
for bus flooding so not just the simple

1105
00:37:13,599 --> 00:37:15,040
dumb bus flood attacks they're really

1106
00:37:15,040 --> 00:37:17,280
craft craft well-crafted ones that

1107
00:37:17,280 --> 00:37:19,520
send frames just at the wrong time this

1108
00:37:19,520 --> 00:37:21,599
can detect those frames being outside of

1109
00:37:21,599 --> 00:37:22,480
a um

1110
00:37:22,480 --> 00:37:24,880
a time fence effectively um so we've got

1111
00:37:24,880 --> 00:37:27,359
a real-time budgeting of where frames

1112
00:37:27,359 --> 00:37:28,480
should occur

1113
00:37:28,480 --> 00:37:30,880
um and then the system can be shut down

1114
00:37:30,880 --> 00:37:32,079
if it exceeds that

1115
00:37:32,079 --> 00:37:34,160
that's also useful in the case we have

1116
00:37:34,160 --> 00:37:35,760
what's uh what the fault tolerant guys

1117
00:37:35,760 --> 00:37:36,079
call

1118
00:37:36,079 --> 00:37:37,599
a babbling idiot problem so you've got a

1119
00:37:37,599 --> 00:37:38,800
bit of software that's just gone crazy

1120
00:37:38,800 --> 00:37:40,000
it's not an attack

1121
00:37:40,000 --> 00:37:42,079
it's just gone crazy uh you can stop it

1122
00:37:42,079 --> 00:37:43,839
taking down your canvas and that's an

1123
00:37:43,839 --> 00:37:45,359
essential property you need for high

1124
00:37:45,359 --> 00:37:46,640
integrity systems

1125
00:37:46,640 --> 00:37:49,440
is to shut down uh crazy nodes that

1126
00:37:49,440 --> 00:37:50,240
otherwise would

1127
00:37:50,240 --> 00:37:54,880
disrupt the bus so the status today

1128
00:37:54,880 --> 00:37:56,880
uh we have standalone fpga solutions

1129
00:37:56,880 --> 00:37:58,000
right now

1130
00:37:58,000 --> 00:38:00,240
um we're finalizing the draft can hg

1131
00:38:00,240 --> 00:38:01,599
specification so we're forming a special

1132
00:38:01,599 --> 00:38:02,720
interest group

1133
00:38:02,720 --> 00:38:05,680
um to formalize that specification um so

1134
00:38:05,680 --> 00:38:07,280
that uh we can have different

1135
00:38:07,280 --> 00:38:09,599
parallel implementations in hardware uh

1136
00:38:09,599 --> 00:38:10,960
from different people

1137
00:38:10,960 --> 00:38:13,920
um and we're currently uh working on um

1138
00:38:13,920 --> 00:38:16,160
a specific version of our idps software

1139
00:38:16,160 --> 00:38:18,800
for j1939 um

1140
00:38:18,800 --> 00:38:21,680
because that's uh i feel like a parallel

1141
00:38:21,680 --> 00:38:22,960
to automotive market

1142
00:38:22,960 --> 00:38:26,800
of um highly sensitive uh vehicles

1143
00:38:26,800 --> 00:38:28,720
uh that are frequently connected and

1144
00:38:28,720 --> 00:38:32,079
j1939 has got um specific addressing

1145
00:38:32,079 --> 00:38:33,680
systems in the can frame itself so we

1146
00:38:33,680 --> 00:38:35,520
can check cross-check much easier the

1147
00:38:35,520 --> 00:38:37,359
address in the can frame

1148
00:38:37,359 --> 00:38:39,760
id with the uh with the address of the

1149
00:38:39,760 --> 00:38:41,040
hardware

1150
00:38:41,040 --> 00:38:44,640
out-of-band data and we

1151
00:38:44,640 --> 00:38:46,640
are undergoing hardware ipv formal

1152
00:38:46,640 --> 00:38:47,920
verification right now

1153
00:38:47,920 --> 00:38:50,640
um so um all of the modules are formally

1154
00:38:50,640 --> 00:38:51,280
specified

1155
00:38:51,280 --> 00:38:53,599
and uh going through a formal proof uh

1156
00:38:53,599 --> 00:38:55,599
verification

1157
00:38:55,599 --> 00:38:59,119
so to summarize um

1158
00:38:59,119 --> 00:39:01,280
we looked at the types of uh can bus

1159
00:39:01,280 --> 00:39:03,040
frame protocol authentication developer

1160
00:39:03,040 --> 00:39:03,599
server

1161
00:39:03,599 --> 00:39:05,520
denied of service and we looked at all

1162
00:39:05,520 --> 00:39:06,960
the different mitigations

1163
00:39:06,960 --> 00:39:09,440
um and i've told you about the the canon

1164
00:39:09,440 --> 00:39:10,079
hd one

1165
00:39:10,079 --> 00:39:13,520
uh in quite a bit of detail um

1166
00:39:13,520 --> 00:39:15,599
so we provide authentication and denial

1167
00:39:15,599 --> 00:39:17,839
of search protection in hardware

1168
00:39:17,839 --> 00:39:19,680
while remaining completely compatible

1169
00:39:19,680 --> 00:39:22,960
with ken uh because it is canon

1170
00:39:22,960 --> 00:39:25,040
um just one last thing i know we're a

1171
00:39:25,040 --> 00:39:28,240
bit late on time i'm sorry for that

1172
00:39:28,240 --> 00:39:30,640
uh those past bits encode the the eight

1173
00:39:30,640 --> 00:39:31,680
bit source address

1174
00:39:31,680 --> 00:39:33,920
uh in the can header and the crc and

1175
00:39:33,920 --> 00:39:34,960
stuff like that and they're set for

1176
00:39:34,960 --> 00:39:37,680
every outgoing frame

1177
00:39:37,680 --> 00:39:40,160
but it also contains an hd body flag in

1178
00:39:40,160 --> 00:39:41,200
that header

1179
00:39:41,200 --> 00:39:43,119
and that says there are more uh high

1180
00:39:43,119 --> 00:39:45,839
speed bits to follow to form a body

1181
00:39:45,839 --> 00:39:48,640
and a body is got things like a 32-bit

1182
00:39:48,640 --> 00:39:49,280
timestamp

1183
00:39:49,280 --> 00:39:52,480
which tells you the clock free running

1184
00:39:52,480 --> 00:39:53,760
clock of the sender

1185
00:39:53,760 --> 00:39:55,680
and with that with your free running

1186
00:39:55,680 --> 00:39:56,960
clock when you receive it from the

1187
00:39:56,960 --> 00:39:58,240
starter frame type

1188
00:39:58,240 --> 00:40:01,280
pulse you can work out a global clock

1189
00:40:01,280 --> 00:40:03,359
uh distribution uh accurate to a

1190
00:40:03,359 --> 00:40:04,720
microsecond

1191
00:40:04,720 --> 00:40:07,920
um and we've got a high quality 32-bit

1192
00:40:07,920 --> 00:40:10,000
clc there

1193
00:40:10,000 --> 00:40:11,920
which also resolves a problem with

1194
00:40:11,920 --> 00:40:15,280
cairns crc

1195
00:40:15,280 --> 00:40:17,599
calculations and if you put an eight

1196
00:40:17,599 --> 00:40:19,359
byte frame through with a whole payload

1197
00:40:19,359 --> 00:40:20,800
of zeros

1198
00:40:20,800 --> 00:40:24,000
uh you can carry a hundred bytes of user

1199
00:40:24,000 --> 00:40:25,359
payload data

1200
00:40:25,359 --> 00:40:28,640
inside those fast bits so can isn't just

1201
00:40:28,640 --> 00:40:29,599
secured by

1202
00:40:29,599 --> 00:40:33,599
uh can hg it has 12 times more bandwidth

1203
00:40:33,599 --> 00:40:36,720
if you use knhg

1204
00:40:36,720 --> 00:40:38,560
to carry extra data maybe between a

1205
00:40:38,560 --> 00:40:39,920
couple of nodes only

1206
00:40:39,920 --> 00:40:41,839
so if you want not just a secure can bus

1207
00:40:41,839 --> 00:40:43,040
but you're running out of bandwidth and

1208
00:40:43,040 --> 00:40:44,480
you want it to go faster without having

1209
00:40:44,480 --> 00:40:45,359
to

1210
00:40:45,359 --> 00:40:48,000
rewire everything restructure everything

1211
00:40:48,000 --> 00:40:49,119
give us a call because we can make it

1212
00:40:49,119 --> 00:40:52,000
run faster

1213
00:40:52,000 --> 00:40:55,680
we can give us a call thank you ken

1214
00:40:55,680 --> 00:40:58,640
uh i've received a few questions let's

1215
00:40:58,640 --> 00:40:59,920
see based on the time

1216
00:40:59,920 --> 00:41:03,520
how many could we answer uh let me ask

1217
00:41:03,520 --> 00:41:06,000
you the first question

1218
00:41:06,000 --> 00:41:09,280
this seems like the can plus protocol

1219
00:41:09,280 --> 00:41:12,720
proposed by the folks from leuven

1220
00:41:12,720 --> 00:41:14,960
however that never gained commercial

1221
00:41:14,960 --> 00:41:15,920
success

1222
00:41:15,920 --> 00:41:18,480
what is the difference here i've not

1223
00:41:18,480 --> 00:41:20,480
heard of that

1224
00:41:20,480 --> 00:41:22,319
all right give us an email and tell us

1225
00:41:22,319 --> 00:41:23,599
about it

1226
00:41:23,599 --> 00:41:27,200
all right uh i have received another one

1227
00:41:27,200 --> 00:41:30,640
will the idps software be fast enough

1228
00:41:30,640 --> 00:41:32,720
to null out the shortest possible frame

1229
00:41:32,720 --> 00:41:35,839
needed for dos

1230
00:41:36,079 --> 00:41:39,440
uh yes so so so actually can frames are

1231
00:41:39,440 --> 00:41:40,319
very slow

1232
00:41:40,319 --> 00:41:43,280
um there's two microseconds per bit um

1233
00:41:43,280 --> 00:41:44,720
so you've got loads and loads and loads

1234
00:41:44,720 --> 00:41:45,680
of time

1235
00:41:45,680 --> 00:41:48,800
to decide and okay loads of time is a

1236
00:41:48,800 --> 00:41:50,079
relative thing but uh

1237
00:41:50,079 --> 00:41:52,000
if you've got say 10 or 15 microseconds

1238
00:41:52,000 --> 00:41:53,200
to make the decision

1239
00:41:53,200 --> 00:41:55,119
uh on a reasonable microcontroller

1240
00:41:55,119 --> 00:41:56,240
that's at least not weighed down with

1241
00:41:56,240 --> 00:41:57,280
those other software that's going to

1242
00:41:57,280 --> 00:41:58,560
disable interrupts and stuff

1243
00:41:58,560 --> 00:42:00,240
is is you could do that on an 8-bit

1244
00:42:00,240 --> 00:42:02,240
microcontroller um

1245
00:42:02,240 --> 00:42:03,839
the key there is not to try and do this

1246
00:42:03,839 --> 00:42:06,480
on a raspberry pi or something

1247
00:42:06,480 --> 00:42:08,640
where it's busy and locking our

1248
00:42:08,640 --> 00:42:10,079
interrupts for long periods of time but

1249
00:42:10,079 --> 00:42:12,880
there is lots of time

1250
00:42:12,880 --> 00:42:16,720
all right there's another question can

1251
00:42:16,720 --> 00:42:18,720
are hardware id is going to be

1252
00:42:18,720 --> 00:42:21,280
programmable

1253
00:42:21,280 --> 00:42:23,359
uh yes so the idea here is that they're

1254
00:42:23,359 --> 00:42:25,280
um um

1255
00:42:25,280 --> 00:42:26,400
there's lots of ways that the the

1256
00:42:26,400 --> 00:42:27,839
hardware ip block could be programmed in

1257
00:42:27,839 --> 00:42:28,480
one is

1258
00:42:28,480 --> 00:42:30,800
you could use dip switches on a on a pcb

1259
00:42:30,800 --> 00:42:31,680
but that's not very

1260
00:42:31,680 --> 00:42:33,520
very good for high volume so the idea

1261
00:42:33,520 --> 00:42:34,720
here is um

1262
00:42:34,720 --> 00:42:36,800
although you don't need non-volatile you

1263
00:42:36,800 --> 00:42:38,720
can't do non-volatile memory in in power

1264
00:42:38,720 --> 00:42:40,880
electronics you can do fuses

1265
00:42:40,880 --> 00:42:42,480
so the idea here was they would be set

1266
00:42:42,480 --> 00:42:44,960
at factory time by blowing fuses

1267
00:42:44,960 --> 00:42:47,280
and the configuration of the system is

1268
00:42:47,280 --> 00:42:48,160
set up

1269
00:42:48,160 --> 00:42:49,839
with those with those eight bits at

1270
00:42:49,839 --> 00:42:51,920
factory time and the fuses means that

1271
00:42:51,920 --> 00:42:53,359
they can't be destroyed

1272
00:42:53,359 --> 00:42:56,000
or changed so the software is unable to

1273
00:42:56,000 --> 00:42:58,240
ever change the the source address

1274
00:42:58,240 --> 00:42:59,839
and the source address is a physical

1275
00:42:59,839 --> 00:43:02,319
location within a design

1276
00:43:02,319 --> 00:43:05,920
so there's no need to change the address

1277
00:43:06,240 --> 00:43:09,599
all right is there any question from

1278
00:43:09,599 --> 00:43:13,839
anybody else please use the zoom chat

1279
00:43:16,560 --> 00:43:19,839
well can uh there are any more questions

1280
00:43:19,839 --> 00:43:22,319
so yeah thank you so much ken uh it was

1281
00:43:22,319 --> 00:43:23,359
a wonderful

1282
00:43:23,359 --> 00:43:26,160
presentation uh we will for the audience

1283
00:43:26,160 --> 00:43:27,520
we will also have this

1284
00:43:27,520 --> 00:43:30,560
available on our youtube channel so you

1285
00:43:30,560 --> 00:43:32,000
know if you want to refer it to somebody

1286
00:43:32,000 --> 00:43:33,040
else please do

1287
00:43:33,040 --> 00:43:35,680
uh we also request you to send in your

1288
00:43:35,680 --> 00:43:37,200
valuable feedback we'll send you the

1289
00:43:37,200 --> 00:43:37,920
feedback

1290
00:43:37,920 --> 00:43:41,440
link over zoom chat and also after this

1291
00:43:41,440 --> 00:43:46,760
webinar until then next time stay safe

1292
00:43:46,760 --> 00:43:49,760
thanks

