1
00:00:02,590 --> 00:00:08,109
not taking too much time so anyway my

2
00:00:05,920 --> 00:00:10,599
name is Erick schlep fur you can find me

3
00:00:08,109 --> 00:00:13,059
on twitter as tube time i like to cut

4
00:00:10,599 --> 00:00:14,349
things in half but i also like to do a

5
00:00:13,059 --> 00:00:17,020
lot of reverse engineering and

6
00:00:14,349 --> 00:00:19,540
retrocomputing stuff and so this is kind

7
00:00:17,020 --> 00:00:22,869
of an interesting intersection of retro

8
00:00:19,540 --> 00:00:25,180
computing and reverse engineering so you

9
00:00:22,870 --> 00:00:26,950
might be wondering about the

10
00:00:25,180 --> 00:00:28,900
soundblaster card here this actually was

11
00:00:26,950 --> 00:00:31,869
one of the first pc sound cards it came

12
00:00:28,900 --> 00:00:34,300
out in 1989 just about exactly thirty

13
00:00:31,870 --> 00:00:36,370
years ago and it was a lot better

14
00:00:34,300 --> 00:00:39,339
significantly better than all the other

15
00:00:36,370 --> 00:00:40,839
sound cars on the market at the time so

16
00:00:39,339 --> 00:00:42,159
this is what it looks like this is just

17
00:00:40,839 --> 00:00:43,839
some random picture that i found on the

18
00:00:42,159 --> 00:00:47,109
internet i actually don't own one of

19
00:00:43,839 --> 00:00:48,940
these cards but you can see it's a

20
00:00:47,109 --> 00:00:51,850
fairly simple card you got a bunch of

21
00:00:48,940 --> 00:00:54,039
dip ICS on it and there's an 8-bit isa

22
00:00:51,850 --> 00:00:56,199
bus connector on there so some of you

23
00:00:54,039 --> 00:00:58,120
might be asking why bother cloning a

24
00:00:56,199 --> 00:01:00,729
really crappy 90s sound card and i'll

25
00:00:58,120 --> 00:01:02,079
show you the reason why this is eBay

26
00:01:00,729 --> 00:01:04,989
from a couple months ago

27
00:01:02,079 --> 00:01:06,520
these cards are seriously selling for

28
00:01:04,989 --> 00:01:08,079
this much money these are not just buy

29
00:01:06,520 --> 00:01:10,780
it now prices or whatever people are

30
00:01:08,079 --> 00:01:12,729
paying legitimate money for these old

31
00:01:10,780 --> 00:01:14,770
sound cards presumably to plug into some

32
00:01:12,729 --> 00:01:18,908
old 386 to play Commander Keen or

33
00:01:14,770 --> 00:01:20,170
whatever this is the game blasters so

34
00:01:18,909 --> 00:01:22,119
this is an edit variant of the sound

35
00:01:20,170 --> 00:01:24,670
card that's slightly older and a little

36
00:01:22,119 --> 00:01:26,530
bit more rare $400 okay now we're

37
00:01:24,670 --> 00:01:28,119
talking some serious money this is a

38
00:01:26,530 --> 00:01:30,430
reason why I don't actually own one of

39
00:01:28,119 --> 00:01:32,710
these cards so I want to chat a little

40
00:01:30,430 --> 00:01:35,170
bit about reverse engineering a PCB like

41
00:01:32,710 --> 00:01:37,270
printed circuit board the most common

42
00:01:35,170 --> 00:01:38,920
method is a visual inspection you

43
00:01:37,270 --> 00:01:41,048
basically look at the board look at the

44
00:01:38,920 --> 00:01:42,850
traces and then start a little notebook

45
00:01:41,049 --> 00:01:44,759
start drawing a schematic and you kind

46
00:01:42,850 --> 00:01:47,079
of figure out what's connected to what

47
00:01:44,759 --> 00:01:48,729
this only works with one or two layer

48
00:01:47,079 --> 00:01:50,259
boards any more layers than that and

49
00:01:48,729 --> 00:01:51,609
they're buried inside the board you

50
00:01:50,259 --> 00:01:53,560
can't get at them you can't see them

51
00:01:51,609 --> 00:01:55,539
anymore so what you do with that is a

52
00:01:53,560 --> 00:01:58,179
strong light and I've successfully used

53
00:01:55,539 --> 00:01:59,799
this on some 4 layer boards now you

54
00:01:58,179 --> 00:02:02,439
can't always do this because what

55
00:01:59,799 --> 00:02:04,359
happens is that the copper structures

56
00:02:02,439 --> 00:02:06,070
will actually block your view and so

57
00:02:04,359 --> 00:02:07,960
depending on where you are on the board

58
00:02:06,070 --> 00:02:09,459
how many copper pores are on the board

59
00:02:07,960 --> 00:02:12,250
you can't always get at that copper

60
00:02:09,460 --> 00:02:14,319
underneath you can also all mount the

61
00:02:12,250 --> 00:02:16,270
board which takes a really long time on

62
00:02:14,319 --> 00:02:18,369
a board like this it's possible because

63
00:02:16,270 --> 00:02:20,650
you can actually access all the pins of

64
00:02:18,370 --> 00:02:22,390
all the devices on a modern board that's

65
00:02:20,650 --> 00:02:24,310
not necessarily true especially if you

66
00:02:22,390 --> 00:02:26,109
have BGA components that have ball

67
00:02:24,310 --> 00:02:29,140
connections that are underneath the chip

68
00:02:26,110 --> 00:02:31,270
and if you've got money or access to a

69
00:02:29,140 --> 00:02:33,339
very curious dentist you can also x-ray

70
00:02:31,270 --> 00:02:35,170
the boards and see all the traces

71
00:02:33,340 --> 00:02:37,270
including those underneath parts which

72
00:02:35,170 --> 00:02:39,010
is great if you're clever you tilt this

73
00:02:37,270 --> 00:02:41,110
at an angle and you can actually see the

74
00:02:39,010 --> 00:02:42,820
via structures and figure out what

75
00:02:41,110 --> 00:02:45,070
layers the traces are coming out on

76
00:02:42,820 --> 00:02:46,930
which is great now if you've got lots of

77
00:02:45,070 --> 00:02:49,600
money or access to really expensive

78
00:02:46,930 --> 00:02:52,510
facility you can use a 3d x-ray CT and

79
00:02:49,600 --> 00:02:55,750
so this is a computed tomography system

80
00:02:52,510 --> 00:02:58,570
that will give you a three-dimensional

81
00:02:55,750 --> 00:03:00,370
sort of a volumetric pixel view of the

82
00:02:58,570 --> 00:03:00,910
entire board you can chop it up any way

83
00:03:00,370 --> 00:03:03,280
you want

84
00:03:00,910 --> 00:03:04,510
so most obvious way is to go by layer

85
00:03:03,280 --> 00:03:06,070
and so you can pick out all the

86
00:03:04,510 --> 00:03:07,720
different layers of the PC board and

87
00:03:06,070 --> 00:03:11,380
I've successfully used this to reverse

88
00:03:07,720 --> 00:03:13,900
engineer 6 layer PC boards another way

89
00:03:11,380 --> 00:03:15,820
is to sand it down so you take the board

90
00:03:13,900 --> 00:03:17,680
you take sandpaper and you sand on it

91
00:03:15,820 --> 00:03:19,870
and you turn it into dust but you take

92
00:03:17,680 --> 00:03:22,120
pictures every time you run into a layer

93
00:03:19,870 --> 00:03:23,560
of copper I did not put a picture in

94
00:03:22,120 --> 00:03:24,700
here because I don't like the toxic dust

95
00:03:23,560 --> 00:03:26,830
I'm not going to go out and do it myself

96
00:03:24,700 --> 00:03:28,329
if you want more information about that

97
00:03:26,830 --> 00:03:30,459
Joe grant actually has some really

98
00:03:28,330 --> 00:03:32,410
excellent materials on his website going

99
00:03:30,459 --> 00:03:35,110
into the details and the pros and cons

100
00:03:32,410 --> 00:03:36,280
of all of these approaches which is

101
00:03:35,110 --> 00:03:38,140
really interesting because I can't

102
00:03:36,280 --> 00:03:40,900
actually use any of these approaches

103
00:03:38,140 --> 00:03:43,149
because I don't have a card all I have

104
00:03:40,900 --> 00:03:44,890
are these two high resolution reference

105
00:03:43,150 --> 00:03:48,820
photos that I found on the Internet of

106
00:03:44,890 --> 00:03:50,140
the Sound Blaster card that's it so I

107
00:03:48,820 --> 00:03:53,440
started looking at the pictures and I

108
00:03:50,140 --> 00:03:55,350
realize that there's something in here

109
00:03:53,440 --> 00:03:58,030
that is not really going to help me much

110
00:03:55,350 --> 00:03:59,560
which is this little chip here all the

111
00:03:58,030 --> 00:04:02,200
rest of the chips on the board are

112
00:03:59,560 --> 00:04:04,660
off-the-shelf TTL logic or just really

113
00:04:02,200 --> 00:04:07,239
easy to get analog chips with this one

114
00:04:04,660 --> 00:04:09,280
exception and this has a creative labs

115
00:04:07,240 --> 00:04:11,770
marking on it so you might think well is

116
00:04:09,280 --> 00:04:12,190
this a custom ASIC and that's what I

117
00:04:11,770 --> 00:04:13,810
thought

118
00:04:12,190 --> 00:04:16,269
at first and then I realized that

119
00:04:13,810 --> 00:04:18,730
there's an Intel copyright right there

120
00:04:16,269 --> 00:04:20,529
on the chip there's also a 12 megahertz

121
00:04:18,730 --> 00:04:22,000
crystal so this is starting to sound a

122
00:04:20,529 --> 00:04:24,070
little bit familiar I did a little more

123
00:04:22,000 --> 00:04:28,930
research and it turns out it's just an

124
00:04:24,070 --> 00:04:30,190
Intel 8051 so you might be asking well

125
00:04:28,930 --> 00:04:31,690
why don't you go and dump it

126
00:04:30,190 --> 00:04:34,330
I'd like to remind you that I do not

127
00:04:31,690 --> 00:04:36,400
have a physical card so where am I gonna

128
00:04:34,330 --> 00:04:39,010
go and find a chip like this and the

129
00:04:36,400 --> 00:04:41,830
answer is China if you go on you to

130
00:04:39,010 --> 00:04:44,980
source com they are selling a custom

131
00:04:41,830 --> 00:04:47,770
mass Brum microprocessor meant for a

132
00:04:44,980 --> 00:04:49,300
Creative Lab sound card from 1991 in

133
00:04:47,770 --> 00:04:51,250
this case so this is a slightly newer

134
00:04:49,300 --> 00:04:54,010
version than the one on the sound

135
00:04:51,250 --> 00:04:55,900
blaster 1.0 but stop and think about

136
00:04:54,010 --> 00:04:58,300
this for a little bit so ut source

137
00:04:55,900 --> 00:05:00,640
they're claiming to sell a part that was

138
00:04:58,300 --> 00:05:03,550
only ever used on this sound card 30

139
00:05:00,640 --> 00:05:06,039
years ago and where did they find these

140
00:05:03,550 --> 00:05:08,110
car these chips who are they selling

141
00:05:06,040 --> 00:05:10,090
them to what's the business model here I

142
00:05:08,110 --> 00:05:12,660
think maybe they put these parts up on

143
00:05:10,090 --> 00:05:15,940
their website literally just for me so

144
00:05:12,660 --> 00:05:18,400
anyway I ordered some and this is what I

145
00:05:15,940 --> 00:05:20,020
got so these are chips during a slightly

146
00:05:18,400 --> 00:05:21,640
different package because the newer card

147
00:05:20,020 --> 00:05:23,770
went to surface mount instead of

148
00:05:21,640 --> 00:05:26,590
through-hole at first I thought it was

149
00:05:23,770 --> 00:05:28,090
black tops looking back it probably is

150
00:05:26,590 --> 00:05:29,679
not black topped it was just laser

151
00:05:28,090 --> 00:05:32,469
marked by the manufacturer of the time

152
00:05:29,680 --> 00:05:34,540
the joking with the Chinese manufacturer

153
00:05:32,470 --> 00:05:36,910
we start with the Chinese brokers is

154
00:05:34,540 --> 00:05:39,220
that you can order whatever part number

155
00:05:36,910 --> 00:05:40,990
you want but please allow 2 to 4 weeks

156
00:05:39,220 --> 00:05:43,900
for them to laser market before they

157
00:05:40,990 --> 00:05:46,360
send it to you and so the question is

158
00:05:43,900 --> 00:05:48,099
well can I dump it so here's my dumping

159
00:05:46,360 --> 00:05:52,330
rig it's just a parallel port programmer

160
00:05:48,100 --> 00:05:55,450
with a very old Dell laptop and this is

161
00:05:52,330 --> 00:05:57,400
what I got so it's all ffs what this

162
00:05:55,450 --> 00:05:59,710
means is that the data outputs on the

163
00:05:57,400 --> 00:06:01,929
bus are simply pulled off they're not

164
00:05:59,710 --> 00:06:05,409
actually driving data out onto the bus

165
00:06:01,930 --> 00:06:07,750
this is not great okay well let's just

166
00:06:05,410 --> 00:06:10,090
let's just say you know what ok I'm just

167
00:06:07,750 --> 00:06:13,030
gonna push forward and deal with that

168
00:06:10,090 --> 00:06:14,710
problem later and so now the next step

169
00:06:13,030 --> 00:06:16,479
is to reverse engineer the layout so the

170
00:06:14,710 --> 00:06:19,359
bottom layer is pretty easy I pull it

171
00:06:16,480 --> 00:06:21,790
into the GIMP which is the free image

172
00:06:19,360 --> 00:06:23,560
editing program and I just draw over it

173
00:06:21,790 --> 00:06:24,940
so I create a new layer and I start

174
00:06:23,560 --> 00:06:27,310
drawing traces figuring out where they

175
00:06:24,940 --> 00:06:28,870
all go incidentally what I've what I've

176
00:06:27,310 --> 00:06:30,760
got going on here with the colors is the

177
00:06:28,870 --> 00:06:31,900
stuff in yellow these are traces that

178
00:06:30,760 --> 00:06:34,630
I've actually transferred to my

179
00:06:31,900 --> 00:06:36,219
schematic capture program the blue is

180
00:06:34,630 --> 00:06:38,080
stuff that I haven't done yet and so I

181
00:06:36,220 --> 00:06:40,479
can use that as markers so I understand

182
00:06:38,080 --> 00:06:43,330
what traces i reverse-engineered yeah

183
00:06:40,479 --> 00:06:44,529
and which ones I haven't done yet on the

184
00:06:43,330 --> 00:06:46,239
top layer I ran into a

185
00:06:44,529 --> 00:06:48,519
problem which is that there are chips in

186
00:06:46,239 --> 00:06:49,719
the way if I had a physical car this

187
00:06:48,519 --> 00:06:51,129
wouldn't be a problem because I could

188
00:06:49,719 --> 00:06:53,739
just desolder the chips and look

189
00:06:51,129 --> 00:06:55,269
underneath them so what I did is a crowd

190
00:06:53,739 --> 00:06:56,828
sourced it I went on Twitter and I said

191
00:06:55,269 --> 00:06:59,049
hey guys do you have an old car that you

192
00:06:56,829 --> 00:07:01,989
could send to me and nobody had that but

193
00:06:59,049 --> 00:07:05,019
one gentleman agreed to remove the chips

194
00:07:01,989 --> 00:07:07,568
on his working vintage soundblaster card

195
00:07:05,019 --> 00:07:09,669
and send me pictures so I could look

196
00:07:07,569 --> 00:07:12,189
underneath them this is what it looked

197
00:07:09,669 --> 00:07:13,479
like on its workbench here I I would not

198
00:07:12,189 --> 00:07:15,159
have done this but he had a whole

199
00:07:13,479 --> 00:07:17,139
professional desoldering set up he was

200
00:07:15,159 --> 00:07:19,149
very confident and very excited in the

201
00:07:17,139 --> 00:07:21,669
project and so here we are this is the

202
00:07:19,149 --> 00:07:23,139
entire card reversed engineered in the

203
00:07:21,669 --> 00:07:26,289
sense that I've drawn all the traces out

204
00:07:23,139 --> 00:07:28,689
and both on the top in the bottom which

205
00:07:26,289 --> 00:07:30,248
is awesome next step is to start

206
00:07:28,689 --> 00:07:31,749
figuring out what the parts are and this

207
00:07:30,249 --> 00:07:33,699
is where I ran into another snag which

208
00:07:31,749 --> 00:07:36,219
is these are really awful JPEG

209
00:07:33,699 --> 00:07:38,409
compressed images and JPEG reduces the

210
00:07:36,219 --> 00:07:40,419
color resolution which means it's really

211
00:07:38,409 --> 00:07:42,489
hard to figure out resistor color codes

212
00:07:40,419 --> 00:07:44,019
and so I went back to Twitter and the

213
00:07:42,489 --> 00:07:45,878
same guy that did all the D soldering

214
00:07:44,019 --> 00:07:47,379
work was able to send me some pictures

215
00:07:45,879 --> 00:07:49,689
of the resistors and so I could figure

216
00:07:47,379 --> 00:07:51,189
out what their values were and so the

217
00:07:49,689 --> 00:07:53,469
next step that I do is I take the

218
00:07:51,189 --> 00:07:55,329
schematic so this is Chi CAD and I just

219
00:07:53,469 --> 00:07:57,519
start dropping components in so this is

220
00:07:55,329 --> 00:08:00,129
every single component that's on the

221
00:07:57,519 --> 00:08:02,409
circuit board next step is to start

222
00:08:00,129 --> 00:08:05,019
wiring them up so following the images

223
00:08:02,409 --> 00:08:07,149
that I captured in GIMP I just start

224
00:08:05,019 --> 00:08:09,759
putting in one wire at a time marking it

225
00:08:07,149 --> 00:08:11,379
off as I complete it and so you can see

226
00:08:09,759 --> 00:08:14,079
here is the more progress here I start

227
00:08:11,379 --> 00:08:15,819
moving functional blocks around this is

228
00:08:14,079 --> 00:08:18,159
very close to the final schematic and

229
00:08:15,819 --> 00:08:19,869
this is the final schematic here I like

230
00:08:18,159 --> 00:08:21,729
to organize things by functional blocks

231
00:08:19,869 --> 00:08:24,879
inputs on the Left outputs on the right

232
00:08:21,729 --> 00:08:26,079
so it's all neat nice and organized the

233
00:08:24,879 --> 00:08:28,689
line down the middle if you're curious

234
00:08:26,079 --> 00:08:30,399
that's actually the main data bus and so

235
00:08:28,689 --> 00:08:32,740
that comes off the is a card it goes to

236
00:08:30,399 --> 00:08:36,250
some bus buffers into the synthesizer

237
00:08:32,740 --> 00:08:39,120
chips and also the 8051 microcontroller

238
00:08:36,250 --> 00:08:41,828
so the next step is to go to layout and

239
00:08:39,120 --> 00:08:44,529
what I do for layout is I set up a grid

240
00:08:41,828 --> 00:08:47,378
in GIMP because I have these reference

241
00:08:44,529 --> 00:08:50,170
images like I know that the chips have a

242
00:08:47,379 --> 00:08:51,999
point one inch lead spacing and so based

243
00:08:50,170 --> 00:08:54,099
on that I can figure out the exact dots

244
00:08:51,999 --> 00:08:56,829
per inch of the image and then I set up

245
00:08:54,100 --> 00:08:57,880
a grid on a point one inch Center and I

246
00:08:56,829 --> 00:08:59,709
can look at that and start

247
00:08:57,880 --> 00:09:01,030
to figure out how they did the original

248
00:08:59,710 --> 00:09:02,290
layout because they're all gonna line it

249
00:09:01,030 --> 00:09:04,180
to a grid it's just a matter of figuring

250
00:09:02,290 --> 00:09:06,670
out what that grid is and then I just

251
00:09:04,180 --> 00:09:08,589
copy it over so this is Chi CAD there's

252
00:09:06,670 --> 00:09:10,780
another program called dip trace that

253
00:09:08,590 --> 00:09:12,700
apparently allows you to actually take

254
00:09:10,780 --> 00:09:14,500
an image and put it underneath your

255
00:09:12,700 --> 00:09:15,730
layout and so that would have made

256
00:09:14,500 --> 00:09:18,130
things a lot easier if I could just

257
00:09:15,730 --> 00:09:20,470
trace on top of the image directly but

258
00:09:18,130 --> 00:09:22,240
that's okay so I'm gonna skip ahead here

259
00:09:20,470 --> 00:09:24,610
we are with layout mostly completed I

260
00:09:22,240 --> 00:09:26,980
can compare it with the original by

261
00:09:24,610 --> 00:09:29,110
copying the image putting it on top of

262
00:09:26,980 --> 00:09:31,810
the GIMP image with transparency turned

263
00:09:29,110 --> 00:09:33,370
on and then if anything is wrong like if

264
00:09:31,810 --> 00:09:35,560
it traces out of place I'll see it

265
00:09:33,370 --> 00:09:37,660
immediately and this one lines up which

266
00:09:35,560 --> 00:09:39,869
is great and so here we are here's the

267
00:09:37,660 --> 00:09:42,579
3d rendering of the completed card and

268
00:09:39,870 --> 00:09:44,860
I'm at the point where I might want to

269
00:09:42,580 --> 00:09:46,090
start spending money on this and so now

270
00:09:44,860 --> 00:09:49,900
we're getting back to the original

271
00:09:46,090 --> 00:09:51,550
problem of this 8051 microcontroller so

272
00:09:49,900 --> 00:09:55,110
we're at a secret laboratory this is

273
00:09:51,550 --> 00:09:59,020
actually a John McMasters house a hint

274
00:09:55,110 --> 00:10:01,270
so we we use the acid to remove the lid

275
00:09:59,020 --> 00:10:05,290
off the chip and confirm that yes indeed

276
00:10:01,270 --> 00:10:07,000
it is an Intel 80 C 51 which is great

277
00:10:05,290 --> 00:10:09,390
because that means that we can look at

278
00:10:07,000 --> 00:10:11,950
the ROM and figure out the bits

279
00:10:09,390 --> 00:10:14,439
unfortunately for us it's an implant ROM

280
00:10:11,950 --> 00:10:16,420
which means that you cannot visually

281
00:10:14,440 --> 00:10:21,400
tell the difference between a one or a

282
00:10:16,420 --> 00:10:23,290
zero using optical inspection so just at

283
00:10:21,400 --> 00:10:24,699
that same time my friend al came to me

284
00:10:23,290 --> 00:10:26,530
and he said well hey I've got an old

285
00:10:24,700 --> 00:10:29,530
Sound Blaster card do you want it and I

286
00:10:26,530 --> 00:10:32,199
said yes and then I looked at it and I

287
00:10:29,530 --> 00:10:34,900
realized it was a Chinese clone of the

288
00:10:32,200 --> 00:10:36,490
sound card from back in the day and it's

289
00:10:34,900 --> 00:10:37,990
got a micro controller on it that looks

290
00:10:36,490 --> 00:10:41,440
awfully similar to the one that the

291
00:10:37,990 --> 00:10:44,290
sound blaster card uses I wonder if I

292
00:10:41,440 --> 00:10:45,670
can dump that one it turns out I can

293
00:10:44,290 --> 00:10:49,839
because they failed to set their code

294
00:10:45,670 --> 00:10:51,520
protect bit now that I have the code I

295
00:10:49,840 --> 00:10:53,710
have a couple of options for reverse

296
00:10:51,520 --> 00:10:55,180
engineering the firmware I had a pro

297
00:10:53,710 --> 00:10:58,360
which was nice if you've got some money

298
00:10:55,180 --> 00:11:00,130
then there's radar which is difficult to

299
00:10:58,360 --> 00:11:02,920
use and I ended up with a little program

300
00:11:00,130 --> 00:11:05,020
called D 52 which is some random guy on

301
00:11:02,920 --> 00:11:07,510
the internet who wrote at 80 52

302
00:11:05,020 --> 00:11:09,730
disassembler that's also 8051 compatible

303
00:11:07,510 --> 00:11:11,120
and so the way that program works is

304
00:11:09,730 --> 00:11:13,130
that you run at the FIR

305
00:11:11,120 --> 00:11:14,870
time and it generates a file called a

306
00:11:13,130 --> 00:11:17,210
control file it basically tries to

307
00:11:14,870 --> 00:11:19,400
execute the code figure out a code path

308
00:11:17,210 --> 00:11:21,800
and identify what parts of the memory

309
00:11:19,400 --> 00:11:23,779
are code what parts are data then what

310
00:11:21,800 --> 00:11:25,670
you do is you edit that control file as

311
00:11:23,779 --> 00:11:27,080
you learn more and more about the

312
00:11:25,670 --> 00:11:28,729
disassembled program and you can make

313
00:11:27,080 --> 00:11:30,800
little Corrections and you just keep

314
00:11:28,730 --> 00:11:32,420
running it in an iterative process and

315
00:11:30,800 --> 00:11:34,790
then eventually you can start adding

316
00:11:32,420 --> 00:11:36,979
things like labels and variable names

317
00:11:34,790 --> 00:11:38,270
and stuff like that and so I learned

318
00:11:36,980 --> 00:11:40,160
some really interesting things about the

319
00:11:38,270 --> 00:11:43,339
code here doing it with this approach

320
00:11:40,160 --> 00:11:46,430
here one of them is that it has copy

321
00:11:43,339 --> 00:11:48,620
protection so this is the end of an

322
00:11:46,430 --> 00:11:50,779
interrupt Handler and they're doing some

323
00:11:48,620 --> 00:11:52,490
stuff here and then instead of a return

324
00:11:50,779 --> 00:11:54,260
from interrupt instruction they have a

325
00:11:52,490 --> 00:11:56,210
copyright notice which is really weird

326
00:11:54,260 --> 00:11:57,920
because you would think that you'd need

327
00:11:56,210 --> 00:12:00,560
a return instruction and then I started

328
00:11:57,920 --> 00:12:03,439
thinking about and I realized that the

329
00:12:00,560 --> 00:12:05,479
asking number two happens to correspond

330
00:12:03,440 --> 00:12:07,790
to the red-eye instruction on this

331
00:12:05,480 --> 00:12:10,370
architecture so yes they are actually

332
00:12:07,790 --> 00:12:14,089
executing the copyright notice as part

333
00:12:10,370 --> 00:12:15,980
of their code so that's kind of cute

334
00:12:14,089 --> 00:12:17,300
another interesting bit of code here has

335
00:12:15,980 --> 00:12:20,450
to do with the way that the soundblaster

336
00:12:17,300 --> 00:12:22,699
digitizes audio there is no analog to

337
00:12:20,450 --> 00:12:24,529
digital converter chip on this board

338
00:12:22,700 --> 00:12:26,959
because of the time there are very very

339
00:12:24,529 --> 00:12:28,820
expensive devices and so what creative

340
00:12:26,959 --> 00:12:31,270
labs did back in the day was they had an

341
00:12:28,820 --> 00:12:34,220
8-bit DAC a digital to analog converter

342
00:12:31,270 --> 00:12:35,750
connected to a comparator and basically

343
00:12:34,220 --> 00:12:37,670
now you've got a comparator with an

344
00:12:35,750 --> 00:12:38,990
adjustable threshold so you set it

345
00:12:37,670 --> 00:12:41,510
halfway and you figure out if your

346
00:12:38,990 --> 00:12:43,730
incoming sample is above or below and

347
00:12:41,510 --> 00:12:45,830
then using a process of successive

348
00:12:43,730 --> 00:12:47,959
approximation you keep dividing the

349
00:12:45,830 --> 00:12:50,690
difference until now you have the exact

350
00:12:47,959 --> 00:12:52,160
value of that sample and so it was a

351
00:12:50,690 --> 00:12:54,110
pretty common technique back in the day

352
00:12:52,160 --> 00:12:56,180
nowadays they still use it but it's

353
00:12:54,110 --> 00:12:58,779
typically within the chip so if you ever

354
00:12:56,180 --> 00:13:00,949
see a SAR ADC that's how it works and

355
00:12:58,779 --> 00:13:02,510
now that I have code I can start

356
00:13:00,950 --> 00:13:04,459
ordering stuff from China so I'm getting

357
00:13:02,510 --> 00:13:06,080
in some more chips here including some

358
00:13:04,459 --> 00:13:07,689
of the synthesizer chips that the sound

359
00:13:06,080 --> 00:13:11,600
blaster uses to maintain compatibility

360
00:13:07,690 --> 00:13:14,420
with the game blaster these chips are

361
00:13:11,600 --> 00:13:16,070
actually fake you can see on the

362
00:13:14,420 --> 00:13:18,800
comparison on the right hand side here

363
00:13:16,070 --> 00:13:20,480
I'm comparing it with 7/4 series logic

364
00:13:18,800 --> 00:13:23,150
if you scratch that with a knife it

365
00:13:20,480 --> 00:13:25,080
turns white because of the glass fibers

366
00:13:23,150 --> 00:13:27,000
that are embedded inside the packet

367
00:13:25,080 --> 00:13:29,310
when you try to do that to a fake chip

368
00:13:27,000 --> 00:13:31,140
that's been that's had his part number

369
00:13:29,310 --> 00:13:33,359
scraped off and replaced with paint

370
00:13:31,140 --> 00:13:35,250
that's then been laser marked the paint

371
00:13:33,360 --> 00:13:36,900
will kind of peel up so you hit it with

372
00:13:35,250 --> 00:13:38,430
a knife and you'll actually you can you

373
00:13:36,900 --> 00:13:39,959
could scrape off these little peelings

374
00:13:38,430 --> 00:13:42,540
and that's how you know that it's been

375
00:13:39,960 --> 00:13:45,390
remarked to make a long story short

376
00:13:42,540 --> 00:13:47,699
these chips actually worked fine as far

377
00:13:45,390 --> 00:13:50,880
as I can tell they are legitimate si a

378
00:13:47,700 --> 00:13:54,930
1099s that have been remarked to freshen

379
00:13:50,880 --> 00:13:56,550
up the date code so it sounds really

380
00:13:54,930 --> 00:13:58,500
silly but a lot of contract

381
00:13:56,550 --> 00:14:00,209
manufacturers insist on having parts

382
00:13:58,500 --> 00:14:02,370
that are no older than three years and

383
00:14:00,210 --> 00:14:04,380
it has to do with moisture absorption so

384
00:14:02,370 --> 00:14:05,940
the packages will absorb moisture when

385
00:14:04,380 --> 00:14:07,350
you run them through a reflow they can

386
00:14:05,940 --> 00:14:09,660
actually do what's called pop Corning

387
00:14:07,350 --> 00:14:11,400
where they explode like a kernel popcorn

388
00:14:09,660 --> 00:14:13,069
and fly off the board I've never seen it

389
00:14:11,400 --> 00:14:15,630
happen but it must be impressive

390
00:14:13,070 --> 00:14:18,720
so they freshen up date codes so they

391
00:14:15,630 --> 00:14:20,040
can sell old parts as new parts so while

392
00:14:18,720 --> 00:14:21,630
I was waiting for boards to come I also

393
00:14:20,040 --> 00:14:23,579
wrote a little test program I fired up

394
00:14:21,630 --> 00:14:26,790
turbo C I don't know if any of you ever

395
00:14:23,580 --> 00:14:27,630
worked with turbo C before and there we

396
00:14:26,790 --> 00:14:30,270
go

397
00:14:27,630 --> 00:14:31,680
lustre video there for a bit turbo C is

398
00:14:30,270 --> 00:14:32,880
really fun this is actually one of the

399
00:14:31,680 --> 00:14:34,530
most fun parts of this whole exercise

400
00:14:32,880 --> 00:14:36,450
this is code that I've wanted to write

401
00:14:34,530 --> 00:14:39,839
for 25 years I just never got around to

402
00:14:36,450 --> 00:14:41,730
it then I got some sort of bad old

403
00:14:39,839 --> 00:14:43,170
memories came back to bite me like far

404
00:14:41,730 --> 00:14:45,930
pointers have any of you ever dealt with

405
00:14:43,170 --> 00:14:48,420
far pointers before I see a few people

406
00:14:45,930 --> 00:14:49,979
that are sort of smiling and I can tell

407
00:14:48,420 --> 00:14:51,390
there's some Stockholm Syndrome going on

408
00:14:49,980 --> 00:14:53,970
there for the rest of you who never

409
00:14:51,390 --> 00:14:57,210
dealt with that you're used to say like

410
00:14:53,970 --> 00:14:58,980
a 32 or 64 bit flat address space in the

411
00:14:57,210 --> 00:15:01,650
old days in the bad old days of the x86

412
00:14:58,980 --> 00:15:03,570
architecture you had a segment and an

413
00:15:01,650 --> 00:15:05,850
offset register they're both 16-bit

414
00:15:03,570 --> 00:15:08,250
registers to compute a physical address

415
00:15:05,850 --> 00:15:11,130
you would take the offset register and

416
00:15:08,250 --> 00:15:13,740
add it to the segment register that's

417
00:15:11,130 --> 00:15:16,589
been shifted over by four bits to get a

418
00:15:13,740 --> 00:15:17,910
20 bit physical address so there's a

419
00:15:16,589 --> 00:15:19,830
couple of interesting things that spring

420
00:15:17,910 --> 00:15:21,540
out of that so number one you represent

421
00:15:19,830 --> 00:15:23,670
that with a 32-bit number in your

422
00:15:21,540 --> 00:15:25,709
program but it means that you can have

423
00:15:23,670 --> 00:15:29,430
multiple 32-bit numbers that refer to

424
00:15:25,710 --> 00:15:31,200
the same physical address okay so anyway

425
00:15:29,430 --> 00:15:33,030
that's kind of a long story but rough

426
00:15:31,200 --> 00:15:35,280
right well the other interesting thing

427
00:15:33,030 --> 00:15:38,230
that I ran into is the DMA controller

428
00:15:35,280 --> 00:15:40,420
for the x86 processor was

429
00:15:38,230 --> 00:15:44,650
originally designed for the Intel 8080

430
00:15:40,420 --> 00:15:47,740
it only has 16 address lines which means

431
00:15:44,650 --> 00:15:50,740
that you can only DMA up to 64 K at a

432
00:15:47,740 --> 00:15:53,230
time so what I be ended when they

433
00:15:50,740 --> 00:15:55,570
designed the PC was they added a 4-bit

434
00:15:53,230 --> 00:15:57,820
latch and that would provide the extra

435
00:15:55,570 --> 00:16:00,400
four bits of address to get you in 20

436
00:15:57,820 --> 00:16:02,410
bit address space so the problem is is

437
00:16:00,400 --> 00:16:05,500
that it means that you can you still

438
00:16:02,410 --> 00:16:07,329
cannot transfer more than 64 K at a time

439
00:16:05,500 --> 00:16:09,520
but you also need to make sure that your

440
00:16:07,330 --> 00:16:10,840
memory is aligned to that page boundary

441
00:16:09,520 --> 00:16:14,260
otherwise it will fail a little wrap

442
00:16:10,840 --> 00:16:16,180
around and start copying garbage so the

443
00:16:14,260 --> 00:16:18,040
problem is is that das will not let you

444
00:16:16,180 --> 00:16:19,540
allocate memory on a page boundary and

445
00:16:18,040 --> 00:16:21,550
so I came up with this really

446
00:16:19,540 --> 00:16:23,380
complicated algorithm that would do a

447
00:16:21,550 --> 00:16:24,939
test allocation to see where it landed

448
00:16:23,380 --> 00:16:26,200
in the page and then allocate more

449
00:16:24,940 --> 00:16:28,240
memory and it would jump to the next

450
00:16:26,200 --> 00:16:29,860
page if necessary and then I started

451
00:16:28,240 --> 00:16:31,210
looking at game code from back in the

452
00:16:29,860 --> 00:16:32,980
day and you know what they do they

453
00:16:31,210 --> 00:16:35,590
allocate memory does it cross the page

454
00:16:32,980 --> 00:16:38,020
boundary yes try again try is up to 16

455
00:16:35,590 --> 00:16:43,450
times if that fails then exit to das

456
00:16:38,020 --> 00:16:47,740
with an error message okay great and

457
00:16:43,450 --> 00:16:49,390
boards came in and I started soldering

458
00:16:47,740 --> 00:16:50,830
it up this is very exciting part because

459
00:16:49,390 --> 00:16:52,810
you really want to get it done you want

460
00:16:50,830 --> 00:16:56,350
to try it out but there's some soldering

461
00:16:52,810 --> 00:16:56,709
and some sembly required and so here we

462
00:16:56,350 --> 00:16:58,750
are

463
00:16:56,710 --> 00:17:02,110
moment of truth I have this plugged into

464
00:16:58,750 --> 00:17:03,820
an old IBM PC and I'm turning it on and

465
00:17:02,110 --> 00:17:07,329
running that little test program that I

466
00:17:03,820 --> 00:17:10,000
wrote in turbo C and this is what I

467
00:17:07,329 --> 00:17:13,359
heard actually yes it was the literal

468
00:17:10,000 --> 00:17:19,740
tada wave from Windows 3.1 in fact let's

469
00:17:13,359 --> 00:17:19,740
see if this will play here it works

470
00:17:20,210 --> 00:17:23,520
[Applause]

471
00:17:21,630 --> 00:17:25,600
so that was awesome

472
00:17:23,520 --> 00:17:27,550
now that's where the Chinese cloned

473
00:17:25,599 --> 00:17:29,980
firmware but I still had these chips

474
00:17:27,550 --> 00:17:32,020
that I ordered from China that seemed to

475
00:17:29,980 --> 00:17:34,270
be the legitimate one will these chips

476
00:17:32,020 --> 00:17:36,910
actually work or are they just fake and

477
00:17:34,270 --> 00:17:38,290
so let's test one so I took a socket put

478
00:17:36,910 --> 00:17:40,360
in the socket put that socket adapter

479
00:17:38,290 --> 00:17:43,149
into another socket which I put into a

480
00:17:40,360 --> 00:17:46,270
socket which fit into the socket on the

481
00:17:43,150 --> 00:17:50,770
board it looks ridiculous but it worked

482
00:17:46,270 --> 00:17:52,360
so I know these are legitimate chips ok

483
00:17:50,770 --> 00:17:53,740
now that means that I got a reverse

484
00:17:52,360 --> 00:17:55,179
engineer that I got to figure out a way

485
00:17:53,740 --> 00:17:56,980
to extract the firmware out of this

486
00:17:55,180 --> 00:17:58,870
device and so I got some very

487
00:17:56,980 --> 00:18:01,030
high-resolution imagery of the dye both

488
00:17:58,870 --> 00:18:03,429
the top metal layer and poly silicon

489
00:18:01,030 --> 00:18:05,500
layer and I started tracing out some

490
00:18:03,430 --> 00:18:07,540
circuitry you can see I've got kind of

491
00:18:05,500 --> 00:18:09,490
some of the functional blocks drawn out

492
00:18:07,540 --> 00:18:11,409
here program ROM is the interesting part

493
00:18:09,490 --> 00:18:12,940
the other parts are kind of interesting

494
00:18:11,410 --> 00:18:14,740
too like peripheral logic I didn't dig

495
00:18:12,940 --> 00:18:16,180
into those at all what I really wanted

496
00:18:14,740 --> 00:18:17,710
was low-hanging fruit I wanted to be

497
00:18:16,180 --> 00:18:19,660
able to look for something like a test

498
00:18:17,710 --> 00:18:21,310
mode you know I could kick it in a test

499
00:18:19,660 --> 00:18:23,650
mode maybe use that to read the ROM out

500
00:18:21,310 --> 00:18:24,879
and so while I'm digging through I

501
00:18:23,650 --> 00:18:26,590
figured I'd maybe talk a little bit

502
00:18:24,880 --> 00:18:29,020
about some of the elements that I found

503
00:18:26,590 --> 00:18:32,110
along the way so this blurry mess here

504
00:18:29,020 --> 00:18:34,090
this is actually a latch and I can look

505
00:18:32,110 --> 00:18:35,350
at this and instantly recognize it as a

506
00:18:34,090 --> 00:18:37,030
latch because it's got these two

507
00:18:35,350 --> 00:18:38,649
interlocking pieces of metal it's like

508
00:18:37,030 --> 00:18:40,210
to see shapes that are kind of

509
00:18:38,650 --> 00:18:41,500
interlocking but you haven't been

510
00:18:40,210 --> 00:18:43,300
staring at this for months so you

511
00:18:41,500 --> 00:18:45,700
wouldn't know what that looks like let's

512
00:18:43,300 --> 00:18:47,649
dig into that a little bit so this is a

513
00:18:45,700 --> 00:18:49,570
layer underneath this is actually the

514
00:18:47,650 --> 00:18:52,450
diffusion layer and the poly silicon

515
00:18:49,570 --> 00:18:54,909
layer so the poly silicon layer is white

516
00:18:52,450 --> 00:18:57,880
the diffusion layer is blue was sort of

517
00:18:54,910 --> 00:19:00,730
that black outline anytime poly silicon

518
00:18:57,880 --> 00:19:02,380
crosses diffusion you get a transistor

519
00:19:00,730 --> 00:19:04,090
and so you can see there's a couple of

520
00:19:02,380 --> 00:19:06,100
spots here here's a transistor here

521
00:19:04,090 --> 00:19:11,350
here's a transistor here we've got one

522
00:19:06,100 --> 00:19:14,740
here here here here and here a couple of

523
00:19:11,350 --> 00:19:16,270
transistors I'm gonna redraw that with a

524
00:19:14,740 --> 00:19:18,940
top metal so it's a little easier to see

525
00:19:16,270 --> 00:19:20,379
in diagrammatic form and so right here

526
00:19:18,940 --> 00:19:22,510
on this side this is actually an

527
00:19:20,380 --> 00:19:24,250
inverter and so there's two transistors

528
00:19:22,510 --> 00:19:25,750
in an inverter there's a low side

529
00:19:24,250 --> 00:19:27,940
transistor and a high side transistor

530
00:19:25,750 --> 00:19:29,530
the gates are connected together because

531
00:19:27,940 --> 00:19:31,510
they operate kind of as opposites of

532
00:19:29,530 --> 00:19:32,559
each other when one transistor is on the

533
00:19:31,510 --> 00:19:35,259
other one is off and

534
00:19:32,559 --> 00:19:38,710
vice versa so there there's an inverter

535
00:19:35,259 --> 00:19:40,720
there the latch itself is made of two

536
00:19:38,710 --> 00:19:42,789
inverters that are cross connected and

537
00:19:40,720 --> 00:19:44,529
then there's another transistor that

538
00:19:42,789 --> 00:19:46,419
acts as a series switch and so if you

539
00:19:44,529 --> 00:19:48,639
want to load data into this latch you

540
00:19:46,419 --> 00:19:50,980
turn on that switch by asserting the

541
00:19:48,639 --> 00:19:53,110
load signal and then your input

542
00:19:50,980 --> 00:19:55,870
basically forces those two inverters

543
00:19:53,110 --> 00:19:57,879
into a particular state yes you are

544
00:19:55,870 --> 00:20:00,129
actually driving and help with an output

545
00:19:57,879 --> 00:20:02,439
in this case and the way until designed

546
00:20:00,129 --> 00:20:04,299
it is they made that other inverter weak

547
00:20:02,440 --> 00:20:07,119
on purpose so that it's easy to

548
00:20:04,299 --> 00:20:08,830
overpower with your signal coming in so

549
00:20:07,119 --> 00:20:10,600
that's how you latch the state of data

550
00:20:08,830 --> 00:20:13,119
in fact you would use this over a

551
00:20:10,600 --> 00:20:15,309
flip-flop because it requires far fewer

552
00:20:13,119 --> 00:20:17,459
transistors and so they use these

553
00:20:15,309 --> 00:20:20,350
latches all over the place in the design

554
00:20:17,460 --> 00:20:22,509
so let's zoom out a little bit this is

555
00:20:20,350 --> 00:20:24,158
kind of a typical circuit here if you're

556
00:20:22,509 --> 00:20:25,600
listening to Chris's presentation

557
00:20:24,159 --> 00:20:28,419
earlier you could see that he was color

558
00:20:25,600 --> 00:20:29,799
coding his power and ground rails I've

559
00:20:28,419 --> 00:20:31,119
done the same thing here too and it

560
00:20:29,799 --> 00:20:33,149
looks like we may have accidentally used

561
00:20:31,119 --> 00:20:35,259
the same color code which is interesting

562
00:20:33,149 --> 00:20:37,479
so you can also see there's a row of

563
00:20:35,259 --> 00:20:39,820
latches kind of in the middle here so

564
00:20:37,480 --> 00:20:41,409
these guys right in here and those are

565
00:20:39,820 --> 00:20:43,600
all part of the test mode circuit that I

566
00:20:41,409 --> 00:20:45,039
was trying to back out unfortunately it

567
00:20:43,600 --> 00:20:47,649
turned out to be very very complicated

568
00:20:45,039 --> 00:20:50,080
and so I figured that maybe I'd look

569
00:20:47,649 --> 00:20:51,789
into some approach that you know could

570
00:20:50,080 --> 00:20:53,470
automatically extract a netlist or

571
00:20:51,789 --> 00:20:55,240
something as it turns out it's too

572
00:20:53,470 --> 00:20:57,549
complicated because the image just has

573
00:20:55,240 --> 00:20:59,799
too many shadows on it so a chip is

574
00:20:57,549 --> 00:21:01,869
actually a 3d device we're looking at

575
00:20:59,799 --> 00:21:04,960
under a microscope but there are shadows

576
00:21:01,869 --> 00:21:06,490
and things that that are basically

577
00:21:04,960 --> 00:21:09,159
three-dimensional shapes so the poly

578
00:21:06,490 --> 00:21:11,019
silicon is bumpy and when you put metal

579
00:21:09,159 --> 00:21:13,389
on top of that you get these little

580
00:21:11,019 --> 00:21:15,369
bumps that cast shadows and those look

581
00:21:13,389 --> 00:21:18,070
like dark lines and so it's really hard

582
00:21:15,369 --> 00:21:19,600
to tell if it's an actual connection or

583
00:21:18,070 --> 00:21:21,580
if it's just the shadow going underneath

584
00:21:19,600 --> 00:21:24,279
it or if it's actually a completely

585
00:21:21,580 --> 00:21:25,899
disconnected piece of metal and that's

586
00:21:24,279 --> 00:21:27,519
really unfortunate so I have to go

587
00:21:25,899 --> 00:21:28,840
through by hand and figure this out so

588
00:21:27,519 --> 00:21:31,119
this is part of what that's what that

589
00:21:28,840 --> 00:21:32,320
circuit looks like so I moved on from

590
00:21:31,119 --> 00:21:34,720
that and I thought well maybe I should

591
00:21:32,320 --> 00:21:37,330
just start tracing out the ROM directly

592
00:21:34,720 --> 00:21:38,679
so here's a little piece of the ROM this

593
00:21:37,330 --> 00:21:40,869
is what I was able to figure out there's

594
00:21:38,679 --> 00:21:44,320
an and array it's technically an and ROM

595
00:21:40,869 --> 00:21:46,090
in order to be more compact there's also

596
00:21:44,320 --> 00:21:48,580
an address MUX here and a

597
00:21:46,090 --> 00:21:51,580
sample fire and I'll go into a little

598
00:21:48,580 --> 00:21:53,678
bit more detail on that so an and ROM is

599
00:21:51,580 --> 00:21:55,899
interesting because what it's done is

600
00:21:53,679 --> 00:21:57,820
its created a string of transistors like

601
00:21:55,900 --> 00:21:59,950
a string of Christmas lights all wired

602
00:21:57,820 --> 00:22:01,779
in series and so if you break the

603
00:21:59,950 --> 00:22:03,549
circuit at any one of those points it'll

604
00:22:01,779 --> 00:22:07,480
open the circuit and your output will go

605
00:22:03,549 --> 00:22:09,400
from a 1 to a 0 so in an and ROM the way

606
00:22:07,480 --> 00:22:11,710
they do it is they have an at least in

607
00:22:09,400 --> 00:22:14,260
this particular Intel chip they have 64

608
00:22:11,710 --> 00:22:16,360
columns that MUX to a single output data

609
00:22:14,260 --> 00:22:18,460
bit and then they have 8 of those data

610
00:22:16,360 --> 00:22:20,620
bits going out to the data bus and then

611
00:22:18,460 --> 00:22:22,870
there are 64 row inputs so that's these

612
00:22:20,620 --> 00:22:24,158
guys here on the rows a 7 2 a 5 and

613
00:22:22,870 --> 00:22:26,469
those go all the way through the wrong

614
00:22:24,159 --> 00:22:30,700
and so if you go and do the math you end

615
00:22:26,470 --> 00:22:33,220
up with 4096 bytes so the way this ROM

616
00:22:30,700 --> 00:22:36,190
works is that it's an implant ROM each

617
00:22:33,220 --> 00:22:38,500
of those transistors in the branch has 2

618
00:22:36,190 --> 00:22:40,750
possible configurations one of them is a

619
00:22:38,500 --> 00:22:43,990
working transistor the other is a

620
00:22:40,750 --> 00:22:45,370
transistor that is stuck on and the way

621
00:22:43,990 --> 00:22:47,950
they do that is they use an ion

622
00:22:45,370 --> 00:22:49,600
implantation machine to take charge

623
00:22:47,950 --> 00:22:52,360
carriers and embed them underneath the

624
00:22:49,600 --> 00:22:54,668
transistor and it actually shifts the

625
00:22:52,360 --> 00:22:56,889
threshold voltage of the transistor so

626
00:22:54,669 --> 00:22:58,870
there's no way to turn it off unless you

627
00:22:56,890 --> 00:23:01,720
apply a negative voltage which you can't

628
00:22:58,870 --> 00:23:04,059
do on this chip and so each of these row

629
00:23:01,720 --> 00:23:05,409
inputs is always going to be a 1 and if

630
00:23:04,059 --> 00:23:07,720
you want to read out a particular row

631
00:23:05,409 --> 00:23:10,390
you simply assert it you bring it low

632
00:23:07,720 --> 00:23:13,059
and then if the transistor is broken it

633
00:23:10,390 --> 00:23:14,799
stays on if the transistor is not broken

634
00:23:13,059 --> 00:23:17,350
it turns off and so that's how you

635
00:23:14,799 --> 00:23:18,700
encode a 1 or 0 and that's again that's

636
00:23:17,350 --> 00:23:20,709
done in the implant layer and so

637
00:23:18,700 --> 00:23:23,440
unfortunately I cannot inspect that with

638
00:23:20,710 --> 00:23:24,880
an optical microscope to compare that

639
00:23:23,440 --> 00:23:26,740
with a nether ROM that's on the chip

640
00:23:24,880 --> 00:23:28,870
this is what the microcode ROM looks

641
00:23:26,740 --> 00:23:31,029
like this is what's known as a diffusion

642
00:23:28,870 --> 00:23:32,770
ROM and so that's all done in the third

643
00:23:31,029 --> 00:23:36,490
diffusion layer here underneath poly

644
00:23:32,770 --> 00:23:39,370
silicon and metal and so the density of

645
00:23:36,490 --> 00:23:41,350
this is a lot less they can't really fit

646
00:23:39,370 --> 00:23:42,699
quite as much data in here in this case

647
00:23:41,350 --> 00:23:44,320
it's fine because they're just using it

648
00:23:42,700 --> 00:23:45,610
to encode the micro code and so

649
00:23:44,320 --> 00:23:47,980
optically you can look at this and

650
00:23:45,610 --> 00:23:49,059
figure out what the bits are so I'm

651
00:23:47,980 --> 00:23:51,429
going to go back to the sense amplifier

652
00:23:49,059 --> 00:23:53,168
on this ROM and I noticed some

653
00:23:51,429 --> 00:23:55,360
interesting things it takes the signal

654
00:23:53,169 --> 00:23:57,250
coming from the ROM it runs it through a

655
00:23:55,360 --> 00:23:59,610
buffer it gates it with a clock signal

656
00:23:57,250 --> 00:24:02,919
then it runs it into a latch

657
00:23:59,610 --> 00:24:05,500
there is a single or gate that stands

658
00:24:02,919 --> 00:24:08,440
between the output of this ROM and the

659
00:24:05,500 --> 00:24:10,059
internal data bus in the 8051 that data

660
00:24:08,440 --> 00:24:13,120
bus goes everything else on the chip

661
00:24:10,059 --> 00:24:15,370
including the external data lines so I

662
00:24:13,120 --> 00:24:17,469
could try to figure out how to assert

663
00:24:15,370 --> 00:24:20,500
that read line and read it out onto the

664
00:24:17,470 --> 00:24:24,519
bus or and I started thinking about this

665
00:24:20,500 --> 00:24:26,710
because turns out the 8051 supports an

666
00:24:24,519 --> 00:24:28,450
external program memory what you do is

667
00:24:26,710 --> 00:24:31,360
you assert a wire that's called ei for

668
00:24:28,450 --> 00:24:33,700
external address and it will put an

669
00:24:31,360 --> 00:24:36,399
address out onto the external bus lines

670
00:24:33,700 --> 00:24:39,850
to an external EEPROM that will then

671
00:24:36,399 --> 00:24:42,820
fetch a program word feed that back in

672
00:24:39,850 --> 00:24:46,600
and then it will execute it so if I do

673
00:24:42,820 --> 00:24:49,389
that and if I feed it no-ops by forcing

674
00:24:46,600 --> 00:24:51,939
those data inputs low that means the

675
00:24:49,389 --> 00:24:53,709
program counter is now a literal counter

676
00:24:51,940 --> 00:24:55,750
it's going to start at 0 it's going to

677
00:24:53,710 --> 00:24:56,740
count all the way up to 4,000 95 and

678
00:24:55,750 --> 00:25:00,490
then it's gonna wrap back to the

679
00:24:56,740 --> 00:25:03,490
beginning so if I'm doing that then

680
00:25:00,490 --> 00:25:07,120
maybe there's a way I can probe the data

681
00:25:03,490 --> 00:25:09,759
bus outputs of that ROM directly in fact

682
00:25:07,120 --> 00:25:11,860
I would probe them right here right

683
00:25:09,759 --> 00:25:13,360
before that gate so I can take advantage

684
00:25:11,860 --> 00:25:16,330
of the sense amplifier and the rest of

685
00:25:13,360 --> 00:25:18,850
that circuitry so what would that look

686
00:25:16,330 --> 00:25:23,168
like so here we are at the secret lab

687
00:25:18,850 --> 00:25:25,059
aka John McMasters house and we've got

688
00:25:23,169 --> 00:25:27,100
the chip here in a socket with a very

689
00:25:25,059 --> 00:25:28,690
long ribbon cable at the other end of

690
00:25:27,100 --> 00:25:31,000
this ribbon cable is the 4 megahertz

691
00:25:28,690 --> 00:25:33,240
oscillator yes this works no I did not

692
00:25:31,000 --> 00:25:35,529
need load capacitors in that oscillator

693
00:25:33,240 --> 00:25:36,580
there's a lot of parasitic capacitance

694
00:25:35,529 --> 00:25:38,740
along the way that serves that purpose

695
00:25:36,580 --> 00:25:40,899
and then I've got a single tungsten

696
00:25:38,740 --> 00:25:45,009
probe coming in here to the D capped

697
00:25:40,899 --> 00:25:46,719
chip the first thing that I did is as a

698
00:25:45,009 --> 00:25:49,899
sort of a quick proof of concept I went

699
00:25:46,720 --> 00:25:51,460
in to probe a convenient clock pad and I

700
00:25:49,899 --> 00:25:53,768
think these were put in for some sort of

701
00:25:51,460 --> 00:25:55,960
not necessarily manufacturing tests but

702
00:25:53,769 --> 00:25:57,519
development tests these are two clock

703
00:25:55,960 --> 00:26:00,129
phases that are used in a whole bunch of

704
00:25:57,519 --> 00:26:02,080
registers and functional circuitry

705
00:26:00,129 --> 00:26:03,189
throughout the chip so what you do is

706
00:26:02,080 --> 00:26:06,129
you have to blow a hole for that

707
00:26:03,190 --> 00:26:07,840
protective oxide layer first and John's

708
00:26:06,129 --> 00:26:10,119
probe station conveniently has a laser

709
00:26:07,840 --> 00:26:11,769
installed just for that purpose and in

710
00:26:10,119 --> 00:26:12,540
fact his laser is a little old it needs

711
00:26:11,769 --> 00:26:14,460
to have a new flat

712
00:26:12,540 --> 00:26:15,990
tube and so it was a little like hitting

713
00:26:14,460 --> 00:26:17,760
a button and sometimes nothing would

714
00:26:15,990 --> 00:26:19,860
happen and sometimes it would blow a

715
00:26:17,760 --> 00:26:21,960
little tiny crater and other times it

716
00:26:19,860 --> 00:26:24,899
would blow this giant gaping wound into

717
00:26:21,960 --> 00:26:27,450
the chip so this is a very exciting

718
00:26:24,900 --> 00:26:29,130
process for me so I was able to blow a

719
00:26:27,450 --> 00:26:31,470
hole in here and contact it with a

720
00:26:29,130 --> 00:26:34,620
tungsten probe and this is what I got

721
00:26:31,470 --> 00:26:36,090
here's a clock signal so this works the

722
00:26:34,620 --> 00:26:38,149
ringing that you see on the signal is

723
00:26:36,090 --> 00:26:40,409
just because I had very long wires

724
00:26:38,150 --> 00:26:42,420
involved in this test fixture and that

725
00:26:40,410 --> 00:26:44,220
tungsten probe which by the way the

726
00:26:42,420 --> 00:26:46,560
tungsten probes look like this they're

727
00:26:44,220 --> 00:26:48,660
finer than a human hair they go down to

728
00:26:46,560 --> 00:26:51,000
a point that submicron these things are

729
00:26:48,660 --> 00:26:54,150
really really tiny and that tungsten is

730
00:26:51,000 --> 00:26:56,070
actually soldered or welded onto a soft

731
00:26:54,150 --> 00:26:58,890
wire that you can bend into different

732
00:26:56,070 --> 00:27:00,629
shapes and so one of the art of micro

733
00:26:58,890 --> 00:27:02,430
probing is being able to bend it to just

734
00:27:00,630 --> 00:27:04,020
the right angle because if it's too

735
00:27:02,430 --> 00:27:06,060
steep and you can't see the probe tip

736
00:27:04,020 --> 00:27:08,670
under the microscope if it's too shallow

737
00:27:06,060 --> 00:27:11,010
then you're actually on the edge not on

738
00:27:08,670 --> 00:27:12,510
the tip and you can't get good contact

739
00:27:11,010 --> 00:27:15,000
with the circuit that you're trying to

740
00:27:12,510 --> 00:27:16,590
look at and so here's an action shot of

741
00:27:15,000 --> 00:27:19,340
me trying to line up that tungsten probe

742
00:27:16,590 --> 00:27:24,110
before I can see it under the microscope

743
00:27:19,340 --> 00:27:27,090
okay here's the ROM output it's circled

744
00:27:24,110 --> 00:27:29,550
here's the ROM output and I've blown a

745
00:27:27,090 --> 00:27:31,800
hole through the oxide layer so you can

746
00:27:29,550 --> 00:27:34,919
see that little crater right there so

747
00:27:31,800 --> 00:27:38,430
that's exposed metal and I'm going to go

748
00:27:34,920 --> 00:27:43,590
in with the tungsten probe and this is

749
00:27:38,430 --> 00:27:45,210
what I see there is data there I got

750
00:27:43,590 --> 00:27:47,959
very excited at this point and I hooked

751
00:27:45,210 --> 00:27:50,970
it up to a sail a logic analyzer and

752
00:27:47,960 --> 00:27:52,590
this is what I'm seeing here so this is

753
00:27:50,970 --> 00:27:54,060
the counter right this is the program

754
00:27:52,590 --> 00:27:56,399
counter these are the address pins

755
00:27:54,060 --> 00:27:59,639
coming off the chip and right down here

756
00:27:56,400 --> 00:28:01,830
on the bottom this is a data bit from

757
00:27:59,640 --> 00:28:03,840
that Rob and I can tell if legit because

758
00:28:01,830 --> 00:28:06,300
it goes high at the end because it runs

759
00:28:03,840 --> 00:28:07,860
out a program it's just all ffs or the

760
00:28:06,300 --> 00:28:10,320
unused program memory this is very

761
00:28:07,860 --> 00:28:13,080
promising so all I got to do now is do

762
00:28:10,320 --> 00:28:14,850
this seven more times which I did and it

763
00:28:13,080 --> 00:28:16,280
was one of the more tedious three hours

764
00:28:14,850 --> 00:28:19,290
of my life

765
00:28:16,280 --> 00:28:21,750
now I had all this data and I saved it

766
00:28:19,290 --> 00:28:23,430
out as a CSV file and I wrote a really

767
00:28:21,750 --> 00:28:24,880
ugly and awful Python program that I

768
00:28:23,430 --> 00:28:28,120
will not be sharing

769
00:28:24,880 --> 00:28:32,110
takes that and converts it into actual

770
00:28:28,120 --> 00:28:34,389
ROM data something is not right though

771
00:28:32,110 --> 00:28:36,189
because I took that ROM data and I ran

772
00:28:34,390 --> 00:28:39,250
it through the disassembler and none of

773
00:28:36,190 --> 00:28:41,230
it made any sense I'm looking at it like

774
00:28:39,250 --> 00:28:43,780
there's instructions that just you know

775
00:28:41,230 --> 00:28:45,700
it's just clearly something went wrong

776
00:28:43,780 --> 00:28:47,889
and so I figured well maybe I got the

777
00:28:45,700 --> 00:28:51,040
data out of order because clearly I can

778
00:28:47,890 --> 00:28:54,190
see FS so I know that this is probably

779
00:28:51,040 --> 00:28:56,500
not encrypted and so what I did is I ran

780
00:28:54,190 --> 00:28:58,870
a population count I compared this to my

781
00:28:56,500 --> 00:29:00,510
reference 8051 program which was the

782
00:28:58,870 --> 00:29:03,189
code coming out of the Chinese

783
00:29:00,510 --> 00:29:06,070
soundblaster clone and I noticed that

784
00:29:03,190 --> 00:29:09,220
the most common byte was FF followed by

785
00:29:06,070 --> 00:29:11,590
0x 43 and on the Chinese sound card it

786
00:29:09,220 --> 00:29:13,090
was 0x c2 and then I realized that I

787
00:29:11,590 --> 00:29:15,669
just got the bit order reversed so I

788
00:29:13,090 --> 00:29:22,810
went and I flipped that and here we go a

789
00:29:15,670 --> 00:29:24,970
copyright creative labs 1991 but does it

790
00:29:22,810 --> 00:29:26,770
work is it a good read and so I took

791
00:29:24,970 --> 00:29:30,520
that code and I burned it into a modern

792
00:29:26,770 --> 00:29:33,520
8051 put it my sound card and sure

793
00:29:30,520 --> 00:29:36,670
enough it ran and it made the tada wave

794
00:29:33,520 --> 00:29:38,650
sound which is fantastic one thing I did

795
00:29:36,670 --> 00:29:40,030
notice from this reverse engineering

796
00:29:38,650 --> 00:29:42,400
effort which is pretty interesting is

797
00:29:40,030 --> 00:29:44,260
the well actually I'll get into that a

798
00:29:42,400 --> 00:29:46,900
little bit so next thing to do is do

799
00:29:44,260 --> 00:29:49,300
disassemble it so I'm using D 52 again

800
00:29:46,900 --> 00:29:51,370
and I found some interesting things I

801
00:29:49,300 --> 00:29:54,310
found that there are seven previously

802
00:29:51,370 --> 00:29:55,540
unknown DSP commands so I looked around

803
00:29:54,310 --> 00:29:56,860
on the internet all the various

804
00:29:55,540 --> 00:29:59,440
literature none of the stuff is

805
00:29:56,860 --> 00:30:02,050
documented I also found a playback from

806
00:29:59,440 --> 00:30:05,320
SRAM mode that nobody ever used and was

807
00:30:02,050 --> 00:30:07,480
also never documented or explored and so

808
00:30:05,320 --> 00:30:09,939
it allows you to download a sound into

809
00:30:07,480 --> 00:30:12,370
the SRAM of the 8051 and then play it

810
00:30:09,940 --> 00:30:13,810
back without using DMA and then I found

811
00:30:12,370 --> 00:30:16,120
some bits and pieces of old code

812
00:30:13,810 --> 00:30:18,399
including an ad PCM lookup table that

813
00:30:16,120 --> 00:30:20,919
they never ended up using one of the

814
00:30:18,400 --> 00:30:22,840
other things that I found going back to

815
00:30:20,920 --> 00:30:24,370
this slide here is there is a command

816
00:30:22,840 --> 00:30:26,350
that's undocumented that gives you the

817
00:30:24,370 --> 00:30:29,860
ROM checksum which is this guy right

818
00:30:26,350 --> 00:30:32,500
here so my first thought was well does

819
00:30:29,860 --> 00:30:34,659
this checksum match the checksum on an

820
00:30:32,500 --> 00:30:38,350
intact chip that's put in the same card

821
00:30:34,660 --> 00:30:41,500
and the answer was no it was

822
00:30:38,350 --> 00:30:43,030
off by two so that means that I've got

823
00:30:41,500 --> 00:30:44,140
some bits flipped in there somewhere and

824
00:30:43,030 --> 00:30:45,610
I'll have to dig through that and see if

825
00:30:44,140 --> 00:30:47,410
I can figure out what's going on there

826
00:30:45,610 --> 00:30:49,719
oddly enough I tried running the same

827
00:30:47,410 --> 00:30:53,320
checksum on the binary image on my

828
00:30:49,720 --> 00:30:55,120
computer and it was yet a third value it

829
00:30:53,320 --> 00:30:56,439
didn't match the other two values so I

830
00:30:55,120 --> 00:30:58,770
clearly have some more work to do to

831
00:30:56,440 --> 00:31:01,450
figure out what's going on with that

832
00:30:58,770 --> 00:31:02,530
okay so we got that I think that's

833
00:31:01,450 --> 00:31:04,750
basically it

834
00:31:02,530 --> 00:31:07,210
oh yeah you probably want me to talk

835
00:31:04,750 --> 00:31:09,730
about the secret 512 byte ROM that I

836
00:31:07,210 --> 00:31:14,820
found inside the Intel 8051 which

837
00:31:09,730 --> 00:31:17,650
happens to be in every intel 8259

838
00:31:14,820 --> 00:31:20,020
but I kind of figured out a little bit

839
00:31:17,650 --> 00:31:21,909
about how that ROM works just by the

840
00:31:20,020 --> 00:31:24,460
address decoder so I looked at the

841
00:31:21,909 --> 00:31:27,490
address decoder and there is an enable

842
00:31:24,460 --> 00:31:31,240
bit that comes in and it muxes the ROM

843
00:31:27,490 --> 00:31:33,159
between the 4k user ROM and this 512

844
00:31:31,240 --> 00:31:36,250
byte I'm going to call it a test run

845
00:31:33,159 --> 00:31:38,890
like a test mode ROM and I think they

846
00:31:36,250 --> 00:31:40,600
use that during manufacturing tests so

847
00:31:38,890 --> 00:31:43,000
they could kick this chip into a special

848
00:31:40,600 --> 00:31:45,010
mode and run their special program and

849
00:31:43,000 --> 00:31:48,130
exercise all these different functions

850
00:31:45,010 --> 00:31:49,690
of the chip I don't know for sure but

851
00:31:48,130 --> 00:31:51,520
one of these days I'm gonna read that

852
00:31:49,690 --> 00:31:53,440
out and see what that is because it's

853
00:31:51,520 --> 00:31:56,200
very interesting this is where it is on

854
00:31:53,440 --> 00:31:58,059
the chip so basically I found it because

855
00:31:56,200 --> 00:32:00,610
I was counting the geometry of the ROM

856
00:31:58,059 --> 00:32:03,399
and I discovered that it did not add up

857
00:32:00,610 --> 00:32:05,408
to 4096 I must have counted it a dozen

858
00:32:03,400 --> 00:32:07,090
times but it turns out it's just because

859
00:32:05,409 --> 00:32:10,600
it's got this extra v in the 12 byte

860
00:32:07,090 --> 00:32:12,250
seeker ROM in it all right to conclude I

861
00:32:10,600 --> 00:32:14,500
published the design for this particular

862
00:32:12,250 --> 00:32:17,049
sound card and so people have been

863
00:32:14,500 --> 00:32:18,610
building clones of it and in fact I saw

864
00:32:17,049 --> 00:32:20,110
one of these on eBay the other day and

865
00:32:18,610 --> 00:32:22,240
so some guy in Russia is trying to sell

866
00:32:20,110 --> 00:32:24,510
one for a hundred and eighty dollars so

867
00:32:22,240 --> 00:32:27,070
that's been up there for months and he

868
00:32:24,510 --> 00:32:28,870
keeps relisting it for twenty dollars

869
00:32:27,070 --> 00:32:31,110
cheaper every time and it just has not

870
00:32:28,870 --> 00:32:34,620
sold so we'll see what happens

871
00:32:31,110 --> 00:32:34,620
any questions

872
00:32:39,540 --> 00:32:42,609
[Music]

873
00:32:44,110 --> 00:32:48,760
someone's got to have a question yes

874
00:32:50,020 --> 00:32:56,450
from the 90s I don't know but I I'm

875
00:32:54,620 --> 00:32:57,320
kicking around the idea of building my

876
00:32:56,450 --> 00:32:59,960
own Vectrex

877
00:32:57,320 --> 00:33:03,428
so that might be something to do it's

878
00:32:59,960 --> 00:33:03,429
got more high voltage in it yes oh

879
00:33:05,890 --> 00:33:12,559
vector X is X everyone's hoarding vector

880
00:33:08,960 --> 00:33:21,500
X's it's kind of hilarious yeah it's a

881
00:33:12,559 --> 00:33:22,970
great game great machine yes ooh that's

882
00:33:21,500 --> 00:33:24,950
a really interesting idea

883
00:33:22,970 --> 00:33:26,750
those are pretty expensive but if I get

884
00:33:24,950 --> 00:33:34,789
my hands on one then I might make an

885
00:33:26,750 --> 00:33:36,289
attempt there very nice cards though no

886
00:33:34,789 --> 00:33:39,140
more question about ain't no questions

887
00:33:36,289 --> 00:33:45,158
no one's ever written any code for the

888
00:33:39,140 --> 00:33:49,280
8051 yes so have you ever looked at

889
00:33:45,159 --> 00:33:53,360
old-style Bosch car injection computers

890
00:33:49,280 --> 00:33:54,770
I have not but it sounds plausible they

891
00:33:53,360 --> 00:33:58,729
would use a microcontroller like that

892
00:33:54,770 --> 00:34:02,480
they use a 8051 derivatives with some

893
00:33:58,730 --> 00:34:06,080
extra IO stuff and also the internal rom

894
00:34:02,480 --> 00:34:06,950
and there is floating around somewhere

895
00:34:06,080 --> 00:34:10,869
in the Internet

896
00:34:06,950 --> 00:34:13,339
a version of their internal code but

897
00:34:10,869 --> 00:34:15,830
trying to reverse engineer that with the

898
00:34:13,339 --> 00:34:19,310
more modern ones it sometimes works and

899
00:34:15,830 --> 00:34:21,049
sometimes it doesn't so interesting yeah

900
00:34:19,310 --> 00:34:23,029
exactly you might make a whole bunch of

901
00:34:21,050 --> 00:34:26,149
old Porsche owners really happy if you

902
00:34:23,030 --> 00:34:27,260
would that's interesting because I think

903
00:34:26,149 --> 00:34:29,029
some of that has actually been

904
00:34:27,260 --> 00:34:31,070
reverse-engineered before if it's a

905
00:34:29,030 --> 00:34:33,980
microcontroller made by philips there's

906
00:34:31,070 --> 00:34:36,200
actually a known exploit where you use

907
00:34:33,980 --> 00:34:39,230
external address mode with an external

908
00:34:36,199 --> 00:34:41,418
EEPROM to basically dynamically

909
00:34:39,230 --> 00:34:44,240
manipulate the EA pin and then do a move

910
00:34:41,418 --> 00:34:46,040
X construct or move C instruction to

911
00:34:44,239 --> 00:34:47,449
grab the contents of the internal rom

912
00:34:46,040 --> 00:34:49,190
and then send them out through the

913
00:34:47,449 --> 00:34:50,658
serial port so there is a known meth

914
00:34:49,190 --> 00:34:53,389
for extracting firmware from some of

915
00:34:50,659 --> 00:34:56,690
those devices it could be but I think

916
00:34:53,389 --> 00:35:01,760
the way that I got ahold of that one

917
00:34:56,690 --> 00:35:04,880
copy and with the description that this

918
00:35:01,760 --> 00:35:06,319
was all the guy got I don't think all of

919
00:35:04,880 --> 00:35:08,690
them have been done just yet okay

920
00:35:06,319 --> 00:35:10,460
interesting now yeah one of the one of

921
00:35:08,690 --> 00:35:12,319
the sort of side goals of this project

922
00:35:10,460 --> 00:35:16,099
is to figure out a quick and easy way to

923
00:35:12,319 --> 00:35:17,930
dump code out of any protected ADC 51

924
00:35:16,099 --> 00:35:19,970
and so that's one of the reasons why I'm

925
00:35:17,930 --> 00:35:21,770
so interested in that 512 byte test mode

926
00:35:19,970 --> 00:35:23,779
ROM I think there may be something in

927
00:35:21,770 --> 00:35:26,450
there that will allow me to verify the

928
00:35:23,780 --> 00:35:29,900
contents of the user rom through some

929
00:35:26,450 --> 00:35:46,939
method and that may be a valuable way to

930
00:35:29,900 --> 00:35:51,200
go yes I haven't received any secret

931
00:35:46,940 --> 00:35:53,240
emails yeah I would imagine they're all

932
00:35:51,200 --> 00:35:55,578
under NDA still so I see the same thing

933
00:35:53,240 --> 00:35:57,348
about the the Intel processor I'm sure

934
00:35:55,579 --> 00:36:01,119
it's the test modes are well documented

935
00:35:57,349 --> 00:36:01,119
but they're also closely held secrets

936
00:36:02,050 --> 00:36:05,280
[Laughter]

937
00:36:07,780 --> 00:36:12,859
you still have about 10 minutes I

938
00:36:10,700 --> 00:36:15,819
actually had a couple of bonus slides in

939
00:36:12,859 --> 00:36:18,319
here if anyone's interested yeah do it

940
00:36:15,819 --> 00:36:19,640
okay this is this is pretty silly so

941
00:36:18,319 --> 00:36:21,349
you'll have to bear with me a little bit

942
00:36:19,640 --> 00:36:23,328
it's a lot of it it's kind of a history

943
00:36:21,349 --> 00:36:26,960
lesson about creative labs in the Sound

944
00:36:23,329 --> 00:36:30,980
Blaster card I spend way too much way

945
00:36:26,960 --> 00:36:32,930
too much time on this so it turns out

946
00:36:30,980 --> 00:36:34,910
all of these sound cards came out around

947
00:36:32,930 --> 00:36:37,098
the same time so this is the ad-lib

948
00:36:34,910 --> 00:36:38,569
sound card and a lot of old games

949
00:36:37,099 --> 00:36:41,300
supported it this came out in October

950
00:36:38,569 --> 00:36:43,190
1987 I actually went through a whole

951
00:36:41,300 --> 00:36:45,200
bunch of old computer magazines like PC

952
00:36:43,190 --> 00:36:48,230
magazines stuff and look for advertising

953
00:36:45,200 --> 00:36:50,299
for once and found a lot of the sort of

954
00:36:48,230 --> 00:36:51,829
interesting advertising most of these

955
00:36:50,300 --> 00:36:53,540
sound cards were actually geared towards

956
00:36:51,829 --> 00:36:56,000
musicians and composers at the time

957
00:36:53,540 --> 00:36:57,650
because you know people just didn't play

958
00:36:56,000 --> 00:36:59,869
that many games on the PC at that point

959
00:36:57,650 --> 00:37:02,690
and if they did that PC speaker was what

960
00:36:59,869 --> 00:37:04,369
kind of people expected at the

961
00:37:02,690 --> 00:37:05,750
same time creative labs actually came

962
00:37:04,369 --> 00:37:07,670
out with a first card which is the

963
00:37:05,750 --> 00:37:10,520
creative music system so I came out in

964
00:37:07,670 --> 00:37:12,950
August of 1987 so literally months apart

965
00:37:10,520 --> 00:37:14,540
and then at some point they figured out

966
00:37:12,950 --> 00:37:17,149
that people were buying these systems

967
00:37:14,540 --> 00:37:19,160
and not actually composing music on them

968
00:37:17,150 --> 00:37:20,780
they're using them to play games and so

969
00:37:19,160 --> 00:37:23,529
they re released this as the game

970
00:37:20,780 --> 00:37:25,819
blaster and sold it through RadioShack

971
00:37:23,530 --> 00:37:27,500
they're both pretty expensive systems

972
00:37:25,819 --> 00:37:29,599
and so a lot of people did instead of

973
00:37:27,500 --> 00:37:31,910
spending the you know $200 or whatever

974
00:37:29,599 --> 00:37:34,010
is they would buy a CO vox which is

975
00:37:31,910 --> 00:37:35,509
basically a resistor ladder DAC that

976
00:37:34,010 --> 00:37:37,099
you'd connect to your parallel port i

977
00:37:35,510 --> 00:37:39,290
actually built one of these back in the

978
00:37:37,099 --> 00:37:42,230
day so I could listen to my mod tracker

979
00:37:39,290 --> 00:37:44,359
music and stuff and so you'd spent $70

980
00:37:42,230 --> 00:37:45,710
and you just plug it in it worked

981
00:37:44,359 --> 00:37:48,230
there was a clone that was very similar

982
00:37:45,710 --> 00:37:50,349
a bit called the Disney sound source and

983
00:37:48,230 --> 00:37:52,700
some of you might have had that as well

984
00:37:50,349 --> 00:37:53,900
so what happened then as creative labs

985
00:37:52,700 --> 00:37:55,250
is looking at the market and they

986
00:37:53,900 --> 00:37:58,220
realized that there was a real market

987
00:37:55,250 --> 00:37:59,420
need for what they termed a killer card

988
00:37:58,220 --> 00:38:01,848
something that supported both

989
00:37:59,420 --> 00:38:03,800
synthesizer music and digital playback

990
00:38:01,849 --> 00:38:05,690
and they thought well since we're doing

991
00:38:03,800 --> 00:38:08,210
that we should be able to make it record

992
00:38:05,690 --> 00:38:09,859
sound as well and support all of these

993
00:38:08,210 --> 00:38:12,560
other cards and so they came out with

994
00:38:09,859 --> 00:38:14,598
this killer card here called the The

995
00:38:12,560 --> 00:38:17,720
Sound Blaster 1.0 so this particular

996
00:38:14,599 --> 00:38:19,130
picture was from a magazine review

997
00:38:17,720 --> 00:38:22,490
edition that they mailed out to a bunch

998
00:38:19,130 --> 00:38:25,099
of magazines for their review editions I

999
00:38:22,490 --> 00:38:27,319
think this is about summer of 1989 this

1000
00:38:25,099 --> 00:38:29,720
happened this particular card recently

1001
00:38:27,319 --> 00:38:31,609
sold on eBay for $6,000 if you can

1002
00:38:29,720 --> 00:38:35,689
believe it to a private collector in

1003
00:38:31,609 --> 00:38:37,130
Australia and so here's what the article

1004
00:38:35,690 --> 00:38:38,480
looks like they basically go through and

1005
00:38:37,130 --> 00:38:40,220
they actually have a picture of the

1006
00:38:38,480 --> 00:38:41,329
talking parrot I don't know if any of

1007
00:38:40,220 --> 00:38:42,799
you ever played with a talking parrot

1008
00:38:41,329 --> 00:38:44,839
game at the time it was it was kind of

1009
00:38:42,800 --> 00:38:46,430
fun you basically you would talk to

1010
00:38:44,839 --> 00:38:48,319
through the microphone and then it would

1011
00:38:46,430 --> 00:38:51,020
take everything that you said and speed

1012
00:38:48,319 --> 00:38:51,950
it up twice at like by a factor of two

1013
00:38:51,020 --> 00:38:53,780
and then play it back through the

1014
00:38:51,950 --> 00:38:55,339
speakers and then it would yell at you

1015
00:38:53,780 --> 00:38:58,250
and swear well not really swear there

1016
00:38:55,339 --> 00:39:01,069
was it was a clean program so anyway

1017
00:38:58,250 --> 00:39:02,720
it's kind of fun to play with they also

1018
00:39:01,069 --> 00:39:04,310
started advertising really aggressively

1019
00:39:02,720 --> 00:39:06,740
and so this is probably one of the first

1020
00:39:04,310 --> 00:39:08,869
soundblaster ads that came out and they

1021
00:39:06,740 --> 00:39:10,640
were selling the card for $240 but they

1022
00:39:08,869 --> 00:39:13,190
offered a mail-in rebate so if you had

1023
00:39:10,640 --> 00:39:14,569
an old sound card like your ad lib car

1024
00:39:13,190 --> 00:39:15,720
that you bought two years ago or a

1025
00:39:14,569 --> 00:39:18,900
creative

1026
00:39:15,720 --> 00:39:20,160
a music system card or a Kovacs card you

1027
00:39:18,900 --> 00:39:22,740
could mail that back to them and they

1028
00:39:20,160 --> 00:39:24,540
would give you $100 credit and then they

1029
00:39:22,740 --> 00:39:26,250
also the thing to remember is that the

1030
00:39:24,540 --> 00:39:28,800
this card included joystick

1031
00:39:26,250 --> 00:39:30,930
functionality at the time if you wanted

1032
00:39:28,800 --> 00:39:33,630
to use a joystick you had to buy a $40

1033
00:39:30,930 --> 00:39:34,919
card just for the joystick and so

1034
00:39:33,630 --> 00:39:36,540
combining all this functionality

1035
00:39:34,920 --> 00:39:37,740
together was actually a really good

1036
00:39:36,540 --> 00:39:39,390
value and I think that's one of the

1037
00:39:37,740 --> 00:39:41,848
reasons why it was such a successful

1038
00:39:39,390 --> 00:39:43,440
thing now adlib was having really hard

1039
00:39:41,849 --> 00:39:45,030
time they were there trying to do the

1040
00:39:43,440 --> 00:39:46,740
following card which was the ad lib gold

1041
00:39:45,030 --> 00:39:49,349
which unfortunately never really went

1042
00:39:46,740 --> 00:39:51,299
anywhere and then creative labs had

1043
00:39:49,349 --> 00:39:53,520
already moved several revisions on up

1044
00:39:51,300 --> 00:39:56,280
through the sound blaster Pro which you

1045
00:39:53,520 --> 00:39:58,619
could connect to a cd-rom drive because

1046
00:39:56,280 --> 00:40:00,660
at that point pcs really had no way to

1047
00:39:58,619 --> 00:40:02,670
connect to a cd-rom drive rather than

1048
00:40:00,660 --> 00:40:05,098
through a dedicated card or through this

1049
00:40:02,670 --> 00:40:06,119
Sound Blaster card and so anyway I

1050
00:40:05,099 --> 00:40:10,080
thought that would be kind of a fun

1051
00:40:06,119 --> 00:40:12,030
little history lesson for you guys and

1052
00:40:10,080 --> 00:40:14,130
if you're interested I got one more

1053
00:40:12,030 --> 00:40:16,680
bonus slide which was the ad-lib card

1054
00:40:14,130 --> 00:40:17,130
that I cloned so that was another fun

1055
00:40:16,680 --> 00:40:19,410
one

1056
00:40:17,130 --> 00:40:20,520
I also cloned that one from pictures

1057
00:40:19,410 --> 00:40:25,819
because these cards are way too

1058
00:40:20,520 --> 00:40:25,820
expensive for me to own and that's it

