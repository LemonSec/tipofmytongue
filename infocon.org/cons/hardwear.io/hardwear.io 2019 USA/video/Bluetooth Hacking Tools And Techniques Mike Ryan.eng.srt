1
00:00:02,540 --> 00:00:07,279
all right good morning everybody thank

2
00:00:04,190 --> 00:00:10,220
you for joining me today my name is Mike

3
00:00:07,279 --> 00:00:11,809
Ryan and I have been researching

4
00:00:10,220 --> 00:00:13,940
Bluetooth and bluetooth security for

5
00:00:11,810 --> 00:00:15,650
about seven years now and I wanted to

6
00:00:13,940 --> 00:00:19,430
bring together everything I learned over

7
00:00:15,650 --> 00:00:23,210
the time doing that into a learning talk

8
00:00:19,430 --> 00:00:26,119
about how to look into bluetooth and how

9
00:00:23,210 --> 00:00:28,699
to start learning how to hack it I will

10
00:00:26,119 --> 00:00:30,800
say this talk is not going to be like

11
00:00:28,699 --> 00:00:32,719
here's a bunch of awesome Bluetooth

12
00:00:30,800 --> 00:00:34,250
vulnerabilities and like we hacked all

13
00:00:32,719 --> 00:00:36,979
the things this is really going to be

14
00:00:34,250 --> 00:00:38,749
more focused on learning how to do

15
00:00:36,979 --> 00:00:42,229
Bluetooth reverse engineering and

16
00:00:38,749 --> 00:00:43,789
Bluetooth hacking but some people in the

17
00:00:42,229 --> 00:00:46,429
audience might be asking yourself why

18
00:00:43,789 --> 00:00:48,559
bluetooth it's not necessarily the most

19
00:00:46,429 --> 00:00:50,420
headline-grabbing technology there were

20
00:00:48,559 --> 00:00:53,328
some vulnerabilities recently that came

21
00:00:50,420 --> 00:00:55,370
out like blue googles tighten security

22
00:00:53,329 --> 00:00:57,920
key and all that sort of thing but it's

23
00:00:55,370 --> 00:01:00,498
on average not the most exciting topic I

24
00:00:57,920 --> 00:01:02,420
will point out though that the growth

25
00:01:00,499 --> 00:01:04,339
has been pretty impressive twelve

26
00:01:02,420 --> 00:01:05,570
percent year-over-year these numbers

27
00:01:04,339 --> 00:01:06,770
come from the Bluetooth people the

28
00:01:05,570 --> 00:01:09,979
Bluetooth SIG so take them with a grain

29
00:01:06,770 --> 00:01:11,420
of salt but it's definitely a growing

30
00:01:09,980 --> 00:01:13,490
technology if not the most exciting

31
00:01:11,420 --> 00:01:15,860
technology however when it comes to the

32
00:01:13,490 --> 00:01:18,890
security of Bluetooth it's a little bit

33
00:01:15,860 --> 00:01:20,900
of the Wild West and I was asking myself

34
00:01:18,890 --> 00:01:22,520
why is this why is there a relatively

35
00:01:20,900 --> 00:01:24,350
low movement in the Bluetooth security

36
00:01:22,520 --> 00:01:26,810
space relative to other wireless

37
00:01:24,350 --> 00:01:28,039
technologies or web technologies I think

38
00:01:26,810 --> 00:01:31,010
it's partially due to the fact that

39
00:01:28,040 --> 00:01:32,570
Bluetooth is somewhat inscrutable it's a

40
00:01:31,010 --> 00:01:34,490
little bit weird of a protocol if you're

41
00:01:32,570 --> 00:01:35,929
familiar with others and I think it's

42
00:01:34,490 --> 00:01:38,660
partly because people think it requires

43
00:01:35,930 --> 00:01:39,710
super specialized tools you can't just

44
00:01:38,660 --> 00:01:42,369
pop open Wireshark

45
00:01:39,710 --> 00:01:48,490
and sniff Bluetooth the way you can with

46
00:01:42,370 --> 00:01:50,780
Wi-Fi or Ethernet so I want to I want to

47
00:01:48,490 --> 00:01:52,960
dispel the notion that Bluetooth is

48
00:01:50,780 --> 00:01:55,610
mysterious or unreachable it's actually

49
00:01:52,960 --> 00:01:57,139
very possible to get into Bluetooth

50
00:01:55,610 --> 00:01:59,270
right now with tools that you already

51
00:01:57,140 --> 00:02:03,070
have and that's what we're gonna be

52
00:01:59,270 --> 00:02:05,539
focusing on today who is this talk for

53
00:02:03,070 --> 00:02:07,490
Bluetooth device developers if you're

54
00:02:05,540 --> 00:02:09,739
developing a Bluetooth device you

55
00:02:07,490 --> 00:02:11,989
probably want to keep security in mind

56
00:02:09,739 --> 00:02:14,209
and you want to have an understanding of

57
00:02:11,989 --> 00:02:15,950
what security risks are out there for

58
00:02:14,209 --> 00:02:18,379
your device if you're

59
00:02:15,950 --> 00:02:20,089
tration tester and you come across a

60
00:02:18,379 --> 00:02:21,679
Bluetooth device where do you even begin

61
00:02:20,090 --> 00:02:23,959
we're gonna get into that

62
00:02:21,680 --> 00:02:25,459
and finally if you're a manager if

63
00:02:23,959 --> 00:02:27,560
you're a product manager or you're

64
00:02:25,459 --> 00:02:29,420
managing a team of engineers do you have

65
00:02:27,560 --> 00:02:31,040
the skill set on your team are you doing

66
00:02:29,420 --> 00:02:35,988
taking the right steps to ensure that

67
00:02:31,040 --> 00:02:37,609
your device is secure so the structure

68
00:02:35,989 --> 00:02:39,650
of the talk I'm gonna give you an

69
00:02:37,610 --> 00:02:42,349
overview of Bluetooth I promise I will

70
00:02:39,650 --> 00:02:43,670
keep it pretty brief then we're going to

71
00:02:42,349 --> 00:02:46,399
talk about the reverse engineering

72
00:02:43,670 --> 00:02:47,690
process and tools and finally we're

73
00:02:46,400 --> 00:02:49,910
going to go over a case studies I'm

74
00:02:47,690 --> 00:02:52,459
gonna walk through actual devices that I

75
00:02:49,910 --> 00:02:55,340
did security analysis on reverse

76
00:02:52,459 --> 00:02:57,079
engineered and show you the exact steps

77
00:02:55,340 --> 00:02:59,260
I took so hopefully you can learn how to

78
00:02:57,079 --> 00:03:01,790
do that and do it yourself

79
00:02:59,260 --> 00:03:04,459
so to start let's talk about Bluetooth

80
00:03:01,790 --> 00:03:05,840
in the reverse engineering process we're

81
00:03:04,459 --> 00:03:07,940
gonna start with a very very high level

82
00:03:05,840 --> 00:03:09,709
model of a Bluetooth device and it

83
00:03:07,940 --> 00:03:11,329
doesn't really matter what kind of a

84
00:03:09,709 --> 00:03:14,410
device we're talking about in this case

85
00:03:11,329 --> 00:03:16,400
we're going to be focusing on Bluetooth

86
00:03:14,410 --> 00:03:18,109
Bluetooth wristband like a fitness

87
00:03:16,400 --> 00:03:21,650
wristband something that that tracks how

88
00:03:18,110 --> 00:03:24,230
many steps you take and normally those

89
00:03:21,650 --> 00:03:27,109
devices have a smartphone app that they

90
00:03:24,230 --> 00:03:28,220
communicate with and the way it works is

91
00:03:27,109 --> 00:03:30,410
sometimes you do something in the

92
00:03:28,220 --> 00:03:32,690
smartphone app sometimes you might press

93
00:03:30,410 --> 00:03:34,400
a button or tap the device and those two

94
00:03:32,690 --> 00:03:39,019
devices will establish a connection via

95
00:03:34,400 --> 00:03:40,310
bluetooth and communicate and that's the

96
00:03:39,019 --> 00:03:41,750
part that we're really interested in

97
00:03:40,310 --> 00:03:43,370
right we don't care about anything else

98
00:03:41,750 --> 00:03:45,170
we just care about what kind of

99
00:03:43,370 --> 00:03:47,150
Bluetooth is happening and I will know

100
00:03:45,170 --> 00:03:49,850
the same is true if your Bluetooth

101
00:03:47,150 --> 00:03:50,590
device communicates with a laptop simple

102
00:03:49,850 --> 00:03:53,450
enough right

103
00:03:50,590 --> 00:03:55,819
so how do we actually begin reverse

104
00:03:53,450 --> 00:03:57,828
engineering it where do we start the

105
00:03:55,819 --> 00:03:59,268
first step you do something with a

106
00:03:57,829 --> 00:03:59,900
device in the app and you make a note of

107
00:03:59,269 --> 00:04:01,370
what you do

108
00:03:59,900 --> 00:04:02,959
for instance if it's a fitness wristband

109
00:04:01,370 --> 00:04:04,430
you might take a bunch of steps you

110
00:04:02,959 --> 00:04:06,349
might tap the synchronize button and

111
00:04:04,430 --> 00:04:07,549
then the number of steps could

112
00:04:06,349 --> 00:04:10,069
synchronize back to the app you'll say

113
00:04:07,549 --> 00:04:11,870
oh I took five steps the second thing

114
00:04:10,069 --> 00:04:14,988
you do capture the data sent via

115
00:04:11,870 --> 00:04:17,269
bluetooth once you have that data you

116
00:04:14,989 --> 00:04:19,399
analyze it you can really understand how

117
00:04:17,269 --> 00:04:21,918
the device works super high level makes

118
00:04:19,399 --> 00:04:24,229
sense right but we get stuck here on

119
00:04:21,918 --> 00:04:26,539
step two how do you capture the device

120
00:04:24,229 --> 00:04:27,890
how do you capture the data sent via

121
00:04:26,539 --> 00:04:28,789
bluetooth that was what I was alluding

122
00:04:27,890 --> 00:04:30,370
to earlier in the talk

123
00:04:28,790 --> 00:04:33,680
you can't just pop open Wireshark right

124
00:04:30,370 --> 00:04:35,090
so can I get a show of hands who here

125
00:04:33,680 --> 00:04:39,200
thinks that we should sniff the

126
00:04:35,090 --> 00:04:41,690
Bluetooth oh okay yeah all right people

127
00:04:39,200 --> 00:04:45,380
are people are waking up I have bad news

128
00:04:41,690 --> 00:04:47,120
sniffing Bluetooth is hard it's it's

129
00:04:45,380 --> 00:04:49,610
hard but it's not impossible

130
00:04:47,120 --> 00:04:51,290
this device is made by a company called

131
00:04:49,610 --> 00:04:53,150
alysus and there's another company

132
00:04:51,290 --> 00:04:54,620
called front line who make a really

133
00:04:53,150 --> 00:04:56,810
similar device this is a commercial

134
00:04:54,620 --> 00:04:59,300
professional Bluetooth sniffer these

135
00:04:56,810 --> 00:05:02,810
devices are supposedly really excellent

136
00:04:59,300 --> 00:05:04,790
I haven't used one but they're 100%

137
00:05:02,810 --> 00:05:08,360
reliable if you want to sniff Bluetooth

138
00:05:04,790 --> 00:05:11,240
this device will do it unfortunately it

139
00:05:08,360 --> 00:05:12,800
comes at a small cost the starting price

140
00:05:11,240 --> 00:05:15,320
on this and the competitor from front

141
00:05:12,800 --> 00:05:19,580
lines around 20,000 bucks that's out of

142
00:05:15,320 --> 00:05:21,409
most people's budgets I will again make

143
00:05:19,580 --> 00:05:23,090
a disclaimer I haven't used this this is

144
00:05:21,410 --> 00:05:26,180
not an endorsement of this product but

145
00:05:23,090 --> 00:05:27,469
from all accounts if you want to if you

146
00:05:26,180 --> 00:05:29,990
want to sniff Bluetooth this thing was

147
00:05:27,470 --> 00:05:31,340
the business on the other end of the

148
00:05:29,990 --> 00:05:34,280
spectrum you might be familiar with an

149
00:05:31,340 --> 00:05:36,500
uber tooth one this is a much more

150
00:05:34,280 --> 00:05:37,820
affordable tool it's in the hundred

151
00:05:36,500 --> 00:05:40,550
dollar price range so within most

152
00:05:37,820 --> 00:05:43,849
hobbyist budgets unfortunately it is not

153
00:05:40,550 --> 00:05:45,950
reliable or I wouldn't say unreliable

154
00:05:43,850 --> 00:05:47,240
but it's nowhere near as reliable or its

155
00:05:45,950 --> 00:05:50,780
useful it's the commercial Bluetooth

156
00:05:47,240 --> 00:05:51,830
sniffer and it is limited to ble and we

157
00:05:50,780 --> 00:05:54,080
won't get into it now but there are

158
00:05:51,830 --> 00:05:55,280
different Bluetooth protocols and if you

159
00:05:54,080 --> 00:05:57,050
want to sniff something with classic

160
00:05:55,280 --> 00:06:00,289
Bluetooth this device won't do anything

161
00:05:57,050 --> 00:06:02,060
for you at all unlike the Ellis's

162
00:06:00,290 --> 00:06:04,970
bluetooth sniffer this is an endorsement

163
00:06:02,060 --> 00:06:07,370
I wrote most of the ble sniffing firmer

164
00:06:04,970 --> 00:06:10,010
for this device and it's actually pretty

165
00:06:07,370 --> 00:06:11,210
good at that I also will say I don't

166
00:06:10,010 --> 00:06:12,789
make this device and I don't get any

167
00:06:11,210 --> 00:06:16,190
kickbacks I just think it's pretty cool

168
00:06:12,790 --> 00:06:18,350
but what if I told you there is a better

169
00:06:16,190 --> 00:06:19,880
way we don't have to spend 20 grand we

170
00:06:18,350 --> 00:06:22,700
don't have to fuss around with kind of

171
00:06:19,880 --> 00:06:24,409
dodgy open-source software and in fact

172
00:06:22,700 --> 00:06:26,840
you might already have a device that

173
00:06:24,410 --> 00:06:29,120
already does this if you have an Android

174
00:06:26,840 --> 00:06:32,030
phone in your pocket right now if you

175
00:06:29,120 --> 00:06:34,520
have a laptop running OSX or if you're a

176
00:06:32,030 --> 00:06:36,650
Linux nerd running Linux on your laptop

177
00:06:34,520 --> 00:06:38,180
you can actually get the Bluetooth data

178
00:06:36,650 --> 00:06:41,750
that you need to perform this kind of

179
00:06:38,180 --> 00:06:42,500
analysis how does that work well let's

180
00:06:41,750 --> 00:06:44,540
go back to our mod

181
00:06:42,500 --> 00:06:46,220
the Bluetooth of ice you've got your two

182
00:06:44,540 --> 00:06:49,400
devices there communicating via

183
00:06:46,220 --> 00:06:51,620
bluetooth and the sniffing approach is

184
00:06:49,400 --> 00:06:53,840
that we want to capture the data here as

185
00:06:51,620 --> 00:06:56,300
it's going over the air well the data

186
00:06:53,840 --> 00:06:58,489
already exists on our smart phone and

187
00:06:56,300 --> 00:06:59,600
this is a smart phone that's running an

188
00:06:58,490 --> 00:07:01,730
operating system we have a lot of

189
00:06:59,600 --> 00:07:04,100
control over that device so wouldn't it

190
00:07:01,730 --> 00:07:06,380
be great if we could sniff the data on

191
00:07:04,100 --> 00:07:08,600
the smart phone before it even goes over

192
00:07:06,380 --> 00:07:14,330
the air and that's exactly what we're

193
00:07:08,600 --> 00:07:16,910
going to do before I go into into the

194
00:07:14,330 --> 00:07:18,740
mechanics of how that that works I'm

195
00:07:16,910 --> 00:07:20,180
gonna give you a little bit more theory

196
00:07:18,740 --> 00:07:22,010
because this is going to be relevant to

197
00:07:20,180 --> 00:07:23,419
when we're looking at the data I know

198
00:07:22,010 --> 00:07:26,240
some people went cross-eyed when they

199
00:07:23,419 --> 00:07:29,359
just looked at this this is a simplified

200
00:07:26,240 --> 00:07:31,310
version of a Bluetooth stack and don't

201
00:07:29,360 --> 00:07:34,070
worry too much about what the various

202
00:07:31,310 --> 00:07:36,530
layers mean I'm gonna put up this rough

203
00:07:34,070 --> 00:07:38,780
equivalence here if you you might be

204
00:07:36,530 --> 00:07:41,059
more familiar with the tcp/ip stack and

205
00:07:38,780 --> 00:07:42,650
if you squint really hard the layers of

206
00:07:41,060 --> 00:07:45,410
a Bluetooth stack match up with the

207
00:07:42,650 --> 00:07:47,390
layers of the IP stack so at the top

208
00:07:45,410 --> 00:07:49,700
you've got the a player that's think of

209
00:07:47,390 --> 00:07:51,979
it like HTTP this is where the actual

210
00:07:49,700 --> 00:07:53,780
data that you care about lives and then

211
00:07:51,979 --> 00:07:55,430
below that you have layers that are more

212
00:07:53,780 --> 00:07:56,690
or less responsible for just

213
00:07:55,430 --> 00:08:00,470
transporting the data back and forth

214
00:07:56,690 --> 00:08:02,630
getting data over from an RF RF

215
00:08:00,470 --> 00:08:04,850
converting it from RF energy into an

216
00:08:02,630 --> 00:08:07,400
encapsulated packet so on and so forth

217
00:08:04,850 --> 00:08:10,190
until you get up to the a player so if

218
00:08:07,400 --> 00:08:12,049
you're ever looking at a Bluetooth

219
00:08:10,190 --> 00:08:13,370
protocol dump that we're going to look

220
00:08:12,050 --> 00:08:14,470
at in a few minutes and you're getting

221
00:08:13,370 --> 00:08:21,500
lost looking at all these layers

222
00:08:14,470 --> 00:08:24,620
remember this slide so with that behind

223
00:08:21,500 --> 00:08:27,080
us let's look at how the the protocol is

224
00:08:24,620 --> 00:08:28,280
actually implemented in practice you're

225
00:08:27,080 --> 00:08:30,409
gonna have to learn a little bit of

226
00:08:28,280 --> 00:08:33,409
terminology and I promise I'm not going

227
00:08:30,410 --> 00:08:36,469
to get super deep into this but any

228
00:08:33,409 --> 00:08:38,510
Bluetooth device has is called a host

229
00:08:36,469 --> 00:08:39,800
and that's not my terminology that's the

230
00:08:38,510 --> 00:08:42,140
Bluetooth SIG's terminology it's a

231
00:08:39,799 --> 00:08:45,020
little bit confusing and every Bluetooth

232
00:08:42,140 --> 00:08:47,270
host has some kind of a controller this

233
00:08:45,020 --> 00:08:49,100
is a chip that is on the device that

234
00:08:47,270 --> 00:08:50,600
speaks bluetooth so in the case of your

235
00:08:49,100 --> 00:08:53,360
smart phone there's a dedicated

236
00:08:50,600 --> 00:08:56,250
Bluetooth chip on the device and then

237
00:08:53,360 --> 00:08:58,200
the upper layers of the stack from the

238
00:08:56,250 --> 00:09:00,390
bleurgh down to l to cap are implemented

239
00:08:58,200 --> 00:09:03,270
in software in the Bluetooth stack on

240
00:09:00,390 --> 00:09:05,760
the device the lower two layers the link

241
00:09:03,270 --> 00:09:09,660
layer are implemented in hardware on the

242
00:09:05,760 --> 00:09:11,460
controller the way the host communicates

243
00:09:09,660 --> 00:09:13,620
with the controller is via an internal

244
00:09:11,460 --> 00:09:15,540
bus and on that internal bus they

245
00:09:13,620 --> 00:09:18,090
communicate using a language called HCI

246
00:09:15,540 --> 00:09:20,370
the host controller interface this is

247
00:09:18,090 --> 00:09:22,650
where we're going to sniff and the power

248
00:09:20,370 --> 00:09:25,290
of this is that we're sniffing the data

249
00:09:22,650 --> 00:09:27,780
while it's still on the device meaning

250
00:09:25,290 --> 00:09:31,079
we're going to capture 100% of the

251
00:09:27,780 --> 00:09:34,079
packets and as a bonus the encryption

252
00:09:31,080 --> 00:09:36,120
the protocol level encryption happens

253
00:09:34,080 --> 00:09:38,430
down here since we're capturing at the

254
00:09:36,120 --> 00:09:40,320
HCI layer if the device is using

255
00:09:38,430 --> 00:09:42,060
protocol level encryption we get the

256
00:09:40,320 --> 00:09:43,530
data before it is encrypted this is

257
00:09:42,060 --> 00:09:46,439
really powerful and really useful as

258
00:09:43,530 --> 00:09:47,880
we'll see you later that's all the

259
00:09:46,440 --> 00:09:49,710
theory and when I bore you with we'll

260
00:09:47,880 --> 00:09:52,290
get into the interesting part now how

261
00:09:49,710 --> 00:09:54,270
does this actually work well Android

262
00:09:52,290 --> 00:09:56,910
Linux and OS X have this feature and

263
00:09:54,270 --> 00:09:59,850
they produce logs that can be loaded by

264
00:09:56,910 --> 00:10:01,680
Wireshark super awesome I learned

265
00:09:59,850 --> 00:10:04,830
everything I know about tcp/ip and

266
00:10:01,680 --> 00:10:06,329
Wireshark and if you load up Bluetooth

267
00:10:04,830 --> 00:10:07,830
captures in Marsh Ark you can learn

268
00:10:06,330 --> 00:10:09,300
everything you need to know in there -

269
00:10:07,830 --> 00:10:11,610
you don't need to spend time reading the

270
00:10:09,300 --> 00:10:13,410
protocol manual nothing like that just

271
00:10:11,610 --> 00:10:17,790
start dropping down menus in Wireshark

272
00:10:13,410 --> 00:10:20,339
which is awesome so on Android if you go

273
00:10:17,790 --> 00:10:22,800
into the developer options menu there is

274
00:10:20,339 --> 00:10:26,190
this little checkbox here enable

275
00:10:22,800 --> 00:10:27,780
bluetooth hcis new blog the Android

276
00:10:26,190 --> 00:10:29,850
phone running in your pocket right now

277
00:10:27,780 --> 00:10:31,380
not rooted nothing fancy

278
00:10:29,850 --> 00:10:34,140
if you go into your developer options

279
00:10:31,380 --> 00:10:36,240
menu and and check this box here you can

280
00:10:34,140 --> 00:10:38,580
start logging Bluetooth from an Android

281
00:10:36,240 --> 00:10:40,260
app and you can pull the data off using

282
00:10:38,580 --> 00:10:41,970
whatever technique you prefer I usually

283
00:10:40,260 --> 00:10:46,110
use ADB because that's what I have lying

284
00:10:41,970 --> 00:10:48,480
around if you're running Mac OS 10 you

285
00:10:46,110 --> 00:10:50,940
have to have Xcode installed and you

286
00:10:48,480 --> 00:10:54,089
install a package called the Xcode

287
00:10:50,940 --> 00:10:56,550
hardware developer tools inside the

288
00:10:54,089 --> 00:10:59,520
Xcode hardware developer tools there is

289
00:10:56,550 --> 00:11:01,439
a piece of software called packet logger

290
00:10:59,520 --> 00:11:05,430
it's not blue tooth packet logger

291
00:11:01,440 --> 00:11:08,190
it's called packet logger if you run

292
00:11:05,430 --> 00:11:09,779
this software on your device you can log

293
00:11:08,190 --> 00:11:12,300
all the Bluetooth data exactly

294
00:11:09,779 --> 00:11:14,100
as you can and Android it has its own UI

295
00:11:12,300 --> 00:11:16,290
for doing some of that analysis

296
00:11:14,100 --> 00:11:18,480
I prefer Wireshark so you can just save

297
00:11:16,290 --> 00:11:21,060
the log into a Wireshark compatible

298
00:11:18,480 --> 00:11:22,019
format and finally for the Linux nerds

299
00:11:21,060 --> 00:11:24,508
you guys should all be comfortable

300
00:11:22,019 --> 00:11:26,759
running command line commands to log

301
00:11:24,509 --> 00:11:30,839
this this will output a log file in a

302
00:11:26,759 --> 00:11:32,309
format that bar shark can handle so back

303
00:11:30,839 --> 00:11:34,829
to the reverse engineering process we

304
00:11:32,309 --> 00:11:36,930
were stuck at step two but now we're

305
00:11:34,829 --> 00:11:39,839
unstuck we have a mechanism to capture

306
00:11:36,930 --> 00:11:42,569
data via bluetooth that means we can

307
00:11:39,839 --> 00:11:45,149
move on to actually doing some analysis

308
00:11:42,569 --> 00:11:46,829
that brings us to our case studies in

309
00:11:45,149 --> 00:11:48,720
each of these case studies I will

310
00:11:46,829 --> 00:11:51,239
introduce a device and walk through the

311
00:11:48,720 --> 00:11:52,740
process of reverse engineering it I'm

312
00:11:51,240 --> 00:11:54,300
gonna start with really basic devices

313
00:11:52,740 --> 00:11:56,309
and I'm gonna gradually get more

314
00:11:54,300 --> 00:11:58,469
advanced now the goal of this is to give

315
00:11:56,309 --> 00:12:00,480
you some real concrete devices some

316
00:11:58,470 --> 00:12:03,149
devices that I actually did reverse

317
00:12:00,480 --> 00:12:05,430
engineering and security review on I've

318
00:12:03,149 --> 00:12:06,559
anonymized them a little bit but there

319
00:12:05,430 --> 00:12:09,660
this is otherwise completely

320
00:12:06,559 --> 00:12:11,189
unadulterated this is the exact the

321
00:12:09,660 --> 00:12:14,430
exact data that I was looking at with

322
00:12:11,189 --> 00:12:17,059
these devices so our first case study is

323
00:12:14,430 --> 00:12:19,500
a ble heart rate monitor this is a

324
00:12:17,059 --> 00:12:21,779
device that might be worn by fitness

325
00:12:19,500 --> 00:12:25,050
enthusiasts they wear it on a chest

326
00:12:21,779 --> 00:12:27,089
strap and a strap that goes around the

327
00:12:25,050 --> 00:12:28,889
chest and there's an app that runs on

328
00:12:27,089 --> 00:12:30,509
your smartphone and you can log what

329
00:12:28,889 --> 00:12:32,009
kind of fitness exercise your type of

330
00:12:30,509 --> 00:12:35,279
doing so like if you're running or if

331
00:12:32,009 --> 00:12:37,639
you're riding a bike it'll log bad data

332
00:12:35,279 --> 00:12:41,189
and it'll log your heart rate up here

333
00:12:37,639 --> 00:12:43,110
so how are we going to approach this

334
00:12:41,189 --> 00:12:45,629
device how do we go about reverse

335
00:12:43,110 --> 00:12:48,629
engineering it we look back at our

336
00:12:45,629 --> 00:12:50,790
reverse engineering process step one do

337
00:12:48,629 --> 00:12:52,230
something in the device do something in

338
00:12:50,790 --> 00:12:54,360
the app and make a note of what we're

339
00:12:52,230 --> 00:12:57,420
doing so in this case we're going to put

340
00:12:54,360 --> 00:12:58,920
on the heart rate monitor and we're

341
00:12:57,420 --> 00:13:00,509
going to tell it that we're running

342
00:12:58,920 --> 00:13:02,550
something like that and we're gonna make

343
00:13:00,509 --> 00:13:03,959
a note of this heart rate value here in

344
00:13:02,550 --> 00:13:06,660
this screenshot the heart rate is around

345
00:13:03,959 --> 00:13:09,329
76 we're going to have the Android

346
00:13:06,660 --> 00:13:11,399
Android OS logging the Bluetooth HCI

347
00:13:09,329 --> 00:13:13,079
data in the background then we pull that

348
00:13:11,399 --> 00:13:17,639
data off of the device and we load it up

349
00:13:13,079 --> 00:13:19,529
in Wireshark and I can actually give you

350
00:13:17,639 --> 00:13:20,640
a really quick demo of what that looks

351
00:13:19,529 --> 00:13:23,100
like when you actually load it

352
00:13:20,640 --> 00:13:27,030
boom Wireshark if I can pop this over to

353
00:13:23,100 --> 00:13:28,350
the other screen yeah all right oh that

354
00:13:27,030 --> 00:13:32,180
fun is a lot smaller than I thought it

355
00:13:28,350 --> 00:13:35,310
would be on this screen okay perfect

356
00:13:32,180 --> 00:13:36,930
so if you look at at this here this is

357
00:13:35,310 --> 00:13:40,560
what so the very first thing that you're

358
00:13:36,930 --> 00:13:42,390
going to see when you load up the wire

359
00:13:40,560 --> 00:13:45,420
the file in the Wireshark is a bunch of

360
00:13:42,390 --> 00:13:46,680
stuff that makes no sense whatsoever so

361
00:13:45,420 --> 00:13:48,500
when I say that we're logging the

362
00:13:46,680 --> 00:13:51,329
Bluetooth on the device we're logging

363
00:13:48,500 --> 00:13:53,820
every message that the host sends to the

364
00:13:51,330 --> 00:13:55,350
controller this not only includes the

365
00:13:53,820 --> 00:13:58,200
data that eventually gets sent over the

366
00:13:55,350 --> 00:13:59,610
air but it also includes really basic

367
00:13:58,200 --> 00:14:02,310
stuff that we don't care about stuff

368
00:13:59,610 --> 00:14:03,900
like setting the device name or setting

369
00:14:02,310 --> 00:14:06,329
scan parameters tons of highfalutin

370
00:14:03,900 --> 00:14:08,430
Bluetooth stuff not interested in that

371
00:14:06,330 --> 00:14:12,330
so the first thing we're going to do is

372
00:14:08,430 --> 00:14:15,060
we're going to use a filter in Wireshark

373
00:14:12,330 --> 00:14:18,000
and you can't see that text there I have

374
00:14:15,060 --> 00:14:20,550
it on another slide it's bt ATT BP ad

375
00:14:18,000 --> 00:14:22,890
and I'll have it on the slide you don't

376
00:14:20,550 --> 00:14:25,050
have to write it down now this filters

377
00:14:22,890 --> 00:14:26,670
out everything and only shows you the

378
00:14:25,050 --> 00:14:28,979
data that is going to ultimately be sent

379
00:14:26,670 --> 00:14:31,229
over the air so there were like hundreds

380
00:14:28,980 --> 00:14:33,210
of packets before now they're still like

381
00:14:31,230 --> 00:14:35,760
quite a number of packets but they're a

382
00:14:33,210 --> 00:14:37,830
manageable number and as we scroll down

383
00:14:35,760 --> 00:14:39,990
the list here I don't know if you can

384
00:14:37,830 --> 00:14:43,320
read that in the back but there's a

385
00:14:39,990 --> 00:14:45,690
heart rate measurement Wireshark did all

386
00:14:43,320 --> 00:14:48,360
the work for us like it already knows

387
00:14:45,690 --> 00:14:50,250
that this is a heart rate monitor and if

388
00:14:48,360 --> 00:14:53,280
we go down here into the packet

389
00:14:50,250 --> 00:14:56,460
dissection click this drop down there's

390
00:14:53,280 --> 00:14:58,260
our value the heart rate was 89 so maybe

391
00:14:56,460 --> 00:15:00,120
I was running or something when we took

392
00:14:58,260 --> 00:15:04,380
this heart rate measurement what's more

393
00:15:00,120 --> 00:15:07,170
even more interesting down here is the

394
00:15:04,380 --> 00:15:08,480
heart rate monitor gives us the RR

395
00:15:07,170 --> 00:15:11,610
interval this is the interval between

396
00:15:08,480 --> 00:15:13,710
individual pulses of the heartbeat so

397
00:15:11,610 --> 00:15:16,320
even though the app is only showing us

398
00:15:13,710 --> 00:15:18,030
the real-time heart rate information the

399
00:15:16,320 --> 00:15:21,630
data being sent back by the device is

400
00:15:18,030 --> 00:15:25,050
even richer than we possibly imagined so

401
00:15:21,630 --> 00:15:26,790
going back over here to our slides this

402
00:15:25,050 --> 00:15:28,800
is the the same information in case that

403
00:15:26,790 --> 00:15:31,439
demo failed that's our first filter

404
00:15:28,800 --> 00:15:33,378
right there BT ATT write this down

405
00:15:31,440 --> 00:15:36,739
you're going to use this if you

406
00:15:33,379 --> 00:15:39,589
ever look at any ble device using this

407
00:15:36,739 --> 00:15:41,209
technique in Wireshark and you can see

408
00:15:39,589 --> 00:15:43,789
mark shark figured out the heart rate

409
00:15:41,209 --> 00:15:45,439
measurement showed us that data and the

410
00:15:43,789 --> 00:15:46,609
heart rate in this case was 80 tube that

411
00:15:45,439 --> 00:15:47,748
more or less guys with what we're seeing

412
00:15:46,609 --> 00:15:59,119
in the app there's some internal

413
00:15:47,749 --> 00:16:01,669
consistency here yes question yes so the

414
00:15:59,119 --> 00:16:03,829
the question was where did this log file

415
00:16:01,669 --> 00:16:06,079
come from this is the log file that was

416
00:16:03,829 --> 00:16:08,569
produced by Android that we have pulled

417
00:16:06,079 --> 00:16:12,769
off of the phone and opened in Wireshark

418
00:16:08,569 --> 00:16:14,449
on our laptop here so the next thing the

419
00:16:12,769 --> 00:16:16,129
next Wireshark filter that you're also

420
00:16:14,449 --> 00:16:19,549
probably going to want to write down is

421
00:16:16,129 --> 00:16:23,959
this be th CI command dot le long term

422
00:16:19,549 --> 00:16:25,519
key if you see this command that means

423
00:16:23,959 --> 00:16:27,888
that the host is setting an encryption

424
00:16:25,519 --> 00:16:30,559
key for the controller in other words

425
00:16:27,889 --> 00:16:32,720
the device is probably using Billy's

426
00:16:30,559 --> 00:16:34,819
built-in encryption if you're a device

427
00:16:32,720 --> 00:16:36,199
developer and you see this there you go

428
00:16:34,819 --> 00:16:37,969
you know that you're using ble

429
00:16:36,199 --> 00:16:40,819
encryption if you're reverse engineering

430
00:16:37,970 --> 00:16:43,220
something now you know this if you don't

431
00:16:40,819 --> 00:16:46,009
see this this message being sent there

432
00:16:43,220 --> 00:16:47,779
is the device is not using the ble

433
00:16:46,009 --> 00:16:49,489
encryption now that doesn't necessarily

434
00:16:47,779 --> 00:16:51,379
mean that it's not using any encryption

435
00:16:49,489 --> 00:16:53,239
whatsoever but if they are using

436
00:16:51,379 --> 00:16:55,579
encryption they've developed something

437
00:16:53,239 --> 00:16:58,339
of their own you'll actually have to dig

438
00:16:55,579 --> 00:17:01,189
into the pack and sit take a look for

439
00:16:58,339 --> 00:17:04,309
this device they were not using

440
00:17:01,189 --> 00:17:06,559
encryption so there are it's not a

441
00:17:04,309 --> 00:17:09,230
medical device per se but it is medical

442
00:17:06,559 --> 00:17:12,378
adjacent at least and that means that

443
00:17:09,230 --> 00:17:13,730
the device is more or less broadcasting

444
00:17:12,378 --> 00:17:16,000
your heart rate to anybody in the room

445
00:17:13,730 --> 00:17:18,709
who has the capability to sniff it and

446
00:17:16,000 --> 00:17:21,378
furthermore the encryption here provides

447
00:17:18,709 --> 00:17:22,699
some authentication to if you were if

448
00:17:21,378 --> 00:17:24,198
this device we're being used in a

449
00:17:22,699 --> 00:17:26,509
medical setting it would be possible to

450
00:17:24,199 --> 00:17:29,080
impersonate the heart rate sensor and

451
00:17:26,509 --> 00:17:31,100
inject malicious heart rate values and

452
00:17:29,080 --> 00:17:32,689
this could have pretty serious

453
00:17:31,100 --> 00:17:35,750
consequences if it was being used as

454
00:17:32,690 --> 00:17:37,509
part of a diagnostic treatment what are

455
00:17:35,750 --> 00:17:40,549
our conclusions from this case study

456
00:17:37,509 --> 00:17:42,740
first of all Wireshark is incredible it

457
00:17:40,549 --> 00:17:44,960
did all the work for us it has a really

458
00:17:42,740 --> 00:17:46,500
great filtering interface and for this

459
00:17:44,960 --> 00:17:49,890
particular device it already

460
00:17:46,500 --> 00:17:51,059
how to interpret the data the second

461
00:17:49,890 --> 00:17:52,710
thing getting Bluetooth logs is

462
00:17:51,059 --> 00:17:54,720
practical if you have an Android phone

463
00:17:52,710 --> 00:17:58,130
in your pocket right now and it has

464
00:17:54,720 --> 00:18:00,539
Bluetooth capability it can do this and

465
00:17:58,130 --> 00:18:02,490
using Wireshark which is free and runs

466
00:18:00,539 --> 00:18:05,220
on every platform you can interpret the

467
00:18:02,490 --> 00:18:07,289
data so right now there are practically

468
00:18:05,220 --> 00:18:10,890
no barriers for you to try this as soon

469
00:18:07,289 --> 00:18:12,480
as this talk is over this is only a 45

470
00:18:10,890 --> 00:18:14,070
minute talk I don't have a lot of time

471
00:18:12,480 --> 00:18:15,539
to dig into how to actually talk to

472
00:18:14,070 --> 00:18:17,580
these devices I'm gonna focus a little

473
00:18:15,539 --> 00:18:19,110
bit more on reverse engineering them but

474
00:18:17,580 --> 00:18:21,990
if you want to talk to the device on

475
00:18:19,110 --> 00:18:23,219
Linux I usually use Linux to do this

476
00:18:21,990 --> 00:18:25,860
because it has a really rich set of

477
00:18:23,220 --> 00:18:27,990
tools for talking to Bluetooth the Gaetz

478
00:18:25,860 --> 00:18:31,580
tool command is the one that I usually

479
00:18:27,990 --> 00:18:35,100
use that's three T's in a row G a TTT

480
00:18:31,580 --> 00:18:36,780
ool and this device lets you do really

481
00:18:35,100 --> 00:18:39,120
basic rudimentary communication with

482
00:18:36,780 --> 00:18:42,450
Bluetooth you'll see a list of uu IDs

483
00:18:39,120 --> 00:18:44,789
here and most of these UUID values to

484
00:18:42,450 --> 00:18:47,340
find services that are standardized by

485
00:18:44,789 --> 00:18:48,240
the Bluetooth SIG and you know in one

486
00:18:47,340 --> 00:18:49,949
case there's a device information

487
00:18:48,240 --> 00:18:51,240
service and there's a heartrate service

488
00:18:49,950 --> 00:18:53,970
and I'll tell you about how to find that

489
00:18:51,240 --> 00:18:55,650
information in a moment so these are

490
00:18:53,970 --> 00:18:57,630
these are standard services and that

491
00:18:55,650 --> 00:18:59,429
makes sense you would expect to see a

492
00:18:57,630 --> 00:19:00,360
heartrate service on a heartrate monitor

493
00:18:59,429 --> 00:19:02,700
you would expect to see a device

494
00:19:00,360 --> 00:19:04,979
information service but if you look down

495
00:19:02,700 --> 00:19:08,159
here at the bottom there's this 128-bit

496
00:19:04,980 --> 00:19:10,740
UUID that doesn't fit in with a rest it

497
00:19:08,159 --> 00:19:12,450
looks like a long random value this is

498
00:19:10,740 --> 00:19:14,220
not standardized by the Bluetooth SIG

499
00:19:12,450 --> 00:19:16,049
this is something custom for this from

500
00:19:14,220 --> 00:19:17,940
this manufacturer and there are a couple

501
00:19:16,049 --> 00:19:20,370
of ways that you can go about trying to

502
00:19:17,940 --> 00:19:21,990
interpret that and trying to talk to

503
00:19:20,370 --> 00:19:23,850
this device and figure out the protocol

504
00:19:21,990 --> 00:19:26,850
you can start sending messages to it and

505
00:19:23,850 --> 00:19:29,580
you can see you know what do you UID the

506
00:19:26,850 --> 00:19:31,770
actual UID of the characteristic is the

507
00:19:29,580 --> 00:19:34,379
approach that I actually recommend is

508
00:19:31,770 --> 00:19:36,000
take that value plug it in to Google and

509
00:19:34,380 --> 00:19:38,610
see if somebody else has already looked

510
00:19:36,000 --> 00:19:41,130
at this device in at least 25% of the

511
00:19:38,610 --> 00:19:42,658
cases that I've looked at I've either

512
00:19:41,130 --> 00:19:44,460
found a thread of people somewhere who

513
00:19:42,659 --> 00:19:47,150
have done some reverse engineering of

514
00:19:44,460 --> 00:19:51,120
the device or I found github

515
00:19:47,150 --> 00:19:52,830
repositories they have some of the the

516
00:19:51,120 --> 00:19:54,479
white label source code that the Chinese

517
00:19:52,830 --> 00:19:57,658
manufacturer used so you find some

518
00:19:54,480 --> 00:20:00,050
interesting stuff this way our second

519
00:19:57,659 --> 00:20:01,370
case study is a ble blood pressure

520
00:20:00,050 --> 00:20:03,080
and I was actually talking to somebody

521
00:20:01,370 --> 00:20:05,179
before this talk they have this exact

522
00:20:03,080 --> 00:20:07,879
blood pressure monitor at home this

523
00:20:05,180 --> 00:20:10,760
device you might be surprised to hear

524
00:20:07,880 --> 00:20:13,730
that a ble blood pressure monitor exists

525
00:20:10,760 --> 00:20:15,230
they're really common actually and this

526
00:20:13,730 --> 00:20:17,570
is the first case of what I like to call

527
00:20:15,230 --> 00:20:19,010
a Bluetooth Madlib if anybody is

528
00:20:17,570 --> 00:20:21,889
familiar with Mad Libs from like middle

529
00:20:19,010 --> 00:20:23,330
school you have to insert like they say

530
00:20:21,890 --> 00:20:25,010
to select it now and select a verb that

531
00:20:23,330 --> 00:20:26,870
uh well Bluetooth Mad Libs the way it

532
00:20:25,010 --> 00:20:28,270
works is you select a noun and then you

533
00:20:26,870 --> 00:20:30,590
add Bluetooth to the beginning and

534
00:20:28,270 --> 00:20:32,510
somebody in Silicon Valley is working on

535
00:20:30,590 --> 00:20:34,100
a product that does just that so in this

536
00:20:32,510 --> 00:20:36,700
case our noun is blood pressure monitor

537
00:20:34,100 --> 00:20:39,560
this one is a ble blood pressure monitor

538
00:20:36,700 --> 00:20:41,090
you put on a blood pressure cuff you

539
00:20:39,560 --> 00:20:43,010
take a measurement and then it connects

540
00:20:41,090 --> 00:20:45,470
to an app on your smart phone that logs

541
00:20:43,010 --> 00:20:46,760
that and logs it over time I guess

542
00:20:45,470 --> 00:20:48,530
there's a market for this it's not

543
00:20:46,760 --> 00:20:50,120
intended to be used in a medical setting

544
00:20:48,530 --> 00:20:51,770
but I know at least in one case

545
00:20:50,120 --> 00:20:54,409
somebody's doctor recommended that they

546
00:20:51,770 --> 00:20:56,990
they purchase it how are we going to

547
00:20:54,410 --> 00:20:59,000
reverse engineer this device similar to

548
00:20:56,990 --> 00:21:01,790
how we did the last one we're going to

549
00:20:59,000 --> 00:21:03,740
do something with the device and we're

550
00:21:01,790 --> 00:21:05,600
going to log that data we're gonna make

551
00:21:03,740 --> 00:21:06,500
a note of what we did so in this case

552
00:21:05,600 --> 00:21:07,939
we're taking a blood pressure

553
00:21:06,500 --> 00:21:10,280
measurement so you'd probably write down

554
00:21:07,940 --> 00:21:12,560
what blood pressure values were recorded

555
00:21:10,280 --> 00:21:13,520
by the app and then when we look at the

556
00:21:12,560 --> 00:21:17,690
data we're gonna look for that

557
00:21:13,520 --> 00:21:19,580
information I will also point out on

558
00:21:17,690 --> 00:21:21,170
this particular device the only way to

559
00:21:19,580 --> 00:21:22,909
get it to generate data via bluetooth

560
00:21:21,170 --> 00:21:25,160
was to take a blood pressure measurement

561
00:21:22,910 --> 00:21:26,990
so when I was testing it I ended up

562
00:21:25,160 --> 00:21:28,640
having to take my blood pressure like 20

563
00:21:26,990 --> 00:21:31,070
times in a row it's just somewhat

564
00:21:28,640 --> 00:21:32,480
uncomfortable so just know that like if

565
00:21:31,070 --> 00:21:34,810
you're gonna be doing Bluetooth testing

566
00:21:32,480 --> 00:21:39,680
things might get physical fast for you

567
00:21:34,810 --> 00:21:43,159
so yes Bluetooth in this case I can pop

568
00:21:39,680 --> 00:21:46,750
up wireshark again why not let's open

569
00:21:43,160 --> 00:21:46,750
another file

570
00:21:55,440 --> 00:21:59,140
okay we're gonna open our blood pressure

571
00:21:57,250 --> 00:22:01,660
monitor here and again we're using the

572
00:21:59,140 --> 00:22:05,830
BT @ filter and when we look at our data

573
00:22:01,660 --> 00:22:07,540
here nothing jumps out at us I will say

574
00:22:05,830 --> 00:22:09,370
the first thing that to notice is that

575
00:22:07,540 --> 00:22:11,620
there not a lot of packets in this file

576
00:22:09,370 --> 00:22:13,659
so even knowing nothing about bluetooth

577
00:22:11,620 --> 00:22:15,100
you can start to look at this and try to

578
00:22:13,660 --> 00:22:18,370
get some kind of sense of what's going

579
00:22:15,100 --> 00:22:19,899
on here so if we if we look at the you

580
00:22:18,370 --> 00:22:20,709
know just pick a random right request

581
00:22:19,900 --> 00:22:22,330
here right

582
00:22:20,710 --> 00:22:24,309
you can look here's the data that was

583
00:22:22,330 --> 00:22:25,720
sent in that right request and if you

584
00:22:24,309 --> 00:22:27,850
see a handle value indication here

585
00:22:25,720 --> 00:22:30,010
here's some data that was sent so even

586
00:22:27,850 --> 00:22:31,299
though we don't necessarily I haven't

587
00:22:30,010 --> 00:22:32,919
gotten super deep into the Bluetooth

588
00:22:31,299 --> 00:22:34,480
packet structure or anything but you can

589
00:22:32,919 --> 00:22:35,890
start to make sense of this in Wireshark

590
00:22:34,480 --> 00:22:39,580
you can start to really experiment with

591
00:22:35,890 --> 00:22:41,620
it and in fact Wireshark s-- filtering

592
00:22:39,580 --> 00:22:43,540
I'll probably on the next device I'll

593
00:22:41,620 --> 00:22:46,479
probably take a look at that more you

594
00:22:43,540 --> 00:22:49,510
can really powerfully filter the devices

595
00:22:46,480 --> 00:22:52,600
so when we look this look at this in

596
00:22:49,510 --> 00:22:55,299
Wireshark the first thing I'm noticing

597
00:22:52,600 --> 00:22:57,699
is that Wireshark hasn't done the work

598
00:22:55,299 --> 00:22:59,918
for us it hasn't already told us that

599
00:22:57,700 --> 00:23:02,440
this is a blood pressure monitor so in

600
00:22:59,919 --> 00:23:03,580
that case that means that we're we're

601
00:23:02,440 --> 00:23:06,240
gonna have to do a little bit of legwork

602
00:23:03,580 --> 00:23:11,230
on our own excuse me for a second here

603
00:23:06,240 --> 00:23:13,570
and if we look at this value here we see

604
00:23:11,230 --> 00:23:15,340
something that could feasibly maybe be a

605
00:23:13,570 --> 00:23:16,870
blood pressure measurement it's the only

606
00:23:15,340 --> 00:23:19,570
packet in the capture that's kind of

607
00:23:16,870 --> 00:23:21,159
long and if you look at the Bluetooth

608
00:23:19,570 --> 00:23:23,799
SIG's website you'll see that there is a

609
00:23:21,160 --> 00:23:26,490
blood pressure service however this

610
00:23:23,799 --> 00:23:29,260
device is not using that and this is

611
00:23:26,490 --> 00:23:30,970
actually extremely common

612
00:23:29,260 --> 00:23:33,760
this is our first instance of what I'm

613
00:23:30,970 --> 00:23:35,950
going to call a hidden serial port and

614
00:23:33,760 --> 00:23:37,570
for those young gamers in the crowd who

615
00:23:35,950 --> 00:23:39,640
aren't familiar with the serial port it

616
00:23:37,570 --> 00:23:41,530
is bi-directional communication

617
00:23:39,640 --> 00:23:44,260
mechanism you send data one way you get

618
00:23:41,530 --> 00:23:45,850
data back the other day why do people

619
00:23:44,260 --> 00:23:48,760
implement things this way when there's

620
00:23:45,850 --> 00:23:51,428
perfectly well standardized profiles for

621
00:23:48,760 --> 00:23:53,140
doing this my thinking on it is that

622
00:23:51,429 --> 00:23:55,059
Bluetooth is complicated and weird and

623
00:23:53,140 --> 00:23:56,710
if you're a hardware developer you just

624
00:23:55,059 --> 00:23:58,510
want to get on with your day you want to

625
00:23:56,710 --> 00:23:59,650
get data wirelessly you don't really

626
00:23:58,510 --> 00:24:01,740
care about the detail so you'll want to

627
00:23:59,650 --> 00:24:03,790
get into the deep fancy Bluetooth stuff

628
00:24:01,740 --> 00:24:06,760
this is the first time we've seen this

629
00:24:03,790 --> 00:24:07,940
it's not the last time it's in ble it's

630
00:24:06,760 --> 00:24:09,889
implemented using our

631
00:24:07,940 --> 00:24:11,690
right characteristic and a notify or an

632
00:24:09,889 --> 00:24:13,189
indicate characteristic and this is

633
00:24:11,690 --> 00:24:15,470
handy because you can always tell which

634
00:24:13,190 --> 00:24:17,000
direction the data is flowing the right

635
00:24:15,470 --> 00:24:18,740
characteristic is data that goes from

636
00:24:17,000 --> 00:24:20,120
the phone to the device the notify

637
00:24:18,740 --> 00:24:23,299
characteristic is data that's coming

638
00:24:20,120 --> 00:24:25,370
back from the device to the phone going

639
00:24:23,299 --> 00:24:27,080
back in here you can see handle value

640
00:24:25,370 --> 00:24:28,908
indication that's a notify

641
00:24:27,080 --> 00:24:31,189
characteristic that's data coming from

642
00:24:28,909 --> 00:24:33,230
the blood pressure monitor back to our

643
00:24:31,190 --> 00:24:35,090
smartphone app that makes sense now this

644
00:24:33,230 --> 00:24:37,789
is probably a blood pressure measurement

645
00:24:35,090 --> 00:24:41,840
in here and if you look inside those

646
00:24:37,789 --> 00:24:44,360
values these this these are like the 2nd

647
00:24:41,840 --> 00:24:47,149
3rd 4th and 5th bytes of the packets to

648
00:24:44,360 --> 00:24:49,219
my eyeballs this looks like a little

649
00:24:47,149 --> 00:24:51,850
endian 16-bit value and this looks like

650
00:24:49,220 --> 00:24:54,799
another one and if you turn those into

651
00:24:51,850 --> 00:24:58,189
regular decimal integers you see it's

652
00:24:54,799 --> 00:25:01,820
117 and 81 that exactly matches with a

653
00:24:58,190 --> 00:25:04,279
value that we saw and at this point you

654
00:25:01,820 --> 00:25:06,350
can start to make sense of the data the

655
00:25:04,279 --> 00:25:07,669
structure of this data here and one

656
00:25:06,350 --> 00:25:09,320
thing that's interesting is that there

657
00:25:07,669 --> 00:25:11,090
are quite a few more bytes that go on

658
00:25:09,320 --> 00:25:12,259
past that if you're reverse engineering

659
00:25:11,090 --> 00:25:14,209
this and trying to hack it and all you

660
00:25:12,259 --> 00:25:16,669
care about is the blood pressure

661
00:25:14,210 --> 00:25:18,230
measurement you're done however if you

662
00:25:16,669 --> 00:25:21,379
want to actually learn about more about

663
00:25:18,230 --> 00:25:22,879
what some of these other bytes do where

664
00:25:21,379 --> 00:25:25,820
I normally start looking at this point

665
00:25:22,879 --> 00:25:27,230
is the app Android app reverse

666
00:25:25,820 --> 00:25:28,700
engineering is definitely out of scope

667
00:25:27,230 --> 00:25:31,429
for this talk but it's super easy to get

668
00:25:28,700 --> 00:25:32,990
into it just google it long story short

669
00:25:31,429 --> 00:25:35,659
you can get back something that more or

670
00:25:32,990 --> 00:25:38,210
less resembles Java and in this case

671
00:25:35,659 --> 00:25:41,210
even some of the the value the string

672
00:25:38,210 --> 00:25:42,889
values were preserved so taking the UUID

673
00:25:41,210 --> 00:25:44,840
values that you might get out of gat

674
00:25:42,889 --> 00:25:46,340
tool searching for those inside the app

675
00:25:44,840 --> 00:25:47,840
you can see oh there's a blood pressure

676
00:25:46,340 --> 00:25:49,070
measurement characteristic and you can

677
00:25:47,840 --> 00:25:50,779
actually see a bunch of other stuff like

678
00:25:49,070 --> 00:25:53,120
firmware update service for instance

679
00:25:50,779 --> 00:25:54,830
that might be interesting and if you

680
00:25:53,120 --> 00:25:57,799
look at the code that references this

681
00:25:54,830 --> 00:25:59,600
data you start to see really useful log

682
00:25:57,799 --> 00:26:02,000
messages like received blood pressure

683
00:25:59,600 --> 00:26:03,649
receive timestamp motion detected and

684
00:26:02,000 --> 00:26:06,950
irregular heartbeat this one was really

685
00:26:03,649 --> 00:26:08,719
interesting because I could send I could

686
00:26:06,950 --> 00:26:10,159
simulate motion detected I could

687
00:26:08,720 --> 00:26:12,110
simulate different blood pressure values

688
00:26:10,159 --> 00:26:14,419
I don't have an irregular heartbeat I

689
00:26:12,110 --> 00:26:15,889
couldn't possibly simulate that so the

690
00:26:14,419 --> 00:26:19,549
only way for me to get this information

691
00:26:15,889 --> 00:26:21,619
is to look in the app security-wise what

692
00:26:19,549 --> 00:26:21,889
did I find on this device well there's

693
00:26:21,619 --> 00:26:23,780
no

694
00:26:21,890 --> 00:26:27,470
encryption so that's already a concern

695
00:26:23,780 --> 00:26:29,090
so you're already leaking what could

696
00:26:27,470 --> 00:26:30,320
potentially be patient medical data

697
00:26:29,090 --> 00:26:32,330
depending on the context in which this

698
00:26:30,320 --> 00:26:33,679
is used furthermore on this particular

699
00:26:32,330 --> 00:26:35,870
device I found that there was another

700
00:26:33,680 --> 00:26:38,750
characteristic or another service that

701
00:26:35,870 --> 00:26:40,550
was a firmware update service anybody

702
00:26:38,750 --> 00:26:42,380
who figured out how to communicate with

703
00:26:40,550 --> 00:26:44,510
this device for instance by looking at

704
00:26:42,380 --> 00:26:46,400
the app would be able to send malicious

705
00:26:44,510 --> 00:26:49,190
firmware updates to the device once

706
00:26:46,400 --> 00:26:50,630
again not actually a medical device but

707
00:26:49,190 --> 00:26:52,520
who knows if it's being used in a

708
00:26:50,630 --> 00:26:54,350
medical setting or not the consequences

709
00:26:52,520 --> 00:26:56,360
of setting incorrect blood pressure data

710
00:26:54,350 --> 00:26:59,149
could be massive what are our

711
00:26:56,360 --> 00:27:00,830
conclusions here the hidden serial port

712
00:26:59,150 --> 00:27:03,070
again this is not the last time we're

713
00:27:00,830 --> 00:27:05,750
gonna see this it's extremely common

714
00:27:03,070 --> 00:27:08,120
once you get past the weird Bluetooth

715
00:27:05,750 --> 00:27:11,090
stuff it's just normal binary reverse

716
00:27:08,120 --> 00:27:14,600
engineering and finally when in doubt

717
00:27:11,090 --> 00:27:16,399
look in the app security-wise no

718
00:27:14,600 --> 00:27:18,350
encryption and there's a firmware update

719
00:27:16,400 --> 00:27:20,750
service exposed imagine you are the

720
00:27:18,350 --> 00:27:23,060
Bluetooth device developer you want to

721
00:27:20,750 --> 00:27:24,500
know this yourself before somebody else

722
00:27:23,060 --> 00:27:27,230
figures out about it and writes a mean

723
00:27:24,500 --> 00:27:28,160
blog post about you alright I'm gonna

724
00:27:27,230 --> 00:27:31,160
pick up the pace a little bit

725
00:27:28,160 --> 00:27:33,980
ble padlock somewhat self-explanatory

726
00:27:31,160 --> 00:27:35,510
it's a fitness it's another device kind

727
00:27:33,980 --> 00:27:38,180
of aimed at the fitness market you go to

728
00:27:35,510 --> 00:27:40,160
the gym you put this on your lock on

729
00:27:38,180 --> 00:27:43,640
your locker it has an app that runs on

730
00:27:40,160 --> 00:27:45,440
your smart phone if you want you lock

731
00:27:43,640 --> 00:27:46,970
your locker you walk away at the end of

732
00:27:45,440 --> 00:27:49,340
your workout you you pop open your

733
00:27:46,970 --> 00:27:52,310
smartphone you click unlock how do we

734
00:27:49,340 --> 00:27:54,709
reverse engineer this step one unlock

735
00:27:52,310 --> 00:27:56,270
the lock step two look at the data that

736
00:27:54,710 --> 00:27:59,210
that comes off the device when you

737
00:27:56,270 --> 00:28:00,620
unlock that lock and you'll never guess

738
00:27:59,210 --> 00:28:04,070
what we find on this device it is

739
00:28:00,620 --> 00:28:05,540
another hidden serial part so if you

740
00:28:04,070 --> 00:28:06,830
look at this data this one starts is

741
00:28:05,540 --> 00:28:09,230
where things start to depart from the

742
00:28:06,830 --> 00:28:11,060
previous ones we see something that's

743
00:28:09,230 --> 00:28:12,500
happening over this hidden serial port

744
00:28:11,060 --> 00:28:14,149
but it's looking a lot more opaque this

745
00:28:12,500 --> 00:28:16,880
is just a bunch of long random binary

746
00:28:14,150 --> 00:28:20,300
data and going through these packets

747
00:28:16,880 --> 00:28:23,720
there are like lots of these weird

748
00:28:20,300 --> 00:28:25,580
binary messages and this is where you

749
00:28:23,720 --> 00:28:27,590
start to hit the limits of Wireshark as

750
00:28:25,580 --> 00:28:28,580
a tool it's not really great for doing a

751
00:28:27,590 --> 00:28:30,790
lot of comparative

752
00:28:28,580 --> 00:28:33,260
messages that are sequential and

753
00:28:30,790 --> 00:28:35,450
fortunately Wireshark provides a really

754
00:28:33,260 --> 00:28:37,370
powerful feature that allows us to get

755
00:28:35,450 --> 00:28:38,900
at the data a separate way if you go

756
00:28:37,370 --> 00:28:41,780
into the file menu export packet

757
00:28:38,900 --> 00:28:44,420
dissections as JSON you get a complete

758
00:28:41,780 --> 00:28:47,030
JSON dump of all the totally decoded

759
00:28:44,420 --> 00:28:49,340
packet information this is awesome

760
00:28:47,030 --> 00:28:51,170
any modern programming language ships

761
00:28:49,340 --> 00:28:53,750
with a JSON parser and you can load this

762
00:28:51,170 --> 00:28:55,850
data in that way or if you're like me

763
00:28:53,750 --> 00:28:57,100
you'll write some super Gro t-rex based

764
00:28:55,850 --> 00:29:00,290
parser in Perl

765
00:28:57,100 --> 00:29:02,870
don't judge me only god can judge me and

766
00:29:00,290 --> 00:29:05,810
by god I course mean Larry wall and his

767
00:29:02,870 --> 00:29:07,729
glorious mustache this is what the

768
00:29:05,810 --> 00:29:09,950
output of that tool looks like and this

769
00:29:07,730 --> 00:29:12,020
is a custom tool that I wrote but it's

770
00:29:09,950 --> 00:29:13,880
really only it like a few dozen lines of

771
00:29:12,020 --> 00:29:17,000
code it's super all it does is take in

772
00:29:13,880 --> 00:29:18,920
JSON and prints it out now what we're

773
00:29:17,000 --> 00:29:22,100
seeing here at least makes a little bit

774
00:29:18,920 --> 00:29:24,530
more sense in terms of like our ability

775
00:29:22,100 --> 00:29:26,510
to look at it do you see a bunch of like

776
00:29:24,530 --> 00:29:29,360
binary strings then you see this value

777
00:29:26,510 --> 00:29:31,430
here this is actually 128 bits long now

778
00:29:29,360 --> 00:29:32,780
we're starting to get into seeing stuff

779
00:29:31,430 --> 00:29:34,870
that looks like well maybe this is an

780
00:29:32,780 --> 00:29:38,899
encryption key or an encrypted block and

781
00:29:34,870 --> 00:29:40,310
it's really hard just looking at this

782
00:29:38,900 --> 00:29:41,270
data to make any sense about it

783
00:29:40,310 --> 00:29:42,770
whatsoever

784
00:29:41,270 --> 00:29:45,100
in this case you really have to go into

785
00:29:42,770 --> 00:29:48,310
the app look back and see how it works

786
00:29:45,100 --> 00:29:52,040
what I found in this particular app is

787
00:29:48,310 --> 00:29:54,260
that they were using encryption that was

788
00:29:52,040 --> 00:29:56,389
so you trace through the Java and you

789
00:29:54,260 --> 00:29:58,040
end up getting bumped out to a native

790
00:29:56,390 --> 00:30:00,380
encryption library that's shipped with

791
00:29:58,040 --> 00:30:03,260
the app written in C++ this is where I

792
00:30:00,380 --> 00:30:04,490
gave up and I said it might be secure it

793
00:30:03,260 --> 00:30:05,600
might not be secure but I don't

794
00:30:04,490 --> 00:30:07,460
personally have the time to go in

795
00:30:05,600 --> 00:30:09,320
reverse engineering this this custom

796
00:30:07,460 --> 00:30:11,330
encryption algorithm and that's actually

797
00:30:09,320 --> 00:30:14,330
one of the takeaways I would give to you

798
00:30:11,330 --> 00:30:16,429
is custom encryption is really common

799
00:30:14,330 --> 00:30:18,770
and implementing custom encryption is

800
00:30:16,430 --> 00:30:20,240
fraught with peril it is not something

801
00:30:18,770 --> 00:30:22,940
to be taken lightly and a lot of

802
00:30:20,240 --> 00:30:24,680
companies do take it pretty lightly you

803
00:30:22,940 --> 00:30:27,590
can't just slap together AES and a

804
00:30:24,680 --> 00:30:28,430
couple of keys and say you're done like

805
00:30:27,590 --> 00:30:29,720
if you're gonna if you're really

806
00:30:28,430 --> 00:30:31,640
thinking about doing some custom

807
00:30:29,720 --> 00:30:33,230
encryption please hire a cryptographer

808
00:30:31,640 --> 00:30:34,670
don't let your programmers do it they

809
00:30:33,230 --> 00:30:37,340
know just enough about crypto to be

810
00:30:34,670 --> 00:30:39,020
dangerous what are our conclusions on

811
00:30:37,340 --> 00:30:41,300
this the developers were at least

812
00:30:39,020 --> 00:30:41,549
security minded they tried they're using

813
00:30:41,300 --> 00:30:44,820
and

814
00:30:41,549 --> 00:30:46,679
option but is the homegrown encryption

815
00:30:44,820 --> 00:30:48,720
good or not I don't know I didn't take

816
00:30:46,679 --> 00:30:50,460
the time to look it's not as bad as some

817
00:30:48,720 --> 00:30:51,659
of the other ble padlocks I've seen out

818
00:30:50,460 --> 00:30:53,669
there there was a Def Con talk a few

819
00:30:51,659 --> 00:30:58,230
years back destroying a bunch of these

820
00:30:53,669 --> 00:31:00,239
but who knows I'm gonna pause here and

821
00:30:58,230 --> 00:31:04,200
take a brief intermission because I need

822
00:31:00,239 --> 00:31:07,340
to grab a sip of water but are there any

823
00:31:04,200 --> 00:31:11,639
questions before I move on

824
00:31:07,340 --> 00:31:18,299
no questions okay awkwardly grab a cup

825
00:31:11,639 --> 00:31:20,908
of water here what have we seen so far

826
00:31:18,299 --> 00:31:23,940
first reading data going to and from

827
00:31:20,909 --> 00:31:26,669
Bluetooth is straightforward really it's

828
00:31:23,940 --> 00:31:28,470
it's simple you you turn on the HDI

829
00:31:26,669 --> 00:31:30,779
logging in Android you do stuff in your

830
00:31:28,470 --> 00:31:32,129
app you pull the data in and Wireshark

831
00:31:30,779 --> 00:31:33,869
and interpret the data for you and if

832
00:31:32,129 --> 00:31:35,248
you run up into limits on Wireshark you

833
00:31:33,869 --> 00:31:37,649
can export the data and parts in your

834
00:31:35,249 --> 00:31:39,720
favorite programming language number two

835
00:31:37,649 --> 00:31:42,299
no encryption on the first two devices

836
00:31:39,720 --> 00:31:44,340
huge target and given the context in

837
00:31:42,299 --> 00:31:46,070
which they used privacy implications and

838
00:31:44,340 --> 00:31:50,459
possibly patient health implications

839
00:31:46,070 --> 00:31:51,779
furthermore firmware updates it's like I

840
00:31:50,460 --> 00:31:55,169
said at the beginning security and

841
00:31:51,779 --> 00:31:58,259
Bluetooth is kind of the Wild West forth

842
00:31:55,169 --> 00:32:00,179
case study a classic Bluetooth headset

843
00:31:58,259 --> 00:32:02,190
it's not exactly a headset it's a

844
00:32:00,179 --> 00:32:06,119
industry specific device that works more

845
00:32:02,190 --> 00:32:07,669
or less like a headset and just think of

846
00:32:06,119 --> 00:32:10,980
it in your mind as a Bluetooth headset

847
00:32:07,669 --> 00:32:12,720
there are standard profiles that most

848
00:32:10,980 --> 00:32:13,710
Bluetooth headsets would use one is

849
00:32:12,720 --> 00:32:16,289
called a2dp

850
00:32:13,710 --> 00:32:17,609
this is the profile that your if you've

851
00:32:16,289 --> 00:32:19,350
ever used a Bluetooth speaker or

852
00:32:17,609 --> 00:32:20,730
bluetooth headphones to listen to music

853
00:32:19,350 --> 00:32:23,309
you're using a2dp

854
00:32:20,730 --> 00:32:24,629
the other is hfp hands-free profile if

855
00:32:23,309 --> 00:32:26,369
you're making a Bluetooth phone phone

856
00:32:24,629 --> 00:32:29,100
calls via Bluetooth in your car or on a

857
00:32:26,369 --> 00:32:31,649
headset using hands-free profile once

858
00:32:29,100 --> 00:32:34,350
again they're not using these there is

859
00:32:31,649 --> 00:32:35,879
another custom serial port why is there

860
00:32:34,350 --> 00:32:38,879
another custom serial port

861
00:32:35,879 --> 00:32:41,100
well reasons some they're actually

862
00:32:38,879 --> 00:32:43,379
somewhat pretty good in this case in

863
00:32:41,100 --> 00:32:46,350
this is a classic Bluetooth device this

864
00:32:43,379 --> 00:32:47,850
is not a ble device and that helps us to

865
00:32:46,350 --> 00:32:49,830
a certain extent because there's already

866
00:32:47,850 --> 00:32:52,230
a profile in classic Bluetooth for

867
00:32:49,830 --> 00:32:55,080
speaking as a serial port the serial

868
00:32:52,230 --> 00:32:55,389
port profile meaning when we pull the

869
00:32:55,080 --> 00:32:57,968
data

870
00:32:55,389 --> 00:33:00,458
into Wireshark now all we need to do is

871
00:32:57,969 --> 00:33:02,589
filter on it's called RF comm here but

872
00:33:00,459 --> 00:33:04,179
that means serial port profile so that

873
00:33:02,589 --> 00:33:05,799
saves us at least some of the trouble of

874
00:33:04,179 --> 00:33:08,919
having to look at the data and do fancy

875
00:33:05,799 --> 00:33:11,019
Wireshark filters fun fact the best

876
00:33:08,919 --> 00:33:13,089
Wireshark filter to use if you ever have

877
00:33:11,019 --> 00:33:18,249
a serial port profile device is the word

878
00:33:13,089 --> 00:33:20,499
data dat a data it's just it just worked

879
00:33:18,249 --> 00:33:22,059
out well in this case and again we can

880
00:33:20,499 --> 00:33:23,320
page through this data in Wireshark and

881
00:33:22,059 --> 00:33:25,629
if you pay attention to the bottom of

882
00:33:23,320 --> 00:33:28,689
the slide here you can see the data

883
00:33:25,629 --> 00:33:32,829
changing between these between these

884
00:33:28,690 --> 00:33:34,599
values and Wireshark is not the best for

885
00:33:32,829 --> 00:33:36,789
doing this type of analysis but in this

886
00:33:34,599 --> 00:33:39,099
case we actually can do some rudimentary

887
00:33:36,789 --> 00:33:41,289
analysis in Wireshark and we see a

888
00:33:39,099 --> 00:33:43,418
structure emerging every packet starts

889
00:33:41,289 --> 00:33:46,179
with this magic number followed by an

890
00:33:43,419 --> 00:33:48,669
opcode a sequence number a 16-bit

891
00:33:46,179 --> 00:33:52,929
little-endian length and data and a

892
00:33:48,669 --> 00:33:54,339
checksum and this is enough to kind of

893
00:33:52,929 --> 00:33:56,289
get as a broad sense of how the device

894
00:33:54,339 --> 00:33:59,049
is communicating with a companion app

895
00:33:56,289 --> 00:34:01,479
but it's not enough for us to really

896
00:33:59,049 --> 00:34:02,950
make a lot of sense about it again in

897
00:34:01,479 --> 00:34:05,919
this case we're going to export the data

898
00:34:02,950 --> 00:34:07,599
to JSON using a homeopathic application

899
00:34:05,919 --> 00:34:09,668
of perl or your favorite programming

900
00:34:07,599 --> 00:34:11,679
language you can build a tool that looks

901
00:34:09,668 --> 00:34:13,658
something like this in this case I've

902
00:34:11,679 --> 00:34:15,609
got a little Direction indicator and an

903
00:34:13,659 --> 00:34:17,200
opcode and you can start to see these

904
00:34:15,609 --> 00:34:19,629
big data patterns emerge

905
00:34:17,199 --> 00:34:21,969
knowing the nature of this device when I

906
00:34:19,629 --> 00:34:24,308
see it's a headset right there's going

907
00:34:21,969 --> 00:34:27,939
to be audio data I'm seeing these big

908
00:34:24,309 --> 00:34:30,730
blobs of binary data here this is

909
00:34:27,940 --> 00:34:32,349
probably audio data so I hacked together

910
00:34:30,730 --> 00:34:34,449
the tool a little bit to export these

911
00:34:32,349 --> 00:34:37,179
big blobs of data into raw files and

912
00:34:34,449 --> 00:34:40,029
then turned over to audacity an open

913
00:34:37,179 --> 00:34:42,609
source tool for processing audio you

914
00:34:40,029 --> 00:34:44,619
import the audio you have to specify all

915
00:34:42,609 --> 00:34:47,980
these values so in this case it was

916
00:34:44,619 --> 00:34:51,069
signed 16-bit PCM big-endian one channel

917
00:34:47,980 --> 00:34:53,289
mono and 4000 kilohertz four kilohertz

918
00:34:51,069 --> 00:34:56,379
sampling rate how did I know these

919
00:34:53,289 --> 00:34:58,420
values let's call it an educated guess

920
00:34:56,379 --> 00:35:00,578
but in reality when it comes to audio

921
00:34:58,420 --> 00:35:02,380
they're only if you just play around

922
00:35:00,579 --> 00:35:03,880
with these values a little bit you'll

923
00:35:02,380 --> 00:35:05,769
eventually end up with something that

924
00:35:03,880 --> 00:35:07,900
looks like this this is an audio file

925
00:35:05,769 --> 00:35:09,160
and in fact when I played it back it was

926
00:35:07,900 --> 00:35:10,930
a very low sample

927
00:35:09,160 --> 00:35:14,940
a recording of my voice saying this is

928
00:35:10,930 --> 00:35:17,140
the test what do we take away from this

929
00:35:14,940 --> 00:35:19,270
first that the techniques that we use

930
00:35:17,140 --> 00:35:21,430
for ble devices work equally well for

931
00:35:19,270 --> 00:35:23,200
classic Bluetooth devices as long as you

932
00:35:21,430 --> 00:35:25,270
have a companion app in this case

933
00:35:23,200 --> 00:35:28,089
I neglected to mention it the companion

934
00:35:25,270 --> 00:35:29,859
app runs on Linux but you if you just

935
00:35:28,089 --> 00:35:32,069
run the b-team on command you can log

936
00:35:29,859 --> 00:35:34,210
that data and load that into Wireshark

937
00:35:32,069 --> 00:35:36,880
how much of what we were talking about

938
00:35:34,210 --> 00:35:39,280
was actually Bluetooth related almost

939
00:35:36,880 --> 00:35:42,780
none of it right ultimately this really

940
00:35:39,280 --> 00:35:44,890
boils down to basic reverse-engineering

941
00:35:42,780 --> 00:35:47,980
finally because it's classic Bluetooth

942
00:35:44,890 --> 00:35:50,410
the device is essentially required to

943
00:35:47,980 --> 00:35:52,480
use encryption so in this case there

944
00:35:50,410 --> 00:35:55,390
were no flaws with the actual encryption

945
00:35:52,480 --> 00:35:57,490
of the device however I didn't dig into

946
00:35:55,390 --> 00:35:59,500
it it might be possible to do some sort

947
00:35:57,490 --> 00:36:01,538
of a buffer overflow attack on the

948
00:35:59,500 --> 00:36:04,539
device by messing with length data

949
00:36:01,539 --> 00:36:06,369
memory corrupt and that sort of thing or

950
00:36:04,539 --> 00:36:09,819
for that matter in the companion app

951
00:36:06,369 --> 00:36:11,440
that runs on the system know is when

952
00:36:09,819 --> 00:36:13,450
things start to get a little bit more

953
00:36:11,440 --> 00:36:16,510
interesting I'm gonna be talking about a

954
00:36:13,450 --> 00:36:20,230
ble credit card absolutely a case of a

955
00:36:16,510 --> 00:36:23,349
Bluetooth Madlib what is a Bluetooth

956
00:36:20,230 --> 00:36:25,750
credit card pretty simple you have a

957
00:36:23,349 --> 00:36:28,089
credit card you slap Bluetooth on it and

958
00:36:25,750 --> 00:36:31,329
it's supposed to replace your big fat

959
00:36:28,089 --> 00:36:33,578
wallet this particular device the way it

960
00:36:31,329 --> 00:36:34,720
works is that you load data into you

961
00:36:33,579 --> 00:36:36,700
load your credit-card number into a

962
00:36:34,720 --> 00:36:39,399
smartphone app it sends your credit card

963
00:36:36,700 --> 00:36:40,839
over bluetooth to this the credit card

964
00:36:39,400 --> 00:36:42,520
is send your credit card number over

965
00:36:40,839 --> 00:36:44,980
Bluetooth to the physical credit card

966
00:36:42,520 --> 00:36:46,569
and then you use buttons and a screen on

967
00:36:44,980 --> 00:36:48,220
the device to select which Bluetooth

968
00:36:46,569 --> 00:36:49,630
credit card or which credit card you

969
00:36:48,220 --> 00:36:53,140
want to use when you make your next

970
00:36:49,630 --> 00:36:54,880
payment I hope most of you your toes

971
00:36:53,140 --> 00:36:57,098
were curling when I said you send the

972
00:36:54,880 --> 00:36:58,809
credit card over Bluetooth because that

973
00:36:57,099 --> 00:37:01,900
was immediately what brought me my

974
00:36:58,809 --> 00:37:03,670
interest on device not really apropos to

975
00:37:01,900 --> 00:37:06,880
reverse engineering the Bluetooth part

976
00:37:03,670 --> 00:37:08,770
but I I went and talked to my pal John

977
00:37:06,880 --> 00:37:10,720
McMaster and I said how the hell do you

978
00:37:08,770 --> 00:37:12,549
fit a bluetooth into something that's

979
00:37:10,720 --> 00:37:14,379
the size shape and thickness of a credit

980
00:37:12,549 --> 00:37:15,549
card and he said well let's look at our

981
00:37:14,380 --> 00:37:16,930
let's look at it on an x-ray machine

982
00:37:15,549 --> 00:37:20,589
because I have one of those in my garage

983
00:37:16,930 --> 00:37:22,270
and this is what we came up with I don't

984
00:37:20,589 --> 00:37:22,808
have time to dig into all the details of

985
00:37:22,270 --> 00:37:24,999
it but it

986
00:37:22,809 --> 00:37:26,979
if nothing else it is an extremely

987
00:37:24,999 --> 00:37:28,238
impressive technical achievement that

988
00:37:26,979 --> 00:37:29,709
they were able to fit all this

989
00:37:28,239 --> 00:37:31,509
technology into something the size and

990
00:37:29,709 --> 00:37:33,009
shape of a credit card and what is even

991
00:37:31,509 --> 00:37:34,659
more shocking to me is that not only one

992
00:37:33,009 --> 00:37:36,099
company does this there are actually a

993
00:37:34,659 --> 00:37:37,779
total of three companies that are

994
00:37:36,099 --> 00:37:39,999
currently or previously made a

995
00:37:37,779 --> 00:37:40,809
bluetooth-enabled credit card this is

996
00:37:39,999 --> 00:37:43,479
the only one I've seen that has a

997
00:37:40,809 --> 00:37:45,269
rechargeable battery which again blew my

998
00:37:43,479 --> 00:37:48,098
mind that you can make them that VIN

999
00:37:45,269 --> 00:37:50,709
anyhow same reverse engineering applies

1000
00:37:48,099 --> 00:37:52,329
load credit cards into the app send them

1001
00:37:50,709 --> 00:37:56,140
via Bluetooth and look at the data in

1002
00:37:52,329 --> 00:37:58,900
Wireshark the first thing Bravo to this

1003
00:37:56,140 --> 00:38:00,339
company they are using Bailey's built-in

1004
00:37:58,900 --> 00:38:02,159
encryption you can see they've got we've

1005
00:38:00,339 --> 00:38:06,069
got the le long-term key command here

1006
00:38:02,159 --> 00:38:08,199
start encryption and this is our actual

1007
00:38:06,069 --> 00:38:10,058
encryption key right here now this is

1008
00:38:08,199 --> 00:38:11,499
don't don't freak out that you can see

1009
00:38:10,059 --> 00:38:14,259
the encryption key this was logged on

1010
00:38:11,499 --> 00:38:15,908
the device that we control however this

1011
00:38:14,259 --> 00:38:17,259
is the actual encryption that's being

1012
00:38:15,909 --> 00:38:20,880
this is the key that's being used to

1013
00:38:17,259 --> 00:38:24,130
encrypt the data the data itself as

1014
00:38:20,880 --> 00:38:26,769
mentioned before is logged before the

1015
00:38:24,130 --> 00:38:28,719
encryption is applied to it so now even

1016
00:38:26,769 --> 00:38:30,339
though if we tried to log this data over

1017
00:38:28,719 --> 00:38:31,689
the air using a Bluetooth sniffer of

1018
00:38:30,339 --> 00:38:33,578
some sort it would just look like

1019
00:38:31,689 --> 00:38:35,618
encrypted garbage to us but we can

1020
00:38:33,579 --> 00:38:37,119
analyze the protocol here in Wireshark

1021
00:38:35,619 --> 00:38:39,939
because the encryption hasn't happened

1022
00:38:37,119 --> 00:38:42,849
yet and we can see something that

1023
00:38:39,939 --> 00:38:45,428
amounts to another hidden serial port

1024
00:38:42,849 --> 00:38:48,249
surprise surprise and if you start to

1025
00:38:45,429 --> 00:38:50,650
look in the the decoded protocol here

1026
00:38:48,249 --> 00:38:52,479
there's actually some ASCII data so

1027
00:38:50,650 --> 00:38:53,890
that's good that that this is not really

1028
00:38:52,479 --> 00:38:55,089
even binary reverse engineering at this

1029
00:38:53,890 --> 00:38:57,339
point this is a protocol that we can

1030
00:38:55,089 --> 00:38:59,319
really make sense of so exporting the

1031
00:38:57,339 --> 00:39:02,319
data into JSON and writing another basic

1032
00:38:59,319 --> 00:39:03,699
Wireshark parser exporting the data into

1033
00:39:02,319 --> 00:39:06,729
JSON and more creating another parser

1034
00:39:03,699 --> 00:39:08,469
you can see you get a bunch of messages

1035
00:39:06,729 --> 00:39:10,239
and they all have a really predictable

1036
00:39:08,469 --> 00:39:12,699
structure and you can even start to see

1037
00:39:10,239 --> 00:39:15,039
some unencrypted data or some well it's

1038
00:39:12,699 --> 00:39:17,589
not encrypted yet some ASCII data here

1039
00:39:15,039 --> 00:39:19,299
that this one of these is a fake credit

1040
00:39:17,589 --> 00:39:22,328
card number that I inject it into the

1041
00:39:19,299 --> 00:39:23,890
app so now you can actually see the

1042
00:39:22,329 --> 00:39:25,539
credit card data that's being sent over

1043
00:39:23,890 --> 00:39:27,939
Bluetooth and start to make sense of

1044
00:39:25,539 --> 00:39:30,309
this protocol this byte is always fixed

1045
00:39:27,939 --> 00:39:33,098
despite is high entropy and it's at the

1046
00:39:30,309 --> 00:39:34,779
very end that's probably a checksum we

1047
00:39:33,099 --> 00:39:36,860
see a single byte here probably

1048
00:39:34,779 --> 00:39:38,180
something like an opcode

1049
00:39:36,860 --> 00:39:42,710
something that looks like sequence

1050
00:39:38,180 --> 00:39:44,419
numbers and a bunch of data well guess

1051
00:39:42,710 --> 00:39:48,350
what this is what the message format

1052
00:39:44,420 --> 00:39:50,120
ultimately ends up being and I think

1053
00:39:48,350 --> 00:39:53,060
what really surprised me was seeing

1054
00:39:50,120 --> 00:39:55,250
these ASCII lengths encoded in the these

1055
00:39:53,060 --> 00:39:57,110
lengths encoded as ASCII values inside

1056
00:39:55,250 --> 00:39:58,910
the protocol that tells me that some

1057
00:39:57,110 --> 00:40:01,010
parser somewhere is looking at that

1058
00:39:58,910 --> 00:40:03,500
length and any time I see a length value

1059
00:40:01,010 --> 00:40:05,270
embedded in a string I'm immediately

1060
00:40:03,500 --> 00:40:07,340
wondering what kind of mischief you can

1061
00:40:05,270 --> 00:40:09,320
cause with that in this case I didn't

1062
00:40:07,340 --> 00:40:10,310
find any sort of mischief like that you

1063
00:40:09,320 --> 00:40:12,410
might be thinking well they used

1064
00:40:10,310 --> 00:40:14,060
encryption they were safe right they

1065
00:40:12,410 --> 00:40:16,640
were not safe because they were making

1066
00:40:14,060 --> 00:40:18,830
assumptions about how ble encryption

1067
00:40:16,640 --> 00:40:21,049
works and how it could how it kept them

1068
00:40:18,830 --> 00:40:23,480
safe in this particular case if you gain

1069
00:40:21,050 --> 00:40:24,650
physical control of the credit card for

1070
00:40:23,480 --> 00:40:26,210
instance if you're a waiter at a

1071
00:40:24,650 --> 00:40:28,280
restaurant and they hand it to you to

1072
00:40:26,210 --> 00:40:29,990
pay a bill you could unlock the device

1073
00:40:28,280 --> 00:40:33,170
and you could actually extract credit

1074
00:40:29,990 --> 00:40:34,490
card numbers from the device so I think

1075
00:40:33,170 --> 00:40:35,750
the biggest takeaway I want you to take

1076
00:40:34,490 --> 00:40:37,040
from this is that encryption is not a

1077
00:40:35,750 --> 00:40:38,750
silver bullet you need to fully

1078
00:40:37,040 --> 00:40:40,250
understand your threat model and

1079
00:40:38,750 --> 00:40:43,490
understand all the possible ways your

1080
00:40:40,250 --> 00:40:44,150
device can be abused our conclusions

1081
00:40:43,490 --> 00:40:46,399
here though

1082
00:40:44,150 --> 00:40:49,130
HCI logging allows us to see encrypted

1083
00:40:46,400 --> 00:40:52,640
data even if the data is encrypted via

1084
00:40:49,130 --> 00:40:55,030
ble encryption we can get the data here

1085
00:40:52,640 --> 00:40:57,560
the encryption is not a silver bullet

1086
00:40:55,030 --> 00:40:59,510
finally our last case study I only have

1087
00:40:57,560 --> 00:41:02,570
a few minutes left a ble electric

1088
00:40:59,510 --> 00:41:05,120
skateboard this is 100% a Bluetooth

1089
00:41:02,570 --> 00:41:08,780
Madlib and I 100% support it these

1090
00:41:05,120 --> 00:41:11,690
things are awesome there's one wrench in

1091
00:41:08,780 --> 00:41:13,370
the gears here there's no app or at

1092
00:41:11,690 --> 00:41:14,990
least at the time that I tested this and

1093
00:41:13,370 --> 00:41:16,609
this is actually some joint work that I

1094
00:41:14,990 --> 00:41:21,259
did a few years ago with rich o'healey

1095
00:41:16,610 --> 00:41:24,200
there is no app so the only way that you

1096
00:41:21,260 --> 00:41:26,180
can get any data via bluetooth is using

1097
00:41:24,200 --> 00:41:28,009
this handheld remote controller this is

1098
00:41:26,180 --> 00:41:29,690
just a hardware device that you hold in

1099
00:41:28,010 --> 00:41:31,520
your hand and there's a little wheel

1100
00:41:29,690 --> 00:41:33,110
here when you adjust the wheel it

1101
00:41:31,520 --> 00:41:36,080
adjusts the speed of the motors on the

1102
00:41:33,110 --> 00:41:37,520
skateboard in this case since we don't

1103
00:41:36,080 --> 00:41:39,560
have an app the technique that we use

1104
00:41:37,520 --> 00:41:40,009
for the previous five case studies won't

1105
00:41:39,560 --> 00:41:43,220
work

1106
00:41:40,010 --> 00:41:45,950
you have to use a sniffer in this case

1107
00:41:43,220 --> 00:41:48,049
we're going to look at an uber to using

1108
00:41:45,950 --> 00:41:49,669
an uber tooth and here's where the

1109
00:41:48,050 --> 00:41:51,410
process the reverse and

1110
00:41:49,670 --> 00:41:53,720
hearing process deviates a little bit

1111
00:41:51,410 --> 00:41:55,578
and mainly due to limitations of the

1112
00:41:53,720 --> 00:41:57,290
uber tooth the first thing we're going

1113
00:41:55,579 --> 00:41:59,329
to do is launch the uber tooth as a

1114
00:41:57,290 --> 00:42:02,150
sniffer we're going to connect the

1115
00:41:59,329 --> 00:42:03,530
remote control to the skateboard and if

1116
00:42:02,150 --> 00:42:05,540
the connection is not captured by the

1117
00:42:03,530 --> 00:42:07,609
Bluebird tooth you go back to one you

1118
00:42:05,540 --> 00:42:10,040
just keep doing this in a row and it can

1119
00:42:07,609 --> 00:42:11,328
take like a couple tries like maybe

1120
00:42:10,040 --> 00:42:13,369
sometimes a couple dozen tries to

1121
00:42:11,329 --> 00:42:15,950
actually get it but once you finally

1122
00:42:13,369 --> 00:42:17,630
capture that connection you do stuff

1123
00:42:15,950 --> 00:42:20,660
with the board like you adjust the speed

1124
00:42:17,630 --> 00:42:22,910
you let go the Deadman switch and see

1125
00:42:20,660 --> 00:42:26,899
what kind of data gets generated finally

1126
00:42:22,910 --> 00:42:28,670
pull that into Wireshark just to give

1127
00:42:26,900 --> 00:42:30,890
you forewarning if you're going to try

1128
00:42:28,670 --> 00:42:33,680
to do this you're gonna need at least

1129
00:42:30,890 --> 00:42:35,270
three uber teeth to reliably capture

1130
00:42:33,680 --> 00:42:36,680
every connection you can do it with one

1131
00:42:35,270 --> 00:42:38,390
it just means you're gonna spend three

1132
00:42:36,680 --> 00:42:40,190
times as much effort and in my

1133
00:42:38,390 --> 00:42:42,848
experience more uber teeth is better so

1134
00:42:40,190 --> 00:42:45,380
just go ahead and go out and buy a bunch

1135
00:42:42,849 --> 00:42:47,930
when you load the data in the Wireshark

1136
00:42:45,380 --> 00:42:50,450
we again see our hidden serial port and

1137
00:42:47,930 --> 00:42:52,759
what's interesting here is that we can

1138
00:42:50,450 --> 00:42:54,859
see some ASCII protocol data in fact it

1139
00:42:52,760 --> 00:42:56,960
is almost literally a serial port it

1140
00:42:54,859 --> 00:42:58,848
even ends with a carriage return

1141
00:42:56,960 --> 00:43:02,510
character which is a little bit bizarre

1142
00:42:58,849 --> 00:43:04,849
for a hardware device one other thing

1143
00:43:02,510 --> 00:43:06,710
that might shock and terrify you is that

1144
00:43:04,849 --> 00:43:09,650
there is no encryption on this data this

1145
00:43:06,710 --> 00:43:11,089
is captured raw over-the-air if there

1146
00:43:09,650 --> 00:43:12,530
were encryption we would have seen it by

1147
00:43:11,089 --> 00:43:16,700
now

1148
00:43:12,530 --> 00:43:18,559
so protocol reverse engineering here is

1149
00:43:16,700 --> 00:43:21,290
a sample of some of the messages that

1150
00:43:18,559 --> 00:43:23,510
were sent and if you correlate them back

1151
00:43:21,290 --> 00:43:25,339
to what was happening during the capture

1152
00:43:23,510 --> 00:43:27,440
at the time that the messages were

1153
00:43:25,339 --> 00:43:29,630
captured this is what happens when it

1154
00:43:27,440 --> 00:43:31,099
just connects and it's idle as soon as

1155
00:43:29,630 --> 00:43:33,710
you press the dead man's trigger this

1156
00:43:31,099 --> 00:43:38,480
value here changes and as you increase

1157
00:43:33,710 --> 00:43:40,730
the throttle the the speed goes up the

1158
00:43:38,480 --> 00:43:42,890
only thing that really kind of gets in

1159
00:43:40,730 --> 00:43:45,589
the way of of just injecting whatever

1160
00:43:42,890 --> 00:43:47,839
speed you want is that this value here

1161
00:43:45,589 --> 00:43:50,900
at the very end turns out to be a really

1162
00:43:47,839 --> 00:43:52,759
simple checksum it's a life like and

1163
00:43:50,900 --> 00:43:55,579
together all the nibbler XOR together

1164
00:43:52,760 --> 00:43:57,319
all the nibbles of the speed command for

1165
00:43:55,579 --> 00:43:59,540
some reason I don't know why they did

1166
00:43:57,319 --> 00:44:03,029
that because there were already checksum

1167
00:43:59,540 --> 00:44:05,340
was built into ble however there

1168
00:44:03,030 --> 00:44:07,500
no encryption which also means that

1169
00:44:05,340 --> 00:44:10,260
there's no authentication the protocol

1170
00:44:07,500 --> 00:44:11,730
is very simple in this case it's only a

1171
00:44:10,260 --> 00:44:14,520
small matter of programming to write a

1172
00:44:11,730 --> 00:44:16,230
tool that impersonates the Bluetooth

1173
00:44:14,520 --> 00:44:17,520
remote controller and injects whatever

1174
00:44:16,230 --> 00:44:19,770
speed command you want into the

1175
00:44:17,520 --> 00:44:22,380
skateboard rich oh and I actually got a

1176
00:44:19,770 --> 00:44:24,990
CV for this and as far as I know is the

1177
00:44:22,380 --> 00:44:27,180
only Bluetooth only skateboard related

1178
00:44:24,990 --> 00:44:29,399
CBE that's out there and it's one of the

1179
00:44:27,180 --> 00:44:33,060
few CV descriptions that result that

1180
00:44:29,400 --> 00:44:35,400
includes the wording this uses the CBE

1181
00:44:33,060 --> 00:44:39,420
may result in harm to the rider of the

1182
00:44:35,400 --> 00:44:40,710
skateboard so I'm saying it a little bit

1183
00:44:39,420 --> 00:44:42,930
light of a tone but there are real

1184
00:44:40,710 --> 00:44:45,560
actual consequences to this until they

1185
00:44:42,930 --> 00:44:48,060
fixed the problem somebody could have

1186
00:44:45,560 --> 00:44:50,160
hijacked skateboards and caused people

1187
00:44:48,060 --> 00:44:52,799
to fly off this this is a thing that

1188
00:44:50,160 --> 00:44:54,180
actually happened because the developer

1189
00:44:52,800 --> 00:44:55,710
we spoke to the developer after we

1190
00:44:54,180 --> 00:44:58,049
reported this vulnerability and they

1191
00:44:55,710 --> 00:45:00,300
said well we were following the hardware

1192
00:44:58,050 --> 00:45:02,100
manufacturers guidelines we set the flag

1193
00:45:00,300 --> 00:45:04,140
that said to use encryption but they

1194
00:45:02,100 --> 00:45:06,150
never verified it all they would have

1195
00:45:04,140 --> 00:45:07,680
needed to do is spend a few minutes with

1196
00:45:06,150 --> 00:45:09,030
an uber tooth and would have immediately

1197
00:45:07,680 --> 00:45:13,140
found out there was no encryption and

1198
00:45:09,030 --> 00:45:14,820
they were at risk conclusions here uber

1199
00:45:13,140 --> 00:45:16,170
tooth much harder to use than HDI

1200
00:45:14,820 --> 00:45:17,310
logging if you have an uber tooth or

1201
00:45:16,170 --> 00:45:19,590
you're thinking about using an uber

1202
00:45:17,310 --> 00:45:23,370
tooth see if you can use the HDI logging

1203
00:45:19,590 --> 00:45:24,840
feature first if the device was using

1204
00:45:23,370 --> 00:45:27,060
encryption in this case we would have to

1205
00:45:24,840 --> 00:45:28,470
crack the encryption and I've released

1206
00:45:27,060 --> 00:45:30,810
some tools in the past in order to do

1207
00:45:28,470 --> 00:45:32,100
that and I should have added a bullet

1208
00:45:30,810 --> 00:45:33,960
point for this but if you're developing

1209
00:45:32,100 --> 00:45:36,390
a device and you think you're using a

1210
00:45:33,960 --> 00:45:38,640
encryption make sure you validate that

1211
00:45:36,390 --> 00:45:42,900
end-to-end testing is the only way that

1212
00:45:38,640 --> 00:45:45,000
you can possibly validate it parting

1213
00:45:42,900 --> 00:45:46,500
thoughts wrapping things up what are the

1214
00:45:45,000 --> 00:45:48,570
most common security problems that I've

1215
00:45:46,500 --> 00:45:51,510
encountered devices using no encryption

1216
00:45:48,570 --> 00:45:54,810
we saw it in three of our six use cases

1217
00:45:51,510 --> 00:45:55,890
and fifty percent of devices pretty much

1218
00:45:54,810 --> 00:45:59,549
reflects what I've seen out on the

1219
00:45:55,890 --> 00:46:01,350
market there are problems with homemade

1220
00:45:59,550 --> 00:46:03,630
encryption we didn't really see it so

1221
00:46:01,350 --> 00:46:05,100
much here but many of the times that

1222
00:46:03,630 --> 00:46:06,480
I've seen devices they use custom

1223
00:46:05,100 --> 00:46:09,360
encryption there's some kind of

1224
00:46:06,480 --> 00:46:11,490
encryption flaw be it reuse of a key

1225
00:46:09,360 --> 00:46:13,620
improper use of algorithms all sorts of

1226
00:46:11,490 --> 00:46:15,200
stuff be very very very very very

1227
00:46:13,620 --> 00:46:17,930
careful if you're implementing custom

1228
00:46:15,200 --> 00:46:19,430
encryption there were some debug

1229
00:46:17,930 --> 00:46:21,950
interfaces on some devices that I've

1230
00:46:19,430 --> 00:46:23,779
encountered and incomplete threat

1231
00:46:21,950 --> 00:46:26,240
modeling this is what would tanked the

1232
00:46:23,780 --> 00:46:28,250
the Bluetooth credit-card they were

1233
00:46:26,240 --> 00:46:29,509
using encryption the app and the design

1234
00:46:28,250 --> 00:46:31,190
were reasonably well thought out there

1235
00:46:29,510 --> 00:46:33,730
were just a few quarter in edge cases

1236
00:46:31,190 --> 00:46:35,960
that they didn't consider so you really

1237
00:46:33,730 --> 00:46:37,369
security you have to be holistic about

1238
00:46:35,960 --> 00:46:38,750
it you can't just think oh I'm using

1239
00:46:37,369 --> 00:46:42,800
encryption done you have to have a big

1240
00:46:38,750 --> 00:46:43,880
picture conclusions doing this is

1241
00:46:42,800 --> 00:46:45,950
affordable you don't need to drop

1242
00:46:43,880 --> 00:46:48,380
$20,000 or convince your purchasing

1243
00:46:45,950 --> 00:46:50,060
department to approve the invoice you

1244
00:46:48,380 --> 00:46:52,640
can use hardware that you already have

1245
00:46:50,060 --> 00:46:54,980
and the reverse engineering process and

1246
00:46:52,640 --> 00:46:56,868
tools are very straightforward you can

1247
00:46:54,980 --> 00:46:58,849
use an Android device you can use

1248
00:46:56,869 --> 00:47:01,490
Wireshark you can even export data from

1249
00:46:58,849 --> 00:47:02,240
Wireshark and finally by studying these

1250
00:47:01,490 --> 00:47:03,950
case studies

1251
00:47:02,240 --> 00:47:05,689
I hope you've gotten a sense of how to

1252
00:47:03,950 --> 00:47:07,848
actually approach them in concrete terms

1253
00:47:05,690 --> 00:47:09,410
any device that you encounter it's

1254
00:47:07,849 --> 00:47:12,950
probably going to be at least

1255
00:47:09,410 --> 00:47:14,180
rudimentary rudin the rudiments of the

1256
00:47:12,950 --> 00:47:15,618
reverse engineering are at least going

1257
00:47:14,180 --> 00:47:17,660
to be very similar to the ones we've

1258
00:47:15,619 --> 00:47:18,849
already discussed I'm going to leave you

1259
00:47:17,660 --> 00:47:21,740
with a call to action

1260
00:47:18,849 --> 00:47:23,420
go forth and hack some Bluetooth you

1261
00:47:21,740 --> 00:47:25,879
probably have an Android device or have

1262
00:47:23,420 --> 00:47:28,640
access to one go try this out there's

1263
00:47:25,880 --> 00:47:30,230
there in the Bluetooth CTF the hardware

1264
00:47:28,640 --> 00:47:31,430
CTF right now there are Bluetooth

1265
00:47:30,230 --> 00:47:33,290
devices that you can use these

1266
00:47:31,430 --> 00:47:35,299
techniques on I'm gonna be hanging

1267
00:47:33,290 --> 00:47:38,119
around there this afternoon come try it

1268
00:47:35,300 --> 00:47:47,300
come ask me if you have problems and

1269
00:47:38,119 --> 00:47:52,040
that's it are there any questions these

1270
00:47:47,300 --> 00:47:53,569
have questions what up here the

1271
00:47:52,040 --> 00:47:55,520
Bluetooth credit card was there anything

1272
00:47:53,569 --> 00:47:57,050
that could be captured by Bluetooth that

1273
00:47:55,520 --> 00:48:00,710
couldn't be captured otherwise by the

1274
00:47:57,050 --> 00:48:02,089
mag stripe or the smart card chip was

1275
00:48:00,710 --> 00:48:03,230
there like there was a string or

1276
00:48:02,089 --> 00:48:04,849
something but I don't know if that was

1277
00:48:03,230 --> 00:48:06,440
on the other interfaces yes so the

1278
00:48:04,849 --> 00:48:09,079
actual data that was sent via bluetooth

1279
00:48:06,440 --> 00:48:12,319
I think it was the track one data and a

1280
00:48:09,079 --> 00:48:13,700
few other pieces of information but it

1281
00:48:12,319 --> 00:48:15,430
was essentially equivalent to what you

1282
00:48:13,700 --> 00:48:17,689
would have gotten off of a magstripe

1283
00:48:15,430 --> 00:48:19,910
card or swipe or whatever they call

1284
00:48:17,690 --> 00:48:22,609
those things this device had a smart

1285
00:48:19,910 --> 00:48:24,859
card built into the PCB but it was not

1286
00:48:22,609 --> 00:48:26,420
exposed to the outside world so I think

1287
00:48:24,859 --> 00:48:27,950
it was a something that was on the rebbe

1288
00:48:26,420 --> 00:48:28,940
2 board that was up

1289
00:48:27,950 --> 00:48:31,299
to come out and I don't know if that

1290
00:48:28,940 --> 00:48:40,160
ever came out is that into your question

1291
00:48:31,300 --> 00:48:43,250
other questions thank you so the idea of

1292
00:48:40,160 --> 00:48:45,259
you know using Android and you know your

1293
00:48:43,250 --> 00:48:49,130
phone and going above their layers that

1294
00:48:45,260 --> 00:48:50,930
link there that is when you are the

1295
00:48:49,130 --> 00:48:53,510
device that paired with a Bluetooth

1296
00:48:50,930 --> 00:48:55,879
device yes what if there's a device that

1297
00:48:53,510 --> 00:49:00,589
paired with another phone and your

1298
00:48:55,880 --> 00:49:04,130
device vendor in that case you have to

1299
00:49:00,589 --> 00:49:05,270
go to a sniffer what's there so you're

1300
00:49:04,130 --> 00:49:07,310
asking if you want to sniff somebody

1301
00:49:05,270 --> 00:49:10,310
else's Bluetooth no you have to use the

1302
00:49:07,310 --> 00:49:11,900
sniffer yeah and in the case of ble you

1303
00:49:10,310 --> 00:49:13,940
can try your luck with an uber tooth I

1304
00:49:11,900 --> 00:49:15,530
found in practice if you're not

1305
00:49:13,940 --> 00:49:18,290
controlling one of the vices it's pretty

1306
00:49:15,530 --> 00:49:20,470
hard to actually successfully sniff you

1307
00:49:18,290 --> 00:49:23,089
have to capture the initial part of the

1308
00:49:20,470 --> 00:49:24,828
connection and if you miss that

1309
00:49:23,089 --> 00:49:28,490
yeah it's troublesome have you found

1310
00:49:24,829 --> 00:49:31,430
that that initial handshake for the

1311
00:49:28,490 --> 00:49:34,520
pairing to be vulnerable if you were

1312
00:49:31,430 --> 00:49:37,819
there to sniff so if you're referring to

1313
00:49:34,520 --> 00:49:39,800
the built in ble encryption the LE

1314
00:49:37,819 --> 00:49:41,630
legacy pairing which is what most

1315
00:49:39,800 --> 00:49:45,530
devices still use if they're using bila

1316
00:49:41,630 --> 00:49:48,290
encryption is in fact vulnerable to to

1317
00:49:45,530 --> 00:49:50,270
an encryption attack a few years ago I

1318
00:49:48,290 --> 00:49:51,980
gave some talks on that and there's a

1319
00:49:50,270 --> 00:49:53,420
tool called crackle that you can look up

1320
00:49:51,980 --> 00:49:56,930
it's linked from it should be linked

1321
00:49:53,420 --> 00:50:00,500
from my website here I will say that at

1322
00:49:56,930 --> 00:50:04,190
the time I think I overstated the danger

1323
00:50:00,500 --> 00:50:06,410
of using built-in encryption the pairing

1324
00:50:04,190 --> 00:50:07,940
process is weak only at the time of

1325
00:50:06,410 --> 00:50:09,589
pairing so let's say you paired your

1326
00:50:07,940 --> 00:50:11,089
devices at home then you go out to a

1327
00:50:09,589 --> 00:50:14,180
coffee shop and use the encryption there

1328
00:50:11,089 --> 00:50:15,619
there's no real risk to the encryption

1329
00:50:14,180 --> 00:50:17,359
the only time you're vulnerable is at

1330
00:50:15,619 --> 00:50:23,330
that moment when you initially pair the

1331
00:50:17,359 --> 00:50:27,890
devices other questions

1332
00:50:23,330 --> 00:50:33,380
and you're the questions okay thank you

1333
00:50:27,890 --> 00:50:35,569
Thanks all right - uh we'll break for

1334
00:50:33,380 --> 00:50:37,930
lunch and we'll be back at 2:00 the

1335
00:50:35,570 --> 00:50:37,930
lunches

