1
00:00:02,879 --> 00:00:04,799
over to you

2
00:00:04,799 --> 00:00:06,080
all right

3
00:00:06,080 --> 00:00:08,400
so thank you um welcome to my

4
00:00:08,400 --> 00:00:10,080
presentation about self-labeling

5
00:00:10,080 --> 00:00:12,480
electronic shelf labels uh pawning the

6
00:00:12,480 --> 00:00:14,719
next big thing in retail

7
00:00:14,719 --> 00:00:16,239
my name is stefan roberts and i work as

8
00:00:16,239 --> 00:00:18,560
a security consultant for

9
00:00:18,560 --> 00:00:22,320
second salt which is based in austria

10
00:00:22,320 --> 00:00:24,480
and this uh work has been conducted in

11
00:00:24,480 --> 00:00:26,560
the second side vulnerability lab where

12
00:00:26,560 --> 00:00:28,560
we just have a look at new interesting

13
00:00:28,560 --> 00:00:29,679
topics

14
00:00:29,679 --> 00:00:32,159
that could have security relevant impact

15
00:00:32,159 --> 00:00:32,960
and

16
00:00:32,960 --> 00:00:34,960
start to dig into it try to figure out

17
00:00:34,960 --> 00:00:37,920
any new vulnerabilities there

18
00:00:37,920 --> 00:00:40,719
so what even is an esl tech a esl tag is

19
00:00:40,719 --> 00:00:42,840
depicted in the lower right hand corner

20
00:00:42,840 --> 00:00:44,160
here uh

21
00:00:44,160 --> 00:00:45,760
comes in different sizes i have some

22
00:00:45,760 --> 00:00:47,840
model in the seven inch or like a four

23
00:00:47,840 --> 00:00:50,160
or five inch one

24
00:00:50,160 --> 00:00:51,600
and pretty much consists out of a

25
00:00:51,600 --> 00:00:52,879
display

26
00:00:52,879 --> 00:00:54,960
usually this is an ink display but

27
00:00:54,960 --> 00:00:56,320
there's also some

28
00:00:56,320 --> 00:01:00,000
that are lcd displays

29
00:01:00,000 --> 00:01:02,480
it's usually battery powered and has

30
00:01:02,480 --> 00:01:03,920
supposed to have a runtime of multiple

31
00:01:03,920 --> 00:01:06,320
years since it's usually used as price

32
00:01:06,320 --> 00:01:10,080
tag or shelf label tag in the store

33
00:01:10,080 --> 00:01:12,000
and of course you need to have some form

34
00:01:12,000 --> 00:01:14,320
of communication usually a wireless form

35
00:01:14,320 --> 00:01:16,159
of communication so you can change

36
00:01:16,159 --> 00:01:18,240
what's depicted on the screen

37
00:01:18,240 --> 00:01:19,759
so in most cases there's either

38
00:01:19,759 --> 00:01:21,600
bluetooth low energy

39
00:01:21,600 --> 00:01:23,840
there are some ones that use nfc and

40
00:01:23,840 --> 00:01:25,119
there are some that use a custom

41
00:01:25,119 --> 00:01:29,200
proprietary 433 megahertz protocol

42
00:01:29,200 --> 00:01:30,640
and of course then you need a matching

43
00:01:30,640 --> 00:01:32,720
transceiver for a computer so you can

44
00:01:32,720 --> 00:01:34,479
just change the content of the display

45
00:01:34,479 --> 00:01:37,840
from your regular computer

46
00:01:38,560 --> 00:01:41,200
so when we looked into uh into the esl

47
00:01:41,200 --> 00:01:43,119
text at the first we're wondering if

48
00:01:43,119 --> 00:01:44,640
this is actually something that's being

49
00:01:44,640 --> 00:01:46,479
used because we saw it in couple

50
00:01:46,479 --> 00:01:48,240
austrian supermarket chains

51
00:01:48,240 --> 00:01:50,000
and we were looking into it is it

52
00:01:50,000 --> 00:01:51,360
actually a thing that could become big

53
00:01:51,360 --> 00:01:53,439
in the next years so we found a couple

54
00:01:53,439 --> 00:01:56,399
studies that were showing that last year

55
00:01:56,399 --> 00:01:58,880
the market worth was about 855 million

56
00:01:58,880 --> 00:02:00,320
u.s dollars

57
00:02:00,320 --> 00:02:02,799
but it's estimated to be 980 million u.s

58
00:02:02,799 --> 00:02:04,719
dollars already this year and then

59
00:02:04,719 --> 00:02:07,040
within the next uh 10 years it's

60
00:02:07,040 --> 00:02:09,280
supposed to be up to 5.2 billion u.s

61
00:02:09,280 --> 00:02:13,200
dollars so quite a rapid growth there

62
00:02:13,200 --> 00:02:14,959
this is mostly due to

63
00:02:14,959 --> 00:02:16,400
the convenient price changes that are

64
00:02:16,400 --> 00:02:18,480
possible with esotex can just change

65
00:02:18,480 --> 00:02:20,800
prices every minute or every day you

66
00:02:20,800 --> 00:02:22,800
don't have to change any stickers you

67
00:02:22,800 --> 00:02:24,239
just go into your computer system and

68
00:02:24,239 --> 00:02:26,080
change the prices for the whole store

69
00:02:26,080 --> 00:02:28,000
however you want and therefore you're

70
00:02:28,000 --> 00:02:29,840
better able to compete with online

71
00:02:29,840 --> 00:02:32,319
marketing

72
00:02:32,319 --> 00:02:34,800
also you're it's possible that you have

73
00:02:34,800 --> 00:02:37,040
promotional offers that are quite easily

74
00:02:37,040 --> 00:02:40,480
depictable on the on the

75
00:02:40,480 --> 00:02:41,760
esl text

76
00:02:41,760 --> 00:02:43,920
as usually they come with an led and can

77
00:02:43,920 --> 00:02:45,920
flash and blink as a customer and

78
00:02:45,920 --> 00:02:47,360
therefore draw the attention to a

79
00:02:47,360 --> 00:02:49,040
specific offer or specific product in

80
00:02:49,040 --> 00:02:51,360
the store

81
00:02:51,360 --> 00:02:53,200
so here a couple pictures how the esl

82
00:02:53,200 --> 00:02:55,599
tags are commonly commonly used

83
00:02:55,599 --> 00:02:57,760
so in the upper left hand corner or the

84
00:02:57,760 --> 00:03:00,080
upper row you can say the see the

85
00:03:00,080 --> 00:03:02,080
classic use case as just the price tag

86
00:03:02,080 --> 00:03:03,360
in the store

87
00:03:03,360 --> 00:03:04,720
but there are also a couple more

88
00:03:04,720 --> 00:03:06,159
interesting cases that we got from the

89
00:03:06,159 --> 00:03:07,440
supplier

90
00:03:07,440 --> 00:03:08,480
where the

91
00:03:08,480 --> 00:03:10,720
tags are used in a fashion that we

92
00:03:10,720 --> 00:03:13,040
didn't see in the first place

93
00:03:13,040 --> 00:03:14,319
so in the lower left-hand corner

94
00:03:14,319 --> 00:03:17,200
actually you see a hospital storage unit

95
00:03:17,200 --> 00:03:19,680
where they are using the shelf tags in

96
00:03:19,680 --> 00:03:22,000
order to organize their storage and to

97
00:03:22,000 --> 00:03:23,200
find the right products when they need

98
00:03:23,200 --> 00:03:25,519
for it there's actually a different

99
00:03:25,519 --> 00:03:27,200
version of the

100
00:03:27,200 --> 00:03:29,040
of the station because the shelves have

101
00:03:29,040 --> 00:03:30,959
all these little light columns

102
00:03:30,959 --> 00:03:32,640
and with the light columns the right

103
00:03:32,640 --> 00:03:34,000
shelf will start blinking if you're

104
00:03:34,000 --> 00:03:36,080
searching for something

105
00:03:36,080 --> 00:03:37,360
same kind of thing

106
00:03:37,360 --> 00:03:39,200
is on the right hand side there's

107
00:03:39,200 --> 00:03:40,319
actually a

108
00:03:40,319 --> 00:03:43,280
chord document storage room in china

109
00:03:43,280 --> 00:03:45,519
and it's being using the e-cell text in

110
00:03:45,519 --> 00:03:47,680
order to organize the documents so

111
00:03:47,680 --> 00:03:48,959
actually you have some more impact here

112
00:03:48,959 --> 00:03:51,440
besides just changing a price you could

113
00:03:51,440 --> 00:03:52,319
actually

114
00:03:52,319 --> 00:03:53,280
um

115
00:03:53,280 --> 00:03:54,159
change

116
00:03:54,159 --> 00:03:56,080
where documents are being stored and

117
00:03:56,080 --> 00:03:57,360
make it hard for people to find the

118
00:03:57,360 --> 00:03:58,560
right chord documents and therefore

119
00:03:58,560 --> 00:04:00,879
prolonging court cases which is an

120
00:04:00,879 --> 00:04:02,239
impact we didn't really think was

121
00:04:02,239 --> 00:04:05,200
possible in the beginning

122
00:04:05,920 --> 00:04:07,599
so what are the classic attack scenarios

123
00:04:07,599 --> 00:04:08,959
you could think of

124
00:04:08,959 --> 00:04:11,120
well the classic one would just be to

125
00:04:11,120 --> 00:04:12,640
obstruct the retailer

126
00:04:12,640 --> 00:04:14,959
and hence blackmailed for ransom because

127
00:04:14,959 --> 00:04:16,399
he could see that customer would get

128
00:04:16,399 --> 00:04:18,000
annoyed if they can't see the price for

129
00:04:18,000 --> 00:04:19,839
product and might just go visit a

130
00:04:19,839 --> 00:04:21,918
different supermarket

131
00:04:21,918 --> 00:04:23,440
we also thought about that phishing

132
00:04:23,440 --> 00:04:25,520
might be very possible because you could

133
00:04:25,520 --> 00:04:27,840
just set up a malicious qr code and a

134
00:04:27,840 --> 00:04:29,440
lot of people probably scanned it in the

135
00:04:29,440 --> 00:04:32,160
store because they would see

136
00:04:32,160 --> 00:04:33,840
a regular price tag think that's a valid

137
00:04:33,840 --> 00:04:36,000
one or it would be some special offer or

138
00:04:36,000 --> 00:04:38,240
discount if they scan the code

139
00:04:38,240 --> 00:04:40,000
and you funnel them through your

140
00:04:40,000 --> 00:04:42,880
malicious website then and then the last

141
00:04:42,880 --> 00:04:45,360
case is actually for the maker community

142
00:04:45,360 --> 00:04:47,759
these displays run very very cheap and

143
00:04:47,759 --> 00:04:50,320
you get a nice seven inch display with

144
00:04:50,320 --> 00:04:52,560
like multiple your battery storage on

145
00:04:52,560 --> 00:04:53,360
there

146
00:04:53,360 --> 00:04:55,680
so our own id was actually question if

147
00:04:55,680 --> 00:04:57,120
we could just use them

148
00:04:57,120 --> 00:04:58,960
as this place for our meeting rooms and

149
00:04:58,960 --> 00:05:01,120
just depict the schedule for the

150
00:05:01,120 --> 00:05:03,440
specific meeting room on it

151
00:05:03,440 --> 00:05:05,120
so maybe there's a lot more applications

152
00:05:05,120 --> 00:05:07,840
we could look into

153
00:05:08,160 --> 00:05:10,400
so the specific model i checked out

154
00:05:10,400 --> 00:05:12,479
uh is from a common chinese isl tech

155
00:05:12,479 --> 00:05:14,639
supplier that you can find on alibaba

156
00:05:14,639 --> 00:05:16,479
and aliexpress

157
00:05:16,479 --> 00:05:18,400
um it comes with the base station that's

158
00:05:18,400 --> 00:05:20,320
depicted here in the middle

159
00:05:20,320 --> 00:05:22,320
the base station will convert the

160
00:05:22,320 --> 00:05:26,240
ethernet protocol into a 433 from a

161
00:05:26,240 --> 00:05:27,919
megahertz proprietary protocol that the

162
00:05:27,919 --> 00:05:30,000
esl tags will speak

163
00:05:30,000 --> 00:05:31,759
then i adjust my row of testing e-cell

164
00:05:31,759 --> 00:05:34,240
tags laying around and then two hacker

165
00:05:34,240 --> 00:05:37,039
f's one used as a receiver one used as a

166
00:05:37,039 --> 00:05:39,440
transmitter since they have to flex

167
00:05:39,440 --> 00:05:40,800
which are controlled by the attacker in

168
00:05:40,800 --> 00:05:43,280
my case

169
00:05:44,000 --> 00:05:46,479
so whenever you want to change the price

170
00:05:46,479 --> 00:05:47,600
there is a

171
00:05:47,600 --> 00:05:49,199
esl design tool

172
00:05:49,199 --> 00:05:50,720
this tool you would pretty much just

173
00:05:50,720 --> 00:05:53,280
select the size of the display that you

174
00:05:53,280 --> 00:05:54,960
want to change for

175
00:05:54,960 --> 00:05:57,039
and then you can create a pixel graphic

176
00:05:57,039 --> 00:05:59,360
by either writing text or

177
00:05:59,360 --> 00:06:00,960
uploading a picture in this case it's

178
00:06:00,960 --> 00:06:03,840
the hardware logo

179
00:06:03,840 --> 00:06:06,479
then you just have this field where you

180
00:06:06,479 --> 00:06:08,960
write down the tag id so each tag comes

181
00:06:08,960 --> 00:06:10,960
with an own id on it

182
00:06:10,960 --> 00:06:12,880
you add the id there that's the tag that

183
00:06:12,880 --> 00:06:14,240
you will change

184
00:06:14,240 --> 00:06:15,520
and then there's a status box in the

185
00:06:15,520 --> 00:06:16,960
lower right hand corner which will

186
00:06:16,960 --> 00:06:19,039
depict the changes

187
00:06:19,039 --> 00:06:21,440
and the responses from the tag

188
00:06:21,440 --> 00:06:23,840
there's also the net sdk available

189
00:06:23,840 --> 00:06:25,759
from the manufacturer which you can use

190
00:06:25,759 --> 00:06:28,160
to write your own software for this

191
00:06:28,160 --> 00:06:29,520
and there's also a point of sales

192
00:06:29,520 --> 00:06:30,720
integration

193
00:06:30,720 --> 00:06:32,720
so you're actually able to hook this up

194
00:06:32,720 --> 00:06:34,240
right to a cash register and if you

195
00:06:34,240 --> 00:06:35,759
change the price in the cash register it

196
00:06:35,759 --> 00:06:37,840
will reflect right on the price tags in

197
00:06:37,840 --> 00:06:40,239
the store

198
00:06:41,120 --> 00:06:42,880
so let's get to the interesting start

199
00:06:42,880 --> 00:06:44,800
which is the hardware the first thing i

200
00:06:44,800 --> 00:06:46,160
looked at

201
00:06:46,160 --> 00:06:48,720
so here's a close-up of the regular tag

202
00:06:48,720 --> 00:06:50,960
because he is pretty basic it just has a

203
00:06:50,960 --> 00:06:53,680
display in this type it's an ink display

204
00:06:53,680 --> 00:06:56,240
it has a little hole which is an rgb led

205
00:06:56,240 --> 00:06:58,400
and then it has a

206
00:06:58,400 --> 00:07:00,800
code which is just the tag id

207
00:07:00,800 --> 00:07:02,560
stored as a barcode

208
00:07:02,560 --> 00:07:05,199
which you can just read and this is

209
00:07:05,199 --> 00:07:07,039
this id that you will use if you want to

210
00:07:07,039 --> 00:07:09,599
identify the tag that you want to change

211
00:07:09,599 --> 00:07:11,120
so this casing was actually

212
00:07:11,120 --> 00:07:12,960
ultrasonically welded so i had to dremel

213
00:07:12,960 --> 00:07:14,240
it open

214
00:07:14,240 --> 00:07:16,080
but germany open you finally get to the

215
00:07:16,080 --> 00:07:17,680
pcb

216
00:07:17,680 --> 00:07:19,840
you can see again in blue they mark the

217
00:07:19,840 --> 00:07:21,360
rgb led

218
00:07:21,360 --> 00:07:23,520
then in yellow this is the rf

219
00:07:23,520 --> 00:07:25,120
transceiver chip

220
00:07:25,120 --> 00:07:29,520
marked with ov8 0 e934 802

221
00:07:29,520 --> 00:07:31,280
um however we couldn't find any

222
00:07:31,280 --> 00:07:33,680
information for that ship no idea what

223
00:07:33,680 --> 00:07:35,280
it actually is who manufactured this we

224
00:07:35,280 --> 00:07:37,120
couldn't find any markings on it

225
00:07:37,120 --> 00:07:40,160
whatsoever so if anybody knows oh he has

226
00:07:40,160 --> 00:07:43,199
no idea feel free to give me a hint

227
00:07:43,199 --> 00:07:44,879
what it is

228
00:07:44,879 --> 00:07:47,759
then marked in red we have a regular spi

229
00:07:47,759 --> 00:07:50,319
flash memory manufactured by pouya and

230
00:07:50,319 --> 00:07:52,560
then in orange there is the

231
00:07:52,560 --> 00:07:55,680
microcontroller which is labeled etag m1

232
00:07:55,680 --> 00:07:57,360
so also non

233
00:07:57,360 --> 00:07:59,199
off the shelf labeling we didn't know

234
00:07:59,199 --> 00:08:02,080
what this actually is

235
00:08:02,800 --> 00:08:05,520
if you flip the pcb around you'll see an

236
00:08:05,520 --> 00:08:07,120
orange mark the battery connector that's

237
00:08:07,120 --> 00:08:08,560
just where the battery pack will press

238
00:08:08,560 --> 00:08:10,240
against to form the connection it's

239
00:08:10,240 --> 00:08:13,039
powered by a three volt battery cell and

240
00:08:13,039 --> 00:08:15,520
then there's the four pin header which

241
00:08:15,520 --> 00:08:17,120
usually doesn't have anything soldered

242
00:08:17,120 --> 00:08:18,319
to it but

243
00:08:18,319 --> 00:08:20,000
it looked very obvious that this is some

244
00:08:20,000 --> 00:08:22,160
sort of debug access port that we're

245
00:08:22,160 --> 00:08:26,080
gonna look into further later on

246
00:08:26,080 --> 00:08:28,080
so first i started by just dumping the

247
00:08:28,080 --> 00:08:29,759
spi flash memory since this is pretty

248
00:08:29,759 --> 00:08:31,840
easy and straightforward approach

249
00:08:31,840 --> 00:08:34,719
it was a two megabyte storage of flash

250
00:08:34,719 --> 00:08:36,799
and if you start comparing flash dumps

251
00:08:36,799 --> 00:08:39,200
from multiple tags that have different

252
00:08:39,200 --> 00:08:42,000
pictures you know that only one specific

253
00:08:42,000 --> 00:08:44,320
uh address area starts to change and

254
00:08:44,320 --> 00:08:46,160
that's everything that's following

255
00:08:46,160 --> 00:08:49,160
0x13100

256
00:08:49,200 --> 00:08:51,040
so this is obviously where the image

257
00:08:51,040 --> 00:08:53,600
data is being stored

258
00:08:53,600 --> 00:08:56,000
it's depicted as just

259
00:08:56,000 --> 00:08:58,000
an area of ones and zeros you should

260
00:08:58,000 --> 00:09:00,480
start with a the black color channel and

261
00:09:00,480 --> 00:09:01,760
the red color channel because these

262
00:09:01,760 --> 00:09:03,360
displays are actually multi-color they

263
00:09:03,360 --> 00:09:05,760
can display pretty much off

264
00:09:05,760 --> 00:09:09,440
black or red for each pixel

265
00:09:09,440 --> 00:09:12,160
they just start by going in rows so you

266
00:09:12,160 --> 00:09:13,680
just on the upper left hand corner and

267
00:09:13,680 --> 00:09:15,279
just select by rows

268
00:09:15,279 --> 00:09:16,880
where you encode the pixel if one is on

269
00:09:16,880 --> 00:09:19,760
and the zero is off

270
00:09:20,080 --> 00:09:22,560
and the beginning of uh and director of

271
00:09:22,560 --> 00:09:24,240
the python script for this uh which we

272
00:09:24,240 --> 00:09:25,920
will make available later on in the

273
00:09:25,920 --> 00:09:28,320
second site github

274
00:09:28,320 --> 00:09:30,399
uh but the beginning of the flash

275
00:09:30,399 --> 00:09:31,760
contains something else and as you can

276
00:09:31,760 --> 00:09:33,360
clearly see by the entropy it's nothing

277
00:09:33,360 --> 00:09:35,600
that's encrypted it's very likely that

278
00:09:35,600 --> 00:09:37,600
this is actually firmware uh from the

279
00:09:37,600 --> 00:09:39,200
looks of it unfortunately i didn't have

280
00:09:39,200 --> 00:09:41,440
enough time in the end to uh try to

281
00:09:41,440 --> 00:09:44,320
decompile it but i'm fairly certain that

282
00:09:44,320 --> 00:09:46,080
you'll be able to find the correct

283
00:09:46,080 --> 00:09:48,320
firmware there just in the beginning i

284
00:09:48,320 --> 00:09:50,480
didn't have i had the time for it but

285
00:09:50,480 --> 00:09:51,760
then i didn't know the architecture

286
00:09:51,760 --> 00:09:53,440
being used and couldn't figure it out

287
00:09:53,440 --> 00:09:54,640
since it wasn't a standard arm

288
00:09:54,640 --> 00:09:57,040
architecture and then in the end i had

289
00:09:57,040 --> 00:09:58,640
so much other things found that i didn't

290
00:09:58,640 --> 00:10:00,160
have enough time to come back to this

291
00:10:00,160 --> 00:10:02,399
again

292
00:10:02,800 --> 00:10:04,480
so when we looked at the microcontroller

293
00:10:04,480 --> 00:10:06,079
which was labeled the etag m1 and we

294
00:10:06,079 --> 00:10:07,600
couldn't find any information about it i

295
00:10:07,600 --> 00:10:10,079
just start by continuity testing and

296
00:10:10,079 --> 00:10:11,519
trying to figure out

297
00:10:11,519 --> 00:10:13,200
uh the pin out of this microcontroller

298
00:10:13,200 --> 00:10:15,040
so just look what are the different pins

299
00:10:15,040 --> 00:10:17,519
hooked up to on the pcb

300
00:10:17,519 --> 00:10:19,680
so most of them were unknown a couple

301
00:10:19,680 --> 00:10:22,240
were the rf interface a couple with the

302
00:10:22,240 --> 00:10:23,279
display

303
00:10:23,279 --> 00:10:25,760
so a couple were spi

304
00:10:25,760 --> 00:10:27,120
but the very interesting pins are

305
00:10:27,120 --> 00:10:29,760
obviously gnd and vcc

306
00:10:29,760 --> 00:10:31,440
and then the oscillator that was

307
00:10:31,440 --> 00:10:33,360
connected on the board because usually

308
00:10:33,360 --> 00:10:35,519
with those pins you got enough pin

309
00:10:35,519 --> 00:10:37,200
characteristics to try and look at

310
00:10:37,200 --> 00:10:38,640
common uh

311
00:10:38,640 --> 00:10:40,720
commonly used mic controllers and try to

312
00:10:40,720 --> 00:10:42,079
find just one that has a matching pin

313
00:10:42,079 --> 00:10:43,440
node and they'll just be like alright

314
00:10:43,440 --> 00:10:45,200
they're relabeled with microcontroller

315
00:10:45,200 --> 00:10:47,600
and actually some scm device

316
00:10:47,600 --> 00:10:49,200
unfortunately we were not able to find

317
00:10:49,200 --> 00:10:52,160
anything that had a matching pin out

318
00:10:52,160 --> 00:10:55,040
available so this didn't really bring us

319
00:10:55,040 --> 00:10:56,959
any further

320
00:10:56,959 --> 00:10:58,240
what did then

321
00:10:58,240 --> 00:11:00,320
is that we used this chip and boiled in

322
00:11:00,320 --> 00:11:02,959
95 percent concentrated sulfuric acid

323
00:11:02,959 --> 00:11:05,279
and therefore d layer uh

324
00:11:05,279 --> 00:11:07,680
therefore removed the epoxy packaging

325
00:11:07,680 --> 00:11:10,240
and gather a die shot of the picture

326
00:11:10,240 --> 00:11:12,560
after that we cleaned the ic with a

327
00:11:12,560 --> 00:11:15,440
isopropanol just to clean it up nicely

328
00:11:15,440 --> 00:11:18,160
and you can see that some edges chipped

329
00:11:18,160 --> 00:11:20,240
because i tried to get a really nice and

330
00:11:20,240 --> 00:11:22,640
clean picture so i used multiple

331
00:11:22,640 --> 00:11:24,800
rounds of boiling the chip in the acid

332
00:11:24,800 --> 00:11:26,880
and unfortunately i was using metal

333
00:11:26,880 --> 00:11:30,160
tweezers which chip the brittle silicon

334
00:11:30,160 --> 00:11:32,399
so not for myself we use plastic

335
00:11:32,399 --> 00:11:35,440
tweezers next time

336
00:11:36,320 --> 00:11:37,680
but

337
00:11:37,680 --> 00:11:39,040
what we were able to achieve was

338
00:11:39,040 --> 00:11:41,839
actually we found a marking on the die

339
00:11:41,839 --> 00:11:43,920
itself so you can clearly see that the

340
00:11:43,920 --> 00:11:45,600
marking there is from sd micro

341
00:11:45,600 --> 00:11:47,600
electronics so we're looking at the my

342
00:11:47,600 --> 00:11:50,480
sd micro electronic micro controller

343
00:11:50,480 --> 00:11:53,920
produced or designed in 2010 because

344
00:11:53,920 --> 00:11:55,200
that's most likely what this number

345
00:11:55,200 --> 00:11:57,279
stands for there's another internal

346
00:11:57,279 --> 00:11:59,480
number that we couldn't reference the

347
00:11:59,480 --> 00:12:02,000
r758r which might be some sort of

348
00:12:02,000 --> 00:12:04,000
internal sd number that we don't have

349
00:12:04,000 --> 00:12:05,040
access to

350
00:12:05,040 --> 00:12:07,920
but now we are pretty close and

351
00:12:07,920 --> 00:12:09,600
guessing what architecture is being used

352
00:12:09,600 --> 00:12:13,040
because stm is usually stm v8 or stm32

353
00:12:13,040 --> 00:12:15,360
which would be arm

354
00:12:15,360 --> 00:12:17,120
so now we are very limited at what we

355
00:12:17,120 --> 00:12:19,040
could look at

356
00:12:19,040 --> 00:12:21,839
so next i came back to the debug access

357
00:12:21,839 --> 00:12:23,920
on the back so remember those four pins

358
00:12:23,920 --> 00:12:25,600
that we found there

359
00:12:25,600 --> 00:12:27,680
by tracing those we figured out that pin

360
00:12:27,680 --> 00:12:29,839
one of the debug port would go to the

361
00:12:29,839 --> 00:12:32,320
microcontrollers pin 2 pin 2 would go to

362
00:12:32,320 --> 00:12:34,240
ground pin 3 would go to mic controllers

363
00:12:34,240 --> 00:12:36,160
pin 1 pin 4

364
00:12:36,160 --> 00:12:38,639
went to vdd by knowing that we have an

365
00:12:38,639 --> 00:12:41,279
scm device i was now able to just think

366
00:12:41,279 --> 00:12:43,120
in my head oh what could this be

367
00:12:43,120 --> 00:12:46,079
it doesn't really look like jtag so i

368
00:12:46,079 --> 00:12:47,600
remembered that there is a four pin

369
00:12:47,600 --> 00:12:50,720
debug header for the stm v8

370
00:12:50,720 --> 00:12:53,600
and turns out this is the stm v8 swim

371
00:12:53,600 --> 00:12:55,519
debug connector and the printout looks

372
00:12:55,519 --> 00:12:57,680
very very similar and turns out they

373
00:12:57,680 --> 00:12:59,600
just uh changed where they count the pin

374
00:12:59,600 --> 00:13:01,519
one from and marked it on the opposite

375
00:13:01,519 --> 00:13:02,480
side

376
00:13:02,480 --> 00:13:04,160
so actually the pin one on the debug

377
00:13:04,160 --> 00:13:07,279
header is the reset pin and the pin 3 is

378
00:13:07,279 --> 00:13:09,519
the data or swim pin and i was able to

379
00:13:09,519 --> 00:13:11,440
confirm this by sending

380
00:13:11,440 --> 00:13:13,519
a new price update and while the tags

381
00:13:13,519 --> 00:13:15,120
refreshing you'll see we'll see the

382
00:13:15,120 --> 00:13:16,959
display flashing and it just pulls the

383
00:13:16,959 --> 00:13:18,480
reset pin to ground and it stopped

384
00:13:18,480 --> 00:13:20,959
immediately and i removed the bridge to

385
00:13:20,959 --> 00:13:22,720
ground and the text started back up and

386
00:13:22,720 --> 00:13:25,040
the price was finally depicted correctly

387
00:13:25,040 --> 00:13:26,639
so this confirmed that it actually reset

388
00:13:26,639 --> 00:13:29,440
pin being shorted

389
00:13:29,440 --> 00:13:31,839
so to ultimately confirm this i

390
00:13:31,839 --> 00:13:34,160
gained access to the st with using

391
00:13:34,160 --> 00:13:36,480
st-link v2 using the stm8 flash software

392
00:13:36,480 --> 00:13:38,079
that's just using the swim protocol as a

393
00:13:38,079 --> 00:13:40,560
debug interface

394
00:13:40,560 --> 00:13:42,800
however you have to specify what chip to

395
00:13:42,800 --> 00:13:43,680
use

396
00:13:43,680 --> 00:13:45,600
but we still didn't know besides it's

397
00:13:45,600 --> 00:13:47,680
most likely an sdm v8 right now we

398
00:13:47,680 --> 00:13:49,920
didn't know which one or which the exact

399
00:13:49,920 --> 00:13:52,320
model number being used so just decided

400
00:13:52,320 --> 00:13:54,000
to use the largest one because all the

401
00:13:54,000 --> 00:13:56,720
flash and drum and eprom areas always

402
00:13:56,720 --> 00:13:58,880
map the same address

403
00:13:58,880 --> 00:14:00,199
so i use the

404
00:14:00,199 --> 00:14:03,839
stm8s um which has 128 kilobytes of

405
00:14:03,839 --> 00:14:05,199
storage

406
00:14:05,199 --> 00:14:06,240
and i

407
00:14:06,240 --> 00:14:08,959
then just wrote this little command to

408
00:14:08,959 --> 00:14:10,240
dump this area

409
00:14:10,240 --> 00:14:12,959
into a dump file and looked at this in a

410
00:14:12,959 --> 00:14:14,639
hex view

411
00:14:14,639 --> 00:14:17,199
and the hex view indicated that after 64

412
00:14:17,199 --> 00:14:18,480
kilobytes

413
00:14:18,480 --> 00:14:22,079
the readout was changing from 0x71

414
00:14:22,079 --> 00:14:23,360
to just

415
00:14:23,360 --> 00:14:26,079
0x00 so something is changing here most

416
00:14:26,079 --> 00:14:28,160
likely the flash memory

417
00:14:28,160 --> 00:14:30,800
is finished and we have 64 kilobytes of

418
00:14:30,800 --> 00:14:33,279
flash memory only there

419
00:14:33,279 --> 00:14:36,560
and the 0x71 seems to be the default

420
00:14:36,560 --> 00:14:38,959
that's being read if an sdm v8 is

421
00:14:38,959 --> 00:14:41,360
actually with readout protection enabled

422
00:14:41,360 --> 00:14:43,760
so we have readout protection enabled

423
00:14:43,760 --> 00:14:45,360
but we still gained information that we

424
00:14:45,360 --> 00:14:47,760
have an stm v8 using 64 kilobytes of

425
00:14:47,760 --> 00:14:49,440
flash you can do the same approach for

426
00:14:49,440 --> 00:14:51,040
the eprom section and you'll turn out we

427
00:14:51,040 --> 00:14:52,959
have two kilobytes of eprom so now we

428
00:14:52,959 --> 00:14:55,440
know we have an sdm v8 we have 64

429
00:14:55,440 --> 00:14:57,519
kilobytes of flash and 2 kilobytes of

430
00:14:57,519 --> 00:14:59,440
eprom further limiting what options we

431
00:14:59,440 --> 00:15:02,240
have available here

432
00:15:03,040 --> 00:15:05,040
so there wasn't something like a chip id

433
00:15:05,040 --> 00:15:06,720
or something that would tell you

434
00:15:06,720 --> 00:15:08,240
information about what model this chip

435
00:15:08,240 --> 00:15:10,800
is however there is a unique id for the

436
00:15:10,800 --> 00:15:12,720
sdmba series

437
00:15:12,720 --> 00:15:14,720
if you look up the unique id how it's

438
00:15:14,720 --> 00:15:15,680
set up

439
00:15:15,680 --> 00:15:17,360
you will find this table

440
00:15:17,360 --> 00:15:19,040
where pretty much the unique value of

441
00:15:19,040 --> 00:15:21,279
each chip consists of the lot number

442
00:15:21,279 --> 00:15:23,199
that it was produced in the wafer number

443
00:15:23,199 --> 00:15:25,279
and the x and y coordinates of your chip

444
00:15:25,279 --> 00:15:27,360
on the actual wafer and therefore is

445
00:15:27,360 --> 00:15:29,040
unique

446
00:15:29,040 --> 00:15:31,199
so by looking at different at the data

447
00:15:31,199 --> 00:15:32,959
sheets it turns out that there's only a

448
00:15:32,959 --> 00:15:36,000
common common register used in stm v8s

449
00:15:36,000 --> 00:15:38,079
where they store those information this

450
00:15:38,079 --> 00:15:41,319
is 0x4 0x4acd0x4865

451
00:15:41,839 --> 00:15:42,600
and

452
00:15:42,600 --> 00:15:44,320
0x4926

453
00:15:44,320 --> 00:15:46,720
by just reading from these addresses and

454
00:15:46,720 --> 00:15:48,720
figuring out if the data there matches

455
00:15:48,720 --> 00:15:49,920
this table

456
00:15:49,920 --> 00:15:52,000
i was able to find matching data as

457
00:15:52,000 --> 00:15:54,240
0x4926

458
00:15:54,240 --> 00:15:56,480
that would fit the format and hence our

459
00:15:56,480 --> 00:16:01,120
chip actually is from lot number g904379

460
00:16:01,120 --> 00:16:04,000
with wafer number 22 y coordinate 58 and

461
00:16:04,000 --> 00:16:06,560
x coordinate 31.

462
00:16:06,560 --> 00:16:08,320
so this now actually gives us fully

463
00:16:08,320 --> 00:16:10,480
identification of the chip

464
00:16:10,480 --> 00:16:12,560
we unfortunately were not able to tell

465
00:16:12,560 --> 00:16:15,360
what model this now is however st is you

466
00:16:15,360 --> 00:16:17,279
are probably able to use the slot number

467
00:16:17,279 --> 00:16:18,959
to tell us what actually chip was

468
00:16:18,959 --> 00:16:20,959
produced in the slot however they didn't

469
00:16:20,959 --> 00:16:23,519
get back to us with an answer we

470
00:16:23,519 --> 00:16:25,199
requested it

471
00:16:25,199 --> 00:16:27,519
uh in case anybody has good connection

472
00:16:27,519 --> 00:16:29,680
and wants to request it again or has

473
00:16:29,680 --> 00:16:32,240
access to this databases uh i would be

474
00:16:32,240 --> 00:16:34,079
very interested knowing what actually

475
00:16:34,079 --> 00:16:35,680
this is

476
00:16:35,680 --> 00:16:37,839
but we had one other little bit more of

477
00:16:37,839 --> 00:16:40,600
information left because address

478
00:16:40,600 --> 00:16:43,440
0x4926 where we found this information

479
00:16:43,440 --> 00:16:46,320
seems to only be uniquely used by stmv8l

480
00:16:46,320 --> 00:16:48,160
which is a low power series of fcm

481
00:16:48,160 --> 00:16:49,440
devices

482
00:16:49,440 --> 00:16:52,320
so now we know we have an stm8 from the

483
00:16:52,320 --> 00:16:55,040
low power family and can pretty much

484
00:16:55,040 --> 00:16:59,680
um know already enough about this chip

485
00:16:59,839 --> 00:17:01,759
furthermore we did some ocean because we

486
00:17:01,759 --> 00:17:04,000
didn't find any matching

487
00:17:04,000 --> 00:17:06,319
pin outs for this ship so we're thinking

488
00:17:06,319 --> 00:17:09,359
maybe they actually rebound the chip and

489
00:17:09,359 --> 00:17:11,280
and made a custom pin out and that's why

490
00:17:11,280 --> 00:17:12,799
we can't find anything that matches our

491
00:17:12,799 --> 00:17:15,199
pin out that we figured out

492
00:17:15,199 --> 00:17:17,280
so when you order something from alibaba

493
00:17:17,280 --> 00:17:19,039
and the company is large enough on

494
00:17:19,039 --> 00:17:20,480
alibaba

495
00:17:20,480 --> 00:17:22,720
like ours was then it's a alibaba gold

496
00:17:22,720 --> 00:17:24,000
plus supplied

497
00:17:24,000 --> 00:17:25,119
supplier

498
00:17:25,119 --> 00:17:26,959
and alibaba will actually produce an

499
00:17:26,959 --> 00:17:28,640
independent production line assessment

500
00:17:28,640 --> 00:17:31,280
which will tell you what all devices

501
00:17:31,280 --> 00:17:33,600
this company owns and about the state of

502
00:17:33,600 --> 00:17:36,480
it and this report included that an

503
00:17:36,480 --> 00:17:38,320
ultrasonic fuse

504
00:17:38,320 --> 00:17:40,400
so there's two theories now what this is

505
00:17:40,400 --> 00:17:42,080
either this actually is an ultrasonic

506
00:17:42,080 --> 00:17:44,080
wire binder and they do make a custom

507
00:17:44,080 --> 00:17:46,559
wire bond and therefore we can't find

508
00:17:46,559 --> 00:17:48,160
matching pin outs

509
00:17:48,160 --> 00:17:50,799
or the more likely more boring version

510
00:17:50,799 --> 00:17:53,120
of it is the ultrasonic fuse is the

511
00:17:53,120 --> 00:17:54,960
ultrasonic welding machine that's used

512
00:17:54,960 --> 00:17:57,200
to weld down the

513
00:17:57,200 --> 00:17:59,760
casings around the pcb

514
00:17:59,760 --> 00:18:00,559
we

515
00:18:00,559 --> 00:18:03,039
couldn't figure out which exactly it is

516
00:18:03,039 --> 00:18:05,120
unless we actually know the device

517
00:18:05,120 --> 00:18:07,439
number

518
00:18:09,120 --> 00:18:11,360
so the next thing i took a look at was

519
00:18:11,360 --> 00:18:13,039
the rf protocol because obviously if you

520
00:18:13,039 --> 00:18:15,200
want to attack this chip it's a lot more

521
00:18:15,200 --> 00:18:16,559
interesting if you can attack it

522
00:18:16,559 --> 00:18:18,559
remotely for uh through the rf

523
00:18:18,559 --> 00:18:20,799
interfaces

524
00:18:20,799 --> 00:18:23,120
so first i started by looking at the ssc

525
00:18:23,120 --> 00:18:24,480
filings because that's usually where you

526
00:18:24,480 --> 00:18:26,080
start if you have a knife protocol to

527
00:18:26,080 --> 00:18:27,520
look at

528
00:18:27,520 --> 00:18:29,120
so remember that we have the base

529
00:18:29,120 --> 00:18:31,039
station and the tag themselves so we

530
00:18:31,039 --> 00:18:33,679
have two different fcc files for those

531
00:18:33,679 --> 00:18:35,679
and by comparing them you see that the

532
00:18:35,679 --> 00:18:37,360
base station and the tag both are

533
00:18:37,360 --> 00:18:40,480
reported to run at 433.92 megahertz and

534
00:18:40,480 --> 00:18:42,960
only have one channel available

535
00:18:42,960 --> 00:18:44,400
however when you look at the modulation

536
00:18:44,400 --> 00:18:47,120
type marked red here you'll see that the

537
00:18:47,120 --> 00:18:49,200
base station is supposed to have fsk

538
00:18:49,200 --> 00:18:51,200
with a gaussian filter before just to

539
00:18:51,200 --> 00:18:53,039
limit out of band noise

540
00:18:53,039 --> 00:18:55,200
while the esl tag is supposed to have a

541
00:18:55,200 --> 00:18:58,000
use ask which amplitude shift keying and

542
00:18:58,000 --> 00:18:59,520
this doesn't really make sense to me

543
00:18:59,520 --> 00:19:01,280
because why would two devices that

544
00:19:01,280 --> 00:19:02,799
communicate with each other are supposed

545
00:19:02,799 --> 00:19:05,360
to use different modulation

546
00:19:05,360 --> 00:19:07,919
and we still didn't find any reason for

547
00:19:07,919 --> 00:19:08,880
this

548
00:19:08,880 --> 00:19:11,039
because it turns out this is not the

549
00:19:11,039 --> 00:19:12,799
case and there's just some weird things

550
00:19:12,799 --> 00:19:16,400
going on the ftc files here

551
00:19:17,440 --> 00:19:21,200
because the manual is also talking about

552
00:19:21,200 --> 00:19:23,039
anti-jamming frequency hopping

553
00:19:23,039 --> 00:19:24,960
technology being involved this was

554
00:19:24,960 --> 00:19:26,640
however never

555
00:19:26,640 --> 00:19:28,960
seen and also would be clear violation

556
00:19:28,960 --> 00:19:30,559
to the statement that's only using one

557
00:19:30,559 --> 00:19:32,559
channel and uh that the channels fixed

558
00:19:32,559 --> 00:19:34,240
at one frequency

559
00:19:34,240 --> 00:19:36,640
so something is very very fishy about

560
00:19:36,640 --> 00:19:39,840
this fcc filings as well

561
00:19:39,840 --> 00:19:42,000
further intensified when i looked into

562
00:19:42,000 --> 00:19:43,919
the frequency and it turned out it's not

563
00:19:43,919 --> 00:19:46,400
running at 433.92 megahertz but it's

564
00:19:46,400 --> 00:19:47,480
running at

565
00:19:47,480 --> 00:19:50,559
433.254 megahertz so it's also a little

566
00:19:50,559 --> 00:19:53,280
bit offset to where it's supposed to be

567
00:19:53,280 --> 00:19:57,200
very very weird findings here

568
00:19:57,520 --> 00:19:58,720
so then

569
00:19:58,720 --> 00:20:00,480
the first thing i did

570
00:20:00,480 --> 00:20:02,080
to further

571
00:20:02,080 --> 00:20:03,919
figure out if this is vulnerable to any

572
00:20:03,919 --> 00:20:06,960
sort of rf attack was to just run a

573
00:20:06,960 --> 00:20:09,120
replay attack where

574
00:20:09,120 --> 00:20:12,879
i started to um

575
00:20:13,840 --> 00:20:15,760
where started to just record all the rf

576
00:20:15,760 --> 00:20:18,480
traffic while i was changing the text

577
00:20:18,480 --> 00:20:20,720
picture so i changed the price on my

578
00:20:20,720 --> 00:20:23,760
text picture to five dollars

579
00:20:23,760 --> 00:20:26,080
tag shall show up any second here

580
00:20:26,080 --> 00:20:28,000
and you will see that the tag will now

581
00:20:28,000 --> 00:20:29,039
start

582
00:20:29,039 --> 00:20:31,840
to refresh and display the price at this

583
00:20:31,840 --> 00:20:34,240
time i stopped the recording of the rf

584
00:20:34,240 --> 00:20:36,720
samples

585
00:20:36,880 --> 00:20:38,240
and we'll just wait for the price to

586
00:20:38,240 --> 00:20:40,000
disappear finally we have the price of

587
00:20:40,000 --> 00:20:41,919
five dollar set so now i could imagine

588
00:20:41,919 --> 00:20:43,919
it's the next day the store owner

589
00:20:43,919 --> 00:20:45,760
decides this product is now more

590
00:20:45,760 --> 00:20:46,880
expensive

591
00:20:46,880 --> 00:20:48,559
and i want to charge seven dollars for

592
00:20:48,559 --> 00:20:50,400
it so the store owner goes and change

593
00:20:50,400 --> 00:20:52,240
the price to something else for example

594
00:20:52,240 --> 00:20:53,600
the seven dollars

595
00:20:53,600 --> 00:20:55,039
this will always take a little while

596
00:20:55,039 --> 00:20:56,880
because uh you can't change the prices

597
00:20:56,880 --> 00:20:58,480
too fast they need about 30 seconds

598
00:20:58,480 --> 00:21:02,320
before you're able to change them again

599
00:21:02,320 --> 00:21:04,400
as soon as this is sent

600
00:21:04,400 --> 00:21:07,840
it takes just a little while

601
00:21:11,919 --> 00:21:13,919
and the price is being depicted as seven

602
00:21:13,919 --> 00:21:15,440
dollars now on the tag

603
00:21:15,440 --> 00:21:17,760
however we as hackers one don't want to

604
00:21:17,760 --> 00:21:19,679
pay the new seven dollars and remember

605
00:21:19,679 --> 00:21:21,760
that we have still samples collected of

606
00:21:21,760 --> 00:21:23,760
the image that was transmitted for five

607
00:21:23,760 --> 00:21:26,320
dollar price so we think hey what could

608
00:21:26,320 --> 00:21:27,919
be the easiest way to change this back

609
00:21:27,919 --> 00:21:29,679
is we just transmit all the f samples we

610
00:21:29,679 --> 00:21:31,520
copied from the five dollar price and

611
00:21:31,520 --> 00:21:33,600
replayed it with just being an image uh

612
00:21:33,600 --> 00:21:35,760
being sent without any further measures

613
00:21:35,760 --> 00:21:37,280
then this should just work out of the

614
00:21:37,280 --> 00:21:40,080
box so all we do is change the parameter

615
00:21:40,080 --> 00:21:41,600
to transmit

616
00:21:41,600 --> 00:21:45,360
send the rf frames

617
00:21:45,360 --> 00:21:48,080
and we see

618
00:21:56,000 --> 00:21:57,280
and we see that the price is being

619
00:21:57,280 --> 00:22:00,400
changed back to five dollars without

620
00:22:00,400 --> 00:22:03,760
any usage of the original software or

621
00:22:03,760 --> 00:22:06,559
the base station

622
00:22:07,440 --> 00:22:09,679
so this indicates that actually replay

623
00:22:09,679 --> 00:22:11,600
attacks are possible and there's no

624
00:22:11,600 --> 00:22:13,840
elaborate security scheme in place that

625
00:22:13,840 --> 00:22:16,559
will prevent this

626
00:22:19,600 --> 00:22:21,919
so in order to look

627
00:22:21,919 --> 00:22:24,000
so this caused me to go deeper into the

628
00:22:24,000 --> 00:22:26,159
protocol and figure out how this

629
00:22:26,159 --> 00:22:28,320
protocol actually works

630
00:22:28,320 --> 00:22:30,080
since already everything else was wrong

631
00:22:30,080 --> 00:22:31,600
in the fcc files

632
00:22:31,600 --> 00:22:33,520
i always and there was this weird clash

633
00:22:33,520 --> 00:22:35,600
of the right modulation schemes i

634
00:22:35,600 --> 00:22:37,039
decided to just look at it from scratch

635
00:22:37,039 --> 00:22:40,080
again so this is a waveform display on

636
00:22:40,080 --> 00:22:43,440
the y-axis you have the frequency

637
00:22:43,440 --> 00:22:45,280
on the x-axis of the time so clearly you

638
00:22:45,280 --> 00:22:46,799
can see multiple packets being

639
00:22:46,799 --> 00:22:48,240
transmitted here

640
00:22:48,240 --> 00:22:50,400
and the color then encodes the intensity

641
00:22:50,400 --> 00:22:52,480
or the amplitude of the signal

642
00:22:52,480 --> 00:22:53,919
and as you can clearly see you have

643
00:22:53,919 --> 00:22:55,360
those red lines

644
00:22:55,360 --> 00:22:57,600
one at zero but you also have a red line

645
00:22:57,600 --> 00:22:59,200
at a negative offset and one of the

646
00:22:59,200 --> 00:23:01,520
positive offset which just indicates

647
00:23:01,520 --> 00:23:03,840
that it is fsk being used and that's a

648
00:23:03,840 --> 00:23:06,000
frequency shift modulation

649
00:23:06,000 --> 00:23:08,799
uh in place here

650
00:23:08,799 --> 00:23:11,440
so i then use the tool in spectrum to

651
00:23:11,440 --> 00:23:13,039
further look into the signal because it

652
00:23:13,039 --> 00:23:14,559
allows you to manually decode those

653
00:23:14,559 --> 00:23:16,640
frames when you have no idea about the

654
00:23:16,640 --> 00:23:18,799
signal what's going on and it was very

655
00:23:18,799 --> 00:23:20,480
convenient to use actually

656
00:23:20,480 --> 00:23:23,120
so when you have the fft plot up there

657
00:23:23,120 --> 00:23:25,120
you can just right click into there and

658
00:23:25,120 --> 00:23:27,200
add a drive plot in this example since

659
00:23:27,200 --> 00:23:30,480
it's an fsk scheme i decided to

660
00:23:30,480 --> 00:23:33,200
add a frequency derived plot which is

661
00:23:33,200 --> 00:23:35,840
this medium plot

662
00:23:35,840 --> 00:23:37,600
and then you can right click into that

663
00:23:37,600 --> 00:23:39,280
again add another derived plot which

664
00:23:39,280 --> 00:23:40,960
will just be everything that's going

665
00:23:40,960 --> 00:23:42,640
below zero is a zero everything above

666
00:23:42,640 --> 00:23:44,640
zero is a one which then gives you a

667
00:23:44,640 --> 00:23:46,960
final plot back of ones and zeros with

668
00:23:46,960 --> 00:23:48,240
just a

669
00:23:48,240 --> 00:23:50,320
regular bit stream that you can use to

670
00:23:50,320 --> 00:23:52,159
decode information

671
00:23:52,159 --> 00:23:54,080
you can then also just add those cursors

672
00:23:54,080 --> 00:23:55,360
which are very convenient because you

673
00:23:55,360 --> 00:23:57,360
just mark one sample time with the

674
00:23:57,360 --> 00:24:00,480
cursor um and the sample will always be

675
00:24:00,480 --> 00:24:02,000
taken right in between both of these

676
00:24:02,000 --> 00:24:03,200
cursors

677
00:24:03,200 --> 00:24:05,279
so once you mark once a full symbol

678
00:24:05,279 --> 00:24:07,200
period you can just increase the amount

679
00:24:07,200 --> 00:24:09,440
of samples you want in my case for this

680
00:24:09,440 --> 00:24:12,880
frame it was 184 symbols in here so then

681
00:24:12,880 --> 00:24:14,400
a bunch of cursors is being added you

682
00:24:14,400 --> 00:24:15,840
can just right click in there again and

683
00:24:15,840 --> 00:24:18,080
copy the right bit stream convert it to

684
00:24:18,080 --> 00:24:18,799
hex

685
00:24:18,799 --> 00:24:21,279
values and suddenly you have your hex

686
00:24:21,279 --> 00:24:22,880
button stream that you can use for

687
00:24:22,880 --> 00:24:24,799
further analyzers

688
00:24:24,799 --> 00:24:27,039
i did this for a couple frames just to

689
00:24:27,039 --> 00:24:29,200
get a feeling for the different type of

690
00:24:29,200 --> 00:24:30,320
frames

691
00:24:30,320 --> 00:24:32,720
and came up with three distinct frame

692
00:24:32,720 --> 00:24:34,000
types that are available in this

693
00:24:34,000 --> 00:24:35,200
protocol

694
00:24:35,200 --> 00:24:36,640
the first one is the wake up frame

695
00:24:36,640 --> 00:24:38,320
that's being used from the base station

696
00:24:38,320 --> 00:24:40,320
to wake up the tag

697
00:24:40,320 --> 00:24:42,240
uh since attack usually is a low powered

698
00:24:42,240 --> 00:24:44,480
state where it's sleeping but then it

699
00:24:44,480 --> 00:24:46,400
will wake up randomly listen to the

700
00:24:46,400 --> 00:24:48,000
channel and if it finds a valid attack

701
00:24:48,000 --> 00:24:49,520
for himself it will stay awake and

702
00:24:49,520 --> 00:24:51,520
actually wait for the image data so base

703
00:24:51,520 --> 00:24:53,200
stations start spamming about four and a

704
00:24:53,200 --> 00:24:54,960
half thousand frames in the beginning in

705
00:24:54,960 --> 00:24:55,600
the

706
00:24:55,600 --> 00:24:58,240
first like 30 seconds

707
00:24:58,240 --> 00:25:00,480
where um that are used to wake up the

708
00:25:00,480 --> 00:25:02,799
frame those are transmitted at 175

709
00:25:02,799 --> 00:25:04,080
kiloboard

710
00:25:04,080 --> 00:25:05,840
and consists of a preamble which does

711
00:25:05,840 --> 00:25:08,640
aas so it's a one zero one zero one zero

712
00:25:08,640 --> 00:25:10,799
one zero pattern and so on uh you use

713
00:25:10,799 --> 00:25:12,480
that for timing recovery actually

714
00:25:12,480 --> 00:25:14,960
because your systems are not

715
00:25:14,960 --> 00:25:17,120
timed correctly to each other

716
00:25:17,120 --> 00:25:18,559
you then have a sync header which in

717
00:25:18,559 --> 00:25:22,080
this case is d391 d391 you use that to

718
00:25:22,080 --> 00:25:23,440
determine that the frame is correct and

719
00:25:23,440 --> 00:25:25,440
you know where to start it then follows

720
00:25:25,440 --> 00:25:27,120
the frame length that does actually not

721
00:25:27,120 --> 00:25:29,120
include the crc at the end so you always

722
00:25:29,120 --> 00:25:31,200
have to add the two bytes for the crc to

723
00:25:31,200 --> 00:25:33,120
the frame length

724
00:25:33,120 --> 00:25:34,799
then you have the tag id which is the

725
00:25:34,799 --> 00:25:36,960
number that's printed on the casing of

726
00:25:36,960 --> 00:25:38,880
the tag that's used to identify the

727
00:25:38,880 --> 00:25:40,000
right one

728
00:25:40,000 --> 00:25:42,000
uh some fixed value that i never seen

729
00:25:42,000 --> 00:25:43,760
anything else besides the zero zero in

730
00:25:43,760 --> 00:25:44,640
it

731
00:25:44,640 --> 00:25:46,240
and then you just have a frame counter

732
00:25:46,240 --> 00:25:48,720
this is the 920 in hex and it will just

733
00:25:48,720 --> 00:25:51,039
count down with each frame

734
00:25:51,039 --> 00:25:52,799
then another fixed value and the end is

735
00:25:52,799 --> 00:25:54,400
crc16

736
00:25:54,400 --> 00:25:58,000
for error correction reasons

737
00:25:58,000 --> 00:26:00,000
so spamming this tag will actually wake

738
00:26:00,000 --> 00:26:03,360
up the frame later on

739
00:26:03,440 --> 00:26:05,760
after the tag wakes up we'll transmit

740
00:26:05,760 --> 00:26:07,520
the image data

741
00:26:07,520 --> 00:26:09,520
the image data frame is looking very

742
00:26:09,520 --> 00:26:11,919
very similar to the wake up frame in

743
00:26:11,919 --> 00:26:13,440
that you have the same preamble the same

744
00:26:13,440 --> 00:26:16,240
sync header the frame length the tag id

745
00:26:16,240 --> 00:26:17,919
but then the next new field is the frame

746
00:26:17,919 --> 00:26:20,080
counter so the zero nine zero one

747
00:26:20,080 --> 00:26:22,159
actually stands for you'll send nine

748
00:26:22,159 --> 00:26:24,640
total frames this one is currently frame

749
00:26:24,640 --> 00:26:26,480
one out of the nine

750
00:26:26,480 --> 00:26:28,400
then you have a fixed value and then the

751
00:26:28,400 --> 00:26:30,640
payload field the payload can hold up to

752
00:26:30,640 --> 00:26:31,760
54

753
00:26:31,760 --> 00:26:32,880
bytes

754
00:26:32,880 --> 00:26:34,640
and everything else after that will be

755
00:26:34,640 --> 00:26:36,559
sent in a new separate frame and then

756
00:26:36,559 --> 00:26:40,240
the end here of the crc again

757
00:26:41,279 --> 00:26:43,919
however how i can imagine if you have

758
00:26:43,919 --> 00:26:46,559
this larger seven inch one or ten inch

759
00:26:46,559 --> 00:26:47,440
one

760
00:26:47,440 --> 00:26:50,080
uh a hundred for 256

761
00:26:50,080 --> 00:26:52,480
frames will not be able to hold all the

762
00:26:52,480 --> 00:26:54,559
pixel information in here

763
00:26:54,559 --> 00:26:56,240
so that's why there is some weird

764
00:26:56,240 --> 00:26:58,799
patched on adjustment for this

765
00:26:58,799 --> 00:27:01,360
where they just decided to

766
00:27:01,360 --> 00:27:04,640
use the frame counter full 16 bit in the

767
00:27:04,640 --> 00:27:06,720
first frame to indicate how many frames

768
00:27:06,720 --> 00:27:08,880
are totally going to send and then they

769
00:27:08,880 --> 00:27:10,960
just start counting up starting with the

770
00:27:10,960 --> 00:27:13,360
second frame at id 0 and just start

771
00:27:13,360 --> 00:27:15,279
counting up from there until the first

772
00:27:15,279 --> 00:27:17,360
value that they transmitted so kind of

773
00:27:17,360 --> 00:27:19,600
really bold on adjustment to allow for

774
00:27:19,600 --> 00:27:21,520
larger text sizes that they probably

775
00:27:21,520 --> 00:27:23,679
added later after protocol was already

776
00:27:23,679 --> 00:27:25,919
done

777
00:27:27,760 --> 00:27:29,360
so in the payload fields there's

778
00:27:29,360 --> 00:27:32,559
actually the image data being sent

779
00:27:32,559 --> 00:27:33,279
so

780
00:27:33,279 --> 00:27:35,520
the image data structure actually starts

781
00:27:35,520 --> 00:27:38,559
with uh some additional headers

782
00:27:38,559 --> 00:27:40,240
so you remember that there is an led on

783
00:27:40,240 --> 00:27:42,720
the tag so the first image structure

784
00:27:42,720 --> 00:27:45,279
starts with the led the zero seven zero

785
00:27:45,279 --> 00:27:47,279
zero for example turns off the led while

786
00:27:47,279 --> 00:27:49,440
the zero seven zero seven turns on the

787
00:27:49,440 --> 00:27:52,000
led so most likely a one is just

788
00:27:52,000 --> 00:27:54,399
enabling one color channel because uh

789
00:27:54,399 --> 00:27:56,640
zero seven turned it to white so it's

790
00:27:56,640 --> 00:27:59,279
probably one bit per um color channel

791
00:27:59,279 --> 00:28:00,159
here

792
00:28:00,159 --> 00:28:01,520
you have a batch code because there's

793
00:28:01,520 --> 00:28:03,039
like a batch mode where you can update

794
00:28:03,039 --> 00:28:05,360
multiple texts at once they just always

795
00:28:05,360 --> 00:28:06,880
will have the same batch code set for

796
00:28:06,880 --> 00:28:08,559
all of those

797
00:28:08,559 --> 00:28:10,799
uh the led time is just a timer because

798
00:28:10,799 --> 00:28:12,240
you can make the led blink and this is

799
00:28:12,240 --> 00:28:14,559
just the time interval to use default i

800
00:28:14,559 --> 00:28:16,640
think is one second

801
00:28:16,640 --> 00:28:18,399
and then there's a compression header

802
00:28:18,399 --> 00:28:20,480
where the fc and then all zeros

803
00:28:20,480 --> 00:28:22,080
indicates a black color channel and the

804
00:28:22,080 --> 00:28:24,159
fc8 and then all zeros indicates the red

805
00:28:24,159 --> 00:28:25,760
color channel because remember that our

806
00:28:25,760 --> 00:28:28,240
displays are actually e ink displays but

807
00:28:28,240 --> 00:28:29,919
with multiple color supports so black

808
00:28:29,919 --> 00:28:32,960
and red are possible

809
00:28:33,120 --> 00:28:34,960
after the compression header

810
00:28:34,960 --> 00:28:37,120
or like a color channel header

811
00:28:37,120 --> 00:28:38,320
we'll have the display height and

812
00:28:38,320 --> 00:28:40,799
display width and then actually the

813
00:28:40,799 --> 00:28:44,240
image payload data

814
00:28:44,240 --> 00:28:46,480
however when i looked at these

815
00:28:46,480 --> 00:28:48,240
samples that i had

816
00:28:48,240 --> 00:28:50,320
it turned quickly out that way too

817
00:28:50,320 --> 00:28:52,000
little data is being transmitted

818
00:28:52,000 --> 00:28:54,240
especially for the larger displays

819
00:28:54,240 --> 00:28:55,679
especially since we know that three

820
00:28:55,679 --> 00:28:57,360
colors are supported we know that we

821
00:28:57,360 --> 00:28:59,600
need at least two bits per pixel to

822
00:28:59,600 --> 00:29:01,520
encode this information

823
00:29:01,520 --> 00:29:04,399
uh in the storage it was just one a one

824
00:29:04,399 --> 00:29:06,159
to turn the pixel on and a zero to turn

825
00:29:06,159 --> 00:29:08,080
it off however this didn't seem to hold

826
00:29:08,080 --> 00:29:09,440
true because the

827
00:29:09,440 --> 00:29:11,679
actual image payload was way too little

828
00:29:11,679 --> 00:29:14,480
so some compression was being used

829
00:29:14,480 --> 00:29:16,000
it turned out to not be a standard

830
00:29:16,000 --> 00:29:18,320
compression algorithm like a gzip one or

831
00:29:18,320 --> 00:29:19,600
something else

832
00:29:19,600 --> 00:29:20,399
so

833
00:29:20,399 --> 00:29:22,080
the quickest way into this was to

834
00:29:22,080 --> 00:29:24,159
download the net sdk and just have a

835
00:29:24,159 --> 00:29:25,760
look into the net

836
00:29:25,760 --> 00:29:28,720
files and figure out how they start to

837
00:29:28,720 --> 00:29:30,720
compress the image data

838
00:29:30,720 --> 00:29:32,480
and it turns out that it's a very basic

839
00:29:32,480 --> 00:29:35,440
run length encoding per color channel

840
00:29:35,440 --> 00:29:37,360
so pretty much if your image consists of

841
00:29:37,360 --> 00:29:39,840
a lot of ones for one color

842
00:29:39,840 --> 00:29:42,559
if it's less than eight ones in a row

843
00:29:42,559 --> 00:29:44,720
you'll just have the first case of your

844
00:29:44,720 --> 00:29:47,440
image data structure where the first one

845
00:29:47,440 --> 00:29:50,080
and the msb will indicate this case one

846
00:29:50,080 --> 00:29:52,480
and then you'll just have the seven

847
00:29:52,480 --> 00:29:55,440
bits depending on if you run

848
00:29:55,440 --> 00:29:57,600
in case two it's if you have less than

849
00:29:57,600 --> 00:30:00,960
uh 32 consecutive bits so you start with

850
00:30:00,960 --> 00:30:02,799
indicating case two by having a zero in

851
00:30:02,799 --> 00:30:03,919
the msb

852
00:30:03,919 --> 00:30:06,320
then you have one bit that will say if

853
00:30:06,320 --> 00:30:08,720
it's a run of once or a run of zeros and

854
00:30:08,720 --> 00:30:10,720
then just the count so up here we could

855
00:30:10,720 --> 00:30:12,799
have for example 20 encode lower six

856
00:30:12,799 --> 00:30:15,200
bits to say we have twenty ones or

857
00:30:15,200 --> 00:30:17,679
twenty zeros in one row coming

858
00:30:17,679 --> 00:30:19,279
case three is kind of similar to this

859
00:30:19,279 --> 00:30:21,279
again we indicate that case three we

860
00:30:21,279 --> 00:30:22,960
indicate if it's a run of ones or run of

861
00:30:22,960 --> 00:30:25,520
zeros and then we just add one byte to

862
00:30:25,520 --> 00:30:27,360
the whole payload where the whole last

863
00:30:27,360 --> 00:30:29,200
byte will indicate how many times this

864
00:30:29,200 --> 00:30:30,399
is repeated

865
00:30:30,399 --> 00:30:32,799
same holds up for case four case four is

866
00:30:32,799 --> 00:30:34,480
marked again we'll indicate if it's a

867
00:30:34,480 --> 00:30:36,480
run of ones or a run of zeros and then

868
00:30:36,480 --> 00:30:39,120
we have two bytes added where both bytes

869
00:30:39,120 --> 00:30:41,919
together will indicate if it's

870
00:30:41,919 --> 00:30:44,159
how many times this one or zero is being

871
00:30:44,159 --> 00:30:45,760
repeated in the image

872
00:30:45,760 --> 00:30:47,520
therefore we can compress especially

873
00:30:47,520 --> 00:30:50,960
images like this with just uh two lines

874
00:30:50,960 --> 00:30:53,440
very much down into very little bits

875
00:30:53,440 --> 00:30:54,240
and

876
00:30:54,240 --> 00:30:56,960
that's the reason for the very limited

877
00:30:56,960 --> 00:30:59,760
data payloads

878
00:31:00,000 --> 00:31:02,000
so the tags actually also respond to

879
00:31:02,000 --> 00:31:05,440
data which is also gfsk

880
00:31:05,440 --> 00:31:07,039
and the tag response contains some

881
00:31:07,039 --> 00:31:08,640
interesting information

882
00:31:08,640 --> 00:31:10,640
they're repeated three times each so

883
00:31:10,640 --> 00:31:12,799
that the base station definitely hears

884
00:31:12,799 --> 00:31:14,559
one of them as some form of error

885
00:31:14,559 --> 00:31:16,000
correction

886
00:31:16,000 --> 00:31:17,679
has the same

887
00:31:17,679 --> 00:31:20,320
structure again of the the sync header

888
00:31:20,320 --> 00:31:22,720
and the frame length tag id and then it

889
00:31:22,720 --> 00:31:24,880
will report its battery voltage which is

890
00:31:24,880 --> 00:31:26,080
actually just the battery voltage

891
00:31:26,080 --> 00:31:27,760
multiplied by 10.

892
00:31:27,760 --> 00:31:29,760
uh an rssi value where i really didn't

893
00:31:29,760 --> 00:31:31,679
understand how it's being calculated of

894
00:31:31,679 --> 00:31:34,159
those two bytes that are being sent

895
00:31:34,159 --> 00:31:35,840
and then the ambient temperature which

896
00:31:35,840 --> 00:31:37,840
is also just multiplied by 10 in order

897
00:31:37,840 --> 00:31:41,039
to encode it correctly

898
00:31:41,360 --> 00:31:43,279
so i then thought let's build a new

899
00:31:43,279 --> 00:31:45,600
radio flowchart for this and i'm by no

900
00:31:45,600 --> 00:31:47,519
means an f engineer i just had some

901
00:31:47,519 --> 00:31:49,279
classes in university about this so i

902
00:31:49,279 --> 00:31:51,360
decided would be fun to do and a lot

903
00:31:51,360 --> 00:31:53,600
better than manually encoding all these

904
00:31:53,600 --> 00:31:54,559
frames

905
00:31:54,559 --> 00:31:56,080
all the time

906
00:31:56,080 --> 00:31:58,240
so the float chart

907
00:31:58,240 --> 00:32:00,000
will actually just start with the hacker

908
00:32:00,000 --> 00:32:03,200
f uh being used as a source i then uh

909
00:32:03,200 --> 00:32:05,600
decimated the sample rate

910
00:32:05,600 --> 00:32:07,919
uh or i was able to shift it with this

911
00:32:07,919 --> 00:32:08,880
block

912
00:32:08,880 --> 00:32:10,320
after that i have a low pass filter to

913
00:32:10,320 --> 00:32:11,840
filter out some of the noise i was

914
00:32:11,840 --> 00:32:13,120
receiving

915
00:32:13,120 --> 00:32:15,279
a correlation estimator to to match the

916
00:32:15,279 --> 00:32:18,240
preamble the zero one zero ones

917
00:32:18,240 --> 00:32:20,559
and then i use the creditor d mod block

918
00:32:20,559 --> 00:32:22,720
to demodulate

919
00:32:22,720 --> 00:32:23,919
the signal

920
00:32:23,919 --> 00:32:26,159
the signal then is samples that are

921
00:32:26,159 --> 00:32:27,519
between

922
00:32:27,519 --> 00:32:30,880
minus one and uh negative one and one

923
00:32:30,880 --> 00:32:32,480
however the the gartner timing

924
00:32:32,480 --> 00:32:34,159
correction needed them to be either

925
00:32:34,159 --> 00:32:37,039
really zero one negative one or one

926
00:32:37,039 --> 00:32:39,120
therefore i use this threshold block

927
00:32:39,120 --> 00:32:40,799
which shifts them again between zero and

928
00:32:40,799 --> 00:32:43,440
one and then just uh some weird magic of

929
00:32:43,440 --> 00:32:45,360
adding constant and uh

930
00:32:45,360 --> 00:32:48,000
multiplying to shift them back to either

931
00:32:48,000 --> 00:32:49,600
negative one or one

932
00:32:49,600 --> 00:32:51,200
then i did some timing correction in

933
00:32:51,200 --> 00:32:52,399
case the

934
00:32:52,399 --> 00:32:54,399
higher qrf is not really synchronized in

935
00:32:54,399 --> 00:32:56,320
time

936
00:32:56,320 --> 00:32:58,320
the output of this is fed into the

937
00:32:58,320 --> 00:33:00,000
binary slicer which will

938
00:33:00,000 --> 00:33:02,080
make a byte stream out of this and then

939
00:33:02,080 --> 00:33:03,519
there's the packaging framework block

940
00:33:03,519 --> 00:33:05,120
which i found on github and just ported

941
00:33:05,120 --> 00:33:08,240
to the newer radio version

942
00:33:08,240 --> 00:33:10,000
the packet reframer block then listens

943
00:33:10,000 --> 00:33:13,279
for the d309 uh the 309 is in the

944
00:33:13,279 --> 00:33:14,559
beginning

945
00:33:14,559 --> 00:33:17,360
we'll find the length field

946
00:33:17,360 --> 00:33:19,120
and then just uh

947
00:33:19,120 --> 00:33:21,519
carve a packet out of this and send it

948
00:33:21,519 --> 00:33:24,080
on actually to a udp client so i could

949
00:33:24,080 --> 00:33:25,679
just use regular python and have my

950
00:33:25,679 --> 00:33:29,200
co-workers work with me on this one

951
00:33:30,320 --> 00:33:32,320
so i then developed a python script

952
00:33:32,320 --> 00:33:34,720
that's actually able to decode every

953
00:33:34,720 --> 00:33:37,600
picture i send here

954
00:33:37,600 --> 00:33:39,360
the python script is being run in the

955
00:33:39,360 --> 00:33:41,440
lower hand window and the upend window

956
00:33:41,440 --> 00:33:43,679
will be the new radio script running and

957
00:33:43,679 --> 00:33:45,279
the right hand side you see the regular

958
00:33:45,279 --> 00:33:48,000
store owner just sending a picture

959
00:33:48,000 --> 00:33:51,039
so running this whole sketch

960
00:33:51,039 --> 00:33:53,200
we'll take a little because

961
00:33:53,200 --> 00:33:55,679
the wake up frames are being sent first

962
00:33:55,679 --> 00:33:57,200
for the first 30 seconds so this will

963
00:33:57,200 --> 00:33:59,039
take a little bit

964
00:33:59,039 --> 00:34:00,720
until the tank wakes up

965
00:34:00,720 --> 00:34:02,960
and until the baud rate has changed the

966
00:34:02,960 --> 00:34:04,799
100 kilobar that my sketch is running at

967
00:34:04,799 --> 00:34:06,720
but now we see all the images

968
00:34:06,720 --> 00:34:08,719
all the frames are being received and

969
00:34:08,719 --> 00:34:10,079
actually i'm able to render the picture

970
00:34:10,079 --> 00:34:14,000
perfectly that's being sent to the tag

971
00:34:15,199 --> 00:34:16,079
so

972
00:34:16,079 --> 00:34:18,839
receiving data is

973
00:34:18,839 --> 00:34:21,359
fun but what's even better is now that

974
00:34:21,359 --> 00:34:22,879
we're able to send all the data with new

975
00:34:22,879 --> 00:34:25,599
radio and create our own tags without

976
00:34:25,599 --> 00:34:27,679
any access to those interfaces

977
00:34:27,679 --> 00:34:29,040
in order to make this possible the

978
00:34:29,040 --> 00:34:30,800
hardest thing to come around was the

979
00:34:30,800 --> 00:34:32,079
wake up

980
00:34:32,079 --> 00:34:33,359
and

981
00:34:33,359 --> 00:34:35,280
to the two different modulators the two

982
00:34:35,280 --> 00:34:36,879
different baud rates because the wake up

983
00:34:36,879 --> 00:34:39,280
is running at 175 kilowatt while the

984
00:34:39,280 --> 00:34:41,599
image data and the responses are run at

985
00:34:41,599 --> 00:34:43,359
100 kilo board

986
00:34:43,359 --> 00:34:46,159
so i wrote my own source block you'll

987
00:34:46,159 --> 00:34:48,079
just feed an image into it tell us the

988
00:34:48,079 --> 00:34:49,520
display size that you want to use

989
00:34:49,520 --> 00:34:50,719
because the image is being scaled to the

990
00:34:50,719 --> 00:34:52,480
right display size

991
00:34:52,480 --> 00:34:54,719
um you give it a sample rate that would

992
00:34:54,719 --> 00:34:55,839
work

993
00:34:55,839 --> 00:34:57,920
the best is if it's an

994
00:34:57,920 --> 00:35:01,040
if it's divisible by both of the baud

995
00:35:01,040 --> 00:35:03,680
rates so in my case 2.1 mega samples

996
00:35:03,680 --> 00:35:04,960
work great

997
00:35:04,960 --> 00:35:06,160
and you just give

998
00:35:06,160 --> 00:35:07,839
the tag id

999
00:35:07,839 --> 00:35:09,200
and it will then take care of

1000
00:35:09,200 --> 00:35:11,359
interpolating or the signal

1001
00:35:11,359 --> 00:35:13,440
correctly so that um

1002
00:35:13,440 --> 00:35:15,200
you won't have a baud rate of 175

1003
00:35:15,200 --> 00:35:18,240
kiloboard for the wake up and 100 killer

1004
00:35:18,240 --> 00:35:20,000
board for the

1005
00:35:20,000 --> 00:35:21,680
regular image data

1006
00:35:21,680 --> 00:35:24,000
then i have an interpolating fir filter

1007
00:35:24,000 --> 00:35:26,640
which does the gaussian filter here to

1008
00:35:26,640 --> 00:35:28,000
limit the out of band noise you don't

1009
00:35:28,000 --> 00:35:29,119
actually have to use it you can

1010
00:35:29,119 --> 00:35:30,640
deactivate it in case your computer

1011
00:35:30,640 --> 00:35:32,400
can't handle too much uh calculation

1012
00:35:32,400 --> 00:35:33,920
power anymore

1013
00:35:33,920 --> 00:35:35,440
after that you have the frequency mod

1014
00:35:35,440 --> 00:35:36,400
block

1015
00:35:36,400 --> 00:35:38,880
which will uh just do the fsk modulation

1016
00:35:38,880 --> 00:35:40,800
radio and then you just feed that out to

1017
00:35:40,800 --> 00:35:44,920
the hackerf to send it

1018
00:35:46,160 --> 00:35:47,280
so

1019
00:35:47,280 --> 00:35:49,839
running this

1020
00:35:53,200 --> 00:35:54,720
you'll see that first all the wake up

1021
00:35:54,720 --> 00:35:56,400
frames are being generated then all the

1022
00:35:56,400 --> 00:35:58,400
image frames are being generated

1023
00:35:58,400 --> 00:35:59,920
and they're being sent now and now you

1024
00:35:59,920 --> 00:36:01,760
should see on the multimeter the tag is

1025
00:36:01,760 --> 00:36:05,440
turning on and starts to take power

1026
00:36:09,599 --> 00:36:13,119
and now the tag should refresh and shows

1027
00:36:13,119 --> 00:36:16,160
our customer logo

1028
00:36:21,119 --> 00:36:24,240
and after the logo is finally applied

1029
00:36:24,240 --> 00:36:27,839
the tag will power back down

1030
00:36:39,119 --> 00:36:42,079
right so to conclude we were

1031
00:36:42,079 --> 00:36:43,760
able to identify the unknown

1032
00:36:43,760 --> 00:36:45,920
microcontroller we gained access to the

1033
00:36:45,920 --> 00:36:48,160
debug uh port on the back

1034
00:36:48,160 --> 00:36:49,359
we confirmed that the replay

1035
00:36:49,359 --> 00:36:51,760
vulnerability is available and doesn't

1036
00:36:51,760 --> 00:36:53,520
make sense to dive deeper into the

1037
00:36:53,520 --> 00:36:55,359
actual protocol i then reverse

1038
00:36:55,359 --> 00:36:56,960
engineered the if protocol and gain the

1039
00:36:56,960 --> 00:36:58,400
ability to send and receive correct

1040
00:36:58,400 --> 00:37:00,000
frames by generating the right csc

1041
00:37:00,000 --> 00:37:02,160
checksums

1042
00:37:02,160 --> 00:37:04,079
whether then able to

1043
00:37:04,079 --> 00:37:06,000
receive and decode the esl price updates

1044
00:37:06,000 --> 00:37:08,160
and display them we are able to change

1045
00:37:08,160 --> 00:37:10,000
the tag contents now

1046
00:37:10,000 --> 00:37:11,680
to arbitrary information and the kind of

1047
00:37:11,680 --> 00:37:13,760
interesting part about this is as well

1048
00:37:13,760 --> 00:37:15,359
that the range theoretically is only

1049
00:37:15,359 --> 00:37:17,520
limited by rf power so you might be able

1050
00:37:17,520 --> 00:37:19,280
to stand pretty far away from the actual

1051
00:37:19,280 --> 00:37:21,440
attack and send it because you are not

1052
00:37:21,440 --> 00:37:23,599
depending on any response from the tag

1053
00:37:23,599 --> 00:37:25,200
the tag only needs to be able to hear

1054
00:37:25,200 --> 00:37:27,520
you to change it so

1055
00:37:27,520 --> 00:37:29,359
if we don't care about any regulations

1056
00:37:29,359 --> 00:37:31,680
and pump just a bunch of if power out

1057
00:37:31,680 --> 00:37:33,920
we're able to probably stand uh further

1058
00:37:33,920 --> 00:37:37,760
away from the store as we want

1059
00:37:37,760 --> 00:37:40,160
so lessons learned here is the protocol

1060
00:37:40,160 --> 00:37:41,760
does not contain any security measure

1061
00:37:41,760 --> 00:37:44,160
which is always just very bad practice

1062
00:37:44,160 --> 00:37:45,599
and just because you're using a custom

1063
00:37:45,599 --> 00:37:48,560
433 megahertz protocol does not mean you

1064
00:37:48,560 --> 00:37:50,320
increase security just make it harder

1065
00:37:50,320 --> 00:37:51,760
for people to look into it because they

1066
00:37:51,760 --> 00:37:54,240
need to know some rf basics

1067
00:37:54,240 --> 00:37:56,160
to actually decode this protocol but

1068
00:37:56,160 --> 00:37:58,240
once you know all this information a

1069
00:37:58,240 --> 00:38:01,119
regular c1101 from texas instrument was

1070
00:38:01,119 --> 00:38:02,800
about two dollars will be good enough to

1071
00:38:02,800 --> 00:38:04,000
actually go into the store and change

1072
00:38:04,000 --> 00:38:06,880
your prices so this is not protection at

1073
00:38:06,880 --> 00:38:08,320
all

1074
00:38:08,320 --> 00:38:10,240
also the protocol robustness could have

1075
00:38:10,240 --> 00:38:11,760
been greatly improved from what i know

1076
00:38:11,760 --> 00:38:14,000
from my university classes without

1077
00:38:14,000 --> 00:38:16,560
having any real term experience here but

1078
00:38:16,560 --> 00:38:18,480
there was no real error correction

1079
00:38:18,480 --> 00:38:19,680
available

1080
00:38:19,680 --> 00:38:20,400
so

1081
00:38:20,400 --> 00:38:22,240
if one bit flip is in your image data

1082
00:38:22,240 --> 00:38:23,200
the whole

1083
00:38:23,200 --> 00:38:25,280
refresh of the image data will fail and

1084
00:38:25,280 --> 00:38:27,440
you have to start over however just

1085
00:38:27,440 --> 00:38:29,040
adding an error correction algorithm

1086
00:38:29,040 --> 00:38:30,880
here would probably save you especially

1087
00:38:30,880 --> 00:38:32,240
in the big tanks that send hundreds of

1088
00:38:32,240 --> 00:38:33,359
frames

1089
00:38:33,359 --> 00:38:35,040
and make it possible to correct any of

1090
00:38:35,040 --> 00:38:37,200
the bit flips and thus

1091
00:38:37,200 --> 00:38:40,160
have way better reliability in your

1092
00:38:40,160 --> 00:38:43,200
in the pricing changes

1093
00:38:43,200 --> 00:38:45,599
also relaying a microcontroller does not

1094
00:38:45,599 --> 00:38:47,680
protect you against finding out what uh

1095
00:38:47,680 --> 00:38:50,160
the microcontroller family is used

1096
00:38:50,160 --> 00:38:52,400
because you can always build an asset

1097
00:38:52,400 --> 00:38:54,560
figure out who the manufacturer is

1098
00:38:54,560 --> 00:38:56,240
especially if it's regular

1099
00:38:56,240 --> 00:38:58,000
big term manufacturers that mark their

1100
00:38:58,000 --> 00:39:00,079
chips

1101
00:39:00,079 --> 00:39:01,520
all code will be released on github

1102
00:39:01,520 --> 00:39:03,839
unfortunately i wasn't able to yet but

1103
00:39:03,839 --> 00:39:05,920
uh i'll make sure to upload everything

1104
00:39:05,920 --> 00:39:07,680
all the custom blocks made for new radio

1105
00:39:07,680 --> 00:39:09,760
and the sketches and and firmware dumps

1106
00:39:09,760 --> 00:39:11,760
i have so if anybody wants to further

1107
00:39:11,760 --> 00:39:15,839
dig into this uh feel free to

1108
00:39:16,320 --> 00:39:18,960
if any further questions

1109
00:39:18,960 --> 00:39:21,280
good

1110
00:39:22,480 --> 00:39:24,720
thank you

1111
00:39:24,800 --> 00:39:26,640
so it looked like a lot of your research

1112
00:39:26,640 --> 00:39:27,520
was

1113
00:39:27,520 --> 00:39:29,359
targeted at changing just the image on

1114
00:39:29,359 --> 00:39:31,359
the actual display

1115
00:39:31,359 --> 00:39:33,280
did any of your research look at using

1116
00:39:33,280 --> 00:39:35,280
the display to reach back to the host

1117
00:39:35,280 --> 00:39:37,440
computer with the application no i did

1118
00:39:37,440 --> 00:39:39,760
not look into that

1119
00:39:39,760 --> 00:39:41,119
do you think that's a possibility of

1120
00:39:41,119 --> 00:39:43,359
using that display the rf to communicate

1121
00:39:43,359 --> 00:39:46,000
back to the computer maybe

1122
00:39:46,000 --> 00:39:46,960
um

1123
00:39:46,960 --> 00:39:48,320
somehow

1124
00:39:48,320 --> 00:39:50,079
in theory yeah that would be something

1125
00:39:50,079 --> 00:39:51,839
very interesting to look further into

1126
00:39:51,839 --> 00:39:52,800
yeah

1127
00:39:52,800 --> 00:39:53,839
okay

1128
00:39:53,839 --> 00:39:55,200
i just had a quick look at the base

1129
00:39:55,200 --> 00:39:57,440
station but nothing too much was using

1130
00:39:57,440 --> 00:39:59,520
stm32 so

1131
00:39:59,520 --> 00:40:01,200
very easy to look further from there i

1132
00:40:01,200 --> 00:40:03,599
guess probably not better secured at all

1133
00:40:03,599 --> 00:40:04,480
either

1134
00:40:04,480 --> 00:40:06,400
so

1135
00:40:06,400 --> 00:40:08,480
it might be a good idea to have a look

1136
00:40:08,480 --> 00:40:11,520
in this involved

1137
00:40:11,520 --> 00:40:14,400
any other questions

1138
00:40:15,599 --> 00:40:20,280
okay thank you stefan thank you

