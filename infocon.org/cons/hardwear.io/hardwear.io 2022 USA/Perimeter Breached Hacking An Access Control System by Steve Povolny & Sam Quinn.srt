1
00:00:02,720 --> 00:00:04,480
thank you steven sam

2
00:00:04,480 --> 00:00:06,960
thank you very much audio okay

3
00:00:06,960 --> 00:00:07,839
all right

4
00:00:07,839 --> 00:00:09,440
thanks for sticking with us through day

5
00:00:09,440 --> 00:00:11,280
one hope everybody's having a good time

6
00:00:11,280 --> 00:00:13,200
so far and i know we're not butting up

7
00:00:13,200 --> 00:00:14,719
against anything there's a happy hour

8
00:00:14,719 --> 00:00:16,640
after this but uh i think it starts at

9
00:00:16,640 --> 00:00:18,720
eight or something so we won't go quite

10
00:00:18,720 --> 00:00:21,279
that long uh with that introduction we

11
00:00:21,279 --> 00:00:22,800
probably can skip over the first slide

12
00:00:22,800 --> 00:00:24,720
you know the name of our talk here it's

13
00:00:24,720 --> 00:00:26,000
some of the research that we did into

14
00:00:26,000 --> 00:00:27,920
hacking an industrial control system

15
00:00:27,920 --> 00:00:30,960
specifically some building automation

16
00:00:30,960 --> 00:00:32,719
uh for the who am i my name is steve

17
00:00:32,719 --> 00:00:35,440
pavone as mentioned in the introduction

18
00:00:35,440 --> 00:00:37,200
i'm the head of advanced threat research

19
00:00:37,200 --> 00:00:40,399
at trellix uh i also the team i think

20
00:00:40,399 --> 00:00:42,719
lovingly maybe not lovingly entitled me

21
00:00:42,719 --> 00:00:44,480
as the excel guru i think probably

22
00:00:44,480 --> 00:00:45,840
because i have the management title my

23
00:00:45,840 --> 00:00:47,440
name so i'm not allowed to do anything

24
00:00:47,440 --> 00:00:49,920
technical i guess uh but i can write a

25
00:00:49,920 --> 00:00:52,480
mean excel function but outside of that

26
00:00:52,480 --> 00:00:54,559
i do a lot of vulnerability root cause

27
00:00:54,559 --> 00:00:56,399
analysis my background's in network

28
00:00:56,399 --> 00:00:58,879
security reverse engineering

29
00:00:58,879 --> 00:01:01,039
exploitation but this was really my

30
00:01:01,039 --> 00:01:03,359
first foray into hardware hacking which

31
00:01:03,359 --> 00:01:05,438
uh has sam has a lot more experience in

32
00:01:05,438 --> 00:01:07,040
sam

33
00:01:07,040 --> 00:01:08,799
thanks steve yeah my name is sam quinn

34
00:01:08,799 --> 00:01:10,880
i'm a senior security researcher at

35
00:01:10,880 --> 00:01:14,159
trellix steve had a cool line that says

36
00:01:14,159 --> 00:01:15,280
he's the head of advanced threat

37
00:01:15,280 --> 00:01:17,360
research so i wanted my bullet points to

38
00:01:17,360 --> 00:01:19,119
be the same length so i'm the tail of it

39
00:01:19,119 --> 00:01:20,960
the bottom yep the butt

40
00:01:20,960 --> 00:01:22,240
i uh

41
00:01:22,240 --> 00:01:23,920
no one really i self-con

42
00:01:23,920 --> 00:01:28,640
self um identify as elite hacker hacksaw

43
00:01:28,640 --> 00:01:30,240
my core interest could have been

44
00:01:30,240 --> 00:01:32,000
summarized by just hacking in general

45
00:01:32,000 --> 00:01:35,280
but um i definitely like exploitation

46
00:01:35,280 --> 00:01:37,119
hardware hacking for sure

47
00:01:37,119 --> 00:01:39,119
embedded systems like iot devices and

48
00:01:39,119 --> 00:01:40,880
then like os fundamentals and things

49
00:01:40,880 --> 00:01:43,840
like that and when sam and i are not uh

50
00:01:43,840 --> 00:01:45,680
out finding crashes crashes are out

51
00:01:45,680 --> 00:01:48,159
finding us we're both avid bikers as you

52
00:01:48,159 --> 00:01:50,560
can tell here uh these are actual videos

53
00:01:50,560 --> 00:01:52,240
of us both crashing and we'll say the

54
00:01:52,240 --> 00:01:54,079
only common denominator is that sam was

55
00:01:54,079 --> 00:01:55,920
with me on the trip and the rights

56
00:01:55,920 --> 00:01:57,360
because you can't even ride the trail

57
00:01:57,360 --> 00:01:59,920
house neither can you clearly anyways

58
00:01:59,920 --> 00:02:02,159
let's talk about how we uncovered this

59
00:02:02,159 --> 00:02:04,159
target why we went after

60
00:02:04,159 --> 00:02:06,320
access control specifically

61
00:02:06,320 --> 00:02:07,200
and

62
00:02:07,200 --> 00:02:08,720
because we're at hardware io we're going

63
00:02:08,720 --> 00:02:10,479
to spend a lot more time talking about

64
00:02:10,479 --> 00:02:11,680
hardware at black hat we're going to

65
00:02:11,680 --> 00:02:12,879
spend a little bit more time talking

66
00:02:12,879 --> 00:02:14,480
about the vulnerabilities themselves but

67
00:02:14,480 --> 00:02:15,680
you'll get a good taste for what we

68
00:02:15,680 --> 00:02:17,680
found as well so a little bit of a 60 40

69
00:02:17,680 --> 00:02:18,480
there

70
00:02:18,480 --> 00:02:20,319
we look back over the last couple of

71
00:02:20,319 --> 00:02:23,120
years at some of the escalation of the

72
00:02:23,120 --> 00:02:24,400
geopolitical

73
00:02:24,400 --> 00:02:26,160
cyber scene the warfare targeting

74
00:02:26,160 --> 00:02:28,160
industrial control system

75
00:02:28,160 --> 00:02:30,400
building automation systems obviously

76
00:02:30,400 --> 00:02:32,160
we've seen attacks against things like

77
00:02:32,160 --> 00:02:35,120
gas and oil pipelines water treatment

78
00:02:35,120 --> 00:02:37,519
telecom the energy grid going back

79
00:02:37,519 --> 00:02:39,680
nearly a decade or more but access

80
00:02:39,680 --> 00:02:42,319
controls not only for us represented

81
00:02:42,319 --> 00:02:43,840
kind of that transition from the

82
00:02:43,840 --> 00:02:45,760
physical to digital space

83
00:02:45,760 --> 00:02:47,360
but it was also that single point of

84
00:02:47,360 --> 00:02:49,120
failure and very little research has

85
00:02:49,120 --> 00:02:51,440
been done in the area of access control

86
00:02:51,440 --> 00:02:53,440
and it serves as one of those uh really

87
00:02:53,440 --> 00:02:55,280
powerful boundaries that that attackers

88
00:02:55,280 --> 00:02:56,160
still

89
00:02:56,160 --> 00:02:56,879
can

90
00:02:56,879 --> 00:02:59,040
can gain access to

91
00:02:59,040 --> 00:03:00,959
so that brings us to the target this is

92
00:03:00,959 --> 00:03:03,920
the linnell s2 mercury board i know it's

93
00:03:03,920 --> 00:03:06,480
a mouthful but the board itself here is

94
00:03:06,480 --> 00:03:08,480
an access control panel a dual reader

95
00:03:08,480 --> 00:03:09,840
controller

96
00:03:09,840 --> 00:03:11,440
it's it's hard to miss as you can see

97
00:03:11,440 --> 00:03:13,920
bright red and it's manufactured by a

98
00:03:13,920 --> 00:03:15,680
company called mercury which is hid

99
00:03:15,680 --> 00:03:18,159
global but has a sticker on it that's

100
00:03:18,159 --> 00:03:20,159
linnell s2 and lynnell is part of the

101
00:03:20,159 --> 00:03:21,920
global hvac company carrier that

102
00:03:21,920 --> 00:03:23,920
everybody's probably familiar with

103
00:03:23,920 --> 00:03:25,840
now i put a lot of time into this slide

104
00:03:25,840 --> 00:03:27,440
as you can see this is one of the most

105
00:03:27,440 --> 00:03:29,440
you know proud diagrams we've ever put

106
00:03:29,440 --> 00:03:31,040
together here but this simple

107
00:03:31,040 --> 00:03:33,360
representation is just the board and its

108
00:03:33,360 --> 00:03:35,840
usual deployment which is it manages a

109
00:03:35,840 --> 00:03:37,840
number of card readers or controllers i

110
00:03:37,840 --> 00:03:39,599
think this one supports up to 64

111
00:03:39,599 --> 00:03:41,599
independent card readers downstream but

112
00:03:41,599 --> 00:03:43,120
you can daisy chain them together to

113
00:03:43,120 --> 00:03:45,519
support an infinite number of readers or

114
00:03:45,519 --> 00:03:47,519
in any kind of relay they're typically

115
00:03:47,519 --> 00:03:49,120
deployed on the local network you don't

116
00:03:49,120 --> 00:03:50,799
see a lot of these internet connected

117
00:03:50,799 --> 00:03:52,480
unless it's uh probably a

118
00:03:52,480 --> 00:03:55,040
misconfiguration but it's possible and

119
00:03:55,040 --> 00:03:56,959
they're managed by a software called

120
00:03:56,959 --> 00:03:58,799
onguard threadlinell which is the

121
00:03:58,799 --> 00:04:00,159
management software that does all the

122
00:04:00,159 --> 00:04:01,840
provisioning of badges and access

123
00:04:01,840 --> 00:04:04,080
control and users and it just tells the

124
00:04:04,080 --> 00:04:05,439
board what to do the board's just a dumb

125
00:04:05,439 --> 00:04:09,280
relay and inputs and outputs

126
00:04:09,599 --> 00:04:10,640
the other thing that caught our

127
00:04:10,640 --> 00:04:12,239
attention for this and it might be a

128
00:04:12,239 --> 00:04:13,680
little hard to read i don't know how

129
00:04:13,680 --> 00:04:15,120
good your eyes are but

130
00:04:15,120 --> 00:04:17,519
we we saw a statement a marketing

131
00:04:17,519 --> 00:04:19,440
statement that came out a couple of

132
00:04:19,440 --> 00:04:21,440
years ago for this board saying that

133
00:04:21,440 --> 00:04:23,600
specifically the 4420 we're looking at

134
00:04:23,600 --> 00:04:26,320
had been uh following rigorous security

135
00:04:26,320 --> 00:04:28,000
vulnerability interop testing had been

136
00:04:28,000 --> 00:04:29,280
approved for use in government

137
00:04:29,280 --> 00:04:31,440
facilities well of course for us as

138
00:04:31,440 --> 00:04:33,280
security researchers we get the the

139
00:04:33,280 --> 00:04:35,040
finger-licking moment right i looked in

140
00:04:35,040 --> 00:04:37,280
the chops here and this was probably the

141
00:04:37,280 --> 00:04:38,960
most enticing part of going after the

142
00:04:38,960 --> 00:04:40,560
board for us is hey this is government

143
00:04:40,560 --> 00:04:42,479
certified what does that actually mean

144
00:04:42,479 --> 00:04:44,800
and a spoiler alert it's it's not a

145
00:04:44,800 --> 00:04:45,840
whole lot

146
00:04:45,840 --> 00:04:47,360
uh furthermore we found out in the

147
00:04:47,360 --> 00:04:50,400
process that the board was not just

148
00:04:50,400 --> 00:04:51,759
certified for use in government

149
00:04:51,759 --> 00:04:54,560
facilities but also added to the apl

150
00:04:54,560 --> 00:04:56,000
which is the approved product list

151
00:04:56,000 --> 00:04:57,919
meaning a government can go look in that

152
00:04:57,919 --> 00:04:59,759
data sheet or that list pick a product

153
00:04:59,759 --> 00:05:02,000
and it has been as we saw rigorously

154
00:05:02,000 --> 00:05:04,560
tested uh maybe not as much

155
00:05:04,560 --> 00:05:06,639
to acquire the target originally we went

156
00:05:06,639 --> 00:05:08,960
on our boomer friendly marketplace ebay

157
00:05:08,960 --> 00:05:11,759
and and bought this device uh 1500 bucks

158
00:05:11,759 --> 00:05:14,080
or something uh we did not manage it

159
00:05:14,080 --> 00:05:15,840
with the on guard software at first that

160
00:05:15,840 --> 00:05:17,680
came much later in the process and it

161
00:05:17,680 --> 00:05:19,280
really didn't end up being that

162
00:05:19,280 --> 00:05:21,680
essential to actually uh hacking the

163
00:05:21,680 --> 00:05:24,000
device so sam's going to talk to you

164
00:05:24,000 --> 00:05:25,360
guys a little bit about some of the

165
00:05:25,360 --> 00:05:27,120
hardware steps and then we'll we'll

166
00:05:27,120 --> 00:05:28,720
finish uh talking through the the

167
00:05:28,720 --> 00:05:30,479
discoveries that we found as well

168
00:05:30,479 --> 00:05:33,360
absolutely thanks steve so um the next

169
00:05:33,360 --> 00:05:35,440
this whole talk i guess will be mostly

170
00:05:35,440 --> 00:05:37,039
kind of our process looking into

171
00:05:37,039 --> 00:05:38,479
researching it

172
00:05:38,479 --> 00:05:40,240
and we really wanted to focus on the

173
00:05:40,240 --> 00:05:42,240
hardware stuff here so this could be a

174
00:05:42,240 --> 00:05:43,840
review for some of you experts out there

175
00:05:43,840 --> 00:05:45,840
but we wanted to dive into a lot of the

176
00:05:45,840 --> 00:05:48,479
parts and components and how we approach

177
00:05:48,479 --> 00:05:51,440
this ourselves so um the first thing we

178
00:05:51,440 --> 00:05:52,560
did

179
00:05:52,560 --> 00:05:54,800
was um when we get the board the first

180
00:05:54,800 --> 00:05:56,479
thing we like to do is start looking at

181
00:05:56,479 --> 00:05:58,880
all of the components the cpu and try to

182
00:05:58,880 --> 00:06:01,520
start doing some os int and recon on

183
00:06:01,520 --> 00:06:03,759
those devices by trying to look up data

184
00:06:03,759 --> 00:06:05,680
sheets things like that to get pin outs

185
00:06:05,680 --> 00:06:08,080
and and things that you can potentially

186
00:06:08,080 --> 00:06:08,960
use

187
00:06:08,960 --> 00:06:10,639
later on down the road

188
00:06:10,639 --> 00:06:13,440
we're also looking for simple um i o

189
00:06:13,440 --> 00:06:15,600
ports that we can connect to um like joe

190
00:06:15,600 --> 00:06:17,280
grant said in the keynote this morning

191
00:06:17,280 --> 00:06:19,440
um you know the path of least resistance

192
00:06:19,440 --> 00:06:21,120
is what the hackers always like to do so

193
00:06:21,120 --> 00:06:22,720
that's what we're trying to find out

194
00:06:22,720 --> 00:06:24,560
here is trying to find where these ports

195
00:06:24,560 --> 00:06:26,240
are and try to identify them a little

196
00:06:26,240 --> 00:06:28,400
bit

197
00:06:28,560 --> 00:06:31,039
so as just like any experienced

198
00:06:31,039 --> 00:06:32,880
experienced traveler knows exactly where

199
00:06:32,880 --> 00:06:34,880
their towel is an experienced hacker

200
00:06:34,880 --> 00:06:37,280
knows exactly where the uart is

201
00:06:37,280 --> 00:06:39,120
and that's what we kind of identified

202
00:06:39,120 --> 00:06:41,919
this potential four pin output as being

203
00:06:41,919 --> 00:06:44,240
four pins usually kind of relates to

204
00:06:44,240 --> 00:06:45,919
what a uart looks like

205
00:06:45,919 --> 00:06:48,319
and then there was also this nice 20 pin

206
00:06:48,319 --> 00:06:50,800
port on the device which uh kind of

207
00:06:50,800 --> 00:06:53,840
could be could be a potential jtag

208
00:06:53,840 --> 00:06:56,000
so um at this point we're still just

209
00:06:56,000 --> 00:06:57,599
rudimentary poking around with a

210
00:06:57,599 --> 00:06:59,759
multimeter trying to identify what

211
00:06:59,759 --> 00:07:01,440
things are ground where things are you

212
00:07:01,440 --> 00:07:03,039
know power

213
00:07:03,039 --> 00:07:05,360
that can help narrow down what the scope

214
00:07:05,360 --> 00:07:07,440
of these ports could be but really the

215
00:07:07,440 --> 00:07:09,440
main way of trying to figure out what

216
00:07:09,440 --> 00:07:10,400
kind of

217
00:07:10,400 --> 00:07:12,080
data is being transmitted over these

218
00:07:12,080 --> 00:07:13,680
ports is using something like a logic

219
00:07:13,680 --> 00:07:16,560
analyzer that's exactly what we did here

220
00:07:16,560 --> 00:07:18,160
so when we hooked up those for that

221
00:07:18,160 --> 00:07:20,000
potential uart connection to the logic

222
00:07:20,000 --> 00:07:22,639
analyzer and then booted up the device

223
00:07:22,639 --> 00:07:24,800
you can see that one of the pins

224
00:07:24,800 --> 00:07:27,039
this one up the top was

225
00:07:27,039 --> 00:07:29,039
obviously getting some data

226
00:07:29,039 --> 00:07:30,960
so that was exciting so we knew that

227
00:07:30,960 --> 00:07:34,479
that is probably serial uart and

228
00:07:34,479 --> 00:07:36,479
unlike steve he can actually read fluent

229
00:07:36,479 --> 00:07:37,680
hex i don't know it's like the weirdest

230
00:07:37,680 --> 00:07:40,080
thing useless too yeah he got it really

231
00:07:40,080 --> 00:07:41,440
excited about this because he's like

232
00:07:41,440 --> 00:07:43,360
that says wrong boot but to me i didn't

233
00:07:43,360 --> 00:07:46,000
know but so uh that was great so now we

234
00:07:46,000 --> 00:07:48,240
do know that we do have you know async

235
00:07:48,240 --> 00:07:50,879
serial data being sent over this wire

236
00:07:50,879 --> 00:07:53,039
and that is exactly when we ran into our

237
00:07:53,039 --> 00:07:55,520
first roadblock so this screenshot was

238
00:07:55,520 --> 00:07:58,000
the last moment in time that data was

239
00:07:58,000 --> 00:08:00,400
being transmitted over the uart

240
00:08:00,400 --> 00:08:02,319
um and it's kind of in an arbitrary spot

241
00:08:02,319 --> 00:08:03,919
like you can see some services have

242
00:08:03,919 --> 00:08:05,120
already started

243
00:08:05,120 --> 00:08:06,960
but eventually it just halted it was

244
00:08:06,960 --> 00:08:09,199
printing out quite a few messages per

245
00:08:09,199 --> 00:08:11,360
second and then it just went

246
00:08:11,360 --> 00:08:12,560
dead silent so we knew that it was

247
00:08:12,560 --> 00:08:14,400
getting disabled somewhere and most

248
00:08:14,400 --> 00:08:16,000
likely in software because if it was

249
00:08:16,000 --> 00:08:17,759
disabled in hardware we wouldn't have

250
00:08:17,759 --> 00:08:19,840
seen anything obviously

251
00:08:19,840 --> 00:08:22,160
so our approach to re-enabling the uart

252
00:08:22,160 --> 00:08:25,039
was to try to override the init variable

253
00:08:25,039 --> 00:08:26,400
from the bootloader

254
00:08:26,400 --> 00:08:28,560
and this is how the linux kernel starts

255
00:08:28,560 --> 00:08:29,280
up

256
00:08:29,280 --> 00:08:30,879
and if we can overwrite any init

257
00:08:30,879 --> 00:08:32,080
variables

258
00:08:32,080 --> 00:08:34,159
or the init scripts with our own script

259
00:08:34,159 --> 00:08:37,279
like bin sh it wouldn't disable the uart

260
00:08:37,279 --> 00:08:39,279
because none of that code is running

261
00:08:39,279 --> 00:08:41,919
so then our next step was trying to find

262
00:08:41,919 --> 00:08:43,760
where that script is this is just a

263
00:08:43,760 --> 00:08:45,440
sneak preview of the script that

264
00:08:45,440 --> 00:08:47,200
eventually we found

265
00:08:47,200 --> 00:08:49,040
you can see in the the comment there it

266
00:08:49,040 --> 00:08:49,920
says

267
00:08:49,920 --> 00:08:52,399
disable disable the serial port if it's

268
00:08:52,399 --> 00:08:55,040
currently enabled and that's why we

269
00:08:55,040 --> 00:08:56,959
probably saw some messages being printed

270
00:08:56,959 --> 00:08:58,800
across because it was enabled and then

271
00:08:58,800 --> 00:09:00,880
it figured it out and disabled it later

272
00:09:00,880 --> 00:09:01,760
on

273
00:09:01,760 --> 00:09:03,200
so this is the script that we wanted to

274
00:09:03,200 --> 00:09:06,080
find and try to comment it out

275
00:09:06,080 --> 00:09:07,760
one of the other things with that level

276
00:09:07,760 --> 00:09:09,839
of access by changing the init variable

277
00:09:09,839 --> 00:09:11,760
is that we could potentially change the

278
00:09:11,760 --> 00:09:14,160
root password and use the uart console

279
00:09:14,160 --> 00:09:16,560
just as if we were logging into the

280
00:09:16,560 --> 00:09:19,120
linux operating system normally

281
00:09:19,120 --> 00:09:20,880
and then as a bonus dump the entire

282
00:09:20,880 --> 00:09:22,640
firmware and start analyzing some of the

283
00:09:22,640 --> 00:09:24,480
system binaries

284
00:09:24,480 --> 00:09:27,040
manually offline

285
00:09:27,040 --> 00:09:29,760
and this is exactly when we ran into

286
00:09:29,760 --> 00:09:31,440
roadblock 2 when we're trying to change

287
00:09:31,440 --> 00:09:33,279
that init variable and i'll let steve

288
00:09:33,279 --> 00:09:34,560
cover that

289
00:09:34,560 --> 00:09:37,040
yeah thanks sam so what you'll see i'm

290
00:09:37,040 --> 00:09:39,200
going to advance the slide here and you

291
00:09:39,200 --> 00:09:40,959
can see kind of uh part of the u-boot

292
00:09:40,959 --> 00:09:42,640
process here one of the strings we

293
00:09:42,640 --> 00:09:44,480
called out says hit keys to stop auto

294
00:09:44,480 --> 00:09:45,920
boot you've probably seen something

295
00:09:45,920 --> 00:09:47,920
similar there's typically a timer that

296
00:09:47,920 --> 00:09:50,800
counts down from 3 to one zero giving

297
00:09:50,800 --> 00:09:53,279
the user time to to input a keyboard

298
00:09:53,279 --> 00:09:55,600
keystroke and halt the boot process for

299
00:09:55,600 --> 00:09:58,080
us it was hard coded statically to zero

300
00:09:58,080 --> 00:10:00,240
and so that was why we were unable to

301
00:10:00,240 --> 00:10:02,079
have interactive commands to the yaboot

302
00:10:02,079 --> 00:10:02,959
shell

303
00:10:02,959 --> 00:10:05,040
um so

304
00:10:05,040 --> 00:10:06,959
since we had that jtag port that sam

305
00:10:06,959 --> 00:10:08,640
talked about earlier what we figured

306
00:10:08,640 --> 00:10:10,160
here is it'd be a little bit easier to

307
00:10:10,160 --> 00:10:12,000
actually modify the running system using

308
00:10:12,000 --> 00:10:13,839
jtag instead of trying to dump a

309
00:10:13,839 --> 00:10:15,360
modified system image and then

310
00:10:15,360 --> 00:10:16,959
reflashing it back to the device so

311
00:10:16,959 --> 00:10:18,640
that's our next approach here so try to

312
00:10:18,640 --> 00:10:19,440
use

313
00:10:19,440 --> 00:10:21,120
jtag

314
00:10:21,120 --> 00:10:22,880
so we figured out exactly why this

315
00:10:22,880 --> 00:10:25,040
variable was set if we look at the uh

316
00:10:25,040 --> 00:10:27,440
the documentation for u-boot we can see

317
00:10:27,440 --> 00:10:29,120
that the boot delay variable which is

318
00:10:29,120 --> 00:10:31,360
that zero that was set

319
00:10:31,360 --> 00:10:32,959
means if it's set to zero it can prevent

320
00:10:32,959 --> 00:10:34,320
you from interact and entering

321
00:10:34,320 --> 00:10:36,320
interactive commands again forever well

322
00:10:36,320 --> 00:10:37,920
forever is a very short time in our

323
00:10:37,920 --> 00:10:39,680
world just below that you can see that

324
00:10:39,680 --> 00:10:41,360
if you set the variable to negative one

325
00:10:41,360 --> 00:10:43,200
it will disable auto boot so our goal

326
00:10:43,200 --> 00:10:44,880
was to actually patch that value out

327
00:10:44,880 --> 00:10:47,360
from zero to negative one

328
00:10:47,360 --> 00:10:49,360
so as a recap our approach here leverage

329
00:10:49,360 --> 00:10:51,279
jtag to dump the bootloader image we'll

330
00:10:51,279 --> 00:10:53,120
try to reverse engineer the u-boot image

331
00:10:53,120 --> 00:10:54,560
to find out where that boot delay

332
00:10:54,560 --> 00:10:56,640
variable is checked and then we'll use

333
00:10:56,640 --> 00:10:58,160
something like j-link to insert a

334
00:10:58,160 --> 00:11:00,000
breakpoint just before that check is

335
00:11:00,000 --> 00:11:02,240
done patch it out from zero to negative

336
00:11:02,240 --> 00:11:04,240
one and go and that's exactly what we

337
00:11:04,240 --> 00:11:06,240
did so let's look back at the 20 pin

338
00:11:06,240 --> 00:11:07,600
candidate on the board this is a

339
00:11:07,600 --> 00:11:09,760
close-up shot of our jtag

340
00:11:09,760 --> 00:11:11,680
we also could have used something like

341
00:11:11,680 --> 00:11:13,760
joe grant's jtagulator you probably saw

342
00:11:13,760 --> 00:11:16,160
that in the keynote this morning

343
00:11:16,160 --> 00:11:17,760
unfortunately it just wasn't nearly pink

344
00:11:17,760 --> 00:11:19,360
enough for our purposes so we needed

345
00:11:19,360 --> 00:11:20,959
something with a little more color and

346
00:11:20,959 --> 00:11:23,760
we chose the segger j-link so this this

347
00:11:23,760 --> 00:11:25,760
beautiful device here is a

348
00:11:25,760 --> 00:11:27,920
simple it comes with software it comes

349
00:11:27,920 --> 00:11:29,519
with the pin out so you can determine

350
00:11:29,519 --> 00:11:31,760
like we just went on the segger website

351
00:11:31,760 --> 00:11:35,680
and got the 20 pin pin out for jtag here

352
00:11:35,680 --> 00:11:37,519
for our purposes we went through and

353
00:11:37,519 --> 00:11:39,200
tested the ground pins all were on the

354
00:11:39,200 --> 00:11:41,920
right side we checked that the 5 volt

355
00:11:41,920 --> 00:11:43,760
supply was indeed getting 5 volts

356
00:11:43,760 --> 00:11:45,760
through a multimeter and by powering it

357
00:11:45,760 --> 00:11:48,000
with a power supply you can also yolo

358
00:11:48,000 --> 00:11:49,440
the approach and just randomly plug

359
00:11:49,440 --> 00:11:50,720
stuff in and eventually you're going to

360
00:11:50,720 --> 00:11:52,800
get there but it might do some some

361
00:11:52,800 --> 00:11:54,480
damage to the underlying components that

362
00:11:54,480 --> 00:11:56,079
way

363
00:11:56,079 --> 00:11:57,120
as a

364
00:11:57,120 --> 00:11:58,959
snapshot of what our typical wiring

365
00:11:58,959 --> 00:12:00,800
project looks like this is our actual

366
00:12:00,800 --> 00:12:02,800
cabinet in our data center attached to

367
00:12:02,800 --> 00:12:05,360
our lab versus the one immediately next

368
00:12:05,360 --> 00:12:07,120
door to us so this is how our projects

369
00:12:07,120 --> 00:12:08,800
are typically wired this one was

370
00:12:08,800 --> 00:12:10,720
absolutely no different we followed the

371
00:12:10,720 --> 00:12:13,839
doc octopus model and got everything uh

372
00:12:13,839 --> 00:12:15,839
wired up here but this is the jtag after

373
00:12:15,839 --> 00:12:17,680
all those 20 pins or the right pins are

374
00:12:17,680 --> 00:12:19,839
connected here uh we did include a

375
00:12:19,839 --> 00:12:22,320
little uh oregon area brew there then in

376
00:12:22,320 --> 00:12:24,320
casa brew as a shout out to where we're

377
00:12:24,320 --> 00:12:25,360
from

378
00:12:25,360 --> 00:12:27,440
but that set us up to do the software

379
00:12:27,440 --> 00:12:29,440
analysis you can download the j-link

380
00:12:29,440 --> 00:12:32,079
software directly from segger's website

381
00:12:32,079 --> 00:12:33,600
and the way that it works is it

382
00:12:33,600 --> 00:12:35,279
essentially once it runs it's waiting

383
00:12:35,279 --> 00:12:37,440
for the cpu to establish a connection

384
00:12:37,440 --> 00:12:38,880
once it makes that connection then you

385
00:12:38,880 --> 00:12:41,519
can provide it with some inputs here now

386
00:12:41,519 --> 00:12:43,279
sam what you'll see here sam put

387
00:12:43,279 --> 00:12:45,680
together this little j-link xe script uh

388
00:12:45,680 --> 00:12:47,440
we give it the device id which is the

389
00:12:47,440 --> 00:12:50,160
atmel cpu the rest of the parameters we

390
00:12:50,160 --> 00:12:51,440
didn't even bother to really look into

391
00:12:51,440 --> 00:12:53,360
we just took defaults from a script we

392
00:12:53,360 --> 00:12:56,000
found online but most importantly is the

393
00:12:56,000 --> 00:12:58,000
option to set a custom script at the end

394
00:12:58,000 --> 00:12:58,880
there

395
00:12:58,880 --> 00:13:01,279
now we're not typically in the habit of

396
00:13:01,279 --> 00:13:03,360
sharing exploit scripts or anything that

397
00:13:03,360 --> 00:13:05,360
could enable the adversary in this case

398
00:13:05,360 --> 00:13:06,560
we're going to make a little bit of an

399
00:13:06,560 --> 00:13:08,720
exception here and share this so in

400
00:13:08,720 --> 00:13:10,639
three two one

401
00:13:10,639 --> 00:13:12,399
yes that's right sam wrote an entire

402
00:13:12,399 --> 00:13:14,720
script with the letter h in it to halt

403
00:13:14,720 --> 00:13:17,279
the cpu so you know you're efficient as

404
00:13:17,279 --> 00:13:18,800
an engineer when the name of the script

405
00:13:18,800 --> 00:13:20,560
is 11 times longer than the contents

406
00:13:20,560 --> 00:13:23,279
itself regardless it was very effective

407
00:13:23,279 --> 00:13:24,800
in giving us a halt or setting an

408
00:13:24,800 --> 00:13:26,560
automatic breakpoint whenever we ran

409
00:13:26,560 --> 00:13:28,880
that and we could use this to uh to

410
00:13:28,880 --> 00:13:31,120
debug where the boot delay was set

411
00:13:31,120 --> 00:13:33,279
so let's go on to dumping the image here

412
00:13:33,279 --> 00:13:35,440
we had a very good idea of where the

413
00:13:35,440 --> 00:13:37,200
bootloader the ubud image was being

414
00:13:37,200 --> 00:13:39,680
loaded because during the bootstrap

415
00:13:39,680 --> 00:13:42,160
process you can see here uh there are

416
00:13:42,160 --> 00:13:44,079
eighty thousand bytes copied from the

417
00:13:44,079 --> 00:13:46,000
address of twenty thousand two seven

418
00:13:46,000 --> 00:13:48,560
three f zero zero zero zero so we knew

419
00:13:48,560 --> 00:13:50,959
the size and from where and to once it

420
00:13:50,959 --> 00:13:52,800
was being copied and that gave us the

421
00:13:52,800 --> 00:13:54,800
ability to use another command from

422
00:13:54,800 --> 00:13:56,639
j-link which is the save bin or save

423
00:13:56,639 --> 00:13:57,920
binary command

424
00:13:57,920 --> 00:14:00,399
yes they're very creative at naming to

425
00:14:00,399 --> 00:14:02,240
take a copy of that u-boot image for

426
00:14:02,240 --> 00:14:05,680
analysis and that's exactly what we did

427
00:14:05,680 --> 00:14:08,160
the next thing was to open a debugger

428
00:14:08,160 --> 00:14:10,079
something like uh or a disassembler

429
00:14:10,079 --> 00:14:11,519
something like ida where we could look

430
00:14:11,519 --> 00:14:13,920
into this image that we have and

431
00:14:13,920 --> 00:14:16,560
actually find the the strings of

432
00:14:16,560 --> 00:14:18,000
interest and find that boot delay

433
00:14:18,000 --> 00:14:20,000
variable so you know obviously all lead

434
00:14:20,000 --> 00:14:21,519
hackers the first thing they do is run

435
00:14:21,519 --> 00:14:23,440
strings on the binary and we were

436
00:14:23,440 --> 00:14:25,279
looking for that hit keys to stop auto

437
00:14:25,279 --> 00:14:27,360
boot and of course it was found in the

438
00:14:27,360 --> 00:14:30,000
binary that gave us a rom address here

439
00:14:30,000 --> 00:14:32,560
uh and the reason we don't have a i

440
00:14:32,560 --> 00:14:34,000
guess i'll back up for a second and say

441
00:14:34,000 --> 00:14:36,000
ida didn't do a great job of processing

442
00:14:36,000 --> 00:14:37,199
this file because it doesn't know what

443
00:14:37,199 --> 00:14:39,040
it is it's just a raw binary it doesn't

444
00:14:39,040 --> 00:14:41,920
know if it's an l for a pe or whatever

445
00:14:41,920 --> 00:14:43,440
and so we have to do a little bit of

446
00:14:43,440 --> 00:14:45,360
code cleanup function declaration and

447
00:14:45,360 --> 00:14:47,760
definition uh defining offsets and

448
00:14:47,760 --> 00:14:48,880
that's really what we're trying to do

449
00:14:48,880 --> 00:14:50,560
here in addition to just finding that

450
00:14:50,560 --> 00:14:52,639
boot delay variable so anyways we found

451
00:14:52,639 --> 00:14:54,880
this realm address followed that and

452
00:14:54,880 --> 00:14:56,959
obviously that took us to the pointer to

453
00:14:56,959 --> 00:14:58,560
where the string was

454
00:14:58,560 --> 00:15:00,320
then we had to because we couldn't

455
00:15:00,320 --> 00:15:01,839
cross-reference and ida didn't have

456
00:15:01,839 --> 00:15:03,519
context for cross-references here we

457
00:15:03,519 --> 00:15:05,360
used that value as an immediate value to

458
00:15:05,360 --> 00:15:07,440
look up an ida and that gave us the

459
00:15:07,440 --> 00:15:09,360
location of where it was found

460
00:15:09,360 --> 00:15:11,279
when we double clicked on that it took

461
00:15:11,279 --> 00:15:13,600
us here now i may read printable hex

462
00:15:13,600 --> 00:15:16,079
ascii which is again that useless skill

463
00:15:16,079 --> 00:15:17,839
coming from writing ips signatures for

464
00:15:17,839 --> 00:15:19,839
too long but i don't read hex arm

465
00:15:19,839 --> 00:15:22,399
assembly up codes so um so we had no

466
00:15:22,399 --> 00:15:24,399
idea what this says we use the shortcuts

467
00:15:24,399 --> 00:15:25,519
in idap

468
00:15:25,519 --> 00:15:27,120
and f to define the functions and

469
00:15:27,120 --> 00:15:29,440
procedures uh and after doing that we

470
00:15:29,440 --> 00:15:31,360
got a much cleaner view this is

471
00:15:31,360 --> 00:15:33,759
obviously the graph format view of the

472
00:15:33,759 --> 00:15:35,759
where our string was being referenced

473
00:15:35,759 --> 00:15:37,600
more importantly right after the pointer

474
00:15:37,600 --> 00:15:39,759
to that string address is a function

475
00:15:39,759 --> 00:15:42,000
sturt l which i'm sure you guys know is

476
00:15:42,000 --> 00:15:44,079
a string to long now this is actually a

477
00:15:44,079 --> 00:15:45,759
wrapper for start l we just named it

478
00:15:45,759 --> 00:15:47,440
that way but that makes a lot of sense

479
00:15:47,440 --> 00:15:49,199
because that's probably an ascii value

480
00:15:49,199 --> 00:15:50,560
for that boot delay being checked

481
00:15:50,560 --> 00:15:52,639
converted into a long and then processed

482
00:15:52,639 --> 00:15:54,800
in the in the boot process

483
00:15:54,800 --> 00:15:56,480
and so that's that's what we want to do

484
00:15:56,480 --> 00:15:58,399
is set a breakpoint just before this

485
00:15:58,399 --> 00:16:01,120
function call and do that analysis

486
00:16:01,120 --> 00:16:03,519
so here is our set breakpoint command

487
00:16:03,519 --> 00:16:04,959
you'll see the first thing we did is we

488
00:16:04,959 --> 00:16:07,120
took that address just before the stir

489
00:16:07,120 --> 00:16:10,079
to long and the the only argument to

490
00:16:10,079 --> 00:16:13,839
that function it comes from r0 and r0 is

491
00:16:13,839 --> 00:16:15,680
actually that value which has the boot

492
00:16:15,680 --> 00:16:17,839
delay so if we dump the memory at that

493
00:16:17,839 --> 00:16:19,759
address and just take two bytes we can

494
00:16:19,759 --> 00:16:21,360
see that it is actually

495
00:16:21,360 --> 00:16:23,519
hard coded there to the little endian

496
00:16:23,519 --> 00:16:27,199
value of 0 30 right which is ascii 0.

497
00:16:27,199 --> 00:16:29,440
then we use the w2 or write 2 byte

498
00:16:29,440 --> 00:16:33,279
commands to write negative 1 or 2d 31 to

499
00:16:33,279 --> 00:16:34,800
that to that value

500
00:16:34,800 --> 00:16:36,480
and after that we can just hit go to

501
00:16:36,480 --> 00:16:38,320
continue and all of a sudden now we've

502
00:16:38,320 --> 00:16:40,880
we've patched that boot delay variable

503
00:16:40,880 --> 00:16:43,199
so just to kind of recap the process

504
00:16:43,199 --> 00:16:44,560
we're going to show a little video here

505
00:16:44,560 --> 00:16:46,320
i'll set the stage for what you just saw

506
00:16:46,320 --> 00:16:47,360
we're going to kind of repeat it in

507
00:16:47,360 --> 00:16:49,600
video format the left side of the screen

508
00:16:49,600 --> 00:16:51,600
is going to be the device and and the

509
00:16:51,600 --> 00:16:53,519
the boot up process on the right side is

510
00:16:53,519 --> 00:16:56,000
our jtag connection from the attacker's

511
00:16:56,000 --> 00:16:57,920
laptop and the first thing that we're

512
00:16:57,920 --> 00:17:00,320
going to do is run sam's really awesome

513
00:17:00,320 --> 00:17:02,639
super elite script here and it'll wait

514
00:17:02,639 --> 00:17:04,799
for the processor to connect and we

515
00:17:04,799 --> 00:17:06,720
check if it's halted and sure enough the

516
00:17:06,720 --> 00:17:09,359
cpu is halted at this point

517
00:17:09,359 --> 00:17:11,679
so we can continue on by setting a break

518
00:17:11,679 --> 00:17:13,280
point here right again that's the break

519
00:17:13,280 --> 00:17:14,959
point right before that start to l is

520
00:17:14,959 --> 00:17:17,599
checked and hit go and the boot process

521
00:17:17,599 --> 00:17:19,919
continues and it does take a minute or

522
00:17:19,919 --> 00:17:22,799
so to hit our break point but when we

523
00:17:22,799 --> 00:17:24,400
hit the break point what we'll do at

524
00:17:24,400 --> 00:17:26,799
that point is make sure that the cpu is

525
00:17:26,799 --> 00:17:29,440
halted again running the same command

526
00:17:29,440 --> 00:17:31,200
and that it did stop at the break point

527
00:17:31,200 --> 00:17:33,440
that we expect it to and we can see that

528
00:17:33,440 --> 00:17:35,120
sure enough it did stop at the break

529
00:17:35,120 --> 00:17:37,280
point that we expected and now we can do

530
00:17:37,280 --> 00:17:40,080
that inline patch so here is where we're

531
00:17:40,080 --> 00:17:42,160
going to dump the two bytes of memory we

532
00:17:42,160 --> 00:17:43,520
see that ascii

533
00:17:43,520 --> 00:17:46,320
hex 30 which is our zero we use the

534
00:17:46,320 --> 00:17:48,559
write two command to write 2d negative

535
00:17:48,559 --> 00:17:49,760
one

536
00:17:49,760 --> 00:17:51,840
and then we just hit go and what you'll

537
00:17:51,840 --> 00:17:54,000
see is as soon as we hit go here if you

538
00:17:54,000 --> 00:17:55,520
watch the left side it's almost

539
00:17:55,520 --> 00:17:57,600
instantaneous how quickly it drops you

540
00:17:57,600 --> 00:17:59,679
into that you boot shell and from you

541
00:17:59,679 --> 00:18:01,679
boot shell then we can actually do

542
00:18:01,679 --> 00:18:03,760
things like help and run those commands

543
00:18:03,760 --> 00:18:06,480
but more importantly we can now set the

544
00:18:06,480 --> 00:18:08,559
arguments that sam talked about earlier

545
00:18:08,559 --> 00:18:10,480
which is overriding the init scripts

546
00:18:10,480 --> 00:18:12,640
with bin sh and getting us a true root

547
00:18:12,640 --> 00:18:14,240
shell on the device so that was the

548
00:18:14,240 --> 00:18:15,600
command that you might have missed just

549
00:18:15,600 --> 00:18:17,120
earlier there is setting the boot

550
00:18:17,120 --> 00:18:19,360
arguments and the init script and

551
00:18:19,360 --> 00:18:21,520
overwriting it and now we actually run

552
00:18:21,520 --> 00:18:23,679
who am i and we actually have a full

553
00:18:23,679 --> 00:18:24,799
root shell

554
00:18:24,799 --> 00:18:25,919
on the device

555
00:18:25,919 --> 00:18:26,799
so

556
00:18:26,799 --> 00:18:28,880
that's a great place uh for us to

557
00:18:28,880 --> 00:18:30,720
continue we were able to you know from a

558
00:18:30,720 --> 00:18:32,480
root shell obviously this is a great

559
00:18:32,480 --> 00:18:34,160
leverage point to do for the research

560
00:18:34,160 --> 00:18:36,480
and look at the system binaries

561
00:18:36,480 --> 00:18:38,160
down the road a little further we ran

562
00:18:38,160 --> 00:18:40,080
into another roadblock which is our

563
00:18:40,080 --> 00:18:42,320
roadblock 3 here and that was the

564
00:18:42,320 --> 00:18:44,480
hardware based watchdog timer so as we

565
00:18:44,480 --> 00:18:46,480
were doing as we were enabling break

566
00:18:46,480 --> 00:18:48,400
points and hitting them we would find

567
00:18:48,400 --> 00:18:50,240
that about every 15 seconds or so the

568
00:18:50,240 --> 00:18:51,840
system would reboot and this made a lot

569
00:18:51,840 --> 00:18:53,360
of sense because there's a watchdog

570
00:18:53,360 --> 00:18:56,080
timer with a 15 second interval so our

571
00:18:56,080 --> 00:18:57,679
approach to disabling that was very

572
00:18:57,679 --> 00:18:59,600
similar we wanted to find out how did

573
00:18:59,600 --> 00:19:02,080
the developers intend for the watchdog

574
00:19:02,080 --> 00:19:03,840
to be enabled or disabled

575
00:19:03,840 --> 00:19:05,520
if we could use that we would pause the

576
00:19:05,520 --> 00:19:08,080
cpus using the same script and overwrite

577
00:19:08,080 --> 00:19:09,760
the watchdog timer values and then

578
00:19:09,760 --> 00:19:11,919
validate that it was disabled so if we

579
00:19:11,919 --> 00:19:13,679
look at the atmel data sheet sam talked

580
00:19:13,679 --> 00:19:15,919
a little bit about the osnp process

581
00:19:15,919 --> 00:19:18,320
earlier on and the importance of of you

582
00:19:18,320 --> 00:19:20,640
know using data sheets and documentation

583
00:19:20,640 --> 00:19:23,520
we were able to find very quickly the

584
00:19:23,520 --> 00:19:25,520
register that controls the watchdog

585
00:19:25,520 --> 00:19:27,440
timer and the specific bit here which is

586
00:19:27,440 --> 00:19:30,320
the wd dis bit that if it's zero it

587
00:19:30,320 --> 00:19:32,720
enables it if it's one it disables it so

588
00:19:32,720 --> 00:19:34,240
obviously that was the change we wanted

589
00:19:34,240 --> 00:19:35,200
to make

590
00:19:35,200 --> 00:19:36,880
a little further down in the data sheet

591
00:19:36,880 --> 00:19:39,360
we could see the address of where the

592
00:19:39,360 --> 00:19:41,840
watchdog timer mode register is loaded

593
00:19:41,840 --> 00:19:43,919
and more importantly the access so it's

594
00:19:43,919 --> 00:19:46,320
a read write once register that's a

595
00:19:46,320 --> 00:19:48,240
mouthful but what that means is if the

596
00:19:48,240 --> 00:19:51,039
cpu or user or anyone modifies either

597
00:19:51,039 --> 00:19:52,880
read or write from that register at any

598
00:19:52,880 --> 00:19:55,120
point it's then disabled indefinitely

599
00:19:55,120 --> 00:19:57,200
from that point on until we reboot so we

600
00:19:57,200 --> 00:19:59,120
knew that we had to pause or break point

601
00:19:59,120 --> 00:20:01,120
before that register was ever touched in

602
00:20:01,120 --> 00:20:03,520
any way and then again the 15th bit here

603
00:20:03,520 --> 00:20:06,159
you'll see is that wd dis so when we

604
00:20:06,159 --> 00:20:07,760
patch this out we'll be working on the

605
00:20:07,760 --> 00:20:11,600
second byte of a d word or the 15th bit

606
00:20:11,600 --> 00:20:13,760
as we watch the boot up we'll see that

607
00:20:13,760 --> 00:20:16,080
the that this is actually the watchdog

608
00:20:16,080 --> 00:20:18,320
timer mode register value so the the

609
00:20:18,320 --> 00:20:20,799
register address that we saw before up

610
00:20:20,799 --> 00:20:22,480
here is actually pointing to that and

611
00:20:22,480 --> 00:20:24,480
the value is right here

612
00:20:24,480 --> 00:20:27,360
and by if you recall the second byte

613
00:20:27,360 --> 00:20:29,200
here that 2f is the one that has the

614
00:20:29,200 --> 00:20:31,760
15th bit that's what we wanted to modify

615
00:20:31,760 --> 00:20:34,159
so again very similar commands here we

616
00:20:34,159 --> 00:20:36,559
take the memory at that address and one

617
00:20:36,559 --> 00:20:38,480
byte further in so instead of ending in

618
00:20:38,480 --> 00:20:41,520
44 right we go to 45 for the second byte

619
00:20:41,520 --> 00:20:44,240
that's a 2f and obviously we want to

620
00:20:44,240 --> 00:20:46,240
change that the leading bit or the 15th

621
00:20:46,240 --> 00:20:48,720
bit from a 0 to a one that changes to f

622
00:20:48,720 --> 00:20:51,679
to af and that gives us our actual patch

623
00:20:51,679 --> 00:20:53,679
and by hitting go we continue in the

624
00:20:53,679 --> 00:20:55,360
which watchdog timer is disabled and we

625
00:20:55,360 --> 00:20:57,520
thought that was cool af

626
00:20:57,520 --> 00:20:58,720
be here all week actually i'm leaving

627
00:20:58,720 --> 00:21:01,840
tonight okay so we do see the d ward is

628
00:21:01,840 --> 00:21:04,000
now actually modified the second byte

629
00:21:04,000 --> 00:21:05,760
for some reason it actually modified all

630
00:21:05,760 --> 00:21:07,440
four bytes we went back and tried to

631
00:21:07,440 --> 00:21:08,880
figure it out couldn't come up with any

632
00:21:08,880 --> 00:21:10,880
reason why after modifying one byte it

633
00:21:10,880 --> 00:21:12,559
changed the whole thing didn't matter it

634
00:21:12,559 --> 00:21:14,159
achieved our purposes we can see the

635
00:21:14,159 --> 00:21:16,480
watchdog timer disabled and then later

636
00:21:16,480 --> 00:21:17,760
on when the binaries were trying to

637
00:21:17,760 --> 00:21:19,520
access the watchdog timer they had no

638
00:21:19,520 --> 00:21:21,440
context of it and of course they threw

639
00:21:21,440 --> 00:21:23,039
errors as well so this got us to where

640
00:21:23,039 --> 00:21:24,320
we needed to be

641
00:21:24,320 --> 00:21:27,360
okay so that's a lot of work just to

642
00:21:27,360 --> 00:21:29,440
begin analysis we've accomplished

643
00:21:29,440 --> 00:21:31,280
literally nothing useful except giving

644
00:21:31,280 --> 00:21:33,360
us a jumping off point but it did give

645
00:21:33,360 --> 00:21:35,039
us a great place to start uh software

646
00:21:35,039 --> 00:21:36,880
hacking and sam could take over for that

647
00:21:36,880 --> 00:21:40,080
for a while i know don't leave yet

648
00:21:40,080 --> 00:21:41,679
um i know we're here all for you know

649
00:21:41,679 --> 00:21:43,120
hardware and stuff but there is some

650
00:21:43,120 --> 00:21:45,760
cool stuff here so um the first thing

651
00:21:45,760 --> 00:21:48,320
that we we want to do is try to find the

652
00:21:48,320 --> 00:21:50,320
most impactful

653
00:21:50,320 --> 00:21:52,559
attack vectors and obviously as we all

654
00:21:52,559 --> 00:21:55,679
know remote attack vectors are juicy so

655
00:21:55,679 --> 00:21:58,400
doing a simple nmap scan we can see that

656
00:21:58,400 --> 00:22:00,640
the this access control board is

657
00:22:00,640 --> 00:22:02,240
actually indeed running a whole web

658
00:22:02,240 --> 00:22:04,640
server and then it had another listening

659
00:22:04,640 --> 00:22:06,720
port that we eventually found out later

660
00:22:06,720 --> 00:22:08,799
is how it communicates with the onguard

661
00:22:08,799 --> 00:22:12,799
software but look browsing to the

662
00:22:12,799 --> 00:22:14,559
um the web server that's running on the

663
00:22:14,559 --> 00:22:17,120
device we noticed that it had a full

664
00:22:17,120 --> 00:22:19,600
login page and we'll show you just how

665
00:22:19,600 --> 00:22:22,159
impactful that is later but um it was

666
00:22:22,159 --> 00:22:23,840
pretty impressive to see that it's doing

667
00:22:23,840 --> 00:22:26,159
like cookie validation there's users

668
00:22:26,159 --> 00:22:28,080
accounts and stuff all built into just

669
00:22:28,080 --> 00:22:30,480
this little device however

670
00:22:30,480 --> 00:22:33,679
none of the badge or door access control

671
00:22:33,679 --> 00:22:34,880
uh like

672
00:22:34,880 --> 00:22:36,960
settings were managed through this so

673
00:22:36,960 --> 00:22:39,440
this was pretty much a web server meant

674
00:22:39,440 --> 00:22:41,679
to get the device provisioned and set up

675
00:22:41,679 --> 00:22:43,120
on the network for the first time and

676
00:22:43,120 --> 00:22:44,880
things like that so this is like the

677
00:22:44,880 --> 00:22:46,720
network settings that you can see where

678
00:22:46,720 --> 00:22:49,600
it's um you can set up like dns and ip

679
00:22:49,600 --> 00:22:51,360
addresses and things like that really

680
00:22:51,360 --> 00:22:53,760
nothing to do with badge management or

681
00:22:53,760 --> 00:22:55,760
anything but um

682
00:22:55,760 --> 00:22:58,000
we did notice from this

683
00:22:58,000 --> 00:23:00,320
that a lot of the user inputs had

684
00:23:00,320 --> 00:23:01,840
restricted characters and things like

685
00:23:01,840 --> 00:23:04,000
that so got us kind of

686
00:23:04,000 --> 00:23:05,760
curious into

687
00:23:05,760 --> 00:23:07,679
why they want those characters so

688
00:23:07,679 --> 00:23:10,000
restricted and that

689
00:23:10,000 --> 00:23:12,880
could be because all of the websites

690
00:23:12,880 --> 00:23:15,280
are all those pages were dynamically

691
00:23:15,280 --> 00:23:17,760
created in cgi bin files so if you're

692
00:23:17,760 --> 00:23:21,440
unfamiliar cgi bins are compiled in this

693
00:23:21,440 --> 00:23:24,240
case c code that dynamically create web

694
00:23:24,240 --> 00:23:26,640
pages and whatnot um

695
00:23:26,640 --> 00:23:28,720
and when we interact with them they all

696
00:23:28,720 --> 00:23:32,240
run as root so us logging into the login

697
00:23:32,240 --> 00:23:34,880
page you can see it is running as root

698
00:23:34,880 --> 00:23:36,480
so this is exciting

699
00:23:36,480 --> 00:23:38,480
if we can find any vulnerabilities in

700
00:23:38,480 --> 00:23:40,960
the cgi files we could potentially have

701
00:23:40,960 --> 00:23:42,159
we don't even have to escalate our

702
00:23:42,159 --> 00:23:44,240
privileges at all

703
00:23:44,240 --> 00:23:47,360
and um little cherry on top all of these

704
00:23:47,360 --> 00:23:50,080
binaries were compiled with symbols so

705
00:23:50,080 --> 00:23:53,360
looking at them in ida pro

706
00:23:53,360 --> 00:23:54,799
you don't have to even guess what the

707
00:23:54,799 --> 00:23:56,000
functions do you can just read the

708
00:23:56,000 --> 00:23:58,559
function name so that was also really

709
00:23:58,559 --> 00:24:00,000
really great

710
00:24:00,000 --> 00:24:01,600
so this is when we started to actually

711
00:24:01,600 --> 00:24:04,159
start hunting for system calls and try

712
00:24:04,159 --> 00:24:06,480
to get potential command injections

713
00:24:06,480 --> 00:24:08,000
because we already know that we don't

714
00:24:08,000 --> 00:24:09,039
have to

715
00:24:09,039 --> 00:24:10,880
escalate our privileges if we can get

716
00:24:10,880 --> 00:24:13,120
any code to arbitrary code to execute

717
00:24:13,120 --> 00:24:15,120
from those cgi bin files we would

718
00:24:15,120 --> 00:24:17,360
already have root access so looking for

719
00:24:17,360 --> 00:24:18,559
a system

720
00:24:18,559 --> 00:24:20,720
this is the call to system we found that

721
00:24:20,720 --> 00:24:22,640
it was wrapped by merck system for some

722
00:24:22,640 --> 00:24:24,320
reason but um

723
00:24:24,320 --> 00:24:25,760
whatever and

724
00:24:25,760 --> 00:24:28,000
the entire list here i don't expect you

725
00:24:28,000 --> 00:24:29,520
to read it i just wanted to show you the

726
00:24:29,520 --> 00:24:30,480
length

727
00:24:30,480 --> 00:24:32,400
x refing that merck system

728
00:24:32,400 --> 00:24:35,360
there was a handful and and plus three

729
00:24:35,360 --> 00:24:36,720
handfuls i would say

730
00:24:36,720 --> 00:24:40,000
um uh size of the system calls where

731
00:24:40,000 --> 00:24:42,159
all of these could be potential um

732
00:24:42,159 --> 00:24:43,600
targets for us so that's what we started

733
00:24:43,600 --> 00:24:44,840
to look at

734
00:24:44,840 --> 00:24:46,960
however if you're familiar with command

735
00:24:46,960 --> 00:24:48,640
injections and format string

736
00:24:48,640 --> 00:24:50,240
vulnerabilities and things like that not

737
00:24:50,240 --> 00:24:52,159
all of them are created equal so you can

738
00:24:52,159 --> 00:24:54,320
see for instance this called a system

739
00:24:54,320 --> 00:24:55,200
has a

740
00:24:55,200 --> 00:24:56,799
static

741
00:24:56,799 --> 00:24:59,279
argument here where there's no user

742
00:24:59,279 --> 00:25:02,400
input so this is kind of boring so we

743
00:25:02,400 --> 00:25:03,919
did go through a handful of these until

744
00:25:03,919 --> 00:25:06,720
we found one like this next one

745
00:25:06,720 --> 00:25:09,919
that does take user input so like we saw

746
00:25:09,919 --> 00:25:13,039
in the web page we actually can control

747
00:25:13,039 --> 00:25:15,440
uh the host name and then

748
00:25:15,440 --> 00:25:16,799
um you know

749
00:25:16,799 --> 00:25:17,600
that

750
00:25:17,600 --> 00:25:19,279
if we can control that from a uh

751
00:25:19,279 --> 00:25:21,520
attacker's perspective when it goes down

752
00:25:21,520 --> 00:25:23,440
here and reads

753
00:25:23,440 --> 00:25:26,000
the uh with the format string with sn

754
00:25:26,000 --> 00:25:29,200
printf into this this uh variable and

755
00:25:29,200 --> 00:25:30,400
then calls

756
00:25:30,400 --> 00:25:32,480
merck system that could be a potential

757
00:25:32,480 --> 00:25:34,799
command injection so this really got our

758
00:25:34,799 --> 00:25:37,760
attention going um but like we said

759
00:25:37,760 --> 00:25:39,760
before now that we know where the

760
00:25:39,760 --> 00:25:42,720
input's coming from we had to go back to

761
00:25:42,720 --> 00:25:44,720
the original how do we bypass these

762
00:25:44,720 --> 00:25:47,200
character restrictions that they claim

763
00:25:47,200 --> 00:25:49,760
um and this was another kind of uh hold

764
00:25:49,760 --> 00:25:52,799
my beer i got this moment so uh we uh we

765
00:25:52,799 --> 00:25:55,440
got into it um in the first

766
00:25:55,440 --> 00:25:57,039
layer of black listing that we

767
00:25:57,039 --> 00:25:59,840
identified was the client side

768
00:25:59,840 --> 00:26:01,600
and this was done in javascript where

769
00:26:01,600 --> 00:26:03,760
you can pretty much directly see that

770
00:26:03,760 --> 00:26:06,240
this valid character string list

771
00:26:06,240 --> 00:26:09,120
one-to-one lines up with um pretty much

772
00:26:09,120 --> 00:26:11,760
that that uh the blacklisting shown

773
00:26:11,760 --> 00:26:12,960
above

774
00:26:12,960 --> 00:26:15,200
so that was interesting and then the

775
00:26:15,200 --> 00:26:17,600
back end also had some character back uh

776
00:26:17,600 --> 00:26:20,559
blacklisting as well through this xxx

777
00:26:20,559 --> 00:26:22,720
xss string test

778
00:26:22,720 --> 00:26:24,000
while we're not trying to do a

779
00:26:24,000 --> 00:26:25,600
cross-site scripting attack a lot of

780
00:26:25,600 --> 00:26:26,960
these characters that you see in this

781
00:26:26,960 --> 00:26:29,039
list here are still very useful for

782
00:26:29,039 --> 00:26:30,559
command injections like the forward

783
00:26:30,559 --> 00:26:33,039
slash the ampersand and the semicolon

784
00:26:33,039 --> 00:26:34,559
and things like that

785
00:26:34,559 --> 00:26:37,679
so what we did is tried it out we

786
00:26:37,679 --> 00:26:39,120
started with this simple command

787
00:26:39,120 --> 00:26:40,720
injection we wanted to see if the device

788
00:26:40,720 --> 00:26:43,279
would sleep for 10 seconds for instance

789
00:26:43,279 --> 00:26:45,279
so over the browser of course the

790
00:26:45,279 --> 00:26:47,679
javascript kicks in and tells you that

791
00:26:47,679 --> 00:26:50,080
contains illegal characters and doesn't

792
00:26:50,080 --> 00:26:53,120
even post the data to the the backend

793
00:26:53,120 --> 00:26:57,440
cgi script or the cgi binary

794
00:26:57,440 --> 00:26:59,919
however if you use curl no javascript

795
00:26:59,919 --> 00:27:02,960
runs so you can see that we did get

796
00:27:02,960 --> 00:27:05,039
some of our command we get the sigil

797
00:27:05,039 --> 00:27:08,159
opening parentheses and a sleep however

798
00:27:08,159 --> 00:27:10,480
it seemed to get truncated on the space

799
00:27:10,480 --> 00:27:12,880
so space wasn't a part of any of those

800
00:27:12,880 --> 00:27:15,120
characters that we saw being blacklisted

801
00:27:15,120 --> 00:27:16,240
from that

802
00:27:16,240 --> 00:27:19,440
xss string test however we found out

803
00:27:19,440 --> 00:27:20,960
later that the

804
00:27:20,960 --> 00:27:22,880
post data

805
00:27:22,880 --> 00:27:25,840
like the parsing of the post data um

806
00:27:25,840 --> 00:27:29,120
would split on either an equals

807
00:27:29,120 --> 00:27:31,439
3d

808
00:27:32,320 --> 00:27:35,200
equals or space so 20.

809
00:27:35,200 --> 00:27:37,360
um that's what we we had to get around

810
00:27:37,360 --> 00:27:39,200
too however

811
00:27:39,200 --> 00:27:40,240
the linux

812
00:27:40,240 --> 00:27:42,399
command or linux interpreter you know

813
00:27:42,399 --> 00:27:44,320
for the shell does not

814
00:27:44,320 --> 00:27:46,880
um care if it's a space or any other

815
00:27:46,880 --> 00:27:49,440
white space character so in for this

816
00:27:49,440 --> 00:27:50,960
instance what's actually highlighted in

817
00:27:50,960 --> 00:27:54,159
red there is a tab so that seemed to be

818
00:27:54,159 --> 00:27:57,200
just fine it got past all of those um

819
00:27:57,200 --> 00:27:59,279
blacklisting and we were able to inject

820
00:27:59,279 --> 00:28:02,960
this entire command into the hostname

821
00:28:02,960 --> 00:28:05,600
and we'll walk through exactly how that

822
00:28:05,600 --> 00:28:07,200
that hostname

823
00:28:07,200 --> 00:28:09,360
command injection works here

824
00:28:09,360 --> 00:28:11,360
it is actually important to point out

825
00:28:11,360 --> 00:28:13,279
that this whole command that is

826
00:28:13,279 --> 00:28:15,440
highlighted here actually

827
00:28:15,440 --> 00:28:18,240
only ran at boot so

828
00:28:18,240 --> 00:28:19,520
originally we're hoping to get an

829
00:28:19,520 --> 00:28:21,679
instantaneous command injection however

830
00:28:21,679 --> 00:28:24,640
the host name does not get refreshed

831
00:28:24,640 --> 00:28:27,520
until a new um like the new boot up

832
00:28:27,520 --> 00:28:29,039
cycle and

833
00:28:29,039 --> 00:28:31,200
most importantly it's also

834
00:28:31,200 --> 00:28:32,880
during when the device is trying to get

835
00:28:32,880 --> 00:28:35,279
an ip address early on in the network

836
00:28:35,279 --> 00:28:37,440
stack startup

837
00:28:37,440 --> 00:28:39,679
so if we look at actually

838
00:28:39,679 --> 00:28:43,200
the reason why we nest another one is

839
00:28:43,200 --> 00:28:45,360
that we want to actually have an ip

840
00:28:45,360 --> 00:28:48,320
address for subsequence two for this

841
00:28:48,320 --> 00:28:50,720
second command to work we already we

842
00:28:50,720 --> 00:28:52,799
have to have some kind of networking set

843
00:28:52,799 --> 00:28:54,320
up so

844
00:28:54,320 --> 00:28:56,720
we nest the first one in subsequence one

845
00:28:56,720 --> 00:28:58,880
and then subsequence two is now just

846
00:28:58,880 --> 00:29:02,640
pulling commands um directly from a

847
00:29:02,640 --> 00:29:03,600
local

848
00:29:03,600 --> 00:29:05,360
in this case this is our laptop's ip

849
00:29:05,360 --> 00:29:06,640
address so it's just pulling commands

850
00:29:06,640 --> 00:29:08,320
from a web server there and then piping

851
00:29:08,320 --> 00:29:10,320
it directly into ash and the beauty of

852
00:29:10,320 --> 00:29:12,880
that is we can now bypass

853
00:29:12,880 --> 00:29:14,720
all of the command blacklisting that we

854
00:29:14,720 --> 00:29:16,240
saw or the character blacklisting that

855
00:29:16,240 --> 00:29:18,159
we saw earlier because it's not going

856
00:29:18,159 --> 00:29:20,399
through any of that stuff and you can

857
00:29:20,399 --> 00:29:23,520
see if we actually just cur like w get

858
00:29:23,520 --> 00:29:25,440
it our localhost that's running this

859
00:29:25,440 --> 00:29:28,320
server um it prints out this whole socat

860
00:29:28,320 --> 00:29:30,880
reverse shell um interpreter and there

861
00:29:30,880 --> 00:29:33,840
is forward slashes commas ampersands all

862
00:29:33,840 --> 00:29:36,559
the stuff that we we like again um back

863
00:29:36,559 --> 00:29:38,159
back in our command

864
00:29:38,159 --> 00:29:41,360
so um i'll let uh steve kind of walk you

865
00:29:41,360 --> 00:29:43,360
through the impact of that

866
00:29:43,360 --> 00:29:45,120
all right so that ended up being the

867
00:29:45,120 --> 00:29:47,039
first cbe filed you may have seen at the

868
00:29:47,039 --> 00:29:49,279
top of the slides there but at this

869
00:29:49,279 --> 00:29:51,200
point to us it was just an authenticated

870
00:29:51,200 --> 00:29:53,200
command injection which is is kind of

871
00:29:53,200 --> 00:29:55,919
boring so we decided to look into how

872
00:29:55,919 --> 00:29:57,919
authentication was being handled or

873
00:29:57,919 --> 00:30:00,240
mishandled and that's what we're going

874
00:30:00,240 --> 00:30:02,640
to cover now so cookie validation or

875
00:30:02,640 --> 00:30:05,440
session management is typically done by

876
00:30:05,440 --> 00:30:07,360
in a centralized method applied the same

877
00:30:07,360 --> 00:30:10,159
way to all of the cgi pages however in

878
00:30:10,159 --> 00:30:12,000
this case the developers did it on a per

879
00:30:12,000 --> 00:30:13,919
cgi basis and they did it differently

880
00:30:13,919 --> 00:30:15,440
for almost every single one of them for

881
00:30:15,440 --> 00:30:18,240
some reason which was hilarious and and

882
00:30:18,240 --> 00:30:20,240
really led to some failures

883
00:30:20,240 --> 00:30:23,520
ultimately what we did is we curled here

884
00:30:23,520 --> 00:30:25,600
uh our our command injection attack and

885
00:30:25,600 --> 00:30:29,159
we just added a bogus session id of

886
00:30:29,159 --> 00:30:31,279
1337-1337 obviously this should not be a

887
00:30:31,279 --> 00:30:33,919
valid session cookie and it's not

888
00:30:33,919 --> 00:30:36,240
and what we'll see that's a post request

889
00:30:36,240 --> 00:30:37,520
what we'll see here is that the

890
00:30:37,520 --> 00:30:39,679
javascript returns a timeout and an

891
00:30:39,679 --> 00:30:41,600
error so it looks like it fails from the

892
00:30:41,600 --> 00:30:44,000
front end but on the back end or on the

893
00:30:44,000 --> 00:30:45,919
console i should say the debug messages

894
00:30:45,919 --> 00:30:47,600
show that the network data actually was

895
00:30:47,600 --> 00:30:50,000
applied before that they process that

896
00:30:50,000 --> 00:30:51,840
session cookie so you can just issue

897
00:30:51,840 --> 00:30:52,880
these commands completely

898
00:30:52,880 --> 00:30:55,200
unauthenticated if you're using a post

899
00:30:55,200 --> 00:30:57,200
uh versus a get and it'll still run all

900
00:30:57,200 --> 00:30:58,720
the network commands before failing

901
00:30:58,720 --> 00:31:01,039
authentication so this was kind of funny

902
00:31:01,039 --> 00:31:02,559
that developers had just completely

903
00:31:02,559 --> 00:31:04,880
mailed it in on on post requests

904
00:31:04,880 --> 00:31:07,600
pun intended so that gave us now an

905
00:31:07,600 --> 00:31:10,159
unauthenticated command injection but

906
00:31:10,159 --> 00:31:12,000
ultimately as sam mentioned we still

907
00:31:12,000 --> 00:31:13,600
have to wait for the device to reboot

908
00:31:13,600 --> 00:31:15,519
and we're very very impatient people so

909
00:31:15,519 --> 00:31:17,200
we wanted to next find a way to force

910
00:31:17,200 --> 00:31:19,360
the device to reboot so we could trigger

911
00:31:19,360 --> 00:31:22,080
that command injection hostname to load

912
00:31:22,080 --> 00:31:23,279
at will

913
00:31:23,279 --> 00:31:24,559
that brought us to the filing of the

914
00:31:24,559 --> 00:31:27,279
second cve out of eight which is our

915
00:31:27,279 --> 00:31:29,200
firmware upload buffer overflow

916
00:31:29,200 --> 00:31:31,600
vulnerability when we started poking at

917
00:31:31,600 --> 00:31:33,440
some of the more recent firmware updates

918
00:31:33,440 --> 00:31:36,720
we found that there was a diagnostic

919
00:31:36,720 --> 00:31:38,880
menu here that allowed you to load a

920
00:31:38,880 --> 00:31:40,640
file a firmware file and push it to the

921
00:31:40,640 --> 00:31:42,880
device but more importantly it said hey

922
00:31:42,880 --> 00:31:44,320
this will reboot the board and that's

923
00:31:44,320 --> 00:31:45,679
exactly what we're looking for so it

924
00:31:45,679 --> 00:31:47,039
looked pretty good

925
00:31:47,039 --> 00:31:48,880
so the first thing we did

926
00:31:48,880 --> 00:31:51,279
is we we tried to load a file but we saw

927
00:31:51,279 --> 00:31:52,799
when we were looking at the developer

928
00:31:52,799 --> 00:31:54,320
tools and the network data that the

929
00:31:54,320 --> 00:31:55,919
cookie validation was actually being

930
00:31:55,919 --> 00:31:57,679
done right for this page

931
00:31:57,679 --> 00:31:59,519
at least on the front end so when we

932
00:31:59,519 --> 00:32:02,320
looked at the javascript and the html

933
00:32:02,320 --> 00:32:04,559
iframe so it was properly handling

934
00:32:04,559 --> 00:32:06,399
session manager handling session

935
00:32:06,399 --> 00:32:08,240
management for this page

936
00:32:08,240 --> 00:32:10,880
however if you just navigate directly to

937
00:32:10,880 --> 00:32:13,600
the cgi update file that's running

938
00:32:13,600 --> 00:32:16,080
behind this it skips the login process

939
00:32:16,080 --> 00:32:17,919
completely so there's no authentication

940
00:32:17,919 --> 00:32:20,399
done whatsoever and you can now upload

941
00:32:20,399 --> 00:32:22,720
files unauthenticated to the device so

942
00:32:22,720 --> 00:32:23,760
uh just

943
00:32:23,760 --> 00:32:25,360
complete joke at this point we kind of

944
00:32:25,360 --> 00:32:27,039
almost couldn't believe it so the first

945
00:32:27,039 --> 00:32:28,720
thing we did is we took a random file

946
00:32:28,720 --> 00:32:31,440
foobar.txt empty file and we just tried

947
00:32:31,440 --> 00:32:33,039
to upload it to the device

948
00:32:33,039 --> 00:32:35,120
sure enough it went through and started

949
00:32:35,120 --> 00:32:36,640
installing

950
00:32:36,640 --> 00:32:38,320
as a side note it also did some

951
00:32:38,320 --> 00:32:40,480
client-side checking to see if it was 15

952
00:32:40,480 --> 00:32:42,640
megs or larger but it did it wrong we're

953
00:32:42,640 --> 00:32:44,240
able to bypass that by modifying the

954
00:32:44,240 --> 00:32:47,039
javascript won't go into details on that

955
00:32:47,039 --> 00:32:48,799
ultimately the package failed here and

956
00:32:48,799 --> 00:32:50,720
we got this error that said the package

957
00:32:50,720 --> 00:32:52,720
signature is invalid which is

958
00:32:52,720 --> 00:32:54,559
interesting because it tells us it has

959
00:32:54,559 --> 00:32:56,799
an invalid signature size that kind of

960
00:32:56,799 --> 00:32:58,240
triggered a thought for us and maybe

961
00:32:58,240 --> 00:33:00,320
it's grabbing the size from the file

962
00:33:00,320 --> 00:33:01,519
it's like

963
00:33:01,519 --> 00:33:03,440
statically or versus dynamically

964
00:33:03,440 --> 00:33:05,200
building or counting the bytes and in

965
00:33:05,200 --> 00:33:06,960
fact that's exactly exactly what it was

966
00:33:06,960 --> 00:33:07,840
doing

967
00:33:07,840 --> 00:33:09,279
so if i can draw your attention to

968
00:33:09,279 --> 00:33:11,120
bullet point one here when we look at

969
00:33:11,120 --> 00:33:13,039
what's happening in the code behind this

970
00:33:13,039 --> 00:33:15,120
processing the firmware update we have a

971
00:33:15,120 --> 00:33:17,600
file open or an f open and that gets

972
00:33:17,600 --> 00:33:20,240
pushed to uh to update file just above

973
00:33:20,240 --> 00:33:23,279
it there's a static size buffer malik

974
00:33:23,279 --> 00:33:26,320
tier of 190 hex bytes and that is where

975
00:33:26,320 --> 00:33:28,320
the file is going to get pushed to

976
00:33:28,320 --> 00:33:30,960
then what it does is it does an fseq or

977
00:33:30,960 --> 00:33:32,480
a file seek to get to the end of the

978
00:33:32,480 --> 00:33:34,240
file right here

979
00:33:34,240 --> 00:33:36,000
and it actually pulls the last three

980
00:33:36,000 --> 00:33:38,399
ascii bytes from the file signature to

981
00:33:38,399 --> 00:33:40,960
determine what the size is shortly after

982
00:33:40,960 --> 00:33:42,559
that you'll see another stir to l where

983
00:33:42,559 --> 00:33:44,799
it converts those three ascii bytes to

984
00:33:44,799 --> 00:33:47,600
along and those then become the size

985
00:33:47,600 --> 00:33:50,320
that is used here to uh to read into the

986
00:33:50,320 --> 00:33:52,000
file and to write to the buffer so this

987
00:33:52,000 --> 00:33:54,159
is our we we were able to find this

988
00:33:54,159 --> 00:33:55,440
statically and see that this was

989
00:33:55,440 --> 00:33:57,519
definitely going to be a buffer overflow

990
00:33:57,519 --> 00:33:59,919
so this is now a valid firmware file and

991
00:33:59,919 --> 00:34:02,720
you can see the last hex 158 bytes here

992
00:34:02,720 --> 00:34:05,440
are an ascii value an ascii blob of

993
00:34:05,440 --> 00:34:08,159
base64 encoded data that represents the

994
00:34:08,159 --> 00:34:10,480
file signature but most importantly the

995
00:34:10,480 --> 00:34:12,239
last three bytes as we talked about

996
00:34:12,239 --> 00:34:14,879
specify the size of that signature and

997
00:34:14,879 --> 00:34:17,280
that is where it is parsing it from so

998
00:34:17,280 --> 00:34:18,960
instead of programmatically parsing the

999
00:34:18,960 --> 00:34:21,119
size of the update file and passing that

1000
00:34:21,119 --> 00:34:23,199
to the buffer instead they allow user

1001
00:34:23,199 --> 00:34:25,040
input because obviously we control the

1002
00:34:25,040 --> 00:34:26,639
file that's being uploaded and whatever

1003
00:34:26,639 --> 00:34:28,879
values are there

1004
00:34:28,879 --> 00:34:30,480
so exploiting the buffer overflow we

1005
00:34:30,480 --> 00:34:34,800
created a huge firmware file with uh uh

1006
00:34:34,800 --> 00:34:36,480
increasing pattern just like you'd see

1007
00:34:36,480 --> 00:34:38,800
in like a metasploit pattern creation so

1008
00:34:38,800 --> 00:34:40,320
that we knew what was being overwritten

1009
00:34:40,320 --> 00:34:42,879
or or modified or smashed and obviously

1010
00:34:42,879 --> 00:34:45,199
we set the last we set the size to

1011
00:34:45,199 --> 00:34:47,040
999.999

1012
00:34:47,040 --> 00:34:50,560
it's over 9000 uh so we we unfortunately

1013
00:34:50,560 --> 00:34:51,839
we didn't get we didn't need it all but

1014
00:34:51,839 --> 00:34:54,960
we didn't get all of that copied in but

1015
00:34:54,960 --> 00:34:57,040
because it truncates the last three

1016
00:34:57,040 --> 00:34:59,839
bytes it takes the fold size here of 999

1017
00:34:59,839 --> 00:35:02,320
converts it to that long and uses it in

1018
00:35:02,320 --> 00:35:04,720
the file read and

1019
00:35:04,720 --> 00:35:07,520
we then realized after that

1020
00:35:07,520 --> 00:35:08,880
shortly later there's a branch

1021
00:35:08,880 --> 00:35:10,880
instruction that references the register

1022
00:35:10,880 --> 00:35:12,800
r3 and so we're going to hit this branch

1023
00:35:12,800 --> 00:35:15,599
no matter what and r3 if you look has

1024
00:35:15,599 --> 00:35:18,640
our pattern data so davu comes from the

1025
00:35:18,640 --> 00:35:20,160
pattern that we pushed into the firmware

1026
00:35:20,160 --> 00:35:22,000
file so we knew that we could

1027
00:35:22,000 --> 00:35:24,480
arbitrarily branch to whatever location

1028
00:35:24,480 --> 00:35:26,480
we wanted to by replacing that pattern

1029
00:35:26,480 --> 00:35:28,000
with just a pointer

1030
00:35:28,000 --> 00:35:29,760
and we chose to replace it with a

1031
00:35:29,760 --> 00:35:31,760
pointer to reboot now you're probably

1032
00:35:31,760 --> 00:35:33,520
thinking why didn't we do rock chaining

1033
00:35:33,520 --> 00:35:35,359
and gadgets and get full remote code

1034
00:35:35,359 --> 00:35:37,680
execution we could have probably we

1035
00:35:37,680 --> 00:35:39,359
looked at a lot of the gadgets for rop

1036
00:35:39,359 --> 00:35:41,359
uh techniques they were pretty ugly they

1037
00:35:41,359 --> 00:35:42,960
were not real conducive to what we

1038
00:35:42,960 --> 00:35:45,119
wanted to do and ultimately we knew that

1039
00:35:45,119 --> 00:35:46,800
we could achieve our purchase our

1040
00:35:46,800 --> 00:35:48,800
purpose by just chaining together this

1041
00:35:48,800 --> 00:35:50,640
arbitrary reboot with our command

1042
00:35:50,640 --> 00:35:52,640
injection from before and achieve full

1043
00:35:52,640 --> 00:35:55,200
rce unauthenticated anyway so this may

1044
00:35:55,200 --> 00:35:57,280
be an exercise for later if we get uh

1045
00:35:57,280 --> 00:35:59,040
interested in creative but

1046
00:35:59,040 --> 00:36:01,359
but we had our full rce

1047
00:36:01,359 --> 00:36:03,040
so we're only going to cover the two of

1048
00:36:03,040 --> 00:36:04,560
these eight vulnerabilities today we

1049
00:36:04,560 --> 00:36:05,920
ended up submitting eight zero day

1050
00:36:05,920 --> 00:36:08,400
vulnerabilities to carrier linnell uh

1051
00:36:08,400 --> 00:36:09,920
the two that we covered today have a

1052
00:36:09,920 --> 00:36:12,240
base score of nine and 10.00 10

1053
00:36:12,240 --> 00:36:14,079
obviously being the highest cvss score

1054
00:36:14,079 --> 00:36:16,640
possible it is authentic unauthenticated

1055
00:36:16,640 --> 00:36:18,079
command injection

1056
00:36:18,079 --> 00:36:20,560
and there have been patches created for

1057
00:36:20,560 --> 00:36:22,640
all of these except for one i believe

1058
00:36:22,640 --> 00:36:24,400
it's actually coming out tomorrow is

1059
00:36:24,400 --> 00:36:26,400
what i've heard the latest update

1060
00:36:26,400 --> 00:36:28,960
it is an authenticated command injection

1061
00:36:28,960 --> 00:36:30,720
uh which helps a little bit because they

1062
00:36:30,720 --> 00:36:32,240
will have to be logged in to exploit

1063
00:36:32,240 --> 00:36:33,920
that the rest of these do have patches

1064
00:36:33,920 --> 00:36:34,880
available

1065
00:36:34,880 --> 00:36:36,320
as we looked further

1066
00:36:36,320 --> 00:36:38,640
in the research process and talking with

1067
00:36:38,640 --> 00:36:41,200
the manufacturer and the board vendor we

1068
00:36:41,200 --> 00:36:43,520
found out that not just the 4420 we

1069
00:36:43,520 --> 00:36:45,280
looked at was vulnerable but all of

1070
00:36:45,280 --> 00:36:47,119
these other panels as well including

1071
00:36:47,119 --> 00:36:49,040
their flagship and and most common

1072
00:36:49,040 --> 00:36:51,119
panels that they use worldwide and

1073
00:36:51,119 --> 00:36:53,440
furthermore as recently as yesterday had

1074
00:36:53,440 --> 00:36:54,560
a conversation with the board

1075
00:36:54,560 --> 00:36:57,280
manufacturer and they said yes any oem

1076
00:36:57,280 --> 00:36:59,599
partner that uses these boards is also

1077
00:36:59,599 --> 00:37:01,119
vulnerable so it doesn't just extend to

1078
00:37:01,119 --> 00:37:03,040
linnell it's every single oem partner

1079
00:37:03,040 --> 00:37:04,560
that uses the mercury board so they've

1080
00:37:04,560 --> 00:37:06,640
been working with them for for some time

1081
00:37:06,640 --> 00:37:08,400
here we don't know what the scope or

1082
00:37:08,400 --> 00:37:10,000
scale that is i do know there was an

1083
00:37:10,000 --> 00:37:12,160
article from a few years ago that said

1084
00:37:12,160 --> 00:37:14,320
that uh mercury has tens of thousands of

1085
00:37:14,320 --> 00:37:17,200
sites worldwide uh they have uh

1086
00:37:17,200 --> 00:37:19,200
ownership with the uh partnerships with

1087
00:37:19,200 --> 00:37:21,119
the vast majority of the fortune 100

1088
00:37:21,119 --> 00:37:23,200
companies so there's a huge install base

1089
00:37:23,200 --> 00:37:25,119
for these devices

1090
00:37:25,119 --> 00:37:26,560
so last but not least sam's going to

1091
00:37:26,560 --> 00:37:28,400
take us home with some exploitation and

1092
00:37:28,400 --> 00:37:30,000
we'll finish off with a demo showing you

1093
00:37:30,000 --> 00:37:32,480
what we're able to ultimately accomplish

1094
00:37:32,480 --> 00:37:34,720
yeah thanks steve and so one of the the

1095
00:37:34,720 --> 00:37:36,880
things that we always do on our advanced

1096
00:37:36,880 --> 00:37:39,119
threat research team is try to bring it

1097
00:37:39,119 --> 00:37:41,680
full circle and actually make

1098
00:37:41,680 --> 00:37:44,480
a full proof of concept that could be

1099
00:37:44,480 --> 00:37:46,240
used you know out in the wild and show

1100
00:37:46,240 --> 00:37:47,119
how

1101
00:37:47,119 --> 00:37:49,520
these vulnerabilities could be

1102
00:37:49,520 --> 00:37:50,800
used so

1103
00:37:50,800 --> 00:37:52,800
of course hacking the planet the first

1104
00:37:52,800 --> 00:37:55,040
thing we want to do is find out how the

1105
00:37:55,040 --> 00:37:57,119
control board is actually interacting

1106
00:37:57,119 --> 00:37:59,280
with the door locks so how the relays

1107
00:37:59,280 --> 00:38:01,280
are triggered for those door locks

1108
00:38:01,280 --> 00:38:04,480
we wanted to create malware um sounds

1109
00:38:04,480 --> 00:38:07,200
sounds uh you know bad but uh yeah

1110
00:38:07,200 --> 00:38:09,280
create malware then we wanted to try to

1111
00:38:09,280 --> 00:38:11,200
force the door to either

1112
00:38:11,200 --> 00:38:13,680
unlock without having a badge or a valid

1113
00:38:13,680 --> 00:38:14,960
badge in that case

1114
00:38:14,960 --> 00:38:16,800
or and then also try to keep the door

1115
00:38:16,800 --> 00:38:18,720
locked like that could be a

1116
00:38:18,720 --> 00:38:20,800
fun mental exercise if you could think

1117
00:38:20,800 --> 00:38:23,119
of how to use that

1118
00:38:23,119 --> 00:38:24,960
then we also wanted to try to hide from

1119
00:38:24,960 --> 00:38:27,359
the monitoring software all good malware

1120
00:38:27,359 --> 00:38:28,800
shouldn't you know people shouldn't see

1121
00:38:28,800 --> 00:38:30,640
you out there so we wanted to try to

1122
00:38:30,640 --> 00:38:32,960
hide from the on guard server which we

1123
00:38:32,960 --> 00:38:35,839
didn't really cover here but security

1124
00:38:35,839 --> 00:38:38,400
guards and whatnot would be able to see

1125
00:38:38,400 --> 00:38:41,280
if the door has been unlocked or opened

1126
00:38:41,280 --> 00:38:42,720
forced opened

1127
00:38:42,720 --> 00:38:44,000
things like that we wanted to hide all

1128
00:38:44,000 --> 00:38:45,520
of that so it looks like the door has

1129
00:38:45,520 --> 00:38:46,960
never been touched

1130
00:38:46,960 --> 00:38:48,160
um so

1131
00:38:48,160 --> 00:38:49,599
with those symbols that we mentioned

1132
00:38:49,599 --> 00:38:50,560
earlier

1133
00:38:50,560 --> 00:38:53,200
we searched for relays and found how to

1134
00:38:53,200 --> 00:38:55,760
trigger all of the door relays um and

1135
00:38:55,760 --> 00:38:57,599
they were simple as just on a simple

1136
00:38:57,599 --> 00:39:00,800
i-octyl call where um

1137
00:39:00,800 --> 00:39:02,960
you pass the file descriptor for

1138
00:39:02,960 --> 00:39:05,280
whatever relay you want to control in a

1139
00:39:05,280 --> 00:39:09,440
simple parameter in this case f003

1140
00:39:09,440 --> 00:39:11,760
the unlock and lock they would have

1141
00:39:11,760 --> 00:39:13,440
different parameters but essentially the

1142
00:39:13,440 --> 00:39:14,640
same call

1143
00:39:14,640 --> 00:39:17,119
and the i'll show you exactly what

1144
00:39:17,119 --> 00:39:19,520
happened next um there won't be audio

1145
00:39:19,520 --> 00:39:21,359
but you can see a little led flashing

1146
00:39:21,359 --> 00:39:23,839
hopefully

1147
00:39:23,920 --> 00:39:25,200
so the

1148
00:39:25,200 --> 00:39:27,680
led that's flashing on d17 there that

1149
00:39:27,680 --> 00:39:28,560
was

1150
00:39:28,560 --> 00:39:30,720
us trying to unlock the door and there

1151
00:39:30,720 --> 00:39:32,320
was some monitoring process that we were

1152
00:39:32,320 --> 00:39:33,680
fighting with that really wanted to keep

1153
00:39:33,680 --> 00:39:36,400
the door locked so uh

1154
00:39:36,400 --> 00:39:38,240
instead of going about and actually

1155
00:39:38,240 --> 00:39:40,800
figuring out how to do it properly

1156
00:39:40,800 --> 00:39:42,640
we just wrapped it in a while loop and

1157
00:39:42,640 --> 00:39:44,720
called it every millisecond

1158
00:39:44,720 --> 00:39:46,960
and that kept the door unlocked as long

1159
00:39:46,960 --> 00:39:48,320
as we wanted so

1160
00:39:48,320 --> 00:39:50,160
or locked in that in that case so this

1161
00:39:50,160 --> 00:39:51,440
really um

1162
00:39:51,440 --> 00:39:52,800
was uh

1163
00:39:52,800 --> 00:39:54,960
how we we did it and kind of a really

1164
00:39:54,960 --> 00:39:56,480
cool little piece of malware that we

1165
00:39:56,480 --> 00:39:58,880
created super super simple um just

1166
00:39:58,880 --> 00:40:00,560
really calling their kernel kernel

1167
00:40:00,560 --> 00:40:02,000
driver to unlock the relays it's

1168
00:40:02,000 --> 00:40:03,920
probably worth stating uh for the record

1169
00:40:03,920 --> 00:40:05,359
in case we didn't say it we never

1170
00:40:05,359 --> 00:40:07,280
release any exploit code now where this

1171
00:40:07,280 --> 00:40:09,440
is all for internal demo purposes so

1172
00:40:09,440 --> 00:40:11,599
yeah that's a good point yeah

1173
00:40:11,599 --> 00:40:12,720
and so

1174
00:40:12,720 --> 00:40:14,319
finally we'll we'll leave you with a

1175
00:40:14,319 --> 00:40:16,319
demo here uh steve and i couldn't come

1176
00:40:16,319 --> 00:40:17,680
down all the way to california without

1177
00:40:17,680 --> 00:40:18,720
leaving us

1178
00:40:18,720 --> 00:40:21,520
our hollywood audition tape so um please

1179
00:40:21,520 --> 00:40:24,079
reach out with your agents to hire us

1180
00:40:24,079 --> 00:40:28,839
later so we'll start the video here

1181
00:40:31,590 --> 00:41:12,650
[Music]

1182
00:41:12,650 --> 00:41:19,590
[Applause]

1183
00:41:20,640 --> 00:41:23,750
[Music]

1184
00:41:30,720 --> 00:41:33,799
[Music]

1185
00:41:38,160 --> 00:41:39,280
hey sam

1186
00:41:39,280 --> 00:41:41,200
yeah i'm at the east entrance can you

1187
00:41:41,200 --> 00:41:43,599
hack the brain trust room

1188
00:41:43,599 --> 00:41:46,920
okay thanks

1189
00:41:47,130 --> 00:41:52,780
[Music]

1190
00:41:54,460 --> 00:41:57,619
[Applause]

1191
00:41:58,450 --> 00:42:01,750
[Music]

1192
00:42:09,040 --> 00:42:12,190
[Music]

1193
00:42:12,480 --> 00:42:13,599
all right well we want to thank

1194
00:42:13,599 --> 00:42:15,440
everybody for coming today again we're

1195
00:42:15,440 --> 00:42:16,960
going to be talking more about the rest

1196
00:42:16,960 --> 00:42:18,400
of the vulnerabilities in detail at

1197
00:42:18,400 --> 00:42:20,720
black hat on the software side of things

1198
00:42:20,720 --> 00:42:22,319
hopefully this is interesting we'll

1199
00:42:22,319 --> 00:42:23,920
stick around for a while if anybody has

1200
00:42:23,920 --> 00:42:28,200
any questions but thank you so much

1201
00:42:31,680 --> 00:42:35,118
do we have any questions okay

1202
00:42:38,680 --> 00:42:40,319
[Music]

1203
00:42:40,319 --> 00:42:42,880
so um

1204
00:42:42,880 --> 00:42:44,960
you boot you change the code so there

1205
00:42:44,960 --> 00:42:47,200
was no secure boot or it was that just

1206
00:42:47,200 --> 00:42:49,119
for your development board when you were

1207
00:42:49,119 --> 00:42:50,319
trying stuff

1208
00:42:50,319 --> 00:42:52,000
uh so let me make sure i got that right

1209
00:42:52,000 --> 00:42:53,359
there you're asking if there was any

1210
00:42:53,359 --> 00:42:55,359
secure boot on the u-boot yeah because

1211
00:42:55,359 --> 00:42:58,079
you changed some parameters and uh yep

1212
00:42:58,079 --> 00:43:00,400
so no yeah there was other than i think

1213
00:43:00,400 --> 00:43:02,640
they just assumed the um

1214
00:43:02,640 --> 00:43:05,760
the setting it to zero you disabled the

1215
00:43:05,760 --> 00:43:07,680
uh boot uh interactive console so i

1216
00:43:07,680 --> 00:43:09,040
don't think they took any further

1217
00:43:09,040 --> 00:43:11,760
security measures so when we changed the

1218
00:43:11,760 --> 00:43:13,760
init variable it just yeah

1219
00:43:13,760 --> 00:43:16,079
worked

1220
00:43:23,040 --> 00:43:26,599
any other questions

1221
00:43:26,880 --> 00:43:29,359
okay i think that should be it thank you

1222
00:43:29,359 --> 00:43:32,598
thank you guys

