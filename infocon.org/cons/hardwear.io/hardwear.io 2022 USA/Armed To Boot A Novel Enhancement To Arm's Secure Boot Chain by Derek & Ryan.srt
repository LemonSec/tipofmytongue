1
00:00:08,119 --> 00:00:10,380
what are we doing here

2
00:00:10,380 --> 00:00:12,000
um

3
00:00:12,000 --> 00:00:14,219
well we got invited so um but we're here

4
00:00:14,219 --> 00:00:16,859
to talk about some work images uh last

5
00:00:16,859 --> 00:00:21,020
year on growing Army security chain uh

6
00:00:21,020 --> 00:00:24,060
primarily for Server grade CPU so a lot

7
00:00:24,060 --> 00:00:25,619
of communities too

8
00:00:25,619 --> 00:00:28,380
that systems or small microcontrollers

9
00:00:28,380 --> 00:00:31,340
well um

10
00:00:34,280 --> 00:00:39,020
staff engineer joined by Ryan

11
00:00:39,540 --> 00:00:42,420
quarter of his uh his girlfriend's face

12
00:00:42,420 --> 00:00:44,780
so I promised uh

13
00:00:44,780 --> 00:00:47,340
but he's been here for a couple years

14
00:00:47,340 --> 00:00:48,600
and

15
00:00:48,600 --> 00:00:51,239
um we focus uh we're more involved in

16
00:00:51,239 --> 00:00:53,899
the defensive side so

17
00:00:53,940 --> 00:00:55,739
we're focus on the defensive side

18
00:00:55,739 --> 00:00:57,899
because the scale of their Network um

19
00:00:57,899 --> 00:00:59,399
and work on experience monsters

20
00:00:59,399 --> 00:01:00,899
infrastructure

21
00:01:00,899 --> 00:01:02,760
primarily on the research side how can

22
00:01:02,760 --> 00:01:04,019
we get better security out of our

23
00:01:04,019 --> 00:01:05,519
Hardware

24
00:01:05,519 --> 00:01:07,619
so a little overview

25
00:01:07,619 --> 00:01:08,700
um we're just going to talk about who we

26
00:01:08,700 --> 00:01:10,200
are but those are not really familiar

27
00:01:10,200 --> 00:01:13,080
about what we do not necessarily from

28
00:01:13,080 --> 00:01:15,180
um you know what everybody knows but

29
00:01:15,180 --> 00:01:16,140
kind of like what we were about

30
00:01:16,140 --> 00:01:18,000
internally and our original security

31
00:01:18,000 --> 00:01:20,100
Journey kind of gives us a little bit of

32
00:01:20,100 --> 00:01:22,200
context to some of the decisions that we

33
00:01:22,200 --> 00:01:24,380
made

34
00:01:25,380 --> 00:01:27,360
um you know how we implemented our

35
00:01:27,360 --> 00:01:29,340
original Hardware production

36
00:01:29,340 --> 00:01:34,220
background on our secure boot um

37
00:01:41,400 --> 00:01:43,700
foreign

38
00:02:13,680 --> 00:02:15,959
so this is kind of from our public staff

39
00:02:15,959 --> 00:02:17,400
so she kind of like a lot of things

40
00:02:17,400 --> 00:02:18,660
happening when they see us because

41
00:02:18,660 --> 00:02:20,160
everybody likes to know like what we do

42
00:02:20,160 --> 00:02:22,620
but this kind of shows the the baskets

43
00:02:22,620 --> 00:02:23,819
of our Network

44
00:02:23,819 --> 00:02:25,319
to the company that was constantly

45
00:02:25,319 --> 00:02:26,940
changing kind of like forget

46
00:02:26,940 --> 00:02:28,980
where we are to leave and find out that

47
00:02:28,980 --> 00:02:31,620
there's a new data center somewhere and

48
00:02:31,620 --> 00:02:34,519
they have to make sure that everything

49
00:02:35,099 --> 00:02:38,160
278 plus cities

50
00:02:38,160 --> 00:02:39,720
with over

51
00:02:39,720 --> 00:02:43,500
400 different networks in the world 142

52
00:02:43,500 --> 00:02:45,840
terabits of medical capacity a lot of

53
00:02:45,840 --> 00:02:47,519
internet properties

54
00:02:47,519 --> 00:02:49,260
you know people those from our DNS

55
00:02:49,260 --> 00:02:53,459
resolver so 1.1.1 were consistently

56
00:02:53,459 --> 00:02:56,340
one million or a million DNS queries per

57
00:02:56,340 --> 00:02:57,599
second

58
00:02:57,599 --> 00:02:59,760
so we designed

59
00:02:59,760 --> 00:03:02,040
um coffers networks to be able to handle

60
00:03:02,040 --> 00:03:03,599
every single service on every single

61
00:03:03,599 --> 00:03:05,220
server and that's what kind of like

62
00:03:05,220 --> 00:03:06,599
comprise our Edge

63
00:03:06,599 --> 00:03:08,459
and it love to be kind of like the

64
00:03:08,459 --> 00:03:11,540
shorter things you know

65
00:03:11,819 --> 00:03:13,680
that whatever Security office so

66
00:03:13,680 --> 00:03:16,620
lots of cities meetings lots of servers

67
00:03:16,620 --> 00:03:17,420
um

68
00:03:17,420 --> 00:03:20,220
stats and we don't take things that are

69
00:03:20,220 --> 00:03:22,080
off the shelf we don't opinion on

70
00:03:22,080 --> 00:03:23,580
YouTube you know what we have in our

71
00:03:23,580 --> 00:03:26,159
system you know like buy from you know

72
00:03:26,159 --> 00:03:29,040
you know as a celebrating server they're

73
00:03:29,040 --> 00:03:31,080
highly customized um they're having to

74
00:03:31,080 --> 00:03:31,799
smoke

75
00:03:31,799 --> 00:03:33,900
um and we either use multiple original

76
00:03:33,900 --> 00:03:36,720
device manufacturers or odms uh in order

77
00:03:36,720 --> 00:03:39,239
to be able to uh

78
00:03:39,239 --> 00:03:41,280
having sexual equipment

79
00:03:41,280 --> 00:03:43,560
additional Global warehousing

80
00:03:43,560 --> 00:03:46,220
especially in my

81
00:03:46,500 --> 00:03:46,970
life so

82
00:03:46,970 --> 00:03:48,239
[Music]

83
00:03:48,239 --> 00:03:50,940
our developers and our customers don't

84
00:03:50,940 --> 00:03:52,260
really worry about how their services

85
00:03:52,260 --> 00:03:53,640
are protected or the underlying

86
00:03:53,640 --> 00:03:55,640
architecture but we do

87
00:03:55,640 --> 00:03:58,980
because we are located locally we have

88
00:03:58,980 --> 00:04:03,420
to worry about from the initial build of

89
00:04:03,420 --> 00:04:05,780
measure to how it shipped

90
00:04:05,780 --> 00:04:09,560
Source or destinations that offices

91
00:04:09,560 --> 00:04:12,840
Customs a handmade you know multiple

92
00:04:12,840 --> 00:04:14,459
hands actually

93
00:04:14,459 --> 00:04:16,738
board architecture being powered on and

94
00:04:16,738 --> 00:04:18,540
so that became kind of like part of our

95
00:04:18,540 --> 00:04:20,399
threat model and we had to figure out

96
00:04:20,399 --> 00:04:22,320
how we you know Implement better ways of

97
00:04:22,320 --> 00:04:25,159
people protect our Hardware

98
00:04:25,320 --> 00:04:27,540
so this is like our first iteration of

99
00:04:27,540 --> 00:04:28,680
secure group

100
00:04:28,680 --> 00:04:31,680
um you know it's very very basic it's

101
00:04:31,680 --> 00:04:33,419
just a little bit a little bit different

102
00:04:33,419 --> 00:04:34,800
you know we started with having our

103
00:04:34,800 --> 00:04:37,380
trust anchor with our UPI firmware

104
00:04:37,380 --> 00:04:39,840
it's my platform pH of the database

105
00:04:39,840 --> 00:04:41,639
I mean don't use the default ones you

106
00:04:41,639 --> 00:04:42,840
can come with servers that are Microsoft

107
00:04:42,840 --> 00:04:45,138
keys

108
00:04:45,900 --> 00:04:49,520
we actually key that's used to um

109
00:04:56,400 --> 00:04:58,020
and then you know these variables

110
00:04:58,020 --> 00:05:00,000
effectively make up our you know master

111
00:05:00,000 --> 00:05:04,500
key uh resources scripts current drivers

112
00:05:04,500 --> 00:05:07,380
so forth but we realized when we

113
00:05:07,380 --> 00:05:09,060
anchored here obviously there's a

114
00:05:09,060 --> 00:05:10,139
problem

115
00:05:10,139 --> 00:05:11,340
so

116
00:05:11,340 --> 00:05:13,740
we learned a lot about

117
00:05:13,740 --> 00:05:15,240
uef vulnerabilities over the last few

118
00:05:15,240 --> 00:05:19,100
years seen by the classes here

119
00:05:19,139 --> 00:05:20,759
you know there's more methods that are

120
00:05:20,759 --> 00:05:22,620
coming out a circumvent

121
00:05:22,620 --> 00:05:24,960
protections to maintain persistence on

122
00:05:24,960 --> 00:05:26,639
our system

123
00:05:26,639 --> 00:05:28,380
and taught us you know that you know

124
00:05:28,380 --> 00:05:30,900
when you anchor your you know you have

125
00:05:30,900 --> 00:05:32,400
your trust bank or within your device

126
00:05:32,400 --> 00:05:34,620
firmware is

127
00:05:34,620 --> 00:05:36,360
only protects the bootloader it doesn't

128
00:05:36,360 --> 00:05:39,000
protect the firmware itself and so you

129
00:05:39,000 --> 00:05:40,740
know when we look at things like you

130
00:05:40,740 --> 00:05:42,840
know wheat protections or configuration

131
00:05:42,840 --> 00:05:44,520
those are things that usually we fix

132
00:05:44,520 --> 00:05:46,380
through like automation so what we're

133
00:05:46,380 --> 00:05:48,300
really interested in is things that

134
00:05:48,300 --> 00:05:51,600
maintain persistent people plants and so

135
00:05:51,600 --> 00:05:53,340
um you know low Jackson is a progressor

136
00:05:53,340 --> 00:05:57,500
and most recently known about

137
00:05:57,840 --> 00:05:59,580
you know again

138
00:05:59,580 --> 00:06:00,539
um you know

139
00:06:00,539 --> 00:06:02,220
regular Security checks from occupation

140
00:06:02,220 --> 00:06:04,020
bootloader

141
00:06:04,020 --> 00:06:06,180
uh you know and checks for uh the

142
00:06:06,180 --> 00:06:07,400
pciology

143
00:06:07,400 --> 00:06:09,479
firmware but you know these checks are

144
00:06:09,479 --> 00:06:11,520
being implemented in firmware then the

145
00:06:11,520 --> 00:06:13,800
firmware will just be checking itself

146
00:06:13,800 --> 00:06:16,020
um and so we presented this uh you know

147
00:06:16,020 --> 00:06:17,460
practice information internally and

148
00:06:17,460 --> 00:06:19,020
somebody said well why don't you just

149
00:06:19,020 --> 00:06:19,979
used

150
00:06:19,979 --> 00:06:22,259
um I think there's a great they have

151
00:06:22,259 --> 00:06:25,199
but they don't detect

152
00:06:25,199 --> 00:06:27,419
oration of New Bright firmware is

153
00:06:27,419 --> 00:06:30,300
persistent visible to answer user static

154
00:06:30,300 --> 00:06:32,100
Distributors trust measurements but I

155
00:06:32,100 --> 00:06:34,380
implemented within UDF firmware to

156
00:06:34,380 --> 00:06:36,240
initialize the TPM to start this process

157
00:06:36,240 --> 00:06:37,400
of

158
00:06:37,400 --> 00:06:40,740
hashing pcrs and so pcrs would show

159
00:06:40,740 --> 00:06:42,360
whether or not the process has changed

160
00:06:42,360 --> 00:06:44,460
but if you're using a firmware's been

161
00:06:44,460 --> 00:06:46,698
compromise

162
00:06:47,580 --> 00:06:50,039
it scared us you know our hard workers

163
00:06:50,039 --> 00:06:52,020
through many steps and so knowing this

164
00:06:52,020 --> 00:06:54,360
we have to look

165
00:06:54,360 --> 00:06:56,900
yes

166
00:06:57,020 --> 00:07:01,080
so apparently uh 2020 we walked about

167
00:07:01,080 --> 00:07:03,180
how to start using India processors in

168
00:07:03,180 --> 00:07:05,160
the generation 10 Hardware

169
00:07:05,160 --> 00:07:06,780
you know you think that you know what we

170
00:07:06,780 --> 00:07:08,400
have to see is this handy secure

171
00:07:08,400 --> 00:07:09,419
processor

172
00:07:09,419 --> 00:07:11,220
that allowed us to be able to extend our

173
00:07:11,220 --> 00:07:14,639
pki trust boundaries into hardware and

174
00:07:14,639 --> 00:07:16,979
so this is an amd's version of hardware

175
00:07:16,979 --> 00:07:19,020
store and so

176
00:07:19,020 --> 00:07:21,080
um

177
00:07:21,120 --> 00:07:23,670
so

178
00:07:23,670 --> 00:07:26,039
[Music]

179
00:07:26,039 --> 00:07:28,319
Fair Fighters have passion sort within

180
00:07:28,319 --> 00:07:31,380
this customer Bank of gdas within the

181
00:07:31,380 --> 00:07:33,440
SEC

182
00:07:35,160 --> 00:07:36,780
this talk isn't about

183
00:07:36,780 --> 00:07:38,460
equally again it was just mainly kind of

184
00:07:38,460 --> 00:07:39,120
like

185
00:07:39,120 --> 00:07:41,340
sexual decisions we're making later but

186
00:07:41,340 --> 00:07:42,599
I'm going to show the decision flow for

187
00:07:42,599 --> 00:07:44,099
kind of damage authentication as we use

188
00:07:44,099 --> 00:07:45,479
it to reference you know the upcoming

189
00:07:45,479 --> 00:07:46,440
slides

190
00:07:46,440 --> 00:07:47,819
you know with some other things that are

191
00:07:47,819 --> 00:07:50,120
kind of options

192
00:07:51,139 --> 00:07:54,360
but yeah it is that you have this you

193
00:07:54,360 --> 00:07:56,940
know trust chain of keys you know some

194
00:07:56,940 --> 00:07:59,160
that are in these rooted public Keys

195
00:07:59,160 --> 00:08:01,919
within the soc uh engineering for skew

196
00:08:01,919 --> 00:08:04,400
and then

197
00:08:04,560 --> 00:08:06,720
and then it goes into the associated

198
00:08:06,720 --> 00:08:09,300
prophecy jumping with a few

199
00:08:09,300 --> 00:08:12,139
blown

200
00:08:14,280 --> 00:08:17,580
and then it goes through determining

201
00:08:17,580 --> 00:08:19,319
the version and whatnot and then it

202
00:08:19,319 --> 00:08:23,240
checks these Universe trust measurements

203
00:08:24,840 --> 00:08:27,300
what page the registered values

204
00:08:27,300 --> 00:08:28,860
and so ideally you're looking at for

205
00:08:28,860 --> 00:08:31,020
either you know a cost

206
00:08:31,020 --> 00:08:33,740
and food School

207
00:08:36,059 --> 00:08:39,059
foreign

208
00:08:46,310 --> 00:08:49,410
[Music]

209
00:09:05,760 --> 00:09:08,600
Next Generation Hardware

210
00:09:08,600 --> 00:09:11,760
to come with it a little bit of

211
00:09:11,760 --> 00:09:13,380
background I'm trusted before

212
00:09:13,380 --> 00:09:16,260
requirements TBR are also known as acute

213
00:09:16,260 --> 00:09:18,779
root was originally organized

214
00:09:18,779 --> 00:09:21,240
I was pressing the president said by LG

215
00:09:21,240 --> 00:09:24,180
ihcc Samsung

216
00:09:24,180 --> 00:09:26,040
and gave us a reference example on how

217
00:09:26,040 --> 00:09:27,060
to build

218
00:09:27,060 --> 00:09:29,760
Vision Trust Within

219
00:09:29,760 --> 00:09:31,860
March the first one executed in group

220
00:09:31,860 --> 00:09:33,959
over one so the handoff to normal world

221
00:09:33,959 --> 00:09:36,240
of secure world

222
00:09:36,240 --> 00:09:39,240
uh

223
00:09:42,839 --> 00:09:43,800
um

224
00:09:43,800 --> 00:09:47,000
part of each View and per customer

225
00:09:47,000 --> 00:09:49,500
customer if I will do that but you know

226
00:09:49,500 --> 00:09:52,320
make both manufacturers have thousands

227
00:09:52,320 --> 00:09:54,300
how manufacturer was responsible for the

228
00:09:54,300 --> 00:09:55,680
indent signing maintenance of the

229
00:09:55,680 --> 00:09:57,899
academy chain

230
00:09:57,899 --> 00:09:59,820
it's a big one's complete infrastructure

231
00:09:59,820 --> 00:10:01,320
I was talking to my peers some of these

232
00:10:01,320 --> 00:10:04,140
companies with that implemented

233
00:10:04,140 --> 00:10:05,060
business

234
00:10:05,060 --> 00:10:08,399
signing authorities just to keep up and

235
00:10:08,399 --> 00:10:09,620
so forth

236
00:10:09,620 --> 00:10:13,079
position skill uh doesn't scale scales

237
00:10:13,079 --> 00:10:14,399
well in solving communities Health

238
00:10:14,399 --> 00:10:15,839
welfare swallowing but in architectures

239
00:10:15,839 --> 00:10:17,220
but we're looking at servers you know

240
00:10:17,220 --> 00:10:19,860
high grade servers so what was meant for

241
00:10:19,860 --> 00:10:21,480
kind of like you know cell phones really

242
00:10:21,480 --> 00:10:23,700
wasn't meant for servers

243
00:10:23,700 --> 00:10:25,700
um

244
00:10:25,820 --> 00:10:28,320
manufacturing process this would be much

245
00:10:28,320 --> 00:10:31,320
of an issue but it work customers

246
00:10:31,320 --> 00:10:35,000
so one thing we do Patrol is

247
00:10:35,040 --> 00:10:36,420
a diagram and so forth

248
00:10:36,420 --> 00:10:38,820
so we looked at ways of being kind of

249
00:10:38,820 --> 00:10:41,040
like learn what we did from the AMD side

250
00:10:41,040 --> 00:10:43,079
Implement that you know

251
00:10:43,079 --> 00:10:45,300
uh within our world and low technical

252
00:10:45,300 --> 00:10:47,880
design Partners so

253
00:10:47,880 --> 00:10:50,339
let's end here uh specifically their

254
00:10:50,339 --> 00:10:52,040
ultramax

255
00:10:52,040 --> 00:10:55,019
practice CPU

256
00:10:55,019 --> 00:10:57,800
uh great performance really um

257
00:10:57,800 --> 00:11:00,240
efficiency report um

258
00:11:00,240 --> 00:11:03,240
standpoint

259
00:11:04,440 --> 00:11:06,240
it's only a small set of spectrum from

260
00:11:06,240 --> 00:11:08,040
here but ampere back forward here's

261
00:11:08,040 --> 00:11:10,320
features in the ultimately

262
00:11:10,320 --> 00:11:13,620
speculative attacks that built that

263
00:11:13,620 --> 00:11:16,399
inspector they pull them from me uh

264
00:11:16,399 --> 00:11:19,860
engaged by instructions and architecture

265
00:11:19,860 --> 00:11:23,180
hence why because it's like definition

266
00:11:26,820 --> 00:11:27,899
so

267
00:11:27,899 --> 00:11:31,140
the diagram here again if you're

268
00:11:31,140 --> 00:11:34,440
familiar with our TBR yeah and some of

269
00:11:34,440 --> 00:11:36,240
these implants can actually be uh

270
00:11:36,240 --> 00:11:39,660
fairly uh they're going to be interested

271
00:11:39,660 --> 00:11:43,019
but last night anyways it shows the um

272
00:11:43,019 --> 00:11:44,459
our personal process of the sequence

273
00:11:44,459 --> 00:11:46,680
implemented by a peer so at power on

274
00:11:46,680 --> 00:11:48,300
reset

275
00:11:48,300 --> 00:11:51,660
um the system control processor which is

276
00:11:51,660 --> 00:11:53,880
the price of two processors so it's

277
00:11:53,880 --> 00:11:55,019
loaded some paint something called

278
00:11:55,019 --> 00:11:56,700
system management which handles proxy

279
00:11:56,700 --> 00:11:57,899
system management everything but

280
00:11:57,899 --> 00:12:01,459
frequency and verbals and then uh

281
00:12:01,459 --> 00:12:04,860
problem management you can grow which

282
00:12:04,860 --> 00:12:07,579
obviously handles fruits

283
00:12:07,579 --> 00:12:09,899
so it runs into management bootloader

284
00:12:09,899 --> 00:12:11,760
from ROM and then loads this assassin

285
00:12:11,760 --> 00:12:13,500
Pro firmware

286
00:12:13,500 --> 00:12:15,480
the power management staff on the inpro

287
00:12:15,480 --> 00:12:18,180
processor and also launches the uh our

288
00:12:18,180 --> 00:12:20,220
trusted firmware threads

289
00:12:20,220 --> 00:12:20,940
um

290
00:12:20,940 --> 00:12:24,420
so uh uh ATF two or two letter three one

291
00:12:24,420 --> 00:12:26,940
bring up resources such as un pcie and

292
00:12:26,940 --> 00:12:28,440
after that

293
00:12:28,440 --> 00:12:31,440
after this in the past over two

294
00:12:31,440 --> 00:12:34,620
normal world which is your

295
00:12:34,620 --> 00:12:38,279
s so

296
00:12:38,940 --> 00:12:41,700
the standard authentication flow

297
00:12:41,700 --> 00:12:44,399
including like the storage ICS as well

298
00:12:44,399 --> 00:12:48,120
I'll run SM profes public key which is

299
00:12:48,120 --> 00:12:50,839
stored in um

300
00:12:54,240 --> 00:12:55,920
from the ski certificate from the

301
00:12:55,920 --> 00:12:57,480
product Visa hash to compare this with

302
00:12:57,480 --> 00:12:59,339
ampere's public key uh

303
00:12:59,339 --> 00:13:00,600
to sort of need to use so once

304
00:13:00,600 --> 00:13:02,220
authenticated and here's a couple Keys

305
00:13:02,220 --> 00:13:04,200
you see encrypting to put any content

306
00:13:04,200 --> 00:13:06,120
certificates for SM pro and pro agent

307
00:13:06,120 --> 00:13:07,500
firmware which are launched

308
00:13:07,500 --> 00:13:09,959
into our boat so um

309
00:13:09,959 --> 00:13:11,760
he has some Pro public key is used to

310
00:13:11,760 --> 00:13:13,560
authentication has some protein bar

311
00:13:13,560 --> 00:13:17,239
images as well as ATF keys

312
00:13:17,760 --> 00:13:19,320
for images and so this is kind of like

313
00:13:19,320 --> 00:13:20,339
this Cafe

314
00:13:20,339 --> 00:13:22,880
occasion

315
00:13:23,220 --> 00:13:26,220
Ally through the trust domain so

316
00:13:26,220 --> 00:13:29,160
this is the original domain that you

317
00:13:29,160 --> 00:13:30,720
know ampere used for signing system

318
00:13:30,720 --> 00:13:33,480
secure world

319
00:13:33,480 --> 00:13:35,339
over here

320
00:13:35,339 --> 00:13:36,899
so when we look at this and we started

321
00:13:36,899 --> 00:13:38,339
referencing the signing process we have

322
00:13:38,339 --> 00:13:39,959
them in AMD

323
00:13:39,959 --> 00:13:42,240
and you have a large enough Bank OTB

324
00:13:42,240 --> 00:13:46,160
fuses you know we just thought

325
00:13:46,380 --> 00:13:47,579
or smash

326
00:13:47,579 --> 00:13:49,940
here

327
00:13:49,940 --> 00:13:53,160
okay so single domain secure boot or

328
00:13:53,160 --> 00:13:54,779
this concept is uh I think the same

329
00:13:54,779 --> 00:13:56,160
authentication flow

330
00:13:56,160 --> 00:13:59,100
and ask customer key hash

331
00:13:59,100 --> 00:14:01,199
to the username making this like a

332
00:14:01,199 --> 00:14:03,979
single room Trust

333
00:14:04,680 --> 00:14:07,019
let's enabled verification of you have

334
00:14:07,019 --> 00:14:10,740
firmware by Hardware Trust

335
00:14:10,740 --> 00:14:12,720
already validated

336
00:14:12,720 --> 00:14:17,339
from loader 2. so he's a customer

337
00:14:17,339 --> 00:14:20,339
format

338
00:14:20,459 --> 00:14:22,199
uvi

339
00:14:22,199 --> 00:14:25,139
distributable storage computed and

340
00:14:25,139 --> 00:14:27,600
compared with the publishing hashes

341
00:14:27,600 --> 00:14:29,880
uh so if they match the value of public

342
00:14:29,880 --> 00:14:32,240
use

343
00:14:52,920 --> 00:14:55,320
and so kind of like as you know like

344
00:14:55,320 --> 00:14:58,519
what the basic of the details includes

345
00:14:58,519 --> 00:15:01,220
in there

346
00:15:01,220 --> 00:15:03,600
what we have to know is that when our

347
00:15:03,600 --> 00:15:05,519
servers get built all

348
00:15:05,519 --> 00:15:06,959
you are more defined

349
00:15:06,959 --> 00:15:08,519
and so

350
00:15:08,519 --> 00:15:09,959
included kind of like the provisioning

351
00:15:09,959 --> 00:15:11,760
manufacturing process

352
00:15:11,760 --> 00:15:14,899
ible background details

353
00:15:14,940 --> 00:15:18,060
so breaking down the steps so um there's

354
00:15:18,060 --> 00:15:19,440
this is very inclusive there's three

355
00:15:19,440 --> 00:15:20,880
parties involved usually it's your

356
00:15:20,880 --> 00:15:23,880
silicon manufacturer and odm and then a

357
00:15:23,880 --> 00:15:25,740
customer so in our case awesome we all

358
00:15:25,740 --> 00:15:27,540
play a role in this execution phase so

359
00:15:27,540 --> 00:15:29,779
first uh we the customer we generate

360
00:15:29,779 --> 00:15:31,740
certificates for a public private key

361
00:15:31,740 --> 00:15:34,380
pair using our internal secure PTI the

362
00:15:34,380 --> 00:15:36,660
public key side is provided to our odm

363
00:15:36,660 --> 00:15:41,279
as dbb auth and DBU auth uh insecure

364
00:15:41,279 --> 00:15:43,860
variable format so

365
00:15:43,860 --> 00:15:47,399
and peer provides a software reference

366
00:15:47,399 --> 00:15:51,139
package SRP that includes your BMC SCP

367
00:15:51,139 --> 00:15:54,779
uvi and cpld firmware to the odm and

368
00:15:54,779 --> 00:15:56,579
they customize it for our platform so

369
00:15:56,579 --> 00:15:58,380
the odm will generate a board board file

370
00:15:58,380 --> 00:15:59,639
describing the hardware configuration

371
00:15:59,639 --> 00:16:02,820
and also any customizations to uh to the

372
00:16:02,820 --> 00:16:04,800
ufi firmware which allows us to be able

373
00:16:04,800 --> 00:16:07,199
to enroll those secure variables uh

374
00:16:07,199 --> 00:16:10,160
within storage and that first boot

375
00:16:10,160 --> 00:16:14,220
so once it's done we generate a ufci

376
00:16:14,220 --> 00:16:18,240
slim file using our odms ufi ROM image

377
00:16:18,240 --> 00:16:22,199
ATF and board file so this is different

378
00:16:22,199 --> 00:16:24,300
from what we encountered with AMD

379
00:16:24,300 --> 00:16:26,279
platform secure Boot and so far as that

380
00:16:26,279 --> 00:16:28,320
the entire image and ATF files are

381
00:16:28,320 --> 00:16:30,660
signed whereas with AMD PSB only the

382
00:16:30,660 --> 00:16:32,579
first block of boot code is signed so

383
00:16:32,579 --> 00:16:35,519
the entire slim file is signed with our

384
00:16:35,519 --> 00:16:38,100
our private key producing a signature

385
00:16:38,100 --> 00:16:39,959
hash in this file uh can be only

386
00:16:39,959 --> 00:16:41,519
authenticated by the correct public key

387
00:16:41,519 --> 00:16:45,240
and then finally the odm packages this

388
00:16:45,240 --> 00:16:49,259
ufci into an HPM format compatible with

389
00:16:49,259 --> 00:16:52,880
uh the plot their platform DMC

390
00:16:53,160 --> 00:16:56,339
so uh in parallel we're providing debug

391
00:16:56,339 --> 00:17:00,000
views selection uh and uh regarding the

392
00:17:00,000 --> 00:17:02,100
OTP fuses that we're going to use as

393
00:17:02,100 --> 00:17:05,459
well as a deformatted public key hash of

394
00:17:05,459 --> 00:17:08,400
our format formatted public key so uh

395
00:17:08,400 --> 00:17:10,619
ampere uses this information to create a

396
00:17:10,619 --> 00:17:12,900
special version of their sap firmware

397
00:17:12,900 --> 00:17:14,959
called a security provisioning or secrov

398
00:17:14,959 --> 00:17:18,179
and this firmware is only run one time

399
00:17:18,179 --> 00:17:20,280
uh it's to program the debug few

400
00:17:20,280 --> 00:17:22,679
settings and our public key hash into

401
00:17:22,679 --> 00:17:24,660
the sake fuses so normally they use this

402
00:17:24,660 --> 00:17:27,299
security provisioning when they are

403
00:17:27,299 --> 00:17:30,240
implementing their hash values within

404
00:17:30,240 --> 00:17:31,980
the storage ICS so since we're inserting

405
00:17:31,980 --> 00:17:35,700
our hash into this into this uh root of

406
00:17:35,700 --> 00:17:37,080
trust domain

407
00:17:37,080 --> 00:17:40,080
um it's run for us as well

408
00:17:40,080 --> 00:17:42,480
um so ampere will deliver this SEC

409
00:17:42,480 --> 00:17:45,539
profit from simple out to our odm uh and

410
00:17:45,539 --> 00:17:46,260
then

411
00:17:46,260 --> 00:17:48,059
um they convert it into a compatible

412
00:17:48,059 --> 00:17:51,120
file format uh for uh whatever BMC

413
00:17:51,120 --> 00:17:53,220
firmware update tooling we're using soft

414
00:17:53,220 --> 00:17:56,360
flash Yahoo flash or whatever

415
00:17:56,700 --> 00:17:59,820
so during system manufacturing

416
00:17:59,820 --> 00:18:01,200
um the firmware is pre-programmed in

417
00:18:01,200 --> 00:18:02,760
storage ICS before placement on the

418
00:18:02,760 --> 00:18:06,840
motherboard uh note that the SCP

419
00:18:06,840 --> 00:18:08,160
um

420
00:18:08,160 --> 00:18:11,160
firmware is using is not using your

421
00:18:11,160 --> 00:18:13,160
standards sep for more but the secrov

422
00:18:13,160 --> 00:18:16,080
image and so after the system is powered

423
00:18:16,080 --> 00:18:18,000
on and IPM my command is sent the BMC

424
00:18:18,000 --> 00:18:20,340
which releases the Ampere processor from

425
00:18:20,340 --> 00:18:21,720
reset and this allows the SEC Pro

426
00:18:21,720 --> 00:18:24,120
firmware to run burning the sake fuse

427
00:18:24,120 --> 00:18:25,980
with our public key hash and debug key

428
00:18:25,980 --> 00:18:28,220
settings

429
00:18:28,500 --> 00:18:30,660
so manufacturing flow

430
00:18:30,660 --> 00:18:32,900
once our public key has been provisioned

431
00:18:32,900 --> 00:18:35,220
manufacturing proceeds by reprogramming

432
00:18:35,220 --> 00:18:38,280
SCP prom with its regular firmware once

433
00:18:38,280 --> 00:18:40,140
the system powers on ATF detects that

434
00:18:40,140 --> 00:18:41,400
there are no keys present in Secure

435
00:18:41,400 --> 00:18:43,320
variable storage and allows the ufci

436
00:18:43,320 --> 00:18:44,820
firmware to boot regardless of signature

437
00:18:44,820 --> 00:18:47,760
since this is the first ufci Boot It

438
00:18:47,760 --> 00:18:49,740
programs our public key into secure

439
00:18:49,740 --> 00:18:52,200
variable storage and reboots ATF is

440
00:18:52,200 --> 00:18:54,000
validated by ampere's public key hash as

441
00:18:54,000 --> 00:18:56,760
usual and since uh our public key is now

442
00:18:56,760 --> 00:18:59,820
present in uh in dbb format it's

443
00:18:59,820 --> 00:19:01,919
validated against the public key hash

444
00:19:01,919 --> 00:19:05,940
and e-fuse and allows ufci to boot

445
00:19:05,940 --> 00:19:07,679
so validation don't worry we're almost

446
00:19:07,679 --> 00:19:09,660
there uh so the first part of validation

447
00:19:09,660 --> 00:19:11,820
uh requires observation a successful

448
00:19:11,820 --> 00:19:14,100
destruction of the e-fuses upon

449
00:19:14,100 --> 00:19:15,900
automatic or manual issue of an ipmi

450
00:19:15,900 --> 00:19:18,059
command uh OEM coming to The BMC The BMC

451
00:19:18,059 --> 00:19:19,740
observes a signal and the SEC prop

452
00:19:19,740 --> 00:19:22,020
firmware uh denoting e-fuse programming

453
00:19:22,020 --> 00:19:24,419
completion this can be probed through a

454
00:19:24,419 --> 00:19:26,400
BMC console so when the fuses have been

455
00:19:26,400 --> 00:19:28,200
blown validation continues

456
00:19:28,200 --> 00:19:30,299
um by observing the boot chain of other

457
00:19:30,299 --> 00:19:34,320
firmware so any Corruption of SCP ATF or

458
00:19:34,320 --> 00:19:36,900
UCI firmware upstructs the boot flow uh

459
00:19:36,900 --> 00:19:38,640
and boot authentication and will cause

460
00:19:38,640 --> 00:19:40,559
the machine to fail booting

461
00:19:40,559 --> 00:19:42,720
so once other firmware in place this

462
00:19:42,720 --> 00:19:47,720
happy path validation begins with um

463
00:19:47,880 --> 00:19:50,520
begins it by you know so upon first boot

464
00:19:50,520 --> 00:19:51,900
you have firmware boots and falling

465
00:19:51,900 --> 00:19:57,059
order BMC SCP ATF uvi and so the BMC SCP

466
00:19:57,059 --> 00:19:59,880
and ATF uh firmware can be observed via

467
00:19:59,880 --> 00:20:02,760
their respective serial consoles so uvi

468
00:20:02,760 --> 00:20:05,340
will automatically enroll the two dbb

469
00:20:05,340 --> 00:20:09,900
files uh dbb DB uh dbb and DBU off files

470
00:20:09,900 --> 00:20:11,640
to the secure variable Surge and trigger

471
00:20:11,640 --> 00:20:13,679
a reset of the system after observing

472
00:20:13,679 --> 00:20:14,640
this reset the machine should

473
00:20:14,640 --> 00:20:16,020
successfully boot

474
00:20:16,020 --> 00:20:18,179
um to the OS of the features executed

475
00:20:18,179 --> 00:20:21,480
securely so for further validation we

476
00:20:21,480 --> 00:20:24,360
can use a uvi shell environment to

477
00:20:24,360 --> 00:20:25,980
extract the DBP file and compare the

478
00:20:25,980 --> 00:20:28,500
hash against the hash emitted to Ampere

479
00:20:28,500 --> 00:20:29,580
um you know after successfully

480
00:20:29,580 --> 00:20:30,900
validating the keys we can Flash an

481
00:20:30,900 --> 00:20:32,760
unsigned ufi image which Ryan will show

482
00:20:32,760 --> 00:20:35,159
in a bit and unsigned ufi image will

483
00:20:35,159 --> 00:20:37,140
cause authentication failure at loader

484
00:20:37,140 --> 00:20:40,260
stage three two so the ATF firmware

485
00:20:40,260 --> 00:20:41,640
undergoes a boot loop as a result and

486
00:20:41,640 --> 00:20:44,220
similar Behavior will cause for a ufci

487
00:20:44,220 --> 00:20:46,440
image signed with incorrect fees to to

488
00:20:46,440 --> 00:20:48,480
not boot

489
00:20:48,480 --> 00:20:51,600
so back to this usbi authentication so

490
00:20:51,600 --> 00:20:53,940
in revisiting this flow and all

491
00:20:53,940 --> 00:20:56,400
subsequent boot Cycles the ATF will read

492
00:20:56,400 --> 00:20:59,159
the secure variable dbb or our public

493
00:20:59,159 --> 00:21:00,000
key

494
00:21:00,000 --> 00:21:02,520
computer hash of the key and compare it

495
00:21:02,520 --> 00:21:04,679
to the read-only customer public key

496
00:21:04,679 --> 00:21:08,220
hash in the e-fuse if computed and if

497
00:21:08,220 --> 00:21:10,080
uses match our public key variable can

498
00:21:10,080 --> 00:21:11,760
be trusted and it's used to authenticate

499
00:21:11,760 --> 00:21:13,500
the signed up

500
00:21:13,500 --> 00:21:15,480
UEFI image and after that the system

501
00:21:15,480 --> 00:21:18,299
will just boot the OS and so that's kind

502
00:21:18,299 --> 00:21:19,799
of how we completed it

503
00:21:19,799 --> 00:21:22,980
so I'll hand it off to uh Ryan for a

504
00:21:22,980 --> 00:21:27,080
quick demo of how it works yeah sure

505
00:21:29,220 --> 00:21:31,980
uh yeah so we were unable to get a

506
00:21:31,980 --> 00:21:33,780
machine without a single domain secure

507
00:21:33,780 --> 00:21:36,900
boot enabled uh supply chain issues

508
00:21:36,900 --> 00:21:38,400
um really easy thing is late this

509
00:21:38,400 --> 00:21:40,080
weekend

510
00:21:40,080 --> 00:21:42,179
um but all we have here is I'm gonna

511
00:21:42,179 --> 00:21:44,520
sign uh Flash the unsigned firmware go

512
00:21:44,520 --> 00:21:48,120
back and forth between the side firmware

513
00:21:48,120 --> 00:21:50,640
um with this yeah there so there's our

514
00:21:50,640 --> 00:21:53,460
signed bios we're in user space there uh

515
00:21:53,460 --> 00:21:55,020
going to go ahead and try to flash my

516
00:21:55,020 --> 00:21:57,419
malicious unsigned firmware you can

517
00:21:57,419 --> 00:21:59,280
imagine someone trying to flash whatever

518
00:21:59,280 --> 00:22:01,260
they want uh be able to disable and

519
00:22:01,260 --> 00:22:03,960
enable uh settings that we don't want

520
00:22:03,960 --> 00:22:06,960
enabled disabled namely even UEFI secure

521
00:22:06,960 --> 00:22:10,860
boot uh uh performance settings Etc

522
00:22:10,860 --> 00:22:12,120
I'm going to speed through this really

523
00:22:12,120 --> 00:22:14,360
quick

524
00:22:17,640 --> 00:22:19,200
awesome I'm just going to reboot the

525
00:22:19,200 --> 00:22:21,679
machine here

526
00:22:23,880 --> 00:22:25,620
cool

527
00:22:25,620 --> 00:22:27,000
so at this point we really don't see

528
00:22:27,000 --> 00:22:27,780
much

529
00:22:27,780 --> 00:22:31,140
um naturally uh we might get a ufi

530
00:22:31,140 --> 00:22:33,179
security proof violation but underneath

531
00:22:33,179 --> 00:22:35,340
there's still things going on as Derek

532
00:22:35,340 --> 00:22:37,260
had mentioned earlier the SCP still

533
00:22:37,260 --> 00:22:38,940
boots it's still trying to read out that

534
00:22:38,940 --> 00:22:40,200
ampere private key and compare that

535
00:22:40,200 --> 00:22:42,240
initial hash and check that public key

536
00:22:42,240 --> 00:22:44,700
hash from there goes on to the untrusted

537
00:22:44,700 --> 00:22:47,220
firmware world and there it'll attempt

538
00:22:47,220 --> 00:22:51,659
to try to elude uh load the dbb uh try

539
00:22:51,659 --> 00:22:53,760
to calculate our customer public key

540
00:22:53,760 --> 00:22:55,380
hash and compare it against the OTP

541
00:22:55,380 --> 00:22:58,380
fuses that were burned in via some IP my

542
00:22:58,380 --> 00:23:00,419
command I'm just reflashing the side

543
00:23:00,419 --> 00:23:01,799
bios here

544
00:23:01,799 --> 00:23:04,140
but at this point this is where the

545
00:23:04,140 --> 00:23:07,679
failure occurs mainly because there's no

546
00:23:07,679 --> 00:23:09,080
public key has to be

547
00:23:09,080 --> 00:23:11,820
calculated since the dbb and DBU are not

548
00:23:11,820 --> 00:23:14,178
present

549
00:23:18,299 --> 00:23:21,840
awesome uh reset the machine via remote

550
00:23:21,840 --> 00:23:24,440
interface and

551
00:23:24,440 --> 00:23:27,539
uh we'll boot back into and observe the

552
00:23:27,539 --> 00:23:30,140
pile of screens

553
00:23:40,380 --> 00:23:41,840
awesome

554
00:23:41,840 --> 00:23:44,700
exhilarating I know

555
00:23:44,700 --> 00:23:47,360
it boots

556
00:23:48,419 --> 00:23:51,419
awesome

557
00:23:51,900 --> 00:23:54,600
so that means our entire blue chain is

558
00:23:54,600 --> 00:23:57,840
secure right uh well not not quite as we

559
00:23:57,840 --> 00:23:59,880
had seen earlier uh The BMC is actually

560
00:23:59,880 --> 00:24:01,559
the first boot device

561
00:24:01,559 --> 00:24:02,640
um and for those of you who don't know

562
00:24:02,640 --> 00:24:04,020
what BMC is it's baseboard management

563
00:24:04,020 --> 00:24:06,120
controller it's really this device that

564
00:24:06,120 --> 00:24:08,580
really allows lazy sister admins who

565
00:24:08,580 --> 00:24:09,960
don't want to visit the data centers to

566
00:24:09,960 --> 00:24:12,299
turn off and turn on the machine get

567
00:24:12,299 --> 00:24:14,279
some system event logs get some sensor

568
00:24:14,279 --> 00:24:17,000
information Etc

569
00:24:17,159 --> 00:24:19,440
um so I attack it well highly privileged

570
00:24:19,440 --> 00:24:21,419
access to the host these devices were

571
00:24:21,419 --> 00:24:22,740
not designed for security they were

572
00:24:22,740 --> 00:24:24,179
designed for functionality and ease of

573
00:24:24,179 --> 00:24:27,299
use uh not only do they have that highly

574
00:24:27,299 --> 00:24:28,740
professed access to the host they have

575
00:24:28,740 --> 00:24:30,779
access to the low paying count bus in

576
00:24:30,779 --> 00:24:32,279
the South Bridge and for those of you

577
00:24:32,279 --> 00:24:33,840
don't know that basically allows access

578
00:24:33,840 --> 00:24:38,700
to pcie devices storage Ram uh Power

579
00:24:38,700 --> 00:24:41,100
Supplies fans Etc and a whole plethora

580
00:24:41,100 --> 00:24:42,480
of sensitive things if someone were to

581
00:24:42,480 --> 00:24:44,159
try attack us physically

582
00:24:44,159 --> 00:24:49,140
or or Worse try to access some data uh

583
00:24:49,140 --> 00:24:50,880
it's network accessible

584
00:24:50,880 --> 00:24:53,220
um another large attack vector and with

585
00:24:53,220 --> 00:24:55,200
this device not being designed for

586
00:24:55,200 --> 00:24:58,020
security it's extremely vulnerable uh

587
00:24:58,020 --> 00:25:00,240
ipmi is still a very commonly used

588
00:25:00,240 --> 00:25:02,760
protocol the intelligent intelligent

589
00:25:02,760 --> 00:25:04,799
platform management interface

590
00:25:04,799 --> 00:25:06,600
um but it's not quite so intelligent uh

591
00:25:06,600 --> 00:25:09,059
it was developed in the 90s and majority

592
00:25:09,059 --> 00:25:11,940
of servers still use it today

593
00:25:11,940 --> 00:25:13,799
um and being network accessible has

594
00:25:13,799 --> 00:25:14,940
access to the management and host

595
00:25:14,940 --> 00:25:17,640
Network and it just has a poor uh

596
00:25:17,640 --> 00:25:20,279
firmware security history again the

597
00:25:20,279 --> 00:25:22,200
sensitivity of how close it is to those

598
00:25:22,200 --> 00:25:23,940
sensitive peripherals within a Server

599
00:25:23,940 --> 00:25:25,980
Chassis just make it a really prime

600
00:25:25,980 --> 00:25:29,460
target for attacking

601
00:25:29,460 --> 00:25:31,500
so what can we do about it

602
00:25:31,500 --> 00:25:33,179
um well we can you know sign our BMC

603
00:25:33,179 --> 00:25:34,740
firmware and check in firmware but it

604
00:25:34,740 --> 00:25:36,059
doesn't really do anything if we can

605
00:25:36,059 --> 00:25:38,159
just wipe our firmware and Flash it with

606
00:25:38,159 --> 00:25:40,980
something else uh we can Implement a

607
00:25:40,980 --> 00:25:42,240
feature similar to single domain

608
00:25:42,240 --> 00:25:45,000
security within some BMC platforms um

609
00:25:45,000 --> 00:25:46,740
but we also run into the same issues

610
00:25:46,740 --> 00:25:48,419
that we run into with single domain

611
00:25:48,419 --> 00:25:51,480
security and Andy's platforms attribute

612
00:25:51,480 --> 00:25:53,520
where uh it makes things difficult to

613
00:25:53,520 --> 00:25:56,039
e-cycle you know supply chain we would

614
00:25:56,039 --> 00:25:58,320
like to help reuse these machines later

615
00:25:58,320 --> 00:26:00,179
and pass it on but that would mean us

616
00:26:00,179 --> 00:26:01,740
giving up our private key in order for

617
00:26:01,740 --> 00:26:03,960
someone else to flash their own UV image

618
00:26:03,960 --> 00:26:05,400
or BMC image

619
00:26:05,400 --> 00:26:07,140
and also it's just another standard

620
00:26:07,140 --> 00:26:09,299
operating procedure for us to manage

621
00:26:09,299 --> 00:26:10,919
um you know AMD has their own for theirs

622
00:26:10,919 --> 00:26:12,659
if your boot arm has their own and now

623
00:26:12,659 --> 00:26:14,279
we have to manage all these different uh

624
00:26:14,279 --> 00:26:18,960
device uh specific operating procedures

625
00:26:18,960 --> 00:26:19,919
um but the last thing that we're

626
00:26:19,919 --> 00:26:23,400
interested in trying is uh some CPU

627
00:26:23,400 --> 00:26:25,740
agnostic infrastructure to enable a

628
00:26:25,740 --> 00:26:27,840
cryptographically secure host prior to

629
00:26:27,840 --> 00:26:29,880
boot time uh some of the vendors shown

630
00:26:29,880 --> 00:26:31,380
here are some of the organizations that

631
00:26:31,380 --> 00:26:33,539
are uh focused on trying to create that

632
00:26:33,539 --> 00:26:37,140
unified platform security architecture

633
00:26:37,140 --> 00:26:40,080
um moving away from uh the platform

634
00:26:40,080 --> 00:26:43,500
specific stuff uh we get to use uh

635
00:26:43,500 --> 00:26:46,260
pub-based identity keys to components

636
00:26:46,260 --> 00:26:48,179
not just for The BMC and the UEFI but

637
00:26:48,179 --> 00:26:49,380
also those peripherals within the

638
00:26:49,380 --> 00:26:51,240
chassis as well

639
00:26:51,240 --> 00:26:53,460
um because we don't have to use OTP

640
00:26:53,460 --> 00:26:55,799
fusing and then we have this concept of

641
00:26:55,799 --> 00:26:57,900
key transition now that we no longer

642
00:26:57,900 --> 00:27:00,240
have to burn in mutable Hardware to

643
00:27:00,240 --> 00:27:03,179
compare our signatures against

644
00:27:03,179 --> 00:27:05,340
um we're able to manage our keys more

645
00:27:05,340 --> 00:27:08,400
effectively uh rotate uh revoke things

646
00:27:08,400 --> 00:27:11,279
if necessary uh provision new keys if

647
00:27:11,279 --> 00:27:13,940
necessary as well

648
00:27:14,279 --> 00:27:17,220
uh uh thanks for listening to us uh come

649
00:27:17,220 --> 00:27:20,399
check us out blog.comfair.com

650
00:27:20,399 --> 00:27:23,539
and thank you very much

651
00:27:23,660 --> 00:27:28,140
[Applause]

652
00:27:28,140 --> 00:27:31,039
do we have questions

653
00:27:32,399 --> 00:27:33,899
what

654
00:27:33,899 --> 00:27:36,720
no questions okay

655
00:27:36,720 --> 00:27:38,299
[Music]

656
00:27:38,299 --> 00:27:40,559
so it looks like in the future you're

657
00:27:40,559 --> 00:27:42,120
planning on that new piece of hardware

658
00:27:42,120 --> 00:27:44,159
for Key Management but currently does

659
00:27:44,159 --> 00:27:46,200
that mean if your private keywords

660
00:27:46,200 --> 00:27:48,360
somehow compromised that basically all

661
00:27:48,360 --> 00:27:49,860
of the hardware that you have assigned

662
00:27:49,860 --> 00:27:52,080
with that key is kaput you have to

663
00:27:52,080 --> 00:27:53,700
basically burn it down and start again

664
00:27:53,700 --> 00:27:57,120
yeah yeah I mean I ideally like I think

665
00:27:57,120 --> 00:27:58,820
these

666
00:27:58,820 --> 00:28:00,779
you know Andy started something that was

667
00:28:00,779 --> 00:28:02,220
really good because it allowed us to be

668
00:28:02,220 --> 00:28:04,919
able to kind of like move it in in uh or

669
00:28:04,919 --> 00:28:06,360
implement this Hardware to trust and

670
00:28:06,360 --> 00:28:07,380
something that was actually very very

671
00:28:07,380 --> 00:28:09,720
simple a simple process to do

672
00:28:09,720 --> 00:28:10,799
um the problem is that we're dealing

673
00:28:10,799 --> 00:28:12,779
with many different CPUs um and then we

674
00:28:12,779 --> 00:28:13,860
also have to deal with like different

675
00:28:13,860 --> 00:28:17,100
CPU Generations so uh there is a root

676
00:28:17,100 --> 00:28:19,799
key rotation per skew so a Next

677
00:28:19,799 --> 00:28:21,539
Generation CPU from the same vendor is

678
00:28:21,539 --> 00:28:22,620
still going to have a separate key which

679
00:28:22,620 --> 00:28:24,000
is great it's a good thing it's kind of

680
00:28:24,000 --> 00:28:25,559
implementing you know proper key

681
00:28:25,559 --> 00:28:26,880
rotation

682
00:28:26,880 --> 00:28:28,440
um but yeah if you're if your private

683
00:28:28,440 --> 00:28:29,820
Keys you know compromise you have other

684
00:28:29,820 --> 00:28:31,320
problems so again it's probably like

685
00:28:31,320 --> 00:28:33,179
really good internal pki practices the

686
00:28:33,179 --> 00:28:35,220
only reason we're looking at kind of

687
00:28:35,220 --> 00:28:36,419
going down the security code processor

688
00:28:36,419 --> 00:28:37,380
route is because it allows us to

689
00:28:37,380 --> 00:28:39,899
maintain consistency we build a lot of

690
00:28:39,899 --> 00:28:42,179
different types of devices and so if

691
00:28:42,179 --> 00:28:43,679
we're able to size it based off of the

692
00:28:43,679 --> 00:28:45,360
device then we have kind of like a

693
00:28:45,360 --> 00:28:47,580
consistent sop on how to implement you

694
00:28:47,580 --> 00:28:49,020
know you know a good route of trust

695
00:28:49,020 --> 00:28:53,220
across all of our devices thank you

696
00:28:53,220 --> 00:28:55,880
foreign

697
00:28:56,940 --> 00:28:59,969
[Music]

