1
00:00:03,470 --> 00:00:08,910
so I'm Tremmel Hudson with the lower

2
00:00:05,819 --> 00:00:10,950
layer Labs and I want to talk about the

3
00:00:08,910 --> 00:00:13,530
big question in building secure systems

4
00:00:10,950 --> 00:00:16,230
is how do we prevent unauthorized code

5
00:00:13,530 --> 00:00:18,509
from running on it and it turns out it's

6
00:00:16,230 --> 00:00:21,529
pretty simple we can turn on verified

7
00:00:18,509 --> 00:00:26,220
boot like boot guard on Intel CPUs and

8
00:00:21,529 --> 00:00:29,550
verified boot takes over when the CPU

9
00:00:26,220 --> 00:00:32,098
comes out of reset it does say for a

10
00:00:29,550 --> 00:00:34,080
signature check on the firmware and if

11
00:00:32,098 --> 00:00:38,970
the signature signature check doesn't

12
00:00:34,080 --> 00:00:41,519
pass it just halts the CPU and if it

13
00:00:38,970 --> 00:00:43,440
does pass then it runs the firmware and

14
00:00:41,520 --> 00:00:45,660
the firmware can then invalidate the

15
00:00:43,440 --> 00:00:47,640
signature on the OS the OS can validate

16
00:00:45,660 --> 00:00:50,089
signatures on the applications and then

17
00:00:47,640 --> 00:00:52,290
no unauthorised code can ever run

18
00:00:50,090 --> 00:00:54,270
alright thanks for coming to my talk I

19
00:00:52,290 --> 00:00:59,280
hope you'll have a wonderful day - here

20
00:00:54,270 --> 00:01:03,660
at Hardware Ohio let's go back to that

21
00:00:59,280 --> 00:01:07,619
slide me in security things don't tend

22
00:01:03,660 --> 00:01:09,600
to be that simple that building a system

23
00:01:07,619 --> 00:01:12,570
that that halts on the first sign of

24
00:01:09,600 --> 00:01:15,570
failure may be very attractive if you're

25
00:01:12,570 --> 00:01:17,460
building a closed source system that is

26
00:01:15,570 --> 00:01:20,369
a walled garden that isn't everyone to

27
00:01:17,460 --> 00:01:23,158
run any sort of user code but this comes

28
00:01:20,369 --> 00:01:26,189
at great expense to the user freedom to

29
00:01:23,159 --> 00:01:29,369
control what runs on their computer it

30
00:01:26,189 --> 00:01:32,100
also is really it has very brittle

31
00:01:29,369 --> 00:01:34,679
failure modes it's not resilient to

32
00:01:32,100 --> 00:01:38,759
hardware failures or to recovery from

33
00:01:34,679 --> 00:01:41,009
from attacks and it also has no way to

34
00:01:38,759 --> 00:01:43,799
prove to the outside world that it

35
00:01:41,009 --> 00:01:45,359
hasn't been compromised so we need some

36
00:01:43,799 --> 00:01:48,869
way for systems to be able to attest

37
00:01:45,359 --> 00:01:50,579
what is actually running on them the

38
00:01:48,869 --> 00:01:53,310
freedom is one that's really important

39
00:01:50,579 --> 00:01:55,199
to me as was mentioned in the

40
00:01:53,310 --> 00:01:56,999
introduction ten years ago I started a

41
00:01:55,200 --> 00:01:59,219
project to build the open source

42
00:01:56,999 --> 00:02:02,009
firmware for Canon cameras that the

43
00:01:59,219 --> 00:02:04,259
magic lantern project has led hundreds

44
00:02:02,009 --> 00:02:06,929
of thousands of camera owners write

45
00:02:04,259 --> 00:02:09,720
extensions for their cameras that let

46
00:02:06,929 --> 00:02:12,150
them use them the way they want provide

47
00:02:09,720 --> 00:02:13,739
the features that they want I've also

48
00:02:12,150 --> 00:02:15,000
been thinking a lot about how to build

49
00:02:13,739 --> 00:02:17,340
more secure

50
00:02:15,000 --> 00:02:19,380
commodity systems and started the hits

51
00:02:17,340 --> 00:02:21,660
from our project a few years ago this

52
00:02:19,380 --> 00:02:25,320
looking at how do we build slightly more

53
00:02:21,660 --> 00:02:29,220
secure laptops with what's available in

54
00:02:25,320 --> 00:02:30,900
off-the-shelf parts I'm also a core

55
00:02:29,220 --> 00:02:33,690
contributor on the Linux boot project

56
00:02:30,900 --> 00:02:35,610
which is looking at providing similar

57
00:02:33,690 --> 00:02:40,730
sort of security guarantees with free

58
00:02:35,610 --> 00:02:44,720
software for servers in the firmware and

59
00:02:40,730 --> 00:02:47,310
for me freedom has two main components

60
00:02:44,720 --> 00:02:50,400
it we need the signing keys for the

61
00:02:47,310 --> 00:02:52,560
firmware and we need documentation the

62
00:02:50,400 --> 00:02:54,930
signing keys are absolutely vital

63
00:02:52,560 --> 00:02:57,090
there's a lot of open source projects

64
00:02:54,930 --> 00:02:59,630
there's maybe a lot of embedded projects

65
00:02:57,090 --> 00:03:03,270
are built with a open source software

66
00:02:59,630 --> 00:03:03,870
but because we don't control the route

67
00:03:03,270 --> 00:03:05,640
of trust

68
00:03:03,870 --> 00:03:09,480
they're at risk of what's called tebow

69
00:03:05,640 --> 00:03:12,089
is a ssin where it's it's open inside

70
00:03:09,480 --> 00:03:16,649
but we can't change it so it might as

71
00:03:12,090 --> 00:03:18,660
well be a closed source product the

72
00:03:16,650 --> 00:03:21,269
firmware is also a really privileged

73
00:03:18,660 --> 00:03:23,489
position where things running in

74
00:03:21,269 --> 00:03:26,160
firmware can bypass pretty much any

75
00:03:23,489 --> 00:03:28,950
security guarantees that the OS or the

76
00:03:26,160 --> 00:03:31,920
hypervisor might want to use it would be

77
00:03:28,950 --> 00:03:35,820
really bad if OEMs abuse that position

78
00:03:31,920 --> 00:03:39,899
to install malware or adware that users

79
00:03:35,820 --> 00:03:42,660
didn't want even if they're not acting

80
00:03:39,900 --> 00:03:44,519
maliciously as jessa4 zel points out a

81
00:03:42,660 --> 00:03:46,620
lot of these vendors aren't in a

82
00:03:44,519 --> 00:03:50,250
position to be able to debug their firm

83
00:03:46,620 --> 00:03:54,330
their own firmware because on most these

84
00:03:50,250 --> 00:03:57,300
systems they didn't write it most of the

85
00:03:54,330 --> 00:04:00,180
UEFI firmware comes in the reference

86
00:03:57,300 --> 00:04:05,959
implementations from Intel AMD and

87
00:04:00,180 --> 00:04:09,690
packaged up by the Tiano core edk to CAD

88
00:04:05,959 --> 00:04:13,230
independent BIOS vendors do occasional

89
00:04:09,690 --> 00:04:15,900
polls from from that get tree and then

90
00:04:13,230 --> 00:04:18,418
are paid by device manufacturers to port

91
00:04:15,900 --> 00:04:21,540
it to different main boards and these

92
00:04:18,418 --> 00:04:27,030
device manufacturers are manufacturer

93
00:04:21,540 --> 00:04:27,910
and for OEMs who typically only write a

94
00:04:27,030 --> 00:04:30,520
very

95
00:04:27,910 --> 00:04:32,970
percentage of the actual software that

96
00:04:30,520 --> 00:04:36,070
makes up the firmware on the system

97
00:04:32,970 --> 00:04:38,620
there's one big exception here which is

98
00:04:36,070 --> 00:04:43,420
Apple that runs their own firmware teams

99
00:04:38,620 --> 00:04:46,870
and is able to do much tighter release

100
00:04:43,420 --> 00:04:49,300
cycles because of that so when a

101
00:04:46,870 --> 00:04:51,940
vulnerability or a bug is found is

102
00:04:49,300 --> 00:04:53,950
probably going to be in the reference

103
00:04:51,940 --> 00:04:56,830
implementation which means that to get

104
00:04:53,950 --> 00:04:59,650
it fixed the IV bees have to pull that

105
00:04:56,830 --> 00:05:02,260
patch they have to get paid by the ODMs

106
00:04:59,650 --> 00:05:03,760
to integrate it or just need to back

107
00:05:02,260 --> 00:05:06,310
port at the older main boards and

108
00:05:03,760 --> 00:05:09,159
they'll really only do that if the OEMs

109
00:05:06,310 --> 00:05:12,820
are paying them for a support contract

110
00:05:09,160 --> 00:05:16,360
which means that for many boards they

111
00:05:12,820 --> 00:05:19,450
never ever see any firmware updates this

112
00:05:16,360 --> 00:05:22,300
is bad for usability bugs but it's

113
00:05:19,450 --> 00:05:25,210
especially bad for security bugs because

114
00:05:22,300 --> 00:05:26,980
this means that essentially a lot of

115
00:05:25,210 --> 00:05:29,080
this firmware is full of what are called

116
00:05:26,980 --> 00:05:30,580
forever day bugs that are going to be

117
00:05:29,080 --> 00:05:33,340
there as long as the system is deployed

118
00:05:30,580 --> 00:05:35,169
and we think Linux food and open

119
00:05:33,340 --> 00:05:38,710
firmware has a much better security

120
00:05:35,170 --> 00:05:41,620
story because the computer owners can

121
00:05:38,710 --> 00:05:43,989
apply security patches and apply them on

122
00:05:41,620 --> 00:05:47,530
their own schedule and they can then

123
00:05:43,990 --> 00:05:49,870
share those with the wider community the

124
00:05:47,530 --> 00:05:52,780
problem is we can only do this sort of

125
00:05:49,870 --> 00:05:57,480
self-help if we have documentation about

126
00:05:52,780 --> 00:06:00,520
what is on on these main boards that

127
00:05:57,480 --> 00:06:03,510
without documentation and schematics you

128
00:06:00,520 --> 00:06:07,659
were faced with a pile of parts and

129
00:06:03,510 --> 00:06:09,219
connectors and and and headers and you

130
00:06:07,660 --> 00:06:12,310
know what happens if you plug into this

131
00:06:09,220 --> 00:06:15,750
debug hooks port what is this sec update

132
00:06:12,310 --> 00:06:18,550
a jumper do why is there a weird

133
00:06:15,750 --> 00:06:21,400
daughter card kind of glommed on to this

134
00:06:18,550 --> 00:06:23,250
board is it supposed to be there is it

135
00:06:21,400 --> 00:06:25,750
some last-minute revision by the

136
00:06:23,250 --> 00:06:27,669
manufacturer or is it some sort of

137
00:06:25,750 --> 00:06:30,340
hardware implant from the intelligence

138
00:06:27,669 --> 00:06:32,740
agencies that are you know doing a

139
00:06:30,340 --> 00:06:35,320
supply chain attack against us it's

140
00:06:32,740 --> 00:06:40,060
probably not a a god surge from the NSA

141
00:06:35,320 --> 00:06:40,500
but how do we know these are some of the

142
00:06:40,060 --> 00:06:43,020
problems

143
00:06:40,500 --> 00:06:45,360
Sophia dan Tuan found when her firm was

144
00:06:43,020 --> 00:06:46,680
hired to tear down a bunch of super

145
00:06:45,360 --> 00:06:49,940
micro boards in the wake of the

146
00:06:46,680 --> 00:06:52,020
bloomberg story that they found

147
00:06:49,940 --> 00:06:53,700
inconsistencies between what was on the

148
00:06:52,020 --> 00:06:56,969
silk screen and what parts were

149
00:06:53,700 --> 00:06:58,590
installed they found signs of various

150
00:06:56,970 --> 00:07:00,870
revisions where things didn't

151
00:06:58,590 --> 00:07:03,210
necessarily get updated on the on the

152
00:07:00,870 --> 00:07:05,580
silk screens and as a result it was very

153
00:07:03,210 --> 00:07:08,640
unclear what parts were supposed to be

154
00:07:05,580 --> 00:07:10,500
there what maybe was added now you can

155
00:07:08,640 --> 00:07:14,789
check out her blog post for some more

156
00:07:10,500 --> 00:07:18,360
details there are also lots of just

157
00:07:14,790 --> 00:07:21,419
random test points on the boards that we

158
00:07:18,360 --> 00:07:22,590
can we can find out what some of them do

159
00:07:21,419 --> 00:07:24,870
through a reverse engineering and

160
00:07:22,590 --> 00:07:26,400
sometimes it's really sort of shocking

161
00:07:24,870 --> 00:07:28,980
what you can what you can do via these

162
00:07:26,400 --> 00:07:31,890
test points for instance on this server

163
00:07:28,980 --> 00:07:35,090
board there's what is very clearly a

164
00:07:31,890 --> 00:07:38,130
serial console and if you hook up to it

165
00:07:35,090 --> 00:07:41,039
it prints a prompt that says press ENTER

166
00:07:38,130 --> 00:07:42,870
and you press enter and it drops you

167
00:07:41,040 --> 00:07:49,050
into an unauthenticated root shell on

168
00:07:42,870 --> 00:07:52,140
the BMC why is this there and once

169
00:07:49,050 --> 00:07:54,960
you're on that PMC you have pretty much

170
00:07:52,140 --> 00:07:56,940
running the system it's connected to the

171
00:07:54,960 --> 00:07:59,370
power supply it's connected to the

172
00:07:56,940 --> 00:08:01,590
network so that that folks can turn the

173
00:07:59,370 --> 00:08:04,910
power supply on and off it's connected

174
00:08:01,590 --> 00:08:08,609
to the serial console so folks can do a

175
00:08:04,910 --> 00:08:14,190
bios interaction it can provide a USB

176
00:08:08,610 --> 00:08:16,530
file system to boot new os's it can see

177
00:08:14,190 --> 00:08:21,390
what's on the vga screen to provide a

178
00:08:16,530 --> 00:08:25,830
KVM functions it has DMA access through

179
00:08:21,390 --> 00:08:27,570
the PCIe to all the host memory it can

180
00:08:25,830 --> 00:08:30,870
talk to the spy bus which means it can

181
00:08:27,570 --> 00:08:32,849
install new firmware for the x86 and on

182
00:08:30,870 --> 00:08:34,620
many of them it's also on the LPC bus so

183
00:08:32,849 --> 00:08:38,070
it can steal secret's out of the out of

184
00:08:34,620 --> 00:08:39,390
the TPM this is basically a skeleton key

185
00:08:38,070 --> 00:08:41,940
to the system that has an

186
00:08:39,390 --> 00:08:45,380
unauthenticated root shell available for

187
00:08:41,940 --> 00:08:48,360
a hardware implant to take advantage of

188
00:08:45,380 --> 00:08:50,640
for more details on exactly how you

189
00:08:48,360 --> 00:08:52,890
could take advantage of that you can

190
00:08:50,640 --> 00:08:54,529
check out my talk from CCC last year

191
00:08:52,890 --> 00:08:57,569
about how

192
00:08:54,529 --> 00:09:01,649
maude ships could be installed in the

193
00:08:57,570 --> 00:09:06,600
supply chain to to bypass virtually to

194
00:09:01,649 --> 00:09:08,670
to take over the BMC luckily there are

195
00:09:06,600 --> 00:09:10,680
some manufacturers who are publishing

196
00:09:08,670 --> 00:09:14,910
their schematics the Open Compute

197
00:09:10,680 --> 00:09:16,890
Project is requiring that their that

198
00:09:14,910 --> 00:09:18,959
boards that they certify come with full

199
00:09:16,890 --> 00:09:20,430
schematics and the hyper scalars are

200
00:09:18,959 --> 00:09:23,699
buying these by the hundreds of

201
00:09:20,430 --> 00:09:26,819
thousands or millions of boards and it's

202
00:09:23,700 --> 00:09:29,880
really neat to see what goes into

203
00:09:26,820 --> 00:09:30,959
building the modern computer and when

204
00:09:29,880 --> 00:09:33,089
you go through these schematics you can

205
00:09:30,959 --> 00:09:34,920
actually see oh that's where the BMC

206
00:09:33,089 --> 00:09:37,709
debug port is we should think about

207
00:09:34,920 --> 00:09:39,990
what's actually running on on there you

208
00:09:37,709 --> 00:09:41,969
can see things like the bmc's JTAG

209
00:09:39,990 --> 00:09:44,220
interface so you can actually make

210
00:09:41,970 --> 00:09:47,300
reasoned decisions about should this be

211
00:09:44,220 --> 00:09:50,910
connected this also allows

212
00:09:47,300 --> 00:09:52,829
security-conscious sites to review the

213
00:09:50,910 --> 00:09:56,430
boards that they receive and validate

214
00:09:52,829 --> 00:09:57,989
that they match the designs now not

215
00:09:56,430 --> 00:10:01,050
everyone is going to have time to do

216
00:09:57,990 --> 00:10:02,899
that and as Stephanie land points out

217
00:10:01,050 --> 00:10:05,760
your threat model is not my threat model

218
00:10:02,899 --> 00:10:07,410
but the benefit is that the

219
00:10:05,760 --> 00:10:10,170
high-security sites that are doing this

220
00:10:07,410 --> 00:10:13,110
review both of the firmware and the

221
00:10:10,170 --> 00:10:15,060
hardware can publish without NDA's they

222
00:10:13,110 --> 00:10:16,290
can talk about what they find and that

223
00:10:15,060 --> 00:10:18,300
improves the security for the entire

224
00:10:16,290 --> 00:10:21,029
ecosystem and that's one of the real

225
00:10:18,300 --> 00:10:25,439
benefits of having this user freedom in

226
00:10:21,029 --> 00:10:27,120
the firmware so just like we don't all

227
00:10:25,440 --> 00:10:28,950
have the same threat model we also don't

228
00:10:27,120 --> 00:10:31,680
all have the same resiliency and

229
00:10:28,950 --> 00:10:33,420
recovery requirements so if we go back

230
00:10:31,680 --> 00:10:36,359
and look at that verified boot case

231
00:10:33,420 --> 00:10:38,880
where the the CPU just halts if it

232
00:10:36,360 --> 00:10:42,170
doesn't like the firmware in practice

233
00:10:38,880 --> 00:10:46,189
what does that look like well this is a

234
00:10:42,170 --> 00:10:48,329
pink pad with a boot guard failure and

235
00:10:46,190 --> 00:10:51,390
other than needing to clean the screen

236
00:10:48,329 --> 00:10:53,459
it's completely inert there is literally

237
00:10:51,390 --> 00:10:56,459
no sign of life it is indistinguishable

238
00:10:53,459 --> 00:10:59,310
from either a bad CPU or a bad battery

239
00:10:56,459 --> 00:11:03,719
or some other sort of hardware failure

240
00:10:59,310 --> 00:11:06,079
so there's no sign is was this a failed

241
00:11:03,720 --> 00:11:07,860
attack is this a hardware failure and

242
00:11:06,079 --> 00:11:10,829
recovering from this

243
00:11:07,860 --> 00:11:14,520
requires the ultra-high touch sort of

244
00:11:10,830 --> 00:11:16,020
invar method of hopping the bottom and

245
00:11:14,520 --> 00:11:18,840
hooking the flash program or up to the

246
00:11:16,020 --> 00:11:23,010
chip to to reflash with a known good

247
00:11:18,840 --> 00:11:25,560
firmware very few sites have the the

248
00:11:23,010 --> 00:11:28,439
skills and the the wherewithal to to

249
00:11:25,560 --> 00:11:30,839
cover from this sort of failure and as a

250
00:11:28,440 --> 00:11:33,240
result this was really only going to be

251
00:11:30,840 --> 00:11:35,460
done if there's a super high value that

252
00:11:33,240 --> 00:11:37,580
forensic need or other data on the

253
00:11:35,460 --> 00:11:37,580
system

254
00:11:37,670 --> 00:11:42,900
most folks want some sort of physical

255
00:11:40,080 --> 00:11:44,090
presence for their recovery so sort of a

256
00:11:42,900 --> 00:11:47,130
high-touch

257
00:11:44,090 --> 00:11:49,530
environment where perhaps you want to

258
00:11:47,130 --> 00:11:52,200
set a bios jumper or maybe you want to

259
00:11:49,530 --> 00:11:55,650
login to the serial console or perhaps

260
00:11:52,200 --> 00:11:57,570
hold down a key on boot with with free

261
00:11:55,650 --> 00:11:59,790
software these sort of configuration

262
00:11:57,570 --> 00:12:02,820
choices right these sorts of choices

263
00:11:59,790 --> 00:12:04,949
become configuration through shell

264
00:12:02,820 --> 00:12:06,330
scripts or other simple means you know

265
00:12:04,950 --> 00:12:08,850
this is no longer a decision that the

266
00:12:06,330 --> 00:12:13,580
OEM has to make for you it's one that

267
00:12:08,850 --> 00:12:15,870
you as can make for your own computers

268
00:12:13,580 --> 00:12:19,350
some sites do want to be able to do

269
00:12:15,870 --> 00:12:21,750
network recovery Samantha downs from

270
00:12:19,350 --> 00:12:25,170
Facebook gave a talk about how they have

271
00:12:21,750 --> 00:12:28,800
redesigned parts of open BMC on their

272
00:12:25,170 --> 00:12:31,260
servers to use a root of trust for

273
00:12:28,800 --> 00:12:33,569
recovery where they now have a

274
00:12:31,260 --> 00:12:35,850
certificate authority in their being

275
00:12:33,570 --> 00:12:39,390
which made a certificate authority key

276
00:12:35,850 --> 00:12:41,580
in their BMC that can validate the the

277
00:12:39,390 --> 00:12:42,780
users trying to log in to do recovery

278
00:12:41,580 --> 00:12:44,040
and this means they don't have to worry

279
00:12:42,780 --> 00:12:47,610
about passwords they don't have to worry

280
00:12:44,040 --> 00:12:49,560
about expiration and this again this is

281
00:12:47,610 --> 00:12:51,570
no longer something that they had to go

282
00:12:49,560 --> 00:12:56,550
to an OEM to ask for they were able to

283
00:12:51,570 --> 00:12:58,590
implement with a few lines of code a lot

284
00:12:56,550 --> 00:13:01,770
of sites are also zero touch you know

285
00:12:58,590 --> 00:13:04,110
perhaps you have millions of machines

286
00:13:01,770 --> 00:13:06,210
over hundreds of acres in the Utah

287
00:13:04,110 --> 00:13:09,090
desert where nobody wants to go maintain

288
00:13:06,210 --> 00:13:11,820
them or perhaps you put machines in a

289
00:13:09,090 --> 00:13:16,080
container that are at a powerses you

290
00:13:11,820 --> 00:13:17,730
know out of a power station or perhaps

291
00:13:16,080 --> 00:13:20,490
you've sunk a bunch of machines in the

292
00:13:17,730 --> 00:13:20,880
in the ocean and you know can't can't

293
00:13:20,490 --> 00:13:23,550
get it

294
00:13:20,880 --> 00:13:26,819
attack out there these are sort of the

295
00:13:23,550 --> 00:13:28,500
cases where you do not want a system to

296
00:13:26,819 --> 00:13:31,560
heartbreak in the event of any sort of

297
00:13:28,500 --> 00:13:34,160
failure and this is where again we think

298
00:13:31,560 --> 00:13:37,170
open firmware it has a really good

299
00:13:34,160 --> 00:13:40,350
resiliency story because we can provide

300
00:13:37,170 --> 00:13:42,660
tools not policy we can let the

301
00:13:40,350 --> 00:13:47,370
individual sites choose what works best

302
00:13:42,660 --> 00:13:49,860
for them as David and Andrea pointed out

303
00:13:47,370 --> 00:13:52,920
this lets you solve your firmware

304
00:13:49,860 --> 00:13:55,440
problems with the same Linux tools that

305
00:13:52,920 --> 00:13:57,209
you would be using to do any of your

306
00:13:55,440 --> 00:13:59,819
other sort of system management and

307
00:13:57,209 --> 00:14:03,829
that's a real value for a lot of sites

308
00:13:59,819 --> 00:14:06,380
to be able to script these things and

309
00:14:03,829 --> 00:14:10,500
recover from failures with the same

310
00:14:06,380 --> 00:14:11,939
skill set that they already have most of

311
00:14:10,500 --> 00:14:14,490
the mostly we've been talking about

312
00:14:11,940 --> 00:14:16,680
failures but recovering from attacks is

313
00:14:14,490 --> 00:14:19,620
really hard and especially attacks that

314
00:14:16,680 --> 00:14:24,269
are targeting firmware because firmware

315
00:14:19,620 --> 00:14:26,939
can survive OS reinstalls some malware

316
00:14:24,269 --> 00:14:31,139
attacks can even install themselves deep

317
00:14:26,939 --> 00:14:35,819
into the chipset and require very you

318
00:14:31,139 --> 00:14:38,370
know invasive desolder into to remove so

319
00:14:35,819 --> 00:14:41,099
a lot of places are using the BMC is the

320
00:14:38,370 --> 00:14:42,899
sort of out-of-band for a more update

321
00:14:41,100 --> 00:14:46,610
mechanism but this means that now that

322
00:14:42,899 --> 00:14:50,459
BMC is inside the trusted computing base

323
00:14:46,610 --> 00:14:52,500
and you know as as I alluded to I have

324
00:14:50,459 --> 00:14:55,649
concerns about that and so do a lot of

325
00:14:52,500 --> 00:14:58,589
other folks the director of Azura

326
00:14:55,649 --> 00:15:01,889
security points out that the BMC s are

327
00:14:58,589 --> 00:15:05,040
really insecure that they have almost no

328
00:15:01,889 --> 00:15:08,880
protections they have very little

329
00:15:05,040 --> 00:15:11,430
ability to recover and they don't have

330
00:15:08,880 --> 00:15:12,660
any way to detect when failures have

331
00:15:11,430 --> 00:15:16,290
occurred because they don't participate

332
00:15:12,660 --> 00:15:20,100
in in the road attestation which brings

333
00:15:16,290 --> 00:15:21,209
us to this the third sort of part of you

334
00:15:20,100 --> 00:15:23,130
know but what I think we need to build

335
00:15:21,209 --> 00:15:25,920
more secure systems which is remote

336
00:15:23,130 --> 00:15:28,439
attestation and in the open community

337
00:15:25,920 --> 00:15:33,630
the station has been a bad word for

338
00:15:28,439 --> 00:15:34,709
literally decades that in 1999 the the

339
00:15:33,630 --> 00:15:37,189
free software community

340
00:15:34,710 --> 00:15:40,460
were build when Intel wanted to add a

341
00:15:37,190 --> 00:15:42,960
unique serial number that would allow

342
00:15:40,460 --> 00:15:45,930
devices to be tracked this seems very

343
00:15:42,960 --> 00:15:48,240
quaint now that you know that people are

344
00:15:45,930 --> 00:15:51,540
concerned about being tracked on on the

345
00:15:48,240 --> 00:15:53,970
Internet but it led to you know very

346
00:15:51,540 --> 00:15:57,660
heated flame war zone on the Linux

347
00:15:53,970 --> 00:15:59,640
mailing lists but what really turned the

348
00:15:57,660 --> 00:16:02,100
community against the trusted computing

349
00:15:59,640 --> 00:16:05,490
was a few years later when Microsoft

350
00:16:02,100 --> 00:16:06,780
Palladium was announced this is back

351
00:16:05,490 --> 00:16:11,910
when you could build websites with

352
00:16:06,780 --> 00:16:14,339
tables very web 1.0 the big concern was

353
00:16:11,910 --> 00:16:16,829
that Microsoft was going to add hardware

354
00:16:14,340 --> 00:16:21,800
to the computers that would validate the

355
00:16:16,830 --> 00:16:24,360
OS and validate the applications and as

356
00:16:21,800 --> 00:16:26,670
was discussed on the mailing list the

357
00:16:24,360 --> 00:16:29,370
whole point of open source is for users

358
00:16:26,670 --> 00:16:31,079
to be able to modify the code and if

359
00:16:29,370 --> 00:16:34,140
every modification requires a new

360
00:16:31,080 --> 00:16:37,200
signature from Microsoft that that

361
00:16:34,140 --> 00:16:41,160
suddenly becomes the the end of open

362
00:16:37,200 --> 00:16:44,670
source software so as a result the Linux

363
00:16:41,160 --> 00:16:46,920
community has really not supported TPMS

364
00:16:44,670 --> 00:16:50,250
at all and these trusted platform

365
00:16:46,920 --> 00:16:52,740
modules have you know are required by

366
00:16:50,250 --> 00:16:55,290
Windows for a certain certification but

367
00:16:52,740 --> 00:16:58,470
only Windows uses them largely only

368
00:16:55,290 --> 00:17:01,530
Windows uses them for BitLocker and DRM

369
00:16:58,470 --> 00:17:03,650
applications so basically a lot of the

370
00:17:01,530 --> 00:17:06,980
things that people are concerned about

371
00:17:03,650 --> 00:17:11,579
however they can be used for good and

372
00:17:06,980 --> 00:17:13,079
the chromebook project is doing is using

373
00:17:11,579 --> 00:17:15,750
a lot of the really innovative features

374
00:17:13,079 --> 00:17:17,790
on the TPM that they have things like

375
00:17:15,750 --> 00:17:21,240
these monotonic counters that only

376
00:17:17,790 --> 00:17:23,220
increment and this these can be used to

377
00:17:21,240 --> 00:17:25,650
prevent roll back attacks where folks

378
00:17:23,220 --> 00:17:29,040
want to install an older insecure

379
00:17:25,650 --> 00:17:32,130
version of software they have the

380
00:17:29,040 --> 00:17:34,590
ability to seal secrets in a way that

381
00:17:32,130 --> 00:17:38,250
they the TPM will only decrypt them that

382
00:17:34,590 --> 00:17:40,980
if the firmware is unchanged in a really

383
00:17:38,250 --> 00:17:43,110
key distinction here is the TPM will

384
00:17:40,980 --> 00:17:45,210
only decrypt them if it's unchanged from

385
00:17:43,110 --> 00:17:48,149
when it was sealed not if it matches

386
00:17:45,210 --> 00:17:48,540
some vendor signature so on a Chromebook

387
00:17:48,150 --> 00:17:51,630
you

388
00:17:48,540 --> 00:17:55,200
install your own firmware and reseal the

389
00:17:51,630 --> 00:17:57,030
disk encryption keys and run it with

390
00:17:55,200 --> 00:18:01,650
your own firmware without having to talk

391
00:17:57,030 --> 00:18:03,270
to Google or get in any approval the TPM

392
00:18:01,650 --> 00:18:05,760
is also used by the Chromebook for doing

393
00:18:03,270 --> 00:18:08,910
remote attestation so that Google can

394
00:18:05,760 --> 00:18:11,370
decide whether they will trust logins

395
00:18:08,910 --> 00:18:14,220
from that account actually from that

396
00:18:11,370 --> 00:18:16,560
device and you can tell Google I am

397
00:18:14,220 --> 00:18:20,000
using a hacked Chromebook of my own I

398
00:18:16,560 --> 00:18:23,520
want to I want to trust it and login and

399
00:18:20,000 --> 00:18:26,280
this is you know again not being used to

400
00:18:23,520 --> 00:18:28,650
lock out on authorized devices but is to

401
00:18:26,280 --> 00:18:32,490
enhance the the security for the users

402
00:18:28,650 --> 00:18:34,830
so the key message TPMS can be used for

403
00:18:32,490 --> 00:18:38,850
good and I hope the the open-source

404
00:18:34,830 --> 00:18:41,460
community comes around to that there are

405
00:18:38,850 --> 00:18:44,159
some folks who are advocating for it

406
00:18:41,460 --> 00:18:46,410
Matthew Garrett has been tirelessly

407
00:18:44,160 --> 00:18:50,100
pushing for for TPM and trusted

408
00:18:46,410 --> 00:18:52,140
computing patches and he came up with a

409
00:18:50,100 --> 00:18:53,939
really innovative way that the TPMS can

410
00:18:52,140 --> 00:18:57,240
be used to help secure the the early

411
00:18:53,940 --> 00:19:00,000
boot process where the computer pops up

412
00:18:57,240 --> 00:19:00,690
the the prompt for your disk encryption

413
00:19:00,000 --> 00:19:03,630
password

414
00:19:00,690 --> 00:19:05,280
he points out you know can you trust the

415
00:19:03,630 --> 00:19:07,440
firmware that launched the bootloader

416
00:19:05,280 --> 00:19:09,450
that loaded the kernel that's running

417
00:19:07,440 --> 00:19:13,620
the software that is now asking for your

418
00:19:09,450 --> 00:19:16,200
your disk encryption password and what

419
00:19:13,620 --> 00:19:20,989
he proposed is the computer can attest

420
00:19:16,200 --> 00:19:24,660
to the user that that it's unmodified

421
00:19:20,990 --> 00:19:28,350
and he he did this with a sealed secret

422
00:19:24,660 --> 00:19:31,110
in the TPM that's shared with a top piaf

423
00:19:28,350 --> 00:19:33,510
indicator so when the computer boots if

424
00:19:31,110 --> 00:19:36,629
the firmware is unchanged the TPM will

425
00:19:33,510 --> 00:19:39,120
unseal that secret combine that secret

426
00:19:36,630 --> 00:19:41,280
with the current time and produce a six

427
00:19:39,120 --> 00:19:42,719
digit code that the user can then

428
00:19:41,280 --> 00:19:44,760
compare to what's being displayed on

429
00:19:42,720 --> 00:19:47,430
their phone and decide whether or not

430
00:19:44,760 --> 00:19:49,800
they they trust that the system is

431
00:19:47,430 --> 00:19:52,710
unmodified this is a really clever way

432
00:19:49,800 --> 00:19:55,230
to sort of use attestation for the

433
00:19:52,710 --> 00:20:00,300
benefit of the user rather than to lock

434
00:19:55,230 --> 00:20:01,799
down the machine there also is possible

435
00:20:00,300 --> 00:20:04,408
to use this attestation

436
00:20:01,799 --> 00:20:08,220
again from the server to the user in the

437
00:20:04,409 --> 00:20:11,009
same flipped mode the mole had VPN

438
00:20:08,220 --> 00:20:13,080
provider is published a really nice

439
00:20:11,009 --> 00:20:17,070
white paper about how they are going to

440
00:20:13,080 --> 00:20:19,080
use attestation to help you decide

441
00:20:17,070 --> 00:20:21,269
whether or not you can trust them so

442
00:20:19,080 --> 00:20:23,879
they're going to publish all of their

443
00:20:21,269 --> 00:20:26,820
their software stack in a reproducibly

444
00:20:23,879 --> 00:20:28,619
built manner that you can read through

445
00:20:26,820 --> 00:20:30,720
all the code you can decide whether or

446
00:20:28,619 --> 00:20:34,918
not you trust their login and their

447
00:20:30,720 --> 00:20:37,230
interactive access and then generate a

448
00:20:34,919 --> 00:20:39,239
hash that you can then compare against

449
00:20:37,230 --> 00:20:43,799
the cryptographic signature from the TPM

450
00:20:39,239 --> 00:20:46,350
on their servers to decide if it is

451
00:20:43,799 --> 00:20:49,320
unchanged from what you've reviewed and

452
00:20:46,350 --> 00:20:52,559
audited the other thing Moffat has done

453
00:20:49,320 --> 00:20:55,739
to support this is they have paid nine

454
00:20:52,559 --> 00:20:58,889
elements cybersecurity two-port coreboot

455
00:20:55,739 --> 00:21:02,609
to the servers that they're using as

456
00:20:58,889 --> 00:21:06,359
well as then the micro BMC or open BMC

457
00:21:02,609 --> 00:21:09,059
which means that that thanks to the to

458
00:21:06,359 --> 00:21:11,580
their support the community can now buy

459
00:21:09,059 --> 00:21:14,249
a commodity off the shelf server and run

460
00:21:11,580 --> 00:21:17,129
open source firmware all the way from

461
00:21:14,249 --> 00:21:21,210
the BMC power on through the CPU power

462
00:21:17,129 --> 00:21:23,639
on and then all the way into the OS and

463
00:21:21,210 --> 00:21:26,070
software stack which means they can have

464
00:21:23,639 --> 00:21:29,609
an unbroken chain of trust consisting

465
00:21:26,070 --> 00:21:32,549
almost entirely of free software that

466
00:21:29,609 --> 00:21:35,489
the their users can audit and can read

467
00:21:32,549 --> 00:21:38,700
and can reason about and because they've

468
00:21:35,489 --> 00:21:40,889
released this into the main line of the

469
00:21:38,700 --> 00:21:44,279
coreboot tree everyone else who wants to

470
00:21:40,889 --> 00:21:48,330
build servers built on free software now

471
00:21:44,279 --> 00:21:50,220
I can can do that I'm also really

472
00:21:48,330 --> 00:21:53,570
excited about some of the developments

473
00:21:50,220 --> 00:21:58,919
in in enclaves and trusted execution

474
00:21:53,570 --> 00:22:01,678
Intel SGX is a way to run a bring three

475
00:21:58,919 --> 00:22:04,320
userspace process in encrypted memory

476
00:22:01,679 --> 00:22:08,159
where the OS or the hypervisor can't see

477
00:22:04,320 --> 00:22:11,340
what's happening in that process and the

478
00:22:08,159 --> 00:22:14,100
CPU can sign a cryptographic quote or

479
00:22:11,340 --> 00:22:15,179
some cryptographic hash of the

480
00:22:14,100 --> 00:22:18,149
application

481
00:22:15,180 --> 00:22:20,400
to say to prove to the outside world

482
00:22:18,150 --> 00:22:24,450
that it is running in this in this

483
00:22:20,400 --> 00:22:25,920
Sakura mode signal is talking about

484
00:22:24,450 --> 00:22:28,950
using this if we're doing contact

485
00:22:25,920 --> 00:22:30,600
discovery because they're not like

486
00:22:28,950 --> 00:22:32,970
LinkedIn they don't want to know who

487
00:22:30,600 --> 00:22:34,350
your contacts are but they need to know

488
00:22:32,970 --> 00:22:37,560
who your contacts are so they can tell

489
00:22:34,350 --> 00:22:41,340
you who else is on signal and what

490
00:22:37,560 --> 00:22:43,800
they've proposed doing is publishing the

491
00:22:41,340 --> 00:22:45,990
code that does that contact matching so

492
00:22:43,800 --> 00:22:49,590
that users can review it verify that

493
00:22:45,990 --> 00:22:52,560
they're not storing the data and then by

494
00:22:49,590 --> 00:22:55,560
running that in in SGX Enclave they can

495
00:22:52,560 --> 00:22:57,800
provide an attestation that it is

496
00:22:55,560 --> 00:23:00,389
running the code that has been reviewed

497
00:22:57,800 --> 00:23:01,800
so that you can feel fairly confident

498
00:23:00,390 --> 00:23:05,600
that they're not going to leak your

499
00:23:01,800 --> 00:23:09,510
contacts and spam them with with emails

500
00:23:05,600 --> 00:23:12,810
I'm also really excited about AMD's SCV

501
00:23:09,510 --> 00:23:15,780
which is applying similar encryption

502
00:23:12,810 --> 00:23:18,590
ideas to entire virtual machines so in

503
00:23:15,780 --> 00:23:20,430
this case when you want to launch a

504
00:23:18,590 --> 00:23:23,280
virtual machine on a cloud provider

505
00:23:20,430 --> 00:23:27,420
right now they can see everything that's

506
00:23:23,280 --> 00:23:28,830
running in your in your VM and they can

507
00:23:27,420 --> 00:23:31,590
see all your secrets they can read your

508
00:23:28,830 --> 00:23:33,120
your data it would be really nice if you

509
00:23:31,590 --> 00:23:34,949
didn't have to trust them if they could

510
00:23:33,120 --> 00:23:37,129
be outside your trusted computing base

511
00:23:34,950 --> 00:23:42,540
and you didn't have to depend on their

512
00:23:37,130 --> 00:23:45,030
their administrators and I think this is

513
00:23:42,540 --> 00:23:47,899
a really important step that's going to

514
00:23:45,030 --> 00:23:50,879
change the way a lot of us use the cloud

515
00:23:47,900 --> 00:23:52,650
just like a few years ago memory

516
00:23:50,880 --> 00:23:54,270
management units were a new thing and

517
00:23:52,650 --> 00:23:55,230
suddenly we got protection between

518
00:23:54,270 --> 00:23:57,510
processes

519
00:23:55,230 --> 00:23:59,580
I think encrypted virtual machines are

520
00:23:57,510 --> 00:24:04,650
going to be the new normal within a few

521
00:23:59,580 --> 00:24:08,960
years now just like both SGX and SUV had

522
00:24:04,650 --> 00:24:12,450
had some initial problems the team at a

523
00:24:08,960 --> 00:24:16,470
Technical University of Berlin found

524
00:24:12,450 --> 00:24:19,320
some hardware attacks against SUV SGX

525
00:24:16,470 --> 00:24:23,790
has also had some massive side-channel

526
00:24:19,320 --> 00:24:26,340
attacks however they found they

527
00:24:23,790 --> 00:24:28,320
concluded the the authentication

528
00:24:26,340 --> 00:24:29,040
protocol and the attestation protocol

529
00:24:28,320 --> 00:24:33,210
was

530
00:24:29,040 --> 00:24:34,909
who seemed reasonable and again I really

531
00:24:33,210 --> 00:24:38,010
encouraged and hope that that's going to

532
00:24:34,910 --> 00:24:41,400
become the new normal to the table

533
00:24:38,010 --> 00:24:43,440
stakes for writing a cloud provider the

534
00:24:41,400 --> 00:24:45,260
cloud provider all cloud providers are

535
00:24:43,440 --> 00:24:48,540
also doing a lot of innovation on

536
00:24:45,260 --> 00:24:51,230
Hardware British trusts so that so they

537
00:24:48,540 --> 00:24:55,260
can have more faith in their own systems

538
00:24:51,230 --> 00:24:57,900
the Google Titan ship is doing firmware

539
00:24:55,260 --> 00:24:59,460
validation against their own signatures

540
00:24:57,900 --> 00:25:02,790
they also are shipping it in the

541
00:24:59,460 --> 00:25:06,810
Chromebooks and it's able to take over

542
00:25:02,790 --> 00:25:10,050
the TPM functions Microsoft Cerberus is

543
00:25:06,810 --> 00:25:12,780
being used in Azure it also has some of

544
00:25:10,050 --> 00:25:15,270
our TPM like functions they are going to

545
00:25:12,780 --> 00:25:18,389
step further and publishing open source

546
00:25:15,270 --> 00:25:20,520
and open silicon for it and so if you

547
00:25:18,390 --> 00:25:23,310
wanted to build your own firmware and

548
00:25:20,520 --> 00:25:25,710
fuse your own Keys you can do that it's

549
00:25:23,310 --> 00:25:28,740
very interesting that you know marks off

550
00:25:25,710 --> 00:25:30,930
from 2002 to 2009 teen has completely

551
00:25:28,740 --> 00:25:35,220
changed their view on a lot of this open

552
00:25:30,930 --> 00:25:37,020
source amazon also has a hardware

553
00:25:35,220 --> 00:25:39,600
verdure trust on their on their machines

554
00:25:37,020 --> 00:25:41,730
they haven't provided any details about

555
00:25:39,600 --> 00:25:43,320
what's going on inside so it's not

556
00:25:41,730 --> 00:25:46,880
really particularly interesting from the

557
00:25:43,320 --> 00:25:50,040
free software side of it other than that

558
00:25:46,880 --> 00:25:53,550
it's important enough for them to be

559
00:25:50,040 --> 00:25:56,700
concerned about it and then Apple has

560
00:25:53,550 --> 00:25:59,580
also produced a really neat chip for

561
00:25:56,700 --> 00:26:04,380
their Mac books that does firmware

562
00:25:59,580 --> 00:26:05,970
validation prior to CPU reset and they

563
00:26:04,380 --> 00:26:08,160
deserve a lot of credit for building

564
00:26:05,970 --> 00:26:10,320
secure by default systems but

565
00:26:08,160 --> 00:26:12,960
unfortunately it is completely locked

566
00:26:10,320 --> 00:26:18,360
down so that only Apple firmware will

567
00:26:12,960 --> 00:26:20,910
run it is pretty neat though how that

568
00:26:18,360 --> 00:26:23,459
one is interposing the spy bus there's a

569
00:26:20,910 --> 00:26:27,120
really nice white paper that was worth

570
00:26:23,460 --> 00:26:31,890
checking out all of these are looking at

571
00:26:27,120 --> 00:26:34,500
how to protect the x86 from and in some

572
00:26:31,890 --> 00:26:36,660
cases the BMC firmware but as Johanna

573
00:26:34,500 --> 00:26:38,850
Houska pointed out there's a lot of

574
00:26:36,660 --> 00:26:43,380
mutable state and a lot of firmware in

575
00:26:38,850 --> 00:26:46,320
our servers if we look at any monitor

576
00:26:43,380 --> 00:26:48,990
computer or modern server we have

577
00:26:46,320 --> 00:26:52,889
firmware in the CPU we have firmware in

578
00:26:48,990 --> 00:26:55,080
the BMC the nick has firmware the GPU

579
00:26:52,890 --> 00:26:57,210
has firmware the disk controllers have

580
00:26:55,080 --> 00:26:59,668
firmware the disks have firmware the

581
00:26:57,210 --> 00:27:02,010
front panels have firmware some of the

582
00:26:59,669 --> 00:27:04,620
fans have firmware the power supplies

583
00:27:02,010 --> 00:27:07,289
have firmware and I've been able to get

584
00:27:04,620 --> 00:27:09,600
good execution on on at least one BMC

585
00:27:07,289 --> 00:27:13,679
over the PM bus from a power supply

586
00:27:09,600 --> 00:27:17,219
which you know it should not be possible

587
00:27:13,679 --> 00:27:20,370
but these the big problems that we're

588
00:27:17,220 --> 00:27:22,710
not treating our computers as the

589
00:27:20,370 --> 00:27:24,510
distributed networks that they are we

590
00:27:22,710 --> 00:27:27,059
really need to start treating them more

591
00:27:24,510 --> 00:27:29,850
as sort of a distrusting distributed

592
00:27:27,059 --> 00:27:31,799
network because they're not yeah they're

593
00:27:29,850 --> 00:27:33,750
not one computer his white quark says

594
00:27:31,799 --> 00:27:39,179
it's a whole bunch of embedded devices

595
00:27:33,750 --> 00:27:41,730
hidin in trench coat so more seriously

596
00:27:39,179 --> 00:27:43,350
NIST is has published some guidelines

597
00:27:41,730 --> 00:27:47,899
and these were mentioned yesterday in

598
00:27:43,350 --> 00:27:51,809
the supply chain discussion about how to

599
00:27:47,899 --> 00:27:57,418
try to think about is this network of

600
00:27:51,809 --> 00:27:59,519
devices inside our computers and the the

601
00:27:57,419 --> 00:28:01,350
the guidelines are a good start that

602
00:27:59,519 --> 00:28:04,620
they identify the three roots of trust

603
00:28:01,350 --> 00:28:07,379
for update for measurement and for

604
00:28:04,620 --> 00:28:09,719
recovery and they talk about how to try

605
00:28:07,380 --> 00:28:13,740
to extend this sort of in the tree of

606
00:28:09,720 --> 00:28:16,110
devices unfortunately a lot of them

607
00:28:13,740 --> 00:28:19,070
handle on the fact that perhaps the

608
00:28:16,110 --> 00:28:23,360
device manufacturers are trustworthy and

609
00:28:19,070 --> 00:28:24,809
we're facing a lot of trouble on our

610
00:28:23,360 --> 00:28:29,939
supply chains

611
00:28:24,809 --> 00:28:32,730
we're ship that look legit internally

612
00:28:29,940 --> 00:28:34,679
may be completely counterfeit and in the

613
00:28:32,730 --> 00:28:37,220
case of these FTDI chips it's a

614
00:28:34,679 --> 00:28:39,750
completely a different CPU running

615
00:28:37,220 --> 00:28:41,880
software that's emulating the original

616
00:28:39,750 --> 00:28:44,460
one this was done by a contract

617
00:28:41,880 --> 00:28:47,059
manufacturer to save on cost but you can

618
00:28:44,460 --> 00:28:50,820
imagine the security implications of

619
00:28:47,059 --> 00:28:53,629
having a completely different CPU inside

620
00:28:50,820 --> 00:28:56,639
some of these things

621
00:28:53,630 --> 00:28:59,190
we're also most of the Rizzoli

622
00:28:56,640 --> 00:29:01,830
the guidelines don't really address the

623
00:28:59,190 --> 00:29:04,500
possibility of hardware interposers like

624
00:29:01,830 --> 00:29:07,409
the TPM genie that can intercept all of

625
00:29:04,500 --> 00:29:09,350
the TPM traffic and circumvent the

626
00:29:07,410 --> 00:29:14,400
derivative trust that the TPM provides

627
00:29:09,350 --> 00:29:16,790
but or attacks like the spy flash talked

628
00:29:14,400 --> 00:29:20,250
out that Peter Bosch and I came up with

629
00:29:16,790 --> 00:29:22,320
and were able to defeat a boot guard we

630
00:29:20,250 --> 00:29:24,570
turned that into an open-source tool

631
00:29:22,320 --> 00:29:26,669
called a spy spy that is really useful

632
00:29:24,570 --> 00:29:31,020
for investigating early boot time

633
00:29:26,670 --> 00:29:39,120
security and I gave you talk about that

634
00:29:31,020 --> 00:29:40,230
last week at at CCC camp so hopefully in

635
00:29:39,120 --> 00:29:43,439
this brief talk have been able to

636
00:29:40,230 --> 00:29:45,270
convince you that that verified boot is

637
00:29:43,440 --> 00:29:47,790
not the way to go but if you're building

638
00:29:45,270 --> 00:29:51,000
systems is that you should think about

639
00:29:47,790 --> 00:29:53,370
how to how to embrace user freedom to

640
00:29:51,000 --> 00:29:55,500
make more resilient systems and how to

641
00:29:53,370 --> 00:29:57,389
also be able to attest that what's

642
00:29:55,500 --> 00:29:59,670
actually run in and if this sort of

643
00:29:57,390 --> 00:30:02,070
thing is of interest to you we have a

644
00:29:59,670 --> 00:30:05,070
slack group where a bunch of us hang out

645
00:30:02,070 --> 00:30:07,830
and would love to hear your thoughts on

646
00:30:05,070 --> 00:30:09,600
how to build more secure systems and I

647
00:30:07,830 --> 00:30:11,399
hope you all have a wonderful second day

648
00:30:09,600 --> 00:30:13,750
here at hardware i/o and I'd love to

649
00:30:11,400 --> 00:30:19,849
take any questions you might have

650
00:30:13,750 --> 00:30:19,849
[Applause]

651
00:30:37,630 --> 00:30:48,430
hello I'm just curious how do you think

652
00:30:45,140 --> 00:30:52,940
such an open-source booth could handle

653
00:30:48,430 --> 00:30:55,940
Intel microcode app upgrades properly so

654
00:30:52,940 --> 00:30:58,820
then you have a commercial process

655
00:30:55,940 --> 00:31:02,600
server via ProSource micro called

656
00:30:58,820 --> 00:31:05,330
upgrade and it would cause changes in

657
00:31:02,600 --> 00:31:08,540
the operation of this full system at the

658
00:31:05,330 --> 00:31:11,990
next boot so the question is about what

659
00:31:08,540 --> 00:31:13,820
about closed source blobs like in

660
00:31:11,990 --> 00:31:17,620
microphone updates other things that are

661
00:31:13,820 --> 00:31:20,629
required to boot modern Intel CPUs and I

662
00:31:17,620 --> 00:31:23,629
did sort of gloss over that in the in

663
00:31:20,630 --> 00:31:26,480
for instance the the mold add core brood

664
00:31:23,630 --> 00:31:29,690
port it is using Intel FSP and it is

665
00:31:26,480 --> 00:31:31,520
applying microphone updates so there are

666
00:31:29,690 --> 00:31:34,040
some things like the SGX

667
00:31:31,520 --> 00:31:36,889
takes into account the the micro code

668
00:31:34,040 --> 00:31:40,100
revision as part of its security version

669
00:31:36,890 --> 00:31:41,930
number so the quote that you receive the

670
00:31:40,100 --> 00:31:42,830
cryptographic quote from the from the

671
00:31:41,930 --> 00:31:45,680
SGX

672
00:31:42,830 --> 00:31:48,710
tells you if the microgrids has changed

673
00:31:45,680 --> 00:31:51,110
because my code can circumvent a huge

674
00:31:48,710 --> 00:31:51,860
number of you could potentially

675
00:31:51,110 --> 00:31:56,780
introduce a lot of security

676
00:31:51,860 --> 00:31:58,429
vulnerabilities the in terms of being

677
00:31:56,780 --> 00:32:00,800
able to just integrate micro code

678
00:31:58,430 --> 00:32:03,230
updates that's not a problem Linux can

679
00:32:00,800 --> 00:32:05,419
load microcode the cpu also will look at

680
00:32:03,230 --> 00:32:09,590
what's called the x86 we look at the

681
00:32:05,420 --> 00:32:11,030
firmware interface table and see if

682
00:32:09,590 --> 00:32:14,720
there any microphone updates for it

683
00:32:11,030 --> 00:32:18,320
prior to start in the boot guard ACM or

684
00:32:14,720 --> 00:32:19,850
any of the other firm where they

685
00:32:18,320 --> 00:32:24,980
actually does that before executing any

686
00:32:19,850 --> 00:32:28,010
user mode CPU instructions the concern

687
00:32:24,980 --> 00:32:30,530
about could they circumvent security

688
00:32:28,010 --> 00:32:33,560
through doing so they could however

689
00:32:30,530 --> 00:32:36,649
attestation potentially gives us a way

690
00:32:33,560 --> 00:32:38,149
to detect that because if the part of

691
00:32:36,650 --> 00:32:42,950
the firmware that includes that micro

692
00:32:38,150 --> 00:32:45,470
code update is hashed into the into the

693
00:32:42,950 --> 00:32:47,990
TPM or the other route of trust the

694
00:32:45,470 --> 00:32:51,080
attestation would tell us whether or not

695
00:32:47,990 --> 00:32:54,470
an adversary had installed a new work

696
00:32:51,080 --> 00:32:57,649
zooming a different micro code so it is

697
00:32:54,470 --> 00:32:59,720
a concern I think it's somewhat

698
00:32:57,650 --> 00:33:03,410
ameliorated put by the things like the

699
00:32:59,720 --> 00:33:08,710
SGX Enclave quote as well as the the

700
00:33:03,410 --> 00:33:08,710
measured food approach of using the CPM

701
00:33:09,280 --> 00:33:17,000
okay thank you for your presentation

702
00:33:11,990 --> 00:33:19,190
then regarding an SP h 100 193 I believe

703
00:33:17,000 --> 00:33:23,870
where this was published i ago a couple

704
00:33:19,190 --> 00:33:27,260
of years ago by nist and then still this

705
00:33:23,870 --> 00:33:30,139
is not fully recognized by the industry

706
00:33:27,260 --> 00:33:38,170
or by people about society but i think

707
00:33:30,140 --> 00:33:41,300
this is one of the the most clear

708
00:33:38,170 --> 00:33:44,480
document to describe the formula

709
00:33:41,300 --> 00:33:47,840
resiliency guideline as a c guidelines

710
00:33:44,480 --> 00:33:53,300
in front of the public and then so i

711
00:33:47,840 --> 00:33:55,399
wonder how this can be accepted in the

712
00:33:53,300 --> 00:33:58,730
near future and data so what do you

713
00:33:55,400 --> 00:34:02,260
think about the potential acceptance of

714
00:33:58,730 --> 00:34:08,210
this document in the as a kind of um the

715
00:34:02,260 --> 00:34:11,929
de facto standard maybe so I completely

716
00:34:08,210 --> 00:34:14,750
agree that the 823 guidelines per

717
00:34:11,929 --> 00:34:16,879
platform platform resiliency guidelines

718
00:34:14,750 --> 00:34:20,719
are really well written they're really

719
00:34:16,880 --> 00:34:23,750
quite clear as far as standards go I am

720
00:34:20,719 --> 00:34:27,799
a little bit despairing at the the slow

721
00:34:23,750 --> 00:34:31,850
pace of firmware updates and things like

722
00:34:27,800 --> 00:34:34,580
the Vincent's Zimmer who's the lead at

723
00:34:31,850 --> 00:34:38,900
the UEFI group at Intel published a

724
00:34:34,580 --> 00:34:42,830
white paper in 2014 about turning on the

725
00:34:38,900 --> 00:34:45,980
iommu in the firmware to prevent DMA

726
00:34:42,830 --> 00:34:47,509
attacks in the early boot other than

727
00:34:45,980 --> 00:34:50,750
Apple I have yet to see a vendor

728
00:34:47,510 --> 00:34:55,910
actually enable that you know five years

729
00:34:50,750 --> 00:34:57,920
later so my my feeling is that there are

730
00:34:55,909 --> 00:35:00,170
certain vendors who are very motivated

731
00:34:57,920 --> 00:35:01,820
to implement things like the platform

732
00:35:00,170 --> 00:35:02,990
resiliency guidelines

733
00:35:01,820 --> 00:35:06,170
and I think a lot of its going to come

734
00:35:02,990 --> 00:35:08,870
from the hyper scalars who are buying

735
00:35:06,170 --> 00:35:11,440
machines by the hundreds of thousands or

736
00:35:08,870 --> 00:35:14,089
millions and can take the time to

737
00:35:11,440 --> 00:35:17,050
customize the firmware to their

738
00:35:14,090 --> 00:35:21,800
resiliency guide needs so I think I

739
00:35:17,050 --> 00:35:26,270
think we will end up with a set of sort

740
00:35:21,800 --> 00:35:28,280
of resiliency that matches what the

741
00:35:26,270 --> 00:35:33,440
hyper scalars need and hopefully that

742
00:35:28,280 --> 00:35:36,830
will satisfy everyone else's needs but

743
00:35:33,440 --> 00:35:40,460
yeah in general and but like that slide

744
00:35:36,830 --> 00:35:59,000
showed that the firmware world is is

745
00:35:40,460 --> 00:36:00,560
very slow to to fix problems Thank You

746
00:35:59,000 --> 00:36:02,130
Trevor alright thank you all I hope you

747
00:36:00,560 --> 00:36:05,929
all have a second great second day

748
00:36:02,130 --> 00:36:05,929
[Applause]

