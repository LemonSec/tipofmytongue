1
00:00:03,470 --> 00:00:10,440
well everyone so I will be presenting to

2
00:00:07,200 --> 00:00:16,219
a new tool I developed called sniffle

3
00:00:10,440 --> 00:00:16,219
which is a sniffer for Bluetooth 5

4
00:00:16,400 --> 00:00:23,070
so I created sniffle because there are

5
00:00:20,640 --> 00:00:25,140
there already are quite a few sniffers

6
00:00:23,070 --> 00:00:27,329
for Bluetooth le out there but there was

7
00:00:25,140 --> 00:00:30,089
nothing that worked quite the way I

8
00:00:27,329 --> 00:00:33,840
wanted it well the existing low-cost

9
00:00:30,089 --> 00:00:37,050
sniffers they apart from certain feature

10
00:00:33,840 --> 00:00:38,610
limitations they also sniff only one of

11
00:00:37,050 --> 00:00:41,580
the primary advertising channels at a

12
00:00:38,610 --> 00:00:44,640
time and so inherently they're limited

13
00:00:41,580 --> 00:00:46,320
to less than 33 percent reliability and

14
00:00:44,640 --> 00:00:50,130
beyond that there's also they're also

15
00:00:46,320 --> 00:00:54,810
missing some features I wanted so what's

16
00:00:50,130 --> 00:00:57,240
sniffle is is it is Bluetooth low-energy

17
00:00:54,810 --> 00:01:00,450
packet sniffer that includes support for

18
00:00:57,240 --> 00:01:06,420
all the improvements in Bluetooth 5 that

19
00:01:00,450 --> 00:01:11,009
runs on Ti CC 26 X 2 + CC 13 X 2

20
00:01:06,420 --> 00:01:12,539
microcontrollers so out of the box the

21
00:01:11,009 --> 00:01:14,759
firmware except to run on these

22
00:01:12,539 --> 00:01:20,729
development boards here these boards

23
00:01:14,759 --> 00:01:24,090
they are about 40 US dollars and the

24
00:01:20,729 --> 00:01:29,789
firmware it runs on this old processor

25
00:01:24,090 --> 00:01:31,079
here and you could have any other device

26
00:01:29,789 --> 00:01:34,490
that has to say my controller you could

27
00:01:31,079 --> 00:01:36,809
program it can run this firmware but the

28
00:01:34,490 --> 00:01:38,219
easiest device you can get your hands on

29
00:01:36,810 --> 00:01:41,670
are one of these development boards

30
00:01:38,219 --> 00:01:43,530
which are available on t-i-is website

31
00:01:41,670 --> 00:01:49,590
and various electronics resellers as

32
00:01:43,530 --> 00:01:52,409
well so Sifl supports almost all the new

33
00:01:49,590 --> 00:01:56,310
features in Bluetooth 5 including the

34
00:01:52,409 --> 00:02:01,009
new 5 modes or long range and high speed

35
00:01:56,310 --> 00:02:06,359
and it also supports extensions to

36
00:02:01,009 --> 00:02:08,580
advertising in Bluetooth 5 sniffle can

37
00:02:06,359 --> 00:02:11,609
display packets to your terminal in real

38
00:02:08,580 --> 00:02:14,069
time and it can also record data to pcap

39
00:02:11,610 --> 00:02:15,540
files for later analysis or an or

40
00:02:14,069 --> 00:02:17,129
in March our core if you want to pass

41
00:02:15,540 --> 00:02:20,819
them to crackle or decryption or

42
00:02:17,129 --> 00:02:22,590
anything like that and the biggest

43
00:02:20,819 --> 00:02:24,629
benefit sniffle brings over existing

44
00:02:22,590 --> 00:02:27,269
low-cost sniffers is its ability to

45
00:02:24,629 --> 00:02:29,310
capture advertisements from all three

46
00:02:27,269 --> 00:02:31,650
primary advertising channels using a

47
00:02:29,310 --> 00:02:34,620
single sniffer and this makes it vastly

48
00:02:31,650 --> 00:02:38,549
more reliable than other low-cost

49
00:02:34,620 --> 00:02:40,079
sniffers in a room like this where

50
00:02:38,549 --> 00:02:41,939
there's a lot of blues devices out there

51
00:02:40,079 --> 00:02:43,290
any sniffers reliable and likely the

52
00:02:41,939 --> 00:02:47,969
great we'll see how it does in the demo

53
00:02:43,290 --> 00:02:50,578
however in a quieter environment sniffle

54
00:02:47,969 --> 00:02:56,010
gets over 90% reliability in my testing

55
00:02:50,579 --> 00:02:58,139
for connection detection so for those of

56
00:02:56,010 --> 00:03:00,989
you who don't know too much about the

57
00:02:58,139 --> 00:03:02,819
different kinds of Bluetooth there are

58
00:03:00,989 --> 00:03:04,469
two distinct protocols that are both

59
00:03:02,819 --> 00:03:07,429
called Bluetooth there's Bluetooth

60
00:03:04,469 --> 00:03:12,180
classic and there's Bluetooth low-energy

61
00:03:07,430 --> 00:03:13,739
so they're in the middle of the protocol

62
00:03:12,180 --> 00:03:17,129
stack there is what's called a host

63
00:03:13,739 --> 00:03:18,419
controller interface or HCI and that is

64
00:03:17,129 --> 00:03:20,129
interface between the Bluetooth

65
00:03:18,419 --> 00:03:22,379
controller trip and the main host

66
00:03:20,129 --> 00:03:26,129
processor and that is common between

67
00:03:22,379 --> 00:03:27,870
classic and le there's also l2 cap link

68
00:03:26,129 --> 00:03:31,379
layer control and application protocol

69
00:03:27,870 --> 00:03:33,720
this is also common between le and

70
00:03:31,379 --> 00:03:35,370
classic however apart from that all the

71
00:03:33,720 --> 00:03:38,009
profiles at the higher levels of the

72
00:03:35,370 --> 00:03:40,019
stack and the physical layer below these

73
00:03:38,009 --> 00:03:41,939
are completely different different

74
00:03:40,019 --> 00:03:45,810
modulation different channel hopping

75
00:03:41,939 --> 00:03:47,370
schemes different PDU types different

76
00:03:45,810 --> 00:03:49,379
pairing processes there there's

77
00:03:47,370 --> 00:03:53,729
essentially different protocols both

78
00:03:49,379 --> 00:03:54,780
called Bluetooth what's also in common

79
00:03:53,729 --> 00:03:57,239
between these is that they're both

80
00:03:54,780 --> 00:04:01,530
frequency hopping and they're operating

81
00:03:57,239 --> 00:04:05,939
the 2.4 gigahertz band at this point

82
00:04:01,530 --> 00:04:07,590
classic exists mainly for it was the

83
00:04:05,939 --> 00:04:09,810
original Bluetooth and it's commonly

84
00:04:07,590 --> 00:04:12,120
used for audio streaming devices like

85
00:04:09,810 --> 00:04:14,099
headphones or also for calling and in

86
00:04:12,120 --> 00:04:16,139
cars as well as things like the

87
00:04:14,099 --> 00:04:19,409
phonebook and message access profile for

88
00:04:16,139 --> 00:04:21,509
automotive applications the these

89
00:04:19,409 --> 00:04:23,460
profiles are still used because there's

90
00:04:21,509 --> 00:04:26,010
a huge my devices I support them and I

91
00:04:23,460 --> 00:04:27,810
suppose the Bluetooth SIG didn't want to

92
00:04:26,010 --> 00:04:31,190
reinvent the wheel with yet another ink

93
00:04:27,810 --> 00:04:33,240
paddleball standard however all the

94
00:04:31,190 --> 00:04:36,060
development effort in the past few years

95
00:04:33,240 --> 00:04:39,270
has been focused on the low-energy side

96
00:04:36,060 --> 00:04:43,680
of the spec and most iot devices we

97
00:04:39,270 --> 00:04:46,260
encounter nowadays use bluetooth le both

98
00:04:43,680 --> 00:04:48,660
the classic and the low-energy part are

99
00:04:46,260 --> 00:04:51,750
both part of the Bluetooth 5 standard

100
00:04:48,660 --> 00:04:54,080
however there were no significant

101
00:04:51,750 --> 00:04:56,880
changes to the classics side of the spec

102
00:04:54,080 --> 00:04:59,789
Bluetooth 5s enhancements focus mainly

103
00:04:56,880 --> 00:05:02,100
on the low-energy side and as a result

104
00:04:59,790 --> 00:05:04,320
when you often hear of Bluetooth 5

105
00:05:02,100 --> 00:05:07,260
devices they omit the word Low Energy

106
00:05:04,320 --> 00:05:13,469
because what's new and beautified is the

107
00:05:07,260 --> 00:05:15,659
low-energy side so the Bluetooth Low

108
00:05:13,470 --> 00:05:19,440
Energy spec was originally introduced in

109
00:05:15,660 --> 00:05:22,080
2010 as part of Bluetooth 4.0 and back

110
00:05:19,440 --> 00:05:24,540
then it was intended only for low

111
00:05:22,080 --> 00:05:27,570
bandwidth applications that don't have a

112
00:05:24,540 --> 00:05:30,090
lot of data to transfer it strictly

113
00:05:27,570 --> 00:05:36,750
limited the size of packets you could

114
00:05:30,090 --> 00:05:39,599
send and it had a slower fight than

115
00:05:36,750 --> 00:05:42,419
classic so classic supports in addition

116
00:05:39,600 --> 00:05:45,229
to a 1 megabit note it also supports 2

117
00:05:42,419 --> 00:05:47,940
megabit and 3 megabit per second

118
00:05:45,229 --> 00:05:50,880
enhanced data rate modes whereas

119
00:05:47,940 --> 00:05:52,919
historically Bluetooth le only supported

120
00:05:50,880 --> 00:05:54,270
one megabit mode and furthermore the

121
00:05:52,919 --> 00:05:59,400
bandwidth was hampered by the short

122
00:05:54,270 --> 00:06:00,900
packet size now Bluetooth le both in the

123
00:05:59,400 --> 00:06:03,659
original 4.0 form and even in the

124
00:06:00,900 --> 00:06:07,200
current form divides the 2.4 gigahertz

125
00:06:03,660 --> 00:06:10,110
spectrum into 40 channels of which the

126
00:06:07,200 --> 00:06:14,250
logical channel numbers 0 to 36 are for

127
00:06:10,110 --> 00:06:16,530
data transfer and channels 37 to 39 are

128
00:06:14,250 --> 00:06:19,590
for advertising so that other devices

129
00:06:16,530 --> 00:06:23,309
can be discovered now one thing to note

130
00:06:19,590 --> 00:06:26,638
is that these channel numbers don't are

131
00:06:23,310 --> 00:06:29,520
not strictly sequential channel 37 is

132
00:06:26,639 --> 00:06:31,260
actually the lowest frequency Channel 38

133
00:06:29,520 --> 00:06:34,799
is in the middle in between the data

134
00:06:31,260 --> 00:06:37,469
channels and 39 is the highest but they

135
00:06:34,800 --> 00:06:40,370
group them like this just so group

136
00:06:37,470 --> 00:06:40,370
channels are Oh

137
00:06:41,090 --> 00:06:46,729
similarly a similar applications are

138
00:06:42,620 --> 00:06:49,190
lumped together now at the higher levels

139
00:06:46,730 --> 00:06:52,190
of the protocol stack there is the

140
00:06:49,190 --> 00:06:55,480
generic attribute protocol or gap and a

141
00:06:52,190 --> 00:06:58,100
GATT to the user it bluetooth

142
00:06:55,480 --> 00:07:01,700
peripherals will have a number of what

143
00:06:58,100 --> 00:07:05,120
are called characteristics that clients

144
00:07:01,700 --> 00:07:11,120
can write to read from or subscribe to

145
00:07:05,120 --> 00:07:13,760
notifications in Bluetooth 4.0 and 4.1

146
00:07:11,120 --> 00:07:16,850
they entered they had a very weak

147
00:07:13,760 --> 00:07:19,639
pairing process that relied on symmetric

148
00:07:16,850 --> 00:07:22,280
cryptography and as a result of this

149
00:07:19,639 --> 00:07:24,830
there were a lot of research published

150
00:07:22,280 --> 00:07:26,780
on ways you could defeat the pairing

151
00:07:24,830 --> 00:07:31,669
process if you were able to sniff the

152
00:07:26,780 --> 00:07:34,340
key exchange in Bluetooth 4.2 there was

153
00:07:31,669 --> 00:07:37,430
a new pairing process introduced that

154
00:07:34,340 --> 00:07:41,900
uses elect elliptic curve diffie-hellman

155
00:07:37,430 --> 00:07:46,120
key exchange there were some issues in

156
00:07:41,900 --> 00:07:48,049
this too in the spec not requiring that

157
00:07:46,120 --> 00:07:51,940
points in the curve are properly

158
00:07:48,050 --> 00:07:57,229
verified but this has been addressed

159
00:07:51,940 --> 00:07:59,630
however the new lip the curve pairing

160
00:07:57,229 --> 00:08:02,210
process is not mandatory so there are a

161
00:07:59,630 --> 00:08:05,630
lot of devices that still make use of

162
00:08:02,210 --> 00:08:08,690
the legacy pairing process that's in

163
00:08:05,630 --> 00:08:10,639
that's weak and also many devices that

164
00:08:08,690 --> 00:08:12,530
do support the elliptic curve pairing

165
00:08:10,639 --> 00:08:17,169
allow fallback to the legacy pairing

166
00:08:12,530 --> 00:08:20,270
process so this is a common issue we see

167
00:08:17,169 --> 00:08:22,039
Bluetooth 4.2 also introduced an

168
00:08:20,270 --> 00:08:24,950
important feature called data length

169
00:08:22,039 --> 00:08:26,860
extension and this greatly increased the

170
00:08:24,950 --> 00:08:30,409
bandwidth of the protocol just by

171
00:08:26,860 --> 00:08:32,659
greatly reducing the fraction of time

172
00:08:30,410 --> 00:08:34,880
spent and overhead so it increases the

173
00:08:32,659 --> 00:08:39,549
size the max size of a data packet from

174
00:08:34,880 --> 00:08:42,289
31 bytes up to 255 bytes and that

175
00:08:39,549 --> 00:08:46,880
increase data throughput something five

176
00:08:42,289 --> 00:08:50,000
or six fold now Bluetooth 5 which is

177
00:08:46,880 --> 00:08:52,550
quite new was introduced in 2017 and

178
00:08:50,000 --> 00:08:54,980
further extended Bluetooth le to have

179
00:08:52,550 --> 00:08:56,779
performance similar to

180
00:08:54,980 --> 00:09:00,889
or sometimes better than Bluetooth

181
00:08:56,779 --> 00:09:04,130
classic so one of the improvements is

182
00:09:00,889 --> 00:09:06,620
that introduced a new fly mode that has

183
00:09:04,130 --> 00:09:09,139
faster modulation to megabits per second

184
00:09:06,620 --> 00:09:11,800
and this allows transferring a lot more

185
00:09:09,139 --> 00:09:14,959
data through it they also introduced

186
00:09:11,800 --> 00:09:18,019
five modes for long-range communication

187
00:09:14,959 --> 00:09:20,119
with forward error correction so these

188
00:09:18,019 --> 00:09:21,920
actually use the one megabit per second

189
00:09:20,120 --> 00:09:23,360
modulation but there is an excessive

190
00:09:21,920 --> 00:09:26,209
amount of data sent on them that's

191
00:09:23,360 --> 00:09:27,410
redundant so that you could recover the

192
00:09:26,209 --> 00:09:29,119
original data even if there was some

193
00:09:27,410 --> 00:09:33,110
corruption when the data was transmitted

194
00:09:29,120 --> 00:09:36,470
over a long range another change in

195
00:09:33,110 --> 00:09:38,630
Bluetooth five that's is a new channel

196
00:09:36,470 --> 00:09:41,470
hopping algorithm the old channel

197
00:09:38,630 --> 00:09:43,670
hopping algorithm just you started on

198
00:09:41,470 --> 00:09:45,230
one channel and there was just a number

199
00:09:43,670 --> 00:09:46,790
called a hop increment so the next

200
00:09:45,230 --> 00:09:49,519
Channel number is just the last channel

201
00:09:46,790 --> 00:09:51,319
number plus the hoc increment modulo the

202
00:09:49,519 --> 00:09:53,300
number of channels there was another

203
00:09:51,320 --> 00:09:56,449
scheme for when a channel was disabled

204
00:09:53,300 --> 00:09:58,729
from the map but overall was fairly

205
00:09:56,449 --> 00:10:00,649
simple the new hopping out algorithm is

206
00:09:58,730 --> 00:10:02,449
based on a pseudo-random number

207
00:10:00,649 --> 00:10:05,680
generator it's not meant as a security

208
00:10:02,449 --> 00:10:09,769
feature but what it does intend to do is

209
00:10:05,680 --> 00:10:15,589
reduce the chance of repeated collisions

210
00:10:09,769 --> 00:10:17,240
between Bluetooth devices a very large

211
00:10:15,589 --> 00:10:20,750
change in Bluetooth v r is the

212
00:10:17,240 --> 00:10:24,500
extensions to advertising so advertising

213
00:10:20,750 --> 00:10:27,889
is the process through which Bluetooth

214
00:10:24,500 --> 00:10:29,060
devices say that they are here and they

215
00:10:27,889 --> 00:10:32,329
can be connected to where they have

216
00:10:29,060 --> 00:10:35,719
information available for you to scan in

217
00:10:32,329 --> 00:10:37,790
bluetooth for advertisements were

218
00:10:35,720 --> 00:10:39,769
limited to 37 bytes and the

219
00:10:37,790 --> 00:10:42,170
advertisements had to go on the three

220
00:10:39,769 --> 00:10:44,180
primary channels now the issue for that

221
00:10:42,170 --> 00:10:47,000
was that in very crowded environments

222
00:10:44,180 --> 00:10:48,769
like the room were in right now there

223
00:10:47,000 --> 00:10:50,720
was a high chance of collisions between

224
00:10:48,769 --> 00:10:52,399
all these different devices trying to

225
00:10:50,720 --> 00:10:54,649
transmit advertisements at the same time

226
00:10:52,399 --> 00:10:56,360
so they tried to keep advertisements

227
00:10:54,649 --> 00:10:59,029
short with this length limit but even

228
00:10:56,360 --> 00:11:00,560
then collisions were an issue in crowded

229
00:10:59,029 --> 00:11:03,680
environments so what they did in

230
00:11:00,560 --> 00:11:05,899
Bluetooth 5 is they allowed very short

231
00:11:03,680 --> 00:11:08,079
advertisements to be sent on the three

232
00:11:05,899 --> 00:11:12,160
primary advertising channels that

233
00:11:08,080 --> 00:11:15,279
point to a data channel that's channels

234
00:11:12,160 --> 00:11:17,079
0 to 36 and you can transmit a much

235
00:11:15,279 --> 00:11:19,240
larger piece of data on those data

236
00:11:17,080 --> 00:11:22,990
channels without hogging the shared

237
00:11:19,240 --> 00:11:25,149
primary advertising channels there's

238
00:11:22,990 --> 00:11:26,649
also a new process for establishing a

239
00:11:25,149 --> 00:11:28,930
connection on these data channels

240
00:11:26,649 --> 00:11:32,410
instead of doing it on the primary

241
00:11:28,930 --> 00:11:35,769
channels that tend to be very crowded in

242
00:11:32,410 --> 00:11:38,079
Bluetooth 5.1 which just came out this

243
00:11:35,769 --> 00:11:40,630
year there was a couple more optional

244
00:11:38,079 --> 00:11:43,779
features that are called angle of

245
00:11:40,630 --> 00:11:46,180
arrival and angle of departure those are

246
00:11:43,779 --> 00:11:49,029
used for determining the direction in

247
00:11:46,180 --> 00:11:51,160
which data is coming from if you have an

248
00:11:49,029 --> 00:11:53,380
array of antennas receiving or an array

249
00:11:51,160 --> 00:11:54,939
of antennas transmitting by looking at

250
00:11:53,380 --> 00:11:58,300
phase differences you can perform some

251
00:11:54,940 --> 00:12:00,700
triangulation and the other noteworthy

252
00:11:58,300 --> 00:12:03,779
change in Bluetooth 5.1 is that it

253
00:12:00,700 --> 00:12:07,450
allows randomizing the order in which to

254
00:12:03,779 --> 00:12:09,279
advertise on three primary channels now

255
00:12:07,450 --> 00:12:11,829
one thing to note is that all these new

256
00:12:09,279 --> 00:12:14,260
features in Bluetooth 5 are all they're

257
00:12:11,829 --> 00:12:15,969
all optional and as a result there are a

258
00:12:14,260 --> 00:12:18,339
lot of devices you see on the market

259
00:12:15,970 --> 00:12:19,990
that claim to support Bluetooth 5 but

260
00:12:18,339 --> 00:12:21,730
the only support of small fraction of

261
00:12:19,990 --> 00:12:24,100
these or sometimes none of these new

262
00:12:21,730 --> 00:12:26,589
features as technically a valid

263
00:12:24,100 --> 00:12:28,510
Bluetooth 4 device is also valid

264
00:12:26,589 --> 00:12:29,980
Bluetooth 5 device you just have to go

265
00:12:28,510 --> 00:12:31,329
through the certification process again

266
00:12:29,980 --> 00:12:33,730
and you can just say oh I don't support

267
00:12:31,329 --> 00:12:35,890
any of these new features and as a

268
00:12:33,730 --> 00:12:38,980
result there's a lot of phones in the

269
00:12:35,890 --> 00:12:40,569
market it took me a lot of research to

270
00:12:38,980 --> 00:12:42,850
be able to find a phone that actually

271
00:12:40,570 --> 00:12:44,170
supports Bluetooth 5 as there are a lot

272
00:12:42,850 --> 00:12:45,730
of flows that claim they support

273
00:12:44,170 --> 00:12:50,709
bluetooth 5 and they may support one or

274
00:12:45,730 --> 00:12:53,829
none of these features so with the

275
00:12:50,709 --> 00:12:55,300
existing sniffers one of the biggest

276
00:12:53,829 --> 00:12:57,180
frustrations you have with these

277
00:12:55,300 --> 00:12:59,939
low-cost ones these are the only sniff 1

278
00:12:57,180 --> 00:13:03,550
advertising channel at a time and even

279
00:12:59,940 --> 00:13:05,199
in the legacy connection establishment

280
00:13:03,550 --> 00:13:06,939
procedure which is still the norm for

281
00:13:05,199 --> 00:13:09,219
almost all bloobity devices your

282
00:13:06,940 --> 00:13:10,690
encounter currently the connection will

283
00:13:09,220 --> 00:13:13,120
be established in the one of the three

284
00:13:10,690 --> 00:13:15,370
channels and if you're sniffing only one

285
00:13:13,120 --> 00:13:17,680
of these channels and there's only a 33%

286
00:13:15,370 --> 00:13:20,890
chance you'll catch it add to that there

287
00:13:17,680 --> 00:13:21,790
is imperfect fine tuning on many of

288
00:13:20,890 --> 00:13:24,880
these

289
00:13:21,790 --> 00:13:28,270
sniffers and your reliability slips well

290
00:13:24,880 --> 00:13:31,120
below 30% so it can be just quite

291
00:13:28,270 --> 00:13:32,949
frustrating to have to try three or four

292
00:13:31,120 --> 00:13:34,210
times to be able to detect a connection

293
00:13:32,950 --> 00:13:37,720
establishment and sometimes if you

294
00:13:34,210 --> 00:13:41,380
wanted to capture a rare packet that's

295
00:13:37,720 --> 00:13:45,100
hard to reproduce it's just a big

296
00:13:41,380 --> 00:13:46,960
frustration the other issue with the

297
00:13:45,100 --> 00:13:49,210
existing low-cost their first is that

298
00:13:46,960 --> 00:13:52,240
there's nothing with comprehensive

299
00:13:49,210 --> 00:13:55,260
support for Bluetooth 5 when I started

300
00:13:52,240 --> 00:13:57,340
this project last year there was nothing

301
00:13:55,260 --> 00:14:00,069
remotely affordable that support

302
00:13:57,340 --> 00:14:04,450
Bluetooth 5 since then

303
00:14:00,070 --> 00:14:07,300
Nordic has released an update to their

304
00:14:04,450 --> 00:14:10,180
NRF 52 sniffer firmware that supports

305
00:14:07,300 --> 00:14:13,900
the 2 megabit 5 mode but nothing else in

306
00:14:10,180 --> 00:14:16,209
liquid 5 another issue that with many of

307
00:14:13,900 --> 00:14:17,650
these low-cost sniffers not all of them

308
00:14:16,210 --> 00:14:19,540
but some of them are have proprietary

309
00:14:17,650 --> 00:14:21,670
firmware and software and sometimes

310
00:14:19,540 --> 00:14:23,110
their windows only sometimes they forced

311
00:14:21,670 --> 00:14:25,870
you to use an outdated version of

312
00:14:23,110 --> 00:14:27,490
Wireshark sometimes they're hard to

313
00:14:25,870 --> 00:14:31,420
extend or integrate with other things

314
00:14:27,490 --> 00:14:33,520
and the sniffers that were better and

315
00:14:31,420 --> 00:14:35,380
didn't have this limitation it's only

316
00:14:33,520 --> 00:14:37,540
significant one channel at a time are

317
00:14:35,380 --> 00:14:39,070
very expensive there are thousands of

318
00:14:37,540 --> 00:14:40,770
dollars sometimes tens of thousands of

319
00:14:39,070 --> 00:14:45,670
dollars

320
00:14:40,770 --> 00:14:47,770
so what sniffle does is that it uses the

321
00:14:45,670 --> 00:14:52,030
very flexible radio hardware in the TI

322
00:14:47,770 --> 00:14:53,949
CC 13 X 2 and 26 X 2 microcontrollers

323
00:14:52,030 --> 00:14:58,300
they're largely the same except that 13

324
00:14:53,950 --> 00:15:00,100
X 2 also supports sub 1 gigahertz the

325
00:14:58,300 --> 00:15:04,660
communication in addition to 2.4

326
00:15:00,100 --> 00:15:06,760
gigahertz it uses these radios to tune

327
00:15:04,660 --> 00:15:10,569
into the various blue the channels

328
00:15:06,760 --> 00:15:12,400
configures the modulation on them and my

329
00:15:10,570 --> 00:15:14,410
firmware red runs on the microcontroller

330
00:15:12,400 --> 00:15:17,770
with these flexible radios controls the

331
00:15:14,410 --> 00:15:20,410
radios to capture all the Bluetooth

332
00:15:17,770 --> 00:15:21,970
traffic of interest so they can capture

333
00:15:20,410 --> 00:15:24,520
advertisements and the advertising

334
00:15:21,970 --> 00:15:27,160
channels or if there's a advertising

335
00:15:24,520 --> 00:15:29,410
it'll hop from the primary advertising

336
00:15:27,160 --> 00:15:31,689
channels to these secondary the data

337
00:15:29,410 --> 00:15:35,649
channels to gather those advertisements

338
00:15:31,690 --> 00:15:37,569
and if you have it configure to follow

339
00:15:35,649 --> 00:15:39,879
connections then when it detects

340
00:15:37,569 --> 00:15:41,709
connections established and it meet

341
00:15:39,879 --> 00:15:44,680
matches all the filters like a Mack

342
00:15:41,709 --> 00:15:45,998
filter then it will hop along with the

343
00:15:44,680 --> 00:15:49,059
connection and capture all the

344
00:15:45,999 --> 00:15:51,309
communications between two devices so

345
00:15:49,059 --> 00:15:54,040
for filtering it can filter both by the

346
00:15:51,309 --> 00:15:56,410
MAC address of the target as well as the

347
00:15:54,040 --> 00:15:57,910
RSSI so often if you're in a building

348
00:15:56,410 --> 00:15:59,350
with a lot of people you'll see a huge

349
00:15:57,910 --> 00:16:01,719
number of Bluetooth devices and a low

350
00:15:59,350 --> 00:16:03,429
noise you're not interested in so if you

351
00:16:01,720 --> 00:16:04,749
just place a sniffer near the device

352
00:16:03,429 --> 00:16:08,050
you're interested in you can just set up

353
00:16:04,749 --> 00:16:09,910
the RSSI filter and only capture the

354
00:16:08,050 --> 00:16:11,349
devices that are nearby that are more

355
00:16:09,910 --> 00:16:14,170
interesting

356
00:16:11,350 --> 00:16:15,610
the sniffle does support updates to

357
00:16:14,170 --> 00:16:18,610
connection parameters during a

358
00:16:15,610 --> 00:16:21,910
connection things like a hop parameters

359
00:16:18,610 --> 00:16:23,829
the channel map and the five mode a lot

360
00:16:21,910 --> 00:16:25,449
of sniffers don't do support this or

361
00:16:23,829 --> 00:16:28,748
have incomplete implementation of this

362
00:16:25,449 --> 00:16:30,849
and this greatly limits reliability and

363
00:16:28,749 --> 00:16:33,279
usability again so the fact that it

364
00:16:30,850 --> 00:16:34,749
supports these things ensures that it

365
00:16:33,279 --> 00:16:36,389
will always follow a connection even

366
00:16:34,749 --> 00:16:38,410
when the RF environment changes and

367
00:16:36,389 --> 00:16:42,730
connection parameters are updated as a

368
00:16:38,410 --> 00:16:46,389
result the sniffle firmware communicates

369
00:16:42,730 --> 00:16:48,399
with the host over UART on these

370
00:16:46,389 --> 00:16:50,769
development boards that the TI board I

371
00:16:48,399 --> 00:16:53,439
showed earlier there is a debugger chip

372
00:16:50,769 --> 00:16:54,970
that includes a USB to UART bridge so

373
00:16:53,439 --> 00:16:57,449
when you plug into your computer it'll

374
00:16:54,970 --> 00:17:00,339
be a USB port but it's the USB UART and

375
00:16:57,449 --> 00:17:03,128
then I have host side software written

376
00:17:00,339 --> 00:17:04,720
in Python that will display the traffic

377
00:17:03,129 --> 00:17:07,929
do some decoding of it as well as

378
00:17:04,720 --> 00:17:09,100
writing it to a pcap file and I wrote it

379
00:17:07,929 --> 00:17:10,899
in the manner where if you want to

380
00:17:09,099 --> 00:17:18,158
extend it it's quite easy to do it's a

381
00:17:10,898 --> 00:17:21,309
fairly simple API for it now the killer

382
00:17:18,159 --> 00:17:24,549
feature of sniffle is its ability to hop

383
00:17:21,309 --> 00:17:29,350
long with advertising on three primary

384
00:17:24,549 --> 00:17:34,690
channels so the Bluetooth 5.0 score spec

385
00:17:29,350 --> 00:17:36,399
in this is one bit that was never really

386
00:17:34,690 --> 00:17:39,789
publicized much but the spec requires

387
00:17:36,399 --> 00:17:43,000
that when you advertise on the prior

388
00:17:39,789 --> 00:17:45,340
channels you do it in order of 37 38 and

389
00:17:43,000 --> 00:17:46,779
39 the spec says that you must start

390
00:17:45,340 --> 00:17:48,279
with the lowest channel index for our

391
00:17:46,779 --> 00:17:49,350
primary advertising and then end with

392
00:17:48,279 --> 00:17:52,740
the

393
00:17:49,350 --> 00:17:54,780
highest index and in my I did some

394
00:17:52,740 --> 00:17:56,370
research oh I had a bunch of blues

395
00:17:54,780 --> 00:17:59,850
devices around I was trying to see if

396
00:17:56,370 --> 00:18:03,780
the timing was fairly predictable the

397
00:17:59,850 --> 00:18:05,760
spec does not enforce the timing between

398
00:18:03,780 --> 00:18:07,970
when you advertise in 37 and when you

399
00:18:05,760 --> 00:18:11,280
advertise on 38 but I found that

400
00:18:07,970 --> 00:18:13,350
different devices may take may put a

401
00:18:11,280 --> 00:18:15,510
different on a gap between these however

402
00:18:13,350 --> 00:18:17,850
its consist generally consistent for a

403
00:18:15,510 --> 00:18:21,390
device now the exception to this is when

404
00:18:17,850 --> 00:18:23,309
you receive a scan request so what a

405
00:18:21,390 --> 00:18:24,750
scan request the response is that if you

406
00:18:23,309 --> 00:18:27,178
have an advertisement with a small

407
00:18:24,750 --> 00:18:29,100
amount of information and a device a

408
00:18:27,179 --> 00:18:30,809
scanner is interested in that device it

409
00:18:29,100 --> 00:18:32,939
can request additional information with

410
00:18:30,809 --> 00:18:35,520
a scan request and when there is a scan

411
00:18:32,940 --> 00:18:38,460
request the time spent on an advertising

412
00:18:35,520 --> 00:18:40,918
channel is extended however when there

413
00:18:38,460 --> 00:18:43,020
is no scanner quest then there'll be

414
00:18:40,919 --> 00:18:44,700
some fixed amount of time that devices

415
00:18:43,020 --> 00:18:47,549
in practice will spend on each of the

416
00:18:44,700 --> 00:18:49,409
primary advertising channels and when

417
00:18:47,549 --> 00:18:52,590
you detect the scan request you can

418
00:18:49,409 --> 00:18:55,380
adjust for it by just adding some time

419
00:18:52,590 --> 00:18:58,309
to the look postponing the hop to the

420
00:18:55,380 --> 00:19:02,820
net to the next channel so this is what

421
00:18:58,309 --> 00:19:04,440
sniffle does one other thing is that in

422
00:19:02,820 --> 00:19:07,889
the previous diagram what I showed is an

423
00:19:04,440 --> 00:19:09,659
advertising event so an for the legacy

424
00:19:07,890 --> 00:19:12,299
style of advertising which is will still

425
00:19:09,659 --> 00:19:14,640
with most devices you use today an

426
00:19:12,299 --> 00:19:17,280
advertising event will advertise on 37

427
00:19:14,640 --> 00:19:19,230
38 and 39 and then the device will stop

428
00:19:17,280 --> 00:19:20,809
advertising for some period of time and

429
00:19:19,230 --> 00:19:25,350
then again in short succession

430
00:19:20,809 --> 00:19:27,809
advertising 37 38 and 39 now the gap

431
00:19:25,350 --> 00:19:29,760
between these advertising events is

432
00:19:27,809 --> 00:19:32,210
intentionally a randomized by the spec

433
00:19:29,760 --> 00:19:36,330
to reduce the chance of collisions and

434
00:19:32,210 --> 00:19:39,450
as a result of that you can't predict in

435
00:19:36,330 --> 00:19:41,668
advance when the next advertising event

436
00:19:39,450 --> 00:19:47,190
is going to happen so what sniffle does

437
00:19:41,669 --> 00:19:50,010
is that it will wait in 37 once it has

438
00:19:47,190 --> 00:19:51,659
figured out the popping pattern and the

439
00:19:50,010 --> 00:19:53,070
moment it gets an advertisement or

440
00:19:51,659 --> 00:19:55,530
something then it knows and advertising

441
00:19:53,070 --> 00:20:01,090
up and started and then begins the hot

442
00:19:55,530 --> 00:20:04,980
process so by doing

443
00:20:01,090 --> 00:20:07,480
channel hopping sniffle can capture

444
00:20:04,980 --> 00:20:10,180
connection establishment with over 90%

445
00:20:07,480 --> 00:20:14,770
reliability at least in a more calm RF

446
00:20:10,180 --> 00:20:17,440
environment and having performed some

447
00:20:14,770 --> 00:20:19,210
analysis on previous hopping patterns

448
00:20:17,440 --> 00:20:22,000
once sniffle figures up the hopping

449
00:20:19,210 --> 00:20:24,160
pattern then it will just lock on and do

450
00:20:22,000 --> 00:20:30,160
the 37 3 through 9 hop every time it

451
00:20:24,160 --> 00:20:31,720
gets an advertisement on 37 and when the

452
00:20:30,160 --> 00:20:34,320
scanner Quest is received then it will

453
00:20:31,720 --> 00:20:38,410
just extend the time spent on a channel

454
00:20:34,320 --> 00:20:40,110
so this here explains the algorithm for

455
00:20:38,410 --> 00:20:43,210
the hopping though I've largely

456
00:20:40,110 --> 00:20:45,219
explained it oh well here the first step

457
00:20:43,210 --> 00:20:48,850
before you do this though is figuring

458
00:20:45,220 --> 00:20:50,500
out how you're going to be hopping so to

459
00:20:48,850 --> 00:20:52,959
do this what sniffle does is it waits on

460
00:20:50,500 --> 00:20:55,330
channel 37 when it gets an advertised on

461
00:20:52,960 --> 00:21:00,040
channel 3 7 immediately jumps 39

462
00:20:55,330 --> 00:21:02,139
skipping 838 this is mainly for

463
00:21:00,040 --> 00:21:04,090
performance reasons as often that

464
00:21:02,140 --> 00:21:05,860
advertisement 38 will come very soon

465
00:21:04,090 --> 00:21:08,740
offer 39 and there's a chance you'll

466
00:21:05,860 --> 00:21:11,530
miss that initial advertisement 38 so by

467
00:21:08,740 --> 00:21:13,510
huh it'll hop from 37 to 39 the moment

468
00:21:11,530 --> 00:21:16,000
it receives an advertisement channel 39

469
00:21:13,510 --> 00:21:18,250
and waits for a second advertising with

470
00:21:16,000 --> 00:21:20,740
the same MAC address you're interested

471
00:21:18,250 --> 00:21:22,270
in and it'll do this repeatedly and

472
00:21:20,740 --> 00:21:25,420
record the timing between an

473
00:21:22,270 --> 00:21:28,480
advertisement on 37 and 39 and once you

474
00:21:25,420 --> 00:21:32,380
have a bunch of samples some of these

475
00:21:28,480 --> 00:21:36,220
will be including scan requests and

476
00:21:32,380 --> 00:21:38,860
others will not so you'll you'll see a

477
00:21:36,220 --> 00:21:41,560
general bimodal distribution of timings

478
00:21:38,860 --> 00:21:43,179
you'll see some timings that are short

479
00:21:41,560 --> 00:21:45,159
and some timings that are long so that's

480
00:21:43,180 --> 00:21:48,010
why I don't just take the median if the

481
00:21:45,160 --> 00:21:51,280
results but I chose to take the 25th

482
00:21:48,010 --> 00:21:53,980
percentile of the timings I captured and

483
00:21:51,280 --> 00:21:56,830
then I divide that by 2 to get the time

484
00:21:53,980 --> 00:22:00,790
between two channels I captured 37 39 so

485
00:21:56,830 --> 00:22:03,040
37 to 3/8 will be half the time so once

486
00:22:00,790 --> 00:22:05,530
I have that interval then I do the

487
00:22:03,040 --> 00:22:08,320
hopping process I described earlier in

488
00:22:05,530 --> 00:22:13,870
37 when you get it on 37th and do 38 and

489
00:22:08,320 --> 00:22:15,129
39 this works great however Bluetooth

490
00:22:13,870 --> 00:22:17,770
5.1

491
00:22:15,130 --> 00:22:23,340
which just came up this year made life a

492
00:22:17,770 --> 00:22:27,430
little more difficult as it as it allows

493
00:22:23,340 --> 00:22:30,790
randomizing this fortunately in

494
00:22:27,430 --> 00:22:32,890
Bluetooth 5 the new extended advertising

495
00:22:30,790 --> 00:22:34,570
process doesn't do connect doesn't

496
00:22:32,890 --> 00:22:36,640
establish connections on the primary

497
00:22:34,570 --> 00:22:40,200
channels instead the connection is

498
00:22:36,640 --> 00:22:42,790
established on the secondary auxiliary

499
00:22:40,200 --> 00:22:45,580
advertising channel as a result if you

500
00:22:42,790 --> 00:22:47,170
captured the short advertisement on any

501
00:22:45,580 --> 00:22:49,060
of the three primary advertising

502
00:22:47,170 --> 00:22:52,660
channels you'll Jim then hop the

503
00:22:49,060 --> 00:22:54,280
secondary channel as all three primary

504
00:22:52,660 --> 00:22:57,670
advertisements will point to the same

505
00:22:54,280 --> 00:22:59,110
secondary advertisement and when you

506
00:22:57,670 --> 00:23:00,130
were listening on the secondary channel

507
00:22:59,110 --> 00:23:03,790
you will capture connection

508
00:23:00,130 --> 00:23:05,440
establishment so Bluetooth 5.1 shouldn't

509
00:23:03,790 --> 00:23:08,409
pose an issue just because the mudras

510
00:23:05,440 --> 00:23:13,450
5.1 devices are likely to use the new

511
00:23:08,410 --> 00:23:18,220
connection establishment procedure for

512
00:23:13,450 --> 00:23:20,110
the extended advertising feature you

513
00:23:18,220 --> 00:23:22,830
have a short advertisement on your

514
00:23:20,110 --> 00:23:26,679
primary channel that just specifies a

515
00:23:22,830 --> 00:23:29,050
time offset the channel that you want to

516
00:23:26,680 --> 00:23:30,490
do the extended advertisement on and the

517
00:23:29,050 --> 00:23:33,310
five mil you're going to use for it so

518
00:23:30,490 --> 00:23:35,140
it could be that you're using the 1

519
00:23:33,310 --> 00:23:37,090
megabit per second file on the primary

520
00:23:35,140 --> 00:23:39,100
advertising channel and a 2 megabit per

521
00:23:37,090 --> 00:23:43,060
second fie on the secondary channel and

522
00:23:39,100 --> 00:23:44,379
so sniffle will when it receives a short

523
00:23:43,060 --> 00:23:48,460
advertisement indicator is going to be

524
00:23:44,380 --> 00:23:50,050
an advertisement on the secondary

525
00:23:48,460 --> 00:23:52,210
advertising channel then it will

526
00:23:50,050 --> 00:23:55,270
schedule a hop to that channel on the

527
00:23:52,210 --> 00:23:57,160
correct 5 mode when the time comes

528
00:23:55,270 --> 00:23:59,680
once it hops to there then it will

529
00:23:57,160 --> 00:24:02,290
capture any advertisements there and

530
00:23:59,680 --> 00:24:04,540
connection establishment as needed one

531
00:24:02,290 --> 00:24:07,750
big advantage of this is that now you

532
00:24:04,540 --> 00:24:10,270
can advertise with long amounts of data

533
00:24:07,750 --> 00:24:11,980
up to 255 bytes in length and you can

534
00:24:10,270 --> 00:24:13,710
actually go even longer according to the

535
00:24:11,980 --> 00:24:15,280
spec you're allowed to chain multiple

536
00:24:13,710 --> 00:24:16,570
advertisements together if you had a

537
00:24:15,280 --> 00:24:19,389
really large amount of data you want to

538
00:24:16,570 --> 00:24:23,470
transfer support for this in BlueStacks

539
00:24:19,390 --> 00:24:25,870
various iOS the only supports I think

540
00:24:23,470 --> 00:24:28,780
128 bytes for extended vert iseman

541
00:24:25,870 --> 00:24:32,879
androids limited to 255 bytes

542
00:24:28,780 --> 00:24:35,830
in theory the spec allows chaining these

543
00:24:32,880 --> 00:24:39,610
now there's also another feature called

544
00:24:35,830 --> 00:24:41,290
periodic advertising which is for but

545
00:24:39,610 --> 00:24:44,590
sometimes called connectionless data

546
00:24:41,290 --> 00:24:48,879
streaming where it's multicast streaming

547
00:24:44,590 --> 00:24:52,179
of data to devices I don't have to

548
00:24:48,880 --> 00:24:54,580
establish a one-to-one connection in

549
00:24:52,180 --> 00:24:55,750
this process devices are transmitting

550
00:24:54,580 --> 00:24:58,060
advertisements on the primary

551
00:24:55,750 --> 00:25:01,630
advertising channels continuously

552
00:24:58,060 --> 00:25:03,399
hopping between them and there'll be one

553
00:25:01,630 --> 00:25:07,000
advertisement that provides information

554
00:25:03,400 --> 00:25:08,800
sync along with this hopping sequence of

555
00:25:07,000 --> 00:25:11,050
advertisements on these secondary

556
00:25:08,800 --> 00:25:12,610
channels I have not encountered any

557
00:25:11,050 --> 00:25:16,600
devices that currently use this new

558
00:25:12,610 --> 00:25:18,129
feature and a lot of devices Hardwell a

559
00:25:16,600 --> 00:25:22,179
lot of Bluetooth stacks don't even

560
00:25:18,130 --> 00:25:26,110
support this but it may become popular

561
00:25:22,180 --> 00:25:28,030
at some point in the future the main

562
00:25:26,110 --> 00:25:30,189
benefit of this new advertising is that

563
00:25:28,030 --> 00:25:31,810
it avoid it reduces a chance to

564
00:25:30,190 --> 00:25:33,880
conflicts on the primary advertising

565
00:25:31,810 --> 00:25:35,679
channels and allows transmitting much

566
00:25:33,880 --> 00:25:42,640
longer advertisements on these secondary

567
00:25:35,680 --> 00:25:44,140
channels so sniffle will schedule the

568
00:25:42,640 --> 00:25:45,790
channel hopping and capture

569
00:25:44,140 --> 00:25:48,820
advertisements on the exhilaration l's

570
00:25:45,790 --> 00:25:51,040
and it'll also follow connections

571
00:25:48,820 --> 00:25:52,990
establish on these channels i've not

572
00:25:51,040 --> 00:25:56,260
implemented support for periodic

573
00:25:52,990 --> 00:25:58,240
advertising partly because it's it it's

574
00:25:56,260 --> 00:26:00,160
poorly specified in this specification

575
00:25:58,240 --> 00:26:01,390
the specification doesn't even say how

576
00:26:00,160 --> 00:26:04,900
you're supposed to do with the channel

577
00:26:01,390 --> 00:26:07,060
hopping it leaves it up to vendors to

578
00:26:04,900 --> 00:26:08,440
implement so I assume vendors will make

579
00:26:07,060 --> 00:26:14,040
some sort of standard of their own for

580
00:26:08,440 --> 00:26:16,030
this and since hardly anything is

581
00:26:14,040 --> 00:26:18,010
implementing this right now I didn't see

582
00:26:16,030 --> 00:26:21,820
a reason to spend too much time on it

583
00:26:18,010 --> 00:26:23,560
for now so when you're dealing with a

584
00:26:21,820 --> 00:26:27,760
Bluetooth device your options are either

585
00:26:23,560 --> 00:26:28,240
to you be do HCI logging or use a

586
00:26:27,760 --> 00:26:31,770
sniffer

587
00:26:28,240 --> 00:26:34,180
now when HCI logging is possible that's

588
00:26:31,770 --> 00:26:38,080
usually prefer as it's the most reliable

589
00:26:34,180 --> 00:26:40,120
approach so it as an example if you have

590
00:26:38,080 --> 00:26:42,699
an Android phone that's talking to some

591
00:26:40,120 --> 00:26:45,340
IOT device you can configure

592
00:26:42,700 --> 00:26:47,260
HCI logging on the Android phone and

593
00:26:45,340 --> 00:26:50,379
that will can capture all the

594
00:26:47,260 --> 00:26:52,500
communications between the fluoride or

595
00:26:50,380 --> 00:26:57,130
blue droid stack on the Android phone

596
00:26:52,500 --> 00:26:58,330
and the glue to the controller that's

597
00:26:57,130 --> 00:27:01,360
actually interfacing with your device

598
00:26:58,330 --> 00:27:04,449
now one limitation of HDI logging is

599
00:27:01,360 --> 00:27:06,879
that what's going over the HDI is not

600
00:27:04,450 --> 00:27:08,530
what's going over-the-air the Bluetooth

601
00:27:06,880 --> 00:27:10,440
controller is performing a number of

602
00:27:08,530 --> 00:27:13,540
transformations including the encryption

603
00:27:10,440 --> 00:27:14,200
you also have no visibility into the

604
00:27:13,540 --> 00:27:17,800
lower-level

605
00:27:14,200 --> 00:27:21,100
linker layer things it's just black box

606
00:27:17,800 --> 00:27:23,409
to the post side of things and also if

607
00:27:21,100 --> 00:27:25,209
you're trying to troubleshoot issues in

608
00:27:23,410 --> 00:27:28,210
a Bluetooth controller or troubleshoot a

609
00:27:25,210 --> 00:27:30,490
custom Bluetooth stack or finally trying

610
00:27:28,210 --> 00:27:33,460
to find bugs in these things it's useful

611
00:27:30,490 --> 00:27:35,860
to have lower level capture the other

612
00:27:33,460 --> 00:27:38,170
situation where you can't do HDI logging

613
00:27:35,860 --> 00:27:39,699
is if you have two embedded devices

614
00:27:38,170 --> 00:27:41,170
where you don't have much control of

615
00:27:39,700 --> 00:27:43,630
either of them and they're communicating

616
00:27:41,170 --> 00:27:45,010
with each other over Bluetooth le we've

617
00:27:43,630 --> 00:27:47,890
encountered this a bunch of times in

618
00:27:45,010 --> 00:27:49,180
these situations your only option is to

619
00:27:47,890 --> 00:27:54,520
use a sniffer to see what these two

620
00:27:49,180 --> 00:27:58,150
devices are doing between each other for

621
00:27:54,520 --> 00:28:00,610
Bluetooth classic sniffers are quite

622
00:27:58,150 --> 00:28:02,890
expensive the only Bluetooth classic

623
00:28:00,610 --> 00:28:05,800
sniffer I know of that's vaguely

624
00:28:02,890 --> 00:28:07,570
affordable that's affordable is the

625
00:28:05,800 --> 00:28:09,460
Bluebird tooth however uber tooths

626
00:28:07,570 --> 00:28:12,669
Bluetooth classic support is very

627
00:28:09,460 --> 00:28:14,770
limited and Bluetooth classic a part of

628
00:28:12,670 --> 00:28:17,470
the reason it's difficult to build the

629
00:28:14,770 --> 00:28:20,430
classic sniffers is that they are very

630
00:28:17,470 --> 00:28:28,330
fast channel hopping that makes the

631
00:28:20,430 --> 00:28:31,000
synchronization a little tricky so you

632
00:28:28,330 --> 00:28:32,620
can see here in this chart why made

633
00:28:31,000 --> 00:28:34,090
sniffle so there's a whole bunch or

634
00:28:32,620 --> 00:28:36,699
existing stampers there's the over tooth

635
00:28:34,090 --> 00:28:38,919
there were a couple free sniffers made

636
00:28:36,700 --> 00:28:40,620
by Ti both their previous generation and

637
00:28:38,920 --> 00:28:43,240
their current one

638
00:28:40,620 --> 00:28:47,879
Nordic which is the other popular maker

639
00:28:43,240 --> 00:28:50,230
of bluetooth my controllers they have a

640
00:28:47,880 --> 00:28:52,750
sniffle firmware that runs in both their

641
00:28:50,230 --> 00:28:56,260
older and our 51 and their newer NR 52

642
00:28:52,750 --> 00:28:58,809
series devices and there is also

643
00:28:56,260 --> 00:29:00,908
they're researcher friend of mine Damian

644
00:28:58,809 --> 00:29:04,178
cookie who had made a tool called beetle

645
00:29:00,909 --> 00:29:06,399
Jack which has a cool feature of

646
00:29:04,179 --> 00:29:10,630
connection hijacking and in addition to

647
00:29:06,399 --> 00:29:13,268
stiffer capabilities but the issues with

648
00:29:10,630 --> 00:29:14,559
these some of them particularly older

649
00:29:13,269 --> 00:29:18,039
ones don't support daily length

650
00:29:14,559 --> 00:29:21,250
extension almost none of these support

651
00:29:18,039 --> 00:29:23,350
the new five modes in Bluetooth 5 so the

652
00:29:21,250 --> 00:29:25,269
only one other than sniffle that partly

653
00:29:23,350 --> 00:29:26,889
supports Bluetooth 5 five modes is the

654
00:29:25,269 --> 00:29:30,279
Nordic one but it doesn't support the

655
00:29:26,889 --> 00:29:32,949
long range Phi most of these don't

656
00:29:30,279 --> 00:29:34,750
support the new channel hopping none of

657
00:29:32,950 --> 00:29:36,880
these support the new Bluetooth 5

658
00:29:34,750 --> 00:29:39,220
advertising extensions and most

659
00:29:36,880 --> 00:29:40,899
importantly none of these will sniff all

660
00:29:39,220 --> 00:29:42,760
three advertising channels at once

661
00:29:40,899 --> 00:29:44,379
unless you are running multiple sniffers

662
00:29:42,760 --> 00:29:49,629
which can be a little cumbersome at

663
00:29:44,380 --> 00:29:53,110
times so with these extra abilities

664
00:29:49,630 --> 00:29:58,149
sniffled becomes a lot more usable for

665
00:29:53,110 --> 00:30:00,399
newer applications and with these

666
00:29:58,149 --> 00:30:03,279
capabilities sniffle becomes a viable

667
00:30:00,399 --> 00:30:05,518
alternative to much fancier commercial

668
00:30:03,279 --> 00:30:08,409
systems so in the past if you wanted

669
00:30:05,519 --> 00:30:10,450
reliable bluetooth LE capture you have

670
00:30:08,409 --> 00:30:13,720
to resort to systems that cost thousands

671
00:30:10,450 --> 00:30:15,039
of dollars and if you're not working in

672
00:30:13,720 --> 00:30:18,220
bluetooth all the time if you're just an

673
00:30:15,039 --> 00:30:19,809
imp and security researcher you're just

674
00:30:18,220 --> 00:30:22,299
a small-time a start-up building

675
00:30:19,809 --> 00:30:25,539
products you often can't afford tools

676
00:30:22,299 --> 00:30:28,210
like this and these high-end sniffers

677
00:30:25,539 --> 00:30:30,190
are powerful and good there are probably

678
00:30:28,210 --> 00:30:32,350
more compliant with the spec and my

679
00:30:30,190 --> 00:30:36,940
sniffer is and some of these have nice

680
00:30:32,350 --> 00:30:38,340
features like the LSS and the Teledyne

681
00:30:36,940 --> 00:30:42,179
frontline sedara

682
00:30:38,340 --> 00:30:44,350
wideband models these are actually

683
00:30:42,179 --> 00:30:47,610
software-defined radios that can capture

684
00:30:44,350 --> 00:30:50,918
the entire 2.4 gigahertz spectrum and

685
00:30:47,610 --> 00:30:52,870
that's very expensive in terms the hard

686
00:30:50,919 --> 00:30:55,389
room processing power so the costs

687
00:30:52,870 --> 00:30:57,158
aren't fully unjustified however what's

688
00:30:55,389 --> 00:30:58,689
sniffle just with some clever channel

689
00:30:57,159 --> 00:31:02,260
hopping techniques you can get

690
00:30:58,690 --> 00:31:04,470
comparable reliability or a tiny

691
00:31:02,260 --> 00:31:07,990
fraction in the cost

692
00:31:04,470 --> 00:31:10,090
so sniffle is available on github now

693
00:31:07,990 --> 00:31:11,650
it's GPL v3 license

694
00:31:10,090 --> 00:31:15,220
do whatever you want with it under the

695
00:31:11,650 --> 00:31:16,929
license on the readme for the git repo I

696
00:31:15,220 --> 00:31:19,450
have instructions for setting it up I

697
00:31:16,929 --> 00:31:21,220
also have some pre-built firmware

698
00:31:19,450 --> 00:31:22,809
binaries available for those who don't

699
00:31:21,220 --> 00:31:27,159
want to set up a tool chain it's

700
00:31:22,809 --> 00:31:29,799
compiled with GCC also if you're working

701
00:31:27,159 --> 00:31:32,500
with a Bluetooth classic ever and want

702
00:31:29,799 --> 00:31:36,429
to test some profiles that are built on

703
00:31:32,500 --> 00:31:38,169
top of object exchange so obex is the

704
00:31:36,429 --> 00:31:41,440
base for a whole number of other

705
00:31:38,169 --> 00:31:43,750
profiles like file transfer profile

706
00:31:41,440 --> 00:31:45,909
object push profile message access

707
00:31:43,750 --> 00:31:48,370
profile phone book access profile and

708
00:31:45,909 --> 00:31:50,110
some others or if you're testing

709
00:31:48,370 --> 00:31:55,809
automotive head units you can also check

710
00:31:50,110 --> 00:31:58,360
out my know Beck's tool so I will give

711
00:31:55,809 --> 00:32:00,789
you a little demo of what sniffle can do

712
00:31:58,360 --> 00:32:14,289
and hopefully it will cooperate in this

713
00:32:00,789 --> 00:32:16,240
crowded room so just as a demo what I'll

714
00:32:14,289 --> 00:32:20,470
do is I'll set up one phone as a

715
00:32:16,240 --> 00:32:24,070
Bluetooth advertiser and that can also

716
00:32:20,470 --> 00:32:26,529
be connected to and then I will have my

717
00:32:24,070 --> 00:32:29,139
other phone connect to it and you can

718
00:32:26,529 --> 00:32:33,399
see if sniffle can capture them

719
00:32:29,140 --> 00:32:36,610
communicating with each other so the

720
00:32:33,399 --> 00:32:46,479
first step is that you need to find the

721
00:32:36,610 --> 00:32:52,949
MAC address of your target so I'll see

722
00:32:46,480 --> 00:32:52,950
them on the ground there

723
00:32:56,910 --> 00:33:02,890
so for this what I'll do is I'll set up

724
00:32:59,980 --> 00:33:06,010
an RSS I filter and then I'll all set

725
00:33:02,890 --> 00:33:11,580
the are societal to a fairly high strong

726
00:33:06,010 --> 00:33:14,170
signal and then I'll place my phone that

727
00:33:11,580 --> 00:33:17,490
acting as a Bluth advertiser nearby so

728
00:33:14,170 --> 00:33:19,930
that you can see its advertisements so

729
00:33:17,490 --> 00:33:21,610
without specifying any additional

730
00:33:19,930 --> 00:33:24,520
options then it's just listening on

731
00:33:21,610 --> 00:33:28,959
channel 37 on the default one megabit

732
00:33:24,520 --> 00:33:31,810
per second file so I put this nearby

733
00:33:28,960 --> 00:33:35,440
they're capturing a bunch of things and

734
00:33:31,810 --> 00:33:39,909
I can grab the MAC address which is

735
00:33:35,440 --> 00:33:43,420
right here and now like configure the

736
00:33:39,910 --> 00:33:45,760
radio to lock onto this MAC address and

737
00:33:43,420 --> 00:33:49,510
now I don't need the RSSI filter since I

738
00:33:45,760 --> 00:33:53,470
know the MAC and now what the sniffer

739
00:33:49,510 --> 00:33:55,120
will do is that so it's capturing these

740
00:33:53,470 --> 00:33:57,430
advertisements initially it's just

741
00:33:55,120 --> 00:33:59,020
figuring out the hop pattern and once

742
00:33:57,430 --> 00:34:03,030
it's figure out the hot pattern it'll

743
00:33:59,020 --> 00:34:03,030
start hopping along with the advertiser

744
00:34:05,790 --> 00:34:13,629
and now I have my other device here I

745
00:34:09,129 --> 00:34:22,989
will scan for this and try connecting to

746
00:34:13,629 --> 00:34:25,589
it okay there it connected and it's

747
00:34:22,989 --> 00:34:28,089
capturing all the communications here I

748
00:34:25,590 --> 00:34:31,389
forgot to turn on pcap writing but I

749
00:34:28,090 --> 00:34:33,040
record another pcap file earlier and to

750
00:34:31,389 --> 00:34:35,620
demonstrate the reliability of this I

751
00:34:33,040 --> 00:34:37,779
could try this connecting connection

752
00:34:35,620 --> 00:34:41,440
ended if I try connecting again Oh

753
00:34:37,780 --> 00:34:46,060
little capture there capture the second

754
00:34:41,440 --> 00:34:52,270
connection establishment let's see if I

755
00:34:46,060 --> 00:34:54,340
can get three out of three well three

756
00:34:52,270 --> 00:34:56,110
out of three that's a lot more reliable

757
00:34:54,340 --> 00:35:05,340
than most the other sniffers out there

758
00:34:56,110 --> 00:35:05,340
even in a crowded room like this so

759
00:35:06,840 --> 00:35:13,460
I can also give you 100 little demo

760
00:35:09,810 --> 00:35:29,279
which is capturing extended advertising

761
00:35:13,460 --> 00:35:32,300
that all stop this guy rising so didn't

762
00:35:29,280 --> 00:35:32,300
mean to sleep

763
00:35:42,470 --> 00:35:48,600
so here the - L option means to use a

764
00:35:45,840 --> 00:35:51,510
long range Phi and - a means enable

765
00:35:48,600 --> 00:35:58,410
extended advertising that's why do this

766
00:35:51,510 --> 00:36:00,020
here and then I start my advertiser you

767
00:35:58,410 --> 00:36:04,049
can see its caption these advertisements

768
00:36:00,020 --> 00:36:07,170
and you can see that so this here on

769
00:36:04,050 --> 00:36:12,150
channel 37 is an extended advertisement

770
00:36:07,170 --> 00:36:14,670
that's pointing to channel 34 the two

771
00:36:12,150 --> 00:36:17,660
megabit Phi and the advertisement will

772
00:36:14,670 --> 00:36:20,970
come at an offset of 107 thousand

773
00:36:17,660 --> 00:36:23,220
microseconds and so it Tunes this other

774
00:36:20,970 --> 00:36:24,990
channel and captures the advertisements

775
00:36:23,220 --> 00:36:26,549
there and if some other device was

776
00:36:24,990 --> 00:36:28,049
trying to connect to this and it'll

777
00:36:26,550 --> 00:36:33,440
capture the connection establishment and

778
00:36:28,050 --> 00:36:35,610
hop along with it and there is no other

779
00:36:33,440 --> 00:36:44,730
sniffer that's not thousands of dollars

780
00:36:35,610 --> 00:36:48,170
that can do this right now so that's it

781
00:36:44,730 --> 00:36:48,170
you have any questions

782
00:36:48,240 --> 00:36:55,129
[Applause]

783
00:36:52,940 --> 00:36:58,310
what type of demo Bart you will

784
00:36:55,130 --> 00:37:03,530
recommend from T ie based on thirteen or

785
00:36:58,310 --> 00:37:06,080
on 26 that is 13 is better is it has all

786
00:37:03,530 --> 00:37:08,900
the capabilities at 26 series but it

787
00:37:06,080 --> 00:37:10,640
also adds support for sub 1 Meg files

788
00:37:08,900 --> 00:37:13,010
so we're sniffle it makes no difference

789
00:37:10,640 --> 00:37:14,480
however it's more useful for other

790
00:37:13,010 --> 00:37:16,820
purposes if you want to use it for other

791
00:37:14,480 --> 00:37:18,440
things too but for sniffle there is no

792
00:37:16,820 --> 00:37:20,360
different no difference between motoki

793
00:37:18,440 --> 00:37:34,010
thank you so much really interesting

794
00:37:20,360 --> 00:37:38,300
talk thanks you said that equipment is

795
00:37:34,010 --> 00:37:41,420
rather cheap yeah so have you considered

796
00:37:38,300 --> 00:37:42,800
using multiple devices to multiple

797
00:37:41,420 --> 00:37:45,620
channels at the same time and avoid so

798
00:37:42,800 --> 00:37:48,500
many problems that can be done i

799
00:37:45,620 --> 00:37:52,370
actually thought of implementing that

800
00:37:48,500 --> 00:37:55,670
with three of these than just hoarding

801
00:37:52,370 --> 00:37:58,790
them in python it's cheap and can be

802
00:37:55,670 --> 00:38:00,560
it's cheap enough and can be done power

803
00:37:58,790 --> 00:38:01,970
just for the sake of convenience have

804
00:38:00,560 --> 00:38:03,710
been one device is nice and with its

805
00:38:01,970 --> 00:38:05,060
ability to hop between these channels

806
00:38:03,710 --> 00:38:07,160
you generally don't need it with sniffle

807
00:38:05,060 --> 00:38:10,070
with just one device it can do it all

808
00:38:07,160 --> 00:38:12,560
and you could even build the smaller

809
00:38:10,070 --> 00:38:15,380
cheaper device this development board

810
00:38:12,560 --> 00:38:16,820
here is rather bulky however the actual

811
00:38:15,380 --> 00:38:18,140
chip that does it is this tiny little

812
00:38:16,820 --> 00:38:20,600
thing here so you could make a really

813
00:38:18,140 --> 00:38:32,560
tiny simple cheap board that did just

814
00:38:20,600 --> 00:38:37,360
that and though I have a

815
00:38:32,560 --> 00:38:40,240
question about active features the

816
00:38:37,360 --> 00:38:41,830
sniffing is by definition passive but

817
00:38:40,240 --> 00:38:45,459
then when you want to play with device

818
00:38:41,830 --> 00:38:48,670
you want to you would like to have some

819
00:38:45,460 --> 00:38:51,130
active possibilities to initiate

820
00:38:48,670 --> 00:38:56,080
pairings and play with all the options

821
00:38:51,130 --> 00:39:01,480
yeah and one of the tool that dama also

822
00:38:56,080 --> 00:39:03,910
proposed is a good start for that what

823
00:39:01,480 --> 00:39:05,890
do you envision with the the board and

824
00:39:03,910 --> 00:39:08,830
the capabilities of the tool that you

825
00:39:05,890 --> 00:39:10,450
are proposing so I had thought of

826
00:39:08,830 --> 00:39:12,460
implementing some active features in

827
00:39:10,450 --> 00:39:15,069
there it's it's fully doable the radio

828
00:39:12,460 --> 00:39:20,200
here it's fully bi-directional you can

829
00:39:15,070 --> 00:39:22,360
do anything with that one so there are

830
00:39:20,200 --> 00:39:23,710
two types of things you can do one is if

831
00:39:22,360 --> 00:39:25,510
there's an existing connection try and

832
00:39:23,710 --> 00:39:29,230
interfere with that and then the other

833
00:39:25,510 --> 00:39:32,230
is you just initiate in connection to

834
00:39:29,230 --> 00:39:35,380
another device now in my own usage I

835
00:39:32,230 --> 00:39:37,450
found that if I just use I can happen on

836
00:39:35,380 --> 00:39:40,420
an ordinary phone like with with a

837
00:39:37,450 --> 00:39:42,669
purpose-built Bluetooth stack most of

838
00:39:40,420 --> 00:39:44,590
this stuff is not too far outs that

839
00:39:42,670 --> 00:39:47,770
realm up the spec or you could even just

840
00:39:44,590 --> 00:39:51,850
use do you do your own custom Bluetooth

841
00:39:47,770 --> 00:39:53,710
stack but speak HCI with a normal blue

842
00:39:51,850 --> 00:39:55,330
the controller and if you're not trying

843
00:39:53,710 --> 00:39:57,430
to sniff traffic or do some other

844
00:39:55,330 --> 00:40:00,640
non-standard operations it's often

845
00:39:57,430 --> 00:40:04,950
easiest just to use a existing ordinary

846
00:40:00,640 --> 00:40:07,240
Bluetooth stack to do that it's just the

847
00:40:04,950 --> 00:40:08,919
the thing where you need specialized

848
00:40:07,240 --> 00:40:12,209
harder for and low level radio control

849
00:40:08,920 --> 00:40:14,800
is when you're not acting as a normal

850
00:40:12,210 --> 00:40:15,970
personal device as if you wanted to pair

851
00:40:14,800 --> 00:40:17,710
with something and you'll want to just

852
00:40:15,970 --> 00:40:20,140
see what characteristics it has or

853
00:40:17,710 --> 00:40:22,810
visible a GATT server or client you can

854
00:40:20,140 --> 00:40:27,670
just be an ordinary compliant device

855
00:40:22,810 --> 00:40:29,049
what because this is not playing any of

856
00:40:27,670 --> 00:40:30,700
the traditional blue to the roles this

857
00:40:29,050 --> 00:40:36,760
is why I need that local control

858
00:40:30,700 --> 00:40:38,589
so for active operations there's jamming

859
00:40:36,760 --> 00:40:42,820
things there's hijacking things is that

860
00:40:38,590 --> 00:40:46,270
I mean I showed these things have been

861
00:40:42,820 --> 00:40:49,780
done in practice I haven't actually

862
00:40:46,270 --> 00:40:51,250
I need to do that but well it active

863
00:40:49,780 --> 00:40:58,450
features can be implemented as if

864
00:40:51,250 --> 00:41:06,940
someone wanted to do we have any more

865
00:40:58,450 --> 00:41:08,960
questions yes not look thank you

866
00:41:06,940 --> 00:41:12,469
everyone

867
00:41:08,960 --> 00:41:12,469
[Applause]

