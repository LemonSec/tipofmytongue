1
00:00:03,320 --> 00:00:08,459
thank you

2
00:00:06,390 --> 00:00:13,200
before we start quick questions before

3
00:00:08,460 --> 00:00:19,259
this talk who knew what was sg4 raise

4
00:00:13,200 --> 00:00:23,668
your hand all right ten people and who

5
00:00:19,259 --> 00:00:27,390
owns an SD card or a microSD card quite

6
00:00:23,669 --> 00:00:30,359
easy good so Who am I

7
00:00:27,390 --> 00:00:32,099
as in the presentation I'm working in

8
00:00:30,359 --> 00:00:34,680
Switzerland for coders key security I'm

9
00:00:32,098 --> 00:00:38,910
in the R&D departments I'm doing

10
00:00:34,680 --> 00:00:41,760
Hardware stuff embedded devices I'm also

11
00:00:38,910 --> 00:00:43,230
part of the organization of a security

12
00:00:41,760 --> 00:00:45,510
conference in Switzerland called black

13
00:00:43,230 --> 00:00:49,680
Alps I have some stickers with me if you

14
00:00:45,510 --> 00:00:52,349
like just come and talk to me and I'm

15
00:00:49,680 --> 00:00:54,420
also developing Hydra bus

16
00:00:52,350 --> 00:00:56,910
this is a tool that I will show you I

17
00:00:54,420 --> 00:00:58,170
might try to convince you to get one but

18
00:00:56,910 --> 00:01:00,330
yeah you will see they're doing the

19
00:00:58,170 --> 00:01:05,700
torch and also I have stickers with me

20
00:01:00,330 --> 00:01:09,869
so yeah just come by so basically SD is

21
00:01:05,700 --> 00:01:13,140
for secure digital so once you know that

22
00:01:09,869 --> 00:01:14,249
the next question is so secure why is it

23
00:01:13,140 --> 00:01:17,429
secure exactly

24
00:01:14,249 --> 00:01:20,880
so we will see what are the security

25
00:01:17,429 --> 00:01:23,719
features that are in SD cards

26
00:01:20,880 --> 00:01:26,759
also some vulnerabilities that I found

27
00:01:23,719 --> 00:01:29,999
one thing to remember is I'm trying to

28
00:01:26,759 --> 00:01:32,819
keep those attacks as low costs and easy

29
00:01:29,999 --> 00:01:35,068
to replicate as possible so since most

30
00:01:32,819 --> 00:01:38,039
of you have SD cards you might be able

31
00:01:35,069 --> 00:01:39,479
to replicate those tests and try for

32
00:01:38,039 --> 00:01:44,939
yourself to find those vulnerabilities

33
00:01:39,479 --> 00:01:47,509
as well so what's an SD card

34
00:01:44,939 --> 00:01:51,178
basically it's just a microcontroller

35
00:01:47,509 --> 00:01:53,520
interfacing the SD interface to an

36
00:01:51,179 --> 00:01:55,889
embedded flash memory for more

37
00:01:53,520 --> 00:01:58,649
information there was a huge talk by

38
00:01:55,889 --> 00:02:01,499
Bonnie on jobs at the CCC where they

39
00:01:58,649 --> 00:02:03,600
went into the cards decapping them

40
00:02:01,499 --> 00:02:07,020
showing how the microcontroller works

41
00:02:03,600 --> 00:02:11,519
how the flash is working inside etc

42
00:02:07,020 --> 00:02:14,710
that's a really good talk there are

43
00:02:11,519 --> 00:02:17,560
three main ways to communicates with an

44
00:02:14,710 --> 00:02:21,250
SD card the first one is the most

45
00:02:17,560 --> 00:02:24,070
classic one is the spi bus so you can

46
00:02:21,250 --> 00:02:26,920
use the classic SPI which is mainly used

47
00:02:24,070 --> 00:02:29,620
for instance by Audrey knows oh you have

48
00:02:26,920 --> 00:02:34,510
was that what they call uhs-1 or SDI oh

49
00:02:29,620 --> 00:02:37,930
it's a quite faster bus that uses more

50
00:02:34,510 --> 00:02:41,350
data lines up to four of them and the

51
00:02:37,930 --> 00:02:44,380
more recent communication protocol is

52
00:02:41,350 --> 00:02:46,690
called UHS - which is even faster I

53
00:02:44,380 --> 00:02:49,060
don't have the numbers there and the

54
00:02:46,690 --> 00:02:53,050
card has way more contacts as you can

55
00:02:49,060 --> 00:02:57,250
see this is a UHS Chu card but most of

56
00:02:53,050 --> 00:03:00,040
the time what we will see in the card is

57
00:02:57,250 --> 00:03:05,890
just one row and this is usually usually

58
00:03:00,040 --> 00:03:07,480
just uhs-1 or SPI so if you want to know

59
00:03:05,890 --> 00:03:11,040
exactly how it works the best thing to

60
00:03:07,480 --> 00:03:14,980
do is to find documentation specs etc

61
00:03:11,040 --> 00:03:16,900
they are available on SD card org you

62
00:03:14,980 --> 00:03:20,260
can get the what they call the general

63
00:03:16,900 --> 00:03:25,120
simplified specs now this is the first

64
00:03:20,260 --> 00:03:27,700
part it's 260 ish documents with all

65
00:03:25,120 --> 00:03:30,130
information about the physical size of

66
00:03:27,700 --> 00:03:32,609
the cards all the commands should be

67
00:03:30,130 --> 00:03:38,049
sent what are the responses that you get

68
00:03:32,610 --> 00:03:39,790
etc etc for instance this is the way to

69
00:03:38,050 --> 00:03:42,040
initialize a card I won't go into the

70
00:03:39,790 --> 00:03:43,840
details but you can see that it's quite

71
00:03:42,040 --> 00:03:45,310
messy it's quite a messy protocol so you

72
00:03:43,840 --> 00:03:47,800
have different possibilities depending

73
00:03:45,310 --> 00:03:49,480
on the response of the card it might be

74
00:03:47,800 --> 00:03:52,600
a more recent one so you have to send

75
00:03:49,480 --> 00:03:56,940
other commands it's not really easy to

76
00:03:52,600 --> 00:04:01,180
understand but you need to sort it out

77
00:03:56,940 --> 00:04:04,329
what the documentation explains is that

78
00:04:01,180 --> 00:04:08,760
the protocol is basically a query and

79
00:04:04,330 --> 00:04:12,010
response protocol so you send a command

80
00:04:08,760 --> 00:04:14,230
this commands as a specific ID and a

81
00:04:12,010 --> 00:04:16,959
specific function when you send this

82
00:04:14,230 --> 00:04:20,500
command you can send some arguments with

83
00:04:16,959 --> 00:04:22,570
it then you have to send a CRC so the

84
00:04:20,500 --> 00:04:24,910
packet is valid and then the card will

85
00:04:22,570 --> 00:04:27,969
reply to you with the response of your

86
00:04:24,910 --> 00:04:30,460
main commands

87
00:04:27,970 --> 00:04:33,190
because this protocol is really not easy

88
00:04:30,460 --> 00:04:35,380
there are seven different response

89
00:04:33,190 --> 00:04:37,390
formats depending on the command so

90
00:04:35,380 --> 00:04:39,400
every time you need to implement a new

91
00:04:37,390 --> 00:04:41,409
comment to see exactly how it works you

92
00:04:39,400 --> 00:04:44,080
have to then find out which kind of

93
00:04:41,410 --> 00:04:47,830
response it is did its size the data

94
00:04:44,080 --> 00:04:50,400
that is inside etc so yes kind of

95
00:04:47,830 --> 00:04:53,140
difficult protocol to want to play with

96
00:04:50,400 --> 00:04:56,409
there's also what they call a block

97
00:04:53,140 --> 00:04:59,200
transfer feature because as I said the

98
00:04:56,410 --> 00:05:01,090
usual size is four bytes for the

99
00:04:59,200 --> 00:05:03,700
argument of a command which is not

100
00:05:01,090 --> 00:05:06,099
enough so what they do is you can send

101
00:05:03,700 --> 00:05:11,950
blocks data blocks so you start by

102
00:05:06,100 --> 00:05:16,210
sending a byte 0x f e then as much the

103
00:05:11,950 --> 00:05:19,510
data as you want then a CRC the length

104
00:05:16,210 --> 00:05:21,219
of the block is defined by a specific

105
00:05:19,510 --> 00:05:27,010
command so you can send a comment to

106
00:05:21,220 --> 00:05:32,650
shorten or make a bigger block of data

107
00:05:27,010 --> 00:05:36,700
but by default is 512 bytes so to

108
00:05:32,650 --> 00:05:39,460
interface with an SD card I try to use

109
00:05:36,700 --> 00:05:42,130
the easiest solution I used SPI because

110
00:05:39,460 --> 00:05:46,060
it's quite easy to find tools that are

111
00:05:42,130 --> 00:05:48,880
using SPI it's also easy to script with

112
00:05:46,060 --> 00:05:52,410
Python and it was supported by a drivers

113
00:05:48,880 --> 00:05:54,940
told you it was a really good tool

114
00:05:52,410 --> 00:05:57,040
what is eyedroppers exactly basically

115
00:05:54,940 --> 00:05:59,020
it's like a bus pirates but a more

116
00:05:57,040 --> 00:06:03,960
modern version supporting more protocols

117
00:05:59,020 --> 00:06:07,900
it's also fully open source good stuff

118
00:06:03,960 --> 00:06:11,680
so my main setup was basically an IDE

119
00:06:07,900 --> 00:06:16,630
robust with the SPI interface connecting

120
00:06:11,680 --> 00:06:19,590
to an SD connector so it was not the

121
00:06:16,630 --> 00:06:19,590
worst part

122
00:06:19,860 --> 00:06:26,590
then I started sending commands to the

123
00:06:23,860 --> 00:06:30,400
SD cards getting some response failed a

124
00:06:26,590 --> 00:06:33,700
lot and all in all I added more features

125
00:06:30,400 --> 00:06:34,179
more commands understood exactly how it

126
00:06:33,700 --> 00:06:38,140
works

127
00:06:34,180 --> 00:06:41,300
so I mainly created a small tool that's

128
00:06:38,140 --> 00:06:44,770
is a way to in

129
00:06:41,300 --> 00:06:48,530
correct easily more easily with SD cards

130
00:06:44,770 --> 00:06:50,479
one fun thing is that as I said all the

131
00:06:48,530 --> 00:06:54,318
queries and the response contains the

132
00:06:50,479 --> 00:06:56,840
CRC in the specs it said that this CRC

133
00:06:54,319 --> 00:07:00,169
is optional so you can just send zeros

134
00:06:56,840 --> 00:07:00,530
zero instead of the CRC and most of the

135
00:07:00,169 --> 00:07:04,490
cards

136
00:07:00,530 --> 00:07:07,969
do you accept the the the commands

137
00:07:04,490 --> 00:07:10,509
except some manufacturers that are that

138
00:07:07,970 --> 00:07:12,470
wants the CRC to be in place so

139
00:07:10,509 --> 00:07:16,210
depending on the cards you don't have

140
00:07:12,470 --> 00:07:20,539
the same results again really easy stuff

141
00:07:16,210 --> 00:07:23,690
so I can show this so basically the tool

142
00:07:20,539 --> 00:07:26,568
is CLI interface you can type in it to

143
00:07:23,690 --> 00:07:28,430
make the initial is a is initialization

144
00:07:26,569 --> 00:07:30,229
of the card you remember the big graph

145
00:07:28,430 --> 00:07:33,080
basically this comment does everything

146
00:07:30,229 --> 00:07:35,389
for you which is way easier you can't

147
00:07:33,080 --> 00:07:38,109
directly query some information from the

148
00:07:35,389 --> 00:07:40,520
SD card so here I'm querying the

149
00:07:38,110 --> 00:07:44,539
identification register which is

150
00:07:40,520 --> 00:07:47,359
basically this huge value there and then

151
00:07:44,539 --> 00:07:50,360
I'm also parsing the data within it so

152
00:07:47,360 --> 00:07:54,050
you can extract information and get more

153
00:07:50,360 --> 00:07:59,690
easier more readable results same goes

154
00:07:54,050 --> 00:08:02,630
for the card physical properties its

155
00:07:59,690 --> 00:08:04,580
size the block size every information so

156
00:08:02,630 --> 00:08:08,779
you basically you get this huge blob

157
00:08:04,580 --> 00:08:11,330
there and some bits do contain this

158
00:08:08,779 --> 00:08:14,870
specific information so the tool does

159
00:08:11,330 --> 00:08:21,440
everything for you so it's way easier to

160
00:08:14,870 --> 00:08:23,479
interact with SD cards so now that we

161
00:08:21,440 --> 00:08:27,889
are able to communicate with the cards

162
00:08:23,479 --> 00:08:30,258
next part is to do a ctrl F on the on

163
00:08:27,889 --> 00:08:36,519
the on the specs and look for security

164
00:08:30,259 --> 00:08:40,959
or something like this there is a small

165
00:08:36,519 --> 00:08:43,279
chapter within the first the first

166
00:08:40,958 --> 00:08:44,899
documents in the specs that basically

167
00:08:43,279 --> 00:08:50,089
says that all the security features

168
00:08:44,899 --> 00:08:53,329
called SD mi are for content protection

169
00:08:50,089 --> 00:08:54,110
for music or movies and stuff like this

170
00:08:53,329 --> 00:08:56,630
and

171
00:08:54,110 --> 00:09:00,500
is only available for paid customers

172
00:08:56,630 --> 00:09:01,310
after signing NDA's and in the file

173
00:09:00,500 --> 00:09:05,510
which is called

174
00:09:01,310 --> 00:09:07,250
SG specs part 3 so unfortunately it's

175
00:09:05,510 --> 00:09:10,339
not available so this talk won't be

176
00:09:07,250 --> 00:09:12,260
about those specific features but in the

177
00:09:10,339 --> 00:09:17,200
case you don't want to pay SD or

178
00:09:12,260 --> 00:09:20,899
whatever you can ask Google and it will

179
00:09:17,200 --> 00:09:25,240
in the it it has indexed the the specs

180
00:09:20,899 --> 00:09:25,240
so you you are able to get it anyway so

181
00:09:26,649 --> 00:09:32,930
looking again at the specs there are two

182
00:09:30,620 --> 00:09:35,600
main ways to protect contents from the

183
00:09:32,930 --> 00:09:37,699
cards the first one is write protect

184
00:09:35,600 --> 00:09:40,459
bits that you can set directly on the

185
00:09:37,700 --> 00:09:44,420
card and another comment which is called

186
00:09:40,459 --> 00:09:47,449
the C mg42 to set a password on the card

187
00:09:44,420 --> 00:09:50,060
basically you can put a read password on

188
00:09:47,450 --> 00:09:52,339
the garden you cannot read anything from

189
00:09:50,060 --> 00:09:55,670
the card unless you have given the

190
00:09:52,339 --> 00:09:59,690
correct password fun facts it's

191
00:09:55,670 --> 00:10:02,240
mandatory for all the cards to accept

192
00:09:59,690 --> 00:10:05,149
those comments and implement them to get

193
00:10:02,240 --> 00:10:07,699
the SD label so all the cards you can

194
00:10:05,149 --> 00:10:13,820
find usually have those comments even if

195
00:10:07,699 --> 00:10:16,519
they are not used so this same g42 is

196
00:10:13,820 --> 00:10:19,550
called also lock and lock basically it's

197
00:10:16,519 --> 00:10:22,579
a way to set a password of up to 16

198
00:10:19,550 --> 00:10:25,130
bytes it's not limited to ASCII

199
00:10:22,579 --> 00:10:30,319
characters so you the key space is quite

200
00:10:25,130 --> 00:10:34,600
huge not easy to brute-force and how it

201
00:10:30,320 --> 00:10:36,980
works is you send this mg42 commands and

202
00:10:34,600 --> 00:10:39,199
it would be too easy to set the

203
00:10:36,980 --> 00:10:42,440
parameters directly in this field so you

204
00:10:39,199 --> 00:10:46,910
have just to send this this command 42

205
00:10:42,440 --> 00:10:49,220
with no bytes as they turns you see then

206
00:10:46,910 --> 00:10:51,709
send a block containing all the

207
00:10:49,220 --> 00:10:54,490
parameters so basically your block

208
00:10:51,709 --> 00:10:57,949
should contain the start which is in the

209
00:10:54,490 --> 00:11:01,839
the protocol configuration then you have

210
00:10:57,949 --> 00:11:04,430
a whole byte containing special flags

211
00:11:01,839 --> 00:11:07,550
within these bits then the password

212
00:11:04,430 --> 00:11:10,760
length which is encoded in one bite

213
00:11:07,550 --> 00:11:12,649
then your password and the CRC if the

214
00:11:10,760 --> 00:11:16,760
cards need it otherwise you can just set

215
00:11:12,649 --> 00:11:19,250
to zero so all those options there here

216
00:11:16,760 --> 00:11:23,770
we have the set bit basically to set a

217
00:11:19,250 --> 00:11:28,220
new password the clear bits to remove to

218
00:11:23,770 --> 00:11:32,149
remove the password the lock bit is to

219
00:11:28,220 --> 00:11:34,399
actually lock or unlock the card the

220
00:11:32,149 --> 00:11:38,420
erase is basically if you forgot your

221
00:11:34,399 --> 00:11:40,970
password so you can use the erase bit to

222
00:11:38,420 --> 00:11:46,430
wipe the card and it will wipe all data

223
00:11:40,970 --> 00:11:48,740
and the password as well so I'm started

224
00:11:46,430 --> 00:11:51,349
to play with that sending commands to

225
00:11:48,740 --> 00:11:53,600
lock the card so basically you send this

226
00:11:51,350 --> 00:11:56,690
block you set the set bit actually you

227
00:11:53,600 --> 00:11:58,790
can also in one-shot said use the set

228
00:11:56,690 --> 00:12:01,910
unlock bit so once you put the password

229
00:11:58,790 --> 00:12:04,130
the card is locked right away and then

230
00:12:01,910 --> 00:12:07,370
to reads the lock status you need to

231
00:12:04,130 --> 00:12:10,220
read its status register which is

232
00:12:07,370 --> 00:12:11,959
usually the same d13 but in my tool you

233
00:12:10,220 --> 00:12:16,130
can just type their status and you get

234
00:12:11,959 --> 00:12:19,040
the card status as well once the card is

235
00:12:16,130 --> 00:12:22,220
locked to unlock it you need to first

236
00:12:19,040 --> 00:12:25,279
initialize the card then send this sim

237
00:12:22,220 --> 00:12:28,790
g42 commands then in the data block you

238
00:12:25,279 --> 00:12:31,279
need to set the lock bits to zero so it

239
00:12:28,790 --> 00:12:34,699
means unlock then the password length

240
00:12:31,279 --> 00:12:36,980
then the password then the CRC send it

241
00:12:34,700 --> 00:12:39,890
then the card will process your

242
00:12:36,980 --> 00:12:44,060
passwords then respond reply with either

243
00:12:39,890 --> 00:12:50,439
the correct status or password fail

244
00:12:44,060 --> 00:12:55,189
status so now the juicy part as I said

245
00:12:50,440 --> 00:12:58,430
the card will pull down the data line

246
00:12:55,190 --> 00:13:00,829
while it's processing while it's

247
00:12:58,430 --> 00:13:02,569
processing the password so no other

248
00:13:00,829 --> 00:13:07,550
commands can be sensed during the

249
00:13:02,570 --> 00:13:09,860
password check so what happens if I show

250
00:13:07,550 --> 00:13:12,079
you here you can see this is a logic

251
00:13:09,860 --> 00:13:15,050
analyzer output so basically you can see

252
00:13:12,079 --> 00:13:17,719
the status of the plot line of the line

253
00:13:15,050 --> 00:13:20,099
from the card to the eye droppers and

254
00:13:17,720 --> 00:13:22,380
from the eye droppers to the card

255
00:13:20,100 --> 00:13:27,120
so here you see that I'm sending this

256
00:13:22,380 --> 00:13:30,540
sim g42 command then I'm sending this

257
00:13:27,120 --> 00:13:32,910
password block here and then the cut

258
00:13:30,540 --> 00:13:36,209
starts processing it by pulling the

259
00:13:32,910 --> 00:13:38,880
lines to the two to zero and then I have

260
00:13:36,210 --> 00:13:44,190
my response but if I try to zoom in a

261
00:13:38,880 --> 00:13:46,410
bit in this spot on the right you can

262
00:13:44,190 --> 00:13:49,530
see that my password was one two three

263
00:13:46,410 --> 00:13:51,810
four five six great password so here you

264
00:13:49,530 --> 00:13:55,319
can see that if I send a password length

265
00:13:51,810 --> 00:13:59,310
a password which contains five zeros it

266
00:13:55,320 --> 00:14:02,580
takes around 53 microseconds to process

267
00:13:59,310 --> 00:14:05,520
my password if I type six characters

268
00:14:02,580 --> 00:14:08,280
which is the same as the length of my

269
00:14:05,520 --> 00:14:12,810
correct password the time to process is

270
00:14:08,280 --> 00:14:15,240
55 microseconds so what's interesting

271
00:14:12,810 --> 00:14:18,000
here is that the card the card

272
00:14:15,240 --> 00:14:20,520
controller basically first checks for

273
00:14:18,000 --> 00:14:23,070
the password length and then it

274
00:14:20,520 --> 00:14:27,300
processes the password bytes per byte

275
00:14:23,070 --> 00:14:29,850
and as soon as there's a discrepancy it

276
00:14:27,300 --> 00:14:32,849
will answer with a password is incorrect

277
00:14:29,850 --> 00:14:35,850
so basically we are able to if we are

278
00:14:32,850 --> 00:14:38,280
looking at the time used to process me

279
00:14:35,850 --> 00:14:40,440
the password we can guess the length of

280
00:14:38,280 --> 00:14:43,410
the password then we can guess every

281
00:14:40,440 --> 00:14:46,890
byte one part one by one until we get

282
00:14:43,410 --> 00:14:50,100
the full password so that's good it's

283
00:14:46,890 --> 00:14:53,939
just a bit complicated to look measure

284
00:14:50,100 --> 00:14:57,810
every time for every bytes possible so I

285
00:14:53,940 --> 00:15:02,070
try to look for a way to automate this

286
00:14:57,810 --> 00:15:05,119
part so what I did was basically that

287
00:15:02,070 --> 00:15:08,610
since I'm controlling the SPI interface

288
00:15:05,120 --> 00:15:11,370
as soon as I finish sending my block

289
00:15:08,610 --> 00:15:15,120
containing the password I try to read

290
00:15:11,370 --> 00:15:18,120
data as fast as I can so what I will

291
00:15:15,120 --> 00:15:19,860
read is basically nothing useful but I

292
00:15:18,120 --> 00:15:23,730
will read all the zeros coming from the

293
00:15:19,860 --> 00:15:25,530
card right so if I'm reading as fast as

294
00:15:23,730 --> 00:15:28,410
I can I can then count the number of

295
00:15:25,530 --> 00:15:32,130
zeros I read and this will give me the

296
00:15:28,410 --> 00:15:33,219
time it took to the card for being able

297
00:15:32,130 --> 00:15:36,100
to

298
00:15:33,220 --> 00:15:39,610
is my password so in practice weather

299
00:15:36,100 --> 00:15:43,360
how does it look like so I still have my

300
00:15:39,610 --> 00:15:46,449
card here so I will lock it with a super

301
00:15:43,360 --> 00:15:49,149
secure password if I try to read the

302
00:15:46,449 --> 00:15:52,719
status of this card it is locked so if I

303
00:15:49,149 --> 00:15:53,319
try to read let's say page 0 it's not

304
00:15:52,720 --> 00:15:55,300
possible

305
00:15:53,319 --> 00:15:58,360
the card is locked can I do anything so

306
00:15:55,300 --> 00:16:01,000
what I will do is basically use this

307
00:15:58,360 --> 00:16:03,939
function to test for the length of the

308
00:16:01,000 --> 00:16:06,430
password and what you can see here is

309
00:16:03,939 --> 00:16:09,579
that when I send a comment with the

310
00:16:06,430 --> 00:16:12,969
length of 0 to unlock the card I was

311
00:16:09,579 --> 00:16:14,649
able to read 122 zeroes before the gut

312
00:16:12,970 --> 00:16:17,529
tells me that the password is not

313
00:16:14,649 --> 00:16:20,050
correct for length of one might be a

314
00:16:17,529 --> 00:16:24,220
back there sorry for lungs of two it's

315
00:16:20,050 --> 00:16:29,139
100 100 24 24 24 and then at the length

316
00:16:24,220 --> 00:16:29,680
of 6 it's just a bit more than it was

317
00:16:29,139 --> 00:16:33,310
previously

318
00:16:29,680 --> 00:16:33,699
so by doing this a lot of different

319
00:16:33,310 --> 00:16:35,739
times

320
00:16:33,699 --> 00:16:37,809
sending let's say ok so my password now

321
00:16:35,740 --> 00:16:41,769
and down that I know it's 6 I will try

322
00:16:37,809 --> 00:16:44,589
to send 6 times 0 get the response

323
00:16:41,769 --> 00:16:47,170
thence first byte is 1 then all the

324
00:16:44,589 --> 00:16:50,680
others 0 and for every combination I

325
00:16:47,170 --> 00:16:54,279
will get that and gets the the maximum

326
00:16:50,680 --> 00:16:56,559
length so the correct value so we'll

327
00:16:54,279 --> 00:16:57,430
know the correct password to give you a

328
00:16:56,559 --> 00:17:00,569
demo

329
00:16:57,430 --> 00:17:03,638
I can now run this brute-force tool and

330
00:17:00,569 --> 00:17:07,178
what it will do is get the length and

331
00:17:03,639 --> 00:17:09,309
then it will show me the password for

332
00:17:07,179 --> 00:17:12,130
every bites that I was able to get and

333
00:17:09,309 --> 00:17:16,000
this final password is then the one I

334
00:17:12,130 --> 00:17:20,579
set 1 2 3 4 5 6 and if I try to read the

335
00:17:16,000 --> 00:17:20,579
card I am able to get the data

336
00:17:21,910 --> 00:17:29,470
[Applause]

337
00:17:26,069 --> 00:17:34,000
so I was lucky enough to make it work

338
00:17:29,470 --> 00:17:36,250
with the cauda hat so what I did was buy

339
00:17:34,000 --> 00:17:38,649
lots of different cuts to get cuts from

340
00:17:36,250 --> 00:17:41,140
different manufacturers different sizes

341
00:17:38,649 --> 00:17:44,469
if there was a difference between an SD

342
00:17:41,140 --> 00:17:47,710
card or micro SD cards so but a lot of

343
00:17:44,470 --> 00:17:50,260
them around 20 and I also asked friends

344
00:17:47,710 --> 00:17:52,960
telling them don't worry your cut will

345
00:17:50,260 --> 00:17:55,539
be fine guess what happens the only card

346
00:17:52,960 --> 00:17:59,250
that I was able to lock but not unlucky

347
00:17:55,539 --> 00:18:03,010
anymore was a friend of Mines so too bad

348
00:17:59,250 --> 00:18:05,919
so all the cards I got them first I had

349
00:18:03,010 --> 00:18:11,110
to make them work correctly because as I

350
00:18:05,919 --> 00:18:12,730
said the protocol is not that's specific

351
00:18:11,110 --> 00:18:15,279
on some things as I said there are cards

352
00:18:12,730 --> 00:18:18,039
that were required the CRC some others

353
00:18:15,279 --> 00:18:20,890
don't so I had to find some workarounds

354
00:18:18,039 --> 00:18:23,500
and so forth on cards but once I have

355
00:18:20,890 --> 00:18:25,210
everything working as I locked them all

356
00:18:23,500 --> 00:18:28,360
with one two three four five six as a

357
00:18:25,210 --> 00:18:32,320
password then tried my my timing attack

358
00:18:28,360 --> 00:18:36,219
on it to see the results it was working

359
00:18:32,320 --> 00:18:39,580
quite well and I had also some special

360
00:18:36,220 --> 00:18:43,090
special cases that I found that's a cut

361
00:18:39,580 --> 00:18:46,178
basically don't follow exactly the specs

362
00:18:43,090 --> 00:18:49,020
but you have some things for instance an

363
00:18:46,179 --> 00:18:51,730
SD card from Sony that I bought

364
00:18:49,020 --> 00:18:53,918
basically does not answer anymore after

365
00:18:51,730 --> 00:18:56,500
three failed attempts that's a good

366
00:18:53,919 --> 00:18:57,940
thing so you should remove the card put

367
00:18:56,500 --> 00:19:00,940
it back again and then you have three

368
00:18:57,940 --> 00:19:03,760
more attempts the thing is that you can

369
00:19:00,940 --> 00:19:05,860
just send the reset command which is CMG

370
00:19:03,760 --> 00:19:09,789
zero and then you get three more tries

371
00:19:05,860 --> 00:19:11,408
so you you can just it just takes a bit

372
00:19:09,789 --> 00:19:14,289
more time because you have to send this

373
00:19:11,409 --> 00:19:19,270
reset command every three tries but it

374
00:19:14,289 --> 00:19:22,960
works exactly the same again

375
00:19:19,270 --> 00:19:27,100
on a sunny micro SD card I was not able

376
00:19:22,960 --> 00:19:29,230
to read any zero bits it was really

377
00:19:27,100 --> 00:19:30,668
checking the password really fast so I

378
00:19:29,230 --> 00:19:32,950
was thinking well maybe there's no

379
00:19:30,669 --> 00:19:35,169
cleaner ability there then I started

380
00:19:32,950 --> 00:19:36,190
thinking okay so I have my SPI interface

381
00:19:35,169 --> 00:19:38,950
which

382
00:19:36,190 --> 00:19:42,460
basically pulse the lines at 42

383
00:19:38,950 --> 00:19:45,570
megahertz I also added a logic analyzer

384
00:19:42,460 --> 00:19:49,300
so I can go as much as a hundred million

385
00:19:45,570 --> 00:19:52,240
samples per second and as T didn't have

386
00:19:49,300 --> 00:19:57,100
any results so here I cheated a bit I

387
00:19:52,240 --> 00:19:59,740
went to my colleagues lab and brought

388
00:19:57,100 --> 00:20:03,719
the oscilloscope which is a 40 gig as

389
00:19:59,740 --> 00:20:07,060
samples per second which is a lot and

390
00:20:03,720 --> 00:20:09,490
what I'm able to see now is this is

391
00:20:07,060 --> 00:20:13,240
basically the processing time for the SD

392
00:20:09,490 --> 00:20:18,120
card and then you can see that if the

393
00:20:13,240 --> 00:20:21,490
password is five characters six five six

394
00:20:18,120 --> 00:20:23,770
so there's really as really slight

395
00:20:21,490 --> 00:20:26,080
difference but you can still see them

396
00:20:23,770 --> 00:20:30,280
but unfortunately you have to get a huge

397
00:20:26,080 --> 00:20:33,100
oscilloscope to see that another special

398
00:20:30,280 --> 00:20:36,910
case that I found is a Kingston SD cards

399
00:20:33,100 --> 00:20:38,649
where I was able to to find using the

400
00:20:36,910 --> 00:20:41,260
timing attack the password length but

401
00:20:38,650 --> 00:20:44,050
then I couldn't use the timing attack

402
00:20:41,260 --> 00:20:47,020
who gets the password so I did a lot of

403
00:20:44,050 --> 00:20:49,030
different stuff and I found this so

404
00:20:47,020 --> 00:20:50,980
again I took the huge rasilla scope just

405
00:20:49,030 --> 00:20:54,310
to be sure that there was nothing so

406
00:20:50,980 --> 00:20:57,220
when I set five characters password this

407
00:20:54,310 --> 00:20:59,950
is it with six I can clearly see the

408
00:20:57,220 --> 00:21:03,280
timing change so that's great but then

409
00:20:59,950 --> 00:21:06,460
if I set the first correct byte you see

410
00:21:03,280 --> 00:21:10,800
no difference with two correct bytes

411
00:21:06,460 --> 00:21:14,700
no difference three still nothing for

412
00:21:10,800 --> 00:21:18,010
you start to see an increase why is that

413
00:21:14,700 --> 00:21:19,930
to me it's because the card checks the

414
00:21:18,010 --> 00:21:21,970
password for bytes by four bytes so it

415
00:21:19,930 --> 00:21:25,420
might be a 32-bit microcontroller with

416
00:21:21,970 --> 00:21:27,700
in it and it's checking the 32 bits at a

417
00:21:25,420 --> 00:21:30,130
time so it's just a bit longer but it's

418
00:21:27,700 --> 00:21:32,470
still possible to do the timing attacks

419
00:21:30,130 --> 00:21:37,630
but instead of every byte you have to

420
00:21:32,470 --> 00:21:40,480
brute-force on 32 bits so this is my

421
00:21:37,630 --> 00:21:44,170
results that I had so basically all the

422
00:21:40,480 --> 00:21:46,900
cards there are vulnerable accepts the

423
00:21:44,170 --> 00:21:48,840
one from SanDisk one important thing to

424
00:21:46,900 --> 00:21:52,980
note is that the

425
00:21:48,840 --> 00:21:56,610
card vendor is not related to the card

426
00:21:52,980 --> 00:21:59,250
manufacturer basically the audience that

427
00:21:56,610 --> 00:22:01,918
produce the SD cards and then they sell

428
00:21:59,250 --> 00:22:04,020
them to I don't know Sony Kingston

429
00:22:01,919 --> 00:22:06,390
SanDisk for instance and they're

430
00:22:04,020 --> 00:22:09,150
rebranded to their own their own name so

431
00:22:06,390 --> 00:22:10,169
what's important there is not this

432
00:22:09,150 --> 00:22:13,190
column name

433
00:22:10,169 --> 00:22:15,870
it's the manufacturing that is important

434
00:22:13,190 --> 00:22:19,020
so as I said I found all the cards from

435
00:22:15,870 --> 00:22:20,969
ten thousand Sony this one I don't know

436
00:22:19,020 --> 00:22:25,289
who it is because it's not written

437
00:22:20,970 --> 00:22:29,220
there's no list of the vendors on the SD

438
00:22:25,289 --> 00:22:32,700
SD website and the only card I found

439
00:22:29,220 --> 00:22:36,390
that was not vulnerable is the Sun disc

440
00:22:32,700 --> 00:22:38,820
one a funny thing is that at the Samsung

441
00:22:36,390 --> 00:22:40,470
card I have when I send this this 7042

442
00:22:38,820 --> 00:22:42,000
commands basically the cloud response to

443
00:22:40,470 --> 00:22:43,770
me that this is an invalid command it

444
00:22:42,000 --> 00:22:47,690
does not exist so I don't know how they

445
00:22:43,770 --> 00:22:47,690
gets the rest a logo but whatever so

446
00:22:48,260 --> 00:22:54,600
once I found this one I it was already

447
00:22:51,840 --> 00:22:58,289
cool but I was wanted to go a bit

448
00:22:54,600 --> 00:22:59,490
further so I took the second security

449
00:22:58,289 --> 00:23:03,750
feature which is the rights lock

450
00:22:59,490 --> 00:23:06,000
mechanism and in in my terraria was okay

451
00:23:03,750 --> 00:23:08,640
so maybe if I set the right protection

452
00:23:06,000 --> 00:23:11,010
on the SD card and then I asked the card

453
00:23:08,640 --> 00:23:13,260
to remove the password maybe it will

454
00:23:11,010 --> 00:23:17,820
remove the password but not overwrite

455
00:23:13,260 --> 00:23:19,919
the flash right this is an idea so let's

456
00:23:17,820 --> 00:23:22,080
try to see how it works so I write some

457
00:23:19,919 --> 00:23:24,539
data on the card set the write

458
00:23:22,080 --> 00:23:27,570
protection set the password then I power

459
00:23:24,539 --> 00:23:29,580
cycle the card try to clear the password

460
00:23:27,570 --> 00:23:33,360
so it should remove the password and all

461
00:23:29,580 --> 00:23:35,490
data included in the SD card and if I'm

462
00:23:33,360 --> 00:23:36,959
able to read something back that means

463
00:23:35,490 --> 00:23:40,970
that this feature has not been

464
00:23:36,960 --> 00:23:44,909
implemented correctly right fortunately

465
00:23:40,970 --> 00:23:45,330
all the cars I tested did the did a good

466
00:23:44,909 --> 00:23:47,340
job

467
00:23:45,330 --> 00:23:49,439
they basically followed what is written

468
00:23:47,340 --> 00:23:51,389
in the specs which is written there

469
00:23:49,440 --> 00:23:53,100
similarly the card shall keep temporary

470
00:23:51,390 --> 00:23:55,260
and group write protection during the

471
00:23:53,100 --> 00:23:58,110
erase execution and key write protection

472
00:23:55,260 --> 00:24:00,480
after the erase of all data is completed

473
00:23:58,110 --> 00:24:02,659
so they are doing a great job that's

474
00:24:00,480 --> 00:24:05,630
cool

475
00:24:02,660 --> 00:24:08,840
this one different thing that I also

476
00:24:05,630 --> 00:24:11,780
wanted to check is basically when you

477
00:24:08,840 --> 00:24:15,050
send this clear password c'mon what is

478
00:24:11,780 --> 00:24:17,030
the car doing first first erasing the

479
00:24:15,050 --> 00:24:19,190
data or first removing the password

480
00:24:17,030 --> 00:24:21,680
because if it's removing the password

481
00:24:19,190 --> 00:24:24,290
first that means that if i remove the

482
00:24:21,680 --> 00:24:26,540
card at the right moment i'm able to get

483
00:24:24,290 --> 00:24:29,480
a card with no password protection

484
00:24:26,540 --> 00:24:32,149
anymore but still the data inside sounds

485
00:24:29,480 --> 00:24:34,220
a good idea but how do i do it i mean

486
00:24:32,150 --> 00:24:37,430
it's not that easy to let's say press

487
00:24:34,220 --> 00:24:39,920
enter then pull out the card that's

488
00:24:37,430 --> 00:24:43,580
another way to do it basically how the

489
00:24:39,920 --> 00:24:47,180
card works it's using flash memory so to

490
00:24:43,580 --> 00:24:51,530
write data on flash memory it requires a

491
00:24:47,180 --> 00:24:53,810
lot of of power right so this power has

492
00:24:51,530 --> 00:24:55,850
to come from somewhere so within the

493
00:24:53,810 --> 00:24:58,460
flash memory there's a mechanism called

494
00:24:55,850 --> 00:25:01,129
charge pump where basically it pulls a

495
00:24:58,460 --> 00:25:04,150
lot of energy then send it once to the

496
00:25:01,130 --> 00:25:08,240
card to set all the bits to a 0 to a 1

497
00:25:04,150 --> 00:25:11,090
so in theory I should be able to detect

498
00:25:08,240 --> 00:25:13,180
an increase in the power consumption of

499
00:25:11,090 --> 00:25:16,550
the cup just before it's being written

500
00:25:13,180 --> 00:25:21,110
so if I can detect this I might be able

501
00:25:16,550 --> 00:25:23,389
to shut down the card so how do I detect

502
00:25:21,110 --> 00:25:25,729
an increase of consumption I have to

503
00:25:23,390 --> 00:25:30,410
measure the current going through the SD

504
00:25:25,730 --> 00:25:35,120
card so you take your electronics 101

505
00:25:30,410 --> 00:25:37,010
Ohm's law tension current resistance so

506
00:25:35,120 --> 00:25:41,659
basically if you had a really small

507
00:25:37,010 --> 00:25:44,750
resistance on the travel between the SD

508
00:25:41,660 --> 00:25:48,740
card and the ground you can see that if

509
00:25:44,750 --> 00:25:51,200
the current is raising the tension

510
00:25:48,740 --> 00:25:54,290
around the resistor will also increase

511
00:25:51,200 --> 00:25:57,550
so we all should be able to actually see

512
00:25:54,290 --> 00:25:59,930
that the card is consuming more power

513
00:25:57,550 --> 00:26:03,620
for you at home if you don't have small

514
00:25:59,930 --> 00:26:06,680
resistors if you vape you are able to

515
00:26:03,620 --> 00:26:09,709
build a really small resistor with with

516
00:26:06,680 --> 00:26:15,620
your with your with your web material it

517
00:26:09,710 --> 00:26:16,220
works so I set up my card again I put

518
00:26:15,620 --> 00:26:19,699
this

519
00:26:16,220 --> 00:26:22,909
resistor just after the card and then I

520
00:26:19,700 --> 00:26:26,210
used a small oscilloscope to see if I

521
00:26:22,909 --> 00:26:29,179
can see some data so here on the yellow

522
00:26:26,210 --> 00:26:32,809
line what you see is basically the

523
00:26:29,179 --> 00:26:35,960
tension to the near the resistance so

524
00:26:32,809 --> 00:26:39,649
this value is a proportional to the

525
00:26:35,960 --> 00:26:41,720
power consumption of the card so when I

526
00:26:39,650 --> 00:26:44,450
initialize the card you can see there's

527
00:26:41,720 --> 00:26:47,179
a small spike there then it's doing some

528
00:26:44,450 --> 00:26:52,900
fancy stuff here so we're able to see

529
00:26:47,179 --> 00:26:55,460
something that's a good part by the way

530
00:26:52,900 --> 00:26:59,270
checking the password also consumes some

531
00:26:55,460 --> 00:27:01,100
power so using this I'm able to as well

532
00:26:59,270 --> 00:27:03,860
see the power consumption of the card

533
00:27:01,100 --> 00:27:06,620
during the test so if I have five

534
00:27:03,860 --> 00:27:09,620
characters six characters you can see an

535
00:27:06,620 --> 00:27:13,100
increase what around here you can see an

536
00:27:09,620 --> 00:27:15,709
increase there and then if I try to set

537
00:27:13,100 --> 00:27:18,889
the good passwords it's also bit more so

538
00:27:15,710 --> 00:27:20,809
this is another way to actually get the

539
00:27:18,890 --> 00:27:23,179
password using the timing attack but by

540
00:27:20,809 --> 00:27:27,408
looking at the cards conception and not

541
00:27:23,179 --> 00:27:30,200
on the protocol so this is good I'm able

542
00:27:27,409 --> 00:27:33,620
to get some data it's fine

543
00:27:30,200 --> 00:27:36,100
but then my question is how do I take

544
00:27:33,620 --> 00:27:42,139
this value and use it as a trigger to

545
00:27:36,100 --> 00:27:45,830
remove the card right so jigged I try to

546
00:27:42,140 --> 00:27:48,740
look for all the tools I had and looks

547
00:27:45,830 --> 00:27:52,428
like that's the stm32 ADC which is the

548
00:27:48,740 --> 00:27:54,110
analog to digital converter in the stm32

549
00:27:52,429 --> 00:27:55,730
there's a way there is a feature called

550
00:27:54,110 --> 00:27:58,939
the watchdog where basically you can set

551
00:27:55,730 --> 00:28:01,400
on a lower and upper boundary and if the

552
00:27:58,940 --> 00:28:03,890
read the value read from the ADC goes

553
00:28:01,400 --> 00:28:07,030
above or below those thresholds it will

554
00:28:03,890 --> 00:28:10,429
trigger some feature whatever so

555
00:28:07,030 --> 00:28:11,990
fortunately the stm32 is the main

556
00:28:10,429 --> 00:28:13,000
component of the eye droppers told you

557
00:28:11,990 --> 00:28:15,770
it was a good tool

558
00:28:13,000 --> 00:28:18,559
so what I did I added this feature the

559
00:28:15,770 --> 00:28:23,090
ADC trigger so I'm able to set

560
00:28:18,559 --> 00:28:26,330
thresholds I'm about amaura and I'm able

561
00:28:23,090 --> 00:28:28,610
to change the delay the minimal delay is

562
00:28:26,330 --> 00:28:29,220
one microsecond for the microcontroller

563
00:28:28,610 --> 00:28:33,629
to

564
00:28:29,220 --> 00:28:35,640
work so once I have this trigger that's

565
00:28:33,630 --> 00:28:38,370
the first thing but then what do I do

566
00:28:35,640 --> 00:28:42,030
with this trigger I mean I cannot use it

567
00:28:38,370 --> 00:28:45,209
to let's say use a motor or whatever to

568
00:28:42,030 --> 00:28:48,450
pull the cart out right so what you can

569
00:28:45,210 --> 00:28:49,110
use is use what's what is called a

570
00:28:48,450 --> 00:28:52,500
MOSFET

571
00:28:49,110 --> 00:28:54,750
a MOSFET is basically a transistor but

572
00:28:52,500 --> 00:28:57,650
is driving using tension as a not

573
00:28:54,750 --> 00:29:00,929
current so basically when you apply

574
00:28:57,650 --> 00:29:03,600
tension it will let the current flow

575
00:29:00,929 --> 00:29:06,900
through the MOSFETs and if you don't put

576
00:29:03,600 --> 00:29:09,980
current it will block basically so it's

577
00:29:06,900 --> 00:29:13,110
a switch that you can drive with a GPIO

578
00:29:09,980 --> 00:29:15,179
it's also if you are in tight budgets if

579
00:29:13,110 --> 00:29:17,520
you have all motherboards old motor

580
00:29:15,179 --> 00:29:20,220
boats at home you have a lot of mass of

581
00:29:17,520 --> 00:29:22,650
sorry of MOSFETs on it so you can

582
00:29:20,220 --> 00:29:27,990
install them and use them for instance

583
00:29:22,650 --> 00:29:29,960
for this kind of project so if you mix

584
00:29:27,990 --> 00:29:35,480
everything together what you have is

585
00:29:29,960 --> 00:29:40,559
your sdcard there you have whoops sorry

586
00:29:35,480 --> 00:29:43,049
no all the way around there so you have

587
00:29:40,559 --> 00:29:45,750
the SPI interface here you have the

588
00:29:43,049 --> 00:29:49,320
tension coming here this is the ground

589
00:29:45,750 --> 00:29:52,110
so it goes there through the MOSFET the

590
00:29:49,320 --> 00:29:54,809
MOSFET is triggered by my trigger that I

591
00:29:52,110 --> 00:29:57,840
created then after the MOSFET I have my

592
00:29:54,809 --> 00:30:00,000
probe for the power consumption then my

593
00:29:57,840 --> 00:30:02,399
small resistor there then finally the

594
00:30:00,000 --> 00:30:04,799
ground so the secret is basically you

595
00:30:02,400 --> 00:30:06,750
have to go 3.3 volts coming here the

596
00:30:04,799 --> 00:30:09,360
card is processing the information then

597
00:30:06,750 --> 00:30:15,750
the current will flow there if the GPIO

598
00:30:09,360 --> 00:30:17,699
is to 0 the the the MOSFET will block

599
00:30:15,750 --> 00:30:22,380
the current so the card will be off and

600
00:30:17,700 --> 00:30:24,600
if the the GPIO here is to a logical one

601
00:30:22,380 --> 00:30:29,760
the current will flow so the curve will

602
00:30:24,600 --> 00:30:32,399
work in practice it looks like this it's

603
00:30:29,760 --> 00:30:35,010
a bit messy but you can see the the

604
00:30:32,400 --> 00:30:37,590
resistor is around here you have the

605
00:30:35,010 --> 00:30:40,309
MOSFETs which is here this is the

606
00:30:37,590 --> 00:30:43,230
eyedroppers I use for as an ADC trigger

607
00:30:40,309 --> 00:30:45,720
this is the SD card interface

608
00:30:43,230 --> 00:30:51,450
this is the idea bus is as an SPI

609
00:30:45,720 --> 00:30:54,900
interface this is a small power power

610
00:30:51,450 --> 00:30:58,260
supply and this is nice this is the

611
00:30:54,900 --> 00:31:01,559
oscilloscope so my setup is finished I

612
00:30:58,260 --> 00:31:03,450
should be able to start and see if my

613
00:31:01,559 --> 00:31:06,090
assumption my initial assumption was

614
00:31:03,450 --> 00:31:09,480
correct so what I will do now is write

615
00:31:06,090 --> 00:31:12,330
some data on the under SD card set to

616
00:31:09,480 --> 00:31:17,820
password just power cycle the card once

617
00:31:12,330 --> 00:31:20,100
just to have it perfectly stock then

618
00:31:17,820 --> 00:31:22,350
send the clear password command but with

619
00:31:20,100 --> 00:31:24,780
the trigger enabled so as soon as

620
00:31:22,350 --> 00:31:27,780
they'll set flash right it will cut the

621
00:31:24,780 --> 00:31:29,700
card then reboot the card and see if

622
00:31:27,780 --> 00:31:33,928
there is still data and if the password

623
00:31:29,700 --> 00:31:36,480
has been removed so in practice how does

624
00:31:33,929 --> 00:31:38,190
it look like here it's on a card you can

625
00:31:36,480 --> 00:31:40,940
see that if I send this clear command

626
00:31:38,190 --> 00:31:43,799
you can see that that the conception is

627
00:31:40,940 --> 00:31:47,100
increasing then there's a spike here and

628
00:31:43,799 --> 00:31:51,030
then there is the flashy raising process

629
00:31:47,100 --> 00:31:55,949
and then the card is cleanup in blue

630
00:31:51,030 --> 00:31:59,760
this is the trigger line so once I set

631
00:31:55,950 --> 00:32:01,980
up and enable the trigger what you see

632
00:31:59,760 --> 00:32:04,620
is basically exactly the same at the

633
00:32:01,980 --> 00:32:07,830
beginning and once there's a spike in

634
00:32:04,620 --> 00:32:12,540
conception the trigger will fire then

635
00:32:07,830 --> 00:32:15,299
the MOSFETs will cut the will block the

636
00:32:12,540 --> 00:32:17,668
currents so the car would be shut off so

637
00:32:15,299 --> 00:32:20,668
you can see that as soon as the trigger

638
00:32:17,669 --> 00:32:25,020
is going the conception is nearly equal

639
00:32:20,669 --> 00:32:26,880
to zero on another card this is another

640
00:32:25,020 --> 00:32:32,250
example so visually you can see that

641
00:32:26,880 --> 00:32:34,380
looks like it's working so I mean

642
00:32:32,250 --> 00:32:37,919
question is that was it vulnerable the

643
00:32:34,380 --> 00:32:40,169
answer is yes and the bad thing is that

644
00:32:37,919 --> 00:32:42,210
in the specs it's written that's the

645
00:32:40,169 --> 00:32:44,490
card shall keep it's locked States

646
00:32:42,210 --> 00:32:46,770
during the Aries execution and change it

647
00:32:44,490 --> 00:32:50,010
to the unlock state after the erase of

648
00:32:46,770 --> 00:32:54,600
all user data it's unfortunately not

649
00:32:50,010 --> 00:32:56,820
true so to me it's a fail and to show

650
00:32:54,600 --> 00:33:00,870
you how it works I have a

651
00:32:56,820 --> 00:33:05,629
demo video that I can show you and we'll

652
00:33:00,870 --> 00:33:10,469
try to comment its life if it's possible

653
00:33:05,630 --> 00:33:13,170
so on the right here we have the idea

654
00:33:10,470 --> 00:33:16,260
bus that is doing the triggering stuff

655
00:33:13,170 --> 00:33:19,110
yeah it's it's a bit small sorry but the

656
00:33:16,260 --> 00:33:21,870
fun part is this one in the middle you

657
00:33:19,110 --> 00:33:25,830
have the my SD tool that will basically

658
00:33:21,870 --> 00:33:27,780
send the peer comment to the card and on

659
00:33:25,830 --> 00:33:30,929
the right you have the output of the

660
00:33:27,780 --> 00:33:33,060
oscilloscope so here I'm starting the

661
00:33:30,930 --> 00:33:36,440
card I just sent the init command so you

662
00:33:33,060 --> 00:33:40,129
can see an increase of consumption here

663
00:33:36,440 --> 00:33:44,460
now I will set up the trigger

664
00:33:40,130 --> 00:33:47,430
so everything looks good now I type the

665
00:33:44,460 --> 00:33:49,500
remove command which basically sends the

666
00:33:47,430 --> 00:33:52,500
remove passwords comment to the card and

667
00:33:49,500 --> 00:33:56,130
what you see is that there is the this

668
00:33:52,500 --> 00:33:59,270
this increased consumption then the

669
00:33:56,130 --> 00:34:03,240
spike and right at this moment it will

670
00:33:59,270 --> 00:34:08,070
pull the GPIO off to stop the card from

671
00:34:03,240 --> 00:34:11,190
working so now on the writes what I will

672
00:34:08,070 --> 00:34:13,110
do is just enable the MOSFET again and

673
00:34:11,190 --> 00:34:15,780
if I try to initialize the initialize

674
00:34:13,110 --> 00:34:17,159
the card sorry my program crashed

675
00:34:15,780 --> 00:34:21,210
because the card was not responding

676
00:34:17,159 --> 00:34:23,429
anymore this can happen so you will see

677
00:34:21,210 --> 00:34:25,949
on the left that I will physically

678
00:34:23,429 --> 00:34:30,240
remove and reinsert the card so you will

679
00:34:25,949 --> 00:34:34,199
see something happening I run my tool

680
00:34:30,239 --> 00:34:37,560
again initialize the card check the

681
00:34:34,199 --> 00:34:39,719
status card is unlocked good point and

682
00:34:37,560 --> 00:34:42,449
if I try to read some data for instance

683
00:34:39,719 --> 00:34:44,719
from the first page the data is still

684
00:34:42,449 --> 00:34:44,719
here

685
00:34:48,659 --> 00:34:55,530
[Applause]

686
00:34:52,099 --> 00:34:56,720
so I tested this on all the SD cards I

687
00:34:55,530 --> 00:34:58,740
had

688
00:34:56,719 --> 00:35:02,520
unfortunately that I had one card that

689
00:34:58,740 --> 00:35:04,020
died during the bleaching process so I

690
00:35:02,520 --> 00:35:06,660
don't know if it was vulnerable or not

691
00:35:04,020 --> 00:35:09,839
otherwise nearly all the previous cards

692
00:35:06,660 --> 00:35:13,410
were still vulnerable except this one

693
00:35:09,839 --> 00:35:15,990
and the SanDisk were not renewable as

694
00:35:13,410 --> 00:35:18,720
well so scientists we're still doing a

695
00:35:15,990 --> 00:35:21,569
good job as respecting what what is

696
00:35:18,720 --> 00:35:29,129
written in the specs all the others a

697
00:35:21,569 --> 00:35:31,020
bit less so in conclusions it might be a

698
00:35:29,130 --> 00:35:33,480
useless vulnerability because this

699
00:35:31,020 --> 00:35:35,790
feature is not used by any operating

700
00:35:33,480 --> 00:35:39,300
system so if you have a locked card and

701
00:35:35,790 --> 00:35:41,640
you put it in a Windows OSX Android or

702
00:35:39,300 --> 00:35:44,700
whatever it won't see the card that's it

703
00:35:41,640 --> 00:35:46,440
so unfortunately it's not that used but

704
00:35:44,700 --> 00:35:49,169
it's it's present for nearly all the

705
00:35:46,440 --> 00:35:53,460
cards it effects a lot of manufacturers

706
00:35:49,170 --> 00:35:57,030
so in spite comment we find the

707
00:35:53,460 --> 00:35:59,280
venerable card reading aspects is really

708
00:35:57,030 --> 00:36:01,470
fun you have to use some time have Sula

709
00:35:59,280 --> 00:36:05,430
to read those things and yeah good stuff

710
00:36:01,470 --> 00:36:07,680
inside it also even if it's written in

711
00:36:05,430 --> 00:36:10,020
the specs that might not be true as we

712
00:36:07,680 --> 00:36:12,328
saw that the specs say that you have to

713
00:36:10,020 --> 00:36:14,910
remove the content of the card before

714
00:36:12,329 --> 00:36:16,440
the password it's not the case so even

715
00:36:14,910 --> 00:36:19,250
if it's written you have to test it just

716
00:36:16,440 --> 00:36:22,890
to make sure that it works correctly

717
00:36:19,250 --> 00:36:25,799
also as you can see using side channel

718
00:36:22,890 --> 00:36:29,460
analysis is not that difficult you just

719
00:36:25,799 --> 00:36:31,650
have to take a bit time try to fill it a

720
00:36:29,460 --> 00:36:34,980
fiddle by yourself find some components

721
00:36:31,650 --> 00:36:36,030
and you should be able to basically redo

722
00:36:34,980 --> 00:36:38,520
exactly what I did

723
00:36:36,030 --> 00:36:41,460
the tools are evolving their price is

724
00:36:38,520 --> 00:36:44,759
getting lower so it's even easier to

725
00:36:41,460 --> 00:36:49,079
date you have tools doing side channel

726
00:36:44,760 --> 00:36:51,690
analysis also automation is really

727
00:36:49,079 --> 00:36:53,359
important because when you have to test

728
00:36:51,690 --> 00:36:55,859
a lot of cards you have to run a lot of

729
00:36:53,359 --> 00:36:58,500
commands you have to check for timings

730
00:36:55,859 --> 00:37:00,808
etc it can takes really long time so if

731
00:36:58,500 --> 00:37:01,860
you can automate as much as you can it's

732
00:37:00,809 --> 00:37:04,320
something that you can just

733
00:37:01,860 --> 00:37:06,630
run then do something else then come

734
00:37:04,320 --> 00:37:08,820
back from the the next day or some hours

735
00:37:06,630 --> 00:37:09,060
later get the results and you're good to

736
00:37:08,820 --> 00:37:13,620
go

737
00:37:09,060 --> 00:37:18,720
I might have modified a bit this xkcd

738
00:37:13,620 --> 00:37:22,109
but basically it's the same idea on a

739
00:37:18,720 --> 00:37:25,980
future watch there's a new feature in

740
00:37:22,110 --> 00:37:29,790
the specs version 5 which is which went

741
00:37:25,980 --> 00:37:31,890
out in 2016 and this which is called cup

742
00:37:29,790 --> 00:37:33,870
for contents owner protection basically

743
00:37:31,890 --> 00:37:38,100
it's the password to protect the

744
00:37:33,870 --> 00:37:40,620
password remove the password remover why

745
00:37:38,100 --> 00:37:43,230
not I didn't find a card that supports

746
00:37:40,620 --> 00:37:45,420
this cop feature so unfortunately I was

747
00:37:43,230 --> 00:37:47,490
not able to test it and see if it was

748
00:37:45,420 --> 00:37:51,120
also venerable to let's say timing

749
00:37:47,490 --> 00:38:08,069
attack or whatever and that's pretty

750
00:37:51,120 --> 00:38:09,779
much it thank you very much all right

751
00:38:08,070 --> 00:38:12,480
thanks for presentational I really

752
00:38:09,780 --> 00:38:15,090
enjoyed it and I her question like for

753
00:38:12,480 --> 00:38:18,030
the example for the Samsung card yeah

754
00:38:15,090 --> 00:38:20,160
doesn't support Cindy 42 maybe have you

755
00:38:18,030 --> 00:38:23,940
tried to mess with the controller itself

756
00:38:20,160 --> 00:38:25,890
to send like undocumented or unexpected

757
00:38:23,940 --> 00:38:28,140
comments because if it's doesn't support

758
00:38:25,890 --> 00:38:31,170
what is in the specs maybe to have some

759
00:38:28,140 --> 00:38:35,339
like proprietary comments or other stuff

760
00:38:31,170 --> 00:38:36,990
them they are proprietary commands if

761
00:38:35,340 --> 00:38:39,210
you if you look at the CCC talks I

762
00:38:36,990 --> 00:38:40,799
mentioned earlier they show a lot of

763
00:38:39,210 --> 00:38:43,890
things they can do with much facture

764
00:38:40,800 --> 00:38:46,290
commands thing is on the samsung card

765
00:38:43,890 --> 00:38:48,330
it's basically the this is a standard

766
00:38:46,290 --> 00:38:50,960
response from the protocol and the bit

767
00:38:48,330 --> 00:38:53,880
saying that's it's a unimplemented

768
00:38:50,960 --> 00:38:56,760
command is set so basically the car is

769
00:38:53,880 --> 00:38:58,650
just responding as as expected but

770
00:38:56,760 --> 00:39:09,680
that's this comment is not available

771
00:38:58,650 --> 00:39:12,840
okay thanks hi thanks a lot for the talk

772
00:39:09,680 --> 00:39:15,330
there are a couple of micro SD cards

773
00:39:12,840 --> 00:39:17,460
that are they have a secure element on

774
00:39:15,330 --> 00:39:21,569
them and are like really high security

775
00:39:17,460 --> 00:39:27,160
SD card if you had a look at them no no

776
00:39:21,570 --> 00:39:30,140
I just took that I found the in shops

777
00:39:27,160 --> 00:39:33,210
[Music]

778
00:39:30,140 --> 00:39:36,089
you had to Sony cards one that was

779
00:39:33,210 --> 00:39:38,130
vulnerable one that was not yeah is

780
00:39:36,090 --> 00:39:40,710
there any chance that the one of them

781
00:39:38,130 --> 00:39:43,740
was a counterfeit card no certainly

782
00:39:40,710 --> 00:39:47,940
bunny found an enormous number of SD

783
00:39:43,740 --> 00:39:50,759
cards that were branded and deal with

784
00:39:47,940 --> 00:39:53,510
with mainstream manufacturers but were

785
00:39:50,760 --> 00:39:57,720
actually just goes chips or other

786
00:39:53,510 --> 00:40:00,270
counterfeits mm-hmm I did not understand

787
00:39:57,720 --> 00:40:01,950
the question yeah so you had two sony

788
00:40:00,270 --> 00:40:04,350
cards in your table one that was

789
00:40:01,950 --> 00:40:06,810
vulnerable one that was not mm hmm did

790
00:40:04,350 --> 00:40:09,089
you open them up or decap them to see if

791
00:40:06,810 --> 00:40:11,730
the if I one of them was a legit Sony

792
00:40:09,090 --> 00:40:15,930
card or if they were legit not at all no

793
00:40:11,730 --> 00:40:18,150
no the the purpose was basically to to

794
00:40:15,930 --> 00:40:20,730
do stuff that's everybody at home can do

795
00:40:18,150 --> 00:40:25,070
so I did not go the next mile maybe

796
00:40:20,730 --> 00:40:25,070
maybe in a future research but not yet

797
00:40:28,510 --> 00:40:32,190
[Music]

798
00:40:30,170 --> 00:40:37,380
hello

799
00:40:32,190 --> 00:40:41,130
what about disclosure I didn't do have

800
00:40:37,380 --> 00:40:43,080
disclosure to be honest because in any

801
00:40:41,130 --> 00:40:45,480
case I won't see how they would patch

802
00:40:43,080 --> 00:40:47,250
that because I've never seen a firmware

803
00:40:45,480 --> 00:40:49,620
update for an SD card so no

804
00:40:47,250 --> 00:40:56,100
unfortunately I did not do any

805
00:40:49,620 --> 00:40:58,230
disclosure thank you for the

806
00:40:56,100 --> 00:41:01,170
presentation I just want to ask you

807
00:40:58,230 --> 00:41:03,540
regarding the time for the brute-force

808
00:41:01,170 --> 00:41:06,210
attack and say that you just try six

809
00:41:03,540 --> 00:41:07,830
characters have you tried the whole 16

810
00:41:06,210 --> 00:41:10,170
characters and you see the time

811
00:41:07,830 --> 00:41:10,560
difference yeah it's it's just a bit

812
00:41:10,170 --> 00:41:13,040
longer

813
00:41:10,560 --> 00:41:17,160
of course but the seconds minutes

814
00:41:13,040 --> 00:41:20,220
minutes out of minutes thank you

815
00:41:17,160 --> 00:41:33,118
[Music]

816
00:41:20,220 --> 00:41:37,919
I have a question about the brute-force

817
00:41:33,119 --> 00:41:40,440
attack on the password you switch

818
00:41:37,920 --> 00:41:44,180
technique and you use you use an

819
00:41:40,440 --> 00:41:47,190
oscilloscope when you don't have the

820
00:41:44,180 --> 00:41:51,299
resolution to do your timing attack

821
00:41:47,190 --> 00:41:53,640
using the SPI would it be different

822
00:41:51,300 --> 00:41:58,380
through the other interface which might

823
00:41:53,640 --> 00:42:02,129
be faster it could well then the card

824
00:41:58,380 --> 00:42:05,609
might not support higher SPI clock rates

825
00:42:02,130 --> 00:42:07,470
so this might also be variable but in

826
00:42:05,609 --> 00:42:09,390
theory yes if you have a faster SPI

827
00:42:07,470 --> 00:42:12,240
interface you would be able to get more

828
00:42:09,390 --> 00:42:14,310
precise result so the other ones I I

829
00:42:12,240 --> 00:42:19,890
don't remember the name but you said you

830
00:42:14,310 --> 00:42:22,470
can even speak SPI and also oh yeah SDIO

831
00:42:19,890 --> 00:42:25,859
yes basically it says would it be fast

832
00:42:22,470 --> 00:42:28,529
enough each it should but in that case

833
00:42:25,859 --> 00:42:30,420
you won't be able depending on the on

834
00:42:28,530 --> 00:42:32,940
the SDIO controller you have you might

835
00:42:30,420 --> 00:42:36,780
not be able to make it with dummy data

836
00:42:32,940 --> 00:42:38,730
like this and so my it's really easy to

837
00:42:36,780 --> 00:42:41,339
do using SPI bits because it's a row

838
00:42:38,730 --> 00:42:44,069
protocol if you have a SD i/o controller

839
00:42:41,339 --> 00:42:46,410
you might just be able to ask him to

840
00:42:44,069 --> 00:43:03,509
send this specific command and get your

841
00:42:46,410 --> 00:43:07,200
data back so maybe not so I think the

842
00:43:03,510 --> 00:43:10,069
old SD card you checked are older than

843
00:43:07,200 --> 00:43:13,470
maybe six years or seven years that's

844
00:43:10,069 --> 00:43:16,650
basically I bought them it was in I

845
00:43:13,470 --> 00:43:20,459
would say February or March the the date

846
00:43:16,650 --> 00:43:24,359
that is written here it's the the

847
00:43:20,460 --> 00:43:26,910
prediction that it's a hot seller it's a

848
00:43:24,359 --> 00:43:29,520
value that is stored within the card so

849
00:43:26,910 --> 00:43:31,440
I don't know if it's in a mask ROM for

850
00:43:29,520 --> 00:43:33,500
instance so it's always the same even it

851
00:43:31,440 --> 00:43:39,250
is if it has been produced

852
00:43:33,500 --> 00:43:44,090
lasts last year so didn't see any newer

853
00:43:39,250 --> 00:43:47,060
SD cards is showing a showed in this the

854
00:43:44,090 --> 00:43:52,010
production did not even I think this

855
00:43:47,060 --> 00:43:55,790
this one is 128 gig it's the most recent

856
00:43:52,010 --> 00:43:59,950
I think I bought and even even there the

857
00:43:55,790 --> 00:44:03,320
the date is still 2012 so it's I I

858
00:43:59,950 --> 00:44:07,819
wouldn't read say I wouldn't be

859
00:44:03,320 --> 00:44:11,030
surprised if this data is just the the

860
00:44:07,820 --> 00:44:13,400
initial production start dates and the

861
00:44:11,030 --> 00:44:30,320
it's never changing even if the card is

862
00:44:13,400 --> 00:44:31,880
produced two years later thankless thank

863
00:44:30,320 --> 00:44:36,179
you thanks again

864
00:44:31,880 --> 00:44:36,179
[Applause]

