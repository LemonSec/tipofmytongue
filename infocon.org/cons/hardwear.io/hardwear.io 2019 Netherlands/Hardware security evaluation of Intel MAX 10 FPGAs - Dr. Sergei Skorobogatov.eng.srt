1
00:00:02,179 --> 00:00:08,910
that there are three phases of learning

2
00:00:05,009 --> 00:00:11,670
electronics so first you learn how to in

3
00:00:08,910 --> 00:00:14,280
theory design your circuit then you

4
00:00:11,670 --> 00:00:17,009
really have to design your circuit and

5
00:00:14,280 --> 00:00:19,560
the final phases when you power up your

6
00:00:17,009 --> 00:00:22,050
circuit it goes in blue smoke and

7
00:00:19,560 --> 00:00:24,570
they're the same my belief is true for

8
00:00:22,050 --> 00:00:28,070
hardware security first you learn how to

9
00:00:24,570 --> 00:00:30,929
design your secure system then you

10
00:00:28,070 --> 00:00:36,450
really try to design it and finally you

11
00:00:30,929 --> 00:00:38,550
realize it's not secure so in my talk I

12
00:00:36,450 --> 00:00:41,850
will present evaluation of hardware

13
00:00:38,550 --> 00:00:43,500
security and Intel max10 fpga s and then

14
00:00:41,850 --> 00:00:45,870
I will discuss challenges in

15
00:00:43,500 --> 00:00:48,300
implementation of some attack methods

16
00:00:45,870 --> 00:00:51,209
and summarize certain threats that come

17
00:00:48,300 --> 00:00:53,430
out of implementation of those attacks

18
00:00:51,210 --> 00:00:58,170
and one will talk about future and

19
00:00:53,430 --> 00:01:00,210
concluded so the hardware security is

20
00:00:58,170 --> 00:01:02,640
important because it protects the data

21
00:01:00,210 --> 00:01:06,899
in intellectual property it prevents

22
00:01:02,640 --> 00:01:08,670
various attacks on services it teaches

23
00:01:06,899 --> 00:01:11,130
you how to implement countermeasures

24
00:01:08,670 --> 00:01:14,490
against on-loan attacks and it dedicates

25
00:01:11,130 --> 00:01:16,530
hardware engineers so the convoy

26
00:01:14,490 --> 00:01:18,630
security is about finding flaws and

27
00:01:16,530 --> 00:01:21,869
fixing them and for that you have to

28
00:01:18,630 --> 00:01:25,318
evaluate existing systems and improve

29
00:01:21,869 --> 00:01:28,590
them and there are lots of challenges

30
00:01:25,319 --> 00:01:31,530
for hardware security you always have to

31
00:01:28,590 --> 00:01:33,329
face new attack technologies you have to

32
00:01:31,530 --> 00:01:35,369
work with modern fabrication processes

33
00:01:33,329 --> 00:01:38,369
which are now down to seven nanometers

34
00:01:35,369 --> 00:01:41,130
and you have to develop countermeasures

35
00:01:38,369 --> 00:01:43,319
through understanding of flaws and you

36
00:01:41,130 --> 00:01:47,520
also ideally would like to predict new

37
00:01:43,319 --> 00:01:49,920
attack methods so why security of marks

38
00:01:47,520 --> 00:01:52,229
10 FPGA is important because this FPGA

39
00:01:49,920 --> 00:01:54,689
was designed for security applications

40
00:01:52,229 --> 00:01:56,759
it doesn't have external flash memory

41
00:01:54,689 --> 00:01:59,579
this configuration bitstream everything

42
00:01:56,759 --> 00:02:03,600
is on the die they also offer a s

43
00:01:59,579 --> 00:02:06,389
encryption of the mid stream and there

44
00:02:03,600 --> 00:02:10,949
are three security fuses to protect

45
00:02:06,389 --> 00:02:13,709
information from read back to encrypt to

46
00:02:10,949 --> 00:02:14,799
only allow to run the encrypted bit

47
00:02:13,709 --> 00:02:17,080
stream and

48
00:02:14,800 --> 00:02:20,020
is also a fuse that can disable the JTAG

49
00:02:17,080 --> 00:02:22,690
and it's obviously positioned as a

50
00:02:20,020 --> 00:02:25,120
secure device and also you can't find

51
00:02:22,690 --> 00:02:28,390
any documentation on data commands and

52
00:02:25,120 --> 00:02:30,460
security features it's suitable

53
00:02:28,390 --> 00:02:32,470
candidate to mitigate modification

54
00:02:30,460 --> 00:02:38,650
attacks if you remember a year ago there

55
00:02:32,470 --> 00:02:41,050
was a big noise about some backdoors not

56
00:02:38,650 --> 00:02:44,050
back doses some Trojans found on the

57
00:02:41,050 --> 00:02:45,910
Super Micro sever motherboards which

58
00:02:44,050 --> 00:02:48,850
were compromised by change in the

59
00:02:45,910 --> 00:02:51,150
contents of spi flash and that kind of

60
00:02:48,850 --> 00:02:54,820
device can prevent that these attacks

61
00:02:51,150 --> 00:02:57,010
there are certain a process in the marks

62
00:02:54,820 --> 00:02:59,769
10 because it has small size and low

63
00:02:57,010 --> 00:03:03,820
cost and it has two configuration images

64
00:02:59,770 --> 00:03:06,280
on the internal flash so we can run safe

65
00:03:03,820 --> 00:03:09,190
update and you can easily easily recover

66
00:03:06,280 --> 00:03:11,740
in case of any errors but some downsides

67
00:03:09,190 --> 00:03:14,260
is still as ROM FPGA so it's prone to

68
00:03:11,740 --> 00:03:16,330
soft errors and the keys are stored in

69
00:03:14,260 --> 00:03:18,280
flash memory and for many years it was

70
00:03:16,330 --> 00:03:28,570
proof that flash memory is not the best

71
00:03:18,280 --> 00:03:31,239
way to store the keys so with design

72
00:03:28,570 --> 00:03:33,760
process first you compile your design

73
00:03:31,239 --> 00:03:37,239
into soft file and that file can all

74
00:03:33,760 --> 00:03:38,829
only be loaded into s ROM of the FPGA in

75
00:03:37,239 --> 00:03:42,970
order to program the flesh you have to

76
00:03:38,830 --> 00:03:45,880
convert this file into both file and and

77
00:03:42,970 --> 00:03:48,010
then you can add some security to the

78
00:03:45,880 --> 00:03:51,880
profile so you can encrypt the contents

79
00:03:48,010 --> 00:03:54,370
of the file and add any S key to the

80
00:03:51,880 --> 00:03:59,709
configuration and you can also set some

81
00:03:54,370 --> 00:04:03,610
security fuses so without any security

82
00:03:59,709 --> 00:04:06,640
activated in this particular device you

83
00:04:03,610 --> 00:04:09,220
have some system memory that is always

84
00:04:06,640 --> 00:04:12,040
read protected and it can only be write

85
00:04:09,220 --> 00:04:15,519
written once after the erase operation

86
00:04:12,040 --> 00:04:18,339
and there's a user flash memory that

87
00:04:15,519 --> 00:04:21,010
stores some user data it this out

88
00:04:18,339 --> 00:04:24,310
protection can be written in written

89
00:04:21,010 --> 00:04:26,320
there's a configuration memory diff also

90
00:04:24,310 --> 00:04:27,980
full access and there is some shadow

91
00:04:26,320 --> 00:04:29,870
memory at the end which is

92
00:04:27,980 --> 00:04:33,530
factory programmed you can read it but

93
00:04:29,870 --> 00:04:35,270
you can never write into it there are

94
00:04:33,530 --> 00:04:38,719
three security fuses as I mentioned

95
00:04:35,270 --> 00:04:42,349
verify protects fuse makes the device

96
00:04:38,720 --> 00:04:46,010
read protected from JTAG but still you

97
00:04:42,350 --> 00:04:49,160
can still program saw file and that

98
00:04:46,010 --> 00:04:52,430
means you can program Trojan design into

99
00:04:49,160 --> 00:04:55,460
SRAM and then run it and read out the

100
00:04:52,430 --> 00:04:57,920
memory if you activate encrypted of only

101
00:04:55,460 --> 00:05:01,700
fuse it blocks the direct access to s

102
00:04:57,920 --> 00:05:04,700
ROM so you can no longer upload soft

103
00:05:01,700 --> 00:05:07,159
file into the FPGA but it has no effect

104
00:05:04,700 --> 00:05:09,140
on J attack so it can access device with

105
00:05:07,160 --> 00:05:12,530
the data can read out all the data and

106
00:05:09,140 --> 00:05:14,930
the third fuse is jtac security it

107
00:05:12,530 --> 00:05:18,020
blocks any access through the JTAG so

108
00:05:14,930 --> 00:05:21,530
it's highly high security level

109
00:05:18,020 --> 00:05:23,780
available on this device so this obvious

110
00:05:21,530 --> 00:05:25,969
security flaw the manufacturer doesn't

111
00:05:23,780 --> 00:05:28,400
tell you that you have active to have

112
00:05:25,970 --> 00:05:31,130
activate both verify protect and

113
00:05:28,400 --> 00:05:36,349
encrypted both fuses to actually protect

114
00:05:31,130 --> 00:05:39,890
your design from being read out and that

115
00:05:36,350 --> 00:05:46,640
could cause some problems in the

116
00:05:39,890 --> 00:05:48,950
security and other security features

117
00:05:46,640 --> 00:05:51,710
that this be stream configuration is

118
00:05:48,950 --> 00:05:54,050
protected against modification so in

119
00:05:51,710 --> 00:05:56,299
soft file there's a 16 byte number

120
00:05:54,050 --> 00:06:00,860
unique for each design and there's also

121
00:05:56,300 --> 00:06:03,430
CRC at the end and obviously the way

122
00:06:00,860 --> 00:06:06,230
they calculate those numbers proprietary

123
00:06:03,430 --> 00:06:09,830
so any modification to the configuration

124
00:06:06,230 --> 00:06:13,820
will cause device not to boot and also

125
00:06:09,830 --> 00:06:16,550
the profile that can be easily modified

126
00:06:13,820 --> 00:06:18,980
because it's just a flash in egde but if

127
00:06:16,550 --> 00:06:23,630
you try to boot modified image then you

128
00:06:18,980 --> 00:06:25,790
won't succeed if you try to set the

129
00:06:23,630 --> 00:06:28,370
fuses then you will immediately see the

130
00:06:25,790 --> 00:06:33,080
result in the profile so if you set

131
00:06:28,370 --> 00:06:35,030
verify protect fuse it says certain area

132
00:06:33,080 --> 00:06:38,599
in the memory in this case the address

133
00:06:35,030 --> 00:06:42,020
over 30 and there's also a few bits in

134
00:06:38,600 --> 00:06:44,720
the configuration memory if you increase

135
00:06:42,020 --> 00:06:47,270
the bitstream then they put the AES key

136
00:06:44,720 --> 00:06:50,350
into the system memory and also they

137
00:06:47,270 --> 00:06:53,030
scramble the key but they scramble it by

138
00:06:50,350 --> 00:06:56,120
changing the positions of nibbles so you

139
00:06:53,030 --> 00:06:58,460
see that zero goes into that place one

140
00:06:56,120 --> 00:07:00,770
goes into this place and so on so it can

141
00:06:58,460 --> 00:07:02,840
easily unscramble it and also it sets

142
00:07:00,770 --> 00:07:05,270
the same sequence of bytes at the

143
00:07:02,840 --> 00:07:08,929
different address for encrypted both

144
00:07:05,270 --> 00:07:11,330
views this sequence of bytes goes into

145
00:07:08,930 --> 00:07:15,230
another address and also a few bits set

146
00:07:11,330 --> 00:07:18,020
in the try memory and the similar things

147
00:07:15,230 --> 00:07:21,710
happens with secure JTAG views so from

148
00:07:18,020 --> 00:07:23,990
that you can assume that when the device

149
00:07:21,710 --> 00:07:26,599
boots it reads out the contents of the

150
00:07:23,990 --> 00:07:28,940
memory finds this magic sequence and

151
00:07:26,600 --> 00:07:33,440
then makes a decision what fuse is

152
00:07:28,940 --> 00:07:37,430
activated you can also compile a step

153
00:07:33,440 --> 00:07:40,160
old file from profile and that is high

154
00:07:37,430 --> 00:07:43,700
level programming usually used by an end

155
00:07:40,160 --> 00:07:45,590
user for jtech access and they do they

156
00:07:43,700 --> 00:07:47,539
also obfuscate the step of file so

157
00:07:45,590 --> 00:07:51,500
instead of using some meaningful

158
00:07:47,540 --> 00:07:54,290
variable names they use just numbers but

159
00:07:51,500 --> 00:07:56,870
still you can find all the instruction

160
00:07:54,290 --> 00:08:01,730
and data come on register commands and

161
00:07:56,870 --> 00:08:04,670
you can use print comma to print out the

162
00:08:01,730 --> 00:08:09,620
contents of the registers and very

163
00:08:04,670 --> 00:08:14,570
variables as they executed soft if they

164
00:08:09,620 --> 00:08:16,430
attack methods I decided to use all

165
00:08:14,570 --> 00:08:18,800
three invasive same in very different

166
00:08:16,430 --> 00:08:20,990
non invasive attacks so with invasive

167
00:08:18,800 --> 00:08:23,390
attacks which are high cost and require

168
00:08:20,990 --> 00:08:26,890
long set-up time I only went to evaluate

169
00:08:23,390 --> 00:08:29,870
the size of the flash memory the

170
00:08:26,890 --> 00:08:32,990
complexity of the FPGA logic and JTAG

171
00:08:29,870 --> 00:08:35,390
logic to estimate the the attack time

172
00:08:32,990 --> 00:08:37,159
for same invasive attacks I performed

173
00:08:35,390 --> 00:08:39,500
optical fault injection and for

174
00:08:37,159 --> 00:08:43,100
non-invasive attacks which usually

175
00:08:39,500 --> 00:08:45,040
low-cost and are used by many attackers

176
00:08:43,100 --> 00:08:48,080
because they easily to transfer between

177
00:08:45,040 --> 00:08:51,050
attack teams I looked at undocumented

178
00:08:48,080 --> 00:08:53,470
JTACs commands for any back doors I

179
00:08:51,050 --> 00:08:55,189
looked at data remanence power analysis

180
00:08:53,470 --> 00:08:59,720
electromagnetic analysis

181
00:08:55,190 --> 00:09:03,680
and was glitching attacks so with

182
00:08:59,720 --> 00:09:06,019
invasive attacks I which are most

183
00:09:03,680 --> 00:09:08,269
dangerous because they can potentially

184
00:09:06,019 --> 00:09:10,759
give you full access to the internal

185
00:09:08,269 --> 00:09:13,310
device features unfortunately those

186
00:09:10,759 --> 00:09:16,189
attacks are usually so expensive that

187
00:09:13,310 --> 00:09:19,339
only well found that organisations can

188
00:09:16,189 --> 00:09:22,129
perform them they require highly skilled

189
00:09:19,339 --> 00:09:26,899
and knowledgeable attackers and they're

190
00:09:22,129 --> 00:09:29,329
also time consuming so for my evaluation

191
00:09:26,899 --> 00:09:32,180
I only used backside polishing down to

192
00:09:29,329 --> 00:09:33,829
poly silicon layer at this point I was

193
00:09:32,180 --> 00:09:35,810
able to put the device under the

194
00:09:33,829 --> 00:09:38,870
microscope and look at the cell

195
00:09:35,810 --> 00:09:40,969
structures and the fabrication process

196
00:09:38,870 --> 00:09:44,899
is stated by the manufacturers 55

197
00:09:40,970 --> 00:09:46,730
nanometers so obviously at that level of

198
00:09:44,899 --> 00:09:50,509
integration you will need an electron

199
00:09:46,730 --> 00:09:53,689
microscope to resolve any components and

200
00:09:50,509 --> 00:09:56,089
but still the optical microscope you can

201
00:09:53,689 --> 00:09:59,750
estimate the complexity of jtac logic

202
00:09:56,089 --> 00:10:02,329
which I estimated as sixty thousand

203
00:09:59,750 --> 00:10:04,670
gates so that means it would take

204
00:10:02,329 --> 00:10:07,189
several months to reverse-engineer this

205
00:10:04,670 --> 00:10:11,120
device and find out any flaws in the

206
00:10:07,189 --> 00:10:13,310
JTAG logic I also looked at the flash

207
00:10:11,120 --> 00:10:16,100
memory and surprisingly the flash memory

208
00:10:13,310 --> 00:10:19,550
cells were quite large 455 nanometer

209
00:10:16,100 --> 00:10:23,600
process so it's about a quarter by half

210
00:10:19,550 --> 00:10:25,609
micron and that means you can see

211
00:10:23,600 --> 00:10:28,370
individual memory cells on the optical

212
00:10:25,610 --> 00:10:31,699
microscope so they're about ten times

213
00:10:28,370 --> 00:10:33,290
larger than compared to usual embedded

214
00:10:31,699 --> 00:10:38,389
flash and microcontrollers and

215
00:10:33,290 --> 00:10:41,689
system-on-chip devices different evasive

216
00:10:38,389 --> 00:10:43,309
attacks the other question is not only

217
00:10:41,689 --> 00:10:46,759
how dangerous they're for the real

218
00:10:43,309 --> 00:10:50,120
device but also how dangerous is to

219
00:10:46,759 --> 00:10:52,459
perform those attacks because they could

220
00:10:50,120 --> 00:10:56,420
be dangerous also for the person who

221
00:10:52,459 --> 00:10:58,069
people who implement them and that the

222
00:10:56,420 --> 00:11:00,680
reason for that is because most invasive

223
00:10:58,069 --> 00:11:03,469
attacks involve chemistry and the

224
00:11:00,680 --> 00:11:05,599
chemistry is science of does anyone

225
00:11:03,470 --> 00:11:07,699
remember what is science off and then

226
00:11:05,600 --> 00:11:08,960
you might try to remember what you were

227
00:11:07,699 --> 00:11:10,490
taught in the school

228
00:11:08,960 --> 00:11:12,850
all the chemistry is the science of two

229
00:11:10,490 --> 00:11:17,300
things it's poisons and explosives

230
00:11:12,850 --> 00:11:20,660
because it comes from Oh chemistry so

231
00:11:17,300 --> 00:11:23,439
deep processing and also semiconductor

232
00:11:20,660 --> 00:11:26,480
fabrication process they have both

233
00:11:23,440 --> 00:11:29,780
because for due process and hydrofluoric

234
00:11:26,480 --> 00:11:31,750
acid is used to remove silicon oxide and

235
00:11:29,780 --> 00:11:36,140
also for selective etching of silicon

236
00:11:31,750 --> 00:11:38,000
this is very poisonous compound and also

237
00:11:36,140 --> 00:11:41,180
for cleaning they use piranha solution

238
00:11:38,000 --> 00:11:44,090
which is mixture of hydrogen peroxide

239
00:11:41,180 --> 00:11:46,489
and sulfuric acid it can explode on its

240
00:11:44,090 --> 00:11:48,110
own but also they use solvents for

241
00:11:46,490 --> 00:11:50,120
cleaning if you mix those two things

242
00:11:48,110 --> 00:11:54,770
together they will explode immediately

243
00:11:50,120 --> 00:11:56,840
and also as to the poisons all chemicals

244
00:11:54,770 --> 00:11:59,449
are poisonous there's no exceptions

245
00:11:56,840 --> 00:12:02,390
and that's why at the University of

246
00:11:59,450 --> 00:12:06,500
you're taught to always be a protective

247
00:12:02,390 --> 00:12:09,080
clothes put gloves on on your

248
00:12:06,500 --> 00:12:13,610
hand-signed although all sorts of forms

249
00:12:09,080 --> 00:12:15,650
and get some sophisticated training and

250
00:12:13,610 --> 00:12:17,750
the reason for that is that there's a

251
00:12:15,650 --> 00:12:20,720
parameter for to compare various

252
00:12:17,750 --> 00:12:24,020
chemicals how poisons the parameters

253
00:12:20,720 --> 00:12:26,930
called ld50 and that means that 50%

254
00:12:24,020 --> 00:12:33,350
probability how much chemicals do we

255
00:12:26,930 --> 00:12:35,209
need to for half of the animals to be

256
00:12:33,350 --> 00:12:37,970
killed they usually test it on on rats

257
00:12:35,210 --> 00:12:40,370
and that is set the amount of chemicals

258
00:12:37,970 --> 00:12:42,110
per kilogram of weight and you can see

259
00:12:40,370 --> 00:12:46,910
that for hydrofluoric acid you need only

260
00:12:42,110 --> 00:12:51,800
a few milliliters to to kill someone and

261
00:12:46,910 --> 00:12:54,709
for hydrogen peroxide it's a bit larger

262
00:12:51,800 --> 00:12:59,390
but still it's a relatively low amount

263
00:12:54,710 --> 00:13:01,430
and the same is for sulfuric acid but

264
00:12:59,390 --> 00:13:04,610
also solvents they're also quite

265
00:13:01,430 --> 00:13:07,160
dangerous so probably not more than a

266
00:13:04,610 --> 00:13:10,970
hundred milliliter could cause severe

267
00:13:07,160 --> 00:13:13,280
come to you but obviously in real life

268
00:13:10,970 --> 00:13:17,540
you come across various chemicals when

269
00:13:13,280 --> 00:13:20,240
you do some cleaning at at home so for

270
00:13:17,540 --> 00:13:22,730
example if you if you have some problems

271
00:13:20,240 --> 00:13:24,949
with your sink it gets blocked

272
00:13:22,730 --> 00:13:28,040
you go to the shop and you buy some

273
00:13:24,949 --> 00:13:30,349
chemicals to clear this the pipes of

274
00:13:28,040 --> 00:13:33,199
your sink and for that they either use

275
00:13:30,350 --> 00:13:37,810
sulfuric acid which is quite dangerous

276
00:13:33,199 --> 00:13:41,569
or you can go and buy some alkaline and

277
00:13:37,810 --> 00:13:45,369
those alkaline side either sodium or

278
00:13:41,570 --> 00:13:47,899
potassium hydroxide and you can see the

279
00:13:45,370 --> 00:13:50,480
poisonous level is very close to the

280
00:13:47,899 --> 00:13:53,420
hydrofluoric acid and hardly you will

281
00:13:50,480 --> 00:13:56,779
veer all the chemical protective clothes

282
00:13:53,420 --> 00:13:59,599
and put clothes and other things but

283
00:13:56,779 --> 00:14:03,820
also you drive cars and petrol and

284
00:13:59,600 --> 00:14:07,600
diesel at the same level of danger as

285
00:14:03,820 --> 00:14:12,980
solvents used in the fabrication process

286
00:14:07,600 --> 00:14:16,220
not only that but also you go to parties

287
00:14:12,980 --> 00:14:21,290
you drink alcohol and it's the same

288
00:14:16,220 --> 00:14:25,850
level as as petrol or acetone or not

289
00:14:21,290 --> 00:14:28,699
only that but you go and you you go to

290
00:14:25,850 --> 00:14:34,029
have some lunch or dinner and you use

291
00:14:28,699 --> 00:14:34,029
salt and the salt is as dangerous as

292
00:14:34,899 --> 00:14:40,100
general chemicals used in semiconductor

293
00:14:37,550 --> 00:14:42,680
fabrication process so and you never

294
00:14:40,100 --> 00:14:45,440
wear gloves to put some salt in your

295
00:14:42,680 --> 00:14:49,180
food and if you think there are some

296
00:14:45,440 --> 00:14:51,980
safe chemicals then water also has some

297
00:14:49,180 --> 00:14:54,500
limits so it's only ten times less

298
00:14:51,980 --> 00:15:02,000
dangerous than alcohol so next time you

299
00:14:54,500 --> 00:15:06,019
that used to be I think twice now I

300
00:15:02,000 --> 00:15:08,510
moved to same invasive attacks so for

301
00:15:06,019 --> 00:15:11,060
experimental set up I need to access the

302
00:15:08,510 --> 00:15:14,810
surface of the chip and for that I go

303
00:15:11,060 --> 00:15:16,670
from the backside so a mechanically open

304
00:15:14,810 --> 00:15:20,060
up the package of the chip and I put it

305
00:15:16,670 --> 00:15:21,860
under the microscope and also I for that

306
00:15:20,060 --> 00:15:30,670
I build a special adapter so I can

307
00:15:21,860 --> 00:15:32,920
insert the chip and also built a spare

308
00:15:30,670 --> 00:15:35,589
test board that was communicating with

309
00:15:32,920 --> 00:15:42,370
the cheap YJ tag and also was

310
00:15:35,590 --> 00:15:44,350
controlling the laser and so then I use

311
00:15:42,370 --> 00:15:46,990
an infrared laser the 50 milli watt

312
00:15:44,350 --> 00:15:49,750
power and I scanned the full surface of

313
00:15:46,990 --> 00:15:53,320
the chip the 100 micrometer steps trying

314
00:15:49,750 --> 00:15:54,990
to find the sensitive locations that

315
00:15:53,320 --> 00:16:00,610
could change the contents of the

316
00:15:54,990 --> 00:16:03,070
security fuse and as a result you see

317
00:16:00,610 --> 00:16:08,340
there's this very small area where I was

318
00:16:03,070 --> 00:16:12,870
able to switch the security fuse from

319
00:16:08,340 --> 00:16:16,570
the protected state to unprotected state

320
00:16:12,870 --> 00:16:18,400
so next i zoom tuned into that area so

321
00:16:16,570 --> 00:16:20,560
it's about thousand five thousand

322
00:16:18,400 --> 00:16:22,930
microns and then I scan it the for

323
00:16:20,560 --> 00:16:25,329
higher resolution and during that

324
00:16:22,930 --> 00:16:28,359
process has set the verify protect fuse

325
00:16:25,330 --> 00:16:30,370
and the laser was at the same level and

326
00:16:28,360 --> 00:16:34,000
you can see there are many many places

327
00:16:30,370 --> 00:16:36,550
in the flesh a memory where you can

328
00:16:34,000 --> 00:16:39,640
inject the default if a laser and then

329
00:16:36,550 --> 00:16:42,430
that would cause the security protection

330
00:16:39,640 --> 00:16:45,699
fuse to be disabled and the same

331
00:16:42,430 --> 00:16:47,650
experiment I ran for JTAG security fuse

332
00:16:45,700 --> 00:16:50,500
the highest level of security in this

333
00:16:47,650 --> 00:16:53,890
device and again you can see that there

334
00:16:50,500 --> 00:16:55,530
are many sports in in the flash memory

335
00:16:53,890 --> 00:16:58,030
where you can inject the fault and

336
00:16:55,530 --> 00:17:02,650
switch off the fuse and then get full

337
00:16:58,030 --> 00:17:04,329
access to the contents of the device so

338
00:17:02,650 --> 00:17:09,240
again same invasive attacks they're

339
00:17:04,329 --> 00:17:13,030
quite dangerous because they deal with

340
00:17:09,240 --> 00:17:15,819
the lasers so there's another part also

341
00:17:13,030 --> 00:17:18,369
to run the experiments for timing

342
00:17:15,819 --> 00:17:23,530
analysis trying to figure out the

343
00:17:18,369 --> 00:17:26,349
optimal time of the fault injection so

344
00:17:23,530 --> 00:17:31,930
for that I was sending the laser before

345
00:17:26,349 --> 00:17:34,840
the TCK piles of the JTAG and also after

346
00:17:31,930 --> 00:17:37,270
after the TCK pulse and before the t ck

347
00:17:34,840 --> 00:17:39,639
pulse and you can see if yeah if the

348
00:17:37,270 --> 00:17:43,240
pulse is delayed before after t ck

349
00:17:39,640 --> 00:17:44,590
there's no change in in the result so

350
00:17:43,240 --> 00:17:47,440
you always unlocked

351
00:17:44,590 --> 00:17:52,059
at the same time but if you terminate

352
00:17:47,440 --> 00:17:54,429
the pulse before TCK then you have to do

353
00:17:52,059 --> 00:17:57,668
it very close to the TCK

354
00:17:54,429 --> 00:18:01,990
so obviously the the effect of the pulse

355
00:17:57,669 --> 00:18:05,889
is only sensed by the device during the

356
00:18:01,990 --> 00:18:07,659
ice age of the TCK so now a few words

357
00:18:05,889 --> 00:18:11,168
about the danger of semi invasive

358
00:18:07,659 --> 00:18:15,429
attacks so because they walked if the

359
00:18:11,169 --> 00:18:18,129
lasers they are dangerous and there is

360
00:18:15,429 --> 00:18:20,440
many lasers are not visible so it's very

361
00:18:18,129 --> 00:18:25,029
difficult to tell when the the laser

362
00:18:20,440 --> 00:18:27,399
will hit your eye and also there are two

363
00:18:25,029 --> 00:18:30,009
classes of the lasers three beam that

364
00:18:27,399 --> 00:18:31,689
can blind you and the power is only 5

365
00:18:30,009 --> 00:18:34,029
milli watt and remember in my

366
00:18:31,690 --> 00:18:36,580
experiments I set the laser to 50 milli

367
00:18:34,029 --> 00:18:39,369
watt and also class for lasers they are

368
00:18:36,580 --> 00:18:44,259
more powerful they can not only blind

369
00:18:39,369 --> 00:18:46,269
you but also cause some burns but at the

370
00:18:44,259 --> 00:18:48,789
same time lasers are used in medicine

371
00:18:46,269 --> 00:18:51,249
they used to cut tissues and for medical

372
00:18:48,789 --> 00:18:54,970
treatment they used enough taft emoji

373
00:18:51,249 --> 00:18:58,269
for eye surgery and it's mainly the non

374
00:18:54,970 --> 00:19:00,610
collimated lasers which are republished

375
00:18:58,269 --> 00:19:03,690
represent the biggest threat if you

376
00:19:00,610 --> 00:19:07,149
yield therefore focus beam laser then

377
00:19:03,690 --> 00:19:09,789
they're mostly safe unless they hit the

378
00:19:07,149 --> 00:19:13,029
mirror or a white ball but the most

379
00:19:09,789 --> 00:19:16,149
amazing experiments as seen on the

380
00:19:13,029 --> 00:19:19,570
lasers was when I was shown a class for

381
00:19:16,149 --> 00:19:22,840
lasers laser at the infrared 1064 yard

382
00:19:19,570 --> 00:19:25,720
laser that was so the device was quite

383
00:19:22,840 --> 00:19:29,199
small and the beam was focused at about

384
00:19:25,720 --> 00:19:32,289
20 25 centimeter and when the the beam

385
00:19:29,200 --> 00:19:36,850
was fired you can see in the air just a

386
00:19:32,289 --> 00:19:38,950
big bull just a big flash and you can

387
00:19:36,850 --> 00:19:41,039
hardly imagine where these devices are

388
00:19:38,950 --> 00:19:46,570
used it was demonstrated by

389
00:19:41,039 --> 00:19:48,549
ophthalmology people and if some people

390
00:19:46,570 --> 00:19:51,730
might remember that when you look at the

391
00:19:48,549 --> 00:19:57,340
white wall you sometimes see small

392
00:19:51,730 --> 00:19:58,510
particles that we in flying in in front

393
00:19:57,340 --> 00:20:00,610
of your eye and you

394
00:19:58,510 --> 00:20:02,980
cannot get rid of them when you blink

395
00:20:00,610 --> 00:20:05,649
and this is because these are small

396
00:20:02,980 --> 00:20:08,260
pieces of tissue that are located in the

397
00:20:05,650 --> 00:20:11,760
liquid between your cornea of your eye

398
00:20:08,260 --> 00:20:16,660
and the the pocket that holds the heal

399
00:20:11,760 --> 00:20:19,330
the crystal so over time they usually

400
00:20:16,660 --> 00:20:21,880
disappear but in old age people's the

401
00:20:19,330 --> 00:20:25,230
these particles are quite large and they

402
00:20:21,880 --> 00:20:28,870
could stay there for ages so those

403
00:20:25,230 --> 00:20:31,990
surgeons they did they cut these devices

404
00:20:28,870 --> 00:20:35,559
which differ infrared laser collimated

405
00:20:31,990 --> 00:20:39,400
TIFF red laser and they focusing on

406
00:20:35,559 --> 00:20:41,710
those particles inside your eye and then

407
00:20:39,400 --> 00:20:44,290
pressing the button that caused this

408
00:20:41,710 --> 00:20:51,640
class for laser to shoot on these

409
00:20:44,290 --> 00:20:55,000
particles so now about non-invasive

410
00:20:51,640 --> 00:20:58,990
attacks so first I looked at

411
00:20:55,000 --> 00:21:01,530
undocumented Jeter commands because in

412
00:20:58,990 --> 00:21:05,260
the hope that I will find some leg goes

413
00:21:01,530 --> 00:21:10,299
looked at user guides and video files

414
00:21:05,260 --> 00:21:12,610
which used to describe the jtag boundary

415
00:21:10,299 --> 00:21:14,799
scan and jtac commands and I also

416
00:21:12,610 --> 00:21:17,799
converted profile and to stop all files

417
00:21:14,799 --> 00:21:20,679
trying to find all the commands that can

418
00:21:17,799 --> 00:21:23,440
be used and also scant the JTAG

419
00:21:20,679 --> 00:21:26,290
interface for the length of command and

420
00:21:23,440 --> 00:21:29,740
data registers and I also try to observe

421
00:21:26,290 --> 00:21:33,070
power consumption for detecting the

422
00:21:29,740 --> 00:21:36,000
active commands so I did manage to find

423
00:21:33,070 --> 00:21:40,030
some commands which were not documented

424
00:21:36,000 --> 00:21:43,450
but none of those commands are found to

425
00:21:40,030 --> 00:21:47,290
be useful for getting access to to the

426
00:21:43,450 --> 00:21:49,419
data on the chip and another challenge

427
00:21:47,290 --> 00:21:51,730
with non-invasive attacks is that if you

428
00:21:49,419 --> 00:21:54,580
have the JTAG security few set and it

429
00:21:51,730 --> 00:21:58,690
can no longer run anything through the

430
00:21:54,580 --> 00:22:00,879
JTAG also looked at data remanence this

431
00:21:58,690 --> 00:22:03,270
is the residual data left after you

432
00:22:00,880 --> 00:22:05,980
perform the erase operation and

433
00:22:03,270 --> 00:22:08,770
obviously when you do full chip arrays

434
00:22:05,980 --> 00:22:12,340
you also reset all the fuses so the idea

435
00:22:08,770 --> 00:22:16,690
is to terminate the chip eraser

436
00:22:12,340 --> 00:22:18,820
at the right time to cause the fuses to

437
00:22:16,690 --> 00:22:21,340
be disabled but the data to be preserved

438
00:22:18,820 --> 00:22:25,720
and you do this by terminating the power

439
00:22:21,340 --> 00:22:27,850
supply of the chip and that of course

440
00:22:25,720 --> 00:22:31,150
the Todd Walker if the JTAG security

441
00:22:27,850 --> 00:22:33,879
fuses activated but it did allow me to

442
00:22:31,150 --> 00:22:38,020
extract about 97% of the information

443
00:22:33,880 --> 00:22:40,000
from the chip so prefer running the data

444
00:22:38,020 --> 00:22:44,080
commands I used the universal programmer

445
00:22:40,000 --> 00:22:46,150
because you can not only run the chip

446
00:22:44,080 --> 00:22:49,240
read operations but also you can modify

447
00:22:46,150 --> 00:22:52,390
the profile and defy any data you write

448
00:22:49,240 --> 00:22:56,250
into the chip and also had the test

449
00:22:52,390 --> 00:22:58,540
board where I put the chip with some

450
00:22:56,250 --> 00:23:03,340
power supply and power analysis

451
00:22:58,540 --> 00:23:06,639
connections I also tried to override the

452
00:23:03,340 --> 00:23:09,179
memory because surprisingly even the

453
00:23:06,640 --> 00:23:11,890
security fuses I said you can still

454
00:23:09,180 --> 00:23:14,110
write into the memory you can change any

455
00:23:11,890 --> 00:23:16,800
bit of information from one to zero in

456
00:23:14,110 --> 00:23:20,020
the user and in the configuration flash

457
00:23:16,800 --> 00:23:21,970
so if there's some kind of a check terms

458
00:23:20,020 --> 00:23:25,690
of signatures running inside then

459
00:23:21,970 --> 00:23:27,450
obviously you can work out the contents

460
00:23:25,690 --> 00:23:30,130
of the memory by going bit by bit

461
00:23:27,450 --> 00:23:32,710
however time in attack will not work

462
00:23:30,130 --> 00:23:36,520
because they read the data in large

463
00:23:32,710 --> 00:23:38,350
chunks for small devices 64 bits so you

464
00:23:36,520 --> 00:23:41,770
will need to large number of the devices

465
00:23:38,350 --> 00:23:45,520
to figure out the time when the

466
00:23:41,770 --> 00:23:50,200
corrupted memory was detected because

467
00:23:45,520 --> 00:23:53,500
you can see in the in the device

468
00:23:50,200 --> 00:23:56,590
response when the once the boot process

469
00:23:53,500 --> 00:24:00,640
hit corrupted memory it immediately

470
00:23:56,590 --> 00:24:03,520
stops and you can see it it has to logic

471
00:24:00,640 --> 00:24:05,620
are your signals that determined the

472
00:24:03,520 --> 00:24:07,660
start of the boot process and the end of

473
00:24:05,620 --> 00:24:11,110
the boot process so you can figure out

474
00:24:07,660 --> 00:24:13,480
when this memory was corrupted but power

475
00:24:11,110 --> 00:24:16,179
analysis can reveal a single bit change

476
00:24:13,480 --> 00:24:18,070
in the memory and also if the encryption

477
00:24:16,180 --> 00:24:21,340
is used and obviously single bit change

478
00:24:18,070 --> 00:24:23,020
will cause the change in the large

479
00:24:21,340 --> 00:24:25,600
number of bits and that could be easily

480
00:24:23,020 --> 00:24:27,970
detected through the power analysis

481
00:24:25,600 --> 00:24:32,409
and again the same problem you need JTAG

482
00:24:27,970 --> 00:24:34,570
to be enabled so the power analysis has

483
00:24:32,410 --> 00:24:36,940
just used a resistor in one of the power

484
00:24:34,570 --> 00:24:40,780
supply line I was only interested in the

485
00:24:36,940 --> 00:24:43,530
coal power supply now because that's

486
00:24:40,780 --> 00:24:46,660
where the logic is supplied from and

487
00:24:43,530 --> 00:24:48,668
then it's a very simple setup you just

488
00:24:46,660 --> 00:24:53,640
record the power trace and you can pair

489
00:24:48,669 --> 00:24:56,020
two traces with different settings so

490
00:24:53,640 --> 00:24:58,990
this is the power trace of the boot

491
00:24:56,020 --> 00:25:01,299
process so you can see that first the

492
00:24:58,990 --> 00:25:04,000
device reads some internal

493
00:25:01,299 --> 00:25:06,850
configurations and then it starts the

494
00:25:04,000 --> 00:25:08,620
boot process and then these are two

495
00:25:06,850 --> 00:25:10,750
logic signals are mentioned so this is

496
00:25:08,620 --> 00:25:12,939
the start of the boot process and this

497
00:25:10,750 --> 00:25:15,220
is the end of the boot process so the

498
00:25:12,940 --> 00:25:17,230
device actually tells you when the boot

499
00:25:15,220 --> 00:25:21,909
process is finished and whether it's has

500
00:25:17,230 --> 00:25:23,620
any errors and also from the power trace

501
00:25:21,909 --> 00:25:26,710
you can extract valuable time and

502
00:25:23,620 --> 00:25:30,658
parameters that will be needed for fault

503
00:25:26,710 --> 00:25:34,240
injection attacks you can also do

504
00:25:30,659 --> 00:25:36,070
averaging across multiple power traces

505
00:25:34,240 --> 00:25:38,260
because this device does not have any

506
00:25:36,070 --> 00:25:40,899
countermeasures against power analysis

507
00:25:38,260 --> 00:25:43,990
you can compare traces they've different

508
00:25:40,900 --> 00:25:46,450
ie yes keys you can compare traces

509
00:25:43,990 --> 00:25:48,610
between normal and corrupted flesh and

510
00:25:46,450 --> 00:25:50,169
you can see this one once the flesh is

511
00:25:48,610 --> 00:25:53,889
corrupted the boot process immediately

512
00:25:50,169 --> 00:25:57,450
terminates and you can see this in the

513
00:25:53,890 --> 00:26:02,260
power trace and you can compare the last

514
00:25:57,450 --> 00:26:04,450
corrupted data in the in the device and

515
00:26:02,260 --> 00:26:07,270
then single bit change will cause the

516
00:26:04,450 --> 00:26:09,039
different decrypted data to be processed

517
00:26:07,270 --> 00:26:12,158
by the device and you can clearly see

518
00:26:09,039 --> 00:26:14,530
whether this single bit change caused

519
00:26:12,159 --> 00:26:17,289
any difference or not so you can extract

520
00:26:14,530 --> 00:26:19,780
the contents of the device if the device

521
00:26:17,289 --> 00:26:23,770
was encrypted doesn't matter whether you

522
00:26:19,780 --> 00:26:25,990
get this verified protect and encrypted

523
00:26:23,770 --> 00:26:28,059
four fuses set because you can still

524
00:26:25,990 --> 00:26:36,460
write into the device also you cannot

525
00:26:28,059 --> 00:26:38,830
read and and the biggest challenge if

526
00:26:36,460 --> 00:26:39,370
that kind of the device is because the

527
00:26:38,830 --> 00:26:42,159
configuring

528
00:26:39,370 --> 00:26:44,290
is stored on the embedded flesh so you

529
00:26:42,160 --> 00:26:48,490
cannot easily run it like the

530
00:26:44,290 --> 00:26:50,950
conventional FPGA stiff that run from

531
00:26:48,490 --> 00:26:57,850
external flash three modifying the data

532
00:26:50,950 --> 00:27:00,040
takes much longer time so I also tried

533
00:26:57,850 --> 00:27:02,530
electromagnetic emission analysis by

534
00:27:00,040 --> 00:27:06,340
observing leakage using a small magnetic

535
00:27:02,530 --> 00:27:08,170
coil and two H probes and the advantage

536
00:27:06,340 --> 00:27:10,209
is this probe can be positioned at

537
00:27:08,170 --> 00:27:12,490
different places across the device and

538
00:27:10,210 --> 00:27:14,590
also there's no need to remove the

539
00:27:12,490 --> 00:27:18,000
cheapo insert any resistor so you don't

540
00:27:14,590 --> 00:27:20,080
have to modify the circuit board and

541
00:27:18,000 --> 00:27:22,809
usually this analysis requires

542
00:27:20,080 --> 00:27:26,260
preamplifiers because the signal is much

543
00:27:22,809 --> 00:27:28,600
weaker compared to power analysis but I

544
00:27:26,260 --> 00:27:30,640
didn't find any advantage of using this

545
00:27:28,600 --> 00:27:33,309
matters because signal-to-noise ratio

546
00:27:30,640 --> 00:27:35,679
was much worse than the power analysis

547
00:27:33,309 --> 00:27:38,290
and also I found that contribution of

548
00:27:35,679 --> 00:27:40,840
the internal clock was so high that it

549
00:27:38,290 --> 00:27:45,010
was several orders of magnitude larger

550
00:27:40,840 --> 00:27:47,050
than any useful signal you can get some

551
00:27:45,010 --> 00:27:48,970
improvement from position in the sensor

552
00:27:47,050 --> 00:27:53,559
but still because I was performing it on

553
00:27:48,970 --> 00:27:56,280
a fully packaged device because the at

554
00:27:53,559 --> 00:28:03,129
least point six millimeter thick

555
00:27:56,280 --> 00:28:07,149
packaging that did not help I also tried

556
00:28:03,130 --> 00:28:09,429
power glitching if the device saw for

557
00:28:07,150 --> 00:28:11,980
that I was in injecting glitches in into

558
00:28:09,429 --> 00:28:14,260
the core power supply and I tested both

559
00:28:11,980 --> 00:28:16,540
single cell power supply devices that

560
00:28:14,260 --> 00:28:20,230
cut internal regulator that took

561
00:28:16,540 --> 00:28:22,870
external 3.3 volt and turn them into 1.2

562
00:28:20,230 --> 00:28:25,420
volt coal power supply and now they've

563
00:28:22,870 --> 00:28:28,360
door sub dual supply devices it's easier

564
00:28:25,420 --> 00:28:33,250
because they are supplied from external

565
00:28:28,360 --> 00:28:35,620
1.2 volt and as expected doll supply

566
00:28:33,250 --> 00:28:39,130
devices I easier to glitch because you

567
00:28:35,620 --> 00:28:41,979
can immediately send the glitch to the

568
00:28:39,130 --> 00:28:44,590
core power supply and the glitch on the

569
00:28:41,980 --> 00:28:46,300
power line looks like this so and also

570
00:28:44,590 --> 00:28:51,340
you have to insert it at the right time

571
00:28:46,300 --> 00:28:53,200
and I ran it for both devices at

572
00:28:51,340 --> 00:28:55,418
different voltages and different lengths

573
00:28:53,200 --> 00:28:59,200
of the pulse and you can see the result

574
00:28:55,419 --> 00:29:00,850
here so for this device I usually

575
00:28:59,200 --> 00:29:03,039
supplies from three point three balls so

576
00:29:00,850 --> 00:29:07,149
I got to go down to one and a half volt

577
00:29:03,039 --> 00:29:08,740
to inject any fault and the the number

578
00:29:07,149 --> 00:29:12,000
force is still quite small because

579
00:29:08,740 --> 00:29:16,240
device has more than two million bits of

580
00:29:12,000 --> 00:29:19,330
flesh and also only a few hundred of

581
00:29:16,240 --> 00:29:22,210
thousand bits were corrupted for dual

582
00:29:19,330 --> 00:29:24,519
supply device I had to go to about half

583
00:29:22,210 --> 00:29:26,980
of the power supply we've even less but

584
00:29:24,519 --> 00:29:30,100
I was more successful in change in the

585
00:29:26,980 --> 00:29:32,889
contents of data from the device so this

586
00:29:30,100 --> 00:29:36,610
attacks are quite powerful and useful

587
00:29:32,889 --> 00:29:38,229
but you have to be careful with

588
00:29:36,610 --> 00:29:40,360
injecting the glitch because if the

589
00:29:38,230 --> 00:29:46,750
glitch goes too low the device will

590
00:29:40,360 --> 00:29:49,000
reboot and the elastics non-invasive

591
00:29:46,750 --> 00:29:50,830
experiments that are around was a fault

592
00:29:49,000 --> 00:29:55,779
injection using an electromagnetic pulse

593
00:29:50,830 --> 00:29:57,370
and that kind of attack was very

594
00:29:55,779 --> 00:30:01,200
promising because there are many

595
00:29:57,370 --> 00:30:03,908
publications on how to inject fault and

596
00:30:01,200 --> 00:30:07,210
the set up was described in many

597
00:30:03,909 --> 00:30:10,679
publications but usually what I found

598
00:30:07,210 --> 00:30:13,690
difficult is the parameters of the pulse

599
00:30:10,679 --> 00:30:15,909
so what you use is you use fast change

600
00:30:13,690 --> 00:30:18,029
in magnetic field to inject eddy current

601
00:30:15,909 --> 00:30:21,159
inside the device and that causes some

602
00:30:18,029 --> 00:30:24,690
voltages to rise in the input of the

603
00:30:21,159 --> 00:30:29,470
logic and changes the contents of the

604
00:30:24,690 --> 00:30:31,779
registers of memory but I found it I

605
00:30:29,470 --> 00:30:33,669
went into difficulties trying to

606
00:30:31,779 --> 00:30:35,860
reproduce some parameters because

607
00:30:33,669 --> 00:30:38,529
usually if you read papers and

608
00:30:35,860 --> 00:30:40,719
publications on that kind of attacks

609
00:30:38,529 --> 00:30:43,320
they only specify the duration of the

610
00:30:40,720 --> 00:30:46,000
pulse and the voltage of the pulse and

611
00:30:43,320 --> 00:30:50,439
here you come across the first challenge

612
00:30:46,000 --> 00:30:54,309
is what hardware to use in order to get

613
00:30:50,440 --> 00:30:56,440
this pulse so you can either use

614
00:30:54,309 --> 00:31:00,549
off-the-shelf equipment like a high

615
00:30:56,440 --> 00:31:03,220
voltage pulse generator that you will

616
00:31:00,549 --> 00:31:05,769
connect to the coil through probably

617
00:31:03,220 --> 00:31:07,149
quite a long leads or you can use signal

618
00:31:05,769 --> 00:31:09,279
generator the five volt

619
00:31:07,149 --> 00:31:13,988
champ LaFace and again you have a long

620
00:31:09,279 --> 00:31:16,659
cable to the coil but you have you will

621
00:31:13,989 --> 00:31:19,599
have wires introducing some parasitic

622
00:31:16,659 --> 00:31:22,269
resistance inductance and capacitance so

623
00:31:19,599 --> 00:31:25,539
the pulse voltage will be reduced you

624
00:31:22,269 --> 00:31:27,399
will get a pulse France not very fast

625
00:31:25,539 --> 00:31:29,979
and you will introduce an s3

626
00:31:27,399 --> 00:31:33,129
oscillations so it will be very

627
00:31:29,979 --> 00:31:36,659
difficult to reproduce precise pulses

628
00:31:33,129 --> 00:31:39,759
using standard off-the-shelf equipment

629
00:31:36,659 --> 00:31:41,859
so custom design could benefit from

630
00:31:39,759 --> 00:31:45,399
better control and of the pulse

631
00:31:41,859 --> 00:31:47,678
parameters and also the custom board

632
00:31:45,399 --> 00:31:53,978
could be brought closer to the device on

633
00:31:47,679 --> 00:31:56,139
the test but here comes the challenge

634
00:31:53,979 --> 00:31:59,109
number two is how to control the

635
00:31:56,139 --> 00:32:01,178
duration of the pulse the coil that is

636
00:31:59,109 --> 00:32:04,718
used for electromagnetic pulse injection

637
00:32:01,179 --> 00:32:07,799
has certain inductive 'ti and the

638
00:32:04,719 --> 00:32:10,179
inductive ET determines the way how you

639
00:32:07,799 --> 00:32:12,399
control the voltage across it so that

640
00:32:10,179 --> 00:32:15,519
there's an equation that tells that the

641
00:32:12,399 --> 00:32:18,099
voltage on end activity is determined by

642
00:32:15,519 --> 00:32:20,440
the change of the current across it and

643
00:32:18,099 --> 00:32:23,468
the L in the in ductility of your coil

644
00:32:20,440 --> 00:32:26,080
so if you aim to have a fixed voltage on

645
00:32:23,469 --> 00:32:29,289
your coil then you will end up with your

646
00:32:26,080 --> 00:32:32,678
current constantly rising across the

647
00:32:29,289 --> 00:32:35,019
inside the coil for an average 10 wind a

648
00:32:32,679 --> 00:32:37,200
coil which is used for most experiments

649
00:32:35,019 --> 00:32:40,089
you will end up with about 100

650
00:32:37,200 --> 00:32:42,609
nonagenarian activity and that means

651
00:32:40,089 --> 00:32:45,009
that if you try to create a hundred volt

652
00:32:42,609 --> 00:32:48,279
pulse you will end up with the current

653
00:32:45,009 --> 00:32:50,379
that ramps at about one amp a nanosecond

654
00:32:48,279 --> 00:32:52,629
so in 10 nanosecond time you will have

655
00:32:50,379 --> 00:32:55,049
10 amps and if you try to create a

656
00:32:52,629 --> 00:32:58,658
hundred nano second pulse you'll have to

657
00:32:55,049 --> 00:33:00,339
feed hundred amp into into your coral so

658
00:32:58,659 --> 00:33:02,919
it will be very difficult to produce

659
00:33:00,339 --> 00:33:05,559
that kind of pulse either your power

660
00:33:02,919 --> 00:33:07,479
supply will run out of steam or your

661
00:33:05,559 --> 00:33:11,799
switch that controls the coil will be

662
00:33:07,479 --> 00:33:14,229
unable to hold that high current now you

663
00:33:11,799 --> 00:33:17,139
also have challenge number three that is

664
00:33:14,229 --> 00:33:19,820
maintaining the pulse parameters so you

665
00:33:17,139 --> 00:33:23,479
can try to use

666
00:33:19,820 --> 00:33:27,290
capacitor to hold the energy necessary

667
00:33:23,480 --> 00:33:29,960
for the coil because the once you charge

668
00:33:27,290 --> 00:33:32,090
the capacitor you can store a certain

669
00:33:29,960 --> 00:33:35,180
charge and that can be used to supply

670
00:33:32,090 --> 00:33:36,860
the call with the current so this the

671
00:33:35,180 --> 00:33:40,330
capacitor the things are much easier

672
00:33:36,860 --> 00:33:43,639
once you charge it it holds the voltage

673
00:33:40,330 --> 00:33:46,310
but this they comes in our problem you

674
00:33:43,640 --> 00:33:49,280
cannot create an infinitely long pulse

675
00:33:46,310 --> 00:33:51,950
on on with the coil because at some

676
00:33:49,280 --> 00:33:55,310
point the coil will be saturated and no

677
00:33:51,950 --> 00:33:58,070
longer the current will glow grow away

678
00:33:55,310 --> 00:33:59,929
nearly on inside the coil because at

679
00:33:58,070 --> 00:34:02,030
that point the coil will turn into a

680
00:33:59,930 --> 00:34:05,270
resistor and in fact very small resist

681
00:34:02,030 --> 00:34:07,670
about 0.1 oh so maintain in voltage

682
00:34:05,270 --> 00:34:09,949
across the coil will be prohibitively

683
00:34:07,670 --> 00:34:12,380
hot you will have basically three

684
00:34:09,949 --> 00:34:15,109
possible options either your power

685
00:34:12,380 --> 00:34:18,830
supply goes belly-up because the current

686
00:34:15,110 --> 00:34:20,900
that will you will need to send 400 volt

687
00:34:18,830 --> 00:34:24,259
pulse across this coil will be about

688
00:34:20,900 --> 00:34:27,110
1,000 amp or that means hundred kilowatt

689
00:34:24,260 --> 00:34:29,810
power supply or your transistor will be

690
00:34:27,110 --> 00:34:33,050
come to stress and start smoking because

691
00:34:29,810 --> 00:34:37,250
even if the very small channel

692
00:34:33,050 --> 00:34:41,630
resistance of hundreds of ohm it still

693
00:34:37,250 --> 00:34:43,190
be ten kilowatt be kettle or your coil

694
00:34:41,630 --> 00:34:45,410
becomes too happy and will start

695
00:34:43,190 --> 00:34:49,880
firework if you managed to get that

696
00:34:45,409 --> 00:34:53,179
current through it now there's another

697
00:34:49,880 --> 00:34:56,960
challenge once you started everything

698
00:34:53,179 --> 00:34:59,270
how we are going to stop it so the coil

699
00:34:56,960 --> 00:35:02,060
accommodates the energy in the form of

700
00:34:59,270 --> 00:35:05,090
magnetic field once you stop supplying

701
00:35:02,060 --> 00:35:08,540
the energy the coil wants to get rid of

702
00:35:05,090 --> 00:35:10,310
that energy and it has to go somewhere

703
00:35:08,540 --> 00:35:12,500
and another problem has to go very

704
00:35:10,310 --> 00:35:14,870
quickly much quicker than you supplied

705
00:35:12,500 --> 00:35:17,750
the energy and that creates what's

706
00:35:14,870 --> 00:35:20,060
called fly back voltage across the coil

707
00:35:17,750 --> 00:35:22,370
so you expect the pulse pulse to be like

708
00:35:20,060 --> 00:35:25,940
this but you end up with very high

709
00:35:22,370 --> 00:35:28,160
voltage spike and if you think that that

710
00:35:25,940 --> 00:35:30,980
spike will not affect your circuit and I

711
00:35:28,160 --> 00:35:33,290
tried to reproduce that experiment so

712
00:35:30,980 --> 00:35:35,900
this is the voltage across the coil

713
00:35:33,290 --> 00:35:38,150
and I put the H probe next to the coil

714
00:35:35,900 --> 00:35:41,980
and you can see that on the probe the

715
00:35:38,150 --> 00:35:45,670
magnetic field exactly replicates the

716
00:35:41,980 --> 00:35:49,160
the shape of the signal if some

717
00:35:45,670 --> 00:35:51,350
filtering so obviously on your device

718
00:35:49,160 --> 00:35:53,720
not only your initial pulse will have

719
00:35:51,350 --> 00:35:59,210
effect but the most effect you will feel

720
00:35:53,720 --> 00:36:01,640
from this flyback voltage and they also

721
00:35:59,210 --> 00:36:05,180
the 50 volt pulse it could easily go to

722
00:36:01,640 --> 00:36:07,970
500 volts and that high voltage could be

723
00:36:05,180 --> 00:36:10,009
damaging for your equipment or pulse

724
00:36:07,970 --> 00:36:12,799
generator it could be damaging to the

725
00:36:10,010 --> 00:36:16,790
transistor and it could also damage

726
00:36:12,800 --> 00:36:22,820
insulation and cause them damage to

727
00:36:16,790 --> 00:36:26,120
other devices in your circuit so how do

728
00:36:22,820 --> 00:36:27,950
we get rid of that unwanted pulse so if

729
00:36:26,120 --> 00:36:29,750
you want to reproduce the experiments

730
00:36:27,950 --> 00:36:31,480
clearly and you want to have full

731
00:36:29,750 --> 00:36:35,800
control over the pulse you might think

732
00:36:31,480 --> 00:36:40,160
you will somehow remove that flyback

733
00:36:35,800 --> 00:36:41,810
voltage pulse so that comes to the last

734
00:36:40,160 --> 00:36:44,720
challenge in how to get rid of the

735
00:36:41,810 --> 00:36:49,600
unwanted flyback pulse you can try to

736
00:36:44,720 --> 00:36:52,759
modify the pulse generation circuit and

737
00:36:49,600 --> 00:36:57,860
you can and then test the result in real

738
00:36:52,760 --> 00:36:59,870
circuit so the obvious solution you

739
00:36:57,860 --> 00:37:03,290
might be told it at the university is

740
00:36:59,870 --> 00:37:08,089
you use also so-called flyback diode so

741
00:37:03,290 --> 00:37:10,490
when you switch on the relays or motors

742
00:37:08,090 --> 00:37:13,960
they always recommend you to put these

743
00:37:10,490 --> 00:37:18,049
diodes to get rid of these pulses and

744
00:37:13,960 --> 00:37:20,810
also for verifying those experiments

745
00:37:18,050 --> 00:37:23,840
ideas that I built a test circuit and I

746
00:37:20,810 --> 00:37:26,000
put some voltage dividers before feeding

747
00:37:23,840 --> 00:37:29,690
them into the oscilloscope so this is 1

748
00:37:26,000 --> 00:37:32,000
to 10 divide both high voltage dividers

749
00:37:29,690 --> 00:37:34,640
because you cannot feed 500 volts into

750
00:37:32,000 --> 00:37:37,130
the oscilloscope and then the circuit is

751
00:37:34,640 --> 00:37:40,129
very small so the capacitor that calls

752
00:37:37,130 --> 00:37:43,010
the charge the the voltage on the coil

753
00:37:40,130 --> 00:37:45,830
the small coil on the test and the

754
00:37:43,010 --> 00:37:47,120
transistor that switches this coil and

755
00:37:45,830 --> 00:37:50,509
you can see that the

756
00:37:47,120 --> 00:37:53,180
is the flight back voltage is higher

757
00:37:50,510 --> 00:37:58,250
than the initial pulse and this is the

758
00:37:53,180 --> 00:38:00,319
the power supply on the coil the the

759
00:37:58,250 --> 00:38:02,360
next question is do you think that

760
00:38:00,320 --> 00:38:05,540
circuit will work that that kind of

761
00:38:02,360 --> 00:38:09,370
diode will work for that circuit well

762
00:38:05,540 --> 00:38:14,029
for that you have to ask some experts or

763
00:38:09,370 --> 00:38:17,690
some assistant for research to tell you

764
00:38:14,030 --> 00:38:21,110
how the diode actually works and the

765
00:38:17,690 --> 00:38:24,800
best one is to find someone who knows

766
00:38:21,110 --> 00:38:28,490
the nature so before finding suitable

767
00:38:24,800 --> 00:38:31,540
diodes you have to learn how it works in

768
00:38:28,490 --> 00:38:34,189
the so called forward recovery voltage

769
00:38:31,540 --> 00:38:37,460
because that's what we actually do we

770
00:38:34,190 --> 00:38:39,500
apply voltage in the reverse bias to the

771
00:38:37,460 --> 00:38:43,820
diode and then we go back and into the

772
00:38:39,500 --> 00:38:45,530
conductive mode so how does the diet

773
00:38:43,820 --> 00:38:49,040
work and also you have to think about

774
00:38:45,530 --> 00:38:52,810
the diet that is that can withstand very

775
00:38:49,040 --> 00:38:56,660
high voltage and reasonably high current

776
00:38:52,810 --> 00:38:59,480
so the natural principle of the diode

777
00:38:56,660 --> 00:39:02,270
operation can be explained in four

778
00:38:59,480 --> 00:39:04,520
pictures so first you put the diode

779
00:39:02,270 --> 00:39:09,230
under stress applying high reverse

780
00:39:04,520 --> 00:39:13,040
voltage C then once the voltage goes to

781
00:39:09,230 --> 00:39:18,740
zero its get relaxed what happens next

782
00:39:13,040 --> 00:39:23,300
to the diode well the next diode goes

783
00:39:18,740 --> 00:39:27,189
into sleep mode before and after certain

784
00:39:23,300 --> 00:39:27,190
time it is ready to operate

785
00:39:28,060 --> 00:39:34,100
well the question is how long the diode

786
00:39:31,010 --> 00:39:36,860
is going to sleep well for average

787
00:39:34,100 --> 00:39:40,960
rectifying diode that's about 100

788
00:39:36,860 --> 00:39:44,360
nanoseconds but if we look at our pulse

789
00:39:40,960 --> 00:39:46,730
this is 10 nanometer per division the

790
00:39:44,360 --> 00:39:50,210
whole pulse will end in 10 nanosecond

791
00:39:46,730 --> 00:39:52,960
time that means it's very difficult to

792
00:39:50,210 --> 00:39:55,790
find such a diode so I had to look into

793
00:39:52,960 --> 00:39:58,720
so-called super fast rectifying diodes

794
00:39:55,790 --> 00:40:00,980
and also ultra fast rectifier diodes

795
00:39:58,720 --> 00:40:04,399
most of them alone

796
00:40:00,980 --> 00:40:06,440
devices this relatively low current so

797
00:40:04,400 --> 00:40:09,650
the best one I managed to find out these

798
00:40:06,440 --> 00:40:12,260
devices but even them they cannot go to

799
00:40:09,650 --> 00:40:16,790
very high voltage except the last one it

800
00:40:12,260 --> 00:40:18,440
can called 400 volts and another problem

801
00:40:16,790 --> 00:40:21,920
that I found is the manufacturers do not

802
00:40:18,440 --> 00:40:24,470
usually supply the parameter specify the

803
00:40:21,920 --> 00:40:26,390
parameter forward recovery voltage they

804
00:40:24,470 --> 00:40:28,850
usually specify only reverse recovery

805
00:40:26,390 --> 00:40:32,379
voltage the opposite operation of a

806
00:40:28,850 --> 00:40:35,029
diode from conductive state into

807
00:40:32,380 --> 00:40:36,770
blocking state because that's what

808
00:40:35,030 --> 00:40:40,520
important for switching power supplies

809
00:40:36,770 --> 00:40:46,509
and then out of these diodes the best

810
00:40:40,520 --> 00:40:51,109
one this DFL you 1400 as you can see

811
00:40:46,510 --> 00:40:53,840
it's it was active only after full

812
00:40:51,109 --> 00:40:56,930
nanoseconds so it's still the flyback

813
00:40:53,840 --> 00:40:59,900
voltage was about 150 volts so this is

814
00:40:56,930 --> 00:41:02,960
50 volt pulse and then originally it was

815
00:40:59,900 --> 00:41:08,780
going to 400 volts now it goes only to

816
00:41:02,960 --> 00:41:12,260
200 volts it's still not enough so next

817
00:41:08,780 --> 00:41:14,840
I looked at other types of the diodes

818
00:41:12,260 --> 00:41:17,000
because those dollars both PN Junction

819
00:41:14,840 --> 00:41:19,850
diodes and usually they are associated

820
00:41:17,000 --> 00:41:22,609
with the high recovery time because of

821
00:41:19,850 --> 00:41:24,740
the recombination so if you go for short

822
00:41:22,609 --> 00:41:26,480
key diodes which a primary carrier

823
00:41:24,740 --> 00:41:29,209
they're diodes they're supposed to be

824
00:41:26,480 --> 00:41:31,910
faster but again most of them are low

825
00:41:29,210 --> 00:41:35,240
voltage devices a very few can distant

826
00:41:31,910 --> 00:41:38,480
voltage about above 200 volts the best I

827
00:41:35,240 --> 00:41:41,660
found was the with these two and they

828
00:41:38,480 --> 00:41:45,170
had about three nanoseconds recovery

829
00:41:41,660 --> 00:41:48,529
time which is again only just enough to

830
00:41:45,170 --> 00:41:50,750
to put the reverse voltage to block a

831
00:41:48,530 --> 00:41:56,720
reversible reverse voltage at about 200

832
00:41:50,750 --> 00:41:59,750
volts and then I also looked at other

833
00:41:56,720 --> 00:42:02,990
semiconductor materials because silicon

834
00:41:59,750 --> 00:42:05,180
is not the only material available for

835
00:42:02,990 --> 00:42:09,618
diodes it's also Kali arsenicum Kali

836
00:42:05,180 --> 00:42:11,990
nitride silicon carbide gallium nitrate

837
00:42:09,619 --> 00:42:14,799
I wasn't able to find any because they

838
00:42:11,990 --> 00:42:17,019
were very rare galley arsenicum

839
00:42:14,799 --> 00:42:19,538
the low-voltage the only one I was able

840
00:42:17,019 --> 00:42:24,160
to find is this one it's 40 volt maximum

841
00:42:19,539 --> 00:42:26,589
a reverse voltage a silicon carbide

842
00:42:24,160 --> 00:42:31,178
quite promising high voltage high

843
00:42:26,589 --> 00:42:34,900
temperature fast rectifier diodes so I

844
00:42:31,179 --> 00:42:37,029
tested all of them and still you can see

845
00:42:34,900 --> 00:42:39,729
that the best time was about 3

846
00:42:37,029 --> 00:42:46,259
nanoseconds so still they're still not

847
00:42:39,729 --> 00:42:46,259
not very good and then I came across the

848
00:42:46,589 --> 00:42:53,679
the datasheet on in Fenian diode in in

849
00:42:51,640 --> 00:42:58,479
this petit for this particular diode

850
00:42:53,679 --> 00:43:00,999
datasheets says some marketing good news

851
00:42:58,479 --> 00:43:03,729
that it's revolutionary new material it

852
00:43:00,999 --> 00:43:07,868
it has no reverse recovery no forward

853
00:43:03,729 --> 00:43:13,390
recovery so that should be something

854
00:43:07,869 --> 00:43:16,289
that will solve our problem but then so

855
00:43:13,390 --> 00:43:22,719
the in the datasheet you find that this

856
00:43:16,289 --> 00:43:24,339
the the junction and charge is about 4

857
00:43:22,719 --> 00:43:26,880
nano coulombs so that that's the charge

858
00:43:24,339 --> 00:43:30,578
that is accumulated inside the diode and

859
00:43:26,880 --> 00:43:32,979
also it has a certain capacitance of the

860
00:43:30,579 --> 00:43:34,839
junction so obviously you have to remove

861
00:43:32,979 --> 00:43:38,649
that charge before the diode starts

862
00:43:34,839 --> 00:43:40,900
conducting and for Nana : is somewhat

863
00:43:38,650 --> 00:43:43,059
about 25 billions of electrons and

864
00:43:40,900 --> 00:43:45,429
that's enough to store 1 Giga bit of

865
00:43:43,059 --> 00:43:48,420
information in iPhone so it's obviously

866
00:43:45,429 --> 00:43:52,689
not something you can remove in no time

867
00:43:48,420 --> 00:43:54,999
so also what what is no time presumably

868
00:43:52,689 --> 00:43:59,739
selfie non-detectable but by modern

869
00:43:54,999 --> 00:44:04,209
oscilloscopes which can detect as short

870
00:43:59,739 --> 00:44:06,309
as 1 picosecond pulse and a change also

871
00:44:04,209 --> 00:44:08,919
any attempt to remove for another :

872
00:44:06,309 --> 00:44:10,989
within 1 picosecond will require very

873
00:44:08,920 --> 00:44:16,589
high current because the current is

874
00:44:10,989 --> 00:44:21,630
defined as the charge through room

875
00:44:16,589 --> 00:44:23,828
traveling per time and also silicon

876
00:44:21,630 --> 00:44:26,140
carbide diodes these are vertical

877
00:44:23,829 --> 00:44:27,849
devices with there's about 0.5

878
00:44:26,140 --> 00:44:28,509
millimeter working area so you have to

879
00:44:27,849 --> 00:44:31,540
remove there

880
00:44:28,510 --> 00:44:34,300
charge from the working area of the

881
00:44:31,540 --> 00:44:37,480
diode so any attempts to remove those

882
00:44:34,300 --> 00:44:40,000
electrons within distance of 0.5

883
00:44:37,480 --> 00:44:42,190
millimeter within 1 picosecond will

884
00:44:40,000 --> 00:44:46,840
require very high speed actually higher

885
00:44:42,190 --> 00:44:49,060
than the speed of light and also the

886
00:44:46,840 --> 00:44:51,850
diode doesn't have a zero capacitance so

887
00:44:49,060 --> 00:44:54,640
the you will have to recharge the the

888
00:44:51,850 --> 00:45:00,130
capacitance of the diode so definitely

889
00:44:54,640 --> 00:45:02,080
this magic devices worth looking at so I

890
00:45:00,130 --> 00:45:05,860
bought this device on from a distributor

891
00:45:02,080 --> 00:45:09,220
and I put it into test and as you

892
00:45:05,860 --> 00:45:12,490
imagine no magic has happened so I don't

893
00:45:09,220 --> 00:45:14,799
know who was right in those so-called

894
00:45:12,490 --> 00:45:17,890
final data sheets on those devices but

895
00:45:14,800 --> 00:45:20,590
the recovery time was close to other

896
00:45:17,890 --> 00:45:23,230
silicon carbide diodes about 3 to 4

897
00:45:20,590 --> 00:45:27,880
nanosecond time and still not good

898
00:45:23,230 --> 00:45:30,730
enough to to get completely rid of this

899
00:45:27,880 --> 00:45:33,510
fly back voltage so that means that the

900
00:45:30,730 --> 00:45:35,740
best approach to inject Fulton into

901
00:45:33,510 --> 00:45:39,730
devices usually using electromagnetic

902
00:45:35,740 --> 00:45:41,979
pulse is to actually use this pulse

903
00:45:39,730 --> 00:45:46,750
rather than trying to get rid of fear of

904
00:45:41,980 --> 00:45:50,350
it but there so in my experiments I was

905
00:45:46,750 --> 00:45:53,230
just relying on characterizing this the

906
00:45:50,350 --> 00:45:58,319
height of a length of this path rather

907
00:45:53,230 --> 00:45:58,320
than trying to to generate my own pulse

908
00:45:58,350 --> 00:46:04,930
so here are the results of the pulse

909
00:46:01,660 --> 00:46:07,330
bleaching so I was disrupting device

910
00:46:04,930 --> 00:46:10,149
separation to cause some folds so I

911
00:46:07,330 --> 00:46:13,750
tested both single supply devices and

912
00:46:10,150 --> 00:46:18,100
dual supply devices as in power

913
00:46:13,750 --> 00:46:20,620
bleaching and both single and dual

914
00:46:18,100 --> 00:46:23,170
supply devices behaved equally because

915
00:46:20,620 --> 00:46:25,960
they I was injecting fault directly into

916
00:46:23,170 --> 00:46:28,450
the device so it doesn't matter whether

917
00:46:25,960 --> 00:46:30,370
they had led on cheap voltage regulator

918
00:46:28,450 --> 00:46:33,310
or they were supplied from the external

919
00:46:30,370 --> 00:46:37,240
power and he is the number of false

920
00:46:33,310 --> 00:46:39,670
depending on the height and height of

921
00:46:37,240 --> 00:46:42,189
the flyback pulse and the duration of

922
00:46:39,670 --> 00:46:44,650
the initial pulse and

923
00:46:42,190 --> 00:46:48,640
you can see that at high voltages the

924
00:46:44,650 --> 00:46:52,240
number of volts injected in flesh grows

925
00:46:48,640 --> 00:46:55,810
and the same is if those supply devices

926
00:46:52,240 --> 00:46:58,540
and that about to huh from 200 volts

927
00:46:55,810 --> 00:47:02,049
above and you can inject faults in the

928
00:46:58,540 --> 00:47:03,759
devices and also it's much easier to

929
00:47:02,050 --> 00:47:05,980
inject electromagnetic fault

930
00:47:03,760 --> 00:47:09,040
compared to power glitching because you

931
00:47:05,980 --> 00:47:13,480
don't have to cut any power supply lines

932
00:47:09,040 --> 00:47:15,550
it's easier to to get closer to the

933
00:47:13,480 --> 00:47:22,570
device and it can be done through the

934
00:47:15,550 --> 00:47:24,670
package and again do those attacks poles

935
00:47:22,570 --> 00:47:27,130
and a danger to the attacker well

936
00:47:24,670 --> 00:47:30,510
obviously if there are high voltages

937
00:47:27,130 --> 00:47:33,580
involved that could be dangerous and

938
00:47:30,510 --> 00:47:35,770
also the capacitors they they're

939
00:47:33,580 --> 00:47:37,569
dangerous because once charged they can

940
00:47:35,770 --> 00:47:40,780
hold voltage for a very long time you

941
00:47:37,570 --> 00:47:43,060
can charge the capacitor and then go for

942
00:47:40,780 --> 00:47:47,500
line to come back next day and the it

943
00:47:43,060 --> 00:47:49,890
will still have high voltage in it and

944
00:47:47,500 --> 00:47:52,840
also inductors are dangerous because if

945
00:47:49,890 --> 00:47:55,600
current through them is terminated than

946
00:47:52,840 --> 00:47:59,860
the voltage search to few hundreds of

947
00:47:55,600 --> 00:48:01,509
volts which is also dangerous also

948
00:47:59,860 --> 00:48:03,160
electromagnetic pulse can destroy

949
00:48:01,510 --> 00:48:05,980
semiconductor device is not only

950
00:48:03,160 --> 00:48:07,870
injecting fault but causing permanent

951
00:48:05,980 --> 00:48:10,840
damage so we have to be careful

952
00:48:07,870 --> 00:48:14,529
therefore the amplitude of the pulse you

953
00:48:10,840 --> 00:48:17,310
inject and there are some limitations

954
00:48:14,530 --> 00:48:21,430
and the improvements that could be

955
00:48:17,310 --> 00:48:24,640
implemented on attacking max10 devices

956
00:48:21,430 --> 00:48:26,290
so these devices are built a fifty-five

957
00:48:24,640 --> 00:48:29,009
nanometer process so it's very

958
00:48:26,290 --> 00:48:31,570
challenging for full reverse engineering

959
00:48:29,010 --> 00:48:34,050
however the flash memory cells are quite

960
00:48:31,570 --> 00:48:37,630
large and that means you can perform mam

961
00:48:34,050 --> 00:48:40,830
same invasive attacks and inject fault

962
00:48:37,630 --> 00:48:43,720
directly into the desired memory cells

963
00:48:40,830 --> 00:48:47,980
however the memory size is quite large

964
00:48:43,720 --> 00:48:50,620
it's several megabits so obviously if

965
00:48:47,980 --> 00:48:53,620
you want to effectively perform attacks

966
00:48:50,620 --> 00:48:55,540
you have to have a very efficient

967
00:48:53,620 --> 00:48:59,170
medicine and solutions for

968
00:48:55,540 --> 00:49:01,720
for those devices also because these

969
00:48:59,170 --> 00:49:04,420
devices use memory encryption they pose

970
00:49:01,720 --> 00:49:07,209
additional challenges for finding keys

971
00:49:04,420 --> 00:49:10,540
and in finding decryption algorithms

972
00:49:07,210 --> 00:49:14,380
because not only they use the encryption

973
00:49:10,540 --> 00:49:18,970
but also they use some obscurity some

974
00:49:14,380 --> 00:49:20,770
permutations in the key bits and also

975
00:49:18,970 --> 00:49:23,529
the lack of documentation on those

976
00:49:20,770 --> 00:49:25,359
devices making them quite challenging to

977
00:49:23,530 --> 00:49:29,790
perform the attacks and then especially

978
00:49:25,359 --> 00:49:32,770
reverse engineering so for future work

979
00:49:29,790 --> 00:49:34,750
is obviously more research needed for

980
00:49:32,770 --> 00:49:37,119
successful non-invasive attacks because

981
00:49:34,750 --> 00:49:39,180
these attacks are the most dangerous for

982
00:49:37,119 --> 00:49:44,920
the devices they can be easily

983
00:49:39,180 --> 00:49:47,649
reproduced by many attackers however the

984
00:49:44,920 --> 00:49:49,750
power analysis is unlikely to help with

985
00:49:47,650 --> 00:49:52,510
data extraction from the flash memory it

986
00:49:49,750 --> 00:49:54,910
can help with key extraction but still

987
00:49:52,510 --> 00:49:57,340
you have to get the the data out which

988
00:49:54,910 --> 00:49:59,890
is more challenging compared to other

989
00:49:57,340 --> 00:50:01,600
fpga devices with external flash storage

990
00:49:59,890 --> 00:50:05,049
because once you've got the key you can

991
00:50:01,600 --> 00:50:07,480
decrypt the the bit stream but with one

992
00:50:05,050 --> 00:50:10,150
chip memory you also have to get the

993
00:50:07,480 --> 00:50:13,030
access to the memory and if power

994
00:50:10,150 --> 00:50:16,300
bleaching the it will require by that

995
00:50:13,030 --> 00:50:18,130
Union to to bypass the security fuses

996
00:50:16,300 --> 00:50:20,560
and the same applies with

997
00:50:18,130 --> 00:50:23,260
electromagnetic fault injection because

998
00:50:20,560 --> 00:50:24,910
not only you have to change the contents

999
00:50:23,260 --> 00:50:30,160
of the memory you have to change that at

1000
00:50:24,910 --> 00:50:31,980
the right time and also in terms of the

1001
00:50:30,160 --> 00:50:33,970
research into hardware security

1002
00:50:31,980 --> 00:50:36,070
collaboration with the industry always

1003
00:50:33,970 --> 00:50:39,339
helped because it can bring new ideas

1004
00:50:36,070 --> 00:50:42,750
and could help in testing new methods

1005
00:50:39,340 --> 00:50:45,010
because the funding is essential but it

1006
00:50:42,750 --> 00:50:47,500
proper funding it could be possible to

1007
00:50:45,010 --> 00:50:52,000
go beyond state of the art and develop

1008
00:50:47,500 --> 00:50:54,430
something new and also work in the areas

1009
00:50:52,000 --> 00:50:56,650
of new methods for directing a memory

1010
00:50:54,430 --> 00:50:59,109
extraction because if you have the

1011
00:50:56,650 --> 00:51:01,690
device that stores the keys and the data

1012
00:50:59,109 --> 00:51:04,240
in the flash memory and if you can

1013
00:51:01,690 --> 00:51:06,160
somehow in which the memories if

1014
00:51:04,240 --> 00:51:08,270
electron microscope or some modified

1015
00:51:06,160 --> 00:51:11,118
elect electron microscopy methods

1016
00:51:08,270 --> 00:51:13,310
then you can easily extract the keys and

1017
00:51:11,119 --> 00:51:14,690
they then extract the countenance of the

1018
00:51:13,310 --> 00:51:16,759
memory then decrypt it

1019
00:51:14,690 --> 00:51:19,910
but obviously more research and

1020
00:51:16,760 --> 00:51:22,490
development is needed because once you

1021
00:51:19,910 --> 00:51:25,129
come across deep submicron devices like

1022
00:51:22,490 --> 00:51:28,700
55 nanometers or even 40 nanometers you

1023
00:51:25,130 --> 00:51:33,230
need more advanced methods and also the

1024
00:51:28,700 --> 00:51:36,319
research paper on this attack methods

1025
00:51:33,230 --> 00:51:38,660
I'm planing to to make available online

1026
00:51:36,320 --> 00:51:41,589
by the end of September and you can

1027
00:51:38,660 --> 00:51:47,000
always look at my home page for the

1028
00:51:41,589 --> 00:51:49,099
latest news so to conclude so int'l

1029
00:51:47,000 --> 00:51:52,310
max10 fpga s can be attacked of

1030
00:51:49,099 --> 00:51:53,810
different methods as i demonstrated the

1031
00:51:52,310 --> 00:51:56,450
question is is this really a problem

1032
00:51:53,810 --> 00:51:59,690
because the device was not certified for

1033
00:51:56,450 --> 00:52:02,509
high level of security it might affect

1034
00:51:59,690 --> 00:52:04,700
some customers but for most of them they

1035
00:52:02,510 --> 00:52:08,270
might be okay with just having

1036
00:52:04,700 --> 00:52:10,189
protection on off the memory that is

1037
00:52:08,270 --> 00:52:13,970
stored on the chip not in the external

1038
00:52:10,190 --> 00:52:16,280
memory and it's not always true that the

1039
00:52:13,970 --> 00:52:19,669
latest devices on the market have the

1040
00:52:16,280 --> 00:52:21,230
best hardware security features because

1041
00:52:19,670 --> 00:52:24,430
you never know how security was

1042
00:52:21,230 --> 00:52:26,720
implemented by the manufacturer and

1043
00:52:24,430 --> 00:52:30,020
there are many interesting target

1044
00:52:26,720 --> 00:52:32,598
targets for security research but most

1045
00:52:30,020 --> 00:52:36,589
importantly what you have to learn from

1046
00:52:32,599 --> 00:52:39,770
my talk is that the be careful deflates

1047
00:52:36,589 --> 00:52:44,450
chemicals capacitors and inductors and

1048
00:52:39,770 --> 00:52:47,259
because they can bite yeah thank you I

1049
00:52:44,450 --> 00:52:47,259
hope you enjoy it

1050
00:52:48,350 --> 00:52:56,029
I think you've time for one or two

1051
00:52:52,520 --> 00:52:59,540
questions said do you wanna comment a

1052
00:52:56,030 --> 00:53:03,950
little bit on the weaknesses that you

1053
00:52:59,540 --> 00:53:08,540
found by by those new undocumented JTAG

1054
00:53:03,950 --> 00:53:12,379
commands no as I mentioned I tried them

1055
00:53:08,540 --> 00:53:14,480
all and three they didn't help so I

1056
00:53:12,380 --> 00:53:18,650
tried them in kin combinations with

1057
00:53:14,480 --> 00:53:22,040
other memory accesses that the normal

1058
00:53:18,650 --> 00:53:25,490
memory read out with JTAC and then by

1059
00:53:22,040 --> 00:53:28,009
issuing those commands if the various

1060
00:53:25,490 --> 00:53:30,350
data they didn't affect the they read

1061
00:53:28,010 --> 00:53:32,660
out process so the d diffuses the

1062
00:53:30,350 --> 00:53:38,390
security fuses with but still doing

1063
00:53:32,660 --> 00:53:40,430
their job so it might require my reverse

1064
00:53:38,390 --> 00:53:43,609
engineering of the G attack logic to

1065
00:53:40,430 --> 00:53:45,609
actually figure out how to to use those

1066
00:53:43,610 --> 00:53:51,350
commands oh maybe there are other

1067
00:53:45,610 --> 00:53:53,690
disguise commands that help thank you

1068
00:53:51,350 --> 00:53:55,130
can you say something about the fuses

1069
00:53:53,690 --> 00:53:57,590
that you came across to lock the device

1070
00:53:55,130 --> 00:53:59,960
what type of use is the wire and did you

1071
00:53:57,590 --> 00:54:07,000
try to sort of maybe circumvent those

1072
00:53:59,960 --> 00:54:10,550
fuses at all yes I go back to the UNAM

1073
00:54:07,000 --> 00:54:16,250
they've diffuses in the very beginning I

1074
00:54:10,550 --> 00:54:24,340
mentioned that the the way they store

1075
00:54:16,250 --> 00:54:24,340
the fuse is to go a long way

1076
00:54:32,269 --> 00:54:39,868
yeah here so when you activate the fuse

1077
00:54:38,039 --> 00:54:42,119
that you change the contents of the

1078
00:54:39,869 --> 00:54:44,249
memory in the system area and you see

1079
00:54:42,119 --> 00:54:47,190
that four verify protects fuse they they

1080
00:54:44,249 --> 00:54:49,019
right this sequence of four bytes so for

1081
00:54:47,190 --> 00:54:51,180
different fuses they the sequence is

1082
00:54:49,019 --> 00:54:53,669
different if you combine fuses they they

1083
00:54:51,180 --> 00:54:56,749
both will be written but what happens

1084
00:54:53,670 --> 00:55:00,299
next that when when device is boot the

1085
00:54:56,749 --> 00:55:02,488
some kind of the internal state machine

1086
00:55:00,299 --> 00:55:05,099
logic reads out this this memory

1087
00:55:02,489 --> 00:55:08,309
location if it finds this sequence of

1088
00:55:05,099 --> 00:55:11,190
bytes it activates the fuse if any bits

1089
00:55:08,309 --> 00:55:13,410
in this sequence is incorrect then the

1090
00:55:11,190 --> 00:55:15,299
fuse won't be activated so in order to

1091
00:55:13,410 --> 00:55:17,879
inject the fault what we need to do is

1092
00:55:15,299 --> 00:55:24,269
to change any bit in those sequences and

1093
00:55:17,880 --> 00:55:25,199
then the fuse will be deactivated yes I

1094
00:55:24,269 --> 00:55:28,229
inject the fault

1095
00:55:25,199 --> 00:55:35,839
during the time when the then the boot

1096
00:55:28,229 --> 00:55:38,160
logic reads this memory location hello

1097
00:55:35,839 --> 00:55:41,308
thank you for sharing this amazing

1098
00:55:38,160 --> 00:55:45,058
research with us I have a question about

1099
00:55:41,309 --> 00:55:47,819
the the your work process and the faults

1100
00:55:45,059 --> 00:55:50,219
that you detect you gave us some figures

1101
00:55:47,819 --> 00:55:53,819
about the number of faults according to

1102
00:55:50,219 --> 00:55:55,739
the pulse shape and so on and what are

1103
00:55:53,819 --> 00:55:57,808
the faults are talking about what do you

1104
00:55:55,739 --> 00:56:01,019
measure and what do you consider as a

1105
00:55:57,809 --> 00:56:03,930
fault in your setup so I was reading the

1106
00:56:01,019 --> 00:56:07,558
whole memory through the JTAG so I was

1107
00:56:03,930 --> 00:56:11,819
these are faults that I acted he into

1108
00:56:07,559 --> 00:56:13,529
the flash memory of the configuration so

1109
00:56:11,819 --> 00:56:16,890
they don't chip configuration flash

1110
00:56:13,529 --> 00:56:19,109
memory so that the whole memory was

1111
00:56:16,890 --> 00:56:21,328
unprotected and then I was able to read

1112
00:56:19,109 --> 00:56:23,819
out the the contents of the memory and I

1113
00:56:21,329 --> 00:56:25,619
was comparing they are the original

1114
00:56:23,819 --> 00:56:28,319
image with the image I read from the

1115
00:56:25,619 --> 00:56:38,309
chip and that this the number of faults

1116
00:56:28,319 --> 00:56:41,339
in E in this readout it's in the flesh

1117
00:56:38,309 --> 00:56:44,069
in in the whole configuration flesh

1118
00:56:41,339 --> 00:56:45,970
which is about two to mega between a

1119
00:56:44,069 --> 00:56:53,450
half megabit

1120
00:56:45,970 --> 00:56:55,459
formerly no they're not permanently they

1121
00:56:53,450 --> 00:56:58,129
only present where they're because the

1122
00:56:55,460 --> 00:57:00,560
fault was injected during the the the

1123
00:56:58,130 --> 00:57:04,160
access time to the flesh once you remove

1124
00:57:00,560 --> 00:57:08,540
the default you can read the memories

1125
00:57:04,160 --> 00:57:12,290
without any errors we've run out of time

1126
00:57:08,540 --> 00:57:13,009
so I think other questions can be taken

1127
00:57:12,290 --> 00:57:15,950
off the stage

1128
00:57:13,010 --> 00:57:17,750
and we have a 25-minute te coffee break

1129
00:57:15,950 --> 00:57:20,259
we'll see you guys after that thank you

1130
00:57:17,750 --> 00:57:20,260
doctor second

