1
00:00:03,890 --> 00:00:11,490
hi soul assets I'm Brian I break things

2
00:00:07,830 --> 00:00:14,460
and I'm actually here today for two very

3
00:00:11,490 --> 00:00:16,890
basic reasons number one is I had the

4
00:00:14,460 --> 00:00:18,570
chance to do a few 10 tests on Laura

5
00:00:16,890 --> 00:00:19,460
base station something like four years

6
00:00:18,570 --> 00:00:22,140
ago

7
00:00:19,460 --> 00:00:24,390
sadly customer projects I'm not allowed

8
00:00:22,140 --> 00:00:27,179
to talk about and share any details but

9
00:00:24,390 --> 00:00:30,150
let's just say I wasn't very impressed

10
00:00:27,179 --> 00:00:34,440
by base stations using protocols like

11
00:00:30,150 --> 00:00:37,290
IEC 103 basically old SCADA protocols

12
00:00:34,440 --> 00:00:39,690
for transferring Laura data and you know

13
00:00:37,290 --> 00:00:43,260
stuff like using a USB stick with an

14
00:00:39,690 --> 00:00:45,720
update dot SH that is simply executed

15
00:00:43,260 --> 00:00:47,400
with root when you insert it you know

16
00:00:45,720 --> 00:00:49,080
stuff like that doesn't really give you

17
00:00:47,400 --> 00:00:54,150
a very good impression of Laura

18
00:00:49,080 --> 00:00:57,030
equipment and the other part is you know

19
00:00:54,150 --> 00:01:00,390
one of the main lines in the title day

20
00:00:57,030 --> 00:01:02,550
one with the TTI g8 six I'd simply the

21
00:01:00,390 --> 00:01:04,920
question of what are you actually able

22
00:01:02,550 --> 00:01:09,770
to achieve in a single day when testing

23
00:01:04,920 --> 00:01:11,390
a device and basis for that is you know

24
00:01:09,770 --> 00:01:13,949
single day

25
00:01:11,390 --> 00:01:16,859
security is expensive security is hard

26
00:01:13,950 --> 00:01:19,530
and those are you know these basic

27
00:01:16,859 --> 00:01:22,469
excuses that a lot of companies make why

28
00:01:19,530 --> 00:01:26,450
they can't test the devices and you know

29
00:01:22,469 --> 00:01:29,249
why they just roll out crap that's

30
00:01:26,450 --> 00:01:34,469
untested insecure and nobody ever had to

31
00:01:29,249 --> 00:01:36,149
look at so a very nice reference here is

32
00:01:34,469 --> 00:01:38,100
you know while the British Parliament is

33
00:01:36,149 --> 00:01:40,740
actually currently preparing the prequel

34
00:01:38,100 --> 00:01:42,089
to The Hunger Games other parts of the

35
00:01:40,740 --> 00:01:46,318
government are actually doing rather

36
00:01:42,090 --> 00:01:48,619
good jobs so the Department for Digital

37
00:01:46,319 --> 00:01:51,389
Culture Media and Sport actually

38
00:01:48,619 --> 00:01:55,770
published a code of practice for basic

39
00:01:51,389 --> 00:01:57,149
IOT devices last year sadly this code of

40
00:01:55,770 --> 00:01:59,789
practice got a little bit of bad

41
00:01:57,149 --> 00:02:02,069
feedback from the public simply due to

42
00:01:59,789 --> 00:02:05,189
the fact that many people called it too

43
00:02:02,069 --> 00:02:07,709
simple you know these are the basic 13

44
00:02:05,189 --> 00:02:13,239
requirements that they want stuff like

45
00:02:07,709 --> 00:02:15,520
no default passwords what do we have

46
00:02:13,240 --> 00:02:17,230
make systems resilient outage ensure

47
00:02:15,520 --> 00:02:20,050
that personal data is protected you know

48
00:02:17,230 --> 00:02:23,140
really the the very basics of IT

49
00:02:20,050 --> 00:02:25,240
security and in my opinion these are

50
00:02:23,140 --> 00:02:27,910
actually more important than quite a lot

51
00:02:25,240 --> 00:02:30,070
of let's say exploitation prevention and

52
00:02:27,910 --> 00:02:32,380
stuff like that simply due to the fact

53
00:02:30,070 --> 00:02:34,600
that with all this these IOT devices

54
00:02:32,380 --> 00:02:36,880
that we have out there it's more

55
00:02:34,600 --> 00:02:39,010
important to ensure that these devices

56
00:02:36,880 --> 00:02:41,380
aren't insecure rather than making sure

57
00:02:39,010 --> 00:02:43,750
that they're actually secure you know

58
00:02:41,380 --> 00:02:46,359
all these webcams and other IOT devices

59
00:02:43,750 --> 00:02:49,480
that were taken down by the Mirai

60
00:02:46,360 --> 00:02:52,480
botnets three four years ago they had

61
00:02:49,480 --> 00:02:55,329
telnet ports that were exposed by a UPnP

62
00:02:52,480 --> 00:02:57,130
into the internet that's not a question

63
00:02:55,330 --> 00:02:59,490
of being a vulnerability that's a

64
00:02:57,130 --> 00:03:02,950
question of being really stupid and

65
00:02:59,490 --> 00:03:07,090
breaking you know any anything that well

66
00:03:02,950 --> 00:03:09,760
everybody would know you know in I heard

67
00:03:07,090 --> 00:03:14,920
it from a lawyer a few years ago this

68
00:03:09,760 --> 00:03:17,320
term of what is gross negligence and his

69
00:03:14,920 --> 00:03:18,820
definition was gross negligence is if

70
00:03:17,320 --> 00:03:23,500
your grandmother would have known better

71
00:03:18,820 --> 00:03:25,390
and you know now 2019 a grandmother

72
00:03:23,500 --> 00:03:26,380
should know better than exposing Taylor

73
00:03:25,390 --> 00:03:27,820
to the Internet

74
00:03:26,380 --> 00:03:30,430
especially with hard-coded credentials

75
00:03:27,820 --> 00:03:32,049
and that's you know one of these

76
00:03:30,430 --> 00:03:36,760
motivations why I had a look at this

77
00:03:32,050 --> 00:03:39,910
device so to do this for my day was a

78
00:03:36,760 --> 00:03:41,109
basic security analysis look at

79
00:03:39,910 --> 00:03:44,140
everything that's there look at the

80
00:03:41,110 --> 00:03:46,150
interfaces record album look at all the

81
00:03:44,140 --> 00:03:48,420
parts but also questions like you know

82
00:03:46,150 --> 00:03:50,890
actually look at the menu lover device

83
00:03:48,420 --> 00:03:52,989
because it's always interesting if you

84
00:03:50,890 --> 00:03:55,570
have security measures that are

85
00:03:52,990 --> 00:03:57,310
available on a device but nobody tells

86
00:03:55,570 --> 00:04:00,730
you how to configure them so obviously

87
00:03:57,310 --> 00:04:02,890
nobody will ever do that and also stuff

88
00:04:00,730 --> 00:04:05,049
like if you have default credentials

89
00:04:02,890 --> 00:04:07,269
there are modern devices that enforce

90
00:04:05,050 --> 00:04:08,650
you so you change the credentials when

91
00:04:07,270 --> 00:04:11,350
setting the device are for the first

92
00:04:08,650 --> 00:04:12,730
time whereas others it's like you know

93
00:04:11,350 --> 00:04:18,640
keep the credentials and he'll still

94
00:04:12,730 --> 00:04:23,289
work so equipment that I used I'd say a

95
00:04:18,640 --> 00:04:25,419
basic hardware lab basically the same

96
00:04:23,290 --> 00:04:26,760
equipment as the guys at the hardware

97
00:04:25,419 --> 00:04:30,419
pole and

98
00:04:26,760 --> 00:04:31,860
the Hartman CTF have basically most of

99
00:04:30,420 --> 00:04:34,170
it is cheap stuff you know stuff like

100
00:04:31,860 --> 00:04:35,940
the logic analyzer you can go for an

101
00:04:34,170 --> 00:04:38,670
expensive saliyah they are really good

102
00:04:35,940 --> 00:04:41,010
they also have offers for researchers

103
00:04:38,670 --> 00:04:44,280
you know basically cutting the price in

104
00:04:41,010 --> 00:04:46,200
half if you don't do it for profits but

105
00:04:44,280 --> 00:04:48,330
otherwise take something like a ten

106
00:04:46,200 --> 00:04:50,909
dollar logic analyzer from China it will

107
00:04:48,330 --> 00:04:52,229
do the job so basic equipment to do

108
00:04:50,910 --> 00:04:54,810
something like this this may be a

109
00:04:52,230 --> 00:04:58,820
hundred two hundred dollars depending on

110
00:04:54,810 --> 00:05:02,210
how deep you want to go so the device

111
00:04:58,820 --> 00:05:06,930
it's this little white box

112
00:05:02,210 --> 00:05:10,409
they cost I think between 70 and 85

113
00:05:06,930 --> 00:05:13,230
euros depending on where you got them t

114
00:05:10,410 --> 00:05:15,990
TIG is the things industries Laura barn

115
00:05:13,230 --> 00:05:17,730
in door gateway they came out sometime

116
00:05:15,990 --> 00:05:19,680
beginning of this year on a Laura

117
00:05:17,730 --> 00:05:22,860
Developer Conference then they vanished

118
00:05:19,680 --> 00:05:26,220
from the markets then basically around

119
00:05:22,860 --> 00:05:28,590
the time of the CFP they were all over

120
00:05:26,220 --> 00:05:30,810
the websites of Rs online companies like

121
00:05:28,590 --> 00:05:32,640
that the basic distributors you know

122
00:05:30,810 --> 00:05:34,800
saying hey there will be available

123
00:05:32,640 --> 00:05:37,380
something like end of June beginning of

124
00:05:34,800 --> 00:05:39,120
July so I submitted said hey the device

125
00:05:37,380 --> 00:05:40,890
is coming out I'll have a look at it as

126
00:05:39,120 --> 00:05:43,470
soon as it's there I don't really want

127
00:05:40,890 --> 00:05:45,300
to work with the results then I got

128
00:05:43,470 --> 00:05:48,000
something like four or five emails

129
00:05:45,300 --> 00:05:50,370
shifting the release dates I think the

130
00:05:48,000 --> 00:05:52,320
latest was end of October so actually

131
00:05:50,370 --> 00:05:53,760
after the conference but luckily

132
00:05:52,320 --> 00:05:56,790
eventually they did actually start

133
00:05:53,760 --> 00:05:59,880
sending them out in August so there was

134
00:05:56,790 --> 00:06:01,950
a chance to have a look at it so

135
00:05:59,880 --> 00:06:04,950
interesting parts it's made for home

136
00:06:01,950 --> 00:06:06,750
users you know the idea is that somebody

137
00:06:04,950 --> 00:06:08,849
buys it hooks it up to their own Wi-Fi

138
00:06:06,750 --> 00:06:13,440
network and then starts routing Laura

139
00:06:08,850 --> 00:06:15,810
packages everywhere and it's I think the

140
00:06:13,440 --> 00:06:19,560
first space station that uses semtex new

141
00:06:15,810 --> 00:06:21,960
basic station concept so they set up a

142
00:06:19,560 --> 00:06:25,350
new set of protocols update mechanism

143
00:06:21,960 --> 00:06:29,640
strength transport mechanisms for

144
00:06:25,350 --> 00:06:33,120
basically the whole lore Network so I

145
00:06:29,640 --> 00:06:37,979
hope most of you heard the term Laura

146
00:06:33,120 --> 00:06:40,289
bond or roller itself it's a concept for

147
00:06:37,980 --> 00:06:42,930
long-range radio communication with

148
00:06:40,289 --> 00:06:45,479
power meaning that quite a few of the

149
00:06:42,930 --> 00:06:47,069
Laura base stations will have a range of

150
00:06:45,479 --> 00:06:50,699
maybe something like 10 to 20 kilometers

151
00:06:47,069 --> 00:06:54,319
and are really intended for use with

152
00:06:50,699 --> 00:06:57,539
cheap sands as cheap as in well

153
00:06:54,319 --> 00:06:59,009
single-digit dollar areas and these

154
00:06:57,539 --> 00:07:00,688
devices will be able to run off

155
00:06:59,009 --> 00:07:02,520
batteries for months or years depending

156
00:07:00,689 --> 00:07:04,199
on how they're made

157
00:07:02,520 --> 00:07:06,990
there's been a few talks on the topic

158
00:07:04,199 --> 00:07:09,779
already mainly aimed at reverse

159
00:07:06,990 --> 00:07:11,729
engineering the actual law of fire due

160
00:07:09,779 --> 00:07:14,129
to the fact that the law of hide ship is

161
00:07:11,729 --> 00:07:16,438
actually closed source meaning what you

162
00:07:14,129 --> 00:07:18,389
do is you buy the the laura module

163
00:07:16,439 --> 00:07:20,699
insert into your device and it just does

164
00:07:18,389 --> 00:07:22,709
what it does which obviously the

165
00:07:20,699 --> 00:07:24,059
security community didn't really like so

166
00:07:22,709 --> 00:07:26,779
they started breaking it and had a

167
00:07:24,059 --> 00:07:26,779
deeper look at it

168
00:07:27,240 --> 00:07:33,749
so first steps the device runs from us

169
00:07:30,509 --> 00:07:36,229
PC so I thought hey USB interface going

170
00:07:33,749 --> 00:07:40,860
to be fun so the USB interface was dead

171
00:07:36,229 --> 00:07:43,740
it only uses it for power you use the

172
00:07:40,860 --> 00:07:46,080
setup button it goes into Wi-Fi access

173
00:07:43,740 --> 00:07:49,919
point mode then you connect to the

174
00:07:46,080 --> 00:07:52,979
network it actually has a unique Wi-Fi

175
00:07:49,919 --> 00:07:55,529
passwords for wpa2 that is printed onto

176
00:07:52,979 --> 00:07:57,539
the device so it's not so it doesn't

177
00:07:55,529 --> 00:07:59,849
look as if it was derived from the MAC

178
00:07:57,539 --> 00:08:04,649
address or anything so not really big

179
00:07:59,849 --> 00:08:08,909
chance for drive-by attacks when you

180
00:08:04,649 --> 00:08:11,369
look at it you've got a little bit of

181
00:08:08,909 --> 00:08:15,509
information on the device which looked a

182
00:08:11,369 --> 00:08:18,330
little bit sad I'm not really a big fan

183
00:08:15,509 --> 00:08:22,669
of productive devices that has something

184
00:08:18,330 --> 00:08:25,430
like this in the version name debug and

185
00:08:22,669 --> 00:08:27,448
especially the VMware bit date of

186
00:08:25,430 --> 00:08:29,490
December 2018

187
00:08:27,449 --> 00:08:31,409
you know you'd expect that if you've got

188
00:08:29,490 --> 00:08:34,289
a device like this that was published

189
00:08:31,409 --> 00:08:36,929
during a developer conference which was

190
00:08:34,289 --> 00:08:38,698
I think in February 2019

191
00:08:36,929 --> 00:08:41,159
that there'd be feedback from developers

192
00:08:38,698 --> 00:08:42,958
and date then you know bring something

193
00:08:41,159 --> 00:08:45,930
back into cm where do some optimizations

194
00:08:42,958 --> 00:08:48,000
and change stuff but obviously they

195
00:08:45,930 --> 00:08:51,329
didn't manage to write a single femur

196
00:08:48,000 --> 00:08:53,199
update between July and well last

197
00:08:51,329 --> 00:08:58,479
December

198
00:08:53,199 --> 00:09:01,719
a little bit sad the basic interface

199
00:08:58,480 --> 00:09:05,079
that we have is already on the previous

200
00:09:01,720 --> 00:09:06,639
slide so you see all the the Wi-Fi

201
00:09:05,079 --> 00:09:10,439
networks that are around here you can do

202
00:09:06,639 --> 00:09:10,439
basic configuration set up a few things

203
00:09:10,649 --> 00:09:16,959
it's all done by well simple Jason

204
00:09:15,040 --> 00:09:19,990
information or Jason probable

205
00:09:16,959 --> 00:09:21,729
information comes out of the device the

206
00:09:19,990 --> 00:09:26,139
only input field that you actually have

207
00:09:21,730 --> 00:09:28,029
is the the add button which opens the

208
00:09:26,139 --> 00:09:29,470
dialog to as a new Wi-Fi network then

209
00:09:28,029 --> 00:09:32,050
you can enter the name of a Wi-Fi

210
00:09:29,470 --> 00:09:33,910
network and the password so that's

211
00:09:32,050 --> 00:09:37,750
basically the the whole attack service

212
00:09:33,910 --> 00:09:41,560
that you have which sounds a little bit

213
00:09:37,750 --> 00:09:43,149
boring but still fails a little bit so

214
00:09:41,560 --> 00:09:46,569
they actually don't really have any

215
00:09:43,149 --> 00:09:48,430
input validation in the bssid meaning

216
00:09:46,569 --> 00:09:51,310
that also if you go in and you actually

217
00:09:48,430 --> 00:09:54,579
set up a Wi-Fi network with the xs/s in

218
00:09:51,310 --> 00:09:57,219
the bssid and broadcast it the device

219
00:09:54,579 --> 00:09:59,829
will fall for it so you know from the

220
00:09:57,220 --> 00:10:06,129
basic input validation they failed at

221
00:09:59,829 --> 00:10:08,079
least a little bit port scan point

222
00:10:06,129 --> 00:10:11,050
number one it's a very stupid idea to

223
00:10:08,079 --> 00:10:13,269
port scan an ESP because they really

224
00:10:11,050 --> 00:10:15,430
don't like it and you have to again very

225
00:10:13,269 --> 00:10:19,209
slowly but it will still crush no matter

226
00:10:15,430 --> 00:10:22,388
how slow you are this basically is the

227
00:10:19,209 --> 00:10:23,949
part that depending on how many ports

228
00:10:22,389 --> 00:10:25,420
are open how many services are listening

229
00:10:23,949 --> 00:10:27,939
you might not be able to fit into a

230
00:10:25,420 --> 00:10:31,120
single day simply because of crashing

231
00:10:27,939 --> 00:10:33,550
the device too often turns out the

232
00:10:31,120 --> 00:10:37,050
configuration interface is well cheap

233
00:10:33,550 --> 00:10:40,439
and simple it's only got pod 80 yatin so

234
00:10:37,050 --> 00:10:44,849
not a problem at all

235
00:10:40,439 --> 00:10:49,029
then we have the basic station concepts

236
00:10:44,850 --> 00:10:50,949
so I said it's a completely new concept

237
00:10:49,029 --> 00:10:55,000
for configuring these Laura base

238
00:10:50,949 --> 00:10:57,609
stations before from the devices that

239
00:10:55,000 --> 00:10:59,559
are pen tested quite a lot of the stuff

240
00:10:57,610 --> 00:11:01,839
was actually configured via SSH and

241
00:10:59,559 --> 00:11:04,179
configuration files meaning somebody

242
00:11:01,839 --> 00:11:06,400
actually touch the device configure it

243
00:11:04,179 --> 00:11:08,920
and then the payloads contour the

244
00:11:06,400 --> 00:11:11,199
telecommunication went out via old grade

245
00:11:08,920 --> 00:11:15,819
our protocols which never is a good idea

246
00:11:11,200 --> 00:11:18,610
nowadays so zem take basically developed

247
00:11:15,820 --> 00:11:23,320
this protocol being based on Jason using

248
00:11:18,610 --> 00:11:27,670
HTTP or other web services and drew this

249
00:11:23,320 --> 00:11:32,080
little well sketch of a basic station so

250
00:11:27,670 --> 00:11:34,990
we have eventually the a cop server

251
00:11:32,080 --> 00:11:36,730
which is there for configuration we have

252
00:11:34,990 --> 00:11:39,520
the LNS service which is there for the

253
00:11:36,730 --> 00:11:41,350
actual payload data and the part that

254
00:11:39,520 --> 00:11:43,960
I've got lying here is the part on the

255
00:11:41,350 --> 00:11:46,240
left here which is actually the the base

256
00:11:43,960 --> 00:11:50,770
station with an SPI interface to the

257
00:11:46,240 --> 00:11:53,290
Laura concentrate on so the first

258
00:11:50,770 --> 00:11:56,380
protocol that we have cups not the

259
00:11:53,290 --> 00:11:58,770
printer protocol is actually the

260
00:11:56,380 --> 00:12:02,650
configuration update server

261
00:11:58,770 --> 00:12:04,540
Jason base it's used to fetch basically

262
00:12:02,650 --> 00:12:06,910
all configuration that the base station

263
00:12:04,540 --> 00:12:09,880
would need so when you unpack one of

264
00:12:06,910 --> 00:12:13,480
these there's a hard code its fallback

265
00:12:09,880 --> 00:12:17,290
server encoded in there which is a web

266
00:12:13,480 --> 00:12:21,330
service by samtech themselves so the

267
00:12:17,290 --> 00:12:24,550
device will call home will transmit it's

268
00:12:21,330 --> 00:12:26,770
the MAC address the device ID the model

269
00:12:24,550 --> 00:12:29,560
and little bits of the internal

270
00:12:26,770 --> 00:12:31,480
configuration and then it just gets back

271
00:12:29,560 --> 00:12:34,479
a big JSON blob with all the necessary

272
00:12:31,480 --> 00:12:36,520
information that it needs so we can

273
00:12:34,480 --> 00:12:39,060
already see that there is some sort of

274
00:12:36,520 --> 00:12:41,620
credentials that are being transmitted

275
00:12:39,060 --> 00:12:46,540
they actually is a signature for the

276
00:12:41,620 --> 00:12:48,730
update so let it do the homework basic

277
00:12:46,540 --> 00:12:50,290
length information which obviously makes

278
00:12:48,730 --> 00:12:52,630
you know above all the flaws and stuff

279
00:12:50,290 --> 00:12:54,550
like that a little bit harder they

280
00:12:52,630 --> 00:12:57,520
actually thought about what the update

281
00:12:54,550 --> 00:13:00,430
package would look like and the

282
00:12:57,520 --> 00:13:02,620
interesting parts then are the the cups

283
00:13:00,430 --> 00:13:04,449
you are I saw the next server that the

284
00:13:02,620 --> 00:13:08,470
device will connect you to fetch update

285
00:13:04,450 --> 00:13:13,260
information and the TC URI which is the

286
00:13:08,470 --> 00:13:13,260
the URI for the actual payload server

287
00:13:13,830 --> 00:13:20,139
which then is cop security

288
00:13:16,960 --> 00:13:22,609
authentication they have four options

289
00:13:20,139 --> 00:13:26,359
sadly the yet again is an option for no

290
00:13:22,609 --> 00:13:29,299
authentication my promise stuff like

291
00:13:26,359 --> 00:13:31,249
that is my experience from let's say

292
00:13:29,299 --> 00:13:33,470
large corporate networks always this

293
00:13:31,249 --> 00:13:35,419
when they setup a certain system and

294
00:13:33,470 --> 00:13:37,459
there's an option for no authentication

295
00:13:35,419 --> 00:13:40,098
no encryption they will use it for

296
00:13:37,459 --> 00:13:42,919
debugging and then the whole system will

297
00:13:40,099 --> 00:13:44,059
work and at some point somebody will

298
00:13:42,919 --> 00:13:47,389
come by and say hey

299
00:13:44,059 --> 00:13:49,189
tomorrow's to go live date are you ready

300
00:13:47,389 --> 00:13:52,599
and they say yeah everything's working

301
00:13:49,189 --> 00:13:56,389
we've just got a switch on security

302
00:13:52,599 --> 00:13:58,069
which obviously you know never works so

303
00:13:56,389 --> 00:13:59,629
I can fully understand that there are

304
00:13:58,069 --> 00:14:02,868
always our options for no authentication

305
00:13:59,629 --> 00:14:05,239
no encryption but you know there's a

306
00:14:02,869 --> 00:14:08,629
certain risk of just offering this

307
00:14:05,239 --> 00:14:11,119
option the way then the authentication

308
00:14:08,629 --> 00:14:14,059
works is they've got configuration files

309
00:14:11,119 --> 00:14:16,159
on the filesystem which are the trust

310
00:14:14,059 --> 00:14:18,709
files which is basically a certificate

311
00:14:16,159 --> 00:14:23,809
which is used for the TLS server

312
00:14:18,709 --> 00:14:27,649
authentication sorry then you have the

313
00:14:23,809 --> 00:14:30,559
option of having a client certificates

314
00:14:27,649 --> 00:14:32,629
which will be in a key file so they

315
00:14:30,559 --> 00:14:34,399
actually using the options of Optim SSL

316
00:14:32,629 --> 00:14:37,039
to properly secure the communication

317
00:14:34,399 --> 00:14:40,269
channel and then they have the option of

318
00:14:37,039 --> 00:14:42,319
using an authentication token and

319
00:14:40,269 --> 00:14:47,029
definition they are is that you should

320
00:14:42,319 --> 00:14:51,709
have the text file which is filled with

321
00:14:47,029 --> 00:14:53,749
basic HTTP headers so the idea really is

322
00:14:51,709 --> 00:14:56,299
that you into this key file you write

323
00:14:53,749 --> 00:14:58,519
authorization space and then whatever

324
00:14:56,299 --> 00:15:02,259
static of the authorization talking that

325
00:14:58,519 --> 00:15:05,209
you use the slightly risky part of this

326
00:15:02,259 --> 00:15:07,309
in this device I didn't find a way to

327
00:15:05,209 --> 00:15:11,108
actually exploit it but the

328
00:15:07,309 --> 00:15:14,059
specification states these few lines

329
00:15:11,109 --> 00:15:15,709
each of Education Mode is configured by

330
00:15:14,059 --> 00:15:17,598
providing specific files with

331
00:15:15,709 --> 00:15:20,598
credentials being defined by three types

332
00:15:17,599 --> 00:15:22,489
of oils so the way things work is you

333
00:15:20,599 --> 00:15:24,889
don't really activate encryption or the

334
00:15:22,489 --> 00:15:28,309
protection mechanisms but simply by

335
00:15:24,889 --> 00:15:33,990
placing the certificate if occur there

336
00:15:28,309 --> 00:15:36,310
the device will find it and use it sorry

337
00:15:33,990 --> 00:15:38,829
meaning that if an attacker is actually

338
00:15:36,310 --> 00:15:42,399
able to delete a file which you know via

339
00:15:38,829 --> 00:15:44,589
various attack techniques can very often

340
00:15:42,399 --> 00:15:46,540
be possible the attacker might actually

341
00:15:44,589 --> 00:15:49,209
be able to disable all these

342
00:15:46,540 --> 00:15:50,349
authentication features which is you

343
00:15:49,209 --> 00:15:52,239
know if you have a proper configuration

344
00:15:50,350 --> 00:15:54,790
file that actually states you know use

345
00:15:52,240 --> 00:15:56,560
authentication if the key is missing

346
00:15:54,790 --> 00:15:59,050
then go into some sort of error States

347
00:15:56,560 --> 00:16:03,399
might have been a slightly better idea

348
00:15:59,050 --> 00:16:09,160
in this situation then we have the LNS

349
00:16:03,399 --> 00:16:13,060
protocol yet again completely JSON based

350
00:16:09,160 --> 00:16:16,540
you've got static paths that are served

351
00:16:13,060 --> 00:16:18,489
to on the LNS server yet again the base

352
00:16:16,540 --> 00:16:22,110
station goes in does its authentication

353
00:16:18,490 --> 00:16:24,639
says tells the device its serial number

354
00:16:22,110 --> 00:16:28,389
the MAC address and stuff like that and

355
00:16:24,639 --> 00:16:30,490
then the actual aura back and tells the

356
00:16:28,389 --> 00:16:34,839
base station where to connect to and

357
00:16:30,490 --> 00:16:37,089
where to send the payload data funnily

358
00:16:34,839 --> 00:16:41,290
enough they also added a feature for a

359
00:16:37,089 --> 00:16:44,079
remote shell sadly not enabled on the on

360
00:16:41,290 --> 00:16:46,209
the very cheap gateway that I had but

361
00:16:44,079 --> 00:16:48,339
most surely a very interesting research

362
00:16:46,209 --> 00:16:52,359
project for future base stations that

363
00:16:48,339 --> 00:16:56,290
come out using this project in general I

364
00:16:52,360 --> 00:16:57,730
said ping Jason it looks good they

365
00:16:56,290 --> 00:17:01,660
thought about the actual input

366
00:16:57,730 --> 00:17:05,380
information that they have but you've

367
00:17:01,660 --> 00:17:08,439
got quite a few rather complex JSON

368
00:17:05,380 --> 00:17:12,039
objects that go in and you know for me

369
00:17:08,439 --> 00:17:14,949
it's stuff like the this is the the

370
00:17:12,039 --> 00:17:17,049
radio configuration enable is a bool

371
00:17:14,949 --> 00:17:19,990
then you've got an if variable with an

372
00:17:17,049 --> 00:17:23,439
internet you know if you have variables

373
00:17:19,990 --> 00:17:25,630
like that somebody who will implement

374
00:17:23,439 --> 00:17:28,440
this this basic station will have the

375
00:17:25,630 --> 00:17:31,179
mistake of actually using data from the

376
00:17:28,440 --> 00:17:34,240
the Jason model and just pass it into

377
00:17:31,179 --> 00:17:36,100
some kind of command line so this simply

378
00:17:34,240 --> 00:17:37,690
is you know it makes sense they thought

379
00:17:36,100 --> 00:17:40,330
about how they do it they chose a good

380
00:17:37,690 --> 00:17:43,120
we're using Jason but there are certain

381
00:17:40,330 --> 00:17:44,320
risks in future implementations and you

382
00:17:43,120 --> 00:17:46,959
know that's very often the problem

383
00:17:44,320 --> 00:17:47,790
you've got one entity creating a

384
00:17:46,960 --> 00:17:49,380
protocol

385
00:17:47,790 --> 00:17:51,420
creating some kind of reference

386
00:17:49,380 --> 00:17:53,070
implementation which in certain

387
00:17:51,420 --> 00:17:55,260
situations can even be good and secure

388
00:17:53,070 --> 00:17:57,540
and then you've got other companies

389
00:17:55,260 --> 00:17:59,030
saying hey we can do it better they

390
00:17:57,540 --> 00:18:01,920
don't really understand the actual

391
00:17:59,030 --> 00:18:04,590
specifications and then run into quite a

392
00:18:01,920 --> 00:18:07,290
few traps and here the models are really

393
00:18:04,590 --> 00:18:11,189
so complex that there is a very big risk

394
00:18:07,290 --> 00:18:13,740
of doing something wrong this is the

395
00:18:11,190 --> 00:18:25,080
moment to jump over to a quick peek up

396
00:18:13,740 --> 00:18:40,260
file which we have down here so this is

397
00:18:25,080 --> 00:18:43,100
the the basic setup so the the base

398
00:18:40,260 --> 00:18:47,879
station comes up fetches an IP address

399
00:18:43,100 --> 00:18:51,149
initially connects to our jss MTC which

400
00:18:47,880 --> 00:18:53,300
is the the cup server then you can see

401
00:18:51,150 --> 00:18:56,790
that it's actually just a very short

402
00:18:53,300 --> 00:19:00,030
communication fetches the configuration

403
00:18:56,790 --> 00:19:02,460
data then goes back into DNS and

404
00:19:00,030 --> 00:19:05,370
connects to the things network which is

405
00:19:02,460 --> 00:19:07,980
the well basically the operator of the

406
00:19:05,370 --> 00:19:12,899
space stations then establishes the LNS

407
00:19:07,980 --> 00:19:14,820
connection and starts well transmitting

408
00:19:12,900 --> 00:19:17,820
data fetching configuration and

409
00:19:14,820 --> 00:19:19,889
potential updates the interesting thing

410
00:19:17,820 --> 00:19:24,179
here actually is that you see these

411
00:19:19,890 --> 00:19:26,820
these nice red lines actually the base

412
00:19:24,180 --> 00:19:29,580
stations the base station tries to keep

413
00:19:26,820 --> 00:19:32,250
the HTTP connection of them as long as

414
00:19:29,580 --> 00:19:33,960
possible at some point the backend

415
00:19:32,250 --> 00:19:36,090
server will say hey you know you've run

416
00:19:33,960 --> 00:19:38,580
into your timeouts kids the connection

417
00:19:36,090 --> 00:19:41,429
and the base station simply establishes

418
00:19:38,580 --> 00:19:43,050
a new channel you know where whereas in

419
00:19:41,430 --> 00:19:46,050
other protocols you've got proper

420
00:19:43,050 --> 00:19:48,000
implementations of polling and then you

421
00:19:46,050 --> 00:19:50,460
know you send out a request you keep the

422
00:19:48,000 --> 00:19:55,050
channel open as long as possible I think

423
00:19:50,460 --> 00:19:58,110
here the timeout is something like just

424
00:19:55,050 --> 00:20:00,330
under a minutes or in some situations I

425
00:19:58,110 --> 00:20:01,740
think it was about two minutes which

426
00:20:00,330 --> 00:20:05,070
obviously meaning you know establishing

427
00:20:01,740 --> 00:20:07,290
you SSL an HTTP connection every two

428
00:20:05,070 --> 00:20:10,649
minutes it's quite a lot of unnecessary

429
00:20:07,290 --> 00:20:12,270
traffic and unnecessarily load so there

430
00:20:10,650 --> 00:20:15,450
might be a little bit of optimization

431
00:20:12,270 --> 00:20:18,840
here yeah and then from there on the

432
00:20:15,450 --> 00:20:22,050
communication goes on as you can see the

433
00:20:18,840 --> 00:20:28,010
the basic device uses SSL on all

434
00:20:22,050 --> 00:20:28,010
channels so it's nicely encrypted

435
00:20:41,100 --> 00:20:45,990
hey that was a good trick I think I just

436
00:20:43,980 --> 00:20:55,460
carried my presentation I'll be back in

437
00:20:45,990 --> 00:21:00,809
a second so the next part then we'll be

438
00:20:55,460 --> 00:21:04,620
having a quick look at the actual SSL

439
00:21:00,809 --> 00:21:09,950
and the encrypted channels so luckily

440
00:21:04,620 --> 00:21:13,320
they did really go for proper encryption

441
00:21:09,950 --> 00:21:18,509
thus I went in did a little bit of

442
00:21:13,320 --> 00:21:33,840
traffic redirection try to get into the

443
00:21:18,509 --> 00:21:36,840
actual SSL channel which come back there

444
00:21:33,840 --> 00:21:39,928
luckily sadly depending on how you want

445
00:21:36,840 --> 00:21:43,678
to see it didn't work when actually

446
00:21:39,929 --> 00:21:46,919
looking at the serial console that we'll

447
00:21:43,679 --> 00:21:48,600
be getting to a little bit later you can

448
00:21:46,919 --> 00:21:51,659
actually see the information from ember

449
00:21:48,600 --> 00:21:53,668
TLS saying you know handshake failed so

450
00:21:51,659 --> 00:21:55,470
it's it's actually a device that has as

451
00:21:53,669 --> 00:21:57,779
I said implemented they're using it and

452
00:21:55,470 --> 00:22:01,080
it does actually function you know there

453
00:21:57,779 --> 00:22:03,029
are still quite a few of peyote devices

454
00:22:01,080 --> 00:22:05,120
out that do use encrypted channels but

455
00:22:03,029 --> 00:22:11,009
simply don't check the certificates and

456
00:22:05,120 --> 00:22:12,658
this applies both to the the cops

457
00:22:11,009 --> 00:22:15,899
channel which uses a self-signed

458
00:22:12,659 --> 00:22:18,120
certificate but also to the LNS channel

459
00:22:15,899 --> 00:22:20,549
which does actually use a malaysian crip

460
00:22:18,120 --> 00:22:25,559
certificates for the background

461
00:22:20,549 --> 00:22:27,480
communication port scan nothing open so

462
00:22:25,559 --> 00:22:30,840
this is the new port scan after having

463
00:22:27,480 --> 00:22:32,340
configured the device in client mode you

464
00:22:30,840 --> 00:22:34,529
know there's there are no configuration

465
00:22:32,340 --> 00:22:37,259
options on the device that can be done

466
00:22:34,529 --> 00:22:39,240
by the actual user so all further

467
00:22:37,259 --> 00:22:42,629
configuration comes in via the LNS

468
00:22:39,240 --> 00:22:46,289
channel through the ssl tunnel so quite

469
00:22:42,629 --> 00:22:51,480
a good approach now it's time for the

470
00:22:46,289 --> 00:22:54,230
quick teardown device plastic box pop of

471
00:22:51,480 --> 00:22:57,380
the two plastic covers you've got

472
00:22:54,230 --> 00:22:59,000
torque screws that keep it together then

473
00:22:57,380 --> 00:23:04,400
you've got a few more clips to remove

474
00:22:59,000 --> 00:23:08,270
and you're in so the the part on the

475
00:23:04,400 --> 00:23:09,950
right you can add a normal plug for the

476
00:23:08,270 --> 00:23:11,150
mains to the back and just put it into

477
00:23:09,950 --> 00:23:12,920
your normal power socket if you don't

478
00:23:11,150 --> 00:23:17,260
run it from us want to run it from usb

479
00:23:12,920 --> 00:23:22,400
and the other part is the actual logic

480
00:23:17,260 --> 00:23:25,100
asset based on the esp8266 which I think

481
00:23:22,400 --> 00:23:28,390
nowaday is mainly known from the Maker

482
00:23:25,100 --> 00:23:34,040
scene because they're dead sheep and

483
00:23:28,390 --> 00:23:36,440
from quite a few well really cheap Wi-Fi

484
00:23:34,040 --> 00:23:40,159
power sockets that usually don't really

485
00:23:36,440 --> 00:23:44,380
bring a lot of security with them it's

486
00:23:40,160 --> 00:23:44,380
easy to spot a you out header which is

487
00:23:44,980 --> 00:23:51,860
right here in the middle as said the USB

488
00:23:49,970 --> 00:23:53,870
interface was disabled so there wasn't a

489
00:23:51,860 --> 00:23:57,409
way of debugging via that at least

490
00:23:53,870 --> 00:23:59,959
initially and then on the back side we

491
00:23:57,410 --> 00:24:03,890
have the the actual Laura module based

492
00:23:59,960 --> 00:24:05,600
on the SX 1308 which I didn't have a

493
00:24:03,890 --> 00:24:07,490
closer look at simply you know I said

494
00:24:05,600 --> 00:24:10,010
it's a closed source

495
00:24:07,490 --> 00:24:14,240
phi and that's already been quite a bit

496
00:24:10,010 --> 00:24:18,770
of research on that so the bot that we

497
00:24:14,240 --> 00:24:21,170
have for mac flash chip we've got the

498
00:24:18,770 --> 00:24:23,240
NIGC pot explained us simply for the

499
00:24:21,170 --> 00:24:26,120
where the configuration settings and for

500
00:24:23,240 --> 00:24:28,910
the buttons Wi-Fi Atena on board the

501
00:24:26,120 --> 00:24:31,429
Laura antenna as a small metal antenna

502
00:24:28,910 --> 00:24:34,670
and interestingly there was actually a

503
00:24:31,430 --> 00:24:35,750
USB tu at adapter on there and you know

504
00:24:34,670 --> 00:24:38,180
it's strange if you've got a dead you

505
00:24:35,750 --> 00:24:40,580
are dead USB port but you still have

506
00:24:38,180 --> 00:24:42,770
this think the chips still cost

507
00:24:40,580 --> 00:24:46,970
something like just over 2 euros so it's

508
00:24:42,770 --> 00:24:50,030
not really that cheap art looking into

509
00:24:46,970 --> 00:24:54,890
that a little bit deeper no sorry you at

510
00:24:50,030 --> 00:24:56,510
first the RX pin is sadly down so

511
00:24:54,890 --> 00:24:59,410
there's no way of actually inputting

512
00:24:56,510 --> 00:24:59,410
information into there

513
00:25:00,390 --> 00:25:04,500
basically you have when it comes up

514
00:25:02,910 --> 00:25:05,820
you've got the whole system

515
00:25:04,500 --> 00:25:09,240
configuration you can see the

516
00:25:05,820 --> 00:25:11,549
certificate validation you see all the

517
00:25:09,240 --> 00:25:14,040
information of the the stored keys on

518
00:25:11,549 --> 00:25:15,750
there sadly they only tell you the

519
00:25:14,040 --> 00:25:18,000
signature of the keys they don't show

520
00:25:15,750 --> 00:25:19,980
you the actual content so yet again

521
00:25:18,000 --> 00:25:21,900
although it's a debug period it's not

522
00:25:19,980 --> 00:25:26,940
really the worst debug bill that there

523
00:25:21,900 --> 00:25:28,470
could be and yet it prints out basic

524
00:25:26,940 --> 00:25:30,480
status information you know every time

525
00:25:28,470 --> 00:25:33,000
it connects to the server when a

526
00:25:30,480 --> 00:25:35,460
transmit state gives you our SSI

527
00:25:33,000 --> 00:25:39,570
information on the radio interface and

528
00:25:35,460 --> 00:25:44,400
quite a lot of debug information so the

529
00:25:39,570 --> 00:25:47,520
USB trip I'm just calling a few mistakes

530
00:25:44,400 --> 00:25:50,640
so the USB chip is there it's properly

531
00:25:47,520 --> 00:25:54,450
connected they actually just had yeah

532
00:25:50,640 --> 00:25:56,250
two small mistakes on it so what they

533
00:25:54,450 --> 00:25:58,260
did was they've got a ground pin and

534
00:25:56,250 --> 00:25:59,240
there's a resistor on the ground pin

535
00:25:58,260 --> 00:26:01,740
that is missing

536
00:25:59,240 --> 00:26:04,500
meaning the chip can't power up duty

537
00:26:01,740 --> 00:26:06,270
lacking ground and a little piece of

538
00:26:04,500 --> 00:26:09,720
wire ground comes up and you can start

539
00:26:06,270 --> 00:26:10,918
and well it should work that's what I

540
00:26:09,720 --> 00:26:13,350
thought

541
00:26:10,919 --> 00:26:16,350
connected it the chip came up it powered

542
00:26:13,350 --> 00:26:19,110
up sadly still no connect no information

543
00:26:16,350 --> 00:26:22,490
on the USB interface then I had a little

544
00:26:19,110 --> 00:26:26,100
bit deep or had a further look there's a

545
00:26:22,490 --> 00:26:28,380
not reset pin meaning you've got to pull

546
00:26:26,100 --> 00:26:32,309
that pin up to VCC so that the chip

547
00:26:28,380 --> 00:26:34,590
actually works what they did was they

548
00:26:32,309 --> 00:26:37,559
had down here they've got a resistor

549
00:26:34,590 --> 00:26:40,280
this is the the reset line the resistors

550
00:26:37,559 --> 00:26:43,500
connected to ground with a 10k resistor

551
00:26:40,280 --> 00:26:47,879
there nicely is a footprint that goes up

552
00:26:43,500 --> 00:26:50,220
to VCC the datasheet recommends using a

553
00:26:47,880 --> 00:26:52,620
1k resistor for that connection but the

554
00:26:50,220 --> 00:26:54,240
10k work just as good you know take off

555
00:26:52,620 --> 00:26:56,580
the resistor replace it on the other

556
00:26:54,240 --> 00:26:59,669
spot pull it up to VCC and you've got

557
00:26:56,580 --> 00:27:02,399
debugging via USB which basically is the

558
00:26:59,669 --> 00:27:04,559
the well very quick and easy heck to do

559
00:27:02,400 --> 00:27:06,030
proper debugging on the device if you

560
00:27:04,559 --> 00:27:12,770
don't really want to have it open the

561
00:27:06,030 --> 00:27:12,770
whole time then we have the flash memory

562
00:27:13,389 --> 00:27:20,559
that was a very sad research time that I

563
00:27:17,320 --> 00:27:22,989
thought with a little bit so my usual

564
00:27:20,559 --> 00:27:26,349
approach with a spy flash memories uses

565
00:27:22,989 --> 00:27:28,629
I clip attach it use the logic analyzer

566
00:27:26,349 --> 00:27:31,509
to do complete spy trace and then you

567
00:27:28,629 --> 00:27:35,279
sniff from to reconstruct an actual

568
00:27:31,509 --> 00:27:38,259
image of the memory which always works

569
00:27:35,279 --> 00:27:39,999
in this case it didn't you know I was I

570
00:27:38,259 --> 00:27:42,669
was watching all the information on the

571
00:27:39,999 --> 00:27:46,570
logic analyzer everything worked

572
00:27:42,669 --> 00:27:50,289
I saw basic data reads but the device

573
00:27:46,570 --> 00:27:52,509
didn't come off anymore and this power

574
00:27:50,289 --> 00:27:57,609
led is simply slightly gleamed and that

575
00:27:52,509 --> 00:27:59,919
was sadly it so I hooked up the scope

576
00:27:57,609 --> 00:28:03,789
had another look gave it another shot

577
00:27:59,919 --> 00:28:06,579
and it sadly still didn't work so this

578
00:28:03,789 --> 00:28:08,589
is actually a situation that had no from

579
00:28:06,579 --> 00:28:12,428
quite a lot of these cheap Chinese logic

580
00:28:08,589 --> 00:28:14,168
analyzers with the logic analyzer when

581
00:28:12,429 --> 00:28:17,349
you read the data you usually want an

582
00:28:14,169 --> 00:28:19,239
infinite input resistance meaning that

583
00:28:17,349 --> 00:28:22,570
you don't draw any current from the

584
00:28:19,239 --> 00:28:24,309
device and usually from my experience

585
00:28:22,570 --> 00:28:27,549
the resistance from the Zelaya

586
00:28:24,309 --> 00:28:32,109
logic analyzers are big enough sadly in

587
00:28:27,549 --> 00:28:35,649
this case seemingly it wasn't luckily

588
00:28:32,109 --> 00:28:37,869
enough the esp8266 datasheet actually

589
00:28:35,649 --> 00:28:40,629
states that there supposed to be a 200

590
00:28:37,869 --> 00:28:44,289
our resistor in line with all the SPI

591
00:28:40,629 --> 00:28:46,809
pins so quick approach remove the

592
00:28:44,289 --> 00:28:49,029
resistor put in a piece of wire it still

593
00:28:46,809 --> 00:28:51,158
works meaning you've got a little bit of

594
00:28:49,029 --> 00:28:56,070
more current available and then actually

595
00:28:51,159 --> 00:29:02,229
sniffing the data line also works again

596
00:28:56,070 --> 00:29:06,489
that gave me a very nice trace well

597
00:29:02,229 --> 00:29:08,529
sadly the way the esp8266 works it

598
00:29:06,489 --> 00:29:10,739
actually runs the spy flashing what spy

599
00:29:08,529 --> 00:29:15,099
mode so it's not quite as frivolous

600
00:29:10,739 --> 00:29:17,559
normal spy said you at this point my

601
00:29:15,099 --> 00:29:20,049
quad spy decoder didn't really do the

602
00:29:17,559 --> 00:29:22,440
job I've still got some work on that to

603
00:29:20,049 --> 00:29:25,289
do and he finally published that script

604
00:29:22,440 --> 00:29:27,130
so I wasn't able to dump the firmware

605
00:29:25,289 --> 00:29:29,980
but we've got

606
00:29:27,130 --> 00:29:34,120
one very good thing hear them take

607
00:29:29,980 --> 00:29:36,910
actually published the basic C code that

608
00:29:34,120 --> 00:29:38,709
they have on github meaning instead of

609
00:29:36,910 --> 00:29:41,290
actually doing binary analysis we can do

610
00:29:38,710 --> 00:29:54,580
some source code analysis makes life

611
00:29:41,290 --> 00:29:59,620
easier for us in this situation so

612
00:29:54,580 --> 00:30:02,139
Marshall apps so we've got the basic C

613
00:29:59,620 --> 00:30:06,280
code for the base station they also

614
00:30:02,140 --> 00:30:08,680
published a set of Python files that

615
00:30:06,280 --> 00:30:11,920
will actually allow you to emulate the

616
00:30:08,680 --> 00:30:14,920
whole basic station backend so the cop

617
00:30:11,920 --> 00:30:16,720
server and DNS server meaning that for

618
00:30:14,920 --> 00:30:18,690
research purposes you can really set up

619
00:30:16,720 --> 00:30:21,400
the whole thing the proper fuzzing and

620
00:30:18,690 --> 00:30:23,410
you know you can also have a certain

621
00:30:21,400 --> 00:30:27,970
insight into how the libraries that you

622
00:30:23,410 --> 00:30:29,440
de call parsing in the backend work due

623
00:30:27,970 --> 00:30:31,620
to my approach that actually wanted to

624
00:30:29,440 --> 00:30:34,120
do most of the analysis in a single day

625
00:30:31,620 --> 00:30:35,669
it sadly was a bit too much code to

626
00:30:34,120 --> 00:30:39,820
actually read it all by hand

627
00:30:35,670 --> 00:30:43,090
so what I went for is the lame code

628
00:30:39,820 --> 00:30:46,689
analysis I used the cheap Python tool

629
00:30:43,090 --> 00:30:49,510
called floor finder which it doesn't do

630
00:30:46,690 --> 00:30:53,080
any magic it's it's basically a set of

631
00:30:49,510 --> 00:30:54,970
strings that it uses to well search the

632
00:30:53,080 --> 00:30:57,490
files with typical bad functions

633
00:30:54,970 --> 00:31:01,420
forbidden functions and potential

634
00:30:57,490 --> 00:31:05,280
insecure implementations on the right

635
00:31:01,420 --> 00:31:08,650
you can see some of the outputs then

636
00:31:05,280 --> 00:31:11,410
quite a lot of it yet again is manual

637
00:31:08,650 --> 00:31:12,910
work you know usually you've got this

638
00:31:11,410 --> 00:31:15,580
approach of saying something like string

639
00:31:12,910 --> 00:31:17,500
copy is fair to use the problem with

640
00:31:15,580 --> 00:31:19,360
string copy not necessary string copy

641
00:31:17,500 --> 00:31:21,310
itself but the people who are using it

642
00:31:19,360 --> 00:31:23,260
you know you need proper input

643
00:31:21,310 --> 00:31:26,470
validation before calling the actor

644
00:31:23,260 --> 00:31:28,960
string copy command flaw finder will

645
00:31:26,470 --> 00:31:32,520
only tell you string copy is you string

646
00:31:28,960 --> 00:31:34,930
copy is bad but isn't able to actually

647
00:31:32,520 --> 00:31:37,570
comprehend the lines of codes in front

648
00:31:34,930 --> 00:31:40,930
of it so that yet again is manual called

649
00:31:37,570 --> 00:31:43,149
analysis I think I had a menu

650
00:31:40,930 --> 00:31:45,040
look at something like 40 or 50 of the

651
00:31:43,150 --> 00:31:46,060
issues you know does to get a nice

652
00:31:45,040 --> 00:31:49,090
overview of it

653
00:31:46,060 --> 00:31:51,610
and it looks as if the developers did

654
00:31:49,090 --> 00:31:53,169
actually really do a good job there so

655
00:31:51,610 --> 00:31:55,750
whenever you've got a string copy or a

656
00:31:53,170 --> 00:31:58,090
mem copy that you actually validate the

657
00:31:55,750 --> 00:32:00,370
lengths of the input values make sure

658
00:31:58,090 --> 00:32:02,800
that the the output targets are long

659
00:32:00,370 --> 00:32:04,780
enough and I actually wasn't able to

660
00:32:02,800 --> 00:32:08,770
find a single buffer overflow they're

661
00:32:04,780 --> 00:32:13,570
set but yet again good for the project

662
00:32:08,770 --> 00:32:15,780
or for the product then slowly but

663
00:32:13,570 --> 00:32:18,220
surely coming to an end

664
00:32:15,780 --> 00:32:21,100
initially I talked about what the US

665
00:32:18,220 --> 00:32:25,240
government has put together so for the

666
00:32:21,100 --> 00:32:27,280
TT IG is excited this quick verdict no

667
00:32:25,240 --> 00:32:30,640
default passwords where there is the

668
00:32:27,280 --> 00:32:32,590
default password for the Wi-Fi but it's

669
00:32:30,640 --> 00:32:36,010
unique and actually that's the only way

670
00:32:32,590 --> 00:32:37,780
of you know telling the customer the the

671
00:32:36,010 --> 00:32:40,890
Wi-Fi password has to be hard-coded in

672
00:32:37,780 --> 00:32:44,290
some way so not really a big issue

673
00:32:40,890 --> 00:32:48,010
vulnerability disclosure policy no idea

674
00:32:44,290 --> 00:32:49,990
then look at it keep software updated

675
00:32:48,010 --> 00:32:52,420
they've got a mechanism for that so

676
00:32:49,990 --> 00:32:55,660
that's a good approach at least and the

677
00:32:52,420 --> 00:32:58,600
mechanism actually also is encrypted and

678
00:32:55,660 --> 00:33:03,880
they've got signatures for it securely

679
00:32:58,600 --> 00:33:06,969
store credentials where the one of the

680
00:33:03,880 --> 00:33:09,850
problems with the esp8266 in contrast to

681
00:33:06,970 --> 00:33:12,850
the ESP 32 is the fact that has

682
00:33:09,850 --> 00:33:14,560
absolutely no internal memory meaning

683
00:33:12,850 --> 00:33:17,439
that all information that you have has

684
00:33:14,560 --> 00:33:19,510
to be stored externally so even if the

685
00:33:17,440 --> 00:33:21,340
the flash trip was encrypted the

686
00:33:19,510 --> 00:33:24,640
encryption key would be lying exactly

687
00:33:21,340 --> 00:33:26,409
next to it so there's no really or no

688
00:33:24,640 --> 00:33:29,260
real and no proper way of actually

689
00:33:26,410 --> 00:33:30,640
protecting the data in there so will

690
00:33:29,260 --> 00:33:33,010
guess not

691
00:33:30,640 --> 00:33:35,770
communicating securely that's something

692
00:33:33,010 --> 00:33:39,280
that they do minimize export attack

693
00:33:35,770 --> 00:33:41,800
surface only the configuration port open

694
00:33:39,280 --> 00:33:43,930
in host mode or an access point mode and

695
00:33:41,800 --> 00:33:46,270
no configuration or no ports or Mao

696
00:33:43,930 --> 00:33:48,430
afterwards that's perfect

697
00:33:46,270 --> 00:33:51,850
into a software integrity they've got

698
00:33:48,430 --> 00:33:54,460
the mechanisms ensure that person that

699
00:33:51,850 --> 00:33:58,139
has protected hard to send this

700
00:33:54,460 --> 00:33:58,140
situation I didn't look at the back end

701
00:33:58,680 --> 00:34:04,810
resilience make systems resilient to

702
00:34:01,210 --> 00:34:07,000
outages was out of scope the telemetry

703
00:34:04,810 --> 00:34:09,759
data back end so I didn't have a look at

704
00:34:07,000 --> 00:34:12,850
it make it easy for customers to delete

705
00:34:09,760 --> 00:34:15,460
personal data the reset button on the

706
00:34:12,850 --> 00:34:19,179
device does actually white parts of the

707
00:34:15,460 --> 00:34:20,740
memory so that's a good approach whereas

708
00:34:19,179 --> 00:34:23,649
there are a few devices I think my

709
00:34:20,739 --> 00:34:26,679
favorite devices were a range of Cisco

710
00:34:23,650 --> 00:34:29,500
Soho routers where you actually when you

711
00:34:26,679 --> 00:34:31,839
went into the factory reset it simply

712
00:34:29,500 --> 00:34:34,210
resets the interface but left the

713
00:34:31,840 --> 00:34:35,800
credentials on the device so I know it

714
00:34:34,210 --> 00:34:38,409
basically had a Wi-Fi configuration

715
00:34:35,800 --> 00:34:41,410
under the Wi-Fi name but didn't delete

716
00:34:38,409 --> 00:34:44,920
that file so that at least looks

717
00:34:41,409 --> 00:34:48,790
different here installation maintenance

718
00:34:44,920 --> 00:34:51,790
are easy input data isn't yet validated

719
00:34:48,790 --> 00:34:54,310
perfectly you know stuff like the XSS

720
00:34:51,790 --> 00:34:55,150
xs/s fire the bssid isn't really the

721
00:34:54,310 --> 00:34:58,840
nicest things

722
00:34:55,150 --> 00:35:01,740
and I said parts of the protocol are so

723
00:34:58,840 --> 00:35:05,440
complex that they're actually hard to do

724
00:35:01,740 --> 00:35:07,509
so summary is the device isn't insecure

725
00:35:05,440 --> 00:35:09,370
you know not saying that it's a good

726
00:35:07,510 --> 00:35:12,090
device that it's properly done but at

727
00:35:09,370 --> 00:35:14,740
least it isn't broken which for many IT

728
00:35:12,090 --> 00:35:19,120
IOT devices should be a baseline that we

729
00:35:14,740 --> 00:35:21,220
actually have to apply configuration

730
00:35:19,120 --> 00:35:23,470
Wi-Fi is done nicely it shuts down after

731
00:35:21,220 --> 00:35:27,609
15 minutes so you don't have the

732
00:35:23,470 --> 00:35:29,770
situation of various can't remember the

733
00:35:27,610 --> 00:35:32,230
brand there was an IOT coffee machine in

734
00:35:29,770 --> 00:35:33,850
the UK a few years back that if you

735
00:35:32,230 --> 00:35:36,210
didn't configure it it basically left

736
00:35:33,850 --> 00:35:38,680
the configuration Wi-Fi open infinitely

737
00:35:36,210 --> 00:35:40,210
meaning that people going by were able

738
00:35:38,680 --> 00:35:45,040
to cook coffee within the guy's place

739
00:35:40,210 --> 00:35:47,380
which you know can be slightly risky the

740
00:35:45,040 --> 00:35:49,620
basic station protocol is nicely done

741
00:35:47,380 --> 00:35:52,810
they followed security best practices

742
00:35:49,620 --> 00:35:56,980
still parsing there's a little thing

743
00:35:52,810 --> 00:35:59,920
that they've got to optimize I honestly

744
00:35:56,980 --> 00:36:02,440
didn't do it all in a single day I sadly

745
00:35:59,920 --> 00:36:05,380
have a day job so basically this stuff

746
00:36:02,440 --> 00:36:06,970
at night and in my free time I'd say

747
00:36:05,380 --> 00:36:08,230
eventually I spent something like 10

748
00:36:06,970 --> 00:36:11,950
hours on the whole thing

749
00:36:08,230 --> 00:36:13,270
so you know that's ten hours of a

750
00:36:11,950 --> 00:36:15,009
security professional should be

751
00:36:13,270 --> 00:36:16,960
something that every company can afford

752
00:36:15,010 --> 00:36:20,530
when actually putting a device onto the

753
00:36:16,960 --> 00:36:22,690
market and as you as you've seen you

754
00:36:20,530 --> 00:36:25,270
know I didn't go really deep but at

755
00:36:22,690 --> 00:36:28,780
least I checked for all potential stupid

756
00:36:25,270 --> 00:36:31,960
mistakes and that's something that quite

757
00:36:28,780 --> 00:36:36,400
a few companies are lacking so with that

758
00:36:31,960 --> 00:36:38,349
the outlook I'll be fixing my quad spy

759
00:36:36,400 --> 00:36:40,420
decoder which is a nice Python script

760
00:36:38,349 --> 00:36:44,140
and I'm hoping to publish that in a few

761
00:36:40,420 --> 00:36:47,710
weeks I've got to give a bunch of other

762
00:36:44,140 --> 00:36:49,720
Yorty devices a similar run and I'd

763
00:36:47,710 --> 00:36:52,839
actually like to have some feedback on

764
00:36:49,720 --> 00:36:55,509
you know something like a basic security

765
00:36:52,839 --> 00:36:57,640
testing methodology a defined by of

766
00:36:55,510 --> 00:37:00,070
testing an IOT device inside something

767
00:36:57,640 --> 00:37:03,549
like 24 hours you know a proper

768
00:37:00,070 --> 00:37:05,260
checklist a defined test bench that

769
00:37:03,550 --> 00:37:07,750
simply makes it possible when a device

770
00:37:05,260 --> 00:37:09,820
comes onto the market throw it into the

771
00:37:07,750 --> 00:37:11,320
lab give it a quick spin and then at

772
00:37:09,820 --> 00:37:11,950
least be able to give it a thumbs-up or

773
00:37:11,320 --> 00:37:15,280
a thumbs-down

774
00:37:11,950 --> 00:37:18,220
you know similar to what the UK has done

775
00:37:15,280 --> 00:37:19,720
with these basic security policies maybe

776
00:37:18,220 --> 00:37:22,299
see if we can spread something like that

777
00:37:19,720 --> 00:37:25,089
within the EU or get it to other

778
00:37:22,300 --> 00:37:33,369
countries too with that thanks for your

779
00:37:25,089 --> 00:37:50,710
time and thanks who has the first

780
00:37:33,369 --> 00:37:52,510
question for Brian no questions a topic

781
00:37:50,710 --> 00:37:59,050
like thank you there's one hand coming

782
00:37:52,510 --> 00:38:04,569
up in the back hey thanks for your talk

783
00:37:59,050 --> 00:38:07,079
so I was wondering so IOT devices slowly

784
00:38:04,569 --> 00:38:10,180
they are also adding a former encryption

785
00:38:07,079 --> 00:38:14,050
meaning that it will be a lot more

786
00:38:10,180 --> 00:38:17,440
difficult to start with actually how do

787
00:38:14,050 --> 00:38:19,990
you look at it is it a good practice it

788
00:38:17,440 --> 00:38:23,200
always depends so I know from one pen

789
00:38:19,990 --> 00:38:25,540
test where basically one of their main

790
00:38:23,200 --> 00:38:27,879
assets were was the stuff that was

791
00:38:25,540 --> 00:38:29,680
thought on the internal memory so they

792
00:38:27,880 --> 00:38:33,520
encrypted everything but they actually

793
00:38:29,680 --> 00:38:35,259
wanted to save 10 cents so they used the

794
00:38:33,520 --> 00:38:37,420
NXT controller that didn't include any

795
00:38:35,260 --> 00:38:39,369
internal memory so they had the

796
00:38:37,420 --> 00:38:41,829
encryption key on the same memory of sin

797
00:38:39,369 --> 00:38:43,869
corrupted data so now there are

798
00:38:41,829 --> 00:38:48,099
companies going that direction but not

799
00:38:43,869 --> 00:38:50,440
doing it properly from my perspective it

800
00:38:48,099 --> 00:38:52,750
perspective it always highly depends on

801
00:38:50,440 --> 00:38:54,730
the one side we want the option to

802
00:38:52,750 --> 00:38:56,349
actually be able to audit stuff you know

803
00:38:54,730 --> 00:39:00,130
the the classical discussion between

804
00:38:56,349 --> 00:39:01,780
Android versus iOS you know Android we

805
00:39:00,130 --> 00:39:03,940
can look into it but it's so big that

806
00:39:01,780 --> 00:39:06,880
you know not a lot of people do it

807
00:39:03,940 --> 00:39:08,859
whereas iOS simply nobody can look into

808
00:39:06,880 --> 00:39:14,950
it and the ones that do we find loads of

809
00:39:08,859 --> 00:39:17,920
bugs so in my opinion it's important to

810
00:39:14,950 --> 00:39:20,460
do at least you the encryption for user

811
00:39:17,920 --> 00:39:24,069
data customer data and the actual assets

812
00:39:20,460 --> 00:39:26,829
you know quite a lot of IOT devices do

813
00:39:24,069 --> 00:39:29,380
create certain amounts of user profiles

814
00:39:26,829 --> 00:39:31,839
they obviously have to be encrypted in a

815
00:39:29,380 --> 00:39:33,609
secure way so that even you know this

816
00:39:31,839 --> 00:39:34,599
device if it doesn't work anymore it'll

817
00:39:33,609 --> 00:39:36,609
go into the dustbin

818
00:39:34,599 --> 00:39:38,319
with all the information that's on it

819
00:39:36,609 --> 00:39:41,170
because when it's broke I'm not able to

820
00:39:38,319 --> 00:39:43,089
wipe it so the device itself has to

821
00:39:41,170 --> 00:39:45,700
protect all custom assets that are on

822
00:39:43,089 --> 00:39:48,340
the device including potential

823
00:39:45,700 --> 00:39:50,980
my Wi-Fi credentials even when it's

824
00:39:48,340 --> 00:39:54,970
broken so for that part that's something

825
00:39:50,980 --> 00:39:59,710
that's really necessary with the other

826
00:39:54,970 --> 00:40:01,029
parts you know encrypted VMware I think

827
00:39:59,710 --> 00:40:03,880
most of the companies are basically

828
00:40:01,030 --> 00:40:06,180
doing it because it sounds good but not

829
00:40:03,880 --> 00:40:09,250
really because it's necessary and

830
00:40:06,180 --> 00:40:11,319
obviously we as a community always need

831
00:40:09,250 --> 00:40:14,830
the possibility to do certain amounts of

832
00:40:11,320 --> 00:40:20,860
audits so I think there will have to be

833
00:40:14,830 --> 00:40:22,200
a certain compromise then thanks a lot

834
00:40:20,860 --> 00:40:25,420
and I think enjoy lunch

835
00:40:22,200 --> 00:40:26,180
yeah it's lunch break yeah thank you

836
00:40:25,420 --> 00:40:29,410
Thanks

837
00:40:26,180 --> 00:40:29,410
[Applause]

