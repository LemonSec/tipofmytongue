1
00:00:03,410 --> 00:00:05,200
[Music]

2
00:00:05,200 --> 00:00:06,770
[Applause]

3
00:00:06,770 --> 00:00:08,029
[Music]

4
00:00:08,029 --> 00:00:11,179
[Applause]

5
00:00:12,799 --> 00:00:16,800
our next speaker is andrew zonenberg he

6
00:00:16,800 --> 00:00:20,000
has spoken in the past at hardware.io as

7
00:00:20,000 --> 00:00:22,240
well uh he's a principal security

8
00:00:22,240 --> 00:00:26,080
consultant at i o active and this talk

9
00:00:26,080 --> 00:00:28,480
is going to be extended into a workshop

10
00:00:28,480 --> 00:00:30,720
as well if you guys would uh

11
00:00:30,720 --> 00:00:32,159
like to participate it would be very

12
00:00:32,159 --> 00:00:34,640
nice uh so it's going to be boost your

13
00:00:34,640 --> 00:00:37,200
hardware reverse engineering skills with

14
00:00:37,200 --> 00:00:38,000
a

15
00:00:38,000 --> 00:00:40,879
glass cop client

16
00:00:40,879 --> 00:00:45,480
andrew uh over to you

17
00:00:47,280 --> 00:00:48,320
hello

18
00:00:48,320 --> 00:00:50,160
let me just get the screen share up give

19
00:00:50,160 --> 00:00:53,480
me one second

20
00:00:58,960 --> 00:01:01,440
okay

21
00:01:07,360 --> 00:01:09,680
yeah screen is visible all right yeah it

22
00:01:09,680 --> 00:01:11,920
just took me a second to get the uh

23
00:01:11,920 --> 00:01:14,240
right monitor selected all right so yes

24
00:01:14,240 --> 00:01:16,720
i'm andrew sonnenberg and i'm going to

25
00:01:16,720 --> 00:01:20,080
be talking about gel scope client

26
00:01:20,080 --> 00:01:22,640
so uh as antrik mentioned this talk has

27
00:01:22,640 --> 00:01:24,240
been extended into kind of a mini

28
00:01:24,240 --> 00:01:26,159
workshop so roughly we're looking at

29
00:01:26,159 --> 00:01:28,880
about half an hour of slides with more

30
00:01:28,880 --> 00:01:31,520
introductory background material about

31
00:01:31,520 --> 00:01:34,799
how the software is built how it's used

32
00:01:34,799 --> 00:01:38,079
and so on and then we'll go into half an

33
00:01:38,079 --> 00:01:40,000
hour or so we can run later since it's

34
00:01:40,000 --> 00:01:42,640
the last talk of the day

35
00:01:42,640 --> 00:01:45,040
of interactive demo

36
00:01:45,040 --> 00:01:47,840
i have two live demos on actual hardware

37
00:01:47,840 --> 00:01:50,320
in my lab that i'll do quickly first and

38
00:01:50,320 --> 00:01:51,520
then we'll switch to a bunch of

39
00:01:51,520 --> 00:01:53,520
pre-recorded data that is in the github

40
00:01:53,520 --> 00:01:55,600
repo that i linked in the chat earlier

41
00:01:55,600 --> 00:01:57,680
so if you want to play around with

42
00:01:57,680 --> 00:01:59,680
analyzing some of the same data as i'm

43
00:01:59,680 --> 00:02:01,280
going through it then you can follow

44
00:02:01,280 --> 00:02:03,600
along

45
00:02:03,600 --> 00:02:06,799
so a little bit of background i did my

46
00:02:06,799 --> 00:02:10,160
phd at rpi in 2015 uh

47
00:02:10,160 --> 00:02:12,239
focusing on system-on-chip architecture

48
00:02:12,239 --> 00:02:13,599
security

49
00:02:13,599 --> 00:02:15,280
operating systems and kind of the

50
00:02:15,280 --> 00:02:17,599
intersection of all of those i went to

51
00:02:17,599 --> 00:02:19,680
io active since then i've been doing

52
00:02:19,680 --> 00:02:22,239
primarily pen testing but a fair bit of

53
00:02:22,239 --> 00:02:24,160
research in the side as well

54
00:02:24,160 --> 00:02:26,239
uh interests outside of that have been

55
00:02:26,239 --> 00:02:28,800
more on the performance and deep

56
00:02:28,800 --> 00:02:31,360
embedded everything from silicon reverse

57
00:02:31,360 --> 00:02:34,080
engineering all the way up to

58
00:02:34,080 --> 00:02:37,280
supercomputing gpu fpga stuff

59
00:02:37,280 --> 00:02:40,640
optimization etc and so this software

60
00:02:40,640 --> 00:02:43,040
actually came out of a tool i developed

61
00:02:43,040 --> 00:02:45,680
early on in my thesis for debugging some

62
00:02:45,680 --> 00:02:49,280
of my projects back in 2011 so it's been

63
00:02:49,280 --> 00:02:51,680
going on for about a decade and uh only

64
00:02:51,680 --> 00:02:53,840
recently has it been fast enough and

65
00:02:53,840 --> 00:02:56,879
cleaned up enough to really be more of a

66
00:02:56,879 --> 00:02:59,280
public release

67
00:02:59,280 --> 00:03:02,239
also before we get too into things uh i

68
00:03:02,239 --> 00:03:05,040
am presenting on company time so i

69
00:03:05,040 --> 00:03:07,120
putting io actives logo on these slides

70
00:03:07,120 --> 00:03:09,280
this is not something we are selling as

71
00:03:09,280 --> 00:03:11,200
a product it's an open source tool i'm

72
00:03:11,200 --> 00:03:13,760
developing in my spare time i do however

73
00:03:13,760 --> 00:03:15,680
use it at work i've actually written a

74
00:03:15,680 --> 00:03:17,519
couple of protocol decodes for use on

75
00:03:17,519 --> 00:03:19,120
client engagements when i came across a

76
00:03:19,120 --> 00:03:21,200
protocol that we didn't have tooling for

77
00:03:21,200 --> 00:03:22,480
and so

78
00:03:22,480 --> 00:03:24,560
i find it useful at work and i'm hoping

79
00:03:24,560 --> 00:03:27,440
some of you will as well

80
00:03:27,519 --> 00:03:29,360
so uh just a quick screenshot before we

81
00:03:29,360 --> 00:03:31,519
get too into all of the details of

82
00:03:31,519 --> 00:03:34,959
architecture keep everybody excited

83
00:03:34,959 --> 00:03:36,799
so as i mentioned i've been working on

84
00:03:36,799 --> 00:03:39,120
this tool for quite a long time uh gel

85
00:03:39,120 --> 00:03:42,959
scope client i started in about 2017.

86
00:03:42,959 --> 00:03:45,440
it's a gpu accelerated complete

87
00:03:45,440 --> 00:03:48,799
front-end rewrite all of the ui code is

88
00:03:48,799 --> 00:03:51,680
new and is built on the same framework

89
00:03:51,680 --> 00:03:53,680
libscopal and lipscope protocols as the

90
00:03:53,680 --> 00:03:55,360
original scope client which never got

91
00:03:55,360 --> 00:03:56,799
released because it was never really

92
00:03:56,799 --> 00:03:58,080
stable or mature enough but it's all

93
00:03:58,080 --> 00:04:00,319
follow hard coded paths to directories

94
00:04:00,319 --> 00:04:02,480
on my local storage and all kinds of

95
00:04:02,480 --> 00:04:03,920
things like that and so it needed a

96
00:04:03,920 --> 00:04:05,519
complete rewrite anyway

97
00:04:05,519 --> 00:04:06,879
and so

98
00:04:06,879 --> 00:04:08,400
kind of the problems i'm trying to solve

99
00:04:08,400 --> 00:04:11,040
are test equipment remote control

100
00:04:11,040 --> 00:04:13,760
analysis of waveforms both live

101
00:04:13,760 --> 00:04:17,120
streaming as well as offline potentially

102
00:04:17,120 --> 00:04:19,759
integrating data from multiple sources

103
00:04:19,759 --> 00:04:22,400
and uh generally uh kind of the

104
00:04:22,400 --> 00:04:24,400
long-term vision is for jessica plunk to

105
00:04:24,400 --> 00:04:26,880
become the new radio equivalent for

106
00:04:26,880 --> 00:04:28,720
oscilloscopes so you know anytime you're

107
00:04:28,720 --> 00:04:30,160
doing sdr stuff it's kind of assumed

108
00:04:30,160 --> 00:04:31,360
you're going to be using something built

109
00:04:31,360 --> 00:04:33,759
on top of new radio as like the

110
00:04:33,759 --> 00:04:35,600
industry standard open source tool chain

111
00:04:35,600 --> 00:04:38,400
and so my goal is to make libscopal and

112
00:04:38,400 --> 00:04:41,120
lipscope protocols become the standard

113
00:04:41,120 --> 00:04:44,080
open source tooling for telescopes

114
00:04:44,080 --> 00:04:46,240
and so to support that gall it is

115
00:04:46,240 --> 00:04:48,639
permissively licensed three clause bsd

116
00:04:48,639 --> 00:04:51,280
specifically because i want to encourage

117
00:04:51,280 --> 00:04:54,160
vendors to integrate in both directions

118
00:04:54,160 --> 00:04:55,280
i would like vendors to be able to

119
00:04:55,280 --> 00:04:57,040
contribute drivers for their instruments

120
00:04:57,040 --> 00:04:58,880
i would like to potentially even have

121
00:04:58,880 --> 00:05:00,960
vendors start using libscopal-based

122
00:05:00,960 --> 00:05:02,639
tools officially as part of their

123
00:05:02,639 --> 00:05:05,199
official sdks and official user

124
00:05:05,199 --> 00:05:07,840
interfaces and so on

125
00:05:07,840 --> 00:05:10,479
so as far as timeline goes uh there has

126
00:05:10,479 --> 00:05:13,039
not yet been an official release we are

127
00:05:13,039 --> 00:05:15,039
pretty close to that uh there's a bit

128
00:05:15,039 --> 00:05:17,520
more work on documentation to do

129
00:05:17,520 --> 00:05:20,479
and just general polish fixing random

130
00:05:20,479 --> 00:05:22,320
crashes and things that aren't quite as

131
00:05:22,320 --> 00:05:24,800
intuitive in the ui as we would like so

132
00:05:24,800 --> 00:05:26,560
i'm aiming for that in the next month or

133
00:05:26,560 --> 00:05:28,960
two it's it's pretty close

134
00:05:28,960 --> 00:05:29,759
uh

135
00:05:29,759 --> 00:05:33,280
then version 0.2 is going to be end of

136
00:05:33,280 --> 00:05:35,680
this year into sometime early next year

137
00:05:35,680 --> 00:05:37,120
focus on that is going to kind of be

138
00:05:37,120 --> 00:05:39,520
taking off the half-baked things and

139
00:05:39,520 --> 00:05:40,960
finishing them so for example we have a

140
00:05:40,960 --> 00:05:42,720
bunch of instrument drivers that don't

141
00:05:42,720 --> 00:05:44,320
support all the trigger options the

142
00:05:44,320 --> 00:05:46,800
scope has or don't support digital

143
00:05:46,800 --> 00:05:49,039
channels or don't support the waveform

144
00:05:49,039 --> 00:05:50,400
generator a bunch of you know things

145
00:05:50,400 --> 00:05:52,320
that are ancillary functions that are

146
00:05:52,320 --> 00:05:53,759
nice to have but not critical to

147
00:05:53,759 --> 00:05:55,520
actually use the instrument for basic

148
00:05:55,520 --> 00:05:57,440
waveform capture and so a lot of these

149
00:05:57,440 --> 00:05:59,520
driver completion things are going to be

150
00:05:59,520 --> 00:06:02,000
pushed to version 0.2 uh we've also got

151
00:06:02,000 --> 00:06:03,199
a bunch of things where for example

152
00:06:03,199 --> 00:06:05,120
we've got a protocol decode that may not

153
00:06:05,120 --> 00:06:07,039
implement all of the particular corners

154
00:06:07,039 --> 00:06:08,880
of some protocol

155
00:06:08,880 --> 00:06:10,479
or maybe just doesn't do great

156
00:06:10,479 --> 00:06:12,560
verification it doesn't do a good job of

157
00:06:12,560 --> 00:06:15,199
detecting protocol violations when some

158
00:06:15,199 --> 00:06:18,400
data is not quite well formed and so on

159
00:06:18,400 --> 00:06:21,120
and sometime in that range maybe into

160
00:06:21,120 --> 00:06:22,960
some time later um

161
00:06:22,960 --> 00:06:25,680
i would also like to add mac os support

162
00:06:25,680 --> 00:06:28,479
that is not available right now uh for

163
00:06:28,479 --> 00:06:31,360
reasons that i'll get into in a bit

164
00:06:31,360 --> 00:06:34,639
so as far as target platforms uh kind of

165
00:06:34,639 --> 00:06:37,840
the first tier platform is linux just

166
00:06:37,840 --> 00:06:38,960
because that's what most of our

167
00:06:38,960 --> 00:06:42,000
developers are on uh i'm personally on

168
00:06:42,000 --> 00:06:44,160
debian we've got a bunch of people on

169
00:06:44,160 --> 00:06:46,800
arch fedora et cetera

170
00:06:46,800 --> 00:06:49,360
we have work in progress packaging for a

171
00:06:49,360 --> 00:06:50,800
couple of distros already and we're

172
00:06:50,800 --> 00:06:53,039
working on getting more uh i know at

173
00:06:53,039 --> 00:06:54,479
least the debian packages are in the

174
00:06:54,479 --> 00:06:56,479
process of being upstreamed and the

175
00:06:56,479 --> 00:06:58,560
others probably uh certainly it is our

176
00:06:58,560 --> 00:07:00,720
goal to get those upstream of the future

177
00:07:00,720 --> 00:07:03,599
uh we already have builds in the mingw

178
00:07:03,599 --> 00:07:06,720
repositories uh we have alpha releases

179
00:07:06,720 --> 00:07:09,280
of both portable binaries and msi

180
00:07:09,280 --> 00:07:11,039
installers on windows

181
00:07:11,039 --> 00:07:12,160
uh

182
00:07:12,160 --> 00:07:14,319
as far as target platforms right now

183
00:07:14,319 --> 00:07:16,800
it's only 64 but x86 there's a lot of

184
00:07:16,800 --> 00:07:20,080
hand-tuned avx optimizations and so on

185
00:07:20,080 --> 00:07:23,440
in the code at the moment uh so in order

186
00:07:23,440 --> 00:07:24,960
to get it to run on other platforms i

187
00:07:24,960 --> 00:07:27,039
mean they do have detections for runtime

188
00:07:27,039 --> 00:07:28,639
dispatch so we only use them on

189
00:07:28,639 --> 00:07:31,039
supported cpus but at compile time we're

190
00:07:31,039 --> 00:07:32,560
gonna need to do just a little bit of if

191
00:07:32,560 --> 00:07:34,319
deaths and so on in order to make it

192
00:07:34,319 --> 00:07:36,479
work on other platforms so that's still

193
00:07:36,479 --> 00:07:39,360
in progress um arm64 is gonna be the

194
00:07:39,360 --> 00:07:41,120
next platform we would like to get it to

195
00:07:41,120 --> 00:07:44,720
run on for example apple m1 and so on in

196
00:07:44,720 --> 00:07:47,360
the future so definitely uh arm 64 is

197
00:07:47,360 --> 00:07:49,360
coming it's not available yet

198
00:07:49,360 --> 00:07:50,479
uh

199
00:07:50,479 --> 00:07:52,720
as i mentioned it does not currently run

200
00:07:52,720 --> 00:07:55,120
on mac os the main reason for that is

201
00:07:55,120 --> 00:07:56,319
because

202
00:07:56,319 --> 00:07:58,160
apple decided that they don't like

203
00:07:58,160 --> 00:07:59,919
opengl even though it's supposed to be

204
00:07:59,919 --> 00:08:01,360
the industry standard cross-platform

205
00:08:01,360 --> 00:08:03,759
graphics api and so

206
00:08:03,759 --> 00:08:05,759
apple's opengl drivers are stuck on i

207
00:08:05,759 --> 00:08:08,400
think version 4.1 and we need 4.3 in

208
00:08:08,400 --> 00:08:10,879
order to get compute shaders and so

209
00:08:10,879 --> 00:08:12,960
basically the entire renderer which

210
00:08:12,960 --> 00:08:14,560
thankfully is not that much code but it

211
00:08:14,560 --> 00:08:16,560
is going to have to be rewritten and

212
00:08:16,560 --> 00:08:18,400
ported to something

213
00:08:18,400 --> 00:08:20,800
os x compatible in order to actually run

214
00:08:20,800 --> 00:08:23,280
on mac so we've got a couple of people

215
00:08:23,280 --> 00:08:25,199
with especially recent apple silicon

216
00:08:25,199 --> 00:08:27,120
hardware that are very interested and

217
00:08:27,120 --> 00:08:29,919
working on it but nothing usable yet

218
00:08:29,919 --> 00:08:32,080
um and also i know i saw in the chat

219
00:08:32,080 --> 00:08:34,080
earlier at least one person was asking

220
00:08:34,080 --> 00:08:36,799
about a pre-built vm as of now we don't

221
00:08:36,799 --> 00:08:39,039
have that the reason being that again

222
00:08:39,039 --> 00:08:42,159
opengl 4.3 is required and i have not

223
00:08:42,159 --> 00:08:45,120
seen any virtualized gpus that provide

224
00:08:45,120 --> 00:08:47,839
compute shaders in the emulated graphics

225
00:08:47,839 --> 00:08:50,399
card uh if you do have an actual

226
00:08:50,399 --> 00:08:53,040
physical gpu allocated to the vf via pci

227
00:08:53,040 --> 00:08:55,519
pass through sriv or so on i believe

228
00:08:55,519 --> 00:08:57,680
that'll work nobody's ever tried it but

229
00:08:57,680 --> 00:08:58,959
i have no reason to believe that will

230
00:08:58,959 --> 00:09:00,880
not work but certainly any of the

231
00:09:00,880 --> 00:09:02,480
conventional you know vmware virtual

232
00:09:02,480 --> 00:09:06,160
svga and so on are not going to work

233
00:09:06,160 --> 00:09:07,920
so next let's get into a little bit

234
00:09:07,920 --> 00:09:10,160
about the architecture of how the scope

235
00:09:10,160 --> 00:09:12,080
tile and gel scope client are built

236
00:09:12,080 --> 00:09:14,320
so gyroscope client is the front-end

237
00:09:14,320 --> 00:09:17,600
user interface the focus is on rendering

238
00:09:17,600 --> 00:09:20,560
and dialog boxes and basically just a

239
00:09:20,560 --> 00:09:22,160
nice graphical wrapper around the

240
00:09:22,160 --> 00:09:25,839
underlying c plus api then lipscope hal

241
00:09:25,839 --> 00:09:27,200
is the

242
00:09:27,200 --> 00:09:29,600
instrument driver layer that is in

243
00:09:29,600 --> 00:09:31,519
charge of taking

244
00:09:31,519 --> 00:09:34,320
all of the different proprietary

245
00:09:34,320 --> 00:09:38,720
usb protocols and sdks and uh skippy

246
00:09:38,720 --> 00:09:41,279
commands and so on and bridging that all

247
00:09:41,279 --> 00:09:44,640
out to a single unified c plus api so in

248
00:09:44,640 --> 00:09:46,320
gel scope client or lipscope protocols

249
00:09:46,320 --> 00:09:48,480
code you can just have a pointer to an

250
00:09:48,480 --> 00:09:50,640
oscilloscope object you can call arm

251
00:09:50,640 --> 00:09:53,200
trigger or acquire data and you don't

252
00:09:53,200 --> 00:09:54,800
care what the actual thing is done to

253
00:09:54,800 --> 00:09:56,399
the scope to do that arm

254
00:09:56,399 --> 00:09:59,200
then lipscope protocols is specifically

255
00:09:59,200 --> 00:10:02,480
the protocol decodes math functions dsp

256
00:10:02,480 --> 00:10:04,079
all the things that work on abstract

257
00:10:04,079 --> 00:10:05,360
waveforms and don't care where they came

258
00:10:05,360 --> 00:10:07,920
from and then we do also support custom

259
00:10:07,920 --> 00:10:10,160
plug-ins loaded at runtime plug-ins can

260
00:10:10,160 --> 00:10:12,240
provide uh instrument drivers they can

261
00:10:12,240 --> 00:10:15,040
provide transports they can provide

262
00:10:15,040 --> 00:10:17,279
anything for the filter graph there is

263
00:10:17,279 --> 00:10:19,200
not currently support for custom

264
00:10:19,200 --> 00:10:21,120
rendering plug-ins i would like to build

265
00:10:21,120 --> 00:10:24,079
that into the architecture in the future

266
00:10:24,079 --> 00:10:25,760
additionally it is also possible to

267
00:10:25,760 --> 00:10:28,240
write custom tooling in c plus plus or

268
00:10:28,240 --> 00:10:30,480
language listed plus bindings so that

269
00:10:30,480 --> 00:10:32,079
you can call into the libraries directly

270
00:10:32,079 --> 00:10:34,480
so you can write uh headless scripted

271
00:10:34,480 --> 00:10:36,800
test code that

272
00:10:36,800 --> 00:10:38,240
configures triggers on an instrument

273
00:10:38,240 --> 00:10:39,839
acquires a waveform does a protocol

274
00:10:39,839 --> 00:10:42,079
decode on and does say a pass fail test

275
00:10:42,079 --> 00:10:45,839
or does for example power analysis using

276
00:10:45,839 --> 00:10:48,240
a decoded uart as a trigger in order to

277
00:10:48,240 --> 00:10:49,920
determine when a particular power trace

278
00:10:49,920 --> 00:10:52,880
is of interest and so on um one warning

279
00:10:52,880 --> 00:10:55,120
if you decide to do this until the

280
00:10:55,120 --> 00:10:57,120
version 1.0 release which is still

281
00:10:57,120 --> 00:10:59,760
probably at least a year out there is no

282
00:10:59,760 --> 00:11:02,240
abi stability and so anytime the library

283
00:11:02,240 --> 00:11:04,240
is updated any

284
00:11:04,240 --> 00:11:06,160
custom tooling calling directly into

285
00:11:06,160 --> 00:11:08,079
libraries is going to need to recompile

286
00:11:08,079 --> 00:11:09,920
we are trying for but haven't made an

287
00:11:09,920 --> 00:11:12,079
official guarantee of api stability so

288
00:11:12,079 --> 00:11:13,680
if you recompile the code everything

289
00:11:13,680 --> 00:11:15,519
should work but there is not binary

290
00:11:15,519 --> 00:11:16,959
compatibility between lipscope power

291
00:11:16,959 --> 00:11:19,760
releases at the moment

292
00:11:19,760 --> 00:11:22,240
all right so next up is just kind of a

293
00:11:22,240 --> 00:11:24,399
quick overview of the data flow so we've

294
00:11:24,399 --> 00:11:27,120
got data coming in from one or more

295
00:11:27,120 --> 00:11:29,760
instruments uh you can load data from

296
00:11:29,760 --> 00:11:32,079
files you can create waveforms

297
00:11:32,079 --> 00:11:34,560
synthetically so synthesize a tone or a

298
00:11:34,560 --> 00:11:37,279
pseudo-random bit sequence etc uh then

299
00:11:37,279 --> 00:11:38,720
feed that into the filter graph which

300
00:11:38,720 --> 00:11:39,920
i'll talk about a little bit more later

301
00:11:39,920 --> 00:11:42,000
on and then finally the output of that

302
00:11:42,000 --> 00:11:44,560
is rendered

303
00:11:44,640 --> 00:11:48,320
and so the photograph is a pretty common

304
00:11:48,320 --> 00:11:49,920
dsp multimedia architecture if you've

305
00:11:49,920 --> 00:11:52,000
done anything with

306
00:11:52,000 --> 00:11:55,040
video processing or

307
00:11:55,040 --> 00:11:57,519
new radio or things like that uh you're

308
00:11:57,519 --> 00:11:59,360
probably familiar with photographs and

309
00:11:59,360 --> 00:12:01,760
so lipscope pals photograph architecture

310
00:12:01,760 --> 00:12:04,240
is no different uh you've just got a

311
00:12:04,240 --> 00:12:06,160
series of blocks in this case we've got

312
00:12:06,160 --> 00:12:07,600
two channels on the left only one of

313
00:12:07,600 --> 00:12:08,880
them is in use then we run through a

314
00:12:08,880 --> 00:12:11,200
bunch of processing blocks and then the

315
00:12:11,200 --> 00:12:13,200
outputs of some of them are displayed at

316
00:12:13,200 --> 00:12:15,120
the screen

317
00:12:15,120 --> 00:12:17,920
uh the photograph is using a custom

318
00:12:17,920 --> 00:12:19,839
thread scheduler so we actually take

319
00:12:19,839 --> 00:12:23,040
it's a directed basic graph of uh filter

320
00:12:23,040 --> 00:12:26,480
blocks uh the graph is then uh extracted

321
00:12:26,480 --> 00:12:29,279
for parallelism so any filters that

322
00:12:29,279 --> 00:12:31,279
don't depend on each other can execute

323
00:12:31,279 --> 00:12:33,279
in parallel we use openmp in order to

324
00:12:33,279 --> 00:12:35,440
evaluate the filter blocks in parallel

325
00:12:35,440 --> 00:12:37,440
and then the output of that is then set

326
00:12:37,440 --> 00:12:40,720
to the ui thread for display

327
00:12:40,880 --> 00:12:44,240
uh as far as file io goes the native uh

328
00:12:44,240 --> 00:12:46,560
file format is kind of like audacity if

329
00:12:46,560 --> 00:12:48,560
you're familiar with that there's a

330
00:12:48,560 --> 00:12:51,519
metadata file that in our case is yaml

331
00:12:51,519 --> 00:12:53,040
based that contains all the

332
00:12:53,040 --> 00:12:54,240
configuration about how the user

333
00:12:54,240 --> 00:12:55,600
interface is set up what channels are in

334
00:12:55,600 --> 00:12:57,519
the displays what filter graph box are

335
00:12:57,519 --> 00:12:59,519
what inputs go to where and so on and

336
00:12:59,519 --> 00:13:01,279
then there's a data directory that

337
00:13:01,279 --> 00:13:04,160
contains all of the raw waveform samples

338
00:13:04,160 --> 00:13:07,440
we also can support importing waveforms

339
00:13:07,440 --> 00:13:09,279
from agilent keysight and ride gold

340
00:13:09,279 --> 00:13:10,720
binaries they're it's pretty much the

341
00:13:10,720 --> 00:13:12,959
same file format uh

342
00:13:12,959 --> 00:13:15,839
you can import csv files and in the case

343
00:13:15,839 --> 00:13:17,920
of digital waveforms we actually can

344
00:13:17,920 --> 00:13:19,760
parse the metadata into header comments

345
00:13:19,760 --> 00:13:21,200
you can get the serial number the time

346
00:13:21,200 --> 00:13:24,240
stamp and so on in the csv file then

347
00:13:24,240 --> 00:13:26,720
value change dump and wav files

348
00:13:26,720 --> 00:13:29,279
right now the only export format is csv

349
00:13:29,279 --> 00:13:30,720
we are working on adding more so i'd

350
00:13:30,720 --> 00:13:32,720
like to be able to export to vcd and so

351
00:13:32,720 --> 00:13:34,079
on i would like to be able to support

352
00:13:34,079 --> 00:13:35,440
more vendor formats as well

353
00:13:35,440 --> 00:13:36,880
bi-directionally so you can push

354
00:13:36,880 --> 00:13:38,880
something from say the output of a just

355
00:13:38,880 --> 00:13:40,880
compliant waveform to an instrument or

356
00:13:40,880 --> 00:13:45,279
pull in say a lacroix.trc file and so on

357
00:13:45,279 --> 00:13:46,399
so we're always working on adding more

358
00:13:46,399 --> 00:13:47,680
file formats

359
00:13:47,680 --> 00:13:49,680
uh next we're going to get to the list

360
00:13:49,680 --> 00:13:51,360
of supported hardware i'm just going to

361
00:13:51,360 --> 00:13:53,519
go through all of the equipment vendors

362
00:13:53,519 --> 00:13:54,880
alphabetically

363
00:13:54,880 --> 00:13:56,240
i am going to gloss over this pretty

364
00:13:56,240 --> 00:13:57,440
quickly the slides are going to be

365
00:13:57,440 --> 00:13:59,839
posted afterwards so i'm not going to go

366
00:13:59,839 --> 00:14:01,279
into great detail on each instrument

367
00:14:01,279 --> 00:14:02,959
family uh

368
00:14:02,959 --> 00:14:05,120
vigilant sent me free hardware it's

369
00:14:05,120 --> 00:14:07,519
sitting on my lab bench and i've been

370
00:14:07,519 --> 00:14:09,120
too busy getting ready for this talk and

371
00:14:09,120 --> 00:14:11,120
fixing other bugs in order to actually

372
00:14:11,120 --> 00:14:13,440
write a driver for it so the hardware is

373
00:14:13,440 --> 00:14:16,560
here it's scheduled for support but not

374
00:14:16,560 --> 00:14:18,399
implemented quite yet

375
00:14:18,399 --> 00:14:20,560
um keysight and asylum we've got pretty

376
00:14:20,560 --> 00:14:22,800
good support for a bunch of their lower

377
00:14:22,800 --> 00:14:25,279
end entry-level models i am still trying

378
00:14:25,279 --> 00:14:27,279
to get my hands on some of the higher

379
00:14:27,279 --> 00:14:29,600
end current gen keysight stuff

380
00:14:29,600 --> 00:14:31,519
uxr maybe something a little bit less

381
00:14:31,519 --> 00:14:33,760
nice than that so uh i'm working on

382
00:14:33,760 --> 00:14:35,279
getting a demo scope and as soon as i

383
00:14:35,279 --> 00:14:37,120
get one uh we will have better driver

384
00:14:37,120 --> 00:14:39,040
support it may work on the newer stuff

385
00:14:39,040 --> 00:14:40,639
now it's just never been tested because

386
00:14:40,639 --> 00:14:42,000
none of our developers have gotten our

387
00:14:42,000 --> 00:14:43,199
hands on any

388
00:14:43,199 --> 00:14:44,480
um

389
00:14:44,480 --> 00:14:46,399
pico is one of our better supported

390
00:14:46,399 --> 00:14:48,480
platforms at the moment for the higher

391
00:14:48,480 --> 00:14:51,279
end uh the 6000 e series is fairly

392
00:14:51,279 --> 00:14:53,440
complete uh we still have to support

393
00:14:53,440 --> 00:14:54,800
some of the more advanced triggers

394
00:14:54,800 --> 00:14:57,519
functioning director and so on um i'm

395
00:14:57,519 --> 00:14:59,120
actually going to be showing some stuff

396
00:14:59,120 --> 00:15:01,600
on the 6000 series at the end of the

397
00:15:01,600 --> 00:15:04,000
talk uh we are working on adding support

398
00:15:04,000 --> 00:15:06,480
for their other families uh we've got

399
00:15:06,480 --> 00:15:08,160
some of them partially merged some still

400
00:15:08,160 --> 00:15:10,320
work in progress so we're a ways out

401
00:15:10,320 --> 00:15:12,399
from having support for pico's entire

402
00:15:12,399 --> 00:15:14,160
product line but again it's definitely

403
00:15:14,160 --> 00:15:16,560
coming um and pico has been very

404
00:15:16,560 --> 00:15:17,920
supportive of the project they've

405
00:15:17,920 --> 00:15:20,639
contributed hardware to the project and

406
00:15:20,639 --> 00:15:22,160
uh generally

407
00:15:22,160 --> 00:15:24,000
have been very helpful

408
00:15:24,000 --> 00:15:26,480
uh rygal we've got support for a couple

409
00:15:26,480 --> 00:15:28,480
of the lower end models and then the mso

410
00:15:28,480 --> 00:15:31,199
5000 uh again just a matter of getting

411
00:15:31,199 --> 00:15:33,040
our hands on more hardware to add driver

412
00:15:33,040 --> 00:15:35,279
support uh roden schwartz we have one

413
00:15:35,279 --> 00:15:37,839
contributor working on rtm 3000 driver i

414
00:15:37,839 --> 00:15:39,360
don't know what other platforms it may

415
00:15:39,360 --> 00:15:40,959
run as well

416
00:15:40,959 --> 00:15:43,519
uh siglit has also been very helpful uh

417
00:15:43,519 --> 00:15:45,600
they've sent some additional tooling and

418
00:15:45,600 --> 00:15:47,920
hardware to some of our developers

419
00:15:47,920 --> 00:15:49,759
we've got pretty good support for the

420
00:15:49,759 --> 00:15:53,360
2000 series uh the 5000 series is

421
00:15:53,360 --> 00:15:55,199
supposed to be pretty much the same and

422
00:15:55,199 --> 00:15:56,320
we've done a little bit of testing it

423
00:15:56,320 --> 00:15:58,959
seems to work okay but i still

424
00:15:58,959 --> 00:16:01,199
need to put more time into that uh and

425
00:16:01,199 --> 00:16:03,199
again we don't have quite coverage of

426
00:16:03,199 --> 00:16:04,399
the entire product line but we're

427
00:16:04,399 --> 00:16:06,480
working on it

428
00:16:06,480 --> 00:16:08,800
lacroix is actually probably our tier

429
00:16:08,800 --> 00:16:10,639
one platform right now as far as best

430
00:16:10,639 --> 00:16:12,560
support because that's most of what i

431
00:16:12,560 --> 00:16:14,320
have in my lab and so it's kind of my

432
00:16:14,320 --> 00:16:16,560
daily driver for development pretty much

433
00:16:16,560 --> 00:16:18,639
anything maui based so anything using

434
00:16:18,639 --> 00:16:21,360
the modern user interface is going to be

435
00:16:21,360 --> 00:16:23,839
protocol compatible they're all going to

436
00:16:23,839 --> 00:16:27,199
use the exact same commands and so if it

437
00:16:27,199 --> 00:16:28,720
works on a lot of metal work on often

438
00:16:28,720 --> 00:16:30,720
the one exception is some of the arm

439
00:16:30,720 --> 00:16:32,959
based systems so the wave surface 3000

440
00:16:32,959 --> 00:16:35,839
uh wave server 4000 hd web server 3000 z

441
00:16:35,839 --> 00:16:38,000
and so on i do have a few limitations

442
00:16:38,000 --> 00:16:39,360
certain things that are supported on the

443
00:16:39,360 --> 00:16:40,639
higher end ones are not supported on

444
00:16:40,639 --> 00:16:41,759
those so they're they're a little bit

445
00:16:41,759 --> 00:16:43,279
quirky it mostly works but every once in

446
00:16:43,279 --> 00:16:44,399
a while you run something that's a

447
00:16:44,399 --> 00:16:47,360
little bit funny and so i do have a 3000

448
00:16:47,360 --> 00:16:49,279
series scope that i'm working on adding

449
00:16:49,279 --> 00:16:51,839
better support for but uh i've been

450
00:16:51,839 --> 00:16:53,680
mostly working on the higher end stuff

451
00:16:53,680 --> 00:16:55,279
and as you can see we pretty much have

452
00:16:55,279 --> 00:16:57,040
coverage of the entire product run all

453
00:16:57,040 --> 00:16:59,360
the way back to the dda5000 series we've

454
00:16:59,360 --> 00:17:00,959
done testing on and i believe that's

455
00:17:00,959 --> 00:17:01,839
from

456
00:17:01,839 --> 00:17:05,199
the windows xp or 2000 era and so pretty

457
00:17:05,199 --> 00:17:08,000
much any windows-based lacroix scope is

458
00:17:08,000 --> 00:17:09,599
going to work with jessica klein and

459
00:17:09,599 --> 00:17:11,039
they're actually among as when we get to

460
00:17:11,039 --> 00:17:12,799
the performance section uh you'll see

461
00:17:12,799 --> 00:17:14,880
they're among the faster uh drivers at

462
00:17:14,880 --> 00:17:16,240
the moment too again it's a combination

463
00:17:16,240 --> 00:17:17,599
of our drivers and instrument

464
00:17:17,599 --> 00:17:20,240
performance that really affects how much

465
00:17:20,240 --> 00:17:22,000
waveform throughput you can get in a gel

466
00:17:22,000 --> 00:17:24,880
scope client then tektronix we have very

467
00:17:24,880 --> 00:17:28,160
good coverage of the mso6 the four and

468
00:17:28,160 --> 00:17:30,400
five are supposed to be the same command

469
00:17:30,400 --> 00:17:32,240
set so in theory it should work nobody's

470
00:17:32,240 --> 00:17:33,919
ever gotten their hands on one's test so

471
00:17:33,919 --> 00:17:36,080
if anybody has an mso405 and what's a

472
00:17:36,080 --> 00:17:38,799
try we would love feedback

473
00:17:38,799 --> 00:17:40,880
as far as other tech products again i

474
00:17:40,880 --> 00:17:42,480
don't know what's using the same command

475
00:17:42,480 --> 00:17:43,840
set and what isn't these are the ones

476
00:17:43,840 --> 00:17:47,120
we've tested uh the

477
00:17:47,120 --> 00:17:48,960
performance of the mso i was a little

478
00:17:48,960 --> 00:17:51,440
bit disappointed with i it was

479
00:17:51,440 --> 00:17:52,960
significantly slower than some of the

480
00:17:52,960 --> 00:17:55,200
other uh higher end scope vendors i'm

481
00:17:55,200 --> 00:17:57,360
actually going back and forth with some

482
00:17:57,360 --> 00:17:59,360
of the applications and there's at

483
00:17:59,360 --> 00:18:01,840
tektronix they've uh said that they're

484
00:18:01,840 --> 00:18:03,360
looking at making some improvements in

485
00:18:03,360 --> 00:18:05,840
future firmware uh rigel as well uh is

486
00:18:05,840 --> 00:18:07,360
apparently interested in making some

487
00:18:07,360 --> 00:18:09,760
firmware improvements to uh increase

488
00:18:09,760 --> 00:18:12,559
throughput and so none of that has uh

489
00:18:12,559 --> 00:18:14,720
been released yet but the vendors are

490
00:18:14,720 --> 00:18:16,640
definitely interested and working on

491
00:18:16,640 --> 00:18:18,960
getting faster firmware out so excited

492
00:18:18,960 --> 00:18:21,039
to see where that's going

493
00:18:21,039 --> 00:18:22,559
so next uh we're going to talk about

494
00:18:22,559 --> 00:18:24,400
performance in a little bit more detail

495
00:18:24,400 --> 00:18:25,440
so

496
00:18:25,440 --> 00:18:27,760
the first limiting factor and especially

497
00:18:27,760 --> 00:18:29,440
on lower end hardware is generally the

498
00:18:29,440 --> 00:18:30,880
one that's going to be your biggest

499
00:18:30,880 --> 00:18:34,000
bottleneck is cpu performance fpga

500
00:18:34,000 --> 00:18:35,520
performance and connection between the

501
00:18:35,520 --> 00:18:38,080
cpu and fpga on the scope unfortunately

502
00:18:38,080 --> 00:18:40,320
there's not really much you as a user or

503
00:18:40,320 --> 00:18:42,400
just go client developer can do about

504
00:18:42,400 --> 00:18:43,679
that so you pretty much have to live

505
00:18:43,679 --> 00:18:45,840
with what the hardware has uh although

506
00:18:45,840 --> 00:18:47,520
again we are working on pushing vendors

507
00:18:47,520 --> 00:18:49,120
to try and do more optimization to their

508
00:18:49,120 --> 00:18:51,360
firmware to improve throughput uh then

509
00:18:51,360 --> 00:18:53,760
there's the bottleneck of interface so

510
00:18:53,760 --> 00:18:56,080
anything with only hundred mag ethernet

511
00:18:56,080 --> 00:18:57,760
or usb to water it is gonna be slow

512
00:18:57,760 --> 00:18:58,960
there again there's there's only so much

513
00:18:58,960 --> 00:19:01,039
that you can cram through pipe that size

514
00:19:01,039 --> 00:19:03,039
uh higher end hardware like for example

515
00:19:03,039 --> 00:19:05,039
most of the lacroix tektronix and so on

516
00:19:05,039 --> 00:19:06,960
stuff is going to have at least gigabit

517
00:19:06,960 --> 00:19:09,919
ethernet and then the best performance

518
00:19:09,919 --> 00:19:11,840
is going to come from things that have

519
00:19:11,840 --> 00:19:13,760
multi-gigabit i o interfaces so for

520
00:19:13,760 --> 00:19:16,160
example the uh higher end pico products

521
00:19:16,160 --> 00:19:18,640
have uh usb 3 on them i've pushed

522
00:19:18,640 --> 00:19:20,320
upwards of two gigabits a second of

523
00:19:20,320 --> 00:19:22,400
actual waveform throughput through those

524
00:19:22,400 --> 00:19:24,000
uh i'm working on some open source

525
00:19:24,000 --> 00:19:25,440
designs of my own that are going to have

526
00:19:25,440 --> 00:19:27,520
10 gig ethernet on them uh certainly any

527
00:19:27,520 --> 00:19:29,520
kind of a pcie acquisition card again

528
00:19:29,520 --> 00:19:30,799
it's going to have really good

529
00:19:30,799 --> 00:19:33,280
performance as far as throughputs does

530
00:19:33,280 --> 00:19:35,039
uh this also kind of ties into

531
00:19:35,039 --> 00:19:36,880
optimization on the just compliant

532
00:19:36,880 --> 00:19:40,000
driver side so optimizing for

533
00:19:40,000 --> 00:19:42,320
less round trips sending less commands

534
00:19:42,320 --> 00:19:43,919
don't send state changes if the

535
00:19:43,919 --> 00:19:45,440
instrument's already in the state that

536
00:19:45,440 --> 00:19:47,679
you want it to be uh general software

537
00:19:47,679 --> 00:19:50,080
optimization techniques uh certain

538
00:19:50,080 --> 00:19:51,840
instruments are more meant to pipelining

539
00:19:51,840 --> 00:19:54,720
than others uh the tech mso6 in

540
00:19:54,720 --> 00:19:56,559
particular really does not like when you

541
00:19:56,559 --> 00:19:57,919
send it a command before the previous

542
00:19:57,919 --> 00:19:59,919
commit is finished it'll either abort or

543
00:19:59,919 --> 00:20:01,760
hang or drop the previous command we've

544
00:20:01,760 --> 00:20:03,440
had that issue with sigmund firmware as

545
00:20:03,440 --> 00:20:06,159
well both vendors are aware of the issue

546
00:20:06,159 --> 00:20:08,480
and are addressing it so hopefully in

547
00:20:08,480 --> 00:20:09,840
the future we'll start seeing some

548
00:20:09,840 --> 00:20:11,280
firmware that's more compatible with

549
00:20:11,280 --> 00:20:13,280
pipelining because pipeline was one of

550
00:20:13,280 --> 00:20:14,720
the biggest optimizations i did in the

551
00:20:14,720 --> 00:20:16,799
lacroix driver and it greatly improved

552
00:20:16,799 --> 00:20:18,000
performance being able to queue up a

553
00:20:18,000 --> 00:20:19,360
bunch of commands and not have to wait

554
00:20:19,360 --> 00:20:20,559
for a reply from the instrument saying

555
00:20:20,559 --> 00:20:21,760
oh i'm done you can send me another

556
00:20:21,760 --> 00:20:23,280
command and then add another you know

557
00:20:23,280 --> 00:20:24,640
potentially several milliseconds around

558
00:20:24,640 --> 00:20:25,919
trip time before you can send the next

559
00:20:25,919 --> 00:20:28,240
command

560
00:20:28,320 --> 00:20:30,720
another issue to consider is scaling so

561
00:20:30,720 --> 00:20:33,120
if you go from a shallow waveform to a

562
00:20:33,120 --> 00:20:34,640
deep wave form how does performance

563
00:20:34,640 --> 00:20:35,760
change

564
00:20:35,760 --> 00:20:37,679
a lot of the lower end hardware there's

565
00:20:37,679 --> 00:20:41,039
a really large 01 term and

566
00:20:41,039 --> 00:20:42,799
again this is i think at least partially

567
00:20:42,799 --> 00:20:45,200
firmware limited and i am hopeful that

568
00:20:45,200 --> 00:20:47,520
in the future for more improvements at

569
00:20:47,520 --> 00:20:49,039
the vendor side are going to improve

570
00:20:49,039 --> 00:20:52,480
this so for example the regular mso 5000

571
00:20:52,480 --> 00:20:53,520
series

572
00:20:53,520 --> 00:20:55,280
we have been unable to get more than one

573
00:20:55,280 --> 00:20:56,559
waveform per second of throughput

574
00:20:56,559 --> 00:20:58,559
through it no matter what we do but if

575
00:20:58,559 --> 00:20:59,919
you turn up the memory depth it doesn't

576
00:20:59,919 --> 00:21:01,919
really slow down that much on the other

577
00:21:01,919 --> 00:21:04,559
hand with higher end scopes generally

578
00:21:04,559 --> 00:21:07,039
the on term is going to be the bigger

579
00:21:07,039 --> 00:21:08,720
factor so for example in the case of

580
00:21:08,720 --> 00:21:11,360
lacroix wave runner 8000 series you can

581
00:21:11,360 --> 00:21:14,240
see we go from 40 waveforms a second to

582
00:21:14,240 --> 00:21:15,679
three-way from the second as you go from

583
00:21:15,679 --> 00:21:18,000
80k to 8 million points

584
00:21:18,000 --> 00:21:20,720
and so here's just a quick table showing

585
00:21:20,720 --> 00:21:21,919
examples of the kind of performance

586
00:21:21,919 --> 00:21:24,240
you'll get with anything from say a more

587
00:21:24,240 --> 00:21:27,120
entry level scope like a rival msl 5000

588
00:21:27,120 --> 00:21:28,799
all the way up to some higher end stuff

589
00:21:28,799 --> 00:21:32,480
like uh mccrory hdos uh picoscope 6000

590
00:21:32,480 --> 00:21:35,600
uh this is an older agilent or keysight

591
00:21:35,600 --> 00:21:37,520
stuff but they're still you know a bit

592
00:21:37,520 --> 00:21:39,039
on more on the high end than something

593
00:21:39,039 --> 00:21:42,080
from say rigel and so you can see even

594
00:21:42,080 --> 00:21:44,480
here that the throughput you can get

595
00:21:44,480 --> 00:21:46,159
with some of the higher end products is

596
00:21:46,159 --> 00:21:47,840
definitely way better than something

597
00:21:47,840 --> 00:21:49,840
than you would get from say the wrigler

598
00:21:49,840 --> 00:21:51,760
again the tech episode 6 had a

599
00:21:51,760 --> 00:21:53,760
surprisingly poor showing considering it

600
00:21:53,760 --> 00:21:55,679
was otherwise a really nice scope so i

601
00:21:55,679 --> 00:21:57,760
think it is just a firmware limitation

602
00:21:57,760 --> 00:21:59,120
and i am hopeful a future firmware

603
00:21:59,120 --> 00:22:01,520
release will improve that uh but you can

604
00:22:01,520 --> 00:22:04,320
see that for example the agilent mso6

605
00:22:04,320 --> 00:22:06,720
actually gives you quite nice throughput

606
00:22:06,720 --> 00:22:08,159
in terms of waveforms per second at

607
00:22:08,159 --> 00:22:10,320
child memory and again it can't keep up

608
00:22:10,320 --> 00:22:11,440
quite as well when you increase the

609
00:22:11,440 --> 00:22:13,360
memory depth but you know 30 waveforms

610
00:22:13,360 --> 00:22:14,960
per second you know that's 30fps that's

611
00:22:14,960 --> 00:22:17,280
a nice interactive frame rate

612
00:22:17,280 --> 00:22:20,000
and so here's a comparison looking with

613
00:22:20,000 --> 00:22:21,200
deep memory and so i'll bounce back and

614
00:22:21,200 --> 00:22:22,400
forth between these slides a little bit

615
00:22:22,400 --> 00:22:24,640
so you can see so for example again the

616
00:22:24,640 --> 00:22:26,799
azalean ms06 you can see we go from 30

617
00:22:26,799 --> 00:22:29,440
waveforms uh at 1k points at a million

618
00:22:29,440 --> 00:22:30,640
points we're down to one frame per

619
00:22:30,640 --> 00:22:32,159
second but you know we're still getting

620
00:22:32,159 --> 00:22:33,679
okay throughput you know one one frame

621
00:22:33,679 --> 00:22:35,600
per second at a million points it's okay

622
00:22:35,600 --> 00:22:38,640
it's not great uh meanwhile say the

623
00:22:38,640 --> 00:22:41,600
mccroy hdo at a million points with four

624
00:22:41,600 --> 00:22:43,840
channels would give you almost six waves

625
00:22:43,840 --> 00:22:45,520
per second so that's 300 megabits a

626
00:22:45,520 --> 00:22:48,799
second um and that's with a 16 bit

627
00:22:48,799 --> 00:22:50,960
resolution because it is an hd scope

628
00:22:50,960 --> 00:22:53,200
okay it's 10 bit but they're padded out

629
00:22:53,200 --> 00:22:54,799
to 16 over the wire so that's kind of

630
00:22:54,799 --> 00:22:57,440
your network performance limit um then

631
00:22:57,440 --> 00:22:59,679
the wave runner 8000 down at the bottom

632
00:22:59,679 --> 00:23:01,440
is an 8-bit scope so in our case here if

633
00:23:01,440 --> 00:23:03,600
we only have two channels at 800k points

634
00:23:03,600 --> 00:23:04,880
you're still getting 16 frames per

635
00:23:04,880 --> 00:23:06,480
second so again pretty respectable

636
00:23:06,480 --> 00:23:07,440
throughput

637
00:23:07,440 --> 00:23:08,799
and then pico comes in and blows

638
00:23:08,799 --> 00:23:10,080
everybody away with almost two gigabits

639
00:23:10,080 --> 00:23:12,159
a second of throughput doing 30 frames

640
00:23:12,159 --> 00:23:13,919
per second with a million points in four

641
00:23:13,919 --> 00:23:16,400
channels so if you want fast update

642
00:23:16,400 --> 00:23:18,559
rates nothing else i've seen

643
00:23:18,559 --> 00:23:20,640
can compare to the picoscopes i am

644
00:23:20,640 --> 00:23:21,919
really hopeful that other vendors are

645
00:23:21,919 --> 00:23:23,919
going to start putting 10 gig ethernet

646
00:23:23,919 --> 00:23:25,840
and similar high bandwidth interfaces on

647
00:23:25,840 --> 00:23:27,679
their scopes and so you know maybe two

648
00:23:27,679 --> 00:23:28,960
or three generations down the road we'll

649
00:23:28,960 --> 00:23:30,480
start seeing stuff from keysight and

650
00:23:30,480 --> 00:23:32,080
lacroix and attack that has tango

651
00:23:32,080 --> 00:23:33,679
ethernet on it and at that point maybe

652
00:23:33,679 --> 00:23:36,559
they'll be competitive but right now uh

653
00:23:36,559 --> 00:23:38,080
for especially deep cameras if you're

654
00:23:38,080 --> 00:23:40,080
trying to do a lot of waveforms per

655
00:23:40,080 --> 00:23:41,520
power analysis or something like that

656
00:23:41,520 --> 00:23:44,799
that nothing compared to the picoscopes

657
00:23:44,799 --> 00:23:47,120
um other performance considerations uh

658
00:23:47,120 --> 00:23:48,880
when you're actually rendering stuff you

659
00:23:48,880 --> 00:23:50,720
are gpu performance limited so if you

660
00:23:50,720 --> 00:23:52,080
scroll out and you're looking at a lot

661
00:23:52,080 --> 00:23:53,600
of samples on screen you're gonna be

662
00:23:53,600 --> 00:23:55,600
slower if you zoom in and you're looking

663
00:23:55,600 --> 00:23:57,760
at a few samples it's gonna be faster uh

664
00:23:57,760 --> 00:24:00,400
just as a rough reference up with my

665
00:24:00,400 --> 00:24:04,080
2080 ti on my workstation at home a

666
00:24:04,080 --> 00:24:06,080
single 128 million point waveform takes

667
00:24:06,080 --> 00:24:07,600
about 50 milliseconds so you're looking

668
00:24:07,600 --> 00:24:10,000
at you know 10 20 fps for

669
00:24:10,000 --> 00:24:13,200
scrolling around one waveform um and

670
00:24:13,200 --> 00:24:15,200
that's for just rendering obviously when

671
00:24:15,200 --> 00:24:17,200
you start doing dsp processing and so on

672
00:24:17,200 --> 00:24:18,880
on deep waveforms and it starts to add

673
00:24:18,880 --> 00:24:20,799
up as well

674
00:24:20,799 --> 00:24:22,960
so that actually brings me to the next

675
00:24:22,960 --> 00:24:24,960
topic which is photograph complexity so

676
00:24:24,960 --> 00:24:27,120
if you have for example a lot of

677
00:24:27,120 --> 00:24:28,799
different filters being applied to one

678
00:24:28,799 --> 00:24:30,400
channel it's going to be pretty fast

679
00:24:30,400 --> 00:24:31,760
because they can each run on different

680
00:24:31,760 --> 00:24:33,279
cores and about the threat if you've got

681
00:24:33,279 --> 00:24:35,840
a nice long linear chain where you do

682
00:24:35,840 --> 00:24:38,320
say an equalization operation and then a

683
00:24:38,320 --> 00:24:40,880
d embed and then you do a clock recovery

684
00:24:40,880 --> 00:24:42,240
on that and then you do a protocol

685
00:24:42,240 --> 00:24:43,760
decode using the recovered clock each

686
00:24:43,760 --> 00:24:45,600
one of those blocks can't run until the

687
00:24:45,600 --> 00:24:47,360
previous one is finished and so in that

688
00:24:47,360 --> 00:24:49,039
case you're going to have a more serial

689
00:24:49,039 --> 00:24:50,559
bottleneck and it does become a little

690
00:24:50,559 --> 00:24:52,720
more difficult to get high throughput um

691
00:24:52,720 --> 00:24:54,080
and then certainly you've got

692
00:24:54,080 --> 00:24:55,840
limitations based on cpu and structure

693
00:24:55,840 --> 00:24:58,240
set supports uh any more number

694
00:24:58,240 --> 00:25:01,360
crunching heavy stuff like ffts uh fair

695
00:25:01,360 --> 00:25:03,679
filters d embeds and so on are pretty

696
00:25:03,679 --> 00:25:05,520
numerically intensive and so the more of

697
00:25:05,520 --> 00:25:06,640
those you use the slower you're going to

698
00:25:06,640 --> 00:25:08,799
be

699
00:25:12,000 --> 00:25:14,000
and now we're going to get on to just a

700
00:25:14,000 --> 00:25:16,000
quick look at actual capabilities of

701
00:25:16,000 --> 00:25:17,600
software what kinds of things we can do

702
00:25:17,600 --> 00:25:19,039
with it

703
00:25:19,039 --> 00:25:20,880
so uh here's just a quick list of some

704
00:25:20,880 --> 00:25:22,799
of the math and dsp functions again i'm

705
00:25:22,799 --> 00:25:24,320
not going to go into detail on all this

706
00:25:24,320 --> 00:25:26,960
because we can show more during the demo

707
00:25:26,960 --> 00:25:28,720
uh we've got all your typical classic

708
00:25:28,720 --> 00:25:30,720
embedded protocols so uh you know one

709
00:25:30,720 --> 00:25:33,840
wire can i squared c etc uh we also do

710
00:25:33,840 --> 00:25:37,520
have uh milstead 1553. uh eric 429 is

711
00:25:37,520 --> 00:25:39,360
not supported yet we've got test data

712
00:25:39,360 --> 00:25:40,799
for it there's an open tickets that's

713
00:25:40,799 --> 00:25:42,960
going to be coming soon

714
00:25:42,960 --> 00:25:44,400
we also have and this is a little bit

715
00:25:44,400 --> 00:25:47,919
more unique uh it decodes for jtag swd

716
00:25:47,919 --> 00:25:51,360
and a arm mem ap over swda so you can

717
00:25:51,360 --> 00:25:52,799
see in this screenshot here for example

718
00:25:52,799 --> 00:25:55,120
we're looking at an st link connected to

719
00:25:55,120 --> 00:25:57,279
an stm32 and we're looking at the actual

720
00:25:57,279 --> 00:25:59,440
ad virtual or the physical addresses

721
00:25:59,440 --> 00:26:01,600
that it's reading and writing and so

722
00:26:01,600 --> 00:26:03,200
where this comes from really handy is if

723
00:26:03,200 --> 00:26:04,480
you've got some kind of proprietary

724
00:26:04,480 --> 00:26:06,080
debug dongle and you want to understand

725
00:26:06,080 --> 00:26:08,320
the memory map of a target device or you

726
00:26:08,320 --> 00:26:10,720
want to understand you know what

727
00:26:10,720 --> 00:26:12,400
registers to say for example maybe it's

728
00:26:12,400 --> 00:26:14,000
not on our device maybe it's some weird

729
00:26:14,000 --> 00:26:15,279
proprietary

730
00:26:15,279 --> 00:26:16,880
custom cpu or something like that you

731
00:26:16,880 --> 00:26:18,720
want to really understand how the vendor

732
00:26:18,720 --> 00:26:20,880
debug tools work in order to maybe see

733
00:26:20,880 --> 00:26:22,320
if you can bypass code protection or

734
00:26:22,320 --> 00:26:25,760
something like that

735
00:26:25,760 --> 00:26:28,480
and then another one that uh is much

736
00:26:28,480 --> 00:26:30,720
more commonly seen in the security space

737
00:26:30,720 --> 00:26:33,679
is uh memory protocols so

738
00:26:33,679 --> 00:26:36,240
ddr1 ddr3 i don't have ddr2 or iv yet

739
00:26:36,240 --> 00:26:39,039
those are coming uh i scored ce proms sd

740
00:26:39,039 --> 00:26:41,200
cards five flashes and so we do have a

741
00:26:41,200 --> 00:26:43,120
full product analyzer which i'll get to

742
00:26:43,120 --> 00:26:45,600
more of in the demo so i use this all

743
00:26:45,600 --> 00:26:47,440
the time at work analyzing secure boot

744
00:26:47,440 --> 00:26:49,440
implications being able to look at the

745
00:26:49,440 --> 00:26:52,400
whole list of addresses that a device is

746
00:26:52,400 --> 00:26:54,400
reading see what data it's reading

747
00:26:54,400 --> 00:26:56,159
identify any addresses that are read

748
00:26:56,159 --> 00:26:58,159
more than once and it's it's great for

749
00:26:58,159 --> 00:27:00,720
finding talk to bugs or determining for

750
00:27:00,720 --> 00:27:03,679
example correlations between memory

751
00:27:03,679 --> 00:27:05,120
patterns and maybe looking at power

752
00:27:05,120 --> 00:27:08,240
traces and trying to find where in a

753
00:27:08,240 --> 00:27:10,240
power trace is your signature check or

754
00:27:10,240 --> 00:27:11,840
your firmware decryption or something

755
00:27:11,840 --> 00:27:13,679
like that

756
00:27:13,679 --> 00:27:15,200
we definitely have a lot of stuff

757
00:27:15,200 --> 00:27:17,840
focused more on high-speed serial

758
00:27:17,840 --> 00:27:19,760
there is a clock recovery pll right now

759
00:27:19,760 --> 00:27:21,679
it's just a fairly basic bang bang

760
00:27:21,679 --> 00:27:23,039
control loop i am looking at

761
00:27:23,039 --> 00:27:24,960
implementing golden plls from various

762
00:27:24,960 --> 00:27:27,120
standards so fibre channel sata pcie and

763
00:27:27,120 --> 00:27:29,039
so on in order to be able to actually do

764
00:27:29,039 --> 00:27:30,559
protocol compliance testing so that's

765
00:27:30,559 --> 00:27:33,120
definitely coming down the pipe soon uh

766
00:27:33,120 --> 00:27:34,559
ten being sixty four sixty six

767
00:27:34,559 --> 00:27:38,000
implemented uh 128 130 64 67 are

768
00:27:38,000 --> 00:27:39,600
definitely going to come soon as well

769
00:27:39,600 --> 00:27:41,919
just haven't gotten around to it yet

770
00:27:41,919 --> 00:27:44,480
uh we've also got some nice features for

771
00:27:44,480 --> 00:27:47,360
power analysis and rf so there's a

772
00:27:47,360 --> 00:27:48,960
digital down converter so you can take

773
00:27:48,960 --> 00:27:51,440
in a directly sampled rf signal and get

774
00:27:51,440 --> 00:27:54,880
out iq waveforms from it uh ffts fur

775
00:27:54,880 --> 00:27:56,159
filters

776
00:27:56,159 --> 00:27:57,840
another one that i find really nice is

777
00:27:57,840 --> 00:27:59,440
being able to plot either phasor

778
00:27:59,440 --> 00:28:01,200
frequency against time so you can

779
00:28:01,200 --> 00:28:03,120
directly demodulate say phase shift

780
00:28:03,120 --> 00:28:04,799
keying or c

781
00:28:04,799 --> 00:28:07,440
uh a spread spectrum modulated clock and

782
00:28:07,440 --> 00:28:09,200
so on and then all the usual spectrogram

783
00:28:09,200 --> 00:28:11,200
waterfall et cetera

784
00:28:11,200 --> 00:28:12,080
um

785
00:28:12,080 --> 00:28:13,840
i do a lot of work in open source

786
00:28:13,840 --> 00:28:15,600
networking hardware in my spare time one

787
00:28:15,600 --> 00:28:18,080
of my fun projects has been designing an

788
00:28:18,080 --> 00:28:20,320
open hardware ethernet switch on an fpga

789
00:28:20,320 --> 00:28:22,159
and so i've added a lot of networking

790
00:28:22,159 --> 00:28:25,039
protocol decodes so everything from 10

791
00:28:25,039 --> 00:28:27,600
base t up to 10 gig ethernet auto

792
00:28:27,600 --> 00:28:30,480
negotiation mdio and so on

793
00:28:30,480 --> 00:28:32,000
um

794
00:28:32,000 --> 00:28:34,240
these also off the ethernet protocol

795
00:28:34,240 --> 00:28:36,240
decodes also support outputting to

796
00:28:36,240 --> 00:28:38,000
wireshark over a pipe so you can

797
00:28:38,000 --> 00:28:39,760
actually live stream your decoded

798
00:28:39,760 --> 00:28:41,919
packets off the scope to wireshark and

799
00:28:41,919 --> 00:28:44,240
do upper layer protocol decodes as well

800
00:28:44,240 --> 00:28:45,600
so that's handy if you're trying to for

801
00:28:45,600 --> 00:28:47,840
example find malformed packets going

802
00:28:47,840 --> 00:28:50,399
through a piece of say tcp offload

803
00:28:50,399 --> 00:28:53,360
engine or something like that

804
00:28:53,360 --> 00:28:55,440
we also have the beginnings of some

805
00:28:55,440 --> 00:28:57,679
mobile interface support right now only

806
00:28:57,679 --> 00:29:00,240
mippy defy and dsi we can do full frame

807
00:29:00,240 --> 00:29:02,480
grab off of a dsi waveform as you can

808
00:29:02,480 --> 00:29:05,039
see here we've got both the hex dump of

809
00:29:05,039 --> 00:29:06,720
the packet at the right and then the

810
00:29:06,720 --> 00:29:09,120
actual decoded scan lines in the product

811
00:29:09,120 --> 00:29:10,960
analyzer

812
00:29:10,960 --> 00:29:13,200
maybe csi and some of the other mipi

813
00:29:13,200 --> 00:29:15,120
phis are definitely going to be coming

814
00:29:15,120 --> 00:29:16,960
it's just a matter of getting hold of

815
00:29:16,960 --> 00:29:19,919
copies of both specs and uh sample

816
00:29:19,919 --> 00:29:21,760
waveforms trying to find devices that

817
00:29:21,760 --> 00:29:22,799
speak some of these more obscure

818
00:29:22,799 --> 00:29:24,240
protocols can be a little bit tricky at

819
00:29:24,240 --> 00:29:25,440
times

820
00:29:25,440 --> 00:29:29,039
uh then more on the higher speed stuff

821
00:29:29,039 --> 00:29:31,919
we're beginning to see more pc hardware

822
00:29:31,919 --> 00:29:35,200
showing up in uh the lab at work and so

823
00:29:35,200 --> 00:29:38,720
i've been doing some pcie analysis uh

824
00:29:38,720 --> 00:29:40,799
also we've got dvi right now our

825
00:29:40,799 --> 00:29:42,880
displayport and hdmi are on the to-do

826
00:29:42,880 --> 00:29:45,360
list uh pcie gen one and two were

827
00:29:45,360 --> 00:29:47,440
implemented already gen three and four

828
00:29:47,440 --> 00:29:49,120
are pending as soon as i can get hold of

829
00:29:49,120 --> 00:29:51,679
some hardware to actually look at uh

830
00:29:51,679 --> 00:29:52,880
we've got

831
00:29:52,880 --> 00:29:55,600
full high and low speed usb again usb

832
00:29:55,600 --> 00:29:57,600
super speed is not uploaded yet but it's

833
00:29:57,600 --> 00:30:00,159
coming soon and then intel espy so if

834
00:30:00,159 --> 00:30:02,720
you're doing any bmc or ec security work

835
00:30:02,720 --> 00:30:04,240
that's a nice one to have being able to

836
00:30:04,240 --> 00:30:06,080
actually look at what's going on between

837
00:30:06,080 --> 00:30:10,640
the pch and the bmc and so on

838
00:30:10,640 --> 00:30:12,720
uh and then more on the signal integrity

839
00:30:12,720 --> 00:30:14,960
side we've got some basic equalization i

840
00:30:14,960 --> 00:30:17,279
don't have dfe yet just ctle so far but

841
00:30:17,279 --> 00:30:19,520
that's coming uh channel emulation and

842
00:30:19,520 --> 00:30:21,919
de-embedding so we can take a set of s

843
00:30:21,919 --> 00:30:24,159
parameters and look at a waveform and

844
00:30:24,159 --> 00:30:25,760
see what this waveform would look like

845
00:30:25,760 --> 00:30:27,360
through an arbitrary channel even

846
00:30:27,360 --> 00:30:30,000
simulated or measured off of vna uh you

847
00:30:30,000 --> 00:30:31,440
can do the same thing in reverse if

848
00:30:31,440 --> 00:30:33,039
you've got a signal recorded on some

849
00:30:33,039 --> 00:30:35,679
kind of a test fixture you can de-embed

850
00:30:35,679 --> 00:30:37,840
the cables or the fixture from your

851
00:30:37,840 --> 00:30:40,799
waveform and get a clean signal as if it

852
00:30:40,799 --> 00:30:42,399
would look at the balls of your target

853
00:30:42,399 --> 00:30:44,159
chip

854
00:30:44,159 --> 00:30:46,559
then emphasis insertion removal eye

855
00:30:46,559 --> 00:30:48,320
patterns bathtub curves some basic

856
00:30:48,320 --> 00:30:50,000
jitter decomposition so you can go look

857
00:30:50,000 --> 00:30:50,960
at say

858
00:30:50,960 --> 00:30:53,679
jitter spectrum of just your

859
00:30:53,679 --> 00:30:57,120
periodic jitter or something like that

860
00:30:57,120 --> 00:30:58,559
we also have some single generation

861
00:30:58,559 --> 00:31:00,320
features i use these for channel design

862
00:31:00,320 --> 00:31:03,120
work a lot so you can generate a prbs

863
00:31:03,120 --> 00:31:06,080
you can then convert that prbs to nrz or

864
00:31:06,080 --> 00:31:08,240
pam4 you can then apply channel

865
00:31:08,240 --> 00:31:10,720
emulation or inserting noise into that

866
00:31:10,720 --> 00:31:13,679
and then get a nice view of what a data

867
00:31:13,679 --> 00:31:15,440
stream would look like through a channel

868
00:31:15,440 --> 00:31:17,120
from again say you're running an em

869
00:31:17,120 --> 00:31:19,120
simulator on board layout and you wanna

870
00:31:19,120 --> 00:31:20,960
see what an eye pattern through that is

871
00:31:20,960 --> 00:31:24,480
gonna look like at say 10 gigs nrz or 56

872
00:31:24,480 --> 00:31:27,760
gigs pam4 and so on

873
00:31:28,159 --> 00:31:29,440
now let's just look at a few other

874
00:31:29,440 --> 00:31:31,760
features before we get on to demo uh the

875
00:31:31,760 --> 00:31:33,919
protocol analyzer i did touch on briefly

876
00:31:33,919 --> 00:31:35,600
so it's more of a tabular display of

877
00:31:35,600 --> 00:31:37,120
packets rather than the time domain

878
00:31:37,120 --> 00:31:40,159
timeline view um it is synchronized with

879
00:31:40,159 --> 00:31:42,399
the timeline bidirectionally so if you

880
00:31:42,399 --> 00:31:44,799
click on a packet it will then jump the

881
00:31:44,799 --> 00:31:46,480
timeline to that spot and show you where

882
00:31:46,480 --> 00:31:47,679
the beginning of that packet is in the

883
00:31:47,679 --> 00:31:49,360
time domain view you can do the same

884
00:31:49,360 --> 00:31:52,000
thing in reverse if you drag a

885
00:31:52,000 --> 00:31:54,640
uh cursor around in the time domain view

886
00:31:54,640 --> 00:31:56,000
it'll highlight a row in the product

887
00:31:56,000 --> 00:31:58,240
catalyzer uh you can also do filtering

888
00:31:58,240 --> 00:32:00,080
again kind of like how wireshark does it

889
00:32:00,080 --> 00:32:01,760
so you can search for

890
00:32:01,760 --> 00:32:03,120
any uh

891
00:32:03,120 --> 00:32:06,399
sd commands that are just command 16 or

892
00:32:06,399 --> 00:32:10,480
anything with an lba starting with 314

893
00:32:10,480 --> 00:32:12,799
or something like that

894
00:32:12,799 --> 00:32:14,720
another feature that is particularly

895
00:32:14,720 --> 00:32:16,480
unique is the ability to synchronize

896
00:32:16,480 --> 00:32:18,240
multiple instruments and uh we might see

897
00:32:18,240 --> 00:32:20,000
some of this during the demo i don't

898
00:32:20,000 --> 00:32:21,840
have anything set up live but i've got

899
00:32:21,840 --> 00:32:24,799
some recorded data that got used this so

900
00:32:24,799 --> 00:32:26,399
you can take arbitrarily many

901
00:32:26,399 --> 00:32:29,200
instruments with a common time base and

902
00:32:29,200 --> 00:32:30,960
just cable a common reference clock to

903
00:32:30,960 --> 00:32:33,120
them cable a common trigger to them

904
00:32:33,120 --> 00:32:35,840
and uh combine them and have them behave

905
00:32:35,840 --> 00:32:37,840
like one instrument and the calibration

906
00:32:37,840 --> 00:32:39,760
to correct for trigger skew is super

907
00:32:39,760 --> 00:32:41,200
simple it's basically just touching a

908
00:32:41,200 --> 00:32:42,880
probe from the primary instrument at

909
00:32:42,880 --> 00:32:45,039
each secondary one at a time to a common

910
00:32:45,039 --> 00:32:46,080
reference point it'll do a

911
00:32:46,080 --> 00:32:48,000
cross-correlation and determine what the

912
00:32:48,000 --> 00:32:49,760
delay of your trigger cable is and

913
00:32:49,760 --> 00:32:51,200
calibrate that out

914
00:32:51,200 --> 00:32:54,000
and there's actually uh you just look up

915
00:32:54,000 --> 00:32:56,640
my name on youtube there's a demo about

916
00:32:56,640 --> 00:32:59,919
uh maybe six months ago of a tech mso6

917
00:32:59,919 --> 00:33:03,039
and a lacroix wafer under 8000 series

918
00:33:03,039 --> 00:33:05,760
looking at a gigabit ethernet signal and

919
00:33:05,760 --> 00:33:08,159
towards the end i actually put

920
00:33:08,159 --> 00:33:10,000
one leg of a differential pair into the

921
00:33:10,000 --> 00:33:11,760
attack and one leg into the lacroix

922
00:33:11,760 --> 00:33:13,679
sampling at different rates uh the

923
00:33:13,679 --> 00:33:15,360
lacroix is at 40 gig and the attack was

924
00:33:15,360 --> 00:33:16,960
at 25 gig

925
00:33:16,960 --> 00:33:20,799
and i resample them subtract them do

926
00:33:20,799 --> 00:33:23,279
protocol decode and an eye pattern with

927
00:33:23,279 --> 00:33:24,880
one leg of the differential pair into

928
00:33:24,880 --> 00:33:26,240
each scope

929
00:33:26,240 --> 00:33:27,919
so you can get surprisingly good

930
00:33:27,919 --> 00:33:30,080
synchronization surprisingly low jitter

931
00:33:30,080 --> 00:33:31,440
app i mean i wouldn't use it for

932
00:33:31,440 --> 00:33:32,799
protocol compliance testing but

933
00:33:32,799 --> 00:33:35,120
certainly for decoding an analysis it's

934
00:33:35,120 --> 00:33:36,840
it's more than good enough for most

935
00:33:36,840 --> 00:33:38,799
purposes and so you can do this with

936
00:33:38,799 --> 00:33:40,399
pretty much any supported scopes they do

937
00:33:40,399 --> 00:33:43,360
not have to be the same

938
00:33:47,360 --> 00:33:50,480
and finally before we get to the demo

939
00:33:50,480 --> 00:33:52,640
if you're interested in playing with the

940
00:33:52,640 --> 00:33:54,880
software more or getting involved uh

941
00:33:54,880 --> 00:33:57,440
here's the link to the repository uh the

942
00:33:57,440 --> 00:34:00,559
irc channel uh the discord and the irc

943
00:34:00,559 --> 00:34:03,440
are bridged so uh you can hop in one or

944
00:34:03,440 --> 00:34:05,200
the other and uh talk to everybody

945
00:34:05,200 --> 00:34:07,840
involved

946
00:34:07,840 --> 00:34:10,079
and before we get into the demo also uh

947
00:34:10,079 --> 00:34:12,800
just want to acknowledge uh support from

948
00:34:12,800 --> 00:34:15,199
industry uh we've received development

949
00:34:15,199 --> 00:34:18,560
scopes uh technical support etc from

950
00:34:18,560 --> 00:34:20,399
pico digilen and siglin they've been

951
00:34:20,399 --> 00:34:22,879
very helpful uh we've had some dealings

952
00:34:22,879 --> 00:34:26,399
with uh rigel and tech as well um they

953
00:34:26,399 --> 00:34:27,520
haven't actually contributed any

954
00:34:27,520 --> 00:34:28,960
hardware yet

955
00:34:28,960 --> 00:34:31,280
and so again if you're involved with an

956
00:34:31,280 --> 00:34:33,199
instrument vendor we welcome hardware we

957
00:34:33,199 --> 00:34:35,280
welcome code contributions and we would

958
00:34:35,280 --> 00:34:37,679
love to work with uh instrument vendors

959
00:34:37,679 --> 00:34:39,839
more closely in order to make a better

960
00:34:39,839 --> 00:34:42,000
tool for everyone

961
00:34:42,000 --> 00:34:44,719
and uh thanks to all of the contributors

962
00:34:44,719 --> 00:34:46,960
to the project at this point i think we

963
00:34:46,960 --> 00:34:47,839
just

964
00:34:47,839 --> 00:34:49,839
last week i think we broke 30 people had

965
00:34:49,839 --> 00:34:52,560
contributed codes so uh thanks to all of

966
00:34:52,560 --> 00:34:55,280
you for helping make the project get to

967
00:34:55,280 --> 00:34:57,440
where it is now

968
00:34:57,440 --> 00:34:59,599
and before we get into the demo i will

969
00:34:59,599 --> 00:35:02,839
take questions

970
00:35:04,880 --> 00:35:08,000
so uh andrew i will read it out for you

971
00:35:08,000 --> 00:35:10,320
uh do you have any do you have plans to

972
00:35:10,320 --> 00:35:12,560
create or integrate with open hardware

973
00:35:12,560 --> 00:35:14,720
oscilloscopes in the future

974
00:35:14,720 --> 00:35:17,359
uh yes i do i've got several different

975
00:35:17,359 --> 00:35:19,040
open hardware platforms under

976
00:35:19,040 --> 00:35:21,599
development uh none of them are anywhere

977
00:35:21,599 --> 00:35:24,400
near ready to release yet i've been more

978
00:35:24,400 --> 00:35:25,839
looking again at the mid-range to

979
00:35:25,839 --> 00:35:28,720
high-end because my thought being

980
00:35:28,720 --> 00:35:30,800
it's not going to be practical to be

981
00:35:30,800 --> 00:35:32,480
cost competitive with anything coming

982
00:35:32,480 --> 00:35:34,160
from say right or something like that

983
00:35:34,160 --> 00:35:35,359
because just they make stuff in such

984
00:35:35,359 --> 00:35:37,760
huge volume it's an open source product

985
00:35:37,760 --> 00:35:39,599
in that range it's going to be difficult

986
00:35:39,599 --> 00:35:42,000
to sustain so i've been looking more at

987
00:35:42,000 --> 00:35:43,680
the mid-range to high-end so starting at

988
00:35:43,680 --> 00:35:45,680
say 500 megahertz better than going up

989
00:35:45,680 --> 00:35:47,680
to a couple of gigahertz so yeah i've

990
00:35:47,680 --> 00:35:49,920
got uh designs in progress i've actually

991
00:35:49,920 --> 00:35:52,880
got a full prototype of a 500 megahertz

992
00:35:52,880 --> 00:35:54,880
analog front end sitting on a board in

993
00:35:54,880 --> 00:35:56,240
my lab now

994
00:35:56,240 --> 00:35:58,240
and i kind of put that on hold because

995
00:35:58,240 --> 00:35:59,680
the state of the art and open source

996
00:35:59,680 --> 00:36:02,320
probing was awful and then i spent a

997
00:36:02,320 --> 00:36:04,560
good chunk of last year working on a

998
00:36:04,560 --> 00:36:07,200
open source six gigahertz passive probe

999
00:36:07,200 --> 00:36:09,040
and uh now i'm working on an open source

1000
00:36:09,040 --> 00:36:10,720
six gigahertz active differential probe

1001
00:36:10,720 --> 00:36:13,680
and so once we get some of that up down

1002
00:36:13,680 --> 00:36:15,359
then uh probably moving back to the

1003
00:36:15,359 --> 00:36:16,720
scope hardware side of things but yeah

1004
00:36:16,720 --> 00:36:18,960
that certainly uh open hardware scopes

1005
00:36:18,960 --> 00:36:20,480
are definitely coming down the pipeline

1006
00:36:20,480 --> 00:36:22,960
eventually i'm also trying to work with

1007
00:36:22,960 --> 00:36:24,720
vendors to be a bit more open source

1008
00:36:24,720 --> 00:36:27,119
friendly on the tooling side

1009
00:36:27,119 --> 00:36:29,040
again especially pico has been very

1010
00:36:29,040 --> 00:36:31,520
friendly to the project and uh

1011
00:36:31,520 --> 00:36:33,040
i'm hoping i can get this to kind of

1012
00:36:33,040 --> 00:36:35,040
become a more broader industry trend of

1013
00:36:35,040 --> 00:36:36,640
instrument vendors being more friendly

1014
00:36:36,640 --> 00:36:38,960
to open source tooling for their scopes

1015
00:36:38,960 --> 00:36:40,240
and potentially even running open source

1016
00:36:40,240 --> 00:36:43,359
code on the scope itself

1017
00:36:44,960 --> 00:36:47,680
any other questions

1018
00:36:47,760 --> 00:36:49,839
i don't see any more questions but i see

1019
00:36:49,839 --> 00:36:51,599
comments that found peter and trevor

1020
00:36:51,599 --> 00:36:54,079
that they both prefer picoscope so yeah

1021
00:36:54,079 --> 00:36:55,440
thank you guys

1022
00:36:55,440 --> 00:36:57,200
uh if there are any questions from the

1023
00:36:57,200 --> 00:36:58,880
audience please send them across by the

1024
00:36:58,880 --> 00:37:01,680
chat uh we will answer them uh sometime

1025
00:37:01,680 --> 00:37:04,160
in the future uh but i think now andrew

1026
00:37:04,160 --> 00:37:07,359
you could continue with the demo and

1027
00:37:07,359 --> 00:37:08,720
okay perfect

1028
00:37:08,720 --> 00:37:10,800
all right so uh just before we actually

1029
00:37:10,800 --> 00:37:12,640
get into it i here's just a quick photo

1030
00:37:12,640 --> 00:37:15,839
of the lab set up we've got so it's a uh

1031
00:37:15,839 --> 00:37:17,440
raspberry pi i believe the latest

1032
00:37:17,440 --> 00:37:20,960
generation with pcie and uh so we've got

1033
00:37:20,960 --> 00:37:23,040
one probe over here which you can't

1034
00:37:23,040 --> 00:37:25,599
really see in this view is on the pcie

1035
00:37:25,599 --> 00:37:27,119
clock line and then we've got a

1036
00:37:27,119 --> 00:37:28,640
differential probe across one of the

1037
00:37:28,640 --> 00:37:30,560
pcie data lines

1038
00:37:30,560 --> 00:37:31,520
and

1039
00:37:31,520 --> 00:37:33,520
so without further ado

1040
00:37:33,520 --> 00:37:36,400
uh what we're looking at now this is a

1041
00:37:36,400 --> 00:37:39,920
live feed from picoscope 6824e

1042
00:37:39,920 --> 00:37:42,960
looking at the pcie clock and so from

1043
00:37:42,960 --> 00:37:44,480
this view it pretty much just looks like

1044
00:37:44,480 --> 00:37:47,440
a sine wave or a slightly rounded square

1045
00:37:47,440 --> 00:37:49,839
wave you can't see too much detail and

1046
00:37:49,839 --> 00:37:51,920
uh zooming out a bit uh you can see

1047
00:37:51,920 --> 00:37:52,960
we've got a fair bit of a day right now

1048
00:37:52,960 --> 00:37:54,320
it's 200 microseconds we're still

1049
00:37:54,320 --> 00:37:56,720
getting 15 waveforms per second so again

1050
00:37:56,720 --> 00:37:57,920
the streaming performance of the

1051
00:37:57,920 --> 00:37:59,920
picoscope is way better than anything

1052
00:37:59,920 --> 00:38:01,920
else that i've used

1053
00:38:01,920 --> 00:38:03,680
um so if you want to see a little bit

1054
00:38:03,680 --> 00:38:05,920
more detail we can go take a look at an

1055
00:38:05,920 --> 00:38:08,880
fft and uh nothing really too exciting

1056
00:38:08,880 --> 00:38:10,240
we can see we've got our 100 megahertz

1057
00:38:10,240 --> 00:38:12,000
fundamentals got all of the harmonics

1058
00:38:12,000 --> 00:38:13,359
and then we got an interleaving spirit

1059
00:38:13,359 --> 00:38:15,599
1.25 gigahertz and there's probably one

1060
00:38:15,599 --> 00:38:18,880
at 2.5 as well uh yep there's a little

1061
00:38:18,880 --> 00:38:20,720
bit of a smart 2.5 gig as well again

1062
00:38:20,720 --> 00:38:22,160
because uh we're looking at interleaved

1063
00:38:22,160 --> 00:38:25,440
1.25 gigahertz now if we

1064
00:38:25,440 --> 00:38:26,880
jump back to

1065
00:38:26,880 --> 00:38:28,640
and apparently i did temp the demo

1066
00:38:28,640 --> 00:38:29,920
guards a little too much it decided to

1067
00:38:29,920 --> 00:38:33,839
take fault on me so be right back

1068
00:38:37,280 --> 00:38:38,480
this is what happens when you do live

1069
00:38:38,480 --> 00:38:40,640
demos

1070
00:38:40,640 --> 00:38:42,400
so now you get to go watch me set it up

1071
00:38:42,400 --> 00:38:44,160
so we're going to just set our coupling

1072
00:38:44,160 --> 00:38:47,200
to 50 ohms we're using a

1073
00:38:47,200 --> 00:38:48,720
10x

1074
00:38:48,720 --> 00:38:50,400
probe and we're going to be running at

1075
00:38:50,400 --> 00:38:53,040
10 bit resolution and then we can just

1076
00:38:53,040 --> 00:38:54,960
zoom in a little bit more and we've got

1077
00:38:54,960 --> 00:38:56,800
our waveform back and we're going to

1078
00:38:56,800 --> 00:38:59,760
bump up to 5 giga samples per second and

1079
00:38:59,760 --> 00:39:01,520
we're back where we were

1080
00:39:01,520 --> 00:39:02,960
so you can see it's very quick to go set

1081
00:39:02,960 --> 00:39:04,800
things up um

1082
00:39:04,800 --> 00:39:07,200
now so if we go to rf and want to take a

1083
00:39:07,200 --> 00:39:09,680
look at a spectrogram of the signal we

1084
00:39:09,680 --> 00:39:11,200
can go adjust

1085
00:39:11,200 --> 00:39:12,640
say well we'll keep a blackman harris

1086
00:39:12,640 --> 00:39:15,760
window and we'll do say minus 100 dbm as

1087
00:39:15,760 --> 00:39:18,560
the low end and we'll go up to maybe 8k

1088
00:39:18,560 --> 00:39:19,599
points

1089
00:39:19,599 --> 00:39:20,480
and

1090
00:39:20,480 --> 00:39:23,280
play with our color ramp a little bit to

1091
00:39:23,280 --> 00:39:25,040
get something a little easier to see and

1092
00:39:25,040 --> 00:39:26,800
so again we can see nice straight lines

1093
00:39:26,800 --> 00:39:31,200
at all of our harmonics and we've got

1094
00:39:31,760 --> 00:39:33,440
our 100 megahertz fundamental showing

1095
00:39:33,440 --> 00:39:35,440
through very clearly but what you are

1096
00:39:35,440 --> 00:39:37,520
not seeing in this case

1097
00:39:37,520 --> 00:39:39,760
is the fact that this is actually a

1098
00:39:39,760 --> 00:39:41,520
spread spectrum clock and the modulation

1099
00:39:41,520 --> 00:39:42,720
doesn't really show up yes maybe a

1100
00:39:42,720 --> 00:39:44,160
little bit of waviness showing up there

1101
00:39:44,160 --> 00:39:45,200
but it's kind of hard to see in the

1102
00:39:45,200 --> 00:39:48,800
spectrogram and so we can do instead is

1103
00:39:48,800 --> 00:39:51,200
we can go to the measurement menu select

1104
00:39:51,200 --> 00:39:54,640
frequency and graph and now we've got a

1105
00:39:54,640 --> 00:39:57,040
graph of instantaneous frequency across

1106
00:39:57,040 --> 00:39:58,800
time of the waveform and it's bouncing

1107
00:39:58,800 --> 00:40:00,160
around a little bit because we got some

1108
00:40:00,160 --> 00:40:02,400
noise and so we can do is just do a

1109
00:40:02,400 --> 00:40:04,560
moving average we're going to do say

1110
00:40:04,560 --> 00:40:06,400
250

1111
00:40:06,400 --> 00:40:07,920
samples

1112
00:40:07,920 --> 00:40:10,319
and delete that and so if i just pause

1113
00:40:10,319 --> 00:40:11,920
so it's a little easier to see so now we

1114
00:40:11,920 --> 00:40:14,800
can see the frequency of the pcie

1115
00:40:14,800 --> 00:40:18,240
reference clock versus time and go to a

1116
00:40:18,240 --> 00:40:20,000
cursor we can go and measure our

1117
00:40:20,000 --> 00:40:22,160
frequency of this and so we're looking

1118
00:40:22,160 --> 00:40:26,800
at a modulation of about 31 32 kilohertz

1119
00:40:26,800 --> 00:40:28,640
frequency

1120
00:40:28,640 --> 00:40:29,920
and

1121
00:40:29,920 --> 00:40:31,920
with a depth

1122
00:40:31,920 --> 00:40:33,760
of

1123
00:40:33,760 --> 00:40:35,920
about

1124
00:40:35,920 --> 00:40:38,880
400-ish kilohertz in difference in

1125
00:40:38,880 --> 00:40:41,040
frequency between our min and max and so

1126
00:40:41,040 --> 00:40:42,960
again we can also just do a single

1127
00:40:42,960 --> 00:40:44,319
horizontal person so we can see we've

1128
00:40:44,319 --> 00:40:46,880
got basically about 100 megahertz at the

1129
00:40:46,880 --> 00:40:49,680
peak and then it dips down to about 99.5

1130
00:40:49,680 --> 00:40:52,000
megahertz and so this is this is fairly

1131
00:40:52,000 --> 00:40:55,680
common with pcia because it's used to

1132
00:40:55,680 --> 00:40:57,760
reduce emi by spreading out peaks rather

1133
00:40:57,760 --> 00:40:59,280
than having a single strong spectral

1134
00:40:59,280 --> 00:41:01,200
line at any one frequency

1135
00:41:01,200 --> 00:41:03,680
and so this is an example of where high

1136
00:41:03,680 --> 00:41:05,200
streaming throughput is really handy

1137
00:41:05,200 --> 00:41:07,680
because you can do really long captures

1138
00:41:07,680 --> 00:41:08,720
in this case we're looking at a million

1139
00:41:08,720 --> 00:41:10,160
points let's see if we can buff up more

1140
00:41:10,160 --> 00:41:13,598
let's do 20 million points

1141
00:41:13,760 --> 00:41:16,079
and so here let's zoom out a little bit

1142
00:41:16,079 --> 00:41:17,040
more

1143
00:41:17,040 --> 00:41:18,880
and so now we're getting about three

1144
00:41:18,880 --> 00:41:20,400
waveforms per second streaming 20

1145
00:41:20,400 --> 00:41:22,319
million points and again looking at the

1146
00:41:22,319 --> 00:41:24,640
spread spectrum modulation over time so

1147
00:41:24,640 --> 00:41:26,000
having deep memory and good stream

1148
00:41:26,000 --> 00:41:28,160
performance is really nice for that um

1149
00:41:28,160 --> 00:41:30,000
unfortunately sometimes that's not

1150
00:41:30,000 --> 00:41:32,000
enough and you just want raw bandwidth

1151
00:41:32,000 --> 00:41:34,079
to look at higher speed stuff so now

1152
00:41:34,079 --> 00:41:35,680
we're going to jump to another scope my

1153
00:41:35,680 --> 00:41:37,680
bench this is a

1154
00:41:37,680 --> 00:41:39,599
crashed again lovely

1155
00:41:39,599 --> 00:41:40,880
like i said we haven't released it yet

1156
00:41:40,880 --> 00:41:42,960
this is still a work in progress

1157
00:41:42,960 --> 00:41:45,359
all right so now we're connected to a

1158
00:41:45,359 --> 00:41:48,400
lacroix sda 816 a 16 gigahertz serial

1159
00:41:48,400 --> 00:41:50,079
data analyzer on the other side of my

1160
00:41:50,079 --> 00:41:51,599
bench and we're looking at the output of

1161
00:41:51,599 --> 00:41:53,359
that differential probe across the pcie

1162
00:41:53,359 --> 00:41:56,079
signals so zooming in a bit we can see

1163
00:41:56,079 --> 00:41:58,319
details of the individual waveforms uh

1164
00:41:58,319 --> 00:41:59,920
we can go do a bit of quick signal

1165
00:41:59,920 --> 00:42:01,040
target analysis before we look at

1166
00:42:01,040 --> 00:42:03,440
anything else so we can pull a recovery

1167
00:42:03,440 --> 00:42:05,839
clock off here this is pcie gen2 so it

1168
00:42:05,839 --> 00:42:08,079
is nominally five gigahertz

1169
00:42:08,079 --> 00:42:09,119
and

1170
00:42:09,119 --> 00:42:10,480
we can do

1171
00:42:10,480 --> 00:42:13,040
an eye pattern of that we'll just do

1172
00:42:13,040 --> 00:42:15,040
that in the recovered clock and there's

1173
00:42:15,040 --> 00:42:17,119
our eye pattern we can change our color

1174
00:42:17,119 --> 00:42:18,960
amp a little bit i like this one and so

1175
00:42:18,960 --> 00:42:19,839
we can see there's a little bit of

1176
00:42:19,839 --> 00:42:21,680
overshoot a little bit of uh ringing

1177
00:42:21,680 --> 00:42:23,839
there is emphasis on the line so that's

1178
00:42:23,839 --> 00:42:25,280
not too surprising but the eye is pretty

1179
00:42:25,280 --> 00:42:26,720
open

1180
00:42:26,720 --> 00:42:28,160
uh we're not interested in signal

1181
00:42:28,160 --> 00:42:29,680
integrity today we're doing more reverse

1182
00:42:29,680 --> 00:42:31,119
engineering focus and so let's see if we

1183
00:42:31,119 --> 00:42:33,440
can actually get some data off of this

1184
00:42:33,440 --> 00:42:35,599
so we're going to threshold our analog

1185
00:42:35,599 --> 00:42:38,160
waveform to get a digital waveform and

1186
00:42:38,160 --> 00:42:43,599
then we can decode the 8b 10b coding

1187
00:42:43,599 --> 00:42:45,599
and so if we just pause for a second and

1188
00:42:45,599 --> 00:42:47,119
zoom in on some of the spots we can look

1189
00:42:47,119 --> 00:42:49,040
at the raw 8b10b characters over the

1190
00:42:49,040 --> 00:42:50,160
launch so we can see we got a burst of

1191
00:42:50,160 --> 00:42:51,520
control characters and we got some data

1192
00:42:51,520 --> 00:42:53,200
but nothing really too interesting at

1193
00:42:53,200 --> 00:42:54,560
this layer

1194
00:42:54,560 --> 00:42:58,319
so then we can go to pcie and

1195
00:42:58,319 --> 00:43:00,319
decode that so now we can see we got a

1196
00:43:00,319 --> 00:43:02,960
skip we got a bunch of logical idles uh

1197
00:43:02,960 --> 00:43:04,560
and then there's okay so we got a little

1198
00:43:04,560 --> 00:43:06,720
bit of traffic over here

1199
00:43:06,720 --> 00:43:08,800
so we got a data link layer packet we

1200
00:43:08,800 --> 00:43:10,079
got a little bit of traffic and again

1201
00:43:10,079 --> 00:43:11,520
we're just looking at hexd codes right

1202
00:43:11,520 --> 00:43:13,599
now so we can decode that up one more

1203
00:43:13,599 --> 00:43:16,240
layer and look at the data link

1204
00:43:16,240 --> 00:43:18,640
and we can also

1205
00:43:18,640 --> 00:43:20,960
decode all the way up to the tlp layer

1206
00:43:20,960 --> 00:43:22,720
but there's no tlps in this particular

1207
00:43:22,720 --> 00:43:25,040
waveform so there's nothing to see yet

1208
00:43:25,040 --> 00:43:28,000
and so again we're looking at the pcie

1209
00:43:28,000 --> 00:43:30,560
going to the usb controller on the pi

1210
00:43:30,560 --> 00:43:32,000
and so if we wanted to see a little bit

1211
00:43:32,000 --> 00:43:34,400
more i'm just going to start a webcam

1212
00:43:34,400 --> 00:43:36,319
that is plugged into

1213
00:43:36,319 --> 00:43:38,480
that um

1214
00:43:38,480 --> 00:43:40,160
usb port and we should start seeing some

1215
00:43:40,160 --> 00:43:41,920
more traffic so i'm just going to open i

1216
00:43:41,920 --> 00:43:45,760
believe it's dev video 0 on the pi

1217
00:43:45,760 --> 00:43:49,680
and i've now got video showing up on my

1218
00:43:49,680 --> 00:43:51,440
vlc session

1219
00:43:51,440 --> 00:43:54,720
so we can see here this is a live feed

1220
00:43:54,720 --> 00:43:57,040
from the webcam sitting on the bench

1221
00:43:57,040 --> 00:43:59,520
and now we can start up our scope and

1222
00:43:59,520 --> 00:44:02,160
start seeing some more traffic

1223
00:44:02,160 --> 00:44:06,279
oh lovely crushing me again

1224
00:44:28,079 --> 00:44:30,240
so we got that and we're just going to

1225
00:44:30,240 --> 00:44:32,240
pull up our data link layer we got a lot

1226
00:44:32,240 --> 00:44:33,680
more traffic now i'm just going to pause

1227
00:44:33,680 --> 00:44:36,560
so it stops flashing so much and we can

1228
00:44:36,560 --> 00:44:39,119
go to

1229
00:44:45,680 --> 00:44:47,520
we can go to our tlp layer all right

1230
00:44:47,520 --> 00:44:50,640
here we go so now we caught a tlp so

1231
00:44:50,640 --> 00:44:52,880
we can zoom out a little bit and just

1232
00:44:52,880 --> 00:44:54,640
use the product analyzer to navigate so

1233
00:44:54,640 --> 00:44:57,920
if we want to see a memrite tlp we can

1234
00:44:57,920 --> 00:44:59,680
zoom in all the way here we've got our

1235
00:44:59,680 --> 00:45:01,760
sequence number bem right traffic class

1236
00:45:01,760 --> 00:45:04,400
zero no flags length of four coming from

1237
00:45:04,400 --> 00:45:05,760
device zero because it's the only other

1238
00:45:05,760 --> 00:45:07,359
thing on the pcie there's no bridging on

1239
00:45:07,359 --> 00:45:08,480
the pi

1240
00:45:08,480 --> 00:45:10,800
uh we've got our list of bytes our

1241
00:45:10,800 --> 00:45:13,599
virtual address and then the four bytes

1242
00:45:13,599 --> 00:45:15,359
actually being written and then we can

1243
00:45:15,359 --> 00:45:17,520
go back to the data link layer and we

1244
00:45:17,520 --> 00:45:19,440
can see mostly flow control packets

1245
00:45:19,440 --> 00:45:22,400
we've got um there's a tlp in here here

1246
00:45:22,400 --> 00:45:25,119
okay so we got another tlp here

1247
00:45:25,119 --> 00:45:26,640
and same thing

1248
00:45:26,640 --> 00:45:28,800
so we've got the raw data coming through

1249
00:45:28,800 --> 00:45:31,119
and then we can go and look down to the

1250
00:45:31,119 --> 00:45:32,720
data link layer we can see the sequence

1251
00:45:32,720 --> 00:45:34,800
number we can see if we go to the end

1252
00:45:34,800 --> 00:45:37,599
we've got the crc then we've got flow

1253
00:45:37,599 --> 00:45:39,920
control updates and so on

1254
00:45:39,920 --> 00:45:41,599
so it's not going to replace a full pcie

1255
00:45:41,599 --> 00:45:43,119
product analyzer but if you got a fast

1256
00:45:43,119 --> 00:45:44,480
scope and you want to look at the

1257
00:45:44,480 --> 00:45:46,079
capture it is nice to be able to do this

1258
00:45:46,079 --> 00:45:48,319
level of decoding

1259
00:45:48,319 --> 00:45:50,640
so uh that's it for the live portion of

1260
00:45:50,640 --> 00:45:51,680
the demo now we're going to start

1261
00:45:51,680 --> 00:45:53,599
looking at some of the pre-recorded

1262
00:45:53,599 --> 00:45:56,160
material and so if any of you have

1263
00:45:56,160 --> 00:45:58,880
pulled the uh test data repository you

1264
00:45:58,880 --> 00:46:02,160
can follow along with that

1265
00:46:02,640 --> 00:46:04,720
uh does anybody have a request for a

1266
00:46:04,720 --> 00:46:06,400
specific protocol they want to see from

1267
00:46:06,400 --> 00:46:08,319
the test data repo i was thinking we

1268
00:46:08,319 --> 00:46:09,920
could start with either sd card or spy

1269
00:46:09,920 --> 00:46:12,920
flash

1270
00:46:15,440 --> 00:46:19,040
there is a request for jtag or can

1271
00:46:19,040 --> 00:46:22,160
okay uh we do have a fairly small can

1272
00:46:22,160 --> 00:46:26,440
traffic example here

1273
00:46:31,839 --> 00:46:34,800
so uh this was taken on the hdmi 204 you

1274
00:46:34,800 --> 00:46:37,520
can see we've got a couple of fairly

1275
00:46:37,520 --> 00:46:40,400
small frames it's just uh one byte of

1276
00:46:40,400 --> 00:46:42,640
data in them it looks or actually not

1277
00:46:42,640 --> 00:46:44,960
even uh so these are just empty frames

1278
00:46:44,960 --> 00:46:48,160
it looks um and then here we got a nice

1279
00:46:48,160 --> 00:46:50,400
extended frame with an id and we got

1280
00:46:50,400 --> 00:46:53,599
three bytes of data so ecfvo

1281
00:46:53,599 --> 00:46:54,960
again not too much to look at

1282
00:46:54,960 --> 00:46:57,280
unfortunately most of the can waveforms

1283
00:46:57,280 --> 00:46:58,880
i have with actually interesting data

1284
00:46:58,880 --> 00:47:00,400
are from client hardware and i can't

1285
00:47:00,400 --> 00:47:02,160
show and so this is one of the few that

1286
00:47:02,160 --> 00:47:05,200
was just some blank test data

1287
00:47:05,200 --> 00:47:07,839
i don't actually think i have a jtag

1288
00:47:07,839 --> 00:47:10,960
demo waveform handy i do have

1289
00:47:10,960 --> 00:47:14,240
an swd one

1290
00:47:20,960 --> 00:47:25,800
so if we go to embedded we've got swd

1291
00:47:30,800 --> 00:47:32,240
and so what we're looking at now this is

1292
00:47:32,240 --> 00:47:35,200
just kind of the ongoing idle of an st

1293
00:47:35,200 --> 00:47:37,280
link looking at an stm32 and i think

1294
00:47:37,280 --> 00:47:39,040
it's pulling to see whether the cpu is

1295
00:47:39,040 --> 00:47:40,960
halted if i remember correctly and so we

1296
00:47:40,960 --> 00:47:42,800
can scroll in all the way here and we

1297
00:47:42,800 --> 00:47:45,119
can see actual access to specific swd

1298
00:47:45,119 --> 00:47:46,800
registers with the individual bus

1299
00:47:46,800 --> 00:47:48,960
turnarounds and so on and then zooming

1300
00:47:48,960 --> 00:47:50,400
out looking at the next layer we've got

1301
00:47:50,400 --> 00:47:53,119
accesses to the map and then in the

1302
00:47:53,119 --> 00:47:55,040
protocolizer we've got

1303
00:47:55,040 --> 00:47:56,480
more of again kind of a high level

1304
00:47:56,480 --> 00:47:58,880
overview of what's going on and so if we

1305
00:47:58,880 --> 00:48:00,880
wanted to filter this we could search

1306
00:48:00,880 --> 00:48:04,359
for say

1307
00:48:08,480 --> 00:48:10,559
that and

1308
00:48:10,559 --> 00:48:13,119
okay i might have mistyped something

1309
00:48:13,119 --> 00:48:14,720
um

1310
00:48:14,720 --> 00:48:16,400
let's

1311
00:48:16,400 --> 00:48:20,119
oh i missed a zero

1312
00:48:21,280 --> 00:48:26,280
okay so our address was e000208

1313
00:48:27,359 --> 00:48:28,960
and so now we've filtered out just

1314
00:48:28,960 --> 00:48:30,640
access to there and we can do the same

1315
00:48:30,640 --> 00:48:35,839
thing for looking at uh say um

1316
00:48:37,200 --> 00:48:38,880
data beginning with four eight now i've

1317
00:48:38,880 --> 00:48:40,640
got our one packet where data starts

1318
00:48:40,640 --> 00:48:42,800
with four a

1319
00:48:42,800 --> 00:48:45,599
uh so now uh i was gonna jump to either

1320
00:48:45,599 --> 00:48:47,599
sd card or spyflash unless anybody has

1321
00:48:47,599 --> 00:48:50,240
requests for anything else

1322
00:48:50,240 --> 00:48:52,640
uh andrew there are two questions let me

1323
00:48:52,640 --> 00:48:54,960
read them out for you yep

1324
00:48:54,960 --> 00:48:58,079
can i integrate celia logic analyzer uh

1325
00:48:58,079 --> 00:49:02,720
analog signal with a gl scope plan so uh

1326
00:49:02,720 --> 00:49:05,520
clay support is on the wish list uh the

1327
00:49:05,520 --> 00:49:07,440
big challenge with them compared to most

1328
00:49:07,440 --> 00:49:09,599
other scopes is that

1329
00:49:09,599 --> 00:49:12,240
they have basically a very minimal stub

1330
00:49:12,240 --> 00:49:14,720
running on them and require a firmware

1331
00:49:14,720 --> 00:49:16,400
load in order to do anything

1332
00:49:16,400 --> 00:49:19,280
and there is at least for the usb 3

1333
00:49:19,280 --> 00:49:20,720
based ones i don't think there is an

1334
00:49:20,720 --> 00:49:22,160
open source firmware available for them

1335
00:49:22,160 --> 00:49:24,960
yet and so being able to use it is going

1336
00:49:24,960 --> 00:49:26,960
to require that you have the celia

1337
00:49:26,960 --> 00:49:30,000
software installed on your machine and

1338
00:49:30,000 --> 00:49:32,720
specify a path to that software so that

1339
00:49:32,720 --> 00:49:34,240
we can load the firmware from their side

1340
00:49:34,240 --> 00:49:35,920
since it's copyrighted by sale and we

1341
00:49:35,920 --> 00:49:37,280
can't distribute it

1342
00:49:37,280 --> 00:49:39,359
um so that's most likely going to be the

1343
00:49:39,359 --> 00:49:41,280
most viable option for getting support

1344
00:49:41,280 --> 00:49:43,839
the other thing is on feel for the older

1345
00:49:43,839 --> 00:49:47,520
usb 2 based ones with the fx2 uh fx2

1346
00:49:47,520 --> 00:49:49,359
logic analyzer firmware from sig rock

1347
00:49:49,359 --> 00:49:51,119
should be usable uh that's already an

1348
00:49:51,119 --> 00:49:52,480
open ticket just haven't gotten around

1349
00:49:52,480 --> 00:49:54,559
to it yet um

1350
00:49:54,559 --> 00:49:57,280
for the usb 3 celia's again assuming we

1351
00:49:57,280 --> 00:49:59,359
are using the official firmware we would

1352
00:49:59,359 --> 00:50:00,960
need to reverse engineer their usb

1353
00:50:00,960 --> 00:50:02,319
protocol because the best of my

1354
00:50:02,319 --> 00:50:05,520
knowledge is not documented and so again

1355
00:50:05,520 --> 00:50:07,200
it would be great to have if somebody

1356
00:50:07,200 --> 00:50:08,960
wants to go put the time into it that's

1357
00:50:08,960 --> 00:50:10,559
just a matter of

1358
00:50:10,559 --> 00:50:12,559
limited resources not enough developers

1359
00:50:12,559 --> 00:50:14,960
too many scopes to support so

1360
00:50:14,960 --> 00:50:16,160
definitely if anybody wants to put in

1361
00:50:16,160 --> 00:50:17,760
the time would love it

1362
00:50:17,760 --> 00:50:19,440
another question

1363
00:50:19,440 --> 00:50:21,839
maybe daniel uh can support you in

1364
00:50:21,839 --> 00:50:24,319
future uh i move move to the next

1365
00:50:24,319 --> 00:50:27,040
question andrew can you unwrap

1366
00:50:27,040 --> 00:50:31,200
manchester encoded ask rf packets

1367
00:50:31,200 --> 00:50:33,599
um there is not currently a raw

1368
00:50:33,599 --> 00:50:34,960
manchester decode we have an

1369
00:50:34,960 --> 00:50:37,040
implementation of manchester in use for

1370
00:50:37,040 --> 00:50:39,040
ken base tea

1371
00:50:39,040 --> 00:50:42,160
the challenge is that manchester is kind

1372
00:50:42,160 --> 00:50:44,640
of it's not enough to really be a

1373
00:50:44,640 --> 00:50:46,480
protocol by itself because it doesn't

1374
00:50:46,480 --> 00:50:48,800
have any uh start stop or upper level

1375
00:50:48,800 --> 00:50:50,319
framing or bite sync or anything like

1376
00:50:50,319 --> 00:50:51,680
that and so it's it's a little bit

1377
00:50:51,680 --> 00:50:53,119
challenging to decode just from

1378
00:50:53,119 --> 00:50:54,640
manchester because there's so many

1379
00:50:54,640 --> 00:50:56,160
different ways it's been implemented so

1380
00:50:56,160 --> 00:50:58,800
for example the synchronization in a lot

1381
00:50:58,800 --> 00:51:01,680
of cases is by either a um

1382
00:51:01,680 --> 00:51:04,800
analog uh differential zero or by a

1383
00:51:04,800 --> 00:51:05,920
squelch

1384
00:51:05,920 --> 00:51:09,040
or by a pulse that's too long or too

1385
00:51:09,040 --> 00:51:10,640
short and otherwise there's a protocol

1386
00:51:10,640 --> 00:51:12,640
violation and so every protocol we've

1387
00:51:12,640 --> 00:51:14,319
looked at that influence manchester does

1388
00:51:14,319 --> 00:51:15,839
it a slightly different way and so i

1389
00:51:15,839 --> 00:51:17,040
think at this point there's two or three

1390
00:51:17,040 --> 00:51:18,480
different manchester implementations in

1391
00:51:18,480 --> 00:51:20,079
libisco pal each for a specific upper

1392
00:51:20,079 --> 00:51:21,839
layer protocol and we haven't really

1393
00:51:21,839 --> 00:51:23,599
figured out a good way to abstract that

1394
00:51:23,599 --> 00:51:26,079
away to something generic so again if i

1395
00:51:26,079 --> 00:51:27,760
would love to have a generic manchester

1396
00:51:27,760 --> 00:51:29,599
decode it's just challenging because

1397
00:51:29,599 --> 00:51:30,960
there's so many different ways it's been

1398
00:51:30,960 --> 00:51:33,200
done

1399
00:51:35,520 --> 00:51:38,000
was that the last question

1400
00:51:38,000 --> 00:51:40,480
that was the last question all right so

1401
00:51:40,480 --> 00:51:42,720
now let's uh go look a little bit more

1402
00:51:42,720 --> 00:51:45,359
at some larger stuff uh

1403
00:51:45,359 --> 00:51:48,759
we can do

1404
00:51:57,680 --> 00:52:02,160
let's look at some spy flash

1405
00:52:02,160 --> 00:52:04,480
and so what we're looking at now this is

1406
00:52:04,480 --> 00:52:06,480
the uh i believe this is the boot

1407
00:52:06,480 --> 00:52:10,319
process of a uh digital zybo so it's a

1408
00:52:10,319 --> 00:52:13,119
dev board with a uh

1409
00:52:13,119 --> 00:52:17,040
xylen zinc seven fpga arm sock and so

1410
00:52:17,040 --> 00:52:18,720
looks like we've pretty much all got

1411
00:52:18,720 --> 00:52:21,520
reads and so this is an example of uh

1412
00:52:21,520 --> 00:52:23,599
where the flash product analyzer is

1413
00:52:23,599 --> 00:52:25,359
really handy compared to just using a

1414
00:52:25,359 --> 00:52:27,040
vanilla spidey code because it

1415
00:52:27,040 --> 00:52:29,760
understands both spy and quad spy and it

1416
00:52:29,760 --> 00:52:32,240
can understand from context whether

1417
00:52:32,240 --> 00:52:34,559
you're in x1 mode or x4 mode and then

1418
00:52:34,559 --> 00:52:36,720
correctly decode things accordingly and

1419
00:52:36,720 --> 00:52:38,000
so you can see again we can go all the

1420
00:52:38,000 --> 00:52:40,480
way down to the individual reads and

1421
00:52:40,480 --> 00:52:42,319
look at the addresses and the bytes on

1422
00:52:42,319 --> 00:52:43,839
the wire or we can jump up to the

1423
00:52:43,839 --> 00:52:48,079
protocols or view we can go find say

1424
00:52:48,079 --> 00:52:49,839
the first large read where it starts

1425
00:52:49,839 --> 00:52:52,800
reading bulk data you can then switch to

1426
00:52:52,800 --> 00:52:56,800
cursors and measure the delay from that

1427
00:52:56,800 --> 00:52:58,240
read to this read and determine say

1428
00:52:58,240 --> 00:52:59,680
maybe there's an area in there that's of

1429
00:52:59,680 --> 00:53:02,480
interest for power analysis

1430
00:53:02,480 --> 00:53:04,559
i have some really nice data sets that

1431
00:53:04,559 --> 00:53:05,920
unfortunately again i can't share

1432
00:53:05,920 --> 00:53:09,040
because they're client related

1433
00:53:10,240 --> 00:53:13,520
in which i have a full trace of a spy

1434
00:53:13,520 --> 00:53:15,839
flash during secure boot of a embedded

1435
00:53:15,839 --> 00:53:18,640
device as well as a power trace from a

1436
00:53:18,640 --> 00:53:21,200
power rail probe looking at activity on

1437
00:53:21,200 --> 00:53:22,160
there

1438
00:53:22,160 --> 00:53:24,160
and it's just beautiful how you can see

1439
00:53:24,160 --> 00:53:26,880
the spy bus activity and then suddenly

1440
00:53:26,880 --> 00:53:28,400
start seeing a bunch of new spectra

1441
00:53:28,400 --> 00:53:30,319
lines in the spectrogram showing up

1442
00:53:30,319 --> 00:53:32,079
where the uh

1443
00:53:32,079 --> 00:53:34,480
check summing and hashing and then the

1444
00:53:34,480 --> 00:53:37,040
aes decryption happens and it's it's

1445
00:53:37,040 --> 00:53:38,400
really nice to be able to go through and

1446
00:53:38,400 --> 00:53:39,839
see all that time correlated again

1447
00:53:39,839 --> 00:53:41,359
unfortunately i just wasn't able to come

1448
00:53:41,359 --> 00:53:43,839
up with any uh shareable examples of

1449
00:53:43,839 --> 00:53:46,078
that

1450
00:53:50,640 --> 00:53:53,119
and uh the flash decoders if we pull up

1451
00:53:53,119 --> 00:53:54,720
examples of here so uh we do have the

1452
00:53:54,720 --> 00:53:56,720
ability to dump raw flash traffic as

1453
00:53:56,720 --> 00:53:57,599
well

1454
00:53:57,599 --> 00:53:59,280
um and you can select different types of

1455
00:53:59,280 --> 00:54:00,800
flash you can do three byte address four

1456
00:54:00,800 --> 00:54:03,359
byte address or uh the winbond w25n is

1457
00:54:03,359 --> 00:54:05,520
actually nand flash that uses a mostly

1458
00:54:05,520 --> 00:54:07,760
compatible command set uh conventional

1459
00:54:07,760 --> 00:54:10,720
zx5 it's a little bit different and so

1460
00:54:10,720 --> 00:54:11,839
we needed to implement that as a

1461
00:54:11,839 --> 00:54:14,480
separate type

1462
00:54:14,640 --> 00:54:16,960
ah let's see what are some other nice

1463
00:54:16,960 --> 00:54:21,040
things that we can demonstrate

1464
00:54:21,599 --> 00:54:24,559
there was one more question from ben

1465
00:54:24,559 --> 00:54:27,200
can we import logic capture to use

1466
00:54:27,200 --> 00:54:29,280
decoders without a scope

1467
00:54:29,280 --> 00:54:31,359
uh yes so uh

1468
00:54:31,359 --> 00:54:34,480
waveforms can be imported from uh i

1469
00:54:34,480 --> 00:54:36,640
mentioned in the slides um agilent

1470
00:54:36,640 --> 00:54:40,799
keysight and rygall um binary files

1471
00:54:40,799 --> 00:54:45,200
um wav files vcds and csvs are the

1472
00:54:45,200 --> 00:54:47,440
supported formats right now um also i i

1473
00:54:47,440 --> 00:54:49,839
didn't mention the slides uh it can also

1474
00:54:49,839 --> 00:54:52,400
support uh importing raw iq files from

1475
00:54:52,400 --> 00:54:53,839
something like new radio so if you just

1476
00:54:53,839 --> 00:54:57,040
got iq iq in float 32 or in date format

1477
00:54:57,040 --> 00:54:59,359
or something you can import that too um

1478
00:54:59,359 --> 00:55:00,720
i'm also talking with some of the new

1479
00:55:00,720 --> 00:55:02,400
radio folks about better interoperation

1480
00:55:02,400 --> 00:55:04,720
between uh just go client and canoe

1481
00:55:04,720 --> 00:55:06,160
radio in both directions so being able

1482
00:55:06,160 --> 00:55:08,480
to use a scope as a direct rf sampling

1483
00:55:08,480 --> 00:55:11,440
receiver or being able to do upper level

1484
00:55:11,440 --> 00:55:13,119
protocol analysis and just go applying

1485
00:55:13,119 --> 00:55:15,599
after you've demodulated something radio

1486
00:55:15,599 --> 00:55:16,640
um

1487
00:55:16,640 --> 00:55:18,480
so interrupt there is coming as well but

1488
00:55:18,480 --> 00:55:20,960
yeah there there is uh support for

1489
00:55:20,960 --> 00:55:22,720
offline analysis all these data files

1490
00:55:22,720 --> 00:55:24,480
i'm working at are in the scope how test

1491
00:55:24,480 --> 00:55:26,240
data repo so anybody who wants can go

1492
00:55:26,240 --> 00:55:27,680
pull these files and play around with

1493
00:55:27,680 --> 00:55:29,920
them and look at them uh the native file

1494
00:55:29,920 --> 00:55:32,400
format is the most full feature because

1495
00:55:32,400 --> 00:55:33,680
it supports all the user interface

1496
00:55:33,680 --> 00:55:36,319
configuration and so on as well uh but

1497
00:55:36,319 --> 00:55:37,680
certainly again we can import from a

1498
00:55:37,680 --> 00:55:39,359
bunch of other formats

1499
00:55:39,359 --> 00:55:40,640
you can get pretty much anything as a

1500
00:55:40,640 --> 00:55:43,680
raw csv so just first column is time

1501
00:55:43,680 --> 00:55:45,839
stamps in seconds and then after there

1502
00:55:45,839 --> 00:55:48,960
is voltage values

1503
00:55:48,960 --> 00:55:51,839
there is another comment question uh

1504
00:55:51,839 --> 00:55:53,200
from peter

1505
00:55:53,200 --> 00:55:55,280
any support for automation scripting or

1506
00:55:55,280 --> 00:55:56,799
plugins

1507
00:55:56,799 --> 00:56:00,240
um yes so there is support for uh

1508
00:56:00,240 --> 00:56:02,240
plugins in jessica client that are

1509
00:56:02,240 --> 00:56:04,640
generally registering new decodes new

1510
00:56:04,640 --> 00:56:07,359
instrument drivers and so on uh the ui

1511
00:56:07,359 --> 00:56:09,680
itself is not currently scriptable uh

1512
00:56:09,680 --> 00:56:12,640
the current model is built around the

1513
00:56:12,640 --> 00:56:15,040
api itself being the primary interface

1514
00:56:15,040 --> 00:56:16,000
for working with things so if you're

1515
00:56:16,000 --> 00:56:17,920
doing offline testing or so on you're

1516
00:56:17,920 --> 00:56:19,040
typically going to be building some kind

1517
00:56:19,040 --> 00:56:20,720
of a complicated test setup that's maybe

1518
00:56:20,720 --> 00:56:23,119
even interfacing with other hardware and

1519
00:56:23,119 --> 00:56:24,720
so you'll just be calling methods in

1520
00:56:24,720 --> 00:56:27,520
libscope pal and directly calling uh

1521
00:56:27,520 --> 00:56:29,200
functions on the scope in order to be

1522
00:56:29,200 --> 00:56:30,960
able to configure things or working

1523
00:56:30,960 --> 00:56:33,119
directly with decode objects uh there

1524
00:56:33,119 --> 00:56:34,640
has been talk of setting up some kind of

1525
00:56:34,640 --> 00:56:36,480
a python binder something for scripting

1526
00:56:36,480 --> 00:56:38,960
of the ui uh that might be coming later

1527
00:56:38,960 --> 00:56:41,839
on but uh certainly not in 0.1 or any of

1528
00:56:41,839 --> 00:56:44,240
the immediate releases uh the focus

1529
00:56:44,240 --> 00:56:46,640
again has been more on supporting

1530
00:56:46,640 --> 00:56:49,040
plug-ins for features for new decodes

1531
00:56:49,040 --> 00:56:51,759
and new instruments

1532
00:56:55,599 --> 00:56:58,319
any other questions before i continue no

1533
00:56:58,319 --> 00:57:00,640
peter just says thank you okay

1534
00:57:00,640 --> 00:57:02,319
all right so now let's take a look uh

1535
00:57:02,319 --> 00:57:06,160
here's some pcie

1536
00:57:08,319 --> 00:57:09,599
so what we're looking at here this is

1537
00:57:09,599 --> 00:57:11,839
actually quite interesting so this is a

1538
00:57:11,839 --> 00:57:16,400
test waveform of a pcie network card and

1539
00:57:16,400 --> 00:57:17,680
so

1540
00:57:17,680 --> 00:57:20,480
we're looking at traffic flowing from

1541
00:57:20,480 --> 00:57:23,599
the host pc to uh this is an intel one

1542
00:57:23,599 --> 00:57:26,240
gigabit nic so we're looking at the tlps

1543
00:57:26,240 --> 00:57:28,559
coming out sending the packet and then

1544
00:57:28,559 --> 00:57:30,799
the actual ethernet frame coming at us

1545
00:57:30,799 --> 00:57:31,760
we're looking at the delays we've got

1546
00:57:31,760 --> 00:57:34,400
300 nanoseconds of delay from the end of

1547
00:57:34,400 --> 00:57:36,720
the frame being sent over pcie until the

1548
00:57:36,720 --> 00:57:38,799
frame starts going out over the wire

1549
00:57:38,799 --> 00:57:42,319
so we can zoom in here on the tlp and we

1550
00:57:42,319 --> 00:57:44,960
can start seeing some actual traffic uh

1551
00:57:44,960 --> 00:57:48,079
this looks like still a part of it um

1552
00:57:48,079 --> 00:57:51,760
okay here we go so we're looking at um

1553
00:57:51,760 --> 00:57:53,280
let's say

1554
00:57:53,280 --> 00:57:55,200
four or five so do we actually have vip

1555
00:57:55,200 --> 00:57:56,960
header visibility okay here we go

1556
00:57:56,960 --> 00:57:58,240
uh okay

1557
00:57:58,240 --> 00:57:59,760
so

1558
00:57:59,760 --> 00:58:01,359
so yeah we're looking at the actual

1559
00:58:01,359 --> 00:58:05,119
contents of the uh frame going out in

1560
00:58:05,119 --> 00:58:06,880
the um

1561
00:58:06,880 --> 00:58:08,559
pcie layer here so we're looking at we

1562
00:58:08,559 --> 00:58:09,720
got

1563
00:58:09,720 --> 00:58:13,119
4500 so this is the ipv4 header we got

1564
00:58:13,119 --> 00:58:16,160
ipv4 five words header and then going

1565
00:58:16,160 --> 00:58:20,079
out we got our contents um we got some

1566
00:58:20,079 --> 00:58:22,799
addressing information somewhere in here

1567
00:58:22,799 --> 00:58:25,280
and then we start seeing the payload of

1568
00:58:25,280 --> 00:58:30,240
a linux ping packet so 1.0112 etc um

1569
00:58:30,240 --> 00:58:32,079
then at the end of that it looks like

1570
00:58:32,079 --> 00:58:34,160
the remainder was sent in a second tlp

1571
00:58:34,160 --> 00:58:35,599
that probably actually sends the frame

1572
00:58:35,599 --> 00:58:38,319
maybe has a crc in it

1573
00:58:38,319 --> 00:58:40,960
and then moving forward in time again a

1574
00:58:40,960 --> 00:58:43,200
little bit more we start seeing the

1575
00:58:43,200 --> 00:58:45,680
actual frame going out on the wire so we

1576
00:58:45,680 --> 00:58:48,640
got our preamble we got our destination

1577
00:58:48,640 --> 00:58:51,280
and source addresses we got our type and

1578
00:58:51,280 --> 00:58:53,839
then we start seeing actual ipv4 framing

1579
00:58:53,839 --> 00:58:57,200
going out over to wire ip source test

1580
00:58:57,200 --> 00:58:59,119
and then we start seeing our payload

1581
00:58:59,119 --> 00:59:01,359
here

1582
00:59:01,599 --> 00:59:03,200
and then we can look at this again in

1583
00:59:03,200 --> 00:59:06,079
the product analyzer view we can see the

1584
00:59:06,079 --> 00:59:09,440
raw packets in the plp analyzer and then

1585
00:59:09,440 --> 00:59:12,079
we can jump up to the ethernet product

1586
00:59:12,079 --> 00:59:16,480
analyzer and see that as well

1587
00:59:17,680 --> 00:59:19,280
and then you can start even lining up

1588
00:59:19,280 --> 00:59:20,799
between the different packets so we can

1589
00:59:20,799 --> 00:59:24,079
see this was at um

1590
00:59:24,880 --> 00:59:28,640
and so we got 45054

1591
00:59:28,640 --> 00:59:30,319
and then okay so there's our sequence

1592
00:59:30,319 --> 00:59:32,640
number i think maybe um

1593
00:59:32,640 --> 00:59:35,520
three nine okay so yep we're looking at

1594
00:59:35,520 --> 00:59:37,520
that one i think and so we can see the

1595
00:59:37,520 --> 00:59:40,480
actual contents of the pcie tlp are

1596
00:59:40,480 --> 00:59:41,599
being spit out here you can figure out

1597
00:59:41,599 --> 00:59:44,319
where the headers are for the uh traffic

1598
00:59:44,319 --> 00:59:47,839
that the network card is looking at

1599
00:59:53,200 --> 00:59:55,200
uh the let's see what are some other

1600
00:59:55,200 --> 00:59:57,839
nice uh examples uh sd card is another

1601
00:59:57,839 --> 01:00:00,400
good one that i've used a fair bit

1602
01:00:00,400 --> 01:00:03,359
so we've got sd command and data bus

1603
01:00:03,359 --> 01:00:06,400
viewed separately

1604
01:00:10,720 --> 01:00:12,799
we can see on the command bus where it

1605
01:00:12,799 --> 01:00:14,880
first starts initializing the card

1606
01:00:14,880 --> 01:00:16,880
there's a bunch of polling so the

1607
01:00:16,880 --> 01:00:18,480
protocol analyzer actually lets you

1608
01:00:18,480 --> 01:00:20,880
collapse packets that are related so in

1609
01:00:20,880 --> 01:00:22,880
this case for example um

1610
01:00:22,880 --> 01:00:25,040
if we're polling for a bunch of stuff to

1611
01:00:25,040 --> 01:00:27,760
happen um like here you can see there's

1612
01:00:27,760 --> 01:00:29,280
a whole bunch of polling where it starts

1613
01:00:29,280 --> 01:00:30,960
checking waiting to say the card still

1614
01:00:30,960 --> 01:00:32,319
says busy and so it just keeps on

1615
01:00:32,319 --> 01:00:33,359
polling

1616
01:00:33,359 --> 01:00:35,760
but all of this gets collapsed into a

1617
01:00:35,760 --> 01:00:38,799
single transaction in the view and so

1618
01:00:38,799 --> 01:00:40,079
you can just skip over all that if you

1619
01:00:40,079 --> 01:00:41,440
just want to know that sends opcon then

1620
01:00:41,440 --> 01:00:43,839
we do all send card id and so you can

1621
01:00:43,839 --> 01:00:45,280
see it

1622
01:00:45,280 --> 01:00:47,200
since the card id there's no data going

1623
01:00:47,200 --> 01:00:49,200
out then we've got the reply to the sim

1624
01:00:49,200 --> 01:00:50,960
card id so that's the serial number for

1625
01:00:50,960 --> 01:00:55,079
the card that we're looking at right now

1626
01:00:58,079 --> 01:00:59,680
all right

1627
01:00:59,680 --> 01:01:01,359
anybody want to see any other particular

1628
01:01:01,359 --> 01:01:03,440
examples or

1629
01:01:03,440 --> 01:01:07,200
more questions about the std code

1630
01:01:08,000 --> 01:01:10,720
i don't see any more questions but uh

1631
01:01:10,720 --> 01:01:12,799
andrew just heads up that we are almost

1632
01:01:12,799 --> 01:01:16,000
nearing time so yeah all right perfect

1633
01:01:16,000 --> 01:01:17,440
all right if we want to wrap up now then

1634
01:01:17,440 --> 01:01:19,920
let's do that

1635
01:01:20,079 --> 01:01:22,079
i mean uh if you still have stuff to

1636
01:01:22,079 --> 01:01:24,000
show you can but

1637
01:01:24,000 --> 01:01:25,599
i mean i can keep on going for hours

1638
01:01:25,599 --> 01:01:26,960
it's more question of what the audience

1639
01:01:26,960 --> 01:01:28,960
wants to see

1640
01:01:28,960 --> 01:01:30,799
audience should be uh

1641
01:01:30,799 --> 01:01:32,960
okay so he has a question let him type a

1642
01:01:32,960 --> 01:01:34,319
question

1643
01:01:34,319 --> 01:01:36,640
do we see this level of performance on

1644
01:01:36,640 --> 01:01:39,680
pcie consistently

1645
01:01:39,680 --> 01:01:40,880
um

1646
01:01:40,880 --> 01:01:42,319
so could you clarify you mean level of

1647
01:01:42,319 --> 01:01:44,880
performance

1648
01:01:45,760 --> 01:01:48,400
so heat would you like to rephrase it

1649
01:01:48,400 --> 01:01:49,710
explain a little bit more

1650
01:01:49,710 --> 01:01:51,200
[Music]

1651
01:01:51,200 --> 01:01:54,399
regarding the tlvs

1652
01:01:57,440 --> 01:01:58,960
i'm still not quite clear what he's

1653
01:01:58,960 --> 01:02:00,160
asking about

1654
01:02:00,160 --> 01:02:02,000
in terms of throughput how fast it

1655
01:02:02,000 --> 01:02:06,119
decodes them or

1656
01:02:09,200 --> 01:02:11,839
okay uh until then uh we'll take the

1657
01:02:11,839 --> 01:02:14,880
next question from nicolas

1658
01:02:14,880 --> 01:02:17,200
what scope do you use to capture this

1659
01:02:17,200 --> 01:02:19,119
data again

1660
01:02:19,119 --> 01:02:21,680
uh so it's all in the title bar up top

1661
01:02:21,680 --> 01:02:23,839
you can see the info so the sd card data

1662
01:02:23,839 --> 01:02:25,280
set right now i'm looking at is from a

1663
01:02:25,280 --> 01:02:28,559
la crosse waverunner 8000 series um the

1664
01:02:28,559 --> 01:02:31,119
pcie uh that i was just looking at is an

1665
01:02:31,119 --> 01:02:34,000
sd86 if we go back to the live view on

1666
01:02:34,000 --> 01:02:36,559
that so now we're looking at live feed

1667
01:02:36,559 --> 01:02:40,160
from the sda 816

1668
01:02:45,119 --> 01:02:48,000
in my lab at home right now i've got the

1669
01:02:48,000 --> 01:02:52,640
uh sdi 816 i've got a uh waiver

1670
01:02:53,680 --> 01:02:56,640
oh sorry not for you

1671
01:02:56,640 --> 01:02:59,520
uh so i've got a uh lacroix waverunner

1672
01:02:59,520 --> 01:03:02,720
8000 series 4 gigahertz the lacroix sda

1673
01:03:02,720 --> 01:03:03,760
uh

1674
01:03:03,760 --> 01:03:06,720
16 gigahertz then a 500 megahertz

1675
01:03:06,720 --> 01:03:10,319
picoscope 6824 uh uh digital and alloy

1676
01:03:10,319 --> 01:03:12,640
discovery pro uh then the baseline

1677
01:03:12,640 --> 01:03:15,960
analog discovery

1678
01:03:21,920 --> 01:03:24,160
and so just as a quick uh demo well

1679
01:03:24,160 --> 01:03:25,440
we're waiting for the last question i'm

1680
01:03:25,440 --> 01:03:27,039
just going to go pull up a channel

1681
01:03:27,039 --> 01:03:29,039
emulation example here

1682
01:03:29,039 --> 01:03:34,000
so we can do an eye pattern of our pcie

1683
01:03:34,000 --> 01:03:35,440
right now

1684
01:03:35,440 --> 01:03:38,319
and look at it there and now we can go

1685
01:03:38,319 --> 01:03:39,680
do a

1686
01:03:39,680 --> 01:03:42,240
ah the horizontal lines by the way uh

1687
01:03:42,240 --> 01:03:43,760
that's caused by limited a to d

1688
01:03:43,760 --> 01:03:46,160
resolution on the scope so our image is

1689
01:03:46,160 --> 01:03:48,960
taller than the number of unique voltage

1690
01:03:48,960 --> 01:03:50,960
values applying pretty much any kind of

1691
01:03:50,960 --> 01:03:53,280
filter to it usually rounds that off and

1692
01:03:53,280 --> 01:03:56,079
you'll see that in the next example

1693
01:03:56,079 --> 01:03:58,640
so we can do channel emulation

1694
01:03:58,640 --> 01:03:59,680
and

1695
01:03:59,680 --> 01:04:04,079
um let's go look at say

1696
01:04:04,079 --> 01:04:07,200
um we'll do through a fairly nice line

1697
01:04:07,200 --> 01:04:09,599
uh like through this rosenberger through

1698
01:04:09,599 --> 01:04:12,319
line so just specified our s parameters

1699
01:04:12,319 --> 01:04:14,640
we're going to look at s21 of our signal

1700
01:04:14,640 --> 01:04:15,920
through there

1701
01:04:15,920 --> 01:04:17,839
and we're going to recover another clock

1702
01:04:17,839 --> 01:04:20,720
from that we can do that and then pull

1703
01:04:20,720 --> 01:04:25,240
up an eye pattern of there

1704
01:04:26,079 --> 01:04:29,440
and so here is the

1705
01:04:29,440 --> 01:04:31,920
same signal through that emulated

1706
01:04:31,920 --> 01:04:33,440
channel

1707
01:04:33,440 --> 01:04:35,680
and did i specify the wrong clock

1708
01:04:35,680 --> 01:04:37,599
okay yeah sorry about that uh so i

1709
01:04:37,599 --> 01:04:39,039
recovered the clock before the channel

1710
01:04:39,039 --> 01:04:41,520
emulation so we got a phase shift

1711
01:04:41,520 --> 01:04:43,520
so we just clear and do that okay that's

1712
01:04:43,520 --> 01:04:45,119
aligned properly and so we can see it

1713
01:04:45,119 --> 01:04:47,359
looks pretty much almost the same uh

1714
01:04:47,359 --> 01:04:48,720
through this channel just a little bit

1715
01:04:48,720 --> 01:04:51,039
weaker because of loss but if we then

1716
01:04:51,039 --> 01:04:53,280
pick a less nice channel

1717
01:04:53,280 --> 01:04:55,359
let's see what it would look like

1718
01:04:55,359 --> 01:04:57,759
through

1719
01:05:04,559 --> 01:05:07,039
let's say this not quite perfectly

1720
01:05:07,039 --> 01:05:10,160
impedance matched launched on a samtech

1721
01:05:10,160 --> 01:05:12,640
sma

1722
01:05:12,880 --> 01:05:14,480
and so it's a little bit less pretty

1723
01:05:14,480 --> 01:05:15,599
there

1724
01:05:15,599 --> 01:05:18,079
we can then pick something even worse

1725
01:05:18,079 --> 01:05:21,480
let's say

1726
01:05:26,319 --> 01:05:28,880
let's say one of uh my

1727
01:05:28,880 --> 01:05:31,119
open hardware probes

1728
01:05:31,119 --> 01:05:32,640
that uh

1729
01:05:32,640 --> 01:05:34,240
is only measured to six gigahertz so

1730
01:05:34,240 --> 01:05:35,839
we're going to have a brick wall cut off

1731
01:05:35,839 --> 01:05:38,240
from the um

1732
01:05:38,240 --> 01:05:39,920
frequency response at six gigahertz

1733
01:05:39,920 --> 01:05:41,119
we're also going to see attenuation

1734
01:05:41,119 --> 01:05:42,640
because this is a 10x probe and so we

1735
01:05:42,640 --> 01:05:44,720
can see through this probe it's a lot

1736
01:05:44,720 --> 01:05:46,480
more rounded off because our measurement

1737
01:05:46,480 --> 01:05:48,079
is only going to six gigahertz and i

1738
01:05:48,079 --> 01:05:49,359
mean that's a 3d bandwidth of the pro

1739
01:05:49,359 --> 01:05:51,440
but the vna also stops at six gigahertz

1740
01:05:51,440 --> 01:05:52,720
and so we're not seeing a lot of the

1741
01:05:52,720 --> 01:05:54,559
nuance in the signal here

1742
01:05:54,559 --> 01:05:56,960
and again it's uh weakened by about a

1743
01:05:56,960 --> 01:05:58,640
factor of 10 because we're looking at a

1744
01:05:58,640 --> 01:06:01,280
signal through a 10x probe

1745
01:06:01,280 --> 01:06:02,480
all right uh did we have another

1746
01:06:02,480 --> 01:06:04,480
question before we wrap up

1747
01:06:04,480 --> 01:06:05,920
yeah there are a couple of questions but

1748
01:06:05,920 --> 01:06:07,359
i think i'll just take two more and then

1749
01:06:07,359 --> 01:06:10,720
we'll skip the rest um so the question

1750
01:06:10,720 --> 01:06:12,240
is from

1751
01:06:12,240 --> 01:06:13,680
uh

1752
01:06:13,680 --> 01:06:14,880
andrei

1753
01:06:14,880 --> 01:06:17,599
have have you a flex rate decoder there

1754
01:06:17,599 --> 01:06:18,720
with you

1755
01:06:18,720 --> 01:06:20,400
uh no i do not currently have a

1756
01:06:20,400 --> 01:06:23,039
flexibility code it is on the to-do list

1757
01:06:23,039 --> 01:06:25,039
uh the limiting factor has been accessed

1758
01:06:25,039 --> 01:06:27,119
to waveforms i don't have any flex-ray

1759
01:06:27,119 --> 01:06:29,520
signals i can write the decode with so

1760
01:06:29,520 --> 01:06:31,520
if anybody wants to comment on the

1761
01:06:31,520 --> 01:06:33,680
ticket on github with a recording of

1762
01:06:33,680 --> 01:06:35,119
some flex drive waveforms that will

1763
01:06:35,119 --> 01:06:37,039
definitely help

1764
01:06:37,039 --> 01:06:38,960
all right uh i'm just reading out some

1765
01:06:38,960 --> 01:06:41,839
of the questions uh but you know let's i

1766
01:06:41,839 --> 01:06:44,640
will not suggest you to take that one uh

1767
01:06:44,640 --> 01:06:46,799
a question would be well there was one

1768
01:06:46,799 --> 01:06:48,640
if they could you could show an example

1769
01:06:48,640 --> 01:06:51,280
on bluetooth but uh that would be for

1770
01:06:51,280 --> 01:06:52,400
later

1771
01:06:52,400 --> 01:06:54,480
zahees question is uh

1772
01:06:54,480 --> 01:06:56,799
the previous question that he had uh is

1773
01:06:56,799 --> 01:07:01,520
do we see consistent throughout opcie

1774
01:07:01,520 --> 01:07:03,359
uh three went throughput

1775
01:07:03,359 --> 01:07:05,680
oh um so

1776
01:07:05,680 --> 01:07:07,520
i actually haven't used a scope that

1777
01:07:07,520 --> 01:07:10,640
attaches over pcie uh exactly uh the

1778
01:07:10,640 --> 01:07:13,520
lacroix scopes use pcie internally to

1779
01:07:13,520 --> 01:07:15,920
connect the uh capture card to the

1780
01:07:15,920 --> 01:07:18,400
internal pc however the interface from

1781
01:07:18,400 --> 01:07:20,559
that to geoscope client is via ethernet

1782
01:07:20,559 --> 01:07:22,640
so that's the bottleneck

1783
01:07:22,640 --> 01:07:24,799
um i believe some of the higher end uh

1784
01:07:24,799 --> 01:07:27,520
libraries do have an option i forget

1785
01:07:27,520 --> 01:07:30,000
what it's called um

1786
01:07:30,000 --> 01:07:33,440
that has a pcie x1 link from the scope

1787
01:07:33,440 --> 01:07:36,000
to the host pc i don't currently have

1788
01:07:36,000 --> 01:07:38,880
that uh interface so yeah right now the

1789
01:07:38,880 --> 01:07:40,960
highest bandwidth interface i use jenny

1790
01:07:40,960 --> 01:07:43,839
scope has been usb3

1791
01:07:43,839 --> 01:07:44,799
all right

1792
01:07:44,799 --> 01:07:47,920
uh i take the last question that's from

1793
01:07:47,920 --> 01:07:49,359
jan william

1794
01:07:49,359 --> 01:07:50,480
uh

1795
01:07:50,480 --> 01:07:51,839
he's curious

1796
01:07:51,839 --> 01:07:54,799
about your example of spi and em

1797
01:07:54,799 --> 01:07:57,280
measurements in secure booth do you

1798
01:07:57,280 --> 01:07:59,599
expect it to be full demo on a public

1799
01:07:59,599 --> 01:08:01,039
implementation

1800
01:08:01,039 --> 01:08:02,799
it would be very useful to demonstrate

1801
01:08:02,799 --> 01:08:05,119
the full power of the tool

1802
01:08:05,119 --> 01:08:06,480
um

1803
01:08:06,480 --> 01:08:08,559
i would like to make such a demo it's

1804
01:08:08,559 --> 01:08:10,000
just a matter of again time and

1805
01:08:10,000 --> 01:08:11,440
availability of hardware i don't

1806
01:08:11,440 --> 01:08:13,520
currently have anything that does any

1807
01:08:13,520 --> 01:08:15,280
kind of secure booth that isn't client

1808
01:08:15,280 --> 01:08:18,399
related sitting around um so uh what i

1809
01:08:18,399 --> 01:08:20,080
actually had i've been thinking about

1810
01:08:20,080 --> 01:08:21,679
doing this morning with just getting a

1811
01:08:21,679 --> 01:08:24,560
normal not secure boot uh implementation

1812
01:08:24,560 --> 01:08:26,399
uh just from say uh

1813
01:08:26,399 --> 01:08:28,399
one of the fpga dev boards i have and

1814
01:08:28,399 --> 01:08:30,319
just noting the internal power

1815
01:08:30,319 --> 01:08:32,479
activities as it boots but uh yeah it's

1816
01:08:32,479 --> 01:08:33,600
not as interesting as something is

1817
01:08:33,600 --> 01:08:35,040
actually doing false secure but i just i

1818
01:08:35,040 --> 01:08:36,719
don't have anything handy that isn't the

1819
01:08:36,719 --> 01:08:39,839
nda so

1820
01:08:41,120 --> 01:08:44,479
all right andrew i think uh we've had

1821
01:08:44,479 --> 01:08:46,080
more than almost 10 questions for you

1822
01:08:46,080 --> 01:08:48,640
today so thank you so much for sharing

1823
01:08:48,640 --> 01:08:51,600
your research and tool with us and uh

1824
01:08:51,600 --> 01:08:54,000
helping grow the community and various

1825
01:08:54,000 --> 01:08:54,799
uh

1826
01:08:54,799 --> 01:08:56,719
tool vendors that you've been working to

1827
01:08:56,719 --> 01:08:59,279
create thank you so much again

1828
01:08:59,279 --> 01:09:00,880
all right and uh again if anyone is

1829
01:09:00,880 --> 01:09:03,359
interested in uh playing with it more uh

1830
01:09:03,359 --> 01:09:06,319
the links are in the presentation uh i

1831
01:09:06,319 --> 01:09:07,839
will be tweeting a link to the slides

1832
01:09:07,839 --> 01:09:10,560
shortly and so if anybody wants to uh

1833
01:09:10,560 --> 01:09:11,920
get involved in the project definitely

1834
01:09:11,920 --> 01:09:14,319
get in touch

1835
01:09:14,319 --> 01:09:16,719
all right and uh andrew is also there on

1836
01:09:16,719 --> 01:09:18,479
the discord server so if you still have

1837
01:09:18,479 --> 01:09:20,158
questions

1838
01:09:20,158 --> 01:09:22,238
regarding the setup you can

1839
01:09:22,238 --> 01:09:23,439
talk to him if you would like to

1840
01:09:23,439 --> 01:09:25,198
contribute to his project please feel

1841
01:09:25,198 --> 01:09:26,880
free to reach out to him as well it

1842
01:09:26,880 --> 01:09:29,679
would be great help

1843
01:09:29,920 --> 01:09:30,880
all right

1844
01:09:30,880 --> 01:09:33,830
thank you so much

1845
01:09:33,830 --> 01:09:35,390
[Applause]

1846
01:09:35,390 --> 01:09:39,579
[Music]

