1
00:00:03,410 --> 00:00:05,200
[Music]

2
00:00:05,200 --> 00:00:06,770
[Applause]

3
00:00:06,770 --> 00:00:08,029
[Music]

4
00:00:08,029 --> 00:00:11,179
[Applause]

5
00:00:11,920 --> 00:00:13,360
[Music]

6
00:00:13,360 --> 00:00:14,320
okay

7
00:00:14,320 --> 00:00:16,880
moving on uh friends if you have been

8
00:00:16,880 --> 00:00:18,960
working on some counter measures or

9
00:00:18,960 --> 00:00:20,320
offensive research when it comes to

10
00:00:20,320 --> 00:00:22,640
hardware security our cfp is open for

11
00:00:22,640 --> 00:00:24,320
the netherlands edition which is going

12
00:00:24,320 --> 00:00:26,720
to be physical uh in october so please

13
00:00:26,720 --> 00:00:29,119
do send in your submissions to us we

14
00:00:29,119 --> 00:00:31,840
would love to uh read your research as

15
00:00:31,840 --> 00:00:33,840
well

16
00:00:33,840 --> 00:00:36,800
the next talk for the day is uh by eric

17
00:00:36,800 --> 00:00:40,239
evencik uh he has uh he's a director at

18
00:00:40,239 --> 00:00:42,960
linklayer labs and also our trainer at

19
00:00:42,960 --> 00:00:45,200
hardware.io uh the training that he

20
00:00:45,200 --> 00:00:46,879
delivers is reverse engineering using

21
00:00:46,879 --> 00:00:49,200
kidra eric will introduce a new tool to

22
00:00:49,200 --> 00:00:50,000
david

23
00:00:50,000 --> 00:00:52,160
that's used for the automotive

24
00:00:52,160 --> 00:00:54,640
industry uh for reverse engineering

25
00:00:54,640 --> 00:00:56,719
which operates by dissecting the can

26
00:00:56,719 --> 00:00:59,520
protocol injecting malicious code thus

27
00:00:59,520 --> 00:01:02,079
surrendering controls for the automotive

28
00:01:02,079 --> 00:01:04,879
systems to a hacker

29
00:01:04,879 --> 00:01:07,840
the talk title is cantec building can

30
00:01:07,840 --> 00:01:09,520
take pro

31
00:01:09,520 --> 00:01:14,080
uh so eric over to you now

32
00:01:15,200 --> 00:01:17,600
hello thanks for the introduction and uh

33
00:01:17,600 --> 00:01:19,439
thanks everyone who's sticking on here

34
00:01:19,439 --> 00:01:20,880
with the i think this is the last talk

35
00:01:20,880 --> 00:01:22,080
of the day

36
00:01:22,080 --> 00:01:23,759
so thanks for sticking around

37
00:01:23,759 --> 00:01:27,200
uh let's fire up some slides there

38
00:01:27,200 --> 00:01:30,720
so yeah uh name's eric evanchick uh

39
00:01:30,720 --> 00:01:32,240
i would come to here link claire labs it

40
00:01:32,240 --> 00:01:34,560
does embedded security uh consulting

41
00:01:34,560 --> 00:01:36,640
training and some tools including some

42
00:01:36,640 --> 00:01:38,159
open source stuff

43
00:01:38,159 --> 00:01:40,960
including uh the cantact products which

44
00:01:40,960 --> 00:01:43,520
are open source can bus tools so

45
00:01:43,520 --> 00:01:44,799
i'm just gonna take you sort of through

46
00:01:44,799 --> 00:01:46,880
the journey of building the newest

47
00:01:46,880 --> 00:01:50,159
version of that product and uh just some

48
00:01:50,159 --> 00:01:51,600
some interesting things that came up

49
00:01:51,600 --> 00:01:53,680
along the way and you know why why we

50
00:01:53,680 --> 00:01:55,439
built it and uh you know what we ended

51
00:01:55,439 --> 00:01:56,560
up with

52
00:01:56,560 --> 00:01:57,920
so

53
00:01:57,920 --> 00:01:59,840
uh just very quickly you know this

54
00:01:59,840 --> 00:02:01,439
always depends on the audience i think

55
00:02:01,439 --> 00:02:03,119
there's probably some folks on the call

56
00:02:03,119 --> 00:02:04,719
here that have played around with can

57
00:02:04,719 --> 00:02:06,159
before and probably some that have never

58
00:02:06,159 --> 00:02:09,038
seen it but uh can or controller area

59
00:02:09,038 --> 00:02:11,760
network it's a

60
00:02:11,760 --> 00:02:13,280
somewhat common

61
00:02:13,280 --> 00:02:15,920
networking topologies in mostly in

62
00:02:15,920 --> 00:02:17,440
things like cars

63
00:02:17,440 --> 00:02:19,440
also pretty popular in scada and

64
00:02:19,440 --> 00:02:21,599
industrial control systems you'll find

65
00:02:21,599 --> 00:02:23,680
it also in the aviation world though

66
00:02:23,680 --> 00:02:25,520
sometimes under different names for

67
00:02:25,520 --> 00:02:27,920
things like avionics uh motor

68
00:02:27,920 --> 00:02:29,920
controllers use this a lot in industrial

69
00:02:29,920 --> 00:02:31,920
settings so there's a lot of different

70
00:02:31,920 --> 00:02:33,280
applications where you'll you'll see

71
00:02:33,280 --> 00:02:34,480
this used

72
00:02:34,480 --> 00:02:37,040
and in practice you know it's uh

73
00:02:37,040 --> 00:02:38,800
kind of similar to

74
00:02:38,800 --> 00:02:39,840
oh

75
00:02:39,840 --> 00:02:41,760
sorry i got the presenter view covering

76
00:02:41,760 --> 00:02:44,879
that there we go uh in practice it is

77
00:02:44,879 --> 00:02:47,280
you know similar to other uh

78
00:02:47,280 --> 00:02:48,879
networking you'll see between embedded

79
00:02:48,879 --> 00:02:51,360
controllers so for example

80
00:02:51,360 --> 00:02:52,239
you know

81
00:02:52,239 --> 00:02:53,920
spy or i squared c or something like

82
00:02:53,920 --> 00:02:54,959
that

83
00:02:54,959 --> 00:02:57,120
the big difference with can is it's most

84
00:02:57,120 --> 00:03:00,080
commonly used for connections between

85
00:03:00,080 --> 00:03:02,959
different controllers so off the board

86
00:03:02,959 --> 00:03:06,080
and also it's a multi-master bus

87
00:03:06,080 --> 00:03:08,159
uh this makes it quite a bit different

88
00:03:08,159 --> 00:03:10,640
than a lot of you know uh those types of

89
00:03:10,640 --> 00:03:13,680
systems just because there is no single

90
00:03:13,680 --> 00:03:15,680
master controller that you need to rely

91
00:03:15,680 --> 00:03:18,000
on you can have uh you know a bunch of

92
00:03:18,000 --> 00:03:19,599
different controllers and all of them

93
00:03:19,599 --> 00:03:21,360
are able to talk even if one of them

94
00:03:21,360 --> 00:03:23,120
drops off the network

95
00:03:23,120 --> 00:03:25,040
and you know this is actually pretty

96
00:03:25,040 --> 00:03:27,519
important for things like uh real-time

97
00:03:27,519 --> 00:03:30,080
systems or you know high uh safety

98
00:03:30,080 --> 00:03:32,799
critical systems because if your

99
00:03:32,799 --> 00:03:34,640
say engine controller fails you don't

100
00:03:34,640 --> 00:03:36,319
want your brake controller to suddenly

101
00:03:36,319 --> 00:03:39,200
also fail so having the ability to you

102
00:03:39,200 --> 00:03:41,040
know lose a single node is actually a

103
00:03:41,040 --> 00:03:42,959
pretty good feature there's also some

104
00:03:42,959 --> 00:03:45,680
other real-time relevant features like

105
00:03:45,680 --> 00:03:48,239
message priorities so

106
00:03:48,239 --> 00:03:49,599
between the message priority and

107
00:03:49,599 --> 00:03:51,760
arbitration scheming can it's it's

108
00:03:51,760 --> 00:03:54,080
actually pretty simple the

109
00:03:54,080 --> 00:03:56,159
lowest

110
00:03:56,159 --> 00:03:59,680
so what you'll see is that with uh

111
00:03:59,680 --> 00:04:01,200
with cam frame that gets sent out

112
00:04:01,200 --> 00:04:03,280
whoever has the lowest id uh during the

113
00:04:03,280 --> 00:04:04,640
arbitration phase will be in and that

114
00:04:04,640 --> 00:04:06,480
allows you to do some prioritizations

115
00:04:06,480 --> 00:04:09,120
despite having multiple masters and

116
00:04:09,120 --> 00:04:11,360
every frame gets a hardware level crc so

117
00:04:11,360 --> 00:04:14,159
you get you know some level of integrity

118
00:04:14,159 --> 00:04:15,280
checking

119
00:04:15,280 --> 00:04:18,079
uh though not against an attacker and

120
00:04:18,079 --> 00:04:20,720
this often brings us to the problem with

121
00:04:20,720 --> 00:04:22,880
a lot of can bus systems from a security

122
00:04:22,880 --> 00:04:24,880
standpoint which is that the networks

123
00:04:24,880 --> 00:04:28,000
tend to be trusted uh in the sense that

124
00:04:28,000 --> 00:04:30,400
you know when you send a cam frame

125
00:04:30,400 --> 00:04:32,000
everyone on the bus is going to believe

126
00:04:32,000 --> 00:04:34,479
that it's real and they're going to you

127
00:04:34,479 --> 00:04:36,639
know process that data

128
00:04:36,639 --> 00:04:39,360
as as it's received

129
00:04:39,360 --> 00:04:40,720
and you know this has led to a bunch of

130
00:04:40,720 --> 00:04:43,440
different good demos and attacks but the

131
00:04:43,440 --> 00:04:45,680
way that i honestly look at this now is

132
00:04:45,680 --> 00:04:49,120
if an attacker has the ability to send

133
00:04:49,120 --> 00:04:52,479
arbitrary frames on a can bus it's kind

134
00:04:52,479 --> 00:04:55,199
of like having root or ring zero access

135
00:04:55,199 --> 00:04:58,080
in a sense uh it's that very high level

136
00:04:58,080 --> 00:05:00,320
privileged access so you know

137
00:05:00,320 --> 00:05:02,320
it's compromised that being said there

138
00:05:02,320 --> 00:05:04,479
are some mitigations that that are in

139
00:05:04,479 --> 00:05:06,000
the works uh

140
00:05:06,000 --> 00:05:08,000
for those types of things now

141
00:05:08,000 --> 00:05:10,560
um can itself is a very low level

142
00:05:10,560 --> 00:05:12,400
protocol lets us send eight bytes of

143
00:05:12,400 --> 00:05:14,560
data at a time but there's some

144
00:05:14,560 --> 00:05:16,320
interesting higher level protocols that

145
00:05:16,320 --> 00:05:18,240
come into play so there's this thing

146
00:05:18,240 --> 00:05:19,039
called

147
00:05:19,039 --> 00:05:22,720
can tp or iso tp depending on what name

148
00:05:22,720 --> 00:05:24,960
you want to use this is used to string

149
00:05:24,960 --> 00:05:27,039
can frames together to make longer

150
00:05:27,039 --> 00:05:29,600
payloads of data so again eight bytes

151
00:05:29,600 --> 00:05:31,600
per frame is sort of a

152
00:05:31,600 --> 00:05:32,880
limiting when you want to do something

153
00:05:32,880 --> 00:05:35,759
like a firmware update so this protocol

154
00:05:35,759 --> 00:05:37,120
allows you to

155
00:05:37,120 --> 00:05:40,800
chain together up to 4095 bytes

156
00:05:40,800 --> 00:05:42,639
of data into sort of one

157
00:05:42,639 --> 00:05:45,600
message by sending multiple frames

158
00:05:45,600 --> 00:05:48,080
and you know it's still very limiting in

159
00:05:48,080 --> 00:05:50,320
terms of doing a firmware update but by

160
00:05:50,320 --> 00:05:52,080
chaining those together you can end up

161
00:05:52,080 --> 00:05:55,280
actually fully updating controllers

162
00:05:55,280 --> 00:05:58,000
uh on top of that can tp and iso tp

163
00:05:58,000 --> 00:06:00,160
we'll see things like unified diagnostic

164
00:06:00,160 --> 00:06:03,840
services which is the iso 14229 standard

165
00:06:03,840 --> 00:06:06,639
this is the protocol that whenever you

166
00:06:06,639 --> 00:06:08,080
bring your car into a dealership and

167
00:06:08,080 --> 00:06:09,680
they plug in

168
00:06:09,680 --> 00:06:12,080
there's a very limited subset of what

169
00:06:12,080 --> 00:06:14,240
are called the obd functionality onboard

170
00:06:14,240 --> 00:06:18,479
diagnostics this is a standardized

171
00:06:18,479 --> 00:06:19,680
standardized

172
00:06:19,680 --> 00:06:21,440
format that you can buy those

173
00:06:21,440 --> 00:06:24,479
off-the-shelf tools for the version of

174
00:06:24,479 --> 00:06:26,479
obd2 that's out there right now you'll

175
00:06:26,479 --> 00:06:30,240
find in every car made after about 1996.

176
00:06:30,240 --> 00:06:33,840
uh so that's a very you know basic uh

177
00:06:33,840 --> 00:06:35,440
interaction it'll get you some fault

178
00:06:35,440 --> 00:06:37,440
codes out of the device or out of the

179
00:06:37,440 --> 00:06:39,520
engine controller you can clear fault

180
00:06:39,520 --> 00:06:41,520
codes and read some data

181
00:06:41,520 --> 00:06:44,080
uh unified diagnostic services is a

182
00:06:44,080 --> 00:06:46,000
whole bunch of extensions to that they

183
00:06:46,000 --> 00:06:46,720
are

184
00:06:46,720 --> 00:06:49,520
proprietary they're specific to whatever

185
00:06:49,520 --> 00:06:52,880
uh manufacturer you're looking at and uh

186
00:06:52,880 --> 00:06:54,720
they'll let you do all sorts of stuff

187
00:06:54,720 --> 00:06:56,720
every diagnostic feature that your

188
00:06:56,720 --> 00:06:59,199
dealership can do is done over this so

189
00:06:59,199 --> 00:07:01,360
everything from reflashing controllers

190
00:07:01,360 --> 00:07:04,400
to calibrating sensors

191
00:07:04,400 --> 00:07:07,840
you can do things like dump the airbag

192
00:07:07,840 --> 00:07:10,400
recorded data using this protocol in

193
00:07:10,400 --> 00:07:12,400
some vehicles you can even deploy the

194
00:07:12,400 --> 00:07:14,240
airbags using this protocol on some

195
00:07:14,240 --> 00:07:16,080
vehicles so yeah there's a lot of

196
00:07:16,080 --> 00:07:19,440
functionality that's uh baked into there

197
00:07:19,440 --> 00:07:21,360
can open is another protocol that you'll

198
00:07:21,360 --> 00:07:24,479
see mostly in motor control uh it's

199
00:07:24,479 --> 00:07:26,080
it's just sort of a

200
00:07:26,080 --> 00:07:28,240
add some some dressing and stuff on top

201
00:07:28,240 --> 00:07:29,680
of cam to make it a little bit more

202
00:07:29,680 --> 00:07:32,080
practical for uh you know a well-defined

203
00:07:32,080 --> 00:07:34,000
network where you want to have these

204
00:07:34,000 --> 00:07:35,680
off-the-shelf controllers that can talk

205
00:07:35,680 --> 00:07:36,880
to each other

206
00:07:36,880 --> 00:07:39,440
not so much in cars but scada and ics

207
00:07:39,440 --> 00:07:40,639
that will come up

208
00:07:40,639 --> 00:07:43,919
and then ccp and xcp the can calibration

209
00:07:43,919 --> 00:07:45,840
protocol and the

210
00:07:45,840 --> 00:07:48,560
x meaning anything calibration protocol

211
00:07:48,560 --> 00:07:50,400
these are used during development of

212
00:07:50,400 --> 00:07:52,879
ecu's in some cases so they'll provide

213
00:07:52,879 --> 00:07:55,360
development access over can or other

214
00:07:55,360 --> 00:07:56,879
interfaces

215
00:07:56,879 --> 00:07:58,479
occasionally you'll see them left

216
00:07:58,479 --> 00:08:00,800
enabled this has mostly been fixed from

217
00:08:00,800 --> 00:08:03,199
what i've seen but for a number of years

218
00:08:03,199 --> 00:08:04,560
you would see this left enabled in

219
00:08:04,560 --> 00:08:06,560
production vehicles and it would let you

220
00:08:06,560 --> 00:08:08,240
do things like read and write arbitrary

221
00:08:08,240 --> 00:08:09,840
memory addresses which

222
00:08:09,840 --> 00:08:11,840
obviously creates a whole host of

223
00:08:11,840 --> 00:08:14,720
vulnerabilities that you can exploit so

224
00:08:14,720 --> 00:08:16,960
basically can is this somewhat obscure

225
00:08:16,960 --> 00:08:19,199
but very interesting network that you

226
00:08:19,199 --> 00:08:21,680
find in in some pretty

227
00:08:21,680 --> 00:08:23,759
high criticality systems

228
00:08:23,759 --> 00:08:26,400
so back in i think it was 2014

229
00:08:26,400 --> 00:08:28,240
i launched this little open source

230
00:08:28,240 --> 00:08:30,960
hardware thing called the cantact

231
00:08:30,960 --> 00:08:34,559
version one uh and it was a can to usb

232
00:08:34,559 --> 00:08:36,559
device it was super cheap to build and

233
00:08:36,559 --> 00:08:38,719
everything came to usb device based on

234
00:08:38,719 --> 00:08:41,200
the stm32

235
00:08:41,200 --> 00:08:43,760
f0 microcontroller

236
00:08:43,760 --> 00:08:44,880
and

237
00:08:44,880 --> 00:08:46,320
honestly the reason i chose this

238
00:08:46,320 --> 00:08:48,320
microcontroller and the reason that this

239
00:08:48,320 --> 00:08:50,640
design came to be was that st came out

240
00:08:50,640 --> 00:08:52,800
with it it was sort of the first

241
00:08:52,800 --> 00:08:54,800
low-cost microcontroller that could be

242
00:08:54,800 --> 00:08:56,160
both a

243
00:08:56,160 --> 00:08:58,399
uh there could be both a

244
00:08:58,399 --> 00:09:02,959
usb master as well as uh or usb

245
00:09:02,959 --> 00:09:05,680
device sorry as well as a can bus device

246
00:09:05,680 --> 00:09:07,360
there were not too many microcontrollers

247
00:09:07,360 --> 00:09:08,800
out there that would do that most of

248
00:09:08,800 --> 00:09:10,399
them were very high-end

249
00:09:10,399 --> 00:09:13,200
sort of applications processors so this

250
00:09:13,200 --> 00:09:15,279
allowed you know be to build something

251
00:09:15,279 --> 00:09:17,360
really cheap that would do this and at

252
00:09:17,360 --> 00:09:19,680
the time especially there were not many

253
00:09:19,680 --> 00:09:21,279
options out there in terms of open

254
00:09:21,279 --> 00:09:24,560
source or even low cost hardware for for

255
00:09:24,560 --> 00:09:26,640
can the you know some of the cheaper

256
00:09:26,640 --> 00:09:29,040
options would be things like

257
00:09:29,040 --> 00:09:30,000
uh

258
00:09:30,000 --> 00:09:30,800
the

259
00:09:30,800 --> 00:09:32,880
uh intrepid control systems devices

260
00:09:32,880 --> 00:09:34,320
which were in a couple hundreds of

261
00:09:34,320 --> 00:09:36,240
dollars and didn't really have much

262
00:09:36,240 --> 00:09:37,839
software support until you were paying

263
00:09:37,839 --> 00:09:39,920
sort of in the thousands of dollars and

264
00:09:39,920 --> 00:09:41,839
then the most you know commonly used

265
00:09:41,839 --> 00:09:43,760
devices would be

266
00:09:43,760 --> 00:09:45,279
in the thousands of dollars by the time

267
00:09:45,279 --> 00:09:46,560
you bought the software and everything

268
00:09:46,560 --> 00:09:48,240
easily so

269
00:09:48,240 --> 00:09:50,320
uh this device came out with the main

270
00:09:50,320 --> 00:09:53,120
purpose or main support being socket can

271
00:09:53,120 --> 00:09:54,720
on linux

272
00:09:54,720 --> 00:09:57,360
and because this microcontroller was

273
00:09:57,360 --> 00:10:00,399
cheap and had all the hardware a few

274
00:10:00,399 --> 00:10:02,480
interesting things happened so

275
00:10:02,480 --> 00:10:04,320
someone wrote a much improved firmware

276
00:10:04,320 --> 00:10:06,399
called candlelight that talked to a

277
00:10:06,399 --> 00:10:08,000
driver that was built into the linux

278
00:10:08,000 --> 00:10:10,240
kernel and still is meaning that out of

279
00:10:10,240 --> 00:10:11,839
the box you can plug this in and you

280
00:10:11,839 --> 00:10:14,560
actually get a network device on linux

281
00:10:14,560 --> 00:10:16,560
uh and so that's you know

282
00:10:16,560 --> 00:10:18,720
quite useful in terms of being able to

283
00:10:18,720 --> 00:10:20,959
uh very you know quickly get up and

284
00:10:20,959 --> 00:10:22,800
running there's no drivers to install in

285
00:10:22,800 --> 00:10:25,120
linux uh however you know it had no

286
00:10:25,120 --> 00:10:27,680
isolation so there's an electrical

287
00:10:27,680 --> 00:10:30,000
connection from the cam side to your

288
00:10:30,000 --> 00:10:30,959
computer

289
00:10:30,959 --> 00:10:33,440
uh it's a single channel so there's you

290
00:10:33,440 --> 00:10:35,839
know just one can channel there but hey

291
00:10:35,839 --> 00:10:38,000
it was cheap and it got forked by a

292
00:10:38,000 --> 00:10:41,680
number of people uh ethan zonka uh

293
00:10:41,680 --> 00:10:44,399
made the cannibal the candlelight device

294
00:10:44,399 --> 00:10:45,200
by

295
00:10:45,200 --> 00:10:48,160
there who did the firmware and vulcan

296
00:10:48,160 --> 00:10:50,160
and so on so forth and many of these

297
00:10:50,160 --> 00:10:51,440
were actually really interesting

298
00:10:51,440 --> 00:10:54,000
improvements or targeted a niche so

299
00:10:54,000 --> 00:10:56,240
for example ethan's cannibal he was

300
00:10:56,240 --> 00:10:58,000
doing a

301
00:10:58,000 --> 00:10:59,680
hydroponics installation i believe it

302
00:10:59,680 --> 00:11:02,240
was and he wanted a uh device that had

303
00:11:02,240 --> 00:11:03,839
just screw terminals on it and that's

304
00:11:03,839 --> 00:11:05,839
why he built that one so there's a lot

305
00:11:05,839 --> 00:11:07,360
of different uh improvements that were

306
00:11:07,360 --> 00:11:08,880
made

307
00:11:08,880 --> 00:11:11,360
but uh you know as the years went on i

308
00:11:11,360 --> 00:11:12,959
wanted to build something a little

309
00:11:12,959 --> 00:11:15,839
better uh and the cantac pro became sort

310
00:11:15,839 --> 00:11:17,600
of the design for that

311
00:11:17,600 --> 00:11:19,600
uh the goals for it were to make a

312
00:11:19,600 --> 00:11:21,839
two-channel device because you will

313
00:11:21,839 --> 00:11:23,680
often find cases where you want to have

314
00:11:23,680 --> 00:11:25,200
two separate channels

315
00:11:25,200 --> 00:11:27,440
uh with high-speed usb as opposed to

316
00:11:27,440 --> 00:11:29,440
full speed so that we could do you know

317
00:11:29,440 --> 00:11:31,760
faster data throughput and the reason

318
00:11:31,760 --> 00:11:34,560
for that is i wanted support for can fd

319
00:11:34,560 --> 00:11:37,519
which is the flexible data can uh this

320
00:11:37,519 --> 00:11:39,279
allows you to have frames that are up to

321
00:11:39,279 --> 00:11:42,800
64 bytes instead of eight so yay four

322
00:11:42,800 --> 00:11:45,680
times the payload but it also allows for

323
00:11:45,680 --> 00:11:48,800
a higher bit rate to happen during the

324
00:11:48,800 --> 00:11:51,200
data phase which essentially allows for

325
00:11:51,200 --> 00:11:52,399
you know a higher

326
00:11:52,399 --> 00:11:54,480
throughput uh overall so instead of

327
00:11:54,480 --> 00:11:56,240
being capped at one megabit with

328
00:11:56,240 --> 00:11:58,720
traditional can you can go up to 10

329
00:11:58,720 --> 00:12:01,680
megabits in that data phase and uh push

330
00:12:01,680 --> 00:12:03,519
a lot more data through in the same

331
00:12:03,519 --> 00:12:06,000
amount of time then also the 64 bytes

332
00:12:06,000 --> 00:12:08,480
lets you actually start to do things

333
00:12:08,480 --> 00:12:11,040
like data signing or at least doing uh

334
00:12:11,040 --> 00:12:13,120
message authentication codes because you

335
00:12:13,120 --> 00:12:15,200
have enough space to you know actually

336
00:12:15,200 --> 00:12:18,880
put a counter and a mac value in there

337
00:12:18,880 --> 00:12:20,480
single wire can support is also

338
00:12:20,480 --> 00:12:22,399
something i wanted just because there's

339
00:12:22,399 --> 00:12:25,040
a lot of legacy gm vehicles uh at this

340
00:12:25,040 --> 00:12:26,720
point mostly legacy

341
00:12:26,720 --> 00:12:29,200
that uh use this single wire can and

342
00:12:29,200 --> 00:12:30,959
there's not really there at the time

343
00:12:30,959 --> 00:12:32,480
there wasn't an open source tool out

344
00:12:32,480 --> 00:12:34,639
there that had the hardware support for

345
00:12:34,639 --> 00:12:35,600
it

346
00:12:35,600 --> 00:12:38,160
and you know electrical isolation just

347
00:12:38,160 --> 00:12:41,040
because most better tools have that uh

348
00:12:41,040 --> 00:12:43,600
the idea with isolation being that you

349
00:12:43,600 --> 00:12:45,920
aren't going to get you know a uh high

350
00:12:45,920 --> 00:12:47,600
voltage transient that ends up coming

351
00:12:47,600 --> 00:12:49,200
through to your usb port and blowing

352
00:12:49,200 --> 00:12:51,279
your computer up i'd much rather you

353
00:12:51,279 --> 00:12:52,880
blow up this device then blow up your

354
00:12:52,880 --> 00:12:54,079
laptop

355
00:12:54,079 --> 00:12:56,399
and lastly put it in a case i broke a

356
00:12:56,399 --> 00:12:58,560
lot of these things because you know

357
00:12:58,560 --> 00:13:00,639
you'd put them in your backpack or

358
00:13:00,639 --> 00:13:02,639
whatever and you'd smash them out so i

359
00:13:02,639 --> 00:13:05,040
wanted a decent case and uh that's what

360
00:13:05,040 --> 00:13:07,760
i ended up putting this in

361
00:13:07,760 --> 00:13:11,279
so the 2x can fd interface and single

362
00:13:11,279 --> 00:13:13,519
wire can a big part of that was choosing

363
00:13:13,519 --> 00:13:15,600
the right microcontroller i ended up

364
00:13:15,600 --> 00:13:18,880
with this uh lpc device from nxp and arm

365
00:13:18,880 --> 00:13:20,800
cortex m4

366
00:13:20,800 --> 00:13:21,920
device

367
00:13:21,920 --> 00:13:23,839
that

368
00:13:23,839 --> 00:13:27,040
it had to can fd and high speed usb and

369
00:13:27,040 --> 00:13:29,120
but really it was one of the few devices

370
00:13:29,120 --> 00:13:31,920
out there that had all of that it also

371
00:13:31,920 --> 00:13:35,680
has a rom usb boot loader which uh is

372
00:13:35,680 --> 00:13:37,279
really nice when you're developing an

373
00:13:37,279 --> 00:13:40,000
open source hardware product because

374
00:13:40,000 --> 00:13:41,519
you want people to be able to flash it

375
00:13:41,519 --> 00:13:44,240
themselves without having to do jtag and

376
00:13:44,240 --> 00:13:46,480
you know get have a jtag adapter and all

377
00:13:46,480 --> 00:13:48,160
that just in case they you know they're

378
00:13:48,160 --> 00:13:50,320
playing with it or they brick it so this

379
00:13:50,320 --> 00:13:52,399
has a usb boot loader where you can hold

380
00:13:52,399 --> 00:13:54,480
down a button when it boots up and it

381
00:13:54,480 --> 00:13:56,079
becomes a mass storage device you just

382
00:13:56,079 --> 00:13:58,639
copy a hex file over and it flashes

383
00:13:58,639 --> 00:14:00,079
there's also this great development

384
00:14:00,079 --> 00:14:01,839
board available which was

385
00:14:01,839 --> 00:14:04,480
had a can fd shield on it which more or

386
00:14:04,480 --> 00:14:05,600
less was

387
00:14:05,600 --> 00:14:07,279
a lot of my product

388
00:14:07,279 --> 00:14:08,959
so in terms of getting the software up

389
00:14:08,959 --> 00:14:10,160
and running this was a great thing to

390
00:14:10,160 --> 00:14:11,680
have

391
00:14:11,680 --> 00:14:13,680
and then for single wire can i ended up

392
00:14:13,680 --> 00:14:16,880
using some dual pull dual throw or sorry

393
00:14:16,880 --> 00:14:19,120
single throw uh analog switches that

394
00:14:19,120 --> 00:14:21,440
would allow the can lines to be switched

395
00:14:21,440 --> 00:14:23,760
between a high speed

396
00:14:23,760 --> 00:14:29,040
uh for can fd transceiver so the mcp2561

397
00:14:29,040 --> 00:14:32,240
which is a dual k fd ft transceiver from

398
00:14:32,240 --> 00:14:33,440
microchip

399
00:14:33,440 --> 00:14:36,160
and uh this ncv735

400
00:14:36,160 --> 00:14:37,440
which is the single wire camera

401
00:14:37,440 --> 00:14:39,120
transceiver so just a simple analog

402
00:14:39,120 --> 00:14:41,120
switch that would allow those signals to

403
00:14:41,120 --> 00:14:43,279
be flip flop back and forth depending on

404
00:14:43,279 --> 00:14:46,079
what mode you needed

405
00:14:46,800 --> 00:14:49,440
isolation so again isolation was a goal

406
00:14:49,440 --> 00:14:51,040
here and

407
00:14:51,040 --> 00:14:52,800
you know sometimes you're plugging this

408
00:14:52,800 --> 00:14:54,639
into things like motor controllers or

409
00:14:54,639 --> 00:14:56,800
electric vehicles or whatever

410
00:14:56,800 --> 00:14:58,880
if you get a ground fault on an electric

411
00:14:58,880 --> 00:15:01,199
vehicle or you know some other weird

412
00:15:01,199 --> 00:15:02,399
situation

413
00:15:02,399 --> 00:15:04,320
you could end up with a some transient

414
00:15:04,320 --> 00:15:06,639
voltage that might cause some damage and

415
00:15:06,639 --> 00:15:07,680
uh

416
00:15:07,680 --> 00:15:10,320
you know not ideal is destroying like a

417
00:15:10,320 --> 00:15:13,040
150 dollar can tool but really bad would

418
00:15:13,040 --> 00:15:15,279
be blowing up at least the usb port on

419
00:15:15,279 --> 00:15:16,800
your laptop and potentially the whole

420
00:15:16,800 --> 00:15:19,920
thing uh so that's why a lot of these

421
00:15:19,920 --> 00:15:22,160
devices end up isolated now

422
00:15:22,160 --> 00:15:24,720
isolated can transfers do exist however

423
00:15:24,720 --> 00:15:26,959
at the time there wasn't many options

424
00:15:26,959 --> 00:15:28,639
for can fd

425
00:15:28,639 --> 00:15:30,320
and there was no options that would let

426
00:15:30,320 --> 00:15:33,600
me do can fdm single wire all in one

427
00:15:33,600 --> 00:15:35,360
and so i ended up going for sort of a

428
00:15:35,360 --> 00:15:37,120
discrete isolation

429
00:15:37,120 --> 00:15:38,480
solution here

430
00:15:38,480 --> 00:15:39,199
so

431
00:15:39,199 --> 00:15:44,320
the scilabs uh psi 866x family is a very

432
00:15:44,320 --> 00:15:45,600
neat chip

433
00:15:45,600 --> 00:15:47,519
that uh their block diagrams there

434
00:15:47,519 --> 00:15:50,079
basically it uses a

435
00:15:50,079 --> 00:15:53,440
rf modulator to send the signal across a

436
00:15:53,440 --> 00:15:54,880
isolation barrier and then it gets

437
00:15:54,880 --> 00:15:57,040
demodulated it goes out the other side

438
00:15:57,040 --> 00:15:59,199
and interestingly they have these chips

439
00:15:59,199 --> 00:16:01,199
in different variants

440
00:16:01,199 --> 00:16:04,000
that will allow you to you know have two

441
00:16:04,000 --> 00:16:05,279
channels going one direction two

442
00:16:05,279 --> 00:16:06,639
channels going the other direction or

443
00:16:06,639 --> 00:16:08,560
four channels in one direction

444
00:16:08,560 --> 00:16:10,399
so you can sort of pick the one you need

445
00:16:10,399 --> 00:16:12,240
for your application

446
00:16:12,240 --> 00:16:14,320
uh so for the can signals i used these

447
00:16:14,320 --> 00:16:16,399
because they go up to 150 megabits per

448
00:16:16,399 --> 00:16:17,920
second which is more than enough and

449
00:16:17,920 --> 00:16:20,560
they provide five kilovolts of isolation

450
00:16:20,560 --> 00:16:22,639
which is more than enough

451
00:16:22,639 --> 00:16:25,199
uh for the simple gpio just the mode

452
00:16:25,199 --> 00:16:27,920
switching some of these very low speed

453
00:16:27,920 --> 00:16:28,800
pins

454
00:16:28,800 --> 00:16:30,880
a good old opto coupler does the trick

455
00:16:30,880 --> 00:16:32,480
because they're very cheap

456
00:16:32,480 --> 00:16:35,440
uh so this is a device that you know you

457
00:16:35,440 --> 00:16:37,040
you run some current through an led and

458
00:16:37,040 --> 00:16:39,600
it gets picked up by a

459
00:16:39,600 --> 00:16:41,680
receiver on the other end that it's just

460
00:16:41,680 --> 00:16:43,920
a photosensitive transistor that times

461
00:16:43,920 --> 00:16:45,920
up creating a connection

462
00:16:45,920 --> 00:16:48,560
so these work for slow signals but they

463
00:16:48,560 --> 00:16:50,959
are you know a thousand times slower

464
00:16:50,959 --> 00:16:52,320
about so

465
00:16:52,320 --> 00:16:53,600
that's why you

466
00:16:53,600 --> 00:16:55,120
can't really use them for the high speed

467
00:16:55,120 --> 00:16:56,240
stuff

468
00:16:56,240 --> 00:16:58,240
then the last part of the isolation this

469
00:16:58,240 --> 00:17:00,000
is for the signal isolation but you also

470
00:17:00,000 --> 00:17:02,000
need isolated power

471
00:17:02,000 --> 00:17:04,319
and for that i ended up with this recom

472
00:17:04,319 --> 00:17:08,079
5 volt isolated dc dc module these are

473
00:17:08,079 --> 00:17:10,160
a very neat part because if you don't

474
00:17:10,160 --> 00:17:12,000
want to deal with designing and laying

475
00:17:12,000 --> 00:17:14,559
out your own isolated dc dc which i did

476
00:17:14,559 --> 00:17:16,720
not uh it's sort of an all-in-one

477
00:17:16,720 --> 00:17:17,760
solution

478
00:17:17,760 --> 00:17:19,760
the only problems are other well they're

479
00:17:19,760 --> 00:17:21,760
not the cheapest but also this was sort

480
00:17:21,760 --> 00:17:24,400
of the highest failure rate so i had

481
00:17:24,400 --> 00:17:27,199
a handful of devices that that came in

482
00:17:27,199 --> 00:17:29,440
and failed or did not work or passed

483
00:17:29,440 --> 00:17:32,160
testing and with one of them it was

484
00:17:32,160 --> 00:17:35,280
because the db9 connectors on it were

485
00:17:35,280 --> 00:17:37,919
one of them actually they somehow used a

486
00:17:37,919 --> 00:17:38,799
male

487
00:17:38,799 --> 00:17:41,840
uh male pins but a female shell and

488
00:17:41,840 --> 00:17:43,440
i don't know how that happened but that

489
00:17:43,440 --> 00:17:46,880
dp connector was toast and all the other

490
00:17:46,880 --> 00:17:49,360
failures which was just a handful like

491
00:17:49,360 --> 00:17:51,919
maybe one percent uh or less than one

492
00:17:51,919 --> 00:17:54,559
percent was the dc dc module that had

493
00:17:54,559 --> 00:17:56,320
failed and those just shortened across

494
00:17:56,320 --> 00:17:57,919
and got real hot when you plug them in

495
00:17:57,919 --> 00:17:59,200
so

496
00:17:59,200 --> 00:18:01,360
unfortunately yeah there's nice nice

497
00:18:01,360 --> 00:18:03,200
device does the trick but seems to have

498
00:18:03,200 --> 00:18:06,320
a failure rate higher than i would like

499
00:18:06,320 --> 00:18:08,320
so if you're designing a device you know

500
00:18:08,320 --> 00:18:10,080
i've i've made the mistake many times

501
00:18:10,080 --> 00:18:11,919
thinking oh how hard is it going to be

502
00:18:11,919 --> 00:18:14,559
to put something in a plastic box and it

503
00:18:14,559 --> 00:18:16,320
turns out it's much harder than you you

504
00:18:16,320 --> 00:18:18,080
expect

505
00:18:18,080 --> 00:18:19,760
so the problem with this always is that

506
00:18:19,760 --> 00:18:21,039
you need to

507
00:18:21,039 --> 00:18:22,799
think about this from the outset it's

508
00:18:22,799 --> 00:18:25,600
really hard if you designed a pcb you

509
00:18:25,600 --> 00:18:27,280
spot it your you know you have a final

510
00:18:27,280 --> 00:18:29,039
device and then you want to put it in a

511
00:18:29,039 --> 00:18:30,880
case and i learned this the first time

512
00:18:30,880 --> 00:18:33,440
around so i realized hey we're gonna do

513
00:18:33,440 --> 00:18:34,960
this from the beginning

514
00:18:34,960 --> 00:18:36,080
uh

515
00:18:36,080 --> 00:18:37,919
i'm not good at cad or mechanical

516
00:18:37,919 --> 00:18:40,480
engineering so what i did is i called up

517
00:18:40,480 --> 00:18:42,799
a friend who who is and we settled on

518
00:18:42,799 --> 00:18:45,039
this company called polycase they do

519
00:18:45,039 --> 00:18:47,039
prefab cases and then they do custom

520
00:18:47,039 --> 00:18:50,080
cut-ups now if you're building you know

521
00:18:50,080 --> 00:18:52,400
a low volume this is going to be the way

522
00:18:52,400 --> 00:18:54,960
to go just because the startup cost for

523
00:18:54,960 --> 00:18:57,440
it is a hundred bucks and the per unit

524
00:18:57,440 --> 00:18:59,919
cost is well not

525
00:18:59,919 --> 00:19:02,480
cheap but not ridiculous whereas with uh

526
00:19:02,480 --> 00:19:04,160
you know injection molding custom

527
00:19:04,160 --> 00:19:06,160
injection molding you have a very high

528
00:19:06,160 --> 00:19:08,320
startup cost but then your per unit cost

529
00:19:08,320 --> 00:19:11,120
goes way way down uh

530
00:19:11,120 --> 00:19:12,720
that being said the key with choosing

531
00:19:12,720 --> 00:19:14,640
this early was i could design a pcb that

532
00:19:14,640 --> 00:19:16,240
fit the case and had the right mounting

533
00:19:16,240 --> 00:19:18,400
holes and was the right size and you

534
00:19:18,400 --> 00:19:20,720
know all of that had the right to you

535
00:19:20,720 --> 00:19:21,600
know

536
00:19:21,600 --> 00:19:23,360
amount of space between the board and

537
00:19:23,360 --> 00:19:25,679
like the cutouts and so then i just

538
00:19:25,679 --> 00:19:27,360
contracted a mechanical engineering

539
00:19:27,360 --> 00:19:29,760
friend to do the cad for this and put

540
00:19:29,760 --> 00:19:31,440
the right holes in the case

541
00:19:31,440 --> 00:19:34,480
uh conveniently polycase gives you a

542
00:19:34,480 --> 00:19:37,760
base model and you can you know use that

543
00:19:37,760 --> 00:19:40,720
to just customize

544
00:19:40,720 --> 00:19:41,919
so

545
00:19:41,919 --> 00:19:43,840
that's sort of the hardware piece but

546
00:19:43,840 --> 00:19:45,919
you know software is kind of a critical

547
00:19:45,919 --> 00:19:47,600
bit to make this work

548
00:19:47,600 --> 00:19:49,520
socket can remains the best supported

549
00:19:49,520 --> 00:19:52,160
and most used thing for this uh it's

550
00:19:52,160 --> 00:19:54,400
what has the most time on it and what

551
00:19:54,400 --> 00:19:56,559
most people are using and socket can is

552
00:19:56,559 --> 00:19:58,240
part of the linux kernel

553
00:19:58,240 --> 00:20:00,240
can devices basically just become like

554
00:20:00,240 --> 00:20:02,080
any other network device

555
00:20:02,080 --> 00:20:04,559
and you can do you know if config can

556
00:20:04,559 --> 00:20:07,919
zero up and it brings the device up and

557
00:20:07,919 --> 00:20:10,159
this is actually quite you know it's

558
00:20:10,159 --> 00:20:11,919
great because there's just lots of tools

559
00:20:11,919 --> 00:20:14,640
out there so you can open a can bus and

560
00:20:14,640 --> 00:20:16,640
wire shark there's this can utils

561
00:20:16,640 --> 00:20:18,320
package that's in

562
00:20:18,320 --> 00:20:20,400
every major distribution now does basic

563
00:20:20,400 --> 00:20:22,400
sending and receiving and there's a ton

564
00:20:22,400 --> 00:20:24,000
of other tools out there that are built

565
00:20:24,000 --> 00:20:25,600
off of socket cam

566
00:20:25,600 --> 00:20:28,799
uh this targeted the gs usb driver again

567
00:20:28,799 --> 00:20:30,559
because it's in the mainline linux

568
00:20:30,559 --> 00:20:33,760
kernel and i didn't need to you know

569
00:20:33,760 --> 00:20:36,159
do anything to get it broadly supported

570
00:20:36,159 --> 00:20:38,080
on you know most people's devices

571
00:20:38,080 --> 00:20:40,960
unfortunately gsusb does not support can

572
00:20:40,960 --> 00:20:43,360
fd so there is a modified driver i'm

573
00:20:43,360 --> 00:20:45,760
working on getting that merged

574
00:20:45,760 --> 00:20:47,600
i have a patch for working on figuring

575
00:20:47,600 --> 00:20:49,200
out how we can get that into the linux

576
00:20:49,200 --> 00:20:51,280
kernel eventually so that you know that

577
00:20:51,280 --> 00:20:52,960
works out of the box as well the socket

578
00:20:52,960 --> 00:20:54,240
can

579
00:20:54,240 --> 00:20:55,120
but

580
00:20:55,120 --> 00:20:56,640
this is sort of the main main piece of

581
00:20:56,640 --> 00:20:58,480
support and again the tooling out there

582
00:20:58,480 --> 00:21:01,520
is pretty good uh originally written by

583
00:21:01,520 --> 00:21:03,440
the folks at volkswagen actually that

584
00:21:03,440 --> 00:21:05,760
the socket can support

585
00:21:05,760 --> 00:21:09,120
uh for linux journal

586
00:21:09,120 --> 00:21:12,159
but uh you know that's only linux and

587
00:21:12,159 --> 00:21:14,000
i wanted to work towards some

588
00:21:14,000 --> 00:21:16,320
cross-platform support and this is a bit

589
00:21:16,320 --> 00:21:18,320
of a work in progress still but uh it is

590
00:21:18,320 --> 00:21:19,280
working

591
00:21:19,280 --> 00:21:21,760
uh the key here is you know for

592
00:21:21,760 --> 00:21:24,159
cross-platform you're going to need a

593
00:21:24,159 --> 00:21:26,080
driver for every platform right so by

594
00:21:26,080 --> 00:21:28,720
default if you're looking at writing a

595
00:21:28,720 --> 00:21:31,679
driver you know on linux that's going to

596
00:21:31,679 --> 00:21:33,520
end up with one api

597
00:21:33,520 --> 00:21:35,919
to deal with writing a kernel module

598
00:21:35,919 --> 00:21:37,760
windows you've got to write yourself a

599
00:21:37,760 --> 00:21:39,919
windows device driver or the

600
00:21:39,919 --> 00:21:41,120
mac os

601
00:21:41,120 --> 00:21:42,720
i honestly don't even know how you would

602
00:21:42,720 --> 00:21:43,760
do that

603
00:21:43,760 --> 00:21:46,720
in the mac os kernel but uh what i ended

604
00:21:46,720 --> 00:21:49,039
up looking at was lib usb and that's a

605
00:21:49,039 --> 00:21:53,520
user space driver for uh for usb that's

606
00:21:53,520 --> 00:21:55,039
yeah it's been used in quite a number of

607
00:21:55,039 --> 00:21:58,480
things however i also really wanted one

608
00:21:58,480 --> 00:22:00,080
code base like i didn't want to have to

609
00:22:00,080 --> 00:22:02,559
write a different driver for every uh

610
00:22:02,559 --> 00:22:04,240
operating system

611
00:22:04,240 --> 00:22:05,520
and

612
00:22:05,520 --> 00:22:07,679
rust ended up sort of being the

613
00:22:07,679 --> 00:22:09,600
magic solution to this which i'm

614
00:22:09,600 --> 00:22:11,200
surprised that it actually worked out

615
00:22:11,200 --> 00:22:13,440
the way it did but

616
00:22:13,440 --> 00:22:15,360
basically with this you know

617
00:22:15,360 --> 00:22:18,240
one rust library ends up being able to

618
00:22:18,240 --> 00:22:20,720
build on windows mac os and linux and

619
00:22:20,720 --> 00:22:23,120
then provide a usb driver on all of

620
00:22:23,120 --> 00:22:24,400
those systems

621
00:22:24,400 --> 00:22:26,960
and there's no pound defines there's no

622
00:22:26,960 --> 00:22:28,720
uh you know

623
00:22:28,720 --> 00:22:30,559
special like files that are only

624
00:22:30,559 --> 00:22:33,200
compiled on windows or on linux it's

625
00:22:33,200 --> 00:22:35,440
legitimately one code base

626
00:22:35,440 --> 00:22:36,799
uh which i

627
00:22:36,799 --> 00:22:38,400
really did surprise me to be perfectly

628
00:22:38,400 --> 00:22:39,520
honest

629
00:22:39,520 --> 00:22:42,320
uh so lib usb is is a great library for

630
00:22:42,320 --> 00:22:44,320
that the only thing is that if you are

631
00:22:44,320 --> 00:22:46,640
trying to write a lib usb driver you

632
00:22:46,640 --> 00:22:48,720
have an option of an asynchronous or a

633
00:22:48,720 --> 00:22:50,799
synchronous library the synchronous

634
00:22:50,799 --> 00:22:52,880
library is very simple it allows you to

635
00:22:52,880 --> 00:22:54,559
interact with the device through polling

636
00:22:54,559 --> 00:22:56,640
so you ask the device to

637
00:22:56,640 --> 00:22:58,640
give you some data you wait the device

638
00:22:58,640 --> 00:23:00,559
comes back with the data

639
00:23:00,559 --> 00:23:03,039
uh it's it's too slow for something like

640
00:23:03,039 --> 00:23:04,159
can

641
00:23:04,159 --> 00:23:06,640
and because of that i ended up

642
00:23:06,640 --> 00:23:09,280
you know switching to the async driver

643
00:23:09,280 --> 00:23:11,120
which is much less well supported and

644
00:23:11,120 --> 00:23:13,039
rust at least but that allows you to

645
00:23:13,039 --> 00:23:14,559
actually uh

646
00:23:14,559 --> 00:23:16,320
get much better throughput closer to

647
00:23:16,320 --> 00:23:17,679
what you'd have with an actual kernel

648
00:23:17,679 --> 00:23:19,280
driver and uh

649
00:23:19,280 --> 00:23:21,280
that works out quite well so you end up

650
00:23:21,280 --> 00:23:23,440
with a rest support as well as being

651
00:23:23,440 --> 00:23:25,440
able to have c support

652
00:23:25,440 --> 00:23:26,240
but

653
00:23:26,240 --> 00:23:27,840
rust is a great language for writing you

654
00:23:27,840 --> 00:23:29,760
know systems stuff

655
00:23:29,760 --> 00:23:32,080
but it's not fast it's you know a steep

656
00:23:32,080 --> 00:23:34,400
learning curve a lot of effort to get

657
00:23:34,400 --> 00:23:38,159
things working so for a lot of cases uh

658
00:23:38,159 --> 00:23:40,480
python is you know a much better hacky

659
00:23:40,480 --> 00:23:42,240
language i'll say when you want to just

660
00:23:42,240 --> 00:23:44,400
script something up and make it work

661
00:23:44,400 --> 00:23:45,520
and so

662
00:23:45,520 --> 00:23:48,400
the python can option has been it's a

663
00:23:48,400 --> 00:23:50,000
library it's been out there for a while

664
00:23:50,000 --> 00:23:52,880
for doing canon python it surprised

665
00:23:52,880 --> 00:23:55,520
cross-platform supports a lot of devices

666
00:23:55,520 --> 00:23:58,080
and uh now it also supports the cantac

667
00:23:58,080 --> 00:24:00,640
devices uh either through socket can on

668
00:24:00,640 --> 00:24:03,520
linux or through that uh cross-platform

669
00:24:03,520 --> 00:24:05,279
driver everywhere else

670
00:24:05,279 --> 00:24:08,000
so this python library it opens the door

671
00:24:08,000 --> 00:24:10,960
for a lot of things because using

672
00:24:10,960 --> 00:24:12,080
you know

673
00:24:12,080 --> 00:24:15,120
the python can iso tp you get support

674
00:24:15,120 --> 00:24:17,840
for that can tp layer that i was talking

675
00:24:17,840 --> 00:24:20,159
about uh in software

676
00:24:20,159 --> 00:24:23,120
using the uds on can package you get the

677
00:24:23,120 --> 00:24:26,080
iso 14229 support so you can write your

678
00:24:26,080 --> 00:24:29,360
own scan tools very quickly there's it's

679
00:24:29,360 --> 00:24:31,600
a very easy way of doing it

680
00:24:31,600 --> 00:24:32,960
and then there's a lot of other stuff

681
00:24:32,960 --> 00:24:35,679
that's supported through scapy if you uh

682
00:24:35,679 --> 00:24:37,600
haven't played escapee before well it's

683
00:24:37,600 --> 00:24:38,720
a great

684
00:24:38,720 --> 00:24:40,880
language for dealing with packet

685
00:24:40,880 --> 00:24:42,799
encoding and decoding uh they sort of

686
00:24:42,799 --> 00:24:45,120
have their own dsl that makes that easy

687
00:24:45,120 --> 00:24:47,600
but it also now has a ton of support for

688
00:24:47,600 --> 00:24:50,880
automotive specific uh items and that is

689
00:24:50,880 --> 00:24:52,320
extremely useful if you're trying to

690
00:24:52,320 --> 00:24:54,960
build out either it's like uh

691
00:24:54,960 --> 00:24:56,799
fake being a scan tool or even fake

692
00:24:56,799 --> 00:24:59,520
being an ecu and talking to a scan tool

693
00:24:59,520 --> 00:25:01,760
it gives you a lot of tooling that makes

694
00:25:01,760 --> 00:25:05,039
that way easier than doing it by hand

695
00:25:05,039 --> 00:25:07,840
the way this actually works is a module

696
00:25:07,840 --> 00:25:09,760
or a rust library called

697
00:25:09,760 --> 00:25:13,039
pio3 or python trioxide

698
00:25:13,039 --> 00:25:16,080
is uh used to generate pytha the python

699
00:25:16,080 --> 00:25:18,000
module from rust

700
00:25:18,000 --> 00:25:18,880
and

701
00:25:18,880 --> 00:25:21,520
then whenever you build this uh python

702
00:25:21,520 --> 00:25:24,240
module it gets distributed out so people

703
00:25:24,240 --> 00:25:26,159
can install it using pip

704
00:25:26,159 --> 00:25:27,919
and that's done by github action so

705
00:25:27,919 --> 00:25:29,600
whenever i tag a build there it

706
00:25:29,600 --> 00:25:31,919
automatically builds the python module

707
00:25:31,919 --> 00:25:34,080
using rust publishes it to pi pi and

708
00:25:34,080 --> 00:25:36,559
then you can install that using pip

709
00:25:36,559 --> 00:25:37,760
uh so

710
00:25:37,760 --> 00:25:39,360
yeah the whole process has been

711
00:25:39,360 --> 00:25:40,960
automated out to make that that pretty

712
00:25:40,960 --> 00:25:43,120
simple uh to push new releases when

713
00:25:43,120 --> 00:25:45,200
stuff breaks

714
00:25:45,200 --> 00:25:47,360
speaking of stuff that breaks uh bus

715
00:25:47,360 --> 00:25:50,320
master i'm just gonna gloss over uh it's

716
00:25:50,320 --> 00:25:52,480
an open source windows software from

717
00:25:52,480 --> 00:25:56,000
bosch that does can and there is some

718
00:25:56,000 --> 00:25:58,080
contact support for it now

719
00:25:58,080 --> 00:25:59,120
but

720
00:25:59,120 --> 00:26:01,279
bus master is pretty dead it looks like

721
00:26:01,279 --> 00:26:02,400
so

722
00:26:02,400 --> 00:26:04,960
but this did result in a you know a c

723
00:26:04,960 --> 00:26:06,720
bindings that you could use on windows

724
00:26:06,720 --> 00:26:09,039
or linux either as a dsl or a shared

725
00:26:09,039 --> 00:26:11,279
object

726
00:26:11,279 --> 00:26:12,960
so just a little bit about the story of

727
00:26:12,960 --> 00:26:15,440
building and selling the device so i

728
00:26:15,440 --> 00:26:18,159
have a cm that builds the pcbs

729
00:26:18,159 --> 00:26:20,960
uh they use the

730
00:26:20,960 --> 00:26:24,159
same cms before and you know using cms

731
00:26:24,159 --> 00:26:26,320
nowadays for this stuff is

732
00:26:26,320 --> 00:26:28,000
the price has gone way down since when i

733
00:26:28,000 --> 00:26:29,919
started looking at it it's uh

734
00:26:29,919 --> 00:26:32,000
very reasonable to have your stuff built

735
00:26:32,000 --> 00:26:35,279
uh by you know by some cms the cases are

736
00:26:35,279 --> 00:26:37,360
manufactured by poly case as i said they

737
00:26:37,360 --> 00:26:38,960
customize them and

738
00:26:38,960 --> 00:26:40,400
make it so all the cutouts are there

739
00:26:40,400 --> 00:26:42,720
when they arrive and then i have been

740
00:26:42,720 --> 00:26:44,720
assembling doing final assembly of these

741
00:26:44,720 --> 00:26:46,720
which is you know you put on a movie and

742
00:26:46,720 --> 00:26:48,960
uh get some screws and screwdriver

743
00:26:48,960 --> 00:26:50,559
electric screwdriver

744
00:26:50,559 --> 00:26:52,799
knock them together uh i ended up

745
00:26:52,799 --> 00:26:54,799
launching this through crowd supply

746
00:26:54,799 --> 00:26:57,120
which is a service that does sort of the

747
00:26:57,120 --> 00:26:59,760
kickstarter for open source hardware

748
00:26:59,760 --> 00:27:01,919
uh i highly recommend them if you're

749
00:27:01,919 --> 00:27:03,600
interested in launching an open source

750
00:27:03,600 --> 00:27:04,960
hardware project

751
00:27:04,960 --> 00:27:07,279
uh they really help you get through the

752
00:27:07,279 --> 00:27:09,039
process and then they end up also

753
00:27:09,039 --> 00:27:11,039
partnering with mouser to get really

754
00:27:11,039 --> 00:27:13,120
good fulfillment channels so

755
00:27:13,120 --> 00:27:14,880
if you're interested in that i would i

756
00:27:14,880 --> 00:27:17,120
would advise going going through them if

757
00:27:17,120 --> 00:27:19,520
you'd like

758
00:27:19,520 --> 00:27:21,200
and just some final notes here so if

759
00:27:21,200 --> 00:27:22,640
you're looking to build some open source

760
00:27:22,640 --> 00:27:24,159
hardware uh

761
00:27:24,159 --> 00:27:26,240
just some things to think about uh bomb

762
00:27:26,240 --> 00:27:27,760
cost is critical because everyone wants

763
00:27:27,760 --> 00:27:30,720
to cut so if it costs ten dollars for

764
00:27:30,720 --> 00:27:32,960
the bill of materials uh you're probably

765
00:27:32,960 --> 00:27:35,440
gonna need to msrp the thing for at

766
00:27:35,440 --> 00:27:37,679
least double what your costs are and

767
00:27:37,679 --> 00:27:38,480
then you still have to get them

768
00:27:38,480 --> 00:27:40,000
dissembled so

769
00:27:40,000 --> 00:27:42,000
ten dollars in bomb costs maybe by the

770
00:27:42,000 --> 00:27:43,360
time it all gets put together you're

771
00:27:43,360 --> 00:27:45,600
looking at twenty dollars and then

772
00:27:45,600 --> 00:27:46,960
you're probably gonna

773
00:27:46,960 --> 00:27:48,640
end up having to wholesale that for

774
00:27:48,640 --> 00:27:50,480
double and then you want to make some

775
00:27:50,480 --> 00:27:52,799
profit off it as well so these start to

776
00:27:52,799 --> 00:27:56,080
stack up with hardware pretty quickly

777
00:27:56,080 --> 00:27:58,720
uh with open source hardware i think you

778
00:27:58,720 --> 00:28:00,080
really do need to be building it for

779
00:28:00,080 --> 00:28:02,399
yourself open source hardware right

780
00:28:02,399 --> 00:28:05,760
today at least isn't a great business uh

781
00:28:05,760 --> 00:28:06,799
you

782
00:28:06,799 --> 00:28:08,399
you know you build stuff that you think

783
00:28:08,399 --> 00:28:10,960
is cool and uh other people might think

784
00:28:10,960 --> 00:28:13,360
it's cool as well uh i think you can

785
00:28:13,360 --> 00:28:16,159
leverage open source hardware to you

786
00:28:16,159 --> 00:28:17,919
know

787
00:28:17,919 --> 00:28:20,559
build out uh other tooling and you know

788
00:28:20,559 --> 00:28:23,600
build out uh other business but

789
00:28:23,600 --> 00:28:26,159
it's a hard business and of itself to

790
00:28:26,159 --> 00:28:27,840
sell hardware

791
00:28:27,840 --> 00:28:29,679
don't build in a vacuum so show other

792
00:28:29,679 --> 00:28:31,279
people your products get feedback

793
00:28:31,279 --> 00:28:32,960
there's a lot of people that i sent for

794
00:28:32,960 --> 00:28:34,880
you know pre-release boards out to that

795
00:28:34,880 --> 00:28:36,320
uh played around with it and found

796
00:28:36,320 --> 00:28:39,440
problems and uh recommendations so

797
00:28:39,440 --> 00:28:40,960
uh i recommend doing that and then the

798
00:28:40,960 --> 00:28:42,640
other thing is always finding you know

799
00:28:42,640 --> 00:28:44,480
vulnerability or not vulnerabilities but

800
00:28:44,480 --> 00:28:47,440
just bugs errors in here in your stuff

801
00:28:47,440 --> 00:28:48,720
just because it works on your computer

802
00:28:48,720 --> 00:28:50,480
doesn't mean it works on everyone so

803
00:28:50,480 --> 00:28:52,960
that's uh another good reason and chip

804
00:28:52,960 --> 00:28:55,279
shortages suck uh we're currently

805
00:28:55,279 --> 00:28:57,600
sitting in the hopefully the getting

806
00:28:57,600 --> 00:28:59,279
towards the tail end of a pretty big

807
00:28:59,279 --> 00:29:01,760
silicon shortage but uh who knows

808
00:29:01,760 --> 00:29:04,320
and uh that's a real pain unfortunately

809
00:29:04,320 --> 00:29:06,080
uh to deal with

810
00:29:06,080 --> 00:29:08,000
uh i currently

811
00:29:08,000 --> 00:29:10,240
am not i'm waiting to get some more

812
00:29:10,240 --> 00:29:13,120
boards produced for inventory and uh

813
00:29:13,120 --> 00:29:14,240
yeah

814
00:29:14,240 --> 00:29:16,000
the microcontrollers aren't necessarily

815
00:29:16,000 --> 00:29:18,480
available right now so that is the thing

816
00:29:18,480 --> 00:29:20,880
that you need to end up dealing with

817
00:29:20,880 --> 00:29:22,720
we're pretty short on time here just

818
00:29:22,720 --> 00:29:24,960
coming to the end a

819
00:29:24,960 --> 00:29:26,720
few demos i can normally do but i'll

820
00:29:26,720 --> 00:29:28,960
just say the next steps for this

821
00:29:28,960 --> 00:29:31,360
the rust command line interface

822
00:29:31,360 --> 00:29:34,159
it needs some it needs some love uh

823
00:29:34,159 --> 00:29:36,880
again the linux support for socket can

824
00:29:36,880 --> 00:29:38,960
is really the main thing right now

825
00:29:38,960 --> 00:29:41,120
uh so i'd like to get that more

826
00:29:41,120 --> 00:29:42,799
functional at least to the level of the

827
00:29:42,799 --> 00:29:46,159
can utils tool on linux uh getting the

828
00:29:46,159 --> 00:29:48,000
fd support merged in the linux kernel

829
00:29:48,000 --> 00:29:49,919
would be really nice

830
00:29:49,919 --> 00:29:51,760
and i also want to build some breakout

831
00:29:51,760 --> 00:29:54,000
board for it just so you can do obd2 and

832
00:29:54,000 --> 00:29:56,399
different you know types of connectors

833
00:29:56,399 --> 00:29:57,919
uh easily

834
00:29:57,919 --> 00:30:00,080
but uh yeah i know some of the ideas of

835
00:30:00,080 --> 00:30:02,399
next steps so

836
00:30:02,399 --> 00:30:04,080
i think that brings me

837
00:30:04,080 --> 00:30:06,240
quickly to the end of the the block here

838
00:30:06,240 --> 00:30:08,080
again thanks for sticking around and i

839
00:30:08,080 --> 00:30:09,440
hope that was of some interest if you

840
00:30:09,440 --> 00:30:11,039
want to play around with can this is one

841
00:30:11,039 --> 00:30:12,960
option and uh

842
00:30:12,960 --> 00:30:14,159
it's uh

843
00:30:14,159 --> 00:30:16,399
fun to see you know build a hardware

844
00:30:16,399 --> 00:30:19,279
tool and see people fork it and do stuff

845
00:30:19,279 --> 00:30:21,120
with it and you know i get people asking

846
00:30:21,120 --> 00:30:22,559
like hey can i take this and work it

847
00:30:22,559 --> 00:30:24,640
into some other design and that's always

848
00:30:24,640 --> 00:30:26,559
interesting to see and see what people

849
00:30:26,559 --> 00:30:28,000
have done with it so it's

850
00:30:28,000 --> 00:30:29,679
you know great to take stuff and put it

851
00:30:29,679 --> 00:30:31,520
out there and see what happens

852
00:30:31,520 --> 00:30:32,880
yeah thanks again and thanks to the

853
00:30:32,880 --> 00:30:33,840
hardware

854
00:30:33,840 --> 00:30:36,480
dot io folks for having me around

855
00:30:36,480 --> 00:30:37,840
it's always a

856
00:30:37,840 --> 00:30:39,760
good event and hopefully see you folks

857
00:30:39,760 --> 00:30:42,080
in person in the near future at the next

858
00:30:42,080 --> 00:30:44,320
one

859
00:30:47,039 --> 00:30:50,070
all right thank you eric

860
00:30:50,070 --> 00:30:51,640
[Applause]

861
00:30:51,640 --> 00:30:55,829
[Music]

