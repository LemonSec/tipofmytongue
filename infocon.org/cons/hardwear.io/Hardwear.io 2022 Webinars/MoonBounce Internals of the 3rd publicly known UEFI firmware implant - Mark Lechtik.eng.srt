1
00:00:12,480 --> 00:00:13,759
[Music]

2
00:00:13,759 --> 00:00:15,360
welcome everyone and thank you for

3
00:00:15,360 --> 00:00:17,680
joining us this afternoon i'm andrea and

4
00:00:17,680 --> 00:00:19,439
i will be your host for today's session

5
00:00:19,439 --> 00:00:20,720
on moonbows

6
00:00:20,720 --> 00:00:22,960
um just before we jump into the webinar

7
00:00:22,960 --> 00:00:25,680
let me share what we have been up to

8
00:00:25,680 --> 00:00:27,680
so recently we have opened our call for

9
00:00:27,680 --> 00:00:30,320
papers for the hardware io usa edition

10
00:00:30,320 --> 00:00:31,840
for which we are looking for advanced

11
00:00:31,840 --> 00:00:33,840
technical research covering diverse

12
00:00:33,840 --> 00:00:36,719
topics including but not limited to

13
00:00:36,719 --> 00:00:38,960
hardware contesting embedded systems

14
00:00:38,960 --> 00:00:41,280
cryptography automotive and medical

15
00:00:41,280 --> 00:00:44,320
device security smartphone firmware or

16
00:00:44,320 --> 00:00:46,640
telecom networks nevertheless if you

17
00:00:46,640 --> 00:00:48,640
have any kind of hardware security

18
00:00:48,640 --> 00:00:50,960
research feel free to share it and we

19
00:00:50,960 --> 00:00:53,600
will get back to you the deadline for

20
00:00:53,600 --> 00:00:55,520
this is the first of march so you still

21
00:00:55,520 --> 00:00:59,199
have one month to go at the same time we

22
00:00:59,199 --> 00:01:01,120
have also opened our registration for

23
00:01:01,120 --> 00:01:03,120
our hands-on trainings

24
00:01:03,120 --> 00:01:05,600
on a variety of topics for instance

25
00:01:05,600 --> 00:01:08,479
hardware hacking basics

26
00:01:08,479 --> 00:01:10,000
car hacking

27
00:01:10,000 --> 00:01:12,320
side channel analysis revert and

28
00:01:12,320 --> 00:01:14,880
engineering firmware with kidra or

29
00:01:14,880 --> 00:01:18,560
reverse engineering uh baseband firmware

30
00:01:18,560 --> 00:01:21,439
um our early bird is still available so

31
00:01:21,439 --> 00:01:22,880
if you're interested in any of these

32
00:01:22,880 --> 00:01:25,280
topics please feel free to head to our

33
00:01:25,280 --> 00:01:27,200
training section

34
00:01:27,200 --> 00:01:28,880
today uh

35
00:01:28,880 --> 00:01:31,439
i am happy to welcome mark

36
00:01:31,439 --> 00:01:33,520
mark is a senior security researcher at

37
00:01:33,520 --> 00:01:36,320
kaspersky and in today's presentation he

38
00:01:36,320 --> 00:01:38,720
will explain how in the spring of 2021

39
00:01:38,720 --> 00:01:40,799
his team was made aware of novel threat

40
00:01:40,799 --> 00:01:43,200
against using uefi in the wild

41
00:01:43,200 --> 00:01:45,119
where it was evident that attackers had

42
00:01:45,119 --> 00:01:47,200
modified and embedded an implant with a

43
00:01:47,200 --> 00:01:50,000
benign uefi firmware image

44
00:01:50,000 --> 00:01:52,159
mark and his team dubbed this discovered

45
00:01:52,159 --> 00:01:54,479
implant moonbounds and in this talk we

46
00:01:54,479 --> 00:01:56,880
will learn more uh delicate details

47
00:01:56,880 --> 00:01:58,000
about how

48
00:01:58,000 --> 00:01:59,840
mumbai's research went from its

49
00:01:59,840 --> 00:02:02,719
inception up until uh today

50
00:02:02,719 --> 00:02:04,960
mark i would like to invite you to start

51
00:02:04,960 --> 00:02:07,119
your presentation thank you all right

52
00:02:07,119 --> 00:02:09,360
thank you andrea i hope uh everybody can

53
00:02:09,360 --> 00:02:11,520
see my screen

54
00:02:11,520 --> 00:02:14,239
right yes we do good

55
00:02:14,239 --> 00:02:17,520
uh okay so uh hello everyone and uh

56
00:02:17,520 --> 00:02:19,360
thank you for joining this webinar

57
00:02:19,360 --> 00:02:22,080
hosted by hardware i o uh as andrea

58
00:02:22,080 --> 00:02:24,160
mentioned my name is mark leftick and

59
00:02:24,160 --> 00:02:26,319
today i'm going to walk you through a

60
00:02:26,319 --> 00:02:29,200
recent research released by kaspersky on

61
00:02:29,200 --> 00:02:31,920
a uefi firmware implant

62
00:02:31,920 --> 00:02:33,920
that we dubbed moonbounds

63
00:02:33,920 --> 00:02:36,720
before we dive in uh a quick uh

64
00:02:36,720 --> 00:02:38,560
introduction to the people who were

65
00:02:38,560 --> 00:02:41,280
involved in this research um and those

66
00:02:41,280 --> 00:02:43,840
are um vasily bernikov and ilya

67
00:02:43,840 --> 00:02:46,319
barrissov from our anti-malware research

68
00:02:46,319 --> 00:02:49,840
team uh as well as denis

69
00:02:49,840 --> 00:02:51,280
and myself

70
00:02:51,280 --> 00:02:52,959
who are part of great which is the

71
00:02:52,959 --> 00:02:54,959
global research and analysis team of

72
00:02:54,959 --> 00:02:56,480
kaspersky

73
00:02:56,480 --> 00:02:59,200
now uh if you join me here today you

74
00:02:59,200 --> 00:03:02,400
probably uh have a general idea of what

75
00:03:02,400 --> 00:03:04,879
we are going to talk about or at least

76
00:03:04,879 --> 00:03:08,640
you should uh from the title uh but uh

77
00:03:08,640 --> 00:03:11,200
still so what is it that we are going to

78
00:03:11,200 --> 00:03:12,400
discuss

79
00:03:12,400 --> 00:03:16,640
so uh the story that uh underlies uh

80
00:03:16,640 --> 00:03:18,720
this webinar revolves around the

81
00:03:18,720 --> 00:03:21,280
discovery um that my colleagues and

82
00:03:21,280 --> 00:03:24,159
myself had at the end of last year uh

83
00:03:24,159 --> 00:03:26,959
wherein uh kaspersky's firmware scanning

84
00:03:26,959 --> 00:03:30,159
technology uh has made us aware that a

85
00:03:30,159 --> 00:03:32,879
formerly unknown ufi

86
00:03:32,879 --> 00:03:34,799
female implant was actually lurking in

87
00:03:34,799 --> 00:03:36,720
the wild

88
00:03:36,720 --> 00:03:40,000
and interestingly from our analysis

89
00:03:40,000 --> 00:03:41,680
we could learn that

90
00:03:41,680 --> 00:03:44,879
this particular threat was in a sense

91
00:03:44,879 --> 00:03:47,840
more advanced than uh other ufi firmware

92
00:03:47,840 --> 00:03:50,400
implants that we have seen so far

93
00:03:50,400 --> 00:03:53,200
which um to be honest are quite a rare

94
00:03:53,200 --> 00:03:56,400
occurrence um in and of themselves and

95
00:03:56,400 --> 00:03:58,560
as a matter of fact we are considerably

96
00:03:58,560 --> 00:04:01,280
confident that the actor who deployed

97
00:04:01,280 --> 00:04:04,159
this particular implant is an infamous

98
00:04:04,159 --> 00:04:05,599
threat group

99
00:04:05,599 --> 00:04:08,879
that goes by the name of apt41 and in

100
00:04:08,879 --> 00:04:11,680
this webinar i'd like to share with you

101
00:04:11,680 --> 00:04:14,560
how we reached that conclusion but more

102
00:04:14,560 --> 00:04:16,639
notably i would like to go into the

103
00:04:16,639 --> 00:04:18,639
technical specifics

104
00:04:18,639 --> 00:04:20,160
of this

105
00:04:20,160 --> 00:04:22,880
curious piece of malware that we found

106
00:04:22,880 --> 00:04:24,800
of course everything that we are going

107
00:04:24,800 --> 00:04:27,280
to talk about here was already

108
00:04:27,280 --> 00:04:29,280
documented in kaspersky's blog on

109
00:04:29,280 --> 00:04:30,960
securelist.com

110
00:04:30,960 --> 00:04:33,360
you can access it through the qr code

111
00:04:33,360 --> 00:04:35,759
that you see on the screen and get up to

112
00:04:35,759 --> 00:04:38,080
date with all the research details that

113
00:04:38,080 --> 00:04:40,719
concern this

114
00:04:40,840 --> 00:04:44,800
case so uh to contextualize this

115
00:04:44,800 --> 00:04:47,759
implants behavior on the system i will

116
00:04:47,759 --> 00:04:50,960
first quickly review how exactly ufi

117
00:04:50,960 --> 00:04:52,000
works

118
00:04:52,000 --> 00:04:52,800
and

119
00:04:52,800 --> 00:04:56,479
you probably know uh by now that ufi is

120
00:04:56,479 --> 00:04:58,880
the standard that constitutes how the

121
00:04:58,880 --> 00:05:01,680
boot process on most of the modern pcs

122
00:05:01,680 --> 00:05:04,240
and laptops work

123
00:05:04,240 --> 00:05:05,919
works and it can be broken down

124
00:05:05,919 --> 00:05:08,400
essentially into several stages uh the

125
00:05:08,400 --> 00:05:10,880
first two stages um that you see on the

126
00:05:10,880 --> 00:05:12,720
screen right now that are referred to as

127
00:05:12,720 --> 00:05:14,720
the security and the pre-efi

128
00:05:14,720 --> 00:05:17,280
initialization environment um are

129
00:05:17,280 --> 00:05:19,680
executed from a designated hardware on

130
00:05:19,680 --> 00:05:22,240
the motherboard called the spi flash

131
00:05:22,240 --> 00:05:23,600
chip

132
00:05:23,600 --> 00:05:25,520
and those are essentially in charge of

133
00:05:25,520 --> 00:05:27,680
initializing the most uh imperative

134
00:05:27,680 --> 00:05:29,919
components of the machine like the cpu

135
00:05:29,919 --> 00:05:32,720
and chipset but most notably they

136
00:05:32,720 --> 00:05:35,440
initialize the memory controller which

137
00:05:35,440 --> 00:05:36,400
is

138
00:05:36,400 --> 00:05:38,240
fundamental obviously for creating a

139
00:05:38,240 --> 00:05:40,800
permanent address space um in the

140
00:05:40,800 --> 00:05:43,039
computer's ram in which any subsequent

141
00:05:43,039 --> 00:05:43,919
um

142
00:05:43,919 --> 00:05:46,800
boot code can operate

143
00:05:46,800 --> 00:05:50,000
from those two phases um control is then

144
00:05:50,000 --> 00:05:53,039
passed to an uh important component of

145
00:05:53,039 --> 00:05:55,199
the blue chain which is called the dixie

146
00:05:55,199 --> 00:05:56,560
dispatcher

147
00:05:56,560 --> 00:05:59,440
and that component also happens to be at

148
00:05:59,440 --> 00:06:01,680
the center of the infection chain that

149
00:06:01,680 --> 00:06:03,520
underlies the moon balance implant and

150
00:06:03,520 --> 00:06:07,759
we will discuss this um in a little bit

151
00:06:07,759 --> 00:06:10,240
now what the dixie dispatcher is in

152
00:06:10,240 --> 00:06:12,000
charge of is setting up what's called

153
00:06:12,000 --> 00:06:14,240
the driver execution environment

154
00:06:14,240 --> 00:06:15,280
which

155
00:06:15,280 --> 00:06:18,080
is this sort of a restricted environment

156
00:06:18,080 --> 00:06:21,039
that facilitates some basic control of

157
00:06:21,039 --> 00:06:24,000
the machine prior to the loading of the

158
00:06:24,000 --> 00:06:26,720
operating system so for example uh to

159
00:06:26,720 --> 00:06:29,680
allow boot code to access the disk and

160
00:06:29,680 --> 00:06:32,400
load files from it or allow later

161
00:06:32,400 --> 00:06:35,120
components in the boot sequence to

162
00:06:35,120 --> 00:06:38,639
print a console or a ui on the screen

163
00:06:38,639 --> 00:06:41,199
this environment uses a set of drivers

164
00:06:41,199 --> 00:06:44,400
that are called dxi drivers that allow

165
00:06:44,400 --> 00:06:46,720
this sort of rudimentary

166
00:06:46,720 --> 00:06:48,960
interaction with the machine's hardware

167
00:06:48,960 --> 00:06:51,039
resources

168
00:06:51,039 --> 00:06:54,240
the access to some of these resources is

169
00:06:54,240 --> 00:06:58,000
given through two sets of basic apis

170
00:06:58,000 --> 00:07:01,199
referred to as boot services and runtime

171
00:07:01,199 --> 00:07:04,319
services with the boot services uh being

172
00:07:04,319 --> 00:07:06,800
essentially uh functions callable by

173
00:07:06,800 --> 00:07:09,120
other components uh throughout the boot

174
00:07:09,120 --> 00:07:12,319
sequence um being of the primary inter

175
00:07:12,319 --> 00:07:14,800
interest to us in the context of the

176
00:07:14,800 --> 00:07:16,880
moon balance infection and again i'll

177
00:07:16,880 --> 00:07:21,120
tackle that um in a short while

178
00:07:21,120 --> 00:07:23,680
the next uh part of the boot sequence is

179
00:07:23,680 --> 00:07:25,919
quite straightforward that is what we

180
00:07:25,919 --> 00:07:28,240
refer to as the boot dispatcher which is

181
00:07:28,240 --> 00:07:30,560
uh generally speaking a mechanism that

182
00:07:30,560 --> 00:07:32,560
allows the user to choose which

183
00:07:32,560 --> 00:07:34,800
operating system

184
00:07:34,800 --> 00:07:37,199
to boot to in case the user has more

185
00:07:37,199 --> 00:07:39,280
than one operating system installed on

186
00:07:39,280 --> 00:07:40,800
the machine

187
00:07:40,800 --> 00:07:43,199
and that would in turn invoke

188
00:07:43,199 --> 00:07:44,560
the particular

189
00:07:44,560 --> 00:07:47,280
and relevant operating system loader

190
00:07:47,280 --> 00:07:49,120
and then the operating system loader

191
00:07:49,120 --> 00:07:51,440
will of course load the corresponding

192
00:07:51,440 --> 00:07:53,360
operating system kernel

193
00:07:53,360 --> 00:07:55,599
which is where roughly speaking the boot

194
00:07:55,599 --> 00:07:57,919
sequence ends and the operating system

195
00:07:57,919 --> 00:08:00,479
takes control

196
00:08:00,479 --> 00:08:03,120
so now with this very high level

197
00:08:03,120 --> 00:08:05,520
understanding and general framework of

198
00:08:05,520 --> 00:08:09,280
how uefi works

199
00:08:09,280 --> 00:08:12,560
we should probably ask ourselves how

200
00:08:12,560 --> 00:08:15,919
is moon balance's infection manifested

201
00:08:15,919 --> 00:08:17,199
in it

202
00:08:17,199 --> 00:08:19,759
and to answer it we can break down moon

203
00:08:19,759 --> 00:08:22,000
bounces infection to

204
00:08:22,000 --> 00:08:25,039
or moon balance infection chain to four

205
00:08:25,039 --> 00:08:27,199
essential phases

206
00:08:27,199 --> 00:08:30,319
with the core of the infection being

207
00:08:30,319 --> 00:08:32,799
based in the component that i described

208
00:08:32,799 --> 00:08:34,640
a few moments ago called the dixie

209
00:08:34,640 --> 00:08:37,200
dispatcher so in essence what the

210
00:08:37,200 --> 00:08:38,719
attackers did

211
00:08:38,719 --> 00:08:41,760
was to infect or modify the image of

212
00:08:41,760 --> 00:08:44,080
this uh particular component within the

213
00:08:44,080 --> 00:08:48,320
ua5 firmware on the spi flash and that

214
00:08:48,320 --> 00:08:50,560
allowed uh further malicious code to

215
00:08:50,560 --> 00:08:53,040
propagate from the from this component

216
00:08:53,040 --> 00:08:55,040
to other boot sequence

217
00:08:55,040 --> 00:08:57,360
components uh once the computer is

218
00:08:57,360 --> 00:08:58,240
started

219
00:08:58,240 --> 00:09:00,880
more specifically uh the implants code

220
00:09:00,880 --> 00:09:03,279
first reaches the uh windows operating

221
00:09:03,279 --> 00:09:04,640
system loader

222
00:09:04,640 --> 00:09:06,080
um

223
00:09:06,080 --> 00:09:09,120
then it reaches the windows kernel and

224
00:09:09,120 --> 00:09:10,959
finally it deploys a malicious

225
00:09:10,959 --> 00:09:13,519
components uh a malicious component in a

226
00:09:13,519 --> 00:09:15,839
windows user mode process

227
00:09:15,839 --> 00:09:17,600
so having that in mind

228
00:09:17,600 --> 00:09:20,320
we can now articulate the particular

229
00:09:20,320 --> 00:09:24,160
steps that are taken from the moment uh

230
00:09:24,160 --> 00:09:26,000
that the malicious dixie dispatcher

231
00:09:26,000 --> 00:09:29,200
kicks in during the machine startup and

232
00:09:29,200 --> 00:09:31,360
until the malware propagates to user

233
00:09:31,360 --> 00:09:34,000
land process once the operating system

234
00:09:34,000 --> 00:09:35,600
is up and running

235
00:09:35,600 --> 00:09:37,519
so let's do it

236
00:09:37,519 --> 00:09:42,000
so as i mentioned uh a moment ago um

237
00:09:42,000 --> 00:09:45,600
the uh core of the infection lies um in

238
00:09:45,600 --> 00:09:49,040
some changes made by the attackers to uh

239
00:09:49,040 --> 00:09:53,200
the uh dixie uh dispatcher

240
00:09:53,200 --> 00:09:55,360
uh in the firmware and those changes are

241
00:09:55,360 --> 00:09:59,360
mainly the addition of um inline hooks

242
00:09:59,360 --> 00:10:01,600
first of all of of particular payload

243
00:10:01,600 --> 00:10:05,279
and then inline hooks within um

244
00:10:05,279 --> 00:10:08,399
some efi boot services functions that

245
00:10:08,399 --> 00:10:10,720
divert the execution

246
00:10:10,720 --> 00:10:12,560
of the original execution of this

247
00:10:12,560 --> 00:10:14,959
component to the particular payload that

248
00:10:14,959 --> 00:10:17,040
is embedded within it

249
00:10:17,040 --> 00:10:20,720
generally speaking uh these hooks um are

250
00:10:20,720 --> 00:10:23,920
plain patches to the first bytes um

251
00:10:23,920 --> 00:10:26,000
of the hooked functions

252
00:10:26,000 --> 00:10:28,640
such that the first calls

253
00:10:28,640 --> 00:10:31,040
to these functions are diverted to a

254
00:10:31,040 --> 00:10:33,440
designated hook handlers

255
00:10:33,440 --> 00:10:37,040
after the first execution of each

256
00:10:37,040 --> 00:10:40,000
such handler the patched bytes

257
00:10:40,000 --> 00:10:42,160
are restored to the original ones and

258
00:10:42,160 --> 00:10:44,160
control is passed back to the original

259
00:10:44,160 --> 00:10:46,720
functions so as to

260
00:10:46,720 --> 00:10:48,640
not interfere with the regular boot

261
00:10:48,640 --> 00:10:51,680
sequence because essentially that one is

262
00:10:51,680 --> 00:10:54,320
still required to work as well in order

263
00:10:54,320 --> 00:10:57,839
for the infection to properly go through

264
00:10:57,839 --> 00:10:58,560
so

265
00:10:58,560 --> 00:11:01,839
let's try to tackle what each hook

266
00:11:01,839 --> 00:11:02,800
function

267
00:11:02,800 --> 00:11:05,120
achieves in this stage

268
00:11:05,120 --> 00:11:07,360
when the dixie dispatcher runs

269
00:11:07,360 --> 00:11:10,800
upon the computer startup it first calls

270
00:11:10,800 --> 00:11:12,560
at a particular point

271
00:11:12,560 --> 00:11:15,120
the allocate pull

272
00:11:15,120 --> 00:11:17,600
boot service function the hook logic

273
00:11:17,600 --> 00:11:20,000
logic for this function will in turn

274
00:11:20,000 --> 00:11:22,560
allocate a designated buffer in physical

275
00:11:22,560 --> 00:11:23,760
memory

276
00:11:23,760 --> 00:11:26,880
and we'll copy shell code into it

277
00:11:26,880 --> 00:11:28,399
and we'll discuss this shell quite a

278
00:11:28,399 --> 00:11:30,560
little bit later um

279
00:11:30,560 --> 00:11:32,880
before we do that let's talk let's

280
00:11:32,880 --> 00:11:35,279
tackle another uh function which is the

281
00:11:35,279 --> 00:11:38,880
create event x function um

282
00:11:38,880 --> 00:11:41,680
in which case uh the hook function will

283
00:11:41,680 --> 00:11:44,000
be invoked um

284
00:11:44,000 --> 00:11:45,040
will

285
00:11:45,040 --> 00:11:47,360
eventually register a particular

286
00:11:47,360 --> 00:11:49,200
callback function

287
00:11:49,200 --> 00:11:52,000
for an event of a legacy boot so as some

288
00:11:52,000 --> 00:11:55,920
of you know um ufi uh has what's called

289
00:11:55,920 --> 00:11:58,320
csm

290
00:11:58,320 --> 00:11:59,959
which stands for uh

291
00:11:59,959 --> 00:12:03,279
compatibility let me recall the acronym

292
00:12:03,279 --> 00:12:06,240
that should be a

293
00:12:06,240 --> 00:12:08,639
compatibility support module and the

294
00:12:08,639 --> 00:12:10,959
compatibility the compatibility support

295
00:12:10,959 --> 00:12:14,480
module uh allows uh essentially to load

296
00:12:14,480 --> 00:12:17,760
um to to to conduct a boot sequence that

297
00:12:17,760 --> 00:12:22,720
uh initiates from the mbr uh while uh

298
00:12:22,720 --> 00:12:27,120
having alongside the ufi um um the the

299
00:12:27,120 --> 00:12:29,519
the ufi loaded uh through firmware as

300
00:12:29,519 --> 00:12:33,360
well so um that uh kind of support for

301
00:12:33,360 --> 00:12:36,720
legacy boot uh is facilitated by the csm

302
00:12:36,720 --> 00:12:39,360
and in the event of a legacy boot uh

303
00:12:39,360 --> 00:12:42,079
we'll have a callback that will allow uh

304
00:12:42,079 --> 00:12:45,600
to map the uh formerly um allocated

305
00:12:45,600 --> 00:12:47,360
buffer to which we wrote shellcode to

306
00:12:47,360 --> 00:12:49,519
map it to the address space of the

307
00:12:49,519 --> 00:12:52,480
windows kernel and invoke the shell code

308
00:12:52,480 --> 00:12:55,760
from within it so we're kind of

309
00:12:56,000 --> 00:12:58,320
in this case being able to tackle both

310
00:12:58,320 --> 00:13:01,120
cases the legacy boot and the boot uh

311
00:13:01,120 --> 00:13:04,880
through uefi firmware

312
00:13:05,279 --> 00:13:08,639
and then uh after we have those two uh

313
00:13:08,639 --> 00:13:12,240
hooks running and um

314
00:13:12,240 --> 00:13:14,639
we actually let the uh boot sequence

315
00:13:14,639 --> 00:13:17,519
carry on until um

316
00:13:17,519 --> 00:13:21,120
we reach the point of execution where

317
00:13:21,120 --> 00:13:24,160
the windows loader runs

318
00:13:24,160 --> 00:13:28,639
um so at this particular point um

319
00:13:28,639 --> 00:13:30,880
when the operating systems loader kicks

320
00:13:30,880 --> 00:13:31,600
in

321
00:13:31,600 --> 00:13:34,079
it is under essential to understand that

322
00:13:34,079 --> 00:13:36,480
uh the cleanup and termination of the

323
00:13:36,480 --> 00:13:40,240
boot services um is done by the os

324
00:13:40,240 --> 00:13:42,639
loader um and that is done through

325
00:13:42,639 --> 00:13:44,399
invocation of a function that is called

326
00:13:44,399 --> 00:13:47,680
exit boot services which is in itself a

327
00:13:47,680 --> 00:13:50,480
part of the e5 boot service table

328
00:13:50,480 --> 00:13:52,880
um so the hooking of this function is

329
00:13:52,880 --> 00:13:55,120
really what allows the malicious code to

330
00:13:55,120 --> 00:13:57,519
propagate essentially from the dixie

331
00:13:57,519 --> 00:13:59,519
dispatcher to the operating systems

332
00:13:59,519 --> 00:14:02,639
loader which is uh where it is in charge

333
00:14:02,639 --> 00:14:05,519
of installing um another hook to a

334
00:14:05,519 --> 00:14:08,160
function that is called osl arc transfer

335
00:14:08,160 --> 00:14:09,600
to kernel

336
00:14:09,600 --> 00:14:11,519
uh this function is originally used to

337
00:14:11,519 --> 00:14:14,480
pass control from the loader uh from the

338
00:14:14,480 --> 00:14:16,959
os loader to the windows kernel so

339
00:14:16,959 --> 00:14:19,839
invoking malicious code in that um

340
00:14:19,839 --> 00:14:22,240
transition transitional phase uh when

341
00:14:22,240 --> 00:14:25,279
the os kernel image is loaded in memory

342
00:14:25,279 --> 00:14:28,079
uh but has still not been executed uh is

343
00:14:28,079 --> 00:14:30,320
what essentially allows introducing

344
00:14:30,320 --> 00:14:31,360
further

345
00:14:31,360 --> 00:14:33,440
malicious modifications to the kernel

346
00:14:33,440 --> 00:14:35,199
itself

347
00:14:35,199 --> 00:14:40,000
um an interesting uh note here is that

348
00:14:40,000 --> 00:14:42,839
this particular technique was actually

349
00:14:42,839 --> 00:14:45,279
um been seen

350
00:14:45,279 --> 00:14:48,160
in the vault 7 leak that consists of

351
00:14:48,160 --> 00:14:50,720
information on some of the sensitive

352
00:14:50,720 --> 00:14:52,560
offensive toolset that is used by the

353
00:14:52,560 --> 00:14:53,680
cia

354
00:14:53,680 --> 00:14:54,800
and

355
00:14:54,800 --> 00:14:55,600
this

356
00:14:55,600 --> 00:14:57,519
could be used just you know as a very

357
00:14:57,519 --> 00:15:00,320
broad speculation um

358
00:15:00,320 --> 00:15:01,120
that

359
00:15:01,120 --> 00:15:04,079
the threat actor could

360
00:15:04,079 --> 00:15:06,720
could have used this particular resource

361
00:15:06,720 --> 00:15:08,560
in order to mimic this particular

362
00:15:08,560 --> 00:15:10,079
technique but again this is just a

363
00:15:10,079 --> 00:15:12,959
speculation

364
00:15:12,959 --> 00:15:16,240
so for the next step the osl arc

365
00:15:16,240 --> 00:15:18,399
transfer to kernel hook

366
00:15:18,399 --> 00:15:21,120
installs yet another hook um to a

367
00:15:21,120 --> 00:15:24,079
fundamental kernel api function called x

368
00:15:24,079 --> 00:15:25,600
allocate pool

369
00:15:25,600 --> 00:15:28,079
now recall that during the dixie

370
00:15:28,079 --> 00:15:30,240
dispatcher's execution

371
00:15:30,240 --> 00:15:32,320
the malicious code set up a buffer with

372
00:15:32,320 --> 00:15:34,079
the shell code in memory

373
00:15:34,079 --> 00:15:36,959
however that memory was not part of the

374
00:15:36,959 --> 00:15:39,600
windows kernel virtual outer space

375
00:15:39,600 --> 00:15:41,600
as the kernel was not running at that

376
00:15:41,600 --> 00:15:43,759
point which is why

377
00:15:43,759 --> 00:15:47,360
the x allocate pull hook first maps this

378
00:15:47,360 --> 00:15:50,480
particular buffer to the kernel's memory

379
00:15:50,480 --> 00:15:53,279
following that

380
00:15:53,519 --> 00:15:55,759
it gets it passes control to the

381
00:15:55,759 --> 00:15:57,600
particular shell code that is within

382
00:15:57,600 --> 00:16:00,000
this buffer and in turn the shell code

383
00:16:00,000 --> 00:16:03,120
is in charge of reflectively loading um

384
00:16:03,120 --> 00:16:06,720
an image that is embedded within um

385
00:16:06,720 --> 00:16:10,800
uh within um the original um

386
00:16:10,800 --> 00:16:13,440
dixie dispatcher um sorry within the

387
00:16:13,440 --> 00:16:17,279
original uh driver um and the uh sorry

388
00:16:17,279 --> 00:16:20,160
within the dispatcher and this driver um

389
00:16:20,160 --> 00:16:23,440
is in turn um in charge of notifying uh

390
00:16:23,440 --> 00:16:26,079
what's called an image notify routine

391
00:16:26,079 --> 00:16:28,160
which is a callback that gets invoked

392
00:16:28,160 --> 00:16:30,800
upon a load of an image

393
00:16:30,800 --> 00:16:33,519
in the operating system

394
00:16:33,519 --> 00:16:35,360
um and

395
00:16:35,360 --> 00:16:37,120
so now the question is what is the

396
00:16:37,120 --> 00:16:39,440
purpose of that uh callback that was set

397
00:16:39,440 --> 00:16:40,639
by the driver

398
00:16:40,639 --> 00:16:43,040
well this particular callback uh is

399
00:16:43,040 --> 00:16:45,920
intended to check uh the path of the

400
00:16:45,920 --> 00:16:48,959
primary image um in each uh process of

401
00:16:48,959 --> 00:16:52,079
the operating system and verify if the

402
00:16:52,079 --> 00:16:54,480
the the image is loaded in the context

403
00:16:54,480 --> 00:16:58,480
of an svc host that exe process with um

404
00:16:58,480 --> 00:17:03,360
an argument um that is named met svcs

405
00:17:03,360 --> 00:17:06,079
or in other words basically

406
00:17:06,079 --> 00:17:08,240
it tries to see if

407
00:17:08,240 --> 00:17:10,000
there is a loaded service in the

408
00:17:10,000 --> 00:17:11,919
operating system that has access to the

409
00:17:11,919 --> 00:17:14,720
network now the first instance of such a

410
00:17:14,720 --> 00:17:16,160
service

411
00:17:16,160 --> 00:17:17,599
will actually

412
00:17:17,599 --> 00:17:20,640
be used to inject a further uh malicious

413
00:17:20,640 --> 00:17:23,760
code through the apc injection technique

414
00:17:23,760 --> 00:17:24,640
um

415
00:17:24,640 --> 00:17:28,240
which would in turn um allow to which

416
00:17:28,240 --> 00:17:30,320
would in turn reach out to a command and

417
00:17:30,320 --> 00:17:33,280
control server and we'll try to fetch a

418
00:17:33,280 --> 00:17:35,600
second stage payload from it

419
00:17:35,600 --> 00:17:37,120
unfortunately

420
00:17:37,120 --> 00:17:40,240
we were not able to grab that particular

421
00:17:40,240 --> 00:17:41,280
payload

422
00:17:41,280 --> 00:17:42,720
but

423
00:17:42,720 --> 00:17:45,039
nevertheless we could still determine

424
00:17:45,039 --> 00:17:46,960
that the attackers

425
00:17:46,960 --> 00:17:49,360
who most likely deployed moonbounds on

426
00:17:49,360 --> 00:17:51,039
the infected

427
00:17:51,039 --> 00:17:52,000
machine

428
00:17:52,000 --> 00:17:53,120
were

429
00:17:53,120 --> 00:17:55,320
were very likely affiliated to the

430
00:17:55,320 --> 00:17:57,520
apt-41 group

431
00:17:57,520 --> 00:17:58,720
now

432
00:17:58,720 --> 00:18:03,120
what is the apt-41 group so apt-41 is an

433
00:18:03,120 --> 00:18:05,360
infamous chinese-speaking threat group

434
00:18:05,360 --> 00:18:08,480
that is known to be engaged in multiple

435
00:18:08,480 --> 00:18:10,480
high-profile um

436
00:18:10,480 --> 00:18:13,679
espionage as well as criminal operations

437
00:18:13,679 --> 00:18:15,600
including some

438
00:18:15,600 --> 00:18:17,120
quite

439
00:18:17,120 --> 00:18:20,240
famous supply chain attacks

440
00:18:20,240 --> 00:18:22,880
for example the the one on c cleaner

441
00:18:22,880 --> 00:18:25,440
that happened in 2017

442
00:18:25,440 --> 00:18:26,640
and

443
00:18:26,640 --> 00:18:28,799
really why do we make the connection to

444
00:18:28,799 --> 00:18:30,000
this group

445
00:18:30,000 --> 00:18:30,799
so

446
00:18:30,799 --> 00:18:33,840
the primary reason is the fact that uh

447
00:18:33,840 --> 00:18:36,480
throughout our investigation on other

448
00:18:36,480 --> 00:18:39,600
nodes uh in the same network range we

449
00:18:39,600 --> 00:18:41,600
were able to determine that the

450
00:18:41,600 --> 00:18:45,039
attackers used a very specific user land

451
00:18:45,039 --> 00:18:47,840
implant called scramble cross

452
00:18:47,840 --> 00:18:50,000
that is actually known to be quite

453
00:18:50,000 --> 00:18:53,120
unique to apt-41

454
00:18:53,120 --> 00:18:55,200
the particular variant

455
00:18:55,200 --> 00:18:56,880
of this malware

456
00:18:56,880 --> 00:18:59,120
that was used in this attack

457
00:18:59,120 --> 00:19:02,880
as well as the loaders that started up

458
00:19:02,880 --> 00:19:04,720
which are named stealth vector and

459
00:19:04,720 --> 00:19:06,160
stealth mutant

460
00:19:06,160 --> 00:19:09,039
were all actually covered by both trend

461
00:19:09,039 --> 00:19:12,080
micro and eset last year

462
00:19:12,080 --> 00:19:15,039
and both reached the conclusion that the

463
00:19:15,039 --> 00:19:17,200
tool sets as well as the underlying

464
00:19:17,200 --> 00:19:19,280
activity

465
00:19:19,280 --> 00:19:22,400
could be traced back to abd-41

466
00:19:22,400 --> 00:19:25,520
now in our case it wasn't only the mere

467
00:19:25,520 --> 00:19:28,799
presence of the implant um that kind of

468
00:19:28,799 --> 00:19:32,080
suggested uh that apt-41 was involved

469
00:19:32,080 --> 00:19:35,280
but it was actually the fact that um the

470
00:19:35,280 --> 00:19:38,240
scramble cross implant that we found

471
00:19:38,240 --> 00:19:40,480
reached out to command and control

472
00:19:40,480 --> 00:19:42,559
infrastructure that was shared with

473
00:19:42,559 --> 00:19:44,160
moonbounds

474
00:19:44,160 --> 00:19:47,280
so if you recall i described that moon

475
00:19:47,280 --> 00:19:50,960
bounce eventually sets up the stage for

476
00:19:50,960 --> 00:19:53,440
the execution of a malicious

477
00:19:53,440 --> 00:19:55,360
user mode component

478
00:19:55,360 --> 00:19:57,840
that reaches out to a server in order to

479
00:19:57,840 --> 00:19:59,679
fetch subsequent payloads

480
00:19:59,679 --> 00:20:01,600
so as it turns out

481
00:20:01,600 --> 00:20:03,520
some of the scrambled cross command

482
00:20:03,520 --> 00:20:06,320
control servers shared the very same

483
00:20:06,320 --> 00:20:07,440
domain

484
00:20:07,440 --> 00:20:10,240
with moon bounces server which is

485
00:20:10,240 --> 00:20:11,080
this

486
00:20:11,080 --> 00:20:13,760
glbai tag.com

487
00:20:13,760 --> 00:20:16,000
that you can see on the screen

488
00:20:16,000 --> 00:20:17,600
not only that

489
00:20:17,600 --> 00:20:20,720
but all the domains um both the one

490
00:20:20,720 --> 00:20:23,200
corresponding to moonbounds and those

491
00:20:23,200 --> 00:20:24,640
that reached out

492
00:20:24,640 --> 00:20:25,679
uh

493
00:20:25,679 --> 00:20:27,840
reached out to by scramble cross

494
00:20:27,840 --> 00:20:30,559
resolved uh to the same ips in different

495
00:20:30,559 --> 00:20:33,120
points in time

496
00:20:33,120 --> 00:20:35,840
so um in addition

497
00:20:35,840 --> 00:20:38,880
uh we could also observe that uh quite a

498
00:20:38,880 --> 00:20:41,280
few of the servers on those ips

499
00:20:41,280 --> 00:20:43,840
responded with a unique certificate that

500
00:20:43,840 --> 00:20:46,080
was only used

501
00:20:46,080 --> 00:20:49,760
by infrastructure leveraged by apd-41 in

502
00:20:49,760 --> 00:20:53,120
fact uh some of these servers uh that uh

503
00:20:53,120 --> 00:20:55,039
used that certificate were were

504
00:20:55,039 --> 00:20:58,640
specified in a security uh bulletin um

505
00:20:58,640 --> 00:21:02,000
that was issued by the fbi in 2020 that

506
00:21:02,000 --> 00:21:03,919
outlines some outline some of the

507
00:21:03,919 --> 00:21:05,919
indicators that

508
00:21:05,919 --> 00:21:08,159
could be identified with the activity of

509
00:21:08,159 --> 00:21:11,120
apt-41

510
00:21:11,520 --> 00:21:15,760
other than apt-41 though it appears that

511
00:21:15,760 --> 00:21:18,240
there was presence of

512
00:21:18,240 --> 00:21:20,400
several other implants on the same

513
00:21:20,400 --> 00:21:22,799
network that could also be

514
00:21:22,799 --> 00:21:25,600
affiliated to chinese speaking threat

515
00:21:25,600 --> 00:21:27,039
actors

516
00:21:27,039 --> 00:21:29,760
most notably we found a backdoor named

517
00:21:29,760 --> 00:21:32,960
microsyn which is known to be used by a

518
00:21:32,960 --> 00:21:36,480
threat group named slm uh or six little

519
00:21:36,480 --> 00:21:38,400
monkeys um

520
00:21:38,400 --> 00:21:40,159
um that

521
00:21:40,159 --> 00:21:42,320
actually if we look more carefully at

522
00:21:42,320 --> 00:21:45,280
the timestamps of deployment for uh both

523
00:21:45,280 --> 00:21:48,080
microsyn and scramblecross

524
00:21:48,080 --> 00:21:49,280
which we

525
00:21:49,280 --> 00:21:51,200
already established as very likely

526
00:21:51,200 --> 00:21:52,960
connected to moonbounds

527
00:21:52,960 --> 00:21:56,240
it appears as though um both pieces of

528
00:21:56,240 --> 00:21:59,280
malware were actually used or deployed

529
00:21:59,280 --> 00:22:00,720
in tandem

530
00:22:00,720 --> 00:22:04,240
and this could allude to the fact that

531
00:22:04,240 --> 00:22:06,720
microsyn was in fact

532
00:22:06,720 --> 00:22:10,320
a tool that uh was used as part of the

533
00:22:10,320 --> 00:22:13,600
very same operation in which

534
00:22:13,600 --> 00:22:16,640
moon bounce was leveraged and actually

535
00:22:16,640 --> 00:22:18,880
it could also suggest that

536
00:22:18,880 --> 00:22:22,159
apd 41 and the slm thread group

537
00:22:22,159 --> 00:22:24,559
may share some resources

538
00:22:24,559 --> 00:22:28,559
be it um shared uh toolsets uh or actual

539
00:22:28,559 --> 00:22:32,799
developers that um could be um

540
00:22:32,799 --> 00:22:37,039
coordinated by uh those uh two groups

541
00:22:37,039 --> 00:22:39,280
um apart from that

542
00:22:39,280 --> 00:22:42,320
we could also take note of the

543
00:22:42,320 --> 00:22:44,880
compilation timestamps on some of the

544
00:22:44,880 --> 00:22:46,640
images in those

545
00:22:46,640 --> 00:22:48,480
attacks and

546
00:22:48,480 --> 00:22:50,559
and if we try to understand what those

547
00:22:50,559 --> 00:22:54,080
mean uh then first if we look at when

548
00:22:54,080 --> 00:22:56,880
the infected dixie dispatcher was

549
00:22:56,880 --> 00:22:58,159
compiled

550
00:22:58,159 --> 00:23:01,840
we see that it happened back in 2014

551
00:23:01,840 --> 00:23:03,919
and that actually seems to correspond to

552
00:23:03,919 --> 00:23:05,520
the date in which the particular

553
00:23:05,520 --> 00:23:07,679
firmware version was released by the

554
00:23:07,679 --> 00:23:09,039
vendor

555
00:23:09,039 --> 00:23:12,720
in contrast to that uh the p images that

556
00:23:12,720 --> 00:23:15,280
correspond to the driver and user mode

557
00:23:15,280 --> 00:23:17,600
malware stager of moonbounds

558
00:23:17,600 --> 00:23:19,679
seem to have been compiled in proximity

559
00:23:19,679 --> 00:23:22,159
to one another uh during the end of

560
00:23:22,159 --> 00:23:24,720
2018.

561
00:23:24,720 --> 00:23:27,520
now what could that mean so for one if

562
00:23:27,520 --> 00:23:29,679
we are to believe those times the

563
00:23:29,679 --> 00:23:32,640
timestamps then um well obviously you

564
00:23:32,640 --> 00:23:34,400
can understand that those could be fake

565
00:23:34,400 --> 00:23:35,280
but

566
00:23:35,280 --> 00:23:36,559
if we are to assume that they are

567
00:23:36,559 --> 00:23:37,679
correct

568
00:23:37,679 --> 00:23:40,240
then we can assess that mood bounce was

569
00:23:40,240 --> 00:23:42,400
actually compiled apart from the

570
00:23:42,400 --> 00:23:44,159
original firmware

571
00:23:44,159 --> 00:23:45,840
and that's actually a pretty plausible

572
00:23:45,840 --> 00:23:47,919
assumption in fact

573
00:23:47,919 --> 00:23:50,640
the idea that the attackers had to

574
00:23:50,640 --> 00:23:53,600
access the specific uh core uh the

575
00:23:53,600 --> 00:23:56,480
specific dixie dispatcher image uh parse

576
00:23:56,480 --> 00:23:59,679
it and then uh introduce uh those subtle

577
00:23:59,679 --> 00:24:02,720
changes that um i described earlier

578
00:24:02,720 --> 00:24:06,480
suggest that the attackers had um and

579
00:24:06,480 --> 00:24:08,799
likely ongoing access to the infected

580
00:24:08,799 --> 00:24:10,960
machine

581
00:24:10,960 --> 00:24:13,520
now considering the timeline and other

582
00:24:13,520 --> 00:24:16,000
backdoors found in the same network we

583
00:24:16,000 --> 00:24:18,240
can assess that actually those other

584
00:24:18,240 --> 00:24:20,080
backdoors that we found could have

585
00:24:20,080 --> 00:24:23,440
facilitated facilitated a remote and

586
00:24:23,440 --> 00:24:26,000
long-standing access to the machine in

587
00:24:26,000 --> 00:24:28,799
question which would finally allow the

588
00:24:28,799 --> 00:24:31,520
deployment of moon balance

589
00:24:31,520 --> 00:24:35,679
apart from that um considering the 2018

590
00:24:35,679 --> 00:24:37,200
timestamp

591
00:24:37,200 --> 00:24:39,440
we are kind of faced with an important

592
00:24:39,440 --> 00:24:42,400
question um if we are to believe

593
00:24:42,400 --> 00:24:44,159
this

594
00:24:44,159 --> 00:24:47,600
compilation timestamp uh and we know by

595
00:24:47,600 --> 00:24:50,000
fact that the ufi furore infection

596
00:24:50,000 --> 00:24:54,960
actually happened during mid 2020 um

597
00:24:54,960 --> 00:24:57,360
we found it in 2021 but the infection

598
00:24:57,360 --> 00:24:58,799
itself

599
00:24:58,799 --> 00:25:00,400
occurred sometime

600
00:25:00,400 --> 00:25:03,679
mid-2020 um then we're faced with the

601
00:25:03,679 --> 00:25:06,960
question uh of whether moonbounds um

602
00:25:06,960 --> 00:25:08,799
could have been circulating somewhere

603
00:25:08,799 --> 00:25:12,640
between 2018 and 2020 in other places in

604
00:25:12,640 --> 00:25:15,360
the wild before we found it and that

605
00:25:15,360 --> 00:25:17,279
actually is a question that remains to

606
00:25:17,279 --> 00:25:20,240
be answered

607
00:25:20,240 --> 00:25:21,520
so

608
00:25:21,520 --> 00:25:24,640
now that we know how moon bounce works

609
00:25:24,640 --> 00:25:26,640
and we have a general concept of who

610
00:25:26,640 --> 00:25:29,039
deployed it it's worth trying to think

611
00:25:29,039 --> 00:25:32,240
how we can better protect against uh it

612
00:25:32,240 --> 00:25:34,799
or similar attacks uh that target uefi

613
00:25:34,799 --> 00:25:36,159
firmware

614
00:25:36,159 --> 00:25:36,960
and

615
00:25:36,960 --> 00:25:39,840
here as much as i would like to devise a

616
00:25:39,840 --> 00:25:42,640
single solution i think that the best

617
00:25:42,640 --> 00:25:45,760
approach is actually considering a set

618
00:25:45,760 --> 00:25:48,720
of hybrid methods to mitigate such an

619
00:25:48,720 --> 00:25:49,600
attack

620
00:25:49,600 --> 00:25:51,919
and the first one is being

621
00:25:51,919 --> 00:25:55,120
a very simple proactive measure of

622
00:25:55,120 --> 00:25:58,080
updating uh the uefi firmware with

623
00:25:58,080 --> 00:26:01,679
vendor authenticated images casually of

624
00:26:01,679 --> 00:26:02,559
course

625
00:26:02,559 --> 00:26:05,520
this could prove to be insufficient as

626
00:26:05,520 --> 00:26:07,279
some firmware images

627
00:26:07,279 --> 00:26:09,679
are not well protected

628
00:26:09,679 --> 00:26:11,200
and

629
00:26:11,200 --> 00:26:13,039
this is why it's actually advisable to

630
00:26:13,039 --> 00:26:16,320
use additional protection layers

631
00:26:16,320 --> 00:26:18,960
two notable examples for that uh would

632
00:26:18,960 --> 00:26:22,320
be uh technologies like uh the intel

633
00:26:22,320 --> 00:26:24,799
boot guard and trusted trust platform

634
00:26:24,799 --> 00:26:26,720
modules or tpm

635
00:26:26,720 --> 00:26:30,559
uh in the case of tpm um which uh as

636
00:26:30,559 --> 00:26:32,720
some of you may know is uh

637
00:26:32,720 --> 00:26:35,440
sort of a designated crypto uh processor

638
00:26:35,440 --> 00:26:38,240
uh on on the machine

639
00:26:38,240 --> 00:26:40,640
this is a feature actually that is ought

640
00:26:40,640 --> 00:26:44,960
to be enabled by default in windows 11.

641
00:26:44,960 --> 00:26:45,679
so

642
00:26:45,679 --> 00:26:47,919
if you're not using windows 11 and you

643
00:26:47,919 --> 00:26:50,559
do have the support for dpm

644
00:26:50,559 --> 00:26:54,080
i do uh suggest um verifying that it is

645
00:26:54,080 --> 00:26:55,679
turned on because

646
00:26:55,679 --> 00:26:57,440
that would be

647
00:26:57,440 --> 00:27:00,720
a useful measure against such attacks

648
00:27:00,720 --> 00:27:02,400
unfortunately though

649
00:27:02,400 --> 00:27:05,679
not all machines support um

650
00:27:05,679 --> 00:27:09,840
guard or tpms and there are still a lot

651
00:27:09,840 --> 00:27:12,559
of legacy u5 firmware uh circulating in

652
00:27:12,559 --> 00:27:15,600
the wild and for this reason it's also

653
00:27:15,600 --> 00:27:18,960
beneficial uh beneficial to consider um

654
00:27:18,960 --> 00:27:21,919
an additional security solution that

655
00:27:21,919 --> 00:27:25,679
can scan ufi firmware um and notify the

656
00:27:25,679 --> 00:27:26,880
user

657
00:27:26,880 --> 00:27:30,799
if there is some anomaly found within it

658
00:27:30,799 --> 00:27:31,760
except

659
00:27:31,760 --> 00:27:34,559
this will only be efficient as long as

660
00:27:34,559 --> 00:27:35,760
the

661
00:27:35,760 --> 00:27:38,480
network or organization that deploys

662
00:27:38,480 --> 00:27:41,919
such a solution um has actual people

663
00:27:41,919 --> 00:27:43,520
that are trained

664
00:27:43,520 --> 00:27:46,480
to identify such alerts and act upon

665
00:27:46,480 --> 00:27:48,960
them so in that sense it is also

666
00:27:48,960 --> 00:27:50,159
important

667
00:27:50,159 --> 00:27:52,320
in light of attacks like

668
00:27:52,320 --> 00:27:56,159
moon bounds to train the blue teamers or

669
00:27:56,159 --> 00:27:58,640
analysts that deal

670
00:27:58,640 --> 00:28:00,880
with threats in the organization

671
00:28:00,880 --> 00:28:02,640
in the organization to be aware of

672
00:28:02,640 --> 00:28:05,520
alerts that concern um firmware

673
00:28:05,520 --> 00:28:07,919
compromise

674
00:28:07,919 --> 00:28:08,720
so

675
00:28:08,720 --> 00:28:12,559
on this note um i'd like to address um

676
00:28:12,559 --> 00:28:15,840
maybe on a more uh general um

677
00:28:15,840 --> 00:28:20,000
term the problem of ufi firmware attacks

678
00:28:20,000 --> 00:28:24,159
um which um um is the fact that albeit

679
00:28:24,159 --> 00:28:26,480
uh the defense mechanisms that i just

680
00:28:26,480 --> 00:28:30,240
mentioned a lot of ufi firmware is still

681
00:28:30,240 --> 00:28:31,840
vulnerable and

682
00:28:31,840 --> 00:28:33,279
quite exposed

683
00:28:33,279 --> 00:28:36,399
to abuse by threat actors

684
00:28:36,399 --> 00:28:38,399
on top of that

685
00:28:38,399 --> 00:28:41,679
the security industry as a whole

686
00:28:41,679 --> 00:28:44,640
it seems still lacks visibility

687
00:28:44,640 --> 00:28:48,080
into this type of threats

688
00:28:48,080 --> 00:28:50,320
which

689
00:28:50,559 --> 00:28:52,399
were actually publicly tackled in the

690
00:28:52,399 --> 00:28:54,640
past few years but they are certainly

691
00:28:54,640 --> 00:28:57,360
not a new threat we have all seen

692
00:28:57,360 --> 00:28:58,960
the ufi

693
00:28:58,960 --> 00:29:01,360
boot kit that

694
00:29:01,360 --> 00:29:04,159
was in use by

695
00:29:04,159 --> 00:29:09,120
a hacking team back in 2015 and 16

696
00:29:09,120 --> 00:29:12,399
and we can estimate that the threat of

697
00:29:12,399 --> 00:29:14,960
ufi funeral compromises

698
00:29:14,960 --> 00:29:16,320
probably exists

699
00:29:16,320 --> 00:29:17,120
for

700
00:29:17,120 --> 00:29:20,720
a little less than a decade um so

701
00:29:20,720 --> 00:29:23,039
by no means the fact that moonbounds and

702
00:29:23,039 --> 00:29:24,880
similar threats were discovered right

703
00:29:24,880 --> 00:29:26,159
now

704
00:29:26,159 --> 00:29:29,360
means that this threat is new

705
00:29:29,360 --> 00:29:31,919
or that this threat is

706
00:29:31,919 --> 00:29:35,200
is about to go away so

707
00:29:35,200 --> 00:29:37,520
we should realize that such threats are

708
00:29:37,520 --> 00:29:40,399
actually here to stay with us and

709
00:29:40,399 --> 00:29:42,480
that's why it's important at least in my

710
00:29:42,480 --> 00:29:45,919
opinion that security vendors um

711
00:29:45,919 --> 00:29:49,360
will share or give more attention um

712
00:29:49,360 --> 00:29:51,440
to the information to such threats and

713
00:29:51,440 --> 00:29:53,760
will share the information that concerns

714
00:29:53,760 --> 00:29:54,799
them

715
00:29:54,799 --> 00:29:57,039
as we did in this case

716
00:29:57,039 --> 00:29:58,240
because that

717
00:29:58,240 --> 00:30:00,799
is what will essentially be able to

718
00:30:00,799 --> 00:30:03,760
educate and alarm blue teamers and

719
00:30:03,760 --> 00:30:05,600
defenders

720
00:30:05,600 --> 00:30:06,880
as to how

721
00:30:06,880 --> 00:30:08,720
such threats behave

722
00:30:08,720 --> 00:30:12,320
and how to address them in order to

723
00:30:12,320 --> 00:30:15,440
employ better mitigations

724
00:30:15,440 --> 00:30:17,679
so with that

725
00:30:17,679 --> 00:30:20,080
i think our time is up and i'd like to

726
00:30:20,080 --> 00:30:23,120
thank you for your time and attention

727
00:30:23,120 --> 00:30:25,039
if you have any questions at this point

728
00:30:25,039 --> 00:30:27,919
i'd be more than happy to take those and

729
00:30:27,919 --> 00:30:30,159
thank you

730
00:30:30,159 --> 00:30:33,279
thank you mark for the presentation uh

731
00:30:33,279 --> 00:30:34,080
i

732
00:30:34,080 --> 00:30:35,679
think we actually have two questions

733
00:30:35,679 --> 00:30:37,760
already in the chat box is it all right

734
00:30:37,760 --> 00:30:40,799
if i ask them uh read them out cloud

735
00:30:40,799 --> 00:30:42,000
okay

736
00:30:42,000 --> 00:30:43,200
um

737
00:30:43,200 --> 00:30:45,840
does it have hooks tools to threaten

738
00:30:45,840 --> 00:30:48,799
linux os

739
00:30:48,799 --> 00:30:50,320
sorry could you could you repeat that

740
00:30:50,320 --> 00:30:52,559
question one more time

741
00:30:52,559 --> 00:30:55,360
yuri is asking does it have hooks tools

742
00:30:55,360 --> 00:30:59,519
to threaten linux os

743
00:31:02,240 --> 00:31:04,399
let me open the chat and and see it but

744
00:31:04,399 --> 00:31:06,720
if i understand the question correctly

745
00:31:06,720 --> 00:31:08,320
uh

746
00:31:08,320 --> 00:31:10,960
the question is whether that particular

747
00:31:10,960 --> 00:31:14,240
thread is also applicable on the linux

748
00:31:14,240 --> 00:31:16,159
operating system is that is that the

749
00:31:16,159 --> 00:31:19,159
question

750
00:31:20,000 --> 00:31:21,679
well i believe so

751
00:31:21,679 --> 00:31:24,960
if if it is then actually no moon bounce

752
00:31:24,960 --> 00:31:27,279
in particular is um

753
00:31:27,279 --> 00:31:29,919
designated for the windows kernel there

754
00:31:29,919 --> 00:31:32,399
are a lot of assumptions throughout its

755
00:31:32,399 --> 00:31:34,080
execution

756
00:31:34,080 --> 00:31:35,190
that kind of

757
00:31:35,190 --> 00:31:36,960
[Music]

758
00:31:36,960 --> 00:31:38,720
assume that the

759
00:31:38,720 --> 00:31:40,640
loaded operating system is actually

760
00:31:40,640 --> 00:31:43,760
windows and

761
00:31:43,760 --> 00:31:47,840
it will not work on linux

762
00:31:48,399 --> 00:31:50,399
that said though

763
00:31:50,399 --> 00:31:52,320
we cannot exclude that there is a

764
00:31:52,320 --> 00:31:54,240
variant that would essentially target

765
00:31:54,240 --> 00:31:55,279
linux

766
00:31:55,279 --> 00:31:56,159
but

767
00:31:56,159 --> 00:31:58,799
um it's not the variant that we discuss

768
00:31:58,799 --> 00:32:01,840
or that we found

769
00:32:02,399 --> 00:32:04,159
thank you

770
00:32:04,159 --> 00:32:06,320
another question is do you think

771
00:32:06,320 --> 00:32:08,080
measured booth will be able to catch

772
00:32:08,080 --> 00:32:10,480
such attacks

773
00:32:10,480 --> 00:32:12,880
well uh i think

774
00:32:12,880 --> 00:32:14,399
yes well

775
00:32:14,399 --> 00:32:17,600
measure boot will certainly uh be able

776
00:32:17,600 --> 00:32:21,519
to notify of an anomaly in terms of

777
00:32:21,519 --> 00:32:23,360
modifications that happened in the

778
00:32:23,360 --> 00:32:26,080
firmware image um

779
00:32:26,080 --> 00:32:29,840
however it's up to uh the people who uh

780
00:32:29,840 --> 00:32:33,360
who read the logs uh and kind of uh

781
00:32:33,360 --> 00:32:35,440
interpret what happened during boot time

782
00:32:35,440 --> 00:32:37,919
to be able to understand that uh there

783
00:32:37,919 --> 00:32:41,600
was um a compromise going on and that

784
00:32:41,600 --> 00:32:43,360
this compromise has to be mitigated so

785
00:32:43,360 --> 00:32:46,159
yeah by by all means measured boot uh

786
00:32:46,159 --> 00:32:48,159
will be at least if effective in the

787
00:32:48,159 --> 00:32:49,840
sense that it will indicate that there

788
00:32:49,840 --> 00:32:52,720
is a compromise

789
00:32:53,519 --> 00:32:54,960
thank you mark

790
00:32:54,960 --> 00:32:57,440
um we actually have a few more questions

791
00:32:57,440 --> 00:33:00,240
um you've mentioned dpm as a counter

792
00:33:00,240 --> 00:33:01,840
measure will it raise the bars

793
00:33:01,840 --> 00:33:05,360
significantly in your opinion

794
00:33:05,440 --> 00:33:06,559
um

795
00:33:06,559 --> 00:33:07,919
well

796
00:33:07,919 --> 00:33:12,240
for this threat yes um because right now

797
00:33:12,240 --> 00:33:13,679
um

798
00:33:13,679 --> 00:33:16,399
the situation is that um

799
00:33:16,399 --> 00:33:18,559
this particular threat and actually

800
00:33:18,559 --> 00:33:21,279
other ones uh mosaic regressor that we

801
00:33:21,279 --> 00:33:24,720
uncovered back in 2020

802
00:33:24,720 --> 00:33:27,120
and also uh lojacks

803
00:33:27,120 --> 00:33:29,840
they all kind of relied on the fact that

804
00:33:29,840 --> 00:33:32,480
um the underlying firmware did not have

805
00:33:32,480 --> 00:33:36,840
proper protections against writing

806
00:33:36,840 --> 00:33:40,640
and uh considering that um

807
00:33:40,640 --> 00:33:41,760
all of

808
00:33:41,760 --> 00:33:42,640
those

809
00:33:42,640 --> 00:33:46,559
uh this kind of um change um

810
00:33:46,559 --> 00:33:49,440
in the firmware and and to to kind of uh

811
00:33:49,440 --> 00:33:53,039
raise um a red flag in case of that that

812
00:33:53,039 --> 00:33:54,320
um

813
00:33:54,320 --> 00:33:56,080
that the signature of the firmware

814
00:33:56,080 --> 00:33:57,600
doesn't check out

815
00:33:57,600 --> 00:33:59,039
um

816
00:33:59,039 --> 00:34:01,360
having said that um

817
00:34:01,360 --> 00:34:03,760
there could be other measures to to to

818
00:34:03,760 --> 00:34:07,360
bypass tpm uh which will not go into in

819
00:34:07,360 --> 00:34:10,159
this talk so i wouldn't say that tpm is

820
00:34:10,159 --> 00:34:12,800
a bulletproof solution it's it's

821
00:34:12,800 --> 00:34:15,040
it's not um you know

822
00:34:15,040 --> 00:34:17,040
unfortunately we cannot say that

823
00:34:17,040 --> 00:34:18,079
anything

824
00:34:18,079 --> 00:34:19,839
in our world or in the domain of

825
00:34:19,839 --> 00:34:21,839
security is a bulletproof solution

826
00:34:21,839 --> 00:34:24,000
however at least for the attacks that we

827
00:34:24,000 --> 00:34:26,480
have seen so far for the three public

828
00:34:26,480 --> 00:34:29,690
known cases that we know um that

829
00:34:29,690 --> 00:34:31,359
[Music]

830
00:34:31,359 --> 00:34:32,560
employ

831
00:34:32,560 --> 00:34:35,918
compromise of ufi firmware um in those

832
00:34:35,918 --> 00:34:38,159
cases tpm would have definitely raised

833
00:34:38,159 --> 00:34:39,679
the bar yes

834
00:34:39,679 --> 00:34:41,199
all right

835
00:34:41,199 --> 00:34:43,760
um how do you avoid a scan from being

836
00:34:43,760 --> 00:34:45,440
fooled by the implant as it can

837
00:34:45,440 --> 00:34:48,079
potentially manipulate any tool running

838
00:34:48,079 --> 00:34:50,399
in user kernel mode running from a

839
00:34:50,399 --> 00:34:53,598
separate physical host

840
00:34:55,359 --> 00:34:57,680
sorry i i

841
00:34:57,680 --> 00:35:00,960
i didn't follow the question

842
00:35:00,960 --> 00:35:03,200
no problem i will repeat it

843
00:35:03,200 --> 00:35:05,440
how do you avoid a scan from being

844
00:35:05,440 --> 00:35:07,280
fooled by the implant as it can

845
00:35:07,280 --> 00:35:09,760
potentially manipulate any tool running

846
00:35:09,760 --> 00:35:12,480
in user or kernel mode running from a

847
00:35:12,480 --> 00:35:16,359
separate physical host

848
00:35:16,640 --> 00:35:18,400
well um

849
00:35:18,400 --> 00:35:19,920
for one

850
00:35:19,920 --> 00:35:23,040
we have um already discussed well there

851
00:35:23,040 --> 00:35:25,119
was this question erased about measured

852
00:35:25,119 --> 00:35:26,000
boot

853
00:35:26,000 --> 00:35:28,839
um so red measured boot has its own

854
00:35:28,839 --> 00:35:31,520
mechanisms i'm not an expert in tpm but

855
00:35:31,520 --> 00:35:33,839
but i do know that measured boot has its

856
00:35:33,839 --> 00:35:36,560
own mechanism of

857
00:35:36,560 --> 00:35:39,200
sending uh encrypted logs

858
00:35:39,200 --> 00:35:40,640
to to

859
00:35:40,640 --> 00:35:43,599
possibly an external server uh where uh

860
00:35:43,599 --> 00:35:46,000
it could be

861
00:35:46,000 --> 00:35:48,480
let's say compromising the u5 firmware

862
00:35:48,480 --> 00:35:50,320
does not mean that uh compromise

863
00:35:50,320 --> 00:35:53,760
happened uh to the tpm uh in fact i

864
00:35:53,760 --> 00:35:56,320
don't believe it's that simple to do so

865
00:35:56,320 --> 00:35:57,599
um

866
00:35:57,599 --> 00:35:59,920
in that case in the case of tpm the logs

867
00:35:59,920 --> 00:36:03,040
of measured boot can still be um

868
00:36:03,040 --> 00:36:06,400
used to to alert the user of a possible

869
00:36:06,400 --> 00:36:07,599
compromise

870
00:36:07,599 --> 00:36:11,119
as far as um

871
00:36:11,520 --> 00:36:14,560
having a ufi firmware implant uh fooling

872
00:36:14,560 --> 00:36:17,760
a a kernel mode uh solution

873
00:36:17,760 --> 00:36:21,119
um like a driver uh or anything actually

874
00:36:21,119 --> 00:36:23,760
that happens uh after the boot well i

875
00:36:23,760 --> 00:36:25,680
definitely agree that there's a problem

876
00:36:25,680 --> 00:36:26,400
here

877
00:36:26,400 --> 00:36:28,400
because if you cannot trust your ui

878
00:36:28,400 --> 00:36:30,560
firmware then well you cannot trust

879
00:36:30,560 --> 00:36:32,960
everything that is loaded afterwards

880
00:36:32,960 --> 00:36:35,599
which is exactly why i think that there

881
00:36:35,599 --> 00:36:37,680
should be usage of

882
00:36:37,680 --> 00:36:39,119
additional

883
00:36:39,119 --> 00:36:41,680
components that

884
00:36:41,680 --> 00:36:45,440
that kind of allow

885
00:36:45,520 --> 00:36:48,560
verifying um what goes on in the u5

886
00:36:48,560 --> 00:36:50,240
firmware itself

887
00:36:50,240 --> 00:36:52,240
and that are external to the ue5

888
00:36:52,240 --> 00:36:56,879
firmware and not being loaded by it

889
00:36:57,119 --> 00:36:59,680
that that's that's as best as i i would

890
00:36:59,680 --> 00:37:04,240
i would you know tackle this situation

891
00:37:05,040 --> 00:37:06,800
all right um

892
00:37:06,800 --> 00:37:08,960
how do you verify if your machine is

893
00:37:08,960 --> 00:37:13,520
affected manish is asking this question

894
00:37:13,520 --> 00:37:14,800
um

895
00:37:14,800 --> 00:37:18,320
well in the case of moon bounds

896
00:37:18,320 --> 00:37:20,320
well it's hard to you know hard to

897
00:37:20,320 --> 00:37:22,480
answer this question generally

898
00:37:22,480 --> 00:37:23,200
uh

899
00:37:23,200 --> 00:37:25,599
obviously you cannot always know that

900
00:37:25,599 --> 00:37:27,440
your machine is infected

901
00:37:27,440 --> 00:37:31,839
um however for moon balance

902
00:37:31,839 --> 00:37:33,440
because um

903
00:37:33,440 --> 00:37:37,599
it it it had some anomalous behavior um

904
00:37:37,599 --> 00:37:39,760
happening um

905
00:37:39,760 --> 00:37:41,040
even after

906
00:37:41,040 --> 00:37:43,280
the execution of the uefi firmware

907
00:37:43,280 --> 00:37:46,160
implant for example uh the injection of

908
00:37:46,160 --> 00:37:48,240
um

909
00:37:48,240 --> 00:37:51,520
of payload from the kernel mode driver

910
00:37:51,520 --> 00:37:54,720
uh to user mode process um and then

911
00:37:54,720 --> 00:37:57,040
having that um injected code reaching

912
00:37:57,040 --> 00:37:59,520
out to a server um this is a behavior

913
00:37:59,520 --> 00:38:02,800
that is being caught or that was caught

914
00:38:02,800 --> 00:38:05,359
in our case by our product and and i

915
00:38:05,359 --> 00:38:06,880
assume will be caught by a lot of

916
00:38:06,880 --> 00:38:08,480
security products so

917
00:38:08,480 --> 00:38:09,760
um

918
00:38:09,760 --> 00:38:14,800
in any case that um you may encounter um

919
00:38:14,800 --> 00:38:16,400
an infection

920
00:38:16,400 --> 00:38:18,079
and you know

921
00:38:18,079 --> 00:38:20,160
a simple measure as

922
00:38:20,160 --> 00:38:21,760
um

923
00:38:21,760 --> 00:38:22,720
let's say

924
00:38:22,720 --> 00:38:23,760
um

925
00:38:23,760 --> 00:38:25,680
formatting your hard drive and

926
00:38:25,680 --> 00:38:27,440
reinstalling the operating system

927
00:38:27,440 --> 00:38:29,599
doesn't seem to remove the thread so the

928
00:38:29,599 --> 00:38:32,240
thread keeps coming back

929
00:38:32,240 --> 00:38:34,960
then you have you know good a good

930
00:38:34,960 --> 00:38:37,680
reason to to to speculate whether you

931
00:38:37,680 --> 00:38:40,400
might have some more lower level uh

932
00:38:40,400 --> 00:38:42,000
infection of course that won't be the

933
00:38:42,000 --> 00:38:44,720
first thing that i would consider but it

934
00:38:44,720 --> 00:38:46,480
will definitely be one of the things

935
00:38:46,480 --> 00:38:50,079
that um at least nowadays uh should be

936
00:38:50,079 --> 00:38:53,200
uh thought of as um

937
00:38:53,200 --> 00:38:57,040
as a marker uh that a um kind of low

938
00:38:57,040 --> 00:38:58,960
level boot kit

939
00:38:58,960 --> 00:39:01,520
firmware compromise

940
00:39:01,520 --> 00:39:04,240
could have happened

941
00:39:05,040 --> 00:39:07,440
thank you mark we have one last question

942
00:39:07,440 --> 00:39:08,880
from danny

943
00:39:08,880 --> 00:39:10,720
how do you think the main factor of

944
00:39:10,720 --> 00:39:13,520
infection was

945
00:39:13,520 --> 00:39:15,800
well um as i mentioned um

946
00:39:15,800 --> 00:39:18,240
[Music]

947
00:39:18,240 --> 00:39:21,920
we assess that the infection um has

948
00:39:21,920 --> 00:39:25,119
taken place um remotely

949
00:39:25,119 --> 00:39:25,920
and

950
00:39:25,920 --> 00:39:27,040
um

951
00:39:27,040 --> 00:39:29,839
it it was done um

952
00:39:29,839 --> 00:39:32,960
through well i cannot say exactly what

953
00:39:32,960 --> 00:39:34,720
what was the utility that was used to

954
00:39:34,720 --> 00:39:36,640
override the firmware but i can

955
00:39:36,640 --> 00:39:39,520
definitely attest to the fact that uh

956
00:39:39,520 --> 00:39:41,280
the underlying

957
00:39:41,280 --> 00:39:44,160
firmware itself did not have any proper

958
00:39:44,160 --> 00:39:45,839
protection mechanisms

959
00:39:45,839 --> 00:39:49,200
and against writing uh for this reason

960
00:39:49,200 --> 00:39:51,920
um it is not that much of a problem or

961
00:39:51,920 --> 00:39:54,160
was not that much of a problem to

962
00:39:54,160 --> 00:39:56,960
override the firmware um

963
00:39:56,960 --> 00:39:59,200
that that that resided on that

964
00:39:59,200 --> 00:40:01,920
particular machine so

965
00:40:01,920 --> 00:40:05,119
so having said that um well considering

966
00:40:05,119 --> 00:40:08,160
this i mean it is plausible to assume

967
00:40:08,160 --> 00:40:12,079
that um the overwrite happened through

968
00:40:12,079 --> 00:40:14,800
uh software not not through access to

969
00:40:14,800 --> 00:40:16,319
the hardware itself

970
00:40:16,319 --> 00:40:18,400
um and

971
00:40:18,400 --> 00:40:21,680
the other thing is that um well now the

972
00:40:21,680 --> 00:40:24,079
question is asked whether that override

973
00:40:24,079 --> 00:40:26,560
happened locally so somebody approached

974
00:40:26,560 --> 00:40:29,920
the computer and you know

975
00:40:29,920 --> 00:40:30,960
leveraged

976
00:40:30,960 --> 00:40:32,560
his local access to override the

977
00:40:32,560 --> 00:40:36,000
firmware or has it been done

978
00:40:36,000 --> 00:40:37,920
remotely and we think it was done

979
00:40:37,920 --> 00:40:41,119
remotely because um

980
00:40:41,119 --> 00:40:44,640
the the uh particular changes that um

981
00:40:44,640 --> 00:40:46,720
were taken in that particular film were

982
00:40:46,720 --> 00:40:50,480
so uh those uh subtle hooks that were

983
00:40:50,480 --> 00:40:51,680
installed

984
00:40:51,680 --> 00:40:54,400
in the original core dixie or dixie

985
00:40:54,400 --> 00:40:56,800
dispatcher image

986
00:40:56,800 --> 00:41:00,000
those required um the attackers to have

987
00:41:00,000 --> 00:41:02,800
some kind of long uh standing access to

988
00:41:02,800 --> 00:41:04,960
that particular machine they would have

989
00:41:04,960 --> 00:41:06,800
uh had to um

990
00:41:06,800 --> 00:41:08,960
read that image

991
00:41:08,960 --> 00:41:10,880
introduce some changes to it and then

992
00:41:10,880 --> 00:41:12,400
override it and

993
00:41:12,400 --> 00:41:14,000
and um

994
00:41:14,000 --> 00:41:17,119
that is assessed to have been done um

995
00:41:17,119 --> 00:41:18,079
along

996
00:41:18,079 --> 00:41:21,280
across some uh period of time across um

997
00:41:21,280 --> 00:41:23,599
you know an extended period of time

998
00:41:23,599 --> 00:41:26,400
and um given the fact that we have seen

999
00:41:26,400 --> 00:41:28,079
other um

1000
00:41:28,079 --> 00:41:30,960
uh backdoors in that network

1001
00:41:30,960 --> 00:41:32,319
um

1002
00:41:32,319 --> 00:41:34,480
for quite long time span

1003
00:41:34,480 --> 00:41:37,359
um we can assess that some of these

1004
00:41:37,359 --> 00:41:40,160
vectors were used to facilitate this uh

1005
00:41:40,160 --> 00:41:42,079
long uh term access that would

1006
00:41:42,079 --> 00:41:44,400
eventually allow the attackers to uh

1007
00:41:44,400 --> 00:41:47,119
prepare uh the tempered firmware image

1008
00:41:47,119 --> 00:41:49,200
and have it overwritten

1009
00:41:49,200 --> 00:41:52,319
in the targeted machine

1010
00:41:54,400 --> 00:41:56,079
thank you mark for answering all these

1011
00:41:56,079 --> 00:41:58,560
questions

1012
00:41:59,359 --> 00:42:01,359
i think that

1013
00:42:01,359 --> 00:42:03,359
we can conclude the webinar now thank

1014
00:42:03,359 --> 00:42:05,040
you very much once again mark for your

1015
00:42:05,040 --> 00:42:07,200
presentation and thanks for everyone who

1016
00:42:07,200 --> 00:42:11,200
attended today's session

