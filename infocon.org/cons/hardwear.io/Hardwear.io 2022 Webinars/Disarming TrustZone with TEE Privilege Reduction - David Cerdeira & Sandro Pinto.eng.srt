1
00:00:12,480 --> 00:00:13,920
[Music]

2
00:00:13,920 --> 00:00:15,920
welcome everyone and thank you for

3
00:00:15,920 --> 00:00:18,320
joining us this afternoon i'm andrea and

4
00:00:18,320 --> 00:00:20,960
i will be your host for today's webinar

5
00:00:20,960 --> 00:00:22,800
i'm glad to welcome today david and

6
00:00:22,800 --> 00:00:25,760
sandro david is a phd student at the

7
00:00:25,760 --> 00:00:27,439
university of mino with a strong

8
00:00:27,439 --> 00:00:29,039
background in embedded systems and

9
00:00:29,039 --> 00:00:31,439
systems programming where sandro is an

10
00:00:31,439 --> 00:00:33,120
associate research professor at the

11
00:00:33,120 --> 00:00:35,520
university of minnow in today's

12
00:00:35,520 --> 00:00:36,880
presentation

13
00:00:36,880 --> 00:00:39,360
they will present disarming trust zone

14
00:00:39,360 --> 00:00:40,320
with t

15
00:00:40,320 --> 00:00:42,879
privilege reduction in this talk they

16
00:00:42,879 --> 00:00:45,120
will present and discuss rezone a new

17
00:00:45,120 --> 00:00:46,559
security architecture that can

18
00:00:46,559 --> 00:00:48,559
effectively counter ongoing privilege

19
00:00:48,559 --> 00:00:50,399
escalation tax by reducing the

20
00:00:50,399 --> 00:00:52,480
privileges of a potentially compromised

21
00:00:52,480 --> 00:00:54,079
trusted os

22
00:00:54,079 --> 00:00:57,120
before we start a little housekeeping

23
00:00:57,120 --> 00:00:59,359
the presentation will last 30 minutes

24
00:00:59,359 --> 00:01:01,920
followed by a 10 minute q a session and

25
00:01:01,920 --> 00:01:03,440
if you have any questions please share

26
00:01:03,440 --> 00:01:05,280
them across the chat and we'll answer

27
00:01:05,280 --> 00:01:07,600
them once the presentation is over

28
00:01:07,600 --> 00:01:09,920
without further ado i would like to

29
00:01:09,920 --> 00:01:12,720
invite you to start your presentation

30
00:01:12,720 --> 00:01:13,600
so

31
00:01:13,600 --> 00:01:15,360
first of all i would like to thank the

32
00:01:15,360 --> 00:01:17,360
hardware io team and in particular

33
00:01:17,360 --> 00:01:19,680
andrea for for the invitation i would

34
00:01:19,680 --> 00:01:21,920
like also to thank the audience for for

35
00:01:21,920 --> 00:01:23,840
taking the time and the interest in

36
00:01:23,840 --> 00:01:25,680
attending our talk

37
00:01:25,680 --> 00:01:28,400
so my name is sandra pinto

38
00:01:28,400 --> 00:01:29,920
and with me today

39
00:01:29,920 --> 00:01:32,479
we have david which is currently doing

40
00:01:32,479 --> 00:01:36,640
his pg under my supervision uh also

41
00:01:36,640 --> 00:01:39,360
we have jose which is also another phd

42
00:01:39,360 --> 00:01:40,720
student under my supervision as a

43
00:01:40,720 --> 00:01:42,240
collaborator of this work and also

44
00:01:42,240 --> 00:01:44,079
professor nunu santos which is called

45
00:01:44,079 --> 00:01:46,560
advising david with me

46
00:01:46,560 --> 00:01:49,840
and so what uh i'm going to do is i will

47
00:01:49,840 --> 00:01:52,799
try to explain our work entitled disarm

48
00:01:52,799 --> 00:01:55,280
interest on with the previous reduction

49
00:01:55,280 --> 00:01:57,439
in just three slides as a kind of

50
00:01:57,439 --> 00:02:00,640
trailer or preview about the talk

51
00:02:00,640 --> 00:02:02,719
and then we will discuss the talk into

52
00:02:02,719 --> 00:02:04,880
more detail so

53
00:02:04,880 --> 00:02:07,360
with it taking much of your time so

54
00:02:07,360 --> 00:02:09,360
untrust some technology was introduced

55
00:02:09,360 --> 00:02:12,800
almost two decades ago in 2004 in the

56
00:02:12,800 --> 00:02:14,959
arm cortex a portfolio cortex

57
00:02:14,959 --> 00:02:16,879
application process as a security

58
00:02:16,879 --> 00:02:19,040
oriented technology and this technology

59
00:02:19,040 --> 00:02:22,080
has been leveraged to build uh tes or

60
00:02:22,080 --> 00:02:24,080
trust execution environments in billions

61
00:02:24,080 --> 00:02:26,480
of mobile device worldwide in different

62
00:02:26,480 --> 00:02:29,040
applications ranging for example of

63
00:02:29,040 --> 00:02:32,000
biometric authentication drm service

64
00:02:32,000 --> 00:02:35,040
such as one used by netflix or either

65
00:02:35,040 --> 00:02:38,000
online online banking payments but

66
00:02:38,000 --> 00:02:40,480
the sad reality is that over over the

67
00:02:40,480 --> 00:02:44,000
years trusts on a ccte were attacked

68
00:02:44,000 --> 00:02:47,440
and was not only one two times it was

69
00:02:47,440 --> 00:02:50,720
hundreds of times and uh if you want to

70
00:02:50,720 --> 00:02:53,840
understand a little bit more about the

71
00:02:53,840 --> 00:02:55,440
state of affairs of the security

72
00:02:55,440 --> 00:02:57,840
vulnerabilities affect interest on tvs

73
00:02:57,840 --> 00:03:01,280
you can refer to this paper that we have

74
00:03:01,280 --> 00:03:04,239
published two years ago at the ieee smp

75
00:03:04,239 --> 00:03:06,800
hawkland which is s okay understanding

76
00:03:06,800 --> 00:03:08,800
prevailing security vulnerabilities

77
00:03:08,800 --> 00:03:11,680
interests on assisted

78
00:03:11,680 --> 00:03:12,480
so

79
00:03:12,480 --> 00:03:14,720
a particular observation resulting from

80
00:03:14,720 --> 00:03:16,800
this study that we have done was that

81
00:03:16,800 --> 00:03:18,480
the majority of the reported

82
00:03:18,480 --> 00:03:20,959
vulnerabilities resulted from

83
00:03:20,959 --> 00:03:23,200
architectural flaws which are highly

84
00:03:23,200 --> 00:03:26,319
linked with this excess of trust and

85
00:03:26,319 --> 00:03:28,560
privilege of the tea

86
00:03:28,560 --> 00:03:30,799
and there was a particular gentleman

87
00:03:30,799 --> 00:03:32,879
whose name may sound familiar among the

88
00:03:32,879 --> 00:03:34,799
security experts in the audience that

89
00:03:34,799 --> 00:03:37,599
was gal beniamini that

90
00:03:37,599 --> 00:03:39,440
was in fact the worst nightmare for

91
00:03:39,440 --> 00:03:43,599
qualcomm between 2015 and 2017 and he

92
00:03:43,599 --> 00:03:45,200
basically demonstrated that it was

93
00:03:45,200 --> 00:03:48,879
possible on the qualcomm te for a normal

94
00:03:48,879 --> 00:03:50,879
world application within without any

95
00:03:50,879 --> 00:03:53,599
kind of privilege to hijack for example

96
00:03:53,599 --> 00:03:56,400
a trusted application or even worse to

97
00:03:56,400 --> 00:04:00,159
hijack the the trusted operating system

98
00:04:00,159 --> 00:04:00,959
and

99
00:04:00,959 --> 00:04:03,360
yeah once you have full control of this

100
00:04:03,360 --> 00:04:05,439
trust operating system in secure world

101
00:04:05,439 --> 00:04:08,319
you can basically access and tamper with

102
00:04:08,319 --> 00:04:09,920
the main operating system such as

103
00:04:09,920 --> 00:04:12,319
android or you can

104
00:04:12,319 --> 00:04:14,560
tamper with another trusted applications

105
00:04:14,560 --> 00:04:17,040
or even worse you can basically fully

106
00:04:17,040 --> 00:04:19,199
compromise this humanity which is the

107
00:04:19,199 --> 00:04:20,880
firmware running at the highest level of

108
00:04:20,880 --> 00:04:22,720
privilege and this is bad really bad you

109
00:04:22,720 --> 00:04:25,120
can basically have full control of the

110
00:04:25,120 --> 00:04:26,479
system

111
00:04:26,479 --> 00:04:29,520
so uh with our work we tried to

112
00:04:29,520 --> 00:04:31,680
basically address this problem and we

113
00:04:31,680 --> 00:04:34,000
tried to to fix this access level of

114
00:04:34,000 --> 00:04:36,240
privilege of the tea in the over

115
00:04:36,240 --> 00:04:38,000
ultrasound archetype

116
00:04:38,000 --> 00:04:40,960
and for that we proposed razon and rizzo

117
00:04:40,960 --> 00:04:43,120
basically leveraged traditional agnostic

118
00:04:43,120 --> 00:04:45,120
hardware primitives available in

119
00:04:45,120 --> 00:04:47,280
commercial off-the-shelf platforms to

120
00:04:47,280 --> 00:04:49,600
partitioning a monolithic trust

121
00:04:49,600 --> 00:04:52,960
reduction environment in multiple zones

122
00:04:52,960 --> 00:04:55,040
and by doing that rezone is able to

123
00:04:55,040 --> 00:04:58,160
restrict the e from access in the normal

124
00:04:58,160 --> 00:04:59,520
world

125
00:04:59,520 --> 00:05:01,919
accessing other t's or other zones that

126
00:05:01,919 --> 00:05:04,000
you may want to have on your system and

127
00:05:04,000 --> 00:05:05,840
even

128
00:05:05,840 --> 00:05:07,759
restricting the access to the secure

129
00:05:07,759 --> 00:05:09,120
monitor

130
00:05:09,120 --> 00:05:10,479
so

131
00:05:10,479 --> 00:05:12,800
i pause here for a second at this point

132
00:05:12,800 --> 00:05:14,800
you should have already like the big

133
00:05:14,800 --> 00:05:16,880
picture about the motivation and what we

134
00:05:16,880 --> 00:05:19,360
have done and so after this slide we are

135
00:05:19,360 --> 00:05:21,440
going more into detail

136
00:05:21,440 --> 00:05:24,160
of our work so i will spend more time in

137
00:05:24,160 --> 00:05:25,840
the motivation and the goals and the

138
00:05:25,840 --> 00:05:28,479
trend model then the vid which in fact

139
00:05:28,479 --> 00:05:30,639
was one doing the ev lifting part of

140
00:05:30,639 --> 00:05:32,479
this work will explain the design

141
00:05:32,479 --> 00:05:34,560
implementation and evaluation of our

142
00:05:34,560 --> 00:05:37,120
solution and i will get back at the end

143
00:05:37,120 --> 00:05:39,120
of the presentation just to share some

144
00:05:39,120 --> 00:05:41,199
final thoughts

145
00:05:41,199 --> 00:05:44,320
so i will start from the over ultrasound

146
00:05:44,320 --> 00:05:46,800
tea software architecture trust sony

147
00:05:46,800 --> 00:05:48,800
center around the concept of protection

148
00:05:48,800 --> 00:05:50,720
domains you have the normal world and

149
00:05:50,720 --> 00:05:53,360
you have also the secure world

150
00:05:53,360 --> 00:05:55,840
and the the normal world typically you

151
00:05:55,840 --> 00:05:58,000
run your rich execution environment or

152
00:05:58,000 --> 00:06:00,160
your main operating system such as

153
00:06:00,160 --> 00:06:02,160
android and your normal

154
00:06:02,160 --> 00:06:04,960
applications on the secure world in fact

155
00:06:04,960 --> 00:06:06,319
you run this

156
00:06:06,319 --> 00:06:08,800
trust of operating system that is

157
00:06:08,800 --> 00:06:11,039
somehow minimalistic comparing to to the

158
00:06:11,039 --> 00:06:12,800
main operating system that is

159
00:06:12,800 --> 00:06:14,880
responsible for managing these different

160
00:06:14,880 --> 00:06:18,000
trusted applications uh one particular

161
00:06:18,000 --> 00:06:19,680
feature of the trust on architecture is

162
00:06:19,680 --> 00:06:22,560
that the normal world is it cannot

163
00:06:22,560 --> 00:06:24,400
access to the secure world but the

164
00:06:24,400 --> 00:06:27,919
secure world is able uh to access to the

165
00:06:27,919 --> 00:06:29,759
normal world and you have a kind of

166
00:06:29,759 --> 00:06:32,319
secure monitor that is responsible for

167
00:06:32,319 --> 00:06:35,520
managing this this world switch

168
00:06:35,520 --> 00:06:37,600
well from a hardware perspective what we

169
00:06:37,600 --> 00:06:39,600
have here is a kind of simplified view

170
00:06:39,600 --> 00:06:41,680
of an architecture of a dual core system

171
00:06:41,680 --> 00:06:43,919
car wall zero core one

172
00:06:43,919 --> 00:06:45,919
private level one cache shared level to

173
00:06:45,919 --> 00:06:46,880
cache

174
00:06:46,880 --> 00:06:50,479
uh and also the the buzz interconnect

175
00:06:50,479 --> 00:06:52,160
that connects different

176
00:06:52,160 --> 00:06:54,240
memories and peripherals and other boss

177
00:06:54,240 --> 00:06:56,720
masters in the systems and the the trust

178
00:06:56,720 --> 00:06:59,440
zone technology is not only

179
00:06:59,440 --> 00:07:02,960
available on the core itself but in fact

180
00:07:02,960 --> 00:07:05,440
it propagates uh through the system to

181
00:07:05,440 --> 00:07:08,960
the bus uh with this non-secure beat

182
00:07:08,960 --> 00:07:11,759
that flows from the car to the bus and

183
00:07:11,759 --> 00:07:14,240
in in this system or in this

184
00:07:14,240 --> 00:07:16,400
interconnector but there are additional

185
00:07:16,400 --> 00:07:17,919
controls or additional trust and

186
00:07:17,919 --> 00:07:20,479
controllers uh that you can leverage to

187
00:07:20,479 --> 00:07:22,479
basically configure memory and

188
00:07:22,479 --> 00:07:25,520
peripherals as secure and unsecured in

189
00:07:25,520 --> 00:07:27,280
particular you have the truss on address

190
00:07:27,280 --> 00:07:29,919
space controller the task that you can

191
00:07:29,919 --> 00:07:32,560
use to partitioning external external

192
00:07:32,560 --> 00:07:35,199
memory and the same at the same time you

193
00:07:35,199 --> 00:07:37,360
can also use the thrust zone protection

194
00:07:37,360 --> 00:07:39,360
controller that you can also use to

195
00:07:39,360 --> 00:07:43,520
configure peripheral secure and non-cq

196
00:07:43,520 --> 00:07:46,720
well uh the the key motivation for for

197
00:07:46,720 --> 00:07:49,440
for our work as i explained before is

198
00:07:49,440 --> 00:07:52,160
this excess of privilege of of the tea

199
00:07:52,160 --> 00:07:55,120
and in fact uh if he

200
00:07:55,120 --> 00:07:57,680
look as this orthogonal view of the

201
00:07:57,680 --> 00:08:00,400
trust on architecture we can conclude as

202
00:08:00,400 --> 00:08:03,680
it was demonstrated before that trusted

203
00:08:03,680 --> 00:08:06,319
os can for example access the normal

204
00:08:06,319 --> 00:08:08,240
world and other components in the system

205
00:08:08,240 --> 00:08:10,960
so the best way to represent the

206
00:08:10,960 --> 00:08:13,199
architecture that in my opinion somehow

207
00:08:13,199 --> 00:08:15,840
misleading uh from an orthogonal to a

208
00:08:15,840 --> 00:08:17,840
vertical approach is something like this

209
00:08:17,840 --> 00:08:20,479
okay so in in this architecture i think

210
00:08:20,479 --> 00:08:22,879
is more intuitive that the secure world

211
00:08:22,879 --> 00:08:24,560
is more privileged than the normal wall

212
00:08:24,560 --> 00:08:27,440
so all these components trusted ours and

213
00:08:27,440 --> 00:08:30,080
secure one can access the the layers

214
00:08:30,080 --> 00:08:32,479
that sit at top and

215
00:08:32,479 --> 00:08:35,039
since there are no real isolation

216
00:08:35,039 --> 00:08:38,080
between the el3 and the security l1 what

217
00:08:38,080 --> 00:08:40,000
we can have in fact is something like

218
00:08:40,000 --> 00:08:43,519
this so in practice what we have as the

219
00:08:43,519 --> 00:08:46,320
tcp of our system is not only the secure

220
00:08:46,320 --> 00:08:49,040
monitor but also this trust operating

221
00:08:49,040 --> 00:08:51,519
system and in our study what we conclude

222
00:08:51,519 --> 00:08:52,640
was that

223
00:08:52,640 --> 00:08:54,240
this tcv

224
00:08:54,240 --> 00:08:56,720
is very large because the trusted os in

225
00:08:56,720 --> 00:09:00,959
practice as as a considerable size

226
00:09:00,959 --> 00:09:04,399
so what we tried to come with was one

227
00:09:04,399 --> 00:09:07,279
with a novel solution to to fix this

228
00:09:07,279 --> 00:09:09,839
problem but it was not really really

229
00:09:09,839 --> 00:09:12,080
straightforward there were some attempts

230
00:09:12,080 --> 00:09:14,160
on the on the literature in the state of

231
00:09:14,160 --> 00:09:16,640
the arts to try to address this problem

232
00:09:16,640 --> 00:09:18,880
uh mainly by moving the trusted

233
00:09:18,880 --> 00:09:20,720
application from the cq world to the

234
00:09:20,720 --> 00:09:22,959
normal world and leveraging some

235
00:09:22,959 --> 00:09:24,640
capabilities of the trust and address

236
00:09:24,640 --> 00:09:26,480
space controller i'm referring in

237
00:09:26,480 --> 00:09:28,320
particular to sanctuary that was

238
00:09:28,320 --> 00:09:31,600
published at the ndss conference and it

239
00:09:31,600 --> 00:09:33,920
parts from the observation that the the

240
00:09:33,920 --> 00:09:36,880
trust on address space controller 400

241
00:09:36,880 --> 00:09:38,640
implements one feature that is the

242
00:09:38,640 --> 00:09:40,880
identity based filtering

243
00:09:40,880 --> 00:09:44,080
which is able to to to assign memory

244
00:09:44,080 --> 00:09:46,320
regions to specific buzzmasters for

245
00:09:46,320 --> 00:09:48,880
non-secure access but the problem with

246
00:09:48,880 --> 00:09:51,279
this solution that was demonstrated only

247
00:09:51,279 --> 00:09:53,360
in emulators not in real hardware

248
00:09:53,360 --> 00:09:56,320
platforms is that this assumption that

249
00:09:56,320 --> 00:09:59,200
the core id in a cluster typically you

250
00:09:59,200 --> 00:10:02,320
have like quad core dual core uh

251
00:10:02,320 --> 00:10:04,720
the core id is different for each car

252
00:10:04,720 --> 00:10:07,120
but in practice in real platforms this

253
00:10:07,120 --> 00:10:09,760
doesn't it doesn't happen so what we

254
00:10:09,760 --> 00:10:11,440
conclude was that

255
00:10:11,440 --> 00:10:13,600
in real systems reducing the privilege

256
00:10:13,600 --> 00:10:16,720
of the security l1 was not possible only

257
00:10:16,720 --> 00:10:19,200
with standard threads on mechanism

258
00:10:19,200 --> 00:10:21,360
because the cpu from a cluster

259
00:10:21,360 --> 00:10:24,399
has the same master id the trusted os in

260
00:10:24,399 --> 00:10:26,800
practice can always tamper with the

261
00:10:26,800 --> 00:10:28,480
trust on address space controller and

262
00:10:28,480 --> 00:10:30,160
change the configuration

263
00:10:30,160 --> 00:10:33,600
and the the security l1 and the l3 in

264
00:10:33,600 --> 00:10:36,160
practice has the same privilege

265
00:10:36,160 --> 00:10:38,240
so we came with an hypothesis and the

266
00:10:38,240 --> 00:10:41,040
hypothesis was in fact that

267
00:10:41,040 --> 00:10:43,440
we try to restrict the t

268
00:10:43,440 --> 00:10:46,240
privilege not by leveraging the trusts

269
00:10:46,240 --> 00:10:48,959
on controllers but by using additional

270
00:10:48,959 --> 00:10:50,720
system level hardware controllers

271
00:10:50,720 --> 00:10:53,040
available in commercial of the shelf

272
00:10:53,040 --> 00:10:54,720
platforms

273
00:10:54,720 --> 00:10:58,079
so parting from these hypotheses

274
00:10:58,079 --> 00:11:00,399
and part parting from these standard

275
00:11:00,399 --> 00:11:02,480
trusts on hardware architecture we tried

276
00:11:02,480 --> 00:11:04,720
to draft what we believed would be an

277
00:11:04,720 --> 00:11:07,279
ideal platform model to restricting the

278
00:11:07,279 --> 00:11:08,800
trust otherwise

279
00:11:08,800 --> 00:11:11,680
and the first thing that we thought was

280
00:11:11,680 --> 00:11:14,399
instead of relying in these nes speeds

281
00:11:14,399 --> 00:11:16,399
what if we add a second layer of

282
00:11:16,399 --> 00:11:18,240
firewalling that

283
00:11:18,240 --> 00:11:20,720
we call the platform partitioning

284
00:11:20,720 --> 00:11:22,640
controller or ppc

285
00:11:22,640 --> 00:11:23,600
that

286
00:11:23,600 --> 00:11:26,480
implies some policies that are not based

287
00:11:26,480 --> 00:11:29,440
on the states of the nes bit but based

288
00:11:29,440 --> 00:11:31,120
on this

289
00:11:31,120 --> 00:11:34,480
id of the different masters that we call

290
00:11:34,480 --> 00:11:36,160
mid

291
00:11:36,160 --> 00:11:39,120
and well this is a start but what we can

292
00:11:39,120 --> 00:11:40,880
conclude is that

293
00:11:40,880 --> 00:11:44,160
in this cluster of different course the

294
00:11:44,160 --> 00:11:48,399
course has the same id so we cannot use

295
00:11:48,399 --> 00:11:52,160
these main course of of the system to to

296
00:11:52,160 --> 00:11:55,519
reconfigure this ppc because they shared

297
00:11:55,519 --> 00:11:59,279
the same mid so in fact what we need is

298
00:11:59,279 --> 00:12:01,200
an what we call

299
00:12:01,200 --> 00:12:04,000
acu or auxiliary controller unit that

300
00:12:04,000 --> 00:12:06,079
can be a simple microcontroller

301
00:12:06,079 --> 00:12:08,720
available in these in these modern

302
00:12:08,720 --> 00:12:12,240
platforms that can take the role of of

303
00:12:12,240 --> 00:12:14,639
coordinating the configuration of the

304
00:12:14,639 --> 00:12:17,200
access permissions of this ppc and

305
00:12:17,200 --> 00:12:20,320
guaranteeing uh that these main

306
00:12:20,320 --> 00:12:24,000
processors cannot change at runtime the

307
00:12:24,000 --> 00:12:26,079
the policies that we

308
00:12:26,079 --> 00:12:27,360
apply

309
00:12:27,360 --> 00:12:29,839
so another block that is needed but is

310
00:12:29,839 --> 00:12:32,000
not depicted in this picture in

311
00:12:32,000 --> 00:12:33,519
particular because is widespread

312
00:12:33,519 --> 00:12:35,680
available in the platforms is the secure

313
00:12:35,680 --> 00:12:37,600
boot and the secure boots basically

314
00:12:37,600 --> 00:12:39,040
validates the integrity and the

315
00:12:39,040 --> 00:12:41,839
authenticity of the firmware basically

316
00:12:41,839 --> 00:12:44,880
to ensure that the acu has been securely

317
00:12:44,880 --> 00:12:47,120
bootstrapped and is the owner of this

318
00:12:47,120 --> 00:12:49,360
ppc that is the most important component

319
00:12:49,360 --> 00:12:52,079
to enforce the policy

320
00:12:52,079 --> 00:12:54,560
so then we try to understand the

321
00:12:54,560 --> 00:12:57,519
availability of these of these hardware

322
00:12:57,519 --> 00:13:00,720
primitives in different socs and from

323
00:13:00,720 --> 00:13:03,839
different vendors and we surveyed

324
00:13:03,839 --> 00:13:05,440
19 or

325
00:13:05,440 --> 00:13:08,720
17 popular socs from nine different

326
00:13:08,720 --> 00:13:10,800
vendors and

327
00:13:10,800 --> 00:13:13,200
what we did we tried to study public

328
00:13:13,200 --> 00:13:15,519
available reference manuals we inspected

329
00:13:15,519 --> 00:13:18,000
the linux kernel we we tried to find on

330
00:13:18,000 --> 00:13:20,639
bootloaders and we inspect the also the

331
00:13:20,639 --> 00:13:22,560
the security monitor the trusted

332
00:13:22,560 --> 00:13:23,680
firmware

333
00:13:23,680 --> 00:13:26,560
and in some cases we also looked in

334
00:13:26,560 --> 00:13:28,720
existing available cds to try to

335
00:13:28,720 --> 00:13:32,000
identify specific components and uh this

336
00:13:32,000 --> 00:13:34,240
the the information of this study is

337
00:13:34,240 --> 00:13:37,120
reflected in this table and what we can

338
00:13:37,120 --> 00:13:38,639
see is that

339
00:13:38,639 --> 00:13:42,880
for the ppc we saw that modern socs have

340
00:13:42,880 --> 00:13:46,079
have this component either as a custom

341
00:13:46,079 --> 00:13:48,160
or proprietary system level controllers

342
00:13:48,160 --> 00:13:51,839
such as nxp or xilinx and xpsd rdc or

343
00:13:51,839 --> 00:13:53,920
resource domain controller

344
00:13:53,920 --> 00:13:55,839
i think i can use

345
00:13:55,839 --> 00:13:56,959
this

346
00:13:56,959 --> 00:13:58,160
point

347
00:13:58,160 --> 00:13:59,680
yeah

348
00:13:59,680 --> 00:14:01,199
and

349
00:14:01,199 --> 00:14:02,639
also another

350
00:14:02,639 --> 00:14:04,880
some of white speed widespread component

351
00:14:04,880 --> 00:14:07,519
that can be used as a ppc is this system

352
00:14:07,519 --> 00:14:10,320
memory management unit that is quite

353
00:14:10,320 --> 00:14:12,560
available due to the widespread use of

354
00:14:12,560 --> 00:14:15,279
fertilization on modern platforms

355
00:14:15,279 --> 00:14:17,839
for the acu this is a trend acknowledged

356
00:14:17,839 --> 00:14:20,720
by arm that they are integrating uh even

357
00:14:20,720 --> 00:14:23,360
more and more small microcontrollers on

358
00:14:23,360 --> 00:14:27,440
on these big socs uh either for platform

359
00:14:27,440 --> 00:14:28,560
management

360
00:14:28,560 --> 00:14:30,720
reasons are either for security reasons

361
00:14:30,720 --> 00:14:33,839
so in fact what we conclude was that

362
00:14:33,839 --> 00:14:37,279
uh from 17 uh

363
00:14:37,279 --> 00:14:41,680
socs that we served 13 are able to to to

364
00:14:41,680 --> 00:14:45,040
implement a reason and in fact for the

365
00:14:45,040 --> 00:14:46,800
samsung uh

366
00:14:46,800 --> 00:14:49,920
socs uh because the public available

367
00:14:49,920 --> 00:14:51,680
information uh

368
00:14:51,680 --> 00:14:54,320
regarding the peripheral mmus were not

369
00:14:54,320 --> 00:14:56,480
able to conclude if the features are

370
00:14:56,480 --> 00:14:59,279
enough or not so we we classified at

371
00:14:59,279 --> 00:15:01,920
this note of it

372
00:15:01,920 --> 00:15:03,040
so

373
00:15:03,040 --> 00:15:04,480
uh

374
00:15:04,480 --> 00:15:06,639
with regard to the design goals we tried

375
00:15:06,639 --> 00:15:08,160
to come up with a novel security

376
00:15:08,160 --> 00:15:10,639
architecture that leveraged this uh

377
00:15:10,639 --> 00:15:12,720
hardware novel artwork primitives to

378
00:15:12,720 --> 00:15:15,279
create the the secure world sandblocks

379
00:15:15,279 --> 00:15:17,040
and we try to establish first the

380
00:15:17,040 --> 00:15:19,360
security properties we need to reduce

381
00:15:19,360 --> 00:15:22,000
the privilege of trusted os

382
00:15:22,000 --> 00:15:24,160
so what we want to do if we take this

383
00:15:24,160 --> 00:15:27,120
vertical image as an example we try to

384
00:15:27,120 --> 00:15:30,160
come up again for the orthogonal view

385
00:15:30,160 --> 00:15:32,079
but then imply

386
00:15:32,079 --> 00:15:36,000
policies that restricts in fact uh the

387
00:15:36,000 --> 00:15:36,720
the

388
00:15:36,720 --> 00:15:39,040
all different components assessed to

389
00:15:39,040 --> 00:15:41,920
each other so we try to reduce the

390
00:15:41,920 --> 00:15:44,639
privilege of the trusted os to not be

391
00:15:44,639 --> 00:15:46,639
able to access the normal world the

392
00:15:46,639 --> 00:15:49,279
secure monitor and the other teas

393
00:15:49,279 --> 00:15:51,519
also we try to establish as design goals

394
00:15:51,519 --> 00:15:54,480
to depend on a small tcp in fact relying

395
00:15:54,480 --> 00:15:56,160
just on the firmware running at the

396
00:15:56,160 --> 00:15:58,880
august level of privilege neil tree

397
00:15:58,880 --> 00:16:00,560
and to maintain these software

398
00:16:00,560 --> 00:16:02,639
portability and compatibility with

399
00:16:02,639 --> 00:16:04,320
legacy systems because it's really

400
00:16:04,320 --> 00:16:07,120
important as well and most importantly

401
00:16:07,120 --> 00:16:10,480
we try to offer a good trade-off between

402
00:16:10,480 --> 00:16:12,720
security and performance we know that at

403
00:16:12,720 --> 00:16:15,279
some point sometimes security it comes

404
00:16:15,279 --> 00:16:17,519
at the cost of the trade-off so we want

405
00:16:17,519 --> 00:16:20,880
to have the best of of both worlds

406
00:16:20,880 --> 00:16:23,680
so for the trend model uh an attacker

407
00:16:23,680 --> 00:16:25,680
may want to subvert the security

408
00:16:25,680 --> 00:16:29,040
properties that we have as design goals

409
00:16:29,040 --> 00:16:32,480
uh so the rich os as we know is too

410
00:16:32,480 --> 00:16:34,880
large to be trust but also the trusted

411
00:16:34,880 --> 00:16:36,720
os it's our intention to reduce the

412
00:16:36,720 --> 00:16:39,519
privilege and so we we take it as grant

413
00:16:39,519 --> 00:16:42,560
that can be compromised uh so a

414
00:16:42,560 --> 00:16:45,279
compromise trusted os can try to access

415
00:16:45,279 --> 00:16:47,759
for example the acu to subvert the acu

416
00:16:47,759 --> 00:16:50,320
and try to change the the configuration

417
00:16:50,320 --> 00:16:52,399
of the permissions of the ppc that

418
00:16:52,399 --> 00:16:55,680
basically is responsible for enforcing

419
00:16:55,680 --> 00:16:59,120
these these policies we trust uh the

420
00:16:59,120 --> 00:17:01,279
secure monitor and the code running on

421
00:17:01,279 --> 00:17:04,400
the acu and we consider out of scope

422
00:17:04,400 --> 00:17:06,640
like physical physical attacks such as

423
00:17:06,640 --> 00:17:09,679
photo injection uh micro architectural

424
00:17:09,679 --> 00:17:12,640
side channels uh and also the nail of

425
00:17:12,640 --> 00:17:15,119
service attacks such as for example one

426
00:17:15,119 --> 00:17:17,599
malicious trusted os do not release the

427
00:17:17,599 --> 00:17:21,280
control of the cpu to the normal world

428
00:17:21,280 --> 00:17:24,400
so i pause here for a sec a second and

429
00:17:24,400 --> 00:17:27,199
now i hand it over to to david that will

430
00:17:27,199 --> 00:17:29,280
explain the design the implementation

431
00:17:29,280 --> 00:17:31,120
and the evaluation i will get back at

432
00:17:31,120 --> 00:17:33,039
the end of the presentation so hello

433
00:17:33,039 --> 00:17:35,760
everyone my name is david and i'll be

434
00:17:35,760 --> 00:17:37,600
taking the presentation

435
00:17:37,600 --> 00:17:39,760
from here so let's start by looking at

436
00:17:39,760 --> 00:17:41,280
the design

437
00:17:41,280 --> 00:17:44,720
design this is this picture

438
00:17:45,520 --> 00:17:48,080
the results design so the first thing

439
00:17:48,080 --> 00:17:49,919
the first things that we must

440
00:17:49,919 --> 00:17:51,679
take into consideration is that result

441
00:17:51,679 --> 00:17:53,360
requires the

442
00:17:53,360 --> 00:17:55,120
possibility to establish at least two

443
00:17:55,120 --> 00:17:57,840
security domains so one for the

444
00:17:57,840 --> 00:17:59,200
acu

445
00:17:59,200 --> 00:18:01,280
and one for the processor card

446
00:18:01,280 --> 00:18:03,760
and this allows us to establish the

447
00:18:03,760 --> 00:18:05,679
different tax control

448
00:18:05,679 --> 00:18:06,960
properties

449
00:18:06,960 --> 00:18:08,240
depending

450
00:18:08,240 --> 00:18:11,840
for the processor car and the acu

451
00:18:11,840 --> 00:18:12,880
so

452
00:18:12,880 --> 00:18:14,240
then we must include custom

453
00:18:14,240 --> 00:18:16,400
functionality into the secure monitor we

454
00:18:16,400 --> 00:18:18,400
call the size reference functionality

455
00:18:18,400 --> 00:18:21,360
the result trampoline and the main

456
00:18:21,360 --> 00:18:24,000
the main responsibility is to securely

457
00:18:24,000 --> 00:18:26,000
exit

458
00:18:26,000 --> 00:18:26,720
the

459
00:18:26,720 --> 00:18:30,000
control to the zone to the te

460
00:18:30,000 --> 00:18:31,919
then we have the gatekeeper that runs on

461
00:18:31,919 --> 00:18:34,880
the acu and trampoline and gatekeeper

462
00:18:34,880 --> 00:18:37,760
actual coordinate in order to securely

463
00:18:37,760 --> 00:18:40,400
configure the ppc

464
00:18:40,400 --> 00:18:42,640
lastly we have the ppc uh we already

465
00:18:42,640 --> 00:18:43,840
mentioned and you send it between the

466
00:18:43,840 --> 00:18:46,880
car and the memory and it enforces the

467
00:18:46,880 --> 00:18:49,600
actual access control policy

468
00:18:49,600 --> 00:18:52,000
okay the next picture

469
00:18:52,000 --> 00:18:52,960
uh

470
00:18:52,960 --> 00:18:55,039
depicts how reason works

471
00:18:55,039 --> 00:18:57,039
from when i have a high level view on

472
00:18:57,039 --> 00:18:59,039
the left we have

473
00:18:59,039 --> 00:19:01,120
execution flow of a call from the normal

474
00:19:01,120 --> 00:19:04,000
world to a zone to a tee on the middle

475
00:19:04,000 --> 00:19:06,000
we have the access control policy that

476
00:19:06,000 --> 00:19:08,559
is established

477
00:19:08,559 --> 00:19:10,799
established and on the right we have the

478
00:19:10,799 --> 00:19:13,039
memory layout of the system so let's

479
00:19:13,039 --> 00:19:14,720
actually start on the right by looking

480
00:19:14,720 --> 00:19:16,480
at the memory layout

481
00:19:16,480 --> 00:19:17,919
and looking at the memory regions we

482
00:19:17,919 --> 00:19:19,919
must take into consideration the first

483
00:19:19,919 --> 00:19:22,559
memory region is the memory region of

484
00:19:22,559 --> 00:19:25,520
the normal world which hosts the rich

485
00:19:25,520 --> 00:19:27,919
environment os for example android

486
00:19:27,919 --> 00:19:31,120
and also on the normal world we have the

487
00:19:31,120 --> 00:19:33,679
shared memory so this shared memory is

488
00:19:33,679 --> 00:19:36,880
used to communicate with the zone with

489
00:19:36,880 --> 00:19:38,160
the t

490
00:19:38,160 --> 00:19:40,400
on the secure world then we have the

491
00:19:40,400 --> 00:19:42,640
monitor which is the same as the typical

492
00:19:42,640 --> 00:19:45,440
uh trust zone deployment but now we also

493
00:19:45,440 --> 00:19:47,520
need a special zone

494
00:19:47,520 --> 00:19:49,039
for the trampoline

495
00:19:49,039 --> 00:19:51,280
and again the trampoline main function

496
00:19:51,280 --> 00:19:53,840
is to safely perform entries and exits

497
00:19:53,840 --> 00:19:56,240
to and from as well and lastly we need a

498
00:19:56,240 --> 00:19:58,480
memory region to host a zone which will

499
00:19:58,480 --> 00:20:01,200
host trusted os and its trusted

500
00:20:01,200 --> 00:20:03,840
applications

501
00:20:04,400 --> 00:20:06,720
now let's look at the memory access

502
00:20:06,720 --> 00:20:08,480
control policy

503
00:20:08,480 --> 00:20:10,159
so the control policy is established

504
00:20:10,159 --> 00:20:12,159
depending on the privilege level that is

505
00:20:12,159 --> 00:20:14,799
executing

506
00:20:15,280 --> 00:20:16,640
so starting by

507
00:20:16,640 --> 00:20:17,679
the

508
00:20:17,679 --> 00:20:21,520
res or the normal world the el 0

509
00:20:21,520 --> 00:20:22,799
and el 1

510
00:20:22,799 --> 00:20:24,799
the re can access its memory well it's

511
00:20:24,799 --> 00:20:27,440
executing so this is similar to or it's

512
00:20:27,440 --> 00:20:30,320
exactly the same as just some typical

513
00:20:30,320 --> 00:20:31,919
software it can access its memory and

514
00:20:31,919 --> 00:20:34,799
the shared memory then at the el3 we

515
00:20:34,799 --> 00:20:37,039
have the monitor and it can access all

516
00:20:37,039 --> 00:20:39,520
the memory it needs it's the since it's

517
00:20:39,520 --> 00:20:43,280
the most trusted component of the system

518
00:20:43,280 --> 00:20:46,480
and we have for the secure el 0 and dl1

519
00:20:46,480 --> 00:20:48,480
we have the permissions that we can only

520
00:20:48,480 --> 00:20:49,440
access

521
00:20:49,440 --> 00:20:52,559
it's the memory uh it's the memory and

522
00:20:52,559 --> 00:20:55,120
the shared memory however note that the

523
00:20:55,120 --> 00:20:56,799
trampoline is actually marked as we

524
00:20:56,799 --> 00:21:00,480
don't and this is important as

525
00:21:00,480 --> 00:21:03,440
doing so allows performing actually

526
00:21:03,440 --> 00:21:06,799
policy reconfiguration and also so okay

527
00:21:06,799 --> 00:21:09,440
let's look at how we actually do the

528
00:21:09,440 --> 00:21:11,679
memory partitioning securely so the

529
00:21:11,679 --> 00:21:14,559
first thing the thing that's key here is

530
00:21:14,559 --> 00:21:16,960
that the gatekeeper so the code running

531
00:21:16,960 --> 00:21:19,360
on the acu authenticates the trampoline

532
00:21:19,360 --> 00:21:21,360
by using a secret token

533
00:21:21,360 --> 00:21:25,679
this token is generated randomly and is

534
00:21:25,679 --> 00:21:27,520
generated at the time for example and is

535
00:21:27,520 --> 00:21:29,120
shared between the monitor and the

536
00:21:29,120 --> 00:21:32,320
gatekeeper so only they know this token

537
00:21:32,320 --> 00:21:34,480
the in our implementation with a 64 bit

538
00:21:34,480 --> 00:21:36,640
wide token it could be larger but we

539
00:21:36,640 --> 00:21:38,880
find this to be sufficient

540
00:21:38,880 --> 00:21:40,320
and

541
00:21:40,320 --> 00:21:42,080
one of the most important aspects here

542
00:21:42,080 --> 00:21:44,880
is that while a zone is executing

543
00:21:44,880 --> 00:21:47,280
the token is stored on registers that

544
00:21:47,280 --> 00:21:50,000
are only accessible to el3

545
00:21:50,000 --> 00:21:52,799
and what this allows is for

546
00:21:52,799 --> 00:21:54,720
the

547
00:21:54,720 --> 00:21:56,880
to guarantee that the security l1 cannot

548
00:21:56,880 --> 00:21:59,360
modify the exit interface and it cannot

549
00:21:59,360 --> 00:22:00,880
do so because it doesn't know the

550
00:22:00,880 --> 00:22:02,320
secrets

551
00:22:02,320 --> 00:22:04,080
it's not stored in memory so it cannot

552
00:22:04,080 --> 00:22:05,679
access it

553
00:22:05,679 --> 00:22:08,480
okay so even from a design point of view

554
00:22:08,480 --> 00:22:11,520
using ppc like mechanisms which only

555
00:22:11,520 --> 00:22:14,720
works at the system bus level

556
00:22:14,720 --> 00:22:15,840
some

557
00:22:15,840 --> 00:22:16,720
issues

558
00:22:16,720 --> 00:22:18,640
are highlighted

559
00:22:18,640 --> 00:22:19,360
so

560
00:22:19,360 --> 00:22:20,720
the first thing is that the bbc only

561
00:22:20,720 --> 00:22:22,400
acts on the bus level right so this

562
00:22:22,400 --> 00:22:26,080
means that accesses are not

563
00:22:26,080 --> 00:22:28,960
to control accesses to the cache

564
00:22:28,960 --> 00:22:30,880
okay so let's see an illustration here

565
00:22:30,880 --> 00:22:32,559
to better understand the problem

566
00:22:32,559 --> 00:22:34,640
so this is what we would expect so we're

567
00:22:34,640 --> 00:22:37,760
running trampoline in for one we do some

568
00:22:37,760 --> 00:22:39,760
configuration and we want to mark this

569
00:22:39,760 --> 00:22:42,320
memory as not accessible

570
00:22:42,320 --> 00:22:44,320
okay so right now we have the core one

571
00:22:44,320 --> 00:22:46,000
executing and it tries to access the

572
00:22:46,000 --> 00:22:48,159
memory the memory region that we don't

573
00:22:48,159 --> 00:22:50,559
want the core to access and the ppc

574
00:22:50,559 --> 00:22:52,000
locks it

575
00:22:52,000 --> 00:22:54,640
however this is not how things work

576
00:22:54,640 --> 00:22:55,679
because

577
00:22:55,679 --> 00:22:58,240
the data regarding that memory vision

578
00:22:58,240 --> 00:23:00,080
can actually be in cache and if it's in

579
00:23:00,080 --> 00:23:02,000
cache when the core tries to access it

580
00:23:02,000 --> 00:23:03,840
it will do a cache hit and it will

581
00:23:03,840 --> 00:23:05,600
freely

582
00:23:05,600 --> 00:23:09,600
be free to access it as it will

583
00:23:09,600 --> 00:23:12,720
so how can we solve this problem

584
00:23:12,720 --> 00:23:14,799
well what we do is

585
00:23:14,799 --> 00:23:16,320
flush the

586
00:23:16,320 --> 00:23:18,320
caches to memory

587
00:23:18,320 --> 00:23:20,080
and this will result in the data in the

588
00:23:20,080 --> 00:23:23,360
cache being written to memory and the

589
00:23:23,360 --> 00:23:24,320
data

590
00:23:24,320 --> 00:23:26,559
the cache content is being erased and

591
00:23:26,559 --> 00:23:29,360
now when a car tries to access tries to

592
00:23:29,360 --> 00:23:31,600
access memory that is marked as

593
00:23:31,600 --> 00:23:34,399
non-accessible

594
00:23:34,880 --> 00:23:37,120
the ppc will actually trigger and block

595
00:23:37,120 --> 00:23:39,919
the axis so this is one of

596
00:23:39,919 --> 00:23:41,760
the first issue

597
00:23:41,760 --> 00:23:43,360
the second issue

598
00:23:43,360 --> 00:23:45,200
um will actually

599
00:23:45,200 --> 00:23:46,880
force us to hold

600
00:23:46,880 --> 00:23:50,000
cores on the same cluster

601
00:23:50,000 --> 00:23:51,919
and this is because we can differentiate

602
00:23:51,919 --> 00:23:54,080
between both axises of collocated

603
00:23:54,080 --> 00:23:56,559
cluster cores

604
00:23:56,559 --> 00:23:58,080
and this means that the access control

605
00:23:58,080 --> 00:24:00,159
policy applies to all cores the same so

606
00:24:00,159 --> 00:24:02,400
let's look at an illustration here

607
00:24:02,400 --> 00:24:05,039
again so we are now we have two cars one

608
00:24:05,039 --> 00:24:06,640
running the rich environment one

609
00:24:06,640 --> 00:24:08,400
executing the trampoline and tripling

610
00:24:08,400 --> 00:24:11,279
will actually will actually enter a zone

611
00:24:11,279 --> 00:24:13,760
so we configure the ppc and because we

612
00:24:13,760 --> 00:24:16,159
are entering a zone uh we want the

613
00:24:16,159 --> 00:24:19,760
normal world memory to not be accessible

614
00:24:19,760 --> 00:24:22,720
and the te starts executing so

615
00:24:22,720 --> 00:24:24,080
however we are still

616
00:24:24,080 --> 00:24:26,400
executing calls in the car zero

617
00:24:26,400 --> 00:24:29,360
regarding the normal world and

618
00:24:29,360 --> 00:24:31,360
when we the course heroes tries to

619
00:24:31,360 --> 00:24:33,919
access its memory it will not be able to

620
00:24:33,919 --> 00:24:34,880
do

621
00:24:34,880 --> 00:24:36,720
okay so this is the problem

622
00:24:36,720 --> 00:24:38,640
so what we must do is actually the

623
00:24:38,640 --> 00:24:40,799
trampoline must actually suspend all

624
00:24:40,799 --> 00:24:42,960
other cars in the cluster

625
00:24:42,960 --> 00:24:45,039
and only after the cars are suspended

626
00:24:45,039 --> 00:24:47,840
can we safely reconfigure the ppc

627
00:24:47,840 --> 00:24:52,000
and then proceed the execution

628
00:24:52,320 --> 00:24:54,400
okay so finally let's look at the

629
00:24:54,400 --> 00:24:56,559
execution flow of a call to the to a

630
00:24:56,559 --> 00:24:57,760
zone

631
00:24:57,760 --> 00:24:59,520
so the flow starts on the normal normal

632
00:24:59,520 --> 00:25:02,320
world a normal world will issue a secure

633
00:25:02,320 --> 00:25:04,880
monitor call

634
00:25:04,880 --> 00:25:06,159
it will

635
00:25:06,159 --> 00:25:08,400
be handled eventually by the trampoline

636
00:25:08,400 --> 00:25:10,159
and trampoline and gatekeeper will

637
00:25:10,159 --> 00:25:11,279
coordinate

638
00:25:11,279 --> 00:25:14,080
to lock or to unlock the ppc reconfigure

639
00:25:14,080 --> 00:25:16,480
it and lock it again and then

640
00:25:16,480 --> 00:25:18,080
the execution control will be handed

641
00:25:18,080 --> 00:25:20,559
over to the zone after the zone does

642
00:25:20,559 --> 00:25:22,320
what it's supposed to

643
00:25:22,320 --> 00:25:23,760
this one will return to the secure

644
00:25:23,760 --> 00:25:24,720
monitor

645
00:25:24,720 --> 00:25:26,080
the trampoline on the gatekeeper will

646
00:25:26,080 --> 00:25:28,000
coordinate again in order to unlock the

647
00:25:28,000 --> 00:25:30,240
pc reconfigure it and lock it again and

648
00:25:30,240 --> 00:25:31,840
then

649
00:25:31,840 --> 00:25:36,158
resume the execution on the normal world

650
00:25:36,400 --> 00:25:38,720
okay so these were the main design

651
00:25:38,720 --> 00:25:40,880
the main design aspects let's look now

652
00:25:40,880 --> 00:25:42,640
at some implementation

653
00:25:42,640 --> 00:25:45,120
instrumentation aspects

654
00:25:45,120 --> 00:25:48,080
our test pad is the nxp's imx

655
00:25:48,080 --> 00:25:49,679
8 mq

656
00:25:49,679 --> 00:25:52,240
we use its rdc as

657
00:25:52,240 --> 00:25:53,919
ppc this is the resource domain

658
00:25:53,919 --> 00:25:56,799
controller and we use its cortex m4

659
00:25:56,799 --> 00:25:59,840
built into the asusc as an ecu for

660
00:25:59,840 --> 00:26:02,240
software we leverage transformer as

661
00:26:02,240 --> 00:26:03,679
monitor

662
00:26:03,679 --> 00:26:06,400
and we use opti as a dee

663
00:26:06,400 --> 00:26:08,880
and for normal worlds we use a mixture

664
00:26:08,880 --> 00:26:11,679
of embedded linux and android to perform

665
00:26:11,679 --> 00:26:14,240
our tests

666
00:26:14,480 --> 00:26:16,320
there are a

667
00:26:16,320 --> 00:26:17,919
few implementation challenges that we

668
00:26:17,919 --> 00:26:19,200
have to overcome

669
00:26:19,200 --> 00:26:21,039
i'm not going to go over in detail but

670
00:26:21,039 --> 00:26:22,720
let's overview them

671
00:26:22,720 --> 00:26:24,320
so the first one is cross-court

672
00:26:24,320 --> 00:26:26,640
synchronization as you might have

673
00:26:26,640 --> 00:26:27,840
guessed from

674
00:26:27,840 --> 00:26:30,080
one of the previous examples so we must

675
00:26:30,080 --> 00:26:32,000
use synchronization primitives and then

676
00:26:32,000 --> 00:26:33,919
interrupt to make sure that all cores

677
00:26:33,919 --> 00:26:35,600
are halted before

678
00:26:35,600 --> 00:26:37,760
running a

679
00:26:37,760 --> 00:26:39,440
and the second challenge is required

680
00:26:39,440 --> 00:26:41,760
potential microarchitectural maintenance

681
00:26:41,760 --> 00:26:43,440
where we do

682
00:26:43,440 --> 00:26:46,640
cash maintenance and tlb maintenance and

683
00:26:46,640 --> 00:26:47,679
we

684
00:26:47,679 --> 00:26:51,200
have evaluated this issue

685
00:26:51,200 --> 00:26:53,360
deeply and we

686
00:26:53,360 --> 00:26:55,279
make sure that we have as little impact

687
00:26:55,279 --> 00:26:57,360
as possible

688
00:26:57,360 --> 00:27:02,960
facing our limitations then we use um

689
00:27:02,960 --> 00:27:04,840
the way we implement the dynamic is the

690
00:27:04,840 --> 00:27:06,799
reconfiguration

691
00:27:06,799 --> 00:27:08,320
is actually

692
00:27:08,320 --> 00:27:11,760
optimized in order to to diminish the

693
00:27:11,760 --> 00:27:14,799
time spent in reconfiguration

694
00:27:14,799 --> 00:27:16,799
and the last issue which is the most

695
00:27:16,799 --> 00:27:18,240
interesting one is how we handle

696
00:27:18,240 --> 00:27:21,360
exceptions at serial one exits

697
00:27:21,360 --> 00:27:24,399
most of the other three challenges of

698
00:27:24,399 --> 00:27:27,760
being somewhat handled or addressed by

699
00:27:27,760 --> 00:27:29,760
similar studies but the way we handle

700
00:27:29,760 --> 00:27:31,440
exceptions as material one is quite

701
00:27:31,440 --> 00:27:33,679
unique and we think you will enjoy

702
00:27:33,679 --> 00:27:35,919
knowing these details so

703
00:27:35,919 --> 00:27:37,440
we have two issues

704
00:27:37,440 --> 00:27:39,200
we must prevent crashes so let's start

705
00:27:39,200 --> 00:27:40,960
by looking at that

706
00:27:40,960 --> 00:27:43,440
so the first issue is that the tlb so

707
00:27:43,440 --> 00:27:45,360
the translation with a size buffer which

708
00:27:45,360 --> 00:27:46,840
contains

709
00:27:46,840 --> 00:27:48,000
how the

710
00:27:48,000 --> 00:27:49,520
memory virtual memory translates to

711
00:27:49,520 --> 00:27:50,960
physical memory may not have the

712
00:27:50,960 --> 00:27:53,039
required el3

713
00:27:53,039 --> 00:27:57,200
tlb entries and so when the zone exits

714
00:27:57,200 --> 00:27:59,760
the tlb will try to exit your trampoline

715
00:27:59,760 --> 00:28:01,440
it will not be able to map memory and

716
00:28:01,440 --> 00:28:03,679
we'll try to fetch page tables

717
00:28:03,679 --> 00:28:05,440
however remember that we marked the

718
00:28:05,440 --> 00:28:07,200
monitor memory which holds the page

719
00:28:07,200 --> 00:28:09,120
labels as not accessible

720
00:28:09,120 --> 00:28:10,880
and this results in a crash and the

721
00:28:10,880 --> 00:28:12,559
program will simply not

722
00:28:12,559 --> 00:28:14,080
will not continue since it can't

723
00:28:14,080 --> 00:28:15,679
translate

724
00:28:15,679 --> 00:28:18,559
the memory to run the code so this is

725
00:28:18,559 --> 00:28:21,039
the first issue

726
00:28:21,039 --> 00:28:24,080
the second issue is that

727
00:28:24,080 --> 00:28:25,039
we must

728
00:28:25,039 --> 00:28:27,039
keep some things in mind trampoline is

729
00:28:27,039 --> 00:28:29,520
read-only right

730
00:28:29,520 --> 00:28:31,200
and the ppc doesn't control cache

731
00:28:31,200 --> 00:28:33,760
accesses

732
00:28:33,840 --> 00:28:35,679
and so what this allows

733
00:28:35,679 --> 00:28:37,840
a malicious structure os to do

734
00:28:37,840 --> 00:28:41,520
is actually is to make a rift access

735
00:28:41,520 --> 00:28:44,720
which will fetch the memory to the cache

736
00:28:44,720 --> 00:28:46,640
and once in the cache the malicious os

737
00:28:46,640 --> 00:28:48,480
can modify it

738
00:28:48,480 --> 00:28:50,720
maliciously and

739
00:28:50,720 --> 00:28:51,679
in

740
00:28:51,679 --> 00:28:54,159
this case he can modify the code the l3

741
00:28:54,159 --> 00:28:56,640
code it will handle the exit

742
00:28:56,640 --> 00:28:59,200
and this will give him the attacker

743
00:28:59,200 --> 00:29:01,919
execution privileges at the l3 and which

744
00:29:01,919 --> 00:29:04,080
will allow them allow him to undo the

745
00:29:04,080 --> 00:29:06,480
access control policy

746
00:29:06,480 --> 00:29:08,480
okay so we have two issues like a crash

747
00:29:08,480 --> 00:29:10,640
because of clv and the

748
00:29:10,640 --> 00:29:12,799
accordion injection on the cache the way

749
00:29:12,799 --> 00:29:15,120
we solve them is by disabling the el3

750
00:29:15,120 --> 00:29:16,880
mmu

751
00:29:16,880 --> 00:29:19,120
so this stops the tlb

752
00:29:19,120 --> 00:29:21,039
misses because now we don't have

753
00:29:21,039 --> 00:29:23,600
translation

754
00:29:23,600 --> 00:29:26,559
enabled while we are executing a zone so

755
00:29:26,559 --> 00:29:28,880
there's no crash and

756
00:29:28,880 --> 00:29:31,840
on arm once once you disable the mmu the

757
00:29:31,840 --> 00:29:34,720
cache is bypassed so we are no longer no

758
00:29:34,720 --> 00:29:37,440
longer at risk of having of running

759
00:29:37,440 --> 00:29:39,279
injected codes

760
00:29:39,279 --> 00:29:41,840
however we must do an additional step

761
00:29:41,840 --> 00:29:45,360
with this we must invalidate the cache

762
00:29:45,360 --> 00:29:47,520
thus removing the malicious potentially

763
00:29:47,520 --> 00:29:49,520
malicious code on the cache before

764
00:29:49,520 --> 00:29:52,240
enabling the mmu okay so this were

765
00:29:52,240 --> 00:29:54,159
implementation

766
00:29:54,159 --> 00:29:56,320
aspects i hope you find them

767
00:29:56,320 --> 00:29:57,679
interesting now let's look at some

768
00:29:57,679 --> 00:30:00,080
evaluation

769
00:30:00,080 --> 00:30:02,159
starting by the performance we do some

770
00:30:02,159 --> 00:30:04,080
micro benchmarks and we leverage up the

771
00:30:04,080 --> 00:30:07,039
x test test suite this suite provides

772
00:30:07,039 --> 00:30:08,480
some benchmark tests

773
00:30:08,480 --> 00:30:11,679
storage sha and aes algorithms and it's

774
00:30:11,679 --> 00:30:13,520
also although it's not meant to be used

775
00:30:13,520 --> 00:30:16,000
as a benchmark the test suite actually

776
00:30:16,000 --> 00:30:17,360
exercises

777
00:30:17,360 --> 00:30:19,279
uh varying

778
00:30:19,279 --> 00:30:20,399
workloads

779
00:30:20,399 --> 00:30:22,480
or call types on the secure world and we

780
00:30:22,480 --> 00:30:23,679
find them

781
00:30:23,679 --> 00:30:25,919
we found them quite useful to understand

782
00:30:25,919 --> 00:30:28,000
how resonance impacts

783
00:30:28,000 --> 00:30:29,840
the city world workloads

784
00:30:29,840 --> 00:30:31,440
and one of the most interesting things

785
00:30:31,440 --> 00:30:33,120
for example if you look at the internal

786
00:30:33,120 --> 00:30:34,559
api

787
00:30:34,559 --> 00:30:37,120
a group of tests you see that's one of

788
00:30:37,120 --> 00:30:39,440
the most impacted so

789
00:30:39,440 --> 00:30:42,559
four times slower execution times and

790
00:30:42,559 --> 00:30:45,039
but if if we look at the embed ls tests

791
00:30:45,039 --> 00:30:46,559
we see that they are not

792
00:30:46,559 --> 00:30:48,480
affected as much

793
00:30:48,480 --> 00:30:50,399
what you can conclude what we conclude

794
00:30:50,399 --> 00:30:51,840
from from this test is that shorter

795
00:30:51,840 --> 00:30:53,679
execution times translate into higher

796
00:30:53,679 --> 00:30:55,360
overheads and

797
00:30:55,360 --> 00:30:57,440
to

798
00:30:57,440 --> 00:30:58,880
make sure that this was the case we

799
00:30:58,880 --> 00:31:00,159
actually

800
00:31:00,159 --> 00:31:02,000
delve deeper into this and we modified

801
00:31:02,000 --> 00:31:03,200
some tests

802
00:31:03,200 --> 00:31:06,240
and we arrive at the conclusion that

803
00:31:06,240 --> 00:31:09,519
for workloads having many small calls

804
00:31:09,519 --> 00:31:10,720
rules

805
00:31:10,720 --> 00:31:13,440
exhibit much higher overheads than

806
00:31:13,440 --> 00:31:16,240
workloads which have fewer but larger

807
00:31:16,240 --> 00:31:18,240
calls

808
00:31:18,240 --> 00:31:20,080
so this is one of the main interesting

809
00:31:20,080 --> 00:31:22,000
things we found

810
00:31:22,000 --> 00:31:24,000
we also wanted to look at your real

811
00:31:24,000 --> 00:31:26,399
world applications and we have here

812
00:31:26,399 --> 00:31:28,399
bitcoin wallet

813
00:31:28,399 --> 00:31:30,720
and this helps us evaluate some non high

814
00:31:30,720 --> 00:31:32,320
frequency workforce

815
00:31:32,320 --> 00:31:34,320
dca is actually quite realistic because

816
00:31:34,320 --> 00:31:37,360
it uses various key apis the way this

817
00:31:37,360 --> 00:31:39,440
has to set up we measured the program

818
00:31:39,440 --> 00:31:41,200
execution

819
00:31:41,200 --> 00:31:42,159
for each

820
00:31:42,159 --> 00:31:44,240
operation

821
00:31:44,240 --> 00:31:46,480
the main finding here uh the main system

822
00:31:46,480 --> 00:31:48,399
finding here is the corroboration of

823
00:31:48,399 --> 00:31:51,200
what we observed previously in that

824
00:31:51,200 --> 00:31:52,320
shorter

825
00:31:52,320 --> 00:31:53,519
operations

826
00:31:53,519 --> 00:31:55,279
will result in higher overheads for

827
00:31:55,279 --> 00:31:56,720
example if you look at the check which

828
00:31:56,720 --> 00:31:59,120
master key exists operation we see that

829
00:31:59,120 --> 00:32:01,760
overhead is supposed to

830
00:32:01,760 --> 00:32:04,159
over two times slow down but if you look

831
00:32:04,159 --> 00:32:06,880
at the sign transaction it's actually

832
00:32:06,880 --> 00:32:09,120
much smaller than that

833
00:32:09,120 --> 00:32:11,919
the second application is the rm

834
00:32:11,919 --> 00:32:15,519
and this helps us evaluate the impact on

835
00:32:15,519 --> 00:32:17,600
high frequency workloads

836
00:32:17,600 --> 00:32:20,240
the vrm application

837
00:32:20,240 --> 00:32:23,200
decrypts the video content on the te and

838
00:32:23,200 --> 00:32:25,120
then

839
00:32:25,120 --> 00:32:27,120
that is then made available to the

840
00:32:27,120 --> 00:32:30,320
normal world to present it to the user

841
00:32:30,320 --> 00:32:34,000
and we have measures for this both of

842
00:32:34,000 --> 00:32:35,760
these operations so we measure the t

843
00:32:35,760 --> 00:32:37,840
data decryption times which is on the

844
00:32:37,840 --> 00:32:39,360
left here

845
00:32:39,360 --> 00:32:42,000
and we observe uh one and a half times

846
00:32:42,000 --> 00:32:44,320
slow down

847
00:32:44,320 --> 00:32:46,000
and we also measure

848
00:32:46,000 --> 00:32:48,080
how the application is impacted where is

849
00:32:48,080 --> 00:32:50,559
zone by measuring the interval between

850
00:32:50,559 --> 00:32:53,919
data processing events

851
00:32:53,919 --> 00:32:56,799
because the data processing events

852
00:32:56,799 --> 00:32:58,960
the interval is much larger than the

853
00:32:58,960 --> 00:33:01,519
time it takes to decrypt the data

854
00:33:01,519 --> 00:33:03,519
we find that the user experience on

855
00:33:03,519 --> 00:33:06,159
their own drm workflows is not

856
00:33:06,159 --> 00:33:08,640
significantly affected finally

857
00:33:08,640 --> 00:33:10,320
we also wanted to evaluate things

858
00:33:10,320 --> 00:33:13,679
security-wise and what we did

859
00:33:13,679 --> 00:33:16,000
was first start by assuming that we have

860
00:33:16,000 --> 00:33:17,679
multiple zones with one trusted

861
00:33:17,679 --> 00:33:19,360
application for zone

862
00:33:19,360 --> 00:33:23,120
and we then looked at cves

863
00:33:23,120 --> 00:33:25,840
that are rated critical regarding to

864
00:33:25,840 --> 00:33:27,919
these and these reviews we got from our

865
00:33:27,919 --> 00:33:29,840
previous work we found that result

866
00:33:29,840 --> 00:33:32,000
mitigates against the most trusted os

867
00:33:32,000 --> 00:33:34,320
and application vulnerabilities

868
00:33:34,320 --> 00:33:35,760
and this is because it prevents

869
00:33:35,760 --> 00:33:38,240
attackers from gaining from escalating

870
00:33:38,240 --> 00:33:40,320
privileges and from compromising other

871
00:33:40,320 --> 00:33:42,720
parts of the system however result

872
00:33:42,720 --> 00:33:44,480
doesn't mitigate against poorly

873
00:33:44,480 --> 00:33:47,120
implemented ea for example visceral

874
00:33:47,120 --> 00:33:49,440
secrets hardware attacks cryptographic

875
00:33:49,440 --> 00:33:52,880
flaws or bootloader flaws

876
00:33:52,880 --> 00:33:54,960
sorry just uh i just wanted to say

877
00:33:54,960 --> 00:33:57,919
something before um and overall uh

878
00:33:57,919 --> 00:33:59,279
result uh

879
00:33:59,279 --> 00:34:01,440
mitigates 87 percent of the critical

880
00:34:01,440 --> 00:34:03,039
owner built it's a quite significant

881
00:34:03,039 --> 00:34:04,080
number

882
00:34:04,080 --> 00:34:07,279
so now i want to give words to professor

883
00:34:07,279 --> 00:34:09,359
pinto in order to conclude with some

884
00:34:09,359 --> 00:34:10,560
final thoughts

885
00:34:10,560 --> 00:34:12,399
thank you thank you a little bit so just

886
00:34:12,399 --> 00:34:14,399
sharing some final thoughts to wrap up

887
00:34:14,399 --> 00:34:16,719
this presentation uh so

888
00:34:16,719 --> 00:34:19,679
in the paper uh well the presentation

889
00:34:19,679 --> 00:34:22,079
and the focus of the paper is for

890
00:34:22,079 --> 00:34:25,839
platforms prior to armv8.4

891
00:34:25,839 --> 00:34:28,480
and the armv8.4 basically introduced

892
00:34:28,480 --> 00:34:31,599
this secure hypervisor mode and you may

893
00:34:31,599 --> 00:34:34,560
argue basically that this new hypervisor

894
00:34:34,560 --> 00:34:36,320
mode on the secure world can basically

895
00:34:36,320 --> 00:34:38,639
create isolation between the trusts uh

896
00:34:38,639 --> 00:34:40,399
the different trusted device and this is

897
00:34:40,399 --> 00:34:42,560
true but the fact that is not true is

898
00:34:42,560 --> 00:34:44,480
that this fundamental problem that we

899
00:34:44,480 --> 00:34:47,119
are fixing here is still here because

900
00:34:47,119 --> 00:34:50,079
the iper the secure hypervisor can also

901
00:34:50,079 --> 00:34:52,960
access the secure monitor and and vice

902
00:34:52,960 --> 00:34:54,960
versa and secure world components can

903
00:34:54,960 --> 00:34:58,000
still access the normal world so uh we

904
00:34:58,000 --> 00:35:00,000
believe and in the paper we discussed

905
00:35:00,000 --> 00:35:02,480
our rezone can still be

906
00:35:02,480 --> 00:35:05,200
used in these platforms from a different

907
00:35:05,200 --> 00:35:07,920
perspective in the arm v9 architecture

908
00:35:07,920 --> 00:35:10,720
that was introduced a few months ago

909
00:35:10,720 --> 00:35:12,560
arm already recognized these

910
00:35:12,560 --> 00:35:15,200
architectural flaws of existing in the

911
00:35:15,200 --> 00:35:17,200
previous architectures and

912
00:35:17,200 --> 00:35:20,960
in this new architecture this el3 uh is

913
00:35:20,960 --> 00:35:23,520
now a root world and is completely

914
00:35:23,520 --> 00:35:26,560
isolated from the other from the other

915
00:35:26,560 --> 00:35:28,960
walls from the secure world and this new

916
00:35:28,960 --> 00:35:30,400
realm world but

917
00:35:30,400 --> 00:35:32,480
uh still in this architecture realm

918
00:35:32,480 --> 00:35:34,960
world and secure world can access the

919
00:35:34,960 --> 00:35:37,280
normal world so in the paper we discuss

920
00:35:37,280 --> 00:35:41,599
how we envision reason helping in these

921
00:35:41,599 --> 00:35:42,560
new

922
00:35:42,560 --> 00:35:45,760
new archetype and still because rp9

923
00:35:45,760 --> 00:35:48,240
platforms are not available in

924
00:35:48,240 --> 00:35:50,000
particular because these specific

925
00:35:50,000 --> 00:35:52,480
architecture will be just available in

926
00:35:52,480 --> 00:35:55,200
rd9.2

927
00:35:55,200 --> 00:35:57,440
so in summary uh

928
00:35:57,440 --> 00:36:00,000
we have explained why trazantes have

929
00:36:00,000 --> 00:36:02,320
architectural flaws we have proposed

930
00:36:02,320 --> 00:36:04,800
rizon as a novel security architecture

931
00:36:04,800 --> 00:36:07,040
that address and fix and reduce the

932
00:36:07,040 --> 00:36:09,520
privilege of a te

933
00:36:09,520 --> 00:36:11,520
how we do that by leveraging interest on

934
00:36:11,520 --> 00:36:13,440
agnostic hardware primitives that we

935
00:36:13,440 --> 00:36:15,599
showed that are widespread available in

936
00:36:15,599 --> 00:36:18,000
in commercial off-the-shelf platforms

937
00:36:18,000 --> 00:36:19,040
uh

938
00:36:19,040 --> 00:36:22,000
in fact we implement an evaluatory zone

939
00:36:22,000 --> 00:36:24,079
in a real-world platform not only on

940
00:36:24,079 --> 00:36:27,200
emulators and in on the paper such as

941
00:36:27,200 --> 00:36:29,359
former work and

942
00:36:29,359 --> 00:36:30,480
we we

943
00:36:30,480 --> 00:36:33,359
conduct an extensive evaluation that

944
00:36:33,359 --> 00:36:35,760
that basically concludes that

945
00:36:35,760 --> 00:36:37,920
despite these games in terms of security

946
00:36:37,920 --> 00:36:40,079
the performance of real world

947
00:36:40,079 --> 00:36:42,640
applications is not significantly

948
00:36:42,640 --> 00:36:45,839
affected and we explained how resound

949
00:36:45,839 --> 00:36:48,440
could help mitigate these high severity

950
00:36:48,440 --> 00:36:50,240
vulnerabilities so

951
00:36:50,240 --> 00:36:53,040
i finish here the presentation and now

952
00:36:53,040 --> 00:36:55,680
david and i will be happy to address all

953
00:36:55,680 --> 00:36:57,839
all your questions thank you very much

954
00:36:57,839 --> 00:37:00,560
for your presentation uh we already have

955
00:37:00,560 --> 00:37:02,640
a question in the chatbot in the chat

956
00:37:02,640 --> 00:37:05,040
box uh how does your approach compare to

957
00:37:05,040 --> 00:37:07,280
multi-zone and c5s world guard

958
00:37:07,280 --> 00:37:10,720
approaches for risk 5.

959
00:37:10,960 --> 00:37:12,640
david do you want to take that or do you

960
00:37:12,640 --> 00:37:14,720
want me to take that i think you you're

961
00:37:14,720 --> 00:37:17,359
more qualified to answer that

962
00:37:17,359 --> 00:37:19,040
okay so

963
00:37:19,040 --> 00:37:20,640
the solutions that

964
00:37:20,640 --> 00:37:23,359
they they are trying to to compare is is

965
00:37:23,359 --> 00:37:25,839
not on r he's on risk five in particular

966
00:37:25,839 --> 00:37:28,400
i'm quite familiar with multi-zone and

967
00:37:28,400 --> 00:37:32,560
uh and basically the the what we tried

968
00:37:32,560 --> 00:37:35,119
here was to grab some ideas from the

969
00:37:35,119 --> 00:37:37,359
five wall because in the risk five world

970
00:37:37,359 --> 00:37:39,680
in fact the agros privilege mode is

971
00:37:39,680 --> 00:37:42,720
completely isolated uh from

972
00:37:42,720 --> 00:37:45,520
from from the the privilege levels that

973
00:37:45,520 --> 00:37:48,320
sits at top and in fact in risk five

974
00:37:48,320 --> 00:37:52,240
what we you have is a kind of component

975
00:37:52,240 --> 00:37:55,200
uh that is the pmp that

976
00:37:55,200 --> 00:37:58,640
we try to basically uh

977
00:37:58,640 --> 00:38:01,040
emulate with this trust on agnostic

978
00:38:01,040 --> 00:38:03,440
platform so to go to the point of your

979
00:38:03,440 --> 00:38:06,800
question so we were inspired with with

980
00:38:06,800 --> 00:38:09,359
work that we did on risk five and we

981
00:38:09,359 --> 00:38:11,839
came with these ideas and we apart from

982
00:38:11,839 --> 00:38:14,000
this observation of the existence of

983
00:38:14,000 --> 00:38:16,160
these system level hardware controllers

984
00:38:16,160 --> 00:38:19,200
in arm platforms and yeah we bring this

985
00:38:19,200 --> 00:38:20,560
solution so

986
00:38:20,560 --> 00:38:22,880
the comparison is they try to address

987
00:38:22,880 --> 00:38:25,119
the same problem and at the end of the

988
00:38:25,119 --> 00:38:27,119
day they don't suffer from those

989
00:38:27,119 --> 00:38:29,839
problems um i would like to thank you

990
00:38:29,839 --> 00:38:33,040
again for uh coming and

991
00:38:33,040 --> 00:38:35,200
for doing this great presentation i

992
00:38:35,200 --> 00:38:36,320
think people

993
00:38:36,320 --> 00:38:38,720
really liked it and i see that they are

994
00:38:38,720 --> 00:38:40,240
also thanking you

995
00:38:40,240 --> 00:38:42,960
um it would be nice if you would give a

996
00:38:42,960 --> 00:38:44,000
shout out

997
00:38:44,000 --> 00:38:46,000
to david and sandra on social media for

998
00:38:46,000 --> 00:38:48,480
the talk and hope to see you next week

999
00:38:48,480 --> 00:38:51,280
with another webinar thank you very much

1000
00:38:51,280 --> 00:38:52,640
again

1001
00:38:52,640 --> 00:38:53,839
thank you thank you again for the

1002
00:38:53,839 --> 00:38:55,680
invitation and thank you all for

1003
00:38:55,680 --> 00:38:58,240
attending our

1004
00:38:58,839 --> 00:39:02,490
talk um

1005
00:39:02,490 --> 00:39:05,620
[Music]

