1
00:00:12,480 --> 00:00:13,599
[Music]

2
00:00:13,599 --> 00:00:15,679
hey everyone thank you for joining us

3
00:00:15,679 --> 00:00:18,240
today my name is andrik and i'm part of

4
00:00:18,240 --> 00:00:20,320
the heartbeat or taiyo team and your

5
00:00:20,320 --> 00:00:21,680
host for today

6
00:00:21,680 --> 00:00:23,519
before we begin the webinar i would like

7
00:00:23,519 --> 00:00:26,320
to say we aim at sharing hardware

8
00:00:26,320 --> 00:00:28,480
security research and issues to the

9
00:00:28,480 --> 00:00:30,640
community and the industry via our

10
00:00:30,640 --> 00:00:33,440
hardware entire conferences webinars and

11
00:00:33,440 --> 00:00:34,559
trainings

12
00:00:34,559 --> 00:00:36,559
if you have some cool project that you

13
00:00:36,559 --> 00:00:38,960
have been working on in the past few

14
00:00:38,960 --> 00:00:40,640
months and would like to share with the

15
00:00:40,640 --> 00:00:42,719
community please do reach out to us we

16
00:00:42,719 --> 00:00:45,200
are always looking at interesting topics

17
00:00:45,200 --> 00:00:47,920
to share via our webinars

18
00:00:47,920 --> 00:00:50,879
also our hardware dot io usa conference

19
00:00:50,879 --> 00:00:53,199
and training dates have been announced

20
00:00:53,199 --> 00:00:55,280
training lists have been announced and

21
00:00:55,280 --> 00:00:57,360
if you would like to participate or join

22
00:00:57,360 --> 00:01:00,719
our cfp uh submission process we will be

23
00:01:00,719 --> 00:01:02,160
more than happy to have a discussion

24
00:01:02,160 --> 00:01:03,760
with you

25
00:01:03,760 --> 00:01:06,400
today i'm glad to invite slava who's a

26
00:01:06,400 --> 00:01:08,960
security researcher at checkpoint he has

27
00:01:08,960 --> 00:01:10,960
more than a decade year of experience in

28
00:01:10,960 --> 00:01:13,439
mobile and firmware security issues

29
00:01:13,439 --> 00:01:15,759
while also presenting his research at

30
00:01:15,759 --> 00:01:17,840
various international conferences around

31
00:01:17,840 --> 00:01:18,960
the world

32
00:01:18,960 --> 00:01:21,040
we all know hardware backdoors and

33
00:01:21,040 --> 00:01:24,479
supply chain is an issue in today's

34
00:01:24,479 --> 00:01:26,799
modern day life today slava is going to

35
00:01:26,799 --> 00:01:29,360
talk to us about his

36
00:01:29,360 --> 00:01:31,759
research and finding vulnerabilities he

37
00:01:31,759 --> 00:01:35,040
found in mediatek audio dsp firmware

38
00:01:35,040 --> 00:01:36,799
that are accessible from the android

39
00:01:36,799 --> 00:01:39,680
user space that would lead an attacker

40
00:01:39,680 --> 00:01:40,560
to

41
00:01:40,560 --> 00:01:42,880
gain local privilege escalation access

42
00:01:42,880 --> 00:01:44,479
rights

43
00:01:44,479 --> 00:01:46,560
so some house rules for today's webinar

44
00:01:46,560 --> 00:01:48,720
the presentation would be for 30 minutes

45
00:01:48,720 --> 00:01:51,119
followed by 10 minutes for q a if you

46
00:01:51,119 --> 00:01:53,200
have any questions please send them

47
00:01:53,200 --> 00:01:55,840
across via the zoom chat after slava

48
00:01:55,840 --> 00:01:57,920
completes his presentation we will take

49
00:01:57,920 --> 00:01:59,200
the questions

50
00:01:59,200 --> 00:02:01,360
also the webinar will be recorded and

51
00:02:01,360 --> 00:02:04,640
uploaded on our youtube channel

52
00:02:04,640 --> 00:02:07,920
over to use lava uh you can begin your

53
00:02:07,920 --> 00:02:10,318
session

54
00:02:12,640 --> 00:02:15,760
so hello everyone

55
00:02:15,760 --> 00:02:17,760
just a moment

56
00:02:17,760 --> 00:02:20,160
hello everyone thank you for taking the

57
00:02:20,160 --> 00:02:21,040
talk

58
00:02:21,040 --> 00:02:24,080
i am slava i have been doing mobile

59
00:02:24,080 --> 00:02:27,120
security research at checkpoint research

60
00:02:27,120 --> 00:02:29,360
for the past five years

61
00:02:29,360 --> 00:02:30,720
and the reverse engineering and

62
00:02:30,720 --> 00:02:33,920
vulnerability research is my daily work

63
00:02:33,920 --> 00:02:36,800
two years ago i did research on qualcomm

64
00:02:36,800 --> 00:02:39,920
uh dsp processors and i've discovered

65
00:02:39,920 --> 00:02:42,640
several interesting security issues in

66
00:02:42,640 --> 00:02:45,440
those days qualcomm was the leading chip

67
00:02:45,440 --> 00:02:48,640
manufacturer for mobile devices but the

68
00:02:48,640 --> 00:02:51,519
world is changing very quickly and now

69
00:02:51,519 --> 00:02:53,760
it's time to switch to the new leader

70
00:02:53,760 --> 00:02:55,360
it's mediatek

71
00:02:55,360 --> 00:02:56,959
so it was interesting for me to

72
00:02:56,959 --> 00:02:59,519
understand what mediatek proprietary

73
00:02:59,519 --> 00:03:01,599
software is and how

74
00:03:01,599 --> 00:03:04,000
system-on-chip components interact with

75
00:03:04,000 --> 00:03:05,519
each other

76
00:03:05,519 --> 00:03:07,440
in this study i will introduce the

77
00:03:07,440 --> 00:03:09,760
mediatek audio processor for the first

78
00:03:09,760 --> 00:03:12,720
time as a target for security research

79
00:03:12,720 --> 00:03:14,800
and i will show you a few zero-day

80
00:03:14,800 --> 00:03:17,040
vulnerabilities that could be used to

81
00:03:17,040 --> 00:03:19,920
attack the audio dsp from application

82
00:03:19,920 --> 00:03:22,879
processor running android and linux

83
00:03:22,879 --> 00:03:24,879
kernel

84
00:03:24,879 --> 00:03:27,360
so uh taiwan's mediatek has been the

85
00:03:27,360 --> 00:03:30,319
global smartphone chip leader since the

86
00:03:30,319 --> 00:03:33,200
third quarter of 2020

87
00:03:33,200 --> 00:03:35,280
as you can see the media tech stocks are

88
00:03:35,280 --> 00:03:38,400
embedded in approximately 37

89
00:03:38,400 --> 00:03:41,040
of all smartphones and iot devices in

90
00:03:41,040 --> 00:03:42,080
the world

91
00:03:42,080 --> 00:03:44,959
including high-end phones from xiaomi

92
00:03:44,959 --> 00:03:48,080
oppo realme and vivo that are highly

93
00:03:48,080 --> 00:03:50,080
popular in asia

94
00:03:50,080 --> 00:03:51,840
moreover according to the latest

95
00:03:51,840 --> 00:03:54,239
statistic and 43

96
00:03:54,239 --> 00:03:57,120
of all smartphones sold in the second

97
00:03:57,120 --> 00:03:59,439
quarter of 2021

98
00:03:59,439 --> 00:04:01,920
are based on mediatek so

99
00:04:01,920 --> 00:04:04,560
so if you want to target asian

100
00:04:04,560 --> 00:04:06,000
users

101
00:04:06,000 --> 00:04:08,239
pay attention to mediatek

102
00:04:08,239 --> 00:04:11,280
software do you know how many processors

103
00:04:11,280 --> 00:04:12,959
are on your mobile phone

104
00:04:12,959 --> 00:04:15,120
you might be surprised for example the

105
00:04:15,120 --> 00:04:18,560
mediatek demand city 1 000

106
00:04:18,560 --> 00:04:20,720
which is high-end but not the latest

107
00:04:20,720 --> 00:04:25,199
chip contains 8 cpu cores 9 gpu cores 5

108
00:04:25,199 --> 00:04:28,240
core image signal processor built in 5g

109
00:04:28,240 --> 00:04:31,440
modem processor and several dsps

110
00:04:31,440 --> 00:04:34,160
namely these are a special artificial

111
00:04:34,160 --> 00:04:36,960
intelligence processor unit apu and the

112
00:04:36,960 --> 00:04:38,960
audio dsp

113
00:04:38,960 --> 00:04:41,280
that i used to improve media performance

114
00:04:41,280 --> 00:04:43,840
and reduce cpu usage

115
00:04:43,840 --> 00:04:46,880
so stock is a complex thing right and

116
00:04:46,880 --> 00:04:49,120
most of the processors are managed by

117
00:04:49,120 --> 00:04:51,520
their own operating system and this is

118
00:04:51,520 --> 00:04:54,400
not android as many people think

119
00:04:54,400 --> 00:04:56,560
so today we are talking about mediatek's

120
00:04:56,560 --> 00:04:59,840
proprietary audio dsp and its operating

121
00:04:59,840 --> 00:05:01,919
system

122
00:05:01,919 --> 00:05:04,160
the major goal of our research is to

123
00:05:04,160 --> 00:05:06,639
find a way to attack the dsp from

124
00:05:06,639 --> 00:05:08,320
android and

125
00:05:08,320 --> 00:05:10,160
it will be right to start such

126
00:05:10,160 --> 00:05:12,400
investigation by understanding how

127
00:05:12,400 --> 00:05:15,199
android running on the cpu communicates

128
00:05:15,199 --> 00:05:17,199
with the audio processor

129
00:05:17,199 --> 00:05:19,759
obviously there must be a linux driver

130
00:05:19,759 --> 00:05:21,919
that waits for requests from android

131
00:05:21,919 --> 00:05:24,800
user space and then using some kind of

132
00:05:24,800 --> 00:05:26,800
interprocessor communication and

133
00:05:26,800 --> 00:05:29,199
forwards these requests to the dsp for

134
00:05:29,199 --> 00:05:31,759
processing

135
00:05:32,320 --> 00:05:35,199
in the research i used xiaomi redmi note

136
00:05:35,199 --> 00:05:37,919
9 5g smartphone based on the main city

137
00:05:37,919 --> 00:05:40,960
800 chip as a test device and there are

138
00:05:40,960 --> 00:05:43,440
only a few media related drivers on the

139
00:05:43,440 --> 00:05:46,479
xiaomi device so it was not difficult to

140
00:05:46,479 --> 00:05:48,479
find the driver that is responsible for

141
00:05:48,479 --> 00:05:50,880
communications with the dsp

142
00:05:50,880 --> 00:05:54,960
it has a clear name audio ep and

143
00:05:54,960 --> 00:05:57,440
then a simple search for the driver name

144
00:05:57,440 --> 00:05:59,280
in the vendor partition allowed me to

145
00:05:59,280 --> 00:06:02,080
find the mediatek api library audio

146
00:06:02,080 --> 00:06:04,800
point primary point mt so

147
00:06:04,800 --> 00:06:07,600
this library exports a single tone then

148
00:06:07,600 --> 00:06:09,759
can be used to send inter processor

149
00:06:09,759 --> 00:06:12,960
interrupt in ep messages to the audio

150
00:06:12,960 --> 00:06:14,080
dsp

151
00:06:14,080 --> 00:06:16,240
actually i use this library to explore

152
00:06:16,240 --> 00:06:18,400
the communication flow between the

153
00:06:18,400 --> 00:06:22,880
android user space and the linux kernel

154
00:06:22,880 --> 00:06:25,199
uh in my test pc code

155
00:06:25,199 --> 00:06:27,360
i have dealt with the driver eye octals

156
00:06:27,360 --> 00:06:29,840
directly without additional wrapping and

157
00:06:29,840 --> 00:06:31,440
on the slide you can see a few eye

158
00:06:31,440 --> 00:06:33,759
octals that are most interesting for

159
00:06:33,759 --> 00:06:35,360
this study

160
00:06:35,360 --> 00:06:37,440
there are three different eye octals for

161
00:06:37,440 --> 00:06:39,520
sending an ep message

162
00:06:39,520 --> 00:06:42,560
to the audio dsp and the difference lies

163
00:06:42,560 --> 00:06:45,039
is the way the payload data associated

164
00:06:45,039 --> 00:06:47,039
with the message is transmitted

165
00:06:47,039 --> 00:06:49,199
and the possible options are to transmit

166
00:06:49,199 --> 00:06:51,840
the payload as part of the message

167
00:06:51,840 --> 00:06:53,919
itself or to transmit the payload

168
00:06:53,919 --> 00:06:55,840
through a shared memory a registry to

169
00:06:55,840 --> 00:06:57,759
communicate between the application

170
00:06:57,759 --> 00:06:59,520
processor and the dsp

171
00:06:59,520 --> 00:07:01,440
also it's possible not to transmit the

172
00:07:01,440 --> 00:07:03,360
pilot at all

173
00:07:03,360 --> 00:07:05,840
the audio ep reg dma i octal can be used

174
00:07:05,840 --> 00:07:07,120
to request

175
00:07:07,120 --> 00:07:10,560
the dsp driver to allocate a region in

176
00:07:10,560 --> 00:07:13,599
the dedicated direct access memory dma

177
00:07:13,599 --> 00:07:15,520
that is shared between the application

178
00:07:15,520 --> 00:07:17,680
processor and the dsp

179
00:07:17,680 --> 00:07:20,720
in fact two memory regions i located per

180
00:07:20,720 --> 00:07:23,199
request and one is for transmitting data

181
00:07:23,199 --> 00:07:25,840
from the application processor to dsp

182
00:07:25,840 --> 00:07:27,120
and and

183
00:07:27,120 --> 00:07:29,520
the other in the opposite direction

184
00:07:29,520 --> 00:07:32,720
and as i have mentioned the dsp driver

185
00:07:32,720 --> 00:07:35,039
uses these regions to transmit the

186
00:07:35,039 --> 00:07:38,240
payload when calling the audi epicentrum

187
00:07:38,240 --> 00:07:41,039
i octel and get the results back from

188
00:07:41,039 --> 00:07:44,000
the dsp

189
00:07:44,000 --> 00:07:46,560
the ep message that we're able to send

190
00:07:46,560 --> 00:07:49,120
has a present structure and as i will

191
00:07:49,120 --> 00:07:51,680
show later on the dsp site there are

192
00:07:51,680 --> 00:07:54,720
several independent ep message handlers

193
00:07:54,720 --> 00:07:56,479
call it task scenes

194
00:07:56,479 --> 00:08:00,160
each task scene has its own unique area

195
00:08:00,160 --> 00:08:02,400
of responsibility and for example the

196
00:08:02,400 --> 00:08:04,960
phone call task controls speech

197
00:08:04,960 --> 00:08:06,400
enhancement

198
00:08:06,400 --> 00:08:09,120
so in the ep message we have to indicate

199
00:08:09,120 --> 00:08:12,240
what task scene is intended for and the

200
00:08:12,240 --> 00:08:15,360
message id which identifies the action

201
00:08:15,360 --> 00:08:17,199
we are asking to do

202
00:08:17,199 --> 00:08:19,280
in addition we can provide some data for

203
00:08:19,280 --> 00:08:21,520
processing and for this purpose three

204
00:08:21,520 --> 00:08:24,240
fields can be used and param one and

205
00:08:24,240 --> 00:08:27,199
param two double words and the payload

206
00:08:27,199 --> 00:08:29,919
the payload can be either a data blob

207
00:08:29,919 --> 00:08:32,479
associated with the message id or an

208
00:08:32,479 --> 00:08:35,039
object that points to the

209
00:08:35,039 --> 00:08:37,760
shared data

210
00:08:38,640 --> 00:08:40,479
now let's talk about the shared memory

211
00:08:40,479 --> 00:08:43,440
uh the audi epi reg dma i octal expects

212
00:08:43,440 --> 00:08:45,279
to receive an object of the present

213
00:08:45,279 --> 00:08:47,680
structure as argument and here we

214
00:08:47,680 --> 00:08:49,680
control the size of the allocated

215
00:08:49,680 --> 00:08:53,200
regions uh through the a2d size and d2a

216
00:08:53,200 --> 00:08:54,720
size fields

217
00:08:54,720 --> 00:08:56,720
for our study it means that we can

218
00:08:56,720 --> 00:08:59,839
provide the ep message payload as large

219
00:08:59,839 --> 00:09:02,480
as we want

220
00:09:03,279 --> 00:09:05,920
on the same device android kernel lock

221
00:09:05,920 --> 00:09:08,640
kindly provide us information about the

222
00:09:08,640 --> 00:09:10,959
global dna that

223
00:09:10,959 --> 00:09:12,640
is intended for communication between

224
00:09:12,640 --> 00:09:14,959
the cpu and the audio dsp

225
00:09:14,959 --> 00:09:17,360
so we know the base address and the size

226
00:09:17,360 --> 00:09:18,800
of the dma

227
00:09:18,800 --> 00:09:20,320
it's really strange to lock such

228
00:09:20,320 --> 00:09:23,120
information right and moreover when we

229
00:09:23,120 --> 00:09:25,200
allocate a shared region for a task

230
00:09:25,200 --> 00:09:27,440
scene the corresponding offset in the

231
00:09:27,440 --> 00:09:28,640
dma

232
00:09:28,640 --> 00:09:30,480
are also locked

233
00:09:30,480 --> 00:09:34,080
as you can see in the box snippet

234
00:09:34,080 --> 00:09:36,880
for the task scene 18 i have asked to

235
00:09:36,880 --> 00:09:40,480
locate 20 kilobytes for the a2d buffer

236
00:09:40,480 --> 00:09:43,760
and 19 kilobytes for the d2a

237
00:09:43,760 --> 00:09:47,440
the offset in the dma are also here

238
00:09:47,440 --> 00:09:50,320
and i will say the difficulty

239
00:09:50,320 --> 00:09:52,320
the physical address of the shared

240
00:09:52,320 --> 00:09:54,880
region calculated as the base physical

241
00:09:54,880 --> 00:09:58,080
address of the dma plus the offset of

242
00:09:58,080 --> 00:10:00,959
the region is persistent on the device

243
00:10:00,959 --> 00:10:02,320
that means that

244
00:10:02,320 --> 00:10:05,440
if after rebooting the mobile phone we

245
00:10:05,440 --> 00:10:08,560
allocate the same shared region we get

246
00:10:08,560 --> 00:10:11,279
the same physical address as before

247
00:10:11,279 --> 00:10:14,480
great we will use it later

248
00:10:14,480 --> 00:10:17,279
uh okay to clarify uh let's take a look

249
00:10:17,279 --> 00:10:19,200
at the following functions that i have

250
00:10:19,200 --> 00:10:23,120
used to send ep messages and first we

251
00:10:23,120 --> 00:10:26,240
create the rig dma object fill in the

252
00:10:26,240 --> 00:10:28,079
fields indicating that we need 4

253
00:10:28,079 --> 00:10:31,600
kilobyte memory for the message payload

254
00:10:31,600 --> 00:10:34,480
and call the audi ep reg dma i opted to

255
00:10:34,480 --> 00:10:37,200
allocate the shared region

256
00:10:37,200 --> 00:10:40,480
next we create an ep message and put in

257
00:10:40,480 --> 00:10:43,200
their places the task scene message id

258
00:10:43,200 --> 00:10:46,240
paramount param2 and the payload block

259
00:10:46,240 --> 00:10:49,279
received as arguments of the function

260
00:10:49,279 --> 00:10:52,320
and finally we call the audi epcent drum

261
00:10:52,320 --> 00:10:54,720
i octel to send the message and transmit

262
00:10:54,720 --> 00:10:56,560
the payload data through the shared

263
00:10:56,560 --> 00:10:58,880
region

264
00:10:58,959 --> 00:11:02,560
great now we know how to send an ep

265
00:11:02,560 --> 00:11:04,959
message to the audio this pin

266
00:11:04,959 --> 00:11:07,279
the next step of the research is to find

267
00:11:07,279 --> 00:11:10,480
the task scenes and ep message handlers

268
00:11:10,480 --> 00:11:13,040
in the dsp fimber

269
00:11:13,040 --> 00:11:15,920
uh audio this piece presented in the

270
00:11:15,920 --> 00:11:18,480
xiaomi factory update by a separate

271
00:11:18,480 --> 00:11:21,200
audio dsp image file and another way to

272
00:11:21,200 --> 00:11:24,320
get the image is to dump the audio dsp

273
00:11:24,320 --> 00:11:26,800
partition from a rooted device

274
00:11:26,800 --> 00:11:28,560
the image file has a proprietary

275
00:11:28,560 --> 00:11:30,160
structure but it can be easily

276
00:11:30,160 --> 00:11:31,600
reconstructed

277
00:11:31,600 --> 00:11:34,480
on my test device the dsp image contains

278
00:11:34,480 --> 00:11:37,200
nine partitions the third one and serve

279
00:11:37,200 --> 00:11:40,000
two partitions are certificates in the

280
00:11:40,000 --> 00:11:42,320
format that are used to verify the

281
00:11:42,320 --> 00:11:45,680
integrity of the hi53 partitions each

282
00:11:45,680 --> 00:11:48,399
partition has a header that stores the

283
00:11:48,399 --> 00:11:50,880
size and name of the partition

284
00:11:50,880 --> 00:11:53,519
the header starts with the magic which

285
00:11:53,519 --> 00:11:55,440
can be used to quickly locate the

286
00:11:55,440 --> 00:11:57,839
beginning of the partition in the file

287
00:11:57,839 --> 00:11:59,440
for example you can see on the slide

288
00:11:59,440 --> 00:12:02,399
that the header and date the size of the

289
00:12:02,399 --> 00:12:06,800
drum partition are 200 and 8 000

290
00:12:06,800 --> 00:12:08,399
respectively

291
00:12:08,399 --> 00:12:10,959
so we have all the information we need

292
00:12:10,959 --> 00:12:14,880
to cut the hifi3 content from the dsp

293
00:12:14,880 --> 00:12:17,120
image

294
00:12:17,120 --> 00:12:19,920
the iran and sram partitions are the

295
00:12:19,920 --> 00:12:22,720
code and data of the customized free

296
00:12:22,720 --> 00:12:25,279
rtos free real-time operating system the

297
00:12:25,279 --> 00:12:28,720
dram partition is the dynamic memory

298
00:12:28,720 --> 00:12:32,000
in the initial state it's almost empty

299
00:12:32,000 --> 00:12:34,480
let's take a closer look at the sram and

300
00:12:34,480 --> 00:12:37,360
the partition starts with the 400 zero

301
00:12:37,360 --> 00:12:39,839
bytes so there is no special special

302
00:12:39,839 --> 00:12:42,399
file format here and we are dealing with

303
00:12:42,399 --> 00:12:44,160
the raw data

304
00:12:44,160 --> 00:12:46,480
next about four kilobytes appear to be

305
00:12:46,480 --> 00:12:48,880
pointers to memory and mostly located

306
00:12:48,880 --> 00:12:51,360
after five six zero zero zero zero

307
00:12:51,360 --> 00:12:54,880
address and starting from uh three b f

308
00:12:54,880 --> 00:12:58,639
eight byte is the extensor bytecode

309
00:12:58,639 --> 00:12:59,839
okay

310
00:12:59,839 --> 00:13:02,079
now it's time to deal with the tensilic

311
00:13:02,079 --> 00:13:03,839
extensor okay

312
00:13:03,839 --> 00:13:06,000
imagine you want to create your oven

313
00:13:06,000 --> 00:13:08,480
highly specialized processor how to make

314
00:13:08,480 --> 00:13:09,760
it ultra fast

315
00:13:09,760 --> 00:13:11,519
the general approach is to achieve

316
00:13:11,519 --> 00:13:13,519
performance through a

317
00:13:13,519 --> 00:13:15,360
high clock rate

318
00:13:15,360 --> 00:13:17,120
but another way is to

319
00:13:17,120 --> 00:13:19,839
adopt the hardware to the algorithms

320
00:13:19,839 --> 00:13:22,399
running on it and mediatek has chosen

321
00:13:22,399 --> 00:13:23,839
the second way

322
00:13:23,839 --> 00:13:26,720
then silica processor platform allows

323
00:13:26,720 --> 00:13:29,440
chip manufacturers to extend the base

324
00:13:29,440 --> 00:13:31,760
extensor instruction served with custom

325
00:13:31,760 --> 00:13:34,000
instructions to optimize particular

326
00:13:34,000 --> 00:13:35,360
algorithms

327
00:13:35,360 --> 00:13:37,760
a hardware manufacturer can can add

328
00:13:37,760 --> 00:13:40,079
registers combine several operations in

329
00:13:40,079 --> 00:13:42,000
this single operation create an

330
00:13:42,000 --> 00:13:43,760
instruction to perform an operation

331
00:13:43,760 --> 00:13:44,639
across

332
00:13:44,639 --> 00:13:48,160
a cross multiple data or import several

333
00:13:48,160 --> 00:13:51,519
operations into one loan com code etc

334
00:13:51,519 --> 00:13:54,639
in short mediatek has been using the

335
00:13:54,639 --> 00:13:58,000
extended tensilic extensor architecture

336
00:13:58,000 --> 00:13:59,920
in their this piece

337
00:13:59,920 --> 00:14:02,000
and the customization of the processor

338
00:14:02,000 --> 00:14:04,560
design has made the audio processor

339
00:14:04,560 --> 00:14:06,880
unique

340
00:14:07,120 --> 00:14:09,600
so we need to find a way to analyze the

341
00:14:09,600 --> 00:14:12,399
extend support and first i have tried to

342
00:14:12,399 --> 00:14:14,079
write a script that would find the

343
00:14:14,079 --> 00:14:17,120
beginning of the functions and try to

344
00:14:17,120 --> 00:14:19,440
disassemble them theoretically it's

345
00:14:19,440 --> 00:14:21,519
possible because most function starts

346
00:14:21,519 --> 00:14:24,240
with the entry of code that allocates

347
00:14:24,240 --> 00:14:25,519
the stack

348
00:14:25,519 --> 00:14:27,199
but the solution doesn't work well

349
00:14:27,199 --> 00:14:28,959
because there are too many custom op

350
00:14:28,959 --> 00:14:31,920
codes that either is not aware of and

351
00:14:31,920 --> 00:14:34,399
this assembly gets stuck

352
00:14:34,399 --> 00:14:35,519
when it

353
00:14:35,519 --> 00:14:38,639
reaches an unknown or code and all i

354
00:14:38,639 --> 00:14:42,800
have got are snippets like this for me

355
00:14:42,800 --> 00:14:45,519
eventually i found uh another good

356
00:14:45,519 --> 00:14:48,320
solution and i have used the extensor

357
00:14:48,320 --> 00:14:51,680
sdk to help either the hi-fi

358
00:14:51,680 --> 00:14:53,199
this piece software development

359
00:14:53,199 --> 00:14:55,600
toolchain can be freely download from

360
00:14:55,600 --> 00:14:58,399
the tensilica tools website and

361
00:14:58,399 --> 00:15:00,399
xt devtools is a part of the

362
00:15:00,399 --> 00:15:03,440
installation packet i have used the xt

363
00:15:03,440 --> 00:15:06,240
object dump tool to create object dumps

364
00:15:06,240 --> 00:15:08,800
of the hi-53 partitions

365
00:15:08,800 --> 00:15:10,800
on the slide you can see the way i have

366
00:15:10,800 --> 00:15:14,240
dumped the audio dsp sram

367
00:15:14,240 --> 00:15:16,639
the object dump contains disassembly

368
00:15:16,639 --> 00:15:19,199
extensor cord and as shown on the slide

369
00:15:19,199 --> 00:15:21,600
the two knows the instructions were

370
00:15:21,600 --> 00:15:23,440
either got stuck

371
00:15:23,440 --> 00:15:26,800
apparently a mediatek has used the the

372
00:15:26,800 --> 00:15:29,759
default audio dsp template prepared by

373
00:15:29,759 --> 00:15:33,040
the uh thin silica as a basis for their

374
00:15:33,040 --> 00:15:36,000
processor and mediatek has added several

375
00:15:36,000 --> 00:15:38,160
particular instructions but their number

376
00:15:38,160 --> 00:15:40,800
is small compared to those offered by 10

377
00:15:40,800 --> 00:15:45,040
silica for the template dsp

378
00:15:45,519 --> 00:15:47,680
the object dump contains many errors and

379
00:15:47,680 --> 00:15:50,160
cannot be used as a main source for the

380
00:15:50,160 --> 00:15:53,040
research but it can help either to

381
00:15:53,040 --> 00:15:55,920
disassemble the hifi3 partitions much

382
00:15:55,920 --> 00:15:56,880
better

383
00:15:56,880 --> 00:15:59,120
the simplest solution is to use the

384
00:15:59,120 --> 00:16:02,160
object dump to add the disassembly as a

385
00:16:02,160 --> 00:16:05,040
command to all unrecognized instructions

386
00:16:05,040 --> 00:16:07,519
and either script can do the job and on

387
00:16:07,519 --> 00:16:09,120
this slide you can see

388
00:16:09,120 --> 00:16:11,120
what the disassembly code and either

389
00:16:11,120 --> 00:16:13,120
navigation bar looks like after applying

390
00:16:13,120 --> 00:16:14,160
the dump

391
00:16:14,160 --> 00:16:15,519
almost all

392
00:16:15,519 --> 00:16:17,839
code chunks were recognized

393
00:16:17,839 --> 00:16:19,360
it should be noted that most of the

394
00:16:19,360 --> 00:16:21,839
firmware functions

395
00:16:21,839 --> 00:16:24,720
code to look debug information and a

396
00:16:24,720 --> 00:16:27,600
local message contain includes among

397
00:16:27,600 --> 00:16:29,600
other things the name of the current

398
00:16:29,600 --> 00:16:32,560
function so mediatek has given us

399
00:16:32,560 --> 00:16:34,800
self-described function names and the

400
00:16:34,800 --> 00:16:37,440
ability to quickly search for functions

401
00:16:37,440 --> 00:16:40,480
in the code great

402
00:16:40,639 --> 00:16:41,759
so well

403
00:16:41,759 --> 00:16:44,000
we found the way to research the audio

404
00:16:44,000 --> 00:16:46,880
dsp fimber now let's take a look at its

405
00:16:46,880 --> 00:16:48,000
content

406
00:16:48,000 --> 00:16:50,480
the mediatek audio dsp operating system

407
00:16:50,480 --> 00:16:51,440
is an

408
00:16:51,440 --> 00:16:54,320
adopted version of the free rtos

409
00:16:54,320 --> 00:16:56,959
mediatek has used the third party kernel

410
00:16:56,959 --> 00:16:59,440
and implemented audio and messaging

411
00:16:59,440 --> 00:17:02,800
logic on top of it

412
00:17:02,800 --> 00:17:04,799
the dsp operating system creates a

413
00:17:04,799 --> 00:17:07,839
number of audio tasks at startup and

414
00:17:07,839 --> 00:17:10,640
associates them with scene ids

415
00:17:10,640 --> 00:17:13,039
and they create all audio task function

416
00:17:13,039 --> 00:17:15,039
is a factory uh

417
00:17:15,039 --> 00:17:16,880
where we can find all supported tasks

418
00:17:16,880 --> 00:17:20,400
and scene ids and on the slide i i have

419
00:17:20,400 --> 00:17:23,359
listed the tasks running on my test

420
00:17:23,359 --> 00:17:25,679
xiaomi device and i i've also

421
00:17:25,679 --> 00:17:28,079
highlighted the tasks i have found

422
00:17:28,079 --> 00:17:30,639
vulnerable

423
00:17:31,440 --> 00:17:34,559
okay the audib linux driver does not

424
00:17:34,559 --> 00:17:36,880
communicate with audio dsp directly

425
00:17:36,880 --> 00:17:38,640
instead uh

426
00:17:38,640 --> 00:17:41,200
it forwards ep messages to the system

427
00:17:41,200 --> 00:17:44,000
control processor scp by adding them to

428
00:17:44,000 --> 00:17:45,440
the cpq

429
00:17:45,440 --> 00:17:46,400
and

430
00:17:46,400 --> 00:17:49,840
the dp operating system registers

431
00:17:49,840 --> 00:17:51,039
a scp

432
00:17:51,039 --> 00:17:54,400
dispatcher to receive aud messages from

433
00:17:54,400 --> 00:17:56,000
this cp

434
00:17:56,000 --> 00:17:59,600
each audio task is presented in the dcp

435
00:17:59,600 --> 00:18:02,160
operating system by a task object that

436
00:18:02,160 --> 00:18:04,799
among other things contains a pointer to

437
00:18:04,799 --> 00:18:06,880
a receive message function

438
00:18:06,880 --> 00:18:10,000
this cp message dispatcher calls this

439
00:18:10,000 --> 00:18:12,640
function when a new ep message arrives

440
00:18:12,640 --> 00:18:15,520
and the ep message is passed

441
00:18:15,520 --> 00:18:18,880
to the function as the second argument

442
00:18:18,880 --> 00:18:20,880
the received message functions are what

443
00:18:20,880 --> 00:18:22,960
we are looking for and this is where

444
00:18:22,960 --> 00:18:26,480
audio tasks begin to handle ep messages

445
00:18:26,480 --> 00:18:28,720
sent from the android side

446
00:18:28,720 --> 00:18:29,600
and

447
00:18:29,600 --> 00:18:31,760
but after a quick look at the code i see

448
00:18:31,760 --> 00:18:32,960
that most

449
00:18:32,960 --> 00:18:35,679
most tasks other than the phone call of

450
00:18:35,679 --> 00:18:38,400
load controller and daemon and

451
00:18:38,400 --> 00:18:40,160
use the same

452
00:18:40,160 --> 00:18:42,160
task common receive message function

453
00:18:42,160 --> 00:18:44,720
only the presented five functions uh

454
00:18:44,720 --> 00:18:47,280
parse ep messages and this is where i

455
00:18:47,280 --> 00:18:49,840
have research for the security issues

456
00:18:49,840 --> 00:18:53,120
i mainly mainly review these functions

457
00:18:53,120 --> 00:18:55,120
and discovered several vulnerabilities

458
00:18:55,120 --> 00:18:57,679
that could be exploited to attack the

459
00:18:57,679 --> 00:18:59,679
dsp from android

460
00:18:59,679 --> 00:19:02,960
i will show you some details

461
00:19:03,280 --> 00:19:05,120
this vulnerability is related to all

462
00:19:05,120 --> 00:19:07,440
common audio tasks and when processing

463
00:19:07,440 --> 00:19:10,160
an ep message this id6 and the task

464
00:19:10,160 --> 00:19:12,400
common task loop function copies the

465
00:19:12,400 --> 00:19:14,559
message payload into

466
00:19:14,559 --> 00:19:17,200
the a to d share field of the common

467
00:19:17,200 --> 00:19:20,640
task object and the message param1 is

468
00:19:20,640 --> 00:19:23,200
used as the number of bytes to copy

469
00:19:23,200 --> 00:19:25,919
the check that the param1 is not larger

470
00:19:25,919 --> 00:19:29,520
than the a2g share field size is emitted

471
00:19:29,520 --> 00:19:30,799
and hence

472
00:19:30,799 --> 00:19:33,360
that payload data overwrites the heat

473
00:19:33,360 --> 00:19:36,160
memory after the a2d share

474
00:19:36,160 --> 00:19:38,480
when the load size is greater than 20

475
00:19:38,480 --> 00:19:39,600
bytes

476
00:19:39,600 --> 00:19:41,200
on the slide you can see

477
00:19:41,200 --> 00:19:43,840
the vulnerable

478
00:19:43,840 --> 00:19:46,880
the following call of the send ep dma

479
00:19:46,880 --> 00:19:50,080
function from android overwrites the dsp

480
00:19:50,080 --> 00:19:53,200
memory and causes a crash

481
00:19:53,200 --> 00:19:56,960
here i asked to copy 600 bytes

482
00:19:56,960 --> 00:19:59,440
we don't have the crash damp dump but

483
00:19:59,440 --> 00:20:02,080
the android kernel lock contains the

484
00:20:02,080 --> 00:20:04,799
crash address

485
00:20:05,280 --> 00:20:07,280
okay this is the second

486
00:20:07,280 --> 00:20:09,840
right for vulnerability and the task

487
00:20:09,840 --> 00:20:13,120
audio task uh loop function of the demon

488
00:20:13,120 --> 00:20:14,400
task

489
00:20:14,400 --> 00:20:15,840
upon receiving

490
00:20:15,840 --> 00:20:18,640
an ep message with the id seven calls

491
00:20:18,640 --> 00:20:21,440
the initial main core function it copies

492
00:20:21,440 --> 00:20:24,320
the message uh uh payload to an internal

493
00:20:24,320 --> 00:20:26,400
heat based buffer using the parallel one

494
00:20:26,400 --> 00:20:27,440
as

495
00:20:27,440 --> 00:20:29,520
the number of bytes to copy and the

496
00:20:29,520 --> 00:20:31,760
function uh the function has a check

497
00:20:31,760 --> 00:20:34,880
that the parallel one is less than e0

498
00:20:34,880 --> 00:20:37,440
but the destination buffer is 20 bytes

499
00:20:37,440 --> 00:20:40,799
and so s0 bytes can be overwritten

500
00:20:40,799 --> 00:20:43,919
uh to page the dsp heap this controlled

501
00:20:43,919 --> 00:20:46,559
values it's enough to send a relevant ep

502
00:20:46,559 --> 00:20:48,559
message to the demon scene

503
00:20:48,559 --> 00:20:51,440
occurring they pay load as part of the

504
00:20:51,440 --> 00:20:54,240
message itself

505
00:20:54,799 --> 00:20:57,360
this is the third one vulnerability when

506
00:20:57,360 --> 00:20:59,799
processing an ep message with id

507
00:20:59,799 --> 00:21:02,960
203 the task common task loop function

508
00:21:02,960 --> 00:21:03,840
calls

509
00:21:03,840 --> 00:21:06,640
the get audio buffer from message to

510
00:21:06,640 --> 00:21:08,799
extract the audio buffer from the

511
00:21:08,799 --> 00:21:12,559
physical memory addressed by the

512
00:21:12,559 --> 00:21:13,760
param2

513
00:21:13,760 --> 00:21:16,880
and next this buffer is passed uh passed

514
00:21:16,880 --> 00:21:19,360
as an argument to the audisp hardware

515
00:21:19,360 --> 00:21:21,840
open up function that copies this audio

516
00:21:21,840 --> 00:21:24,320
buffer to a static array

517
00:21:24,320 --> 00:21:27,200
the field at offset 54 in the audio

518
00:21:27,200 --> 00:21:30,400
buffer is used as the array index

519
00:21:30,400 --> 00:21:32,799
there is no overflow check for the index

520
00:21:32,799 --> 00:21:34,880
uh value so

521
00:21:34,880 --> 00:21:36,000
if we

522
00:21:36,000 --> 00:21:38,799
can control the audio buffer we can

523
00:21:38,799 --> 00:21:40,080
provide an

524
00:21:40,080 --> 00:21:42,880
arbitrary index to overwrite a portion

525
00:21:42,880 --> 00:21:44,960
of the data segment

526
00:21:44,960 --> 00:21:49,120
after the array this controller values

527
00:21:49,120 --> 00:21:52,240
to open the audio buffer and i mentioned

528
00:21:52,240 --> 00:21:54,559
we can send an ep message to the dsp

529
00:21:54,559 --> 00:21:56,880
through the shared dma region and point

530
00:21:56,880 --> 00:21:59,280
the parameter 2 to the physical memory

531
00:21:59,280 --> 00:22:01,760
where the payload is located

532
00:22:01,760 --> 00:22:02,640
yes

533
00:22:02,640 --> 00:22:04,720
we know the physical address of the

534
00:22:04,720 --> 00:22:05,919
payload

535
00:22:05,919 --> 00:22:08,240
as i have mentioned the physical address

536
00:22:08,240 --> 00:22:10,559
of the shared region is permanent on the

537
00:22:10,559 --> 00:22:14,000
device and we know this address from the

538
00:22:14,000 --> 00:22:16,240
kernel log

539
00:22:16,240 --> 00:22:19,120
the code on this slide reboots my test

540
00:22:19,120 --> 00:22:21,200
phone

541
00:22:21,200 --> 00:22:22,000
okay

542
00:22:22,000 --> 00:22:22,880
well

543
00:22:22,880 --> 00:22:25,600
we have compromised the audio display

544
00:22:25,600 --> 00:22:28,400
but we need to find a way to attack the

545
00:22:28,400 --> 00:22:30,480
android hardware abstraction level

546
00:22:30,480 --> 00:22:32,640
android hull from an unprivileged

547
00:22:32,640 --> 00:22:34,720
application to make to make the

548
00:22:34,720 --> 00:22:36,799
end-to-end flow

549
00:22:36,799 --> 00:22:38,880
we know how to trigger vulnerabilities

550
00:22:38,880 --> 00:22:42,000
in the audio dsp using the audi ep

551
00:22:42,000 --> 00:22:45,280
driver eye octants but unfortunately an

552
00:22:45,280 --> 00:22:47,520
unprivileged android application has no

553
00:22:47,520 --> 00:22:49,280
permission to communicate with this

554
00:22:49,280 --> 00:22:50,320
driver

555
00:22:50,320 --> 00:22:51,840
s linux

556
00:22:51,840 --> 00:22:54,000
allows access to the audio ep device

557
00:22:54,000 --> 00:22:56,799
object from the factory meta test and

558
00:22:56,799 --> 00:22:59,679
mtk hull audio contexts only

559
00:22:59,679 --> 00:23:02,880
so we need to exploit the mediatek hull

560
00:23:02,880 --> 00:23:05,679
to access the dsp driver from under the

561
00:23:05,679 --> 00:23:09,840
mtk hull audio is in linux context

562
00:23:10,720 --> 00:23:12,880
while looking for a way to attack the

563
00:23:12,880 --> 00:23:14,400
android hull

564
00:23:14,400 --> 00:23:16,640
i have found several dangerous audio

565
00:23:16,640 --> 00:23:18,720
settings implemented by mediatek for

566
00:23:18,720 --> 00:23:21,360
debugging purposes a third-party android

567
00:23:21,360 --> 00:23:24,080
application can abuse these settings to

568
00:23:24,080 --> 00:23:26,559
attack mediatek hull libraries

569
00:23:26,559 --> 00:23:28,720
android documentation states that the

570
00:23:28,720 --> 00:23:31,360
audio manager provides access to the

571
00:23:31,360 --> 00:23:34,000
volume and ring remote control an

572
00:23:34,000 --> 00:23:36,400
android application can bind the audio

573
00:23:36,400 --> 00:23:39,280
service and then use the set parameters

574
00:23:39,280 --> 00:23:41,679
method of the audio manager to configure

575
00:23:41,679 --> 00:23:43,120
the hardware

576
00:23:43,120 --> 00:23:45,919
a device manufacturer can add its own

577
00:23:45,919 --> 00:23:48,320
audio settings and keep

578
00:23:48,320 --> 00:23:50,880
track of their changes as

579
00:23:50,880 --> 00:23:54,480
mediatek provides proprietary parameters

580
00:23:54,480 --> 00:23:57,200
to configure the oris's high libraries

581
00:23:57,200 --> 00:23:59,600
the audio point primary pointing t so

582
00:23:59,600 --> 00:24:02,559
library is responsible for parsing and

583
00:24:02,559 --> 00:24:06,799
handling such proprietary settings

584
00:24:06,960 --> 00:24:09,520
on the slide you can see a parameter

585
00:24:09,520 --> 00:24:11,760
that can be used to enable logging of

586
00:24:11,760 --> 00:24:13,840
speech processing information the

587
00:24:13,840 --> 00:24:15,760
parameter stream contains the

588
00:24:15,760 --> 00:24:18,080
information about the target subsystem

589
00:24:18,080 --> 00:24:20,400
to handle the command it can be hull or

590
00:24:20,400 --> 00:24:21,360
disp

591
00:24:21,360 --> 00:24:23,520
the oris is a house scenario in the

592
00:24:23,520 --> 00:24:25,120
command key that

593
00:24:25,120 --> 00:24:29,279
identifies the affected heil library and

594
00:24:29,279 --> 00:24:31,760
the common name and its argument to

595
00:24:31,760 --> 00:24:33,840
identify the action

596
00:24:33,840 --> 00:24:37,120
the origin configuration xml defines all

597
00:24:37,120 --> 00:24:39,440
supported oris scenarios and command

598
00:24:39,440 --> 00:24:41,679
keys

599
00:24:41,679 --> 00:24:44,720
here i i have tried to combine all

600
00:24:44,720 --> 00:24:47,279
accepted audio parameters uh the most

601
00:24:47,279 --> 00:24:50,000
interesting part is the common string

602
00:24:50,000 --> 00:24:50,880
and

603
00:24:50,880 --> 00:24:53,520
on my test device i have found nine

604
00:24:53,520 --> 00:24:54,720
supported

605
00:24:54,720 --> 00:24:56,559
comments

606
00:24:56,559 --> 00:24:58,480
most of the comments are interesting for

607
00:24:58,480 --> 00:25:01,440
us in terms of information leak but i

608
00:25:01,440 --> 00:25:03,919
want to pay attention only to the param

609
00:25:03,919 --> 00:25:06,880
file command that allows us to set the

610
00:25:06,880 --> 00:25:10,000
location of the configuration file

611
00:25:10,000 --> 00:25:12,720
related to a particular oversys high

612
00:25:12,720 --> 00:25:15,600
library for example an unprivileged

613
00:25:15,600 --> 00:25:18,000
android application can customize the

614
00:25:18,000 --> 00:25:21,600
vip fv audio so hull library provided by

615
00:25:21,600 --> 00:25:22,880
xiaomi

616
00:25:22,880 --> 00:25:24,960
by setting the parameter

617
00:25:24,960 --> 00:25:27,039
shown on the slide

618
00:25:27,039 --> 00:25:30,080
note that generally android vendors do

619
00:25:30,080 --> 00:25:32,720
not care about validating configuration

620
00:25:32,720 --> 00:25:34,559
files

621
00:25:34,559 --> 00:25:37,039
properly because there are

622
00:25:37,039 --> 00:25:38,159
no

623
00:25:38,159 --> 00:25:39,919
because they are not available to

624
00:25:39,919 --> 00:25:41,520
unprivileged users

625
00:25:41,520 --> 00:25:43,279
but in our case we control the

626
00:25:43,279 --> 00:25:45,279
configuration files the hull

627
00:25:45,279 --> 00:25:48,640
configuration becomes an attack vector

628
00:25:48,640 --> 00:25:51,279
and we'll format a config file it could

629
00:25:51,279 --> 00:25:54,080
be used to crash an origins library

630
00:25:54,080 --> 00:25:55,840
which could lead to local privileges

631
00:25:55,840 --> 00:25:57,440
collision

632
00:25:57,440 --> 00:25:59,840
actually this is all i have the right to

633
00:25:59,840 --> 00:26:01,600
tell you about this vulnerability i

634
00:26:01,600 --> 00:26:05,760
can't share more for ethical reasons

635
00:26:05,760 --> 00:26:08,320
well to summarize uh

636
00:26:08,320 --> 00:26:10,400
in in this research we have looked at

637
00:26:10,400 --> 00:26:14,080
mediatek audio dsp as an attack target

638
00:26:14,080 --> 00:26:16,720
an unprivileged android application can

639
00:26:16,720 --> 00:26:19,360
attack the mediatek hull it has been

640
00:26:19,360 --> 00:26:22,960
able to send messages to the android uh

641
00:26:22,960 --> 00:26:24,799
to the audio display

642
00:26:24,799 --> 00:26:26,320
ml format

643
00:26:26,320 --> 00:26:29,039
ep message could be used uh by an

644
00:26:29,039 --> 00:26:31,600
attacker to execute and hide malicious

645
00:26:31,600 --> 00:26:33,760
code in the dsp fimber

646
00:26:33,760 --> 00:26:36,240
and since the dsp operating system has

647
00:26:36,240 --> 00:26:39,279
access to the audio data flow

648
00:26:39,279 --> 00:26:41,440
the attack on the dsp could be used to

649
00:26:41,440 --> 00:26:44,320
eavesdrop on the user and

650
00:26:44,320 --> 00:26:46,720
since the dsp operating system works

651
00:26:46,720 --> 00:26:50,000
directly with physical memory it it will

652
00:26:50,000 --> 00:26:52,000
be nice to research how to attack

653
00:26:52,000 --> 00:26:54,320
android kernel from the audio dsp and

654
00:26:54,320 --> 00:26:56,000
try to obtain

655
00:26:56,000 --> 00:26:59,279
root rights on the device

656
00:26:59,279 --> 00:27:01,679
these are the mitigations to mitigate

657
00:27:01,679 --> 00:27:04,880
the described audio configuration issue

658
00:27:04,880 --> 00:27:07,200
mediatek has decided to remove the

659
00:27:07,200 --> 00:27:11,840
ability to use the param file command

660
00:27:11,840 --> 00:27:13,760
via the audio manager in the release

661
00:27:13,760 --> 00:27:16,320
build of android and

662
00:27:16,320 --> 00:27:18,720
the page was published in the mediatek

663
00:27:18,720 --> 00:27:22,159
security built in in december

664
00:27:22,159 --> 00:27:23,600
2020

665
00:27:23,600 --> 00:27:25,919
and all the vulnerabilities i have

666
00:27:25,919 --> 00:27:27,919
presented today have been fixed by

667
00:27:27,919 --> 00:27:31,360
mediatek in october

668
00:27:31,520 --> 00:27:33,440
actually thank you

669
00:27:33,440 --> 00:27:36,000
for your attention and you can find many

670
00:27:36,000 --> 00:27:38,159
good security reasons on the checkpoint

671
00:27:38,159 --> 00:27:39,200
research

672
00:27:39,200 --> 00:27:40,640
blog

673
00:27:40,640 --> 00:27:41,679
thank you

674
00:27:41,679 --> 00:27:45,520
yeah uh thank you so much lava uh

675
00:27:45,520 --> 00:27:46,960
and if you have any more questions we'll

676
00:27:46,960 --> 00:27:48,880
also send it across

677
00:27:48,880 --> 00:27:50,799
on the youtube channel when we release

678
00:27:50,799 --> 00:27:52,799
this video and we will reach out to

679
00:27:52,799 --> 00:27:55,360
slava for answering them as well

680
00:27:55,360 --> 00:27:57,520
thank you so much everybody

681
00:27:57,520 --> 00:28:00,520
bye

