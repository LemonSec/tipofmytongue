1
00:00:12,480 --> 00:00:14,240
[Music]

2
00:00:14,240 --> 00:00:16,239
welcome everyone and thank you for

3
00:00:16,239 --> 00:00:18,560
joining us this afternoon i'm andrea and

4
00:00:18,560 --> 00:00:21,039
i will be your host for today's session

5
00:00:21,039 --> 00:00:22,960
i'm glad to welcome today suleish who is

6
00:00:22,960 --> 00:00:25,439
the executive director at secure systems

7
00:00:25,439 --> 00:00:27,599
research center in tii technology

8
00:00:27,599 --> 00:00:29,920
innovation institute his research

9
00:00:29,920 --> 00:00:32,800
focuses on zero trust security for socs

10
00:00:32,800 --> 00:00:34,640
and he leads a team to build an open

11
00:00:34,640 --> 00:00:37,520
source soc advancing security research

12
00:00:37,520 --> 00:00:39,440
and ib development

13
00:00:39,440 --> 00:00:41,680
in today's presentation suresh will

14
00:00:41,680 --> 00:00:43,760
present his work applying zero trust

15
00:00:43,760 --> 00:00:45,760
principles to building a secure risk

16
00:00:45,760 --> 00:00:48,079
five system

17
00:00:48,079 --> 00:00:49,600
now i would like to invite you to start

18
00:00:49,600 --> 00:00:52,719
your presentation thank you

19
00:00:52,719 --> 00:00:56,719
it's my pleasure so um thank you

20
00:00:56,719 --> 00:00:58,879
for the opportunity

21
00:00:58,879 --> 00:01:00,320
and uh

22
00:01:00,320 --> 00:01:02,559
my name is suresh and

23
00:01:02,559 --> 00:01:05,199
i work in tii it's a technology

24
00:01:05,199 --> 00:01:06,720
innovation institute

25
00:01:06,720 --> 00:01:09,040
in abu dhabi so today we are going to

26
00:01:09,040 --> 00:01:10,880
talk about

27
00:01:10,880 --> 00:01:13,439
applying zero trust principles and

28
00:01:13,439 --> 00:01:16,640
building a secure risk five system

29
00:01:16,640 --> 00:01:19,520
um and uh what we hope to learn from

30
00:01:19,520 --> 00:01:20,400
today

31
00:01:20,400 --> 00:01:24,400
uh in uh 30 to 40 minutes is this one so

32
00:01:24,400 --> 00:01:26,400
what cyber physical system

33
00:01:26,400 --> 00:01:28,960
why security is important for them and

34
00:01:28,960 --> 00:01:32,079
zero trust we talk a bit a bit about the

35
00:01:32,079 --> 00:01:34,720
drone systems risk five

36
00:01:34,720 --> 00:01:37,200
uh which is a free and open instruction

37
00:01:37,200 --> 00:01:38,640
set architecture

38
00:01:38,640 --> 00:01:41,040
and a risk firebase platform and at the

39
00:01:41,040 --> 00:01:42,000
end

40
00:01:42,000 --> 00:01:44,560
a secure systems research center what we

41
00:01:44,560 --> 00:01:47,759
do and how we can collaborate

42
00:01:47,759 --> 00:01:50,399
um so a quick uh introduction if you are

43
00:01:50,399 --> 00:01:52,159
not aware of

44
00:01:52,159 --> 00:01:54,240
the cyber physical systems which are

45
00:01:54,240 --> 00:01:56,159
unmanned and autonomous

46
00:01:56,159 --> 00:01:59,680
cps um are basically cyber

47
00:01:59,680 --> 00:02:02,159
and physical so there are computer

48
00:02:02,159 --> 00:02:04,000
systems that interact with the physical

49
00:02:04,000 --> 00:02:05,200
world

50
00:02:05,200 --> 00:02:07,280
where laws of physics govern their

51
00:02:07,280 --> 00:02:08,720
behavior

52
00:02:08,720 --> 00:02:11,280
and they have to support real-time

53
00:02:11,280 --> 00:02:12,959
guarantee performance

54
00:02:12,959 --> 00:02:14,800
in a safety critical

55
00:02:14,800 --> 00:02:16,239
manner

56
00:02:16,239 --> 00:02:18,560
it integrates sensors processors

57
00:02:18,560 --> 00:02:21,760
actuators if you see the picture here it

58
00:02:21,760 --> 00:02:23,040
represents

59
00:02:23,040 --> 00:02:25,120
both the cyber and physical aspects of

60
00:02:25,120 --> 00:02:27,680
the kick so it has both sensors

61
00:02:27,680 --> 00:02:28,720
to read

62
00:02:28,720 --> 00:02:31,040
the environment and then

63
00:02:31,040 --> 00:02:34,080
take action using actuators

64
00:02:34,080 --> 00:02:36,959
quick examples are a self-driving car

65
00:02:36,959 --> 00:02:39,040
and drones as you

66
00:02:39,040 --> 00:02:41,120
are already aware

67
00:02:41,120 --> 00:02:44,720
and as these systems get more complex

68
00:02:44,720 --> 00:02:47,040
every every day every month

69
00:02:47,040 --> 00:02:50,000
with adding more sensors more more data

70
00:02:50,000 --> 00:02:51,519
gets generated

71
00:02:51,519 --> 00:02:52,480
the

72
00:02:52,480 --> 00:02:54,560
establishing confidence that they work

73
00:02:54,560 --> 00:02:56,239
perfectly and correctly

74
00:02:56,239 --> 00:02:57,840
is becoming challenging so that's

75
00:02:57,840 --> 00:03:00,480
something we will explore how we can fix

76
00:03:00,480 --> 00:03:02,000
that problem

77
00:03:02,000 --> 00:03:04,400
uh the typical attack surface would be

78
00:03:04,400 --> 00:03:06,560
around all these things right so things

79
00:03:06,560 --> 00:03:08,800
like uh actuators missing their

80
00:03:08,800 --> 00:03:10,239
deadlines so

81
00:03:10,239 --> 00:03:12,159
some action has to happen and it doesn't

82
00:03:12,159 --> 00:03:13,280
happen

83
00:03:13,280 --> 00:03:14,800
uh another thing could be on the

84
00:03:14,800 --> 00:03:17,120
communication side somebody can do a

85
00:03:17,120 --> 00:03:18,400
man-in-the-middle attack

86
00:03:18,400 --> 00:03:19,280
and then

87
00:03:19,280 --> 00:03:21,760
they could block your resources by

88
00:03:21,760 --> 00:03:23,599
jamming or whatever

89
00:03:23,599 --> 00:03:25,440
and they can easily cause a denial of

90
00:03:25,440 --> 00:03:28,480
service to the sensors by maybe

91
00:03:28,480 --> 00:03:29,840
blinding

92
00:03:29,840 --> 00:03:33,840
the camera or it can be anything so

93
00:03:33,840 --> 00:03:36,879
on the computing side likewise they can

94
00:03:36,879 --> 00:03:39,519
they can introduce some timing error

95
00:03:39,519 --> 00:03:40,720
or

96
00:03:40,720 --> 00:03:42,959
some fault injection whatever it is so i

97
00:03:42,959 --> 00:03:44,959
think this gives you an overview

98
00:03:44,959 --> 00:03:46,400
of the attack surface

99
00:03:46,400 --> 00:03:50,000
and if anything is compromised

100
00:03:50,720 --> 00:03:52,159
it's going to be

101
00:03:52,159 --> 00:03:53,599
catastrophic so

102
00:03:53,599 --> 00:03:56,080
so it has to be

103
00:03:56,080 --> 00:03:59,120
very carefully implemented to be safe

104
00:03:59,120 --> 00:04:01,360
and secure and even if there is an

105
00:04:01,360 --> 00:04:03,920
attack it has to be contained locally

106
00:04:03,920 --> 00:04:06,239
that's the premise of uh

107
00:04:06,239 --> 00:04:08,319
cps and you know

108
00:04:08,319 --> 00:04:10,400
you must have read in the newspapers

109
00:04:10,400 --> 00:04:12,400
uh a machine learning or go to the mini

110
00:04:12,400 --> 00:04:15,840
car actually sees a person's photo in a

111
00:04:15,840 --> 00:04:16,639
bus

112
00:04:16,639 --> 00:04:18,478
and then it thinks there is a person and

113
00:04:18,478 --> 00:04:20,880
then it stops

114
00:04:20,880 --> 00:04:23,120
so these are vulnerabilities in today's

115
00:04:23,120 --> 00:04:25,280
systems and then we need to address all

116
00:04:25,280 --> 00:04:26,160
of them

117
00:04:26,160 --> 00:04:28,800
and people can attack

118
00:04:28,800 --> 00:04:30,560
your car

119
00:04:30,560 --> 00:04:32,320
through a smartphone and then make it do

120
00:04:32,320 --> 00:04:34,000
whatever it wants

121
00:04:34,000 --> 00:04:35,120
and

122
00:04:35,120 --> 00:04:36,720
something related to drone is whenever

123
00:04:36,720 --> 00:04:38,240
the drones fly

124
00:04:38,240 --> 00:04:40,639
across these power transmission lines

125
00:04:40,639 --> 00:04:42,560
uh due to high emi

126
00:04:42,560 --> 00:04:44,479
electromagnetic interference

127
00:04:44,479 --> 00:04:47,440
and the gps accuracy goes for a toss and

128
00:04:47,440 --> 00:04:48,800
then uh

129
00:04:48,800 --> 00:04:50,639
causing the imu to go

130
00:04:50,639 --> 00:04:53,360
beserk and then the drone crashing so

131
00:04:53,360 --> 00:04:56,320
these are some things

132
00:04:56,320 --> 00:04:58,000
we need to address we will see some of

133
00:04:58,000 --> 00:05:00,400
them today

134
00:05:00,400 --> 00:05:01,360
and

135
00:05:01,360 --> 00:05:03,520
by trust

136
00:05:03,520 --> 00:05:06,240
there are many aspects to it

137
00:05:06,240 --> 00:05:07,280
so

138
00:05:07,280 --> 00:05:09,919
i won't trust let's say a device if it

139
00:05:09,919 --> 00:05:12,479
is not secure if it's not safe if it's

140
00:05:12,479 --> 00:05:15,039
not reliable so trust is a basically

141
00:05:15,039 --> 00:05:16,240
overloaded

142
00:05:16,240 --> 00:05:17,280
um

143
00:05:17,280 --> 00:05:18,400
term here

144
00:05:18,400 --> 00:05:20,240
uh and uh

145
00:05:20,240 --> 00:05:22,240
there are a whole bunch of things like

146
00:05:22,240 --> 00:05:25,120
two sides of a coin right so uh each of

147
00:05:25,120 --> 00:05:27,280
these things have to be addressed

148
00:05:27,280 --> 00:05:28,479
for me

149
00:05:28,479 --> 00:05:30,320
uh to trust a device or trust some

150
00:05:30,320 --> 00:05:31,840
machine uh

151
00:05:31,840 --> 00:05:33,120
trust my car

152
00:05:33,120 --> 00:05:36,560
so that's uh sort of um

153
00:05:36,560 --> 00:05:39,840
the scope of the trust

154
00:05:39,840 --> 00:05:42,080
for today's discussion we're gonna focus

155
00:05:42,080 --> 00:05:43,039
on

156
00:05:43,039 --> 00:05:44,639
autonomous edge which is at the

157
00:05:44,639 --> 00:05:47,600
intersection of iot machine learning and

158
00:05:47,600 --> 00:05:48,560
cloud

159
00:05:48,560 --> 00:05:50,800
and that happens to have the drones and

160
00:05:50,800 --> 00:05:52,960
autonomous cars

161
00:05:52,960 --> 00:05:54,400
boats or whatever

162
00:05:54,400 --> 00:05:56,880
it's a big big market

163
00:05:56,880 --> 00:05:58,880
what the 100 billion dollars

164
00:05:58,880 --> 00:06:01,360
so we will focus on this piece

165
00:06:01,360 --> 00:06:03,120
but whatever we talk

166
00:06:03,120 --> 00:06:05,520
is equally applicable for anything you

167
00:06:05,520 --> 00:06:07,120
see on the left or right

168
00:06:07,120 --> 00:06:09,440
so for this

169
00:06:09,440 --> 00:06:11,759
for the focus today it's going to be

170
00:06:11,759 --> 00:06:13,120
edge

171
00:06:13,120 --> 00:06:14,720
and we pick a

172
00:06:14,720 --> 00:06:18,720
drone as a example platform for here

173
00:06:18,720 --> 00:06:20,560
so some of the use cases you know we

174
00:06:20,560 --> 00:06:22,960
know right drones act as a first

175
00:06:22,960 --> 00:06:24,479
responder for example when there's a

176
00:06:24,479 --> 00:06:28,160
fire uh the firemen use the drone to uh

177
00:06:28,160 --> 00:06:30,400
actually go inspect and then come back

178
00:06:30,400 --> 00:06:31,759
with the report

179
00:06:31,759 --> 00:06:35,440
uh and they plan what to do next it can

180
00:06:35,440 --> 00:06:37,520
act as a delivery drone it can do video

181
00:06:37,520 --> 00:06:39,039
surveillance

182
00:06:39,039 --> 00:06:40,560
and a whole lot of things so they are

183
00:06:40,560 --> 00:06:42,400
pretty useful stuff

184
00:06:42,400 --> 00:06:43,199
um

185
00:06:43,199 --> 00:06:45,360
and

186
00:06:45,600 --> 00:06:49,120
this slide gives you a brief overview of

187
00:06:49,120 --> 00:06:49,919
uh

188
00:06:49,919 --> 00:06:52,080
system architecture at least how we are

189
00:06:52,080 --> 00:06:54,160
building uh in ti

190
00:06:54,160 --> 00:06:55,199
uh

191
00:06:55,199 --> 00:06:57,120
so we have

192
00:06:57,120 --> 00:06:59,440
two types basically one is fog and the

193
00:06:59,440 --> 00:07:00,840
other one is edge

194
00:07:00,840 --> 00:07:03,759
uh one has more capabilities because it

195
00:07:03,759 --> 00:07:06,000
talks to the cloud it

196
00:07:06,000 --> 00:07:08,080
does a few few other things like mission

197
00:07:08,080 --> 00:07:09,520
planning

198
00:07:09,520 --> 00:07:10,720
and a

199
00:07:10,720 --> 00:07:13,520
whole lot of things but

200
00:07:13,520 --> 00:07:15,599
there are two processes here one is

201
00:07:15,599 --> 00:07:18,160
flight controller and mission computer

202
00:07:18,160 --> 00:07:21,120
so we will talk about them uh

203
00:07:21,120 --> 00:07:22,160
shortly

204
00:07:22,160 --> 00:07:23,120
and

205
00:07:23,120 --> 00:07:25,120
what you see here on the edge of drones

206
00:07:25,120 --> 00:07:27,680
they they are like in swamps so they'll

207
00:07:27,680 --> 00:07:31,199
be like 10s or 15s talking to the fog

208
00:07:31,199 --> 00:07:33,199
drone and then carry out

209
00:07:33,199 --> 00:07:35,039
their mission

210
00:07:35,039 --> 00:07:37,599
uh this is a quick overview of how the

211
00:07:37,599 --> 00:07:39,440
software architecture will look like so

212
00:07:39,440 --> 00:07:42,080
we use the containerization that means

213
00:07:42,080 --> 00:07:43,280
using

214
00:07:43,280 --> 00:07:45,840
vms

215
00:07:45,840 --> 00:07:47,759
with isolated

216
00:07:47,759 --> 00:07:49,280
partitions here

217
00:07:49,280 --> 00:07:52,080
for each activity uh for applications

218
00:07:52,080 --> 00:07:54,560
there is a container here and for flight

219
00:07:54,560 --> 00:07:57,280
critical operations there's a container

220
00:07:57,280 --> 00:07:59,039
for security you see

221
00:07:59,039 --> 00:08:02,160
a dedicated vm so the idea will be even

222
00:08:02,160 --> 00:08:03,680
if there's an attack let's say some

223
00:08:03,680 --> 00:08:06,319
attack happens from the network and then

224
00:08:06,319 --> 00:08:08,800
let's say you make the networking vm

225
00:08:08,800 --> 00:08:10,800
crash it's not going to impact your rest

226
00:08:10,800 --> 00:08:13,440
of the system so you can borrow some

227
00:08:13,440 --> 00:08:16,000
time and then you can try to reboot this

228
00:08:16,000 --> 00:08:17,759
vm only

229
00:08:17,759 --> 00:08:20,319
that way guarantees a whole lot of

230
00:08:20,319 --> 00:08:22,560
reliability and resilience to this

231
00:08:22,560 --> 00:08:25,360
architecture so if you notice here

232
00:08:25,360 --> 00:08:26,400
these two

233
00:08:26,400 --> 00:08:27,919
flight controller and mission computer

234
00:08:27,919 --> 00:08:29,440
are the two chips that

235
00:08:29,440 --> 00:08:31,919
i talked about a minute ago and both of

236
00:08:31,919 --> 00:08:33,839
them will have a road of trust so that's

237
00:08:33,839 --> 00:08:36,320
essential for

238
00:08:36,320 --> 00:08:39,279
establishing trust

239
00:08:39,599 --> 00:08:42,240
okay so um

240
00:08:42,240 --> 00:08:44,480
what are the existing threads and

241
00:08:44,480 --> 00:08:48,000
mitigations in this sort of system on

242
00:08:48,000 --> 00:08:50,959
the left hand side uh you see the the

243
00:08:50,959 --> 00:08:51,920
common

244
00:08:51,920 --> 00:08:53,600
threads that we find

245
00:08:53,600 --> 00:08:54,720
right from hardware attacks

246
00:08:54,720 --> 00:08:57,120
cryptographic attacks

247
00:08:57,120 --> 00:08:58,640
supply chain attacks

248
00:08:58,640 --> 00:09:00,000
so um

249
00:09:00,000 --> 00:09:02,880
if you look at the 10 10 items here i

250
00:09:02,880 --> 00:09:04,880
have classified them

251
00:09:04,880 --> 00:09:06,160
into

252
00:09:06,160 --> 00:09:08,480
these buckets here

253
00:09:08,480 --> 00:09:11,360
so let's take a few examples right so

254
00:09:11,360 --> 00:09:12,320
uh

255
00:09:12,320 --> 00:09:13,360
um

256
00:09:13,360 --> 00:09:15,600
single point of failure so what if uh

257
00:09:15,600 --> 00:09:17,920
you have one sensor and somebody

258
00:09:17,920 --> 00:09:21,120
introduces if um some sort of a

259
00:09:21,120 --> 00:09:23,200
fault what will happen

260
00:09:23,200 --> 00:09:26,160
will your system crash

261
00:09:26,160 --> 00:09:27,760
so for that

262
00:09:27,760 --> 00:09:31,360
we use redundancy so let's say

263
00:09:31,360 --> 00:09:32,480
gps

264
00:09:32,480 --> 00:09:35,200
so what you do is uh you you put

265
00:09:35,200 --> 00:09:37,200
two or three gps

266
00:09:37,200 --> 00:09:41,040
ah just to be sure that even if one goes

267
00:09:41,040 --> 00:09:42,480
out of whatever

268
00:09:42,480 --> 00:09:44,560
goes into a toss you still have the

269
00:09:44,560 --> 00:09:46,480
other two to

270
00:09:46,480 --> 00:09:48,160
gain back control

271
00:09:48,160 --> 00:09:49,360
and

272
00:09:49,360 --> 00:09:52,320
the popular things that we found find in

273
00:09:52,320 --> 00:09:54,320
other categories of devices like phone

274
00:09:54,320 --> 00:09:57,440
or laptop the secure boot the secure

275
00:09:57,440 --> 00:10:01,279
storage having a road of trust all are

276
00:10:01,279 --> 00:10:03,519
already taken care here

277
00:10:03,519 --> 00:10:04,720
it's been

278
00:10:04,720 --> 00:10:06,640
these been pioneered for many years

279
00:10:06,640 --> 00:10:07,680
already

280
00:10:07,680 --> 00:10:08,560
and

281
00:10:08,560 --> 00:10:10,480
the the drones that you see that you can

282
00:10:10,480 --> 00:10:11,839
commercially buy

283
00:10:11,839 --> 00:10:14,000
all of them have

284
00:10:14,000 --> 00:10:16,079
such mitigations

285
00:10:16,079 --> 00:10:18,959
already addressed so my question is

286
00:10:18,959 --> 00:10:20,800
what's next right

287
00:10:20,800 --> 00:10:21,680
uh

288
00:10:21,680 --> 00:10:23,519
so that's an interesting question and i

289
00:10:23,519 --> 00:10:25,360
have

290
00:10:25,360 --> 00:10:26,640
zero trust

291
00:10:26,640 --> 00:10:27,440
to

292
00:10:27,440 --> 00:10:29,279
come for rescue

293
00:10:29,279 --> 00:10:32,160
so zero trust before we actually go into

294
00:10:32,160 --> 00:10:34,640
uh how we how we do zero trust for the

295
00:10:34,640 --> 00:10:35,839
risk file system let me give you an

296
00:10:35,839 --> 00:10:37,200
overview of uh

297
00:10:37,200 --> 00:10:40,160
what the term generally is uh forrester

298
00:10:40,160 --> 00:10:43,120
back in 2010 had coined this term for

299
00:10:43,120 --> 00:10:45,680
for networking basically and it is built

300
00:10:45,680 --> 00:10:47,680
around the concept of never trust always

301
00:10:47,680 --> 00:10:49,360
verify you see here on the left hand

302
00:10:49,360 --> 00:10:51,519
side

303
00:10:51,519 --> 00:10:54,000
this is let's say this is a corporate

304
00:10:54,000 --> 00:10:56,640
setup and then

305
00:10:56,640 --> 00:10:58,959
they trust what is inside and any

306
00:10:58,959 --> 00:11:00,480
threads from outside

307
00:11:00,480 --> 00:11:02,480
are filtered with firewalls

308
00:11:02,480 --> 00:11:04,800
so what happens if if there is a local

309
00:11:04,800 --> 00:11:05,880
attack

310
00:11:05,880 --> 00:11:07,200
[Music]

311
00:11:07,200 --> 00:11:09,920
and it cannot mitigate that

312
00:11:09,920 --> 00:11:12,399
so that was the weakness of that model

313
00:11:12,399 --> 00:11:14,880
so the networking side switched to so

314
00:11:14,880 --> 00:11:17,120
called

315
00:11:17,200 --> 00:11:18,880
the zero truss model

316
00:11:18,880 --> 00:11:20,160
where

317
00:11:20,160 --> 00:11:22,720
there is no implicit trust zone

318
00:11:22,720 --> 00:11:25,279
uh and each of these boxes that you see

319
00:11:25,279 --> 00:11:28,160
are the smaller trust zones

320
00:11:28,160 --> 00:11:30,399
so which are protected by themselves

321
00:11:30,399 --> 00:11:31,120
and

322
00:11:31,120 --> 00:11:33,360
it verifies

323
00:11:33,360 --> 00:11:35,519
each and every transaction that comes

324
00:11:35,519 --> 00:11:37,200
from outside

325
00:11:37,200 --> 00:11:37,920
so

326
00:11:37,920 --> 00:11:39,760
what it essentially means is a smaller

327
00:11:39,760 --> 00:11:41,920
blast radius even if if there is a one

328
00:11:41,920 --> 00:11:43,360
bad guy

329
00:11:43,360 --> 00:11:44,920
he cannot screw up the whole

330
00:11:44,920 --> 00:11:46,560
[Music]

331
00:11:46,560 --> 00:11:47,920
system

332
00:11:47,920 --> 00:11:50,800
so this model assumes breach assumes

333
00:11:50,800 --> 00:11:52,880
vulnerability already exists

334
00:11:52,880 --> 00:11:55,360
and if something is compromised then try

335
00:11:55,360 --> 00:11:57,760
to fail safely and securely

336
00:11:57,760 --> 00:12:00,639
so this model is also applied uh

337
00:12:00,639 --> 00:12:03,839
recently in 5g and 6g core architecture

338
00:12:03,839 --> 00:12:05,040
as well

339
00:12:05,040 --> 00:12:07,839
so with that in mind let's dig a little

340
00:12:07,839 --> 00:12:09,040
bit deep

341
00:12:09,040 --> 00:12:11,680
there are 10 pillars for zero trust

342
00:12:11,680 --> 00:12:14,639
verify explicitly least privilege and

343
00:12:14,639 --> 00:12:17,120
these are

344
00:12:17,360 --> 00:12:18,720
pretty

345
00:12:18,720 --> 00:12:19,920
known things

346
00:12:19,920 --> 00:12:21,600
if you had

347
00:12:21,600 --> 00:12:23,200
worked in security

348
00:12:23,200 --> 00:12:24,639
for a long time

349
00:12:24,639 --> 00:12:26,959
but never mind we will

350
00:12:26,959 --> 00:12:29,519
see a few things here uh so verify

351
00:12:29,519 --> 00:12:30,720
explicitly

352
00:12:30,720 --> 00:12:31,680
uh

353
00:12:31,680 --> 00:12:33,440
it means it verify

354
00:12:33,440 --> 00:12:35,680
every access

355
00:12:35,680 --> 00:12:37,839
without any trust assumptions right for

356
00:12:37,839 --> 00:12:38,959
example

357
00:12:38,959 --> 00:12:41,600
a data packets coming from somebody

358
00:12:41,600 --> 00:12:44,240
you don't know from where it comes but

359
00:12:44,240 --> 00:12:46,560
you verify and authenticate

360
00:12:46,560 --> 00:12:49,040
before consuming that packet

361
00:12:49,040 --> 00:12:50,720
similarly you have lease privilege and

362
00:12:50,720 --> 00:12:53,680
assume breach that we talked about

363
00:12:53,680 --> 00:12:54,959
a minute ago

364
00:12:54,959 --> 00:12:57,279
and then fail securely so if if there is

365
00:12:57,279 --> 00:12:58,639
an error condition

366
00:12:58,639 --> 00:13:00,880
don't just crash or fail

367
00:13:00,880 --> 00:13:02,639
you you

368
00:13:02,639 --> 00:13:05,360
you make sure

369
00:13:05,360 --> 00:13:07,519
you do it properly without leaving any

370
00:13:07,519 --> 00:13:09,040
secrets around

371
00:13:09,040 --> 00:13:10,000
or

372
00:13:10,000 --> 00:13:11,600
anything like that that compromises the

373
00:13:11,600 --> 00:13:12,800
security

374
00:13:12,800 --> 00:13:14,800
and uh

375
00:13:14,800 --> 00:13:17,279
something on eight is secure the weak

376
00:13:17,279 --> 00:13:20,079
link so we know uh the weakest link in

377
00:13:20,079 --> 00:13:22,800
the chain is the is the problem so we

378
00:13:22,800 --> 00:13:24,720
need to address uh

379
00:13:24,720 --> 00:13:26,800
the weakest chain first

380
00:13:26,800 --> 00:13:28,639
and

381
00:13:28,639 --> 00:13:30,959
simplicity to end with so you can take a

382
00:13:30,959 --> 00:13:33,600
look at this one

383
00:13:33,600 --> 00:13:35,920
when you have more time

384
00:13:35,920 --> 00:13:38,959
so we're going to jump straight in

385
00:13:38,959 --> 00:13:40,000
uh

386
00:13:40,000 --> 00:13:42,639
on the context of a risk five system

387
00:13:42,639 --> 00:13:44,880
this is a onion diagram

388
00:13:44,880 --> 00:13:47,839
if you peel onion you see layers so

389
00:13:47,839 --> 00:13:49,040
that's how

390
00:13:49,040 --> 00:13:52,079
i see the system basically on the top

391
00:13:52,079 --> 00:13:54,320
you have applications and then you go

392
00:13:54,320 --> 00:13:56,240
down to system software then you have

393
00:13:56,240 --> 00:13:59,040
platforms then you have the socs so

394
00:13:59,040 --> 00:14:00,079
whatever

395
00:14:00,079 --> 00:14:02,079
the items you see they belong to the

396
00:14:02,079 --> 00:14:03,680
particular ring

397
00:14:03,680 --> 00:14:06,000
and if you see the ip here

398
00:14:06,000 --> 00:14:08,959
your processor your machine learning

399
00:14:08,959 --> 00:14:11,040
everything is sitting here so we what

400
00:14:11,040 --> 00:14:12,240
we're going to do

401
00:14:12,240 --> 00:14:14,800
layer by layer we will see

402
00:14:14,800 --> 00:14:17,199
how to apply these zero truss principles

403
00:14:17,199 --> 00:14:17,640
and

404
00:14:17,640 --> 00:14:18,880
[Music]

405
00:14:18,880 --> 00:14:21,519
go from there

406
00:14:22,639 --> 00:14:26,720
okay so i have sort of categorized

407
00:14:26,720 --> 00:14:29,040
into

408
00:14:29,199 --> 00:14:32,000
four uh things here so the platform will

409
00:14:32,000 --> 00:14:33,839
have pcb

410
00:14:33,839 --> 00:14:36,560
and soc one or more socs

411
00:14:36,560 --> 00:14:39,279
a bunch of peripherals and software

412
00:14:39,279 --> 00:14:41,040
so what you see on the right

413
00:14:41,040 --> 00:14:42,000
are some

414
00:14:42,000 --> 00:14:44,320
zero trust capabilities that are in the

415
00:14:44,320 --> 00:14:45,920
research or that something we are

416
00:14:45,920 --> 00:14:47,440
already working on

417
00:14:47,440 --> 00:14:48,399
um

418
00:14:48,399 --> 00:14:49,839
that's gonna

419
00:14:49,839 --> 00:14:52,079
add value to the trust security

420
00:14:52,079 --> 00:14:53,519
resilience

421
00:14:53,519 --> 00:14:55,920
all these parameters we look at

422
00:14:55,920 --> 00:14:56,839
um

423
00:14:56,839 --> 00:14:59,440
so let's start by looking at the

424
00:14:59,440 --> 00:15:01,600
platform level

425
00:15:01,600 --> 00:15:03,440
platform level the first thread we are

426
00:15:03,440 --> 00:15:04,480
going to look at

427
00:15:04,480 --> 00:15:07,199
is a component authenticity so what this

428
00:15:07,199 --> 00:15:09,040
means is how do you know

429
00:15:09,040 --> 00:15:10,959
a component that is plugged into your

430
00:15:10,959 --> 00:15:14,160
board for example gps

431
00:15:14,160 --> 00:15:17,519
is authentic it is it genuine or is it

432
00:15:17,519 --> 00:15:19,760
being tampered with

433
00:15:19,760 --> 00:15:22,320
does it have the right firmware image

434
00:15:22,320 --> 00:15:23,839
how do you know

435
00:15:23,839 --> 00:15:24,800
you

436
00:15:24,800 --> 00:15:26,480
you simply trust

437
00:15:26,480 --> 00:15:27,839
because it's already sitting on the

438
00:15:27,839 --> 00:15:29,040
platform

439
00:15:29,040 --> 00:15:31,279
uh so there are two categories here

440
00:15:31,279 --> 00:15:33,680
active components and passive active

441
00:15:33,680 --> 00:15:34,639
means

442
00:15:34,639 --> 00:15:36,320
there is there could be a micro

443
00:15:36,320 --> 00:15:39,839
controller inside with the road of trust

444
00:15:39,839 --> 00:15:41,440
for example would be

445
00:15:41,440 --> 00:15:44,079
a co-processor or a flight controller

446
00:15:44,079 --> 00:15:46,880
passive components such as sensors or

447
00:15:46,880 --> 00:15:50,959
actuators which are pretty simple

448
00:15:50,959 --> 00:15:52,800
and they don't have this

449
00:15:52,800 --> 00:15:54,639
intelligence inside for example motor

450
00:15:54,639 --> 00:15:56,639
controller for the drone they are pretty

451
00:15:56,639 --> 00:15:59,279
much passive and then there is no load

452
00:15:59,279 --> 00:16:01,199
of trust or whatever it is so

453
00:16:01,199 --> 00:16:03,519
how do we

454
00:16:03,519 --> 00:16:04,560
make sure

455
00:16:04,560 --> 00:16:06,560
this is

456
00:16:06,560 --> 00:16:09,279
addressed by a proper means

457
00:16:09,279 --> 00:16:11,199
you don't have to trust but you

458
00:16:11,199 --> 00:16:13,680
establish the trust so this is with a

459
00:16:13,680 --> 00:16:16,160
process called mutual authentication

460
00:16:16,160 --> 00:16:18,160
so on the left hand side you see for

461
00:16:18,160 --> 00:16:19,920
active components there are few

462
00:16:19,920 --> 00:16:21,360
standards

463
00:16:21,360 --> 00:16:22,880
called spdm

464
00:16:22,880 --> 00:16:24,480
and pci-6

465
00:16:24,480 --> 00:16:27,120
integrity and data encryption

466
00:16:27,120 --> 00:16:28,880
that actually

467
00:16:28,880 --> 00:16:30,079
talks about

468
00:16:30,079 --> 00:16:31,680
mechanisms to

469
00:16:31,680 --> 00:16:34,880
establish this trust by by having

470
00:16:34,880 --> 00:16:36,959
the platform road of trust

471
00:16:36,959 --> 00:16:38,880
talk to the active component out of

472
00:16:38,880 --> 00:16:40,560
trust and then exchanging certain

473
00:16:40,560 --> 00:16:41,680
certificates

474
00:16:41,680 --> 00:16:42,360
and then

475
00:16:42,360 --> 00:16:43,600
[Music]

476
00:16:43,600 --> 00:16:45,279
verifying the measurements

477
00:16:45,279 --> 00:16:47,440
and then exchanging some keys to make

478
00:16:47,440 --> 00:16:49,120
sure the the

479
00:16:49,120 --> 00:16:51,120
data transfers are all encrypted and

480
00:16:51,120 --> 00:16:52,959
authenticated

481
00:16:52,959 --> 00:16:54,959
we could use this in the drones or

482
00:16:54,959 --> 00:16:56,639
whatever context

483
00:16:56,639 --> 00:16:58,399
uh which is already there

484
00:16:58,399 --> 00:17:00,480
but the main issue is

485
00:17:00,480 --> 00:17:02,240
what about passive components say you

486
00:17:02,240 --> 00:17:04,000
want to authenticate

487
00:17:04,000 --> 00:17:07,119
an led to make sure the led blinks when

488
00:17:07,119 --> 00:17:09,359
you send a command

489
00:17:09,359 --> 00:17:10,559
is the led

490
00:17:10,559 --> 00:17:13,359
from a credible source

491
00:17:13,359 --> 00:17:16,400
or is it tampered with we never know so

492
00:17:16,400 --> 00:17:19,039
how do you do that so we need to do some

493
00:17:19,039 --> 00:17:20,559
research

494
00:17:20,559 --> 00:17:22,480
and understanding or

495
00:17:22,480 --> 00:17:23,740
exploring some ideas to

496
00:17:23,740 --> 00:17:25,359
[Music]

497
00:17:25,359 --> 00:17:27,359
make this happen for

498
00:17:27,359 --> 00:17:29,280
such constrained devices for example

499
00:17:29,280 --> 00:17:31,600
power constrained resource constrained

500
00:17:31,600 --> 00:17:33,760
things may not even have a crypto engine

501
00:17:33,760 --> 00:17:35,840
or crypto capability inside so

502
00:17:35,840 --> 00:17:39,440
one example uh we could see is a

503
00:17:39,440 --> 00:17:41,679
qrng which is a quantum random number

504
00:17:41,679 --> 00:17:43,120
generator

505
00:17:43,120 --> 00:17:46,640
which is a photonic chip by the way

506
00:17:46,640 --> 00:17:47,440
so

507
00:17:47,440 --> 00:17:49,520
as we know it's a passive component and

508
00:17:49,520 --> 00:17:51,039
then how can we verify the authenticity

509
00:17:51,039 --> 00:17:52,720
so there are certain ways

510
00:17:52,720 --> 00:17:54,559
in which you can

511
00:17:54,559 --> 00:17:57,360
check certain quantum traits of the

512
00:17:57,360 --> 00:17:59,120
output that it generates

513
00:17:59,120 --> 00:18:02,160
so by observing those pattern we can be

514
00:18:02,160 --> 00:18:02,960
sure

515
00:18:02,960 --> 00:18:04,720
whether on the other side there is a

516
00:18:04,720 --> 00:18:08,160
genuine photonic chip or not

517
00:18:08,160 --> 00:18:10,320
this is an example similarly we need to

518
00:18:10,320 --> 00:18:12,400
do some research as a community and then

519
00:18:12,400 --> 00:18:14,720
come up with the alternative approaches

520
00:18:14,720 --> 00:18:15,520
for

521
00:18:15,520 --> 00:18:17,679
other passive components

522
00:18:17,679 --> 00:18:20,000
that way so the zero trust principle we

523
00:18:20,000 --> 00:18:23,360
use here is verify explicitly so verify

524
00:18:23,360 --> 00:18:26,240
before trusting anybody

525
00:18:26,240 --> 00:18:29,360
let's look into uh the next thread

526
00:18:29,360 --> 00:18:32,160
uh which is a sensor spoofing so what

527
00:18:32,160 --> 00:18:33,919
you see on the left here

528
00:18:33,919 --> 00:18:36,080
somebody's uh using a laser pointer to

529
00:18:36,080 --> 00:18:38,240
take down a drone so basically you are

530
00:18:38,240 --> 00:18:40,799
saturating the camera and then

531
00:18:40,799 --> 00:18:41,520
some

532
00:18:41,520 --> 00:18:43,760
outputs from the camera

533
00:18:43,760 --> 00:18:46,400
making some machine learning model crash

534
00:18:46,400 --> 00:18:47,200
so

535
00:18:47,200 --> 00:18:49,360
this is the integrity and availability

536
00:18:49,360 --> 00:18:51,840
of the sensors basically by introducing

537
00:18:51,840 --> 00:18:53,440
fault

538
00:18:53,440 --> 00:18:55,840
and the impact will be the reliability

539
00:18:55,840 --> 00:18:58,480
and stability of the platform

540
00:18:58,480 --> 00:19:01,280
so as you know some rf signals are being

541
00:19:01,280 --> 00:19:02,640
used for

542
00:19:02,640 --> 00:19:03,440
uh

543
00:19:03,440 --> 00:19:06,880
in the uh sensors right so

544
00:19:06,880 --> 00:19:09,039
let's say a camera sensor

545
00:19:09,039 --> 00:19:10,559
looks at light

546
00:19:10,559 --> 00:19:14,400
uh to make a um make an output here so

547
00:19:14,400 --> 00:19:16,640
uh when you tamper it when you corrupt

548
00:19:16,640 --> 00:19:17,679
it with

549
00:19:17,679 --> 00:19:20,160
some extra light uh it's gonna it's

550
00:19:20,160 --> 00:19:22,000
gonna go berserk

551
00:19:22,000 --> 00:19:24,640
so this is a way of tampering the

552
00:19:24,640 --> 00:19:27,679
sensors no matter what how much secure

553
00:19:27,679 --> 00:19:30,799
the other things on the upper layer are

554
00:19:30,799 --> 00:19:33,120
so the only solution

555
00:19:33,120 --> 00:19:35,360
we know at this point of time is using

556
00:19:35,360 --> 00:19:36,799
redundancy

557
00:19:36,799 --> 00:19:40,480
so a popular uh redundancy mechanisms

558
00:19:40,480 --> 00:19:42,640
that are available are homogeneous and

559
00:19:42,640 --> 00:19:45,200
heterogeneous the simplest example could

560
00:19:45,200 --> 00:19:46,880
be let's say you have a

561
00:19:46,880 --> 00:19:49,760
gps you put two more gps and then you

562
00:19:49,760 --> 00:19:53,039
have three gps so and you aggregate

563
00:19:53,039 --> 00:19:54,799
the outputs from each of them and then

564
00:19:54,799 --> 00:19:57,600
you consume them so even if one fails

565
00:19:57,600 --> 00:19:59,919
you still have the other two running

566
00:19:59,919 --> 00:20:02,240
uh this is not very practical for a

567
00:20:02,240 --> 00:20:04,559
drone use case because are you going to

568
00:20:04,559 --> 00:20:06,799
overload the drone by

569
00:20:06,799 --> 00:20:09,120
tripling every piece of component you

570
00:20:09,120 --> 00:20:10,080
have

571
00:20:10,080 --> 00:20:12,159
what happens to the power size and

572
00:20:12,159 --> 00:20:14,320
battery capacity so that's not really

573
00:20:14,320 --> 00:20:15,280
ideal

574
00:20:15,280 --> 00:20:17,440
for these kind of devices

575
00:20:17,440 --> 00:20:19,280
let's look at heterogeneous

576
00:20:19,280 --> 00:20:22,080
for example in the self-driving cars now

577
00:20:22,080 --> 00:20:23,600
um

578
00:20:23,600 --> 00:20:26,159
what if the camera is spoofed

579
00:20:26,159 --> 00:20:29,600
then what it does is it uses the lidar

580
00:20:29,600 --> 00:20:32,000
and applies either sensor fusion before

581
00:20:32,000 --> 00:20:34,640
giving to the machine learning or

582
00:20:34,640 --> 00:20:37,919
use a parallel pipeline and then do a

583
00:20:37,919 --> 00:20:39,360
comparison

584
00:20:39,360 --> 00:20:41,280
before taking an action so there have

585
00:20:41,280 --> 00:20:43,679
been some attacks where people tamper

586
00:20:43,679 --> 00:20:46,400
the sign boards so let's say

587
00:20:46,400 --> 00:20:47,200
it's

588
00:20:47,200 --> 00:20:50,080
30 miles per hour and you tamper the

589
00:20:50,080 --> 00:20:53,120
sign board and it they make it uh

590
00:20:53,120 --> 00:20:54,720
200 miles an hour

591
00:20:54,720 --> 00:20:58,240
and this car can misinterpret and then

592
00:20:58,240 --> 00:20:59,679
get into trouble

593
00:20:59,679 --> 00:21:00,799
so

594
00:21:00,799 --> 00:21:02,640
for that purpose they have used this

595
00:21:02,640 --> 00:21:03,520
sort of

596
00:21:03,520 --> 00:21:05,440
heterogeneous redundancy

597
00:21:05,440 --> 00:21:08,240
for um gps for example the gps goes for

598
00:21:08,240 --> 00:21:09,280
a toss

599
00:21:09,280 --> 00:21:12,080
we can use the barometer or altimeter

600
00:21:12,080 --> 00:21:13,840
outputs to just to make sure

601
00:21:13,840 --> 00:21:16,960
is everything fine or something is being

602
00:21:16,960 --> 00:21:18,880
attacked or something like that

603
00:21:18,880 --> 00:21:22,640
so this is a popular way that we use now

604
00:21:22,640 --> 00:21:25,760
can we do something better

605
00:21:25,919 --> 00:21:28,640
so basically now

606
00:21:28,640 --> 00:21:30,480
there are some optimizations we can do

607
00:21:30,480 --> 00:21:33,520
here instead of three module triple

608
00:21:33,520 --> 00:21:35,919
module redundancy we can

609
00:21:35,919 --> 00:21:37,280
optimize one

610
00:21:37,280 --> 00:21:38,000
uh

611
00:21:38,000 --> 00:21:40,320
and having two modules with the new

612
00:21:40,320 --> 00:21:42,159
capability called checkpoints so you

613
00:21:42,159 --> 00:21:44,720
basically take snapshots and

614
00:21:44,720 --> 00:21:47,200
check checkpoints as you execute when

615
00:21:47,200 --> 00:21:48,960
there is a problem you can always roll

616
00:21:48,960 --> 00:21:53,120
back or roll forward to um

617
00:21:53,120 --> 00:21:55,360
to regain the stability

618
00:21:55,360 --> 00:21:57,679
so what really happens is you got rid of

619
00:21:57,679 --> 00:22:01,200
one so it directly saves power

620
00:22:01,200 --> 00:22:03,280
and but you pay for checkpointing

621
00:22:03,280 --> 00:22:04,799
penalty

622
00:22:04,799 --> 00:22:07,760
uh look at the on the on the right side

623
00:22:07,760 --> 00:22:09,600
uh it's even better

624
00:22:09,600 --> 00:22:12,480
uh so what really happens is uh you got

625
00:22:12,480 --> 00:22:13,520
rid of

626
00:22:13,520 --> 00:22:14,559
the second

627
00:22:14,559 --> 00:22:18,720
also not 100 though uh we keep keep that

628
00:22:18,720 --> 00:22:20,320
on standby

629
00:22:20,320 --> 00:22:21,919
and whenever you want to run whenever

630
00:22:21,919 --> 00:22:24,880
there is a fault on module one

631
00:22:24,880 --> 00:22:27,200
module two is always ready to run from

632
00:22:27,200 --> 00:22:29,039
the previous checkpoint

633
00:22:29,039 --> 00:22:31,280
this this is very valuable to perform

634
00:22:31,280 --> 00:22:33,760
minimal risk maneuvers um things like

635
00:22:33,760 --> 00:22:34,990
let's say

636
00:22:34,990 --> 00:22:36,159
[Music]

637
00:22:36,159 --> 00:22:38,840
let's take an example on the car

638
00:22:38,840 --> 00:22:40,640
um

639
00:22:40,640 --> 00:22:42,480
let's say the brake fail

640
00:22:42,480 --> 00:22:45,679
uh or some or some uh

641
00:22:45,679 --> 00:22:48,880
cpu failed what can you do um the best

642
00:22:48,880 --> 00:22:49,600
thing

643
00:22:49,600 --> 00:22:52,080
would be to bring your system

644
00:22:52,080 --> 00:22:55,440
to the safe state uh such as such that

645
00:22:55,440 --> 00:22:58,080
no accidents can happen so

646
00:22:58,080 --> 00:22:59,840
uh it will try to bring you bring the

647
00:22:59,840 --> 00:23:00,640
car

648
00:23:00,640 --> 00:23:02,400
uh maybe

649
00:23:02,400 --> 00:23:05,200
try to stop in a safe place so for that

650
00:23:05,200 --> 00:23:09,039
to happen uh you need the module two to

651
00:23:09,039 --> 00:23:12,080
come up and then do some minimal stuff

652
00:23:12,080 --> 00:23:14,559
uh so these are ongoing research here

653
00:23:14,559 --> 00:23:16,720
and then we are trying to see which one

654
00:23:16,720 --> 00:23:18,720
um is more

655
00:23:18,720 --> 00:23:19,840
uh

656
00:23:19,840 --> 00:23:21,919
suitable for these kind of applications

657
00:23:21,919 --> 00:23:24,240
of course

658
00:23:24,480 --> 00:23:26,880
it looks simpler than

659
00:23:26,880 --> 00:23:28,880
how we can implement basically

660
00:23:28,880 --> 00:23:31,120
and

661
00:23:31,280 --> 00:23:32,159
i think

662
00:23:32,159 --> 00:23:34,880
yeah we will see some progress

663
00:23:34,880 --> 00:23:36,400
so

664
00:23:36,400 --> 00:23:40,159
next category is at the soc and cpu

665
00:23:40,159 --> 00:23:41,679
level

666
00:23:41,679 --> 00:23:43,279
you'll see the next threat as fault

667
00:23:43,279 --> 00:23:46,000
rejection basically

668
00:23:46,000 --> 00:23:48,559
you introduce a fault into the system

669
00:23:48,559 --> 00:23:50,799
either naturally or unnaturally

670
00:23:50,799 --> 00:23:53,200
and make the system deviate from its

671
00:23:53,200 --> 00:23:54,960
expected behavior

672
00:23:54,960 --> 00:23:57,760
uh i just put a

673
00:23:57,760 --> 00:24:00,240
figure here just to illustrate right so

674
00:24:00,240 --> 00:24:02,159
let's say the drone is uh

675
00:24:02,159 --> 00:24:04,640
extremely hot flying in abu dhabi's

676
00:24:04,640 --> 00:24:05,919
summertime

677
00:24:05,919 --> 00:24:07,760
and from the packaging material there is

678
00:24:07,760 --> 00:24:10,159
an alpha particle and then that hits

679
00:24:10,159 --> 00:24:12,640
the sram cell

680
00:24:12,640 --> 00:24:14,720
and

681
00:24:14,720 --> 00:24:17,440
yeah there is no ecc because these are

682
00:24:17,440 --> 00:24:21,039
iods and small devices ecce is an error

683
00:24:21,039 --> 00:24:22,880
correcting code mechanism that comes up

684
00:24:22,880 --> 00:24:25,679
with its cost the area power

685
00:24:25,679 --> 00:24:28,480
all shoots up by approximately 30

686
00:24:28,480 --> 00:24:30,799
so some of these low cost devices don't

687
00:24:30,799 --> 00:24:34,320
have that and what happens is some data

688
00:24:34,320 --> 00:24:36,080
or something got flipped let's say the

689
00:24:36,080 --> 00:24:36,450
sign

690
00:24:36,450 --> 00:24:37,760
[Music]

691
00:24:37,760 --> 00:24:38,880
positive

692
00:24:38,880 --> 00:24:42,880
40 became negative 40 and

693
00:24:42,880 --> 00:24:44,960
that caused the program to crash and

694
00:24:44,960 --> 00:24:47,600
then perform a wrong maneuver

695
00:24:47,600 --> 00:24:50,080
so that's uh

696
00:24:50,080 --> 00:24:53,279
that's still very bad so what is the

697
00:24:53,279 --> 00:24:55,520
recommended option for that

698
00:24:55,520 --> 00:24:57,200
on the left side you see

699
00:24:57,200 --> 00:24:59,760
without anything let's say today

700
00:24:59,760 --> 00:25:03,279
if there's a fault and the logic cpu or

701
00:25:03,279 --> 00:25:04,720
anything it is like anything it could be

702
00:25:04,720 --> 00:25:06,320
microcontroller

703
00:25:06,320 --> 00:25:08,720
or a machine learning engine whatever it

704
00:25:08,720 --> 00:25:10,480
is it does a

705
00:25:10,480 --> 00:25:12,880
incorrect behavior

706
00:25:12,880 --> 00:25:14,559
on the right side this is something we

707
00:25:14,559 --> 00:25:17,039
are proposing and working on

708
00:25:17,039 --> 00:25:18,720
uh is

709
00:25:18,720 --> 00:25:22,240
by basically augmenting the logic

710
00:25:22,240 --> 00:25:25,279
with a monitor or a rule checker which

711
00:25:25,279 --> 00:25:28,000
is a machine learning model that

712
00:25:28,000 --> 00:25:29,520
basically checks

713
00:25:29,520 --> 00:25:32,720
the the behavior of this piece of logic

714
00:25:32,720 --> 00:25:34,640
and also sees

715
00:25:34,640 --> 00:25:37,679
what action it is taking so

716
00:25:37,679 --> 00:25:41,200
and if that action is wrong

717
00:25:41,520 --> 00:25:44,320
and then it checks its rules basically

718
00:25:44,320 --> 00:25:46,720
and then see if there's a violation

719
00:25:46,720 --> 00:25:48,559
it takes over

720
00:25:48,559 --> 00:25:50,320
brings the system to a safe secure and

721
00:25:50,320 --> 00:25:52,799
reliable state

722
00:25:52,799 --> 00:25:56,480
so this is formally verifiable because

723
00:25:56,480 --> 00:25:59,120
we may not be able to formally verify

724
00:25:59,120 --> 00:26:01,279
and test the heck off uh out of all

725
00:26:01,279 --> 00:26:03,600
these logic just to be really big right

726
00:26:03,600 --> 00:26:05,679
let's say linux it's a million lines of

727
00:26:05,679 --> 00:26:08,000
code and then

728
00:26:08,000 --> 00:26:10,640
it's really hard so this one

729
00:26:10,640 --> 00:26:13,760
is much smaller and simpler compared to

730
00:26:13,760 --> 00:26:15,600
uh what you see on the left side

731
00:26:15,600 --> 00:26:17,120
basically the logic

732
00:26:17,120 --> 00:26:19,600
so this is really relatively easy

733
00:26:19,600 --> 00:26:21,279
and these have

734
00:26:21,279 --> 00:26:22,400
rules

735
00:26:22,400 --> 00:26:24,159
uh you can have rules for security

736
00:26:24,159 --> 00:26:26,640
safety reliability anything you name it

737
00:26:26,640 --> 00:26:28,799
and then these are human readable

738
00:26:28,799 --> 00:26:31,279
auditable and learnable rules

739
00:26:31,279 --> 00:26:34,240
so um let's say we step into a situation

740
00:26:34,240 --> 00:26:38,480
which is not known earlier um and the

741
00:26:38,480 --> 00:26:41,200
the rule checker stepped in and it did

742
00:26:41,200 --> 00:26:43,520
some action to bring the machine

743
00:26:43,520 --> 00:26:46,960
the safe state and now it knows okay and

744
00:26:46,960 --> 00:26:50,000
there was this condition and then i i

745
00:26:50,000 --> 00:26:53,120
i better learn so this next time

746
00:26:53,120 --> 00:26:55,840
uh i'll be more safe and more

747
00:26:55,840 --> 00:26:56,720
uh

748
00:26:56,720 --> 00:26:58,240
secure

749
00:26:58,240 --> 00:27:03,279
than before and it also uses um

750
00:27:03,279 --> 00:27:04,960
the next page i will show you some

751
00:27:04,960 --> 00:27:07,120
things here basically humans are also in

752
00:27:07,120 --> 00:27:09,120
the loop so

753
00:27:09,120 --> 00:27:11,200
it doesn't just do learn or whatever by

754
00:27:11,200 --> 00:27:12,159
itself

755
00:27:12,159 --> 00:27:14,960
it does with consulting uh consulting

756
00:27:14,960 --> 00:27:17,919
the experts so okay so this one

757
00:27:17,919 --> 00:27:19,039
let me

758
00:27:19,039 --> 00:27:20,799
elaborate a little bit more

759
00:27:20,799 --> 00:27:21,840
so

760
00:27:21,840 --> 00:27:24,000
the rules as i mentioned before safety

761
00:27:24,000 --> 00:27:26,320
rules or security rules

762
00:27:26,320 --> 00:27:28,320
we can begin with some initial set of

763
00:27:28,320 --> 00:27:30,080
rules and

764
00:27:30,080 --> 00:27:31,840
let's say the security expert or safety

765
00:27:31,840 --> 00:27:35,520
expert writes certain rules

766
00:27:35,520 --> 00:27:36,960
and

767
00:27:36,960 --> 00:27:38,640
rules are learned

768
00:27:38,640 --> 00:27:41,279
and you have the monitor here so what

769
00:27:41,279 --> 00:27:43,039
really happens is when they when the

770
00:27:43,039 --> 00:27:45,440
target logic

771
00:27:45,440 --> 00:27:48,080
let's say behaves badly

772
00:27:48,080 --> 00:27:50,799
any rule is violated and then it puts

773
00:27:50,799 --> 00:27:53,200
the logic into quarantine it could be

774
00:27:53,200 --> 00:27:54,080
maybe

775
00:27:54,080 --> 00:27:55,120
let's say

776
00:27:55,120 --> 00:27:57,039
something went wrong and

777
00:27:57,039 --> 00:27:59,360
simply restarting that logic or

778
00:27:59,360 --> 00:28:01,600
something something like that could

779
00:28:01,600 --> 00:28:04,480
potentially solve the problem but

780
00:28:04,480 --> 00:28:06,320
it puts in quarantine

781
00:28:06,320 --> 00:28:08,399
and then it makes sure the system goes

782
00:28:08,399 --> 00:28:11,520
to safe or secure or reliable state that

783
00:28:11,520 --> 00:28:14,840
causes no harm or hazard for anybody

784
00:28:14,840 --> 00:28:19,200
and after that it learns it learns that

785
00:28:19,200 --> 00:28:20,720
piece of thing

786
00:28:20,720 --> 00:28:23,600
so that next time

787
00:28:23,600 --> 00:28:27,200
you don't have to basically

788
00:28:27,200 --> 00:28:28,960
always put the system into safe or

789
00:28:28,960 --> 00:28:31,760
secure state

790
00:28:31,760 --> 00:28:33,360
there could be other ways to handle that

791
00:28:33,360 --> 00:28:34,960
situation

792
00:28:34,960 --> 00:28:36,159
so

793
00:28:36,159 --> 00:28:37,679
that's about this one if you have any

794
00:28:37,679 --> 00:28:40,159
questions we can address at the end

795
00:28:40,159 --> 00:28:43,120
uh the next thread is a

796
00:28:43,120 --> 00:28:44,799
supply chain attacks

797
00:28:44,799 --> 00:28:45,679
so

798
00:28:45,679 --> 00:28:48,399
both hardware and software

799
00:28:48,399 --> 00:28:50,080
can

800
00:28:50,080 --> 00:28:52,480
can be attacked for example let me show

801
00:28:52,480 --> 00:28:54,559
you here on the bottom

802
00:28:54,559 --> 00:28:56,880
this is about hardware

803
00:28:56,880 --> 00:28:59,840
so let's say design company makes

804
00:28:59,840 --> 00:29:01,520
the design for the chip

805
00:29:01,520 --> 00:29:04,720
and it outsources manufacturing and

806
00:29:04,720 --> 00:29:07,600
testing and fabrication

807
00:29:07,600 --> 00:29:08,320
and

808
00:29:08,320 --> 00:29:11,120
uh let's assume that is uncontrolled

809
00:29:11,120 --> 00:29:12,480
maybe it's in a different country and

810
00:29:12,480 --> 00:29:15,440
then geopolitical things can come in and

811
00:29:15,440 --> 00:29:18,000
then let's say you don't trust so what

812
00:29:18,000 --> 00:29:20,720
really happens is potentially ip theft

813
00:29:20,720 --> 00:29:23,679
or counterfeiting or overproduction or

814
00:29:23,679 --> 00:29:25,440
anything can happen where

815
00:29:25,440 --> 00:29:28,240
your you ip or

816
00:29:28,240 --> 00:29:30,799
your trade secret whatever it is is uh

817
00:29:30,799 --> 00:29:31,679
lost

818
00:29:31,679 --> 00:29:33,600
we don't want that to happen

819
00:29:33,600 --> 00:29:35,440
so in this uh

820
00:29:35,440 --> 00:29:36,880
thing we will look at the first one

821
00:29:36,880 --> 00:29:39,679
basically which is related to hardware

822
00:29:39,679 --> 00:29:41,279
and software things

823
00:29:41,279 --> 00:29:42,159
are

824
00:29:42,159 --> 00:29:44,640
not in scope for today because these are

825
00:29:44,640 --> 00:29:46,559
basically encryption and basically

826
00:29:46,559 --> 00:29:48,080
attestation and stuff

827
00:29:48,080 --> 00:29:51,600
so we will look at the logic locking

828
00:29:51,600 --> 00:29:53,279
which is a

829
00:29:53,279 --> 00:29:56,559
basically old technique but it is really

830
00:29:56,559 --> 00:29:58,480
getting matured now

831
00:29:58,480 --> 00:30:01,200
uh basically a key based

832
00:30:01,200 --> 00:30:02,399
locking

833
00:30:02,399 --> 00:30:04,080
just like you

834
00:30:04,080 --> 00:30:07,520
do it for a software or let's say

835
00:30:07,520 --> 00:30:09,039
you have a password to log into your

836
00:30:09,039 --> 00:30:11,440
computer similarly there's there are

837
00:30:11,440 --> 00:30:13,360
keys that can

838
00:30:13,360 --> 00:30:16,159
that can be uh attached to the system

839
00:30:16,159 --> 00:30:18,320
if the key is invalid this is the system

840
00:30:18,320 --> 00:30:20,240
won't function as expected

841
00:30:20,240 --> 00:30:22,799
and only with that key

842
00:30:22,799 --> 00:30:24,720
that function works

843
00:30:24,720 --> 00:30:26,640
so from the

844
00:30:26,640 --> 00:30:28,320
from the left hand side you see the

845
00:30:28,320 --> 00:30:29,919
design goes through

846
00:30:29,919 --> 00:30:30,880
and

847
00:30:30,880 --> 00:30:33,679
in the middle you lock you lock that

848
00:30:33,679 --> 00:30:35,039
piece of hardware

849
00:30:35,039 --> 00:30:37,360
and that key stays with you

850
00:30:37,360 --> 00:30:40,159
right for example in this case a 128 bit

851
00:30:40,159 --> 00:30:40,960
key

852
00:30:40,960 --> 00:30:42,399
that stays with you

853
00:30:42,399 --> 00:30:45,600
you outsource the design to a foundry

854
00:30:45,600 --> 00:30:47,440
and as long as

855
00:30:47,440 --> 00:30:49,279
it's outside

856
00:30:49,279 --> 00:30:51,279
the chip is locked

857
00:30:51,279 --> 00:30:53,200
so it's not going to function

858
00:30:53,200 --> 00:30:55,520
even if you try to modify or try to

859
00:30:55,520 --> 00:30:57,840
inject some logic or try to reverse

860
00:30:57,840 --> 00:30:59,679
engineer or copy

861
00:30:59,679 --> 00:31:01,039
it's going to be dead

862
00:31:01,039 --> 00:31:02,880
it's not going to be for

863
00:31:02,880 --> 00:31:06,559
useful for anything that anybody wants

864
00:31:06,559 --> 00:31:08,240
so then

865
00:31:08,240 --> 00:31:09,840
after the manufacture the chip comes

866
00:31:09,840 --> 00:31:11,039
back to you

867
00:31:11,039 --> 00:31:13,360
you insert that particular key

868
00:31:13,360 --> 00:31:15,039
and the chip works

869
00:31:15,039 --> 00:31:16,640
that's the idea

870
00:31:16,640 --> 00:31:18,399
of

871
00:31:18,399 --> 00:31:20,320
logic locking basically

872
00:31:20,320 --> 00:31:22,559
and the the principle we use is

873
00:31:22,559 --> 00:31:25,200
difference in depth

874
00:31:25,200 --> 00:31:27,679
okay so next one

875
00:31:27,679 --> 00:31:29,440
um

876
00:31:29,440 --> 00:31:33,760
control flow hijack so on arm and x86

877
00:31:33,760 --> 00:31:36,240
platforms we already have

878
00:31:36,240 --> 00:31:38,000
such mechanisms

879
00:31:38,000 --> 00:31:40,159
but not on the risk five side

880
00:31:40,159 --> 00:31:42,080
so basically things like

881
00:31:42,080 --> 00:31:43,760
buffer overrun

882
00:31:43,760 --> 00:31:47,200
um can actually smash the stack

883
00:31:47,200 --> 00:31:48,159
uh

884
00:31:48,159 --> 00:31:50,399
using return oriented programming

885
00:31:50,399 --> 00:31:52,480
and you could also do uh tampering of

886
00:31:52,480 --> 00:31:54,159
the code to perform

887
00:31:54,159 --> 00:31:56,799
a call or a jump to invalid function

888
00:31:56,799 --> 00:31:58,720
using

889
00:31:58,720 --> 00:32:02,320
several techniques you can uh

890
00:32:02,320 --> 00:32:06,159
you can figure it out uh from the uh

891
00:32:06,159 --> 00:32:08,799
from the picture from below right so i

892
00:32:08,799 --> 00:32:12,880
mentioned uh two attacks here so one is

893
00:32:12,880 --> 00:32:14,720
a stack corruption

894
00:32:14,720 --> 00:32:17,279
so this was the original stack and then

895
00:32:17,279 --> 00:32:19,679
somebody tried to do a buffer overflow

896
00:32:19,679 --> 00:32:21,120
or code injection

897
00:32:21,120 --> 00:32:23,440
and this stack is gone so what happens

898
00:32:23,440 --> 00:32:25,279
when you try to return

899
00:32:25,279 --> 00:32:28,320
uh call a red instruction it just goes

900
00:32:28,320 --> 00:32:29,679
to a bad code

901
00:32:29,679 --> 00:32:32,159
another scenario is uh

902
00:32:32,159 --> 00:32:34,480
you wanted to jump to

903
00:32:34,480 --> 00:32:36,480
a function called test

904
00:32:36,480 --> 00:32:37,919
but

905
00:32:37,919 --> 00:32:39,810
you try to attack

906
00:32:39,810 --> 00:32:41,120
[Music]

907
00:32:41,120 --> 00:32:42,960
some of the registers or some memory

908
00:32:42,960 --> 00:32:44,000
content

909
00:32:44,000 --> 00:32:45,440
so that made

910
00:32:45,440 --> 00:32:46,240
uh

911
00:32:46,240 --> 00:32:49,039
the the the flow to jump to somewhere

912
00:32:49,039 --> 00:32:51,360
else so basically you bypass this

913
00:32:51,360 --> 00:32:53,039
critical piece of code

914
00:32:53,039 --> 00:32:55,039
so these two things

915
00:32:55,039 --> 00:32:57,519
let's see how uh

916
00:32:57,519 --> 00:32:58,960
we could mitigate so

917
00:32:58,960 --> 00:33:01,519
the currently proposed mitigation for

918
00:33:01,519 --> 00:33:02,960
cfi

919
00:33:02,960 --> 00:33:06,159
or uh one is a using a shadow stack so

920
00:33:06,159 --> 00:33:09,279
whenever the master stack

921
00:33:09,279 --> 00:33:11,200
is modified the shadow stack is also

922
00:33:11,200 --> 00:33:14,000
modified whenever there's a mismatch

923
00:33:14,000 --> 00:33:15,760
you know something got corrupted and

924
00:33:15,760 --> 00:33:16,799
then

925
00:33:16,799 --> 00:33:19,039
software can take corrective actions

926
00:33:19,039 --> 00:33:21,360
second one is uh what is being proposed

927
00:33:21,360 --> 00:33:24,399
is to use landing sites where

928
00:33:24,399 --> 00:33:26,080
there'll be a register

929
00:33:26,080 --> 00:33:28,399
so you load some

930
00:33:28,399 --> 00:33:32,399
unique signature before doing a jump

931
00:33:32,399 --> 00:33:34,720
and after after the jump the first

932
00:33:34,720 --> 00:33:38,559
instruction has to will check

933
00:33:38,960 --> 00:33:41,200
this value here right so compiler

934
00:33:41,200 --> 00:33:43,519
inserts these uh labels basically and

935
00:33:43,519 --> 00:33:45,679
then if they don't match

936
00:33:45,679 --> 00:33:48,480
uh it causes an exception so this way

937
00:33:48,480 --> 00:33:51,200
even even if you have to compile

938
00:33:51,200 --> 00:33:52,559
the code

939
00:33:52,559 --> 00:33:54,559
it will protect

940
00:33:54,559 --> 00:33:56,240
such sort of

941
00:33:56,240 --> 00:33:57,440
attacks

942
00:33:57,440 --> 00:33:59,679
uh this already is proposed and it's

943
00:33:59,679 --> 00:34:01,279
already available in other architectures

944
00:34:01,279 --> 00:34:03,360
let's see what something new

945
00:34:03,360 --> 00:34:06,320
we can talk about here so this one talks

946
00:34:06,320 --> 00:34:07,840
about

947
00:34:07,840 --> 00:34:10,159
using machine learning um

948
00:34:10,159 --> 00:34:12,239
of course the previous ones are needed

949
00:34:12,239 --> 00:34:15,040
you need the shadow stack you need

950
00:34:15,040 --> 00:34:17,520
the landing sites and stuff but

951
00:34:17,520 --> 00:34:19,440
can we do something better

952
00:34:19,440 --> 00:34:22,079
uh to address uh future challenges in

953
00:34:22,079 --> 00:34:24,159
the control flow integrity like control

954
00:34:24,159 --> 00:34:26,800
flow blend bending or whatever what if

955
00:34:26,800 --> 00:34:29,280
there are no straightforward ways to

956
00:34:29,280 --> 00:34:31,280
fix them so this talks about using

957
00:34:31,280 --> 00:34:32,639
machine learning

958
00:34:32,639 --> 00:34:33,679
to

959
00:34:33,679 --> 00:34:36,000
look at

960
00:34:36,000 --> 00:34:37,599
the flow of

961
00:34:37,599 --> 00:34:39,599
uh instructions basically looking at the

962
00:34:39,599 --> 00:34:42,000
fetch unit and the decode unit and then

963
00:34:42,000 --> 00:34:45,359
trying to learn or trying to infer

964
00:34:45,359 --> 00:34:48,000
uh from what you learned

965
00:34:48,000 --> 00:34:52,239
any specific patterns that that will

966
00:34:52,239 --> 00:34:54,960
deviate or hijack your control flow

967
00:34:54,960 --> 00:34:57,119
and then taking corrective actions you

968
00:34:57,119 --> 00:34:57,920
can

969
00:34:57,920 --> 00:35:02,000
write an exception or you can

970
00:35:02,000 --> 00:35:04,480
can maybe abort the program or whatever

971
00:35:04,480 --> 00:35:07,119
so this research is ongoing and then i

972
00:35:07,119 --> 00:35:08,720
just wanted to quickly

973
00:35:08,720 --> 00:35:10,960
share this

974
00:35:10,960 --> 00:35:13,280
before we go to software level software

975
00:35:13,280 --> 00:35:16,079
level we have two things to share here

976
00:35:16,079 --> 00:35:18,400
first one is attack on the data in use

977
00:35:18,400 --> 00:35:19,680
for example

978
00:35:19,680 --> 00:35:20,480
uh

979
00:35:20,480 --> 00:35:21,440
today

980
00:35:21,440 --> 00:35:25,599
uh the the code or data at rest uh is

981
00:35:25,599 --> 00:35:27,359
all encrypted

982
00:35:27,359 --> 00:35:29,520
and then that is on the communication

983
00:35:29,520 --> 00:35:33,119
channel is also encrypted but what if

984
00:35:33,119 --> 00:35:35,839
somebody attacks on the device

985
00:35:35,839 --> 00:35:37,520
while it is being used so that's

986
00:35:37,520 --> 00:35:38,640
something

987
00:35:38,640 --> 00:35:40,880
uh on the other platforms we call

988
00:35:40,880 --> 00:35:43,119
confidential computing where it could be

989
00:35:43,119 --> 00:35:46,320
encrypted or there are uh hard isolation

990
00:35:46,320 --> 00:35:47,920
barriers to make sure

991
00:35:47,920 --> 00:35:49,200
nobody can

992
00:35:49,200 --> 00:35:51,839
get to the data or whatever it is

993
00:35:51,839 --> 00:35:53,440
uh so there are

994
00:35:53,440 --> 00:35:55,440
malwares or something you can install

995
00:35:55,440 --> 00:35:57,200
and then trying to

996
00:35:57,200 --> 00:35:58,480
get

997
00:35:58,480 --> 00:36:01,200
somebody else's data this is most

998
00:36:01,200 --> 00:36:03,680
dominant on cloud systems where there

999
00:36:03,680 --> 00:36:06,320
will be multi-tenancy so on the same

1000
00:36:06,320 --> 00:36:08,079
server you will have

1001
00:36:08,079 --> 00:36:10,000
code and data running from let's say two

1002
00:36:10,000 --> 00:36:12,800
banks and then what if the other bank

1003
00:36:12,800 --> 00:36:15,200
wants to snoop into uh

1004
00:36:15,200 --> 00:36:17,760
the other banks uh data

1005
00:36:17,760 --> 00:36:21,680
but on our use case let's say from a

1006
00:36:21,680 --> 00:36:24,800
edge or a drone sort of

1007
00:36:24,800 --> 00:36:28,880
system so far the multi-tenancy

1008
00:36:28,880 --> 00:36:30,560
has not

1009
00:36:30,560 --> 00:36:33,359
has not become a major use case

1010
00:36:33,359 --> 00:36:35,359
so um

1011
00:36:35,359 --> 00:36:36,960
but things like uh

1012
00:36:36,960 --> 00:36:39,280
keeping the data

1013
00:36:39,280 --> 00:36:41,359
private and uh

1014
00:36:41,359 --> 00:36:42,720
not tampered

1015
00:36:42,720 --> 00:36:44,160
is something that's that'll be very

1016
00:36:44,160 --> 00:36:45,760
useful for example

1017
00:36:45,760 --> 00:36:48,560
a drone camera that is surveilling

1018
00:36:48,560 --> 00:36:49,839
uh

1019
00:36:49,839 --> 00:36:54,000
it doesn't want the data to be leaked so

1020
00:36:54,000 --> 00:36:56,800
the interesting one will be just a data

1021
00:36:56,800 --> 00:36:57,920
enclave

1022
00:36:57,920 --> 00:37:01,280
uh and application and vm enclaves are

1023
00:37:01,280 --> 00:37:02,480
at this point of time for this

1024
00:37:02,480 --> 00:37:04,720
particular device is not relevant but

1025
00:37:04,720 --> 00:37:07,119
for clouds and laptops and phones it may

1026
00:37:07,119 --> 00:37:09,599
be so we will take a look at uh the

1027
00:37:09,599 --> 00:37:12,240
confidential computing uh a bit

1028
00:37:12,240 --> 00:37:15,440
uh a gentle introduction what

1029
00:37:15,440 --> 00:37:17,440
we are trying to do on the respire

1030
00:37:17,440 --> 00:37:20,480
foundation basically to

1031
00:37:20,880 --> 00:37:23,040
build a partition here

1032
00:37:23,040 --> 00:37:25,040
on the left hand side what you see is

1033
00:37:25,040 --> 00:37:28,079
non-conf non-confidential

1034
00:37:28,079 --> 00:37:30,880
vms or applications or

1035
00:37:30,880 --> 00:37:33,440
even operating systems on the right side

1036
00:37:33,440 --> 00:37:35,520
using um

1037
00:37:35,520 --> 00:37:36,800
hardware techniques like memory

1038
00:37:36,800 --> 00:37:38,160
isolation

1039
00:37:38,160 --> 00:37:40,240
integrity and replay protection road of

1040
00:37:40,240 --> 00:37:41,440
trust

1041
00:37:41,440 --> 00:37:43,359
iomuse

1042
00:37:43,359 --> 00:37:45,920
and whole lot of hardware support

1043
00:37:45,920 --> 00:37:47,839
we are building on top

1044
00:37:47,839 --> 00:37:50,400
in the mode firmware

1045
00:37:50,400 --> 00:37:52,079
a mechanism to

1046
00:37:52,079 --> 00:37:54,000
isolate

1047
00:37:54,000 --> 00:37:56,160
the untrusted side

1048
00:37:56,160 --> 00:37:58,000
with the trusted side

1049
00:37:58,000 --> 00:38:00,079
the grey boxes that you see

1050
00:38:00,079 --> 00:38:01,280
are

1051
00:38:01,280 --> 00:38:03,359
what you call confidential

1052
00:38:03,359 --> 00:38:06,160
vms so you can have your data here which

1053
00:38:06,160 --> 00:38:08,160
is isolated from the rest of the world

1054
00:38:08,160 --> 00:38:10,240
and then you can even have it encrypted

1055
00:38:10,240 --> 00:38:11,920
so

1056
00:38:11,920 --> 00:38:14,160
you can protect the

1057
00:38:14,160 --> 00:38:16,160
confidentiality and integrity

1058
00:38:16,160 --> 00:38:17,440
of this

1059
00:38:17,440 --> 00:38:19,200
the secret that you have

1060
00:38:19,200 --> 00:38:20,000
uh

1061
00:38:20,000 --> 00:38:24,079
as of now um the idea is to just use

1062
00:38:24,079 --> 00:38:26,480
existing instruction set

1063
00:38:26,480 --> 00:38:28,720
and just use apis and interfaces to the

1064
00:38:28,720 --> 00:38:30,160
more firmware

1065
00:38:30,160 --> 00:38:31,760
and then uh

1066
00:38:31,760 --> 00:38:33,440
eventually if there are any ice are

1067
00:38:33,440 --> 00:38:34,560
needed

1068
00:38:34,560 --> 00:38:36,960
we will try to extend

1069
00:38:36,960 --> 00:38:40,320
so this is a defense in depth game so

1070
00:38:40,320 --> 00:38:43,440
now you see how we actually map the zero

1071
00:38:43,440 --> 00:38:46,560
responsible to each of these

1072
00:38:46,560 --> 00:38:48,640
features that we talked about the last

1073
00:38:48,640 --> 00:38:50,320
one

1074
00:38:50,320 --> 00:38:51,760
is about

1075
00:38:51,760 --> 00:38:54,320
the code and data that's not on the cpu

1076
00:38:54,320 --> 00:38:55,200
side

1077
00:38:55,200 --> 00:38:59,200
so um let me give an introduction

1078
00:38:59,200 --> 00:39:00,480
the trend

1079
00:39:00,480 --> 00:39:03,920
in the past decade has been

1080
00:39:04,160 --> 00:39:06,400
more and more

1081
00:39:06,400 --> 00:39:10,720
demand for um compute

1082
00:39:10,720 --> 00:39:14,160
which the cpu core is not able to really

1083
00:39:14,160 --> 00:39:16,320
cater so we've been going in the

1084
00:39:16,320 --> 00:39:18,960
heterogeneous special hardware path

1085
00:39:18,960 --> 00:39:21,599
that that's how we we got gpus that's

1086
00:39:21,599 --> 00:39:24,530
that's how we got ai accelerators

1087
00:39:24,530 --> 00:39:26,160
[Music]

1088
00:39:26,160 --> 00:39:29,599
so what really happens is the te

1089
00:39:29,599 --> 00:39:31,520
if you know trusted execution

1090
00:39:31,520 --> 00:39:33,599
environment

1091
00:39:33,599 --> 00:39:35,520
they are designed particularly for the

1092
00:39:35,520 --> 00:39:37,920
cpu so the code and data that is

1093
00:39:37,920 --> 00:39:39,520
confined to the cpu is only being

1094
00:39:39,520 --> 00:39:41,520
protected

1095
00:39:41,520 --> 00:39:44,079
anything other than that let's say gpu

1096
00:39:44,079 --> 00:39:46,400
or let's say peripheral

1097
00:39:46,400 --> 00:39:47,920
you have a peripheral that is attached

1098
00:39:47,920 --> 00:39:51,119
to the pce uh pcie and then

1099
00:39:51,119 --> 00:39:53,440
what happens to the coded data it's it's

1100
00:39:53,440 --> 00:39:56,079
left open now

1101
00:39:56,079 --> 00:39:57,520
and

1102
00:39:57,520 --> 00:40:00,320
pretty much the tcb is since

1103
00:40:00,320 --> 00:40:03,040
fixed at the design time it cannot be

1104
00:40:03,040 --> 00:40:04,560
modified

1105
00:40:04,560 --> 00:40:06,560
at a later point so these are some

1106
00:40:06,560 --> 00:40:09,359
issues that prevent

1107
00:40:09,359 --> 00:40:10,560
protecting

1108
00:40:10,560 --> 00:40:13,520
the non-peri the non-cpu

1109
00:40:13,520 --> 00:40:15,920
or peripheral code and data

1110
00:40:15,920 --> 00:40:19,119
so with v weak isolation uh

1111
00:40:19,119 --> 00:40:21,359
you're going to have problems with it

1112
00:40:21,359 --> 00:40:23,280
uh both in confidentiality integrity

1113
00:40:23,280 --> 00:40:26,240
availability so let's see the before and

1114
00:40:26,240 --> 00:40:28,720
after here so before

1115
00:40:28,720 --> 00:40:32,000
you could have the te enclaves uh here

1116
00:40:32,000 --> 00:40:34,160
so these code and data are running on

1117
00:40:34,160 --> 00:40:35,760
the cpu

1118
00:40:35,760 --> 00:40:37,200
so these are isolated these are

1119
00:40:37,200 --> 00:40:38,480
protected already

1120
00:40:38,480 --> 00:40:39,680
but what about

1121
00:40:39,680 --> 00:40:43,119
these gpus and ai accelerators and the

1122
00:40:43,119 --> 00:40:45,760
lte peripheral that's attached

1123
00:40:45,760 --> 00:40:48,160
on the right side what we think

1124
00:40:48,160 --> 00:40:50,880
and what we propose is to have

1125
00:40:50,880 --> 00:40:53,920
enclaves extend

1126
00:40:53,920 --> 00:40:55,119
to these

1127
00:40:55,119 --> 00:40:58,960
devices as well so their memory

1128
00:40:58,960 --> 00:41:00,800
whatever the code and data running on

1129
00:41:00,800 --> 00:41:02,880
the gpu or machine learning they are

1130
00:41:02,880 --> 00:41:05,200
also now protected

1131
00:41:05,200 --> 00:41:09,119
so that will ensure a platform level uh

1132
00:41:09,119 --> 00:41:11,599
trusted execution environment this uh

1133
00:41:11,599 --> 00:41:14,640
has been prototyped um

1134
00:41:14,640 --> 00:41:16,240
on a keystone

1135
00:41:16,240 --> 00:41:18,640
uh platform and then we hope to extend

1136
00:41:18,640 --> 00:41:22,000
this even further for risk 5.

1137
00:41:22,000 --> 00:41:24,000
so that

1138
00:41:24,000 --> 00:41:26,480
sort of uh concludes the brief gentle

1139
00:41:26,480 --> 00:41:27,920
introduction to

1140
00:41:27,920 --> 00:41:30,800
the problem the kind of

1141
00:41:30,800 --> 00:41:35,359
solutions we we are thinking about and

1142
00:41:35,359 --> 00:41:37,440
so we will talk about the future

1143
00:41:37,440 --> 00:41:39,200
directions here

1144
00:41:39,200 --> 00:41:41,599
so we know cyber physical systems need

1145
00:41:41,599 --> 00:41:45,040
end-to-end security resilience and trust

1146
00:41:45,040 --> 00:41:46,079
and

1147
00:41:46,079 --> 00:41:48,720
zero trust principles that we seen

1148
00:41:48,720 --> 00:41:51,440
proliferate across the supply chain

1149
00:41:51,440 --> 00:41:53,920
and specifically for the drone

1150
00:41:53,920 --> 00:41:54,800
the

1151
00:41:54,800 --> 00:41:56,240
utm or

1152
00:41:56,240 --> 00:41:59,359
the uas traffic management so just like

1153
00:41:59,359 --> 00:42:00,800
your airplanes

1154
00:42:00,800 --> 00:42:02,960
the traffic management also extends to

1155
00:42:02,960 --> 00:42:04,800
the uh drone

1156
00:42:04,800 --> 00:42:07,680
class of devices they are now evolving

1157
00:42:07,680 --> 00:42:10,160
uh so security has a big role to play

1158
00:42:10,160 --> 00:42:11,280
there

1159
00:42:11,280 --> 00:42:14,880
uh and i would like to uh give a call to

1160
00:42:14,880 --> 00:42:17,280
action i think uh as a community

1161
00:42:17,280 --> 00:42:21,280
as a as researchers we need to um

1162
00:42:21,280 --> 00:42:23,520
accelerate this by bringing some

1163
00:42:23,520 --> 00:42:24,960
standardization to zero trust

1164
00:42:24,960 --> 00:42:27,680
architecture we don't want uh different

1165
00:42:27,680 --> 00:42:30,640
communities to develop divergent

1166
00:42:30,640 --> 00:42:31,839
solutions

1167
00:42:31,839 --> 00:42:33,520
uh there is one thing that's happening

1168
00:42:33,520 --> 00:42:35,680
in the list of communities uh

1169
00:42:35,680 --> 00:42:38,079
we are developing a platform security

1170
00:42:38,079 --> 00:42:40,720
architecture specification so anybody

1171
00:42:40,720 --> 00:42:43,440
who makes those five platforms can refer

1172
00:42:43,440 --> 00:42:44,400
to that

1173
00:42:44,400 --> 00:42:46,720
and then stay consistent and then more

1174
00:42:46,720 --> 00:42:48,079
secure

1175
00:42:48,079 --> 00:42:50,960
and as a community if you can build

1176
00:42:50,960 --> 00:42:54,720
open source reference platforms that

1177
00:42:54,720 --> 00:42:57,599
that addresses some of these challenges

1178
00:42:57,599 --> 00:42:58,880
and

1179
00:42:58,880 --> 00:43:01,680
complained with the zero trust and so

1180
00:43:01,680 --> 00:43:03,760
forth it will be fantastic

1181
00:43:03,760 --> 00:43:04,640
and

1182
00:43:04,640 --> 00:43:06,880
last but not not the least is uh

1183
00:43:06,880 --> 00:43:09,599
contribute to risk fives

1184
00:43:09,599 --> 00:43:11,200
security groups

1185
00:43:11,200 --> 00:43:12,800
you can join for example the trusted

1186
00:43:12,800 --> 00:43:14,640
computing group that talks about many of

1187
00:43:14,640 --> 00:43:16,079
the things we discussed

1188
00:43:16,079 --> 00:43:18,000
and then you can directly contribute to

1189
00:43:18,000 --> 00:43:20,800
the specifications and stuff

1190
00:43:20,800 --> 00:43:22,480
so with that

1191
00:43:22,480 --> 00:43:24,560
i conclude my talk

1192
00:43:24,560 --> 00:43:26,400
and then open up for

1193
00:43:26,400 --> 00:43:27,440
uh

1194
00:43:27,440 --> 00:43:28,480
questions

1195
00:43:28,480 --> 00:43:31,200
if we can address now it'd be fantastic

1196
00:43:31,200 --> 00:43:34,240
otherwise you can always contact me

1197
00:43:34,240 --> 00:43:37,760
thank you very much for the presentation

1198
00:43:37,760 --> 00:43:39,760
we do have some questions lined up in

1199
00:43:39,760 --> 00:43:42,560
the chat box

1200
00:43:42,560 --> 00:43:45,119
i think i can read them out loud to you

1201
00:43:45,119 --> 00:43:46,720
and if you want you can also check them

1202
00:43:46,720 --> 00:43:49,200
in the chat box

1203
00:43:49,200 --> 00:43:52,079
the first question is what is the metric

1204
00:43:52,079 --> 00:43:55,520
to calculate the severity of the threat

1205
00:43:55,520 --> 00:43:57,200
okay um

1206
00:43:57,200 --> 00:43:59,680
so if you uh let me take you to one of

1207
00:43:59,680 --> 00:44:01,440
the slides before

1208
00:44:01,440 --> 00:44:03,599
so um

1209
00:44:03,599 --> 00:44:07,200
okay so you see here uh what you do is

1210
00:44:07,200 --> 00:44:08,560
google

1211
00:44:08,560 --> 00:44:10,000
uh search

1212
00:44:10,000 --> 00:44:12,240
for this term cvss

1213
00:44:12,240 --> 00:44:14,319
v3 rating and then

1214
00:44:14,319 --> 00:44:16,319
there you get a

1215
00:44:16,319 --> 00:44:18,400
a questionnaire in a web page

1216
00:44:18,400 --> 00:44:23,040
where you think what you think is your

1217
00:44:23,119 --> 00:44:24,960
parameters like

1218
00:44:24,960 --> 00:44:27,440
let's say

1219
00:44:28,319 --> 00:44:30,960
i stands for integrity so for this

1220
00:44:30,960 --> 00:44:32,230
particular

1221
00:44:32,230 --> 00:44:33,520
[Music]

1222
00:44:33,520 --> 00:44:34,960
thread

1223
00:44:34,960 --> 00:44:37,200
integrity is most important and then

1224
00:44:37,200 --> 00:44:39,200
that value is high

1225
00:44:39,200 --> 00:44:41,119
similarly you put for

1226
00:44:41,119 --> 00:44:43,280
all other questions it asks

1227
00:44:43,280 --> 00:44:44,240
c

1228
00:44:44,240 --> 00:44:46,079
is for confidentiality a is for

1229
00:44:46,079 --> 00:44:48,079
availability so you fill up the

1230
00:44:48,079 --> 00:44:50,480
questionnaire and then it will bring you

1231
00:44:50,480 --> 00:44:52,880
a score that's going to be the cvrp

1232
00:44:52,880 --> 00:44:54,319
score

1233
00:44:54,319 --> 00:44:56,720
let me know if you need any help

1234
00:44:56,720 --> 00:44:57,839
offline

1235
00:44:57,839 --> 00:45:00,720
i hope that answered

1236
00:45:00,720 --> 00:45:03,040
okay

1237
00:45:03,040 --> 00:45:05,839
um next question is in risk 5 the

1238
00:45:05,839 --> 00:45:08,319
proposed cfi feature attacks are in

1239
00:45:08,319 --> 00:45:10,560
software level does it require any

1240
00:45:10,560 --> 00:45:13,839
privilege escalation at hardware level

1241
00:45:13,839 --> 00:45:16,160
okay

1242
00:45:16,480 --> 00:45:19,200
okay this proposed mechanisms are in

1243
00:45:19,200 --> 00:45:21,920
hardware and software and compiler level

1244
00:45:21,920 --> 00:45:24,640
basically so there will be certain

1245
00:45:24,640 --> 00:45:26,400
hardware changes like implementing a

1246
00:45:26,400 --> 00:45:28,800
shadow stack

1247
00:45:28,800 --> 00:45:30,800
and that doesn't need that's software

1248
00:45:30,800 --> 00:45:33,599
transparent whenever there's a mismatch

1249
00:45:33,599 --> 00:45:35,599
you will get an exception

1250
00:45:35,599 --> 00:45:37,839
but the other one

1251
00:45:37,839 --> 00:45:39,119
like i mentioned

1252
00:45:39,119 --> 00:45:42,319
there is a isa specifically for

1253
00:45:42,319 --> 00:45:45,280
the landing site so instruction change

1254
00:45:45,280 --> 00:45:47,760
compiler has to recompile your code and

1255
00:45:47,760 --> 00:45:50,240
then insert certain

1256
00:45:50,240 --> 00:45:51,359
tags

1257
00:45:51,359 --> 00:45:54,960
onto the runtime code and that's the how

1258
00:45:54,960 --> 00:45:57,440
it's going to work but the piece about

1259
00:45:57,440 --> 00:45:59,520
privilege escalation and hardware level

1260
00:45:59,520 --> 00:46:01,760
it's not quite clear maybe you can talk

1261
00:46:01,760 --> 00:46:02,960
to me

1262
00:46:02,960 --> 00:46:04,560
and we can have a chat

1263
00:46:04,560 --> 00:46:07,119
afterwards

1264
00:46:08,000 --> 00:46:10,240
thank you for answering this question

1265
00:46:10,240 --> 00:46:12,319
the third question is

1266
00:46:12,319 --> 00:46:14,319
what is your opinion on the many logic

1267
00:46:14,319 --> 00:46:16,160
 techniques and the text proposed

1268
00:46:16,160 --> 00:46:18,720
so far most of the proposed mechanisms

1269
00:46:18,720 --> 00:46:20,720
are broken but they are broken using

1270
00:46:20,720 --> 00:46:24,400
only simple benchmarks like the iss ones

1271
00:46:24,400 --> 00:46:26,319
how can those attacks

1272
00:46:26,319 --> 00:46:29,200
scale with bigger designs

1273
00:46:29,200 --> 00:46:33,440
okay um yes we know uh

1274
00:46:33,440 --> 00:46:36,160
logic locking has gone through

1275
00:46:36,160 --> 00:46:39,440
it is one or two decades of reinvention

1276
00:46:39,440 --> 00:46:42,319
once something is attacked

1277
00:46:42,319 --> 00:46:43,839
somebody somebody comes up with a new

1278
00:46:43,839 --> 00:46:46,640
mechanism but i believe it has matured

1279
00:46:46,640 --> 00:46:47,599
enough

1280
00:46:47,599 --> 00:46:48,880
that

1281
00:46:48,880 --> 00:46:50,400
in our current

1282
00:46:50,400 --> 00:46:52,960
soc that we are building we are adding

1283
00:46:52,960 --> 00:46:53,920
uh

1284
00:46:53,920 --> 00:46:56,480
logic locking actually and then

1285
00:46:56,480 --> 00:46:59,440
we are pretty confident that uh it's uh

1286
00:46:59,440 --> 00:47:01,839
it's uh it doesn't suffer from some of

1287
00:47:01,839 --> 00:47:03,599
the things you mentioned here

1288
00:47:03,599 --> 00:47:04,560
um

1289
00:47:04,560 --> 00:47:06,640
but we can definitely talk about it and

1290
00:47:06,640 --> 00:47:08,800
then you can help to

1291
00:47:08,800 --> 00:47:11,280
break it and then we'll fix it together

1292
00:47:11,280 --> 00:47:13,359
right so um

1293
00:47:13,359 --> 00:47:14,880
feel free to

1294
00:47:14,880 --> 00:47:15,920
send me

1295
00:47:15,920 --> 00:47:18,720
the paper that you mentioned about iska

1296
00:47:18,720 --> 00:47:22,078
and then we can talk about it

1297
00:47:23,200 --> 00:47:25,680
thank you very much and one last

1298
00:47:25,680 --> 00:47:27,280
question that i saw do you have any

1299
00:47:27,280 --> 00:47:29,200
document white paper for risk five

1300
00:47:29,200 --> 00:47:31,359
scenarios discussed

1301
00:47:31,359 --> 00:47:35,040
um okay document white paper

1302
00:47:35,040 --> 00:47:36,400
um

1303
00:47:36,400 --> 00:47:38,480
of course yes

1304
00:47:38,480 --> 00:47:40,160
uh

1305
00:47:40,160 --> 00:47:42,000
what you do is uh

1306
00:47:42,000 --> 00:47:44,079
for example uh

1307
00:47:44,079 --> 00:47:46,400
uh just send me an email and then i can

1308
00:47:46,400 --> 00:47:48,160
send you some of the specifications that

1309
00:47:48,160 --> 00:47:50,079
the community is now working on

1310
00:47:50,079 --> 00:47:52,000
for example the control flow integrity

1311
00:47:52,000 --> 00:47:54,559
uh architecture specification

1312
00:47:54,559 --> 00:47:56,400
and

1313
00:47:56,400 --> 00:47:58,319
confidential computing specifications so

1314
00:47:58,319 --> 00:48:00,240
you can

1315
00:48:00,240 --> 00:48:01,839
come and take a look

1316
00:48:01,839 --> 00:48:03,839
and then bring your suggestions and

1317
00:48:03,839 --> 00:48:06,400
bring your contributions to make it uh

1318
00:48:06,400 --> 00:48:08,800
even better some things we have not

1319
00:48:08,800 --> 00:48:10,160
thought through other some community

1320
00:48:10,160 --> 00:48:12,240
members are not thought through and then

1321
00:48:12,240 --> 00:48:13,920
you have some insights

1322
00:48:13,920 --> 00:48:16,720
you're welcome to

1323
00:48:16,880 --> 00:48:18,800
give that suggestion and then

1324
00:48:18,800 --> 00:48:21,200
it's a collaborative effort so

1325
00:48:21,200 --> 00:48:23,680
i i hope to get an email from you and

1326
00:48:23,680 --> 00:48:26,960
then we'll take it from there

1327
00:48:28,319 --> 00:48:30,640
all right thank you very much for the

1328
00:48:30,640 --> 00:48:32,480
presentation and for answering these

1329
00:48:32,480 --> 00:48:34,559
questions i don't see any other

1330
00:48:34,559 --> 00:48:38,079
questions so i think we can conclude

1331
00:48:38,079 --> 00:48:39,680
the presentation

1332
00:48:39,680 --> 00:48:40,480
and

1333
00:48:40,480 --> 00:48:42,079
in the meanwhile i would encourage you

1334
00:48:42,079 --> 00:48:43,760
also to check out the training offer for

1335
00:48:43,760 --> 00:48:46,160
the upcoming hardware usa conference and

1336
00:48:46,160 --> 00:48:47,359
trainings

1337
00:48:47,359 --> 00:48:50,079
i hope you have a nice day ahead and see

1338
00:48:50,079 --> 00:48:51,839
you next time

1339
00:48:51,839 --> 00:48:55,040
thank you again

