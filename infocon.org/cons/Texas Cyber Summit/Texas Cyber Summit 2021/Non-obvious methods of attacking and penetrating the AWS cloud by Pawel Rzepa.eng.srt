1
00:00:00,560 --> 00:00:02,800
welcome everybody and thank you for

2
00:00:02,800 --> 00:00:05,920
joining my session my name is pablo japa

3
00:00:05,920 --> 00:00:08,960
and today i'm going to talk about

4
00:00:08,960 --> 00:00:11,759
non-obvious methods of attacking and

5
00:00:11,759 --> 00:00:14,639
penetrating the aws cloud

6
00:00:14,639 --> 00:00:16,800
i want to share my research how an

7
00:00:16,800 --> 00:00:19,680
attacker can get initial access to your

8
00:00:19,680 --> 00:00:22,560
cloud even if you don't have any

9
00:00:22,560 --> 00:00:24,960
publicly exposed resources

10
00:00:24,960 --> 00:00:27,680
and why i think that another cloud

11
00:00:27,680 --> 00:00:31,119
version of solarwinds attack is just a

12
00:00:31,119 --> 00:00:32,640
matter of time

13
00:00:32,640 --> 00:00:35,360
i will also show you my recent

14
00:00:35,360 --> 00:00:38,879
observations regarding iem roles

15
00:00:38,879 --> 00:00:42,320
and how it can be used to escalate

16
00:00:42,320 --> 00:00:43,760
privileges

17
00:00:43,760 --> 00:00:46,559
finally i'll show you a method of

18
00:00:46,559 --> 00:00:48,800
exfiltrating data

19
00:00:48,800 --> 00:00:51,840
which is by default not logged by any

20
00:00:51,840 --> 00:00:54,000
monitoring service like

21
00:00:54,000 --> 00:00:55,920
vpc flow logs or

22
00:00:55,920 --> 00:00:59,280
cloudtrail and what is more important

23
00:00:59,280 --> 00:01:01,760
i'll show you how to protect from such

24
00:01:01,760 --> 00:01:02,879
attacks

25
00:01:02,879 --> 00:01:04,799
does it sound interesting

26
00:01:04,799 --> 00:01:05,920
if so

27
00:01:05,920 --> 00:01:07,680
let's get started

28
00:01:07,680 --> 00:01:10,080
before starting my presentation

29
00:01:10,080 --> 00:01:12,799
please let me introduce myself

30
00:01:12,799 --> 00:01:15,840
so i work as a senior ethical hacker in

31
00:01:15,840 --> 00:01:19,040
soft surf and also i'm giving aws

32
00:01:19,040 --> 00:01:23,759
trainings as aws authorized instructor

33
00:01:23,759 --> 00:01:26,400
beyond that i like to break stuff in

34
00:01:26,400 --> 00:01:30,000
cloud and results of this work

35
00:01:30,000 --> 00:01:32,320
you can and the results can be found on

36
00:01:32,320 --> 00:01:33,360
my

37
00:01:33,360 --> 00:01:34,720
medium blog

38
00:01:34,720 --> 00:01:36,799
if you want to stay in touch i encourage

39
00:01:36,799 --> 00:01:39,520
you to follow me on twitter as well as

40
00:01:39,520 --> 00:01:42,960
you can find me on linkedin

41
00:01:42,960 --> 00:01:44,720
all right

42
00:01:44,720 --> 00:01:47,759
before going to those non-obvious

43
00:01:47,759 --> 00:01:51,759
methods let me clarify what i think is

44
00:01:51,759 --> 00:01:52,799
the

45
00:01:52,799 --> 00:01:55,280
obvious methods of breaking into the

46
00:01:55,280 --> 00:01:57,360
cloud or rather which is what is the

47
00:01:57,360 --> 00:01:59,920
commonly known method of breaking into

48
00:01:59,920 --> 00:02:01,280
the cloud

49
00:02:01,280 --> 00:02:03,200
so the first uh

50
00:02:03,200 --> 00:02:04,560
that

51
00:02:04,560 --> 00:02:07,600
comes to my mind is the

52
00:02:07,600 --> 00:02:09,840
compromised keys

53
00:02:09,840 --> 00:02:11,520
in other words

54
00:02:11,520 --> 00:02:14,160
a developer for example is

55
00:02:14,160 --> 00:02:15,680
committing

56
00:02:15,680 --> 00:02:19,280
the aws access keys

57
00:02:19,280 --> 00:02:21,680
to the public repository

58
00:02:21,680 --> 00:02:23,040
or

59
00:02:23,040 --> 00:02:26,640
the the repository in which those keys

60
00:02:26,640 --> 00:02:28,400
were committed

61
00:02:28,400 --> 00:02:31,200
is for example forked to from the

62
00:02:31,200 --> 00:02:34,879
private to public repository then the

63
00:02:34,879 --> 00:02:37,599
attacker is able to find those keys in

64
00:02:37,599 --> 00:02:39,599
the git logs

65
00:02:39,599 --> 00:02:43,440
so i decided to um to do a little test

66
00:02:43,440 --> 00:02:46,480
and i committed those my

67
00:02:46,480 --> 00:02:51,519
real aws access keys to the github

68
00:02:51,519 --> 00:02:54,080
and in around a minute

69
00:02:54,080 --> 00:02:56,640
i received the

70
00:02:56,640 --> 00:02:59,599
notification letter from aws so the

71
00:02:59,599 --> 00:03:01,519
mechanism here is

72
00:03:01,519 --> 00:03:02,879
the following

73
00:03:02,879 --> 00:03:06,159
once you committed your keys or any kind

74
00:03:06,159 --> 00:03:09,599
of well-known secret to the github then

75
00:03:09,599 --> 00:03:10,959
the github

76
00:03:10,959 --> 00:03:14,000
secret scanning service is

77
00:03:14,000 --> 00:03:15,680
finding the secret

78
00:03:15,680 --> 00:03:18,720
then notifies the provider in this case

79
00:03:18,720 --> 00:03:22,640
aws and then the provider the aws is

80
00:03:22,640 --> 00:03:24,640
then sending you

81
00:03:24,640 --> 00:03:27,519
a notification

82
00:03:27,519 --> 00:03:31,280
and in around six minutes

83
00:03:31,280 --> 00:03:34,560
after passing the six minutes i found

84
00:03:34,560 --> 00:03:38,400
that there are first attempts of

85
00:03:38,400 --> 00:03:42,400
uh using my aws access keys

86
00:03:42,400 --> 00:03:43,599
but

87
00:03:43,599 --> 00:03:47,440
what was interesting to me uh was that

88
00:03:47,440 --> 00:03:49,120
it is pretty

89
00:03:49,120 --> 00:03:51,519
long time if we are talking about the

90
00:03:51,519 --> 00:03:54,400
bots which are constantly scanning the

91
00:03:54,400 --> 00:03:55,200
uh

92
00:03:55,200 --> 00:03:58,400
all the github repositories

93
00:03:58,400 --> 00:04:01,599
what was also interesting to me uh

94
00:04:01,599 --> 00:04:04,799
was that i found that

95
00:04:04,799 --> 00:04:07,920
aws not only sent the notification

96
00:04:07,920 --> 00:04:09,920
letter to me that my keys are

97
00:04:09,920 --> 00:04:14,400
compromised but also automatically added

98
00:04:14,400 --> 00:04:17,440
the aws compromised key quarantine

99
00:04:17,440 --> 00:04:18,798
policy

100
00:04:18,798 --> 00:04:20,560
this policy

101
00:04:20,560 --> 00:04:24,000
as you can see is generally

102
00:04:24,000 --> 00:04:27,360
denying some dangerous actions of course

103
00:04:27,360 --> 00:04:30,800
not all of them but this is definitely a

104
00:04:30,800 --> 00:04:34,160
good step good good work

105
00:04:34,160 --> 00:04:37,600
done by aws

106
00:04:37,840 --> 00:04:41,520
what was also interesting to me was that

107
00:04:41,520 --> 00:04:45,360
in the email i received from aws was not

108
00:04:45,360 --> 00:04:47,290
only about their um

109
00:04:47,290 --> 00:04:49,199
[Music]

110
00:04:49,199 --> 00:04:50,880
notification that

111
00:04:50,880 --> 00:04:53,600
hey or keys were compromised but also an

112
00:04:53,600 --> 00:04:54,960
information

113
00:04:54,960 --> 00:04:56,880
that um

114
00:04:56,880 --> 00:04:59,360
further information that hey

115
00:04:59,360 --> 00:05:01,600
we can see that there were three

116
00:05:01,600 --> 00:05:04,320
instances launched in your uh in your

117
00:05:04,320 --> 00:05:05,280
region

118
00:05:05,280 --> 00:05:06,240
so

119
00:05:06,240 --> 00:05:10,479
i was confused hey how do you know that

120
00:05:10,479 --> 00:05:11,520
so

121
00:05:11,520 --> 00:05:15,440
what what aws is doing is

122
00:05:15,440 --> 00:05:18,800
is that they automatically open a

123
00:05:18,800 --> 00:05:21,280
support ticket

124
00:05:21,280 --> 00:05:24,400
for your case of compromising the keys

125
00:05:24,400 --> 00:05:25,919
so um

126
00:05:25,919 --> 00:05:29,680
the aws engineer who was resolving this

127
00:05:29,680 --> 00:05:30,800
ticket

128
00:05:30,800 --> 00:05:34,960
um analyzed if the if there is uh

129
00:05:34,960 --> 00:05:36,400
you know any

130
00:05:36,400 --> 00:05:40,240
um dangerous actions taken in my

131
00:05:40,240 --> 00:05:43,680
account to protect me

132
00:05:44,320 --> 00:05:48,479
once i analyzed the cloud trail logs

133
00:05:48,479 --> 00:05:50,800
this is by the way the way if you want

134
00:05:50,800 --> 00:05:54,160
to see the logs in the terminal that's

135
00:05:54,160 --> 00:05:55,520
the

136
00:05:55,520 --> 00:05:56,639
that's the

137
00:05:56,639 --> 00:05:57,680
comment

138
00:05:57,680 --> 00:06:00,080
and i filtered

139
00:06:00,080 --> 00:06:02,800
what actions were taken by amazon

140
00:06:02,800 --> 00:06:04,000
support

141
00:06:04,000 --> 00:06:07,520
so yeah you can find it in the

142
00:06:07,520 --> 00:06:11,440
in the cloud trail as well

143
00:06:11,759 --> 00:06:14,639
i also found the um

144
00:06:14,639 --> 00:06:16,080
the answer

145
00:06:16,080 --> 00:06:17,840
why it was

146
00:06:17,840 --> 00:06:19,840
so long why the bots

147
00:06:19,840 --> 00:06:22,639
take so long to uh

148
00:06:22,639 --> 00:06:26,080
to find my keys in the public repository

149
00:06:26,080 --> 00:06:27,280
uh well

150
00:06:27,280 --> 00:06:30,800
the the the thing is that github by

151
00:06:30,800 --> 00:06:33,680
default delays

152
00:06:33,680 --> 00:06:35,840
the feeds

153
00:06:35,840 --> 00:06:37,759
by five minutes

154
00:06:37,759 --> 00:06:39,600
okay so once you

155
00:06:39,600 --> 00:06:41,440
publish something

156
00:06:41,440 --> 00:06:45,440
to the github repository then it will be

157
00:06:45,440 --> 00:06:47,680
available publicly

158
00:06:47,680 --> 00:06:48,800
for

159
00:06:48,800 --> 00:06:50,240
anyone

160
00:06:50,240 --> 00:06:53,440
after five minutes okay so the the the

161
00:06:53,440 --> 00:06:54,400
uh

162
00:06:54,400 --> 00:06:56,000
you will be able

163
00:06:56,000 --> 00:06:59,680
after five minutes uh the bots will

164
00:06:59,680 --> 00:07:02,560
detect you your um

165
00:07:02,560 --> 00:07:04,160
you know your uh

166
00:07:04,160 --> 00:07:06,400
public secret

167
00:07:06,400 --> 00:07:09,120
so in general you have five minutes for

168
00:07:09,120 --> 00:07:13,280
taking some uh action and remove those

169
00:07:13,280 --> 00:07:17,199
uh keys from the public repository

170
00:07:17,199 --> 00:07:19,039
another

171
00:07:19,039 --> 00:07:21,840
technique which in my opinion

172
00:07:21,840 --> 00:07:22,639
is

173
00:07:22,639 --> 00:07:24,560
very commonly known

174
00:07:24,560 --> 00:07:29,039
is exposing the vulnerable resource

175
00:07:29,039 --> 00:07:32,560
by the by the vulnerable resource i mean

176
00:07:32,560 --> 00:07:34,479
that there's for example the web

177
00:07:34,479 --> 00:07:37,680
application which is hosted on the ec2

178
00:07:37,680 --> 00:07:38,880
instance

179
00:07:38,880 --> 00:07:41,840
this application is vulnerable to server

180
00:07:41,840 --> 00:07:42,800
side

181
00:07:42,800 --> 00:07:45,440
request forgery or the

182
00:07:45,440 --> 00:07:48,400
remote code execution or for example

183
00:07:48,400 --> 00:07:50,479
unintended proxy

184
00:07:50,479 --> 00:07:54,080
because all those vulnerabilities allow

185
00:07:54,080 --> 00:07:56,479
the attacker to

186
00:07:56,479 --> 00:07:59,840
reach the instance profile keys

187
00:07:59,840 --> 00:08:03,919
which are stored in the ec2

188
00:08:03,919 --> 00:08:06,400
metadata now if

189
00:08:06,400 --> 00:08:07,840
you are

190
00:08:07,840 --> 00:08:09,759
if you are new to the concept of

191
00:08:09,759 --> 00:08:11,039
metadata

192
00:08:11,039 --> 00:08:14,240
you don't know why the keys are in the

193
00:08:14,240 --> 00:08:16,000
instance profile

194
00:08:16,000 --> 00:08:19,759
and generally this technique is new to

195
00:08:19,759 --> 00:08:20,560
you

196
00:08:20,560 --> 00:08:22,960
then i encourage you to

197
00:08:22,960 --> 00:08:25,520
to watch my previous presentation when i

198
00:08:25,520 --> 00:08:28,560
talk about it much more

199
00:08:28,560 --> 00:08:31,840
if you want to read more about the

200
00:08:31,840 --> 00:08:33,440
um

201
00:08:33,440 --> 00:08:34,559
probably

202
00:08:34,559 --> 00:08:36,159
the most

203
00:08:36,159 --> 00:08:38,320
the most known

204
00:08:38,320 --> 00:08:39,360
public

205
00:08:39,360 --> 00:08:40,799
example

206
00:08:40,799 --> 00:08:42,159
of

207
00:08:42,159 --> 00:08:45,360
such attacks was the capital one bridge

208
00:08:45,360 --> 00:08:48,880
where the attacker was

209
00:08:48,880 --> 00:08:52,000
using this technique to to compromise uh

210
00:08:52,000 --> 00:08:53,360
data of

211
00:08:53,360 --> 00:08:55,040
many

212
00:08:55,040 --> 00:08:58,160
capital one users

213
00:08:58,160 --> 00:08:59,279
so now

214
00:08:59,279 --> 00:09:02,080
let's talk about the non-obvious methods

215
00:09:02,080 --> 00:09:05,600
of breaking into the cloud

216
00:09:05,600 --> 00:09:08,800
in general

217
00:09:08,800 --> 00:09:10,959
just just think about it

218
00:09:10,959 --> 00:09:14,320
can you be attacked if you don't have

219
00:09:14,320 --> 00:09:18,160
any publicly exposed resources

220
00:09:18,160 --> 00:09:22,000
if you don't use iem users so there's no

221
00:09:22,000 --> 00:09:25,519
this risk of you know committing uh the

222
00:09:25,519 --> 00:09:27,040
the long-term

223
00:09:27,040 --> 00:09:28,800
access keys

224
00:09:28,800 --> 00:09:32,320
because you are using only iaem roles so

225
00:09:32,320 --> 00:09:35,839
uh those keys are just um

226
00:09:35,839 --> 00:09:37,120
temporary

227
00:09:37,120 --> 00:09:39,360
and finally you

228
00:09:39,360 --> 00:09:41,839
you constantly scan the infrastructure

229
00:09:41,839 --> 00:09:46,080
against um any misconfigurations so now

230
00:09:46,080 --> 00:09:47,920
what do you think can you be still

231
00:09:47,920 --> 00:09:49,600
attacked

232
00:09:49,600 --> 00:09:50,399
well

233
00:09:50,399 --> 00:09:52,160
in my opinion

234
00:09:52,160 --> 00:09:53,360
yes

235
00:09:53,360 --> 00:09:56,320
and here i will show you why the main

236
00:09:56,320 --> 00:09:57,760
reason is

237
00:09:57,760 --> 00:09:59,200
because

238
00:09:59,200 --> 00:10:03,279
we trust people in cyber world maybe not

239
00:10:03,279 --> 00:10:04,880
people but

240
00:10:04,880 --> 00:10:09,600
the the work we can find in the internet

241
00:10:09,600 --> 00:10:13,519
so let me show you it on an example um

242
00:10:13,519 --> 00:10:15,040
some time ago

243
00:10:15,040 --> 00:10:19,040
i i had the following problem that i was

244
00:10:19,040 --> 00:10:21,120
looking for solution that will

245
00:10:21,120 --> 00:10:22,800
automatically

246
00:10:22,800 --> 00:10:26,320
rename the the file which is uploaded to

247
00:10:26,320 --> 00:10:29,760
s3 bucket okay so there should be the

248
00:10:29,760 --> 00:10:30,560
up

249
00:10:30,560 --> 00:10:34,720
once a user uploads um any file to s3

250
00:10:34,720 --> 00:10:37,440
bucket then it triggers

251
00:10:37,440 --> 00:10:41,279
an event and even triggers the

252
00:10:41,279 --> 00:10:42,560
lambda

253
00:10:42,560 --> 00:10:46,399
invokes lambda and then lambda

254
00:10:46,399 --> 00:10:50,000
modifies the the file with the adds the

255
00:10:50,000 --> 00:10:51,200
prefix

256
00:10:51,200 --> 00:10:54,079
and then the file is landing in the new

257
00:10:54,079 --> 00:10:55,519
file is

258
00:10:55,519 --> 00:10:58,640
overwritten the the old one

259
00:10:58,640 --> 00:10:59,440
so

260
00:10:59,440 --> 00:11:01,200
um

261
00:11:01,200 --> 00:11:06,160
as a typical um developer um or

262
00:11:06,160 --> 00:11:09,920
um rather a beginner

263
00:11:09,920 --> 00:11:12,640
i try to find that

264
00:11:12,640 --> 00:11:14,959
they're ready to work solution in the

265
00:11:14,959 --> 00:11:17,519
internet okay so many people are doing

266
00:11:17,519 --> 00:11:18,320
it

267
00:11:18,320 --> 00:11:21,600
that we are looking for the solution in

268
00:11:21,600 --> 00:11:26,000
stack overflow uh maybe for working um

269
00:11:26,000 --> 00:11:29,120
method in the npm package

270
00:11:29,120 --> 00:11:31,279
but i couldn't find anything so what i

271
00:11:31,279 --> 00:11:32,160
did

272
00:11:32,160 --> 00:11:35,040
i created my own package which i called

273
00:11:35,040 --> 00:11:37,680
the s3 rename

274
00:11:37,680 --> 00:11:39,120
i put some

275
00:11:39,120 --> 00:11:41,279
you know some basic information about

276
00:11:41,279 --> 00:11:43,120
its usage

277
00:11:43,120 --> 00:11:44,000
and

278
00:11:44,000 --> 00:11:45,120
after

279
00:11:45,120 --> 00:11:48,000
more than a month there was

280
00:11:48,000 --> 00:11:49,360
there were

281
00:11:49,360 --> 00:11:53,680
more than 500 downloads of this package

282
00:11:53,680 --> 00:11:56,800
i didn't announce it anywhere

283
00:11:56,800 --> 00:12:01,120
just uploaded it to the um to the npm js

284
00:12:01,120 --> 00:12:02,959
repository

285
00:12:02,959 --> 00:12:06,480
so here's the proof of concept uh how

286
00:12:06,480 --> 00:12:10,800
how does it how it works so uh here in

287
00:12:10,800 --> 00:12:12,399
the um

288
00:12:12,399 --> 00:12:14,560
in my lambda

289
00:12:14,560 --> 00:12:18,639
i used the uh my s3 rename package and

290
00:12:18,639 --> 00:12:21,440
the s3 rename package takes as an

291
00:12:21,440 --> 00:12:25,040
argument um the source

292
00:12:25,040 --> 00:12:26,000
source

293
00:12:26,000 --> 00:12:30,240
bucket so where the the file is from the

294
00:12:30,240 --> 00:12:31,519
event

295
00:12:31,519 --> 00:12:34,160
file which invokes this lambda

296
00:12:34,160 --> 00:12:36,240
and then the the

297
00:12:36,240 --> 00:12:38,639
name of the old file

298
00:12:38,639 --> 00:12:39,600
and

299
00:12:39,600 --> 00:12:41,120
creates the

300
00:12:41,120 --> 00:12:44,079
new name of this file

301
00:12:44,079 --> 00:12:47,519
and after after that i was able to see

302
00:12:47,519 --> 00:12:48,880
that

303
00:12:48,880 --> 00:12:51,519
after uploading the test new png file

304
00:12:51,519 --> 00:12:53,120
there is the

305
00:12:53,120 --> 00:12:55,279
prefix is added

306
00:12:55,279 --> 00:12:57,120
in logs

307
00:12:57,120 --> 00:12:59,040
you don't see any

308
00:12:59,040 --> 00:13:01,760
anything

309
00:13:02,160 --> 00:13:04,079
spectacular just

310
00:13:04,079 --> 00:13:06,639
just some information about starting and

311
00:13:06,639 --> 00:13:09,600
ending the lambda function

312
00:13:09,600 --> 00:13:10,959
however

313
00:13:10,959 --> 00:13:14,000
what i didn't tell you is uh

314
00:13:14,000 --> 00:13:17,680
the fact that to the s3 rename package i

315
00:13:17,680 --> 00:13:20,320
put this obfuscate this line of

316
00:13:20,320 --> 00:13:24,079
obfuscated javascript code

317
00:13:24,079 --> 00:13:26,319
and

318
00:13:26,480 --> 00:13:29,040
after the obfuscation

319
00:13:29,040 --> 00:13:31,600
this code is basically

320
00:13:31,600 --> 00:13:35,760
looking for aws access key id

321
00:13:35,760 --> 00:13:37,279
among the

322
00:13:37,279 --> 00:13:40,720
environment variables

323
00:13:40,720 --> 00:13:41,920
because

324
00:13:41,920 --> 00:13:44,560
the lambda function stores the the

325
00:13:44,560 --> 00:13:47,120
access keys of the role which is

326
00:13:47,120 --> 00:13:50,399
attached to the lambda function in the

327
00:13:50,399 --> 00:13:53,920
environmental variables

328
00:13:53,920 --> 00:13:54,720
then

329
00:13:54,720 --> 00:13:58,079
if the so this package when when you are

330
00:13:58,079 --> 00:14:01,519
running the s3 rename function

331
00:14:01,519 --> 00:14:02,880
then

332
00:14:02,880 --> 00:14:05,360
first first of all

333
00:14:05,360 --> 00:14:06,959
this

334
00:14:06,959 --> 00:14:10,399
part of code is executed so it looks for

335
00:14:10,399 --> 00:14:12,560
the aws access key id

336
00:14:12,560 --> 00:14:15,760
and if there is such aws access key id

337
00:14:15,760 --> 00:14:18,639
then please send it to my

338
00:14:18,639 --> 00:14:19,760
server

339
00:14:19,760 --> 00:14:24,079
and put it as the key parameter

340
00:14:24,079 --> 00:14:25,920
and then after that

341
00:14:25,920 --> 00:14:29,600
[Music]

342
00:14:29,600 --> 00:14:33,360
i was able to see uh the

343
00:14:33,360 --> 00:14:38,480
uh aws access key id uh on my server now

344
00:14:38,480 --> 00:14:41,920
what was interesting uh was that there

345
00:14:41,920 --> 00:14:44,720
was around 50

346
00:14:44,720 --> 00:14:46,560
of um

347
00:14:46,560 --> 00:14:47,680
of the

348
00:14:47,680 --> 00:14:51,279
attempts to to

349
00:14:51,279 --> 00:14:54,079
access my server

350
00:14:54,079 --> 00:14:57,120
what means that people were

351
00:14:57,120 --> 00:15:00,480
there there was the aws access key id

352
00:15:00,480 --> 00:15:03,199
environment variable and people were

353
00:15:03,199 --> 00:15:04,399
blindly

354
00:15:04,399 --> 00:15:08,079
using my package

355
00:15:08,079 --> 00:15:11,360
now the idea of of that

356
00:15:11,360 --> 00:15:13,040
is isn't new

357
00:15:13,040 --> 00:15:15,519
so here i want to share with you the

358
00:15:15,519 --> 00:15:18,639
research about typoscotic

359
00:15:18,639 --> 00:15:20,560
in general

360
00:15:20,560 --> 00:15:23,360
a researcher who

361
00:15:23,360 --> 00:15:25,360
created this

362
00:15:25,360 --> 00:15:26,800
similar

363
00:15:26,800 --> 00:15:30,079
approach but on much broader scale

364
00:15:30,079 --> 00:15:33,360
so the researcher created uh the a lot

365
00:15:33,360 --> 00:15:36,800
of packages which are very similar to

366
00:15:36,800 --> 00:15:38,720
the um

367
00:15:38,720 --> 00:15:41,360
widely used ones so for example instead

368
00:15:41,360 --> 00:15:42,880
of coffee

369
00:15:42,880 --> 00:15:44,880
there was

370
00:15:44,880 --> 00:15:48,720
there was coffee with just one letter e

371
00:15:48,720 --> 00:15:50,720
those typos are

372
00:15:50,720 --> 00:15:53,519
um are happen and this is normal

373
00:15:53,519 --> 00:15:56,720
everybody is doing make mistakes

374
00:15:56,720 --> 00:15:59,600
so once uh this uh

375
00:15:59,600 --> 00:16:03,759
the researcher created multiple packages

376
00:16:03,759 --> 00:16:06,320
which are in the name which are very

377
00:16:06,320 --> 00:16:09,120
similar to the original ones

378
00:16:09,120 --> 00:16:12,320
and after after some time

379
00:16:12,320 --> 00:16:15,519
it he was able to catch

380
00:16:15,519 --> 00:16:20,240
more than 17 thousands of unique hosts

381
00:16:20,240 --> 00:16:22,399
okay so there were multiple

382
00:16:22,399 --> 00:16:23,519
um

383
00:16:23,519 --> 00:16:26,000
multiple

384
00:16:26,000 --> 00:16:29,759
people multiple companies um

385
00:16:29,759 --> 00:16:30,560
run

386
00:16:30,560 --> 00:16:31,440
those

387
00:16:31,440 --> 00:16:32,800
uh

388
00:16:32,800 --> 00:16:35,759
those maybe not malicious but those

389
00:16:35,759 --> 00:16:39,519
packages prepared by the

390
00:16:39,680 --> 00:16:41,839
by the researcher

391
00:16:41,839 --> 00:16:43,839
now this is this is not the only

392
00:16:43,839 --> 00:16:45,440
research uh

393
00:16:45,440 --> 00:16:48,399
that was made about it uh here i want to

394
00:16:48,399 --> 00:16:52,240
share with you something uh quite new uh

395
00:16:52,240 --> 00:16:55,600
from this year that one researcher

396
00:16:55,600 --> 00:16:59,440
named the npm package as a dash okay

397
00:16:59,440 --> 00:17:02,079
that was the name of the

398
00:17:02,079 --> 00:17:05,280
of the package it is possible in in in

399
00:17:05,280 --> 00:17:06,880
npm

400
00:17:06,880 --> 00:17:08,400
uh and

401
00:17:08,400 --> 00:17:09,679
there was

402
00:17:09,679 --> 00:17:10,400
uh

403
00:17:10,400 --> 00:17:13,439
more than 700

404
00:17:13,439 --> 00:17:15,039
000 downloads

405
00:17:15,039 --> 00:17:16,400
and

406
00:17:16,400 --> 00:17:19,919
probably the reason of that is

407
00:17:19,919 --> 00:17:22,640
that when you put a space

408
00:17:22,640 --> 00:17:24,079
um

409
00:17:24,079 --> 00:17:26,880
in put a space

410
00:17:26,880 --> 00:17:31,120
between dash space and um some some

411
00:17:31,120 --> 00:17:34,240
parameter so for example instead of

412
00:17:34,240 --> 00:17:36,880
putting dash and uh

413
00:17:36,880 --> 00:17:40,799
some flag then you

414
00:17:40,799 --> 00:17:42,880
by a mistake put

415
00:17:42,880 --> 00:17:44,880
press space

416
00:17:44,880 --> 00:17:49,679
and that was installing the dash package

417
00:17:49,679 --> 00:17:50,480
it's

418
00:17:50,480 --> 00:17:52,799
um interesting

419
00:17:52,799 --> 00:17:56,240
how many how many people were

420
00:17:56,240 --> 00:17:59,440
did the same mistake

421
00:17:59,440 --> 00:18:00,880
now

422
00:18:00,880 --> 00:18:04,320
another very interesting

423
00:18:04,720 --> 00:18:07,760
class of attack

424
00:18:08,000 --> 00:18:10,640
that is related with dependencies is the

425
00:18:10,640 --> 00:18:12,559
dependency confusion

426
00:18:12,559 --> 00:18:15,280
so the researcher

427
00:18:15,280 --> 00:18:18,640
did a similar job but this time

428
00:18:18,640 --> 00:18:21,360
only um trying to

429
00:18:21,360 --> 00:18:24,240
only focus on the

430
00:18:24,240 --> 00:18:27,120
internal packages okay so the packages

431
00:18:27,120 --> 00:18:30,160
which are not um in the

432
00:18:30,160 --> 00:18:34,000
public npm js repository but the uh

433
00:18:34,000 --> 00:18:37,360
internal uh package that is crea for

434
00:18:37,360 --> 00:18:40,160
example used only by microsoft so

435
00:18:40,160 --> 00:18:44,160
microsoft has their own

436
00:18:44,160 --> 00:18:46,400
private internal

437
00:18:46,400 --> 00:18:48,240
package uh

438
00:18:48,240 --> 00:18:49,760
repository

439
00:18:49,760 --> 00:18:54,400
so it was also possible that

440
00:18:54,400 --> 00:18:57,039
when creating those um

441
00:18:57,039 --> 00:19:00,000
packages with typos

442
00:19:00,000 --> 00:19:03,360
engineers in microsoft apple and many

443
00:19:03,360 --> 00:19:06,160
you know many big companies

444
00:19:06,160 --> 00:19:08,080
they were doing also those those

445
00:19:08,080 --> 00:19:11,919
mistakes so they were downloading the

446
00:19:11,919 --> 00:19:13,840
uh packages

447
00:19:13,840 --> 00:19:15,520
from the

448
00:19:15,520 --> 00:19:18,000
because it couldn't be found in the

449
00:19:18,000 --> 00:19:21,120
internal package repository then it was

450
00:19:21,120 --> 00:19:23,200
downloaded from the

451
00:19:23,200 --> 00:19:26,160
public uh repository so

452
00:19:26,160 --> 00:19:30,400
the the code from the researcher was

453
00:19:30,400 --> 00:19:31,600
invoked

454
00:19:31,600 --> 00:19:35,200
uh in inside of apple microsoft and

455
00:19:35,200 --> 00:19:38,400
other big companies uh networks

456
00:19:38,400 --> 00:19:40,880
so now

457
00:19:40,960 --> 00:19:43,200
let's move on to more

458
00:19:43,200 --> 00:19:45,760
aws related stuff

459
00:19:45,760 --> 00:19:48,880
first of all what i thought about not

460
00:19:48,880 --> 00:19:52,080
only running the code but

461
00:19:52,080 --> 00:19:54,559
how it can be

462
00:19:54,559 --> 00:19:55,679
how

463
00:19:55,679 --> 00:19:59,520
an attacker can put the the malicious

464
00:19:59,520 --> 00:20:01,200
um

465
00:20:01,200 --> 00:20:04,960
malicious code not only in the

466
00:20:04,960 --> 00:20:08,159
packages but for example in the

467
00:20:08,159 --> 00:20:10,320
community ami

468
00:20:10,320 --> 00:20:12,720
so when you are creating the ec2

469
00:20:12,720 --> 00:20:14,960
instance of course you have to specify

470
00:20:14,960 --> 00:20:18,720
the amazon machine image

471
00:20:18,720 --> 00:20:19,520
and

472
00:20:19,520 --> 00:20:21,840
i have the the

473
00:20:21,840 --> 00:20:25,760
one project which was related with uh

474
00:20:25,760 --> 00:20:28,559
running the apache guacamole so i was

475
00:20:28,559 --> 00:20:31,120
trying to find already pre-configured

476
00:20:31,120 --> 00:20:33,039
apache guacamole

477
00:20:33,039 --> 00:20:36,960
now as you can see um there were like

478
00:20:36,960 --> 00:20:37,919
nine

479
00:20:37,919 --> 00:20:40,640
images available in the marketplace

480
00:20:40,640 --> 00:20:43,120
and almost 100

481
00:20:43,120 --> 00:20:45,679
among the community amis the difference

482
00:20:45,679 --> 00:20:49,520
is that those in community ami can be

483
00:20:49,520 --> 00:20:53,280
republished by anyone and there is no

484
00:20:53,280 --> 00:20:57,280
any additional fee regarding it however

485
00:20:57,280 --> 00:20:58,480
if we

486
00:20:58,480 --> 00:21:01,120
in the aws marketplace there are

487
00:21:01,120 --> 00:21:03,600
additional charges

488
00:21:03,600 --> 00:21:06,559
so many people decides to use their

489
00:21:06,559 --> 00:21:09,039
community ami

490
00:21:09,039 --> 00:21:12,000
however the difference is

491
00:21:12,000 --> 00:21:14,840
not only in money but if

492
00:21:14,840 --> 00:21:20,559
the ami is pushed to the aws marketplace

493
00:21:20,559 --> 00:21:24,960
then this ami is scanned by aws

494
00:21:24,960 --> 00:21:28,320
those amis in community ami a community

495
00:21:28,320 --> 00:21:30,799
ami are not

496
00:21:30,799 --> 00:21:33,440
so here's for exa here's an example

497
00:21:33,440 --> 00:21:37,280
that one company uh realized after five

498
00:21:37,280 --> 00:21:40,480
years that they are running

499
00:21:40,480 --> 00:21:41,919
the ami

500
00:21:41,919 --> 00:21:46,159
with working uh cryptocurrency ma crypto

501
00:21:46,159 --> 00:21:47,919
miner

502
00:21:47,919 --> 00:21:50,320
and so it was interesting that they

503
00:21:50,320 --> 00:21:53,600
found it after five years only because

504
00:21:53,600 --> 00:21:55,280
of that that

505
00:21:55,280 --> 00:21:57,120
they compared that the speed the

506
00:21:57,120 --> 00:21:58,720
performance of

507
00:21:58,720 --> 00:22:01,679
this particular instance was much lower

508
00:22:01,679 --> 00:22:03,679
than um

509
00:22:03,679 --> 00:22:04,080
then

510
00:22:04,080 --> 00:22:05,760
[Music]

511
00:22:05,760 --> 00:22:08,799
performance of other instances so this

512
00:22:08,799 --> 00:22:11,360
is again this is great way

513
00:22:11,360 --> 00:22:14,000
how an attacker can

514
00:22:14,000 --> 00:22:17,360
you know put any code in the

515
00:22:17,360 --> 00:22:19,679
in the ami

516
00:22:19,679 --> 00:22:21,360
another example

517
00:22:21,360 --> 00:22:22,480
is the

518
00:22:22,480 --> 00:22:24,400
application

519
00:22:24,400 --> 00:22:27,280
serverless application repository

520
00:22:27,280 --> 00:22:29,600
so if you are if you are familiar with

521
00:22:29,600 --> 00:22:32,720
the um vulnerable uh

522
00:22:32,720 --> 00:22:34,320
with the vulnerable serverless

523
00:22:34,320 --> 00:22:36,720
application uh then you probably know

524
00:22:36,720 --> 00:22:40,000
the serverless goat so this is a great

525
00:22:40,000 --> 00:22:42,720
open source project

526
00:22:42,720 --> 00:22:44,000
to learn the

527
00:22:44,000 --> 00:22:46,799
how to hack serverless applications

528
00:22:46,799 --> 00:22:48,799
the problem is that

529
00:22:48,799 --> 00:22:50,000
anyone

530
00:22:50,000 --> 00:22:52,080
can

531
00:22:52,080 --> 00:22:55,200
can publish the the project and put it

532
00:22:55,200 --> 00:22:56,159
in the

533
00:22:56,159 --> 00:22:57,440
um

534
00:22:57,440 --> 00:22:58,640
in the

535
00:22:58,640 --> 00:23:01,440
serverless application repository

536
00:23:01,440 --> 00:23:05,039
and here is is such example

537
00:23:05,039 --> 00:23:07,200
all of those four

538
00:23:07,200 --> 00:23:08,880
uh

539
00:23:08,880 --> 00:23:11,039
applications are

540
00:23:11,039 --> 00:23:12,960
released by

541
00:23:12,960 --> 00:23:14,640
different

542
00:23:14,640 --> 00:23:18,159
accounts okay different aws accounts

543
00:23:18,159 --> 00:23:20,240
only one of it

544
00:23:20,240 --> 00:23:23,039
was released by the original authors of

545
00:23:23,039 --> 00:23:25,840
the serverless gold however this project

546
00:23:25,840 --> 00:23:27,840
is no longer maintained

547
00:23:27,840 --> 00:23:28,880
so

548
00:23:28,880 --> 00:23:30,159
in

549
00:23:30,159 --> 00:23:33,120
in consequence

550
00:23:33,440 --> 00:23:35,440
this um

551
00:23:35,440 --> 00:23:37,280
the

552
00:23:37,280 --> 00:23:40,000
node.js runtime environment is

553
00:23:40,000 --> 00:23:42,720
deprecated uh so

554
00:23:42,720 --> 00:23:46,320
it doesn't work it it works no longer

555
00:23:46,320 --> 00:23:48,880
so the solution and it was reported in

556
00:23:48,880 --> 00:23:51,760
the issues on the github repository

557
00:23:51,760 --> 00:23:54,480
and the solution was hey just you know

558
00:23:54,480 --> 00:23:57,200
type in the uh choose the appsx

559
00:23:57,200 --> 00:23:59,360
serverless gold and this is the working

560
00:23:59,360 --> 00:24:02,240
version because somebody you know fixed

561
00:24:02,240 --> 00:24:05,279
it and publish it but the same thing

562
00:24:05,279 --> 00:24:08,880
could be you know done by anyone so the

563
00:24:08,880 --> 00:24:11,840
the attacker can you know publish the

564
00:24:11,840 --> 00:24:15,279
uh any kind of serverless application

565
00:24:15,279 --> 00:24:19,039
you can name it as you want all of them

566
00:24:19,039 --> 00:24:21,520
has the same you know uh

567
00:24:21,520 --> 00:24:24,000
the same description

568
00:24:24,000 --> 00:24:26,240
and then people are running it

569
00:24:26,240 --> 00:24:29,200
um in their hope so

570
00:24:29,200 --> 00:24:32,640
sandbox environments

571
00:24:32,640 --> 00:24:37,120
another thing i want to um

572
00:24:37,279 --> 00:24:40,240
i want to to to pay attention

573
00:24:40,240 --> 00:24:42,799
to another thing which is the

574
00:24:42,799 --> 00:24:44,720
iam roles

575
00:24:44,720 --> 00:24:47,520
very often when i was doing the

576
00:24:47,520 --> 00:24:50,080
uh security assessment

577
00:24:50,080 --> 00:24:52,799
and i was reviewing the the roles the

578
00:24:52,799 --> 00:24:55,840
trust policy of the roles

579
00:24:55,840 --> 00:24:59,039
then the the role could be

580
00:24:59,039 --> 00:25:03,200
assumed by multiple accounts

581
00:25:03,200 --> 00:25:04,480
and

582
00:25:04,480 --> 00:25:08,240
usually it took a couple of days

583
00:25:08,240 --> 00:25:10,559
for administrators to

584
00:25:10,559 --> 00:25:14,799
to find who is the owner of this

585
00:25:14,799 --> 00:25:15,840
you know

586
00:25:15,840 --> 00:25:17,520
this account id

587
00:25:17,520 --> 00:25:21,440
usually it was the third party um so the

588
00:25:21,440 --> 00:25:24,320
third party you know because they

589
00:25:24,320 --> 00:25:26,559
uh they are integrated

590
00:25:26,559 --> 00:25:30,080
with uh with the internal solutions so

591
00:25:30,080 --> 00:25:31,520
the

592
00:25:31,520 --> 00:25:34,080
so they they need the access okay so for

593
00:25:34,080 --> 00:25:35,279
let's say the

594
00:25:35,279 --> 00:25:38,480
third party which is responsible for um

595
00:25:38,480 --> 00:25:42,240
reviewing your cloudtrail logs

596
00:25:42,240 --> 00:25:43,200
then

597
00:25:43,200 --> 00:25:46,240
they need access to your um to your for

598
00:25:46,240 --> 00:25:49,200
example as free bucket with the logs and

599
00:25:49,200 --> 00:25:51,279
then

600
00:25:51,279 --> 00:25:53,520
they are doing their job

601
00:25:53,520 --> 00:25:55,279
but very often

602
00:25:55,279 --> 00:25:56,720
also

603
00:25:56,720 --> 00:25:58,960
in my cases

604
00:25:58,960 --> 00:26:01,760
the customer was

605
00:26:01,760 --> 00:26:04,880
after several days found that okay we no

606
00:26:04,880 --> 00:26:06,960
longer have

607
00:26:06,960 --> 00:26:10,000
we no longer work with this particular

608
00:26:10,000 --> 00:26:11,600
third party

609
00:26:11,600 --> 00:26:14,080
so it only

610
00:26:14,080 --> 00:26:17,600
lives there because somebody forgot to

611
00:26:17,600 --> 00:26:19,679
to remove this access

612
00:26:19,679 --> 00:26:22,000
and i think that this is very common

613
00:26:22,000 --> 00:26:23,840
practice

614
00:26:23,840 --> 00:26:26,559
there is even a research about it

615
00:26:26,559 --> 00:26:27,600
and

616
00:26:27,600 --> 00:26:29,360
the results are

617
00:26:29,360 --> 00:26:31,120
really astonishing

618
00:26:31,120 --> 00:26:32,559
so

619
00:26:32,559 --> 00:26:34,559
a lot of companies

620
00:26:34,559 --> 00:26:37,279
which work with third parties which is

621
00:26:37,279 --> 00:26:40,480
normal and of course

622
00:26:40,480 --> 00:26:42,559
typical

623
00:26:42,559 --> 00:26:46,080
but those third parties very often

624
00:26:46,080 --> 00:26:48,000
asks for the

625
00:26:48,000 --> 00:26:50,000
too much um

626
00:26:50,000 --> 00:26:53,520
too big privileges so here i don't want

627
00:26:53,520 --> 00:26:55,360
to you know name

628
00:26:55,360 --> 00:26:57,760
who is the the owner of this

629
00:26:57,760 --> 00:26:59,360
recommendation but

630
00:26:59,360 --> 00:27:03,200
it was found uh on the website of the

631
00:27:03,200 --> 00:27:05,120
third party

632
00:27:05,120 --> 00:27:06,480
and

633
00:27:06,480 --> 00:27:07,560
they um

634
00:27:07,560 --> 00:27:09,360
[Music]

635
00:27:09,360 --> 00:27:12,080
they wrote the documentation how to

636
00:27:12,080 --> 00:27:13,279
integrate

637
00:27:13,279 --> 00:27:15,360
their solution uh

638
00:27:15,360 --> 00:27:18,320
with your aws solution so in their

639
00:27:18,320 --> 00:27:20,960
documentation there was something like

640
00:27:20,960 --> 00:27:24,159
that the recommended way to grant access

641
00:27:24,159 --> 00:27:27,919
to this third party was to create the

642
00:27:27,919 --> 00:27:31,200
the role with the read only access

643
00:27:31,200 --> 00:27:34,399
for those who are familiar with

644
00:27:34,399 --> 00:27:38,480
iam policies knows that read-only access

645
00:27:38,480 --> 00:27:42,080
grants you read access to

646
00:27:42,080 --> 00:27:44,240
almost all

647
00:27:44,240 --> 00:27:47,120
aws services

648
00:27:47,120 --> 00:27:50,880
so uh it is ma and and the third party

649
00:27:50,880 --> 00:27:54,559
required only they read access to one s3

650
00:27:54,559 --> 00:27:55,600
bucket

651
00:27:55,600 --> 00:27:57,760
and usually um

652
00:27:57,760 --> 00:27:58,640
that's

653
00:27:58,640 --> 00:28:01,600
that's the problem that companies

654
00:28:01,600 --> 00:28:04,480
those third parties have access read

655
00:28:04,480 --> 00:28:05,919
access to

656
00:28:05,919 --> 00:28:10,559
a lot of confidential data

657
00:28:10,559 --> 00:28:14,240
so this is this is why i believe that

658
00:28:14,240 --> 00:28:16,960
the solar winds uh the cloud version of

659
00:28:16,960 --> 00:28:19,120
the solar winds attack is just a matter

660
00:28:19,120 --> 00:28:22,320
of of time because now think about it

661
00:28:22,320 --> 00:28:26,480
that um attackers will compromise uh one

662
00:28:26,480 --> 00:28:28,240
of the s

663
00:28:28,240 --> 00:28:31,039
one of the you know third party

664
00:28:31,039 --> 00:28:32,880
provider and

665
00:28:32,880 --> 00:28:35,279
then have access to

666
00:28:35,279 --> 00:28:36,480
a lot of

667
00:28:36,480 --> 00:28:39,440
their customers

668
00:28:40,000 --> 00:28:42,399
okay so now let's talk about the

669
00:28:42,399 --> 00:28:44,559
privilege escalation so assuming that

670
00:28:44,559 --> 00:28:47,600
the attacker is able um

671
00:28:47,600 --> 00:28:51,440
to get initial access to your clout now

672
00:28:51,440 --> 00:28:53,600
how it is possible to escalate the

673
00:28:53,600 --> 00:28:55,760
privileges

674
00:28:55,760 --> 00:28:57,200
so the most

675
00:28:57,200 --> 00:28:59,920
known the most commonly known

676
00:28:59,920 --> 00:29:01,120
[Music]

677
00:29:01,120 --> 00:29:05,439
research about it is done by

678
00:29:06,240 --> 00:29:08,799
by rhino security labs

679
00:29:08,799 --> 00:29:11,760
and by spencer gitzen

680
00:29:11,760 --> 00:29:14,320
and there are defined

681
00:29:14,320 --> 00:29:18,080
permissions which are

682
00:29:18,080 --> 00:29:21,360
very dangerous in the hands of attacker

683
00:29:21,360 --> 00:29:23,440
what means that

684
00:29:23,440 --> 00:29:26,399
if you for example have the permission

685
00:29:26,399 --> 00:29:27,120
of

686
00:29:27,120 --> 00:29:29,360
compromised account has the permission

687
00:29:29,360 --> 00:29:32,880
to run instance as well as the iam pass

688
00:29:32,880 --> 00:29:36,320
rule then you can run the ec2 instance

689
00:29:36,320 --> 00:29:38,720
and pass the

690
00:29:38,720 --> 00:29:41,600
privileged role to this instance and

691
00:29:41,600 --> 00:29:44,960
then from the uh from this

692
00:29:44,960 --> 00:29:48,240
newly created instance you can do

693
00:29:48,240 --> 00:29:50,320
actions with the permissions of this

694
00:29:50,320 --> 00:29:52,799
privileged role

695
00:29:52,799 --> 00:29:55,360
okay but this is this is something what

696
00:29:55,360 --> 00:29:57,840
we uh what the community and what people

697
00:29:57,840 --> 00:30:00,640
are already familiar i hope so

698
00:30:00,640 --> 00:30:03,360
uh but let's talk about the non-obvious

699
00:30:03,360 --> 00:30:06,960
methods of escalating privileges

700
00:30:06,960 --> 00:30:08,720
so um

701
00:30:08,720 --> 00:30:10,559
the first the first thing you have to

702
00:30:10,559 --> 00:30:14,320
understand is um when you are when a

703
00:30:14,320 --> 00:30:18,000
user or any kind of identity

704
00:30:18,000 --> 00:30:22,640
wants to assume a role the iam role

705
00:30:22,640 --> 00:30:23,600
then

706
00:30:23,600 --> 00:30:26,640
there's need to be a permission or in

707
00:30:26,640 --> 00:30:28,080
the trust

708
00:30:28,080 --> 00:30:28,960
uh

709
00:30:28,960 --> 00:30:32,640
trust policy of the iem role so that

710
00:30:32,640 --> 00:30:36,159
yes this particular user can assume a

711
00:30:36,159 --> 00:30:39,120
role can assume this particular role

712
00:30:39,120 --> 00:30:41,440
as well as the

713
00:30:41,440 --> 00:30:45,120
identity the iam user needs to have the

714
00:30:45,120 --> 00:30:48,640
permission to assume role

715
00:30:48,640 --> 00:30:52,080
okay so in so in other words

716
00:30:52,080 --> 00:30:53,279
the

717
00:30:53,279 --> 00:30:55,919
user need to have permission

718
00:30:55,919 --> 00:30:57,279
and the

719
00:30:57,279 --> 00:30:59,039
iem role

720
00:30:59,039 --> 00:31:01,120
need to also

721
00:31:01,120 --> 00:31:05,519
allow that this particular user will

722
00:31:05,519 --> 00:31:08,320
will be allowed to assume the role

723
00:31:08,320 --> 00:31:10,720
at least this is what we believe

724
00:31:10,720 --> 00:31:13,360
how it works because in fact

725
00:31:13,360 --> 00:31:16,720
there are cases where you don't need the

726
00:31:16,720 --> 00:31:19,840
assume role to assume role

727
00:31:19,840 --> 00:31:23,120
it sounds ridiculous but

728
00:31:23,120 --> 00:31:24,640
take a look

729
00:31:24,640 --> 00:31:26,640
here is the example of

730
00:31:26,640 --> 00:31:30,399
two very similar

731
00:31:30,799 --> 00:31:32,799
trust policies

732
00:31:32,799 --> 00:31:36,559
okay so in this uh this is uh

733
00:31:36,559 --> 00:31:38,640
by the way this is also very interesting

734
00:31:38,640 --> 00:31:39,760
that

735
00:31:39,760 --> 00:31:42,159
you can as you can see uh there is the

736
00:31:42,159 --> 00:31:45,519
root uh in the aws principle but it

737
00:31:45,519 --> 00:31:47,679
doesn't mean that only root can assume

738
00:31:47,679 --> 00:31:48,799
this

739
00:31:48,799 --> 00:31:49,919
this role

740
00:31:49,919 --> 00:31:51,919
but any user

741
00:31:51,919 --> 00:31:55,200
in this aws account is

742
00:31:55,200 --> 00:31:57,120
is allowed to

743
00:31:57,120 --> 00:31:59,519
assume this role this is very very

744
00:31:59,519 --> 00:32:00,720
common

745
00:32:00,720 --> 00:32:03,760
however on the other on the other side

746
00:32:03,760 --> 00:32:05,279
we have the

747
00:32:05,279 --> 00:32:09,519
um trust policy which allows to access

748
00:32:09,519 --> 00:32:10,720
anyone

749
00:32:10,720 --> 00:32:13,200
however there's the condition that the

750
00:32:13,200 --> 00:32:15,679
principal account need to be the

751
00:32:15,679 --> 00:32:16,799
following

752
00:32:16,799 --> 00:32:18,960
so at the first glance

753
00:32:18,960 --> 00:32:21,200
it looks like

754
00:32:21,200 --> 00:32:23,360
those two uh

755
00:32:23,360 --> 00:32:27,279
two trust policies can do exactly

756
00:32:27,279 --> 00:32:30,720
are you know they are the same

757
00:32:30,720 --> 00:32:33,279
but the problem is

758
00:32:33,279 --> 00:32:34,799
that

759
00:32:34,799 --> 00:32:36,000
sorry

760
00:32:36,000 --> 00:32:37,760
but the problem is

761
00:32:37,760 --> 00:32:41,120
uh that they are not the same

762
00:32:41,120 --> 00:32:42,399
because

763
00:32:42,399 --> 00:32:44,720
when you are using the

764
00:32:44,720 --> 00:32:45,840
um

765
00:32:45,840 --> 00:32:48,559
wildcard in the principle

766
00:32:48,559 --> 00:32:51,760
then the user doesn't have to doesn't

767
00:32:51,760 --> 00:32:54,080
need to have this assumed role because

768
00:32:54,080 --> 00:32:58,320
it is granted by the trust policy now

769
00:32:58,320 --> 00:33:00,480
that may be um

770
00:33:00,480 --> 00:33:02,960
quite

771
00:33:03,039 --> 00:33:06,399
confusing uh because when you are using

772
00:33:06,399 --> 00:33:07,679
when you are

773
00:33:07,679 --> 00:33:11,519
putting the wildcard in the principal

774
00:33:11,519 --> 00:33:12,720
section

775
00:33:12,720 --> 00:33:15,279
then the trust policy works like a

776
00:33:15,279 --> 00:33:17,360
resource policy

777
00:33:17,360 --> 00:33:19,679
and the resource policy

778
00:33:19,679 --> 00:33:23,120
can grant a permission to the identity

779
00:33:23,120 --> 00:33:24,399
what means

780
00:33:24,399 --> 00:33:27,840
uh if we take for example um

781
00:33:27,840 --> 00:33:29,840
the the

782
00:33:29,840 --> 00:33:32,159
the following trust policy was very

783
00:33:32,159 --> 00:33:36,000
often uh well very often can be found in

784
00:33:36,000 --> 00:33:37,039
the

785
00:33:37,039 --> 00:33:40,000
accounts which uses multiple aws

786
00:33:40,000 --> 00:33:42,000
accounts for example in the aws

787
00:33:42,000 --> 00:33:44,000
organizations

788
00:33:44,000 --> 00:33:47,360
it was quite common and i think is still

789
00:33:47,360 --> 00:33:50,559
quite common because even on the

790
00:33:50,559 --> 00:33:55,519
official aws uh security blog it was uh

791
00:33:55,519 --> 00:33:58,080
presented as an example

792
00:33:58,080 --> 00:34:02,080
um to to how to create the role for

793
00:34:02,080 --> 00:34:04,840
every aws account which is in this

794
00:34:04,840 --> 00:34:08,159
particular organization

795
00:34:08,159 --> 00:34:10,639
as you can see it is now i'm referring

796
00:34:10,639 --> 00:34:11,839
to the

797
00:34:11,839 --> 00:34:14,159
web archive because

798
00:34:14,159 --> 00:34:18,399
after publishing um my finding and then

799
00:34:18,399 --> 00:34:21,599
it was removed from the official um

800
00:34:21,599 --> 00:34:25,599
block which of course is very good

801
00:34:25,599 --> 00:34:29,359
but that's not the only way how you can

802
00:34:29,359 --> 00:34:33,199
find this strange behavior in that

803
00:34:33,199 --> 00:34:35,280
in the trust policy

804
00:34:35,280 --> 00:34:39,440
if you put um not only wildcard but for

805
00:34:39,440 --> 00:34:41,679
example the uh

806
00:34:41,679 --> 00:34:45,119
the resource number of the role

807
00:34:45,119 --> 00:34:47,040
in the trust policy

808
00:34:47,040 --> 00:34:49,280
then this role

809
00:34:49,280 --> 00:34:53,119
doesn't need to have the the sds assume

810
00:34:53,119 --> 00:34:54,960
role permission

811
00:34:54,960 --> 00:34:56,719
okay so

812
00:34:56,719 --> 00:34:59,760
i know that it may sound confusing so

813
00:34:59,760 --> 00:35:00,880
let me

814
00:35:00,880 --> 00:35:03,359
show it on the on the

815
00:35:03,359 --> 00:35:07,440
little example uh here will be the demo

816
00:35:07,440 --> 00:35:09,200
that

817
00:35:09,200 --> 00:35:11,280
let's say the attacker was able to

818
00:35:11,280 --> 00:35:15,839
compromise the unprivileged iem user

819
00:35:15,839 --> 00:35:20,800
and then this user because there is the

820
00:35:20,800 --> 00:35:24,320
um trust policy uh with the wildcard

821
00:35:24,320 --> 00:35:25,599
then this com

822
00:35:25,599 --> 00:35:29,359
unprivileged iem user is granted with

823
00:35:29,359 --> 00:35:33,359
the assume role from the trust policy

824
00:35:33,359 --> 00:35:35,760
and then there is a

825
00:35:35,760 --> 00:35:37,119
principal

826
00:35:37,119 --> 00:35:39,680
id in the

827
00:35:39,680 --> 00:35:43,839
of other role privileged role there's a

828
00:35:43,839 --> 00:35:45,680
reference from this

829
00:35:45,680 --> 00:35:48,560
maintenance unprivileged role

830
00:35:48,560 --> 00:35:50,640
and then in this way

831
00:35:50,640 --> 00:35:52,720
the attacker will become the

832
00:35:52,720 --> 00:35:54,079
administrator

833
00:35:54,079 --> 00:35:56,880
okay let me show you uh how does it work

834
00:35:56,880 --> 00:35:58,800
so here we have the

835
00:35:58,800 --> 00:36:00,640
compromised user as you can see this

836
00:36:00,640 --> 00:36:02,960
user has no permissions

837
00:36:02,960 --> 00:36:07,280
absolutely cannot do anything okay

838
00:36:07,280 --> 00:36:09,280
there's no policy attached to it there

839
00:36:09,280 --> 00:36:12,320
is also the maintenance role

840
00:36:12,320 --> 00:36:14,640
and this maintenance role

841
00:36:14,640 --> 00:36:17,839
only have the read-only access

842
00:36:17,839 --> 00:36:21,280
and the trust relationship is

843
00:36:21,280 --> 00:36:23,440
as you can see there is the

844
00:36:23,440 --> 00:36:27,200
wildcard in the principle and it is

845
00:36:27,200 --> 00:36:29,920
limited only to accounts in this

846
00:36:29,920 --> 00:36:32,720
particular organization

847
00:36:32,720 --> 00:36:34,959
so

848
00:36:36,000 --> 00:36:37,359
now

849
00:36:37,359 --> 00:36:40,240
because i have this compromised user so

850
00:36:40,240 --> 00:36:42,560
here

851
00:36:43,119 --> 00:36:45,200
configured the

852
00:36:45,200 --> 00:36:48,079
access keys of compromised user

853
00:36:48,079 --> 00:36:51,839
all the identities are allowed to

854
00:36:51,839 --> 00:36:54,640
run the sts get caller identity even if

855
00:36:54,640 --> 00:36:56,480
you don't have any permissions as you

856
00:36:56,480 --> 00:36:57,680
can see

857
00:36:57,680 --> 00:36:58,480
now

858
00:36:58,480 --> 00:37:01,119
i still don't this compromised user has

859
00:37:01,119 --> 00:37:03,200
no permissions at all

860
00:37:03,200 --> 00:37:04,400
but

861
00:37:04,400 --> 00:37:05,839
i can

862
00:37:05,839 --> 00:37:06,960
assume

863
00:37:06,960 --> 00:37:08,000
row

864
00:37:08,000 --> 00:37:11,200
in the console and that grants me

865
00:37:11,200 --> 00:37:13,119
the

866
00:37:13,119 --> 00:37:15,920
temporary access keys of the

867
00:37:15,920 --> 00:37:18,160
as well as the session token

868
00:37:18,160 --> 00:37:23,040
to the maintenance role so now i can

869
00:37:23,040 --> 00:37:28,480
configure another profile in my terminal

870
00:37:28,480 --> 00:37:30,160
using those

871
00:37:30,160 --> 00:37:31,839
those temporary

872
00:37:31,839 --> 00:37:33,119
temporary

873
00:37:33,119 --> 00:37:36,880
credentials so aws access key id secret

874
00:37:36,880 --> 00:37:39,599
access key and then i have to also

875
00:37:39,599 --> 00:37:42,320
specify the session token which can be

876
00:37:42,320 --> 00:37:47,359
done using the aws configure set command

877
00:37:47,359 --> 00:37:50,480
and then session token

878
00:37:50,480 --> 00:37:53,680
and then just copy paste the session

879
00:37:53,680 --> 00:37:56,078
token

880
00:37:59,119 --> 00:38:02,000
and of course in the name of profile

881
00:38:02,000 --> 00:38:05,440
maintenance role

882
00:38:05,440 --> 00:38:06,800
so now

883
00:38:06,800 --> 00:38:08,160
let's

884
00:38:08,160 --> 00:38:11,359
take a look if we are

885
00:38:11,359 --> 00:38:14,079
if everything works well

886
00:38:14,079 --> 00:38:17,440
so now we are running the sts get caller

887
00:38:17,440 --> 00:38:19,520
identity but using the profile

888
00:38:19,520 --> 00:38:21,520
maintenance role which we

889
00:38:21,520 --> 00:38:22,880
configured

890
00:38:22,880 --> 00:38:24,640
a moment ago

891
00:38:24,640 --> 00:38:25,520
okay

892
00:38:25,520 --> 00:38:29,520
as you can see where i can run the now

893
00:38:29,520 --> 00:38:33,359
all actions as their maintenance role

894
00:38:33,359 --> 00:38:36,720
but on the same account there is also

895
00:38:36,720 --> 00:38:38,800
the admin role

896
00:38:38,800 --> 00:38:41,200
and if we take a look on the trust

897
00:38:41,200 --> 00:38:46,040
relationship of the admin role

898
00:38:46,079 --> 00:38:50,240
you can see that that the principle is

899
00:38:50,240 --> 00:38:53,760
the role maintenance role

900
00:38:53,760 --> 00:38:55,680
okay so now

901
00:38:55,680 --> 00:38:57,839
if i'm using the maintenance role as you

902
00:38:57,839 --> 00:38:58,880
remember

903
00:38:58,880 --> 00:39:02,880
maintenance role had only permissions uh

904
00:39:02,880 --> 00:39:05,520
the read-only permissions

905
00:39:05,520 --> 00:39:08,480
there's no sts assume role permission to

906
00:39:08,480 --> 00:39:09,760
this role

907
00:39:09,760 --> 00:39:10,960
however

908
00:39:10,960 --> 00:39:14,480
i'm allowed to assume the admin role

909
00:39:14,480 --> 00:39:17,839
because in the principle there is

910
00:39:17,839 --> 00:39:18,880
the

911
00:39:18,880 --> 00:39:24,400
direct reference to to this iem role

912
00:39:24,400 --> 00:39:25,760
now

913
00:39:25,760 --> 00:39:29,320
for me it is it is a big problem of

914
00:39:29,320 --> 00:39:31,599
inconsistency um

915
00:39:31,599 --> 00:39:35,119
i reported it to to aws i talked with

916
00:39:35,119 --> 00:39:38,960
with them um so i believe that soon

917
00:39:38,960 --> 00:39:42,560
there will be uh released some um some

918
00:39:42,560 --> 00:39:45,760
official solution to it

919
00:39:45,760 --> 00:39:50,560
but now it works as it as it is

920
00:39:50,720 --> 00:39:53,760
all right so now assuming that our

921
00:39:53,760 --> 00:39:56,240
attacker was able to get initial access

922
00:39:56,240 --> 00:39:58,800
and then escalate privileges then

923
00:39:58,800 --> 00:40:01,040
there's another problem of exfiltrating

924
00:40:01,040 --> 00:40:04,240
data of course once you have the access

925
00:40:04,240 --> 00:40:06,079
to this

926
00:40:06,079 --> 00:40:08,160
to this

927
00:40:08,160 --> 00:40:11,200
compromised aws account

928
00:40:11,200 --> 00:40:12,400
then

929
00:40:12,400 --> 00:40:13,520
you can

930
00:40:13,520 --> 00:40:15,520
exfiltrate data using

931
00:40:15,520 --> 00:40:18,079
multiple ways uh

932
00:40:18,079 --> 00:40:22,640
like for example uh pushing all this

933
00:40:22,640 --> 00:40:24,720
sensitive stuff to to

934
00:40:24,720 --> 00:40:26,720
your own s-free

935
00:40:26,720 --> 00:40:27,839
bucket

936
00:40:27,839 --> 00:40:28,800
um

937
00:40:28,800 --> 00:40:29,760
or

938
00:40:29,760 --> 00:40:31,280
just

939
00:40:31,280 --> 00:40:35,040
doing the snapshot of the rds instance

940
00:40:35,040 --> 00:40:36,079
and then

941
00:40:36,079 --> 00:40:40,400
sharing it with the attackers account

942
00:40:40,400 --> 00:40:42,960
a lot of ways how to do it

943
00:40:42,960 --> 00:40:45,200
but

944
00:40:45,680 --> 00:40:48,800
but all of those actions are logged

945
00:40:48,800 --> 00:40:53,040
by the aws cloud trail or at least

946
00:40:53,040 --> 00:40:55,119
vpc flow logs

947
00:40:55,119 --> 00:40:57,040
detects all those

948
00:40:57,040 --> 00:40:59,680
actions of exfiltration

949
00:40:59,680 --> 00:41:01,200
however

950
00:41:01,200 --> 00:41:02,240
what is

951
00:41:02,240 --> 00:41:06,000
lesser known method is that you can

952
00:41:06,000 --> 00:41:09,359
steal the data which will not be

953
00:41:09,359 --> 00:41:11,040
um

954
00:41:11,040 --> 00:41:14,079
which will not be detected by all those

955
00:41:14,079 --> 00:41:16,079
monitoring or logging

956
00:41:16,079 --> 00:41:18,400
services

957
00:41:18,400 --> 00:41:20,800
okay let me explain it

958
00:41:20,800 --> 00:41:24,720
by default in every vpc dns uh in every

959
00:41:24,720 --> 00:41:26,160
vps

960
00:41:26,160 --> 00:41:29,760
vpc sorry dns resolution is enabled by

961
00:41:29,760 --> 00:41:30,880
default

962
00:41:30,880 --> 00:41:33,599
what means that once you

963
00:41:33,599 --> 00:41:36,319
spin up the new ec2 instance

964
00:41:36,319 --> 00:41:39,520
in your vpc and you are

965
00:41:39,520 --> 00:41:41,520
write the command

966
00:41:41,520 --> 00:41:43,920
ping

967
00:41:44,319 --> 00:41:45,920
amazon.com

968
00:41:45,920 --> 00:41:49,440
then the amazon.com name will be

969
00:41:49,440 --> 00:41:52,960
automatically resolved

970
00:41:52,960 --> 00:41:53,760
and

971
00:41:53,760 --> 00:41:54,720
what

972
00:41:54,720 --> 00:41:57,599
people are not aware is that

973
00:41:57,599 --> 00:42:00,640
in the documentation of

974
00:42:00,640 --> 00:42:03,040
a vpc you can find

975
00:42:03,040 --> 00:42:05,359
that the traffic to

976
00:42:05,359 --> 00:42:06,880
or from

977
00:42:06,880 --> 00:42:09,040
amazon dns server

978
00:42:09,040 --> 00:42:10,640
um

979
00:42:10,640 --> 00:42:12,640
will not be

980
00:42:12,640 --> 00:42:16,319
filtered by the network acls the access

981
00:42:16,319 --> 00:42:18,240
control lists or

982
00:42:18,240 --> 00:42:20,960
the security groups

983
00:42:20,960 --> 00:42:23,280
furthermore even in the

984
00:42:23,280 --> 00:42:27,040
vpc flow logs you can see that

985
00:42:27,040 --> 00:42:30,319
the the traffic generated by instances

986
00:42:30,319 --> 00:42:33,440
when they contact the amazon dns server

987
00:42:33,440 --> 00:42:36,160
it's not logged at all

988
00:42:36,160 --> 00:42:38,480
okay let me let me show you

989
00:42:38,480 --> 00:42:41,680
on the the following

990
00:42:41,680 --> 00:42:42,839
example

991
00:42:42,839 --> 00:42:45,760
so here i have the

992
00:42:45,760 --> 00:42:48,319
ec2 instance which is in the private

993
00:42:48,319 --> 00:42:51,359
subnet and the private subnet has no

994
00:42:51,359 --> 00:42:53,599
should have no uh

995
00:42:53,599 --> 00:42:56,000
connection to the internet let's say

996
00:42:56,000 --> 00:42:57,680
there is also

997
00:42:57,680 --> 00:43:01,280
any any egress traffic is is blocked

998
00:43:01,280 --> 00:43:02,480
using their

999
00:43:02,480 --> 00:43:04,560
security group and network access

1000
00:43:04,560 --> 00:43:07,359
control lists so when i run on this

1001
00:43:07,359 --> 00:43:10,240
being on this um having the session to

1002
00:43:10,240 --> 00:43:13,599
this ec2 instance and when i run the

1003
00:43:13,599 --> 00:43:15,119
command

1004
00:43:15,119 --> 00:43:16,560
ping

1005
00:43:16,560 --> 00:43:19,359
here's the some base64

1006
00:43:19,359 --> 00:43:22,240
secret encoded secret and here is my

1007
00:43:22,240 --> 00:43:24,839
domain name which which i

1008
00:43:24,839 --> 00:43:29,760
control um and the the this command of

1009
00:43:29,760 --> 00:43:33,920
course will not um give any icmp

1010
00:43:33,920 --> 00:43:40,920
response however on the uh on my um

1011
00:43:40,960 --> 00:43:42,960
dns server

1012
00:43:42,960 --> 00:43:46,800
logs i can see that this uh this name

1013
00:43:46,800 --> 00:43:50,240
was tried to resolved so in this way i

1014
00:43:50,240 --> 00:43:54,400
can see that that uh this base64 encoded

1015
00:43:54,400 --> 00:43:56,160
secret on my

1016
00:43:56,160 --> 00:43:59,200
zepskycom dns server

1017
00:43:59,200 --> 00:44:03,040
so you can do uh you can go even a step

1018
00:44:03,040 --> 00:44:07,680
further and create a reverse shell over

1019
00:44:07,680 --> 00:44:10,720
dns yes

1020
00:44:10,720 --> 00:44:14,880
so as you can see i used the dns cut

1021
00:44:14,880 --> 00:44:15,839
tool

1022
00:44:15,839 --> 00:44:18,319
and i was able to

1023
00:44:18,319 --> 00:44:21,599
get the reverse shell to such

1024
00:44:21,599 --> 00:44:24,160
isolated ec2 instance which shouldn't

1025
00:44:24,160 --> 00:44:27,040
have any access

1026
00:44:27,440 --> 00:44:29,440
how if you want to

1027
00:44:29,440 --> 00:44:31,280
repeat this

1028
00:44:31,280 --> 00:44:34,079
like do it by yourself

1029
00:44:34,079 --> 00:44:34,960
then

1030
00:44:34,960 --> 00:44:36,640
you can run

1031
00:44:36,640 --> 00:44:39,760
my version of the dns cut too

1032
00:44:39,760 --> 00:44:41,440
because this

1033
00:44:41,440 --> 00:44:44,640
the official one dns cut two

1034
00:44:44,640 --> 00:44:47,680
is no longer maintained

1035
00:44:47,680 --> 00:44:51,440
the good news is when when i was doing

1036
00:44:51,440 --> 00:44:53,920
you know the the um

1037
00:44:53,920 --> 00:44:58,000
the the single queries to my zepsky.com

1038
00:44:58,000 --> 00:44:59,119
domain

1039
00:44:59,119 --> 00:45:02,000
it wasn't detected by by any service

1040
00:45:02,000 --> 00:45:04,880
however once i run the

1041
00:45:04,880 --> 00:45:06,079
the

1042
00:45:06,079 --> 00:45:08,640
reverse shell over dns

1043
00:45:08,640 --> 00:45:12,240
then the aws guard duty uh

1044
00:45:12,240 --> 00:45:16,560
detected it so that is definitely um

1045
00:45:16,560 --> 00:45:18,480
a good news

1046
00:45:18,480 --> 00:45:19,280
so

1047
00:45:19,280 --> 00:45:21,440
um it will be

1048
00:45:21,440 --> 00:45:23,359
so only when the

1049
00:45:23,359 --> 00:45:27,599
high volume in the dns is is sent then

1050
00:45:27,599 --> 00:45:29,680
guard duty will help you

1051
00:45:29,680 --> 00:45:30,839
um

1052
00:45:30,839 --> 00:45:32,560
however

1053
00:45:32,560 --> 00:45:36,640
it it requires further um investigation

1054
00:45:36,640 --> 00:45:39,520
uh what does it mean the high volume and

1055
00:45:39,520 --> 00:45:42,960
to what limit you can still uh

1056
00:45:42,960 --> 00:45:48,880
send data over dns and being undetected

1057
00:45:48,880 --> 00:45:51,280
all right so now let's talk a little bit

1058
00:45:51,280 --> 00:45:53,359
about the defense

1059
00:45:53,359 --> 00:45:57,119
uh so in this year at the end of march

1060
00:45:57,119 --> 00:45:59,119
uh in this year

1061
00:45:59,119 --> 00:46:02,880
there was announced the root 53

1062
00:46:02,880 --> 00:46:05,839
resolver dns firewall

1063
00:46:05,839 --> 00:46:08,160
and this is the the server

1064
00:46:08,160 --> 00:46:11,200
the service which is designed to help

1065
00:46:11,200 --> 00:46:12,839
you um

1066
00:46:12,839 --> 00:46:14,720
to um

1067
00:46:14,720 --> 00:46:18,319
basically to to uh fix this this gap in

1068
00:46:18,319 --> 00:46:20,160
the dns traffic

1069
00:46:20,160 --> 00:46:22,240
it allows you to

1070
00:46:22,240 --> 00:46:23,359
allow

1071
00:46:23,359 --> 00:46:25,760
block or alert

1072
00:46:25,760 --> 00:46:30,000
uh in any k any uh you know any queries

1073
00:46:30,000 --> 00:46:34,079
to uh using the dns uh protocol so for

1074
00:46:34,079 --> 00:46:37,200
example here um uh

1075
00:46:37,200 --> 00:46:40,640
i want to see in my uh

1076
00:46:40,640 --> 00:46:42,880
cloud watch log stream

1077
00:46:42,880 --> 00:46:46,480
i want to see all the query all the dns

1078
00:46:46,480 --> 00:46:49,040
queries that are uh sent

1079
00:46:49,040 --> 00:46:51,839
and thanks to root 53 resolver dns

1080
00:46:51,839 --> 00:46:55,359
firewall you can now see this dns

1081
00:46:55,359 --> 00:46:57,760
traffic you can also

1082
00:46:57,760 --> 00:47:01,920
block or allow so for example only the

1083
00:47:01,920 --> 00:47:06,319
traffic to some domain is allowed or

1084
00:47:06,319 --> 00:47:11,480
traffic to some domain is blocked

1085
00:47:12,079 --> 00:47:15,119
and what about other

1086
00:47:15,119 --> 00:47:16,640
mitigations

1087
00:47:16,640 --> 00:47:17,680
then

1088
00:47:17,680 --> 00:47:21,280
i would recommend you to to

1089
00:47:21,280 --> 00:47:25,040
reviewing uh your

1090
00:47:25,040 --> 00:47:27,520
trust policies if you are using of

1091
00:47:27,520 --> 00:47:29,280
course third parties

1092
00:47:29,280 --> 00:47:32,559
um and review the the permissions they

1093
00:47:32,559 --> 00:47:35,520
have and to verify

1094
00:47:35,520 --> 00:47:38,800
do they really need such broad

1095
00:47:38,800 --> 00:47:40,160
permissions

1096
00:47:40,160 --> 00:47:42,640
um audit your current trust policies

1097
00:47:42,640 --> 00:47:44,160
because

1098
00:47:44,160 --> 00:47:47,280
it may be uh pretty common that

1099
00:47:47,280 --> 00:47:48,000
you

1100
00:47:48,000 --> 00:47:51,760
some aws account uh from the old

1101
00:47:51,760 --> 00:47:54,080
projects um or

1102
00:47:54,080 --> 00:47:56,480
[Music]

1103
00:47:56,480 --> 00:47:58,640
from third parties which you no longer

1104
00:47:58,640 --> 00:47:59,440
use

1105
00:47:59,440 --> 00:48:02,160
they still have access to your roles

1106
00:48:02,160 --> 00:48:04,960
directly to your roles

1107
00:48:04,960 --> 00:48:07,119
um there is also a

1108
00:48:07,119 --> 00:48:07,839
a

1109
00:48:07,839 --> 00:48:09,440
interesting service which is called the

1110
00:48:09,440 --> 00:48:13,280
iam access analyzer which will show you

1111
00:48:13,280 --> 00:48:14,400
uh

1112
00:48:14,400 --> 00:48:15,839
who uh

1113
00:48:15,839 --> 00:48:19,359
from the extr who externally accessed

1114
00:48:19,359 --> 00:48:21,680
your resources

1115
00:48:21,680 --> 00:48:25,119
and finally for reviewing permissions um

1116
00:48:25,119 --> 00:48:28,000
i find very helpful cloudsplaining so i

1117
00:48:28,000 --> 00:48:29,040
also

1118
00:48:29,040 --> 00:48:30,319
put it here

1119
00:48:30,319 --> 00:48:33,040
this is the open source tool made by

1120
00:48:33,040 --> 00:48:34,400
sale salesforce

1121
00:48:34,400 --> 00:48:37,839
i think this is very uh very nice tool

1122
00:48:37,839 --> 00:48:39,119
and

1123
00:48:39,119 --> 00:48:42,160
yeah i hope it will it will be helpful

1124
00:48:42,160 --> 00:48:43,359
for you

1125
00:48:43,359 --> 00:48:45,920
uh regarding the the dependency

1126
00:48:45,920 --> 00:48:47,680
confusion

1127
00:48:47,680 --> 00:48:49,760
my only

1128
00:48:49,760 --> 00:48:52,559
recommendation would be that to use only

1129
00:48:52,559 --> 00:48:55,280
trusted resources i know that it sounds

1130
00:48:55,280 --> 00:48:56,160
very

1131
00:48:56,160 --> 00:48:59,279
generic but

1132
00:48:59,599 --> 00:49:04,800
but doing a protection from such attacks

1133
00:49:04,800 --> 00:49:08,160
is not trivial and depends on multiple

1134
00:49:08,160 --> 00:49:10,400
factors

1135
00:49:10,400 --> 00:49:11,359
so

1136
00:49:11,359 --> 00:49:15,440
there's no one good general solution

1137
00:49:15,440 --> 00:49:16,720
except this

1138
00:49:16,720 --> 00:49:20,880
to only use trusted resources

1139
00:49:20,880 --> 00:49:22,800
all right uh that's all of my

1140
00:49:22,800 --> 00:49:25,280
presentation i hope you learned

1141
00:49:25,280 --> 00:49:28,400
something new um that

1142
00:49:28,400 --> 00:49:30,160
those methods

1143
00:49:30,160 --> 00:49:33,040
were not for you uh so obvious so

1144
00:49:33,040 --> 00:49:34,400
commonly known

1145
00:49:34,400 --> 00:49:37,599
um if they were then please let me know

1146
00:49:37,599 --> 00:49:39,440
please let me know what do you think

1147
00:49:39,440 --> 00:49:40,559
about the

1148
00:49:40,559 --> 00:49:43,280
uh the presentation

1149
00:49:43,280 --> 00:49:47,040
and uh also now i'm waiting for any

1150
00:49:47,040 --> 00:49:50,160
questions you can find me on the discord

1151
00:49:50,160 --> 00:49:53,440
um so yeah let's let's talk

1152
00:49:53,440 --> 00:49:54,559
and

1153
00:49:54,559 --> 00:49:57,520
enjoy the rest of the presentations

1154
00:49:57,520 --> 00:50:01,040
thank you very much

