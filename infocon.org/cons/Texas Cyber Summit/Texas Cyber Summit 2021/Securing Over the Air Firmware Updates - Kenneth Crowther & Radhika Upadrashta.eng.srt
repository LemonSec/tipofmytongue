1
00:00:05,440 --> 00:00:07,839
hi and welcome to our presentation uh

2
00:00:07,839 --> 00:00:10,080
entitled securing over-the-air firmware

3
00:00:10,080 --> 00:00:11,519
updates for industrial internet of

4
00:00:11,519 --> 00:00:13,920
things devices

5
00:00:13,920 --> 00:00:15,120
the reason we

6
00:00:15,120 --> 00:00:17,440
selected to do this presentation is we

7
00:00:17,440 --> 00:00:19,119
believe that it's representative of a

8
00:00:19,119 --> 00:00:20,640
lot of

9
00:00:20,640 --> 00:00:22,240
iiot

10
00:00:22,240 --> 00:00:23,760
connectivity

11
00:00:23,760 --> 00:00:24,560
um

12
00:00:24,560 --> 00:00:27,439
we're specifically from the water sector

13
00:00:27,439 --> 00:00:29,279
and we'll talk more of that as we go on

14
00:00:29,279 --> 00:00:31,920
my name is kenneth crowther i'm the

15
00:00:31,920 --> 00:00:33,760
product security leader for xylem's

16
00:00:33,760 --> 00:00:35,680
applied water systems and america's

17
00:00:35,680 --> 00:00:38,320
commercial teams

18
00:00:38,320 --> 00:00:40,239
and my name is radhika

19
00:00:40,239 --> 00:00:42,000
i'm a product security engineer here at

20
00:00:42,000 --> 00:00:44,480
xylem

21
00:00:44,480 --> 00:00:46,559
so so let's get into it the first the

22
00:00:46,559 --> 00:00:48,879
first thing we want to establish is we

23
00:00:48,879 --> 00:00:50,399
want to make sure that we don't scare

24
00:00:50,399 --> 00:00:51,440
anyone

25
00:00:51,440 --> 00:00:53,039
by talking about

26
00:00:53,039 --> 00:00:56,840
cyber exposure about cyber

27
00:00:56,840 --> 00:00:59,680
vulnerability and so we want to we want

28
00:00:59,680 --> 00:01:02,800
to remind everyone why iot is emerging

29
00:01:02,800 --> 00:01:05,040
why connected digital systems

30
00:01:05,040 --> 00:01:06,000
so

31
00:01:06,000 --> 00:01:07,760
in the water sector

32
00:01:07,760 --> 00:01:11,119
we believe that we're super lean

33
00:01:11,119 --> 00:01:13,119
we can deliver

34
00:01:13,119 --> 00:01:15,920
a one ton of clean water to every

35
00:01:15,920 --> 00:01:17,360
household in the united states for

36
00:01:17,360 --> 00:01:18,479
example

37
00:01:18,479 --> 00:01:20,320
for three dollars a ton

38
00:01:20,320 --> 00:01:22,720
and uh and then we can reclaim

39
00:01:22,720 --> 00:01:24,159
those tons of

40
00:01:24,159 --> 00:01:25,280
material

41
00:01:25,280 --> 00:01:28,080
uh for uh within that same price right

42
00:01:28,080 --> 00:01:29,759
so we're delivering and reclaiming a ton

43
00:01:29,759 --> 00:01:31,840
of material all for three dollars a ton

44
00:01:31,840 --> 00:01:33,520
and i don't think any industry can claim

45
00:01:33,520 --> 00:01:36,000
that leanness and yet it's not good

46
00:01:36,000 --> 00:01:38,079
enough right three in 10 people still

47
00:01:38,079 --> 00:01:40,400
lack access to safe drinking water six

48
00:01:40,400 --> 00:01:42,560
in 10 people still lack access to safely

49
00:01:42,560 --> 00:01:44,079
managed sanitation

50
00:01:44,079 --> 00:01:45,280
and digital

51
00:01:45,280 --> 00:01:47,759
solutions are a key to making a

52
00:01:47,759 --> 00:01:50,079
transformation that can make

53
00:01:50,079 --> 00:01:52,320
our sector even more lean

54
00:01:52,320 --> 00:01:55,040
and so just as a reminder of uh where

55
00:01:55,040 --> 00:01:56,960
we're coming from there's an example

56
00:01:56,960 --> 00:01:59,680
from south mid indiana that's that's uh

57
00:01:59,680 --> 00:02:02,079
uh informative in this in this case

58
00:02:02,079 --> 00:02:03,920
so south bend in indiana they had this

59
00:02:03,920 --> 00:02:05,840
big problem they were dumping about a

60
00:02:05,840 --> 00:02:06,960
dozen

61
00:02:06,960 --> 00:02:09,199
olympic sized swimming pools uh worth of

62
00:02:09,199 --> 00:02:11,038
some of sewage

63
00:02:11,038 --> 00:02:14,400
into the saint joseph's river every day

64
00:02:14,400 --> 00:02:15,599
and uh

65
00:02:15,599 --> 00:02:17,760
this was resulting in

66
00:02:17,760 --> 00:02:20,319
concentrations of uh bacteria like e

67
00:02:20,319 --> 00:02:22,000
coli

68
00:02:22,000 --> 00:02:24,239
growing it was reducing the the ability

69
00:02:24,239 --> 00:02:28,000
to use that water for recreation um and

70
00:02:28,000 --> 00:02:30,720
uh and it was starting to concern epa

71
00:02:30,720 --> 00:02:33,200
among other organizations

72
00:02:33,200 --> 00:02:34,720
they estimated what it would take to

73
00:02:34,720 --> 00:02:38,239
rebuild their their wastewater system

74
00:02:38,239 --> 00:02:40,000
and it was going to cost on the order of

75
00:02:40,000 --> 00:02:43,040
800 900 million dollars right just just

76
00:02:43,040 --> 00:02:44,720
shy of a billion dollars for a small

77
00:02:44,720 --> 00:02:47,120
town like south bend indiana

78
00:02:47,120 --> 00:02:50,239
that ends up being something like um ten

79
00:02:50,239 --> 00:02:51,760
thousand eleven thousand dollars per

80
00:02:51,760 --> 00:02:54,080
person which is just unaffordable

81
00:02:54,080 --> 00:02:55,840
and so what we did instead was we

82
00:02:55,840 --> 00:02:57,760
installed 120 sensors

83
00:02:57,760 --> 00:03:00,239
these are flow meters

84
00:03:00,239 --> 00:03:01,920
level sensors

85
00:03:01,920 --> 00:03:04,879
and uh this helped us to understand the

86
00:03:04,879 --> 00:03:08,000
condition of the wastewater system

87
00:03:08,000 --> 00:03:09,120
and

88
00:03:09,120 --> 00:03:10,480
what we realized was that there was a

89
00:03:10,480 --> 00:03:12,800
lot of unused capacity and what we

90
00:03:12,800 --> 00:03:15,519
really just needed in terms of

91
00:03:15,519 --> 00:03:17,599
concrete

92
00:03:17,599 --> 00:03:19,840
was a 200 300

93
00:03:19,840 --> 00:03:22,400
uh installation in order to make this

94
00:03:22,400 --> 00:03:23,599
uh

95
00:03:23,599 --> 00:03:25,760
infrastructure more navigable

96
00:03:25,760 --> 00:03:27,760
in the end this saved over half a

97
00:03:27,760 --> 00:03:31,519
billion dollars in capital expenditures

98
00:03:31,519 --> 00:03:33,040
these sensors then became part

99
00:03:33,040 --> 00:03:35,599
integrated in into this control system

100
00:03:35,599 --> 00:03:37,440
where the sensors are basically kind of

101
00:03:37,440 --> 00:03:40,000
like bidding for downstream

102
00:03:40,000 --> 00:03:43,120
capacity so as flow as level is rising

103
00:03:43,120 --> 00:03:45,280
as flow is increasing they're starting

104
00:03:45,280 --> 00:03:48,000
to value that portion of the wastewater

105
00:03:48,000 --> 00:03:49,440
infrastructure starting to value that

106
00:03:49,440 --> 00:03:51,360
downstream capacity more

107
00:03:51,360 --> 00:03:53,439
and it's now bidding for this downstream

108
00:03:53,439 --> 00:03:55,680
capacity and the result is is that we

109
00:03:55,680 --> 00:03:58,000
can use the infrastructure that already

110
00:03:58,000 --> 00:04:00,319
existed

111
00:04:00,319 --> 00:04:01,920
more successfully

112
00:04:01,920 --> 00:04:02,720
and

113
00:04:02,720 --> 00:04:04,799
and even and with this operational

114
00:04:04,799 --> 00:04:07,120
technology they're now saving 1.5

115
00:04:07,120 --> 00:04:09,200
million per year in addition to the half

116
00:04:09,200 --> 00:04:12,159
a billion that they saved in

117
00:04:12,159 --> 00:04:13,840
capital investments

118
00:04:13,840 --> 00:04:16,478
this is reducing overflow into the saint

119
00:04:16,478 --> 00:04:18,560
joseph river by a billion gallons a year

120
00:04:18,560 --> 00:04:20,560
it completely eliminates overflow during

121
00:04:20,560 --> 00:04:21,680
the drier

122
00:04:21,680 --> 00:04:23,120
seasons of the year

123
00:04:23,120 --> 00:04:24,960
um and reduces it by like 70 or 80

124
00:04:24,960 --> 00:04:27,040
percent during the the wettest seasons

125
00:04:27,040 --> 00:04:28,800
uh e-coli concentrations have dropped by

126
00:04:28,800 --> 00:04:30,160
50

127
00:04:30,160 --> 00:04:31,600
and all of this was made possible

128
00:04:31,600 --> 00:04:34,960
because of connected digital solutions

129
00:04:34,960 --> 00:04:35,759
um

130
00:04:35,759 --> 00:04:37,440
in fact uh

131
00:04:37,440 --> 00:04:39,120
the the gateways and the cloud

132
00:04:39,120 --> 00:04:42,479
processing still happens on our site

133
00:04:42,479 --> 00:04:44,639
where we're monitoring and uh and

134
00:04:44,639 --> 00:04:46,479
helping to continuously improve what's

135
00:04:46,479 --> 00:04:49,120
going on and securing this

136
00:04:49,120 --> 00:04:51,440
and so i want to make sure that we

137
00:04:51,440 --> 00:04:53,199
establish this upfront because as we

138
00:04:53,199 --> 00:04:55,919
talk about iot and we talk about some of

139
00:04:55,919 --> 00:04:57,759
the threats and attack vectors and stuff

140
00:04:57,759 --> 00:04:59,440
like that i want to make sure that we

141
00:04:59,440 --> 00:05:01,919
remind ourselves why we're doing that

142
00:05:01,919 --> 00:05:04,479
so the second thing is that connected

143
00:05:04,479 --> 00:05:06,639
digital infrastructure

144
00:05:06,639 --> 00:05:08,400
does result in

145
00:05:08,400 --> 00:05:10,000
additional exposures and emerging

146
00:05:10,000 --> 00:05:12,240
threats and so

147
00:05:12,240 --> 00:05:13,199
uh

148
00:05:13,199 --> 00:05:15,759
we're monitoring right now in the water

149
00:05:15,759 --> 00:05:18,560
sector seven threat activity groups that

150
00:05:18,560 --> 00:05:21,120
have specifically

151
00:05:21,120 --> 00:05:23,280
exercised certain tactics and techniques

152
00:05:23,280 --> 00:05:26,160
against water technologies

153
00:05:26,160 --> 00:05:28,560
and and we're watching out for other

154
00:05:28,560 --> 00:05:29,919
threat activity groups that have

155
00:05:29,919 --> 00:05:31,199
techniques

156
00:05:31,199 --> 00:05:33,840
and procedures for attacking industrial

157
00:05:33,840 --> 00:05:35,280
control systems

158
00:05:35,280 --> 00:05:36,240
and so

159
00:05:36,240 --> 00:05:38,800
for example uh dragos released this

160
00:05:38,800 --> 00:05:40,560
report and they talked about these two

161
00:05:40,560 --> 00:05:42,800
groups magnalium and raspite that are

162
00:05:42,800 --> 00:05:44,800
specifically targeting

163
00:05:44,800 --> 00:05:46,320
safety systems

164
00:05:46,320 --> 00:05:47,120
um

165
00:05:47,120 --> 00:05:48,639
and this is something that we're aware

166
00:05:48,639 --> 00:05:50,000
of and as we

167
00:05:50,000 --> 00:05:53,840
talk about uh attacks and protecting

168
00:05:53,840 --> 00:05:55,280
um

169
00:05:55,280 --> 00:05:57,680
controllers uh for these over-the-air

170
00:05:57,680 --> 00:06:00,240
firmware updates um we're acknowledging

171
00:06:00,240 --> 00:06:01,520
the fact that these tactics and

172
00:06:01,520 --> 00:06:03,520
techniques exist and in fact these

173
00:06:03,520 --> 00:06:06,400
techniques have gone into informing

174
00:06:06,400 --> 00:06:07,840
what we

175
00:06:07,840 --> 00:06:09,600
want to protect against

176
00:06:09,600 --> 00:06:11,919
and so this this example shows an

177
00:06:11,919 --> 00:06:15,759
activity by raspite um wherein they

178
00:06:15,759 --> 00:06:18,840
masqueraded as this trilog.exe

179
00:06:18,840 --> 00:06:21,199
um program

180
00:06:21,199 --> 00:06:22,000
they

181
00:06:22,000 --> 00:06:24,720
were successful at overriding parts of

182
00:06:24,720 --> 00:06:26,000
the firmware

183
00:06:26,000 --> 00:06:27,919
in this schneider electric triconic

184
00:06:27,919 --> 00:06:29,840
system

185
00:06:29,840 --> 00:06:30,720
and

186
00:06:30,720 --> 00:06:33,120
while they probably intended to do some

187
00:06:33,120 --> 00:06:35,360
worse damage it successfully shut down

188
00:06:35,360 --> 00:06:36,639
the plant

189
00:06:36,639 --> 00:06:38,160
and the plant shut down multiple times

190
00:06:38,160 --> 00:06:40,800
before they realize that

191
00:06:40,800 --> 00:06:42,479
that there's something something is

192
00:06:42,479 --> 00:06:44,160
going on something is fundamentally

193
00:06:44,160 --> 00:06:46,319
wrong with the

194
00:06:46,319 --> 00:06:47,680
the product

195
00:06:47,680 --> 00:06:49,120
and uh

196
00:06:49,120 --> 00:06:50,560
after going to schneider electric

197
00:06:50,560 --> 00:06:52,960
realized that this was malware that's

198
00:06:52,960 --> 00:06:55,599
targeted to modify the firmware of this

199
00:06:55,599 --> 00:06:56,560
system

200
00:06:56,560 --> 00:06:57,840
and so as we talk about over the year

201
00:06:57,840 --> 00:07:00,160
firmware updates we're specifically

202
00:07:00,160 --> 00:07:02,160
paying attention to these kinds of

203
00:07:02,160 --> 00:07:04,160
things

204
00:07:04,160 --> 00:07:06,160
and this is representative of a problem

205
00:07:06,160 --> 00:07:09,120
that we definitely want to avoid right

206
00:07:09,120 --> 00:07:11,280
we don't want anyone overriding

207
00:07:11,280 --> 00:07:13,440
the firmware particularly

208
00:07:13,440 --> 00:07:16,639
to result in any kind of unsafe uh

209
00:07:16,639 --> 00:07:18,400
activities

210
00:07:18,400 --> 00:07:20,880
so but this this is part of this larger

211
00:07:20,880 --> 00:07:23,120
problem uh

212
00:07:23,120 --> 00:07:23,840
we

213
00:07:23,840 --> 00:07:24,639
uh

214
00:07:24,639 --> 00:07:26,639
recognized that there were

215
00:07:26,639 --> 00:07:28,880
a trillion dollars a trillion u.s

216
00:07:28,880 --> 00:07:31,919
dollars in losses last year because of

217
00:07:31,919 --> 00:07:34,000
various kinds of cyber breaches

218
00:07:34,000 --> 00:07:36,319
the average cost of an incident was 500

219
00:07:36,319 --> 00:07:37,599
000

220
00:07:37,599 --> 00:07:38,400
um

221
00:07:38,400 --> 00:07:41,199
in the water sector there were reports

222
00:07:41,199 --> 00:07:44,879
of over 150 products having some sort of

223
00:07:44,879 --> 00:07:46,240
vulnerabilities

224
00:07:46,240 --> 00:07:48,000
the water wastewater sector is the third

225
00:07:48,000 --> 00:07:50,319
most targeted sector of all

226
00:07:50,319 --> 00:07:52,000
16 critical infrastructures that are

227
00:07:52,000 --> 00:07:54,400
categorized in the u.s

228
00:07:54,400 --> 00:07:56,479
we're right now tracking seven activity

229
00:07:56,479 --> 00:07:58,639
groups um that have tactics and

230
00:07:58,639 --> 00:08:00,639
techniques that are or have been used

231
00:08:00,639 --> 00:08:01,599
against

232
00:08:01,599 --> 00:08:04,240
uh water or wastewater

233
00:08:04,240 --> 00:08:06,720
facilities or water technology

234
00:08:06,720 --> 00:08:09,120
um and so on and so forth right this is

235
00:08:09,120 --> 00:08:11,360
this is the cyber summit and uh

236
00:08:11,360 --> 00:08:14,319
you guys recognize these kinds of things

237
00:08:14,319 --> 00:08:16,400
and they exist in the water sector as

238
00:08:16,400 --> 00:08:17,680
well

239
00:08:17,680 --> 00:08:19,280
and so

240
00:08:19,280 --> 00:08:20,800
so why have we picked over their

241
00:08:20,800 --> 00:08:24,639
firmware updates as kind of the focus

242
00:08:24,639 --> 00:08:25,360
and

243
00:08:25,360 --> 00:08:27,039
how do we believe that this can overall

244
00:08:27,039 --> 00:08:30,000
help improve the security of

245
00:08:30,000 --> 00:08:32,799
um critical infrastructure as we move

246
00:08:32,799 --> 00:08:35,120
and transform our infrastructure to

247
00:08:35,120 --> 00:08:37,519
become more digital and more connected

248
00:08:37,519 --> 00:08:38,719
um

249
00:08:38,719 --> 00:08:39,440
so

250
00:08:39,440 --> 00:08:41,599
the first thing is to to recognize that

251
00:08:41,599 --> 00:08:43,360
there has digital

252
00:08:43,360 --> 00:08:45,279
connected digital infrastructure is

253
00:08:45,279 --> 00:08:47,360
starting kind of a

254
00:08:47,360 --> 00:08:48,800
transformation

255
00:08:48,800 --> 00:08:50,880
um so on the left side of this

256
00:08:50,880 --> 00:08:53,680
shows the traditional purdue model

257
00:08:53,680 --> 00:08:56,560
and in this model the utility owns all

258
00:08:56,560 --> 00:08:59,440
of the utility or the plant or whatever

259
00:08:59,440 --> 00:09:01,440
right the operator

260
00:09:01,440 --> 00:09:03,440
owns all of the infrastructure

261
00:09:03,440 --> 00:09:05,360
and down at the bottom are their

262
00:09:05,360 --> 00:09:07,040
physical processes their sensors

263
00:09:07,040 --> 00:09:09,760
actuators valves drives

264
00:09:09,760 --> 00:09:11,760
they have intelligent controllers right

265
00:09:11,760 --> 00:09:13,200
or just controllers that have been

266
00:09:13,200 --> 00:09:15,680
programmed with logic

267
00:09:15,680 --> 00:09:17,360
above that they have their supervisory

268
00:09:17,360 --> 00:09:19,440
controllers their scada systems their

269
00:09:19,440 --> 00:09:23,120
hmis their historians right this this

270
00:09:23,120 --> 00:09:25,600
overall constitutes the operation

271
00:09:25,600 --> 00:09:28,160
um these then are are

272
00:09:28,160 --> 00:09:31,040
a part of an area network or a plant

273
00:09:31,040 --> 00:09:34,160
network um where they can pivot across

274
00:09:34,160 --> 00:09:36,480
what they need to for the purpose of

275
00:09:36,480 --> 00:09:38,560
operations and control

276
00:09:38,560 --> 00:09:40,800
there's usually some kind of a gap a

277
00:09:40,800 --> 00:09:42,640
demilitarized zone

278
00:09:42,640 --> 00:09:43,680
a

279
00:09:43,680 --> 00:09:46,560
some kind of logical segmentation

280
00:09:46,560 --> 00:09:47,760
then

281
00:09:47,760 --> 00:09:50,399
a connection to the enterprise

282
00:09:50,399 --> 00:09:51,519
where they

283
00:09:51,519 --> 00:09:54,160
use this information to start scheduling

284
00:09:54,160 --> 00:09:56,399
logistics billing

285
00:09:56,399 --> 00:09:57,680
doing the

286
00:09:57,680 --> 00:10:00,399
the business side

287
00:10:00,399 --> 00:10:02,079
and what we're starting to see

288
00:10:02,079 --> 00:10:03,920
if you move over to the right side of

289
00:10:03,920 --> 00:10:05,120
the screen

290
00:10:05,120 --> 00:10:07,440
is a fundamental shift in how this

291
00:10:07,440 --> 00:10:09,120
architecture is working

292
00:10:09,120 --> 00:10:11,600
and we just pull out two examples um in

293
00:10:11,600 --> 00:10:13,519
some cases there is an industrial

294
00:10:13,519 --> 00:10:15,279
gateway and that industrial gateway is

295
00:10:15,279 --> 00:10:17,519
owned some kind of a jump post or

296
00:10:17,519 --> 00:10:19,440
something like that and it's owned and

297
00:10:19,440 --> 00:10:21,600
maintained by the vendor

298
00:10:21,600 --> 00:10:22,560
and

299
00:10:22,560 --> 00:10:24,320
it then allows for

300
00:10:24,320 --> 00:10:26,720
exchange of information back to a cloud

301
00:10:26,720 --> 00:10:27,839
environment

302
00:10:27,839 --> 00:10:30,000
because because that data is now in that

303
00:10:30,000 --> 00:10:31,360
cloud environment it allows for

304
00:10:31,360 --> 00:10:33,839
continuous improvement constant

305
00:10:33,839 --> 00:10:36,160
monitoring new features

306
00:10:36,160 --> 00:10:39,279
more rapid implementation a realization

307
00:10:39,279 --> 00:10:42,800
and adaptation to what customers need

308
00:10:42,800 --> 00:10:45,360
across various types of systems

309
00:10:45,360 --> 00:10:46,959
all of these

310
00:10:46,959 --> 00:10:48,320
features that we've been talking about

311
00:10:48,320 --> 00:10:50,800
with respect to digital twins and things

312
00:10:50,800 --> 00:10:52,079
like that

313
00:10:52,079 --> 00:10:54,320
and what we're starting to see is a need

314
00:10:54,320 --> 00:10:57,279
for this additional communication which

315
00:10:57,279 --> 00:10:59,680
then results in these added exposures

316
00:10:59,680 --> 00:11:01,440
the utility no longer owns all the

317
00:11:01,440 --> 00:11:02,959
infrastructure but

318
00:11:02,959 --> 00:11:04,640
it also means that there needs to be a

319
00:11:04,640 --> 00:11:05,760
partnership

320
00:11:05,760 --> 00:11:07,120
in how we

321
00:11:07,120 --> 00:11:09,519
execute on cyber security

322
00:11:09,519 --> 00:11:10,800
and so

323
00:11:10,800 --> 00:11:13,760
what we're going to talk about is how

324
00:11:13,760 --> 00:11:16,320
firmware over-the-air firmware updates

325
00:11:16,320 --> 00:11:20,240
um provides a like a case study to look

326
00:11:20,240 --> 00:11:22,640
at this uh

327
00:11:22,640 --> 00:11:24,399
communication back and forth between the

328
00:11:24,399 --> 00:11:26,160
utility and the vendor

329
00:11:26,160 --> 00:11:28,880
and um

330
00:11:28,880 --> 00:11:30,079
results in

331
00:11:30,079 --> 00:11:32,720
uh a concept or a set of concepts on how

332
00:11:32,720 --> 00:11:34,240
we can protect

333
00:11:34,240 --> 00:11:36,320
this uh additional exposure that's

334
00:11:36,320 --> 00:11:37,360
created

335
00:11:37,360 --> 00:11:40,880
um and then it and then it reveals some

336
00:11:40,880 --> 00:11:42,800
things that we would like to conclude

337
00:11:42,800 --> 00:11:44,240
with about

338
00:11:44,240 --> 00:11:46,480
partnering uh across the industry for

339
00:11:46,480 --> 00:11:48,560
the purpose of cyber security

340
00:11:48,560 --> 00:11:50,079
so

341
00:11:50,079 --> 00:11:52,240
so this is our rough sketch of uh

342
00:11:52,240 --> 00:11:54,320
firmware uh over-the-air firmware

343
00:11:54,320 --> 00:11:56,560
updates which we'll refer to as phota as

344
00:11:56,560 --> 00:11:57,680
we go

345
00:11:57,680 --> 00:11:58,560
and

346
00:11:58,560 --> 00:11:59,920
i'm going to let radica talk about the

347
00:11:59,920 --> 00:12:01,519
details but i want to point out first

348
00:12:01,519 --> 00:12:02,800
that

349
00:12:02,800 --> 00:12:04,000
there's three

350
00:12:04,000 --> 00:12:05,600
different environments

351
00:12:05,600 --> 00:12:07,440
that were that were spanning right the

352
00:12:07,440 --> 00:12:09,600
product maker environment where we're

353
00:12:09,600 --> 00:12:12,320
developing and experimenting and testing

354
00:12:12,320 --> 00:12:13,600
the firmware

355
00:12:13,600 --> 00:12:15,839
the cloud provider environment that's

356
00:12:15,839 --> 00:12:18,800
providing the infrastructure

357
00:12:18,800 --> 00:12:19,600
and

358
00:12:19,600 --> 00:12:20,800
the

359
00:12:20,800 --> 00:12:22,959
the storage and the servers and the

360
00:12:22,959 --> 00:12:24,880
capability in order to make connections

361
00:12:24,880 --> 00:12:25,920
out

362
00:12:25,920 --> 00:12:28,000
to these iiot devices

363
00:12:28,000 --> 00:12:30,320
and then there's the the operator site

364
00:12:30,320 --> 00:12:32,320
right the industry site where the actual

365
00:12:32,320 --> 00:12:33,920
operations are happening and where the

366
00:12:33,920 --> 00:12:36,240
device sits

367
00:12:36,240 --> 00:12:37,680
so with that i'll turn it over to

368
00:12:37,680 --> 00:12:40,240
erratica to talk about some details and

369
00:12:40,240 --> 00:12:43,519
and some threat uh modeling

370
00:12:43,519 --> 00:12:46,240
so looking at this picture yeah

371
00:12:46,240 --> 00:12:48,160
the firmware update process over the

372
00:12:48,160 --> 00:12:51,200
year goes something like this

373
00:12:51,200 --> 00:12:52,399
it starts with the development

374
00:12:52,399 --> 00:12:53,760
environment

375
00:12:53,760 --> 00:12:54,800
and

376
00:12:54,800 --> 00:12:57,519
the developers test the firmware updates

377
00:12:57,519 --> 00:13:00,399
and gets them ready for the build

378
00:13:00,399 --> 00:13:02,399
and then once they merge the code with

379
00:13:02,399 --> 00:13:04,000
the master branch

380
00:13:04,000 --> 00:13:06,480
that triggers an update process the

381
00:13:06,480 --> 00:13:08,079
firmware is compiled

382
00:13:08,079 --> 00:13:09,279
and

383
00:13:09,279 --> 00:13:11,920
using the key management server from the

384
00:13:11,920 --> 00:13:15,120
cloud they sign the

385
00:13:15,120 --> 00:13:16,959
firmware packages and then store them in

386
00:13:16,959 --> 00:13:18,639
the cloud

387
00:13:18,639 --> 00:13:20,000
there will also be some kind of

388
00:13:20,000 --> 00:13:22,560
configuration files that specify the

389
00:13:22,560 --> 00:13:25,920
firmware versions the compatible devices

390
00:13:25,920 --> 00:13:28,959
the rollout methods and so on

391
00:13:28,959 --> 00:13:30,880
once these firmware packages are ready

392
00:13:30,880 --> 00:13:32,560
for the gateway

393
00:13:32,560 --> 00:13:34,800
there are two ways that the gateway can

394
00:13:34,800 --> 00:13:36,639
receive those updates

395
00:13:36,639 --> 00:13:38,720
they can be pushed to the cloud to the

396
00:13:38,720 --> 00:13:40,399
gateway or

397
00:13:40,399 --> 00:13:42,240
the gate we can keep checking for

398
00:13:42,240 --> 00:13:44,240
updates and

399
00:13:44,240 --> 00:13:46,240
once it gets the updates from the cloud

400
00:13:46,240 --> 00:13:49,120
storage it will send to the device

401
00:13:49,120 --> 00:13:51,519
now on the device end you'll verify the

402
00:13:51,519 --> 00:13:53,680
hash of the package and then try to

403
00:13:53,680 --> 00:13:54,880
upgrade

404
00:13:54,880 --> 00:13:56,639
if there are any errors in the upgrade

405
00:13:56,639 --> 00:14:00,639
process they'll roll back the changes

406
00:14:00,639 --> 00:14:02,720
so this is kind of like a data flow

407
00:14:02,720 --> 00:14:05,839
diagram or a dfd for the firmware update

408
00:14:05,839 --> 00:14:08,160
process over the year

409
00:14:08,160 --> 00:14:11,440
notice that for the gateway

410
00:14:11,440 --> 00:14:14,800
and the key management piece there's a

411
00:14:14,800 --> 00:14:16,480
orange outline

412
00:14:16,480 --> 00:14:18,720
we're trying to indicate that they have

413
00:14:18,720 --> 00:14:21,839
a shade responsibility

414
00:14:21,839 --> 00:14:25,600
within the bigger picture

415
00:14:25,600 --> 00:14:27,519
when we try to make sure that the entire

416
00:14:27,519 --> 00:14:29,040
process of

417
00:14:29,040 --> 00:14:31,839
photo is secure you have to make sure

418
00:14:31,839 --> 00:14:33,920
that each of these individual pieces is

419
00:14:33,920 --> 00:14:35,199
secure

420
00:14:35,199 --> 00:14:36,720
and

421
00:14:36,720 --> 00:14:38,480
to manage that security of these

422
00:14:38,480 --> 00:14:39,760
components there is a shared

423
00:14:39,760 --> 00:14:41,839
responsibility

424
00:14:41,839 --> 00:14:43,839
the gateway or the mobile device that's

425
00:14:43,839 --> 00:14:46,800
on the industrial side is owned by the

426
00:14:46,800 --> 00:14:48,560
site but

427
00:14:48,560 --> 00:14:50,560
the security of the device and the

428
00:14:50,560 --> 00:14:51,839
firmware update

429
00:14:51,839 --> 00:14:54,399
are managed by the product vendor so

430
00:14:54,399 --> 00:14:56,240
there's a shared responsibility between

431
00:14:56,240 --> 00:14:59,199
the site and the product maker

432
00:14:59,199 --> 00:15:02,079
similarly for the key management piece

433
00:15:02,079 --> 00:15:03,199
that's

434
00:15:03,199 --> 00:15:04,800
sitting on the cloud

435
00:15:04,800 --> 00:15:06,639
the cloud service provider and the

436
00:15:06,639 --> 00:15:07,839
product members have a shared

437
00:15:07,839 --> 00:15:10,720
responsibility

438
00:15:11,360 --> 00:15:13,040
the key management solutions are

439
00:15:13,040 --> 00:15:15,680
provided by the cloud service provider

440
00:15:15,680 --> 00:15:17,920
and the management and the rotation of

441
00:15:17,920 --> 00:15:20,160
those keys and all that is handled by

442
00:15:20,160 --> 00:15:23,199
the product maker

443
00:15:23,199 --> 00:15:24,839
next slide please

444
00:15:24,839 --> 00:15:28,079
connect so now that we have a dfd we can

445
00:15:28,079 --> 00:15:30,160
do a threat model

446
00:15:30,160 --> 00:15:32,720
this involves identifying the threats in

447
00:15:32,720 --> 00:15:35,120
a very structured way

448
00:15:35,120 --> 00:15:36,880
and then listing out the security

449
00:15:36,880 --> 00:15:40,480
controls that address those threads

450
00:15:40,480 --> 00:15:42,639
the threats we see on the right side are

451
00:15:42,639 --> 00:15:46,160
based on a stride model which stands for

452
00:15:46,160 --> 00:15:48,880
spoofing tampering repudiation

453
00:15:48,880 --> 00:15:50,720
information disclosure

454
00:15:50,720 --> 00:15:52,880
denial of service and elevation of

455
00:15:52,880 --> 00:15:54,480
privilege

456
00:15:54,480 --> 00:15:56,880
these are some types of threats that we

457
00:15:56,880 --> 00:15:59,360
can look for in the solution

458
00:15:59,360 --> 00:16:00,160
um

459
00:16:00,160 --> 00:16:02,639
notice that we don't have to use stride

460
00:16:02,639 --> 00:16:04,240
but it can be any kind of threat

461
00:16:04,240 --> 00:16:05,839
modeling process

462
00:16:05,839 --> 00:16:07,519
it might be

463
00:16:07,519 --> 00:16:10,560
miters common weakness enumeration model

464
00:16:10,560 --> 00:16:13,519
cw or my test attack framework or

465
00:16:13,519 --> 00:16:15,120
anything else

466
00:16:15,120 --> 00:16:17,519
stride is just one way of standardizing

467
00:16:17,519 --> 00:16:19,839
this process

468
00:16:19,839 --> 00:16:20,800
and then

469
00:16:20,800 --> 00:16:22,000
once these

470
00:16:22,000 --> 00:16:24,160
threats are documented

471
00:16:24,160 --> 00:16:26,480
these are mitigated by enforcing some

472
00:16:26,480 --> 00:16:29,519
security controls within the process

473
00:16:29,519 --> 00:16:30,480
these

474
00:16:30,480 --> 00:16:33,360
security controls become part of our

475
00:16:33,360 --> 00:16:34,839
trust model of the

476
00:16:34,839 --> 00:16:37,440
solution the trust model is generally

477
00:16:37,440 --> 00:16:39,839
built on security principles like

478
00:16:39,839 --> 00:16:43,680
authentication integrity non-reputation

479
00:16:43,680 --> 00:16:45,600
confidentiality availability and

480
00:16:45,600 --> 00:16:47,920
authorization

481
00:16:47,920 --> 00:16:49,839
these security principles

482
00:16:49,839 --> 00:16:51,519
will ensure that

483
00:16:51,519 --> 00:16:53,440
the firmware code is handled

484
00:16:53,440 --> 00:16:55,120
confidentially

485
00:16:55,120 --> 00:16:57,680
that it implements access control on the

486
00:16:57,680 --> 00:16:58,880
code

487
00:16:58,880 --> 00:17:00,399
and it ensures that there is no

488
00:17:00,399 --> 00:17:03,040
tampering of the code and also that all

489
00:17:03,040 --> 00:17:05,839
the useful details are

490
00:17:05,839 --> 00:17:07,520
locked

491
00:17:07,520 --> 00:17:09,199
we can do this kind of threat modeling

492
00:17:09,199 --> 00:17:12,880
and the solution for photo

493
00:17:12,880 --> 00:17:15,679
next slide please scan it

494
00:17:15,679 --> 00:17:18,400
so here in on the slide we have listed

495
00:17:18,400 --> 00:17:20,400
some threads

496
00:17:20,400 --> 00:17:21,119
for

497
00:17:21,119 --> 00:17:23,199
all three buckets the product maker

498
00:17:23,199 --> 00:17:25,839
bucket the pipeline and the cloud are in

499
00:17:25,839 --> 00:17:28,880
the operations of the industry inside

500
00:17:28,880 --> 00:17:31,440
using the stride model we can list out

501
00:17:31,440 --> 00:17:33,280
some of these threads for each of these

502
00:17:33,280 --> 00:17:36,080
packets this list is not exact

503
00:17:36,080 --> 00:17:40,000
exhaustive but it gives you an idea

504
00:17:40,000 --> 00:17:41,520
one of the threats

505
00:17:41,520 --> 00:17:42,480
is

506
00:17:42,480 --> 00:17:44,240
an attacker spoofing a developer's

507
00:17:44,240 --> 00:17:46,880
identity and being able to publish their

508
00:17:46,880 --> 00:17:48,640
own firmware

509
00:17:48,640 --> 00:17:50,720
this disrupts the product maker's

510
00:17:50,720 --> 00:17:52,799
publishing process

511
00:17:52,799 --> 00:17:56,000
or we may have a spoofed quota server

512
00:17:56,000 --> 00:17:57,600
that is serving

513
00:17:57,600 --> 00:18:00,480
malicious firmware updates

514
00:18:00,480 --> 00:18:02,960
or an attacker may be able to

515
00:18:02,960 --> 00:18:04,720
tamper with the firmware in the

516
00:18:04,720 --> 00:18:06,559
development environment

517
00:18:06,559 --> 00:18:09,520
or have tampered updates available on

518
00:18:09,520 --> 00:18:11,679
the

519
00:18:11,760 --> 00:18:14,880
in the cloud for the endpoints

520
00:18:14,880 --> 00:18:18,799
are tampered on the way to the devices

521
00:18:18,799 --> 00:18:21,200
and when it comes to reputation

522
00:18:21,200 --> 00:18:23,280
we can have some updates that are not

523
00:18:23,280 --> 00:18:24,480
tracked

524
00:18:24,480 --> 00:18:26,880
using proper login and

525
00:18:26,880 --> 00:18:29,600
that can happen either on the cloud foda

526
00:18:29,600 --> 00:18:33,039
server or on the devices

527
00:18:33,039 --> 00:18:35,039
you may have some counterfeit

528
00:18:35,039 --> 00:18:37,520
firmware available or a man in the

529
00:18:37,520 --> 00:18:39,760
middle may have may be able to get a

530
00:18:39,760 --> 00:18:42,480
copy of the firmware and then make some

531
00:18:42,480 --> 00:18:44,880
changes

532
00:18:45,760 --> 00:18:47,200
there may be some denial of service

533
00:18:47,200 --> 00:18:49,520
using flood of requests or very large

534
00:18:49,520 --> 00:18:51,840
update packages

535
00:18:51,840 --> 00:18:53,280
or when it comes to elevation of

536
00:18:53,280 --> 00:18:54,480
privileges

537
00:18:54,480 --> 00:18:56,880
you may have some admin users doing some

538
00:18:56,880 --> 00:18:59,760
anatomized operations or someone getting

539
00:18:59,760 --> 00:19:03,440
unauthorized access to data in cloud

540
00:19:03,440 --> 00:19:05,760
these are some threads that we can list

541
00:19:05,760 --> 00:19:07,760
but let's see how they can impact the

542
00:19:07,760 --> 00:19:08,840
photo

543
00:19:08,840 --> 00:19:11,679
solution let's pick a couple of threads

544
00:19:11,679 --> 00:19:14,000
as an example and walk through this

545
00:19:14,000 --> 00:19:15,280
let's say

546
00:19:15,280 --> 00:19:17,200
in the cloud storage there's an

547
00:19:17,200 --> 00:19:19,679
elevation of privilege issue and an

548
00:19:19,679 --> 00:19:21,919
internal user who has access to this

549
00:19:21,919 --> 00:19:23,760
storage server

550
00:19:23,760 --> 00:19:25,679
is able to access other servers and

551
00:19:25,679 --> 00:19:27,760
other people's data

552
00:19:27,760 --> 00:19:29,440
because of this issue

553
00:19:29,440 --> 00:19:32,400
they may be able to

554
00:19:34,000 --> 00:19:36,080
spoof the

555
00:19:36,080 --> 00:19:38,640
firmware publisher's identity

556
00:19:38,640 --> 00:19:39,440
and

557
00:19:39,440 --> 00:19:41,919
maybe alter the firmware updates

558
00:19:41,919 --> 00:19:43,919
stored on the cloud server or they may

559
00:19:43,919 --> 00:19:45,840
be able to break the firmware updates

560
00:19:45,840 --> 00:19:48,559
configuration and control process

561
00:19:48,559 --> 00:19:50,720
so because of that

562
00:19:50,720 --> 00:19:53,679
can you go to the next level

563
00:19:53,679 --> 00:19:55,600
now we have these two threads that we

564
00:19:55,600 --> 00:19:57,520
are focusing on the internal users

565
00:19:57,520 --> 00:20:00,799
getting innovation of privileges and

566
00:20:00,799 --> 00:20:02,320
being able to spoof a developer's

567
00:20:02,320 --> 00:20:04,879
identity

568
00:20:05,120 --> 00:20:07,919
if a user is able to spoof and get

569
00:20:07,919 --> 00:20:09,840
elevated privileges

570
00:20:09,840 --> 00:20:12,159
it means that there are no checks to see

571
00:20:12,159 --> 00:20:13,200
whether

572
00:20:13,200 --> 00:20:15,200
that user

573
00:20:15,200 --> 00:20:16,880
is authorized to do those

574
00:20:16,880 --> 00:20:19,280
privileged auction actions

575
00:20:19,280 --> 00:20:21,360
they're able to get some admin or super

576
00:20:21,360 --> 00:20:23,600
user privileges to access those

577
00:20:23,600 --> 00:20:26,880
resources that they're not supposed to

578
00:20:26,880 --> 00:20:30,000
or another way is to

579
00:20:30,000 --> 00:20:32,240
make some lateral movement or some side

580
00:20:32,240 --> 00:20:34,720
channel attacks and being able to access

581
00:20:34,720 --> 00:20:36,960
those resources

582
00:20:36,960 --> 00:20:38,799
to prevent this

583
00:20:38,799 --> 00:20:40,720
we can have some role-based access

584
00:20:40,720 --> 00:20:43,919
control on every operation performed on

585
00:20:43,919 --> 00:20:46,000
the photo server

586
00:20:46,000 --> 00:20:47,280
and

587
00:20:47,280 --> 00:20:49,039
admin operations

588
00:20:49,039 --> 00:20:51,200
can also be authenticated using some

589
00:20:51,200 --> 00:20:53,360
multi-factor authentication

590
00:20:53,360 --> 00:20:56,080
to ensure that they are who they are

591
00:20:56,080 --> 00:20:58,240
multi-factor authentication will also

592
00:20:58,240 --> 00:21:00,480
reduce the risk of

593
00:21:00,480 --> 00:21:04,880
threats from weak or shared credentials

594
00:21:04,880 --> 00:21:06,799
network segmentation in fire volume will

595
00:21:06,799 --> 00:21:08,640
also help in preventing that kind of

596
00:21:08,640 --> 00:21:11,120
lateral movement from of users from one

597
00:21:11,120 --> 00:21:14,080
server to another

598
00:21:14,080 --> 00:21:16,480
and then the

599
00:21:16,480 --> 00:21:18,559
product makers side

600
00:21:18,559 --> 00:21:20,640
we can also add some protections to

601
00:21:20,640 --> 00:21:23,200
prevent a spoofing of a developer's

602
00:21:23,200 --> 00:21:25,760
identity

603
00:21:26,000 --> 00:21:27,520
if a user is

604
00:21:27,520 --> 00:21:29,120
able to spoof the

605
00:21:29,120 --> 00:21:31,360
firmware publisher's identity they can

606
00:21:31,360 --> 00:21:33,760
corrupt the firmware con

607
00:21:33,760 --> 00:21:36,720
configuration and control process too

608
00:21:36,720 --> 00:21:38,640
so to prevent this

609
00:21:38,640 --> 00:21:41,200
user access to the build process must be

610
00:21:41,200 --> 00:21:43,679
strictly controlled and monitored

611
00:21:43,679 --> 00:21:44,880
and

612
00:21:44,880 --> 00:21:46,960
the approval process to merge the code

613
00:21:46,960 --> 00:21:49,039
into the master can include more than

614
00:21:49,039 --> 00:21:50,720
one person so

615
00:21:50,720 --> 00:21:52,320
the idea is that

616
00:21:52,320 --> 00:21:54,559
spoofing one person's identity might be

617
00:21:54,559 --> 00:21:57,280
easy but spoofing two people at the same

618
00:21:57,280 --> 00:22:00,640
time be way more difficult

619
00:22:00,640 --> 00:22:04,000
so even if you take just two threads

620
00:22:04,000 --> 00:22:06,080
listed here we have some of these

621
00:22:06,080 --> 00:22:08,559
security controls that we can put in

622
00:22:08,559 --> 00:22:11,200
place to prevent these two threads

623
00:22:11,200 --> 00:22:12,960
similarly we can

624
00:22:12,960 --> 00:22:15,280
come up with these threads and uh in the

625
00:22:15,280 --> 00:22:18,400
end synthesize all these into

626
00:22:18,400 --> 00:22:19,520
actionable

627
00:22:19,520 --> 00:22:22,240
measures that we can think

628
00:22:22,240 --> 00:22:24,400
let's take another example

629
00:22:24,400 --> 00:22:27,919
um let's say someone is able to push

630
00:22:27,919 --> 00:22:30,000
rogue firmware updates to the cloud

631
00:22:30,000 --> 00:22:31,840
photo server

632
00:22:31,840 --> 00:22:32,799
um

633
00:22:32,799 --> 00:22:35,440
it's possible that

634
00:22:35,440 --> 00:22:37,360
the firmware updates are not signed by

635
00:22:37,360 --> 00:22:40,240
the developer then

636
00:22:40,240 --> 00:22:42,000
you may be able to craft these up from

637
00:22:42,000 --> 00:22:43,679
your update packages

638
00:22:43,679 --> 00:22:45,039
load on

639
00:22:45,039 --> 00:22:47,200
because there are no checks on the

640
00:22:47,200 --> 00:22:49,120
endpoint to verify the authenticity of

641
00:22:49,120 --> 00:22:52,240
the update package

642
00:22:52,240 --> 00:22:56,080
in that case a very simple test case to

643
00:22:56,080 --> 00:22:58,320
crash the endpoint is by sending very

644
00:22:58,320 --> 00:23:01,760
large update packets

645
00:23:01,760 --> 00:23:03,039
because

646
00:23:03,039 --> 00:23:05,039
even if there is signature verification

647
00:23:05,039 --> 00:23:07,120
on the end by the time it downloads the

648
00:23:07,120 --> 00:23:10,000
entire large firmware update package the

649
00:23:10,000 --> 00:23:12,240
gateway may become unresponsive

650
00:23:12,240 --> 00:23:14,799
potentially draining its battery

651
00:23:14,799 --> 00:23:17,760
this can lead to a denial of service on

652
00:23:17,760 --> 00:23:21,280
the in the industrial side

653
00:23:21,280 --> 00:23:24,080
next like this

654
00:23:24,400 --> 00:23:26,720
now let's consider these two threads

655
00:23:26,720 --> 00:23:29,200
rogue firmware updates and really large

656
00:23:29,200 --> 00:23:31,600
updates

657
00:23:32,159 --> 00:23:34,320
if an attacker is able to push rogue

658
00:23:34,320 --> 00:23:36,400
firmware updates to the cloud server

659
00:23:36,400 --> 00:23:38,240
it shows that the cloud environment can

660
00:23:38,240 --> 00:23:40,320
be dampered

661
00:23:40,320 --> 00:23:41,279
so

662
00:23:41,279 --> 00:23:44,240
apart from controls like authorization

663
00:23:44,240 --> 00:23:46,480
and firewalling and authentication

664
00:23:46,480 --> 00:23:48,080
controls

665
00:23:48,080 --> 00:23:49,919
signing the packages by the firmware

666
00:23:49,919 --> 00:23:52,000
publisher will help in reducing these

667
00:23:52,000 --> 00:23:53,679
threads

668
00:23:53,679 --> 00:23:54,799
on the

669
00:23:54,799 --> 00:23:56,960
receiving end the end device it can

670
00:23:56,960 --> 00:23:58,799
verify the signature of the publisher

671
00:23:58,799 --> 00:24:00,880
before upgrading

672
00:24:00,880 --> 00:24:02,559
and then

673
00:24:02,559 --> 00:24:05,520
to mitigate the risk of having very

674
00:24:05,520 --> 00:24:08,559
large update files

675
00:24:08,559 --> 00:24:10,640
if the firmware update is really large

676
00:24:10,640 --> 00:24:12,320
in size

677
00:24:12,320 --> 00:24:14,720
when the gateway downloads it without

678
00:24:14,720 --> 00:24:17,039
checking about the size the battery may

679
00:24:17,039 --> 00:24:19,279
drain because of excessive

680
00:24:19,279 --> 00:24:21,360
processing load

681
00:24:21,360 --> 00:24:24,080
or it can use up all the storage and

682
00:24:24,080 --> 00:24:26,000
break the gateway

683
00:24:26,000 --> 00:24:28,080
let's say instead of a gateway we have a

684
00:24:28,080 --> 00:24:29,919
mobile device and

685
00:24:29,919 --> 00:24:32,080
probably it has more storage then it

686
00:24:32,080 --> 00:24:33,919
won't be a problem on the

687
00:24:33,919 --> 00:24:35,360
mobile device

688
00:24:35,360 --> 00:24:36,320
but then

689
00:24:36,320 --> 00:24:38,480
when the update package goes to the end

690
00:24:38,480 --> 00:24:40,799
device it may have the same problem you

691
00:24:40,799 --> 00:24:42,720
can use up all the storage and then

692
00:24:42,720 --> 00:24:44,559
brick the device

693
00:24:44,559 --> 00:24:46,880
so to prevent these threads

694
00:24:46,880 --> 00:24:49,360
we can have validation checks on the

695
00:24:49,360 --> 00:24:51,919
file size before downloading

696
00:24:51,919 --> 00:24:53,679
and then version tracking to make sure

697
00:24:53,679 --> 00:24:54,799
that

698
00:24:54,799 --> 00:24:57,679
the end device is

699
00:24:57,679 --> 00:24:59,440
receiving the firmware updates that it

700
00:24:59,440 --> 00:25:01,600
is compatible with

701
00:25:01,600 --> 00:25:03,760
and then logging all these operations on

702
00:25:03,760 --> 00:25:06,559
the photo server

703
00:25:07,760 --> 00:25:10,559
can you go to the next leftness

704
00:25:10,559 --> 00:25:12,720
this way we can document all these

705
00:25:12,720 --> 00:25:14,799
different threads and then come up with

706
00:25:14,799 --> 00:25:17,039
all the different security controls to

707
00:25:17,039 --> 00:25:18,400
prevent these

708
00:25:18,400 --> 00:25:19,760
and then

709
00:25:19,760 --> 00:25:22,159
we tried to synthesize all these

710
00:25:22,159 --> 00:25:23,760
protection mechanisms into four

711
00:25:23,760 --> 00:25:25,360
different buckets

712
00:25:25,360 --> 00:25:27,120
and this will help in building some

713
00:25:27,120 --> 00:25:30,959
cyber security into the further process

714
00:25:32,720 --> 00:25:34,880
securing fodder process

715
00:25:34,880 --> 00:25:37,760
requires what we call a multi-barrier

716
00:25:37,760 --> 00:25:41,120
approach or defensive depth

717
00:25:41,120 --> 00:25:43,440
we'll give you water waste water as an

718
00:25:43,440 --> 00:25:45,360
example

719
00:25:45,360 --> 00:25:46,559
in

720
00:25:46,559 --> 00:25:49,120
water based water monitoring system

721
00:25:49,120 --> 00:25:51,200
there are different

722
00:25:51,200 --> 00:25:54,480
layers of security built into the system

723
00:25:54,480 --> 00:25:56,400
we start with the legislation have

724
00:25:56,400 --> 00:25:58,559
making laws governing the water

725
00:25:58,559 --> 00:26:00,960
treatment and monitoring

726
00:26:00,960 --> 00:26:01,919
then

727
00:26:01,919 --> 00:26:03,679
when it comes to the local monitoring

728
00:26:03,679 --> 00:26:05,760
authorities

729
00:26:05,760 --> 00:26:07,679
all the neighboring

730
00:26:07,679 --> 00:26:10,159
monitoring authorities share data among

731
00:26:10,159 --> 00:26:11,360
each other

732
00:26:11,360 --> 00:26:12,480
and the

733
00:26:12,480 --> 00:26:14,559
local monitoring authority will make

734
00:26:14,559 --> 00:26:16,640
some decisions based on the data it is

735
00:26:16,640 --> 00:26:19,120
receiving from the upstream monitoring

736
00:26:19,120 --> 00:26:20,240
authorities

737
00:26:20,240 --> 00:26:24,159
and then they make adjustments as needed

738
00:26:24,159 --> 00:26:25,360
and then

739
00:26:25,360 --> 00:26:27,760
the water treatment facility

740
00:26:27,760 --> 00:26:31,440
even that one has several layers of

741
00:26:31,440 --> 00:26:34,640
added for redundancy and

742
00:26:34,640 --> 00:26:36,720
approval process

743
00:26:36,720 --> 00:26:39,039
for this water treatment and the process

744
00:26:39,039 --> 00:26:41,360
is monitored to make sure that the water

745
00:26:41,360 --> 00:26:43,600
is safe for human consumption and then

746
00:26:43,600 --> 00:26:44,799
it goes to

747
00:26:44,799 --> 00:26:47,600
the end users

748
00:26:47,600 --> 00:26:50,000
throughout this process

749
00:26:50,000 --> 00:26:52,640
there are several layers of checks and

750
00:26:52,640 --> 00:26:55,440
approvals and monitoring

751
00:26:55,440 --> 00:26:58,159
we will apply the same principles of

752
00:26:58,159 --> 00:27:00,480
multi-barrier approach to our foda

753
00:27:00,480 --> 00:27:03,480
cybersecurity

754
00:27:04,559 --> 00:27:07,039
looks like this so

755
00:27:07,039 --> 00:27:08,000
um

756
00:27:08,000 --> 00:27:09,600
before we go to the next slide i just

757
00:27:09,600 --> 00:27:11,600
want to emphasize that

758
00:27:11,600 --> 00:27:12,799
um

759
00:27:12,799 --> 00:27:15,840
that this multi-barrier approach is not

760
00:27:15,840 --> 00:27:18,559
only on the backs of the utilities

761
00:27:18,559 --> 00:27:19,360
so

762
00:27:19,360 --> 00:27:20,880
even though the utilities are the ones

763
00:27:20,880 --> 00:27:22,799
actually doing the treatment

764
00:27:22,799 --> 00:27:24,880
and frequently owned the transport and

765
00:27:24,880 --> 00:27:27,440
delivery infrastructure

766
00:27:27,440 --> 00:27:30,480
and there is a multi-layer tech stack to

767
00:27:30,480 --> 00:27:32,399
do that

768
00:27:32,399 --> 00:27:35,200
this is a partnering effort between

769
00:27:35,200 --> 00:27:38,240
other utilities that uh provide that are

770
00:27:38,240 --> 00:27:40,799
also using a similar source

771
00:27:40,799 --> 00:27:42,880
between the municipality or the

772
00:27:42,880 --> 00:27:44,640
community

773
00:27:44,640 --> 00:27:46,159
and uh

774
00:27:46,159 --> 00:27:48,080
and so we're to start realizing that

775
00:27:48,080 --> 00:27:49,279
some of these

776
00:27:49,279 --> 00:27:52,000
partnerships are necessary to secure

777
00:27:52,000 --> 00:27:53,600
iot

778
00:27:53,600 --> 00:27:55,360
in our case

779
00:27:55,360 --> 00:27:56,320
so

780
00:27:56,320 --> 00:27:57,520
so we're going to talk about these

781
00:27:57,520 --> 00:27:59,679
different layers the first thing to talk

782
00:27:59,679 --> 00:28:01,279
about is

783
00:28:01,279 --> 00:28:03,440
that we want to ensure

784
00:28:03,440 --> 00:28:05,760
that the device can verify the

785
00:28:05,760 --> 00:28:07,440
authenticity and integrity of the

786
00:28:07,440 --> 00:28:08,640
firmware

787
00:28:08,640 --> 00:28:11,679
and there's two key principles um

788
00:28:11,679 --> 00:28:12,640
that

789
00:28:12,640 --> 00:28:14,399
that all the security of the device is

790
00:28:14,399 --> 00:28:15,440
based on

791
00:28:15,440 --> 00:28:17,520
the first is the idea of the root of

792
00:28:17,520 --> 00:28:18,799
trust

793
00:28:18,799 --> 00:28:20,799
and the second

794
00:28:20,799 --> 00:28:22,559
and this has to do with

795
00:28:22,559 --> 00:28:24,000
how the

796
00:28:24,000 --> 00:28:27,440
the chip sits on the actual

797
00:28:27,440 --> 00:28:29,520
board itself

798
00:28:29,520 --> 00:28:31,360
and we'll talk a little bit about that

799
00:28:31,360 --> 00:28:33,840
and then the next is the chain of trust

800
00:28:33,840 --> 00:28:37,440
how that route of trust is uh

801
00:28:37,440 --> 00:28:39,279
helps to make sure that we have an

802
00:28:39,279 --> 00:28:42,000
authentic um and an untempered

803
00:28:42,000 --> 00:28:44,159
bootloader and how that bootloader helps

804
00:28:44,159 --> 00:28:45,600
to make sure that we have an authentic

805
00:28:45,600 --> 00:28:47,600
and untempered firmware and how that

806
00:28:47,600 --> 00:28:49,919
firmware then has built-in procedures to

807
00:28:49,919 --> 00:28:51,279
make sure that

808
00:28:51,279 --> 00:28:53,440
the update uh

809
00:28:53,440 --> 00:28:55,039
component and the communications

810
00:28:55,039 --> 00:28:57,039
components

811
00:28:57,039 --> 00:29:01,039
are constantly secure and that the

812
00:29:01,039 --> 00:29:02,880
features that they need in order to

813
00:29:02,880 --> 00:29:05,120
establish secure communication or to

814
00:29:05,120 --> 00:29:08,080
verify the authenticity and integrity of

815
00:29:08,080 --> 00:29:09,919
an update um

816
00:29:09,919 --> 00:29:11,360
are intact

817
00:29:11,360 --> 00:29:12,480
so

818
00:29:12,480 --> 00:29:14,880
the first thing is this idea of root of

819
00:29:14,880 --> 00:29:16,799
trust

820
00:29:16,799 --> 00:29:20,480
so the idea is that when

821
00:29:20,640 --> 00:29:22,720
when there's a reset function

822
00:29:22,720 --> 00:29:25,200
there's a very limited amount of memory

823
00:29:25,200 --> 00:29:27,200
or capability

824
00:29:27,200 --> 00:29:29,120
that that a chip

825
00:29:29,120 --> 00:29:30,880
can deal with

826
00:29:30,880 --> 00:29:32,320
and because of that

827
00:29:32,320 --> 00:29:35,039
it provides some inherent

828
00:29:35,039 --> 00:29:36,960
trustworthiness that we need to learn

829
00:29:36,960 --> 00:29:39,440
how to take advantage of

830
00:29:39,440 --> 00:29:40,399
in some

831
00:29:40,399 --> 00:29:43,039
architectures um there's only one

832
00:29:43,039 --> 00:29:44,559
function that it can run and there's

833
00:29:44,559 --> 00:29:47,360
some immutable rom boot loader

834
00:29:47,360 --> 00:29:48,880
but even when there's this immutable

835
00:29:48,880 --> 00:29:50,960
boot loader there's typically like a

836
00:29:50,960 --> 00:29:52,799
segment in there for

837
00:29:52,799 --> 00:29:55,360
or a slice of memory in there for

838
00:29:55,360 --> 00:29:57,360
verification

839
00:29:57,360 --> 00:29:59,279
and while the default might be some

840
00:29:59,279 --> 00:30:01,679
basic crc checksum

841
00:30:01,679 --> 00:30:02,960
that

842
00:30:02,960 --> 00:30:05,279
that set of features can typically be

843
00:30:05,279 --> 00:30:08,080
replaced with a public key and a sep and

844
00:30:08,080 --> 00:30:10,399
and some sort of uh

845
00:30:10,399 --> 00:30:12,399
verification algorithm

846
00:30:12,399 --> 00:30:15,600
uh in order to verify the firmware

847
00:30:15,600 --> 00:30:17,520
in other cases uh where there is this

848
00:30:17,520 --> 00:30:18,960
basic uh

849
00:30:18,960 --> 00:30:21,760
immutable rom bootloader it provides an

850
00:30:21,760 --> 00:30:24,559
opportunity in the architecture for

851
00:30:24,559 --> 00:30:27,279
establishing a secondary bootloader

852
00:30:27,279 --> 00:30:29,039
where you verify the integrity of the

853
00:30:29,039 --> 00:30:31,360
bootloader the bootloader then has

854
00:30:31,360 --> 00:30:34,640
public key and advanced uh crypto

855
00:30:34,640 --> 00:30:37,520
methods for verifying signed firmware

856
00:30:37,520 --> 00:30:40,240
and the firmware then is able to

857
00:30:40,240 --> 00:30:43,039
load a validated and verified update

858
00:30:43,039 --> 00:30:46,720
process and communication driver

859
00:30:46,720 --> 00:30:48,399
and is able to access

860
00:30:48,399 --> 00:30:49,840
certificates and other things that might

861
00:30:49,840 --> 00:30:52,399
be involved in

862
00:30:52,399 --> 00:30:54,240
those exchanges

863
00:30:54,240 --> 00:30:56,799
um so this is the idea that there's this

864
00:30:56,799 --> 00:30:58,159
root of trust

865
00:30:58,159 --> 00:31:02,080
um and that at each layer in the the

866
00:31:02,080 --> 00:31:04,880
loading of the firmware

867
00:31:04,880 --> 00:31:06,399
you're carefully

868
00:31:06,399 --> 00:31:08,159
assuring

869
00:31:08,159 --> 00:31:10,080
integrity and authenticity and then

870
00:31:10,080 --> 00:31:11,919
loading the next loading the next

871
00:31:11,919 --> 00:31:14,000
feature

872
00:31:14,000 --> 00:31:16,640
there's also

873
00:31:17,279 --> 00:31:20,080
uh a becoming more and more popular

874
00:31:20,080 --> 00:31:22,640
are these uh additional chips trusted

875
00:31:22,640 --> 00:31:24,240
platform modules

876
00:31:24,240 --> 00:31:26,240
where they've already thought through

877
00:31:26,240 --> 00:31:27,679
all of the

878
00:31:27,679 --> 00:31:29,360
uh

879
00:31:29,360 --> 00:31:30,799
root of trust

880
00:31:30,799 --> 00:31:34,240
and uh crypto excel uh crypto uh

881
00:31:34,240 --> 00:31:35,519
requirements

882
00:31:35,519 --> 00:31:38,000
uh tamper resistance redundancy

883
00:31:38,000 --> 00:31:40,960
resilience of uh uh of install and

884
00:31:40,960 --> 00:31:43,039
rollbacks and things like that

885
00:31:43,039 --> 00:31:45,679
um and there's a a special set of

886
00:31:45,679 --> 00:31:48,960
functions that uh exist already

887
00:31:48,960 --> 00:31:50,960
on these uh

888
00:31:50,960 --> 00:31:52,000
these

889
00:31:52,000 --> 00:31:53,840
chips that can now be established

890
00:31:53,840 --> 00:31:54,940
independent of the

891
00:31:54,940 --> 00:31:56,320
[Music]

892
00:31:56,320 --> 00:31:58,159
the basic mechanism

893
00:31:58,159 --> 00:31:59,039
so

894
00:31:59,039 --> 00:32:01,279
underlying all of this

895
00:32:01,279 --> 00:32:02,640
though is

896
00:32:02,640 --> 00:32:03,919
um

897
00:32:03,919 --> 00:32:05,840
a

898
00:32:05,840 --> 00:32:07,600
a a

899
00:32:07,600 --> 00:32:10,640
cryptological schema which uh can

900
00:32:10,640 --> 00:32:13,279
be across a number of algorithms

901
00:32:13,279 --> 00:32:15,679
hopefully

902
00:32:15,679 --> 00:32:17,440
we're looking for ones that are approved

903
00:32:17,440 --> 00:32:20,320
by or consistent with fips 140

904
00:32:20,320 --> 00:32:23,519
dash 2 or fips 140-3

905
00:32:23,519 --> 00:32:26,159
preferably maybe even validated

906
00:32:26,159 --> 00:32:29,279
through that fix 140-2 or dash 3

907
00:32:29,279 --> 00:32:31,760
process

908
00:32:32,080 --> 00:32:34,640
but even if the algorithm and the

909
00:32:34,640 --> 00:32:36,399
process and the architecture is all

910
00:32:36,399 --> 00:32:37,840
revealed

911
00:32:37,840 --> 00:32:39,039
the

912
00:32:39,039 --> 00:32:41,120
process can still be safe as long as

913
00:32:41,120 --> 00:32:42,640
we're protecting

914
00:32:42,640 --> 00:32:45,279
that private key that's used to sign

915
00:32:45,279 --> 00:32:47,519
the bootloader or to sign the firmware

916
00:32:47,519 --> 00:32:48,880
or to

917
00:32:48,880 --> 00:32:51,600
a counter sign a certificate

918
00:32:51,600 --> 00:32:53,039
request

919
00:32:53,039 --> 00:32:54,880
and

920
00:32:54,880 --> 00:32:56,480
so in this process we need to pay

921
00:32:56,480 --> 00:32:58,320
special attention with how we're using

922
00:32:58,320 --> 00:33:00,399
third parties um if the third party

923
00:33:00,399 --> 00:33:02,240
develops our firmware and then hands

924
00:33:02,240 --> 00:33:04,720
over the firmware with their private key

925
00:33:04,720 --> 00:33:06,880
now that key is not only do we not know

926
00:33:06,880 --> 00:33:08,640
where it's been and we have not have

927
00:33:08,640 --> 00:33:10,880
control over it but now it's been

928
00:33:10,880 --> 00:33:13,039
transferred through some kind of sharing

929
00:33:13,039 --> 00:33:15,840
mechanism that was established

930
00:33:15,840 --> 00:33:16,720
and so

931
00:33:16,720 --> 00:33:17,519
as

932
00:33:17,519 --> 00:33:19,519
as product vendors we should get in the

933
00:33:19,519 --> 00:33:20,559
habit

934
00:33:20,559 --> 00:33:23,600
of making sure there's enough

935
00:33:23,600 --> 00:33:25,440
agility in the way that our product is

936
00:33:25,440 --> 00:33:28,000
architected such that when the product

937
00:33:28,000 --> 00:33:30,559
becomes ours we can generate our own

938
00:33:30,559 --> 00:33:31,760
private key

939
00:33:31,760 --> 00:33:33,279
we can export

940
00:33:33,279 --> 00:33:35,360
the public key and encode it properly so

941
00:33:35,360 --> 00:33:37,279
that it can be involved

942
00:33:37,279 --> 00:33:39,440
in the bootloaders verification

943
00:33:39,440 --> 00:33:40,880
processes

944
00:33:40,880 --> 00:33:43,200
for loading this firmware

945
00:33:43,200 --> 00:33:46,559
the last piece to think about is that

946
00:33:46,559 --> 00:33:48,799
sometimes things fail and sometimes they

947
00:33:48,799 --> 00:33:52,320
fail for unexpected reasons um and so

948
00:33:52,320 --> 00:33:54,240
the last part of security of this device

949
00:33:54,240 --> 00:33:55,679
is that we want to make sure that we

950
00:33:55,679 --> 00:33:57,039
don't accidentally brick our device

951
00:33:57,039 --> 00:33:58,640
through some kind of

952
00:33:58,640 --> 00:34:00,960
firmware update process that goes wrong

953
00:34:00,960 --> 00:34:03,039
in an unexpected way and so on the one

954
00:34:03,039 --> 00:34:04,240
hand we're going to be doing a lot of

955
00:34:04,240 --> 00:34:05,919
testing but on the other hand we want to

956
00:34:05,919 --> 00:34:07,679
make sure that we have rollback and

957
00:34:07,679 --> 00:34:09,679
fallback conditions so that we can make

958
00:34:09,679 --> 00:34:10,879
sure that

959
00:34:10,879 --> 00:34:13,280
if if firmware does load and the

960
00:34:13,280 --> 00:34:15,918
bootloader rejects it

961
00:34:15,918 --> 00:34:17,520
or if it's rejected in a verification

962
00:34:17,520 --> 00:34:21,119
process before it even resets or reboots

963
00:34:21,119 --> 00:34:22,320
we want to make sure that that doesn't

964
00:34:22,320 --> 00:34:24,159
disrupt the operation

965
00:34:24,159 --> 00:34:26,079
of the device

966
00:34:26,079 --> 00:34:28,320
so so one last thing about

967
00:34:28,320 --> 00:34:31,359
verifying the high level firmware

968
00:34:31,359 --> 00:34:33,119
is

969
00:34:33,119 --> 00:34:34,800
we need to get in the habit of making

970
00:34:34,800 --> 00:34:36,639
sure that this chain of trust goes all

971
00:34:36,639 --> 00:34:39,520
the way from the bottom to the top

972
00:34:39,520 --> 00:34:41,520
and that means that uh

973
00:34:41,520 --> 00:34:43,359
we need to

974
00:34:43,359 --> 00:34:45,119
assure that we're

975
00:34:45,119 --> 00:34:48,960
not using obsolete uh function

976
00:34:48,960 --> 00:34:50,320
functions

977
00:34:50,320 --> 00:34:53,280
many of these obsolete functions

978
00:34:53,280 --> 00:34:55,520
are not careful with buffer or with

979
00:34:55,520 --> 00:34:58,879
memory or with the way that

980
00:34:59,680 --> 00:35:02,160
elements are transitioned from the

981
00:35:02,160 --> 00:35:04,880
transceiver chip or the uh into this

982
00:35:04,880 --> 00:35:07,599
update process into the firmware storage

983
00:35:07,599 --> 00:35:10,320
um and we need to make sure that

984
00:35:10,320 --> 00:35:12,320
every aspect of the firmware

985
00:35:12,320 --> 00:35:13,440
is being

986
00:35:13,440 --> 00:35:15,599
tested through

987
00:35:15,599 --> 00:35:18,480
a component analysis or through a static

988
00:35:18,480 --> 00:35:21,119
analyzer that's consistent

989
00:35:21,119 --> 00:35:22,720
with the

990
00:35:22,720 --> 00:35:23,599
uh

991
00:35:23,599 --> 00:35:25,520
the whatever the function set is that

992
00:35:25,520 --> 00:35:27,520
the that are being provided to us by the

993
00:35:27,520 --> 00:35:29,280
chip vendor or that are consistent with

994
00:35:29,280 --> 00:35:31,599
the architecture that we're working with

995
00:35:31,599 --> 00:35:32,720
and so

996
00:35:32,720 --> 00:35:34,640
so this is the first

997
00:35:34,640 --> 00:35:35,680
uh

998
00:35:35,680 --> 00:35:38,640
or at least one important layer of trust

999
00:35:38,640 --> 00:35:40,880
and this is completely under the control

1000
00:35:40,880 --> 00:35:42,880
of the product maker right the product

1001
00:35:42,880 --> 00:35:45,839
maker we can decide on the architecture

1002
00:35:45,839 --> 00:35:47,760
we do work with the chip vendor in order

1003
00:35:47,760 --> 00:35:50,320
to make sure that we understand

1004
00:35:50,320 --> 00:35:52,400
boot loader firmware where we can stick

1005
00:35:52,400 --> 00:35:54,960
in verification how we encode the

1006
00:35:54,960 --> 00:35:56,800
public keys in order to make this

1007
00:35:56,800 --> 00:35:59,520
verification work

1008
00:35:59,520 --> 00:36:01,920
we might need to work with manufacturers

1009
00:36:01,920 --> 00:36:04,400
so that

1010
00:36:04,400 --> 00:36:06,160
we for a communications driver for

1011
00:36:06,160 --> 00:36:07,839
example we might want to make sure that

1012
00:36:07,839 --> 00:36:10,560
the private key

1013
00:36:10,640 --> 00:36:12,240
for that establishing secure

1014
00:36:12,240 --> 00:36:14,960
communications is generated on the

1015
00:36:14,960 --> 00:36:16,640
device itself

1016
00:36:16,640 --> 00:36:18,480
um and then it generates a key signing

1017
00:36:18,480 --> 00:36:20,160
request we send it over to our

1018
00:36:20,160 --> 00:36:22,079
certificate authority to counter sign it

1019
00:36:22,079 --> 00:36:24,079
and now that way we have a

1020
00:36:24,079 --> 00:36:26,000
chain of trust and communications that

1021
00:36:26,000 --> 00:36:27,680
then sits in the on the device in the

1022
00:36:27,680 --> 00:36:29,359
form of a certificate

1023
00:36:29,359 --> 00:36:30,960
and now we don't have to give our third

1024
00:36:30,960 --> 00:36:32,720
party manufacturer for that

1025
00:36:32,720 --> 00:36:35,760
communications piece access to all of

1026
00:36:35,760 --> 00:36:39,040
our basic uh development systems

1027
00:36:39,040 --> 00:36:41,040
um so this is the idea this root of

1028
00:36:41,040 --> 00:36:43,280
trust and a chain of trust

1029
00:36:43,280 --> 00:36:46,960
and now we have a device with firmware

1030
00:36:46,960 --> 00:36:49,760
that is is ready to start accepting

1031
00:36:49,760 --> 00:36:51,599
these kinds of over-the-air firmware

1032
00:36:51,599 --> 00:36:52,720
updates

1033
00:36:52,720 --> 00:36:55,200
but that's just that's just one layer in

1034
00:36:55,200 --> 00:36:59,118
this multi-barrier system

1035
00:37:00,160 --> 00:37:01,839
next one deals with

1036
00:37:01,839 --> 00:37:03,359
cryptography

1037
00:37:03,359 --> 00:37:05,040
encryption and

1038
00:37:05,040 --> 00:37:06,560
integration of tls into the

1039
00:37:06,560 --> 00:37:08,240
communication

1040
00:37:08,240 --> 00:37:10,079
this will ensure that the firmware is

1041
00:37:10,079 --> 00:37:12,640
protected from the time of compilation

1042
00:37:12,640 --> 00:37:14,240
and signing

1043
00:37:14,240 --> 00:37:17,280
and then stored secure encrypted

1044
00:37:17,280 --> 00:37:19,520
in the data storage

1045
00:37:19,520 --> 00:37:21,599
and then transmitted securely using

1046
00:37:21,599 --> 00:37:24,640
encrypted channels of communication

1047
00:37:24,640 --> 00:37:25,839
to do this

1048
00:37:25,839 --> 00:37:28,720
we start off with a very hardened server

1049
00:37:28,720 --> 00:37:32,400
we remove unnecessary ports and services

1050
00:37:32,400 --> 00:37:35,760
and have a minimal attack surface

1051
00:37:35,760 --> 00:37:37,599
and then

1052
00:37:37,599 --> 00:37:39,520
we include the database that is used for

1053
00:37:39,520 --> 00:37:41,200
storage

1054
00:37:41,200 --> 00:37:43,200
access to this storage service will be

1055
00:37:43,200 --> 00:37:45,599
restricted to only those

1056
00:37:45,599 --> 00:37:47,920
people that need it

1057
00:37:47,920 --> 00:37:49,920
and the communication says channels

1058
00:37:49,920 --> 00:37:52,480
between the one component to the other

1059
00:37:52,480 --> 00:37:55,200
must be encrypted using tls

1060
00:37:55,200 --> 00:37:57,599
only the latest and greatest encryption

1061
00:37:57,599 --> 00:38:02,160
standards like aes and tls 1.2 or higher

1062
00:38:02,160 --> 00:38:05,760
with strong ciphers are used here

1063
00:38:05,760 --> 00:38:08,000
and on the endpoint side we have the

1064
00:38:08,000 --> 00:38:09,760
chain of trust established with the

1065
00:38:09,760 --> 00:38:12,079
product developer using secured like

1066
00:38:12,079 --> 00:38:14,000
cannot explain

1067
00:38:14,000 --> 00:38:16,400
it has the public key of the developer

1068
00:38:16,400 --> 00:38:18,560
in a protected memory that can be

1069
00:38:18,560 --> 00:38:21,359
tampered with like a trusted platform

1070
00:38:21,359 --> 00:38:22,720
module

1071
00:38:22,720 --> 00:38:24,880
and then once the device receives the

1072
00:38:24,880 --> 00:38:27,440
signed update package it can validate

1073
00:38:27,440 --> 00:38:29,520
the authenticity and integrity of the

1074
00:38:29,520 --> 00:38:33,200
package and then proceed with the update

1075
00:38:33,200 --> 00:38:34,880
this will ensure that

1076
00:38:34,880 --> 00:38:37,040
the

1077
00:38:37,280 --> 00:38:39,119
communication channels and the data

1078
00:38:39,119 --> 00:38:42,240
storage are encrypted

1079
00:38:43,680 --> 00:38:44,720
so

1080
00:38:44,720 --> 00:38:48,160
the next piece uh so so now

1081
00:38:48,160 --> 00:38:50,000
now we have a device

1082
00:38:50,000 --> 00:38:52,240
that is set up to be able to verify

1083
00:38:52,240 --> 00:38:54,000
authenticity integrity

1084
00:38:54,000 --> 00:38:55,520
we have this root of trust in this chain

1085
00:38:55,520 --> 00:38:56,560
of trust

1086
00:38:56,560 --> 00:38:57,920
and we're changing that trust all the

1087
00:38:57,920 --> 00:38:59,440
way across the

1088
00:38:59,440 --> 00:39:03,119
the communication pathways

1089
00:39:03,200 --> 00:39:03,920
so

1090
00:39:03,920 --> 00:39:05,200
now what we want to do is we want to

1091
00:39:05,200 --> 00:39:07,200
take the humans out of the loop and we

1092
00:39:07,200 --> 00:39:09,040
want to take the variability out of the

1093
00:39:09,040 --> 00:39:10,079
loop

1094
00:39:10,079 --> 00:39:13,359
this makes it then much more

1095
00:39:13,359 --> 00:39:15,520
simple to protect

1096
00:39:15,520 --> 00:39:17,440
from the standpoint of

1097
00:39:17,440 --> 00:39:18,800
we're going to log everything that we

1098
00:39:18,800 --> 00:39:19,760
can

1099
00:39:19,760 --> 00:39:21,040
and we're going to be able to make sure

1100
00:39:21,040 --> 00:39:22,000
that

1101
00:39:22,000 --> 00:39:24,000
nothing unusual is going on and we're

1102
00:39:24,000 --> 00:39:25,760
not going to have humans coming in and

1103
00:39:25,760 --> 00:39:29,200
doing the unusual things um

1104
00:39:29,200 --> 00:39:31,680
and this this requires us to kind of

1105
00:39:31,680 --> 00:39:33,920
zoom in just a little bit

1106
00:39:33,920 --> 00:39:35,920
because the thing about building

1107
00:39:35,920 --> 00:39:37,280
firmware

1108
00:39:37,280 --> 00:39:39,359
is that sometimes we need a chip

1109
00:39:39,359 --> 00:39:40,960
specific

1110
00:39:40,960 --> 00:39:42,560
toolbox

1111
00:39:42,560 --> 00:39:44,560
sometimes we need a specific kind of

1112
00:39:44,560 --> 00:39:46,720
compiler

1113
00:39:46,720 --> 00:39:50,078
sometimes we might need

1114
00:39:50,480 --> 00:39:52,800
something that the vendor

1115
00:39:52,800 --> 00:39:55,520
the chip vendor has helped create

1116
00:39:55,520 --> 00:39:58,320
in order to encode things properly or to

1117
00:39:58,320 --> 00:40:00,800
take advantage of some kind of

1118
00:40:00,800 --> 00:40:02,800
architectural features

1119
00:40:02,800 --> 00:40:04,319
and so

1120
00:40:04,319 --> 00:40:06,720
unfortunately with a lot of these

1121
00:40:06,720 --> 00:40:08,640
firmware builds

1122
00:40:08,640 --> 00:40:09,920
we're not just going to be able to take

1123
00:40:09,920 --> 00:40:12,800
some kind of pipeline off the shelf

1124
00:40:12,800 --> 00:40:15,280
and apply it

1125
00:40:15,280 --> 00:40:16,400
but

1126
00:40:16,400 --> 00:40:18,000
but there is value to doing this

1127
00:40:18,000 --> 00:40:20,400
automation because we're taking humans

1128
00:40:20,400 --> 00:40:22,560
out and we're taking out a lot of the

1129
00:40:22,560 --> 00:40:25,599
variability and so the first piece has

1130
00:40:25,599 --> 00:40:28,240
to do with how we build this uh this

1131
00:40:28,240 --> 00:40:29,760
build container

1132
00:40:29,760 --> 00:40:30,800
so

1133
00:40:30,800 --> 00:40:34,640
in this pipeline we can have uh

1134
00:40:34,800 --> 00:40:37,359
some kind of a merge to master

1135
00:40:37,359 --> 00:40:38,079
a

1136
00:40:38,079 --> 00:40:40,960
kick off some kind of automation process

1137
00:40:40,960 --> 00:40:42,640
and what we want to do is to make sure

1138
00:40:42,640 --> 00:40:43,520
that

1139
00:40:43,520 --> 00:40:45,359
this build environment is not going to

1140
00:40:45,359 --> 00:40:48,079
be persistent

1141
00:40:48,079 --> 00:40:49,280
we also want to make sure it's going to

1142
00:40:49,280 --> 00:40:52,400
be built on a stack that is uh

1143
00:40:52,400 --> 00:40:53,920
going to be

1144
00:40:53,920 --> 00:40:55,599
up to date at the very beginning so

1145
00:40:55,599 --> 00:40:56,880
we're not going to necessarily want to

1146
00:40:56,880 --> 00:40:58,560
create one image now

1147
00:40:58,560 --> 00:41:00,319
and then use it six months from now and

1148
00:41:00,319 --> 00:41:02,720
then use it ten months from now we're

1149
00:41:02,720 --> 00:41:05,040
going to want to maybe go and get

1150
00:41:05,040 --> 00:41:06,480
ubuntu

1151
00:41:06,480 --> 00:41:07,839
the latest version that's still

1152
00:41:07,839 --> 00:41:10,560
supported with the most vulnerabilities

1153
00:41:10,560 --> 00:41:11,599
patched

1154
00:41:11,599 --> 00:41:12,960
we might go and get something like

1155
00:41:12,960 --> 00:41:15,040
segger and um

1156
00:41:15,040 --> 00:41:16,800
have it set up to

1157
00:41:16,800 --> 00:41:18,560
have the correct toolbox for whatever

1158
00:41:18,560 --> 00:41:19,359
the

1159
00:41:19,359 --> 00:41:20,480
the

1160
00:41:20,480 --> 00:41:22,240
chip vendor and the

1161
00:41:22,240 --> 00:41:24,400
special tools that we might

1162
00:41:24,400 --> 00:41:25,599
want

1163
00:41:25,599 --> 00:41:27,760
and it's now only going to be temporary

1164
00:41:27,760 --> 00:41:29,200
while we're building

1165
00:41:29,200 --> 00:41:31,040
signing

1166
00:41:31,040 --> 00:41:32,240
packaging

1167
00:41:32,240 --> 00:41:34,079
and then pushing this package and then

1168
00:41:34,079 --> 00:41:35,200
it's going to be

1169
00:41:35,200 --> 00:41:38,079
blown away everything except the logs

1170
00:41:38,079 --> 00:41:39,359
so the second thing that we want to

1171
00:41:39,359 --> 00:41:41,280
think about is that if we're going to do

1172
00:41:41,280 --> 00:41:42,480
it this way

1173
00:41:42,480 --> 00:41:44,319
we're going to need credentials to push

1174
00:41:44,319 --> 00:41:45,280
and pull

1175
00:41:45,280 --> 00:41:47,119
the information that we need we want to

1176
00:41:47,119 --> 00:41:48,480
make sure those credentials are not

1177
00:41:48,480 --> 00:41:49,839
going to be stored

1178
00:41:49,839 --> 00:41:52,480
in the pipeline automation script and

1179
00:41:52,480 --> 00:41:53,520
we're that they're not going to be

1180
00:41:53,520 --> 00:41:54,560
stored

1181
00:41:54,560 --> 00:41:57,920
in the container that gets built

1182
00:41:57,920 --> 00:42:00,079
and so this means we are typically going

1183
00:42:00,079 --> 00:42:02,800
to need some kind of a separate secrets

1184
00:42:02,800 --> 00:42:04,640
manager

1185
00:42:04,640 --> 00:42:06,240
there are some secrets managers that are

1186
00:42:06,240 --> 00:42:08,800
available through cloud vendors and

1187
00:42:08,800 --> 00:42:11,680
there are some ways that these can be

1188
00:42:11,680 --> 00:42:14,000
built in in a separate way for

1189
00:42:14,000 --> 00:42:17,040
common pipelines like like uh

1190
00:42:17,040 --> 00:42:19,200
bitbucket and things like that

1191
00:42:19,200 --> 00:42:21,280
um the key is that we want to make sure

1192
00:42:21,280 --> 00:42:22,720
that these are in separate places so

1193
00:42:22,720 --> 00:42:24,400
that they're called for

1194
00:42:24,400 --> 00:42:25,760
when they're needed

1195
00:42:25,760 --> 00:42:28,240
they're utilized in a way that is not

1196
00:42:28,240 --> 00:42:30,160
logged right so that the transfer of

1197
00:42:30,160 --> 00:42:31,839
these we want to make sure we're not

1198
00:42:31,839 --> 00:42:34,720
echoing printing cutting whatever

1199
00:42:34,720 --> 00:42:37,119
these these credentials uh if we're

1200
00:42:37,119 --> 00:42:39,119
you're doing that during debugging

1201
00:42:39,119 --> 00:42:41,920
we need to make sure we remove all that

1202
00:42:41,920 --> 00:42:43,359
and then what happens is we're able to

1203
00:42:43,359 --> 00:42:44,560
now

1204
00:42:44,560 --> 00:42:46,319
uh separate out this so we have a

1205
00:42:46,319 --> 00:42:48,240
container that's temporary

1206
00:42:48,240 --> 00:42:50,480
that's uh standing up doing the

1207
00:42:50,480 --> 00:42:53,760
compilation and and so forth um and then

1208
00:42:53,760 --> 00:42:55,200
we have these credentials that are

1209
00:42:55,200 --> 00:42:56,319
separate

1210
00:42:56,319 --> 00:42:57,839
the next thing is we gotta think about

1211
00:42:57,839 --> 00:42:59,359
how we're gonna protect that private key

1212
00:42:59,359 --> 00:43:01,119
remember that's the

1213
00:43:01,119 --> 00:43:03,920
that's the most important piece um for

1214
00:43:03,920 --> 00:43:06,160
our entire device security

1215
00:43:06,160 --> 00:43:07,520
um

1216
00:43:07,520 --> 00:43:08,480
and so

1217
00:43:08,480 --> 00:43:10,800
the rule of thumb is that ideally

1218
00:43:10,800 --> 00:43:12,400
wherever we generate the private key it

1219
00:43:12,400 --> 00:43:14,160
never moves

1220
00:43:14,160 --> 00:43:15,839
and ideally wherever we generate the

1221
00:43:15,839 --> 00:43:17,760
private key has layers of protection in

1222
00:43:17,760 --> 00:43:18,640
place

1223
00:43:18,640 --> 00:43:19,599
to

1224
00:43:19,599 --> 00:43:22,400
keep that private key safe

1225
00:43:22,400 --> 00:43:25,040
but that also might mean that we need to

1226
00:43:25,040 --> 00:43:27,040
have a little agility in how we actually

1227
00:43:27,040 --> 00:43:30,240
do the signing of the firmware

1228
00:43:30,240 --> 00:43:31,359
so

1229
00:43:31,359 --> 00:43:35,440
for a medium assurance process

1230
00:43:35,440 --> 00:43:37,119
it's possible that you might even grab

1231
00:43:37,119 --> 00:43:39,359
that key temporarily just use it and

1232
00:43:39,359 --> 00:43:40,480
then make sure that you can have a

1233
00:43:40,480 --> 00:43:41,920
deletion process

1234
00:43:41,920 --> 00:43:45,200
but for anything that's uh critical

1235
00:43:45,200 --> 00:43:46,400
you need to make sure that you're

1236
00:43:46,400 --> 00:43:47,920
adjusting that process so that for

1237
00:43:47,920 --> 00:43:49,200
example

1238
00:43:49,200 --> 00:43:50,400
you can

1239
00:43:50,400 --> 00:43:52,079
generate a hash of the firmware send the

1240
00:43:52,079 --> 00:43:55,119
hash over to the key management device

1241
00:43:55,119 --> 00:43:56,960
have the hash signed

1242
00:43:56,960 --> 00:43:58,560
return that signature and be able to

1243
00:43:58,560 --> 00:44:00,079
append it to the firmware in a way that

1244
00:44:00,079 --> 00:44:02,160
the bootloader verification algorithm is

1245
00:44:02,160 --> 00:44:05,119
going to recognize it

1246
00:44:05,119 --> 00:44:08,640
so as we move further over

1247
00:44:08,640 --> 00:44:10,079
one of the things that we talked about

1248
00:44:10,079 --> 00:44:11,599
and this becomes important for

1249
00:44:11,599 --> 00:44:12,880
automation

1250
00:44:12,880 --> 00:44:14,400
is that we don't want to put everything

1251
00:44:14,400 --> 00:44:16,319
on this device

1252
00:44:16,319 --> 00:44:18,079
sometimes these devices are going to be

1253
00:44:18,079 --> 00:44:19,440
remote sometimes they're going to have

1254
00:44:19,440 --> 00:44:21,760
very little bandwidth sometimes they're

1255
00:44:21,760 --> 00:44:23,520
going to have

1256
00:44:23,520 --> 00:44:25,760
they're going to result in operating on

1257
00:44:25,760 --> 00:44:27,040
a battery

1258
00:44:27,040 --> 00:44:27,839
um

1259
00:44:27,839 --> 00:44:29,280
and

1260
00:44:29,280 --> 00:44:31,280
so to the extent possible we want to

1261
00:44:31,280 --> 00:44:33,680
think of where the best places to do

1262
00:44:33,680 --> 00:44:37,440
this verification is um typically

1263
00:44:37,440 --> 00:44:40,480
in a secure boot uh

1264
00:44:40,480 --> 00:44:42,000
architecture

1265
00:44:42,000 --> 00:44:44,800
you load this new firmware into a queue

1266
00:44:44,800 --> 00:44:47,440
and and then it's not verified until the

1267
00:44:47,440 --> 00:44:48,960
next time that you boot up and that time

1268
00:44:48,960 --> 00:44:49,920
that way you don't need multiple

1269
00:44:49,920 --> 00:44:52,079
verification

1270
00:44:52,079 --> 00:44:55,359
programs in memory and if the bootloader

1271
00:44:55,359 --> 00:44:56,880
doesn't verify the firmware it just

1272
00:44:56,880 --> 00:44:59,119
loads the common firmware and clears the

1273
00:44:59,119 --> 00:45:00,079
queue

1274
00:45:00,079 --> 00:45:02,240
if it passes the verification it loads

1275
00:45:02,240 --> 00:45:05,920
that new firmware um and uh

1276
00:45:05,920 --> 00:45:07,760
and eliminates the existing

1277
00:45:07,760 --> 00:45:10,560
firmware clearing up that memory space

1278
00:45:10,560 --> 00:45:12,000
um

1279
00:45:12,000 --> 00:45:13,440
but somewhere along the lines we want to

1280
00:45:13,440 --> 00:45:14,480
make sure that we're not putting

1281
00:45:14,480 --> 00:45:16,880
everything on that bootloader so that it

1282
00:45:16,880 --> 00:45:18,160
doesn't necessarily have to get all the

1283
00:45:18,160 --> 00:45:19,520
way down the line

1284
00:45:19,520 --> 00:45:23,280
and potentially hogging bandwidth and uh

1285
00:45:23,280 --> 00:45:25,839
and using up uh using up more power than

1286
00:45:25,839 --> 00:45:27,280
we really want

1287
00:45:27,280 --> 00:45:29,839
and so that's in some cases this might

1288
00:45:29,839 --> 00:45:31,599
be done on the gateway in some cases

1289
00:45:31,599 --> 00:45:34,079
there might be a

1290
00:45:34,079 --> 00:45:36,480
shadow

1291
00:45:36,560 --> 00:45:40,400
configuration that's on a cloud service

1292
00:45:40,400 --> 00:45:41,200
and

1293
00:45:41,200 --> 00:45:42,800
where it's doing some verification

1294
00:45:42,800 --> 00:45:45,599
before it even replaces that

1295
00:45:45,599 --> 00:45:47,839
kind of shadow configuration which is

1296
00:45:47,839 --> 00:45:50,480
what helps say to the

1297
00:45:50,480 --> 00:45:52,160
the gateway and the device that it's

1298
00:45:52,160 --> 00:45:53,839
ready for an update

1299
00:45:53,839 --> 00:45:56,560
um the final thing is that on september

1300
00:45:56,560 --> 00:45:58,640
22nd uh

1301
00:45:58,640 --> 00:46:00,480
department of homeland security

1302
00:46:00,480 --> 00:46:02,400
uh dhs cesa

1303
00:46:02,400 --> 00:46:04,720
um they published these industrial

1304
00:46:04,720 --> 00:46:07,920
control system performance objectives

1305
00:46:07,920 --> 00:46:09,760
and one of these objectives was this

1306
00:46:09,760 --> 00:46:12,560
thing called crypto agility the idea is

1307
00:46:12,560 --> 00:46:14,000
that at some point in the future you

1308
00:46:14,000 --> 00:46:15,680
might want to swap out the algorithm

1309
00:46:15,680 --> 00:46:17,760
that you use you might want to swap out

1310
00:46:17,760 --> 00:46:19,760
the keys that you use

1311
00:46:19,760 --> 00:46:20,960
and so

1312
00:46:20,960 --> 00:46:22,160
this now

1313
00:46:22,160 --> 00:46:25,040
as we're running through this pipeline

1314
00:46:25,040 --> 00:46:26,240
as we're running through this process of

1315
00:46:26,240 --> 00:46:28,560
trying to automate this pipeline

1316
00:46:28,560 --> 00:46:29,760
that

1317
00:46:29,760 --> 00:46:31,839
starts to

1318
00:46:31,839 --> 00:46:33,680
bring to surface a couple

1319
00:46:33,680 --> 00:46:35,040
of features that we might want to start

1320
00:46:35,040 --> 00:46:36,800
thinking about

1321
00:46:36,800 --> 00:46:39,040
the first is do we want to be able to

1322
00:46:39,040 --> 00:46:40,880
swap out the keys

1323
00:46:40,880 --> 00:46:42,480
if we want to swap out the keys remember

1324
00:46:42,480 --> 00:46:44,000
that that means we might have to modify

1325
00:46:44,000 --> 00:46:45,680
the bootloa well we will have to modify

1326
00:46:45,680 --> 00:46:46,640
the bootloader right because the

1327
00:46:46,640 --> 00:46:48,319
bootloader contains that public key for

1328
00:46:48,319 --> 00:46:49,760
verification

1329
00:46:49,760 --> 00:46:50,720
um

1330
00:46:50,720 --> 00:46:52,560
and uh and that's the case if that's the

1331
00:46:52,560 --> 00:46:53,680
case we need to make sure that our

1332
00:46:53,680 --> 00:46:55,599
processes are set up for

1333
00:46:55,599 --> 00:46:58,400
being able to do that bootloader update

1334
00:46:58,400 --> 00:47:02,160
and not just the firmware update

1335
00:47:02,160 --> 00:47:03,839
and

1336
00:47:03,839 --> 00:47:05,440
the other thing is that

1337
00:47:05,440 --> 00:47:06,800
there's this question of whether we're

1338
00:47:06,800 --> 00:47:08,079
going to at some future date want to

1339
00:47:08,079 --> 00:47:10,720
swap out the algorithm

1340
00:47:10,720 --> 00:47:12,160
and we don't have a lot of experience

1341
00:47:12,160 --> 00:47:14,640
with swapping out algorithms

1342
00:47:14,640 --> 00:47:16,000
we have a hard enough time getting

1343
00:47:16,000 --> 00:47:17,680
everything to work just right

1344
00:47:17,680 --> 00:47:19,920
with the way that it is

1345
00:47:19,920 --> 00:47:21,359
but that is something that we should

1346
00:47:21,359 --> 00:47:22,800
probably start putting in our mind is

1347
00:47:22,800 --> 00:47:25,359
how much agility do we want to give

1348
00:47:25,359 --> 00:47:26,160
um

1349
00:47:26,160 --> 00:47:28,800
to our devices uh in the future

1350
00:47:28,800 --> 00:47:31,119
um and do we want to be able to

1351
00:47:31,119 --> 00:47:32,000
uh

1352
00:47:32,000 --> 00:47:34,559
to have uh some some level of crypto

1353
00:47:34,559 --> 00:47:35,760
agility

1354
00:47:35,760 --> 00:47:37,119
um the last thing i'll mention about

1355
00:47:37,119 --> 00:47:39,200
that crypto agility is that typically on

1356
00:47:39,200 --> 00:47:41,760
the cloud photo server

1357
00:47:41,760 --> 00:47:42,640
is going to be some kind of

1358
00:47:42,640 --> 00:47:44,480
configuration file

1359
00:47:44,480 --> 00:47:45,680
and we're going to want to make sure

1360
00:47:45,680 --> 00:47:47,839
that we understand the compatibility

1361
00:47:47,839 --> 00:47:50,559
right if we change the boot loader

1362
00:47:50,559 --> 00:47:52,480
because we're swapping out this uh

1363
00:47:52,480 --> 00:47:53,760
public key

1364
00:47:53,760 --> 00:47:54,800
uh

1365
00:47:54,800 --> 00:47:55,839
and then we're gonna start signing

1366
00:47:55,839 --> 00:47:57,599
firmware with a new key we need to make

1367
00:47:57,599 --> 00:47:59,839
sure that there's a compatibility uh

1368
00:47:59,839 --> 00:48:00,880
chain

1369
00:48:00,880 --> 00:48:02,480
um so that if there's an update that has

1370
00:48:02,480 --> 00:48:03,839
to happen

1371
00:48:03,839 --> 00:48:06,800
that uh the new firmware is being loaded

1372
00:48:06,800 --> 00:48:08,640
on the correct bootloader

1373
00:48:08,640 --> 00:48:10,640
because after our installed base is tens

1374
00:48:10,640 --> 00:48:12,800
of thousands

1375
00:48:12,800 --> 00:48:14,480
we don't want to necessarily have to

1376
00:48:14,480 --> 00:48:16,800
keep this in an excel spreadsheet

1377
00:48:16,800 --> 00:48:17,839
and so we're going to want to put that

1378
00:48:17,839 --> 00:48:20,160
in this configuration file and we're

1379
00:48:20,160 --> 00:48:22,079
going to want to test against

1380
00:48:22,079 --> 00:48:24,480
these compatibilities when we're doing

1381
00:48:24,480 --> 00:48:25,920
that testing on the development side

1382
00:48:25,920 --> 00:48:28,079
before we do the merge to master with it

1383
00:48:28,079 --> 00:48:29,680
which then basically kicks the humans

1384
00:48:29,680 --> 00:48:30,960
out

1385
00:48:30,960 --> 00:48:32,640
out of the loop

1386
00:48:32,640 --> 00:48:34,319
and the last thing just to emphasize

1387
00:48:34,319 --> 00:48:35,839
because it fits into the next piece is

1388
00:48:35,839 --> 00:48:37,680
that we're gonna be logging all of this

1389
00:48:37,680 --> 00:48:38,640
stuff

1390
00:48:38,640 --> 00:48:40,240
um and because the human's not in the

1391
00:48:40,240 --> 00:48:41,760
loop and because it's automated we know

1392
00:48:41,760 --> 00:48:43,119
what we should be seeing we know what

1393
00:48:43,119 --> 00:48:44,559
should be happening

1394
00:48:44,559 --> 00:48:46,720
and so so this is this is the third

1395
00:48:46,720 --> 00:48:49,440
piece is uh

1396
00:48:49,440 --> 00:48:51,520
taking the human out and automating this

1397
00:48:51,520 --> 00:48:54,880
uh firmware pipeline

1398
00:48:55,520 --> 00:48:58,880
finally the last piece covers all the

1399
00:48:58,880 --> 00:49:01,200
rest of the security measures that of

1400
00:49:01,200 --> 00:49:02,880
the strike threats

1401
00:49:02,880 --> 00:49:05,280
like role-based access control for the

1402
00:49:05,280 --> 00:49:08,079
build and sign process

1403
00:49:08,079 --> 00:49:10,160
access should be restricted to only

1404
00:49:10,160 --> 00:49:12,480
those people that need it

1405
00:49:12,480 --> 00:49:15,119
and even to those people there should be

1406
00:49:15,119 --> 00:49:18,720
granular access control read only versus

1407
00:49:18,720 --> 00:49:21,599
read write something like that

1408
00:49:21,599 --> 00:49:24,240
and then the firmware update must be

1409
00:49:24,240 --> 00:49:27,839
compiled and tested properly

1410
00:49:28,480 --> 00:49:30,640
merging a code branch into the master

1411
00:49:30,640 --> 00:49:32,800
branch must include two or more people

1412
00:49:32,800 --> 00:49:34,559
in the approval process

1413
00:49:34,559 --> 00:49:36,480
to make sure that there are additional

1414
00:49:36,480 --> 00:49:40,880
eyes on the testing verification process

1415
00:49:40,880 --> 00:49:43,599
where there is an admin operation or a

1416
00:49:43,599 --> 00:49:46,240
super user privileged operation

1417
00:49:46,240 --> 00:49:47,680
there must be multi-factor

1418
00:49:47,680 --> 00:49:49,040
authentication

1419
00:49:49,040 --> 00:49:52,000
to make sure that there is a reduced

1420
00:49:52,000 --> 00:49:54,319
risk from shared credentials or weak

1421
00:49:54,319 --> 00:49:57,040
credentials

1422
00:49:57,680 --> 00:50:00,000
all the photo operations must be locked

1423
00:50:00,000 --> 00:50:02,800
again like we talked about earlier

1424
00:50:02,800 --> 00:50:05,839
all these must be locked so that

1425
00:50:05,839 --> 00:50:08,800
given the logs one can easily

1426
00:50:08,800 --> 00:50:11,040
piece together what happened who did

1427
00:50:11,040 --> 00:50:14,079
that and when and why and

1428
00:50:14,079 --> 00:50:17,520
what the status of that operation is

1429
00:50:17,520 --> 00:50:19,440
but we should remember not to have any

1430
00:50:19,440 --> 00:50:21,440
sensitive information in the box like

1431
00:50:21,440 --> 00:50:24,319
like the passwords right

1432
00:50:24,319 --> 00:50:26,640
on the device side there must be

1433
00:50:26,640 --> 00:50:28,400
verifications

1434
00:50:28,400 --> 00:50:30,800
to check the versions of the update

1435
00:50:30,800 --> 00:50:34,079
so that um any incorrect firmware update

1436
00:50:34,079 --> 00:50:36,400
won't corrupt the device or bring the

1437
00:50:36,400 --> 00:50:38,240
device

1438
00:50:38,240 --> 00:50:40,640
and so by having this process we can

1439
00:50:40,640 --> 00:50:43,040
automate this so that

1440
00:50:43,040 --> 00:50:46,240
as new firmware packages are added as

1441
00:50:46,240 --> 00:50:49,599
new versions are added as the keys are

1442
00:50:49,599 --> 00:50:51,280
rotated

1443
00:50:51,280 --> 00:50:53,599
there won't be any downtime or any risk

1444
00:50:53,599 --> 00:50:56,000
of security threats and

1445
00:50:56,000 --> 00:50:58,000
by implementing all these security

1446
00:50:58,000 --> 00:50:59,680
measures we can have

1447
00:50:59,680 --> 00:51:02,400
a fully automated build pipeline for

1448
00:51:02,400 --> 00:51:03,839
firmware updates

1449
00:51:03,839 --> 00:51:06,319
that go from the firmware vendor to the

1450
00:51:06,319 --> 00:51:11,279
cloud and then get pushed to the devices

1451
00:51:13,599 --> 00:51:15,040
looks like this

1452
00:51:15,040 --> 00:51:17,920
so so we've talked about four

1453
00:51:17,920 --> 00:51:19,359
big topics

1454
00:51:19,359 --> 00:51:20,800
um

1455
00:51:20,800 --> 00:51:23,440
and uh just to kind of recap right first

1456
00:51:23,440 --> 00:51:25,200
we talked about how important connected

1457
00:51:25,200 --> 00:51:26,960
digital systems are

1458
00:51:26,960 --> 00:51:28,400
because they are the things that are

1459
00:51:28,400 --> 00:51:30,559
going to generate value

1460
00:51:30,559 --> 00:51:32,400
and help the water sector become

1461
00:51:32,400 --> 00:51:35,280
increasingly lean

1462
00:51:35,280 --> 00:51:36,720
the second thing is that we did talk

1463
00:51:36,720 --> 00:51:38,640
about how there's these emerging threats

1464
00:51:38,640 --> 00:51:41,119
um and that this is creating new

1465
00:51:41,119 --> 00:51:42,640
exposures

1466
00:51:42,640 --> 00:51:44,000
we went through this threat modeling

1467
00:51:44,000 --> 00:51:45,680
process that generated

1468
00:51:45,680 --> 00:51:47,440
dozens of attack

1469
00:51:47,440 --> 00:51:49,599
attack vectors

1470
00:51:49,599 --> 00:51:50,400
with

1471
00:51:50,400 --> 00:51:52,880
multiple dozens of controls

1472
00:51:52,880 --> 00:51:53,920
and then what we tried to do is

1473
00:51:53,920 --> 00:51:56,079
synthesize it into these four main

1474
00:51:56,079 --> 00:51:59,359
pieces the first one is the device

1475
00:51:59,359 --> 00:52:01,359
you've got to have root of trust and a

1476
00:52:01,359 --> 00:52:02,720
chain of trust

1477
00:52:02,720 --> 00:52:05,920
everything needs to be signed

1478
00:52:05,920 --> 00:52:08,400
with uh with private keys that you

1479
00:52:08,400 --> 00:52:09,440
protect

1480
00:52:09,440 --> 00:52:11,839
uh somewhere outside of the device

1481
00:52:11,839 --> 00:52:12,640
um

1482
00:52:12,640 --> 00:52:14,640
and that will help to maintain the

1483
00:52:14,640 --> 00:52:16,559
authenticity and integrity of everything

1484
00:52:16,559 --> 00:52:18,559
and then you have a chained up to that

1485
00:52:18,559 --> 00:52:19,599
that

1486
00:52:19,599 --> 00:52:21,040
update process

1487
00:52:21,040 --> 00:52:22,800
the next thing is protecting from source

1488
00:52:22,800 --> 00:52:24,960
to destination right these communication

1489
00:52:24,960 --> 00:52:26,480
channels

1490
00:52:26,480 --> 00:52:28,559
the third thing is automating this

1491
00:52:28,559 --> 00:52:30,640
protecting it from people

1492
00:52:30,640 --> 00:52:32,160
making sure that we know exactly what's

1493
00:52:32,160 --> 00:52:33,440
supposed to happen how it's going to

1494
00:52:33,440 --> 00:52:34,400
happen

1495
00:52:34,400 --> 00:52:36,000
taking the humans out of it and then

1496
00:52:36,000 --> 00:52:38,800
logging everything and finally we need

1497
00:52:38,800 --> 00:52:40,480
to make sure that each

1498
00:52:40,480 --> 00:52:42,880
piece of this process

1499
00:52:42,880 --> 00:52:44,720
is hardened

1500
00:52:44,720 --> 00:52:46,559
and uh that privileges are separated

1501
00:52:46,559 --> 00:52:48,960
that there's multi-factor authentication

1502
00:52:48,960 --> 00:52:51,599
right that that everything uh can be

1503
00:52:51,599 --> 00:52:54,240
hardened at each aspect of this

1504
00:52:54,240 --> 00:52:56,240
um and this is how

1505
00:52:56,240 --> 00:52:58,559
over-the-air firmware updates happen

1506
00:52:58,559 --> 00:53:01,520
and this enables us to have this agile

1507
00:53:01,520 --> 00:53:02,319
uh

1508
00:53:02,319 --> 00:53:04,720
infrastructure that now we can continue

1509
00:53:04,720 --> 00:53:07,040
to deliver additional features

1510
00:53:07,040 --> 00:53:09,440
um and modify things in a much less

1511
00:53:09,440 --> 00:53:10,960
expensive way

1512
00:53:10,960 --> 00:53:13,680
but in a way that then results in this

1513
00:53:13,680 --> 00:53:16,079
kind of shared responsibility

1514
00:53:16,079 --> 00:53:17,040
um

1515
00:53:17,040 --> 00:53:18,640
and that's where we kind of want to end

1516
00:53:18,640 --> 00:53:20,720
traditionally so we've viewed cyber

1517
00:53:20,720 --> 00:53:22,400
security kind of within these four

1518
00:53:22,400 --> 00:53:25,119
buckets secure the product on the left

1519
00:53:25,119 --> 00:53:27,119
hand side secure the deployment right

1520
00:53:27,119 --> 00:53:28,559
the architecture of the actual

1521
00:53:28,559 --> 00:53:30,160
operations network that's on the

1522
00:53:30,160 --> 00:53:33,200
right-hand side commission it's secure

1523
00:53:33,200 --> 00:53:35,440
secure then monitor the security and the

1524
00:53:35,440 --> 00:53:37,200
health of the system right install

1525
00:53:37,200 --> 00:53:39,200
patches updates maintain it

1526
00:53:39,200 --> 00:53:41,040
and then at the very top monitor for

1527
00:53:41,040 --> 00:53:42,400
incidents and respond to them

1528
00:53:42,400 --> 00:53:44,000
appropriately

1529
00:53:44,000 --> 00:53:46,400
typically the product maker has only had

1530
00:53:46,400 --> 00:53:48,960
to exist over on the left hand side make

1531
00:53:48,960 --> 00:53:50,559
secure products

1532
00:53:50,559 --> 00:53:52,240
worry about let the integrator worry

1533
00:53:52,240 --> 00:53:54,160
about secure deployment let the operator

1534
00:53:54,160 --> 00:53:56,160
worry about health and monitoring and

1535
00:53:56,160 --> 00:53:57,920
response

1536
00:53:57,920 --> 00:53:59,920
but what's starting to happen is with

1537
00:53:59,920 --> 00:54:01,680
iiot

1538
00:54:01,680 --> 00:54:04,319
the product owner is now having to take

1539
00:54:04,319 --> 00:54:06,319
care of a lot more of this

1540
00:54:06,319 --> 00:54:07,760
and this is an important piece if we

1541
00:54:07,760 --> 00:54:09,359
want to have this digital transformation

1542
00:54:09,359 --> 00:54:10,960
work

1543
00:54:10,960 --> 00:54:13,839
we as product owners and vendors

1544
00:54:13,839 --> 00:54:15,440
we need to make sure that we're doing

1545
00:54:15,440 --> 00:54:17,359
our part so in this case we're now

1546
00:54:17,359 --> 00:54:19,040
securing the product

1547
00:54:19,040 --> 00:54:20,880
we're establishing an architecture for

1548
00:54:20,880 --> 00:54:22,839
secure over-the-air firmware update

1549
00:54:22,839 --> 00:54:24,960
deployment we're making sure that we

1550
00:54:24,960 --> 00:54:27,119
test and validate each of the controls

1551
00:54:27,119 --> 00:54:29,680
across that entire architecture

1552
00:54:29,680 --> 00:54:31,839
we're then monitoring the firmware

1553
00:54:31,839 --> 00:54:34,000
transit we're monitoring the firmware

1554
00:54:34,000 --> 00:54:35,839
update process

1555
00:54:35,839 --> 00:54:39,040
and we're keeping our uh and that and we

1556
00:54:39,040 --> 00:54:41,359
we we have our uh you know product

1557
00:54:41,359 --> 00:54:44,079
security operation center our psoc

1558
00:54:44,079 --> 00:54:46,160
for doing that and then we're monitoring

1559
00:54:46,160 --> 00:54:47,680
our product our product health the

1560
00:54:47,680 --> 00:54:49,040
vulnerabilities in our product we're

1561
00:54:49,040 --> 00:54:50,799
making sure that we can respond and send

1562
00:54:50,799 --> 00:54:52,400
these updates quickly

1563
00:54:52,400 --> 00:54:53,839
and we're participating with our

1564
00:54:53,839 --> 00:54:55,200
customers when they have an incident

1565
00:54:55,200 --> 00:54:56,799
response when they have an incident that

1566
00:54:56,799 --> 00:54:58,559
involves one of our products

1567
00:54:58,559 --> 00:54:59,359
and

1568
00:54:59,359 --> 00:55:00,559
that takes

1569
00:55:00,559 --> 00:55:02,720
that's what we use our pcert for our

1570
00:55:02,720 --> 00:55:05,359
product security incident response team

1571
00:55:05,359 --> 00:55:07,200
and so we're now starting to have to

1572
00:55:07,200 --> 00:55:09,119
share that responsibility of this

1573
00:55:09,119 --> 00:55:10,640
security diamond

1574
00:55:10,640 --> 00:55:13,440
with the the the customers or the

1575
00:55:13,440 --> 00:55:14,559
operators

1576
00:55:14,559 --> 00:55:16,559
and i think that is

1577
00:55:16,559 --> 00:55:19,040
the direction that things are heading

1578
00:55:19,040 --> 00:55:21,359
and i think that that uh that shared

1579
00:55:21,359 --> 00:55:22,960
responsibility will become a good thing

1580
00:55:22,960 --> 00:55:24,960
and help us to solve uh solve these

1581
00:55:24,960 --> 00:55:25,920
problems

1582
00:55:25,920 --> 00:55:28,160
that we have in water with secure

1583
00:55:28,160 --> 00:55:31,440
connected digital infrastructure

1584
00:55:31,440 --> 00:55:33,119
so

1585
00:55:33,119 --> 00:55:35,119
we're available to take questions we'll

1586
00:55:35,119 --> 00:55:37,760
be online i know this is a recorded uh

1587
00:55:37,760 --> 00:55:39,200
this is a recorded session but we're

1588
00:55:39,200 --> 00:55:41,040
available to take questions

1589
00:55:41,040 --> 00:55:43,119
or you can contact us

1590
00:55:43,119 --> 00:55:44,799
through our email addresses that are

1591
00:55:44,799 --> 00:55:48,880
listed there we'd happy to collaborate

1592
00:55:48,880 --> 00:55:50,880
and do anything that we can to help

1593
00:55:50,880 --> 00:55:52,799
promote this idea of

1594
00:55:52,799 --> 00:55:55,040
secure digital infrastructure

1595
00:55:55,040 --> 00:55:56,720
we would be really interested in your

1596
00:55:56,720 --> 00:55:58,240
comments

1597
00:55:58,240 --> 00:55:59,359
part of the reason why we put this

1598
00:55:59,359 --> 00:56:01,680
presentation together was to

1599
00:56:01,680 --> 00:56:03,760
i mean i know it didn't go into every

1600
00:56:03,760 --> 00:56:05,359
technical detail of actual

1601
00:56:05,359 --> 00:56:06,960
implementation

1602
00:56:06,960 --> 00:56:09,119
but we would be interested in

1603
00:56:09,119 --> 00:56:10,400
anything that we're missing anything

1604
00:56:10,400 --> 00:56:12,799
that we haven't thought of

1605
00:56:12,799 --> 00:56:15,040
and uh or collaborating with anyone

1606
00:56:15,040 --> 00:56:16,640
who's also trying to think through this

1607
00:56:16,640 --> 00:56:19,040
process

1608
00:56:19,040 --> 00:56:20,240
with that we

1609
00:56:20,240 --> 00:56:22,960
thank you for your attention and glad

1610
00:56:22,960 --> 00:56:24,960
that we could be part of this texas

1611
00:56:24,960 --> 00:56:26,640
cyber summit

1612
00:56:26,640 --> 00:56:29,799
thank you

1613
00:56:33,599 --> 00:56:35,680
you

