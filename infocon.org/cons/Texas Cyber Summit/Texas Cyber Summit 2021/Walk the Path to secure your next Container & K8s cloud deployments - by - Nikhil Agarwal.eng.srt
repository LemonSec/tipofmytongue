1
00:00:01,199 --> 00:00:04,880
hello everyone i hope my voice is loud

2
00:00:04,880 --> 00:00:06,879
and clear and it's audible

3
00:00:06,879 --> 00:00:08,880
uh without taking a lot of time i'll

4
00:00:08,880 --> 00:00:11,280
just jump right into a topic i'm sure

5
00:00:11,280 --> 00:00:13,759
you are very excited to hear about all

6
00:00:13,759 --> 00:00:16,239
the different topics in this conference

7
00:00:16,239 --> 00:00:17,440
and

8
00:00:17,440 --> 00:00:19,359
along with other speakers i'm sure this

9
00:00:19,359 --> 00:00:22,240
topic will also be very informative and

10
00:00:22,240 --> 00:00:24,480
in case you have any concerns and

11
00:00:24,480 --> 00:00:25,599
questions

12
00:00:25,599 --> 00:00:27,680
just feel free to reserve them for the

13
00:00:27,680 --> 00:00:29,760
last part wherein i'll answer all the

14
00:00:29,760 --> 00:00:30,880
questions

15
00:00:30,880 --> 00:00:32,640
i'm doing it remotely but doesn't mean

16
00:00:32,640 --> 00:00:34,719
that we cannot interact just feel free

17
00:00:34,719 --> 00:00:37,360
to bring all your queries or questions

18
00:00:37,360 --> 00:00:40,399
hold them back until we have a later on

19
00:00:40,399 --> 00:00:42,480
qna sessions so

20
00:00:42,480 --> 00:00:44,719
just let's get started so today's topic

21
00:00:44,719 --> 00:00:47,120
i'm taking is how we can secure the

22
00:00:47,120 --> 00:00:50,079
containers and kubernetes deployment for

23
00:00:50,079 --> 00:00:51,199
your next

24
00:00:51,199 --> 00:00:53,520
projects if you're working on any i'll

25
00:00:53,520 --> 00:00:55,680
be taking and discussing few best

26
00:00:55,680 --> 00:00:58,160
industry practices tools and what are

27
00:00:58,160 --> 00:01:00,320
the common differences between these two

28
00:01:00,320 --> 00:01:02,960
terms and other reference things which

29
00:01:02,960 --> 00:01:05,840
we quite often see when we are talking

30
00:01:05,840 --> 00:01:07,439
about these two terms

31
00:01:07,439 --> 00:01:09,280
so bear with me and

32
00:01:09,280 --> 00:01:11,360
let's get into the topic

33
00:01:11,360 --> 00:01:14,080
before we start as uh customary i

34
00:01:14,080 --> 00:01:16,799
answered like who am i i'll be saying

35
00:01:16,799 --> 00:01:19,280
that currently i'm working as senior

36
00:01:19,280 --> 00:01:21,040
manager with cloud risk advising with

37
00:01:21,040 --> 00:01:24,240
deloitte i'm based out of singapore i am

38
00:01:24,240 --> 00:01:26,560
i consider myself as blockchain defy and

39
00:01:26,560 --> 00:01:29,600
kubernetes enthusiast and i also do a

40
00:01:29,600 --> 00:01:31,920
lot of regular speaking and panelist

41
00:01:31,920 --> 00:01:33,920
sessions in various conferences around

42
00:01:33,920 --> 00:01:36,720
the globe uh i love teaching and

43
00:01:36,720 --> 00:01:38,320
building community and that's one of the

44
00:01:38,320 --> 00:01:39,600
reason i'm participating in the

45
00:01:39,600 --> 00:01:41,920
conferences as well to summarize i'll

46
00:01:41,920 --> 00:01:44,799
say that i'm engineer by qualification

47
00:01:44,799 --> 00:01:47,600
uh consultant by profession a hacker at

48
00:01:47,600 --> 00:01:50,320
heart and a researcher by passion

49
00:01:50,320 --> 00:01:52,000
i have been in industry for quite a

50
00:01:52,000 --> 00:01:53,920
while now and i have seen a lot of new

51
00:01:53,920 --> 00:01:55,520
technologies

52
00:01:55,520 --> 00:01:57,840
i started with a lot of new technologies

53
00:01:57,840 --> 00:02:00,320
and have been working in many so i'm

54
00:02:00,320 --> 00:02:02,479
quite excited and with this whole cyber

55
00:02:02,479 --> 00:02:04,719
security domain itself new

56
00:02:04,719 --> 00:02:07,040
new engineers coming inside researchers

57
00:02:07,040 --> 00:02:09,440
coming in the technology so i'm looking

58
00:02:09,440 --> 00:02:11,120
forward to contribute

59
00:02:11,120 --> 00:02:14,879
and make sure that this new domain of

60
00:02:14,879 --> 00:02:17,440
containers and kubernetes is something

61
00:02:17,440 --> 00:02:19,599
which is touched upon and is not

62
00:02:19,599 --> 00:02:21,920
something which is very new to everyone

63
00:02:21,920 --> 00:02:24,160
so i'll be sharing my thoughts on that

64
00:02:24,160 --> 00:02:25,599
in case you want to reach out to me

65
00:02:25,599 --> 00:02:27,599
after the my talk or any other questions

66
00:02:27,599 --> 00:02:29,920
you may have which is not clear during

67
00:02:29,920 --> 00:02:31,360
the session you can reach out to my

68
00:02:31,360 --> 00:02:33,440
socials i have shared my twitter

69
00:02:33,440 --> 00:02:35,040
linkedin which you can reach out to

70
00:02:35,040 --> 00:02:37,680
reach to nickel for all the gen z's if

71
00:02:37,680 --> 00:02:39,599
you are not on twitter or linkedin i

72
00:02:39,599 --> 00:02:41,280
also have shared my instagram you can

73
00:02:41,280 --> 00:02:43,360
reach off me there as well so let's get

74
00:02:43,360 --> 00:02:46,239
into the agenda next so in this session

75
00:02:46,239 --> 00:02:48,480
i'll be talking about the containers and

76
00:02:48,480 --> 00:02:50,239
the virtual machines what are the basic

77
00:02:50,239 --> 00:02:52,879
differences what we have talked about is

78
00:02:52,879 --> 00:02:55,440
this like is really containers something

79
00:02:55,440 --> 00:02:57,040
which is uh which will overtake the

80
00:02:57,040 --> 00:02:58,720
virtual machines or what are the

81
00:02:58,720 --> 00:03:01,680
benefits so i'll touch on those topics

82
00:03:01,680 --> 00:03:03,280
i'll also talk about the benefits of

83
00:03:03,280 --> 00:03:05,519
containers over the virtual machines

84
00:03:05,519 --> 00:03:07,920
then we'll talk about kubernetes and

85
00:03:07,920 --> 00:03:09,200
dockers like what are the key

86
00:03:09,200 --> 00:03:10,959
differences and why we are using these

87
00:03:10,959 --> 00:03:13,440
terms when we talk about the containers

88
00:03:13,440 --> 00:03:16,159
later we will see some best practices on

89
00:03:16,159 --> 00:03:18,239
secure deployments of containers and

90
00:03:18,239 --> 00:03:19,519
kubernetes

91
00:03:19,519 --> 00:03:20,239
uh

92
00:03:20,239 --> 00:03:22,239
in the last section of this talk i'll

93
00:03:22,239 --> 00:03:24,799
talk about the common tools which common

94
00:03:24,799 --> 00:03:26,400
tools and the players in the container

95
00:03:26,400 --> 00:03:29,440
security space right now and which you

96
00:03:29,440 --> 00:03:31,360
should be aware of

97
00:03:31,360 --> 00:03:32,480
i'm not

98
00:03:32,480 --> 00:03:33,920
like trying to

99
00:03:33,920 --> 00:03:36,480
name or particularly highlight any it's

100
00:03:36,480 --> 00:03:38,000
just something which i'm aware of and

101
00:03:38,000 --> 00:03:41,360
you should know who are the key players

102
00:03:41,360 --> 00:03:43,680
let's go to the first part which is

103
00:03:43,680 --> 00:03:46,640
virtual machines and the containers so

104
00:03:46,640 --> 00:03:48,400
as you might know that containers are

105
00:03:48,400 --> 00:03:50,480
like kind of a form of operating system

106
00:03:50,480 --> 00:03:53,120
virtualization a single container might

107
00:03:53,120 --> 00:03:55,280
be used to run anything from a small

108
00:03:55,280 --> 00:03:57,360
micro services or a software processes

109
00:03:57,360 --> 00:03:59,840
to a large application as well

110
00:03:59,840 --> 00:04:02,959
inside a container like there could be

111
00:04:02,959 --> 00:04:05,120
all the necessary executable binary

112
00:04:05,120 --> 00:04:07,680
codes libraries and configuration files

113
00:04:07,680 --> 00:04:10,480
which can be included and compared to

114
00:04:10,480 --> 00:04:12,319
any kind of a virtual machine or like a

115
00:04:12,319 --> 00:04:14,799
server virtualization approach which you

116
00:04:14,799 --> 00:04:16,238
normally see in a traditional

117
00:04:16,238 --> 00:04:19,120
environment it makes container more

118
00:04:19,120 --> 00:04:21,600
lightweight and portable so that is like

119
00:04:21,600 --> 00:04:23,520
one of the major reason if you see from

120
00:04:23,520 --> 00:04:25,520
this architecture diagram so if you see

121
00:04:25,520 --> 00:04:28,560
the basic building block here a lot of

122
00:04:28,560 --> 00:04:30,160
things remains the constant like for

123
00:04:30,160 --> 00:04:31,759
example in a virtual machine kind of

124
00:04:31,759 --> 00:04:33,840
environment we have infrastructure

125
00:04:33,840 --> 00:04:36,400
operating system which is being shared

126
00:04:36,400 --> 00:04:38,000
and then we have the hypervisor which

127
00:04:38,000 --> 00:04:39,919
has its own guest operating system and

128
00:04:39,919 --> 00:04:42,000
then for the libraries and applications

129
00:04:42,000 --> 00:04:43,919
which is running on the virtual machine

130
00:04:43,919 --> 00:04:46,080
in case of containers the

131
00:04:46,080 --> 00:04:48,000
sharing of the layer is also at the

132
00:04:48,000 --> 00:04:49,919
operating system so the host operating

133
00:04:49,919 --> 00:04:52,000
system layer is also being shared and

134
00:04:52,000 --> 00:04:53,759
then there is a container daemon which

135
00:04:53,759 --> 00:04:56,000
runs wherein all different kind of

136
00:04:56,000 --> 00:04:58,000
applications and libraries can run on

137
00:04:58,000 --> 00:05:00,080
that particular container daemon so in

138
00:05:00,080 --> 00:05:03,680
that case it makes it it it breaks the

139
00:05:03,680 --> 00:05:05,280
particular

140
00:05:05,280 --> 00:05:06,960
host operating system layer from the

141
00:05:06,960 --> 00:05:09,840
overall architecture that saves a lot of

142
00:05:09,840 --> 00:05:12,000
space and overhead from a container and

143
00:05:12,000 --> 00:05:13,280
that's why they are called more

144
00:05:13,280 --> 00:05:15,600
lightweight and like the reason why they

145
00:05:15,600 --> 00:05:17,440
are more portable so that's one of the

146
00:05:17,440 --> 00:05:19,199
reasons from architecture basic

147
00:05:19,199 --> 00:05:21,520
architecture wise which

148
00:05:21,520 --> 00:05:24,160
which makes containers more handy or

149
00:05:24,160 --> 00:05:26,800
portable i'll be taking more details

150
00:05:26,800 --> 00:05:28,320
what like what are the key differences

151
00:05:28,320 --> 00:05:29,440
between virtual machines in the

152
00:05:29,440 --> 00:05:32,719
container in the next slides

153
00:05:32,800 --> 00:05:34,000
so

154
00:05:34,000 --> 00:05:36,240
as we see like a basic container jokes

155
00:05:36,240 --> 00:05:38,960
yeah so containers are just lightweight

156
00:05:38,960 --> 00:05:41,840
vms right yes definitely but that's not

157
00:05:41,840 --> 00:05:43,759
the only thing there are other reasons

158
00:05:43,759 --> 00:05:46,320
why we prefer containers over the

159
00:05:46,320 --> 00:05:48,479
virtual machines and what are they let's

160
00:05:48,479 --> 00:05:49,840
see them

161
00:05:49,840 --> 00:05:52,160
so i'll say that like these are few

162
00:05:52,160 --> 00:05:54,800
criterias which have been identified and

163
00:05:54,800 --> 00:05:56,319
we are comparing virtual machines and

164
00:05:56,319 --> 00:05:58,639
docker images or containers in this case

165
00:05:58,639 --> 00:06:01,440
under these areas so first from os

166
00:06:01,440 --> 00:06:03,199
support perspective

167
00:06:03,199 --> 00:06:04,800
virtual machine as we have seen from a

168
00:06:04,800 --> 00:06:08,080
previous architecture it takes a lot of

169
00:06:08,080 --> 00:06:10,960
space wherein dockers contains less

170
00:06:10,960 --> 00:06:12,800
space

171
00:06:12,800 --> 00:06:14,560
but from a boot up perspective like

172
00:06:14,560 --> 00:06:16,319
virtual machines takes a lot of time

173
00:06:16,319 --> 00:06:18,319
because of the operating system it has

174
00:06:18,319 --> 00:06:20,160
wherein dockers are very fast from a

175
00:06:20,160 --> 00:06:22,160
boot perspective from a performance

176
00:06:22,160 --> 00:06:24,319
perspective again because of the

177
00:06:24,319 --> 00:06:26,639
excessive size of the virtual machine it

178
00:06:26,639 --> 00:06:28,560
makes them like unstable from a

179
00:06:28,560 --> 00:06:30,080
performance perspective compared to

180
00:06:30,080 --> 00:06:31,360
docker

181
00:06:31,360 --> 00:06:33,840
scaling a virtual machine is definitely

182
00:06:33,840 --> 00:06:35,360
difficult to scale up because every time

183
00:06:35,360 --> 00:06:37,440
you need to consider a host os layer

184
00:06:37,440 --> 00:06:39,360
wherein in docker it's very easy to

185
00:06:39,360 --> 00:06:42,000
scale up and efficiency wise as well

186
00:06:42,000 --> 00:06:44,960
like docker being very easily scalable

187
00:06:44,960 --> 00:06:47,680
and portable makes it more efficient

188
00:06:47,680 --> 00:06:49,759
portability is something which we have

189
00:06:49,759 --> 00:06:51,520
seen from architecture that

190
00:06:51,520 --> 00:06:54,080
like virtual machines are less

191
00:06:54,080 --> 00:06:56,319
and have a lot of issues when we talks

192
00:06:56,319 --> 00:06:57,759
about the portability like from a

193
00:06:57,759 --> 00:06:59,680
dependency perspective wherein the

194
00:06:59,680 --> 00:07:02,160
docker main main feature of the docker

195
00:07:02,160 --> 00:07:04,639
is that it is a bit portable

196
00:07:04,639 --> 00:07:06,880
uh space allocation wise virtual machine

197
00:07:06,880 --> 00:07:07,759
like

198
00:07:07,759 --> 00:07:09,440
the data volumes cannot be shared

199
00:07:09,440 --> 00:07:11,120
because everybody have their own

200
00:07:11,120 --> 00:07:14,000
operating systems and have os os data

201
00:07:14,000 --> 00:07:16,240
volumes wherein docker being like

202
00:07:16,240 --> 00:07:18,160
sharing the same operating system they

203
00:07:18,160 --> 00:07:20,560
have they can be they can easily share

204
00:07:20,560 --> 00:07:23,280
the same data volumes so this is like

205
00:07:23,280 --> 00:07:24,319
common

206
00:07:24,319 --> 00:07:27,759
um i'll say differences uh sometimes

207
00:07:27,759 --> 00:07:29,280
people also confuses container

208
00:07:29,280 --> 00:07:30,960
technologies with virtual machines or

209
00:07:30,960 --> 00:07:32,960
server virtualization technology

210
00:07:32,960 --> 00:07:33,680
but

211
00:07:33,680 --> 00:07:35,759
there are not much differences there are

212
00:07:35,759 --> 00:07:37,680
like it is completely different from the

213
00:07:37,680 --> 00:07:40,240
vms i'll say virtual machines on one

214
00:07:40,240 --> 00:07:42,560
case run on hypervisor environment where

215
00:07:42,560 --> 00:07:45,120
each virtual machine should include its

216
00:07:45,120 --> 00:07:47,039
own operating system as we have seen

217
00:07:47,039 --> 00:07:48,560
from the architecture

218
00:07:48,560 --> 00:07:50,800
and it should have its own binaries

219
00:07:50,800 --> 00:07:52,960
libraries and application file of course

220
00:07:52,960 --> 00:07:55,039
this will what it will do is it will

221
00:07:55,039 --> 00:07:57,199
consume a lot of memory space as we have

222
00:07:57,199 --> 00:07:58,560
seen from here

223
00:07:58,560 --> 00:08:00,240
where it like in case of

224
00:08:00,240 --> 00:08:02,560
containerization they share the same

225
00:08:02,560 --> 00:08:05,039
operating system or the kernels also

226
00:08:05,039 --> 00:08:07,680
sometimes which is very light in size

227
00:08:07,680 --> 00:08:10,400
and like just from example perspective

228
00:08:10,400 --> 00:08:12,800
it could be in just a megabytes and this

229
00:08:12,800 --> 00:08:14,879
means like the containers are very

230
00:08:14,879 --> 00:08:17,680
lightweight and can be used

231
00:08:17,680 --> 00:08:19,599
anywhere and it takes just couple of

232
00:08:19,599 --> 00:08:21,680
seconds to start them so

233
00:08:21,680 --> 00:08:23,759
versus like the gigabytes of the virtual

234
00:08:23,759 --> 00:08:26,160
machines we just have like kind of

235
00:08:26,160 --> 00:08:28,639
megabytes of container images which can

236
00:08:28,639 --> 00:08:30,639
make our job easier so that's one of the

237
00:08:30,639 --> 00:08:32,640
reason why containers will be getting

238
00:08:32,640 --> 00:08:34,799
more popular right now

239
00:08:34,799 --> 00:08:36,719
and a lot of

240
00:08:36,719 --> 00:08:37,839
kind of

241
00:08:37,839 --> 00:08:40,000
industries are like going towards the

242
00:08:40,000 --> 00:08:43,279
containers as we move towards the cloud

243
00:08:43,279 --> 00:08:45,040
okay going to the next topic which is

244
00:08:45,040 --> 00:08:47,120
like talking about what are the benefits

245
00:08:47,120 --> 00:08:50,240
of the containers i have a lot but let

246
00:08:50,240 --> 00:08:52,560
me start with first like in simple words

247
00:08:52,560 --> 00:08:53,680
containers

248
00:08:53,680 --> 00:08:55,680
like makes building deploying and

249
00:08:55,680 --> 00:08:58,080
scaling cloud native application easier

250
00:08:58,080 --> 00:09:00,560
than ever like there's a best

251
00:09:00,560 --> 00:09:04,240
and the simplest i can put it on

252
00:09:04,240 --> 00:09:06,160
what does it mean is like

253
00:09:06,160 --> 00:09:08,160
for any cloud native developers like the

254
00:09:08,160 --> 00:09:10,240
biggest benefits of containers if i have

255
00:09:10,240 --> 00:09:13,839
to say could be that it like developers

256
00:09:13,839 --> 00:09:16,959
try to avoid as much as as much friction

257
00:09:16,959 --> 00:09:18,720
as possible when they are moving their

258
00:09:18,720 --> 00:09:20,399
code from like testing

259
00:09:20,399 --> 00:09:22,399
from dev environment to a production

260
00:09:22,399 --> 00:09:24,560
environment as like when they package

261
00:09:24,560 --> 00:09:27,040
their application they

262
00:09:27,040 --> 00:09:29,120
they like it always comes with an error

263
00:09:29,120 --> 00:09:31,200
like this you see you have you might

264
00:09:31,200 --> 00:09:32,720
have heard about the typical problems

265
00:09:32,720 --> 00:09:35,040
that it runs on my system but not the

266
00:09:35,040 --> 00:09:37,120
other production system so those kind of

267
00:09:37,120 --> 00:09:39,279
issues can actually be

268
00:09:39,279 --> 00:09:41,680
solved easily wherein a developer can

269
00:09:41,680 --> 00:09:43,839
actually package their application code

270
00:09:43,839 --> 00:09:45,839
as a container and then can push that

271
00:09:45,839 --> 00:09:47,440
container image anywhere be it

272
00:09:47,440 --> 00:09:49,360
production deployment anywhere

273
00:09:49,360 --> 00:09:51,440
environment and it will definitely run

274
00:09:51,440 --> 00:09:53,600
because now you are packaging it in a

275
00:09:53,600 --> 00:09:56,080
container images so that's one of the

276
00:09:56,080 --> 00:09:58,000
major benefit that it eliminates that

277
00:09:58,000 --> 00:09:59,920
friction and that issue of for running

278
00:09:59,920 --> 00:10:02,399
it on on my system

279
00:10:02,399 --> 00:10:04,640
from next perspective i'll say that all

280
00:10:04,640 --> 00:10:06,399
the dependencies associated with

281
00:10:06,399 --> 00:10:08,320
application that are included within the

282
00:10:08,320 --> 00:10:10,959
container so this enables application to

283
00:10:10,959 --> 00:10:13,920
run very easily and identically across

284
00:10:13,920 --> 00:10:16,880
the virtual machine so you don't have to

285
00:10:16,880 --> 00:10:19,600
focus on individual applications and

286
00:10:19,600 --> 00:10:22,000
their dependencies it will

287
00:10:22,000 --> 00:10:23,760
like remove that

288
00:10:23,760 --> 00:10:25,920
barrier of dependencies and will make

289
00:10:25,920 --> 00:10:27,360
sure that your

290
00:10:27,360 --> 00:10:28,959
application is running over the virtual

291
00:10:28,959 --> 00:10:31,360
machine bare metal servers or wherever

292
00:10:31,360 --> 00:10:32,800
and

293
00:10:32,800 --> 00:10:34,800
it doesn't mean only on the on-premises

294
00:10:34,800 --> 00:10:36,240
environment but even on the virtual

295
00:10:36,240 --> 00:10:38,000
clients or the public clouds environment

296
00:10:38,000 --> 00:10:40,720
as well so it make sure that your your

297
00:10:40,720 --> 00:10:42,560
application becomes a single source of

298
00:10:42,560 --> 00:10:45,519
truth for all the developers so that's

299
00:10:45,519 --> 00:10:48,480
another benefit i'll also say like uh

300
00:10:48,480 --> 00:10:51,600
containers take faster build time so

301
00:10:51,600 --> 00:10:54,480
like comparative to any vms or anything

302
00:10:54,480 --> 00:10:56,480
the flexibility and the portability of

303
00:10:56,480 --> 00:10:59,040
containers enables developers to make

304
00:10:59,040 --> 00:11:02,399
huge gains on productivity and that was

305
00:11:02,399 --> 00:11:04,000
like previously very difficult to

306
00:11:04,000 --> 00:11:05,279
achieve when we were talking about the

307
00:11:05,279 --> 00:11:06,640
virtual machines and working in a

308
00:11:06,640 --> 00:11:08,240
virtual environment

309
00:11:08,240 --> 00:11:10,720
another benefit i'd say container has is

310
00:11:10,720 --> 00:11:12,320
the confidence

311
00:11:12,320 --> 00:11:14,000
which developers get when they are

312
00:11:14,000 --> 00:11:16,000
deploying their application because they

313
00:11:16,000 --> 00:11:17,920
know that this application

314
00:11:17,920 --> 00:11:20,079
whichever platform they are running is

315
00:11:20,079 --> 00:11:21,600
will be working because it is

316
00:11:21,600 --> 00:11:23,440
irrespective of an operating system

317
00:11:23,440 --> 00:11:25,200
layer so that's another thing which is

318
00:11:25,200 --> 00:11:27,920
very uh very important when we talk

319
00:11:27,920 --> 00:11:29,760
about the containers it removes that

320
00:11:29,760 --> 00:11:31,600
particular mindset between or that fear

321
00:11:31,600 --> 00:11:32,959
within the developers they feel more

322
00:11:32,959 --> 00:11:34,800
confident when writing new code or

323
00:11:34,800 --> 00:11:37,760
deploying building new application

324
00:11:37,760 --> 00:11:40,399
uh another thing i'll say the benefit

325
00:11:40,399 --> 00:11:42,399
would be that from a collaboration

326
00:11:42,399 --> 00:11:44,560
perspective like multiple teams can use

327
00:11:44,560 --> 00:11:46,720
the containers and they can work on the

328
00:11:46,720 --> 00:11:48,480
individual parts of the application

329
00:11:48,480 --> 00:11:50,800
without disrupting the code so because

330
00:11:50,800 --> 00:11:52,560
of the container based and the reason

331
00:11:52,560 --> 00:11:54,639
why this container is getting popular is

332
00:11:54,639 --> 00:11:57,279
because the application is not just now

333
00:11:57,279 --> 00:11:59,839
a single stack it's working on different

334
00:11:59,839 --> 00:12:01,519
different containers multiple container

335
00:12:01,519 --> 00:12:03,760
clusters will be running so

336
00:12:03,760 --> 00:12:05,360
if you want to redeploy if you want to

337
00:12:05,360 --> 00:12:07,519
make any changes within a code or in a

338
00:12:07,519 --> 00:12:08,639
particular

339
00:12:08,639 --> 00:12:11,680
particular service you don't need to

340
00:12:11,680 --> 00:12:13,519
change the overall application you may

341
00:12:13,519 --> 00:12:15,440
just need to work on individual sections

342
00:12:15,440 --> 00:12:17,360
of that particular cluster container

343
00:12:17,360 --> 00:12:19,440
cluster and you can collaborate with

344
00:12:19,440 --> 00:12:21,120
different teams make sure that it is

345
00:12:21,120 --> 00:12:23,040
working not interrupting the overall

346
00:12:23,040 --> 00:12:24,560
function of the application so that's

347
00:12:24,560 --> 00:12:27,040
another important thing which i think is

348
00:12:27,040 --> 00:12:28,880
a very important part of

349
00:12:28,880 --> 00:12:31,920
containers and what makes them important

350
00:12:31,920 --> 00:12:34,959
um our typical question would be uh in

351
00:12:34,959 --> 00:12:36,560
short if i have to put summarize

352
00:12:36,560 --> 00:12:39,360
anything of this why containers and why

353
00:12:39,360 --> 00:12:41,760
they are important i'll say that

354
00:12:41,760 --> 00:12:43,680
it runs on any operating system be it

355
00:12:43,680 --> 00:12:46,399
linux windows or anywhere it runs

356
00:12:46,399 --> 00:12:49,120
anywhere like on-premises or cloud you

357
00:12:49,120 --> 00:12:51,600
choose where you want to run it it will

358
00:12:51,600 --> 00:12:54,560
any type of application architecture so

359
00:12:54,560 --> 00:12:55,920
if you are running in a traditional

360
00:12:55,920 --> 00:12:58,160
monolith applications definitely work

361
00:12:58,160 --> 00:13:00,399
and if you are working on a more modern

362
00:13:00,399 --> 00:13:02,000
modern application architecture like any

363
00:13:02,000 --> 00:13:04,079
micro services built architecture

364
00:13:04,079 --> 00:13:05,760
containers are the best fit for these

365
00:13:05,760 --> 00:13:07,360
kind of architectures and it makes your

366
00:13:07,360 --> 00:13:08,560
life easier

367
00:13:08,560 --> 00:13:09,920
uh from a language perspective it

368
00:13:09,920 --> 00:13:12,160
supports any languages so that's another

369
00:13:12,160 --> 00:13:14,320
reason that why people

370
00:13:14,320 --> 00:13:16,240
prefer using containers when they are

371
00:13:16,240 --> 00:13:18,240
talking about the new modern app

372
00:13:18,240 --> 00:13:20,720
deployments app developments so these

373
00:13:20,720 --> 00:13:24,560
all makes containers very special like

374
00:13:24,560 --> 00:13:27,600
in any new iit architecture cloud native

375
00:13:27,600 --> 00:13:30,320
application still needs to be secured

376
00:13:30,320 --> 00:13:32,720
and container environments

377
00:13:32,720 --> 00:13:35,600
i feel will bring them a range of uh

378
00:13:35,600 --> 00:13:37,920
cyber security challenges involving like

379
00:13:37,920 --> 00:13:40,880
images container host all these kind of

380
00:13:40,880 --> 00:13:42,480
things which we had just talked about

381
00:13:42,480 --> 00:13:44,480
this all things

382
00:13:44,480 --> 00:13:46,800
definitely helps but it also becomes

383
00:13:46,800 --> 00:13:49,040
will come become some cyber security

384
00:13:49,040 --> 00:13:50,959
challenges as well so we have to talk

385
00:13:50,959 --> 00:13:52,560
about those cyber security challenges

386
00:13:52,560 --> 00:13:54,000
now

387
00:13:54,000 --> 00:13:55,760
so in the next few slides i'll talk

388
00:13:55,760 --> 00:13:58,480
about the cyber security challenges and

389
00:13:58,480 --> 00:14:01,440
what we like what kind of things

390
00:14:01,440 --> 00:14:03,360
people are using this for

391
00:14:03,360 --> 00:14:05,440
uh before i move towards the next topic

392
00:14:05,440 --> 00:14:07,360
which is like the kubernetes and the

393
00:14:07,360 --> 00:14:09,600
docker as you have seen from my slide i

394
00:14:09,600 --> 00:14:11,760
just want to talk about the few use

395
00:14:11,760 --> 00:14:14,240
cases of the containers like what

396
00:14:14,240 --> 00:14:16,800
currently organizations are using it so

397
00:14:16,800 --> 00:14:19,519
i think like the first major use cases

398
00:14:19,519 --> 00:14:22,639
is the lift and shift so basically right

399
00:14:22,639 --> 00:14:24,399
now a lot of organizations are using

400
00:14:24,399 --> 00:14:26,399
containers to migrate their existing

401
00:14:26,399 --> 00:14:29,120
application into the modern environment

402
00:14:29,120 --> 00:14:30,959
that is one of the classic example of

403
00:14:30,959 --> 00:14:32,160
lift and shift

404
00:14:32,160 --> 00:14:34,399
then i'm thinking i think the

405
00:14:34,399 --> 00:14:36,480
refactoring of existing applications

406
00:14:36,480 --> 00:14:39,760
like a lot of time uh if

407
00:14:39,760 --> 00:14:41,920
liftm shift is not possible but some

408
00:14:41,920 --> 00:14:43,279
part of the application can be

409
00:14:43,279 --> 00:14:45,440
refactored in a modern application that

410
00:14:45,440 --> 00:14:47,839
is another area where our organizations

411
00:14:47,839 --> 00:14:49,680
are considering

412
00:14:49,680 --> 00:14:52,639
the shift to containers uh for the new

413
00:14:52,639 --> 00:14:54,560
applications i am hundred percent sure a

414
00:14:54,560 --> 00:14:56,079
lot of applications are completely

415
00:14:56,079 --> 00:14:57,839
hundred percent going towards a new

416
00:14:57,839 --> 00:14:59,760
container based native application so

417
00:14:59,760 --> 00:15:01,839
for any new application projects if you

418
00:15:01,839 --> 00:15:03,760
are developing a new application right

419
00:15:03,760 --> 00:15:06,720
from the scratch uh i what i see around

420
00:15:06,720 --> 00:15:08,079
in the industry is that they are going

421
00:15:08,079 --> 00:15:09,600
with the container native application

422
00:15:09,600 --> 00:15:12,959
that is the future definitely um

423
00:15:12,959 --> 00:15:15,600
for like a lot of time for from an

424
00:15:15,600 --> 00:15:17,120
environment perspective from a customer

425
00:15:17,120 --> 00:15:19,360
perspective in order to improve their

426
00:15:19,360 --> 00:15:21,360
customer experiences and like the

427
00:15:21,360 --> 00:15:23,600
support of other services like for a

428
00:15:23,600 --> 00:15:25,680
micro services based architecture that

429
00:15:25,680 --> 00:15:27,600
time also like distributed application

430
00:15:27,600 --> 00:15:30,399
and microservices are used which can

431
00:15:30,399 --> 00:15:33,680
actually isolate the deployment and

432
00:15:33,680 --> 00:15:35,839
whenever required it can scale up the

433
00:15:35,839 --> 00:15:37,759
individual container while building an

434
00:15:37,759 --> 00:15:39,920
application so that is another area

435
00:15:39,920 --> 00:15:41,839
which is being used where the containers

436
00:15:41,839 --> 00:15:43,920
are very popular

437
00:15:43,920 --> 00:15:46,560
uh from other perspective i see that uh

438
00:15:46,560 --> 00:15:48,320
like during the devops support like when

439
00:15:48,320 --> 00:15:50,240
we are talking about the ci cd

440
00:15:50,240 --> 00:15:52,240
the ci cd

441
00:15:52,240 --> 00:15:54,320
pipelines and during the devops

442
00:15:54,320 --> 00:15:56,560
container technology is like something

443
00:15:56,560 --> 00:15:59,680
which is very uh which is very promising

444
00:15:59,680 --> 00:16:02,480
and it is streamlining the overall build

445
00:16:02,480 --> 00:16:04,399
test and deployment from the same

446
00:16:04,399 --> 00:16:06,959
container images so you don't have to

447
00:16:06,959 --> 00:16:09,680
uh rescan everything again and again you

448
00:16:09,680 --> 00:16:11,600
can like certify make the architecture

449
00:16:11,600 --> 00:16:13,519
immutable make your container images

450
00:16:13,519 --> 00:16:15,519
immutable so that is another benefit

451
00:16:15,519 --> 00:16:16,959
wherein like

452
00:16:16,959 --> 00:16:19,600
another use case i'll say organization

453
00:16:19,600 --> 00:16:20,880
using right now

454
00:16:20,880 --> 00:16:23,440
uh also apart from all these things

455
00:16:23,440 --> 00:16:25,839
deployments and

456
00:16:25,839 --> 00:16:27,440
the faster deployments and the cloud

457
00:16:27,440 --> 00:16:29,120
native architecture i think containers

458
00:16:29,120 --> 00:16:30,480
are also

459
00:16:30,480 --> 00:16:33,839
used a lot of time to deploy and support

460
00:16:33,839 --> 00:16:36,000
like similar processes from a background

461
00:16:36,000 --> 00:16:38,639
perspective like kind of etl functions

462
00:16:38,639 --> 00:16:40,560
or bad jobs for those kind of things

463
00:16:40,560 --> 00:16:42,880
also a lot of organizations are using

464
00:16:42,880 --> 00:16:45,040
containers now so

465
00:16:45,040 --> 00:16:47,440
from usage perspective

466
00:16:47,440 --> 00:16:50,560
uh from uh i'll say from from their

467
00:16:50,560 --> 00:16:52,000
functioning perspective containers

468
00:16:52,000 --> 00:16:54,959
definitely a very very good tools for

469
00:16:54,959 --> 00:16:57,759
the future for the technology but as i

470
00:16:57,759 --> 00:17:00,160
said earlier like all these new

471
00:17:00,160 --> 00:17:02,720
challenges as much as interesting these

472
00:17:02,720 --> 00:17:05,039
container environment seams they will

473
00:17:05,039 --> 00:17:06,640
definitely bring new cyber security

474
00:17:06,640 --> 00:17:09,280
challenges from images and containers

475
00:17:09,280 --> 00:17:11,679
host runtime these all orchestrations

476
00:17:11,679 --> 00:17:14,000
perspective so we need to be protected

477
00:17:14,000 --> 00:17:16,400
against all these new technologies and

478
00:17:16,400 --> 00:17:17,839
that's what we will be discussing in the

479
00:17:17,839 --> 00:17:20,799
few next upcoming slides

480
00:17:20,799 --> 00:17:23,520
so the next interesting topic is the

481
00:17:23,520 --> 00:17:25,919
docker and the kubernetes and how they

482
00:17:25,919 --> 00:17:28,319
do relate to the container so we talk

483
00:17:28,319 --> 00:17:29,679
about this

484
00:17:29,679 --> 00:17:31,360
containers and when whenever we talk

485
00:17:31,360 --> 00:17:32,880
about the containers i think two terms

486
00:17:32,880 --> 00:17:33,919
which are

487
00:17:33,919 --> 00:17:36,400
completely indifferentiatable is the

488
00:17:36,400 --> 00:17:39,120
docker and the kubernetes so today we

489
00:17:39,120 --> 00:17:40,799
will discuss what are the differences

490
00:17:40,799 --> 00:17:43,120
between the kubernetes and dockers and

491
00:17:43,120 --> 00:17:46,320
how do we plan to use them in there like

492
00:17:46,320 --> 00:17:48,480
from a container perspective

493
00:17:48,480 --> 00:17:51,039
so if you are like already using the

494
00:17:51,039 --> 00:17:52,720
container environment and you are

495
00:17:52,720 --> 00:17:55,520
familiar with you would have talked

496
00:17:55,520 --> 00:17:57,520
about this you would have heard about

497
00:17:57,520 --> 00:18:00,080
these two popular tools which are we use

498
00:18:00,080 --> 00:18:02,240
to build and manage these containers

499
00:18:02,240 --> 00:18:04,480
these like the docker and the kubernetes

500
00:18:04,480 --> 00:18:05,440
of course

501
00:18:05,440 --> 00:18:07,440
docker is very popular runtime

502
00:18:07,440 --> 00:18:09,200
environment which is used to create

503
00:18:09,200 --> 00:18:12,000
build software containers it also uses

504
00:18:12,000 --> 00:18:14,240
docker images like kind of like your

505
00:18:14,240 --> 00:18:16,480
container images to deploy containerized

506
00:18:16,480 --> 00:18:19,520
application and it can it can or like

507
00:18:19,520 --> 00:18:21,520
any software in various environment you

508
00:18:21,520 --> 00:18:22,960
can use it from development to

509
00:18:22,960 --> 00:18:25,039
production or the testing environment

510
00:18:25,039 --> 00:18:26,720
docker is completely open source so

511
00:18:26,720 --> 00:18:28,960
that's one of the benefits and it can

512
00:18:28,960 --> 00:18:31,600
work on any environment including linux

513
00:18:31,600 --> 00:18:34,240
microsoft or like from on premises or

514
00:18:34,240 --> 00:18:35,360
cloud bases

515
00:18:35,360 --> 00:18:37,120
so a lot of

516
00:18:37,120 --> 00:18:39,120
positives when you talk about the docker

517
00:18:39,120 --> 00:18:40,480
from uh when we talk about the

518
00:18:40,480 --> 00:18:42,320
containerized application it can

519
00:18:42,320 --> 00:18:44,240
definitely get complicated when we

520
00:18:44,240 --> 00:18:45,919
increase the when we talk about the

521
00:18:45,919 --> 00:18:48,960
scalability or the increase in number of

522
00:18:48,960 --> 00:18:50,960
containers and specifically in the

523
00:18:50,960 --> 00:18:52,799
production environment where

524
00:18:52,799 --> 00:18:55,120
many might require 100 or 1000 of

525
00:18:55,120 --> 00:18:57,919
separate containers so it is during that

526
00:18:57,919 --> 00:19:01,280
time continuing like the major runtime

527
00:19:01,280 --> 00:19:03,840
container runtime uh

528
00:19:03,840 --> 00:19:06,240
docker will definitely benefit and they

529
00:19:06,240 --> 00:19:09,280
will use tools to orchestrate and manage

530
00:19:09,280 --> 00:19:11,440
all these individual containers which

531
00:19:11,440 --> 00:19:13,200
are running in the operations so that's

532
00:19:13,200 --> 00:19:15,039
the time where in this stocker and the

533
00:19:15,039 --> 00:19:16,799
kubernetes are actually coming in the

534
00:19:16,799 --> 00:19:19,520
picture the these orchestrate your

535
00:19:19,520 --> 00:19:21,600
container

536
00:19:21,600 --> 00:19:22,840
container

537
00:19:22,840 --> 00:19:25,360
operations kubernetes is also something

538
00:19:25,360 --> 00:19:27,200
which is like orchestrate the operations

539
00:19:27,200 --> 00:19:29,520
of multiple containers and it works in

540
00:19:29,520 --> 00:19:31,919
harmony along with the containers

541
00:19:31,919 --> 00:19:34,400
it manages areas like

542
00:19:34,400 --> 00:19:36,240
using underlying infrastructure

543
00:19:36,240 --> 00:19:38,720
resources for containerized application

544
00:19:38,720 --> 00:19:42,080
such as uh amount of compute network or

545
00:19:42,080 --> 00:19:44,320
storage resources so these are like few

546
00:19:44,320 --> 00:19:46,799
areas which they works on they also have

547
00:19:46,799 --> 00:19:48,720
like orchestrations

548
00:19:48,720 --> 00:19:50,880
like this orchestration of kubernetes

549
00:19:50,880 --> 00:19:53,760
and docker swarm in this case they the

550
00:19:53,760 --> 00:19:57,200
major benefit of these are that it makes

551
00:19:57,200 --> 00:19:59,679
it makes it easier to automate and scale

552
00:19:59,679 --> 00:20:02,480
the container based workload so that

553
00:20:02,480 --> 00:20:04,559
during your live production environment

554
00:20:04,559 --> 00:20:07,039
it can satisfy or it can work based on

555
00:20:07,039 --> 00:20:09,840
the kind of environment we are having or

556
00:20:09,840 --> 00:20:12,640
the like the requirement

557
00:20:12,640 --> 00:20:14,240
application is having so that is one of

558
00:20:14,240 --> 00:20:17,280
the major in use of

559
00:20:17,280 --> 00:20:19,200
kubernetes and docker

560
00:20:19,200 --> 00:20:21,039
from a different perspective as as we

561
00:20:21,039 --> 00:20:22,320
are talking about the differences

562
00:20:22,320 --> 00:20:24,320
between the kubernetes and docker so

563
00:20:24,320 --> 00:20:26,960
docker is like a kind of uh platform but

564
00:20:26,960 --> 00:20:28,480
when we talk about the orchestration

565
00:20:28,480 --> 00:20:31,440
platform docker has its own docker swarm

566
00:20:31,440 --> 00:20:34,240
wherein kubernetes is an individual

567
00:20:34,240 --> 00:20:36,240
orchestration platform

568
00:20:36,240 --> 00:20:38,480
from now we'll compare the

569
00:20:38,480 --> 00:20:40,559
compare docker swarm versus kubernetes

570
00:20:40,559 --> 00:20:42,720
under the five major areas

571
00:20:42,720 --> 00:20:44,720
the first one definitely is from a

572
00:20:44,720 --> 00:20:46,480
scaling or a scaling perspective when we

573
00:20:46,480 --> 00:20:49,200
talk about like how orchestration is

574
00:20:49,200 --> 00:20:50,320
important

575
00:20:50,320 --> 00:20:52,960
the major reason why

576
00:20:52,960 --> 00:20:55,679
like uh kubernetes being very popular

577
00:20:55,679 --> 00:20:57,120
out of docker swarm or any other

578
00:20:57,120 --> 00:20:58,799
orchestration like open shift and there

579
00:20:58,799 --> 00:21:01,120
are a few other

580
00:21:01,120 --> 00:21:03,679
docker uh sorry container orchestration

581
00:21:03,679 --> 00:21:05,520
platforms available in the market but

582
00:21:05,520 --> 00:21:07,679
out of them i say that

583
00:21:07,679 --> 00:21:09,679
the the most popular one is the

584
00:21:09,679 --> 00:21:11,280
kubernetes and one of the reason is

585
00:21:11,280 --> 00:21:13,679
because kubernetes supports auto scaling

586
00:21:13,679 --> 00:21:15,360
compared to others so that's one of the

587
00:21:15,360 --> 00:21:17,200
reason why a lot of

588
00:21:17,200 --> 00:21:18,960
developers or organization when they

589
00:21:18,960 --> 00:21:20,480
move towards containers and

590
00:21:20,480 --> 00:21:23,120
orchestrations they tend towards the

591
00:21:23,120 --> 00:21:25,360
kubernetes from a community perspective

592
00:21:25,360 --> 00:21:27,919
i say honestly both have quite good

593
00:21:27,919 --> 00:21:30,320
community however kubernetes because of

594
00:21:30,320 --> 00:21:32,400
being more widely popular have a more

595
00:21:32,400 --> 00:21:33,840
active community

596
00:21:33,840 --> 00:21:37,200
uh from a clustering perspective like uh

597
00:21:37,200 --> 00:21:39,760
dockerson it's pretty easy to start the

598
00:21:39,760 --> 00:21:42,000
cluster it has its own advantage wherein

599
00:21:42,000 --> 00:21:44,000
kubernetes is a bit complicated process

600
00:21:44,000 --> 00:21:47,039
wherein you need to identify the correct

601
00:21:47,039 --> 00:21:49,360
way which you want to operate like from

602
00:21:49,360 --> 00:21:52,159
cube ctl or maybe your dtcd different

603
00:21:52,159 --> 00:21:54,240
different ways are there so

604
00:21:54,240 --> 00:21:55,039
the

605
00:21:55,039 --> 00:21:56,640
it's a bit difficult when it comes to

606
00:21:56,640 --> 00:21:58,559
cooper data but still

607
00:21:58,559 --> 00:22:01,360
it has its own advantages from a api

608
00:22:01,360 --> 00:22:03,440
capabilities perspective like docker

609
00:22:03,440 --> 00:22:05,600
swamp because it's a docker owned com

610
00:22:05,600 --> 00:22:07,360
products it is limited to only

611
00:22:07,360 --> 00:22:10,640
supporting the docker apis wherein the

612
00:22:10,640 --> 00:22:13,039
kubernetes is the reason is that it can

613
00:22:13,039 --> 00:22:16,159
it is not the agnostic to docker it can

614
00:22:16,159 --> 00:22:17,919
overcome your constraints of docker and

615
00:22:17,919 --> 00:22:19,520
docker dpis as well so that's another

616
00:22:19,520 --> 00:22:22,320
reason why it is being widely used

617
00:22:22,320 --> 00:22:23,280
um

618
00:22:23,280 --> 00:22:24,960
i'll say from a production deployment

619
00:22:24,960 --> 00:22:27,679
perspective like a lot of applications

620
00:22:27,679 --> 00:22:29,600
are not

621
00:22:29,600 --> 00:22:31,520
much deployed on dockers from when we

622
00:22:31,520 --> 00:22:33,919
talk about the kubernetes kubernetes is

623
00:22:33,919 --> 00:22:36,400
like deployed at various scale amongst

624
00:22:36,400 --> 00:22:38,640
organization and it is very popular as i

625
00:22:38,640 --> 00:22:40,559
say so it is like definitely one of the

626
00:22:40,559 --> 00:22:42,000
preferred choices

627
00:22:42,000 --> 00:22:44,080
uh a lot of organizations are actually

628
00:22:44,080 --> 00:22:45,120
using it

629
00:22:45,120 --> 00:22:47,360
uh from uh from

630
00:22:47,360 --> 00:22:49,120
like from orchestration or managed

631
00:22:49,120 --> 00:22:50,799
services perspective as well when we

632
00:22:50,799 --> 00:22:52,880
talk about the cloud native so like in

633
00:22:52,880 --> 00:22:55,280
the next slide i have tried to compare

634
00:22:55,280 --> 00:22:56,000
the

635
00:22:56,000 --> 00:22:58,080
what are the current applications or

636
00:22:58,080 --> 00:23:01,760
current uh of current

637
00:23:01,919 --> 00:23:04,000
not just not the application but current

638
00:23:04,000 --> 00:23:06,240
uh

639
00:23:06,240 --> 00:23:07,360
current

640
00:23:07,360 --> 00:23:09,679
utilization of kubernetes and over the

641
00:23:09,679 --> 00:23:11,280
cloud department so when we talk about

642
00:23:11,280 --> 00:23:14,559
aws gcp and azure uh these are all like

643
00:23:14,559 --> 00:23:16,640
they all have their own managed services

644
00:23:16,640 --> 00:23:17,840
when it when we talk about the

645
00:23:17,840 --> 00:23:22,000
kubernetes so like aws has eks gcps gke

646
00:23:22,000 --> 00:23:25,200
and azure has aks and if you see

647
00:23:25,200 --> 00:23:26,240
like

648
00:23:26,240 --> 00:23:28,240
they a lot of

649
00:23:28,240 --> 00:23:29,919
clients are preferring the managed

650
00:23:29,919 --> 00:23:32,400
kubernetes service and across any

651
00:23:32,400 --> 00:23:34,799
platform you just see and that's one of

652
00:23:34,799 --> 00:23:36,400
the reason why i say that

653
00:23:36,400 --> 00:23:38,400
uh when we talk about the cloud native

654
00:23:38,400 --> 00:23:40,640
deployments these all technologies are

655
00:23:40,640 --> 00:23:42,720
very very useful

656
00:23:42,720 --> 00:23:46,400
only challenge for us is that

657
00:23:46,400 --> 00:23:49,039
the more promising they seem the more we

658
00:23:49,039 --> 00:23:51,039
have to be concerned about the security

659
00:23:51,039 --> 00:23:53,200
we need to know what are the cyber

660
00:23:53,200 --> 00:23:54,480
security

661
00:23:54,480 --> 00:23:56,960
challenges for these kind of deployments

662
00:23:56,960 --> 00:23:59,440
because these are very new we should not

663
00:23:59,440 --> 00:24:01,679
just deploy and then think about it it

664
00:24:01,679 --> 00:24:03,440
should not be an afterthought we should

665
00:24:03,440 --> 00:24:05,440
to think about the security when we are

666
00:24:05,440 --> 00:24:08,159
trying to deploy it and we should follow

667
00:24:08,159 --> 00:24:09,679
the best practices so in the next

668
00:24:09,679 --> 00:24:11,600
section of the slides now we'll be

669
00:24:11,600 --> 00:24:13,279
focusing on the

670
00:24:13,279 --> 00:24:15,120
best practices when we talk about the

671
00:24:15,120 --> 00:24:17,919
deployments of this containers contain

672
00:24:17,919 --> 00:24:19,760
deploying the security securing

673
00:24:19,760 --> 00:24:22,880
containers and the kubernetes

674
00:24:22,880 --> 00:24:25,760
so here we are ready with our

675
00:24:25,760 --> 00:24:28,159
lightsabers let's go and secure these

676
00:24:28,159 --> 00:24:30,720
container deployments in the next ones

677
00:24:30,720 --> 00:24:33,279
so when we talk about the container

678
00:24:33,279 --> 00:24:36,559
security i think the major part i'll

679
00:24:36,559 --> 00:24:38,480
highlight is that there are six major

680
00:24:38,480 --> 00:24:41,360
areas where the different challenges are

681
00:24:41,360 --> 00:24:44,799
there and uh

682
00:24:44,799 --> 00:24:46,960
different uh

683
00:24:46,960 --> 00:24:48,640
paths are there when we talk about the

684
00:24:48,640 --> 00:24:50,640
container security when the different

685
00:24:50,640 --> 00:24:52,799
challenges uh first one i'll say is the

686
00:24:52,799 --> 00:24:55,039
open source supply chain risk after like

687
00:24:55,039 --> 00:24:57,440
uh these recent attacks when we talk

688
00:24:57,440 --> 00:25:00,000
about uh the supply chain attacks are

689
00:25:00,000 --> 00:25:02,640
getting uh more popular

690
00:25:02,640 --> 00:25:04,960
between the bad actors so this another

691
00:25:04,960 --> 00:25:06,400
very important is when we talk about the

692
00:25:06,400 --> 00:25:08,640
container security uh image and

693
00:25:08,640 --> 00:25:10,559
compliance risk host operating system

694
00:25:10,559 --> 00:25:12,640
risk risk in the registry where we have

695
00:25:12,640 --> 00:25:15,120
all the system images stored then the

696
00:25:15,120 --> 00:25:17,440
runtime or the network related risk and

697
00:25:17,440 --> 00:25:19,520
then the last would be the orchestration

698
00:25:19,520 --> 00:25:21,600
related risk like the platforms we are

699
00:25:21,600 --> 00:25:23,200
using we just talked about the docker

700
00:25:23,200 --> 00:25:25,679
swarm and the kubernetes so these

701
00:25:25,679 --> 00:25:28,400
platform which were using during our

702
00:25:28,400 --> 00:25:31,279
deployment these are have their own form

703
00:25:31,279 --> 00:25:33,279
of list so

704
00:25:33,279 --> 00:25:34,960
though from a challenges perspective of

705
00:25:34,960 --> 00:25:37,039
the risk perspective there are many

706
00:25:37,039 --> 00:25:39,679
containers we cannot just look at the

707
00:25:39,679 --> 00:25:41,679
bothers of the container we also have to

708
00:25:41,679 --> 00:25:44,400
see the untouched side from a security

709
00:25:44,400 --> 00:25:46,559
perspective and these all risks are

710
00:25:46,559 --> 00:25:49,760
important like what kind of different uh

711
00:25:49,760 --> 00:25:51,360
things would be there and what we have

712
00:25:51,360 --> 00:25:53,840
to secure and containers like

713
00:25:53,840 --> 00:25:55,600
specifically the users who are using the

714
00:25:55,600 --> 00:25:57,840
containers need to ensure that they have

715
00:25:57,840 --> 00:26:01,279
a purpose built full stack security to

716
00:26:01,279 --> 00:26:02,640
address like this vulnerability

717
00:26:02,640 --> 00:26:05,360
management compliance runtime protection

718
00:26:05,360 --> 00:26:07,039
and network security requirement of

719
00:26:07,039 --> 00:26:08,640
their application

720
00:26:08,640 --> 00:26:10,480
if they are not focusing on those areas

721
00:26:10,480 --> 00:26:12,240
it will be it will make their life very

722
00:26:12,240 --> 00:26:14,559
very difficult so this these are like

723
00:26:14,559 --> 00:26:17,200
the six areas which i feel are

724
00:26:17,200 --> 00:26:19,520
challenges from a security perspective

725
00:26:19,520 --> 00:26:21,600
in the next slide i'll talk about what

726
00:26:21,600 --> 00:26:23,360
should we do from a best practices so

727
00:26:23,360 --> 00:26:25,520
not just like identifying the challenges

728
00:26:25,520 --> 00:26:28,080
but from uh from a security perspective

729
00:26:28,080 --> 00:26:29,840
what should be our next steps what we

730
00:26:29,840 --> 00:26:33,360
need to do so let's see one by one

731
00:26:33,360 --> 00:26:36,799
uh to individually for everyone

732
00:26:36,799 --> 00:26:38,640
so talking about the image and the

733
00:26:38,640 --> 00:26:40,720
compliance risk i'll say that when we

734
00:26:40,720 --> 00:26:42,640
talk about the docker or container

735
00:26:42,640 --> 00:26:45,039
images we need to ensure that we have

736
00:26:45,039 --> 00:26:47,120
availability management tools present

737
00:26:47,120 --> 00:26:50,080
which scans the new images added to your

738
00:26:50,080 --> 00:26:52,159
registry or whenever a developer is

739
00:26:52,159 --> 00:26:54,720
trying to use any new images like docker

740
00:26:54,720 --> 00:26:56,159
images or any container images they

741
00:26:56,159 --> 00:26:58,080
should be scanned using a vulnerability

742
00:26:58,080 --> 00:26:59,679
management solution

743
00:26:59,679 --> 00:27:00,480
and

744
00:27:00,480 --> 00:27:02,640
if possible you should integrate these

745
00:27:02,640 --> 00:27:04,960
tools to your devops pipeline if you

746
00:27:04,960 --> 00:27:06,960
have a devops pipeline make sure that

747
00:27:06,960 --> 00:27:09,200
you have these tools integrated with

748
00:27:09,200 --> 00:27:11,360
your pipeline so that

749
00:27:11,360 --> 00:27:14,000
these new technologies like whenever

750
00:27:14,000 --> 00:27:15,760
you're building any new pipeline or any

751
00:27:15,760 --> 00:27:18,240
new application you can use already

752
00:27:18,240 --> 00:27:20,960
white listed images from a previous scan

753
00:27:20,960 --> 00:27:24,159
make those images immutable as we say

754
00:27:24,159 --> 00:27:26,640
from architecture's perspective so that

755
00:27:26,640 --> 00:27:29,039
like that risk is minimized

756
00:27:29,039 --> 00:27:30,799
i'll also suggest that you should also

757
00:27:30,799 --> 00:27:32,399
implement some quality gates when we

758
00:27:32,399 --> 00:27:33,919
talk about the

759
00:27:33,919 --> 00:27:35,520
vulnerabilities from each stage

760
00:27:35,520 --> 00:27:37,600
perspective so not like just from a

761
00:27:37,600 --> 00:27:39,600
deployment stage but right from like the

762
00:27:39,600 --> 00:27:42,159
build test and deploy stages different

763
00:27:42,159 --> 00:27:44,159
different stages of your devops pipeline

764
00:27:44,159 --> 00:27:46,480
you should have some quality gate some

765
00:27:46,480 --> 00:27:49,200
checks which should ensure that your

766
00:27:49,200 --> 00:27:51,440
deployment or your images

767
00:27:51,440 --> 00:27:53,279
does not have any particular risk from a

768
00:27:53,279 --> 00:27:55,200
compliance perspective

769
00:27:55,200 --> 00:27:57,200
second i'll say from a registry

770
00:27:57,200 --> 00:27:59,120
perspective since containers are made of

771
00:27:59,120 --> 00:28:01,520
libraries binaries and application code

772
00:28:01,520 --> 00:28:03,520
it is critical for all the enterprises

773
00:28:03,520 --> 00:28:06,000
to establish like an official container

774
00:28:06,000 --> 00:28:08,480
registry in their organization and it

775
00:28:08,480 --> 00:28:10,399
will be like the first step of building

776
00:28:10,399 --> 00:28:12,480
the security i'll say and it will be a

777
00:28:12,480 --> 00:28:14,720
first step to their dev secours pipeline

778
00:28:14,720 --> 00:28:17,200
or devsecops journey because then

779
00:28:17,200 --> 00:28:19,200
they'll have the overall visibility of

780
00:28:19,200 --> 00:28:21,120
what images are being used they're not

781
00:28:21,120 --> 00:28:23,360
just like pulling their images runtime

782
00:28:23,360 --> 00:28:25,520
from the internet which will bring in

783
00:28:25,520 --> 00:28:28,159
the risk of let's say open source or the

784
00:28:28,159 --> 00:28:30,399
supply chain attacks from completely

785
00:28:30,399 --> 00:28:31,360
unknown

786
00:28:31,360 --> 00:28:33,360
images and that's so a container

787
00:28:33,360 --> 00:28:35,120
registry what it does is it provides a

788
00:28:35,120 --> 00:28:37,600
convenient a centralized meaning of

789
00:28:37,600 --> 00:28:40,640
storing distributing application images

790
00:28:40,640 --> 00:28:42,320
a lot of application

791
00:28:42,320 --> 00:28:44,640
right now like can have like tens or

792
00:28:44,640 --> 00:28:46,080
thousands of images stored in their

793
00:28:46,080 --> 00:28:48,240
registries because register is like

794
00:28:48,240 --> 00:28:51,440
central and it is a way

795
00:28:51,440 --> 00:28:52,960
in which containerized environment

796
00:28:52,960 --> 00:28:55,200
operate it is very important for us to

797
00:28:55,200 --> 00:28:57,760
secure this registry as well so any kind

798
00:28:57,760 --> 00:28:59,600
of inclusion or vulnerabilities within

799
00:28:59,600 --> 00:29:02,399
the registry we should like

800
00:29:02,399 --> 00:29:05,520
know about it at as soon as possible and

801
00:29:05,520 --> 00:29:08,320
it provide us an op also an opportunity

802
00:29:08,320 --> 00:29:09,919
of compromising that particular

803
00:29:09,919 --> 00:29:12,320
application which is running so what we

804
00:29:12,320 --> 00:29:14,640
can do we can continuously monitor these

805
00:29:14,640 --> 00:29:17,679
registry registries for any changes in

806
00:29:17,679 --> 00:29:19,120
let's say any status of the

807
00:29:19,120 --> 00:29:20,320
vulnerabilities if there are new

808
00:29:20,320 --> 00:29:21,919
vulnerabilities within the registry we

809
00:29:21,919 --> 00:29:23,679
should know about it so continuous

810
00:29:23,679 --> 00:29:26,240
monitoring or a security scan should be

811
00:29:26,240 --> 00:29:28,320
there on the registries

812
00:29:28,320 --> 00:29:30,559
whenever we are pulling let's say new

813
00:29:30,559 --> 00:29:33,360
images from uh from anywhere it should

814
00:29:33,360 --> 00:29:35,360
be make sure that which we are pulling

815
00:29:35,360 --> 00:29:36,960
at the new images from our trusted

816
00:29:36,960 --> 00:29:39,279
sources and their security scan

817
00:29:39,279 --> 00:29:43,600
and also the i'll say that

818
00:29:43,600 --> 00:29:44,799
you should not

819
00:29:44,799 --> 00:29:45,840
like

820
00:29:45,840 --> 00:29:48,480
just for completely blindly follow this

821
00:29:48,480 --> 00:29:50,960
kind of practices of monitoring i'll

822
00:29:50,960 --> 00:29:52,480
also suggest that

823
00:29:52,480 --> 00:29:54,240
you should log down the server or the

824
00:29:54,240 --> 00:29:56,640
host registry using some secure access

825
00:29:56,640 --> 00:29:59,520
policy so having a good access policies

826
00:29:59,520 --> 00:30:00,880
or

827
00:30:00,880 --> 00:30:01,679
like

828
00:30:01,679 --> 00:30:03,440
having some kind of

829
00:30:03,440 --> 00:30:06,080
rule based access control metrics to who

830
00:30:06,080 --> 00:30:08,240
can access when what kind of things they

831
00:30:08,240 --> 00:30:10,320
can access that also helps when we talk

832
00:30:10,320 --> 00:30:12,880
about the registry and how we can reduce

833
00:30:12,880 --> 00:30:16,640
the risk related to the registries

834
00:30:16,640 --> 00:30:18,559
then going to the next one which is the

835
00:30:18,559 --> 00:30:20,960
orchestration related or like kubernetes

836
00:30:20,960 --> 00:30:22,960
and docker so container orchestration is

837
00:30:22,960 --> 00:30:26,720
definitely a process wherein it helps to

838
00:30:26,720 --> 00:30:29,039
enact or like make sure that you have

839
00:30:29,039 --> 00:30:31,520
proper access control to prevent the

840
00:30:31,520 --> 00:30:33,760
risk from over privileged accounts so a

841
00:30:33,760 --> 00:30:35,760
lot of time we can have some over

842
00:30:35,760 --> 00:30:38,799
previous users accessing it and that can

843
00:30:38,799 --> 00:30:41,360
like relate issues to the network or

844
00:30:41,360 --> 00:30:42,880
some kind of like electoral movements

845
00:30:42,880 --> 00:30:44,399
over the network so

846
00:30:44,399 --> 00:30:47,520
by having proper im in cloud security

847
00:30:47,520 --> 00:30:49,919
and like some least privileges modern if

848
00:30:49,919 --> 00:30:51,520
you are following a defense in depth

849
00:30:51,520 --> 00:30:53,039
kind of a

850
00:30:53,039 --> 00:30:55,279
model what you can do is like in docker

851
00:30:55,279 --> 00:30:57,279
and kubernetes both you can

852
00:30:57,279 --> 00:30:59,600
explicitly white list and implement the

853
00:30:59,600 --> 00:31:02,080
security on the infrastructure teams and

854
00:31:02,080 --> 00:31:04,720
ensure that the users only perform

855
00:31:04,720 --> 00:31:07,279
command based on their appropriate roles

856
00:31:07,279 --> 00:31:09,760
they don't do anything which is beyond

857
00:31:09,760 --> 00:31:13,120
their roles so that kind of uh kind of

858
00:31:13,120 --> 00:31:14,880
identity and access management controls

859
00:31:14,880 --> 00:31:16,880
you can implement within your docker and

860
00:31:16,880 --> 00:31:19,039
your kubernetes so that's another good

861
00:31:19,039 --> 00:31:19,919
part

862
00:31:19,919 --> 00:31:22,320
also what you can do is you can also

863
00:31:22,320 --> 00:31:24,559
protect your port to board communication

864
00:31:24,559 --> 00:31:26,480
and limit your damages

865
00:31:26,480 --> 00:31:29,200
from the attackers by like removing the

866
00:31:29,200 --> 00:31:31,279
lateral movement through the environment

867
00:31:31,279 --> 00:31:33,200
so securing any kind of front-end

868
00:31:33,200 --> 00:31:35,919
services would be another step you can

869
00:31:35,919 --> 00:31:38,159
implement when we talk about the orchid

870
00:31:38,159 --> 00:31:40,559
orchestration related risk

871
00:31:40,559 --> 00:31:42,960
so this rather interesting

872
00:31:42,960 --> 00:31:45,519
risk which happens then from a network

873
00:31:45,519 --> 00:31:48,000
or a runtime perspective like containers

874
00:31:48,000 --> 00:31:50,159
all most of the times is like running in

875
00:31:50,159 --> 00:31:52,559
the runtime and we can identify new

876
00:31:52,559 --> 00:31:54,480
vulnerabilities in the containers

877
00:31:54,480 --> 00:31:56,880
runtime even if they have scan initially

878
00:31:56,880 --> 00:31:58,640
in a build stage there may be some

879
00:31:58,640 --> 00:32:00,480
runtime vulnerabilities which can come

880
00:32:00,480 --> 00:32:02,799
from a code so those kind of runtime

881
00:32:02,799 --> 00:32:05,600
scanning is also important and

882
00:32:05,600 --> 00:32:07,760
it is i'll say one of the most difficult

883
00:32:07,760 --> 00:32:09,919
part when it comes to container stack

884
00:32:09,919 --> 00:32:11,840
because like unlike the traditional

885
00:32:11,840 --> 00:32:14,399
security tools it is there is no nothing

886
00:32:14,399 --> 00:32:16,720
as of now that mature which is defined

887
00:32:16,720 --> 00:32:18,080
when we talk about the container

888
00:32:18,080 --> 00:32:20,080
continuous monitoring definitely now

889
00:32:20,080 --> 00:32:21,840
there are few more tools but still like

890
00:32:21,840 --> 00:32:23,600
from a completeness perspective they are

891
00:32:23,600 --> 00:32:26,840
still uh i'll say in a trial base trial

892
00:32:26,840 --> 00:32:29,919
basis uh i'll say like

893
00:32:29,919 --> 00:32:32,399
some organization should also leverage

894
00:32:32,399 --> 00:32:34,720
uh runtime protection runtime encryption

895
00:32:34,720 --> 00:32:36,480
of the containers that is one of the

896
00:32:36,480 --> 00:32:38,640
important key aspect because you know

897
00:32:38,640 --> 00:32:40,880
don't know where your container images

898
00:32:40,880 --> 00:32:43,760
may run so using a container runtime

899
00:32:43,760 --> 00:32:46,000
container encryption runtime container

900
00:32:46,000 --> 00:32:48,399
protections are definitely

901
00:32:48,399 --> 00:32:50,480
important they will help

902
00:32:50,480 --> 00:32:53,200
to ensure that you are compliant you are

903
00:32:53,200 --> 00:32:55,360
cyber safe and

904
00:32:55,360 --> 00:32:57,120
a lot of vendors are actually working in

905
00:32:57,120 --> 00:32:58,880
this particular domain as well when we

906
00:32:58,880 --> 00:33:01,039
talk about the runtime security of

907
00:33:01,039 --> 00:33:03,760
containers one i have in mind would be

908
00:33:03,760 --> 00:33:05,519
photonics they have this runtime

909
00:33:05,519 --> 00:33:08,080
encryption which is very critical when

910
00:33:08,080 --> 00:33:11,279
we talk about the container security so

911
00:33:11,279 --> 00:33:12,960
definitely these kind of new

912
00:33:12,960 --> 00:33:15,200
technologies these kind of new solutions

913
00:33:15,200 --> 00:33:16,559
are something which you should keep an

914
00:33:16,559 --> 00:33:18,960
eye on when we talk about the container

915
00:33:18,960 --> 00:33:21,360
deployments and how you can avoid those

916
00:33:21,360 --> 00:33:22,640
kind of risk

917
00:33:22,640 --> 00:33:24,320
from a host-wise perspective i'll say

918
00:33:24,320 --> 00:33:27,039
that try to use minimalistic operating

919
00:33:27,039 --> 00:33:29,200
systems to reduce your attack services

920
00:33:29,200 --> 00:33:30,480
try to use

921
00:33:30,480 --> 00:33:31,279
uh

922
00:33:31,279 --> 00:33:32,480
kind of a

923
00:33:32,480 --> 00:33:34,960
hard coded or like kind of something

924
00:33:34,960 --> 00:33:37,760
which is already

925
00:33:37,760 --> 00:33:41,120
i'll say best compliant or limited

926
00:33:41,120 --> 00:33:42,960
functionality kind of operating system

927
00:33:42,960 --> 00:33:45,279
not something which has uh everything

928
00:33:45,279 --> 00:33:47,760
opened up so limited processes limited

929
00:33:47,760 --> 00:33:49,919
ports open so a hardened operating

930
00:33:49,919 --> 00:33:52,640
system is suggested when you should use

931
00:33:52,640 --> 00:33:54,640
also your operating system should

932
00:33:54,640 --> 00:33:57,679
undergo a continuous vulnerability scans

933
00:33:57,679 --> 00:33:59,840
so that anything which is detected at a

934
00:33:59,840 --> 00:34:01,519
kernel level or maybe operating system

935
00:34:01,519 --> 00:34:03,919
level it should be flagged right from

936
00:34:03,919 --> 00:34:05,519
the start

937
00:34:05,519 --> 00:34:07,279
the last one i'll say is the open source

938
00:34:07,279 --> 00:34:10,000
supply chain raise so like uh tools like

939
00:34:10,000 --> 00:34:12,560
source code source composition analysis

940
00:34:12,560 --> 00:34:15,599
uh these kind of tools will be helping a

941
00:34:15,599 --> 00:34:18,320
lot with to uh to avoid these supply

942
00:34:18,320 --> 00:34:21,040
chain attacks so recently u.s also has

943
00:34:21,040 --> 00:34:22,639
released this

944
00:34:22,639 --> 00:34:25,520
bill wherein it has been made mandatory

945
00:34:25,520 --> 00:34:26,320
to

946
00:34:26,320 --> 00:34:28,480
have a software bill of materials for

947
00:34:28,480 --> 00:34:30,560
all the applications of the software so

948
00:34:30,560 --> 00:34:32,639
this will be something which will work

949
00:34:32,639 --> 00:34:35,280
on this area wherein you can have this

950
00:34:35,280 --> 00:34:37,199
remove this supply chain

951
00:34:37,199 --> 00:34:39,839
risk by knowing or using these source

952
00:34:39,839 --> 00:34:42,399
composition assist tools and

953
00:34:42,399 --> 00:34:44,000
checking from the vendor where you are

954
00:34:44,000 --> 00:34:46,480
buying these tools what is the

955
00:34:46,480 --> 00:34:48,480
software bill of materials so that you

956
00:34:48,480 --> 00:34:50,719
are like you have your own due diligence

957
00:34:50,719 --> 00:34:52,879
when it comes to the risk associated

958
00:34:52,879 --> 00:34:54,079
with it

959
00:34:54,079 --> 00:34:55,040
so

960
00:34:55,040 --> 00:34:58,240
i'll say this are some some of the

961
00:34:58,240 --> 00:35:00,960
situation wherein like how you can use

962
00:35:00,960 --> 00:35:02,880
and make sure your next

963
00:35:02,880 --> 00:35:04,480
containers when you are talking about

964
00:35:04,480 --> 00:35:07,280
are secured you make sure different

965
00:35:07,280 --> 00:35:08,800
different at different different levels

966
00:35:08,800 --> 00:35:10,880
of your pipeline or container deployment

967
00:35:10,880 --> 00:35:13,119
cycle you can implement these different

968
00:35:13,119 --> 00:35:15,440
security gates you need to ensure that

969
00:35:15,440 --> 00:35:17,520
you are protected your container

970
00:35:17,520 --> 00:35:19,920
containers applications are protected

971
00:35:19,920 --> 00:35:22,079
but this is just one part we also have

972
00:35:22,079 --> 00:35:24,720
to secure the orchestration that is your

973
00:35:24,720 --> 00:35:27,520
kubernetes so as the batman says we need

974
00:35:27,520 --> 00:35:30,880
to see about the copenhagen so from a

975
00:35:30,880 --> 00:35:32,720
kubernetes perspective i'll say that

976
00:35:32,720 --> 00:35:34,720
from the overall build deployer and

977
00:35:34,720 --> 00:35:36,800
pipeline uh there are basic things which

978
00:35:36,800 --> 00:35:38,800
we need to ensure like we have seen

979
00:35:38,800 --> 00:35:41,040
build deploy run already right now from

980
00:35:41,040 --> 00:35:42,720
a container perspective that you should

981
00:35:42,720 --> 00:35:44,320
scan the image you should remediate

982
00:35:44,320 --> 00:35:45,920
anything which you're finding

983
00:35:45,920 --> 00:35:47,520
you can see

984
00:35:47,520 --> 00:35:48,800
make sure that you have limited

985
00:35:48,800 --> 00:35:50,480
privileges running when we are trying to

986
00:35:50,480 --> 00:35:53,040
deploy that particular container images

987
00:35:53,040 --> 00:35:55,200
and then later on from a running like

988
00:35:55,200 --> 00:35:56,560
during a runtime perspective you should

989
00:35:56,560 --> 00:35:58,400
have a continuous monitoring

990
00:35:58,400 --> 00:36:00,800
use don't use like default name spaces

991
00:36:00,800 --> 00:36:02,480
or network settings those kind of things

992
00:36:02,480 --> 00:36:03,920
when you are trying to run that

993
00:36:03,920 --> 00:36:06,079
particular app contain the images but

994
00:36:06,079 --> 00:36:07,839
from a kubernetes perspective i'll say

995
00:36:07,839 --> 00:36:08,800
that

996
00:36:08,800 --> 00:36:10,640
updating the kubernetes very frequently

997
00:36:10,640 --> 00:36:12,960
whenever new releases are there is very

998
00:36:12,960 --> 00:36:14,240
important

999
00:36:14,240 --> 00:36:17,200
making sure your api is secure because

1000
00:36:17,200 --> 00:36:19,520
kubernetes is all about the api server

1001
00:36:19,520 --> 00:36:21,680
so securing your kubernetes api is

1002
00:36:21,680 --> 00:36:24,160
something which is

1003
00:36:24,160 --> 00:36:26,640
very important like you should know it

1004
00:36:26,640 --> 00:36:28,800
like uh though kubernetes has like

1005
00:36:28,800 --> 00:36:30,880
several built-in security advantages

1006
00:36:30,880 --> 00:36:34,000
like content names are usually replaced

1007
00:36:34,000 --> 00:36:35,760
not passed or updated which leads to

1008
00:36:35,760 --> 00:36:38,720
better version control it also increases

1009
00:36:38,720 --> 00:36:41,119
a lot of opportunity for exposure so

1010
00:36:41,119 --> 00:36:43,359
kubernetes like because it is relatively

1011
00:36:43,359 --> 00:36:46,320
new and complex technology and say

1012
00:36:46,320 --> 00:36:47,920
we don't have enough talent to fully

1013
00:36:47,920 --> 00:36:50,720
manage and secure it right now and that

1014
00:36:50,720 --> 00:36:53,200
makes it highly attractive to hackers

1015
00:36:53,200 --> 00:36:55,440
i'll say so whenever we are addressing

1016
00:36:55,440 --> 00:36:57,680
kubernetes security it is nearly

1017
00:36:57,680 --> 00:36:59,359
impossible to separate the kubernetes

1018
00:36:59,359 --> 00:37:01,040
cluster from the other layers of the

1019
00:37:01,040 --> 00:37:03,680
cloud computing and has these layers

1020
00:37:03,680 --> 00:37:05,440
like i'll say include

1021
00:37:05,440 --> 00:37:06,960
not just the application but also the

1022
00:37:06,960 --> 00:37:09,280
code itself the container images the

1023
00:37:09,280 --> 00:37:11,520
kubernetes cluster and as well as the

1024
00:37:11,520 --> 00:37:13,200
cloud or the networking layer which we

1025
00:37:13,200 --> 00:37:15,680
have which we always see when we are

1026
00:37:15,680 --> 00:37:17,680
trying to prepare so all these are

1027
00:37:17,680 --> 00:37:20,160
different areas which we needs to

1028
00:37:20,160 --> 00:37:21,680
emphasize when we are talking about

1029
00:37:21,680 --> 00:37:23,760
securing the kubernetes

1030
00:37:23,760 --> 00:37:25,920
each layer of this like builds on the

1031
00:37:25,920 --> 00:37:28,320
previous layer so what makes us like

1032
00:37:28,320 --> 00:37:29,760
whenever we are trying to achieve a

1033
00:37:29,760 --> 00:37:32,320
defense in depth this make sure that we

1034
00:37:32,320 --> 00:37:34,160
have to make sure that each of these

1035
00:37:34,160 --> 00:37:36,640
layers we have to protect them at an

1036
00:37:36,640 --> 00:37:39,040
individual part so not just the code or

1037
00:37:39,040 --> 00:37:40,720
the container image of the kubernetes

1038
00:37:40,720 --> 00:37:43,040
cluster but we have to make sure that we

1039
00:37:43,040 --> 00:37:43,760
are

1040
00:37:43,760 --> 00:37:46,560
securing each of them at the individual

1041
00:37:46,560 --> 00:37:47,760
layer

1042
00:37:47,760 --> 00:37:49,200
so this is something which we have to be

1043
00:37:49,200 --> 00:37:50,960
focused on

1044
00:37:50,960 --> 00:37:52,880
okay so this is the next part and in

1045
00:37:52,880 --> 00:37:54,560
this section what i wanted to do is i

1046
00:37:54,560 --> 00:37:58,400
want to cover the overall flow of

1047
00:37:58,400 --> 00:38:00,720
cloud native application deployment in a

1048
00:38:00,720 --> 00:38:04,079
3d in a new modern devops pipeline so

1049
00:38:04,079 --> 00:38:05,359
like let's say if you are using a

1050
00:38:05,359 --> 00:38:07,839
kubernetes based orchestration to deploy

1051
00:38:07,839 --> 00:38:09,119
any new

1052
00:38:09,119 --> 00:38:11,680
website on a container what are the

1053
00:38:11,680 --> 00:38:13,280
different security checks which you have

1054
00:38:13,280 --> 00:38:15,839
to undergo along with the different

1055
00:38:15,839 --> 00:38:18,079
stages of the devops pipeline i want to

1056
00:38:18,079 --> 00:38:20,480
cover in this but whole flow like that

1057
00:38:20,480 --> 00:38:23,119
so i divide it into three four stages

1058
00:38:23,119 --> 00:38:24,480
first let's see

1059
00:38:24,480 --> 00:38:26,320
like what you need to do when we talk

1060
00:38:26,320 --> 00:38:28,400
about the kubernetes security during

1061
00:38:28,400 --> 00:38:30,560
your build stage so right from a build

1062
00:38:30,560 --> 00:38:32,720
says perspective i'll say

1063
00:38:32,720 --> 00:38:34,240
you should scan your image and the

1064
00:38:34,240 --> 00:38:35,359
source code

1065
00:38:35,359 --> 00:38:37,040
is any application you are when you are

1066
00:38:37,040 --> 00:38:39,680
implementing like we normally do

1067
00:38:39,680 --> 00:38:41,680
various scanning tools like sas dashed

1068
00:38:41,680 --> 00:38:43,440
iasd sca

1069
00:38:43,440 --> 00:38:46,160
you also these all will ensure that your

1070
00:38:46,160 --> 00:38:48,880
code is as secure as possible uh i'll

1071
00:38:48,880 --> 00:38:52,160
also say don't like you don't forget to

1072
00:38:52,160 --> 00:38:55,280
use open source code which is like uh

1073
00:38:55,280 --> 00:38:57,359
like most of the most of them most of

1074
00:38:57,359 --> 00:38:58,640
your application may be using open

1075
00:38:58,640 --> 00:39:02,000
source code so what i'll say is like uh

1076
00:39:02,000 --> 00:39:03,920
you should have something to make sure

1077
00:39:03,920 --> 00:39:05,920
that your open source code is secure so

1078
00:39:05,920 --> 00:39:07,920
like a library checker or open source

1079
00:39:07,920 --> 00:39:09,920
checkers os open source checker those

1080
00:39:09,920 --> 00:39:12,000
kind of things should be important

1081
00:39:12,000 --> 00:39:14,800
you should implement like uh automate

1082
00:39:14,800 --> 00:39:16,400
your workflows to ensure that

1083
00:39:16,400 --> 00:39:18,640
vulnerabilities are remediated as soon

1084
00:39:18,640 --> 00:39:21,040
as possible and code is secure

1085
00:39:21,040 --> 00:39:23,920
also what you can do is you can like

1086
00:39:23,920 --> 00:39:25,599
make sure that you are using the most

1087
00:39:25,599 --> 00:39:28,320
updated image available as it will be

1088
00:39:28,320 --> 00:39:30,640
most secure image available so destroy

1089
00:39:30,640 --> 00:39:33,280
anything which is outdated or it is like

1090
00:39:33,280 --> 00:39:35,359
really not possible to pass them so that

1091
00:39:35,359 --> 00:39:37,280
is something which you can do during

1092
00:39:37,280 --> 00:39:39,359
your build stage during your deployment

1093
00:39:39,359 --> 00:39:41,359
what you can do is uh first thing i'll

1094
00:39:41,359 --> 00:39:43,359
say is don't deploy images from unknown

1095
00:39:43,359 --> 00:39:46,400
sources don't do it if you don't know

1096
00:39:46,400 --> 00:39:48,000
the providence of any

1097
00:39:48,000 --> 00:39:50,640
images where it comes from you if you

1098
00:39:50,640 --> 00:39:52,960
don't trust it don't deploy it

1099
00:39:52,960 --> 00:39:54,960
do the scanning of the images during

1100
00:39:54,960 --> 00:39:57,359
that deployment you might have already

1101
00:39:57,359 --> 00:39:59,359
find the vulnerabilities since your

1102
00:39:59,359 --> 00:40:01,040
image was last scanned in development

1103
00:40:01,040 --> 00:40:03,440
but make sure that you are also doing a

1104
00:40:03,440 --> 00:40:05,920
continuous image scanning later after

1105
00:40:05,920 --> 00:40:07,920
the development stages as well

1106
00:40:07,920 --> 00:40:09,200
also use

1107
00:40:09,200 --> 00:40:11,520
image admission controls like

1108
00:40:11,520 --> 00:40:13,760
if any image violates your organization

1109
00:40:13,760 --> 00:40:15,440
security policies or prevent the

1110
00:40:15,440 --> 00:40:17,839
container from running it should

1111
00:40:17,839 --> 00:40:19,280
make sure that you need higher

1112
00:40:19,280 --> 00:40:21,200
privileges to make sure that it is

1113
00:40:21,200 --> 00:40:22,880
running with that particular privilege

1114
00:40:22,880 --> 00:40:24,800
so make sure that you have some kind of

1115
00:40:24,800 --> 00:40:27,040
a quality checks or control gates in

1116
00:40:27,040 --> 00:40:28,800
case any vulnerabilities are fine in

1117
00:40:28,800 --> 00:40:31,040
your pipeline so it should not go to the

1118
00:40:31,040 --> 00:40:32,800
deployment it should need additional

1119
00:40:32,800 --> 00:40:35,040
value of that

1120
00:40:35,040 --> 00:40:36,880
i also suggest that you should limit the

1121
00:40:36,880 --> 00:40:39,440
privileges which are used by containers

1122
00:40:39,440 --> 00:40:41,520
so don't give or don't make sure that

1123
00:40:41,520 --> 00:40:42,560
they are running with the highest

1124
00:40:42,560 --> 00:40:44,319
privileges make sure that they follow

1125
00:40:44,319 --> 00:40:46,640
the lease privileges model that will

1126
00:40:46,640 --> 00:40:49,440
really help in securing your deployments

1127
00:40:49,440 --> 00:40:51,839
and i'll say that don't use your

1128
00:40:51,839 --> 00:40:53,200
defaults

1129
00:40:53,200 --> 00:40:55,520
like use your defaults

1130
00:40:55,520 --> 00:40:57,359
when we talk about the r back or let's

1131
00:40:57,359 --> 00:41:00,560
say network policies so ignore or avoid

1132
00:41:00,560 --> 00:41:02,960
using the default configurations it will

1133
00:41:02,960 --> 00:41:05,119
not be a best decision you will make so

1134
00:41:05,119 --> 00:41:06,880
enable the rule based access control

1135
00:41:06,880 --> 00:41:08,000
which you have in the container

1136
00:41:08,000 --> 00:41:10,319
orchestration and it will help you to

1137
00:41:10,319 --> 00:41:12,640
regulate your access based on the roles

1138
00:41:12,640 --> 00:41:15,040
which your individual users or services

1139
00:41:15,040 --> 00:41:17,599
may have so that will be another good

1140
00:41:17,599 --> 00:41:19,440
best practices when we talk during the

1141
00:41:19,440 --> 00:41:21,520
deployment phase

1142
00:41:21,520 --> 00:41:23,280
but what happens like after the build

1143
00:41:23,280 --> 00:41:24,720
and the deploy the next phase is the

1144
00:41:24,720 --> 00:41:26,960
production and from the production also

1145
00:41:26,960 --> 00:41:29,599
we need to make sure that we have some

1146
00:41:29,599 --> 00:41:32,240
security checks there and what we can do

1147
00:41:32,240 --> 00:41:34,880
is we can scan images in the production

1148
00:41:34,880 --> 00:41:37,200
like as we have talked about earlier we

1149
00:41:37,200 --> 00:41:38,400
may have missed out some new

1150
00:41:38,400 --> 00:41:40,640
vulnerabilities during that time or

1151
00:41:40,640 --> 00:41:43,359
maybe some you are of like came during

1152
00:41:43,359 --> 00:41:45,280
after the deployment so to make sure

1153
00:41:45,280 --> 00:41:46,960
that we are meticulous we about to

1154
00:41:46,960 --> 00:41:48,800
content scanning of our images that's

1155
00:41:48,800 --> 00:41:50,720
one of the important part what we can

1156
00:41:50,720 --> 00:41:53,200
also do is we can secure and inspect our

1157
00:41:53,200 --> 00:41:55,920
network using maybe a container firewall

1158
00:41:55,920 --> 00:41:58,160
which will like kind of apply any

1159
00:41:58,160 --> 00:42:00,240
network security

1160
00:42:00,240 --> 00:42:02,160
techniques to our cloud native

1161
00:42:02,160 --> 00:42:04,079
kubernetes environment so not just like

1162
00:42:04,079 --> 00:42:05,440
relying on the

1163
00:42:05,440 --> 00:42:07,359
traditional environment but using some

1164
00:42:07,359 --> 00:42:09,280
container firewall is also something

1165
00:42:09,280 --> 00:42:11,520
very important aspect which we can work

1166
00:42:11,520 --> 00:42:12,319
on

1167
00:42:12,319 --> 00:42:15,280
we can also like uh make sure that our

1168
00:42:15,280 --> 00:42:18,480
network graphics are like creating

1169
00:42:18,480 --> 00:42:21,280
for network graphics is following and uh

1170
00:42:21,280 --> 00:42:24,319
like creating and defining the

1171
00:42:24,319 --> 00:42:26,800
creating like the network cluster

1172
00:42:26,800 --> 00:42:29,119
traffic basically is following or

1173
00:42:29,119 --> 00:42:30,960
working as per the policies we have

1174
00:42:30,960 --> 00:42:33,760
defined on the cluster if

1175
00:42:33,760 --> 00:42:36,319
if you are like if you are not able to

1176
00:42:36,319 --> 00:42:38,319
control those network accesses in and

1177
00:42:38,319 --> 00:42:40,640
out of the container applications that

1178
00:42:40,640 --> 00:42:42,400
is a red flag yeah

1179
00:42:42,400 --> 00:42:44,400
so make sure that we have that network

1180
00:42:44,400 --> 00:42:46,880
policy is defined at an orchestrator

1181
00:42:46,880 --> 00:42:48,240
level

1182
00:42:48,240 --> 00:42:50,640
also i'll say that you should establish

1183
00:42:50,640 --> 00:42:53,359
the security boundaries using namespaces

1184
00:42:53,359 --> 00:42:54,640
they will allow you to divide the

1185
00:42:54,640 --> 00:42:56,800
cluster resources between multiple users

1186
00:42:56,800 --> 00:42:59,359
so that is definitely googo

1187
00:42:59,359 --> 00:43:02,720
uh from uh from a security policies for

1188
00:43:02,720 --> 00:43:04,800
the parts perspective i'll say like pods

1189
00:43:04,800 --> 00:43:06,480
are the smallest execution unit in

1190
00:43:06,480 --> 00:43:09,119
kubernetes and that's what are used to

1191
00:43:09,119 --> 00:43:11,440
organize your containers as well so what

1192
00:43:11,440 --> 00:43:13,280
you can do you can use pod security

1193
00:43:13,280 --> 00:43:14,800
policies

1194
00:43:14,800 --> 00:43:16,880
to address issues such as container

1195
00:43:16,880 --> 00:43:18,800
running as root and if they are running

1196
00:43:18,800 --> 00:43:20,480
with overproducers so those kind of

1197
00:43:20,480 --> 00:43:22,400
policies can be used using the pod

1198
00:43:22,400 --> 00:43:24,640
security policies

1199
00:43:24,640 --> 00:43:27,920
what we also do i suggest is that uh

1200
00:43:27,920 --> 00:43:30,319
when you are replicating any pods or you

1201
00:43:30,319 --> 00:43:33,440
are trying to like uh scale up using

1202
00:43:33,440 --> 00:43:35,839
existing identical behavior try to

1203
00:43:35,839 --> 00:43:38,240
monitor analyze the pod so that if you

1204
00:43:38,240 --> 00:43:41,040
see anything abnormal behavior within

1205
00:43:41,040 --> 00:43:42,720
the normal behavior like normal

1206
00:43:42,720 --> 00:43:44,800
something which is going which is not

1207
00:43:44,800 --> 00:43:48,480
something as usual then you can actually

1208
00:43:48,480 --> 00:43:50,480
flag it and investigate that particular

1209
00:43:50,480 --> 00:43:52,480
behavior so that in case of any kind of

1210
00:43:52,480 --> 00:43:55,200
breaches you know where to look for and

1211
00:43:55,200 --> 00:43:56,880
what to look for so that is very

1212
00:43:56,880 --> 00:43:58,800
important so make sure that you analyze

1213
00:43:58,800 --> 00:44:00,640
those parts for any kind of abnormal

1214
00:44:00,640 --> 00:44:02,640
behavior during the deployments after

1215
00:44:02,640 --> 00:44:04,720
the production

1216
00:44:04,720 --> 00:44:05,760
from a

1217
00:44:05,760 --> 00:44:07,839
kubernetes perspective itself like i say

1218
00:44:07,839 --> 00:44:09,920
that as in the previous slide i have

1219
00:44:09,920 --> 00:44:11,520
mentioned that you should update the

1220
00:44:11,520 --> 00:44:13,760
kubernetes very frequently so kubernetes

1221
00:44:13,760 --> 00:44:17,200
not only covers the like the only three

1222
00:44:17,200 --> 00:44:19,280
the version you if you are not updating

1223
00:44:19,280 --> 00:44:21,280
kubernetes regularly what you will miss

1224
00:44:21,280 --> 00:44:24,160
is like on any new patches of recently

1225
00:44:24,160 --> 00:44:26,400
discussed one disclose vulnerabilities

1226
00:44:26,400 --> 00:44:28,000
you should you will be able to miss that

1227
00:44:28,000 --> 00:44:30,079
so try to make sure that every quarter

1228
00:44:30,079 --> 00:44:32,560
you update your kubernetes so that you

1229
00:44:32,560 --> 00:44:34,960
don't expose your organization i suggest

1230
00:44:34,960 --> 00:44:37,040
quarterly is a fair enough thing

1231
00:44:37,040 --> 00:44:40,000
kubernetes api is something which is a

1232
00:44:40,000 --> 00:44:42,319
very important part of this applications

1233
00:44:42,319 --> 00:44:45,599
uh this modern cloud native deployments

1234
00:44:45,599 --> 00:44:47,359
so make sure that you don't leave your

1235
00:44:47,359 --> 00:44:50,319
kubernetes api publicly exposed and it

1236
00:44:50,319 --> 00:44:52,560
should only allow access by an internal

1237
00:44:52,560 --> 00:44:54,800
network or a vpn it is very very

1238
00:44:54,800 --> 00:44:57,760
important so make sure that you

1239
00:44:57,760 --> 00:44:59,520
take care of those aspects when you are

1240
00:44:59,520 --> 00:45:02,720
deploying deploying your next

1241
00:45:02,720 --> 00:45:05,440
containers in the devops so this like

1242
00:45:05,440 --> 00:45:08,160
the feature like on a high level i have

1243
00:45:08,160 --> 00:45:09,839
talked about what are the various things

1244
00:45:09,839 --> 00:45:12,000
you can do and it applies for all the

1245
00:45:12,000 --> 00:45:14,319
type of deployments like not just on the

1246
00:45:14,319 --> 00:45:17,520
aws azure gcp but any kind of cloud you

1247
00:45:17,520 --> 00:45:20,560
are using be it manage services or be

1248
00:45:20,560 --> 00:45:22,480
you are the oh you are managing them

1249
00:45:22,480 --> 00:45:24,000
yourself but make sure that these are

1250
00:45:24,000 --> 00:45:25,760
few things which you are taking care

1251
00:45:25,760 --> 00:45:27,280
when you are deploying

1252
00:45:27,280 --> 00:45:30,079
using kubernetes your next

1253
00:45:30,079 --> 00:45:32,400
application

1254
00:45:32,400 --> 00:45:35,200
cool so let's go to the next one now we

1255
00:45:35,200 --> 00:45:37,760
talk about the diy part wherein what are

1256
00:45:37,760 --> 00:45:40,079
the some popular tools or the vendors

1257
00:45:40,079 --> 00:45:42,079
who are working on this container based

1258
00:45:42,079 --> 00:45:43,760
solutions when we talk about just from a

1259
00:45:43,760 --> 00:45:46,400
security perspective so

1260
00:45:46,400 --> 00:45:48,800
there are many like

1261
00:45:48,800 --> 00:45:50,720
in the last year itself like the

1262
00:45:50,720 --> 00:45:52,640
container security

1263
00:45:52,640 --> 00:45:55,200
has contained security solution that

1264
00:45:55,200 --> 00:45:57,200
organization can rely have grown from

1265
00:45:57,200 --> 00:45:58,880
like both capabilities and

1266
00:45:58,880 --> 00:46:00,880
sophistications like

1267
00:46:00,880 --> 00:46:02,160
multi-fold

1268
00:46:02,160 --> 00:46:04,480
like regardless of what level of depth

1269
00:46:04,480 --> 00:46:06,000
of maturity

1270
00:46:06,000 --> 00:46:08,000
anyone has attained any organization has

1271
00:46:08,000 --> 00:46:10,240
attacked cloud security or like

1272
00:46:10,240 --> 00:46:12,400
container security specifically are

1273
00:46:12,400 --> 00:46:14,400
something which are more accessible than

1274
00:46:14,400 --> 00:46:15,359
ever

1275
00:46:15,359 --> 00:46:18,160
container security solutions

1276
00:46:18,160 --> 00:46:20,240
which any organization will be required

1277
00:46:20,240 --> 00:46:22,640
to adopt there are many solutions like

1278
00:46:22,640 --> 00:46:24,000
as you can see from the slide itself

1279
00:46:24,000 --> 00:46:25,359
there are many

1280
00:46:25,359 --> 00:46:27,920
players out in the market right now but

1281
00:46:27,920 --> 00:46:29,920
what we are looking is the couple of

1282
00:46:29,920 --> 00:46:31,040
them so

1283
00:46:31,040 --> 00:46:33,680
in the next slide i just talked about

1284
00:46:33,680 --> 00:46:35,200
what are the key areas which you should

1285
00:46:35,200 --> 00:46:37,440
talk and what are the key players so

1286
00:46:37,440 --> 00:46:39,520
from from an area of perspective i'll

1287
00:46:39,520 --> 00:46:41,119
say that

1288
00:46:41,119 --> 00:46:43,280
from a container security like container

1289
00:46:43,280 --> 00:46:45,760
monitoring container scanning and

1290
00:46:45,760 --> 00:46:47,599
container firewalls

1291
00:46:47,599 --> 00:46:49,680
these are the three major areas which

1292
00:46:49,680 --> 00:46:52,800
are very fro from very high light from a

1293
00:46:52,800 --> 00:46:54,640
market perspective which every of these

1294
00:46:54,640 --> 00:46:57,040
vendors are targeting so

1295
00:46:57,040 --> 00:46:58,560
like the ability to monitor your

1296
00:46:58,560 --> 00:47:00,880
registry for vulnerabilities like the

1297
00:47:00,880 --> 00:47:02,480
same thing we are doing availability

1298
00:47:02,480 --> 00:47:04,800
assessment for container monitoring for

1299
00:47:04,800 --> 00:47:08,160
any cyber security or i.t related things

1300
00:47:08,160 --> 00:47:10,720
and making sure that we time stamp any

1301
00:47:10,720 --> 00:47:11,920
events which are occurring in the

1302
00:47:11,920 --> 00:47:13,680
containerized environment that's like

1303
00:47:13,680 --> 00:47:16,000
container monitoring from a container

1304
00:47:16,000 --> 00:47:17,760
scanning perspective like scanning all

1305
00:47:17,760 --> 00:47:19,839
the libraries and the container images

1306
00:47:19,839 --> 00:47:21,920
for any one liberty so doing a basic

1307
00:47:21,920 --> 00:47:23,760
vulnerability assessment

1308
00:47:23,760 --> 00:47:26,240
of the container images using the scans

1309
00:47:26,240 --> 00:47:27,920
that is like another tools which you

1310
00:47:27,920 --> 00:47:30,800
should have like press my aqua have it

1311
00:47:30,800 --> 00:47:33,440
container firewalls are something like

1312
00:47:33,440 --> 00:47:35,119
not from like uh

1313
00:47:35,119 --> 00:47:36,559
traditional

1314
00:47:36,559 --> 00:47:38,720
firewalls but like a container firewall

1315
00:47:38,720 --> 00:47:40,240
is something which will inspect and

1316
00:47:40,240 --> 00:47:42,720
protect all the traffic entering

1317
00:47:42,720 --> 00:47:45,040
and into your existing container as well

1318
00:47:45,040 --> 00:47:47,440
as like moving outside from the external

1319
00:47:47,440 --> 00:47:49,599
network or your legacy application so

1320
00:47:49,599 --> 00:47:51,520
most container firewall will run as a

1321
00:47:51,520 --> 00:47:53,680
sidecar so that they can enable that

1322
00:47:53,680 --> 00:47:55,599
network security to

1323
00:47:55,599 --> 00:47:58,400
that to your to other environments which

1324
00:47:58,400 --> 00:48:00,559
they are running on apart from that you

1325
00:48:00,559 --> 00:48:02,720
should have like some there are other

1326
00:48:02,720 --> 00:48:04,160
tools which

1327
00:48:04,160 --> 00:48:06,160
what they do is they do a configuration

1328
00:48:06,160 --> 00:48:08,559
assessment against the best compliance

1329
00:48:08,559 --> 00:48:12,480
or configurations like cis or nist so

1330
00:48:12,480 --> 00:48:14,640
these kind of compliance scans or the

1331
00:48:14,640 --> 00:48:17,359
policy scans are also done by a lot of

1332
00:48:17,359 --> 00:48:18,960
tools which are very important from a

1333
00:48:18,960 --> 00:48:20,400
compliance perspective

1334
00:48:20,400 --> 00:48:22,880
so tools which you see on the slides

1335
00:48:22,880 --> 00:48:24,960
they do support all these kind of

1336
00:48:24,960 --> 00:48:26,720
different areas which we talked about

1337
00:48:26,720 --> 00:48:28,960
from a container secure perspective and

1338
00:48:28,960 --> 00:48:30,880
these are just few which i am which i

1339
00:48:30,880 --> 00:48:33,119
know of definitely there will be many

1340
00:48:33,119 --> 00:48:34,480
and

1341
00:48:34,480 --> 00:48:36,400
what you can do is you can start

1342
00:48:36,400 --> 00:48:38,480
exploring these like if you have never

1343
00:48:38,480 --> 00:48:40,319
heard about this you can start exploring

1344
00:48:40,319 --> 00:48:42,960
these to see which is best suited for

1345
00:48:42,960 --> 00:48:45,119
your organization for your application

1346
00:48:45,119 --> 00:48:47,920
for me i am quite comfortable with a few

1347
00:48:47,920 --> 00:48:48,800
of them

1348
00:48:48,800 --> 00:48:50,880
so just make sure that

1349
00:48:50,880 --> 00:48:52,400
you know about these tools when we are

1350
00:48:52,400 --> 00:48:54,480
talking about the container security of

1351
00:48:54,480 --> 00:48:57,839
the kubernetes security

1352
00:48:58,079 --> 00:49:01,280
okay so before i end the session i just

1353
00:49:01,280 --> 00:49:03,440
will want to say that kubernetes and

1354
00:49:03,440 --> 00:49:06,160
containers are like everywhere with

1355
00:49:06,160 --> 00:49:08,800
with their rising popularity security

1356
00:49:08,800 --> 00:49:11,119
should be a primary concern and not an

1357
00:49:11,119 --> 00:49:13,359
afterthought as i keep on repeating you

1358
00:49:13,359 --> 00:49:15,280
should not

1359
00:49:15,280 --> 00:49:17,359
deploy the applications and then see

1360
00:49:17,359 --> 00:49:19,839
okay now we should see the security that

1361
00:49:19,839 --> 00:49:22,000
will definitely that hasn't worked with

1362
00:49:22,000 --> 00:49:24,000
tesla they got breached there it hasn't

1363
00:49:24,000 --> 00:49:25,920
worked with any other organization which

1364
00:49:25,920 --> 00:49:28,880
has used kubernetes or containers before

1365
00:49:28,880 --> 00:49:32,000
so make sure that you don't take

1366
00:49:32,000 --> 00:49:35,119
that step you learn from the failures

1367
00:49:35,119 --> 00:49:37,200
and make sure that you think about the

1368
00:49:37,200 --> 00:49:39,280
security during the deployment during

1369
00:49:39,280 --> 00:49:42,160
the design phase itself not after the

1370
00:49:42,160 --> 00:49:45,119
deployment so that would be my final

1371
00:49:45,119 --> 00:49:46,880
food for thought before i end this

1372
00:49:46,880 --> 00:49:48,079
session

1373
00:49:48,079 --> 00:49:51,359
so that's all like for this session

1374
00:49:51,359 --> 00:49:53,359
uh thank you so much for attending this

1375
00:49:53,359 --> 00:49:56,319
talk i hope this is a bit informative

1376
00:49:56,319 --> 00:49:59,599
for you if there are some areas which uh

1377
00:49:59,599 --> 00:50:02,160
you still like to know about it i have

1378
00:50:02,160 --> 00:50:03,920
shared my socials here you can reach out

1379
00:50:03,920 --> 00:50:05,359
to me make

1380
00:50:05,359 --> 00:50:07,760
i'll be happy to help you guys

1381
00:50:07,760 --> 00:50:10,000
now it's time for the q a if you have

1382
00:50:10,000 --> 00:50:11,839
any q question and answer feel free to

1383
00:50:11,839 --> 00:50:14,559
share with me and if you

1384
00:50:14,559 --> 00:50:17,280
are a bit shy or you are

1385
00:50:17,280 --> 00:50:19,760
hearing it later after the session is

1386
00:50:19,760 --> 00:50:22,079
over or the conference is over if you

1387
00:50:22,079 --> 00:50:24,160
are hearing it later if you want to

1388
00:50:24,160 --> 00:50:26,800
reach out for any queries my socials are

1389
00:50:26,800 --> 00:50:29,040
here so just feel free to ping me i'll

1390
00:50:29,040 --> 00:50:32,000
be happy to help in whichever way i can

1391
00:50:32,000 --> 00:50:33,440
thank you so much guys it would have

1392
00:50:33,440 --> 00:50:36,160
been much better if we would have been

1393
00:50:36,160 --> 00:50:39,359
there in person but i'm sure we we all

1394
00:50:39,359 --> 00:50:41,760
are embracing this new form of

1395
00:50:41,760 --> 00:50:44,480
digital transformations and this little

1396
00:50:44,480 --> 00:50:47,520
sharing of the information so i'm happy

1397
00:50:47,520 --> 00:50:49,359
day ahead there are new interesting

1398
00:50:49,359 --> 00:50:51,760
talks coming up so i wish you all the

1399
00:50:51,760 --> 00:50:54,319
best and if you need more details or

1400
00:50:54,319 --> 00:50:56,160
anything from the session feel free to

1401
00:50:56,160 --> 00:50:59,960
bring me thank you

