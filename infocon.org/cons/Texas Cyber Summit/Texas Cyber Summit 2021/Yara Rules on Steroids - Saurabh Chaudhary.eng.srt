1
00:00:03,360 --> 00:00:06,319
hello everyone

2
00:00:06,399 --> 00:00:09,120
welcome to our talk on yara rules on

3
00:00:09,120 --> 00:00:10,559
steroid

4
00:00:10,559 --> 00:00:13,040
where myself saurabh chaudhary and my

5
00:00:13,040 --> 00:00:15,920
friend here laksh dube are going to talk

6
00:00:15,920 --> 00:00:19,520
about advanced utilization of yara rules

7
00:00:19,520 --> 00:00:20,240
and

8
00:00:20,240 --> 00:00:21,840
how can we make

9
00:00:21,840 --> 00:00:24,960
better rules for advanced and long term

10
00:00:24,960 --> 00:00:27,599
detections

11
00:00:28,640 --> 00:00:30,640
my name is saurabh chaudhary and i'm a

12
00:00:30,640 --> 00:00:32,640
cyber threat researcher i have

13
00:00:32,640 --> 00:00:35,040
experience and expertise with threat

14
00:00:35,040 --> 00:00:38,719
entail malware and reverse engineering

15
00:00:38,719 --> 00:00:41,440
i have experience working in the banking

16
00:00:41,440 --> 00:00:43,360
and financial domain

17
00:00:43,360 --> 00:00:46,079
i have spoken and trained people

18
00:00:46,079 --> 00:00:48,879
at multiple international conferences

19
00:00:48,879 --> 00:00:50,559
and training

20
00:00:50,559 --> 00:00:52,399
you can find me on twitter with the

21
00:00:52,399 --> 00:00:55,360
handle 4w4r44

22
00:00:55,360 --> 00:00:57,680
and if you find any interesting malware

23
00:00:57,680 --> 00:01:01,840
samples please do hit me up on twitter

24
00:01:03,440 --> 00:01:06,159
so here i'm going to talk about what is

25
00:01:06,159 --> 00:01:07,360
yara

26
00:01:07,360 --> 00:01:09,119
how can we make it

27
00:01:09,119 --> 00:01:12,560
what is string based and code based rule

28
00:01:12,560 --> 00:01:15,920
i'll show you what's better and why

29
00:01:15,920 --> 00:01:18,479
and then my friend laksh

30
00:01:18,479 --> 00:01:21,280
here will take you towards a deeper dive

31
00:01:21,280 --> 00:01:24,000
into yara where he will show you

32
00:01:24,000 --> 00:01:26,240
a demo on creating error rules from a

33
00:01:26,240 --> 00:01:28,080
live malware sample

34
00:01:28,080 --> 00:01:31,040
and he will also talk about automatic

35
00:01:31,040 --> 00:01:33,520
yara creation and life cycle of yara

36
00:01:33,520 --> 00:01:35,840
rules and other important facts around

37
00:01:35,840 --> 00:01:38,840
it

38
00:01:41,360 --> 00:01:44,720
so these days malware comes in

39
00:01:44,720 --> 00:01:46,159
a lot of forms

40
00:01:46,159 --> 00:01:48,320
so

41
00:01:48,320 --> 00:01:50,640
we see a lot of sophistication and

42
00:01:50,640 --> 00:01:52,840
complexity in

43
00:01:52,840 --> 00:01:55,439
malwares these days malwares are

44
00:01:55,439 --> 00:01:58,320
becoming complex and visible tricky and

45
00:01:58,320 --> 00:02:02,240
sophisticated day by day soon

46
00:02:02,479 --> 00:02:05,840
how can we track them down

47
00:02:06,000 --> 00:02:07,680
it comes in different forms so how can

48
00:02:07,680 --> 00:02:10,000
we track them down your answer would be

49
00:02:10,000 --> 00:02:11,360
yeah

50
00:02:11,360 --> 00:02:13,840
so with here rules

51
00:02:13,840 --> 00:02:16,319
you can understand

52
00:02:16,319 --> 00:02:20,480
and scan these different types of files

53
00:02:20,480 --> 00:02:23,840
up to the bite level

54
00:02:23,840 --> 00:02:27,360
so yara is your answer

55
00:02:28,720 --> 00:02:32,640
now what is yara so yara is a tool which

56
00:02:32,640 --> 00:02:34,000
is aimed

57
00:02:34,000 --> 00:02:36,080
at helping malware researchers to

58
00:02:36,080 --> 00:02:39,519
identify and classify malware symbols

59
00:02:39,519 --> 00:02:42,720
with yara you can create descriptions of

60
00:02:42,720 --> 00:02:45,280
malware families or whatever you want to

61
00:02:45,280 --> 00:02:46,400
describe

62
00:02:46,400 --> 00:02:50,000
based on the textual or binary pattern

63
00:02:50,000 --> 00:02:53,920
each descriptions or you can call it

64
00:02:53,920 --> 00:02:56,959
each rule consists of a set of strings

65
00:02:56,959 --> 00:02:59,200
and a boolean expressions

66
00:02:59,200 --> 00:03:01,760
and a conditions which determine its

67
00:03:01,760 --> 00:03:03,120
logic

68
00:03:03,120 --> 00:03:06,400
era was created by mr victor

69
00:03:06,400 --> 00:03:09,360
and alvarez who works for virus tutu so

70
00:03:09,360 --> 00:03:12,159
it's a open source product

71
00:03:12,159 --> 00:03:14,239
it's an open source project and you can

72
00:03:14,239 --> 00:03:16,720
go on github and

73
00:03:16,720 --> 00:03:19,599
start using it

74
00:03:19,599 --> 00:03:21,280
so

75
00:03:21,280 --> 00:03:24,640
with yara you can identify and classify

76
00:03:24,640 --> 00:03:25,680
like

77
00:03:25,680 --> 00:03:28,480
almost anything and from anything i mean

78
00:03:28,480 --> 00:03:31,280
like you can put a

79
00:03:31,280 --> 00:03:33,519
put up a string based search or paste

80
00:03:33,519 --> 00:03:37,440
pin or scan for anything else

81
00:03:40,239 --> 00:03:43,760
so what can we do with the error

82
00:03:43,840 --> 00:03:44,560
so

83
00:03:44,560 --> 00:03:45,680
yara

84
00:03:45,680 --> 00:03:47,680
comes with immense power and

85
00:03:47,680 --> 00:03:49,440
capabilities

86
00:03:49,440 --> 00:03:52,000
you can identify and classify files and

87
00:03:52,000 --> 00:03:54,560
malwares you can find new malware

88
00:03:54,560 --> 00:03:56,799
samples with the help of europe you can

89
00:03:56,799 --> 00:04:01,040
track some ept groups with your you can

90
00:04:01,040 --> 00:04:03,840
even scan the network you can scan the

91
00:04:03,840 --> 00:04:07,920
memory file you can scan data streams

92
00:04:07,920 --> 00:04:11,120
you can even filter network traffic

93
00:04:11,120 --> 00:04:13,280
you can help speeding up incident

94
00:04:13,280 --> 00:04:14,400
response

95
00:04:14,400 --> 00:04:17,040
you can build your own anti-malware

96
00:04:17,040 --> 00:04:19,359
product

97
00:04:19,759 --> 00:04:22,880
yara was being helpful to catch big apt

98
00:04:22,880 --> 00:04:25,680
groups like equations sterlographs

99
00:04:25,680 --> 00:04:27,680
flames etc

100
00:04:27,680 --> 00:04:30,240
now let me show you how error rule looks

101
00:04:30,240 --> 00:04:32,400
like

102
00:04:33,440 --> 00:04:36,479
so this is what a yara rule looks like

103
00:04:36,479 --> 00:04:39,440
so the yara uses are like rules name of

104
00:04:39,440 --> 00:04:42,560
the rules the file name and the

105
00:04:42,560 --> 00:04:44,320
directory to be scanned or the file to

106
00:04:44,320 --> 00:04:45,680
be scanned

107
00:04:45,680 --> 00:04:46,720
or

108
00:04:46,720 --> 00:04:50,160
you can scan it against a process id

109
00:04:50,160 --> 00:04:52,560
as well

110
00:04:52,639 --> 00:04:53,840
so here

111
00:04:53,840 --> 00:04:57,120
i'm scanning it against yara

112
00:04:57,120 --> 00:05:00,080
the name of the year rule

113
00:05:00,080 --> 00:05:02,720
and the directory which i am scanning it

114
00:05:02,720 --> 00:05:07,120
against and we got two matches up here

115
00:05:08,639 --> 00:05:11,600
i'll

116
00:05:11,600 --> 00:05:13,680
show you in case you have never seen a

117
00:05:13,680 --> 00:05:15,280
yara rule

118
00:05:15,280 --> 00:05:18,800
this is what ayara rule looks like

119
00:05:18,800 --> 00:05:21,039
so

120
00:05:21,039 --> 00:05:22,960
this rule

121
00:05:22,960 --> 00:05:25,039
the rule identifier the name of the rule

122
00:05:25,039 --> 00:05:27,199
which is in case besides budapest

123
00:05:27,199 --> 00:05:28,560
underscore

124
00:05:28,560 --> 00:05:33,280
the metadata metadata is necessary

125
00:05:34,960 --> 00:05:37,600
so that wherever your rule goes everyone

126
00:05:37,600 --> 00:05:39,199
would be

127
00:05:39,199 --> 00:05:42,880
knowing that what this rule is made for

128
00:05:42,880 --> 00:05:44,479
and it will

129
00:05:44,479 --> 00:05:46,639
keep a track of things

130
00:05:46,639 --> 00:05:48,160
and the strings

131
00:05:48,160 --> 00:05:50,160
so i'm searching it against these three

132
00:05:50,160 --> 00:05:53,360
strings besides online and budapest

133
00:05:53,360 --> 00:05:55,759
and the condition is if all of the

134
00:05:55,759 --> 00:05:56,800
strings

135
00:05:56,800 --> 00:05:58,800
this dollar sign is a string identifier

136
00:05:58,800 --> 00:06:00,319
up here you can see

137
00:06:00,319 --> 00:06:03,120
and your rules are case sensitive

138
00:06:03,120 --> 00:06:07,199
so using this no case it will assure

139
00:06:07,199 --> 00:06:10,240
that that if it is in lower case or

140
00:06:10,240 --> 00:06:12,319
uppercase

141
00:06:12,319 --> 00:06:14,560
it will give us a match and the

142
00:06:14,560 --> 00:06:16,560
condition is all of these strings should

143
00:06:16,560 --> 00:06:17,520
meet

144
00:06:17,520 --> 00:06:21,719
so let me show you

145
00:06:24,240 --> 00:06:25,039
so

146
00:06:25,039 --> 00:06:28,599
this is our rule

147
00:06:37,520 --> 00:06:38,720
so

148
00:06:38,720 --> 00:06:40,800
this rule it will be detecting for these

149
00:06:40,800 --> 00:06:42,240
three strings

150
00:06:42,240 --> 00:06:45,600
now let's run this rule

151
00:06:45,600 --> 00:06:48,080
the condition is if any of these three

152
00:06:48,080 --> 00:06:49,919
strings meet

153
00:06:49,919 --> 00:06:51,759
it's not necessary that

154
00:06:51,759 --> 00:06:54,160
all of these things these three string

155
00:06:54,160 --> 00:06:56,400
should meet you we can also write them

156
00:06:56,400 --> 00:06:57,680
as

157
00:06:57,680 --> 00:07:03,080
all of stars that would also work

158
00:07:07,280 --> 00:07:10,400
let's run this string

159
00:07:10,400 --> 00:07:13,359
let's run this yellow

160
00:07:13,759 --> 00:07:15,120
yara

161
00:07:15,120 --> 00:07:18,639
and name of the rule

162
00:07:18,800 --> 00:07:21,520
and direct to be scanned here in this

163
00:07:21,520 --> 00:07:22,960
case

164
00:07:22,960 --> 00:07:26,280
i'm scanning

165
00:07:35,280 --> 00:07:36,240
here

166
00:07:36,240 --> 00:07:39,039
in europe and

167
00:07:39,039 --> 00:07:41,360
presentations

168
00:07:41,360 --> 00:07:43,440
so i have scanned this presentation

169
00:07:43,440 --> 00:07:44,479
directory

170
00:07:44,479 --> 00:07:47,440
so this has been scanned everywhere

171
00:07:47,440 --> 00:07:49,199
right let's see

172
00:07:49,199 --> 00:07:53,680
what have we got even with using minus r

173
00:07:53,680 --> 00:07:55,759
we can recursively scan

174
00:07:55,759 --> 00:07:57,280
that as well

175
00:07:57,280 --> 00:07:59,120
so

176
00:07:59,120 --> 00:08:01,440
scanning this

177
00:08:01,440 --> 00:08:04,080
has given

178
00:08:06,479 --> 00:08:08,720
this is the name of the rule and it has

179
00:08:08,720 --> 00:08:10,879
found a file which has matched against

180
00:08:10,879 --> 00:08:14,080
your rule it's a txt file

181
00:08:14,080 --> 00:08:17,039
let's see what do we have

182
00:08:23,840 --> 00:08:25,360
cool

183
00:08:25,360 --> 00:08:27,360
so we have

184
00:08:27,360 --> 00:08:31,360
these three strings in this dft file

185
00:08:31,360 --> 00:08:34,399
that's why it matched

186
00:08:34,399 --> 00:08:36,399
so that's that was a

187
00:08:36,399 --> 00:08:39,440
small example that how it

188
00:08:39,440 --> 00:08:40,640
works

189
00:08:40,640 --> 00:08:42,958
on strings

190
00:08:42,958 --> 00:08:45,200
we will talk about

191
00:08:45,200 --> 00:08:46,160
it

192
00:08:46,160 --> 00:08:49,719
in further slides

193
00:08:54,800 --> 00:08:57,920
coming back to the slides

194
00:08:58,320 --> 00:08:59,519
so

195
00:08:59,519 --> 00:09:01,040
generally

196
00:09:01,040 --> 00:09:04,959
yara rules are made up of

197
00:09:05,040 --> 00:09:06,839
strings bytes and

198
00:09:06,839 --> 00:09:10,000
regex and metadata which

199
00:09:10,000 --> 00:09:11,600
is used to keep

200
00:09:11,600 --> 00:09:14,000
track on things so you can

201
00:09:14,000 --> 00:09:15,360
it

202
00:09:15,360 --> 00:09:19,760
the rule understands it like the comment

203
00:09:20,640 --> 00:09:22,640
but most of the rule which you will find

204
00:09:22,640 --> 00:09:26,240
out there they are based on strings

205
00:09:26,240 --> 00:09:29,920
and regex is really

206
00:09:30,160 --> 00:09:33,760
not recommended because it

207
00:09:33,760 --> 00:09:36,640
provides a lot of false positive

208
00:09:36,640 --> 00:09:39,440
it regex regular expression produce a

209
00:09:39,440 --> 00:09:41,200
lot of false positives so it's not

210
00:09:41,200 --> 00:09:42,720
considered good

211
00:09:42,720 --> 00:09:45,440
so always go for a mixture of

212
00:09:45,440 --> 00:09:46,480
byte

213
00:09:46,480 --> 00:09:49,720
and string

214
00:09:51,920 --> 00:09:54,480
so each role in error starts with the

215
00:09:54,480 --> 00:09:57,040
keyword rule followed by a rule

216
00:09:57,040 --> 00:09:58,320
identifier

217
00:09:58,320 --> 00:10:00,000
like

218
00:10:00,000 --> 00:10:01,839
in our case

219
00:10:01,839 --> 00:10:03,519
this is the rule

220
00:10:03,519 --> 00:10:06,480
the rule identifier

221
00:10:08,000 --> 00:10:10,399
identifier must follow the same logical

222
00:10:10,399 --> 00:10:14,079
conventions of the c programming

223
00:10:15,920 --> 00:10:19,440
language after that comes the metadata

224
00:10:19,440 --> 00:10:20,399
string

225
00:10:20,399 --> 00:10:22,079
and the conditions

226
00:10:22,079 --> 00:10:25,839
so this is the metadata

227
00:10:26,320 --> 00:10:28,079
strings

228
00:10:28,079 --> 00:10:29,200
and the

229
00:10:29,200 --> 00:10:32,200
condition

230
00:10:33,760 --> 00:10:35,360
so

231
00:10:35,360 --> 00:10:38,000
we can use it as a condition like what i

232
00:10:38,000 --> 00:10:39,600
showed you

233
00:10:39,600 --> 00:10:41,920
we can write as

234
00:10:41,920 --> 00:10:44,320
these identifiers

235
00:10:44,320 --> 00:10:47,600
any of the stars or we can

236
00:10:47,600 --> 00:10:49,040
if it if we are searching it for

237
00:10:49,040 --> 00:10:51,839
executable entry we can provide the

238
00:10:51,839 --> 00:10:54,640
magic header of the executable depending

239
00:10:54,640 --> 00:10:57,279
on if it is a p e or it is an elf it

240
00:10:57,279 --> 00:11:00,160
varies we can even give the file size

241
00:11:00,160 --> 00:11:01,279
like

242
00:11:01,279 --> 00:11:04,079
search for any of these strings and the

243
00:11:04,079 --> 00:11:06,959
file size is less than

244
00:11:06,959 --> 00:11:09,440
this much of kb's or

245
00:11:09,440 --> 00:11:11,600
whatever or

246
00:11:11,600 --> 00:11:12,959
we can

247
00:11:12,959 --> 00:11:15,120
write it any of the strings or all of

248
00:11:15,120 --> 00:11:16,399
these

249
00:11:16,399 --> 00:11:17,200
or

250
00:11:17,200 --> 00:11:20,240
entry points there are a lot of things

251
00:11:20,240 --> 00:11:23,279
a lot of item files

252
00:11:23,760 --> 00:11:24,959
so

253
00:11:24,959 --> 00:11:25,839
rule

254
00:11:25,839 --> 00:11:28,079
the rule name metadata strings under

255
00:11:28,079 --> 00:11:30,560
condition

256
00:11:31,760 --> 00:11:33,519
so why

257
00:11:33,519 --> 00:11:36,240
code base dr rules and why we would be

258
00:11:36,240 --> 00:11:39,920
talking about code based error rules

259
00:11:39,920 --> 00:11:42,800
and before that uh

260
00:11:42,800 --> 00:11:46,399
let me tell you that the string

261
00:11:46,399 --> 00:11:49,760
definition section can be omitted if the

262
00:11:49,760 --> 00:11:52,399
rule doesn't rely on the string it's one

263
00:11:52,399 --> 00:11:55,120
important thing

264
00:11:55,200 --> 00:11:57,760
and each string

265
00:11:57,760 --> 00:12:00,560
has an identifier consisting of a dollar

266
00:12:00,560 --> 00:12:04,160
character which you can see here

267
00:12:05,040 --> 00:12:07,040
strings can be defined in text or

268
00:12:07,040 --> 00:12:10,720
hexadecimal form and conditions section

269
00:12:10,720 --> 00:12:12,160
is always required

270
00:12:12,160 --> 00:12:15,279
this is necessary

271
00:12:15,279 --> 00:12:18,560
so conditions are nothing

272
00:12:18,800 --> 00:12:22,240
more than a boolean expressions as those

273
00:12:22,240 --> 00:12:24,320
that can be found in all programming

274
00:12:24,320 --> 00:12:26,720
languages so the condition based on the

275
00:12:26,720 --> 00:12:32,519
rule set tells the rule that what to do

276
00:12:38,399 --> 00:12:39,440
now

277
00:12:39,440 --> 00:12:41,360
why are we talking about code-based

278
00:12:41,360 --> 00:12:43,680
order rules

279
00:12:43,680 --> 00:12:47,519
so rules should be written in such a way

280
00:12:47,519 --> 00:12:51,279
that it is not only limited

281
00:12:51,279 --> 00:12:54,079
to detect only a specific sample

282
00:12:54,079 --> 00:12:56,399
rules that match to only a specific

283
00:12:56,399 --> 00:12:58,880
sample are not much better than a hash

284
00:12:58,880 --> 00:13:01,200
value

285
00:13:04,480 --> 00:13:07,279
so code-based error rules

286
00:13:07,279 --> 00:13:09,760
why code based arrows so code based

287
00:13:09,760 --> 00:13:11,600
error rules

288
00:13:11,600 --> 00:13:13,360
last

289
00:13:13,360 --> 00:13:16,959
for generations of the malwares

290
00:13:16,959 --> 00:13:20,079
at least a few generation of malware

291
00:13:20,079 --> 00:13:22,079
and you can track the different malwares

292
00:13:22,079 --> 00:13:24,639
from the same malware creators if you

293
00:13:24,639 --> 00:13:28,079
have used if they have

294
00:13:28,079 --> 00:13:30,639
used the

295
00:13:30,639 --> 00:13:32,480
code from the last malware during the

296
00:13:32,480 --> 00:13:35,440
development which generally they do

297
00:13:35,440 --> 00:13:37,519
they all work

298
00:13:37,519 --> 00:13:39,920
as a software development company as

299
00:13:39,920 --> 00:13:42,000
well where they use the functions and a

300
00:13:42,000 --> 00:13:44,160
lot of their codes as well

301
00:13:44,160 --> 00:13:47,839
so i'll show you in a demo that why

302
00:13:47,839 --> 00:13:50,079
these code based rules

303
00:13:50,079 --> 00:13:50,800
are

304
00:13:50,800 --> 00:13:53,599
everlasting

305
00:13:54,240 --> 00:13:56,720
at least

306
00:13:56,800 --> 00:13:59,199
so let's praise to the demo god that

307
00:13:59,199 --> 00:14:03,000
everything works fine

308
00:14:12,959 --> 00:14:15,680
so here i have two

309
00:14:15,680 --> 00:14:17,680
c plus plus rules

310
00:14:17,680 --> 00:14:19,199
c plus

311
00:14:19,199 --> 00:14:21,519
programs

312
00:14:21,519 --> 00:14:25,480
i'll show you both of them

313
00:14:32,000 --> 00:14:33,360
so one

314
00:14:33,360 --> 00:14:35,600
both of them prints hello

315
00:14:35,600 --> 00:14:36,480
right

316
00:14:36,480 --> 00:14:38,399
so if you comes from c plus plus

317
00:14:38,399 --> 00:14:40,320
background you must be knowing what i'm

318
00:14:40,320 --> 00:14:42,600
talking about otherwise i'll give you

319
00:14:42,600 --> 00:14:46,079
a nice explanation of this

320
00:14:46,079 --> 00:14:48,320
so what it is doing is they are printing

321
00:14:48,320 --> 00:14:49,839
just hello in the first program in the

322
00:14:49,839 --> 00:14:51,519
sample one

323
00:14:51,519 --> 00:14:53,279
they are just

324
00:14:53,279 --> 00:14:55,600
printing hello as a string and in the

325
00:14:55,600 --> 00:14:58,720
second program here on the right you can

326
00:14:58,720 --> 00:15:00,160
see

327
00:15:00,160 --> 00:15:04,959
i'm storing the value of h e l l o

328
00:15:04,959 --> 00:15:08,000
in different uh

329
00:15:08,160 --> 00:15:09,519
differently

330
00:15:09,519 --> 00:15:12,480
i'm showing those values differently

331
00:15:12,480 --> 00:15:15,279
and then i am adding those values to

332
00:15:15,279 --> 00:15:17,600
print the same thing those programs

333
00:15:17,600 --> 00:15:19,760
these two programs will generally do the

334
00:15:19,760 --> 00:15:21,920
same thing

335
00:15:21,920 --> 00:15:23,760
they will print hello

336
00:15:23,760 --> 00:15:27,240
and nothing else

337
00:15:27,279 --> 00:15:31,600
now let me compile these two programs

338
00:15:33,600 --> 00:15:36,399
so i'll be using

339
00:15:38,000 --> 00:15:40,800
gcc comply layer

340
00:15:40,800 --> 00:15:44,479
the name of the sample

341
00:15:44,560 --> 00:15:48,079
sample one and minus o

342
00:15:48,079 --> 00:15:53,160
and i'm gonna name it sample one only

343
00:15:56,480 --> 00:15:59,279
okay sorry

344
00:16:00,399 --> 00:16:03,040
i have to

345
00:16:05,279 --> 00:16:09,240
add the extension as well

346
00:16:10,320 --> 00:16:12,800
and i'm gonna name it sample

347
00:16:12,800 --> 00:16:14,000
one

348
00:16:14,000 --> 00:16:15,519
sample one

349
00:16:15,519 --> 00:16:18,320
cool you can your q and p's file press

350
00:16:18,320 --> 00:16:20,160
enter you can see the file

351
00:16:20,160 --> 00:16:22,000
compiled and coming up up here you can

352
00:16:22,000 --> 00:16:23,279
see that right

353
00:16:23,279 --> 00:16:25,360
let's see

354
00:16:25,360 --> 00:16:27,680
what this does

355
00:16:27,680 --> 00:16:29,279
sample one

356
00:16:29,279 --> 00:16:31,920
it only prints hello

357
00:16:31,920 --> 00:16:33,600
cool

358
00:16:33,600 --> 00:16:37,199
we will do the same with

359
00:16:37,199 --> 00:16:39,040
sample two as well

360
00:16:39,040 --> 00:16:41,680
we are going to compile them

361
00:16:41,680 --> 00:16:44,800
sample two dot cpp

362
00:16:44,800 --> 00:16:45,839
and

363
00:16:45,839 --> 00:16:47,519
we are going to name them

364
00:16:47,519 --> 00:16:51,160
sample two

365
00:16:52,720 --> 00:16:54,480
you can see these

366
00:16:54,480 --> 00:16:57,839
this has been created just now

367
00:16:58,000 --> 00:16:59,920
so

368
00:16:59,920 --> 00:17:02,240
let me show you what this sample does as

369
00:17:02,240 --> 00:17:05,240
well

370
00:17:06,000 --> 00:17:07,919
this also prints hello

371
00:17:07,919 --> 00:17:10,720
as you can see here

372
00:17:11,599 --> 00:17:13,760
cool

373
00:17:13,760 --> 00:17:16,640
so both of these programs

374
00:17:16,640 --> 00:17:19,520
prints only a string

375
00:17:19,520 --> 00:17:20,319
right

376
00:17:20,319 --> 00:17:22,559
so for example you can take if it is a

377
00:17:22,559 --> 00:17:24,240
malware and

378
00:17:24,240 --> 00:17:25,839
a cnc

379
00:17:25,839 --> 00:17:29,360
ip or a cnc domain has been coded

380
00:17:29,360 --> 00:17:33,039
in the malware like a string so it can

381
00:17:33,039 --> 00:17:34,160
be like

382
00:17:34,160 --> 00:17:36,400
it there are a number of possibilities

383
00:17:36,400 --> 00:17:38,080
but i'm showing you just two

384
00:17:38,080 --> 00:17:40,000
possibilities and i'll

385
00:17:40,000 --> 00:17:44,360
make a nice yara rule

386
00:17:46,799 --> 00:17:49,280
to run against this

387
00:17:49,280 --> 00:17:51,600
cheer

388
00:17:58,160 --> 00:18:01,280
okay so i'm gonna write a nice rule

389
00:18:01,280 --> 00:18:04,799
so the rule starts from the

390
00:18:04,799 --> 00:18:06,240
rule

391
00:18:06,240 --> 00:18:07,919
writing a rule

392
00:18:07,919 --> 00:18:10,160
and the name of the rule

393
00:18:10,160 --> 00:18:11,520
which i'm gonna

394
00:18:11,520 --> 00:18:15,280
name is as hello

395
00:18:15,280 --> 00:18:16,799
then

396
00:18:16,799 --> 00:18:19,280
presses

397
00:18:29,760 --> 00:18:30,960
meta

398
00:18:30,960 --> 00:18:33,360
data

399
00:18:35,120 --> 00:18:38,439
all right

400
00:18:43,280 --> 00:18:45,760
author

401
00:18:50,640 --> 00:18:53,200
all right

402
00:18:54,000 --> 00:18:57,000
description

403
00:18:58,720 --> 00:19:02,400
searches for hello

404
00:19:07,200 --> 00:19:10,200
and

405
00:19:10,320 --> 00:19:14,000
i'm going to write strings

406
00:19:18,720 --> 00:19:23,160
with the dollar identifier

407
00:19:24,080 --> 00:19:26,559
is here

408
00:19:32,480 --> 00:19:34,160
and we have to

409
00:19:34,160 --> 00:19:37,039
make it like this

410
00:19:37,520 --> 00:19:39,200
hello and

411
00:19:39,200 --> 00:19:41,840
so that it is not case sensitive i'll

412
00:19:41,840 --> 00:19:44,559
write no case

413
00:19:44,559 --> 00:19:47,760
and a condition

414
00:19:50,320 --> 00:19:53,840
so the condition is

415
00:19:58,080 --> 00:20:00,480
string

416
00:20:01,280 --> 00:20:03,200
should match the string

417
00:20:03,200 --> 00:20:04,320
right

418
00:20:04,320 --> 00:20:07,600
and i'm gonna save this

419
00:20:07,600 --> 00:20:10,559
so our yara rule is ready here

420
00:20:10,559 --> 00:20:13,919
hello hello dot yeah

421
00:20:13,919 --> 00:20:16,080
nice

422
00:20:16,080 --> 00:20:18,159
so

423
00:20:18,159 --> 00:20:21,840
let's see if it is working or not

424
00:20:23,280 --> 00:20:26,080
yeah hello

425
00:20:26,400 --> 00:20:28,640
and

426
00:20:30,080 --> 00:20:32,320
but first let me

427
00:20:32,320 --> 00:20:34,480
make a new folder named

428
00:20:34,480 --> 00:20:36,559
executable

429
00:20:36,559 --> 00:20:39,280
and i'm going to place these executables

430
00:20:39,280 --> 00:20:41,600
up here

431
00:20:42,000 --> 00:20:45,200
and this one as well

432
00:20:45,760 --> 00:20:47,600
so for your understanding let me show

433
00:20:47,600 --> 00:20:52,158
you these are elf based executables

434
00:20:59,200 --> 00:21:00,720
you can see

435
00:21:00,720 --> 00:21:03,600
file is 64-bit

436
00:21:03,600 --> 00:21:04,960
alf file

437
00:21:04,960 --> 00:21:08,720
the same goes with sample 2 as well

438
00:21:15,039 --> 00:21:15,760
so

439
00:21:15,760 --> 00:21:19,039
i'm going to test my arrow

440
00:21:25,760 --> 00:21:28,720
yeah hello dot

441
00:21:29,039 --> 00:21:31,840
yeah and uh i'm gonna scan the whole

442
00:21:31,840 --> 00:21:34,640
executable directory with that

443
00:21:34,640 --> 00:21:36,799
uh

444
00:21:39,440 --> 00:21:42,080
desktop

445
00:21:42,240 --> 00:21:45,840
a lot of directories i have made

446
00:21:53,760 --> 00:21:54,480
so

447
00:21:54,480 --> 00:21:59,320
what this is gonna do is this is gonna

448
00:21:59,600 --> 00:22:01,760
uh i think there's some problem with the

449
00:22:01,760 --> 00:22:05,799
arm let me see

450
00:22:16,480 --> 00:22:18,880
okay

451
00:22:22,080 --> 00:22:24,399
okay

452
00:22:24,799 --> 00:22:26,960
so

453
00:22:26,960 --> 00:22:30,520
this is the problem

454
00:22:49,520 --> 00:22:51,360
now

455
00:22:51,360 --> 00:22:55,399
it should work well

456
00:23:30,799 --> 00:23:33,918
looks like a

457
00:23:34,880 --> 00:23:37,840
string here

458
00:23:37,919 --> 00:23:39,600
will go

459
00:23:39,600 --> 00:23:42,240
like this

460
00:23:44,400 --> 00:23:46,159
and

461
00:23:46,159 --> 00:23:49,640
just grip

462
00:23:50,080 --> 00:23:52,720
water

463
00:23:52,799 --> 00:23:55,440
go here and this will go

464
00:23:55,440 --> 00:23:58,440
here

465
00:24:21,840 --> 00:24:23,279
okay cool

466
00:24:23,279 --> 00:24:25,039
so now this

467
00:24:25,039 --> 00:24:27,039
is running the problem was with i was

468
00:24:27,039 --> 00:24:32,679
using a colon instead of equals two

469
00:24:34,320 --> 00:24:38,000
so what happens here is

470
00:24:38,720 --> 00:24:41,520
let me show you

471
00:24:43,679 --> 00:24:47,440
so i have searched this error rule

472
00:24:47,440 --> 00:24:51,679
hello dot era against this directory

473
00:24:53,679 --> 00:24:55,760
the sample and executable and this

474
00:24:55,760 --> 00:24:58,000
directory contains

475
00:24:58,000 --> 00:25:00,640
two files

476
00:25:00,640 --> 00:25:02,880
right

477
00:25:09,679 --> 00:25:11,840
this directory contains two files let me

478
00:25:11,840 --> 00:25:12,840
show you

479
00:25:12,840 --> 00:25:16,240
presentations samples executables

480
00:25:16,240 --> 00:25:18,480
right

481
00:25:20,880 --> 00:25:23,039
so

482
00:25:23,600 --> 00:25:26,399
it will give you

483
00:25:27,360 --> 00:25:28,480
only

484
00:25:28,480 --> 00:25:30,799
it flags only one file against this rule

485
00:25:30,799 --> 00:25:33,200
but both of these files are printing

486
00:25:33,200 --> 00:25:36,240
hello right

487
00:25:40,559 --> 00:25:44,880
in the executable let's go to executable

488
00:25:44,880 --> 00:25:47,200
and

489
00:25:47,919 --> 00:25:50,240
let's

490
00:25:50,880 --> 00:25:54,080
let's see what this file does

491
00:25:54,080 --> 00:25:57,039
sample one it prints hello and

492
00:25:57,039 --> 00:25:59,120
the same goes with sample two both of

493
00:25:59,120 --> 00:26:03,678
them prints hello but only one file is

494
00:26:04,640 --> 00:26:06,400
flagged

495
00:26:06,400 --> 00:26:07,679
now

496
00:26:07,679 --> 00:26:11,840
i have written a code error rule

497
00:26:11,840 --> 00:26:14,799
here you can see that

498
00:26:18,159 --> 00:26:19,440
so here

499
00:26:19,440 --> 00:26:21,520
we are not using strings

500
00:26:21,520 --> 00:26:23,600
we are using

501
00:26:23,600 --> 00:26:25,039
bytes

502
00:26:25,039 --> 00:26:26,400
so

503
00:26:26,400 --> 00:26:27,919
bytes these bytes are based on the

504
00:26:27,919 --> 00:26:30,640
functions which this program is using

505
00:26:30,640 --> 00:26:33,679
and this elf is the magic header of the

506
00:26:33,679 --> 00:26:36,400
elf file which differs for if it is a

507
00:26:36,400 --> 00:26:39,840
window if it is a

508
00:26:40,240 --> 00:26:42,159
linux based binary or if it is a windows

509
00:26:42,159 --> 00:26:44,240
based binary if it is a pe file or if it

510
00:26:44,240 --> 00:26:46,080
is an elf file

511
00:26:46,080 --> 00:26:48,640
and if it suffice both of them

512
00:26:48,640 --> 00:26:49,919
then

513
00:26:49,919 --> 00:26:52,159
it's going to flag now let's run this

514
00:26:52,159 --> 00:26:54,880
rule against our

515
00:26:54,880 --> 00:26:57,200
sample

516
00:27:05,520 --> 00:27:08,400
let me do it like this

517
00:27:08,400 --> 00:27:11,039
should be good to view

518
00:27:11,039 --> 00:27:13,760
expand this

519
00:27:14,400 --> 00:27:16,960
hello white dot here

520
00:27:16,960 --> 00:27:19,279
if you will directly click it it's going

521
00:27:19,279 --> 00:27:21,840
to show that wrong number of arguments

522
00:27:21,840 --> 00:27:24,000
you can do a lot of things with your let

523
00:27:24,000 --> 00:27:26,480
me show you

524
00:27:29,600 --> 00:27:31,600
these are the options you can combine

525
00:27:31,600 --> 00:27:33,120
yellow with

526
00:27:33,120 --> 00:27:35,760
you can use recursive scans

527
00:27:35,760 --> 00:27:37,679
you can

528
00:27:37,679 --> 00:27:42,240
use fast scans with minus f you can use

529
00:27:42,240 --> 00:27:43,679
a lot of things you can increase the

530
00:27:43,679 --> 00:27:46,000
number of threads and everything

531
00:27:46,000 --> 00:27:49,159
so let's

532
00:27:49,279 --> 00:27:52,720
see about our rule

533
00:27:56,720 --> 00:28:00,240
and we are going to scan it against

534
00:28:00,240 --> 00:28:03,559
this directory

535
00:28:06,640 --> 00:28:08,559
let me scan it against the whole yara

536
00:28:08,559 --> 00:28:11,039
directory

537
00:28:14,080 --> 00:28:16,880
okay so this only scans in the era if

538
00:28:16,880 --> 00:28:18,880
i'll add a recursive

539
00:28:18,880 --> 00:28:21,360
and it'll scan

540
00:28:21,360 --> 00:28:23,840
into

541
00:28:24,640 --> 00:28:27,200
the inside of these subfolders as well

542
00:28:27,200 --> 00:28:29,360
see

543
00:28:29,679 --> 00:28:33,120
i have recursively scanned so

544
00:28:33,120 --> 00:28:34,720
if it is anything

545
00:28:34,720 --> 00:28:36,000
inside

546
00:28:36,000 --> 00:28:38,880
the error folder directory

547
00:28:38,880 --> 00:28:41,440
a lot of things

548
00:28:41,440 --> 00:28:43,279
so

549
00:28:43,279 --> 00:28:44,880
this rule has triggered that's how it

550
00:28:44,880 --> 00:28:46,080
shows

551
00:28:46,080 --> 00:28:48,559
this rule has triggered and which

552
00:28:48,559 --> 00:28:50,960
file it has triggered for is

553
00:28:50,960 --> 00:28:53,120
sample one and sample two

554
00:28:53,120 --> 00:28:54,640
so now

555
00:28:54,640 --> 00:28:56,960
you have seen why

556
00:28:56,960 --> 00:28:58,720
it is necessary

557
00:28:58,720 --> 00:29:02,799
that we use a code-based error rule

558
00:29:06,159 --> 00:29:09,440
coming back to the slides

559
00:29:09,520 --> 00:29:12,159
now my friend laksh will take you

560
00:29:12,159 --> 00:29:14,960
towards demo and some

561
00:29:14,960 --> 00:29:17,520
other practical implementations

562
00:29:17,520 --> 00:29:20,720
handing over to laksh

563
00:29:23,600 --> 00:29:26,640
so thank you sarah let's begin my name

564
00:29:26,640 --> 00:29:28,799
is laksh and i'm from india

565
00:29:28,799 --> 00:29:31,520
i work for holland as a trade researcher

566
00:29:31,520 --> 00:29:34,159
apart from this i have keen interest in

567
00:29:34,159 --> 00:29:36,640
digital forensics dark net monitoring

568
00:29:36,640 --> 00:29:39,440
and malware analysis

569
00:29:39,440 --> 00:29:42,320
over there is my twitter handle

570
00:29:42,320 --> 00:29:44,480
if you have any queries regarding all

571
00:29:44,480 --> 00:29:48,640
these technologies feel free to reach me

572
00:29:50,240 --> 00:29:52,559
so thank you so much and now we will

573
00:29:52,559 --> 00:29:54,399
look into

574
00:29:54,399 --> 00:29:56,320
malwares and try to create our

575
00:29:56,320 --> 00:29:59,200
signatures using malicious binaries

576
00:29:59,200 --> 00:30:00,000
so

577
00:30:00,000 --> 00:30:03,279
over here i have few malware samples

578
00:30:03,279 --> 00:30:05,520
and now we will look into them and try

579
00:30:05,520 --> 00:30:08,480
to create our militia yara's rules using

580
00:30:08,480 --> 00:30:09,520
it

581
00:30:09,520 --> 00:30:13,760
so let's start and so over here we have

582
00:30:13,760 --> 00:30:16,799
six militias and non-malicious banners

583
00:30:16,799 --> 00:30:18,240
we don't know

584
00:30:18,240 --> 00:30:20,240
uh so we will try to create our

585
00:30:20,240 --> 00:30:23,679
signatures and identify like

586
00:30:23,679 --> 00:30:26,720
out of the six how many binaries are

587
00:30:26,720 --> 00:30:28,640
malicious

588
00:30:28,640 --> 00:30:31,600
so let's begin so first thing first i

589
00:30:31,600 --> 00:30:33,679
will suggest is

590
00:30:33,679 --> 00:30:36,559
the best practice is to use

591
00:30:36,559 --> 00:30:39,919
all the six encode five encodings

592
00:30:39,919 --> 00:30:41,919
so they give

593
00:30:41,919 --> 00:30:44,880
positive results and now we will

594
00:30:44,880 --> 00:30:47,279
see in few minutes like the kind of

595
00:30:47,279 --> 00:30:50,480
results which we are talking about so

596
00:30:50,480 --> 00:30:54,880
let's start and try to extract

597
00:30:54,880 --> 00:30:57,360
strings

598
00:31:00,799 --> 00:31:02,840
so we will start with

599
00:31:02,840 --> 00:31:05,760
the 7-bit encoding

600
00:31:05,760 --> 00:31:08,399
which is

601
00:31:09,679 --> 00:31:11,919
and

602
00:31:12,640 --> 00:31:13,600
okay

603
00:31:13,600 --> 00:31:14,960
so

604
00:31:14,960 --> 00:31:16,640
let's

605
00:31:16,640 --> 00:31:19,120
look for

606
00:31:19,120 --> 00:31:22,000
so over here we will find various

607
00:31:22,000 --> 00:31:23,760
dlls and

608
00:31:23,760 --> 00:31:26,640
this this this seems to be legitimate

609
00:31:26,640 --> 00:31:27,679
but

610
00:31:27,679 --> 00:31:30,399
just below a few lines we found another

611
00:31:30,399 --> 00:31:33,600
dealer which seems like which is it is

612
00:31:33,600 --> 00:31:34,399
not

613
00:31:34,399 --> 00:31:36,240
normally seen in

614
00:31:36,240 --> 00:31:37,760
windows

615
00:31:37,760 --> 00:31:40,000
environment so like it can be suspicious

616
00:31:40,000 --> 00:31:42,159
so they will include it

617
00:31:42,159 --> 00:31:47,799
but let's first begin our own so rule

618
00:31:57,919 --> 00:31:59,200
okay

619
00:31:59,200 --> 00:32:01,279
so

620
00:32:01,279 --> 00:32:02,640
first we will

621
00:32:02,640 --> 00:32:04,799
add

622
00:32:04,799 --> 00:32:07,279
meta

623
00:32:07,679 --> 00:32:09,279
and

624
00:32:09,279 --> 00:32:11,760
over here we will

625
00:32:11,760 --> 00:32:14,480
put some metadata like

626
00:32:14,480 --> 00:32:16,880
date

627
00:32:22,080 --> 00:32:23,360
okay so

628
00:32:23,360 --> 00:32:25,279
the string should be in the double

629
00:32:25,279 --> 00:32:26,799
inverted comma

630
00:32:26,799 --> 00:32:27,760
so

631
00:32:27,760 --> 00:32:29,600
this is the thing which we have to

632
00:32:29,600 --> 00:32:30,559
remember

633
00:32:30,559 --> 00:32:32,240
if

634
00:32:32,240 --> 00:32:34,720
it isn't single or anything else like

635
00:32:34,720 --> 00:32:38,320
the rule will reflect an error

636
00:32:38,399 --> 00:32:41,399
okay

637
00:32:42,000 --> 00:32:43,200
okay so

638
00:32:43,200 --> 00:32:45,519
apart from this we can add various other

639
00:32:45,519 --> 00:32:47,919
details like

640
00:32:47,919 --> 00:32:50,240
the name of an author

641
00:32:50,240 --> 00:32:51,039
uh

642
00:32:51,039 --> 00:32:53,440
and d5 and

643
00:32:53,440 --> 00:32:55,279
various other things so like for now we

644
00:32:55,279 --> 00:32:57,360
will just read this too

645
00:32:57,360 --> 00:32:58,880
and

646
00:32:58,880 --> 00:33:01,200
now let's begin with

647
00:33:01,200 --> 00:33:03,919
strings

648
00:33:05,760 --> 00:33:09,760
okay so that is drinks has to win dollar

649
00:33:09,760 --> 00:33:10,799
then

650
00:33:10,799 --> 00:33:12,720
name of our string

651
00:33:12,720 --> 00:33:14,559
and then the string will win double

652
00:33:14,559 --> 00:33:18,120
converted comma so like we will add our

653
00:33:18,120 --> 00:33:22,000
launcher.dll in this

654
00:33:23,679 --> 00:33:24,720
okay

655
00:33:24,720 --> 00:33:27,600
so it's

656
00:33:28,080 --> 00:33:30,879
over here

657
00:33:31,039 --> 00:33:32,399
okay

658
00:33:32,399 --> 00:33:34,399
the next string

659
00:33:34,399 --> 00:33:37,039
is two

660
00:33:37,600 --> 00:33:38,960
okay

661
00:33:38,960 --> 00:33:41,760
so let's move forward and the

662
00:33:41,760 --> 00:33:44,320
thing is we have to look into all these

663
00:33:44,320 --> 00:33:45,840
strings

664
00:33:45,840 --> 00:33:48,080
so we have to go through the whole

665
00:33:48,080 --> 00:33:50,559
listing so over here we got few api

666
00:33:50,559 --> 00:33:52,720
calls and we will not include the api

667
00:33:52,720 --> 00:33:56,080
calls because if we add them and

668
00:33:56,080 --> 00:33:58,000
because this is this

669
00:33:58,000 --> 00:33:59,120
calls

670
00:33:59,120 --> 00:34:00,480
possibly

671
00:34:00,480 --> 00:34:02,960
can present in the legitimate binaries

672
00:34:02,960 --> 00:34:06,399
as well so if we add them the rule will

673
00:34:06,399 --> 00:34:08,560
give various false positives so we have

674
00:34:08,560 --> 00:34:11,119
to ignore and look for very unique

675
00:34:11,119 --> 00:34:13,119
strings which

676
00:34:13,119 --> 00:34:14,800
are

677
00:34:14,800 --> 00:34:17,040
less chances which can which will be

678
00:34:17,040 --> 00:34:18,480
present in the

679
00:34:18,480 --> 00:34:21,199
common binaries or the non-malicious

680
00:34:21,199 --> 00:34:23,839
binaries

681
00:34:26,560 --> 00:34:29,040
so we have to go through all the strings

682
00:34:29,040 --> 00:34:30,159
like

683
00:34:30,159 --> 00:34:32,879
we can see these are just random values

684
00:34:32,879 --> 00:34:36,159
so it will not be good if we add them in

685
00:34:36,159 --> 00:34:38,960
our signature

686
00:34:42,399 --> 00:34:46,839
okay so this is also a legitimate binary

687
00:34:46,839 --> 00:34:52,520
okay again few api calls

688
00:35:13,119 --> 00:35:14,560
so this is what

689
00:35:14,560 --> 00:35:17,359
we have to do and creating a url we have

690
00:35:17,359 --> 00:35:20,560
to look into strings again and again

691
00:35:20,560 --> 00:35:21,520
so

692
00:35:21,520 --> 00:35:25,040
till now we just found one

693
00:35:25,040 --> 00:35:28,040
okay

694
00:35:38,000 --> 00:35:41,599
okay so then again these are some

695
00:35:41,599 --> 00:35:44,800
common names so we will include we will

696
00:35:44,800 --> 00:35:46,880
exclude them

697
00:35:46,880 --> 00:35:50,560
and look for something else

698
00:35:54,640 --> 00:35:56,960
okay

699
00:35:56,960 --> 00:36:00,160
so over here we got few

700
00:36:00,160 --> 00:36:03,440
okay so this is some sort of directory

701
00:36:03,440 --> 00:36:05,119
path

702
00:36:05,119 --> 00:36:06,400
okay because

703
00:36:06,400 --> 00:36:08,880
this is possibly our name of a folder

704
00:36:08,880 --> 00:36:10,800
but uh

705
00:36:10,800 --> 00:36:12,880
just below it this is something

706
00:36:12,880 --> 00:36:16,000
different so we will not include it

707
00:36:16,000 --> 00:36:18,960
okay so

708
00:36:19,040 --> 00:36:20,800
so in yara

709
00:36:20,800 --> 00:36:22,800
we have to

710
00:36:22,800 --> 00:36:25,800
use

711
00:36:26,160 --> 00:36:28,480
double slash

712
00:36:28,480 --> 00:36:31,200
okay so

713
00:36:31,599 --> 00:36:33,200
again

714
00:36:33,200 --> 00:36:34,240
next

715
00:36:34,240 --> 00:36:36,640
string

716
00:36:36,640 --> 00:36:39,520
again this is something different which

717
00:36:39,520 --> 00:36:40,560
is not

718
00:36:40,560 --> 00:36:43,599
commonly present so we will include this

719
00:36:43,599 --> 00:36:45,680
binary as well

720
00:36:45,680 --> 00:36:48,240
like sorry the name

721
00:36:48,240 --> 00:36:51,240
okay

722
00:37:02,320 --> 00:37:03,520
url

723
00:37:03,520 --> 00:37:07,119
which is a random one so we have to add

724
00:37:07,119 --> 00:37:09,440
it as well

725
00:37:09,440 --> 00:37:12,640
so the more strings you get the

726
00:37:12,640 --> 00:37:15,200
more efficient role you will have

727
00:37:15,200 --> 00:37:17,920
so we have to look for

728
00:37:17,920 --> 00:37:21,560
few more strings

729
00:37:55,040 --> 00:37:57,839
okay over here we found the name of our

730
00:37:57,839 --> 00:37:59,040
mutex

731
00:37:59,040 --> 00:38:02,160
so yeah we will add it as well

732
00:38:02,160 --> 00:38:05,040
and just below the same name which we

733
00:38:05,040 --> 00:38:08,400
found previously so we will excluded

734
00:38:08,400 --> 00:38:11,400
okay

735
00:38:19,520 --> 00:38:22,079
okay

736
00:38:22,480 --> 00:38:25,359
again we can add this

737
00:38:25,359 --> 00:38:28,598
as well

738
00:38:43,200 --> 00:38:45,839
and this one

739
00:38:45,839 --> 00:38:48,400
okay so i guess

740
00:38:48,400 --> 00:38:51,040
let's move after this we will move into

741
00:38:51,040 --> 00:38:53,359
some different encoding

742
00:38:53,359 --> 00:38:56,640
as well so we can find few other strings

743
00:38:56,640 --> 00:38:59,640
too

744
00:39:12,560 --> 00:39:15,839
okay i guess

745
00:39:18,320 --> 00:39:20,400
we can now look into some different

746
00:39:20,400 --> 00:39:22,400
encoding as well

747
00:39:22,400 --> 00:39:24,880
so let's move into

748
00:39:24,880 --> 00:39:26,880
it but encoding now

749
00:39:26,880 --> 00:39:29,839
okay

750
00:39:31,359 --> 00:39:32,800
yes

751
00:39:32,800 --> 00:39:36,480
and i guess this is

752
00:39:36,960 --> 00:39:39,280
okay this is awesome random

753
00:39:39,280 --> 00:39:40,960
characters

754
00:39:40,960 --> 00:39:43,280
okay we can

755
00:39:43,280 --> 00:39:46,000
move forward

756
00:39:46,000 --> 00:39:48,640
and now we will look into

757
00:39:48,640 --> 00:39:52,240
16 bit on okay

758
00:39:53,200 --> 00:39:54,839
okay so see over

759
00:39:54,839 --> 00:39:58,160
here you got an ip address

760
00:39:58,160 --> 00:40:01,440
this can be a ipo c2 server or something

761
00:40:01,440 --> 00:40:04,480
else so this is the reason i told

762
00:40:04,480 --> 00:40:07,119
previously like we have to

763
00:40:07,119 --> 00:40:09,440
look for

764
00:40:09,440 --> 00:40:12,560
s strings with different encodings

765
00:40:12,560 --> 00:40:13,920
so

766
00:40:13,920 --> 00:40:15,680
okay

767
00:40:15,680 --> 00:40:17,839
now

768
00:40:18,079 --> 00:40:21,560
one more

769
00:40:29,040 --> 00:40:34,359
okay so another ip address as well

770
00:40:49,520 --> 00:40:51,200
so

771
00:40:51,200 --> 00:40:53,520
okay so let's

772
00:40:53,520 --> 00:40:57,079
add this onto

773
00:41:13,359 --> 00:41:16,480
okay so i guess 10 strings are enough

774
00:41:16,480 --> 00:41:20,720
let's add a condition as well

775
00:41:20,720 --> 00:41:23,119
so condition can be in various form but

776
00:41:23,119 --> 00:41:25,680
for uh

777
00:41:27,119 --> 00:41:29,920
generalized way we will for now we will

778
00:41:29,920 --> 00:41:32,640
just add

779
00:41:32,800 --> 00:41:34,480
them so what

780
00:41:34,480 --> 00:41:36,960
what this rule will be doing is

781
00:41:36,960 --> 00:41:38,079
uh

782
00:41:38,079 --> 00:41:40,400
if

783
00:41:40,400 --> 00:41:42,720
okay let's just okay so what this

784
00:41:42,720 --> 00:41:44,880
condition will do if

785
00:41:44,880 --> 00:41:46,560
this

786
00:41:46,560 --> 00:41:49,839
rule finds any of us in any single

787
00:41:49,839 --> 00:41:50,800
string

788
00:41:50,800 --> 00:41:52,480
in any

789
00:41:52,480 --> 00:41:54,640
of the six binaries

790
00:41:54,640 --> 00:41:56,640
it will trigger

791
00:41:56,640 --> 00:41:58,720
okay so just

792
00:41:58,720 --> 00:42:02,160
let's save it and try to test

793
00:42:02,160 --> 00:42:04,079
this rule

794
00:42:04,079 --> 00:42:06,319
okay

795
00:42:10,640 --> 00:42:16,160
so every other rule have to be saved as

796
00:42:16,160 --> 00:42:20,640
name and so for now we will give it

797
00:42:21,200 --> 00:42:23,200
and grab dot

798
00:42:23,200 --> 00:42:24,319
er

799
00:42:24,319 --> 00:42:27,359
or complete name of yara

800
00:42:27,359 --> 00:42:28,720
okay so

801
00:42:28,720 --> 00:42:31,680
both will work fine but we have to give

802
00:42:31,680 --> 00:42:34,240
it a syntax okay

803
00:42:34,240 --> 00:42:36,160
so keep this in mind

804
00:42:36,160 --> 00:42:38,400
so our rule is over here

805
00:42:38,400 --> 00:42:40,960
now just

806
00:42:41,280 --> 00:42:42,839
let's see what it

807
00:42:42,839 --> 00:42:46,880
does like this

808
00:42:47,680 --> 00:42:49,920
okay

809
00:42:49,920 --> 00:42:53,520
so to execute a rule

810
00:42:53,520 --> 00:42:54,880
first we give

811
00:42:54,880 --> 00:42:57,839
ayara and

812
00:42:57,839 --> 00:43:01,119
the path of a rule so our rule resides

813
00:43:01,119 --> 00:43:02,800
in one

814
00:43:02,800 --> 00:43:04,240
one occurred

815
00:43:04,240 --> 00:43:06,640
and

816
00:43:07,200 --> 00:43:09,599
this is the name of this is the name of

817
00:43:09,599 --> 00:43:10,560
a rule

818
00:43:10,560 --> 00:43:12,720
and now we have to give a directory

819
00:43:12,720 --> 00:43:14,480
which we want to scan

820
00:43:14,480 --> 00:43:15,760
okay so

821
00:43:15,760 --> 00:43:18,960
just to be clear

822
00:43:20,079 --> 00:43:21,440
the yara

823
00:43:21,440 --> 00:43:24,960
and the path of a rule

824
00:43:25,760 --> 00:43:27,760
this is the path of a rule and the

825
00:43:27,760 --> 00:43:29,839
directory which you want to scan

826
00:43:29,839 --> 00:43:31,359
okay

827
00:43:31,359 --> 00:43:33,760
so okay so

828
00:43:33,760 --> 00:43:35,440
our rule work fine

829
00:43:35,440 --> 00:43:38,400
and possibly one two three four five six

830
00:43:38,400 --> 00:43:39,599
okay

831
00:43:39,599 --> 00:43:41,520
so this is our

832
00:43:41,520 --> 00:43:43,280
yara rule so

833
00:43:43,280 --> 00:43:45,440
all the strings are present so that was

834
00:43:45,440 --> 00:43:47,680
the reason it was triggered

835
00:43:47,680 --> 00:43:49,839
apart from this this six are the

836
00:43:49,839 --> 00:43:52,319
binaries

837
00:43:52,319 --> 00:43:55,359
uh yeah they are all binary so all the

838
00:43:55,359 --> 00:43:57,520
binaries belongs to

839
00:43:57,520 --> 00:44:00,560
wannacry ransomware family

840
00:44:00,560 --> 00:44:02,799
okay

841
00:44:03,040 --> 00:44:04,000
so

842
00:44:04,000 --> 00:44:05,200
this was

843
00:44:05,200 --> 00:44:07,200
for wannacry

844
00:44:07,200 --> 00:44:09,440
let's move into some

845
00:44:09,440 --> 00:44:11,280
this was basically a string based rule

846
00:44:11,280 --> 00:44:14,240
so now let's look up code base rule

847
00:44:14,240 --> 00:44:17,520
so over here we have four binaries

848
00:44:17,520 --> 00:44:20,960
and now we will look for uh

849
00:44:20,960 --> 00:44:22,880
out of this four

850
00:44:22,880 --> 00:44:24,079
which is

851
00:44:24,079 --> 00:44:25,599
the malicious one

852
00:44:25,599 --> 00:44:28,240
or which belongs to a specific major

853
00:44:28,240 --> 00:44:29,520
family

854
00:44:29,520 --> 00:44:31,920
something similar things which we will

855
00:44:31,920 --> 00:44:33,599
be looking

856
00:44:33,599 --> 00:44:35,920
so for this we will be creating a code

857
00:44:35,920 --> 00:44:37,119
base rule

858
00:44:37,119 --> 00:44:40,240
so let's move into our another virtual

859
00:44:40,240 --> 00:44:42,640
machine

860
00:44:43,599 --> 00:44:45,839
so over here what i have done is i have

861
00:44:45,839 --> 00:44:47,599
opened two

862
00:44:47,599 --> 00:44:49,760
malware

863
00:44:49,760 --> 00:44:52,240
i will just name it for

864
00:44:52,240 --> 00:44:53,040
you

865
00:44:53,040 --> 00:44:54,960
so these are the two binaries which are

866
00:44:54,960 --> 00:44:56,240
opened in a

867
00:44:56,240 --> 00:44:58,079
disassembler

868
00:44:58,079 --> 00:45:02,319
and see over here we i have just opened

869
00:45:02,319 --> 00:45:04,880
the place which we will be working on

870
00:45:04,880 --> 00:45:07,599
so see

871
00:45:08,160 --> 00:45:11,920
this section of the code and

872
00:45:11,920 --> 00:45:13,920
this section of the code

873
00:45:13,920 --> 00:45:16,720
we found few common strings like look

874
00:45:16,720 --> 00:45:20,480
over here like eight nine f two

875
00:45:20,480 --> 00:45:24,960
eight nine e a c one e a zero b

876
00:45:24,960 --> 00:45:27,760
so things are quite similar only over

877
00:45:27,760 --> 00:45:30,079
here so what we will be trying is we

878
00:45:30,079 --> 00:45:34,640
will try to create our rule

879
00:45:34,800 --> 00:45:37,280
and

880
00:45:38,720 --> 00:45:41,680
just a second i will open my

881
00:45:41,680 --> 00:45:44,680
notepad

882
00:45:48,880 --> 00:45:53,160
okay i have to look over here

883
00:46:03,760 --> 00:46:08,240
just a second i will open my notepad

884
00:46:10,400 --> 00:46:12,839
accessories

885
00:46:12,839 --> 00:46:15,920
okay yeah i got it

886
00:46:15,920 --> 00:46:18,720
so what we will be doing is we will try

887
00:46:18,720 --> 00:46:19,839
to

888
00:46:19,839 --> 00:46:22,480
knock down few strings so while creating

889
00:46:22,480 --> 00:46:24,720
a rule we can wildcard

890
00:46:24,720 --> 00:46:25,680
the

891
00:46:25,680 --> 00:46:28,960
things as well so to buy a card we will

892
00:46:28,960 --> 00:46:33,440
just use question mark okay

893
00:46:34,160 --> 00:46:36,640
so let's begin

894
00:46:36,640 --> 00:46:39,200
we will start with eight nine

895
00:46:39,200 --> 00:46:41,920
again see we have to wild welcome

896
00:46:41,920 --> 00:46:43,200
wildcard

897
00:46:43,200 --> 00:46:46,560
two characters over here f and two and e

898
00:46:46,560 --> 00:46:49,119
and a in the sec third

899
00:46:49,119 --> 00:46:51,440
uh next window so we will buy a card

900
00:46:51,440 --> 00:46:54,480
with two question mark again c1 is

901
00:46:54,480 --> 00:46:58,319
common so we will keep it as it is

902
00:46:58,319 --> 00:46:59,280
and

903
00:46:59,280 --> 00:47:02,280
e-a-e-a

904
00:47:04,000 --> 00:47:05,040
this is

905
00:47:05,040 --> 00:47:06,800
okay

906
00:47:06,800 --> 00:47:08,880
okay so what we will be doing over here

907
00:47:08,880 --> 00:47:12,000
is like this register values can be

908
00:47:12,000 --> 00:47:13,599
changed

909
00:47:13,599 --> 00:47:15,200
okay so

910
00:47:15,200 --> 00:47:17,599
we can weld cut it as well or we can

911
00:47:17,599 --> 00:47:19,359
keep it as same

912
00:47:19,359 --> 00:47:23,520
so for now like we will keep it same

913
00:47:23,839 --> 00:47:27,680
and again gop okay so like this is the

914
00:47:27,680 --> 00:47:30,400
fixed value so we can keep it same as

915
00:47:30,400 --> 00:47:31,839
well

916
00:47:31,839 --> 00:47:34,799
so zero

917
00:47:36,160 --> 00:47:39,160
b

918
00:47:39,200 --> 00:47:41,280
so what we are looking is we were we are

919
00:47:41,280 --> 00:47:44,079
working on this off code fields okay

920
00:47:44,079 --> 00:47:45,520
so

921
00:47:45,520 --> 00:47:47,280
next is

922
00:47:47,280 --> 00:47:50,760
zero f

923
00:47:54,720 --> 00:47:57,359
af

924
00:47:57,440 --> 00:48:00,079
and again see that things are changed

925
00:48:00,079 --> 00:48:01,200
over here

926
00:48:01,200 --> 00:48:05,520
so d1 and d7 okay so like we can

927
00:48:05,520 --> 00:48:07,839
by do this

928
00:48:07,839 --> 00:48:09,920
or we can wire card it

929
00:48:09,920 --> 00:48:11,200
completely

930
00:48:11,200 --> 00:48:13,200
support will work fine so for now we

931
00:48:13,200 --> 00:48:15,920
will just while card it completely

932
00:48:15,920 --> 00:48:18,160
because in this case is what happens

933
00:48:18,160 --> 00:48:21,040
basically as the compiler change or

934
00:48:21,040 --> 00:48:22,720
compiler gets changed

935
00:48:22,720 --> 00:48:25,760
or the register value get modified

936
00:48:25,760 --> 00:48:28,559
change so this

937
00:48:28,559 --> 00:48:30,480
sorry not register value the register

938
00:48:30,480 --> 00:48:32,480
get changed so

939
00:48:32,480 --> 00:48:35,280
this values of code field outputs will

940
00:48:35,280 --> 00:48:38,400
occur will also get changed so this is

941
00:48:38,400 --> 00:48:42,640
the reason why we are trying to wildcard

942
00:48:42,640 --> 00:48:43,760
and

943
00:48:43,760 --> 00:48:48,559
get some effective strings out of it

944
00:48:48,559 --> 00:48:51,119
and the next one is

945
00:48:51,119 --> 00:48:53,280
three nine

946
00:48:53,280 --> 00:48:56,319
okay three nine

947
00:48:56,640 --> 00:48:59,040
and again question mark

948
00:48:59,040 --> 00:49:03,839
seven two okay so like we got few values

949
00:49:03,839 --> 00:49:04,720
and

950
00:49:04,720 --> 00:49:07,119
the rest of the code is

951
00:49:07,119 --> 00:49:09,839
different so like okay we can

952
00:49:09,839 --> 00:49:12,000
work with this

953
00:49:12,000 --> 00:49:16,839
let's see if it gets copied

954
00:49:19,839 --> 00:49:23,680
okay so what we will do is we will

955
00:49:23,680 --> 00:49:27,119
create another rule

956
00:49:27,119 --> 00:49:30,720
just exit it i will create another file

957
00:49:30,720 --> 00:49:33,040
okay

958
00:49:33,599 --> 00:49:37,839
let me see okay it worked for us

959
00:49:37,839 --> 00:49:41,119
okay so again

960
00:49:42,839 --> 00:49:44,880
rule this

961
00:49:44,880 --> 00:49:46,880
will be the name of a rule

962
00:49:46,880 --> 00:49:50,839
and again the code

963
00:49:51,970 --> 00:49:55,020
[Music]

964
00:49:58,720 --> 00:50:01,720
okay

965
00:50:22,880 --> 00:50:25,880
see

966
00:50:27,040 --> 00:50:30,720
okay let's move into this

967
00:50:30,720 --> 00:50:33,359
strings

968
00:50:36,640 --> 00:50:39,599
okay so in that in this case we have

969
00:50:39,599 --> 00:50:42,319
completely different strings like it's a

970
00:50:42,319 --> 00:50:46,079
hexadecimal value so for hexadecimal

971
00:50:46,079 --> 00:50:48,079
values we will be

972
00:50:48,079 --> 00:50:50,400
using

973
00:50:51,839 --> 00:50:54,800
curly braces not the

974
00:50:54,800 --> 00:50:56,960
inverted commas okay and like double

975
00:50:56,960 --> 00:50:58,559
inverted commas

976
00:50:58,559 --> 00:51:02,000
okay so again

977
00:51:06,839 --> 00:51:10,160
condition and in this case we have one

978
00:51:10,160 --> 00:51:11,760
single string so

979
00:51:11,760 --> 00:51:14,240
we will just name it

980
00:51:14,240 --> 00:51:15,920
and

981
00:51:15,920 --> 00:51:19,119
i guess it is fine okay so let's save it

982
00:51:19,119 --> 00:51:20,640
and test

983
00:51:20,640 --> 00:51:23,040
how it works

984
00:51:23,040 --> 00:51:27,400
we have to save it over here

985
00:51:36,319 --> 00:51:38,720
this tortilla

986
00:51:38,720 --> 00:51:41,040
okay

987
00:51:41,839 --> 00:51:44,559
so let me open

988
00:51:44,559 --> 00:51:47,520
okay this will be fine

989
00:51:47,520 --> 00:51:50,920
again viara

990
00:51:57,119 --> 00:51:58,319
okay

991
00:51:58,319 --> 00:52:00,000
so let's see

992
00:52:00,000 --> 00:52:02,880
okay so it triggers for

993
00:52:02,880 --> 00:52:05,440
three binaries

994
00:52:05,440 --> 00:52:08,000
and the rule has excluded this fourth

995
00:52:08,000 --> 00:52:09,359
one

996
00:52:09,359 --> 00:52:11,440
so what is what what might be the

997
00:52:11,440 --> 00:52:13,440
reasons like

998
00:52:13,440 --> 00:52:16,400
this is the unique hexadecimal value

999
00:52:16,400 --> 00:52:20,160
which the which was for which is present

1000
00:52:20,160 --> 00:52:22,960
in this three

1001
00:52:22,960 --> 00:52:26,079
binaries so similarly we can create

1002
00:52:26,079 --> 00:52:27,520
rules for

1003
00:52:27,520 --> 00:52:30,400
all kind of binaries

1004
00:52:30,400 --> 00:52:33,040
militias non-militias and

1005
00:52:33,040 --> 00:52:35,119
we can even create this rules for

1006
00:52:35,119 --> 00:52:38,400
exploit and other tools like this i have

1007
00:52:38,400 --> 00:52:42,000
a pre-created tool and a rule for

1008
00:52:42,000 --> 00:52:43,119
me gets

1009
00:52:43,119 --> 00:52:45,839
so like this this this uh this were the

1010
00:52:45,839 --> 00:52:48,800
strings which were found

1011
00:52:48,800 --> 00:52:50,480
so

1012
00:52:50,480 --> 00:52:52,000
we can

1013
00:52:52,000 --> 00:52:54,880
use in both ways like the text base and

1014
00:52:54,880 --> 00:52:57,119
the code base okay so the rule works

1015
00:52:57,119 --> 00:53:00,640
fine so again this is the way to like

1016
00:53:00,640 --> 00:53:03,200
wildcard things india

1017
00:53:03,200 --> 00:53:04,160
like

1018
00:53:04,160 --> 00:53:07,599
any value over here which is present

1019
00:53:07,599 --> 00:53:11,040
which is ranged in between 0 to 3

1020
00:53:11,040 --> 00:53:12,960
it will trigger that

1021
00:53:12,960 --> 00:53:15,359
like if it is

1022
00:53:15,359 --> 00:53:18,800
2 it will work if it is 1 it will work

1023
00:53:18,800 --> 00:53:20,960
if it is 0 or 3 it will work for them as

1024
00:53:20,960 --> 00:53:23,040
well ok so this is

1025
00:53:23,040 --> 00:53:24,640
what a rule for

1026
00:53:24,640 --> 00:53:26,839
mimikets look

1027
00:53:26,839 --> 00:53:29,520
like okay so

1028
00:53:29,520 --> 00:53:32,640
let's move further

1029
00:53:37,040 --> 00:53:38,720
so

1030
00:53:38,720 --> 00:53:41,440
this is the reason why we

1031
00:53:41,440 --> 00:53:44,480
focus on code base rule or you can also

1032
00:53:44,480 --> 00:53:46,800
include a code based rule with few

1033
00:53:46,800 --> 00:53:49,680
strings okay so like this is

1034
00:53:49,680 --> 00:53:50,960
your call

1035
00:53:50,960 --> 00:53:53,440
and what direction you want to move

1036
00:53:53,440 --> 00:53:56,240
but we will suggest you you focus on

1037
00:53:56,240 --> 00:53:59,280
code base rule because they la

1038
00:53:59,280 --> 00:54:01,440
they are more effective on

1039
00:54:01,440 --> 00:54:03,599
in hunting and detecting by malicious

1040
00:54:03,599 --> 00:54:05,040
binaries

1041
00:54:05,040 --> 00:54:10,160
so by code visual this is the main

1042
00:54:10,160 --> 00:54:12,000
we want to focus on

1043
00:54:12,000 --> 00:54:14,400
so they are mostly effective

1044
00:54:14,400 --> 00:54:17,920
and they they last long because the

1045
00:54:17,920 --> 00:54:19,440
malware authors

1046
00:54:19,440 --> 00:54:22,000
don't usually modify their entire code

1047
00:54:22,000 --> 00:54:24,640
they try to use few portions like which

1048
00:54:24,640 --> 00:54:27,119
we which one which we saw

1049
00:54:27,119 --> 00:54:30,319
previously so they used uh reuse few

1050
00:54:30,319 --> 00:54:33,680
portions of the code from other binaries

1051
00:54:33,680 --> 00:54:37,040
so it becomes easy to detect them using

1052
00:54:37,040 --> 00:54:38,880
a code based rule

1053
00:54:38,880 --> 00:54:41,920
and one single rule work for all

1054
00:54:41,920 --> 00:54:44,480
multiple binaries

1055
00:54:44,480 --> 00:54:46,720
and we can even track various malwares

1056
00:54:46,720 --> 00:54:49,680
and malware families using this rule but

1057
00:54:49,680 --> 00:54:51,680
this is not possible for a string base

1058
00:54:51,680 --> 00:54:53,680
because strings can be changed

1059
00:54:53,680 --> 00:54:56,160
and other protection mechanism makes it

1060
00:54:56,160 --> 00:54:57,680
difficult for

1061
00:54:57,680 --> 00:55:01,040
identifying these strings

1062
00:55:01,040 --> 00:55:02,079
so

1063
00:55:02,079 --> 00:55:04,559
things to care while creating a code

1064
00:55:04,559 --> 00:55:07,680
based word okay so compilation flags

1065
00:55:07,680 --> 00:55:09,920
different compilers

1066
00:55:09,920 --> 00:55:13,599
work differently and they change their

1067
00:55:13,599 --> 00:55:16,720
instruction set and

1068
00:55:16,720 --> 00:55:17,599
like

1069
00:55:17,599 --> 00:55:20,640
register will you get different if we

1070
00:55:20,640 --> 00:55:24,079
change different compilers so

1071
00:55:24,079 --> 00:55:27,119
this will generate different top codes

1072
00:55:27,119 --> 00:55:28,799
and

1073
00:55:28,799 --> 00:55:32,640
don't we don't i use

1074
00:55:32,720 --> 00:55:35,680
file card in vast amount because it will

1075
00:55:35,680 --> 00:55:37,599
generate

1076
00:55:37,599 --> 00:55:39,839
errors or not exactly that it will

1077
00:55:39,839 --> 00:55:41,440
create a load on a machine and your

1078
00:55:41,440 --> 00:55:43,359
machine will get

1079
00:55:43,359 --> 00:55:46,160
hanged or freezed so this is the reason

1080
00:55:46,160 --> 00:55:47,359
we don't use

1081
00:55:47,359 --> 00:55:50,160
large amount of file card

1082
00:55:50,160 --> 00:55:51,440
use them

1083
00:55:51,440 --> 00:55:55,599
effectively that's what we suggest

1084
00:55:56,559 --> 00:55:57,280
so

1085
00:55:57,280 --> 00:55:59,599
testing yara rules so what i will

1086
00:55:59,599 --> 00:56:01,839
suggest is

1087
00:56:01,839 --> 00:56:04,240
create a big amount of sample lab and

1088
00:56:04,240 --> 00:56:07,520
laboratory so like just let me show you

1089
00:56:07,520 --> 00:56:11,440
i have one with me

1090
00:56:14,480 --> 00:56:17,839
okay so

1091
00:56:23,440 --> 00:56:26,160
like over here i have created a big

1092
00:56:26,160 --> 00:56:27,680
around few

1093
00:56:27,680 --> 00:56:29,440
samples

1094
00:56:29,440 --> 00:56:31,040
okay so

1095
00:56:31,040 --> 00:56:33,119
you can just create a

1096
00:56:33,119 --> 00:56:36,160
more big amount of collection and

1097
00:56:36,160 --> 00:56:39,599
just use them to test your rules so this

1098
00:56:39,599 --> 00:56:42,799
will give you good understanding of like

1099
00:56:42,799 --> 00:56:45,280
how to create an effective rule which

1100
00:56:45,280 --> 00:56:48,160
reduces false positive as well

1101
00:56:48,160 --> 00:56:51,040
okay so we have to test the rule on

1102
00:56:51,040 --> 00:56:53,200
malicious and non-malicious binaries as

1103
00:56:53,200 --> 00:56:55,839
well so keep this in mind to create a

1104
00:56:55,839 --> 00:56:58,799
big repository of both kind of binaries

1105
00:56:58,799 --> 00:57:00,480
and then

1106
00:57:00,480 --> 00:57:04,480
str rule for effectiveness

1107
00:57:04,640 --> 00:57:06,079
and

1108
00:57:06,079 --> 00:57:08,799
this is a good project from kaspersky

1109
00:57:08,799 --> 00:57:10,640
like the clara project

1110
00:57:10,640 --> 00:57:12,640
and this helps

1111
00:57:12,640 --> 00:57:14,079
and to

1112
00:57:14,079 --> 00:57:16,799
test this kind of signatures

1113
00:57:16,799 --> 00:57:20,720
and it is quite effective it just can

1114
00:57:20,720 --> 00:57:22,480
large amount of file

1115
00:57:22,480 --> 00:57:24,480
in just very less time so

1116
00:57:24,480 --> 00:57:26,400
we will suggest go

1117
00:57:26,400 --> 00:57:29,119
you definitely visit this and

1118
00:57:29,119 --> 00:57:33,760
test this project over your system

1119
00:57:34,160 --> 00:57:35,599
so the

1120
00:57:35,599 --> 00:57:38,400
life cycle of creating a rule so first

1121
00:57:38,400 --> 00:57:42,480
start the analysis of a malicious binary

1122
00:57:42,480 --> 00:57:44,480
and then you have to look for eye

1123
00:57:44,480 --> 00:57:46,000
catching strings like

1124
00:57:46,000 --> 00:57:47,839
identify unique fee

1125
00:57:47,839 --> 00:57:50,960
strings which can not be present in the

1126
00:57:50,960 --> 00:57:54,079
general binary which is windows binary

1127
00:57:54,079 --> 00:57:57,359
okay so like uh try to detect few ip

1128
00:57:57,359 --> 00:57:58,880
addresses

1129
00:57:58,880 --> 00:58:02,400
and the file lamps

1130
00:58:02,400 --> 00:58:03,280
or

1131
00:58:03,280 --> 00:58:06,640
name of a mutex sold like which we seen

1132
00:58:06,640 --> 00:58:09,359
which we saw previously so we have to

1133
00:58:09,359 --> 00:58:11,920
detect unique strings and then we have

1134
00:58:11,920 --> 00:58:14,559
to create a rule that thoroughly tested

1135
00:58:14,559 --> 00:58:16,559
on the clean and

1136
00:58:16,559 --> 00:58:18,240
malicious binaries

1137
00:58:18,240 --> 00:58:19,920
then you can just deploy it in your

1138
00:58:19,920 --> 00:58:21,760
production and monitor for further

1139
00:58:21,760 --> 00:58:24,480
changes or upgrades okay

1140
00:58:24,480 --> 00:58:26,000
so keep

1141
00:58:26,000 --> 00:58:27,760
one thing in mind like you have to test

1142
00:58:27,760 --> 00:58:30,640
your route because testing gives you

1143
00:58:30,640 --> 00:58:33,280
the idea like we have to what kind of

1144
00:58:33,280 --> 00:58:35,280
false positive which you can reduce or

1145
00:58:35,280 --> 00:58:36,480
white listing

1146
00:58:36,480 --> 00:58:38,960
and similar things so so like test your

1147
00:58:38,960 --> 00:58:43,599
rules on clean and malicious binaries

1148
00:58:44,319 --> 00:58:46,319
so you can also

1149
00:58:46,319 --> 00:58:48,000
check your rule

1150
00:58:48,000 --> 00:58:48,880
on

1151
00:58:48,880 --> 00:58:51,440
various online platforms like hybrid

1152
00:58:51,440 --> 00:58:53,920
analysis small pd and virus local this

1153
00:58:53,920 --> 00:58:56,319
support like you can just upload your

1154
00:58:56,319 --> 00:58:57,599
rule

1155
00:58:57,599 --> 00:58:58,400
and

1156
00:58:58,400 --> 00:59:00,960
just compile it over there and then it

1157
00:59:00,960 --> 00:59:02,480
will work

1158
00:59:02,480 --> 00:59:06,079
and show you the results

1159
00:59:07,040 --> 00:59:08,000
so

1160
00:59:08,000 --> 00:59:09,760
there are another way

1161
00:59:09,760 --> 00:59:10,799
like

1162
00:59:10,799 --> 00:59:12,079
you can use

1163
00:59:12,079 --> 00:59:13,760
automatic tools

1164
00:59:13,760 --> 00:59:17,359
and scripts to create your

1165
00:59:19,760 --> 00:59:22,240
is quite effective well uh it comes

1166
00:59:22,240 --> 00:59:25,520
directly from frozen broth who have the

1167
00:59:25,520 --> 00:59:28,480
who have worked a lot in this

1168
00:59:28,480 --> 00:59:29,839
yara field

1169
00:59:29,839 --> 00:59:32,400
okay and apart from that mkr is also

1170
00:59:32,400 --> 00:59:34,640
quite a good project you can just use

1171
00:59:34,640 --> 00:59:35,920
this

1172
00:59:35,920 --> 00:59:37,119
three

1173
00:59:37,119 --> 00:59:39,359
according to your requirement and create

1174
00:59:39,359 --> 00:59:40,559
automated

1175
00:59:40,559 --> 00:59:43,280
signatures

1176
00:59:44,240 --> 00:59:47,040
so where can you

1177
00:59:47,040 --> 00:59:49,680
use this uh what can you do with this

1178
00:59:49,680 --> 00:59:52,480
yara rules okay so like you can find

1179
00:59:52,480 --> 00:59:54,559
vast amount of malwares

1180
00:59:54,559 --> 00:59:56,319
which are actively present in the

1181
00:59:56,319 --> 00:59:59,359
environment you can hunt for apts or

1182
00:59:59,359 --> 01:00:01,599
advanced persistent rate

1183
01:00:01,599 --> 01:00:03,839
zero disks and

1184
01:00:03,839 --> 01:00:05,520
they are quite good in monitoring as

1185
01:00:05,520 --> 01:00:07,680
well like you can not only monitor

1186
01:00:07,680 --> 01:00:11,359
binaries you can also monitor

1187
01:00:12,240 --> 01:00:15,280
network traffic and

1188
01:00:15,280 --> 01:00:17,200
you can look for malicious activities in

1189
01:00:17,200 --> 01:00:19,280
that in those traffic

1190
01:00:19,280 --> 01:00:21,920
network traffic and apart from that you

1191
01:00:21,920 --> 01:00:25,359
can also make your own antivirus so

1192
01:00:25,359 --> 01:00:28,079
like it's quite a good thing you can

1193
01:00:28,079 --> 01:00:29,119
just

1194
01:00:29,119 --> 01:00:30,880
work according to your requirement you

1195
01:00:30,880 --> 01:00:32,000
can it

1196
01:00:32,000 --> 01:00:34,079
also work effective and

1197
01:00:34,079 --> 01:00:36,559
forensic and incident response like you

1198
01:00:36,559 --> 01:00:40,160
can just detect uh you just consider a

1199
01:00:40,160 --> 01:00:42,000
scenario like you got a

1200
01:00:42,000 --> 01:00:44,480
memory image and you have to identify

1201
01:00:44,480 --> 01:00:46,400
malicious process like you can create a

1202
01:00:46,400 --> 01:00:50,000
set of your uh yara rules and just test

1203
01:00:50,000 --> 01:00:52,480
run it over the that memory image and

1204
01:00:52,480 --> 01:00:55,040
like you can you will get a

1205
01:00:55,040 --> 01:00:57,359
trigger for some time sort of alert like

1206
01:00:57,359 --> 01:01:00,079
if it is some malicious or not okay so

1207
01:01:00,079 --> 01:01:02,799
this is this this comes very handy like

1208
01:01:02,799 --> 01:01:04,960
uh yara has come very handy in this kind

1209
01:01:04,960 --> 01:01:08,000
of scenarios

1210
01:01:08,319 --> 01:01:09,119
so

1211
01:01:09,119 --> 01:01:10,480
just to conclude

1212
01:01:10,480 --> 01:01:12,000
like

1213
01:01:12,000 --> 01:01:14,799
code base rule needs the good

1214
01:01:14,799 --> 01:01:16,400
understanding of

1215
01:01:16,400 --> 01:01:18,720
uh debuggers and disassemblers like you

1216
01:01:18,720 --> 01:01:20,079
have to go through

1217
01:01:20,079 --> 01:01:22,480
opcode fields and try to understand the

1218
01:01:22,480 --> 01:01:25,520
code so like here in this situation you

1219
01:01:25,520 --> 01:01:27,520
need a good understanding of debugger

1220
01:01:27,520 --> 01:01:29,599
and disassembler

1221
01:01:29,599 --> 01:01:31,280
and

1222
01:01:31,280 --> 01:01:34,160
the strings might not be there okay so

1223
01:01:34,160 --> 01:01:35,200
like

1224
01:01:35,200 --> 01:01:37,359
as seen like strings

1225
01:01:37,359 --> 01:01:39,839
are not those that effective as compared

1226
01:01:39,839 --> 01:01:41,520
to code based

1227
01:01:41,520 --> 01:01:42,640
tools

1228
01:01:42,640 --> 01:01:43,520
and

1229
01:01:43,520 --> 01:01:46,559
strings can be changed or obfuscated

1230
01:01:46,559 --> 01:01:49,440
code can become diffic

1231
01:01:49,440 --> 01:01:51,040
will give different kind of strings so

1232
01:01:51,040 --> 01:01:53,760
like this comes

1233
01:01:53,760 --> 01:01:55,839
here comes the code base rule so you

1234
01:01:55,839 --> 01:01:57,920
have to go through the code understand

1235
01:01:57,920 --> 01:02:00,400
the code debugger use debuggers and

1236
01:02:00,400 --> 01:02:03,039
disassemblers to understand it and

1237
01:02:03,039 --> 01:02:06,400
identify unique part or the used part

1238
01:02:06,400 --> 01:02:09,359
and use them in your code okay and the

1239
01:02:09,359 --> 01:02:11,760
code base rule will last long again i am

1240
01:02:11,760 --> 01:02:13,520
telling you that so

1241
01:02:13,520 --> 01:02:16,079
it will give you long hits like uh

1242
01:02:16,079 --> 01:02:18,839
you can detect various malware families

1243
01:02:18,839 --> 01:02:22,079
and we take vast amount of all malwares

1244
01:02:22,079 --> 01:02:25,839
which belongs to similar families so

1245
01:02:25,920 --> 01:02:27,200
that's

1246
01:02:27,200 --> 01:02:29,760
what i want let's end

1247
01:02:29,760 --> 01:02:32,160
thank you

1248
01:02:33,359 --> 01:02:36,720
and another few just uh

1249
01:02:36,720 --> 01:02:39,440
difference from our side like you can

1250
01:02:39,440 --> 01:02:42,640
use these things to kick start your

1251
01:02:42,640 --> 01:02:45,680
development of yara rules

1252
01:02:45,680 --> 01:02:48,079
thank you thank you so much

1253
01:02:48,079 --> 01:02:48,880
and

1254
01:02:48,880 --> 01:02:51,359
we will it would be thankful like if you

1255
01:02:51,359 --> 01:02:53,760
get any questions and feedback from usa

1256
01:02:53,760 --> 01:02:57,720
thank you thank you so much

