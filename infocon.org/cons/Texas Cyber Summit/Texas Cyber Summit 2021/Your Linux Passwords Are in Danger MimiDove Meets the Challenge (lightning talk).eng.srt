1
00:00:01,360 --> 00:00:03,040
hi everyone

2
00:00:03,040 --> 00:00:04,960
thanks for inviting me

3
00:00:04,960 --> 00:00:07,440
i'm happy to be here

4
00:00:07,440 --> 00:00:10,719
today i'll be talking about attacks on

5
00:00:10,719 --> 00:00:14,799
users passwords stored in linux memory

6
00:00:14,799 --> 00:00:16,640
and how to block them

7
00:00:16,640 --> 00:00:19,520
i think that this topic is of crucial

8
00:00:19,520 --> 00:00:22,480
importance for all experts dealing with

9
00:00:22,480 --> 00:00:24,960
application security

10
00:00:24,960 --> 00:00:28,480
this work was done by one of my students

11
00:00:28,480 --> 00:00:30,720
svetlana golub

12
00:00:30,720 --> 00:00:33,360
worked on this topic as her bachelor

13
00:00:33,360 --> 00:00:36,320
thesis under my supervision

14
00:00:36,320 --> 00:00:38,079
unfortunately she is currently

15
00:00:38,079 --> 00:00:40,800
unavailable

16
00:00:40,879 --> 00:00:43,840
password's authentication is common for

17
00:00:43,840 --> 00:00:45,520
modding software

18
00:00:45,520 --> 00:00:48,160
one of the common way of authentication

19
00:00:48,160 --> 00:00:50,559
is to calculate a hash from user

20
00:00:50,559 --> 00:00:53,920
supplied password and compare it with a

21
00:00:53,920 --> 00:00:55,280
stored hash

22
00:00:55,280 --> 00:00:58,320
for example hashes for users passwords

23
00:00:58,320 --> 00:01:02,879
are stored in the etc password file

24
00:01:02,879 --> 00:01:05,920
the final step is to de-allocate data

25
00:01:05,920 --> 00:01:08,000
used to process the sensitive

26
00:01:08,000 --> 00:01:10,000
information

27
00:01:10,000 --> 00:01:13,280
a perfect example of authentic software

28
00:01:13,280 --> 00:01:16,159
is linux gnome desktop

29
00:01:16,159 --> 00:01:19,040
which uses gnome keyring diamond for

30
00:01:19,040 --> 00:01:21,360
storing security credentials

31
00:01:21,360 --> 00:01:25,600
such as users names and passwords

32
00:01:25,600 --> 00:01:28,640
security researcher chong jong kim

33
00:01:28,640 --> 00:01:30,880
from south korea discovered that gnome

34
00:01:30,880 --> 00:01:32,079
keyring

35
00:01:32,079 --> 00:01:35,439
doesn't overwrite users credentials

36
00:01:35,439 --> 00:01:38,079
located in memory

37
00:01:38,079 --> 00:01:40,159
these credentials are not cleared

38
00:01:40,159 --> 00:01:44,240
automatically and reside in plain text

39
00:01:44,240 --> 00:01:46,720
in process memory

40
00:01:46,720 --> 00:01:48,640
this happens because there are no

41
00:01:48,640 --> 00:01:52,399
routine calls to override sensitive data

42
00:01:52,399 --> 00:01:54,880
probably due to unnecessary compiler

43
00:01:54,880 --> 00:01:56,240
optimization

44
00:01:56,240 --> 00:01:57,680
as a result

45
00:01:57,680 --> 00:02:00,240
any user with an appropriate privilege

46
00:02:00,240 --> 00:02:04,320
can extract them by memory acquisition

47
00:02:04,320 --> 00:02:06,000
let's see

48
00:02:06,000 --> 00:02:08,560
how it can happen

49
00:02:08,560 --> 00:02:11,200
security researcher hunter gregel from

50
00:02:11,200 --> 00:02:12,560
the usa

51
00:02:12,560 --> 00:02:16,000
developed a tool called mini penguin

52
00:02:16,000 --> 00:02:18,959
to extract users passwords from the

53
00:02:18,959 --> 00:02:22,480
memory of gnome kirin diamond

54
00:02:22,480 --> 00:02:26,400
this tool can successfully extract ascii

55
00:02:26,400 --> 00:02:28,720
passwords

56
00:02:28,720 --> 00:02:31,920
another researcher nicolas verdi from

57
00:02:31,920 --> 00:02:35,440
the usa has improved mini penguin tool

58
00:02:35,440 --> 00:02:38,560
and implemented an u2 called

59
00:02:38,560 --> 00:02:40,080
mini pi

60
00:02:40,080 --> 00:02:42,959
this tool can do both

61
00:02:42,959 --> 00:02:45,680
locate and remove passwords from the

62
00:02:45,680 --> 00:02:47,120
memory

63
00:02:47,120 --> 00:02:49,840
the tool can successfully work with

64
00:02:49,840 --> 00:02:52,959
ascii passwords

65
00:02:53,280 --> 00:02:56,640
we analyzed these tools using different

66
00:02:56,640 --> 00:02:58,959
accounts in one machine

67
00:02:58,959 --> 00:03:02,000
we tried to use various unicode

68
00:03:02,000 --> 00:03:03,440
passwords

69
00:03:03,440 --> 00:03:05,440
here are the corresponding memory dumps

70
00:03:05,440 --> 00:03:08,080
of gnome curing diamond software

71
00:03:08,080 --> 00:03:10,400
first we proved their gnome curing

72
00:03:10,400 --> 00:03:11,440
diamond

73
00:03:11,440 --> 00:03:14,640
stores the user's passwords in memory

74
00:03:14,640 --> 00:03:19,519
even there are no unicode symbols

75
00:03:19,519 --> 00:03:22,400
and for unicode symbols as well

76
00:03:22,400 --> 00:03:25,120
here we have two passwords with cyrillic

77
00:03:25,120 --> 00:03:26,319
alphabet

78
00:03:26,319 --> 00:03:27,680
as well as

79
00:03:27,680 --> 00:03:31,360
some special symbols like euro and yuan

80
00:03:31,360 --> 00:03:33,680
symbols

81
00:03:33,680 --> 00:03:38,480
all of them are stored in process memory

82
00:03:38,480 --> 00:03:39,519
then

83
00:03:39,519 --> 00:03:42,480
we checked if these two

84
00:03:42,480 --> 00:03:44,840
tools can reveal and

85
00:03:44,840 --> 00:03:48,560
overwrite unicode passwords

86
00:03:48,560 --> 00:03:51,360
we can see that both

87
00:03:51,360 --> 00:03:52,959
these tools

88
00:03:52,959 --> 00:03:56,720
are not able to find these passwords

89
00:03:56,720 --> 00:03:57,920
also

90
00:03:57,920 --> 00:03:58,879
both

91
00:03:58,879 --> 00:04:01,840
tools work very slowly which is a

92
00:04:01,840 --> 00:04:03,840
serious drawback

93
00:04:03,840 --> 00:04:06,000
to tackle this challenge we have

94
00:04:06,000 --> 00:04:08,879
developed a new tool called

95
00:04:08,879 --> 00:04:11,120
minidaf

96
00:04:11,120 --> 00:04:14,080
minidaft expands the mini penguin and

97
00:04:14,080 --> 00:04:16,720
mini pie features and includes the

98
00:04:16,720 --> 00:04:19,440
following competitive advantages

99
00:04:19,440 --> 00:04:22,800
it can locate passwords containing both

100
00:04:22,800 --> 00:04:26,840
ascii characters and unicode

101
00:04:26,840 --> 00:04:29,600
characters another challenge is to

102
00:04:29,600 --> 00:04:33,600
locate passwords as soon as possible

103
00:04:33,600 --> 00:04:36,560
finally we have solved this issue and

104
00:04:36,560 --> 00:04:39,759
significantly improve the speed of

105
00:04:39,759 --> 00:04:42,759
minidaf

106
00:04:43,360 --> 00:04:46,080
we have revealed that users passwords

107
00:04:46,080 --> 00:04:49,600
are located only in stack memory region

108
00:04:49,600 --> 00:04:52,479
so we can skip other memory regions and

109
00:04:52,479 --> 00:04:55,919
focus only on anonymous regions with

110
00:04:55,919 --> 00:04:59,120
enabled read and write access

111
00:04:59,120 --> 00:05:02,000
this helps to significantly improve

112
00:05:02,000 --> 00:05:04,400
minidaf performance

113
00:05:04,400 --> 00:05:08,840
the key steps of minidaf are

114
00:05:08,840 --> 00:05:10,880
here first

115
00:05:10,880 --> 00:05:14,240
we read user's password hashes from etc

116
00:05:14,240 --> 00:05:15,840
shadow file

117
00:05:15,840 --> 00:05:18,880
second we access gnome curing diamond

118
00:05:18,880 --> 00:05:22,160
process and enumerate its memory

119
00:05:22,160 --> 00:05:23,520
segments

120
00:05:23,520 --> 00:05:26,479
then we extract the sequence of bytes

121
00:05:26,479 --> 00:05:29,360
and calculate their hashes

122
00:05:29,360 --> 00:05:32,960
if the calculated hash value is a match

123
00:05:32,960 --> 00:05:35,280
with one of the hash from etc shadow

124
00:05:35,280 --> 00:05:36,400
file

125
00:05:36,400 --> 00:05:40,479
it means that a password has been found

126
00:05:40,479 --> 00:05:42,880
the final step is to overwrite the

127
00:05:42,880 --> 00:05:45,840
detected passwords

128
00:05:45,840 --> 00:05:50,479
and finally we protect the os

129
00:05:51,199 --> 00:05:53,199
here we can see the memory content

130
00:05:53,199 --> 00:05:56,880
before and after overwriting

131
00:05:56,880 --> 00:05:59,840
now attackers cannot extract users

132
00:05:59,840 --> 00:06:03,679
passwords from the memory

133
00:06:04,800 --> 00:06:07,600
the comparison table is here

134
00:06:07,600 --> 00:06:10,400
we can see that minidab has the

135
00:06:10,400 --> 00:06:13,120
following advantages it can locate and

136
00:06:13,120 --> 00:06:16,639
override passwords regardless of the

137
00:06:16,639 --> 00:06:21,919
alphabet ascii and unicode symbols

138
00:06:21,919 --> 00:06:24,240
minidab has been successfully tested

139
00:06:24,240 --> 00:06:27,039
using the following passwords

140
00:06:27,039 --> 00:06:27,919
and

141
00:06:27,919 --> 00:06:30,639
the following operating systems we can

142
00:06:30,639 --> 00:06:31,919
see

143
00:06:31,919 --> 00:06:35,600
send os we can see ubuntu

144
00:06:35,600 --> 00:06:40,080
and we can see kalignu linux

145
00:06:40,960 --> 00:06:44,160
here is the time comparison figure

146
00:06:44,160 --> 00:06:46,639
which shows how fast

147
00:06:46,639 --> 00:06:48,960
minidaft is

148
00:06:48,960 --> 00:06:52,160
the source code of minidaf is uploaded

149
00:06:52,160 --> 00:06:54,479
here

150
00:06:55,440 --> 00:06:58,680
thank you

