1
00:00:00,880 --> 00:00:03,919
hello everyone i'm randy parkman

2
00:00:03,919 --> 00:00:05,920
and i'm jean-francois

3
00:00:05,920 --> 00:00:07,520
and we're going to be talking to you

4
00:00:07,520 --> 00:00:09,200
about our research and development

5
00:00:09,200 --> 00:00:10,800
efforts around

6
00:00:10,800 --> 00:00:14,160
red teams attacking logs and blue teams

7
00:00:14,160 --> 00:00:15,599
defending against them and trying to

8
00:00:15,599 --> 00:00:17,520
bust the ghost in the lots

9
00:00:17,520 --> 00:00:19,680
yeah i thought this was very awesome and

10
00:00:19,680 --> 00:00:22,000
i think it all started when we presented

11
00:00:22,000 --> 00:00:23,600
both at unicom

12
00:00:23,600 --> 00:00:25,439
uh we started talking to each other and

13
00:00:25,439 --> 00:00:26,480
i was

14
00:00:26,480 --> 00:00:29,039
under the premise that i wanted to see

15
00:00:29,039 --> 00:00:30,800
from a red team's perspective what was

16
00:00:30,800 --> 00:00:33,360
going on if like all the worst things

17
00:00:33,360 --> 00:00:35,120
could happen to a blue team

18
00:00:35,120 --> 00:00:37,280
and i wanted to to know randy because

19
00:00:37,280 --> 00:00:39,280
randy's pretty good at his job wanted to

20
00:00:39,280 --> 00:00:41,440
know his opinion about how you could

21
00:00:41,440 --> 00:00:42,719
potentially

22
00:00:42,719 --> 00:00:45,200
defend against that and you're gonna see

23
00:00:45,200 --> 00:00:46,559
what we're talking about in just a

24
00:00:46,559 --> 00:00:48,879
minute

25
00:00:49,840 --> 00:00:51,760
um let's introduce ourselves just a

26
00:00:51,760 --> 00:00:54,480
little bit um i work at binary defense

27
00:00:54,480 --> 00:00:56,000
where i

28
00:00:56,000 --> 00:00:58,000
work in threat hunting for a lot of

29
00:00:58,000 --> 00:00:59,520
different clients

30
00:00:59,520 --> 00:01:00,960
trying to find

31
00:01:00,960 --> 00:01:03,359
new advanced ways to detect

32
00:01:03,359 --> 00:01:04,640
the

33
00:01:04,640 --> 00:01:06,320
attackers and all the techniques that

34
00:01:06,320 --> 00:01:09,280
they use and prior to working at binary

35
00:01:09,280 --> 00:01:10,720
defense where i've been for the last two

36
00:01:10,720 --> 00:01:13,280
years i worked for 15 years at the fbi

37
00:01:13,280 --> 00:01:15,520
where i worked on cyber crime

38
00:01:15,520 --> 00:01:17,920
investigations and digital forensics

39
00:01:17,920 --> 00:01:20,720
incident response

40
00:01:20,799 --> 00:01:23,759
following that up that's

41
00:01:23,759 --> 00:01:26,320
quite some big shoes to fill there so my

42
00:01:26,320 --> 00:01:28,159
name is alfred zomas i work at

43
00:01:28,159 --> 00:01:29,520
trustedsec

44
00:01:29,520 --> 00:01:31,439
and i'm also a sans instructor i teach

45
00:01:31,439 --> 00:01:33,840
the 699 course there

46
00:01:33,840 --> 00:01:36,240
i create open source tools

47
00:01:36,240 --> 00:01:38,560
primarily red theme based and i'm also

48
00:01:38,560 --> 00:01:40,479
the creator of red teamer.tips which is

49
00:01:40,479 --> 00:01:43,040
a help website for red teams with some

50
00:01:43,040 --> 00:01:45,040
field notes uh just a quick cheat sheet

51
00:01:45,040 --> 00:01:46,479
there if you want uh if you're stuck

52
00:01:46,479 --> 00:01:48,240
somewhere and you want some help

53
00:01:48,240 --> 00:01:50,399
uh feel free to take a look at that as

54
00:01:50,399 --> 00:01:52,320
well

55
00:01:52,320 --> 00:01:54,560
so there you go as i already mentioned

56
00:01:54,560 --> 00:01:56,880
the preface of this is actually

57
00:01:56,880 --> 00:01:59,200
how adversaries can mess with defenses

58
00:01:59,200 --> 00:02:00,399
and how

59
00:02:00,399 --> 00:02:02,399
defenders could potentially react to

60
00:02:02,399 --> 00:02:05,600
this if a worst case scenario would hit

61
00:02:05,600 --> 00:02:08,479
and what do i mean by that well

62
00:02:08,479 --> 00:02:11,120
we all know the saying that defenders

63
00:02:11,120 --> 00:02:12,720
have the home field advantage it's

64
00:02:12,720 --> 00:02:14,560
something that has been said over and

65
00:02:14,560 --> 00:02:17,040
over again but is this

66
00:02:17,040 --> 00:02:19,520
really true though because

67
00:02:19,520 --> 00:02:21,520
defenders do have the home advantage

68
00:02:21,520 --> 00:02:23,760
they do know their environment they know

69
00:02:23,760 --> 00:02:25,520
which servers are there they know which

70
00:02:25,520 --> 00:02:28,640
defenses they have but adversaries

71
00:02:28,640 --> 00:02:31,200
also know about the common technologies

72
00:02:31,200 --> 00:02:33,440
that tends to get them caught such as

73
00:02:33,440 --> 00:02:36,400
edrs such as sysmon suggests log

74
00:02:36,400 --> 00:02:38,319
forwarding to seams

75
00:02:38,319 --> 00:02:41,280
so those things are very very similar in

76
00:02:41,280 --> 00:02:43,599
almost all environments adversaries know

77
00:02:43,599 --> 00:02:45,519
this stuff so they can start dampering

78
00:02:45,519 --> 00:02:47,599
with this stuff as well

79
00:02:47,599 --> 00:02:49,920
and defenders however are actually

80
00:02:49,920 --> 00:02:52,160
fighting the unknown yes they do know

81
00:02:52,160 --> 00:02:54,239
their own environment but they don't

82
00:02:54,239 --> 00:02:56,080
know what's going to hit them there are

83
00:02:56,080 --> 00:02:58,159
a billion threat actors out there with a

84
00:02:58,159 --> 00:03:01,040
lot of ttps most of them or at least

85
00:03:01,040 --> 00:03:02,800
some of them are mapped on the mitre

86
00:03:02,800 --> 00:03:04,159
attack framework but there are

87
00:03:04,159 --> 00:03:07,200
definitely nation states dtps out there

88
00:03:07,200 --> 00:03:10,400
that don't have a mapping just yet

89
00:03:10,400 --> 00:03:12,640
and to illustrate this even further

90
00:03:12,640 --> 00:03:16,480
there are over 90 over 87 different c2

91
00:03:16,480 --> 00:03:18,720
frameworks actually locked on the c2

92
00:03:18,720 --> 00:03:21,200
matrix which is actually a website that

93
00:03:21,200 --> 00:03:24,000
is dedicated to try and map all the

94
00:03:24,000 --> 00:03:24,959
different

95
00:03:24,959 --> 00:03:29,120
c2s out there so there are over 87

96
00:03:29,120 --> 00:03:31,120
different c2s out there and as you can

97
00:03:31,120 --> 00:03:32,879
imagine yes they share they share

98
00:03:32,879 --> 00:03:35,120
similarities but they also have their

99
00:03:35,120 --> 00:03:37,599
own uh nuances as well

100
00:03:37,599 --> 00:03:39,120
and as i already mentioned various

101
00:03:39,120 --> 00:03:43,040
strategies each with their own ddps

102
00:03:43,040 --> 00:03:45,920
so on what do these tools rely right so

103
00:03:45,920 --> 00:03:48,959
edrs they can rely on user mode hooks

104
00:03:48,959 --> 00:03:51,040
and they also have kernel callbacks

105
00:03:51,040 --> 00:03:54,159
sysmon typically relies on etw events

106
00:03:54,159 --> 00:03:55,760
which stands for event racing for

107
00:03:55,760 --> 00:03:57,280
windows we're going to talk about that

108
00:03:57,280 --> 00:03:58,720
in just a minute

109
00:03:58,720 --> 00:04:00,560
and the event log service and then of

110
00:04:00,560 --> 00:04:02,560
course the log forwarders and what do

111
00:04:02,560 --> 00:04:05,200
they rely on well they rely on actually

112
00:04:05,200 --> 00:04:06,560
having

113
00:04:06,560 --> 00:04:08,239
reachability to the target they are

114
00:04:08,239 --> 00:04:11,360
forwarding the logs to

115
00:04:11,599 --> 00:04:12,319
so

116
00:04:12,319 --> 00:04:14,239
what are user motoks if you haven't

117
00:04:14,239 --> 00:04:16,160
heard about this before allow me to

118
00:04:16,160 --> 00:04:18,000
quickly illustrate what we're actually

119
00:04:18,000 --> 00:04:19,680
talking about here

120
00:04:19,680 --> 00:04:21,759
so typically what we can see

121
00:04:21,759 --> 00:04:23,600
um is

122
00:04:23,600 --> 00:04:25,440
every process that is running in your

123
00:04:25,440 --> 00:04:28,320
computer at one point or another um

124
00:04:28,320 --> 00:04:31,440
calls ntdl.tll which is um the gap

125
00:04:31,440 --> 00:04:33,440
between user mode and kernel mode so as

126
00:04:33,440 --> 00:04:36,240
you may know the operating system has a

127
00:04:36,240 --> 00:04:38,880
kernel uh that's actually the thing that

128
00:04:38,880 --> 00:04:40,560
is responsible of running the entire

129
00:04:40,560 --> 00:04:41,759
operating system and running the

130
00:04:41,759 --> 00:04:44,240
processes on there and the processes

131
00:04:44,240 --> 00:04:45,919
that are running in your operating

132
00:04:45,919 --> 00:04:48,720
system need to have a way to interact

133
00:04:48,720 --> 00:04:50,160
with each other of course and that is

134
00:04:50,160 --> 00:04:51,919
what the kernel is responsive for

135
00:04:51,919 --> 00:04:53,440
responsible for

136
00:04:53,440 --> 00:04:56,240
so ntdll is actually the bridge between

137
00:04:56,240 --> 00:04:58,800
the two and you can recognize

138
00:04:58,800 --> 00:05:01,360
ntdl functions because it's typically

139
00:05:01,360 --> 00:05:05,120
annotated with nd for example nt virtual

140
00:05:05,120 --> 00:05:08,000
protect anti-allocate virtual memory so

141
00:05:08,000 --> 00:05:11,600
all np functions belong to ntd level tll

142
00:05:11,600 --> 00:05:14,800
and all modules at one point or another

143
00:05:14,800 --> 00:05:17,039
will call ntd level dll so this is a

144
00:05:17,039 --> 00:05:20,479
primary example for edrs to actually

145
00:05:20,479 --> 00:05:22,160
inspect right this is interesting

146
00:05:22,160 --> 00:05:24,560
traffic because everything goes through

147
00:05:24,560 --> 00:05:26,639
this and they want to inspect what is

148
00:05:26,639 --> 00:05:29,280
going on so what typically happens is

149
00:05:29,280 --> 00:05:31,120
as you can see in the

150
00:05:31,120 --> 00:05:33,440
first stop of this slide

151
00:05:33,440 --> 00:05:35,680
this is actually an example of a

152
00:05:35,680 --> 00:05:37,840
disassembled goat of anti-allocate

153
00:05:37,840 --> 00:05:39,520
virtual memory and this is how it

154
00:05:39,520 --> 00:05:41,840
typically looks like so it does some

155
00:05:41,840 --> 00:05:43,360
move instructions

156
00:05:43,360 --> 00:05:45,440
it does a compare instruction it does a

157
00:05:45,440 --> 00:05:47,759
cisco and it does a return

158
00:05:47,759 --> 00:05:50,320
now on the bottom half of the slides you

159
00:05:50,320 --> 00:05:52,240
can actually see what a hooked function

160
00:05:52,240 --> 00:05:54,080
looks like and you can see this is

161
00:05:54,080 --> 00:05:55,840
actually quite different because here

162
00:05:55,840 --> 00:05:57,199
the first instruction is a move

163
00:05:57,199 --> 00:05:59,039
instruction and here the first

164
00:05:59,039 --> 00:06:01,840
instruction is a jump instruction to a

165
00:06:01,840 --> 00:06:03,600
different memory address and if you

166
00:06:03,600 --> 00:06:06,639
would follow this memory address 99

167
00:06:06,639 --> 00:06:09,680
out of 100 you will end up into an other

168
00:06:09,680 --> 00:06:12,240
dll which most likely will be the dll of

169
00:06:12,240 --> 00:06:14,240
the edr that is trying to inspect your

170
00:06:14,240 --> 00:06:15,280
traffic

171
00:06:15,280 --> 00:06:18,160
so what can you do as an adversary

172
00:06:18,160 --> 00:06:18,960
well

173
00:06:18,960 --> 00:06:21,520
it's actually very simple what can you

174
00:06:21,520 --> 00:06:24,160
do as an adversary you can um try and

175
00:06:24,160 --> 00:06:26,160
subvert that because you know that nt

176
00:06:26,160 --> 00:06:28,479
functions are actually always following

177
00:06:28,479 --> 00:06:30,400
the same instructions there's always a

178
00:06:30,400 --> 00:06:32,000
move instruction there's always a

179
00:06:32,000 --> 00:06:33,600
comparing section there's always a cisco

180
00:06:33,600 --> 00:06:35,440
instruction you can actually craft your

181
00:06:35,440 --> 00:06:38,000
own function and call that instead and

182
00:06:38,000 --> 00:06:40,160
and try to evade hoops that way but we

183
00:06:40,160 --> 00:06:43,039
will get into that in just a second

184
00:06:43,039 --> 00:06:45,039
let's talk about the event lock service

185
00:06:45,039 --> 00:06:48,639
and etw first so the event lock service

186
00:06:48,639 --> 00:06:52,080
relies on etw and etw stands for event

187
00:06:52,080 --> 00:06:54,240
tracing for windows now what does this

188
00:06:54,240 --> 00:06:56,400
actually mean here i am once again

189
00:06:56,400 --> 00:06:58,960
talking about kernel it's actually a

190
00:06:58,960 --> 00:07:00,800
tracing function that belongs to the

191
00:07:00,800 --> 00:07:03,759
windows kernel it exposes different

192
00:07:03,759 --> 00:07:06,560
providers where processes can subscribe

193
00:07:06,560 --> 00:07:08,880
to some of these providers are very

194
00:07:08,880 --> 00:07:10,960
interesting from an edr perspective once

195
00:07:10,960 --> 00:07:13,360
again such as for example the kernel

196
00:07:13,360 --> 00:07:16,240
provider as it can actually gives you

197
00:07:16,240 --> 00:07:19,120
information on when a process is being

198
00:07:19,120 --> 00:07:22,560
launched and also even threats so when a

199
00:07:22,560 --> 00:07:24,160
threat is being launched and this is

200
00:07:24,160 --> 00:07:26,080
very interesting because then you can

201
00:07:26,080 --> 00:07:27,759
actually um

202
00:07:27,759 --> 00:07:29,680
correlate threats that are being spawned

203
00:07:29,680 --> 00:07:31,680
in a process and try to hunt for process

204
00:07:31,680 --> 00:07:34,080
injection for example so if one process

205
00:07:34,080 --> 00:07:35,599
is injecting a threat into another

206
00:07:35,599 --> 00:07:37,520
process you will see that a new threat

207
00:07:37,520 --> 00:07:39,759
is being spawned from a process that is

208
00:07:39,759 --> 00:07:41,680
not the same process as that threat is

209
00:07:41,680 --> 00:07:44,319
running on so that's very interesting

210
00:07:44,319 --> 00:07:47,039
and a cool open source tool uh that

211
00:07:47,039 --> 00:07:48,879
allows you to play with this stuff is

212
00:07:48,879 --> 00:07:52,479
silk etw by ruben bonan aka fuzzysec

213
00:07:52,479 --> 00:07:55,120
really cool uh open source developer as

214
00:07:55,120 --> 00:07:56,840
well it's a really smart

215
00:07:56,840 --> 00:08:00,479
researcher and this silk etw allows you

216
00:08:00,479 --> 00:08:03,919
to either lock etw events to the console

217
00:08:03,919 --> 00:08:06,879
and it even has capabilities to actually

218
00:08:06,879 --> 00:08:08,960
lock forward it to a lock stash for

219
00:08:08,960 --> 00:08:10,800
example or to a splunk

220
00:08:10,800 --> 00:08:12,720
so that's a really cool thing if you're

221
00:08:12,720 --> 00:08:15,599
in interested in learning more about etw

222
00:08:15,599 --> 00:08:17,599
and their providers i highly recommend

223
00:08:17,599 --> 00:08:19,919
you to use this middleware if you want

224
00:08:19,919 --> 00:08:21,520
to

225
00:08:21,520 --> 00:08:22,720
so there you go

226
00:08:22,720 --> 00:08:24,960
then line of sight with a seam i guess

227
00:08:24,960 --> 00:08:27,599
this is no surprise to anyone

228
00:08:27,599 --> 00:08:29,840
your end points collect locks

229
00:08:29,840 --> 00:08:31,520
if you want to forward those locks

230
00:08:31,520 --> 00:08:33,839
you'll have to have some kind of process

231
00:08:33,839 --> 00:08:35,760
that is actually collecting all the

232
00:08:35,760 --> 00:08:38,799
locks your endpoints has and ships them

233
00:08:38,799 --> 00:08:40,559
to another target

234
00:08:40,559 --> 00:08:42,958
and of course it relies on line of sight

235
00:08:42,958 --> 00:08:44,880
if you can't communicate with the end

236
00:08:44,880 --> 00:08:46,880
target of your lock forwarding then the

237
00:08:46,880 --> 00:08:48,880
locks will never arrive there so that's

238
00:08:48,880 --> 00:08:50,560
interesting to know as well

239
00:08:50,560 --> 00:08:52,160
because we're going to dive into that in

240
00:08:52,160 --> 00:08:54,240
just a bit

241
00:08:54,240 --> 00:08:56,560
so as i already mentioned multiple times

242
00:08:56,560 --> 00:08:59,279
here we are not just assuming breach

243
00:08:59,279 --> 00:09:01,600
we are actually assuming worst case

244
00:09:01,600 --> 00:09:04,640
scenario so this research was conducted

245
00:09:04,640 --> 00:09:07,279
from a very simple idea what if an

246
00:09:07,279 --> 00:09:08,399
adversary

247
00:09:08,399 --> 00:09:11,440
completely blinds you so what if he can

248
00:09:11,440 --> 00:09:14,160
bypass really all the security measures

249
00:09:14,160 --> 00:09:16,240
that are in place in order to try and

250
00:09:16,240 --> 00:09:18,560
prevent an attacker from actually doing

251
00:09:18,560 --> 00:09:20,839
malicious stuff what happens

252
00:09:20,839 --> 00:09:24,160
then and i created some software

253
00:09:24,160 --> 00:09:26,320
it's called purple power and i'll link

254
00:09:26,320 --> 00:09:27,279
to it

255
00:09:27,279 --> 00:09:29,279
in the discord as well like the github

256
00:09:29,279 --> 00:09:30,959
link to the project so you can check it

257
00:09:30,959 --> 00:09:33,440
out if you're interested in the code

258
00:09:33,440 --> 00:09:36,160
and what does purple power actually do

259
00:09:36,160 --> 00:09:39,200
well it's actually capable of bypassing

260
00:09:39,200 --> 00:09:42,560
etw and bypassing um c mc is the malware

261
00:09:42,560 --> 00:09:44,399
scanning interface of windows so it

262
00:09:44,399 --> 00:09:47,440
bypasses those two things

263
00:09:47,440 --> 00:09:48,800
it's written in c sharp and it's

264
00:09:48,800 --> 00:09:51,040
leveraging the d invoke framework for

265
00:09:51,040 --> 00:09:53,440
cisco generation so it actually bypasses

266
00:09:53,440 --> 00:09:55,920
the user mode hooks again i'll talk more

267
00:09:55,920 --> 00:09:59,200
about that in just a second it can nuke

268
00:09:59,200 --> 00:10:01,920
the event look it can also load a

269
00:10:01,920 --> 00:10:04,640
malicious driver in order to completely

270
00:10:04,640 --> 00:10:07,040
stop etw events from being written in

271
00:10:07,040 --> 00:10:10,720
the first place or it can inject into

272
00:10:10,720 --> 00:10:13,120
the event lock service and use java

273
00:10:13,120 --> 00:10:14,959
rules in order to

274
00:10:14,959 --> 00:10:16,959
make smart decisions whether or not you

275
00:10:16,959 --> 00:10:19,120
want to lock an event or you want it to

276
00:10:19,120 --> 00:10:20,480
be blocked

277
00:10:20,480 --> 00:10:24,480
and finally but not last but not

278
00:10:24,480 --> 00:10:26,560
less important it can sink all

279
00:10:26,560 --> 00:10:30,000
communications to seams

280
00:10:30,160 --> 00:10:32,399
so bypassing user mode hooks as i

281
00:10:32,399 --> 00:10:34,800
already mentioned hooks are things that

282
00:10:34,800 --> 00:10:37,839
edrs for example like to place on things

283
00:10:37,839 --> 00:10:40,079
so how does that work you're a regular

284
00:10:40,079 --> 00:10:42,160
user you're spawning a process that

285
00:10:42,160 --> 00:10:45,040
process needs to communicate with nt dll

286
00:10:45,040 --> 00:10:48,640
and an edr will hook that ntdl page for

287
00:10:48,640 --> 00:10:50,000
you now

288
00:10:50,000 --> 00:10:52,480
i am malware now and i want to create

289
00:10:52,480 --> 00:10:54,320
some malicious stuff i want to do some

290
00:10:54,320 --> 00:10:56,480
malicious stuff well guess what

291
00:10:56,480 --> 00:10:58,399
i too want to communicate with the

292
00:10:58,399 --> 00:11:00,800
operating system so i too need to

293
00:11:00,800 --> 00:11:03,519
communicate with ntd level tll which is

294
00:11:03,519 --> 00:11:06,640
hooked so my malware is going to call an

295
00:11:06,640 --> 00:11:08,640
empty instruction that is actually

296
00:11:08,640 --> 00:11:11,600
hooked by the edr so the edr will see my

297
00:11:11,600 --> 00:11:14,160
call to the ntdll function it will

298
00:11:14,160 --> 00:11:16,959
inspect it and it will do some

299
00:11:16,959 --> 00:11:19,040
processing logic whether or not to

300
00:11:19,040 --> 00:11:21,279
decide if i'm malicious or not if the

301
00:11:21,279 --> 00:11:23,519
edr deems that indeed my call is

302
00:11:23,519 --> 00:11:25,600
malicious it's going to block and it's

303
00:11:25,600 --> 00:11:27,760
going to send an alert or if not it's

304
00:11:27,760 --> 00:11:29,519
going to let me pass

305
00:11:29,519 --> 00:11:31,920
now how can you evade that well as i

306
00:11:31,920 --> 00:11:33,440
already mentioned

307
00:11:33,440 --> 00:11:36,240
nt functions always follow the same kind

308
00:11:36,240 --> 00:11:37,360
of

309
00:11:37,360 --> 00:11:39,519
assembly instructions it's always going

310
00:11:39,519 --> 00:11:41,839
to do a compare it's always going to do

311
00:11:41,839 --> 00:11:43,600
a syscall it's always going to do a

312
00:11:43,600 --> 00:11:46,560
return so we know this we can actually

313
00:11:46,560 --> 00:11:48,240
know the function prototypes of this

314
00:11:48,240 --> 00:11:50,240
stuff even though it's undocumented

315
00:11:50,240 --> 00:11:52,560
there's actually a lot of research

316
00:11:52,560 --> 00:11:54,720
already out there there are

317
00:11:54,720 --> 00:11:57,440
entire websites uh dedicated to

318
00:11:57,440 --> 00:11:59,839
undocumented function of microsoft so if

319
00:11:59,839 --> 00:12:02,160
you want the uh the function prototype

320
00:12:02,160 --> 00:12:04,320
in assembly you'll definitely be able to

321
00:12:04,320 --> 00:12:05,519
find it

322
00:12:05,519 --> 00:12:08,320
and the invoke or dynamic invocation is

323
00:12:08,320 --> 00:12:10,959
a c framework that actually automates

324
00:12:10,959 --> 00:12:12,720
this process for you so you don't have

325
00:12:12,720 --> 00:12:15,279
to do it and what does it look like well

326
00:12:15,279 --> 00:12:17,200
again you are a user you're spawning a

327
00:12:17,200 --> 00:12:19,680
process that process needs ntd allowable

328
00:12:19,680 --> 00:12:21,839
dll so it's going to load it into its

329
00:12:21,839 --> 00:12:23,839
process memory that is still going to

330
00:12:23,839 --> 00:12:26,560
get hooked but now i'm going to do

331
00:12:26,560 --> 00:12:28,079
something different from a malware

332
00:12:28,079 --> 00:12:30,959
perspective i'm not simply going to call

333
00:12:30,959 --> 00:12:33,920
the ntdlr.dll function anymore i'm

334
00:12:33,920 --> 00:12:36,240
actually going to ask

335
00:12:36,240 --> 00:12:37,519
a clean

336
00:12:37,519 --> 00:12:39,440
ntdl.tll

337
00:12:39,440 --> 00:12:42,880
file from disk so i'm actually going to

338
00:12:42,880 --> 00:12:46,079
manually map a new ntd a level dll into

339
00:12:46,079 --> 00:12:48,079
the process memory which will not be

340
00:12:48,079 --> 00:12:51,519
hooked as edrs typically place the hook

341
00:12:51,519 --> 00:12:54,240
on process start and the process is

342
00:12:54,240 --> 00:12:56,639
already started so the ntdl dll page is

343
00:12:56,639 --> 00:12:59,200
already hooked i'm going to just simply

344
00:12:59,200 --> 00:13:02,399
map a new entity level dll in memory and

345
00:13:02,399 --> 00:13:04,880
i'm going to call the nt function from

346
00:13:04,880 --> 00:13:07,839
that newly mapped ntd level dll instead

347
00:13:07,839 --> 00:13:10,320
which is not hooked and which will not

348
00:13:10,320 --> 00:13:13,040
trigger any alerts so happy days for

349
00:13:13,040 --> 00:13:15,760
adversaries

350
00:13:15,920 --> 00:13:18,800
so etw shenanigans i already said that

351
00:13:18,800 --> 00:13:21,200
purple power actually has three

352
00:13:21,200 --> 00:13:24,480
different ways of messing with etw the

353
00:13:24,480 --> 00:13:27,360
first one is actually just simply nuking

354
00:13:27,360 --> 00:13:30,079
the entire etw

355
00:13:30,079 --> 00:13:32,560
lock service so that's actually

356
00:13:32,560 --> 00:13:34,720
the most impactful because i'm just

357
00:13:34,720 --> 00:13:37,200
simply nuking the entire thing

358
00:13:37,200 --> 00:13:38,880
it's also the loudest

359
00:13:38,880 --> 00:13:41,600
uh so what does that look like well

360
00:13:41,600 --> 00:13:43,920
you may or may not know that event lost

361
00:13:43,920 --> 00:13:45,920
service is actually running as a

362
00:13:45,920 --> 00:13:48,160
privileged process on your system which

363
00:13:48,160 --> 00:13:49,240
is just

364
00:13:49,240 --> 00:13:52,240
svchost.exe there are a lot of svc hosts

365
00:13:52,240 --> 00:13:55,600
in there but you can actually use wmi to

366
00:13:55,600 --> 00:13:57,120
query uh

367
00:13:57,120 --> 00:14:00,639
the exact process id that is hosting the

368
00:14:00,639 --> 00:14:02,639
event of service so as you can see here

369
00:14:02,639 --> 00:14:05,440
on the slides i'm basically saying look

370
00:14:05,440 --> 00:14:07,360
i want all the services but i want to

371
00:14:07,360 --> 00:14:10,000
fill this um event and i want the

372
00:14:10,000 --> 00:14:12,720
process id of that so here i see that

373
00:14:12,720 --> 00:14:15,839
the process id is

374
00:14:15,839 --> 00:14:18,480
and if i use process hacker and look for

375
00:14:18,480 --> 00:14:22,639
2056 i see svchost.exe if i inspect the

376
00:14:22,639 --> 00:14:27,030
threats in this svc host.exe i will see

377
00:14:27,030 --> 00:14:28,360
[Music]

378
00:14:28,360 --> 00:14:31,040
w-e-v-t-s-v-c svc.dll which is actually

379
00:14:31,040 --> 00:14:34,320
the dll responsible for the event

380
00:14:34,320 --> 00:14:37,440
so what i do is i'm actually going to

381
00:14:37,440 --> 00:14:40,959
suspend all the threats that are running

382
00:14:40,959 --> 00:14:42,480
event log

383
00:14:42,480 --> 00:14:45,920
and this is actually a snippet that is

384
00:14:45,920 --> 00:14:49,040
uh used from irat.team which is another

385
00:14:49,040 --> 00:14:51,519
retimer website out there and you can

386
00:14:51,519 --> 00:14:55,279
see here um the the uh the threats are

387
00:14:55,279 --> 00:14:57,600
being suspended and here you can see

388
00:14:57,600 --> 00:15:00,160
that the first command is actually being

389
00:15:00,160 --> 00:15:03,040
locked so audit success but the second

390
00:15:03,040 --> 00:15:04,959
command

391
00:15:04,959 --> 00:15:06,399
it's not being locked

392
00:15:06,399 --> 00:15:08,560
nothing happens and that is because the

393
00:15:08,560 --> 00:15:11,040
threats are suspended so nothing can be

394
00:15:11,040 --> 00:15:13,040
looked as there's nothing to look

395
00:15:13,040 --> 00:15:14,399
anymore there's nothing that can

396
00:15:14,399 --> 00:15:16,000
actually do the law hang anymore it's

397
00:15:16,000 --> 00:15:18,959
suspended to spend it in place

398
00:15:18,959 --> 00:15:20,639
so that's really interesting that's the

399
00:15:20,639 --> 00:15:22,240
first bypass

400
00:15:22,240 --> 00:15:24,480
another bypass is actually made by

401
00:15:24,480 --> 00:15:26,480
batsack actually the the next two

402
00:15:26,480 --> 00:15:28,480
bypasses are made by betsek he's a very

403
00:15:28,480 --> 00:15:31,040
smart researcher as well um offensive

404
00:15:31,040 --> 00:15:33,199
tradecraft and he's actually very young

405
00:15:33,199 --> 00:15:35,440
i think by the time of this presentation

406
00:15:35,440 --> 00:15:38,000
he's 19 or 20 years old so it's really

407
00:15:38,000 --> 00:15:40,959
amazing uh really smart guy really young

408
00:15:40,959 --> 00:15:44,560
as well and what he found out is he used

409
00:15:44,560 --> 00:15:46,880
wendy bg which is a windows debugger in

410
00:15:46,880 --> 00:15:48,320
kernel mode

411
00:15:48,320 --> 00:15:50,240
and he actually started disassembling

412
00:15:50,240 --> 00:15:52,720
functions and he found that there's

413
00:15:52,720 --> 00:15:55,040
actually an empty function called nt

414
00:15:55,040 --> 00:15:56,639
trace events

415
00:15:56,639 --> 00:15:59,680
trace events event tracing for windows

416
00:15:59,680 --> 00:16:02,480
etw so the correlation is not that hard

417
00:16:02,480 --> 00:16:04,639
to make this event

418
00:16:04,639 --> 00:16:07,040
this function is also responsible but

419
00:16:07,040 --> 00:16:08,480
from kernel level

420
00:16:08,480 --> 00:16:11,759
for etw event rights so what happens

421
00:16:11,759 --> 00:16:14,959
here is he actually patched it in memory

422
00:16:14,959 --> 00:16:17,680
with a very simple return statement

423
00:16:17,680 --> 00:16:20,720
and what he found is once it immediately

424
00:16:20,720 --> 00:16:23,600
returns the event look is not writing

425
00:16:23,600 --> 00:16:24,560
anything

426
00:16:24,560 --> 00:16:25,600
again

427
00:16:25,600 --> 00:16:28,320
now this is a kernel function and this

428
00:16:28,320 --> 00:16:30,560
is not something you can typically

429
00:16:30,560 --> 00:16:32,800
manipulate from user lands

430
00:16:32,800 --> 00:16:35,680
as there is protections in place that

431
00:16:35,680 --> 00:16:38,320
use it even if your local admin can't

432
00:16:38,320 --> 00:16:40,399
just simply start messing around with

433
00:16:40,399 --> 00:16:41,839
the kernel that's just simply not

434
00:16:41,839 --> 00:16:43,519
possible so

435
00:16:43,519 --> 00:16:45,920
a vulnerable kernel actually needs to be

436
00:16:45,920 --> 00:16:47,680
loaded in memory

437
00:16:47,680 --> 00:16:50,639
and there are a ton of them sorry to say

438
00:16:50,639 --> 00:16:52,320
but there are multiple vulnerable

439
00:16:52,320 --> 00:16:54,720
drivers out there that are signed

440
00:16:54,720 --> 00:16:57,440
um even intel has a vulnerable driver

441
00:16:57,440 --> 00:16:59,279
out there as well so there's a project

442
00:16:59,279 --> 00:17:02,399
on github called kdu which is actually a

443
00:17:02,399 --> 00:17:04,480
well a collection of vulnerable drivers

444
00:17:04,480 --> 00:17:07,599
and it allows you to sideload your own

445
00:17:07,599 --> 00:17:09,839
driver which is unsigned which is

446
00:17:09,839 --> 00:17:11,520
typically not possible because you're

447
00:17:11,520 --> 00:17:13,839
exploiting another vulnerable signed

448
00:17:13,839 --> 00:17:15,919
driver that has kernel read write

449
00:17:15,919 --> 00:17:18,559
privileges you are allowed to sideload a

450
00:17:18,559 --> 00:17:21,280
unsigned driver and that inside driver

451
00:17:21,280 --> 00:17:23,520
is called ghost in the locks and ghost

452
00:17:23,520 --> 00:17:26,799
in the locks will simply patch the nt

453
00:17:26,799 --> 00:17:28,319
trace events

454
00:17:28,319 --> 00:17:30,559
function and it will immediately return

455
00:17:30,559 --> 00:17:32,320
so that means every time the function is

456
00:17:32,320 --> 00:17:34,559
called it's going to return so it's not

457
00:17:34,559 --> 00:17:36,080
going to do anything it's just going to

458
00:17:36,080 --> 00:17:38,480
say okay i did something but in reality

459
00:17:38,480 --> 00:17:40,640
it actually didn't do anything and that

460
00:17:40,640 --> 00:17:44,320
also bypasses um the event as you will

461
00:17:44,320 --> 00:17:46,799
see here in just a moment

462
00:17:46,799 --> 00:17:48,320
so once again

463
00:17:48,320 --> 00:17:51,919
uh here you can see event log actually

464
00:17:51,919 --> 00:17:53,120
running

465
00:17:53,120 --> 00:17:54,960
and there's going to be a powershell

466
00:17:54,960 --> 00:17:57,039
prompt in just a minute

467
00:17:57,039 --> 00:18:00,600
just give it a second

468
00:18:05,760 --> 00:18:08,559
the powershell window spawns

469
00:18:08,559 --> 00:18:10,559
and normally you would suspect that a

470
00:18:10,559 --> 00:18:12,799
process id one will be registered in

471
00:18:12,799 --> 00:18:16,640
sysmon process id1 is process create but

472
00:18:16,640 --> 00:18:19,120
in reality there's nothing there why not

473
00:18:19,120 --> 00:18:21,280
because ghost in the locks patched that

474
00:18:21,280 --> 00:18:23,360
function and simply didn't write

475
00:18:23,360 --> 00:18:26,880
anything to the sysmon event log

476
00:18:26,880 --> 00:18:28,799
and then the third one

477
00:18:28,799 --> 00:18:31,120
is actually um the sneakiest one in my

478
00:18:31,120 --> 00:18:33,520
opinion and uh randy from the blue side

479
00:18:33,520 --> 00:18:36,400
will definitely agree with me there um

480
00:18:36,400 --> 00:18:39,360
this one isn't simply nuking anything

481
00:18:39,360 --> 00:18:42,320
it's also not simply patching

482
00:18:42,320 --> 00:18:44,480
all of the functions this is actually a

483
00:18:44,480 --> 00:18:45,280
very

484
00:18:45,280 --> 00:18:47,039
very sneaky

485
00:18:47,039 --> 00:18:49,600
thing botsa came up with and he actually

486
00:18:49,600 --> 00:18:52,000
used jara which is typically a blue

487
00:18:52,000 --> 00:18:55,280
teamer's tool but he uses it offensively

488
00:18:55,280 --> 00:18:58,080
so what um

489
00:18:58,080 --> 00:19:00,400
etw event mute

490
00:19:00,400 --> 00:19:02,880
does is it's going to inject

491
00:19:02,880 --> 00:19:06,080
a new threat into that svc host that is

492
00:19:06,080 --> 00:19:08,160
running the event block and it's going

493
00:19:08,160 --> 00:19:11,520
to just simply listen for new events

494
00:19:11,520 --> 00:19:12,320
if

495
00:19:12,320 --> 00:19:13,600
an event

496
00:19:13,600 --> 00:19:16,080
is actually hitting that event look

497
00:19:16,080 --> 00:19:18,480
service and it matches

498
00:19:18,480 --> 00:19:21,840
a jararu it's going to drop it so it's

499
00:19:21,840 --> 00:19:23,679
going to do that return it's going to

500
00:19:23,679 --> 00:19:26,160
drop it it's not going to lock anything

501
00:19:26,160 --> 00:19:28,880
if it doesn't match the jar however it's

502
00:19:28,880 --> 00:19:31,200
simply going to keep writing so it's

503
00:19:31,200 --> 00:19:33,760
only going to take very very specific

504
00:19:33,760 --> 00:19:36,640
attacks based on java rules and it's

505
00:19:36,640 --> 00:19:39,120
going to make decisions based on that if

506
00:19:39,120 --> 00:19:41,600
it's going to get hit it will discard it

507
00:19:41,600 --> 00:19:43,520
if it's not getting hit the event block

508
00:19:43,520 --> 00:19:46,320
will just resume as normal which is very

509
00:19:46,320 --> 00:19:48,640
very tricky for a defender to defend

510
00:19:48,640 --> 00:19:50,960
against

511
00:19:51,679 --> 00:19:54,080
so same calling communications to the

512
00:19:54,080 --> 00:19:56,720
seam that one is actually very very

513
00:19:56,720 --> 00:19:58,240
straightforward

514
00:19:58,240 --> 00:20:00,240
because here i'm actually cheating a

515
00:20:00,240 --> 00:20:02,960
little bit i know that sentinel is being

516
00:20:02,960 --> 00:20:06,480
used in our environment as a seam and

517
00:20:06,480 --> 00:20:09,120
it's well documented by microsoft uh

518
00:20:09,120 --> 00:20:11,840
there's actually a command line

519
00:20:11,840 --> 00:20:13,679
that you can use a powershell script to

520
00:20:13,679 --> 00:20:15,760
enroll yourself into

521
00:20:15,760 --> 00:20:18,559
sentinel and here you can clearly see

522
00:20:18,559 --> 00:20:20,880
that health service is being used for

523
00:20:20,880 --> 00:20:21,919
this

524
00:20:21,919 --> 00:20:23,919
now if you're familiar with cis internal

525
00:20:23,919 --> 00:20:26,080
tools you know that cis internals

526
00:20:26,080 --> 00:20:27,280
actually has

527
00:20:27,280 --> 00:20:30,159
a tcp view package

528
00:20:30,159 --> 00:20:33,760
that you can run in order for you to see

529
00:20:33,760 --> 00:20:35,520
every process that is running on your

530
00:20:35,520 --> 00:20:37,120
system and whether or not they are

531
00:20:37,120 --> 00:20:39,919
creating a connection to the internet so

532
00:20:39,919 --> 00:20:42,240
here you can see how service

533
00:20:42,240 --> 00:20:44,640
and my first train of thought was i'm

534
00:20:44,640 --> 00:20:46,840
just going to um

535
00:20:46,840 --> 00:20:50,400
blacklists a specific ip in the firewall

536
00:20:50,400 --> 00:20:52,480
but then if you look at this screenshot

537
00:20:52,480 --> 00:20:54,640
you'll actually see it's not just the

538
00:20:54,640 --> 00:20:57,520
227 but also the 228 that is being

539
00:20:57,520 --> 00:21:00,400
contacted by health service so then i

540
00:21:00,400 --> 00:21:02,960
was thinking okay i can just blacklist

541
00:21:02,960 --> 00:21:05,840
these two ips but then i started talking

542
00:21:05,840 --> 00:21:07,760
to randy and randy actually linked me

543
00:21:07,760 --> 00:21:10,159
microsoft documentation again of all the

544
00:21:10,159 --> 00:21:12,320
ips that azure

545
00:21:12,320 --> 00:21:14,880
are using and there are a ton of them

546
00:21:14,880 --> 00:21:16,640
and i didn't want to go through the

547
00:21:16,640 --> 00:21:18,240
hassle of actually creating black

548
00:21:18,240 --> 00:21:21,440
crystals for all those ips because not

549
00:21:21,440 --> 00:21:23,600
all those ips are just sentinel there

550
00:21:23,600 --> 00:21:26,400
could actually be other services running

551
00:21:26,400 --> 00:21:28,080
in azure that you still want to

552
00:21:28,080 --> 00:21:30,240
communicate to so instead of using

553
00:21:30,240 --> 00:21:34,320
eyepiece i just went for a very very uh

554
00:21:34,320 --> 00:21:36,559
dirty approach and i just blacklisted

555
00:21:36,559 --> 00:21:38,880
the entire binary

556
00:21:38,880 --> 00:21:40,720
and how did i do that well there are

557
00:21:40,720 --> 00:21:42,240
actually two approaches that you can

558
00:21:42,240 --> 00:21:46,400
take you can either use the nutshell

559
00:21:46,400 --> 00:21:48,400
command so that's a utility that is

560
00:21:48,400 --> 00:21:51,120
living in every windows operating system

561
00:21:51,120 --> 00:21:53,600
using the adv firewall command you can

562
00:21:53,600 --> 00:21:55,919
actually manipulate the the local

563
00:21:55,919 --> 00:21:57,200
firewall

564
00:21:57,200 --> 00:21:59,360
so you can add a rule

565
00:21:59,360 --> 00:22:02,640
based for example on a binary or you

566
00:22:02,640 --> 00:22:05,039
could also do it in c plus plus you

567
00:22:05,039 --> 00:22:07,280
could also do it in c sharp and if you

568
00:22:07,280 --> 00:22:09,360
want to use c sharp there's actually a

569
00:22:09,360 --> 00:22:11,440
very nice

570
00:22:11,440 --> 00:22:13,760
package already available to you there's

571
00:22:13,760 --> 00:22:16,720
a binary a library to use and it's very

572
00:22:16,720 --> 00:22:18,799
very simple and just a few lines of code

573
00:22:18,799 --> 00:22:20,320
as you can see here

574
00:22:20,320 --> 00:22:22,640
you can blacklist uh whatever you want

575
00:22:22,640 --> 00:22:25,200
honestly so that is what i did i created

576
00:22:25,200 --> 00:22:27,840
a new rule see a nerds and

577
00:22:27,840 --> 00:22:30,159
you can give it an arbitrary

578
00:22:30,159 --> 00:22:32,159
binary to blacklist and in this case

579
00:22:32,159 --> 00:22:34,080
we're obviously targeting that

580
00:22:34,080 --> 00:22:37,080
howservice.exe

581
00:22:37,840 --> 00:22:38,799
so

582
00:22:38,799 --> 00:22:40,880
this is some some nice ascii arts

583
00:22:40,880 --> 00:22:43,440
because no tool is a complete without

584
00:22:43,440 --> 00:22:45,120
asking

585
00:22:45,120 --> 00:22:47,200
purple power it's available on github as

586
00:22:47,200 --> 00:22:48,880
well as i already mentioned i'm going to

587
00:22:48,880 --> 00:22:50,880
drop it in the discord the link if

588
00:22:50,880 --> 00:22:52,240
you're interested in checking out that

589
00:22:52,240 --> 00:22:53,440
goat

590
00:22:53,440 --> 00:22:56,000
but without further ado let's just

591
00:22:56,000 --> 00:22:59,280
do a very very short live demonstration

592
00:22:59,280 --> 00:23:02,480
so you can actually see it in action

593
00:23:02,480 --> 00:23:04,880
and in order to do that i need to go

594
00:23:04,880 --> 00:23:09,000
into my remote desktop

595
00:23:10,159 --> 00:23:13,200
i will need to sign into my domain admin

596
00:23:13,200 --> 00:23:15,600
account

597
00:23:16,320 --> 00:23:18,640
don't do this by the way in production

598
00:23:18,640 --> 00:23:20,880
don't just log in as a domain admin

599
00:23:20,880 --> 00:23:23,840
everywhere

600
00:23:27,919 --> 00:23:30,159
i don't want to stay up to date i'm

601
00:23:30,159 --> 00:23:31,919
sorry this is

602
00:23:31,919 --> 00:23:35,679
a outdated operating system by design

603
00:23:35,679 --> 00:23:37,840
so here we have the purple power the

604
00:23:37,840 --> 00:23:40,080
help menu

605
00:23:40,080 --> 00:23:42,320
well it's a bit messed up sorry about

606
00:23:42,320 --> 00:23:45,679
that so i have nuke i have mute i have

607
00:23:45,679 --> 00:23:47,520
ghost in the locks i have backdoor i

608
00:23:47,520 --> 00:23:49,520
even have cobalt strike which will

609
00:23:49,520 --> 00:23:52,880
inject a predefined cobalt strike

610
00:23:52,880 --> 00:23:56,080
beacon so don't use this if you're

611
00:23:56,080 --> 00:23:58,400
pulling the codes from github because

612
00:23:58,400 --> 00:24:00,400
chances are that that global strike

613
00:24:00,400 --> 00:24:02,960
instance is down but in the off chance

614
00:24:02,960 --> 00:24:05,039
that it's up you're giving me a free

615
00:24:05,039 --> 00:24:08,559
beacon on your system so don't uh run

616
00:24:08,559 --> 00:24:10,720
the the cobalt commands unless you

617
00:24:10,720 --> 00:24:14,400
modify it yourself with new shell codes

618
00:24:14,400 --> 00:24:16,159
uh but yeah without further ado let's

619
00:24:16,159 --> 00:24:19,039
just for example uh nuke

620
00:24:19,039 --> 00:24:20,640
the eventblock

621
00:24:20,640 --> 00:24:25,120
and let's add a backdoor

622
00:24:25,120 --> 00:24:26,960
to our system

623
00:24:26,960 --> 00:24:28,799
so what it's going to do it's going to

624
00:24:28,799 --> 00:24:29,840
patch

625
00:24:29,840 --> 00:24:32,960
omc it's going to patch edw then it's

626
00:24:32,960 --> 00:24:35,200
going to reflectively load

627
00:24:35,200 --> 00:24:37,760
a other c sharp binary which is uh

628
00:24:37,760 --> 00:24:40,400
called sharp event log nuker something i

629
00:24:40,400 --> 00:24:41,600
created

630
00:24:41,600 --> 00:24:43,760
some nice ascii there again

631
00:24:43,760 --> 00:24:47,360
here you can see that the nuke actually

632
00:24:47,360 --> 00:24:51,120
found the svc host process with process

633
00:24:51,120 --> 00:24:55,600
id 1596 it suspends all these

634
00:24:55,600 --> 00:24:57,919
threats it nuked it successfully it

635
00:24:57,919 --> 00:25:00,799
created a new invisible backdoor using

636
00:25:00,799 --> 00:25:02,400
sharp invisible back door which is

637
00:25:02,400 --> 00:25:04,880
another binary i wrote once again some

638
00:25:04,880 --> 00:25:07,760
nice oscar there and it's actually a

639
00:25:07,760 --> 00:25:09,919
dollar sign user with passwords backdoor

640
00:25:09,919 --> 00:25:12,640
123 which was successfully created and

641
00:25:12,640 --> 00:25:15,919
added to the admin group obviously all

642
00:25:15,919 --> 00:25:18,080
this stuff relies on local admin

643
00:25:18,080 --> 00:25:21,360
privileges so this purple power binary

644
00:25:21,360 --> 00:25:22,559
needs to be

645
00:25:22,559 --> 00:25:25,360
ran as a local admin if it's not local

646
00:25:25,360 --> 00:25:27,440
admin you won't be able to manipulate

647
00:25:27,440 --> 00:25:29,440
the eventbook service and we can

648
00:25:29,440 --> 00:25:32,159
actually i haven't um

649
00:25:32,159 --> 00:25:34,559
haven't checked this prior to the uh to

650
00:25:34,559 --> 00:25:37,039
the demo so i hope it worked but let's

651
00:25:37,039 --> 00:25:37,919
just

652
00:25:37,919 --> 00:25:40,400
verify whether or not it works

653
00:25:40,400 --> 00:25:43,919
using a process package

654
00:25:43,919 --> 00:25:44,799
so

655
00:25:44,799 --> 00:25:47,440
1596

656
00:25:47,440 --> 00:25:49,840
svc hosts oh yeah that's not going to

657
00:25:49,840 --> 00:25:52,320
work i need to use process hacker as

658
00:25:52,320 --> 00:25:56,799
local admin as well sorry about that

659
00:25:56,799 --> 00:25:59,279
come on

660
00:25:59,279 --> 00:26:02,720
give me my keyboards okay it doesn't but

661
00:26:02,720 --> 00:26:04,320
it's in the recent so it doesn't really

662
00:26:04,320 --> 00:26:06,000
matter

663
00:26:06,000 --> 00:26:06,960
right

664
00:26:06,960 --> 00:26:08,240
there you go

665
00:26:08,240 --> 00:26:11,360
one five nine six that's svc host there

666
00:26:11,360 --> 00:26:13,039
you go

667
00:26:13,039 --> 00:26:15,840
and i hope if we check the threats yep

668
00:26:15,840 --> 00:26:17,440
there you go

669
00:26:17,440 --> 00:26:20,559
the threats are indeed all suspended uh

670
00:26:20,559 --> 00:26:21,919
all the threats to

671
00:26:21,919 --> 00:26:24,880
that uh dll that is responsible for the

672
00:26:24,880 --> 00:26:27,279
event look so there you go proof that it

673
00:26:27,279 --> 00:26:28,960
works hey

674
00:26:28,960 --> 00:26:31,600
very nice

675
00:26:31,600 --> 00:26:35,279
uh so that's a demo of uh purple power

676
00:26:35,279 --> 00:26:37,360
obviously you could use ghost and locks

677
00:26:37,360 --> 00:26:38,640
as well or

678
00:26:38,640 --> 00:26:40,400
mute if you want to feel free to check

679
00:26:40,400 --> 00:26:41,760
that out

680
00:26:41,760 --> 00:26:45,520
if you don't believe me that it works

681
00:26:49,600 --> 00:26:53,840
i need to start the presentation again

682
00:26:54,080 --> 00:26:55,360
there you go

683
00:26:55,360 --> 00:26:57,120
so that was the demo and now i'm going

684
00:26:57,120 --> 00:26:59,520
to give the word to my esteemed

685
00:26:59,520 --> 00:27:00,720
colleague

686
00:27:00,720 --> 00:27:03,279
randy for his sites

687
00:27:03,279 --> 00:27:04,960
so he's going to talk about the blue

688
00:27:04,960 --> 00:27:08,080
perspective here randy take it away

689
00:27:08,080 --> 00:27:10,240
thank you so much john francois i really

690
00:27:10,240 --> 00:27:12,320
enjoyed working on this project with you

691
00:27:12,320 --> 00:27:14,640
and i think everyone in the audience

692
00:27:14,640 --> 00:27:16,400
seeing this so far if they're on the red

693
00:27:16,400 --> 00:27:18,880
team side is probably already excited

694
00:27:18,880 --> 00:27:20,960
and maybe already downloading

695
00:27:20,960 --> 00:27:23,440
your github so that they can start

696
00:27:23,440 --> 00:27:25,360
messing with us everybody on the blue

697
00:27:25,360 --> 00:27:27,520
team side is probably freaking out like

698
00:27:27,520 --> 00:27:30,320
oh my gosh what is going to happen

699
00:27:30,320 --> 00:27:32,480
if somebody uses these tools there's so

700
00:27:32,480 --> 00:27:35,200
many different ways to bypass my logs to

701
00:27:35,200 --> 00:27:37,520
hide things from the edr what am i going

702
00:27:37,520 --> 00:27:39,039
to do

703
00:27:39,039 --> 00:27:40,799
and the approach that i'd like to

704
00:27:40,799 --> 00:27:42,080
recommend

705
00:27:42,080 --> 00:27:44,399
is that in any case when you're looking

706
00:27:44,399 --> 00:27:45,520
at

707
00:27:45,520 --> 00:27:48,640
red team tactics um think about these

708
00:27:48,640 --> 00:27:51,520
worst case scenarios and instead of just

709
00:27:51,520 --> 00:27:53,440
getting stuck think about what you could

710
00:27:53,440 --> 00:27:55,679
do what what can you do if you can't

711
00:27:55,679 --> 00:27:58,159
trust your logs um that's not to say

712
00:27:58,159 --> 00:28:00,000
that you want to give up logging like oh

713
00:28:00,000 --> 00:28:01,760
it's it's no good because most of the

714
00:28:01,760 --> 00:28:03,760
time that's exactly what you need to

715
00:28:03,760 --> 00:28:05,840
catch most of the threats so we're not

716
00:28:05,840 --> 00:28:08,080
going to give up logging but we are

717
00:28:08,080 --> 00:28:11,440
going to add an additional approach

718
00:28:11,440 --> 00:28:12,559
um

719
00:28:12,559 --> 00:28:13,440
and

720
00:28:13,440 --> 00:28:15,520
when you're thinking about

721
00:28:15,520 --> 00:28:17,760
an adversary blocking your logs you want

722
00:28:17,760 --> 00:28:20,240
to start looking for what you cannot see

723
00:28:20,240 --> 00:28:22,640
or looking for what's not there

724
00:28:22,640 --> 00:28:25,520
there's actually a really great story

725
00:28:25,520 --> 00:28:26,480
from

726
00:28:26,480 --> 00:28:28,640
many years ago in computer security

727
00:28:28,640 --> 00:28:31,039
history that cliff stoll wrote about in

728
00:28:31,039 --> 00:28:33,120
the book the cuckoo's egg i don't know

729
00:28:33,120 --> 00:28:34,799
if you've read that before but if you

730
00:28:34,799 --> 00:28:36,960
haven't i really recommend it it's a

731
00:28:36,960 --> 00:28:39,039
great story about how a system

732
00:28:39,039 --> 00:28:41,600
administrator at uc berkeley

733
00:28:41,600 --> 00:28:43,760
caught a very advanced russian

734
00:28:43,760 --> 00:28:45,840
state-sponsored hacker who was going

735
00:28:45,840 --> 00:28:48,080
after military secrets

736
00:28:48,080 --> 00:28:51,679
because he noticed that there was a

737
00:28:51,679 --> 00:28:54,720
difference there was

738
00:28:54,960 --> 00:28:57,120
an unexplained

739
00:28:57,120 --> 00:28:58,480
difference between

740
00:28:58,480 --> 00:29:01,200
the logging time that the unix computers

741
00:29:01,200 --> 00:29:03,360
reported that they were being used and

742
00:29:03,360 --> 00:29:06,000
another system that was keeping track of

743
00:29:06,000 --> 00:29:08,480
administration of amount of computer

744
00:29:08,480 --> 00:29:10,480
time that different users had used for

745
00:29:10,480 --> 00:29:13,039
billing purposes noticing the difference

746
00:29:13,039 --> 00:29:15,200
between those two logs

747
00:29:15,200 --> 00:29:16,559
told him that there was something

748
00:29:16,559 --> 00:29:18,640
happening that was not being reported

749
00:29:18,640 --> 00:29:20,159
the way that it should be

750
00:29:20,159 --> 00:29:22,880
so um as we were approaching you know

751
00:29:22,880 --> 00:29:25,600
this idea of how would you spot somebody

752
00:29:25,600 --> 00:29:28,240
who is a ghost in your own logs

753
00:29:28,240 --> 00:29:29,679
i thought of really the same sort of

754
00:29:29,679 --> 00:29:31,440
approach what if you had a different

755
00:29:31,440 --> 00:29:33,760
system something that the attacker did

756
00:29:33,760 --> 00:29:35,919
not know about that was auditing the use

757
00:29:35,919 --> 00:29:38,240
of the system in another way now the

758
00:29:38,240 --> 00:29:40,080
most straightforward approach would be

759
00:29:40,080 --> 00:29:43,360
just have a second a second sim that has

760
00:29:43,360 --> 00:29:45,520
uh log forwarding going to it you know

761
00:29:45,520 --> 00:29:48,000
maybe some secondary logging but there's

762
00:29:48,000 --> 00:29:50,000
a couple of problems with that one is

763
00:29:50,000 --> 00:29:51,600
the attacker is probably going to see

764
00:29:51,600 --> 00:29:53,279
that as well if they're going after your

765
00:29:53,279 --> 00:29:55,520
logs they're probably going to

766
00:29:55,520 --> 00:29:58,080
see it if it's too much the same as what

767
00:29:58,080 --> 00:29:59,919
you already have

768
00:29:59,919 --> 00:30:01,760
and whatever method they use to block

769
00:30:01,760 --> 00:30:04,240
that probably will be used to block

770
00:30:04,240 --> 00:30:06,559
your secondary system as well so that's

771
00:30:06,559 --> 00:30:08,320
really out but the second reason you

772
00:30:08,320 --> 00:30:09,760
wouldn't want to do that is purely

773
00:30:09,760 --> 00:30:11,760
economical if you're going to take a

774
00:30:11,760 --> 00:30:13,600
second copy of all of your logs you're

775
00:30:13,600 --> 00:30:16,159
probably paying double for whatever

776
00:30:16,159 --> 00:30:18,000
service you're paying for in the first

777
00:30:18,000 --> 00:30:20,720
place and nobody on a security team

778
00:30:20,720 --> 00:30:22,320
wants to get a request hey could i

779
00:30:22,320 --> 00:30:24,559
double my budget for next year just as a

780
00:30:24,559 --> 00:30:26,559
backup right you don't want to be doing

781
00:30:26,559 --> 00:30:28,320
that so

782
00:30:28,320 --> 00:30:29,440
again

783
00:30:29,440 --> 00:30:32,240
i decided that the right approach to

784
00:30:32,240 --> 00:30:34,080
solving this problem would be to develop

785
00:30:34,080 --> 00:30:36,559
some new software and i will also drop a

786
00:30:36,559 --> 00:30:38,720
link to the github project where you can

787
00:30:38,720 --> 00:30:40,720
download the software for the blue team

788
00:30:40,720 --> 00:30:43,520
side um for fun because we were talking

789
00:30:43,520 --> 00:30:45,840
about battling ghosts in the logs we

790
00:30:45,840 --> 00:30:48,799
decided to use a ghostbusters theme and

791
00:30:48,799 --> 00:30:51,840
the the software is called thinkmen

792
00:30:51,840 --> 00:30:53,279
there's all kinds of references to

793
00:30:53,279 --> 00:30:55,679
ghostbusters in here that i recommend if

794
00:30:55,679 --> 00:30:57,039
you're going to

795
00:30:57,039 --> 00:30:58,720
use this software

796
00:30:58,720 --> 00:31:00,240
in your environment you change all of

797
00:31:00,240 --> 00:31:02,880
these things because after attackers

798
00:31:02,880 --> 00:31:05,039
have viewed this presentation you don't

799
00:31:05,039 --> 00:31:06,720
want them looking for vincent on your

800
00:31:06,720 --> 00:31:08,159
systems

801
00:31:08,159 --> 00:31:08,880
so

802
00:31:08,880 --> 00:31:10,799
let's talk about the goals that we had

803
00:31:10,799 --> 00:31:13,440
we want to detect if the log collection

804
00:31:13,440 --> 00:31:15,440
network traffic is cut off if your log

805
00:31:15,440 --> 00:31:17,679
collectors no longer

806
00:31:17,679 --> 00:31:19,679
receiving events

807
00:31:19,679 --> 00:31:21,760
you also want to detect if locally logs

808
00:31:21,760 --> 00:31:25,279
have gone down and then um

809
00:31:25,279 --> 00:31:26,960
stretch goals if we could we wanted to

810
00:31:26,960 --> 00:31:28,640
see if we could detect

811
00:31:28,640 --> 00:31:31,360
that really really sneaky situation from

812
00:31:31,360 --> 00:31:34,000
bat sex software if the event logs are

813
00:31:34,000 --> 00:31:36,320
just being filtered if most of them are

814
00:31:36,320 --> 00:31:37,679
going through but just some of them

815
00:31:37,679 --> 00:31:41,120
aren't that's really hard um and then

816
00:31:41,120 --> 00:31:43,360
the last goal that we have is hide

817
00:31:43,360 --> 00:31:45,200
vincman so that the attacker doesn't see

818
00:31:45,200 --> 00:31:46,720
what's going on

819
00:31:46,720 --> 00:31:49,120
don't get caught otherwise your backup

820
00:31:49,120 --> 00:31:51,120
system is going to just become a

821
00:31:51,120 --> 00:31:52,960
liability as well

822
00:31:52,960 --> 00:31:55,760
so thinkman is also designed in c-sharp

823
00:31:55,760 --> 00:31:57,519
using.net

824
00:31:57,519 --> 00:31:58,880
it uses

825
00:31:58,880 --> 00:32:01,440
event tracing for windows etw

826
00:32:01,440 --> 00:32:04,399
and i implemented this as a dll because

827
00:32:04,399 --> 00:32:06,000
one of the things we wanted to be able

828
00:32:06,000 --> 00:32:08,960
to do to hide bin from the

829
00:32:08,960 --> 00:32:12,000
adversary is to actually use a red team

830
00:32:12,000 --> 00:32:14,640
technique and inject the dll into some

831
00:32:14,640 --> 00:32:16,799
other process that you wouldn't think to

832
00:32:16,799 --> 00:32:18,000
look into

833
00:32:18,000 --> 00:32:19,600
there are some requirements for that

834
00:32:19,600 --> 00:32:22,320
process it does need to be running

835
00:32:22,320 --> 00:32:24,960
not as the local admin but it does need

836
00:32:24,960 --> 00:32:26,080
to be running

837
00:32:26,080 --> 00:32:27,919
with a group that

838
00:32:27,919 --> 00:32:30,880
has permissions for um

839
00:32:30,880 --> 00:32:33,679
subscribing to etw events

840
00:32:33,679 --> 00:32:35,200
and i'll link to some microsoft

841
00:32:35,200 --> 00:32:37,360
documentation about what local group you

842
00:32:37,360 --> 00:32:38,880
can set up and what the permissions need

843
00:32:38,880 --> 00:32:40,559
to be

844
00:32:40,559 --> 00:32:43,200
vinkman needs to and in fact it does

845
00:32:43,200 --> 00:32:44,880
with the implementation that we came up

846
00:32:44,880 --> 00:32:47,360
with um check the running processes on a

847
00:32:47,360 --> 00:32:50,799
regular base basis um you also have the

848
00:32:50,799 --> 00:32:53,120
opportunity uh when you've got the

849
00:32:53,120 --> 00:32:55,200
running processes to check all of the

850
00:32:55,200 --> 00:32:56,960
threads that are in there this is not

851
00:32:56,960 --> 00:32:59,200
something that i've implemented yet but

852
00:32:59,200 --> 00:33:02,080
it's a future design to do some basic

853
00:33:02,080 --> 00:33:03,840
checks to see what are the threads in

854
00:33:03,840 --> 00:33:05,679
each of these processes and is there

855
00:33:05,679 --> 00:33:08,240
something going on that uh maybe we

856
00:33:08,240 --> 00:33:10,559
might want to alert specially on

857
00:33:10,559 --> 00:33:11,760
then going through each of those

858
00:33:11,760 --> 00:33:13,919
processes we want to count

859
00:33:13,919 --> 00:33:16,399
the number of events coming through etw

860
00:33:16,399 --> 00:33:17,840
for each one of them

861
00:33:17,840 --> 00:33:20,720
we're not going to log all the details

862
00:33:20,720 --> 00:33:22,720
of those events though this is the trick

863
00:33:22,720 --> 00:33:24,480
to try to save us some money and save us

864
00:33:24,480 --> 00:33:27,360
some resources we're just reporting on

865
00:33:27,360 --> 00:33:30,159
how many events of each type for each

866
00:33:30,159 --> 00:33:31,760
process we're seeing

867
00:33:31,760 --> 00:33:35,039
then we need to send those logs not to

868
00:33:35,039 --> 00:33:36,640
the log collector we don't want to send

869
00:33:36,640 --> 00:33:38,159
them to the same place that is being

870
00:33:38,159 --> 00:33:40,480
blocked by the adversary perhaps we want

871
00:33:40,480 --> 00:33:43,039
to send them to some place inside of our

872
00:33:43,039 --> 00:33:45,360
network that the adversary is not going

873
00:33:45,360 --> 00:33:47,760
to want to block communication to so in

874
00:33:47,760 --> 00:33:49,919
our test lab we just sent them to a file

875
00:33:49,919 --> 00:33:50,960
server

876
00:33:50,960 --> 00:33:53,440
that was on the domain controller so if

877
00:33:53,440 --> 00:33:55,600
their adversary is blocking traffic

878
00:33:55,600 --> 00:33:56,960
between the workstation and the domain

879
00:33:56,960 --> 00:33:58,799
controller they're causing themselves as

880
00:33:58,799 --> 00:34:00,080
many problems as they're causing

881
00:34:00,080 --> 00:34:01,760
everyone else and they're going to get

882
00:34:01,760 --> 00:34:03,200
caught right away

883
00:34:03,200 --> 00:34:04,880
so we wanted to

884
00:34:04,880 --> 00:34:06,559
send the log someplace that wouldn't be

885
00:34:06,559 --> 00:34:09,679
so obvious and wouldn't get blocked

886
00:34:09,679 --> 00:34:11,359
one of the things that we also wanted to

887
00:34:11,359 --> 00:34:13,839
do with this is to be able to change the

888
00:34:13,839 --> 00:34:15,520
configuration on the fly like where are

889
00:34:15,520 --> 00:34:18,639
you sending the logs which etw

890
00:34:18,639 --> 00:34:20,639
events are you subscribing to

891
00:34:20,639 --> 00:34:24,000
and so i implemented that using dns um

892
00:34:24,000 --> 00:34:26,320
dns has a lot of different record types

893
00:34:26,320 --> 00:34:28,399
one of them that is very convenient for

894
00:34:28,399 --> 00:34:31,199
red teams and blue teams both is the txt

895
00:34:31,199 --> 00:34:33,199
record type you get just like four

896
00:34:33,199 --> 00:34:36,960
kilobytes of text that you can

897
00:34:36,960 --> 00:34:40,159
respond to dns queries with and so we

898
00:34:40,159 --> 00:34:43,359
use internal active directory dns txt

899
00:34:43,359 --> 00:34:45,839
records to tell the vinkman client where

900
00:34:45,839 --> 00:34:47,918
to send the logs and which etw

901
00:34:47,918 --> 00:34:49,359
subscribers to

902
00:34:49,359 --> 00:34:52,639
um to hook up to and then every 60

903
00:34:52,639 --> 00:34:54,399
seconds it checks in with those again

904
00:34:54,399 --> 00:34:55,839
and if they've changed if you've made a

905
00:34:55,839 --> 00:34:57,839
change as the administrator

906
00:34:57,839 --> 00:34:59,599
all of the linkman clients across your

907
00:34:59,599 --> 00:35:01,599
enterprise will get the change within

908
00:35:01,599 --> 00:35:04,320
the next minute or so um change the

909
00:35:04,320 --> 00:35:06,560
config on the fly and then anything with

910
00:35:06,560 --> 00:35:07,839
ghostbusters

911
00:35:07,839 --> 00:35:10,560
themes uh needs a pke meter or an

912
00:35:10,560 --> 00:35:11,760
aurascope

913
00:35:11,760 --> 00:35:12,480
so

914
00:35:12,480 --> 00:35:14,400
we use that just as far as naming

915
00:35:14,400 --> 00:35:16,400
conventions but we had a lot of fun with

916
00:35:16,400 --> 00:35:17,359
this

917
00:35:17,359 --> 00:35:19,440
so we've really already talked about

918
00:35:19,440 --> 00:35:22,400
what uh etw is um so i won't go into

919
00:35:22,400 --> 00:35:23,920
that a whole lot but i just wanted to

920
00:35:23,920 --> 00:35:27,040
show you um a couple of the dns txt

921
00:35:27,040 --> 00:35:28,160
records

922
00:35:28,160 --> 00:35:30,400
that we use um so

923
00:35:30,400 --> 00:35:31,440
the

924
00:35:31,440 --> 00:35:32,880
um

925
00:35:32,880 --> 00:35:36,240
uh the dns name that i chose for this is

926
00:35:36,240 --> 00:35:39,200
uh vinkman dash etw dash providers dot

927
00:35:39,200 --> 00:35:41,119
and then whatever your local domain name

928
00:35:41,119 --> 00:35:43,200
is you definitely want to change that so

929
00:35:43,200 --> 00:35:46,079
that the adversaries aren't looking for

930
00:35:46,079 --> 00:35:49,040
linkman in dns records but you can

931
00:35:49,040 --> 00:35:50,560
change that just with a config in the

932
00:35:50,560 --> 00:35:52,720
software very easily

933
00:35:52,720 --> 00:35:53,839
and then

934
00:35:53,839 --> 00:35:57,040
as the value for the txt you simply put

935
00:35:57,040 --> 00:35:59,760
the names of the etw providers you want

936
00:35:59,760 --> 00:36:01,839
separated with a pipe character so

937
00:36:01,839 --> 00:36:03,040
that's it

938
00:36:03,040 --> 00:36:04,880
you can change that on the fly and all

939
00:36:04,880 --> 00:36:08,480
the vinkman clients will be updated

940
00:36:09,119 --> 00:36:11,440
next i thought really hard about what

941
00:36:11,440 --> 00:36:13,040
log format

942
00:36:13,040 --> 00:36:14,640
we wanted to use for this because

943
00:36:14,640 --> 00:36:16,560
obviously we need to report all of these

944
00:36:16,560 --> 00:36:18,079
details

945
00:36:18,079 --> 00:36:21,680
at first i thought we wanted to use json

946
00:36:21,680 --> 00:36:23,280
as a format just because it's easy to

947
00:36:23,280 --> 00:36:25,760
parse it's very standard the problem is

948
00:36:25,760 --> 00:36:27,280
then that

949
00:36:27,280 --> 00:36:29,210
repeats the

950
00:36:29,210 --> 00:36:30,320
[Music]

951
00:36:30,320 --> 00:36:32,240
the names of the columns throughout

952
00:36:32,240 --> 00:36:34,320
every single record

953
00:36:34,320 --> 00:36:36,400
and it ends up being very heavy as far

954
00:36:36,400 --> 00:36:38,400
as the logs and if you're paying per

955
00:36:38,400 --> 00:36:40,880
gigabyte of logs ingested um you

956
00:36:40,880 --> 00:36:42,160
definitely want to keep your logs as

957
00:36:42,160 --> 00:36:45,119
lightweight as possible um so what i did

958
00:36:45,119 --> 00:36:48,400
instead was use a um like a csv format

959
00:36:48,400 --> 00:36:50,640
with a pipe character as the delimiter

960
00:36:50,640 --> 00:36:52,800
and then every so often

961
00:36:52,800 --> 00:36:56,160
when the column names were updated i

962
00:36:56,160 --> 00:36:58,640
would just repeat out into the logs a

963
00:36:58,640 --> 00:37:00,240
new column header

964
00:37:00,240 --> 00:37:02,480
and this worked out very well ingesting

965
00:37:02,480 --> 00:37:04,800
these logs into azure sentinel which is

966
00:37:04,800 --> 00:37:06,960
what we used for all of the analysis

967
00:37:06,960 --> 00:37:09,839
next slide please

968
00:37:10,240 --> 00:37:12,960
so um let's take a look at what actually

969
00:37:12,960 --> 00:37:15,920
happened um here is here's what these

970
00:37:15,920 --> 00:37:17,839
charts represent

971
00:37:17,839 --> 00:37:18,800
we

972
00:37:18,800 --> 00:37:20,320
ran queries

973
00:37:20,320 --> 00:37:21,119
for

974
00:37:21,119 --> 00:37:23,599
uh time intervals of every two minutes

975
00:37:23,599 --> 00:37:25,440
and looked at in each of those two

976
00:37:25,440 --> 00:37:28,640
minute uh time intervals how many sysmon

977
00:37:28,640 --> 00:37:30,560
events did we get how many security

978
00:37:30,560 --> 00:37:32,880
events did we get from the endpoint that

979
00:37:32,880 --> 00:37:35,040
was under attack and then we looked at

980
00:37:35,040 --> 00:37:37,200
the same time scale um what were we

981
00:37:37,200 --> 00:37:40,079
getting from vinkman and the charts that

982
00:37:40,079 --> 00:37:41,680
you're going to see are the number of

983
00:37:41,680 --> 00:37:44,240
processes that vinkman recorded

984
00:37:44,240 --> 00:37:45,520
i'll show you at the end the difference

985
00:37:45,520 --> 00:37:47,040
between the processes and the number of

986
00:37:47,040 --> 00:37:49,680
etw events which got more complicated

987
00:37:49,680 --> 00:37:51,680
but this actually is the simpler way to

988
00:37:51,680 --> 00:37:53,680
do it and the research showed this is

989
00:37:53,680 --> 00:37:56,000
probably the easiest way to do it that

990
00:37:56,000 --> 00:37:58,400
is also the most effective so you can

991
00:37:58,400 --> 00:38:00,560
see at 10 33

992
00:38:00,560 --> 00:38:04,160
utc time um jean francois attacking the

993
00:38:04,160 --> 00:38:07,760
system uh ran the event log nuker um

994
00:38:07,760 --> 00:38:10,960
using sharp event log new nukes um you

995
00:38:10,960 --> 00:38:12,720
can speak to this if you'd like and also

996
00:38:12,720 --> 00:38:13,839
block the

997
00:38:13,839 --> 00:38:14,800
the

998
00:38:14,800 --> 00:38:17,280
firewall use a firewall rule to block

999
00:38:17,280 --> 00:38:19,599
the log collection and you can see it

1000
00:38:19,599 --> 00:38:22,320
absolutely worked like there is a big

1001
00:38:22,320 --> 00:38:25,040
blank space in this time when there were

1002
00:38:25,040 --> 00:38:26,720
no security events and there were no

1003
00:38:26,720 --> 00:38:28,320
cismod events

1004
00:38:28,320 --> 00:38:31,040
and then at 1057 the machine was

1005
00:38:31,040 --> 00:38:33,040
rebooted thinkpin was restarted the

1006
00:38:33,040 --> 00:38:34,160
firewall

1007
00:38:34,160 --> 00:38:36,400
rule block was removed

1008
00:38:36,400 --> 00:38:38,079
we do have some more research to do

1009
00:38:38,079 --> 00:38:40,000
because we found that there were some

1010
00:38:40,000 --> 00:38:41,839
logs that slipped in

1011
00:38:41,839 --> 00:38:43,200
at a time when we didn't think that

1012
00:38:43,200 --> 00:38:45,280
there should be um we've got some

1013
00:38:45,280 --> 00:38:46,880
theories about this that maybe there

1014
00:38:46,880 --> 00:38:48,640
were some logs that kind of got queued

1015
00:38:48,640 --> 00:38:51,119
up um somehow and then they got

1016
00:38:51,119 --> 00:38:53,839
forwarded to the sim later on um after

1017
00:38:53,839 --> 00:38:56,400
the system came back up uh but

1018
00:38:56,400 --> 00:38:57,920
we're definitely looking into that it

1019
00:38:57,920 --> 00:39:00,079
also could be that our clocks were not

1020
00:39:00,079 --> 00:39:02,560
quite synchronized and we just noted the

1021
00:39:02,560 --> 00:39:04,640
the time a little bit wrong but the good

1022
00:39:04,640 --> 00:39:07,200
thing to notice here is that while the

1023
00:39:07,200 --> 00:39:09,760
security logs and the sysmon events were

1024
00:39:09,760 --> 00:39:12,320
not being recorded at all by the sim

1025
00:39:12,320 --> 00:39:14,160
vinkman still was it had an alternate

1026
00:39:14,160 --> 00:39:15,680
path it wasn't being blocked it was

1027
00:39:15,680 --> 00:39:19,040
recording a different way and so we have

1028
00:39:19,040 --> 00:39:22,079
this opportunity as the defender to see

1029
00:39:22,079 --> 00:39:22,880
that

1030
00:39:22,880 --> 00:39:24,480
something is not right because there is

1031
00:39:24,480 --> 00:39:25,839
a difference between the accounting

1032
00:39:25,839 --> 00:39:28,880
system thinkman and our logging system

1033
00:39:28,880 --> 00:39:31,280
in the sim that is showing us there's no

1034
00:39:31,280 --> 00:39:33,760
security and no sysmon but we can see

1035
00:39:33,760 --> 00:39:35,200
that there are events and there are

1036
00:39:35,200 --> 00:39:36,880
processes running from this machine and

1037
00:39:36,880 --> 00:39:38,079
it's still on

1038
00:39:38,079 --> 00:39:40,400
next slide please

1039
00:39:40,400 --> 00:39:42,880
this is using the next um

1040
00:39:42,880 --> 00:39:44,400
technique for

1041
00:39:44,400 --> 00:39:46,480
purple power which was ghost in the logs

1042
00:39:46,480 --> 00:39:47,839
from bat sec

1043
00:39:47,839 --> 00:39:50,240
and um you can see this also worked

1044
00:39:50,240 --> 00:39:52,560
really well um i'm going to show on the

1045
00:39:52,560 --> 00:39:54,480
next slide how we we're still getting

1046
00:39:54,480 --> 00:39:56,160
security events which is interesting we

1047
00:39:56,160 --> 00:39:58,560
weren't expecting to see that but it did

1048
00:39:58,560 --> 00:40:01,520
block sysmon events very well again we

1049
00:40:01,520 --> 00:40:03,200
see that there were a few events that

1050
00:40:03,200 --> 00:40:04,319
happened

1051
00:40:04,319 --> 00:40:06,079
a little bit earlier than we expected

1052
00:40:06,079 --> 00:40:08,079
them to come back so we need to look at

1053
00:40:08,079 --> 00:40:10,160
that but that big spike in sysmon events

1054
00:40:10,160 --> 00:40:13,119
that is the system reboot right there um

1055
00:40:13,119 --> 00:40:15,520
so i think it very well might be that

1056
00:40:15,520 --> 00:40:18,560
the the clocks between sentinel um in

1057
00:40:18,560 --> 00:40:20,640
azure and our local clocks might not

1058
00:40:20,640 --> 00:40:23,040
have been quite in sync but you can also

1059
00:40:23,040 --> 00:40:24,640
see during this ghost in the logs

1060
00:40:24,640 --> 00:40:27,200
minkman saw all of the events just fine

1061
00:40:27,200 --> 00:40:28,880
um it still saw the processes running

1062
00:40:28,880 --> 00:40:30,480
and it was still reporting in this whole

1063
00:40:30,480 --> 00:40:32,480
time that the logs were off

1064
00:40:32,480 --> 00:40:34,319
next slide

1065
00:40:34,319 --> 00:40:36,720
um i wanted to show uh this is the same

1066
00:40:36,720 --> 00:40:39,040
experiment as the last slide but instead

1067
00:40:39,040 --> 00:40:40,480
of sysmon events we're looking at

1068
00:40:40,480 --> 00:40:42,240
security events and you can see that

1069
00:40:42,240 --> 00:40:44,160
those didn't go away the whole time so

1070
00:40:44,160 --> 00:40:46,240
while ghost in the logs was running the

1071
00:40:46,240 --> 00:40:48,880
security events did not get blocked and

1072
00:40:48,880 --> 00:40:50,800
that's also going to require some more

1073
00:40:50,800 --> 00:40:52,800
research but this is good information

1074
00:40:52,800 --> 00:40:54,800
for blue teams to know sometimes the

1075
00:40:54,800 --> 00:40:57,040
tools that red teams use don't work the

1076
00:40:57,040 --> 00:40:58,480
way that they expect them to maybe

1077
00:40:58,480 --> 00:41:00,800
they're working just fine but uh though

1078
00:41:00,800 --> 00:41:01,920
the thing that you think that they're

1079
00:41:01,920 --> 00:41:03,040
going to do

1080
00:41:03,040 --> 00:41:05,040
they don't quite do all of those things

1081
00:41:05,040 --> 00:41:07,839
so it is useful to have multiple event

1082
00:41:07,839 --> 00:41:09,599
sources that you're monitoring and

1083
00:41:09,599 --> 00:41:11,040
multiple ways that you're looking at the

1084
00:41:11,040 --> 00:41:13,200
logs next slide this is the last

1085
00:41:13,200 --> 00:41:14,560
experiment

1086
00:41:14,560 --> 00:41:16,800
this is using event mute and the

1087
00:41:16,800 --> 00:41:18,800
firewall block at the same time and

1088
00:41:18,800 --> 00:41:20,960
again you can see the same pattern that

1089
00:41:20,960 --> 00:41:23,520
both the sysmon and the security logs

1090
00:41:23,520 --> 00:41:25,280
did not come through to the sim during

1091
00:41:25,280 --> 00:41:28,000
this time period we did have an another

1092
00:41:28,000 --> 00:41:30,880
unexplained little spike of events come

1093
00:41:30,880 --> 00:41:32,880
through right at 1pm and then they went

1094
00:41:32,880 --> 00:41:34,480
away again and then you can see the big

1095
00:41:34,480 --> 00:41:37,280
spike when the system was rebooted um so

1096
00:41:37,280 --> 00:41:39,040
uh once again we'll be looking at that

1097
00:41:39,040 --> 00:41:41,040
but the great news is that finkman kept

1098
00:41:41,040 --> 00:41:43,440
reporting in the entire time and could

1099
00:41:43,440 --> 00:41:45,280
see all of these events

1100
00:41:45,280 --> 00:41:48,160
next slide i think there this spike

1101
00:41:48,160 --> 00:41:50,079
sorry to interrupt there i think that

1102
00:41:50,079 --> 00:41:53,440
spike is an update of a java rule

1103
00:41:53,440 --> 00:41:56,560
so then it actually starts the uh well

1104
00:41:56,560 --> 00:41:58,480
it's going to allow some

1105
00:41:58,480 --> 00:42:01,359
uh events uh back again based on the

1106
00:42:01,359 --> 00:42:03,040
java rule whether or not it gets hit or

1107
00:42:03,040 --> 00:42:04,000
not

1108
00:42:04,000 --> 00:42:06,240
so i think that's the uh that's the

1109
00:42:06,240 --> 00:42:08,560
explanation for this one at least

1110
00:42:08,560 --> 00:42:09,440
okay

1111
00:42:09,440 --> 00:42:12,160
um thank you i i appreciate that and i

1112
00:42:12,160 --> 00:42:13,839
think out of all of these different

1113
00:42:13,839 --> 00:42:14,960
attacks

1114
00:42:14,960 --> 00:42:16,319
that last one was definitely the

1115
00:42:16,319 --> 00:42:17,520
sneakiest

1116
00:42:17,520 --> 00:42:19,839
because you can see we're relying on

1117
00:42:19,839 --> 00:42:22,640
uh the logs from sysmon and security

1118
00:42:22,640 --> 00:42:24,560
going away while we can still see logs

1119
00:42:24,560 --> 00:42:25,760
from finkman

1120
00:42:25,760 --> 00:42:27,440
to be our indicator that something is

1121
00:42:27,440 --> 00:42:30,079
wrong so if there are still event logs

1122
00:42:30,079 --> 00:42:31,680
happening if there's still sysmon

1123
00:42:31,680 --> 00:42:33,599
there's still security uh that would be

1124
00:42:33,599 --> 00:42:36,319
very difficult for defenders to detect

1125
00:42:36,319 --> 00:42:38,720
um i wanted to show you what a baseline

1126
00:42:38,720 --> 00:42:41,119
of normal looks like this is a period of

1127
00:42:41,119 --> 00:42:44,079
24 hours when no attacks at all were

1128
00:42:44,079 --> 00:42:45,280
happening

1129
00:42:45,280 --> 00:42:46,800
and we can see

1130
00:42:46,800 --> 00:42:48,000
in the green

1131
00:42:48,000 --> 00:42:50,880
that is the number of etw events that

1132
00:42:50,880 --> 00:42:53,520
vinkman was recording and in the purple

1133
00:42:53,520 --> 00:42:55,119
squiggly line you can see the number of

1134
00:42:55,119 --> 00:42:56,319
processes

1135
00:42:56,319 --> 00:42:58,960
that vinkman was seeing these are in two

1136
00:42:58,960 --> 00:43:02,400
different uh scales otherwise uh the

1137
00:43:02,400 --> 00:43:03,920
number of process counts would just

1138
00:43:03,920 --> 00:43:06,960
disappear on the x-axis

1139
00:43:06,960 --> 00:43:10,560
um so the the green uh events uh the

1140
00:43:10,560 --> 00:43:12,640
number of event counts is a scale on the

1141
00:43:12,640 --> 00:43:14,079
left and the purple one the number of

1142
00:43:14,079 --> 00:43:16,960
processes is on the right uh this is for

1143
00:43:16,960 --> 00:43:18,880
five minute intervals and the important

1144
00:43:18,880 --> 00:43:20,720
thing to take from this is that normally

1145
00:43:20,720 --> 00:43:23,359
when a system is just running normally

1146
00:43:23,359 --> 00:43:25,599
and there is no attack going on you can

1147
00:43:25,599 --> 00:43:28,960
expect that the number of processes is

1148
00:43:28,960 --> 00:43:31,680
going to stay within a fairly expected

1149
00:43:31,680 --> 00:43:33,440
you know range it's kind of going to be

1150
00:43:33,440 --> 00:43:35,119
bounded

1151
00:43:35,119 --> 00:43:36,640
when you look at it in five minute

1152
00:43:36,640 --> 00:43:37,839
intervals

1153
00:43:37,839 --> 00:43:39,839
and then the number of etw events is

1154
00:43:39,839 --> 00:43:42,560
going to vary wildly like it's all over

1155
00:43:42,560 --> 00:43:44,560
the place there's these huge spikes that

1156
00:43:44,560 --> 00:43:46,800
happen um at different times and that's

1157
00:43:46,800 --> 00:43:48,880
just because sometimes the system is

1158
00:43:48,880 --> 00:43:50,480
incredibly more busy there's windows

1159
00:43:50,480 --> 00:43:52,160
updates there's reboots

1160
00:43:52,160 --> 00:43:54,160
some processes when they run just create

1161
00:43:54,160 --> 00:43:56,960
a massive number of events um so one of

1162
00:43:56,960 --> 00:43:58,480
the things we were kind of hoping is

1163
00:43:58,480 --> 00:44:01,520
that we'd be able to come up with like a

1164
00:44:01,520 --> 00:44:03,040
best-fit line

1165
00:44:03,040 --> 00:44:05,119
um on number of events and detect

1166
00:44:05,119 --> 00:44:07,839
anomalies that way um but

1167
00:44:07,839 --> 00:44:09,520
this sort of pattern makes that very

1168
00:44:09,520 --> 00:44:11,200
very challenging to do

1169
00:44:11,200 --> 00:44:13,200
next slide

1170
00:44:13,200 --> 00:44:15,839
this is just for the period of time that

1171
00:44:15,839 --> 00:44:18,079
we looked at for those three experiments

1172
00:44:18,079 --> 00:44:20,720
when purple power was being used on this

1173
00:44:20,720 --> 00:44:22,800
machine and you can see once again

1174
00:44:22,800 --> 00:44:24,640
there's some wild variation in the

1175
00:44:24,640 --> 00:44:27,520
number of events but the uh the number

1176
00:44:27,520 --> 00:44:29,440
of processes stays within a fairly

1177
00:44:29,440 --> 00:44:33,359
bounded range and is uh you know none at

1178
00:44:33,359 --> 00:44:35,359
no time do either one of these things go

1179
00:44:35,359 --> 00:44:37,839
to zero the closest thing to zero that

1180
00:44:37,839 --> 00:44:39,440
looked to me like it might be there was

1181
00:44:39,440 --> 00:44:41,599
in the number of etw events and still

1182
00:44:41,599 --> 00:44:43,839
that was like you know uh four and a

1183
00:44:43,839 --> 00:44:45,359
half thousand

1184
00:44:45,359 --> 00:44:47,920
next slide

1185
00:44:48,560 --> 00:44:51,119
there's also a nice uh homage to botsac

1186
00:44:51,119 --> 00:44:52,960
there was a good the batman kind of

1187
00:44:52,960 --> 00:44:55,520
thing oh my gosh i didn't even see the

1188
00:44:55,520 --> 00:44:58,160
bat ears that is awesome and it's purple

1189
00:44:58,160 --> 00:45:01,279
that that works out well

1190
00:45:01,440 --> 00:45:03,440
um so i wanted to show this is a very

1191
00:45:03,440 --> 00:45:07,440
simple query in kuso query language kql

1192
00:45:07,440 --> 00:45:10,560
that i set up as an alarm to tell me um

1193
00:45:10,560 --> 00:45:13,119
if across the environment there are any

1194
00:45:13,119 --> 00:45:16,000
hosts for which in the last five minutes

1195
00:45:16,000 --> 00:45:18,319
we're seeing events from venkman but

1196
00:45:18,319 --> 00:45:20,640
we're not seeing anything from the event

1197
00:45:20,640 --> 00:45:23,839
logs um if that ever happens then it

1198
00:45:23,839 --> 00:45:25,839
raises an alarm and notifies me and i

1199
00:45:25,839 --> 00:45:27,680
say oh okay here's a machine that i need

1200
00:45:27,680 --> 00:45:29,920
to look at a little bit more closely and

1201
00:45:29,920 --> 00:45:33,119
then maybe i can use my remote ir tools

1202
00:45:33,119 --> 00:45:35,680
to pull memory from it or you know do

1203
00:45:35,680 --> 00:45:36,880
some

1204
00:45:36,880 --> 00:45:38,560
do some ir

1205
00:45:38,560 --> 00:45:40,560
tasks to preserve what's going on on

1206
00:45:40,560 --> 00:45:42,560
that machine so that i can tell the

1207
00:45:42,560 --> 00:45:44,240
truth what is really going on rather

1208
00:45:44,240 --> 00:45:45,599
than what i'm seeing through the event

1209
00:45:45,599 --> 00:45:47,839
logs

1210
00:45:48,160 --> 00:45:50,800
so now we have time for questions and we

1211
00:45:50,800 --> 00:45:53,839
will be happy to take your questions in

1212
00:45:53,839 --> 00:45:58,200
the discord thank you very much

