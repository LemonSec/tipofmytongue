1
00:00:27,190 --> 00:00:31,360
pick antivirus that month I think it's

2
00:00:29,920 --> 00:00:34,180
similar reason a lot of researchers

3
00:00:31,360 --> 00:00:35,290
picking a virus it's of course many

4
00:00:34,180 --> 00:00:37,960
components operating with high

5
00:00:35,290 --> 00:00:40,269
privileges there's also a large attack

6
00:00:37,960 --> 00:00:42,280
services antivirus such as especially in

7
00:00:40,270 --> 00:00:45,129
handling some untrusted low privileged

8
00:00:42,280 --> 00:00:46,989
data for like file scanning and parsing

9
00:00:45,129 --> 00:00:48,970
of course got a good use of IPC

10
00:00:46,989 --> 00:00:51,250
networking and nearly always a kernel

11
00:00:48,970 --> 00:00:53,050
driver involved and the last one I call

12
00:00:51,250 --> 00:00:55,120
organization ubiquity which really is

13
00:00:53,050 --> 00:00:57,489
the fancy way of saying well per

14
00:00:55,120 --> 00:00:59,559
organization antivirus is ruled out or

15
00:00:57,489 --> 00:01:00,940
glide so if you find a vulnerability in

16
00:00:59,559 --> 00:01:02,410
this application you just made 100

17
00:01:00,940 --> 00:01:03,849
percent of their machines vulnerable

18
00:01:02,410 --> 00:01:05,530
opposed to finding a vulnerability in a

19
00:01:03,850 --> 00:01:09,430
software that might be only used by a

20
00:01:05,530 --> 00:01:10,960
subset of the corporation and so going

21
00:01:09,430 --> 00:01:12,220
of our talk outline well first skin to

22
00:01:10,960 --> 00:01:14,679
familiar is a shin akimoto just

23
00:01:12,220 --> 00:01:15,729
generally what it is then we'll dive a

24
00:01:14,680 --> 00:01:17,890
little deeper and in reverse engineering

25
00:01:15,729 --> 00:01:20,259
the various components and how it works

26
00:01:17,890 --> 00:01:21,460
once we get a good knowledge base there

27
00:01:20,259 --> 00:01:23,979
we'll be exploring the attack surface

28
00:01:21,460 --> 00:01:26,740
available to us as an attacker from

29
00:01:23,979 --> 00:01:28,479
there we'll be creating attack vector we

30
00:01:26,740 --> 00:01:30,880
might current some snags so we'll have

31
00:01:28,479 --> 00:01:32,649
to bypass security measures and then

32
00:01:30,880 --> 00:01:36,750
finally go over the actual exploitation

33
00:01:32,649 --> 00:01:38,950
and POC so first familiar is a ssin

34
00:01:36,750 --> 00:01:40,869
comodo antivirus what is it it's your

35
00:01:38,950 --> 00:01:42,550
typical antivirus it's agent base so

36
00:01:40,869 --> 00:01:44,800
processes are actually running on the

37
00:01:42,550 --> 00:01:47,020
client machine with long with a virus

38
00:01:44,800 --> 00:01:48,789
definition database features your

39
00:01:47,020 --> 00:01:51,098
typical features firewall file scanning

40
00:01:48,789 --> 00:01:52,810
of course but then also munn that might

41
00:01:51,099 --> 00:01:54,610
not be an all antivirus such as called

42
00:01:52,810 --> 00:01:56,410
process containment the process

43
00:01:54,610 --> 00:01:59,170
containment is I'll use a synonymous

44
00:01:56,410 --> 00:02:00,910
with sandboxing in this talk just a way

45
00:01:59,170 --> 00:02:03,610
to run a process in a safe environment

46
00:02:00,910 --> 00:02:05,500
so that doesn't actually make changes or

47
00:02:03,610 --> 00:02:06,970
malicious of maliciously affect your

48
00:02:05,500 --> 00:02:10,149
real operating system so running in a

49
00:02:06,970 --> 00:02:11,890
safe run time if you will and it also

50
00:02:10,149 --> 00:02:13,300
has consumer as well as enterprise

51
00:02:11,890 --> 00:02:14,980
presents and the Volans we'll talk about

52
00:02:13,300 --> 00:02:18,090
here affect both lines of product

53
00:02:14,980 --> 00:02:20,440
enterprise as well as the ER consumer

54
00:02:18,090 --> 00:02:23,110
it's made of five main modules so we got

55
00:02:20,440 --> 00:02:24,940
five process your primary control agent

56
00:02:23,110 --> 00:02:26,440
this is the main antivirus agent then we

57
00:02:24,940 --> 00:02:28,390
have a kernel mode filter driver called

58
00:02:26,440 --> 00:02:33,160
CMD guard sis that interrupts all file

59
00:02:28,390 --> 00:02:34,208
i/o file scanning service cab WP RPC

60
00:02:33,160 --> 00:02:36,760
interception we'll get into that a

61
00:02:34,209 --> 00:02:38,470
little bit later called cmd.exe and the

62
00:02:36,760 --> 00:02:41,189
last process that's you know Matt last

63
00:02:38,470 --> 00:02:43,769
module here is a user Dewey interface

64
00:02:41,189 --> 00:02:45,689
and these ones in red here are ones that

65
00:02:43,769 --> 00:02:47,909
run in high privileges such as system or

66
00:02:45,689 --> 00:02:49,049
kernel mode so you can see quite a bit

67
00:02:47,909 --> 00:02:50,578
of attack service here we got five

68
00:02:49,049 --> 00:02:52,470
hundred processes kernel drivers to

69
00:02:50,579 --> 00:02:56,700
start attacking in Pratt's game

70
00:02:52,470 --> 00:02:58,349
privilege so very cool and when I first

71
00:02:56,700 --> 00:02:59,608
researched Komodo what I'm dealing with

72
00:02:58,349 --> 00:03:01,230
I ran into this which is from their

73
00:02:59,609 --> 00:03:02,189
website and they're explaining something

74
00:03:01,230 --> 00:03:04,679
called art act

75
00:03:02,189 --> 00:03:06,840
it's called runtime automatic threat

76
00:03:04,680 --> 00:03:08,640
containment and what it is I highlighted

77
00:03:06,840 --> 00:03:10,829
the part that was of interest its art

78
00:03:08,640 --> 00:03:13,048
act is intelligent enough to weed out

79
00:03:10,829 --> 00:03:15,239
the good and bad and contain only the

80
00:03:13,049 --> 00:03:17,700
unknown hence creating a very efficient

81
00:03:15,239 --> 00:03:19,170
containment technology and what this

82
00:03:17,700 --> 00:03:21,510
really means is that with default

83
00:03:19,170 --> 00:03:23,638
settings in antivirus when a user runs a

84
00:03:21,510 --> 00:03:26,519
file and that file is unknown it's gonna

85
00:03:23,639 --> 00:03:27,930
by default sandbox that process so I

86
00:03:26,519 --> 00:03:29,340
realize if I want to make a feasible

87
00:03:27,930 --> 00:03:31,560
exploit here I'm gonna have to first

88
00:03:29,340 --> 00:03:34,079
figure out a way to X to escape the

89
00:03:31,560 --> 00:03:36,260
sandbox to actually do the rest of the

90
00:03:34,079 --> 00:03:38,430
exploitation so that was my first target

91
00:03:36,260 --> 00:03:40,439
in fact we have a video here just

92
00:03:38,430 --> 00:03:43,409
demoing like what the sandbox looks like

93
00:03:40,439 --> 00:03:45,569
when a user uses it here I'm gonna run

94
00:03:43,409 --> 00:03:49,798
command prompt in the comodo container

95
00:03:45,569 --> 00:03:52,560
and down below we have two folders on

96
00:03:49,799 --> 00:03:53,849
the lower left is the folder the current

97
00:03:52,560 --> 00:03:56,760
working directory I'm gonna try to write

98
00:03:53,849 --> 00:03:59,488
a file to as a sandbox process and on

99
00:03:56,760 --> 00:04:01,530
the lower right is where the file will

100
00:03:59,489 --> 00:04:03,569
actually write 2 which is the sandbox

101
00:04:01,530 --> 00:04:05,879
folder where it diverts all that IO

102
00:04:03,569 --> 00:04:08,940
request and here I go I'm trying to

103
00:04:05,879 --> 00:04:10,679
write a file to the desktop and we don't

104
00:04:08,940 --> 00:04:12,900
see it appear on the lower left where we

105
00:04:10,680 --> 00:04:15,629
expect it instead it gets diverted to

106
00:04:12,900 --> 00:04:18,720
this lower right folder that we have

107
00:04:15,629 --> 00:04:20,430
open and which is called L under VT root

108
00:04:18,720 --> 00:04:23,669
it's just a place where all sandbox

109
00:04:20,430 --> 00:04:25,919
writes go to so that's just showing kind

110
00:04:23,669 --> 00:04:28,889
of the the i/o nature of how the sandbox

111
00:04:25,919 --> 00:04:32,190
behavior works ok let's get a little

112
00:04:28,889 --> 00:04:33,349
deeper into the actual inner workings so

113
00:04:32,190 --> 00:04:35,190
I spent a couple days

114
00:04:33,349 --> 00:04:37,320
reverse-engineering the sandbox I won't

115
00:04:35,190 --> 00:04:44,310
put you through that but so I made I

116
00:04:37,320 --> 00:04:45,949
made this instead and so I made this

117
00:04:44,310 --> 00:04:47,970
instead so this is actually what I

118
00:04:45,949 --> 00:04:49,770
recreated out of reverse engineering the

119
00:04:47,970 --> 00:04:51,870
sandbox in this little schematic here

120
00:04:49,770 --> 00:04:54,340
that we can see and in fact we can

121
00:04:51,870 --> 00:04:56,020
actually trace through

122
00:04:54,340 --> 00:04:58,539
here I'm gonna try to put this back into

123
00:04:56,020 --> 00:05:00,820
presentation mode there we go we can

124
00:04:58,540 --> 00:05:02,979
actually walk through the command prompt

125
00:05:00,820 --> 00:05:04,030
example and talk about what was going on

126
00:05:02,979 --> 00:05:06,400
behind the scenes and how this is

127
00:05:04,030 --> 00:05:09,219
actually working so up here in the top

128
00:05:06,400 --> 00:05:10,929
left we can start here and explore and I

129
00:05:09,220 --> 00:05:13,240
try to show it's address space with some

130
00:05:10,930 --> 00:05:17,020
dll's in here well see one that's called

131
00:05:13,240 --> 00:05:19,449
guard 64 DLL that's a Komodo DLL and the

132
00:05:17,020 --> 00:05:20,020
way I got there was because the new

133
00:05:19,449 --> 00:05:22,630
Komodo

134
00:05:20,020 --> 00:05:24,370
driver actually injects that DLL into

135
00:05:22,630 --> 00:05:28,000
the user mode process every time a

136
00:05:24,370 --> 00:05:29,979
process creation starts and what his job

137
00:05:28,000 --> 00:05:32,169
is is to hook several user mode api's

138
00:05:29,979 --> 00:05:33,789
and one of these api's happens to be

139
00:05:32,169 --> 00:05:35,229
create process internal so what was

140
00:05:33,790 --> 00:05:36,130
happening when I make when I start

141
00:05:35,229 --> 00:05:39,610
command prompt

142
00:05:36,130 --> 00:05:41,469
I made a sandbox process the Explorer

143
00:05:39,610 --> 00:05:43,990
called create process that call was

144
00:05:41,470 --> 00:05:45,880
hooked by Guard 64 DLL send a quick

145
00:05:43,990 --> 00:05:47,919
message down to this driver the Komodo

146
00:05:45,880 --> 00:05:50,710
driver and says sandbox is process I'm

147
00:05:47,919 --> 00:05:52,448
about to make and so now the driver has

148
00:05:50,710 --> 00:05:54,638
a link list of all running processes and

149
00:05:52,449 --> 00:05:56,860
it inserts this new process to its link

150
00:05:54,639 --> 00:05:58,510
list the marks is a sandbox process and

151
00:05:56,860 --> 00:06:00,789
you can see it here here's like process

152
00:05:58,510 --> 00:06:03,580
one benign process to that one just

153
00:06:00,789 --> 00:06:06,130
inserted to tell the driver to contain

154
00:06:03,580 --> 00:06:07,840
it and now the create process called

155
00:06:06,130 --> 00:06:09,280
continues creates my process thread

156
00:06:07,840 --> 00:06:11,830
starts and I'm live this is a command

157
00:06:09,280 --> 00:06:15,460
prompt now and now the next time I try

158
00:06:11,830 --> 00:06:16,990
to do file or reg i/o we go through and

159
00:06:15,460 --> 00:06:18,820
the i/o request goes through to the

160
00:06:16,990 --> 00:06:20,560
kernel but the kernel filter driver

161
00:06:18,820 --> 00:06:23,260
intercepts all that request it'll say

162
00:06:20,560 --> 00:06:25,330
wait who's making this i/o request are

163
00:06:23,260 --> 00:06:27,460
you a sandbox process and looks it up in

164
00:06:25,330 --> 00:06:29,590
this list it says yes you are so it

165
00:06:27,460 --> 00:06:32,049
diverts its file i/o to over here to

166
00:06:29,590 --> 00:06:34,090
these fake folders and fake registry

167
00:06:32,050 --> 00:06:36,400
paths and thus we can't really affect

168
00:06:34,090 --> 00:06:38,710
the file system wilmer a sandbox process

169
00:06:36,400 --> 00:06:40,989
also worth mentioning you know cab WP

170
00:06:38,710 --> 00:06:44,580
the scanning service oh no that's just

171
00:06:40,990 --> 00:06:47,950
carbon black told me I'm malware there

172
00:06:44,580 --> 00:06:49,780
so we have cap WP which also was just

173
00:06:47,950 --> 00:06:52,479
told to invoke a scan on this process

174
00:06:49,780 --> 00:06:56,200
and last but not least you'll see a line

175
00:06:52,479 --> 00:06:58,000
here that says al PC RPC what this is

176
00:06:56,200 --> 00:07:00,550
Komodo is actually awesome containing a

177
00:06:58,000 --> 00:07:02,139
LPC and RPC traffic and if you're not

178
00:07:00,550 --> 00:07:05,590
familiar a LPC is a Windows inter

179
00:07:02,139 --> 00:07:07,030
process communication technology from a

180
00:07:05,590 --> 00:07:08,138
sandbox standpoint this can be quite

181
00:07:07,030 --> 00:07:10,030
dangerous if

182
00:07:08,139 --> 00:07:12,460
unmonitored because if you're familiar

183
00:07:10,030 --> 00:07:14,438
with WMI or anything like that you know

184
00:07:12,460 --> 00:07:16,810
you can create a process over WMI which

185
00:07:14,439 --> 00:07:18,280
is going to over LPC telling them W my

186
00:07:16,810 --> 00:07:19,870
host provider to create a process for

187
00:07:18,280 --> 00:07:21,460
you and if that's not monitored there

188
00:07:19,870 --> 00:07:24,550
you go that's an easy escape right there

189
00:07:21,460 --> 00:07:26,948
so Komodos monitoring this a LPC RPC

190
00:07:24,550 --> 00:07:29,949
traffic and diverting them to these fake

191
00:07:26,949 --> 00:07:31,810
SBC host instances they run so that the

192
00:07:29,949 --> 00:07:34,629
sandbox application can kind of interact

193
00:07:31,810 --> 00:07:38,409
slightly with a LPC RPC request and not

194
00:07:34,629 --> 00:07:41,770
break and that's generally what's what's

195
00:07:38,409 --> 00:07:43,780
going on here with the sandbox so to go

196
00:07:41,770 --> 00:07:45,758
recap of what we have against us right

197
00:07:43,780 --> 00:07:48,429
now we have completely block file and

198
00:07:45,759 --> 00:07:50,319
registry i/o as a sandbox process we're

199
00:07:48,430 --> 00:07:53,169
unable to invoke sensitive RPC calls

200
00:07:50,319 --> 00:07:54,909
like WMI I'm gonna just said once the

201
00:07:53,169 --> 00:07:58,180
process sandbox it cannot be unsampled

202
00:07:54,909 --> 00:08:00,099
so no feature existed that we could

203
00:07:58,180 --> 00:08:01,210
unsane box ourselves with I didn't see

204
00:08:00,099 --> 00:08:02,889
anything we could trick the user into

205
00:08:01,210 --> 00:08:06,159
clicking to say hey let us out of the

206
00:08:02,889 --> 00:08:08,169
sandbox or send a message somewhere and

207
00:08:06,159 --> 00:08:10,240
it also disallowed DLL injection so

208
00:08:08,169 --> 00:08:11,889
there goes technique of trying to code

209
00:08:10,240 --> 00:08:15,279
inject other processes on the machine to

210
00:08:11,889 --> 00:08:17,349
try to somehow get out okay

211
00:08:15,279 --> 00:08:19,990
well let's check out what attack surface

212
00:08:17,349 --> 00:08:21,370
we do have available to ourselves so as

213
00:08:19,990 --> 00:08:22,319
I say I much process what do we have

214
00:08:21,370 --> 00:08:25,120
access to

215
00:08:22,319 --> 00:08:27,279
we actually have access to the CMD Guard

216
00:08:25,120 --> 00:08:30,190
sis kernel driver actually and this is

217
00:08:27,279 --> 00:08:32,289
because guard 64 DLL which is injected

218
00:08:30,190 --> 00:08:34,750
into every process part of its job when

219
00:08:32,289 --> 00:08:37,448
it hooks API is it monitors the usage

220
00:08:34,750 --> 00:08:38,948
and reports it to the driver to let it

221
00:08:37,448 --> 00:08:41,859
know status updates of what the process

222
00:08:38,948 --> 00:08:43,929
is doing and because guard 64 DLL also

223
00:08:41,860 --> 00:08:46,120
has to inform sandbox processes updates

224
00:08:43,929 --> 00:08:47,589
well most of the sandbox processes can

225
00:08:46,120 --> 00:08:49,390
also talk to the driver directly and

226
00:08:47,589 --> 00:08:51,610
send their own messages so this is quite

227
00:08:49,390 --> 00:08:54,490
interesting and in fact Komodo tries to

228
00:08:51,610 --> 00:08:56,230
prevent this by simply putting user mode

229
00:08:54,490 --> 00:08:58,180
hook when you try to connect to a filter

230
00:08:56,230 --> 00:09:00,640
driver in the kernel but this is trivial

231
00:08:58,180 --> 00:09:02,339
to bypass so bypass the hook we got

232
00:09:00,640 --> 00:09:04,480
ourselves a little tack service here

233
00:09:02,339 --> 00:09:06,490
additional tax services mostly curable

234
00:09:04,480 --> 00:09:10,360
objects so on windows secure blob jets

235
00:09:06,490 --> 00:09:13,839
are things like named pipes mutex is you

236
00:09:10,360 --> 00:09:15,519
know shared memory etc we can connect to

237
00:09:13,839 --> 00:09:17,649
most securable objects because again

238
00:09:15,519 --> 00:09:19,209
Komodo and a sandbox process is one of

239
00:09:17,649 --> 00:09:20,949
the few times it uses a user mode hook

240
00:09:19,209 --> 00:09:21,790
so it's actually a user mode hooking

241
00:09:20,949 --> 00:09:23,709
trying to prevent you from

242
00:09:21,790 --> 00:09:25,810
acting to securable objects on the

243
00:09:23,710 --> 00:09:27,880
operating system but we contribute they

244
00:09:25,810 --> 00:09:30,369
bypass this hook and connect to these

245
00:09:27,880 --> 00:09:31,930
securable objects given we have the

246
00:09:30,370 --> 00:09:34,120
right windows permissions for that

247
00:09:31,930 --> 00:09:35,949
object and now this is cool and and you

248
00:09:34,120 --> 00:09:37,270
know it's sandbox escaping just through

249
00:09:35,950 --> 00:09:39,340
that is a whole nother story but it's at

250
00:09:37,270 --> 00:09:42,579
least something we can connect to if we

251
00:09:39,340 --> 00:09:44,080
try and going back to the first example

252
00:09:42,580 --> 00:09:45,760
here we have two CMD guards this kernel

253
00:09:44,080 --> 00:09:46,960
driver interaction is just what I was

254
00:09:45,760 --> 00:09:48,490
talking about we're contained process

255
00:09:46,960 --> 00:09:50,860
and we can interact with the comodo

256
00:09:48,490 --> 00:09:54,790
driver of called CMD Guard sis through

257
00:09:50,860 --> 00:09:56,140
the CMD off port that it exposes so

258
00:09:54,790 --> 00:09:57,490
first thing I found actually reverse

259
00:09:56,140 --> 00:09:59,620
engineer this message handler so I want

260
00:09:57,490 --> 00:10:01,060
to see how we can attack it and then you

261
00:09:59,620 --> 00:10:03,220
know came across a few interesting

262
00:10:01,060 --> 00:10:06,010
things and this is one of them a handle

263
00:10:03,220 --> 00:10:08,680
type confusion so CMD Guard cysts would

264
00:10:06,010 --> 00:10:10,750
accept handles sent from user mode but

265
00:10:08,680 --> 00:10:13,329
the driver would expect the handle to be

266
00:10:10,750 --> 00:10:15,040
a job object and this is actually

267
00:10:13,330 --> 00:10:17,200
slightly dangerous here because they're

268
00:10:15,040 --> 00:10:19,360
calling a kernel mode API ob reference

269
00:10:17,200 --> 00:10:21,520
object by handle but they're passing

270
00:10:19,360 --> 00:10:22,990
null for object type and what that does

271
00:10:21,520 --> 00:10:25,030
is it means it'll accept any generic

272
00:10:22,990 --> 00:10:27,160
handle and convert it to whatever object

273
00:10:25,030 --> 00:10:28,569
it is without validation and so what we

274
00:10:27,160 --> 00:10:30,069
could have done is that because it

275
00:10:28,570 --> 00:10:33,010
expects a job object we could have sent

276
00:10:30,070 --> 00:10:35,020
a handle to a process object or a handle

277
00:10:33,010 --> 00:10:37,200
to a thread object and when this API is

278
00:10:35,020 --> 00:10:39,460
called it'll end up resolving on

279
00:10:37,200 --> 00:10:41,530
mistakenly and resolving a process

280
00:10:39,460 --> 00:10:44,590
object instead of the job object expects

281
00:10:41,530 --> 00:10:45,790
and now when it receives that process

282
00:10:44,590 --> 00:10:47,500
object it's gonna try to interact with

283
00:10:45,790 --> 00:10:49,959
it like it was a job object and perhaps

284
00:10:47,500 --> 00:10:51,460
reference invalid fields right to

285
00:10:49,960 --> 00:10:53,590
invalid parts because a different object

286
00:10:51,460 --> 00:10:55,870
so your basic type confusion issue here

287
00:10:53,590 --> 00:10:57,550
now I did reverse engineer and try to

288
00:10:55,870 --> 00:10:59,680
see all the usages of this object and

289
00:10:57,550 --> 00:11:02,319
unfortunately nothing exploitable film

290
00:10:59,680 --> 00:11:03,550
but just at least you know some some

291
00:11:02,320 --> 00:11:08,140
make some progress in this message

292
00:11:03,550 --> 00:11:10,140
handler next I looked at LPC so LPC is a

293
00:11:08,140 --> 00:11:13,540
Windows inter process communication

294
00:11:10,140 --> 00:11:15,939
technology it's the simple idea of a

295
00:11:13,540 --> 00:11:19,780
client named talked to us LPC server

296
00:11:15,940 --> 00:11:22,480
over LPC LPC ports uses API as like in T

297
00:11:19,780 --> 00:11:25,750
connect port and T create port things

298
00:11:22,480 --> 00:11:27,100
like this this is a great attack vector

299
00:11:25,750 --> 00:11:29,530
as it we can connect to it from a

300
00:11:27,100 --> 00:11:31,480
sandbox process worth mentioning it is

301
00:11:29,530 --> 00:11:33,670
deprecated so Windows actually places

302
00:11:31,480 --> 00:11:35,710
since Vista with a LPC advanced local

303
00:11:33,670 --> 00:11:37,300
procedure call but

304
00:11:35,710 --> 00:11:40,270
motive actually uses this and we can

305
00:11:37,300 --> 00:11:43,540
connect to its exposed LPC port and this

306
00:11:40,270 --> 00:11:46,390
LPC port that I had was called CMD VRT

307
00:11:43,540 --> 00:11:48,189
LPC server port and like I said from a

308
00:11:46,390 --> 00:11:49,390
sandbox process we can connect to this

309
00:11:48,190 --> 00:11:51,880
and send it messages

310
00:11:49,390 --> 00:11:53,740
so naturally the next step I take is I

311
00:11:51,880 --> 00:11:56,290
want to reverse engineer now the LPC

312
00:11:53,740 --> 00:11:59,500
message handler and how we can exploit

313
00:11:56,290 --> 00:12:02,949
that so this is like a little snippet of

314
00:11:59,500 --> 00:12:05,500
the LPC message handler here we can see

315
00:12:02,950 --> 00:12:09,010
a part where when it receives an LPC

316
00:12:05,500 --> 00:12:10,690
Datagram right here code execution will

317
00:12:09,010 --> 00:12:12,580
divert to this red area which I notice

318
00:12:10,690 --> 00:12:16,270
was crashing an LPC Datagram is

319
00:12:12,580 --> 00:12:19,210
generally just a message and LPC and it

320
00:12:16,270 --> 00:12:20,829
was crashing here so next thing I

321
00:12:19,210 --> 00:12:22,690
excited I thought oh man did we just

322
00:12:20,830 --> 00:12:24,670
buffer overflow this thing so I wanted

323
00:12:22,690 --> 00:12:27,520
to look at why this service was crashing

324
00:12:24,670 --> 00:12:30,040
we sent an LPC message and we find it's

325
00:12:27,520 --> 00:12:32,230
because Komodo was placing a hard-coded

326
00:12:30,040 --> 00:12:34,360
null value for a mem move operation

327
00:12:32,230 --> 00:12:35,770
which would instantly crash so right

328
00:12:34,360 --> 00:12:37,720
when you send this message handler

329
00:12:35,770 --> 00:12:39,819
anything you'll crash the service

330
00:12:37,720 --> 00:12:43,180
because they hard-coded an OL for a memo

331
00:12:39,820 --> 00:12:44,740
and you know basically writing up you

332
00:12:43,180 --> 00:12:46,209
know following code like this from a

333
00:12:44,740 --> 00:12:49,600
sandbox process we're connecting with

334
00:12:46,210 --> 00:12:51,700
LPC port sending a message and as

335
00:12:49,600 --> 00:12:54,070
expected we completely crash that

336
00:12:51,700 --> 00:12:55,600
service now this is you know just add a

337
00:12:54,070 --> 00:12:57,100
service to report it you know nothing

338
00:12:55,600 --> 00:12:58,720
really like it we can do anything with

339
00:12:57,100 --> 00:13:01,540
it but actually what was cool about this

340
00:12:58,720 --> 00:13:04,800
CBE was that it actually opened up more

341
00:13:01,540 --> 00:13:06,969
kernel attack surface and that's because

342
00:13:04,800 --> 00:13:09,370
maybe in the diagram I showed earlier

343
00:13:06,970 --> 00:13:11,500
might not have seen this part but CMD

344
00:13:09,370 --> 00:13:13,090
birth which as a service can talk to an

345
00:13:11,500 --> 00:13:16,960
entirely different port that the driver

346
00:13:13,090 --> 00:13:18,490
expose is called CMD service port and no

347
00:13:16,960 --> 00:13:21,130
normally nobody could connect to this

348
00:13:18,490 --> 00:13:23,950
port and that's because when the kernel

349
00:13:21,130 --> 00:13:26,200
create when the Komodo driver creates

350
00:13:23,950 --> 00:13:28,780
this port it sets its max connection to

351
00:13:26,200 --> 00:13:30,610
one and so when Windows boots the

352
00:13:28,780 --> 00:13:33,490
service starts instantly connects to

353
00:13:30,610 --> 00:13:35,380
that kernel port the ports occupy Mac's

354
00:13:33,490 --> 00:13:36,850
connection hit by the time the user logs

355
00:13:35,380 --> 00:13:39,189
in and process actually start running

356
00:13:36,850 --> 00:13:40,930
well the Mac's connections at one and no

357
00:13:39,190 --> 00:13:44,230
one else can connect to this privileged

358
00:13:40,930 --> 00:13:45,760
port so what we just did though was the

359
00:13:44,230 --> 00:13:47,650
fact that we can crash that service

360
00:13:45,760 --> 00:13:49,750
means we just lower its connection count

361
00:13:47,650 --> 00:13:52,240
to zero which means we can connect

362
00:13:49,750 --> 00:13:54,820
to it now ourselves and so that's

363
00:13:52,240 --> 00:13:56,890
exactly what we do we go ahead from a

364
00:13:54,820 --> 00:13:58,540
sandbox crash this process take over

365
00:13:56,890 --> 00:14:00,880
that port now we have a little bit more

366
00:13:58,540 --> 00:14:02,589
attack surface to work with so now I

367
00:14:00,880 --> 00:14:04,689
reverse engineer this message handler

368
00:14:02,590 --> 00:14:06,160
and while I didn't find anything like

369
00:14:04,690 --> 00:14:07,810
cool like a privilege privilege

370
00:14:06,160 --> 00:14:09,660
instructions I get saying I did find a

371
00:14:07,810 --> 00:14:12,430
little memory corruption issue where

372
00:14:09,660 --> 00:14:14,890
what I noticed is that I use weak probe

373
00:14:12,430 --> 00:14:18,069
for read probe for write checks and so

374
00:14:14,890 --> 00:14:20,260
in when drivers they'll be API is called

375
00:14:18,070 --> 00:14:22,030
propria proper right and what they do is

376
00:14:20,260 --> 00:14:24,610
they validate buffers coming from user

377
00:14:22,030 --> 00:14:26,260
mode that they actually do reside in

378
00:14:24,610 --> 00:14:28,540
user mode memory and this is important

379
00:14:26,260 --> 00:14:30,250
because when a driver receives a buffer

380
00:14:28,540 --> 00:14:32,410
from user mode what they don't want to

381
00:14:30,250 --> 00:14:34,780
happen is a driver to receive a kernel

382
00:14:32,410 --> 00:14:36,490
mode address and the driver accepts it

383
00:14:34,780 --> 00:14:38,500
starts reading writing to it and little

384
00:14:36,490 --> 00:14:39,540
to no adjust kernel exploited itself so

385
00:14:38,500 --> 00:14:42,370
there needs to be protections in place

386
00:14:39,540 --> 00:14:44,380
where the drivers do a probe for repro

387
00:14:42,370 --> 00:14:46,240
for right when buffers come from an

388
00:14:44,380 --> 00:14:48,550
untrusted source to make sure at that

389
00:14:46,240 --> 00:14:51,010
memory the buffer and the range of it

390
00:14:48,550 --> 00:14:52,420
all resides within user mode memory and

391
00:14:51,010 --> 00:14:54,760
the reason it was a weak the way they're

392
00:14:52,420 --> 00:14:56,020
using it is when they call appropriate

393
00:14:54,760 --> 00:14:58,000
in the driver when I send a message to

394
00:14:56,020 --> 00:15:00,610
this routine they would use the size

395
00:14:58,000 --> 00:15:03,820
that I said the buffer was and normally

396
00:15:00,610 --> 00:15:06,130
that's okay but what happened was when I

397
00:15:03,820 --> 00:15:09,670
send me my buffer and the size of it to

398
00:15:06,130 --> 00:15:11,350
the driver it'll say it'll pass however

399
00:15:09,670 --> 00:15:13,060
comodo will blindly just write a

400
00:15:11,350 --> 00:15:15,100
thousand more bytes to that buffer and

401
00:15:13,060 --> 00:15:17,500
they didn't actually check the buffer

402
00:15:15,100 --> 00:15:19,839
size themselves they just let probe for

403
00:15:17,500 --> 00:15:21,850
read do it and I'm hoping this next

404
00:15:19,839 --> 00:15:24,250
example will clear it up so here's

405
00:15:21,850 --> 00:15:27,040
komodo actually blindly soon after that

406
00:15:24,250 --> 00:15:29,740
probe for write check just mem sets you

407
00:15:27,040 --> 00:15:32,589
know hex seven three four bytes to my

408
00:15:29,740 --> 00:15:35,950
buffer at pass from user mode and way we

409
00:15:32,589 --> 00:15:38,980
can corrupt this is by writing code

410
00:15:35,950 --> 00:15:41,260
something like this so we can allocate a

411
00:15:38,980 --> 00:15:45,430
memory buffer near the end of our user

412
00:15:41,260 --> 00:15:47,140
mode memory range then we will push that

413
00:15:45,430 --> 00:15:49,390
buffer up more so we only give it hex

414
00:15:47,140 --> 00:15:50,740
twenty bytes of slack space before we

415
00:15:49,390 --> 00:15:53,199
hit the very end of our user mode memory

416
00:15:50,740 --> 00:15:54,760
range and let me go ahead and pass that

417
00:15:53,200 --> 00:15:56,440
buffer to the driver and we told the

418
00:15:54,760 --> 00:15:59,620
driver the buffer size is only eight

419
00:15:56,440 --> 00:16:01,000
bytes and what will happen is Pro four

420
00:15:59,620 --> 00:16:02,770
right will receive that and it'll say

421
00:16:01,000 --> 00:16:04,990
okay we got a buffer from user mode

422
00:16:02,770 --> 00:16:07,180
this is 8 bytes yep that all resides

423
00:16:04,990 --> 00:16:09,190
within user mode memory barely but it

424
00:16:07,180 --> 00:16:10,089
does and as it goes down to the driver

425
00:16:09,190 --> 00:16:11,500
to get handled

426
00:16:10,089 --> 00:16:13,120
Komodo will blind the right thousand

427
00:16:11,500 --> 00:16:15,490
more bytes to it spilling pasture user

428
00:16:13,120 --> 00:16:18,640
mode memory range and we get a nice be

429
00:16:15,490 --> 00:16:20,020
sod from a sandbox and this is uh you

430
00:16:18,640 --> 00:16:21,610
know pretty cool I mean we got this

431
00:16:20,020 --> 00:16:25,750
every time presented i keeping my

432
00:16:21,610 --> 00:16:28,540
computer crash when i'm like me uh yeah

433
00:16:25,750 --> 00:16:31,420
CMD guards sis system service exception

434
00:16:28,540 --> 00:16:32,469
this is pretty cool but it's actually

435
00:16:31,420 --> 00:16:35,560
not really anything we do with this

436
00:16:32,470 --> 00:16:37,720
because as you may know on 64-bit OS is

437
00:16:35,560 --> 00:16:40,029
elise we have an enormous amount of dead

438
00:16:37,720 --> 00:16:40,660
space between use ml memory and kernel

439
00:16:40,029 --> 00:16:42,670
memory

440
00:16:40,660 --> 00:16:44,079
this is x86 we could have wrote past

441
00:16:42,670 --> 00:16:46,510
using my memory and affected kernel

442
00:16:44,080 --> 00:16:49,420
memory right you know like that but in

443
00:16:46,510 --> 00:16:51,700
x64 it's an enormous amount of you know

444
00:16:49,420 --> 00:16:53,819
dead man space so spilling over it it's

445
00:16:51,700 --> 00:16:56,890
just a typical seg fault really

446
00:16:53,820 --> 00:16:58,690
so once windows supports 16 exabytes of

447
00:16:56,890 --> 00:17:02,110
memory or whatever then this one ability

448
00:16:58,690 --> 00:17:05,380
will be actually useful so again we just

449
00:17:02,110 --> 00:17:07,720
report that typical piece on next to

450
00:17:05,380 --> 00:17:10,120
look at there's a shared memory issue

451
00:17:07,720 --> 00:17:11,829
going on here too so seeing the agent

452
00:17:10,119 --> 00:17:14,469
which is the main antivirus executable

453
00:17:11,829 --> 00:17:15,909
as exposing a piece of shared memory and

454
00:17:14,470 --> 00:17:17,470
once we check the permissions of this

455
00:17:15,910 --> 00:17:20,709
shared memory its writable by everyone

456
00:17:17,470 --> 00:17:22,179
and as i mentioned before we can connect

457
00:17:20,709 --> 00:17:24,160
to securable objects it's a sandbox

458
00:17:22,179 --> 00:17:27,610
process given we bypass through user

459
00:17:24,160 --> 00:17:29,530
mode hook and go ahead and look at what

460
00:17:27,609 --> 00:17:33,280
 what this shared memory is that CMD

461
00:17:29,530 --> 00:17:34,899
asia is exposing and we see the contents

462
00:17:33,280 --> 00:17:36,760
looks like this and when I reverse

463
00:17:34,900 --> 00:17:38,170
engineer the antivirus to see what what

464
00:17:36,760 --> 00:17:40,780
data they're writing out to this memory

465
00:17:38,170 --> 00:17:42,490
you know shared memory object and I find

466
00:17:40,780 --> 00:17:43,690
out it's the contents of an entire C++

467
00:17:42,490 --> 00:17:45,760
object they're just writing to share

468
00:17:43,690 --> 00:17:49,270
memory that anyone else can write to

469
00:17:45,760 --> 00:17:50,650
themselves and off the bat I actually

470
00:17:49,270 --> 00:17:52,059
looked a little deeper more specifically

471
00:17:50,650 --> 00:17:54,070
they call it a share memory dick that's

472
00:17:52,059 --> 00:17:55,660
a class that they're writing and here I

473
00:17:54,070 --> 00:17:59,080
outline the key value length

474
00:17:55,660 --> 00:18:00,340
fields of that structure and we can

475
00:17:59,080 --> 00:18:02,889
actually instantly create it out of

476
00:18:00,340 --> 00:18:05,020
bounds read here if we just write really

477
00:18:02,890 --> 00:18:07,300
large values this key value links so

478
00:18:05,020 --> 00:18:09,100
that next time komodo tries to read this

479
00:18:07,300 --> 00:18:11,050
from this object this shared memory

480
00:18:09,100 --> 00:18:13,090
dictionary it's going to end up reading

481
00:18:11,050 --> 00:18:15,090
like think the string is like 10,000

482
00:18:13,090 --> 00:18:18,629
bytes we passed the memory second

483
00:18:15,090 --> 00:18:21,629
and SEC poll and of course is what this

484
00:18:18,630 --> 00:18:24,660
following code does here one of the CB 3

485
00:18:21,630 --> 00:18:27,060
972 you'll notice this function called

486
00:18:24,660 --> 00:18:28,350
repair in t dll that's just undoing the

487
00:18:27,060 --> 00:18:31,050
user mode hooks they put in me as a

488
00:18:28,350 --> 00:18:33,060
sandbox connecting the share memory and

489
00:18:31,050 --> 00:18:34,950
we write a bunch of F's and next time

490
00:18:33,060 --> 00:18:36,389
komodo reads from that shared memory

491
00:18:34,950 --> 00:18:38,760
which is constantly it's constantly

492
00:18:36,390 --> 00:18:40,260
reading it just instantly crashes and so

493
00:18:38,760 --> 00:18:41,730
now when we have we have a full-on like

494
00:18:40,260 --> 00:18:43,410
we just crippled killed antivirus in

495
00:18:41,730 --> 00:18:45,750
sandbox like there is no more scanning

496
00:18:43,410 --> 00:18:49,080
there is no more sandboxing if we create

497
00:18:45,750 --> 00:18:51,210
a new process it's over now but it's

498
00:18:49,080 --> 00:18:52,620
worth mentioning that if the user had

499
00:18:51,210 --> 00:18:54,390
hips enabled which is an additional

500
00:18:52,620 --> 00:18:56,340
security feature in a komodo that's not

501
00:18:54,390 --> 00:18:58,380
default this would not be possible and

502
00:18:56,340 --> 00:19:00,209
also I wasn't here to just break

503
00:18:58,380 --> 00:19:01,740
antivirus I was here to actually exploit

504
00:19:00,210 --> 00:19:04,860
through it and do something maybe more

505
00:19:01,740 --> 00:19:07,020
treacherous so that leads us had to calm

506
00:19:04,860 --> 00:19:09,600
and calm is where the rest of this

507
00:19:07,020 --> 00:19:11,430
attack service will be talking about it

508
00:19:09,600 --> 00:19:14,370
stands for component object model and

509
00:19:11,430 --> 00:19:17,220
I'm gonna try to let MSDN do a little

510
00:19:14,370 --> 00:19:19,010
explanation of what this is so calm is a

511
00:19:17,220 --> 00:19:21,060
platform independent distributed

512
00:19:19,010 --> 00:19:22,710
object-oriented system for creating

513
00:19:21,060 --> 00:19:24,899
binary software components that can

514
00:19:22,710 --> 00:19:27,150
interact and basically you have this

515
00:19:24,900 --> 00:19:29,250
concept of a client comm client and a

516
00:19:27,150 --> 00:19:31,080
comm server and it can be two separate

517
00:19:29,250 --> 00:19:33,150
compiled modules yet they can interact

518
00:19:31,080 --> 00:19:35,340
with each other like such as instantiate

519
00:19:33,150 --> 00:19:37,950
objects of one another call methods on

520
00:19:35,340 --> 00:19:39,929
that object and it's also worth

521
00:19:37,950 --> 00:19:42,660
mentioning that these client-server

522
00:19:39,930 --> 00:19:43,950
relationships they can be a DLL you load

523
00:19:42,660 --> 00:19:45,720
in your process that could be considered

524
00:19:43,950 --> 00:19:48,870
a comp server so you're actually just

525
00:19:45,720 --> 00:19:51,000
interact with a DLL through comm and you

526
00:19:48,870 --> 00:19:52,409
know basically just accomplishing a comm

527
00:19:51,000 --> 00:19:53,850
interaction but from a security

528
00:19:52,410 --> 00:19:55,230
standpoint that's not really interesting

529
00:19:53,850 --> 00:19:55,770
there's no privilege boundary being Carl

530
00:19:55,230 --> 00:19:57,330
crossed

531
00:19:55,770 --> 00:19:59,490
if you exploit the comp server and it's

532
00:19:57,330 --> 00:20:01,590
a DLL and your process I mean who cares

533
00:19:59,490 --> 00:20:03,390
you running as your same privilege that

534
00:20:01,590 --> 00:20:05,370
you're currently are the second type of

535
00:20:03,390 --> 00:20:07,470
comm you'll come across called like

536
00:20:05,370 --> 00:20:09,959
outer prom and this will actually be at

537
00:20:07,470 --> 00:20:12,060
a separate exe running on your system

538
00:20:09,960 --> 00:20:14,130
that will be a comp that you can

539
00:20:12,060 --> 00:20:16,590
remotely interact with and invoke and

540
00:20:14,130 --> 00:20:18,420
create objects in its address space call

541
00:20:16,590 --> 00:20:20,340
methods on them and this is called auto

542
00:20:18,420 --> 00:20:22,590
prom this is much more interesting from

543
00:20:20,340 --> 00:20:24,480
a exploitation perspective because now

544
00:20:22,590 --> 00:20:27,780
we can actually cross privileged

545
00:20:24,480 --> 00:20:28,909
boundaries so I got on this whole comm

546
00:20:27,780 --> 00:20:31,489
cake because

547
00:20:28,909 --> 00:20:33,379
I saw this process called sissy XE which

548
00:20:31,489 --> 00:20:35,179
was a low privileged comodo client it's

549
00:20:33,379 --> 00:20:37,849
got this GUI interface you can scan you

550
00:20:35,179 --> 00:20:39,379
can change settings clearly there's some

551
00:20:37,849 --> 00:20:40,668
communication vector that it's

552
00:20:39,379 --> 00:20:43,070
communicating these high privileged

553
00:20:40,669 --> 00:20:45,229
agents to tell it to do things so that

554
00:20:43,070 --> 00:20:46,729
was one little evidence there and

555
00:20:45,229 --> 00:20:49,249
there's also the contact shell menu

556
00:20:46,729 --> 00:20:50,809
Handler and window so in Komodo when you

557
00:20:49,249 --> 00:20:52,519
right-click on a file that can just you

558
00:20:50,809 --> 00:20:54,889
can also scan that file with comodo

559
00:20:52,519 --> 00:20:56,450
antivirus so clearly that's another

560
00:20:54,889 --> 00:20:58,488
instance where it must be getting the

561
00:20:56,450 --> 00:20:59,989
string for that file passing it

562
00:20:58,489 --> 00:21:02,889
somewhere and telling some privileged

563
00:20:59,989 --> 00:21:05,389
agent to scan it like there must be some

564
00:21:02,889 --> 00:21:07,129
communication going on there so to

565
00:21:05,389 --> 00:21:09,258
figure out this communication I went

566
00:21:07,129 --> 00:21:11,418
ahead and reverse engineer cap shell DLL

567
00:21:09,259 --> 00:21:13,099
the context menu Handler and I wanted to

568
00:21:11,419 --> 00:21:16,190
see how it's communicating to the main

569
00:21:13,099 --> 00:21:18,168
antivirus agent and right here I found

570
00:21:16,190 --> 00:21:20,299
like everything I needed to see here

571
00:21:18,169 --> 00:21:22,909
you'll see a call to something called Co

572
00:21:20,299 --> 00:21:25,599
get class object it's a comm method what

573
00:21:22,909 --> 00:21:28,700
this does is actually requesting an

574
00:21:25,599 --> 00:21:31,269
interface to a class ID to create an

575
00:21:28,700 --> 00:21:33,859
object instance in this comm server and

576
00:21:31,269 --> 00:21:35,239
right when we see this we got some good

577
00:21:33,859 --> 00:21:37,549
information we can work off because

578
00:21:35,239 --> 00:21:40,009
right here we see something called clsid

579
00:21:37,549 --> 00:21:42,710
sis gate that's the class ID they're

580
00:21:40,009 --> 00:21:44,720
passing this api and if we look up this

581
00:21:42,710 --> 00:21:46,970
class ID on the registry will find

582
00:21:44,720 --> 00:21:48,169
instantly who the comp server is who are

583
00:21:46,970 --> 00:21:51,559
they're trying to talk to and create an

584
00:21:48,169 --> 00:21:54,649
object in so go ahead and do that here

585
00:21:51,559 --> 00:21:56,539
we go we find in the registry in fact we

586
00:21:54,649 --> 00:21:58,428
see a beautiful thing here it says local

587
00:21:56,539 --> 00:22:00,320
server 32 so when I was talking about

588
00:21:58,429 --> 00:22:03,109
there's two main types of comm like in

589
00:22:00,320 --> 00:22:05,269
process at appraoch local server 32 is

590
00:22:03,109 --> 00:22:07,070
it out of proc column server and even

591
00:22:05,269 --> 00:22:09,919
more interesting as we see who that auto

592
00:22:07,070 --> 00:22:12,289
out of proc comp server is it's CMD

593
00:22:09,919 --> 00:22:15,889
agent the one running a system so here

594
00:22:12,289 --> 00:22:18,769
we have a model of a low privilege comm

595
00:22:15,889 --> 00:22:21,320
clients such as sis exe remotely

596
00:22:18,769 --> 00:22:26,179
interacting with this CMD agent running

597
00:22:21,320 --> 00:22:30,109
a system over comm again over RPC to

598
00:22:26,179 --> 00:22:31,099
invoke these methods and functionality

599
00:22:30,109 --> 00:22:32,478
and so you can imagine if you're a

600
00:22:31,099 --> 00:22:34,668
developer and you're writing a comm

601
00:22:32,479 --> 00:22:35,690
server that's out of proc you got to be

602
00:22:34,669 --> 00:22:38,929
really careful how you write that

603
00:22:35,690 --> 00:22:39,979
because you're exposing yourself to low

604
00:22:38,929 --> 00:22:42,109
privilege comm clients adduce

605
00:22:39,979 --> 00:22:42,620
particularly you know initially evoke

606
00:22:42,109 --> 00:22:44,570
sensitive

607
00:22:42,620 --> 00:22:46,639
methods in your address space so

608
00:22:44,570 --> 00:22:48,050
naturally a lot of the way time you see

609
00:22:46,640 --> 00:22:49,130
this they make those precautions and

610
00:22:48,050 --> 00:22:50,750
they write them carefully but we're

611
00:22:49,130 --> 00:22:53,390
still gonna push through and find the

612
00:22:50,750 --> 00:22:54,980
mistakes they make and that gets into

613
00:22:53,390 --> 00:22:56,120
now that we have an attack service to

614
00:22:54,980 --> 00:22:58,760
work off but we're gonna create an

615
00:22:56,120 --> 00:23:00,379
attack vector and for this I just went

616
00:22:58,760 --> 00:23:02,150
ahead and reverse engineer the comp line

617
00:23:00,380 --> 00:23:04,550
and wrote my own column client to mimic

618
00:23:02,150 --> 00:23:06,320
what Komodo was actually doing and on

619
00:23:04,550 --> 00:23:09,230
the left here it's just a v-- table I

620
00:23:06,320 --> 00:23:10,309
extracted from the com server and this

621
00:23:09,230 --> 00:23:12,350
is important because I'm just right

622
00:23:10,309 --> 00:23:14,629
getting the method like signatures so I

623
00:23:12,350 --> 00:23:17,149
know how to interact with the stubs from

624
00:23:14,630 --> 00:23:19,520
our my compliant and on the right it's

625
00:23:17,150 --> 00:23:22,429
just the boilerplate code of setting up

626
00:23:19,520 --> 00:23:24,980
a calm relationship so here I'm I'm

627
00:23:22,429 --> 00:23:27,290
asking for a interface to a class

628
00:23:24,980 --> 00:23:30,410
factory where I can create a fan sense

629
00:23:27,290 --> 00:23:32,928
of that object in there the comp server

630
00:23:30,410 --> 00:23:35,450
and then I'm eventually calling the scan

631
00:23:32,929 --> 00:23:37,790
file method which is the off the correct

632
00:23:35,450 --> 00:23:40,490
offset to tell komodo say hey here's a

633
00:23:37,790 --> 00:23:40,879
string now scan this file so i wrote

634
00:23:40,490 --> 00:23:42,440
this

635
00:23:40,880 --> 00:23:45,470
exactly the way i reverse-engineered it

636
00:23:42,440 --> 00:23:48,290
from the komodo client however when i

637
00:23:45,470 --> 00:23:50,480
got to this line when i actually asked

638
00:23:48,290 --> 00:23:52,760
to create an instance of the object in

639
00:23:50,480 --> 00:23:55,580
the comm server I would get an access

640
00:23:52,760 --> 00:23:57,650
denied return and that I bummed me out

641
00:23:55,580 --> 00:24:00,830
for a couple minutes but then I started

642
00:23:57,650 --> 00:24:02,480
thinking well yeah I'm sandbox but it

643
00:24:00,830 --> 00:24:04,280
still doesn't make sense because I

644
00:24:02,480 --> 00:24:05,260
didn't see when I reverse engineering

645
00:24:04,280 --> 00:24:07,700
the sandbox I didn't see anything

646
00:24:05,260 --> 00:24:08,929
interacting or manipulating comm

647
00:24:07,700 --> 00:24:10,760
interactions I didn't see anything

648
00:24:08,929 --> 00:24:12,770
blocking that and the other reason was

649
00:24:10,760 --> 00:24:14,330
okay I'm writing the same as far as

650
00:24:12,770 --> 00:24:16,010
Windows is concerned I'm running the

651
00:24:14,330 --> 00:24:17,720
same privileges as sis exe and

652
00:24:16,010 --> 00:24:19,790
explorer.exe and they can get away with

653
00:24:17,720 --> 00:24:22,520
these calls so why can't I why am I

654
00:24:19,790 --> 00:24:24,050
getting access to nine and so instead of

655
00:24:22,520 --> 00:24:26,300
giving up I wanted to push forward and

656
00:24:24,050 --> 00:24:29,030
see what was actually going on and this

657
00:24:26,300 --> 00:24:31,460
now involved debugging the main comp

658
00:24:29,030 --> 00:24:33,050
serve or CMD agent we now want to see

659
00:24:31,460 --> 00:24:34,910
what's happening when we asked to create

660
00:24:33,050 --> 00:24:37,100
an instance of an object and this comp

661
00:24:34,910 --> 00:24:39,800
server why is it why is it failing

662
00:24:37,100 --> 00:24:41,300
what's going on and we find that it

663
00:24:39,800 --> 00:24:43,520
actually wasn't Windows giving us access

664
00:24:41,300 --> 00:24:46,340
denied err code it was comodo themselves

665
00:24:43,520 --> 00:24:48,050
in fact here it is we put it through win

666
00:24:46,340 --> 00:24:50,840
debug we found the spot right we're

667
00:24:48,050 --> 00:24:54,169
about to instantiate an object in its in

668
00:24:50,840 --> 00:24:56,280
the comp server and right here we see

669
00:24:54,170 --> 00:24:59,130
the access denied err code

670
00:24:56,280 --> 00:25:01,110
bottom and it was returning that because

671
00:24:59,130 --> 00:25:03,690
whatever this function was up top was

672
00:25:01,110 --> 00:25:04,560
returning zero and it's as simple as we

673
00:25:03,690 --> 00:25:05,970
just need to figure out what his

674
00:25:04,560 --> 00:25:09,450
function is and how to get it to return

675
00:25:05,970 --> 00:25:11,100
nonzero well when I reverse engineer

676
00:25:09,450 --> 00:25:13,200
this function I found that it was a comm

677
00:25:11,100 --> 00:25:14,580
signature check so they're actually

678
00:25:13,200 --> 00:25:15,840
making sure that count clients that

679
00:25:14,580 --> 00:25:17,370
connect to them are must be

680
00:25:15,840 --> 00:25:20,010
cryptographically signed by their

681
00:25:17,370 --> 00:25:21,600
Microsoft or Komoda themselves and this

682
00:25:20,010 --> 00:25:23,520
is a pretty good protection I mean you

683
00:25:21,600 --> 00:25:25,080
know like I said before calm servers are

684
00:25:23,520 --> 00:25:27,900
sensitive so they want to make sure that

685
00:25:25,080 --> 00:25:30,000
hey you got to be legit to talk to me

686
00:25:27,900 --> 00:25:31,890
and this makes sense too because the

687
00:25:30,000 --> 00:25:34,260
only comments they expect to talk to the

688
00:25:31,890 --> 00:25:37,020
server is either explorer.exe which is

689
00:25:34,260 --> 00:25:39,390
assigned by Microsoft or sissy XE which

690
00:25:37,020 --> 00:25:41,700
is signed by Comodo and anyone else your

691
00:25:39,390 --> 00:25:43,410
access denied well I want to push

692
00:25:41,700 --> 00:25:46,050
forward and see how we can find mistakes

693
00:25:43,410 --> 00:25:48,000
in this signature check and this

694
00:25:46,050 --> 00:25:51,780
involves gets into bypassing the

695
00:25:48,000 --> 00:25:53,040
security measures I took apart the part

696
00:25:51,780 --> 00:25:54,629
where they're doing this signature check

697
00:25:53,040 --> 00:25:56,550
the com server so now it was actually

698
00:25:54,630 --> 00:25:57,900
the comp server and how it's validating

699
00:25:56,550 --> 00:26:00,720
the com client connected to it that is

700
00:25:57,900 --> 00:26:02,730
cryptographically signed and we pretty

701
00:26:00,720 --> 00:26:04,650
much find a mistake in the signature

702
00:26:02,730 --> 00:26:06,000
checking code so this is the code

703
00:26:04,650 --> 00:26:10,080
leading up to where they're trying to

704
00:26:06,000 --> 00:26:12,060
extract the file name file path of the

705
00:26:10,080 --> 00:26:13,620
comp client and passing it to a singer

706
00:26:12,060 --> 00:26:15,090
should check that checks it on disk I

707
00:26:13,620 --> 00:26:17,820
don't know if anybody maybe sees

708
00:26:15,090 --> 00:26:22,139
anything wrong with this codes might be

709
00:26:17,820 --> 00:26:24,600
hard to see actually and I but in short

710
00:26:22,140 --> 00:26:26,910
here's here's what's happening

711
00:26:24,600 --> 00:26:29,250
the server is obtaining the comp clients

712
00:26:26,910 --> 00:26:31,080
process ID in a valid way so when the

713
00:26:29,250 --> 00:26:33,930
comp client connects to it comp server

714
00:26:31,080 --> 00:26:37,710
checks the pit of the comp client with

715
00:26:33,930 --> 00:26:39,360
the pit it looks up the process name by

716
00:26:37,710 --> 00:26:41,940
call eventually calling it to get module

717
00:26:39,360 --> 00:26:44,340
filename e^x and now it resolves to calm

718
00:26:41,940 --> 00:26:46,050
clients full path and with that full

719
00:26:44,340 --> 00:26:48,230
path and now pass it to a stage your

720
00:26:46,050 --> 00:26:52,320
validation function where it checks the

721
00:26:48,230 --> 00:26:54,420
cryptographic signature on disk and the

722
00:26:52,320 --> 00:26:56,879
problem here I mean one problem is that

723
00:26:54,420 --> 00:26:59,550
they're using get module filename e^x

724
00:26:56,880 --> 00:27:02,100
and if you know how this API works it

725
00:26:59,550 --> 00:27:05,100
actually queries the remote processes

726
00:27:02,100 --> 00:27:07,949
pen and a peb is a process environment

727
00:27:05,100 --> 00:27:09,540
block and this exists in my process as a

728
00:27:07,950 --> 00:27:09,929
comp client so really what's happening

729
00:27:09,540 --> 00:27:11,899
is like

730
00:27:09,929 --> 00:27:14,580
my tech to the server it's asking my all

731
00:27:11,899 --> 00:27:16,498
prepared was in my address base what my

732
00:27:14,580 --> 00:27:18,240
name is so right there we can actually

733
00:27:16,499 --> 00:27:21,090
just override our own pet with a

734
00:27:18,240 --> 00:27:22,860
different process path and we can fool

735
00:27:21,090 --> 00:27:26,129
it into checking their signature if the

736
00:27:22,860 --> 00:27:28,139
wrong binary that's one method and list

737
00:27:26,129 --> 00:27:30,389
it here so if we just spoof pad loader

738
00:27:28,139 --> 00:27:32,428
in memory order module list that's where

739
00:27:30,389 --> 00:27:33,928
that string will be we can just change

740
00:27:32,429 --> 00:27:35,970
our process name we'll just change it to

741
00:27:33,929 --> 00:27:37,350
like we're you know SVC host and I'll

742
00:27:35,970 --> 00:27:39,720
check it and we're assignment Microsoft

743
00:27:37,350 --> 00:27:42,299
and and now we just got past the seizure

744
00:27:39,720 --> 00:27:45,210
check additional method could be process

745
00:27:42,299 --> 00:27:47,158
hollowing a actual Komodo or Microsoft

746
00:27:45,210 --> 00:27:49,259
binary and I actually opted for the

747
00:27:47,159 --> 00:27:51,330
second method because it gave us an

748
00:27:49,259 --> 00:27:53,940
additional benefit that maybe I'll get

749
00:27:51,330 --> 00:27:56,129
into later but process hollowing if you

750
00:27:53,940 --> 00:27:58,110
don't know it's the act of where you

751
00:27:56,129 --> 00:28:01,049
start a legit process on the computer

752
00:27:58,110 --> 00:28:02,399
you yank out all of its code and it's

753
00:28:01,049 --> 00:28:04,168
Ted insert your own code in there and

754
00:28:02,399 --> 00:28:06,090
resumed the thread and so now you have

755
00:28:04,169 --> 00:28:08,190
this like process that wasn't meant to

756
00:28:06,090 --> 00:28:10,408
run this code you just put in it running

757
00:28:08,190 --> 00:28:12,299
and everything like looks legit and

758
00:28:10,409 --> 00:28:14,070
that's exactly what I decided to do so I

759
00:28:12,299 --> 00:28:17,100
wrote a process howl over a couple

760
00:28:14,070 --> 00:28:20,189
nights and we now have something looks

761
00:28:17,100 --> 00:28:22,498
like this we have a contained process we

762
00:28:20,190 --> 00:28:25,529
create an instance of the actual comodo

763
00:28:22,499 --> 00:28:27,929
binary from Program Files CMD verse and

764
00:28:25,529 --> 00:28:30,119
yeah it's worth mentioning this process

765
00:28:27,929 --> 00:28:32,580
I just created is sandbox as well but

766
00:28:30,119 --> 00:28:34,590
that doesn't matter what we do is we

767
00:28:32,580 --> 00:28:36,299
yank out all of its code all that comm

768
00:28:34,590 --> 00:28:38,730
code that wasn't working we just shoved

769
00:28:36,299 --> 00:28:40,710
it into this new process we made that's

770
00:28:38,730 --> 00:28:42,419
the comment of comodo one we resumed the

771
00:28:40,710 --> 00:28:44,249
thread and now what's gonna happen is

772
00:28:42,419 --> 00:28:46,139
that we're gonna make this comodo

773
00:28:44,249 --> 00:28:50,490
process hold it hostage and do request

774
00:28:46,139 --> 00:28:51,899
for us and right when we do it that way

775
00:28:50,490 --> 00:28:53,940
we actually get a scan that happen on

776
00:28:51,899 --> 00:28:56,610
the machine so this is cool this means

777
00:28:53,940 --> 00:28:58,139
that we just you know now communicating

778
00:28:56,610 --> 00:29:00,209
with this privileged comp server and

779
00:28:58,139 --> 00:29:01,769
while this is cool we're clearly not

780
00:29:00,210 --> 00:29:03,990
gonna like scan our way out of this

781
00:29:01,769 --> 00:29:05,940
sandbox or do anything cool but we just

782
00:29:03,990 --> 00:29:07,409
open up a pretty awesome attack surface

783
00:29:05,940 --> 00:29:11,369
and we assume there's more functions

784
00:29:07,409 --> 00:29:15,600
than just scan we can hit so get into

785
00:29:11,369 --> 00:29:17,399
exploitation and POC so how do you go

786
00:29:15,600 --> 00:29:19,259
about this now I went ahead and looked

787
00:29:17,399 --> 00:29:21,029
at the V table we're hitting so when

788
00:29:19,259 --> 00:29:23,400
we're a comm client we're creating an

789
00:29:21,029 --> 00:29:25,559
object in the comm server

790
00:29:23,400 --> 00:29:27,240
with that we get an interface back which

791
00:29:25,559 --> 00:29:29,610
is an interface to a bunch of functions

792
00:29:27,240 --> 00:29:31,920
we can hit from a comp client and right

793
00:29:29,610 --> 00:29:34,110
here where reverse-engineered the just

794
00:29:31,920 --> 00:29:35,640
some of the comments are and this is the

795
00:29:34,110 --> 00:29:37,080
B table we can interact these are all

796
00:29:35,640 --> 00:29:39,750
the functions we can hit as a low

797
00:29:37,080 --> 00:29:40,649
privilege comm client and I looked

798
00:29:39,750 --> 00:29:42,270
through a bunch of these and

799
00:29:40,650 --> 00:29:44,280
unfortunately they seem pretty secure

800
00:29:42,270 --> 00:29:45,270
actually the way they wrote them they

801
00:29:44,280 --> 00:29:47,040
did I couldn't find any memory

802
00:29:45,270 --> 00:29:49,770
corruption issues I passed like bad data

803
00:29:47,040 --> 00:29:51,809
etc the various ones seem pretty solid

804
00:29:49,770 --> 00:29:54,210
there and also they had a good use of

805
00:29:51,809 --> 00:29:56,690
Cole impersonate client so CO

806
00:29:54,210 --> 00:29:58,920
impersonate client is an API used

807
00:29:56,690 --> 00:30:00,809
typically you'll see them services so

808
00:29:58,920 --> 00:30:02,580
that when a client when I looked Rivage

809
00:30:00,809 --> 00:30:04,110
process asks the privilege service to do

810
00:30:02,580 --> 00:30:04,620
something for it like hey read a file

811
00:30:04,110 --> 00:30:06,959
for me

812
00:30:04,620 --> 00:30:09,209
they'll call CO impersonate client to

813
00:30:06,960 --> 00:30:10,860
emulate impersonate the privileges of

814
00:30:09,210 --> 00:30:12,450
that client ask them for the job to be

815
00:30:10,860 --> 00:30:14,280
done and that's important because you

816
00:30:12,450 --> 00:30:16,890
don't want some service to say hey we

817
00:30:14,280 --> 00:30:18,840
just file for me as system it just reads

818
00:30:16,890 --> 00:30:21,450
the file and gives the data back right

819
00:30:18,840 --> 00:30:23,070
it needs to say ok I'll read that file

820
00:30:21,450 --> 00:30:24,900
but I'm gonna act like I'm you with your

821
00:30:23,070 --> 00:30:27,379
permissions and do it for you so that

822
00:30:24,900 --> 00:30:30,030
you can't exploit my power basically and

823
00:30:27,380 --> 00:30:32,130
we try to look for bugs in involving

824
00:30:30,030 --> 00:30:33,870
that uh yeah they use Co impersonate

825
00:30:32,130 --> 00:30:34,920
client quite a bit and they use it in a

826
00:30:33,870 --> 00:30:36,419
good manner and every time they're about

827
00:30:34,920 --> 00:30:38,340
to do something privileged they call

828
00:30:36,420 --> 00:30:41,010
this so nothing we could affect

829
00:30:38,340 --> 00:30:43,620
necessarily there but it's not over

830
00:30:41,010 --> 00:30:45,840
because with a comm clients what I'm

831
00:30:43,620 --> 00:30:48,659
sorry with a comm object typically

832
00:30:45,840 --> 00:30:50,370
supports multiple interfaces so right

833
00:30:48,660 --> 00:30:51,990
now well the way if we had our code we

834
00:30:50,370 --> 00:30:53,639
just ask for one interface of that calm

835
00:30:51,990 --> 00:30:55,590
object there's other interfaces we can

836
00:30:53,640 --> 00:30:56,670
look at and how do we know new interface

837
00:30:55,590 --> 00:30:58,350
that we can ask for

838
00:30:56,670 --> 00:31:00,270
there's probably easier ways but the way

839
00:30:58,350 --> 00:31:02,100
I did it was I just opened up the comp

840
00:31:00,270 --> 00:31:05,010
server again there's a function called

841
00:31:02,100 --> 00:31:06,389
query interface that all comm clients

842
00:31:05,010 --> 00:31:08,129
will inherit well one of the methods

843
00:31:06,390 --> 00:31:11,850
they'll inherit a called query interface

844
00:31:08,130 --> 00:31:14,280
and what this is is when the come client

845
00:31:11,850 --> 00:31:16,350
asked for a interface to an object the

846
00:31:14,280 --> 00:31:18,600
comm server has to check itself against

847
00:31:16,350 --> 00:31:20,610
all support interface IDs to say do I

848
00:31:18,600 --> 00:31:22,709
even support this interface that they're

849
00:31:20,610 --> 00:31:24,240
asking for so one quick way to find all

850
00:31:22,710 --> 00:31:26,010
support interface for a comm server

851
00:31:24,240 --> 00:31:27,830
reverse engineer that's query interface

852
00:31:26,010 --> 00:31:33,510
function that they have to call into and

853
00:31:27,830 --> 00:31:35,010
unroll the array of interface IDs that

854
00:31:33,510 --> 00:31:36,929
they iterate over to check if they're

855
00:31:35,010 --> 00:31:37,170
supported and here we find those right

856
00:31:36,929 --> 00:31:39,360
here

857
00:31:37,170 --> 00:31:42,030
the comp server we see the top one or we

858
00:31:39,360 --> 00:31:44,010
see the middle one i ID i assists posad

859
00:31:42,030 --> 00:31:45,210
now when we just looked at that didn't

860
00:31:44,010 --> 00:31:47,190
really have a whole lot that was that

861
00:31:45,210 --> 00:31:50,610
beat table that list of functions but

862
00:31:47,190 --> 00:31:52,650
this top one here i ID service provider

863
00:31:50,610 --> 00:31:54,959
look kind of interesting and in fact we

864
00:31:52,650 --> 00:31:57,270
look up yeah MSDN what this AI service

865
00:31:54,960 --> 00:31:58,800
provider does it says the AI service

866
00:31:57,270 --> 00:32:01,440
provider interface has only one member

867
00:31:58,800 --> 00:32:04,230
query service through which a caller

868
00:32:01,440 --> 00:32:05,850
specifies the service ID so super

869
00:32:04,230 --> 00:32:09,540
generic sounding and that's kind of good

870
00:32:05,850 --> 00:32:12,389
because what I got from that is it's an

871
00:32:09,540 --> 00:32:13,710
application to find comm object

872
00:32:12,390 --> 00:32:16,050
basically it's like it's just the way to

873
00:32:13,710 --> 00:32:18,750
ask if you want to make a service as a

874
00:32:16,050 --> 00:32:20,220
custom you just wrap it with this query

875
00:32:18,750 --> 00:32:22,200
service and you can ask for it if you

876
00:32:20,220 --> 00:32:26,190
know the right service ID to ask for

877
00:32:22,200 --> 00:32:27,810
that the comp stripper made and I did

878
00:32:26,190 --> 00:32:29,220
find one of the service ideas that they

879
00:32:27,810 --> 00:32:31,860
support that they made themselves it's

880
00:32:29,220 --> 00:32:34,020
called is PC registry access and now we

881
00:32:31,860 --> 00:32:35,669
get some cooler attack service we have a

882
00:32:34,020 --> 00:32:38,220
whole new list of functions we can hit

883
00:32:35,670 --> 00:32:41,160
now as a low previous calm client and we

884
00:32:38,220 --> 00:32:43,110
see methods that do registry key reads

885
00:32:41,160 --> 00:32:44,490
without doing a KO impersonate client

886
00:32:43,110 --> 00:32:46,560
which remember that means that now

887
00:32:44,490 --> 00:32:48,360
they're reading registries as system for

888
00:32:46,560 --> 00:32:50,250
you and giving that data back so right

889
00:32:48,360 --> 00:32:52,229
now we have a way to read privileged

890
00:32:50,250 --> 00:32:54,810
registry keys that are like typically

891
00:32:52,230 --> 00:32:56,370
supposed to be blocked you know but I

892
00:32:54,810 --> 00:32:58,740
was more interested other methods that

893
00:32:56,370 --> 00:33:00,750
write registry keys and knowing how

894
00:32:58,740 --> 00:33:02,490
people make classes usually don't make

895
00:33:00,750 --> 00:33:04,350
only getters usually I kind of balance

896
00:33:02,490 --> 00:33:05,730
out the setters you know so that was

897
00:33:04,350 --> 00:33:09,209
kind of some hunch to that they're doing

898
00:33:05,730 --> 00:33:10,350
some registry writes and of course yes

899
00:33:09,210 --> 00:33:11,460
the answer is yes here's a registry

900
00:33:10,350 --> 00:33:13,020
right right here one of the methods

901
00:33:11,460 --> 00:33:14,670
you'll see there's no KO impersonate

902
00:33:13,020 --> 00:33:16,530
client call before this issues right

903
00:33:14,670 --> 00:33:18,800
gets right to the action with the data

904
00:33:16,530 --> 00:33:22,560
that it passed writes a registry key and

905
00:33:18,800 --> 00:33:24,990
returns so here's the plan now with all

906
00:33:22,560 --> 00:33:26,129
this that we have we from a sandbox

907
00:33:24,990 --> 00:33:28,860
hollow Akimoto

908
00:33:26,130 --> 00:33:30,870
signed Komodo binary and replace it with

909
00:33:28,860 --> 00:33:33,929
our malicious comp client code to bypass

910
00:33:30,870 --> 00:33:35,909
a signature check with our compliant

911
00:33:33,930 --> 00:33:38,880
obtains an interface to Isis class

912
00:33:35,910 --> 00:33:40,770
factory and with Isis class factory we

913
00:33:38,880 --> 00:33:44,430
instantiate an instance of I service

914
00:33:40,770 --> 00:33:46,080
provider in CMD agent exe our comm

915
00:33:44,430 --> 00:33:48,300
client now queries ID service provider

916
00:33:46,080 --> 00:33:50,789
for an interface to is CC registry

917
00:33:48,300 --> 00:33:53,729
access with is PC we registry acts

918
00:33:50,789 --> 00:33:56,339
calm client resolves an is PC reg key

919
00:33:53,729 --> 00:33:58,379
interface and now that we have an is PC

920
00:33:56,339 --> 00:34:00,389
Reggie interface we can call a special

921
00:33:58,379 --> 00:34:02,570
method which will obtain a writable reg

922
00:34:00,389 --> 00:34:05,579
key interface for a given registry key

923
00:34:02,570 --> 00:34:07,229
finally we invoke comm methods and CMD

924
00:34:05,579 --> 00:34:10,529
agent to actually just do that right the

925
00:34:07,229 --> 00:34:13,980
registry right and here you know some of

926
00:34:10,529 --> 00:34:16,440
the code that does that here where for

927
00:34:13,980 --> 00:34:19,230
our we're gonna try out we're querying

928
00:34:16,440 --> 00:34:20,609
the service for is PC reg key we end up

929
00:34:19,230 --> 00:34:22,740
asking for the right of a reg channel

930
00:34:20,609 --> 00:34:24,808
interface and we remotely invoke a

931
00:34:22,739 --> 00:34:26,428
registry right comm method and CMD agent

932
00:34:24,809 --> 00:34:28,200
and so this was all reverse-engineer

933
00:34:26,429 --> 00:34:31,049
from the comp server and how you know

934
00:34:28,199 --> 00:34:34,819
knowing how to interact with it from our

935
00:34:31,049 --> 00:34:37,589
low privileged state so we do that and

936
00:34:34,819 --> 00:34:40,889
boom success we actually just overrode

937
00:34:37,589 --> 00:34:42,989
the VSS service it's image path so next

938
00:34:40,889 --> 00:34:44,759
time windows reboots now it's gonna try

939
00:34:42,989 --> 00:34:47,668
to start whatever image path I wrote

940
00:34:44,759 --> 00:34:50,940
here as system service instead of the

941
00:34:47,668 --> 00:34:52,558
original VSS service and that's pretty

942
00:34:50,940 --> 00:34:55,799
cool I mean like you know after reboot

943
00:34:52,559 --> 00:34:57,569
to escalate the system but I found what

944
00:34:55,799 --> 00:35:01,200
better way I realized if we chained it

945
00:34:57,569 --> 00:35:03,329
with CBE 20193 97 to we can instantly

946
00:35:01,200 --> 00:35:05,279
escalate the system and that's because

947
00:35:03,329 --> 00:35:06,779
it's the one that crashes CFD agent so

948
00:35:05,279 --> 00:35:09,930
what we can do now is we can write a new

949
00:35:06,779 --> 00:35:12,900
CMD agent new executable path and CMD

950
00:35:09,930 --> 00:35:15,740
agent and registry well crash CMD agent

951
00:35:12,900 --> 00:35:18,450
from our sandbox using that share memory

952
00:35:15,740 --> 00:35:19,769
vulnerability the service will try to be

953
00:35:18,450 --> 00:35:22,288
to revive because it's a sticky service

954
00:35:19,769 --> 00:35:23,758
but it'll revive the wrong one because

955
00:35:22,289 --> 00:35:25,859
we just wrote a new image path and

956
00:35:23,759 --> 00:35:27,930
windows revive will start us as system

957
00:35:25,859 --> 00:35:30,029
instead of the actual comodo agent and

958
00:35:27,930 --> 00:35:32,519
we'll have something that now looks like

959
00:35:30,029 --> 00:35:35,640
this and if you don't believe most

960
00:35:32,519 --> 00:35:38,669
photoshop skills well I have a video

961
00:35:35,640 --> 00:35:41,660
demonstration for the POC so here I am

962
00:35:38,670 --> 00:35:44,990
this is comodo antivirus version 12 and

963
00:35:41,660 --> 00:35:48,118
we go ahead and this registry is showing

964
00:35:44,990 --> 00:35:51,000
yeah HQ local machine I've protected a

965
00:35:48,119 --> 00:35:54,450
Bonomi and we go ahead and start the POC

966
00:35:51,000 --> 00:35:55,799
as Sam in sandbox mode so this is our

967
00:35:54,450 --> 00:35:59,160
POC is running under the comodo's

968
00:35:55,799 --> 00:36:01,440
sandbox we copy the executable path of

969
00:35:59,160 --> 00:36:03,690
the image I want to replace CMD agent

970
00:36:01,440 --> 00:36:05,080
with and it's just the Who am I

971
00:36:03,690 --> 00:36:08,060
executable

972
00:36:05,080 --> 00:36:10,610
boom we wrote we X we wrote it now we

973
00:36:08,060 --> 00:36:13,130
just told CMD basically we just invoked

974
00:36:10,610 --> 00:36:14,900
a registry write a system there and now

975
00:36:13,130 --> 00:36:17,390
we're just going to remotely crash this

976
00:36:14,900 --> 00:36:19,220
service CMD agent we just killed it

977
00:36:17,390 --> 00:36:27,770
Windows tries to revive the service

978
00:36:19,220 --> 00:36:29,839
again and it's us system and system so

979
00:36:27,770 --> 00:36:31,430
that's that's basically it I like we

980
00:36:29,840 --> 00:36:33,680
have a POC released it actually happens

981
00:36:31,430 --> 00:36:36,109
all these CBE's in it from Komodo that

982
00:36:33,680 --> 00:36:38,240
you can play with here's a gentleman on

983
00:36:36,110 --> 00:36:39,770
the right as she on Twitter he popped

984
00:36:38,240 --> 00:36:41,899
Calchas system on his machine when he

985
00:36:39,770 --> 00:36:43,280
saw this come out so everything works

986
00:36:41,900 --> 00:36:46,400
always nicely right Pio season actually

987
00:36:43,280 --> 00:36:49,570
work on other people's machines so yeah

988
00:36:46,400 --> 00:36:51,500
happy happy customer there and

989
00:36:49,570 --> 00:36:53,780
recovering going over the disclosure

990
00:36:51,500 --> 00:36:55,490
summary we of course to disclose these

991
00:36:53,780 --> 00:36:57,290
bugs to the vendors and we find them and

992
00:36:55,490 --> 00:36:59,270
when Komodos cases a summary of what

993
00:36:57,290 --> 00:37:03,110
happened they provide they told us that

994
00:36:59,270 --> 00:37:05,060
it was patched in version 1200 dot 682

995
00:37:03,110 --> 00:37:06,230
however we found when we looked

996
00:37:05,060 --> 00:37:07,850
ourselves it looked like they only

997
00:37:06,230 --> 00:37:10,340
stopped it happening from a sandbox

998
00:37:07,850 --> 00:37:12,560
process if you find another sandbox

999
00:37:10,340 --> 00:37:14,390
escape or if you just happen to not be a

1000
00:37:12,560 --> 00:37:17,330
sandbox process you this vulnerability

1001
00:37:14,390 --> 00:37:19,940
still exists so to my knowledge it seems

1002
00:37:17,330 --> 00:37:23,180
like it's very much half alive in Komodo

1003
00:37:19,940 --> 00:37:25,570
today and since we just got extra time I

1004
00:37:23,180 --> 00:37:28,190
got one more not to go over that I found

1005
00:37:25,570 --> 00:37:30,860
this was the actual av signature

1006
00:37:28,190 --> 00:37:33,530
database we found that of course on disk

1007
00:37:30,860 --> 00:37:35,030
it's protected only admin can write to

1008
00:37:33,530 --> 00:37:35,930
this signature database and that's good

1009
00:37:35,030 --> 00:37:38,150
because you don't want people making

1010
00:37:35,930 --> 00:37:41,540
your own AV signatures and bypassing or

1011
00:37:38,150 --> 00:37:43,790
whatever and what mistake they make is

1012
00:37:41,540 --> 00:37:45,620
they when they load in this seizure

1013
00:37:43,790 --> 00:37:47,660
database they read it as file mapping

1014
00:37:45,620 --> 00:37:50,480
object and that file mapping object has

1015
00:37:47,660 --> 00:37:52,940
zero ACLs on it which means that we can

1016
00:37:50,480 --> 00:37:56,030
remotely write to this file mapping

1017
00:37:52,940 --> 00:37:59,180
object and modify a B signatures in the

1018
00:37:56,030 --> 00:38:01,730
actual system process and the cool

1019
00:37:59,180 --> 00:38:03,080
things you can do here is of course you

1020
00:38:01,730 --> 00:38:04,490
can just like here's an example of like

1021
00:38:03,080 --> 00:38:06,020
how it looks for malicious scripts and

1022
00:38:04,490 --> 00:38:07,879
like neither updated all the time I knew

1023
00:38:06,020 --> 00:38:10,310
signatures they get and like it's saying

1024
00:38:07,880 --> 00:38:12,140
like oh you know we'll delete this file

1025
00:38:10,310 --> 00:38:13,820
if it contains this or will also delete

1026
00:38:12,140 --> 00:38:15,859
if that contains that that's just one of

1027
00:38:13,820 --> 00:38:17,930
these we can write to it we could zero

1028
00:38:15,860 --> 00:38:20,240
it all out and basically bypass

1029
00:38:17,930 --> 00:38:21,770
drop malicious files but maybe more

1030
00:38:20,240 --> 00:38:23,270
interesting is that you can actually use

1031
00:38:21,770 --> 00:38:25,250
an arbitrary file delete with this

1032
00:38:23,270 --> 00:38:27,950
because what I found is that if you make

1033
00:38:25,250 --> 00:38:29,750
the signatures null the Komodo will just

1034
00:38:27,950 --> 00:38:32,299
make think everything's evil and delete

1035
00:38:29,750 --> 00:38:33,319
everything on your system as as system

1036
00:38:32,300 --> 00:38:36,470
so everything's just starts to get

1037
00:38:33,319 --> 00:38:38,450
quarantine but this one thing it has to

1038
00:38:36,470 --> 00:38:40,368
be a non assigned file but like that's

1039
00:38:38,450 --> 00:38:41,930
like all your manifests all your xml

1040
00:38:40,369 --> 00:38:43,640
files like just everything's gonna be

1041
00:38:41,930 --> 00:38:46,279
quarantined like you just goes on a

1042
00:38:43,640 --> 00:38:50,390
rampage and just deletes everything so

1043
00:38:46,280 --> 00:38:53,900
that's that's that that's it that's that

1044
00:38:50,390 --> 00:39:02,089
was the research we did and thanks for

1045
00:38:53,900 --> 00:39:08,780
attending guys absolutely yeah so any

1046
00:39:02,089 --> 00:39:10,910
questions oh yeah yeah so the benefit

1047
00:39:08,780 --> 00:39:13,880
was kind of interesting in the kernel

1048
00:39:10,910 --> 00:39:15,828
the register a process creation notify

1049
00:39:13,880 --> 00:39:18,109
callback routine and what they would do

1050
00:39:15,829 --> 00:39:19,640
is they'd say they did a more strict

1051
00:39:18,109 --> 00:39:22,369
check with the process they actually

1052
00:39:19,640 --> 00:39:24,558
said if the process is literally like

1053
00:39:22,369 --> 00:39:27,260
from the get-go see Program Files

1054
00:39:24,559 --> 00:39:28,970
convert CMD berths exe we'll do

1055
00:39:27,260 --> 00:39:30,200
something special with it and normally

1056
00:39:28,970 --> 00:39:31,520
that's not hittable if you start your

1057
00:39:30,200 --> 00:39:32,689
process normal and try to change your

1058
00:39:31,520 --> 00:39:34,609
peb later you already missed the

1059
00:39:32,690 --> 00:39:36,109
opportunity but if you process holo

1060
00:39:34,609 --> 00:39:38,000
you'll actually be able to fool that

1061
00:39:36,109 --> 00:39:39,740
kernel check as well and what the

1062
00:39:38,000 --> 00:39:43,460
benefit was is the kernel will actually

1063
00:39:39,740 --> 00:39:45,770
skip the DLL injection of the hook

1064
00:39:43,460 --> 00:39:47,150
hooking DLL so it just will say ill

1065
00:39:45,770 --> 00:39:48,650
ignore you I'll say all your trust we're

1066
00:39:47,150 --> 00:39:50,299
not gonna put a we're not gonna put a

1067
00:39:48,650 --> 00:39:51,500
user mode hook in you and so that makes

1068
00:39:50,299 --> 00:39:54,349
this whole process easier to work with

1069
00:39:51,500 --> 00:39:55,760
and there's also actually there's also

1070
00:39:54,349 --> 00:39:57,890
another weird thing they actually also

1071
00:39:55,760 --> 00:40:00,619
check if your name is if you're in a

1072
00:39:57,890 --> 00:40:02,720
folder of system 32 and your name is win

1073
00:40:00,619 --> 00:40:05,240
in it Exe they just won't say I'm box

1074
00:40:02,720 --> 00:40:08,299
you so you could just make all desktops

1075
00:40:05,240 --> 00:40:15,500
isn't 32 folder went in it exe and start

1076
00:40:08,299 --> 00:40:19,730
it and again yeah actually it's one I

1077
00:40:15,500 --> 00:40:20,780
wrote yeah that I use and yeah I could

1078
00:40:19,730 --> 00:40:25,040
point you to it afterwards if you want

1079
00:40:20,780 --> 00:40:27,079
to play with it yeah yeah yeah it's a

1080
00:40:25,040 --> 00:40:28,910
from analyzing malware so much you'd

1081
00:40:27,079 --> 00:40:30,420
start to yeah get the hang of what

1082
00:40:28,910 --> 00:40:36,269
they're doing

1083
00:40:30,420 --> 00:40:38,990
yeah anything else all right awesome

1084
00:40:36,269 --> 00:40:38,990
thanks for coming guys

