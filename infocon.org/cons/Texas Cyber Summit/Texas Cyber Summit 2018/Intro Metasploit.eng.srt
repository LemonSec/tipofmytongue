1
00:00:06,620 --> 00:00:22,619
all right everyone we'll go ahead and

2
00:00:08,340 --> 00:00:25,080
get started my name is Erin Soto we're

3
00:00:22,619 --> 00:00:28,019
both from the Metasploit development

4
00:00:25,080 --> 00:00:30,750
team and we're excited to be here to

5
00:00:28,019 --> 00:00:32,339
kind of give you a more thorough

6
00:00:30,750 --> 00:00:34,290
introduction to Metasploit than maybes

7
00:00:32,340 --> 00:00:37,230
we've had an opportunity to do in the

8
00:00:34,290 --> 00:00:39,269
past our goal today is if you've never

9
00:00:37,230 --> 00:00:41,010
used Metasploit to give you a full

10
00:00:39,270 --> 00:00:42,600
background to walk you through how it's

11
00:00:41,010 --> 00:00:44,640
architected how the components work

12
00:00:42,600 --> 00:00:47,370
together and walk you through some

13
00:00:44,640 --> 00:00:47,969
examples of exploits and attacks and

14
00:00:47,370 --> 00:00:50,459
we're closed

15
00:00:47,969 --> 00:00:53,100
not only focusing on the tool itself but

16
00:00:50,460 --> 00:00:55,649
also the mindset of a pen tester as

17
00:00:53,100 --> 00:00:57,180
they're as they're using these tools the

18
00:00:55,649 --> 00:00:59,399
second half of this is is to kind of

19
00:00:57,180 --> 00:01:01,469
give you more a holistic view of how the

20
00:00:59,399 --> 00:01:04,530
pieces work together so as we're talking

21
00:01:01,469 --> 00:01:07,439
through how modules architected kind of

22
00:01:04,530 --> 00:01:10,619
how the hierarchy of our module tree but

23
00:01:07,439 --> 00:01:12,389
also how they they cooperate to give

24
00:01:10,619 --> 00:01:14,040
folks maybe a more complete picture than

25
00:01:12,390 --> 00:01:15,509
what they've had in the past so if

26
00:01:14,040 --> 00:01:17,790
you've never used Metasploit before

27
00:01:15,509 --> 00:01:19,530
welcome if you have used Metasploit

28
00:01:17,790 --> 00:01:21,689
before this is a little more

29
00:01:19,530 --> 00:01:23,520
introductory but the goal is to give you

30
00:01:21,689 --> 00:01:25,110
a more complete picture so that that way

31
00:01:23,520 --> 00:01:27,000
maybe there's some things that you

32
00:01:25,110 --> 00:01:28,710
you've you know just kind of taken as

33
00:01:27,000 --> 00:01:30,810
well this is how it works but I don't

34
00:01:28,710 --> 00:01:33,240
really understand why maybe we can we

35
00:01:30,810 --> 00:01:35,280
can kind of cross that divide and help

36
00:01:33,240 --> 00:01:38,158
you understand that a little bit more so

37
00:01:35,280 --> 00:01:41,299
as I mentioned earlier we have a handful

38
00:01:38,159 --> 00:01:44,310
of or I should say a handful to of

39
00:01:41,299 --> 00:01:45,840
virtual machines for you to play with I

40
00:01:44,310 --> 00:01:46,409
totally understand that not every has

41
00:01:45,840 --> 00:01:47,939
you set up

42
00:01:46,409 --> 00:01:51,299
not everybody even has laptops that's

43
00:01:47,939 --> 00:01:53,008
totally fine but the idea is that we'll

44
00:01:51,299 --> 00:01:54,509
be walking through some exercises with

45
00:01:53,009 --> 00:01:56,790
these machines everything will be up on

46
00:01:54,509 --> 00:01:58,409
the screen it's recorded on video for

47
00:01:56,790 --> 00:02:03,000
later thanks to the heroic efforts of

48
00:01:58,409 --> 00:02:05,620
our volunteers and staff absolutely

49
00:02:03,000 --> 00:02:07,900
so you can you can absolutely check

50
00:02:05,620 --> 00:02:09,580
these out later it's all up in s3 so if

51
00:02:07,900 --> 00:02:10,869
you want to play with these at a later

52
00:02:09,580 --> 00:02:16,930
time you're absolutely more than welcome

53
00:02:10,869 --> 00:02:19,930
to so that said as I said earlier my

54
00:02:16,930 --> 00:02:21,930
name is Erin Soto I come to you from a

55
00:02:19,930 --> 00:02:24,400
little more of a pen testing background

56
00:02:21,930 --> 00:02:26,320
jacob has recently joined our team we're

57
00:02:24,400 --> 00:02:29,770
both kind of relatively new folks on the

58
00:02:26,320 --> 00:02:32,230
Metasploit team and as we've we've used

59
00:02:29,770 --> 00:02:35,380
Metasploit throughout our careers it's

60
00:02:32,230 --> 00:02:36,730
been always we always wish that we had

61
00:02:35,380 --> 00:02:38,380
something that kind of talked you

62
00:02:36,730 --> 00:02:40,179
through from the beginning why is this

63
00:02:38,380 --> 00:02:41,859
structured this way how did we get here

64
00:02:40,180 --> 00:02:43,060
and so that's what we're hoping to do

65
00:02:41,860 --> 00:02:44,980
today

66
00:02:43,060 --> 00:02:47,170
so let's start you know what what is

67
00:02:44,980 --> 00:02:50,440
Metasploit like what's what is the big

68
00:02:47,170 --> 00:02:53,500
idea the whole concept is that it's it's

69
00:02:50,440 --> 00:02:55,450
something that we as members of rapid7

70
00:02:53,500 --> 00:02:57,580
work with members of the open-source

71
00:02:55,450 --> 00:02:59,709
community it's it's genuinely a

72
00:02:57,580 --> 00:03:01,810
community project fully open source

73
00:02:59,709 --> 00:03:04,540
where everything that we do is available

74
00:03:01,810 --> 00:03:06,370
to to you know look it up on github and

75
00:03:04,540 --> 00:03:08,230
look through the source code and that

76
00:03:06,370 --> 00:03:10,840
that the power of that is that not only

77
00:03:08,230 --> 00:03:12,970
can you use that professionally but

78
00:03:10,840 --> 00:03:14,650
that's also a great way for personal

79
00:03:12,970 --> 00:03:17,440
growth to understand how these tools

80
00:03:14,650 --> 00:03:19,090
work how each individual module works a

81
00:03:17,440 --> 00:03:21,070
little bit about exploit development or

82
00:03:19,090 --> 00:03:24,310
whatever it is that you're looking to to

83
00:03:21,070 --> 00:03:28,000
grow off of and so our goal is to

84
00:03:24,310 --> 00:03:30,070
empower not not only folks that are that

85
00:03:28,000 --> 00:03:31,660
are coming into their careers initially

86
00:03:30,070 --> 00:03:33,250
you know college students and and

87
00:03:31,660 --> 00:03:35,980
professionals that are changing tracks

88
00:03:33,250 --> 00:03:39,280
but defenders as a whole to use a

89
00:03:35,980 --> 00:03:41,859
toolset that they can test around their

90
00:03:39,280 --> 00:03:43,510
enterprise networks and understand how

91
00:03:41,860 --> 00:03:44,410
an attacker would see things and what

92
00:03:43,510 --> 00:03:47,980
they're capable of

93
00:03:44,410 --> 00:03:49,870
so on the the shortest way to describe

94
00:03:47,980 --> 00:03:52,720
that is Metasploit is an exploitation

95
00:03:49,870 --> 00:03:55,660
framework it is a framework of tools of

96
00:03:52,720 --> 00:03:57,549
modules that work together to handle all

97
00:03:55,660 --> 00:03:59,290
of the little tidbits that are necessary

98
00:03:57,549 --> 00:04:00,549
for exploitation to happen and we're

99
00:03:59,290 --> 00:04:03,519
gonna talk through what each of those

100
00:04:00,549 --> 00:04:05,019
mean but if you've ever run Metasploit

101
00:04:03,519 --> 00:04:07,239
and you look at the banner up at the top

102
00:04:05,019 --> 00:04:08,799
it shows you how many exploits how many

103
00:04:07,239 --> 00:04:11,019
auxiliary modules how many post modules

104
00:04:08,799 --> 00:04:12,129
how many encoders how many like all of

105
00:04:11,019 --> 00:04:13,420
the different modules that work together

106
00:04:12,129 --> 00:04:16,190
and the whole point of that is that

107
00:04:13,420 --> 00:04:18,680
someone who is very skilled in one of

108
00:04:16,190 --> 00:04:20,120
sets can focus on that category of

109
00:04:18,680 --> 00:04:22,370
module or bring a new idea to fruition

110
00:04:20,120 --> 00:04:24,740
and plug it into this framework and now

111
00:04:22,370 --> 00:04:26,960
suddenly this works across a variety of

112
00:04:24,740 --> 00:04:29,090
attacks so it's very easy to stay up

113
00:04:26,960 --> 00:04:32,060
with new techniques as they're coming

114
00:04:29,090 --> 00:04:34,940
out so every module that we make is

115
00:04:32,060 --> 00:04:37,040
designed to plug into the modules around

116
00:04:34,940 --> 00:04:39,320
it if I have an exploit that exploit

117
00:04:37,040 --> 00:04:42,230
relies on encoders and knob sleds and

118
00:04:39,320 --> 00:04:45,650
payloads in order for it to function and

119
00:04:42,230 --> 00:04:46,730
so the framework handles all these

120
00:04:45,650 --> 00:04:48,260
things that if you're an exploit

121
00:04:46,730 --> 00:04:50,900
developer or if you're writing payloads

122
00:04:48,260 --> 00:04:53,150
or if you're just wanting to run a test

123
00:04:50,900 --> 00:04:54,530
you don't have to focus on that what

124
00:04:53,150 --> 00:04:57,469
might be considered repetitive and

125
00:04:54,530 --> 00:05:01,669
mundane tasks you can just kind of rely

126
00:04:57,470 --> 00:05:03,590
on the magic so as I mentioned we have a

127
00:05:01,670 --> 00:05:06,260
couple of VMs ready for you that are

128
00:05:03,590 --> 00:05:08,630
running Metasploit our development

129
00:05:06,260 --> 00:05:10,969
branch and so how many of you have used

130
00:05:08,630 --> 00:05:13,969
Metasploit before let's just start there

131
00:05:10,970 --> 00:05:16,850
okay how do you have not used Metasploit

132
00:05:13,970 --> 00:05:18,290
before excellent okay

133
00:05:16,850 --> 00:05:20,090
for those of you who have used

134
00:05:18,290 --> 00:05:23,900
Metasploit have you used it just from

135
00:05:20,090 --> 00:05:26,119
Callie how many have actually gone to

136
00:05:23,900 --> 00:05:30,200
github and downloaded our development

137
00:05:26,120 --> 00:05:32,480
version okay that's that's expected and

138
00:05:30,200 --> 00:05:35,030
so the idea is that our development

139
00:05:32,480 --> 00:05:37,040
version is where we can kind of play

140
00:05:35,030 --> 00:05:39,530
around and add in the new features

141
00:05:37,040 --> 00:05:41,600
you'll still see a lot of the same

142
00:05:39,530 --> 00:05:43,489
modules and exploits built into your

143
00:05:41,600 --> 00:05:45,500
your older Callie builds that the cally

144
00:05:43,490 --> 00:05:46,880
bases itself off of but as we'll be

145
00:05:45,500 --> 00:05:48,590
talking about in a moment our Metasploit

146
00:05:46,880 --> 00:05:50,930
five build incorporates a lot of new

147
00:05:48,590 --> 00:05:53,090
features so if you're if you're learning

148
00:05:50,930 --> 00:05:54,590
I would encourage you to go to github

149
00:05:53,090 --> 00:05:56,119
and grab the latest version and play

150
00:05:54,590 --> 00:05:58,460
play around with some of those new

151
00:05:56,120 --> 00:06:00,260
features admittedly if you want to stick

152
00:05:58,460 --> 00:06:02,060
with a more stable branch that's what

153
00:06:00,260 --> 00:06:03,440
you'll see built into our Linux

154
00:06:02,060 --> 00:06:04,880
distribution I say our Linux

155
00:06:03,440 --> 00:06:06,680
distributions the Linux distributions

156
00:06:04,880 --> 00:06:08,240
like Kali and parrot and those

157
00:06:06,680 --> 00:06:10,970
communities have chosen to stick with

158
00:06:08,240 --> 00:06:12,590
our stable build until until we go ahead

159
00:06:10,970 --> 00:06:14,000
and flick the switch over and bring

160
00:06:12,590 --> 00:06:16,159
these new features over but for our

161
00:06:14,000 --> 00:06:17,930
purposes today for our virtual machine

162
00:06:16,160 --> 00:06:21,650
you'll see that we've actually grabbed

163
00:06:17,930 --> 00:06:23,450
our our github repository and that

164
00:06:21,650 --> 00:06:25,549
github repository is what we'll call

165
00:06:23,450 --> 00:06:27,140
Metasploit five if you wanted to do this

166
00:06:25,550 --> 00:06:29,270
on your local on your local machine

167
00:06:27,140 --> 00:06:30,169
maybe you're running on a Kali machine

168
00:06:29,270 --> 00:06:31,520
that you have

169
00:06:30,169 --> 00:06:33,560
just brought with you and you didn't get

170
00:06:31,520 --> 00:06:35,870
a chance to grab our VMs the way this

171
00:06:33,560 --> 00:06:37,160
would work you can create I just create

172
00:06:35,870 --> 00:06:38,900
a little git folder so I can store my

173
00:06:37,160 --> 00:06:40,669
repositories you know kind of separate

174
00:06:38,900 --> 00:06:42,258
from the rest of the mayhem and you use

175
00:06:40,669 --> 00:06:43,849
git clone you'll give it the URL of our

176
00:06:42,259 --> 00:06:45,949
repository and that's gonna go ahead and

177
00:06:43,850 --> 00:06:47,389
download the full history of the the

178
00:06:45,949 --> 00:06:50,960
Metasploit project that you can then

179
00:06:47,389 --> 00:06:52,729
jump in and use MSF console but because

180
00:06:50,960 --> 00:06:55,159
it's a development build if you'll

181
00:06:52,729 --> 00:06:56,750
notice with some of our if you'll notice

182
00:06:55,160 --> 00:06:58,970
like what Callie and parrot ship with

183
00:06:56,750 --> 00:07:01,190
include all the dependencies and the

184
00:06:58,970 --> 00:07:03,229
setup steps that are part of that

185
00:07:01,190 --> 00:07:04,820
process so as you if you were to just

186
00:07:03,229 --> 00:07:06,080
grab this and you were an MSF console

187
00:07:04,820 --> 00:07:08,630
you'll notice that we don't have

188
00:07:06,080 --> 00:07:10,520
dependencies there's a walkthrough up on

189
00:07:08,630 --> 00:07:11,960
on our github and our readme where we

190
00:07:10,520 --> 00:07:13,008
talk through setting up a development

191
00:07:11,960 --> 00:07:14,479
environment but let me just give you the

192
00:07:13,009 --> 00:07:16,759
quick overview the way this would work

193
00:07:14,479 --> 00:07:19,520
you'll notice that if you try to run MSF

194
00:07:16,759 --> 00:07:21,940
console there's a tool built into Ruby

195
00:07:19,520 --> 00:07:24,680
called bundle that grabs all of your

196
00:07:21,940 --> 00:07:26,270
dependencies so what we'd have to do for

197
00:07:24,680 --> 00:07:28,280
this to function is to run bundle

198
00:07:26,270 --> 00:07:31,159
install it's gonna go ahead and grab all

199
00:07:28,280 --> 00:07:32,929
these dependencies for you and once this

200
00:07:31,160 --> 00:07:34,310
is done it'll go ahead and say alright

201
00:07:32,930 --> 00:07:36,590
I've installed all these dependencies

202
00:07:34,310 --> 00:07:38,360
now you can run MSF console and you'll

203
00:07:36,590 --> 00:07:40,760
notice for those of you who've Iran

204
00:07:38,360 --> 00:07:43,130
Kelly or if you're running Kali now and

205
00:07:40,760 --> 00:07:44,750
you just run an MSF console you'll

206
00:07:43,130 --> 00:07:46,550
you'll notice the banner here specifies

207
00:07:44,750 --> 00:07:47,870
which version you're on so in this case

208
00:07:46,550 --> 00:07:50,389
I've just grabbed the development build

209
00:07:47,870 --> 00:07:52,940
this is Metasploit version 5 that's our

210
00:07:50,389 --> 00:07:54,770
development branch and so as I mentioned

211
00:07:52,940 --> 00:07:58,580
before you have all of the different

212
00:07:54,770 --> 00:08:00,409
lists of the module types here the the

213
00:07:58,580 --> 00:08:02,210
banner here we have fun with our ASCII

214
00:08:00,409 --> 00:08:04,460
art and so we change between all these

215
00:08:02,210 --> 00:08:07,460
different little little graphics because

216
00:08:04,460 --> 00:08:09,049
this is what makes us happy I I will

217
00:08:07,460 --> 00:08:10,609
call out there's one of these which is a

218
00:08:09,050 --> 00:08:13,009
little more insidious that says there's

219
00:08:10,610 --> 00:08:15,560
a kernel panic and you know don't panic

220
00:08:13,009 --> 00:08:16,970
it's just us having fun but the whole

221
00:08:15,560 --> 00:08:19,250
point here is that this is what your

222
00:08:16,970 --> 00:08:20,990
your initial banner will look like and

223
00:08:19,250 --> 00:08:22,639
that version number is going to tell you

224
00:08:20,990 --> 00:08:24,560
whether you're using what we call

225
00:08:22,639 --> 00:08:26,720
Metasploit for our stable branch or

226
00:08:24,560 --> 00:08:28,909
Metasploit 5 our development branch so

227
00:08:26,720 --> 00:08:31,070
Metasploit 4 doesn't have as many

228
00:08:28,909 --> 00:08:32,120
features as you'll see in five and and

229
00:08:31,070 --> 00:08:34,338
we'll talk through what some of those

230
00:08:32,120 --> 00:08:36,049
are but fundamentally it's how a lot of

231
00:08:34,339 --> 00:08:40,789
the backend works some of our more

232
00:08:36,049 --> 00:08:42,769
experimental features versus for excuse

233
00:08:40,789 --> 00:08:45,110
me 5 has those features vs. 4

234
00:08:42,769 --> 00:08:47,869
is is built to have a little more that

235
00:08:45,110 --> 00:08:50,809
stability built-in so you will see in

236
00:08:47,869 --> 00:08:52,879
Cali and parrot the shift to four five

237
00:08:50,809 --> 00:08:54,769
is where if you want to kind of learn an

238
00:08:52,879 --> 00:08:56,929
experiment is a great place to be

239
00:08:54,769 --> 00:08:58,730
the the gotcha here if you're using

240
00:08:56,929 --> 00:09:00,170
something like Cali as I said it ships

241
00:08:58,730 --> 00:09:02,089
with four if you just kick off MSF

242
00:09:00,170 --> 00:09:05,988
console you'll be looking at looking at

243
00:09:02,089 --> 00:09:08,449
MSF for if I clone that repo and I refer

244
00:09:05,989 --> 00:09:10,549
to this local using the dot slash to

245
00:09:08,449 --> 00:09:12,469
refer to the MSF console in my local

246
00:09:10,549 --> 00:09:14,660
directory I'll be using Metasploit five

247
00:09:12,470 --> 00:09:16,399
so for example for my machine I'll have

248
00:09:14,660 --> 00:09:18,980
them both so I can switch back and forth

249
00:09:16,399 --> 00:09:22,100
and you know and have the best of both

250
00:09:18,980 --> 00:09:24,319
worlds so note if you're using our image

251
00:09:22,100 --> 00:09:25,549
or if you've installed it yourself just

252
00:09:24,319 --> 00:09:30,769
kind of be aware for that little gotcha

253
00:09:25,549 --> 00:09:31,699
there so the the MSF console is one way

254
00:09:30,769 --> 00:09:33,559
to interact with the Metasploit

255
00:09:31,699 --> 00:09:37,248
environment that's our text text-based

256
00:09:33,559 --> 00:09:41,179
CLI and with that you have the ability

257
00:09:37,249 --> 00:09:43,399
to invoke all of these modules and each

258
00:09:41,179 --> 00:09:44,929
module gives you a different piece of

259
00:09:43,399 --> 00:09:46,309
functionality so maybe if I'm just

260
00:09:44,929 --> 00:09:47,809
getting access to a network I want to

261
00:09:46,309 --> 00:09:48,829
scan around and see what's available to

262
00:09:47,809 --> 00:09:51,079
me and I can use a number of different

263
00:09:48,829 --> 00:09:53,329
scanner modules to do that if I am

264
00:09:51,079 --> 00:09:54,739
targeting a specific host and I want to

265
00:09:53,329 --> 00:09:56,508
see what ports are open what services

266
00:09:54,740 --> 00:09:58,189
are accessible on that host there are

267
00:09:56,509 --> 00:10:00,410
modules to take care of that if I

268
00:09:58,189 --> 00:10:02,149
actually want to profile a particular

269
00:10:00,410 --> 00:10:03,529
service and see what version it is

270
00:10:02,149 --> 00:10:06,019
whether there's vulnerabilities there's

271
00:10:03,529 --> 00:10:07,069
modules for that if I want to attempt to

272
00:10:06,019 --> 00:10:08,959
exploit a vulnerability

273
00:10:07,069 --> 00:10:11,209
obviously there's modules for that once

274
00:10:08,959 --> 00:10:12,739
I've got a vulnerable service and I've

275
00:10:11,209 --> 00:10:15,378
got an exploit for it that I know works

276
00:10:12,740 --> 00:10:18,110
there are modules that handle payloads

277
00:10:15,379 --> 00:10:20,029
to send instructions up to that to

278
00:10:18,110 --> 00:10:22,129
exploit it and send instructions up to

279
00:10:20,029 --> 00:10:23,329
that service and finally if I do have

280
00:10:22,129 --> 00:10:25,490
control of a host there's post

281
00:10:23,329 --> 00:10:27,109
exploitation modules let me kind of look

282
00:10:25,490 --> 00:10:28,429
around and gather data and and

283
00:10:27,110 --> 00:10:29,899
potentially even pivot and move on to

284
00:10:28,429 --> 00:10:31,069
other hosts so when I'm talking about

285
00:10:29,899 --> 00:10:32,389
all these four modules these are the

286
00:10:31,069 --> 00:10:33,949
categories that we're referring to

287
00:10:32,389 --> 00:10:36,889
and there's nomenclatures for all of

288
00:10:33,949 --> 00:10:38,660
this so our our scanner modules you'll

289
00:10:36,889 --> 00:10:42,019
find under the auxilary group you'll see

290
00:10:38,660 --> 00:10:43,219
exploit modules obviously many that's

291
00:10:42,019 --> 00:10:45,829
probably the one that's you're you're

292
00:10:43,220 --> 00:10:47,749
most familiar with you'll see in

293
00:10:45,829 --> 00:10:49,729
conjunction with exploits if you set

294
00:10:47,749 --> 00:10:52,429
payload that's where you invoke our

295
00:10:49,730 --> 00:10:53,660
payload modules there are a number of

296
00:10:52,429 --> 00:10:55,249
things that go hand-in-hand with the

297
00:10:53,660 --> 00:10:56,339
exploitation process where we encode

298
00:10:55,249 --> 00:10:58,259
traffic or we use

299
00:10:56,339 --> 00:10:59,759
Majors if we only have a certain amount

300
00:10:58,259 --> 00:11:02,100
of data to work with where we can get a

301
00:10:59,759 --> 00:11:04,230
foothold on a machine and then upload a

302
00:11:02,100 --> 00:11:07,110
larger set of instructions that's its

303
00:11:04,230 --> 00:11:08,490
own module type additionally you know

304
00:11:07,110 --> 00:11:10,019
knob sleds that you see as part of the

305
00:11:08,490 --> 00:11:12,569
exploitation process and then post

306
00:11:10,019 --> 00:11:15,059
exploit scripts so these are the names

307
00:11:12,569 --> 00:11:17,490
of those categories but we will talk

308
00:11:15,059 --> 00:11:20,370
about what each one does let me give you

309
00:11:17,490 --> 00:11:22,499
some examples so auxilary modules I

310
00:11:20,370 --> 00:11:26,209
mentioned that there are scanners but

311
00:11:22,499 --> 00:11:30,089
there's also servers let's say I have a

312
00:11:26,209 --> 00:11:33,180
land tap or like conducting an internal

313
00:11:30,089 --> 00:11:36,480
pen test and I have the ability to stand

314
00:11:33,180 --> 00:11:38,160
up DHCP such that I can hijack DHCP

315
00:11:36,480 --> 00:11:40,079
records there's a DHCP server built in

316
00:11:38,160 --> 00:11:42,300
the Metasploit that gives me the ability

317
00:11:40,079 --> 00:11:44,189
tests set up ranges to set up domain

318
00:11:42,300 --> 00:11:47,430
name set up DNS servers win servers any

319
00:11:44,189 --> 00:11:49,889
of that and that's just a module there

320
00:11:47,430 --> 00:11:52,800
are servers for specific vulnerabilities

321
00:11:49,889 --> 00:11:55,949
so we have one for the heartbleed the

322
00:11:52,800 --> 00:11:58,920
open SSL vulnerability that will when a

323
00:11:55,949 --> 00:12:01,439
client connects or have the ability to

324
00:11:58,920 --> 00:12:04,860
to exploit that vulnerability against

325
00:12:01,439 --> 00:12:07,800
clients we have a variety of servers for

326
00:12:04,860 --> 00:12:10,139
for example for SMB traffic where we can

327
00:12:07,800 --> 00:12:12,599
capture hashes we have a browser Auto

328
00:12:10,139 --> 00:12:13,800
pone auxilary module that the idea is if

329
00:12:12,600 --> 00:12:15,420
a browser connects it attempts to

330
00:12:13,800 --> 00:12:18,170
profile that browser to identify

331
00:12:15,420 --> 00:12:20,759
vulnerability we have modules for

332
00:12:18,170 --> 00:12:23,069
scanners as I mentioned so and notice

333
00:12:20,759 --> 00:12:24,870
these are the the hierarchy here just

334
00:12:23,069 --> 00:12:26,998
indicates which protocol is being

335
00:12:24,870 --> 00:12:29,009
referenced and so you'll see ones that

336
00:12:26,999 --> 00:12:31,740
are for instance under the auxiliary

337
00:12:29,009 --> 00:12:34,319
scanner SMB hierarchy you'll see

338
00:12:31,740 --> 00:12:35,550
multiples listed within there so for

339
00:12:34,319 --> 00:12:36,748
whatever protocol you're looking for

340
00:12:35,550 --> 00:12:38,670
there's probably a scanner for that

341
00:12:36,749 --> 00:12:41,100
including some generic ones that just do

342
00:12:38,670 --> 00:12:43,979
board excuse me port scanning and so

343
00:12:41,100 --> 00:12:45,749
each one of these as an auxilary module

344
00:12:43,980 --> 00:12:48,120
is not something that really gains

345
00:12:45,749 --> 00:12:50,100
control of a host it doesn't really give

346
00:12:48,120 --> 00:12:52,350
me a shell like a meterpreter session on

347
00:12:50,100 --> 00:12:54,660
a machine but the idea is that it gives

348
00:12:52,350 --> 00:12:55,980
me some level of functionality that

349
00:12:54,660 --> 00:12:58,339
would be beneficial or might work

350
00:12:55,980 --> 00:13:00,870
hand-in-hand with another module

351
00:12:58,339 --> 00:13:04,799
conversely an exploit module is where I

352
00:13:00,870 --> 00:13:06,540
can use this to get remote control of

353
00:13:04,799 --> 00:13:08,429
another machine so an exploit module

354
00:13:06,540 --> 00:13:09,990
inherently does something that provides

355
00:13:08,429 --> 00:13:10,259
me with a shell provides me with the

356
00:13:09,990 --> 00:13:13,109
ability

357
00:13:10,259 --> 00:13:15,359
execute a payload gives me a more direct

358
00:13:13,109 --> 00:13:17,850
level of control over that remote host

359
00:13:15,359 --> 00:13:20,220
and so you'll see you know obviously are

360
00:13:17,850 --> 00:13:24,329
the the big names Oh eight oh six seven

361
00:13:20,220 --> 00:13:26,189
and 1006 one or 17000 no but she'll also

362
00:13:24,329 --> 00:13:30,059
see you know things like shell-shocked

363
00:13:26,189 --> 00:13:32,129
we have the the struts name space og now

364
00:13:30,059 --> 00:13:33,660
the the more recent struts exploit that

365
00:13:32,129 --> 00:13:36,720
actually just landed today if I'm not

366
00:13:33,660 --> 00:13:38,779
mistaken we had we had an earlier

367
00:13:36,720 --> 00:13:40,949
version we had the version to land today

368
00:13:38,779 --> 00:13:42,749
and then you know things that are that

369
00:13:40,949 --> 00:13:44,248
are more specific towards specific

370
00:13:42,749 --> 00:13:45,449
services and platforms but each one of

371
00:13:44,249 --> 00:13:49,350
these the idea is that it gives us

372
00:13:45,449 --> 00:13:52,019
remote control of another machine the

373
00:13:49,350 --> 00:13:53,369
last one I put up there as the exploit

374
00:13:52,019 --> 00:13:55,319
multi handler how many of you have heard

375
00:13:53,369 --> 00:13:57,779
of exploit multi handler just to kinda

376
00:13:55,319 --> 00:14:01,259
get a feel the idea is it's a much more

377
00:13:57,779 --> 00:14:02,639
generic exploit where if I have control

378
00:14:01,259 --> 00:14:05,970
of another machine maybe somebody's

379
00:14:02,639 --> 00:14:07,889
running an exe or I get a DLL to execute

380
00:14:05,970 --> 00:14:10,350
that there's maybe even a side channel

381
00:14:07,889 --> 00:14:13,199
or another tool that I'm using this is

382
00:14:10,350 --> 00:14:14,879
not an attack per se but is it's like a

383
00:14:13,199 --> 00:14:17,429
listener or something that will call in

384
00:14:14,879 --> 00:14:19,230
to a payload that will do that last step

385
00:14:17,429 --> 00:14:21,149
of the exploitation where I get get a

386
00:14:19,230 --> 00:14:22,319
foothold on that remote machine so this

387
00:14:21,149 --> 00:14:23,639
works hand in hand with the number of

388
00:14:22,319 --> 00:14:28,169
other tools that we'll talk about later

389
00:14:23,639 --> 00:14:31,139
so alright that's boring no one cares we

390
00:14:28,169 --> 00:14:31,589
came here for shells right so how would

391
00:14:31,139 --> 00:14:34,019
this work

392
00:14:31,589 --> 00:14:35,789
alright I fire up I myself console one

393
00:14:34,019 --> 00:14:37,559
of the little known features if you're

394
00:14:35,789 --> 00:14:39,539
an MSF console is you can just type a

395
00:14:37,559 --> 00:14:41,309
command if it's not a Metasploit

396
00:14:39,539 --> 00:14:43,139
framework command if it doesn't work on

397
00:14:41,309 --> 00:14:44,939
the console it passes it down to the

398
00:14:43,139 --> 00:14:46,829
underlying shell so you'll see here by

399
00:14:44,939 --> 00:14:48,449
type PWD that's not a Metasploit command

400
00:14:46,829 --> 00:14:50,969
that's a command that's gonna get

401
00:14:48,449 --> 00:14:52,618
processed by my shell underneath so I

402
00:14:50,970 --> 00:14:56,519
get whatever my present working

403
00:14:52,619 --> 00:14:57,989
directory is great if I type help this

404
00:14:56,519 --> 00:14:59,309
is a much more abbreviated version of

405
00:14:57,989 --> 00:15:01,949
what you'll see but just kind of the

406
00:14:59,309 --> 00:15:03,600
highlights help is gonna give you a list

407
00:15:01,949 --> 00:15:06,059
of commands kind of separated by

408
00:15:03,600 --> 00:15:07,979
categories and to give you a sense exit

409
00:15:06,059 --> 00:15:09,959
obviously would exit the framework drop

410
00:15:07,979 --> 00:15:11,519
me back to a shell set is how I can

411
00:15:09,959 --> 00:15:13,919
control individual variables we'll see

412
00:15:11,519 --> 00:15:15,299
that in a second you also have so these

413
00:15:13,919 --> 00:15:17,249
are kind of global commands you have

414
00:15:15,299 --> 00:15:19,739
modules specific commands so I can

415
00:15:17,249 --> 00:15:22,739
invoke a particular module with this

416
00:15:19,739 --> 00:15:23,880
used command here and use then puts me

417
00:15:22,739 --> 00:15:25,800
in the context of

418
00:15:23,880 --> 00:15:28,650
module where I can then set variables

419
00:15:25,800 --> 00:15:30,510
where I can launch that that module and

420
00:15:28,650 --> 00:15:32,970
have it do whatever it is it's built to

421
00:15:30,510 --> 00:15:34,560
do if I want to know what that is the

422
00:15:32,970 --> 00:15:37,170
info command gives me a little bit more

423
00:15:34,560 --> 00:15:39,920
detail about that module so it tells me

424
00:15:37,170 --> 00:15:42,390
in in ideally human readable language

425
00:15:39,920 --> 00:15:44,670
admittedly is very technical the

426
00:15:42,390 --> 00:15:46,199
description of what that module does but

427
00:15:44,670 --> 00:15:48,839
it also tells me what options I need to

428
00:15:46,200 --> 00:15:50,250
set and a little bit about the details

429
00:15:48,840 --> 00:15:51,660
and we'll see what that looks like in a

430
00:15:50,250 --> 00:15:53,640
second but what if I don't even know

431
00:15:51,660 --> 00:15:55,770
what module I want so I've heard of

432
00:15:53,640 --> 00:15:58,410
let's say hey there's a new stressful

433
00:15:55,770 --> 00:16:01,079
inability going around does Metasploit

434
00:15:58,410 --> 00:16:03,270
have any ability to attack that or I've

435
00:16:01,080 --> 00:16:04,290
heard of this eternal blue thing and I

436
00:16:03,270 --> 00:16:05,760
want to know what that's about does

437
00:16:04,290 --> 00:16:08,490
Metasploit have that built in so the

438
00:16:05,760 --> 00:16:10,020
search command will allow me to freeform

439
00:16:08,490 --> 00:16:12,000
search I can literally do something like

440
00:16:10,020 --> 00:16:14,670
search eternal blue and I can see all

441
00:16:12,000 --> 00:16:16,230
the modules that relate to that it also

442
00:16:14,670 --> 00:16:20,579
gives me the ability to focus on a

443
00:16:16,230 --> 00:16:22,860
specific like a vendor ID or a CVE

444
00:16:20,580 --> 00:16:25,080
if you're you know your boss is like hey

445
00:16:22,860 --> 00:16:26,880
that this article is you know saying bad

446
00:16:25,080 --> 00:16:28,020
things are happening and you open up the

447
00:16:26,880 --> 00:16:29,550
article in I mentions a CVE

448
00:16:28,020 --> 00:16:31,400
the search command will let you quickly

449
00:16:29,550 --> 00:16:33,870
see is there a module for that yet

450
00:16:31,400 --> 00:16:36,260
obviously we work as quickly as we can

451
00:16:33,870 --> 00:16:38,550
but this is something that you will see

452
00:16:36,260 --> 00:16:41,720
modules pop up fairly quickly in

453
00:16:38,550 --> 00:16:43,829
response to especially popular

454
00:16:41,720 --> 00:16:47,460
vulnerabilities when it's blowing up on

455
00:16:43,830 --> 00:16:49,650
Twitter we're excited to so I use let's

456
00:16:47,460 --> 00:16:51,810
say search and I find a vulnerability or

457
00:16:49,650 --> 00:16:53,790
I find a module here I'm like great I'm

458
00:16:51,810 --> 00:16:55,979
going against a Windows machine I type

459
00:16:53,790 --> 00:16:57,180
used to load that module the big thing

460
00:16:55,980 --> 00:17:00,120
that you'll notice here is that your

461
00:16:57,180 --> 00:17:03,329
prompt changes I will call out that this

462
00:17:00,120 --> 00:17:05,430
was probably six eight months ago we

463
00:17:03,330 --> 00:17:06,750
changed what the prompt looks like so a

464
00:17:05,430 --> 00:17:07,949
couple people got a little bit confused

465
00:17:06,750 --> 00:17:08,880
because you'll notice parentheses now

466
00:17:07,949 --> 00:17:10,650
and you're like wait I didn't I

467
00:17:08,880 --> 00:17:13,079
parentheses this is just saying it's an

468
00:17:10,650 --> 00:17:15,300
exploit module and this is the the path

469
00:17:13,079 --> 00:17:16,680
of that exploit module but fundamentally

470
00:17:15,300 --> 00:17:18,780
what this is really telling you is any

471
00:17:16,680 --> 00:17:21,870
command you type now is going to work in

472
00:17:18,780 --> 00:17:23,970
the context of this one module so if I

473
00:17:21,869 --> 00:17:26,399
were to type the run command I get an

474
00:17:23,970 --> 00:17:29,640
error back that says you didn't tell me

475
00:17:26,400 --> 00:17:32,160
what to do you just said run what what

476
00:17:29,640 --> 00:17:33,720
am i doing right now and the way the way

477
00:17:32,160 --> 00:17:35,730
that's phrased here is there's a there's

478
00:17:33,720 --> 00:17:36,900
a our host setting that we need to set

479
00:17:35,730 --> 00:17:37,650
an order for this to work so when I do

480
00:17:36,900 --> 00:17:39,180
run

481
00:17:37,650 --> 00:17:40,980
it's doing a check to make sure that all

482
00:17:39,180 --> 00:17:43,200
of our options are set up correctly and

483
00:17:40,980 --> 00:17:45,090
if they're not will error out nothing's

484
00:17:43,200 --> 00:17:46,950
actually really happen here you need to

485
00:17:45,090 --> 00:17:50,189
go ahead and set L or excuse me our host

486
00:17:46,950 --> 00:17:51,930
how do I do that well have used the show

487
00:17:50,190 --> 00:17:53,580
options command it's gonna talk you

488
00:17:51,930 --> 00:17:55,830
through all the different options that

489
00:17:53,580 --> 00:17:57,659
are available to you and so in this case

490
00:17:55,830 --> 00:17:59,970
here you'll notice I have our host our

491
00:17:57,660 --> 00:18:01,830
port and SMB pipe two of these have

492
00:17:59,970 --> 00:18:04,230
already been filled in for me I have the

493
00:18:01,830 --> 00:18:06,030
ability to change those but that default

494
00:18:04,230 --> 00:18:07,650
value may very well work for me the

495
00:18:06,030 --> 00:18:10,110
thing that I don't have is an our host

496
00:18:07,650 --> 00:18:12,420
that is the target address this is an IP

497
00:18:10,110 --> 00:18:14,250
address or a host name of the machine

498
00:18:12,420 --> 00:18:15,630
that we're going against you'll notice

499
00:18:14,250 --> 00:18:17,670
that in the case of this module all

500
00:18:15,630 --> 00:18:19,590
three of these are required if you don't

501
00:18:17,670 --> 00:18:21,059
have all three of them set the module

502
00:18:19,590 --> 00:18:22,530
can't function that's why we were

503
00:18:21,059 --> 00:18:24,420
complaining earlier when we tried to run

504
00:18:22,530 --> 00:18:27,570
because we didn't have an our host set

505
00:18:24,420 --> 00:18:29,550
so if I use the set our host command I

506
00:18:27,570 --> 00:18:31,770
can set an IP address to attack here

507
00:18:29,550 --> 00:18:35,129
okay cool that's the machine I want to

508
00:18:31,770 --> 00:18:37,139
go after I run show options again sure

509
00:18:35,130 --> 00:18:39,960
enough my our host has been updated here

510
00:18:37,140 --> 00:18:42,450
you may also notice that your your

511
00:18:39,960 --> 00:18:44,220
payload has options as well that can be

512
00:18:42,450 --> 00:18:45,510
set so in this case here we'll talk

513
00:18:44,220 --> 00:18:48,059
through what these payloads mean in a

514
00:18:45,510 --> 00:18:49,830
bit but the idea is that a payload has

515
00:18:48,059 --> 00:18:51,450
its own options its own instructions of

516
00:18:49,830 --> 00:18:54,389
what it needs to do if the exploit

517
00:18:51,450 --> 00:18:56,190
succeeds so this is this is the same way

518
00:18:54,390 --> 00:18:57,350
we can use set and and work with these

519
00:18:56,190 --> 00:19:00,960
as well

520
00:18:57,350 --> 00:19:03,270
so in this case here I've got my

521
00:19:00,960 --> 00:19:04,320
everything this said was required as

522
00:19:03,270 --> 00:19:06,990
required so I'm gonna go ahead and kick

523
00:19:04,320 --> 00:19:09,480
it off I'm gonna run it and exploit

524
00:19:06,990 --> 00:19:12,540
failed connection refused well this this

525
00:19:09,480 --> 00:19:13,890
sucks like this didn't work right we

526
00:19:12,540 --> 00:19:16,050
just grabbed an exploit we grabbed a

527
00:19:13,890 --> 00:19:18,030
module we threw it at a target we didn't

528
00:19:16,050 --> 00:19:19,409
really understand what we were doing we

529
00:19:18,030 --> 00:19:20,670
didn't understand whether it was

530
00:19:19,410 --> 00:19:21,690
vulnerable we didn't do any checks we

531
00:19:20,670 --> 00:19:23,700
didn't do any port scans we didn't do

532
00:19:21,690 --> 00:19:25,679
anything really to make sure this worked

533
00:19:23,700 --> 00:19:26,940
and this is something that if you're

534
00:19:25,679 --> 00:19:29,720
just kind of starting with Metasploit

535
00:19:26,940 --> 00:19:31,230
you're like I I thought this just worked

536
00:19:29,720 --> 00:19:33,420
sorry

537
00:19:31,230 --> 00:19:36,450
it's harder than that we have to

538
00:19:33,420 --> 00:19:38,400
understand the the the actual workflow

539
00:19:36,450 --> 00:19:40,980
and and the methodology of how to

540
00:19:38,400 --> 00:19:42,530
exploit a target so let's talk through

541
00:19:40,980 --> 00:19:46,500
what that looks like because otherwise

542
00:19:42,530 --> 00:19:48,300
this isn't fun right so if I want to

543
00:19:46,500 --> 00:19:51,340
exploit a machine there are

544
00:19:48,300 --> 00:19:53,710
well-established steps and this is what

545
00:19:51,340 --> 00:19:55,240
you know a actual attacker would be

546
00:19:53,710 --> 00:19:56,500
doing inside your network is there as

547
00:19:55,240 --> 00:19:58,000
they're profiling things as they're

548
00:19:56,500 --> 00:19:59,980
working their way through this is the

549
00:19:58,000 --> 00:20:02,170
same process that that you'll see used

550
00:19:59,980 --> 00:20:04,390
and so we need to understand that if

551
00:20:02,170 --> 00:20:08,410
we're gonna get anywhere so we start off

552
00:20:04,390 --> 00:20:11,110
with we if assuming that you know we're

553
00:20:08,410 --> 00:20:13,060
we're wanting to assess our corporate

554
00:20:11,110 --> 00:20:15,449
network we're playing around at home

555
00:20:13,060 --> 00:20:17,889
with the network that we have

556
00:20:15,450 --> 00:20:20,590
permissions to we're gonna start with a

557
00:20:17,890 --> 00:20:22,390
simple scan and so the idea of a scan is

558
00:20:20,590 --> 00:20:26,409
to figure out which hosts are accessible

559
00:20:22,390 --> 00:20:27,820
to us so what would that look like well

560
00:20:26,410 --> 00:20:30,100
there's a handful of modules that would

561
00:20:27,820 --> 00:20:32,439
be available to you to accomplish that

562
00:20:30,100 --> 00:20:36,100
so to start off with I mentioned before

563
00:20:32,440 --> 00:20:37,480
our auxilary scanner kind of suite and

564
00:20:36,100 --> 00:20:40,510
you can look through you can actually

565
00:20:37,480 --> 00:20:42,430
tab complete that so if you do use

566
00:20:40,510 --> 00:20:43,960
auxilary slash scanner and hit tab a

567
00:20:42,430 --> 00:20:45,730
couple times you'll get the full list

568
00:20:43,960 --> 00:20:48,370
I've highlighted a handful here that I

569
00:20:45,730 --> 00:20:50,740
think are most commonly useful so let's

570
00:20:48,370 --> 00:20:53,439
start off with an ARP sweep an ARP sweep

571
00:20:50,740 --> 00:20:55,440
the idea is I have a kind of a foothold

572
00:20:53,440 --> 00:20:57,790
inside of a network maybe I'm on a local

573
00:20:55,440 --> 00:20:59,620
like a local pen test an internal pen

574
00:20:57,790 --> 00:21:01,780
test and I want to see what is directly

575
00:20:59,620 --> 00:21:03,719
on that network segment with me so ARP

576
00:21:01,780 --> 00:21:06,399
is a protocol that I can use to see what

577
00:21:03,720 --> 00:21:07,930
machines are directly reachable and the

578
00:21:06,400 --> 00:21:10,780
nice thing about this my one of the

579
00:21:07,930 --> 00:21:13,270
reasons why I'm I'm a fan of it is that

580
00:21:10,780 --> 00:21:15,460
ARP is something that will frequently

581
00:21:13,270 --> 00:21:17,050
kind of come in beneath what a firewall

582
00:21:15,460 --> 00:21:18,790
will be watching what an IDs might even

583
00:21:17,050 --> 00:21:20,169
be watching it's so common that you

584
00:21:18,790 --> 00:21:22,300
won't even see it log so it's a really

585
00:21:20,170 --> 00:21:23,560
passive way assuming that you're looking

586
00:21:22,300 --> 00:21:25,330
at things that are directly accessible

587
00:21:23,560 --> 00:21:26,409
to you directly in your same subnet it's

588
00:21:25,330 --> 00:21:27,699
a really easy way to just kind of get a

589
00:21:26,410 --> 00:21:30,070
quick look around of what what

590
00:21:27,700 --> 00:21:31,690
neighboring machines you have a lot of

591
00:21:30,070 --> 00:21:33,010
and a lot of times you'll have firewalls

592
00:21:31,690 --> 00:21:35,050
that it can be blocking a lot of ports

593
00:21:33,010 --> 00:21:36,790
and kind of keeping keeping you from

594
00:21:35,050 --> 00:21:38,590
accessing another machine it'll still

595
00:21:36,790 --> 00:21:39,879
respond to an ARP request so something

596
00:21:38,590 --> 00:21:41,110
like an ARP sweep is a really quick way

597
00:21:39,880 --> 00:21:43,030
to get a sense of what's immediately

598
00:21:41,110 --> 00:21:45,010
next to you but if I need to go a little

599
00:21:43,030 --> 00:21:47,290
bit further than that there are other

600
00:21:45,010 --> 00:21:48,580
discovery modules my second favorite

601
00:21:47,290 --> 00:21:50,110
would probably be in the ipv6

602
00:21:48,580 --> 00:21:53,470
neighborhood because everyone's still

603
00:21:50,110 --> 00:21:57,399
terrified of ipv6 it's 2018 and we'll

604
00:21:53,470 --> 00:22:00,700
get there but the idea of ipv6 ipv6

605
00:21:57,400 --> 00:22:04,570
modules is that we can use that to use

606
00:22:00,700 --> 00:22:05,150
discovery protocols and the multicast

607
00:22:04,570 --> 00:22:07,909
ping

608
00:22:05,150 --> 00:22:10,280
if you were on a local subnet those

609
00:22:07,910 --> 00:22:12,320
things will be reachable to you as well

610
00:22:10,280 --> 00:22:15,530
and for a lot of a lot of administrators

611
00:22:12,320 --> 00:22:16,730
a lot of you know defenders we aren't we

612
00:22:15,530 --> 00:22:18,530
weren't really watching that as well as

613
00:22:16,730 --> 00:22:21,020
we should be so it's a really simple way

614
00:22:18,530 --> 00:22:22,040
something a little more direct is what

615
00:22:21,020 --> 00:22:23,720
you know you would consider a normal

616
00:22:22,040 --> 00:22:26,690
port scan and so there's a variety of

617
00:22:23,720 --> 00:22:28,790
port scans built-in to Metasploit basic

618
00:22:26,690 --> 00:22:30,740
tcp port scans like a full connect so we

619
00:22:28,790 --> 00:22:32,000
do a full TCP three-way handshake

620
00:22:30,740 --> 00:22:34,100
alternatively if you want to do

621
00:22:32,000 --> 00:22:37,130
something a little more subtle a little

622
00:22:34,100 --> 00:22:39,139
more stealthy you can use a TCP syn scan

623
00:22:37,130 --> 00:22:41,000
which would just do a portion of that

624
00:22:39,140 --> 00:22:42,350
three-way the connection and so

625
00:22:41,000 --> 00:22:44,090
sometimes that gets us around some

626
00:22:42,350 --> 00:22:45,709
logging as well so you have options

627
00:22:44,090 --> 00:22:47,178
available to you depending on what you

628
00:22:45,710 --> 00:22:49,040
need and obviously this is a very small

629
00:22:47,179 --> 00:22:51,140
subset but these are things that we can

630
00:22:49,040 --> 00:22:52,159
use if we have a foothold in the network

631
00:22:51,140 --> 00:22:53,950
and we just kind want to start taking a

632
00:22:52,160 --> 00:22:57,260
look around and seeing what's there

633
00:22:53,950 --> 00:22:58,130
that's our first step so let's walk

634
00:22:57,260 --> 00:23:03,110
through what one of these would look

635
00:22:58,130 --> 00:23:05,330
like if I use our auxilary our ARP sweep

636
00:23:03,110 --> 00:23:07,309
module start off with show options like

637
00:23:05,330 --> 00:23:10,010
we saw before I've highlighted here the

638
00:23:07,309 --> 00:23:11,720
three required and that's indicated by a

639
00:23:10,010 --> 00:23:13,070
required column our three required

640
00:23:11,720 --> 00:23:15,230
options you'll notice two of these have

641
00:23:13,070 --> 00:23:17,210
already been set for us threads controls

642
00:23:15,230 --> 00:23:18,920
how fast we go timeout controls how long

643
00:23:17,210 --> 00:23:20,780
we wait we have some suggested values

644
00:23:18,920 --> 00:23:22,730
you're welcome to change them but the

645
00:23:20,780 --> 00:23:24,470
one we absolutely need is what exactly

646
00:23:22,730 --> 00:23:25,970
are we sending our proquest out for

647
00:23:24,470 --> 00:23:28,730
remember these are machines that need to

648
00:23:25,970 --> 00:23:31,280
be local to us so I want to pick in this

649
00:23:28,730 --> 00:23:33,410
case something in in the subnet that I'm

650
00:23:31,280 --> 00:23:36,649
on so here's an example address here

651
00:23:33,410 --> 00:23:39,860
notice that two things one is we have a

652
00:23:36,650 --> 00:23:41,630
plural our hosts that is because this is

653
00:23:39,860 --> 00:23:43,580
a scanner it's going against a multitude

654
00:23:41,630 --> 00:23:45,350
of machines so this can be a range of IP

655
00:23:43,580 --> 00:23:47,240
addresses you can also use cider

656
00:23:45,350 --> 00:23:50,059
notation here with your slash 24 to

657
00:23:47,240 --> 00:23:52,280
indicate that I want to go from 0 to 255

658
00:23:50,059 --> 00:23:55,040
in that entire range so this is going to

659
00:23:52,280 --> 00:23:58,580
be my my local subnet and when I kick

660
00:23:55,040 --> 00:24:01,460
this off do actually let me copy out

661
00:23:58,580 --> 00:24:04,309
this here in some cases you will want to

662
00:24:01,460 --> 00:24:06,050
set an interface so a little little

663
00:24:04,309 --> 00:24:09,080
virtual environment here I'm gonna use

664
00:24:06,050 --> 00:24:11,360
my VM net interface might be e 0 might

665
00:24:09,080 --> 00:24:13,310
be e NS 1 60 whatever it is depending on

666
00:24:11,360 --> 00:24:14,899
the machine that you're on but you might

667
00:24:13,310 --> 00:24:16,010
want to set an interface to go out on

668
00:24:14,900 --> 00:24:17,430
but when you kick that off

669
00:24:16,010 --> 00:24:18,900
you will see

670
00:24:17,430 --> 00:24:23,490
it comes back in this case I have one

671
00:24:18,900 --> 00:24:26,070
machine in my range that is this dot 128

672
00:24:23,490 --> 00:24:28,170
machine based on the MAC address of that

673
00:24:26,070 --> 00:24:30,270
machine we can make an educated guess as

674
00:24:28,170 --> 00:24:32,430
to what that machine is so in this case

675
00:24:30,270 --> 00:24:34,080
this is a virtual machine you might see

676
00:24:32,430 --> 00:24:36,540
Apple if it's a MacBook you might see

677
00:24:34,080 --> 00:24:38,070
lenovo if it's the ThinkPad it gives you

678
00:24:36,540 --> 00:24:39,750
kind of a sense of what that might be

679
00:24:38,070 --> 00:24:41,460
so we can get a little bit of

680
00:24:39,750 --> 00:24:43,320
information here again we're being

681
00:24:41,460 --> 00:24:45,930
really passive right now so that's kind

682
00:24:43,320 --> 00:24:48,210
of why I like using an arm sweep if I go

683
00:24:45,930 --> 00:24:50,970
hidden and at the end of this alright

684
00:24:48,210 --> 00:24:52,950
I'm happy this this did a full scan if I

685
00:24:50,970 --> 00:24:54,870
want to now switch modules I'm gonna use

686
00:24:52,950 --> 00:24:57,690
the back command notice that my prompt

687
00:24:54,870 --> 00:25:00,810
changes from this auxilary context back

688
00:24:57,690 --> 00:25:03,780
to our original Metasploit prompt so now

689
00:25:00,810 --> 00:25:06,540
we're ready to move on what's next I

690
00:25:03,780 --> 00:25:07,470
have a machine I want to see what ports

691
00:25:06,540 --> 00:25:09,540
are open on that machine

692
00:25:07,470 --> 00:25:11,790
so traditionally this is what you would

693
00:25:09,540 --> 00:25:13,740
call a port scan and the way we can do

694
00:25:11,790 --> 00:25:16,440
this here I'll highlight are just a

695
00:25:13,740 --> 00:25:18,540
simple port scan module so in the same

696
00:25:16,440 --> 00:25:20,910
context here I can use set our host now

697
00:25:18,540 --> 00:25:22,680
that it's singular I'm using that to to

698
00:25:20,910 --> 00:25:25,350
specify that there is a single host that

699
00:25:22,680 --> 00:25:27,120
I'm scanning against but notice that

700
00:25:25,350 --> 00:25:29,939
this will actually pop up and say hey

701
00:25:27,120 --> 00:25:31,590
did you mean our hosts because this is a

702
00:25:29,940 --> 00:25:34,320
scanner module I can actually scan

703
00:25:31,590 --> 00:25:35,610
multiple hosts so you will get a little

704
00:25:34,320 --> 00:25:37,679
bit of confusion there you'll see in

705
00:25:35,610 --> 00:25:40,199
scanner modules the the preference

706
00:25:37,680 --> 00:25:42,750
towards our hosts on exploit modules you

707
00:25:40,200 --> 00:25:44,970
will see a singular our host but the

708
00:25:42,750 --> 00:25:46,320
context here is that that you would you

709
00:25:44,970 --> 00:25:48,300
know that that's how you would kind of

710
00:25:46,320 --> 00:25:50,370
decide between the two the dirty little

711
00:25:48,300 --> 00:25:52,320
secret is that you can you can actually

712
00:25:50,370 --> 00:25:54,719
switch back and forth we tried to be as

713
00:25:52,320 --> 00:25:56,340
generous as we can with if you're an

714
00:25:54,720 --> 00:25:58,080
exploit module and you type our hosts

715
00:25:56,340 --> 00:25:59,459
will try and honor that if you're in a

716
00:25:58,080 --> 00:26:01,399
scanner module and you type our host

717
00:25:59,460 --> 00:26:04,410
will try and guide you in the right way

718
00:26:01,400 --> 00:26:07,440
but just to let you know especially on

719
00:26:04,410 --> 00:26:09,240
on older builds historically that's what

720
00:26:07,440 --> 00:26:11,070
it's been we're trying to make that as

721
00:26:09,240 --> 00:26:12,570
friendly as we possibly can

722
00:26:11,070 --> 00:26:14,070
so in this case here I'll go ahead and

723
00:26:12,570 --> 00:26:15,450
do the right thing since this is a

724
00:26:14,070 --> 00:26:16,770
scanner module I'll go ahead and make

725
00:26:15,450 --> 00:26:19,560
that plural even though I'm only

726
00:26:16,770 --> 00:26:21,150
specifying a single host there's my our

727
00:26:19,560 --> 00:26:23,070
host that gets updated here when I run

728
00:26:21,150 --> 00:26:25,700
my show options notice this is gonna do

729
00:26:23,070 --> 00:26:28,500
a full scan of ports 1 through 10,000

730
00:26:25,700 --> 00:26:29,730
might be a little aggressive depending

731
00:26:28,500 --> 00:26:30,930
on what you're looking for you can tone

732
00:26:29,730 --> 00:26:32,580
that down

733
00:26:30,930 --> 00:26:35,430
but that's gonna be pretty thorough in

734
00:26:32,580 --> 00:26:39,840
this case so if I do run you'll notice I

735
00:26:35,430 --> 00:26:44,300
see three ports open 135 139 445 any

736
00:26:39,840 --> 00:26:47,820
guesses as to what that might be NetBIOS

737
00:26:44,300 --> 00:26:50,100
SMB windows protocols generally not

738
00:26:47,820 --> 00:26:52,950
necessarily but if I had to take a guess

739
00:26:50,100 --> 00:26:54,330
I'd to bet on a sandwich yeah okay

740
00:26:52,950 --> 00:26:56,790
that's probably a Windows machine

741
00:26:54,330 --> 00:26:59,639
so in that case for four or five

742
00:26:56,790 --> 00:27:01,920
specifically is SMB server message block

743
00:26:59,640 --> 00:27:04,680
very common Microsoft protocol guess

744
00:27:01,920 --> 00:27:06,510
what we have a scanner for that so if

745
00:27:04,680 --> 00:27:07,800
you look under auxilary scanner SMB

746
00:27:06,510 --> 00:27:09,720
you'll notice there's a handful of

747
00:27:07,800 --> 00:27:11,040
modules available to you the one that

748
00:27:09,720 --> 00:27:12,810
I'm going to focus on is called SMB

749
00:27:11,040 --> 00:27:13,950
version partially because I wanted to

750
00:27:12,810 --> 00:27:15,300
highlight the functionality and

751
00:27:13,950 --> 00:27:17,100
partially because I ran out of space on

752
00:27:15,300 --> 00:27:19,290
the slide you'll notice you can tab

753
00:27:17,100 --> 00:27:21,209
complete and so this means that if you

754
00:27:19,290 --> 00:27:23,070
don't know the name of a module or if

755
00:27:21,210 --> 00:27:24,240
you're curious what's under that tree I

756
00:27:23,070 --> 00:27:26,159
can go ahead and hit tab it'll

757
00:27:24,240 --> 00:27:29,040
autocomplete it to SMB underscore

758
00:27:26,160 --> 00:27:30,800
version so I hit enter boom here we go

759
00:27:29,040 --> 00:27:32,520
now I'm in the context of that module

760
00:27:30,800 --> 00:27:34,500
notice something a little different here

761
00:27:32,520 --> 00:27:36,210
is I didn't actually type back I can

762
00:27:34,500 --> 00:27:38,940
just switch between modules very quickly

763
00:27:36,210 --> 00:27:41,460
by using just typing the used command so

764
00:27:38,940 --> 00:27:44,130
if you're you know if you want to be

765
00:27:41,460 --> 00:27:46,980
tidy and you have a procedure you know a

766
00:27:44,130 --> 00:27:48,360
little obsessiveness you can go ahead

767
00:27:46,980 --> 00:27:51,030
and tie back every time but you don't

768
00:27:48,360 --> 00:27:52,770
have to so I go ahead and I use this

769
00:27:51,030 --> 00:27:54,899
module what is this gonna do well my

770
00:27:52,770 --> 00:27:56,520
goal is that I want to see I think

771
00:27:54,900 --> 00:27:59,160
there's S&B running on this box based on

772
00:27:56,520 --> 00:28:00,570
the port probably here is SMB can give

773
00:27:59,160 --> 00:28:01,920
me a lot of information about what kind

774
00:28:00,570 --> 00:28:04,919
of machine that is what operating system

775
00:28:01,920 --> 00:28:07,530
it is even a lot more than that so SMB

776
00:28:04,920 --> 00:28:10,440
version is a way for me to profile what

777
00:28:07,530 --> 00:28:12,480
in the case of something like port 80 or

778
00:28:10,440 --> 00:28:14,160
port 4 for three very common ports that

779
00:28:12,480 --> 00:28:15,780
you see reused again and again it lets

780
00:28:14,160 --> 00:28:18,720
me figure out what versions and services

781
00:28:15,780 --> 00:28:20,340
are upon I'm on a machine and that can

782
00:28:18,720 --> 00:28:22,620
help me understand what it might be

783
00:28:20,340 --> 00:28:24,600
vulnerable to so there are a number of

784
00:28:22,620 --> 00:28:26,459
other modules that would do this as well

785
00:28:24,600 --> 00:28:27,300
focusing on the auxiliary scanners again

786
00:28:26,460 --> 00:28:30,210
you'll notice that there are a lot of

787
00:28:27,300 --> 00:28:32,520
protocol specific modules as well and so

788
00:28:30,210 --> 00:28:34,350
if you see a port that's open 443 and

789
00:28:32,520 --> 00:28:36,840
you're like alright I want to throw you

790
00:28:34,350 --> 00:28:38,730
know necessarily SLE scanner against

791
00:28:36,840 --> 00:28:40,320
that and see what's there but keeping in

792
00:28:38,730 --> 00:28:41,910
mind these can also sweep an entire

793
00:28:40,320 --> 00:28:43,980
network so if you're looking to do more

794
00:28:41,910 --> 00:28:45,450
of a web assessment looking for web apps

795
00:28:43,980 --> 00:28:48,540
it's a very quick way to scan a per

796
00:28:45,450 --> 00:28:50,370
range of machines and see what what are

797
00:28:48,540 --> 00:28:52,290
running of those services we're gonna

798
00:28:50,370 --> 00:28:55,560
focus on SMB version here but obviously

799
00:28:52,290 --> 00:28:58,800
there's SSH server message block MySQL

800
00:28:55,560 --> 00:29:00,600
even Apple file protocol so quite a

801
00:28:58,800 --> 00:29:02,879
variety for sure

802
00:29:00,600 --> 00:29:04,469
so in the SMB version again same

803
00:29:02,880 --> 00:29:05,910
workflow such our hosts show your

804
00:29:04,470 --> 00:29:08,850
options make sure that everything's set

805
00:29:05,910 --> 00:29:10,860
perfectly and when I type run I get back

806
00:29:08,850 --> 00:29:13,830
at that machine is running Windows 7

807
00:29:10,860 --> 00:29:15,510
Ultimate Edition Service Pack 1 cool all

808
00:29:13,830 --> 00:29:19,770
right now that's something I can work

809
00:29:15,510 --> 00:29:21,720
with so in addition to that I get build

810
00:29:19,770 --> 00:29:23,160
information I get the hostname of the

811
00:29:21,720 --> 00:29:25,560
machine I get to know if it's on a

812
00:29:23,160 --> 00:29:27,450
workgroup or a domain SMB sure is very

813
00:29:25,560 --> 00:29:29,730
friendly very talkative so this is

814
00:29:27,450 --> 00:29:31,320
information that think about this if you

815
00:29:29,730 --> 00:29:32,610
were looking at a packet capture think

816
00:29:31,320 --> 00:29:34,350
about this if you're looking at an IDs

817
00:29:32,610 --> 00:29:36,750
or if you were looking at a firewall if

818
00:29:34,350 --> 00:29:38,790
you're in a domain this is pretty benign

819
00:29:36,750 --> 00:29:41,670
traffic we've done ARP and we've done

820
00:29:38,790 --> 00:29:42,930
some SMB traffic that's pretty subtle

821
00:29:41,670 --> 00:29:44,850
like we're not we're not being

822
00:29:42,930 --> 00:29:46,320
particularly aggressive I'll give you

823
00:29:44,850 --> 00:29:47,550
the port scan the port scan could have

824
00:29:46,320 --> 00:29:49,919
been toned down a little bit but

825
00:29:47,550 --> 00:29:51,330
realistically if you if you want to you

826
00:29:49,920 --> 00:29:54,600
can use these modules to be as stealthy

827
00:29:51,330 --> 00:29:58,230
as you'd like and actually emulate the

828
00:29:54,600 --> 00:30:00,750
tactics of you know a particular apt or

829
00:29:58,230 --> 00:30:02,490
a particular workflow so in this case

830
00:30:00,750 --> 00:30:05,250
here I know this is a Windows 7 sp1

831
00:30:02,490 --> 00:30:07,890
machine I know a build number I can

832
00:30:05,250 --> 00:30:11,670
actually use based on on the output of

833
00:30:07,890 --> 00:30:13,770
this I can I can tell that this is an

834
00:30:11,670 --> 00:30:17,040
older version of SMB and I can use a

835
00:30:13,770 --> 00:30:19,889
specific module this SMB 1 module to

836
00:30:17,040 --> 00:30:22,020
understand what this what version of SMB

837
00:30:19,890 --> 00:30:23,430
this supports and the reason why that

838
00:30:22,020 --> 00:30:24,720
gets interesting is because there are

839
00:30:23,430 --> 00:30:26,460
vulnerabilities that are specific to

840
00:30:24,720 --> 00:30:28,350
versions of SMB there's capabilities

841
00:30:26,460 --> 00:30:31,350
that depending on the version of SMB on

842
00:30:28,350 --> 00:30:33,750
the target I want to know about so I can

843
00:30:31,350 --> 00:30:35,730
use a specific module to scan a range of

844
00:30:33,750 --> 00:30:38,400
hosts and see who supports SMB one or

845
00:30:35,730 --> 00:30:40,200
SMB to all right so I'm getting a good

846
00:30:38,400 --> 00:30:42,030
sense of what this machine is what

847
00:30:40,200 --> 00:30:43,380
operating systems is running now I'm

848
00:30:42,030 --> 00:30:46,740
kind of interested in like what can I do

849
00:30:43,380 --> 00:30:48,780
with that in this case here Google is

850
00:30:46,740 --> 00:30:50,280
your friend there are lots of other

851
00:30:48,780 --> 00:30:51,780
tools that will do this for you

852
00:30:50,280 --> 00:30:54,420
certainly using the search command if

853
00:30:51,780 --> 00:30:56,809
you're focused on a specific platform is

854
00:30:54,420 --> 00:30:59,010
a specific tool

855
00:30:56,809 --> 00:31:01,470
alternatively there are tools like CV

856
00:30:59,010 --> 00:31:03,240
details that will actually help map

857
00:31:01,470 --> 00:31:05,640
between what capabilities are out there

858
00:31:03,240 --> 00:31:07,559
and what vulnerabilities exist but in

859
00:31:05,640 --> 00:31:09,690
this case here pretty straightforward a

860
00:31:07,559 --> 00:31:11,879
simple SMB search tells me about a

861
00:31:09,690 --> 00:31:13,679
Microsoft Security Bulletin reading

862
00:31:11,880 --> 00:31:17,010
through that bulletin says this

863
00:31:13,679 --> 00:31:19,230
particular MS 1700 no resolve resolves

864
00:31:17,010 --> 00:31:21,000
issues that could allow remote code

865
00:31:19,230 --> 00:31:22,440
execution in other words an attacker to

866
00:31:21,000 --> 00:31:24,780
gain can full control of a remote

867
00:31:22,440 --> 00:31:27,510
machine if the attacker spends a

868
00:31:24,780 --> 00:31:30,360
specifically crafted message using SMB

869
00:31:27,510 --> 00:31:34,049
v1 well good news apparently I'm running

870
00:31:30,360 --> 00:31:35,428
SMB v1 so this is looking promising so

871
00:31:34,049 --> 00:31:37,049
my next step

872
00:31:35,429 --> 00:31:39,750
ideally and this is not always possible

873
00:31:37,049 --> 00:31:41,700
but ideally I now have an idea for an

874
00:31:39,750 --> 00:31:44,280
attack against a machine I want to know

875
00:31:41,700 --> 00:31:45,419
if this is something that is actually

876
00:31:44,280 --> 00:31:48,840
feasible is this machine actually

877
00:31:45,419 --> 00:31:50,910
vulnerable not every exploit gives us

878
00:31:48,840 --> 00:31:53,010
the ability to do that not every attack

879
00:31:50,910 --> 00:31:54,960
has the ability to see if a machine is

880
00:31:53,010 --> 00:31:57,660
vulnerable without actually attempting

881
00:31:54,960 --> 00:32:00,510
the full attack in this case though we

882
00:31:57,660 --> 00:32:02,640
do actually have if I look for a 1700

883
00:32:00,510 --> 00:32:04,410
know we have a handful of modules here

884
00:32:02,640 --> 00:32:06,830
and I'm realizing now that there's even

885
00:32:04,410 --> 00:32:09,600
one more that didn't make the screenshot

886
00:32:06,830 --> 00:32:12,720
but there are a number of modules that

887
00:32:09,600 --> 00:32:14,490
will tell us what is what is on that

888
00:32:12,720 --> 00:32:16,320
machine whether it is exploitable and

889
00:32:14,490 --> 00:32:18,929
potentially you'll notice in this case

890
00:32:16,320 --> 00:32:21,178
here I have both a scanner and I have an

891
00:32:18,929 --> 00:32:22,980
exploit this is a little bit unique for

892
00:32:21,179 --> 00:32:24,780
this one particular attack because

893
00:32:22,980 --> 00:32:26,130
there's so many vectors in ms70 know

894
00:32:24,780 --> 00:32:28,200
when I was actually a wide range of

895
00:32:26,130 --> 00:32:30,780
vulnerabilities but in this case here I

896
00:32:28,200 --> 00:32:32,790
have a scanner and an exploit that are

897
00:32:30,780 --> 00:32:34,350
both of interest to me we'll take a

898
00:32:32,790 --> 00:32:36,780
moment here and call out that there is a

899
00:32:34,350 --> 00:32:38,280
rank column as well and so now I kind of

900
00:32:36,780 --> 00:32:41,639
have a choice like what do I want to do

901
00:32:38,280 --> 00:32:44,100
a rank is how we can kind of at a very

902
00:32:41,640 --> 00:32:47,040
basic level start to figure out which

903
00:32:44,100 --> 00:32:50,010
which modules we would lean towards

904
00:32:47,040 --> 00:32:51,899
which would we like to try first so and

905
00:32:50,010 --> 00:32:53,879
if for those of you who've ever used MS

906
00:32:51,900 --> 00:32:56,790
1700 or eternal blue you know that it's

907
00:32:53,880 --> 00:32:59,820
not great it's not it could potentially

908
00:32:56,790 --> 00:33:01,770
crash a machine it does have the ability

909
00:32:59,820 --> 00:33:03,120
to cause that machine to be unstable so

910
00:33:01,770 --> 00:33:04,650
in this case here you'll see most of

911
00:33:03,120 --> 00:33:06,928
these are in the normal to average range

912
00:33:04,650 --> 00:33:09,400
you could see things that are up in the

913
00:33:06,929 --> 00:33:11,740
good and excellent down to low

914
00:33:09,400 --> 00:33:13,150
and manual which is effectively this is

915
00:33:11,740 --> 00:33:15,220
probably more of a denial of service

916
00:33:13,150 --> 00:33:17,830
this is something that's not really

917
00:33:15,220 --> 00:33:20,290
going to to to get you a level of access

918
00:33:17,830 --> 00:33:21,879
so rank is how I can kind of search

919
00:33:20,290 --> 00:33:23,649
through and find something specifically

920
00:33:21,880 --> 00:33:26,650
in this case here I'm gonna go ahead and

921
00:33:23,650 --> 00:33:29,110
use our scanner same style set my our

922
00:33:26,650 --> 00:33:30,610
hosts I run it and the scanner comes

923
00:33:29,110 --> 00:33:33,729
back and tells me hey this machine's

924
00:33:30,610 --> 00:33:36,000
likely vulnerable to ms70 no and oh yes

925
00:33:33,730 --> 00:33:36,000
ma'am

926
00:33:40,140 --> 00:33:44,170
that is an excellent question the

927
00:33:42,610 --> 00:33:45,879
question was with ranks is it possible

928
00:33:44,170 --> 00:33:48,370
to see annotations are really more

929
00:33:45,880 --> 00:33:50,620
detailed like why is it that ranked this

930
00:33:48,370 --> 00:33:52,928
is something that as as we started this

931
00:33:50,620 --> 00:33:54,550
it seemed like really that's about all

932
00:33:52,929 --> 00:33:57,880
you need right just kind of a I don't

933
00:33:54,550 --> 00:33:59,889
know zero through six scale as you kind

934
00:33:57,880 --> 00:34:01,570
of drill down and as we've entered you

935
00:33:59,890 --> 00:34:03,900
know today's world where we're focused

936
00:34:01,570 --> 00:34:06,370
on can we use this widely can we

937
00:34:03,900 --> 00:34:08,590
actually use this attack in a pen test

938
00:34:06,370 --> 00:34:10,690
scenario where I need to make sure that

939
00:34:08,590 --> 00:34:11,860
that machine is is not going to crash we

940
00:34:10,690 --> 00:34:13,600
need a little bit more definition to

941
00:34:11,860 --> 00:34:15,340
that and this is one of the things that

942
00:34:13,600 --> 00:34:17,830
that we're working towards is actually

943
00:34:15,340 --> 00:34:21,090
adding more granularity to this I'd say

944
00:34:17,830 --> 00:34:23,290
stay tuned but yeah if you're if you're

945
00:34:21,090 --> 00:34:26,050
following our blogs or our slack

946
00:34:23,290 --> 00:34:28,750
channels we're working on this this is a

947
00:34:26,050 --> 00:34:31,179
this is a surprisingly difficult problem

948
00:34:28,750 --> 00:34:33,550
to solve of defining what really makes a

949
00:34:31,179 --> 00:34:35,770
stable exploit what really can happen if

950
00:34:33,550 --> 00:34:37,270
you use an exploit you know what are all

951
00:34:35,770 --> 00:34:41,259
the side effects that could happen and

952
00:34:37,270 --> 00:34:43,449
so yeah right now that's what we have it

953
00:34:41,260 --> 00:34:46,090
really what you're looking towards is

954
00:34:43,449 --> 00:34:47,620
using things like the info command to

955
00:34:46,090 --> 00:34:50,020
tell you what does this do and we're

956
00:34:47,620 --> 00:34:51,549
leaning more heavily on using that

957
00:34:50,020 --> 00:34:55,870
research there's a lot of references and

958
00:34:51,550 --> 00:35:01,240
things you can follow but not yet is all

959
00:34:55,870 --> 00:35:03,400
I can say I think I think that's where

960
00:35:01,240 --> 00:35:06,779
is yeah I think that's where it's headed

961
00:35:03,400 --> 00:35:06,780
yeah yeah

962
00:35:06,880 --> 00:35:10,369
okay so we have a machine that's

963
00:35:08,900 --> 00:35:12,410
vulnerable here we already knew it was

964
00:35:10,369 --> 00:35:14,119
windows 7 ultimate I know that it's

965
00:35:12,410 --> 00:35:15,649
Service Pack 1 I know that it's 64-bit

966
00:35:14,119 --> 00:35:17,060
that's gonna be handy that's a new

967
00:35:15,650 --> 00:35:18,050
little tidbit of information we didn't

968
00:35:17,060 --> 00:35:20,390
have before and I know that it's

969
00:35:18,050 --> 00:35:22,190
vulnerable to MS 1701 out so this

970
00:35:20,390 --> 00:35:24,319
scanner is a way that I can connect to a

971
00:35:22,190 --> 00:35:26,900
machine and I can particularly with this

972
00:35:24,320 --> 00:35:30,050
vulnerability pretty definitively say

973
00:35:26,900 --> 00:35:32,750
that machine is vulnerable so what's

974
00:35:30,050 --> 00:35:39,920
next we have the reconnaissance what do

975
00:35:32,750 --> 00:35:44,089
we know what do we know we know the

976
00:35:39,920 --> 00:35:48,650
operating system yep so we know what

977
00:35:44,089 --> 00:35:50,089
ports are open so if maybe maybe you

978
00:35:48,650 --> 00:35:52,070
know we haven't been keeping good notes

979
00:35:50,089 --> 00:35:56,029
for those of you who've used Metasploit

980
00:35:52,070 --> 00:35:57,380
5 or even some of our later versions of

981
00:35:56,030 --> 00:35:59,060
Metasploit for you you might be familiar

982
00:35:57,380 --> 00:36:01,550
with the services command lets us see

983
00:35:59,060 --> 00:36:03,290
the the hosts and ports that we're

984
00:36:01,550 --> 00:36:05,330
accessible so in this case here when I

985
00:36:03,290 --> 00:36:06,950
ran that port scan it actually logged in

986
00:36:05,330 --> 00:36:08,990
our database and then the Metasploit

987
00:36:06,950 --> 00:36:11,210
database that there are three ports that

988
00:36:08,990 --> 00:36:13,310
were open the other thing is if you use

989
00:36:11,210 --> 00:36:16,070
my end map which let's be honest a lot

990
00:36:13,310 --> 00:36:18,650
of folks do you can import those and map

991
00:36:16,070 --> 00:36:20,030
files into the Metasploit database and

992
00:36:18,650 --> 00:36:23,000
use things like services to very quickly

993
00:36:20,030 --> 00:36:25,430
search through what's open you also have

994
00:36:23,000 --> 00:36:26,869
the host command that tells you which

995
00:36:25,430 --> 00:36:28,220
machines are were accessible and a

996
00:36:26,869 --> 00:36:29,480
little bit more detail about the names

997
00:36:28,220 --> 00:36:32,720
and the operating systems that were

998
00:36:29,480 --> 00:36:35,540
there but fundamentally I know this is

999
00:36:32,720 --> 00:36:37,250
you know these ports were open smb1 is

1000
00:36:35,540 --> 00:36:39,170
there I know the operating system and

1001
00:36:37,250 --> 00:36:41,420
build number I know a host name in a

1002
00:36:39,170 --> 00:36:43,010
workgroup which for me right now and

1003
00:36:41,420 --> 00:36:44,390
this is not particularly helpful but if

1004
00:36:43,010 --> 00:36:45,830
I'm looking at an enterprise network now

1005
00:36:44,390 --> 00:36:47,868
I'm scanning multiple machines and I can

1006
00:36:45,830 --> 00:36:49,910
figure out maybe based on user name or

1007
00:36:47,869 --> 00:36:51,740
hostname what that machine does that's

1008
00:36:49,910 --> 00:36:53,089
actually useful if I can figure out if

1009
00:36:51,740 --> 00:36:56,149
it's in a workgroup or part of a domain

1010
00:36:53,089 --> 00:36:57,710
that might change my tactics and finally

1011
00:36:56,150 --> 00:37:03,530
the most valuable piece is it could be

1012
00:36:57,710 --> 00:37:06,200
vulnerable to MS 1701 out great so based

1013
00:37:03,530 --> 00:37:08,630
on that and that that big piece our next

1014
00:37:06,200 --> 00:37:11,569
step is we have a potential exploit

1015
00:37:08,630 --> 00:37:14,540
let's see if it works so we start off

1016
00:37:11,570 --> 00:37:16,520
using basically kind of going through a

1017
00:37:14,540 --> 00:37:17,900
workflow recognizing the Metasploit is

1018
00:37:16,520 --> 00:37:19,830
going to take care of a great deal of

1019
00:37:17,900 --> 00:37:21,750
this for you so fundamentally

1020
00:37:19,830 --> 00:37:24,509
I have a particularly exploit I want to

1021
00:37:21,750 --> 00:37:28,590
use it that exploit is then going to use

1022
00:37:24,510 --> 00:37:30,930
memory manipulation and and and invoking

1023
00:37:28,590 --> 00:37:33,840
things like knob sleds and encoders to

1024
00:37:30,930 --> 00:37:35,850
help with that process and then it's

1025
00:37:33,840 --> 00:37:37,410
going to attach a payload so let's kind

1026
00:37:35,850 --> 00:37:41,610
of walk through what we mean with that

1027
00:37:37,410 --> 00:37:43,740
in any given exploit there is maybe a

1028
00:37:41,610 --> 00:37:45,780
particular vulnerable function in that

1029
00:37:43,740 --> 00:37:47,430
software a particular vulnerability and

1030
00:37:45,780 --> 00:37:48,780
how it communicates that we're gonna

1031
00:37:47,430 --> 00:37:51,049
take advantage of and that's what the

1032
00:37:48,780 --> 00:37:53,340
exploit is responsible for it it does

1033
00:37:51,050 --> 00:37:55,320
that that weird little trick that a

1034
00:37:53,340 --> 00:37:57,270
little bit of malformed traffic or that

1035
00:37:55,320 --> 00:37:58,910
you know kind of that odd function that

1036
00:37:57,270 --> 00:38:01,800
the developer hadn't really considered

1037
00:37:58,910 --> 00:38:04,710
to gain control of that remote service

1038
00:38:01,800 --> 00:38:06,560
so the exploit just gets us control of

1039
00:38:04,710 --> 00:38:09,660
that remote machine it doesn't actually

1040
00:38:06,560 --> 00:38:12,570
do anything with that control and for

1041
00:38:09,660 --> 00:38:15,270
that you have a couple of stages and so

1042
00:38:12,570 --> 00:38:17,940
you will have an OPS led how many folks

1043
00:38:15,270 --> 00:38:21,509
have heard of an op sled before so the

1044
00:38:17,940 --> 00:38:23,340
idea is it is a series of kind of Knoll

1045
00:38:21,510 --> 00:38:27,510
instructions instructions that are no

1046
00:38:23,340 --> 00:38:29,280
ops NOP the the idea of it is that if

1047
00:38:27,510 --> 00:38:30,780
you are doing an exploit or if you're

1048
00:38:29,280 --> 00:38:33,240
using an exploit that you're not

1049
00:38:30,780 --> 00:38:34,890
necessarily sure where the control of

1050
00:38:33,240 --> 00:38:36,870
that remote machine is going to end up

1051
00:38:34,890 --> 00:38:39,210
an obsolete kind of gives you a landing

1052
00:38:36,870 --> 00:38:42,029
strip that you can you can aim for and

1053
00:38:39,210 --> 00:38:43,320
potentially have success gaining control

1054
00:38:42,030 --> 00:38:45,480
of that remote machine when things are a

1055
00:38:43,320 --> 00:38:47,790
little bit unsteady the next step of

1056
00:38:45,480 --> 00:38:52,500
that was the idea of a stager so a

1057
00:38:47,790 --> 00:38:54,210
stager gives you an ability to give a

1058
00:38:52,500 --> 00:38:56,730
small little bit of instructions to that

1059
00:38:54,210 --> 00:38:57,990
remote machine such that it will then go

1060
00:38:56,730 --> 00:38:59,730
give you the opportunity to get more

1061
00:38:57,990 --> 00:39:02,669
instructions so the idea would be that I

1062
00:38:59,730 --> 00:39:04,620
can tell a remote machine to come reach

1063
00:39:02,670 --> 00:39:06,230
out to this address and get an

1064
00:39:04,620 --> 00:39:09,480
additional payload or more information

1065
00:39:06,230 --> 00:39:11,370
and that that last bit is a payload so

1066
00:39:09,480 --> 00:39:12,810
that is what we think of as the thing

1067
00:39:11,370 --> 00:39:14,190
that gets us a shell that gets us a

1068
00:39:12,810 --> 00:39:15,570
meterpreter session that gives us full

1069
00:39:14,190 --> 00:39:17,910
remote control of that remote machine

1070
00:39:15,570 --> 00:39:19,400
and so these components all have to work

1071
00:39:17,910 --> 00:39:22,080
together in order for that to happen

1072
00:39:19,400 --> 00:39:24,600
you'll hear this referred to as shell

1073
00:39:22,080 --> 00:39:25,740
code but the idea is an exploit and a

1074
00:39:24,600 --> 00:39:27,569
payload have to work hand-in-hand

1075
00:39:25,740 --> 00:39:29,669
exploit gives me control of that machine

1076
00:39:27,570 --> 00:39:33,200
a payload is what I do with that control

1077
00:39:29,670 --> 00:39:34,369
of the machine so if you're using

1078
00:39:33,200 --> 00:39:35,689
Metasploit you're probably familiar with

1079
00:39:34,369 --> 00:39:37,880
a handful of these payloads we'll talk

1080
00:39:35,690 --> 00:39:39,950
to more in detail but any one of these

1081
00:39:37,880 --> 00:39:42,349
if you use the set payload command are

1082
00:39:39,950 --> 00:39:46,730
used to append a payload - to that

1083
00:39:42,349 --> 00:39:48,230
exploit so this whole workflow happens I

1084
00:39:46,730 --> 00:39:50,359
send a payload up to that remote target

1085
00:39:48,230 --> 00:39:53,690
I'm now communicating back and forth

1086
00:39:50,359 --> 00:39:55,400
with it and the final step here is that

1087
00:39:53,690 --> 00:39:57,290
with that control I can begin the post

1088
00:39:55,400 --> 00:39:58,310
exploitation process I can look around I

1089
00:39:57,290 --> 00:40:00,710
can figure out what users are on that

1090
00:39:58,310 --> 00:40:03,500
machine I can gain further access to

1091
00:40:00,710 --> 00:40:06,020
other machines inside the network so

1092
00:40:03,500 --> 00:40:09,470
what's this whole thing look like to a

1093
00:40:06,020 --> 00:40:12,290
user well if I say use and I give it the

1094
00:40:09,470 --> 00:40:14,629
path to that medicine Metasploit exploit

1095
00:40:12,290 --> 00:40:18,890
I set my our host as we've seen before

1096
00:40:14,630 --> 00:40:21,650
and I hit run we kick off in this case

1097
00:40:18,890 --> 00:40:23,029
the eternal blue exploit and so this is

1098
00:40:21,650 --> 00:40:24,290
gonna vary depending on what exploit

1099
00:40:23,030 --> 00:40:25,640
you're using in a case of eternal blue

1100
00:40:24,290 --> 00:40:28,369
you're going to see a lot of details

1101
00:40:25,640 --> 00:40:30,500
about checking to make sure that the

1102
00:40:28,369 --> 00:40:32,750
target operating system matches what we

1103
00:40:30,500 --> 00:40:34,190
think it should be so in this case here

1104
00:40:32,750 --> 00:40:36,200
there's a check that takes place to make

1105
00:40:34,190 --> 00:40:40,250
sure the OS and architecture match you

1106
00:40:36,200 --> 00:40:42,049
will see a kind of a comparison of when

1107
00:40:40,250 --> 00:40:43,730
we probe it with SMB it responds back

1108
00:40:42,050 --> 00:40:46,550
with its version will actually see the

1109
00:40:43,730 --> 00:40:48,410
raw output of that and then after

1110
00:40:46,550 --> 00:40:49,730
several of lines after several lines you

1111
00:40:48,410 --> 00:40:50,868
should see something the effective

1112
00:40:49,730 --> 00:40:52,460
eternal blue overwrite completed

1113
00:40:50,869 --> 00:40:54,829
successfully we're not out of the woods

1114
00:40:52,460 --> 00:40:57,230
yet we sent the exploit the Machine

1115
00:40:54,829 --> 00:40:58,640
responded back in an expected way but we

1116
00:40:57,230 --> 00:41:00,200
don't necessarily have control of that

1117
00:40:58,640 --> 00:41:02,328
remember earlier we were looking at that

1118
00:41:00,200 --> 00:41:06,890
rank does anybody remember what it was

1119
00:41:02,329 --> 00:41:08,930
it's like like normal or average like it

1120
00:41:06,890 --> 00:41:10,670
wasn't great right so the trick was

1121
00:41:08,930 --> 00:41:12,770
something like eternal blue is that

1122
00:41:10,670 --> 00:41:14,270
sometimes you get a win and we get a

1123
00:41:12,770 --> 00:41:15,740
command shell one opened and here's a

1124
00:41:14,270 --> 00:41:19,369
remote shell on the remote on the other

1125
00:41:15,740 --> 00:41:21,020
machine great other times not so much in

1126
00:41:19,369 --> 00:41:23,300
the case of eternal blue this is common

1127
00:41:21,020 --> 00:41:24,950
and this is actually built in to to the

1128
00:41:23,300 --> 00:41:27,319
logic and so it's actually gonna

1129
00:41:24,950 --> 00:41:28,790
continue to keep trying and you'll

1130
00:41:27,319 --> 00:41:31,009
notice it'll it'll have a brief delay

1131
00:41:28,790 --> 00:41:32,450
it'll wait see if this succeeds it'll

1132
00:41:31,010 --> 00:41:34,369
move on again it'll try it again

1133
00:41:32,450 --> 00:41:36,799
wait to see if it succeeds and so it'll

1134
00:41:34,369 --> 00:41:38,450
try multiple times to get a shell on

1135
00:41:36,800 --> 00:41:42,740
that remote machine but ideally it's

1136
00:41:38,450 --> 00:41:45,310
going to work unless how many of you

1137
00:41:42,740 --> 00:41:45,310
have seen this before

1138
00:41:47,590 --> 00:41:49,910
how many you're looking at this right

1139
00:41:49,460 --> 00:41:53,480
now

1140
00:41:49,910 --> 00:41:55,549
so eternal blue uses a lot of memory

1141
00:41:53,480 --> 00:41:57,530
manipulation to try and gain remote

1142
00:41:55,550 --> 00:41:59,690
control the other machine dad it is a

1143
00:41:57,530 --> 00:42:01,790
tricky game to play and so there's

1144
00:41:59,690 --> 00:42:02,600
there's unfortunately nothing can really

1145
00:42:01,790 --> 00:42:04,910
be done about it

1146
00:42:02,600 --> 00:42:07,400
sometimes you draw the short straw and

1147
00:42:04,910 --> 00:42:08,870
you're actually going to crash the LSS

1148
00:42:07,400 --> 00:42:12,290
service on the remote machine this is

1149
00:42:08,870 --> 00:42:14,150
why it's not ranked very highly so if a

1150
00:42:12,290 --> 00:42:16,279
machine is vulnerable you will usually

1151
00:42:14,150 --> 00:42:18,590
take multiple tries the more times you

1152
00:42:16,280 --> 00:42:20,150
try especially if your parameters aren't

1153
00:42:18,590 --> 00:42:21,530
quite right especially if you're you're

1154
00:42:20,150 --> 00:42:23,810
throwing an exploit but your payload

1155
00:42:21,530 --> 00:42:25,720
isn't configured properly you're gonna

1156
00:42:23,810 --> 00:42:28,630
make that machine more in one stable

1157
00:42:25,720 --> 00:42:31,430
this is what happens if it actually

1158
00:42:28,630 --> 00:42:33,020
crashes so the good news is by default

1159
00:42:31,430 --> 00:42:36,080
Windows actually will automatically

1160
00:42:33,020 --> 00:42:37,880
reboot that sounds great unless you're

1161
00:42:36,080 --> 00:42:40,490
going against domain controller that's

1162
00:42:37,880 --> 00:42:42,290
not as great so this is why it really

1163
00:42:40,490 --> 00:42:43,850
pays to look through the info of a

1164
00:42:42,290 --> 00:42:45,890
module to look at the rank and really

1165
00:42:43,850 --> 00:42:49,450
consider what you're doing before you

1166
00:42:45,890 --> 00:42:53,060
just start throwing an exploit around so

1167
00:42:49,450 --> 00:42:54,589
ideally though ideally especially when

1168
00:42:53,060 --> 00:42:58,430
the mission win a machine freshly boots

1169
00:42:54,590 --> 00:42:59,900
you'll see win and you'll see your your

1170
00:42:58,430 --> 00:43:01,970
prompt here and I can interact with this

1171
00:42:59,900 --> 00:43:04,100
machine as I would if I just opened up a

1172
00:43:01,970 --> 00:43:05,390
command prompt on this on this Windows 7

1173
00:43:04,100 --> 00:43:06,980
machine I can type hostname and I can

1174
00:43:05,390 --> 00:43:08,779
see that yep that's my hostname I could

1175
00:43:06,980 --> 00:43:10,450
take Who am I and I see that I'm system

1176
00:43:08,780 --> 00:43:12,560
for those of you who aren't familiar

1177
00:43:10,450 --> 00:43:14,089
system in a Windows environment is a

1178
00:43:12,560 --> 00:43:15,860
wonderful thing that's our highest level

1179
00:43:14,090 --> 00:43:16,190
of privilege this is a wonderful place

1180
00:43:15,860 --> 00:43:18,650
to be

1181
00:43:16,190 --> 00:43:20,540
alternatively if you're used coming in

1182
00:43:18,650 --> 00:43:21,470
with an exploit that doesn't grant us

1183
00:43:20,540 --> 00:43:23,120
system privileges

1184
00:43:21,470 --> 00:43:24,890
we'd have to chain that with another

1185
00:43:23,120 --> 00:43:26,330
module that would give us the local

1186
00:43:24,890 --> 00:43:28,460
privilege escalation we'll talk about

1187
00:43:26,330 --> 00:43:29,930
what that looks like in a second so this

1188
00:43:28,460 --> 00:43:31,430
is one way to get access to a machine

1189
00:43:29,930 --> 00:43:35,020
and now I have a prompt here and that's

1190
00:43:31,430 --> 00:43:37,700
wonderful you can use ctrl Z to

1191
00:43:35,020 --> 00:43:39,860
background that so what do I mean when I

1192
00:43:37,700 --> 00:43:41,720
say that anything and I'm typing right

1193
00:43:39,860 --> 00:43:43,430
now is being sent to that remote machine

1194
00:43:41,720 --> 00:43:44,990
is being processed by their own machine

1195
00:43:43,430 --> 00:43:47,270
why hit enter that's command executing

1196
00:43:44,990 --> 00:43:49,040
on the remote machine alternatively if I

1197
00:43:47,270 --> 00:43:51,110
hit control Z I can get back to the

1198
00:43:49,040 --> 00:43:52,190
context of Metasploit where my commands

1199
00:43:51,110 --> 00:43:53,570
are actually being processed by

1200
00:43:52,190 --> 00:43:55,850
Metasploit and my actions are being

1201
00:43:53,570 --> 00:43:57,200
carried out on my machine that I'm

1202
00:43:55,850 --> 00:43:57,618
sitting in front of not the remote

1203
00:43:57,200 --> 00:43:59,930
machine

1204
00:43:57,619 --> 00:44:01,490
just exploiting a moment ago so this

1205
00:43:59,930 --> 00:44:03,049
control Z asks us do you want to

1206
00:44:01,490 --> 00:44:04,879
background the session if I say yes you

1207
00:44:03,049 --> 00:44:06,829
notice my prompt changes back to an MS

1208
00:44:04,880 --> 00:44:08,990
f5 and I'm still back in the context of

1209
00:44:06,829 --> 00:44:11,690
my eternal blue exploit I hit back I can

1210
00:44:08,990 --> 00:44:17,450
draw it back to Metasploit again so why

1211
00:44:11,690 --> 00:44:18,740
would I want to do that I can I can get

1212
00:44:17,450 --> 00:44:21,710
multiple sessions I can launch another

1213
00:44:18,740 --> 00:44:24,589
attack I can potentially use an exploit

1214
00:44:21,710 --> 00:44:27,230
that actually would get me access to

1215
00:44:24,589 --> 00:44:29,569
multiple machines at one time but I can

1216
00:44:27,230 --> 00:44:32,509
switch between those fairly easily

1217
00:44:29,569 --> 00:44:33,410
so we have this session and let's take a

1218
00:44:32,509 --> 00:44:35,900
moment to talk about what that really

1219
00:44:33,410 --> 00:44:38,210
means so a session means that I have

1220
00:44:35,900 --> 00:44:40,490
direct access to one machine but

1221
00:44:38,210 --> 00:44:43,240
medicine Metasploit has the ability to

1222
00:44:40,490 --> 00:44:46,308
work with multiple machines at one time

1223
00:44:43,240 --> 00:44:48,019
simultaneously and that means that I can

1224
00:44:46,309 --> 00:44:49,369
have multiple operating systems I can

1225
00:44:48,019 --> 00:44:51,769
have control of a Linux machine and a

1226
00:44:49,369 --> 00:44:53,690
Windows machine and an android device

1227
00:44:51,769 --> 00:44:55,368
like you you could you can mix and match

1228
00:44:53,690 --> 00:44:58,579
and and work with all these machines

1229
00:44:55,369 --> 00:45:00,829
simultaneously or you could even have

1230
00:44:58,579 --> 00:45:05,869
multiple payloads on one target at one

1231
00:45:00,829 --> 00:45:07,430
time and why would you do that for

1232
00:45:05,869 --> 00:45:09,289
persistence that's one good reason yeah

1233
00:45:07,430 --> 00:45:10,519
maybe maybe I'm afraid you know okay I

1234
00:45:09,289 --> 00:45:12,890
used a vulnerability and Internet

1235
00:45:10,519 --> 00:45:14,988
Explorer and I'm worried that a user

1236
00:45:12,890 --> 00:45:17,960
might close Internet Explorer and I lose

1237
00:45:14,989 --> 00:45:18,999
I now lose my access to that machine why

1238
00:45:17,960 --> 00:45:22,249
else

1239
00:45:18,999 --> 00:45:24,410
escalation absolutely so maybe I exploit

1240
00:45:22,249 --> 00:45:26,689
gave me access as a normal user and I

1241
00:45:24,410 --> 00:45:28,129
now want to escalate to system I might

1242
00:45:26,690 --> 00:45:30,230
have two payloads one running as a user

1243
00:45:28,130 --> 00:45:33,410
one running a system yeah very good

1244
00:45:30,230 --> 00:45:36,890
reasons so what would this look like

1245
00:45:33,410 --> 00:45:38,450
well there's a module for that I promise

1246
00:45:36,890 --> 00:45:42,259
I'll stop saying that at some point so

1247
00:45:38,450 --> 00:45:44,598
there is post exploitation modules that

1248
00:45:42,259 --> 00:45:46,940
help us once we gain access to remote

1249
00:45:44,599 --> 00:45:48,710
systems so post exploit is what we do

1250
00:45:46,940 --> 00:45:50,869
once we've gained remote control and

1251
00:45:48,710 --> 00:45:52,489
these post modules will let us navigate

1252
00:45:50,869 --> 00:45:54,739
around that remote system will let us

1253
00:45:52,489 --> 00:45:57,170
gather information and in this case will

1254
00:45:54,739 --> 00:45:59,839
let us move from a simple command line

1255
00:45:57,170 --> 00:46:03,170
to meterpreter show hands how many of

1256
00:45:59,839 --> 00:46:03,828
used mature Peter before about half

1257
00:46:03,170 --> 00:46:06,769
maybe

1258
00:46:03,829 --> 00:46:09,019
okay so meterpreter is a payload that

1259
00:46:06,769 --> 00:46:10,720
beyond a command line where I can just

1260
00:46:09,019 --> 00:46:12,160
type commands and use them

1261
00:46:10,720 --> 00:46:14,140
use the remote machine as if I were

1262
00:46:12,160 --> 00:46:16,390
standing in front of it gives me a whole

1263
00:46:14,140 --> 00:46:18,730
new level of access it is modular it

1264
00:46:16,390 --> 00:46:20,529
allows me to upload new plugins it

1265
00:46:18,730 --> 00:46:22,000
allows me a lower level of access to the

1266
00:46:20,530 --> 00:46:23,710
operating system to send commands

1267
00:46:22,000 --> 00:46:25,900
directly to it it allows me to interact

1268
00:46:23,710 --> 00:46:27,520
with other processes it basically gives

1269
00:46:25,900 --> 00:46:31,090
me a much stronger foothold on that

1270
00:46:27,520 --> 00:46:33,130
remote machine and lets me open up all

1271
00:46:31,090 --> 00:46:34,720
new worlds of functionality so

1272
00:46:33,130 --> 00:46:37,750
meterpreter is kind of the place to be

1273
00:46:34,720 --> 00:46:39,819
but I don't have it and I have a shell

1274
00:46:37,750 --> 00:46:42,190
instead there's a module that will go

1275
00:46:39,820 --> 00:46:44,470
from having a command-line shell to

1276
00:46:42,190 --> 00:46:46,540
having a meterpreter prompt meterpreter

1277
00:46:44,470 --> 00:46:48,490
shell and so this Sheldor meterpreter

1278
00:46:46,540 --> 00:46:51,310
module and you'll notice when I do show

1279
00:46:48,490 --> 00:46:55,450
options really only needs a session and

1280
00:46:51,310 --> 00:46:57,160
a session is another is is you know for

1281
00:46:55,450 --> 00:47:00,790
example in this case my command prompt

1282
00:46:57,160 --> 00:47:02,770
so session 1 in this example that would

1283
00:47:00,790 --> 00:47:05,230
give me access to their own machine

1284
00:47:02,770 --> 00:47:07,090
the sessions command is how I can

1285
00:47:05,230 --> 00:47:08,530
navigate between those sessions and so

1286
00:47:07,090 --> 00:47:10,720
in this case here I'll just use sessions

1287
00:47:08,530 --> 00:47:12,850
SH and you can see there's a lot of ways

1288
00:47:10,720 --> 00:47:14,350
I can interact with sessions the one I'm

1289
00:47:12,850 --> 00:47:17,350
going to talk about for right now is

1290
00:47:14,350 --> 00:47:19,660
sessions - L so sessions - L shows me

1291
00:47:17,350 --> 00:47:22,630
all the sessions that I have in this

1292
00:47:19,660 --> 00:47:26,529
case really just one guess what number

1293
00:47:22,630 --> 00:47:28,000
it is one if I had maybe lost access to

1294
00:47:26,530 --> 00:47:30,340
this machine I had to exploit it again

1295
00:47:28,000 --> 00:47:32,290
or if I had another machine and maybe I

1296
00:47:30,340 --> 00:47:34,330
lost this connection you'd see you know

1297
00:47:32,290 --> 00:47:36,370
maybe I had session number two but in

1298
00:47:34,330 --> 00:47:37,960
this case if I do sessions - I I can

1299
00:47:36,370 --> 00:47:39,430
interact with sessions one you notice I

1300
00:47:37,960 --> 00:47:40,510
drop back to my command prompt well

1301
00:47:39,430 --> 00:47:43,509
that's not really where I wanted to be

1302
00:47:40,510 --> 00:47:45,430
control-z brings me back if I go into

1303
00:47:43,510 --> 00:47:47,770
this module and I set this session to

1304
00:47:45,430 --> 00:47:49,540
one I can run that and what this is

1305
00:47:47,770 --> 00:47:51,640
gonna do is it's gonna use it's gonna

1306
00:47:49,540 --> 00:47:55,050
first figure out what kind of session is

1307
00:47:51,640 --> 00:47:57,609
it and how can is callate from that

1308
00:47:55,050 --> 00:48:00,250
command prompt - a meterpreter session

1309
00:47:57,610 --> 00:48:02,410
and so this is actually going to take

1310
00:48:00,250 --> 00:48:06,220
care of all the work of uploading our

1311
00:48:02,410 --> 00:48:08,410
meterpreter payload executing it and

1312
00:48:06,220 --> 00:48:10,299
getting a connection back so now when I

1313
00:48:08,410 --> 00:48:12,970
do sessions - L you'll notice I have two

1314
00:48:10,300 --> 00:48:14,260
sessions same host - different sessions

1315
00:48:12,970 --> 00:48:16,359
with two different sets of capabilities

1316
00:48:14,260 --> 00:48:17,980
so you might see sessions being used for

1317
00:48:16,360 --> 00:48:19,270
persistence you might see being used to

1318
00:48:17,980 --> 00:48:20,680
escalate privileges but in this case

1319
00:48:19,270 --> 00:48:22,930
here we're actually using it for

1320
00:48:20,680 --> 00:48:24,549
additional capabilities

1321
00:48:22,930 --> 00:48:25,868
to have another payload in case maybe

1322
00:48:24,550 --> 00:48:27,670
something goes wrong with one of them

1323
00:48:25,869 --> 00:48:29,740
something crashes I might still have

1324
00:48:27,670 --> 00:48:31,270
access to this machine but I now have a

1325
00:48:29,740 --> 00:48:35,859
whole new set of capabilities available

1326
00:48:31,270 --> 00:48:38,950
to me so now I can use sessions - I -

1327
00:48:35,859 --> 00:48:43,690
one I get a prompt - I - gets me a

1328
00:48:38,950 --> 00:48:46,118
meterpreter session so there's a there's

1329
00:48:43,690 --> 00:48:47,829
an easier way a more direct way to have

1330
00:48:46,119 --> 00:48:49,450
done this certainly I kind of took the

1331
00:48:47,829 --> 00:48:50,859
long road around in terms of getting a

1332
00:48:49,450 --> 00:48:52,089
command prompt and then using a module

1333
00:48:50,859 --> 00:48:53,380
to get to interpreter what if I just

1334
00:48:52,089 --> 00:48:55,839
wanted to get meterpreter straightaway

1335
00:48:53,380 --> 00:48:57,430
well I briefly mentioned earlier the set

1336
00:48:55,839 --> 00:48:58,990
payload command and this is something

1337
00:48:57,430 --> 00:49:01,118
that I can use in the context of an

1338
00:48:58,990 --> 00:49:03,520
exploit to say I want this specific

1339
00:49:01,119 --> 00:49:05,950
payload to be attached when we launch

1340
00:49:03,520 --> 00:49:07,359
this exploit so I would really prefer to

1341
00:49:05,950 --> 00:49:09,399
just have meterpreter attached to the

1342
00:49:07,359 --> 00:49:13,058
exploit that way I just immediately get

1343
00:49:09,400 --> 00:49:14,530
a meterpreter prompt great so if I you

1344
00:49:13,059 --> 00:49:16,300
can just set payload I mentioned the tab

1345
00:49:14,530 --> 00:49:17,950
trick before if I use two of them I get

1346
00:49:16,300 --> 00:49:19,480
a full list of all the payloads that are

1347
00:49:17,950 --> 00:49:21,430
available that are compatible with this

1348
00:49:19,480 --> 00:49:24,160
particular exploit and you notice that

1349
00:49:21,430 --> 00:49:27,910
we have a generic shell so that gets us

1350
00:49:24,160 --> 00:49:29,200
a command prompt we also have some basic

1351
00:49:27,910 --> 00:49:31,029
and we'll talk about these more in a

1352
00:49:29,200 --> 00:49:32,529
little bit some some some payloads that

1353
00:49:31,030 --> 00:49:34,059
take advantage of basic functionality

1354
00:49:32,530 --> 00:49:36,670
operating system and then we have mature

1355
00:49:34,059 --> 00:49:38,920
brooder payloads so there's a whole host

1356
00:49:36,670 --> 00:49:40,630
of these I've only selected a handful of

1357
00:49:38,920 --> 00:49:44,710
them but in this case here I'm gonna

1358
00:49:40,630 --> 00:49:47,230
choose windows 64-bit meterpreter bind

1359
00:49:44,710 --> 00:49:49,750
tcp let's take a second to talk about

1360
00:49:47,230 --> 00:49:51,099
what that means so in this case here I

1361
00:49:49,750 --> 00:49:53,049
know the operating system I know the

1362
00:49:51,099 --> 00:49:55,270
architecture this is the the

1363
00:49:53,049 --> 00:49:57,490
functionality that I'm anticipating but

1364
00:49:55,270 --> 00:49:58,869
is if you ever just do Windows x64

1365
00:49:57,490 --> 00:50:00,399
meterpreter and hit tab a couple times

1366
00:49:58,869 --> 00:50:03,579
you'll notice there's quite a list a

1367
00:50:00,400 --> 00:50:05,500
very long list of different types of

1368
00:50:03,579 --> 00:50:07,390
meterpreter payloads that we can use and

1369
00:50:05,500 --> 00:50:09,549
the differentiating factor there is how

1370
00:50:07,390 --> 00:50:11,799
they communicate bind TCP is probably

1371
00:50:09,549 --> 00:50:14,980
one of the simplest examples it opens up

1372
00:50:11,799 --> 00:50:16,270
a TCP port binds that TCP port on the

1373
00:50:14,980 --> 00:50:18,220
remote target in other words so it's

1374
00:50:16,270 --> 00:50:20,440
listening for a connection and now we

1375
00:50:18,220 --> 00:50:22,540
can connect in on that port very simple

1376
00:50:20,440 --> 00:50:27,760
very straightforward when would that not

1377
00:50:22,540 --> 00:50:30,040
work firewalls are the key example so a

1378
00:50:27,760 --> 00:50:32,950
firewall might say I'm only going to

1379
00:50:30,040 --> 00:50:35,079
allow four or five great or maybe you

1380
00:50:32,950 --> 00:50:36,290
know 80 if it's a webserver I'm not

1381
00:50:35,079 --> 00:50:37,550
gonna open whatever

1382
00:50:36,290 --> 00:50:39,890
random ports you've chosen for your

1383
00:50:37,550 --> 00:50:42,440
interpreter payload I'm not accepting

1384
00:50:39,890 --> 00:50:43,759
connections on that so a firewall might

1385
00:50:42,440 --> 00:50:45,500
stop me and that could be a firewall on

1386
00:50:43,760 --> 00:50:48,140
the target itself it could be a firewall

1387
00:50:45,500 --> 00:50:50,690
somewhere between me and the target so a

1388
00:50:48,140 --> 00:50:52,790
bind payload is is a very easy way to

1389
00:50:50,690 --> 00:50:54,980
get into a machine but it may not always

1390
00:50:52,790 --> 00:50:56,690
work alternatively the the biggest

1391
00:50:54,980 --> 00:50:58,910
counter example of that is a is a

1392
00:50:56,690 --> 00:51:00,590
reverse payload we're instead of opening

1393
00:50:58,910 --> 00:51:02,960
a port on the target that I connect to I

1394
00:51:00,590 --> 00:51:05,240
open a port on my local machine

1395
00:51:02,960 --> 00:51:06,950
and tell the target my IP address and a

1396
00:51:05,240 --> 00:51:09,080
port to call back to where it can reach

1397
00:51:06,950 --> 00:51:10,609
me so we'll go through a bunch of

1398
00:51:09,080 --> 00:51:12,460
examples for these but in this case I'm

1399
00:51:10,610 --> 00:51:16,490
going with a very simple bind TCP

1400
00:51:12,460 --> 00:51:18,800
payload here when I hit run now eternal

1401
00:51:16,490 --> 00:51:20,569
blue kicks off and now immediately I'm

1402
00:51:18,800 --> 00:51:22,310
dropped to a meterpreter prompt so I

1403
00:51:20,570 --> 00:51:26,480
immediately get full full meterpreter

1404
00:51:22,310 --> 00:51:29,779
access cool I've been talking for a

1405
00:51:26,480 --> 00:51:32,000
while let me pause for a moment does

1406
00:51:29,780 --> 00:51:34,750
this is this workflow kind of making

1407
00:51:32,000 --> 00:51:37,100
sense how how many of you is this new

1408
00:51:34,750 --> 00:51:39,320
for how many of you is this boring and

1409
00:51:37,100 --> 00:51:45,950
old we're good

1410
00:51:39,320 --> 00:51:48,430
Jacob really no okay okay that's that's

1411
00:51:45,950 --> 00:51:55,399
actually fair that's fair that was yeah

1412
00:51:48,430 --> 00:51:58,460
there we go so so the idea here is that

1413
00:51:55,400 --> 00:52:01,490
we can quickly gain full capabilities on

1414
00:51:58,460 --> 00:52:02,990
a remote machine very directly and so if

1415
00:52:01,490 --> 00:52:05,000
you end up with the next some exploits

1416
00:52:02,990 --> 00:52:07,580
don't allow us to do this some exploits

1417
00:52:05,000 --> 00:52:09,290
don't have the ability to send a payload

1418
00:52:07,580 --> 00:52:11,210
as large as meterpreter up to the target

1419
00:52:09,290 --> 00:52:13,520
sometimes we're stuck with a command

1420
00:52:11,210 --> 00:52:15,590
shell this is we have a way around that

1421
00:52:13,520 --> 00:52:16,910
but in cases of something like eternal

1422
00:52:15,590 --> 00:52:18,560
blue I can just send meterpreter

1423
00:52:16,910 --> 00:52:23,089
straight up and get full access to that

1424
00:52:18,560 --> 00:52:25,700
machine under meterpreter so we have

1425
00:52:23,090 --> 00:52:27,350
meterpreter I think this is a good point

1426
00:52:25,700 --> 00:52:30,049
to kind of pause for a little bit if

1427
00:52:27,350 --> 00:52:32,060
you're interested in catching up Jacob

1428
00:52:30,050 --> 00:52:33,980
and I are here to help for sure I'd love

1429
00:52:32,060 --> 00:52:35,990
you know if you've got a Callie machine

1430
00:52:33,980 --> 00:52:37,130
or you've got our Windows 7 target we're

1431
00:52:35,990 --> 00:52:38,689
happy to kind of get you caught up to

1432
00:52:37,130 --> 00:52:39,710
this point we'll talk through a little

1433
00:52:38,690 --> 00:52:41,300
bit of the functionality of meterpreter

1434
00:52:39,710 --> 00:52:42,980
but I want to go ahead and take just a

1435
00:52:41,300 --> 00:52:45,200
little bit of a break I know there's

1436
00:52:42,980 --> 00:52:46,910
water in the back feel free to get up

1437
00:52:45,200 --> 00:52:49,189
and move around we'll be here to answer

1438
00:52:46,910 --> 00:52:50,089
some questions and let's kind of pause

1439
00:52:49,190 --> 00:52:54,620
for a moment

1440
00:52:50,090 --> 00:52:57,880
good let's say ten minutes so it's three

1441
00:52:54,620 --> 00:52:57,880
now let's call it three ten

