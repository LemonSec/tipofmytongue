1
00:00:17,280 --> 00:00:21,840
yeah if you don't mind that'd be a lot

2
00:00:19,410 --> 00:00:24,119
better I hope you just kind of like

3
00:00:21,840 --> 00:00:29,910
point or say next slide if that's okay

4
00:00:24,119 --> 00:00:32,580
with you it's just terrible like

5
00:00:29,910 --> 00:00:35,750
normally normally I always have my

6
00:00:32,580 --> 00:00:35,750
clicker that the one day

7
00:00:45,430 --> 00:00:48,790
test test

8
00:01:26,170 --> 00:01:31,870
for those of you who are in the back of

9
00:01:28,479 --> 00:01:33,520
the room depending on your level of

10
00:01:31,870 --> 00:01:35,290
interest with this it's there's gonna be

11
00:01:33,520 --> 00:01:38,140
some demos that are demonstrated

12
00:01:35,290 --> 00:01:40,300
throughout the presentation and some of

13
00:01:38,140 --> 00:01:42,040
them may not be as visible in the back

14
00:01:40,300 --> 00:01:43,539
but there's definitely some important

15
00:01:42,040 --> 00:01:46,509
things I'll be highlighting within the

16
00:01:43,540 --> 00:01:48,250
demos so if you can't see that that well

17
00:01:46,509 --> 00:01:49,659
and you want to see smaller text like

18
00:01:48,250 --> 00:01:52,000
command line prompts and stuff like that

19
00:01:49,659 --> 00:01:53,140
you may want to come up to the front of

20
00:01:52,000 --> 00:01:56,070
the room or at least a little bit closer

21
00:01:53,140 --> 00:01:56,070
if you can

22
00:02:24,270 --> 00:02:27,290
they got me

23
00:03:38,890 --> 00:03:44,220
I'm gonna get started in about one

24
00:03:40,870 --> 00:03:44,220
minute or less

25
00:04:07,680 --> 00:04:14,260
okay good morning everyone I'm gonna go

26
00:04:11,380 --> 00:04:16,238
ahead and get started the title is

27
00:04:14,260 --> 00:04:18,870
called keeping up with a PT's which is

28
00:04:16,238 --> 00:04:21,700
like the advanced persistent threat I'm

29
00:04:18,870 --> 00:04:23,500
part of the immediate red team and this

30
00:04:21,700 --> 00:04:25,599
is a talk about the latest trends that

31
00:04:23,500 --> 00:04:27,580
we use on the red team to kind of

32
00:04:25,600 --> 00:04:29,830
emulate these covert attackers and

33
00:04:27,580 --> 00:04:35,140
actually do covert operations for our

34
00:04:29,830 --> 00:04:37,090
clients so my name is Ivan Pena I've

35
00:04:35,140 --> 00:04:39,159
been with Mandaeans fire a little over

36
00:04:37,090 --> 00:04:41,619
six years I was pre acquisition of

37
00:04:39,160 --> 00:04:44,110
mandiant proper before we actually got

38
00:04:41,620 --> 00:04:47,350
acquired by fire I need global red team

39
00:04:44,110 --> 00:04:49,000
lead for mandiant and I've been all over

40
00:04:47,350 --> 00:04:50,320
I was kind of in the Alexandria office

41
00:04:49,000 --> 00:04:52,750
which is where Mannion headquarters is

42
00:04:50,320 --> 00:04:54,610
for three years I moved to Los Angeles I

43
00:04:52,750 --> 00:04:56,650
was out to the west coast for three

44
00:04:54,610 --> 00:04:59,470
years as well and I actually moved back

45
00:04:56,650 --> 00:05:01,510
to San Antonio about a year ago and this

46
00:04:59,470 --> 00:05:04,570
is actually my hometown so this is where

47
00:05:01,510 --> 00:05:07,060
I'm based out of and now I can operate

48
00:05:04,570 --> 00:05:09,599
remotely so it's not a big deal and I'm

49
00:05:07,060 --> 00:05:12,190
very much enjoying being back home and

50
00:05:09,600 --> 00:05:13,480
Joseph who runs this conference he's an

51
00:05:12,190 --> 00:05:16,750
old mentor of mine from when I was in

52
00:05:13,480 --> 00:05:18,790
UTSA and my undergrad and so him and I

53
00:05:16,750 --> 00:05:20,650
have a great relationship and it's

54
00:05:18,790 --> 00:05:22,150
really nice to see him you know build

55
00:05:20,650 --> 00:05:23,530
out this conference and see the

56
00:05:22,150 --> 00:05:25,960
community that we have here in San

57
00:05:23,530 --> 00:05:29,260
Antonio I'm fairly new to the security

58
00:05:25,960 --> 00:05:31,349
community in San Antonio very well you

59
00:05:29,260 --> 00:05:33,670
know well versed in in some of the other

60
00:05:31,350 --> 00:05:35,380
communities outside of San Antonio

61
00:05:33,670 --> 00:05:38,170
because I was traveling and lived abroad

62
00:05:35,380 --> 00:05:40,090
for a while but you know really happy to

63
00:05:38,170 --> 00:05:42,820
see everyone here and be a part of this

64
00:05:40,090 --> 00:05:45,489
community so I think I said I was like

65
00:05:42,820 --> 00:05:46,510
UTSA alumni I got my masters in George

66
00:05:45,490 --> 00:05:49,510
Mason when I was living in Alexandria

67
00:05:46,510 --> 00:05:51,730
and that's in Fairfax and right out of

68
00:05:49,510 --> 00:05:53,349
college I went and was on the marine

69
00:05:51,730 --> 00:05:56,380
corps red team in Quantico actually

70
00:05:53,350 --> 00:05:58,600
before I moved to Alexandria and that's

71
00:05:56,380 --> 00:06:02,170
that was kind of my first hacking

72
00:05:58,600 --> 00:06:03,430
experience professionally anyway and and

73
00:06:02,170 --> 00:06:05,680
so that was a very good experience to

74
00:06:03,430 --> 00:06:07,330
get me started and some of them

75
00:06:05,680 --> 00:06:09,400
background what you'll kind of notice as

76
00:06:07,330 --> 00:06:10,990
we go through these slides there's a lot

77
00:06:09,400 --> 00:06:13,060
of technical stuff when it comes to

78
00:06:10,990 --> 00:06:15,820
operating systems software development

79
00:06:13,060 --> 00:06:17,380
and then also kind of IT and you kind of

80
00:06:15,820 --> 00:06:18,790
have to put all these together to be a

81
00:06:17,380 --> 00:06:19,810
pretty effective red teamer and I'll

82
00:06:18,790 --> 00:06:22,090
explain how that works

83
00:06:19,810 --> 00:06:23,710
we go through these slides but my

84
00:06:22,090 --> 00:06:25,570
background has a lot of software

85
00:06:23,710 --> 00:06:27,250
development and also IT when I was in

86
00:06:25,570 --> 00:06:30,580
college I worked throughout college as a

87
00:06:27,250 --> 00:06:32,380
as a sysadmin consultant doing a lot of

88
00:06:30,580 --> 00:06:33,550
sysadmin and server setups and all that

89
00:06:32,380 --> 00:06:38,469
really helped me kind of build my career

90
00:06:33,550 --> 00:06:40,480
from the start so the agenda today is

91
00:06:38,470 --> 00:06:42,610
kind of talk to you again about how

92
00:06:40,480 --> 00:06:44,169
we're what we're seeing in the wild so

93
00:06:42,610 --> 00:06:46,510
one of the the advantages that I have

94
00:06:44,169 --> 00:06:49,210
working at firearm and ian is that we do

95
00:06:46,510 --> 00:06:51,400
most every big breach in the industry

96
00:06:49,210 --> 00:06:53,530
you know you'll hear you know Sony gets

97
00:06:51,400 --> 00:06:56,109
hacked target gets hacked Hobby Lobby or

98
00:06:53,530 --> 00:06:57,760
Home Depot whatever and we'll go do

99
00:06:56,110 --> 00:06:59,650
those investigations so we get to see

100
00:06:57,760 --> 00:07:02,169
what attackers are actually doing in the

101
00:06:59,650 --> 00:07:03,880
wild and then I get that Intel and

102
00:07:02,169 --> 00:07:05,380
they'll tell me hey Evan you're you and

103
00:07:03,880 --> 00:07:07,450
your team can implement these

104
00:07:05,380 --> 00:07:08,830
methodologies if you want to this is

105
00:07:07,450 --> 00:07:09,789
good this is not good this is where

106
00:07:08,830 --> 00:07:11,919
you're getting caught this is where

107
00:07:09,790 --> 00:07:14,950
you're not so this talk is actually

108
00:07:11,919 --> 00:07:17,080
gonna go through all the latest and

109
00:07:14,950 --> 00:07:19,030
coolest things that we do and that we're

110
00:07:17,080 --> 00:07:20,620
seeing attackers do as well and how it's

111
00:07:19,030 --> 00:07:23,320
currently bypassing a lot of the

112
00:07:20,620 --> 00:07:24,700
detection in the industry and so it's

113
00:07:23,320 --> 00:07:26,740
gonna include things like shell code

114
00:07:24,700 --> 00:07:28,390
injection and execution there's a big

115
00:07:26,740 --> 00:07:30,760
difference I'll explain what that is in

116
00:07:28,390 --> 00:07:33,760
a little bit command and process

117
00:07:30,760 --> 00:07:36,010
execution persistence lateral movement

118
00:07:33,760 --> 00:07:38,169
some creative ways of doing red teaming

119
00:07:36,010 --> 00:07:39,940
or hacking in general and then some

120
00:07:38,169 --> 00:07:42,820
final thoughts on the matter we're gonna

121
00:07:39,940 --> 00:07:45,219
kind of build this out a little bit so

122
00:07:42,820 --> 00:07:47,320
we're gonna kind of start from scratch

123
00:07:45,220 --> 00:07:49,090
and then build it out and then we're

124
00:07:47,320 --> 00:07:49,450
gonna use them in combination of each

125
00:07:49,090 --> 00:07:50,919
other

126
00:07:49,450 --> 00:07:55,659
and you'll see how that works in a

127
00:07:50,919 --> 00:07:57,490
moment so this is a basic example of hex

128
00:07:55,660 --> 00:07:59,220
shell code and what shell code

129
00:07:57,490 --> 00:08:01,720
essentially is is a self-contained

130
00:07:59,220 --> 00:08:03,789
executable that can be in different

131
00:08:01,720 --> 00:08:07,240
formats but most common format is going

132
00:08:03,789 --> 00:08:08,950
to be hex and generally this is used for

133
00:08:07,240 --> 00:08:11,320
a process injection again it could be

134
00:08:08,950 --> 00:08:14,169
used for process execution a lot of your

135
00:08:11,320 --> 00:08:15,969
commercial or even open-source rats

136
00:08:14,169 --> 00:08:17,919
which is like a remote access trojan or

137
00:08:15,970 --> 00:08:19,150
backdoors you know there's a lot of

138
00:08:17,919 --> 00:08:21,990
different terms for these sort of things

139
00:08:19,150 --> 00:08:24,669
like coal bot strike Metasploit Empire

140
00:08:21,990 --> 00:08:26,620
even if your own if you have one we're

141
00:08:24,669 --> 00:08:29,140
building we have one out for fire right

142
00:08:26,620 --> 00:08:31,479
we have our own custom situ and these

143
00:08:29,140 --> 00:08:33,159
should all have a shell code generator

144
00:08:31,479 --> 00:08:33,740
for you so if you want to create just

145
00:08:33,159 --> 00:08:36,020
raw

146
00:08:33,740 --> 00:08:37,700
code from your payload within any one of

147
00:08:36,020 --> 00:08:39,500
these commercial products you can do so

148
00:08:37,700 --> 00:08:41,870
and so what I'm going to kind of show

149
00:08:39,500 --> 00:08:43,849
y'all today is how we're using our

150
00:08:41,870 --> 00:08:46,790
builders our shellcode voters to kind of

151
00:08:43,849 --> 00:08:53,930
expand it and and be very covert about

152
00:08:46,790 --> 00:08:56,750
it so our stage 0 initial vector payload

153
00:08:53,930 --> 00:08:58,489
generally used to always be shell code

154
00:08:56,750 --> 00:08:59,899
injection it still is today and the

155
00:08:58,490 --> 00:09:02,950
reason why is because if you're using

156
00:08:59,899 --> 00:09:05,510
shell code injection versus execution is

157
00:09:02,950 --> 00:09:07,850
it's gonna inject into a separate

158
00:09:05,510 --> 00:09:10,939
process so if for example the user or a

159
00:09:07,850 --> 00:09:13,190
defender terminates your process or even

160
00:09:10,940 --> 00:09:15,200
a Navy product for that matter then

161
00:09:13,190 --> 00:09:17,450
you'll still remain in memory operating

162
00:09:15,200 --> 00:09:19,399
versus if you're doing like a wait for

163
00:09:17,450 --> 00:09:21,680
single objects on a create thread which

164
00:09:19,399 --> 00:09:23,270
we'll talk about a moment your process

165
00:09:21,680 --> 00:09:25,310
will be killed and then that initial

166
00:09:23,270 --> 00:09:27,380
vector is done the reason why it's so

167
00:09:25,310 --> 00:09:29,569
important during the stage 0 initial

168
00:09:27,380 --> 00:09:31,070
vector process is because again you

169
00:09:29,570 --> 00:09:32,600
don't know what's on the victims side

170
00:09:31,070 --> 00:09:34,730
you don't know what's on the laptop that

171
00:09:32,600 --> 00:09:36,470
you just infected it could be a Navy it

172
00:09:34,730 --> 00:09:37,880
could again be a savvy user it just

173
00:09:36,470 --> 00:09:39,800
kills your process and then you're done

174
00:09:37,880 --> 00:09:41,959
that was your one vector in so if you

175
00:09:39,800 --> 00:09:43,250
inject initially on the stage zero it's

176
00:09:41,959 --> 00:09:44,899
really important because again you'll

177
00:09:43,250 --> 00:09:46,040
stay in memory on another process that's

178
00:09:44,899 --> 00:09:49,250
like they're gonna still be running a

179
00:09:46,040 --> 00:09:53,959
great example that is explore SVC hosts

180
00:09:49,250 --> 00:09:56,420
things like that so some of the most

181
00:09:53,959 --> 00:09:58,760
common shell code injection techniques

182
00:09:56,420 --> 00:10:02,360
that we see today use create remote

183
00:09:58,760 --> 00:10:03,709
thread api's and and this is a function

184
00:10:02,360 --> 00:10:05,990
built into Windows you know that any

185
00:10:03,709 --> 00:10:08,569
sort of software developer can call to

186
00:10:05,990 --> 00:10:10,279
inject into a process now the problem

187
00:10:08,570 --> 00:10:12,500
with create remote thread as it speaks

188
00:10:10,279 --> 00:10:14,600
right now is there are API is that

189
00:10:12,500 --> 00:10:16,730
Windows provides that a V's are actually

190
00:10:14,600 --> 00:10:20,720
using to detect on this activity and

191
00:10:16,730 --> 00:10:22,010
that's something that I found AVS are

192
00:10:20,720 --> 00:10:23,899
getting a lot better at and they're

193
00:10:22,010 --> 00:10:26,270
terminating the process before it can

194
00:10:23,899 --> 00:10:28,610
even run and again they're using these

195
00:10:26,270 --> 00:10:31,189
api's to do that to give you some

196
00:10:28,610 --> 00:10:32,839
examples of how it's done is for example

197
00:10:31,190 --> 00:10:34,370
if a thread is being created by a

198
00:10:32,839 --> 00:10:35,899
different process and the caller is

199
00:10:34,370 --> 00:10:38,420
running obviously that's an easy

200
00:10:35,899 --> 00:10:40,520
detection same thing with you can target

201
00:10:38,420 --> 00:10:42,589
a query target memory for a new thread

202
00:10:40,520 --> 00:10:44,720
I'm going to be mentioning threads a lot

203
00:10:42,589 --> 00:10:47,690
and I'll also explain why that matters

204
00:10:44,720 --> 00:10:49,460
here in a moment so you can query

205
00:10:47,690 --> 00:10:51,590
target memory for new threads so you can

206
00:10:49,460 --> 00:10:53,600
look at the permissions if it's a DLL

207
00:10:51,590 --> 00:10:55,820
versus shell code and then you can write

208
00:10:53,600 --> 00:10:58,100
these abs can write regular expressions

209
00:10:55,820 --> 00:11:02,660
around shell code that's gonna be hex

210
00:10:58,100 --> 00:11:05,750
again BAE 64 things like that so this is

211
00:11:02,660 --> 00:11:07,910
why we love asynchronous procedure calls

212
00:11:05,750 --> 00:11:10,490
this is built into the operating system

213
00:11:07,910 --> 00:11:12,079
and what it does is it tells threads to

214
00:11:10,490 --> 00:11:13,670
do something a great example is gonna be

215
00:11:12,080 --> 00:11:14,810
things like starting a service or

216
00:11:13,670 --> 00:11:16,849
terminating a threat

217
00:11:14,810 --> 00:11:19,099
asynchronous procedure calls or

218
00:11:16,850 --> 00:11:22,220
otherwise known as a pcs this is an

219
00:11:19,100 --> 00:11:25,160
awesome way to do injection specifically

220
00:11:22,220 --> 00:11:27,320
using cue user a PC because it happens

221
00:11:25,160 --> 00:11:30,680
like a million times on your computer

222
00:11:27,320 --> 00:11:33,560
even if you try to hook into possible a

223
00:11:30,680 --> 00:11:35,660
pcs firing it's not gonna be practical

224
00:11:33,560 --> 00:11:37,250
for any AV or ADR product to actually

225
00:11:35,660 --> 00:11:40,130
detect on this because there's just so

226
00:11:37,250 --> 00:11:42,260
many so many going on that it will

227
00:11:40,130 --> 00:11:44,930
essentially die you'll end up tossing

228
00:11:42,260 --> 00:11:47,090
your computer if you even try same thing

229
00:11:44,930 --> 00:11:48,739
with other api's I mentioned some api's

230
00:11:47,090 --> 00:11:50,150
on the crate mode thread the abs are

231
00:11:48,740 --> 00:11:52,820
using to try to detect the activity

232
00:11:50,150 --> 00:11:54,650
that's going on if you try using it the

233
00:11:52,820 --> 00:11:57,230
API is provided by Windows for Q user a

234
00:11:54,650 --> 00:11:58,280
PC again is gonna be so many false

235
00:11:57,230 --> 00:12:01,310
positives you're not gonna know what's

236
00:11:58,280 --> 00:12:04,040
good and what's bad so this is why we're

237
00:12:01,310 --> 00:12:05,660
using Q user a PC to do shellcode

238
00:12:04,040 --> 00:12:07,160
injection versus create remote read

239
00:12:05,660 --> 00:12:09,410
which is going to be your vanilla type

240
00:12:07,160 --> 00:12:12,319
of shell code injection and this right

241
00:12:09,410 --> 00:12:14,150
now is it's just I don't see a practical

242
00:12:12,320 --> 00:12:16,130
way of detecting it right now another

243
00:12:14,150 --> 00:12:18,590
advantage of working at fire I as a

244
00:12:16,130 --> 00:12:20,720
product company is that we have endpoint

245
00:12:18,590 --> 00:12:22,760
products that are very advanced and we

246
00:12:20,720 --> 00:12:24,530
can detect on a lot of good activity but

247
00:12:22,760 --> 00:12:26,750
on the same side I can see what we can't

248
00:12:24,530 --> 00:12:28,250
detect and in this case we're having a

249
00:12:26,750 --> 00:12:33,320
big problem detecting any sort of

250
00:12:28,250 --> 00:12:35,570
injection using Q user a PC so here's a

251
00:12:33,320 --> 00:12:38,420
really good example of a basic shell

252
00:12:35,570 --> 00:12:40,490
code injection c-sharp application that

253
00:12:38,420 --> 00:12:44,569
we wrote internally and as you can see

254
00:12:40,490 --> 00:12:46,220
it has hex this is like just basic you

255
00:12:44,570 --> 00:12:47,920
know we're all shell code hex right

256
00:12:46,220 --> 00:12:50,810
there you can pass into a byte array and

257
00:12:47,920 --> 00:12:53,599
we use for calls pretty much to to

258
00:12:50,810 --> 00:12:56,329
inject this or in this case executed

259
00:12:53,600 --> 00:12:58,700
virtual Alec Marshall copy create thread

260
00:12:56,330 --> 00:12:59,960
wait for single object this number three

261
00:12:58,700 --> 00:13:01,610
is the one I kind of want to point out

262
00:12:59,960 --> 00:13:03,380
here because this is just gonna spawn

263
00:13:01,610 --> 00:13:06,610
new process as a child process of

264
00:13:03,380 --> 00:13:08,600
whatever was executing the shellcode so

265
00:13:06,610 --> 00:13:09,980
the reason why this is kind of

266
00:13:08,600 --> 00:13:12,620
interesting is because this is not

267
00:13:09,980 --> 00:13:15,170
injection at all this is just creating a

268
00:13:12,620 --> 00:13:17,029
child process so I want you all to keep

269
00:13:15,170 --> 00:13:18,529
that in mind because a child process of

270
00:13:17,029 --> 00:13:21,470
a parent process can be a heuristic

271
00:13:18,529 --> 00:13:25,610
detection in itself so for example if

272
00:13:21,470 --> 00:13:27,829
you have PowerShell executing let's just

273
00:13:25,610 --> 00:13:30,110
say shellcode eggsy is your shellcode

274
00:13:27,829 --> 00:13:32,300
name that's obviously gonna be some sort

275
00:13:30,110 --> 00:13:34,040
of like heuristic in itself because

276
00:13:32,300 --> 00:13:34,910
PowerShell never executes that child

277
00:13:34,040 --> 00:13:37,699
process ever

278
00:13:34,910 --> 00:13:39,170
so it's an easy detection to have so

279
00:13:37,700 --> 00:13:41,779
that's just something I want to mention

280
00:13:39,170 --> 00:13:43,729
on the create thread approach which is

281
00:13:41,779 --> 00:13:45,170
still a very common approach and again

282
00:13:43,730 --> 00:13:47,120
this is not injection this is just

283
00:13:45,170 --> 00:13:49,519
execution

284
00:13:47,120 --> 00:13:52,010
here's another example of the exact same

285
00:13:49,519 --> 00:13:54,649
thing but instead of using straight hex

286
00:13:52,010 --> 00:13:56,420
where base64 encoding the hex calling

287
00:13:54,649 --> 00:13:58,940
another function to decode the hex and

288
00:13:56,420 --> 00:14:00,769
then executing it the exact same way we

289
00:13:58,940 --> 00:14:03,560
use those same calls that I mentioned

290
00:14:00,769 --> 00:14:05,450
before marshal copy virtual Alec crate

291
00:14:03,560 --> 00:14:08,060
mouth right away for single object or

292
00:14:05,450 --> 00:14:09,680
create thread in this case and so you

293
00:14:08,060 --> 00:14:11,779
can do different things you can finagle

294
00:14:09,680 --> 00:14:14,300
the shell code however you want to so

295
00:14:11,779 --> 00:14:16,010
that if any sort of AV vendors or other

296
00:14:14,300 --> 00:14:21,519
detection products actually have regular

297
00:14:16,010 --> 00:14:23,930
expressions on assemblies or even common

298
00:14:21,519 --> 00:14:25,279
source code like a CSV file for example

299
00:14:23,930 --> 00:14:26,149
you want to pass into something else

300
00:14:25,279 --> 00:14:28,760
like msbuild

301
00:14:26,149 --> 00:14:30,170
then you can bypass some of that using

302
00:14:28,760 --> 00:14:31,490
things like basics to foreign code but

303
00:14:30,170 --> 00:14:33,620
this is actually not a great way of

304
00:14:31,490 --> 00:14:36,920
doing it because it's just encoding and

305
00:14:33,620 --> 00:14:39,920
it's not common still that you're gonna

306
00:14:36,920 --> 00:14:42,319
see straight hex or base64 a long string

307
00:14:39,920 --> 00:14:45,439
anyway of basics before base64 encoded

308
00:14:42,320 --> 00:14:48,019
shellcode in a source source code file

309
00:14:45,440 --> 00:14:49,699
next slide so that's why we want to go

310
00:14:48,019 --> 00:14:52,699
to something like this this is actually

311
00:14:49,699 --> 00:14:55,339
kind of an interesting thing again same

312
00:14:52,699 --> 00:14:57,319
method virtual Alec marshal copy create

313
00:14:55,339 --> 00:14:59,060
thread wait for single objects same API

314
00:14:57,320 --> 00:15:02,199
calls all the same goodness of a

315
00:14:59,060 --> 00:15:05,149
shellcode injector the difference is we

316
00:15:02,199 --> 00:15:07,459
base64 encode our shellcode and then we

317
00:15:05,149 --> 00:15:10,459
export using a private key that we but

318
00:15:07,459 --> 00:15:12,050
we have that we decode it in memory so

319
00:15:10,459 --> 00:15:13,640
the cool thing about this is there's no

320
00:15:12,050 --> 00:15:14,599
regular expression for X or because it's

321
00:15:13,640 --> 00:15:15,170
gonna be different every single time

322
00:15:14,600 --> 00:15:17,329
that's just

323
00:15:15,170 --> 00:15:20,449
the nature of encryption the second

324
00:15:17,329 --> 00:15:22,429
thing is you're not going to have as you

325
00:15:20,449 --> 00:15:24,469
notice we're appending this variable

326
00:15:22,429 --> 00:15:27,049
which is our show code line by line

327
00:15:24,470 --> 00:15:29,209
generally we use column of 80 and then

328
00:15:27,049 --> 00:15:31,100
on the 80 column we append it to a new

329
00:15:29,209 --> 00:15:35,118
line and what this does is it reduces

330
00:15:31,100 --> 00:15:37,639
the entropy of the binary itself which

331
00:15:35,119 --> 00:15:40,790
also has a detection for AVS again

332
00:15:37,639 --> 00:15:42,679
entropy AVS use entropy a lot for

333
00:15:40,790 --> 00:15:45,410
different sort of detections as well so

334
00:15:42,679 --> 00:15:50,689
again if you try to append a long string

335
00:15:45,410 --> 00:15:54,889
of shellcode then then you will not get

336
00:15:50,689 --> 00:15:56,868
detected on entropy so that's kind of

337
00:15:54,889 --> 00:15:59,660
like the foundation about shellcode

338
00:15:56,869 --> 00:16:02,389
execution and so code and show code

339
00:15:59,660 --> 00:16:04,759
injection and so again I wanted to give

340
00:16:02,389 --> 00:16:06,980
you guys a pretty good foundation on the

341
00:16:04,759 --> 00:16:11,959
difference between the two and explain

342
00:16:06,980 --> 00:16:13,699
why one is important over the other so

343
00:16:11,959 --> 00:16:16,339
now I kind of want to talk about how we

344
00:16:13,699 --> 00:16:17,689
execute this shellcode again with the

345
00:16:16,339 --> 00:16:19,519
what we talked about before it's mainly

346
00:16:17,689 --> 00:16:22,969
just building out the payload or

347
00:16:19,519 --> 00:16:25,220
building out your shellcode so the next

348
00:16:22,970 --> 00:16:26,689
thing is that's code execution which is

349
00:16:25,220 --> 00:16:28,579
essentially shell code injection or

350
00:16:26,689 --> 00:16:30,709
execution but now we have to have

351
00:16:28,579 --> 00:16:33,019
command execution a way to actually

352
00:16:30,709 --> 00:16:35,359
execute this right so we like to use Lal

353
00:16:33,019 --> 00:16:38,600
bins Lal bins are essentially living off

354
00:16:35,360 --> 00:16:40,549
the land binaries that you can use on

355
00:16:38,600 --> 00:16:42,529
any Windows system so what this means is

356
00:16:40,549 --> 00:16:43,910
that they're native applications built

357
00:16:42,529 --> 00:16:45,769
into the Windows system that you can

358
00:16:43,910 --> 00:16:48,738
take advantage of to actually execute

359
00:16:45,769 --> 00:16:49,569
whatever payload that you have next

360
00:16:48,739 --> 00:16:53,059
slide please

361
00:16:49,569 --> 00:16:53,779
so a lot of people don't understand how

362
00:16:53,059 --> 00:16:55,999
this works

363
00:16:53,779 --> 00:16:58,279
they're just like okay you know this guy

364
00:16:55,999 --> 00:16:59,629
and specifically sub T or KC Smith he

365
00:16:58,279 --> 00:17:01,939
does a lot of the original research

366
00:16:59,629 --> 00:17:04,339
around using native binaries for code

367
00:17:01,939 --> 00:17:06,260
execution but the way it actually works

368
00:17:04,339 --> 00:17:08,629
is through these unmanaged exports

369
00:17:06,260 --> 00:17:10,220
within these native binaries and what

370
00:17:08,630 --> 00:17:13,159
that means is that there's an actual

371
00:17:10,220 --> 00:17:16,039
export or entry point within a specific

372
00:17:13,159 --> 00:17:19,549
application or in this case a law bin

373
00:17:16,039 --> 00:17:22,398
that execute arbitrary code for the in

374
00:17:19,549 --> 00:17:25,158
this case so if you had a way to call

375
00:17:22,398 --> 00:17:28,010
the same entry point or export in this

376
00:17:25,159 --> 00:17:28,980
case that's unmanaged within c-sharp you

377
00:17:28,010 --> 00:17:32,129
can execute

378
00:17:28,980 --> 00:17:35,429
arbitrary code if again you're calling

379
00:17:32,130 --> 00:17:37,559
the same export in this case so this

380
00:17:35,429 --> 00:17:39,419
four lines of code right here is a

381
00:17:37,559 --> 00:17:41,250
really basic example of how you can

382
00:17:39,419 --> 00:17:44,010
accomplish this and use a native binary

383
00:17:41,250 --> 00:17:45,779
to call in this case things your exec

384
00:17:44,010 --> 00:17:47,669
which is going to be a show code runner

385
00:17:45,779 --> 00:17:51,899
so let's kind of go into that a little

386
00:17:47,669 --> 00:17:53,880
bit more next slide please so but before

387
00:17:51,899 --> 00:17:56,250
I get into that we can talk about using

388
00:17:53,880 --> 00:17:58,289
little bins all day but you still will

389
00:17:56,250 --> 00:18:00,450
get detected on long bins on two things

390
00:17:58,289 --> 00:18:01,980
one's gonna be command-line arguments

391
00:18:00,450 --> 00:18:04,169
which I'll talk about in a moment and

392
00:18:01,980 --> 00:18:07,380
then the second is going to be parent to

393
00:18:04,169 --> 00:18:09,840
child process behavior or heuristics so

394
00:18:07,380 --> 00:18:12,299
like I mentioned if power show executes

395
00:18:09,840 --> 00:18:15,149
Mallory eggsy you know as a child

396
00:18:12,299 --> 00:18:17,730
process that child process Mallory eggsy

397
00:18:15,149 --> 00:18:19,768
may have been shell code within the DLL

398
00:18:17,730 --> 00:18:22,320
itself that you're executing for example

399
00:18:19,769 --> 00:18:24,630
but it never touched disk or maybe it's

400
00:18:22,320 --> 00:18:26,610
in memory if you're using reflection in

401
00:18:24,630 --> 00:18:29,090
it let's just say it's a DLL diello is

402
00:18:26,610 --> 00:18:31,860
not an executable it's gonna be executed

403
00:18:29,090 --> 00:18:33,510
per se because in this case it's just

404
00:18:31,860 --> 00:18:37,080
going to be used by a lull bin in this

405
00:18:33,510 --> 00:18:38,669
case so the reason why this spawning the

406
00:18:37,080 --> 00:18:40,918
parent-child process behavior is so

407
00:18:38,669 --> 00:18:43,200
important because if you do injection

408
00:18:40,919 --> 00:18:45,630
versus again create thread which is

409
00:18:43,200 --> 00:18:47,250
going to be execution you can avoid this

410
00:18:45,630 --> 00:18:49,799
behavior and avoid detection all

411
00:18:47,250 --> 00:18:51,990
together a good example of this is reg

412
00:18:49,799 --> 00:18:53,850
serve 32 which again is a native binary

413
00:18:51,990 --> 00:18:56,039
part of the lobe ends let's just say

414
00:18:53,850 --> 00:18:58,469
that's spawned by Wynne Word Excel or

415
00:18:56,039 --> 00:19:01,169
PowerPoint and this is actually a common

416
00:18:58,470 --> 00:19:03,330
theme because if let's say for example

417
00:19:01,169 --> 00:19:05,700
you're doing a phishing email and you

418
00:19:03,330 --> 00:19:08,760
have for example a macro and within that

419
00:19:05,700 --> 00:19:10,590
macro your payload is fireless a file

420
00:19:08,760 --> 00:19:11,850
this payload is going to be something

421
00:19:10,590 --> 00:19:13,740
that you don't actually need a file on

422
00:19:11,850 --> 00:19:15,779
disk to execute in that case it will

423
00:19:13,740 --> 00:19:18,870
maybe accept a URL like register of 32

424
00:19:15,779 --> 00:19:20,760
does for example so if reg surf 32 is

425
00:19:18,870 --> 00:19:22,289
spawned though as a child process of any

426
00:19:20,760 --> 00:19:24,450
one of these native applications like

427
00:19:22,289 --> 00:19:27,059
windward or whatever that's that's an

428
00:19:24,450 --> 00:19:28,919
obvious detection and if IRI HX does

429
00:19:27,059 --> 00:19:30,570
this a lot of other EDR products do this

430
00:19:28,919 --> 00:19:31,769
AV vendors are starting to do this as

431
00:19:30,570 --> 00:19:35,100
they're looking at parent to child

432
00:19:31,769 --> 00:19:38,490
process behaviors for any sort of

433
00:19:35,100 --> 00:19:40,770
detection so if you notice I mentioned

434
00:19:38,490 --> 00:19:42,160
command-line arguments this right here

435
00:19:40,770 --> 00:19:44,350
is the simple

436
00:19:42,160 --> 00:19:48,190
and that you can use for with register

437
00:19:44,350 --> 00:19:50,020
32 to execute in this case an SCS CT

438
00:19:48,190 --> 00:19:52,360
file which is otherwise known as a

439
00:19:50,020 --> 00:19:54,550
scriptlet file and that contains things

440
00:19:52,360 --> 00:19:56,709
like VBS it could change it contains a

441
00:19:54,550 --> 00:19:58,500
script we like to use dotnet UJ script

442
00:19:56,710 --> 00:20:01,390
to execute our shell code within Jaya

443
00:19:58,500 --> 00:20:02,620
within these SCT files but if you notice

444
00:20:01,390 --> 00:20:05,770
look at all these switches you have

445
00:20:02,620 --> 00:20:08,229
slash s slash n slash you you have to

446
00:20:05,770 --> 00:20:10,720
have / I plus your URL in order to

447
00:20:08,230 --> 00:20:12,790
execute your SCT file and then if you

448
00:20:10,720 --> 00:20:15,010
notice that the end has scrubbed jll

449
00:20:12,790 --> 00:20:18,250
which is a dll required to actually do

450
00:20:15,010 --> 00:20:19,420
this activity that's a very simple

451
00:20:18,250 --> 00:20:22,240
command-line argument that actually

452
00:20:19,420 --> 00:20:25,180
doesn't happen very often on the windows

453
00:20:22,240 --> 00:20:26,590
system at least legitimately so again

454
00:20:25,180 --> 00:20:29,470
command-line arguments if you're

455
00:20:26,590 --> 00:20:31,659
capturing this which again all all your

456
00:20:29,470 --> 00:20:33,700
modern-day EDR products again fire HX

457
00:20:31,660 --> 00:20:35,260
silence carbon black they're all going

458
00:20:33,700 --> 00:20:37,120
to be monitoring command-line arguments

459
00:20:35,260 --> 00:20:39,760
and then if anyone has system on and

460
00:20:37,120 --> 00:20:40,959
they're monitoring the event long for

461
00:20:39,760 --> 00:20:42,820
command-line arguments as well they're

462
00:20:40,960 --> 00:20:45,220
going to be capturing this activity so

463
00:20:42,820 --> 00:20:47,290
that's what I mean by file list again is

464
00:20:45,220 --> 00:20:48,910
that there's gonna be no actual file on

465
00:20:47,290 --> 00:20:52,330
disk it's gonna be hosted somewhere and

466
00:20:48,910 --> 00:20:55,990
in the cloud and then executed using a

467
00:20:52,330 --> 00:20:58,240
native binary next slide please so

468
00:20:55,990 --> 00:20:59,590
another example was gonna be PowerShell

469
00:20:58,240 --> 00:21:01,120
you know everyone's like yeah power

470
00:20:59,590 --> 00:21:03,730
shows like the greatest when it comes to

471
00:21:01,120 --> 00:21:05,530
like using you know code execution and

472
00:21:03,730 --> 00:21:07,360
malicious execution whatever like

473
00:21:05,530 --> 00:21:08,950
PowerShell is kind of like a five years

474
00:21:07,360 --> 00:21:10,810
ago thing that we don't actually use as

475
00:21:08,950 --> 00:21:12,790
much these days you have invoke

476
00:21:10,810 --> 00:21:15,340
expression and you have in coded command

477
00:21:12,790 --> 00:21:18,159
it's a PowerShell attack no profile

478
00:21:15,340 --> 00:21:20,379
attack W with a hidden window and then

479
00:21:18,160 --> 00:21:21,940
you have invoke expression or encoded

480
00:21:20,380 --> 00:21:22,450
command and that's generally what its

481
00:21:21,940 --> 00:21:24,160
gonna be

482
00:21:22,450 --> 00:21:25,660
those command-line arguments never

483
00:21:24,160 --> 00:21:26,980
happened legitimately so you're gonna

484
00:21:25,660 --> 00:21:30,070
get caught based on command-line

485
00:21:26,980 --> 00:21:32,140
arguments alone with PowerShell so this

486
00:21:30,070 --> 00:21:34,570
is why we don't actually use this that

487
00:21:32,140 --> 00:21:37,210
often anymore msbuild is another example

488
00:21:34,570 --> 00:21:40,600
ms builds of native binary that calls

489
00:21:37,210 --> 00:21:43,780
CSC as a subprocess to ms bill to

490
00:21:40,600 --> 00:21:47,320
compile any sort of cs proj file which

491
00:21:43,780 --> 00:21:49,450
is essentially c-sharp application with

492
00:21:47,320 --> 00:21:51,399
actual source code and that will be

493
00:21:49,450 --> 00:21:52,870
compiled in memory and then executed

494
00:21:51,400 --> 00:21:54,490
which is a great way to get around

495
00:21:52,870 --> 00:21:55,840
detection to because it's all happening

496
00:21:54,490 --> 00:21:56,190
in memory there's no actual executable

497
00:21:55,840 --> 00:21:58,679
on

498
00:21:56,190 --> 00:22:00,030
other than the native when msbuild but

499
00:21:58,680 --> 00:22:01,350
the problem with that is that's also

500
00:22:00,030 --> 00:22:02,970
starting to get detected because there's

501
00:22:01,350 --> 00:22:04,980
gonna be a child process of MS about

502
00:22:02,970 --> 00:22:07,700
that's not CSC once your application

503
00:22:04,980 --> 00:22:11,280
gets executed and then on top of that

504
00:22:07,700 --> 00:22:13,710
msbuild has an innate a a unique md5

505
00:22:11,280 --> 00:22:16,710
associated with its by an application

506
00:22:13,710 --> 00:22:19,140
and so another heuristic is whenever

507
00:22:16,710 --> 00:22:22,350
msbuild executes again a child process

508
00:22:19,140 --> 00:22:24,510
with its own native md5 and it's signed

509
00:22:22,350 --> 00:22:26,580
in this case it's gonna get caught but

510
00:22:24,510 --> 00:22:29,430
they have we have this thing called bit

511
00:22:26,580 --> 00:22:32,490
flopping so if you if you actually flop

512
00:22:29,430 --> 00:22:34,740
or flip the last two bits if you open a

513
00:22:32,490 --> 00:22:36,480
hex editor throw msbuild in it you

514
00:22:34,740 --> 00:22:38,970
actually flip the last two bits to some

515
00:22:36,480 --> 00:22:41,250
arbitrary bit it will change the md5 no

516
00:22:38,970 --> 00:22:43,020
still be assigned executable and that

517
00:22:41,250 --> 00:22:44,820
will actually also bypass a lot of

518
00:22:43,020 --> 00:22:47,639
detection so if you just use the native

519
00:22:44,820 --> 00:22:49,200
msbuild probably gonna get caught if you

520
00:22:47,640 --> 00:22:51,300
have your own in your back pocket where

521
00:22:49,200 --> 00:22:53,250
you did the bit flipping or bit flopping

522
00:22:51,300 --> 00:22:54,629
technique that i just mentioned you will

523
00:22:53,250 --> 00:22:58,650
probably get past a lot of detection

524
00:22:54,630 --> 00:23:00,390
it's these days next slide so I kind of

525
00:22:58,650 --> 00:23:03,630
want to make two distinctions here I

526
00:23:00,390 --> 00:23:05,790
mention msbuild register 32 powershell

527
00:23:03,630 --> 00:23:07,920
things like that these all fall under

528
00:23:05,790 --> 00:23:11,670
the category of executing a dotnet

529
00:23:07,920 --> 00:23:13,590
assembly specifically source code MSHDA

530
00:23:11,670 --> 00:23:17,130
wex kinase g a file which is going to

531
00:23:13,590 --> 00:23:19,169
use nets jscript with a simple HD a file

532
00:23:17,130 --> 00:23:21,270
and Miss bill like I mentioned cs proj

533
00:23:19,170 --> 00:23:23,430
and then these other two you can have a

534
00:23:21,270 --> 00:23:26,129
DLL but you don't actually have to call

535
00:23:23,430 --> 00:23:28,590
an unmanaged export whereas these ones

536
00:23:26,130 --> 00:23:31,290
will be here on the right everyone's

537
00:23:28,590 --> 00:23:32,790
probably familiar with net SH control

538
00:23:31,290 --> 00:23:34,830
dot XE control dot actually is your

539
00:23:32,790 --> 00:23:36,629
control panel so I'm gonna show you a

540
00:23:34,830 --> 00:23:38,340
way that we weaponize these native

541
00:23:36,630 --> 00:23:40,380
binaries to execute all of our shell

542
00:23:38,340 --> 00:23:42,840
code and I might actually have demos to

543
00:23:40,380 --> 00:23:44,820
do it as well but these do require those

544
00:23:42,840 --> 00:23:46,409
unmanaged exports that I mentioned that

545
00:23:44,820 --> 00:23:48,000
you have to call in order to execute

546
00:23:46,410 --> 00:23:50,040
your show code like I mentioned in one

547
00:23:48,000 --> 00:23:53,100
of the earlier sites next slide please

548
00:23:50,040 --> 00:23:55,470
so here's my demo again kind of hard to

549
00:23:53,100 --> 00:23:57,629
see but if you notice here this is my

550
00:23:55,470 --> 00:24:00,480
shell code I call an unmanaged export in

551
00:23:57,630 --> 00:24:03,930
this case called CPI applet I compile my

552
00:24:00,480 --> 00:24:06,720
DLL I'm gonna copy my DLL to desktop and

553
00:24:03,930 --> 00:24:08,730
I just have to rename the file extension

554
00:24:06,720 --> 00:24:09,789
to a Cpl file which is the file

555
00:24:08,730 --> 00:24:12,879
extension that

556
00:24:09,789 --> 00:24:15,279
a controller XE requires I double-click

557
00:24:12,879 --> 00:24:17,080
it it pops calc and that's all I wanted

558
00:24:15,279 --> 00:24:20,229
you and then I kind of look at the

559
00:24:17,080 --> 00:24:23,080
behavior in this case next slide please

560
00:24:20,229 --> 00:24:24,879
and I break it out here like I mentioned

561
00:24:23,080 --> 00:24:26,259
this is the exact same shellcode I just

562
00:24:24,879 --> 00:24:28,449
executed in the demo I just showed you

563
00:24:26,259 --> 00:24:30,519
and if you notice again I have to call

564
00:24:28,450 --> 00:24:32,229
Cpl applet which is the unmatched export

565
00:24:30,519 --> 00:24:33,940
required to take advantage of this and

566
00:24:32,229 --> 00:24:35,350
then I run my show code which in this

567
00:24:33,940 --> 00:24:37,539
case is basically four encoded shellcode

568
00:24:35,350 --> 00:24:38,350
and then I looked at process Explorer

569
00:24:37,539 --> 00:24:40,809
and I said okay what's actually

570
00:24:38,350 --> 00:24:42,580
happening so control dot eggsy again a

571
00:24:40,809 --> 00:24:46,149
native binary that you can use to

572
00:24:42,580 --> 00:24:49,658
execute your shellcode runs DLL 32 that

573
00:24:46,149 --> 00:24:50,978
Ben runs caltech C so two things to

574
00:24:49,659 --> 00:24:52,029
mention here because I've been harping

575
00:24:50,979 --> 00:24:54,820
on this all day

576
00:24:52,029 --> 00:24:58,239
one is command-line arguments so in this

577
00:24:54,820 --> 00:25:01,049
case it runs run DLL 32 entry point my

578
00:24:58,239 --> 00:25:04,389
specific Cpl file and it's a done deal

579
00:25:01,049 --> 00:25:06,668
this actually happens really often on

580
00:25:04,389 --> 00:25:09,008
any sort of legitimate Windows system

581
00:25:06,669 --> 00:25:11,559
because we've done this analysis for Fri

582
00:25:09,009 --> 00:25:12,970
HX appliance and it's hard to detect

583
00:25:11,559 --> 00:25:14,619
based on command-line arguments because

584
00:25:12,970 --> 00:25:16,720
again that exact command does happen

585
00:25:14,619 --> 00:25:18,309
actually pretty often so we're trying to

586
00:25:16,720 --> 00:25:21,190
find a way to actually get around that

587
00:25:18,309 --> 00:25:24,580
and the way we're doing that is parent

588
00:25:21,190 --> 00:25:27,460
to child process execution again control

589
00:25:24,580 --> 00:25:29,889
dot eggsy running run dll 32 with an

590
00:25:27,460 --> 00:25:31,509
arbitrary executable obviously when I'm

591
00:25:29,889 --> 00:25:33,129
doing this for reals I'm not gonna be

592
00:25:31,509 --> 00:25:34,749
executing calc right I'm gonna do like

593
00:25:33,129 --> 00:25:37,658
my actual shell code in this case it's

594
00:25:34,749 --> 00:25:40,330
the same our Dec Z so the interesting

595
00:25:37,659 --> 00:25:41,799
thing about this is the parent the child

596
00:25:40,330 --> 00:25:43,418
process will get me caught here and

597
00:25:41,799 --> 00:25:45,668
that's where I want to go back to the

598
00:25:43,419 --> 00:25:48,009
queue user apt shellcode injection if

599
00:25:45,669 --> 00:25:49,659
you do something like you user a PC

600
00:25:48,009 --> 00:25:51,849
shell code injection you inject into a

601
00:25:49,659 --> 00:25:53,859
separate process there will never be

602
00:25:51,849 --> 00:25:55,899
anything spawned under control dot exe

603
00:25:53,859 --> 00:25:58,090
in that situation so any sort of parent

604
00:25:55,899 --> 00:25:59,830
to child process behavior detection will

605
00:25:58,090 --> 00:26:01,840
be bypassed so that's definitely

606
00:25:59,830 --> 00:26:02,489
something important notes next slide

607
00:26:01,840 --> 00:26:05,439
please

608
00:26:02,489 --> 00:26:07,029
here's another example I have control

609
00:26:05,440 --> 00:26:09,759
dot write line Evan loves Texas cyber

610
00:26:07,029 --> 00:26:11,859
summit running my shell code a different

611
00:26:09,759 --> 00:26:14,429
entry point or a managed export in this

612
00:26:11,859 --> 00:26:18,158
case so which one is this one for right

613
00:26:14,429 --> 00:26:20,799
so I don't even rename the same executor

614
00:26:18,159 --> 00:26:22,480
or the same DLL I'm going to modify this

615
00:26:20,799 --> 00:26:23,560
registry key which is essentially will

616
00:26:22,480 --> 00:26:25,960
all of the

617
00:26:23,560 --> 00:26:27,790
Netta sage helpers are I'm gonna add one

618
00:26:25,960 --> 00:26:30,910
just based on a register created called

619
00:26:27,790 --> 00:26:33,310
Evan Pena I point it to my DLL I click

620
00:26:30,910 --> 00:26:36,970
ok and now I'm just gonna simply run NAT

621
00:26:33,310 --> 00:26:39,850
Sh again a native binary right and if

622
00:26:36,970 --> 00:26:42,190
you notice it executes it's my calc it

623
00:26:39,850 --> 00:26:45,639
also executes my string Evan loves Texas

624
00:26:42,190 --> 00:26:47,530
cyber summit all within net SH which

625
00:26:45,640 --> 00:26:49,060
again is a native binary so I can

626
00:26:47,530 --> 00:26:50,920
execute anything I want

627
00:26:49,060 --> 00:26:52,629
again using any one of these Lal bins if

628
00:26:50,920 --> 00:26:54,250
I use the same exact approach that I'm

629
00:26:52,630 --> 00:26:58,900
using for every single one of them I'm

630
00:26:54,250 --> 00:27:00,400
managed exports shellcode loader and and

631
00:26:58,900 --> 00:27:02,170
then just calling it the way we don't

632
00:27:00,400 --> 00:27:04,270
really would next slide please this

633
00:27:02,170 --> 00:27:06,940
one's even crazier again this is the

634
00:27:04,270 --> 00:27:09,940
registry Cree you can add any helper to

635
00:27:06,940 --> 00:27:12,220
it you can also run net SH add helper

636
00:27:09,940 --> 00:27:14,320
path to your dll to add the same helper

637
00:27:12,220 --> 00:27:15,580
this is not a good approach because

638
00:27:14,320 --> 00:27:18,220
they're gonna have command line

639
00:27:15,580 --> 00:27:19,480
arguments to adding a helper any sort of

640
00:27:18,220 --> 00:27:21,460
edr that's capturing command line

641
00:27:19,480 --> 00:27:23,020
arguments is going to capture this this

642
00:27:21,460 --> 00:27:25,270
command that you run in the in the

643
00:27:23,020 --> 00:27:27,580
command prompt so if you actually do it

644
00:27:25,270 --> 00:27:29,889
via the registry there's no command line

645
00:27:27,580 --> 00:27:32,740
arguments ever passed so if you actually

646
00:27:29,890 --> 00:27:35,770
look at this the command line is just

647
00:27:32,740 --> 00:27:38,110
net SH because I added Evan Evan Pena

648
00:27:35,770 --> 00:27:39,490
ended to this specific register key so

649
00:27:38,110 --> 00:27:41,139
how are you gonna detect on command line

650
00:27:39,490 --> 00:27:42,730
arguments much literally just net SH

651
00:27:41,140 --> 00:27:46,090
that's actually really difficult to do

652
00:27:42,730 --> 00:27:48,160
so again going back to parent to child

653
00:27:46,090 --> 00:27:50,590
process this is how you would get

654
00:27:48,160 --> 00:27:53,050
detected right there so one more time

655
00:27:50,590 --> 00:27:55,240
going back to queue user APC injection

656
00:27:53,050 --> 00:27:56,950
you will not get detected because it

657
00:27:55,240 --> 00:27:59,020
will be injected into a separate process

658
00:27:56,950 --> 00:28:00,760
that will end so net SH will never have

659
00:27:59,020 --> 00:28:03,160
a child process in this specific case if

660
00:28:00,760 --> 00:28:04,840
you're using queue user APC I'm hoping

661
00:28:03,160 --> 00:28:07,000
that makes sense that I'm trying to say

662
00:28:04,840 --> 00:28:08,350
it a lot but I just want to keep harping

663
00:28:07,000 --> 00:28:11,370
on it because that's a really important

664
00:28:08,350 --> 00:28:14,230
concept to understand next slide please

665
00:28:11,370 --> 00:28:16,120
so again this is kind of just going over

666
00:28:14,230 --> 00:28:18,400
everything I mentioned this is probably

667
00:28:16,120 --> 00:28:19,179
your best practice here use a PC for

668
00:28:18,400 --> 00:28:21,940
injection

669
00:28:19,180 --> 00:28:23,260
again using cue user a PC XOR plus

670
00:28:21,940 --> 00:28:25,090
concatenation for your shellcode

671
00:28:23,260 --> 00:28:26,830
handling so when you create that same

672
00:28:25,090 --> 00:28:29,320
shellcode runner that I've been reusing

673
00:28:26,830 --> 00:28:31,090
over and over again XOR it use

674
00:28:29,320 --> 00:28:32,439
concatenation to reduce entropy and

675
00:28:31,090 --> 00:28:33,959
you're likely bypass a lot of the

676
00:28:32,440 --> 00:28:36,400
sections just based on that alone

677
00:28:33,960 --> 00:28:37,389
combine these techniques and make your

678
00:28:36,400 --> 00:28:38,919
favorite all

679
00:28:37,389 --> 00:28:40,658
all the things type the shell code

680
00:28:38,919 --> 00:28:43,299
injection so if you look over here

681
00:28:40,659 --> 00:28:45,039
I'm calling different different

682
00:28:43,299 --> 00:28:46,869
unmanaged exports and I'm using the same

683
00:28:45,039 --> 00:28:48,099
function the same function is that shell

684
00:28:46,869 --> 00:28:50,109
code injector that kind of showed it at

685
00:28:48,099 --> 00:28:52,059
the beginning all you have to do is add

686
00:28:50,109 --> 00:28:54,129
a different unmanaged export and the

687
00:28:52,059 --> 00:28:55,719
binary itself is gonna handle it for you

688
00:28:54,129 --> 00:28:58,149
because it's looking for that entry

689
00:28:55,719 --> 00:29:00,249
point within the DLL to actually execute

690
00:28:58,149 --> 00:29:02,829
your shell code so I have an all-in-one

691
00:29:00,249 --> 00:29:06,249
script right or in this case source code

692
00:29:02,829 --> 00:29:08,168
that I compile it is then a DLL and any

693
00:29:06,249 --> 00:29:09,969
one of the ones I showed you that we're

694
00:29:08,169 --> 00:29:12,999
taking an advantage of control net SH

695
00:29:09,969 --> 00:29:15,039
install util reg azzam any one of those

696
00:29:12,999 --> 00:29:16,599
will end up finding it the entry point

697
00:29:15,039 --> 00:29:19,989
that it wants and then it's going to

698
00:29:16,599 --> 00:29:21,729
execute my shell cook so there's a lot

699
00:29:19,989 --> 00:29:24,669
more obviously than what she's shown in

700
00:29:21,729 --> 00:29:30,700
here this is just a small example of one

701
00:29:24,669 --> 00:29:32,499
that I have in my source code that Lal

702
00:29:30,700 --> 00:29:34,599
bins link that I put in the one of the

703
00:29:32,499 --> 00:29:36,629
earlier slides that has pretty much a

704
00:29:34,599 --> 00:29:39,639
list of all the current ones right now

705
00:29:36,629 --> 00:29:41,349
exactly let him do the research and then

706
00:29:39,639 --> 00:29:43,178
you just kind of you know spin off

707
00:29:41,349 --> 00:29:44,619
whatever you want from it and it still

708
00:29:43,179 --> 00:29:46,690
works all the time it's gonna continue

709
00:29:44,619 --> 00:29:48,549
working for a long time that's exactly

710
00:29:46,690 --> 00:29:50,889
what you should do you're doing in Casey

711
00:29:48,549 --> 00:29:52,899
Smith otherwise known as sub T he's kind

712
00:29:50,889 --> 00:29:55,149
of the pioneer behind a lot of this

713
00:29:52,899 --> 00:29:56,918
research we do some of that internally

714
00:29:55,149 --> 00:29:58,508
at mania fire which we haven't released

715
00:29:56,919 --> 00:29:59,950
because we have to use it for some of

716
00:29:58,509 --> 00:30:01,389
our covert operations but a lot of the

717
00:29:59,950 --> 00:30:02,440
ones that are public you can still take

718
00:30:01,389 --> 00:30:04,570
advantage of and get away with

719
00:30:02,440 --> 00:30:08,139
everything if you're using these methods

720
00:30:04,570 --> 00:30:10,119
here next slide so the next thing I want

721
00:30:08,139 --> 00:30:11,949
to talk about is persistence so if you

722
00:30:10,119 --> 00:30:13,599
notice what what I'm kind of doing is

723
00:30:11,950 --> 00:30:15,789
again I'm building it out you have your

724
00:30:13,599 --> 00:30:18,099
shellcode payload now and then you can

725
00:30:15,789 --> 00:30:19,119
use that for lateral movement if you

726
00:30:18,099 --> 00:30:20,619
want which we're going to talk about or

727
00:30:19,119 --> 00:30:22,449
you can use it for persistence which

728
00:30:20,619 --> 00:30:24,820
I'll talk about in a moment as well next

729
00:30:22,450 --> 00:30:27,249
slide so the first one I want to talk

730
00:30:24,820 --> 00:30:28,958
about our user login scripts I have a

731
00:30:27,249 --> 00:30:31,839
link to where this was originally posted

732
00:30:28,959 --> 00:30:35,109
in terms of research but essentially

733
00:30:31,839 --> 00:30:37,749
there's this HK current user environment

734
00:30:35,109 --> 00:30:40,119
path that you can't that has this user

735
00:30:37,749 --> 00:30:41,799
in an NPR logon script this doesn't

736
00:30:40,119 --> 00:30:44,619
exist by default you actually have to

737
00:30:41,799 --> 00:30:48,668
create it so if you create this specific

738
00:30:44,619 --> 00:30:50,439
key and you add a script let file or in

739
00:30:48,669 --> 00:30:51,160
this case a VBS it could even be J

740
00:30:50,440 --> 00:30:53,860
script if you want

741
00:30:51,160 --> 00:30:55,870
js4 VBS any sort of script file and you

742
00:30:53,860 --> 00:30:57,310
pass it or you add it to that specific

743
00:30:55,870 --> 00:31:00,310
key which we're adding here with this

744
00:30:57,310 --> 00:31:02,889
one command then whenever the user logs

745
00:31:00,310 --> 00:31:05,080
in it's gonna execute this the reason

746
00:31:02,890 --> 00:31:07,120
why I like this a lot is because if you

747
00:31:05,080 --> 00:31:08,980
get on a system especially an initial

748
00:31:07,120 --> 00:31:11,379
system and you don't have system level

749
00:31:08,980 --> 00:31:13,750
privileges or local admin you're under

750
00:31:11,380 --> 00:31:15,600
current user so you can still do this as

751
00:31:13,750 --> 00:31:20,260
a real quick win persistent script

752
00:31:15,600 --> 00:31:22,060
persistence technique now the other

753
00:31:20,260 --> 00:31:24,370
thing I want to mention is a lot of

754
00:31:22,060 --> 00:31:25,899
people say oh but it's the registry

755
00:31:24,370 --> 00:31:27,879
everyone looks at the register for

756
00:31:25,900 --> 00:31:30,460
persistence you know you're gonna get

757
00:31:27,880 --> 00:31:33,580
caught the truth is that's not true it's

758
00:31:30,460 --> 00:31:35,710
actually very difficult to do real-time

759
00:31:33,580 --> 00:31:38,020
detection in the registry because

760
00:31:35,710 --> 00:31:39,910
there's so much activity going on now I

761
00:31:38,020 --> 00:31:42,100
will give you this if you get caught by

762
00:31:39,910 --> 00:31:44,140
something else and someone's doing a

763
00:31:42,100 --> 00:31:46,389
live response analysis or forensics on

764
00:31:44,140 --> 00:31:48,550
that system then you may get caught

765
00:31:46,390 --> 00:31:49,960
because they have an own set of things

766
00:31:48,550 --> 00:31:52,240
that they're gonna look for a person for

767
00:31:49,960 --> 00:31:53,650
persistence but in real time you

768
00:31:52,240 --> 00:31:56,470
probably won't get caught at all because

769
00:31:53,650 --> 00:31:58,000
again real-time detection with the

770
00:31:56,470 --> 00:32:00,820
registry is difficult especially if

771
00:31:58,000 --> 00:32:02,560
you're using unique techniques such as

772
00:32:00,820 --> 00:32:04,149
the user in it one for example it's not

773
00:32:02,560 --> 00:32:06,659
just a registry run key this is likely

774
00:32:04,150 --> 00:32:10,780
something that it's not as well known

775
00:32:06,660 --> 00:32:12,280
because it's just not as much as public

776
00:32:10,780 --> 00:32:14,440
that's like the only link I've really

777
00:32:12,280 --> 00:32:16,389
found to this so that's why it's really

778
00:32:14,440 --> 00:32:19,470
important to note it's really easy use

779
00:32:16,390 --> 00:32:21,760
and very effective now this right here

780
00:32:19,470 --> 00:32:23,950
this is where you're gonna get caught

781
00:32:21,760 --> 00:32:25,420
remember what I mentioned like a hundred

782
00:32:23,950 --> 00:32:28,900
times now command-line arguments right

783
00:32:25,420 --> 00:32:30,940
reg add and then certain registry keys

784
00:32:28,900 --> 00:32:32,890
will get you caught so we don't like to

785
00:32:30,940 --> 00:32:35,350
run reg add in our red team engagements

786
00:32:32,890 --> 00:32:37,330
we like to use things like going back to

787
00:32:35,350 --> 00:32:39,370
the powershell we don't use powershell

788
00:32:37,330 --> 00:32:42,220
for invoke expression or encoded command

789
00:32:39,370 --> 00:32:43,570
but we may use power show to call WMI to

790
00:32:42,220 --> 00:32:44,680
add a register key because there's

791
00:32:43,570 --> 00:32:46,689
actually no command-line arguments

792
00:32:44,680 --> 00:32:48,730
around that right now but what says say

793
00:32:46,690 --> 00:32:51,010
they do have command-line arguments

794
00:32:48,730 --> 00:32:52,780
whenever that time comes and they are

795
00:32:51,010 --> 00:32:54,910
detecting registry activity based on

796
00:32:52,780 --> 00:32:56,500
command-line arguments only what you

797
00:32:54,910 --> 00:32:58,990
could do still with power shows use

798
00:32:56,500 --> 00:33:00,730
power pick which is unmanaged power sell

799
00:32:58,990 --> 00:33:03,010
that avoids any sort of command-line

800
00:33:00,730 --> 00:33:05,170
arguments from PowerShell itself again

801
00:33:03,010 --> 00:33:07,660
power pick you can google it it's public

802
00:33:05,170 --> 00:33:10,390
out there right now there's its it has a

803
00:33:07,660 --> 00:33:11,770
way to get around any sort of PowerShell

804
00:33:10,390 --> 00:33:13,960
command line arguments because it's not

805
00:33:11,770 --> 00:33:16,000
actually using PowerShell eggsy it's

806
00:33:13,960 --> 00:33:17,290
using unmanaged PowerShell to call it

807
00:33:16,000 --> 00:33:20,860
which is essentially the system to

808
00:33:17,290 --> 00:33:26,080
automation library within the windows

809
00:33:20,860 --> 00:33:27,490
API this one is a really cool

810
00:33:26,080 --> 00:33:31,360
persistence technique because it's also

811
00:33:27,490 --> 00:33:34,120
vulnerability anytime you have unquoted

812
00:33:31,360 --> 00:33:35,949
service pass within the service you can

813
00:33:34,120 --> 00:33:38,439
modify that service to execute your

814
00:33:35,950 --> 00:33:40,060
service binary before or even you know

815
00:33:38,440 --> 00:33:42,670
to replace the one that it's currently

816
00:33:40,060 --> 00:33:46,000
using so this is a really good example

817
00:33:42,670 --> 00:33:47,320
of an unquoted service path for those of

818
00:33:46,000 --> 00:33:49,630
you who aren't familiar with this the

819
00:33:47,320 --> 00:33:51,790
way Windows works is it has to have a

820
00:33:49,630 --> 00:33:54,040
quote around the full path or won't know

821
00:33:51,790 --> 00:33:55,149
where the path is every space that it

822
00:33:54,040 --> 00:33:57,970
has it's going to think it's an

823
00:33:55,150 --> 00:34:01,450
executable so for example in this one if

824
00:33:57,970 --> 00:34:03,430
I can write to C and I put C dot program

825
00:34:01,450 --> 00:34:05,740
or C program dot eggsy it's going to try

826
00:34:03,430 --> 00:34:08,050
to call this first if it doesn't exist

827
00:34:05,740 --> 00:34:09,850
and it's gonna try the next space just

828
00:34:08,050 --> 00:34:11,470
add an egg Z it's going to try to call

829
00:34:09,850 --> 00:34:13,810
that if that doesn't exist then it will

830
00:34:11,469 --> 00:34:15,009
call the actual service that I wants so

831
00:34:13,810 --> 00:34:18,009
you could take advantage of that and

832
00:34:15,010 --> 00:34:20,470
abuse that by writing your executable to

833
00:34:18,010 --> 00:34:22,210
disk if you want to and call yours

834
00:34:20,469 --> 00:34:24,159
before it does before it calls the

835
00:34:22,210 --> 00:34:25,179
legitimate one and the reason why this

836
00:34:24,159 --> 00:34:27,489
is so cool

837
00:34:25,179 --> 00:34:29,530
no command-line arguments you're not

838
00:34:27,489 --> 00:34:31,449
modifying a service you're not adding

839
00:34:29,530 --> 00:34:32,980
any register keys you're really not

840
00:34:31,449 --> 00:34:35,080
doing anything but saving a file to disk

841
00:34:32,980 --> 00:34:37,360
right so there's no real-time detection

842
00:34:35,080 --> 00:34:39,100
on this kind of activity it's also again

843
00:34:37,360 --> 00:34:40,960
a vulnerability it could be used for

844
00:34:39,100 --> 00:34:44,049
privilege escalation as well depending

845
00:34:40,960 --> 00:34:45,668
on if you're not system already and this

846
00:34:44,050 --> 00:34:48,220
service is running as system and you can

847
00:34:45,668 --> 00:34:49,449
write to that specific path so that's

848
00:34:48,219 --> 00:34:49,959
another really good technique for that

849
00:34:49,449 --> 00:34:53,199
as well

850
00:34:49,960 --> 00:34:56,620
next slide please so here's just an

851
00:34:53,199 --> 00:34:59,560
example of doing this for persistence as

852
00:34:56,620 --> 00:35:01,960
well you can automate this whole process

853
00:34:59,560 --> 00:35:04,420
by using powerup it's a it's it's within

854
00:35:01,960 --> 00:35:07,150
power sploit it's an open source public

855
00:35:04,420 --> 00:35:08,770
on github and what it does is it looks

856
00:35:07,150 --> 00:35:11,080
for any unquoted service pass that you

857
00:35:08,770 --> 00:35:12,820
may have it finds any ones that you can

858
00:35:11,080 --> 00:35:16,180
modify it even will create a service

859
00:35:12,820 --> 00:35:18,970
binary for you for warning then if you

860
00:35:16,180 --> 00:35:20,618
just use whatever is built in to powerup

861
00:35:18,970 --> 00:35:22,810
it's gonna create a user called John and

862
00:35:20,619 --> 00:35:26,140
I think the password is password but

863
00:35:22,810 --> 00:35:27,279
it's gonna do like a net user add and

864
00:35:26,140 --> 00:35:28,598
again it's going to do it via

865
00:35:27,280 --> 00:35:29,980
command-line arguments and that will

866
00:35:28,599 --> 00:35:31,780
also get you caught either one of two

867
00:35:29,980 --> 00:35:33,130
ways either one command-line arguments

868
00:35:31,780 --> 00:35:34,450
because no one's gonna be adding local

869
00:35:33,130 --> 00:35:37,030
users to your account on an enterprise

870
00:35:34,450 --> 00:35:38,890
network number two the event log of a

871
00:35:37,030 --> 00:35:40,750
new user was created on that system and

872
00:35:38,890 --> 00:35:42,400
added to the local admins group that

873
00:35:40,750 --> 00:35:43,690
rarely ever happens legitimately as well

874
00:35:42,400 --> 00:35:45,490
at least it shouldn't again in an

875
00:35:43,690 --> 00:35:47,800
enterprise environment so those are all

876
00:35:45,490 --> 00:35:50,259
the ways are gonna be detected next so

877
00:35:47,800 --> 00:35:52,900
but you can modify the payload as

878
00:35:50,260 --> 00:35:55,810
opposed to adding a user to execute your

879
00:35:52,900 --> 00:35:57,670
arbitrary or whatever it is you want so

880
00:35:55,810 --> 00:35:59,440
you can use a net sh example I gave you

881
00:35:57,670 --> 00:36:01,150
you can use a Cpl file like the one I

882
00:35:59,440 --> 00:36:02,829
showed you earlier and there's a lot of

883
00:36:01,150 --> 00:36:05,230
other low Bane's examples that you would

884
00:36:02,829 --> 00:36:08,170
use for your payload execution next

885
00:36:05,230 --> 00:36:10,569
slide so here's an example of the

886
00:36:08,170 --> 00:36:12,970
command processor one if you notice I

887
00:36:10,569 --> 00:36:16,930
called CMD nothing happens and then I

888
00:36:12,970 --> 00:36:19,569
exit CMD and then I show you this is my

889
00:36:16,930 --> 00:36:24,240
orange dot bat file if I just add a

890
00:36:19,569 --> 00:36:27,099
string to this specific registry key in

891
00:36:24,240 --> 00:36:29,500
this case it's called auto run and then

892
00:36:27,099 --> 00:36:31,900
I'm going to put it to my you know

893
00:36:29,500 --> 00:36:34,480
pointed to my bat file and now I call

894
00:36:31,900 --> 00:36:37,540
CMD it's gonna execute whatever is in my

895
00:36:34,480 --> 00:36:39,880
bat file in this case so you can use

896
00:36:37,540 --> 00:36:42,310
other persistence to actually take

897
00:36:39,880 --> 00:36:44,980
advantage of this so for example if in

898
00:36:42,310 --> 00:36:47,828
the user in it Enter key you just call

899
00:36:44,980 --> 00:36:49,420
CMD you know no one's gonna know the

900
00:36:47,829 --> 00:36:51,010
difference they're gonna be ok CMD is

901
00:36:49,420 --> 00:36:52,480
running what does it really matter and

902
00:36:51,010 --> 00:36:54,400
the reason why it matters is because

903
00:36:52,480 --> 00:36:55,869
there may be other registry keys that

904
00:36:54,400 --> 00:36:57,880
you're taking advantage of to actually

905
00:36:55,869 --> 00:36:58,980
execute your payload does that make

906
00:36:57,880 --> 00:37:02,800
sense

907
00:36:58,980 --> 00:37:05,230
ok next slide please so those are kind

908
00:37:02,800 --> 00:37:07,119
of our de-facto lat persistence

909
00:37:05,230 --> 00:37:08,530
techniques that we're using right now so

910
00:37:07,119 --> 00:37:13,720
the next thing I want to kind of go into

911
00:37:08,530 --> 00:37:16,060
is lateral movement two main things that

912
00:37:13,720 --> 00:37:19,060
we use for a lot of movement our DP

913
00:37:16,060 --> 00:37:21,400
blends in with traffic use legitimately

914
00:37:19,060 --> 00:37:22,630
by every sysadmin pretty much it's very

915
00:37:21,400 --> 00:37:26,050
difficult to distinguish between

916
00:37:22,630 --> 00:37:29,069
malicious RDP and a legitimate RTP the

917
00:37:26,050 --> 00:37:32,200
way that we see a lot of defenders

918
00:37:29,069 --> 00:37:34,930
actually detect on this is based on big

919
00:37:32,200 --> 00:37:37,270
data analytics so you're gonna have a

920
00:37:34,930 --> 00:37:39,399
sim you're gonna have a baseline of what

921
00:37:37,270 --> 00:37:41,560
users are logging into what and then

922
00:37:39,400 --> 00:37:43,210
you're gonna detect on any sort of a

923
00:37:41,560 --> 00:37:44,890
user that's logging into a server that's

924
00:37:43,210 --> 00:37:47,230
never logged in that server before that

925
00:37:44,890 --> 00:37:48,759
might be a detection now I only see very

926
00:37:47,230 --> 00:37:50,260
mature clients actually have this

927
00:37:48,760 --> 00:37:52,900
implemented it's rare that I'll actually

928
00:37:50,260 --> 00:37:55,060
see this deployed in real life I've done

929
00:37:52,900 --> 00:37:56,740
several hundred red teams in my career

930
00:37:55,060 --> 00:37:58,240
and I think maybe like five have

931
00:37:56,740 --> 00:37:59,950
actually implemented that sort of rule

932
00:37:58,240 --> 00:38:02,259
but it was very effective for them I

933
00:37:59,950 --> 00:38:04,810
think it's a difficult road to apply so

934
00:38:02,260 --> 00:38:07,300
the next one is is W mine which is again

935
00:38:04,810 --> 00:38:09,040
built into Windows it's it's gonna be

936
00:38:07,300 --> 00:38:11,500
enabled on every single window system

937
00:38:09,040 --> 00:38:12,339
there's likely gonna be no firewall ACL

938
00:38:11,500 --> 00:38:14,079
is gonna be blocking you from

939
00:38:12,339 --> 00:38:15,970
communicating with other systems and

940
00:38:14,079 --> 00:38:17,140
it's a great way to scale your

941
00:38:15,970 --> 00:38:20,169
environment because you can actually

942
00:38:17,140 --> 00:38:21,549
wrap a list of systems that you want to

943
00:38:20,170 --> 00:38:24,339
execute whatever it is that you want on

944
00:38:21,550 --> 00:38:26,230
and just call W my to automate that wrap

945
00:38:24,339 --> 00:38:27,910
whereas already pays more of a GUI based

946
00:38:26,230 --> 00:38:29,950
thing you know you can already pay into

947
00:38:27,910 --> 00:38:32,109
a single system single system it's

948
00:38:29,950 --> 00:38:34,419
difficult to scale RDP when it comes to

949
00:38:32,109 --> 00:38:37,328
command execution which is why again we

950
00:38:34,420 --> 00:38:39,430
use WMI for scaling but if you want to

951
00:38:37,329 --> 00:38:42,460
do like a one-off login access an

952
00:38:39,430 --> 00:38:44,290
application or just kind of do some

953
00:38:42,460 --> 00:38:45,819
looking around and you're on an internal

954
00:38:44,290 --> 00:38:48,220
network already or you're using a socks

955
00:38:45,819 --> 00:38:50,430
proxy to tunnel into a network RDP is a

956
00:38:48,220 --> 00:38:54,430
really good way of doing that next slide

957
00:38:50,430 --> 00:38:56,828
so there's a few things I want to point

958
00:38:54,430 --> 00:38:59,200
out when it comes to W mine I like to

959
00:38:56,829 --> 00:39:01,390
use whimmy implant which I'm a code

960
00:38:59,200 --> 00:39:03,189
developer of its open-source myself and

961
00:39:01,390 --> 00:39:05,259
Chris transfer developed us released it

962
00:39:03,190 --> 00:39:07,780
to the public and what's nice about this

963
00:39:05,260 --> 00:39:10,390
is it gives you output like in this case

964
00:39:07,780 --> 00:39:12,640
me me cats output back to the user

965
00:39:10,390 --> 00:39:14,230
a lot of people use W my and you get

966
00:39:12,640 --> 00:39:15,970
like process was executed but you don't

967
00:39:14,230 --> 00:39:18,250
know what happens right like well with

968
00:39:15,970 --> 00:39:20,919
Whitney implant you'll get any sort of

969
00:39:18,250 --> 00:39:23,170
output back and this only comes into

970
00:39:20,920 --> 00:39:24,940
play when you want output I would never

971
00:39:23,170 --> 00:39:27,880
use women implant if you don't really

972
00:39:24,940 --> 00:39:29,710
care about output so Wayne would you not

973
00:39:27,880 --> 00:39:31,630
care about output when you just want to

974
00:39:29,710 --> 00:39:33,369
execute your payload and get a call back

975
00:39:31,630 --> 00:39:34,359
you know at that point you can operate

976
00:39:33,369 --> 00:39:35,770
through your back door why would you

977
00:39:34,359 --> 00:39:36,700
care about the outputs gonna say process

978
00:39:35,770 --> 00:39:38,740
executed you're good to go

979
00:39:36,700 --> 00:39:40,779
but if you actually care about output

980
00:39:38,740 --> 00:39:41,770
like a me me cats for example this is

981
00:39:40,780 --> 00:39:44,010
where you may want to use something like

982
00:39:41,770 --> 00:39:45,640
when the implant we have a remote posh

983
00:39:44,010 --> 00:39:48,250
function that like

984
00:39:45,640 --> 00:39:50,470
to execute arbitrary PowerShell scripts

985
00:39:48,250 --> 00:39:53,319
on the remote system now what's even

986
00:39:50,470 --> 00:39:56,259
cooler about this is that it doesn't

987
00:39:53,319 --> 00:39:58,720
just save invoke mimikatz on the remote

988
00:39:56,260 --> 00:40:01,660
system using SMB if you look at a lot of

989
00:39:58,720 --> 00:40:04,808
these powershell WMI scripts they're

990
00:40:01,660 --> 00:40:07,299
actually using SMB to push whatever

991
00:40:04,809 --> 00:40:10,569
script i want and then using WMI to

992
00:40:07,299 --> 00:40:12,700
execute that script that's not true WMI

993
00:40:10,569 --> 00:40:14,470
okay that's like kind of using a few

994
00:40:12,700 --> 00:40:14,980
protocols and itself to actually make it

995
00:40:14,470 --> 00:40:17,288
happen

996
00:40:14,980 --> 00:40:19,809
well with invoke I'm sorry with winning

997
00:40:17,289 --> 00:40:23,319
in plant it is pure WMI what this does

998
00:40:19,809 --> 00:40:27,010
is it actually saves this PowerShell

999
00:40:23,319 --> 00:40:29,529
script in an attribute of an existing W

1000
00:40:27,010 --> 00:40:32,079
my class on the remote system fully

1001
00:40:29,529 --> 00:40:34,960
encrypted and then it uses WMI to

1002
00:40:32,079 --> 00:40:37,359
decrypt it pull the data from the class

1003
00:40:34,960 --> 00:40:39,549
itself and then execute the PowerShell

1004
00:40:37,359 --> 00:40:41,769
script from there and then any sort of

1005
00:40:39,549 --> 00:40:44,440
output is also saved to that class again

1006
00:40:41,769 --> 00:40:46,180
an existing class with n W my and then

1007
00:40:44,440 --> 00:40:48,519
pull back so nothing's actually saved on

1008
00:40:46,180 --> 00:40:50,710
this per say it's saved within the W my

1009
00:40:48,519 --> 00:40:52,598
database and then it's also coming back

1010
00:40:50,710 --> 00:40:55,390
and then deletes it afterwards so this

1011
00:40:52,599 --> 00:40:57,369
is a very purist W my tool that you can

1012
00:40:55,390 --> 00:40:58,960
use again open source and I highly

1013
00:40:57,369 --> 00:41:03,039
recommend you use it when you want user

1014
00:40:58,960 --> 00:41:06,400
output next line W my C is another

1015
00:41:03,039 --> 00:41:09,640
really good one built into Windows so

1016
00:41:06,400 --> 00:41:11,140
this is something that is an advantage

1017
00:41:09,640 --> 00:41:13,990
for you because again it's built into

1018
00:41:11,140 --> 00:41:16,930
Windows you can pass it a system you can

1019
00:41:13,990 --> 00:41:18,729
do process call create in this case if

1020
00:41:16,930 --> 00:41:21,368
you want to execute whatever it is that

1021
00:41:18,730 --> 00:41:23,410
you want so in the example I gave you

1022
00:41:21,369 --> 00:41:28,539
before if you're kind of thinking about

1023
00:41:23,410 --> 00:41:30,848
it you can use W mine to add a new a new

1024
00:41:28,539 --> 00:41:32,769
registry key for the notice H helper for

1025
00:41:30,849 --> 00:41:36,849
example and then you can use something

1026
00:41:32,769 --> 00:41:38,709
like again W my two or even SMB to push

1027
00:41:36,849 --> 00:41:41,349
your DLL wherever it is that you want on

1028
00:41:38,710 --> 00:41:43,180
disk and then you can use W my C process

1029
00:41:41,349 --> 00:41:45,039
called create just to call Ned SH and I

1030
00:41:43,180 --> 00:41:47,589
will execute your DLL just like in the

1031
00:41:45,039 --> 00:41:49,029
demo I showed you earlier so that's kind

1032
00:41:47,589 --> 00:41:51,910
of a unique way of doing process

1033
00:41:49,029 --> 00:41:54,130
execution using wmic again I don't

1034
00:41:51,910 --> 00:41:56,799
prefer to use this method if I don't

1035
00:41:54,130 --> 00:41:59,450
have to because of again command and

1036
00:41:56,799 --> 00:42:01,609
arguments wmic process called

1037
00:41:59,450 --> 00:42:03,500
easy command an argument to detect on

1038
00:42:01,609 --> 00:42:04,848
and again a lot of video products are

1039
00:42:03,500 --> 00:42:06,619
detecting on this so it's not my

1040
00:42:04,849 --> 00:42:08,569
preferred way but if you're really

1041
00:42:06,619 --> 00:42:09,950
restricted to just windows you're on

1042
00:42:08,569 --> 00:42:11,690
that system you have to move laterally

1043
00:42:09,950 --> 00:42:13,578
and you want to execute something on the

1044
00:42:11,690 --> 00:42:14,030
remote system wmic is a decent way of

1045
00:42:13,579 --> 00:42:17,240
doing it

1046
00:42:14,030 --> 00:42:19,099
thanks like please so the next one I

1047
00:42:17,240 --> 00:42:21,618
want to mention is dubby dubby my exec

1048
00:42:19,099 --> 00:42:22,880
which is built into any cali vm for

1049
00:42:21,619 --> 00:42:25,670
those of you familiar with cali the

1050
00:42:22,880 --> 00:42:28,520
reason why i will like to use when my

1051
00:42:25,670 --> 00:42:32,180
exec is because of two things one it

1052
00:42:28,520 --> 00:42:33,799
supports fast the hash and two it avoids

1053
00:42:32,180 --> 00:42:35,359
command-line arguments if you're using a

1054
00:42:33,799 --> 00:42:37,880
socks proxy to tunnel into an

1055
00:42:35,359 --> 00:42:39,319
environment if you use a socks proxy to

1056
00:42:37,880 --> 00:42:41,990
tunnel into environment and you're

1057
00:42:39,319 --> 00:42:44,630
actually executing your commands in this

1058
00:42:41,990 --> 00:42:46,819
case using w my exec to execute a

1059
00:42:44,630 --> 00:42:48,200
process on the remote system there's no

1060
00:42:46,819 --> 00:42:50,210
command-line arguments because you're

1061
00:42:48,200 --> 00:42:51,740
doing it from your attacker system so

1062
00:42:50,210 --> 00:42:53,720
that's why it's a really good tradecraft

1063
00:42:51,740 --> 00:42:55,578
to use a socks proxy to tunnel into an

1064
00:42:53,720 --> 00:42:57,140
environment in this case and you can

1065
00:42:55,579 --> 00:42:58,520
push your dll's or whatever you want

1066
00:42:57,140 --> 00:43:00,950
using the law bins method that i

1067
00:42:58,520 --> 00:43:02,930
mentioned earlier and then just use w my

1068
00:43:00,950 --> 00:43:04,460
exec to actually execute whatever it is

1069
00:43:02,930 --> 00:43:07,040
that you want to execute in this case i

1070
00:43:04,460 --> 00:43:09,170
don't like to use the default when the

1071
00:43:07,040 --> 00:43:12,020
exec because of all of this right here

1072
00:43:09,170 --> 00:43:14,450
it executes so w my process which is the

1073
00:43:12,020 --> 00:43:16,759
first log in its gonna write the process

1074
00:43:14,450 --> 00:43:18,410
output into the admin dollar sign which

1075
00:43:16,760 --> 00:43:20,210
in a randomized file which is another

1076
00:43:18,410 --> 00:43:22,848
heuristic and then it's going to read

1077
00:43:20,210 --> 00:43:24,950
this is actually one two three logins at

1078
00:43:22,849 --> 00:43:27,980
this point it's gonna read the file from

1079
00:43:24,950 --> 00:43:30,290
the admin dollar using SMB and then it's

1080
00:43:27,980 --> 00:43:31,730
gonna delete the file afterwards and

1081
00:43:30,290 --> 00:43:34,790
it's gonna have an interactive command

1082
00:43:31,730 --> 00:43:37,010
prompt so this the reason it's doing

1083
00:43:34,790 --> 00:43:39,079
this right here is because it's going to

1084
00:43:37,010 --> 00:43:40,970
give you output it's gonna be like if

1085
00:43:39,079 --> 00:43:42,680
you use PS exec for example and you have

1086
00:43:40,970 --> 00:43:44,410
like an interactive command prompt

1087
00:43:42,680 --> 00:43:49,009
that's exactly what this does by default

1088
00:43:44,410 --> 00:43:51,859
however if you use the no output option

1089
00:43:49,010 --> 00:43:53,750
within when the exec you won't have that

1090
00:43:51,859 --> 00:43:55,369
interactive command shell it's gonna do

1091
00:43:53,750 --> 00:43:56,780
something very similar to what women

1092
00:43:55,369 --> 00:43:58,790
does or wmic

1093
00:43:56,780 --> 00:44:00,650
it where it executes something and then

1094
00:43:58,790 --> 00:44:03,500
returns a code saying it executed

1095
00:44:00,650 --> 00:44:06,319
successfully or it didn't so next slide

1096
00:44:03,500 --> 00:44:08,630
please the bottom line in this case is

1097
00:44:06,319 --> 00:44:11,210
you can use women exec with that no

1098
00:44:08,630 --> 00:44:13,060
output you can pass the hash if you want

1099
00:44:11,210 --> 00:44:15,130
you can pass it whatever payload

1100
00:44:13,060 --> 00:44:16,720
you want in this case I don't recommend

1101
00:44:15,130 --> 00:44:19,180
this one again command-line arguments

1102
00:44:16,720 --> 00:44:20,980
encoded command I would recommend one of

1103
00:44:19,180 --> 00:44:23,740
those loeben techniques that I just

1104
00:44:20,980 --> 00:44:25,600
showed you about to execute your process

1105
00:44:23,740 --> 00:44:27,100
but the reason why it doesn't matter

1106
00:44:25,600 --> 00:44:28,690
here is because I don't care about

1107
00:44:27,100 --> 00:44:29,620
output if I want to just execute my

1108
00:44:28,690 --> 00:44:31,660
backdoor payload

1109
00:44:29,620 --> 00:44:33,339
I'll interact with my beacon in this

1110
00:44:31,660 --> 00:44:34,779
case through whatever interface I'm

1111
00:44:33,340 --> 00:44:38,980
using Metasploit called watch strike

1112
00:44:34,780 --> 00:44:40,480
empire your custom rat so again if I

1113
00:44:38,980 --> 00:44:42,940
want output I'm going to use when the

1114
00:44:40,480 --> 00:44:44,920
implant if I want something like just

1115
00:44:42,940 --> 00:44:47,020
code execution this is what I'm gonna

1116
00:44:44,920 --> 00:44:49,540
use again with the no output switch next

1117
00:44:47,020 --> 00:44:50,950
slide please so that's kind of the

1118
00:44:49,540 --> 00:44:53,650
bottom line is what I mentioned again

1119
00:44:50,950 --> 00:44:56,080
when we implant you want output back use

1120
00:44:53,650 --> 00:44:57,820
women exec with no output or women but

1121
00:44:56,080 --> 00:44:59,890
preferably with me exact tunnel link to

1122
00:44:57,820 --> 00:45:01,270
a system if you can to actually get a

1123
00:44:59,890 --> 00:45:04,330
call back and you don't care about

1124
00:45:01,270 --> 00:45:06,130
output and then use RDP if you kind of

1125
00:45:04,330 --> 00:45:07,870
just want that one off you know get

1126
00:45:06,130 --> 00:45:09,340
access to that system look around maybe

1127
00:45:07,870 --> 00:45:11,440
you want to find out what it's doing or

1128
00:45:09,340 --> 00:45:15,070
do some more information but it's just

1129
00:45:11,440 --> 00:45:17,680
more of a one-off system thanks like so

1130
00:45:15,070 --> 00:45:19,210
thoughts overall for this shell clone

1131
00:45:17,680 --> 00:45:21,700
injection is the best way to execute

1132
00:45:19,210 --> 00:45:23,470
your backdoor payload again it used to

1133
00:45:21,700 --> 00:45:25,720
kind of be create thread which is just

1134
00:45:23,470 --> 00:45:27,640
shell code execution or just using

1135
00:45:25,720 --> 00:45:29,799
Chocola injection for the initial vector

1136
00:45:27,640 --> 00:45:31,000
but we're liked we like to use shell

1137
00:45:29,800 --> 00:45:31,960
cone injection now for everything

1138
00:45:31,000 --> 00:45:34,630
because of that parents house

1139
00:45:31,960 --> 00:45:37,000
parent-child process behavior detection

1140
00:45:34,630 --> 00:45:39,670
I mentioned earlier there's a ton of

1141
00:45:37,000 --> 00:45:41,080
ways of doing executing your shell code

1142
00:45:39,670 --> 00:45:42,370
using legitimate binaries again I

1143
00:45:41,080 --> 00:45:44,080
recommend everyone go to that lobe

1144
00:45:42,370 --> 00:45:46,359
insight that I put in my slides earlier

1145
00:45:44,080 --> 00:45:48,220
that is like money when it comes to all

1146
00:45:46,360 --> 00:45:49,750
the gladdest research on the native

1147
00:45:48,220 --> 00:45:52,480
executables that you can take advantage

1148
00:45:49,750 --> 00:45:54,280
of right now again queues you're a PC

1149
00:45:52,480 --> 00:45:56,260
for processing ejection overcorrect

1150
00:45:54,280 --> 00:45:58,720
remote thread because it happens all the

1151
00:45:56,260 --> 00:45:59,920
time legitimately you know ABS can hook

1152
00:45:58,720 --> 00:46:01,899
into this and actually detect on

1153
00:45:59,920 --> 00:46:03,580
anything right now and there's a lot of

1154
00:46:01,900 --> 00:46:04,720
lateral movement and persistence

1155
00:46:03,580 --> 00:46:06,069
techniques that you can use in

1156
00:46:04,720 --> 00:46:07,689
conjunction with your show clone

1157
00:46:06,070 --> 00:46:11,470
injection techniques to actually execute

1158
00:46:07,690 --> 00:46:14,260
your payloads thanks like so that's kind

1159
00:46:11,470 --> 00:46:15,759
of like a lot of technical stuff about

1160
00:46:14,260 --> 00:46:17,560
you know lateral movement persistence

1161
00:46:15,760 --> 00:46:19,900
payload generation now I'm gonna kind of

1162
00:46:17,560 --> 00:46:22,180
go into some fun case studies about how

1163
00:46:19,900 --> 00:46:24,280
we're creative when we're actually doing

1164
00:46:22,180 --> 00:46:25,399
red teaming a lot of people think all

1165
00:46:24,280 --> 00:46:27,110
right I don't

1166
00:46:25,400 --> 00:46:28,760
but they kind of say like oh you know

1167
00:46:27,110 --> 00:46:30,170
pentesters red teamers they're just

1168
00:46:28,760 --> 00:46:31,670
clicking buttons and doing crap all day

1169
00:46:30,170 --> 00:46:33,680
like so it's not at all how we do it

1170
00:46:31,670 --> 00:46:35,600
here at Mandy in any way this is a

1171
00:46:33,680 --> 00:46:36,649
really good example that I'm gonna go

1172
00:46:35,600 --> 00:46:38,810
I'm gonna give you three case studies

1173
00:46:36,650 --> 00:46:40,790
that we have to really be creative and

1174
00:46:38,810 --> 00:46:42,200
that software development / IT

1175
00:46:40,790 --> 00:46:43,850
background I mentioned it's actually

1176
00:46:42,200 --> 00:46:45,799
really important to how we accomplish

1177
00:46:43,850 --> 00:46:48,830
our goals so I'll explain that here in a

1178
00:46:45,800 --> 00:46:51,080
moment next slide so this first one we

1179
00:46:48,830 --> 00:46:53,240
had a building manufacturer company come

1180
00:46:51,080 --> 00:46:54,620
to us and say hey you know Evan I want

1181
00:46:53,240 --> 00:46:56,959
to do a red team with you and your team

1182
00:46:54,620 --> 00:46:58,609
you know can you help us out and the guy

1183
00:46:56,960 --> 00:47:01,550
that was our point of contact for this

1184
00:46:58,610 --> 00:47:02,390
specific case was actually a previous

1185
00:47:01,550 --> 00:47:05,420
client of mine

1186
00:47:02,390 --> 00:47:07,009
with two different other customers so he

1187
00:47:05,420 --> 00:47:08,240
had moved three different times and

1188
00:47:07,010 --> 00:47:12,020
every single time he went to a new

1189
00:47:08,240 --> 00:47:14,149
vendor he used us as his vendor for

1190
00:47:12,020 --> 00:47:16,250
doing the pen testing or red teaming for

1191
00:47:14,150 --> 00:47:18,620
his company so we had a lot of pressure

1192
00:47:16,250 --> 00:47:19,940
to really perform and accomplish the

1193
00:47:18,620 --> 00:47:21,529
objectives that he wants because we want

1194
00:47:19,940 --> 00:47:23,600
to make sure that he still comes to us

1195
00:47:21,530 --> 00:47:26,180
any any other company that he goes to

1196
00:47:23,600 --> 00:47:29,330
the main objective was to access the

1197
00:47:26,180 --> 00:47:31,339
CEOs email so we did our initial vector

1198
00:47:29,330 --> 00:47:33,319
via phishing we escalated privileges

1199
00:47:31,340 --> 00:47:34,790
perform lateral movement but we couldn't

1200
00:47:33,320 --> 00:47:36,890
get domain admin because in this

1201
00:47:34,790 --> 00:47:38,779
specific client they had a red force

1202
00:47:36,890 --> 00:47:41,930
implementation that was actually

1203
00:47:38,780 --> 00:47:44,150
physically separated from the logical

1204
00:47:41,930 --> 00:47:45,529
network so there was no way that we

1205
00:47:44,150 --> 00:47:47,840
could think of it within the amount of

1206
00:47:45,530 --> 00:47:50,090
time we had to get domain admin but the

1207
00:47:47,840 --> 00:47:52,160
objective was again access to CEOs email

1208
00:47:50,090 --> 00:47:54,470
we had server admin access and we even

1209
00:47:52,160 --> 00:47:56,690
had helpdesk admin access and they had a

1210
00:47:54,470 --> 00:47:58,399
really good segregation of credentials

1211
00:47:56,690 --> 00:48:00,110
and privileges so we could actually

1212
00:47:58,400 --> 00:48:02,270
access most people's systems that we

1213
00:48:00,110 --> 00:48:04,280
wanted to so generally the approach is

1214
00:48:02,270 --> 00:48:07,759
going to be I'm going to target wherever

1215
00:48:04,280 --> 00:48:09,410
the CEOs system is I'm gonna jump on

1216
00:48:07,760 --> 00:48:11,300
that system use me me cats to dump

1217
00:48:09,410 --> 00:48:13,640
credentials from memory and then just

1218
00:48:11,300 --> 00:48:16,220
access his email via OA or Outlook or

1219
00:48:13,640 --> 00:48:18,350
whatever I want right well this CEO used

1220
00:48:16,220 --> 00:48:19,790
an iPad for like his everyday activity

1221
00:48:18,350 --> 00:48:21,140
the dude just cared about email and

1222
00:48:19,790 --> 00:48:23,990
Internet I guess and he just want to use

1223
00:48:21,140 --> 00:48:25,819
an iPad so I can't go on an iPad dump me

1224
00:48:23,990 --> 00:48:27,709
me cat everyone me me cousin get credits

1225
00:48:25,820 --> 00:48:29,420
right so how am I gonna do it one

1226
00:48:27,710 --> 00:48:31,850
thought was accessing the domain

1227
00:48:29,420 --> 00:48:33,680
controller dumping the into guest I did

1228
00:48:31,850 --> 00:48:35,480
file maybe pulling his hash and cracking

1229
00:48:33,680 --> 00:48:36,919
it but remember I can't access the

1230
00:48:35,480 --> 00:48:39,079
domain controller so I'm like dang what

1231
00:48:36,920 --> 00:48:41,420
do I do right so what I did was

1232
00:48:39,079 --> 00:48:43,369
I targeted the exchange servers I got

1233
00:48:41,420 --> 00:48:45,769
the exchange admins credentials from

1234
00:48:43,369 --> 00:48:48,319
memory from the exchange server I went

1235
00:48:45,769 --> 00:48:50,269
into office 365 in this case because I

1236
00:48:48,319 --> 00:48:52,880
had on Prem and cloud exchange servers

1237
00:48:50,269 --> 00:48:54,859
that were in sync I used his

1238
00:48:52,880 --> 00:48:56,930
authentication to access it and then I

1239
00:48:54,859 --> 00:48:59,630
used a email delegation rules to in

1240
00:48:56,930 --> 00:49:01,219
order to access the CEOs email so again

1241
00:48:59,630 --> 00:49:03,859
this was a creative approach to

1242
00:49:01,219 --> 00:49:05,660
accomplishing the same objective without

1243
00:49:03,859 --> 00:49:07,069
actually just going straight to the CEO

1244
00:49:05,660 --> 00:49:08,959
and thinking that's the only route to

1245
00:49:07,069 --> 00:49:13,450
accomplish my objective does that make

1246
00:49:08,959 --> 00:49:15,979
sense to everyone great next slide

1247
00:49:13,450 --> 00:49:18,019
that's a great question so one of the

1248
00:49:15,979 --> 00:49:20,269
outcomes for this it was not detected

1249
00:49:18,019 --> 00:49:22,279
because they were not logging anything

1250
00:49:20,269 --> 00:49:24,229
on email delegation rules there was no

1251
00:49:22,279 --> 00:49:26,089
exchange logging so one of the biggest

1252
00:49:24,229 --> 00:49:28,129
outcome was logging and alerting when

1253
00:49:26,089 --> 00:49:30,499
email delegation rules happen you

1254
00:49:28,130 --> 00:49:32,329
baseline this and then you detect you

1255
00:49:30,499 --> 00:49:33,979
can send the logs to your sim and then

1256
00:49:32,329 --> 00:49:35,599
create alerting around that that was a

1257
00:49:33,979 --> 00:49:42,788
really big outcome for this specific

1258
00:49:35,599 --> 00:49:46,130
scenario exactly next slide please

1259
00:49:42,789 --> 00:49:48,469
so here's another pretty good one so

1260
00:49:46,130 --> 00:49:50,119
same situation trying to accomplish our

1261
00:49:48,469 --> 00:49:52,069
objective we couldn't access a lot of

1262
00:49:50,119 --> 00:49:54,440
different systems specifically in an 8

1263
00:49:52,069 --> 00:49:56,119
in an ATM environment the ATM

1264
00:49:54,440 --> 00:49:57,619
environment was completely segmented

1265
00:49:56,119 --> 00:49:59,930
they want us to do this like jackpot a

1266
00:49:57,619 --> 00:50:01,249
technique logically like we really want

1267
00:49:59,930 --> 00:50:03,169
you to get code execution on all these

1268
00:50:01,249 --> 00:50:04,459
ATM systems but they were like you know

1269
00:50:03,170 --> 00:50:06,019
like I couldn't see him anywhere on the

1270
00:50:04,459 --> 00:50:07,698
network from corporate that's what we're

1271
00:50:06,019 --> 00:50:10,758
that's where we started we couldn't move

1272
00:50:07,699 --> 00:50:13,279
laterally to those systems so one again

1273
00:50:10,759 --> 00:50:15,519
creative technique was they had a carbon

1274
00:50:13,279 --> 00:50:18,680
black in this specific case deployed

1275
00:50:15,519 --> 00:50:20,328
everywhere enterprise-wide and then i

1276
00:50:18,680 --> 00:50:22,279
was like you know i was able to access

1277
00:50:20,329 --> 00:50:25,039
the carbon black console and they had

1278
00:50:22,279 --> 00:50:27,229
the live response they had the live

1279
00:50:25,039 --> 00:50:29,269
response feature enabled within carbon

1280
00:50:27,229 --> 00:50:31,279
black and I was like let me look into

1281
00:50:29,269 --> 00:50:33,859
this slide response feature the live

1282
00:50:31,279 --> 00:50:35,719
response feature has an API associated

1283
00:50:33,859 --> 00:50:39,410
with it and I was reading through this

1284
00:50:35,719 --> 00:50:43,640
API put file get file registry adds

1285
00:50:39,410 --> 00:50:45,799
write execute memory dumps so what I

1286
00:50:43,640 --> 00:50:48,229
wanted to I could do a memory dump on

1287
00:50:45,799 --> 00:50:51,230
every single system using the API if I

1288
00:50:48,229 --> 00:50:54,078
had the token which in this case I had

1289
00:50:51,230 --> 00:50:56,180
via the the admin console and I could

1290
00:50:54,079 --> 00:50:58,550
pull L SAS from every single system if I

1291
00:50:56,180 --> 00:51:01,009
wanted to I could do code execution on

1292
00:50:58,550 --> 00:51:03,200
every single system if I wanted to just

1293
00:51:01,010 --> 00:51:05,210
using the application itself or in this

1294
00:51:03,200 --> 00:51:07,220
case the API I could write a simple

1295
00:51:05,210 --> 00:51:08,839
Python script to wrap the API and get

1296
00:51:07,220 --> 00:51:09,740
code execution on every single system in

1297
00:51:08,839 --> 00:51:12,740
the entire enterprise

1298
00:51:09,740 --> 00:51:14,629
so in this again the key here it didn't

1299
00:51:12,740 --> 00:51:16,609
matter if I got domain admin exchange

1300
00:51:14,630 --> 00:51:18,619
admin all I really cared about here was

1301
00:51:16,609 --> 00:51:20,390
getting the carbon black admin and that

1302
00:51:18,619 --> 00:51:21,710
got me system level privileges on every

1303
00:51:20,390 --> 00:51:24,680
single system in the entire enterprise

1304
00:51:21,710 --> 00:51:26,690
just by wrapping the API but mainly

1305
00:51:24,680 --> 00:51:29,359
again because they didn't protect the

1306
00:51:26,690 --> 00:51:31,310
access token auth token in this case

1307
00:51:29,359 --> 00:51:34,220
that allow me to interface with the API

1308
00:51:31,310 --> 00:51:35,540
so again a creative technique to get

1309
00:51:34,220 --> 00:51:37,129
code execution on every single system

1310
00:51:35,540 --> 00:51:39,380
without again getting the actual domain

1311
00:51:37,130 --> 00:51:40,520
and privileges that most people think

1312
00:51:39,380 --> 00:51:44,060
that you need to accomplish your

1313
00:51:40,520 --> 00:51:46,579
objectives next slide and the last one I

1314
00:51:44,060 --> 00:51:49,160
want to mention is using semantics or in

1315
00:51:46,579 --> 00:51:51,200
this case all terrorists exact same

1316
00:51:49,160 --> 00:51:53,598
situation but it wasn't a TMS in this

1317
00:51:51,200 --> 00:51:55,250
case it was point-of-sale systems and it

1318
00:51:53,599 --> 00:51:58,390
was the same thing I could use all

1319
00:51:55,250 --> 00:52:01,160
terrorists in this case to execute a job

1320
00:51:58,390 --> 00:52:02,839
which you can't see that well probably

1321
00:52:01,160 --> 00:52:05,000
from afar but this is running Who am I

1322
00:52:02,839 --> 00:52:07,520
and then IP config within the job on a

1323
00:52:05,000 --> 00:52:10,069
single system using the semantics

1324
00:52:07,520 --> 00:52:12,259
manager agent credentials right there

1325
00:52:10,069 --> 00:52:13,790
built into every single agent deployed

1326
00:52:12,260 --> 00:52:16,220
on the enterprise and then when I

1327
00:52:13,790 --> 00:52:18,950
execute that job I got in this case

1328
00:52:16,220 --> 00:52:21,109
system because every single command was

1329
00:52:18,950 --> 00:52:22,520
running a system so they didn't lock

1330
00:52:21,109 --> 00:52:23,900
down their privileges for this service

1331
00:52:22,520 --> 00:52:25,190
probably because I have to deploy

1332
00:52:23,900 --> 00:52:27,619
patches and whatnot through this

1333
00:52:25,190 --> 00:52:30,710
application and then the second one was

1334
00:52:27,619 --> 00:52:32,960
IP config so this is why it's important

1335
00:52:30,710 --> 00:52:34,220
in this case for us as red teamers to

1336
00:52:32,960 --> 00:52:35,780
really think creatively about the

1337
00:52:34,220 --> 00:52:37,669
problem that you're trying to approach

1338
00:52:35,780 --> 00:52:39,440
and understand everything that's

1339
00:52:37,670 --> 00:52:41,000
available to you to accomplish that

1340
00:52:39,440 --> 00:52:43,460
problem or accomplish your objective and

1341
00:52:41,000 --> 00:52:45,710
the second thing as defenders is to

1342
00:52:43,460 --> 00:52:47,540
understand that just because you think

1343
00:52:45,710 --> 00:52:49,280
like an exchange admin or domain admin

1344
00:52:47,540 --> 00:52:51,380
Enterprise admin is your crown jewels it

1345
00:52:49,280 --> 00:52:53,150
may not be it you have to think of other

1346
00:52:51,380 --> 00:52:54,500
things that interface with every single

1347
00:52:53,150 --> 00:52:55,700
system in the enterprise and lock those

1348
00:52:54,500 --> 00:52:58,190
down to whether it be two-factor

1349
00:52:55,700 --> 00:52:59,779
authentication a lot of ACLs just

1350
00:52:58,190 --> 00:53:01,880
restricting the admin to that system

1351
00:52:59,780 --> 00:53:03,020
alone so that no other system can access

1352
00:53:01,880 --> 00:53:04,760
the application if they wanted to

1353
00:53:03,020 --> 00:53:05,060
there's a lot of different ways you can

1354
00:53:04,760 --> 00:53:06,680
law

1355
00:53:05,060 --> 00:53:09,370
these things down to avoid the situation

1356
00:53:06,680 --> 00:53:12,859
in real life next slide please

1357
00:53:09,370 --> 00:53:15,290
and that's pretty much everything in one

1358
00:53:12,860 --> 00:53:17,510
I know there's a lot of information to

1359
00:53:15,290 --> 00:53:20,300
take in so I think we have a few minutes

1360
00:53:17,510 --> 00:53:29,270
for questions so I think we have just

1361
00:53:20,300 --> 00:53:30,980
about five or ten minutes yes sir so

1362
00:53:29,270 --> 00:53:32,990
sometimes if you want to talk like east

1363
00:53:30,980 --> 00:53:35,150
east west let's just say it's two

1364
00:53:32,990 --> 00:53:38,120
different network segments and there's

1365
00:53:35,150 --> 00:53:40,520
an actual appliance in between - yep so

1366
00:53:38,120 --> 00:53:42,259
in that situation they can detect on

1367
00:53:40,520 --> 00:53:44,090
certain things especially output that's

1368
00:53:42,260 --> 00:53:45,770
not encrypted like meme cats output over

1369
00:53:44,090 --> 00:53:47,480
SMB stuff like that that will always get

1370
00:53:45,770 --> 00:53:49,520
detected which is why that when the

1371
00:53:47,480 --> 00:53:51,350
implant stuff encrypts the data over the

1372
00:53:49,520 --> 00:53:52,970
network so if it's fully encrypted in

1373
00:53:51,350 --> 00:53:54,319
some form of fashion will likely bypass

1374
00:53:52,970 --> 00:53:57,410
that but if you're just doing raw less

1375
00:53:54,320 --> 00:54:00,170
and B payloads being sent or even even

1376
00:53:57,410 --> 00:54:03,859
output you're gonna get caught any

1377
00:54:00,170 --> 00:54:06,070
additional questions don't be shy yes

1378
00:54:03,860 --> 00:54:06,070
ma'am

1379
00:54:20,600 --> 00:54:25,880
that's a really good question so the

1380
00:54:23,540 --> 00:54:27,740
question was Mimi cats currently those

1381
00:54:25,880 --> 00:54:29,660
invoke mean because via PowerShell that

1382
00:54:27,740 --> 00:54:31,279
uses reflection to inject into L SAS

1383
00:54:29,660 --> 00:54:32,330
that's going to be using that crate

1384
00:54:31,280 --> 00:54:35,270
remote thread that I mentioned earlier

1385
00:54:32,330 --> 00:54:37,940
so if you use cue user a PC to do either

1386
00:54:35,270 --> 00:54:39,050
Mimi cat's DLL injection or even shell

1387
00:54:37,940 --> 00:54:40,850
clone injection if you can create a

1388
00:54:39,050 --> 00:54:43,400
shell code version of the of makatsch

1389
00:54:40,850 --> 00:54:46,220
wood which exists you can use cue user a

1390
00:54:43,400 --> 00:54:48,080
PC into to inject into L SAS as opposed

1391
00:54:46,220 --> 00:54:49,790
to using reflection which is great

1392
00:54:48,080 --> 00:54:50,779
remote thread to avoid a lot of

1393
00:54:49,790 --> 00:54:52,130
detection I don't know if you have

1394
00:54:50,780 --> 00:54:54,740
noticed this which I guess is your

1395
00:54:52,130 --> 00:54:57,230
observation a lot of these AV products

1396
00:54:54,740 --> 00:54:59,479
are detecting Mimi cats being run

1397
00:54:57,230 --> 00:55:00,890
because of the way it injects into L SAS

1398
00:54:59,480 --> 00:55:02,810
so it's a really good observation you

1399
00:55:00,890 --> 00:55:06,710
can use Kooser a PC using that same

1400
00:55:02,810 --> 00:55:09,490
method to avoid that detection any

1401
00:55:06,710 --> 00:55:09,490
additional questions

1402
00:55:23,000 --> 00:55:30,150
great question apt 29 is one big one apt

1403
00:55:27,660 --> 00:55:31,828
tens another big one apt one was another

1404
00:55:30,150 --> 00:55:33,990
big one that we used to use a lot of

1405
00:55:31,829 --> 00:55:37,200
their techniques but we started turning

1406
00:55:33,990 --> 00:55:39,839
away from it I would say apt 19 apt 29

1407
00:55:37,200 --> 00:55:42,328
of the closest that replicate us funny

1408
00:55:39,839 --> 00:55:46,078
story about that actually is because we

1409
00:55:42,329 --> 00:55:48,299
have a managed defense service which is

1410
00:55:46,079 --> 00:55:50,099
essentially like a managed sock and we

1411
00:55:48,299 --> 00:55:51,720
obviously have a lot of agents and

1412
00:55:50,099 --> 00:55:54,359
product deployed out to the world

1413
00:55:51,720 --> 00:55:56,430
we have attribution on these groups

1414
00:55:54,359 --> 00:55:58,019
based on a lot of the Intel that we

1415
00:55:56,430 --> 00:56:00,149
gained from our products and also our

1416
00:55:58,019 --> 00:56:02,848
managed defense clients so we actually

1417
00:56:00,150 --> 00:56:04,769
have an ankh which is an unknown a PT's

1418
00:56:02,849 --> 00:56:06,450
generally nation state we have Finn

1419
00:56:04,769 --> 00:56:08,339
which is related to financial groups

1420
00:56:06,450 --> 00:56:11,098
that we talk about we track often when

1421
00:56:08,339 --> 00:56:14,038
we have UNK groups UNK which is like an

1422
00:56:11,099 --> 00:56:16,799
unknown group that we attribute a lot of

1423
00:56:14,039 --> 00:56:18,809
certain activity to that UNK number well

1424
00:56:16,799 --> 00:56:21,029
we have our own uncton umber for the red

1425
00:56:18,809 --> 00:56:22,410
team like where they see us and we're

1426
00:56:21,029 --> 00:56:24,029
actually making t-shirts looks like our

1427
00:56:22,410 --> 00:56:25,890
logo now like our uncle number that

1428
00:56:24,029 --> 00:56:28,079
Mannion has attributed all activity to

1429
00:56:25,890 --> 00:56:31,609
so we have our own kind of apt style

1430
00:56:28,079 --> 00:56:31,609
group but it's under an uncle category

1431
00:56:31,880 --> 00:56:41,369
yes sir in the back that's a great

1432
00:56:37,920 --> 00:56:43,470
question too actually one they have two

1433
00:56:41,369 --> 00:56:46,470
different reputations for those of you

1434
00:56:43,470 --> 00:56:49,259
who don't know but to the the mandiant

1435
00:56:46,470 --> 00:56:51,990
brand is still the services arm of

1436
00:56:49,259 --> 00:56:53,609
fireEye so anytime I say mandiant it's

1437
00:56:51,990 --> 00:56:55,109
one generally good be probably someone

1438
00:56:53,609 --> 00:56:57,240
that used to work at mandiant before the

1439
00:56:55,109 --> 00:56:58,740
acquisition and then number two it's

1440
00:56:57,240 --> 00:56:59,669
gonna be someone who's on the services

1441
00:56:58,740 --> 00:57:01,859
side of IRI

1442
00:56:59,670 --> 00:57:05,789
that still just kind of branded under

1443
00:57:01,859 --> 00:57:06,990
the median arm as a brand but

1444
00:57:05,789 --> 00:57:09,450
technically we're firing

1445
00:57:06,990 --> 00:57:11,250
so that's they own us they acquired us

1446
00:57:09,450 --> 00:57:14,399
so that's that's who as who are under

1447
00:57:11,250 --> 00:57:16,740
officially any additional questions I

1448
00:57:14,400 --> 00:57:19,559
have my Twitter handle there and my

1449
00:57:16,740 --> 00:57:21,118
email if you all are interested in

1450
00:57:19,559 --> 00:57:22,950
learning more about it or have any

1451
00:57:21,119 --> 00:57:25,019
additional questions we're also hiring

1452
00:57:22,950 --> 00:57:27,990
so for any of one who wants to submit a

1453
00:57:25,019 --> 00:57:31,368
resume please feel free to submit to any

1454
00:57:27,990 --> 00:57:32,720
one of us were

1455
00:57:31,369 --> 00:57:33,950
we're pretty much in the central region

1456
00:57:32,720 --> 00:57:34,609
but we have offices all over the world

1457
00:57:33,950 --> 00:57:36,980
really

1458
00:57:34,609 --> 00:57:39,200
so whatever location you're at I'm sure

1459
00:57:36,980 --> 00:57:39,999
we have an office in I'll probably be

1460
00:57:39,200 --> 00:57:42,019
around for another five minutes

1461
00:57:39,999 --> 00:57:44,419
afterwards if you have any questions you

1462
00:57:42,019 --> 00:57:46,500
want to privately ask me afterwards

1463
00:57:44,420 --> 00:57:52,860
thank you all very much

1464
00:57:46,500 --> 00:57:52,860
[Applause]

