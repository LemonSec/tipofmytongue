1
00:00:10,400 --> 00:00:12,559
hello and welcome to our talk about

2
00:00:12,559 --> 00:00:14,240
compiling python programs into

3
00:00:14,240 --> 00:00:17,760
differentially private ones

4
00:00:17,760 --> 00:00:19,600
this talk will go through the different

5
00:00:19,600 --> 00:00:22,080
stages of the process we will start with

6
00:00:22,080 --> 00:00:23,760
data onboarding

7
00:00:23,760 --> 00:00:25,760
we will then move on to the description

8
00:00:25,760 --> 00:00:28,000
of the data job before diving into the

9
00:00:28,000 --> 00:00:30,400
specifics of the differentially private

10
00:00:30,400 --> 00:00:31,679
compilation

11
00:00:31,679 --> 00:00:33,200
finally we will go through a

12
00:00:33,200 --> 00:00:35,120
step-by-step application to make things

13
00:00:35,120 --> 00:00:37,360
clearer

14
00:00:37,360 --> 00:00:39,760
so imagine that you are the owner of a

15
00:00:39,760 --> 00:00:42,480
sensitive data set and you want someone

16
00:00:42,480 --> 00:00:45,440
to perform data analysis on it without

17
00:00:45,440 --> 00:00:48,320
ever actually accessing the real data

18
00:00:48,320 --> 00:00:51,039
well this is possible through our tool

19
00:00:51,039 --> 00:00:53,360
what you can do is import the sensitive

20
00:00:53,360 --> 00:00:55,600
data in our platform

21
00:00:55,600 --> 00:00:58,480
the sensitive data can be a csv file or

22
00:00:58,480 --> 00:01:01,039
a sql-like database

23
00:01:01,039 --> 00:01:03,520
with access to the data we will then

24
00:01:03,520 --> 00:01:06,000
explore it get the number of tables the

25
00:01:06,000 --> 00:01:08,640
number of columns infer the data types

26
00:01:08,640 --> 00:01:10,479
and the value ranges

27
00:01:10,479 --> 00:01:12,560
we will then compute estimate of the

28
00:01:12,560 --> 00:01:15,439
marginals using differential privacy

29
00:01:15,439 --> 00:01:18,720
and we will in turn use these marginals

30
00:01:18,720 --> 00:01:21,280
to train a generated model using

31
00:01:21,280 --> 00:01:24,080
differential privacy too

32
00:01:24,080 --> 00:01:26,159
now the trained generative model will be

33
00:01:26,159 --> 00:01:28,320
used to generate a synthetic data set

34
00:01:28,320 --> 00:01:31,040
equivalent to the original one but this

35
00:01:31,040 --> 00:01:33,280
synthetic data set is actually private

36
00:01:33,280 --> 00:01:34,799
and can be shared

37
00:01:34,799 --> 00:01:37,119
with anyone and in particular it can be

38
00:01:37,119 --> 00:01:39,439
shared with the data practitioner to

39
00:01:39,439 --> 00:01:41,759
iterate on the definition of the data

40
00:01:41,759 --> 00:01:43,520
job

41
00:01:43,520 --> 00:01:45,920
so now that we have onboarded our

42
00:01:45,920 --> 00:01:48,159
sensitive data set onto the service

43
00:01:48,159 --> 00:01:50,159
platform we would like someone to

44
00:01:50,159 --> 00:01:52,159
perform a data job on it

45
00:01:52,159 --> 00:01:53,600
and we call this person the data

46
00:01:53,600 --> 00:01:56,159
practitioner this is usually someone who

47
00:01:56,159 --> 00:01:58,399
will not have access to the real data

48
00:01:58,399 --> 00:02:00,560
but would like to work on it

49
00:02:00,560 --> 00:02:01,360
and

50
00:02:01,360 --> 00:02:04,079
this person is usually a data scientist

51
00:02:04,079 --> 00:02:06,240
that work in a python environment

52
00:02:06,240 --> 00:02:08,479
so in the real world on non-sensitive

53
00:02:08,479 --> 00:02:11,120
data it will just get access to the data

54
00:02:11,120 --> 00:02:14,080
and start working on it but in our case

55
00:02:14,080 --> 00:02:16,400
he doesn't so instead what he gets is a

56
00:02:16,400 --> 00:02:18,160
symbolic representation

57
00:02:18,160 --> 00:02:19,680
along with

58
00:02:19,680 --> 00:02:21,840
differentially private marginals and

59
00:02:21,840 --> 00:02:24,080
synthetic data

60
00:02:24,080 --> 00:02:26,959
now to describe the job itself in python

61
00:02:26,959 --> 00:02:28,959
there are already plenty of libraries to

62
00:02:28,959 --> 00:02:32,239
do that such as pandas numpy tensorflow

63
00:02:32,239 --> 00:02:34,800
and we didn't want to write another

64
00:02:34,800 --> 00:02:37,120
library to do that from scratch so what

65
00:02:37,120 --> 00:02:40,000
we chose to instead is to implement

66
00:02:40,000 --> 00:02:42,640
stubs of the widespread libraries

67
00:02:42,640 --> 00:02:44,720
that will just register

68
00:02:44,720 --> 00:02:46,959
the operations performed on the original

69
00:02:46,959 --> 00:02:50,160
data set so while this looks like

70
00:02:50,160 --> 00:02:53,760
standard data science job code well what

71
00:02:53,760 --> 00:02:55,440
it does instead is register a

72
00:02:55,440 --> 00:02:58,080
computational graph so let's go through

73
00:02:58,080 --> 00:03:00,239
this example quickly

74
00:03:00,239 --> 00:03:02,959
here we can see that we have a data set

75
00:03:02,959 --> 00:03:05,120
that we choose to view as

76
00:03:05,120 --> 00:03:07,440
a pandas data frame and from now on we

77
00:03:07,440 --> 00:03:09,519
can use the pandas primitive to describe

78
00:03:09,519 --> 00:03:11,680
the operations so we extract the

79
00:03:11,680 --> 00:03:13,840
features we extract the labels

80
00:03:13,840 --> 00:03:15,519
we get the mean and the standard

81
00:03:15,519 --> 00:03:16,720
deviation

82
00:03:16,720 --> 00:03:18,800
of the features that we use to normalize

83
00:03:18,800 --> 00:03:21,200
the features then we declare a model

84
00:03:21,200 --> 00:03:24,720
which we then fit on the normalized data

85
00:03:24,720 --> 00:03:27,120
and we have an equivalent computational

86
00:03:27,120 --> 00:03:29,840
graph derived directly from the code

87
00:03:29,840 --> 00:03:32,319
we have a data frame we extract the

88
00:03:32,319 --> 00:03:34,640
features we extract the labels

89
00:03:34,640 --> 00:03:36,480
then we compute the mean of the features

90
00:03:36,480 --> 00:03:38,879
and the standard deviation we subtract

91
00:03:38,879 --> 00:03:40,959
the mean and divide everything by the

92
00:03:40,959 --> 00:03:43,120
standard deviation to get a normalized

93
00:03:43,120 --> 00:03:44,799
version of the features

94
00:03:44,799 --> 00:03:47,599
then we declare a model and we fit it on

95
00:03:47,599 --> 00:03:48,879
the data

96
00:03:48,879 --> 00:03:49,680
so

97
00:03:49,680 --> 00:03:52,000
now the question is we have a

98
00:03:52,000 --> 00:03:54,239
description of the job to be performed

99
00:03:54,239 --> 00:03:56,480
but we would like to have

100
00:03:56,480 --> 00:03:59,120
a fitted model with differential privacy

101
00:03:59,120 --> 00:04:01,760
guarantees and the question is how do we

102
00:04:01,760 --> 00:04:03,599
do that

103
00:04:03,599 --> 00:04:05,840
so before diving into the specifics of

104
00:04:05,840 --> 00:04:07,120
the compilation

105
00:04:07,120 --> 00:04:09,599
let's first introduce some notions about

106
00:04:09,599 --> 00:04:11,599
differential privacy

107
00:04:11,599 --> 00:04:14,000
and one of the important notion is that

108
00:04:14,000 --> 00:04:17,279
of adjacent data sets so two data sets

109
00:04:17,279 --> 00:04:20,000
are adjacent if they differ only by

110
00:04:20,000 --> 00:04:23,600
one entity one entity can be a person a

111
00:04:23,600 --> 00:04:26,400
company or a group of people

112
00:04:26,400 --> 00:04:28,400
and this notion is important because it

113
00:04:28,400 --> 00:04:30,000
is at the very definition of

114
00:04:30,000 --> 00:04:31,759
differential privacy

115
00:04:31,759 --> 00:04:34,320
and a differentially private mechanism

116
00:04:34,320 --> 00:04:37,280
applied onto ages and data sets will

117
00:04:37,280 --> 00:04:40,720
have a very similar results that is

118
00:04:40,720 --> 00:04:42,960
a differentially private mechanism

119
00:04:42,960 --> 00:04:45,040
doesn't depend too much on the

120
00:04:45,040 --> 00:04:47,600
contribution of a single entity

121
00:04:47,600 --> 00:04:51,440
so to formalize this important notion

122
00:04:51,440 --> 00:04:54,000
let's first introduce some vocabulary so

123
00:04:54,000 --> 00:04:57,040
we call protected entity the entity that

124
00:04:57,040 --> 00:04:59,919
we want to protect and it is first

125
00:04:59,919 --> 00:05:02,800
identified during the onboarding stage

126
00:05:02,800 --> 00:05:04,160
where we ask

127
00:05:04,160 --> 00:05:06,479
what is the protected entity is it any

128
00:05:06,479 --> 00:05:09,039
row in a table is it identified by

129
00:05:09,039 --> 00:05:11,919
column in a table

130
00:05:11,919 --> 00:05:12,800
and

131
00:05:12,800 --> 00:05:14,960
once we have that a very important

132
00:05:14,960 --> 00:05:17,600
property that a data set can have

133
00:05:17,600 --> 00:05:19,840
is the property that we call p

134
00:05:19,840 --> 00:05:21,520
preserving that is protected entity

135
00:05:21,520 --> 00:05:22,720
preserving

136
00:05:22,720 --> 00:05:25,360
and this property you have it if

137
00:05:25,360 --> 00:05:28,320
we can link each row in a data set to at

138
00:05:28,320 --> 00:05:30,880
most one protected entity

139
00:05:30,880 --> 00:05:32,800
and so

140
00:05:32,800 --> 00:05:34,639
when you have this property you have a

141
00:05:34,639 --> 00:05:36,960
natural notion of adjacency

142
00:05:36,960 --> 00:05:38,880
that is if you add or remove a single

143
00:05:38,880 --> 00:05:41,199
protected entity from the data set you

144
00:05:41,199 --> 00:05:43,600
simply add or remove all the rows that

145
00:05:43,600 --> 00:05:45,919
you can link to this protected entity

146
00:05:45,919 --> 00:05:47,840
and so it's very important because then

147
00:05:47,840 --> 00:05:49,840
you can measure easily the contribution

148
00:05:49,840 --> 00:05:52,160
of a single entity which is important to

149
00:05:52,160 --> 00:05:55,199
apply differentially private mechanism

150
00:05:55,199 --> 00:05:57,840
so a few key notions to have in mind is

151
00:05:57,840 --> 00:05:58,560
that

152
00:05:58,560 --> 00:06:01,280
while you can link a single row to only

153
00:06:01,280 --> 00:06:03,280
one protected entity

154
00:06:03,280 --> 00:06:05,840
you can you can link many rows to a

155
00:06:05,840 --> 00:06:07,759
single protected entity so that a

156
00:06:07,759 --> 00:06:09,840
protected entity can have

157
00:06:09,840 --> 00:06:12,880
many rows associated to it

158
00:06:12,880 --> 00:06:15,600
and another detail is that if we cannot

159
00:06:15,600 --> 00:06:18,240
link a row to a protected entity

160
00:06:18,240 --> 00:06:19,759
and this can be the case for example if

161
00:06:19,759 --> 00:06:22,639
you have a table with country names

162
00:06:22,639 --> 00:06:24,960
then we consider that

163
00:06:24,960 --> 00:06:26,880
these rows where you cannot think to

164
00:06:26,880 --> 00:06:28,319
protect an entity

165
00:06:28,319 --> 00:06:30,160
are public

166
00:06:30,160 --> 00:06:33,280
so with this hypothesis in mind

167
00:06:33,280 --> 00:06:36,160
and we have identified the p preserving

168
00:06:36,160 --> 00:06:38,560
property in the original data set

169
00:06:38,560 --> 00:06:41,120
then we try to keep track of this

170
00:06:41,120 --> 00:06:42,240
property

171
00:06:42,240 --> 00:06:44,479
in the transformed data sets

172
00:06:44,479 --> 00:06:46,319
and you can see that

173
00:06:46,319 --> 00:06:48,639
some transformations preserve this

174
00:06:48,639 --> 00:06:50,639
property for instance if you select a

175
00:06:50,639 --> 00:06:53,440
subset of columns then you are able to

176
00:06:53,440 --> 00:06:55,919
trace back each row in the result

177
00:06:55,919 --> 00:06:58,639
to the original protected entity but if

178
00:06:58,639 --> 00:07:00,840
you start to perform some kinds of

179
00:07:00,840 --> 00:07:03,919
aggregations then the result will have

180
00:07:03,919 --> 00:07:05,840
mixed contributions from several

181
00:07:05,840 --> 00:07:08,479
protected entities so that you have lost

182
00:07:08,479 --> 00:07:11,840
this pe preserving property

183
00:07:11,840 --> 00:07:14,240
so let's go back to our computation

184
00:07:14,240 --> 00:07:16,560
graph and our original question

185
00:07:16,560 --> 00:07:18,560
how do we get a differentially private

186
00:07:18,560 --> 00:07:20,479
estimate of the fitted model

187
00:07:20,479 --> 00:07:23,039
well our algorithm works roughly like

188
00:07:23,039 --> 00:07:24,319
this

189
00:07:24,319 --> 00:07:26,319
if we want to have an estimate

190
00:07:26,319 --> 00:07:28,479
differentially private of the fitted

191
00:07:28,479 --> 00:07:31,120
model it would be nice to train the

192
00:07:31,120 --> 00:07:32,479
model with

193
00:07:32,479 --> 00:07:34,400
a differentially private mechanism such

194
00:07:34,400 --> 00:07:36,639
as dpsgd

195
00:07:36,639 --> 00:07:39,360
but to apply this mechanism

196
00:07:39,360 --> 00:07:43,520
we need the inputs to be preserving and

197
00:07:43,520 --> 00:07:45,680
if one of the input is not be preserving

198
00:07:45,680 --> 00:07:46,639
then

199
00:07:46,639 --> 00:07:49,919
we can ask recursively the algorithm to

200
00:07:49,919 --> 00:07:51,199
compile

201
00:07:51,199 --> 00:07:54,240
a p preserving version of the input and

202
00:07:54,240 --> 00:07:56,479
it turns out that to compile a

203
00:07:56,479 --> 00:07:59,199
preserving version we may need to

204
00:07:59,199 --> 00:08:00,479
compile

205
00:08:00,479 --> 00:08:02,879
other differentially private results

206
00:08:02,879 --> 00:08:06,080
upstream in the graph so that

207
00:08:06,080 --> 00:08:08,560
in the end to get a differentially

208
00:08:08,560 --> 00:08:11,680
private estimate of our fitted model we

209
00:08:11,680 --> 00:08:14,160
may need to recursively compile

210
00:08:14,160 --> 00:08:16,400
different nodes in the graph either to

211
00:08:16,400 --> 00:08:19,039
differentiate private equivalence or to

212
00:08:19,039 --> 00:08:22,160
pe preserving equivalence

213
00:08:22,160 --> 00:08:24,000
so let's quickly go through an example

214
00:08:24,000 --> 00:08:26,160
to make things clearer

215
00:08:26,160 --> 00:08:27,840
here we have the same graph as before

216
00:08:27,840 --> 00:08:29,680
where we want to train a model using

217
00:08:29,680 --> 00:08:32,399
differential privacy and as you recall

218
00:08:32,399 --> 00:08:35,360
the idea would be to use dpsgd to train

219
00:08:35,360 --> 00:08:36,399
the model

220
00:08:36,399 --> 00:08:38,559
but to do that we would need all the

221
00:08:38,559 --> 00:08:40,719
inputs to be preserving and it's not the

222
00:08:40,719 --> 00:08:43,120
case here because x norm is not

223
00:08:43,120 --> 00:08:45,600
it's not p preserving because there is

224
00:08:45,600 --> 00:08:48,480
some aggregates in its computation graph

225
00:08:48,480 --> 00:08:51,600
so we ask the algorithm to compute a p

226
00:08:51,600 --> 00:08:52,720
preserving

227
00:08:52,720 --> 00:08:54,399
version of xnorm

228
00:08:54,399 --> 00:08:56,640
which in turn requires us to have a be

229
00:08:56,640 --> 00:08:58,240
presenting version of the standard

230
00:08:58,240 --> 00:09:01,279
deviation and a way to do that is to

231
00:09:01,279 --> 00:09:03,440
compute a differentially private version

232
00:09:03,440 --> 00:09:06,000
of the standard deviation and publish it

233
00:09:06,000 --> 00:09:09,120
so we consume privacy but we have an

234
00:09:09,120 --> 00:09:11,279
estimate that is not linked to protected

235
00:09:11,279 --> 00:09:13,120
entities so we can divide

236
00:09:13,120 --> 00:09:16,000
each each row in x by this estimate now

237
00:09:16,000 --> 00:09:18,480
we don't lose the link to the original

238
00:09:18,480 --> 00:09:20,720
predicted entity and we can do that with

239
00:09:20,720 --> 00:09:22,480
the standard deviation and we can also

240
00:09:22,480 --> 00:09:23,920
do that with the mean

241
00:09:23,920 --> 00:09:27,360
and if we do that we have a p preserving

242
00:09:27,360 --> 00:09:29,839
estimate of x norm which we can use

243
00:09:29,839 --> 00:09:33,760
to train the model using dpsgd so as you

244
00:09:33,760 --> 00:09:35,200
have seen by

245
00:09:35,200 --> 00:09:37,519
recursively computing alternatives

246
00:09:37,519 --> 00:09:39,279
either differentially private or

247
00:09:39,279 --> 00:09:41,040
pre-preserving

248
00:09:41,040 --> 00:09:43,120
of some nodes in the graph

249
00:09:43,120 --> 00:09:44,800
we have managed to

250
00:09:44,800 --> 00:09:47,040
get a fitted model with differential

251
00:09:47,040 --> 00:09:48,160
privacy

252
00:09:48,160 --> 00:09:50,800
guarantees so this algorithm is quite

253
00:09:50,800 --> 00:09:53,360
simple and does not finish in every case

254
00:09:53,360 --> 00:09:55,200
which is why we always have the

255
00:09:55,200 --> 00:09:57,440
possibility to fall back to the private

256
00:09:57,440 --> 00:09:58,959
synthetic data

257
00:09:58,959 --> 00:10:01,200
to have a private estimate of any

258
00:10:01,200 --> 00:10:02,480
request

259
00:10:02,480 --> 00:10:04,560
so that was it thank you very much for

260
00:10:04,560 --> 00:10:06,720
your attention and we will be glad to

261
00:10:06,720 --> 00:10:10,519
answer any of your questions

