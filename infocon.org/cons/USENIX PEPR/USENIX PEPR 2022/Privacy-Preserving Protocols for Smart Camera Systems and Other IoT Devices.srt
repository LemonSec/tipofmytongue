1
00:00:09,360 --> 00:00:10,960
hello everyone and thank you very much

2
00:00:10,960 --> 00:00:13,280
for the introduction today in my talk

3
00:00:13,280 --> 00:00:15,440
i'm going to talk about how to design

4
00:00:15,440 --> 00:00:17,279
privacy preserving protocol for smart

5
00:00:17,279 --> 00:00:19,680
camera system and other iot devices this

6
00:00:19,680 --> 00:00:21,840
talk is been on some work that i've done

7
00:00:21,840 --> 00:00:23,279
with some colleagues that i haven't

8
00:00:23,279 --> 00:00:25,039
acknowledged here

9
00:00:25,039 --> 00:00:26,880
above in the slides

10
00:00:26,880 --> 00:00:29,439
so first today we are going to focus on

11
00:00:29,439 --> 00:00:31,359
smart camera system and how we can

12
00:00:31,359 --> 00:00:33,200
design a privacy preserving version of

13
00:00:33,200 --> 00:00:35,360
them then in the second time we are

14
00:00:35,360 --> 00:00:37,120
going to see how the protocols that we

15
00:00:37,120 --> 00:00:40,079
design can be readily extended to other

16
00:00:40,079 --> 00:00:41,520
devices

17
00:00:41,520 --> 00:00:42,879
all right

18
00:00:42,879 --> 00:00:44,559
so first let's talk about smart camera

19
00:00:44,559 --> 00:00:46,640
system and what they are

20
00:00:46,640 --> 00:00:48,879
smart camera systems are very convenient

21
00:00:48,879 --> 00:00:51,120
users place them at home to remotely

22
00:00:51,120 --> 00:00:52,800
monitor what's happening while they're

23
00:00:52,800 --> 00:00:54,559
away

24
00:00:54,559 --> 00:00:56,320
users have like your interface through

25
00:00:56,320 --> 00:00:58,079
the smartphone application to see either

26
00:00:58,079 --> 00:01:00,160
live stream or recorded videos triggered

27
00:01:00,160 --> 00:01:02,640
by motion detection

28
00:01:02,640 --> 00:01:04,640
smart camera systems are very popular

29
00:01:04,640 --> 00:01:06,640
and widespread as we can see on the

30
00:01:06,640 --> 00:01:08,320
right on this cap on this map of the

31
00:01:08,320 --> 00:01:10,880
united states where each point locates

32
00:01:10,880 --> 00:01:13,280
some of the devices that were sold by an

33
00:01:13,280 --> 00:01:15,280
amazon company

34
00:01:15,280 --> 00:01:17,520
however the use of the smart camera

35
00:01:17,520 --> 00:01:20,240
system not without loss and over the

36
00:01:20,240 --> 00:01:22,560
past few years we have been we have seen

37
00:01:22,560 --> 00:01:25,119
very we have seen a lot of

38
00:01:25,119 --> 00:01:27,840
privacy issues and reports and concerns

39
00:01:27,840 --> 00:01:30,000
about the privacy issues of this system

40
00:01:30,000 --> 00:01:31,840
here i've put some examples that i would

41
00:01:31,840 --> 00:01:33,680
like you to focus on

42
00:01:33,680 --> 00:01:35,040
this example

43
00:01:35,040 --> 00:01:37,200
show or

44
00:01:37,200 --> 00:01:41,040
better question the amount of trust that

45
00:01:41,040 --> 00:01:43,600
that users need to put on device

46
00:01:43,600 --> 00:01:46,079
provider and cloud provider for instance

47
00:01:46,079 --> 00:01:48,720
some users could be worried by the fact

48
00:01:48,720 --> 00:01:50,880
that their device provider is partnering

49
00:01:50,880 --> 00:01:53,119
with law enforcement to facilitate video

50
00:01:53,119 --> 00:01:55,840
sharing while others are

51
00:01:55,840 --> 00:01:56,719
like

52
00:01:56,719 --> 00:01:58,159
while others could be also worried by

53
00:01:58,159 --> 00:01:59,600
the fact that

54
00:01:59,600 --> 00:02:01,759
employees of those companies abuse their

55
00:02:01,759 --> 00:02:04,799
access to access videos and see user's

56
00:02:04,799 --> 00:02:06,000
videos

57
00:02:06,000 --> 00:02:09,280
so audio's example shows us that users

58
00:02:09,280 --> 00:02:11,200
in today's smart camera system do not

59
00:02:11,200 --> 00:02:13,120
have control over their data and over

60
00:02:13,120 --> 00:02:15,120
the system

61
00:02:15,120 --> 00:02:15,920
then

62
00:02:15,920 --> 00:02:18,160
so that our goal our objective is to

63
00:02:18,160 --> 00:02:20,080
build a privacy program in smart camera

64
00:02:20,080 --> 00:02:22,400
system where we want to return control

65
00:02:22,400 --> 00:02:24,800
to users while at the same time support

66
00:02:24,800 --> 00:02:26,720
commercial features why do we want to

67
00:02:26,720 --> 00:02:28,720
support commercial features well

68
00:02:28,720 --> 00:02:30,560
because those features are the reason

69
00:02:30,560 --> 00:02:32,480
why the smart camera system are so

70
00:02:32,480 --> 00:02:34,160
successful

71
00:02:34,160 --> 00:02:36,959
this is this balance between privacy

72
00:02:36,959 --> 00:02:39,040
guarantees and usability that can be

73
00:02:39,040 --> 00:02:41,280
helped to achieve sometimes

74
00:02:41,280 --> 00:02:42,560
and we are going to see illustration

75
00:02:42,560 --> 00:02:43,680
right now

76
00:02:43,680 --> 00:02:46,560
so to offer this privacy preserving this

77
00:02:46,560 --> 00:02:48,720
smart camera system we would like to use

78
00:02:48,720 --> 00:02:51,440
end-to-end encryption if we do so we

79
00:02:51,440 --> 00:02:53,519
effectively return control to users

80
00:02:53,519 --> 00:02:55,840
because user device are the only one

81
00:02:55,840 --> 00:02:58,080
able to access the encryption keys and

82
00:02:58,080 --> 00:03:00,319
so on are the only one able to decrease

83
00:03:00,319 --> 00:03:01,599
the video

84
00:03:01,599 --> 00:03:03,120
however

85
00:03:03,120 --> 00:03:04,720
um

86
00:03:04,720 --> 00:03:06,480
using end-to-end encryption arise some

87
00:03:06,480 --> 00:03:09,120
challenges as i said

88
00:03:09,120 --> 00:03:10,319
we

89
00:03:10,319 --> 00:03:12,239
users are the only one able to immediate

90
00:03:12,239 --> 00:03:15,120
access to those videos if they are xeon

91
00:03:15,120 --> 00:03:17,120
if their device are the only one able to

92
00:03:17,120 --> 00:03:18,480
access those keys

93
00:03:18,480 --> 00:03:20,959
so the challenge becomes now

94
00:03:20,959 --> 00:03:23,200
how do we establish the route of trust

95
00:03:23,200 --> 00:03:25,840
between such devices in such a system

96
00:03:25,840 --> 00:03:28,000
where we only trade the user and not the

97
00:03:28,000 --> 00:03:30,799
cloud provider or the device provider

98
00:03:30,799 --> 00:03:32,959
moreover how do we manage all the keys

99
00:03:32,959 --> 00:03:35,760
in such a system while still supporting

100
00:03:35,760 --> 00:03:38,239
commercial features specifically i want

101
00:03:38,239 --> 00:03:41,280
you to think about how can we um

102
00:03:41,280 --> 00:03:44,080
delegate at fine granularity

103
00:03:44,080 --> 00:03:47,599
access to our videos so let's dive into

104
00:03:47,599 --> 00:03:48,319
it

105
00:03:48,319 --> 00:03:50,080
first we are going to see how we can

106
00:03:50,080 --> 00:03:51,840
establish the root of trust between

107
00:03:51,840 --> 00:03:54,879
devices that are unknown to each other

108
00:03:54,879 --> 00:03:57,280
to do so we are going to use

109
00:03:57,280 --> 00:03:59,439
a physical pairing for bluetooth of

110
00:03:59,439 --> 00:04:01,360
wi-fi the smart camera and the

111
00:04:01,360 --> 00:04:02,879
smartphone application connect to each

112
00:04:02,879 --> 00:04:06,000
other and additionally so fubu for wi-fi

113
00:04:06,000 --> 00:04:08,480
and additionally we use an out-of-band

114
00:04:08,480 --> 00:04:12,239
channel to verify that each device is

115
00:04:12,239 --> 00:04:14,319
actually connected and talking to the

116
00:04:14,319 --> 00:04:16,720
right device this is to mitigate any

117
00:04:16,720 --> 00:04:19,759
mind in the middle attack

118
00:04:20,320 --> 00:04:22,720
as well as we are as we see here on the

119
00:04:22,720 --> 00:04:24,400
video

120
00:04:24,400 --> 00:04:26,960
doing so we are effectively running an

121
00:04:26,960 --> 00:04:30,400
authenticated gpl man g exchange

122
00:04:30,400 --> 00:04:33,680
so when we do so we are we obtain a

123
00:04:33,680 --> 00:04:36,000
secure communication channel from where

124
00:04:36,000 --> 00:04:37,759
we can start to bootstrap the rest of

125
00:04:37,759 --> 00:04:40,160
our system and configure

126
00:04:40,160 --> 00:04:43,120
anything else we need

127
00:04:43,120 --> 00:04:45,919
then let's see how we manage our keys in

128
00:04:45,919 --> 00:04:47,919
our system to manage the keys we are

129
00:04:47,919 --> 00:04:50,639
going to build a binary key tree here we

130
00:04:50,639 --> 00:04:53,759
have a c key and from this c key we are

131
00:04:53,759 --> 00:04:56,240
going to derive lower keys the lower

132
00:04:56,240 --> 00:04:58,639
keys in the tree are derived using a

133
00:04:58,639 --> 00:05:02,800
one-way function or like a like a h

134
00:05:02,800 --> 00:05:05,199
sorry like a hash based key derivation

135
00:05:05,199 --> 00:05:06,080
function

136
00:05:06,080 --> 00:05:09,039
this one-way function ensures that only

137
00:05:09,039 --> 00:05:11,120
lower keys are able to derive from upper

138
00:05:11,120 --> 00:05:12,960
keys and not the other way around this

139
00:05:12,960 --> 00:05:14,720
is a very important for privacy and

140
00:05:14,720 --> 00:05:16,400
security guarantees as we're going to

141
00:05:16,400 --> 00:05:18,080
see later

142
00:05:18,080 --> 00:05:21,280
so this binary tree structure is very

143
00:05:21,280 --> 00:05:22,720
convenient for us

144
00:05:22,720 --> 00:05:24,479
indeed if you remember

145
00:05:24,479 --> 00:05:26,320
just before once we establish the root

146
00:05:26,320 --> 00:05:28,960
of trust now our smart camera and our

147
00:05:28,960 --> 00:05:32,400
smartphone application only need to

148
00:05:32,400 --> 00:05:34,240
negotiate the c key that is going to be

149
00:05:34,240 --> 00:05:36,560
used for the binary k3 and then each

150
00:05:36,560 --> 00:05:38,479
device can go on their own way

151
00:05:38,479 --> 00:05:40,560
independently and they can derive the

152
00:05:40,560 --> 00:05:42,560
rest of the keys the smart camera system

153
00:05:42,560 --> 00:05:44,880
is going to drive all the keys up to the

154
00:05:44,880 --> 00:05:47,360
bottom and those keys at the bottom are

155
00:05:47,360 --> 00:05:49,039
the ones that are going to be used to

156
00:05:49,039 --> 00:05:51,360
encrypt each video frame inside each

157
00:05:51,360 --> 00:05:54,320
epoch an epoch in our system is just

158
00:05:54,320 --> 00:05:56,720
some time window that is fixed that sort

159
00:05:56,720 --> 00:05:59,120
of that is of a fixed length of 10

160
00:05:59,120 --> 00:06:00,720
seconds which is the parameter we can

161
00:06:00,720 --> 00:06:01,600
change

162
00:06:01,600 --> 00:06:04,080
this means that every 10 seconds we

163
00:06:04,080 --> 00:06:06,000
rotate the keys that are used to encrypt

164
00:06:06,000 --> 00:06:08,160
and decrypt the videos providing forward

165
00:06:08,160 --> 00:06:09,520
secrecy

166
00:06:09,520 --> 00:06:11,919
and key rotation

167
00:06:11,919 --> 00:06:13,039
on the other hand the smartphone

168
00:06:13,039 --> 00:06:14,960
application is able to derive the same

169
00:06:14,960 --> 00:06:16,240
keys

170
00:06:16,240 --> 00:06:17,840
download the encrypted frames that are

171
00:06:17,840 --> 00:06:20,160
uploaded to the cloud and derive locally

172
00:06:20,160 --> 00:06:21,919
the keys and decrypt them to replace the

173
00:06:21,919 --> 00:06:23,520
video to the users

174
00:06:23,520 --> 00:06:26,960
so doing so we isolate access to the

175
00:06:26,960 --> 00:06:30,319
data to only the user's eyes

176
00:06:30,319 --> 00:06:33,360
moreover this binary t3 construction is

177
00:06:33,360 --> 00:06:35,120
going to be very useful for another

178
00:06:35,120 --> 00:06:36,880
feature that we want to support in our

179
00:06:36,880 --> 00:06:40,160
system which is fine grain delegation

180
00:06:40,160 --> 00:06:42,720
indeed let's take the example where the

181
00:06:42,720 --> 00:06:44,639
owner wants to delegate access to a

182
00:06:44,639 --> 00:06:47,360
shared user to some videos or to twists

183
00:06:47,360 --> 00:06:48,639
to some videos that are going to be

184
00:06:48,639 --> 00:06:49,759
recorded

185
00:06:49,759 --> 00:06:51,520
during some time window

186
00:06:51,520 --> 00:06:54,319
the owner only need to figure out which

187
00:06:54,319 --> 00:06:56,479
key in the key tree they need to share

188
00:06:56,479 --> 00:06:59,039
with these shared users then once the

189
00:06:59,039 --> 00:07:01,199
shared users receive this key on their

190
00:07:01,199 --> 00:07:04,160
side they can derive the lower keys and

191
00:07:04,160 --> 00:07:06,720
decrypt the corresponding videos

192
00:07:06,720 --> 00:07:08,479
this this is

193
00:07:08,479 --> 00:07:11,840
this key structure that let us

194
00:07:11,840 --> 00:07:13,280
support

195
00:07:13,280 --> 00:07:16,800
verifying grain delegation in our system

196
00:07:16,800 --> 00:07:19,199
so these were two of the main

197
00:07:19,199 --> 00:07:21,120
construction blocks that we use in our

198
00:07:21,120 --> 00:07:22,800
paper

199
00:07:22,800 --> 00:07:23,599
to

200
00:07:23,599 --> 00:07:25,680
offer a privacy-preserving design of a

201
00:07:25,680 --> 00:07:28,560
smart camera system that supports a set

202
00:07:28,560 --> 00:07:30,560
of features similar to commercial

203
00:07:30,560 --> 00:07:32,240
devices

204
00:07:32,240 --> 00:07:33,840
i for a second of time for this

205
00:07:33,840 --> 00:07:35,280
presentation i didn't have time to go

206
00:07:35,280 --> 00:07:37,199
into details about each feature and how

207
00:07:37,199 --> 00:07:39,120
we support each product how we support

208
00:07:39,120 --> 00:07:41,039
each feature with our protocol that

209
00:07:41,039 --> 00:07:42,840
would refer you to the corresponding

210
00:07:42,840 --> 00:07:46,160
paper however what is worth noticing is

211
00:07:46,160 --> 00:07:48,800
that in our system

212
00:07:48,800 --> 00:07:50,400
although we are like sending video

213
00:07:50,400 --> 00:07:52,240
stream data our protocols are not

214
00:07:52,240 --> 00:07:55,680
limited to only this type of data thus

215
00:07:55,680 --> 00:07:57,919
we can send any type of data or time

216
00:07:57,919 --> 00:07:59,120
series data

217
00:07:59,120 --> 00:08:02,400
so our protocols are like can be readily

218
00:08:02,400 --> 00:08:05,520
extended to any other type of iot device

219
00:08:05,520 --> 00:08:07,199
such as a thermostat recording

220
00:08:07,199 --> 00:08:09,680
temperature or humidity level or like a

221
00:08:09,680 --> 00:08:12,000
cause or a motion detect

222
00:08:12,000 --> 00:08:13,120
or

223
00:08:13,120 --> 00:08:15,520
our proximity sensor or even like

224
00:08:15,520 --> 00:08:18,639
devices with health related application

225
00:08:18,639 --> 00:08:21,759
recording your upbeat or your glucose

226
00:08:21,759 --> 00:08:23,919
level

227
00:08:23,919 --> 00:08:27,360
so our protocol can be readily extended

228
00:08:27,360 --> 00:08:29,280
at one exception

229
00:08:29,280 --> 00:08:30,879
which is the fact that in our

230
00:08:30,879 --> 00:08:32,958
bootstrapping if you remember we use a

231
00:08:32,958 --> 00:08:35,519
camera sensor to in

232
00:08:35,519 --> 00:08:37,440
to authenticate through the out-of-band

233
00:08:37,440 --> 00:08:39,760
channel here some of those devices might

234
00:08:39,760 --> 00:08:42,320
not have such a sensor so we have two

235
00:08:42,320 --> 00:08:44,640
solutions either instead of like pairing

236
00:08:44,640 --> 00:08:47,120
for bluetooth or wi-fi we require the

237
00:08:47,120 --> 00:08:49,920
user to pair through a cable directly to

238
00:08:49,920 --> 00:08:52,080
a physical link to the device which is

239
00:08:52,080 --> 00:08:54,000
something that is possible for the

240
00:08:54,000 --> 00:08:56,480
smartwatch or this glucose level

241
00:08:56,480 --> 00:08:59,440
also because level monitor for instance

242
00:08:59,440 --> 00:09:01,680
um for the other devices

243
00:09:01,680 --> 00:09:04,000
either we do that or we can also

244
00:09:04,000 --> 00:09:06,959
leverage the fact that all of those iot

245
00:09:06,959 --> 00:09:10,240
devices have a physical sensor to

246
00:09:10,240 --> 00:09:11,680
measure something in the physical

247
00:09:11,680 --> 00:09:14,399
environment and this physical sensor

248
00:09:14,399 --> 00:09:16,080
could be leveraged to

249
00:09:16,080 --> 00:09:17,600
you to

250
00:09:17,600 --> 00:09:20,800
do this authentication in another outage

251
00:09:20,800 --> 00:09:22,560
channel than the visual channel that we

252
00:09:22,560 --> 00:09:24,480
use in our specific application of smart

253
00:09:24,480 --> 00:09:26,800
mr system for example for the motion

254
00:09:26,800 --> 00:09:28,000
detected

255
00:09:28,000 --> 00:09:29,680
device we could

256
00:09:29,680 --> 00:09:32,000
think about the fact that the user

257
00:09:32,000 --> 00:09:33,839
we could think about the fact that to

258
00:09:33,839 --> 00:09:35,600
authenticate the user the user would

259
00:09:35,600 --> 00:09:37,920
need to trigger the device following a

260
00:09:37,920 --> 00:09:40,719
specific pattern

261
00:09:40,880 --> 00:09:43,680
some as a conclusion to provide privacy

262
00:09:43,680 --> 00:09:45,760
preserving protocols

263
00:09:45,760 --> 00:09:48,320
and systems without relying on the cloud

264
00:09:48,320 --> 00:09:51,120
or the device provider we need to start

265
00:09:51,120 --> 00:09:53,519
at the very bottom where we

266
00:09:53,519 --> 00:09:55,040
establish a route of trust between the

267
00:09:55,040 --> 00:09:57,920
devices then we need to be very careful

268
00:09:57,920 --> 00:10:00,720
in the design of all our protocol

269
00:10:00,720 --> 00:10:02,399
to maintain this route of trust between

270
00:10:02,399 --> 00:10:03,760
devices

271
00:10:03,760 --> 00:10:05,680
in our paper we demonstrate how we did

272
00:10:05,680 --> 00:10:07,680
that and how we applied it on the smart

273
00:10:07,680 --> 00:10:10,240
camera system effectively returning full

274
00:10:10,240 --> 00:10:13,279
control and access mediation to the real

275
00:10:13,279 --> 00:10:14,959
owners

276
00:10:14,959 --> 00:10:17,120
and we do so while supporting commercial

277
00:10:17,120 --> 00:10:18,880
functionalities

278
00:10:18,880 --> 00:10:20,160
i invite you to check out the

279
00:10:20,160 --> 00:10:22,560
corresponding paper and i would be happy

280
00:10:22,560 --> 00:10:26,119
to take any questions

281
00:10:32,560 --> 00:10:34,640
you

