1
00:00:10,080 --> 00:00:11,280
hello

2
00:00:11,280 --> 00:00:13,120
my name is will shackleton i'm a

3
00:00:13,120 --> 00:00:14,799
software engineer on the privacy

4
00:00:14,799 --> 00:00:16,800
infrastructure team at mesa

5
00:00:16,800 --> 00:00:19,279
my pronouns are he him and today i'm

6
00:00:19,279 --> 00:00:21,039
going to talk about automating product

7
00:00:21,039 --> 00:00:23,760
deprecation

8
00:00:24,080 --> 00:00:27,199
in 2015 we launched a photo sharing app

9
00:00:27,199 --> 00:00:29,119
called moments

10
00:00:29,119 --> 00:00:32,399
in 2019 we shut it down

11
00:00:32,399 --> 00:00:34,079
what do we have to do

12
00:00:34,079 --> 00:00:36,559
well we have to turn off the app notify

13
00:00:36,559 --> 00:00:39,680
users and let them download their data

14
00:00:39,680 --> 00:00:41,360
eventually we can start removing the

15
00:00:41,360 --> 00:00:44,640
infra that powered the app

16
00:00:44,640 --> 00:00:47,039
how do we do that

17
00:00:47,039 --> 00:00:48,800
i'm sure many of you are thinking about

18
00:00:48,800 --> 00:00:50,239
how you might accomplish this within

19
00:00:50,239 --> 00:00:52,160
your organization there would certainly

20
00:00:52,160 --> 00:00:54,320
be many steps involved

21
00:00:54,320 --> 00:00:56,399
large software systems are inevitably

22
00:00:56,399 --> 00:00:58,160
interconnected

23
00:00:58,160 --> 00:01:00,960
moments was integrated into facebook and

24
00:01:00,960 --> 00:01:03,120
deleting it was more complicated than

25
00:01:03,120 --> 00:01:06,560
turning off servers and dropping tables

26
00:01:06,560 --> 00:01:07,920
what we're going to look at today will

27
00:01:07,920 --> 00:01:09,520
give you some insight into how we

28
00:01:09,520 --> 00:01:11,200
accomplish the removal of products and

29
00:01:11,200 --> 00:01:13,840
features like this

30
00:01:14,400 --> 00:01:16,080
in this talk we're going to explore this

31
00:01:16,080 --> 00:01:18,000
problem space which we call product

32
00:01:18,000 --> 00:01:19,280
deprecation

33
00:01:19,280 --> 00:01:20,560
we're going to see whether you can

34
00:01:20,560 --> 00:01:23,119
automate the problem away and what's to

35
00:01:23,119 --> 00:01:26,320
do when you can automate no more

36
00:01:26,320 --> 00:01:28,000
finally we'll briefly look at how this

37
00:01:28,000 --> 00:01:30,640
relates to company process

38
00:01:30,640 --> 00:01:32,320
it's worth noting that in this talk

39
00:01:32,320 --> 00:01:34,079
we'll use the terms product and feature

40
00:01:34,079 --> 00:01:35,759
interchangeably

41
00:01:35,759 --> 00:01:37,439
products and features tend to fit into a

42
00:01:37,439 --> 00:01:39,680
hierarchy you have huge products like

43
00:01:39,680 --> 00:01:41,600
facebook all the way down to very small

44
00:01:41,600 --> 00:01:44,479
features like my bookmarks for my my

45
00:01:44,479 --> 00:01:46,640
bookmarked photos or something like that

46
00:01:46,640 --> 00:01:48,079
and what we're talking about today is

47
00:01:48,079 --> 00:01:49,840
applicable to any component large or

48
00:01:49,840 --> 00:01:52,159
small

49
00:01:53,520 --> 00:01:55,840
user data is created after we launch a

50
00:01:55,840 --> 00:01:57,360
product like moments

51
00:01:57,360 --> 00:02:00,320
it's created by our users

52
00:02:00,320 --> 00:02:02,000
there are many cases when users might

53
00:02:02,000 --> 00:02:04,159
expect their data to be deleted for

54
00:02:04,159 --> 00:02:05,280
example

55
00:02:05,280 --> 00:02:07,600
when the user deletes a piece of content

56
00:02:07,600 --> 00:02:09,679
or deletes their account

57
00:02:09,679 --> 00:02:12,319
however if a product is turned off users

58
00:02:12,319 --> 00:02:13,680
might also expect their data to be

59
00:02:13,680 --> 00:02:16,080
deleted

60
00:02:16,319 --> 00:02:18,160
with most kinds of data deletion the

61
00:02:18,160 --> 00:02:19,920
engineering work to support it happens

62
00:02:19,920 --> 00:02:22,239
before the product is launched with

63
00:02:22,239 --> 00:02:24,080
product deprecation the work happens at

64
00:02:24,080 --> 00:02:25,440
the end after the product has been

65
00:02:25,440 --> 00:02:27,360
turned off

66
00:02:27,360 --> 00:02:29,200
the four years between the launch and

67
00:02:29,200 --> 00:02:31,120
deprecation of moments is a long time in

68
00:02:31,120 --> 00:02:34,319
tech and during that time many engineers

69
00:02:34,319 --> 00:02:35,760
may have changed teams or change

70
00:02:35,760 --> 00:02:37,200
companies

71
00:02:37,200 --> 00:02:40,720
what might happen without guidance

72
00:02:42,959 --> 00:02:43,840
well

73
00:02:43,840 --> 00:02:46,160
without guidance teams might turn the

74
00:02:46,160 --> 00:02:49,120
feature off without any further cleanup

75
00:02:49,120 --> 00:02:50,720
they may wish to re-enable the feature

76
00:02:50,720 --> 00:02:53,200
at a later date or may wish or or may

77
00:02:53,200 --> 00:02:54,720
consider the cleanup work to be too

78
00:02:54,720 --> 00:02:55,920
risky

79
00:02:55,920 --> 00:02:57,760
hypothetically let's say that we built a

80
00:02:57,760 --> 00:02:59,760
feature inside moments for new year's

81
00:02:59,760 --> 00:03:01,599
eve photos and it didn't do too well one

82
00:03:01,599 --> 00:03:02,959
year

83
00:03:02,959 --> 00:03:04,959
one stink might be to wait until next

84
00:03:04,959 --> 00:03:08,239
year to try to launch it again

85
00:03:08,640 --> 00:03:10,720
during a deprecation it's also possible

86
00:03:10,720 --> 00:03:14,800
to accidentally delete a sorry it's it's

87
00:03:14,800 --> 00:03:16,560
possible to miss a table when trying to

88
00:03:16,560 --> 00:03:18,720
find the things to delete on the flip

89
00:03:18,720 --> 00:03:20,560
side it's possible to delete a table

90
00:03:20,560 --> 00:03:23,120
that's still being used by excellent

91
00:03:23,120 --> 00:03:24,879
for example some tables might not be

92
00:03:24,879 --> 00:03:27,920
neatly might not be neatly categorized

93
00:03:27,920 --> 00:03:29,440
moments may have started life as an

94
00:03:29,440 --> 00:03:31,280
extension to facebook photos before it

95
00:03:31,280 --> 00:03:34,239
became a separate app

96
00:03:34,640 --> 00:03:36,560
deleting something that's actively being

97
00:03:36,560 --> 00:03:38,159
used in production could cause bad

98
00:03:38,159 --> 00:03:40,080
experiences for users

99
00:03:40,080 --> 00:03:41,840
the interconnected nature of products

100
00:03:41,840 --> 00:03:44,319
and features in our infrastructure makes

101
00:03:44,319 --> 00:03:46,959
this a very real possibility

102
00:03:46,959 --> 00:03:48,799
humans can make mistakes and those

103
00:03:48,799 --> 00:03:50,879
mistakes could bring multiple sites down

104
00:03:50,879 --> 00:03:53,760
not just moments

105
00:03:54,720 --> 00:03:57,040
how can we solve this

106
00:03:57,040 --> 00:04:00,159
we can provide internal process guides

107
00:04:00,159 --> 00:04:02,080
and rules about how to safely deprecate

108
00:04:02,080 --> 00:04:03,599
a product

109
00:04:03,599 --> 00:04:05,760
how to notify users and give them time

110
00:04:05,760 --> 00:04:07,280
to download their data

111
00:04:07,280 --> 00:04:09,200
how to disable the product and when to

112
00:04:09,200 --> 00:04:11,519
eventually delete it

113
00:04:11,519 --> 00:04:13,280
having internal processes like this is

114
00:04:13,280 --> 00:04:15,519
very important but is not the focus of

115
00:04:15,519 --> 00:04:18,079
today's talk

116
00:04:18,079 --> 00:04:20,880
our internal process tells us how how

117
00:04:20,880 --> 00:04:22,639
and when to perform the high level steps

118
00:04:22,639 --> 00:04:24,880
in a deprecation but actually removing

119
00:04:24,880 --> 00:04:26,479
the code and data is an engineering

120
00:04:26,479 --> 00:04:28,240
problem with an engineering solution

121
00:04:28,240 --> 00:04:31,360
which we'll talk about today

122
00:04:32,720 --> 00:04:34,560
first we're going to investigate some

123
00:04:34,560 --> 00:04:36,479
building blocks to solve the problem

124
00:04:36,479 --> 00:04:38,320
namely whether we can automate the

125
00:04:38,320 --> 00:04:40,960
problem away

126
00:04:41,199 --> 00:04:43,759
long story short we can

127
00:04:43,759 --> 00:04:45,440
let's look at two systems that meta has

128
00:04:45,440 --> 00:04:48,800
built which enable us to do this

129
00:04:49,600 --> 00:04:51,680
firstly we have built a system which

130
00:04:51,680 --> 00:04:54,639
cleans up unused or dead types of data

131
00:04:54,639 --> 00:04:56,720
from many of our data stores

132
00:04:56,720 --> 00:04:59,280
this system scans many of our production

133
00:04:59,280 --> 00:05:01,600
data stores and identifies each type of

134
00:05:01,600 --> 00:05:04,080
data that we store

135
00:05:04,080 --> 00:05:06,000
for each type of data it determines

136
00:05:06,000 --> 00:05:07,919
whether the data is being used

137
00:05:07,919 --> 00:05:11,120
and if it is not removes it

138
00:05:11,120 --> 00:05:13,680
this system is fully automated in that

139
00:05:13,680 --> 00:05:15,840
it proceeds without engineer initiation

140
00:05:15,840 --> 00:05:17,680
or intervention but also allows

141
00:05:17,680 --> 00:05:19,199
engineers to interact with this to a

142
00:05:19,199 --> 00:05:21,919
certain extent

143
00:05:22,800 --> 00:05:26,160
how do we detect that the data is dead

144
00:05:26,160 --> 00:05:28,400
we primarily look for two types of usage

145
00:05:28,400 --> 00:05:30,960
static usage when we can find code that

146
00:05:30,960 --> 00:05:32,960
seems to query some data and runtime

147
00:05:32,960 --> 00:05:34,800
usage when the data is actively being

148
00:05:34,800 --> 00:05:37,039
used in production

149
00:05:37,039 --> 00:05:38,800
we have on the side of caution so we

150
00:05:38,800 --> 00:05:40,479
require that there is no code and no

151
00:05:40,479 --> 00:05:41,680
reason rights

152
00:05:41,680 --> 00:05:44,560
in these examples here uh we have we we

153
00:05:44,560 --> 00:05:46,960
might be able to find a sql query that

154
00:05:46,960 --> 00:05:48,880
seems to be querying a table we wouldn't

155
00:05:48,880 --> 00:05:50,639
want to break that piece of code

156
00:05:50,639 --> 00:05:51,919
on the right we might find that the

157
00:05:51,919 --> 00:05:54,479
table is being hit 200 times a second or

158
00:05:54,479 --> 00:05:56,080
something like that in production and

159
00:05:56,080 --> 00:05:57,440
again we wouldn't want to break those

160
00:05:57,440 --> 00:06:00,319
production queries

161
00:06:01,120 --> 00:06:02,720
once the system detects that something

162
00:06:02,720 --> 00:06:04,960
is dead or unused

163
00:06:04,960 --> 00:06:06,479
we notified the engineering team

164
00:06:06,479 --> 00:06:08,479
responsible for it that clean up will

165
00:06:08,479 --> 00:06:12,479
proceed viral is via an internal ticket

166
00:06:12,479 --> 00:06:13,919
we don't wait for the acknowledgement of

167
00:06:13,919 --> 00:06:17,199
the engineering team responsible

168
00:06:17,199 --> 00:06:19,520
after a month we block all reads and

169
00:06:19,520 --> 00:06:22,000
writes to that data type so one month

170
00:06:22,000 --> 00:06:24,400
later we we block all of these invites

171
00:06:24,400 --> 00:06:25,680
even if the engineering team hasn't

172
00:06:25,680 --> 00:06:27,840
actually acknowledged that

173
00:06:27,840 --> 00:06:30,639
that this is going to happen

174
00:06:30,639 --> 00:06:32,160
a month after we block all the reads and

175
00:06:32,160 --> 00:06:34,800
rights we delete the data

176
00:06:34,800 --> 00:06:36,720
upon completion we verify that deletion

177
00:06:36,720 --> 00:06:38,479
was successful and keep a record of the

178
00:06:38,479 --> 00:06:41,759
item that we removed internally

179
00:06:41,759 --> 00:06:44,639
engineers can interact with this system

180
00:06:44,639 --> 00:06:46,639
they can both initiate the removal

181
00:06:46,639 --> 00:06:48,240
manually as well as accelerate the

182
00:06:48,240 --> 00:06:49,599
process by skipping these waiting

183
00:06:49,599 --> 00:06:50,639
periods

184
00:06:50,639 --> 00:06:52,479
they can also escalate to us if they

185
00:06:52,479 --> 00:06:55,360
think that the removal is incorrect or

186
00:06:55,360 --> 00:06:58,000
something like that

187
00:06:58,080 --> 00:06:59,919
one interesting observation here is that

188
00:06:59,919 --> 00:07:02,400
this particular system can't remove data

189
00:07:02,400 --> 00:07:05,120
fully automatically if we can't find

190
00:07:05,120 --> 00:07:07,280
code using that data even if that code

191
00:07:07,280 --> 00:07:09,120
is dead

192
00:07:09,120 --> 00:07:10,800
this means that we need to clean up dead

193
00:07:10,800 --> 00:07:14,800
code in order to enable more dead data

194
00:07:14,840 --> 00:07:17,440
cleanup to help with this we have built

195
00:07:17,440 --> 00:07:20,319
a second system that cleans up dead code

196
00:07:20,319 --> 00:07:24,000
this system again is fully automated

197
00:07:24,080 --> 00:07:25,360
how does it work

198
00:07:25,360 --> 00:07:27,680
we combine static analysis runtime

199
00:07:27,680 --> 00:07:29,840
analysis and code base specific

200
00:07:29,840 --> 00:07:32,080
knowledge to understand dead code not

201
00:07:32,080 --> 00:07:33,360
only from a pro

202
00:07:33,360 --> 00:07:34,720
not only from a programming language

203
00:07:34,720 --> 00:07:36,240
perspective but also from a business

204
00:07:36,240 --> 00:07:38,080
perspective

205
00:07:38,080 --> 00:07:39,680
we gather information from various

206
00:07:39,680 --> 00:07:40,800
sources

207
00:07:40,800 --> 00:07:42,720
we extract the code dependency graph

208
00:07:42,720 --> 00:07:44,960
from our compilers and we augment it

209
00:07:44,960 --> 00:07:46,400
with other information

210
00:07:46,400 --> 00:07:48,160
so some examples here

211
00:07:48,160 --> 00:07:50,960
we measure the usage of http endpoints

212
00:07:50,960 --> 00:07:53,680
in our operational logs

213
00:07:53,680 --> 00:07:55,919
we also encode specific information

214
00:07:55,919 --> 00:07:57,919
about our specific code bases such as

215
00:07:57,919 --> 00:07:59,759
known places where legacy code is using

216
00:07:59,759 --> 00:08:02,000
reflection

217
00:08:02,000 --> 00:08:03,680
we gather information from other systems

218
00:08:03,680 --> 00:08:04,879
of meta

219
00:08:04,879 --> 00:08:06,879
for example we have a job execution

220
00:08:06,879 --> 00:08:08,639
service which stores the names of

221
00:08:08,639 --> 00:08:11,599
dispatch methods in a database

222
00:08:11,599 --> 00:08:13,039
regardless of whether you think storing

223
00:08:13,039 --> 00:08:14,800
the names of methods in a database is a

224
00:08:14,800 --> 00:08:16,639
good system design that database is part

225
00:08:16,639 --> 00:08:19,599
of our dependency graph

226
00:08:19,840 --> 00:08:22,879
we use our code text index to find

227
00:08:22,879 --> 00:08:24,879
untyped code usages

228
00:08:24,879 --> 00:08:26,879
in dynamic languages like python there

229
00:08:26,879 --> 00:08:28,639
can be dependencies between code that

230
00:08:28,639 --> 00:08:32,080
the type checker is unaware of

231
00:08:33,200 --> 00:08:34,559
we support this across multiple

232
00:08:34,559 --> 00:08:36,320
languages too

233
00:08:36,320 --> 00:08:38,000
supporting multiple languages is very

234
00:08:38,000 --> 00:08:40,240
important an app like moments may have

235
00:08:40,240 --> 00:08:42,640
clients written in java objective c and

236
00:08:42,640 --> 00:08:45,519
javascript a server written in hack hack

237
00:08:45,519 --> 00:08:49,040
is our internal fork of php

238
00:08:49,040 --> 00:08:50,560
and it might have some infrastructure

239
00:08:50,560 --> 00:08:52,320
written in python and all of these are

240
00:08:52,320 --> 00:08:56,160
effectively linked together via apis

241
00:08:56,399 --> 00:08:58,720
code dependency information across many

242
00:08:58,720 --> 00:09:01,200
languages is indexed using glean our

243
00:09:01,200 --> 00:09:05,040
open source semantic code index

244
00:09:05,040 --> 00:09:06,959
glean presents the static analysis

245
00:09:06,959 --> 00:09:08,720
information that was extracted from the

246
00:09:08,720 --> 00:09:12,560
compiler in a readily accessible format

247
00:09:13,360 --> 00:09:15,360
alongside those dependencies

248
00:09:15,360 --> 00:09:17,600
we use the other sources of data that i

249
00:09:17,600 --> 00:09:18,880
mentioned earlier

250
00:09:18,880 --> 00:09:20,720
some of these are reusable so for

251
00:09:20,720 --> 00:09:22,480
example the code text index service we

252
00:09:22,480 --> 00:09:23,839
can reuse across multiple different

253
00:09:23,839 --> 00:09:24,880
languages

254
00:09:24,880 --> 00:09:26,880
others are very domain specific so for

255
00:09:26,880 --> 00:09:28,399
example the operational logs might

256
00:09:28,399 --> 00:09:30,160
correspond to one specific framework in

257
00:09:30,160 --> 00:09:32,800
one language

258
00:09:33,200 --> 00:09:35,200
for each language we gather all of this

259
00:09:35,200 --> 00:09:37,519
data into our unified analysis where we

260
00:09:37,519 --> 00:09:40,399
can garbage collect the dependency graph

261
00:09:40,399 --> 00:09:42,399
finally we use our internal code change

262
00:09:42,399 --> 00:09:44,240
automation service to send automated

263
00:09:44,240 --> 00:09:48,320
change requests to engineers for review

264
00:09:48,880 --> 00:09:51,360
during the analysis we also record in

265
00:09:51,360 --> 00:09:53,120
human readable terms

266
00:09:53,120 --> 00:09:54,880
how our infrastructure arrived at the

267
00:09:54,880 --> 00:09:56,640
conclusion that some code

268
00:09:56,640 --> 00:09:57,920
was dead

269
00:09:57,920 --> 00:09:59,680
which lets us prove to the engineer that

270
00:09:59,680 --> 00:10:01,600
the change is safe

271
00:10:01,600 --> 00:10:04,160
so in this hypothetical case here the

272
00:10:04,160 --> 00:10:05,920
change summary might tell us that the

273
00:10:05,920 --> 00:10:07,680
endpoint is not referenced in the code

274
00:10:07,680 --> 00:10:09,040
dependency graph

275
00:10:09,040 --> 00:10:10,640
the endpoint hasn't been invoked in

276
00:10:10,640 --> 00:10:12,399
production for a month

277
00:10:12,399 --> 00:10:14,480
its url doesn't appear anywhere else in

278
00:10:14,480 --> 00:10:15,839
our code base

279
00:10:15,839 --> 00:10:18,880
and it has a public static method

280
00:10:18,880 --> 00:10:21,680
and that's that we know isn't configured

281
00:10:21,680 --> 00:10:24,399
in a job execution database

282
00:10:24,399 --> 00:10:26,320
so all of this information here is

283
00:10:26,320 --> 00:10:28,560
designed to help the engineer understand

284
00:10:28,560 --> 00:10:30,079
why the change was made and why the

285
00:10:30,079 --> 00:10:33,839
change was safe

286
00:10:35,200 --> 00:10:37,519
this system is multi-language and we are

287
00:10:37,519 --> 00:10:40,399
building support for more languages

288
00:10:40,399 --> 00:10:42,480
it works at scale as well

289
00:10:42,480 --> 00:10:44,160
we've automated hundreds of thousands of

290
00:10:44,160 --> 00:10:47,120
code changes with a very low error rate

291
00:10:47,120 --> 00:10:49,600
false positives caused by engineer

292
00:10:49,600 --> 00:10:51,360
called by engineers during code review

293
00:10:51,360 --> 00:10:53,760
are triaged and are used to improve our

294
00:10:53,760 --> 00:10:55,839
analysis

295
00:10:55,839 --> 00:10:58,079
incorrect deletions do occasionally make

296
00:10:58,079 --> 00:11:00,079
it into production but we take these

297
00:11:00,079 --> 00:11:02,880
very seriously

298
00:11:02,959 --> 00:11:05,279
in some cases when we can strongly

299
00:11:05,279 --> 00:11:06,959
determine that the code is absolutely

300
00:11:06,959 --> 00:11:07,760
dead

301
00:11:07,760 --> 00:11:10,079
we even avoid human review entirely and

302
00:11:10,079 --> 00:11:12,959
commit the code removal directly

303
00:11:12,959 --> 00:11:15,360
as with the previous system

304
00:11:15,360 --> 00:11:17,120
this dead code removal system runs

305
00:11:17,120 --> 00:11:18,480
automatically

306
00:11:18,480 --> 00:11:20,240
engineers working in supported languages

307
00:11:20,240 --> 00:11:23,440
don't have to opt into it

308
00:11:24,320 --> 00:11:26,160
these two systems are incredibly

309
00:11:26,160 --> 00:11:27,760
powerful

310
00:11:27,760 --> 00:11:29,839
however features within a product are

311
00:11:29,839 --> 00:11:31,519
interconnected

312
00:11:31,519 --> 00:11:33,920
for example with moments users could

313
00:11:33,920 --> 00:11:35,920
automatically link their moments photos

314
00:11:35,920 --> 00:11:38,880
to their facebook profile

315
00:11:38,880 --> 00:11:41,120
automatically determining how to unpick

316
00:11:41,120 --> 00:11:43,440
arbitrary dependencies between features

317
00:11:43,440 --> 00:11:45,519
and their code and their data is really

318
00:11:45,519 --> 00:11:47,680
hard

319
00:11:47,680 --> 00:11:48,959
let's look at some problems that

320
00:11:48,959 --> 00:11:52,399
automation alone cannot solve

321
00:11:53,120 --> 00:11:54,839
firstly

322
00:11:54,839 --> 00:11:57,040
interconnectivity codependencies exist

323
00:11:57,040 --> 00:11:58,560
between different products features and

324
00:11:58,560 --> 00:12:00,720
systems

325
00:12:00,720 --> 00:12:02,639
another problem is coverage

326
00:12:02,639 --> 00:12:04,560
we do not have automation for all

327
00:12:04,560 --> 00:12:06,800
languages systems data stores and

328
00:12:06,800 --> 00:12:09,760
frameworks within the company

329
00:12:09,760 --> 00:12:11,680
often we find that endpoints have

330
00:12:11,680 --> 00:12:13,600
remnant usage

331
00:12:13,600 --> 00:12:15,839
measuring runtime usage is not perfect

332
00:12:15,839 --> 00:12:17,519
as endpoints might

333
00:12:17,519 --> 00:12:20,079
might be hit only by broken apps bug

334
00:12:20,079 --> 00:12:23,279
bounty researchers and so on

335
00:12:23,279 --> 00:12:25,360
finally we err on the side of caution by

336
00:12:25,360 --> 00:12:27,519
finding untyped code references

337
00:12:27,519 --> 00:12:29,760
as well as references to types of data

338
00:12:29,760 --> 00:12:32,079
which you know we we we have to find by

339
00:12:32,079 --> 00:12:34,240
searching code using our text indexing

340
00:12:34,240 --> 00:12:36,800
service so for untyped code references

341
00:12:36,800 --> 00:12:38,959
and forward and for references to data

342
00:12:38,959 --> 00:12:42,399
types we might find false positives

343
00:12:42,399 --> 00:12:44,720
we might also have two unrelated pieces

344
00:12:44,720 --> 00:12:46,480
of code with the same name there might

345
00:12:46,480 --> 00:12:48,480
be two unrelated classes both called

346
00:12:48,480 --> 00:12:50,160
photo utils that from completely

347
00:12:50,160 --> 00:12:53,839
different products for example

348
00:12:54,959 --> 00:12:57,279
our engineers are able to iterate very

349
00:12:57,279 --> 00:12:59,600
rapidly in our code bases sometimes they

350
00:12:59,600 --> 00:13:01,440
can actually iterate on code changes

351
00:13:01,440 --> 00:13:04,320
faster than our automation can

352
00:13:04,320 --> 00:13:06,639
as such an engineer who is defecating a

353
00:13:06,639 --> 00:13:07,680
product

354
00:13:07,680 --> 00:13:09,519
might find that sitting around and

355
00:13:09,519 --> 00:13:11,360
waiting to see if the automation will

356
00:13:11,360 --> 00:13:13,760
will delete their code for them

357
00:13:13,760 --> 00:13:16,800
is not time well spent

358
00:13:18,480 --> 00:13:20,720
to solve this we have built an internal

359
00:13:20,720 --> 00:13:22,560
tool to help engineers deprecate a

360
00:13:22,560 --> 00:13:25,040
product or feature safely efficiently

361
00:13:25,040 --> 00:13:27,120
and completely

362
00:13:27,120 --> 00:13:29,120
this tool lets engineers understand and

363
00:13:29,120 --> 00:13:30,560
break down the steps they'll go through

364
00:13:30,560 --> 00:13:32,320
during their deprecation

365
00:13:32,320 --> 00:13:34,000
and helps them leverage the previous two

366
00:13:34,000 --> 00:13:37,200
systems that we've just talked about

367
00:13:38,320 --> 00:13:41,120
engineers who are using this tool

368
00:13:41,120 --> 00:13:43,920
can import their product or feature into

369
00:13:43,920 --> 00:13:44,959
it

370
00:13:44,959 --> 00:13:46,560
and it helps them understand all of the

371
00:13:46,560 --> 00:13:48,560
individual pieces of code and data that

372
00:13:48,560 --> 00:13:51,839
their product or feature is comprised of

373
00:13:51,839 --> 00:13:54,079
the tool then tells them the high level

374
00:13:54,079 --> 00:13:56,160
order that they should delete their

375
00:13:56,160 --> 00:13:57,600
product or feature and how they are

376
00:13:57,600 --> 00:13:58,800
progressing

377
00:13:58,800 --> 00:14:00,240
so you should typically delete your

378
00:14:00,240 --> 00:14:01,279
endpoints

379
00:14:01,279 --> 00:14:03,279
then maybe your javascript code then

380
00:14:03,279 --> 00:14:06,000
your api then your business logic then

381
00:14:06,000 --> 00:14:07,839
your data

382
00:14:07,839 --> 00:14:10,399
for example

383
00:14:11,279 --> 00:14:13,519
within each category in this tool they

384
00:14:13,519 --> 00:14:15,279
can understand all the surprising things

385
00:14:15,279 --> 00:14:16,720
going on with their code and data which

386
00:14:16,720 --> 00:14:18,880
could cause which could cause issues

387
00:14:18,880 --> 00:14:20,720
which endpoints are currently being hit

388
00:14:20,720 --> 00:14:22,160
where there are some older frameworks

389
00:14:22,160 --> 00:14:23,920
that might be ready to bite them and so

390
00:14:23,920 --> 00:14:25,760
on

391
00:14:25,760 --> 00:14:27,279
engineers can also drill down and

392
00:14:27,279 --> 00:14:29,040
visualize the usage of an individual

393
00:14:29,040 --> 00:14:31,279
symbol of code or type of data

394
00:14:31,279 --> 00:14:32,880
and see how it connects to the rest of

395
00:14:32,880 --> 00:14:34,720
the product or feature as well as to

396
00:14:34,720 --> 00:14:36,720
code and data outside their product or

397
00:14:36,720 --> 00:14:38,880
feature

398
00:14:38,880 --> 00:14:40,800
this working set that the engineer is

399
00:14:40,800 --> 00:14:43,199
analyzing mainly may need adjusting over

400
00:14:43,199 --> 00:14:44,480
time

401
00:14:44,480 --> 00:14:46,160
they may discover extra components to

402
00:14:46,160 --> 00:14:48,240
delete or they may discover some code

403
00:14:48,240 --> 00:14:51,760
that is also in use by someone else

404
00:14:51,760 --> 00:14:53,519
how did we build this tool

405
00:14:53,519 --> 00:14:55,839
well information about code and data is

406
00:14:55,839 --> 00:14:57,440
gathered from the dead code and dead

407
00:14:57,440 --> 00:14:58,720
data cleanup systems that we've just

408
00:14:58,720 --> 00:15:00,560
talked about

409
00:15:00,560 --> 00:15:02,160
this gives us a really nice completeness

410
00:15:02,160 --> 00:15:03,519
property

411
00:15:03,519 --> 00:15:05,279
anything for which we can find no

412
00:15:05,279 --> 00:15:06,639
information

413
00:15:06,639 --> 00:15:08,639
from those first two systems is hence

414
00:15:08,639 --> 00:15:10,639
ready for deletion

415
00:15:10,639 --> 00:15:12,000
this means that any case when we have

416
00:15:12,000 --> 00:15:14,959
some information about some code or data

417
00:15:14,959 --> 00:15:16,800
is a strong signal that it can't

418
00:15:16,800 --> 00:15:20,319
currently be deleted by automation

419
00:15:20,880 --> 00:15:22,720
we gain a very precise understanding of

420
00:15:22,720 --> 00:15:24,399
what exactly is blocking our automation

421
00:15:24,399 --> 00:15:26,160
from proceeding and what must be

422
00:15:26,160 --> 00:15:27,519
completed by an engineer for this

423
00:15:27,519 --> 00:15:30,959
automation to be able to proceed

424
00:15:30,959 --> 00:15:33,519
finally some of these usage signals for

425
00:15:33,519 --> 00:15:35,199
example

426
00:15:35,199 --> 00:15:37,279
if an http endpoint is currently being

427
00:15:37,279 --> 00:15:38,160
hit

428
00:15:38,160 --> 00:15:40,000
don't necessarily cause compilation

429
00:15:40,000 --> 00:15:41,279
errors

430
00:15:41,279 --> 00:15:43,279
if there's a live endpoint in code you

431
00:15:43,279 --> 00:15:44,959
can delete that and that doesn't cause

432
00:15:44,959 --> 00:15:47,120
compile com it doesn't cause compilation

433
00:15:47,120 --> 00:15:49,199
errors

434
00:15:49,199 --> 00:15:50,720
engineers can assess these kinds of

435
00:15:50,720 --> 00:15:52,880
situations for example they might assess

436
00:15:52,880 --> 00:15:54,560
if the endpoint's usage is acceptably

437
00:15:54,560 --> 00:15:55,440
low

438
00:15:55,440 --> 00:15:57,120
and they can instruct the automation to

439
00:15:57,120 --> 00:15:59,120
ignore certain usage signals making

440
00:15:59,120 --> 00:16:02,720
effective use of their valuable time

441
00:16:02,720 --> 00:16:04,320
our dead code and dead data cleanup

442
00:16:04,320 --> 00:16:06,560
systems power this tool and this tool in

443
00:16:06,560 --> 00:16:08,160
turn helps engineers leverage those

444
00:16:08,160 --> 00:16:12,399
cleanup systems to maximum effect safely

445
00:16:13,519 --> 00:16:15,680
this tool is very useful to individual

446
00:16:15,680 --> 00:16:17,279
engineering teams

447
00:16:17,279 --> 00:16:18,880
we have large numbers of teams using it

448
00:16:18,880 --> 00:16:20,959
around the company

449
00:16:20,959 --> 00:16:22,720
it's also useful for the company's

450
00:16:22,720 --> 00:16:24,480
privacy teams

451
00:16:24,480 --> 00:16:26,320
we can use this tool to monitor ongoing

452
00:16:26,320 --> 00:16:28,399
deprecations around the company

453
00:16:28,399 --> 00:16:29,839
and we can find out when they are not

454
00:16:29,839 --> 00:16:32,399
being completed in a timely manner

455
00:16:32,399 --> 00:16:34,480
on a more operational level we can also

456
00:16:34,480 --> 00:16:36,639
enforce that no individual piece of data

457
00:16:36,639 --> 00:16:40,079
is left in a half deleted state

458
00:16:41,839 --> 00:16:44,240
when there's work that automation can't

459
00:16:44,240 --> 00:16:47,360
do the tool educates the engineers about

460
00:16:47,360 --> 00:16:50,399
what they need to do and how to do it

461
00:16:50,399 --> 00:16:52,240
the information that we that we present

462
00:16:52,240 --> 00:16:53,759
to educate our engineers about what to

463
00:16:53,759 --> 00:16:56,240
do isn't generic it's tailored to the

464
00:16:56,240 --> 00:16:57,519
particular code and data that the

465
00:16:57,519 --> 00:17:00,399
engineer is removing

466
00:17:00,399 --> 00:17:02,720
finally we want the user experience that

467
00:17:02,720 --> 00:17:04,240
our engineers have when using this tool

468
00:17:04,240 --> 00:17:05,520
to be good

469
00:17:05,520 --> 00:17:06,880
everything becomes much easier when

470
00:17:06,880 --> 00:17:09,280
engineers find the work to be meaningful

471
00:17:09,280 --> 00:17:12,000
and rewarding

472
00:17:13,919 --> 00:17:15,359
what do i want people to take away from

473
00:17:15,359 --> 00:17:16,480
my talk

474
00:17:16,480 --> 00:17:19,119
well product application can be safe and

475
00:17:19,119 --> 00:17:20,799
efficient while involving thorough

476
00:17:20,799 --> 00:17:24,400
cleanup across many different systems

477
00:17:24,480 --> 00:17:27,520
we have found that combining automation

478
00:17:27,520 --> 00:17:29,440
with engineering tooling is a very

479
00:17:29,440 --> 00:17:32,080
effective strategy both across the space

480
00:17:32,080 --> 00:17:36,159
of removing code and removing data

481
00:17:36,880 --> 00:17:38,720
dead code and dead data removal are

482
00:17:38,720 --> 00:17:41,760
long-term investments

483
00:17:41,760 --> 00:17:44,160
providing tooling and automation is

484
00:17:44,160 --> 00:17:46,080
worthwhile for enabling engineers to

485
00:17:46,080 --> 00:17:49,799
perform this kind of work

