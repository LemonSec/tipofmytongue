1
00:00:10,000 --> 00:00:12,320
hey everyone i'm alejo grigaro sutro i'm

2
00:00:12,320 --> 00:00:14,240
a staff privacy analyst

3
00:00:14,240 --> 00:00:16,320
and i'm shankar garci i'm a staff

4
00:00:16,320 --> 00:00:18,880
privacy engineer and we're from lyft

5
00:00:18,880 --> 00:00:20,800
here to talk to you about how we worked

6
00:00:20,800 --> 00:00:23,039
through user data deletions and exports

7
00:00:23,039 --> 00:00:25,199
for the california consumer privacy act

8
00:00:25,199 --> 00:00:27,519
or ccpa

9
00:00:27,519 --> 00:00:28,880
for those of you who haven't seen us

10
00:00:28,880 --> 00:00:30,480
before lyft is a ride share and

11
00:00:30,480 --> 00:00:32,079
transportation company

12
00:00:32,079 --> 00:00:34,160
our core business is connecting drivers

13
00:00:34,160 --> 00:00:36,480
with people who need rides for a lot of

14
00:00:36,480 --> 00:00:38,559
our users that's what lyft means to them

15
00:00:38,559 --> 00:00:41,200
but we actually do a lot more than that

16
00:00:41,200 --> 00:00:43,360
we operate a vehicle rental program

17
00:00:43,360 --> 00:00:45,120
called flex drive for people who want to

18
00:00:45,120 --> 00:00:48,160
drive for lyft but don't own a car yet

19
00:00:48,160 --> 00:00:50,239
we also offer rental cars for personal

20
00:00:50,239 --> 00:00:52,559
use too and we operate a network of

21
00:00:52,559 --> 00:00:54,399
bikes and scooters in dozens of cities

22
00:00:54,399 --> 00:00:56,559
around the world it's a lot of data to

23
00:00:56,559 --> 00:00:58,399
wrangle across all those lines of

24
00:00:58,399 --> 00:00:59,359
business

25
00:00:59,359 --> 00:01:01,440
we have 18 million riders on our

26
00:01:01,440 --> 00:01:04,000
platform there are over a thousand micro

27
00:01:04,000 --> 00:01:06,159
services that power everything we do

28
00:01:06,159 --> 00:01:08,880
plus we've been at it for over 10 years

29
00:01:08,880 --> 00:01:10,159
and then there's all the stuff most

30
00:01:10,159 --> 00:01:12,400
people don't think about that you still

31
00:01:12,400 --> 00:01:14,400
have to do in order to run a business

32
00:01:14,400 --> 00:01:17,439
like ours we buy insurance for people

33
00:01:17,439 --> 00:01:18,880
while they're driving on our network to

34
00:01:18,880 --> 00:01:21,280
help protect them and their riders

35
00:01:21,280 --> 00:01:23,119
we have to process payment information

36
00:01:23,119 --> 00:01:25,040
for completed rides and that comes with

37
00:01:25,040 --> 00:01:27,680
chargebacks and fraud and all sorts of

38
00:01:27,680 --> 00:01:29,439
edge cases and weirdness

39
00:01:29,439 --> 00:01:31,280
sometimes our scooters decide to go

40
00:01:31,280 --> 00:01:33,119
swimming and we have to go find them and

41
00:01:33,119 --> 00:01:34,720
dry them off give them a little pep talk

42
00:01:34,720 --> 00:01:36,320
and get them back out there

43
00:01:36,320 --> 00:01:38,960
it takes a lot of data to make all that

44
00:01:38,960 --> 00:01:40,960
happen and getting privacy right is

45
00:01:40,960 --> 00:01:43,119
super important to us at lyft but it's a

46
00:01:43,119 --> 00:01:44,880
big job

47
00:01:44,880 --> 00:01:48,159
and ccpa added new dimensions to our big

48
00:01:48,159 --> 00:01:49,680
data problems

49
00:01:49,680 --> 00:01:51,200
the thing with the california consumer

50
00:01:51,200 --> 00:01:53,840
privacy act was that it wasn't a task to

51
00:01:53,840 --> 00:01:55,920
complete and move on from but a

52
00:01:55,920 --> 00:01:57,759
beginning of something bigger both in

53
00:01:57,759 --> 00:02:01,280
privacy legislation and privacy at lyft

54
00:02:01,280 --> 00:02:03,119
ccpa was the first state-level

55
00:02:03,119 --> 00:02:05,119
legislation passed in the united states

56
00:02:05,119 --> 00:02:07,040
and it followed on the heels of europe's

57
00:02:07,040 --> 00:02:09,840
general data protection regulation gdpr

58
00:02:09,840 --> 00:02:13,280
there's since been laws passed in utah

59
00:02:13,280 --> 00:02:16,000
and colorado virginia and connecticut

60
00:02:16,000 --> 00:02:18,879
but ccpa really set the stage in a big

61
00:02:18,879 --> 00:02:20,879
way it called for companies to give

62
00:02:20,879 --> 00:02:22,959
their users a wide range of privacy

63
00:02:22,959 --> 00:02:25,200
rights and we won't have time to cover

64
00:02:25,200 --> 00:02:26,959
it all today

65
00:02:26,959 --> 00:02:29,280
but let's zero in on just these ideas of

66
00:02:29,280 --> 00:02:32,800
data export and deletion

67
00:02:32,879 --> 00:02:35,040
now export and deletion can seem really

68
00:02:35,040 --> 00:02:37,120
simple but actually there's a lot of

69
00:02:37,120 --> 00:02:39,360
complexity that had to be ironed out for

70
00:02:39,360 --> 00:02:42,000
an organization of our size and scope

71
00:02:42,000 --> 00:02:43,680
first of all our solution needed to be

72
00:02:43,680 --> 00:02:44,720
holistic

73
00:02:44,720 --> 00:02:46,560
we talked about how lyft offers a wide

74
00:02:46,560 --> 00:02:48,560
range of services but each of those

75
00:02:48,560 --> 00:02:50,800
services have their own special quirks

76
00:02:50,800 --> 00:02:51,840
and needs

77
00:02:51,840 --> 00:02:53,760
early on in our solutioning it felt like

78
00:02:53,760 --> 00:02:55,280
whatever we came up with there was

79
00:02:55,280 --> 00:02:57,680
always some outlier some part of the

80
00:02:57,680 --> 00:02:59,840
company that couldn't fit that mold and

81
00:02:59,840 --> 00:03:02,319
we had to adjust our approach

82
00:03:02,319 --> 00:03:04,159
then our solution needed to be secure

83
00:03:04,159 --> 00:03:06,080
and useful i'm sure a lot of you are

84
00:03:06,080 --> 00:03:07,760
already familiar with security issues

85
00:03:07,760 --> 00:03:09,840
we're not so different here in privacy

86
00:03:09,840 --> 00:03:10,959
right

87
00:03:10,959 --> 00:03:13,280
like if you're preparing an export of

88
00:03:13,280 --> 00:03:15,360
user data that's a pretty sensitive

89
00:03:15,360 --> 00:03:17,599
target for bad actors right

90
00:03:17,599 --> 00:03:19,760
but it also needs to be secure in that

91
00:03:19,760 --> 00:03:22,800
it's reliable it has to work

92
00:03:22,800 --> 00:03:25,040
finally we had to balance all sorts of

93
00:03:25,040 --> 00:03:27,200
competing needs and gotchas while we

94
00:03:27,200 --> 00:03:29,920
were working on export and deletion

95
00:03:29,920 --> 00:03:31,760
business functions from product and

96
00:03:31,760 --> 00:03:34,480
finance to trust and safety all rely on

97
00:03:34,480 --> 00:03:36,560
data being available or structured in a

98
00:03:36,560 --> 00:03:39,040
particular way and deleting data can

99
00:03:39,040 --> 00:03:40,560
threaten stability

100
00:03:40,560 --> 00:03:41,760
like

101
00:03:41,760 --> 00:03:44,560
we can't have people deleting their

102
00:03:44,560 --> 00:03:46,560
accounts halfway through a ride

103
00:03:46,560 --> 00:03:48,480
now take that and multiply it by a

104
00:03:48,480 --> 00:03:50,720
hundred edge cases like that and you can

105
00:03:50,720 --> 00:03:52,799
see where a lot of negotiation would

106
00:03:52,799 --> 00:03:54,959
have to happen in order to deliver

107
00:03:54,959 --> 00:03:59,040
effective export and deletion

108
00:03:59,680 --> 00:04:01,360
so i'll hand things off to sean carr who

109
00:04:01,360 --> 00:04:03,360
can fill you in on the technical details

110
00:04:03,360 --> 00:04:05,439
of how we built an export and deletion

111
00:04:05,439 --> 00:04:08,720
solution for our users

112
00:04:08,959 --> 00:04:10,480
thank you alejo

113
00:04:10,480 --> 00:04:12,000
i would like to start with providing

114
00:04:12,000 --> 00:04:13,920
some background on our infrastructure

115
00:04:13,920 --> 00:04:16,560
that is relevant to our presentation

116
00:04:16,560 --> 00:04:19,120
at lyft we primarily run our software on

117
00:04:19,120 --> 00:04:21,839
aws and use microservices-based

118
00:04:21,839 --> 00:04:23,759
architecture with services interacting

119
00:04:23,759 --> 00:04:26,560
with each other using rpc calls

120
00:04:26,560 --> 00:04:28,080
our product teams have high degree of

121
00:04:28,080 --> 00:04:29,600
freedom in designing building and

122
00:04:29,600 --> 00:04:31,520
managing their services

123
00:04:31,520 --> 00:04:33,040
teams are responsible for all the

124
00:04:33,040 --> 00:04:34,560
technical aspects of the software they

125
00:04:34,560 --> 00:04:36,560
build

126
00:04:36,560 --> 00:04:38,720
if you recollect the strategy goals we

127
00:04:38,720 --> 00:04:40,720
had to solve a one-size-fits-all

128
00:04:40,720 --> 00:04:43,040
solution build a secure reliable and

129
00:04:43,040 --> 00:04:45,600
usable solution and balancing computing

130
00:04:45,600 --> 00:04:47,040
needs

131
00:04:47,040 --> 00:04:48,720
let's start with some considerations

132
00:04:48,720 --> 00:04:50,639
around developing a one-size-fits-all

133
00:04:50,639 --> 00:04:52,000
solution

134
00:04:52,000 --> 00:04:53,919
we ideally want to have a common api

135
00:04:53,919 --> 00:04:56,320
with one standard sla requirement that

136
00:04:56,320 --> 00:04:58,479
can be met by a diverse set of services

137
00:04:58,479 --> 00:05:00,080
even though they may be using different

138
00:05:00,080 --> 00:05:03,039
kinds of underlying infrastructure

139
00:05:03,039 --> 00:05:05,280
very early on we considered and quickly

140
00:05:05,280 --> 00:05:07,280
discarded the idea of building a single

141
00:05:07,280 --> 00:05:09,520
service that has access to all the data

142
00:05:09,520 --> 00:05:11,120
stores

143
00:05:11,120 --> 00:05:12,720
this would be very dangerous for many

144
00:05:12,720 --> 00:05:14,320
reasons

145
00:05:14,320 --> 00:05:15,919
we can't anticipate all the possible

146
00:05:15,919 --> 00:05:18,160
interactions beforehand and therefore

147
00:05:18,160 --> 00:05:20,000
any repercussions of deleting that data

148
00:05:20,000 --> 00:05:21,440
without the knowledge of the local

149
00:05:21,440 --> 00:05:23,759
context

150
00:05:23,759 --> 00:05:25,120
practice is also dangerous from the

151
00:05:25,120 --> 00:05:27,199
security perspective

152
00:05:27,199 --> 00:05:29,039
the potential collateral damage for any

153
00:05:29,039 --> 00:05:30,639
intrusion to this central service can

154
00:05:30,639 --> 00:05:32,960
result in unwanted access or deletion of

155
00:05:32,960 --> 00:05:35,440
customer data

156
00:05:35,440 --> 00:05:37,039
a completely decentralized solution

157
00:05:37,039 --> 00:05:39,280
isn't an option either

158
00:05:39,280 --> 00:05:41,120
this would be problem because each team

159
00:05:41,120 --> 00:05:42,320
might end up having a different

160
00:05:42,320 --> 00:05:44,960
implementation with each taking

161
00:05:44,960 --> 00:05:46,560
different functional choices to address

162
00:05:46,560 --> 00:05:48,560
their unique challenges

163
00:05:48,560 --> 00:05:50,800
it also it would also be very expensive

164
00:05:50,800 --> 00:05:52,560
from technical perspective to build and

165
00:05:52,560 --> 00:05:55,440
manage such a system

166
00:05:55,440 --> 00:05:57,199
using a shared responsibility model was

167
00:05:57,199 --> 00:05:58,240
the key

168
00:05:58,240 --> 00:05:59,600
we the privacy team defined the high

169
00:05:59,600 --> 00:06:01,919
level governing principles and outcomes

170
00:06:01,919 --> 00:06:03,600
and expected the product teams to use

171
00:06:03,600 --> 00:06:06,080
their good judgment in executing them we

172
00:06:06,080 --> 00:06:07,840
also build tools and services to make it

173
00:06:07,840 --> 00:06:10,560
easy for them to meet those requirements

174
00:06:10,560 --> 00:06:12,000
so what does this mean for our data

175
00:06:12,000 --> 00:06:14,080
deletion and expert service

176
00:06:14,080 --> 00:06:15,759
federated architecture is a natural

177
00:06:15,759 --> 00:06:16,720
choice that meets the shared

178
00:06:16,720 --> 00:06:18,639
responsibility model

179
00:06:18,639 --> 00:06:20,960
a central orchestrator is responsible

180
00:06:20,960 --> 00:06:22,800
for the end-to-end life cycle management

181
00:06:22,800 --> 00:06:24,639
of a data export or a data deletion

182
00:06:24,639 --> 00:06:26,080
request

183
00:06:26,080 --> 00:06:27,919
it breaks down a data deletion or a data

184
00:06:27,919 --> 00:06:30,479
export request into a sequence of tasks

185
00:06:30,479 --> 00:06:32,400
with their inputs or outputs connected

186
00:06:32,400 --> 00:06:35,360
to each other these tasks are defined

187
00:06:35,360 --> 00:06:36,960
one for each service

188
00:06:36,960 --> 00:06:39,440
detecting a particular outcome

189
00:06:39,440 --> 00:06:41,440
using these tasks as building blocks a

190
00:06:41,440 --> 00:06:43,039
request is processed and moved to

191
00:06:43,039 --> 00:06:45,280
completion

192
00:06:45,280 --> 00:06:47,440
the central orchestrator uses a simple

193
00:06:47,440 --> 00:06:48,960
state machine to model the task

194
00:06:48,960 --> 00:06:50,479
dependencies

195
00:06:50,479 --> 00:06:52,639
and uses a series of asynchronous

196
00:06:52,639 --> 00:06:53,759
requests

197
00:06:53,759 --> 00:06:56,800
to dictate the outcome from the services

198
00:06:56,800 --> 00:06:59,199
it also monitors these services

199
00:06:59,199 --> 00:07:01,520
and if needed uses mechanisms luckily

200
00:07:01,520 --> 00:07:02,400
tries

201
00:07:02,400 --> 00:07:04,160
to ensure progress is made for every

202
00:07:04,160 --> 00:07:06,479
request

203
00:07:06,479 --> 00:07:08,319
product teams that manage customer data

204
00:07:08,319 --> 00:07:10,639
implement simple apis to respond

205
00:07:10,639 --> 00:07:12,720
to these requests

206
00:07:12,720 --> 00:07:14,400
by having these teams to work closely

207
00:07:14,400 --> 00:07:16,000
with the data make their own independent

208
00:07:16,000 --> 00:07:17,440
determination

209
00:07:17,440 --> 00:07:19,039
helps us to meet unique challenges of

210
00:07:19,039 --> 00:07:21,759
each service and or its data stores

211
00:07:21,759 --> 00:07:23,360
but still meet the high level privacy

212
00:07:23,360 --> 00:07:25,680
goals

213
00:07:28,880 --> 00:07:30,160
here is the eye level overview of the

214
00:07:30,160 --> 00:07:32,720
system depicting erasure request

215
00:07:32,720 --> 00:07:34,960
orchestrator depicted here in blue color

216
00:07:34,960 --> 00:07:36,319
receives the eraser request from the

217
00:07:36,319 --> 00:07:37,599
customer

218
00:07:37,599 --> 00:07:39,520
it performs a sequence of checks with a

219
00:07:39,520 --> 00:07:41,360
small set of services which we call as

220
00:07:41,360 --> 00:07:43,599
sanction endpoint services

221
00:07:43,599 --> 00:07:45,840
depicted in purple color

222
00:07:45,840 --> 00:07:47,759
once all the checks have passed and the

223
00:07:47,759 --> 00:07:49,199
determination has been made to allow the

224
00:07:49,199 --> 00:07:50,319
deletion

225
00:07:50,319 --> 00:07:51,919
to extract the list of services that

226
00:07:51,919 --> 00:07:54,960
host the customer data from a data store

227
00:07:54,960 --> 00:07:57,120
catalog service

228
00:07:57,120 --> 00:07:58,720
then using this information the

229
00:07:58,720 --> 00:08:00,560
orchestrator service generate events for

230
00:08:00,560 --> 00:08:03,440
this service to respond to

231
00:08:03,440 --> 00:08:04,879
the response can be either deleting the

232
00:08:04,879 --> 00:08:07,840
data or extracting the data

233
00:08:07,840 --> 00:08:09,360
i know we haven't talked much about the

234
00:08:09,360 --> 00:08:11,039
function endpoints or the data store

235
00:08:11,039 --> 00:08:12,639
catalog

236
00:08:12,639 --> 00:08:14,160
some of you might have also noticed we

237
00:08:14,160 --> 00:08:15,680
handle request to offline data store

238
00:08:15,680 --> 00:08:19,919
like hive and presto little differently

239
00:08:20,240 --> 00:08:21,599
we will also talk about each of these

240
00:08:21,599 --> 00:08:23,120
aspects in more detail in the next few

241
00:08:23,120 --> 00:08:26,120
slides

242
00:08:28,160 --> 00:08:29,440
here is high level overview of our

243
00:08:29,440 --> 00:08:31,039
export system

244
00:08:31,039 --> 00:08:32,640
if you observe it is very similar to the

245
00:08:32,640 --> 00:08:34,080
razer workflow

246
00:08:34,080 --> 00:08:36,080
in fact it's the same system

247
00:08:36,080 --> 00:08:37,839
it only uses different kind of events to

248
00:08:37,839 --> 00:08:40,080
handle export requests

249
00:08:40,080 --> 00:08:42,159
the biggest difference you see here is

250
00:08:42,159 --> 00:08:43,120
that

251
00:08:43,120 --> 00:08:44,800
in the eraser request there is no need

252
00:08:44,800 --> 00:08:48,880
of any staging environment to store data

253
00:08:48,880 --> 00:08:51,279
in the export request

254
00:08:51,279 --> 00:08:52,880
workflow there is a data staging

255
00:08:52,880 --> 00:08:54,959
mechanism where the data from all the

256
00:08:54,959 --> 00:08:57,440
services are stored temporarily before

257
00:08:57,440 --> 00:09:00,720
ultimately delivering to the user

258
00:09:00,720 --> 00:09:02,160
to ensure that each of these services

259
00:09:02,160 --> 00:09:04,240
can independently independently evolve

260
00:09:04,240 --> 00:09:05,920
we use protobuf as our data

261
00:09:05,920 --> 00:09:07,839
serialization format to store and

262
00:09:07,839 --> 00:09:10,560
transfer data

263
00:09:11,600 --> 00:09:13,440
now that we have our one-size-fits-all

264
00:09:13,440 --> 00:09:14,480
solution

265
00:09:14,480 --> 00:09:16,240
let's think about our second goal

266
00:09:16,240 --> 00:09:18,080
building a secure reliable and usable

267
00:09:18,080 --> 00:09:19,360
solution

268
00:09:19,360 --> 00:09:21,360
if you recollect it is a data store

269
00:09:21,360 --> 00:09:22,800
catalog service that provides the

270
00:09:22,800 --> 00:09:24,480
orchestrator with the list of services

271
00:09:24,480 --> 00:09:26,959
from which to extract or delete the data

272
00:09:26,959 --> 00:09:28,720
this information must be up to date and

273
00:09:28,720 --> 00:09:30,560
accurate so that we can push user

274
00:09:30,560 --> 00:09:33,360
request events to applicable systems

275
00:09:33,360 --> 00:09:35,120
in such a complex system involving

276
00:09:35,120 --> 00:09:36,880
hundreds of services this kind of

277
00:09:36,880 --> 00:09:39,360
problem can appear in many places

278
00:09:39,360 --> 00:09:40,640
for this reason

279
00:09:40,640 --> 00:09:42,720
one of our strategic goal was to ensure

280
00:09:42,720 --> 00:09:44,240
that all interactions with the product

281
00:09:44,240 --> 00:09:45,839
teams are designed for safety and

282
00:09:45,839 --> 00:09:47,279
usability

283
00:09:47,279 --> 00:09:49,360
developers will make mistakes

284
00:09:49,360 --> 00:09:51,360
they may forget to follow some steps

285
00:09:51,360 --> 00:09:53,200
during their product development

286
00:09:53,200 --> 00:09:54,959
and so we want to utilize automation and

287
00:09:54,959 --> 00:09:58,080
validity checks where possible

288
00:09:58,080 --> 00:09:59,680
we also have to rely on the principle of

289
00:09:59,680 --> 00:10:01,360
least astonishment in designing the

290
00:10:01,360 --> 00:10:02,959
systems

291
00:10:02,959 --> 00:10:04,720
that means reducing the cognitive load

292
00:10:04,720 --> 00:10:06,480
on the developers

293
00:10:06,480 --> 00:10:08,320
we wanted our naming conventions to be

294
00:10:08,320 --> 00:10:10,000
meaningful and easy to use

295
00:10:10,000 --> 00:10:11,600
we wanted our abstractions to be

296
00:10:11,600 --> 00:10:14,240
non-leaky

297
00:10:15,120 --> 00:10:16,720
the solution to meet these goals was to

298
00:10:16,720 --> 00:10:17,920
make privacy into the software

299
00:10:17,920 --> 00:10:20,800
development life cycle

300
00:10:23,040 --> 00:10:24,399
rather than having privacy as an

301
00:10:24,399 --> 00:10:26,079
afterthought or as a getting mechanism

302
00:10:26,079 --> 00:10:28,079
before launching we wanted to make sure

303
00:10:28,079 --> 00:10:30,720
privacy is considered at each stage

304
00:10:30,720 --> 00:10:32,399
product teams incorporate privacy

305
00:10:32,399 --> 00:10:34,640
metadata tags into their code

306
00:10:34,640 --> 00:10:36,480
for example the terraform modules are

307
00:10:36,480 --> 00:10:39,760
enhanced to include privacy tags

308
00:10:39,760 --> 00:10:41,360
visualizations and code organized into

309
00:10:41,360 --> 00:10:43,120
modules made it easy for developers to

310
00:10:43,120 --> 00:10:44,800
understand and build a mental model of

311
00:10:44,800 --> 00:10:46,560
the system

312
00:10:46,560 --> 00:10:48,480
this helps them clearly understand the

313
00:10:48,480 --> 00:10:50,079
aspects of the system that they are

314
00:10:50,079 --> 00:10:51,760
responsible for

315
00:10:51,760 --> 00:10:53,519
and ensure the operational workload and

316
00:10:53,519 --> 00:10:55,680
the on-call support would be shared with

317
00:10:55,680 --> 00:10:58,320
the teams uniformly and not cause burned

318
00:10:58,320 --> 00:11:01,760
out for any teams

319
00:11:01,760 --> 00:11:03,680
we focus on a single source of truth as

320
00:11:03,680 --> 00:11:05,200
a guiding principle which means

321
00:11:05,200 --> 00:11:06,480
developers don't have to declare the

322
00:11:06,480 --> 00:11:09,200
same set of tags at different places

323
00:11:09,200 --> 00:11:10,880
we have a set of privacy checks baked

324
00:11:10,880 --> 00:11:12,959
into our cicd pipeline to ensure any

325
00:11:12,959 --> 00:11:14,959
omissions or mistakes of this metadata

326
00:11:14,959 --> 00:11:17,839
are promptly identified and fixed

327
00:11:17,839 --> 00:11:19,440
all this information is extracted and

328
00:11:19,440 --> 00:11:23,120
hosted by the data store catalog service

329
00:11:23,120 --> 00:11:25,200
we also have other privacy outing

330
00:11:25,200 --> 00:11:27,120
infrastructure that exist outside this

331
00:11:27,120 --> 00:11:29,040
process to make independent assessments

332
00:11:29,040 --> 00:11:31,760
and minimize mistakes

333
00:11:31,760 --> 00:11:33,600
we build libraries for service teams to

334
00:11:33,600 --> 00:11:34,560
use

335
00:11:34,560 --> 00:11:36,160
the darden the api interactions with the

336
00:11:36,160 --> 00:11:37,920
central orchestrator service making it

337
00:11:37,920 --> 00:11:38,959
easier for them to build new

338
00:11:38,959 --> 00:11:40,959
integrations build observability

339
00:11:40,959 --> 00:11:43,279
dashboards we also have run books for

340
00:11:43,279 --> 00:11:46,480
teams to try and fix issues quickly

341
00:11:46,480 --> 00:11:48,000
product teams have used their learnings

342
00:11:48,000 --> 00:11:49,839
to improve these shared libraries

343
00:11:49,839 --> 00:11:53,360
thereby benefiting all the teams

344
00:11:55,600 --> 00:11:57,279
let's talk about our final strategic

345
00:11:57,279 --> 00:12:00,560
goal of balancing competing needs

346
00:12:00,560 --> 00:12:02,160
we all know that every business has to

347
00:12:02,160 --> 00:12:04,720
manage a host of competing needs

348
00:12:04,720 --> 00:12:06,560
similarly in lips case

349
00:12:06,560 --> 00:12:08,800
they can be complicated situations

350
00:12:08,800 --> 00:12:10,720
whereas users eraser requests can't be

351
00:12:10,720 --> 00:12:12,720
done right away

352
00:12:12,720 --> 00:12:14,320
this can be for reasons like a writer

353
00:12:14,320 --> 00:12:17,200
having pending payment to be processed

354
00:12:17,200 --> 00:12:18,800
it's the product teams like the payment

355
00:12:18,800 --> 00:12:21,040
service in this stated example

356
00:12:21,040 --> 00:12:22,959
that a very good understanding of how

357
00:12:22,959 --> 00:12:25,760
those requests can be processed

358
00:12:25,760 --> 00:12:27,920
to accommodate this need we implemented

359
00:12:27,920 --> 00:12:29,680
an easy to integrate interface called

360
00:12:29,680 --> 00:12:31,519
sanction endpoints

361
00:12:31,519 --> 00:12:33,200
which the product teams used to enforce

362
00:12:33,200 --> 00:12:35,760
such checks

363
00:12:36,399 --> 00:12:38,320
in some cases especially flagged by our

364
00:12:38,320 --> 00:12:39,680
legal team

365
00:12:39,680 --> 00:12:41,440
we have to retain data even after an

366
00:12:41,440 --> 00:12:44,320
eraser request is being made

367
00:12:44,320 --> 00:12:46,480
in this in those situations we might

368
00:12:46,480 --> 00:12:48,240
copy the data into a highly secure and

369
00:12:48,240 --> 00:12:49,839
purpose limited world

370
00:12:49,839 --> 00:12:53,839
just before the original data is deleted

371
00:12:54,720 --> 00:12:56,160
we glossed over the details about the

372
00:12:56,160 --> 00:12:57,680
interactions with offline data stores in

373
00:12:57,680 --> 00:12:59,760
the system design slide

374
00:12:59,760 --> 00:13:01,519
extracting or deleting data from offline

375
00:13:01,519 --> 00:13:03,519
resources using a request response model

376
00:13:03,519 --> 00:13:05,279
is not feasible because of the impedance

377
00:13:05,279 --> 00:13:07,040
mismatch

378
00:13:07,040 --> 00:13:08,880
for example deleting data from offline

379
00:13:08,880 --> 00:13:10,399
data stores effectively would needed

380
00:13:10,399 --> 00:13:13,040
complete rewrite

381
00:13:13,040 --> 00:13:14,480
we abstract this complexity from the

382
00:13:14,480 --> 00:13:16,480
central orchestrator service

383
00:13:16,480 --> 00:13:18,000
which interacts with all the services in

384
00:13:18,000 --> 00:13:20,399
a request response mode by adding an

385
00:13:20,399 --> 00:13:22,160
additional layer of abstraction

386
00:13:22,160 --> 00:13:23,760
we add a new service called analytics

387
00:13:23,760 --> 00:13:25,920
orchestrator for this purpose

388
00:13:25,920 --> 00:13:28,560
it acts as a proxy between etl jobs that

389
00:13:28,560 --> 00:13:29,920
performs the actual extraction or

390
00:13:29,920 --> 00:13:32,000
deletion and the central orchestrator

391
00:13:32,000 --> 00:13:34,079
service

392
00:13:34,079 --> 00:13:35,360
there are other additional challenges

393
00:13:35,360 --> 00:13:37,040
with offline data stores in particular

394
00:13:37,040 --> 00:13:39,680
that we need to be very mindful of

395
00:13:39,680 --> 00:13:41,760
first the issue of whether to execute a

396
00:13:41,760 --> 00:13:43,600
particular deletion request exactly once

397
00:13:43,600 --> 00:13:45,600
or at least once

398
00:13:45,600 --> 00:13:47,360
offline data stores are mostly secondary

399
00:13:47,360 --> 00:13:48,480
data stores

400
00:13:48,480 --> 00:13:50,320
that store a copy of the data created in

401
00:13:50,320 --> 00:13:53,040
the online data store like dynamodb

402
00:13:53,040 --> 00:13:54,480
data generally flows through multiple

403
00:13:54,480 --> 00:13:56,000
hubs across various systems before

404
00:13:56,000 --> 00:13:58,480
landing into the offline data store

405
00:13:58,480 --> 00:14:01,440
deleting data once may not be sufficient

406
00:14:01,440 --> 00:14:03,040
since some data might be in transit at

407
00:14:03,040 --> 00:14:05,279
the time of deletion

408
00:14:05,279 --> 00:14:07,920
for this reason deletion etl jobs also

409
00:14:07,920 --> 00:14:09,440
include past deletion request as an

410
00:14:09,440 --> 00:14:11,040
additional guarantee that the internet

411
00:14:11,040 --> 00:14:13,839
data is deleted

412
00:14:13,839 --> 00:14:14,800
second

413
00:14:14,800 --> 00:14:16,480
the atl jobs needs to be designed for

414
00:14:16,480 --> 00:14:17,600
failure

415
00:14:17,600 --> 00:14:19,440
a single atl deletion job can generate

416
00:14:19,440 --> 00:14:21,279
hundreds of airflow tasks

417
00:14:21,279 --> 00:14:24,000
and this comes with significant cost

418
00:14:24,000 --> 00:14:25,920
a complete rerun of an ideal job for a

419
00:14:25,920 --> 00:14:28,720
single task failure may not be feasible

420
00:14:28,720 --> 00:14:30,639
mechanisms like check pointing can help

421
00:14:30,639 --> 00:14:32,480
recover quickly and not throw away a lot

422
00:14:32,480 --> 00:14:34,720
of work

423
00:14:34,720 --> 00:14:36,240
failure of destructive operations like

424
00:14:36,240 --> 00:14:38,320
area can have the potential to cause

425
00:14:38,320 --> 00:14:40,160
data inconsistencies with partial

426
00:14:40,160 --> 00:14:42,880
erasure and dangling pointers

427
00:14:42,880 --> 00:14:44,880
we focused on implementing item potency

428
00:14:44,880 --> 00:14:46,320
using techniques like creating backup

429
00:14:46,320 --> 00:14:48,079
tables and pointer swapping operations

430
00:14:48,079 --> 00:14:51,359
to support consistency

431
00:14:54,480 --> 00:14:56,000
now coming to some of the lessons we

432
00:14:56,000 --> 00:14:58,240
learned along the way

433
00:14:58,240 --> 00:15:00,079
the most important takeaway is to avoid

434
00:15:00,079 --> 00:15:02,160
things like consensus protocols or

435
00:15:02,160 --> 00:15:03,920
two-phase commit to synchronize actions

436
00:15:03,920 --> 00:15:06,399
across various services

437
00:15:06,399 --> 00:15:08,079
they introduce significant complexity

438
00:15:08,079 --> 00:15:09,279
into the system

439
00:15:09,279 --> 00:15:11,199
and require each participating service

440
00:15:11,199 --> 00:15:13,600
to implement complex protocols

441
00:15:13,600 --> 00:15:15,519
it also makes it harder to on-board or

442
00:15:15,519 --> 00:15:17,360
off-board services

443
00:15:17,360 --> 00:15:19,040
it might need more coordination between

444
00:15:19,040 --> 00:15:20,720
teams and may not scale beyond a certain

445
00:15:20,720 --> 00:15:22,399
number of clients

446
00:15:22,399 --> 00:15:23,440
instead

447
00:15:23,440 --> 00:15:25,199
we found success in having a simple

448
00:15:25,199 --> 00:15:27,040
workflow management system

449
00:15:27,040 --> 00:15:29,600
that organized export or deletion into

450
00:15:29,600 --> 00:15:32,480
sequence of tasks

451
00:15:33,120 --> 00:15:34,639
the second lesson i would like to share

452
00:15:34,639 --> 00:15:37,040
is to plan around uncertainty

453
00:15:37,040 --> 00:15:38,959
systems and users behavior is

454
00:15:38,959 --> 00:15:40,959
unpredictable you might experience

455
00:15:40,959 --> 00:15:43,360
issues that you could never plan for

456
00:15:43,360 --> 00:15:44,880
what do you do if a team duplicates your

457
00:15:44,880 --> 00:15:47,199
service without notifying you

458
00:15:47,199 --> 00:15:48,720
what happens if a ticket is filed for

459
00:15:48,720 --> 00:15:51,279
faulty service but no one reacts to it

460
00:15:51,279 --> 00:15:54,720
and or there's no remedy to it

461
00:15:54,720 --> 00:15:56,480
these were situations we predicted and

462
00:15:56,480 --> 00:15:59,440
accounted for in our architecture

463
00:15:59,440 --> 00:16:00,880
and the last one which is true for

464
00:16:00,880 --> 00:16:02,240
managing any large-scale distributed

465
00:16:02,240 --> 00:16:04,160
system is to have robust

466
00:16:04,160 --> 00:16:06,399
observability infrastructure to capture

467
00:16:06,399 --> 00:16:09,720
end-to-end signals

468
00:16:10,480 --> 00:16:12,160
so i learned things back to lahore to

469
00:16:12,160 --> 00:16:13,680
summarize our experience building this

470
00:16:13,680 --> 00:16:16,000
service

471
00:16:17,519 --> 00:16:19,440
thanks shankar and i know what you all

472
00:16:19,440 --> 00:16:21,519
are thinking at this point so then what

473
00:16:21,519 --> 00:16:22,639
happened

474
00:16:22,639 --> 00:16:25,440
well the rest is epilogue we built it

475
00:16:25,440 --> 00:16:28,000
and launched it at the beginning of 2020

476
00:16:28,000 --> 00:16:29,920
the export and deletion systems went

477
00:16:29,920 --> 00:16:32,160
live and began serving lyft users

478
00:16:32,160 --> 00:16:34,880
looking to exercise their privacy rights

479
00:16:34,880 --> 00:16:36,800
of course we're continually improving

480
00:16:36,800 --> 00:16:38,320
these systems and integrating new

481
00:16:38,320 --> 00:16:40,480
products but most of that operations

482
00:16:40,480 --> 00:16:42,880
happened in the first 12 months

483
00:16:42,880 --> 00:16:44,959
we got that one-size-fits-all solution

484
00:16:44,959 --> 00:16:47,120
by using a federated architecture that

485
00:16:47,120 --> 00:16:48,399
could work for all our different

486
00:16:48,399 --> 00:16:50,000
microservices

487
00:16:50,000 --> 00:16:52,560
we were able to shift left a lot of the

488
00:16:52,560 --> 00:16:54,639
privacy concerns from late stages of the

489
00:16:54,639 --> 00:16:56,880
product development life cycle to

490
00:16:56,880 --> 00:16:59,839
earlier ones to save time and effort and

491
00:16:59,839 --> 00:17:01,199
headache

492
00:17:01,199 --> 00:17:02,880
we got reliable and usable

493
00:17:02,880 --> 00:17:04,720
infrastructure by developing that

494
00:17:04,720 --> 00:17:06,319
event-driven model and giving

495
00:17:06,319 --> 00:17:08,240
microservices the flexibility they

496
00:17:08,240 --> 00:17:10,720
needed to take care of user requests

497
00:17:10,720 --> 00:17:13,359
when it could be minimally disruptive

498
00:17:13,359 --> 00:17:15,679
and finally we were able to balance

499
00:17:15,679 --> 00:17:17,679
those competing needs by having a

500
00:17:17,679 --> 00:17:20,559
granular and careful stepwise process it

501
00:17:20,559 --> 00:17:22,079
was fault-tolerant

502
00:17:22,079 --> 00:17:24,480
non-blocking and used item-potent

503
00:17:24,480 --> 00:17:26,880
actions that were easy to reason about

504
00:17:26,880 --> 00:17:28,880
while data that absolutely had to be

505
00:17:28,880 --> 00:17:31,039
retained for a very limited purpose

506
00:17:31,039 --> 00:17:33,840
could be vaulted

507
00:17:34,240 --> 00:17:36,480
and all that planning paid off this was

508
00:17:36,480 --> 00:17:38,559
a really big win for us because it was

509
00:17:38,559 --> 00:17:40,559
so important that we do this without

510
00:17:40,559 --> 00:17:42,480
disrupting the whole company

511
00:17:42,480 --> 00:17:44,799
distributed coordination among so many

512
00:17:44,799 --> 00:17:46,480
teams and services would have been

513
00:17:46,480 --> 00:17:48,559
really tough and coming up with the

514
00:17:48,559 --> 00:17:50,720
right engineering approach made all the

515
00:17:50,720 --> 00:17:51,919
difference

516
00:17:51,919 --> 00:17:53,840
we managed to scale effectively by

517
00:17:53,840 --> 00:17:55,600
mindfully developing this system that

518
00:17:55,600 --> 00:17:58,400
played to lifts strengths like diversity

519
00:17:58,400 --> 00:18:01,520
of services and technical configurations

520
00:18:01,520 --> 00:18:02,960
throughout the process we were able to

521
00:18:02,960 --> 00:18:04,720
achieve excellent observability

522
00:18:04,720 --> 00:18:06,960
carefully tracking each step of these

523
00:18:06,960 --> 00:18:08,640
processes gave us the information we

524
00:18:08,640 --> 00:18:10,720
needed to troubleshoot problem areas and

525
00:18:10,720 --> 00:18:12,880
fix them quickly

526
00:18:12,880 --> 00:18:15,679
and resilience where no single point of

527
00:18:15,679 --> 00:18:17,600
failure in this new infrastructure could

528
00:18:17,600 --> 00:18:19,840
threaten the integrity of core business

529
00:18:19,840 --> 00:18:22,320
systems

530
00:18:22,559 --> 00:18:24,000
thank you so much for tuning in to our

531
00:18:24,000 --> 00:18:26,080
presentation just a quick plug for the

532
00:18:26,080 --> 00:18:28,320
team lyft is hiring in the u.s and

533
00:18:28,320 --> 00:18:30,160
mexico if you're passionate about

534
00:18:30,160 --> 00:18:31,919
privacy and security by design and

535
00:18:31,919 --> 00:18:33,600
building the infrastructure that powers

536
00:18:33,600 --> 00:18:35,520
it all think about joining our team

537
00:18:35,520 --> 00:18:41,160
we're at lyft.com careers thanks again

538
00:18:47,360 --> 00:18:49,439
you

