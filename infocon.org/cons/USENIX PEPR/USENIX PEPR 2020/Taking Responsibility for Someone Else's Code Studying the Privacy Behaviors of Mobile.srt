1
00:00:09,040 --> 00:00:09,519
hi

2
00:00:09,519 --> 00:00:11,519
i'm sarah jegelman and i'm the research

3
00:00:11,519 --> 00:00:12,960
director of the usable security and

4
00:00:12,960 --> 00:00:13,920
privacy group

5
00:00:13,920 --> 00:00:15,280
at the international computer science

6
00:00:15,280 --> 00:00:16,960
institute which is a research institute

7
00:00:16,960 --> 00:00:18,720
affiliated with uc berkeley

8
00:00:18,720 --> 00:00:20,640
i'm also the co-founder and cto of app

9
00:00:20,640 --> 00:00:22,880
census which is the commercialization of

10
00:00:22,880 --> 00:00:24,480
some of this research

11
00:00:24,480 --> 00:00:25,840
today i was going to talk about some of

12
00:00:25,840 --> 00:00:27,439
the tools that my research group has

13
00:00:27,439 --> 00:00:28,880
been building for studying

14
00:00:28,880 --> 00:00:31,279
mobile app privacy behaviors and how

15
00:00:31,279 --> 00:00:33,040
we've been using these tools to look at

16
00:00:33,040 --> 00:00:34,480
compliance at scale

17
00:00:34,480 --> 00:00:36,960
and by compliance i mean whether apps

18
00:00:36,960 --> 00:00:38,239
are complying with their

19
00:00:38,239 --> 00:00:41,600
you know privacy policies as well as

20
00:00:41,600 --> 00:00:44,640
laws such as the gdpr in europe

21
00:00:44,640 --> 00:00:46,800
and in the u.s we've been starting to

22
00:00:46,800 --> 00:00:48,640
look at coppa which is the children's

23
00:00:48,640 --> 00:00:50,320
online privacy protection act

24
00:00:50,320 --> 00:00:53,520
as well as ccpa we found that many of

25
00:00:53,520 --> 00:00:55,199
the really questionable behaviors that

26
00:00:55,199 --> 00:00:56,800
we find from mobile apps are due to

27
00:00:56,800 --> 00:00:58,879
third third-party sdks in many

28
00:00:58,879 --> 00:01:00,480
many cases that it's likely the

29
00:01:00,480 --> 00:01:02,160
developers don't even know that their

30
00:01:02,160 --> 00:01:02,640
apps

31
00:01:02,640 --> 00:01:05,600
are engaging in these behaviors and so

32
00:01:05,600 --> 00:01:05,920
uh

33
00:01:05,920 --> 00:01:08,320
the the bottom line in from this talk um

34
00:01:08,320 --> 00:01:09,760
is that

35
00:01:09,760 --> 00:01:13,119
while you know code reuse has created

36
00:01:13,119 --> 00:01:15,360
many benefits in terms of

37
00:01:15,360 --> 00:01:16,799
uh rapidly being able to add

38
00:01:16,799 --> 00:01:18,479
functionality into apps

39
00:01:18,479 --> 00:01:20,320
uh increasingly we're in a situation

40
00:01:20,320 --> 00:01:22,320
where it's causing severe problems for

41
00:01:22,320 --> 00:01:23,439
compliance

42
00:01:23,439 --> 00:01:25,439
and i hope that from this talk you'll be

43
00:01:25,439 --> 00:01:27,439
able to be a little bit more cognizant

44
00:01:27,439 --> 00:01:29,360
of this issue of these issues

45
00:01:29,360 --> 00:01:31,680
so that you can avoid them in your own

46
00:01:31,680 --> 00:01:33,040
work

47
00:01:33,040 --> 00:01:36,079
so in terms of my research

48
00:01:36,079 --> 00:01:38,320
my group has been spending i guess

49
00:01:38,320 --> 00:01:40,079
probably about the past 10 years now

50
00:01:40,079 --> 00:01:43,280
studying android and mobile app privacy

51
00:01:43,280 --> 00:01:45,040
behaviors we've specifically focused on

52
00:01:45,040 --> 00:01:47,439
android just because it's open source

53
00:01:47,439 --> 00:01:48,960
we have the source code so we can add

54
00:01:48,960 --> 00:01:50,720
instrumentation into it so that we can

55
00:01:50,720 --> 00:01:51,439
monitor

56
00:01:51,439 --> 00:01:53,759
mobile apps when they're run on our

57
00:01:53,759 --> 00:01:55,520
devices

58
00:01:55,520 --> 00:01:57,520
that's why we don't do this on ios

59
00:01:57,520 --> 00:01:58,960
simply because we don't have the source

60
00:01:58,960 --> 00:02:00,399
code and so we don't have the same level

61
00:02:00,399 --> 00:02:02,159
of instrumentation

62
00:02:02,159 --> 00:02:05,040
it was about four years ago that i was

63
00:02:05,040 --> 00:02:06,479
chatting with a colleague who's been

64
00:02:06,479 --> 00:02:08,800
spearheading a similar a related project

65
00:02:08,800 --> 00:02:11,599
at exe where they've been building

66
00:02:11,599 --> 00:02:13,200
traffic monitoring tools and so we

67
00:02:13,200 --> 00:02:15,680
decided to combine our tools to build

68
00:02:15,680 --> 00:02:18,080
an end-to-end pipeline so that we can

69
00:02:18,080 --> 00:02:20,080
run apps on mobile devices to see what

70
00:02:20,080 --> 00:02:22,480
types of sensitive user data they access

71
00:02:22,480 --> 00:02:26,079
and then to whom they send it

72
00:02:26,239 --> 00:02:28,000
so basically you know we have a whole

73
00:02:28,000 --> 00:02:29,840
process now where we download lots of

74
00:02:29,840 --> 00:02:32,000
android apps we run those apps on our

75
00:02:32,000 --> 00:02:33,920
instrumented phones in our test bed so

76
00:02:33,920 --> 00:02:35,040
that we can observe

77
00:02:35,040 --> 00:02:36,959
what data they access and you know to

78
00:02:36,959 --> 00:02:38,160
whom they send it

79
00:02:38,160 --> 00:02:40,319
and then we look at you know what apis

80
00:02:40,319 --> 00:02:42,239
were accessed which will give us clues

81
00:02:42,239 --> 00:02:44,480
as to what data might be used for such

82
00:02:44,480 --> 00:02:46,080
as ads or analytics

83
00:02:46,080 --> 00:02:47,599
as well as you know what types of

84
00:02:47,599 --> 00:02:49,360
third-party sdks were present and

85
00:02:49,360 --> 00:02:51,200
whether those were responsible for many

86
00:02:51,200 --> 00:02:53,200
of the data x filtration behaviors that

87
00:02:53,200 --> 00:02:54,879
we observe

88
00:02:54,879 --> 00:02:56,720
and so at you know at this point

89
00:02:56,720 --> 00:02:58,239
basically our office looks like

90
00:02:58,239 --> 00:03:00,480
a click farm we have a whole bunch of

91
00:03:00,480 --> 00:03:02,000
phones that are running

92
00:03:02,000 --> 00:03:04,319
our custom version of android and we

93
00:03:04,319 --> 00:03:06,000
have a series of scripts that push it

94
00:03:06,000 --> 00:03:06,480
that push

95
00:03:06,480 --> 00:03:09,920
apps to them for for testing um the the

96
00:03:09,920 --> 00:03:11,840
apps are run automatically using

97
00:03:11,840 --> 00:03:13,599
uh what's called the the exerciser

98
00:03:13,599 --> 00:03:15,040
monkey which is a tool that comes with

99
00:03:15,040 --> 00:03:17,200
the android developer tools to basically

100
00:03:17,200 --> 00:03:18,159
fuzz the ui

101
00:03:18,159 --> 00:03:20,640
it generates random ui events such as

102
00:03:20,640 --> 00:03:22,800
taps and swipes and so forth

103
00:03:22,800 --> 00:03:25,599
and so apps are running automatically on

104
00:03:25,599 --> 00:03:26,480
these phones

105
00:03:26,480 --> 00:03:28,560
and then in the network traffic we look

106
00:03:28,560 --> 00:03:29,599
for various

107
00:03:29,599 --> 00:03:32,080
known types of personal information such

108
00:03:32,080 --> 00:03:32,640
as

109
00:03:32,640 --> 00:03:34,239
the email address associated with the

110
00:03:34,239 --> 00:03:36,000
device the phone number

111
00:03:36,000 --> 00:03:38,560
location information and so on we also

112
00:03:38,560 --> 00:03:39,920
look for a whole slew of different

113
00:03:39,920 --> 00:03:42,159
persistent identifiers and for all this

114
00:03:42,159 --> 00:03:43,200
data we look for

115
00:03:43,200 --> 00:03:45,120
you know both the data in the clear as

116
00:03:45,120 --> 00:03:47,040
well as different permutations of it

117
00:03:47,040 --> 00:03:49,040
such as various types of hashes or

118
00:03:49,040 --> 00:03:50,080
encodings

119
00:03:50,080 --> 00:03:53,280
such as base64 for instance

120
00:03:53,280 --> 00:03:54,799
and so as i said there's a there's a

121
00:03:54,799 --> 00:03:58,000
whole pipeline we have an app repository

122
00:03:58,000 --> 00:04:00,159
we push the apps that we download to the

123
00:04:00,159 --> 00:04:01,200
testbed

124
00:04:01,200 --> 00:04:02,720
and then we simulate the user

125
00:04:02,720 --> 00:04:04,560
interactions using the monkey

126
00:04:04,560 --> 00:04:06,799
as well as uh we wrote sometimes run

127
00:04:06,799 --> 00:04:08,640
apps with real human input as well which

128
00:04:08,640 --> 00:04:10,000
i'll get into

129
00:04:10,000 --> 00:04:11,840
all this goes into a results database

130
00:04:11,840 --> 00:04:13,439
basically the logs that get pulled off

131
00:04:13,439 --> 00:04:14,400
the phone

132
00:04:14,400 --> 00:04:16,880
and augmented with the traffic flows

133
00:04:16,880 --> 00:04:18,079
that we observed

134
00:04:18,079 --> 00:04:20,160
and then all the data is accessible by

135
00:04:20,160 --> 00:04:22,560
api and we also have a website

136
00:04:22,560 --> 00:04:25,120
um where you can search for reports on

137
00:04:25,120 --> 00:04:26,960
individual apps

138
00:04:26,960 --> 00:04:30,240
so here's just a a view of of

139
00:04:30,240 --> 00:04:33,280
how we test an app um just so that um

140
00:04:33,280 --> 00:04:34,479
you have a better understanding of what

141
00:04:34,479 --> 00:04:36,320
we're actually doing behind the scenes

142
00:04:36,320 --> 00:04:38,960
so we have a dashboard we can type the

143
00:04:38,960 --> 00:04:39,759
name of

144
00:04:39,759 --> 00:04:42,240
an app the package name or even just a

145
00:04:42,240 --> 00:04:43,680
link from the play store

146
00:04:43,680 --> 00:04:45,759
um we could specify which region we want

147
00:04:45,759 --> 00:04:46,800
to test the app in

148
00:04:46,800 --> 00:04:50,080
such as the us um or you know europe

149
00:04:50,080 --> 00:04:53,440
or um we have uh a bunch of different

150
00:04:53,440 --> 00:04:55,680
countries where we have infrastructure

151
00:04:55,680 --> 00:04:57,040
and then we can specify you know what

152
00:04:57,040 --> 00:04:58,880
type of device we want to test it on

153
00:04:58,880 --> 00:05:01,199
and whether it's an actual human testing

154
00:05:01,199 --> 00:05:01,919
versus

155
00:05:01,919 --> 00:05:04,000
the the monkey which i described

156
00:05:04,000 --> 00:05:05,039
previously

157
00:05:05,039 --> 00:05:07,199
and so if we specify the human we have a

158
00:05:07,199 --> 00:05:09,199
remote desktop solution so that you can

159
00:05:09,199 --> 00:05:10,160
actually interact

160
00:05:10,160 --> 00:05:13,600
with the app in the browser um here so

161
00:05:13,600 --> 00:05:15,680
you know using the dashboard you can you

162
00:05:15,680 --> 00:05:17,360
know fully interact with the app if you

163
00:05:17,360 --> 00:05:19,520
want real human input

164
00:05:19,520 --> 00:05:22,880
and that's actually running on a phone

165
00:05:22,880 --> 00:05:25,199
somewhere else in the world but at the

166
00:05:25,199 --> 00:05:26,720
end of the day the whole point of this

167
00:05:26,720 --> 00:05:28,000
is to generate data

168
00:05:28,000 --> 00:05:30,960
so after interacting with the app um it

169
00:05:30,960 --> 00:05:31,520
you know

170
00:05:31,520 --> 00:05:34,160
halts execution and our tools pull all

171
00:05:34,160 --> 00:05:36,080
the logs off and then parse them

172
00:05:36,080 --> 00:05:39,440
to see what actually happened um so

173
00:05:39,440 --> 00:05:40,880
you know the things that we're generally

174
00:05:40,880 --> 00:05:43,520
interested in are what are the type of

175
00:05:43,520 --> 00:05:44,880
person you know what what are the types

176
00:05:44,880 --> 00:05:46,160
of personal information that are that

177
00:05:46,160 --> 00:05:46,960
are collected

178
00:05:46,960 --> 00:05:50,800
um and you know where do they go so

179
00:05:50,800 --> 00:05:52,080
more often than not when we're talking

180
00:05:52,080 --> 00:05:53,600
about personal information it's used

181
00:05:53,600 --> 00:05:55,680
it's usually just persistent identifiers

182
00:05:55,680 --> 00:05:57,360
and the one that we you know most often

183
00:05:57,360 --> 00:05:59,520
see is the android advertising id which

184
00:05:59,520 --> 00:06:00,479
is what's shown here

185
00:06:00,479 --> 00:06:02,960
here we see the advertising id is being

186
00:06:02,960 --> 00:06:03,759
collected by

187
00:06:03,759 --> 00:06:06,160
doubleclick but we see connections to

188
00:06:06,160 --> 00:06:08,319
other servers elsewhere

189
00:06:08,319 --> 00:06:11,039
as well though no detected personal

190
00:06:11,039 --> 00:06:11,919
information

191
00:06:11,919 --> 00:06:14,639
during this particular test uh we also

192
00:06:14,639 --> 00:06:15,120
you know

193
00:06:15,120 --> 00:06:17,120
look at stuff like what sdks were

194
00:06:17,120 --> 00:06:18,960
bundled within the app what permissions

195
00:06:18,960 --> 00:06:22,000
were used and so forth

196
00:06:22,000 --> 00:06:24,160
and so you know it's ob it should be

197
00:06:24,160 --> 00:06:25,680
obvious how we can you know how we're

198
00:06:25,680 --> 00:06:27,840
using these tools to look at compliance

199
00:06:27,840 --> 00:06:30,639
so this actually started though you know

200
00:06:30,639 --> 00:06:31,440
stepping back

201
00:06:31,440 --> 00:06:33,199
um once we you know we decided to build

202
00:06:33,199 --> 00:06:36,000
this this pipeline to test apps

203
00:06:36,000 --> 00:06:39,360
um and we just started you know crawling

204
00:06:39,360 --> 00:06:41,440
the play store to download lots of free

205
00:06:41,440 --> 00:06:42,560
apps so that we can run through a

206
00:06:42,560 --> 00:06:44,240
testbed and then early on i started

207
00:06:44,240 --> 00:06:45,840
making queries to see what are the

208
00:06:45,840 --> 00:06:47,360
interesting behaviors

209
00:06:47,360 --> 00:06:49,440
um that we can examine with all this

210
00:06:49,440 --> 00:06:50,639
data that we're collecting

211
00:06:50,639 --> 00:06:52,800
and you know one was i wanted to see you

212
00:06:52,800 --> 00:06:55,440
know who was the most prolific sharer of

213
00:06:55,440 --> 00:06:58,160
uh location data and you know the

214
00:06:58,160 --> 00:06:59,199
results came back

215
00:06:59,199 --> 00:07:01,840
you know from that query that cvs was

216
00:07:01,840 --> 00:07:03,840
sharing location data with 40 different

217
00:07:03,840 --> 00:07:05,440
third parties and at the time you know

218
00:07:05,440 --> 00:07:06,080
this was

219
00:07:06,080 --> 00:07:07,520
we had just built this we were still

220
00:07:07,520 --> 00:07:09,680
testing it internally my assumption was

221
00:07:09,680 --> 00:07:11,120
oh this must be a mistake

222
00:07:11,120 --> 00:07:14,080
um there's got to be a bug in our code

223
00:07:14,080 --> 00:07:15,599
but you know there was no bug and in

224
00:07:15,599 --> 00:07:17,280
fact we just discovered a

225
00:07:17,280 --> 00:07:20,800
a big privacy bug on on their app

226
00:07:20,800 --> 00:07:23,520
um so the the cvs app is actually a

227
00:07:23,520 --> 00:07:24,800
series of web views

228
00:07:24,800 --> 00:07:27,840
so a web view is just a a widget

229
00:07:27,840 --> 00:07:29,840
um that's basically a light web browser

230
00:07:29,840 --> 00:07:32,160
that allows you to load web content in a

231
00:07:32,160 --> 00:07:33,039
mobile app

232
00:07:33,039 --> 00:07:35,039
and so basically the whole cvs app is a

233
00:07:35,039 --> 00:07:37,120
series of web pages that get loaded in

234
00:07:37,120 --> 00:07:38,240
web views

235
00:07:38,240 --> 00:07:40,960
um and that's it uh but what was

236
00:07:40,960 --> 00:07:42,479
happening here is that the user agent

237
00:07:42,479 --> 00:07:44,400
string which you know describes the the

238
00:07:44,400 --> 00:07:45,520
version of the browser

239
00:07:45,520 --> 00:07:47,440
and in the web view you can you know set

240
00:07:47,440 --> 00:07:48,960
that to mimic different

241
00:07:48,960 --> 00:07:51,599
browsers whoever wrote the app was

242
00:07:51,599 --> 00:07:53,759
adding the gps coordinates into the user

243
00:07:53,759 --> 00:07:54,720
agent string

244
00:07:54,720 --> 00:07:58,080
which meant that any uh third-party

245
00:07:58,080 --> 00:08:00,000
content that was loaded from that web

246
00:08:00,000 --> 00:08:00,639
page

247
00:08:00,639 --> 00:08:03,039
would also receive you know headers that

248
00:08:03,039 --> 00:08:05,039
included this user agent string uh

249
00:08:05,039 --> 00:08:06,639
including the gps coordinates

250
00:08:06,639 --> 00:08:08,240
which is how it was you know being sent

251
00:08:08,240 --> 00:08:11,599
to 40 different third parties

252
00:08:11,599 --> 00:08:14,160
um so you know this you know this

253
00:08:14,160 --> 00:08:15,759
immediately showed how you know this was

254
00:08:15,759 --> 00:08:17,360
useful for detecting these two

255
00:08:17,360 --> 00:08:20,400
you know these types of issues um and in

256
00:08:20,400 --> 00:08:21,039
this case

257
00:08:21,039 --> 00:08:22,879
um the second lesson learned the you

258
00:08:22,879 --> 00:08:24,800
know the tangential from this talk

259
00:08:24,800 --> 00:08:26,879
um is on the importance of having uh

260
00:08:26,879 --> 00:08:28,879
technical contact information so

261
00:08:28,879 --> 00:08:30,879
you know after finding this bug in the

262
00:08:30,879 --> 00:08:33,279
app i tried to contact someone at cvs to

263
00:08:33,279 --> 00:08:34,559
report this to

264
00:08:34,559 --> 00:08:36,479
um after spending about an hour trying

265
00:08:36,479 --> 00:08:38,479
to find uh you know someone who

266
00:08:38,479 --> 00:08:40,399
you know who would reasonably be the

267
00:08:40,399 --> 00:08:42,080
person responsible

268
00:08:42,080 --> 00:08:44,080
um i gave up and and finally just

269
00:08:44,080 --> 00:08:46,399
emailed customer care and they said uh

270
00:08:46,399 --> 00:08:48,240
no i'm mistaken they don't share my

271
00:08:48,240 --> 00:08:49,680
location information with any third

272
00:08:49,680 --> 00:08:50,320
parties

273
00:08:50,320 --> 00:08:52,640
uh clearly not understanding the the

274
00:08:52,640 --> 00:08:53,519
issue

275
00:08:53,519 --> 00:08:57,040
um and so at that point you know uh we

276
00:08:57,040 --> 00:08:58,959
actually set up a blog and blogged about

277
00:08:58,959 --> 00:09:01,440
it um which got some press coverage and

278
00:09:01,440 --> 00:09:04,560
cvs fix it within a week after that but

279
00:09:04,560 --> 00:09:05,040
again

280
00:09:05,040 --> 00:09:07,680
you know one of the takeaways is uh have

281
00:09:07,680 --> 00:09:10,000
contact information accessible so that

282
00:09:10,000 --> 00:09:12,480
when issues like this arise it doesn't

283
00:09:12,480 --> 00:09:14,160
you know to get them resolved doesn't

284
00:09:14,160 --> 00:09:17,040
rely on going to the media

285
00:09:17,040 --> 00:09:19,120
but stepping back to the the the main

286
00:09:19,120 --> 00:09:20,320
point um

287
00:09:20,320 --> 00:09:22,880
from a lot of this early work we begun

288
00:09:22,880 --> 00:09:24,480
you know we began to to realize that a

289
00:09:24,480 --> 00:09:25,920
lot of these privacy issues that we're

290
00:09:25,920 --> 00:09:27,040
seeing are coming from

291
00:09:27,040 --> 00:09:29,120
third-party services and not necessarily

292
00:09:29,120 --> 00:09:32,399
core app functionality

293
00:09:32,399 --> 00:09:34,240
um so here's an example of one so this

294
00:09:34,240 --> 00:09:36,399
was a children's app that we looked at

295
00:09:36,399 --> 00:09:39,519
early on and we found in yellow here

296
00:09:39,519 --> 00:09:42,640
uh it was sending data to

297
00:09:42,640 --> 00:09:45,279
this host talkingdata.net which is a

298
00:09:45,279 --> 00:09:47,440
analytics provider in china

299
00:09:47,440 --> 00:09:49,200
and you can see it was sent over port 80

300
00:09:49,200 --> 00:09:50,800
so it was unencrypted

301
00:09:50,800 --> 00:09:52,640
and you know in blue here it lists all

302
00:09:52,640 --> 00:09:54,320
of the identifiers associated with the

303
00:09:54,320 --> 00:09:55,200
device

304
00:09:55,200 --> 00:09:56,880
as well as in green it has information

305
00:09:56,880 --> 00:09:58,320
about the wi-fi hotspot that we are

306
00:09:58,320 --> 00:09:59,839
connected to which

307
00:09:59,839 --> 00:10:02,839
can be used to infer location

308
00:10:02,839 --> 00:10:05,040
information

309
00:10:05,040 --> 00:10:07,600
this incidentally is likely illegal

310
00:10:07,600 --> 00:10:09,360
under the u.s children's online privacy

311
00:10:09,360 --> 00:10:10,160
protection act

312
00:10:10,160 --> 00:10:12,720
so this is actually the only

313
00:10:12,720 --> 00:10:14,880
comprehensive privacy law in the u.s

314
00:10:14,880 --> 00:10:17,839
currently most other private you know

315
00:10:17,839 --> 00:10:19,440
laws that relate to privacy are sector

316
00:10:19,440 --> 00:10:20,959
by sector whereas um

317
00:10:20,959 --> 00:10:23,680
under kappa uh any data you know data

318
00:10:23,680 --> 00:10:25,839
collected from children under 13

319
00:10:25,839 --> 00:10:28,880
uh regardless of you know what sector

320
00:10:28,880 --> 00:10:31,279
uh is subject to various restrictions

321
00:10:31,279 --> 00:10:32,160
such as

322
00:10:32,160 --> 00:10:35,040
prohibitions on behavioral advertising

323
00:10:35,040 --> 00:10:36,399
certain types of personal information

324
00:10:36,399 --> 00:10:37,680
such as location data

325
00:10:37,680 --> 00:10:40,320
require verifiable parental consent and

326
00:10:40,320 --> 00:10:42,000
any personal data needs reasonable

327
00:10:42,000 --> 00:10:43,200
security measures

328
00:10:43,200 --> 00:10:46,320
such as the use of tls and so

329
00:10:46,320 --> 00:10:47,839
you know you can see many of these

330
00:10:47,839 --> 00:10:49,519
appear to be violated

331
00:10:49,519 --> 00:10:51,760
in that example and so we decided to dig

332
00:10:51,760 --> 00:10:53,440
deeper and we started building up a

333
00:10:53,440 --> 00:10:55,440
corpus of children's apps and we

334
00:10:55,440 --> 00:10:58,240
found that there was evidence that the

335
00:10:58,240 --> 00:10:59,519
majority of the apps that are

336
00:10:59,519 --> 00:11:00,320
specifically

337
00:11:00,320 --> 00:11:02,480
designed for for children appear to be

338
00:11:02,480 --> 00:11:04,079
violating federal law

339
00:11:04,079 --> 00:11:06,320
um and you know most of it comes from

340
00:11:06,320 --> 00:11:08,160
you know collection of various types of

341
00:11:08,160 --> 00:11:09,920
non-resettable identifiers that allow

342
00:11:09,920 --> 00:11:11,839
for profiling and having those

343
00:11:11,839 --> 00:11:13,360
identifiers being sent to

344
00:11:13,360 --> 00:11:14,959
you know services that are specifically

345
00:11:14,959 --> 00:11:17,839
for behavioral advertising and profiling

346
00:11:17,839 --> 00:11:21,120
um as well as you know non-use of tls

347
00:11:21,120 --> 00:11:23,279
um and you know as i said by and large

348
00:11:23,279 --> 00:11:26,160
this comes from third-party sdks

349
00:11:26,160 --> 00:11:29,360
so we published this um and it got a lot

350
00:11:29,360 --> 00:11:30,800
of attention

351
00:11:30,800 --> 00:11:33,839
um there was a a state a.g actually

352
00:11:33,839 --> 00:11:35,200
filed suit against a

353
00:11:35,200 --> 00:11:37,200
an app developer as well as several of

354
00:11:37,200 --> 00:11:38,720
the third parties that were bundled in

355
00:11:38,720 --> 00:11:39,600
the app

356
00:11:39,600 --> 00:11:41,519
uh the new york times center

357
00:11:41,519 --> 00:11:43,279
photographer to my office who

358
00:11:43,279 --> 00:11:45,120
said too many plants not enough blinky

359
00:11:45,120 --> 00:11:46,720
lights so i got to

360
00:11:46,720 --> 00:11:48,079
go to the machine room for the first

361
00:11:48,079 --> 00:11:49,839
time in my life for a photo shoot

362
00:11:49,839 --> 00:11:52,880
that was fun uh but anyway at

363
00:11:52,880 --> 00:11:54,320
the real impact was google actually

364
00:11:54,320 --> 00:11:56,240
changed their policy so

365
00:11:56,240 --> 00:11:59,279
uh google you know in response to this

366
00:11:59,279 --> 00:12:02,240
started requiring that any third party

367
00:12:02,240 --> 00:12:03,600
ad networks um

368
00:12:03,600 --> 00:12:05,839
only come from this pre-approved list

369
00:12:05,839 --> 00:12:07,600
this has probably expanded

370
00:12:07,600 --> 00:12:10,399
since but the point is um all of the

371
00:12:10,399 --> 00:12:11,120
certified

372
00:12:11,120 --> 00:12:13,200
ad networks that are allowed in kids

373
00:12:13,200 --> 00:12:15,120
apps are certified because

374
00:12:15,120 --> 00:12:17,040
um they allow developers to disable the

375
00:12:17,040 --> 00:12:18,639
behavioral advertising

376
00:12:18,639 --> 00:12:20,240
um the problem is compliance is

377
00:12:20,240 --> 00:12:21,839
self-certified so it relies on

378
00:12:21,839 --> 00:12:23,279
developers to say that

379
00:12:23,279 --> 00:12:24,720
you know they're not they're only using

380
00:12:24,720 --> 00:12:26,720
ad networks that are on the list

381
00:12:26,720 --> 00:12:28,720
but more importantly there aren't any

382
00:12:28,720 --> 00:12:30,160
there isn't really any follow-up as to

383
00:12:30,160 --> 00:12:30,800
whether

384
00:12:30,800 --> 00:12:33,040
the you know if the the sdks that are on

385
00:12:33,040 --> 00:12:35,200
this list are even correctly configured

386
00:12:35,200 --> 00:12:37,360
so while they allow the developers to

387
00:12:37,360 --> 00:12:39,680
disable behavioral advertising

388
00:12:39,680 --> 00:12:40,959
there's an open question as to whether

389
00:12:40,959 --> 00:12:42,880
the developers are actually doing so and

390
00:12:42,880 --> 00:12:44,959
whether developers even know to do so

391
00:12:44,959 --> 00:12:47,120
uh because you know in many cases it's

392
00:12:47,120 --> 00:12:49,440
unlikely that it's you know malice

393
00:12:49,440 --> 00:12:51,600
but most likely misconfigurations

394
00:12:51,600 --> 00:12:53,440
because developers have a lot to think

395
00:12:53,440 --> 00:12:55,200
about

396
00:12:55,200 --> 00:12:57,200
so here's an example of one so here's ad

397
00:12:57,200 --> 00:12:58,639
colonies documentation

398
00:12:58,639 --> 00:13:00,320
it explains that if the app is going to

399
00:13:00,320 --> 00:13:01,839
be you know child if it's if it's a

400
00:13:01,839 --> 00:13:03,040
child directed app

401
00:13:03,040 --> 00:13:06,000
you need to you know select this option

402
00:13:06,000 --> 00:13:08,079
in the ad colony dashboard

403
00:13:08,079 --> 00:13:10,399
um and as a result that'll you know give

404
00:13:10,399 --> 00:13:11,440
it copic you know

405
00:13:11,440 --> 00:13:14,160
copper compliant treatment um by

406
00:13:14,160 --> 00:13:16,480
disabling behavioral advertising

407
00:13:16,480 --> 00:13:18,399
um similarly you know here here's

408
00:13:18,399 --> 00:13:20,160
another you know dashboard

409
00:13:20,160 --> 00:13:24,079
thing from chartboost it took me uh

410
00:13:24,079 --> 00:13:26,160
a non-insignificant amount of time to

411
00:13:26,160 --> 00:13:28,240
actually find documentation for both as

412
00:13:28,240 --> 00:13:28,639
to

413
00:13:28,639 --> 00:13:32,480
how you actually enable these options

414
00:13:32,480 --> 00:13:34,399
here's another one here's kochava this

415
00:13:34,399 --> 00:13:36,800
is a snippet of code that developers are

416
00:13:36,800 --> 00:13:37,519
required to

417
00:13:37,519 --> 00:13:40,079
to add um to their apps to tell the

418
00:13:40,079 --> 00:13:41,120
cachava

419
00:13:41,120 --> 00:13:44,720
sdk to disable tracking

420
00:13:44,720 --> 00:13:46,560
and so the problem with all of this is

421
00:13:46,560 --> 00:13:48,160
that it relies

422
00:13:48,160 --> 00:13:50,959
on developers you know knowing to find

423
00:13:50,959 --> 00:13:52,560
this documentation

424
00:13:52,560 --> 00:13:54,240
um understanding how to do it and then

425
00:13:54,240 --> 00:13:56,320
correctly doing it and none of that is

426
00:13:56,320 --> 00:13:57,360
actually

427
00:13:57,360 --> 00:13:59,760
you know mandated by google it's just

428
00:13:59,760 --> 00:14:01,360
that developers must certify that

429
00:14:01,360 --> 00:14:03,120
they're only using these particular ad

430
00:14:03,120 --> 00:14:04,160
networks

431
00:14:04,160 --> 00:14:06,480
um and so we retested this about a year

432
00:14:06,480 --> 00:14:08,079
and a half later and we found that

433
00:14:08,079 --> 00:14:10,079
you know certainly as expected there is

434
00:14:10,079 --> 00:14:11,920
plenty of use of not just the unapproved

435
00:14:11,920 --> 00:14:13,040
ad networks

436
00:14:13,040 --> 00:14:16,160
in kids apps but many that are approved

437
00:14:16,160 --> 00:14:16,639
aren't

438
00:14:16,639 --> 00:14:18,399
don't appear to be correctly using the

439
00:14:18,399 --> 00:14:20,000
tracking opt-outs

440
00:14:20,000 --> 00:14:22,720
from our testing but that said you know

441
00:14:22,720 --> 00:14:24,240
it's been over a year and

442
00:14:24,240 --> 00:14:26,639
other behaviors have improved such as

443
00:14:26,639 --> 00:14:28,000
you know the amount of location data

444
00:14:28,000 --> 00:14:29,040
that's being collected

445
00:14:29,040 --> 00:14:30,720
has you know been reduced to a third of

446
00:14:30,720 --> 00:14:32,959
what we measured before and same thing

447
00:14:32,959 --> 00:14:36,000
with you know tls non-usage um

448
00:14:36,000 --> 00:14:39,040
now you know only only about 16

449
00:14:39,040 --> 00:14:40,560
of apps appear to be sending data

450
00:14:40,560 --> 00:14:42,480
insecurely which you know isn't great

451
00:14:42,480 --> 00:14:45,839
but it's still better than 40.

452
00:14:46,720 --> 00:14:48,560
and so you know one of the problems with

453
00:14:48,560 --> 00:14:50,399
this though you know why it's hard for

454
00:14:50,399 --> 00:14:52,560
say google to verify that sdks are being

455
00:14:52,560 --> 00:14:53,440
used correctly

456
00:14:53,440 --> 00:14:55,120
um the same is the same reason why it's

457
00:14:55,120 --> 00:14:57,199
hard for developers to verify that

458
00:14:57,199 --> 00:14:59,680
they're using the sdks correctly each

459
00:14:59,680 --> 00:15:02,800
sdk has its own api um

460
00:15:02,800 --> 00:15:04,320
with its own documentation that

461
00:15:04,320 --> 00:15:08,079
developers must just figure out

462
00:15:08,079 --> 00:15:09,839
and so you know one of the big questions

463
00:15:09,839 --> 00:15:11,519
is do developers know to actually look

464
00:15:11,519 --> 00:15:13,199
for the documentation it when you're

465
00:15:13,199 --> 00:15:15,519
going to use a third-party sdk to solve

466
00:15:15,519 --> 00:15:15,920
some

467
00:15:15,920 --> 00:15:18,959
you know task in your app um

468
00:15:18,959 --> 00:15:22,079
do you know to look for pri relevant

469
00:15:22,079 --> 00:15:23,040
privacy

470
00:15:23,040 --> 00:15:25,519
options um you know when configuring

471
00:15:25,519 --> 00:15:26,560
that sdk

472
00:15:26,560 --> 00:15:28,160
do those in your organization who are

473
00:15:28,160 --> 00:15:29,920
responsible for compliance

474
00:15:29,920 --> 00:15:32,320
understand how you know configurations

475
00:15:32,320 --> 00:15:33,680
of the sdk

476
00:15:33,680 --> 00:15:36,560
have a profound impact on the app's

477
00:15:36,560 --> 00:15:38,480
privacy behaviors and whether or not the

478
00:15:38,480 --> 00:15:40,000
app is complying with its you know

479
00:15:40,000 --> 00:15:40,720
privacy

480
00:15:40,720 --> 00:15:43,440
obligations

481
00:15:45,199 --> 00:15:47,120
and so well you know a lot of this is

482
00:15:47,120 --> 00:15:49,600
due to you know bad documentation

483
00:15:49,600 --> 00:15:51,600
um which makes it hard for developers to

484
00:15:51,600 --> 00:15:52,880
figure out what they're supposed to do

485
00:15:52,880 --> 00:15:54,720
and requires them to put concerted

486
00:15:54,720 --> 00:15:56,639
effort into

487
00:15:56,639 --> 00:15:59,120
at the same time we found a lot of sdks

488
00:15:59,120 --> 00:16:00,720
that you know appear to be just outright

489
00:16:00,720 --> 00:16:02,320
malicious which means that there are

490
00:16:02,320 --> 00:16:04,399
likely many app developers

491
00:16:04,399 --> 00:16:07,440
that are bundling sdks and not knowing

492
00:16:07,440 --> 00:16:09,440
you know legitimately uh you know

493
00:16:09,440 --> 00:16:11,040
despite their best efforts

494
00:16:11,040 --> 00:16:14,560
that the sdk is you know misbehaving

495
00:16:14,560 --> 00:16:16,240
uh so we published a paper on this last

496
00:16:16,240 --> 00:16:17,920
year where we looked at apps that have

497
00:16:17,920 --> 00:16:20,240
been circumventing the permission system

498
00:16:20,240 --> 00:16:22,880
uh basically what we did was um using

499
00:16:22,880 --> 00:16:24,000
our framework

500
00:16:24,000 --> 00:16:26,720
um we started auto detecting side

501
00:16:26,720 --> 00:16:28,560
channels and covert channels that apps

502
00:16:28,560 --> 00:16:29,120
are

503
00:16:29,120 --> 00:16:31,120
using and what i mean by a side channel

504
00:16:31,120 --> 00:16:32,399
is basically

505
00:16:32,399 --> 00:16:34,959
a way of bypassing a security mechanism

506
00:16:34,959 --> 00:16:37,279
so the app you know tries to access say

507
00:16:37,279 --> 00:16:38,959
location data but it's protected by the

508
00:16:38,959 --> 00:16:40,240
permission system

509
00:16:40,240 --> 00:16:42,480
if that location data is available

510
00:16:42,480 --> 00:16:44,160
elsewhere on the device

511
00:16:44,160 --> 00:16:45,759
in a place that isn't protected by the

512
00:16:45,759 --> 00:16:47,920
permission system that's known as a side

513
00:16:47,920 --> 00:16:49,360
channel because the app could then

514
00:16:49,360 --> 00:16:50,959
access the data in that place

515
00:16:50,959 --> 00:16:53,279
thereby you know circumventing the

516
00:16:53,279 --> 00:16:55,199
permission system

517
00:16:55,199 --> 00:16:57,680
covert channel is a similar thing but

518
00:16:57,680 --> 00:16:59,600
basically this relies on two apps

519
00:16:59,600 --> 00:17:01,040
colluding

520
00:17:01,040 --> 00:17:02,800
such that you know one app that might

521
00:17:02,800 --> 00:17:04,799
not have access is still able to get the

522
00:17:04,799 --> 00:17:05,679
data because

523
00:17:05,679 --> 00:17:07,520
it it's talking with another with an app

524
00:17:07,520 --> 00:17:10,240
that does have access

525
00:17:10,240 --> 00:17:12,160
and so using our infrastructure we can

526
00:17:12,160 --> 00:17:13,679
you know automatically test for this we

527
00:17:13,679 --> 00:17:15,119
can look at you know what are all the

528
00:17:15,119 --> 00:17:16,400
apps that are sending personal

529
00:17:16,400 --> 00:17:18,000
information out and then we can look at

530
00:17:18,000 --> 00:17:19,199
what are the apps that are allowed to

531
00:17:19,199 --> 00:17:19,599
send

532
00:17:19,599 --> 00:17:21,199
you know that are allowed to access the

533
00:17:21,199 --> 00:17:23,439
personal information and you know if we

534
00:17:23,439 --> 00:17:25,359
if we subtract those two sets anything

535
00:17:25,359 --> 00:17:27,359
that's left means that that's

536
00:17:27,359 --> 00:17:28,960
you know an app that's sending out

537
00:17:28,960 --> 00:17:30,480
personal information that it didn't have

538
00:17:30,480 --> 00:17:31,600
the right to access

539
00:17:31,600 --> 00:17:33,360
and therefore it's circumventing the

540
00:17:33,360 --> 00:17:34,799
permission system

541
00:17:34,799 --> 00:17:38,799
somehow so here let you know

542
00:17:38,799 --> 00:17:40,080
here's a look at how that might work so

543
00:17:40,080 --> 00:17:42,160
we have a set of apps that you know

544
00:17:42,160 --> 00:17:44,000
don't have the location permission and

545
00:17:44,000 --> 00:17:45,280
then we have a set of apps that are

546
00:17:45,280 --> 00:17:46,799
transmitting location data

547
00:17:46,799 --> 00:17:48,559
one would reasonably reasonably expect

548
00:17:48,559 --> 00:17:50,880
these to be disjoint sets but in fact

549
00:17:50,880 --> 00:17:52,559
you know in our research we found that

550
00:17:52,559 --> 00:17:54,559
this wasn't the case um we specifically

551
00:17:54,559 --> 00:17:55,919
found over a thousand apps that were

552
00:17:55,919 --> 00:17:56,799
transmitting

553
00:17:56,799 --> 00:17:59,440
fine grain location data without the the

554
00:17:59,440 --> 00:18:01,919
permission to actually access it

555
00:18:01,919 --> 00:18:04,320
um and you know we found several

556
00:18:04,320 --> 00:18:06,080
different explanations for this but one

557
00:18:06,080 --> 00:18:06,559
was

558
00:18:06,559 --> 00:18:08,080
you know lots of side channels that were

559
00:18:08,080 --> 00:18:09,679
actively being exploited by

560
00:18:09,679 --> 00:18:13,280
various sdks so on unix um the proc file

561
00:18:13,280 --> 00:18:14,080
system

562
00:18:14,080 --> 00:18:16,400
has uh it's a virtual file system that

563
00:18:16,400 --> 00:18:18,160
has you know various information about

564
00:18:18,160 --> 00:18:18,559
the

565
00:18:18,559 --> 00:18:19,919
the state of the device and that

566
00:18:19,919 --> 00:18:21,840
includes networking information

567
00:18:21,840 --> 00:18:24,080
uh one of the virtual files in there is

568
00:18:24,080 --> 00:18:26,000
the arp table which lists the

569
00:18:26,000 --> 00:18:28,799
hardware address of the upstream router

570
00:18:28,799 --> 00:18:29,360
um

571
00:18:29,360 --> 00:18:32,320
in the case of wi-fi that's you know the

572
00:18:32,320 --> 00:18:33,360
the

573
00:18:33,360 --> 00:18:35,120
the mac address of the the connected

574
00:18:35,120 --> 00:18:36,799
wi-fi router

575
00:18:36,799 --> 00:18:38,640
and that you know we know is a

576
00:18:38,640 --> 00:18:40,799
reasonable surrogate for location data

577
00:18:40,799 --> 00:18:42,880
because wi-fi routers tend to be in

578
00:18:42,880 --> 00:18:44,799
fixed locations which is why

579
00:18:44,799 --> 00:18:46,640
normally there are multiple permissions

580
00:18:46,640 --> 00:18:48,720
that are required to access

581
00:18:48,720 --> 00:18:51,120
the uh you know the information about

582
00:18:51,120 --> 00:18:53,679
the the wi-fi

583
00:18:53,679 --> 00:18:56,799
router's mac address but instead an

584
00:18:56,799 --> 00:18:58,880
app can just read it from the arp table

585
00:18:58,880 --> 00:19:00,400
in the proc file system

586
00:19:00,400 --> 00:19:03,120
thereby circumventing those permissions

587
00:19:03,120 --> 00:19:04,080
and so here it is

588
00:19:04,080 --> 00:19:08,000
in action um here's uh the assembly from

589
00:19:08,000 --> 00:19:11,600
a particular sdk um and it's checking to

590
00:19:11,600 --> 00:19:12,400
see whether

591
00:19:12,400 --> 00:19:14,320
the app has the access wi-fi state

592
00:19:14,320 --> 00:19:15,600
permission um

593
00:19:15,600 --> 00:19:18,320
if the answer is no it jumps to this

594
00:19:18,320 --> 00:19:19,200
function

595
00:19:19,200 --> 00:19:21,200
called get device mac address from arp

596
00:19:21,200 --> 00:19:23,679
and it just reads the procnet arp file

597
00:19:23,679 --> 00:19:25,120
thereby skipping

598
00:19:25,120 --> 00:19:28,080
the need for you know the permission and

599
00:19:28,080 --> 00:19:30,160
we found that this is pretty pervasive

600
00:19:30,160 --> 00:19:32,720
so we found a lot of different sdks that

601
00:19:32,720 --> 00:19:34,640
use this same technique and we find

602
00:19:34,640 --> 00:19:36,400
these in hundreds of apps

603
00:19:36,400 --> 00:19:38,640
with potentially billions of users and

604
00:19:38,640 --> 00:19:40,559
it's likely that in many cases you know

605
00:19:40,559 --> 00:19:41,120
these are

606
00:19:41,120 --> 00:19:45,039
popular sdks um it's likely that

607
00:19:45,039 --> 00:19:47,679
the developers have no idea that the the

608
00:19:47,679 --> 00:19:49,200
these sdks are collecting this

609
00:19:49,200 --> 00:19:50,160
information

610
00:19:50,160 --> 00:19:52,080
um which could create potential

611
00:19:52,080 --> 00:19:53,840
liabilities for them if they're

612
00:19:53,840 --> 00:19:56,000
making you know putting disclosures

613
00:19:56,000 --> 00:19:58,000
about the fact that their app doesn't

614
00:19:58,000 --> 00:19:59,440
collect this data

615
00:19:59,440 --> 00:20:03,120
uh in their privacy policy for instance

616
00:20:03,120 --> 00:20:05,120
and so you know the point that i you

617
00:20:05,120 --> 00:20:06,159
know

618
00:20:06,159 --> 00:20:07,360
the point of this whole talk is that

619
00:20:07,360 --> 00:20:09,280
many of these bad behaviors seem to come

620
00:20:09,280 --> 00:20:11,200
from the sdks

621
00:20:11,200 --> 00:20:12,880
um and so what does this actually mean

622
00:20:12,880 --> 00:20:14,880
for compliance

623
00:20:14,880 --> 00:20:17,120
well due to you know third-party sdks

624
00:20:17,120 --> 00:20:19,120
you might not accurately be disclosing

625
00:20:19,120 --> 00:20:20,159
your app's privacy

626
00:20:20,159 --> 00:20:22,000
behaviors and you know therefore your

627
00:20:22,000 --> 00:20:24,240
app might be collecting data without

628
00:20:24,240 --> 00:20:26,000
required consent maybe you're in a

629
00:20:26,000 --> 00:20:28,080
region that requires consent for certain

630
00:20:28,080 --> 00:20:29,200
data

631
00:20:29,200 --> 00:20:31,760
collection activities and if you don't

632
00:20:31,760 --> 00:20:33,039
know that the sdk

633
00:20:33,039 --> 00:20:35,200
is collecting this data you might not be

634
00:20:35,200 --> 00:20:37,440
correctly getting consent and therefore

635
00:20:37,440 --> 00:20:40,960
might be at risk

636
00:20:40,960 --> 00:20:42,400
and so you know this is all to say your

637
00:20:42,400 --> 00:20:44,320
app might be violating laws without your

638
00:20:44,320 --> 00:20:46,000
knowledge

639
00:20:46,000 --> 00:20:48,000
and so you know the final takeaway is

640
00:20:48,000 --> 00:20:49,840
what what do you do about all of this

641
00:20:49,840 --> 00:20:52,400
well i mean for developers as well as

642
00:20:52,400 --> 00:20:54,080
organizations that are

643
00:20:54,080 --> 00:20:56,640
releasing software read the sdk

644
00:20:56,640 --> 00:20:57,840
documentation

645
00:20:57,840 --> 00:20:59,919
um thoroughly when incorporating

646
00:20:59,919 --> 00:21:01,760
third-party sdks with an eye

647
00:21:01,760 --> 00:21:04,159
towards behaviors that might have

648
00:21:04,159 --> 00:21:05,760
privacy ramifications

649
00:21:05,760 --> 00:21:07,520
you know oftentimes developers have a

650
00:21:07,520 --> 00:21:09,039
lot on fair plate and so they just want

651
00:21:09,039 --> 00:21:10,240
to know what they you know what

652
00:21:10,240 --> 00:21:12,240
functions are relevant to get the job

653
00:21:12,240 --> 00:21:13,039
done

654
00:21:13,039 --> 00:21:16,080
but that's obviously creating you know

655
00:21:16,080 --> 00:21:18,720
potential privacy issues when you're not

656
00:21:18,720 --> 00:21:19,840
looking at

657
00:21:19,840 --> 00:21:22,400
options that could have a bearing on

658
00:21:22,400 --> 00:21:24,799
privacy

659
00:21:24,799 --> 00:21:26,159
more importantly you should make the

660
00:21:26,159 --> 00:21:27,840
compliance people in your organization

661
00:21:27,840 --> 00:21:29,440
aware of all of the third party code

662
00:21:29,440 --> 00:21:31,120
that you're using so that they can also

663
00:21:31,120 --> 00:21:32,720
look into this stuff

664
00:21:32,720 --> 00:21:34,559
to double check and make sure that you

665
00:21:34,559 --> 00:21:36,080
know the disclosures that

666
00:21:36,080 --> 00:21:37,840
they might be responsible for are

667
00:21:37,840 --> 00:21:39,760
actually accurate

668
00:21:39,760 --> 00:21:41,679
and then finally you know this is all to

669
00:21:41,679 --> 00:21:43,520
say test

670
00:21:43,520 --> 00:21:45,440
um you know we find this stuff by

671
00:21:45,440 --> 00:21:46,799
testing lots of apps

672
00:21:46,799 --> 00:21:49,679
and i you know i'm of the of the opinion

673
00:21:49,679 --> 00:21:51,440
that really that's the only way of

674
00:21:51,440 --> 00:21:53,679
figuring this stuff out because often

675
00:21:53,679 --> 00:21:55,919
times you know the documentation might

676
00:21:55,919 --> 00:21:57,520
be hard to understand

677
00:21:57,520 --> 00:21:59,440
or it might be you know an sdk that's

678
00:21:59,440 --> 00:22:01,039
just not disclosing what it's actually

679
00:22:01,039 --> 00:22:02,320
doing and the only way you're going to

680
00:22:02,320 --> 00:22:04,400
find that is by actually just running it

681
00:22:04,400 --> 00:22:05,440
and looking at

682
00:22:05,440 --> 00:22:07,760
what the app is actually doing both

683
00:22:07,760 --> 00:22:09,679
through you know debug logs as well as

684
00:22:09,679 --> 00:22:11,280
what's going out over the network

685
00:22:11,280 --> 00:22:13,520
to make sure that all the data that's

686
00:22:13,520 --> 00:22:14,559
being sent is

687
00:22:14,559 --> 00:22:16,400
accurately disclosed in your privacy

688
00:22:16,400 --> 00:22:18,240
policy and is in compliance with

689
00:22:18,240 --> 00:22:21,600
relevant laws and with that i'll leave

690
00:22:21,600 --> 00:22:22,480
it there

691
00:22:22,480 --> 00:22:27,840
thank you

692
00:22:33,200 --> 00:22:35,280
you

