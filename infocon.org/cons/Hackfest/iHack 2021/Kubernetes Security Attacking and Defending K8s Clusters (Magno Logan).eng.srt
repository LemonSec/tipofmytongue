1
00:00:06,480 --> 00:00:07,120
all right

2
00:00:07,120 --> 00:00:10,240
last talk of the day everyone uh thanks

3
00:00:10,240 --> 00:00:11,360
magno to be here

4
00:00:11,360 --> 00:00:13,280
i we're gonna finish this with

5
00:00:13,280 --> 00:00:14,719
kubernetes security

6
00:00:14,719 --> 00:00:17,119
attacking and defending defending

7
00:00:17,119 --> 00:00:20,240
communities cluster

8
00:00:20,240 --> 00:00:24,000
there you go you're all set

9
00:00:24,000 --> 00:00:27,119
okay awesome thank you yeah uh

10
00:00:27,119 --> 00:00:29,279
hello and and welcome everyone thanks

11
00:00:29,279 --> 00:00:30,320
for staying

12
00:00:30,320 --> 00:00:33,840
uh up for for this last talk and

13
00:00:33,840 --> 00:00:35,440
yeah uh we're gonna talk about

14
00:00:35,440 --> 00:00:37,280
kubernetes security attacking

15
00:00:37,280 --> 00:00:40,640
and defending kubernetes cluster uh just

16
00:00:40,640 --> 00:00:43,680
give me a thumbs up on the chat if you

17
00:00:43,680 --> 00:00:44,800
can hear me okay

18
00:00:44,800 --> 00:00:46,640
if you can see the slides okay just let

19
00:00:46,640 --> 00:00:48,000
me know uh

20
00:00:48,000 --> 00:00:51,280
if you have any issues as well um yeah

21
00:00:51,280 --> 00:00:54,399
so yeah my name is magna logan um

22
00:00:54,399 --> 00:00:57,760
see here okay good okay so yeah my name

23
00:00:57,760 --> 00:00:58,640
is magnum logan

24
00:00:58,640 --> 00:01:00,320
i work as an information security

25
00:01:00,320 --> 00:01:01,680
specialist and senior

26
00:01:01,680 --> 00:01:04,559
researcher at trent micro here in canada

27
00:01:04,559 --> 00:01:06,159
um

28
00:01:06,159 --> 00:01:08,720
i'm a part a member of the cloud and

29
00:01:08,720 --> 00:01:11,200
container security research team

30
00:01:11,200 --> 00:01:14,240
and i'm also a member of the cncf tag

31
00:01:14,240 --> 00:01:15,920
security team which is

32
00:01:15,920 --> 00:01:18,080
another team from the cloud native

33
00:01:18,080 --> 00:01:20,640
computing foundation who focuses on on

34
00:01:20,640 --> 00:01:23,680
security issues and problems

35
00:01:23,680 --> 00:01:26,720
i'm not a kubernetes security expert yet

36
00:01:26,720 --> 00:01:28,320
right i'm still learning i started

37
00:01:28,320 --> 00:01:29,759
learning and researching about

38
00:01:29,759 --> 00:01:32,560
kubernetes security uh last year

39
00:01:32,560 --> 00:01:35,799
and i also have a personal blog there at

40
00:01:35,799 --> 00:01:36,960
katanasac.com

41
00:01:36,960 --> 00:01:40,720
which i try try to publish at least

42
00:01:40,720 --> 00:01:43,040
once a month on article a technical

43
00:01:43,040 --> 00:01:44,640
article once a month

44
00:01:44,640 --> 00:01:48,000
and also i have there all my contact

45
00:01:48,000 --> 00:01:48,880
information

46
00:01:48,880 --> 00:01:52,159
and also previous talks and videos and

47
00:01:52,159 --> 00:01:54,320
slides of my previous presentations it's

48
00:01:54,320 --> 00:01:55,439
all there so

49
00:01:55,439 --> 00:01:58,559
feel free to check it out

50
00:01:58,719 --> 00:02:01,200
okay so this is the agenda for today

51
00:02:01,200 --> 00:02:02,960
right i know it's a little bit of

52
00:02:02,960 --> 00:02:04,640
extensive but we'll try to cover

53
00:02:04,640 --> 00:02:06,320
everything in one in the time that we

54
00:02:06,320 --> 00:02:08,479
have at 60 minutes right i think it's

55
00:02:08,479 --> 00:02:10,560
it's enough for us to talk about it

56
00:02:10,560 --> 00:02:12,800
but before i start before i focus on

57
00:02:12,800 --> 00:02:14,080
this agenda

58
00:02:14,080 --> 00:02:16,640
and i asked this question on the discord

59
00:02:16,640 --> 00:02:17,360
chat and

60
00:02:17,360 --> 00:02:19,520
it i didn't get a lot of answers though

61
00:02:19,520 --> 00:02:20,480
but like

62
00:02:20,480 --> 00:02:23,680
how i i need to see and

63
00:02:23,680 --> 00:02:25,360
understand how familiar you are with

64
00:02:25,360 --> 00:02:26,959
kubernetes right because

65
00:02:26,959 --> 00:02:29,840
it doesn't make sense if i go too deep

66
00:02:29,840 --> 00:02:32,000
into the topic and talk about kubernetes

67
00:02:32,000 --> 00:02:33,120
security but

68
00:02:33,120 --> 00:02:36,080
you're not familiar on how kubernetes

69
00:02:36,080 --> 00:02:38,080
works and and you don't understand

70
00:02:38,080 --> 00:02:40,800
those uh issues right so i'm just gonna

71
00:02:40,800 --> 00:02:41,519
give a little

72
00:02:41,519 --> 00:02:43,440
uh introduction a brief introduction

73
00:02:43,440 --> 00:02:45,040
about kubernetes for

74
00:02:45,040 --> 00:02:47,040
those who are not familiar so just bear

75
00:02:47,040 --> 00:02:50,160
with me okay

76
00:02:50,160 --> 00:02:52,560
so yeah basically kubernetes is an open

77
00:02:52,560 --> 00:02:54,720
source system for automating deployment

78
00:02:54,720 --> 00:02:57,280
scaling and management of containerized

79
00:02:57,280 --> 00:02:58,879
applications right so

80
00:02:58,879 --> 00:03:01,680
what does that mean right um so

81
00:03:01,680 --> 00:03:02,640
basically if you

82
00:03:02,640 --> 00:03:05,599
if you know uh uh i'm assuming you know

83
00:03:05,599 --> 00:03:06,480
docker and you've

84
00:03:06,480 --> 00:03:08,159
heard about docker before at least

85
00:03:08,159 --> 00:03:09,760
played with docker a little bit

86
00:03:09,760 --> 00:03:12,319
right you have your your application you

87
00:03:12,319 --> 00:03:14,400
package that into a container

88
00:03:14,400 --> 00:03:16,879
right and and you tell that to run on a

89
00:03:16,879 --> 00:03:19,360
docker host right

90
00:03:19,360 --> 00:03:22,000
the problem is when you start scaling

91
00:03:22,000 --> 00:03:23,519
that and you have

92
00:03:23,519 --> 00:03:26,159
hundreds or thousands of containers and

93
00:03:26,159 --> 00:03:28,799
you need to manage those and understand

94
00:03:28,799 --> 00:03:31,120
uh how they're doing if there are any

95
00:03:31,120 --> 00:03:33,360
issues if they need more resources

96
00:03:33,360 --> 00:03:36,400
if if a container would stop working

97
00:03:36,400 --> 00:03:38,879
right it's hard to do that only with

98
00:03:38,879 --> 00:03:39,840
docker

99
00:03:39,840 --> 00:03:43,040
right so that's when uh that's when they

100
00:03:43,040 --> 00:03:45,599
decided to work on kubernetes and and

101
00:03:45,599 --> 00:03:46,720
the history behind

102
00:03:46,720 --> 00:03:49,519
it it was developed by google right and

103
00:03:49,519 --> 00:03:50,560
it's based on

104
00:03:50,560 --> 00:03:53,439
internal projects by google from called

105
00:03:53,439 --> 00:03:54,959
borg and omega

106
00:03:54,959 --> 00:03:57,439
right it's developed in gold so it's

107
00:03:57,439 --> 00:03:58,640
using golang

108
00:03:58,640 --> 00:04:01,519
right which is uh very common for new

109
00:04:01,519 --> 00:04:03,599
cloud and cloud native technologies to

110
00:04:03,599 --> 00:04:04,799
use go

111
00:04:04,799 --> 00:04:07,840
and today it's it was donated by google

112
00:04:07,840 --> 00:04:09,120
to the cncf

113
00:04:09,120 --> 00:04:11,760
uh and it's maintained today by the cncf

114
00:04:11,760 --> 00:04:13,680
so the cncf is the cloud native

115
00:04:13,680 --> 00:04:15,280
computing foundation

116
00:04:15,280 --> 00:04:18,160
which is a subfoundation of the linux

117
00:04:18,160 --> 00:04:18,880
foundation

118
00:04:18,880 --> 00:04:22,000
right and just a fun fact here right

119
00:04:22,000 --> 00:04:24,800
kubernetes comes from the greek word it

120
00:04:24,800 --> 00:04:25,919
comes from greek

121
00:04:25,919 --> 00:04:29,120
right the word means helmsman or or

122
00:04:29,120 --> 00:04:32,479
like pilot in an analogy for the one

123
00:04:32,479 --> 00:04:34,880
uh that's kind of driving the chip the

124
00:04:34,880 --> 00:04:36,400
ship right the the the

125
00:04:36,400 --> 00:04:39,280
uh uh the cat it's not always the

126
00:04:39,280 --> 00:04:40,320
captain so

127
00:04:40,320 --> 00:04:42,479
the helmsman might be captain but

128
00:04:42,479 --> 00:04:43,840
sometimes it can be

129
00:04:43,840 --> 00:04:48,560
it can be somebody else right okay

130
00:04:48,560 --> 00:04:52,320
everything's fine for now okay good

131
00:04:52,400 --> 00:04:55,840
so uh uh one of the things that

132
00:04:55,840 --> 00:04:57,919
you need to understand if your

133
00:04:57,919 --> 00:04:59,759
organization is thinking about adopting

134
00:04:59,759 --> 00:05:02,240
kubernetes right you need to know like

135
00:05:02,240 --> 00:05:04,880
why should we adopt kubernetes and from

136
00:05:04,880 --> 00:05:06,479
my perspective

137
00:05:06,479 --> 00:05:08,800
kubernetes is a very complex system and

138
00:05:08,800 --> 00:05:10,320
it's hard to understand at first

139
00:05:10,320 --> 00:05:11,759
especially if you don't have

140
00:05:11,759 --> 00:05:14,800
the the background on uh

141
00:05:14,800 --> 00:05:17,840
on linux and all the all the basics that

142
00:05:17,840 --> 00:05:18,960
it uses

143
00:05:18,960 --> 00:05:21,680
on containers and everything right so

144
00:05:21,680 --> 00:05:23,840
it's very easy to make mistakes

145
00:05:23,840 --> 00:05:25,199
if you're not following the best

146
00:05:25,199 --> 00:05:26,960
practices right so uh

147
00:05:26,960 --> 00:05:29,759
you it's important to understand that if

148
00:05:29,759 --> 00:05:30,400
you if you're

149
00:05:30,400 --> 00:05:32,560
willing to go that route and use

150
00:05:32,560 --> 00:05:34,720
kubernetes in your environment

151
00:05:34,720 --> 00:05:37,360
that you you understand the challenges

152
00:05:37,360 --> 00:05:38,000
that you might

153
00:05:38,000 --> 00:05:41,520
face you have uh proper resources

154
00:05:41,520 --> 00:05:44,160
and qualified people to work on that

155
00:05:44,160 --> 00:05:47,600
cluster and maintain it right

156
00:05:47,600 --> 00:05:49,199
there are other alternatives to

157
00:05:49,199 --> 00:05:51,120
kubernetes if you want so

158
00:05:51,120 --> 00:05:54,560
uh apache mesos docker swarm is another

159
00:05:54,560 --> 00:05:55,199
one

160
00:05:55,199 --> 00:05:57,440
and there is also kind of an enterprise

161
00:05:57,440 --> 00:05:59,280
version of kubernetes that

162
00:05:59,280 --> 00:06:02,800
uh had had openshift right so you can

163
00:06:02,800 --> 00:06:04,479
try that as well when we're gonna talk

164
00:06:04,479 --> 00:06:05,199
about

165
00:06:05,199 --> 00:06:08,400
uh other uh other versions of kubernetes

166
00:06:08,400 --> 00:06:09,520
which are the

167
00:06:09,520 --> 00:06:11,039
managed versions from the cloud

168
00:06:11,039 --> 00:06:13,360
providers that you can also use

169
00:06:13,360 --> 00:06:15,840
which sometimes it's it's easier and

170
00:06:15,840 --> 00:06:18,840
faster to use for someone that's just

171
00:06:18,840 --> 00:06:21,840
starting

172
00:06:22,080 --> 00:06:24,880
and okay so this is this slide here we

173
00:06:24,880 --> 00:06:25,680
need to focus

174
00:06:25,680 --> 00:06:27,360
on on that a little bit because this

175
00:06:27,360 --> 00:06:29,520
shows the kubernetes architecture

176
00:06:29,520 --> 00:06:33,360
right and um we need to understand

177
00:06:33,360 --> 00:06:37,120
all the the little pieces pieces that

178
00:06:37,120 --> 00:06:39,280
work in a kubernetes cluster and

179
00:06:39,280 --> 00:06:40,479
understand what they do

180
00:06:40,479 --> 00:06:43,840
right so basically uh

181
00:06:43,840 --> 00:06:46,639
it's the the architecture is built on

182
00:06:46,639 --> 00:06:48,319
the concept of transient

183
00:06:48,319 --> 00:06:50,800
decoupled objects connected together

184
00:06:50,800 --> 00:06:51,360
right

185
00:06:51,360 --> 00:06:54,560
so each of those objects you are able to

186
00:06:54,560 --> 00:06:55,919
change it and develop

187
00:06:55,919 --> 00:06:58,240
develop your own if you want right if

188
00:06:58,240 --> 00:07:00,240
you want to change the cubelet or the

189
00:07:00,240 --> 00:07:02,800
cube proxy right you can do that right

190
00:07:02,800 --> 00:07:05,680
it's not the it's not always the case

191
00:07:05,680 --> 00:07:06,800
but but you're you're

192
00:07:06,800 --> 00:07:09,520
that's this possibility of just removing

193
00:07:09,520 --> 00:07:11,039
an object and

194
00:07:11,039 --> 00:07:14,000
and and replacing with something else so

195
00:07:14,000 --> 00:07:15,120
let's start on the

196
00:07:15,120 --> 00:07:17,520
the left side here which is the control

197
00:07:17,520 --> 00:07:18,560
plane

198
00:07:18,560 --> 00:07:21,280
architecture also known as master node

199
00:07:21,280 --> 00:07:22,720
but for

200
00:07:22,720 --> 00:07:24,720
for inclusive language where i'm gonna

201
00:07:24,720 --> 00:07:26,800
i'm just gonna call from now on

202
00:07:26,800 --> 00:07:30,479
now on control plane um

203
00:07:30,479 --> 00:07:33,039
so basically what we have here we have

204
00:07:33,039 --> 00:07:35,840
five major components and we can see

205
00:07:35,840 --> 00:07:36,639
right away

206
00:07:36,639 --> 00:07:39,680
from uh from the diagram

207
00:07:39,680 --> 00:07:42,560
that there is a component in the middle

208
00:07:42,560 --> 00:07:43,440
that's

209
00:07:43,440 --> 00:07:45,680
that's kind of the proxy of all the

210
00:07:45,680 --> 00:07:47,280
communications not just

211
00:07:47,280 --> 00:07:50,319
inside the control plane but also to the

212
00:07:50,319 --> 00:07:52,639
outside to the worker nodes on the right

213
00:07:52,639 --> 00:07:55,919
okay okay so that's the cube api server

214
00:07:55,919 --> 00:07:58,720
right and and what what does that mean

215
00:07:58,720 --> 00:08:00,879
it's basically an api server right if

216
00:08:00,879 --> 00:08:02,160
you played with with

217
00:08:02,160 --> 00:08:04,879
web applications and apis before that's

218
00:08:04,879 --> 00:08:06,879
it it's an api server right

219
00:08:06,879 --> 00:08:09,520
that's responsible for exposing and

220
00:08:09,520 --> 00:08:11,440
receiving api calls

221
00:08:11,440 --> 00:08:14,240
so that's uh it receives communication

222
00:08:14,240 --> 00:08:15,919
from all those components and

223
00:08:15,919 --> 00:08:18,720
and sends them around to the right

224
00:08:18,720 --> 00:08:19,599
location

225
00:08:19,599 --> 00:08:23,440
right on the on the left

226
00:08:23,440 --> 00:08:24,960
side on the bottom left side you will

227
00:08:24,960 --> 00:08:26,720
have the add cd

228
00:08:26,720 --> 00:08:30,240
right and the lcd is the database

229
00:08:30,240 --> 00:08:33,039
or where kubernetes stores all the

230
00:08:33,039 --> 00:08:33,839
information

231
00:08:33,839 --> 00:08:36,080
all the internal information that about

232
00:08:36,080 --> 00:08:36,958
your cluster

233
00:08:36,958 --> 00:08:39,440
your nodes your containers everything is

234
00:08:39,440 --> 00:08:40,559
there right

235
00:08:40,559 --> 00:08:43,039
so for example which nodes are part of

236
00:08:43,039 --> 00:08:43,760
the cluster

237
00:08:43,760 --> 00:08:46,560
which resources exist on a cluster

238
00:08:46,560 --> 00:08:47,600
everything

239
00:08:47,600 --> 00:08:50,959
so and and it's important to note here

240
00:08:50,959 --> 00:08:51,920
that

241
00:08:51,920 --> 00:08:54,399
uh one one concept from kubernetes

242
00:08:54,399 --> 00:08:55,360
that's different from

243
00:08:55,360 --> 00:08:58,720
other kind of applications is that

244
00:08:58,720 --> 00:09:02,320
it uses uh something called

245
00:09:02,320 --> 00:09:05,760
uh how can i say um

246
00:09:05,760 --> 00:09:08,800
it's it's called declarative state or

247
00:09:08,800 --> 00:09:11,040
desired state if if i'm not wrong

248
00:09:11,040 --> 00:09:14,959
so in a way that your your cluster

249
00:09:14,959 --> 00:09:17,920
like you tell your cluster what you want

250
00:09:17,920 --> 00:09:19,920
you don't care how it's gonna do it

251
00:09:19,920 --> 00:09:23,279
right you say okay i want i want my

252
00:09:23,279 --> 00:09:26,640
my container running and exposing uh

253
00:09:26,640 --> 00:09:29,600
this port and it's a web application and

254
00:09:29,600 --> 00:09:31,279
it's an image that's stored on docker

255
00:09:31,279 --> 00:09:32,959
hub for example right

256
00:09:32,959 --> 00:09:35,279
you don't care how it's gonna do it but

257
00:09:35,279 --> 00:09:37,440
once you store on that cd

258
00:09:37,440 --> 00:09:39,760
right the other components are going to

259
00:09:39,760 --> 00:09:40,640
check that

260
00:09:40,640 --> 00:09:44,480
and making sure that okay is it

261
00:09:44,480 --> 00:09:47,600
is there a container for like engine x

262
00:09:47,600 --> 00:09:49,040
running on the cluster already

263
00:09:49,040 --> 00:09:51,279
no there's there isn't right okay so we

264
00:09:51,279 --> 00:09:52,560
need one because

265
00:09:52,560 --> 00:09:54,640
that's what we're seeing here on that cd

266
00:09:54,640 --> 00:09:57,040
yes it is kind of the rule of thumb

267
00:09:57,040 --> 00:09:59,680
of my cluster and whatever it's there i

268
00:09:59,680 --> 00:10:00,959
need to reflect on

269
00:10:00,959 --> 00:10:03,519
on the actual state of my cluster right

270
00:10:03,519 --> 00:10:05,040
so that's that's a very important

271
00:10:05,040 --> 00:10:07,839
component here and we'll go back to lcd

272
00:10:07,839 --> 00:10:10,880
uh in the next slides uh

273
00:10:10,880 --> 00:10:13,200
on the top left i have the cube

274
00:10:13,200 --> 00:10:14,399
controller manager

275
00:10:14,399 --> 00:10:16,959
right and the cube controller manager is

276
00:10:16,959 --> 00:10:18,079
responsible for

277
00:10:18,079 --> 00:10:20,560
many different internal tasks of the

278
00:10:20,560 --> 00:10:21,440
cluster

279
00:10:21,440 --> 00:10:24,560
like noticing when one node uh

280
00:10:24,560 --> 00:10:27,680
is not responding right when uh making

281
00:10:27,680 --> 00:10:29,920
sure that you have the correct number of

282
00:10:29,920 --> 00:10:31,760
pods that you need right you can have

283
00:10:31,760 --> 00:10:34,079
replicas and and and different number of

284
00:10:34,079 --> 00:10:35,760
pods and i'll get to the

285
00:10:35,760 --> 00:10:37,600
to the terminology and the concept of

286
00:10:37,600 --> 00:10:39,440
pods in in the next slide

287
00:10:39,440 --> 00:10:42,079
uh but but that's very important so it's

288
00:10:42,079 --> 00:10:43,760
it's like a controller

289
00:10:43,760 --> 00:10:47,279
and uh i'm sorry if there is any manager

290
00:10:47,279 --> 00:10:50,560
watching but like a manager

291
00:10:50,560 --> 00:10:54,160
right so uh uh it doesn't do anything

292
00:10:54,160 --> 00:10:56,880
basically the controller manager has sub

293
00:10:56,880 --> 00:10:58,399
components that

294
00:10:58,399 --> 00:11:00,560
are the really the ones that that

295
00:11:00,560 --> 00:11:01,440
control

296
00:11:01,440 --> 00:11:03,600
the kubernetes cluster right so you have

297
00:11:03,600 --> 00:11:05,360
a controller for pods you have a

298
00:11:05,360 --> 00:11:07,200
controller for services

299
00:11:07,200 --> 00:11:09,839
and all that stuff but basically it's a

300
00:11:09,839 --> 00:11:10,959
big component with

301
00:11:10,959 --> 00:11:15,360
smaller components there as well um

302
00:11:15,360 --> 00:11:17,920
you also have on the the bottom right

303
00:11:17,920 --> 00:11:19,760
there you have the cube scheduler

304
00:11:19,760 --> 00:11:21,839
which is the one that decides where to

305
00:11:21,839 --> 00:11:23,680
execute the pods right so

306
00:11:23,680 --> 00:11:25,839
once it checks on that cd that there is

307
00:11:25,839 --> 00:11:26,800
a uh

308
00:11:26,800 --> 00:11:29,360
a pod that needs to run on my cluster

309
00:11:29,360 --> 00:11:31,519
then it's gonna look at the available

310
00:11:31,519 --> 00:11:33,440
nodes on the right the worker nodes

311
00:11:33,440 --> 00:11:35,040
which are the ones that run the

312
00:11:35,040 --> 00:11:37,360
the actual applications of my cluster

313
00:11:37,360 --> 00:11:38,720
and it's gonna check which

314
00:11:38,720 --> 00:11:41,120
which node should i run this spot right

315
00:11:41,120 --> 00:11:43,760
if if if node one or node two

316
00:11:43,760 --> 00:11:45,680
they're easy and there have a lot they

317
00:11:45,680 --> 00:11:47,440
have a lot of containers and pods

318
00:11:47,440 --> 00:11:48,560
running already

319
00:11:48,560 --> 00:11:50,800
then it's gonna try to to to run that

320
00:11:50,800 --> 00:11:51,680
pod on on

321
00:11:51,680 --> 00:11:54,160
node three right so it checks that the

322
00:11:54,160 --> 00:11:55,200
schedules

323
00:11:55,200 --> 00:11:58,000
actually it schedules and sends a

324
00:11:58,000 --> 00:12:00,000
communication to the cubelet

325
00:12:00,000 --> 00:12:01,839
for the cubelet to store the container

326
00:12:01,839 --> 00:12:03,200
but we will get to that

327
00:12:03,200 --> 00:12:07,360
in uh in in a second

328
00:12:07,360 --> 00:12:10,560
um and on the bottom on the top right

329
00:12:10,560 --> 00:12:13,440
we have the controller manager which is

330
00:12:13,440 --> 00:12:15,200
the one that interacts with the cloud

331
00:12:15,200 --> 00:12:16,160
providers

332
00:12:16,160 --> 00:12:18,880
uh managing resources such as like load

333
00:12:18,880 --> 00:12:20,160
balancer and disk

334
00:12:20,160 --> 00:12:23,200
volumes right okay

335
00:12:23,200 --> 00:12:25,279
so we covered the control plane at least

336
00:12:25,279 --> 00:12:27,279
the five major components there

337
00:12:27,279 --> 00:12:29,360
and now we're going to talk about the

338
00:12:29,360 --> 00:12:31,600
worker node so here in this diagram i

339
00:12:31,600 --> 00:12:33,440
have three worker nodes

340
00:12:33,440 --> 00:12:36,560
and each of them they have a cubelet

341
00:12:36,560 --> 00:12:40,240
a cube proxy and and this kind of

342
00:12:40,240 --> 00:12:43,600
uh computer icon here uh is basically my

343
00:12:43,600 --> 00:12:45,200
container runtime engine

344
00:12:45,200 --> 00:12:49,519
right so what what what does it mean

345
00:12:49,519 --> 00:12:51,600
or what are those components right

346
00:12:51,600 --> 00:12:53,920
basically the cubelet is responsible for

347
00:12:53,920 --> 00:12:54,720
managing

348
00:12:54,720 --> 00:12:56,800
the container runtime engine right

349
00:12:56,800 --> 00:12:59,360
executing the containers when necessary

350
00:12:59,360 --> 00:13:01,920
and also collecting information from

351
00:13:01,920 --> 00:13:03,360
execution information

352
00:13:03,360 --> 00:13:06,959
right uh you also have the q proxy

353
00:13:06,959 --> 00:13:09,839
which manages the communication uh the

354
00:13:09,839 --> 00:13:11,200
network communication

355
00:13:11,200 --> 00:13:14,000
allowing different containers to talk to

356
00:13:14,000 --> 00:13:14,560
each other

357
00:13:14,560 --> 00:13:17,200
right uh and also responsible for

358
00:13:17,200 --> 00:13:18,160
receiving

359
00:13:18,160 --> 00:13:21,680
external uh requests and

360
00:13:21,680 --> 00:13:23,440
yeah and at the bottom you have the

361
00:13:23,440 --> 00:13:25,519
container runtime which is actually the

362
00:13:25,519 --> 00:13:27,200
the engine that that

363
00:13:27,200 --> 00:13:30,560
executes the containers uh uh itself

364
00:13:30,560 --> 00:13:34,959
right so by default it was docker and

365
00:13:34,959 --> 00:13:36,800
i don't know if you heard about the

366
00:13:36,800 --> 00:13:38,399
discussion

367
00:13:38,399 --> 00:13:41,680
about docker being deprecated and

368
00:13:41,680 --> 00:13:44,000
kind of the internet going crazy about

369
00:13:44,000 --> 00:13:45,199
that which

370
00:13:45,199 --> 00:13:47,920
which wasn't actually true docker wasn't

371
00:13:47,920 --> 00:13:49,120
being deprecated

372
00:13:49,120 --> 00:13:51,279
what was being deprecated in kubernetes

373
00:13:51,279 --> 00:13:52,800
was docker shim

374
00:13:52,800 --> 00:13:54,959
which is basically an extension to

375
00:13:54,959 --> 00:13:56,000
support docker and

376
00:13:56,000 --> 00:13:58,639
kubernetes because docker by default it

377
00:13:58,639 --> 00:14:01,199
doesn't follow the

378
00:14:01,199 --> 00:14:04,399
the oci the open

379
00:14:04,399 --> 00:14:07,199
container interface and and so he

380
00:14:07,199 --> 00:14:09,040
wouldn't be able to run

381
00:14:09,040 --> 00:14:11,360
by itself that's why they created like a

382
00:14:11,360 --> 00:14:13,440
gym that's they call docker shim

383
00:14:13,440 --> 00:14:15,600
to be able to run docker as the default

384
00:14:15,600 --> 00:14:17,360
runtime engine kubernetes

385
00:14:17,360 --> 00:14:20,560
right uh but yeah that's not that

386
00:14:20,560 --> 00:14:22,480
docker is not being deprecated you can

387
00:14:22,480 --> 00:14:24,560
still run and you you'll be able to run

388
00:14:24,560 --> 00:14:26,480
your docker containers on kubernetes

389
00:14:26,480 --> 00:14:27,199
clusters

390
00:14:27,199 --> 00:14:30,160
for a long time but kubernetes the the

391
00:14:30,160 --> 00:14:31,120
runtime engine

392
00:14:31,120 --> 00:14:34,000
might change and it could be the

393
00:14:34,000 --> 00:14:35,279
container d it can be

394
00:14:35,279 --> 00:14:38,399
cryo or any other container container

395
00:14:38,399 --> 00:14:40,399
runtime engine like podman or something

396
00:14:40,399 --> 00:14:42,720
like that

397
00:14:42,720 --> 00:14:46,560
uh and as i said like in kubernetes

398
00:14:46,560 --> 00:14:49,519
pod is the smallest unit that you can

399
00:14:49,519 --> 00:14:51,519
have the smallest deployment unit that

400
00:14:51,519 --> 00:14:52,560
can have

401
00:14:52,560 --> 00:14:55,680
and a pod can have one or more

402
00:14:55,680 --> 00:14:57,519
containers so i'm gonna show that in the

403
00:14:57,519 --> 00:14:59,279
next slide here

404
00:14:59,279 --> 00:15:01,920
so basically here we have some objects

405
00:15:01,920 --> 00:15:03,279
um

406
00:15:03,279 --> 00:15:06,399
we have like outside the uh outside of

407
00:15:06,399 --> 00:15:08,079
the cluster we have nodes right they

408
00:15:08,079 --> 00:15:09,920
showed the worker nodes

409
00:15:09,920 --> 00:15:12,959
and and also the master node or the

410
00:15:12,959 --> 00:15:14,480
control plane sorry

411
00:15:14,480 --> 00:15:17,279
um of the cluster right so every node

412
00:15:17,279 --> 00:15:18,800
you can basically

413
00:15:18,800 --> 00:15:22,000
uh deploy your applications right there

414
00:15:22,000 --> 00:15:23,920
is some restrictions about deploying

415
00:15:23,920 --> 00:15:25,600
applications on your control plane

416
00:15:25,600 --> 00:15:27,199
that's not recommended and that's

417
00:15:27,199 --> 00:15:28,079
because

418
00:15:28,079 --> 00:15:31,279
that's where your your main pods right

419
00:15:31,279 --> 00:15:33,360
your main components of your kubernetes

420
00:15:33,360 --> 00:15:34,000
clusters

421
00:15:34,000 --> 00:15:37,120
is running right but they also uh and

422
00:15:37,120 --> 00:15:39,040
we don't show on that diagram because

423
00:15:39,040 --> 00:15:40,880
it's not also on the official

424
00:15:40,880 --> 00:15:42,240
documentation

425
00:15:42,240 --> 00:15:44,880
but the control plane also has a cubelet

426
00:15:44,880 --> 00:15:47,040
the q proxy and the runtime engine as

427
00:15:47,040 --> 00:15:47,519
well

428
00:15:47,519 --> 00:15:50,800
right okay good so

429
00:15:50,800 --> 00:15:54,160
now uh basically here we have the node

430
00:15:54,160 --> 00:15:55,839
which is like your virtual machine it

431
00:15:55,839 --> 00:15:56,560
can be a

432
00:15:56,560 --> 00:15:58,800
metal server can be it's basically the

433
00:15:58,800 --> 00:15:59,839
host of your

434
00:15:59,839 --> 00:16:01,839
your applications right and inside

435
00:16:01,839 --> 00:16:03,279
kubernetes you can

436
00:16:03,279 --> 00:16:07,440
uh have name spaces so namespaces are

437
00:16:07,440 --> 00:16:10,560
logical separation of objects of

438
00:16:10,560 --> 00:16:11,600
projects right

439
00:16:11,600 --> 00:16:14,160
so think of namespace like a folder for

440
00:16:14,160 --> 00:16:16,240
your cluster for you to be able

441
00:16:16,240 --> 00:16:19,920
to uh organize it and run separate

442
00:16:19,920 --> 00:16:22,000
applications or separate projects like

443
00:16:22,000 --> 00:16:23,199
dive qa

444
00:16:23,199 --> 00:16:25,920
and production uh are of the same of the

445
00:16:25,920 --> 00:16:27,360
same application right

446
00:16:27,360 --> 00:16:30,320
it's not like a a security boundary it's

447
00:16:30,320 --> 00:16:30,800
not

448
00:16:30,800 --> 00:16:33,839
a a physical boundary right it's just a

449
00:16:33,839 --> 00:16:36,560
logical separation there you can also

450
00:16:36,560 --> 00:16:38,959
have deployments in kubernetes which is

451
00:16:38,959 --> 00:16:39,680
basically an

452
00:16:39,680 --> 00:16:42,720
object that helps with scaling

453
00:16:42,720 --> 00:16:45,680
updates and rollbacks right it's like

454
00:16:45,680 --> 00:16:46,639
abstraction

455
00:16:46,639 --> 00:16:50,079
right and at the at the bottom there at

456
00:16:50,079 --> 00:16:53,199
the at the at the middle there like the

457
00:16:53,199 --> 00:16:54,000
the

458
00:16:54,000 --> 00:16:56,560
the kind of the kernel of the kubernetes

459
00:16:56,560 --> 00:16:58,639
you have the pod right which i said it's

460
00:16:58,639 --> 00:17:00,160
the smallest unit

461
00:17:00,160 --> 00:17:02,639
of kubernetes you can't deploy you can't

462
00:17:02,639 --> 00:17:04,160
apply a container

463
00:17:04,160 --> 00:17:06,240
in kubernetes without the pot right you

464
00:17:06,240 --> 00:17:08,640
need a pot you need the pod object

465
00:17:08,640 --> 00:17:10,880
and then on your pod that's when you run

466
00:17:10,880 --> 00:17:12,160
your containers

467
00:17:12,160 --> 00:17:14,559
and inside those pods you can either

468
00:17:14,559 --> 00:17:16,079
have one container

469
00:17:16,079 --> 00:17:18,319
or you can have more two or more

470
00:17:18,319 --> 00:17:19,439
containers right

471
00:17:19,439 --> 00:17:23,280
so there is some applications for uh uh

472
00:17:23,280 --> 00:17:25,439
in in containers we usually want a

473
00:17:25,439 --> 00:17:26,799
container to only run

474
00:17:26,799 --> 00:17:29,919
one process right and so

475
00:17:29,919 --> 00:17:33,679
in this case i can have a pod uh running

476
00:17:33,679 --> 00:17:36,080
my application which is just one process

477
00:17:36,080 --> 00:17:37,840
of my of my container

478
00:17:37,840 --> 00:17:40,000
and i can have another container

479
00:17:40,000 --> 00:17:41,520
collecting the logs and

480
00:17:41,520 --> 00:17:45,039
and like data and analytics information

481
00:17:45,039 --> 00:17:47,120
of the other container which we call

482
00:17:47,120 --> 00:17:49,840
this this other container like a sidecar

483
00:17:49,840 --> 00:17:52,400
container because it has another process

484
00:17:52,400 --> 00:17:54,240
so that i don't have to run

485
00:17:54,240 --> 00:17:56,799
two processes on the same container

486
00:17:56,799 --> 00:17:57,440
right

487
00:17:57,440 --> 00:18:00,799
so basically that's that

488
00:18:00,799 --> 00:18:03,520
uh we also have other objects right but

489
00:18:03,520 --> 00:18:05,360
i won't be able to cover those

490
00:18:05,360 --> 00:18:08,400
uh here i cover pod but there is also

491
00:18:08,400 --> 00:18:09,039
right

492
00:18:09,039 --> 00:18:11,919
replica sets demon sets stateful sets

493
00:18:11,919 --> 00:18:13,840
all those objects each of them they have

494
00:18:13,840 --> 00:18:15,039
a specific

495
00:18:15,039 --> 00:18:17,840
uh kind of characteristic and specific

496
00:18:17,840 --> 00:18:18,559
usage

497
00:18:18,559 --> 00:18:21,360
right you also have jobs and cron jobs

498
00:18:21,360 --> 00:18:21,919
right which

499
00:18:21,919 --> 00:18:25,679
basically uh a container a job is

500
00:18:25,679 --> 00:18:27,440
basically a container that runs only

501
00:18:27,440 --> 00:18:29,600
once and a current job is basically

502
00:18:29,600 --> 00:18:31,679
a container that you can run you can

503
00:18:31,679 --> 00:18:33,120
schedule like a cron

504
00:18:33,120 --> 00:18:35,760
right on linux like a crontab right and

505
00:18:35,760 --> 00:18:37,679
other objects there and they usually

506
00:18:37,679 --> 00:18:40,080
they're usually created uh you have like

507
00:18:40,080 --> 00:18:42,000
their emo files which is

508
00:18:42,000 --> 00:18:45,760
similar to this uh this this file to the

509
00:18:45,760 --> 00:18:46,480
right here

510
00:18:46,480 --> 00:18:49,520
of the slide right and and there is many

511
00:18:49,520 --> 00:18:51,520
others right you can create your own

512
00:18:51,520 --> 00:18:53,679
kubernetes objects if you use

513
00:18:53,679 --> 00:18:57,120
uh uh crds and all that stuff

514
00:18:57,120 --> 00:18:58,640
okay that's that's great that's a lot of

515
00:18:58,640 --> 00:19:00,640
information but how do i

516
00:19:00,640 --> 00:19:02,799
how do i talk to my cluster right if i

517
00:19:02,799 --> 00:19:04,160
deploy my cluster

518
00:19:04,160 --> 00:19:06,960
in in the cloud and how do how do i talk

519
00:19:06,960 --> 00:19:07,360
to it

520
00:19:07,360 --> 00:19:10,320
right so basically you can use similar

521
00:19:10,320 --> 00:19:12,320
to docker which you you have the docker

522
00:19:12,320 --> 00:19:13,280
command line

523
00:19:13,280 --> 00:19:15,600
right on kubernetes you have the cube

524
00:19:15,600 --> 00:19:16,320
ctl

525
00:19:16,320 --> 00:19:19,520
or cube control or cube cuddle however

526
00:19:19,520 --> 00:19:20,720
you want to name it

527
00:19:20,720 --> 00:19:22,960
right which is basically the cli that

528
00:19:22,960 --> 00:19:25,039
allows you to control kubernetes right

529
00:19:25,039 --> 00:19:25,919
so

530
00:19:25,919 --> 00:19:30,160
you use that and inside your uh

531
00:19:30,160 --> 00:19:33,200
your kubernetes folder you have a file

532
00:19:33,200 --> 00:19:35,280
the config file that has the

533
00:19:35,280 --> 00:19:37,919
information about the certificates and

534
00:19:37,919 --> 00:19:40,559
the keys for you to access that cluster

535
00:19:40,559 --> 00:19:42,720
right so it's very similar to the docker

536
00:19:42,720 --> 00:19:44,880
cli for docker containers so if you have

537
00:19:44,880 --> 00:19:46,240
experience with that

538
00:19:46,240 --> 00:19:48,320
you're gonna have uh it's it's gonna be

539
00:19:48,320 --> 00:19:52,480
easier for you to use chip ctl

540
00:19:52,480 --> 00:19:55,200
okay now i covered the basic

541
00:19:55,200 --> 00:19:56,080
introduction and

542
00:19:56,080 --> 00:19:58,640
i hope everyone has at least an overview

543
00:19:58,640 --> 00:20:00,320
of what kubernetes is

544
00:20:00,320 --> 00:20:03,120
and and how it works so before we move

545
00:20:03,120 --> 00:20:05,200
on i just want to mention that

546
00:20:05,200 --> 00:20:09,200
i created this uh github repo on

547
00:20:09,200 --> 00:20:12,559
on github last year as as a way for me

548
00:20:12,559 --> 00:20:13,039
to

549
00:20:13,039 --> 00:20:16,320
to kind of a reference it was

550
00:20:16,320 --> 00:20:19,360
basically a reference for myself to when

551
00:20:19,360 --> 00:20:20,960
i was researching kubernetes and

552
00:20:20,960 --> 00:20:22,480
kubernetes security

553
00:20:22,480 --> 00:20:24,880
and it was basically i started as a text

554
00:20:24,880 --> 00:20:25,520
file

555
00:20:25,520 --> 00:20:27,919
right in my own computer and then i

556
00:20:27,919 --> 00:20:29,200
decided to share that

557
00:20:29,200 --> 00:20:31,200
and and now it has become a big project

558
00:20:31,200 --> 00:20:33,039
and a lot of people are contributing to

559
00:20:33,039 --> 00:20:33,520
it

560
00:20:33,520 --> 00:20:35,919
so i call that the awesome kubernetes

561
00:20:35,919 --> 00:20:37,280
security list

562
00:20:37,280 --> 00:20:40,480
but it doesn't have only uh topics and

563
00:20:40,480 --> 00:20:42,960
materials about kubernetes security

564
00:20:42,960 --> 00:20:45,200
it has materials about kubernetes itself

565
00:20:45,200 --> 00:20:47,520
and it has some materials about docker

566
00:20:47,520 --> 00:20:49,840
so i have like books and blogs and

567
00:20:49,840 --> 00:20:50,640
videos from

568
00:20:50,640 --> 00:20:52,880
other uh other people other security

569
00:20:52,880 --> 00:20:54,400
professionals as well

570
00:20:54,400 --> 00:20:56,960
so i'll leave the link here and then

571
00:20:56,960 --> 00:20:58,960
i'll post that to discord as well so

572
00:20:58,960 --> 00:20:59,919
that you can

573
00:20:59,919 --> 00:21:03,120
you can store it you can fork it and you

574
00:21:03,120 --> 00:21:05,520
can also submit a pr if you find

575
00:21:05,520 --> 00:21:08,080
uh any an interesting link that's not

576
00:21:08,080 --> 00:21:10,240
there

577
00:21:10,240 --> 00:21:13,760
okay good so getting that out of the way

578
00:21:13,760 --> 00:21:16,080
so before we talk about uh the

579
00:21:16,080 --> 00:21:17,760
kubernetes attacks right

580
00:21:17,760 --> 00:21:20,000
i'm going to just give a brief overview

581
00:21:20,000 --> 00:21:22,320
of what is the miter track framework

582
00:21:22,320 --> 00:21:24,159
which we're going to use in this

583
00:21:24,159 --> 00:21:27,280
this presentation right if you work with

584
00:21:27,280 --> 00:21:28,480
security you probably

585
00:21:28,480 --> 00:21:31,679
heard about the minor attack framework

586
00:21:31,679 --> 00:21:33,760
if you don't i really recommend you to

587
00:21:33,760 --> 00:21:34,799
do it right

588
00:21:34,799 --> 00:21:37,200
so basically the attack framework is a

589
00:21:37,200 --> 00:21:39,520
globally accessible knowledge base

590
00:21:39,520 --> 00:21:41,679
of our different adversary tactics and

591
00:21:41,679 --> 00:21:44,080
techniques based on real-world scenarios

592
00:21:44,080 --> 00:21:47,280
right real-world observations uh it's

593
00:21:47,280 --> 00:21:49,840
used as a basis for development of

594
00:21:49,840 --> 00:21:52,400
specific threats uh for threat modeling

595
00:21:52,400 --> 00:21:54,559
and methodology in different sectors

596
00:21:54,559 --> 00:21:57,120
so sometimes people use the minor track

597
00:21:57,120 --> 00:21:58,000
framework for

598
00:21:58,000 --> 00:22:01,520
uh um kind of the defense part

599
00:22:01,520 --> 00:22:04,000
so they they understand okay who are my

600
00:22:04,000 --> 00:22:04,799
actors

601
00:22:04,799 --> 00:22:07,280
what techniques they're using uh this

602
00:22:07,280 --> 00:22:08,880
are are they targeting

603
00:22:08,880 --> 00:22:11,440
my own uh my industry sector like

604
00:22:11,440 --> 00:22:12,000
financial

605
00:22:12,000 --> 00:22:14,720
sector or or government what they're

606
00:22:14,720 --> 00:22:16,720
doing right so what are their common

607
00:22:16,720 --> 00:22:20,320
uh uh uh like mo right models operandi

608
00:22:20,320 --> 00:22:23,280
right uh so it's very important it's

609
00:22:23,280 --> 00:22:25,360
widely used in the community i really

610
00:22:25,360 --> 00:22:27,280
recommend anyone can

611
00:22:27,280 --> 00:22:29,280
can use it it's free and you can also

612
00:22:29,280 --> 00:22:31,120
contribute to it

613
00:22:31,120 --> 00:22:34,320
so what happened here is that the mitre

614
00:22:34,320 --> 00:22:34,960
published

615
00:22:34,960 --> 00:22:38,480
um a blog post

616
00:22:38,480 --> 00:22:41,520
last year december last year calling

617
00:22:41,520 --> 00:22:44,159
uh for help the it was kind of a blog

618
00:22:44,159 --> 00:22:45,120
post asking

619
00:22:45,120 --> 00:22:48,320
the community for help to create the

620
00:22:48,320 --> 00:22:48,880
mitre

621
00:22:48,880 --> 00:22:51,600
attack for containers right you have

622
00:22:51,600 --> 00:22:52,080
different

623
00:22:52,080 --> 00:22:53,919
attack frameworks you have the

624
00:22:53,919 --> 00:22:56,240
enterprise one you have the cloud one

625
00:22:56,240 --> 00:22:58,080
you have the linux and windows

626
00:22:58,080 --> 00:23:00,480
but we didn't have one for containers

627
00:23:00,480 --> 00:23:01,120
right

628
00:23:01,120 --> 00:23:03,840
and uh miter thought was appropriate to

629
00:23:03,840 --> 00:23:06,320
create one due to the number of attacks

630
00:23:06,320 --> 00:23:07,520
and incidents and

631
00:23:07,520 --> 00:23:10,640
and and like specific techniques for

632
00:23:10,640 --> 00:23:12,960
container environments right

633
00:23:12,960 --> 00:23:15,120
so that was there was really interesting

634
00:23:15,120 --> 00:23:16,240
we reached out to them

635
00:23:16,240 --> 00:23:18,559
since last year and we decided to

636
00:23:18,559 --> 00:23:20,799
collaborate because we work on on cloud

637
00:23:20,799 --> 00:23:22,799
and container security stuff

638
00:23:22,799 --> 00:23:26,240
on a daily basis we had a lot of uh data

639
00:23:26,240 --> 00:23:28,320
and information and blog posts that we

640
00:23:28,320 --> 00:23:29,280
could share

641
00:23:29,280 --> 00:23:32,480
to help with that work

642
00:23:33,280 --> 00:23:35,840
but besides before that before mighty

643
00:23:35,840 --> 00:23:36,799
posted that

644
00:23:36,799 --> 00:23:39,840
uh uh that that kind of

645
00:23:39,840 --> 00:23:43,600
article asking for help microsoft had

646
00:23:43,600 --> 00:23:45,200
released previously

647
00:23:45,200 --> 00:23:48,320
in april 20 uh in april last year

648
00:23:48,320 --> 00:23:50,799
uh threat matrix for kubernetes and and

649
00:23:50,799 --> 00:23:52,000
they also

650
00:23:52,000 --> 00:23:54,960
uh released an updated version uh this

651
00:23:54,960 --> 00:23:55,360
year

652
00:23:55,360 --> 00:23:57,279
so i recommend you to take a look it

653
00:23:57,279 --> 00:24:00,080
shows uh the most common attacks

654
00:24:00,080 --> 00:24:02,799
and techniques tactics and techniques

655
00:24:02,799 --> 00:24:05,919
used uh on kubernetes especially on the

656
00:24:05,919 --> 00:24:06,559
azure

657
00:24:06,559 --> 00:24:10,400
environment right so using a uh

658
00:24:10,400 --> 00:24:14,080
aks right which is the one for for azure

659
00:24:14,080 --> 00:24:16,880
i always mix them up uh and and they

660
00:24:16,880 --> 00:24:18,000
update that so it shows

661
00:24:18,000 --> 00:24:20,159
the techniques how they're used and

662
00:24:20,159 --> 00:24:22,720
which commands which tools they can use

663
00:24:22,720 --> 00:24:25,760
and all that stuff so uh miter also used

664
00:24:25,760 --> 00:24:26,480
that

665
00:24:26,480 --> 00:24:28,880
that that kind of threat maker matrix

666
00:24:28,880 --> 00:24:30,559
which is not an official

667
00:24:30,559 --> 00:24:33,840
miter matrix they use that as a baseline

668
00:24:33,840 --> 00:24:36,159
to create the the miter attack for

669
00:24:36,159 --> 00:24:36,880
containers

670
00:24:36,880 --> 00:24:40,880
right okay so here we have the official

671
00:24:40,880 --> 00:24:42,799
one the miter attack for containers and

672
00:24:42,799 --> 00:24:44,080
kubernetes as well

673
00:24:44,080 --> 00:24:46,240
and we have many different techniques

674
00:24:46,240 --> 00:24:47,200
and our

675
00:24:47,200 --> 00:24:49,679
uh our project there and collaboration

676
00:24:49,679 --> 00:24:50,559
with mitre

677
00:24:50,559 --> 00:24:54,480
helped create uh uh seven techniques

678
00:24:54,480 --> 00:24:56,640
which five of them were kind of

679
00:24:56,640 --> 00:24:58,080
improvements of of

680
00:24:58,080 --> 00:25:00,480
of techniques that already existed but

681
00:25:00,480 --> 00:25:02,880
didn't focus on on containers it didn't

682
00:25:02,880 --> 00:25:04,640
have a container perspective

683
00:25:04,640 --> 00:25:07,039
right and two brand new techniques right

684
00:25:07,039 --> 00:25:08,640
so brand new ones

685
00:25:08,640 --> 00:25:12,240
so this uh this official framework this

686
00:25:12,240 --> 00:25:14,960
official matrix was released in

687
00:25:14,960 --> 00:25:17,679
april 29th i don't know if you if you

688
00:25:17,679 --> 00:25:19,039
heard about that already

689
00:25:19,039 --> 00:25:21,279
and there's the the blog post on on the

690
00:25:21,279 --> 00:25:22,080
link below

691
00:25:22,080 --> 00:25:24,320
talking about this all the techniques

692
00:25:24,320 --> 00:25:26,320
and explaining that in detail which i'll

693
00:25:26,320 --> 00:25:26,559
go

694
00:25:26,559 --> 00:25:29,840
i won't go over here okay

695
00:25:29,840 --> 00:25:33,919
good now let's go to our attack scenario

696
00:25:33,919 --> 00:25:34,559
right so

697
00:25:34,559 --> 00:25:37,039
i created before before the miter

698
00:25:37,039 --> 00:25:38,240
framework before

699
00:25:38,240 --> 00:25:41,760
even i only knew about the first version

700
00:25:41,760 --> 00:25:43,679
of the kubernetes threat matrix by

701
00:25:43,679 --> 00:25:44,880
microsoft

702
00:25:44,880 --> 00:25:48,159
i decided to try to model my

703
00:25:48,159 --> 00:25:50,880
kubernetes environment right so

704
00:25:50,880 --> 00:25:53,200
basically what i did i created i created

705
00:25:53,200 --> 00:25:54,480
this diagram

706
00:25:54,480 --> 00:25:56,480
and i know it might be a bit hard to see

707
00:25:56,480 --> 00:25:58,159
but i'll try to read some of the stuff

708
00:25:58,159 --> 00:25:59,200
here to you

709
00:25:59,200 --> 00:26:03,039
uh based on um so we have like kind of a

710
00:26:03,039 --> 00:26:04,320
swim lanes here

711
00:26:04,320 --> 00:26:06,720
right and each swing lane from the top

712
00:26:06,720 --> 00:26:07,360
to bottom

713
00:26:07,360 --> 00:26:11,039
are our miter tactics right so you have

714
00:26:11,039 --> 00:26:13,120
initial access you have execution

715
00:26:13,120 --> 00:26:14,880
privilege escalation

716
00:26:14,880 --> 00:26:18,559
and and all that stuff and then

717
00:26:18,559 --> 00:26:22,080
each uh each kind of

718
00:26:22,080 --> 00:26:25,520
like bubble there is is kind of a step

719
00:26:25,520 --> 00:26:27,919
through the attack right and we're gonna

720
00:26:27,919 --> 00:26:29,760
run through that attack here in the next

721
00:26:29,760 --> 00:26:30,720
few slides

722
00:26:30,720 --> 00:26:32,720
so basically you have your kubernetes

723
00:26:32,720 --> 00:26:35,200
cluster which is misconfigured right

724
00:26:35,200 --> 00:26:38,320
it's outdated it has a bad um

725
00:26:38,320 --> 00:26:40,960
kind of bad permissions bad uh our back

726
00:26:40,960 --> 00:26:42,000
permissions

727
00:26:42,000 --> 00:26:44,960
and you have a exposed uh web

728
00:26:44,960 --> 00:26:45,840
application

729
00:26:45,840 --> 00:26:48,320
right and that web application has a

730
00:26:48,320 --> 00:26:50,320
vulnerability it's outdated as well it

731
00:26:50,320 --> 00:26:52,000
has a vulnerability uh

732
00:26:52,000 --> 00:26:54,240
remote command execution vulnerability

733
00:26:54,240 --> 00:26:55,200
right

734
00:26:55,200 --> 00:26:57,919
so if you're running if you if you have

735
00:26:57,919 --> 00:26:59,520
that scenario right you're running a web

736
00:26:59,520 --> 00:27:01,440
application that's that's vulnerable

737
00:27:01,440 --> 00:27:04,159
and it's running inside the cluster um

738
00:27:04,159 --> 00:27:05,360
what happens right

739
00:27:05,360 --> 00:27:07,200
what happens when someone compromises

740
00:27:07,200 --> 00:27:08,640
that application right

741
00:27:08,640 --> 00:27:10,960
so if if you if someone can get access

742
00:27:10,960 --> 00:27:13,039
to that application and can execute

743
00:27:13,039 --> 00:27:16,559
uh uh this this attack it will be able

744
00:27:16,559 --> 00:27:18,640
after executing the remote command

745
00:27:18,640 --> 00:27:20,080
execution will be able

746
00:27:20,080 --> 00:27:22,880
to probably get a shell inside the

747
00:27:22,880 --> 00:27:23,919
container

748
00:27:23,919 --> 00:27:26,000
that's running or the pod that's running

749
00:27:26,000 --> 00:27:28,320
your your web application right

750
00:27:28,320 --> 00:27:31,600
so that's when when uh on the execution

751
00:27:31,600 --> 00:27:32,880
phase here the second

752
00:27:32,880 --> 00:27:35,440
the second lane i have like i can do

753
00:27:35,440 --> 00:27:36,399
some recon

754
00:27:36,399 --> 00:27:38,480
right the attacker can check if if

755
00:27:38,480 --> 00:27:39,919
they're running on a containerized

756
00:27:39,919 --> 00:27:41,360
environment or not if

757
00:27:41,360 --> 00:27:43,120
if they're running in kubernetes so

758
00:27:43,120 --> 00:27:44,880
there are ways to do that right

759
00:27:44,880 --> 00:27:47,120
and and the the attack goes on and i'm

760
00:27:47,120 --> 00:27:48,960
gonna show in details on the next few

761
00:27:48,960 --> 00:27:49,840
slides here so

762
00:27:49,840 --> 00:27:51,840
i won't cover everything there but

763
00:27:51,840 --> 00:27:53,760
basically this is the the

764
00:27:53,760 --> 00:27:56,159
the diagram and the threat model that i

765
00:27:56,159 --> 00:27:57,440
did

766
00:27:57,440 --> 00:28:00,880
and then i went to the practical

767
00:28:00,880 --> 00:28:03,440
scenario to try to prove it right okay

768
00:28:03,440 --> 00:28:05,279
this this might work this is kind of

769
00:28:05,279 --> 00:28:05,760
like

770
00:28:05,760 --> 00:28:08,880
before the poc right and and then i did

771
00:28:08,880 --> 00:28:10,559
the poc to make sure that

772
00:28:10,559 --> 00:28:12,960
okay that that works right and and

773
00:28:12,960 --> 00:28:15,120
usually on kubernetes environments if

774
00:28:15,120 --> 00:28:18,000
you have that in your organization

775
00:28:18,000 --> 00:28:20,880
the add goal to most of the attackers so

776
00:28:20,880 --> 00:28:21,440
say like

777
00:28:21,440 --> 00:28:24,880
95 or 99 of the attackers on kubernetes

778
00:28:24,880 --> 00:28:25,919
environments

779
00:28:25,919 --> 00:28:29,039
it is to steal your resources

780
00:28:29,039 --> 00:28:30,799
right so it's the technique called

781
00:28:30,799 --> 00:28:32,720
resource right hijacking

782
00:28:32,720 --> 00:28:35,440
basically if they steal your resources

783
00:28:35,440 --> 00:28:37,760
to mine cryptocurrencies

784
00:28:37,760 --> 00:28:41,440
usually monero cryptocurrencies right so

785
00:28:41,440 --> 00:28:44,960
either they compromise your your running

786
00:28:44,960 --> 00:28:45,919
containers to

787
00:28:45,919 --> 00:28:48,559
to mine to to run their the process of

788
00:28:48,559 --> 00:28:49,919
crypto mining

789
00:28:49,919 --> 00:28:52,399
or they deploy new containers for

790
00:28:52,399 --> 00:28:53,039
running

791
00:28:53,039 --> 00:28:56,480
the crypto miner as well or even

792
00:28:56,480 --> 00:28:58,559
worse when they're they're able to do

793
00:28:58,559 --> 00:29:00,960
that they can break out of the container

794
00:29:00,960 --> 00:29:03,279
right and and sometimes even break out

795
00:29:03,279 --> 00:29:04,559
of your cluster

796
00:29:04,559 --> 00:29:07,919
uh and like deploy new instances if

797
00:29:07,919 --> 00:29:09,279
you're running on a cloud environment

798
00:29:09,279 --> 00:29:11,200
they can deploy new instances

799
00:29:11,200 --> 00:29:14,080
to that then uh use those instances to

800
00:29:14,080 --> 00:29:16,000
mining cryptocurrencies

801
00:29:16,000 --> 00:29:19,440
so in in this attack here the first poc

802
00:29:19,440 --> 00:29:21,200
that i did

803
00:29:21,200 --> 00:29:24,320
with the first kind of exposed

804
00:29:24,320 --> 00:29:27,760
web application it took less than 24

805
00:29:27,760 --> 00:29:28,720
hours

806
00:29:28,720 --> 00:29:32,080
for the attackers to i didn't i didn't i

807
00:29:32,080 --> 00:29:34,399
i created the cluster i exposed the

808
00:29:34,399 --> 00:29:36,240
application to the internet right

809
00:29:36,240 --> 00:29:37,679
through a load balancer

810
00:29:37,679 --> 00:29:39,520
but i didn't post the link anywhere i

811
00:29:39,520 --> 00:29:41,679
didn't publicize it right

812
00:29:41,679 --> 00:29:44,320
but in less than 24 hours the attackers

813
00:29:44,320 --> 00:29:46,240
were able to find the url of my

814
00:29:46,240 --> 00:29:47,520
application

815
00:29:47,520 --> 00:29:50,480
compromise that up application break out

816
00:29:50,480 --> 00:29:51,760
of the cluster

817
00:29:51,760 --> 00:29:55,600
and and then deploy huge instances

818
00:29:55,600 --> 00:29:58,159
to mining cryptocurrencies right luckily

819
00:29:58,159 --> 00:29:59,600
the whole environment was being

820
00:29:59,600 --> 00:30:02,320
monitored and we detect that

821
00:30:02,320 --> 00:30:05,039
and so we were able to shut down the

822
00:30:05,039 --> 00:30:07,200
attack right away and stop that from

823
00:30:07,200 --> 00:30:08,240
like having

824
00:30:08,240 --> 00:30:11,840
a huge aws build right so so that's what

825
00:30:11,840 --> 00:30:13,440
we did here

826
00:30:13,440 --> 00:30:15,600
okay so here's my web application like

827
00:30:15,600 --> 00:30:17,200
okay starting the attack

828
00:30:17,200 --> 00:30:20,240
i have basically this is a drupal

829
00:30:20,240 --> 00:30:23,120
web application drupal cms which is

830
00:30:23,120 --> 00:30:23,760
running

831
00:30:23,760 --> 00:30:27,440
the drupal version 8.5 which is

832
00:30:27,440 --> 00:30:30,320
from 2018 and it has a remote command

833
00:30:30,320 --> 00:30:33,440
execution vulnerability right

834
00:30:33,440 --> 00:30:36,799
so what happens next right so yeah it's

835
00:30:36,799 --> 00:30:38,559
exposed to the internet someone might

836
00:30:38,559 --> 00:30:39,840
find it somehow

837
00:30:39,840 --> 00:30:41,440
right so in this scenario we're

838
00:30:41,440 --> 00:30:43,120
exploiting the the

839
00:30:43,120 --> 00:30:46,960
rce in in the cv 2018

840
00:30:46,960 --> 00:30:49,520
seven six zero zero called drupal gaddon

841
00:30:49,520 --> 00:30:50,880
vulnerability right

842
00:30:50,880 --> 00:30:53,679
and i use this uh this exploits from

843
00:30:53,679 --> 00:30:54,880
github

844
00:30:54,880 --> 00:30:57,200
right to to be able to get the shell

845
00:30:57,200 --> 00:30:58,159
access to

846
00:30:58,159 --> 00:31:00,559
to the application right there are all

847
00:31:00,559 --> 00:31:02,480
the ways that you can expect you can

848
00:31:02,480 --> 00:31:03,039
attack

849
00:31:03,039 --> 00:31:06,320
a kubernetes cluster as well

850
00:31:06,320 --> 00:31:09,039
one of those are through exposed

851
00:31:09,039 --> 00:31:09,919
dashboard

852
00:31:09,919 --> 00:31:12,320
so kubernetes used to have a dashboard

853
00:31:12,320 --> 00:31:14,720
that was installed by default and set up

854
00:31:14,720 --> 00:31:16,399
by default that didn't have proper

855
00:31:16,399 --> 00:31:17,679
authentication

856
00:31:17,679 --> 00:31:20,080
now that's disabled you need to enable

857
00:31:20,080 --> 00:31:21,600
the dashboard on your own

858
00:31:21,600 --> 00:31:24,320
on the on the newest versions right and

859
00:31:24,320 --> 00:31:26,000
you can also exploit that through the

860
00:31:26,000 --> 00:31:28,240
cube api server right so

861
00:31:28,240 --> 00:31:31,440
if your api server which as i said it's

862
00:31:31,440 --> 00:31:33,120
basically an api server it's a

863
00:31:33,120 --> 00:31:35,919
it's a web application there right uh uh

864
00:31:35,919 --> 00:31:37,840
if that exposed to the internet and

865
00:31:37,840 --> 00:31:39,840
it's not properly secure and properly

866
00:31:39,840 --> 00:31:41,279
configured right

867
00:31:41,279 --> 00:31:44,000
then the attacker might be able to to

868
00:31:44,000 --> 00:31:44,399
even

869
00:31:44,399 --> 00:31:46,720
like deploy pods and and change

870
00:31:46,720 --> 00:31:48,559
information and read secrets and all

871
00:31:48,559 --> 00:31:50,320
that stuff

872
00:31:50,320 --> 00:31:52,480
so one thing to note here is that the

873
00:31:52,480 --> 00:31:54,640
cube api server endpoint

874
00:31:54,640 --> 00:31:57,679
uh is public by default on

875
00:31:57,679 --> 00:32:00,720
eks right so if you're using the

876
00:32:00,720 --> 00:32:04,000
aws managed services for kubernetes

877
00:32:04,000 --> 00:32:07,279
by default your your api server is

878
00:32:07,279 --> 00:32:08,320
exposed so

879
00:32:08,320 --> 00:32:10,240
if you do that you better check it out

880
00:32:10,240 --> 00:32:11,840
and make sure that everything else is

881
00:32:11,840 --> 00:32:12,799
configured

882
00:32:12,799 --> 00:32:15,120
so that you're not running any into any

883
00:32:15,120 --> 00:32:17,679
kind of trouble there

884
00:32:17,679 --> 00:32:20,080
so yeah how do i check that right how do

885
00:32:20,080 --> 00:32:20,880
i know that's

886
00:32:20,880 --> 00:32:23,760
that indeed this specific url or this

887
00:32:23,760 --> 00:32:24,960
specific ip

888
00:32:24,960 --> 00:32:28,240
is running a kubernetes cluster right so

889
00:32:28,240 --> 00:32:29,679
one of the things that you can do is

890
00:32:29,679 --> 00:32:32,240
reach the api endpoint externally right

891
00:32:32,240 --> 00:32:34,799
so by default on kubernetes the api

892
00:32:34,799 --> 00:32:36,279
server runs on port

893
00:32:36,279 --> 00:32:39,519
6443 or on managed services

894
00:32:39,519 --> 00:32:42,240
is usually just port 443 which is the

895
00:32:42,240 --> 00:32:43,760
hps one right

896
00:32:43,760 --> 00:32:46,480
so basically using a curve request right

897
00:32:46,480 --> 00:32:46,960
you can

898
00:32:46,960 --> 00:32:49,039
just check and see if that's there's

899
00:32:49,039 --> 00:32:50,799
something running there and if it

900
00:32:50,799 --> 00:32:53,120
if it's that that one of those ports

901
00:32:53,120 --> 00:32:55,200
there's likely the situation that there

902
00:32:55,200 --> 00:32:57,279
is a kubernetes cluster running there

903
00:32:57,279 --> 00:32:59,919
right uh also another thing that you can

904
00:32:59,919 --> 00:33:00,799
see right away

905
00:33:00,799 --> 00:33:03,840
on the second a second url is that

906
00:33:03,840 --> 00:33:07,039
on the url itself it shows that it's uh

907
00:33:07,039 --> 00:33:07,519
it's

908
00:33:07,519 --> 00:33:10,480
amazon and it's running eks which is the

909
00:33:10,480 --> 00:33:11,200
manage

910
00:33:11,200 --> 00:33:13,919
solution for kubernetes on aws right so

911
00:33:13,919 --> 00:33:14,799
you already know

912
00:33:14,799 --> 00:33:16,799
okay there is a kubernetes cluster here

913
00:33:16,799 --> 00:33:18,799
right

914
00:33:18,799 --> 00:33:21,039
okay so what can you do right you

915
00:33:21,039 --> 00:33:22,960
understand you did some reconnaissance

916
00:33:22,960 --> 00:33:24,000
you understand there's

917
00:33:24,000 --> 00:33:25,679
a cluster there's a web application

918
00:33:25,679 --> 00:33:27,519
running there as i said you can either

919
00:33:27,519 --> 00:33:28,720
slide that

920
00:33:28,720 --> 00:33:31,279
through expose a dashboard right if you

921
00:33:31,279 --> 00:33:32,559
have if you found it

922
00:33:32,559 --> 00:33:35,679
right or uh one of the most common ones

923
00:33:35,679 --> 00:33:37,679
is it's through the web application

924
00:33:37,679 --> 00:33:38,720
right so

925
00:33:38,720 --> 00:33:40,640
if the web application is vulnerable

926
00:33:40,640 --> 00:33:42,559
right your whole structure

927
00:33:42,559 --> 00:33:45,279
might be safe might be secure but your

928
00:33:45,279 --> 00:33:46,000
your

929
00:33:46,000 --> 00:33:48,799
your your web application is outdated or

930
00:33:48,799 --> 00:33:50,480
has a vulnerability was

931
00:33:50,480 --> 00:33:53,760
wasn't coded properly then then that can

932
00:33:53,760 --> 00:33:55,600
also compromise your your kubernetes

933
00:33:55,600 --> 00:33:57,919
environment

934
00:33:57,919 --> 00:34:00,080
uh one of the tools that you can use to

935
00:34:00,080 --> 00:34:01,039
automate

936
00:34:01,039 --> 00:34:03,440
this kind of reconnaissance and attack

937
00:34:03,440 --> 00:34:04,720
and and understanding the

938
00:34:04,720 --> 00:34:05,760
vulnerabilities

939
00:34:05,760 --> 00:34:08,399
on kubernetes cluster is cube hunter

940
00:34:08,399 --> 00:34:08,800
right

941
00:34:08,800 --> 00:34:11,199
qp hunter is developed by aqua and it's

942
00:34:11,199 --> 00:34:12,639
an open source tool

943
00:34:12,639 --> 00:34:15,119
that hunts for like security weaknesses

944
00:34:15,119 --> 00:34:17,199
in kubernetes clusters right

945
00:34:17,199 --> 00:34:18,560
it was developed to increase the

946
00:34:18,560 --> 00:34:20,719
awareness and visibility for security

947
00:34:20,719 --> 00:34:21,199
issues

948
00:34:21,199 --> 00:34:24,800
right and it also already has like 37

949
00:34:24,800 --> 00:34:27,280
uh vulnerabilities checks so the text at

950
00:34:27,280 --> 00:34:29,359
least 37 vulnerabilities

951
00:34:29,359 --> 00:34:32,399
and and you can add as open source right

952
00:34:32,399 --> 00:34:34,159
you can submit new uh

953
00:34:34,159 --> 00:34:36,639
new checks for new vulnerabilities if i

954
00:34:36,639 --> 00:34:38,480
recall correctly it's developed in

955
00:34:38,480 --> 00:34:40,320
python

956
00:34:40,320 --> 00:34:44,079
yeah um so one of the things okay let's

957
00:34:44,079 --> 00:34:45,918
say i'm inside the cluster

958
00:34:45,918 --> 00:34:48,159
right i'm inside the the pod the

959
00:34:48,159 --> 00:34:49,040
vulnerable

960
00:34:49,040 --> 00:34:52,079
uh web application pod which i just just

961
00:34:52,079 --> 00:34:52,719
got an

962
00:34:52,719 --> 00:34:55,839
rc on right how do i know how do i know

963
00:34:55,839 --> 00:34:57,839
i mean in a kubernetes environment right

964
00:34:57,839 --> 00:35:00,880
if i if i'm still not sure right one of

965
00:35:00,880 --> 00:35:02,160
the things that i can check

966
00:35:02,160 --> 00:35:04,560
is the environment variables right so

967
00:35:04,560 --> 00:35:06,000
using this command here

968
00:35:06,000 --> 00:35:07,680
it's it's really simple to get the

969
00:35:07,680 --> 00:35:09,599
kubernetes environment variables and

970
00:35:09,599 --> 00:35:11,920
all the pods from the kubernetes cluster

971
00:35:11,920 --> 00:35:13,119
will probably have

972
00:35:13,119 --> 00:35:15,599
those environment variables so that will

973
00:35:15,599 --> 00:35:17,200
already tell you that you are in a

974
00:35:17,200 --> 00:35:19,760
kubernetes cluster

975
00:35:19,760 --> 00:35:22,800
another thing to take a look is uh uh

976
00:35:22,800 --> 00:35:24,400
the service account token

977
00:35:24,400 --> 00:35:28,000
so also every pod will have the service

978
00:35:28,000 --> 00:35:29,200
account token

979
00:35:29,200 --> 00:35:32,079
inside that directory there the var run

980
00:35:32,079 --> 00:35:33,440
secrets kubernetes

981
00:35:33,440 --> 00:35:36,079
service account right so if if there

982
00:35:36,079 --> 00:35:36,880
it's there

983
00:35:36,880 --> 00:35:38,320
right and you can use that to

984
00:35:38,320 --> 00:35:42,839
impersonate your pod and talk to the api

985
00:35:42,839 --> 00:35:45,359
server

986
00:35:45,359 --> 00:35:48,400
there is also a tool from github called

987
00:35:48,400 --> 00:35:51,280
mi contained which is called a container

988
00:35:51,280 --> 00:35:52,880
introspection tool right

989
00:35:52,880 --> 00:35:55,200
if it's not just for kubernetes it works

990
00:35:55,200 --> 00:35:56,560
for docker as well

991
00:35:56,560 --> 00:35:58,960
and it helps you find out what container

992
00:35:58,960 --> 00:36:00,400
runtime is being used

993
00:36:00,400 --> 00:36:02,720
as as well as other features available

994
00:36:02,720 --> 00:36:04,880
like what capabilities what

995
00:36:04,880 --> 00:36:07,599
if app armor is enabled if i think if fc

996
00:36:07,599 --> 00:36:08,800
linux is enabled

997
00:36:08,800 --> 00:36:10,800
so it checks all that right so it's

998
00:36:10,800 --> 00:36:12,000
easier for you to

999
00:36:12,000 --> 00:36:15,200
understand okay how how secure how

1000
00:36:15,200 --> 00:36:16,160
insecure

1001
00:36:16,160 --> 00:36:19,118
is this environment

1002
00:36:19,839 --> 00:36:22,320
and and okay like i got a i got a shell

1003
00:36:22,320 --> 00:36:22,960
inside

1004
00:36:22,960 --> 00:36:26,240
a pond right but what can i do now

1005
00:36:26,240 --> 00:36:28,000
right and everything it's going to

1006
00:36:28,000 --> 00:36:29,520
depend on

1007
00:36:29,520 --> 00:36:32,400
which kind of access and information and

1008
00:36:32,400 --> 00:36:33,839
permissions you have

1009
00:36:33,839 --> 00:36:35,839
from that pod and from that service

1010
00:36:35,839 --> 00:36:37,520
account that you get from that product

1011
00:36:37,520 --> 00:36:38,560
right

1012
00:36:38,560 --> 00:36:41,599
so in in this scenario here we had a

1013
00:36:41,599 --> 00:36:43,920
misconfigured cluster as i said

1014
00:36:43,920 --> 00:36:47,359
and and the pod was running

1015
00:36:47,359 --> 00:36:49,839
with with too much permissions right we

1016
00:36:49,839 --> 00:36:50,560
was running

1017
00:36:50,560 --> 00:36:52,160
the service account that was running the

1018
00:36:52,160 --> 00:36:54,560
pod had too much permissions and and

1019
00:36:54,560 --> 00:36:57,280
was okay you could you're able to use

1020
00:36:57,280 --> 00:36:59,040
that service account to deploy

1021
00:36:59,040 --> 00:37:02,240
new pods right and so one of the ways to

1022
00:37:02,240 --> 00:37:03,599
break out of of

1023
00:37:03,599 --> 00:37:06,480
your your pod in your container here is

1024
00:37:06,480 --> 00:37:06,960
in

1025
00:37:06,960 --> 00:37:09,920
and and kind of like escalate privileges

1026
00:37:09,920 --> 00:37:10,640
right

1027
00:37:10,640 --> 00:37:12,720
is doing the container escape and

1028
00:37:12,720 --> 00:37:14,960
deploying a privilege pod

1029
00:37:14,960 --> 00:37:18,240
in your cluster as well which maps to

1030
00:37:18,240 --> 00:37:18,640
your

1031
00:37:18,640 --> 00:37:21,440
your your like the host of your worker

1032
00:37:21,440 --> 00:37:22,720
know right

1033
00:37:22,720 --> 00:37:26,640
so in this scenario i use basically

1034
00:37:26,640 --> 00:37:29,760
these uh this command from duffy cooley

1035
00:37:29,760 --> 00:37:30,640
which is now

1036
00:37:30,640 --> 00:37:33,680
uh working at easel valent right uh

1037
00:37:33,680 --> 00:37:36,079
working with ebpf and all that stuff and

1038
00:37:36,079 --> 00:37:38,720
he posted that in 2019 and still works

1039
00:37:38,720 --> 00:37:39,839
today

1040
00:37:39,839 --> 00:37:42,320
on on most of the environments that are

1041
00:37:42,320 --> 00:37:44,800
not protected and don't have any kind of

1042
00:37:44,800 --> 00:37:48,400
pod security policy enabled so

1043
00:37:48,400 --> 00:37:51,280
so here right the cube ctrl run like

1044
00:37:51,280 --> 00:37:51,839
okay

1045
00:37:51,839 --> 00:37:54,720
i downloaded cube ctrl to my pod and

1046
00:37:54,720 --> 00:37:56,720
then i ran this command right

1047
00:37:56,720 --> 00:37:59,599
so the cube ctrl run gets a pod with a

1048
00:37:59,599 --> 00:38:00,400
container

1049
00:38:00,400 --> 00:38:04,240
right but the overrides arguments like

1050
00:38:04,240 --> 00:38:05,040
make it

1051
00:38:05,040 --> 00:38:07,280
different right and so on the right side

1052
00:38:07,280 --> 00:38:09,359
of the slide here i basically have

1053
00:38:09,359 --> 00:38:11,520
the same command that he has on on his

1054
00:38:11,520 --> 00:38:12,400
tweet

1055
00:38:12,400 --> 00:38:15,599
but broke it down in a easier easier

1056
00:38:15,599 --> 00:38:17,200
format for us to see

1057
00:38:17,200 --> 00:38:20,480
right so

1058
00:38:20,480 --> 00:38:22,880
this overloads the spec with a partial

1059
00:38:22,880 --> 00:38:25,680
set off of values parts from this json

1060
00:38:25,680 --> 00:38:27,760
right you can see that this is a json

1061
00:38:27,760 --> 00:38:31,599
file here so we see that the host pid

1062
00:38:31,599 --> 00:38:34,640
uh equals true here on the top

1063
00:38:34,640 --> 00:38:38,160
right and this this breaks the most

1064
00:38:38,160 --> 00:38:40,160
fundamental isolation of containers

1065
00:38:40,160 --> 00:38:43,040
right letting us see all the processes

1066
00:38:43,040 --> 00:38:43,359
as

1067
00:38:43,359 --> 00:38:46,480
as if we were on the host right and and

1068
00:38:46,480 --> 00:38:46,960
then

1069
00:38:46,960 --> 00:38:50,240
i start i i i just back here i start

1070
00:38:50,240 --> 00:38:52,960
running a container right so you use the

1071
00:38:52,960 --> 00:38:55,760
inside this container i'm using alpine

1072
00:38:55,760 --> 00:38:57,599
right which is a very common

1073
00:38:57,599 --> 00:39:00,640
a very small linux container but that

1074
00:39:00,640 --> 00:39:01,280
oops

1075
00:39:01,280 --> 00:39:04,720
sorry um my bad uh so

1076
00:39:04,720 --> 00:39:08,480
here on this uh i'm using i'm executing

1077
00:39:08,480 --> 00:39:10,160
this command right and center

1078
00:39:10,160 --> 00:39:12,240
right and this command is to switch to a

1079
00:39:12,240 --> 00:39:13,680
different namespace

1080
00:39:13,680 --> 00:39:17,520
right and uh and basically so

1081
00:39:17,520 --> 00:39:20,400
this this i'm not i think i just have a

1082
00:39:20,400 --> 00:39:21,599
little bit of time and i want to talk

1083
00:39:21,599 --> 00:39:23,920
about the defenses but basically

1084
00:39:23,920 --> 00:39:28,640
here it's uh i'm able to deploy this

1085
00:39:28,640 --> 00:39:30,640
container now i have access

1086
00:39:30,640 --> 00:39:33,520
to my my worker node whatever worker

1087
00:39:33,520 --> 00:39:35,599
node that the pod is running

1088
00:39:35,599 --> 00:39:38,400
in right so i kind of broke out of the

1089
00:39:38,400 --> 00:39:41,040
cluster already and and then i can be

1090
00:39:41,040 --> 00:39:44,640
probably compromise the um

1091
00:39:44,640 --> 00:39:48,000
the control plane right and also maybe

1092
00:39:48,000 --> 00:39:50,720
uh uh even even before that even before

1093
00:39:50,720 --> 00:39:51,040
that

1094
00:39:51,040 --> 00:39:53,760
inside the pod itself right it's

1095
00:39:53,760 --> 00:39:55,119
possible to

1096
00:39:55,119 --> 00:39:58,320
make requests to the the instance

1097
00:39:58,320 --> 00:39:59,280
metadata

1098
00:39:59,280 --> 00:40:01,680
api right if you heard about that the

1099
00:40:01,680 --> 00:40:03,839
cloud instance method data where you can

1100
00:40:03,839 --> 00:40:04,480
get

1101
00:40:04,480 --> 00:40:06,880
sensitive information and sometimes even

1102
00:40:06,880 --> 00:40:08,960
like access keys and private

1103
00:40:08,960 --> 00:40:12,480
and and api keys from aws google

1104
00:40:12,480 --> 00:40:14,480
or azure right you can get that

1105
00:40:14,480 --> 00:40:16,800
information from the pod already just

1106
00:40:16,800 --> 00:40:19,200
making a current request to that to that

1107
00:40:19,200 --> 00:40:23,040
proper ip or url right

1108
00:40:23,119 --> 00:40:26,720
um so here like the the

1109
00:40:26,720 --> 00:40:29,359
this this privilege security context

1110
00:40:29,359 --> 00:40:30,079
right

1111
00:40:30,079 --> 00:40:31,920
it's very important right so you need to

1112
00:40:31,920 --> 00:40:34,400
understand that you shouldn't allow

1113
00:40:34,400 --> 00:40:38,640
any any kind of uh service accounts or

1114
00:40:38,640 --> 00:40:42,240
pods or or anyone to be able to deploy a

1115
00:40:42,240 --> 00:40:42,800
pod

1116
00:40:42,800 --> 00:40:44,400
in your cluster right so you need to

1117
00:40:44,400 --> 00:40:46,640
talk about that

1118
00:40:46,640 --> 00:40:48,720
so here we're gonna focus now on the

1119
00:40:48,720 --> 00:40:50,880
defense part okay how can i protect my

1120
00:40:50,880 --> 00:40:52,319
cluster from attackers

1121
00:40:52,319 --> 00:40:54,319
right isn't kubernetes secured by

1122
00:40:54,319 --> 00:40:56,480
default and where do i start i know i

1123
00:40:56,480 --> 00:40:58,160
only have a kind of

1124
00:40:58,160 --> 00:41:01,760
a few minutes but bear with me here

1125
00:41:01,760 --> 00:41:05,200
uh okay so

1126
00:41:05,200 --> 00:41:06,720
basically one of the things as i

1127
00:41:06,720 --> 00:41:08,560
mentioned right that you need to worry

1128
00:41:08,560 --> 00:41:08,880
about

1129
00:41:08,880 --> 00:41:11,359
is your cube api server right if your qb

1130
00:41:11,359 --> 00:41:12,960
api server is exposed

1131
00:41:12,960 --> 00:41:14,960
someone can make it just a simple code

1132
00:41:14,960 --> 00:41:17,440
request to it on the proper location the

1133
00:41:17,440 --> 00:41:19,359
proper ip and proper port

1134
00:41:19,359 --> 00:41:20,960
and it might get an information like

1135
00:41:20,960 --> 00:41:23,839
that even if it's like a photo free

1136
00:41:23,839 --> 00:41:26,640
right forbidden right i know that from

1137
00:41:26,640 --> 00:41:28,880
from the format of this response i

1138
00:41:28,880 --> 00:41:30,560
already know that there is a

1139
00:41:30,560 --> 00:41:33,040
um there's a kubernetes cluster running

1140
00:41:33,040 --> 00:41:34,000
there right

1141
00:41:34,000 --> 00:41:36,000
so make sure that if you don't need to

1142
00:41:36,000 --> 00:41:37,839
expose your api server

1143
00:41:37,839 --> 00:41:40,720
don't do it right if it's if you're

1144
00:41:40,720 --> 00:41:41,280
having

1145
00:41:41,280 --> 00:41:43,839
any issues or your applications are not

1146
00:41:43,839 --> 00:41:44,960
working

1147
00:41:44,960 --> 00:41:48,240
um make sure that your kubernetes is is

1148
00:41:48,240 --> 00:41:51,200
internally only internally accessed or

1149
00:41:51,200 --> 00:41:53,599
through a vpn or something like that

1150
00:41:53,599 --> 00:41:57,599
because attackers are are kind of

1151
00:41:57,599 --> 00:41:59,680
uh scanning the internet right you will

1152
00:41:59,680 --> 00:42:02,240
have multiple tools like showdown

1153
00:42:02,240 --> 00:42:05,200
senses and binary edge and also the

1154
00:42:05,200 --> 00:42:07,040
attackers are doing their own tools

1155
00:42:07,040 --> 00:42:08,800
they're using their own scanners

1156
00:42:08,800 --> 00:42:10,240
and they're looking for that they're

1157
00:42:10,240 --> 00:42:13,359
looking for exposed kubernetes

1158
00:42:13,359 --> 00:42:15,359
clusters on the internet right and

1159
00:42:15,359 --> 00:42:18,880
especially the api server

1160
00:42:18,880 --> 00:42:20,480
another thing that you need to worry

1161
00:42:20,480 --> 00:42:22,319
about and and i think it's important if

1162
00:42:22,319 --> 00:42:24,240
you're starting with kubernetes and you

1163
00:42:24,240 --> 00:42:25,839
want to follow the best practice the

1164
00:42:25,839 --> 00:42:27,200
security best practice

1165
00:42:27,200 --> 00:42:29,760
is taking a look at the cis benchmark so

1166
00:42:29,760 --> 00:42:32,079
there is a cis benchmark for kubernetes

1167
00:42:32,079 --> 00:42:32,880
already

1168
00:42:32,880 --> 00:42:36,400
and it's like a prescript prescriptive

1169
00:42:36,400 --> 00:42:38,560
guidance for establishing secure

1170
00:42:38,560 --> 00:42:40,160
configuration posture for your

1171
00:42:40,160 --> 00:42:41,760
kubernetes cluster right

1172
00:42:41,760 --> 00:42:45,200
it has over 120 checks for your cluster

1173
00:42:45,200 --> 00:42:47,520
right so you can check if your cluster

1174
00:42:47,520 --> 00:42:48,800
is secure

1175
00:42:48,800 --> 00:42:51,760
and you can uh it's it's it's a big

1176
00:42:51,760 --> 00:42:54,079
document right it's a big a large pdf

1177
00:42:54,079 --> 00:42:55,920
document and i know it might be

1178
00:42:55,920 --> 00:42:59,200
kind of boring to take a look but

1179
00:42:59,200 --> 00:43:01,040
it's very detailed right it's very

1180
00:43:01,040 --> 00:43:02,720
detailed in a way that

1181
00:43:02,720 --> 00:43:05,119
it it tells you okay you need to have

1182
00:43:05,119 --> 00:43:07,440
that security setting on your cluster

1183
00:43:07,440 --> 00:43:09,760
right and then it tells you okay how to

1184
00:43:09,760 --> 00:43:11,599
check if that security setting

1185
00:43:11,599 --> 00:43:14,400
is enabled or not right which result you

1186
00:43:14,400 --> 00:43:15,599
should expect

1187
00:43:15,599 --> 00:43:18,480
and at the end if that's not enabled it

1188
00:43:18,480 --> 00:43:20,400
tells you the proper command and the

1189
00:43:20,400 --> 00:43:22,800
proper configuration that you need to do

1190
00:43:22,800 --> 00:43:24,880
to have that setting enabled on your

1191
00:43:24,880 --> 00:43:26,800
cluster right so that's very interesting

1192
00:43:26,800 --> 00:43:27,920
it's very detailed

1193
00:43:27,920 --> 00:43:30,160
and it was also created by rory mccoon

1194
00:43:30,160 --> 00:43:31,200
and liz rice

1195
00:43:31,200 --> 00:43:33,839
and among and many other contributors so

1196
00:43:33,839 --> 00:43:34,400
those

1197
00:43:34,400 --> 00:43:37,520
are our security professionals and and

1198
00:43:37,520 --> 00:43:40,000
and cloud native in kubernetes security

1199
00:43:40,000 --> 00:43:41,680
that have a lot of knowledge and

1200
00:43:41,680 --> 00:43:43,520
experience in that world so

1201
00:43:43,520 --> 00:43:45,280
so that's really recommended to take a

1202
00:43:45,280 --> 00:43:47,440
look and there's also specific

1203
00:43:47,440 --> 00:43:51,440
uh benchmarks for eks and gke and i

1204
00:43:51,440 --> 00:43:52,079
think

1205
00:43:52,079 --> 00:43:54,480
also aks should be coming soon if not

1206
00:43:54,480 --> 00:43:55,359
already

1207
00:43:55,359 --> 00:43:57,359
so yeah if you're using the managed

1208
00:43:57,359 --> 00:43:59,119
services from the cloud providers you

1209
00:43:59,119 --> 00:44:02,079
can also use that

1210
00:44:02,560 --> 00:44:05,760
uh yeah someone mentioned mass con on on

1211
00:44:05,760 --> 00:44:06,400
the

1212
00:44:06,400 --> 00:44:10,240
on the youtube chat yes mass scan

1213
00:44:10,240 --> 00:44:12,000
is one of the tools that their attackers

1214
00:44:12,000 --> 00:44:14,800
are using for scanning the internet for

1215
00:44:14,800 --> 00:44:17,040
kubernetes clusters and i have a

1216
00:44:17,040 --> 00:44:19,599
uh i released a blog post i think last

1217
00:44:19,599 --> 00:44:20,319
month

1218
00:44:20,319 --> 00:44:23,440
where they had compromised a a specific

1219
00:44:23,440 --> 00:44:26,720
actor had compromised over 50 000

1220
00:44:26,720 --> 00:44:30,160
ips and environments of kubernetes

1221
00:44:30,160 --> 00:44:32,079
clusters right so

1222
00:44:32,079 --> 00:44:35,520
uh and and how they're doing uh um

1223
00:44:35,520 --> 00:44:37,599
it's basically they compromise your

1224
00:44:37,599 --> 00:44:38,560
environment

1225
00:44:38,560 --> 00:44:40,319
and once they're internal on your

1226
00:44:40,319 --> 00:44:42,400
internal network either either on the

1227
00:44:42,400 --> 00:44:43,359
cloud or

1228
00:44:43,359 --> 00:44:45,920
on premises that's when they scan your

1229
00:44:45,920 --> 00:44:47,280
kubernetes

1230
00:44:47,280 --> 00:44:49,359
your environment for kubernetes clusters

1231
00:44:49,359 --> 00:44:50,720
right so

1232
00:44:50,720 --> 00:44:52,480
it's like okay yeah you're not exposing

1233
00:44:52,480 --> 00:44:54,960
the api server anymore and you're safe

1234
00:44:54,960 --> 00:44:57,440
no you're not safe if you only do that

1235
00:44:57,440 --> 00:44:58,720
right so they're using

1236
00:44:58,720 --> 00:45:00,960
a a kind of old technique that's a

1237
00:45:00,960 --> 00:45:03,200
kubelet kubler exploit

1238
00:45:03,200 --> 00:45:05,440
but still it still works right it's

1239
00:45:05,440 --> 00:45:06,240
still

1240
00:45:06,240 --> 00:45:07,760
it still works and it still works for

1241
00:45:07,760 --> 00:45:10,079
them and they were able to compromise

1242
00:45:10,079 --> 00:45:13,599
a lot of clusters like that okay so yeah

1243
00:45:13,599 --> 00:45:14,800
moving on

1244
00:45:14,800 --> 00:45:17,680
uh before before we we finish here and

1245
00:45:17,680 --> 00:45:19,440
then i can talk about other topics on

1246
00:45:19,440 --> 00:45:20,400
discord

1247
00:45:20,400 --> 00:45:22,960
you also have cube bench so keep bench

1248
00:45:22,960 --> 00:45:25,200
is another open source tool from aqua as

1249
00:45:25,200 --> 00:45:25,920
well

1250
00:45:25,920 --> 00:45:28,720
and instead of right reading through the

1251
00:45:28,720 --> 00:45:30,960
the documentation of the cis benchmark

1252
00:45:30,960 --> 00:45:32,000
if you don't have time

1253
00:45:32,000 --> 00:45:34,160
or you don't want to read that you can

1254
00:45:34,160 --> 00:45:36,560
just run q bench against your cluster

1255
00:45:36,560 --> 00:45:37,760
and it's going to check if your

1256
00:45:37,760 --> 00:45:40,319
kubernetes is deployed following the

1257
00:45:40,319 --> 00:45:43,119
the cis best practices right it

1258
00:45:43,119 --> 00:45:43,920
validates

1259
00:45:43,920 --> 00:45:46,240
your cluster against the cis kubernetes

1260
00:45:46,240 --> 00:45:47,200
benchmark

1261
00:45:47,200 --> 00:45:49,920
and it's developing go go lane right so

1262
00:45:49,920 --> 00:45:51,280
that's really interesting

1263
00:45:51,280 --> 00:45:54,480
uh um here's just uh uh actually a

1264
00:45:54,480 --> 00:45:56,960
screenshot of the results of running

1265
00:45:56,960 --> 00:45:59,200
that cube bench on my own cluster from

1266
00:45:59,200 --> 00:46:00,880
from this example here so

1267
00:46:00,880 --> 00:46:03,200
it was a vulnerable cluster and it had a

1268
00:46:03,200 --> 00:46:04,079
lot of

1269
00:46:04,079 --> 00:46:06,640
bad configurations right so we can see

1270
00:46:06,640 --> 00:46:07,520
from here that

1271
00:46:07,520 --> 00:46:09,760
it showed a lot of of the kubernetes

1272
00:46:09,760 --> 00:46:12,640
benchmark checks

1273
00:46:12,800 --> 00:46:15,040
okay what else can you do on on to

1274
00:46:15,040 --> 00:46:17,119
protect your your kubernetes environment

1275
00:46:17,119 --> 00:46:17,599
in

1276
00:46:17,599 --> 00:46:20,240
in your containers right so one of the

1277
00:46:20,240 --> 00:46:21,760
main things that i think it's really

1278
00:46:21,760 --> 00:46:24,000
important is understanding that

1279
00:46:24,000 --> 00:46:27,119
it's it always starts from the image

1280
00:46:27,119 --> 00:46:28,000
that you're running

1281
00:46:28,000 --> 00:46:29,839
on your kubernetes cluster right if the

1282
00:46:29,839 --> 00:46:31,839
image is compromised already then

1283
00:46:31,839 --> 00:46:34,640
you're going to have issues right it's

1284
00:46:34,640 --> 00:46:37,119
all about supply chain attacks now and

1285
00:46:37,119 --> 00:46:39,359
so you need to understand that before

1286
00:46:39,359 --> 00:46:41,200
you put that image on your cluster you

1287
00:46:41,200 --> 00:46:42,480
need to make sure that it doesn't have

1288
00:46:42,480 --> 00:46:43,920
any vulnerabilities or

1289
00:46:43,920 --> 00:46:46,400
malware or any kind of misconfigurations

1290
00:46:46,400 --> 00:46:47,920
already that might compromise your

1291
00:46:47,920 --> 00:46:49,040
environment right

1292
00:46:49,040 --> 00:46:51,920
so here i have a list of of tools some

1293
00:46:51,920 --> 00:46:54,160
of them are open source or kind of free

1294
00:46:54,160 --> 00:46:55,520
that you can use

1295
00:46:55,520 --> 00:46:59,520
to run and scan your images for any kind

1296
00:46:59,520 --> 00:47:01,280
of vulnerabilities right so

1297
00:47:01,280 --> 00:47:04,240
you even have a command now from docker

1298
00:47:04,240 --> 00:47:05,839
which is docker scan

1299
00:47:05,839 --> 00:47:09,040
which basically uses sneak to to to

1300
00:47:09,040 --> 00:47:09,440
check

1301
00:47:09,440 --> 00:47:12,480
your image for vulnerabilities right and

1302
00:47:12,480 --> 00:47:14,560
i'm not gonna go into that in in this

1303
00:47:14,560 --> 00:47:16,560
uh it's not the kind of the goal of the

1304
00:47:16,560 --> 00:47:17,599
presentation but

1305
00:47:17,599 --> 00:47:19,440
if you need more information about those

1306
00:47:19,440 --> 00:47:22,400
tools just let me know

1307
00:47:22,400 --> 00:47:25,680
okay now i i scan my image and it looks

1308
00:47:25,680 --> 00:47:26,720
good right

1309
00:47:26,720 --> 00:47:28,800
and and okay now i put the image in my

1310
00:47:28,800 --> 00:47:30,319
cluster and it's running

1311
00:47:30,319 --> 00:47:33,599
right but now how do i know if my

1312
00:47:33,599 --> 00:47:36,640
image gets compromised for example in

1313
00:47:36,640 --> 00:47:38,800
in the example that we showed here with

1314
00:47:38,800 --> 00:47:40,880
the drupal web application

1315
00:47:40,880 --> 00:47:43,520
was compromised right how would i know

1316
00:47:43,520 --> 00:47:44,400
do i have

1317
00:47:44,400 --> 00:47:46,880
enough information do i have proper logs

1318
00:47:46,880 --> 00:47:49,520
do i have like a runtime protection

1319
00:47:49,520 --> 00:47:53,599
for kubernetes yes we do right and so

1320
00:47:53,599 --> 00:47:57,040
falco which is also a cncf

1321
00:47:57,040 --> 00:48:00,559
project right uh it's kind of the cloud

1322
00:48:00,559 --> 00:48:02,880
native runtime protection it's very

1323
00:48:02,880 --> 00:48:06,880
uh used as kind of ids for kubernetes

1324
00:48:06,880 --> 00:48:08,240
clusters right

1325
00:48:08,240 --> 00:48:10,800
and and the way that falco runs it

1326
00:48:10,800 --> 00:48:13,280
parses the linux kernel syscalls at

1327
00:48:13,280 --> 00:48:14,079
runtime

1328
00:48:14,079 --> 00:48:16,559
so that's very interesting uh one of the

1329
00:48:16,559 --> 00:48:18,079
developers of falco

1330
00:48:18,079 --> 00:48:21,680
was also the developers for wild shark

1331
00:48:21,680 --> 00:48:24,559
if you know him uh uh lori is the johnny

1332
00:48:24,559 --> 00:48:25,040
right

1333
00:48:25,040 --> 00:48:27,760
which uh what shark was privileged

1334
00:48:27,760 --> 00:48:28,880
previously called

1335
00:48:28,880 --> 00:48:32,400
ethereal right so he developed that that

1336
00:48:32,400 --> 00:48:34,960
that way into tapping to cs calls and

1337
00:48:34,960 --> 00:48:36,880
the technology that falco's use is

1338
00:48:36,880 --> 00:48:37,200
called

1339
00:48:37,200 --> 00:48:40,880
ebpf and hence berkeley packet filter

1340
00:48:40,880 --> 00:48:44,240
right and and he uses that to detect any

1341
00:48:44,240 --> 00:48:44,720
kind of

1342
00:48:44,720 --> 00:48:47,599
unexpected behavior in a cluster right

1343
00:48:47,599 --> 00:48:49,839
so it basically has a rule engine

1344
00:48:49,839 --> 00:48:51,920
right so it's a rule-based engine where

1345
00:48:51,920 --> 00:48:54,400
you can create rules using yammo

1346
00:48:54,400 --> 00:48:56,160
to detect any kind of suspicious

1347
00:48:56,160 --> 00:48:57,440
vulnerability right so

1348
00:48:57,440 --> 00:49:00,640
if there is uh uh kind of a shell was

1349
00:49:00,640 --> 00:49:03,040
executed or port was open

1350
00:49:03,040 --> 00:49:05,440
or something like that someone touched

1351
00:49:05,440 --> 00:49:07,839
on a specific file that's sensitive

1352
00:49:07,839 --> 00:49:10,880
it can generate it can generate alerts

1353
00:49:10,880 --> 00:49:14,240
uh based on the threats detected right

1354
00:49:14,240 --> 00:49:16,559
so it's very interesting to take a look

1355
00:49:16,559 --> 00:49:18,559
it's it's free and it's open source

1356
00:49:18,559 --> 00:49:21,359
and anyone can can can just install and

1357
00:49:21,359 --> 00:49:23,440
run it right

1358
00:49:23,440 --> 00:49:26,079
okay good now we protected the runtime

1359
00:49:26,079 --> 00:49:28,000
but what else is there any other kind of

1360
00:49:28,000 --> 00:49:29,520
security setting that i need to know

1361
00:49:29,520 --> 00:49:30,160
about

1362
00:49:30,160 --> 00:49:32,640
yes yes that's there is right there are

1363
00:49:32,640 --> 00:49:33,599
actually

1364
00:49:33,599 --> 00:49:35,760
uh one of the things is and we talk

1365
00:49:35,760 --> 00:49:37,520
about that and on when talking about

1366
00:49:37,520 --> 00:49:39,520
container security right

1367
00:49:39,520 --> 00:49:41,680
we need to limit the resources of your

1368
00:49:41,680 --> 00:49:43,200
containers right because

1369
00:49:43,200 --> 00:49:46,480
if if your container uh it's not limited

1370
00:49:46,480 --> 00:49:48,880
it's going to request resources if it

1371
00:49:48,880 --> 00:49:51,440
needs more right so like cpu and memory

1372
00:49:51,440 --> 00:49:53,280
if you don't have like a threshold or a

1373
00:49:53,280 --> 00:49:54,640
limit for those

1374
00:49:54,640 --> 00:49:57,359
it's going to to just keep requesting

1375
00:49:57,359 --> 00:49:58,400
more more

1376
00:49:58,400 --> 00:50:01,359
resources and it might be might even

1377
00:50:01,359 --> 00:50:02,240
cause you

1378
00:50:02,240 --> 00:50:04,480
like a denial of service attack right so

1379
00:50:04,480 --> 00:50:06,319
it's important to have that set up on

1380
00:50:06,319 --> 00:50:07,599
your cluster as well

1381
00:50:07,599 --> 00:50:09,599
there is a specific object in kubernetes

1382
00:50:09,599 --> 00:50:10,960
called resource quota

1383
00:50:10,960 --> 00:50:14,800
where you can apply uh how how much

1384
00:50:14,800 --> 00:50:16,880
memory and how much cpu

1385
00:50:16,880 --> 00:50:18,960
uh you you want to give to your

1386
00:50:18,960 --> 00:50:20,559
containers and apply that on your

1387
00:50:20,559 --> 00:50:21,760
cluster level

1388
00:50:21,760 --> 00:50:24,960
so that makes things easier right uh

1389
00:50:24,960 --> 00:50:27,599
another thing that you need to worry

1390
00:50:27,599 --> 00:50:28,079
about

1391
00:50:28,079 --> 00:50:30,240
is uh it's something called the security

1392
00:50:30,240 --> 00:50:31,599
context

1393
00:50:31,599 --> 00:50:34,000
so security context allows you to define

1394
00:50:34,000 --> 00:50:35,280
like privilege

1395
00:50:35,280 --> 00:50:38,000
uh and access control permissions for a

1396
00:50:38,000 --> 00:50:40,720
pod or a container right so some of them

1397
00:50:40,720 --> 00:50:42,160
that i that i show here

1398
00:50:42,160 --> 00:50:44,000
those are just some examples there's

1399
00:50:44,000 --> 00:50:45,599
more uh uh

1400
00:50:45,599 --> 00:50:47,520
our kind of features and settings that

1401
00:50:47,520 --> 00:50:49,599
you can apply but some of those

1402
00:50:49,599 --> 00:50:51,520
are kind of the main ones that you need

1403
00:50:51,520 --> 00:50:54,079
to to worry about

1404
00:50:54,079 --> 00:50:57,520
so all allow privilege escalation right

1405
00:50:57,520 --> 00:50:59,680
what does it mean this this controls

1406
00:50:59,680 --> 00:51:01,359
whether a process can gain more

1407
00:51:01,359 --> 00:51:02,319
privileges

1408
00:51:02,319 --> 00:51:04,800
than its parent process right so you

1409
00:51:04,800 --> 00:51:06,319
don't want that you don't want to allow

1410
00:51:06,319 --> 00:51:08,240
privilege escalation so this should

1411
00:51:08,240 --> 00:51:11,599
be set to false on your security context

1412
00:51:11,599 --> 00:51:13,760
read the only root file system right

1413
00:51:13,760 --> 00:51:15,760
what does that mean defines whether the

1414
00:51:15,760 --> 00:51:16,640
container

1415
00:51:16,640 --> 00:51:18,880
uh has read the only root file system or

1416
00:51:18,880 --> 00:51:19,839
not right

1417
00:51:19,839 --> 00:51:22,240
so you want that set to true right

1418
00:51:22,240 --> 00:51:24,319
because the default setting is false but

1419
00:51:24,319 --> 00:51:26,000
we recommend setting that to true

1420
00:51:26,000 --> 00:51:27,440
because you don't want

1421
00:51:27,440 --> 00:51:30,800
you don't want your your container

1422
00:51:30,800 --> 00:51:32,720
your root file system or your container

1423
00:51:32,720 --> 00:51:33,839
being writable

1424
00:51:33,839 --> 00:51:38,559
right um and also run as long root

1425
00:51:38,559 --> 00:51:41,599
right so this setting indicates if you

1426
00:51:41,599 --> 00:51:44,960
if the container must run as a non-root

1427
00:51:44,960 --> 00:51:45,440
user

1428
00:51:45,440 --> 00:51:47,280
right and should be set to true so i

1429
00:51:47,280 --> 00:51:49,119
don't want my container running as root

1430
00:51:49,119 --> 00:51:50,319
and that's one of the

1431
00:51:50,319 --> 00:51:53,839
the main issues of running containers

1432
00:51:53,839 --> 00:51:57,920
right is running that as root

1433
00:51:58,319 --> 00:52:00,240
other things that you can do to your to

1434
00:52:00,240 --> 00:52:02,160
your pods and your containers as well

1435
00:52:02,160 --> 00:52:04,559
is using the the linux kernel security

1436
00:52:04,559 --> 00:52:05,440
features

1437
00:52:05,440 --> 00:52:07,359
so the three main ones here that you can

1438
00:52:07,359 --> 00:52:08,800
enable and set up

1439
00:52:08,800 --> 00:52:12,160
on your uh on your pods is second

1440
00:52:12,160 --> 00:52:14,880
ap armor and sc linux and i know that

1441
00:52:14,880 --> 00:52:15,599
i'm almost

1442
00:52:15,599 --> 00:52:18,000
out of time here so i'm just gonna i'm

1443
00:52:18,000 --> 00:52:19,599
not gonna talk about that because i

1444
00:52:19,599 --> 00:52:20,480
don't have

1445
00:52:20,480 --> 00:52:23,599
uh uh uh i won't go deep into that so

1446
00:52:23,599 --> 00:52:24,960
that's not the topic of this

1447
00:52:24,960 --> 00:52:27,040
presentation

1448
00:52:27,040 --> 00:52:30,000
okay so i talked about image right

1449
00:52:30,000 --> 00:52:31,839
talking about controlling the image and

1450
00:52:31,839 --> 00:52:33,440
protecting and scanning the image in the

1451
00:52:33,440 --> 00:52:34,319
beginning

1452
00:52:34,319 --> 00:52:36,400
of before deploying to the cluster and

1453
00:52:36,400 --> 00:52:38,079
we talked about the runtime

1454
00:52:38,079 --> 00:52:40,240
right when when the container is running

1455
00:52:40,240 --> 00:52:41,520
already right

1456
00:52:41,520 --> 00:52:43,440
but what about the middle right what

1457
00:52:43,440 --> 00:52:45,359
about in between

1458
00:52:45,359 --> 00:52:48,880
the container uh being deployed to the

1459
00:52:48,880 --> 00:52:50,559
cluster

1460
00:52:50,559 --> 00:52:52,800
right so that's something that we call

1461
00:52:52,800 --> 00:52:54,319
admission controllers

1462
00:52:54,319 --> 00:52:57,280
so one of those admission controllers is

1463
00:52:57,280 --> 00:52:57,760
called

1464
00:52:57,760 --> 00:53:00,960
pod security policy right but

1465
00:53:00,960 --> 00:53:03,119
luckily part security policy is being

1466
00:53:03,119 --> 00:53:04,000
deprecated

1467
00:53:04,000 --> 00:53:07,359
right it was it still is a way for you

1468
00:53:07,359 --> 00:53:08,160
to apply

1469
00:53:08,160 --> 00:53:10,160
those security context settings that i

1470
00:53:10,160 --> 00:53:11,920
showed before

1471
00:53:11,920 --> 00:53:14,960
in kind of a cluster level right

1472
00:53:14,960 --> 00:53:18,079
uh but it never went ga and it was kind

1473
00:53:18,079 --> 00:53:19,599
of hard to set up

1474
00:53:19,599 --> 00:53:21,680
and now they're working on on a new

1475
00:53:21,680 --> 00:53:23,359
version not a replacement for pod

1476
00:53:23,359 --> 00:53:24,880
security policy that they're just

1477
00:53:24,880 --> 00:53:25,680
calling

1478
00:53:25,680 --> 00:53:29,119
pod security okay but what on or what

1479
00:53:29,119 --> 00:53:31,200
are all the ways that i can

1480
00:53:31,200 --> 00:53:34,319
protect uh and and control the admission

1481
00:53:34,319 --> 00:53:34,880
of of

1482
00:53:34,880 --> 00:53:37,440
containers right and pods inside my

1483
00:53:37,440 --> 00:53:38,160
cluster

1484
00:53:38,160 --> 00:53:40,480
right so there are some alternatives

1485
00:53:40,480 --> 00:53:41,520
that you can use

1486
00:53:41,520 --> 00:53:44,480
and before though uh this new version of

1487
00:53:44,480 --> 00:53:45,440
pod security

1488
00:53:45,440 --> 00:53:47,920
is implemented and released right you

1489
00:53:47,920 --> 00:53:48,559
have

1490
00:53:48,559 --> 00:53:51,599
at least at least two two main tools to

1491
00:53:51,599 --> 00:53:52,480
do that

1492
00:53:52,480 --> 00:53:55,440
one of the tools is oppa gatekeeper uh

1493
00:53:55,440 --> 00:53:56,000
which you

1494
00:53:56,000 --> 00:53:59,119
can use uh their their own language

1495
00:53:59,119 --> 00:54:00,000
their legal

1496
00:54:00,000 --> 00:54:02,559
language to define policies and policies

1497
00:54:02,559 --> 00:54:03,920
as code to tell

1498
00:54:03,920 --> 00:54:07,359
okay is this container uh running as

1499
00:54:07,359 --> 00:54:07,920
root

1500
00:54:07,920 --> 00:54:09,920
okay if it's running as root then don't

1501
00:54:09,920 --> 00:54:11,119
allow it to to

1502
00:54:11,119 --> 00:54:14,240
don't don't admit that container into my

1503
00:54:14,240 --> 00:54:15,760
cluster right so that's what the

1504
00:54:15,760 --> 00:54:17,440
admission controller does

1505
00:54:17,440 --> 00:54:20,480
right and you have the gatekeeper oppa

1506
00:54:20,480 --> 00:54:22,160
gatekeeper here because the gatekeeper

1507
00:54:22,160 --> 00:54:23,359
is the implementation of

1508
00:54:23,359 --> 00:54:26,640
opa for kubernetes uh and you also have

1509
00:54:26,640 --> 00:54:28,800
kyverno or tiverno

1510
00:54:28,800 --> 00:54:30,880
which is basically it's also a greek

1511
00:54:30,880 --> 00:54:32,559
word that means govern

1512
00:54:32,559 --> 00:54:34,800
right it brings like governance and

1513
00:54:34,800 --> 00:54:36,160
policy for your cluster

1514
00:54:36,160 --> 00:54:38,240
and it doesn't require a new language

1515
00:54:38,240 --> 00:54:39,359
like opa uh

1516
00:54:39,359 --> 00:54:42,400
for like regal it only uses yamo

1517
00:54:42,400 --> 00:54:45,599
uh files and emo policies to see and

1518
00:54:45,599 --> 00:54:46,559
check

1519
00:54:46,559 --> 00:54:48,720
what's going to inside your your cluster

1520
00:54:48,720 --> 00:54:50,720
in your container

1521
00:54:50,720 --> 00:54:52,240
so those are the main ones that you

1522
00:54:52,240 --> 00:54:53,920
should take a look

1523
00:54:53,920 --> 00:54:56,960
uh how am i doing on time here sorry let

1524
00:54:56,960 --> 00:54:57,920
me see

1525
00:54:57,920 --> 00:55:01,280
patrick can you let me know let's see

1526
00:55:01,280 --> 00:55:04,880
the chat am i good

1527
00:55:04,880 --> 00:55:09,200
can i keep going or how we're on time

1528
00:55:11,359 --> 00:55:16,000
okay uh yeah okay let's let's keep going

1529
00:55:16,000 --> 00:55:19,280
um so here you have

1530
00:55:19,280 --> 00:55:22,400
uh yeah please let me know on on yeah i

1531
00:55:22,400 --> 00:55:24,079
can definitely share the slides there

1532
00:55:24,079 --> 00:55:27,680
mike uh no problem and yeah i gave this

1533
00:55:27,680 --> 00:55:29,680
presentation before in other

1534
00:55:29,680 --> 00:55:31,200
conferences as well if you want to take

1535
00:55:31,200 --> 00:55:33,280
a look no problem

1536
00:55:33,280 --> 00:55:35,680
but but yeah this is i think the the the

1537
00:55:35,680 --> 00:55:36,319
largest

1538
00:55:36,319 --> 00:55:38,319
version that i did with 60 minutes

1539
00:55:38,319 --> 00:55:40,160
usually it's 30 minutes right

1540
00:55:40,160 --> 00:55:42,160
so what what is our back and i'll try to

1541
00:55:42,160 --> 00:55:43,760
cover that briefly before

1542
00:55:43,760 --> 00:55:47,440
uh before patrick kicks me out here um

1543
00:55:47,440 --> 00:55:50,480
but basically um

1544
00:55:50,480 --> 00:55:52,240
our back is it's called road based

1545
00:55:52,240 --> 00:55:53,839
access control right and if you

1546
00:55:53,839 --> 00:55:56,000
if you use web applications you

1547
00:55:56,000 --> 00:55:57,920
understand what probe based access

1548
00:55:57,920 --> 00:55:59,040
control means right

1549
00:55:59,040 --> 00:56:01,680
because it's basically you have a role

1550
00:56:01,680 --> 00:56:02,160
and

1551
00:56:02,160 --> 00:56:04,319
and then you have a set of users that

1552
00:56:04,319 --> 00:56:05,599
you give that role

1553
00:56:05,599 --> 00:56:08,240
and that role gives the users a set of

1554
00:56:08,240 --> 00:56:09,119
permissions

1555
00:56:09,119 --> 00:56:12,240
right uh um so

1556
00:56:12,240 --> 00:56:14,400
basically that's what kubernetes uses as

1557
00:56:14,400 --> 00:56:16,720
well it's road based access control

1558
00:56:16,720 --> 00:56:18,480
so it allows you to configure who can

1559
00:56:18,480 --> 00:56:20,079
access what in your cluster

1560
00:56:20,079 --> 00:56:22,960
right and now on the latest versions

1561
00:56:22,960 --> 00:56:24,880
it's enabled by default you can check

1562
00:56:24,880 --> 00:56:27,119
that on checking your configurations on

1563
00:56:27,119 --> 00:56:28,799
your cube api server

1564
00:56:28,799 --> 00:56:31,200
and what our back does it has four

1565
00:56:31,200 --> 00:56:32,160
different objects

1566
00:56:32,160 --> 00:56:34,319
right so i'm going to show here in this

1567
00:56:34,319 --> 00:56:35,760
next slide that

1568
00:56:35,760 --> 00:56:39,599
you have an object called row binding

1569
00:56:39,599 --> 00:56:42,839
and row right so row it's it's an object

1570
00:56:42,839 --> 00:56:44,160
that

1571
00:56:44,160 --> 00:56:46,880
basically uh contains rules that

1572
00:56:46,880 --> 00:56:49,040
represents a set of permissions within a

1573
00:56:49,040 --> 00:56:49,920
namespace

1574
00:56:49,920 --> 00:56:51,760
that's why it's a namespace level as we

1575
00:56:51,760 --> 00:56:52,960
said in the beginning

1576
00:56:52,960 --> 00:56:54,720
namespace are kind of logical

1577
00:56:54,720 --> 00:56:57,440
separations of of applications and

1578
00:56:57,440 --> 00:57:00,480
and and uh stuff that i want to separate

1579
00:57:00,480 --> 00:57:02,400
on my cluster right so think that of i

1580
00:57:02,400 --> 00:57:03,359
think that

1581
00:57:03,359 --> 00:57:05,920
as folders right and you have row

1582
00:57:05,920 --> 00:57:06,559
binding

1583
00:57:06,559 --> 00:57:08,799
right and the row bind is basically this

1584
00:57:08,799 --> 00:57:10,400
object that simply grants the

1585
00:57:10,400 --> 00:57:11,920
permissions from the role

1586
00:57:11,920 --> 00:57:15,280
to one or more users right and

1587
00:57:15,280 --> 00:57:17,200
and need to understand here that users

1588
00:57:17,200 --> 00:57:19,440
can be service accounts it can be other

1589
00:57:19,440 --> 00:57:19,760
stuff

1590
00:57:19,760 --> 00:57:21,599
because kubernetes doesn't have users

1591
00:57:21,599 --> 00:57:23,440
right you need to manage that

1592
00:57:23,440 --> 00:57:27,119
some other way but you also have cluster

1593
00:57:27,119 --> 00:57:28,720
row and cluster row binding

1594
00:57:28,720 --> 00:57:32,000
which are basically the same thing but

1595
00:57:32,000 --> 00:57:33,839
now the permissions are on the cluster

1596
00:57:33,839 --> 00:57:36,000
level right so it's not restricted to a

1597
00:57:36,000 --> 00:57:37,520
specific namespace

1598
00:57:37,520 --> 00:57:40,400
but more like uh on a cluster level and

1599
00:57:40,400 --> 00:57:41,040
those

1600
00:57:41,040 --> 00:57:43,040
those kind of permissions apply whatever

1601
00:57:43,040 --> 00:57:44,559
you give to those users and

1602
00:57:44,559 --> 00:57:46,160
using cluster row and cluster role

1603
00:57:46,160 --> 00:57:48,480
binding it's given to the whole

1604
00:57:48,480 --> 00:57:52,000
uh whole cluster

1605
00:57:52,000 --> 00:57:54,720
also as i said at cd is very important

1606
00:57:54,720 --> 00:57:55,119
for

1607
00:57:55,119 --> 00:57:57,040
your cluster it's the main data storage

1608
00:57:57,040 --> 00:57:58,160
for your

1609
00:57:58,160 --> 00:58:00,480
storage location right all the cluster

1610
00:58:00,480 --> 00:58:01,760
objects are saved here

1611
00:58:01,760 --> 00:58:04,799
right and as we saw in

1612
00:58:04,799 --> 00:58:07,200
showdown earlier this year there are

1613
00:58:07,200 --> 00:58:08,960
over 2600

1614
00:58:08,960 --> 00:58:11,839
exposed at cd on trojan itself right

1615
00:58:11,839 --> 00:58:13,920
maybe if you look at others like census

1616
00:58:13,920 --> 00:58:17,599
and binary edge there might be more

1617
00:58:17,599 --> 00:58:19,040
so one of the things that you need to

1618
00:58:19,040 --> 00:58:20,799
worry about at cd

1619
00:58:20,799 --> 00:58:22,960
is okay the encryption in transit is

1620
00:58:22,960 --> 00:58:23,920
done by default

1621
00:58:23,920 --> 00:58:26,400
right but at cd it's not a the

1622
00:58:26,400 --> 00:58:28,079
encryption at rest is not done by

1623
00:58:28,079 --> 00:58:28,880
default

1624
00:58:28,880 --> 00:58:31,119
so what happens is all the objects that

1625
00:58:31,119 --> 00:58:32,880
are stored on that database for your

1626
00:58:32,880 --> 00:58:35,440
kubernetes cluster and configuration

1627
00:58:35,440 --> 00:58:37,920
they're they're plain text right so

1628
00:58:37,920 --> 00:58:38,640
anyone

1629
00:58:38,640 --> 00:58:40,400
anyone can if they have access to the

1630
00:58:40,400 --> 00:58:41,760
database they can read it

1631
00:58:41,760 --> 00:58:44,880
right so you can do uh

1632
00:58:44,880 --> 00:58:47,040
you can of course you can encrypt that

1633
00:58:47,040 --> 00:58:48,640
but you need to create an encryption

1634
00:58:48,640 --> 00:58:51,040
configuration object and tell

1635
00:58:51,040 --> 00:58:53,839
a cd what do you want to encrypt is

1636
00:58:53,839 --> 00:58:55,520
exactly right do you want to create just

1637
00:58:55,520 --> 00:58:57,280
secrets you want to encrypt the whole

1638
00:58:57,280 --> 00:59:00,720
at cd database right so but

1639
00:59:00,720 --> 00:59:02,240
that's not done by default so that's

1640
00:59:02,240 --> 00:59:04,960
something that you need to be aware of

1641
00:59:04,960 --> 00:59:08,640
um besides that

1642
00:59:08,640 --> 00:59:10,960
it's just an example here of how

1643
00:59:10,960 --> 00:59:12,559
kubernetes networking

1644
00:59:12,559 --> 00:59:15,839
works uh it's basically just a joke

1645
00:59:15,839 --> 00:59:18,799
because kubernetes cluster a kubernetes

1646
00:59:18,799 --> 00:59:20,960
cluster is like a flat network right

1647
00:59:20,960 --> 00:59:23,040
anyone can talk to anyone

1648
00:59:23,040 --> 00:59:25,599
so by default all the pods can

1649
00:59:25,599 --> 00:59:27,520
communicate with any other pods in the

1650
00:59:27,520 --> 00:59:29,359
cluster and if you work in security you

1651
00:59:29,359 --> 00:59:31,200
already know that that's a bad idea

1652
00:59:31,200 --> 00:59:32,720
right that's a bad

1653
00:59:32,720 --> 00:59:36,079
model to have right so the way that

1654
00:59:36,079 --> 00:59:38,880
you can kind of segmentate the network

1655
00:59:38,880 --> 00:59:40,480
inside your kubernetes cluster

1656
00:59:40,480 --> 00:59:43,280
is through network policies right so

1657
00:59:43,280 --> 00:59:44,799
network policies are basically the

1658
00:59:44,799 --> 00:59:46,799
policies that you tell okay who can talk

1659
00:59:46,799 --> 00:59:47,440
to who

1660
00:59:47,440 --> 00:59:49,760
right does the front-end really need to

1661
00:59:49,760 --> 00:59:51,680
talk to the database part directly

1662
00:59:51,680 --> 00:59:53,359
or should it go through the back end

1663
00:59:53,359 --> 00:59:55,200
first and only the back-end can reach

1664
00:59:55,200 --> 00:59:57,839
the database right

1665
00:59:57,839 --> 01:00:01,119
uh patrick yes

1666
01:00:01,119 --> 01:00:05,040
how how long do i have it's uh overtime

1667
01:00:05,040 --> 01:00:07,680
okay sounds good no problem no problem

1668
01:00:07,680 --> 01:00:08,319
at all

1669
01:00:08,319 --> 01:00:10,480
so yeah besides network policies just

1670
01:00:10,480 --> 01:00:12,079
give me a few seconds and i'll wrap it

1671
01:00:12,079 --> 01:00:12,640
up

1672
01:00:12,640 --> 01:00:15,760
awesome thank you okay so yeah

1673
01:00:15,760 --> 01:00:18,160
uh besides network policies you have

1674
01:00:18,160 --> 01:00:20,880
like a network policy editor if you want

1675
01:00:20,880 --> 01:00:23,839
uh there is also network policies on

1676
01:00:23,839 --> 01:00:25,839
actually on eks you don't use network

1677
01:00:25,839 --> 01:00:27,119
policies use

1678
01:00:27,119 --> 01:00:29,920
uh security groups right and the last

1679
01:00:29,920 --> 01:00:31,680
thing that i was going to talk about it

1680
01:00:31,680 --> 01:00:34,400
was audit logs right so i can share that

1681
01:00:34,400 --> 01:00:36,559
uh and talk about more about audit logs

1682
01:00:36,559 --> 01:00:38,400
because it's not enabled by default on a

1683
01:00:38,400 --> 01:00:39,599
kubernetes cluster

1684
01:00:39,599 --> 01:00:41,040
and it's very important for you to

1685
01:00:41,040 --> 01:00:43,280
enable that uh for security and

1686
01:00:43,280 --> 01:00:44,079
troubleshooting

1687
01:00:44,079 --> 01:00:47,040
right so uh and it's it's kind of it's

1688
01:00:47,040 --> 01:00:48,799
it's a bit simple to to enable that

1689
01:00:48,799 --> 01:00:49,520
right

1690
01:00:49,520 --> 01:00:53,040
um so yeah basically the basics of of

1691
01:00:53,040 --> 01:00:56,319
of my talk here is okay don't forget the

1692
01:00:56,319 --> 01:00:57,280
basics right

1693
01:00:57,280 --> 01:00:59,119
update your kubernetes environment early

1694
01:00:59,119 --> 01:01:01,200
and often because versions of kubernetes

1695
01:01:01,200 --> 01:01:02,000
are released

1696
01:01:02,000 --> 01:01:05,359
uh uh kind of every three or four months

1697
01:01:05,359 --> 01:01:07,440
uh don't use cluster admin for your

1698
01:01:07,440 --> 01:01:09,359
daily work treaty like root

1699
01:01:09,359 --> 01:01:12,160
right if you can use managed kubernetes

1700
01:01:12,160 --> 01:01:15,200
services like aks eks or dke

1701
01:01:15,200 --> 01:01:17,839
right and check out the cis benchmark

1702
01:01:17,839 --> 01:01:18,240
for

1703
01:01:18,240 --> 01:01:21,119
for more security best practices i hope

1704
01:01:21,119 --> 01:01:23,359
you enjoyed this presentation sorry that

1705
01:01:23,359 --> 01:01:24,000
i went

1706
01:01:24,000 --> 01:01:26,240
uh overtime but if you have any

1707
01:01:26,240 --> 01:01:27,839
questions around the topic

1708
01:01:27,839 --> 01:01:31,119
feel free to reach out to me and yeah

1709
01:01:31,119 --> 01:01:33,359
i'm happy to talk more on discord thank

1710
01:01:33,359 --> 01:01:34,720
you

1711
01:01:34,720 --> 01:01:37,040
awesome thanks a lot daniel uh yes

1712
01:01:37,040 --> 01:01:38,880
everyone if you want to join the discord

1713
01:01:38,880 --> 01:01:39,839
there's a q a

1714
01:01:39,839 --> 01:01:41,680
channel you can continue there and if

1715
01:01:41,680 --> 01:01:43,680
you can share the slides definitely

1716
01:01:43,680 --> 01:01:46,160
upload them on the discord or send it to

1717
01:01:46,160 --> 01:01:48,720
me and we'll upload also to the website

1718
01:01:48,720 --> 01:01:52,000
thanks again everyone

