1
00:00:06,640 --> 00:00:07,759
well

2
00:00:07,759 --> 00:00:09,760
hi everyone so welcome to our first

3
00:00:09,760 --> 00:00:11,599
english talks of the day

4
00:00:11,599 --> 00:00:14,240
uh today we're going to talk about qmu

5
00:00:14,240 --> 00:00:15,519
and it's going to be a bit different

6
00:00:15,519 --> 00:00:16,160
than what was

7
00:00:16,160 --> 00:00:19,840
explained on the website um mu's gonna

8
00:00:19,840 --> 00:00:22,240
explain it for you uh but it's gonna be

9
00:00:22,240 --> 00:00:23,279
a part that is

10
00:00:23,279 --> 00:00:25,519
a talk and then the workshop where she

11
00:00:25,519 --> 00:00:27,039
can out on the discord

12
00:00:27,039 --> 00:00:30,800
i'll put all the details in the chat

13
00:00:30,800 --> 00:00:34,480
so welcome mio and enjoy the

14
00:00:34,480 --> 00:00:37,680
workshop thanks a lot thank you

15
00:00:37,680 --> 00:00:42,960
so let me just have my share screen on

16
00:00:42,960 --> 00:00:46,079
so hello everybody today i'm here to

17
00:00:46,079 --> 00:00:46,879
talk with you

18
00:00:46,879 --> 00:00:50,079
about emulation uh specifically

19
00:00:50,079 --> 00:00:53,199
how to emulate firmware iot firmware or

20
00:00:53,199 --> 00:00:54,879
router firmwares

21
00:00:54,879 --> 00:00:58,559
using docker and chemo so i didn't

22
00:00:58,559 --> 00:01:01,680
invent this i've i've been doing a lot

23
00:01:01,680 --> 00:01:04,000
of research to find a way

24
00:01:04,000 --> 00:01:08,159
to um wait excuse me so what

25
00:01:08,159 --> 00:01:11,600
how it happened is i i had so much

26
00:01:11,600 --> 00:01:14,320
problems using kimu with the different

27
00:01:14,320 --> 00:01:15,680
tools that

28
00:01:15,680 --> 00:01:18,479
actually use it and that we can find

29
00:01:18,479 --> 00:01:20,640
available on the internet so

30
00:01:20,640 --> 00:01:22,880
i made some more me research and i found

31
00:01:22,880 --> 00:01:23,840
a video

32
00:01:23,840 --> 00:01:26,479
from iot village made by ilya where he

33
00:01:26,479 --> 00:01:28,159
explains how he used

34
00:01:28,159 --> 00:01:31,600
docker and kimu together to emulate his

35
00:01:31,600 --> 00:01:34,720
iot firmware file systems

36
00:01:34,720 --> 00:01:37,520
so before we go further i will just

37
00:01:37,520 --> 00:01:40,240
start with a bit of introduction

38
00:01:40,240 --> 00:01:43,680
with who am i so my name is miyu

39
00:01:43,680 --> 00:01:47,280
ram for those who know me you can find

40
00:01:47,280 --> 00:01:48,000
me on the

41
00:01:48,000 --> 00:01:51,280
hackfest discord and if you have any

42
00:01:51,280 --> 00:01:52,320
questions of this

43
00:01:52,320 --> 00:01:54,399
after this presentation just please

44
00:01:54,399 --> 00:01:56,000
don't hesitate to ping me

45
00:01:56,000 --> 00:01:59,360
and and ask me i joined this year the

46
00:01:59,360 --> 00:02:00,399
hack fest team

47
00:02:00,399 --> 00:02:03,200
as a ctf designer and i'm really happy

48
00:02:03,200 --> 00:02:05,119
to announce that um

49
00:02:05,119 --> 00:02:07,600
uh i'm sharing with you today for those

50
00:02:07,600 --> 00:02:08,399
who does

51
00:02:08,399 --> 00:02:11,520
who do the ctf i'm sharing with you my

52
00:02:11,520 --> 00:02:12,239
very first

53
00:02:12,239 --> 00:02:15,280
challenge tonight and what i do

54
00:02:15,280 --> 00:02:18,239
in everyday life when i'm not doing some

55
00:02:18,239 --> 00:02:18,720
stuff

56
00:02:18,720 --> 00:02:21,599
some other stuff is hacking iot since

57
00:02:21,599 --> 00:02:22,480
i've

58
00:02:22,480 --> 00:02:25,520
started in the cyber security field my

59
00:02:25,520 --> 00:02:27,120
first challenge was

60
00:02:27,120 --> 00:02:29,920
to learn about the internet of things

61
00:02:29,920 --> 00:02:30,720
how they are

62
00:02:30,720 --> 00:02:35,040
insecure and ha in order to find ways to

63
00:02:35,040 --> 00:02:37,840
of course

64
00:02:38,319 --> 00:02:40,640
upgrade the security of those design the

65
00:02:40,640 --> 00:02:41,840
devices

66
00:02:41,840 --> 00:02:45,280
so since then i've been grinding levels

67
00:02:45,280 --> 00:02:47,120
and i've been grading skills in

68
00:02:47,120 --> 00:02:49,040
different fields in

69
00:02:49,040 --> 00:02:52,560
uh in cyber security and i.t in general

70
00:02:52,560 --> 00:02:55,599
and i've done already a lot of

71
00:02:55,599 --> 00:02:58,640
uh conferences at the hacc fest

72
00:02:58,640 --> 00:03:01,840
2020 for those who were there and at

73
00:03:01,840 --> 00:03:04,000
izakaya and others

74
00:03:04,000 --> 00:03:07,440
and this one is my very first one in

75
00:03:07,440 --> 00:03:08,800
english so

76
00:03:08,800 --> 00:03:12,239
please bear with my english which can

77
00:03:12,239 --> 00:03:14,879
actually become some frenglish at some

78
00:03:14,879 --> 00:03:15,920
bits

79
00:03:15,920 --> 00:03:19,120
so let's get started and see how it

80
00:03:19,120 --> 00:03:20,239
works

81
00:03:20,239 --> 00:03:24,400
so a firmware is like what i call a tiny

82
00:03:24,400 --> 00:03:25,360
os

83
00:03:25,360 --> 00:03:28,560
it's it's made like small

84
00:03:28,560 --> 00:03:32,000
and it small enough to be able to

85
00:03:32,000 --> 00:03:36,000
run on low memory and low energy devices

86
00:03:36,000 --> 00:03:39,599
as iot so basically it's a combination

87
00:03:39,599 --> 00:03:41,120
of all the code that

88
00:03:41,120 --> 00:03:44,159
needs to run on the on a device and how

89
00:03:44,159 --> 00:03:46,080
does it look like well the firmware

90
00:03:46,080 --> 00:03:48,640
is made out of the bootloader which will

91
00:03:48,640 --> 00:03:50,000
initialize

92
00:03:50,000 --> 00:03:53,280
the start initializing the device and

93
00:03:53,280 --> 00:03:54,159
everything

94
00:03:54,159 --> 00:03:56,879
it will pass the book to the kernel

95
00:03:56,879 --> 00:03:57,439
which

96
00:03:57,439 --> 00:03:59,920
at his place at historian will be

97
00:03:59,920 --> 00:04:02,480
initialized in the file system

98
00:04:02,480 --> 00:04:06,000
so in iot uh archi

99
00:04:06,000 --> 00:04:08,560
some of the most iot architectures that

100
00:04:08,560 --> 00:04:09,280
we find

101
00:04:09,280 --> 00:04:13,040
are actually arm and mips

102
00:04:13,040 --> 00:04:15,680
and we will learn about more about how

103
00:04:15,680 --> 00:04:16,478
we emulate

104
00:04:16,478 --> 00:04:20,079
those during this presentation

105
00:04:20,639 --> 00:04:24,320
oh just i just forgot to to make like um

106
00:04:24,320 --> 00:04:27,280
to explain how this presentation will be

107
00:04:27,280 --> 00:04:28,080
done

108
00:04:28,080 --> 00:04:31,120
so i will start i will first start by

109
00:04:31,120 --> 00:04:31,919
explaining

110
00:04:31,919 --> 00:04:34,880
the procedure all the setuping and and

111
00:04:34,880 --> 00:04:36,960
all the things that we require

112
00:04:36,960 --> 00:04:41,199
it requires to do the this emulation

113
00:04:41,199 --> 00:04:43,520
and after that we will jump to the

114
00:04:43,520 --> 00:04:45,919
discord and for those who want to try it

115
00:04:45,919 --> 00:04:46,639
with me

116
00:04:46,639 --> 00:04:49,600
and have questions i will be available

117
00:04:49,600 --> 00:04:49,919
for

118
00:04:49,919 --> 00:04:52,960
the next hour and answer your questions

119
00:04:52,960 --> 00:04:56,080
so before we continue why we need

120
00:04:56,080 --> 00:04:58,800
to perform firmware analysis so when

121
00:04:58,800 --> 00:05:00,400
trying to

122
00:05:00,400 --> 00:05:03,440
understand the device and and perform

123
00:05:03,440 --> 00:05:05,919
some security analysis on it the

124
00:05:05,919 --> 00:05:07,280
firmware is

125
00:05:07,280 --> 00:05:10,560
gets really important and it's a way

126
00:05:10,560 --> 00:05:13,759
to as i said under better understand the

127
00:05:13,759 --> 00:05:14,639
firmware

128
00:05:14,639 --> 00:05:17,039
find some hidden secrets in it as the

129
00:05:17,039 --> 00:05:18,960
passwords as

130
00:05:18,960 --> 00:05:22,720
api key um ipi links and

131
00:05:22,720 --> 00:05:25,840
certificates etc and there is also a way

132
00:05:25,840 --> 00:05:26,840
to find

133
00:05:26,840 --> 00:05:29,759
vulnerabilities by analyzing

134
00:05:29,759 --> 00:05:32,560
and reversing the different binaries in

135
00:05:32,560 --> 00:05:33,759
the firmware

136
00:05:33,759 --> 00:05:37,039
or the entire firmware itself

137
00:05:37,039 --> 00:05:40,240
and the way to um try

138
00:05:40,240 --> 00:05:44,160
to see how those binaries work and how

139
00:05:44,160 --> 00:05:46,800
and better understand the device is by

140
00:05:46,800 --> 00:05:49,600
doing emulation on those binaries or

141
00:05:49,600 --> 00:05:52,160
the entire firmware again and one of the

142
00:05:52,160 --> 00:05:53,520
ultimate

143
00:05:53,520 --> 00:05:58,080
for like for a bad person perspective

144
00:05:58,080 --> 00:06:01,680
what why they would need to do firmware

145
00:06:01,680 --> 00:06:02,720
analysis

146
00:06:02,720 --> 00:06:04,639
well of course to understand the first

147
00:06:04,639 --> 00:06:07,280
steps i just need i just named

148
00:06:07,280 --> 00:06:10,319
but the ultimate goal for a bad actor

149
00:06:10,319 --> 00:06:12,720
would be to create a malicious firmware

150
00:06:12,720 --> 00:06:14,080
which can be uh

151
00:06:14,080 --> 00:06:18,400
which can be flashed on the device

152
00:06:19,120 --> 00:06:22,639
so to get to docker and kemu work

153
00:06:22,639 --> 00:06:24,400
together we need the different

154
00:06:24,400 --> 00:06:27,199
softwares starting with binwalk to do

155
00:06:27,199 --> 00:06:29,520
the extraction of the file system

156
00:06:29,520 --> 00:06:33,039
or hexdump and dd which is another way

157
00:06:33,039 --> 00:06:36,479
to do it too we will need of course kimu

158
00:06:36,479 --> 00:06:40,240
docker and to set up our docker and kimu

159
00:06:40,240 --> 00:06:42,160
to work together we will need

160
00:06:42,160 --> 00:06:45,360
the image multi-arc kimu user static

161
00:06:45,360 --> 00:06:49,360
from docker herb and for this example

162
00:06:49,360 --> 00:06:52,960
our target will be dylink it's a mips

163
00:06:52,960 --> 00:06:54,800
architecture and it has

164
00:06:54,800 --> 00:06:58,080
it's a 30 bits architecture too

165
00:06:58,080 --> 00:07:01,360
so the file system we have is a squash

166
00:07:01,360 --> 00:07:02,000
fest file

167
00:07:02,000 --> 00:07:05,039
system and we will see how it's going

168
00:07:05,039 --> 00:07:08,479
how we will make it how we will get all

169
00:07:08,479 --> 00:07:08,800
those

170
00:07:08,800 --> 00:07:12,319
informations when analyzing a firmware

171
00:07:12,319 --> 00:07:15,840
so let's start to see how we set up our

172
00:07:15,840 --> 00:07:17,280
environment

173
00:07:17,280 --> 00:07:20,400
i have a setup.sh that i root for

174
00:07:20,400 --> 00:07:24,000
for those who want it i can share it

175
00:07:24,000 --> 00:07:27,440
but it's it's on the i added it here on

176
00:07:27,440 --> 00:07:28,720
the presentation

177
00:07:28,720 --> 00:07:31,199
so first the very first step as we see

178
00:07:31,199 --> 00:07:31,840
here is

179
00:07:31,840 --> 00:07:35,599
install bin walk and then chemo

180
00:07:35,599 --> 00:07:38,479
and docker uh it's pretty

181
00:07:38,479 --> 00:07:41,039
straightforward you can find

182
00:07:41,039 --> 00:07:43,280
tutorials on the internet about how to

183
00:07:43,280 --> 00:07:44,479
do so

184
00:07:44,479 --> 00:07:48,639
and especially for docker you can go to

185
00:07:48,639 --> 00:07:51,440
the documentation website of docker and

186
00:07:51,440 --> 00:07:54,000
you will find everything you need

187
00:07:54,000 --> 00:07:56,800
what we will be interested in especially

188
00:07:56,800 --> 00:07:58,800
is here at line

189
00:07:58,800 --> 00:08:03,039
43 install docker and 47 excuse me setup

190
00:08:03,039 --> 00:08:03,759
cameo for

191
00:08:03,759 --> 00:08:06,960
docker this is the very important step

192
00:08:06,960 --> 00:08:10,639
in the setup which will allow docker

193
00:08:10,639 --> 00:08:14,560
to work with whatever it needs

194
00:08:14,560 --> 00:08:18,560
to do some multi-architecture emulation

195
00:08:18,560 --> 00:08:22,000
so why we what we have to do in here

196
00:08:22,000 --> 00:08:24,479
is first install some specific

197
00:08:24,479 --> 00:08:25,520
requirements

198
00:08:25,520 --> 00:08:28,960
for kim as irm mips

199
00:08:28,960 --> 00:08:32,640
since our target is mips if we have

200
00:08:32,640 --> 00:08:35,679
x86 chemo system 8x862

201
00:08:35,679 --> 00:08:38,640
since it's the system we have and we're

202
00:08:38,640 --> 00:08:39,679
running

203
00:08:39,679 --> 00:08:43,120
on and accumulate utils

204
00:08:43,120 --> 00:08:46,399
the next step is just to run the

205
00:08:46,399 --> 00:08:49,760
the multi-r kim user static image from

206
00:08:49,760 --> 00:08:50,800
docker hub

207
00:08:50,800 --> 00:08:54,000
with privileged arguments so

208
00:08:54,000 --> 00:08:58,480
what it does is it will update the local

209
00:08:58,480 --> 00:09:03,040
proxis fs and the link you can see just

210
00:09:03,040 --> 00:09:04,160
right here

211
00:09:04,160 --> 00:09:06,880
with all the dependencies we will need

212
00:09:06,880 --> 00:09:07,440
from

213
00:09:07,440 --> 00:09:11,839
that given image so what this will do

214
00:09:11,839 --> 00:09:14,720
we will be able we will it will set up

215
00:09:14,720 --> 00:09:15,839
our computer

216
00:09:15,839 --> 00:09:19,519
to be able to do the emulations

217
00:09:19,519 --> 00:09:22,640
using docker so that's like the secret

218
00:09:22,640 --> 00:09:25,760
between get her getting docker and kim

219
00:09:25,760 --> 00:09:28,720
to work together

220
00:09:29,360 --> 00:09:32,720
and then here i i left some

221
00:09:32,720 --> 00:09:36,320
web links to help those who want to set

222
00:09:36,320 --> 00:09:37,680
it up

223
00:09:37,680 --> 00:09:40,720
you can go to the github of bin walk and

224
00:09:40,720 --> 00:09:43,440
kim website for those two and as i say

225
00:09:43,440 --> 00:09:45,680
the installation of docker is pretty

226
00:09:45,680 --> 00:09:46,800
straightforward

227
00:09:46,800 --> 00:09:51,839
and it's available on their website

228
00:09:51,920 --> 00:09:55,200
so the next step to do to start our

229
00:09:55,200 --> 00:09:56,000
emulation

230
00:09:56,000 --> 00:09:59,839
is to create a docker work deer i made a

231
00:09:59,839 --> 00:10:01,040
typo there it's not

232
00:10:01,040 --> 00:10:04,880
word but work so this directory

233
00:10:04,880 --> 00:10:08,000
will have all the files

234
00:10:08,000 --> 00:10:11,839
um the directories and the binaries we

235
00:10:11,839 --> 00:10:12,560
will need

236
00:10:12,560 --> 00:10:16,160
to uh perform our docker exchemi

237
00:10:16,160 --> 00:10:19,200
emulation so the first one would be

238
00:10:19,200 --> 00:10:22,399
the kimi binary for the target architect

239
00:10:22,399 --> 00:10:25,600
architecture uh we will have we will

240
00:10:25,600 --> 00:10:28,640
need the extracted file system directory

241
00:10:28,640 --> 00:10:32,079
and the docker file so just to not a

242
00:10:32,079 --> 00:10:33,040
note here

243
00:10:33,040 --> 00:10:35,440
that we are not trying to emulate the

244
00:10:35,440 --> 00:10:37,279
entire firmware binary

245
00:10:37,279 --> 00:10:40,240
we're really going for the file system

246
00:10:40,240 --> 00:10:42,720
because as i said earlier a fire

247
00:10:42,720 --> 00:10:45,519
a firmware has a bootloader and a kernel

248
00:10:45,519 --> 00:10:46,480
in it

249
00:10:46,480 --> 00:10:49,920
and a docker won't allow to use those

250
00:10:49,920 --> 00:10:50,800
since it has

251
00:10:50,800 --> 00:10:54,240
and uses its own stuff

252
00:10:55,040 --> 00:10:57,680
after that we have the docker file that

253
00:10:57,680 --> 00:10:59,040
we need to write

254
00:10:59,040 --> 00:11:01,760
with which will look a bit like this

255
00:11:01,760 --> 00:11:02,240
we're go

256
00:11:02,240 --> 00:11:05,519
we're going we're going from scratch and

257
00:11:05,519 --> 00:11:08,720
we will simply simply add

258
00:11:08,720 --> 00:11:13,360
the file system directory

259
00:11:13,360 --> 00:11:16,399
to the to the slash of

260
00:11:16,399 --> 00:11:19,519
our image we will also copy the

261
00:11:19,519 --> 00:11:23,040
kimu binary that we need with for the

262
00:11:23,040 --> 00:11:25,200
target architecture inside

263
00:11:25,200 --> 00:11:30,560
the that inside that file system at user

264
00:11:30,560 --> 00:11:34,480
dash bin and the last step would be

265
00:11:34,480 --> 00:11:37,040
simply running the kimo target

266
00:11:37,040 --> 00:11:39,040
architecture static

267
00:11:39,040 --> 00:11:43,839
a binary on with busybox from our file

268
00:11:43,839 --> 00:11:45,040
system

269
00:11:45,040 --> 00:11:47,519
busybox is really important word here

270
00:11:47,519 --> 00:11:48,079
because

271
00:11:48,079 --> 00:11:51,360
it's the way we will be able to get

272
00:11:51,360 --> 00:11:54,560
a dynamic access to the to the firmware

273
00:11:54,560 --> 00:11:57,839
so what is it a busy box is

274
00:11:57,839 --> 00:12:00,320
a swiss army knife for embedded linux

275
00:12:00,320 --> 00:12:01,680
it's very tiny

276
00:12:01,680 --> 00:12:04,240
and it's a combination of of common unix

277
00:12:04,240 --> 00:12:05,600
utilities

278
00:12:05,600 --> 00:12:08,320
uh it's the place where we will find all

279
00:12:08,320 --> 00:12:09,440
the

280
00:12:09,440 --> 00:12:13,040
the commands we use to we use to use

281
00:12:13,040 --> 00:12:16,000
in daily basis for some for example so

282
00:12:16,000 --> 00:12:18,720
it's very small and

283
00:12:18,720 --> 00:12:21,519
executable and it provides a complete

284
00:12:21,519 --> 00:12:22,320
environment

285
00:12:22,320 --> 00:12:24,959
for the embedded systems we will see

286
00:12:24,959 --> 00:12:26,000
more about it

287
00:12:26,000 --> 00:12:27,680
while i when i will be doing my

288
00:12:27,680 --> 00:12:29,839
demonstration

289
00:12:29,839 --> 00:12:33,839
so the next step after that would be to

290
00:12:33,839 --> 00:12:35,360
build our image

291
00:12:35,360 --> 00:12:38,399
and then to run it and see what is the

292
00:12:38,399 --> 00:12:40,320
output that we get

293
00:12:40,320 --> 00:12:44,240
when we do so so without waiting i will

294
00:12:44,240 --> 00:12:47,360
i will jump to the demonstration i have

295
00:12:47,360 --> 00:12:48,480
already

296
00:12:48,480 --> 00:12:52,320
got my docker work directory ready

297
00:12:52,320 --> 00:12:55,600
so i have the root fs file system that i

298
00:12:55,600 --> 00:12:56,560
have here

299
00:12:56,560 --> 00:12:59,839
if we go in it we see that i have

300
00:12:59,839 --> 00:13:02,320
a file a full-blown file system with all

301
00:13:02,320 --> 00:13:03,680
the directories

302
00:13:03,680 --> 00:13:07,440
if i go inside bin and you als

303
00:13:07,440 --> 00:13:10,240
i see here that i can find my busy box

304
00:13:10,240 --> 00:13:11,920
binary

305
00:13:11,920 --> 00:13:15,600
we can perform a file command on it to

306
00:13:15,600 --> 00:13:17,600
get more information

307
00:13:17,600 --> 00:13:21,040
so as we can see our busy box

308
00:13:21,040 --> 00:13:25,200
is a 32-bit architecture on mips

309
00:13:25,200 --> 00:13:28,720
and the what else

310
00:13:28,720 --> 00:13:32,560
we need to know here is if i do

311
00:13:32,560 --> 00:13:36,480
if i list all what i have in my

312
00:13:36,480 --> 00:13:39,600
by in my binary folder you can see that

313
00:13:39,600 --> 00:13:42,800
every binary in here is a reference to

314
00:13:42,800 --> 00:13:44,000
boozybox

315
00:13:44,000 --> 00:13:46,480
so why i say that busybox is very

316
00:13:46,480 --> 00:13:47,519
important

317
00:13:47,519 --> 00:13:50,959
we by running this binary we will be

318
00:13:50,959 --> 00:13:52,160
able to use

319
00:13:52,160 --> 00:13:56,160
all those commands on our on our

320
00:13:56,160 --> 00:14:00,000
on our file system

321
00:14:00,000 --> 00:14:03,199
so without waiting

322
00:14:03,199 --> 00:14:06,800
we go back in here and see

323
00:14:06,800 --> 00:14:09,040
our

324
00:14:10,720 --> 00:14:13,519
doctor file

325
00:14:14,839 --> 00:14:17,839
second

326
00:14:18,880 --> 00:14:22,000
it really looks like how um

327
00:14:22,000 --> 00:14:24,320
what i've showed you in the presentation

328
00:14:24,320 --> 00:14:25,600
we're adding the

329
00:14:25,600 --> 00:14:28,880
file system directory to the

330
00:14:28,880 --> 00:14:32,240
slash here we're using the um

331
00:14:32,240 --> 00:14:35,839
kimo mip cell static and we moving this

332
00:14:35,839 --> 00:14:36,800
one inside

333
00:14:36,800 --> 00:14:40,320
the user.bin um bin directory

334
00:14:40,320 --> 00:14:44,320
and we just started with we just um

335
00:14:44,320 --> 00:14:47,199
execute the busy box binary using the

336
00:14:47,199 --> 00:14:47,920
kimu

337
00:14:47,920 --> 00:14:50,959
mip cell static so in here i

338
00:14:50,959 --> 00:14:54,480
i kinda spoiled a bit which binary from

339
00:14:54,480 --> 00:14:56,399
chemo we will be using

340
00:14:56,399 --> 00:14:59,360
in in this case it's me chemo mipsal

341
00:14:59,360 --> 00:15:00,320
static

342
00:15:00,320 --> 00:15:03,279
i will before explaining why i wanna

343
00:15:03,279 --> 00:15:05,040
show you an example

344
00:15:05,040 --> 00:15:09,680
so all the if i do

345
00:15:09,680 --> 00:15:13,760
ls user

346
00:15:13,760 --> 00:15:27,839
bin like this

347
00:15:30,399 --> 00:15:32,790
we can see that we have this

348
00:15:32,790 --> 00:15:36,020
[Music]

349
00:15:38,839 --> 00:15:41,839
nope

350
00:15:47,680 --> 00:15:50,240
here we go so we can see all the

351
00:15:50,240 --> 00:15:51,839
architectures we can

352
00:15:51,839 --> 00:15:54,959
be using you where we can be targeting

353
00:15:54,959 --> 00:15:56,079
with kimu

354
00:15:56,079 --> 00:15:59,600
we have arm here we can see that

355
00:15:59,600 --> 00:16:02,959
the mips architecture we have mip cell

356
00:16:02,959 --> 00:16:03,519
that we

357
00:16:03,519 --> 00:16:06,240
just seen here and we have the mips

358
00:16:06,240 --> 00:16:06,880
static

359
00:16:06,880 --> 00:16:09,519
architecture before going further i will

360
00:16:09,519 --> 00:16:10,800
just

361
00:16:10,800 --> 00:16:14,959
go go back inside my docker directory

362
00:16:14,959 --> 00:16:19,199
and cp from the user

363
00:16:19,199 --> 00:16:22,959
bin i will copy the k

364
00:16:22,959 --> 00:16:29,359
mips static in my present directory

365
00:16:31,199 --> 00:16:34,399
just trying to show

366
00:16:34,399 --> 00:16:36,959
something very important to to keep in

367
00:16:36,959 --> 00:16:37,600
mind

368
00:16:37,600 --> 00:16:40,720
when doing this

369
00:16:42,000 --> 00:16:51,839
so here since i want to use the mips one

370
00:16:59,120 --> 00:17:02,560
we'll be saving this

371
00:17:02,560 --> 00:17:05,439
so let's try and do a first test and

372
00:17:05,439 --> 00:17:06,400
compile

373
00:17:06,400 --> 00:17:10,640
and build our docker image

374
00:17:10,640 --> 00:17:16,160
to do so we do docker build

375
00:17:16,959 --> 00:17:22,079
and let's call it test mips arc

376
00:17:22,079 --> 00:17:26,399
and we use the

377
00:17:26,480 --> 00:17:29,520
current directory

378
00:17:29,600 --> 00:17:33,840
going way too fast

379
00:17:38,960 --> 00:17:41,360
we give it some time and then to run it

380
00:17:41,360 --> 00:17:42,960
we go with

381
00:17:42,960 --> 00:17:46,640
sudo docker run

382
00:17:46,640 --> 00:17:49,919
and we give it the name

383
00:17:53,039 --> 00:17:56,080
so we see here when i do this it gives

384
00:17:56,080 --> 00:17:56,960
me an error

385
00:17:56,960 --> 00:18:00,480
and it gives invalid elf image for

386
00:18:00,480 --> 00:18:03,520
this architecture to

387
00:18:03,520 --> 00:18:06,559
better understand this we remember that

388
00:18:06,559 --> 00:18:07,280
when

389
00:18:07,280 --> 00:18:15,840
i performed

390
00:18:16,160 --> 00:18:19,360
when i put i first performed the file in

391
00:18:19,360 --> 00:18:22,640
busy box we see here that it's the

392
00:18:22,640 --> 00:18:23,440
30-bit

393
00:18:23,440 --> 00:18:26,880
32-bit architecture if we do the same on

394
00:18:26,880 --> 00:18:30,960
kimu mips static we can see here that

395
00:18:30,960 --> 00:18:32,320
it's 64-bit

396
00:18:32,320 --> 00:18:35,360
architecture which means we're using

397
00:18:35,360 --> 00:18:38,240
a mips it's they are both maps but we

398
00:18:38,240 --> 00:18:39,679
don't have the

399
00:18:39,679 --> 00:18:42,880
it's not exactly the same so

400
00:18:42,880 --> 00:18:46,960
for to in order to emulate 30 32-bit

401
00:18:46,960 --> 00:18:49,679
mips architecture we will we will need

402
00:18:49,679 --> 00:18:51,600
the mipsel one

403
00:18:51,600 --> 00:18:55,120
which if we

404
00:18:55,120 --> 00:18:58,799
do this well

405
00:18:58,799 --> 00:19:01,520
it still gives me the 64 bits here but

406
00:19:01,520 --> 00:19:03,360
if we get if we check

407
00:19:03,360 --> 00:19:07,360
on the internet mips sell that

408
00:19:07,360 --> 00:19:09,840
and how to use kim whenever our target

409
00:19:09,840 --> 00:19:12,080
architecture is a 32-bit we will need to

410
00:19:12,080 --> 00:19:13,840
use the mipsel one

411
00:19:13,840 --> 00:19:17,919
so let's modify the docker file again

412
00:19:17,919 --> 00:19:24,240
with the correct one

413
00:19:24,240 --> 00:19:27,520
is our nip cell

414
00:19:34,960 --> 00:19:38,320
and again

415
00:19:38,320 --> 00:19:41,120
we can just

416
00:19:51,120 --> 00:19:53,840
again

417
00:20:03,600 --> 00:20:08,240
need to run it afterward

418
00:20:13,120 --> 00:20:16,320
so when i do this in here i have

419
00:20:16,320 --> 00:20:21,640
an error because we're

420
00:20:21,640 --> 00:20:24,640
maps32

421
00:20:29,039 --> 00:20:33,520
something oh i i did

422
00:20:33,600 --> 00:20:37,039
i have a typo in here

423
00:20:45,840 --> 00:20:48,880
we can see that we can we have an answer

424
00:20:48,880 --> 00:20:51,280
we see that it's trying to run buzzy box

425
00:20:51,280 --> 00:20:52,000
when it's not

426
00:20:52,000 --> 00:20:54,799
but it's not working so what we need is

427
00:20:54,799 --> 00:20:55,600
to target

428
00:20:55,600 --> 00:20:58,400
the correct applet in order to have

429
00:20:58,400 --> 00:21:00,000
access to the shell

430
00:21:00,000 --> 00:21:03,440
of our target device and to do so

431
00:21:03,440 --> 00:21:06,159
we need to add the sh at the end of the

432
00:21:06,159 --> 00:21:07,039
command

433
00:21:07,039 --> 00:21:09,360
which will give us access to the

434
00:21:09,360 --> 00:21:10,640
brilliant shell

435
00:21:10,640 --> 00:21:14,159
and if i do ls i can find i can see that

436
00:21:14,159 --> 00:21:15,200
i have

437
00:21:15,200 --> 00:21:19,039
again my entire file system if i go to

438
00:21:19,039 --> 00:21:22,320
user and then

439
00:21:22,320 --> 00:21:25,360
we can find our chemo mipsel static that

440
00:21:25,360 --> 00:21:25,919
we just

441
00:21:25,919 --> 00:21:29,039
we copied in our docker file

442
00:21:29,039 --> 00:21:32,080
so once we get in this uh to this stage

443
00:21:32,080 --> 00:21:32,799
we can

444
00:21:32,799 --> 00:21:36,320
try and see look around what can be done

445
00:21:36,320 --> 00:21:40,080
uh for the the all the binaries

446
00:21:40,080 --> 00:21:43,200
present inside our file system that runs

447
00:21:43,200 --> 00:21:45,919
on that specific architecture we can try

448
00:21:45,919 --> 00:21:48,080
and run them on our docker

449
00:21:48,080 --> 00:21:51,840
uh container and see how it behaves and

450
00:21:51,840 --> 00:21:55,440
do all kind of tests and analysis

451
00:21:55,440 --> 00:21:59,200
that we need to reach our goal

452
00:21:59,200 --> 00:22:02,400
so this is this will complete

453
00:22:02,400 --> 00:22:05,919
my presentation of how it works

454
00:22:05,919 --> 00:22:08,880
and i invite you to come to the discord

455
00:22:08,880 --> 00:22:10,240
channel

456
00:22:10,240 --> 00:22:13,440
talk press q a where where i will be

457
00:22:13,440 --> 00:22:15,520
available to answer your question

458
00:22:15,520 --> 00:22:18,320
help you if you want to try it yourself

459
00:22:18,320 --> 00:22:18,880
and

460
00:22:18,880 --> 00:22:21,919
do a practice altogether i will be

461
00:22:21,919 --> 00:22:24,400
posting this pdf right away on the

462
00:22:24,400 --> 00:22:25,760
discord as well

463
00:22:25,760 --> 00:22:28,720
so feel free to ping me ask me any

464
00:22:28,720 --> 00:22:29,440
questions

465
00:22:29,440 --> 00:22:31,679
and for those who will be present at the

466
00:22:31,679 --> 00:22:33,360
ctf later today

467
00:22:33,360 --> 00:22:38,080
i will see you there thank you

468
00:22:39,600 --> 00:22:43,039
thanks mio super appreciate it

469
00:22:43,039 --> 00:22:45,760
so everyone like said in the comments

470
00:22:45,760 --> 00:22:47,360
you can join in discord

471
00:22:47,360 --> 00:22:49,280
if you don't have access already you go

472
00:22:49,280 --> 00:22:51,280
to iac access and click on the first

473
00:22:51,280 --> 00:22:53,520
emoji of the first text and you will get

474
00:22:53,520 --> 00:22:54,799
access

475
00:22:54,799 --> 00:22:58,320
to all the iac channel and we'll see you

476
00:22:58,320 --> 00:22:58,880
there

477
00:22:58,880 --> 00:23:02,000
and at the next talk in an hour thanks

478
00:23:02,000 --> 00:23:03,039
everyone

479
00:23:03,039 --> 00:23:06,960
thank you

