1
00:00:02,550 --> 00:00:10,349
[Applause]

2
00:00:05,839 --> 00:00:15,210
hello hear me well yeah nice so Creole

3
00:00:10,349 --> 00:00:17,060
is me I came to you from Russia I'm

4
00:00:15,210 --> 00:00:20,550
working there a cyber security

5
00:00:17,060 --> 00:00:24,119
researcher I'm developing ideas

6
00:00:20,550 --> 00:00:27,539
signatures analyzing network traffic

7
00:00:24,119 --> 00:00:29,759
Network threats doing some researches at

8
00:00:27,539 --> 00:00:32,790
positive technologies company there is a

9
00:00:29,760 --> 00:00:37,140
huge company in Russia but I doubt you

10
00:00:32,790 --> 00:00:40,219
have cared about it so today me and you

11
00:00:37,140 --> 00:00:45,629
will be bypassing ideas system together

12
00:00:40,219 --> 00:00:49,320
why with net cut and Linux because net

13
00:00:45,629 --> 00:00:52,800
cut is a good tool for working with

14
00:00:49,320 --> 00:00:56,489
sockets sending that over sockets over

15
00:00:52,800 --> 00:00:59,390
transport protocols and it goes with

16
00:00:56,489 --> 00:00:59,390
Linux by default

17
00:01:05,860 --> 00:01:08,460
some problems

18
00:01:12,970 --> 00:01:19,130
so briefly about ideas systems this this

19
00:01:16,750 --> 00:01:22,810
intrusion detection systems that analyze

20
00:01:19,130 --> 00:01:25,039
this network traffic and tries to find

21
00:01:22,810 --> 00:01:27,650
malicious activities there such as

22
00:01:25,040 --> 00:01:28,010
malware activity hacking activity and so

23
00:01:27,650 --> 00:01:33,050
on

24
00:01:28,010 --> 00:01:34,880
and signatures alike in antivirus

25
00:01:33,050 --> 00:01:39,259
systems are responsible for the

26
00:01:34,880 --> 00:01:44,300
detection so while working while working

27
00:01:39,259 --> 00:01:48,350
on signatures signatures developer not

28
00:01:44,300 --> 00:01:54,320
work don't work Swiss don't work with

29
00:01:48,350 --> 00:01:58,070
TCP level directly if there is a special

30
00:01:54,320 --> 00:02:00,800
protocol parser for this protocol HTTP

31
00:01:58,070 --> 00:02:04,100
protocol is a good example of that in

32
00:02:00,800 --> 00:02:06,979
order to let protocols protocol parser

33
00:02:04,100 --> 00:02:11,200
do their job ideas system reassemble

34
00:02:06,979 --> 00:02:14,750
transport streams such as TCP UDP and

35
00:02:11,200 --> 00:02:16,760
provides a smooth data stream for

36
00:02:14,750 --> 00:02:22,310
protocol parsers in order to do their

37
00:02:16,760 --> 00:02:24,170
job and the network stack of your

38
00:02:22,310 --> 00:02:32,120
operation system does absolutely the

39
00:02:24,170 --> 00:02:34,540
same so protocol parsers allow security

40
00:02:32,120 --> 00:02:37,880
researcher signature developer to

41
00:02:34,540 --> 00:02:40,010
concentrate on the malicious activity

42
00:02:37,880 --> 00:02:42,350
itself on the development signature and

43
00:02:40,010 --> 00:02:46,640
he do not think about different formats

44
00:02:42,350 --> 00:02:51,290
different encodings ideas system does

45
00:02:46,640 --> 00:02:53,958
this instead of him so in in the box

46
00:02:51,290 --> 00:03:00,399
at the bottom you see a teeny example of

47
00:02:53,959 --> 00:03:03,260
such a signature so since I'm working

48
00:03:00,400 --> 00:03:08,930
mostly with ricotta I dislike signature

49
00:03:03,260 --> 00:03:11,720
ideas system and all all the stuff we

50
00:03:08,930 --> 00:03:14,959
will be discussing today is is about

51
00:03:11,720 --> 00:03:17,920
circuit idea this is open source one and

52
00:03:14,959 --> 00:03:20,480
the signature is the same as snort ones

53
00:03:17,920 --> 00:03:22,970
so you see this tin example this is

54
00:03:20,480 --> 00:03:25,940
signature for HTTP protocol it searched

55
00:03:22,970 --> 00:03:30,050
for HTTP POST requests

56
00:03:25,940 --> 00:03:34,010
and this construction HTTP HTTP method

57
00:03:30,050 --> 00:03:36,020
allows signature developer not to think

58
00:03:34,010 --> 00:03:39,109
about how many spaces were there before

59
00:03:36,020 --> 00:03:42,950
HTTP method name in which case it was

60
00:03:39,110 --> 00:03:48,850
how so the ID system extracts this field

61
00:03:42,950 --> 00:03:48,850
from HTTP traffic and normalize it I

62
00:03:49,450 --> 00:03:56,869
draw your attention to the fact that

63
00:03:51,650 --> 00:03:59,630
protocol parcels do require transport

64
00:03:56,870 --> 00:04:03,100
stream reassembling good and accurate in

65
00:03:59,630 --> 00:04:03,100
order to work correctly

66
00:04:05,590 --> 00:04:14,690
why so many attention for TCP protocol

67
00:04:09,770 --> 00:04:17,570
because this is these pictures are taken

68
00:04:14,690 --> 00:04:19,870
from some corporate network and see that

69
00:04:17,570 --> 00:04:23,210
more than 90% of network traffic is

70
00:04:19,870 --> 00:04:28,910
transported with is carried by TCP

71
00:04:23,210 --> 00:04:33,620
protocol I admit you have heard about

72
00:04:28,910 --> 00:04:37,570
some classical bypass methods of ideas

73
00:04:33,620 --> 00:04:41,720
such as reassembling issues on client or

74
00:04:37,570 --> 00:04:45,820
idea sites you may have heard that ideas

75
00:04:41,720 --> 00:04:52,550
cannot proceed with double HTTP encoding

76
00:04:45,820 --> 00:04:55,400
non-standard ports signature flows so I

77
00:04:52,550 --> 00:04:59,210
can tell you about these methods in

78
00:04:55,400 --> 00:05:08,060
person later because today we will not

79
00:04:59,210 --> 00:05:11,359
discuss them and please wait a minute

80
00:05:08,060 --> 00:05:14,750
before I start with bypass techniques I

81
00:05:11,360 --> 00:05:18,140
will tell you about TCP protocol

82
00:05:14,750 --> 00:05:20,780
something you have already know this is

83
00:05:18,140 --> 00:05:23,659
important so before TCP connection is

84
00:05:20,780 --> 00:05:26,869
established so TCP is known as reliable

85
00:05:23,660 --> 00:05:29,860
protocol you know yeah why why so

86
00:05:26,870 --> 00:05:34,940
because it counts for data and it

87
00:05:29,860 --> 00:05:38,880
provides a correct data order the price

88
00:05:34,940 --> 00:05:40,640
is free steps client and server do

89
00:05:38,880 --> 00:05:44,130
before a connection is established so

90
00:05:40,640 --> 00:05:47,640
client sends two packets and server

91
00:05:44,130 --> 00:05:49,560
sends one packet and then a connection

92
00:05:47,640 --> 00:05:56,340
is established and you can transmit any

93
00:05:49,560 --> 00:06:05,280
data you want so this happens every time

94
00:05:56,340 --> 00:06:08,340
when your browser visits a web page they

95
00:06:05,280 --> 00:06:12,750
do free steps of TCP three-way handshake

96
00:06:08,340 --> 00:06:16,289
and then HTTP protocol kicks in so one

97
00:06:12,750 --> 00:06:18,240
day I was studying W get vulnerability

98
00:06:16,290 --> 00:06:21,590
exploit you know this tool WG area

99
00:06:18,240 --> 00:06:24,090
this is Linux tool for working with HTTP

100
00:06:21,590 --> 00:06:27,239
and this is not about the vulnerability

101
00:06:24,090 --> 00:06:32,549
itself this is about the way outer

102
00:06:27,240 --> 00:06:36,390
develop the exploit so what he did there

103
00:06:32,550 --> 00:06:38,580
was a malicious HTTP content and he save

104
00:06:36,390 --> 00:06:43,050
it it statically in a file payload dot

105
00:06:38,580 --> 00:06:46,229
txt you see at the bottom and this file

106
00:06:43,050 --> 00:06:49,800
was used but by net cut to you know

107
00:06:46,230 --> 00:06:53,250
net cut yeah this is tools for just

108
00:06:49,800 --> 00:06:57,420
sending data to network circuit or

109
00:06:53,250 --> 00:07:05,780
reading from it so he save it the

110
00:06:57,420 --> 00:07:05,780
malicious content into into a file and

111
00:07:06,320 --> 00:07:13,590
netcat to has no idea about HTTP

112
00:07:09,690 --> 00:07:15,810
protocol we just write twist circuit and

113
00:07:13,590 --> 00:07:17,869
close the connection or read from a

114
00:07:15,810 --> 00:07:22,910
socket and close the connection

115
00:07:17,870 --> 00:07:26,610
so again her response was to written

116
00:07:22,910 --> 00:07:29,070
payload dot txt file and it was used as

117
00:07:26,610 --> 00:07:31,560
input for net cut to a net cut was

118
00:07:29,070 --> 00:07:35,580
listening on listening to incoming

119
00:07:31,560 --> 00:07:38,640
connections on port 80 for a web browser

120
00:07:35,580 --> 00:07:42,180
for a double gate tool or some stranger

121
00:07:38,640 --> 00:07:45,870
so but then incredibly interesting

122
00:07:42,180 --> 00:07:48,210
things happened so instead of double yet

123
00:07:45,870 --> 00:07:53,120
I tried my web browser to visit this

124
00:07:48,210 --> 00:07:53,120
port 80 and what happened

125
00:07:53,990 --> 00:08:00,060
my browser tried to initiate TCP

126
00:07:56,880 --> 00:08:06,300
handshake you see the first line packet

127
00:08:00,060 --> 00:08:09,540
with flexing and the second the second

128
00:08:06,300 --> 00:08:12,510
step is like a twist like scenic goes

129
00:08:09,540 --> 00:08:16,790
back to the client but netcat didn't

130
00:08:12,510 --> 00:08:19,530
wait until TCP handshake was over it

131
00:08:16,790 --> 00:08:28,110
pushed data right after the second

132
00:08:19,530 --> 00:08:31,859
packet and then client finished TCP

133
00:08:28,110 --> 00:08:39,870
handshake and sent his response as usual

134
00:08:31,860 --> 00:08:41,460
as nothing happened so net cut didn't

135
00:08:39,870 --> 00:08:44,730
wait until this big handshake is over

136
00:08:41,460 --> 00:08:51,660
and send HTTP response before actually

137
00:08:44,730 --> 00:08:53,460
HTTP request was sent by client this is

138
00:08:51,660 --> 00:08:58,189
how it looks in Wireshark window is the

139
00:08:53,460 --> 00:09:02,280
right you see HTTP response reach it

140
00:08:58,190 --> 00:09:06,900
client actually before he sent the

141
00:09:02,280 --> 00:09:09,240
response how does it make sense actually

142
00:09:06,900 --> 00:09:11,970
actually doesn't but this is what

143
00:09:09,240 --> 00:09:15,090
happened and it's his change but my web

144
00:09:11,970 --> 00:09:17,220
browser correctly displays this HTTP

145
00:09:15,090 --> 00:09:21,530
response as nothing happened nothing

146
00:09:17,220 --> 00:09:30,090
extraordinary so how do you think how

147
00:09:21,530 --> 00:09:32,790
how ideas system reacted of course I

148
00:09:30,090 --> 00:09:36,600
wouldn't tell you about this case if it

149
00:09:32,790 --> 00:09:39,420
reacted correctly yeah of course it

150
00:09:36,600 --> 00:09:42,360
didn't see it didn't see this HTTP

151
00:09:39,420 --> 00:09:45,120
response what do I mean I mean that some

152
00:09:42,360 --> 00:09:47,970
signatures that should find a malicious

153
00:09:45,120 --> 00:09:50,610
data text in this HTTP response they

154
00:09:47,970 --> 00:09:55,530
didn't alert as they didn't they didn't

155
00:09:50,610 --> 00:09:59,160
see it so if it would be if it was a

156
00:09:55,530 --> 00:10:02,130
correct HTTP conversation it requires a

157
00:09:59,160 --> 00:10:05,640
response they did but in this case they

158
00:10:02,130 --> 00:10:07,380
didn't so what they could be in

159
00:10:05,640 --> 00:10:11,189
state of this malicious content for

160
00:10:07,380 --> 00:10:18,270
dublicate have you heard about exploited

161
00:10:11,190 --> 00:10:20,970
kids yeah this is small pages that try

162
00:10:18,270 --> 00:10:25,560
exploiting some browser vulnerabilities

163
00:10:20,970 --> 00:10:28,830
and try to break into your computer your

164
00:10:25,560 --> 00:10:32,280
system or adversaries could use this

165
00:10:28,830 --> 00:10:34,170
trick to hide to hide a conversation

166
00:10:32,280 --> 00:10:40,680
between malware sample and common and

167
00:10:34,170 --> 00:10:48,089
control server or any other case so in

168
00:10:40,680 --> 00:10:51,209
total from from open rule set around

169
00:10:48,090 --> 00:10:54,300
five thousand signatures were affected

170
00:10:51,210 --> 00:10:58,430
by this issue this is around twenty

171
00:10:54,300 --> 00:10:58,430
twenty five percent of overall number

172
00:11:05,060 --> 00:11:10,619
but while exploiting this issue one

173
00:11:08,520 --> 00:11:14,790
should fulfill some requirements so

174
00:11:10,620 --> 00:11:17,550
first you not not you but exploit have

175
00:11:14,790 --> 00:11:20,040
to send these packets I mean as second

176
00:11:17,550 --> 00:11:24,959
and third the role on the picture it

177
00:11:20,040 --> 00:11:27,650
right without the delay so my exploit is

178
00:11:24,960 --> 00:11:30,360
it I wrote it sends these two packets

179
00:11:27,650 --> 00:11:33,110
second stage of TCP handshake and packet

180
00:11:30,360 --> 00:11:36,000
with TCP data its end this with a

181
00:11:33,110 --> 00:11:39,540
microsecond delay so this is important

182
00:11:36,000 --> 00:11:41,690
because the lower delay is as a higher

183
00:11:39,540 --> 00:11:44,490
probability that these two packets will

184
00:11:41,690 --> 00:11:48,470
will reach the client together also

185
00:11:44,490 --> 00:11:48,470
across the internet across the earth

186
00:11:48,950 --> 00:11:56,340
this is important and another problem is

187
00:11:52,350 --> 00:11:59,370
that some network devices do not allow

188
00:11:56,340 --> 00:12:04,350
you transmit TCP data until handshake is

189
00:11:59,370 --> 00:12:06,210
completed so we just do not pass it I

190
00:12:04,350 --> 00:12:13,320
don't know what to do about that but

191
00:12:06,210 --> 00:12:15,930
some don't but good news is that both

192
00:12:13,320 --> 00:12:18,080
Windows and Linux clients accept the

193
00:12:15,930 --> 00:12:18,079
data

194
00:12:21,040 --> 00:12:30,259
you can find my exploit at github how it

195
00:12:25,670 --> 00:12:32,959
works you just run this this exploit on

196
00:12:30,259 --> 00:12:35,990
your system and it works as a sniffer

197
00:12:32,959 --> 00:12:39,018
the s packet sniffer it it listen to the

198
00:12:35,990 --> 00:12:43,220
interface it do not take I do not listen

199
00:12:39,019 --> 00:12:47,509
to a socket to report and you should

200
00:12:43,220 --> 00:12:52,339
disable Linux reset packets TCP reset

201
00:12:47,509 --> 00:12:54,410
packets are going from Linux so this is

202
00:12:52,339 --> 00:12:55,720
all about bypass technique number one

203
00:12:54,410 --> 00:12:59,439
going next

204
00:12:55,720 --> 00:13:03,999
now way did receive packets come from

205
00:12:59,439 --> 00:13:07,160
the thing is that Linux do not know that

206
00:13:03,999 --> 00:13:09,170
some exploit is working because nobody

207
00:13:07,160 --> 00:13:11,329
is listening to the port 80

208
00:13:09,170 --> 00:13:16,040
for example nobody listened to a circuit

209
00:13:11,329 --> 00:13:18,709
and if someone tries to connect this

210
00:13:16,040 --> 00:13:25,839
port Linux indicates that nobody is

211
00:13:18,709 --> 00:13:29,029
listening here is the security packet if

212
00:13:25,839 --> 00:13:39,829
port were open Linux system did the

213
00:13:29,029 --> 00:13:42,500
handshake so one day I play it with my

214
00:13:39,829 --> 00:13:45,199
exploit for my past number one and of

215
00:13:42,500 --> 00:13:49,790
course I forget disable this packets and

216
00:13:45,199 --> 00:13:52,969
what happened as it shoot Linux did send

217
00:13:49,790 --> 00:13:58,610
TCP reset packet back to a client trying

218
00:13:52,970 --> 00:14:01,819
to connect to port 80 what happened next

219
00:13:58,610 --> 00:14:05,029
of course my exploit was listening to an

220
00:14:01,819 --> 00:14:08,628
interface it saw incoming packet and it

221
00:14:05,029 --> 00:14:13,689
sent these two packets the second stage

222
00:14:08,629 --> 00:14:13,689
of TCP handshake and packet with data

223
00:14:14,740 --> 00:14:22,910
and surprisingly my Windows web browser

224
00:14:19,129 --> 00:14:26,000
got it so what happened connection

225
00:14:22,910 --> 00:14:28,670
should be reset but instead of that

226
00:14:26,000 --> 00:14:31,880
Windows system did accept the data and

227
00:14:28,670 --> 00:14:36,300
displayed it correctly

228
00:14:31,880 --> 00:14:39,150
after some investigation I found that

229
00:14:36,300 --> 00:14:42,329
there is half a second window in which I

230
00:14:39,150 --> 00:14:47,610
can send these packets after TCP reset

231
00:14:42,330 --> 00:14:49,710
packet and this this trick do not work

232
00:14:47,610 --> 00:14:56,880
for Linux systems so only windows

233
00:14:49,710 --> 00:15:12,060
clients did accept the data how do you

234
00:14:56,880 --> 00:15:13,080
think why what idss what idea sis what I

235
00:15:12,060 --> 00:15:16,890
mean

236
00:15:13,080 --> 00:15:20,089
what is nothing so due to this

237
00:15:16,890 --> 00:15:22,740
disappearing said packet ideas could not

238
00:15:20,089 --> 00:15:26,790
reassemble this move data stream and

239
00:15:22,740 --> 00:15:29,040
therefore protocol parsers could not do

240
00:15:26,790 --> 00:15:33,480
their job because of now stream only did

241
00:15:29,040 --> 00:15:36,329
separate packets explaining on images do

242
00:15:33,480 --> 00:15:40,800
you see this images below every icon is

243
00:15:36,330 --> 00:15:44,240
a famous vulnerability of recent years

244
00:15:40,800 --> 00:15:49,620
such as shell-shocked wanna cry crossed

245
00:15:44,240 --> 00:15:51,990
heartbleed image tragic and these

246
00:15:49,620 --> 00:15:55,770
vulnerabilities exploits for this for

247
00:15:51,990 --> 00:15:58,589
nobility's use TCP transport for their

248
00:15:55,770 --> 00:16:01,829
work so I wanna cry use isn't be

249
00:15:58,589 --> 00:16:06,180
protocol that works on TCP shellshock

250
00:16:01,830 --> 00:16:11,360
use DNS over TCP heartbleed use SSL and

251
00:16:06,180 --> 00:16:11,359
so on so what what turns out that

252
00:16:11,480 --> 00:16:16,650
signatures for all these vulnerabilities

253
00:16:14,370 --> 00:16:20,190
go blind when using these bypass

254
00:16:16,650 --> 00:16:22,829
technique so more than 95% of all

255
00:16:20,190 --> 00:16:27,410
signatures go blind so we're using this

256
00:16:22,830 --> 00:16:30,410
technique you you you become unprotected

257
00:16:27,410 --> 00:16:30,410
completely

258
00:16:33,589 --> 00:16:47,490
so was a vulnerability got its CV number

259
00:16:37,500 --> 00:16:50,670
and also can be found in my github as I

260
00:16:47,490 --> 00:16:51,839
solve for bypassed number two a question

261
00:16:50,670 --> 00:17:02,029
for you

262
00:16:51,839 --> 00:17:06,329
they speak English right yeah so if a

263
00:17:02,029 --> 00:17:09,030
UDP packet goes to close it UDP port

264
00:17:06,329 --> 00:17:11,209
what happens what goes back how do you

265
00:17:09,030 --> 00:17:11,209
think

266
00:17:17,280 --> 00:17:26,160
cannot hear unfortunately but the answer

267
00:17:20,849 --> 00:17:31,740
is the answer is UDP protocol has no

268
00:17:26,160 --> 00:17:34,200
flags and it hires I simply protocol for

269
00:17:31,740 --> 00:17:36,840
this purpose so instead of TCP receive

270
00:17:34,200 --> 00:17:38,460
packet i simpiy packet destination with

271
00:17:36,840 --> 00:17:42,290
the destination unreachable type goes

272
00:17:38,460 --> 00:17:42,290
back how it works

273
00:17:43,320 --> 00:17:50,280
in order for client to not get lost in

274
00:17:46,290 --> 00:17:54,240
his own UDP packets these payloads it

275
00:17:50,280 --> 00:17:57,420
came from client is duplicated in ICMP

276
00:17:54,240 --> 00:18:01,920
message so look at this picture nothing

277
00:17:57,420 --> 00:18:11,880
changed just duplicate and the direction

278
00:18:01,920 --> 00:18:15,150
inside inside of this it inside of ICP

279
00:18:11,880 --> 00:18:17,670
is the same as from client so my kid

280
00:18:15,150 --> 00:18:21,660
goes from server to client

281
00:18:17,670 --> 00:18:23,760
I simply message I mean but inside there

282
00:18:21,660 --> 00:18:27,270
is a packet the tape from client to

283
00:18:23,760 --> 00:18:31,200
server some mapping change nothing hard

284
00:18:27,270 --> 00:18:33,980
and yeah a spatial ICP code for that

285
00:18:31,200 --> 00:18:33,980
destination unreachable

286
00:18:36,740 --> 00:18:43,950
do you remember bypass technique number

287
00:18:39,270 --> 00:18:48,000
two you know what I'm saying I tried the

288
00:18:43,950 --> 00:18:49,770
same technique but for UDP but instead

289
00:18:48,000 --> 00:18:55,560
of disappearing packet we have ICMP

290
00:18:49,770 --> 00:18:57,780
message so what happened I have sent two

291
00:18:55,560 --> 00:19:01,350
packets as in bypass technique number

292
00:18:57,780 --> 00:19:03,180
two with the first I simply detonation

293
00:19:01,350 --> 00:19:04,860
unreachable message and the second is

294
00:19:03,180 --> 00:19:07,980
packet with some data some malicious

295
00:19:04,860 --> 00:19:13,649
data so I have to news for you the good

296
00:19:07,980 --> 00:19:16,020
news is that indeed ideas didn't see UDP

297
00:19:13,650 --> 00:19:19,020
response packet I mean that signatures

298
00:19:16,020 --> 00:19:22,950
that shoot earlier should find something

299
00:19:19,020 --> 00:19:26,370
malicious in this packet didn't find but

300
00:19:22,950 --> 00:19:29,540
the bad news is that client also also

301
00:19:26,370 --> 00:19:29,540
didn't accept the data

302
00:19:30,179 --> 00:19:43,100
okay how to bypass either a system and

303
00:19:36,809 --> 00:19:47,399
not bypass client so my idea was that

304
00:19:43,100 --> 00:19:51,299
since I their system works with network

305
00:19:47,399 --> 00:19:55,258
protocols dissects all the messages and

306
00:19:51,299 --> 00:19:59,119
behaves as operation system Network

307
00:19:55,259 --> 00:20:02,249
stack it is idea system is smaller than

308
00:19:59,119 --> 00:20:06,649
them operation system network stack and

309
00:20:02,249 --> 00:20:06,649
maybe some checks are not strict enough

310
00:20:07,129 --> 00:20:16,369
so what I try it is you remember yeah so

311
00:20:12,720 --> 00:20:19,679
packet is duplicated in ICMP message and

312
00:20:16,369 --> 00:20:22,439
what I did is I try to change the

313
00:20:19,679 --> 00:20:26,129
direction inside is this I simply

314
00:20:22,440 --> 00:20:27,990
message so it should be like it should

315
00:20:26,129 --> 00:20:29,998
be duplicated message like from client

316
00:20:27,990 --> 00:20:34,980
to server but I changes the direction I

317
00:20:29,999 --> 00:20:42,779
like it went from server to client make

318
00:20:34,980 --> 00:20:46,230
sense nice what what we got yeah if that

319
00:20:42,779 --> 00:20:47,999
worked and operation system of client

320
00:20:46,230 --> 00:20:50,460
client operations system didn't believe

321
00:20:47,999 --> 00:20:54,210
that this a simple message was correct

322
00:20:50,460 --> 00:20:55,080
and client did accept the message we got

323
00:20:54,210 --> 00:21:00,139
we sent

324
00:20:55,080 --> 00:21:02,759
I mean UDP response and idea system

325
00:21:00,139 --> 00:21:03,149
believe dust that this I think my

326
00:21:02,759 --> 00:21:05,970
message

327
00:21:03,149 --> 00:21:10,619
yes indicates that something wrong but

328
00:21:05,970 --> 00:21:12,929
as it turned out later after the fix the

329
00:21:10,619 --> 00:21:16,110
deal was the problem was in the fact

330
00:21:12,929 --> 00:21:19,139
that client sent GDP message to server

331
00:21:16,110 --> 00:21:22,529
and seller sent I simply message back so

332
00:21:19,139 --> 00:21:25,918
in neurologic inner optimization logic

333
00:21:22,529 --> 00:21:28,950
had the flow and all the signatures were

334
00:21:25,919 --> 00:21:32,549
disabled except I simply ones for

335
00:21:28,950 --> 00:21:35,220
performance optimization and yeah I

336
00:21:32,549 --> 00:21:39,840
found this flow two years ago

337
00:21:35,220 --> 00:21:43,539
even before I found the issue with TCP

338
00:21:39,840 --> 00:21:46,119
reset packets come easy

339
00:21:43,539 --> 00:21:54,369
outcome is how their systems are pretty

340
00:21:46,119 --> 00:21:56,259
simple how this technique may be used by

341
00:21:54,369 --> 00:21:59,619
adversaries have you heard about Dennis

342
00:21:56,259 --> 00:22:01,570
tunneling as this is exfiltration

343
00:21:59,619 --> 00:22:06,100
technique that you use DNS

344
00:22:01,570 --> 00:22:09,850
infrastructure as a cover channel some

345
00:22:06,100 --> 00:22:13,629
malware samples or hackers hire this

346
00:22:09,850 --> 00:22:16,840
technique and they can use this bypass

347
00:22:13,629 --> 00:22:20,379
technique together to hurt them the

348
00:22:16,840 --> 00:22:22,590
detection of zaire traffic this is not

349
00:22:20,379 --> 00:22:25,330
not not hard to implement this feature

350
00:22:22,590 --> 00:22:30,070
into their common control servers into

351
00:22:25,330 --> 00:22:33,728
their servers so this is the ways it can

352
00:22:30,070 --> 00:22:36,759
be used so I'm finished with this free

353
00:22:33,729 --> 00:22:41,109
bypass techniques and the common idea

354
00:22:36,759 --> 00:22:44,859
behind them that we use some unusual

355
00:22:41,109 --> 00:22:48,789
conditions specific behavior of

356
00:22:44,859 --> 00:22:54,099
operation systems that ideas is not that

357
00:22:48,789 --> 00:22:55,960
ideas not ready for and I'm really not

358
00:22:54,099 --> 00:23:01,259
surprised if not the only story kata

359
00:22:55,960 --> 00:23:01,259
ideas system is affected by these tricks

360
00:23:07,830 --> 00:23:14,010
so now let's take a look into the ideas

361
00:23:11,380 --> 00:23:18,280
system hurt the signatures

362
00:23:14,010 --> 00:23:22,840
what if signatures can do harm sounds

363
00:23:18,280 --> 00:23:25,360
slightly weird right so this is my last

364
00:23:22,840 --> 00:23:27,790
bypass story for today but the sweetest

365
00:23:25,360 --> 00:23:31,810
one because this is a complete denial of

366
00:23:27,790 --> 00:23:34,690
service attack for idea system how often

367
00:23:31,810 --> 00:23:37,480
customer think about their ideas about

368
00:23:34,690 --> 00:23:41,230
their signatures inside their idea

369
00:23:37,480 --> 00:23:46,410
systems not often signatures are taken

370
00:23:41,230 --> 00:23:50,560
as something stable as a rock-solid good

371
00:23:46,410 --> 00:23:53,680
yet nobody think that it can hurt but by

372
00:23:50,560 --> 00:23:57,070
the way actually signatures have

373
00:23:53,680 --> 00:24:01,840
different performance some are slow some

374
00:23:57,070 --> 00:24:04,750
are fast and I ran the open rule set of

375
00:24:01,840 --> 00:24:07,000
signatures against my network traffic in

376
00:24:04,750 --> 00:24:10,690
my corporation and I got this

377
00:24:07,000 --> 00:24:12,970
performance log file you see the top of

378
00:24:10,690 --> 00:24:15,190
this log file five entries and the

379
00:24:12,970 --> 00:24:21,220
numbers highlighted numbers are

380
00:24:15,190 --> 00:24:23,680
so-called ticks so this is top the

381
00:24:21,220 --> 00:24:29,080
hungriest signatures and they take

382
00:24:23,680 --> 00:24:35,190
millions of ticks for a one check my

383
00:24:29,080 --> 00:24:39,730
idea was what makes these signatures why

384
00:24:35,190 --> 00:24:42,370
why is every performance is so low if I

385
00:24:39,730 --> 00:24:49,480
can't find the reason I can amplify this

386
00:24:42,370 --> 00:24:53,560
effect somehow a little step aside so

387
00:24:49,480 --> 00:24:57,580
what signatures are capable of they can

388
00:24:53,560 --> 00:25:01,260
do many interesting things so static

389
00:24:57,580 --> 00:25:04,750
content checks regular expression checks

390
00:25:01,260 --> 00:25:09,910
they can do a plenty number of binary

391
00:25:04,750 --> 00:25:13,720
operations like mathematics by jumps by

392
00:25:09,910 --> 00:25:17,080
extracting and also it capable of some

393
00:25:13,720 --> 00:25:21,120
encoding stuff like base64 encoding

394
00:25:17,080 --> 00:25:23,939
decoding and of course protocol

395
00:25:21,120 --> 00:25:27,570
provide some options to the researcher

396
00:25:23,940 --> 00:25:38,550
so some protocol specific keywords like

397
00:25:27,570 --> 00:25:41,310
HTTP method and these checks are often

398
00:25:38,550 --> 00:25:44,220
changed with each each other so you see

399
00:25:41,310 --> 00:25:48,179
an example of such a check signature as

400
00:25:44,220 --> 00:25:53,190
the table checks that word second word

401
00:25:48,180 --> 00:25:57,750
second goes after word first and at the

402
00:25:53,190 --> 00:26:01,950
content above it finds words second and

403
00:25:57,750 --> 00:26:04,530
word word first and word second goes it

404
00:26:01,950 --> 00:26:06,720
goes after word first and you may not

405
00:26:04,530 --> 00:26:09,450
see but there is another word second and

406
00:26:06,720 --> 00:26:12,600
the beginning highlighted as black and

407
00:26:09,450 --> 00:26:23,730
idea system do not alert on this because

408
00:26:12,600 --> 00:26:27,149
it goes before word first make sense so

409
00:26:23,730 --> 00:26:35,180
the logic flow I found is there is a

410
00:26:27,150 --> 00:26:35,180
content who is four words first four and

411
00:26:35,210 --> 00:26:43,560
ideas system found the first one and try

412
00:26:39,600 --> 00:26:49,290
to find the word second after word first

413
00:26:43,560 --> 00:26:51,600
I mixed up so now it checks the rest of

414
00:26:49,290 --> 00:26:58,670
the content and it didn't find the word

415
00:26:51,600 --> 00:27:02,699
second and instead of instead of

416
00:26:58,670 --> 00:27:06,780
stopping further checks it does the

417
00:27:02,700 --> 00:27:10,980
follow the following the it tries the

418
00:27:06,780 --> 00:27:14,730
second word first and solution as the

419
00:27:10,980 --> 00:27:15,330
rest of the content then after nothing

420
00:27:14,730 --> 00:27:17,340
was found

421
00:27:15,330 --> 00:27:21,810
it tries next the next and the next

422
00:27:17,340 --> 00:27:28,050
until all the words of the word words

423
00:27:21,810 --> 00:27:31,350
first are checked so it it should stop

424
00:27:28,050 --> 00:27:33,149
there check before you after the first

425
00:27:31,350 --> 00:27:43,029
check

426
00:27:33,149 --> 00:27:45,908
yeah and in spite of inner in spite of

427
00:27:43,029 --> 00:27:47,950
number of inner limitations I could

428
00:27:45,909 --> 00:27:52,090
achieve three thousand checks on a

429
00:27:47,950 --> 00:27:55,299
single TCP packet three thousand year

430
00:27:52,090 --> 00:27:58,209
3000 and do you remember signatures are

431
00:27:55,299 --> 00:28:11,649
capable of regular expression checks so

432
00:27:58,210 --> 00:28:15,549
let's take let's take a use of them so

433
00:28:11,649 --> 00:28:18,789
after after some investigating some

434
00:28:15,549 --> 00:28:23,830
research I achieved the I achieved three

435
00:28:18,789 --> 00:28:26,529
billion tix taken for one check so at

436
00:28:23,830 --> 00:28:28,359
first the top hungry signatures took

437
00:28:26,529 --> 00:28:31,179
three million check three millionth

438
00:28:28,359 --> 00:28:35,168
except now some signature takes free

439
00:28:31,179 --> 00:28:38,970
Balloonatics and actually this check for

440
00:28:35,169 --> 00:28:42,249
one packet takes one second of cpu time

441
00:28:38,970 --> 00:28:45,940
so by sending a special packet a special

442
00:28:42,249 --> 00:28:49,320
TCP packet nearby IDs system it checks

443
00:28:45,940 --> 00:28:49,320
this packet for one second

444
00:28:54,149 --> 00:29:02,859
so usually usually it it is eighty

445
00:28:58,690 --> 00:29:07,749
thousand times faster but now every CPU

446
00:29:02,859 --> 00:29:10,989
core checks one one CPU core checks one

447
00:29:07,749 --> 00:29:14,109
TCP packet for one second and of course

448
00:29:10,989 --> 00:29:23,289
now this flaw was fixed but how it looks

449
00:29:14,109 --> 00:29:27,070
like oh how it can be exploited so for

450
00:29:23,289 --> 00:29:30,100
the that signature I found I constructed

451
00:29:27,070 --> 00:29:33,428
a spatial payload with repeatable

452
00:29:30,100 --> 00:29:36,639
pattern I repeated this drink 82 times

453
00:29:33,429 --> 00:29:39,419
and sent nearby the idea system in

454
00:29:36,639 --> 00:29:39,418
infinite loop

455
00:29:42,240 --> 00:29:50,190
so my idea system had eight cores it

456
00:29:48,150 --> 00:29:52,890
used eight cores for checks and by

457
00:29:50,190 --> 00:29:55,290
sending eight packets in a second I took

458
00:29:52,890 --> 00:29:59,400
all the CPU time of these eight cores

459
00:29:55,290 --> 00:30:03,629
and what does it mean so by sending

460
00:29:59,400 --> 00:30:08,790
eight packets in a second I gradually

461
00:30:03,630 --> 00:30:11,970
feel the inner inner queue of packets

462
00:30:08,790 --> 00:30:16,010
and after site after some time I can

463
00:30:11,970 --> 00:30:19,290
send any exploits I can use any exploits

464
00:30:16,010 --> 00:30:21,000
use any tools I want and either system

465
00:30:19,290 --> 00:30:23,610
would not be able to detect it because

466
00:30:21,000 --> 00:30:39,420
it is so busy with this handle packets

467
00:30:23,610 --> 00:30:42,929
and it has no CPU time so the techniques

468
00:30:39,420 --> 00:30:45,840
I was talking are exploiting flows in

469
00:30:42,930 --> 00:30:48,870
idea system logic and sometimes in the

470
00:30:45,840 --> 00:30:51,870
logic itself I mean HTTP response before

471
00:30:48,870 --> 00:30:55,379
request and so on and interesting things

472
00:30:51,870 --> 00:31:00,959
that this may may work not only with

473
00:30:55,380 --> 00:31:03,390
this idea system because I had only two

474
00:31:00,960 --> 00:31:07,080
open source idea systems and didn't try

475
00:31:03,390 --> 00:31:10,490
it on some commercial ones and also this

476
00:31:07,080 --> 00:31:16,740
idea system are integrated in some other

477
00:31:10,490 --> 00:31:20,160
app systems like IP fire and so on so

478
00:31:16,740 --> 00:31:23,700
hopefully these vulnerabilities are

479
00:31:20,160 --> 00:31:30,360
already fixed in latest sericata ideas

480
00:31:23,700 --> 00:31:32,690
version oh yeah and if you are

481
00:31:30,360 --> 00:31:36,360
interested in what I'm doing actually

482
00:31:32,690 --> 00:31:39,570
I'm I'm working it in attack detection

483
00:31:36,360 --> 00:31:42,080
team we are analyzing threats analyze

484
00:31:39,570 --> 00:31:44,129
and exploit vulnerabilities and

485
00:31:42,080 --> 00:31:47,790
developing signatures for them for

486
00:31:44,130 --> 00:31:50,940
detection and also we are investigating

487
00:31:47,790 --> 00:31:54,120
our customer networks with our own

488
00:31:50,940 --> 00:31:56,040
product PT network type network attack

489
00:31:54,120 --> 00:31:58,560
discovery this product allows asked

490
00:31:56,040 --> 00:32:03,139
investigate it collects network traffic

491
00:31:58,560 --> 00:32:05,790
stories eat for weeks and allows you to

492
00:32:03,140 --> 00:32:09,450
investigate how attacker break broke

493
00:32:05,790 --> 00:32:12,870
into what were his next steps like if

494
00:32:09,450 --> 00:32:15,720
you are reading the book so images are

495
00:32:12,870 --> 00:32:23,010
informative screenshots from this system

496
00:32:15,720 --> 00:32:25,980
some dashboards session cards so was it

497
00:32:23,010 --> 00:32:28,920
so thank you for your attention

498
00:32:25,980 --> 00:32:32,220
this was the pleasure for me and I could

499
00:32:28,920 --> 00:32:34,760
miss some interesting points so ask me

500
00:32:32,220 --> 00:32:34,760
any question you want

501
00:32:40,020 --> 00:32:46,168
[Applause]

502
00:33:06,039 --> 00:33:11,980
the question was in bypass technique

503
00:33:09,140 --> 00:33:15,710
number two why windows accept the data

504
00:33:11,980 --> 00:33:19,039
actually I don't know it just works so

505
00:33:15,710 --> 00:33:22,190
the my job is try as more as as much as

506
00:33:19,039 --> 00:33:26,480
I can and I try to it with Linux I found

507
00:33:22,190 --> 00:33:28,309
it by chance so it worked it and it

508
00:33:26,480 --> 00:33:32,860
worked it on other Windows versions and

509
00:33:28,309 --> 00:33:36,260
it didn't work on my Linux systems so

510
00:33:32,860 --> 00:33:39,500
it's something about something about

511
00:33:36,260 --> 00:33:43,270
lean net the windows network stack yeah

512
00:33:39,500 --> 00:33:51,460
in this closet we cannot analyze it

513
00:33:43,270 --> 00:33:51,460
thank you any other question

514
00:33:51,880 --> 00:33:55,690
have you enjoyed my talk

