1
00:00:00,030 --> 00:00:02,550
think we're at the time I don't think

2
00:00:01,290 --> 00:00:04,859
well I don't think I'll be introduced

3
00:00:02,550 --> 00:00:05,490
like we're just good to go I'm Ben hey

4
00:00:04,859 --> 00:00:08,309
guys

5
00:00:05,490 --> 00:00:11,730
I really liked reversing stuff with Ray

6
00:00:08,309 --> 00:00:13,139
dare to and I'm really excited to be

7
00:00:11,730 --> 00:00:15,240
here and talk to you guys about some

8
00:00:13,139 --> 00:00:17,279
right air I hope it's gonna be good this

9
00:00:15,240 --> 00:00:23,850
talk was like originally delivered at

10
00:00:17,279 --> 00:00:27,420
Def Con yeah yeah hey hey we're starting

11
00:00:23,850 --> 00:00:32,549
the other talk guys yeah Mel C beaucoup

12
00:00:27,420 --> 00:00:35,190
oh wow okay so this one was originally

13
00:00:32,549 --> 00:00:38,190
like at Def Con car hacking village it

14
00:00:35,190 --> 00:00:40,140
was like a 25-minute talk but you're not

15
00:00:38,190 --> 00:00:41,640
all car hackers I mean actually show of

16
00:00:40,140 --> 00:00:44,010
hands are there car hackers in the

17
00:00:41,640 --> 00:00:47,550
audience oh no so I I can't

18
00:00:44,010 --> 00:00:48,390
everything no no okay well there's gonna

19
00:00:47,550 --> 00:00:51,120
be some

20
00:00:48,390 --> 00:00:52,710
no so i expanded this to an hour so that

21
00:00:51,120 --> 00:00:54,809
there could be some like introductory

22
00:00:52,710 --> 00:00:56,489
material into just how to get into

23
00:00:54,809 --> 00:00:57,660
vehicle hacking relevant references

24
00:00:56,489 --> 00:01:00,059
things like that okay so it'll be like

25
00:00:57,660 --> 00:01:02,429
first half is gonna be nice and gentle

26
00:01:00,059 --> 00:01:03,660
and here's all the good things you can

27
00:01:02,430 --> 00:01:04,530
do and then the next half is just me

28
00:01:03,660 --> 00:01:07,200
like fly bitch

29
00:01:04,530 --> 00:01:09,659
yeah because Raider 2 has this very

30
00:01:07,200 --> 00:01:12,030
steep learning curve and if you want to

31
00:01:09,659 --> 00:01:13,710
get into Raider 2 highly recommend it

32
00:01:12,030 --> 00:01:15,600
but there's a lot of material out there

33
00:01:13,710 --> 00:01:17,580
that's that initial initial look at

34
00:01:15,600 --> 00:01:19,710
radar - and what I really wanted to do

35
00:01:17,580 --> 00:01:21,900
was do a like how do you take right

36
00:01:19,710 --> 00:01:24,030
there - and use it on arbitrary binary

37
00:01:21,900 --> 00:01:25,680
for Ammar file which is something that

38
00:01:24,030 --> 00:01:27,210
like you know the author of radar has

39
00:01:25,680 --> 00:01:29,130
done in a talk which is great to watch

40
00:01:27,210 --> 00:01:30,839
but there's not a whole lot that's like

41
00:01:29,130 --> 00:01:32,250
do the hard thing and so this is really

42
00:01:30,840 --> 00:01:33,960
do the hard thing in the second half so

43
00:01:32,250 --> 00:01:35,549
fair warning the second half is not

44
00:01:33,960 --> 00:01:38,850
friendly but I will try to be friendly

45
00:01:35,549 --> 00:01:40,079
in the first half okay there you go

46
00:01:38,850 --> 00:01:42,689
that's what I was supposed to say at

47
00:01:40,079 --> 00:01:44,699
this slide we're good so first up is

48
00:01:42,689 --> 00:01:46,110
just you know vehicle buses now there's

49
00:01:44,700 --> 00:01:48,210
a lot of different buses going around in

50
00:01:46,110 --> 00:01:50,130
vehicles these days but still one of the

51
00:01:48,210 --> 00:01:52,589
most common is the can bus this is

52
00:01:50,130 --> 00:01:54,479
controller area network it's a pair of

53
00:01:52,590 --> 00:01:56,670
wires it uses differential signaling

54
00:01:54,479 --> 00:01:59,219
differential signaling let's the the

55
00:01:56,670 --> 00:02:01,200
ECU's that are you know on this bus be

56
00:01:59,219 --> 00:02:02,640
resistant to common mode interference

57
00:02:01,200 --> 00:02:04,409
right so like if you receive radio

58
00:02:02,640 --> 00:02:06,750
signals if you're doing differential

59
00:02:04,409 --> 00:02:08,310
signaling both of the lines get the same

60
00:02:06,750 --> 00:02:09,750
EMI the same electromagnetic an

61
00:02:08,310 --> 00:02:11,430
influence but because you're doing

62
00:02:09,750 --> 00:02:12,510
differential signal you just subtract it

63
00:02:11,430 --> 00:02:13,280
out and you'll see differential

64
00:02:12,510 --> 00:02:15,709
signaling a lot of

65
00:02:13,280 --> 00:02:17,060
protocols like HDMI things like that but

66
00:02:15,709 --> 00:02:19,850
this is of course you know from the 80s

67
00:02:17,060 --> 00:02:21,890
and it runs super slow and the size of

68
00:02:19,850 --> 00:02:24,350
the frames is super small but everything

69
00:02:21,890 --> 00:02:26,529
still kind of works they pack it like

70
00:02:24,350 --> 00:02:28,880
this they add another really interesting

71
00:02:26,530 --> 00:02:30,110
arbitration mechanism so like if you

72
00:02:28,880 --> 00:02:31,819
think about Ethernet it's kind of got

73
00:02:30,110 --> 00:02:34,430
that collision detection and back off

74
00:02:31,819 --> 00:02:37,040
what they do here is the arbitration IDs

75
00:02:34,430 --> 00:02:38,840
are prioritized so like arbitration IDs

76
00:02:37,040 --> 00:02:41,269
zero if you're to send that out that's

77
00:02:38,840 --> 00:02:43,550
the highest priority arbitration ID

78
00:02:41,270 --> 00:02:45,170
these aren't like destination addresses

79
00:02:43,550 --> 00:02:47,630
like MAC addresses you would find an

80
00:02:45,170 --> 00:02:49,250
Ethernet these are more like functions

81
00:02:47,630 --> 00:02:50,840
they're more like what the frame is

82
00:02:49,250 --> 00:02:53,330
supposed to represent like a semantic

83
00:02:50,840 --> 00:02:55,040
marker okay and what happens when you do

84
00:02:53,330 --> 00:02:57,080
these transmissions is the person doing

85
00:02:55,040 --> 00:02:58,970
the transmitting sorry that no doing the

86
00:02:57,080 --> 00:03:01,250
transmitting is responsible for actually

87
00:02:58,970 --> 00:03:03,230
reading whether the bit they asserted

88
00:03:01,250 --> 00:03:05,000
was the bit that was on the bus and in

89
00:03:03,230 --> 00:03:07,130
this way all of the transmitters can

90
00:03:05,000 --> 00:03:09,680
actually detect if two are talking at

91
00:03:07,130 --> 00:03:11,390
the same time because you can see zero

92
00:03:09,680 --> 00:03:13,700
will always be like dominant and you can

93
00:03:11,390 --> 00:03:14,958
detect if someone is asserting a zero on

94
00:03:13,700 --> 00:03:17,208
the bus when you're trying to send a one

95
00:03:14,959 --> 00:03:18,560
and if so you just you back off and that

96
00:03:17,209 --> 00:03:20,660
way that's how they manage you know

97
00:03:18,560 --> 00:03:21,860
multiple access under the same medium so

98
00:03:20,660 --> 00:03:24,709
that's important remember there's like a

99
00:03:21,860 --> 00:03:26,390
really dumb attack on can buses where

100
00:03:24,709 --> 00:03:28,130
you just send arbitration ID zero and

101
00:03:26,390 --> 00:03:29,690
because that's the highest quarry thing

102
00:03:28,130 --> 00:03:31,190
you just dos the bus I mean boss is not

103
00:03:29,690 --> 00:03:33,500
very interesting but this is kind of the

104
00:03:31,190 --> 00:03:36,200
way that you know can works and it was

105
00:03:33,500 --> 00:03:38,570
designed to work if you want some super

106
00:03:36,200 --> 00:03:41,660
cool details it turns out that if you

107
00:03:38,570 --> 00:03:43,640
are going to like mess with these cam

108
00:03:41,660 --> 00:03:45,530
frames because 0 is a bit that can

109
00:03:43,640 --> 00:03:47,358
overwrite other bits on the bus these

110
00:03:45,530 --> 00:03:49,519
guys here a grim built a tool called the

111
00:03:47,359 --> 00:03:51,950
Kant and it will actually GPIO toggle

112
00:03:49,519 --> 00:03:54,079
the bus fast enough so that it'll

113
00:03:51,950 --> 00:03:54,950
actually corrupt a frame in flight so

114
00:03:54,079 --> 00:03:56,239
you can make these little pattern

115
00:03:54,950 --> 00:03:57,260
matching 's and say if I ever see this

116
00:03:56,239 --> 00:03:59,450
arbitration ID with like these

117
00:03:57,260 --> 00:04:00,920
particular bits just as the last bit

118
00:03:59,450 --> 00:04:02,570
comes along it just clobbers the frame

119
00:04:00,920 --> 00:04:04,369
and denies it and they can do

120
00:04:02,570 --> 00:04:06,799
man-in-the-middle attacks on can by

121
00:04:04,370 --> 00:04:08,780
having a note on the side by corrupting

122
00:04:06,799 --> 00:04:10,100
the messages so if you really want to

123
00:04:08,780 --> 00:04:12,380
get into the gory details I highly

124
00:04:10,100 --> 00:04:16,940
recommend their talk from I think it was

125
00:04:12,380 --> 00:04:18,228
use Nick's last year super cool so these

126
00:04:16,940 --> 00:04:19,850
can frames are flying around your

127
00:04:18,228 --> 00:04:21,380
vehicle you have a whole bunch of ECU's

128
00:04:19,850 --> 00:04:22,729
all connected together and it's

129
00:04:21,380 --> 00:04:24,950
important remember like why did they

130
00:04:22,729 --> 00:04:25,889
even bother putting a canned bus in a

131
00:04:24,950 --> 00:04:27,900
vehicle so

132
00:04:25,889 --> 00:04:30,749
before canvases needs to use you would

133
00:04:27,900 --> 00:04:32,460
have you know multiple sets of analog

134
00:04:30,749 --> 00:04:34,680
signals going back and forth in the

135
00:04:32,460 --> 00:04:36,210
vehicle okay and these analog wires

136
00:04:34,680 --> 00:04:38,520
would carry individual signals like

137
00:04:36,210 --> 00:04:40,169
whether whether your windows are up or

138
00:04:38,520 --> 00:04:41,998
whether your door is closed or like

139
00:04:40,169 --> 00:04:43,198
where did you have your foot on the

140
00:04:41,999 --> 00:04:45,029
accelerator pedal in some cases

141
00:04:43,199 --> 00:04:46,499
otherwise a vacuum pressure but in some

142
00:04:45,029 --> 00:04:49,050
cases it's like measuring a particular

143
00:04:46,499 --> 00:04:52,349
signal okay by putting CANbus in these

144
00:04:49,050 --> 00:04:53,849
vehicles they took like the 32 or 64

145
00:04:52,349 --> 00:04:55,349
wires that are necessary and just turned

146
00:04:53,849 --> 00:04:57,628
them into two it's like a weight saving

147
00:04:55,349 --> 00:04:59,430
thing right and then the time division

148
00:04:57,629 --> 00:05:01,020
multiplexed all those signals into

149
00:04:59,430 --> 00:05:03,180
frames okay so what I'm trying to show

150
00:05:01,020 --> 00:05:05,400
you this picture here is like there's

151
00:05:03,180 --> 00:05:07,259
these time varying signals that people

152
00:05:05,400 --> 00:05:08,520
want to capture and do processing on in

153
00:05:07,259 --> 00:05:11,550
the ECU's because that's kind of how

154
00:05:08,520 --> 00:05:13,080
cars work and they want to be able to

155
00:05:11,550 --> 00:05:15,779
have multiple signals going down the

156
00:05:13,080 --> 00:05:18,120
same canvas so these arbitration IDs can

157
00:05:15,779 --> 00:05:19,889
identify groups of signals and then the

158
00:05:18,120 --> 00:05:22,500
actual signal is represented in the same

159
00:05:19,889 --> 00:05:23,999
bit fields in the same arbitration IDs

160
00:05:22,500 --> 00:05:26,669
over time and that's how you like

161
00:05:23,999 --> 00:05:28,349
realize these canned signals this part

162
00:05:26,669 --> 00:05:30,659
is important because that's what we can

163
00:05:28,349 --> 00:05:31,979
try to extract from open XC and that's

164
00:05:30,659 --> 00:05:34,188
like the second half of the talk you

165
00:05:31,979 --> 00:05:36,120
know why would you bother because

166
00:05:34,189 --> 00:05:38,069
manufacturers don't tell you what these

167
00:05:36,120 --> 00:05:39,150
signal mappings are there's a lot of

168
00:05:38,069 --> 00:05:40,919
different ways you can reverse engineer

169
00:05:39,150 --> 00:05:42,270
them some of them is like you get an

170
00:05:40,919 --> 00:05:43,799
instrument cluster and you just see what

171
00:05:42,270 --> 00:05:45,568
the dials do when you send it signals

172
00:05:43,800 --> 00:05:47,039
some of it is you know you take

173
00:05:45,569 --> 00:05:48,479
something you control and then look at

174
00:05:47,039 --> 00:05:50,550
the look at the traffic and you can try

175
00:05:48,479 --> 00:05:51,719
to do correlations and if you want to

176
00:05:50,550 --> 00:05:53,669
learn more about stuff I'm gonna give

177
00:05:51,719 --> 00:05:54,810
you a resource here more ways to do that

178
00:05:53,669 --> 00:05:56,729
but one of the ways doing a ton in the

179
00:05:54,810 --> 00:05:58,800
second half reverse engineer some

180
00:05:56,729 --> 00:06:00,389
firmware and look at the mappings in the

181
00:05:58,800 --> 00:06:01,979
firmware to figure out where the signals

182
00:06:00,389 --> 00:06:04,649
are alright that's why it's relevant

183
00:06:01,979 --> 00:06:07,020
okay so let's say you want to get

184
00:06:04,649 --> 00:06:08,819
started in some vehicle research it's

185
00:06:07,020 --> 00:06:10,589
kind of fun where do you start

186
00:06:08,819 --> 00:06:13,469
honestly you got a lot of reading to do

187
00:06:10,589 --> 00:06:15,210
I'm sorry but this one is free now right

188
00:06:13,469 --> 00:06:18,330
so Craig Smith made this seminal book

189
00:06:15,210 --> 00:06:19,529
it's a free pdf if you want to get if

190
00:06:18,330 --> 00:06:20,789
you have a research and you haven't read

191
00:06:19,529 --> 00:06:22,439
it you're doing it wrong you should just

192
00:06:20,789 --> 00:06:24,509
be reading this book it's wholly free

193
00:06:22,439 --> 00:06:25,860
okay also there's a lot of really good

194
00:06:24,509 --> 00:06:27,330
references out there Wikipedia is

195
00:06:25,860 --> 00:06:28,439
obviously a wicked reference for

196
00:06:27,330 --> 00:06:30,750
everything don't forget it

197
00:06:28,439 --> 00:06:33,509
there's also an automotive wiki and has

198
00:06:30,750 --> 00:06:34,589
like some nice details for example I

199
00:06:33,509 --> 00:06:35,580
don't know if you're here in the morning

200
00:06:34,589 --> 00:06:38,159
we were doing like this riskier

201
00:06:35,580 --> 00:06:39,390
challenge and part of it involved UTS we

202
00:06:38,159 --> 00:06:41,340
got like all the reference

203
00:06:39,390 --> 00:06:43,530
we needed for the UDS protocol just in

204
00:06:41,340 --> 00:06:44,549
the automotive wiki so great resource

205
00:06:43,530 --> 00:06:46,859
with lots of details

206
00:06:44,550 --> 00:06:49,860
I also recommend for learning stuff like

207
00:06:46,860 --> 00:06:51,870
take some classes can bus hacks classes

208
00:06:49,860 --> 00:06:53,400
this is Robert Lee Ali who teaches these

209
00:06:51,870 --> 00:06:55,650
for the most part at blackhat they're

210
00:06:53,400 --> 00:06:57,900
excellent classes totally worth the time

211
00:06:55,650 --> 00:06:59,900
he's a really good instructor and of

212
00:06:57,900 --> 00:07:01,890
course there's a lot of def con video

213
00:06:59,900 --> 00:07:03,900
videos out there you should watch them

214
00:07:01,890 --> 00:07:05,010
shameless blog on I got one of those you

215
00:07:03,900 --> 00:07:07,590
know watch mine too

216
00:07:05,010 --> 00:07:10,469
I appreciate that you're gonna want to

217
00:07:07,590 --> 00:07:12,479
one okay especially you have a vehicle I

218
00:07:10,470 --> 00:07:13,530
don't want to connect to it now if

219
00:07:12,480 --> 00:07:15,990
you're the kind of person that really

220
00:07:13,530 --> 00:07:17,489
wants to live in Windows and like like

221
00:07:15,990 --> 00:07:19,350
kind of likes to connect to our dimino

222
00:07:17,490 --> 00:07:21,420
consoles over cereal and stuff like that

223
00:07:19,350 --> 00:07:23,520
you could totally get Arduino shields

224
00:07:21,420 --> 00:07:24,990
that are can bus adapters and you can

225
00:07:23,520 --> 00:07:26,370
like have a little Arduino serial

226
00:07:24,990 --> 00:07:28,740
connection and do your can but see

227
00:07:26,370 --> 00:07:30,450
things you can also do like the the

228
00:07:28,740 --> 00:07:32,850
Linux option where you actually have a

229
00:07:30,450 --> 00:07:34,680
can adapter in your Linux VM and these

230
00:07:32,850 --> 00:07:36,690
are USB to candidate afters the two that

231
00:07:34,680 --> 00:07:38,850
I really like are USB to can and the

232
00:07:36,690 --> 00:07:40,830
peak can they're not like they're not

233
00:07:38,850 --> 00:07:43,050
cheap not sub $100 but they aren't they

234
00:07:40,830 --> 00:07:44,820
are worth the money and then you can use

235
00:07:43,050 --> 00:07:46,800
Python or Ruby or you know whatever you

236
00:07:44,820 --> 00:07:48,090
like to do your can traffic right there

237
00:07:46,800 --> 00:07:50,160
in your Linux host that's kind of your

238
00:07:48,090 --> 00:07:53,580
two options in Windows as well if you

239
00:07:50,160 --> 00:07:55,440
want to have like the nice Wireshark

240
00:07:53,580 --> 00:07:56,820
kind of view of things then you're gonna

241
00:07:55,440 --> 00:07:59,550
want to like buy some software like

242
00:07:56,820 --> 00:08:00,840
Intrepid's beetle spy and get some value

243
00:07:59,550 --> 00:08:02,100
can't adapters and that's that's like a

244
00:08:00,840 --> 00:08:04,830
path you could take as well if you like

245
00:08:02,100 --> 00:08:06,660
that wire shop kind of you also get

246
00:08:04,830 --> 00:08:09,120
yourself a logic analyzer right like

247
00:08:06,660 --> 00:08:10,800
celaya logic analyzers are not really

248
00:08:09,120 --> 00:08:13,110
that expensive and they will decode can

249
00:08:10,800 --> 00:08:14,310
and sometimes you're gonna plug your

250
00:08:13,110 --> 00:08:16,110
canvas adapter in and all you're gonna

251
00:08:14,310 --> 00:08:18,210
get is just error codes back you have no

252
00:08:16,110 --> 00:08:19,680
idea what's going on and there just

253
00:08:18,210 --> 00:08:21,510
isn't enough debugging tools out there

254
00:08:19,680 --> 00:08:23,730
other than a logic analyzer to save you

255
00:08:21,510 --> 00:08:25,500
so if you really want to like be able to

256
00:08:23,730 --> 00:08:26,670
figure out why you can't capture can

257
00:08:25,500 --> 00:08:28,140
traffic you're gonna need to go to a

258
00:08:26,670 --> 00:08:30,030
logic analyzer so get yourself one of

259
00:08:28,140 --> 00:08:31,710
those and of course a multimeter just

260
00:08:30,030 --> 00:08:33,569
because you know what don't connect your

261
00:08:31,710 --> 00:08:35,490
can adapter straight up to 12 volts it's

262
00:08:33,570 --> 00:08:36,720
just a bad idea so you know test the

263
00:08:35,490 --> 00:08:41,580
wires and you're gonna connect up to

264
00:08:36,720 --> 00:08:42,660
first safety tip great what else should

265
00:08:41,580 --> 00:08:44,820
you do if you want to get involved if

266
00:08:42,659 --> 00:08:46,699
you're a student there's a lot of really

267
00:08:44,820 --> 00:08:49,080
great things for you to do and learn

268
00:08:46,700 --> 00:08:50,580
okay car hacking village is at a whole

269
00:08:49,080 --> 00:08:52,380
bunch of different conferences so I

270
00:08:50,580 --> 00:08:55,250
highly recommend go to cons go to the

271
00:08:52,380 --> 00:08:58,110
try to mess with stuff there's also two

272
00:08:55,250 --> 00:09:00,330
challenges that go on annually that are

273
00:08:58,110 --> 00:09:02,190
specifically directed at teaching

274
00:09:00,330 --> 00:09:04,650
students that maybe aren't necessarily

275
00:09:02,190 --> 00:09:06,960
cybersecurity experts how to become

276
00:09:04,650 --> 00:09:08,850
vehicle cybersecurity participants like

277
00:09:06,960 --> 00:09:10,770
people that can contribute okay the

278
00:09:08,850 --> 00:09:12,810
first one is the cyber Auto challenge

279
00:09:10,770 --> 00:09:15,420
and the second one is the cyber truck

280
00:09:12,810 --> 00:09:17,160
one of my personal interests is in heavy

281
00:09:15,420 --> 00:09:18,479
vehicle cybersecurity so I have the

282
00:09:17,160 --> 00:09:20,459
pleasure of teaching at cyber truck

283
00:09:18,480 --> 00:09:22,350
every year it's really fun I love that

284
00:09:20,460 --> 00:09:23,850
event and if you're a student and you

285
00:09:22,350 --> 00:09:25,860
want to just get involved with vehicle

286
00:09:23,850 --> 00:09:28,170
hacking the technology between heavy

287
00:09:25,860 --> 00:09:29,610
vehicles and passenger cars is totally

288
00:09:28,170 --> 00:09:31,860
interchangeable so I would just apply to

289
00:09:29,610 --> 00:09:33,930
both both of them have travel stiffens

290
00:09:31,860 --> 00:09:35,250
you just need to get like a letter of

291
00:09:33,930 --> 00:09:37,140
recommendation from one of your profs

292
00:09:35,250 --> 00:09:39,000
you do have to give up like a week of

293
00:09:37,140 --> 00:09:41,790
your summer which is maybe not so great

294
00:09:39,000 --> 00:09:43,040
if you know your student but it is

295
00:09:41,790 --> 00:09:44,910
really great learning opportunity and

296
00:09:43,040 --> 00:09:47,130
really it's the same thing for the pros

297
00:09:44,910 --> 00:09:49,260
even if you're not like a vehicle

298
00:09:47,130 --> 00:09:50,580
researcher you know a lot of the people

299
00:09:49,260 --> 00:09:52,500
out here I see some of them already that

300
00:09:50,580 --> 00:09:55,110
are you know subject matter experts that

301
00:09:52,500 --> 00:09:57,270
could totally be contributing to to

302
00:09:55,110 --> 00:09:58,890
vehicle security and teaching kids like

303
00:09:57,270 --> 00:10:01,439
for cyber truck in particular we have

304
00:09:58,890 --> 00:10:03,240
kids come in that aren't necessarily CS

305
00:10:01,440 --> 00:10:05,010
majors at all some of them read just the

306
00:10:03,240 --> 00:10:06,420
mechanical engineering students but they

307
00:10:05,010 --> 00:10:08,160
want to they want to be at the

308
00:10:06,420 --> 00:10:10,050
intersection of both you know vehicles

309
00:10:08,160 --> 00:10:12,060
and cybersecurity so you can go there as

310
00:10:10,050 --> 00:10:13,589
someone that you know is really good at

311
00:10:12,060 --> 00:10:15,599
doing that network penetration testing

312
00:10:13,590 --> 00:10:17,100
and I will assure you I can't give you

313
00:10:15,600 --> 00:10:19,320
any details but network penetration

314
00:10:17,100 --> 00:10:21,690
testing is a hundred percent relevant to

315
00:10:19,320 --> 00:10:22,890
vehicle cyber security with trucks and I

316
00:10:21,690 --> 00:10:24,870
can't give you a whole lot of details

317
00:10:22,890 --> 00:10:27,420
but it is so like if you just want to

318
00:10:24,870 --> 00:10:28,890
get involved teaching people is also a

319
00:10:27,420 --> 00:10:30,030
really great way to learn so I highly

320
00:10:28,890 --> 00:10:32,069
encourage you to go and volunteer

321
00:10:30,030 --> 00:10:33,600
yourself as a mentor at one of these

322
00:10:32,070 --> 00:10:35,910
things too because you'll be surprised

323
00:10:33,600 --> 00:10:37,740
what you learn just being involved in

324
00:10:35,910 --> 00:10:41,610
the exercise and they need your help

325
00:10:37,740 --> 00:10:42,840
they do right so now you know everything

326
00:10:41,610 --> 00:10:44,370
and you got all your tools and you're

327
00:10:42,840 --> 00:10:46,980
ready to go what are some things that

328
00:10:44,370 --> 00:10:48,780
you should like try first first up is

329
00:10:46,980 --> 00:10:51,720
head units all right so head units and

330
00:10:48,780 --> 00:10:54,569
vehicles are are really really soft

331
00:10:51,720 --> 00:10:56,850
targets I'm showing you here like an

332
00:10:54,570 --> 00:10:58,860
example architecture that we kind of put

333
00:10:56,850 --> 00:11:00,630
together that that exemplifies a whole

334
00:10:58,860 --> 00:11:02,550
bunch of common things that you find in

335
00:11:00,630 --> 00:11:04,320
vehicle head units they're often built

336
00:11:02,550 --> 00:11:05,880
on Linux they often have a whole bunch

337
00:11:04,320 --> 00:11:08,100
of user space processes running under

338
00:11:05,880 --> 00:11:10,290
same user communicating over something

339
00:11:08,100 --> 00:11:12,450
like d-bus or some other internal IPC

340
00:11:10,290 --> 00:11:14,219
they have a whole bunch of peripherals

341
00:11:12,450 --> 00:11:15,510
some of them at high privilege levels

342
00:11:14,220 --> 00:11:18,150
like you probably maybe you can't

343
00:11:15,510 --> 00:11:19,770
resolve that but sometimes you run into

344
00:11:18,150 --> 00:11:22,709
things like cellular modems that are

345
00:11:19,770 --> 00:11:26,430
connected to the SOC / PCIe right that's

346
00:11:22,710 --> 00:11:28,650
a bus master capable device so like the

347
00:11:26,430 --> 00:11:30,390
opportunities for like exploitation and

348
00:11:28,650 --> 00:11:32,459
privilege escalation are right and if

349
00:11:30,390 --> 00:11:34,410
you just want to be like take your IOT

350
00:11:32,460 --> 00:11:35,880
hacking knowledge or you know you're

351
00:11:34,410 --> 00:11:37,319
you're kind of just penetration testing

352
00:11:35,880 --> 00:11:38,640
skills you could probably get a head

353
00:11:37,320 --> 00:11:40,110
unit and just start poking at these

354
00:11:38,640 --> 00:11:42,000
things and stuff will follow so these

355
00:11:40,110 --> 00:11:44,190
are easy targets and you don't have to

356
00:11:42,000 --> 00:11:45,660
do a whole lot of CANbus stuff just

357
00:11:44,190 --> 00:11:47,100
still get involved in vehicle hacking so

358
00:11:45,660 --> 00:11:49,800
I recommend you know head units on your

359
00:11:47,100 --> 00:11:51,180
tribe another great thing if you really

360
00:11:49,800 --> 00:11:52,829
want to understand like you know vehicle

361
00:11:51,180 --> 00:11:54,420
networks and this is like right out of

362
00:11:52,830 --> 00:11:57,240
the car hacker's handbook is try to

363
00:11:54,420 --> 00:11:58,680
simulate or drive a gauge cluster you

364
00:11:57,240 --> 00:12:00,600
know write a piece of software that'll

365
00:11:58,680 --> 00:12:03,810
move the needles based on traffic that

366
00:12:00,600 --> 00:12:06,060
you see or move the needles on a cluster

367
00:12:03,810 --> 00:12:07,619
that you get from a car wrecker by

368
00:12:06,060 --> 00:12:08,819
sending traffic to it and this will just

369
00:12:07,620 --> 00:12:10,650
teach you about like what are the

370
00:12:08,820 --> 00:12:12,240
relevant signals how often you have to

371
00:12:10,650 --> 00:12:14,010
send them what happens with error codes

372
00:12:12,240 --> 00:12:15,960
you know you do learn a lot doing this

373
00:12:14,010 --> 00:12:19,980
and then force you to set up a canvas

374
00:12:15,960 --> 00:12:22,320
okay or you could do the amazing thing

375
00:12:19,980 --> 00:12:23,910
and like wreck a car or get a wrecked

376
00:12:22,320 --> 00:12:26,130
car and actually extract the whole

377
00:12:23,910 --> 00:12:27,660
vehicle and this isn't the only instance

378
00:12:26,130 --> 00:12:29,760
of it this one's really cool it's like

379
00:12:27,660 --> 00:12:30,990
putting a vehicle on a board and they

380
00:12:29,760 --> 00:12:33,900
did another version of this recently

381
00:12:30,990 --> 00:12:35,310
that's Grimm where they got a car and

382
00:12:33,900 --> 00:12:36,569
rather than having the wrecker extract

383
00:12:35,310 --> 00:12:38,069
the components they went and took the

384
00:12:36,570 --> 00:12:39,450
wiring harness out themselves because

385
00:12:38,070 --> 00:12:41,730
the the pro tip is that if you have a

386
00:12:39,450 --> 00:12:43,290
record give you modules out of cars they

387
00:12:41,730 --> 00:12:44,610
just like take a hacksaw to cut the

388
00:12:43,290 --> 00:12:45,930
wires and then give you the module and

389
00:12:44,610 --> 00:12:47,820
then you have to figure out how the

390
00:12:45,930 --> 00:12:49,229
wires go back together but if you get a

391
00:12:47,820 --> 00:12:51,390
car and actually take all the wires out

392
00:12:49,230 --> 00:12:52,650
yourself you will save yourself time and

393
00:12:51,390 --> 00:12:54,660
you'll end up with literally an entire

394
00:12:52,650 --> 00:12:56,970
research station on a board that is a

395
00:12:54,660 --> 00:12:59,060
vehicle we're just kind of cool so you

396
00:12:56,970 --> 00:13:01,020
could check that out as well

397
00:12:59,060 --> 00:13:04,380
finally is you know messing with

398
00:13:01,020 --> 00:13:06,329
authentication so these ECU's there are

399
00:13:04,380 --> 00:13:08,460
some unique features they allow reflash

400
00:13:06,330 --> 00:13:10,020
you can dump memory on them you know you

401
00:13:08,460 --> 00:13:11,990
can kind of like look at key material

402
00:13:10,020 --> 00:13:14,400
but they're not completely wide open

403
00:13:11,990 --> 00:13:16,920
well we'll get to how wide open they are

404
00:13:14,400 --> 00:13:19,050
or not but they have this mechanism for

405
00:13:16,920 --> 00:13:19,729
unlock it's not a password it's a

406
00:13:19,050 --> 00:13:23,240
challenge

407
00:13:19,730 --> 00:13:24,410
mechanism called UDS and if you're gonna

408
00:13:23,240 --> 00:13:25,790
try to do something like interesting

409
00:13:24,410 --> 00:13:28,579
with these ECU's you're gonna have to

410
00:13:25,790 --> 00:13:30,469
deal with unlocking UVs which is unified

411
00:13:28,579 --> 00:13:31,969
diagnostic service and I'm gonna talk to

412
00:13:30,470 --> 00:13:34,310
you more about strategies for how you

413
00:13:31,970 --> 00:13:35,600
might defeat UDS so that was like the

414
00:13:34,310 --> 00:13:37,130
easy introductory material and now

415
00:13:35,600 --> 00:13:38,180
already had a bit technical the first

416
00:13:37,130 --> 00:13:41,329
thing I'm going to talk to you about is

417
00:13:38,180 --> 00:13:42,829
how you might deal with attacking UDS if

418
00:13:41,329 --> 00:13:44,630
you just have an ECU in your hands and

419
00:13:42,829 --> 00:13:46,399
you want to unlock it and then remember

420
00:13:44,630 --> 00:13:49,579
after that I'm gonna go into open XC

421
00:13:46,399 --> 00:13:52,130
reversing with raid air 2 so UDS is a

422
00:13:49,579 --> 00:13:53,750
Diagnostics protocol it also specifies a

423
00:13:52,130 --> 00:13:56,420
transport protocol so if you think about

424
00:13:53,750 --> 00:13:58,519
like how ICP is built up out of multiple

425
00:13:56,420 --> 00:14:01,189
fragments on whatever medium it's it's

426
00:13:58,519 --> 00:14:04,010
being sent over part of UDS is something

427
00:14:01,190 --> 00:14:06,110
called is OTP and is OTP knows how to

428
00:14:04,010 --> 00:14:08,810
reassemble the really small can messages

429
00:14:06,110 --> 00:14:10,639
into a stream of bytes so remember that

430
00:14:08,810 --> 00:14:11,959
you know UDS is now like a stream

431
00:14:10,639 --> 00:14:13,730
oriented protocol and not those little

432
00:14:11,959 --> 00:14:15,680
frame oriented pretty girls it kind of

433
00:14:13,730 --> 00:14:17,389
makes things a little different and

434
00:14:15,680 --> 00:14:19,939
pretty much all vehicle diagnostics and

435
00:14:17,389 --> 00:14:22,339
passenger cars actually rely on UDS so

436
00:14:19,940 --> 00:14:23,990
like if you have one of those little

437
00:14:22,339 --> 00:14:26,779
Bluetooth adapters and you have like the

438
00:14:23,990 --> 00:14:28,399
torque app for your Android or something

439
00:14:26,779 --> 00:14:30,829
like that or maybe you have a scan tool

440
00:14:28,399 --> 00:14:32,480
those things are all using UDS to scan

441
00:14:30,829 --> 00:14:34,370
the fault codes in your car

442
00:14:32,480 --> 00:14:36,079
that's why UDS was created this for

443
00:14:34,370 --> 00:14:38,569
those you know fault codes for emissions

444
00:14:36,079 --> 00:14:39,920
tests but it's grown because once you

445
00:14:38,569 --> 00:14:41,630
put a feature in there that's kind of

446
00:14:39,920 --> 00:14:43,430
extensible and has that transport layer

447
00:14:41,630 --> 00:14:44,689
the automotive engineers just start

448
00:14:43,430 --> 00:14:47,120
adding things on top of it right so now

449
00:14:44,690 --> 00:14:50,569
UDS has things like reflash and and

450
00:14:47,120 --> 00:14:51,980
dumping memory locations so all the fun

451
00:14:50,569 --> 00:14:55,399
stuff right you're gonna want to unlock

452
00:14:51,980 --> 00:14:56,360
this thing the the authorization is is

453
00:14:55,399 --> 00:14:58,579
done with something called they call

454
00:14:56,360 --> 00:15:00,920
cede key exchange I think if you if you

455
00:14:58,579 --> 00:15:02,930
know cryptography you're gonna recognize

456
00:15:00,920 --> 00:15:05,750
it as a challenge response mechanism ok

457
00:15:02,930 --> 00:15:07,939
I go I got the you know the hex values

458
00:15:05,750 --> 00:15:09,440
there if you're those right now and it

459
00:15:07,940 --> 00:15:11,569
will tell you if you got the answer

460
00:15:09,440 --> 00:15:14,449
wrong which is kind of helpful right

461
00:15:11,569 --> 00:15:16,819
makes it easier here's a nice diagram of

462
00:15:14,449 --> 00:15:19,130
how the C key exchange works you kind of

463
00:15:16,819 --> 00:15:22,310
tell the ECU that you're ready for a

464
00:15:19,130 --> 00:15:24,170
seed that seed is supposed to be like a

465
00:15:22,310 --> 00:15:25,670
totally random number and then you're

466
00:15:24,170 --> 00:15:26,930
supposed to do a calculation and send

467
00:15:25,670 --> 00:15:28,790
them the thing to prove that you know

468
00:15:26,930 --> 00:15:29,899
the secret they do the same thing on the

469
00:15:28,790 --> 00:15:31,279
other side and then they compare it and

470
00:15:29,899 --> 00:15:33,800
if if you knew the secret then you're

471
00:15:31,279 --> 00:15:36,980
good right we're gonna get into

472
00:15:33,800 --> 00:15:38,810
that kind of goes wrong so remember why

473
00:15:36,980 --> 00:15:40,910
you care about UDS attend occation is

474
00:15:38,810 --> 00:15:43,310
what you really want to do is unlock one

475
00:15:40,910 --> 00:15:45,560
of these ECU's these unlock mechanisms

476
00:15:43,310 --> 00:15:47,149
are very usually inside diagnostic

477
00:15:45,560 --> 00:15:49,459
software like running on a Windows PC

478
00:15:47,149 --> 00:15:52,910
connected to some scan tool in like you

479
00:15:49,459 --> 00:15:54,589
know a service shop right so you're

480
00:15:52,910 --> 00:15:56,660
really trying to like pirate the ability

481
00:15:54,589 --> 00:15:57,200
to unlock these ECU's so I like attack

482
00:15:56,660 --> 00:15:58,819
trees

483
00:15:57,200 --> 00:16:00,079
kind of making the tax right here just

484
00:15:58,820 --> 00:16:03,170
to break down all the different ways

485
00:16:00,079 --> 00:16:04,640
that you might go about pirating the UTS

486
00:16:03,170 --> 00:16:06,410
session I want to bore you with a

487
00:16:04,640 --> 00:16:08,540
notation but you know the red stuff is

488
00:16:06,410 --> 00:16:10,339
easy for attackers and the blue stuff is

489
00:16:08,540 --> 00:16:11,540
like kind of hard for attackers I'm

490
00:16:10,339 --> 00:16:13,490
gonna go all the way down to the weird

491
00:16:11,540 --> 00:16:14,810
things like glitching pass the checks

492
00:16:13,490 --> 00:16:17,720
when we're talking about how you might

493
00:16:14,810 --> 00:16:20,709
kind of bypass her or unlock UDS so

494
00:16:17,720 --> 00:16:23,390
first up is like UDS is a 16-bit

495
00:16:20,709 --> 00:16:25,189
challenge/response which means that you

496
00:16:23,390 --> 00:16:28,640
know you you can't actually extract the

497
00:16:25,190 --> 00:16:31,820
lookup table for this thing right I mean

498
00:16:28,640 --> 00:16:33,890
you can if you have a diagnostic

499
00:16:31,820 --> 00:16:35,990
software you can fake being an ECU and

500
00:16:33,890 --> 00:16:37,790
just keep sending different seeds and

501
00:16:35,990 --> 00:16:39,560
actually just extract the entire lookup

502
00:16:37,790 --> 00:16:41,630
table and then take that and anytime you

503
00:16:39,560 --> 00:16:44,060
want you get a UDS session but of course

504
00:16:41,630 --> 00:16:45,680
you need you need that software and the

505
00:16:44,060 --> 00:16:47,180
time this is a great example of a

506
00:16:45,680 --> 00:16:48,920
student who just set up a four-way

507
00:16:47,180 --> 00:16:50,660
extraction of all the challenge

508
00:16:48,920 --> 00:16:53,899
responses to get it done in like a week

509
00:16:50,660 --> 00:16:55,750
which is pretty cool you can also

510
00:16:53,899 --> 00:16:57,770
reverse engineer that algorithm right so

511
00:16:55,750 --> 00:17:00,950
diagnostic software you know in your

512
00:16:57,770 --> 00:17:03,529
garage knows how to take a seed a

513
00:17:00,950 --> 00:17:05,870
challenge and turn that into a key your

514
00:17:03,529 --> 00:17:07,699
response so you can just open that thing

515
00:17:05,869 --> 00:17:09,559
up in DN spy cuz it's probably written

516
00:17:07,699 --> 00:17:11,240
in C sharp or something and you know get

517
00:17:09,559 --> 00:17:14,089
that hug rhythm there you go now you can

518
00:17:11,240 --> 00:17:15,949
unlock it yourself or you can kind of do

519
00:17:14,089 --> 00:17:17,270
the dumb thing in brute-force it so you

520
00:17:15,949 --> 00:17:18,559
know brute force um sounds like it might

521
00:17:17,270 --> 00:17:21,470
be kind of hard but remember this is

522
00:17:18,559 --> 00:17:24,139
just a 16-bit child response and maybe

523
00:17:21,470 --> 00:17:26,270
you can control the seed or maybe the

524
00:17:24,140 --> 00:17:31,460
seed isn't really random so this is this

525
00:17:26,270 --> 00:17:34,610
is actually a picture of the the X 2 X +

526
00:17:31,460 --> 00:17:35,900
1 relationship of seeds ok so what you

527
00:17:34,610 --> 00:17:37,580
should see for that is like a block of

528
00:17:35,900 --> 00:17:39,260
blue if anyone's ever seen like you know

529
00:17:37,580 --> 00:17:40,790
random number generator tests when you

530
00:17:39,260 --> 00:17:42,980
look at the random generator that's good

531
00:17:40,790 --> 00:17:44,809
it just covers the entire square right

532
00:17:42,980 --> 00:17:47,510
what you see here are these like

533
00:17:44,809 --> 00:17:49,428
extremely strong linear relationships

534
00:17:47,510 --> 00:17:52,100
so if you saw our relationship like this

535
00:17:49,429 --> 00:17:54,620
coming out of the seeds on an ECU you

536
00:17:52,100 --> 00:17:56,928
might even be able to you know do like a

537
00:17:54,620 --> 00:17:58,459
linear regression and modulo a certain

538
00:17:56,929 --> 00:18:00,500
number and just get the answer back out

539
00:17:58,460 --> 00:18:02,960
so brute force sounds like it's not a

540
00:18:00,500 --> 00:18:04,880
great idea the truth is that you know

541
00:18:02,960 --> 00:18:07,669
the actual crypto that they put in these

542
00:18:04,880 --> 00:18:09,440
ECU's is not really cryptography so

543
00:18:07,669 --> 00:18:13,640
you're you're not in a really bad place

544
00:18:09,440 --> 00:18:14,960
to try that approach okay another thing

545
00:18:13,640 --> 00:18:17,840
that happens is people who make these

546
00:18:14,960 --> 00:18:19,429
ECU's will have the same algorithm but

547
00:18:17,840 --> 00:18:20,750
then when they do different models

548
00:18:19,429 --> 00:18:23,360
they'll change the parameters in the

549
00:18:20,750 --> 00:18:25,309
algorithm so if you know you've run into

550
00:18:23,360 --> 00:18:26,600
the algorithm before you can just go and

551
00:18:25,309 --> 00:18:29,240
kind of solve for unknown parameters

552
00:18:26,600 --> 00:18:31,070
there's a great blog post from ending

553
00:18:29,240 --> 00:18:33,620
Mattos where they did exactly this and

554
00:18:31,070 --> 00:18:35,178
they found they could just take ten ten

555
00:18:33,620 --> 00:18:36,350
C key exchanges so that meant that they

556
00:18:35,179 --> 00:18:39,200
only to take their car to the garage

557
00:18:36,350 --> 00:18:40,850
like ten times capture ten exchanges

558
00:18:39,200 --> 00:18:42,410
from the garage tool and all of a sudden

559
00:18:40,850 --> 00:18:43,428
they knew all the parameters right

560
00:18:42,410 --> 00:18:45,590
remember that's the thing is you can

561
00:18:43,429 --> 00:18:46,970
install your you know can bus sniffer

562
00:18:45,590 --> 00:18:48,949
and then bring your car to the garage

563
00:18:46,970 --> 00:18:50,660
and you will see the C key exchanges

564
00:18:48,950 --> 00:18:53,150
from the tool right so ten is a is a

565
00:18:50,660 --> 00:18:54,640
totally reasonable number for this and

566
00:18:53,150 --> 00:18:57,200
then of course you can glitch past and

567
00:18:54,640 --> 00:18:58,400
if you saw my talk this morning I love

568
00:18:57,200 --> 00:18:59,720
to do glitching and hardware

569
00:18:58,400 --> 00:19:01,340
modifications and stuff so this is like

570
00:18:59,720 --> 00:19:03,080
my favorite thing to drool over but it's

571
00:19:01,340 --> 00:19:07,100
kind of weird right because remember

572
00:19:03,080 --> 00:19:08,928
it's a seed key exchange you have to you

573
00:19:07,100 --> 00:19:10,520
have to like send the response but then

574
00:19:08,929 --> 00:19:12,049
there's all this processing that happens

575
00:19:10,520 --> 00:19:13,850
before you really would know where you

576
00:19:12,049 --> 00:19:15,440
could apply the right that right glitch

577
00:19:13,850 --> 00:19:16,850
when you're trying to do glitching you

578
00:19:15,440 --> 00:19:19,130
really want to have determinism of where

579
00:19:16,850 --> 00:19:20,840
you can put it so trying to glitch from

580
00:19:19,130 --> 00:19:21,919
the context of like I sent the response

581
00:19:20,840 --> 00:19:23,299
and now I have to wait this amount of

582
00:19:21,919 --> 00:19:24,380
time will never work because the jitter

583
00:19:23,299 --> 00:19:26,480
adds up too quickly

584
00:19:24,380 --> 00:19:28,580
the smart thing that riskier did and

585
00:19:26,480 --> 00:19:29,809
they talked about this year instead of

586
00:19:28,580 --> 00:19:32,689
trying to glitch passed the

587
00:19:29,809 --> 00:19:34,220
authorization step in C key exchange go

588
00:19:32,690 --> 00:19:35,780
to one of the really important functions

589
00:19:34,220 --> 00:19:38,840
you want like read memory for instance

590
00:19:35,780 --> 00:19:41,178
and just glitch at the read memory

591
00:19:38,840 --> 00:19:42,530
operation is somewhere in that code the

592
00:19:41,179 --> 00:19:44,330
read memory operation is gonna go and

593
00:19:42,530 --> 00:19:47,210
check a bit that says am i authorized

594
00:19:44,330 --> 00:19:48,439
just glitch the am i authorized check in

595
00:19:47,210 --> 00:19:52,460
the function you're interested in don't

596
00:19:48,440 --> 00:19:55,100
glitch UTS itself right

597
00:19:52,460 --> 00:19:56,630
so in summary UTS is not really locking

598
00:19:55,100 --> 00:19:58,730
down easy to use as securely as maybe

599
00:19:56,630 --> 00:20:00,830
they should be your mileage will vary

600
00:19:58,730 --> 00:20:03,110
there are oems out there that have

601
00:20:00,830 --> 00:20:06,769
much more sophisticated protections

602
00:20:03,110 --> 00:20:08,449
under ECU's than just UDS so be careful

603
00:20:06,769 --> 00:20:09,710
pay attention what you're looking at and

604
00:20:08,450 --> 00:20:12,110
don't then waste your time when you run

605
00:20:09,710 --> 00:20:13,779
into something that's weird and try some

606
00:20:12,110 --> 00:20:17,149
of the cool stuff okay

607
00:20:13,779 --> 00:20:19,309
so we're into the second half and it's

608
00:20:17,149 --> 00:20:21,018
not gonna be as friendly I'm gonna just

609
00:20:19,309 --> 00:20:22,370
dive right into our trade error and

610
00:20:21,019 --> 00:20:26,990
we're gonna look at a lot of disassembly

611
00:20:22,370 --> 00:20:29,029
and stuff so this was at DEFCON before I

612
00:20:26,990 --> 00:20:31,130
made just a tiny couple changes but it's

613
00:20:29,029 --> 00:20:32,809
pretty much the same thing first up is

614
00:20:31,130 --> 00:20:34,519
open XC right so I said I'm gonna

615
00:20:32,809 --> 00:20:37,610
reverse engineer some open XC binaries

616
00:20:34,519 --> 00:20:39,860
what is open XC Ford makes these dongles

617
00:20:37,610 --> 00:20:41,928
they're kind of like we talked about

618
00:20:39,860 --> 00:20:44,000
socket can adapters except that showing

619
00:20:41,929 --> 00:20:46,100
up in Linux as a USB device these things

620
00:20:44,000 --> 00:20:48,350
show up as a Bluetooth device and then

621
00:20:46,100 --> 00:20:51,860
they define a protocol over Bluetooth

622
00:20:48,350 --> 00:20:55,658
using JSON so that you could develop an

623
00:20:51,860 --> 00:20:58,189
app say for your phone that knows very

624
00:20:55,659 --> 00:21:00,049
generic names for certain signals like

625
00:20:58,190 --> 00:21:02,419
tire pressure or velocity or something

626
00:21:00,049 --> 00:21:04,210
like that and then the app could be the

627
00:21:02,419 --> 00:21:07,100
same but you could have different cars

628
00:21:04,210 --> 00:21:08,419
right so I got the same app but totally

629
00:21:07,100 --> 00:21:10,340
different models afford and the app

630
00:21:08,419 --> 00:21:11,600
would still work with all the Ford's so

631
00:21:10,340 --> 00:21:14,299
it means that you know these these

632
00:21:11,600 --> 00:21:16,070
dongles actually know how to decode a

633
00:21:14,299 --> 00:21:18,019
whole group of messages and they know a

634
00:21:16,070 --> 00:21:20,928
mapping from like a very specific car

635
00:21:18,019 --> 00:21:22,549
models thing to a really generic name

636
00:21:20,929 --> 00:21:23,630
like tire pressure which really if

637
00:21:22,549 --> 00:21:26,389
you're trying to figure out what a can

638
00:21:23,630 --> 00:21:28,130
signal is that's the info you want so

639
00:21:26,389 --> 00:21:31,279
it's a hardware platform and a software

640
00:21:28,130 --> 00:21:32,480
SDK it's actively developed they're kind

641
00:21:31,279 --> 00:21:34,779
of cool like I encourage you to check

642
00:21:32,480 --> 00:21:37,519
them out they're a neat little device

643
00:21:34,779 --> 00:21:39,980
right there's a different firmware for

644
00:21:37,519 --> 00:21:41,990
every car right so that's another flag

645
00:21:39,980 --> 00:21:43,940
to us that means that they are actually

646
00:21:41,990 --> 00:21:46,190
encoding in these firmware loads very

647
00:21:43,940 --> 00:21:49,519
specific details about you know the

648
00:21:46,190 --> 00:21:51,260
vehicles that they support and finally

649
00:21:49,519 --> 00:21:52,850
yeah they're communicating this over

650
00:21:51,260 --> 00:21:55,250
JSON so that also means that in that

651
00:21:52,850 --> 00:21:58,010
firmware is a mapping that's like this

652
00:21:55,250 --> 00:21:59,779
particular bit field has this really

653
00:21:58,010 --> 00:22:01,190
descriptive name so all the things we

654
00:21:59,779 --> 00:22:04,840
kind of want for a signal are they're in

655
00:22:01,190 --> 00:22:07,940
the binary right what is raid air - so

656
00:22:04,840 --> 00:22:13,240
show of hands has anyone heard of radar

657
00:22:07,940 --> 00:22:14,960
- here excellent has anyone used radar -

658
00:22:13,240 --> 00:22:18,320
great okay

659
00:22:14,960 --> 00:22:20,180
good awesome so the use Raider - you

660
00:22:18,320 --> 00:22:22,310
know that you know if you open a normal

661
00:22:20,180 --> 00:22:25,520
elf file so here's like I'm showing a

662
00:22:22,310 --> 00:22:27,800
session of me debugging reader - I kind

663
00:22:25,520 --> 00:22:30,139
of wanted to do like the live console

664
00:22:27,800 --> 00:22:31,700
thing but the more people to watch me

665
00:22:30,140 --> 00:22:32,900
type the slower I type so I think the

666
00:22:31,700 --> 00:22:34,520
presentation would probably take like

667
00:22:32,900 --> 00:22:36,010
two days with all these people watching

668
00:22:34,520 --> 00:22:39,889
me time so I had like this fake

669
00:22:36,010 --> 00:22:41,720
PowerPoint me typing thing so I opened

670
00:22:39,890 --> 00:22:43,640
up this binary it turns out to just be

671
00:22:41,720 --> 00:22:46,880
one of the ones from the binary samples

672
00:22:43,640 --> 00:22:49,520
repo in github it's you know just LS and

673
00:22:46,880 --> 00:22:52,610
I do AAA and AAA is the radar command

674
00:22:49,520 --> 00:22:54,260
for analyze mostly everything just the

675
00:22:52,610 --> 00:22:56,510
basic stuff and then all of a sudden it

676
00:22:54,260 --> 00:22:58,310
says made these flags okay remember that

677
00:22:56,510 --> 00:23:00,740
so I did an analysis and all of a sudden

678
00:22:58,310 --> 00:23:01,280
it created Flags not the flags that we

679
00:23:00,740 --> 00:23:04,490
love

680
00:23:01,280 --> 00:23:07,850
CTF players great err flags okay and

681
00:23:04,490 --> 00:23:10,070
then I'm s main so that's me seeking to

682
00:23:07,850 --> 00:23:11,480
a function called main and now after I

683
00:23:10,070 --> 00:23:13,310
do that you can see that my address

684
00:23:11,480 --> 00:23:15,470
change see the red thing there the red

685
00:23:13,310 --> 00:23:18,260
prompt it's kind of like you know your

686
00:23:15,470 --> 00:23:19,460
ps1 output of the console it tells you

687
00:23:18,260 --> 00:23:20,990
what address you're out of the binary

688
00:23:19,460 --> 00:23:23,270
because everything you do is contextual

689
00:23:20,990 --> 00:23:24,350
you have a cursor and the red thing is

690
00:23:23,270 --> 00:23:27,580
telling you where your cursor is and

691
00:23:24,350 --> 00:23:32,300
then I aspirate air okay ax so show me

692
00:23:27,580 --> 00:23:35,629
cross-references tilde main but grep the

693
00:23:32,300 --> 00:23:37,610
output of ax for main so the Tildy

694
00:23:35,630 --> 00:23:39,560
that's the grep operator right so i'm

695
00:23:37,610 --> 00:23:41,659
grepping the output of a command ax for

696
00:23:39,560 --> 00:23:43,310
the string main and then i really just

697
00:23:41,660 --> 00:23:45,710
want to look at the top and rate air

698
00:23:43,310 --> 00:23:46,909
does have a way to just do head but I'm

699
00:23:45,710 --> 00:23:48,830
showing you also that you can just use

700
00:23:46,910 --> 00:23:50,780
pipes if I put a pipe in the rate air

701
00:23:48,830 --> 00:23:53,360
command it will do like the shell thing

702
00:23:50,780 --> 00:23:54,889
and spawn out to an executable and pipe

703
00:23:53,360 --> 00:23:56,629
it through a pipe so it did the normal

704
00:23:54,890 --> 00:23:59,660
thing right and what I'm looking at here

705
00:23:56,630 --> 00:24:02,540
that first four cross references from

706
00:23:59,660 --> 00:24:04,070
the binary to the function main any code

707
00:24:02,540 --> 00:24:05,870
and the function main so this is like

708
00:24:04,070 --> 00:24:07,220
this is like you know the the bread and

709
00:24:05,870 --> 00:24:08,600
butter of Ida it's hitting the X button

710
00:24:07,220 --> 00:24:10,010
like show me those xrefs that's all I

711
00:24:08,600 --> 00:24:12,490
really care about I just did that here

712
00:24:10,010 --> 00:24:14,840
okay and then Q I'm out

713
00:24:12,490 --> 00:24:17,630
so really the point of this talk is that

714
00:24:14,840 --> 00:24:20,300
when you open up a flat binary file and

715
00:24:17,630 --> 00:24:22,490
what I'm looking at here now is Ford's

716
00:24:20,300 --> 00:24:24,620
open source firmware for the open XC

717
00:24:22,490 --> 00:24:26,330
it's it's an armed binary file we're

718
00:24:24,620 --> 00:24:27,620
going to talk about this at length but I

719
00:24:26,330 --> 00:24:28,899
gonna try to analyze it right and it

720
00:24:27,620 --> 00:24:31,399
says it made some flag

721
00:24:28,899 --> 00:24:33,559
but it really didn't you know I can't

722
00:24:31,399 --> 00:24:35,149
seek domain this is a flat binary file

723
00:24:33,559 --> 00:24:38,450
it doesn't know main there's no symbol

724
00:24:35,149 --> 00:24:39,918
information here so really you know when

725
00:24:38,450 --> 00:24:42,320
you're using rate air to reverse

726
00:24:39,919 --> 00:24:43,970
engineer like a flat binary file the

727
00:24:42,320 --> 00:24:45,799
best you can get is clippies help this

728
00:24:43,970 --> 00:24:47,090
is a fun Easter Egg you can do request

729
00:24:45,799 --> 00:24:49,158
from our capital e and it'll show you

730
00:24:47,090 --> 00:24:51,559
clip e in case you feel lonely while

731
00:24:49,159 --> 00:24:51,999
you're reversing ya might come in handy

732
00:24:51,559 --> 00:24:54,350
someday

733
00:24:51,999 --> 00:24:56,840
raid air also does some really gorgeous

734
00:24:54,350 --> 00:24:58,340
stuff like when it's doing disassembly

735
00:24:56,840 --> 00:25:00,350
of stuff that knows about it can show

736
00:24:58,340 --> 00:25:02,658
you the control flow graphs in your

737
00:25:00,350 --> 00:25:04,009
terminal which I love because it's copy

738
00:25:02,659 --> 00:25:06,049
and paste able and you can actually

739
00:25:04,009 --> 00:25:07,609
change the sizes and it's using n curses

740
00:25:06,049 --> 00:25:09,289
so when you change the size it changes

741
00:25:07,609 --> 00:25:11,658
how big the things are and you can zoom

742
00:25:09,289 --> 00:25:14,049
out so you know the control flow graph

743
00:25:11,659 --> 00:25:15,590
view and rate air is really great to use

744
00:25:14,049 --> 00:25:17,389
unfortunately I'm not gonna talk about

745
00:25:15,590 --> 00:25:18,408
the control flow graph graph you but if

746
00:25:17,389 --> 00:25:20,269
you want to use right there this is a

747
00:25:18,409 --> 00:25:22,820
good reason to do what I am going to

748
00:25:20,269 --> 00:25:24,049
talk about are all these commands so

749
00:25:22,820 --> 00:25:26,149
I've gone through the presentation I

750
00:25:24,049 --> 00:25:28,190
kind of like extracted all the commands

751
00:25:26,149 --> 00:25:29,869
I use and I'm just gonna go over briefly

752
00:25:28,190 --> 00:25:31,730
because really these slides are

753
00:25:29,869 --> 00:25:33,109
available later and so is the recording

754
00:25:31,730 --> 00:25:35,179
and you can totally go and check this in

755
00:25:33,109 --> 00:25:37,428
detail but some of the important things

756
00:25:35,179 --> 00:25:38,600
to take away from this slide is that all

757
00:25:37,429 --> 00:25:40,999
these commands are grouped

758
00:25:38,600 --> 00:25:44,178
hierarchically right like the first

759
00:25:40,999 --> 00:25:46,159
letter in the command is a category and

760
00:25:44,179 --> 00:25:48,549
then the second letter is usually like a

761
00:25:46,159 --> 00:25:50,509
specific invocation of that category

762
00:25:48,549 --> 00:25:52,070
sometimes it gets deeper than that and

763
00:25:50,509 --> 00:25:54,679
the actual command is like you know four

764
00:25:52,070 --> 00:25:56,299
down and it varies because Rader is

765
00:25:54,679 --> 00:25:58,820
complicated but there is category so a

766
00:25:56,299 --> 00:26:01,730
is obviously like analysis right the

767
00:25:58,820 --> 00:26:03,859
peas or for printing things the T's are

768
00:26:01,730 --> 00:26:06,559
for your type information the question

769
00:26:03,859 --> 00:26:09,649
mark is like you know inspection like

770
00:26:06,559 --> 00:26:13,700
give me information back we have I for

771
00:26:09,649 --> 00:26:15,768
information about binary x' CR comments

772
00:26:13,700 --> 00:26:17,299
there's the Tildy thing for grepping and

773
00:26:15,769 --> 00:26:19,039
i'm gonna show this slide again right at

774
00:26:17,299 --> 00:26:20,720
the end so that like maybe the one that

775
00:26:19,039 --> 00:26:21,889
you saw that you want to know about it's

776
00:26:20,720 --> 00:26:26,570
gonna be right at the end of the talk as

777
00:26:21,889 --> 00:26:28,248
well ok so funny picture break you guys

778
00:26:26,570 --> 00:26:30,519
have been a great audience this is going

779
00:26:28,249 --> 00:26:32,749
slow I know that and it's not gonna stop

780
00:26:30,519 --> 00:26:33,859
getting technical so what I'm gonna do

781
00:26:32,749 --> 00:26:36,049
for you is I'm gonna give you three

782
00:26:33,859 --> 00:26:39,168
funny picture breaks in the middle of

783
00:26:36,049 --> 00:26:42,410
all this disassembly ok all right so

784
00:26:39,169 --> 00:26:46,100
remember open XC

785
00:26:42,410 --> 00:26:48,730
is taking like Jason definitions of what

786
00:26:46,100 --> 00:26:51,500
a signal is like tire pressure and

787
00:26:48,730 --> 00:26:53,900
encoding that into some kind of a binary

788
00:26:51,500 --> 00:26:56,120
structure that's in those flat binary

789
00:26:53,900 --> 00:26:57,230
files what we want to do is like reverse

790
00:26:56,120 --> 00:26:59,600
this arrow because if we can reverse

791
00:26:57,230 --> 00:27:02,300
that arrow then you know we can drive

792
00:26:59,600 --> 00:27:03,740
our own custom cluster or maybe like you

793
00:27:02,300 --> 00:27:06,139
could make one of those cool oil

794
00:27:03,740 --> 00:27:08,420
temperature gauges or turbo gauges that

795
00:27:06,140 --> 00:27:10,130
you know you pay like an extra 20 grand

796
00:27:08,420 --> 00:27:13,850
for an ST or something like that just

797
00:27:10,130 --> 00:27:16,310
make your own right okay I didn't do

798
00:27:13,850 --> 00:27:18,889
this by myself you know there's a whole

799
00:27:16,310 --> 00:27:20,659
bunch of prior art that that went into

800
00:27:18,890 --> 00:27:21,920
this kind of work standing on the

801
00:27:20,660 --> 00:27:22,970
shoulders of giants and all that so I

802
00:27:21,920 --> 00:27:26,240
want to mention some people this guy

803
00:27:22,970 --> 00:27:28,160
bsmt he did some reversing of open XC

804
00:27:26,240 --> 00:27:29,420
that's totally relevant if you're

805
00:27:28,160 --> 00:27:31,910
talking about just doing firmware

806
00:27:29,420 --> 00:27:33,770
reversing you know Craig Hefner has

807
00:27:31,910 --> 00:27:35,360
taught me a lot of stuff and his blog is

808
00:27:33,770 --> 00:27:37,580
amazing if you want to learn about

809
00:27:35,360 --> 00:27:39,320
reversing firmware and of course raid

810
00:27:37,580 --> 00:27:41,360
air I didn't write radar I can't take

811
00:27:39,320 --> 00:27:43,070
any real credit for that the guy who did

812
00:27:41,360 --> 00:27:44,830
has given a talk on reversing binary

813
00:27:43,070 --> 00:27:48,169
firmwares that I recommend you watch

814
00:27:44,830 --> 00:27:50,750
because he's brilliant okay so our plan

815
00:27:48,170 --> 00:27:52,310
again if you're gonna like reverse an

816
00:27:50,750 --> 00:27:53,210
arbitrary firm or someone gave you to

817
00:27:52,310 --> 00:27:54,379
get some information other but you're

818
00:27:53,210 --> 00:27:57,080
gonna have to sort of go through these

819
00:27:54,380 --> 00:27:58,490
steps and I'm marking in blue the stuff

820
00:27:57,080 --> 00:27:59,990
that you know we're not gonna do in this

821
00:27:58,490 --> 00:28:01,790
talk because in the talk be too long and

822
00:27:59,990 --> 00:28:03,920
also the stuff that's in blue is like

823
00:28:01,790 --> 00:28:06,350
from a different talk so you can go back

824
00:28:03,920 --> 00:28:07,610
to that prior art and bsmt blog but I'm

825
00:28:06,350 --> 00:28:08,899
gonna talk about the stuff in yellow so

826
00:28:07,610 --> 00:28:10,280
you're gonna like get that firm where

827
00:28:08,900 --> 00:28:11,690
you're gonna figure out what

828
00:28:10,280 --> 00:28:13,190
architecture is you want to figure out

829
00:28:11,690 --> 00:28:15,440
where it's loaded like what's that

830
00:28:13,190 --> 00:28:17,390
offset you know and then actually get

831
00:28:15,440 --> 00:28:19,010
that on the right offset you want to go

832
00:28:17,390 --> 00:28:21,200
and find loader loops like if you've

833
00:28:19,010 --> 00:28:23,000
done any C programming or the CRT common

834
00:28:21,200 --> 00:28:24,860
the C runtime it goes and finds that

835
00:28:23,000 --> 00:28:27,410
data segment and copies their RAM for

836
00:28:24,860 --> 00:28:28,850
you and you want to actually emulate

837
00:28:27,410 --> 00:28:30,140
that because if you don't put your data

838
00:28:28,850 --> 00:28:31,909
stuff in the right location you don't

839
00:28:30,140 --> 00:28:34,460
get xrefs if you don't get xrefs you

840
00:28:31,910 --> 00:28:35,810
will not be happy and then finally

841
00:28:34,460 --> 00:28:37,400
because we're trying to figure out what

842
00:28:35,810 --> 00:28:38,929
these can signal definitions are from

843
00:28:37,400 --> 00:28:40,610
the Jason we want to pretty print these

844
00:28:38,930 --> 00:28:42,050
structures because we're humans and we

845
00:28:40,610 --> 00:28:46,310
want to look at like human readable

846
00:28:42,050 --> 00:28:48,350
things it stands to reason okay first up

847
00:28:46,310 --> 00:28:50,090
how do you just take a binary file and

848
00:28:48,350 --> 00:28:51,439
just load it in an address so that's

849
00:28:50,090 --> 00:28:54,350
actually pretty straightforward with a

850
00:28:51,440 --> 00:28:55,740
radar command there's a dash M that will

851
00:28:54,350 --> 00:28:58,080
change the load address so here

852
00:28:55,740 --> 00:28:59,610
an invocation I know it's armed because

853
00:28:58,080 --> 00:29:01,649
we already figured that out I know that

854
00:28:59,610 --> 00:29:03,899
it's thumb mode that's what b16 means

855
00:29:01,650 --> 00:29:05,220
and I know where the offset is because

856
00:29:03,900 --> 00:29:06,809
you know we read the datasheet we did

857
00:29:05,220 --> 00:29:08,850
the right homework and now we fitted it

858
00:29:06,809 --> 00:29:11,610
up so you can totally just load your

859
00:29:08,850 --> 00:29:13,080
binary in like that and you're done you

860
00:29:11,610 --> 00:29:15,030
don't necessarily want to do this

861
00:29:13,080 --> 00:29:16,470
iteratively the reason being that like

862
00:29:15,030 --> 00:29:17,820
as you're trying to explore this binary

863
00:29:16,470 --> 00:29:20,070
you're gonna find that you need to make

864
00:29:17,820 --> 00:29:22,800
little tweaks like I knew all this

865
00:29:20,070 --> 00:29:25,110
invocation from like you know hard work

866
00:29:22,800 --> 00:29:26,280
where I kind of learn the mistakes but

867
00:29:25,110 --> 00:29:28,320
when you do this with a brand new binary

868
00:29:26,280 --> 00:29:29,940
you're not gonna know right away so what

869
00:29:28,320 --> 00:29:32,220
I recommend you do is make like a dot or

870
00:29:29,940 --> 00:29:33,600
two file make a file that's like saving

871
00:29:32,220 --> 00:29:35,040
the session setup for how are you gonna

872
00:29:33,600 --> 00:29:36,928
do reverse engineering so what I did is

873
00:29:35,040 --> 00:29:39,659
I translated that command-line

874
00:29:36,929 --> 00:29:42,120
indication into some key commands all

875
00:29:39,660 --> 00:29:44,309
right the e command and radar is all

876
00:29:42,120 --> 00:29:45,840
about setting configuration values so

877
00:29:44,309 --> 00:29:47,730
I'm setting up read air with all the

878
00:29:45,840 --> 00:29:49,949
right config values it's armed the

879
00:29:47,730 --> 00:29:52,710
processor type is cortex 16-bit in

880
00:29:49,950 --> 00:29:54,690
radars context means thumb even though

881
00:29:52,710 --> 00:29:57,240
you know we all know thumb and 16-bit

882
00:29:54,690 --> 00:29:58,830
are exactly the same thing we're setting

883
00:29:57,240 --> 00:30:01,530
up the binary address and the flash

884
00:29:58,830 --> 00:30:03,540
address giving it the file at the bottom

885
00:30:01,530 --> 00:30:05,280
I have like Oh N and this is where I'm

886
00:30:03,540 --> 00:30:06,420
actually opening a specific file and

887
00:30:05,280 --> 00:30:08,010
with raid air you can open multiple

888
00:30:06,420 --> 00:30:09,750
files so like if you have this weird

889
00:30:08,010 --> 00:30:11,580
firmware that came in like multiple

890
00:30:09,750 --> 00:30:13,559
segments you could have one of these

891
00:30:11,580 --> 00:30:15,030
config files and save the multiple

892
00:30:13,559 --> 00:30:16,320
segment files as individual files we

893
00:30:15,030 --> 00:30:18,178
don't have to use DD to put them

894
00:30:16,320 --> 00:30:19,590
together a weird way you could just put

895
00:30:18,179 --> 00:30:21,660
them in the virtual address space using

896
00:30:19,590 --> 00:30:23,879
this config file right you set up VA

897
00:30:21,660 --> 00:30:25,020
Iove is all about virtual addressing

898
00:30:23,880 --> 00:30:26,700
you're gonna want that because remember

899
00:30:25,020 --> 00:30:29,879
we're doing weird segmentation with the

900
00:30:26,700 --> 00:30:31,140
files and then asses for a section so

901
00:30:29,880 --> 00:30:32,640
finally we're just telling right there

902
00:30:31,140 --> 00:30:36,150
you know this part of memory has

903
00:30:32,640 --> 00:30:41,370
executable bits and it's this big and

904
00:30:36,150 --> 00:30:43,440
let's go ok so you can see that now

905
00:30:41,370 --> 00:30:45,840
we're gonna like evolve this dot r2 I

906
00:30:43,440 --> 00:30:47,429
went from stage 1 r2 9 to stage 2 and

907
00:30:45,840 --> 00:30:49,770
I'm gonna use stage 3 as we go on you'll

908
00:30:47,429 --> 00:30:52,260
see it evolved also from previous work

909
00:30:49,770 --> 00:30:53,850
we know like the loader loops this is

910
00:30:52,260 --> 00:30:55,860
kind of like the C runtime stuff I know

911
00:30:53,850 --> 00:30:58,500
that it goes into that flat file in

912
00:30:55,860 --> 00:31:00,479
flash and copies it from this yellow

913
00:30:58,500 --> 00:31:02,940
address to this blue address and I also

914
00:31:00,480 --> 00:31:05,700
know the length of it is orange so I'm

915
00:31:02,940 --> 00:31:07,710
gonna put more stuff into our config

916
00:31:05,700 --> 00:31:08,380
file oh of course

917
00:31:07,710 --> 00:31:12,850
and you see

918
00:31:08,380 --> 00:31:15,630
yeah bummer it's okay it's in my reasons

919
00:31:12,850 --> 00:31:15,629
I'm sure we'll be fine

920
00:31:21,240 --> 00:31:27,580
yeah

921
00:31:23,200 --> 00:31:29,080
one second blues I think this happened

922
00:31:27,580 --> 00:31:30,790
before and I had to actually skip the

923
00:31:29,080 --> 00:31:32,830
slide because it kept crashing again on

924
00:31:30,790 --> 00:31:33,940
the same slide so this time I'm gonna be

925
00:31:32,830 --> 00:31:38,139
smart I'm not gonna make that mistake

926
00:31:33,940 --> 00:31:39,610
maybe we'll find out right so I'm

927
00:31:38,140 --> 00:31:41,950
looking at a little icon you can't see

928
00:31:39,610 --> 00:31:44,020
the icon but I just want to say what we

929
00:31:41,950 --> 00:31:46,330
did was augmented age to our to our

930
00:31:44,020 --> 00:31:48,610
little r2 session file with the

931
00:31:46,330 --> 00:31:50,740
information that's copying that file

932
00:31:48,610 --> 00:31:52,330
we're remapping the same file into a new

933
00:31:50,740 --> 00:31:53,920
location so you're like emulating the

934
00:31:52,330 --> 00:31:55,810
loader liberate the loader loop copies

935
00:31:53,920 --> 00:31:57,160
the data to new location you just turn

936
00:31:55,810 --> 00:31:59,139
it into a raid air command that's like

937
00:31:57,160 --> 00:32:01,960
open the file and put it at this address

938
00:31:59,140 --> 00:32:03,670
from a certain segment that way now when

939
00:32:01,960 --> 00:32:05,950
you're done it's almost like you're

940
00:32:03,670 --> 00:32:07,690
analyzing the state of memory after the

941
00:32:05,950 --> 00:32:09,520
loader loop is executed and that way you

942
00:32:07,690 --> 00:32:11,260
get your cross references okay so I'm

943
00:32:09,520 --> 00:32:15,670
gonna skip that slide we're gonna go to

944
00:32:11,260 --> 00:32:18,640
one that won't crash hopefully okay so

945
00:32:15,670 --> 00:32:20,410
now what we have is the binary is loaded

946
00:32:18,640 --> 00:32:22,300
into the right base offset we have our

947
00:32:20,410 --> 00:32:25,090
little piece of the data segment now up

948
00:32:22,300 --> 00:32:26,260
in RAM and so ideally because this is

949
00:32:25,090 --> 00:32:27,699
what we love in reverse engineering we

950
00:32:26,260 --> 00:32:29,530
want our cross graphs right I want to be

951
00:32:27,700 --> 00:32:30,730
able to look at a value somewhere in RAM

952
00:32:29,530 --> 00:32:31,930
and see who's referencing it because

953
00:32:30,730 --> 00:32:34,330
otherwise how am I gonna figure out

954
00:32:31,930 --> 00:32:36,040
where the relationships are so let's

955
00:32:34,330 --> 00:32:37,629
look like kind of inspect what's going

956
00:32:36,040 --> 00:32:40,480
on in this current state so I've invoked

957
00:32:37,630 --> 00:32:42,340
right there with - I and that like runs

958
00:32:40,480 --> 00:32:43,540
that session file that's it everything I

959
00:32:42,340 --> 00:32:44,919
did up there is now safe so you can

960
00:32:43,540 --> 00:32:46,420
imagine you know as you're exploring

961
00:32:44,920 --> 00:32:48,550
this binary file you could just

962
00:32:46,420 --> 00:32:50,890
iteratively be running rate air with - I

963
00:32:48,550 --> 00:32:52,320
tweaked the file rerun it and that way

964
00:32:50,890 --> 00:32:54,880
you know you're not gonna lose your work

965
00:32:52,320 --> 00:32:56,710
we know where the signals start from

966
00:32:54,880 --> 00:32:58,420
previous research so let's just put that

967
00:32:56,710 --> 00:33:01,300
in I'm using the F command this is flags

968
00:32:58,420 --> 00:33:03,760
so remember these aren't CTF flags right

969
00:33:01,300 --> 00:33:05,710
air thinks that flags are the namespace

970
00:33:03,760 --> 00:33:07,030
that's just what it calls them and it

971
00:33:05,710 --> 00:33:10,510
does this interesting thing where it

972
00:33:07,030 --> 00:33:12,879
puts like hierarchical names so strings

973
00:33:10,510 --> 00:33:15,310
are like STR dot something and symbols

974
00:33:12,880 --> 00:33:16,960
are sym dot something but everything is

975
00:33:15,310 --> 00:33:18,970
a flag and all I'm doing here is just

976
00:33:16,960 --> 00:33:21,550
making a flag called can signal start

977
00:33:18,970 --> 00:33:24,010
and then the S is I'm changing my cursor

978
00:33:21,550 --> 00:33:25,690
location to the can signal start okay so

979
00:33:24,010 --> 00:33:28,540
remember the can signal structure is

980
00:33:25,690 --> 00:33:30,280
like this it is first a pointer to

981
00:33:28,540 --> 00:33:32,500
another structure and then a pointer to

982
00:33:30,280 --> 00:33:34,270
a string so I know I'm right one of

983
00:33:32,500 --> 00:33:36,940
these device at one of these instances

984
00:33:34,270 --> 00:33:38,379
of this structure so let's like look at

985
00:33:36,940 --> 00:33:40,480
you know memory let's like look at the

986
00:33:38,380 --> 00:33:41,980
hex values there but I know these are

987
00:33:40,480 --> 00:33:43,660
pointers so I don't want to look at like

988
00:33:41,980 --> 00:33:45,340
the normal byte wise hex nut I want to

989
00:33:43,660 --> 00:33:48,250
look at the word wise hex tub so it just

990
00:33:45,340 --> 00:33:51,610
looks like a pointer to me so I did pxw

991
00:33:48,250 --> 00:33:53,230
print hexadecimal words and I want to

992
00:33:51,610 --> 00:33:55,120
print eight bytes so that's what that px

993
00:33:53,230 --> 00:33:56,680
w8 means and you know we know it's

994
00:33:55,120 --> 00:33:59,439
32-bit so we know we looked at two

995
00:33:56,680 --> 00:34:01,660
pointers so I look at these things and

996
00:33:59,440 --> 00:34:04,060
you know one of them looks like it's up

997
00:34:01,660 --> 00:34:08,168
in RAM and the other one looks like it's

998
00:34:04,060 --> 00:34:11,290
down in the flash kind of interesting so

999
00:34:08,168 --> 00:34:14,350
let's do a normal hexadecimal print of

1000
00:34:11,290 --> 00:34:15,820
16 bytes just one line of a hex dump at

1001
00:34:14,350 --> 00:34:16,929
the first address because remember we're

1002
00:34:15,820 --> 00:34:18,159
think we think we're looking at a

1003
00:34:16,929 --> 00:34:20,290
structure that first has a pointer to

1004
00:34:18,159 --> 00:34:21,820
another structure so yeah I mean that

1005
00:34:20,290 --> 00:34:24,040
kind of looks like structured data if

1006
00:34:21,820 --> 00:34:25,240
you knew a little bit about the vehicle

1007
00:34:24,040 --> 00:34:26,679
bus you might even be like oh I think

1008
00:34:25,239 --> 00:34:28,270
that's probably the arbitration ID I'm

1009
00:34:26,679 --> 00:34:30,700
looking for you know we're doing the

1010
00:34:28,270 --> 00:34:32,409
right direction let's look at the other

1011
00:34:30,699 --> 00:34:36,100
pointer see I just changed the value

1012
00:34:32,409 --> 00:34:37,810
after the act so that at command is all

1013
00:34:36,100 --> 00:34:39,730
about changing the temporary value of

1014
00:34:37,810 --> 00:34:40,929
the pull of the cursor just for that one

1015
00:34:39,730 --> 00:34:43,600
command so you can have like jump around

1016
00:34:40,929 --> 00:34:45,250
temporarily as you execute and then you

1017
00:34:43,600 --> 00:34:46,569
can see here that in fact there are

1018
00:34:45,250 --> 00:34:50,320
strings there right so we're pointing at

1019
00:34:46,570 --> 00:34:52,030
a string which is great except if we try

1020
00:34:50,320 --> 00:34:53,770
to look at the cross rafts remember a

1021
00:34:52,030 --> 00:34:56,110
X's is analyze cross crafts

1022
00:34:53,770 --> 00:34:57,580
Tildy means on grepping for something so

1023
00:34:56,110 --> 00:35:01,270
I'm like grepping for the particular

1024
00:34:57,580 --> 00:35:02,529
string I don't see any cross reps right

1025
00:35:01,270 --> 00:35:04,030
and that's a problem because if I don't

1026
00:35:02,530 --> 00:35:06,340
see the xrefs then I can't make that

1027
00:35:04,030 --> 00:35:09,130
association between like where is that

1028
00:35:06,340 --> 00:35:10,900
bit field encoding a that's mapping to

1029
00:35:09,130 --> 00:35:12,370
the thing called signal one I want to

1030
00:35:10,900 --> 00:35:13,810
know that mapping so that I can tell

1031
00:35:12,370 --> 00:35:16,509
where the tire pressure is for example

1032
00:35:13,810 --> 00:35:20,049
okay and then there's another problem at

1033
00:35:16,510 --> 00:35:24,430
this particular location in memory if I

1034
00:35:20,050 --> 00:35:26,620
just print 8 bytes it shows up as a

1035
00:35:24,430 --> 00:35:28,330
disassembly right and if you use radar

1036
00:35:26,620 --> 00:35:30,430
sort of hughes Ida Pro you recognize

1037
00:35:28,330 --> 00:35:32,799
this as like marking things as data or

1038
00:35:30,430 --> 00:35:34,450
marking things as code right ray ter

1039
00:35:32,800 --> 00:35:37,030
thinks that this particular location in

1040
00:35:34,450 --> 00:35:38,589
memory is code but we know we're sitting

1041
00:35:37,030 --> 00:35:40,540
at the beginning of can signal start

1042
00:35:38,590 --> 00:35:42,460
which we know is a structure so like we

1043
00:35:40,540 --> 00:35:43,960
haven't set up the right details for

1044
00:35:42,460 --> 00:35:45,310
analysis to work here because if Raider

1045
00:35:43,960 --> 00:35:47,440
thinks this is code and it does auto

1046
00:35:45,310 --> 00:35:48,970
analysis it's gonna like pretend that

1047
00:35:47,440 --> 00:35:50,299
I'm doing jumps into things I'm not

1048
00:35:48,970 --> 00:35:52,308
doing jumps with and all my extras

1049
00:35:50,299 --> 00:35:55,640
make sense either so we're not quite

1050
00:35:52,309 --> 00:35:57,019
there there is a really useful command

1051
00:35:55,640 --> 00:35:58,848
it's called it's like I like to call it

1052
00:35:57,019 --> 00:36:01,549
the telescoping command if anyone's used

1053
00:35:58,849 --> 00:36:03,799
like gef or home bug or any of those

1054
00:36:01,549 --> 00:36:05,689
cool debuggers it takes like a value and

1055
00:36:03,799 --> 00:36:07,279
it just treats it as a pointer and then

1056
00:36:05,689 --> 00:36:08,839
just keeps dereferencing the pointer it

1057
00:36:07,279 --> 00:36:10,249
until it can't dereference anymore so

1058
00:36:08,839 --> 00:36:11,689
you can like find linked lists you can

1059
00:36:10,249 --> 00:36:13,939
find pointers to strings and all that

1060
00:36:11,689 --> 00:36:16,939
kind of stuff so pxr right here you can

1061
00:36:13,939 --> 00:36:18,890
see I'm just doing the 8 again but it

1062
00:36:16,939 --> 00:36:20,269
shows me in what segments it's at it's

1063
00:36:18,890 --> 00:36:21,828
like yep that's a can signal I know what

1064
00:36:20,269 --> 00:36:23,419
that is because you told me that flag

1065
00:36:21,829 --> 00:36:25,609
and it's in the data segment and these

1066
00:36:23,420 --> 00:36:27,319
are the permissions and that value

1067
00:36:25,609 --> 00:36:29,900
points to another value and that's also

1068
00:36:27,319 --> 00:36:31,699
in data and so you know we could just go

1069
00:36:29,900 --> 00:36:32,749
on with our life using px R and if you

1070
00:36:31,699 --> 00:36:34,459
don't want to go through the trouble of

1071
00:36:32,749 --> 00:36:36,499
setting up xrefs px are super powerful

1072
00:36:34,459 --> 00:36:37,999
but what we really want to do is have

1073
00:36:36,499 --> 00:36:39,109
like a pretty printed data structure at

1074
00:36:37,999 --> 00:36:40,999
the end because we're trying to learn

1075
00:36:39,109 --> 00:36:44,900
you know how all these commands fit

1076
00:36:40,999 --> 00:36:46,729
together to win right okay so the final

1077
00:36:44,900 --> 00:36:49,459
problem is strings so there's an eye

1078
00:36:46,729 --> 00:36:50,779
command for information one of the

1079
00:36:49,459 --> 00:36:53,569
things I like to do if I don't remember

1080
00:36:50,779 --> 00:36:56,359
a command is this I will put the command

1081
00:36:53,569 --> 00:36:57,619
category then the question mark and then

1082
00:36:56,359 --> 00:36:58,880
I'll grep for something so I want I

1083
00:36:57,619 --> 00:37:01,429
could remember what strings was so I

1084
00:36:58,880 --> 00:37:02,839
said ok information question mark is

1085
00:37:01,429 --> 00:37:04,999
like the help for that and then I want

1086
00:37:02,839 --> 00:37:06,349
to grep the output of the help for the

1087
00:37:04,999 --> 00:37:07,609
word string and now all of a sudden I

1088
00:37:06,349 --> 00:37:09,499
remember that you know the string

1089
00:37:07,609 --> 00:37:11,660
command is eyes it or eyes a J or I said

1090
00:37:09,499 --> 00:37:13,009
Zed or I said Zed Zed Zed and that's a

1091
00:37:11,660 --> 00:37:14,149
common pattern to where you just repeat

1092
00:37:13,009 --> 00:37:17,449
a letter and it gets like kind of more

1093
00:37:14,150 --> 00:37:19,579
detailed and of course I run eyes ed on

1094
00:37:17,449 --> 00:37:22,459
the binary because I want to see signal

1095
00:37:19,579 --> 00:37:23,749
1 and signal 2 because we saw them next

1096
00:37:22,459 --> 00:37:25,819
up we know the strings are there so

1097
00:37:23,749 --> 00:37:27,859
great air should know about them but it

1098
00:37:25,819 --> 00:37:30,229
doesn't eyes ed tells me nothing

1099
00:37:27,859 --> 00:37:32,029
I said Zed is a variant that just looks

1100
00:37:30,229 --> 00:37:33,919
in the entire file and yeah they're

1101
00:37:32,029 --> 00:37:35,539
there you know I said Zed like that's

1102
00:37:33,920 --> 00:37:37,279
kind of like what strings would give you

1103
00:37:35,539 --> 00:37:39,380
if I ran strings on the da bin file it's

1104
00:37:37,279 --> 00:37:40,670
the same kind of thing but you can tell

1105
00:37:39,380 --> 00:37:43,009
from the offsets they're not in the

1106
00:37:40,670 --> 00:37:44,630
right place right we were dealing with

1107
00:37:43,009 --> 00:37:47,329
we were dealing with things that were

1108
00:37:44,630 --> 00:37:50,509
like 10,000 hex offset and they're not

1109
00:37:47,329 --> 00:37:51,920
there so these are the file offsets what

1110
00:37:50,509 --> 00:37:53,390
we really want is to have the strings in

1111
00:37:51,920 --> 00:37:55,309
the right locations that when the code

1112
00:37:53,390 --> 00:37:57,618
references then we got our xrefs so we

1113
00:37:55,309 --> 00:38:00,199
have some work to do one of the easy

1114
00:37:57,619 --> 00:38:01,999
ways to do this is in Python so raid err

1115
00:38:00,199 --> 00:38:03,920
when the command line isn't good enough

1116
00:38:01,999 --> 00:38:06,049
for you can be scripted through

1117
00:38:03,920 --> 00:38:08,990
than called our two pipes so here's like

1118
00:38:06,049 --> 00:38:11,270
a really simple I promise it's pretty

1119
00:38:08,990 --> 00:38:13,729
simple a Python script where I'm using

1120
00:38:11,270 --> 00:38:15,470
the output of I Zed Zed and then I'm

1121
00:38:13,730 --> 00:38:17,569
just iterating over the output of I said

1122
00:38:15,470 --> 00:38:19,520
and running a couple other rate air

1123
00:38:17,569 --> 00:38:21,680
commands just to make new flags and

1124
00:38:19,520 --> 00:38:23,690
remember flags are like names for things

1125
00:38:21,680 --> 00:38:25,308
so I'm like creating the strings and I'm

1126
00:38:23,690 --> 00:38:27,200
adjusting their location in memory by

1127
00:38:25,309 --> 00:38:28,660
you know the the hex 10,000 offsets that

1128
00:38:27,200 --> 00:38:32,029
they're in the right spot

1129
00:38:28,660 --> 00:38:34,009
so I run that to now if you've ever done

1130
00:38:32,030 --> 00:38:35,569
any firm reversing or followed like

1131
00:38:34,010 --> 00:38:37,549
Craig Hefner's blog one of the things he

1132
00:38:35,569 --> 00:38:40,250
does with flat binary files is he kind

1133
00:38:37,549 --> 00:38:42,859
of grooms them so that all the data is

1134
00:38:40,250 --> 00:38:44,089
just 32 bits excuse me and all the

1135
00:38:42,859 --> 00:38:46,640
things that are code sections are all

1136
00:38:44,089 --> 00:38:47,720
marked as code the really big benefit of

1137
00:38:46,640 --> 00:38:49,700
doing this with any kind of an arm

1138
00:38:47,720 --> 00:38:51,500
binary is you know if you have something

1139
00:38:49,700 --> 00:38:53,118
in memory that's a pointer it's almost

1140
00:38:51,500 --> 00:38:54,710
always gonna be 32 aligned so just

1141
00:38:53,119 --> 00:38:57,470
assuming that everything is a pointer

1142
00:38:54,710 --> 00:38:58,609
gets you nice data data cross references

1143
00:38:57,470 --> 00:39:01,009
that you might have missed if everything

1144
00:38:58,609 --> 00:39:03,259
goes assumed to be a byte so I really

1145
00:39:01,010 --> 00:39:04,549
like the look of unit it causes spurious

1146
00:39:03,260 --> 00:39:05,960
references I like the look of having

1147
00:39:04,549 --> 00:39:07,670
those references so I made a short

1148
00:39:05,960 --> 00:39:08,990
little script to kind of groom all of

1149
00:39:07,670 --> 00:39:11,690
our data area just to give us the

1150
00:39:08,990 --> 00:39:12,979
pointers you could do this for code but

1151
00:39:11,690 --> 00:39:14,990
we're really looking at you know like

1152
00:39:12,980 --> 00:39:16,099
pretty printing you know structures so

1153
00:39:14,990 --> 00:39:17,750
we don't really care so much about the

1154
00:39:16,099 --> 00:39:19,940
code this time and of course the way to

1155
00:39:17,750 --> 00:39:22,460
do that is more Python right so you can

1156
00:39:19,940 --> 00:39:25,099
see that with our two pipe it's totally

1157
00:39:22,460 --> 00:39:27,140
easy to just augment the way you analyze

1158
00:39:25,099 --> 00:39:29,270
these binaries with some some quick and

1159
00:39:27,140 --> 00:39:32,029
dirty Python scripts so here you know

1160
00:39:29,270 --> 00:39:33,589
I'm seeking to a particular location and

1161
00:39:32,030 --> 00:39:36,470
then I'm printing something you see the

1162
00:39:33,589 --> 00:39:39,440
pfj J on the end of the command will

1163
00:39:36,470 --> 00:39:41,359
actually make it print out JSON right so

1164
00:39:39,440 --> 00:39:44,750
I printed this thing in JSON and then I

1165
00:39:41,359 --> 00:39:47,630
can actually use like the the parts of

1166
00:39:44,750 --> 00:39:49,460
the information and then like axd

1167
00:39:47,630 --> 00:39:52,400
creates a data cross reference so I'm

1168
00:39:49,460 --> 00:39:54,349
going through here I'm marking CDs or CD

1169
00:39:52,400 --> 00:39:55,760
makes it as a four point pointer and

1170
00:39:54,349 --> 00:39:57,710
then a XD makes a data reference so I'm

1171
00:39:55,760 --> 00:39:59,960
making everything a pointer 32 bits and

1172
00:39:57,710 --> 00:40:01,549
I'm just creating a data reference of

1173
00:39:59,960 --> 00:40:05,540
whatever that value is at that location

1174
00:40:01,549 --> 00:40:07,009
out to wherever so right where are we at

1175
00:40:05,540 --> 00:40:08,540
we did a lot of stuff let's look at the

1176
00:40:07,010 --> 00:40:12,530
tail of our session now we're in like

1177
00:40:08,540 --> 00:40:13,670
stage 3 ok we know we stuff in gray

1178
00:40:12,530 --> 00:40:16,160
we've already kind of done and I'm

1179
00:40:13,670 --> 00:40:17,600
running these two are two pipe scripts

1180
00:40:16,160 --> 00:40:19,040
so the map strings

1181
00:40:17,600 --> 00:40:21,170
thing remember that's taking the strings

1182
00:40:19,040 --> 00:40:23,120
that you find in like the flat file and

1183
00:40:21,170 --> 00:40:24,620
giving them the right offset and then

1184
00:40:23,120 --> 00:40:26,120
codifies taking everything the data

1185
00:40:24,620 --> 00:40:28,279
segment and turning to a pointer so that

1186
00:40:26,120 --> 00:40:29,720
we have our nice refs and this will give

1187
00:40:28,280 --> 00:40:31,130
us a much better environment so that

1188
00:40:29,720 --> 00:40:32,689
when we look at cans signals and ask

1189
00:40:31,130 --> 00:40:34,280
where the cross references are to the

1190
00:40:32,690 --> 00:40:37,910
strings and such we'll see the cross

1191
00:40:34,280 --> 00:40:40,040
references okay that's a lot of that's a

1192
00:40:37,910 --> 00:40:41,210
lot of you know disassembly and code and

1193
00:40:40,040 --> 00:40:44,420
stuff like that so here you go here's

1194
00:40:41,210 --> 00:40:46,970
your funny picture break you know ID min

1195
00:40:44,420 --> 00:40:49,180
admin okay I think it's pretty funny but

1196
00:40:46,970 --> 00:40:50,959
I'm easy I'm easy to amuse that's okay

1197
00:40:49,180 --> 00:40:53,569
okay okay

1198
00:40:50,960 --> 00:40:55,490
so remember we were looking at you know

1199
00:40:53,570 --> 00:40:57,500
that location in memory where the can

1200
00:40:55,490 --> 00:40:58,669
signals were and I did all across refs

1201
00:40:57,500 --> 00:41:00,980
and everything was missing let's kind of

1202
00:40:58,670 --> 00:41:02,750
do that step again but this time let's

1203
00:41:00,980 --> 00:41:04,640
like see how it's not broken so we went

1204
00:41:02,750 --> 00:41:06,170
to the can signal start and I can

1205
00:41:04,640 --> 00:41:08,359
immediately ask what cross-references

1206
00:41:06,170 --> 00:41:10,580
are there this thing and bang I have a

1207
00:41:08,360 --> 00:41:13,190
cross-reference right there and I can do

1208
00:41:10,580 --> 00:41:15,529
a disassembly of the location see I did

1209
00:41:13,190 --> 00:41:17,000
PD so I'm disassembling right of the can

1210
00:41:15,530 --> 00:41:19,610
signals thing and it didn't show me a

1211
00:41:17,000 --> 00:41:21,560
disassembly of code it showed me all the

1212
00:41:19,610 --> 00:41:23,930
nice you know like assembly markups for

1213
00:41:21,560 --> 00:41:25,190
for data sections just like you would

1214
00:41:23,930 --> 00:41:26,990
like to see if you're an Ida pro when

1215
00:41:25,190 --> 00:41:29,510
you mark something as like a quad word

1216
00:41:26,990 --> 00:41:31,490
right so now our sections are marked

1217
00:41:29,510 --> 00:41:32,810
correctly and you can see that coincides

1218
00:41:31,490 --> 00:41:35,029
basically with what we looked at with

1219
00:41:32,810 --> 00:41:37,009
the telescoping print option before so

1220
00:41:35,030 --> 00:41:39,380
you could have used telescoping print

1221
00:41:37,010 --> 00:41:41,360
and in a pinch telescoping print pxr is

1222
00:41:39,380 --> 00:41:42,700
awesome but if you're gonna be looking

1223
00:41:41,360 --> 00:41:45,290
at stuff over and over and over again

1224
00:41:42,700 --> 00:41:46,730
getting it right so that PD works like

1225
00:41:45,290 --> 00:41:48,230
that is really relevant because because

1226
00:41:46,730 --> 00:41:50,330
one of the modes of raid err is called

1227
00:41:48,230 --> 00:41:52,670
its visual mode and the visual mode was

1228
00:41:50,330 --> 00:41:54,080
a lot like that one disassembly view and

1229
00:41:52,670 --> 00:41:56,090
Ida Pro we're just kind of scrolling in

1230
00:41:54,080 --> 00:41:57,440
an address it just shows you stuff so

1231
00:41:56,090 --> 00:41:58,760
when you get it set up the correct way

1232
00:41:57,440 --> 00:42:00,410
for this and means you can just go to

1233
00:41:58,760 --> 00:42:02,420
visual mode and page around and explore

1234
00:42:00,410 --> 00:42:03,920
and it removes that you know

1235
00:42:02,420 --> 00:42:04,760
disambiguation of whether this is code

1236
00:42:03,920 --> 00:42:06,110
or data you want to ask yourself

1237
00:42:04,760 --> 00:42:10,340
questions anymore it just becomes

1238
00:42:06,110 --> 00:42:12,920
apparent okay so remember we're trying

1239
00:42:10,340 --> 00:42:14,360
to go from the JSON we know that it goes

1240
00:42:12,920 --> 00:42:15,560
from the JSON to the structure we want

1241
00:42:14,360 --> 00:42:20,000
to go backwards right that's what we're

1242
00:42:15,560 --> 00:42:21,380
trying to do okay so to do that we

1243
00:42:20,000 --> 00:42:22,790
really could actually take advantage of

1244
00:42:21,380 --> 00:42:24,260
the fact that that structure is in a

1245
00:42:22,790 --> 00:42:26,900
header file somewhere right we have this

1246
00:42:24,260 --> 00:42:29,180
open source project and we can take that

1247
00:42:26,900 --> 00:42:30,840
header file and start to use type

1248
00:42:29,180 --> 00:42:32,190
information in rate air to start

1249
00:42:30,840 --> 00:42:34,020
pretty printing the structures so

1250
00:42:32,190 --> 00:42:35,760
radiator knows all about you know see

1251
00:42:34,020 --> 00:42:37,530
header files it has a whole collection

1252
00:42:35,760 --> 00:42:39,690
of tight commands under T and you can

1253
00:42:37,530 --> 00:42:42,390
see I'm using that question mark to get

1254
00:42:39,690 --> 00:42:43,920
details about a command and I'm just

1255
00:42:42,390 --> 00:42:48,029
looking at like what kind of stuff does

1256
00:42:43,920 --> 00:42:51,540
it know about listing so great if I do T

1257
00:42:48,030 --> 00:42:53,070
by itself to list the types it tells me

1258
00:42:51,540 --> 00:42:54,810
no I don't know anything about types and

1259
00:42:53,070 --> 00:42:57,660
this is a side-effect of using a flat

1260
00:42:54,810 --> 00:42:59,520
binary if I used an elf file it would

1261
00:42:57,660 --> 00:43:00,899
know all the types because it knows what

1262
00:42:59,520 --> 00:43:02,280
architecture I'm dealing with and what

1263
00:43:00,900 --> 00:43:03,780
the calling convention is and all the

1264
00:43:02,280 --> 00:43:05,550
types just come in but it doesn't know

1265
00:43:03,780 --> 00:43:07,290
anything so flat binary file even if I

1266
00:43:05,550 --> 00:43:09,060
ask it for like star which is like you

1267
00:43:07,290 --> 00:43:11,000
know the parsable version the rate error

1268
00:43:09,060 --> 00:43:13,410
commands it still doesn't know anything

1269
00:43:11,000 --> 00:43:15,120
so what I do is I go back to this thing

1270
00:43:13,410 --> 00:43:16,770
of LS I know this is roughly the same

1271
00:43:15,120 --> 00:43:20,640
binary so I'll just open up that elf

1272
00:43:16,770 --> 00:43:22,560
file I'll do T star here and then I can

1273
00:43:20,640 --> 00:43:23,850
save the output of T star because those

1274
00:43:22,560 --> 00:43:25,860
are just rate air commands right and

1275
00:43:23,850 --> 00:43:27,690
then in the other one when I'm in the

1276
00:43:25,860 --> 00:43:29,490
flat binary file I can just load those

1277
00:43:27,690 --> 00:43:31,440
right air commands and it'll change my

1278
00:43:29,490 --> 00:43:32,790
session so I can like export all that

1279
00:43:31,440 --> 00:43:34,530
type information and then import it

1280
00:43:32,790 --> 00:43:37,020
where I want it just like that it's

1281
00:43:34,530 --> 00:43:38,310
pretty useful and then of course what I

1282
00:43:37,020 --> 00:43:39,900
really want to do is you know use the

1283
00:43:38,310 --> 00:43:41,160
header file and I'll just like ask Rader

1284
00:43:39,900 --> 00:43:43,710
to read the header file it'll be fine

1285
00:43:41,160 --> 00:43:46,290
right no it's not fine rady air can read

1286
00:43:43,710 --> 00:43:49,140
header files somewhat but it always

1287
00:43:46,290 --> 00:43:50,790
needs massaging and pretty much every

1288
00:43:49,140 --> 00:43:52,379
time I try to throw a header file at

1289
00:43:50,790 --> 00:43:54,560
rate air just to read it in it ends up

1290
00:43:52,380 --> 00:43:57,330
kind of crashing or not reading it so

1291
00:43:54,560 --> 00:43:58,980
you know be careful what you're probably

1292
00:43:57,330 --> 00:44:01,680
gonna have to do is take the header file

1293
00:43:58,980 --> 00:44:04,260
and you know remove things like Const

1294
00:44:01,680 --> 00:44:06,029
and you know use structured instances

1295
00:44:04,260 --> 00:44:07,440
and so the type deaths and you know

1296
00:44:06,030 --> 00:44:09,000
manually correct some packing in

1297
00:44:07,440 --> 00:44:10,650
alignment just to get it all to fit and

1298
00:44:09,000 --> 00:44:11,820
then when you're done you know it ends

1299
00:44:10,650 --> 00:44:13,290
up being a big change you see how many

1300
00:44:11,820 --> 00:44:15,540
deletions there are like a big part of

1301
00:44:13,290 --> 00:44:18,000
massaging header files is just kind of

1302
00:44:15,540 --> 00:44:20,009
removing spurious includes and the

1303
00:44:18,000 --> 00:44:21,330
include guards and all the little stuff

1304
00:44:20,010 --> 00:44:25,410
that doesn't matter just to get down to

1305
00:44:21,330 --> 00:44:26,850
what you need for really so it's not

1306
00:44:25,410 --> 00:44:27,839
very complicated at this point you can

1307
00:44:26,850 --> 00:44:32,400
see it's kind of what we would expect

1308
00:44:27,840 --> 00:44:34,350
all right so now we remember we ran our

1309
00:44:32,400 --> 00:44:36,030
our two pipe commands that we built with

1310
00:44:34,350 --> 00:44:37,259
Python and that kind of groom the data

1311
00:44:36,030 --> 00:44:38,910
and now we have the strings and now

1312
00:44:37,260 --> 00:44:40,290
we're doing a couple other things we

1313
00:44:38,910 --> 00:44:42,299
know where the can messages start

1314
00:44:40,290 --> 00:44:44,490
because we saw that first pointer from

1315
00:44:42,300 --> 00:44:44,700
that structure array and we even know

1316
00:44:44,490 --> 00:44:47,250
where

1317
00:44:44,700 --> 00:44:50,250
first bus is because that's reference

1318
00:44:47,250 --> 00:44:52,410
twice and now we can actually source all

1319
00:44:50,250 --> 00:44:54,930
that type information that we exported

1320
00:44:52,410 --> 00:44:56,220
from the elf file right so that's what

1321
00:44:54,930 --> 00:44:59,009
we're doing here with the dot so dot

1322
00:44:56,220 --> 00:45:00,750
types 32 that are two that's the type

1323
00:44:59,010 --> 00:45:02,250
information we just exported from LS and

1324
00:45:00,750 --> 00:45:04,829
we can just import that and now we know

1325
00:45:02,250 --> 00:45:06,450
all about the dice type information and

1326
00:45:04,829 --> 00:45:08,099
we're gonna read in that can util header

1327
00:45:06,450 --> 00:45:09,540
file and now all of a sudden radar knows

1328
00:45:08,099 --> 00:45:11,280
about all the structures that are in

1329
00:45:09,540 --> 00:45:12,930
that header file so you know like the

1330
00:45:11,280 --> 00:45:14,160
canned buses and the canned messages and

1331
00:45:12,930 --> 00:45:16,828
the canned signals right there and knows

1332
00:45:14,160 --> 00:45:18,569
how to print those now right one of the

1333
00:45:16,829 --> 00:45:20,190
tricks here is that we used to think

1334
00:45:18,570 --> 00:45:21,990
about everything as being 16-bit and

1335
00:45:20,190 --> 00:45:24,150
that was to convince rate err you know

1336
00:45:21,990 --> 00:45:25,560
to disassemble things in thumb mode for

1337
00:45:24,150 --> 00:45:27,540
deep for default particularly when

1338
00:45:25,560 --> 00:45:28,560
you're looking for function preludes so

1339
00:45:27,540 --> 00:45:31,230
I don't know if you remember a bunch of

1340
00:45:28,560 --> 00:45:33,029
slides ago we did a a p2 search for the

1341
00:45:31,230 --> 00:45:34,470
beginnings of functions that really

1342
00:45:33,030 --> 00:45:36,240
depends on thumb mode because if you're

1343
00:45:34,470 --> 00:45:38,910
in 32-bit mode it won't find thumb

1344
00:45:36,240 --> 00:45:40,890
prologues so let's go back to 32 because

1345
00:45:38,910 --> 00:45:41,940
if you're not in 32 all the pointers

1346
00:45:40,890 --> 00:45:42,960
will be the wrong size and your

1347
00:45:41,940 --> 00:45:44,460
structures and then you can't pretty

1348
00:45:42,960 --> 00:45:47,820
print anything so that's that's a little

1349
00:45:44,460 --> 00:45:49,829
gotcha and here you go so we're there we

1350
00:45:47,820 --> 00:45:51,990
can go to this can signal start we can

1351
00:45:49,829 --> 00:45:53,460
aspirate air Haiti can signal what do

1352
00:45:51,990 --> 00:45:56,160
you know about this structure and it

1353
00:45:53,460 --> 00:45:57,930
says ok I know some stuff and what it's

1354
00:45:56,160 --> 00:45:59,549
showing you is actually the print

1355
00:45:57,930 --> 00:46:01,560
command so when you ask great air what

1356
00:45:59,550 --> 00:46:03,720
do you know about can signal it says

1357
00:46:01,560 --> 00:46:06,630
this is the print command that I would

1358
00:46:03,720 --> 00:46:10,680
use to pretty print that can signal so

1359
00:46:06,630 --> 00:46:12,210
PF p z vb on and on and on and then all

1360
00:46:10,680 --> 00:46:13,348
those names and it's kind of more than

1361
00:46:12,210 --> 00:46:15,089
we want right because remember all we

1362
00:46:13,349 --> 00:46:16,829
really care about is like what's the

1363
00:46:15,089 --> 00:46:18,779
message what's the generic name one of

1364
00:46:16,829 --> 00:46:23,569
those bit positions so let's just like

1365
00:46:18,780 --> 00:46:23,569
of course more seg faults ok

1366
00:46:30,750 --> 00:46:44,380
it's not just radar the seg faults it's

1367
00:46:33,850 --> 00:46:47,710
also PowerPoint okay so can you see this

1368
00:46:44,380 --> 00:46:48,940
I'm afraid to like show it yeah let me

1369
00:46:47,710 --> 00:46:50,140
zoom in a little bit I'm afraid to put

1370
00:46:48,940 --> 00:46:51,880
in a presenter mode because that seems

1371
00:46:50,140 --> 00:46:54,850
to be when it crashes so let's just look

1372
00:46:51,880 --> 00:46:56,500
at it like this all right you can see

1373
00:46:54,850 --> 00:46:57,940
that you know we ask it would have knows

1374
00:46:56,500 --> 00:46:59,980
about the signal and it says here's this

1375
00:46:57,940 --> 00:47:02,950
weird print command but we can also do

1376
00:46:59,980 --> 00:47:04,840
is add a dot in front right so a dot is

1377
00:47:02,950 --> 00:47:07,390
just like in shell language like in bash

1378
00:47:04,840 --> 00:47:09,970
its sourcing an output right so what

1379
00:47:07,390 --> 00:47:12,370
you're doing is telling rate air to eval

1380
00:47:09,970 --> 00:47:14,230
that PF line and that's what it did

1381
00:47:12,370 --> 00:47:16,299
we're sitting at can signal start it

1382
00:47:14,230 --> 00:47:17,920
took that PF print format function and

1383
00:47:16,300 --> 00:47:19,870
it just executed it and that's why you

1384
00:47:17,920 --> 00:47:22,150
see all this nice pretty printing coming

1385
00:47:19,870 --> 00:47:24,100
out of you here with the message and the

1386
00:47:22,150 --> 00:47:25,090
name and stuff like that but it is quite

1387
00:47:24,100 --> 00:47:26,319
a bit of information that we're gonna

1388
00:47:25,090 --> 00:47:28,930
we're going to try to simplify that a

1389
00:47:26,320 --> 00:47:31,300
bit because PF is very very detailed

1390
00:47:28,930 --> 00:47:33,460
like this is the help output for PF so

1391
00:47:31,300 --> 00:47:34,960
you can pretty much do any printing you

1392
00:47:33,460 --> 00:47:36,850
could ever imagine more than you ever

1393
00:47:34,960 --> 00:47:38,230
need so yeah

1394
00:47:36,850 --> 00:47:40,660
let's simplify that a little bit I got

1395
00:47:38,230 --> 00:47:42,580
it down to like this : X dot and these

1396
00:47:40,660 --> 00:47:44,529
are like ignore me or just treat me as a

1397
00:47:42,580 --> 00:47:46,029
pointer and then when we print it we can

1398
00:47:44,530 --> 00:47:48,790
just give this D reference to an

1399
00:47:46,030 --> 00:47:50,620
arbitration ID so here's your funny

1400
00:47:48,790 --> 00:47:52,450
picture again you guys have been very

1401
00:47:50,620 --> 00:47:54,160
good I like this one it's the College of

1402
00:47:52,450 --> 00:47:59,350
Architecture and planning are you gonna

1403
00:47:54,160 --> 00:48:01,930
crash again no good okay so we know our

1404
00:47:59,350 --> 00:48:04,180
cans signal we kind of know how to print

1405
00:48:01,930 --> 00:48:07,540
it this is very good what we want to see

1406
00:48:04,180 --> 00:48:08,980
is avoid this you know another glitch in

1407
00:48:07,540 --> 00:48:10,390
raid err I'm just gonna accelerate a bit

1408
00:48:08,980 --> 00:48:12,850
cuz you know this is getting very

1409
00:48:10,390 --> 00:48:14,350
detailed for you guys you can see here

1410
00:48:12,850 --> 00:48:16,569
that we're just kind of skipping one of

1411
00:48:14,350 --> 00:48:19,330
the can message arbitration IDs we just

1412
00:48:16,570 --> 00:48:21,130
want to look Curtis it as a message so

1413
00:48:19,330 --> 00:48:22,420
this is what we got we're all the way up

1414
00:48:21,130 --> 00:48:24,640
to the point where we have all of our

1415
00:48:22,420 --> 00:48:26,590
type information loaded we know exactly

1416
00:48:24,640 --> 00:48:28,359
what our car can arbitration signal idea

1417
00:48:26,590 --> 00:48:30,760
is and we can actually print this stuff

1418
00:48:28,360 --> 00:48:34,870
which is great once you have done all

1419
00:48:30,760 --> 00:48:38,410
this hard work here you go this is what

1420
00:48:34,870 --> 00:48:40,359
you get so if you can have a look we

1421
00:48:38,410 --> 00:48:40,868
actually know the factor 1.0 so we're

1422
00:48:40,360 --> 00:48:42,490
printing the

1423
00:48:40,869 --> 00:48:44,499
floating-point value of the scaling

1424
00:48:42,490 --> 00:48:48,279
factor we know exactly where in the bit

1425
00:48:44,499 --> 00:48:50,200
position in the bit sizes 56 and 8 and

1426
00:48:48,279 --> 00:48:51,849
we know what the arbitration idea is so

1427
00:48:50,200 --> 00:48:53,410
we know like what can frame this would

1428
00:48:51,849 --> 00:48:55,180
be in and you can compare that to

1429
00:48:53,410 --> 00:48:57,609
exactly like the jason that you know

1430
00:48:55,180 --> 00:48:59,828
built the binary file and they do line

1431
00:48:57,609 --> 00:49:01,240
up so the point of it isn't to like to

1432
00:48:59,829 --> 00:49:03,039
show you that like I flex my rare top

1433
00:49:01,240 --> 00:49:05,019
rate air muscle is to show you that all

1434
00:49:03,039 --> 00:49:06,160
these commands aren't there and with the

1435
00:49:05,019 --> 00:49:09,069
right amount of tweaking you can

1436
00:49:06,160 --> 00:49:10,990
actually like extract all this info out

1437
00:49:09,069 --> 00:49:12,880
of the binaries and these slides will be

1438
00:49:10,990 --> 00:49:16,390
totally available for your future

1439
00:49:12,880 --> 00:49:19,749
reference and I also have the command

1440
00:49:16,390 --> 00:49:21,308
reference I think coming up so as I

1441
00:49:19,749 --> 00:49:23,799
prepare to close does anyone have any

1442
00:49:21,309 --> 00:49:24,999
questions in the last couple uh I know

1443
00:49:23,799 --> 00:49:28,720
probably a lot of questions maybe too

1444
00:49:24,999 --> 00:49:30,910
many great air questions I hope good

1445
00:49:28,720 --> 00:49:34,319
that's not a problem thank you so much

1446
00:49:30,910 --> 00:49:34,319
for your time guys thank you

