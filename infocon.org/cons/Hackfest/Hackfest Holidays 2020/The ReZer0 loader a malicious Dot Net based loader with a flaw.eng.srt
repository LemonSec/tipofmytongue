1
00:00:09,120 --> 00:00:10,240
hi everyone

2
00:00:10,240 --> 00:00:13,519
welcome to our second talk with libra

3
00:00:13,519 --> 00:00:14,799
he's going to talk about the

4
00:00:14,799 --> 00:00:18,320
re zero loader it's gonna be a fast talk

5
00:00:18,320 --> 00:00:19,760
of 30 minutes

6
00:00:19,760 --> 00:00:23,119
so if you have any questions just ask on

7
00:00:23,119 --> 00:00:24,560
the youtube and we'll

8
00:00:24,560 --> 00:00:28,840
transmit to uh libra rooms to you

9
00:00:28,840 --> 00:00:31,359
thanks

10
00:00:31,359 --> 00:00:33,760
thank you very much uh good evening

11
00:00:33,760 --> 00:00:34,640
everybody at

12
00:00:34,640 --> 00:00:36,880
uh nine o'clock my time i think it's

13
00:00:36,880 --> 00:00:38,879
three uh eastern time

14
00:00:38,879 --> 00:00:41,440
if i say that correctly uh for those in

15
00:00:41,440 --> 00:00:42,079
canada

16
00:00:42,079 --> 00:00:44,960
and for those around the world uh

17
00:00:44,960 --> 00:00:46,480
somewhere

18
00:00:46,480 --> 00:00:48,399
it should be any time of the day so

19
00:00:48,399 --> 00:00:50,160
welcome to my talk today i'll be talking

20
00:00:50,160 --> 00:00:50,559
about the

21
00:00:50,559 --> 00:00:53,600
v0 loader i'll start off with a

22
00:00:53,600 --> 00:00:56,000
short powerpoint with some introduction

23
00:00:56,000 --> 00:00:58,239
and a bit of basic terms and programs

24
00:00:58,239 --> 00:00:59,280
that we will use

25
00:00:59,280 --> 00:01:01,039
it can also be seen in the table of

26
00:01:01,039 --> 00:01:03,199
contents so first i'll talk about

27
00:01:03,199 --> 00:01:06,799
who am i and then what is the v0 loader

28
00:01:06,799 --> 00:01:09,200
the use tooling and then we'll swap over

29
00:01:09,200 --> 00:01:11,119
to the live analysis

30
00:01:11,119 --> 00:01:12,960
if you have any questions then feel free

31
00:01:12,960 --> 00:01:14,400
to put them in the chat

32
00:01:14,400 --> 00:01:18,000
i'll get back to them and then

33
00:01:18,000 --> 00:01:19,680
hopefully all questions will be

34
00:01:19,680 --> 00:01:21,520
explained during the presentation itself

35
00:01:21,520 --> 00:01:23,200
if not i'll get back to you

36
00:01:23,200 --> 00:01:25,040
if it's too long we can take it offline

37
00:01:25,040 --> 00:01:27,119
and discuss it further

38
00:01:27,119 --> 00:01:29,600
through another way after the discord of

39
00:01:29,600 --> 00:01:31,200
the hike fest

40
00:01:31,200 --> 00:01:34,159
or we can chat in the in the youtube

41
00:01:34,159 --> 00:01:36,880
chat afterwards

42
00:01:36,880 --> 00:01:39,360
so moving on who am i my name is max

43
00:01:39,360 --> 00:01:41,600
gusta i go by the nickname of libra or

44
00:01:41,600 --> 00:01:44,640
libra analysis on twitter uh january

45
00:01:44,640 --> 00:01:47,040
2019 i graduated from rauda

46
00:01:47,040 --> 00:01:49,840
from my bachelor in iit security in the

47
00:01:49,840 --> 00:01:51,759
meantime i also worked as the android

48
00:01:51,759 --> 00:01:52,880
mower analyst for

49
00:01:52,880 --> 00:01:55,920
fabric in my spare time i write blogs

50
00:01:55,920 --> 00:01:57,920
about reverse engineering

51
00:01:57,920 --> 00:01:59,920
mainly working on my binary analysis

52
00:01:59,920 --> 00:02:01,280
course but also working on some

53
00:02:01,280 --> 00:02:03,280
different programs

54
00:02:03,280 --> 00:02:05,119
the programs i make are open source on

55
00:02:05,119 --> 00:02:06,840
my github such as android project

56
00:02:06,840 --> 00:02:08,239
creator

57
00:02:08,239 --> 00:02:11,360
in 2019 when we could still get together

58
00:02:11,360 --> 00:02:12,160
physically

59
00:02:12,160 --> 00:02:14,879
i gave a workshop at botcom about static

60
00:02:14,879 --> 00:02:16,400
android knowledge analysis

61
00:02:16,400 --> 00:02:18,160
and this year i gave you a virtual talk

62
00:02:18,160 --> 00:02:20,400
for the confidence conference

63
00:02:20,400 --> 00:02:22,640
about android project creator i'm

64
00:02:22,640 --> 00:02:24,640
currently working at eb ambro which is a

65
00:02:24,640 --> 00:02:25,440
dutch bank

66
00:02:25,440 --> 00:02:29,120
as a threat intelligence analyst

67
00:02:29,280 --> 00:02:32,000
so moving on to the v0 loader itself

68
00:02:32,000 --> 00:02:33,120
what is it

69
00:02:33,120 --> 00:02:36,400
so the name consists of two terms

70
00:02:36,400 --> 00:02:38,080
basically you have re-zero which is the

71
00:02:38,080 --> 00:02:40,000
name of this specific loader

72
00:02:40,000 --> 00:02:41,840
uh that brings us to the to the first

73
00:02:41,840 --> 00:02:43,120
question uh

74
00:02:43,120 --> 00:02:46,400
what is a loader a loader is a program

75
00:02:46,400 --> 00:02:47,920
that loads since the name already

76
00:02:47,920 --> 00:02:49,680
indicates a given payload

77
00:02:49,680 --> 00:02:52,879
now this payload can be encrypted or

78
00:02:52,879 --> 00:02:54,640
otherwise obfuscated

79
00:02:54,640 --> 00:02:58,720
to cause antivirus to not detect

80
00:02:58,720 --> 00:03:01,360
the loader itself and the payload and is

81
00:03:01,360 --> 00:03:04,080
usually decrypted during the runtime

82
00:03:04,080 --> 00:03:06,239
so that means that the loader starts it

83
00:03:06,239 --> 00:03:08,080
decrypts the payload and then it starts

84
00:03:08,080 --> 00:03:10,000
the payload in one way or another

85
00:03:10,000 --> 00:03:13,120
maybe there are various ways included so

86
00:03:13,120 --> 00:03:15,200
if you were to persist your loader you

87
00:03:15,200 --> 00:03:16,400
would actually persist

88
00:03:16,400 --> 00:03:20,879
the final payload but then still in a

89
00:03:20,879 --> 00:03:24,000
factor encrypted form now for this

90
00:03:24,000 --> 00:03:25,840
specific loader

91
00:03:25,840 --> 00:03:28,159
it can persist and can launch payloads

92
00:03:28,159 --> 00:03:30,159
in various ways

93
00:03:30,159 --> 00:03:32,959
we'll see the exact ways in a bit uh

94
00:03:32,959 --> 00:03:34,400
when talking about the

95
00:03:34,400 --> 00:03:37,440
the code and when analyzing it and the

96
00:03:37,440 --> 00:03:38,799
payload can be embedded it can be

97
00:03:38,799 --> 00:03:41,040
downloaded from a remote source

98
00:03:41,040 --> 00:03:44,640
and for a full write-up after the talk

99
00:03:44,640 --> 00:03:46,239
you can click on the link that's in

100
00:03:46,239 --> 00:03:48,480
powerpoint i'll publish these slides

101
00:03:48,480 --> 00:03:51,680
this afternoon for you guys so that is

102
00:03:51,680 --> 00:03:52,239
after the

103
00:03:52,239 --> 00:03:54,879
talk i think 20 minutes after i'll put

104
00:03:54,879 --> 00:03:56,400
the slides online and i'll

105
00:03:56,400 --> 00:04:00,080
tweet the link to it so you can read the

106
00:04:00,080 --> 00:04:01,840
complete write-up including the

107
00:04:01,840 --> 00:04:04,640
step-by-step analysis

108
00:04:04,640 --> 00:04:06,640
but over the highlights and you will see

109
00:04:06,640 --> 00:04:07,920
that in this talk

110
00:04:07,920 --> 00:04:10,400
so this symbol was obtained via a

111
00:04:10,400 --> 00:04:11,920
malware and enlisted talos

112
00:04:11,920 --> 00:04:15,280
named nikhil hedge and he provided an

113
00:04:15,280 --> 00:04:18,560
outline in a clam av blog post

114
00:04:18,560 --> 00:04:21,279
of a sample and this was one of these

115
00:04:21,279 --> 00:04:23,840
stages so his blog ends

116
00:04:23,840 --> 00:04:26,479
where this one starts basically so it's

117
00:04:26,479 --> 00:04:29,840
a continuation of sorts

118
00:04:30,000 --> 00:04:31,680
so you can also check that out if you're

119
00:04:31,680 --> 00:04:34,160
interested

120
00:04:34,240 --> 00:04:36,639
so this specific sample i can be seen as

121
00:04:36,639 --> 00:04:37,280
a permit

122
00:04:37,280 --> 00:04:40,160
so the clam av blog post talks about

123
00:04:40,160 --> 00:04:41,520
another loader

124
00:04:41,520 --> 00:04:44,800
which then loads the v0v4

125
00:04:44,800 --> 00:04:47,440
loader which in the end results in mass

126
00:04:47,440 --> 00:04:48,880
logger

127
00:04:48,880 --> 00:04:53,360
be it in a somewhat obfuscated form

128
00:04:53,680 --> 00:04:56,240
so in the live analysis i'll be using

129
00:04:56,240 --> 00:04:57,840
two tools

130
00:04:57,840 --> 00:05:00,720
one of them is d for dot it's a free

131
00:05:00,720 --> 00:05:01,440
tool

132
00:05:01,440 --> 00:05:03,840
open source and you can de-obfuscate.net

133
00:05:03,840 --> 00:05:06,720
based binaries with it

134
00:05:06,720 --> 00:05:09,120
now also note there note that there is

135
00:05:09,120 --> 00:05:11,039
for dot cx

136
00:05:11,039 --> 00:05:14,639
which is used to de-obfuscate computer x

137
00:05:14,639 --> 00:05:17,199
obfuscated binary so this is not present

138
00:05:17,199 --> 00:05:17,840
in the

139
00:05:17,840 --> 00:05:20,960
default way and we'll use this its

140
00:05:20,960 --> 00:05:22,560
version as well during this stop it

141
00:05:22,560 --> 00:05:24,240
doesn't matter for this sample

142
00:05:24,240 --> 00:05:27,840
just the default that i use

143
00:05:27,840 --> 00:05:32,240
it can de-obfuscate

144
00:05:32,240 --> 00:05:35,120
either known obfuscators such as the

145
00:05:35,120 --> 00:05:36,320
computer x

146
00:05:36,320 --> 00:05:38,160
but it can also handle unknown off

147
00:05:38,160 --> 00:05:40,080
status now in the case that is unknown

148
00:05:40,080 --> 00:05:41,759
there are some basic rules within the

149
00:05:41,759 --> 00:05:44,880
thought that will help you out and

150
00:05:44,880 --> 00:05:48,240
in the latter case it will also clean

151
00:05:48,240 --> 00:05:48,960
the binary

152
00:05:48,960 --> 00:05:51,120
so if there is a weird naming scheme or

153
00:05:51,120 --> 00:05:52,479
other things that are

154
00:05:52,479 --> 00:05:55,199
odd or at least not easily handable for

155
00:05:55,199 --> 00:05:55,680
you

156
00:05:55,680 --> 00:05:58,319
for a human analyst it will it will

157
00:05:58,319 --> 00:05:59,840
clean it and help you out with that and

158
00:05:59,840 --> 00:06:01,199
i'll show the difference between the

159
00:06:01,199 --> 00:06:02,479
original payload

160
00:06:02,479 --> 00:06:06,960
and the clean one once we dive more into

161
00:06:06,960 --> 00:06:09,520
then as a second tool that we will be

162
00:06:09,520 --> 00:06:10,800
using

163
00:06:10,800 --> 00:06:14,400
is dnspy sensor.net spy it's a free and

164
00:06:14,400 --> 00:06:16,800
open source tool to analyze and debug

165
00:06:16,800 --> 00:06:18,960
net based applications you can also

166
00:06:18,960 --> 00:06:21,039
patch applications with it but

167
00:06:21,039 --> 00:06:23,520
that's out of scope for now uh so you

168
00:06:23,520 --> 00:06:25,280
can show the intermediate i

169
00:06:25,280 --> 00:06:26,720
do see there's a typo there but it

170
00:06:26,720 --> 00:06:28,720
should be intermediate language

171
00:06:28,720 --> 00:06:30,880
uh either as a raw so some form of

172
00:06:30,880 --> 00:06:32,800
disassembly let's put it that way

173
00:06:32,800 --> 00:06:35,199
or you can view it as usualbasic.net or

174
00:06:35,199 --> 00:06:36,000
a c-sharp

175
00:06:36,000 --> 00:06:37,840
so whenever i'll be using this program

176
00:06:37,840 --> 00:06:40,560
i'll be displaying the source code

177
00:06:40,560 --> 00:06:42,480
as c-sharp rather than

178
00:06:42,480 --> 00:06:43,840
[Music]

179
00:06:43,840 --> 00:06:46,840
the way the intermediate language is

180
00:06:46,840 --> 00:06:48,800
represented

181
00:06:48,800 --> 00:06:51,280
so during the night live analysis uh

182
00:06:51,280 --> 00:06:53,039
there are basically four points

183
00:06:53,039 --> 00:06:55,759
that i want to uh to touch upon this

184
00:06:55,759 --> 00:06:58,080
does mean that for some parts of the

185
00:06:58,080 --> 00:07:00,080
loader will be skipping because this

186
00:07:00,080 --> 00:07:02,319
might involve either too much manual

187
00:07:02,319 --> 00:07:03,120
work

188
00:07:03,120 --> 00:07:05,440
uh orange might take too much time for a

189
00:07:05,440 --> 00:07:06,479
30 minute talk

190
00:07:06,479 --> 00:07:08,880
and we're currently already nearly nine

191
00:07:08,880 --> 00:07:10,080
minutes in

192
00:07:10,080 --> 00:07:12,880
so that's fine so first off i want to

193
00:07:12,880 --> 00:07:14,240
clean the sample i want to show the

194
00:07:14,240 --> 00:07:15,599
difference between the non-clean the

195
00:07:15,599 --> 00:07:17,520
clean sample using the e4 dot

196
00:07:17,520 --> 00:07:18,479
then i want to get a better

197
00:07:18,479 --> 00:07:20,720
understanding of the loader as if i were

198
00:07:20,720 --> 00:07:23,199
to look at it for the first time

199
00:07:23,199 --> 00:07:25,199
i will be switching over to a more clean

200
00:07:25,199 --> 00:07:26,240
version as well

201
00:07:26,240 --> 00:07:28,960
to save some time and the difference

202
00:07:28,960 --> 00:07:29,680
between the

203
00:07:29,680 --> 00:07:31,199
letter clean version is that the fact

204
00:07:31,199 --> 00:07:33,599
that i manually renamed functions and

205
00:07:33,599 --> 00:07:35,440
classes in there already

206
00:07:35,440 --> 00:07:37,599
then we'll talk about how to manually

207
00:07:37,599 --> 00:07:39,919
extract the payload

208
00:07:39,919 --> 00:07:43,039
from the loader because in this case we

209
00:07:43,039 --> 00:07:45,039
have spoiler alert are talking about a

210
00:07:45,039 --> 00:07:46,160
embedded payload

211
00:07:46,160 --> 00:07:48,240
and also the settings for the loader and

212
00:07:48,240 --> 00:07:50,479
then i'll also talk about the automation

213
00:07:50,479 --> 00:07:53,520
of the extraction so

214
00:07:53,520 --> 00:07:56,080
moving on

215
00:07:56,560 --> 00:07:59,520
we have the binary here which is named

216
00:07:59,520 --> 00:08:00,400
re0

217
00:08:00,400 --> 00:08:04,879
underscore v4.bin and i have the inspi

218
00:08:04,879 --> 00:08:08,240
open on the left here now i can drag it

219
00:08:08,240 --> 00:08:08,560
in

220
00:08:08,560 --> 00:08:12,400
and then i can see that it loads it

221
00:08:12,400 --> 00:08:14,800
so i can view whatever is in here and

222
00:08:14,800 --> 00:08:15,599
automatically

223
00:08:15,599 --> 00:08:17,919
pn spy points me to the entry points to

224
00:08:17,919 --> 00:08:19,759
class dot function

225
00:08:19,759 --> 00:08:21,520
so usually this would be your

226
00:08:21,520 --> 00:08:23,759
program.main but in this case we can

227
00:08:23,759 --> 00:08:25,120
already see

228
00:08:25,120 --> 00:08:28,639
that this is not nice to read now diving

229
00:08:28,639 --> 00:08:29,440
into it

230
00:08:29,440 --> 00:08:31,919
we do see that there are some if

231
00:08:31,919 --> 00:08:33,200
statements

232
00:08:33,200 --> 00:08:35,839
some booleans that are either triggering

233
00:08:35,839 --> 00:08:37,039
or not triggering

234
00:08:37,039 --> 00:08:39,599
set if statements and we also see that

235
00:08:39,599 --> 00:08:43,039
the location of the current binary is

236
00:08:43,039 --> 00:08:44,560
stored now this is already named

237
00:08:44,560 --> 00:08:46,800
location and so if we just scroll

238
00:08:46,800 --> 00:08:48,399
through this and in general

239
00:08:48,399 --> 00:08:52,080
the names seem to be less human friendly

240
00:08:52,080 --> 00:08:53,519
but the rest of the code seems pretty

241
00:08:53,519 --> 00:08:56,320
normal so what we can do

242
00:08:56,320 --> 00:09:00,800
is we can move over and use the for dot

243
00:09:00,800 --> 00:09:03,120
in this case i have the for dot here i

244
00:09:03,120 --> 00:09:03,839
provide the

245
00:09:03,839 --> 00:09:06,880
path to my binary itself and i simply

246
00:09:06,880 --> 00:09:09,120
press enter

247
00:09:09,120 --> 00:09:11,760
so then it's the version uh who made it

248
00:09:11,760 --> 00:09:13,200
and then it says it detects an

249
00:09:13,200 --> 00:09:15,360
unknown obfuscator that makes sense

250
00:09:15,360 --> 00:09:16,640
because this is not a

251
00:09:16,640 --> 00:09:18,959
necessarily known applicator in the

252
00:09:18,959 --> 00:09:20,240
sense that there are there is a

253
00:09:20,240 --> 00:09:22,240
recognition in here

254
00:09:22,240 --> 00:09:24,240
but it does clean it and it's also

255
00:09:24,240 --> 00:09:26,399
renaming all obfuscated symbols so all

256
00:09:26,399 --> 00:09:26,959
of the

257
00:09:26,959 --> 00:09:28,480
symbols mean that symbols that are not

258
00:09:28,480 --> 00:09:30,720
nice to read for me

259
00:09:30,720 --> 00:09:32,959
such as the characters that are given

260
00:09:32,959 --> 00:09:33,839
here

261
00:09:33,839 --> 00:09:36,560
so it saved it as the same name but that

262
00:09:36,560 --> 00:09:37,360
dash cleaned

263
00:09:37,360 --> 00:09:39,839
prior to the extension and what we can

264
00:09:39,839 --> 00:09:41,519
do we can just drag this

265
00:09:41,519 --> 00:09:44,880
into the inspire as well

266
00:09:44,880 --> 00:09:47,440
and if i just open the way that the

267
00:09:47,440 --> 00:09:49,200
classes are structured

268
00:09:49,200 --> 00:09:51,040
you can automatically see that instead

269
00:09:51,040 --> 00:09:52,800
of these names we are now looking at

270
00:09:52,800 --> 00:09:56,720
file 0 plus 1 2 3 4 etc

271
00:09:56,720 --> 00:09:59,120
so that just makes it easier to handle

272
00:09:59,120 --> 00:10:00,480
from our side

273
00:10:00,480 --> 00:10:03,200
now if we look here we see that we have

274
00:10:03,200 --> 00:10:04,000
class a dot

275
00:10:04,000 --> 00:10:06,560
main as a main function so i'm just

276
00:10:06,560 --> 00:10:07,760
going to remove this from the list

277
00:10:07,760 --> 00:10:09,360
because that makes life easier

278
00:10:09,360 --> 00:10:12,560
and we can move on to the main function

279
00:10:12,560 --> 00:10:13,839
here

280
00:10:13,839 --> 00:10:16,000
now as you can see the if statements are

281
00:10:16,000 --> 00:10:17,680
also a bit cleaned in the sense that

282
00:10:17,680 --> 00:10:19,920
previously we had a boolean and then the

283
00:10:19,920 --> 00:10:21,440
boolean was evaluated

284
00:10:21,440 --> 00:10:23,440
within the if statements condition

285
00:10:23,440 --> 00:10:25,680
however this has been merged into

286
00:10:25,680 --> 00:10:28,480
one for now which makes it also easier

287
00:10:28,480 --> 00:10:30,720
to look at the code in this sense

288
00:10:30,720 --> 00:10:32,800
so we can still see that the location is

289
00:10:32,800 --> 00:10:35,920
requested of the current application

290
00:10:35,920 --> 00:10:38,959
and if a specific integer

291
00:10:38,959 --> 00:10:42,079
equals one then thread.sleep is called

292
00:10:42,079 --> 00:10:43,920
with a specific value

293
00:10:43,920 --> 00:10:46,000
and this brings us to the usage of these

294
00:10:46,000 --> 00:10:47,839
arrivals within this class where we can

295
00:10:47,839 --> 00:10:49,519
see integer 11 string

296
00:10:49,519 --> 00:10:52,480
2 which is an array of at least 35 in

297
00:10:52,480 --> 00:10:53,440
size

298
00:10:53,440 --> 00:10:55,920
we have integers all over the place as

299
00:10:55,920 --> 00:10:57,680
well as some other methods

300
00:10:57,680 --> 00:10:59,519
and if we were to go down to the

301
00:10:59,519 --> 00:11:01,120
declaration of these

302
00:11:01,120 --> 00:11:03,519
we can see that these all are private

303
00:11:03,519 --> 00:11:04,720
static

304
00:11:04,720 --> 00:11:08,079
fields now we can see here

305
00:11:08,079 --> 00:11:11,120
that for all the strings

306
00:11:11,120 --> 00:11:13,440
because this is the string type and is

307
00:11:13,440 --> 00:11:15,839
returned by the s method 0

308
00:11:15,839 --> 00:11:18,320
which requires an integer every time

309
00:11:18,320 --> 00:11:19,279
this is called

310
00:11:19,279 --> 00:11:21,920
we can see that we get a string in

311
00:11:21,920 --> 00:11:24,399
return so this is some form of

312
00:11:24,399 --> 00:11:27,040
encoding or encryption so if we were to

313
00:11:27,040 --> 00:11:28,240
look into this

314
00:11:28,240 --> 00:11:29,680
we can see that this is more of a

315
00:11:29,680 --> 00:11:31,839
wrapper function and the wrapper

316
00:11:31,839 --> 00:11:32,800
function itself

317
00:11:32,800 --> 00:11:36,079
first blocks instance of the class

318
00:11:36,079 --> 00:11:38,000
it has a result arrival which is

319
00:11:38,000 --> 00:11:39,360
returned based on

320
00:11:39,360 --> 00:11:42,079
whatever is returned here and it does

321
00:11:42,079 --> 00:11:44,240
some

322
00:11:44,240 --> 00:11:47,760
some magic with it either here or if we

323
00:11:47,760 --> 00:11:49,600
go back

324
00:11:49,600 --> 00:11:52,639
it makes the use of this function

325
00:11:52,639 --> 00:11:55,279
which is given below here and this one

326
00:11:55,279 --> 00:11:56,480
is quite lengthy

327
00:11:56,480 --> 00:11:58,800
and also might not be the best

328
00:11:58,800 --> 00:12:01,120
decompilation that we ever had

329
00:12:01,120 --> 00:12:03,920
due to the casting now we were to look

330
00:12:03,920 --> 00:12:04,959
at this

331
00:12:04,959 --> 00:12:08,000
we can immediately see

332
00:12:08,000 --> 00:12:11,040
two things one we can recreate this uh

333
00:12:11,040 --> 00:12:13,600
the dns by gives you the option uh to do

334
00:12:13,600 --> 00:12:15,120
so where you can export

335
00:12:15,120 --> 00:12:18,079
something to a project uh if you do not

336
00:12:18,079 --> 00:12:19,920
use a clean version you will get an

337
00:12:19,920 --> 00:12:23,040
error at least with this program

338
00:12:23,040 --> 00:12:25,440
so the clean version is exportable and

339
00:12:25,440 --> 00:12:27,519
what you can also do is you can break

340
00:12:27,519 --> 00:12:28,079
point

341
00:12:28,079 --> 00:12:31,600
on the return value here or

342
00:12:31,600 --> 00:12:35,600
both you can do it here where the

343
00:12:35,600 --> 00:12:38,720
log is set now what you can do here is

344
00:12:38,720 --> 00:12:40,000
since this is basically a string

345
00:12:40,000 --> 00:12:41,440
decryption function

346
00:12:41,440 --> 00:12:43,519
it requires an argument and then returns

347
00:12:43,519 --> 00:12:45,200
the result so you can basically

348
00:12:45,200 --> 00:12:47,040
dynamically get all the strings

349
00:12:47,040 --> 00:12:49,600
back it's a bit of a tedious tasks and

350
00:12:49,600 --> 00:12:51,120
there are probably other ways as well

351
00:12:51,120 --> 00:12:54,160
to do it but they're not too many in

352
00:12:54,160 --> 00:12:57,440
in this binary itself so if you were to

353
00:12:57,440 --> 00:12:58,320
do this

354
00:12:58,320 --> 00:13:01,920
and i can i can run it here

355
00:13:02,079 --> 00:13:03,760
it doesn't have a valid extension but it

356
00:13:03,760 --> 00:13:05,360
shouldn't matter for our case it hits

357
00:13:05,360 --> 00:13:06,240
the breakpoint

358
00:13:06,240 --> 00:13:09,040
and we can see that integer 3 which is

359
00:13:09,040 --> 00:13:11,760
the argument of the function itself

360
00:13:11,760 --> 00:13:15,360
is given the value minus 1 5 etc

361
00:13:15,360 --> 00:13:17,360
now we were to continue the execution we

362
00:13:17,360 --> 00:13:20,560
should return here and result

363
00:13:20,560 --> 00:13:23,279
we can see here that this is a rather

364
00:13:23,279 --> 00:13:24,160
specific

365
00:13:24,160 --> 00:13:26,480
string so what we can do is we can

366
00:13:26,480 --> 00:13:27,760
create a mapping between the

367
00:13:27,760 --> 00:13:31,519
input argument and the output

368
00:13:31,519 --> 00:13:33,680
and what we can also do is we can use

369
00:13:33,680 --> 00:13:35,440
the analyze function

370
00:13:35,440 --> 00:13:38,079
which you can do with ctrl shift r or

371
00:13:38,079 --> 00:13:40,000
right click as i just did

372
00:13:40,000 --> 00:13:41,760
to find the cross references to this

373
00:13:41,760 --> 00:13:43,120
function

374
00:13:43,120 --> 00:13:45,279
find where it's used and then for each

375
00:13:45,279 --> 00:13:46,160
of the

376
00:13:46,160 --> 00:13:49,360
users um you can use

377
00:13:49,360 --> 00:13:52,639
the you can click find the argument

378
00:13:52,639 --> 00:13:54,880
and instead of going over it because not

379
00:13:54,880 --> 00:13:56,639
all functions might be reached

380
00:13:56,639 --> 00:14:00,079
so in this case we saw the hit

381
00:14:00,079 --> 00:14:02,720
and i know this by a heart so it's not

382
00:14:02,720 --> 00:14:04,720
as if there should be a hint in this

383
00:14:04,720 --> 00:14:05,519
case

384
00:14:05,519 --> 00:14:09,199
if we go down then this is the

385
00:14:09,199 --> 00:14:12,240
first string here

386
00:14:12,240 --> 00:14:15,839
that we just saw being decrypted so

387
00:14:15,839 --> 00:14:19,199
if we were to move the

388
00:14:19,199 --> 00:14:22,880
execution from here which is in line 76

389
00:14:22,880 --> 00:14:23,760
the return

390
00:14:23,760 --> 00:14:26,880
we can also move it back to the lock so

391
00:14:26,880 --> 00:14:27,760
what we can do

392
00:14:27,760 --> 00:14:31,440
is we can set next data control shift 10

393
00:14:31,440 --> 00:14:34,399
on line 64 and then instead of exiting

394
00:14:34,399 --> 00:14:36,079
the function we're actually basically

395
00:14:36,079 --> 00:14:39,120
at the top now what we can also do in

396
00:14:39,120 --> 00:14:40,160
the

397
00:14:40,160 --> 00:14:43,360
local tab on the bottom we can change

398
00:14:43,360 --> 00:14:44,079
the value

399
00:14:44,079 --> 00:14:47,360
here to a different one so if we were

400
00:14:47,360 --> 00:14:51,199
to uh to go back to one of the

401
00:14:51,199 --> 00:14:54,639
get a nice view of that

402
00:14:54,880 --> 00:14:57,360
let's see if we were to take uh what

403
00:14:57,360 --> 00:14:58,560
else is

404
00:14:58,560 --> 00:15:01,600
is used in this case we can see

405
00:15:01,600 --> 00:15:04,880
here that this is a string array

406
00:15:04,880 --> 00:15:08,639
but the string array is split based on

407
00:15:08,639 --> 00:15:11,440
some value so this is one of the

408
00:15:11,440 --> 00:15:13,519
functions and this is another so we can

409
00:15:13,519 --> 00:15:15,040
take this value

410
00:15:15,040 --> 00:15:19,279
we can copy that and we can put it in

411
00:15:19,279 --> 00:15:22,399
the value here so this ends on

412
00:15:22,399 --> 00:15:24,880
605 that's in there but now we have 7.9

413
00:15:24,880 --> 00:15:26,320
which we copied

414
00:15:26,320 --> 00:15:29,920
and if we were then to go back here

415
00:15:29,920 --> 00:15:32,079
would continue the execution you can see

416
00:15:32,079 --> 00:15:34,000
that we have two pipes

417
00:15:34,000 --> 00:15:35,519
which is basically the splitter for

418
00:15:35,519 --> 00:15:37,759
these settings

419
00:15:37,759 --> 00:15:40,000
now if you do this then a lot of the

420
00:15:40,000 --> 00:15:41,680
other functions will become apparent as

421
00:15:41,680 --> 00:15:43,279
well

422
00:15:43,279 --> 00:15:45,920
but in this case we will be cheating and

423
00:15:45,920 --> 00:15:48,320
we'll be swapping over to a.mat project

424
00:15:48,320 --> 00:15:51,839
that i created up front where i renamed

425
00:15:51,839 --> 00:15:55,199
the classes functions and fields

426
00:15:55,199 --> 00:15:58,720
now as you can see the value that was

427
00:15:58,720 --> 00:15:59,519
obtained here

428
00:15:59,519 --> 00:16:01,759
is 30. it does it times a thousand

429
00:16:01,759 --> 00:16:03,199
because it requires

430
00:16:03,199 --> 00:16:06,320
you to put it in as milliseconds whereas

431
00:16:06,320 --> 00:16:07,120
these settings

432
00:16:07,120 --> 00:16:10,480
is easier to write it with uh in seconds

433
00:16:10,480 --> 00:16:12,160
so they do it times a thousand for you

434
00:16:12,160 --> 00:16:12,959
so

435
00:16:12,959 --> 00:16:16,079
uh it should sleep in this case

436
00:16:16,079 --> 00:16:19,440
so this is true uh and the

437
00:16:19,440 --> 00:16:21,279
comments here for true and false they

438
00:16:21,279 --> 00:16:22,959
are put there because

439
00:16:22,959 --> 00:16:27,279
the sample has a specific configuration

440
00:16:27,279 --> 00:16:29,600
whereas the loader has more capabilities

441
00:16:29,600 --> 00:16:32,720
than this specific sample uses

442
00:16:32,720 --> 00:16:35,680
now if we were to wait for this then you

443
00:16:35,680 --> 00:16:37,199
could wait for 30 seconds or you could

444
00:16:37,199 --> 00:16:38,000
skip it

445
00:16:38,000 --> 00:16:39,759
and we can see that it could display a

446
00:16:39,759 --> 00:16:41,759
message box in this case that is false

447
00:16:41,759 --> 00:16:43,279
so it's not going to display a message

448
00:16:43,279 --> 00:16:45,440
box for us

449
00:16:45,440 --> 00:16:50,079
but it should detect the uh

450
00:16:50,079 --> 00:16:51,680
sorry it shouldn't detect the virtual

451
00:16:51,680 --> 00:16:53,759
environment and

452
00:16:53,759 --> 00:16:57,920
and it has a function and a check so the

453
00:16:57,920 --> 00:17:01,440
check here is put there

454
00:17:01,440 --> 00:17:03,680
based on the settings that are within

455
00:17:03,680 --> 00:17:04,720
the loader

456
00:17:04,720 --> 00:17:06,400
and then we have the function itself to

457
00:17:06,400 --> 00:17:08,160
detect the virtual environment now we're

458
00:17:08,160 --> 00:17:10,880
to look into that

459
00:17:10,880 --> 00:17:14,640
here we can see that we have a check

460
00:17:14,640 --> 00:17:17,199
to get values from the registry and then

461
00:17:17,199 --> 00:17:18,640
to check if it contains a

462
00:17:18,640 --> 00:17:20,559
certain value so in this case it checks

463
00:17:20,559 --> 00:17:22,640
for vbox virtualbox

464
00:17:22,640 --> 00:17:25,679
vmware um

465
00:17:25,679 --> 00:17:27,199
and there are quite some different

466
00:17:27,199 --> 00:17:28,640
things here so it checks for the

467
00:17:28,640 --> 00:17:31,120
graphics adapter for example

468
00:17:31,120 --> 00:17:35,039
it checks for the for wine in this case

469
00:17:35,039 --> 00:17:37,840
if you were to run and emulate it and

470
00:17:37,840 --> 00:17:39,919
then it either returns true or false if

471
00:17:39,919 --> 00:17:42,320
it happens

472
00:17:43,120 --> 00:17:44,799
and if it if it should check and it

473
00:17:44,799 --> 00:17:46,960
finds something because then both are

474
00:17:46,960 --> 00:17:47,440
true

475
00:17:47,440 --> 00:17:49,919
then the program exits so it just

476
00:17:49,919 --> 00:17:52,799
cancels itself when it's running in here

477
00:17:52,799 --> 00:17:55,120
so it can also detect sandboxes and it

478
00:17:55,120 --> 00:17:56,640
works based on the same

479
00:17:56,640 --> 00:17:58,559
thing but in here it uses an argument

480
00:17:58,559 --> 00:17:59,919
which is the location which is the

481
00:17:59,919 --> 00:18:01,840
current location of this program

482
00:18:01,840 --> 00:18:03,679
uh wherever it's running from it gets a

483
00:18:03,679 --> 00:18:05,919
location passes it here

484
00:18:05,919 --> 00:18:07,520
now in this case it shouldn't detect the

485
00:18:07,520 --> 00:18:09,679
sandboxes but if it worked

486
00:18:09,679 --> 00:18:12,240
then we can see here that it looks for

487
00:18:12,240 --> 00:18:14,240
different versions

488
00:18:14,240 --> 00:18:15,919
again so this is quite a lengthy

489
00:18:15,919 --> 00:18:17,840
function on the horizontal

490
00:18:17,840 --> 00:18:20,799
scroller so you can see that it checks

491
00:18:20,799 --> 00:18:22,080
for the string symbols

492
00:18:22,080 --> 00:18:25,760
virus malware schmitty

493
00:18:25,760 --> 00:18:28,640
current user virus sandbox so there are

494
00:18:28,640 --> 00:18:30,640
quite some fields in here that it checks

495
00:18:30,640 --> 00:18:33,360
based on this

496
00:18:34,080 --> 00:18:38,320
now should it download and run a payload

497
00:18:38,320 --> 00:18:41,039
if that's the case then it uses the file

498
00:18:41,039 --> 00:18:42,320
name and the url

499
00:18:42,320 --> 00:18:45,440
from these settings and then it does

500
00:18:45,440 --> 00:18:46,320
that so

501
00:18:46,320 --> 00:18:48,160
to dive a bit more into the settings

502
00:18:48,160 --> 00:18:49,679
itself

503
00:18:49,679 --> 00:18:52,880
it's a bit simplified here but what you

504
00:18:52,880 --> 00:18:53,440
can see

505
00:18:53,440 --> 00:18:56,559
is the fact that it takes the resource

506
00:18:56,559 --> 00:18:57,679
name

507
00:18:57,679 --> 00:18:59,200
it gets the payload and you have the

508
00:18:59,200 --> 00:19:01,840
settings string which they are numbers

509
00:19:01,840 --> 00:19:04,400
and all these numbers are parsed by

510
00:19:04,400 --> 00:19:05,440
splitting on pipes

511
00:19:05,440 --> 00:19:07,200
like we saw before when we did the

512
00:19:07,200 --> 00:19:08,640
dynamic run

513
00:19:08,640 --> 00:19:11,600
now based on the settings uh we can in

514
00:19:11,600 --> 00:19:13,600
the non-simplified version it just

515
00:19:13,600 --> 00:19:16,720
gets a specific index so for the shoot

516
00:19:16,720 --> 00:19:18,000
set schedule task

517
00:19:18,000 --> 00:19:20,320
uh it's one here but that is taken from

518
00:19:20,320 --> 00:19:22,320
a specific index from the

519
00:19:22,320 --> 00:19:25,840
uh from the array and where the settings

520
00:19:25,840 --> 00:19:27,919
are saved

521
00:19:27,919 --> 00:19:29,919
so we have the same for the url we also

522
00:19:29,919 --> 00:19:31,840
have that for the download file name so

523
00:19:31,840 --> 00:19:32,559
it gets

524
00:19:32,559 --> 00:19:36,480
the file and then it puts it somewhere

525
00:19:36,480 --> 00:19:38,320
so we can we can look at the code there

526
00:19:38,320 --> 00:19:40,320
it just starts a new web client

527
00:19:40,320 --> 00:19:42,799
uh it gets a temporary path adds the

528
00:19:42,799 --> 00:19:43,520
file name

529
00:19:43,520 --> 00:19:46,480
downloads it saves it as a required path

530
00:19:46,480 --> 00:19:46,960
and just

531
00:19:46,960 --> 00:19:49,200
starts the process so you can download

532
00:19:49,200 --> 00:19:50,720
and run anything

533
00:19:50,720 --> 00:19:52,320
as long as you have internet at this

534
00:19:52,320 --> 00:19:54,640
point

535
00:19:54,640 --> 00:19:57,360
now we continue we can also see that it

536
00:19:57,360 --> 00:19:59,280
has the possibility to set a scheduled

537
00:19:59,280 --> 00:19:59,840
task

538
00:19:59,840 --> 00:20:02,720
which is used for persistence which

539
00:20:02,720 --> 00:20:03,679
should be one

540
00:20:03,679 --> 00:20:05,600
to be true and in this case it is true

541
00:20:05,600 --> 00:20:07,440
so this loader actually sets a scheduled

542
00:20:07,440 --> 00:20:08,799
task

543
00:20:08,799 --> 00:20:11,919
it takes the application data folder

544
00:20:11,919 --> 00:20:15,200
then it adds the file name and it

545
00:20:15,200 --> 00:20:18,840
adds exe to the end so if it already

546
00:20:18,840 --> 00:20:22,400
exists because only the first run should

547
00:20:22,400 --> 00:20:22,960
do this

548
00:20:22,960 --> 00:20:24,799
and then the second one shouldn't

549
00:20:24,799 --> 00:20:26,080
because otherwise

550
00:20:26,080 --> 00:20:27,679
the file is already present so you need

551
00:20:27,679 --> 00:20:29,760
to handle that somehow which they did by

552
00:20:29,760 --> 00:20:31,840
checking if the file exists

553
00:20:31,840 --> 00:20:33,600
if it doesn't because the exclamation

554
00:20:33,600 --> 00:20:36,880
mark in front it will copy the file

555
00:20:36,880 --> 00:20:39,440
and then it will set a scheduled task

556
00:20:39,440 --> 00:20:40,080
now the

557
00:20:40,080 --> 00:20:42,480
way this scheduled task is set is

558
00:20:42,480 --> 00:20:45,440
basically by running

559
00:20:45,600 --> 00:20:47,919
the new process the scheduled tasks

560
00:20:47,919 --> 00:20:49,520
process and then it adds it as an

561
00:20:49,520 --> 00:20:51,600
argument

562
00:20:51,600 --> 00:20:53,200
it does it hidden so you shouldn't see

563
00:20:53,200 --> 00:20:54,960
anything as a user

564
00:20:54,960 --> 00:20:57,360
and deletes the the file afterwards the

565
00:20:57,360 --> 00:21:02,000
temp file that is

566
00:21:02,000 --> 00:21:04,159
then we have different ways of launching

567
00:21:04,159 --> 00:21:06,159
as we can directly launch the keyboard

568
00:21:06,159 --> 00:21:07,440
if that's

569
00:21:07,440 --> 00:21:09,840
present but this loads it as an assembly

570
00:21:09,840 --> 00:21:11,440
so that means that the payload should be

571
00:21:11,440 --> 00:21:12,960
a.net based binary

572
00:21:12,960 --> 00:21:14,720
and then it just invokes the actual

573
00:21:14,720 --> 00:21:16,000
points with the given

574
00:21:16,000 --> 00:21:19,840
parameter if this fails and that also

575
00:21:19,840 --> 00:21:24,240
is not where i wanted to go

576
00:21:24,320 --> 00:21:28,240
if we go back to the main function here

577
00:21:28,960 --> 00:21:31,200
if that fails uh or if this is false and

578
00:21:31,200 --> 00:21:32,960
this is true which is in our case

579
00:21:32,960 --> 00:21:35,360
then it should launch the payload

580
00:21:35,360 --> 00:21:36,080
hollowed

581
00:21:36,080 --> 00:21:38,640
so by process following it uh it gets

582
00:21:38,640 --> 00:21:40,080
the values that are required we have the

583
00:21:40,080 --> 00:21:41,840
pe payload

584
00:21:41,840 --> 00:21:44,240
which is a byte area that is passed it

585
00:21:44,240 --> 00:21:45,360
gets the location

586
00:21:45,360 --> 00:21:48,559
and the last value is

587
00:21:48,559 --> 00:21:51,679
a boolean label zero is also passed to

588
00:21:51,679 --> 00:21:53,120
the whole process it does this five

589
00:21:53,120 --> 00:21:53,760
times

590
00:21:53,760 --> 00:21:56,799
or at least it attempts to this already

591
00:21:56,799 --> 00:21:58,640
struck me because i saw the same code

592
00:21:58,640 --> 00:22:00,400
before this is taken from the indicator

593
00:22:00,400 --> 00:22:02,080
above the nion x cat

594
00:22:02,080 --> 00:22:05,120
which is used to launch a uh well

595
00:22:05,120 --> 00:22:08,000
float process via net and then it

596
00:22:08,000 --> 00:22:09,360
creates the process and

597
00:22:09,360 --> 00:22:12,480
it does the usual steps basically get

598
00:22:12,480 --> 00:22:12,960
these

599
00:22:12,960 --> 00:22:16,720
contacts for either 32 or 64-bit read it

600
00:22:16,720 --> 00:22:19,919
and add your segment and then oh in a

601
00:22:19,919 --> 00:22:22,080
simplified form refer the control later

602
00:22:22,080 --> 00:22:23,760
on back to it

603
00:22:23,760 --> 00:22:26,159
if you have more questions on this i

604
00:22:26,159 --> 00:22:27,760
have a more detailed

605
00:22:27,760 --> 00:22:30,799
write-up on this part so after i was

606
00:22:30,799 --> 00:22:31,280
done

607
00:22:31,280 --> 00:22:34,080
analyzing this

608
00:22:34,400 --> 00:22:36,720
i was i was mainly wondering about one

609
00:22:36,720 --> 00:22:38,159
thing which is how to

610
00:22:38,159 --> 00:22:41,360
get the payload automatically because

611
00:22:41,360 --> 00:22:43,600
uh then i could search for the loader

612
00:22:43,600 --> 00:22:45,360
and do this in bulk

613
00:22:45,360 --> 00:22:47,360
and that's where i found the the flaw in

614
00:22:47,360 --> 00:22:49,039
the loader which is the fact that they

615
00:22:49,039 --> 00:22:50,799
made it static

616
00:22:50,799 --> 00:22:53,760
so what you also saw is that i put a

617
00:22:53,760 --> 00:22:54,960
breakpoint

618
00:22:54,960 --> 00:22:58,320
to in here

619
00:22:58,320 --> 00:23:01,200
i put it in this function but if we were

620
00:23:01,200 --> 00:23:01,919
to put a

621
00:23:01,919 --> 00:23:04,159
breakpoint on main here i would run this

622
00:23:04,159 --> 00:23:06,840
then we don't hit the main breakpoint

623
00:23:06,840 --> 00:23:08,240
first

624
00:23:08,240 --> 00:23:10,320
so i want to run this you see we first

625
00:23:10,320 --> 00:23:12,720
get into the string decryption function

626
00:23:12,720 --> 00:23:16,559
and that makes sense because

627
00:23:16,559 --> 00:23:20,480
if we were to in fact the values that we

628
00:23:20,480 --> 00:23:22,720
saw here below main

629
00:23:22,720 --> 00:23:25,039
or rather here for the byte array you

630
00:23:25,039 --> 00:23:26,480
can see that it's static

631
00:23:26,480 --> 00:23:28,720
meaning it's loaded before the main

632
00:23:28,720 --> 00:23:30,400
function is reached

633
00:23:30,400 --> 00:23:33,120
now if we were to have a look at the

634
00:23:33,120 --> 00:23:33,679
normal

635
00:23:33,679 --> 00:23:36,000
readable code and you can see that it

636
00:23:36,000 --> 00:23:38,080
gets the resource by name

637
00:23:38,080 --> 00:23:40,400
and then it decrypts phase one phase two

638
00:23:40,400 --> 00:23:41,279
and then you have the

639
00:23:41,279 --> 00:23:43,520
payload but before you enter main so

640
00:23:43,520 --> 00:23:45,440
before they do all the checks

641
00:23:45,440 --> 00:23:48,159
uh if it's a virtual environment or not

642
00:23:48,159 --> 00:23:50,640
then you already have the full decrypted

643
00:23:50,640 --> 00:23:53,600
payload in your memory now in this case

644
00:23:53,600 --> 00:23:54,799
um

645
00:23:54,799 --> 00:23:56,640
what i did is i wrote an extractor for

646
00:23:56,640 --> 00:23:58,880
this you basically

647
00:23:58,880 --> 00:24:01,600
provide it to a folder and then it gets

648
00:24:01,600 --> 00:24:03,200
all files in there

649
00:24:03,200 --> 00:24:07,120
and then it iterates over them

650
00:24:07,120 --> 00:24:10,000
and if we go here the logic in itself is

651
00:24:10,000 --> 00:24:11,279
pretty simple so i

652
00:24:11,279 --> 00:24:13,760
provided some feedback for the user so

653
00:24:13,760 --> 00:24:15,520
it writes a line like parsing this file

654
00:24:15,520 --> 00:24:16,400
now

655
00:24:16,400 --> 00:24:19,919
and it loads the assembly

656
00:24:19,919 --> 00:24:21,919
so this is assuming it's it's net based

657
00:24:21,919 --> 00:24:23,600
but we know it is because this is

658
00:24:23,600 --> 00:24:26,799
a.net based loader and then we

659
00:24:26,799 --> 00:24:30,400
iterate over the types within the file

660
00:24:30,400 --> 00:24:33,520
then we overall the fields and i

661
00:24:33,520 --> 00:24:35,440
am specifically interested in non-public

662
00:24:35,440 --> 00:24:37,120
static fields so non-public

663
00:24:37,120 --> 00:24:39,200
i the private field that we're talking

664
00:24:39,200 --> 00:24:40,640
about and it should be static so it's a

665
00:24:40,640 --> 00:24:41,840
private static

666
00:24:41,840 --> 00:24:44,799
field which is correct because this is a

667
00:24:44,799 --> 00:24:47,600
private static byte array

668
00:24:47,600 --> 00:24:50,559
now if we were to uh dive deeper into

669
00:24:50,559 --> 00:24:52,240
that we iterate over all of these

670
00:24:52,240 --> 00:24:55,360
and they're only 10-ish classes so with

671
00:24:55,360 --> 00:24:56,559
a few fields each

672
00:24:56,559 --> 00:24:59,520
so that should be pretty fast than it is

673
00:24:59,520 --> 00:25:01,200
so then i want to get the value

674
00:25:01,200 --> 00:25:02,960
from that field that we're talking about

675
00:25:02,960 --> 00:25:04,480
when iterating all these

676
00:25:04,480 --> 00:25:07,679
and then i check if the value

677
00:25:07,679 --> 00:25:10,400
type is equal to byte array well in case

678
00:25:10,400 --> 00:25:11,600
it is

679
00:25:11,600 --> 00:25:14,320
i dump it to the disk but i have an

680
00:25:14,320 --> 00:25:15,600
additional parameter here

681
00:25:15,600 --> 00:25:17,760
is i want to make sure that the first

682
00:25:17,760 --> 00:25:19,520
byte of the payload is 4d

683
00:25:19,520 --> 00:25:21,440
and i want to make sure the second byte

684
00:25:21,440 --> 00:25:23,120
is 5a

685
00:25:23,120 --> 00:25:25,520
now for those who have either done stuff

686
00:25:25,520 --> 00:25:28,400
before or

687
00:25:28,640 --> 00:25:32,480
this is the mz header that's present

688
00:25:32,480 --> 00:25:35,279
and so we just dump the full array and

689
00:25:35,279 --> 00:25:37,520
then we have the payload

690
00:25:37,520 --> 00:25:40,559
so i can run this and then

691
00:25:40,559 --> 00:25:42,880
to start but in here we should see the

692
00:25:42,880 --> 00:25:45,039
uh the output

693
00:25:45,039 --> 00:25:46,480
as you can see it found two files it

694
00:25:46,480 --> 00:25:48,320
found both a clean one and an unclean

695
00:25:48,320 --> 00:25:49,039
one

696
00:25:49,039 --> 00:25:51,679
and it also prints the size of whatever

697
00:25:51,679 --> 00:25:52,640
we dumped

698
00:25:52,640 --> 00:25:54,880
so that should be the same in both cases

699
00:25:54,880 --> 00:25:56,000
and we can also see that

700
00:25:56,000 --> 00:25:59,200
it got the settings the settings it's a

701
00:25:59,200 --> 00:26:00,559
bit of a boring part although it's

702
00:26:00,559 --> 00:26:02,320
useful when you print it out

703
00:26:02,320 --> 00:26:04,080
if the value is not a byte array but a

704
00:26:04,080 --> 00:26:06,240
string array then i parse the

705
00:26:06,240 --> 00:26:09,600
settings manually so i just iterate over

706
00:26:09,600 --> 00:26:10,000
everything

707
00:26:10,000 --> 00:26:12,720
and see what is present and whatnot and

708
00:26:12,720 --> 00:26:14,960
if it's present i print it

709
00:26:14,960 --> 00:26:17,679
so uh that gives us this result so you

710
00:26:17,679 --> 00:26:20,000
can now do this in bulk

711
00:26:20,000 --> 00:26:23,039
so the output here is the same and if we

712
00:26:23,039 --> 00:26:23,679
were to

713
00:26:23,679 --> 00:26:26,720
drag the output which is the extracted

714
00:26:26,720 --> 00:26:27,840
one

715
00:26:27,840 --> 00:26:29,200
this is the one that's cleaned and

716
00:26:29,200 --> 00:26:32,080
extracted and then we can put that in

717
00:26:32,080 --> 00:26:35,679
the for sorry in dn spy now if we do

718
00:26:35,679 --> 00:26:37,760
that

719
00:26:37,760 --> 00:26:40,159
then you will see that it says vino

720
00:26:40,159 --> 00:26:42,000
which is a next step

721
00:26:42,000 --> 00:26:44,960
in the binary you can see again that

722
00:26:44,960 --> 00:26:46,559
it's not really human readable it uses

723
00:26:46,559 --> 00:26:48,080
costumera

724
00:26:48,080 --> 00:26:51,039
which is a different obfuscator but at

725
00:26:51,039 --> 00:26:52,080
least we have the

726
00:26:52,080 --> 00:26:55,360
second stage here so this works and

727
00:26:55,360 --> 00:26:58,320
we can also double check this and i have

728
00:26:58,320 --> 00:26:59,600
two minutes left so that's

729
00:26:59,600 --> 00:27:03,919
perfectly on time and what i can do here

730
00:27:03,919 --> 00:27:06,799
is i can go back to this class and if i

731
00:27:06,799 --> 00:27:07,279
then go

732
00:27:07,279 --> 00:27:10,880
down i can put a breakpoint on

733
00:27:10,880 --> 00:27:13,919
the byte array itself because now i

734
00:27:13,919 --> 00:27:15,679
should do the automatic dumping what we

735
00:27:15,679 --> 00:27:16,159
can do

736
00:27:16,159 --> 00:27:19,200
here is and here as well for the next

737
00:27:19,200 --> 00:27:19,679
one

738
00:27:19,679 --> 00:27:23,840
if i run this yes i want to run it and

739
00:27:23,840 --> 00:27:27,039
mine the file extension i can remove

740
00:27:27,039 --> 00:27:30,240
these breakpoints and then i'll

741
00:27:30,240 --> 00:27:33,760
end up here so what i can do is i can

742
00:27:33,760 --> 00:27:35,600
step over

743
00:27:35,600 --> 00:27:39,440
and then you can see the return values

744
00:27:39,440 --> 00:27:43,679
so what we can see here is that the

745
00:27:43,679 --> 00:27:45,120
we don't want to view a thousand child

746
00:27:45,120 --> 00:27:48,000
items but what we see here is that the

747
00:27:48,000 --> 00:27:51,600
uh s method zero return something at 2.1

748
00:27:51,600 --> 00:27:53,360
return something so what we're mostly

749
00:27:53,360 --> 00:27:54,159
interested in is

750
00:27:54,159 --> 00:27:56,080
s method one from class three because

751
00:27:56,080 --> 00:27:57,840
that's the final function

752
00:27:57,840 --> 00:28:00,880
uh because these all fit together uh so

753
00:28:00,880 --> 00:28:02,880
from this

754
00:28:02,880 --> 00:28:04,960
uh what i want to see is i want to show

755
00:28:04,960 --> 00:28:06,640
this in the memory window

756
00:28:06,640 --> 00:28:08,559
one in this case and then you can also

757
00:28:08,559 --> 00:28:10,880
see here that it starts with mz

758
00:28:10,880 --> 00:28:14,640
so what we can do is uh we can

759
00:28:14,640 --> 00:28:17,760
save this to disk

760
00:28:20,200 --> 00:28:22,720
manual.exe

761
00:28:22,720 --> 00:28:25,279
avoid accidental execution stop the

762
00:28:25,279 --> 00:28:26,960
execution here because right now we have

763
00:28:26,960 --> 00:28:27,600
the file

764
00:28:27,600 --> 00:28:32,320
and if we move over the end spot

765
00:28:32,320 --> 00:28:37,200
up here and we can load the manual

766
00:28:37,200 --> 00:28:40,159
you can also see that it says the phenol

767
00:28:40,159 --> 00:28:41,600
if i open this further you can see the

768
00:28:41,600 --> 00:28:42,399
acoustic

769
00:28:42,399 --> 00:28:45,440
and the other data here

770
00:28:45,440 --> 00:28:47,279
so that's the manual version and the

771
00:28:47,279 --> 00:28:50,480
other one is for bulk

772
00:28:50,480 --> 00:28:52,880
moves to the last part which is are

773
00:28:52,880 --> 00:28:59,840
there any questions in the chat

774
00:29:16,799 --> 00:29:20,399
seems like we're good just waiting a

775
00:29:20,399 --> 00:29:26,880
little bit

776
00:29:26,880 --> 00:29:29,440
if something pops in anyone's mind later

777
00:29:29,440 --> 00:29:32,640
on uh my dms on twitter are open as well

778
00:29:32,640 --> 00:29:34,559
you can just uh bring me a message and

779
00:29:34,559 --> 00:29:36,240
i'll get back to you on this

780
00:29:36,240 --> 00:29:38,559
for those who want to view these slides

781
00:29:38,559 --> 00:29:39,760
themselves

782
00:29:39,760 --> 00:29:41,679
just give me 15 minutes and the slides

783
00:29:41,679 --> 00:29:44,080
will be up

784
00:29:44,080 --> 00:29:45,919
awesome thanks again little for that

785
00:29:45,919 --> 00:29:47,679
that's super appreciated

786
00:29:47,679 --> 00:29:50,399
uh we'll publish your slide on the

787
00:29:50,399 --> 00:29:51,520
discord

788
00:29:51,520 --> 00:29:54,799
in on the youtube video at a later time

789
00:29:54,799 --> 00:29:55,279
so

790
00:29:55,279 --> 00:29:57,279
thanks again and we see everyone in the

791
00:29:57,279 --> 00:29:59,919
next conference in a few minutes

792
00:29:59,919 --> 00:30:01,600
yes thank you very much and i wish

793
00:30:01,600 --> 00:30:03,760
everybody enjoyable

794
00:30:03,760 --> 00:30:06,799
access holidays

