1
00:00:04,000 --> 00:00:04,960
so we are now

2
00:00:04,960 --> 00:00:08,080
currently in a workshop so

3
00:00:08,080 --> 00:00:13,360
uh this is a hands-on um basically um

4
00:00:13,360 --> 00:00:16,239
work and a session so that will involve

5
00:00:16,239 --> 00:00:17,840
having a live exercise

6
00:00:17,840 --> 00:00:20,480
so you can follow along and just listen

7
00:00:20,480 --> 00:00:21,920
for the content

8
00:00:21,920 --> 00:00:24,160
but obviously the the big benefit of

9
00:00:24,160 --> 00:00:25,920
having exercise

10
00:00:25,920 --> 00:00:28,840
and live application is to do it

11
00:00:28,840 --> 00:00:30,320
yourself uh

12
00:00:30,320 --> 00:00:32,079
for this workshop actually it's pretty

13
00:00:32,079 --> 00:00:34,559
easy you should be able with just a

14
00:00:34,559 --> 00:00:35,600
browser

15
00:00:35,600 --> 00:00:39,280
do uh i think all the exercise

16
00:00:39,280 --> 00:00:41,840
some exercise will be a bit easier if

17
00:00:41,840 --> 00:00:42,960
you have for example

18
00:00:42,960 --> 00:00:46,160
burke or zap so uh

19
00:00:46,160 --> 00:00:48,480
the first thing uh you're gonna need to

20
00:00:48,480 --> 00:00:49,600
do

21
00:00:49,600 --> 00:00:52,559
uh if you want to follow along is uh

22
00:00:52,559 --> 00:00:53,280
first

23
00:00:53,280 --> 00:00:56,559
get to this url so

24
00:00:56,559 --> 00:00:59,600
uh template dash injection

25
00:00:59,600 --> 00:01:03,840
dot go sec that's you so this will be

26
00:01:03,840 --> 00:01:07,119
um the matter also instead of slides

27
00:01:07,119 --> 00:01:10,960
it's a format it's a tool called

28
00:01:10,960 --> 00:01:14,880
codelabs by google and they basically

29
00:01:14,880 --> 00:01:18,000
give you templates to produce

30
00:01:18,000 --> 00:01:21,600
this type of tutorial so you'll have

31
00:01:21,600 --> 00:01:24,240
the agenda on the left so all the

32
00:01:24,240 --> 00:01:26,560
modules that we'll do today

33
00:01:26,560 --> 00:01:30,159
and in the middle you'll see the content

34
00:01:30,159 --> 00:01:31,680
for each of the exercises so one

35
00:01:31,680 --> 00:01:33,920
exercise for example we look like this

36
00:01:33,920 --> 00:01:35,600
we have the theory and then

37
00:01:35,600 --> 00:01:39,680
you have the link to the exercise

38
00:01:39,680 --> 00:01:42,640
philip can you put the url in the chat

39
00:01:42,640 --> 00:01:44,240
so it will be easier for people

40
00:01:44,240 --> 00:01:49,119
yes okay perfect um makes sense

41
00:01:49,119 --> 00:01:52,560
so you can just click on the

42
00:01:52,560 --> 00:01:55,920
on the chat there will be a link um

43
00:01:55,920 --> 00:01:58,000
i will start with some theories so don't

44
00:01:58,000 --> 00:01:59,040
worry uh

45
00:01:59,040 --> 00:02:02,240
if you are not yet ready but

46
00:02:02,240 --> 00:02:05,280
uh yeah so i'll keep the link there

47
00:02:05,280 --> 00:02:08,318
after this workshop is completed the

48
00:02:08,318 --> 00:02:10,878
all the sixth application that will be

49
00:02:10,878 --> 00:02:11,360
running

50
00:02:11,360 --> 00:02:13,040
will continue for at least the rest of

51
00:02:13,040 --> 00:02:14,400
the day

52
00:02:14,400 --> 00:02:16,959
after that uh there will be a link

53
00:02:16,959 --> 00:02:18,319
published

54
00:02:18,319 --> 00:02:21,440
on a go seeker twitter to uh

55
00:02:21,440 --> 00:02:23,200
the basically the archive of those

56
00:02:23,200 --> 00:02:24,640
slides so they will not they will no

57
00:02:24,640 --> 00:02:25,360
longer

58
00:02:25,360 --> 00:02:28,080
be hosted at this url but you'll still

59
00:02:28,080 --> 00:02:28,800
be able to

60
00:02:28,800 --> 00:02:31,840
uh run them yourself locally so

61
00:02:31,840 --> 00:02:34,000
i'll be publishing all the docker recipe

62
00:02:34,000 --> 00:02:36,560
and the code for all the six application

63
00:02:36,560 --> 00:02:38,720
so this way you'll be able to play on

64
00:02:38,720 --> 00:02:39,680
your own

65
00:02:39,680 --> 00:02:43,599
and experiment with those exercises

66
00:02:43,920 --> 00:02:48,239
so now that the format is explained

67
00:02:48,239 --> 00:02:51,040
i'll start so this workshop is about

68
00:02:51,040 --> 00:02:51,680
template

69
00:02:51,680 --> 00:02:55,120
injection it's not a new uh

70
00:02:55,120 --> 00:02:57,680
vector of attack but this is one that

71
00:02:57,680 --> 00:02:58,720
i've evolved

72
00:02:58,720 --> 00:03:03,120
uh greatly um in the past few years so

73
00:03:03,120 --> 00:03:05,519
the main uh talk i would say that

74
00:03:05,519 --> 00:03:07,440
introduced the subject was in

75
00:03:07,440 --> 00:03:11,360
2015 uh james kital did a great survey

76
00:03:11,360 --> 00:03:12,159
of all

77
00:03:12,159 --> 00:03:14,879
the template engine and basically

78
00:03:14,879 --> 00:03:15,680
realized

79
00:03:15,680 --> 00:03:19,280
many web applications or exposing

80
00:03:19,280 --> 00:03:22,400
a template to their user meaning you

81
00:03:22,400 --> 00:03:23,280
might have

82
00:03:23,280 --> 00:03:26,480
a marketing application that is

83
00:03:26,480 --> 00:03:29,200
having templates for emails and if

84
00:03:29,200 --> 00:03:30,480
instead of adding just

85
00:03:30,480 --> 00:03:33,599
static email application

86
00:03:33,599 --> 00:03:36,959
and give you the option to have some

87
00:03:36,959 --> 00:03:38,959
placeholder for maybe

88
00:03:38,959 --> 00:03:41,440
first name last name some information

89
00:03:41,440 --> 00:03:42,720
that is dynamic

90
00:03:42,720 --> 00:03:46,879
depending on on the user so

91
00:03:46,879 --> 00:03:49,440
in the end the end user so it's not a

92
00:03:49,440 --> 00:03:50,400
developer

93
00:03:50,400 --> 00:03:52,159
somebody that is using a web application

94
00:03:52,159 --> 00:03:55,359
will exit templates

95
00:03:55,599 --> 00:03:59,599
so uh yeah so jskidal was the first one

96
00:03:59,599 --> 00:04:00,080
and the

97
00:04:00,080 --> 00:04:03,680
the id uh most of those exercises i

98
00:04:03,680 --> 00:04:06,319
built them um three or four years ago

99
00:04:06,319 --> 00:04:07,760
but this year there was a really

100
00:04:07,760 --> 00:04:09,040
interesting talk

101
00:04:09,040 --> 00:04:12,319
at blackhead and i wanted to update

102
00:04:12,319 --> 00:04:15,120
basically those exercises and uh give it

103
00:04:15,120 --> 00:04:15,760
some new

104
00:04:15,760 --> 00:04:19,519
uh vector so

105
00:04:19,519 --> 00:04:22,320
the agenda for today uh first we'll

106
00:04:22,320 --> 00:04:23,680
we'll have some introduction

107
00:04:23,680 --> 00:04:26,479
uh to what is template injection what

108
00:04:26,479 --> 00:04:29,440
are temptation this will be uh

109
00:04:29,440 --> 00:04:31,759
not an exercise just a small

110
00:04:31,759 --> 00:04:33,199
introduction

111
00:04:33,199 --> 00:04:35,759
then i'll go through uh how can we

112
00:04:35,759 --> 00:04:36,720
differentiate

113
00:04:36,720 --> 00:04:38,479
a template engine from each other

114
00:04:38,479 --> 00:04:40,240
because when you're testing an

115
00:04:40,240 --> 00:04:43,040
application maybe an assessment

116
00:04:43,040 --> 00:04:44,240
unless you have developed the

117
00:04:44,240 --> 00:04:46,240
application you don't know i have

118
00:04:46,240 --> 00:04:49,360
what is the template syntax and

119
00:04:49,360 --> 00:04:52,639
what is the library being used

120
00:04:54,000 --> 00:04:55,759
in the background for this application

121
00:04:55,759 --> 00:04:58,800
so can you stand there

122
00:04:58,800 --> 00:05:01,520
sorry can you zoom your screen people

123
00:05:01,520 --> 00:05:02,639
say it's very small

124
00:05:02,639 --> 00:05:05,759
okay okay actually very small

125
00:05:05,759 --> 00:05:11,840
but you people can follow it this way

126
00:05:13,360 --> 00:05:15,440
following the url if you want at the

127
00:05:15,440 --> 00:05:16,639
same time so

128
00:05:16,639 --> 00:05:20,080
there's no problem yeah but still zoom

129
00:05:20,080 --> 00:05:22,400
in please

130
00:05:22,400 --> 00:05:24,600
perfect okay so thank you for

131
00:05:24,600 --> 00:05:26,000
investigating about

132
00:05:26,000 --> 00:05:27,680
this problem so if you have any issue

133
00:05:27,680 --> 00:05:29,440
i'll be monitoring the chat when we do

134
00:05:29,440 --> 00:05:31,360
the exercise or during the presentation

135
00:05:31,360 --> 00:05:31,919
so

136
00:05:31,919 --> 00:05:35,199
uh don't hesitate uh

137
00:05:35,199 --> 00:05:37,759
as i already mentioned uh burp and zap

138
00:05:37,759 --> 00:05:38,960
are optional

139
00:05:38,960 --> 00:05:41,280
but they will be you'll be a bit more

140
00:05:41,280 --> 00:05:45,039
efficient for at least two exercises

141
00:05:47,600 --> 00:05:52,560
so what is template injection so

142
00:05:52,560 --> 00:05:55,759
i already uh peeked at what what it was

143
00:05:55,759 --> 00:06:00,560
but basically it's um template and

144
00:06:00,560 --> 00:06:03,600
initially were mainly used for a

145
00:06:03,600 --> 00:06:05,600
developing view for web applications so

146
00:06:05,600 --> 00:06:08,240
in an nvc application

147
00:06:08,240 --> 00:06:11,600
you have the v4 view which is uh

148
00:06:11,600 --> 00:06:13,520
the way you're gonna display uh

149
00:06:13,520 --> 00:06:14,800
information so

150
00:06:14,800 --> 00:06:17,440
instead of having code tightly coupled

151
00:06:17,440 --> 00:06:18,479
with your data

152
00:06:18,479 --> 00:06:21,039
where you're doing some print averita

153
00:06:21,039 --> 00:06:22,479
you have

154
00:06:22,479 --> 00:06:25,039
a template that is describing okay just

155
00:06:25,039 --> 00:06:35,440
give me a second

156
00:06:35,440 --> 00:06:38,240
sorry about that

157
00:06:41,120 --> 00:06:44,880
okay so um as i said so um

158
00:06:44,880 --> 00:06:49,199
in mbc application the view will be a

159
00:06:49,199 --> 00:06:52,720
a template that is decoupled from the

160
00:06:52,720 --> 00:06:53,919
controller and what is

161
00:06:53,919 --> 00:06:58,160
generating the data um

162
00:06:58,160 --> 00:07:01,520
sorry okay one month give me just a

163
00:07:01,520 --> 00:07:03,840
second

164
00:07:30,880 --> 00:07:34,160
okay i'm back sorry about that uh

165
00:07:34,160 --> 00:07:36,240
there should be no no longer an

166
00:07:36,240 --> 00:07:37,520
interruption

167
00:07:37,520 --> 00:07:40,319
so uh now that we know uh what are uh

168
00:07:40,319 --> 00:07:41,759
templates

169
00:07:41,759 --> 00:07:44,639
uh why they are interesting uh for

170
00:07:44,639 --> 00:07:46,160
security

171
00:07:46,160 --> 00:07:49,280
is that they are basically um some form

172
00:07:49,280 --> 00:07:49,840
of strip

173
00:07:49,840 --> 00:07:52,960
so some might be pretty basic but

174
00:07:52,960 --> 00:07:55,599
many of them that are uh implement in

175
00:07:55,599 --> 00:07:56,639
application

176
00:07:56,639 --> 00:08:00,319
are have tons of feature to uh make the

177
00:08:00,319 --> 00:08:02,479
life easier for developers

178
00:08:02,479 --> 00:08:05,759
so when we are talking about templates

179
00:08:05,759 --> 00:08:07,520
they might be uh they might look like

180
00:08:07,520 --> 00:08:09,759
this so the developer will write this

181
00:08:09,759 --> 00:08:12,160
type of code or the end user

182
00:08:12,160 --> 00:08:14,800
and the idea is you have a static part

183
00:08:14,800 --> 00:08:16,319
and you'll have

184
00:08:16,319 --> 00:08:19,599
a data that would be bind with this type

185
00:08:19,599 --> 00:08:21,759
of character so depending on the on the

186
00:08:21,759 --> 00:08:22,720
template

187
00:08:22,720 --> 00:08:27,759
the syntax will differ

188
00:08:27,759 --> 00:08:31,039
okay and the uh

189
00:08:31,039 --> 00:08:33,519
the reason why i'm doing multiple

190
00:08:33,519 --> 00:08:34,640
exercise

191
00:08:34,640 --> 00:08:37,519
with different technology is uh to give

192
00:08:37,519 --> 00:08:38,719
you some ideas

193
00:08:38,719 --> 00:08:42,719
of how people can turn some interesting

194
00:08:42,719 --> 00:08:43,839
feature into

195
00:08:43,839 --> 00:08:46,880
um basically a powerful feature that

196
00:08:46,880 --> 00:08:49,440
will give you a remote cool execution

197
00:08:49,440 --> 00:08:54,000
and by giving you a concrete example

198
00:08:54,000 --> 00:08:57,519
this will allow you potentially to

199
00:08:57,519 --> 00:08:58,959
exploit a template that doesn't have

200
00:08:58,959 --> 00:09:01,760
maybe a payload that is known

201
00:09:01,760 --> 00:09:08,320
and uh

202
00:09:08,320 --> 00:09:11,760
so now we know uh what are templates

203
00:09:11,760 --> 00:09:15,519
and um what is the template

204
00:09:15,519 --> 00:09:18,320
injection so

205
00:09:18,560 --> 00:09:21,680
let's say we we find an application that

206
00:09:21,680 --> 00:09:26,319
is exposing some form of templates

207
00:09:26,560 --> 00:09:28,720
how do we know what technology is being

208
00:09:28,720 --> 00:09:30,640
used

209
00:09:30,640 --> 00:09:32,800
you might say we can just test all of

210
00:09:32,800 --> 00:09:34,399
them but there are

211
00:09:34,399 --> 00:09:38,080
tons of template enjoying so for example

212
00:09:38,080 --> 00:09:41,279
uh just in php i have lists uh

213
00:09:41,279 --> 00:09:45,200
at least eight here and uh some language

214
00:09:45,200 --> 00:09:47,760
with might have less if some are really

215
00:09:47,760 --> 00:09:49,279
popular

216
00:09:49,279 --> 00:09:51,279
but for all language you'll have

217
00:09:51,279 --> 00:09:53,120
multiple ones and the way

218
00:09:53,120 --> 00:09:56,160
we can um find out which

219
00:09:56,160 --> 00:09:58,320
template engine is being used is by

220
00:09:58,320 --> 00:09:59,279
simply using

221
00:09:59,279 --> 00:10:02,480
some um specific syntax

222
00:10:02,480 --> 00:10:06,079
so for example this is a decision tree

223
00:10:06,079 --> 00:10:07,839
that was uh built

224
00:10:07,839 --> 00:10:10,000
by james kettle in its original

225
00:10:10,000 --> 00:10:11,040
presentation

226
00:10:11,040 --> 00:10:15,360
and if we do this operation

227
00:10:15,360 --> 00:10:18,000
so not every template engine will

228
00:10:18,000 --> 00:10:19,040
recognize the

229
00:10:19,040 --> 00:10:21,600
dollar sign followed by square bracket

230
00:10:21,600 --> 00:10:22,480
so for example

231
00:10:22,480 --> 00:10:25,920
free marker will support it uh macro

232
00:10:25,920 --> 00:10:28,959
will but not twig because

233
00:10:28,959 --> 00:10:32,399
twig is too um it's a syntax like this

234
00:10:32,399 --> 00:10:32,959
so

235
00:10:32,959 --> 00:10:35,440
by having some simple payload this way

236
00:10:35,440 --> 00:10:36,000
uh

237
00:10:36,000 --> 00:10:39,040
we can uh create a decision tree that

238
00:10:39,040 --> 00:10:40,000
will

239
00:10:40,000 --> 00:10:42,480
give us some precise information about

240
00:10:42,480 --> 00:10:44,399
what technology is being used

241
00:10:44,399 --> 00:10:47,760
once we know the technology being used

242
00:10:47,760 --> 00:10:50,800
then we can uh test some payload

243
00:10:50,800 --> 00:10:52,640
based on research that was done

244
00:10:52,640 --> 00:10:55,199
previously

245
00:10:56,320 --> 00:10:58,800
for the workshop today we're not gonna

246
00:10:58,800 --> 00:11:00,880
do the guessing game

247
00:11:00,880 --> 00:11:03,200
because usually it's something that it's

248
00:11:03,200 --> 00:11:04,959
better once you have played

249
00:11:04,959 --> 00:11:08,880
with a couple of uh injection already

250
00:11:08,880 --> 00:11:12,880
and then it's easier to do some

251
00:11:13,279 --> 00:11:15,839
assumption

252
00:11:16,560 --> 00:11:20,000
we're already at the first exercise so

253
00:11:20,000 --> 00:11:23,760
uh i will give uh

254
00:11:23,760 --> 00:11:26,480
information about a php twig i'll show

255
00:11:26,480 --> 00:11:28,640
you the demo application

256
00:11:28,640 --> 00:11:32,320
and um then you you'll have some time to

257
00:11:32,320 --> 00:11:33,519
do the

258
00:11:33,519 --> 00:11:35,680
at least 15 minutes to do the the

259
00:11:35,680 --> 00:11:37,440
exercise

260
00:11:37,440 --> 00:11:39,519
and if you have question don't hesitate

261
00:11:39,519 --> 00:11:40,720
in general

262
00:11:40,720 --> 00:11:44,160
chat sorry so

263
00:11:44,160 --> 00:11:47,600
twig uh the first one is uh one uh

264
00:11:47,600 --> 00:11:50,720
for the php language so uh you might

265
00:11:50,720 --> 00:11:51,120
know

266
00:11:51,120 --> 00:11:54,399
other template engine but um

267
00:11:54,399 --> 00:11:57,360
uh in php many of them are tightly

268
00:11:57,360 --> 00:11:58,720
coupled to

269
00:11:58,720 --> 00:12:01,680
their cms so these are less likely to be

270
00:12:01,680 --> 00:12:03,040
exposed

271
00:12:03,040 --> 00:12:06,720
uh to uh basically uh an enemy search

272
00:12:06,720 --> 00:12:07,839
feature to exit

273
00:12:07,839 --> 00:12:10,959
email or

274
00:12:10,959 --> 00:12:14,480
basically any templates so the syntax

275
00:12:14,480 --> 00:12:17,760
in twig it's going to be uh two brackets

276
00:12:17,760 --> 00:12:18,560
to open

277
00:12:18,560 --> 00:12:22,240
uh data binding and we'll have a pipe

278
00:12:22,240 --> 00:12:26,240
to add additional filter

279
00:12:26,639 --> 00:12:29,839
and um yeah so this is really just a

280
00:12:29,839 --> 00:12:31,200
basic to

281
00:12:31,200 --> 00:12:33,680
map scatter value so just a string

282
00:12:33,680 --> 00:12:35,600
volume

283
00:12:35,600 --> 00:12:38,800
now the interesting part

284
00:12:38,800 --> 00:12:41,839
about tweak that was exploit to leverage

285
00:12:41,839 --> 00:12:45,680
a remote code execution is uh we can

286
00:12:45,680 --> 00:12:49,440
uh register uh a new filter

287
00:12:49,440 --> 00:12:53,040
so instead of using pre-build filters

288
00:12:53,040 --> 00:12:56,320
in a twig we can register a new one

289
00:12:56,320 --> 00:12:59,519
to a php function

290
00:13:00,320 --> 00:13:04,399
and then use this filter actually

291
00:13:04,399 --> 00:13:06,560
the what was found by jameskittle is

292
00:13:06,560 --> 00:13:08,639
that we can register

293
00:13:08,639 --> 00:13:12,160
uh a filter that

294
00:13:12,160 --> 00:13:15,279
when there are none so here

295
00:13:15,279 --> 00:13:18,639
uh we register for an undefined filter

296
00:13:18,639 --> 00:13:22,320
for the callback exit so this means

297
00:13:22,320 --> 00:13:25,440
that uh by default if it's not a known

298
00:13:25,440 --> 00:13:26,480
filter

299
00:13:26,480 --> 00:13:29,839
it will call this function

300
00:13:30,160 --> 00:13:33,519
so it's a two-step process so first

301
00:13:33,519 --> 00:13:35,760
there's a this filter being registered

302
00:13:35,760 --> 00:13:37,839
and then it's being triggered

303
00:13:37,839 --> 00:13:41,199
uh with one parameter which is the

304
00:13:41,199 --> 00:13:42,959
command that we want to execute

305
00:13:42,959 --> 00:13:48,560
so this one is pretty straightforward um

306
00:13:48,560 --> 00:13:50,480
and you'll have an application to to

307
00:13:50,480 --> 00:13:51,760
play with it

308
00:13:51,760 --> 00:13:54,560
this means uh first for for the exercise

309
00:13:54,560 --> 00:13:55,360
i

310
00:13:55,360 --> 00:13:58,959
encourage you to first do some

311
00:13:58,959 --> 00:14:01,360
minimal testing so for example just do

312
00:14:01,360 --> 00:14:02,240
an

313
00:14:02,240 --> 00:14:05,360
arithmetic so i have most template

314
00:14:05,360 --> 00:14:06,399
engineering will support

315
00:14:06,399 --> 00:14:09,600
a via small addition or

316
00:14:09,600 --> 00:14:12,639
a multiplication and once you see that

317
00:14:12,639 --> 00:14:16,320
the value is transformed then you can go

318
00:14:16,320 --> 00:14:19,680
to appear like this because in real life

319
00:14:19,680 --> 00:14:20,880
if you're doing some

320
00:14:20,880 --> 00:14:23,440
assessment to test an application and

321
00:14:23,440 --> 00:14:24,079
you're

322
00:14:24,079 --> 00:14:27,120
sending right away pillow like this

323
00:14:27,120 --> 00:14:30,560
directly there's many factors that that

324
00:14:30,560 --> 00:14:30,959
can

325
00:14:30,959 --> 00:14:34,880
uh make this payload fail uh maybe uh

326
00:14:34,880 --> 00:14:35,600
the command

327
00:14:35,600 --> 00:14:37,920
you're using to create a reverse shell

328
00:14:37,920 --> 00:14:38,720
or something

329
00:14:38,720 --> 00:14:41,920
to create a file uh maybe there's a fact

330
00:14:41,920 --> 00:14:43,279
that for example the folder you're

331
00:14:43,279 --> 00:14:44,480
expecting to write

332
00:14:44,480 --> 00:14:47,120
doesn't exist or some specific

333
00:14:47,120 --> 00:14:49,839
environment so

334
00:14:50,079 --> 00:14:52,079
to avoid this first do a small test

335
00:14:52,079 --> 00:14:53,440
confirm that

336
00:14:53,440 --> 00:14:56,480
first there's a template being executed

337
00:14:56,480 --> 00:14:58,560
and then you can go for this type of

338
00:14:58,560 --> 00:15:00,160
build so

339
00:15:00,160 --> 00:15:01,920
i'm going to give you at least 10

340
00:15:01,920 --> 00:15:03,600
minutes so

341
00:15:03,600 --> 00:15:05,600
the application when you open it it

342
00:15:05,600 --> 00:15:07,839
should look like this

343
00:15:07,839 --> 00:15:11,440
so it's a simple form that has an entry

344
00:15:11,440 --> 00:15:13,839
for email

345
00:15:13,920 --> 00:15:16,720
but here you're going to see that if we

346
00:15:16,720 --> 00:15:19,199
enter an email

347
00:15:19,199 --> 00:15:22,399
it's going to be displayed here but it's

348
00:15:22,399 --> 00:15:23,199
not just

349
00:15:23,199 --> 00:15:27,120
a string concatenation

350
00:15:27,120 --> 00:15:29,279
what i'm selecting is actually a

351
00:15:29,279 --> 00:15:30,480
template and

352
00:15:30,480 --> 00:15:33,040
the developer did the mistake did

353
00:15:33,040 --> 00:15:34,240
include user input

354
00:15:34,240 --> 00:15:37,519
in the template stream so

355
00:15:37,519 --> 00:15:41,600
uh on port 80

356
00:15:41,600 --> 00:15:45,279
12 you can find the first application

357
00:15:45,279 --> 00:15:48,399
and the url is there in

358
00:15:48,399 --> 00:15:51,519
the lab one so

359
00:15:51,519 --> 00:15:54,959
i'll take a small pause here if you have

360
00:15:54,959 --> 00:15:56,240
any question regarding the first

361
00:15:56,240 --> 00:15:56,959
exercise

362
00:15:56,959 --> 00:15:59,920
or the introduction let me know and

363
00:15:59,920 --> 00:16:00,399
question

364
00:16:00,399 --> 00:16:03,440
can be uh on other topic

365
00:16:03,440 --> 00:16:05,600
than what we've present anything related

366
00:16:05,600 --> 00:16:06,639
to a

367
00:16:06,639 --> 00:16:09,759
template injection

368
00:16:09,759 --> 00:16:13,199
so good luck i'll paste the link

369
00:16:13,199 --> 00:16:23,839
for the current exercise

370
00:16:37,279 --> 00:16:39,920
you know change your chat to uh

371
00:16:39,920 --> 00:16:40,880
everybody

372
00:16:40,880 --> 00:16:42,800
because you're now just sending it to

373
00:16:42,800 --> 00:16:46,000
our organizer

374
00:16:46,959 --> 00:16:48,959
okay can you just repeat i didn't hear a

375
00:16:48,959 --> 00:16:50,639
theory you sent it

376
00:16:50,639 --> 00:16:53,839
just uh to me and yeah and uh

377
00:16:53,839 --> 00:16:56,720
other organizer not to everybody you

378
00:16:56,720 --> 00:16:57,120
have to

379
00:16:57,120 --> 00:17:00,800
put your chat to everybody okay

380
00:17:00,800 --> 00:17:05,679
so we okay

381
00:17:05,679 --> 00:17:07,520
i don't know if your interface is in

382
00:17:07,520 --> 00:17:09,359
french or english but

383
00:17:09,359 --> 00:17:13,039
at the end of the chat there's at

384
00:17:13,039 --> 00:17:16,160
or ah everybody is the first one

385
00:17:16,160 --> 00:17:18,480
now you're like in the organizer and i

386
00:17:18,480 --> 00:17:20,160
send the chat to organizer only

387
00:17:20,160 --> 00:17:21,679
organizer and panelists only

388
00:17:21,679 --> 00:17:25,199
and then you have to put it at two

389
00:17:25,199 --> 00:17:28,880
everybody okay

390
00:17:31,520 --> 00:17:35,440
i just i i write it but i did copy it

391
00:17:35,440 --> 00:17:37,919
but so

392
00:17:38,240 --> 00:17:40,480
okay

393
00:17:42,320 --> 00:17:45,600
okay i i look into it

394
00:17:45,600 --> 00:17:49,200
the do you see the question uh

395
00:17:49,200 --> 00:17:53,760
section there's a

396
00:17:53,760 --> 00:17:56,400
a little bit over a chat there's a place

397
00:17:56,400 --> 00:17:57,919
a call question

398
00:17:57,919 --> 00:18:01,200
do you see question coming in

399
00:18:01,200 --> 00:18:05,600
no there's other view

400
00:18:05,600 --> 00:18:08,159
sharing

401
00:18:09,360 --> 00:18:15,840
audio webcam question chat

402
00:18:17,120 --> 00:18:20,640
no yeah okay so i need to share that to

403
00:18:20,640 --> 00:18:22,880
you

404
00:18:24,400 --> 00:18:27,440
uh so

405
00:18:27,440 --> 00:18:31,600
okay let me put the question for you

406
00:18:31,600 --> 00:18:43,840
in the chat just answer in the chat

407
00:18:45,679 --> 00:18:48,720
okay so the question is the presentation

408
00:18:48,720 --> 00:18:51,120
with your main available after the

409
00:18:51,120 --> 00:18:52,240
workshop so

410
00:18:52,240 --> 00:18:55,120
yes the um the code labs will be

411
00:18:55,120 --> 00:18:56,000
published on

412
00:18:56,000 --> 00:18:59,600
uh on a github io so it will be a

413
00:18:59,600 --> 00:19:03,360
static website along with um

414
00:19:03,360 --> 00:19:05,919
the the different exercise the the main

415
00:19:05,919 --> 00:19:06,559
difference

416
00:19:06,559 --> 00:19:09,280
is that i'll publish the receipt so

417
00:19:09,280 --> 00:19:10,720
docker uh

418
00:19:10,720 --> 00:19:13,840
a compose configuration and the code for

419
00:19:13,840 --> 00:19:14,640
the application

420
00:19:14,640 --> 00:19:16,880
but uh you'll need to deploy them

421
00:19:16,880 --> 00:19:18,000
locally or

422
00:19:18,000 --> 00:19:22,400
on your own server this is the only

423
00:19:22,840 --> 00:19:25,840
difference

424
00:19:28,799 --> 00:19:32,320
so i'll do a demo in i would say five

425
00:19:32,320 --> 00:19:33,600
minutes so at third

426
00:19:33,600 --> 00:19:38,400
uh and three at 12 30 i'll

427
00:19:38,400 --> 00:19:41,120
do a demo

428
00:19:45,760 --> 00:19:48,559
all right now you can see question yeah

429
00:19:48,559 --> 00:19:50,240
okay

430
00:19:50,240 --> 00:19:52,320
i think i need to put them to you each

431
00:19:52,320 --> 00:19:54,559
time

432
00:19:55,120 --> 00:19:58,879
at least uh i know i know

433
00:19:59,840 --> 00:20:02,880
and i'm pretty sure i cannot send the

434
00:20:02,880 --> 00:20:06,000
to the i cannot um

435
00:20:06,000 --> 00:20:09,280
send globally to the chat

436
00:20:09,280 --> 00:20:11,440
um

437
00:20:13,600 --> 00:20:16,719
but i'm pretty sure

438
00:20:18,320 --> 00:20:21,520
so you don't have everybody as

439
00:20:21,520 --> 00:20:25,039
uh now

440
00:20:25,360 --> 00:20:28,799
in my chat i can put the chat unit full

441
00:20:28,799 --> 00:20:30,480
screen i don't see any

442
00:20:30,480 --> 00:20:35,840
other option

443
00:20:38,480 --> 00:20:40,400
there's an audience question which is

444
00:20:40,400 --> 00:20:43,280
hello i don't have any audio

445
00:20:43,280 --> 00:20:46,240
neither on the piston or the phone it's

446
00:20:46,240 --> 00:20:48,720
the same form

447
00:20:48,720 --> 00:20:51,919
earlier i think it's our earlier

448
00:20:51,919 --> 00:20:52,799
question

449
00:20:52,799 --> 00:20:55,039
okay because i okay perfect i was

450
00:20:55,039 --> 00:20:56,080
connected for

451
00:20:56,080 --> 00:20:59,039
at least an hour so

452
00:21:00,080 --> 00:21:03,120
yeah people uh don't close

453
00:21:03,120 --> 00:21:05,679
go to meeting completely when they

454
00:21:05,679 --> 00:21:08,480
switch between

455
00:21:10,000 --> 00:21:13,360
okay uh philip i'll be back in a minute

456
00:21:13,360 --> 00:21:17,840
yeah no problem

457
00:22:53,360 --> 00:22:55,840
and

458
00:23:34,840 --> 00:23:37,840
okay

459
00:23:48,840 --> 00:23:51,840
okay

460
00:24:02,840 --> 00:24:05,840
personal

461
00:24:12,720 --> 00:24:16,000
philip are you back

462
00:24:16,880 --> 00:24:18,640
do you see now the question all the

463
00:24:18,640 --> 00:24:20,240
questions and

464
00:24:20,240 --> 00:24:24,720
in the chat to send to everybody

465
00:24:24,799 --> 00:24:28,320
you should see them yeah it's collapse

466
00:24:28,320 --> 00:24:32,960
but i see them

467
00:24:32,960 --> 00:24:35,520
try to

468
00:24:36,080 --> 00:24:47,840
okay i found it thanks

469
00:24:56,559 --> 00:25:00,400
at the question from

470
00:25:00,400 --> 00:25:02,000
uh will you demonstrate how to get the

471
00:25:02,000 --> 00:25:03,840
the flag yes so i'm

472
00:25:03,840 --> 00:25:08,320
gonna do a demo uh very soon

473
00:25:08,320 --> 00:25:10,559
and uh you'll get some time afterward to

474
00:25:10,559 --> 00:25:11,600
complete

475
00:25:11,600 --> 00:25:15,840
if you don't have the time yet

476
00:25:31,360 --> 00:25:34,880
okay uh we're gonna now

477
00:25:34,880 --> 00:25:37,520
philip have all access to the questions

478
00:25:37,520 --> 00:25:38,000
so

479
00:25:38,000 --> 00:25:40,880
you will be able to answer your question

480
00:25:40,880 --> 00:25:42,080
when you write them in

481
00:25:42,080 --> 00:25:45,760
question so either you will answer by

482
00:25:45,760 --> 00:25:48,799
talking or writing depend of the

483
00:25:48,799 --> 00:25:49,919
question

484
00:25:49,919 --> 00:25:53,440
uh but if you want you can access

485
00:25:53,440 --> 00:25:56,640
also in the access

486
00:25:56,640 --> 00:26:00,880
festival we did a quick uh

487
00:26:02,480 --> 00:26:05,840
a new channel called injection workshop

488
00:26:05,840 --> 00:26:11,279
so you can right there

489
00:26:11,279 --> 00:26:15,200
so yeah injection workshop

490
00:26:15,200 --> 00:26:18,080
that name is in the chat if you're not

491
00:26:18,080 --> 00:26:20,320
sure

492
00:26:36,840 --> 00:26:39,840
me

493
00:26:50,840 --> 00:26:53,840
right

494
00:27:55,360 --> 00:27:57,039
you don't see your screen anymore it's

495
00:27:57,039 --> 00:27:59,279
normal

496
00:27:59,279 --> 00:28:02,880
yes yes you

497
00:28:03,840 --> 00:28:06,959
okay just to be sure

498
00:28:07,840 --> 00:28:11,600
so don't hesitate to ask question

499
00:28:16,320 --> 00:28:18,559
so

500
00:28:28,559 --> 00:28:31,440
so i will recall there's a injection

501
00:28:31,440 --> 00:28:33,200
workshop

502
00:28:33,200 --> 00:28:36,240
uh in the aquifex discord so you can ask

503
00:28:36,240 --> 00:28:37,520
your question there

504
00:28:37,520 --> 00:28:40,720
or just ask him here

505
00:28:40,720 --> 00:28:45,840
there's no problem

506
00:29:10,840 --> 00:29:15,039
okay so i'll do a demo

507
00:29:15,039 --> 00:29:18,720
so first exercise um a good demo

508
00:29:18,720 --> 00:29:21,360
and then in maybe two minutes afterward

509
00:29:21,360 --> 00:29:24,000
i'll continue to the next exercise but

510
00:29:24,000 --> 00:29:27,039
uh you'll get some time to finish it uh

511
00:29:27,039 --> 00:29:30,080
without problem so there was a small

512
00:29:30,080 --> 00:29:31,600
twist

513
00:29:31,600 --> 00:29:36,559
um with this exercise uh

514
00:29:36,559 --> 00:29:39,520
so some of you probably have it one uh

515
00:29:39,520 --> 00:29:40,880
important obstacle but

516
00:29:40,880 --> 00:29:44,480
uh we'll see the solution so

517
00:29:44,480 --> 00:29:47,520
first thing to do is uh yeah zoom a

518
00:29:47,520 --> 00:29:48,640
little bit

519
00:29:48,640 --> 00:29:51,919
okay you're very very small so

520
00:29:51,919 --> 00:29:55,520
uh the first uh step is finding the

521
00:29:55,520 --> 00:29:56,880
injection point so

522
00:29:56,880 --> 00:29:59,840
finding uh where there is a potentially

523
00:29:59,840 --> 00:30:00,559
um

524
00:30:00,559 --> 00:30:03,440
a template they execute so here if i

525
00:30:03,440 --> 00:30:04,640
submit this

526
00:30:04,640 --> 00:30:09,840
it's not working but if i submit

527
00:30:10,000 --> 00:30:12,640
this we can see that there's a result

528
00:30:12,640 --> 00:30:13,520
and it's not

529
00:30:13,520 --> 00:30:16,559
um execute

530
00:30:16,559 --> 00:30:19,440
a client side this is really executed

531
00:30:19,440 --> 00:30:20,960
server side so if we look at

532
00:30:20,960 --> 00:30:25,039
the response we should be able to

533
00:30:25,039 --> 00:30:30,080
see the 49 result

534
00:30:30,080 --> 00:30:32,240
one thing i recommend uh when i did my

535
00:30:32,240 --> 00:30:33,279
test

536
00:30:33,279 --> 00:30:35,919
i submit with the subtraction when

537
00:30:35,919 --> 00:30:37,520
you're sending a

538
00:30:37,520 --> 00:30:41,279
it over repeater or the request emitter

539
00:30:41,279 --> 00:30:43,600
in a

540
00:30:43,679 --> 00:30:46,000
the reason i do this is sometime if you

541
00:30:46,000 --> 00:30:47,440
do a plus

542
00:30:47,440 --> 00:30:51,360
this will be decode by the application

543
00:30:51,360 --> 00:30:53,919
sometime specifically in this context

544
00:30:53,919 --> 00:30:55,440
for example in a post

545
00:30:55,440 --> 00:30:58,559
parameter plus will be decoded

546
00:30:58,559 --> 00:31:02,559
as a space so for this reason using an

547
00:31:02,559 --> 00:31:05,600
arithmetic just a negation

548
00:31:05,600 --> 00:31:07,760
operatorship will do a subtract

549
00:31:07,760 --> 00:31:09,039
operation will

550
00:31:09,039 --> 00:31:11,840
do the the job and you'll be uh more

551
00:31:11,840 --> 00:31:13,440
confident that

552
00:31:13,440 --> 00:31:16,720
this is uh there's no decoding being

553
00:31:16,720 --> 00:31:17,519
done

554
00:31:17,519 --> 00:31:20,559
so first thing we confirm that

555
00:31:20,559 --> 00:31:24,320
there is code being executed so

556
00:31:24,679 --> 00:31:27,760
1338 minus one is giving us

557
00:31:27,760 --> 00:31:31,039
lead so now we have an injection point

558
00:31:31,039 --> 00:31:34,799
so maybe with some guessing that the

559
00:31:34,799 --> 00:31:36,640
fact that it's php then we can

560
00:31:36,640 --> 00:31:40,320
uh start to do some tests uh with twig

561
00:31:40,320 --> 00:31:41,039
payload

562
00:31:41,039 --> 00:31:42,720
so we're gonna use the pillow that we

563
00:31:42,720 --> 00:31:44,320
just saw so we registered

564
00:31:44,320 --> 00:31:47,519
on undefined filter and then we're gonna

565
00:31:47,519 --> 00:31:49,519
trigger this filter

566
00:31:49,519 --> 00:31:51,120
the thing you're gonna see is that if

567
00:31:51,120 --> 00:31:52,880
you execute command

568
00:31:52,880 --> 00:31:55,760
you're gonna get only the first line so

569
00:31:55,760 --> 00:31:56,480
this is a

570
00:31:56,480 --> 00:31:58,559
big limitation so for example i'm

571
00:31:58,559 --> 00:32:00,320
listing files

572
00:32:00,320 --> 00:32:03,279
at the root of the file system and i'm

573
00:32:03,279 --> 00:32:05,600
only getting the first one

574
00:32:05,600 --> 00:32:09,600
so um with this filter

575
00:32:09,600 --> 00:32:12,399
uh twig is only keeping the first line

576
00:32:12,399 --> 00:32:13,039
so

577
00:32:13,039 --> 00:32:15,039
unfortunately this will be uh quite

578
00:32:15,039 --> 00:32:17,360
difficult to maybe get

579
00:32:17,360 --> 00:32:21,120
a file that has content on multiple line

580
00:32:21,120 --> 00:32:23,360
one thing you could do to solve this is

581
00:32:23,360 --> 00:32:25,120
do a reverse shell

582
00:32:25,120 --> 00:32:28,320
so connect to a port

583
00:32:28,320 --> 00:32:31,840
that you control but uh for for this

584
00:32:31,840 --> 00:32:32,640
workshop

585
00:32:32,640 --> 00:32:37,840
i have an easier solution you can simply

586
00:32:38,240 --> 00:32:41,600
do the command echo dash e and

587
00:32:41,600 --> 00:32:45,760
with some backtick specify your command

588
00:32:45,760 --> 00:32:48,960
so with this uh the dash e

589
00:32:48,960 --> 00:32:51,919
of echo will remove basically all new

590
00:32:51,919 --> 00:32:52,880
lines so

591
00:32:52,880 --> 00:32:56,720
if your objective is just to

592
00:32:56,720 --> 00:32:59,760
view the content without exporting it

593
00:32:59,760 --> 00:33:02,399
with the proper byte this will work so

594
00:33:02,399 --> 00:33:04,159
for example if i execute this

595
00:33:04,159 --> 00:33:07,840
instead i will not just get var but i'll

596
00:33:07,840 --> 00:33:09,760
get

597
00:33:09,760 --> 00:33:14,720
been rule dev and all the

598
00:33:14,720 --> 00:33:17,840
outline of uh so actually actually it's

599
00:33:17,840 --> 00:33:18,799
keeping the

600
00:33:18,799 --> 00:33:22,159
only the last line from uh

601
00:33:22,159 --> 00:33:25,840
i can't pretty

602
00:33:25,919 --> 00:33:29,519
it's very small difficulty to see

603
00:33:29,519 --> 00:33:30,000
because

604
00:33:30,000 --> 00:33:32,399
you're on top plus your stuff there's

605
00:33:32,399 --> 00:33:33,679
all the stuff it's

606
00:33:33,679 --> 00:33:36,480
take a lot of place so it's very small

607
00:33:36,480 --> 00:33:38,080
okay i think

608
00:33:38,080 --> 00:33:40,880
and then we do have a question uh will

609
00:33:40,880 --> 00:33:41,919
you

610
00:33:41,919 --> 00:33:45,200
present some examples that are are good

611
00:33:45,200 --> 00:33:49,440
for angular rgs or a react gs

612
00:33:49,440 --> 00:33:53,840
because i don't see any labs on that so

613
00:33:54,000 --> 00:33:56,000
uh the answer to for this it's

614
00:33:56,000 --> 00:33:57,200
unfortunate no

615
00:33:57,200 --> 00:34:01,200
uh today we're only seeing um

616
00:34:01,200 --> 00:34:04,480
is it bigger yeah

617
00:34:04,480 --> 00:34:07,760
it's getting better okay so

618
00:34:07,760 --> 00:34:10,239
increase a bit my resolution so uh to

619
00:34:10,239 --> 00:34:10,960
the question

620
00:34:10,960 --> 00:34:14,159
are we going to see angular react gs

621
00:34:14,159 --> 00:34:17,119
injection so these are client-side

622
00:34:17,119 --> 00:34:19,119
injection

623
00:34:19,119 --> 00:34:20,639
this is a bit different the main

624
00:34:20,639 --> 00:34:22,639
objective would try inside the template

625
00:34:22,639 --> 00:34:24,320
injection

626
00:34:24,320 --> 00:34:27,040
uh is basically to trigger uh excesses

627
00:34:27,040 --> 00:34:29,359
most of the time

628
00:34:29,359 --> 00:34:32,159
um unless maybe uh with the react back

629
00:34:32,159 --> 00:34:32,480
end

630
00:34:32,480 --> 00:34:35,760
you might be able to do some

631
00:34:35,760 --> 00:34:38,800
something that is remote um

632
00:34:38,800 --> 00:34:42,639
so yeah the the quick answer is no

633
00:34:43,119 --> 00:34:48,399
so we're only gonna see uh in php twig

634
00:34:49,040 --> 00:34:52,719
in python and tornado

635
00:34:52,719 --> 00:34:56,320
then two two other la meri angelo

636
00:34:56,320 --> 00:34:58,880
so i for i don't want to spend too much

637
00:34:58,880 --> 00:35:00,560
time on the first exercise

638
00:35:00,560 --> 00:35:02,960
now that you have the steps i'm also

639
00:35:02,960 --> 00:35:03,680
going to paste

640
00:35:03,680 --> 00:35:06,800
the the quick solution

641
00:35:06,800 --> 00:35:09,440
for um basically circumvent the fact

642
00:35:09,440 --> 00:35:11,520
that only the last line was being kept

643
00:35:11,520 --> 00:35:12,240
so

644
00:35:12,240 --> 00:35:14,640
if you look at this you're going to see

645
00:35:14,640 --> 00:35:15,440
that there's a

646
00:35:15,440 --> 00:35:18,720
folder secret so then

647
00:35:18,720 --> 00:35:22,400
i'll just go straight to the

648
00:35:22,400 --> 00:35:26,560
folder and then we can see

649
00:35:26,560 --> 00:35:28,960
uh there's a file or flag but with

650
00:35:28,960 --> 00:35:30,000
underscore tweak

651
00:35:30,000 --> 00:35:32,320
twig just to make sure nobody gets the

652
00:35:32,320 --> 00:35:33,520
file name

653
00:35:33,520 --> 00:35:35,440
and then we get the content of the the

654
00:35:35,440 --> 00:35:36,880
file

655
00:35:36,880 --> 00:35:41,119
so i'm gonna paste the

656
00:35:41,119 --> 00:35:46,079
small trick with uh the command echo

657
00:35:46,480 --> 00:35:50,720
so this was not in the

658
00:35:51,280 --> 00:35:54,640
the thing is i don't think i can

659
00:35:54,640 --> 00:35:59,839
send to all i can be

660
00:36:06,320 --> 00:36:11,040
philip can you paste this payload to

661
00:36:11,119 --> 00:36:13,839
everyone

662
00:36:16,640 --> 00:36:19,680
should be able to do it

663
00:36:19,680 --> 00:36:23,200
but can can you see my screen

664
00:36:23,200 --> 00:36:26,960
can you see my go

665
00:36:30,320 --> 00:36:33,359
actually i can see it now it just

666
00:36:33,359 --> 00:36:33,839
appears

667
00:36:33,839 --> 00:36:36,880
okay yeah it's uh under okay

668
00:36:36,880 --> 00:36:40,320
so for those doing the

669
00:36:43,520 --> 00:36:48,880
this is the trick or exercise

670
00:36:49,839 --> 00:36:51,920
okay for for the next exercise it's

671
00:36:51,920 --> 00:36:53,599
going to be pretty straightforward

672
00:36:53,599 --> 00:36:57,760
like the the known payload will be the

673
00:36:57,760 --> 00:37:00,000
the solution almost

674
00:37:00,000 --> 00:37:03,280
directly so

675
00:37:03,280 --> 00:37:06,640
oops okay i've opened something

676
00:37:06,640 --> 00:37:11,200
okay now next one

677
00:37:17,920 --> 00:37:23,839
should be a bit bigger now

678
00:37:24,880 --> 00:37:28,079
now now that we've seen um

679
00:37:28,079 --> 00:37:31,760
php we're gonna jump to a python library

680
00:37:31,760 --> 00:37:34,839
so uh this one is really interesting

681
00:37:34,839 --> 00:37:37,280
because uh

682
00:37:37,280 --> 00:37:40,400
it's you need to uh with the ability

683
00:37:40,400 --> 00:37:43,440
is using some specific internals from

684
00:37:43,440 --> 00:37:46,079
the python language and this is the type

685
00:37:46,079 --> 00:37:48,000
of thing that you might see in

686
00:37:48,000 --> 00:37:51,599
other type of attack sometime

687
00:37:51,599 --> 00:37:54,160
you'll see some framework being

688
00:37:54,160 --> 00:37:57,040
exploited and

689
00:37:57,440 --> 00:38:00,480
the different payload can

690
00:38:00,480 --> 00:38:04,000
are are using as some specific property

691
00:38:04,000 --> 00:38:05,599
that can can be used in other type of

692
00:38:05,599 --> 00:38:07,200
attacks so this is interesting knowledge

693
00:38:07,200 --> 00:38:07,520
for

694
00:38:07,520 --> 00:38:11,440
not just template injection

695
00:38:11,440 --> 00:38:14,480
so ginger 2 is a template

696
00:38:14,480 --> 00:38:17,520
that is really similar to the template

697
00:38:17,520 --> 00:38:18,079
engine

698
00:38:18,079 --> 00:38:21,440
from uh django uh

699
00:38:21,440 --> 00:38:24,720
but it can be used endlessly so

700
00:38:24,720 --> 00:38:27,280
uh developer can have the bad idea of

701
00:38:27,280 --> 00:38:28,240
exposing it to

702
00:38:28,240 --> 00:38:32,800
a user without any type of sandboxing

703
00:38:32,800 --> 00:38:35,440
and this the syntax will be really

704
00:38:35,440 --> 00:38:36,800
similar to

705
00:38:36,800 --> 00:38:39,599
the trig library that we just saw so if

706
00:38:39,599 --> 00:38:41,440
we have a string

707
00:38:41,440 --> 00:38:44,320
that is bind to this template and again

708
00:38:44,320 --> 00:38:45,440
we consider that

709
00:38:45,440 --> 00:38:48,960
the the end user a user that is remote

710
00:38:48,960 --> 00:38:52,160
not the developer can give a template to

711
00:38:52,160 --> 00:38:54,240
the application

712
00:38:54,240 --> 00:38:58,160
so uh if we do this type of

713
00:38:58,160 --> 00:39:01,920
syntax in the template this will um

714
00:39:01,920 --> 00:39:04,720
use the message variable that is bind to

715
00:39:04,720 --> 00:39:05,920
this template

716
00:39:05,920 --> 00:39:08,800
and we'll display it if we want to

717
00:39:08,800 --> 00:39:09,359
access

718
00:39:09,359 --> 00:39:12,400
a property from a variable then we can

719
00:39:12,400 --> 00:39:14,160
use that

720
00:39:14,160 --> 00:39:16,160
just like in a most programming language

721
00:39:16,160 --> 00:39:17,359
you'll be able to

722
00:39:17,359 --> 00:39:20,880
then access in a telescopic way

723
00:39:20,880 --> 00:39:24,560
multiple properties that are nested

724
00:39:24,560 --> 00:39:28,240
as an alternative you can also access

725
00:39:28,240 --> 00:39:32,000
property with kind of a

726
00:39:32,000 --> 00:39:34,720
dictionary format so here we're

727
00:39:34,720 --> 00:39:36,320
expressing the bar

728
00:39:36,320 --> 00:39:40,880
attribute from zoom

729
00:39:40,880 --> 00:39:43,839
from the full variable

730
00:39:44,000 --> 00:39:48,079
now what interesting uh feature are

731
00:39:48,079 --> 00:39:51,200
in um present in a ginger tube

732
00:39:51,200 --> 00:39:54,400
for exploitation is that metal property

733
00:39:54,400 --> 00:39:57,599
from python are exposed um

734
00:39:57,599 --> 00:40:01,440
and are accessible in the templates

735
00:40:01,440 --> 00:40:03,760
so because they they uh they want to

736
00:40:03,760 --> 00:40:06,079
make the life easier for developers

737
00:40:06,079 --> 00:40:08,160
they they make sure that delivery will

738
00:40:08,160 --> 00:40:09,440
be able to call any

739
00:40:09,440 --> 00:40:12,960
field and a method from a variable that

740
00:40:12,960 --> 00:40:13,920
are buying

741
00:40:13,920 --> 00:40:17,119
to the templates so to access

742
00:40:17,119 --> 00:40:20,800
the class method property

743
00:40:20,800 --> 00:40:22,800
we can access it on any variable but

744
00:40:22,800 --> 00:40:25,280
also if we declare

745
00:40:25,280 --> 00:40:27,520
an empty string this will become a

746
00:40:27,520 --> 00:40:31,200
variable and then we can access

747
00:40:31,200 --> 00:40:34,880
the method class the reason we're going

748
00:40:34,880 --> 00:40:36,400
to use in payload's

749
00:40:36,400 --> 00:40:39,760
empty string is that when we can have

750
00:40:39,760 --> 00:40:42,640
a universal payroll we're going to focus

751
00:40:42,640 --> 00:40:43,040
on

752
00:40:43,040 --> 00:40:46,079
making a payroll that will work 100 of

753
00:40:46,079 --> 00:40:48,319
the time so you don't have to tweak

754
00:40:48,319 --> 00:40:50,560
okay what variable are available in my

755
00:40:50,560 --> 00:40:53,359
templates and then it's in the paper

756
00:40:53,359 --> 00:40:55,920
so that's why i'll put on will use mg

757
00:40:55,920 --> 00:40:58,240
string

758
00:40:58,240 --> 00:41:01,839
okay now

759
00:41:01,839 --> 00:41:04,960
in the class meta property

760
00:41:04,960 --> 00:41:08,400
we'll also find a big dictionary of all

761
00:41:08,400 --> 00:41:09,599
object reference

762
00:41:09,599 --> 00:41:12,000
so this is called mro for metal

763
00:41:12,000 --> 00:41:13,920
resolution order

764
00:41:13,920 --> 00:41:17,920
and you'll find all the the type

765
00:41:17,920 --> 00:41:20,560
associated to this class so for example

766
00:41:20,560 --> 00:41:21,599
at a string

767
00:41:21,599 --> 00:41:24,560
string is one example you'll find first

768
00:41:24,560 --> 00:41:25,520
the current type

769
00:41:25,520 --> 00:41:28,720
of the the object but also is

770
00:41:28,720 --> 00:41:32,880
a parent class up to the type object

771
00:41:32,880 --> 00:41:37,280
and type object will be present in all

772
00:41:38,560 --> 00:41:41,760
all object will inherit from object

773
00:41:41,760 --> 00:41:45,359
as it's the base class the interesting

774
00:41:45,359 --> 00:41:46,480
part is

775
00:41:46,480 --> 00:41:48,800
we're going to be able to move up to

776
00:41:48,800 --> 00:41:51,119
access the type object

777
00:41:51,119 --> 00:41:52,800
and from the type object we're going to

778
00:41:52,800 --> 00:41:54,720
be able to see all the subclass

779
00:41:54,720 --> 00:41:56,640
from object so in the end we're going to

780
00:41:56,640 --> 00:41:58,000
see all type

781
00:41:58,000 --> 00:42:02,000
load in the current runtime from python

782
00:42:02,000 --> 00:42:03,920
and what does it mean in python in

783
00:42:03,920 --> 00:42:05,200
python um

784
00:42:05,200 --> 00:42:08,640
not all classes are load initially

785
00:42:08,640 --> 00:42:11,920
so as you do imports types are load into

786
00:42:11,920 --> 00:42:12,560
your

787
00:42:12,560 --> 00:42:15,520
application runtime and from there you

788
00:42:15,520 --> 00:42:16,960
can uh

789
00:42:16,960 --> 00:42:20,079
access them and uh yeah

790
00:42:20,079 --> 00:42:23,280
use them um so uh

791
00:42:23,280 --> 00:42:26,880
will it look so with this syntax

792
00:42:26,880 --> 00:42:29,440
we're gonna take uh what does it do so

793
00:42:29,440 --> 00:42:30,160
first we

794
00:42:30,160 --> 00:42:32,240
have empty string this will be an object

795
00:42:32,240 --> 00:42:33,599
string

796
00:42:33,599 --> 00:42:37,119
we look at the its class describing

797
00:42:37,119 --> 00:42:39,839
uh this particular object so we'll have

798
00:42:39,839 --> 00:42:40,400
string

799
00:42:40,400 --> 00:42:43,520
base string object

800
00:42:43,680 --> 00:42:46,800
so we're selecting the

801
00:42:46,800 --> 00:42:49,599
the third element so index two this will

802
00:42:49,599 --> 00:42:51,040
be the type object

803
00:42:51,040 --> 00:42:54,480
and we're gonna select then uh

804
00:42:54,480 --> 00:42:56,240
we're gonna call the method a subclass

805
00:42:56,240 --> 00:42:58,160
to get all the

806
00:42:58,160 --> 00:43:00,240
surpluses that are created for type

807
00:43:00,240 --> 00:43:01,920
objects so

808
00:43:01,920 --> 00:43:03,839
now this is the type of output you'll

809
00:43:03,839 --> 00:43:06,400
get but i've

810
00:43:06,400 --> 00:43:08,319
reduced the output because in practice

811
00:43:08,319 --> 00:43:09,520
you'll get

812
00:43:09,520 --> 00:43:13,520
a list of at least 200 types

813
00:43:13,520 --> 00:43:16,640
even with some minimalist application

814
00:43:16,640 --> 00:43:20,319
so now that we can access any type

815
00:43:20,319 --> 00:43:22,720
we're going to on for uh those type

816
00:43:22,720 --> 00:43:25,119
based on their name

817
00:43:25,119 --> 00:43:27,119
we're going to uh on for example the

818
00:43:27,119 --> 00:43:28,400
type file so

819
00:43:28,400 --> 00:43:31,280
what's it is interesting with uh type

820
00:43:31,280 --> 00:43:31,839
file

821
00:43:31,839 --> 00:43:36,640
so this will be the uh 41

822
00:43:36,640 --> 00:43:40,800
element so we're going to use index 40.

823
00:43:40,800 --> 00:43:44,560
this means that this expression is

824
00:43:44,560 --> 00:43:47,680
the type file and from this

825
00:43:47,680 --> 00:43:49,599
type we can call the the constructor

826
00:43:49,599 --> 00:43:51,200
that directly

827
00:43:51,200 --> 00:43:54,640
and here we're gonna call uh for example

828
00:43:54,640 --> 00:43:55,920
we're gonna select the file

829
00:43:55,920 --> 00:43:59,119
atc password with uh the second argument

830
00:43:59,119 --> 00:44:00,480
from the constructor is

831
00:44:00,480 --> 00:44:04,000
re and once we'll get an

832
00:44:04,000 --> 00:44:06,880
instance of file we can calculate the

833
00:44:06,880 --> 00:44:07,440
read

834
00:44:07,440 --> 00:44:10,800
so this will be an alert to doing this

835
00:44:10,800 --> 00:44:15,200
syntax in python but we're doing it

836
00:44:15,200 --> 00:44:18,400
because jinja 2 doesn't have

837
00:44:18,400 --> 00:44:22,079
the file constructor already map

838
00:44:22,079 --> 00:44:25,119
then we're using this

839
00:44:25,119 --> 00:44:28,880
big chain to access the file object

840
00:44:28,880 --> 00:44:32,560
so this is specific to python 2.7 but

841
00:44:32,560 --> 00:44:33,440
this was to

842
00:44:33,440 --> 00:44:37,119
give you a simple example

843
00:44:37,119 --> 00:44:40,400
um one thing you you'll need to do is

844
00:44:40,400 --> 00:44:43,520
build uh in excess in in real life if

845
00:44:43,520 --> 00:44:44,880
you want to be sure that your payload

846
00:44:44,880 --> 00:44:46,480
work

847
00:44:46,480 --> 00:44:49,119
often it will be a index 40 because of

848
00:44:49,119 --> 00:44:50,160
the way

849
00:44:50,160 --> 00:44:53,200
python is loading is object usually it's

850
00:44:53,200 --> 00:44:54,319
a

851
00:44:54,319 --> 00:44:56,480
not the deterministic it's not something

852
00:44:56,480 --> 00:44:58,800
document but in general it will be

853
00:44:58,800 --> 00:45:01,200
across any server any application it

854
00:45:01,200 --> 00:45:02,079
will be

855
00:45:02,079 --> 00:45:06,720
an x4d for python 2 to the that 7.

856
00:45:06,720 --> 00:45:09,119
but if you want to be sure you can first

857
00:45:09,119 --> 00:45:10,000
evaluate

858
00:45:10,000 --> 00:45:13,119
this expression so list all the subclass

859
00:45:13,119 --> 00:45:16,079
then identify which index is the api you

860
00:45:16,079 --> 00:45:17,119
want to call

861
00:45:17,119 --> 00:45:19,599
so in this case when i see type file i

862
00:45:19,599 --> 00:45:20,960
use this index

863
00:45:20,960 --> 00:45:22,240
and then i'm sure i'm selecting the

864
00:45:22,240 --> 00:45:23,680
right thing because otherwise you might

865
00:45:23,680 --> 00:45:24,960
get error

866
00:45:24,960 --> 00:45:28,240
like the constructor doesn't have a

867
00:45:28,240 --> 00:45:30,240
second argument because you're calling

868
00:45:30,240 --> 00:45:34,480
something that is not callable this way

869
00:45:34,480 --> 00:45:36,079
okay now we're going to jump to some

870
00:45:36,079 --> 00:45:37,599
already uh

871
00:45:37,599 --> 00:45:40,800
straight to what we really want so we're

872
00:45:40,800 --> 00:45:42,240
going to want to

873
00:45:42,240 --> 00:45:44,319
do a command execution to have a remote

874
00:45:44,319 --> 00:45:46,079
code execution

875
00:45:46,079 --> 00:45:49,950
so in python 3.8

876
00:45:49,950 --> 00:45:51,520
[Music]

877
00:45:51,520 --> 00:45:54,240
the same payload will be usable but with

878
00:45:54,240 --> 00:45:55,599
a different index so

879
00:45:55,599 --> 00:45:58,800
all the examples are python 2 but you'll

880
00:45:58,800 --> 00:45:59,119
see

881
00:45:59,119 --> 00:46:01,839
the alternative so it's going to be the

882
00:46:01,839 --> 00:46:03,760
same syntax

883
00:46:03,760 --> 00:46:06,319
because ginger library was not

884
00:46:06,319 --> 00:46:07,359
implemented

885
00:46:07,359 --> 00:46:09,280
totally differently from version to

886
00:46:09,280 --> 00:46:10,640
version it's

887
00:46:10,640 --> 00:46:13,280
uh in python 2 it will be the m3 will be

888
00:46:13,280 --> 00:46:14,079
the same syntax

889
00:46:14,079 --> 00:46:16,960
the difference is that because your

890
00:46:16,960 --> 00:46:18,079
runtime

891
00:46:18,079 --> 00:46:19,920
type will be mapped at different index

892
00:46:19,920 --> 00:46:22,079
you need to be aware of this

893
00:46:22,079 --> 00:46:26,079
so as i said in 99

894
00:46:26,079 --> 00:46:28,319
of the chance that in python 2 this will

895
00:46:28,319 --> 00:46:29,760
be the index

896
00:46:29,760 --> 00:46:32,720
but this is not something that python is

897
00:46:32,720 --> 00:46:34,079
commenting to

898
00:46:34,079 --> 00:46:36,800
it's a just something uh because of the

899
00:46:36,800 --> 00:46:38,720
way it was implemented

900
00:46:38,720 --> 00:46:43,839
most instance will fall on this index

901
00:46:44,000 --> 00:46:46,880
now now that we have a reference to a

902
00:46:46,880 --> 00:46:47,760
subprocess

903
00:46:47,760 --> 00:46:51,760
key open we're going to call

904
00:46:51,760 --> 00:46:56,640
this the constructor of process open

905
00:46:56,640 --> 00:46:58,640
and we're gonna give it some arguments

906
00:46:58,640 --> 00:47:00,160
so we're gonna

907
00:47:00,160 --> 00:47:04,960
specify first our comment uh

908
00:47:04,960 --> 00:47:08,319
shell is to uh basically load some

909
00:47:08,319 --> 00:47:09,839
uh thing in the past so you know you

910
00:47:09,839 --> 00:47:11,359
have to specify i think uh

911
00:47:11,359 --> 00:47:15,200
absolute command with absolute path

912
00:47:15,359 --> 00:47:18,319
uh std out is not useful because we're

913
00:47:18,319 --> 00:47:19,119
not i

914
00:47:19,119 --> 00:47:21,359
we don't have access yet to the the

915
00:47:21,359 --> 00:47:22,400
console

916
00:47:22,400 --> 00:47:25,520
of this application and we call

917
00:47:25,520 --> 00:47:27,200
communicate communicate we'll

918
00:47:27,200 --> 00:47:31,839
uh open the basically the

919
00:47:31,839 --> 00:47:35,440
the exec v basically we'll do a ss call

920
00:47:35,440 --> 00:47:35,760
to

921
00:47:35,760 --> 00:47:39,200
uh execute the the command

922
00:47:39,200 --> 00:47:42,400
and then with as a return value

923
00:47:42,400 --> 00:47:46,000
we'll get the the the output of this

924
00:47:46,000 --> 00:47:48,319
column

925
00:47:49,520 --> 00:47:52,000
so this is the the pillow that you

926
00:47:52,000 --> 00:47:53,119
should use

927
00:47:53,119 --> 00:47:55,760
you should be using for this exercise

928
00:47:55,760 --> 00:47:57,839
i'm giving a small alternative for

929
00:47:57,839 --> 00:48:00,079
python 2 that's

930
00:48:00,079 --> 00:48:02,559
that's 7 because this is a pillow that

931
00:48:02,559 --> 00:48:03,119
is

932
00:48:03,119 --> 00:48:06,240
often usable for

933
00:48:06,240 --> 00:48:10,240
sandbox uh type of uh

934
00:48:10,319 --> 00:48:13,359
i would say a sandbox escape challenges

935
00:48:13,359 --> 00:48:14,960
in cdf

936
00:48:14,960 --> 00:48:17,520
so sometimes you'll be able to have some

937
00:48:17,520 --> 00:48:19,359
limited access to python

938
00:48:19,359 --> 00:48:23,359
but you won't be able to access

939
00:48:23,359 --> 00:48:26,640
let's say the os class

940
00:48:26,640 --> 00:48:30,000
or the os module i should say

941
00:48:30,000 --> 00:48:33,440
so with this

942
00:48:33,440 --> 00:48:36,400
expression we can start from the warning

943
00:48:36,400 --> 00:48:38,319
instance

944
00:48:38,319 --> 00:48:41,680
uh and a warning instance as

945
00:48:41,680 --> 00:48:44,720
a cache of a different module

946
00:48:44,720 --> 00:48:46,559
and even though the os module for

947
00:48:46,559 --> 00:48:48,800
example was not important

948
00:48:48,800 --> 00:48:52,559
you'd be able to access it because

949
00:48:52,559 --> 00:48:54,800
because it's a built-in python module

950
00:48:54,800 --> 00:48:57,599
there are some reference in this cache

951
00:48:57,599 --> 00:49:01,359
so in it is an internal property from

952
00:49:01,359 --> 00:49:04,800
warning instance we're going to look at

953
00:49:04,800 --> 00:49:08,160
the in

954
00:49:08,160 --> 00:49:11,839
this property then this dictionary

955
00:49:11,839 --> 00:49:16,079
and this is needed to access

956
00:49:16,079 --> 00:49:19,520
the value from a dictionary and uh if we

957
00:49:19,520 --> 00:49:20,400
look at

958
00:49:20,400 --> 00:49:22,240
the different index at some point we'll

959
00:49:22,240 --> 00:49:24,640
file in the os module

960
00:49:24,640 --> 00:49:28,480
so this is a reference to this module

961
00:49:28,480 --> 00:49:30,880
and with this now instead of having

962
00:49:30,880 --> 00:49:32,400
access to a class we have access to a

963
00:49:32,400 --> 00:49:33,359
module and

964
00:49:33,359 --> 00:49:36,400
what we can do is uh called

965
00:49:36,400 --> 00:49:38,559
system so this will be equivalent to

966
00:49:38,559 --> 00:49:39,680
call os

967
00:49:39,680 --> 00:49:43,520
that system and then you can

968
00:49:43,520 --> 00:49:48,160
pipe the result anywhere you want

969
00:49:48,160 --> 00:49:51,119
so uh the thing with os system is that

970
00:49:51,119 --> 00:49:52,960
the output is not returned

971
00:49:52,960 --> 00:49:56,400
as a string as a so system doesn't

972
00:49:56,400 --> 00:49:58,640
return a string

973
00:49:58,640 --> 00:50:02,240
one quick trick that i'm doing is is

974
00:50:02,240 --> 00:50:03,680
outputting the content to a term

975
00:50:03,680 --> 00:50:05,520
directory so if you have

976
00:50:05,520 --> 00:50:08,800
right access to it can be any directory

977
00:50:08,800 --> 00:50:10,079
you can write to it

978
00:50:10,079 --> 00:50:12,960
and then with a second expression we're

979
00:50:12,960 --> 00:50:14,880
going to use the

980
00:50:14,880 --> 00:50:16,960
the tree that we've used to access the

981
00:50:16,960 --> 00:50:18,319
file instance

982
00:50:18,319 --> 00:50:20,880
and then we read what we have written

983
00:50:20,880 --> 00:50:22,640
this is a quick trick

984
00:50:22,640 --> 00:50:25,280
i've included because it's a something

985
00:50:25,280 --> 00:50:27,200
that is not necessarily used in template

986
00:50:27,200 --> 00:50:28,720
injectors most of the time because there

987
00:50:28,720 --> 00:50:29,599
are

988
00:50:29,599 --> 00:50:31,599
some pillows that will work on our

989
00:50:31,599 --> 00:50:32,800
python version

990
00:50:32,800 --> 00:50:35,680
but this is one that could be a useful

991
00:50:35,680 --> 00:50:39,200
to do some sandbox escape

992
00:50:39,280 --> 00:50:42,400
thing now to test your um

993
00:50:42,400 --> 00:50:44,480
your skill for this one uh you'll be

994
00:50:44,480 --> 00:50:45,520
able to use the p

995
00:50:45,520 --> 00:50:48,240
open uh payload on this application so

996
00:50:48,240 --> 00:50:51,040
i'm opening it

997
00:50:52,640 --> 00:50:55,839
let's see

998
00:50:58,960 --> 00:51:09,839
copy paste just to be sure

999
00:51:09,920 --> 00:51:14,800
maybe too much people are using it

1000
00:51:19,359 --> 00:51:23,200
okay so i'll have to double

1001
00:51:23,200 --> 00:51:25,759
check just

1002
00:51:32,240 --> 00:51:34,839
okay i'm gonna restart it just to be

1003
00:51:34,839 --> 00:51:37,839
sure

1004
00:51:45,599 --> 00:51:51,839
the right exercise yes what

1005
00:52:10,800 --> 00:52:13,119
okay so this uh python application

1006
00:52:13,119 --> 00:52:14,720
doesn't seem to scale

1007
00:52:14,720 --> 00:52:17,359
that well

1008
00:52:17,839 --> 00:52:20,960
a quick question are the people are able

1009
00:52:20,960 --> 00:52:22,319
to access this application

1010
00:52:22,319 --> 00:52:25,440
as i do it might be pretty slow maybe

1011
00:52:25,440 --> 00:52:27,119
somebody is running a scanner or

1012
00:52:27,119 --> 00:52:28,400
something

1013
00:52:28,400 --> 00:52:31,359
but you should be able to just do one

1014
00:52:31,359 --> 00:52:33,040
request and

1015
00:52:33,040 --> 00:52:36,558
get the

1016
00:52:37,280 --> 00:52:41,440
what you need so for this exercise

1017
00:52:41,440 --> 00:52:44,559
i've included four fields so uh

1018
00:52:44,559 --> 00:52:48,960
this is uh i test what you need to

1019
00:52:48,960 --> 00:52:52,240
find which field is actually

1020
00:52:52,240 --> 00:52:54,640
will be part of a template so actually

1021
00:52:54,640 --> 00:52:55,520
most of them

1022
00:52:55,520 --> 00:52:59,760
except one will not be in the template

1023
00:52:59,760 --> 00:53:02,000
but most of them will be including

1024
00:53:02,000 --> 00:53:03,599
templates

1025
00:53:03,599 --> 00:53:07,359
okay and currently i think it's

1026
00:53:07,359 --> 00:53:15,839
too slow or

1027
00:53:17,200 --> 00:53:19,200
okay i'm just gonna test if the other

1028
00:53:19,200 --> 00:53:28,720
applications are still running

1029
00:53:28,720 --> 00:53:32,879
okay unfortunately

1030
00:53:33,760 --> 00:53:36,079
okay so what i recommend you by the way

1031
00:53:36,079 --> 00:53:39,280
uh this application

1032
00:53:39,599 --> 00:53:42,960
is a form when you submit it it will

1033
00:53:42,960 --> 00:53:47,520
uh return a d card and it's a

1034
00:53:47,520 --> 00:53:49,200
format that will basically include

1035
00:53:49,200 --> 00:53:51,200
contact information so it's a specific

1036
00:53:51,200 --> 00:53:52,240
format

1037
00:53:52,240 --> 00:53:55,200
and because uh your web browser doesn't

1038
00:53:55,200 --> 00:53:56,000
render those

1039
00:53:56,000 --> 00:53:58,160
type of file you'll get a file download

1040
00:53:58,160 --> 00:53:59,280
so

1041
00:53:59,280 --> 00:54:02,000
for this reason i really recommend you

1042
00:54:02,000 --> 00:54:03,280
to

1043
00:54:03,280 --> 00:54:07,680
use a proxy and if i can show you

1044
00:54:07,680 --> 00:54:09,280
but i guess i'll have to pass to the

1045
00:54:09,280 --> 00:54:11,440
next exercise

1046
00:54:11,440 --> 00:54:17,280
so what you'll get

1047
00:54:19,760 --> 00:54:22,839
let's see let's do

1048
00:54:22,839 --> 00:54:25,839
test

1049
00:54:30,079 --> 00:54:32,960
um okay we're going to skip this

1050
00:54:32,960 --> 00:54:33,920
exercise but

1051
00:54:33,920 --> 00:54:37,119
uh first you find the parameter

1052
00:54:37,119 --> 00:54:39,599
that is part of the template injection

1053
00:54:39,599 --> 00:54:41,680
and then you'll be able to use

1054
00:54:41,680 --> 00:54:44,720
the process open payload

1055
00:54:44,720 --> 00:54:48,000
uh unfortunately uh

1056
00:54:48,000 --> 00:54:50,079
there's quite a lot of requests being

1057
00:54:50,079 --> 00:54:51,440
made to this

1058
00:54:51,440 --> 00:54:54,559
server and i think maybe people are

1059
00:54:54,559 --> 00:54:55,760
doing a lot of requests

1060
00:54:55,760 --> 00:54:59,920
to uh get the index maybe of

1061
00:54:59,920 --> 00:55:01,599
the right object but i'll have to pass

1062
00:55:01,599 --> 00:55:03,760
it to the exercise so

1063
00:55:03,760 --> 00:55:07,040
okay finally load but

1064
00:55:07,040 --> 00:55:10,319
okay i was not on the on my proxy so

1065
00:55:10,319 --> 00:55:12,480
okay i'll skip this exercise because it

1066
00:55:12,480 --> 00:55:14,160
might be uh too slow

1067
00:55:14,160 --> 00:55:15,680
for everybody to test it at the same

1068
00:55:15,680 --> 00:55:17,599
time

1069
00:55:17,599 --> 00:55:19,920
but what i'll do when we're going to do

1070
00:55:19,920 --> 00:55:22,480
the next exercise i'm going to publish

1071
00:55:22,480 --> 00:55:25,520
and get a ripple to with all the the

1072
00:55:25,520 --> 00:55:26,160
code

1073
00:55:26,160 --> 00:55:30,480
so in case you want to do it right now

1074
00:55:30,480 --> 00:55:34,480
you'll be able to run it locally so

1075
00:55:34,480 --> 00:55:37,440
sorry about that so i'm going to pass to

1076
00:55:37,440 --> 00:55:39,040
the next level size we

1077
00:55:39,040 --> 00:55:42,799
we still have a four to go

1078
00:55:43,040 --> 00:55:46,240
so a tornado this is another

1079
00:55:46,240 --> 00:55:49,359
template engine for python

1080
00:55:49,359 --> 00:55:52,319
but with this one it's much easier so

1081
00:55:52,319 --> 00:55:54,240
it's just to give you a comparison that

1082
00:55:54,240 --> 00:55:56,799
even from the same language

1083
00:55:56,799 --> 00:55:58,640
payload will not be the same for

1084
00:55:58,640 --> 00:56:00,400
different library

1085
00:56:00,400 --> 00:56:04,400
so syntax it looks almost identical but

1086
00:56:04,400 --> 00:56:05,680
the big difference

1087
00:56:05,680 --> 00:56:08,559
with ginger too is that internal

1088
00:56:08,559 --> 00:56:10,799
template so internal template is a

1089
00:56:10,799 --> 00:56:14,640
template built into the tornado

1090
00:56:14,640 --> 00:56:18,559
framework so it's a web framework

1091
00:56:18,559 --> 00:56:21,440
you can do imports from your campaign so

1092
00:56:21,440 --> 00:56:23,040
you don't need to do the uh

1093
00:56:23,040 --> 00:56:26,240
to access the os module from

1094
00:56:26,240 --> 00:56:29,200
the the warning cache that was including

1095
00:56:29,200 --> 00:56:30,160
a cache of

1096
00:56:30,160 --> 00:56:34,160
all module load you can just do import

1097
00:56:34,160 --> 00:56:37,280
and even though the os module is not

1098
00:56:37,280 --> 00:56:38,400
used

1099
00:56:38,400 --> 00:56:41,680
from this application then you can load

1100
00:56:41,680 --> 00:56:44,559
the module and it will be accessible so

1101
00:56:44,559 --> 00:56:46,720
this one is even easier

1102
00:56:46,720 --> 00:56:48,400
you just do in the same page of the

1103
00:56:48,400 --> 00:56:49,920
import and

1104
00:56:49,920 --> 00:56:53,359
and you can call process open much more

1105
00:56:53,359 --> 00:56:55,440
easily

1106
00:56:55,440 --> 00:56:58,640
as you'll see the os module or imported

1107
00:56:58,640 --> 00:57:00,160
module any

1108
00:57:00,160 --> 00:57:05,279
can be accessible from a tag template

1109
00:57:05,359 --> 00:57:09,200
so for this exercise it will be on port

1110
00:57:09,200 --> 00:57:12,480
80 14.

1111
00:57:12,480 --> 00:57:15,839
and uh yeah this one has only two field

1112
00:57:15,839 --> 00:57:16,640
and it's

1113
00:57:16,640 --> 00:57:19,839
assimilating um somebody registering to

1114
00:57:19,839 --> 00:57:22,880
uh a mailing is so

1115
00:57:22,880 --> 00:57:25,200
when you'll submit the the tool field

1116
00:57:25,200 --> 00:57:26,140
you'll receive

1117
00:57:26,140 --> 00:57:27,760
[Music]

1118
00:57:27,760 --> 00:57:30,720
you'll see a page that is looking like a

1119
00:57:30,720 --> 00:57:31,839
email

1120
00:57:31,839 --> 00:57:35,520
ish um but the idea is

1121
00:57:35,520 --> 00:57:39,040
just uh i i don't want i didn't want to

1122
00:57:39,040 --> 00:57:40,880
uh

1123
00:57:40,880 --> 00:57:44,000
have smtp to manage so

1124
00:57:44,000 --> 00:57:45,440
you know here for example this and

1125
00:57:45,440 --> 00:57:47,200
you'll see that

1126
00:57:47,200 --> 00:57:48,960
one field is reflected so it might be

1127
00:57:48,960 --> 00:57:50,240
this one

1128
00:57:50,240 --> 00:57:53,359
but i encourage you to test both and for

1129
00:57:53,359 --> 00:57:54,240
example

1130
00:57:54,240 --> 00:57:56,879
if i do this

1131
00:57:58,480 --> 00:58:01,760
we can see that the first our argument

1132
00:58:01,760 --> 00:58:06,240
is indeed continuing to the

1133
00:58:06,240 --> 00:58:08,960
to the template so this is there's a

1134
00:58:08,960 --> 00:58:10,240
potential for execution

1135
00:58:10,240 --> 00:58:13,839
is it totally most likely

1136
00:58:13,839 --> 00:58:17,040
because this is the this exercise

1137
00:58:17,040 --> 00:58:19,599
but when you see this after submitting

1138
00:58:19,599 --> 00:58:20,960
um

1139
00:58:20,960 --> 00:58:24,319
a seven multiply by seven most likely

1140
00:58:24,319 --> 00:58:27,119
this is a server side thing uh one thing

1141
00:58:27,119 --> 00:58:28,160
you need to verify

1142
00:58:28,160 --> 00:58:30,880
is always verified that in the source

1143
00:58:30,880 --> 00:58:31,760
code

1144
00:58:31,760 --> 00:58:34,799
uh the result is 49

1145
00:58:34,799 --> 00:58:38,640
because for example uh if you have uh

1146
00:58:38,640 --> 00:58:41,760
angularjs angularjs will evaluate

1147
00:58:41,760 --> 00:58:46,720
a bracket uh

1148
00:58:46,720 --> 00:58:50,319
from this syntax so you might not have a

1149
00:58:50,319 --> 00:58:51,680
remote code execution but

1150
00:58:51,680 --> 00:58:55,200
by the way you might have xss potential

1151
00:58:55,200 --> 00:58:56,559
because

1152
00:58:56,559 --> 00:59:00,880
you can convert server side template

1153
00:59:00,880 --> 00:59:04,000
to xss potentially if

1154
00:59:04,000 --> 00:59:08,079
it's if angular is low in the page

1155
00:59:08,160 --> 00:59:11,119
so i'll give you some time for the this

1156
00:59:11,119 --> 00:59:12,720
next exercise this

1157
00:59:12,720 --> 00:59:16,160
this one is much simpler for tornado so

1158
00:59:16,160 --> 00:59:18,559
it should be pretty quick you just copy

1159
00:59:18,559 --> 00:59:22,160
once you find the the right

1160
00:59:22,160 --> 00:59:26,240
so i can actually do the demo right away

1161
00:59:28,640 --> 00:59:33,839
so i'm gonna execute the ls command

1162
00:59:34,960 --> 00:59:38,160
and now i can see that i'm missing all a

1163
00:59:38,160 --> 00:59:42,400
file from the root spot and folder

1164
00:59:42,400 --> 00:59:45,040
then again we can see that there is

1165
00:59:45,040 --> 00:59:47,599
still a secret folder

1166
00:59:47,599 --> 00:59:50,960
and then there is flag on you can see

1167
00:59:50,960 --> 00:59:51,920
here

1168
00:59:51,920 --> 00:59:54,160
so

1169
00:59:58,720 --> 01:00:03,040
but obviously uh if you're uh

1170
01:00:03,040 --> 01:00:04,640
already set up and more familiar with

1171
01:00:04,640 --> 01:00:07,520
river shell uh

1172
01:00:07,520 --> 01:00:09,520
you can do it like this we're executing

1173
01:00:09,520 --> 01:00:10,720
a command just like

1174
01:00:10,720 --> 01:00:13,280
that i'm using some simpler payload for

1175
01:00:13,280 --> 01:00:14,720
this workshop just to

1176
01:00:14,720 --> 01:00:18,240
get quick proof of concept

1177
01:00:18,319 --> 01:00:20,480
if you're reporting the blog to uh maybe

1178
01:00:20,480 --> 01:00:21,680
developers

1179
01:00:21,680 --> 01:00:25,040
uh sometimes just just having a comment

1180
01:00:25,040 --> 01:00:25,359
like

1181
01:00:25,359 --> 01:00:29,839
id or omi

1182
01:00:29,920 --> 01:00:32,480
will be a good enough proof concept to

1183
01:00:32,480 --> 01:00:33,599
demonstrate

1184
01:00:33,599 --> 01:00:36,960
that you have access to the remote

1185
01:00:36,960 --> 01:00:38,319
server

1186
01:00:38,319 --> 01:00:42,079
so i'll be on mute and i'll be deploying

1187
01:00:42,079 --> 01:00:45,440
um i'll be uh

1188
01:00:45,440 --> 01:00:47,359
not deploying but publishing the the

1189
01:00:47,359 --> 01:00:49,280
code for the previous exercise

1190
01:00:49,280 --> 01:00:52,880
in case people want to do it live now

1191
01:00:52,880 --> 01:00:55,599
but uh i don't think it will be working

1192
01:00:55,599 --> 01:00:57,920
as soon

1193
01:00:57,920 --> 01:01:00,319
unless somebody was actively scanning

1194
01:01:00,319 --> 01:01:02,240
those and stuff

1195
01:01:02,240 --> 01:01:05,119
but uh both extras are kind of similar

1196
01:01:05,119 --> 01:01:06,640
it's just that the pillow it

1197
01:01:06,640 --> 01:01:10,000
is much changer for the second one so

1198
01:01:10,000 --> 01:01:13,359
in i would say five minutes

1199
01:01:13,359 --> 01:01:17,040
because it's really a simple uh test but

1200
01:01:17,040 --> 01:01:19,119
take your time to play with it uh in

1201
01:01:19,119 --> 01:01:20,799
five minutes i'm gonna pass to

1202
01:01:20,799 --> 01:01:24,240
the next exercise

1203
01:01:24,240 --> 01:01:27,839
which will be velocity

1204
01:01:27,839 --> 01:01:31,599
so uh java template um

1205
01:01:31,599 --> 01:01:35,599
yeah so stay tuned and see you in

1206
01:01:35,599 --> 01:01:39,839
four to five minutes

1207
01:02:43,599 --> 01:02:47,039
someone told me the other exercise is

1208
01:02:47,039 --> 01:02:48,640
not working

1209
01:02:48,640 --> 01:02:52,000
so if you want to try you can go and try

1210
01:02:52,000 --> 01:02:54,240
now

1211
01:02:55,680 --> 01:02:58,319
yeah and and by the way if you're uh if

1212
01:02:58,319 --> 01:03:00,160
you already complete some exercise don't

1213
01:03:00,160 --> 01:03:01,359
hesitate to

1214
01:03:01,359 --> 01:03:02,880
continue the next one if you want to

1215
01:03:02,880 --> 01:03:03,800
look

1216
01:03:03,800 --> 01:03:05,119
[Music]

1217
01:03:05,119 --> 01:03:08,559
i think we'll be fit on two hours to

1218
01:03:08,559 --> 01:03:10,700
to to do all six exercises but uh

1219
01:03:10,700 --> 01:03:13,440
[Music]

1220
01:03:13,440 --> 01:03:17,119
you can skip everything is ready

1221
01:03:17,119 --> 01:03:31,839
and handy

1222
01:06:00,160 --> 01:06:03,200
okay so i'll continue to the the next

1223
01:06:03,200 --> 01:06:04,720
one i i'm still

1224
01:06:04,720 --> 01:06:07,440
by the way creating their adversary uh

1225
01:06:07,440 --> 01:06:08,720
to give you access to

1226
01:06:08,720 --> 01:06:11,920
search code to docker and everything

1227
01:06:11,920 --> 01:06:14,160
but all the application you have access

1228
01:06:14,160 --> 01:06:17,599
to it will be the same thing

1229
01:06:17,599 --> 01:06:21,359
so velocity this is a library um

1230
01:06:21,359 --> 01:06:23,920
in java so the two main ones that are

1231
01:06:23,920 --> 01:06:24,400
pretty

1232
01:06:24,400 --> 01:06:27,520
very popular well there is a

1233
01:06:27,520 --> 01:06:29,359
new one but velocity and free marker are

1234
01:06:29,359 --> 01:06:31,280
probably the most popular

1235
01:06:31,280 --> 01:06:35,440
one they are easy to configure they

1236
01:06:35,440 --> 01:06:37,280
they have been there for the past 10

1237
01:06:37,280 --> 01:06:38,720
years i think

1238
01:06:38,720 --> 01:06:41,520
uh and yeah so velocity is kind of the

1239
01:06:41,520 --> 01:06:43,599
more light lightweight one

1240
01:06:43,599 --> 01:06:46,640
um that might be the one of the reasons

1241
01:06:46,640 --> 01:06:48,400
they are integrating this specific

1242
01:06:48,400 --> 01:06:49,920
library

1243
01:06:49,920 --> 01:06:54,319
i'm gonna zoom uh

1244
01:06:54,319 --> 01:06:57,280
basic syntax uh i didn't include it

1245
01:06:57,280 --> 01:06:59,119
directly here but

1246
01:06:59,119 --> 01:07:01,839
you'll see that it's similar to what we

1247
01:07:01,839 --> 01:07:04,960
saw here it's going to be dollar sign

1248
01:07:04,960 --> 01:07:07,200
followed by a variable it's going to be

1249
01:07:07,200 --> 01:07:07,480
a

1250
01:07:07,480 --> 01:07:09,119
[Music]

1251
01:07:09,119 --> 01:07:11,039
free marker will also use dollar sign

1252
01:07:11,039 --> 01:07:12,319
but with a

1253
01:07:12,319 --> 01:07:15,440
square bracket um

1254
01:07:15,440 --> 01:07:18,640
around it uh

1255
01:07:18,640 --> 01:07:23,119
when uh james first published his paper

1256
01:07:23,119 --> 01:07:28,240
he was mentioning that for velocity

1257
01:07:28,240 --> 01:07:32,079
sorry he could use an extension called

1258
01:07:32,079 --> 01:07:32,640
class 2

1259
01:07:32,640 --> 01:07:37,440
so both velocity and free marker have

1260
01:07:37,440 --> 01:07:40,000
extension so by default they want to

1261
01:07:40,000 --> 01:07:41,599
keep the library as lightweight as

1262
01:07:41,599 --> 01:07:42,880
possible

1263
01:07:42,880 --> 01:07:45,599
but they have some additional extension

1264
01:07:45,599 --> 01:07:46,400
and one of them

1265
01:07:46,400 --> 01:07:49,920
is class tool that can allow you to load

1266
01:07:49,920 --> 01:07:52,319
different type of resource but it's not

1267
01:07:52,319 --> 01:07:53,599
there by default so

1268
01:07:53,599 --> 01:07:57,039
this pillow was what was documented for

1269
01:07:57,039 --> 01:07:57,760
uh

1270
01:07:57,760 --> 01:07:59,680
gaining remote code execution with

1271
01:07:59,680 --> 01:08:01,119
velocity

1272
01:08:01,119 --> 01:08:04,400
but it's very unlikely that

1273
01:08:04,400 --> 01:08:07,680
class 2 is being load

1274
01:08:07,680 --> 01:08:10,960
i think that instructs to

1275
01:08:10,960 --> 01:08:13,920
if you would have some the velocity

1276
01:08:13,920 --> 01:08:15,200
plug-in or

1277
01:08:15,200 --> 01:08:17,120
there was one specificator that when you

1278
01:08:17,120 --> 01:08:19,679
import velocity

1279
01:08:19,679 --> 01:08:22,479
this property a class was present and it

1280
01:08:22,479 --> 01:08:22,880
was

1281
01:08:22,880 --> 01:08:26,399
a class 2 extension but for this

1282
01:08:26,399 --> 01:08:27,120
workshop

1283
01:08:27,120 --> 01:08:31,359
we're using vanilla uh little city

1284
01:08:31,359 --> 01:08:34,640
and uh we're going to use reflection

1285
01:08:34,640 --> 01:08:35,120
that

1286
01:08:35,120 --> 01:08:37,600
is kind of similar of what we saw with

1287
01:08:37,600 --> 01:08:38,560
ginger too

1288
01:08:38,560 --> 01:08:41,600
so we're going to access meta properties

1289
01:08:41,600 --> 01:08:44,560
to access class that are not directly a

1290
01:08:44,560 --> 01:08:46,399
reference

1291
01:08:46,399 --> 01:08:49,839
in our template so our template

1292
01:08:49,839 --> 01:08:53,040
we might be able to edit the the content

1293
01:08:53,040 --> 01:08:53,759
but usually

1294
01:08:53,759 --> 01:08:56,479
the application will give us some data

1295
01:08:56,479 --> 01:08:57,920
to bind

1296
01:08:57,920 --> 01:08:59,920
and the data that is in mind is not

1297
01:08:59,920 --> 01:09:02,080
necessarily utility class

1298
01:09:02,080 --> 01:09:04,560
and very powerful thing so we need to

1299
01:09:04,560 --> 01:09:06,960
start from what we have

1300
01:09:06,960 --> 01:09:09,198
different uh references and from there

1301
01:09:09,198 --> 01:09:10,640
access an interesting class

1302
01:09:10,640 --> 01:09:12,238
so here i'm gonna explain the payload

1303
01:09:12,238 --> 01:09:14,158
that we'll be using

1304
01:09:14,158 --> 01:09:17,279
so first we initialize a variable

1305
01:09:17,279 --> 01:09:19,520
so as i mentioned we could use directly

1306
01:09:19,520 --> 01:09:20,960
any variable that is bind to the

1307
01:09:20,960 --> 01:09:21,920
template

1308
01:09:21,920 --> 01:09:25,679
but to keep it keep it generic and

1309
01:09:25,679 --> 01:09:27,839
to make sure that this field will work

1310
01:09:27,839 --> 01:09:29,439
no matter

1311
01:09:29,439 --> 01:09:31,600
how the the variable our name we can use

1312
01:09:31,600 --> 01:09:33,520
this

1313
01:09:33,520 --> 01:09:36,560
um first we're going to look at the

1314
01:09:36,560 --> 01:09:39,040
every object in java as a class property

1315
01:09:39,040 --> 01:09:40,640
that will uh

1316
01:09:40,640 --> 01:09:44,080
basically be a class class so

1317
01:09:44,080 --> 01:09:48,319
class with a c a capital c so this

1318
01:09:48,319 --> 01:09:50,479
property or will be equivalent to called

1319
01:09:50,479 --> 01:09:51,920
get classes

1320
01:09:51,920 --> 01:09:55,280
that will return a class object

1321
01:09:55,280 --> 01:09:59,520
um then the class object we can load

1322
01:09:59,520 --> 01:10:03,120
additional class to load so this is a

1323
01:10:03,120 --> 01:10:06,400
static method that is not specific to

1324
01:10:06,400 --> 01:10:07,679
the instance of string

1325
01:10:07,679 --> 01:10:09,600
and from this we can load additional

1326
01:10:09,600 --> 01:10:11,920
type so for this payload we're

1327
01:10:11,920 --> 01:10:15,440
loading runtime character and string

1328
01:10:15,440 --> 01:10:19,679
and these uh reference are classes

1329
01:10:19,679 --> 01:10:23,199
definition and from those

1330
01:10:23,199 --> 01:10:26,239
for example the runtime classes

1331
01:10:26,239 --> 01:10:27,679
we're going to be able to from this

1332
01:10:27,679 --> 01:10:30,000
reference to call and

1333
01:10:30,000 --> 01:10:32,159
static method so here we're calling the

1334
01:10:32,159 --> 01:10:34,000
runtime method

1335
01:10:34,000 --> 01:10:36,560
um get runtime will return at last

1336
01:10:36,560 --> 01:10:37,199
runtime

1337
01:10:37,199 --> 01:10:40,320
and runtime in java is basically a class

1338
01:10:40,320 --> 01:10:41,920
two

1339
01:10:41,920 --> 01:10:44,960
that allow you to execute common there's

1340
01:10:44,960 --> 01:10:46,480
also process builder but

1341
01:10:46,480 --> 01:10:49,920
uh because with this syntax we can

1342
01:10:49,920 --> 01:10:52,960
access mainly uh static

1343
01:10:52,960 --> 01:10:55,760
method easily it's easier with the

1344
01:10:55,760 --> 01:10:58,320
runtime classes

1345
01:10:58,320 --> 01:11:00,320
and then the last two lines are

1346
01:11:00,320 --> 01:11:01,360
basically just

1347
01:11:01,360 --> 01:11:04,719
uh loops that will uh display one

1348
01:11:04,719 --> 01:11:05,920
character

1349
01:11:05,920 --> 01:11:09,440
at a time from uh the input stream which

1350
01:11:09,440 --> 01:11:10,560
will be the

1351
01:11:10,560 --> 01:11:12,560
the result from the the command being

1352
01:11:12,560 --> 01:11:14,719
executed

1353
01:11:14,719 --> 01:11:17,760
so now that you've

1354
01:11:17,760 --> 01:11:19,920
you've got all what you you got that

1355
01:11:19,920 --> 01:11:21,440
what are what you need

1356
01:11:21,440 --> 01:11:23,520
uh it's gonna be the same principle you

1357
01:11:23,520 --> 01:11:24,960
have an application

1358
01:11:24,960 --> 01:11:28,159
first find uh confirm

1359
01:11:28,159 --> 01:11:31,120
uh where the template is and there is a

1360
01:11:31,120 --> 01:11:32,239
template evaluation

1361
01:11:32,239 --> 01:11:35,600
and then uh

1362
01:11:35,600 --> 01:11:38,320
execute this pillow so one thing you can

1363
01:11:38,320 --> 01:11:38,719
do

1364
01:11:38,719 --> 01:11:42,000
aside from um using a hidden stick

1365
01:11:42,000 --> 01:11:46,080
operation you can do for example just uh

1366
01:11:46,080 --> 01:11:48,480
an assignment or maybe you can

1367
01:11:48,480 --> 01:11:50,880
concatenate two string

1368
01:11:50,880 --> 01:11:54,480
and see uh if the display displayed

1369
01:11:54,480 --> 01:11:57,840
in a in a con

1370
01:11:57,840 --> 01:12:00,480
way so if there's a concatenation then

1371
01:12:00,480 --> 01:12:01,280
you know

1372
01:12:01,280 --> 01:12:04,320
that it's not displaying your operation

1373
01:12:04,320 --> 01:12:06,719
as

1374
01:12:09,920 --> 01:12:13,360
so um the application so i'm gonna open

1375
01:12:13,360 --> 01:12:14,000
it

1376
01:12:14,000 --> 01:12:23,840
just to show you

1377
01:12:25,120 --> 01:12:27,360
so

1378
01:12:32,719 --> 01:12:35,360
okay and also in the the tutorial

1379
01:12:35,360 --> 01:12:36,800
information on codelabs

1380
01:12:36,800 --> 01:12:39,840
you'll find uh an important information

1381
01:12:39,840 --> 01:12:43,440
this one require a user and a password

1382
01:12:43,440 --> 01:12:48,880
so this was just to simulate

1383
01:12:48,880 --> 01:12:52,800
an application that add some

1384
01:12:53,040 --> 01:12:57,120
so password is one two three five six

1385
01:13:00,880 --> 01:13:02,800
so the only thing i wanted to simulate

1386
01:13:02,800 --> 01:13:04,560
is to give you some example

1387
01:13:04,560 --> 01:13:07,679
of a type of context that you could see

1388
01:13:07,679 --> 01:13:09,520
an actual template injection so usually

1389
01:13:09,520 --> 01:13:11,440
it's not something

1390
01:13:11,440 --> 01:13:12,880
with this type of interface that you'll

1391
01:13:12,880 --> 01:13:15,120
see that yes user alex's

1392
01:13:15,120 --> 01:13:18,400
but maybe some operator or a user that

1393
01:13:18,400 --> 01:13:18,719
can

1394
01:13:18,719 --> 01:13:22,159
edit maybe a translation

1395
01:13:22,159 --> 01:13:25,440
string will have access to

1396
01:13:25,440 --> 01:13:29,760
templates so here you'll be able to exit

1397
01:13:29,760 --> 01:13:33,040
templates and

1398
01:13:33,040 --> 01:13:36,080
you can zoom again so

1399
01:13:36,080 --> 01:13:39,040
once you login to the application every

1400
01:13:39,040 --> 01:13:40,159
time you do save or

1401
01:13:40,159 --> 01:13:42,640
test uh the way i've done it is

1402
01:13:42,640 --> 01:13:44,080
everything in store

1403
01:13:44,080 --> 01:13:47,199
for your session so if you're updating a

1404
01:13:47,199 --> 01:13:48,960
template don't worry about uh

1405
01:13:48,960 --> 01:13:52,080
affecting other people uh

1406
01:13:52,080 --> 01:13:53,840
if you're doing save and you go back to

1407
01:13:53,840 --> 01:13:55,280
template you'll see it's being saved but

1408
01:13:55,280 --> 01:13:57,679
it's only for your session

1409
01:13:57,679 --> 01:14:00,960
you can also just do tests to

1410
01:14:00,960 --> 01:14:04,239
see the template being evaluated so here

1411
01:14:04,239 --> 01:14:04,960
where

1412
01:14:04,960 --> 01:14:08,239
this application is having some template

1413
01:14:08,239 --> 01:14:08,560
for

1414
01:14:08,560 --> 01:14:11,840
email that are in html

1415
01:14:11,840 --> 01:14:15,760
you'll see that by default there are two

1416
01:14:15,760 --> 01:14:18,800
variables so that's a great end that

1417
01:14:18,800 --> 01:14:22,880
this is not just not this is not just a

1418
01:14:22,880 --> 01:14:26,000
static string and

1419
01:14:26,000 --> 01:14:29,120
once you do save or edit

1420
01:14:29,120 --> 01:14:32,239
uh save or test i mean with test you'll

1421
01:14:32,239 --> 01:14:32,800
see that

1422
01:14:32,800 --> 01:14:34,880
uh some information are being replaced

1423
01:14:34,880 --> 01:14:36,080
so here

1424
01:14:36,080 --> 01:14:38,480
john and smith and there's a url being

1425
01:14:38,480 --> 01:14:39,920
placed here

1426
01:14:39,920 --> 01:14:42,480
you can see also the same version and

1427
01:14:42,480 --> 01:14:44,718
here

1428
01:14:45,040 --> 01:14:48,239
in html that is right there one of the

1429
01:14:48,239 --> 01:14:48,800
things that

1430
01:14:48,800 --> 01:14:52,239
james kettle mentioned uh initially

1431
01:14:52,239 --> 01:14:55,520
in his presentation is that often people

1432
01:14:55,520 --> 01:14:56,080
will

1433
01:14:56,080 --> 01:14:58,880
find template injection like hey i can

1434
01:14:58,880 --> 01:15:00,320
exit from this user

1435
01:15:00,320 --> 01:15:04,800
html description then i have access but

1436
01:15:04,800 --> 01:15:08,080
if you find uh if you have access to a

1437
01:15:08,080 --> 01:15:08,800
file

1438
01:15:08,800 --> 01:15:11,520
or maybe html file you can upload to a

1439
01:15:11,520 --> 01:15:12,239
service

1440
01:15:12,239 --> 01:15:15,520
that are rendered after that uh always

1441
01:15:15,520 --> 01:15:16,080
test for

1442
01:15:16,080 --> 01:15:18,560
a template injection because you might

1443
01:15:18,560 --> 01:15:22,239
have much more than just an exercise

1444
01:15:22,239 --> 01:15:25,440
so this is for the uh it's

1445
01:15:25,440 --> 01:15:28,560
quick how to use this application so uh

1446
01:15:28,560 --> 01:15:30,320
remember and then one two three four

1447
01:15:30,320 --> 01:15:31,679
five six

1448
01:15:31,679 --> 01:15:34,719
to log in and you'll be able to exit

1449
01:15:34,719 --> 01:15:39,440
the template same objective uh

1450
01:15:39,440 --> 01:15:42,560
once you have a valid execution of

1451
01:15:42,560 --> 01:15:43,280
command

1452
01:15:43,280 --> 01:15:45,679
try to access the flag.txt on the

1453
01:15:45,679 --> 01:15:47,520
service

1454
01:15:47,520 --> 01:15:51,199
so in 10 minutes

1455
01:15:51,199 --> 01:15:54,480
i'm gonna show the solution

1456
01:15:54,480 --> 01:15:57,920
or maybe a bit less

1457
01:15:57,920 --> 01:16:00,159
okay in five minutes i'm gonna show the

1458
01:16:00,159 --> 01:16:01,760
solution

1459
01:16:01,760 --> 01:16:03,840
and you'll have a few minutes just

1460
01:16:03,840 --> 01:16:06,000
before i pass to the next

1461
01:16:06,000 --> 01:16:09,760
existence after that so i'll be looking

1462
01:16:09,760 --> 01:16:10,960
at the question

1463
01:16:10,960 --> 01:16:21,840
so see you soon

1464
01:17:02,960 --> 01:17:06,400
okay i'm gonna answer a question was ask

1465
01:17:06,400 --> 01:17:10,320
uh david asked uh how can we prevent

1466
01:17:10,320 --> 01:17:12,560
this type of attack so

1467
01:17:12,560 --> 01:17:15,840
the the main thing to keep in mind i'm

1468
01:17:15,840 --> 01:17:17,520
giving a few examples with different

1469
01:17:17,520 --> 01:17:20,719
template engine is the at the moment

1470
01:17:20,719 --> 01:17:23,040
there are no template engine that have a

1471
01:17:23,040 --> 01:17:24,800
golden record of being

1472
01:17:24,800 --> 01:17:27,920
100 safe or at least has a good

1473
01:17:27,920 --> 01:17:29,440
protection

1474
01:17:29,440 --> 01:17:32,000
so far most of temp attention have

1475
01:17:32,000 --> 01:17:34,080
recently implemented

1476
01:17:34,080 --> 01:17:37,840
a type of sandbox but uh

1477
01:17:37,840 --> 01:17:40,239
but we're gonna talk in a moment when we

1478
01:17:40,239 --> 01:17:42,080
switch to free marker which is the next

1479
01:17:42,080 --> 01:17:43,360
exercise

1480
01:17:43,360 --> 01:17:46,640
is that people are fine bypass to

1481
01:17:46,640 --> 01:17:51,120
those uh so i don't think that there are

1482
01:17:51,120 --> 01:17:54,159
yet that many

1483
01:17:54,159 --> 01:17:56,080
template engine that are ready to be

1484
01:17:56,080 --> 01:17:57,600
exposed publicly

1485
01:17:57,600 --> 01:17:59,360
uh to re to either that could be

1486
01:17:59,360 --> 01:18:00,960
malicious

1487
01:18:00,960 --> 01:18:02,480
so that that's just something to keep in

1488
01:18:02,480 --> 01:18:04,560
mind so first thing

1489
01:18:04,560 --> 01:18:06,080
how can you manage the risk if you have

1490
01:18:06,080 --> 01:18:08,000
an application that is

1491
01:18:08,000 --> 01:18:11,679
exposing templates uh verify that

1492
01:18:11,679 --> 01:18:14,640
the user that uh are accessing this

1493
01:18:14,640 --> 01:18:16,159
template

1494
01:18:16,159 --> 01:18:19,120
uh are verified and it's not everybody

1495
01:18:19,120 --> 01:18:21,520
that can register an account or

1496
01:18:21,520 --> 01:18:23,760
can uh see this feature so that's one

1497
01:18:23,760 --> 01:18:26,000
way to limit

1498
01:18:26,000 --> 01:18:28,640
this and uh the the other thing is

1499
01:18:28,640 --> 01:18:29,280
enable

1500
01:18:29,280 --> 01:18:32,400
some sort of sandbox so um the

1501
01:18:32,400 --> 01:18:35,440
the talk that we're gonna gonna get

1502
01:18:35,440 --> 01:18:37,679
that i'm gonna ping to is a talk that

1503
01:18:37,679 --> 01:18:40,560
was uh looking at different cms

1504
01:18:40,560 --> 01:18:42,719
and see that when they use a template

1505
01:18:42,719 --> 01:18:44,000
engine

1506
01:18:44,000 --> 01:18:47,600
uh people find uh found some interesting

1507
01:18:47,600 --> 01:18:50,480
way to escape the sandbox

1508
01:18:50,480 --> 01:18:53,120
so sandbox exists that's one way to to

1509
01:18:53,120 --> 01:18:54,800
uh

1510
01:18:54,800 --> 01:18:58,400
to fix it if you absolutely need to have

1511
01:18:58,400 --> 01:19:00,719
those templates exposed

1512
01:19:00,719 --> 01:19:04,880
but uh at the moment it's not uh

1513
01:19:04,880 --> 01:19:08,239
100 bullet proof so try to avoid it

1514
01:19:08,239 --> 01:19:11,040
that's the first thing because it's not

1515
01:19:11,040 --> 01:19:12,320
super common

1516
01:19:12,320 --> 01:19:14,159
and it's not something that you

1517
01:19:14,159 --> 01:19:15,760
absolutely need

1518
01:19:15,760 --> 01:19:19,840
and uh one thing you can you could do is

1519
01:19:19,840 --> 01:19:22,159
maybe a less sexy way is instead of

1520
01:19:22,159 --> 01:19:24,640
using maybe a velocity of your marker

1521
01:19:24,640 --> 01:19:27,920
switch to a simple string replacement so

1522
01:19:27,920 --> 01:19:29,679
for example if you're doing email

1523
01:19:29,679 --> 01:19:32,080
templates you could do some really

1524
01:19:32,080 --> 01:19:33,360
simple

1525
01:19:33,360 --> 01:19:36,400
substitution and maybe you will you'll

1526
01:19:36,400 --> 01:19:38,159
cover

1527
01:19:38,159 --> 01:19:40,640
the feature that you need and then if

1528
01:19:40,640 --> 01:19:41,520
you need some

1529
01:19:41,520 --> 01:19:44,400
more uh rich templates then maybe

1530
01:19:44,400 --> 01:19:45,520
consider

1531
01:19:45,520 --> 01:19:48,159
a template is it if it's sandbox enough

1532
01:19:48,159 --> 01:19:48,880
so i hope

1533
01:19:48,880 --> 01:20:05,840
it's answering the question

1534
01:20:38,480 --> 01:20:41,679
flip there's a good

1535
01:20:41,679 --> 01:20:44,639
question by janetta for once so can you

1536
01:20:44,639 --> 01:20:47,840
answer it

1537
01:20:59,679 --> 01:21:01,600
yes okay i just started the question so

1538
01:21:01,600 --> 01:21:03,360
um uh

1539
01:21:03,360 --> 01:21:05,280
for velocity the variable that will

1540
01:21:05,280 --> 01:21:06,880
always work is

1541
01:21:06,880 --> 01:21:10,480
simply assigning uh you can create

1542
01:21:10,480 --> 01:21:13,600
a variable on the fly so that's what the

1543
01:21:13,600 --> 01:21:16,320
payroll is using the last one so with

1544
01:21:16,320 --> 01:21:16,960
this

1545
01:21:16,960 --> 01:21:19,520
set directive we can create a variable

1546
01:21:19,520 --> 01:21:20,960
with empty string

1547
01:21:20,960 --> 01:21:23,440
so this way when we copy our pedal we're

1548
01:21:23,440 --> 01:21:24,560
sure

1549
01:21:24,560 --> 01:21:27,679
that the x variable will be existing and

1550
01:21:27,679 --> 01:21:28,880
this way we can

1551
01:21:28,880 --> 01:21:43,840
do the telescopic that class dot phoneme

1552
01:22:43,280 --> 01:22:45,520
philip uh it's normal we don't see your

1553
01:22:45,520 --> 01:22:52,080
screen now

1554
01:22:52,080 --> 01:22:55,920
yes i'm just preparing for the last demo

1555
01:22:55,920 --> 01:22:59,280
for the demo for this

1556
01:23:04,840 --> 01:23:07,840
okay

1557
01:23:18,840 --> 01:23:21,840
um

1558
01:23:38,800 --> 01:23:41,920
okay at this point i think everybody

1559
01:23:41,920 --> 01:23:43,679
should have complete diversity and

1560
01:23:43,679 --> 01:23:45,679
probably most of you are

1561
01:23:45,679 --> 01:23:47,760
currently reading the the free marker

1562
01:23:47,760 --> 01:23:48,880
one

1563
01:23:48,880 --> 01:23:52,480
so uh the way the expectations work

1564
01:23:52,480 --> 01:23:54,320
once you copy the payroll i'm just gonna

1565
01:23:54,320 --> 01:23:55,520
zoom

1566
01:23:55,520 --> 01:23:58,400
so in case you didn't get it so i've

1567
01:23:58,400 --> 01:24:00,000
just got clickbait

1568
01:24:00,000 --> 01:24:02,000
the bill that was in the codelabs

1569
01:24:02,000 --> 01:24:03,520
templates

1570
01:24:03,520 --> 01:24:05,199
and i've replaced this section so

1571
01:24:05,199 --> 01:24:07,920
instead of the id command or omi

1572
01:24:07,920 --> 01:24:10,639
uh you replace it with ls and then

1573
01:24:10,639 --> 01:24:11,920
you'll find that there's a

1574
01:24:11,920 --> 01:24:15,520
flag that txt and the secret folder

1575
01:24:15,520 --> 01:24:18,480
same principle as as a previous exercise

1576
01:24:18,480 --> 01:24:19,280
you'll be able

1577
01:24:19,280 --> 01:24:23,840
to um to see the content

1578
01:24:23,840 --> 01:24:26,560
being shown here so it's always easier

1579
01:24:26,560 --> 01:24:27,360
to look at the

1580
01:24:27,360 --> 01:24:30,880
the view on the the left in practice

1581
01:24:30,880 --> 01:24:34,880
always use a repeater and burp

1582
01:24:34,880 --> 01:24:37,920
or anything equivalent so this way

1583
01:24:37,920 --> 01:24:40,960
you can see the source and

1584
01:24:40,960 --> 01:24:44,159
for example if there are some

1585
01:24:44,159 --> 01:24:46,719
specific xml tags you get you can see

1586
01:24:46,719 --> 01:24:49,280
the actual result

1587
01:24:49,280 --> 01:24:51,520
okay i'm going to switch to the next

1588
01:24:51,520 --> 01:24:54,159
exercise

1589
01:24:54,320 --> 01:24:58,400
zoom again to make sure that okay and

1590
01:24:58,400 --> 01:25:01,120
we're on

1591
01:25:02,400 --> 01:25:05,040
sorry about the resolution that is not

1592
01:25:05,040 --> 01:25:06,000
optimal

1593
01:25:06,000 --> 01:25:08,639
but at least everybody can wait now so

1594
01:25:08,639 --> 01:25:09,679
free marker

1595
01:25:09,679 --> 01:25:12,639
very similar to velocity syntax would

1596
01:25:12,639 --> 01:25:14,800
look like this

1597
01:25:14,800 --> 01:25:17,920
uh we can bind some string or scan out

1598
01:25:17,920 --> 01:25:20,320
directly

1599
01:25:20,320 --> 01:25:22,320
free marker has a lot of limitation we

1600
01:25:22,320 --> 01:25:24,840
cannot do assignment

1601
01:25:24,840 --> 01:25:28,800
um as easily we cannot call

1602
01:25:28,800 --> 01:25:33,760
any method at any time on any object

1603
01:25:33,760 --> 01:25:37,440
there is very specific mechanism that

1604
01:25:37,440 --> 01:25:40,639
will see that our template model

1605
01:25:40,639 --> 01:25:43,360
but from this people have leverage and

1606
01:25:43,360 --> 01:25:45,440
remote connection and we will see all

1607
01:25:45,440 --> 01:25:49,600
right so um every variable that

1608
01:25:49,600 --> 01:25:52,639
is exposed on

1609
01:25:52,639 --> 01:25:54,960
to the template so these are for example

1610
01:25:54,960 --> 01:25:55,760
if i'm

1611
01:25:55,760 --> 01:25:58,000
writing a template for email template

1612
01:25:58,000 --> 01:26:00,159
there might be a message variable

1613
01:26:00,159 --> 01:26:02,000
this will be the way i access it same

1614
01:26:02,000 --> 01:26:03,280
thing for user

1615
01:26:03,280 --> 01:26:05,520
i can access the property displaying

1616
01:26:05,520 --> 01:26:08,080
this way

1617
01:26:08,080 --> 01:26:11,920
now uh there as i said you cannot call

1618
01:26:11,920 --> 01:26:15,199
uh directly a method on the on an

1619
01:26:15,199 --> 01:26:18,239
object uh but

1620
01:26:18,239 --> 01:26:20,400
there are some built-in functions that

1621
01:26:20,400 --> 01:26:22,159
can be um

1622
01:26:22,159 --> 01:26:24,400
add as a suffix so it's it's looking

1623
01:26:24,400 --> 01:26:25,760
like a bit

1624
01:26:25,760 --> 01:26:28,880
trick template from php but instead of

1625
01:26:28,880 --> 01:26:32,000
filters uh they call this a built-in

1626
01:26:32,000 --> 01:26:33,600
file function

1627
01:26:33,600 --> 01:26:36,400
so these are all the built-in functions

1628
01:26:36,400 --> 01:26:36,960
and there's

1629
01:26:36,960 --> 01:26:40,560
is one interesting one which allow us

1630
01:26:40,560 --> 01:26:44,719
to instantiate a class

1631
01:26:46,080 --> 01:26:51,199
but we cannot do this in

1632
01:26:51,199 --> 01:26:53,920
in a simple data writing like this we

1633
01:26:53,920 --> 01:26:54,639
need to do

1634
01:26:54,639 --> 01:26:58,400
um it can be used only in the context of

1635
01:26:58,400 --> 01:27:01,040
assignments

1636
01:27:01,199 --> 01:27:02,880
so it's going to make more sense and

1637
01:27:02,880 --> 01:27:05,679
when once you see the first payroll

1638
01:27:05,679 --> 01:27:09,440
but uh also

1639
01:27:09,440 --> 01:27:12,480
um so most of

1640
01:27:12,480 --> 01:27:14,239
the built-ins are really primitive and

1641
01:27:14,239 --> 01:27:16,080
will be useless for uh

1642
01:27:16,080 --> 01:27:19,600
execution so for example abs will

1643
01:27:19,600 --> 01:27:22,800
give you the absolute value of any

1644
01:27:22,800 --> 01:27:26,320
float value so most of them are

1645
01:27:26,320 --> 01:27:29,440
really a simple one but the interesting

1646
01:27:29,440 --> 01:27:29,840
one

1647
01:27:29,840 --> 01:27:32,159
is the new and we can see even in the

1648
01:27:32,159 --> 01:27:33,600
official documentation they are

1649
01:27:33,600 --> 01:27:35,280
mentioning that

1650
01:27:35,280 --> 01:27:37,360
there are security implications with

1651
01:27:37,360 --> 01:27:40,080
this building

1652
01:27:40,159 --> 01:27:42,320
this allows us to instantiate any

1653
01:27:42,320 --> 01:27:44,880
template model

1654
01:27:44,880 --> 01:27:48,239
classes and it might sound

1655
01:27:48,239 --> 01:27:50,960
really limited but by default uh free

1656
01:27:50,960 --> 01:27:52,800
marker

1657
01:27:52,800 --> 01:27:56,000
as a template model that is execute

1658
01:27:56,000 --> 01:27:57,920
it's an integrity class to allow a

1659
01:27:57,920 --> 01:27:59,920
template to execute

1660
01:27:59,920 --> 01:28:03,360
comment so just to give you a media

1661
01:28:03,360 --> 01:28:05,920
end about why they are building this

1662
01:28:05,920 --> 01:28:07,440
into the templates

1663
01:28:07,440 --> 01:28:09,440
is that sometimes my template are used

1664
01:28:09,440 --> 01:28:11,199
for documentation

1665
01:28:11,199 --> 01:28:14,560
and people might need to

1666
01:28:14,560 --> 01:28:17,600
in their documentation have some output

1667
01:28:17,600 --> 01:28:20,000
from comments to show example of output

1668
01:28:20,000 --> 01:28:20,480
so

1669
01:28:20,480 --> 01:28:22,239
if you're generating dynamically a

1670
01:28:22,239 --> 01:28:25,280
documentation it can be useful

1671
01:28:25,280 --> 01:28:28,320
this way so uh

1672
01:28:28,320 --> 01:28:31,840
this is the pillow that was uh uh

1673
01:28:31,840 --> 01:28:35,440
basically um proposed by uh james keto

1674
01:28:35,440 --> 01:28:38,480
and this worked perfectly in 2016

1675
01:28:38,480 --> 01:28:40,880
uh before they've started to implement

1676
01:28:40,880 --> 01:28:43,360
uh some sandbox

1677
01:28:43,360 --> 01:28:46,880
so the way it works is uh as i said

1678
01:28:46,880 --> 01:28:50,000
the new built-in only work in the

1679
01:28:50,000 --> 01:28:51,920
context of assignment so you won't be

1680
01:28:51,920 --> 01:28:53,360
able to do

1681
01:28:53,360 --> 01:28:56,400
this question mark new

1682
01:28:56,400 --> 01:28:59,679
on a regular data binding with

1683
01:28:59,679 --> 01:29:03,600
the the bracket character like this

1684
01:29:03,600 --> 01:29:06,000
but here we're assigning to the x

1685
01:29:06,000 --> 01:29:07,040
variable

1686
01:29:07,040 --> 01:29:10,639
an instance of the execute class

1687
01:29:10,639 --> 01:29:13,040
and this is working only because the

1688
01:29:13,040 --> 01:29:13,920
execute class

1689
01:29:13,920 --> 01:29:17,040
is a template model class from

1690
01:29:17,040 --> 01:29:20,159
free marker so in this first exercise

1691
01:29:20,159 --> 01:29:22,159
this will be

1692
01:29:22,159 --> 01:29:25,440
an unsandbox um

1693
01:29:25,440 --> 01:29:27,760
version of the application and in the

1694
01:29:27,760 --> 01:29:29,040
last exercise we're going to see the

1695
01:29:29,040 --> 01:29:30,480
same application but with

1696
01:29:30,480 --> 01:29:34,159
a sandbox mechanism

1697
01:29:34,159 --> 01:29:37,840
implemented that is very similar to

1698
01:29:37,840 --> 01:29:40,639
the live free cms so i've took the

1699
01:29:40,639 --> 01:29:41,600
sandbox from the

1700
01:29:41,600 --> 01:29:44,960
library that if i have enabled because

1701
01:29:44,960 --> 01:29:48,159
by default free marker doesn't have

1702
01:29:48,159 --> 01:29:51,280
a temp sandbox so the first application

1703
01:29:51,280 --> 01:29:52,560
that we're going to see

1704
01:29:52,560 --> 01:29:56,080
is vanilla rfi marker i think it's the

1705
01:29:56,080 --> 01:29:57,840
latest version

1706
01:29:57,840 --> 01:30:01,199
uh yeah yeah it's the latest version so

1707
01:30:01,199 --> 01:30:03,440
the only thing you need to uh remember

1708
01:30:03,440 --> 01:30:05,040
this application

1709
01:30:05,040 --> 01:30:08,239
is a password protected the password is

1710
01:30:08,239 --> 01:30:09,920
accessed as

1711
01:30:09,920 --> 01:30:13,040
described in the codelabs

1712
01:30:13,040 --> 01:30:16,639
tutorial and the application will look

1713
01:30:16,639 --> 01:30:18,560
very similar to the previous one from

1714
01:30:18,560 --> 01:30:21,840
little city it's just the

1715
01:30:21,840 --> 01:30:23,760
the visual will change a bit and

1716
01:30:23,760 --> 01:30:26,320
obviously the main change

1717
01:30:26,320 --> 01:30:29,440
it's no longer velocity being used but

1718
01:30:29,440 --> 01:30:32,879
you'll have a similar

1719
01:30:32,960 --> 01:30:36,480
uh interface and again don't hesitate

1720
01:30:36,480 --> 01:30:39,600
if they is it the page

1721
01:30:39,600 --> 01:30:42,480
uh when you you are editing it um these

1722
01:30:42,480 --> 01:30:44,480
are saved only to a

1723
01:30:44,480 --> 01:30:46,480
session at your view so basically you

1724
01:30:46,480 --> 01:30:49,199
have your own snapshot of

1725
01:30:49,199 --> 01:30:53,600
this mini cms so

1726
01:30:53,600 --> 01:30:55,679
you can execute the pillow that you want

1727
01:30:55,679 --> 01:30:58,239
and you won't be overriding a pillow

1728
01:30:58,239 --> 01:30:58,639
from

1729
01:30:58,639 --> 01:31:02,719
other people so try the vanilla uh

1730
01:31:02,719 --> 01:31:06,239
pillow first and uh

1731
01:31:06,239 --> 01:31:08,400
once you get command execution again

1732
01:31:08,400 --> 01:31:09,520
just make sure

1733
01:31:09,520 --> 01:31:12,639
everything is working and you can access

1734
01:31:12,639 --> 01:31:17,679
the flag.txt on the server

1735
01:31:17,679 --> 01:31:20,320
and in

1736
01:31:20,719 --> 01:31:23,760
two minutes i'm gonna show again the

1737
01:31:23,760 --> 01:31:24,480
demo

1738
01:31:24,480 --> 01:31:26,239
and then we're gonna go to the last part

1739
01:31:26,239 --> 01:31:28,840
which is the new content

1740
01:31:28,840 --> 01:31:32,960
the i would say

1741
01:31:32,960 --> 01:31:35,840
a very good example of what was present

1742
01:31:35,840 --> 01:31:36,159
at

1743
01:31:36,159 --> 01:31:38,719
blackhead this year regarding templates

1744
01:31:38,719 --> 01:31:40,560
injection

1745
01:31:40,560 --> 01:31:45,840
so see you in two minutes

1746
01:32:02,239 --> 01:32:07,280
okay i'm looking quickly at the question

1747
01:32:07,280 --> 01:32:10,170
yeah sorry uh about the chaotic

1748
01:32:10,170 --> 01:32:11,440
[Music]

1749
01:32:11,440 --> 01:32:14,880
at the beginning for the cat being loud

1750
01:32:14,880 --> 01:32:27,840
sorry about that um

1751
01:32:33,199 --> 01:32:36,159
okay so i'm leaving you working i think

1752
01:32:36,159 --> 01:32:41,839
i'll question more answers

1753
01:36:28,320 --> 01:36:31,280
okay so i'm gonna do the quick demo

1754
01:36:31,280 --> 01:36:33,920
probably most of you have done it

1755
01:36:33,920 --> 01:36:38,159
uh we were at the easy cms so

1756
01:36:38,159 --> 01:36:40,480
probably the easiest period you will get

1757
01:36:40,480 --> 01:36:42,560
in this workshop so

1758
01:36:42,560 --> 01:36:45,199
again the the workshop is an opportunity

1759
01:36:45,199 --> 01:36:45,760
to

1760
01:36:45,760 --> 01:36:48,880
uh play uh with the environment so

1761
01:36:48,880 --> 01:36:51,280
hesitate uh obviously to continue to

1762
01:36:51,280 --> 01:36:52,159
play with the

1763
01:36:52,159 --> 01:36:54,320
syntax free marker or any other template

1764
01:36:54,320 --> 01:36:56,159
to

1765
01:36:56,159 --> 01:36:57,760
get some interesting knowledge and maybe

1766
01:36:57,760 --> 01:36:59,760
find some alternative

1767
01:36:59,760 --> 01:37:03,199
uh to the pedal that present

1768
01:37:03,199 --> 01:37:05,600
so the final payload would look like

1769
01:37:05,600 --> 01:37:08,159
this so all you had to do was replace

1770
01:37:08,159 --> 01:37:10,400
uh the command here so pretty

1771
01:37:10,400 --> 01:37:12,239
straightforward

1772
01:37:12,239 --> 01:37:16,159
um yeah so and the way it looked

1773
01:37:16,159 --> 01:37:18,080
command was being displayed here there

1774
01:37:18,080 --> 01:37:20,320
as a result here

1775
01:37:20,320 --> 01:37:24,239
just like the velocity

1776
01:37:24,239 --> 01:37:28,639
exercise so

1777
01:37:28,639 --> 01:37:31,119
now it's going to get a bit more complex

1778
01:37:31,119 --> 01:37:31,920
so we're going to look

1779
01:37:31,920 --> 01:37:37,840
at sandbox sk more specifically

1780
01:37:39,600 --> 01:37:42,400
sandbox escape and cms that would be

1781
01:37:42,400 --> 01:37:44,719
using a free market so we're just gonna

1782
01:37:44,719 --> 01:37:49,600
do a step more then uh

1783
01:37:49,920 --> 01:37:51,360
then the previous exercise so a piece

1784
01:37:51,360 --> 01:37:53,199
decides i have no

1785
01:37:53,199 --> 01:37:56,960
uh none no protection but a free marker

1786
01:37:56,960 --> 01:38:00,320
since uh at least one year uh they have

1787
01:38:00,320 --> 01:38:02,960
a template class resolver

1788
01:38:02,960 --> 01:38:06,159
and uh this class will implement

1789
01:38:06,159 --> 01:38:09,440
what can be accessed but um

1790
01:38:09,440 --> 01:38:11,760
the thing that you need to be aware is

1791
01:38:11,760 --> 01:38:13,119
that free marker

1792
01:38:13,119 --> 01:38:16,400
this is what is referenced directly in

1793
01:38:16,400 --> 01:38:20,159
the template but if um

1794
01:38:20,159 --> 01:38:22,239
let's say you access a class that

1795
01:38:22,239 --> 01:38:24,239
eventually this class accessed

1796
01:38:24,239 --> 01:38:27,040
another class uh template cache is over

1797
01:38:27,040 --> 01:38:29,520
will not see

1798
01:38:29,520 --> 01:38:32,639
transitive dependencies so that's that's

1799
01:38:32,639 --> 01:38:33,040
uh

1800
01:38:33,040 --> 01:38:37,600
one important thing uh

1801
01:38:37,600 --> 01:38:40,639
yeah so the the first thing i

1802
01:38:40,639 --> 01:38:44,080
need to do uh if there is some unboxing

1803
01:38:44,080 --> 01:38:44,960
so

1804
01:38:44,960 --> 01:38:46,800
obviously the first thing that they will

1805
01:38:46,800 --> 01:38:48,000
uh block

1806
01:38:48,000 --> 01:38:51,119
is uh being able to load the

1807
01:38:51,119 --> 01:38:53,840
execute classes that was implementing

1808
01:38:53,840 --> 01:38:55,520
template models so the built-in class

1809
01:38:55,520 --> 01:38:55,920
from

1810
01:38:55,920 --> 01:38:59,679
marker it can easily be blacklist

1811
01:38:59,679 --> 01:39:03,280
with an implementation of this resolver

1812
01:39:03,280 --> 01:39:04,960
class

1813
01:39:04,960 --> 01:39:08,480
but the the different sandbox testing

1814
01:39:08,480 --> 01:39:10,400
that were found by advance

1815
01:39:10,400 --> 01:39:14,159
and iskali are leveraging

1816
01:39:14,159 --> 01:39:17,199
instance instance that were made

1817
01:39:17,199 --> 01:39:17,840
available

1818
01:39:17,840 --> 01:39:21,520
to the templates so

1819
01:39:21,520 --> 01:39:25,280
they have evaluated a couple of cms

1820
01:39:25,280 --> 01:39:28,080
so i'm going to zoom out to show you the

1821
01:39:28,080 --> 01:39:28,639
paper

1822
01:39:28,639 --> 01:39:31,119
quickly

1823
01:39:31,840 --> 01:39:35,040
so um

1824
01:39:35,119 --> 01:39:39,199
yeah this is what i want to show you

1825
01:39:39,199 --> 01:39:42,560
so uh filmmaker was uh

1826
01:39:42,560 --> 01:39:44,800
i chose it because there's a bit more

1827
01:39:44,800 --> 01:39:46,320
sms using it

1828
01:39:46,320 --> 01:39:48,560
but i would see that the more common one

1829
01:39:48,560 --> 01:39:49,520
are uh

1830
01:39:49,520 --> 01:39:52,840
live free and x wiki i guess that i

1831
01:39:52,840 --> 01:39:57,760
saw um

1832
01:39:57,760 --> 01:40:01,119
so what did i want to say yeah

1833
01:40:01,119 --> 01:40:04,800
so this simulation is basically

1834
01:40:04,800 --> 01:40:08,719
uh initially i wanted to deploy a

1835
01:40:08,719 --> 01:40:11,760
live free instance but i realized it's a

1836
01:40:11,760 --> 01:40:15,280
it needed quite a lot of resource for

1837
01:40:15,280 --> 01:40:18,159
what i could do uh a specific exercise

1838
01:40:18,159 --> 01:40:19,679
when i can do just a specific exercise

1839
01:40:19,679 --> 01:40:21,360
that is just rendering a template that

1840
01:40:21,360 --> 01:40:23,520
does the same thing so

1841
01:40:23,520 --> 01:40:27,040
the the class resolver that i'm using

1842
01:40:27,040 --> 01:40:30,239
is actually a copy paste or

1843
01:40:30,239 --> 01:40:32,320
an identical implementation of the

1844
01:40:32,320 --> 01:40:34,639
library one

1845
01:40:34,639 --> 01:40:39,520
so you'll get the same um same behavior

1846
01:40:39,520 --> 01:40:41,440
so the idea is that uh because it's a

1847
01:40:41,440 --> 01:40:42,880
cms people will be

1848
01:40:42,880 --> 01:40:45,920
able to upload file it's a wiki kind of

1849
01:40:45,920 --> 01:40:46,639
page

1850
01:40:46,639 --> 01:40:50,000
but pages often uh

1851
01:40:50,000 --> 01:40:51,679
at least there's a concept of template

1852
01:40:51,679 --> 01:40:53,520
in the live free that is

1853
01:40:53,520 --> 01:40:56,000
template file that will have access to

1854
01:40:56,000 --> 01:40:56,639
different

1855
01:40:56,639 --> 01:40:59,520
uh dynamic source and then you can this

1856
01:40:59,520 --> 01:41:00,400
um

1857
01:41:00,400 --> 01:41:04,320
render them with three marker tags

1858
01:41:04,320 --> 01:41:08,080
uh what when will sorry what we're going

1859
01:41:08,080 --> 01:41:08,320
to

1860
01:41:08,320 --> 01:41:11,040
leverage is the specific instance that

1861
01:41:11,040 --> 01:41:12,080
this cms

1862
01:41:12,080 --> 01:41:15,119
is exposing so all the five siemens that

1863
01:41:15,119 --> 01:41:16,719
i've shown

1864
01:41:16,719 --> 01:41:18,880
this small color blocks that were uh

1865
01:41:18,880 --> 01:41:20,719
using a few marker

1866
01:41:20,719 --> 01:41:23,440
will not necessarily add to the data

1867
01:41:23,440 --> 01:41:24,719
model the same

1868
01:41:24,719 --> 01:41:28,800
uh variable and because there are no

1869
01:41:28,800 --> 01:41:32,239
known sandbox escape with

1870
01:41:32,239 --> 01:41:36,000
vanilla built-ins of

1871
01:41:36,000 --> 01:41:38,400
free marker we really need to look at

1872
01:41:38,400 --> 01:41:39,840
the specific instance

1873
01:41:39,840 --> 01:41:42,320
and variable that are exposed and see if

1874
01:41:42,320 --> 01:41:45,040
they are have interesting feature

1875
01:41:45,040 --> 01:41:48,480
in them so uh

1876
01:41:48,480 --> 01:41:51,280
one thing we can do is enumerate the

1877
01:41:51,280 --> 01:41:52,239
data model

1878
01:41:52,239 --> 01:41:55,520
uh variable which is a global variable

1879
01:41:55,520 --> 01:41:56,239
that

1880
01:41:56,239 --> 01:41:58,639
is available in the most recent free

1881
01:41:58,639 --> 01:41:59,760
market one

1882
01:41:59,760 --> 01:42:03,119
older version will uh use this syntax

1883
01:42:03,119 --> 01:42:05,520
but uh in a recent version you need to

1884
01:42:05,520 --> 01:42:06,480
do a list tag

1885
01:42:06,480 --> 01:42:09,440
to enumerate those those keys so every

1886
01:42:09,440 --> 01:42:10,320
key that will be

1887
01:42:10,320 --> 01:42:12,080
print it's a variable so for example

1888
01:42:12,080 --> 01:42:14,000
when we were printing

1889
01:42:14,000 --> 01:42:16,560
a username in the email template this

1890
01:42:16,560 --> 01:42:19,199
would be a key

1891
01:42:19,920 --> 01:42:21,920
what we're looking for in those variable

1892
01:42:21,920 --> 01:42:24,159
is any class that could leak

1893
01:42:24,159 --> 01:42:27,199
a reference to the class over so

1894
01:42:27,199 --> 01:42:30,239
would be too easy if the

1895
01:42:30,239 --> 01:42:34,560
our an utility class is being uh

1896
01:42:34,560 --> 01:42:37,199
add to the model and straight we can do

1897
01:42:37,199 --> 01:42:38,719
get castle there

1898
01:42:38,719 --> 01:42:42,080
but if we can get uh indirectly

1899
01:42:42,080 --> 01:42:44,960
a reference to the class object class

1900
01:42:44,960 --> 01:42:46,560
object will have

1901
01:42:46,560 --> 01:42:48,480
a gate class or a method that will give

1902
01:42:48,480 --> 01:42:49,760
us

1903
01:42:49,760 --> 01:42:52,080
a working class server that would allow

1904
01:42:52,080 --> 01:42:53,840
us for example to load

1905
01:42:53,840 --> 01:42:57,840
classes from external source

1906
01:42:58,080 --> 01:43:00,480
same principle can apply if we can get a

1907
01:43:00,480 --> 01:43:01,760
reference to the thread

1908
01:43:01,760 --> 01:43:05,360
classes protected domain

1909
01:43:05,360 --> 01:43:08,880
servlet context so survey context

1910
01:43:08,880 --> 01:43:11,040
this is probably going to be the most

1911
01:43:11,040 --> 01:43:13,440
commonly exploited because

1912
01:43:13,440 --> 01:43:16,719
i think in more than 80 percent

1913
01:43:16,719 --> 01:43:20,239
of the cms the templating feature were

1914
01:43:20,239 --> 01:43:21,760
exposing a request

1915
01:43:21,760 --> 01:43:24,800
variable that was uh basically

1916
01:43:24,800 --> 01:43:28,960
uh http servlet request

1917
01:43:28,960 --> 01:43:32,320
classes which has a field that is

1918
01:43:32,320 --> 01:43:35,920
server context so i think

1919
01:43:35,920 --> 01:43:37,360
you're gonna start to see where we're

1920
01:43:37,360 --> 01:43:38,960
going with this but

1921
01:43:38,960 --> 01:43:42,320
uh other generic classes that

1922
01:43:42,320 --> 01:43:44,560
are not necessarily proprietary at the

1923
01:43:44,560 --> 01:43:46,400
um api

1924
01:43:46,400 --> 01:43:49,679
uh bundle worrying from osgi so webgi

1925
01:43:49,679 --> 01:43:53,040
is a way to handle a

1926
01:43:53,040 --> 01:43:54,560
large application with a lot of

1927
01:43:54,560 --> 01:43:56,960
dependency of different version

1928
01:43:56,960 --> 01:43:59,920
but bubble wiring would allow us to load

1929
01:43:59,920 --> 01:44:00,719
potentially

1930
01:44:00,719 --> 01:44:04,400
custom classes a string framework is

1931
01:44:04,400 --> 01:44:05,199
pretty common

1932
01:44:05,199 --> 01:44:08,560
so like being able to access uh

1933
01:44:08,560 --> 01:44:11,600
application context application context

1934
01:44:11,600 --> 01:44:12,719
we're not going to exploit it

1935
01:44:12,719 --> 01:44:15,920
in today's exercise but often or at

1936
01:44:15,920 --> 01:44:16,239
least

1937
01:44:16,239 --> 01:44:18,159
in the presentation they've mentioned

1938
01:44:18,159 --> 01:44:19,360
that it's

1939
01:44:19,360 --> 01:44:22,719
the we can find sometime reference in a

1940
01:44:22,719 --> 01:44:26,239
session attribute so if the

1941
01:44:26,239 --> 01:44:29,679
the template or the cms give us a

1942
01:44:29,679 --> 01:44:31,760
reference to session attribute

1943
01:44:31,760 --> 01:44:34,000
we might be able to find a session

1944
01:44:34,000 --> 01:44:35,760
attribute that includes a spring

1945
01:44:35,760 --> 01:44:37,360
reference

1946
01:44:37,360 --> 01:44:40,400
the sprint framework and from this we

1947
01:44:40,400 --> 01:44:41,440
can

1948
01:44:41,440 --> 01:44:45,678
maybe grab application context reference

1949
01:44:46,480 --> 01:44:49,920
so for today um

1950
01:44:49,920 --> 01:44:53,280
we're gonna look at uh yeah so this is

1951
01:44:53,280 --> 01:44:55,440
just an example so

1952
01:44:55,440 --> 01:44:58,639
again this is not uh a good syntax

1953
01:44:58,639 --> 01:44:59,760
mentioned because

1954
01:44:59,760 --> 01:45:02,719
we cannot access

1955
01:45:02,800 --> 01:45:05,119
class orders directly to those type but

1956
01:45:05,119 --> 01:45:07,760
with assign

1957
01:45:07,760 --> 01:45:11,180
we'll be able to access it

1958
01:45:11,180 --> 01:45:14,319
[Music]

1959
01:45:14,880 --> 01:45:17,840
so uh one example if we can find for

1960
01:45:17,840 --> 01:45:20,560
example uh

1961
01:45:20,960 --> 01:45:22,400
in this request variable let's see if

1962
01:45:22,400 --> 01:45:25,040
it's an instance of service request

1963
01:45:25,040 --> 01:45:27,440
then from this we can call get server

1964
01:45:27,440 --> 01:45:29,040
context

1965
01:45:29,040 --> 01:45:32,080
and from this we can get a class this is

1966
01:45:32,080 --> 01:45:33,119
just just

1967
01:45:33,119 --> 01:45:35,920
an example of chain to show you how can

1968
01:45:35,920 --> 01:45:37,119
we get to

1969
01:45:37,119 --> 01:45:40,239
those classes

1970
01:45:41,679 --> 01:45:45,199
so not all uh clusters are implemented

1971
01:45:45,199 --> 01:45:46,159
the same way

1972
01:45:46,159 --> 01:45:48,880
this is really important uh so in the

1973
01:45:48,880 --> 01:45:49,840
paper

1974
01:45:49,840 --> 01:45:51,520
i'm gonna show you again the paper

1975
01:45:51,520 --> 01:45:53,520
because uh

1976
01:45:53,520 --> 01:45:56,000
i want to give you some pointers so if

1977
01:45:56,000 --> 01:45:57,840
you have to exploit this type of thing

1978
01:45:57,840 --> 01:46:00,480
and test it

1979
01:46:00,719 --> 01:46:04,000
you'll know where to look in the papers

1980
01:46:04,000 --> 01:46:07,040
that was released by i think it's a

1981
01:46:07,040 --> 01:46:10,480
conversion with fortify and github

1982
01:46:10,480 --> 01:46:13,600
called room for sk you'll find

1983
01:46:13,600 --> 01:46:16,800
uh in the free market section different

1984
01:46:16,800 --> 01:46:19,360
uh alternative for depending on the

1985
01:46:19,360 --> 01:46:20,239
container

1986
01:46:20,239 --> 01:46:24,320
so because all placeholder

1987
01:46:24,320 --> 01:46:27,760
will behave differently uh here's an

1988
01:46:27,760 --> 01:46:29,920
example so

1989
01:46:29,920 --> 01:46:33,360
tomcat will use a class folder that is

1990
01:46:33,360 --> 01:46:34,320
custom

1991
01:46:34,320 --> 01:46:36,960
to tomcat that that is called weber

1992
01:46:36,960 --> 01:46:39,520
class loader

1993
01:46:39,520 --> 01:46:42,480
and these are the interesting method

1994
01:46:42,480 --> 01:46:44,880
from this customer that can

1995
01:46:44,880 --> 01:46:46,719
give us some interesting operations for

1996
01:46:46,719 --> 01:46:47,920
example

1997
01:46:47,920 --> 01:46:51,760
being able to write to disk

1998
01:46:51,760 --> 01:46:55,840
by specifying a path in an input stream

1999
01:46:56,560 --> 01:46:58,719
but then if the application is also on

2000
01:46:58,719 --> 01:47:00,880
jetty if we manage to

2001
01:47:00,880 --> 01:47:04,080
get a reference of the class server we

2002
01:47:04,080 --> 01:47:04,639
will get

2003
01:47:04,639 --> 01:47:08,159
a different operation so here have some

2004
01:47:08,159 --> 01:47:08,960
hints about

2005
01:47:08,960 --> 01:47:12,320
what could be done with jetty uh in most

2006
01:47:12,320 --> 01:47:12,880
cases

2007
01:47:12,880 --> 01:47:15,840
they are not giving full pedal i don't

2008
01:47:15,840 --> 01:47:16,400
know if

2009
01:47:16,400 --> 01:47:18,560
if it's because it's in the planning of

2010
01:47:18,560 --> 01:47:20,960
being patched or having some

2011
01:47:20,960 --> 01:47:24,320
api being a refactor to avoid those type

2012
01:47:24,320 --> 01:47:24,719
of

2013
01:47:24,719 --> 01:47:29,440
abuse but in the end just to show you

2014
01:47:29,440 --> 01:47:32,320
that they have documented various way

2015
01:47:32,320 --> 01:47:32,800
and

2016
01:47:32,800 --> 01:47:34,480
the pillow that i'm going to show you i

2017
01:47:34,480 --> 01:47:37,119
didn't invent it or created

2018
01:47:37,119 --> 01:47:40,719
there's actually a universal uh

2019
01:47:40,719 --> 01:47:43,920
payload for um

2020
01:47:43,920 --> 01:47:46,800
i but it's not working in the latest

2021
01:47:46,800 --> 01:47:47,360
version

2022
01:47:47,360 --> 01:47:50,960
of the free marker so if it was updated

2023
01:47:50,960 --> 01:47:53,679
sometime this year it might not be

2024
01:47:53,679 --> 01:47:54,560
available but

2025
01:47:54,560 --> 01:47:57,040
this fail that we're gonna use is

2026
01:47:57,040 --> 01:48:00,560
agnostic of class holder

2027
01:48:00,560 --> 01:48:04,400
so this payload okay

2028
01:48:04,400 --> 01:48:07,199
so the first one will be uh purely

2029
01:48:07,199 --> 01:48:08,880
reading files

2030
01:48:08,880 --> 01:48:12,719
so uh here there are some

2031
01:48:12,719 --> 01:48:14,960
uh missing steps so first we need to

2032
01:48:14,960 --> 01:48:15,840
grab

2033
01:48:15,840 --> 01:48:18,080
a class order from so first we need to

2034
01:48:18,080 --> 01:48:19,440
do an assign

2035
01:48:19,440 --> 01:48:23,280
to the class other variable and then

2036
01:48:23,280 --> 01:48:25,520
we'll be able to follow it by this

2037
01:48:25,520 --> 01:48:26,639
payload

2038
01:48:26,639 --> 01:48:29,600
so this is uh kind of different compared

2039
01:48:29,600 --> 01:48:31,360
to the previous exercise where

2040
01:48:31,360 --> 01:48:34,880
we were able to whatever the

2041
01:48:34,880 --> 01:48:38,239
variable in place

2042
01:48:38,239 --> 01:48:40,320
use our payload and get the localization

2043
01:48:40,320 --> 01:48:41,840
here we need to grab

2044
01:48:41,840 --> 01:48:46,719
uh to find a cluster of points

2045
01:48:46,719 --> 01:48:50,320
so and also something i noticed uh

2046
01:48:50,320 --> 01:48:52,639
this is uh taking from the same paper

2047
01:48:52,639 --> 01:48:55,520
again from the black presentation

2048
01:48:55,520 --> 01:48:57,760
uh they mentioned that they are able to

2049
01:48:57,760 --> 01:48:59,440
exfiltrate

2050
01:48:59,440 --> 01:49:03,040
uh bytes from any file

2051
01:49:03,040 --> 01:49:06,880
using this but when i tested myself

2052
01:49:06,880 --> 01:49:10,080
uh bytes couldn't be displayed

2053
01:49:10,080 --> 01:49:11,840
and looking at the competition and the

2054
01:49:11,840 --> 01:49:15,119
error that i got

2055
01:49:15,119 --> 01:49:17,520
free marker only displays color in

2056
01:49:17,520 --> 01:49:18,320
primitive type

2057
01:49:18,320 --> 01:49:21,040
and arrays of red pipe are not supported

2058
01:49:21,040 --> 01:49:22,719
so even if you have a

2059
01:49:22,719 --> 01:49:26,159
byte array this will not work after some

2060
01:49:26,159 --> 01:49:27,360
trial and error that

2061
01:49:27,360 --> 01:49:29,679
the only way i managed to make the this

2062
01:49:29,679 --> 01:49:31,520
payload work

2063
01:49:31,520 --> 01:49:35,040
is by accessing uh each byte one of the

2064
01:49:35,040 --> 01:49:37,280
ones number so you can do this in a loop

2065
01:49:37,280 --> 01:49:39,440
but

2066
01:49:39,520 --> 01:49:43,199
yeah this directly didn't work in the

2067
01:49:43,199 --> 01:49:46,800
past two versions so the most recent

2068
01:49:46,800 --> 01:49:47,280
version

2069
01:49:47,280 --> 01:49:50,400
will not work this was not working but

2070
01:49:50,400 --> 01:49:51,920
this is pretty method this is only to

2071
01:49:51,920 --> 01:49:53,199
read file

2072
01:49:53,199 --> 01:49:57,440
but it's a great uh way to start if you

2073
01:49:57,440 --> 01:50:00,639
uh are seeing that there is a template

2074
01:50:00,639 --> 01:50:04,239
being executed but you want to go

2075
01:50:04,239 --> 01:50:10,000
go for recipe until you get a more

2076
01:50:10,000 --> 01:50:13,040
a more advanced pillow so now we're

2077
01:50:13,040 --> 01:50:14,880
going to look directly at the

2078
01:50:14,880 --> 01:50:18,080
universal method so

2079
01:50:18,080 --> 01:50:20,400
how do we grab a class over so similar

2080
01:50:20,400 --> 01:50:22,560
to the pierce pillow

2081
01:50:22,560 --> 01:50:25,760
from this until the end we need to have

2082
01:50:25,760 --> 01:50:28,239
fine need to have found a cluster of

2083
01:50:28,239 --> 01:50:29,920
reference

2084
01:50:29,920 --> 01:50:33,360
and this class will learn need to be

2085
01:50:33,360 --> 01:50:36,400
referenced by a variable

2086
01:50:36,400 --> 01:50:38,000
varying directly from a variable that

2087
01:50:38,000 --> 01:50:39,760
was in

2088
01:50:39,760 --> 01:50:43,280
the data model so this object

2089
01:50:43,280 --> 01:50:46,159
needs need to be replaced with whatever

2090
01:50:46,159 --> 01:50:47,040
uh you found

2091
01:50:47,040 --> 01:50:48,880
in this template so for this exercise

2092
01:50:48,880 --> 01:50:50,239
you're going to need to use the first

2093
01:50:50,239 --> 01:50:50,880
loop

2094
01:50:50,880 --> 01:50:52,770
that enumerate

2095
01:50:52,770 --> 01:50:54,239
[Music]

2096
01:50:54,239 --> 01:50:56,639
basically a variable that are exposed to

2097
01:50:56,639 --> 01:50:58,320
the template

2098
01:50:58,320 --> 01:51:01,679
um and i've done just like

2099
01:51:01,679 --> 01:51:04,960
in lively livery by default you you get

2100
01:51:04,960 --> 01:51:08,800
a request a reference to the

2101
01:51:08,800 --> 01:51:11,920
variable request which is a

2102
01:51:11,920 --> 01:51:15,040
survey http request so in practice they

2103
01:51:15,040 --> 01:51:16,000
are putting those

2104
01:51:16,000 --> 01:51:19,440
reference so that people can have

2105
01:51:19,440 --> 01:51:21,840
access to potential session information

2106
01:51:21,840 --> 01:51:23,040
that could be

2107
01:51:23,040 --> 01:51:26,320
uh put by some plugins so if you want to

2108
01:51:26,320 --> 01:51:27,119
display some

2109
01:51:27,119 --> 01:51:29,840
information from live plugin i i guess

2110
01:51:29,840 --> 01:51:30,400
or

2111
01:51:30,400 --> 01:51:32,960
information from session this could be a

2112
01:51:32,960 --> 01:51:35,119
way to have more dynamic

2113
01:51:35,119 --> 01:51:38,560
templates but in practice uh

2114
01:51:38,560 --> 01:51:41,679
having access to uh http uh survey

2115
01:51:41,679 --> 01:51:42,320
request

2116
01:51:42,320 --> 01:51:45,760
is very azarius as you'll see

2117
01:51:45,760 --> 01:51:49,199
so this you'll need to replace it with

2118
01:51:49,199 --> 01:51:50,239
the

2119
01:51:50,239 --> 01:51:52,400
variable name that you found and then

2120
01:51:52,400 --> 01:51:54,159
with this pedal you'll be able to

2121
01:51:54,159 --> 01:51:57,040
uh execute channel so any area there you

2122
01:51:57,040 --> 01:51:57,360
can

2123
01:51:57,360 --> 01:52:00,800
so you only need to replace these uh

2124
01:52:00,800 --> 01:52:03,679
all the rest uh in the end what it's

2125
01:52:03,679 --> 01:52:04,320
doing

2126
01:52:04,320 --> 01:52:08,080
this payload is uh still using the

2127
01:52:08,080 --> 01:52:10,639
execute

2128
01:52:10,719 --> 01:52:13,840
classes but instead of uh using the

2129
01:52:13,840 --> 01:52:16,880
assign with the new

2130
01:52:16,880 --> 01:52:20,159
uh we're using a load classes method

2131
01:52:20,159 --> 01:52:21,679
from a class folder so instead of

2132
01:52:21,679 --> 01:52:24,800
doing apostrophe new

2133
01:52:24,800 --> 01:52:27,280
that would trigger the class resolver

2134
01:52:27,280 --> 01:52:30,239
and there could be some filtering

2135
01:52:30,239 --> 01:52:32,880
now where because we have a reference to

2136
01:52:32,880 --> 01:52:36,239
the class folder we can directly call

2137
01:52:36,239 --> 01:52:40,480
this method and then execute method

2138
01:52:40,480 --> 01:52:43,599
so one explanation for basically you

2139
01:52:43,599 --> 01:52:45,119
need to

2140
01:52:45,119 --> 01:52:47,920
find a reference to a class folder so

2141
01:52:47,920 --> 01:52:49,199
you might need

2142
01:52:49,199 --> 01:52:52,480
to find a telescopic chain of properties

2143
01:52:52,480 --> 01:52:53,599
so it's not

2144
01:52:53,599 --> 01:52:56,960
directly the class order property on the

2145
01:52:56,960 --> 01:52:57,760
first object

2146
01:52:57,760 --> 01:53:00,000
might be a long time but once you get

2147
01:53:00,000 --> 01:53:02,000
the ear class over

2148
01:53:02,000 --> 01:53:06,239
in most cases this appeal should work

2149
01:53:06,239 --> 01:53:08,880
so this is the final exercise so it's

2150
01:53:08,880 --> 01:53:11,679
the same application as the previous one

2151
01:53:11,679 --> 01:53:14,960
the only difference is that there's a

2152
01:53:14,960 --> 01:53:18,560
sandbox a component that was configured

2153
01:53:18,560 --> 01:53:20,080
so there's an implementation of class

2154
01:53:20,080 --> 01:53:21,920
resolver that is identical to the

2155
01:53:21,920 --> 01:53:24,080
implementation of library

2156
01:53:24,080 --> 01:53:27,280
you have two minute fill perfect so

2157
01:53:27,280 --> 01:53:30,320
uh we're done uh so

2158
01:53:30,320 --> 01:53:31,760
if you have any questions don't hesitate

2159
01:53:31,760 --> 01:53:33,360
to contact me on twitter

2160
01:53:33,360 --> 01:53:35,199
or i'll be on discord so i don't have

2161
01:53:35,199 --> 01:53:36,800
this code open right now but

2162
01:53:36,800 --> 01:53:40,000
in five minutes i will be logged to the

2163
01:53:40,000 --> 01:53:44,000
access discord and that's it

2164
01:53:44,000 --> 01:53:46,719
i'll be also publishing on my twitter

2165
01:53:46,719 --> 01:53:49,119
account

2166
01:53:49,199 --> 01:53:52,800
link to those codelabs

2167
01:53:52,800 --> 01:53:56,320
they will be host uh also uh

2168
01:53:56,320 --> 01:53:58,880
reliable the only thing is that this

2169
01:53:58,880 --> 01:54:00,159
domain will change

2170
01:54:00,159 --> 01:54:01,520
it's not uh it's gonna be hosted on

2171
01:54:01,520 --> 01:54:03,360
ghetto instead

2172
01:54:03,360 --> 01:54:06,840
and again the application will be

2173
01:54:06,840 --> 01:54:09,520
uh you'll be able to run it by yourself

2174
01:54:09,520 --> 01:54:10,159
but

2175
01:54:10,159 --> 01:54:13,679
uh this specific hosting that is only a

2176
01:54:13,679 --> 01:54:16,719
run for access will

2177
01:54:16,719 --> 01:54:18,800
be probably shut down by the end of the

2178
01:54:18,800 --> 01:54:20,480
weekend so

2179
01:54:20,480 --> 01:54:23,599
you can still continue to work on it uh

2180
01:54:23,599 --> 01:54:24,000
but

2181
01:54:24,000 --> 01:54:26,800
yeah it's for a limited time i've

2182
01:54:26,800 --> 01:54:29,119
included in a conclusion some reference

2183
01:54:29,119 --> 01:54:30,880
so

2184
01:54:30,880 --> 01:54:33,920
and at eye level i've already answered

2185
01:54:33,920 --> 01:54:34,880
this

2186
01:54:34,880 --> 01:54:39,119
um forgot his name david

2187
01:54:39,119 --> 01:54:42,400
mentioned i was asking

2188
01:54:42,400 --> 01:54:45,199
what are the good practices to mitigate

2189
01:54:45,199 --> 01:54:45,920
this type of

2190
01:54:45,920 --> 01:54:49,199
reality uh i think first you need to

2191
01:54:49,199 --> 01:54:50,000
remember that

2192
01:54:50,000 --> 01:54:52,800
template and join are very powerful and

2193
01:54:52,800 --> 01:54:54,400
they are risky

2194
01:54:54,400 --> 01:54:57,119
meaning uh you might accept the risk of

2195
01:54:57,119 --> 01:54:59,040
integrating a template engine to your

2196
01:54:59,040 --> 01:54:59,920
application

2197
01:54:59,920 --> 01:55:02,639
and allowing your user to edit template

2198
01:55:02,639 --> 01:55:04,560
to have some powerhole feature

2199
01:55:04,560 --> 01:55:07,679
but keep in mind uh this template engine

2200
01:55:07,679 --> 01:55:09,599
might evolve over time so new feature

2201
01:55:09,599 --> 01:55:10,400
will be

2202
01:55:10,400 --> 01:55:13,840
added so the risk might increase and

2203
01:55:13,840 --> 01:55:17,119
at the moment most sandbox are

2204
01:55:17,119 --> 01:55:20,400
pretty new and a few uh

2205
01:55:20,400 --> 01:55:24,000
sandbox escape were found so far so uh

2206
01:55:24,000 --> 01:55:27,440
it's not something to uh to uh

2207
01:55:27,440 --> 01:55:30,159
to all on it uh and be sure other person

2208
01:55:30,159 --> 01:55:33,599
that it's gonna be safe

2209
01:55:33,599 --> 01:55:36,159
so maybe do some additional sandboxing

2210
01:55:36,159 --> 01:55:36,880
maybe

2211
01:55:36,880 --> 01:55:39,440
with containers will be a more efficient

2212
01:55:39,440 --> 01:55:40,800
and more

2213
01:55:40,800 --> 01:55:44,239
uh efficient way specifically if it's a

2214
01:55:44,239 --> 01:55:47,440
critical environment so yeah and again

2215
01:55:47,440 --> 01:55:49,920
reference service attempt management the

2216
01:55:49,920 --> 01:55:51,920
first one this is a

2217
01:55:51,920 --> 01:55:54,239
presentation by james kiddle and this is

2218
01:55:54,239 --> 01:55:56,480
the presentation from this year

2219
01:55:56,480 --> 01:55:58,400
and i include some interesting article

2220
01:55:58,400 --> 01:56:00,639
that i

2221
01:56:00,639 --> 01:56:03,199
took inspiration from for creating those

2222
01:56:03,199 --> 01:56:05,599
exercises

2223
01:56:05,599 --> 01:56:08,560
so thank you very much

2224
01:56:09,599 --> 01:56:12,000
so i'm done but you can continue uh

2225
01:56:12,000 --> 01:56:12,800
working on

2226
01:56:12,800 --> 01:56:16,800
the exercise uh again codelabs is a

2227
01:56:16,800 --> 01:56:18,480
video tutorial format so

2228
01:56:18,480 --> 01:56:22,080
you can continue on your own time and

2229
01:56:22,080 --> 01:56:24,960
at your own rhythm

2230
01:56:27,360 --> 01:56:36,159
so enjoy the rest of the conference

