1
00:00:00,439 --> 00:00:06,870
hi everyone so welcome to my talk is the

2
00:00:06,870 --> 00:00:08,370
second Isis to my you're playing with

3
00:00:08,370 --> 00:00:12,269
power without friend to do this will be

4
00:00:12,269 --> 00:00:14,309
the agenda of this presentation so we're

5
00:00:14,309 --> 00:00:16,010
going to talk about static analysis tool

6
00:00:16,010 --> 00:00:18,990
first we're gonna see some definition

7
00:00:18,990 --> 00:00:20,789
just to get everybody on the same page

8
00:00:20,789 --> 00:00:22,350
some people some of you have already

9
00:00:22,350 --> 00:00:24,750
used some too some of you don't know

10
00:00:24,750 --> 00:00:26,849
those but maybe have experience with

11
00:00:26,849 --> 00:00:29,580
development we're going to see what are

12
00:00:29,580 --> 00:00:31,439
the main motivation the advantage of

13
00:00:31,439 --> 00:00:34,290
using those tool the different level of

14
00:00:34,290 --> 00:00:36,660
sophistication because not all tools are

15
00:00:36,660 --> 00:00:40,559
equal what is going to impact also their

16
00:00:40,559 --> 00:00:43,140
level of education we're going to look

17
00:00:43,140 --> 00:00:46,200
at the internals of two so this is gonna

18
00:00:46,200 --> 00:00:48,780
be a bit of theory but I'm trying to for

19
00:00:48,780 --> 00:00:51,120
every concept to do some demo so this

20
00:00:51,120 --> 00:00:53,010
way at the same time it's gonna be less

21
00:00:53,010 --> 00:00:55,230
abstract if you have not run a tool yet

22
00:00:55,230 --> 00:00:57,360
and at the same time you're gonna learn

23
00:00:57,360 --> 00:00:59,789
some new to possessively so I'm gonna go

24
00:00:59,789 --> 00:01:01,680
through a tool that scan pattern code

25
00:01:01,680 --> 00:01:06,360
Ruby code Java code that's it and I'm

26
00:01:06,360 --> 00:01:07,760
going to close with additional

27
00:01:07,760 --> 00:01:10,229
consideration so if you are planning to

28
00:01:10,229 --> 00:01:13,770
introduce code review or assisted code

29
00:01:13,770 --> 00:01:15,960
review with a static analysis tool I'm

30
00:01:15,960 --> 00:01:17,280
gonna give you some guideline from my

31
00:01:17,280 --> 00:01:19,140
experience at the using those and

32
00:01:19,140 --> 00:01:22,770
building process for those so expect to

33
00:01:22,770 --> 00:01:26,759
see them all along this presentation so

34
00:01:26,759 --> 00:01:30,000
am i my name is Phillip I'm a researcher

35
00:01:30,000 --> 00:01:34,560
for go secure and my main interest is on

36
00:01:34,560 --> 00:01:36,840
a web application security but I've also

37
00:01:36,840 --> 00:01:38,369
interested for other stuff crypto

38
00:01:38,369 --> 00:01:42,390
external usually when I come here to

39
00:01:42,390 --> 00:01:44,520
talk I select a specific given on TV

40
00:01:44,520 --> 00:01:45,720
some niche we're not up to that I've

41
00:01:45,720 --> 00:01:48,689
recently come up but I decided this year

42
00:01:48,689 --> 00:01:51,149
to select tool that I'm actually

43
00:01:51,149 --> 00:01:53,340
spending most of my time working on them

44
00:01:53,340 --> 00:01:56,610
so I'm gonna present to one tool that

45
00:01:56,610 --> 00:01:58,590
I'm working on which is fine security

46
00:01:58,590 --> 00:02:02,159
bugs for which I'm working at ethical

47
00:02:02,159 --> 00:02:05,700
secure so I'm a developer for fine

48
00:02:05,700 --> 00:02:07,560
security bugs a secret guard which is

49
00:02:07,560 --> 00:02:09,739
also a static analysis tool for that net

50
00:02:09,739 --> 00:02:12,150
I've also been a multiple birth

51
00:02:12,150 --> 00:02:13,920
extension so maybe you have used

52
00:02:13,920 --> 00:02:17,400
any of those at some point I'm also a

53
00:02:17,400 --> 00:02:19,680
contributor for the event North SEC

54
00:02:19,680 --> 00:02:22,110
North SEC it's an event similar to

55
00:02:22,110 --> 00:02:24,600
access in Montreal so I've been

56
00:02:24,600 --> 00:02:27,930
developing CTF challenges and this year

57
00:02:27,930 --> 00:02:32,490
I was a trainer for the conference so

58
00:02:32,490 --> 00:02:35,100
destination this won't be as long so

59
00:02:35,100 --> 00:02:37,620
what do we mean by a static analysis

60
00:02:37,620 --> 00:02:39,690
this mean we're going to allow a nice

61
00:02:39,690 --> 00:02:42,570
program but without executing so if it's

62
00:02:42,570 --> 00:02:45,060
a web application or a binary instead of

63
00:02:45,060 --> 00:02:47,340
running it and looking at it in debug

64
00:02:47,340 --> 00:02:50,280
maybe with a debugger we're just going

65
00:02:50,280 --> 00:02:53,100
to look at the source code so think like

66
00:02:53,100 --> 00:02:55,950
a code review but instead of being a

67
00:02:55,950 --> 00:02:58,260
human then it's a script or an

68
00:02:58,260 --> 00:02:59,640
application that analyzed the code

69
00:02:59,640 --> 00:03:03,660
itself and for this presentation it's

70
00:03:03,660 --> 00:03:05,040
going to be static analysis so a nice

71
00:03:05,040 --> 00:03:06,390
set of code but specifically for

72
00:03:06,390 --> 00:03:08,970
volantes so just to let you know that

73
00:03:08,970 --> 00:03:11,250
you may find others that again Isis to

74
00:03:11,250 --> 00:03:13,680
that their focus is not security so if

75
00:03:13,680 --> 00:03:15,720
you want to do security code review some

76
00:03:15,720 --> 00:03:20,010
- won't be effective for you need that's

77
00:03:20,010 --> 00:03:20,720
it

78
00:03:20,720 --> 00:03:24,480
so why do we want to use a second a

79
00:03:24,480 --> 00:03:27,209
system the main advantage of this

80
00:03:27,209 --> 00:03:29,130
coverage because there's going to be

81
00:03:29,130 --> 00:03:32,640
static - but also dynamic - so dynamic

82
00:03:32,640 --> 00:03:34,440
tool will be for example dynamic scanner

83
00:03:34,440 --> 00:03:36,840
for example a dynamic web scanner that

84
00:03:36,840 --> 00:03:39,540
you run your websites or you give a

85
00:03:39,540 --> 00:03:42,480
human puts to the scanner like zero it

86
00:03:42,480 --> 00:03:45,390
will try all the website for every input

87
00:03:45,390 --> 00:03:47,400
it can find it will do some tests with

88
00:03:47,400 --> 00:03:50,190
malicious payload so this is a dynamic

89
00:03:50,190 --> 00:03:51,959
tool because the application is actually

90
00:03:51,959 --> 00:03:55,040
running and the scanner is sending value

91
00:03:55,040 --> 00:03:58,829
to a live application when we look at

92
00:03:58,829 --> 00:04:01,079
the static a part of it the main

93
00:04:01,079 --> 00:04:03,060
adventures will be the coverage because

94
00:04:03,060 --> 00:04:05,549
if we have millions of lines of code the

95
00:04:05,549 --> 00:04:07,470
caner will often not be able to

96
00:04:07,470 --> 00:04:10,370
enumerate all the endpoints and most

97
00:04:10,370 --> 00:04:12,930
application gets quite complex if you

98
00:04:12,930 --> 00:04:16,410
have multi-step form some form I really

99
00:04:16,410 --> 00:04:17,548
need you man

100
00:04:17,548 --> 00:04:20,130
interaction to reach some point because

101
00:04:20,130 --> 00:04:22,140
otherwise the an automated tool won't be

102
00:04:22,140 --> 00:04:24,390
able to guess some of the values so that

103
00:04:24,390 --> 00:04:25,940
that's one of the main advantage

104
00:04:25,940 --> 00:04:27,750
otherwise

105
00:04:27,750 --> 00:04:30,570
quick discovery so instead of waiting at

106
00:04:30,570 --> 00:04:32,820
the end of a deployment of the patient's

107
00:04:32,820 --> 00:04:34,410
we have done multiple iteration of the

108
00:04:34,410 --> 00:04:36,720
amount instead of waiting for a pen test

109
00:04:36,720 --> 00:04:39,840
or a final audit at the end I static -

110
00:04:39,840 --> 00:04:42,240
can can be run along the development and

111
00:04:42,240 --> 00:04:43,800
you get notification for potential

112
00:04:43,800 --> 00:04:47,240
penalty so that's a big advantage also

113
00:04:47,240 --> 00:04:50,460
you get developed at the source so a

114
00:04:50,460 --> 00:04:52,320
scanner will give you a symptom

115
00:04:52,320 --> 00:04:54,780
so I insert a single code in this

116
00:04:54,780 --> 00:04:57,030
parameter and it looked like there's an

117
00:04:57,030 --> 00:04:59,670
explanation but it's just an external

118
00:04:59,670 --> 00:05:01,590
point of view the static analysis tool

119
00:05:01,590 --> 00:05:03,780
will tell you at this line of code this

120
00:05:03,780 --> 00:05:05,850
API is probably not used properly and

121
00:05:05,850 --> 00:05:07,770
there's a potential SQL injection or

122
00:05:07,770 --> 00:05:10,500
this API is probably not used in the

123
00:05:10,500 --> 00:05:13,830
right context here so for developer it's

124
00:05:13,830 --> 00:05:16,530
interesting because in you know exactly

125
00:05:16,530 --> 00:05:18,630
where to look at in the source code

126
00:05:18,630 --> 00:05:23,790
a limitation I think there's not a

127
00:05:23,790 --> 00:05:25,380
specific technique that will cover

128
00:05:25,380 --> 00:05:27,630
everything so the takeaway is not a

129
00:05:27,630 --> 00:05:29,210
static analysis tool will do everything

130
00:05:29,210 --> 00:05:31,740
but if you combine as the second Esav

131
00:05:31,740 --> 00:05:34,440
tool with dynamic one you'll be you have

132
00:05:34,440 --> 00:05:36,120
a much better coverage because some

133
00:05:36,120 --> 00:05:38,640
penalty are easier to test and find in

134
00:05:38,640 --> 00:05:41,400
one of those techniques so the

135
00:05:41,400 --> 00:05:45,030
conclusion try to combine both in static

136
00:05:45,030 --> 00:05:46,950
analysis to will get a lot of false

137
00:05:46,950 --> 00:05:48,660
positive because we made a lot of

138
00:05:48,660 --> 00:05:51,090
absorption we're not running the

139
00:05:51,090 --> 00:05:53,580
application so some value we don't know

140
00:05:53,580 --> 00:05:55,320
where they come from is the coming

141
00:05:55,320 --> 00:05:57,090
threat I'm a config file is it coming

142
00:05:57,090 --> 00:05:59,280
from a user input is it a constant value

143
00:05:59,280 --> 00:06:00,840
that was initialized at some point in

144
00:06:00,840 --> 00:06:04,080
the program we don't always know because

145
00:06:04,080 --> 00:06:07,830
education are complex also some pranati

146
00:06:07,830 --> 00:06:11,010
are not cover instant analysis tool so

147
00:06:11,010 --> 00:06:13,320
Mis configuration has some time because

148
00:06:13,320 --> 00:06:15,540
you're scanning your web app you won't

149
00:06:15,540 --> 00:06:17,870
see a configuration of your firewall or

150
00:06:17,870 --> 00:06:20,669
infrastructure a miss configuration so

151
00:06:20,669 --> 00:06:22,830
if you have a s3 bucket that is exposed

152
00:06:22,830 --> 00:06:25,680
you won't see this in your HP or java

153
00:06:25,680 --> 00:06:27,270
application it will be more in

154
00:06:27,270 --> 00:06:29,280
deployment pilot are usually not covered

155
00:06:29,280 --> 00:06:32,150
by a signaling system

156
00:06:32,150 --> 00:06:34,890
sorry not because it's more dynamic

157
00:06:34,890 --> 00:06:36,240
gravity and there's

158
00:06:36,240 --> 00:06:39,270
multi-layer to it usually it won't be

159
00:06:39,270 --> 00:06:41,370
easy to find in

160
00:06:41,370 --> 00:06:44,100
directly as it's not automatically and

161
00:06:44,100 --> 00:06:46,320
logic flower this is just something that

162
00:06:46,320 --> 00:06:48,810
most automate to won't find because you

163
00:06:48,810 --> 00:06:52,950
require some human analysis because you

164
00:06:52,950 --> 00:06:54,630
need to understand what is the business

165
00:06:54,630 --> 00:06:56,880
context of your application so okay if

166
00:06:56,880 --> 00:06:59,580
I'm able to skip this step for a to

167
00:06:59,580 --> 00:07:02,280
automate - unless you're we're talking

168
00:07:02,280 --> 00:07:06,300
about AI and one out there you won't be

169
00:07:06,300 --> 00:07:12,150
able to find this type of just to say

170
00:07:12,150 --> 00:07:13,620
that there's gonna be a good coverage

171
00:07:13,620 --> 00:07:16,800
but to get full coverage usually if you

172
00:07:16,800 --> 00:07:18,720
combine multiple tool then you'll get a

173
00:07:18,720 --> 00:07:24,930
better market so I'm gonna start with

174
00:07:24,930 --> 00:07:27,230
afterward with the the the most basic

175
00:07:27,230 --> 00:07:30,360
type of tech needed to have implemented

176
00:07:30,360 --> 00:07:34,230
and along we will go with a more

177
00:07:34,230 --> 00:07:37,200
advanced concept the most basic concept

178
00:07:37,200 --> 00:07:39,450
that the tool can use is pattern

179
00:07:39,450 --> 00:07:41,550
matching so think about grab some

180
00:07:41,550 --> 00:07:44,040
sicknesses - will actually just wrap red

181
00:07:44,040 --> 00:07:47,400
with a red X or simply iterate to file

182
00:07:47,400 --> 00:07:49,980
and look one line by line individually

183
00:07:49,980 --> 00:07:54,030
to much specific API for example we're

184
00:07:54,030 --> 00:07:56,370
gonna see that there's a actually big

185
00:07:56,370 --> 00:07:57,690
desires which will be the number of

186
00:07:57,690 --> 00:07:59,670
false positive because we're not doing

187
00:07:59,670 --> 00:08:01,710
much more that much eristic about

188
00:08:01,710 --> 00:08:03,540
eliminating potential false positive

189
00:08:03,540 --> 00:08:06,240
because we're mostly flagging specific

190
00:08:06,240 --> 00:08:08,490
API without looking at parameter and a

191
00:08:08,490 --> 00:08:11,640
context abstract syntax tree this will

192
00:08:11,640 --> 00:08:16,680
be what most tool will do at least which

193
00:08:16,680 --> 00:08:18,660
will transform the source code the

194
00:08:18,660 --> 00:08:20,390
source file to a model that is a

195
00:08:20,390 --> 00:08:23,310
structure that is easier to analyze to

196
00:08:23,310 --> 00:08:25,130
find specific method and specific API

197
00:08:25,130 --> 00:08:28,260
strongly without having super complex

198
00:08:28,260 --> 00:08:32,730
reaction the two last one as the for

199
00:08:32,730 --> 00:08:35,400
analysis this will be will be simulating

200
00:08:35,400 --> 00:08:37,549
the execution so we can also a say a

201
00:08:37,549 --> 00:08:40,500
symbolic execution for those two

202
00:08:40,500 --> 00:08:43,860
categories the idea is that we're not

203
00:08:43,860 --> 00:08:45,330
running the code but we're going to

204
00:08:45,330 --> 00:08:46,830
simulate the execution of code and

205
00:08:46,830 --> 00:08:49,560
where's there are dynamic input we're

206
00:08:49,560 --> 00:08:54,380
going to take assemble and

207
00:08:54,380 --> 00:08:56,390
take a guess about what the value could

208
00:08:56,390 --> 00:09:00,860
be and the last one is just an iteration

209
00:09:00,860 --> 00:09:03,200
over the data flow analysis so you can

210
00:09:03,200 --> 00:09:05,750
do some analysis at the method level to

211
00:09:05,750 --> 00:09:08,150
see the data flow but as soon as you do

212
00:09:08,150 --> 00:09:11,840
interpreters also between function for

213
00:09:11,840 --> 00:09:13,820
this the complexity explode largely and

214
00:09:13,820 --> 00:09:17,510
most to one do this and if you see this

215
00:09:17,510 --> 00:09:20,540
it's going to impact a lot the enemy and

216
00:09:20,540 --> 00:09:21,970
then is this fine

217
00:09:21,970 --> 00:09:24,950
so just if you have generate your

218
00:09:24,950 --> 00:09:26,270
developer area at some point you have

219
00:09:26,270 --> 00:09:28,700
generated a UML diagram automatically

220
00:09:28,700 --> 00:09:31,310
and you have like all the class of your

221
00:09:31,310 --> 00:09:34,040
application in one diagram just sync the

222
00:09:34,040 --> 00:09:35,890
dependencies what would probably be

223
00:09:35,890 --> 00:09:38,450
impossible to read because there's too

224
00:09:38,450 --> 00:09:41,270
much dependency then imagine all the the

225
00:09:41,270 --> 00:09:44,480
the metal call that you could see and

226
00:09:44,480 --> 00:09:47,990
need we need to be simulate in a static

227
00:09:47,990 --> 00:09:50,390
analysis point of view it's get really

228
00:09:50,390 --> 00:09:53,390
compact so in general the more we add

229
00:09:53,390 --> 00:09:58,580
complexity the more the more the to is

230
00:09:58,580 --> 00:10:01,220
smart it's going to reduce hospitals but

231
00:10:01,220 --> 00:10:04,300
the NSS time will grow over time

232
00:10:04,300 --> 00:10:08,030
in general it won't be too much so if

233
00:10:08,030 --> 00:10:09,770
you're doing a code review at the same

234
00:10:09,770 --> 00:10:11,840
time it won't matter if even if the tool

235
00:10:11,840 --> 00:10:14,420
takes one or two hour to run because at

236
00:10:14,420 --> 00:10:15,830
the same time you can check for a

237
00:10:15,830 --> 00:10:17,570
specific check like logic flowers

238
00:10:17,570 --> 00:10:21,230
well the the automative which is pretty

239
00:10:21,230 --> 00:10:23,480
effective at universal SQL injection or

240
00:10:23,480 --> 00:10:27,050
x6c or miss configuration some specific

241
00:10:27,050 --> 00:10:31,130
things yeah so obviously that the

242
00:10:31,130 --> 00:10:36,020
fastest one will be pattern matching so

243
00:10:36,020 --> 00:10:38,120
abstract syntax between so before

244
00:10:38,120 --> 00:10:41,960
getting into the the idea I want to do a

245
00:10:41,960 --> 00:10:44,990
next two demos so the first one will be

246
00:10:44,990 --> 00:10:47,750
banded so bended is a tool that is

247
00:10:47,750 --> 00:10:51,230
developed mainly by OpenStack teams to

248
00:10:51,230 --> 00:10:55,220
analyze their own code and bend it at

249
00:10:55,220 --> 00:10:58,880
least do some ast of the code so we're

250
00:10:58,880 --> 00:11:03,490
gonna see a demo not necessarily AST but

251
00:11:03,490 --> 00:11:06,200
of the two minutes so if you are a

252
00:11:06,200 --> 00:11:08,209
pattern developer you might want to try

253
00:11:08,209 --> 00:11:17,050
later this one think it will come back

254
00:11:33,420 --> 00:11:35,550
okay so each time I do a demo I will

255
00:11:35,550 --> 00:11:41,550
need to plug and unplug so basically I

256
00:11:41,550 --> 00:11:44,610
have yeah I'm gonna zoom a each time I

257
00:11:44,610 --> 00:11:47,430
write the comment so I have I'm gonna

258
00:11:47,430 --> 00:11:50,000
use a demo project which is a detangle

259
00:11:50,000 --> 00:11:53,400
that envy it's a company and vision that

260
00:11:53,400 --> 00:11:55,440
has built the basically a venerable

261
00:11:55,440 --> 00:11:59,250
application that contain reality so you

262
00:11:59,250 --> 00:12:01,740
can learn from those project I'm going

263
00:12:01,740 --> 00:12:04,110
to scan this project so I'm going to

264
00:12:04,110 --> 00:12:12,050
zoom outside the comment first

265
00:12:18,630 --> 00:12:22,019
so it's as simple as this I'm using the

266
00:12:22,019 --> 00:12:24,329
command line integration so just bend it

267
00:12:24,329 --> 00:12:27,839
I scan the apparent where R is the root

268
00:12:27,839 --> 00:12:29,759
directory for the source code so it's

269
00:12:29,759 --> 00:12:31,560
going to scan recursively to this folder

270
00:12:31,560 --> 00:12:35,160
the output format will be HTML and then

271
00:12:35,160 --> 00:12:38,370
that o is - o is simply the report name

272
00:12:38,370 --> 00:12:42,690
so run this because the event is mostly

273
00:12:42,690 --> 00:12:44,940
doing just ast that's going to be pretty

274
00:12:44,940 --> 00:12:47,970
fast so I should shouldn't take too much

275
00:12:47,970 --> 00:12:59,970
time that's it and then we have a HTML

276
00:12:59,970 --> 00:13:02,699
report that will highlight two type of

277
00:13:02,699 --> 00:13:03,870
venality so we have a command injection

278
00:13:03,870 --> 00:13:07,170
one and SQL injection so we can see

279
00:13:07,170 --> 00:13:10,829
after example the SQL injection it find

280
00:13:10,829 --> 00:13:14,550
that in the views that the TI there is

281
00:13:14,550 --> 00:13:17,670
the execute method that receive a

282
00:13:17,670 --> 00:13:19,560
queries then there is a string format

283
00:13:19,560 --> 00:13:23,279
that receive two parameter and loss

284
00:13:23,279 --> 00:13:24,839
parameter if they are controlled by user

285
00:13:24,839 --> 00:13:29,189
this could lead to SQL injection so yeah

286
00:13:29,189 --> 00:13:33,209
and click the fix for this would be to

287
00:13:33,209 --> 00:13:36,089
transform this to a paper statement so

288
00:13:36,089 --> 00:13:40,110
the idea is that - like this will emit

289
00:13:40,110 --> 00:13:42,389
some false positive but you will still

290
00:13:42,389 --> 00:13:45,000
get a lot of them because there's no a

291
00:13:45,000 --> 00:13:47,600
symbolic execution that that is made I

292
00:13:47,600 --> 00:13:52,009
have a small demo for this

293
00:13:55,530 --> 00:13:59,100
so I'll just be targeting a different

294
00:13:59,100 --> 00:14:02,060
project

295
00:14:09,320 --> 00:14:11,600
so

296
00:14:11,600 --> 00:14:13,250
same command I'm just are getting a

297
00:14:13,250 --> 00:14:16,370
different folder which is a I'm gonna

298
00:14:16,370 --> 00:14:20,890
show you the the code first first

299
00:14:34,200 --> 00:14:36,660
so these are dummy sample it's not a

300
00:14:36,660 --> 00:14:38,490
real application but the idea is just to

301
00:14:38,490 --> 00:14:41,579
get a bad sample that will trigger some

302
00:14:41,579 --> 00:14:45,870
potential penalty and if we look at the

303
00:14:45,870 --> 00:14:49,529
report I'm going to open on the left the

304
00:14:49,529 --> 00:14:56,519
report you can see that actually it's

305
00:14:56,519 --> 00:15:00,240
not I won't go for each sample into the

306
00:15:00,240 --> 00:15:02,250
detail but the idea is that because it's

307
00:15:02,250 --> 00:15:04,670
pretty limited and it's only a ste level

308
00:15:04,670 --> 00:15:07,740
some things won't be covered like I

309
00:15:07,740 --> 00:15:16,529
would like if you look at this size verb

310
00:15:16,529 --> 00:15:19,769
also if we have let's see thousand SQL

311
00:15:19,769 --> 00:15:23,389
queries in our application sometime the

312
00:15:23,389 --> 00:15:26,540
for example here we have constant value

313
00:15:26,540 --> 00:15:29,730
that up as air but because it doesn't

314
00:15:29,730 --> 00:15:31,160
simulate the execution and the

315
00:15:31,160 --> 00:15:33,329
transformation from a string format to a

316
00:15:33,329 --> 00:15:36,690
string this will be a false positive for

317
00:15:36,690 --> 00:15:39,720
this in this case same thing in bandit

318
00:15:39,720 --> 00:15:43,800
if you assign a variable to so here for

319
00:15:43,800 --> 00:15:51,329
example action beam here it's doing some

320
00:15:51,329 --> 00:15:54,390
simplification so here I need to scroll

321
00:15:54,390 --> 00:15:57,959
on the left but there's a condition but

322
00:15:57,959 --> 00:16:01,800
Indian it's it could potentially add a

323
00:16:01,800 --> 00:16:03,600
malicious input but because it's a

324
00:16:03,600 --> 00:16:05,820
limited symbolic execution it will

325
00:16:05,820 --> 00:16:07,980
consider that this one is a constant but

326
00:16:07,980 --> 00:16:10,350
actually it's only one of the condition

327
00:16:10,350 --> 00:16:14,100
that will be just to say that it's not

328
00:16:14,100 --> 00:16:16,410
it's basically just doing a in line

329
00:16:16,410 --> 00:16:17,569
level

330
00:16:17,569 --> 00:16:20,490
verification but the idea is that you

331
00:16:20,490 --> 00:16:21,990
have tons of rule and it will be more

332
00:16:21,990 --> 00:16:26,060
efficient than doing manual code review

333
00:16:26,899 --> 00:16:30,199
going back

334
00:16:32,449 --> 00:16:36,120
okay so Asti how does it work so

335
00:16:36,120 --> 00:16:38,610
basically you have source file the first

336
00:16:38,610 --> 00:16:40,500
step will be a lexing so the lecture

337
00:16:40,500 --> 00:16:42,690
will tokenize all your source files so

338
00:16:42,690 --> 00:16:45,379
think about class name function name a

339
00:16:45,379 --> 00:16:48,540
reserved keyword and the next part will

340
00:16:48,540 --> 00:16:52,350
be transforming this algo spoken to a

341
00:16:52,350 --> 00:16:54,870
structure so in the end the analyzer is

342
00:16:54,870 --> 00:16:57,389
not looking at plain text and line by

343
00:16:57,389 --> 00:17:00,839
line it's gonna navigate recursively

344
00:17:00,839 --> 00:17:03,750
through the tree and rice issue for

345
00:17:03,750 --> 00:17:06,480
example for looking it just has a method

346
00:17:06,480 --> 00:17:08,640
call for example which was the case for

347
00:17:08,640 --> 00:17:14,880
a bandit the main feature with AST we

348
00:17:14,880 --> 00:17:16,559
won't have to do a complex projects to

349
00:17:16,559 --> 00:17:19,859
support spaces new line and addition

350
00:17:19,859 --> 00:17:21,959
because we're gonna actually parse the

351
00:17:21,959 --> 00:17:24,480
syntax of the language we're gonna have

352
00:17:24,480 --> 00:17:26,880
some time type resolution so if we want

353
00:17:26,880 --> 00:17:30,480
to match specific API on methods this

354
00:17:30,480 --> 00:17:32,070
will be easier for example if want to

355
00:17:32,070 --> 00:17:34,919
target the execute method of a specific

356
00:17:34,919 --> 00:17:37,590
class instead of just all method that

357
00:17:37,590 --> 00:17:40,950
adds the specific nine we can also add

358
00:17:40,950 --> 00:17:43,500
some heuristic like I'm gonna show in a

359
00:17:43,500 --> 00:17:47,730
moment so this is just a high-level

360
00:17:47,730 --> 00:17:51,600
example of a syntax tree you could have

361
00:17:51,600 --> 00:17:54,809
so this is a a diagram from across an

362
00:17:54,809 --> 00:17:59,610
API which is a just another AST so when

363
00:17:59,610 --> 00:18:01,710
you is called in rows then you have a

364
00:18:01,710 --> 00:18:04,230
top node that is computed completion

365
00:18:04,230 --> 00:18:07,049
unit which will be mostly every source

366
00:18:07,049 --> 00:18:09,090
file in every source file you can have

367
00:18:09,090 --> 00:18:11,250
one or multiple tasks in every class you

368
00:18:11,250 --> 00:18:13,280
can have one or multiple method and

369
00:18:13,280 --> 00:18:15,750
extra directions for each method you

370
00:18:15,750 --> 00:18:18,870
have from a parameter and blocks will be

371
00:18:18,870 --> 00:18:21,179
a code block so depending on what you

372
00:18:21,179 --> 00:18:24,870
want to look at you can navigate to the

373
00:18:24,870 --> 00:18:27,020
code structure and look precisely for

374
00:18:27,020 --> 00:18:32,630
four types and a signature an example of

375
00:18:32,630 --> 00:18:34,679
heuristic that will eliminate some false

376
00:18:34,679 --> 00:18:36,720
positives so just with ASP

377
00:18:36,720 --> 00:18:39,870
we can find if we look at this case here

378
00:18:39,870 --> 00:18:43,559
it's a RS a provide our C crypto

379
00:18:43,559 --> 00:18:46,080
services provider so this API

380
00:18:46,080 --> 00:18:50,100
will generate RAC key key under thousand

381
00:18:50,100 --> 00:18:54,450
24 and less will be consider less secure

382
00:18:54,450 --> 00:18:59,490
than adding a at least bigger key so the

383
00:18:59,490 --> 00:19:01,320
idea is that we don't want to rise issue

384
00:19:01,320 --> 00:19:03,630
every time we see this API only if this

385
00:19:03,630 --> 00:19:05,909
value is hundred twenty four and less

386
00:19:05,909 --> 00:19:09,870
will rise issue so here when you're

387
00:19:09,870 --> 00:19:12,809
going to parse the syntax tree began

388
00:19:12,809 --> 00:19:15,600
looks for object creation matching the

389
00:19:15,600 --> 00:19:18,299
specific class name RSA crypto services

390
00:19:18,299 --> 00:19:21,330
provider and in the argument of this

391
00:19:21,330 --> 00:19:23,539
creation we can look at the argument and

392
00:19:23,539 --> 00:19:26,510
we'll have a literal value that will be

393
00:19:26,510 --> 00:19:33,029
this end 1024 so this work because from

394
00:19:33,029 --> 00:19:36,210
from for API like this in general the

395
00:19:36,210 --> 00:19:38,909
developer will put the value in line or

396
00:19:38,909 --> 00:19:42,480
art coded but there's many API that will

397
00:19:42,480 --> 00:19:44,850
typically will be variable that are

398
00:19:44,850 --> 00:19:47,130
assigned and then use so it would be

399
00:19:47,130 --> 00:19:51,210
harder for ASP to find those but the

400
00:19:51,210 --> 00:19:53,130
ideas are that the AC is a basic

401
00:19:53,130 --> 00:19:56,190
buildable but we can do a more looking

402
00:19:56,190 --> 00:20:00,600
at the ast so what can we do more with

403
00:20:00,600 --> 00:20:04,769
just the structure we're gonna start to

404
00:20:04,769 --> 00:20:07,769
look at simulating the execution so this

405
00:20:07,769 --> 00:20:10,559
will be again with the objective of a

406
00:20:10,559 --> 00:20:15,899
limiting first positive so similar

407
00:20:15,899 --> 00:20:18,559
constriction we're going to do this for

408
00:20:18,559 --> 00:20:22,590
two reason propagate state so for

409
00:20:22,590 --> 00:20:24,630
example we saw previously we were

410
00:20:24,630 --> 00:20:27,240
looking for key sides so if we

411
00:20:27,240 --> 00:20:29,580
initialize a key size we want to trace

412
00:20:29,580 --> 00:20:32,850
the value until it's been used but we

413
00:20:32,850 --> 00:20:35,340
also might want to look at how to reach

414
00:20:35,340 --> 00:20:37,799
specific condition so for example in C++

415
00:20:37,799 --> 00:20:40,860
it's a really popular to look at use

416
00:20:40,860 --> 00:20:43,139
similar keishon to find how to reach a

417
00:20:43,139 --> 00:20:48,990
specific code path automatically so how

418
00:20:48,990 --> 00:20:50,159
can we define how to reach this

419
00:20:50,159 --> 00:20:52,169
condition this is symbolic execution so

420
00:20:52,169 --> 00:20:55,380
symbolic execution is the idea that

421
00:20:55,380 --> 00:20:58,169
instead of adding real value like at a

422
00:20:58,169 --> 00:20:59,480
runtime we

423
00:20:59,480 --> 00:21:03,920
placing value with assemble so we have a

424
00:21:03,920 --> 00:21:07,600
pseudo code on the Left input this is

425
00:21:07,600 --> 00:21:11,090
not a constant value it's just something

426
00:21:11,090 --> 00:21:15,160
we're gonna keep an N transform and

427
00:21:15,160 --> 00:21:18,320
build on top of it so I have an example

428
00:21:18,320 --> 00:21:22,760
next step by step this code the idea is

429
00:21:22,760 --> 00:21:26,480
also true once we want to target a

430
00:21:26,480 --> 00:21:27,830
specific condition we're going to

431
00:21:27,830 --> 00:21:29,240
transform this to a mathematical

432
00:21:29,240 --> 00:21:33,020
equation and try to solve it so this is

433
00:21:33,020 --> 00:21:35,930
Rita recall in practice there's many a

434
00:21:35,930 --> 00:21:37,810
mathematical function that cannot be

435
00:21:37,810 --> 00:21:40,910
resolved there's also a multiple

436
00:21:40,910 --> 00:21:44,120
functional depend on Io so it's not

437
00:21:44,120 --> 00:21:49,340
always visible so here for this specific

438
00:21:49,340 --> 00:21:51,620
function we can resolve that if we want

439
00:21:51,620 --> 00:21:55,760
to reach the true cases we can't rent

440
00:21:55,760 --> 00:21:59,060
transfer transpose this to in the end

441
00:21:59,060 --> 00:22:04,550
and we need input 2 x 2 minus 1 to be

442
00:22:04,550 --> 00:22:06,770
bigger than 2 to reach the specific

443
00:22:06,770 --> 00:22:11,660
condition we say for example I'm going

444
00:22:11,660 --> 00:22:13,370
to do step by step just to show you that

445
00:22:13,370 --> 00:22:15,890
a symbolic execution if we want to

446
00:22:15,890 --> 00:22:19,130
support all conditional statement we're

447
00:22:19,130 --> 00:22:23,300
going to make a state evolve for our

448
00:22:23,300 --> 00:22:25,850
variable and for each condition we're

449
00:22:25,850 --> 00:22:31,010
going to fork a different path so when I

450
00:22:31,010 --> 00:22:32,750
see the state then I multiply each time

451
00:22:32,750 --> 00:22:36,230
a condition is which so for example we

452
00:22:36,230 --> 00:22:38,810
have first two input assigned to

453
00:22:38,810 --> 00:22:43,640
variable the second one is x 2 so at

454
00:22:43,640 --> 00:22:45,470
this point it's always the set is always

455
00:22:45,470 --> 00:22:47,480
the last line we can see that we have

456
00:22:47,480 --> 00:22:51,770
three variable in our state then to

457
00:22:51,770 --> 00:22:55,670
reach the to do the code path when the

458
00:22:55,670 --> 00:22:59,450
condition is true we're creating a fork

459
00:22:59,450 --> 00:23:02,750
for this specific condition and then

460
00:23:02,750 --> 00:23:05,630
we're close would probably be closing

461
00:23:05,630 --> 00:23:08,570
the the code for this specific method by

462
00:23:08,570 --> 00:23:12,320
doing the the condition to be true but

463
00:23:12,320 --> 00:23:13,790
we also need to do that

464
00:23:13,790 --> 00:23:15,860
for when the condition is false and this

465
00:23:15,860 --> 00:23:17,330
would create a different code pad and

466
00:23:17,330 --> 00:23:24,170
different symbol India so symbolic you

467
00:23:24,170 --> 00:23:27,770
section is I is often associated with

468
00:23:27,770 --> 00:23:29,750
taint analysis so tenderizes is closely

469
00:23:29,750 --> 00:23:33,670
related so tetanus will cover tracking

470
00:23:33,670 --> 00:23:37,100
including of values because in security

471
00:23:37,100 --> 00:23:39,260
sometime you need to either sanitize

472
00:23:39,260 --> 00:23:41,570
value or ankle them properly for their

473
00:23:41,570 --> 00:23:44,560
contacts so we're not just going to try

474
00:23:44,560 --> 00:23:47,210
track a symbol but we're also gonna

475
00:23:47,210 --> 00:23:51,700
track state of each value

476
00:23:52,420 --> 00:23:55,640
so what are we targeting within devices

477
00:23:55,640 --> 00:23:59,030
so we have a pseudo code on the Left

478
00:23:59,030 --> 00:24:01,340
would be a safe case where we have two

479
00:24:01,340 --> 00:24:03,470
constant value being concatenate and

480
00:24:03,470 --> 00:24:07,400
pass to a query language equity I I mean

481
00:24:07,400 --> 00:24:10,430
and on the Left we have a concatenation

482
00:24:10,430 --> 00:24:14,900
but it contains a user input and there

483
00:24:14,900 --> 00:24:19,340
we need to transfer the state and and at

484
00:24:19,340 --> 00:24:21,260
the point where we can analyze the apply

485
00:24:21,260 --> 00:24:24,830
filter we need to be able to reach the

486
00:24:24,830 --> 00:24:28,340
point where C is as the tank the tainted

487
00:24:28,340 --> 00:24:33,770
the state so quickly if we do the

488
00:24:33,770 --> 00:24:36,620
symbolic execution we assign user ID to

489
00:24:36,620 --> 00:24:42,110
a then we assign to be a user input so

490
00:24:42,110 --> 00:24:45,200
at this point B is considered tanked so

491
00:24:45,200 --> 00:24:48,110
if we look at the table we see that we

492
00:24:48,110 --> 00:24:51,560
have two variable initialize and then if

493
00:24:51,560 --> 00:24:53,780
we do the computation of both at this

494
00:24:53,780 --> 00:24:55,910
point we need to consider that that C

495
00:24:55,910 --> 00:24:58,880
contains ten variable or is influenced

496
00:24:58,880 --> 00:25:01,040
by one and as a result will be also

497
00:25:01,040 --> 00:25:07,760
tainted so in practice thickness it's

498
00:25:07,760 --> 00:25:11,930
much more complex than just but not that

499
00:25:11,930 --> 00:25:14,180
complex but there's not just paint and

500
00:25:14,180 --> 00:25:17,090
painted in front security bugs just to

501
00:25:17,090 --> 00:25:19,340
give you a specific example for the -

502
00:25:19,340 --> 00:25:22,610
I'm gonna demo tainted will be any value

503
00:25:22,610 --> 00:25:24,830
that is known to be unsafe so if there

504
00:25:24,830 --> 00:25:27,520
are eighty are recognized to have

505
00:25:27,520 --> 00:25:30,400
are we user input these will be a flag

506
00:25:30,400 --> 00:25:32,950
as tainted unknown will be a state that

507
00:25:32,950 --> 00:25:35,710
we applied to any variable that is

508
00:25:35,710 --> 00:25:37,270
coming from external meta that we don't

509
00:25:37,270 --> 00:25:40,420
know safe will be a variable that has

510
00:25:40,420 --> 00:25:41,980
been sanitized so for example if you

511
00:25:41,980 --> 00:25:45,070
have a string that you guess to end at

512
00:25:45,070 --> 00:25:47,710
the point where it's an end it can be

513
00:25:47,710 --> 00:25:50,020
passed to any foreign language will be

514
00:25:50,020 --> 00:25:52,090
pretty sure that there's no injection

515
00:25:52,090 --> 00:25:54,880
possible a constant will be are called

516
00:25:54,880 --> 00:25:57,580
values so if we do we have a lot of

517
00:25:57,580 --> 00:25:59,590
condition but Indian were just getting

518
00:25:59,590 --> 00:26:02,920
constant string there won't be a

519
00:26:02,920 --> 00:26:05,230
potential extradition for example for

520
00:26:05,230 --> 00:26:07,300
SQL injection if it's always a

521
00:26:07,300 --> 00:26:12,520
combination of constant value so those

522
00:26:12,520 --> 00:26:15,160
are the four basics played in French PD

523
00:26:15,160 --> 00:26:16,900
bugs but we have also another concept of

524
00:26:16,900 --> 00:26:19,780
tags where variable will be tracked and

525
00:26:19,780 --> 00:26:22,240
there will be state I waited to specific

526
00:26:22,240 --> 00:26:24,430
context so if you ain't good value for

527
00:26:24,430 --> 00:26:28,650
XSS or encode you specific API that are

528
00:26:28,650 --> 00:26:30,970
including specifically for this context

529
00:26:30,970 --> 00:26:33,570
they will be tagged as instances safe

530
00:26:33,570 --> 00:26:37,900
decode them the tag will be removed but

531
00:26:37,900 --> 00:26:41,860
the idea that we don't want to whenever

532
00:26:41,860 --> 00:26:45,760
you is escape with SQL API and return in

533
00:26:45,760 --> 00:26:48,280
HTML to be considered as sighs because

534
00:26:48,280 --> 00:26:50,650
it's not the right context every context

535
00:26:50,650 --> 00:26:56,320
should I have a specific end call a demo

536
00:26:56,320 --> 00:27:00,370
time so I wanted to do a demo that I

537
00:27:00,370 --> 00:27:03,580
have a lot of interesting difference so

538
00:27:03,580 --> 00:27:06,940
for this one I'm gonna demo the second

539
00:27:06,940 --> 00:27:08,980
Isis but on a binary so just to show you

540
00:27:08,980 --> 00:27:12,040
that such an Isis doesn't apply only

541
00:27:12,040 --> 00:27:13,750
when you have source code so here we're

542
00:27:13,750 --> 00:27:16,420
going to take renewable and read

543
00:27:16,420 --> 00:27:20,770
application I'm gonna use a few to EP

544
00:27:20,770 --> 00:27:23,920
key to to extract and rain manifests so

545
00:27:23,920 --> 00:27:25,960
if you are doing manual analysis you

546
00:27:25,960 --> 00:27:27,550
might want to look at entry point like

547
00:27:27,550 --> 00:27:31,330
activity it's also going to extract in a

548
00:27:31,330 --> 00:27:34,230
small the version that this sample code

549
00:27:34,230 --> 00:27:37,090
but the main command we need to use to

550
00:27:37,090 --> 00:27:38,830
do as the second axis will be text

551
00:27:38,830 --> 00:27:41,260
pajara which will be converting

552
00:27:41,260 --> 00:27:44,590
the classes point the decks to a jar

553
00:27:44,590 --> 00:27:46,929
file and then a fine sweetie bugs will

554
00:27:46,929 --> 00:27:49,030
be able to scan the jar and I output a

555
00:27:49,030 --> 00:27:55,410
report of gravity so I'm gonna try this

556
00:28:08,419 --> 00:28:11,419
even

557
00:28:15,240 --> 00:28:17,730
okay so I've already prepared already

558
00:28:17,730 --> 00:28:21,510
unzip the the etk so I'm using insecure

559
00:28:21,510 --> 00:28:26,429
bank v2 so it's a real novel application

560
00:28:26,429 --> 00:28:27,419
so I'm not taking a commercial

561
00:28:27,419 --> 00:28:29,610
application you can find this project if

562
00:28:29,610 --> 00:28:31,529
you want to learn about mobile security

563
00:28:31,529 --> 00:28:35,010
for Android platform this is a good

564
00:28:35,010 --> 00:28:36,779
application because you can it's a

565
00:28:36,779 --> 00:28:38,669
working application is not just a code

566
00:28:38,669 --> 00:28:40,950
sample you can run it and stall it of

567
00:28:40,950 --> 00:28:44,340
the de code also do dynamic analysis but

568
00:28:44,340 --> 00:28:47,159
we're going to do just a static a scan

569
00:28:47,159 --> 00:28:50,100
to it so I have unzipped the EP key

570
00:28:50,100 --> 00:28:53,429
so this will be the content of apk unzip

571
00:28:53,429 --> 00:28:55,649
where we're going to see the classical

572
00:28:55,649 --> 00:29:01,340
Dex and in apk - I also have extract the

573
00:29:01,340 --> 00:29:06,419
manifest the other forward to zoom out -

574
00:29:06,419 --> 00:29:12,080
just I remember the command

575
00:29:16,500 --> 00:29:18,840
so again the target will be their

576
00:29:18,840 --> 00:29:21,780
classes the decks that have been

577
00:29:21,780 --> 00:29:26,760
actually already convert to classes.dex

578
00:29:26,760 --> 00:29:29,570
which are after running the the decks

579
00:29:29,570 --> 00:29:31,080
destroy command

580
00:29:31,080 --> 00:29:33,450
so this takes a thirty second but it's

581
00:29:33,450 --> 00:29:39,179
not that interesting and could be to go

582
00:29:39,179 --> 00:29:42,650
faster this

583
00:29:49,210 --> 00:29:53,230
and next so I'm running here fine CPD

584
00:29:53,230 --> 00:29:56,770
bugs with just a few argument progress

585
00:29:56,770 --> 00:29:58,600
because it's going to take more time

586
00:29:58,600 --> 00:30:00,850
than the previous tool the output format

587
00:30:00,850 --> 00:30:05,770
is HTML just the family of the report so

588
00:30:05,770 --> 00:30:07,660
it's very similar to the comment we saw

589
00:30:07,660 --> 00:30:09,790
previously the target will need to be a

590
00:30:09,790 --> 00:30:13,030
jar so it's not Java file or you need to

591
00:30:13,030 --> 00:30:19,480
have the compiled form and I'm gonna so

592
00:30:19,480 --> 00:30:21,580
the report will you'll get will

593
00:30:21,580 --> 00:30:23,890
reference to class and method but if

594
00:30:23,890 --> 00:30:25,240
it's not compiling in debug you won't

595
00:30:25,240 --> 00:30:28,660
get a line of code but it will be

596
00:30:28,660 --> 00:30:30,520
precise enough because for example if

597
00:30:30,520 --> 00:30:34,180
it's potential there's going to be a lot

598
00:30:34,180 --> 00:30:35,740
of information all soft so if I suppose

599
00:30:35,740 --> 00:30:38,290
if webview have JavaScript enabled it

600
00:30:38,290 --> 00:30:39,970
will flag you in this method in this

601
00:30:39,970 --> 00:30:43,870
activity but with a disassembler at the

602
00:30:43,870 --> 00:30:45,280
compiler i mean you'll be able to

603
00:30:45,280 --> 00:30:48,550
quickly navigate as if it would be in an

604
00:30:48,550 --> 00:30:54,460
ide so i'm gonna open this assembler the

605
00:30:54,460 --> 00:30:56,760
compiler

606
00:31:06,840 --> 00:31:10,169
[Music]

607
00:31:24,510 --> 00:31:29,010
I should have saved the free generate

608
00:31:29,010 --> 00:31:31,380
report but in the end okay I'm just

609
00:31:31,380 --> 00:31:33,930
gonna show the the code so one thing to

610
00:31:33,930 --> 00:31:37,920
remember when IPA ATK our build you're

611
00:31:37,920 --> 00:31:38,820
going to see the code of your

612
00:31:38,820 --> 00:31:40,110
application but also all the

613
00:31:40,110 --> 00:31:42,780
dependencies of the application so if

614
00:31:42,780 --> 00:31:45,420
you see in the potential issue package

615
00:31:45,420 --> 00:31:48,180
name that are not from your code you can

616
00:31:48,180 --> 00:31:50,250
decide to look at it but mostly you're

617
00:31:50,250 --> 00:31:53,220
going to do code audit on a Google API

618
00:31:53,220 --> 00:31:57,060
of Android or looking at specific

619
00:31:57,060 --> 00:31:58,260
components so we're going to see in the

620
00:31:58,260 --> 00:32:02,340
report to false-positive here

621
00:32:02,340 --> 00:32:05,610
again it's an HTML report it has by the

622
00:32:05,610 --> 00:32:07,560
way intuition with Android view so if

623
00:32:07,560 --> 00:32:09,180
you want to have a better experience at

624
00:32:09,180 --> 00:32:11,400
navigating through the issue there's a

625
00:32:11,400 --> 00:32:13,980
plug-in for spot bugs that will

626
00:32:13,980 --> 00:32:18,180
integrate to Android studio so I'm just

627
00:32:18,180 --> 00:32:21,990
gonna take tuition show you some example

628
00:32:21,990 --> 00:32:25,530
so here it found that there's a I'm

629
00:32:25,530 --> 00:32:26,550
gonna zoom just to be sure

630
00:32:26,550 --> 00:32:29,910
everybody can read so in this class

631
00:32:29,910 --> 00:32:34,410
crypto class method aes-256 encrypt it

632
00:32:34,410 --> 00:32:36,450
found that the the ID is not properly

633
00:32:36,450 --> 00:32:39,990
initialized so we don't have the source

634
00:32:39,990 --> 00:32:41,910
code because it was analyzing byte code

635
00:32:41,910 --> 00:32:44,130
and reading the the byte code will be a

636
00:32:44,130 --> 00:32:47,280
artery but we can simply jump to the

637
00:32:47,280 --> 00:32:51,330
class looking at the package name error

638
00:32:51,330 --> 00:32:56,460
crypto class we find this method here

639
00:32:56,460 --> 00:32:58,920
there's a nice very meaty respect which

640
00:32:58,920 --> 00:33:01,200
will receive as a parameter byte array

641
00:33:01,200 --> 00:33:05,430
that is the ID for the encryption so

642
00:33:05,430 --> 00:33:07,890
here it couldn't find a random

643
00:33:07,890 --> 00:33:10,620
generation that was sicker so if we just

644
00:33:10,620 --> 00:33:15,570
trace back where this method is used do

645
00:33:15,570 --> 00:33:19,080
a quick search we can see that it's been

646
00:33:19,080 --> 00:33:24,890
used here and the value of egg white

647
00:33:24,890 --> 00:33:29,340
iron is coming from this field and you

648
00:33:29,340 --> 00:33:32,280
can see that the developer so I need to

649
00:33:32,280 --> 00:33:34,320
pass an IV you need to be an array of

650
00:33:34,320 --> 00:33:37,200
this size I'm gonna size it to 0 0 0 so

651
00:33:37,200 --> 00:33:38,580
obviously

652
00:33:38,580 --> 00:33:41,220
this is bad for crypto because the first

653
00:33:41,220 --> 00:33:44,150
block will be an Afghani a

654
00:33:44,150 --> 00:33:47,220
confidentiality issue potentially we can

655
00:33:47,220 --> 00:33:49,410
also see that at some time that the key

656
00:33:49,410 --> 00:33:52,230
was also are coded this will be flagged

657
00:33:52,230 --> 00:33:54,750
in another issue but the idea is that if

658
00:33:54,750 --> 00:33:57,180
you have a PK you have tons of co2 arise

659
00:33:57,180 --> 00:33:59,670
if you didn't love it you yourself and

660
00:33:59,670 --> 00:34:02,250
the second Isis too can save you some

661
00:34:02,250 --> 00:34:04,260
time because you will scan at the same

662
00:34:04,260 --> 00:34:06,630
times the main code and also the

663
00:34:06,630 --> 00:34:08,520
libraries that are a bundle with the the

664
00:34:08,520 --> 00:34:11,300
apk so you gain some efficiency and

665
00:34:11,300 --> 00:34:14,010
there's also I'm going to show you if

666
00:34:14,010 --> 00:34:17,190
you are there's a type of issue that it

667
00:34:17,190 --> 00:34:21,840
can find broadcast event so broadcast

668
00:34:21,840 --> 00:34:23,730
event or event

669
00:34:23,730 --> 00:34:26,370
anthem that are sent in Android between

670
00:34:26,370 --> 00:34:28,560
application so if you don't have the

671
00:34:28,560 --> 00:34:31,440
proper permission applied you'll be

672
00:34:31,440 --> 00:34:33,960
potentially able to intercept them from

673
00:34:33,960 --> 00:34:36,870
a malicious application if we just look

674
00:34:36,870 --> 00:34:42,449
at one example here it's the broadcast

675
00:34:42,449 --> 00:34:44,340
intent could be received by malicious

676
00:34:44,340 --> 00:34:46,320
application we're going to look at the

677
00:34:46,320 --> 00:34:50,820
class where it was found from the mid

678
00:34:50,820 --> 00:34:53,040
third broadcast Change Password SMS

679
00:34:53,040 --> 00:34:58,230
sounds interesting it's the first method

680
00:34:58,230 --> 00:35:01,860
and already you can see that every time

681
00:35:01,860 --> 00:35:05,460
the the user will change the password

682
00:35:05,460 --> 00:35:07,950
it's gonna broadcast an event with it's

683
00:35:07,950 --> 00:35:11,400
phone number and is new password so this

684
00:35:11,400 --> 00:35:13,500
could be information leakage if the

685
00:35:13,500 --> 00:35:15,780
version are not set correctly in the

686
00:35:15,780 --> 00:35:21,130
manifest so that's it for this demo

687
00:35:21,130 --> 00:35:24,369
[Music]

688
00:35:30,890 --> 00:35:33,410
and by the way a fancy b-bugs work on

689
00:35:33,410 --> 00:35:35,570
bytecode so you'll be able to scan and

690
00:35:35,570 --> 00:35:37,370
read application but also a java web

691
00:35:37,370 --> 00:35:39,920
application cutlet application and

692
00:35:39,920 --> 00:35:45,460
groovy application scalloped also a

693
00:35:46,690 --> 00:35:51,050
symbolic execution the reason I present

694
00:35:51,050 --> 00:35:52,760
friendship it works because we're doing

695
00:35:52,760 --> 00:35:54,760
a temp analysis and symbolic execution

696
00:35:54,760 --> 00:35:57,140
for every method that's why the tool

697
00:35:57,140 --> 00:35:59,990
took a bit longer to scan this

698
00:35:59,990 --> 00:36:04,640
application error there are a few

699
00:36:04,640 --> 00:36:06,590
problem with some allocation or at least

700
00:36:06,590 --> 00:36:09,380
limitation we're not awful positive will

701
00:36:09,380 --> 00:36:11,720
be limited because there's not a thing

702
00:36:11,720 --> 00:36:15,020
that we don't know in a static hope so

703
00:36:15,020 --> 00:36:18,470
here just to do a summary of what I'm

704
00:36:18,470 --> 00:36:19,970
trying to show up there's the second

705
00:36:19,970 --> 00:36:22,640
method that as a a signature of SQL

706
00:36:22,640 --> 00:36:24,830
injection birthing is that there's

707
00:36:24,830 --> 00:36:27,800
another method that receiver end that

708
00:36:27,800 --> 00:36:30,020
will convert the end automatically to a

709
00:36:30,020 --> 00:36:32,540
string so we could say okay the the

710
00:36:32,540 --> 00:36:35,450
metal in in our code is only calling the

711
00:36:35,450 --> 00:36:38,170
first function so won't be novel because

712
00:36:38,170 --> 00:36:41,840
since it's an int we cannot do any

713
00:36:41,840 --> 00:36:44,240
malicious payload from it the thing is

714
00:36:44,240 --> 00:36:46,190
that sometimes when we're scanning code

715
00:36:46,190 --> 00:36:48,230
we don't know if we are scanning

716
00:36:48,230 --> 00:36:50,990
everything sometimes we might miss code

717
00:36:50,990 --> 00:36:52,490
that are coming from libraries or

718
00:36:52,490 --> 00:36:55,250
external component also the code may be

719
00:36:55,250 --> 00:36:57,830
subject to change so at some point the

720
00:36:57,830 --> 00:36:59,210
second method might be call directly

721
00:36:59,210 --> 00:37:02,380
from new code so for this reason

722
00:37:02,380 --> 00:37:04,640
depending on the tool some will decide

723
00:37:04,640 --> 00:37:06,860
to maybe say it's a false positives

724
00:37:06,860 --> 00:37:09,500
because I'll call path passed by first

725
00:37:09,500 --> 00:37:12,470
method but some tool will decide ok well

726
00:37:12,470 --> 00:37:15,050
can i stuff like them so there is a lot

727
00:37:15,050 --> 00:37:16,540
of complexity that comes

728
00:37:16,540 --> 00:37:18,830
doing some allocation across different

729
00:37:18,830 --> 00:37:23,480
method yeah so the big question when

730
00:37:23,480 --> 00:37:24,800
we're analyzing this code and we're

731
00:37:24,800 --> 00:37:25,670
trying to automatically

732
00:37:25,670 --> 00:37:29,900
confirm it at certainty is is the second

733
00:37:29,900 --> 00:37:31,730
one call directly somewhere else that we

734
00:37:31,730 --> 00:37:35,420
don't in see other big thing that that

735
00:37:35,420 --> 00:37:37,010
would be big obstacle for the second

736
00:37:37,010 --> 00:37:40,430
Isis reflection so you might think that

737
00:37:40,430 --> 00:37:42,410
this method is only called at these four

738
00:37:42,410 --> 00:37:44,630
planes but they are the

739
00:37:44,630 --> 00:37:46,460
component that do reflection so sometime

740
00:37:46,460 --> 00:37:48,710
it will be emphasized that symmetrical

741
00:37:48,710 --> 00:37:51,110
I have framework do a lot of reflections

742
00:37:51,110 --> 00:37:53,270
or sometime Saturday metal would be

743
00:37:53,270 --> 00:37:56,660
called automatically so that of thinking

744
00:37:56,660 --> 00:37:57,250
happens

745
00:37:57,250 --> 00:38:00,770
dependency injection so to do a some

746
00:38:00,770 --> 00:38:02,150
abstraction between component you

747
00:38:02,150 --> 00:38:05,710
sometime people make a public interface

748
00:38:05,710 --> 00:38:07,970
so your service will implement an

749
00:38:07,970 --> 00:38:09,590
interface and you are potentially

750
00:38:09,590 --> 00:38:12,200
multiple implementation so if you scan

751
00:38:12,200 --> 00:38:14,510
your code what is telling you that you

752
00:38:14,510 --> 00:38:16,430
have seen all the implementation of this

753
00:38:16,430 --> 00:38:19,190
specific interface maybe at runtime once

754
00:38:19,190 --> 00:38:21,200
the application is deployed something

755
00:38:21,200 --> 00:38:22,730
was missing and there's another

756
00:38:22,730 --> 00:38:25,360
component that is variable for example

757
00:38:25,360 --> 00:38:29,090
second order of unity so we're doing

758
00:38:29,090 --> 00:38:31,100
symbolic instruction and tracking down

759
00:38:31,100 --> 00:38:33,950
user input but what what if the user

760
00:38:33,950 --> 00:38:36,380
input is saved to the database and then

761
00:38:36,380 --> 00:38:39,260
use later because most transactional

762
00:38:39,260 --> 00:38:43,370
website for example if you had my store

763
00:38:43,370 --> 00:38:46,370
and you add to your card some something

764
00:38:46,370 --> 00:38:50,650
and you order finally your your card

765
00:38:50,650 --> 00:38:52,730
that everything will be made at the

766
00:38:52,730 --> 00:38:54,860
moment where you click order so usually

767
00:38:54,860 --> 00:38:56,540
it's going to be sent to a queue and

768
00:38:56,540 --> 00:38:59,060
eventually the event will be processed

769
00:38:59,060 --> 00:39:02,240
so because there's a lot of queues and

770
00:39:02,240 --> 00:39:05,450
delay it's early for some finances to to

771
00:39:05,450 --> 00:39:07,310
see that this specific value was

772
00:39:07,310 --> 00:39:09,230
actually a user input some down

773
00:39:09,230 --> 00:39:11,260
somewhere down the line

774
00:39:11,260 --> 00:39:14,300
encapsulation so it's that second Isis

775
00:39:14,300 --> 00:39:17,660
to make big effort at an affine API so

776
00:39:17,660 --> 00:39:19,760
there are standard api in every language

777
00:39:19,760 --> 00:39:23,510
to do all kind of stuff parsing XML SQL

778
00:39:23,510 --> 00:39:25,790
stuff the thing is that developer will

779
00:39:25,790 --> 00:39:30,530
wrap those API in a library for more

780
00:39:30,530 --> 00:39:33,050
efficiency it's not a bad practice but

781
00:39:33,050 --> 00:39:34,610
first and second Isis - it's making it

782
00:39:34,610 --> 00:39:38,960
harder to see those API because it will

783
00:39:38,960 --> 00:39:40,490
flag only potential either

784
00:39:40,490 --> 00:39:44,000
the rapp API and if the somebody is

785
00:39:44,000 --> 00:39:46,250
meant doing a cache for example and

786
00:39:46,250 --> 00:39:49,100
marking up this case is only used at

787
00:39:49,100 --> 00:39:52,310
those place and I know it's I will mark

788
00:39:52,310 --> 00:39:53,690
it as the false positives but at some

789
00:39:53,690 --> 00:39:55,880
point the encapsulate ETI might be used

790
00:39:55,880 --> 00:39:58,300
wrongly and in other contexts

791
00:39:58,300 --> 00:40:02,460
so this appala lots in the frameworks

792
00:40:03,660 --> 00:40:08,170
last component because rates integration

793
00:40:08,170 --> 00:40:11,530
this is a step this is not waited to

794
00:40:11,530 --> 00:40:14,980
call internal tools internal but more a

795
00:40:14,980 --> 00:40:17,470
concept that you can add to gain more

796
00:40:17,470 --> 00:40:19,480
efficiency if you have a development

797
00:40:19,480 --> 00:40:22,300
team that is pushing a lot of code you

798
00:40:22,300 --> 00:40:24,280
not want to wait at the last minute to

799
00:40:24,280 --> 00:40:28,570
do code review so for this part I'm

800
00:40:28,570 --> 00:40:31,180
going to do them all with brakeman if

801
00:40:31,180 --> 00:40:33,580
you are doing a reapplication or most

802
00:40:33,580 --> 00:40:36,610
specifically rail application this is a

803
00:40:36,610 --> 00:40:40,950
pretty good tool to do automate analysis

804
00:40:40,950 --> 00:40:44,759
so the more time

805
00:40:54,779 --> 00:40:55,580
Oh

806
00:40:55,580 --> 00:40:58,679
[Music]

807
00:41:02,960 --> 00:41:05,839
okay the application and analyze is

808
00:41:05,839 --> 00:41:12,559
called real goat zoom real goat is I

809
00:41:12,559 --> 00:41:14,599
think it's on a West project but I'm not

810
00:41:14,599 --> 00:41:20,599
sure so again pretty simple they come

811
00:41:20,599 --> 00:41:26,059
and so we just need to specify the scope

812
00:41:26,059 --> 00:41:28,130
so here that is representing the trend

813
00:41:28,130 --> 00:41:32,390
folder and the - oh is the output report

814
00:41:32,390 --> 00:41:34,250
and brakeman just looking at the

815
00:41:34,250 --> 00:41:37,880
extension will will decide this would be

816
00:41:37,880 --> 00:41:39,800
the format so you can export to that

817
00:41:39,800 --> 00:41:47,960
HTML that json dot xml also so pretty

818
00:41:47,960 --> 00:41:50,780
quick it's a small application so again

819
00:41:50,780 --> 00:41:53,630
i'm going to show you the report i just

820
00:41:53,630 --> 00:41:56,720
show you how does it look so you'll have

821
00:41:56,720 --> 00:41:58,339
a summary of the different type of unit

822
00:41:58,339 --> 00:42:02,809
it found and you can also look at each

823
00:42:02,809 --> 00:42:06,410
of a gorge individually each issue and

824
00:42:06,410 --> 00:42:10,400
see the the code that is potentially

825
00:42:10,400 --> 00:42:15,470
week or number so the reason I'm showing

826
00:42:15,470 --> 00:42:18,049
brakeman is because there are some easy

827
00:42:18,049 --> 00:42:20,960
integration to continuous integration so

828
00:42:20,960 --> 00:42:21,920
I'm gonna show you in a moment

829
00:42:21,920 --> 00:42:25,930
oh you can also integrate this tool to a

830
00:42:25,930 --> 00:42:32,809
higher level a feature so this was just

831
00:42:32,809 --> 00:42:36,380
a quick demo to show you the tool as it

832
00:42:36,380 --> 00:42:39,770
as it most basic form so continuously

833
00:42:39,770 --> 00:42:42,460
creative Asia just to get a definition

834
00:42:42,460 --> 00:42:45,589
this will be in development not just a

835
00:42:45,589 --> 00:42:48,140
concept for security but just the the

836
00:42:48,140 --> 00:42:50,480
process of merging all your artifact to

837
00:42:50,480 --> 00:42:52,670
build your application so the most basic

838
00:42:52,670 --> 00:42:54,770
form is simply I compile in your

839
00:42:54,770 --> 00:42:56,510
application if you're building

840
00:42:56,510 --> 00:42:58,329
automatically your application on a

841
00:42:58,329 --> 00:43:03,200
server you are doing CI you can also add

842
00:43:03,200 --> 00:43:06,140
tasks to this so you can also after the

843
00:43:06,140 --> 00:43:08,450
completion is done run tests and do

844
00:43:08,450 --> 00:43:10,609
covariances and worried talk about

845
00:43:10,609 --> 00:43:13,609
colonizes so the idea is that you could

846
00:43:13,609 --> 00:43:16,099
use a plastic alliances tool for

847
00:43:16,099 --> 00:43:17,010
security

848
00:43:17,010 --> 00:43:19,980
and integrate them to your builds and

849
00:43:19,980 --> 00:43:22,580
most to have integration already or

850
00:43:22,580 --> 00:43:26,360
sometimes some scrip are needed to just

851
00:43:26,360 --> 00:43:28,890
glue some component and produce the

852
00:43:28,890 --> 00:43:34,890
report you want so I'm showing how you

853
00:43:34,890 --> 00:43:38,580
can evaluate make your process evolved

854
00:43:38,580 --> 00:43:41,040
to the process to the point where you

855
00:43:41,040 --> 00:43:42,450
have continuous integration so the most

856
00:43:42,450 --> 00:43:45,210
basic form will be just starting do

857
00:43:45,210 --> 00:43:46,920
encourage you if you are not doing code

858
00:43:46,920 --> 00:43:49,380
review in general just implementing the

859
00:43:49,380 --> 00:43:51,630
process would be a first step then you

860
00:43:51,630 --> 00:43:54,900
can analyze different to and find one

861
00:43:54,900 --> 00:43:57,780
that is efficient then integrate it to

862
00:43:57,780 --> 00:44:00,990
your process so you would have here

863
00:44:00,990 --> 00:44:03,570
affinity coming from a tool and manual

864
00:44:03,570 --> 00:44:06,060
code review and you can add to this

865
00:44:06,060 --> 00:44:08,760
finally the continuous integration would

866
00:44:08,760 --> 00:44:10,620
be to run this tool continuously and

867
00:44:10,620 --> 00:44:12,480
potentially generate report and that's

868
00:44:12,480 --> 00:44:17,700
efficient to developers so it's not one

869
00:44:17,700 --> 00:44:20,820
is not replacing another it's simply a

870
00:44:20,820 --> 00:44:27,030
component adding to another the second

871
00:44:27,030 --> 00:44:29,160
demo I want to do for brakeman is true

872
00:44:29,160 --> 00:44:31,590
you are simple it can be to do a

873
00:44:31,590 --> 00:44:35,580
continuous integration configuration so

874
00:44:35,580 --> 00:44:38,370
for this one I'm going to show you how

875
00:44:38,370 --> 00:44:42,480
to use how to configure Jenkins to run a

876
00:44:42,480 --> 00:44:48,510
big break man in assam in a moment so

877
00:44:48,510 --> 00:44:51,120
era have a junkie and installation that

878
00:44:51,120 --> 00:44:56,460
has when a free configure build so it's

879
00:44:56,460 --> 00:44:58,230
actually scanning the same color as your

880
00:44:58,230 --> 00:45:03,750
previous well go project but here I have

881
00:45:03,750 --> 00:45:07,700
done a three simple configuration so the

882
00:45:07,700 --> 00:45:10,500
first step I want to configure is the

883
00:45:10,500 --> 00:45:12,240
source so it will fetch the code from

884
00:45:12,240 --> 00:45:15,030
this repository I have configure so here

885
00:45:15,030 --> 00:45:20,490
it's a public report from github the

886
00:45:20,490 --> 00:45:23,880
most important step is the brakeman scan

887
00:45:23,880 --> 00:45:27,240
so pretty much the same the only

888
00:45:27,240 --> 00:45:29,310
difference I'm doing is I'm exporting to

889
00:45:29,310 --> 00:45:30,660
the JSON format

890
00:45:30,660 --> 00:45:34,079
which will be analyzed by the Jenkins

891
00:45:34,079 --> 00:45:39,269
plugin I'm adding a pipe true just

892
00:45:39,269 --> 00:45:41,369
because Brickman by default will return

893
00:45:41,369 --> 00:45:44,700
a return code that is not zero if it has

894
00:45:44,700 --> 00:45:47,750
at least one issue but here I want to

895
00:45:47,750 --> 00:45:51,420
successfully return and otherwise it

896
00:45:51,420 --> 00:45:53,660
won't run that the post build operation

897
00:45:53,660 --> 00:45:56,970
and the post bill operations I needed to

898
00:45:56,970 --> 00:46:00,769
install a plug-in for this but this is a

899
00:46:00,769 --> 00:46:04,980
thanks this is in the storage engine so

900
00:46:04,980 --> 00:46:07,140
it's not that complicated to install and

901
00:46:07,140 --> 00:46:09,359
by default it will look for a brakeman

902
00:46:09,359 --> 00:46:11,099
I'll put the JSON so make sure you have

903
00:46:11,099 --> 00:46:15,720
this and how does it look going back to

904
00:46:15,720 --> 00:46:21,150
that project so once it's can I get an

905
00:46:21,150 --> 00:46:23,519
overview like this about my ability so

906
00:46:23,519 --> 00:46:26,549
it's the same result but displayed in a

907
00:46:26,549 --> 00:46:29,009
women to face so one of the advantage of

908
00:46:29,009 --> 00:46:33,450
using Jenkins first it run automatically

909
00:46:33,450 --> 00:46:35,369
so the developer doesn't need to install

910
00:46:35,369 --> 00:46:37,349
a tool make sure it's configured with

911
00:46:37,349 --> 00:46:40,259
the proper rule set also it's easier if

912
00:46:40,259 --> 00:46:42,269
you're opening issue on a bug tracker to

913
00:46:42,269 --> 00:46:46,259
point to a URL that are static rather

914
00:46:46,259 --> 00:46:49,529
than oh come to my desktop I'm gonna

915
00:46:49,529 --> 00:46:52,650
show you in my IDE on my alright just in

916
00:46:52,650 --> 00:46:55,680
my report on my desktop so it's easier

917
00:46:55,680 --> 00:46:58,920
to share at some point actually Jenkins

918
00:46:58,920 --> 00:47:02,160
will will clear the build results but

919
00:47:02,160 --> 00:47:04,349
make sure you are exporting all the

920
00:47:04,349 --> 00:47:08,779
detail to your issue tracker but yeah

921
00:47:09,230 --> 00:47:12,690
I'm gonna go quickly because I only have

922
00:47:12,690 --> 00:47:15,410
five minutes left

923
00:47:15,660 --> 00:47:19,049
[Music]

924
00:47:25,620 --> 00:47:28,200
just as your French - how quickly it can

925
00:47:28,200 --> 00:47:30,600
be to report deploy your Jenkins if you

926
00:47:30,600 --> 00:47:34,380
have not already as reference a simple

927
00:47:34,380 --> 00:47:37,820
example for a brakeman

928
00:47:38,040 --> 00:47:40,590
a bonus I wanted to add I'm developing

929
00:47:40,590 --> 00:47:43,320
an extension for Rosalyn for the net

930
00:47:43,320 --> 00:47:46,350
application there's an interesting

931
00:47:46,350 --> 00:47:48,240
concept with a resident is that you can

932
00:47:48,240 --> 00:47:50,670
identify variety that will be displayed

933
00:47:50,670 --> 00:47:53,730
in Visual Studio so this is one example

934
00:47:53,730 --> 00:47:57,300
that a CPD bug but just to show you the

935
00:47:57,300 --> 00:47:59,840
basic integration but you can also build

936
00:47:59,840 --> 00:48:03,240
refactor code fixes I mean that will do

937
00:48:03,240 --> 00:48:06,000
refactoring a task so instead of just

938
00:48:06,000 --> 00:48:08,400
finding the issue you can also be

939
00:48:08,400 --> 00:48:11,220
creative and do automatic fix for

940
00:48:11,220 --> 00:48:14,670
specific bugs so you will have analyzer

941
00:48:14,670 --> 00:48:16,500
that will analyze the ast3

942
00:48:16,500 --> 00:48:19,830
the abstract syntax tree but you will

943
00:48:19,830 --> 00:48:22,200
have refactoring a task that will

944
00:48:22,200 --> 00:48:24,630
manipulate this abstract syntax tree to

945
00:48:24,630 --> 00:48:31,020
Indian proposed scope fixes fine now I'm

946
00:48:31,020 --> 00:48:32,760
done with the technical stuff related

947
00:48:32,760 --> 00:48:35,370
and demos I want to give you some

948
00:48:35,370 --> 00:48:38,280
feedback at integrating as the thickness

949
00:48:38,280 --> 00:48:41,610
tool to your process so the first thing

950
00:48:41,610 --> 00:48:44,100
is you cannot just really blindly select

951
00:48:44,100 --> 00:48:46,650
the tool and say this black box I'm

952
00:48:46,650 --> 00:48:48,240
gonna use it and I'm going to send it to

953
00:48:48,240 --> 00:48:50,280
the wrapper you first need to make sure

954
00:48:50,280 --> 00:48:53,130
that it's actually it's actually going

955
00:48:53,130 --> 00:48:54,990
to find what you need so if you're using

956
00:48:54,990 --> 00:48:57,600
a specific framework specific API make

957
00:48:57,600 --> 00:49:00,120
sure that it's gonna find the bug that

958
00:49:00,120 --> 00:49:02,910
you want otherwise it will be a false

959
00:49:02,910 --> 00:49:07,650
impression of security so to test - or

960
00:49:07,650 --> 00:49:09,960
compare them they are highly volatile

961
00:49:09,960 --> 00:49:12,510
that have been built by a West project

962
00:49:12,510 --> 00:49:15,240
that is list on top and there are

963
00:49:15,240 --> 00:49:17,100
multiple echo project that will provide

964
00:49:17,100 --> 00:49:20,670
you sample so it can be can give you

965
00:49:20,670 --> 00:49:22,680
some pointers about how can you compare

966
00:49:22,680 --> 00:49:25,130
tools to a very efficient they are

967
00:49:25,130 --> 00:49:28,590
because some two might run pretty quick

968
00:49:28,590 --> 00:49:30,480
but they might have not that mushroom

969
00:49:30,480 --> 00:49:34,440
and so make sure your framework and

970
00:49:34,440 --> 00:49:37,520
specificity are covered

971
00:49:38,730 --> 00:49:43,030
also they are two that are existing so

972
00:49:43,030 --> 00:49:46,060
make sure if you are want to be creative

973
00:49:46,060 --> 00:49:47,470
and you don't want to buy your

974
00:49:47,470 --> 00:49:49,270
commercial tool because also commercial

975
00:49:49,270 --> 00:49:52,060
people are an option if you want to

976
00:49:52,060 --> 00:49:55,120
decide to customize a tool commercial or

977
00:49:55,120 --> 00:49:59,140
public it's like any development project

978
00:49:59,140 --> 00:50:00,940
you're gonna have so come come some

979
00:50:00,940 --> 00:50:03,000
complexities so there's maintains

980
00:50:03,000 --> 00:50:05,920
maintenance as you said to it if you can

981
00:50:05,920 --> 00:50:08,230
reuse as much as possible so for example

982
00:50:08,230 --> 00:50:10,090
if you're building a Python application

983
00:50:10,090 --> 00:50:12,370
why not build an azure built on top of

984
00:50:12,370 --> 00:50:15,370
pendant for example rather than starting

985
00:50:15,370 --> 00:50:18,550
your own project so we use as much as

986
00:50:18,550 --> 00:50:22,270
possible and custom rule I like any code

987
00:50:22,270 --> 00:50:25,960
there's complexity to it so if somebody

988
00:50:25,960 --> 00:50:27,850
somebody in your team is a building tons

989
00:50:27,850 --> 00:50:29,230
of rule but nobody is able to maintain

990
00:50:29,230 --> 00:50:34,830
them it can be a problem

991
00:50:35,100 --> 00:50:39,580
and finally I'm done so I'm giving some

992
00:50:39,580 --> 00:50:41,440
reference so all the tool I have demoed

993
00:50:41,440 --> 00:50:44,590
in this presentation will be in the

994
00:50:44,590 --> 00:50:46,630
slide that will be public and I have

995
00:50:46,630 --> 00:50:49,240
some other links that before so thanks

996
00:50:49,240 --> 00:50:59,920
for coming to my presentation any

997
00:50:59,920 --> 00:51:03,630
question yeah

998
00:51:07,180 --> 00:51:11,480
yes so sonikku was mentioned so

999
00:51:11,480 --> 00:51:15,140
sonarqube is a boat they have their own

1000
00:51:15,140 --> 00:51:19,490
analyzer but it's also a platform it's

1001
00:51:19,490 --> 00:51:21,620
similar to Jenkins but with additional

1002
00:51:21,620 --> 00:51:25,190
stuff that I didn't present so you'll be

1003
00:51:25,190 --> 00:51:27,770
able to plug in as sooner has many

1004
00:51:27,770 --> 00:51:29,840
plugins so I don't know what you want to

1005
00:51:29,840 --> 00:51:33,590
talk about sonar link

1006
00:51:33,590 --> 00:51:38,000
okay so strong argent is analyzer for

1007
00:51:38,000 --> 00:51:40,850
example for Java to run inside ID or

1008
00:51:40,850 --> 00:51:43,100
inside sonarqube so our cube is also an

1009
00:51:43,100 --> 00:51:45,350
interesting opponent because you can add

1010
00:51:45,350 --> 00:51:49,340
a state to your bug so for example if

1011
00:51:49,340 --> 00:51:52,100
you have a big project millions of lines

1012
00:51:52,100 --> 00:51:53,750
of code you might have Android of issue

1013
00:51:53,750 --> 00:51:56,720
that will be flag at the first scan if

1014
00:51:56,720 --> 00:51:58,250
you are doing project you don't want to

1015
00:51:58,250 --> 00:52:00,920
revisit every issue every time you do a

1016
00:52:00,920 --> 00:52:04,250
scan so sonarqube can highlight the new

1017
00:52:04,250 --> 00:52:06,080
issue that were introduced by specific

1018
00:52:06,080 --> 00:52:09,410
commits or specific evolution so that's

1019
00:52:09,410 --> 00:52:12,170
something to look for don't just look at

1020
00:52:12,170 --> 00:52:14,270
result from a specific gun scan try to

1021
00:52:14,270 --> 00:52:15,950
see if there's incremental report and

1022
00:52:15,950 --> 00:52:22,730
feature out this any other question so I

1023
00:52:22,730 --> 00:52:23,990
have a good conference

1024
00:52:23,990 --> 00:52:26,620
Thanks

